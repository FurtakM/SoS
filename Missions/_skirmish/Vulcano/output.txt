// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// PrepareTrigger ;
  15: CALL 40 0 0
// PrepareVulcanoBase ;
  19: CALL 1142 0 0
// PrepareRussian ;
  23: CALL 3838 0 0
// PrepareLegion ;
  27: CALL 8157 0 0
// Action ;
  31: CALL 11688 0 0
// InitArt ;
  35: CALL 241 0 0
// end ;
  39: END
// export base_captured , russian_prepared , ru_can_attack , ru_sib_bomb , chance_to_bomb , player_res_art , artifact_progress , player_artifact_ready , art_icon , time_res_art , player_commander , time_to_reuse , mine_vulc , medal_enabled , debug , dead_counter , kill_counter , veh_counter , tech_counter , sib_contamin_counter , event_legion_attack , event_russian_attack , event_alliance_attack ; function PrepareTrigger ; begin
  40: LD_INT 0
  42: PPUSH
// debug := false ;
  43: LD_ADDR_EXP 15
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// base_captured := false ;
  51: LD_ADDR_EXP 1
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// russian_prepared := false ;
  59: LD_ADDR_EXP 2
  63: PUSH
  64: LD_INT 0
  66: ST_TO_ADDR
// ru_can_attack := false ;
  67: LD_ADDR_EXP 3
  71: PUSH
  72: LD_INT 0
  74: ST_TO_ADDR
// ru_sib_bomb := false ;
  75: LD_ADDR_EXP 4
  79: PUSH
  80: LD_INT 0
  82: ST_TO_ADDR
// chance_to_bomb := [ 5 , 10 , 25 ] [ Difficulty ] ;
  83: LD_ADDR_EXP 5
  87: PUSH
  88: LD_INT 5
  90: PUSH
  91: LD_INT 10
  93: PUSH
  94: LD_INT 25
  96: PUSH
  97: EMPTY
  98: LIST
  99: LIST
 100: LIST
 101: PUSH
 102: LD_OWVAR 67
 106: ARRAY
 107: ST_TO_ADDR
// player_res_art := false ;
 108: LD_ADDR_EXP 6
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// player_artifact_ready := false ;
 116: LD_ADDR_EXP 8
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// art_icon := art_use_atom ;
 124: LD_ADDR_EXP 9
 128: PUSH
 129: LD_INT 7
 131: ST_TO_ADDR
// time_res_art := 600 ;
 132: LD_ADDR_EXP 10
 136: PUSH
 137: LD_INT 600
 139: ST_TO_ADDR
// time_to_reuse := 10 10$00 ;
 140: LD_ADDR_EXP 12
 144: PUSH
 145: LD_INT 21000
 147: ST_TO_ADDR
// mine_vulc := false ;
 148: LD_ADDR_EXP 13
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// medal_enabled := false ;
 156: LD_ADDR_EXP 14
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// dead_counter := 0 ;
 164: LD_ADDR_EXP 16
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// kill_counter := 0 ;
 172: LD_ADDR_EXP 17
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// veh_counter := 0 ;
 180: LD_ADDR_EXP 18
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// tech_counter := 0 ;
 188: LD_ADDR_EXP 19
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// sib_contamin_counter := 0 ;
 196: LD_ADDR_EXP 20
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// artifact_progress := 0 ;
 204: LD_ADDR_EXP 7
 208: PUSH
 209: LD_INT 0
 211: ST_TO_ADDR
// event_legion_attack := 1 ;
 212: LD_ADDR_EXP 21
 216: PUSH
 217: LD_INT 1
 219: ST_TO_ADDR
// event_russian_attack := 2 ;
 220: LD_ADDR_EXP 22
 224: PUSH
 225: LD_INT 2
 227: ST_TO_ADDR
// event_alliance_attack := 3 ;
 228: LD_ADDR_EXP 23
 232: PUSH
 233: LD_INT 3
 235: ST_TO_ADDR
// end ;
 236: LD_VAR 0 1
 240: RET
// function InitArt ; begin
 241: LD_INT 0
 243: PPUSH
// SetArtifactRes ( your_side , true ) ;
 244: LD_OWVAR 2
 248: PPUSH
 249: LD_INT 1
 251: PPUSH
 252: CALL_OW 467
// end ; end_of_file
 256: LD_VAR 0 1
 260: RET
// export us_commander , us_force , us_skill , us_guy ; export function PrepareAmerican ; var i , filter , un , team ; begin
 261: LD_INT 0
 263: PPUSH
 264: PPUSH
 265: PPUSH
 266: PPUSH
 267: PPUSH
// us_skill := [ 7 , 6 , 5 ] [ Difficulty ] ;
 268: LD_ADDR_EXP 26
 272: PUSH
 273: LD_INT 7
 275: PUSH
 276: LD_INT 6
 278: PUSH
 279: LD_INT 5
 281: PUSH
 282: EMPTY
 283: LIST
 284: LIST
 285: LIST
 286: PUSH
 287: LD_OWVAR 67
 291: ARRAY
 292: ST_TO_ADDR
// us_force := [ ] ;
 293: LD_ADDR_EXP 25
 297: PUSH
 298: EMPTY
 299: ST_TO_ADDR
// RemoveEnvironmentArea ( evn ) ;
 300: LD_INT 17
 302: PPUSH
 303: CALL_OW 355
// PrepareAllianceAI ( ) ;
 307: CALL 17088 0 0
// uc_side := 1 ;
 311: LD_ADDR_OWVAR 20
 315: PUSH
 316: LD_INT 1
 318: ST_TO_ADDR
// uc_nation := nation_american ;
 319: LD_ADDR_OWVAR 21
 323: PUSH
 324: LD_INT 1
 326: ST_TO_ADDR
// hc_gallery :=  ;
 327: LD_ADDR_OWVAR 33
 331: PUSH
 332: LD_STRING 
 334: ST_TO_ADDR
// hc_name :=  ;
 335: LD_ADDR_OWVAR 26
 339: PUSH
 340: LD_STRING 
 342: ST_TO_ADDR
// hc_importance := 0 ;
 343: LD_ADDR_OWVAR 32
 347: PUSH
 348: LD_INT 0
 350: ST_TO_ADDR
// for i = 1 to 11 do
 351: LD_ADDR_VAR 0 2
 355: PUSH
 356: DOUBLE
 357: LD_INT 1
 359: DEC
 360: ST_TO_ADDR
 361: LD_INT 11
 363: PUSH
 364: FOR_TO
 365: IFFALSE 418
// begin PrepareHuman ( false , Rand ( 1 , 4 ) , us_skill ) ;
 367: LD_INT 0
 369: PPUSH
 370: LD_INT 1
 372: PPUSH
 373: LD_INT 4
 375: PPUSH
 376: CALL_OW 12
 380: PPUSH
 381: LD_EXP 26
 385: PPUSH
 386: CALL_OW 380
// un := CreateHuman ;
 390: LD_ADDR_VAR 0 4
 394: PUSH
 395: CALL_OW 44
 399: ST_TO_ADDR
// us_force := us_force ^ un ;
 400: LD_ADDR_EXP 25
 404: PUSH
 405: LD_EXP 25
 409: PUSH
 410: LD_VAR 0 4
 414: ADD
 415: ST_TO_ADDR
// end ;
 416: GO 364
 418: POP
 419: POP
// hc_importance := 100 ;
 420: LD_ADDR_OWVAR 32
 424: PUSH
 425: LD_INT 100
 427: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , us_skill ) ;
 428: LD_INT 1
 430: PPUSH
 431: LD_INT 1
 433: PPUSH
 434: LD_EXP 26
 438: PPUSH
 439: CALL_OW 380
// hc_gallery := skirmish ;
 443: LD_ADDR_OWVAR 33
 447: PUSH
 448: LD_STRING skirmish
 450: ST_TO_ADDR
// hc_face_number := 10 ;
 451: LD_ADDR_OWVAR 34
 455: PUSH
 456: LD_INT 10
 458: ST_TO_ADDR
// hc_name := Michael Anderson ;
 459: LD_ADDR_OWVAR 26
 463: PUSH
 464: LD_STRING Michael Anderson
 466: ST_TO_ADDR
// us_commander := CreateHuman ;
 467: LD_ADDR_EXP 24
 471: PUSH
 472: CALL_OW 44
 476: ST_TO_ADDR
// player_commander := us_commander ;
 477: LD_ADDR_EXP 11
 481: PUSH
 482: LD_EXP 24
 486: ST_TO_ADDR
// hc_importance := 0 ;
 487: LD_ADDR_OWVAR 32
 491: PUSH
 492: LD_INT 0
 494: ST_TO_ADDR
// hc_gallery :=  ;
 495: LD_ADDR_OWVAR 33
 499: PUSH
 500: LD_STRING 
 502: ST_TO_ADDR
// team := CharacterSelection ( text , [ 7 , 6 , 5 ] [ Difficulty ] , [ 7 , 6 , 5 ] [ Difficulty ] , [ sel_change_class , us_commander , sel_changeable , sel_not_hired ] ^ us_force , [ class_soldier , [ class_mechanic , 1 ] , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , [ 5 , 5 , - 1 ] [ Difficulty ] ] ) ;
 503: LD_ADDR_VAR 0 5
 507: PUSH
 508: LD_STRING text
 510: PPUSH
 511: LD_INT 7
 513: PUSH
 514: LD_INT 6
 516: PUSH
 517: LD_INT 5
 519: PUSH
 520: EMPTY
 521: LIST
 522: LIST
 523: LIST
 524: PUSH
 525: LD_OWVAR 67
 529: ARRAY
 530: PPUSH
 531: LD_INT 7
 533: PUSH
 534: LD_INT 6
 536: PUSH
 537: LD_INT 5
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: LIST
 544: PUSH
 545: LD_OWVAR 67
 549: ARRAY
 550: PPUSH
 551: LD_INT -5
 553: PUSH
 554: LD_EXP 24
 558: PUSH
 559: LD_INT -3
 561: PUSH
 562: LD_INT -2
 564: PUSH
 565: EMPTY
 566: LIST
 567: LIST
 568: LIST
 569: LIST
 570: PUSH
 571: LD_EXP 25
 575: ADD
 576: PPUSH
 577: LD_INT 1
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 1
 585: PUSH
 586: EMPTY
 587: LIST
 588: LIST
 589: PUSH
 590: LD_INT 2
 592: PUSH
 593: LD_INT 1
 595: PUSH
 596: EMPTY
 597: LIST
 598: LIST
 599: PUSH
 600: LD_INT 4
 602: PUSH
 603: LD_INT 1
 605: PUSH
 606: EMPTY
 607: LIST
 608: LIST
 609: PUSH
 610: LD_INT 5
 612: PUSH
 613: LD_INT 5
 615: PUSH
 616: LD_INT 1
 618: NEG
 619: PUSH
 620: EMPTY
 621: LIST
 622: LIST
 623: LIST
 624: PUSH
 625: LD_OWVAR 67
 629: ARRAY
 630: PUSH
 631: EMPTY
 632: LIST
 633: LIST
 634: LIST
 635: LIST
 636: LIST
 637: PPUSH
 638: CALL_OW 42
 642: ST_TO_ADDR
// team := team ^ us_commander ;
 643: LD_ADDR_VAR 0 5
 647: PUSH
 648: LD_VAR 0 5
 652: PUSH
 653: LD_EXP 24
 657: ADD
 658: ST_TO_ADDR
// for i = 1 to team do
 659: LD_ADDR_VAR 0 2
 663: PUSH
 664: DOUBLE
 665: LD_INT 1
 667: DEC
 668: ST_TO_ADDR
 669: LD_VAR 0 5
 673: PUSH
 674: FOR_TO
 675: IFFALSE 875
// begin if GetClass ( team [ i ] ) = class_mechanic then
 677: LD_VAR 0 5
 681: PUSH
 682: LD_VAR 0 2
 686: ARRAY
 687: PPUSH
 688: CALL_OW 257
 692: PUSH
 693: LD_INT 3
 695: EQUAL
 696: IFFALSE 837
// begin vc_chassis := [ us_medium_tracked , us_heavy_tracked , us_morphling ] [ i mod 3 + 1 ] ;
 698: LD_ADDR_OWVAR 37
 702: PUSH
 703: LD_INT 3
 705: PUSH
 706: LD_INT 4
 708: PUSH
 709: LD_INT 5
 711: PUSH
 712: EMPTY
 713: LIST
 714: LIST
 715: LIST
 716: PUSH
 717: LD_VAR 0 2
 721: PUSH
 722: LD_INT 3
 724: MOD
 725: PUSH
 726: LD_INT 1
 728: PLUS
 729: ARRAY
 730: ST_TO_ADDR
// vc_engine := engine_siberite ;
 731: LD_ADDR_OWVAR 39
 735: PUSH
 736: LD_INT 3
 738: ST_TO_ADDR
// vc_control := control_manual ;
 739: LD_ADDR_OWVAR 38
 743: PUSH
 744: LD_INT 1
 746: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_laser ] [ rand ( 1 , 3 ) ] ;
 747: LD_ADDR_OWVAR 40
 751: PUSH
 752: LD_INT 4
 754: PUSH
 755: LD_INT 5
 757: PUSH
 758: LD_INT 9
 760: PUSH
 761: EMPTY
 762: LIST
 763: LIST
 764: LIST
 765: PUSH
 766: LD_INT 1
 768: PPUSH
 769: LD_INT 3
 771: PPUSH
 772: CALL_OW 12
 776: ARRAY
 777: ST_TO_ADDR
// un := CreateVehicle ;
 778: LD_ADDR_VAR 0 4
 782: PUSH
 783: CALL_OW 45
 787: ST_TO_ADDR
// SetDir ( un , 2 ) ;
 788: LD_VAR 0 4
 792: PPUSH
 793: LD_INT 2
 795: PPUSH
 796: CALL_OW 233
// PlaceUnitArea ( un , start_north , false ) ;
 800: LD_VAR 0 4
 804: PPUSH
 805: LD_INT 1
 807: PPUSH
 808: LD_INT 0
 810: PPUSH
 811: CALL_OW 49
// PlaceHumanInUnit ( team [ i ] , un ) ;
 815: LD_VAR 0 5
 819: PUSH
 820: LD_VAR 0 2
 824: ARRAY
 825: PPUSH
 826: LD_VAR 0 4
 830: PPUSH
 831: CALL_OW 52
// end else
 835: GO 873
// begin PlaceUnitArea ( team [ i ] , start_north , false ) ;
 837: LD_VAR 0 5
 841: PUSH
 842: LD_VAR 0 2
 846: ARRAY
 847: PPUSH
 848: LD_INT 1
 850: PPUSH
 851: LD_INT 0
 853: PPUSH
 854: CALL_OW 49
// ComHold ( team [ i ] ) ;
 858: LD_VAR 0 5
 862: PUSH
 863: LD_VAR 0 2
 867: ARRAY
 868: PPUSH
 869: CALL_OW 140
// end ; end ;
 873: GO 674
 875: POP
 876: POP
// end ;
 877: LD_VAR 0 1
 881: RET
// every 0 0$38 + 2 2$30 trigger tick < 73500 do
 882: LD_OWVAR 1
 886: PUSH
 887: LD_INT 73500
 889: LESS
 890: IFFALSE 917
 892: GO 894
 894: DISABLE
// begin enable ;
 895: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , extra_crates , true ) ;
 896: LD_INT 1
 898: PPUSH
 899: LD_INT 5
 901: PPUSH
 902: CALL_OW 12
 906: PPUSH
 907: LD_INT 23
 909: PPUSH
 910: LD_INT 1
 912: PPUSH
 913: CALL_OW 55
// end ;
 917: END
// every 1 1$10 do var time , p , l ;
 918: GO 920
 920: DISABLE
 921: LD_INT 0
 923: PPUSH
 924: PPUSH
 925: PPUSH
// begin time := 0 0$44 ;
 926: LD_ADDR_VAR 0 1
 930: PUSH
 931: LD_INT 1540
 933: ST_TO_ADDR
// l := 0 ;
 934: LD_ADDR_VAR 0 3
 938: PUSH
 939: LD_INT 0
 941: ST_TO_ADDR
// repeat begin Wait ( time ) ;
 942: LD_VAR 0 1
 946: PPUSH
 947: CALL_OW 67
// l := l + 1 ;
 951: LD_ADDR_VAR 0 3
 955: PUSH
 956: LD_VAR 0 3
 960: PUSH
 961: LD_INT 1
 963: PLUS
 964: ST_TO_ADDR
// if GetListOfCratesInArea ( us_crates ) < 20 then
 965: LD_INT 12
 967: PPUSH
 968: CALL_OW 435
 972: PUSH
 973: LD_INT 20
 975: LESS
 976: IFFALSE 1035
// begin CreateCratesArea ( Rand ( 1 , 5 ) , us_crates , true ) ;
 978: LD_INT 1
 980: PPUSH
 981: LD_INT 5
 983: PPUSH
 984: CALL_OW 12
 988: PPUSH
 989: LD_INT 12
 991: PPUSH
 992: LD_INT 1
 994: PPUSH
 995: CALL_OW 55
// Wait ( Rand ( 0 0$39 , 0 0$48 ) ) ;
 999: LD_INT 1365
1001: PPUSH
1002: LD_INT 1680
1004: PPUSH
1005: CALL_OW 12
1009: PPUSH
1010: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 5 ) , us_crates , true ) ;
1014: LD_INT 1
1016: PPUSH
1017: LD_INT 5
1019: PPUSH
1020: CALL_OW 12
1024: PPUSH
1025: LD_INT 12
1027: PPUSH
1028: LD_INT 1
1030: PPUSH
1031: CALL_OW 55
// end ; p := Rand ( 0 , 1 ) ;
1035: LD_ADDR_VAR 0 2
1039: PUSH
1040: LD_INT 0
1042: PPUSH
1043: LD_INT 1
1045: PPUSH
1046: CALL_OW 12
1050: ST_TO_ADDR
// if p then
1051: LD_VAR 0 2
1055: IFFALSE 1090
// begin Wait ( Rand ( 0 0$09 , 0 0$20 ) ) ;
1057: LD_INT 315
1059: PPUSH
1060: LD_INT 700
1062: PPUSH
1063: CALL_OW 12
1067: PPUSH
1068: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 4 ) , true ) ;
1072: LD_INT 1
1074: PPUSH
1075: LD_INT 4
1077: PPUSH
1078: CALL_OW 12
1082: PPUSH
1083: LD_INT 1
1085: PPUSH
1086: CALL_OW 57
// end ; if l mod [ 15 , 13 , 11 ] [ Difficulty ] = 0 then
1090: LD_VAR 0 3
1094: PUSH
1095: LD_INT 15
1097: PUSH
1098: LD_INT 13
1100: PUSH
1101: LD_INT 11
1103: PUSH
1104: EMPTY
1105: LIST
1106: LIST
1107: LIST
1108: PUSH
1109: LD_OWVAR 67
1113: ARRAY
1114: MOD
1115: PUSH
1116: LD_INT 0
1118: EQUAL
1119: IFFALSE 1135
// time := time + 2 2$00 ;
1121: LD_ADDR_VAR 0 1
1125: PUSH
1126: LD_VAR 0 1
1130: PUSH
1131: LD_INT 4200
1133: PLUS
1134: ST_TO_ADDR
// end until false ;
1135: LD_INT 0
1137: IFFALSE 942
// end ; end_of_file
1139: PPOPN 3
1141: END
// export russians_in_base ; export function PrepareVulcanoBase ; var i , filter , hp , un , area ; begin
1142: LD_INT 0
1144: PPUSH
1145: PPUSH
1146: PPUSH
1147: PPUSH
1148: PPUSH
1149: PPUSH
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) ;
1150: LD_ADDR_VAR 0 3
1154: PUSH
1155: LD_INT 22
1157: PUSH
1158: LD_INT 4
1160: PUSH
1161: EMPTY
1162: LIST
1163: LIST
1164: PUSH
1165: LD_INT 21
1167: PUSH
1168: LD_INT 3
1170: PUSH
1171: EMPTY
1172: LIST
1173: LIST
1174: PUSH
1175: EMPTY
1176: LIST
1177: LIST
1178: PPUSH
1179: CALL_OW 69
1183: ST_TO_ADDR
// hp := [ 470 , 370 , 290 ] [ Difficulty ] ;
1184: LD_ADDR_VAR 0 4
1188: PUSH
1189: LD_INT 470
1191: PUSH
1192: LD_INT 370
1194: PUSH
1195: LD_INT 290
1197: PUSH
1198: EMPTY
1199: LIST
1200: LIST
1201: LIST
1202: PUSH
1203: LD_OWVAR 67
1207: ARRAY
1208: ST_TO_ADDR
// case Difficulty of 2 :
1209: LD_OWVAR 67
1213: PUSH
1214: LD_INT 2
1216: DOUBLE
1217: EQUAL
1218: IFTRUE 1222
1220: GO 1253
1222: POP
// begin DestroyUnit ( UnitFilter ( filter , [ f_btype , b_bunker ] ) [ 1 ] ) ;
1223: LD_VAR 0 3
1227: PPUSH
1228: LD_INT 30
1230: PUSH
1231: LD_INT 32
1233: PUSH
1234: EMPTY
1235: LIST
1236: LIST
1237: PPUSH
1238: CALL_OW 72
1242: PUSH
1243: LD_INT 1
1245: ARRAY
1246: PPUSH
1247: CALL_OW 65
// end ; 3 :
1251: GO 1329
1253: LD_INT 3
1255: DOUBLE
1256: EQUAL
1257: IFTRUE 1261
1259: GO 1328
1261: POP
// begin DestroyUnit ( UnitFilter ( filter , [ f_btype , b_bunker ] ) [ 1 ] ) ;
1262: LD_VAR 0 3
1266: PPUSH
1267: LD_INT 30
1269: PUSH
1270: LD_INT 32
1272: PUSH
1273: EMPTY
1274: LIST
1275: LIST
1276: PPUSH
1277: CALL_OW 72
1281: PUSH
1282: LD_INT 1
1284: ARRAY
1285: PPUSH
1286: CALL_OW 65
// DestroyUnit ( UnitFilter ( filter , [ f_btype , b_solar_power ] ) [ Rand ( 1 , 3 ) ] ) ;
1290: LD_VAR 0 3
1294: PPUSH
1295: LD_INT 30
1297: PUSH
1298: LD_INT 27
1300: PUSH
1301: EMPTY
1302: LIST
1303: LIST
1304: PPUSH
1305: CALL_OW 72
1309: PUSH
1310: LD_INT 1
1312: PPUSH
1313: LD_INT 3
1315: PPUSH
1316: CALL_OW 12
1320: ARRAY
1321: PPUSH
1322: CALL_OW 65
// end ; end ;
1326: GO 1329
1328: POP
// for i = 1 to filter do
1329: LD_ADDR_VAR 0 2
1333: PUSH
1334: DOUBLE
1335: LD_INT 1
1337: DEC
1338: ST_TO_ADDR
1339: LD_VAR 0 3
1343: PUSH
1344: FOR_TO
1345: IFFALSE 1382
// SetLives ( filter [ i ] , hp + Rand ( - 29 , 29 ) ) ;
1347: LD_VAR 0 3
1351: PUSH
1352: LD_VAR 0 2
1356: ARRAY
1357: PPUSH
1358: LD_VAR 0 4
1362: PUSH
1363: LD_INT 29
1365: NEG
1366: PPUSH
1367: LD_INT 29
1369: PPUSH
1370: CALL_OW 12
1374: PLUS
1375: PPUSH
1376: CALL_OW 234
1380: GO 1344
1382: POP
1383: POP
// SetBName ( us_depot , vulcano ) ;
1384: LD_INT 50
1386: PPUSH
1387: LD_STRING vulcano
1389: PPUSH
1390: CALL_OW 500
// hc_importance := 0 ;
1394: LD_ADDR_OWVAR 32
1398: PUSH
1399: LD_INT 0
1401: ST_TO_ADDR
// uc_side := 3 ;
1402: LD_ADDR_OWVAR 20
1406: PUSH
1407: LD_INT 3
1409: ST_TO_ADDR
// uc_nation := nation_russian ;
1410: LD_ADDR_OWVAR 21
1414: PUSH
1415: LD_INT 3
1417: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
1418: LD_ADDR_OWVAR 37
1422: PUSH
1423: LD_INT 22
1425: ST_TO_ADDR
// vc_engine := engine_combustion ;
1426: LD_ADDR_OWVAR 39
1430: PUSH
1431: LD_INT 1
1433: ST_TO_ADDR
// vc_control := control_manual ;
1434: LD_ADDR_OWVAR 38
1438: PUSH
1439: LD_INT 1
1441: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1442: LD_ADDR_OWVAR 40
1446: PUSH
1447: LD_INT 51
1449: ST_TO_ADDR
// un := CreateVehicle ;
1450: LD_ADDR_VAR 0 5
1454: PUSH
1455: CALL_OW 45
1459: ST_TO_ADDR
// PlaceUnitXY ( un , 97 , 138 , false ) ;
1460: LD_VAR 0 5
1464: PPUSH
1465: LD_INT 97
1467: PPUSH
1468: LD_INT 138
1470: PPUSH
1471: LD_INT 0
1473: PPUSH
1474: CALL_OW 48
// SetCargo ( un , mat_cans , 100 ) ;
1478: LD_VAR 0 5
1482: PPUSH
1483: LD_INT 1
1485: PPUSH
1486: LD_INT 100
1488: PPUSH
1489: CALL_OW 290
// SetFuel ( un , 45 ) ;
1493: LD_VAR 0 5
1497: PPUSH
1498: LD_INT 45
1500: PPUSH
1501: CALL_OW 240
// un := CreateVehicle ;
1505: LD_ADDR_VAR 0 5
1509: PUSH
1510: CALL_OW 45
1514: ST_TO_ADDR
// PlaceUnitXY ( un , 109 , 154 , false ) ;
1515: LD_VAR 0 5
1519: PPUSH
1520: LD_INT 109
1522: PPUSH
1523: LD_INT 154
1525: PPUSH
1526: LD_INT 0
1528: PPUSH
1529: CALL_OW 48
// SetCargo ( un , mat_cans , 100 ) ;
1533: LD_VAR 0 5
1537: PPUSH
1538: LD_INT 1
1540: PPUSH
1541: LD_INT 100
1543: PPUSH
1544: CALL_OW 290
// SetDir ( un , 1 ) ;
1548: LD_VAR 0 5
1552: PPUSH
1553: LD_INT 1
1555: PPUSH
1556: CALL_OW 233
// SetFuel ( un , 50 ) ;
1560: LD_VAR 0 5
1564: PPUSH
1565: LD_INT 50
1567: PPUSH
1568: CALL_OW 240
// russians_in_base := [ ] ;
1572: LD_ADDR_EXP 28
1576: PUSH
1577: EMPTY
1578: ST_TO_ADDR
// for i = 1 to [ 6 , 6 , 7 ] [ Difficulty ] do
1579: LD_ADDR_VAR 0 2
1583: PUSH
1584: DOUBLE
1585: LD_INT 1
1587: DEC
1588: ST_TO_ADDR
1589: LD_INT 6
1591: PUSH
1592: LD_INT 6
1594: PUSH
1595: LD_INT 7
1597: PUSH
1598: EMPTY
1599: LIST
1600: LIST
1601: LIST
1602: PUSH
1603: LD_OWVAR 67
1607: ARRAY
1608: PUSH
1609: FOR_TO
1610: IFFALSE 1691
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
1612: LD_INT 0
1614: PPUSH
1615: LD_INT 1
1617: PPUSH
1618: LD_INT 4
1620: PUSH
1621: LD_INT 5
1623: PUSH
1624: LD_INT 6
1626: PUSH
1627: EMPTY
1628: LIST
1629: LIST
1630: LIST
1631: PUSH
1632: LD_OWVAR 67
1636: ARRAY
1637: PPUSH
1638: CALL_OW 380
// un := CreateHuman ;
1642: LD_ADDR_VAR 0 5
1646: PUSH
1647: CALL_OW 44
1651: ST_TO_ADDR
// russians_in_base := russians_in_base ^ un ;
1652: LD_ADDR_EXP 28
1656: PUSH
1657: LD_EXP 28
1661: PUSH
1662: LD_VAR 0 5
1666: ADD
1667: ST_TO_ADDR
// PlaceUnitXYR ( un , 94 , 145 , 10 , false ) ;
1668: LD_VAR 0 5
1672: PPUSH
1673: LD_INT 94
1675: PPUSH
1676: LD_INT 145
1678: PPUSH
1679: LD_INT 10
1681: PPUSH
1682: LD_INT 0
1684: PPUSH
1685: CALL_OW 50
// end ;
1689: GO 1609
1691: POP
1692: POP
// end ;
1693: LD_VAR 0 1
1697: RET
// every 0 0$2 trigger UnitFilter ( russians_in_base , [ f_see , 1 ] ) do var enemy ;
1698: LD_EXP 28
1702: PPUSH
1703: LD_INT 101
1705: PUSH
1706: LD_INT 1
1708: PUSH
1709: EMPTY
1710: LIST
1711: LIST
1712: PPUSH
1713: CALL_OW 72
1717: IFFALSE 1783
1719: GO 1721
1721: DISABLE
1722: LD_INT 0
1724: PPUSH
// begin enemy := UnitFilter ( russians_in_base , [ f_see , 1 ] ) [ 1 ] ;
1725: LD_ADDR_VAR 0 1
1729: PUSH
1730: LD_EXP 28
1734: PPUSH
1735: LD_INT 101
1737: PUSH
1738: LD_INT 1
1740: PUSH
1741: EMPTY
1742: LIST
1743: LIST
1744: PPUSH
1745: CALL_OW 72
1749: PUSH
1750: LD_INT 1
1752: ARRAY
1753: ST_TO_ADDR
// ComAgressiveMove ( russians_in_base , GetX ( enemy ) , GetY ( enemy ) ) ;
1754: LD_EXP 28
1758: PPUSH
1759: LD_VAR 0 1
1763: PPUSH
1764: CALL_OW 250
1768: PPUSH
1769: LD_VAR 0 1
1773: PPUSH
1774: CALL_OW 251
1778: PPUSH
1779: CALL_OW 114
// end ;
1783: PPOPN 1
1785: END
// every 0 0$01 trigger GetDistUnitToSide ( us_depot , 1 ) < 40 do var i , un ;
1786: LD_INT 50
1788: PPUSH
1789: LD_INT 1
1791: PPUSH
1792: CALL 2162 0 2
1796: PUSH
1797: LD_INT 40
1799: LESS
1800: IFFALSE 1997
1802: GO 1804
1804: DISABLE
1805: LD_INT 0
1807: PPUSH
1808: PPUSH
// begin uc_side := 4 ;
1809: LD_ADDR_OWVAR 20
1813: PUSH
1814: LD_INT 4
1816: ST_TO_ADDR
// uc_nation := nation_american ;
1817: LD_ADDR_OWVAR 21
1821: PUSH
1822: LD_INT 1
1824: ST_TO_ADDR
// hc_importance := 0 ;
1825: LD_ADDR_OWVAR 32
1829: PUSH
1830: LD_INT 0
1832: ST_TO_ADDR
// for i = 1 to 7 do
1833: LD_ADDR_VAR 0 1
1837: PUSH
1838: DOUBLE
1839: LD_INT 1
1841: DEC
1842: ST_TO_ADDR
1843: LD_INT 7
1845: PUSH
1846: FOR_TO
1847: IFFALSE 1911
// begin PrepareHuman ( false , Rand ( 1 , 3 ) , us_skill ) ;
1849: LD_INT 0
1851: PPUSH
1852: LD_INT 1
1854: PPUSH
1855: LD_INT 3
1857: PPUSH
1858: CALL_OW 12
1862: PPUSH
1863: LD_EXP 26
1867: PPUSH
1868: CALL_OW 380
// un := CreateHuman ;
1872: LD_ADDR_VAR 0 2
1876: PUSH
1877: CALL_OW 44
1881: ST_TO_ADDR
// PlaceUnitArea ( un , base_resp , false ) ;
1882: LD_VAR 0 2
1886: PPUSH
1887: LD_INT 7
1889: PPUSH
1890: LD_INT 0
1892: PPUSH
1893: CALL_OW 49
// SetLives ( un , 10 ) ;
1897: LD_VAR 0 2
1901: PPUSH
1902: LD_INT 10
1904: PPUSH
1905: CALL_OW 234
// end ;
1909: GO 1846
1911: POP
1912: POP
// for i = 1 to 5 do
1913: LD_ADDR_VAR 0 1
1917: PUSH
1918: DOUBLE
1919: LD_INT 1
1921: DEC
1922: ST_TO_ADDR
1923: LD_INT 5
1925: PUSH
1926: FOR_TO
1927: IFFALSE 1995
// begin PrepareHuman ( false , 4 , us_skill ) ;
1929: LD_INT 0
1931: PPUSH
1932: LD_INT 4
1934: PPUSH
1935: LD_EXP 26
1939: PPUSH
1940: CALL_OW 380
// SetDir ( un , 1 ) ;
1944: LD_VAR 0 2
1948: PPUSH
1949: LD_INT 1
1951: PPUSH
1952: CALL_OW 233
// un := CreateHuman ;
1956: LD_ADDR_VAR 0 2
1960: PUSH
1961: CALL_OW 44
1965: ST_TO_ADDR
// PlaceUnitArea ( un , rekt , false ) ;
1966: LD_VAR 0 2
1970: PPUSH
1971: LD_INT 22
1973: PPUSH
1974: LD_INT 0
1976: PPUSH
1977: CALL_OW 49
// SetLives ( un , 10 ) ;
1981: LD_VAR 0 2
1985: PPUSH
1986: LD_INT 10
1988: PPUSH
1989: CALL_OW 234
// end ;
1993: GO 1926
1995: POP
1996: POP
// end ; end_of_file
1997: PPOPN 2
1999: END
// export function PrepareApeman2 ( n ) ; var un , i ; begin
2000: LD_INT 0
2002: PPUSH
2003: PPUSH
2004: PPUSH
// for i = 1 to n do
2005: LD_ADDR_VAR 0 4
2009: PUSH
2010: DOUBLE
2011: LD_INT 1
2013: DEC
2014: ST_TO_ADDR
2015: LD_VAR 0 1
2019: PUSH
2020: FOR_TO
2021: IFFALSE 2155
// begin uc_side := 0 ;
2023: LD_ADDR_OWVAR 20
2027: PUSH
2028: LD_INT 0
2030: ST_TO_ADDR
// uc_nation := 0 ;
2031: LD_ADDR_OWVAR 21
2035: PUSH
2036: LD_INT 0
2038: ST_TO_ADDR
// hc_class := class_apeman ;
2039: LD_ADDR_OWVAR 28
2043: PUSH
2044: LD_INT 12
2046: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
2047: LD_ADDR_OWVAR 31
2051: PUSH
2052: LD_INT 0
2054: PUSH
2055: LD_INT 0
2057: PUSH
2058: LD_INT 0
2060: PUSH
2061: LD_INT 0
2063: PUSH
2064: EMPTY
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: ST_TO_ADDR
// hc_name :=  ;
2070: LD_ADDR_OWVAR 26
2074: PUSH
2075: LD_STRING 
2077: ST_TO_ADDR
// hc_gallery :=  ;
2078: LD_ADDR_OWVAR 33
2082: PUSH
2083: LD_STRING 
2085: ST_TO_ADDR
// hc_importance := 0 ;
2086: LD_ADDR_OWVAR 32
2090: PUSH
2091: LD_INT 0
2093: ST_TO_ADDR
// un := CreateHuman ;
2094: LD_ADDR_VAR 0 3
2098: PUSH
2099: CALL_OW 44
2103: ST_TO_ADDR
// PlaceUnitArea ( un , [ ape1 , ape2 ] [ Rand ( 1 , 2 ) ] , false ) ;
2104: LD_VAR 0 3
2108: PPUSH
2109: LD_INT 19
2111: PUSH
2112: LD_INT 20
2114: PUSH
2115: EMPTY
2116: LIST
2117: LIST
2118: PUSH
2119: LD_INT 1
2121: PPUSH
2122: LD_INT 2
2124: PPUSH
2125: CALL_OW 12
2129: ARRAY
2130: PPUSH
2131: LD_INT 0
2133: PPUSH
2134: CALL_OW 49
// Wait ( Rand ( 0 0$33 , 2 2$33 ) ) ;
2138: LD_INT 1155
2140: PPUSH
2141: LD_INT 5355
2143: PPUSH
2144: CALL_OW 12
2148: PPUSH
2149: CALL_OW 67
// end ;
2153: GO 2020
2155: POP
2156: POP
// end ;
2157: LD_VAR 0 2
2161: RET
// export function GetDistUnitToSide ( unit , side ) ; var tmp , dist ; begin
2162: LD_INT 0
2164: PPUSH
2165: PPUSH
2166: PPUSH
// tmp := NearestUnitToUnit ( FilterAllUnits ( [ f_side , side ] ) , unit ) ;
2167: LD_ADDR_VAR 0 4
2171: PUSH
2172: LD_INT 22
2174: PUSH
2175: LD_VAR 0 2
2179: PUSH
2180: EMPTY
2181: LIST
2182: LIST
2183: PPUSH
2184: CALL_OW 69
2188: PPUSH
2189: LD_VAR 0 1
2193: PPUSH
2194: CALL_OW 74
2198: ST_TO_ADDR
// dist := GetDistUnits ( unit , tmp ) ;
2199: LD_ADDR_VAR 0 5
2203: PUSH
2204: LD_VAR 0 1
2208: PPUSH
2209: LD_VAR 0 4
2213: PPUSH
2214: CALL_OW 296
2218: ST_TO_ADDR
// if dist >= 9999 then
2219: LD_VAR 0 5
2223: PUSH
2224: LD_INT 9999
2226: GREATEREQUAL
2227: IFFALSE 2240
// result := - 1 else
2229: LD_ADDR_VAR 0 3
2233: PUSH
2234: LD_INT 1
2236: NEG
2237: ST_TO_ADDR
2238: GO 2250
// result := dist ;
2240: LD_ADDR_VAR 0 3
2244: PUSH
2245: LD_VAR 0 5
2249: ST_TO_ADDR
// end ;
2250: LD_VAR 0 3
2254: RET
// export function NearestUnitToSide ( plist , side ) ; var i , tmp , unit ; begin
2255: LD_INT 0
2257: PPUSH
2258: PPUSH
2259: PPUSH
2260: PPUSH
// tmp := 9999 ;
2261: LD_ADDR_VAR 0 5
2265: PUSH
2266: LD_INT 9999
2268: ST_TO_ADDR
// for i = 1 to plist do
2269: LD_ADDR_VAR 0 4
2273: PUSH
2274: DOUBLE
2275: LD_INT 1
2277: DEC
2278: ST_TO_ADDR
2279: LD_VAR 0 1
2283: PUSH
2284: FOR_TO
2285: IFFALSE 2359
// if GetDistUnitToSide ( plist [ i ] , side ) < tmp then
2287: LD_VAR 0 1
2291: PUSH
2292: LD_VAR 0 4
2296: ARRAY
2297: PPUSH
2298: LD_VAR 0 2
2302: PPUSH
2303: CALL 2162 0 2
2307: PUSH
2308: LD_VAR 0 5
2312: LESS
2313: IFFALSE 2357
// begin tmp := GetDistUnitToSide ( plist [ i ] , side ) ;
2315: LD_ADDR_VAR 0 5
2319: PUSH
2320: LD_VAR 0 1
2324: PUSH
2325: LD_VAR 0 4
2329: ARRAY
2330: PPUSH
2331: LD_VAR 0 2
2335: PPUSH
2336: CALL 2162 0 2
2340: ST_TO_ADDR
// unit := plist [ i ] ;
2341: LD_ADDR_VAR 0 6
2345: PUSH
2346: LD_VAR 0 1
2350: PUSH
2351: LD_VAR 0 4
2355: ARRAY
2356: ST_TO_ADDR
// end ;
2357: GO 2284
2359: POP
2360: POP
// result := unit ;
2361: LD_ADDR_VAR 0 3
2365: PUSH
2366: LD_VAR 0 6
2370: ST_TO_ADDR
// end ;
2371: LD_VAR 0 3
2375: RET
// export function CalculateCommanderPoints ; var points , crates_collected , sib_collected , i ; begin
2376: LD_INT 0
2378: PPUSH
2379: PPUSH
2380: PPUSH
2381: PPUSH
2382: PPUSH
// points := [ 1000 , 2500 , 5000 ] [ Difficulty ] ;
2383: LD_ADDR_VAR 0 2
2387: PUSH
2388: LD_INT 1000
2390: PUSH
2391: LD_INT 2500
2393: PUSH
2394: LD_INT 5000
2396: PUSH
2397: EMPTY
2398: LIST
2399: LIST
2400: LIST
2401: PUSH
2402: LD_OWVAR 67
2406: ARRAY
2407: ST_TO_ADDR
// points := points + ( - 1 * FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) * 30 ) ;
2408: LD_ADDR_VAR 0 2
2412: PUSH
2413: LD_VAR 0 2
2417: PUSH
2418: LD_INT 1
2420: NEG
2421: PUSH
2422: LD_INT 22
2424: PUSH
2425: LD_OWVAR 2
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: PUSH
2434: LD_INT 21
2436: PUSH
2437: LD_INT 3
2439: PUSH
2440: EMPTY
2441: LIST
2442: LIST
2443: PUSH
2444: EMPTY
2445: LIST
2446: LIST
2447: PPUSH
2448: CALL_OW 69
2452: MUL
2453: PUSH
2454: LD_INT 30
2456: MUL
2457: PLUS
2458: ST_TO_ADDR
// points := points + ( kill_counter * 10 ) ;
2459: LD_ADDR_VAR 0 2
2463: PUSH
2464: LD_VAR 0 2
2468: PUSH
2469: LD_EXP 17
2473: PUSH
2474: LD_INT 10
2476: MUL
2477: PLUS
2478: ST_TO_ADDR
// points := points + ( - 1 * kill_counter * 20 ) ;
2479: LD_ADDR_VAR 0 2
2483: PUSH
2484: LD_VAR 0 2
2488: PUSH
2489: LD_INT 1
2491: NEG
2492: PUSH
2493: LD_EXP 17
2497: MUL
2498: PUSH
2499: LD_INT 20
2501: MUL
2502: PLUS
2503: ST_TO_ADDR
// points := points + ( - 1 * ( ( tick / 35 ) / 60 ) * 25 ) ;
2504: LD_ADDR_VAR 0 2
2508: PUSH
2509: LD_VAR 0 2
2513: PUSH
2514: LD_INT 1
2516: NEG
2517: PUSH
2518: LD_OWVAR 1
2522: PUSH
2523: LD_INT 35
2525: DIVREAL
2526: PUSH
2527: LD_INT 60
2529: DIVREAL
2530: MUL
2531: PUSH
2532: LD_INT 25
2534: MUL
2535: PLUS
2536: ST_TO_ADDR
// points := points + ( tech_counter * 15 ) ;
2537: LD_ADDR_VAR 0 2
2541: PUSH
2542: LD_VAR 0 2
2546: PUSH
2547: LD_EXP 19
2551: PUSH
2552: LD_INT 15
2554: MUL
2555: PLUS
2556: ST_TO_ADDR
// points := points + ( - 1 * sib_contamin_counter ) * 1000 ;
2557: LD_ADDR_VAR 0 2
2561: PUSH
2562: LD_VAR 0 2
2566: PUSH
2567: LD_INT 1
2569: NEG
2570: PUSH
2571: LD_EXP 20
2575: MUL
2576: PUSH
2577: LD_INT 1000
2579: MUL
2580: PLUS
2581: ST_TO_ADDR
// points := points + ( veh_counter * 5 ) ;
2582: LD_ADDR_VAR 0 2
2586: PUSH
2587: LD_VAR 0 2
2591: PUSH
2592: LD_EXP 18
2596: PUSH
2597: LD_INT 5
2599: MUL
2600: PLUS
2601: ST_TO_ADDR
// result := points ;
2602: LD_ADDR_VAR 0 1
2606: PUSH
2607: LD_VAR 0 2
2611: ST_TO_ADDR
// end ; end_of_file
2612: LD_VAR 0 1
2616: RET
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2617: LD_VAR 0 1
2621: PPUSH
2622: CALL 35908 0 1
// if un = ru_cargo then
2626: LD_VAR 0 1
2630: PUSH
2631: LD_EXP 31
2635: EQUAL
2636: IFFALSE 2646
// ru_cargo := 0 ;
2638: LD_ADDR_EXP 31
2642: PUSH
2643: LD_INT 0
2645: ST_TO_ADDR
// if GetSide ( un ) = your_side then
2646: LD_VAR 0 1
2650: PPUSH
2651: CALL_OW 255
2655: PUSH
2656: LD_OWVAR 2
2660: EQUAL
2661: IFFALSE 2677
// dead_counter := dead_counter + 1 ;
2663: LD_ADDR_EXP 16
2667: PUSH
2668: LD_EXP 16
2672: PUSH
2673: LD_INT 1
2675: PLUS
2676: ST_TO_ADDR
// if GetSide ( un ) in FilterAllUnits ( [ f_enemy , your_side ] ) then
2677: LD_VAR 0 1
2681: PPUSH
2682: CALL_OW 255
2686: PUSH
2687: LD_INT 81
2689: PUSH
2690: LD_OWVAR 2
2694: PUSH
2695: EMPTY
2696: LIST
2697: LIST
2698: PPUSH
2699: CALL_OW 69
2703: IN
2704: IFFALSE 2720
// kill_counter := kill_counter + 1 ;
2706: LD_ADDR_EXP 17
2710: PUSH
2711: LD_EXP 17
2715: PUSH
2716: LD_INT 1
2718: PLUS
2719: ST_TO_ADDR
// if un = player_commander then
2720: LD_VAR 0 1
2724: PUSH
2725: LD_EXP 11
2729: EQUAL
2730: IFFALSE 2739
// YouLost ( vulcano-lost ) ;
2732: LD_STRING vulcano-lost
2734: PPUSH
2735: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) then
2739: LD_VAR 0 1
2743: PUSH
2744: LD_INT 22
2746: PUSH
2747: LD_INT 3
2749: PUSH
2750: EMPTY
2751: LIST
2752: LIST
2753: PUSH
2754: LD_INT 21
2756: PUSH
2757: LD_INT 3
2759: PUSH
2760: EMPTY
2761: LIST
2762: LIST
2763: PUSH
2764: EMPTY
2765: LIST
2766: LIST
2767: PPUSH
2768: CALL_OW 69
2772: IN
2773: IFFALSE 2891
// begin if GetBType ( un ) = b_turret or GetBType ( un ) = b_siberite_power then
2775: LD_VAR 0 1
2779: PPUSH
2780: CALL_OW 266
2784: PUSH
2785: LD_INT 33
2787: EQUAL
2788: IFTRUE 2805
2790: PUSH
2791: LD_VAR 0 1
2795: PPUSH
2796: CALL_OW 266
2800: PUSH
2801: LD_INT 28
2803: EQUAL
2804: OR
2805: IFFALSE 2891
// begin ru_blist := ru_blist ^ GetBType ( un ) ;
2807: LD_ADDR_EXP 32
2811: PUSH
2812: LD_EXP 32
2816: PUSH
2817: LD_VAR 0 1
2821: PPUSH
2822: CALL_OW 266
2826: ADD
2827: ST_TO_ADDR
// ru_blist := ru_blist ^ GetX ( un ) ;
2828: LD_ADDR_EXP 32
2832: PUSH
2833: LD_EXP 32
2837: PUSH
2838: LD_VAR 0 1
2842: PPUSH
2843: CALL_OW 250
2847: ADD
2848: ST_TO_ADDR
// ru_blist := ru_blist ^ GetY ( un ) ;
2849: LD_ADDR_EXP 32
2853: PUSH
2854: LD_EXP 32
2858: PUSH
2859: LD_VAR 0 1
2863: PPUSH
2864: CALL_OW 251
2868: ADD
2869: ST_TO_ADDR
// ru_blist := ru_blist ^ GetDir ( un ) ;
2870: LD_ADDR_EXP 32
2874: PUSH
2875: LD_EXP 32
2879: PUSH
2880: LD_VAR 0 1
2884: PPUSH
2885: CALL_OW 254
2889: ADD
2890: ST_TO_ADDR
// end ; end ; if un in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) then
2891: LD_VAR 0 1
2895: PUSH
2896: LD_INT 22
2898: PUSH
2899: LD_INT 8
2901: PUSH
2902: EMPTY
2903: LIST
2904: LIST
2905: PUSH
2906: LD_INT 21
2908: PUSH
2909: LD_INT 3
2911: PUSH
2912: EMPTY
2913: LIST
2914: LIST
2915: PUSH
2916: EMPTY
2917: LIST
2918: LIST
2919: PPUSH
2920: CALL_OW 69
2924: IN
2925: IFFALSE 3069
// begin if GetBType ( un ) = b_barracks then
2927: LD_VAR 0 1
2931: PPUSH
2932: CALL_OW 266
2936: PUSH
2937: LD_INT 5
2939: EQUAL
2940: IFFALSE 2958
// legion_blist := legion_blist ^ b_armoury else
2942: LD_ADDR_EXP 40
2946: PUSH
2947: LD_EXP 40
2951: PUSH
2952: LD_INT 4
2954: ADD
2955: ST_TO_ADDR
2956: GO 3006
// if not GetBType ( un ) in [ b_warehouse , b_lab , b_lab_full ] then
2958: LD_VAR 0 1
2962: PPUSH
2963: CALL_OW 266
2967: PUSH
2968: LD_INT 1
2970: PUSH
2971: LD_INT 6
2973: PUSH
2974: LD_INT 8
2976: PUSH
2977: EMPTY
2978: LIST
2979: LIST
2980: LIST
2981: IN
2982: NOT
2983: IFFALSE 3006
// legion_blist := legion_blist ^ GetBType ( un ) ;
2985: LD_ADDR_EXP 40
2989: PUSH
2990: LD_EXP 40
2994: PUSH
2995: LD_VAR 0 1
2999: PPUSH
3000: CALL_OW 266
3004: ADD
3005: ST_TO_ADDR
// legion_blist := legion_blist ^ GetX ( un ) ;
3006: LD_ADDR_EXP 40
3010: PUSH
3011: LD_EXP 40
3015: PUSH
3016: LD_VAR 0 1
3020: PPUSH
3021: CALL_OW 250
3025: ADD
3026: ST_TO_ADDR
// legion_blist := legion_blist ^ GetY ( un ) ;
3027: LD_ADDR_EXP 40
3031: PUSH
3032: LD_EXP 40
3036: PUSH
3037: LD_VAR 0 1
3041: PPUSH
3042: CALL_OW 251
3046: ADD
3047: ST_TO_ADDR
// legion_blist := legion_blist ^ GetDir ( un ) ;
3048: LD_ADDR_EXP 40
3052: PUSH
3053: LD_EXP 40
3057: PUSH
3058: LD_VAR 0 1
3062: PPUSH
3063: CALL_OW 254
3067: ADD
3068: ST_TO_ADDR
// end ; if un in legion_force then
3069: LD_VAR 0 1
3073: PUSH
3074: LD_EXP 37
3078: IN
3079: IFFALSE 3097
// legion_force := legion_force diff un ;
3081: LD_ADDR_EXP 37
3085: PUSH
3086: LD_EXP 37
3090: PUSH
3091: LD_VAR 0 1
3095: DIFF
3096: ST_TO_ADDR
// if un in ru_force then
3097: LD_VAR 0 1
3101: PUSH
3102: LD_EXP 29
3106: IN
3107: IFFALSE 3125
// ru_force := ru_force diff un ;
3109: LD_ADDR_EXP 29
3113: PUSH
3114: LD_EXP 29
3118: PUSH
3119: LD_VAR 0 1
3123: DIFF
3124: ST_TO_ADDR
// if un in al_force then
3125: LD_VAR 0 1
3129: PUSH
3130: LD_EXP 44
3134: IN
3135: IFFALSE 3153
// al_force := al_force diff un ;
3137: LD_ADDR_EXP 44
3141: PUSH
3142: LD_EXP 44
3146: PUSH
3147: LD_VAR 0 1
3151: DIFF
3152: ST_TO_ADDR
// end ;
3153: PPOPN 1
3155: END
// on BuildingComplete ( b ) do var i ;
3156: LD_INT 0
3158: PPUSH
// begin if GetSide ( b ) = 8 then
3159: LD_VAR 0 1
3163: PPUSH
3164: CALL_OW 255
3168: PUSH
3169: LD_INT 8
3171: EQUAL
3172: IFFALSE 3212
// for i = 1 to 4 do
3174: LD_ADDR_VAR 0 2
3178: PUSH
3179: DOUBLE
3180: LD_INT 1
3182: DEC
3183: ST_TO_ADDR
3184: LD_INT 4
3186: PUSH
3187: FOR_TO
3188: IFFALSE 3210
// legion_blist := Delete ( legion_blist , 1 ) ;
3190: LD_ADDR_EXP 40
3194: PUSH
3195: LD_EXP 40
3199: PPUSH
3200: LD_INT 1
3202: PPUSH
3203: CALL_OW 3
3207: ST_TO_ADDR
3208: GO 3187
3210: POP
3211: POP
// if GetSide ( b ) = 3 then
3212: LD_VAR 0 1
3216: PPUSH
3217: CALL_OW 255
3221: PUSH
3222: LD_INT 3
3224: EQUAL
3225: IFFALSE 3265
// for i = 1 to 4 do
3227: LD_ADDR_VAR 0 2
3231: PUSH
3232: DOUBLE
3233: LD_INT 1
3235: DEC
3236: ST_TO_ADDR
3237: LD_INT 4
3239: PUSH
3240: FOR_TO
3241: IFFALSE 3263
// ru_blist := Delete ( ru_blist , 1 ) ;
3243: LD_ADDR_EXP 32
3247: PUSH
3248: LD_EXP 32
3252: PPUSH
3253: LD_INT 1
3255: PPUSH
3256: CALL_OW 3
3260: ST_TO_ADDR
3261: GO 3240
3263: POP
3264: POP
// end ;
3265: PPOPN 2
3267: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
3268: LD_VAR 0 1
3272: PPUSH
3273: LD_VAR 0 2
3277: PPUSH
3278: CALL 35966 0 2
// if not GetWeapon ( veh ) in [ ru_cargo_bay , ru_siberium_rocket ] then
3282: LD_VAR 0 1
3286: PPUSH
3287: CALL_OW 264
3291: PUSH
3292: LD_INT 51
3294: PUSH
3295: LD_INT 48
3297: PUSH
3298: EMPTY
3299: LIST
3300: LIST
3301: IN
3302: NOT
3303: IFFALSE 3351
// begin if GetSide ( veh ) = 3 then
3305: LD_VAR 0 1
3309: PPUSH
3310: CALL_OW 255
3314: PUSH
3315: LD_INT 3
3317: EQUAL
3318: IFFALSE 3351
// begin ComMoveXY ( veh , 149 , 8 ) ;
3320: LD_VAR 0 1
3324: PPUSH
3325: LD_INT 149
3327: PPUSH
3328: LD_INT 8
3330: PPUSH
3331: CALL_OW 111
// ru_force := ru_force ^ veh ;
3335: LD_ADDR_EXP 29
3339: PUSH
3340: LD_EXP 29
3344: PUSH
3345: LD_VAR 0 1
3349: ADD
3350: ST_TO_ADDR
// end ; end ; if not GetWeapon ( veh ) in [ ar_cargo_bay , ar_control_tower ] then
3351: LD_VAR 0 1
3355: PPUSH
3356: CALL_OW 264
3360: PUSH
3361: LD_INT 32
3363: PUSH
3364: LD_INT 31
3366: PUSH
3367: EMPTY
3368: LIST
3369: LIST
3370: IN
3371: NOT
3372: IFFALSE 3405
// begin if GetSide ( veh ) = 8 then
3374: LD_VAR 0 1
3378: PPUSH
3379: CALL_OW 255
3383: PUSH
3384: LD_INT 8
3386: EQUAL
3387: IFFALSE 3405
// legion_force := legion_force ^ veh ;
3389: LD_ADDR_EXP 37
3393: PUSH
3394: LD_EXP 37
3398: PUSH
3399: LD_VAR 0 1
3403: ADD
3404: ST_TO_ADDR
// end ; if GetSide ( veh ) = 3 and not ru_cargo and GetWeapon ( veh ) = ru_cargo_bay then
3405: LD_VAR 0 1
3409: PPUSH
3410: CALL_OW 255
3414: PUSH
3415: LD_INT 3
3417: EQUAL
3418: IFFALSE 3427
3420: PUSH
3421: LD_EXP 31
3425: NOT
3426: AND
3427: IFFALSE 3444
3429: PUSH
3430: LD_VAR 0 1
3434: PPUSH
3435: CALL_OW 264
3439: PUSH
3440: LD_INT 51
3442: EQUAL
3443: AND
3444: IFFALSE 3456
// ru_cargo := veh ;
3446: LD_ADDR_EXP 31
3450: PUSH
3451: LD_VAR 0 1
3455: ST_TO_ADDR
// if GetSide ( veh ) = 7 and your_side <> 7 then
3456: LD_VAR 0 1
3460: PPUSH
3461: CALL_OW 255
3465: PUSH
3466: LD_INT 7
3468: EQUAL
3469: IFFALSE 3481
3471: PUSH
3472: LD_OWVAR 2
3476: PUSH
3477: LD_INT 7
3479: NONEQUAL
3480: AND
3481: IFFALSE 3499
// al_force := al_force ^ veh ;
3483: LD_ADDR_EXP 44
3487: PUSH
3488: LD_EXP 44
3492: PUSH
3493: LD_VAR 0 1
3497: ADD
3498: ST_TO_ADDR
// if GetSide ( veh ) = your_side then
3499: LD_VAR 0 1
3503: PPUSH
3504: CALL_OW 255
3508: PUSH
3509: LD_OWVAR 2
3513: EQUAL
3514: IFFALSE 3530
// veh_counter := veh_counter + 1 ;
3516: LD_ADDR_EXP 18
3520: PUSH
3521: LD_EXP 18
3525: PUSH
3526: LD_INT 1
3528: PLUS
3529: ST_TO_ADDR
// end ;
3530: PPOPN 2
3532: END
// on SibDepositContaminated ( contaminating_scientist , x_of_deposit , y_of_deposit ) do begin if GetSide ( contaminating_scientist ) <> your_side then
3533: LD_VAR 0 1
3537: PPUSH
3538: CALL_OW 255
3542: PUSH
3543: LD_OWVAR 2
3547: NONEQUAL
3548: IFFALSE 3564
// sib_contamin_counter := sib_contamin_counter + 1 ;
3550: LD_ADDR_EXP 20
3554: PUSH
3555: LD_EXP 20
3559: PUSH
3560: LD_INT 1
3562: PLUS
3563: ST_TO_ADDR
// end ;
3564: PPOPN 3
3566: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = your_side then
3567: LD_VAR 0 2
3571: PPUSH
3572: CALL_OW 255
3576: PUSH
3577: LD_OWVAR 2
3581: EQUAL
3582: IFFALSE 3598
// tech_counter := tech_counter + 1 ;
3584: LD_ADDR_EXP 19
3588: PUSH
3589: LD_EXP 19
3593: PUSH
3594: LD_INT 1
3596: PLUS
3597: ST_TO_ADDR
// if tech = 53 and your_side = 1 then
3598: LD_VAR 0 1
3602: PUSH
3603: LD_INT 53
3605: EQUAL
3606: IFFALSE 3618
3608: PUSH
3609: LD_OWVAR 2
3613: PUSH
3614: LD_INT 1
3616: EQUAL
3617: AND
3618: IFFALSE 3633
// SetTech ( 80 , 1 , state_researched ) ;
3620: LD_INT 80
3622: PPUSH
3623: LD_INT 1
3625: PPUSH
3626: LD_INT 2
3628: PPUSH
3629: CALL_OW 322
// end ;
3633: PPOPN 2
3635: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 8 and GetControl ( un ) = control_remote then
3636: LD_VAR 0 1
3640: PPUSH
3641: CALL_OW 255
3645: PUSH
3646: LD_INT 8
3648: EQUAL
3649: IFFALSE 3666
3651: PUSH
3652: LD_VAR 0 1
3656: PPUSH
3657: CALL_OW 263
3661: PUSH
3662: LD_INT 2
3664: EQUAL
3665: AND
3666: IFFALSE 3677
// ComAutodestruct ( un ) ;
3668: LD_VAR 0 1
3672: PPUSH
3673: CALL 74783 0 1
// end ;
3677: PPOPN 1
3679: END
// on SailEvent ( event ) do begin case event of event_legion_attack :
3680: LD_VAR 0 1
3684: PUSH
3685: LD_EXP 21
3689: DOUBLE
3690: EQUAL
3691: IFTRUE 3695
3693: GO 3702
3695: POP
// LegionAttack ( ) ; event_alliance_attack :
3696: CALL 11467 0 0
3700: GO 3737
3702: LD_EXP 23
3706: DOUBLE
3707: EQUAL
3708: IFTRUE 3712
3710: GO 3719
3712: POP
// AllianceAttack ( ) ; event_russian_attack :
3713: CALL 19000 0 0
3717: GO 3737
3719: LD_EXP 22
3723: DOUBLE
3724: EQUAL
3725: IFTRUE 3729
3727: GO 3736
3729: POP
// RussianAttack ( ) ; end ;
3730: CALL 7679 0 0
3734: GO 3737
3736: POP
// end ;
3737: PPOPN 1
3739: END
// every 9 9$30 trigger FilterAllUnits ( [ f_class , class_apeman ] ) < 9 and tick < 50 50$00 do
3740: LD_INT 25
3742: PUSH
3743: LD_INT 12
3745: PUSH
3746: EMPTY
3747: LIST
3748: LIST
3749: PPUSH
3750: CALL_OW 69
3754: PUSH
3755: LD_INT 9
3757: LESS
3758: IFFALSE 3770
3760: PUSH
3761: LD_OWVAR 1
3765: PUSH
3766: LD_INT 105000
3768: LESS
3769: AND
3770: IFFALSE 3803
3772: GO 3774
3774: DISABLE
// begin enable ;
3775: ENABLE
// PrepareApeman2 ( 8 - ( FilterAllUnits ( [ f_class , class_apeman ] ) + 0 ) ) ;
3776: LD_INT 8
3778: PUSH
3779: LD_INT 25
3781: PUSH
3782: LD_INT 12
3784: PUSH
3785: EMPTY
3786: LIST
3787: LIST
3788: PPUSH
3789: CALL_OW 69
3793: PUSH
3794: LD_INT 0
3796: PLUS
3797: MINUS
3798: PPUSH
3799: CALL 2000 0 1
// end ;
3803: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
3804: LD_VAR 0 1
3808: PPUSH
3809: LD_VAR 0 2
3813: PPUSH
3814: LD_VAR 0 3
3818: PPUSH
3819: CALL 35942 0 3
// end ;
3823: PPOPN 3
3825: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
3826: LD_VAR 0 1
3830: PPUSH
3831: CALL 35950 0 1
// end ; end_of_file
3835: PPOPN 1
3837: END
// export ru_force , ru_skill , ru_cargo , ru_blist , ru_vlist , ru_amount , ru_time , ru_teleport_exit ; export function PrepareRussian ; var i , un , ru_depot , ru_factory , ru_teleport , ru_barracks , ru_bunkers , ru_buildings , ru_vehicles , ru_humans ; begin
3838: LD_INT 0
3840: PPUSH
3841: PPUSH
3842: PPUSH
3843: PPUSH
3844: PPUSH
3845: PPUSH
3846: PPUSH
3847: PPUSH
3848: PPUSH
3849: PPUSH
3850: PPUSH
// uc_side := 3 ;
3851: LD_ADDR_OWVAR 20
3855: PUSH
3856: LD_INT 3
3858: ST_TO_ADDR
// uc_nation := nation_russian ;
3859: LD_ADDR_OWVAR 21
3863: PUSH
3864: LD_INT 3
3866: ST_TO_ADDR
// ru_depot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
3867: LD_ADDR_VAR 0 4
3871: PUSH
3872: LD_INT 22
3874: PUSH
3875: LD_INT 3
3877: PUSH
3878: EMPTY
3879: LIST
3880: LIST
3881: PUSH
3882: LD_INT 30
3884: PUSH
3885: LD_INT 1
3887: PUSH
3888: EMPTY
3889: LIST
3890: LIST
3891: PUSH
3892: EMPTY
3893: LIST
3894: LIST
3895: PPUSH
3896: CALL_OW 69
3900: PUSH
3901: LD_INT 1
3903: ARRAY
3904: ST_TO_ADDR
// ru_factory := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3905: LD_ADDR_VAR 0 5
3909: PUSH
3910: LD_INT 22
3912: PUSH
3913: LD_INT 3
3915: PUSH
3916: EMPTY
3917: LIST
3918: LIST
3919: PUSH
3920: LD_INT 30
3922: PUSH
3923: LD_INT 3
3925: PUSH
3926: EMPTY
3927: LIST
3928: LIST
3929: PUSH
3930: EMPTY
3931: LIST
3932: LIST
3933: PPUSH
3934: CALL_OW 69
3938: PUSH
3939: LD_INT 1
3941: ARRAY
3942: ST_TO_ADDR
// ru_teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] ;
3943: LD_ADDR_VAR 0 6
3947: PUSH
3948: LD_INT 22
3950: PUSH
3951: LD_INT 3
3953: PUSH
3954: EMPTY
3955: LIST
3956: LIST
3957: PUSH
3958: LD_INT 30
3960: PUSH
3961: LD_INT 34
3963: PUSH
3964: EMPTY
3965: LIST
3966: LIST
3967: PUSH
3968: EMPTY
3969: LIST
3970: LIST
3971: PPUSH
3972: CALL_OW 69
3976: PUSH
3977: LD_INT 1
3979: ARRAY
3980: ST_TO_ADDR
// ru_bunkers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
3981: LD_ADDR_VAR 0 8
3985: PUSH
3986: LD_INT 22
3988: PUSH
3989: LD_INT 3
3991: PUSH
3992: EMPTY
3993: LIST
3994: LIST
3995: PUSH
3996: LD_INT 30
3998: PUSH
3999: LD_INT 33
4001: PUSH
4002: EMPTY
4003: LIST
4004: LIST
4005: PUSH
4006: EMPTY
4007: LIST
4008: LIST
4009: PPUSH
4010: CALL_OW 69
4014: ST_TO_ADDR
// ru_barracks := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
4015: LD_ADDR_VAR 0 7
4019: PUSH
4020: LD_INT 22
4022: PUSH
4023: LD_INT 3
4025: PUSH
4026: EMPTY
4027: LIST
4028: LIST
4029: PUSH
4030: LD_INT 30
4032: PUSH
4033: LD_INT 5
4035: PUSH
4036: EMPTY
4037: LIST
4038: LIST
4039: PUSH
4040: EMPTY
4041: LIST
4042: LIST
4043: PPUSH
4044: CALL_OW 69
4048: PUSH
4049: LD_INT 1
4051: ARRAY
4052: ST_TO_ADDR
// ru_blist := [ ] ;
4053: LD_ADDR_EXP 32
4057: PUSH
4058: EMPTY
4059: ST_TO_ADDR
// ru_vlist := [ ] ;
4060: LD_ADDR_EXP 33
4064: PUSH
4065: EMPTY
4066: ST_TO_ADDR
// ru_teleport_exit := [ 183 , 62 , 147 , 44 ] ;
4067: LD_ADDR_EXP 36
4071: PUSH
4072: LD_INT 183
4074: PUSH
4075: LD_INT 62
4077: PUSH
4078: LD_INT 147
4080: PUSH
4081: LD_INT 44
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: LIST
4088: LIST
4089: ST_TO_ADDR
// TeleportExit ( FilterAllUnits ( [ f_btype , b_teleport ] ) [ 1 ] , ru_teleport_exit [ 1 ] , ru_teleport_exit [ 2 ] ) ;
4090: LD_INT 30
4092: PUSH
4093: LD_INT 34
4095: PUSH
4096: EMPTY
4097: LIST
4098: LIST
4099: PPUSH
4100: CALL_OW 69
4104: PUSH
4105: LD_INT 1
4107: ARRAY
4108: PPUSH
4109: LD_EXP 36
4113: PUSH
4114: LD_INT 1
4116: ARRAY
4117: PPUSH
4118: LD_EXP 36
4122: PUSH
4123: LD_INT 2
4125: ARRAY
4126: PPUSH
4127: CALL_OW 243
// ru_amount := [ 4 , 5 , 6 ] [ Difficulty ] ;
4131: LD_ADDR_EXP 34
4135: PUSH
4136: LD_INT 4
4138: PUSH
4139: LD_INT 5
4141: PUSH
4142: LD_INT 6
4144: PUSH
4145: EMPTY
4146: LIST
4147: LIST
4148: LIST
4149: PUSH
4150: LD_OWVAR 67
4154: ARRAY
4155: ST_TO_ADDR
// SetResourceType ( GetBase ( ru_depot ) , mat_cans , 3000 ) ;
4156: LD_VAR 0 4
4160: PPUSH
4161: CALL_OW 274
4165: PPUSH
4166: LD_INT 1
4168: PPUSH
4169: LD_INT 3000
4171: PPUSH
4172: CALL_OW 277
// SetResourceType ( GetBase ( ru_depot ) , mat_oil , 300 ) ;
4176: LD_VAR 0 4
4180: PPUSH
4181: CALL_OW 274
4185: PPUSH
4186: LD_INT 2
4188: PPUSH
4189: LD_INT 300
4191: PPUSH
4192: CALL_OW 277
// hc_gallery :=  ;
4196: LD_ADDR_OWVAR 33
4200: PUSH
4201: LD_STRING 
4203: ST_TO_ADDR
// hc_name :=  ;
4204: LD_ADDR_OWVAR 26
4208: PUSH
4209: LD_STRING 
4211: ST_TO_ADDR
// hc_importance := 0 ;
4212: LD_ADDR_OWVAR 32
4216: PUSH
4217: LD_INT 0
4219: ST_TO_ADDR
// ru_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
4220: LD_ADDR_EXP 30
4224: PUSH
4225: LD_INT 5
4227: PUSH
4228: LD_INT 6
4230: PUSH
4231: LD_INT 7
4233: PUSH
4234: EMPTY
4235: LIST
4236: LIST
4237: LIST
4238: PUSH
4239: LD_OWVAR 67
4243: ARRAY
4244: ST_TO_ADDR
// for i = 1 to 6 do
4245: LD_ADDR_VAR 0 2
4249: PUSH
4250: DOUBLE
4251: LD_INT 1
4253: DEC
4254: ST_TO_ADDR
4255: LD_INT 6
4257: PUSH
4258: FOR_TO
4259: IFFALSE 4417
// begin PrepareHuman ( false , class_bazooker , ru_skill ) ;
4261: LD_INT 0
4263: PPUSH
4264: LD_INT 9
4266: PPUSH
4267: LD_EXP 30
4271: PPUSH
4272: CALL_OW 380
// un := CreateHuman ;
4276: LD_ADDR_VAR 0 3
4280: PUSH
4281: CALL_OW 44
4285: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_barracks ) ;
4286: LD_VAR 0 3
4290: PPUSH
4291: LD_VAR 0 7
4295: PPUSH
4296: CALL_OW 52
// PrepareHuman ( false , 4 , ru_skill ) ;
4300: LD_INT 0
4302: PPUSH
4303: LD_INT 4
4305: PPUSH
4306: LD_EXP 30
4310: PPUSH
4311: CALL_OW 380
// un := CreateHuman ;
4315: LD_ADDR_VAR 0 3
4319: PUSH
4320: CALL_OW 44
4324: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
4325: LD_VAR 0 3
4329: PPUSH
4330: LD_INT 24
4332: PPUSH
4333: CALL_OW 52
// PrepareHuman ( false , 3 , ru_skill ) ;
4337: LD_INT 0
4339: PPUSH
4340: LD_INT 3
4342: PPUSH
4343: LD_EXP 30
4347: PPUSH
4348: CALL_OW 380
// un := CreateHuman ;
4352: LD_ADDR_VAR 0 3
4356: PUSH
4357: CALL_OW 44
4361: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_factory ) ;
4362: LD_VAR 0 3
4366: PPUSH
4367: LD_VAR 0 5
4371: PPUSH
4372: CALL_OW 52
// PrepareHuman ( false , 2 , ru_skill ) ;
4376: LD_INT 0
4378: PPUSH
4379: LD_INT 2
4381: PPUSH
4382: LD_EXP 30
4386: PPUSH
4387: CALL_OW 380
// un := CreateHuman ;
4391: LD_ADDR_VAR 0 3
4395: PUSH
4396: CALL_OW 44
4400: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_depot ) ;
4401: LD_VAR 0 3
4405: PPUSH
4406: LD_VAR 0 4
4410: PPUSH
4411: CALL_OW 52
// end ;
4415: GO 4258
4417: POP
4418: POP
// if Difficulty > 1 then
4419: LD_OWVAR 67
4423: PUSH
4424: LD_INT 1
4426: GREATER
4427: IFFALSE 4460
// begin un := CreateBehemoth ( 3 , 160 , 36 , 3 ) ;
4429: LD_ADDR_VAR 0 3
4433: PUSH
4434: LD_INT 3
4436: PPUSH
4437: LD_INT 160
4439: PPUSH
4440: LD_INT 36
4442: PPUSH
4443: LD_INT 3
4445: PPUSH
4446: CALL 83101 0 4
4450: ST_TO_ADDR
// ComHold ( un ) ;
4451: LD_VAR 0 3
4455: PPUSH
4456: CALL_OW 140
// end ; russian_prepared := true ;
4460: LD_ADDR_EXP 2
4464: PUSH
4465: LD_INT 1
4467: ST_TO_ADDR
// ComConstruct ( ru_factory , ru_medium_wheeled , 3 , control_computer , ru_cargo_bay ) ;
4468: LD_VAR 0 5
4472: PPUSH
4473: LD_INT 21
4475: PPUSH
4476: LD_INT 3
4478: PPUSH
4479: LD_INT 3
4481: PPUSH
4482: LD_INT 51
4484: PPUSH
4485: CALL_OW 125
// end ;
4489: LD_VAR 0 1
4493: RET
// every 0 0$02 trigger FilterAllUnits ( [ f_side , 3 ] ) > 0 and russian_prepared do var ru_depot , ru_factory , ru_teleport , ru_bunkers , ru_buildings , ru_vehicles , ru_humans , ru_barracks , ru_engs , ru_mech , ru_sci , i , tmp , filter , cr , sib_bomb ;
4494: LD_INT 22
4496: PUSH
4497: LD_INT 3
4499: PUSH
4500: EMPTY
4501: LIST
4502: LIST
4503: PPUSH
4504: CALL_OW 69
4508: PUSH
4509: LD_INT 0
4511: GREATER
4512: IFFALSE 4520
4514: PUSH
4515: LD_EXP 2
4519: AND
4520: IFFALSE 6698
4522: GO 4524
4524: DISABLE
4525: LD_INT 0
4527: PPUSH
4528: PPUSH
4529: PPUSH
4530: PPUSH
4531: PPUSH
4532: PPUSH
4533: PPUSH
4534: PPUSH
4535: PPUSH
4536: PPUSH
4537: PPUSH
4538: PPUSH
4539: PPUSH
4540: PPUSH
4541: PPUSH
4542: PPUSH
// begin enable ;
4543: ENABLE
// ru_depot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
4544: LD_ADDR_VAR 0 1
4548: PUSH
4549: LD_INT 22
4551: PUSH
4552: LD_INT 3
4554: PUSH
4555: EMPTY
4556: LIST
4557: LIST
4558: PUSH
4559: LD_INT 30
4561: PUSH
4562: LD_INT 1
4564: PUSH
4565: EMPTY
4566: LIST
4567: LIST
4568: PUSH
4569: EMPTY
4570: LIST
4571: LIST
4572: PPUSH
4573: CALL_OW 69
4577: PUSH
4578: LD_INT 1
4580: ARRAY
4581: ST_TO_ADDR
// ru_factory := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
4582: LD_ADDR_VAR 0 2
4586: PUSH
4587: LD_INT 22
4589: PUSH
4590: LD_INT 3
4592: PUSH
4593: EMPTY
4594: LIST
4595: LIST
4596: PUSH
4597: LD_INT 30
4599: PUSH
4600: LD_INT 3
4602: PUSH
4603: EMPTY
4604: LIST
4605: LIST
4606: PUSH
4607: EMPTY
4608: LIST
4609: LIST
4610: PPUSH
4611: CALL_OW 69
4615: PUSH
4616: LD_INT 1
4618: ARRAY
4619: ST_TO_ADDR
// ru_teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] ;
4620: LD_ADDR_VAR 0 3
4624: PUSH
4625: LD_INT 22
4627: PUSH
4628: LD_INT 3
4630: PUSH
4631: EMPTY
4632: LIST
4633: LIST
4634: PUSH
4635: LD_INT 30
4637: PUSH
4638: LD_INT 34
4640: PUSH
4641: EMPTY
4642: LIST
4643: LIST
4644: PUSH
4645: EMPTY
4646: LIST
4647: LIST
4648: PPUSH
4649: CALL_OW 69
4653: PUSH
4654: LD_INT 1
4656: ARRAY
4657: ST_TO_ADDR
// ru_bunkers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
4658: LD_ADDR_VAR 0 4
4662: PUSH
4663: LD_INT 22
4665: PUSH
4666: LD_INT 3
4668: PUSH
4669: EMPTY
4670: LIST
4671: LIST
4672: PUSH
4673: LD_INT 30
4675: PUSH
4676: LD_INT 33
4678: PUSH
4679: EMPTY
4680: LIST
4681: LIST
4682: PUSH
4683: EMPTY
4684: LIST
4685: LIST
4686: PPUSH
4687: CALL_OW 69
4691: ST_TO_ADDR
// ru_barracks := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
4692: LD_ADDR_VAR 0 8
4696: PUSH
4697: LD_INT 22
4699: PUSH
4700: LD_INT 3
4702: PUSH
4703: EMPTY
4704: LIST
4705: LIST
4706: PUSH
4707: LD_INT 30
4709: PUSH
4710: LD_INT 5
4712: PUSH
4713: EMPTY
4714: LIST
4715: LIST
4716: PUSH
4717: EMPTY
4718: LIST
4719: LIST
4720: PPUSH
4721: CALL_OW 69
4725: PUSH
4726: LD_INT 1
4728: ARRAY
4729: ST_TO_ADDR
// ru_buildings := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
4730: LD_ADDR_VAR 0 5
4734: PUSH
4735: LD_INT 22
4737: PUSH
4738: LD_INT 3
4740: PUSH
4741: EMPTY
4742: LIST
4743: LIST
4744: PUSH
4745: LD_INT 21
4747: PUSH
4748: LD_INT 3
4750: PUSH
4751: EMPTY
4752: LIST
4753: LIST
4754: PUSH
4755: EMPTY
4756: LIST
4757: LIST
4758: PPUSH
4759: CALL_OW 69
4763: ST_TO_ADDR
// ru_vehicles := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
4764: LD_ADDR_VAR 0 6
4768: PUSH
4769: LD_INT 22
4771: PUSH
4772: LD_INT 3
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: PUSH
4779: LD_INT 21
4781: PUSH
4782: LD_INT 2
4784: PUSH
4785: EMPTY
4786: LIST
4787: LIST
4788: PUSH
4789: EMPTY
4790: LIST
4791: LIST
4792: PPUSH
4793: CALL_OW 69
4797: ST_TO_ADDR
// ru_humans := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
4798: LD_ADDR_VAR 0 7
4802: PUSH
4803: LD_INT 22
4805: PUSH
4806: LD_INT 3
4808: PUSH
4809: EMPTY
4810: LIST
4811: LIST
4812: PUSH
4813: LD_INT 21
4815: PUSH
4816: LD_INT 1
4818: PUSH
4819: EMPTY
4820: LIST
4821: LIST
4822: PUSH
4823: EMPTY
4824: LIST
4825: LIST
4826: PPUSH
4827: CALL_OW 69
4831: ST_TO_ADDR
// ru_engs := UnitFilter ( ru_humans , [ f_class , 2 ] ) ;
4832: LD_ADDR_VAR 0 9
4836: PUSH
4837: LD_VAR 0 7
4841: PPUSH
4842: LD_INT 25
4844: PUSH
4845: LD_INT 2
4847: PUSH
4848: EMPTY
4849: LIST
4850: LIST
4851: PPUSH
4852: CALL_OW 72
4856: ST_TO_ADDR
// ru_mech := UnitFilter ( ru_humans , [ f_class , 3 ] ) ;
4857: LD_ADDR_VAR 0 10
4861: PUSH
4862: LD_VAR 0 7
4866: PPUSH
4867: LD_INT 25
4869: PUSH
4870: LD_INT 3
4872: PUSH
4873: EMPTY
4874: LIST
4875: LIST
4876: PPUSH
4877: CALL_OW 72
4881: ST_TO_ADDR
// ru_sci := UnitFilter ( ru_humans , [ f_class , 4 ] ) ;
4882: LD_ADDR_VAR 0 11
4886: PUSH
4887: LD_VAR 0 7
4891: PPUSH
4892: LD_INT 25
4894: PUSH
4895: LD_INT 4
4897: PUSH
4898: EMPTY
4899: LIST
4900: LIST
4901: PPUSH
4902: CALL_OW 72
4906: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) > 0 and ru_cargo = false then
4907: LD_INT 22
4909: PUSH
4910: LD_INT 3
4912: PUSH
4913: EMPTY
4914: LIST
4915: LIST
4916: PUSH
4917: LD_INT 34
4919: PUSH
4920: LD_INT 51
4922: PUSH
4923: EMPTY
4924: LIST
4925: LIST
4926: PUSH
4927: EMPTY
4928: LIST
4929: LIST
4930: PPUSH
4931: CALL_OW 69
4935: PUSH
4936: LD_INT 0
4938: GREATER
4939: IFFALSE 4951
4941: PUSH
4942: LD_EXP 31
4946: PUSH
4947: LD_INT 0
4949: EQUAL
4950: AND
4951: IFFALSE 4991
// ru_cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
4953: LD_ADDR_EXP 31
4957: PUSH
4958: LD_INT 22
4960: PUSH
4961: LD_INT 3
4963: PUSH
4964: EMPTY
4965: LIST
4966: LIST
4967: PUSH
4968: LD_INT 34
4970: PUSH
4971: LD_INT 51
4973: PUSH
4974: EMPTY
4975: LIST
4976: LIST
4977: PUSH
4978: EMPTY
4979: LIST
4980: LIST
4981: PPUSH
4982: CALL_OW 69
4986: PUSH
4987: LD_INT 1
4989: ARRAY
4990: ST_TO_ADDR
// if ru_cargo then
4991: LD_EXP 31
4995: IFFALSE 5347
// begin if IsInArea ( ru_cargo , ru_base ) then
4997: LD_EXP 31
5001: PPUSH
5002: LD_INT 9
5004: PPUSH
5005: CALL_OW 308
5009: IFFALSE 5088
// begin if GetCargo ( ru_cargo , mat_cans ) = 0 then
5011: LD_EXP 31
5015: PPUSH
5016: LD_INT 1
5018: PPUSH
5019: CALL_OW 289
5023: PUSH
5024: LD_INT 0
5026: EQUAL
5027: IFFALSE 5045
// ComEnterUnit ( ru_cargo , ru_teleport ) else
5029: LD_EXP 31
5033: PPUSH
5034: LD_VAR 0 3
5038: PPUSH
5039: CALL_OW 120
5043: GO 5086
// if not HasTask ( ru_cargo ) then
5045: LD_EXP 31
5049: PPUSH
5050: CALL_OW 314
5054: NOT
5055: IFFALSE 5086
// ComMoveXY ( ru_cargo , GetX ( ru_depot ) , GetY ( ru_depot ) ) ;
5057: LD_EXP 31
5061: PPUSH
5062: LD_VAR 0 1
5066: PPUSH
5067: CALL_OW 250
5071: PPUSH
5072: LD_VAR 0 1
5076: PPUSH
5077: CALL_OW 251
5081: PPUSH
5082: CALL_OW 111
// end else
5086: GO 5347
// begin if not HasTask ( ru_cargo ) and GetCargo ( ru_cargo , mat_cans ) < 100 and not IsInArea ( ru_cargo , cargoa ) then
5088: LD_EXP 31
5092: PPUSH
5093: CALL_OW 314
5097: NOT
5098: IFFALSE 5118
5100: PUSH
5101: LD_EXP 31
5105: PPUSH
5106: LD_INT 1
5108: PPUSH
5109: CALL_OW 289
5113: PUSH
5114: LD_INT 100
5116: LESS
5117: AND
5118: IFFALSE 5135
5120: PUSH
5121: LD_EXP 31
5125: PPUSH
5126: LD_INT 10
5128: PPUSH
5129: CALL_OW 308
5133: NOT
5134: AND
5135: IFFALSE 5212
// begin cr := GetListOfCratesInArea ( ru_crates ) ;
5137: LD_ADDR_VAR 0 15
5141: PUSH
5142: LD_INT 11
5144: PPUSH
5145: CALL_OW 435
5149: ST_TO_ADDR
// if cr then
5150: LD_VAR 0 15
5154: IFFALSE 5185
// ComCollect ( ru_cargo , cr [ 1 ] , cr [ 2 ] ) else
5156: LD_EXP 31
5160: PPUSH
5161: LD_VAR 0 15
5165: PUSH
5166: LD_INT 1
5168: ARRAY
5169: PPUSH
5170: LD_VAR 0 15
5174: PUSH
5175: LD_INT 2
5177: ARRAY
5178: PPUSH
5179: CALL_OW 117
5183: GO 5212
// if not IsInArea ( ru_cargo , ru_crates ) then
5185: LD_EXP 31
5189: PPUSH
5190: LD_INT 11
5192: PPUSH
5193: CALL_OW 308
5197: NOT
5198: IFFALSE 5212
// ComMoveToArea ( ru_cargo , ru_crates ) ;
5200: LD_EXP 31
5204: PPUSH
5205: LD_INT 11
5207: PPUSH
5208: CALL_OW 113
// end ; if not HasTask ( ru_cargo ) and not IsInArea ( ru_cargo , cargoa ) and ( GetCargo ( ru_cargo , mat_cans ) = 100 or See ( your_side , ru_cargo ) ) then
5212: LD_EXP 31
5216: PPUSH
5217: CALL_OW 314
5221: NOT
5222: IFFALSE 5239
5224: PUSH
5225: LD_EXP 31
5229: PPUSH
5230: LD_INT 10
5232: PPUSH
5233: CALL_OW 308
5237: NOT
5238: AND
5239: IFFALSE 5277
5241: PUSH
5242: LD_EXP 31
5246: PPUSH
5247: LD_INT 1
5249: PPUSH
5250: CALL_OW 289
5254: PUSH
5255: LD_INT 100
5257: EQUAL
5258: IFTRUE 5276
5260: PUSH
5261: LD_OWVAR 2
5265: PPUSH
5266: LD_EXP 31
5270: PPUSH
5271: CALL_OW 292
5275: OR
5276: AND
5277: IFFALSE 5291
// ComMoveToArea ( ru_cargo , cargoa ) ;
5279: LD_EXP 31
5283: PPUSH
5284: LD_INT 10
5286: PPUSH
5287: CALL_OW 113
// if IsInArea ( ru_cargo , cargoa ) and ru_barracks then
5291: LD_EXP 31
5295: PPUSH
5296: LD_INT 10
5298: PPUSH
5299: CALL_OW 308
5303: IFFALSE 5311
5305: PUSH
5306: LD_VAR 0 8
5310: AND
5311: IFFALSE 5347
// ComSpaceShift ( UnitFilter ( ru_humans , [ f_class , class_bazooker ] ) [ 1 ] , 139 , 24 ) ;
5313: LD_VAR 0 7
5317: PPUSH
5318: LD_INT 25
5320: PUSH
5321: LD_INT 9
5323: PUSH
5324: EMPTY
5325: LIST
5326: LIST
5327: PPUSH
5328: CALL_OW 72
5332: PUSH
5333: LD_INT 1
5335: ARRAY
5336: PPUSH
5337: LD_INT 139
5339: PPUSH
5340: LD_INT 24
5342: PPUSH
5343: CALL_OW 153
// end ; end ; if ru_cargo = 0 and ru_factory and BuildingStatus ( ru_factory ) = bs_idle then
5347: LD_EXP 31
5351: PUSH
5352: LD_INT 0
5354: EQUAL
5355: IFFALSE 5363
5357: PUSH
5358: LD_VAR 0 2
5362: AND
5363: IFFALSE 5380
5365: PUSH
5366: LD_VAR 0 2
5370: PPUSH
5371: CALL_OW 461
5375: PUSH
5376: LD_INT 2
5378: EQUAL
5379: AND
5380: IFFALSE 5403
// ComConstruct ( ru_factory , ru_medium_wheeled , 3 , control_computer , ru_cargo_bay ) ;
5382: LD_VAR 0 2
5386: PPUSH
5387: LD_INT 21
5389: PPUSH
5390: LD_INT 3
5392: PPUSH
5393: LD_INT 3
5395: PPUSH
5396: LD_INT 51
5398: PPUSH
5399: CALL_OW 125
// if ru_factory and ru_vlist > 0 then
5403: LD_VAR 0 2
5407: IFFALSE 5419
5409: PUSH
5410: LD_EXP 33
5414: PUSH
5415: LD_INT 0
5417: GREATER
5418: AND
5419: IFFALSE 5519
// begin if BuildingStatus ( ru_factory ) = bs_idle then
5421: LD_VAR 0 2
5425: PPUSH
5426: CALL_OW 461
5430: PUSH
5431: LD_INT 2
5433: EQUAL
5434: IFFALSE 5519
// begin ComConstruct ( ru_factory , ru_vlist [ 1 ] , ru_vlist [ 2 ] , ru_vlist [ 3 ] , ru_vlist [ 4 ] ) ;
5436: LD_VAR 0 2
5440: PPUSH
5441: LD_EXP 33
5445: PUSH
5446: LD_INT 1
5448: ARRAY
5449: PPUSH
5450: LD_EXP 33
5454: PUSH
5455: LD_INT 2
5457: ARRAY
5458: PPUSH
5459: LD_EXP 33
5463: PUSH
5464: LD_INT 3
5466: ARRAY
5467: PPUSH
5468: LD_EXP 33
5472: PUSH
5473: LD_INT 4
5475: ARRAY
5476: PPUSH
5477: CALL_OW 125
// for i = 1 to 4 do
5481: LD_ADDR_VAR 0 12
5485: PUSH
5486: DOUBLE
5487: LD_INT 1
5489: DEC
5490: ST_TO_ADDR
5491: LD_INT 4
5493: PUSH
5494: FOR_TO
5495: IFFALSE 5517
// ru_vlist := Delete ( ru_vlist , 1 ) ;
5497: LD_ADDR_EXP 33
5501: PUSH
5502: LD_EXP 33
5506: PPUSH
5507: LD_INT 1
5509: PPUSH
5510: CALL_OW 3
5514: ST_TO_ADDR
5515: GO 5494
5517: POP
5518: POP
// end ; end ; if BuildingStatus ( ru_lab ) = bs_idle and ru_sib_bomb then
5519: LD_INT 24
5521: PPUSH
5522: CALL_OW 461
5526: PUSH
5527: LD_INT 2
5529: EQUAL
5530: IFFALSE 5538
5532: PUSH
5533: LD_EXP 4
5537: AND
5538: IFFALSE 5566
// if GetTech ( tech_sibfiss , 3 ) = state_enabled then
5540: LD_INT 25
5542: PPUSH
5543: LD_INT 3
5545: PPUSH
5546: CALL_OW 321
5550: PUSH
5551: LD_INT 1
5553: EQUAL
5554: IFFALSE 5566
// ComResearch ( ru_lab , tech_sibfiss ) ;
5556: LD_INT 24
5558: PPUSH
5559: LD_INT 25
5561: PPUSH
5562: CALL_OW 124
// if GetTech ( tech_sibfiss , 3 ) = state_researched and tick mod 5 5$00 = 0 then
5566: LD_INT 25
5568: PPUSH
5569: LD_INT 3
5571: PPUSH
5572: CALL_OW 321
5576: PUSH
5577: LD_INT 2
5579: EQUAL
5580: IFFALSE 5596
5582: PUSH
5583: LD_OWVAR 1
5587: PUSH
5588: LD_INT 10500
5590: MOD
5591: PUSH
5592: LD_INT 0
5594: EQUAL
5595: AND
5596: IFFALSE 5634
// if BuildingStatus ( ru_factory ) = bs_idle then
5598: LD_VAR 0 2
5602: PPUSH
5603: CALL_OW 461
5607: PUSH
5608: LD_INT 2
5610: EQUAL
5611: IFFALSE 5634
// ComConstruct ( ru_factory , ru_heavy_wheeled , 3 , control_computer , ru_siberium_rocket ) ;
5613: LD_VAR 0 2
5617: PPUSH
5618: LD_INT 23
5620: PPUSH
5621: LD_INT 3
5623: PPUSH
5624: LD_INT 3
5626: PPUSH
5627: LD_INT 48
5629: PPUSH
5630: CALL_OW 125
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) > 0 then
5634: LD_INT 22
5636: PUSH
5637: LD_INT 3
5639: PUSH
5640: EMPTY
5641: LIST
5642: LIST
5643: PUSH
5644: LD_INT 34
5646: PUSH
5647: LD_INT 48
5649: PUSH
5650: EMPTY
5651: LIST
5652: LIST
5653: PUSH
5654: EMPTY
5655: LIST
5656: LIST
5657: PPUSH
5658: CALL_OW 69
5662: PUSH
5663: LD_INT 0
5665: GREATER
5666: IFFALSE 6040
// begin sib_bomb := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) [ 1 ] ;
5668: LD_ADDR_VAR 0 16
5672: PUSH
5673: LD_INT 22
5675: PUSH
5676: LD_INT 3
5678: PUSH
5679: EMPTY
5680: LIST
5681: LIST
5682: PUSH
5683: LD_INT 34
5685: PUSH
5686: LD_INT 48
5688: PUSH
5689: EMPTY
5690: LIST
5691: LIST
5692: PUSH
5693: EMPTY
5694: LIST
5695: LIST
5696: PPUSH
5697: CALL_OW 69
5701: PUSH
5702: LD_INT 1
5704: ARRAY
5705: ST_TO_ADDR
// if IsInArea ( sib_bomb , ru_base ) then
5706: LD_VAR 0 16
5710: PPUSH
5711: LD_INT 9
5713: PPUSH
5714: CALL_OW 308
5718: IFFALSE 5736
// ComEnterUnit ( sib_bomb , ru_teleport ) else
5720: LD_VAR 0 16
5724: PPUSH
5725: LD_VAR 0 3
5729: PPUSH
5730: CALL_OW 120
5734: GO 6040
// if not HasTask ( sib_bomb ) then
5736: LD_VAR 0 16
5740: PPUSH
5741: CALL_OW 314
5745: NOT
5746: IFFALSE 6040
// if GetLives ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) > 250 then
5748: LD_INT 22
5750: PUSH
5751: LD_OWVAR 2
5755: PUSH
5756: EMPTY
5757: LIST
5758: LIST
5759: PUSH
5760: LD_INT 30
5762: PUSH
5763: LD_INT 1
5765: PUSH
5766: EMPTY
5767: LIST
5768: LIST
5769: PUSH
5770: EMPTY
5771: LIST
5772: LIST
5773: PPUSH
5774: CALL_OW 69
5778: PUSH
5779: LD_INT 1
5781: ARRAY
5782: PPUSH
5783: CALL_OW 256
5787: PUSH
5788: LD_INT 250
5790: GREATER
5791: IFFALSE 5884
// ComAttackPlace ( sib_bomb , GetX ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) , GetY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ) else
5793: LD_VAR 0 16
5797: PPUSH
5798: LD_INT 22
5800: PUSH
5801: LD_OWVAR 2
5805: PUSH
5806: EMPTY
5807: LIST
5808: LIST
5809: PUSH
5810: LD_INT 30
5812: PUSH
5813: LD_INT 1
5815: PUSH
5816: EMPTY
5817: LIST
5818: LIST
5819: PUSH
5820: EMPTY
5821: LIST
5822: LIST
5823: PPUSH
5824: CALL_OW 69
5828: PUSH
5829: LD_INT 1
5831: ARRAY
5832: PPUSH
5833: CALL_OW 250
5837: PPUSH
5838: LD_INT 22
5840: PUSH
5841: LD_OWVAR 2
5845: PUSH
5846: EMPTY
5847: LIST
5848: LIST
5849: PUSH
5850: LD_INT 30
5852: PUSH
5853: LD_INT 1
5855: PUSH
5856: EMPTY
5857: LIST
5858: LIST
5859: PUSH
5860: EMPTY
5861: LIST
5862: LIST
5863: PPUSH
5864: CALL_OW 69
5868: PUSH
5869: LD_INT 1
5871: ARRAY
5872: PPUSH
5873: CALL_OW 251
5877: PPUSH
5878: CALL_OW 116
5882: GO 6040
// if FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) > 0 then
5884: LD_INT 22
5886: PUSH
5887: LD_OWVAR 2
5891: PUSH
5892: EMPTY
5893: LIST
5894: LIST
5895: PUSH
5896: LD_INT 21
5898: PUSH
5899: LD_INT 3
5901: PUSH
5902: EMPTY
5903: LIST
5904: LIST
5905: PUSH
5906: EMPTY
5907: LIST
5908: LIST
5909: PPUSH
5910: CALL_OW 69
5914: PUSH
5915: LD_INT 0
5917: GREATER
5918: IFFALSE 6011
// ComAttackPlace ( sib_bomb , GetX ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) [ 1 ] ) , GetY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) [ 1 ] ) ) else
5920: LD_VAR 0 16
5924: PPUSH
5925: LD_INT 22
5927: PUSH
5928: LD_OWVAR 2
5932: PUSH
5933: EMPTY
5934: LIST
5935: LIST
5936: PUSH
5937: LD_INT 21
5939: PUSH
5940: LD_INT 3
5942: PUSH
5943: EMPTY
5944: LIST
5945: LIST
5946: PUSH
5947: EMPTY
5948: LIST
5949: LIST
5950: PPUSH
5951: CALL_OW 69
5955: PUSH
5956: LD_INT 1
5958: ARRAY
5959: PPUSH
5960: CALL_OW 250
5964: PPUSH
5965: LD_INT 22
5967: PUSH
5968: LD_OWVAR 2
5972: PUSH
5973: EMPTY
5974: LIST
5975: LIST
5976: PUSH
5977: LD_INT 21
5979: PUSH
5980: LD_INT 3
5982: PUSH
5983: EMPTY
5984: LIST
5985: LIST
5986: PUSH
5987: EMPTY
5988: LIST
5989: LIST
5990: PPUSH
5991: CALL_OW 69
5995: PUSH
5996: LD_INT 1
5998: ARRAY
5999: PPUSH
6000: CALL_OW 251
6004: PPUSH
6005: CALL_OW 116
6009: GO 6040
// ComAttackPlace ( sib_bomb , GetX ( player_commander ) , GetY ( player_commander ) ) ;
6011: LD_VAR 0 16
6015: PPUSH
6016: LD_EXP 11
6020: PPUSH
6021: CALL_OW 250
6025: PPUSH
6026: LD_EXP 11
6030: PPUSH
6031: CALL_OW 251
6035: PPUSH
6036: CALL_OW 116
// end ; if ru_can_attack then
6040: LD_EXP 3
6044: IFFALSE 6192
// if ru_time > 0 0$00 then
6046: LD_EXP 35
6050: PUSH
6051: LD_INT 0
6053: GREATER
6054: IFFALSE 6072
// ru_time := ru_time - 0 0$03 else
6056: LD_ADDR_EXP 35
6060: PUSH
6061: LD_EXP 35
6065: PUSH
6066: LD_INT 105
6068: MINUS
6069: ST_TO_ADDR
6070: GO 6192
// begin ru_time := Rand ( 9 9$39 , 14 14$39 ) ;
6072: LD_ADDR_EXP 35
6076: PUSH
6077: LD_INT 20265
6079: PPUSH
6080: LD_INT 30765
6082: PPUSH
6083: CALL_OW 12
6087: ST_TO_ADDR
// for i = 1 to ru_amount do
6088: LD_ADDR_VAR 0 12
6092: PUSH
6093: DOUBLE
6094: LD_INT 1
6096: DEC
6097: ST_TO_ADDR
6098: LD_EXP 34
6102: PUSH
6103: FOR_TO
6104: IFFALSE 6190
// begin ru_vlist := ru_vlist ^ ru_heavy_wheeled ;
6106: LD_ADDR_EXP 33
6110: PUSH
6111: LD_EXP 33
6115: PUSH
6116: LD_INT 23
6118: ADD
6119: ST_TO_ADDR
// ru_vlist := ru_vlist ^ engine_siberite ;
6120: LD_ADDR_EXP 33
6124: PUSH
6125: LD_EXP 33
6129: PUSH
6130: LD_INT 3
6132: ADD
6133: ST_TO_ADDR
// ru_vlist := ru_vlist ^ control_computer ;
6134: LD_ADDR_EXP 33
6138: PUSH
6139: LD_EXP 33
6143: PUSH
6144: LD_INT 3
6146: ADD
6147: ST_TO_ADDR
// ru_vlist := ru_vlist ^ [ ru_heavy_gun , ru_rocket_launcher , ru_rocket ] [ MultiRand ( 1 , 2 , 3 ) ] ;
6148: LD_ADDR_EXP 33
6152: PUSH
6153: LD_EXP 33
6157: PUSH
6158: LD_INT 46
6160: PUSH
6161: LD_INT 45
6163: PUSH
6164: LD_INT 47
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: LIST
6171: PUSH
6172: LD_INT 1
6174: PPUSH
6175: LD_INT 2
6177: PPUSH
6178: LD_INT 3
6180: PPUSH
6181: CALL_OW 14
6185: ARRAY
6186: ADD
6187: ST_TO_ADDR
// end ;
6188: GO 6103
6190: POP
6191: POP
// end ; if UnitFilter ( ru_bunkers , [ f_bweapon , 0 ] ) > 0 then
6192: LD_VAR 0 4
6196: PPUSH
6197: LD_INT 35
6199: PUSH
6200: LD_INT 0
6202: PUSH
6203: EMPTY
6204: LIST
6205: LIST
6206: PPUSH
6207: CALL_OW 72
6211: PUSH
6212: LD_INT 0
6214: GREATER
6215: IFFALSE 6263
// if BuildingStatus ( ru_factory ) = bs_idle then
6217: LD_VAR 0 2
6221: PPUSH
6222: CALL_OW 461
6226: PUSH
6227: LD_INT 2
6229: EQUAL
6230: IFFALSE 6263
// ComPlaceWeapon ( UnitFilter ( ru_bunkers , [ f_bweapon , 0 ] ) [ 1 ] , ru_rocket ) ;
6232: LD_VAR 0 4
6236: PPUSH
6237: LD_INT 35
6239: PUSH
6240: LD_INT 0
6242: PUSH
6243: EMPTY
6244: LIST
6245: LIST
6246: PPUSH
6247: CALL_OW 72
6251: PUSH
6252: LD_INT 1
6254: ARRAY
6255: PPUSH
6256: LD_INT 47
6258: PPUSH
6259: CALL_OW 148
// if ru_force >= ru_amount then
6263: LD_EXP 29
6267: PUSH
6268: LD_EXP 34
6272: GREATEREQUAL
6273: IFFALSE 6284
// RaiseSailEvent ( event_russian_attack ) ;
6275: LD_EXP 22
6279: PPUSH
6280: CALL_OW 427
// if ru_engs > 0 then
6284: LD_VAR 0 9
6288: PUSH
6289: LD_INT 0
6291: GREATER
6292: IFFALSE 6698
// begin if UnitFilter ( ru_buildings , [ f_not , [ f_lives , 1000 ] ] ) > 0 then
6294: LD_VAR 0 5
6298: PPUSH
6299: LD_INT 3
6301: PUSH
6302: LD_INT 24
6304: PUSH
6305: LD_INT 1000
6307: PUSH
6308: EMPTY
6309: LIST
6310: LIST
6311: PUSH
6312: EMPTY
6313: LIST
6314: LIST
6315: PPUSH
6316: CALL_OW 72
6320: PUSH
6321: LD_INT 0
6323: GREATER
6324: IFFALSE 6481
// begin filter := UnitFilter ( ru_buildings , [ f_not , [ f_lives , 1000 ] ] ) ;
6326: LD_ADDR_VAR 0 14
6330: PUSH
6331: LD_VAR 0 5
6335: PPUSH
6336: LD_INT 3
6338: PUSH
6339: LD_INT 24
6341: PUSH
6342: LD_INT 1000
6344: PUSH
6345: EMPTY
6346: LIST
6347: LIST
6348: PUSH
6349: EMPTY
6350: LIST
6351: LIST
6352: PPUSH
6353: CALL_OW 72
6357: ST_TO_ADDR
// for i = 1 to ru_engs do
6358: LD_ADDR_VAR 0 12
6362: PUSH
6363: DOUBLE
6364: LD_INT 1
6366: DEC
6367: ST_TO_ADDR
6368: LD_VAR 0 9
6372: PUSH
6373: FOR_TO
6374: IFFALSE 6477
// begin if IsInUnit ( ru_engs [ i ] ) then
6376: LD_VAR 0 9
6380: PUSH
6381: LD_VAR 0 12
6385: ARRAY
6386: PPUSH
6387: CALL_OW 310
6391: IFFALSE 6410
// ComExitBuilding ( ru_engs [ i ] ) else
6393: LD_VAR 0 9
6397: PUSH
6398: LD_VAR 0 12
6402: ARRAY
6403: PPUSH
6404: CALL_OW 122
6408: GO 6475
// if not HasTask ( ru_engs [ i ] ) and GetLives ( ru_engs [ i ] ) > 600 then
6410: LD_VAR 0 9
6414: PUSH
6415: LD_VAR 0 12
6419: ARRAY
6420: PPUSH
6421: CALL_OW 314
6425: NOT
6426: IFFALSE 6449
6428: PUSH
6429: LD_VAR 0 9
6433: PUSH
6434: LD_VAR 0 12
6438: ARRAY
6439: PPUSH
6440: CALL_OW 256
6444: PUSH
6445: LD_INT 600
6447: GREATER
6448: AND
6449: IFFALSE 6475
// ComRepairBuilding ( ru_engs [ i ] , filter [ 1 ] ) ;
6451: LD_VAR 0 9
6455: PUSH
6456: LD_VAR 0 12
6460: ARRAY
6461: PPUSH
6462: LD_VAR 0 14
6466: PUSH
6467: LD_INT 1
6469: ARRAY
6470: PPUSH
6471: CALL_OW 130
// end ;
6475: GO 6373
6477: POP
6478: POP
// end else
6479: GO 6698
// begin if ru_blist = 0 then
6481: LD_EXP 32
6485: PUSH
6486: LD_INT 0
6488: EQUAL
6489: IFFALSE 6573
// begin for i = 1 to ru_engs do
6491: LD_ADDR_VAR 0 12
6495: PUSH
6496: DOUBLE
6497: LD_INT 1
6499: DEC
6500: ST_TO_ADDR
6501: LD_VAR 0 9
6505: PUSH
6506: FOR_TO
6507: IFFALSE 6569
// if not HasTask ( ru_engs [ i ] ) and not IsInUnit ( ru_engs [ i ] ) then
6509: LD_VAR 0 9
6513: PUSH
6514: LD_VAR 0 12
6518: ARRAY
6519: PPUSH
6520: CALL_OW 314
6524: NOT
6525: IFFALSE 6545
6527: PUSH
6528: LD_VAR 0 9
6532: PUSH
6533: LD_VAR 0 12
6537: ARRAY
6538: PPUSH
6539: CALL_OW 310
6543: NOT
6544: AND
6545: IFFALSE 6567
// ComEnterUnit ( ru_engs [ i ] , ru_depot ) ;
6547: LD_VAR 0 9
6551: PUSH
6552: LD_VAR 0 12
6556: ARRAY
6557: PPUSH
6558: LD_VAR 0 1
6562: PPUSH
6563: CALL_OW 120
6567: GO 6506
6569: POP
6570: POP
// end else
6571: GO 6698
// begin for i = 1 to ru_engs do
6573: LD_ADDR_VAR 0 12
6577: PUSH
6578: DOUBLE
6579: LD_INT 1
6581: DEC
6582: ST_TO_ADDR
6583: LD_VAR 0 9
6587: PUSH
6588: FOR_TO
6589: IFFALSE 6696
// begin if IsInUnit ( ru_engs [ i ] ) then
6591: LD_VAR 0 9
6595: PUSH
6596: LD_VAR 0 12
6600: ARRAY
6601: PPUSH
6602: CALL_OW 310
6606: IFFALSE 6625
// ComExitBuilding ( ru_engs [ i ] ) else
6608: LD_VAR 0 9
6612: PUSH
6613: LD_VAR 0 12
6617: ARRAY
6618: PPUSH
6619: CALL_OW 122
6623: GO 6694
// if not HasTask ( ru_engs [ i ] ) then
6625: LD_VAR 0 9
6629: PUSH
6630: LD_VAR 0 12
6634: ARRAY
6635: PPUSH
6636: CALL_OW 314
6640: NOT
6641: IFFALSE 6694
// ComBuild ( ru_engs [ i ] , ru_blist [ 1 ] , ru_blist [ 2 ] , ru_blist [ 3 ] , ru_blist [ 4 ] ) ;
6643: LD_VAR 0 9
6647: PUSH
6648: LD_VAR 0 12
6652: ARRAY
6653: PPUSH
6654: LD_EXP 32
6658: PUSH
6659: LD_INT 1
6661: ARRAY
6662: PPUSH
6663: LD_EXP 32
6667: PUSH
6668: LD_INT 2
6670: ARRAY
6671: PPUSH
6672: LD_EXP 32
6676: PUSH
6677: LD_INT 3
6679: ARRAY
6680: PPUSH
6681: LD_EXP 32
6685: PUSH
6686: LD_INT 4
6688: ARRAY
6689: PPUSH
6690: CALL_OW 145
// end ;
6694: GO 6588
6696: POP
6697: POP
// end ; end ; end ; end ;
6698: PPOPN 16
6700: END
// every 3 3$40 + 0 0$45 trigger russian_prepared and GetListOfCratesInArea ( ru_crates ) < 10 do
6701: LD_EXP 2
6705: IFFALSE 6720
6707: PUSH
6708: LD_INT 11
6710: PPUSH
6711: CALL_OW 435
6715: PUSH
6716: LD_INT 10
6718: LESS
6719: AND
6720: IFFALSE 6783
6722: GO 6724
6724: DISABLE
// begin enable ;
6725: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , ru_crates , true ) ;
6726: LD_INT 1
6728: PPUSH
6729: LD_INT 5
6731: PPUSH
6732: CALL_OW 12
6736: PPUSH
6737: LD_INT 11
6739: PPUSH
6740: LD_INT 1
6742: PPUSH
6743: CALL_OW 55
// Wait ( Rand ( 0 0$43 , 1 1$00 ) ) ;
6747: LD_INT 1505
6749: PPUSH
6750: LD_INT 2100
6752: PPUSH
6753: CALL_OW 12
6757: PPUSH
6758: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 5 ) , ru_crates , true ) ;
6762: LD_INT 1
6764: PPUSH
6765: LD_INT 5
6767: PPUSH
6768: CALL_OW 12
6772: PPUSH
6773: LD_INT 11
6775: PPUSH
6776: LD_INT 1
6778: PPUSH
6779: CALL_OW 55
// end ;
6783: END
// every 15 15$00 + 25 25$00 trigger not ru_sib_bomb do var i , tmp ;
6784: LD_EXP 4
6788: NOT
6789: IFFALSE 6904
6791: GO 6793
6793: DISABLE
6794: LD_INT 0
6796: PPUSH
6797: PPUSH
// begin enable ;
6798: ENABLE
// i := Rand ( 0 , 100 ) ;
6799: LD_ADDR_VAR 0 1
6803: PUSH
6804: LD_INT 0
6806: PPUSH
6807: LD_INT 100
6809: PPUSH
6810: CALL_OW 12
6814: ST_TO_ADDR
// case your_side of 1 :
6815: LD_OWVAR 2
6819: PUSH
6820: LD_INT 1
6822: DOUBLE
6823: EQUAL
6824: IFTRUE 6828
6826: GO 6839
6828: POP
// tmp := 10 ; 2 :
6829: LD_ADDR_VAR 0 2
6833: PUSH
6834: LD_INT 10
6836: ST_TO_ADDR
6837: GO 6878
6839: LD_INT 2
6841: DOUBLE
6842: EQUAL
6843: IFTRUE 6847
6845: GO 6858
6847: POP
// tmp := 0 ; 7 :
6848: LD_ADDR_VAR 0 2
6852: PUSH
6853: LD_INT 0
6855: ST_TO_ADDR
6856: GO 6878
6858: LD_INT 7
6860: DOUBLE
6861: EQUAL
6862: IFTRUE 6866
6864: GO 6877
6866: POP
// tmp := 15 ; end ;
6867: LD_ADDR_VAR 0 2
6871: PUSH
6872: LD_INT 15
6874: ST_TO_ADDR
6875: GO 6878
6877: POP
// if i < chance_to_bomb + tmp then
6878: LD_VAR 0 1
6882: PUSH
6883: LD_EXP 5
6887: PUSH
6888: LD_VAR 0 2
6892: PLUS
6893: LESS
6894: IFFALSE 6904
// ru_sib_bomb := true ;
6896: LD_ADDR_EXP 4
6900: PUSH
6901: LD_INT 1
6903: ST_TO_ADDR
// end ;
6904: PPOPN 2
6906: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_weapon , us_siberium_rocket ] ] ) do
6907: LD_INT 22
6909: PUSH
6910: LD_OWVAR 2
6914: PUSH
6915: EMPTY
6916: LIST
6917: LIST
6918: PUSH
6919: LD_INT 34
6921: PUSH
6922: LD_INT 8
6924: PUSH
6925: EMPTY
6926: LIST
6927: LIST
6928: PUSH
6929: EMPTY
6930: LIST
6931: LIST
6932: PPUSH
6933: CALL_OW 69
6937: IFFALSE 6950
6939: GO 6941
6941: DISABLE
// begin ru_sib_bomb := true ;
6942: LD_ADDR_EXP 4
6946: PUSH
6947: LD_INT 1
6949: ST_TO_ADDR
// end ;
6950: END
// every 10 10$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) do var i ;
6951: LD_INT 22
6953: PUSH
6954: LD_INT 3
6956: PUSH
6957: EMPTY
6958: LIST
6959: LIST
6960: PUSH
6961: LD_INT 30
6963: PUSH
6964: LD_INT 34
6966: PUSH
6967: EMPTY
6968: LIST
6969: LIST
6970: PUSH
6971: EMPTY
6972: LIST
6973: LIST
6974: PPUSH
6975: CALL_OW 69
6979: IFFALSE 7078
6981: GO 6983
6983: DISABLE
6984: LD_INT 0
6986: PPUSH
// begin enable ;
6987: ENABLE
// i := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
6988: LD_ADDR_VAR 0 1
6992: PUSH
6993: LD_INT 1
6995: PUSH
6996: LD_INT 3
6998: PUSH
6999: EMPTY
7000: LIST
7001: LIST
7002: PUSH
7003: LD_INT 1
7005: PPUSH
7006: LD_INT 2
7008: PPUSH
7009: CALL_OW 12
7013: ARRAY
7014: ST_TO_ADDR
// TeleportExit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] , ru_teleport_exit [ i ] , ru_teleport_exit [ i + 1 ] ) ;
7015: LD_INT 22
7017: PUSH
7018: LD_INT 3
7020: PUSH
7021: EMPTY
7022: LIST
7023: LIST
7024: PUSH
7025: LD_INT 30
7027: PUSH
7028: LD_INT 34
7030: PUSH
7031: EMPTY
7032: LIST
7033: LIST
7034: PUSH
7035: EMPTY
7036: LIST
7037: LIST
7038: PPUSH
7039: CALL_OW 69
7043: PUSH
7044: LD_INT 1
7046: ARRAY
7047: PPUSH
7048: LD_EXP 36
7052: PUSH
7053: LD_VAR 0 1
7057: ARRAY
7058: PPUSH
7059: LD_EXP 36
7063: PUSH
7064: LD_VAR 0 1
7068: PUSH
7069: LD_INT 1
7071: PLUS
7072: ARRAY
7073: PPUSH
7074: CALL_OW 243
// end ;
7078: PPOPN 1
7080: END
// every 12 12$00 trigger tick >= [ 28 28$00 , 25 25$00 ] [ Difficulty - 1 ] and Difficulty > 1 and FilterAllUnits ( [ f_side , 3 ] ) do var i , un , tmp , p , path ;
7081: LD_OWVAR 1
7085: PUSH
7086: LD_INT 58800
7088: PUSH
7089: LD_INT 52500
7091: PUSH
7092: EMPTY
7093: LIST
7094: LIST
7095: PUSH
7096: LD_OWVAR 67
7100: PUSH
7101: LD_INT 1
7103: MINUS
7104: ARRAY
7105: GREATEREQUAL
7106: IFFALSE 7118
7108: PUSH
7109: LD_OWVAR 67
7113: PUSH
7114: LD_INT 1
7116: GREATER
7117: AND
7118: IFFALSE 7136
7120: PUSH
7121: LD_INT 22
7123: PUSH
7124: LD_INT 3
7126: PUSH
7127: EMPTY
7128: LIST
7129: LIST
7130: PPUSH
7131: CALL_OW 69
7135: AND
7136: IFFALSE 7558
7138: GO 7140
7140: DISABLE
7141: LD_INT 0
7143: PPUSH
7144: PPUSH
7145: PPUSH
7146: PPUSH
7147: PPUSH
// begin enable ;
7148: ENABLE
// if tick > 60 60$00 then
7149: LD_OWVAR 1
7153: PUSH
7154: LD_INT 126000
7156: GREATER
7157: IFFALSE 7160
// disable ;
7159: DISABLE
// tmp := [ ] ;
7160: LD_ADDR_VAR 0 3
7164: PUSH
7165: EMPTY
7166: ST_TO_ADDR
// for i := 1 to 8 do
7167: LD_ADDR_VAR 0 1
7171: PUSH
7172: DOUBLE
7173: LD_INT 1
7175: DEC
7176: ST_TO_ADDR
7177: LD_INT 8
7179: PUSH
7180: FOR_TO
7181: IFFALSE 7340
// begin uc_side := 6 ;
7183: LD_ADDR_OWVAR 20
7187: PUSH
7188: LD_INT 6
7190: ST_TO_ADDR
// uc_nation := 3 ;
7191: LD_ADDR_OWVAR 21
7195: PUSH
7196: LD_INT 3
7198: ST_TO_ADDR
// vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod 3 + 1 ] ;
7199: LD_ADDR_OWVAR 37
7203: PUSH
7204: LD_INT 21
7206: PUSH
7207: LD_INT 23
7209: PUSH
7210: LD_INT 24
7212: PUSH
7213: EMPTY
7214: LIST
7215: LIST
7216: LIST
7217: PUSH
7218: LD_VAR 0 1
7222: PUSH
7223: LD_INT 3
7225: MOD
7226: PUSH
7227: LD_INT 1
7229: PLUS
7230: ARRAY
7231: ST_TO_ADDR
// vc_engine := engine_siberite ;
7232: LD_ADDR_OWVAR 39
7236: PUSH
7237: LD_INT 3
7239: ST_TO_ADDR
// vc_control := control_computer ;
7240: LD_ADDR_OWVAR 38
7244: PUSH
7245: LD_INT 3
7247: ST_TO_ADDR
// vc_weapon := [ ru_rocket_launcher , ru_flamethrower , ru_rocket ] [ i mod 3 + 1 ] ;
7248: LD_ADDR_OWVAR 40
7252: PUSH
7253: LD_INT 45
7255: PUSH
7256: LD_INT 93
7258: PUSH
7259: LD_INT 47
7261: PUSH
7262: EMPTY
7263: LIST
7264: LIST
7265: LIST
7266: PUSH
7267: LD_VAR 0 1
7271: PUSH
7272: LD_INT 3
7274: MOD
7275: PUSH
7276: LD_INT 1
7278: PLUS
7279: ARRAY
7280: ST_TO_ADDR
// un := CreateVehicle ;
7281: LD_ADDR_VAR 0 2
7285: PUSH
7286: CALL_OW 45
7290: ST_TO_ADDR
// SetDir ( un , 2 ) ;
7291: LD_VAR 0 2
7295: PPUSH
7296: LD_INT 2
7298: PPUSH
7299: CALL_OW 233
// PlaceUnitArea ( un , start_north , false ) ;
7303: LD_VAR 0 2
7307: PPUSH
7308: LD_INT 1
7310: PPUSH
7311: LD_INT 0
7313: PPUSH
7314: CALL_OW 49
// tmp := Join ( tmp , un ) ;
7318: LD_ADDR_VAR 0 3
7322: PUSH
7323: LD_VAR 0 3
7327: PPUSH
7328: LD_VAR 0 2
7332: PPUSH
7333: CALL 79466 0 2
7337: ST_TO_ADDR
// end ;
7338: GO 7180
7340: POP
7341: POP
// if FilterAllUnits ( [ [ f_side , your_side ] , [ f_distxy , 58 , 15 , 18 ] ] ) > 1 then
7342: LD_INT 22
7344: PUSH
7345: LD_OWVAR 2
7349: PUSH
7350: EMPTY
7351: LIST
7352: LIST
7353: PUSH
7354: LD_INT 92
7356: PUSH
7357: LD_INT 58
7359: PUSH
7360: LD_INT 15
7362: PUSH
7363: LD_INT 18
7365: PUSH
7366: EMPTY
7367: LIST
7368: LIST
7369: LIST
7370: LIST
7371: PUSH
7372: EMPTY
7373: LIST
7374: LIST
7375: PPUSH
7376: CALL_OW 69
7380: PUSH
7381: LD_INT 1
7383: GREATER
7384: IFFALSE 7396
// p := 2 else
7386: LD_ADDR_VAR 0 4
7390: PUSH
7391: LD_INT 2
7393: ST_TO_ADDR
7394: GO 7404
// p := 1 ;
7396: LD_ADDR_VAR 0 4
7400: PUSH
7401: LD_INT 1
7403: ST_TO_ADDR
// case p of 1 :
7404: LD_VAR 0 4
7408: PUSH
7409: LD_INT 1
7411: DOUBLE
7412: EQUAL
7413: IFTRUE 7417
7415: GO 7482
7417: POP
// path := [ [ 29 , 29 ] , [ 49 , 70 ] , [ 49 , 70 ] , [ 61 , 110 ] , [ 74 , 129 ] ] ; 2 :
7418: LD_ADDR_VAR 0 5
7422: PUSH
7423: LD_INT 29
7425: PUSH
7426: LD_INT 29
7428: PUSH
7429: EMPTY
7430: LIST
7431: LIST
7432: PUSH
7433: LD_INT 49
7435: PUSH
7436: LD_INT 70
7438: PUSH
7439: EMPTY
7440: LIST
7441: LIST
7442: PUSH
7443: LD_INT 49
7445: PUSH
7446: LD_INT 70
7448: PUSH
7449: EMPTY
7450: LIST
7451: LIST
7452: PUSH
7453: LD_INT 61
7455: PUSH
7456: LD_INT 110
7458: PUSH
7459: EMPTY
7460: LIST
7461: LIST
7462: PUSH
7463: LD_INT 74
7465: PUSH
7466: LD_INT 129
7468: PUSH
7469: EMPTY
7470: LIST
7471: LIST
7472: PUSH
7473: EMPTY
7474: LIST
7475: LIST
7476: LIST
7477: LIST
7478: LIST
7479: ST_TO_ADDR
7480: GO 7534
7482: LD_INT 2
7484: DOUBLE
7485: EQUAL
7486: IFTRUE 7490
7488: GO 7533
7490: POP
// path := [ [ 24 , 23 ] , [ 49 , 39 ] , [ 52 , 27 ] ] ; end ;
7491: LD_ADDR_VAR 0 5
7495: PUSH
7496: LD_INT 24
7498: PUSH
7499: LD_INT 23
7501: PUSH
7502: EMPTY
7503: LIST
7504: LIST
7505: PUSH
7506: LD_INT 49
7508: PUSH
7509: LD_INT 39
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: PUSH
7516: LD_INT 52
7518: PUSH
7519: LD_INT 27
7521: PUSH
7522: EMPTY
7523: LIST
7524: LIST
7525: PUSH
7526: EMPTY
7527: LIST
7528: LIST
7529: LIST
7530: ST_TO_ADDR
7531: GO 7534
7533: POP
// repeat wait ( 0 0$1 ) ;
7534: LD_INT 35
7536: PPUSH
7537: CALL_OW 67
// until not AgressiveMove ( tmp , path ) ;
7541: LD_VAR 0 3
7545: PPUSH
7546: LD_VAR 0 5
7550: PPUSH
7551: CALL 82232 0 2
7555: NOT
7556: IFFALSE 7534
// end ;
7558: PPOPN 5
7560: END
// every 20 20$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) do var ru_depot ;
7561: LD_INT 22
7563: PUSH
7564: LD_INT 3
7566: PUSH
7567: EMPTY
7568: LIST
7569: LIST
7570: PUSH
7571: LD_INT 30
7573: PUSH
7574: LD_INT 1
7576: PUSH
7577: EMPTY
7578: LIST
7579: LIST
7580: PUSH
7581: EMPTY
7582: LIST
7583: LIST
7584: PPUSH
7585: CALL_OW 69
7589: IFFALSE 7676
7591: GO 7593
7593: DISABLE
7594: LD_INT 0
7596: PPUSH
// begin enable ;
7597: ENABLE
// ru_depot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
7598: LD_ADDR_VAR 0 1
7602: PUSH
7603: LD_INT 22
7605: PUSH
7606: LD_INT 3
7608: PUSH
7609: EMPTY
7610: LIST
7611: LIST
7612: PUSH
7613: LD_INT 30
7615: PUSH
7616: LD_INT 1
7618: PUSH
7619: EMPTY
7620: LIST
7621: LIST
7622: PUSH
7623: EMPTY
7624: LIST
7625: LIST
7626: PPUSH
7627: CALL_OW 69
7631: PUSH
7632: LD_INT 1
7634: ARRAY
7635: ST_TO_ADDR
// AddResourceType ( GetBase ( ru_depot ) , mat_cans , 6000 ) ;
7636: LD_VAR 0 1
7640: PPUSH
7641: CALL_OW 274
7645: PPUSH
7646: LD_INT 1
7648: PPUSH
7649: LD_INT 6000
7651: PPUSH
7652: CALL_OW 276
// AddResourceType ( GetBase ( ru_depot ) , mat_oil , 600 ) ;
7656: LD_VAR 0 1
7660: PPUSH
7661: CALL_OW 274
7665: PPUSH
7666: LD_INT 2
7668: PPUSH
7669: LD_INT 600
7671: PPUSH
7672: CALL_OW 276
// end ;
7676: PPOPN 1
7678: END
// export function RussianAttack ( ) ; var path , units , p , i , teleport ; begin
7679: LD_INT 0
7681: PPUSH
7682: PPUSH
7683: PPUSH
7684: PPUSH
7685: PPUSH
7686: PPUSH
// units := ru_force ;
7687: LD_ADDR_VAR 0 3
7691: PUSH
7692: LD_EXP 29
7696: ST_TO_ADDR
// teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) ;
7697: LD_ADDR_VAR 0 6
7701: PUSH
7702: LD_INT 22
7704: PUSH
7705: LD_INT 3
7707: PUSH
7708: EMPTY
7709: LIST
7710: LIST
7711: PUSH
7712: LD_INT 30
7714: PUSH
7715: LD_INT 34
7717: PUSH
7718: EMPTY
7719: LIST
7720: LIST
7721: PUSH
7722: EMPTY
7723: LIST
7724: LIST
7725: PPUSH
7726: CALL_OW 69
7730: ST_TO_ADDR
// ru_force := [ ] ;
7731: LD_ADDR_EXP 29
7735: PUSH
7736: EMPTY
7737: ST_TO_ADDR
// if not teleport then
7738: LD_VAR 0 6
7742: NOT
7743: IFFALSE 7785
// begin for i in units do
7745: LD_ADDR_VAR 0 5
7749: PUSH
7750: LD_VAR 0 3
7754: PUSH
7755: FOR_IN
7756: IFFALSE 7781
// TeleportUnit ( i , 150 , 65 , 12 , true ) ;
7758: LD_VAR 0 5
7762: PPUSH
7763: LD_INT 150
7765: PPUSH
7766: LD_INT 65
7768: PPUSH
7769: LD_INT 12
7771: PPUSH
7772: LD_INT 1
7774: PPUSH
7775: CALL_OW 483
7779: GO 7755
7781: POP
7782: POP
// end else
7783: GO 7880
// begin repeat for i = 1 to units do
7785: LD_ADDR_VAR 0 5
7789: PUSH
7790: DOUBLE
7791: LD_INT 1
7793: DEC
7794: ST_TO_ADDR
7795: LD_VAR 0 3
7799: PUSH
7800: FOR_TO
7801: IFFALSE 7849
// if IsInArea ( units [ i ] , ru_base ) then
7803: LD_VAR 0 3
7807: PUSH
7808: LD_VAR 0 5
7812: ARRAY
7813: PPUSH
7814: LD_INT 9
7816: PPUSH
7817: CALL_OW 308
7821: IFFALSE 7847
// ComEnterUnit ( units [ i ] , teleport [ 1 ] ) ;
7823: LD_VAR 0 3
7827: PUSH
7828: LD_VAR 0 5
7832: ARRAY
7833: PPUSH
7834: LD_VAR 0 6
7838: PUSH
7839: LD_INT 1
7841: ARRAY
7842: PPUSH
7843: CALL_OW 120
7847: GO 7800
7849: POP
7850: POP
// wait ( 0 0$10 ) ;
7851: LD_INT 350
7853: PPUSH
7854: CALL_OW 67
// until not UnitFilter ( units , [ f_inarea , ru_base ] ) ;
7858: LD_VAR 0 3
7862: PPUSH
7863: LD_INT 95
7865: PUSH
7866: LD_INT 9
7868: PUSH
7869: EMPTY
7870: LIST
7871: LIST
7872: PPUSH
7873: CALL_OW 72
7877: NOT
7878: IFFALSE 7785
// end ; p := rand ( 1 , 2 ) ;
7880: LD_ADDR_VAR 0 4
7884: PUSH
7885: LD_INT 1
7887: PPUSH
7888: LD_INT 2
7890: PPUSH
7891: CALL_OW 12
7895: ST_TO_ADDR
// case p of 1 :
7896: LD_VAR 0 4
7900: PUSH
7901: LD_INT 1
7903: DOUBLE
7904: EQUAL
7905: IFTRUE 7909
7907: GO 7963
7909: POP
// path := [ [ 159 , 71 ] , [ 152 , 99 ] , [ 107 , 119 ] , [ 104 , 127 ] ] ; 2 :
7910: LD_ADDR_VAR 0 2
7914: PUSH
7915: LD_INT 159
7917: PUSH
7918: LD_INT 71
7920: PUSH
7921: EMPTY
7922: LIST
7923: LIST
7924: PUSH
7925: LD_INT 152
7927: PUSH
7928: LD_INT 99
7930: PUSH
7931: EMPTY
7932: LIST
7933: LIST
7934: PUSH
7935: LD_INT 107
7937: PUSH
7938: LD_INT 119
7940: PUSH
7941: EMPTY
7942: LIST
7943: LIST
7944: PUSH
7945: LD_INT 104
7947: PUSH
7948: LD_INT 127
7950: PUSH
7951: EMPTY
7952: LIST
7953: LIST
7954: PUSH
7955: EMPTY
7956: LIST
7957: LIST
7958: LIST
7959: LIST
7960: ST_TO_ADDR
7961: GO 8026
7963: LD_INT 2
7965: DOUBLE
7966: EQUAL
7967: IFTRUE 7971
7969: GO 8025
7971: POP
// path := [ [ 116 , 36 ] , [ 91 , 52 ] , [ 53 , 67 ] , [ 58 , 107 ] ] ; end ;
7972: LD_ADDR_VAR 0 2
7976: PUSH
7977: LD_INT 116
7979: PUSH
7980: LD_INT 36
7982: PUSH
7983: EMPTY
7984: LIST
7985: LIST
7986: PUSH
7987: LD_INT 91
7989: PUSH
7990: LD_INT 52
7992: PUSH
7993: EMPTY
7994: LIST
7995: LIST
7996: PUSH
7997: LD_INT 53
7999: PUSH
8000: LD_INT 67
8002: PUSH
8003: EMPTY
8004: LIST
8005: LIST
8006: PUSH
8007: LD_INT 58
8009: PUSH
8010: LD_INT 107
8012: PUSH
8013: EMPTY
8014: LIST
8015: LIST
8016: PUSH
8017: EMPTY
8018: LIST
8019: LIST
8020: LIST
8021: LIST
8022: ST_TO_ADDR
8023: GO 8026
8025: POP
// if FilterAllUnits ( [ f_side , 7 ] ) and p > 1 then
8026: LD_INT 22
8028: PUSH
8029: LD_INT 7
8031: PUSH
8032: EMPTY
8033: LIST
8034: LIST
8035: PPUSH
8036: CALL_OW 69
8040: IFFALSE 8052
8042: PUSH
8043: LD_VAR 0 4
8047: PUSH
8048: LD_INT 1
8050: GREATER
8051: AND
8052: IFFALSE 8083
// path := [ [ 116 , 36 ] , [ 91 , 52 ] ] ;
8054: LD_ADDR_VAR 0 2
8058: PUSH
8059: LD_INT 116
8061: PUSH
8062: LD_INT 36
8064: PUSH
8065: EMPTY
8066: LIST
8067: LIST
8068: PUSH
8069: LD_INT 91
8071: PUSH
8072: LD_INT 52
8074: PUSH
8075: EMPTY
8076: LIST
8077: LIST
8078: PUSH
8079: EMPTY
8080: LIST
8081: LIST
8082: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8083: LD_INT 35
8085: PPUSH
8086: CALL_OW 67
// until not AgressiveMove ( units , path ) ;
8090: LD_VAR 0 3
8094: PPUSH
8095: LD_VAR 0 2
8099: PPUSH
8100: CALL 82232 0 2
8104: NOT
8105: IFFALSE 8083
// end ; end_of_file
8107: LD_VAR 0 1
8111: RET
// export function RemoveLegion ; var i ; begin
8112: LD_INT 0
8114: PPUSH
8115: PPUSH
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
8116: LD_ADDR_VAR 0 2
8120: PUSH
8121: LD_INT 22
8123: PUSH
8124: LD_INT 8
8126: PUSH
8127: EMPTY
8128: LIST
8129: LIST
8130: PPUSH
8131: CALL_OW 69
8135: PUSH
8136: FOR_IN
8137: IFFALSE 8150
// RemoveUnit ( i ) ;
8139: LD_VAR 0 2
8143: PPUSH
8144: CALL_OW 64
8148: GO 8136
8150: POP
8151: POP
// end ;
8152: LD_VAR 0 1
8156: RET
// export legion_force , legion_skill , legion_mines , legion_blist , legion_vlist , legion_enemy ; export function PrepareLegion ; var un , i , tmp , veh , l_depot , p , l_factory , l_lab , l_towers ; begin
8157: LD_INT 0
8159: PPUSH
8160: PPUSH
8161: PPUSH
8162: PPUSH
8163: PPUSH
8164: PPUSH
8165: PPUSH
8166: PPUSH
8167: PPUSH
8168: PPUSH
// l_depot := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
8169: LD_ADDR_VAR 0 6
8173: PUSH
8174: LD_INT 22
8176: PUSH
8177: LD_INT 8
8179: PUSH
8180: EMPTY
8181: LIST
8182: LIST
8183: PUSH
8184: LD_INT 30
8186: PUSH
8187: LD_INT 1
8189: PUSH
8190: EMPTY
8191: LIST
8192: LIST
8193: PUSH
8194: EMPTY
8195: LIST
8196: LIST
8197: PPUSH
8198: CALL_OW 69
8202: PUSH
8203: LD_INT 1
8205: ARRAY
8206: ST_TO_ADDR
// l_factory := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
8207: LD_ADDR_VAR 0 8
8211: PUSH
8212: LD_INT 22
8214: PUSH
8215: LD_INT 8
8217: PUSH
8218: EMPTY
8219: LIST
8220: LIST
8221: PUSH
8222: LD_INT 30
8224: PUSH
8225: LD_INT 3
8227: PUSH
8228: EMPTY
8229: LIST
8230: LIST
8231: PUSH
8232: EMPTY
8233: LIST
8234: LIST
8235: PPUSH
8236: CALL_OW 69
8240: PUSH
8241: LD_INT 1
8243: ARRAY
8244: ST_TO_ADDR
// l_lab := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ;
8245: LD_ADDR_VAR 0 9
8249: PUSH
8250: LD_INT 22
8252: PUSH
8253: LD_INT 8
8255: PUSH
8256: EMPTY
8257: LIST
8258: LIST
8259: PUSH
8260: LD_INT 2
8262: PUSH
8263: LD_INT 30
8265: PUSH
8266: LD_INT 6
8268: PUSH
8269: EMPTY
8270: LIST
8271: LIST
8272: PUSH
8273: LD_INT 30
8275: PUSH
8276: LD_INT 8
8278: PUSH
8279: EMPTY
8280: LIST
8281: LIST
8282: PUSH
8283: EMPTY
8284: LIST
8285: LIST
8286: LIST
8287: PUSH
8288: EMPTY
8289: LIST
8290: LIST
8291: PPUSH
8292: CALL_OW 69
8296: PUSH
8297: LD_INT 1
8299: ARRAY
8300: ST_TO_ADDR
// l_towers := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) ;
8301: LD_ADDR_VAR 0 10
8305: PUSH
8306: LD_INT 22
8308: PUSH
8309: LD_INT 8
8311: PUSH
8312: EMPTY
8313: LIST
8314: LIST
8315: PUSH
8316: LD_INT 30
8318: PUSH
8319: LD_INT 32
8321: PUSH
8322: EMPTY
8323: LIST
8324: LIST
8325: PUSH
8326: EMPTY
8327: LIST
8328: LIST
8329: PPUSH
8330: CALL_OW 69
8334: ST_TO_ADDR
// uc_side := 8 ;
8335: LD_ADDR_OWVAR 20
8339: PUSH
8340: LD_INT 8
8342: ST_TO_ADDR
// uc_nation := nation_arabian ;
8343: LD_ADDR_OWVAR 21
8347: PUSH
8348: LD_INT 2
8350: ST_TO_ADDR
// legion_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
8351: LD_ADDR_EXP 38
8355: PUSH
8356: LD_INT 5
8358: PUSH
8359: LD_INT 6
8361: PUSH
8362: LD_INT 7
8364: PUSH
8365: EMPTY
8366: LIST
8367: LIST
8368: LIST
8369: PUSH
8370: LD_OWVAR 67
8374: ARRAY
8375: ST_TO_ADDR
// legion_blist := [ ] ;
8376: LD_ADDR_EXP 40
8380: PUSH
8381: EMPTY
8382: ST_TO_ADDR
// legion_vlist := [ ] ;
8383: LD_ADDR_EXP 41
8387: PUSH
8388: EMPTY
8389: ST_TO_ADDR
// legion_force := [ ] ;
8390: LD_ADDR_EXP 37
8394: PUSH
8395: EMPTY
8396: ST_TO_ADDR
// legion_enemy := - 1 ;
8397: LD_ADDR_EXP 42
8401: PUSH
8402: LD_INT 1
8404: NEG
8405: ST_TO_ADDR
// SetResourceType ( GetBase ( l_depot ) , mat_cans , 10000 ) ;
8406: LD_VAR 0 6
8410: PPUSH
8411: CALL_OW 274
8415: PPUSH
8416: LD_INT 1
8418: PPUSH
8419: LD_INT 10000
8421: PPUSH
8422: CALL_OW 277
// SetResourceType ( GetBase ( l_depot ) , 3 , 1000 ) ;
8426: LD_VAR 0 6
8430: PPUSH
8431: CALL_OW 274
8435: PPUSH
8436: LD_INT 3
8438: PPUSH
8439: LD_INT 1000
8441: PPUSH
8442: CALL_OW 277
// for i = 1 to l_towers do
8446: LD_ADDR_VAR 0 3
8450: PUSH
8451: DOUBLE
8452: LD_INT 1
8454: DEC
8455: ST_TO_ADDR
8456: LD_VAR 0 10
8460: PUSH
8461: FOR_TO
8462: IFFALSE 8511
// begin PrepareHuman ( false , 1 , legion_skill ) ;
8464: LD_INT 0
8466: PPUSH
8467: LD_INT 1
8469: PPUSH
8470: LD_EXP 38
8474: PPUSH
8475: CALL_OW 380
// un := CreateHuman ;
8479: LD_ADDR_VAR 0 2
8483: PUSH
8484: CALL_OW 44
8488: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_towers [ i ] ) ;
8489: LD_VAR 0 2
8493: PPUSH
8494: LD_VAR 0 10
8498: PUSH
8499: LD_VAR 0 3
8503: ARRAY
8504: PPUSH
8505: CALL_OW 52
// end ;
8509: GO 8461
8511: POP
8512: POP
// for i = 1 to 4 do
8513: LD_ADDR_VAR 0 3
8517: PUSH
8518: DOUBLE
8519: LD_INT 1
8521: DEC
8522: ST_TO_ADDR
8523: LD_INT 4
8525: PUSH
8526: FOR_TO
8527: IFFALSE 8620
// for p = 1 to 2 do
8529: LD_ADDR_VAR 0 7
8533: PUSH
8534: DOUBLE
8535: LD_INT 1
8537: DEC
8538: ST_TO_ADDR
8539: LD_INT 2
8541: PUSH
8542: FOR_TO
8543: IFFALSE 8616
// begin PrepareHuman ( false , class_mortar , legion_skill ) ;
8545: LD_INT 0
8547: PPUSH
8548: LD_INT 8
8550: PPUSH
8551: LD_EXP 38
8555: PPUSH
8556: CALL_OW 380
// un := CreateHuman ;
8560: LD_ADDR_VAR 0 2
8564: PUSH
8565: CALL_OW 44
8569: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_barracks ] ] ) [ p ] ) ;
8570: LD_VAR 0 2
8574: PPUSH
8575: LD_INT 22
8577: PUSH
8578: LD_INT 8
8580: PUSH
8581: EMPTY
8582: LIST
8583: LIST
8584: PUSH
8585: LD_INT 30
8587: PUSH
8588: LD_INT 5
8590: PUSH
8591: EMPTY
8592: LIST
8593: LIST
8594: PUSH
8595: EMPTY
8596: LIST
8597: LIST
8598: PPUSH
8599: CALL_OW 69
8603: PUSH
8604: LD_VAR 0 7
8608: ARRAY
8609: PPUSH
8610: CALL_OW 52
// end ;
8614: GO 8542
8616: POP
8617: POP
8618: GO 8526
8620: POP
8621: POP
// for i = 1 to 4 do
8622: LD_ADDR_VAR 0 3
8626: PUSH
8627: DOUBLE
8628: LD_INT 1
8630: DEC
8631: ST_TO_ADDR
8632: LD_INT 4
8634: PUSH
8635: FOR_TO
8636: IFFALSE 8679
// begin PrepareHuman ( false , 4 , legion_skill ) ;
8638: LD_INT 0
8640: PPUSH
8641: LD_INT 4
8643: PPUSH
8644: LD_EXP 38
8648: PPUSH
8649: CALL_OW 380
// un := CreateHuman ;
8653: LD_ADDR_VAR 0 2
8657: PUSH
8658: CALL_OW 44
8662: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_lab ) ;
8663: LD_VAR 0 2
8667: PPUSH
8668: LD_VAR 0 9
8672: PPUSH
8673: CALL_OW 52
// end ;
8677: GO 8635
8679: POP
8680: POP
// for i = 1 to 4 do
8681: LD_ADDR_VAR 0 3
8685: PUSH
8686: DOUBLE
8687: LD_INT 1
8689: DEC
8690: ST_TO_ADDR
8691: LD_INT 4
8693: PUSH
8694: FOR_TO
8695: IFFALSE 8738
// begin PrepareHuman ( false , 3 , legion_skill ) ;
8697: LD_INT 0
8699: PPUSH
8700: LD_INT 3
8702: PPUSH
8703: LD_EXP 38
8707: PPUSH
8708: CALL_OW 380
// un := CreateHuman ;
8712: LD_ADDR_VAR 0 2
8716: PUSH
8717: CALL_OW 44
8721: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_factory ) ;
8722: LD_VAR 0 2
8726: PPUSH
8727: LD_VAR 0 8
8731: PPUSH
8732: CALL_OW 52
// end ;
8736: GO 8694
8738: POP
8739: POP
// for i = 1 to 3 do
8740: LD_ADDR_VAR 0 3
8744: PUSH
8745: DOUBLE
8746: LD_INT 1
8748: DEC
8749: ST_TO_ADDR
8750: LD_INT 3
8752: PUSH
8753: FOR_TO
8754: IFFALSE 8797
// begin PrepareHuman ( false , 2 , legion_skill ) ;
8756: LD_INT 0
8758: PPUSH
8759: LD_INT 2
8761: PPUSH
8762: LD_EXP 38
8766: PPUSH
8767: CALL_OW 380
// un := CreateHuman ;
8771: LD_ADDR_VAR 0 2
8775: PUSH
8776: CALL_OW 44
8780: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_depot ) ;
8781: LD_VAR 0 2
8785: PPUSH
8786: LD_VAR 0 6
8790: PPUSH
8791: CALL_OW 52
// end ;
8795: GO 8753
8797: POP
8798: POP
// for i = 1 to 3 do
8799: LD_ADDR_VAR 0 3
8803: PUSH
8804: DOUBLE
8805: LD_INT 1
8807: DEC
8808: ST_TO_ADDR
8809: LD_INT 3
8811: PUSH
8812: FOR_TO
8813: IFFALSE 8923
// begin vc_chassis := ar_half_tracked ;
8815: LD_ADDR_OWVAR 37
8819: PUSH
8820: LD_INT 14
8822: ST_TO_ADDR
// vc_engine := engine_siberite ;
8823: LD_ADDR_OWVAR 39
8827: PUSH
8828: LD_INT 3
8830: ST_TO_ADDR
// vc_control := control_manual ;
8831: LD_ADDR_OWVAR 38
8835: PUSH
8836: LD_INT 1
8838: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
8839: LD_ADDR_OWVAR 40
8843: PUSH
8844: LD_INT 31
8846: ST_TO_ADDR
// veh := CreateVehicle ;
8847: LD_ADDR_VAR 0 5
8851: PUSH
8852: CALL_OW 45
8856: ST_TO_ADDR
// PlaceUnitXYR ( veh , 212 , 135 , 5 , false ) ;
8857: LD_VAR 0 5
8861: PPUSH
8862: LD_INT 212
8864: PPUSH
8865: LD_INT 135
8867: PPUSH
8868: LD_INT 5
8870: PPUSH
8871: LD_INT 0
8873: PPUSH
8874: CALL_OW 50
// PrepareHuman ( false , 3 , legion_skill + 1 ) ;
8878: LD_INT 0
8880: PPUSH
8881: LD_INT 3
8883: PPUSH
8884: LD_EXP 38
8888: PUSH
8889: LD_INT 1
8891: PLUS
8892: PPUSH
8893: CALL_OW 380
// un := CreateHuman ;
8897: LD_ADDR_VAR 0 2
8901: PUSH
8902: CALL_OW 44
8906: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8907: LD_VAR 0 2
8911: PPUSH
8912: LD_VAR 0 5
8916: PPUSH
8917: CALL_OW 52
// end ;
8921: GO 8812
8923: POP
8924: POP
// PrepareSoldier ( false , 8 ) ;
8925: LD_INT 0
8927: PPUSH
8928: LD_INT 8
8930: PPUSH
8931: CALL_OW 381
// hc_class := class_sniper ;
8935: LD_ADDR_OWVAR 28
8939: PUSH
8940: LD_INT 5
8942: ST_TO_ADDR
// un := CreateHuman ;
8943: LD_ADDR_VAR 0 2
8947: PUSH
8948: CALL_OW 44
8952: ST_TO_ADDR
// SetDir ( un , 4 ) ;
8953: LD_VAR 0 2
8957: PPUSH
8958: LD_INT 4
8960: PPUSH
8961: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( 136 , 92 ) ) ;
8965: LD_VAR 0 2
8969: PPUSH
8970: LD_INT 136
8972: PPUSH
8973: LD_INT 92
8975: PPUSH
8976: CALL_OW 428
8980: PPUSH
8981: CALL_OW 52
// PlaceSeeing ( 198 , 94 , 8 , 10 ) ;
8985: LD_INT 198
8987: PPUSH
8988: LD_INT 94
8990: PPUSH
8991: LD_INT 8
8993: PPUSH
8994: LD_INT 10
8996: PPUSH
8997: CALL_OW 330
// PlaceSeeing ( 167 , 130 , 8 , 10 ) ;
9001: LD_INT 167
9003: PPUSH
9004: LD_INT 130
9006: PPUSH
9007: LD_INT 8
9009: PPUSH
9010: LD_INT 10
9012: PPUSH
9013: CALL_OW 330
// tmp := AreaToList ( legion_mines_area , 0 ) ;
9017: LD_ADDR_VAR 0 4
9021: PUSH
9022: LD_INT 24
9024: PPUSH
9025: LD_INT 0
9027: PPUSH
9028: CALL_OW 517
9032: ST_TO_ADDR
// legion_mines := [ ] ;
9033: LD_ADDR_EXP 39
9037: PUSH
9038: EMPTY
9039: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
9040: LD_ADDR_VAR 0 3
9044: PUSH
9045: DOUBLE
9046: LD_INT 1
9048: DEC
9049: ST_TO_ADDR
9050: LD_VAR 0 4
9054: PUSH
9055: LD_INT 1
9057: ARRAY
9058: PUSH
9059: FOR_TO
9060: IFFALSE 9162
// begin PlaceMine ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 8 , 0 ) ;
9062: LD_VAR 0 4
9066: PUSH
9067: LD_INT 1
9069: ARRAY
9070: PUSH
9071: LD_VAR 0 3
9075: ARRAY
9076: PPUSH
9077: LD_VAR 0 4
9081: PUSH
9082: LD_INT 2
9084: ARRAY
9085: PUSH
9086: LD_VAR 0 3
9090: ARRAY
9091: PPUSH
9092: LD_INT 8
9094: PPUSH
9095: LD_INT 0
9097: PPUSH
9098: CALL_OW 454
// legion_mines := Replace ( legion_mines , legion_mines + 1 , [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ) ;
9102: LD_ADDR_EXP 39
9106: PUSH
9107: LD_EXP 39
9111: PPUSH
9112: LD_EXP 39
9116: PUSH
9117: LD_INT 1
9119: PLUS
9120: PPUSH
9121: LD_VAR 0 4
9125: PUSH
9126: LD_INT 1
9128: ARRAY
9129: PUSH
9130: LD_VAR 0 3
9134: ARRAY
9135: PUSH
9136: LD_VAR 0 4
9140: PUSH
9141: LD_INT 2
9143: ARRAY
9144: PUSH
9145: LD_VAR 0 3
9149: ARRAY
9150: PUSH
9151: EMPTY
9152: LIST
9153: LIST
9154: PPUSH
9155: CALL_OW 1
9159: ST_TO_ADDR
// end ;
9160: GO 9059
9162: POP
9163: POP
// legion_vlist := [ ar_medium_trike , 3 , control_remote , ar_cargo_bay ] ;
9164: LD_ADDR_EXP 41
9168: PUSH
9169: LD_INT 13
9171: PUSH
9172: LD_INT 3
9174: PUSH
9175: LD_INT 2
9177: PUSH
9178: LD_INT 32
9180: PUSH
9181: EMPTY
9182: LIST
9183: LIST
9184: LIST
9185: LIST
9186: ST_TO_ADDR
// end ;
9187: LD_VAR 0 1
9191: RET
// every 0 0$1 trigger legion_mines and FilterUnitsInArea ( legion_mines_area , [ f_side , your_side ] ) do var i , un ;
9192: LD_EXP 39
9196: IFFALSE 9219
9198: PUSH
9199: LD_INT 24
9201: PPUSH
9202: LD_INT 22
9204: PUSH
9205: LD_OWVAR 2
9209: PUSH
9210: EMPTY
9211: LIST
9212: LIST
9213: PPUSH
9214: CALL_OW 70
9218: AND
9219: IFFALSE 9386
9221: GO 9223
9223: DISABLE
9224: LD_INT 0
9226: PPUSH
9227: PPUSH
// begin enable ;
9228: ENABLE
// for i := legion_mines downto 1 do
9229: LD_ADDR_VAR 0 1
9233: PUSH
9234: DOUBLE
9235: LD_EXP 39
9239: INC
9240: ST_TO_ADDR
9241: LD_INT 1
9243: PUSH
9244: FOR_DOWNTO
9245: IFFALSE 9384
// begin un := HexInfo ( legion_mines [ i ] [ 1 ] , legion_mines [ i ] [ 2 ] ) ;
9247: LD_ADDR_VAR 0 2
9251: PUSH
9252: LD_EXP 39
9256: PUSH
9257: LD_VAR 0 1
9261: ARRAY
9262: PUSH
9263: LD_INT 1
9265: ARRAY
9266: PPUSH
9267: LD_EXP 39
9271: PUSH
9272: LD_VAR 0 1
9276: ARRAY
9277: PUSH
9278: LD_INT 2
9280: ARRAY
9281: PPUSH
9282: CALL_OW 428
9286: ST_TO_ADDR
// if un then
9287: LD_VAR 0 2
9291: IFFALSE 9382
// if GetSide ( un ) = legion_enemy then
9293: LD_VAR 0 2
9297: PPUSH
9298: CALL_OW 255
9302: PUSH
9303: LD_EXP 42
9307: EQUAL
9308: IFFALSE 9382
// begin LaunchMineAtPos ( legion_mines [ i ] [ 1 ] , legion_mines [ i ] [ 2 ] , 8 ) ;
9310: LD_EXP 39
9314: PUSH
9315: LD_VAR 0 1
9319: ARRAY
9320: PUSH
9321: LD_INT 1
9323: ARRAY
9324: PPUSH
9325: LD_EXP 39
9329: PUSH
9330: LD_VAR 0 1
9334: ARRAY
9335: PUSH
9336: LD_INT 2
9338: ARRAY
9339: PPUSH
9340: LD_INT 8
9342: PPUSH
9343: CALL_OW 456
// legion_mines := Delete ( legion_mines , i ) ;
9347: LD_ADDR_EXP 39
9351: PUSH
9352: LD_EXP 39
9356: PPUSH
9357: LD_VAR 0 1
9361: PPUSH
9362: CALL_OW 3
9366: ST_TO_ADDR
// if not mine_vulc then
9367: LD_EXP 13
9371: NOT
9372: IFFALSE 9382
// mine_vulc := true ;
9374: LD_ADDR_EXP 13
9378: PUSH
9379: LD_INT 1
9381: ST_TO_ADDR
// end ; end ;
9382: GO 9244
9384: POP
9385: POP
// end ;
9386: PPOPN 2
9388: END
// every 0 0$1 trigger tick >= [ 25 25$00 , 22 22$00 , 20 20$00 ] [ Difficulty ] do var artifact , un ;
9389: LD_OWVAR 1
9393: PUSH
9394: LD_INT 52500
9396: PUSH
9397: LD_INT 46200
9399: PUSH
9400: LD_INT 42000
9402: PUSH
9403: EMPTY
9404: LIST
9405: LIST
9406: LIST
9407: PUSH
9408: LD_OWVAR 67
9412: ARRAY
9413: GREATEREQUAL
9414: IFFALSE 9594
9416: GO 9418
9418: DISABLE
9419: LD_INT 0
9421: PPUSH
9422: PPUSH
// begin artifact := FindArtifact ( 1 ) ;
9423: LD_ADDR_VAR 0 1
9427: PUSH
9428: LD_INT 1
9430: PPUSH
9431: CALL_OW 469
9435: ST_TO_ADDR
// if artifact [ 1 ] = 112 and artifact [ 2 ] = 67 then
9436: LD_VAR 0 1
9440: PUSH
9441: LD_INT 1
9443: ARRAY
9444: PUSH
9445: LD_INT 112
9447: EQUAL
9448: IFFALSE 9464
9450: PUSH
9451: LD_VAR 0 1
9455: PUSH
9456: LD_INT 2
9458: ARRAY
9459: PUSH
9460: LD_INT 67
9462: EQUAL
9463: AND
9464: IFFALSE 9594
// begin un := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 2 ] ] ) ;
9466: LD_ADDR_VAR 0 2
9470: PUSH
9471: LD_INT 22
9473: PUSH
9474: LD_INT 8
9476: PUSH
9477: EMPTY
9478: LIST
9479: LIST
9480: PUSH
9481: LD_INT 25
9483: PUSH
9484: LD_INT 2
9486: PUSH
9487: EMPTY
9488: LIST
9489: LIST
9490: PUSH
9491: EMPTY
9492: LIST
9493: LIST
9494: PPUSH
9495: CALL_OW 69
9499: ST_TO_ADDR
// if not un then
9500: LD_VAR 0 2
9504: NOT
9505: IFFALSE 9509
// exit ;
9507: GO 9594
// un := un [ 1 ] ;
9509: LD_ADDR_VAR 0 2
9513: PUSH
9514: LD_VAR 0 2
9518: PUSH
9519: LD_INT 1
9521: ARRAY
9522: ST_TO_ADDR
// if IsInUnit ( un ) then
9523: LD_VAR 0 2
9527: PPUSH
9528: CALL_OW 310
9532: IFFALSE 9543
// ComExitBuilding ( un ) ;
9534: LD_VAR 0 2
9538: PPUSH
9539: CALL_OW 122
// AddComCollect ( un , artifact [ 1 ] , artifact [ 2 ] ) ;
9543: LD_VAR 0 2
9547: PPUSH
9548: LD_VAR 0 1
9552: PUSH
9553: LD_INT 1
9555: ARRAY
9556: PPUSH
9557: LD_VAR 0 1
9561: PUSH
9562: LD_INT 2
9564: ARRAY
9565: PPUSH
9566: CALL_OW 177
// AddComMoveXY ( un , 207 , 123 ) ;
9570: LD_VAR 0 2
9574: PPUSH
9575: LD_INT 207
9577: PPUSH
9578: LD_INT 123
9580: PPUSH
9581: CALL_OW 171
// AddComUnload ( un ) ;
9585: LD_VAR 0 2
9589: PPUSH
9590: CALL_OW 219
// end ; end ;
9594: PPOPN 2
9596: END
// every 0 0$02 trigger FilterAllUnits ( [ f_side , 8 ] ) > 0 do var un , i , tmp , veh , b , p , cr , l_depot , l_factory , l_lab , l_towers , l_sib , l_sci , l_mech , l_sold , l_eng , l_cargo ;
9597: LD_INT 22
9599: PUSH
9600: LD_INT 8
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: PPUSH
9607: CALL_OW 69
9611: PUSH
9612: LD_INT 0
9614: GREATER
9615: IFFALSE 11209
9617: GO 9619
9619: DISABLE
9620: LD_INT 0
9622: PPUSH
9623: PPUSH
9624: PPUSH
9625: PPUSH
9626: PPUSH
9627: PPUSH
9628: PPUSH
9629: PPUSH
9630: PPUSH
9631: PPUSH
9632: PPUSH
9633: PPUSH
9634: PPUSH
9635: PPUSH
9636: PPUSH
9637: PPUSH
9638: PPUSH
// begin enable ;
9639: ENABLE
// l_depot := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
9640: LD_ADDR_VAR 0 8
9644: PUSH
9645: LD_INT 22
9647: PUSH
9648: LD_INT 8
9650: PUSH
9651: EMPTY
9652: LIST
9653: LIST
9654: PUSH
9655: LD_INT 30
9657: PUSH
9658: LD_INT 1
9660: PUSH
9661: EMPTY
9662: LIST
9663: LIST
9664: PUSH
9665: EMPTY
9666: LIST
9667: LIST
9668: PPUSH
9669: CALL_OW 69
9673: PUSH
9674: LD_INT 1
9676: ARRAY
9677: ST_TO_ADDR
// l_factory := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
9678: LD_ADDR_VAR 0 9
9682: PUSH
9683: LD_INT 22
9685: PUSH
9686: LD_INT 8
9688: PUSH
9689: EMPTY
9690: LIST
9691: LIST
9692: PUSH
9693: LD_INT 30
9695: PUSH
9696: LD_INT 3
9698: PUSH
9699: EMPTY
9700: LIST
9701: LIST
9702: PUSH
9703: EMPTY
9704: LIST
9705: LIST
9706: PPUSH
9707: CALL_OW 69
9711: PUSH
9712: LD_INT 1
9714: ARRAY
9715: ST_TO_ADDR
// l_lab := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ;
9716: LD_ADDR_VAR 0 10
9720: PUSH
9721: LD_INT 22
9723: PUSH
9724: LD_INT 8
9726: PUSH
9727: EMPTY
9728: LIST
9729: LIST
9730: PUSH
9731: LD_INT 2
9733: PUSH
9734: LD_INT 30
9736: PUSH
9737: LD_INT 6
9739: PUSH
9740: EMPTY
9741: LIST
9742: LIST
9743: PUSH
9744: LD_INT 30
9746: PUSH
9747: LD_INT 8
9749: PUSH
9750: EMPTY
9751: LIST
9752: LIST
9753: PUSH
9754: EMPTY
9755: LIST
9756: LIST
9757: LIST
9758: PUSH
9759: EMPTY
9760: LIST
9761: LIST
9762: PPUSH
9763: CALL_OW 69
9767: PUSH
9768: LD_INT 1
9770: ARRAY
9771: ST_TO_ADDR
// l_towers := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) ;
9772: LD_ADDR_VAR 0 11
9776: PUSH
9777: LD_INT 22
9779: PUSH
9780: LD_INT 8
9782: PUSH
9783: EMPTY
9784: LIST
9785: LIST
9786: PUSH
9787: LD_INT 30
9789: PUSH
9790: LD_INT 32
9792: PUSH
9793: EMPTY
9794: LIST
9795: LIST
9796: PUSH
9797: EMPTY
9798: LIST
9799: LIST
9800: PPUSH
9801: CALL_OW 69
9805: ST_TO_ADDR
// l_eng := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 2 ] ] ) ;
9806: LD_ADDR_VAR 0 16
9810: PUSH
9811: LD_INT 22
9813: PUSH
9814: LD_INT 8
9816: PUSH
9817: EMPTY
9818: LIST
9819: LIST
9820: PUSH
9821: LD_INT 25
9823: PUSH
9824: LD_INT 2
9826: PUSH
9827: EMPTY
9828: LIST
9829: LIST
9830: PUSH
9831: EMPTY
9832: LIST
9833: LIST
9834: PPUSH
9835: CALL_OW 69
9839: ST_TO_ADDR
// l_sold := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 1 ] ] ) ;
9840: LD_ADDR_VAR 0 15
9844: PUSH
9845: LD_INT 22
9847: PUSH
9848: LD_INT 8
9850: PUSH
9851: EMPTY
9852: LIST
9853: LIST
9854: PUSH
9855: LD_INT 25
9857: PUSH
9858: LD_INT 1
9860: PUSH
9861: EMPTY
9862: LIST
9863: LIST
9864: PUSH
9865: EMPTY
9866: LIST
9867: LIST
9868: PPUSH
9869: CALL_OW 69
9873: ST_TO_ADDR
// l_mech := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 3 ] ] ) ;
9874: LD_ADDR_VAR 0 14
9878: PUSH
9879: LD_INT 22
9881: PUSH
9882: LD_INT 8
9884: PUSH
9885: EMPTY
9886: LIST
9887: LIST
9888: PUSH
9889: LD_INT 25
9891: PUSH
9892: LD_INT 3
9894: PUSH
9895: EMPTY
9896: LIST
9897: LIST
9898: PUSH
9899: EMPTY
9900: LIST
9901: LIST
9902: PPUSH
9903: CALL_OW 69
9907: ST_TO_ADDR
// l_sci := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 4 ] ] ) ;
9908: LD_ADDR_VAR 0 13
9912: PUSH
9913: LD_INT 22
9915: PUSH
9916: LD_INT 8
9918: PUSH
9919: EMPTY
9920: LIST
9921: LIST
9922: PUSH
9923: LD_INT 25
9925: PUSH
9926: LD_INT 4
9928: PUSH
9929: EMPTY
9930: LIST
9931: LIST
9932: PUSH
9933: EMPTY
9934: LIST
9935: LIST
9936: PPUSH
9937: CALL_OW 69
9941: ST_TO_ADDR
// if l_eng then
9942: LD_VAR 0 16
9946: IFFALSE 10366
// begin b := FilterUnitsInArea ( legion_base_area , [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) ;
9948: LD_ADDR_VAR 0 5
9952: PUSH
9953: LD_INT 25
9955: PPUSH
9956: LD_INT 22
9958: PUSH
9959: LD_INT 8
9961: PUSH
9962: EMPTY
9963: LIST
9964: LIST
9965: PUSH
9966: LD_INT 21
9968: PUSH
9969: LD_INT 3
9971: PUSH
9972: EMPTY
9973: LIST
9974: LIST
9975: PUSH
9976: EMPTY
9977: LIST
9978: LIST
9979: PPUSH
9980: CALL_OW 70
9984: ST_TO_ADDR
// if UnitFilter ( b , [ f_not , [ f_lives , 1000 ] ] ) > 0 then
9985: LD_VAR 0 5
9989: PPUSH
9990: LD_INT 3
9992: PUSH
9993: LD_INT 24
9995: PUSH
9996: LD_INT 1000
9998: PUSH
9999: EMPTY
10000: LIST
10001: LIST
10002: PUSH
10003: EMPTY
10004: LIST
10005: LIST
10006: PPUSH
10007: CALL_OW 72
10011: PUSH
10012: LD_INT 0
10014: GREATER
10015: IFFALSE 10149
// begin tmp := UnitFilter ( b , [ f_not , [ f_lives , 1000 ] ] ) ;
10017: LD_ADDR_VAR 0 3
10021: PUSH
10022: LD_VAR 0 5
10026: PPUSH
10027: LD_INT 3
10029: PUSH
10030: LD_INT 24
10032: PUSH
10033: LD_INT 1000
10035: PUSH
10036: EMPTY
10037: LIST
10038: LIST
10039: PUSH
10040: EMPTY
10041: LIST
10042: LIST
10043: PPUSH
10044: CALL_OW 72
10048: ST_TO_ADDR
// for i = 1 to l_eng do
10049: LD_ADDR_VAR 0 2
10053: PUSH
10054: DOUBLE
10055: LD_INT 1
10057: DEC
10058: ST_TO_ADDR
10059: LD_VAR 0 16
10063: PUSH
10064: FOR_TO
10065: IFFALSE 10145
// if IsInUnit ( l_eng [ i ] ) then
10067: LD_VAR 0 16
10071: PUSH
10072: LD_VAR 0 2
10076: ARRAY
10077: PPUSH
10078: CALL_OW 310
10082: IFFALSE 10101
// ComExitBuilding ( l_eng [ i ] ) else
10084: LD_VAR 0 16
10088: PUSH
10089: LD_VAR 0 2
10093: ARRAY
10094: PPUSH
10095: CALL_OW 122
10099: GO 10143
// if not HasTask ( l_eng [ i ] ) then
10101: LD_VAR 0 16
10105: PUSH
10106: LD_VAR 0 2
10110: ARRAY
10111: PPUSH
10112: CALL_OW 314
10116: NOT
10117: IFFALSE 10143
// ComRepairBuilding ( l_eng [ i ] , tmp [ 1 ] ) ;
10119: LD_VAR 0 16
10123: PUSH
10124: LD_VAR 0 2
10128: ARRAY
10129: PPUSH
10130: LD_VAR 0 3
10134: PUSH
10135: LD_INT 1
10137: ARRAY
10138: PPUSH
10139: CALL_OW 130
10143: GO 10064
10145: POP
10146: POP
// end else
10147: GO 10366
// begin if legion_blist > 0 then
10149: LD_EXP 40
10153: PUSH
10154: LD_INT 0
10156: GREATER
10157: IFFALSE 10286
// begin for i = 1 to l_eng do
10159: LD_ADDR_VAR 0 2
10163: PUSH
10164: DOUBLE
10165: LD_INT 1
10167: DEC
10168: ST_TO_ADDR
10169: LD_VAR 0 16
10173: PUSH
10174: FOR_TO
10175: IFFALSE 10282
// if IsInUnit ( l_eng [ i ] ) then
10177: LD_VAR 0 16
10181: PUSH
10182: LD_VAR 0 2
10186: ARRAY
10187: PPUSH
10188: CALL_OW 310
10192: IFFALSE 10211
// ComExitBuilding ( l_eng [ i ] ) else
10194: LD_VAR 0 16
10198: PUSH
10199: LD_VAR 0 2
10203: ARRAY
10204: PPUSH
10205: CALL_OW 122
10209: GO 10280
// if not HasTask ( l_eng [ i ] ) then
10211: LD_VAR 0 16
10215: PUSH
10216: LD_VAR 0 2
10220: ARRAY
10221: PPUSH
10222: CALL_OW 314
10226: NOT
10227: IFFALSE 10280
// ComBuild ( l_eng [ i ] , legion_blist [ 1 ] , legion_blist [ 2 ] , legion_blist [ 3 ] , legion_blist [ 4 ] ) ;
10229: LD_VAR 0 16
10233: PUSH
10234: LD_VAR 0 2
10238: ARRAY
10239: PPUSH
10240: LD_EXP 40
10244: PUSH
10245: LD_INT 1
10247: ARRAY
10248: PPUSH
10249: LD_EXP 40
10253: PUSH
10254: LD_INT 2
10256: ARRAY
10257: PPUSH
10258: LD_EXP 40
10262: PUSH
10263: LD_INT 3
10265: ARRAY
10266: PPUSH
10267: LD_EXP 40
10271: PUSH
10272: LD_INT 4
10274: ARRAY
10275: PPUSH
10276: CALL_OW 145
10280: GO 10174
10282: POP
10283: POP
// end else
10284: GO 10366
// for i = 1 to l_eng do
10286: LD_ADDR_VAR 0 2
10290: PUSH
10291: DOUBLE
10292: LD_INT 1
10294: DEC
10295: ST_TO_ADDR
10296: LD_VAR 0 16
10300: PUSH
10301: FOR_TO
10302: IFFALSE 10364
// if not IsInUnit ( l_eng [ i ] ) and not HasTask ( l_eng [ i ] ) then
10304: LD_VAR 0 16
10308: PUSH
10309: LD_VAR 0 2
10313: ARRAY
10314: PPUSH
10315: CALL_OW 310
10319: NOT
10320: IFFALSE 10340
10322: PUSH
10323: LD_VAR 0 16
10327: PUSH
10328: LD_VAR 0 2
10332: ARRAY
10333: PPUSH
10334: CALL_OW 314
10338: NOT
10339: AND
10340: IFFALSE 10362
// ComEnterUnit ( l_eng [ i ] , l_depot ) ;
10342: LD_VAR 0 16
10346: PUSH
10347: LD_VAR 0 2
10351: ARRAY
10352: PPUSH
10353: LD_VAR 0 8
10357: PPUSH
10358: CALL_OW 120
10362: GO 10301
10364: POP
10365: POP
// end ; end ; if l_factory then
10366: LD_VAR 0 9
10370: IFFALSE 10776
// begin if FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) > 0 then
10372: LD_INT 22
10374: PUSH
10375: LD_INT 8
10377: PUSH
10378: EMPTY
10379: LIST
10380: LIST
10381: PUSH
10382: LD_INT 33
10384: PUSH
10385: LD_INT 2
10387: PUSH
10388: EMPTY
10389: LIST
10390: LIST
10391: PUSH
10392: LD_INT 3
10394: PUSH
10395: LD_INT 61
10397: PUSH
10398: EMPTY
10399: LIST
10400: PUSH
10401: EMPTY
10402: LIST
10403: LIST
10404: PUSH
10405: EMPTY
10406: LIST
10407: LIST
10408: LIST
10409: PPUSH
10410: CALL_OW 69
10414: PUSH
10415: LD_INT 0
10417: GREATER
10418: IFFALSE 10454
10420: PUSH
10421: LD_INT 22
10423: PUSH
10424: LD_INT 8
10426: PUSH
10427: EMPTY
10428: LIST
10429: LIST
10430: PUSH
10431: LD_INT 34
10433: PUSH
10434: LD_INT 31
10436: PUSH
10437: EMPTY
10438: LIST
10439: LIST
10440: PUSH
10441: EMPTY
10442: LIST
10443: LIST
10444: PPUSH
10445: CALL_OW 69
10449: PUSH
10450: LD_INT 0
10452: GREATER
10453: AND
10454: IFFALSE 10574
// ComLinkTo ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) [ 1 ] , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) [ Rand ( 1 , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) ) ] ) ;
10456: LD_INT 22
10458: PUSH
10459: LD_INT 8
10461: PUSH
10462: EMPTY
10463: LIST
10464: LIST
10465: PUSH
10466: LD_INT 33
10468: PUSH
10469: LD_INT 2
10471: PUSH
10472: EMPTY
10473: LIST
10474: LIST
10475: PUSH
10476: LD_INT 3
10478: PUSH
10479: LD_INT 61
10481: PUSH
10482: EMPTY
10483: LIST
10484: PUSH
10485: EMPTY
10486: LIST
10487: LIST
10488: PUSH
10489: EMPTY
10490: LIST
10491: LIST
10492: LIST
10493: PPUSH
10494: CALL_OW 69
10498: PUSH
10499: LD_INT 1
10501: ARRAY
10502: PPUSH
10503: LD_INT 22
10505: PUSH
10506: LD_INT 8
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: PUSH
10513: LD_INT 34
10515: PUSH
10516: LD_INT 31
10518: PUSH
10519: EMPTY
10520: LIST
10521: LIST
10522: PUSH
10523: EMPTY
10524: LIST
10525: LIST
10526: PPUSH
10527: CALL_OW 69
10531: PUSH
10532: LD_INT 1
10534: PPUSH
10535: LD_INT 22
10537: PUSH
10538: LD_INT 8
10540: PUSH
10541: EMPTY
10542: LIST
10543: LIST
10544: PUSH
10545: LD_INT 34
10547: PUSH
10548: LD_INT 31
10550: PUSH
10551: EMPTY
10552: LIST
10553: LIST
10554: PUSH
10555: EMPTY
10556: LIST
10557: LIST
10558: PPUSH
10559: CALL_OW 69
10563: PPUSH
10564: CALL_OW 12
10568: ARRAY
10569: PPUSH
10570: CALL_OW 135
// if legion_vlist > 0 and BuildingStatus ( l_factory ) = bs_idle then
10574: LD_EXP 41
10578: PUSH
10579: LD_INT 0
10581: GREATER
10582: IFFALSE 10599
10584: PUSH
10585: LD_VAR 0 9
10589: PPUSH
10590: CALL_OW 461
10594: PUSH
10595: LD_INT 2
10597: EQUAL
10598: AND
10599: IFFALSE 10684
// begin ComConstruct ( l_factory , legion_vlist [ 1 ] , legion_vlist [ 2 ] , legion_vlist [ 3 ] , legion_vlist [ 4 ] ) ;
10601: LD_VAR 0 9
10605: PPUSH
10606: LD_EXP 41
10610: PUSH
10611: LD_INT 1
10613: ARRAY
10614: PPUSH
10615: LD_EXP 41
10619: PUSH
10620: LD_INT 2
10622: ARRAY
10623: PPUSH
10624: LD_EXP 41
10628: PUSH
10629: LD_INT 3
10631: ARRAY
10632: PPUSH
10633: LD_EXP 41
10637: PUSH
10638: LD_INT 4
10640: ARRAY
10641: PPUSH
10642: CALL_OW 125
// for i = 1 to 4 do
10646: LD_ADDR_VAR 0 2
10650: PUSH
10651: DOUBLE
10652: LD_INT 1
10654: DEC
10655: ST_TO_ADDR
10656: LD_INT 4
10658: PUSH
10659: FOR_TO
10660: IFFALSE 10682
// legion_vlist := Delete ( legion_vlist , 1 ) ;
10662: LD_ADDR_EXP 41
10666: PUSH
10667: LD_EXP 41
10671: PPUSH
10672: LD_INT 1
10674: PPUSH
10675: CALL_OW 3
10679: ST_TO_ADDR
10680: GO 10659
10682: POP
10683: POP
// end ; if UnitFilter ( l_towers , [ f_bweapon , 0 ] ) > 0 and BuildingStatus ( l_factory ) = bs_idle then
10684: LD_VAR 0 11
10688: PPUSH
10689: LD_INT 35
10691: PUSH
10692: LD_INT 0
10694: PUSH
10695: EMPTY
10696: LIST
10697: LIST
10698: PPUSH
10699: CALL_OW 72
10703: PUSH
10704: LD_INT 0
10706: GREATER
10707: IFFALSE 10724
10709: PUSH
10710: LD_VAR 0 9
10714: PPUSH
10715: CALL_OW 461
10719: PUSH
10720: LD_INT 2
10722: EQUAL
10723: AND
10724: IFFALSE 10776
// ComPlaceWeapon ( UnitFilter ( l_towers , [ f_bweapon , 0 ] ) [ 1 ] , [ ar_rocket_launcher , ar_gun ] [ Rand ( 1 , 2 ) ] ) ;
10726: LD_VAR 0 11
10730: PPUSH
10731: LD_INT 35
10733: PUSH
10734: LD_INT 0
10736: PUSH
10737: EMPTY
10738: LIST
10739: LIST
10740: PPUSH
10741: CALL_OW 72
10745: PUSH
10746: LD_INT 1
10748: ARRAY
10749: PPUSH
10750: LD_INT 28
10752: PUSH
10753: LD_INT 27
10755: PUSH
10756: EMPTY
10757: LIST
10758: LIST
10759: PUSH
10760: LD_INT 1
10762: PPUSH
10763: LD_INT 2
10765: PPUSH
10766: CALL_OW 12
10770: ARRAY
10771: PPUSH
10772: CALL_OW 148
// end ; if legion_enemy > 0 then
10776: LD_EXP 42
10780: PUSH
10781: LD_INT 0
10783: GREATER
10784: IFFALSE 11067
// begin if tick mod 11 11$00 = 0 then
10786: LD_OWVAR 1
10790: PUSH
10791: LD_INT 23100
10793: MOD
10794: PUSH
10795: LD_INT 0
10797: EQUAL
10798: IFFALSE 11048
// begin legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
10800: LD_ADDR_EXP 41
10804: PUSH
10805: LD_EXP 41
10809: PUSH
10810: LD_INT 13
10812: PUSH
10813: LD_INT 1
10815: PUSH
10816: LD_INT 2
10818: PUSH
10819: EMPTY
10820: LIST
10821: LIST
10822: LIST
10823: ADD
10824: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
10825: LD_ADDR_EXP 41
10829: PUSH
10830: LD_EXP 41
10834: PUSH
10835: LD_INT 28
10837: PUSH
10838: LD_INT 27
10840: PUSH
10841: LD_INT 29
10843: PUSH
10844: EMPTY
10845: LIST
10846: LIST
10847: LIST
10848: PUSH
10849: LD_INT 1
10851: PPUSH
10852: LD_INT 3
10854: PPUSH
10855: CALL_OW 12
10859: ARRAY
10860: ADD
10861: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
10862: LD_ADDR_EXP 41
10866: PUSH
10867: LD_EXP 41
10871: PUSH
10872: LD_INT 13
10874: PUSH
10875: LD_INT 1
10877: PUSH
10878: LD_INT 2
10880: PUSH
10881: EMPTY
10882: LIST
10883: LIST
10884: LIST
10885: ADD
10886: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
10887: LD_ADDR_EXP 41
10891: PUSH
10892: LD_EXP 41
10896: PUSH
10897: LD_INT 28
10899: PUSH
10900: LD_INT 27
10902: PUSH
10903: LD_INT 29
10905: PUSH
10906: EMPTY
10907: LIST
10908: LIST
10909: LIST
10910: PUSH
10911: LD_INT 1
10913: PPUSH
10914: LD_INT 3
10916: PPUSH
10917: CALL_OW 12
10921: ARRAY
10922: ADD
10923: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
10924: LD_ADDR_EXP 41
10928: PUSH
10929: LD_EXP 41
10933: PUSH
10934: LD_INT 13
10936: PUSH
10937: LD_INT 1
10939: PUSH
10940: LD_INT 2
10942: PUSH
10943: EMPTY
10944: LIST
10945: LIST
10946: LIST
10947: ADD
10948: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_mortar , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
10949: LD_ADDR_EXP 41
10953: PUSH
10954: LD_EXP 41
10958: PUSH
10959: LD_INT 28
10961: PUSH
10962: LD_INT 92
10964: PUSH
10965: LD_INT 29
10967: PUSH
10968: EMPTY
10969: LIST
10970: LIST
10971: LIST
10972: PUSH
10973: LD_INT 1
10975: PPUSH
10976: LD_INT 3
10978: PPUSH
10979: CALL_OW 12
10983: ARRAY
10984: ADD
10985: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
10986: LD_ADDR_EXP 41
10990: PUSH
10991: LD_EXP 41
10995: PUSH
10996: LD_INT 13
10998: PUSH
10999: LD_INT 1
11001: PUSH
11002: LD_INT 2
11004: PUSH
11005: EMPTY
11006: LIST
11007: LIST
11008: LIST
11009: ADD
11010: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
11011: LD_ADDR_EXP 41
11015: PUSH
11016: LD_EXP 41
11020: PUSH
11021: LD_INT 28
11023: PUSH
11024: LD_INT 27
11026: PUSH
11027: LD_INT 29
11029: PUSH
11030: EMPTY
11031: LIST
11032: LIST
11033: LIST
11034: PUSH
11035: LD_INT 1
11037: PPUSH
11038: LD_INT 3
11040: PPUSH
11041: CALL_OW 12
11045: ARRAY
11046: ADD
11047: ST_TO_ADDR
// end ; if legion_force >= 8 then
11048: LD_EXP 37
11052: PUSH
11053: LD_INT 8
11055: GREATEREQUAL
11056: IFFALSE 11067
// RaiseSailEvent ( event_legion_attack ) ;
11058: LD_EXP 21
11062: PPUSH
11063: CALL_OW 427
// end ; if FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_cargo_bay ] ] ) then
11067: LD_INT 22
11069: PUSH
11070: LD_INT 8
11072: PUSH
11073: EMPTY
11074: LIST
11075: LIST
11076: PUSH
11077: LD_INT 34
11079: PUSH
11080: LD_INT 32
11082: PUSH
11083: EMPTY
11084: LIST
11085: LIST
11086: PUSH
11087: EMPTY
11088: LIST
11089: LIST
11090: PPUSH
11091: CALL_OW 69
11095: IFFALSE 11209
// begin if l_cargo = false then
11097: LD_VAR 0 17
11101: PUSH
11102: LD_INT 0
11104: EQUAL
11105: IFFALSE 11141
// l_cargo := FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_cargo_bay ] ] ) ;
11107: LD_ADDR_VAR 0 17
11111: PUSH
11112: LD_INT 22
11114: PUSH
11115: LD_INT 8
11117: PUSH
11118: EMPTY
11119: LIST
11120: LIST
11121: PUSH
11122: LD_INT 34
11124: PUSH
11125: LD_INT 32
11127: PUSH
11128: EMPTY
11129: LIST
11130: LIST
11131: PUSH
11132: EMPTY
11133: LIST
11134: LIST
11135: PPUSH
11136: CALL_OW 69
11140: ST_TO_ADDR
// if l_cargo then
11141: LD_VAR 0 17
11145: IFFALSE 11209
// begin cr := GetListOfCratesInArea ( legion_crates ) ;
11147: LD_ADDR_VAR 0 7
11151: PUSH
11152: LD_INT 14
11154: PPUSH
11155: CALL_OW 435
11159: ST_TO_ADDR
// if cr > 0 then
11160: LD_VAR 0 7
11164: PUSH
11165: LD_INT 0
11167: GREATER
11168: IFFALSE 11209
// if not HasTask ( l_cargo ) then
11170: LD_VAR 0 17
11174: PPUSH
11175: CALL_OW 314
11179: NOT
11180: IFFALSE 11209
// ComCollect ( l_cargo , cr [ 1 ] , cr [ 2 ] ) ;
11182: LD_VAR 0 17
11186: PPUSH
11187: LD_VAR 0 7
11191: PUSH
11192: LD_INT 1
11194: ARRAY
11195: PPUSH
11196: LD_VAR 0 7
11200: PUSH
11201: LD_INT 2
11203: ARRAY
11204: PPUSH
11205: CALL_OW 117
// end ; end ; end ;
11209: PPOPN 17
11211: END
// every 9 9$00 trigger difficulty > 1 do var i , sci , sib , p ;
11212: LD_OWVAR 67
11216: PUSH
11217: LD_INT 1
11219: GREATER
11220: IFFALSE 11425
11222: GO 11224
11224: DISABLE
11225: LD_INT 0
11227: PPUSH
11228: PPUSH
11229: PPUSH
11230: PPUSH
// begin Wait ( Rand ( 0 0$01 , 6 6$01 ) ) ;
11231: LD_INT 35
11233: PPUSH
11234: LD_INT 12635
11236: PPUSH
11237: CALL_OW 12
11241: PPUSH
11242: CALL_OW 67
// sci := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 4 ] ] ) ;
11246: LD_ADDR_VAR 0 2
11250: PUSH
11251: LD_INT 22
11253: PUSH
11254: LD_INT 8
11256: PUSH
11257: EMPTY
11258: LIST
11259: LIST
11260: PUSH
11261: LD_INT 25
11263: PUSH
11264: LD_INT 4
11266: PUSH
11267: EMPTY
11268: LIST
11269: LIST
11270: PUSH
11271: EMPTY
11272: LIST
11273: LIST
11274: PPUSH
11275: CALL_OW 69
11279: ST_TO_ADDR
// p := 1 ;
11280: LD_ADDR_VAR 0 4
11284: PUSH
11285: LD_INT 1
11287: ST_TO_ADDR
// sib := [ 116 , 139 , 69 , 13 ] ;
11288: LD_ADDR_VAR 0 3
11292: PUSH
11293: LD_INT 116
11295: PUSH
11296: LD_INT 139
11298: PUSH
11299: LD_INT 69
11301: PUSH
11302: LD_INT 13
11304: PUSH
11305: EMPTY
11306: LIST
11307: LIST
11308: LIST
11309: LIST
11310: ST_TO_ADDR
// for i = 1 to 2 do
11311: LD_ADDR_VAR 0 1
11315: PUSH
11316: DOUBLE
11317: LD_INT 1
11319: DEC
11320: ST_TO_ADDR
11321: LD_INT 2
11323: PUSH
11324: FOR_TO
11325: IFFALSE 11423
// begin if IsInUnit ( sci [ i ] ) then
11327: LD_VAR 0 2
11331: PUSH
11332: LD_VAR 0 1
11336: ARRAY
11337: PPUSH
11338: CALL_OW 310
11342: IFFALSE 11359
// ComExitBuilding ( sci [ i ] ) ;
11344: LD_VAR 0 2
11348: PUSH
11349: LD_VAR 0 1
11353: ARRAY
11354: PPUSH
11355: CALL_OW 122
// Wait ( 0 0$03 ) ;
11359: LD_INT 105
11361: PPUSH
11362: CALL_OW 67
// ComContaminate ( sci [ i ] , sib [ p ] , sib [ p + 1 ] ) ;
11366: LD_VAR 0 2
11370: PUSH
11371: LD_VAR 0 1
11375: ARRAY
11376: PPUSH
11377: LD_VAR 0 3
11381: PUSH
11382: LD_VAR 0 4
11386: ARRAY
11387: PPUSH
11388: LD_VAR 0 3
11392: PUSH
11393: LD_VAR 0 4
11397: PUSH
11398: LD_INT 1
11400: PLUS
11401: ARRAY
11402: PPUSH
11403: CALL_OW 158
// p := p + 2 ;
11407: LD_ADDR_VAR 0 4
11411: PUSH
11412: LD_VAR 0 4
11416: PUSH
11417: LD_INT 2
11419: PLUS
11420: ST_TO_ADDR
// end ;
11421: GO 11324
11423: POP
11424: POP
// end ;
11425: PPOPN 4
11427: END
// every 3 3$30 trigger GetListOfCratesInArea ( legion_crates ) < 20 do
11428: LD_INT 14
11430: PPUSH
11431: CALL_OW 435
11435: PUSH
11436: LD_INT 20
11438: LESS
11439: IFFALSE 11466
11441: GO 11443
11443: DISABLE
// begin enable ;
11444: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , legion_crates , true ) ;
11445: LD_INT 1
11447: PPUSH
11448: LD_INT 5
11450: PPUSH
11451: CALL_OW 12
11455: PPUSH
11456: LD_INT 14
11458: PPUSH
11459: LD_INT 1
11461: PPUSH
11462: CALL_OW 55
// end ;
11466: END
// export function LegionAttack ( ) ; var path , units ; begin
11467: LD_INT 0
11469: PPUSH
11470: PPUSH
11471: PPUSH
// units := legion_force ;
11472: LD_ADDR_VAR 0 3
11476: PUSH
11477: LD_EXP 37
11481: ST_TO_ADDR
// legion_force := [ ] ;
11482: LD_ADDR_EXP 37
11486: PUSH
11487: EMPTY
11488: ST_TO_ADDR
// case legion_enemy of 1 :
11489: LD_EXP 42
11493: PUSH
11494: LD_INT 1
11496: DOUBLE
11497: EQUAL
11498: IFTRUE 11502
11500: GO 11545
11502: POP
// path := [ [ 174 , 135 ] , [ 153 , 146 ] , [ 118 , 122 ] ] ; 2 :
11503: LD_ADDR_VAR 0 2
11507: PUSH
11508: LD_INT 174
11510: PUSH
11511: LD_INT 135
11513: PUSH
11514: EMPTY
11515: LIST
11516: LIST
11517: PUSH
11518: LD_INT 153
11520: PUSH
11521: LD_INT 146
11523: PUSH
11524: EMPTY
11525: LIST
11526: LIST
11527: PUSH
11528: LD_INT 118
11530: PUSH
11531: LD_INT 122
11533: PUSH
11534: EMPTY
11535: LIST
11536: LIST
11537: PUSH
11538: EMPTY
11539: LIST
11540: LIST
11541: LIST
11542: ST_TO_ADDR
11543: GO 11659
11545: LD_INT 2
11547: DOUBLE
11548: EQUAL
11549: IFTRUE 11553
11551: GO 11596
11553: POP
// path := [ [ 164 , 73 ] , [ 130 , 48 ] , [ 96 , 48 ] ] ; 7 :
11554: LD_ADDR_VAR 0 2
11558: PUSH
11559: LD_INT 164
11561: PUSH
11562: LD_INT 73
11564: PUSH
11565: EMPTY
11566: LIST
11567: LIST
11568: PUSH
11569: LD_INT 130
11571: PUSH
11572: LD_INT 48
11574: PUSH
11575: EMPTY
11576: LIST
11577: LIST
11578: PUSH
11579: LD_INT 96
11581: PUSH
11582: LD_INT 48
11584: PUSH
11585: EMPTY
11586: LIST
11587: LIST
11588: PUSH
11589: EMPTY
11590: LIST
11591: LIST
11592: LIST
11593: ST_TO_ADDR
11594: GO 11659
11596: LD_INT 7
11598: DOUBLE
11599: EQUAL
11600: IFTRUE 11604
11602: GO 11658
11604: POP
// path := [ [ 174 , 135 ] , [ 153 , 146 ] , [ 118 , 122 ] , [ 107 , 126 ] ] ; end ;
11605: LD_ADDR_VAR 0 2
11609: PUSH
11610: LD_INT 174
11612: PUSH
11613: LD_INT 135
11615: PUSH
11616: EMPTY
11617: LIST
11618: LIST
11619: PUSH
11620: LD_INT 153
11622: PUSH
11623: LD_INT 146
11625: PUSH
11626: EMPTY
11627: LIST
11628: LIST
11629: PUSH
11630: LD_INT 118
11632: PUSH
11633: LD_INT 122
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: PUSH
11640: LD_INT 107
11642: PUSH
11643: LD_INT 126
11645: PUSH
11646: EMPTY
11647: LIST
11648: LIST
11649: PUSH
11650: EMPTY
11651: LIST
11652: LIST
11653: LIST
11654: LIST
11655: ST_TO_ADDR
11656: GO 11659
11658: POP
// repeat wait ( 0 0$1 ) ;
11659: LD_INT 35
11661: PPUSH
11662: CALL_OW 67
// until not AgressiveMove ( units , path ) ;
11666: LD_VAR 0 3
11670: PPUSH
11671: LD_VAR 0 2
11675: PPUSH
11676: CALL 82232 0 2
11680: NOT
11681: IFFALSE 11659
// end ; end_of_file
11683: LD_VAR 0 1
11687: RET
// export function Action ; var un , gamemode , speaker ; begin
11688: LD_INT 0
11690: PPUSH
11691: PPUSH
11692: PPUSH
11693: PPUSH
// if debug then
11694: LD_EXP 15
11698: IFFALSE 11725
// begin Difficulty := 2 ;
11700: LD_ADDR_OWVAR 67
11704: PUSH
11705: LD_INT 2
11707: ST_TO_ADDR
// gamemode := 3 ;
11708: LD_ADDR_VAR 0 3
11712: PUSH
11713: LD_INT 3
11715: ST_TO_ADDR
// FogOff ( 7 ) ;
11716: LD_INT 7
11718: PPUSH
11719: CALL_OW 344
// end else
11723: GO 11751
// begin Difficulty := GetMultiplayerSetting ( 0 ) ;
11725: LD_ADDR_OWVAR 67
11729: PUSH
11730: LD_INT 0
11732: PPUSH
11733: CALL_OW 426
11737: ST_TO_ADDR
// gamemode := GetMultiplayerSetting ( 1 ) ;
11738: LD_ADDR_VAR 0 3
11742: PUSH
11743: LD_INT 1
11745: PPUSH
11746: CALL_OW 426
11750: ST_TO_ADDR
// end ; if gamemode = 1 then
11751: LD_VAR 0 3
11755: PUSH
11756: LD_INT 1
11758: EQUAL
11759: IFFALSE 11783
// begin your_side := 1 ;
11761: LD_ADDR_OWVAR 2
11765: PUSH
11766: LD_INT 1
11768: ST_TO_ADDR
// legion_enemy := 1 ;
11769: LD_ADDR_EXP 42
11773: PUSH
11774: LD_INT 1
11776: ST_TO_ADDR
// PrepareAmerican ;
11777: CALL 261 0 0
// end else
11781: GO 11835
// if gamemode = 2 then
11783: LD_VAR 0 3
11787: PUSH
11788: LD_INT 2
11790: EQUAL
11791: IFFALSE 11815
// begin your_side := 2 ;
11793: LD_ADDR_OWVAR 2
11797: PUSH
11798: LD_INT 2
11800: ST_TO_ADDR
// legion_enemy := 2 ;
11801: LD_ADDR_EXP 42
11805: PUSH
11806: LD_INT 2
11808: ST_TO_ADDR
// PrepareArabian ;
11809: CALL 19134 0 0
// end else
11813: GO 11835
// begin your_side := 7 ;
11815: LD_ADDR_OWVAR 2
11819: PUSH
11820: LD_INT 7
11822: ST_TO_ADDR
// legion_enemy := 7 ;
11823: LD_ADDR_EXP 42
11827: PUSH
11828: LD_INT 7
11830: ST_TO_ADDR
// PrepareAlliance ;
11831: CALL 16274 0 0
// end ; if your_side = 1 then
11835: LD_OWVAR 2
11839: PUSH
11840: LD_INT 1
11842: EQUAL
11843: IFFALSE 12431
// begin Query ( QVul4 ) ;
11845: LD_STRING QVul4
11847: PPUSH
11848: CALL_OW 97
// InGameOn ;
11852: CALL_OW 8
// PlaceSeeing ( 8 , 5 , 1 , 12 ) ;
11856: LD_INT 8
11858: PPUSH
11859: LD_INT 5
11861: PPUSH
11862: LD_INT 1
11864: PPUSH
11865: LD_INT 12
11867: PPUSH
11868: CALL_OW 330
// RemoveSeeing ( 8 , 5 , 1 ) ;
11872: LD_INT 8
11874: PPUSH
11875: LD_INT 5
11877: PPUSH
11878: LD_INT 1
11880: PPUSH
11881: CALL_OW 331
// PlaceSeeing ( 98 , 148 , 1 , 2 ) ;
11885: LD_INT 98
11887: PPUSH
11888: LD_INT 148
11890: PPUSH
11891: LD_INT 1
11893: PPUSH
11894: LD_INT 2
11896: PPUSH
11897: CALL_OW 330
// RemoveSeeing ( 98 , 148 , 1 ) ;
11901: LD_INT 98
11903: PPUSH
11904: LD_INT 148
11906: PPUSH
11907: LD_INT 1
11909: PPUSH
11910: CALL_OW 331
// CenterNowOnXY ( 8 , 5 ) ;
11914: LD_INT 8
11916: PPUSH
11917: LD_INT 5
11919: PPUSH
11920: CALL_OW 86
// uc_side := 4 ;
11924: LD_ADDR_OWVAR 20
11928: PUSH
11929: LD_INT 4
11931: ST_TO_ADDR
// uc_nation := 1 ;
11932: LD_ADDR_OWVAR 21
11936: PUSH
11937: LD_INT 1
11939: ST_TO_ADDR
// hc_importance := 0 ;
11940: LD_ADDR_OWVAR 32
11944: PUSH
11945: LD_INT 0
11947: ST_TO_ADDR
// hc_name :=  ;
11948: LD_ADDR_OWVAR 26
11952: PUSH
11953: LD_STRING 
11955: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , us_skill ) ;
11956: LD_INT 1
11958: PPUSH
11959: LD_INT 3
11961: PPUSH
11962: LD_EXP 26
11966: PPUSH
11967: CALL_OW 380
// un := CreateHuman ;
11971: LD_ADDR_VAR 0 2
11975: PUSH
11976: CALL_OW 44
11980: ST_TO_ADDR
// PlaceUnitXY ( un , 19 , 23 , false ) ;
11981: LD_VAR 0 2
11985: PPUSH
11986: LD_INT 19
11988: PPUSH
11989: LD_INT 23
11991: PPUSH
11992: LD_INT 0
11994: PPUSH
11995: CALL_OW 48
// hc_name := Stuart Carey ;
11999: LD_ADDR_OWVAR 26
12003: PUSH
12004: LD_STRING Stuart Carey
12006: ST_TO_ADDR
// hc_class := 1 ;
12007: LD_ADDR_OWVAR 28
12011: PUSH
12012: LD_INT 1
12014: ST_TO_ADDR
// hc_gallery := vulcano ;
12015: LD_ADDR_OWVAR 33
12019: PUSH
12020: LD_STRING vulcano
12022: ST_TO_ADDR
// hc_face_number := 1 ;
12023: LD_ADDR_OWVAR 34
12027: PUSH
12028: LD_INT 1
12030: ST_TO_ADDR
// us_guy := CreateHuman ;
12031: LD_ADDR_EXP 27
12035: PUSH
12036: CALL_OW 44
12040: ST_TO_ADDR
// InitHc ;
12041: CALL_OW 19
// if rand ( 0 , 1 ) then
12045: LD_INT 0
12047: PPUSH
12048: LD_INT 1
12050: PPUSH
12051: CALL_OW 12
12055: IFFALSE 12072
// PrepareHuman ( sex_male , 3 , 6 ) else
12057: LD_INT 1
12059: PPUSH
12060: LD_INT 3
12062: PPUSH
12063: LD_INT 6
12065: PPUSH
12066: CALL_OW 380
12070: GO 12085
// PrepareHuman ( sex_female , 4 , 8 ) ;
12072: LD_INT 2
12074: PPUSH
12075: LD_INT 4
12077: PPUSH
12078: LD_INT 8
12080: PPUSH
12081: CALL_OW 380
// ComMoveXY ( un , 12 , 10 ) ;
12085: LD_VAR 0 2
12089: PPUSH
12090: LD_INT 12
12092: PPUSH
12093: LD_INT 10
12095: PPUSH
12096: CALL_OW 111
// ComTurnUnit ( us_commander , un ) ;
12100: LD_EXP 24
12104: PPUSH
12105: LD_VAR 0 2
12109: PPUSH
12110: CALL_OW 119
// repeat wait ( 0 0$3 ) ;
12114: LD_INT 105
12116: PPUSH
12117: CALL_OW 67
// until See ( 4 , us_commander ) or IsAt ( un , 12 , 10 ) ;
12121: LD_INT 4
12123: PPUSH
12124: LD_EXP 24
12128: PPUSH
12129: CALL_OW 292
12133: IFTRUE 12152
12135: PUSH
12136: LD_VAR 0 2
12140: PPUSH
12141: LD_INT 12
12143: PPUSH
12144: LD_INT 10
12146: PPUSH
12147: CALL_OW 307
12151: OR
12152: IFFALSE 12114
// ComTurnUnit ( un , us_commander ) ;
12154: LD_VAR 0 2
12158: PPUSH
12159: LD_EXP 24
12163: PPUSH
12164: CALL_OW 119
// if GetSex ( un ) = sex_male then
12168: LD_VAR 0 2
12172: PPUSH
12173: CALL_OW 258
12177: PUSH
12178: LD_INT 1
12180: EQUAL
12181: IFFALSE 12264
// begin Say ( un , VD-un1 ) ;
12183: LD_VAR 0 2
12187: PPUSH
12188: LD_STRING VD-un1
12190: PPUSH
12191: CALL_OW 88
// Say ( us_commander , VDc-1 ) ;
12195: LD_EXP 24
12199: PPUSH
12200: LD_STRING VDc-1
12202: PPUSH
12203: CALL_OW 88
// Say ( un , VD-un2 ) ;
12207: LD_VAR 0 2
12211: PPUSH
12212: LD_STRING VD-un2
12214: PPUSH
12215: CALL_OW 88
// Say ( us_commander , VDc-2 ) ;
12219: LD_EXP 24
12223: PPUSH
12224: LD_STRING VDc-2
12226: PPUSH
12227: CALL_OW 88
// Say ( un , VD-un3 ) ;
12231: LD_VAR 0 2
12235: PPUSH
12236: LD_STRING VD-un3
12238: PPUSH
12239: CALL_OW 88
// wait ( 0 0$0.2 ) ;
12243: LD_INT 7
12245: PPUSH
12246: CALL_OW 67
// Say ( un , VD-un4 ) ;
12250: LD_VAR 0 2
12254: PPUSH
12255: LD_STRING VD-un4
12257: PPUSH
12258: CALL_OW 88
// end else
12262: GO 12343
// begin Say ( un , VD-unf1 ) ;
12264: LD_VAR 0 2
12268: PPUSH
12269: LD_STRING VD-unf1
12271: PPUSH
12272: CALL_OW 88
// Say ( us_commander , VDc-1 ) ;
12276: LD_EXP 24
12280: PPUSH
12281: LD_STRING VDc-1
12283: PPUSH
12284: CALL_OW 88
// Say ( un , VD-unf2 ) ;
12288: LD_VAR 0 2
12292: PPUSH
12293: LD_STRING VD-unf2
12295: PPUSH
12296: CALL_OW 88
// Say ( us_commander , VDc-2 ) ;
12300: LD_EXP 24
12304: PPUSH
12305: LD_STRING VDc-2
12307: PPUSH
12308: CALL_OW 88
// Say ( un , VD-unf3 ) ;
12312: LD_VAR 0 2
12316: PPUSH
12317: LD_STRING VD-unf3
12319: PPUSH
12320: CALL_OW 88
// wait ( 0 0$0.2 ) ;
12324: LD_INT 7
12326: PPUSH
12327: CALL_OW 67
// Say ( un , VD-unf4 ) ;
12331: LD_VAR 0 2
12335: PPUSH
12336: LD_STRING VD-unf4
12338: PPUSH
12339: CALL_OW 88
// end ; ComMoveXY ( un , 2 , 2 ) ;
12343: LD_VAR 0 2
12347: PPUSH
12348: LD_INT 2
12350: PPUSH
12351: LD_INT 2
12353: PPUSH
12354: CALL_OW 111
// Say ( us_commander , VDc-3 ) ;
12358: LD_EXP 24
12362: PPUSH
12363: LD_STRING VDc-3
12365: PPUSH
12366: CALL_OW 88
// InGameOff ;
12370: CALL_OW 9
// ChangeMissionObjectives ( CVulc1 ) ;
12374: LD_STRING CVulc1
12376: PPUSH
12377: CALL_OW 337
// repeat Wait ( 0 0$01 ) ;
12381: LD_INT 35
12383: PPUSH
12384: CALL_OW 67
// until GetX ( un ) = 2 and GetY ( un ) = 2 ;
12388: LD_VAR 0 2
12392: PPUSH
12393: CALL_OW 250
12397: PUSH
12398: LD_INT 2
12400: EQUAL
12401: IFFALSE 12418
12403: PUSH
12404: LD_VAR 0 2
12408: PPUSH
12409: CALL_OW 251
12413: PUSH
12414: LD_INT 2
12416: EQUAL
12417: AND
12418: IFFALSE 12381
// RemoveUnit ( un ) ;
12420: LD_VAR 0 2
12424: PPUSH
12425: CALL_OW 64
// end else
12429: GO 12808
// if your_side = 2 then
12431: LD_OWVAR 2
12435: PUSH
12436: LD_INT 2
12438: EQUAL
12439: IFFALSE 12655
// begin CenterNowOnUnits ( player_commander ) ;
12441: LD_EXP 11
12445: PPUSH
12446: CALL_OW 87
// speaker := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff ar_commander ;
12450: LD_ADDR_VAR 0 4
12454: PUSH
12455: LD_INT 22
12457: PUSH
12458: LD_INT 2
12460: PUSH
12461: EMPTY
12462: LIST
12463: LIST
12464: PUSH
12465: LD_INT 21
12467: PUSH
12468: LD_INT 1
12470: PUSH
12471: EMPTY
12472: LIST
12473: LIST
12474: PUSH
12475: EMPTY
12476: LIST
12477: LIST
12478: PPUSH
12479: CALL_OW 69
12483: PUSH
12484: LD_EXP 57
12488: DIFF
12489: ST_TO_ADDR
// if speaker then
12490: LD_VAR 0 4
12494: IFFALSE 12646
// begin InGameOn ;
12496: CALL_OW 8
// Say ( ar_commander , VSd-1 ) ;
12500: LD_EXP 57
12504: PPUSH
12505: LD_STRING VSd-1
12507: PPUSH
12508: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
12512: LD_VAR 0 4
12516: PUSH
12517: LD_INT 1
12519: ARRAY
12520: PPUSH
12521: CALL_OW 258
12525: PUSH
12526: LD_INT 1
12528: EQUAL
12529: IFFALSE 12549
// Say ( speaker [ 1 ] , VAd-1 ) else
12531: LD_VAR 0 4
12535: PUSH
12536: LD_INT 1
12538: ARRAY
12539: PPUSH
12540: LD_STRING VAd-1
12542: PPUSH
12543: CALL_OW 88
12547: GO 12565
// Say ( speaker [ 1 ] , VAfd-1 ) ;
12549: LD_VAR 0 4
12553: PUSH
12554: LD_INT 1
12556: ARRAY
12557: PPUSH
12558: LD_STRING VAfd-1
12560: PPUSH
12561: CALL_OW 88
// Say ( ar_commander , VSd-2 ) ;
12565: LD_EXP 57
12569: PPUSH
12570: LD_STRING VSd-2
12572: PPUSH
12573: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
12577: LD_VAR 0 4
12581: PUSH
12582: LD_INT 1
12584: ARRAY
12585: PPUSH
12586: CALL_OW 258
12590: PUSH
12591: LD_INT 1
12593: EQUAL
12594: IFFALSE 12614
// Say ( speaker [ 1 ] , VAd-2 ) else
12596: LD_VAR 0 4
12600: PUSH
12601: LD_INT 1
12603: ARRAY
12604: PPUSH
12605: LD_STRING VAd-2
12607: PPUSH
12608: CALL_OW 88
12612: GO 12630
// Say ( speaker [ 1 ] , VAfd-2 ) ;
12614: LD_VAR 0 4
12618: PUSH
12619: LD_INT 1
12621: ARRAY
12622: PPUSH
12623: LD_STRING VAfd-2
12625: PPUSH
12626: CALL_OW 88
// Say ( ar_commander , VSd-3 ) ;
12630: LD_EXP 57
12634: PPUSH
12635: LD_STRING VSd-3
12637: PPUSH
12638: CALL_OW 88
// InGameOff ;
12642: CALL_OW 9
// end ; ChangeMissionObjectives ( CVulc5 ) ;
12646: LD_STRING CVulc5
12648: PPUSH
12649: CALL_OW 337
// end else
12653: GO 12808
// if your_side = 7 then
12655: LD_OWVAR 2
12659: PUSH
12660: LD_INT 7
12662: EQUAL
12663: IFFALSE 12808
// begin speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) diff al_commander ;
12665: LD_ADDR_VAR 0 4
12669: PUSH
12670: LD_INT 22
12672: PUSH
12673: LD_INT 7
12675: PUSH
12676: EMPTY
12677: LIST
12678: LIST
12679: PUSH
12680: LD_INT 21
12682: PUSH
12683: LD_INT 1
12685: PUSH
12686: EMPTY
12687: LIST
12688: LIST
12689: PUSH
12690: EMPTY
12691: LIST
12692: LIST
12693: PPUSH
12694: CALL_OW 69
12698: PUSH
12699: LD_EXP 43
12703: DIFF
12704: ST_TO_ADDR
// if speaker then
12705: LD_VAR 0 4
12709: IFFALSE 12801
// begin CenterNowOnUnits ( al_commander ) ;
12711: LD_EXP 43
12715: PPUSH
12716: CALL_OW 87
// InGameOn ;
12720: CALL_OW 8
// Say ( al_commander , VPd-1 ) ;
12724: LD_EXP 43
12728: PPUSH
12729: LD_STRING VPd-1
12731: PPUSH
12732: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) then
12736: LD_VAR 0 4
12740: PUSH
12741: LD_INT 1
12743: ARRAY
12744: PPUSH
12745: CALL_OW 258
12749: IFFALSE 12769
// Say ( speaker [ 1 ] , VPpd-1 ) else
12751: LD_VAR 0 4
12755: PUSH
12756: LD_INT 1
12758: ARRAY
12759: PPUSH
12760: LD_STRING VPpd-1
12762: PPUSH
12763: CALL_OW 88
12767: GO 12785
// Say ( speaker [ 1 ] , VPpdf-1 ) ;
12769: LD_VAR 0 4
12773: PUSH
12774: LD_INT 1
12776: ARRAY
12777: PPUSH
12778: LD_STRING VPpdf-1
12780: PPUSH
12781: CALL_OW 88
// Say ( al_commander , VPd-2 ) ;
12785: LD_EXP 43
12789: PPUSH
12790: LD_STRING VPd-2
12792: PPUSH
12793: CALL_OW 88
// InGameOff ;
12797: CALL_OW 9
// end ; ChangeMissionObjectives ( CVulc7 ) ;
12801: LD_STRING CVulc7
12803: PPUSH
12804: CALL_OW 337
// end ; SaveForQuickRestart ;
12808: CALL_OW 22
// end ;
12812: LD_VAR 0 1
12816: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) do
12817: LD_INT 22
12819: PUSH
12820: LD_INT 2
12822: PUSH
12823: EMPTY
12824: LIST
12825: LIST
12826: PUSH
12827: LD_INT 30
12829: PUSH
12830: LD_INT 3
12832: PUSH
12833: EMPTY
12834: LIST
12835: LIST
12836: PUSH
12837: EMPTY
12838: LIST
12839: LIST
12840: PPUSH
12841: CALL_OW 69
12845: IFFALSE 12889
12847: GO 12849
12849: DISABLE
// begin ChangeMissionObjectives ( CVulc6 ) ;
12850: LD_STRING CVulc6
12852: PPUSH
12853: CALL_OW 337
// Wait ( [ 25 25$00 , 22 22$30 , 20 20$00 ] [ Difficulty ] ) ;
12857: LD_INT 52500
12859: PUSH
12860: LD_INT 47250
12862: PUSH
12863: LD_INT 42000
12865: PUSH
12866: EMPTY
12867: LIST
12868: LIST
12869: LIST
12870: PUSH
12871: LD_OWVAR 67
12875: ARRAY
12876: PPUSH
12877: CALL_OW 67
// ru_can_attack := true ;
12881: LD_ADDR_EXP 3
12885: PUSH
12886: LD_INT 1
12888: ST_TO_ADDR
// end ;
12889: END
// every 0 0$01 trigger GetSide ( us_depot ) = 1 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_warehouse ] ] ] ) do var speaker ;
12890: LD_INT 50
12892: PPUSH
12893: CALL_OW 255
12897: PUSH
12898: LD_INT 1
12900: EQUAL
12901: IFTRUE 12951
12903: PUSH
12904: LD_INT 22
12906: PUSH
12907: LD_INT 1
12909: PUSH
12910: EMPTY
12911: LIST
12912: LIST
12913: PUSH
12914: LD_INT 2
12916: PUSH
12917: LD_INT 30
12919: PUSH
12920: LD_INT 3
12922: PUSH
12923: EMPTY
12924: LIST
12925: LIST
12926: PUSH
12927: LD_INT 30
12929: PUSH
12930: LD_INT 1
12932: PUSH
12933: EMPTY
12934: LIST
12935: LIST
12936: PUSH
12937: EMPTY
12938: LIST
12939: LIST
12940: LIST
12941: PUSH
12942: EMPTY
12943: LIST
12944: LIST
12945: PPUSH
12946: CALL_OW 69
12950: OR
12951: IFFALSE 13185
12953: GO 12955
12955: DISABLE
12956: LD_INT 0
12958: PPUSH
// begin ChangeMissionObjectives ( CVulc2 ) ;
12959: LD_STRING CVulc2
12961: PPUSH
12962: CALL_OW 337
// speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) diff us_commander ;
12966: LD_ADDR_VAR 0 1
12970: PUSH
12971: LD_INT 22
12973: PUSH
12974: LD_INT 1
12976: PUSH
12977: EMPTY
12978: LIST
12979: LIST
12980: PUSH
12981: LD_INT 25
12983: PUSH
12984: LD_INT 2
12986: PUSH
12987: EMPTY
12988: LIST
12989: LIST
12990: PUSH
12991: EMPTY
12992: LIST
12993: LIST
12994: PPUSH
12995: CALL_OW 69
12999: PUSH
13000: LD_EXP 24
13004: DIFF
13005: ST_TO_ADDR
// DialogueOn ;
13006: CALL_OW 6
// DWait ( 0 0$0.3 ) ;
13010: LD_INT 10
13012: PPUSH
13013: CALL_OW 68
// if GetSex ( speaker [ 1 ] ) = sex_male then
13017: LD_VAR 0 1
13021: PUSH
13022: LD_INT 1
13024: ARRAY
13025: PPUSH
13026: CALL_OW 258
13030: PUSH
13031: LD_INT 1
13033: EQUAL
13034: IFFALSE 13054
// Say ( speaker [ 1 ] , VDb-1 ) else
13036: LD_VAR 0 1
13040: PUSH
13041: LD_INT 1
13043: ARRAY
13044: PPUSH
13045: LD_STRING VDb-1
13047: PPUSH
13048: CALL_OW 88
13052: GO 13070
// Say ( speaker [ 1 ] , VDbf-1 ) ;
13054: LD_VAR 0 1
13058: PUSH
13059: LD_INT 1
13061: ARRAY
13062: PPUSH
13063: LD_STRING VDbf-1
13065: PPUSH
13066: CALL_OW 88
// DWait ( 0 0$0.3 ) ;
13070: LD_INT 10
13072: PPUSH
13073: CALL_OW 68
// if GetSex ( speaker [ 1 ] ) = sex_male then
13077: LD_VAR 0 1
13081: PUSH
13082: LD_INT 1
13084: ARRAY
13085: PPUSH
13086: CALL_OW 258
13090: PUSH
13091: LD_INT 1
13093: EQUAL
13094: IFFALSE 13114
// Say ( speaker [ 1 ] , VDb-2 ) else
13096: LD_VAR 0 1
13100: PUSH
13101: LD_INT 1
13103: ARRAY
13104: PPUSH
13105: LD_STRING VDb-2
13107: PPUSH
13108: CALL_OW 88
13112: GO 13130
// Say ( speaker [ 1 ] , VDbf-2 ) ;
13114: LD_VAR 0 1
13118: PUSH
13119: LD_INT 1
13121: ARRAY
13122: PPUSH
13123: LD_STRING VDbf-2
13125: PPUSH
13126: CALL_OW 88
// DWait ( 0 0$01 ) ;
13130: LD_INT 35
13132: PPUSH
13133: CALL_OW 68
// Say ( us_commander , VDb-com1 ) ;
13137: LD_EXP 24
13141: PPUSH
13142: LD_STRING VDb-com1
13144: PPUSH
13145: CALL_OW 88
// DialogueOff ;
13149: CALL_OW 7
// Wait ( [ 21 21$00 , 17 17$30 , 15 15$00 ] [ Difficulty ] ) ;
13153: LD_INT 44100
13155: PUSH
13156: LD_INT 36750
13158: PUSH
13159: LD_INT 31500
13161: PUSH
13162: EMPTY
13163: LIST
13164: LIST
13165: LIST
13166: PUSH
13167: LD_OWVAR 67
13171: ARRAY
13172: PPUSH
13173: CALL_OW 67
// ru_can_attack := true ;
13177: LD_ADDR_EXP 3
13181: PUSH
13182: LD_INT 1
13184: ST_TO_ADDR
// end ;
13185: PPOPN 1
13187: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) do
13188: LD_INT 22
13190: PUSH
13191: LD_INT 7
13193: PUSH
13194: EMPTY
13195: LIST
13196: LIST
13197: PUSH
13198: LD_INT 30
13200: PUSH
13201: LD_INT 3
13203: PUSH
13204: EMPTY
13205: LIST
13206: LIST
13207: PUSH
13208: EMPTY
13209: LIST
13210: LIST
13211: PPUSH
13212: CALL_OW 69
13216: IFFALSE 13253
13218: GO 13220
13220: DISABLE
// begin Wait ( [ 20 20$00 , 16 16$30 , 14 14$00 ] [ Difficulty ] ) ;
13221: LD_INT 42000
13223: PUSH
13224: LD_INT 34650
13226: PUSH
13227: LD_INT 29400
13229: PUSH
13230: EMPTY
13231: LIST
13232: LIST
13233: LIST
13234: PUSH
13235: LD_OWVAR 67
13239: ARRAY
13240: PPUSH
13241: CALL_OW 67
// ru_can_attack := true ;
13245: LD_ADDR_EXP 3
13249: PUSH
13250: LD_INT 1
13252: ST_TO_ADDR
// end ;
13253: END
// every 0 0$01 trigger GetSide ( us_lab ) = 1 do var speaker ;
13254: LD_INT 58
13256: PPUSH
13257: CALL_OW 255
13261: PUSH
13262: LD_INT 1
13264: EQUAL
13265: IFFALSE 13459
13267: GO 13269
13269: DISABLE
13270: LD_INT 0
13272: PPUSH
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
13273: LD_ADDR_VAR 0 1
13277: PUSH
13278: LD_INT 22
13280: PUSH
13281: LD_INT 1
13283: PUSH
13284: EMPTY
13285: LIST
13286: LIST
13287: PUSH
13288: LD_INT 25
13290: PUSH
13291: LD_INT 2
13293: PUSH
13294: EMPTY
13295: LIST
13296: LIST
13297: PUSH
13298: EMPTY
13299: LIST
13300: LIST
13301: PPUSH
13302: CALL_OW 69
13306: ST_TO_ADDR
// DialogueOn ;
13307: CALL_OW 6
// if speaker then
13311: LD_VAR 0 1
13315: IFFALSE 13370
// if GetSex ( speaker [ 1 ] ) = sex_male then
13317: LD_VAR 0 1
13321: PUSH
13322: LD_INT 1
13324: ARRAY
13325: PPUSH
13326: CALL_OW 258
13330: PUSH
13331: LD_INT 1
13333: EQUAL
13334: IFFALSE 13354
// Say ( speaker [ 1 ] , VDe-1 ) else
13336: LD_VAR 0 1
13340: PUSH
13341: LD_INT 1
13343: ARRAY
13344: PPUSH
13345: LD_STRING VDe-1
13347: PPUSH
13348: CALL_OW 88
13352: GO 13370
// Say ( speaker [ 1 ] , VDef-1 ) ;
13354: LD_VAR 0 1
13358: PUSH
13359: LD_INT 1
13361: ARRAY
13362: PPUSH
13363: LD_STRING VDef-1
13365: PPUSH
13366: CALL_OW 88
// Query ( SibNote ) ;
13370: LD_STRING SibNote
13372: PPUSH
13373: CALL_OW 97
// if speaker then
13377: LD_VAR 0 1
13381: IFFALSE 13436
// if GetSex ( speaker [ 1 ] ) = sex_male then
13383: LD_VAR 0 1
13387: PUSH
13388: LD_INT 1
13390: ARRAY
13391: PPUSH
13392: CALL_OW 258
13396: PUSH
13397: LD_INT 1
13399: EQUAL
13400: IFFALSE 13420
// Say ( speaker [ 1 ] , VDe-2 ) else
13402: LD_VAR 0 1
13406: PUSH
13407: LD_INT 1
13409: ARRAY
13410: PPUSH
13411: LD_STRING VDe-2
13413: PPUSH
13414: CALL_OW 88
13418: GO 13436
// Say ( speaker [ 1 ] , VDef-2 ) ;
13420: LD_VAR 0 1
13424: PUSH
13425: LD_INT 1
13427: ARRAY
13428: PPUSH
13429: LD_STRING VDef-2
13431: PPUSH
13432: CALL_OW 88
// Say ( us_commander , VDc-4 ) ;
13436: LD_EXP 24
13440: PPUSH
13441: LD_STRING VDc-4
13443: PPUSH
13444: CALL_OW 88
// DialogueOff ;
13448: CALL_OW 7
// ChangeMissionObjectives ( CVulc3 ) ;
13452: LD_STRING CVulc3
13454: PPUSH
13455: CALL_OW 337
// end ;
13459: PPOPN 1
13461: END
// every 0 0$01 trigger your_side = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) > 0 do var i , un , veh ;
13462: LD_OWVAR 2
13466: PUSH
13467: LD_INT 1
13469: EQUAL
13470: IFFALSE 13506
13472: PUSH
13473: LD_INT 22
13475: PUSH
13476: LD_INT 1
13478: PUSH
13479: EMPTY
13480: LIST
13481: LIST
13482: PUSH
13483: LD_INT 30
13485: PUSH
13486: LD_INT 3
13488: PUSH
13489: EMPTY
13490: LIST
13491: LIST
13492: PUSH
13493: EMPTY
13494: LIST
13495: LIST
13496: PPUSH
13497: CALL_OW 69
13501: PUSH
13502: LD_INT 0
13504: GREATER
13505: AND
13506: IFFALSE 13952
13508: GO 13510
13510: DISABLE
13511: LD_INT 0
13513: PPUSH
13514: PPUSH
13515: PPUSH
// begin Wait ( Rand ( 0 0$07 , 0 0$37 ) ) ;
13516: LD_INT 245
13518: PPUSH
13519: LD_INT 1295
13521: PPUSH
13522: CALL_OW 12
13526: PPUSH
13527: CALL_OW 67
// DialogueOn ;
13531: CALL_OW 6
// SayRadio ( us_guy , VDG-1 ) ;
13535: LD_EXP 27
13539: PPUSH
13540: LD_STRING VDG-1
13542: PPUSH
13543: CALL_OW 94
// Say ( us_commander , VDc-5 ) ;
13547: LD_EXP 24
13551: PPUSH
13552: LD_STRING VDc-5
13554: PPUSH
13555: CALL_OW 88
// SayRadio ( us_guy , VDG-2 ) ;
13559: LD_EXP 27
13563: PPUSH
13564: LD_STRING VDG-2
13566: PPUSH
13567: CALL_OW 94
// Say ( us_commander , VDc-6 ) ;
13571: LD_EXP 24
13575: PPUSH
13576: LD_STRING VDc-6
13578: PPUSH
13579: CALL_OW 88
// Say ( us_commander , VDc-6a ) ;
13583: LD_EXP 24
13587: PPUSH
13588: LD_STRING VDc-6a
13590: PPUSH
13591: CALL_OW 88
// SayRadio ( us_guy , VDG-3 ) ;
13595: LD_EXP 27
13599: PPUSH
13600: LD_STRING VDG-3
13602: PPUSH
13603: CALL_OW 94
// Say ( us_commander , VDc-7 ) ;
13607: LD_EXP 24
13611: PPUSH
13612: LD_STRING VDc-7
13614: PPUSH
13615: CALL_OW 88
// SayRadio ( us_guy , VDG-4 ) ;
13619: LD_EXP 27
13623: PPUSH
13624: LD_STRING VDG-4
13626: PPUSH
13627: CALL_OW 94
// DialogueOff ;
13631: CALL_OW 7
// ChangeMissionObjectives ( CVulc4 ) ;
13635: LD_STRING CVulc4
13637: PPUSH
13638: CALL_OW 337
// Wait ( [ 9 9$00 , 10 10$00 , 11 11$00 ] [ Difficulty ] ) ;
13642: LD_INT 18900
13644: PUSH
13645: LD_INT 21000
13647: PUSH
13648: LD_INT 23100
13650: PUSH
13651: EMPTY
13652: LIST
13653: LIST
13654: LIST
13655: PUSH
13656: LD_OWVAR 67
13660: ARRAY
13661: PPUSH
13662: CALL_OW 67
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
13666: LD_ADDR_VAR 0 1
13670: PUSH
13671: DOUBLE
13672: LD_INT 1
13674: DEC
13675: ST_TO_ADDR
13676: LD_INT 4
13678: PUSH
13679: LD_INT 5
13681: PUSH
13682: LD_INT 6
13684: PUSH
13685: EMPTY
13686: LIST
13687: LIST
13688: LIST
13689: PUSH
13690: LD_OWVAR 67
13694: ARRAY
13695: PUSH
13696: FOR_TO
13697: IFFALSE 13941
// begin uc_side := 1 ;
13699: LD_ADDR_OWVAR 20
13703: PUSH
13704: LD_INT 1
13706: ST_TO_ADDR
// uc_nation := 1 ;
13707: LD_ADDR_OWVAR 21
13711: PUSH
13712: LD_INT 1
13714: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , us_skill ) ;
13715: LD_INT 0
13717: PPUSH
13718: LD_INT 1
13720: PPUSH
13721: LD_INT 4
13723: PPUSH
13724: CALL_OW 12
13728: PPUSH
13729: LD_EXP 26
13733: PPUSH
13734: CALL_OW 380
// un := CreateHuman ;
13738: LD_ADDR_VAR 0 2
13742: PUSH
13743: CALL_OW 44
13747: ST_TO_ADDR
// SetDir ( un , 2 ) ;
13748: LD_VAR 0 2
13752: PPUSH
13753: LD_INT 2
13755: PPUSH
13756: CALL_OW 233
// if GetClass ( un ) = 3 then
13760: LD_VAR 0 2
13764: PPUSH
13765: CALL_OW 257
13769: PUSH
13770: LD_INT 3
13772: EQUAL
13773: IFFALSE 13924
// begin vc_chassis := [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 ] ;
13775: LD_ADDR_OWVAR 37
13779: PUSH
13780: LD_INT 2
13782: PUSH
13783: LD_INT 3
13785: PUSH
13786: EMPTY
13787: LIST
13788: LIST
13789: PUSH
13790: LD_VAR 0 1
13794: PUSH
13795: LD_INT 2
13797: MOD
13798: ARRAY
13799: ST_TO_ADDR
// vc_engine := engine_combustion ;
13800: LD_ADDR_OWVAR 39
13804: PUSH
13805: LD_INT 1
13807: ST_TO_ADDR
// vc_control := control_manual ;
13808: LD_ADDR_OWVAR 38
13812: PUSH
13813: LD_INT 1
13815: ST_TO_ADDR
// vc_weapon := [ us_laser , us_laser , us_double_gun , us_radar ] [ rand ( 1 , 4 ) ] ;
13816: LD_ADDR_OWVAR 40
13820: PUSH
13821: LD_INT 9
13823: PUSH
13824: LD_INT 9
13826: PUSH
13827: LD_INT 5
13829: PUSH
13830: LD_INT 11
13832: PUSH
13833: EMPTY
13834: LIST
13835: LIST
13836: LIST
13837: LIST
13838: PUSH
13839: LD_INT 1
13841: PPUSH
13842: LD_INT 4
13844: PPUSH
13845: CALL_OW 12
13849: ARRAY
13850: ST_TO_ADDR
// veh := CreateVehicle ;
13851: LD_ADDR_VAR 0 3
13855: PUSH
13856: CALL_OW 45
13860: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
13861: LD_VAR 0 3
13865: PPUSH
13866: LD_INT 2
13868: PPUSH
13869: CALL_OW 233
// SetFuel ( veh , Rand ( 77 , 88 ) ) ;
13873: LD_VAR 0 3
13877: PPUSH
13878: LD_INT 77
13880: PPUSH
13881: LD_INT 88
13883: PPUSH
13884: CALL_OW 12
13888: PPUSH
13889: CALL_OW 240
// PlaceUnitArea ( veh , start_north , false ) ;
13893: LD_VAR 0 3
13897: PPUSH
13898: LD_INT 1
13900: PPUSH
13901: LD_INT 0
13903: PPUSH
13904: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
13908: LD_VAR 0 2
13912: PPUSH
13913: LD_VAR 0 3
13917: PPUSH
13918: CALL_OW 52
// end else
13922: GO 13939
// PlaceUnitArea ( un , start_north , false ) ;
13924: LD_VAR 0 2
13928: PPUSH
13929: LD_INT 1
13931: PPUSH
13932: LD_INT 0
13934: PPUSH
13935: CALL_OW 49
// end ;
13939: GO 13696
13941: POP
13942: POP
// CenterNowOnUnits ( un ) ;
13943: LD_VAR 0 2
13947: PPUSH
13948: CALL_OW 87
// end ;
13952: PPOPN 3
13954: END
// every 0 0$01 trigger FilterUnitsInArea ( vulc_artifact , [ f_side , your_side ] ) do var un , filter ;
13955: LD_INT 21
13957: PPUSH
13958: LD_INT 22
13960: PUSH
13961: LD_OWVAR 2
13965: PUSH
13966: EMPTY
13967: LIST
13968: LIST
13969: PPUSH
13970: CALL_OW 70
13974: IFFALSE 14295
13976: GO 13978
13978: DISABLE
13979: LD_INT 0
13981: PPUSH
13982: PPUSH
// begin filter := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff player_commander ;
13983: LD_ADDR_VAR 0 2
13987: PUSH
13988: LD_INT 22
13990: PUSH
13991: LD_OWVAR 2
13995: PUSH
13996: EMPTY
13997: LIST
13998: LIST
13999: PUSH
14000: LD_INT 2
14002: PUSH
14003: LD_INT 25
14005: PUSH
14006: LD_INT 1
14008: PUSH
14009: EMPTY
14010: LIST
14011: LIST
14012: PUSH
14013: LD_INT 25
14015: PUSH
14016: LD_INT 2
14018: PUSH
14019: EMPTY
14020: LIST
14021: LIST
14022: PUSH
14023: LD_INT 25
14025: PUSH
14026: LD_INT 3
14028: PUSH
14029: EMPTY
14030: LIST
14031: LIST
14032: PUSH
14033: LD_INT 25
14035: PUSH
14036: LD_INT 4
14038: PUSH
14039: EMPTY
14040: LIST
14041: LIST
14042: PUSH
14043: EMPTY
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: LIST
14049: PUSH
14050: EMPTY
14051: LIST
14052: LIST
14053: PPUSH
14054: CALL_OW 69
14058: PUSH
14059: LD_EXP 11
14063: DIFF
14064: ST_TO_ADDR
// un := NearestUnitToXY ( filter , 112 , 67 ) ;
14065: LD_ADDR_VAR 0 1
14069: PUSH
14070: LD_VAR 0 2
14074: PPUSH
14075: LD_INT 112
14077: PPUSH
14078: LD_INT 67
14080: PPUSH
14081: CALL_OW 73
14085: ST_TO_ADDR
// if GetSide ( un ) = 7 then
14086: LD_VAR 0 1
14090: PPUSH
14091: CALL_OW 255
14095: PUSH
14096: LD_INT 7
14098: EQUAL
14099: IFFALSE 14142
// if GetSex ( un ) = sex_male then
14101: LD_VAR 0 1
14105: PPUSH
14106: CALL_OW 258
14110: PUSH
14111: LD_INT 1
14113: EQUAL
14114: IFFALSE 14130
// Say ( un , VD-find-al ) else
14116: LD_VAR 0 1
14120: PPUSH
14121: LD_STRING VD-find-al
14123: PPUSH
14124: CALL_OW 88
14128: GO 14142
// Say ( un , VD-find-al-f ) ;
14130: LD_VAR 0 1
14134: PPUSH
14135: LD_STRING VD-find-al-f
14137: PPUSH
14138: CALL_OW 88
// if GetSide ( un ) = 2 then
14142: LD_VAR 0 1
14146: PPUSH
14147: CALL_OW 255
14151: PUSH
14152: LD_INT 2
14154: EQUAL
14155: IFFALSE 14198
// if GetSex ( un ) = sex_male then
14157: LD_VAR 0 1
14161: PPUSH
14162: CALL_OW 258
14166: PUSH
14167: LD_INT 1
14169: EQUAL
14170: IFFALSE 14186
// Say ( un , VD-find-ar ) else
14172: LD_VAR 0 1
14176: PPUSH
14177: LD_STRING VD-find-ar
14179: PPUSH
14180: CALL_OW 88
14184: GO 14198
// Say ( un , VD-find-ar-f ) ;
14186: LD_VAR 0 1
14190: PPUSH
14191: LD_STRING VD-find-ar-f
14193: PPUSH
14194: CALL_OW 88
// if GetSide ( un ) = 1 then
14198: LD_VAR 0 1
14202: PPUSH
14203: CALL_OW 255
14207: PUSH
14208: LD_INT 1
14210: EQUAL
14211: IFFALSE 14278
// begin if GetSex ( un ) = sex_male then
14213: LD_VAR 0 1
14217: PPUSH
14218: CALL_OW 258
14222: PUSH
14223: LD_INT 1
14225: EQUAL
14226: IFFALSE 14254
// begin Say ( un , VD-find-us ) ;
14228: LD_VAR 0 1
14232: PPUSH
14233: LD_STRING VD-find-us
14235: PPUSH
14236: CALL_OW 88
// Say ( un , VD-find-us2 ) ;
14240: LD_VAR 0 1
14244: PPUSH
14245: LD_STRING VD-find-us2
14247: PPUSH
14248: CALL_OW 88
// end else
14252: GO 14278
// begin Say ( un , VD-find-us-f ) ;
14254: LD_VAR 0 1
14258: PPUSH
14259: LD_STRING VD-find-us-f
14261: PPUSH
14262: CALL_OW 88
// Say ( un , VD-find-us2-f ) ;
14266: LD_VAR 0 1
14270: PPUSH
14271: LD_STRING VD-find-us2-f
14273: PPUSH
14274: CALL_OW 88
// end ; end ; Wait ( 0 0$0.3 ) ;
14278: LD_INT 10
14280: PPUSH
14281: CALL_OW 67
// CenterNowOnXY ( 112 , 67 ) ;
14285: LD_INT 112
14287: PPUSH
14288: LD_INT 67
14290: PPUSH
14291: CALL_OW 86
// end ;
14295: PPOPN 2
14297: END
// every 0 0$01 trigger player_artifact_ready do var speaker ;
14298: LD_EXP 8
14302: IFFALSE 14804
14304: GO 14306
14306: DISABLE
14307: LD_INT 0
14309: PPUSH
// begin if your_side = 1 then
14310: LD_OWVAR 2
14314: PUSH
14315: LD_INT 1
14317: EQUAL
14318: IFFALSE 14499
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) diff us_commander ;
14320: LD_ADDR_VAR 0 1
14324: PUSH
14325: LD_INT 22
14327: PUSH
14328: LD_INT 1
14330: PUSH
14331: EMPTY
14332: LIST
14333: LIST
14334: PUSH
14335: LD_INT 25
14337: PUSH
14338: LD_INT 4
14340: PUSH
14341: EMPTY
14342: LIST
14343: LIST
14344: PUSH
14345: EMPTY
14346: LIST
14347: LIST
14348: PPUSH
14349: CALL_OW 69
14353: PUSH
14354: LD_EXP 24
14358: DIFF
14359: ST_TO_ADDR
// if not speaker then
14360: LD_VAR 0 1
14364: NOT
14365: IFFALSE 14369
// exit ;
14367: GO 14804
// if GetSex ( speaker [ 1 ] ) = sex_male then
14369: LD_VAR 0 1
14373: PUSH
14374: LD_INT 1
14376: ARRAY
14377: PPUSH
14378: CALL_OW 258
14382: PUSH
14383: LD_INT 1
14385: EQUAL
14386: IFFALSE 14406
// Say ( speaker [ 1 ] , VD-us-sci-art-1 ) else
14388: LD_VAR 0 1
14392: PUSH
14393: LD_INT 1
14395: ARRAY
14396: PPUSH
14397: LD_STRING VD-us-sci-art-1
14399: PPUSH
14400: CALL_OW 88
14404: GO 14422
// Say ( speaker [ 1 ] , VD-us-fsci-art-1 ) ;
14406: LD_VAR 0 1
14410: PUSH
14411: LD_INT 1
14413: ARRAY
14414: PPUSH
14415: LD_STRING VD-us-fsci-art-1
14417: PPUSH
14418: CALL_OW 88
// Say ( us_commander , VDc-art1 ) ;
14422: LD_EXP 24
14426: PPUSH
14427: LD_STRING VDc-art1
14429: PPUSH
14430: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
14434: LD_VAR 0 1
14438: PUSH
14439: LD_INT 1
14441: ARRAY
14442: PPUSH
14443: CALL_OW 258
14447: PUSH
14448: LD_INT 1
14450: EQUAL
14451: IFFALSE 14471
// Say ( speaker [ 1 ] , VD-us-sci-art-2 ) else
14453: LD_VAR 0 1
14457: PUSH
14458: LD_INT 1
14460: ARRAY
14461: PPUSH
14462: LD_STRING VD-us-sci-art-2
14464: PPUSH
14465: CALL_OW 88
14469: GO 14487
// Say ( speaker [ 1 ] , VD-us-fsci-art-2 ) ;
14471: LD_VAR 0 1
14475: PUSH
14476: LD_INT 1
14478: ARRAY
14479: PPUSH
14480: LD_STRING VD-us-fsci-art-2
14482: PPUSH
14483: CALL_OW 88
// Say ( us_commander , VDc-art2 ) ;
14487: LD_EXP 24
14491: PPUSH
14492: LD_STRING VDc-art2
14494: PPUSH
14495: CALL_OW 88
// end ; if your_side = 2 then
14499: LD_OWVAR 2
14503: PUSH
14504: LD_INT 2
14506: EQUAL
14507: IFFALSE 14611
// begin speaker := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) diff ar_commander ;
14509: LD_ADDR_VAR 0 1
14513: PUSH
14514: LD_INT 22
14516: PUSH
14517: LD_INT 2
14519: PUSH
14520: EMPTY
14521: LIST
14522: LIST
14523: PUSH
14524: LD_INT 25
14526: PUSH
14527: LD_INT 4
14529: PUSH
14530: EMPTY
14531: LIST
14532: LIST
14533: PUSH
14534: EMPTY
14535: LIST
14536: LIST
14537: PPUSH
14538: CALL_OW 69
14542: PUSH
14543: LD_EXP 57
14547: DIFF
14548: ST_TO_ADDR
// if not speaker then
14549: LD_VAR 0 1
14553: NOT
14554: IFFALSE 14558
// exit ;
14556: GO 14804
// if GetSex ( speaker [ 1 ] ) = sex_male then
14558: LD_VAR 0 1
14562: PUSH
14563: LD_INT 1
14565: ARRAY
14566: PPUSH
14567: CALL_OW 258
14571: PUSH
14572: LD_INT 1
14574: EQUAL
14575: IFFALSE 14595
// Say ( speaker [ 1 ] , VD-ar-sci-art-1 ) else
14577: LD_VAR 0 1
14581: PUSH
14582: LD_INT 1
14584: ARRAY
14585: PPUSH
14586: LD_STRING VD-ar-sci-art-1
14588: PPUSH
14589: CALL_OW 88
14593: GO 14611
// Say ( speaker [ 1 ] , VD-ar-fsci-art-1 ) ;
14595: LD_VAR 0 1
14599: PUSH
14600: LD_INT 1
14602: ARRAY
14603: PPUSH
14604: LD_STRING VD-ar-fsci-art-1
14606: PPUSH
14607: CALL_OW 88
// end ; if your_side = 7 then
14611: LD_OWVAR 2
14615: PUSH
14616: LD_INT 7
14618: EQUAL
14619: IFFALSE 14804
// begin speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 4 ] ] ) diff al_commander ;
14621: LD_ADDR_VAR 0 1
14625: PUSH
14626: LD_INT 22
14628: PUSH
14629: LD_INT 7
14631: PUSH
14632: EMPTY
14633: LIST
14634: LIST
14635: PUSH
14636: LD_INT 25
14638: PUSH
14639: LD_INT 4
14641: PUSH
14642: EMPTY
14643: LIST
14644: LIST
14645: PUSH
14646: EMPTY
14647: LIST
14648: LIST
14649: PPUSH
14650: CALL_OW 69
14654: PUSH
14655: LD_EXP 43
14659: DIFF
14660: ST_TO_ADDR
// if speaker then
14661: LD_VAR 0 1
14665: IFFALSE 14797
// begin if GetSex ( speaker [ 1 ] ) = sex_male then
14667: LD_VAR 0 1
14671: PUSH
14672: LD_INT 1
14674: ARRAY
14675: PPUSH
14676: CALL_OW 258
14680: PUSH
14681: LD_INT 1
14683: EQUAL
14684: IFFALSE 14704
// Say ( speaker [ 1 ] , VD-al-sci-art-1 ) else
14686: LD_VAR 0 1
14690: PUSH
14691: LD_INT 1
14693: ARRAY
14694: PPUSH
14695: LD_STRING VD-al-sci-art-1
14697: PPUSH
14698: CALL_OW 88
14702: GO 14720
// Say ( speaker [ 1 ] , VD-al-fsci-art-1 ) ;
14704: LD_VAR 0 1
14708: PUSH
14709: LD_INT 1
14711: ARRAY
14712: PPUSH
14713: LD_STRING VD-al-fsci-art-1
14715: PPUSH
14716: CALL_OW 88
// Say ( al_commander , VPd-art-1 ) ;
14720: LD_EXP 43
14724: PPUSH
14725: LD_STRING VPd-art-1
14727: PPUSH
14728: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
14732: LD_VAR 0 1
14736: PUSH
14737: LD_INT 1
14739: ARRAY
14740: PPUSH
14741: CALL_OW 258
14745: PUSH
14746: LD_INT 1
14748: EQUAL
14749: IFFALSE 14769
// Say ( speaker [ 1 ] , VD-al-sci-art-2 ) else
14751: LD_VAR 0 1
14755: PUSH
14756: LD_INT 1
14758: ARRAY
14759: PPUSH
14760: LD_STRING VD-al-sci-art-2
14762: PPUSH
14763: CALL_OW 88
14767: GO 14785
// Say ( speaker [ 1 ] , VD-al-fsci-art-2 ) ;
14769: LD_VAR 0 1
14773: PUSH
14774: LD_INT 1
14776: ARRAY
14777: PPUSH
14778: LD_STRING VD-al-fsci-art-2
14780: PPUSH
14781: CALL_OW 88
// Say ( al_commander , VPd-art-2 ) ;
14785: LD_EXP 43
14789: PPUSH
14790: LD_STRING VPd-art-2
14792: PPUSH
14793: CALL_OW 88
// end ; ChangeMissionObjectives ( CVulc7out ) ;
14797: LD_STRING CVulc7out
14799: PPUSH
14800: CALL_OW 337
// end ; end ;
14804: PPOPN 1
14806: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_see , 8 ] ] ) do var speaker ;
14807: LD_INT 22
14809: PUSH
14810: LD_OWVAR 2
14814: PUSH
14815: EMPTY
14816: LIST
14817: LIST
14818: PUSH
14819: LD_INT 101
14821: PUSH
14822: LD_INT 8
14824: PUSH
14825: EMPTY
14826: LIST
14827: LIST
14828: PUSH
14829: EMPTY
14830: LIST
14831: LIST
14832: PPUSH
14833: CALL_OW 69
14837: IFFALSE 14980
14839: GO 14841
14841: DISABLE
14842: LD_INT 0
14844: PPUSH
// begin if your_side = 1 then
14845: LD_OWVAR 2
14849: PUSH
14850: LD_INT 1
14852: EQUAL
14853: IFFALSE 14936
// begin speaker := FilterAllUnits ( [ f_side , 1 ] ) diff us_commander ;
14855: LD_ADDR_VAR 0 1
14859: PUSH
14860: LD_INT 22
14862: PUSH
14863: LD_INT 1
14865: PUSH
14866: EMPTY
14867: LIST
14868: LIST
14869: PPUSH
14870: CALL_OW 69
14874: PUSH
14875: LD_EXP 24
14879: DIFF
14880: ST_TO_ADDR
// if speaker then
14881: LD_VAR 0 1
14885: IFFALSE 14936
// if GetSex ( speaker [ 1 ] ) then
14887: LD_VAR 0 1
14891: PUSH
14892: LD_INT 1
14894: ARRAY
14895: PPUSH
14896: CALL_OW 258
14900: IFFALSE 14920
// Say ( speaker [ 1 ] , VD-legion-us ) else
14902: LD_VAR 0 1
14906: PUSH
14907: LD_INT 1
14909: ARRAY
14910: PPUSH
14911: LD_STRING VD-legion-us
14913: PPUSH
14914: CALL_OW 88
14918: GO 14936
// Say ( speaker [ 1 ] , VD-legion-us-f ) ;
14920: LD_VAR 0 1
14924: PUSH
14925: LD_INT 1
14927: ARRAY
14928: PPUSH
14929: LD_STRING VD-legion-us-f
14931: PPUSH
14932: CALL_OW 88
// end ; if your_side = 2 then
14936: LD_OWVAR 2
14940: PUSH
14941: LD_INT 2
14943: EQUAL
14944: IFFALSE 14958
// Say ( ar_commander , VD-legion-ar ) ;
14946: LD_EXP 57
14950: PPUSH
14951: LD_STRING VD-legion-ar
14953: PPUSH
14954: CALL_OW 88
// if your_side = 7 then
14958: LD_OWVAR 2
14962: PUSH
14963: LD_INT 7
14965: EQUAL
14966: IFFALSE 14980
// Say ( al_commander , VD-legion-al ) ;
14968: LD_EXP 43
14972: PPUSH
14973: LD_STRING VD-legion-al
14975: PPUSH
14976: CALL_OW 88
// end ;
14980: PPOPN 1
14982: END
// every 0 0$01 trigger mine_vulc do
14983: LD_EXP 13
14987: IFFALSE 15004
14989: GO 14991
14991: DISABLE
// begin Say ( player_commander , VD-vulc-mines ) ;
14992: LD_EXP 11
14996: PPUSH
14997: LD_STRING VD-vulc-mines
14999: PPUSH
15000: CALL_OW 88
// end ;
15004: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and your_side <> 2 do
15005: LD_INT 22
15007: PUSH
15008: LD_INT 3
15010: PUSH
15011: EMPTY
15012: LIST
15013: LIST
15014: PUSH
15015: LD_INT 21
15017: PUSH
15018: LD_INT 1
15020: PUSH
15021: EMPTY
15022: LIST
15023: LIST
15024: PUSH
15025: EMPTY
15026: LIST
15027: LIST
15028: PPUSH
15029: CALL_OW 69
15033: PUSH
15034: LD_INT 0
15036: EQUAL
15037: IFFALSE 15049
15039: PUSH
15040: LD_OWVAR 2
15044: PUSH
15045: LD_INT 2
15047: NONEQUAL
15048: AND
15049: IFFALSE 15058
15051: GO 15053
15053: DISABLE
// Win ;
15054: CALL 15131 0 0
15058: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_or , [ f_side , 8 ] , [ f_side , 3 ] ] , [ f_type , unit_human ] ] ) = 0 and your_side = 2 do
15059: LD_INT 2
15061: PUSH
15062: LD_INT 22
15064: PUSH
15065: LD_INT 8
15067: PUSH
15068: EMPTY
15069: LIST
15070: LIST
15071: PUSH
15072: LD_INT 22
15074: PUSH
15075: LD_INT 3
15077: PUSH
15078: EMPTY
15079: LIST
15080: LIST
15081: PUSH
15082: EMPTY
15083: LIST
15084: LIST
15085: LIST
15086: PUSH
15087: LD_INT 21
15089: PUSH
15090: LD_INT 1
15092: PUSH
15093: EMPTY
15094: LIST
15095: LIST
15096: PUSH
15097: EMPTY
15098: LIST
15099: LIST
15100: PPUSH
15101: CALL_OW 69
15105: PUSH
15106: LD_INT 0
15108: EQUAL
15109: IFFALSE 15121
15111: PUSH
15112: LD_OWVAR 2
15116: PUSH
15117: LD_INT 2
15119: EQUAL
15120: AND
15121: IFFALSE 15130
15123: GO 15125
15125: DISABLE
// Win ;
15126: CALL 15131 0 0
15130: END
// function Win ; var points ; begin
15131: LD_INT 0
15133: PPUSH
15134: PPUSH
// Query ( VulcWin ) ;
15135: LD_STRING VulcWin
15137: PPUSH
15138: CALL_OW 97
// if medal_enabled then
15142: LD_EXP 14
15146: IFFALSE 15160
// AddMedal ( vulc_1 , 1 ) else
15148: LD_STRING vulc_1
15150: PPUSH
15151: LD_INT 1
15153: PPUSH
15154: CALL_OW 101
15158: GO 15171
// AddMedal ( vulc_1 , - 1 ) ;
15160: LD_STRING vulc_1
15162: PPUSH
15163: LD_INT 1
15165: NEG
15166: PPUSH
15167: CALL_OW 101
// if FilterAllUnits ( [ f_side , 8 ] ) = 0 then
15171: LD_INT 22
15173: PUSH
15174: LD_INT 8
15176: PUSH
15177: EMPTY
15178: LIST
15179: LIST
15180: PPUSH
15181: CALL_OW 69
15185: PUSH
15186: LD_INT 0
15188: EQUAL
15189: IFFALSE 15203
// AddMedal ( vulc_2 , 1 ) else
15191: LD_STRING vulc_2
15193: PPUSH
15194: LD_INT 1
15196: PPUSH
15197: CALL_OW 101
15201: GO 15214
// AddMedal ( vulc_2 , - 1 ) ;
15203: LD_STRING vulc_2
15205: PPUSH
15206: LD_INT 1
15208: NEG
15209: PPUSH
15210: CALL_OW 101
// points := CalculateCommanderPoints ;
15214: LD_ADDR_VAR 0 2
15218: PUSH
15219: CALL 2376 0 0
15223: ST_TO_ADDR
// if points >= 2000 then
15224: LD_VAR 0 2
15228: PUSH
15229: LD_INT 2000
15231: GREATEREQUAL
15232: IFFALSE 15246
// AddMedal ( vulc_3 , 2 ) else
15234: LD_STRING vulc_3
15236: PPUSH
15237: LD_INT 2
15239: PPUSH
15240: CALL_OW 101
15244: GO 15279
// if points >= 0 then
15246: LD_VAR 0 2
15250: PUSH
15251: LD_INT 0
15253: GREATEREQUAL
15254: IFFALSE 15268
// AddMedal ( vulc_3 , 1 ) else
15256: LD_STRING vulc_3
15258: PPUSH
15259: LD_INT 1
15261: PPUSH
15262: CALL_OW 101
15266: GO 15279
// AddMedal ( vulc_3 , - 1 ) ;
15268: LD_STRING vulc_3
15270: PPUSH
15271: LD_INT 1
15273: NEG
15274: PPUSH
15275: CALL_OW 101
// GiveMedals ( MAIN ) ;
15279: LD_STRING MAIN
15281: PPUSH
15282: CALL_OW 102
// YouWin ;
15286: CALL_OW 103
// end ; end_of_file
15290: LD_VAR 0 1
15294: RET
// every 0 0$01 trigger FilterUnitsInArea ( vulcano_area , [ f_type , unit_human ] ) do var i , un ;
15295: LD_INT 13
15297: PPUSH
15298: LD_INT 21
15300: PUSH
15301: LD_INT 1
15303: PUSH
15304: EMPTY
15305: LIST
15306: LIST
15307: PPUSH
15308: CALL_OW 70
15312: IFFALSE 15372
15314: GO 15316
15316: DISABLE
15317: LD_INT 0
15319: PPUSH
15320: PPUSH
// begin enable ;
15321: ENABLE
// for i in FilterUnitsInArea ( vulcano_area , [ f_type , unit_human ] ) do
15322: LD_ADDR_VAR 0 1
15326: PUSH
15327: LD_INT 13
15329: PPUSH
15330: LD_INT 21
15332: PUSH
15333: LD_INT 1
15335: PUSH
15336: EMPTY
15337: LIST
15338: LIST
15339: PPUSH
15340: CALL_OW 70
15344: PUSH
15345: FOR_IN
15346: IFFALSE 15370
// if GetLives ( i ) then
15348: LD_VAR 0 1
15352: PPUSH
15353: CALL_OW 256
15357: IFFALSE 15368
// KillUnit ( i ) ;
15359: LD_VAR 0 1
15363: PPUSH
15364: CALL_OW 66
15368: GO 15345
15370: POP
15371: POP
// end ;
15372: PPOPN 2
15374: END
// on ArtifactResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
15375: LD_VAR 0 1
15379: PPUSH
15380: CALL_OW 255
15384: PUSH
15385: LD_OWVAR 2
15389: EQUAL
15390: IFFALSE 15400
// player_res_art := true ;
15392: LD_ADDR_EXP 6
15396: PUSH
15397: LD_INT 1
15399: ST_TO_ADDR
// end ;
15400: PPOPN 1
15402: END
// every 0 0$03 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) and player_res_art do var xy , lab ;
15403: LD_INT 22
15405: PUSH
15406: LD_OWVAR 2
15410: PUSH
15411: EMPTY
15412: LIST
15413: LIST
15414: PUSH
15415: LD_INT 2
15417: PUSH
15418: LD_INT 30
15420: PUSH
15421: LD_INT 7
15423: PUSH
15424: EMPTY
15425: LIST
15426: LIST
15427: PUSH
15428: LD_INT 30
15430: PUSH
15431: LD_INT 8
15433: PUSH
15434: EMPTY
15435: LIST
15436: LIST
15437: PUSH
15438: LD_INT 30
15440: PUSH
15441: LD_INT 11
15443: PUSH
15444: EMPTY
15445: LIST
15446: LIST
15447: PUSH
15448: EMPTY
15449: LIST
15450: LIST
15451: LIST
15452: LIST
15453: PUSH
15454: EMPTY
15455: LIST
15456: LIST
15457: PPUSH
15458: CALL_OW 69
15462: IFFALSE 15470
15464: PUSH
15465: LD_EXP 6
15469: AND
15470: IFFALSE 15798
15472: GO 15474
15474: DISABLE
15475: LD_INT 0
15477: PPUSH
15478: PPUSH
// begin enable ;
15479: ENABLE
// xy := FindArtifact ( 1 ) ;
15480: LD_ADDR_VAR 0 1
15484: PUSH
15485: LD_INT 1
15487: PPUSH
15488: CALL_OW 469
15492: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_lab , b_lab_siberium ] ] ) , xy [ 1 ] , xy [ 2 ] ) ;
15493: LD_ADDR_VAR 0 2
15497: PUSH
15498: LD_INT 22
15500: PUSH
15501: LD_OWVAR 2
15505: PUSH
15506: EMPTY
15507: LIST
15508: LIST
15509: PUSH
15510: LD_INT 63
15512: PUSH
15513: LD_INT 11
15515: PUSH
15516: EMPTY
15517: LIST
15518: LIST
15519: PUSH
15520: EMPTY
15521: LIST
15522: LIST
15523: PPUSH
15524: CALL_OW 69
15528: PPUSH
15529: LD_VAR 0 1
15533: PUSH
15534: LD_INT 1
15536: ARRAY
15537: PPUSH
15538: LD_VAR 0 1
15542: PUSH
15543: LD_INT 2
15545: ARRAY
15546: PPUSH
15547: CALL_OW 73
15551: ST_TO_ADDR
// if player_artifact_ready = false then
15552: LD_EXP 8
15556: PUSH
15557: LD_INT 0
15559: EQUAL
15560: IFFALSE 15674
// if GetDistUnitXY ( lab , xy [ 1 ] , xy [ 2 ] ) < 6 then
15562: LD_VAR 0 2
15566: PPUSH
15567: LD_VAR 0 1
15571: PUSH
15572: LD_INT 1
15574: ARRAY
15575: PPUSH
15576: LD_VAR 0 1
15580: PUSH
15581: LD_INT 2
15583: ARRAY
15584: PPUSH
15585: CALL_OW 297
15589: PUSH
15590: LD_INT 6
15592: LESS
15593: IFFALSE 15654
// begin if BuildingStatus ( lab ) = bs_idle then
15595: LD_VAR 0 2
15599: PPUSH
15600: CALL_OW 461
15604: PUSH
15605: LD_INT 2
15607: EQUAL
15608: IFFALSE 15632
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) else
15610: LD_OWVAR 2
15614: PPUSH
15615: LD_INT 1
15617: PPUSH
15618: LD_INT 2
15620: PPUSH
15621: LD_VAR 0 2
15625: PPUSH
15626: CALL_OW 468
15630: GO 15652
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
15632: LD_OWVAR 2
15636: PPUSH
15637: LD_INT 1
15639: PPUSH
15640: LD_INT 1
15642: PPUSH
15643: LD_VAR 0 2
15647: PPUSH
15648: CALL_OW 468
// end else
15652: GO 15674
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
15654: LD_OWVAR 2
15658: PPUSH
15659: LD_INT 1
15661: PPUSH
15662: LD_INT 1
15664: PPUSH
15665: LD_VAR 0 2
15669: PPUSH
15670: CALL_OW 468
// if player_artifact_ready then
15674: LD_EXP 8
15678: IFFALSE 15798
// if GetDistUnitXY ( lab , xy [ 1 ] , xy [ 2 ] ) < 6 then
15680: LD_VAR 0 2
15684: PPUSH
15685: LD_VAR 0 1
15689: PUSH
15690: LD_INT 1
15692: ARRAY
15693: PPUSH
15694: LD_VAR 0 1
15698: PUSH
15699: LD_INT 2
15701: ARRAY
15702: PPUSH
15703: CALL_OW 297
15707: PUSH
15708: LD_INT 6
15710: LESS
15711: IFFALSE 15776
// begin if BuildingStatus ( lab ) = bs_idle then
15713: LD_VAR 0 2
15717: PPUSH
15718: CALL_OW 461
15722: PUSH
15723: LD_INT 2
15725: EQUAL
15726: IFFALSE 15752
// SetArtifactUse ( your_side , art_icon , art_unit , lab ) else
15728: LD_OWVAR 2
15732: PPUSH
15733: LD_EXP 9
15737: PPUSH
15738: LD_INT 4
15740: PPUSH
15741: LD_VAR 0 2
15745: PPUSH
15746: CALL_OW 468
15750: GO 15774
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
15752: LD_OWVAR 2
15756: PPUSH
15757: LD_EXP 9
15761: PPUSH
15762: LD_INT 1
15764: PPUSH
15765: LD_VAR 0 2
15769: PPUSH
15770: CALL_OW 468
// end else
15774: GO 15798
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
15776: LD_OWVAR 2
15780: PPUSH
15781: LD_EXP 9
15785: PPUSH
15786: LD_INT 1
15788: PPUSH
15789: LD_VAR 0 2
15793: PPUSH
15794: CALL_OW 468
// end ;
15798: PPOPN 2
15800: END
// on ArtifactUsed ( s , icon , cr1 , cr2 ) do var xy , i , lab , side ;
15801: LD_INT 0
15803: PPUSH
15804: PPUSH
15805: PPUSH
15806: PPUSH
// begin xy := FindArtifact ( 1 ) ;
15807: LD_ADDR_VAR 0 5
15811: PUSH
15812: LD_INT 1
15814: PPUSH
15815: CALL_OW 469
15819: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_lab , b_lab_siberium ] ] ) , xy [ 1 ] , xy [ 2 ] ) ;
15820: LD_ADDR_VAR 0 7
15824: PUSH
15825: LD_INT 22
15827: PUSH
15828: LD_OWVAR 2
15832: PUSH
15833: EMPTY
15834: LIST
15835: LIST
15836: PUSH
15837: LD_INT 63
15839: PUSH
15840: LD_INT 11
15842: PUSH
15843: EMPTY
15844: LIST
15845: LIST
15846: PUSH
15847: EMPTY
15848: LIST
15849: LIST
15850: PPUSH
15851: CALL_OW 69
15855: PPUSH
15856: LD_VAR 0 5
15860: PUSH
15861: LD_INT 1
15863: ARRAY
15864: PPUSH
15865: LD_VAR 0 5
15869: PUSH
15870: LD_INT 2
15872: ARRAY
15873: PPUSH
15874: CALL_OW 73
15878: ST_TO_ADDR
// if icon = art_exp_left then
15879: LD_VAR 0 2
15883: PUSH
15884: LD_INT 1
15886: EQUAL
15887: IFFALSE 15940
// begin SetSpecResearch ( lab , time_res_art , true ) ;
15889: LD_VAR 0 7
15893: PPUSH
15894: LD_EXP 10
15898: PPUSH
15899: LD_INT 1
15901: PPUSH
15902: CALL_OW 486
// SetWorkingProgress ( lab , artifact_progress ) ;
15906: LD_VAR 0 7
15910: PPUSH
15911: LD_EXP 7
15915: PPUSH
15916: CALL_OW 329
// SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
15920: LD_OWVAR 2
15924: PPUSH
15925: LD_INT 1
15927: PPUSH
15928: LD_INT 0
15930: PPUSH
15931: LD_VAR 0 7
15935: PPUSH
15936: CALL_OW 468
// end ; if icon = art_icon then
15940: LD_VAR 0 2
15944: PUSH
15945: LD_EXP 9
15949: EQUAL
15950: IFFALSE 16183
// begin if cr1 in FilterAllUnits ( [ f_type , unit_building ] ) then
15952: LD_VAR 0 3
15956: PUSH
15957: LD_INT 21
15959: PUSH
15960: LD_INT 3
15962: PUSH
15963: EMPTY
15964: LIST
15965: LIST
15966: PPUSH
15967: CALL_OW 69
15971: IN
15972: IFFALSE 16183
// begin side := GetSide ( cr1 ) ;
15974: LD_ADDR_VAR 0 8
15978: PUSH
15979: LD_VAR 0 3
15983: PPUSH
15984: CALL_OW 255
15988: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_siberite_power ] ] ) > 0 then
15989: LD_INT 22
15991: PUSH
15992: LD_VAR 0 8
15996: PUSH
15997: EMPTY
15998: LIST
15999: LIST
16000: PUSH
16001: LD_INT 30
16003: PUSH
16004: LD_INT 28
16006: PUSH
16007: EMPTY
16008: LIST
16009: LIST
16010: PUSH
16011: EMPTY
16012: LIST
16013: LIST
16014: PPUSH
16015: CALL_OW 69
16019: PUSH
16020: LD_INT 0
16022: GREATER
16023: IFFALSE 16183
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_solar_power ] , [ f_btype , b_siberite_power ] ] ] ) do
16025: LD_ADDR_VAR 0 6
16029: PUSH
16030: LD_INT 22
16032: PUSH
16033: LD_VAR 0 8
16037: PUSH
16038: EMPTY
16039: LIST
16040: LIST
16041: PUSH
16042: LD_INT 2
16044: PUSH
16045: LD_INT 30
16047: PUSH
16048: LD_INT 26
16050: PUSH
16051: EMPTY
16052: LIST
16053: LIST
16054: PUSH
16055: LD_INT 30
16057: PUSH
16058: LD_INT 27
16060: PUSH
16061: EMPTY
16062: LIST
16063: LIST
16064: PUSH
16065: LD_INT 30
16067: PUSH
16068: LD_INT 28
16070: PUSH
16071: EMPTY
16072: LIST
16073: LIST
16074: PUSH
16075: EMPTY
16076: LIST
16077: LIST
16078: LIST
16079: LIST
16080: PUSH
16081: EMPTY
16082: LIST
16083: LIST
16084: PPUSH
16085: CALL_OW 69
16089: PUSH
16090: FOR_IN
16091: IFFALSE 16104
// KillUnit ( i ) ;
16093: LD_VAR 0 6
16097: PPUSH
16098: CALL_OW 66
16102: GO 16090
16104: POP
16105: POP
// medal_enabled := true ;
16106: LD_ADDR_EXP 14
16110: PUSH
16111: LD_INT 1
16113: ST_TO_ADDR
// player_res_art := false ;
16114: LD_ADDR_EXP 6
16118: PUSH
16119: LD_INT 0
16121: ST_TO_ADDR
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
16122: LD_OWVAR 2
16126: PPUSH
16127: LD_EXP 9
16131: PPUSH
16132: LD_INT 1
16134: PPUSH
16135: LD_VAR 0 7
16139: PPUSH
16140: CALL_OW 468
// wait ( time_to_reuse ) ;
16144: LD_EXP 12
16148: PPUSH
16149: CALL_OW 67
// SetArtifactUse ( your_side , art_icon , art_unit , lab ) ;
16153: LD_OWVAR 2
16157: PPUSH
16158: LD_EXP 9
16162: PPUSH
16163: LD_INT 4
16165: PPUSH
16166: LD_VAR 0 7
16170: PPUSH
16171: CALL_OW 468
// player_res_art := true ;
16175: LD_ADDR_EXP 6
16179: PUSH
16180: LD_INT 1
16182: ST_TO_ADDR
// end ; end ; end ; end ;
16183: PPOPN 8
16185: END
// on SpecResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
16186: LD_VAR 0 1
16190: PPUSH
16191: CALL_OW 255
16195: PUSH
16196: LD_OWVAR 2
16200: EQUAL
16201: IFFALSE 16238
// begin SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
16203: LD_OWVAR 2
16207: PPUSH
16208: LD_INT 1
16210: PPUSH
16211: LD_INT 0
16213: PPUSH
16214: LD_VAR 0 1
16218: PPUSH
16219: CALL_OW 468
// player_artifact_ready := true ;
16223: LD_ADDR_EXP 8
16227: PUSH
16228: LD_INT 1
16230: ST_TO_ADDR
// Hint ( ArtVulcano ) ;
16231: LD_STRING ArtVulcano
16233: PPUSH
16234: CALL_OW 339
// end ; end ;
16238: PPOPN 1
16240: END
// on SpecResearchCancel ( lab , progress ) do begin artifact_progress := progress ;
16241: LD_ADDR_EXP 7
16245: PUSH
16246: LD_VAR 0 2
16250: ST_TO_ADDR
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) ;
16251: LD_OWVAR 2
16255: PPUSH
16256: LD_INT 1
16258: PPUSH
16259: LD_INT 2
16261: PPUSH
16262: LD_VAR 0 1
16266: PPUSH
16267: CALL_OW 468
// end ; end_of_file end_of_file
16271: PPOPN 2
16273: END
// export al_commander , al_force , al_skill ; export function PrepareAlliance ; var i , filter , un , team ; begin
16274: LD_INT 0
16276: PPUSH
16277: PPUSH
16278: PPUSH
16279: PPUSH
16280: PPUSH
// al_skill := [ 7 , 6 , 5 ] [ Difficulty ] ;
16281: LD_ADDR_EXP 45
16285: PUSH
16286: LD_INT 7
16288: PUSH
16289: LD_INT 6
16291: PUSH
16292: LD_INT 5
16294: PUSH
16295: EMPTY
16296: LIST
16297: LIST
16298: LIST
16299: PUSH
16300: LD_OWVAR 67
16304: ARRAY
16305: ST_TO_ADDR
// al_force := [ ] ;
16306: LD_ADDR_EXP 44
16310: PUSH
16311: EMPTY
16312: ST_TO_ADDR
// RemoveAlliance ;
16313: CALL 17006 0 0
// ResetFog ;
16317: CALL_OW 335
// your_side := 7 ;
16321: LD_ADDR_OWVAR 2
16325: PUSH
16326: LD_INT 7
16328: ST_TO_ADDR
// uc_side := 7 ;
16329: LD_ADDR_OWVAR 20
16333: PUSH
16334: LD_INT 7
16336: ST_TO_ADDR
// hc_gallery :=  ;
16337: LD_ADDR_OWVAR 33
16341: PUSH
16342: LD_STRING 
16344: ST_TO_ADDR
// hc_name :=  ;
16345: LD_ADDR_OWVAR 26
16349: PUSH
16350: LD_STRING 
16352: ST_TO_ADDR
// hc_importance := 0 ;
16353: LD_ADDR_OWVAR 32
16357: PUSH
16358: LD_INT 0
16360: ST_TO_ADDR
// for i = 1 to 17 do
16361: LD_ADDR_VAR 0 2
16365: PUSH
16366: DOUBLE
16367: LD_INT 1
16369: DEC
16370: ST_TO_ADDR
16371: LD_INT 17
16373: PUSH
16374: FOR_TO
16375: IFFALSE 16455
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
16377: LD_ADDR_OWVAR 21
16381: PUSH
16382: LD_INT 1
16384: PUSH
16385: LD_INT 3
16387: PUSH
16388: EMPTY
16389: LIST
16390: LIST
16391: PUSH
16392: LD_INT 1
16394: PPUSH
16395: LD_INT 2
16397: PPUSH
16398: CALL_OW 12
16402: ARRAY
16403: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , al_skill ) ;
16404: LD_INT 0
16406: PPUSH
16407: LD_INT 1
16409: PPUSH
16410: LD_INT 4
16412: PPUSH
16413: CALL_OW 12
16417: PPUSH
16418: LD_EXP 45
16422: PPUSH
16423: CALL_OW 380
// un := CreateHuman ;
16427: LD_ADDR_VAR 0 4
16431: PUSH
16432: CALL_OW 44
16436: ST_TO_ADDR
// al_force := al_force ^ un ;
16437: LD_ADDR_EXP 44
16441: PUSH
16442: LD_EXP 44
16446: PUSH
16447: LD_VAR 0 4
16451: ADD
16452: ST_TO_ADDR
// end ;
16453: GO 16374
16455: POP
16456: POP
// hc_importance := 100 ;
16457: LD_ADDR_OWVAR 32
16461: PUSH
16462: LD_INT 100
16464: ST_TO_ADDR
// uc_nation := 3 ;
16465: LD_ADDR_OWVAR 21
16469: PUSH
16470: LD_INT 3
16472: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , al_skill ) ;
16473: LD_INT 1
16475: PPUSH
16476: LD_INT 1
16478: PPUSH
16479: LD_EXP 45
16483: PPUSH
16484: CALL_OW 380
// hc_gallery := skirmish ;
16488: LD_ADDR_OWVAR 33
16492: PUSH
16493: LD_STRING skirmish
16495: ST_TO_ADDR
// hc_face_number := 8 ;
16496: LD_ADDR_OWVAR 34
16500: PUSH
16501: LD_INT 8
16503: ST_TO_ADDR
// hc_name := Trofim Petya ;
16504: LD_ADDR_OWVAR 26
16508: PUSH
16509: LD_STRING Trofim Petya
16511: ST_TO_ADDR
// al_commander := CreateHuman ;
16512: LD_ADDR_EXP 43
16516: PUSH
16517: CALL_OW 44
16521: ST_TO_ADDR
// player_commander := al_commander ;
16522: LD_ADDR_EXP 11
16526: PUSH
16527: LD_EXP 43
16531: ST_TO_ADDR
// hc_importance := 0 ;
16532: LD_ADDR_OWVAR 32
16536: PUSH
16537: LD_INT 0
16539: ST_TO_ADDR
// hc_gallery :=  ;
16540: LD_ADDR_OWVAR 33
16544: PUSH
16545: LD_STRING 
16547: ST_TO_ADDR
// team := CharacterSelection ( text , [ 9 , 9 , 8 ] [ Difficulty ] , [ 9 , 9 , 8 ] [ Difficulty ] , [ sel_change_class , al_commander , sel_changeable , sel_not_hired ] ^ al_force , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , class_bazooker , class_sniper ] ) ;
16548: LD_ADDR_VAR 0 5
16552: PUSH
16553: LD_STRING text
16555: PPUSH
16556: LD_INT 9
16558: PUSH
16559: LD_INT 9
16561: PUSH
16562: LD_INT 8
16564: PUSH
16565: EMPTY
16566: LIST
16567: LIST
16568: LIST
16569: PUSH
16570: LD_OWVAR 67
16574: ARRAY
16575: PPUSH
16576: LD_INT 9
16578: PUSH
16579: LD_INT 9
16581: PUSH
16582: LD_INT 8
16584: PUSH
16585: EMPTY
16586: LIST
16587: LIST
16588: LIST
16589: PUSH
16590: LD_OWVAR 67
16594: ARRAY
16595: PPUSH
16596: LD_INT -5
16598: PUSH
16599: LD_EXP 43
16603: PUSH
16604: LD_INT -3
16606: PUSH
16607: LD_INT -2
16609: PUSH
16610: EMPTY
16611: LIST
16612: LIST
16613: LIST
16614: LIST
16615: PUSH
16616: LD_EXP 44
16620: ADD
16621: PPUSH
16622: LD_INT 1
16624: PUSH
16625: LD_INT 3
16627: PUSH
16628: LD_INT 2
16630: PUSH
16631: LD_INT 1
16633: PUSH
16634: EMPTY
16635: LIST
16636: LIST
16637: PUSH
16638: LD_INT 4
16640: PUSH
16641: LD_INT 1
16643: PUSH
16644: EMPTY
16645: LIST
16646: LIST
16647: PUSH
16648: LD_INT 9
16650: PUSH
16651: LD_INT 5
16653: PUSH
16654: EMPTY
16655: LIST
16656: LIST
16657: LIST
16658: LIST
16659: LIST
16660: LIST
16661: PPUSH
16662: CALL_OW 42
16666: ST_TO_ADDR
// team := team ^ al_commander ;
16667: LD_ADDR_VAR 0 5
16671: PUSH
16672: LD_VAR 0 5
16676: PUSH
16677: LD_EXP 43
16681: ADD
16682: ST_TO_ADDR
// for i = 1 to team do
16683: LD_ADDR_VAR 0 2
16687: PUSH
16688: DOUBLE
16689: LD_INT 1
16691: DEC
16692: ST_TO_ADDR
16693: LD_VAR 0 5
16697: PUSH
16698: FOR_TO
16699: IFFALSE 16999
// begin if GetClass ( team [ i ] ) = class_mechanic then
16701: LD_VAR 0 5
16705: PUSH
16706: LD_VAR 0 2
16710: ARRAY
16711: PPUSH
16712: CALL_OW 257
16716: PUSH
16717: LD_INT 3
16719: EQUAL
16720: IFFALSE 16976
// begin uc_nation := [ 1 , 3 ] [ rand ( 1 , 2 ) ] ;
16722: LD_ADDR_OWVAR 21
16726: PUSH
16727: LD_INT 1
16729: PUSH
16730: LD_INT 3
16732: PUSH
16733: EMPTY
16734: LIST
16735: LIST
16736: PUSH
16737: LD_INT 1
16739: PPUSH
16740: LD_INT 2
16742: PPUSH
16743: CALL_OW 12
16747: ARRAY
16748: ST_TO_ADDR
// if uc_nation = 1 then
16749: LD_OWVAR 21
16753: PUSH
16754: LD_INT 1
16756: EQUAL
16757: IFFALSE 16841
// begin vc_chassis := [ us_medium_tracked , us_heavy_tracked , us_morphling ] [ i mod 3 + 1 ] ;
16759: LD_ADDR_OWVAR 37
16763: PUSH
16764: LD_INT 3
16766: PUSH
16767: LD_INT 4
16769: PUSH
16770: LD_INT 5
16772: PUSH
16773: EMPTY
16774: LIST
16775: LIST
16776: LIST
16777: PUSH
16778: LD_VAR 0 2
16782: PUSH
16783: LD_INT 3
16785: MOD
16786: PUSH
16787: LD_INT 1
16789: PLUS
16790: ARRAY
16791: ST_TO_ADDR
// vc_engine := engine_siberite ;
16792: LD_ADDR_OWVAR 39
16796: PUSH
16797: LD_INT 3
16799: ST_TO_ADDR
// vc_control := control_manual ;
16800: LD_ADDR_OWVAR 38
16804: PUSH
16805: LD_INT 1
16807: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_laser ] [ rand ( 1 , 3 ) ] ;
16808: LD_ADDR_OWVAR 40
16812: PUSH
16813: LD_INT 4
16815: PUSH
16816: LD_INT 5
16818: PUSH
16819: LD_INT 9
16821: PUSH
16822: EMPTY
16823: LIST
16824: LIST
16825: LIST
16826: PUSH
16827: LD_INT 1
16829: PPUSH
16830: LD_INT 3
16832: PPUSH
16833: CALL_OW 12
16837: ARRAY
16838: ST_TO_ADDR
// end else
16839: GO 16917
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] ;
16841: LD_ADDR_OWVAR 37
16845: PUSH
16846: LD_INT 21
16848: PUSH
16849: LD_INT 23
16851: PUSH
16852: EMPTY
16853: LIST
16854: LIST
16855: PUSH
16856: LD_VAR 0 2
16860: PUSH
16861: LD_INT 2
16863: MOD
16864: PUSH
16865: LD_INT 1
16867: PLUS
16868: ARRAY
16869: ST_TO_ADDR
// vc_engine := engine_siberite ;
16870: LD_ADDR_OWVAR 39
16874: PUSH
16875: LD_INT 3
16877: ST_TO_ADDR
// vc_control := control_manual ;
16878: LD_ADDR_OWVAR 38
16882: PUSH
16883: LD_INT 1
16885: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_rocket_launcher , ru_gatling_gun ] [ rand ( 1 , 3 ) ] ;
16886: LD_ADDR_OWVAR 40
16890: PUSH
16891: LD_INT 44
16893: PUSH
16894: LD_INT 45
16896: PUSH
16897: LD_INT 43
16899: PUSH
16900: EMPTY
16901: LIST
16902: LIST
16903: LIST
16904: PUSH
16905: LD_INT 1
16907: PPUSH
16908: LD_INT 3
16910: PPUSH
16911: CALL_OW 12
16915: ARRAY
16916: ST_TO_ADDR
// end ; un := CreateVehicle ;
16917: LD_ADDR_VAR 0 4
16921: PUSH
16922: CALL_OW 45
16926: ST_TO_ADDR
// SetDir ( un , 5 ) ;
16927: LD_VAR 0 4
16931: PPUSH
16932: LD_INT 5
16934: PPUSH
16935: CALL_OW 233
// PlaceUnitArea ( un , south_resp , false ) ;
16939: LD_VAR 0 4
16943: PPUSH
16944: LD_INT 15
16946: PPUSH
16947: LD_INT 0
16949: PPUSH
16950: CALL_OW 49
// PlaceHumanInUnit ( team [ i ] , un ) ;
16954: LD_VAR 0 5
16958: PUSH
16959: LD_VAR 0 2
16963: ARRAY
16964: PPUSH
16965: LD_VAR 0 4
16969: PPUSH
16970: CALL_OW 52
// end else
16974: GO 16997
// PlaceUnitArea ( team [ i ] , south_resp , false ) ;
16976: LD_VAR 0 5
16980: PUSH
16981: LD_VAR 0 2
16985: ARRAY
16986: PPUSH
16987: LD_INT 15
16989: PPUSH
16990: LD_INT 0
16992: PPUSH
16993: CALL_OW 49
// end ;
16997: GO 16698
16999: POP
17000: POP
// end ;
17001: LD_VAR 0 1
17005: RET
// export function RemoveAlliance ; var i ; begin
17006: LD_INT 0
17008: PPUSH
17009: PPUSH
// DestroyUnit ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
17010: LD_INT 22
17012: PUSH
17013: LD_INT 7
17015: PUSH
17016: EMPTY
17017: LIST
17018: LIST
17019: PUSH
17020: LD_INT 30
17022: PUSH
17023: LD_INT 1
17025: PUSH
17026: EMPTY
17027: LIST
17028: LIST
17029: PUSH
17030: EMPTY
17031: LIST
17032: LIST
17033: PPUSH
17034: CALL_OW 69
17038: PUSH
17039: LD_INT 1
17041: ARRAY
17042: PPUSH
17043: CALL_OW 65
// for i in FilterAllUnits ( [ f_side , 7 ] ) do
17047: LD_ADDR_VAR 0 2
17051: PUSH
17052: LD_INT 22
17054: PUSH
17055: LD_INT 7
17057: PUSH
17058: EMPTY
17059: LIST
17060: LIST
17061: PPUSH
17062: CALL_OW 69
17066: PUSH
17067: FOR_IN
17068: IFFALSE 17081
// RemoveUnit ( i ) ;
17070: LD_VAR 0 2
17074: PPUSH
17075: CALL_OW 64
17079: GO 17067
17081: POP
17082: POP
// end ;
17083: LD_VAR 0 1
17087: RET
// export function PrepareAllianceAI ; var i , un , b ; begin
17088: LD_INT 0
17090: PPUSH
17091: PPUSH
17092: PPUSH
17093: PPUSH
// SetTech ( tech_lapser , 7 , state_researched ) ;
17094: LD_INT 31
17096: PPUSH
17097: LD_INT 7
17099: PPUSH
17100: LD_INT 2
17102: PPUSH
17103: CALL_OW 322
// SetTech ( tech_ai , 7 , state_researched ) ;
17107: LD_INT 32
17109: PPUSH
17110: LD_INT 7
17112: PPUSH
17113: LD_INT 2
17115: PPUSH
17116: CALL_OW 322
// SetTech ( tech_comp3 , 7 , state_researched ) ;
17120: LD_INT 59
17122: PPUSH
17123: LD_INT 7
17125: PPUSH
17126: LD_INT 2
17128: PPUSH
17129: CALL_OW 322
// al_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
17133: LD_ADDR_EXP 45
17137: PUSH
17138: LD_INT 5
17140: PUSH
17141: LD_INT 6
17143: PUSH
17144: LD_INT 7
17146: PUSH
17147: EMPTY
17148: LIST
17149: LIST
17150: LIST
17151: PUSH
17152: LD_OWVAR 67
17156: ARRAY
17157: ST_TO_ADDR
// al_force := [ ] ;
17158: LD_ADDR_EXP 44
17162: PUSH
17163: EMPTY
17164: ST_TO_ADDR
// al_vehs := [ ] ;
17165: LD_ADDR_EXP 50
17169: PUSH
17170: EMPTY
17171: ST_TO_ADDR
// uc_side := 7 ;
17172: LD_ADDR_OWVAR 20
17176: PUSH
17177: LD_INT 7
17179: ST_TO_ADDR
// uc_nation := 1 ;
17180: LD_ADDR_OWVAR 21
17184: PUSH
17185: LD_INT 1
17187: ST_TO_ADDR
// bc_type := b_oil_mine ;
17188: LD_ADDR_OWVAR 42
17192: PUSH
17193: LD_INT 29
17195: ST_TO_ADDR
// b := CreateBuilding ;
17196: LD_ADDR_VAR 0 4
17200: PUSH
17201: CALL_OW 46
17205: ST_TO_ADDR
// PlaceUnitXYR ( b , 61 , 7 , 0 , false ) ;
17206: LD_VAR 0 4
17210: PPUSH
17211: LD_INT 61
17213: PPUSH
17214: LD_INT 7
17216: PPUSH
17217: LD_INT 0
17219: PPUSH
17220: LD_INT 0
17222: PPUSH
17223: CALL_OW 50
// bc_type := b_siberite_mine ;
17227: LD_ADDR_OWVAR 42
17231: PUSH
17232: LD_INT 30
17234: ST_TO_ADDR
// b := CreateBuilding ;
17235: LD_ADDR_VAR 0 4
17239: PUSH
17240: CALL_OW 46
17244: ST_TO_ADDR
// PlaceUnitXYR ( b , 69 , 13 , 0 , false ) ;
17245: LD_VAR 0 4
17249: PPUSH
17250: LD_INT 69
17252: PPUSH
17253: LD_INT 13
17255: PPUSH
17256: LD_INT 0
17258: PPUSH
17259: LD_INT 0
17261: PPUSH
17262: CALL_OW 50
// hc_gallery :=  ;
17266: LD_ADDR_OWVAR 33
17270: PUSH
17271: LD_STRING 
17273: ST_TO_ADDR
// hc_name :=  ;
17274: LD_ADDR_OWVAR 26
17278: PUSH
17279: LD_STRING 
17281: ST_TO_ADDR
// hc_importance := 0 ;
17282: LD_ADDR_OWVAR 32
17286: PUSH
17287: LD_INT 0
17289: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_bunker ] ] ) do
17290: LD_ADDR_VAR 0 2
17294: PUSH
17295: LD_INT 22
17297: PUSH
17298: LD_INT 7
17300: PUSH
17301: EMPTY
17302: LIST
17303: LIST
17304: PUSH
17305: LD_INT 30
17307: PUSH
17308: LD_INT 32
17310: PUSH
17311: EMPTY
17312: LIST
17313: LIST
17314: PUSH
17315: EMPTY
17316: LIST
17317: LIST
17318: PPUSH
17319: CALL_OW 69
17323: PUSH
17324: FOR_IN
17325: IFFALSE 17395
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17327: LD_ADDR_OWVAR 21
17331: PUSH
17332: LD_INT 1
17334: PUSH
17335: LD_INT 3
17337: PUSH
17338: EMPTY
17339: LIST
17340: LIST
17341: PUSH
17342: LD_INT 1
17344: PPUSH
17345: LD_INT 2
17347: PPUSH
17348: CALL_OW 12
17352: ARRAY
17353: ST_TO_ADDR
// PrepareHuman ( false , 1 , al_skill ) ;
17354: LD_INT 0
17356: PPUSH
17357: LD_INT 1
17359: PPUSH
17360: LD_EXP 45
17364: PPUSH
17365: CALL_OW 380
// un := CreateHuman ;
17369: LD_ADDR_VAR 0 3
17373: PUSH
17374: CALL_OW 44
17378: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
17379: LD_VAR 0 3
17383: PPUSH
17384: LD_VAR 0 2
17388: PPUSH
17389: CALL_OW 52
// end ;
17393: GO 17324
17395: POP
17396: POP
// for i = 1 to 3 do
17397: LD_ADDR_VAR 0 2
17401: PUSH
17402: DOUBLE
17403: LD_INT 1
17405: DEC
17406: ST_TO_ADDR
17407: LD_INT 3
17409: PUSH
17410: FOR_TO
17411: IFFALSE 17479
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17413: LD_ADDR_OWVAR 21
17417: PUSH
17418: LD_INT 1
17420: PUSH
17421: LD_INT 3
17423: PUSH
17424: EMPTY
17425: LIST
17426: LIST
17427: PUSH
17428: LD_INT 1
17430: PPUSH
17431: LD_INT 2
17433: PPUSH
17434: CALL_OW 12
17438: ARRAY
17439: ST_TO_ADDR
// PrepareHuman ( false , 4 , al_skill ) ;
17440: LD_INT 0
17442: PPUSH
17443: LD_INT 4
17445: PPUSH
17446: LD_EXP 45
17450: PPUSH
17451: CALL_OW 380
// un := CreateHuman ;
17455: LD_ADDR_VAR 0 3
17459: PUSH
17460: CALL_OW 44
17464: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_lab1 ) ;
17465: LD_VAR 0 3
17469: PPUSH
17470: LD_INT 164
17472: PPUSH
17473: CALL_OW 52
// end ;
17477: GO 17410
17479: POP
17480: POP
// for i = 1 to 4 do
17481: LD_ADDR_VAR 0 2
17485: PUSH
17486: DOUBLE
17487: LD_INT 1
17489: DEC
17490: ST_TO_ADDR
17491: LD_INT 4
17493: PUSH
17494: FOR_TO
17495: IFFALSE 17586
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17497: LD_ADDR_OWVAR 21
17501: PUSH
17502: LD_INT 1
17504: PUSH
17505: LD_INT 3
17507: PUSH
17508: EMPTY
17509: LIST
17510: LIST
17511: PUSH
17512: LD_INT 1
17514: PPUSH
17515: LD_INT 2
17517: PPUSH
17518: CALL_OW 12
17522: ARRAY
17523: ST_TO_ADDR
// PrepareHuman ( false , [ class_sniper , class_bazooker , class_bazooker ] [ Rand ( 1 , 3 ) ] , al_skill ) ;
17524: LD_INT 0
17526: PPUSH
17527: LD_INT 5
17529: PUSH
17530: LD_INT 9
17532: PUSH
17533: LD_INT 9
17535: PUSH
17536: EMPTY
17537: LIST
17538: LIST
17539: LIST
17540: PUSH
17541: LD_INT 1
17543: PPUSH
17544: LD_INT 3
17546: PPUSH
17547: CALL_OW 12
17551: ARRAY
17552: PPUSH
17553: LD_EXP 45
17557: PPUSH
17558: CALL_OW 380
// un := CreateHuman ;
17562: LD_ADDR_VAR 0 3
17566: PUSH
17567: CALL_OW 44
17571: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_bar ) ;
17572: LD_VAR 0 3
17576: PPUSH
17577: LD_INT 173
17579: PPUSH
17580: CALL_OW 52
// end ;
17584: GO 17494
17586: POP
17587: POP
// for i = 1 to 4 do
17588: LD_ADDR_VAR 0 2
17592: PUSH
17593: DOUBLE
17594: LD_INT 1
17596: DEC
17597: ST_TO_ADDR
17598: LD_INT 4
17600: PUSH
17601: FOR_TO
17602: IFFALSE 17700
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17604: LD_ADDR_OWVAR 21
17608: PUSH
17609: LD_INT 1
17611: PUSH
17612: LD_INT 3
17614: PUSH
17615: EMPTY
17616: LIST
17617: LIST
17618: PUSH
17619: LD_INT 1
17621: PPUSH
17622: LD_INT 2
17624: PPUSH
17625: CALL_OW 12
17629: ARRAY
17630: ST_TO_ADDR
// PrepareHuman ( false , 3 , al_skill ) ;
17631: LD_INT 0
17633: PPUSH
17634: LD_INT 3
17636: PPUSH
17637: LD_EXP 45
17641: PPUSH
17642: CALL_OW 380
// un := CreateHuman ;
17646: LD_ADDR_VAR 0 3
17650: PUSH
17651: CALL_OW 44
17655: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
17656: LD_VAR 0 3
17660: PPUSH
17661: LD_INT 22
17663: PUSH
17664: LD_INT 7
17666: PUSH
17667: EMPTY
17668: LIST
17669: LIST
17670: PUSH
17671: LD_INT 30
17673: PUSH
17674: LD_INT 3
17676: PUSH
17677: EMPTY
17678: LIST
17679: LIST
17680: PUSH
17681: EMPTY
17682: LIST
17683: LIST
17684: PPUSH
17685: CALL_OW 69
17689: PUSH
17690: LD_INT 1
17692: ARRAY
17693: PPUSH
17694: CALL_OW 52
// end ;
17698: GO 17601
17700: POP
17701: POP
// for i = 1 to 4 do
17702: LD_ADDR_VAR 0 2
17706: PUSH
17707: DOUBLE
17708: LD_INT 1
17710: DEC
17711: ST_TO_ADDR
17712: LD_INT 4
17714: PUSH
17715: FOR_TO
17716: IFFALSE 17784
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17718: LD_ADDR_OWVAR 21
17722: PUSH
17723: LD_INT 1
17725: PUSH
17726: LD_INT 3
17728: PUSH
17729: EMPTY
17730: LIST
17731: LIST
17732: PUSH
17733: LD_INT 1
17735: PPUSH
17736: LD_INT 2
17738: PPUSH
17739: CALL_OW 12
17743: ARRAY
17744: ST_TO_ADDR
// PrepareHuman ( false , 2 , al_skill ) ;
17745: LD_INT 0
17747: PPUSH
17748: LD_INT 2
17750: PPUSH
17751: LD_EXP 45
17755: PPUSH
17756: CALL_OW 380
// un := CreateHuman ;
17760: LD_ADDR_VAR 0 3
17764: PUSH
17765: CALL_OW 44
17769: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_depot ) ;
17770: LD_VAR 0 3
17774: PPUSH
17775: LD_INT 162
17777: PPUSH
17778: CALL_OW 52
// end ;
17782: GO 17715
17784: POP
17785: POP
// uc_nation := 3 ;
17786: LD_ADDR_OWVAR 21
17790: PUSH
17791: LD_INT 3
17793: ST_TO_ADDR
// vc_chassis := ru_medium_wheeled ;
17794: LD_ADDR_OWVAR 37
17798: PUSH
17799: LD_INT 21
17801: ST_TO_ADDR
// vc_engine := engine_siberite ;
17802: LD_ADDR_OWVAR 39
17806: PUSH
17807: LD_INT 3
17809: ST_TO_ADDR
// vc_control := control_computer ;
17810: LD_ADDR_OWVAR 38
17814: PUSH
17815: LD_INT 3
17817: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
17818: LD_ADDR_OWVAR 40
17822: PUSH
17823: LD_INT 51
17825: ST_TO_ADDR
// PlaceUnitXY ( CreateVehicle , 49 , 13 , false ) ;
17826: CALL_OW 45
17830: PPUSH
17831: LD_INT 49
17833: PPUSH
17834: LD_INT 13
17836: PPUSH
17837: LD_INT 0
17839: PPUSH
17840: CALL_OW 48
// al_turrets := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_turret ] ] ) ;
17844: LD_ADDR_EXP 52
17848: PUSH
17849: LD_INT 22
17851: PUSH
17852: LD_INT 7
17854: PUSH
17855: EMPTY
17856: LIST
17857: LIST
17858: PUSH
17859: LD_INT 30
17861: PUSH
17862: LD_INT 33
17864: PUSH
17865: EMPTY
17866: LIST
17867: LIST
17868: PUSH
17869: EMPTY
17870: LIST
17871: LIST
17872: PPUSH
17873: CALL_OW 69
17877: ST_TO_ADDR
// for i = 1 to FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_btype , b_turret ] , [ f_bweapon , 0 ] ] ] ) do
17878: LD_ADDR_VAR 0 2
17882: PUSH
17883: DOUBLE
17884: LD_INT 1
17886: DEC
17887: ST_TO_ADDR
17888: LD_INT 22
17890: PUSH
17891: LD_INT 7
17893: PUSH
17894: EMPTY
17895: LIST
17896: LIST
17897: PUSH
17898: LD_INT 30
17900: PUSH
17901: LD_INT 33
17903: PUSH
17904: EMPTY
17905: LIST
17906: LIST
17907: PUSH
17908: LD_INT 35
17910: PUSH
17911: LD_INT 0
17913: PUSH
17914: EMPTY
17915: LIST
17916: LIST
17917: PUSH
17918: EMPTY
17919: LIST
17920: LIST
17921: LIST
17922: PUSH
17923: EMPTY
17924: LIST
17925: PPUSH
17926: CALL_OW 69
17930: PUSH
17931: FOR_TO
17932: IFFALSE 17992
// AddComPlaceWeapon ( FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_btype , b_turret ] , [ f_bweapon , 0 ] ] ] ) [ i ] , ru_time_lapser ) ;
17934: LD_INT 22
17936: PUSH
17937: LD_INT 7
17939: PUSH
17940: EMPTY
17941: LIST
17942: LIST
17943: PUSH
17944: LD_INT 30
17946: PUSH
17947: LD_INT 33
17949: PUSH
17950: EMPTY
17951: LIST
17952: LIST
17953: PUSH
17954: LD_INT 35
17956: PUSH
17957: LD_INT 0
17959: PUSH
17960: EMPTY
17961: LIST
17962: LIST
17963: PUSH
17964: EMPTY
17965: LIST
17966: LIST
17967: LIST
17968: PUSH
17969: EMPTY
17970: LIST
17971: PPUSH
17972: CALL_OW 69
17976: PUSH
17977: LD_VAR 0 2
17981: ARRAY
17982: PPUSH
17983: LD_INT 49
17985: PPUSH
17986: CALL_OW 208
17990: GO 17931
17992: POP
17993: POP
// end ;
17994: LD_VAR 0 1
17998: RET
// export al_eng , al_sold , al_mech , al_sci ; export al_vehs , al_cargo , al_turrets ; export al_dep , al_lab , al_fac ; export al_bul ; every 0 0$02 trigger your_side = 1 do var i , un , veh , cr ;
17999: LD_OWVAR 2
18003: PUSH
18004: LD_INT 1
18006: EQUAL
18007: IFFALSE 18997
18009: GO 18011
18011: DISABLE
18012: LD_INT 0
18014: PPUSH
18015: PPUSH
18016: PPUSH
18017: PPUSH
// begin enable ;
18018: ENABLE
// al_bul := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] ] ) ;
18019: LD_ADDR_EXP 56
18023: PUSH
18024: LD_INT 22
18026: PUSH
18027: LD_INT 7
18029: PUSH
18030: EMPTY
18031: LIST
18032: LIST
18033: PUSH
18034: LD_INT 21
18036: PUSH
18037: LD_INT 3
18039: PUSH
18040: EMPTY
18041: LIST
18042: LIST
18043: PUSH
18044: EMPTY
18045: LIST
18046: LIST
18047: PPUSH
18048: CALL_OW 69
18052: ST_TO_ADDR
// al_lab := [ al_lab1 , al_lab2 ] ;
18053: LD_ADDR_EXP 54
18057: PUSH
18058: LD_INT 164
18060: PUSH
18061: LD_INT 197
18063: PUSH
18064: EMPTY
18065: LIST
18066: LIST
18067: ST_TO_ADDR
// al_dep := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
18068: LD_ADDR_EXP 53
18072: PUSH
18073: LD_INT 22
18075: PUSH
18076: LD_INT 7
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: PUSH
18083: LD_INT 30
18085: PUSH
18086: LD_INT 1
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: PUSH
18093: EMPTY
18094: LIST
18095: LIST
18096: PPUSH
18097: CALL_OW 69
18101: PUSH
18102: LD_INT 1
18104: ARRAY
18105: ST_TO_ADDR
// al_fac := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
18106: LD_ADDR_EXP 55
18110: PUSH
18111: LD_INT 22
18113: PUSH
18114: LD_INT 7
18116: PUSH
18117: EMPTY
18118: LIST
18119: LIST
18120: PUSH
18121: LD_INT 30
18123: PUSH
18124: LD_INT 3
18126: PUSH
18127: EMPTY
18128: LIST
18129: LIST
18130: PUSH
18131: EMPTY
18132: LIST
18133: LIST
18134: PPUSH
18135: CALL_OW 69
18139: PUSH
18140: LD_INT 1
18142: ARRAY
18143: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) then
18144: LD_INT 22
18146: PUSH
18147: LD_INT 7
18149: PUSH
18150: EMPTY
18151: LIST
18152: LIST
18153: PUSH
18154: LD_INT 34
18156: PUSH
18157: LD_INT 51
18159: PUSH
18160: EMPTY
18161: LIST
18162: LIST
18163: PUSH
18164: EMPTY
18165: LIST
18166: LIST
18167: PPUSH
18168: CALL_OW 69
18172: IFFALSE 18212
// al_cargo := FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
18174: LD_ADDR_EXP 51
18178: PUSH
18179: LD_INT 22
18181: PUSH
18182: LD_INT 7
18184: PUSH
18185: EMPTY
18186: LIST
18187: LIST
18188: PUSH
18189: LD_INT 34
18191: PUSH
18192: LD_INT 51
18194: PUSH
18195: EMPTY
18196: LIST
18197: LIST
18198: PUSH
18199: EMPTY
18200: LIST
18201: LIST
18202: PPUSH
18203: CALL_OW 69
18207: PUSH
18208: LD_INT 1
18210: ARRAY
18211: ST_TO_ADDR
// al_sold := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , class_bazooker ] ] ) ;
18212: LD_ADDR_EXP 47
18216: PUSH
18217: LD_INT 22
18219: PUSH
18220: LD_INT 7
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: PUSH
18227: LD_INT 25
18229: PUSH
18230: LD_INT 9
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: PUSH
18237: EMPTY
18238: LIST
18239: LIST
18240: PPUSH
18241: CALL_OW 69
18245: ST_TO_ADDR
// al_eng := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 2 ] ] ) ;
18246: LD_ADDR_EXP 46
18250: PUSH
18251: LD_INT 22
18253: PUSH
18254: LD_INT 7
18256: PUSH
18257: EMPTY
18258: LIST
18259: LIST
18260: PUSH
18261: LD_INT 25
18263: PUSH
18264: LD_INT 2
18266: PUSH
18267: EMPTY
18268: LIST
18269: LIST
18270: PUSH
18271: EMPTY
18272: LIST
18273: LIST
18274: PPUSH
18275: CALL_OW 69
18279: ST_TO_ADDR
// al_mech := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 3 ] ] ) ;
18280: LD_ADDR_EXP 48
18284: PUSH
18285: LD_INT 22
18287: PUSH
18288: LD_INT 7
18290: PUSH
18291: EMPTY
18292: LIST
18293: LIST
18294: PUSH
18295: LD_INT 25
18297: PUSH
18298: LD_INT 3
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: PUSH
18305: EMPTY
18306: LIST
18307: LIST
18308: PPUSH
18309: CALL_OW 69
18313: ST_TO_ADDR
// al_sci := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 4 ] ] ) ;
18314: LD_ADDR_EXP 49
18318: PUSH
18319: LD_INT 22
18321: PUSH
18322: LD_INT 7
18324: PUSH
18325: EMPTY
18326: LIST
18327: LIST
18328: PUSH
18329: LD_INT 25
18331: PUSH
18332: LD_INT 4
18334: PUSH
18335: EMPTY
18336: LIST
18337: LIST
18338: PUSH
18339: EMPTY
18340: LIST
18341: LIST
18342: PPUSH
18343: CALL_OW 69
18347: ST_TO_ADDR
// if not HasTask ( al_cargo ) and GetCargo ( al_cargo , mat_cans ) < 100 then
18348: LD_EXP 51
18352: PPUSH
18353: CALL_OW 314
18357: NOT
18358: IFFALSE 18378
18360: PUSH
18361: LD_EXP 51
18365: PPUSH
18366: LD_INT 1
18368: PPUSH
18369: CALL_OW 289
18373: PUSH
18374: LD_INT 100
18376: LESS
18377: AND
18378: IFFALSE 18426
// begin cr := GetListOfCratesInArea ( us_crates ) ;
18380: LD_ADDR_VAR 0 4
18384: PUSH
18385: LD_INT 12
18387: PPUSH
18388: CALL_OW 435
18392: ST_TO_ADDR
// if cr then
18393: LD_VAR 0 4
18397: IFFALSE 18426
// ComCollect ( al_cargo , cr [ 1 ] , cr [ 2 ] ) ;
18399: LD_EXP 51
18403: PPUSH
18404: LD_VAR 0 4
18408: PUSH
18409: LD_INT 1
18411: ARRAY
18412: PPUSH
18413: LD_VAR 0 4
18417: PUSH
18418: LD_INT 2
18420: ARRAY
18421: PPUSH
18422: CALL_OW 117
// end ; if UnitFilter ( al_bul , [ f_not , [ f_lives , 1000 ] ] ) then
18426: LD_EXP 56
18430: PPUSH
18431: LD_INT 3
18433: PUSH
18434: LD_INT 24
18436: PUSH
18437: LD_INT 1000
18439: PUSH
18440: EMPTY
18441: LIST
18442: LIST
18443: PUSH
18444: EMPTY
18445: LIST
18446: LIST
18447: PPUSH
18448: CALL_OW 72
18452: IFFALSE 18582
// begin if al_eng then
18454: LD_EXP 46
18458: IFFALSE 18580
// for i = 1 to al_eng do
18460: LD_ADDR_VAR 0 1
18464: PUSH
18465: DOUBLE
18466: LD_INT 1
18468: DEC
18469: ST_TO_ADDR
18470: LD_EXP 46
18474: PUSH
18475: FOR_TO
18476: IFFALSE 18578
// if IsInUnit ( al_eng [ i ] ) then
18478: LD_EXP 46
18482: PUSH
18483: LD_VAR 0 1
18487: ARRAY
18488: PPUSH
18489: CALL_OW 310
18493: IFFALSE 18512
// ComExitBuilding ( al_eng [ i ] ) else
18495: LD_EXP 46
18499: PUSH
18500: LD_VAR 0 1
18504: ARRAY
18505: PPUSH
18506: CALL_OW 122
18510: GO 18576
// if not HasTask ( al_eng [ i ] ) then
18512: LD_EXP 46
18516: PUSH
18517: LD_VAR 0 1
18521: ARRAY
18522: PPUSH
18523: CALL_OW 314
18527: NOT
18528: IFFALSE 18576
// ComRepairBuilding ( al_eng [ i ] , UnitFilter ( al_bul , [ f_not , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
18530: LD_EXP 46
18534: PUSH
18535: LD_VAR 0 1
18539: ARRAY
18540: PPUSH
18541: LD_EXP 56
18545: PPUSH
18546: LD_INT 3
18548: PUSH
18549: LD_INT 24
18551: PUSH
18552: LD_INT 1000
18554: PUSH
18555: EMPTY
18556: LIST
18557: LIST
18558: PUSH
18559: EMPTY
18560: LIST
18561: LIST
18562: PPUSH
18563: CALL_OW 72
18567: PUSH
18568: LD_INT 1
18570: ARRAY
18571: PPUSH
18572: CALL_OW 130
18576: GO 18475
18578: POP
18579: POP
// end else
18580: GO 18664
// if al_eng then
18582: LD_EXP 46
18586: IFFALSE 18664
// if not IsInUnit ( al_eng [ 1 ] ) then
18588: LD_EXP 46
18592: PUSH
18593: LD_INT 1
18595: ARRAY
18596: PPUSH
18597: CALL_OW 310
18601: NOT
18602: IFFALSE 18664
// for i = 1 to al_eng do
18604: LD_ADDR_VAR 0 1
18608: PUSH
18609: DOUBLE
18610: LD_INT 1
18612: DEC
18613: ST_TO_ADDR
18614: LD_EXP 46
18618: PUSH
18619: FOR_TO
18620: IFFALSE 18662
// if not IsInUnit ( al_eng [ i ] ) then
18622: LD_EXP 46
18626: PUSH
18627: LD_VAR 0 1
18631: ARRAY
18632: PPUSH
18633: CALL_OW 310
18637: NOT
18638: IFFALSE 18660
// ComEnterUnit ( al_eng [ i ] , al_dep ) ;
18640: LD_EXP 46
18644: PUSH
18645: LD_VAR 0 1
18649: ARRAY
18650: PPUSH
18651: LD_EXP 53
18655: PPUSH
18656: CALL_OW 120
18660: GO 18619
18662: POP
18663: POP
// if al_vehs then
18664: LD_EXP 50
18668: IFFALSE 18768
// if BuildingStatus ( al_fac ) = bs_idle then
18670: LD_EXP 55
18674: PPUSH
18675: CALL_OW 461
18679: PUSH
18680: LD_INT 2
18682: EQUAL
18683: IFFALSE 18768
// begin ComConstruct ( al_fac , al_vehs [ 1 ] , al_vehs [ 2 ] , al_vehs [ 3 ] , al_vehs [ 4 ] ) ;
18685: LD_EXP 55
18689: PPUSH
18690: LD_EXP 50
18694: PUSH
18695: LD_INT 1
18697: ARRAY
18698: PPUSH
18699: LD_EXP 50
18703: PUSH
18704: LD_INT 2
18706: ARRAY
18707: PPUSH
18708: LD_EXP 50
18712: PUSH
18713: LD_INT 3
18715: ARRAY
18716: PPUSH
18717: LD_EXP 50
18721: PUSH
18722: LD_INT 4
18724: ARRAY
18725: PPUSH
18726: CALL_OW 125
// for i = 1 to 4 do
18730: LD_ADDR_VAR 0 1
18734: PUSH
18735: DOUBLE
18736: LD_INT 1
18738: DEC
18739: ST_TO_ADDR
18740: LD_INT 4
18742: PUSH
18743: FOR_TO
18744: IFFALSE 18766
// al_vehs := Delete ( al_vehs , 1 ) ;
18746: LD_ADDR_EXP 50
18750: PUSH
18751: LD_EXP 50
18755: PPUSH
18756: LD_INT 1
18758: PPUSH
18759: CALL_OW 3
18763: ST_TO_ADDR
18764: GO 18743
18766: POP
18767: POP
// end ; if al_force = 0 and tick mod 23100 = 0 then
18768: LD_EXP 44
18772: PUSH
18773: LD_INT 0
18775: EQUAL
18776: IFFALSE 18792
18778: PUSH
18779: LD_OWVAR 1
18783: PUSH
18784: LD_INT 23100
18786: MOD
18787: PUSH
18788: LD_INT 0
18790: EQUAL
18791: AND
18792: IFFALSE 18906
// begin for i = 1 to [ 6 , 7 , 8 ] [ Difficulty ] do
18794: LD_ADDR_VAR 0 1
18798: PUSH
18799: DOUBLE
18800: LD_INT 1
18802: DEC
18803: ST_TO_ADDR
18804: LD_INT 6
18806: PUSH
18807: LD_INT 7
18809: PUSH
18810: LD_INT 8
18812: PUSH
18813: EMPTY
18814: LIST
18815: LIST
18816: LIST
18817: PUSH
18818: LD_OWVAR 67
18822: ARRAY
18823: PUSH
18824: FOR_TO
18825: IFFALSE 18904
// begin al_vehs := al_vehs ^ ru_heavy_wheeled ;
18827: LD_ADDR_EXP 50
18831: PUSH
18832: LD_EXP 50
18836: PUSH
18837: LD_INT 23
18839: ADD
18840: ST_TO_ADDR
// al_vehs := al_vehs ^ engine_combustion ;
18841: LD_ADDR_EXP 50
18845: PUSH
18846: LD_EXP 50
18850: PUSH
18851: LD_INT 1
18853: ADD
18854: ST_TO_ADDR
// al_vehs := al_vehs ^ control_computer ;
18855: LD_ADDR_EXP 50
18859: PUSH
18860: LD_EXP 50
18864: PUSH
18865: LD_INT 3
18867: ADD
18868: ST_TO_ADDR
// al_vehs := al_vehs ^ [ ru_heavy_gun , ru_rocket ] [ Rand ( 1 , 2 ) ] ;
18869: LD_ADDR_EXP 50
18873: PUSH
18874: LD_EXP 50
18878: PUSH
18879: LD_INT 46
18881: PUSH
18882: LD_INT 47
18884: PUSH
18885: EMPTY
18886: LIST
18887: LIST
18888: PUSH
18889: LD_INT 1
18891: PPUSH
18892: LD_INT 2
18894: PPUSH
18895: CALL_OW 12
18899: ARRAY
18900: ADD
18901: ST_TO_ADDR
// end ;
18902: GO 18824
18904: POP
18905: POP
// end ; if FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 then
18906: LD_INT 22
18908: PUSH
18909: LD_INT 7
18911: PUSH
18912: EMPTY
18913: LIST
18914: LIST
18915: PUSH
18916: LD_INT 34
18918: PUSH
18919: LD_INT 51
18921: PUSH
18922: EMPTY
18923: LIST
18924: LIST
18925: PUSH
18926: EMPTY
18927: LIST
18928: LIST
18929: PPUSH
18930: CALL_OW 69
18934: PUSH
18935: LD_INT 0
18937: EQUAL
18938: IFFALSE 18961
// ComConstruct ( al_fac , ru_medium_wheeled , engine_combustion , control_computer , ru_cargo_bay ) ;
18940: LD_EXP 55
18944: PPUSH
18945: LD_INT 21
18947: PPUSH
18948: LD_INT 1
18950: PPUSH
18951: LD_INT 3
18953: PPUSH
18954: LD_INT 51
18956: PPUSH
18957: CALL_OW 125
// if al_force >= [ 6 , 7 , 8 ] [ Difficulty ] then
18961: LD_EXP 44
18965: PUSH
18966: LD_INT 6
18968: PUSH
18969: LD_INT 7
18971: PUSH
18972: LD_INT 8
18974: PUSH
18975: EMPTY
18976: LIST
18977: LIST
18978: LIST
18979: PUSH
18980: LD_OWVAR 67
18984: ARRAY
18985: GREATEREQUAL
18986: IFFALSE 18997
// RaiseSailEvent ( event_alliance_attack ) ;
18988: LD_EXP 23
18992: PPUSH
18993: CALL_OW 427
// end ;
18997: PPOPN 4
18999: END
// export function AllianceAttack ( ) ; var path , units ; begin
19000: LD_INT 0
19002: PPUSH
19003: PPUSH
19004: PPUSH
// units := al_force ;
19005: LD_ADDR_VAR 0 3
19009: PUSH
19010: LD_EXP 44
19014: ST_TO_ADDR
// al_force := [ ] ;
19015: LD_ADDR_EXP 44
19019: PUSH
19020: EMPTY
19021: ST_TO_ADDR
// if rand ( 0 , 1 ) then
19022: LD_INT 0
19024: PPUSH
19025: LD_INT 1
19027: PPUSH
19028: CALL_OW 12
19032: IFFALSE 19076
// path := [ [ 49 , 53 ] , [ 52 , 90 ] , [ 63 , 114 ] ] else
19034: LD_ADDR_VAR 0 2
19038: PUSH
19039: LD_INT 49
19041: PUSH
19042: LD_INT 53
19044: PUSH
19045: EMPTY
19046: LIST
19047: LIST
19048: PUSH
19049: LD_INT 52
19051: PUSH
19052: LD_INT 90
19054: PUSH
19055: EMPTY
19056: LIST
19057: LIST
19058: PUSH
19059: LD_INT 63
19061: PUSH
19062: LD_INT 114
19064: PUSH
19065: EMPTY
19066: LIST
19067: LIST
19068: PUSH
19069: EMPTY
19070: LIST
19071: LIST
19072: LIST
19073: ST_TO_ADDR
19074: GO 19105
// path := [ [ 89 , 52 ] , [ 143 , 50 ] ] ;
19076: LD_ADDR_VAR 0 2
19080: PUSH
19081: LD_INT 89
19083: PUSH
19084: LD_INT 52
19086: PUSH
19087: EMPTY
19088: LIST
19089: LIST
19090: PUSH
19091: LD_INT 143
19093: PUSH
19094: LD_INT 50
19096: PUSH
19097: EMPTY
19098: LIST
19099: LIST
19100: PUSH
19101: EMPTY
19102: LIST
19103: LIST
19104: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19105: LD_INT 35
19107: PPUSH
19108: CALL_OW 67
// until not AgressiveMove ( units , path ) ;
19112: LD_VAR 0 3
19116: PPUSH
19117: LD_VAR 0 2
19121: PPUSH
19122: CALL 82232 0 2
19126: NOT
19127: IFFALSE 19105
// end ; end_of_file
19129: LD_VAR 0 1
19133: RET
// export ar_commander , ar_force , ar_skill ; export function PrepareArabian ; var i , filter , un , team ; begin
19134: LD_INT 0
19136: PPUSH
19137: PPUSH
19138: PPUSH
19139: PPUSH
19140: PPUSH
// ar_skill := [ 9 , 8 , 7 ] [ Difficulty ] ;
19141: LD_ADDR_EXP 59
19145: PUSH
19146: LD_INT 9
19148: PUSH
19149: LD_INT 8
19151: PUSH
19152: LD_INT 7
19154: PUSH
19155: EMPTY
19156: LIST
19157: LIST
19158: LIST
19159: PUSH
19160: LD_OWVAR 67
19164: ARRAY
19165: ST_TO_ADDR
// ar_force := [ ] ;
19166: LD_ADDR_EXP 58
19170: PUSH
19171: EMPTY
19172: ST_TO_ADDR
// RemoveAlliance ;
19173: CALL 17006 0 0
// RemoveEnvironmentArea ( evn ) ;
19177: LD_INT 17
19179: PPUSH
19180: CALL_OW 355
// your_side := 2 ;
19184: LD_ADDR_OWVAR 2
19188: PUSH
19189: LD_INT 2
19191: ST_TO_ADDR
// uc_side := 2 ;
19192: LD_ADDR_OWVAR 20
19196: PUSH
19197: LD_INT 2
19199: ST_TO_ADDR
// uc_nation := nation_arabian ;
19200: LD_ADDR_OWVAR 21
19204: PUSH
19205: LD_INT 2
19207: ST_TO_ADDR
// hc_gallery :=  ;
19208: LD_ADDR_OWVAR 33
19212: PUSH
19213: LD_STRING 
19215: ST_TO_ADDR
// hc_name :=  ;
19216: LD_ADDR_OWVAR 26
19220: PUSH
19221: LD_STRING 
19223: ST_TO_ADDR
// hc_importance := 0 ;
19224: LD_ADDR_OWVAR 32
19228: PUSH
19229: LD_INT 0
19231: ST_TO_ADDR
// for i = 1 to 20 do
19232: LD_ADDR_VAR 0 2
19236: PUSH
19237: DOUBLE
19238: LD_INT 1
19240: DEC
19241: ST_TO_ADDR
19242: LD_INT 20
19244: PUSH
19245: FOR_TO
19246: IFFALSE 19311
// begin PrepareHuman ( false , Rand ( 1 , 4 ) , ar_skill ) ;
19248: LD_INT 0
19250: PPUSH
19251: LD_INT 1
19253: PPUSH
19254: LD_INT 4
19256: PPUSH
19257: CALL_OW 12
19261: PPUSH
19262: LD_EXP 59
19266: PPUSH
19267: CALL_OW 380
// un := CreateHuman ;
19271: LD_ADDR_VAR 0 4
19275: PUSH
19276: CALL_OW 44
19280: ST_TO_ADDR
// SetDir ( un , 2 ) ;
19281: LD_VAR 0 4
19285: PPUSH
19286: LD_INT 2
19288: PPUSH
19289: CALL_OW 233
// ar_force := ar_force ^ un ;
19293: LD_ADDR_EXP 58
19297: PUSH
19298: LD_EXP 58
19302: PUSH
19303: LD_VAR 0 4
19307: ADD
19308: ST_TO_ADDR
// end ;
19309: GO 19245
19311: POP
19312: POP
// hc_importance := 100 ;
19313: LD_ADDR_OWVAR 32
19317: PUSH
19318: LD_INT 100
19320: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , ar_skill ) ;
19321: LD_INT 1
19323: PPUSH
19324: LD_INT 11
19326: PPUSH
19327: LD_EXP 59
19331: PPUSH
19332: CALL_OW 380
// hc_gallery := skirmish ;
19336: LD_ADDR_OWVAR 33
19340: PUSH
19341: LD_STRING skirmish
19343: ST_TO_ADDR
// hc_face_number := 9 ;
19344: LD_ADDR_OWVAR 34
19348: PUSH
19349: LD_INT 9
19351: ST_TO_ADDR
// hc_name := Muhammad Mustaffi ;
19352: LD_ADDR_OWVAR 26
19356: PUSH
19357: LD_STRING Muhammad Mustaffi
19359: ST_TO_ADDR
// ar_commander := CreateHuman ;
19360: LD_ADDR_EXP 57
19364: PUSH
19365: CALL_OW 44
19369: ST_TO_ADDR
// SetDir ( ar_commander , 2 ) ;
19370: LD_EXP 57
19374: PPUSH
19375: LD_INT 2
19377: PPUSH
19378: CALL_OW 233
// player_commander := ar_commander ;
19382: LD_ADDR_EXP 11
19386: PUSH
19387: LD_EXP 57
19391: ST_TO_ADDR
// hc_importance := 0 ;
19392: LD_ADDR_OWVAR 32
19396: PUSH
19397: LD_INT 0
19399: ST_TO_ADDR
// hc_gallery :=  ;
19400: LD_ADDR_OWVAR 33
19404: PUSH
19405: LD_STRING 
19407: ST_TO_ADDR
// team := CharacterSelection ( text , [ 14 , 13 , 12 ] [ Difficulty ] , [ 14 , 13 , 12 ] [ Difficulty ] , [ sel_dont_change_class , ar_commander , sel_not_hired , sel_changeable , sel_change_class ] ^ ar_force , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , class_mortar ] ) ;
19408: LD_ADDR_VAR 0 5
19412: PUSH
19413: LD_STRING text
19415: PPUSH
19416: LD_INT 14
19418: PUSH
19419: LD_INT 13
19421: PUSH
19422: LD_INT 12
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: LIST
19429: PUSH
19430: LD_OWVAR 67
19434: ARRAY
19435: PPUSH
19436: LD_INT 14
19438: PUSH
19439: LD_INT 13
19441: PUSH
19442: LD_INT 12
19444: PUSH
19445: EMPTY
19446: LIST
19447: LIST
19448: LIST
19449: PUSH
19450: LD_OWVAR 67
19454: ARRAY
19455: PPUSH
19456: LD_INT -6
19458: PUSH
19459: LD_EXP 57
19463: PUSH
19464: LD_INT -2
19466: PUSH
19467: LD_INT -3
19469: PUSH
19470: LD_INT -5
19472: PUSH
19473: EMPTY
19474: LIST
19475: LIST
19476: LIST
19477: LIST
19478: LIST
19479: PUSH
19480: LD_EXP 58
19484: ADD
19485: PPUSH
19486: LD_INT 1
19488: PUSH
19489: LD_INT 3
19491: PUSH
19492: LD_INT 2
19494: PUSH
19495: LD_INT 1
19497: PUSH
19498: EMPTY
19499: LIST
19500: LIST
19501: PUSH
19502: LD_INT 4
19504: PUSH
19505: LD_INT 1
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: PUSH
19512: LD_INT 8
19514: PUSH
19515: EMPTY
19516: LIST
19517: LIST
19518: LIST
19519: LIST
19520: LIST
19521: PPUSH
19522: CALL_OW 42
19526: ST_TO_ADDR
// team := team ^ ar_commander ;
19527: LD_ADDR_VAR 0 5
19531: PUSH
19532: LD_VAR 0 5
19536: PUSH
19537: LD_EXP 57
19541: ADD
19542: ST_TO_ADDR
// for i = 1 to 4 do
19543: LD_ADDR_VAR 0 2
19547: PUSH
19548: DOUBLE
19549: LD_INT 1
19551: DEC
19552: ST_TO_ADDR
19553: LD_INT 4
19555: PUSH
19556: FOR_TO
19557: IFFALSE 19657
// begin vc_chassis := ar_medium_trike ;
19559: LD_ADDR_OWVAR 37
19563: PUSH
19564: LD_INT 13
19566: ST_TO_ADDR
// vc_engine := engine_siberite ;
19567: LD_ADDR_OWVAR 39
19571: PUSH
19572: LD_INT 3
19574: ST_TO_ADDR
// vc_control := control_manual ;
19575: LD_ADDR_OWVAR 38
19579: PUSH
19580: LD_INT 1
19582: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_cargo_bay , ar_crane , ar_gun ] [ i ] ;
19583: LD_ADDR_OWVAR 40
19587: PUSH
19588: LD_INT 27
19590: PUSH
19591: LD_INT 32
19593: PUSH
19594: LD_INT 88
19596: PUSH
19597: LD_INT 27
19599: PUSH
19600: EMPTY
19601: LIST
19602: LIST
19603: LIST
19604: LIST
19605: PUSH
19606: LD_VAR 0 2
19610: ARRAY
19611: ST_TO_ADDR
// un := CreateVehicle ;
19612: LD_ADDR_VAR 0 4
19616: PUSH
19617: CALL_OW 45
19621: ST_TO_ADDR
// SetDir ( un , 2 ) ;
19622: LD_VAR 0 4
19626: PPUSH
19627: LD_INT 2
19629: PPUSH
19630: CALL_OW 233
// PlaceUnitXYR ( un , 54 , 15 , 6 , false ) ;
19634: LD_VAR 0 4
19638: PPUSH
19639: LD_INT 54
19641: PPUSH
19642: LD_INT 15
19644: PPUSH
19645: LD_INT 6
19647: PPUSH
19648: LD_INT 0
19650: PPUSH
19651: CALL_OW 50
// end ;
19655: GO 19556
19657: POP
19658: POP
// for i = 1 to team do
19659: LD_ADDR_VAR 0 2
19663: PUSH
19664: DOUBLE
19665: LD_INT 1
19667: DEC
19668: ST_TO_ADDR
19669: LD_VAR 0 5
19673: PUSH
19674: FOR_TO
19675: IFFALSE 19772
// begin if FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) then
19677: LD_INT 22
19679: PUSH
19680: LD_INT 2
19682: PUSH
19683: EMPTY
19684: LIST
19685: LIST
19686: PUSH
19687: LD_INT 58
19689: PUSH
19690: EMPTY
19691: LIST
19692: PUSH
19693: EMPTY
19694: LIST
19695: LIST
19696: PPUSH
19697: CALL_OW 69
19701: IFFALSE 19749
// PlaceHumanInUnit ( team [ i ] , FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) [ 1 ] ) else
19703: LD_VAR 0 5
19707: PUSH
19708: LD_VAR 0 2
19712: ARRAY
19713: PPUSH
19714: LD_INT 22
19716: PUSH
19717: LD_INT 2
19719: PUSH
19720: EMPTY
19721: LIST
19722: LIST
19723: PUSH
19724: LD_INT 58
19726: PUSH
19727: EMPTY
19728: LIST
19729: PUSH
19730: EMPTY
19731: LIST
19732: LIST
19733: PPUSH
19734: CALL_OW 69
19738: PUSH
19739: LD_INT 1
19741: ARRAY
19742: PPUSH
19743: CALL_OW 52
19747: GO 19770
// PlaceUnitArea ( team [ i ] , center_resp , false ) ;
19749: LD_VAR 0 5
19753: PUSH
19754: LD_VAR 0 2
19758: ARRAY
19759: PPUSH
19760: LD_INT 16
19762: PPUSH
19763: LD_INT 0
19765: PPUSH
19766: CALL_OW 49
// end ;
19770: GO 19674
19772: POP
19773: POP
// uc_side := 0 ;
19774: LD_ADDR_OWVAR 20
19778: PUSH
19779: LD_INT 0
19781: ST_TO_ADDR
// uc_nation := 0 ;
19782: LD_ADDR_OWVAR 21
19786: PUSH
19787: LD_INT 0
19789: ST_TO_ADDR
// vc_chassis := 31 ;
19790: LD_ADDR_OWVAR 37
19794: PUSH
19795: LD_INT 31
19797: ST_TO_ADDR
// vc_control := control_rider ;
19798: LD_ADDR_OWVAR 38
19802: PUSH
19803: LD_INT 4
19805: ST_TO_ADDR
// PlaceUnitXY ( CreateVehicle , 96 , 20 , false ) ;
19806: CALL_OW 45
19810: PPUSH
19811: LD_INT 96
19813: PPUSH
19814: LD_INT 20
19816: PPUSH
19817: LD_INT 0
19819: PPUSH
19820: CALL_OW 48
// end ; end_of_file end_of_file
19824: LD_VAR 0 1
19828: RET
// export globalGameSaveCounter ; every 0 0$1 do
19829: GO 19831
19831: DISABLE
// begin enable ;
19832: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19833: LD_STRING updateTimer(
19835: PUSH
19836: LD_OWVAR 1
19840: STR
19841: PUSH
19842: LD_STRING );
19844: STR
19845: PPUSH
19846: CALL_OW 559
// end ;
19850: END
// every 0 0$1 do
19851: GO 19853
19853: DISABLE
// begin globalGameSaveCounter := 0 ;
19854: LD_ADDR_EXP 60
19858: PUSH
19859: LD_INT 0
19861: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
19862: LD_STRING setGameSaveCounter(0)
19864: PPUSH
19865: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
19869: LD_STRING initStreamRollete();
19871: PPUSH
19872: CALL_OW 559
// InitStreamMode ;
19876: CALL 21221 0 0
// DefineStreamItems ( false ) ;
19880: LD_INT 0
19882: PPUSH
19883: CALL 21685 0 1
// end ;
19887: END
// export function SOS_MapStart ( ) ; begin
19888: LD_INT 0
19890: PPUSH
// if streamModeActive then
19891: LD_EXP 61
19895: IFFALSE 19904
// DefineStreamItems ( true ) ;
19897: LD_INT 1
19899: PPUSH
19900: CALL 21685 0 1
// UpdateLuaVariables ( ) ;
19904: CALL 19921 0 0
// UpdateFactoryWaypoints ( ) ;
19908: CALL 34807 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19912: CALL 35059 0 0
// end ;
19916: LD_VAR 0 1
19920: RET
// function UpdateLuaVariables ( ) ; begin
19921: LD_INT 0
19923: PPUSH
// if globalGameSaveCounter then
19924: LD_EXP 60
19928: IFFALSE 19962
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
19930: LD_ADDR_EXP 60
19934: PUSH
19935: LD_EXP 60
19939: PPUSH
19940: CALL 80839 0 1
19944: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19945: LD_STRING setGameSaveCounter(
19947: PUSH
19948: LD_EXP 60
19952: STR
19953: PUSH
19954: LD_STRING )
19956: STR
19957: PPUSH
19958: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
19962: LD_STRING setGameDifficulty(
19964: PUSH
19965: LD_OWVAR 67
19969: STR
19970: PUSH
19971: LD_STRING )
19973: STR
19974: PPUSH
19975: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
19979: LD_STRING displayDifficulty(
19981: PUSH
19982: LD_OWVAR 67
19986: STR
19987: PUSH
19988: LD_STRING )
19990: STR
19991: PPUSH
19992: CALL_OW 559
// end ;
19996: LD_VAR 0 1
20000: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20001: LD_INT 0
20003: PPUSH
// if p2 = stream_mode then
20004: LD_VAR 0 2
20008: PUSH
20009: LD_INT 100
20011: EQUAL
20012: IFFALSE 21015
// begin if not StreamModeActive then
20014: LD_EXP 61
20018: NOT
20019: IFFALSE 20029
// StreamModeActive := true ;
20021: LD_ADDR_EXP 61
20025: PUSH
20026: LD_INT 1
20028: ST_TO_ADDR
// if p3 = 0 then
20029: LD_VAR 0 3
20033: PUSH
20034: LD_INT 0
20036: EQUAL
20037: IFFALSE 20043
// InitStreamMode ;
20039: CALL 21221 0 0
// if p3 = 1 then
20043: LD_VAR 0 3
20047: PUSH
20048: LD_INT 1
20050: EQUAL
20051: IFFALSE 20061
// sRocket := true ;
20053: LD_ADDR_EXP 66
20057: PUSH
20058: LD_INT 1
20060: ST_TO_ADDR
// if p3 = 2 then
20061: LD_VAR 0 3
20065: PUSH
20066: LD_INT 2
20068: EQUAL
20069: IFFALSE 20079
// sSpeed := true ;
20071: LD_ADDR_EXP 65
20075: PUSH
20076: LD_INT 1
20078: ST_TO_ADDR
// if p3 = 3 then
20079: LD_VAR 0 3
20083: PUSH
20084: LD_INT 3
20086: EQUAL
20087: IFFALSE 20097
// sEngine := true ;
20089: LD_ADDR_EXP 67
20093: PUSH
20094: LD_INT 1
20096: ST_TO_ADDR
// if p3 = 4 then
20097: LD_VAR 0 3
20101: PUSH
20102: LD_INT 4
20104: EQUAL
20105: IFFALSE 20115
// sSpec := true ;
20107: LD_ADDR_EXP 64
20111: PUSH
20112: LD_INT 1
20114: ST_TO_ADDR
// if p3 = 5 then
20115: LD_VAR 0 3
20119: PUSH
20120: LD_INT 5
20122: EQUAL
20123: IFFALSE 20133
// sLevel := true ;
20125: LD_ADDR_EXP 68
20129: PUSH
20130: LD_INT 1
20132: ST_TO_ADDR
// if p3 = 6 then
20133: LD_VAR 0 3
20137: PUSH
20138: LD_INT 6
20140: EQUAL
20141: IFFALSE 20151
// sArmoury := true ;
20143: LD_ADDR_EXP 69
20147: PUSH
20148: LD_INT 1
20150: ST_TO_ADDR
// if p3 = 7 then
20151: LD_VAR 0 3
20155: PUSH
20156: LD_INT 7
20158: EQUAL
20159: IFFALSE 20169
// sRadar := true ;
20161: LD_ADDR_EXP 70
20165: PUSH
20166: LD_INT 1
20168: ST_TO_ADDR
// if p3 = 8 then
20169: LD_VAR 0 3
20173: PUSH
20174: LD_INT 8
20176: EQUAL
20177: IFFALSE 20187
// sBunker := true ;
20179: LD_ADDR_EXP 71
20183: PUSH
20184: LD_INT 1
20186: ST_TO_ADDR
// if p3 = 9 then
20187: LD_VAR 0 3
20191: PUSH
20192: LD_INT 9
20194: EQUAL
20195: IFFALSE 20205
// sHack := true ;
20197: LD_ADDR_EXP 72
20201: PUSH
20202: LD_INT 1
20204: ST_TO_ADDR
// if p3 = 10 then
20205: LD_VAR 0 3
20209: PUSH
20210: LD_INT 10
20212: EQUAL
20213: IFFALSE 20223
// sFire := true ;
20215: LD_ADDR_EXP 73
20219: PUSH
20220: LD_INT 1
20222: ST_TO_ADDR
// if p3 = 11 then
20223: LD_VAR 0 3
20227: PUSH
20228: LD_INT 11
20230: EQUAL
20231: IFFALSE 20241
// sRefresh := true ;
20233: LD_ADDR_EXP 74
20237: PUSH
20238: LD_INT 1
20240: ST_TO_ADDR
// if p3 = 12 then
20241: LD_VAR 0 3
20245: PUSH
20246: LD_INT 12
20248: EQUAL
20249: IFFALSE 20259
// sExp := true ;
20251: LD_ADDR_EXP 75
20255: PUSH
20256: LD_INT 1
20258: ST_TO_ADDR
// if p3 = 13 then
20259: LD_VAR 0 3
20263: PUSH
20264: LD_INT 13
20266: EQUAL
20267: IFFALSE 20277
// sDepot := true ;
20269: LD_ADDR_EXP 76
20273: PUSH
20274: LD_INT 1
20276: ST_TO_ADDR
// if p3 = 14 then
20277: LD_VAR 0 3
20281: PUSH
20282: LD_INT 14
20284: EQUAL
20285: IFFALSE 20295
// sFlag := true ;
20287: LD_ADDR_EXP 77
20291: PUSH
20292: LD_INT 1
20294: ST_TO_ADDR
// if p3 = 15 then
20295: LD_VAR 0 3
20299: PUSH
20300: LD_INT 15
20302: EQUAL
20303: IFFALSE 20313
// sKamikadze := true ;
20305: LD_ADDR_EXP 85
20309: PUSH
20310: LD_INT 1
20312: ST_TO_ADDR
// if p3 = 16 then
20313: LD_VAR 0 3
20317: PUSH
20318: LD_INT 16
20320: EQUAL
20321: IFFALSE 20331
// sTroll := true ;
20323: LD_ADDR_EXP 86
20327: PUSH
20328: LD_INT 1
20330: ST_TO_ADDR
// if p3 = 17 then
20331: LD_VAR 0 3
20335: PUSH
20336: LD_INT 17
20338: EQUAL
20339: IFFALSE 20349
// sSlow := true ;
20341: LD_ADDR_EXP 87
20345: PUSH
20346: LD_INT 1
20348: ST_TO_ADDR
// if p3 = 18 then
20349: LD_VAR 0 3
20353: PUSH
20354: LD_INT 18
20356: EQUAL
20357: IFFALSE 20367
// sLack := true ;
20359: LD_ADDR_EXP 88
20363: PUSH
20364: LD_INT 1
20366: ST_TO_ADDR
// if p3 = 19 then
20367: LD_VAR 0 3
20371: PUSH
20372: LD_INT 19
20374: EQUAL
20375: IFFALSE 20385
// sTank := true ;
20377: LD_ADDR_EXP 90
20381: PUSH
20382: LD_INT 1
20384: ST_TO_ADDR
// if p3 = 20 then
20385: LD_VAR 0 3
20389: PUSH
20390: LD_INT 20
20392: EQUAL
20393: IFFALSE 20403
// sRemote := true ;
20395: LD_ADDR_EXP 91
20399: PUSH
20400: LD_INT 1
20402: ST_TO_ADDR
// if p3 = 21 then
20403: LD_VAR 0 3
20407: PUSH
20408: LD_INT 21
20410: EQUAL
20411: IFFALSE 20421
// sPowell := true ;
20413: LD_ADDR_EXP 92
20417: PUSH
20418: LD_INT 1
20420: ST_TO_ADDR
// if p3 = 22 then
20421: LD_VAR 0 3
20425: PUSH
20426: LD_INT 22
20428: EQUAL
20429: IFFALSE 20439
// sTeleport := true ;
20431: LD_ADDR_EXP 95
20435: PUSH
20436: LD_INT 1
20438: ST_TO_ADDR
// if p3 = 23 then
20439: LD_VAR 0 3
20443: PUSH
20444: LD_INT 23
20446: EQUAL
20447: IFFALSE 20457
// sOilTower := true ;
20449: LD_ADDR_EXP 97
20453: PUSH
20454: LD_INT 1
20456: ST_TO_ADDR
// if p3 = 24 then
20457: LD_VAR 0 3
20461: PUSH
20462: LD_INT 24
20464: EQUAL
20465: IFFALSE 20475
// sShovel := true ;
20467: LD_ADDR_EXP 98
20471: PUSH
20472: LD_INT 1
20474: ST_TO_ADDR
// if p3 = 25 then
20475: LD_VAR 0 3
20479: PUSH
20480: LD_INT 25
20482: EQUAL
20483: IFFALSE 20493
// sSheik := true ;
20485: LD_ADDR_EXP 99
20489: PUSH
20490: LD_INT 1
20492: ST_TO_ADDR
// if p3 = 26 then
20493: LD_VAR 0 3
20497: PUSH
20498: LD_INT 26
20500: EQUAL
20501: IFFALSE 20511
// sEarthquake := true ;
20503: LD_ADDR_EXP 101
20507: PUSH
20508: LD_INT 1
20510: ST_TO_ADDR
// if p3 = 27 then
20511: LD_VAR 0 3
20515: PUSH
20516: LD_INT 27
20518: EQUAL
20519: IFFALSE 20529
// sAI := true ;
20521: LD_ADDR_EXP 102
20525: PUSH
20526: LD_INT 1
20528: ST_TO_ADDR
// if p3 = 28 then
20529: LD_VAR 0 3
20533: PUSH
20534: LD_INT 28
20536: EQUAL
20537: IFFALSE 20547
// sCargo := true ;
20539: LD_ADDR_EXP 105
20543: PUSH
20544: LD_INT 1
20546: ST_TO_ADDR
// if p3 = 29 then
20547: LD_VAR 0 3
20551: PUSH
20552: LD_INT 29
20554: EQUAL
20555: IFFALSE 20565
// sDLaser := true ;
20557: LD_ADDR_EXP 106
20561: PUSH
20562: LD_INT 1
20564: ST_TO_ADDR
// if p3 = 30 then
20565: LD_VAR 0 3
20569: PUSH
20570: LD_INT 30
20572: EQUAL
20573: IFFALSE 20583
// sExchange := true ;
20575: LD_ADDR_EXP 107
20579: PUSH
20580: LD_INT 1
20582: ST_TO_ADDR
// if p3 = 31 then
20583: LD_VAR 0 3
20587: PUSH
20588: LD_INT 31
20590: EQUAL
20591: IFFALSE 20601
// sFac := true ;
20593: LD_ADDR_EXP 108
20597: PUSH
20598: LD_INT 1
20600: ST_TO_ADDR
// if p3 = 32 then
20601: LD_VAR 0 3
20605: PUSH
20606: LD_INT 32
20608: EQUAL
20609: IFFALSE 20619
// sPower := true ;
20611: LD_ADDR_EXP 109
20615: PUSH
20616: LD_INT 1
20618: ST_TO_ADDR
// if p3 = 33 then
20619: LD_VAR 0 3
20623: PUSH
20624: LD_INT 33
20626: EQUAL
20627: IFFALSE 20637
// sRandom := true ;
20629: LD_ADDR_EXP 110
20633: PUSH
20634: LD_INT 1
20636: ST_TO_ADDR
// if p3 = 34 then
20637: LD_VAR 0 3
20641: PUSH
20642: LD_INT 34
20644: EQUAL
20645: IFFALSE 20655
// sShield := true ;
20647: LD_ADDR_EXP 111
20651: PUSH
20652: LD_INT 1
20654: ST_TO_ADDR
// if p3 = 35 then
20655: LD_VAR 0 3
20659: PUSH
20660: LD_INT 35
20662: EQUAL
20663: IFFALSE 20673
// sTime := true ;
20665: LD_ADDR_EXP 112
20669: PUSH
20670: LD_INT 1
20672: ST_TO_ADDR
// if p3 = 36 then
20673: LD_VAR 0 3
20677: PUSH
20678: LD_INT 36
20680: EQUAL
20681: IFFALSE 20691
// sTools := true ;
20683: LD_ADDR_EXP 113
20687: PUSH
20688: LD_INT 1
20690: ST_TO_ADDR
// if p3 = 101 then
20691: LD_VAR 0 3
20695: PUSH
20696: LD_INT 101
20698: EQUAL
20699: IFFALSE 20709
// sSold := true ;
20701: LD_ADDR_EXP 78
20705: PUSH
20706: LD_INT 1
20708: ST_TO_ADDR
// if p3 = 102 then
20709: LD_VAR 0 3
20713: PUSH
20714: LD_INT 102
20716: EQUAL
20717: IFFALSE 20727
// sDiff := true ;
20719: LD_ADDR_EXP 79
20723: PUSH
20724: LD_INT 1
20726: ST_TO_ADDR
// if p3 = 103 then
20727: LD_VAR 0 3
20731: PUSH
20732: LD_INT 103
20734: EQUAL
20735: IFFALSE 20745
// sFog := true ;
20737: LD_ADDR_EXP 82
20741: PUSH
20742: LD_INT 1
20744: ST_TO_ADDR
// if p3 = 104 then
20745: LD_VAR 0 3
20749: PUSH
20750: LD_INT 104
20752: EQUAL
20753: IFFALSE 20763
// sReset := true ;
20755: LD_ADDR_EXP 83
20759: PUSH
20760: LD_INT 1
20762: ST_TO_ADDR
// if p3 = 105 then
20763: LD_VAR 0 3
20767: PUSH
20768: LD_INT 105
20770: EQUAL
20771: IFFALSE 20781
// sSun := true ;
20773: LD_ADDR_EXP 84
20777: PUSH
20778: LD_INT 1
20780: ST_TO_ADDR
// if p3 = 106 then
20781: LD_VAR 0 3
20785: PUSH
20786: LD_INT 106
20788: EQUAL
20789: IFFALSE 20799
// sTiger := true ;
20791: LD_ADDR_EXP 80
20795: PUSH
20796: LD_INT 1
20798: ST_TO_ADDR
// if p3 = 107 then
20799: LD_VAR 0 3
20803: PUSH
20804: LD_INT 107
20806: EQUAL
20807: IFFALSE 20817
// sBomb := true ;
20809: LD_ADDR_EXP 81
20813: PUSH
20814: LD_INT 1
20816: ST_TO_ADDR
// if p3 = 108 then
20817: LD_VAR 0 3
20821: PUSH
20822: LD_INT 108
20824: EQUAL
20825: IFFALSE 20835
// sWound := true ;
20827: LD_ADDR_EXP 89
20831: PUSH
20832: LD_INT 1
20834: ST_TO_ADDR
// if p3 = 109 then
20835: LD_VAR 0 3
20839: PUSH
20840: LD_INT 109
20842: EQUAL
20843: IFFALSE 20853
// sBetray := true ;
20845: LD_ADDR_EXP 93
20849: PUSH
20850: LD_INT 1
20852: ST_TO_ADDR
// if p3 = 110 then
20853: LD_VAR 0 3
20857: PUSH
20858: LD_INT 110
20860: EQUAL
20861: IFFALSE 20871
// sContamin := true ;
20863: LD_ADDR_EXP 94
20867: PUSH
20868: LD_INT 1
20870: ST_TO_ADDR
// if p3 = 111 then
20871: LD_VAR 0 3
20875: PUSH
20876: LD_INT 111
20878: EQUAL
20879: IFFALSE 20889
// sOil := true ;
20881: LD_ADDR_EXP 96
20885: PUSH
20886: LD_INT 1
20888: ST_TO_ADDR
// if p3 = 112 then
20889: LD_VAR 0 3
20893: PUSH
20894: LD_INT 112
20896: EQUAL
20897: IFFALSE 20907
// sStu := true ;
20899: LD_ADDR_EXP 100
20903: PUSH
20904: LD_INT 1
20906: ST_TO_ADDR
// if p3 = 113 then
20907: LD_VAR 0 3
20911: PUSH
20912: LD_INT 113
20914: EQUAL
20915: IFFALSE 20925
// sBazooka := true ;
20917: LD_ADDR_EXP 103
20921: PUSH
20922: LD_INT 1
20924: ST_TO_ADDR
// if p3 = 114 then
20925: LD_VAR 0 3
20929: PUSH
20930: LD_INT 114
20932: EQUAL
20933: IFFALSE 20943
// sMortar := true ;
20935: LD_ADDR_EXP 104
20939: PUSH
20940: LD_INT 1
20942: ST_TO_ADDR
// if p3 = 115 then
20943: LD_VAR 0 3
20947: PUSH
20948: LD_INT 115
20950: EQUAL
20951: IFFALSE 20961
// sRanger := true ;
20953: LD_ADDR_EXP 114
20957: PUSH
20958: LD_INT 1
20960: ST_TO_ADDR
// if p3 = 116 then
20961: LD_VAR 0 3
20965: PUSH
20966: LD_INT 116
20968: EQUAL
20969: IFFALSE 20979
// sComputer := true ;
20971: LD_ADDR_EXP 115
20975: PUSH
20976: LD_INT 1
20978: ST_TO_ADDR
// if p3 = 117 then
20979: LD_VAR 0 3
20983: PUSH
20984: LD_INT 117
20986: EQUAL
20987: IFFALSE 20997
// s30 := true ;
20989: LD_ADDR_EXP 116
20993: PUSH
20994: LD_INT 1
20996: ST_TO_ADDR
// if p3 = 118 then
20997: LD_VAR 0 3
21001: PUSH
21002: LD_INT 118
21004: EQUAL
21005: IFFALSE 21015
// s60 := true ;
21007: LD_ADDR_EXP 117
21011: PUSH
21012: LD_INT 1
21014: ST_TO_ADDR
// end ; if p2 = hack_mode then
21015: LD_VAR 0 2
21019: PUSH
21020: LD_INT 101
21022: EQUAL
21023: IFFALSE 21151
// begin case p3 of 1 :
21025: LD_VAR 0 3
21029: PUSH
21030: LD_INT 1
21032: DOUBLE
21033: EQUAL
21034: IFTRUE 21038
21036: GO 21045
21038: POP
// hHackUnlimitedResources ; 2 :
21039: CALL 33414 0 0
21043: GO 21151
21045: LD_INT 2
21047: DOUBLE
21048: EQUAL
21049: IFTRUE 21053
21051: GO 21060
21053: POP
// hHackSetLevel10 ; 3 :
21054: CALL 33547 0 0
21058: GO 21151
21060: LD_INT 3
21062: DOUBLE
21063: EQUAL
21064: IFTRUE 21068
21066: GO 21075
21068: POP
// hHackSetLevel10YourUnits ; 4 :
21069: CALL 33632 0 0
21073: GO 21151
21075: LD_INT 4
21077: DOUBLE
21078: EQUAL
21079: IFTRUE 21083
21081: GO 21090
21083: POP
// hHackInvincible ; 5 :
21084: CALL 34080 0 0
21088: GO 21151
21090: LD_INT 5
21092: DOUBLE
21093: EQUAL
21094: IFTRUE 21098
21096: GO 21105
21098: POP
// hHackInvisible ; 6 :
21099: CALL 34191 0 0
21103: GO 21151
21105: LD_INT 6
21107: DOUBLE
21108: EQUAL
21109: IFTRUE 21113
21111: GO 21120
21113: POP
// hHackChangeYourSide ; 7 :
21114: CALL 34248 0 0
21118: GO 21151
21120: LD_INT 7
21122: DOUBLE
21123: EQUAL
21124: IFTRUE 21128
21126: GO 21135
21128: POP
// hHackChangeUnitSide ; 8 :
21129: CALL 34290 0 0
21133: GO 21151
21135: LD_INT 8
21137: DOUBLE
21138: EQUAL
21139: IFTRUE 21143
21141: GO 21150
21143: POP
// hHackFog ; end ;
21144: CALL 34391 0 0
21148: GO 21151
21150: POP
// end ; if p2 = game_save_mode then
21151: LD_VAR 0 2
21155: PUSH
21156: LD_INT 102
21158: EQUAL
21159: IFFALSE 21216
// begin if p3 = 1 then
21161: LD_VAR 0 3
21165: PUSH
21166: LD_INT 1
21168: EQUAL
21169: IFFALSE 21181
// globalGameSaveCounter := p4 ;
21171: LD_ADDR_EXP 60
21175: PUSH
21176: LD_VAR 0 4
21180: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
21181: LD_VAR 0 3
21185: PUSH
21186: LD_INT 2
21188: EQUAL
21189: IFFALSE 21197
21191: PUSH
21192: LD_EXP 60
21196: AND
21197: IFFALSE 21216
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21199: LD_STRING setGameSaveCounter(
21201: PUSH
21202: LD_EXP 60
21206: STR
21207: PUSH
21208: LD_STRING )
21210: STR
21211: PPUSH
21212: CALL_OW 559
// end ; end ;
21216: LD_VAR 0 7
21220: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
21221: LD_INT 0
21223: PPUSH
// streamModeActive := false ;
21224: LD_ADDR_EXP 61
21228: PUSH
21229: LD_INT 0
21231: ST_TO_ADDR
// normalCounter := 36 ;
21232: LD_ADDR_EXP 62
21236: PUSH
21237: LD_INT 36
21239: ST_TO_ADDR
// hardcoreCounter := 18 ;
21240: LD_ADDR_EXP 63
21244: PUSH
21245: LD_INT 18
21247: ST_TO_ADDR
// sRocket := false ;
21248: LD_ADDR_EXP 66
21252: PUSH
21253: LD_INT 0
21255: ST_TO_ADDR
// sSpeed := false ;
21256: LD_ADDR_EXP 65
21260: PUSH
21261: LD_INT 0
21263: ST_TO_ADDR
// sEngine := false ;
21264: LD_ADDR_EXP 67
21268: PUSH
21269: LD_INT 0
21271: ST_TO_ADDR
// sSpec := false ;
21272: LD_ADDR_EXP 64
21276: PUSH
21277: LD_INT 0
21279: ST_TO_ADDR
// sLevel := false ;
21280: LD_ADDR_EXP 68
21284: PUSH
21285: LD_INT 0
21287: ST_TO_ADDR
// sArmoury := false ;
21288: LD_ADDR_EXP 69
21292: PUSH
21293: LD_INT 0
21295: ST_TO_ADDR
// sRadar := false ;
21296: LD_ADDR_EXP 70
21300: PUSH
21301: LD_INT 0
21303: ST_TO_ADDR
// sBunker := false ;
21304: LD_ADDR_EXP 71
21308: PUSH
21309: LD_INT 0
21311: ST_TO_ADDR
// sHack := false ;
21312: LD_ADDR_EXP 72
21316: PUSH
21317: LD_INT 0
21319: ST_TO_ADDR
// sFire := false ;
21320: LD_ADDR_EXP 73
21324: PUSH
21325: LD_INT 0
21327: ST_TO_ADDR
// sRefresh := false ;
21328: LD_ADDR_EXP 74
21332: PUSH
21333: LD_INT 0
21335: ST_TO_ADDR
// sExp := false ;
21336: LD_ADDR_EXP 75
21340: PUSH
21341: LD_INT 0
21343: ST_TO_ADDR
// sDepot := false ;
21344: LD_ADDR_EXP 76
21348: PUSH
21349: LD_INT 0
21351: ST_TO_ADDR
// sFlag := false ;
21352: LD_ADDR_EXP 77
21356: PUSH
21357: LD_INT 0
21359: ST_TO_ADDR
// sKamikadze := false ;
21360: LD_ADDR_EXP 85
21364: PUSH
21365: LD_INT 0
21367: ST_TO_ADDR
// sTroll := false ;
21368: LD_ADDR_EXP 86
21372: PUSH
21373: LD_INT 0
21375: ST_TO_ADDR
// sSlow := false ;
21376: LD_ADDR_EXP 87
21380: PUSH
21381: LD_INT 0
21383: ST_TO_ADDR
// sLack := false ;
21384: LD_ADDR_EXP 88
21388: PUSH
21389: LD_INT 0
21391: ST_TO_ADDR
// sTank := false ;
21392: LD_ADDR_EXP 90
21396: PUSH
21397: LD_INT 0
21399: ST_TO_ADDR
// sRemote := false ;
21400: LD_ADDR_EXP 91
21404: PUSH
21405: LD_INT 0
21407: ST_TO_ADDR
// sPowell := false ;
21408: LD_ADDR_EXP 92
21412: PUSH
21413: LD_INT 0
21415: ST_TO_ADDR
// sTeleport := false ;
21416: LD_ADDR_EXP 95
21420: PUSH
21421: LD_INT 0
21423: ST_TO_ADDR
// sOilTower := false ;
21424: LD_ADDR_EXP 97
21428: PUSH
21429: LD_INT 0
21431: ST_TO_ADDR
// sShovel := false ;
21432: LD_ADDR_EXP 98
21436: PUSH
21437: LD_INT 0
21439: ST_TO_ADDR
// sSheik := false ;
21440: LD_ADDR_EXP 99
21444: PUSH
21445: LD_INT 0
21447: ST_TO_ADDR
// sEarthquake := false ;
21448: LD_ADDR_EXP 101
21452: PUSH
21453: LD_INT 0
21455: ST_TO_ADDR
// sAI := false ;
21456: LD_ADDR_EXP 102
21460: PUSH
21461: LD_INT 0
21463: ST_TO_ADDR
// sCargo := false ;
21464: LD_ADDR_EXP 105
21468: PUSH
21469: LD_INT 0
21471: ST_TO_ADDR
// sDLaser := false ;
21472: LD_ADDR_EXP 106
21476: PUSH
21477: LD_INT 0
21479: ST_TO_ADDR
// sExchange := false ;
21480: LD_ADDR_EXP 107
21484: PUSH
21485: LD_INT 0
21487: ST_TO_ADDR
// sFac := false ;
21488: LD_ADDR_EXP 108
21492: PUSH
21493: LD_INT 0
21495: ST_TO_ADDR
// sPower := false ;
21496: LD_ADDR_EXP 109
21500: PUSH
21501: LD_INT 0
21503: ST_TO_ADDR
// sRandom := false ;
21504: LD_ADDR_EXP 110
21508: PUSH
21509: LD_INT 0
21511: ST_TO_ADDR
// sShield := false ;
21512: LD_ADDR_EXP 111
21516: PUSH
21517: LD_INT 0
21519: ST_TO_ADDR
// sTime := false ;
21520: LD_ADDR_EXP 112
21524: PUSH
21525: LD_INT 0
21527: ST_TO_ADDR
// sTools := false ;
21528: LD_ADDR_EXP 113
21532: PUSH
21533: LD_INT 0
21535: ST_TO_ADDR
// sSold := false ;
21536: LD_ADDR_EXP 78
21540: PUSH
21541: LD_INT 0
21543: ST_TO_ADDR
// sDiff := false ;
21544: LD_ADDR_EXP 79
21548: PUSH
21549: LD_INT 0
21551: ST_TO_ADDR
// sFog := false ;
21552: LD_ADDR_EXP 82
21556: PUSH
21557: LD_INT 0
21559: ST_TO_ADDR
// sReset := false ;
21560: LD_ADDR_EXP 83
21564: PUSH
21565: LD_INT 0
21567: ST_TO_ADDR
// sSun := false ;
21568: LD_ADDR_EXP 84
21572: PUSH
21573: LD_INT 0
21575: ST_TO_ADDR
// sTiger := false ;
21576: LD_ADDR_EXP 80
21580: PUSH
21581: LD_INT 0
21583: ST_TO_ADDR
// sBomb := false ;
21584: LD_ADDR_EXP 81
21588: PUSH
21589: LD_INT 0
21591: ST_TO_ADDR
// sWound := false ;
21592: LD_ADDR_EXP 89
21596: PUSH
21597: LD_INT 0
21599: ST_TO_ADDR
// sBetray := false ;
21600: LD_ADDR_EXP 93
21604: PUSH
21605: LD_INT 0
21607: ST_TO_ADDR
// sContamin := false ;
21608: LD_ADDR_EXP 94
21612: PUSH
21613: LD_INT 0
21615: ST_TO_ADDR
// sOil := false ;
21616: LD_ADDR_EXP 96
21620: PUSH
21621: LD_INT 0
21623: ST_TO_ADDR
// sStu := false ;
21624: LD_ADDR_EXP 100
21628: PUSH
21629: LD_INT 0
21631: ST_TO_ADDR
// sBazooka := false ;
21632: LD_ADDR_EXP 103
21636: PUSH
21637: LD_INT 0
21639: ST_TO_ADDR
// sMortar := false ;
21640: LD_ADDR_EXP 104
21644: PUSH
21645: LD_INT 0
21647: ST_TO_ADDR
// sRanger := false ;
21648: LD_ADDR_EXP 114
21652: PUSH
21653: LD_INT 0
21655: ST_TO_ADDR
// sComputer := false ;
21656: LD_ADDR_EXP 115
21660: PUSH
21661: LD_INT 0
21663: ST_TO_ADDR
// s30 := false ;
21664: LD_ADDR_EXP 116
21668: PUSH
21669: LD_INT 0
21671: ST_TO_ADDR
// s60 := false ;
21672: LD_ADDR_EXP 117
21676: PUSH
21677: LD_INT 0
21679: ST_TO_ADDR
// end ;
21680: LD_VAR 0 1
21684: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21685: LD_INT 0
21687: PPUSH
21688: PPUSH
21689: PPUSH
21690: PPUSH
21691: PPUSH
21692: PPUSH
21693: PPUSH
// result := [ ] ;
21694: LD_ADDR_VAR 0 2
21698: PUSH
21699: EMPTY
21700: ST_TO_ADDR
// if campaign_id = 1 then
21701: LD_OWVAR 69
21705: PUSH
21706: LD_INT 1
21708: EQUAL
21709: IFFALSE 24875
// begin case mission_number of 1 :
21711: LD_OWVAR 70
21715: PUSH
21716: LD_INT 1
21718: DOUBLE
21719: EQUAL
21720: IFTRUE 21724
21722: GO 21800
21724: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21725: LD_ADDR_VAR 0 2
21729: PUSH
21730: LD_INT 2
21732: PUSH
21733: LD_INT 4
21735: PUSH
21736: LD_INT 11
21738: PUSH
21739: LD_INT 12
21741: PUSH
21742: LD_INT 15
21744: PUSH
21745: LD_INT 16
21747: PUSH
21748: LD_INT 22
21750: PUSH
21751: LD_INT 23
21753: PUSH
21754: LD_INT 26
21756: PUSH
21757: EMPTY
21758: LIST
21759: LIST
21760: LIST
21761: LIST
21762: LIST
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: PUSH
21768: LD_INT 101
21770: PUSH
21771: LD_INT 102
21773: PUSH
21774: LD_INT 106
21776: PUSH
21777: LD_INT 116
21779: PUSH
21780: LD_INT 117
21782: PUSH
21783: LD_INT 118
21785: PUSH
21786: EMPTY
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: PUSH
21794: EMPTY
21795: LIST
21796: LIST
21797: ST_TO_ADDR
21798: GO 24873
21800: LD_INT 2
21802: DOUBLE
21803: EQUAL
21804: IFTRUE 21808
21806: GO 21892
21808: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21809: LD_ADDR_VAR 0 2
21813: PUSH
21814: LD_INT 2
21816: PUSH
21817: LD_INT 4
21819: PUSH
21820: LD_INT 11
21822: PUSH
21823: LD_INT 12
21825: PUSH
21826: LD_INT 15
21828: PUSH
21829: LD_INT 16
21831: PUSH
21832: LD_INT 22
21834: PUSH
21835: LD_INT 23
21837: PUSH
21838: LD_INT 26
21840: PUSH
21841: EMPTY
21842: LIST
21843: LIST
21844: LIST
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: PUSH
21852: LD_INT 101
21854: PUSH
21855: LD_INT 102
21857: PUSH
21858: LD_INT 105
21860: PUSH
21861: LD_INT 106
21863: PUSH
21864: LD_INT 108
21866: PUSH
21867: LD_INT 116
21869: PUSH
21870: LD_INT 117
21872: PUSH
21873: LD_INT 118
21875: PUSH
21876: EMPTY
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: PUSH
21886: EMPTY
21887: LIST
21888: LIST
21889: ST_TO_ADDR
21890: GO 24873
21892: LD_INT 3
21894: DOUBLE
21895: EQUAL
21896: IFTRUE 21900
21898: GO 21988
21900: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21901: LD_ADDR_VAR 0 2
21905: PUSH
21906: LD_INT 2
21908: PUSH
21909: LD_INT 4
21911: PUSH
21912: LD_INT 5
21914: PUSH
21915: LD_INT 11
21917: PUSH
21918: LD_INT 12
21920: PUSH
21921: LD_INT 15
21923: PUSH
21924: LD_INT 16
21926: PUSH
21927: LD_INT 22
21929: PUSH
21930: LD_INT 26
21932: PUSH
21933: LD_INT 36
21935: PUSH
21936: EMPTY
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: PUSH
21948: LD_INT 101
21950: PUSH
21951: LD_INT 102
21953: PUSH
21954: LD_INT 105
21956: PUSH
21957: LD_INT 106
21959: PUSH
21960: LD_INT 108
21962: PUSH
21963: LD_INT 116
21965: PUSH
21966: LD_INT 117
21968: PUSH
21969: LD_INT 118
21971: PUSH
21972: EMPTY
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: PUSH
21982: EMPTY
21983: LIST
21984: LIST
21985: ST_TO_ADDR
21986: GO 24873
21988: LD_INT 4
21990: DOUBLE
21991: EQUAL
21992: IFTRUE 21996
21994: GO 22092
21996: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21997: LD_ADDR_VAR 0 2
22001: PUSH
22002: LD_INT 2
22004: PUSH
22005: LD_INT 4
22007: PUSH
22008: LD_INT 5
22010: PUSH
22011: LD_INT 8
22013: PUSH
22014: LD_INT 11
22016: PUSH
22017: LD_INT 12
22019: PUSH
22020: LD_INT 15
22022: PUSH
22023: LD_INT 16
22025: PUSH
22026: LD_INT 22
22028: PUSH
22029: LD_INT 23
22031: PUSH
22032: LD_INT 26
22034: PUSH
22035: LD_INT 36
22037: PUSH
22038: EMPTY
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: PUSH
22052: LD_INT 101
22054: PUSH
22055: LD_INT 102
22057: PUSH
22058: LD_INT 105
22060: PUSH
22061: LD_INT 106
22063: PUSH
22064: LD_INT 108
22066: PUSH
22067: LD_INT 116
22069: PUSH
22070: LD_INT 117
22072: PUSH
22073: LD_INT 118
22075: PUSH
22076: EMPTY
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: PUSH
22086: EMPTY
22087: LIST
22088: LIST
22089: ST_TO_ADDR
22090: GO 24873
22092: LD_INT 5
22094: DOUBLE
22095: EQUAL
22096: IFTRUE 22100
22098: GO 22212
22100: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
22101: LD_ADDR_VAR 0 2
22105: PUSH
22106: LD_INT 2
22108: PUSH
22109: LD_INT 4
22111: PUSH
22112: LD_INT 5
22114: PUSH
22115: LD_INT 6
22117: PUSH
22118: LD_INT 8
22120: PUSH
22121: LD_INT 11
22123: PUSH
22124: LD_INT 12
22126: PUSH
22127: LD_INT 15
22129: PUSH
22130: LD_INT 16
22132: PUSH
22133: LD_INT 22
22135: PUSH
22136: LD_INT 23
22138: PUSH
22139: LD_INT 25
22141: PUSH
22142: LD_INT 26
22144: PUSH
22145: LD_INT 36
22147: PUSH
22148: EMPTY
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: PUSH
22164: LD_INT 101
22166: PUSH
22167: LD_INT 102
22169: PUSH
22170: LD_INT 105
22172: PUSH
22173: LD_INT 106
22175: PUSH
22176: LD_INT 108
22178: PUSH
22179: LD_INT 109
22181: PUSH
22182: LD_INT 112
22184: PUSH
22185: LD_INT 116
22187: PUSH
22188: LD_INT 117
22190: PUSH
22191: LD_INT 118
22193: PUSH
22194: EMPTY
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: ST_TO_ADDR
22210: GO 24873
22212: LD_INT 6
22214: DOUBLE
22215: EQUAL
22216: IFTRUE 22220
22218: GO 22352
22220: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22221: LD_ADDR_VAR 0 2
22225: PUSH
22226: LD_INT 2
22228: PUSH
22229: LD_INT 4
22231: PUSH
22232: LD_INT 5
22234: PUSH
22235: LD_INT 6
22237: PUSH
22238: LD_INT 8
22240: PUSH
22241: LD_INT 11
22243: PUSH
22244: LD_INT 12
22246: PUSH
22247: LD_INT 15
22249: PUSH
22250: LD_INT 16
22252: PUSH
22253: LD_INT 20
22255: PUSH
22256: LD_INT 21
22258: PUSH
22259: LD_INT 22
22261: PUSH
22262: LD_INT 23
22264: PUSH
22265: LD_INT 25
22267: PUSH
22268: LD_INT 26
22270: PUSH
22271: LD_INT 30
22273: PUSH
22274: LD_INT 31
22276: PUSH
22277: LD_INT 32
22279: PUSH
22280: LD_INT 36
22282: PUSH
22283: EMPTY
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: PUSH
22304: LD_INT 101
22306: PUSH
22307: LD_INT 102
22309: PUSH
22310: LD_INT 105
22312: PUSH
22313: LD_INT 106
22315: PUSH
22316: LD_INT 108
22318: PUSH
22319: LD_INT 109
22321: PUSH
22322: LD_INT 112
22324: PUSH
22325: LD_INT 116
22327: PUSH
22328: LD_INT 117
22330: PUSH
22331: LD_INT 118
22333: PUSH
22334: EMPTY
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: PUSH
22346: EMPTY
22347: LIST
22348: LIST
22349: ST_TO_ADDR
22350: GO 24873
22352: LD_INT 7
22354: DOUBLE
22355: EQUAL
22356: IFTRUE 22360
22358: GO 22472
22360: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22361: LD_ADDR_VAR 0 2
22365: PUSH
22366: LD_INT 2
22368: PUSH
22369: LD_INT 4
22371: PUSH
22372: LD_INT 5
22374: PUSH
22375: LD_INT 7
22377: PUSH
22378: LD_INT 11
22380: PUSH
22381: LD_INT 12
22383: PUSH
22384: LD_INT 15
22386: PUSH
22387: LD_INT 16
22389: PUSH
22390: LD_INT 20
22392: PUSH
22393: LD_INT 21
22395: PUSH
22396: LD_INT 22
22398: PUSH
22399: LD_INT 23
22401: PUSH
22402: LD_INT 25
22404: PUSH
22405: LD_INT 26
22407: PUSH
22408: EMPTY
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: PUSH
22424: LD_INT 101
22426: PUSH
22427: LD_INT 102
22429: PUSH
22430: LD_INT 103
22432: PUSH
22433: LD_INT 105
22435: PUSH
22436: LD_INT 106
22438: PUSH
22439: LD_INT 108
22441: PUSH
22442: LD_INT 112
22444: PUSH
22445: LD_INT 116
22447: PUSH
22448: LD_INT 117
22450: PUSH
22451: LD_INT 118
22453: PUSH
22454: EMPTY
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: PUSH
22466: EMPTY
22467: LIST
22468: LIST
22469: ST_TO_ADDR
22470: GO 24873
22472: LD_INT 8
22474: DOUBLE
22475: EQUAL
22476: IFTRUE 22480
22478: GO 22620
22480: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22481: LD_ADDR_VAR 0 2
22485: PUSH
22486: LD_INT 2
22488: PUSH
22489: LD_INT 4
22491: PUSH
22492: LD_INT 5
22494: PUSH
22495: LD_INT 6
22497: PUSH
22498: LD_INT 7
22500: PUSH
22501: LD_INT 8
22503: PUSH
22504: LD_INT 11
22506: PUSH
22507: LD_INT 12
22509: PUSH
22510: LD_INT 15
22512: PUSH
22513: LD_INT 16
22515: PUSH
22516: LD_INT 20
22518: PUSH
22519: LD_INT 21
22521: PUSH
22522: LD_INT 22
22524: PUSH
22525: LD_INT 23
22527: PUSH
22528: LD_INT 25
22530: PUSH
22531: LD_INT 26
22533: PUSH
22534: LD_INT 30
22536: PUSH
22537: LD_INT 31
22539: PUSH
22540: LD_INT 32
22542: PUSH
22543: LD_INT 36
22545: PUSH
22546: EMPTY
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: PUSH
22568: LD_INT 101
22570: PUSH
22571: LD_INT 102
22573: PUSH
22574: LD_INT 103
22576: PUSH
22577: LD_INT 105
22579: PUSH
22580: LD_INT 106
22582: PUSH
22583: LD_INT 108
22585: PUSH
22586: LD_INT 109
22588: PUSH
22589: LD_INT 112
22591: PUSH
22592: LD_INT 116
22594: PUSH
22595: LD_INT 117
22597: PUSH
22598: LD_INT 118
22600: PUSH
22601: EMPTY
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: PUSH
22614: EMPTY
22615: LIST
22616: LIST
22617: ST_TO_ADDR
22618: GO 24873
22620: LD_INT 9
22622: DOUBLE
22623: EQUAL
22624: IFTRUE 22628
22626: GO 22776
22628: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22629: LD_ADDR_VAR 0 2
22633: PUSH
22634: LD_INT 2
22636: PUSH
22637: LD_INT 4
22639: PUSH
22640: LD_INT 5
22642: PUSH
22643: LD_INT 6
22645: PUSH
22646: LD_INT 7
22648: PUSH
22649: LD_INT 8
22651: PUSH
22652: LD_INT 11
22654: PUSH
22655: LD_INT 12
22657: PUSH
22658: LD_INT 15
22660: PUSH
22661: LD_INT 16
22663: PUSH
22664: LD_INT 20
22666: PUSH
22667: LD_INT 21
22669: PUSH
22670: LD_INT 22
22672: PUSH
22673: LD_INT 23
22675: PUSH
22676: LD_INT 25
22678: PUSH
22679: LD_INT 26
22681: PUSH
22682: LD_INT 28
22684: PUSH
22685: LD_INT 30
22687: PUSH
22688: LD_INT 31
22690: PUSH
22691: LD_INT 32
22693: PUSH
22694: LD_INT 36
22696: PUSH
22697: EMPTY
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: PUSH
22720: LD_INT 101
22722: PUSH
22723: LD_INT 102
22725: PUSH
22726: LD_INT 103
22728: PUSH
22729: LD_INT 105
22731: PUSH
22732: LD_INT 106
22734: PUSH
22735: LD_INT 108
22737: PUSH
22738: LD_INT 109
22740: PUSH
22741: LD_INT 112
22743: PUSH
22744: LD_INT 114
22746: PUSH
22747: LD_INT 116
22749: PUSH
22750: LD_INT 117
22752: PUSH
22753: LD_INT 118
22755: PUSH
22756: EMPTY
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: PUSH
22770: EMPTY
22771: LIST
22772: LIST
22773: ST_TO_ADDR
22774: GO 24873
22776: LD_INT 10
22778: DOUBLE
22779: EQUAL
22780: IFTRUE 22784
22782: GO 22980
22784: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22785: LD_ADDR_VAR 0 2
22789: PUSH
22790: LD_INT 2
22792: PUSH
22793: LD_INT 4
22795: PUSH
22796: LD_INT 5
22798: PUSH
22799: LD_INT 6
22801: PUSH
22802: LD_INT 7
22804: PUSH
22805: LD_INT 8
22807: PUSH
22808: LD_INT 9
22810: PUSH
22811: LD_INT 10
22813: PUSH
22814: LD_INT 11
22816: PUSH
22817: LD_INT 12
22819: PUSH
22820: LD_INT 13
22822: PUSH
22823: LD_INT 14
22825: PUSH
22826: LD_INT 15
22828: PUSH
22829: LD_INT 16
22831: PUSH
22832: LD_INT 17
22834: PUSH
22835: LD_INT 18
22837: PUSH
22838: LD_INT 19
22840: PUSH
22841: LD_INT 20
22843: PUSH
22844: LD_INT 21
22846: PUSH
22847: LD_INT 22
22849: PUSH
22850: LD_INT 23
22852: PUSH
22853: LD_INT 24
22855: PUSH
22856: LD_INT 25
22858: PUSH
22859: LD_INT 26
22861: PUSH
22862: LD_INT 28
22864: PUSH
22865: LD_INT 30
22867: PUSH
22868: LD_INT 31
22870: PUSH
22871: LD_INT 32
22873: PUSH
22874: LD_INT 36
22876: PUSH
22877: EMPTY
22878: LIST
22879: LIST
22880: LIST
22881: LIST
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: PUSH
22908: LD_INT 101
22910: PUSH
22911: LD_INT 102
22913: PUSH
22914: LD_INT 103
22916: PUSH
22917: LD_INT 104
22919: PUSH
22920: LD_INT 105
22922: PUSH
22923: LD_INT 106
22925: PUSH
22926: LD_INT 107
22928: PUSH
22929: LD_INT 108
22931: PUSH
22932: LD_INT 109
22934: PUSH
22935: LD_INT 110
22937: PUSH
22938: LD_INT 111
22940: PUSH
22941: LD_INT 112
22943: PUSH
22944: LD_INT 114
22946: PUSH
22947: LD_INT 116
22949: PUSH
22950: LD_INT 117
22952: PUSH
22953: LD_INT 118
22955: PUSH
22956: EMPTY
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: ST_TO_ADDR
22978: GO 24873
22980: LD_INT 11
22982: DOUBLE
22983: EQUAL
22984: IFTRUE 22988
22986: GO 23192
22988: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22989: LD_ADDR_VAR 0 2
22993: PUSH
22994: LD_INT 2
22996: PUSH
22997: LD_INT 3
22999: PUSH
23000: LD_INT 4
23002: PUSH
23003: LD_INT 5
23005: PUSH
23006: LD_INT 6
23008: PUSH
23009: LD_INT 7
23011: PUSH
23012: LD_INT 8
23014: PUSH
23015: LD_INT 9
23017: PUSH
23018: LD_INT 10
23020: PUSH
23021: LD_INT 11
23023: PUSH
23024: LD_INT 12
23026: PUSH
23027: LD_INT 13
23029: PUSH
23030: LD_INT 14
23032: PUSH
23033: LD_INT 15
23035: PUSH
23036: LD_INT 16
23038: PUSH
23039: LD_INT 17
23041: PUSH
23042: LD_INT 18
23044: PUSH
23045: LD_INT 19
23047: PUSH
23048: LD_INT 20
23050: PUSH
23051: LD_INT 21
23053: PUSH
23054: LD_INT 22
23056: PUSH
23057: LD_INT 23
23059: PUSH
23060: LD_INT 24
23062: PUSH
23063: LD_INT 25
23065: PUSH
23066: LD_INT 26
23068: PUSH
23069: LD_INT 28
23071: PUSH
23072: LD_INT 30
23074: PUSH
23075: LD_INT 31
23077: PUSH
23078: LD_INT 32
23080: PUSH
23081: LD_INT 34
23083: PUSH
23084: LD_INT 36
23086: PUSH
23087: EMPTY
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: LIST
23112: LIST
23113: LIST
23114: LIST
23115: LIST
23116: LIST
23117: LIST
23118: LIST
23119: PUSH
23120: LD_INT 101
23122: PUSH
23123: LD_INT 102
23125: PUSH
23126: LD_INT 103
23128: PUSH
23129: LD_INT 104
23131: PUSH
23132: LD_INT 105
23134: PUSH
23135: LD_INT 106
23137: PUSH
23138: LD_INT 107
23140: PUSH
23141: LD_INT 108
23143: PUSH
23144: LD_INT 109
23146: PUSH
23147: LD_INT 110
23149: PUSH
23150: LD_INT 111
23152: PUSH
23153: LD_INT 112
23155: PUSH
23156: LD_INT 114
23158: PUSH
23159: LD_INT 116
23161: PUSH
23162: LD_INT 117
23164: PUSH
23165: LD_INT 118
23167: PUSH
23168: EMPTY
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: PUSH
23186: EMPTY
23187: LIST
23188: LIST
23189: ST_TO_ADDR
23190: GO 24873
23192: LD_INT 12
23194: DOUBLE
23195: EQUAL
23196: IFTRUE 23200
23198: GO 23420
23200: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23201: LD_ADDR_VAR 0 2
23205: PUSH
23206: LD_INT 1
23208: PUSH
23209: LD_INT 2
23211: PUSH
23212: LD_INT 3
23214: PUSH
23215: LD_INT 4
23217: PUSH
23218: LD_INT 5
23220: PUSH
23221: LD_INT 6
23223: PUSH
23224: LD_INT 7
23226: PUSH
23227: LD_INT 8
23229: PUSH
23230: LD_INT 9
23232: PUSH
23233: LD_INT 10
23235: PUSH
23236: LD_INT 11
23238: PUSH
23239: LD_INT 12
23241: PUSH
23242: LD_INT 13
23244: PUSH
23245: LD_INT 14
23247: PUSH
23248: LD_INT 15
23250: PUSH
23251: LD_INT 16
23253: PUSH
23254: LD_INT 17
23256: PUSH
23257: LD_INT 18
23259: PUSH
23260: LD_INT 19
23262: PUSH
23263: LD_INT 20
23265: PUSH
23266: LD_INT 21
23268: PUSH
23269: LD_INT 22
23271: PUSH
23272: LD_INT 23
23274: PUSH
23275: LD_INT 24
23277: PUSH
23278: LD_INT 25
23280: PUSH
23281: LD_INT 26
23283: PUSH
23284: LD_INT 27
23286: PUSH
23287: LD_INT 28
23289: PUSH
23290: LD_INT 30
23292: PUSH
23293: LD_INT 31
23295: PUSH
23296: LD_INT 32
23298: PUSH
23299: LD_INT 33
23301: PUSH
23302: LD_INT 34
23304: PUSH
23305: LD_INT 36
23307: PUSH
23308: EMPTY
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: PUSH
23344: LD_INT 101
23346: PUSH
23347: LD_INT 102
23349: PUSH
23350: LD_INT 103
23352: PUSH
23353: LD_INT 104
23355: PUSH
23356: LD_INT 105
23358: PUSH
23359: LD_INT 106
23361: PUSH
23362: LD_INT 107
23364: PUSH
23365: LD_INT 108
23367: PUSH
23368: LD_INT 109
23370: PUSH
23371: LD_INT 110
23373: PUSH
23374: LD_INT 111
23376: PUSH
23377: LD_INT 112
23379: PUSH
23380: LD_INT 113
23382: PUSH
23383: LD_INT 114
23385: PUSH
23386: LD_INT 116
23388: PUSH
23389: LD_INT 117
23391: PUSH
23392: LD_INT 118
23394: PUSH
23395: EMPTY
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: PUSH
23414: EMPTY
23415: LIST
23416: LIST
23417: ST_TO_ADDR
23418: GO 24873
23420: LD_INT 13
23422: DOUBLE
23423: EQUAL
23424: IFTRUE 23428
23426: GO 23636
23428: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23429: LD_ADDR_VAR 0 2
23433: PUSH
23434: LD_INT 1
23436: PUSH
23437: LD_INT 2
23439: PUSH
23440: LD_INT 3
23442: PUSH
23443: LD_INT 4
23445: PUSH
23446: LD_INT 5
23448: PUSH
23449: LD_INT 8
23451: PUSH
23452: LD_INT 9
23454: PUSH
23455: LD_INT 10
23457: PUSH
23458: LD_INT 11
23460: PUSH
23461: LD_INT 12
23463: PUSH
23464: LD_INT 14
23466: PUSH
23467: LD_INT 15
23469: PUSH
23470: LD_INT 16
23472: PUSH
23473: LD_INT 17
23475: PUSH
23476: LD_INT 18
23478: PUSH
23479: LD_INT 19
23481: PUSH
23482: LD_INT 20
23484: PUSH
23485: LD_INT 21
23487: PUSH
23488: LD_INT 22
23490: PUSH
23491: LD_INT 23
23493: PUSH
23494: LD_INT 24
23496: PUSH
23497: LD_INT 25
23499: PUSH
23500: LD_INT 26
23502: PUSH
23503: LD_INT 27
23505: PUSH
23506: LD_INT 28
23508: PUSH
23509: LD_INT 30
23511: PUSH
23512: LD_INT 31
23514: PUSH
23515: LD_INT 32
23517: PUSH
23518: LD_INT 33
23520: PUSH
23521: LD_INT 34
23523: PUSH
23524: LD_INT 36
23526: PUSH
23527: EMPTY
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: PUSH
23560: LD_INT 101
23562: PUSH
23563: LD_INT 102
23565: PUSH
23566: LD_INT 103
23568: PUSH
23569: LD_INT 104
23571: PUSH
23572: LD_INT 105
23574: PUSH
23575: LD_INT 106
23577: PUSH
23578: LD_INT 107
23580: PUSH
23581: LD_INT 108
23583: PUSH
23584: LD_INT 109
23586: PUSH
23587: LD_INT 110
23589: PUSH
23590: LD_INT 111
23592: PUSH
23593: LD_INT 112
23595: PUSH
23596: LD_INT 113
23598: PUSH
23599: LD_INT 114
23601: PUSH
23602: LD_INT 116
23604: PUSH
23605: LD_INT 117
23607: PUSH
23608: LD_INT 118
23610: PUSH
23611: EMPTY
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: PUSH
23630: EMPTY
23631: LIST
23632: LIST
23633: ST_TO_ADDR
23634: GO 24873
23636: LD_INT 14
23638: DOUBLE
23639: EQUAL
23640: IFTRUE 23644
23642: GO 23868
23644: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23645: LD_ADDR_VAR 0 2
23649: PUSH
23650: LD_INT 1
23652: PUSH
23653: LD_INT 2
23655: PUSH
23656: LD_INT 3
23658: PUSH
23659: LD_INT 4
23661: PUSH
23662: LD_INT 5
23664: PUSH
23665: LD_INT 6
23667: PUSH
23668: LD_INT 7
23670: PUSH
23671: LD_INT 8
23673: PUSH
23674: LD_INT 9
23676: PUSH
23677: LD_INT 10
23679: PUSH
23680: LD_INT 11
23682: PUSH
23683: LD_INT 12
23685: PUSH
23686: LD_INT 13
23688: PUSH
23689: LD_INT 14
23691: PUSH
23692: LD_INT 15
23694: PUSH
23695: LD_INT 16
23697: PUSH
23698: LD_INT 17
23700: PUSH
23701: LD_INT 18
23703: PUSH
23704: LD_INT 19
23706: PUSH
23707: LD_INT 20
23709: PUSH
23710: LD_INT 21
23712: PUSH
23713: LD_INT 22
23715: PUSH
23716: LD_INT 23
23718: PUSH
23719: LD_INT 24
23721: PUSH
23722: LD_INT 25
23724: PUSH
23725: LD_INT 26
23727: PUSH
23728: LD_INT 27
23730: PUSH
23731: LD_INT 28
23733: PUSH
23734: LD_INT 29
23736: PUSH
23737: LD_INT 30
23739: PUSH
23740: LD_INT 31
23742: PUSH
23743: LD_INT 32
23745: PUSH
23746: LD_INT 33
23748: PUSH
23749: LD_INT 34
23751: PUSH
23752: LD_INT 36
23754: PUSH
23755: EMPTY
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: LIST
23763: LIST
23764: LIST
23765: LIST
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: PUSH
23792: LD_INT 101
23794: PUSH
23795: LD_INT 102
23797: PUSH
23798: LD_INT 103
23800: PUSH
23801: LD_INT 104
23803: PUSH
23804: LD_INT 105
23806: PUSH
23807: LD_INT 106
23809: PUSH
23810: LD_INT 107
23812: PUSH
23813: LD_INT 108
23815: PUSH
23816: LD_INT 109
23818: PUSH
23819: LD_INT 110
23821: PUSH
23822: LD_INT 111
23824: PUSH
23825: LD_INT 112
23827: PUSH
23828: LD_INT 113
23830: PUSH
23831: LD_INT 114
23833: PUSH
23834: LD_INT 116
23836: PUSH
23837: LD_INT 117
23839: PUSH
23840: LD_INT 118
23842: PUSH
23843: EMPTY
23844: LIST
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: PUSH
23862: EMPTY
23863: LIST
23864: LIST
23865: ST_TO_ADDR
23866: GO 24873
23868: LD_INT 15
23870: DOUBLE
23871: EQUAL
23872: IFTRUE 23876
23874: GO 24100
23876: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23877: LD_ADDR_VAR 0 2
23881: PUSH
23882: LD_INT 1
23884: PUSH
23885: LD_INT 2
23887: PUSH
23888: LD_INT 3
23890: PUSH
23891: LD_INT 4
23893: PUSH
23894: LD_INT 5
23896: PUSH
23897: LD_INT 6
23899: PUSH
23900: LD_INT 7
23902: PUSH
23903: LD_INT 8
23905: PUSH
23906: LD_INT 9
23908: PUSH
23909: LD_INT 10
23911: PUSH
23912: LD_INT 11
23914: PUSH
23915: LD_INT 12
23917: PUSH
23918: LD_INT 13
23920: PUSH
23921: LD_INT 14
23923: PUSH
23924: LD_INT 15
23926: PUSH
23927: LD_INT 16
23929: PUSH
23930: LD_INT 17
23932: PUSH
23933: LD_INT 18
23935: PUSH
23936: LD_INT 19
23938: PUSH
23939: LD_INT 20
23941: PUSH
23942: LD_INT 21
23944: PUSH
23945: LD_INT 22
23947: PUSH
23948: LD_INT 23
23950: PUSH
23951: LD_INT 24
23953: PUSH
23954: LD_INT 25
23956: PUSH
23957: LD_INT 26
23959: PUSH
23960: LD_INT 27
23962: PUSH
23963: LD_INT 28
23965: PUSH
23966: LD_INT 29
23968: PUSH
23969: LD_INT 30
23971: PUSH
23972: LD_INT 31
23974: PUSH
23975: LD_INT 32
23977: PUSH
23978: LD_INT 33
23980: PUSH
23981: LD_INT 34
23983: PUSH
23984: LD_INT 36
23986: PUSH
23987: EMPTY
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: PUSH
24024: LD_INT 101
24026: PUSH
24027: LD_INT 102
24029: PUSH
24030: LD_INT 103
24032: PUSH
24033: LD_INT 104
24035: PUSH
24036: LD_INT 105
24038: PUSH
24039: LD_INT 106
24041: PUSH
24042: LD_INT 107
24044: PUSH
24045: LD_INT 108
24047: PUSH
24048: LD_INT 109
24050: PUSH
24051: LD_INT 110
24053: PUSH
24054: LD_INT 111
24056: PUSH
24057: LD_INT 112
24059: PUSH
24060: LD_INT 113
24062: PUSH
24063: LD_INT 114
24065: PUSH
24066: LD_INT 116
24068: PUSH
24069: LD_INT 117
24071: PUSH
24072: LD_INT 118
24074: PUSH
24075: EMPTY
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: PUSH
24094: EMPTY
24095: LIST
24096: LIST
24097: ST_TO_ADDR
24098: GO 24873
24100: LD_INT 16
24102: DOUBLE
24103: EQUAL
24104: IFTRUE 24108
24106: GO 24244
24108: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
24109: LD_ADDR_VAR 0 2
24113: PUSH
24114: LD_INT 2
24116: PUSH
24117: LD_INT 4
24119: PUSH
24120: LD_INT 5
24122: PUSH
24123: LD_INT 7
24125: PUSH
24126: LD_INT 11
24128: PUSH
24129: LD_INT 12
24131: PUSH
24132: LD_INT 15
24134: PUSH
24135: LD_INT 16
24137: PUSH
24138: LD_INT 20
24140: PUSH
24141: LD_INT 21
24143: PUSH
24144: LD_INT 22
24146: PUSH
24147: LD_INT 23
24149: PUSH
24150: LD_INT 25
24152: PUSH
24153: LD_INT 26
24155: PUSH
24156: LD_INT 30
24158: PUSH
24159: LD_INT 31
24161: PUSH
24162: LD_INT 32
24164: PUSH
24165: LD_INT 33
24167: PUSH
24168: LD_INT 34
24170: PUSH
24171: EMPTY
24172: LIST
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: PUSH
24192: LD_INT 101
24194: PUSH
24195: LD_INT 102
24197: PUSH
24198: LD_INT 103
24200: PUSH
24201: LD_INT 106
24203: PUSH
24204: LD_INT 108
24206: PUSH
24207: LD_INT 112
24209: PUSH
24210: LD_INT 113
24212: PUSH
24213: LD_INT 114
24215: PUSH
24216: LD_INT 116
24218: PUSH
24219: LD_INT 117
24221: PUSH
24222: LD_INT 118
24224: PUSH
24225: EMPTY
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: PUSH
24238: EMPTY
24239: LIST
24240: LIST
24241: ST_TO_ADDR
24242: GO 24873
24244: LD_INT 17
24246: DOUBLE
24247: EQUAL
24248: IFTRUE 24252
24250: GO 24476
24252: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24253: LD_ADDR_VAR 0 2
24257: PUSH
24258: LD_INT 1
24260: PUSH
24261: LD_INT 2
24263: PUSH
24264: LD_INT 3
24266: PUSH
24267: LD_INT 4
24269: PUSH
24270: LD_INT 5
24272: PUSH
24273: LD_INT 6
24275: PUSH
24276: LD_INT 7
24278: PUSH
24279: LD_INT 8
24281: PUSH
24282: LD_INT 9
24284: PUSH
24285: LD_INT 10
24287: PUSH
24288: LD_INT 11
24290: PUSH
24291: LD_INT 12
24293: PUSH
24294: LD_INT 13
24296: PUSH
24297: LD_INT 14
24299: PUSH
24300: LD_INT 15
24302: PUSH
24303: LD_INT 16
24305: PUSH
24306: LD_INT 17
24308: PUSH
24309: LD_INT 18
24311: PUSH
24312: LD_INT 19
24314: PUSH
24315: LD_INT 20
24317: PUSH
24318: LD_INT 21
24320: PUSH
24321: LD_INT 22
24323: PUSH
24324: LD_INT 23
24326: PUSH
24327: LD_INT 24
24329: PUSH
24330: LD_INT 25
24332: PUSH
24333: LD_INT 26
24335: PUSH
24336: LD_INT 27
24338: PUSH
24339: LD_INT 28
24341: PUSH
24342: LD_INT 29
24344: PUSH
24345: LD_INT 30
24347: PUSH
24348: LD_INT 31
24350: PUSH
24351: LD_INT 32
24353: PUSH
24354: LD_INT 33
24356: PUSH
24357: LD_INT 34
24359: PUSH
24360: LD_INT 36
24362: PUSH
24363: EMPTY
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: LIST
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: LIST
24392: LIST
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: PUSH
24400: LD_INT 101
24402: PUSH
24403: LD_INT 102
24405: PUSH
24406: LD_INT 103
24408: PUSH
24409: LD_INT 104
24411: PUSH
24412: LD_INT 105
24414: PUSH
24415: LD_INT 106
24417: PUSH
24418: LD_INT 107
24420: PUSH
24421: LD_INT 108
24423: PUSH
24424: LD_INT 109
24426: PUSH
24427: LD_INT 110
24429: PUSH
24430: LD_INT 111
24432: PUSH
24433: LD_INT 112
24435: PUSH
24436: LD_INT 113
24438: PUSH
24439: LD_INT 114
24441: PUSH
24442: LD_INT 116
24444: PUSH
24445: LD_INT 117
24447: PUSH
24448: LD_INT 118
24450: PUSH
24451: EMPTY
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: PUSH
24470: EMPTY
24471: LIST
24472: LIST
24473: ST_TO_ADDR
24474: GO 24873
24476: LD_INT 18
24478: DOUBLE
24479: EQUAL
24480: IFTRUE 24484
24482: GO 24632
24484: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24485: LD_ADDR_VAR 0 2
24489: PUSH
24490: LD_INT 2
24492: PUSH
24493: LD_INT 4
24495: PUSH
24496: LD_INT 5
24498: PUSH
24499: LD_INT 7
24501: PUSH
24502: LD_INT 11
24504: PUSH
24505: LD_INT 12
24507: PUSH
24508: LD_INT 15
24510: PUSH
24511: LD_INT 16
24513: PUSH
24514: LD_INT 20
24516: PUSH
24517: LD_INT 21
24519: PUSH
24520: LD_INT 22
24522: PUSH
24523: LD_INT 23
24525: PUSH
24526: LD_INT 25
24528: PUSH
24529: LD_INT 26
24531: PUSH
24532: LD_INT 30
24534: PUSH
24535: LD_INT 31
24537: PUSH
24538: LD_INT 32
24540: PUSH
24541: LD_INT 33
24543: PUSH
24544: LD_INT 34
24546: PUSH
24547: LD_INT 35
24549: PUSH
24550: LD_INT 36
24552: PUSH
24553: EMPTY
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: PUSH
24576: LD_INT 101
24578: PUSH
24579: LD_INT 102
24581: PUSH
24582: LD_INT 103
24584: PUSH
24585: LD_INT 106
24587: PUSH
24588: LD_INT 108
24590: PUSH
24591: LD_INT 112
24593: PUSH
24594: LD_INT 113
24596: PUSH
24597: LD_INT 114
24599: PUSH
24600: LD_INT 115
24602: PUSH
24603: LD_INT 116
24605: PUSH
24606: LD_INT 117
24608: PUSH
24609: LD_INT 118
24611: PUSH
24612: EMPTY
24613: LIST
24614: LIST
24615: LIST
24616: LIST
24617: LIST
24618: LIST
24619: LIST
24620: LIST
24621: LIST
24622: LIST
24623: LIST
24624: LIST
24625: PUSH
24626: EMPTY
24627: LIST
24628: LIST
24629: ST_TO_ADDR
24630: GO 24873
24632: LD_INT 19
24634: DOUBLE
24635: EQUAL
24636: IFTRUE 24640
24638: GO 24872
24640: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24641: LD_ADDR_VAR 0 2
24645: PUSH
24646: LD_INT 1
24648: PUSH
24649: LD_INT 2
24651: PUSH
24652: LD_INT 3
24654: PUSH
24655: LD_INT 4
24657: PUSH
24658: LD_INT 5
24660: PUSH
24661: LD_INT 6
24663: PUSH
24664: LD_INT 7
24666: PUSH
24667: LD_INT 8
24669: PUSH
24670: LD_INT 9
24672: PUSH
24673: LD_INT 10
24675: PUSH
24676: LD_INT 11
24678: PUSH
24679: LD_INT 12
24681: PUSH
24682: LD_INT 13
24684: PUSH
24685: LD_INT 14
24687: PUSH
24688: LD_INT 15
24690: PUSH
24691: LD_INT 16
24693: PUSH
24694: LD_INT 17
24696: PUSH
24697: LD_INT 18
24699: PUSH
24700: LD_INT 19
24702: PUSH
24703: LD_INT 20
24705: PUSH
24706: LD_INT 21
24708: PUSH
24709: LD_INT 22
24711: PUSH
24712: LD_INT 23
24714: PUSH
24715: LD_INT 24
24717: PUSH
24718: LD_INT 25
24720: PUSH
24721: LD_INT 26
24723: PUSH
24724: LD_INT 27
24726: PUSH
24727: LD_INT 28
24729: PUSH
24730: LD_INT 29
24732: PUSH
24733: LD_INT 30
24735: PUSH
24736: LD_INT 31
24738: PUSH
24739: LD_INT 32
24741: PUSH
24742: LD_INT 33
24744: PUSH
24745: LD_INT 34
24747: PUSH
24748: LD_INT 35
24750: PUSH
24751: LD_INT 36
24753: PUSH
24754: EMPTY
24755: LIST
24756: LIST
24757: LIST
24758: LIST
24759: LIST
24760: LIST
24761: LIST
24762: LIST
24763: LIST
24764: LIST
24765: LIST
24766: LIST
24767: LIST
24768: LIST
24769: LIST
24770: LIST
24771: LIST
24772: LIST
24773: LIST
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: PUSH
24792: LD_INT 101
24794: PUSH
24795: LD_INT 102
24797: PUSH
24798: LD_INT 103
24800: PUSH
24801: LD_INT 104
24803: PUSH
24804: LD_INT 105
24806: PUSH
24807: LD_INT 106
24809: PUSH
24810: LD_INT 107
24812: PUSH
24813: LD_INT 108
24815: PUSH
24816: LD_INT 109
24818: PUSH
24819: LD_INT 110
24821: PUSH
24822: LD_INT 111
24824: PUSH
24825: LD_INT 112
24827: PUSH
24828: LD_INT 113
24830: PUSH
24831: LD_INT 114
24833: PUSH
24834: LD_INT 115
24836: PUSH
24837: LD_INT 116
24839: PUSH
24840: LD_INT 117
24842: PUSH
24843: LD_INT 118
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: ST_TO_ADDR
24870: GO 24873
24872: POP
// end else
24873: GO 25104
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24875: LD_ADDR_VAR 0 2
24879: PUSH
24880: LD_INT 1
24882: PUSH
24883: LD_INT 2
24885: PUSH
24886: LD_INT 3
24888: PUSH
24889: LD_INT 4
24891: PUSH
24892: LD_INT 5
24894: PUSH
24895: LD_INT 6
24897: PUSH
24898: LD_INT 7
24900: PUSH
24901: LD_INT 8
24903: PUSH
24904: LD_INT 9
24906: PUSH
24907: LD_INT 10
24909: PUSH
24910: LD_INT 11
24912: PUSH
24913: LD_INT 12
24915: PUSH
24916: LD_INT 13
24918: PUSH
24919: LD_INT 14
24921: PUSH
24922: LD_INT 15
24924: PUSH
24925: LD_INT 16
24927: PUSH
24928: LD_INT 17
24930: PUSH
24931: LD_INT 18
24933: PUSH
24934: LD_INT 19
24936: PUSH
24937: LD_INT 20
24939: PUSH
24940: LD_INT 21
24942: PUSH
24943: LD_INT 22
24945: PUSH
24946: LD_INT 23
24948: PUSH
24949: LD_INT 24
24951: PUSH
24952: LD_INT 25
24954: PUSH
24955: LD_INT 26
24957: PUSH
24958: LD_INT 27
24960: PUSH
24961: LD_INT 28
24963: PUSH
24964: LD_INT 29
24966: PUSH
24967: LD_INT 30
24969: PUSH
24970: LD_INT 31
24972: PUSH
24973: LD_INT 32
24975: PUSH
24976: LD_INT 33
24978: PUSH
24979: LD_INT 34
24981: PUSH
24982: LD_INT 35
24984: PUSH
24985: LD_INT 36
24987: PUSH
24988: EMPTY
24989: LIST
24990: LIST
24991: LIST
24992: LIST
24993: LIST
24994: LIST
24995: LIST
24996: LIST
24997: LIST
24998: LIST
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: PUSH
25026: LD_INT 101
25028: PUSH
25029: LD_INT 102
25031: PUSH
25032: LD_INT 103
25034: PUSH
25035: LD_INT 104
25037: PUSH
25038: LD_INT 105
25040: PUSH
25041: LD_INT 106
25043: PUSH
25044: LD_INT 107
25046: PUSH
25047: LD_INT 108
25049: PUSH
25050: LD_INT 109
25052: PUSH
25053: LD_INT 110
25055: PUSH
25056: LD_INT 111
25058: PUSH
25059: LD_INT 112
25061: PUSH
25062: LD_INT 113
25064: PUSH
25065: LD_INT 114
25067: PUSH
25068: LD_INT 115
25070: PUSH
25071: LD_INT 116
25073: PUSH
25074: LD_INT 117
25076: PUSH
25077: LD_INT 118
25079: PUSH
25080: EMPTY
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: PUSH
25100: EMPTY
25101: LIST
25102: LIST
25103: ST_TO_ADDR
// if result then
25104: LD_VAR 0 2
25108: IFFALSE 25894
// begin normal :=  ;
25110: LD_ADDR_VAR 0 5
25114: PUSH
25115: LD_STRING 
25117: ST_TO_ADDR
// hardcore :=  ;
25118: LD_ADDR_VAR 0 6
25122: PUSH
25123: LD_STRING 
25125: ST_TO_ADDR
// active :=  ;
25126: LD_ADDR_VAR 0 7
25130: PUSH
25131: LD_STRING 
25133: ST_TO_ADDR
// for i = 1 to normalCounter do
25134: LD_ADDR_VAR 0 8
25138: PUSH
25139: DOUBLE
25140: LD_INT 1
25142: DEC
25143: ST_TO_ADDR
25144: LD_EXP 62
25148: PUSH
25149: FOR_TO
25150: IFFALSE 25251
// begin tmp := 0 ;
25152: LD_ADDR_VAR 0 3
25156: PUSH
25157: LD_STRING 0
25159: ST_TO_ADDR
// if result [ 1 ] then
25160: LD_VAR 0 2
25164: PUSH
25165: LD_INT 1
25167: ARRAY
25168: IFFALSE 25233
// if result [ 1 ] [ 1 ] = i then
25170: LD_VAR 0 2
25174: PUSH
25175: LD_INT 1
25177: ARRAY
25178: PUSH
25179: LD_INT 1
25181: ARRAY
25182: PUSH
25183: LD_VAR 0 8
25187: EQUAL
25188: IFFALSE 25233
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25190: LD_ADDR_VAR 0 2
25194: PUSH
25195: LD_VAR 0 2
25199: PPUSH
25200: LD_INT 1
25202: PPUSH
25203: LD_VAR 0 2
25207: PUSH
25208: LD_INT 1
25210: ARRAY
25211: PPUSH
25212: LD_INT 1
25214: PPUSH
25215: CALL_OW 3
25219: PPUSH
25220: CALL_OW 1
25224: ST_TO_ADDR
// tmp := 1 ;
25225: LD_ADDR_VAR 0 3
25229: PUSH
25230: LD_STRING 1
25232: ST_TO_ADDR
// end ; normal := normal & tmp ;
25233: LD_ADDR_VAR 0 5
25237: PUSH
25238: LD_VAR 0 5
25242: PUSH
25243: LD_VAR 0 3
25247: STR
25248: ST_TO_ADDR
// end ;
25249: GO 25149
25251: POP
25252: POP
// for i = 1 to hardcoreCounter do
25253: LD_ADDR_VAR 0 8
25257: PUSH
25258: DOUBLE
25259: LD_INT 1
25261: DEC
25262: ST_TO_ADDR
25263: LD_EXP 63
25267: PUSH
25268: FOR_TO
25269: IFFALSE 25374
// begin tmp := 0 ;
25271: LD_ADDR_VAR 0 3
25275: PUSH
25276: LD_STRING 0
25278: ST_TO_ADDR
// if result [ 2 ] then
25279: LD_VAR 0 2
25283: PUSH
25284: LD_INT 2
25286: ARRAY
25287: IFFALSE 25356
// if result [ 2 ] [ 1 ] = 100 + i then
25289: LD_VAR 0 2
25293: PUSH
25294: LD_INT 2
25296: ARRAY
25297: PUSH
25298: LD_INT 1
25300: ARRAY
25301: PUSH
25302: LD_INT 100
25304: PUSH
25305: LD_VAR 0 8
25309: PLUS
25310: EQUAL
25311: IFFALSE 25356
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25313: LD_ADDR_VAR 0 2
25317: PUSH
25318: LD_VAR 0 2
25322: PPUSH
25323: LD_INT 2
25325: PPUSH
25326: LD_VAR 0 2
25330: PUSH
25331: LD_INT 2
25333: ARRAY
25334: PPUSH
25335: LD_INT 1
25337: PPUSH
25338: CALL_OW 3
25342: PPUSH
25343: CALL_OW 1
25347: ST_TO_ADDR
// tmp := 1 ;
25348: LD_ADDR_VAR 0 3
25352: PUSH
25353: LD_STRING 1
25355: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25356: LD_ADDR_VAR 0 6
25360: PUSH
25361: LD_VAR 0 6
25365: PUSH
25366: LD_VAR 0 3
25370: STR
25371: ST_TO_ADDR
// end ;
25372: GO 25268
25374: POP
25375: POP
// if isGameLoad then
25376: LD_VAR 0 1
25380: IFFALSE 25855
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25382: LD_ADDR_VAR 0 4
25386: PUSH
25387: LD_EXP 66
25391: PUSH
25392: LD_EXP 65
25396: PUSH
25397: LD_EXP 67
25401: PUSH
25402: LD_EXP 64
25406: PUSH
25407: LD_EXP 68
25411: PUSH
25412: LD_EXP 69
25416: PUSH
25417: LD_EXP 70
25421: PUSH
25422: LD_EXP 71
25426: PUSH
25427: LD_EXP 72
25431: PUSH
25432: LD_EXP 73
25436: PUSH
25437: LD_EXP 74
25441: PUSH
25442: LD_EXP 75
25446: PUSH
25447: LD_EXP 76
25451: PUSH
25452: LD_EXP 77
25456: PUSH
25457: LD_EXP 85
25461: PUSH
25462: LD_EXP 86
25466: PUSH
25467: LD_EXP 87
25471: PUSH
25472: LD_EXP 88
25476: PUSH
25477: LD_EXP 90
25481: PUSH
25482: LD_EXP 91
25486: PUSH
25487: LD_EXP 92
25491: PUSH
25492: LD_EXP 95
25496: PUSH
25497: LD_EXP 97
25501: PUSH
25502: LD_EXP 98
25506: PUSH
25507: LD_EXP 99
25511: PUSH
25512: LD_EXP 101
25516: PUSH
25517: LD_EXP 102
25521: PUSH
25522: LD_EXP 105
25526: PUSH
25527: LD_EXP 106
25531: PUSH
25532: LD_EXP 107
25536: PUSH
25537: LD_EXP 108
25541: PUSH
25542: LD_EXP 109
25546: PUSH
25547: LD_EXP 110
25551: PUSH
25552: LD_EXP 111
25556: PUSH
25557: LD_EXP 112
25561: PUSH
25562: LD_EXP 113
25566: PUSH
25567: LD_EXP 78
25571: PUSH
25572: LD_EXP 79
25576: PUSH
25577: LD_EXP 82
25581: PUSH
25582: LD_EXP 83
25586: PUSH
25587: LD_EXP 84
25591: PUSH
25592: LD_EXP 80
25596: PUSH
25597: LD_EXP 81
25601: PUSH
25602: LD_EXP 89
25606: PUSH
25607: LD_EXP 93
25611: PUSH
25612: LD_EXP 94
25616: PUSH
25617: LD_EXP 96
25621: PUSH
25622: LD_EXP 100
25626: PUSH
25627: LD_EXP 103
25631: PUSH
25632: LD_EXP 104
25636: PUSH
25637: LD_EXP 114
25641: PUSH
25642: LD_EXP 115
25646: PUSH
25647: LD_EXP 116
25651: PUSH
25652: LD_EXP 117
25656: PUSH
25657: EMPTY
25658: LIST
25659: LIST
25660: LIST
25661: LIST
25662: LIST
25663: LIST
25664: LIST
25665: LIST
25666: LIST
25667: LIST
25668: LIST
25669: LIST
25670: LIST
25671: LIST
25672: LIST
25673: LIST
25674: LIST
25675: LIST
25676: LIST
25677: LIST
25678: LIST
25679: LIST
25680: LIST
25681: LIST
25682: LIST
25683: LIST
25684: LIST
25685: LIST
25686: LIST
25687: LIST
25688: LIST
25689: LIST
25690: LIST
25691: LIST
25692: LIST
25693: LIST
25694: LIST
25695: LIST
25696: LIST
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: LIST
25704: LIST
25705: LIST
25706: LIST
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: ST_TO_ADDR
// tmp :=  ;
25713: LD_ADDR_VAR 0 3
25717: PUSH
25718: LD_STRING 
25720: ST_TO_ADDR
// for i = 1 to normalCounter do
25721: LD_ADDR_VAR 0 8
25725: PUSH
25726: DOUBLE
25727: LD_INT 1
25729: DEC
25730: ST_TO_ADDR
25731: LD_EXP 62
25735: PUSH
25736: FOR_TO
25737: IFFALSE 25773
// begin if flags [ i ] then
25739: LD_VAR 0 4
25743: PUSH
25744: LD_VAR 0 8
25748: ARRAY
25749: IFFALSE 25771
// tmp := tmp & i & ; ;
25751: LD_ADDR_VAR 0 3
25755: PUSH
25756: LD_VAR 0 3
25760: PUSH
25761: LD_VAR 0 8
25765: STR
25766: PUSH
25767: LD_STRING ;
25769: STR
25770: ST_TO_ADDR
// end ;
25771: GO 25736
25773: POP
25774: POP
// for i = 1 to hardcoreCounter do
25775: LD_ADDR_VAR 0 8
25779: PUSH
25780: DOUBLE
25781: LD_INT 1
25783: DEC
25784: ST_TO_ADDR
25785: LD_EXP 63
25789: PUSH
25790: FOR_TO
25791: IFFALSE 25837
// begin if flags [ normalCounter + i ] then
25793: LD_VAR 0 4
25797: PUSH
25798: LD_EXP 62
25802: PUSH
25803: LD_VAR 0 8
25807: PLUS
25808: ARRAY
25809: IFFALSE 25835
// tmp := tmp & ( 100 + i ) & ; ;
25811: LD_ADDR_VAR 0 3
25815: PUSH
25816: LD_VAR 0 3
25820: PUSH
25821: LD_INT 100
25823: PUSH
25824: LD_VAR 0 8
25828: PLUS
25829: STR
25830: PUSH
25831: LD_STRING ;
25833: STR
25834: ST_TO_ADDR
// end ;
25835: GO 25790
25837: POP
25838: POP
// if tmp then
25839: LD_VAR 0 3
25843: IFFALSE 25855
// active := tmp ;
25845: LD_ADDR_VAR 0 7
25849: PUSH
25850: LD_VAR 0 3
25854: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25855: LD_STRING getStreamItemsFromMission("
25857: PUSH
25858: LD_VAR 0 5
25862: STR
25863: PUSH
25864: LD_STRING ","
25866: STR
25867: PUSH
25868: LD_VAR 0 6
25872: STR
25873: PUSH
25874: LD_STRING ","
25876: STR
25877: PUSH
25878: LD_VAR 0 7
25882: STR
25883: PUSH
25884: LD_STRING ")
25886: STR
25887: PPUSH
25888: CALL_OW 559
// end else
25892: GO 25901
// ToLua ( getStreamItemsFromMission("","","") ) ;
25894: LD_STRING getStreamItemsFromMission("","","")
25896: PPUSH
25897: CALL_OW 559
// end ;
25901: LD_VAR 0 2
25905: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25906: LD_EXP 61
25910: IFFALSE 25918
25912: PUSH
25913: LD_EXP 66
25917: AND
25918: IFFALSE 26042
25920: GO 25922
25922: DISABLE
25923: LD_INT 0
25925: PPUSH
25926: PPUSH
// begin enable ;
25927: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25928: LD_ADDR_VAR 0 2
25932: PUSH
25933: LD_INT 22
25935: PUSH
25936: LD_OWVAR 2
25940: PUSH
25941: EMPTY
25942: LIST
25943: LIST
25944: PUSH
25945: LD_INT 2
25947: PUSH
25948: LD_INT 34
25950: PUSH
25951: LD_INT 7
25953: PUSH
25954: EMPTY
25955: LIST
25956: LIST
25957: PUSH
25958: LD_INT 34
25960: PUSH
25961: LD_INT 45
25963: PUSH
25964: EMPTY
25965: LIST
25966: LIST
25967: PUSH
25968: LD_INT 34
25970: PUSH
25971: LD_INT 28
25973: PUSH
25974: EMPTY
25975: LIST
25976: LIST
25977: PUSH
25978: LD_INT 34
25980: PUSH
25981: LD_INT 47
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: PUSH
25988: EMPTY
25989: LIST
25990: LIST
25991: LIST
25992: LIST
25993: LIST
25994: PUSH
25995: EMPTY
25996: LIST
25997: LIST
25998: PPUSH
25999: CALL_OW 69
26003: ST_TO_ADDR
// if not tmp then
26004: LD_VAR 0 2
26008: NOT
26009: IFFALSE 26013
// exit ;
26011: GO 26042
// for i in tmp do
26013: LD_ADDR_VAR 0 1
26017: PUSH
26018: LD_VAR 0 2
26022: PUSH
26023: FOR_IN
26024: IFFALSE 26040
// begin SetLives ( i , 0 ) ;
26026: LD_VAR 0 1
26030: PPUSH
26031: LD_INT 0
26033: PPUSH
26034: CALL_OW 234
// end ;
26038: GO 26023
26040: POP
26041: POP
// end ;
26042: PPOPN 2
26044: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
26045: LD_EXP 61
26049: IFFALSE 26057
26051: PUSH
26052: LD_EXP 67
26056: AND
26057: IFFALSE 26141
26059: GO 26061
26061: DISABLE
26062: LD_INT 0
26064: PPUSH
26065: PPUSH
// begin enable ;
26066: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
26067: LD_ADDR_VAR 0 2
26071: PUSH
26072: LD_INT 22
26074: PUSH
26075: LD_OWVAR 2
26079: PUSH
26080: EMPTY
26081: LIST
26082: LIST
26083: PUSH
26084: LD_INT 32
26086: PUSH
26087: LD_INT 3
26089: PUSH
26090: EMPTY
26091: LIST
26092: LIST
26093: PUSH
26094: EMPTY
26095: LIST
26096: LIST
26097: PPUSH
26098: CALL_OW 69
26102: ST_TO_ADDR
// if not tmp then
26103: LD_VAR 0 2
26107: NOT
26108: IFFALSE 26112
// exit ;
26110: GO 26141
// for i in tmp do
26112: LD_ADDR_VAR 0 1
26116: PUSH
26117: LD_VAR 0 2
26121: PUSH
26122: FOR_IN
26123: IFFALSE 26139
// begin SetLives ( i , 0 ) ;
26125: LD_VAR 0 1
26129: PPUSH
26130: LD_INT 0
26132: PPUSH
26133: CALL_OW 234
// end ;
26137: GO 26122
26139: POP
26140: POP
// end ;
26141: PPOPN 2
26143: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26144: LD_EXP 61
26148: IFFALSE 26156
26150: PUSH
26151: LD_EXP 64
26155: AND
26156: IFFALSE 26249
26158: GO 26160
26160: DISABLE
26161: LD_INT 0
26163: PPUSH
// begin enable ;
26164: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26165: LD_ADDR_VAR 0 1
26169: PUSH
26170: LD_INT 22
26172: PUSH
26173: LD_OWVAR 2
26177: PUSH
26178: EMPTY
26179: LIST
26180: LIST
26181: PUSH
26182: LD_INT 2
26184: PUSH
26185: LD_INT 25
26187: PUSH
26188: LD_INT 5
26190: PUSH
26191: EMPTY
26192: LIST
26193: LIST
26194: PUSH
26195: LD_INT 25
26197: PUSH
26198: LD_INT 9
26200: PUSH
26201: EMPTY
26202: LIST
26203: LIST
26204: PUSH
26205: LD_INT 25
26207: PUSH
26208: LD_INT 8
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: PUSH
26215: EMPTY
26216: LIST
26217: LIST
26218: LIST
26219: LIST
26220: PUSH
26221: EMPTY
26222: LIST
26223: LIST
26224: PPUSH
26225: CALL_OW 69
26229: PUSH
26230: FOR_IN
26231: IFFALSE 26247
// begin SetClass ( i , 1 ) ;
26233: LD_VAR 0 1
26237: PPUSH
26238: LD_INT 1
26240: PPUSH
26241: CALL_OW 336
// end ;
26245: GO 26230
26247: POP
26248: POP
// end ;
26249: PPOPN 1
26251: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26252: LD_EXP 61
26256: IFFALSE 26264
26258: PUSH
26259: LD_EXP 65
26263: AND
26264: IFFALSE 26276
26266: PUSH
26267: LD_OWVAR 65
26271: PUSH
26272: LD_INT 7
26274: LESS
26275: AND
26276: IFFALSE 26290
26278: GO 26280
26280: DISABLE
// begin enable ;
26281: ENABLE
// game_speed := 7 ;
26282: LD_ADDR_OWVAR 65
26286: PUSH
26287: LD_INT 7
26289: ST_TO_ADDR
// end ;
26290: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26291: LD_EXP 61
26295: IFFALSE 26303
26297: PUSH
26298: LD_EXP 68
26302: AND
26303: IFFALSE 26505
26305: GO 26307
26307: DISABLE
26308: LD_INT 0
26310: PPUSH
26311: PPUSH
26312: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26313: LD_ADDR_VAR 0 3
26317: PUSH
26318: LD_INT 81
26320: PUSH
26321: LD_OWVAR 2
26325: PUSH
26326: EMPTY
26327: LIST
26328: LIST
26329: PUSH
26330: LD_INT 21
26332: PUSH
26333: LD_INT 1
26335: PUSH
26336: EMPTY
26337: LIST
26338: LIST
26339: PUSH
26340: EMPTY
26341: LIST
26342: LIST
26343: PPUSH
26344: CALL_OW 69
26348: ST_TO_ADDR
// if not tmp then
26349: LD_VAR 0 3
26353: NOT
26354: IFFALSE 26358
// exit ;
26356: GO 26505
// if tmp > 5 then
26358: LD_VAR 0 3
26362: PUSH
26363: LD_INT 5
26365: GREATER
26366: IFFALSE 26378
// k := 5 else
26368: LD_ADDR_VAR 0 2
26372: PUSH
26373: LD_INT 5
26375: ST_TO_ADDR
26376: GO 26388
// k := tmp ;
26378: LD_ADDR_VAR 0 2
26382: PUSH
26383: LD_VAR 0 3
26387: ST_TO_ADDR
// for i := 1 to k do
26388: LD_ADDR_VAR 0 1
26392: PUSH
26393: DOUBLE
26394: LD_INT 1
26396: DEC
26397: ST_TO_ADDR
26398: LD_VAR 0 2
26402: PUSH
26403: FOR_TO
26404: IFFALSE 26503
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26406: LD_VAR 0 3
26410: PUSH
26411: LD_VAR 0 1
26415: ARRAY
26416: PPUSH
26417: LD_VAR 0 1
26421: PUSH
26422: LD_INT 4
26424: MOD
26425: PUSH
26426: LD_INT 1
26428: PLUS
26429: PPUSH
26430: CALL_OW 259
26434: PUSH
26435: LD_INT 10
26437: LESS
26438: IFFALSE 26501
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26440: LD_VAR 0 3
26444: PUSH
26445: LD_VAR 0 1
26449: ARRAY
26450: PPUSH
26451: LD_VAR 0 1
26455: PUSH
26456: LD_INT 4
26458: MOD
26459: PUSH
26460: LD_INT 1
26462: PLUS
26463: PPUSH
26464: LD_VAR 0 3
26468: PUSH
26469: LD_VAR 0 1
26473: ARRAY
26474: PPUSH
26475: LD_VAR 0 1
26479: PUSH
26480: LD_INT 4
26482: MOD
26483: PUSH
26484: LD_INT 1
26486: PLUS
26487: PPUSH
26488: CALL_OW 259
26492: PUSH
26493: LD_INT 1
26495: PLUS
26496: PPUSH
26497: CALL_OW 237
26501: GO 26403
26503: POP
26504: POP
// end ;
26505: PPOPN 3
26507: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26508: LD_EXP 61
26512: IFFALSE 26520
26514: PUSH
26515: LD_EXP 69
26519: AND
26520: IFFALSE 26540
26522: GO 26524
26524: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26525: LD_INT 4
26527: PPUSH
26528: LD_OWVAR 2
26532: PPUSH
26533: LD_INT 0
26535: PPUSH
26536: CALL_OW 324
26540: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26541: LD_EXP 61
26545: IFFALSE 26553
26547: PUSH
26548: LD_EXP 98
26552: AND
26553: IFFALSE 26573
26555: GO 26557
26557: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26558: LD_INT 19
26560: PPUSH
26561: LD_OWVAR 2
26565: PPUSH
26566: LD_INT 0
26568: PPUSH
26569: CALL_OW 324
26573: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26574: LD_EXP 61
26578: IFFALSE 26586
26580: PUSH
26581: LD_EXP 70
26585: AND
26586: IFFALSE 26688
26588: GO 26590
26590: DISABLE
26591: LD_INT 0
26593: PPUSH
26594: PPUSH
// begin enable ;
26595: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26596: LD_ADDR_VAR 0 2
26600: PUSH
26601: LD_INT 22
26603: PUSH
26604: LD_OWVAR 2
26608: PUSH
26609: EMPTY
26610: LIST
26611: LIST
26612: PUSH
26613: LD_INT 2
26615: PUSH
26616: LD_INT 34
26618: PUSH
26619: LD_INT 11
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: PUSH
26626: LD_INT 34
26628: PUSH
26629: LD_INT 30
26631: PUSH
26632: EMPTY
26633: LIST
26634: LIST
26635: PUSH
26636: EMPTY
26637: LIST
26638: LIST
26639: LIST
26640: PUSH
26641: EMPTY
26642: LIST
26643: LIST
26644: PPUSH
26645: CALL_OW 69
26649: ST_TO_ADDR
// if not tmp then
26650: LD_VAR 0 2
26654: NOT
26655: IFFALSE 26659
// exit ;
26657: GO 26688
// for i in tmp do
26659: LD_ADDR_VAR 0 1
26663: PUSH
26664: LD_VAR 0 2
26668: PUSH
26669: FOR_IN
26670: IFFALSE 26686
// begin SetLives ( i , 0 ) ;
26672: LD_VAR 0 1
26676: PPUSH
26677: LD_INT 0
26679: PPUSH
26680: CALL_OW 234
// end ;
26684: GO 26669
26686: POP
26687: POP
// end ;
26688: PPOPN 2
26690: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26691: LD_EXP 61
26695: IFFALSE 26703
26697: PUSH
26698: LD_EXP 71
26702: AND
26703: IFFALSE 26723
26705: GO 26707
26707: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26708: LD_INT 32
26710: PPUSH
26711: LD_OWVAR 2
26715: PPUSH
26716: LD_INT 0
26718: PPUSH
26719: CALL_OW 324
26723: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26724: LD_EXP 61
26728: IFFALSE 26736
26730: PUSH
26731: LD_EXP 72
26735: AND
26736: IFFALSE 26919
26738: GO 26740
26740: DISABLE
26741: LD_INT 0
26743: PPUSH
26744: PPUSH
26745: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26746: LD_ADDR_VAR 0 2
26750: PUSH
26751: LD_INT 22
26753: PUSH
26754: LD_OWVAR 2
26758: PUSH
26759: EMPTY
26760: LIST
26761: LIST
26762: PUSH
26763: LD_INT 33
26765: PUSH
26766: LD_INT 3
26768: PUSH
26769: EMPTY
26770: LIST
26771: LIST
26772: PUSH
26773: EMPTY
26774: LIST
26775: LIST
26776: PPUSH
26777: CALL_OW 69
26781: ST_TO_ADDR
// if not tmp then
26782: LD_VAR 0 2
26786: NOT
26787: IFFALSE 26791
// exit ;
26789: GO 26919
// side := 0 ;
26791: LD_ADDR_VAR 0 3
26795: PUSH
26796: LD_INT 0
26798: ST_TO_ADDR
// for i := 1 to 8 do
26799: LD_ADDR_VAR 0 1
26803: PUSH
26804: DOUBLE
26805: LD_INT 1
26807: DEC
26808: ST_TO_ADDR
26809: LD_INT 8
26811: PUSH
26812: FOR_TO
26813: IFFALSE 26863
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26815: LD_OWVAR 2
26819: PUSH
26820: LD_VAR 0 1
26824: NONEQUAL
26825: IFFALSE 26847
26827: PUSH
26828: LD_OWVAR 2
26832: PPUSH
26833: LD_VAR 0 1
26837: PPUSH
26838: CALL_OW 81
26842: PUSH
26843: LD_INT 2
26845: EQUAL
26846: AND
26847: IFFALSE 26861
// begin side := i ;
26849: LD_ADDR_VAR 0 3
26853: PUSH
26854: LD_VAR 0 1
26858: ST_TO_ADDR
// break ;
26859: GO 26863
// end ;
26861: GO 26812
26863: POP
26864: POP
// if not side then
26865: LD_VAR 0 3
26869: NOT
26870: IFFALSE 26874
// exit ;
26872: GO 26919
// for i := 1 to tmp do
26874: LD_ADDR_VAR 0 1
26878: PUSH
26879: DOUBLE
26880: LD_INT 1
26882: DEC
26883: ST_TO_ADDR
26884: LD_VAR 0 2
26888: PUSH
26889: FOR_TO
26890: IFFALSE 26917
// if Prob ( 60 ) then
26892: LD_INT 60
26894: PPUSH
26895: CALL_OW 13
26899: IFFALSE 26915
// SetSide ( i , side ) ;
26901: LD_VAR 0 1
26905: PPUSH
26906: LD_VAR 0 3
26910: PPUSH
26911: CALL_OW 235
26915: GO 26889
26917: POP
26918: POP
// end ;
26919: PPOPN 3
26921: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26922: LD_EXP 61
26926: IFFALSE 26934
26928: PUSH
26929: LD_EXP 74
26933: AND
26934: IFFALSE 27053
26936: GO 26938
26938: DISABLE
26939: LD_INT 0
26941: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26942: LD_ADDR_VAR 0 1
26946: PUSH
26947: LD_INT 22
26949: PUSH
26950: LD_OWVAR 2
26954: PUSH
26955: EMPTY
26956: LIST
26957: LIST
26958: PUSH
26959: LD_INT 21
26961: PUSH
26962: LD_INT 1
26964: PUSH
26965: EMPTY
26966: LIST
26967: LIST
26968: PUSH
26969: LD_INT 3
26971: PUSH
26972: LD_INT 23
26974: PUSH
26975: LD_INT 0
26977: PUSH
26978: EMPTY
26979: LIST
26980: LIST
26981: PUSH
26982: EMPTY
26983: LIST
26984: LIST
26985: PUSH
26986: EMPTY
26987: LIST
26988: LIST
26989: LIST
26990: PPUSH
26991: CALL_OW 69
26995: PUSH
26996: FOR_IN
26997: IFFALSE 27051
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26999: LD_VAR 0 1
27003: PPUSH
27004: CALL_OW 257
27008: PUSH
27009: LD_INT 1
27011: PUSH
27012: LD_INT 2
27014: PUSH
27015: LD_INT 3
27017: PUSH
27018: LD_INT 4
27020: PUSH
27021: EMPTY
27022: LIST
27023: LIST
27024: LIST
27025: LIST
27026: IN
27027: IFFALSE 27049
// SetClass ( un , rand ( 1 , 4 ) ) ;
27029: LD_VAR 0 1
27033: PPUSH
27034: LD_INT 1
27036: PPUSH
27037: LD_INT 4
27039: PPUSH
27040: CALL_OW 12
27044: PPUSH
27045: CALL_OW 336
27049: GO 26996
27051: POP
27052: POP
// end ;
27053: PPOPN 1
27055: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
27056: LD_EXP 61
27060: IFFALSE 27068
27062: PUSH
27063: LD_EXP 73
27067: AND
27068: IFFALSE 27147
27070: GO 27072
27072: DISABLE
27073: LD_INT 0
27075: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27076: LD_ADDR_VAR 0 1
27080: PUSH
27081: LD_INT 22
27083: PUSH
27084: LD_OWVAR 2
27088: PUSH
27089: EMPTY
27090: LIST
27091: LIST
27092: PUSH
27093: LD_INT 21
27095: PUSH
27096: LD_INT 3
27098: PUSH
27099: EMPTY
27100: LIST
27101: LIST
27102: PUSH
27103: EMPTY
27104: LIST
27105: LIST
27106: PPUSH
27107: CALL_OW 69
27111: ST_TO_ADDR
// if not tmp then
27112: LD_VAR 0 1
27116: NOT
27117: IFFALSE 27121
// exit ;
27119: GO 27147
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
27121: LD_VAR 0 1
27125: PUSH
27126: LD_INT 1
27128: PPUSH
27129: LD_VAR 0 1
27133: PPUSH
27134: CALL_OW 12
27138: ARRAY
27139: PPUSH
27140: LD_INT 100
27142: PPUSH
27143: CALL_OW 234
// end ;
27147: PPOPN 1
27149: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27150: LD_EXP 61
27154: IFFALSE 27162
27156: PUSH
27157: LD_EXP 75
27161: AND
27162: IFFALSE 27260
27164: GO 27166
27166: DISABLE
27167: LD_INT 0
27169: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27170: LD_ADDR_VAR 0 1
27174: PUSH
27175: LD_INT 22
27177: PUSH
27178: LD_OWVAR 2
27182: PUSH
27183: EMPTY
27184: LIST
27185: LIST
27186: PUSH
27187: LD_INT 21
27189: PUSH
27190: LD_INT 1
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: PUSH
27197: EMPTY
27198: LIST
27199: LIST
27200: PPUSH
27201: CALL_OW 69
27205: ST_TO_ADDR
// if not tmp then
27206: LD_VAR 0 1
27210: NOT
27211: IFFALSE 27215
// exit ;
27213: GO 27260
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27215: LD_VAR 0 1
27219: PUSH
27220: LD_INT 1
27222: PPUSH
27223: LD_VAR 0 1
27227: PPUSH
27228: CALL_OW 12
27232: ARRAY
27233: PPUSH
27234: LD_INT 1
27236: PPUSH
27237: LD_INT 4
27239: PPUSH
27240: CALL_OW 12
27244: PPUSH
27245: LD_INT 3000
27247: PPUSH
27248: LD_INT 9000
27250: PPUSH
27251: CALL_OW 12
27255: PPUSH
27256: CALL_OW 492
// end ;
27260: PPOPN 1
27262: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27263: LD_EXP 61
27267: IFFALSE 27275
27269: PUSH
27270: LD_EXP 76
27274: AND
27275: IFFALSE 27295
27277: GO 27279
27279: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27280: LD_INT 1
27282: PPUSH
27283: LD_OWVAR 2
27287: PPUSH
27288: LD_INT 0
27290: PPUSH
27291: CALL_OW 324
27295: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27296: LD_EXP 61
27300: IFFALSE 27308
27302: PUSH
27303: LD_EXP 77
27307: AND
27308: IFFALSE 27391
27310: GO 27312
27312: DISABLE
27313: LD_INT 0
27315: PPUSH
27316: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27317: LD_ADDR_VAR 0 2
27321: PUSH
27322: LD_INT 22
27324: PUSH
27325: LD_OWVAR 2
27329: PUSH
27330: EMPTY
27331: LIST
27332: LIST
27333: PUSH
27334: LD_INT 21
27336: PUSH
27337: LD_INT 3
27339: PUSH
27340: EMPTY
27341: LIST
27342: LIST
27343: PUSH
27344: EMPTY
27345: LIST
27346: LIST
27347: PPUSH
27348: CALL_OW 69
27352: ST_TO_ADDR
// if not tmp then
27353: LD_VAR 0 2
27357: NOT
27358: IFFALSE 27362
// exit ;
27360: GO 27391
// for i in tmp do
27362: LD_ADDR_VAR 0 1
27366: PUSH
27367: LD_VAR 0 2
27371: PUSH
27372: FOR_IN
27373: IFFALSE 27389
// SetBLevel ( i , 10 ) ;
27375: LD_VAR 0 1
27379: PPUSH
27380: LD_INT 10
27382: PPUSH
27383: CALL_OW 241
27387: GO 27372
27389: POP
27390: POP
// end ;
27391: PPOPN 2
27393: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27394: LD_EXP 61
27398: IFFALSE 27406
27400: PUSH
27401: LD_EXP 78
27405: AND
27406: IFFALSE 27517
27408: GO 27410
27410: DISABLE
27411: LD_INT 0
27413: PPUSH
27414: PPUSH
27415: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27416: LD_ADDR_VAR 0 3
27420: PUSH
27421: LD_INT 22
27423: PUSH
27424: LD_OWVAR 2
27428: PUSH
27429: EMPTY
27430: LIST
27431: LIST
27432: PUSH
27433: LD_INT 25
27435: PUSH
27436: LD_INT 1
27438: PUSH
27439: EMPTY
27440: LIST
27441: LIST
27442: PUSH
27443: EMPTY
27444: LIST
27445: LIST
27446: PPUSH
27447: CALL_OW 69
27451: ST_TO_ADDR
// if not tmp then
27452: LD_VAR 0 3
27456: NOT
27457: IFFALSE 27461
// exit ;
27459: GO 27517
// un := tmp [ rand ( 1 , tmp ) ] ;
27461: LD_ADDR_VAR 0 2
27465: PUSH
27466: LD_VAR 0 3
27470: PUSH
27471: LD_INT 1
27473: PPUSH
27474: LD_VAR 0 3
27478: PPUSH
27479: CALL_OW 12
27483: ARRAY
27484: ST_TO_ADDR
// if Crawls ( un ) then
27485: LD_VAR 0 2
27489: PPUSH
27490: CALL_OW 318
27494: IFFALSE 27505
// ComWalk ( un ) ;
27496: LD_VAR 0 2
27500: PPUSH
27501: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27505: LD_VAR 0 2
27509: PPUSH
27510: LD_INT 5
27512: PPUSH
27513: CALL_OW 336
// end ;
27517: PPOPN 3
27519: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27520: LD_EXP 61
27524: IFFALSE 27532
27526: PUSH
27527: LD_EXP 79
27531: AND
27532: IFFALSE 27544
27534: PUSH
27535: LD_OWVAR 67
27539: PUSH
27540: LD_INT 4
27542: LESS
27543: AND
27544: IFFALSE 27563
27546: GO 27548
27548: DISABLE
// begin Difficulty := Difficulty + 1 ;
27549: LD_ADDR_OWVAR 67
27553: PUSH
27554: LD_OWVAR 67
27558: PUSH
27559: LD_INT 1
27561: PLUS
27562: ST_TO_ADDR
// end ;
27563: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27564: LD_EXP 61
27568: IFFALSE 27576
27570: PUSH
27571: LD_EXP 80
27575: AND
27576: IFFALSE 27679
27578: GO 27580
27580: DISABLE
27581: LD_INT 0
27583: PPUSH
// begin for i := 1 to 5 do
27584: LD_ADDR_VAR 0 1
27588: PUSH
27589: DOUBLE
27590: LD_INT 1
27592: DEC
27593: ST_TO_ADDR
27594: LD_INT 5
27596: PUSH
27597: FOR_TO
27598: IFFALSE 27677
// begin uc_nation := nation_nature ;
27600: LD_ADDR_OWVAR 21
27604: PUSH
27605: LD_INT 0
27607: ST_TO_ADDR
// uc_side := 0 ;
27608: LD_ADDR_OWVAR 20
27612: PUSH
27613: LD_INT 0
27615: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27616: LD_ADDR_OWVAR 29
27620: PUSH
27621: LD_INT 12
27623: PUSH
27624: LD_INT 12
27626: PUSH
27627: EMPTY
27628: LIST
27629: LIST
27630: ST_TO_ADDR
// hc_agressivity := 20 ;
27631: LD_ADDR_OWVAR 35
27635: PUSH
27636: LD_INT 20
27638: ST_TO_ADDR
// hc_class := class_tiger ;
27639: LD_ADDR_OWVAR 28
27643: PUSH
27644: LD_INT 14
27646: ST_TO_ADDR
// hc_gallery :=  ;
27647: LD_ADDR_OWVAR 33
27651: PUSH
27652: LD_STRING 
27654: ST_TO_ADDR
// hc_name :=  ;
27655: LD_ADDR_OWVAR 26
27659: PUSH
27660: LD_STRING 
27662: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27663: CALL_OW 44
27667: PPUSH
27668: LD_INT 0
27670: PPUSH
27671: CALL_OW 51
// end ;
27675: GO 27597
27677: POP
27678: POP
// end ;
27679: PPOPN 1
27681: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27682: LD_EXP 61
27686: IFFALSE 27694
27688: PUSH
27689: LD_EXP 81
27693: AND
27694: IFFALSE 27703
27696: GO 27698
27698: DISABLE
// StreamSibBomb ;
27699: CALL 27704 0 0
27703: END
// export function StreamSibBomb ; var i , x , y ; begin
27704: LD_INT 0
27706: PPUSH
27707: PPUSH
27708: PPUSH
27709: PPUSH
// result := false ;
27710: LD_ADDR_VAR 0 1
27714: PUSH
27715: LD_INT 0
27717: ST_TO_ADDR
// for i := 1 to 16 do
27718: LD_ADDR_VAR 0 2
27722: PUSH
27723: DOUBLE
27724: LD_INT 1
27726: DEC
27727: ST_TO_ADDR
27728: LD_INT 16
27730: PUSH
27731: FOR_TO
27732: IFFALSE 27931
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27734: LD_ADDR_VAR 0 3
27738: PUSH
27739: LD_INT 10
27741: PUSH
27742: LD_INT 20
27744: PUSH
27745: LD_INT 30
27747: PUSH
27748: LD_INT 40
27750: PUSH
27751: LD_INT 50
27753: PUSH
27754: LD_INT 60
27756: PUSH
27757: LD_INT 70
27759: PUSH
27760: LD_INT 80
27762: PUSH
27763: LD_INT 90
27765: PUSH
27766: LD_INT 100
27768: PUSH
27769: LD_INT 110
27771: PUSH
27772: LD_INT 120
27774: PUSH
27775: LD_INT 130
27777: PUSH
27778: LD_INT 140
27780: PUSH
27781: LD_INT 150
27783: PUSH
27784: EMPTY
27785: LIST
27786: LIST
27787: LIST
27788: LIST
27789: LIST
27790: LIST
27791: LIST
27792: LIST
27793: LIST
27794: LIST
27795: LIST
27796: LIST
27797: LIST
27798: LIST
27799: LIST
27800: PUSH
27801: LD_INT 1
27803: PPUSH
27804: LD_INT 15
27806: PPUSH
27807: CALL_OW 12
27811: ARRAY
27812: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27813: LD_ADDR_VAR 0 4
27817: PUSH
27818: LD_INT 10
27820: PUSH
27821: LD_INT 20
27823: PUSH
27824: LD_INT 30
27826: PUSH
27827: LD_INT 40
27829: PUSH
27830: LD_INT 50
27832: PUSH
27833: LD_INT 60
27835: PUSH
27836: LD_INT 70
27838: PUSH
27839: LD_INT 80
27841: PUSH
27842: LD_INT 90
27844: PUSH
27845: LD_INT 100
27847: PUSH
27848: LD_INT 110
27850: PUSH
27851: LD_INT 120
27853: PUSH
27854: LD_INT 130
27856: PUSH
27857: LD_INT 140
27859: PUSH
27860: LD_INT 150
27862: PUSH
27863: EMPTY
27864: LIST
27865: LIST
27866: LIST
27867: LIST
27868: LIST
27869: LIST
27870: LIST
27871: LIST
27872: LIST
27873: LIST
27874: LIST
27875: LIST
27876: LIST
27877: LIST
27878: LIST
27879: PUSH
27880: LD_INT 1
27882: PPUSH
27883: LD_INT 15
27885: PPUSH
27886: CALL_OW 12
27890: ARRAY
27891: ST_TO_ADDR
// if ValidHex ( x , y ) then
27892: LD_VAR 0 3
27896: PPUSH
27897: LD_VAR 0 4
27901: PPUSH
27902: CALL_OW 488
27906: IFFALSE 27929
// begin result := [ x , y ] ;
27908: LD_ADDR_VAR 0 1
27912: PUSH
27913: LD_VAR 0 3
27917: PUSH
27918: LD_VAR 0 4
27922: PUSH
27923: EMPTY
27924: LIST
27925: LIST
27926: ST_TO_ADDR
// break ;
27927: GO 27931
// end ; end ;
27929: GO 27731
27931: POP
27932: POP
// if result then
27933: LD_VAR 0 1
27937: IFFALSE 27997
// begin ToLua ( playSibBomb() ) ;
27939: LD_STRING playSibBomb()
27941: PPUSH
27942: CALL_OW 559
// wait ( 0 0$14 ) ;
27946: LD_INT 490
27948: PPUSH
27949: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27953: LD_VAR 0 1
27957: PUSH
27958: LD_INT 1
27960: ARRAY
27961: PPUSH
27962: LD_VAR 0 1
27966: PUSH
27967: LD_INT 2
27969: ARRAY
27970: PPUSH
27971: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27975: LD_VAR 0 1
27979: PUSH
27980: LD_INT 1
27982: ARRAY
27983: PPUSH
27984: LD_VAR 0 1
27988: PUSH
27989: LD_INT 2
27991: ARRAY
27992: PPUSH
27993: CALL_OW 429
// end ; end ;
27997: LD_VAR 0 1
28001: RET
// every 0 0$1 trigger StreamModeActive and sReset do
28002: LD_EXP 61
28006: IFFALSE 28014
28008: PUSH
28009: LD_EXP 83
28013: AND
28014: IFFALSE 28026
28016: GO 28018
28018: DISABLE
// YouLost (  ) ;
28019: LD_STRING 
28021: PPUSH
28022: CALL_OW 104
28026: END
// every 0 0$1 trigger StreamModeActive and sFog do
28027: LD_EXP 61
28031: IFFALSE 28039
28033: PUSH
28034: LD_EXP 82
28038: AND
28039: IFFALSE 28053
28041: GO 28043
28043: DISABLE
// FogOff ( your_side ) ;
28044: LD_OWVAR 2
28048: PPUSH
28049: CALL_OW 344
28053: END
// every 0 0$1 trigger StreamModeActive and sSun do
28054: LD_EXP 61
28058: IFFALSE 28066
28060: PUSH
28061: LD_EXP 84
28065: AND
28066: IFFALSE 28094
28068: GO 28070
28070: DISABLE
// begin solar_recharge_percent := 0 ;
28071: LD_ADDR_OWVAR 79
28075: PUSH
28076: LD_INT 0
28078: ST_TO_ADDR
// wait ( 5 5$00 ) ;
28079: LD_INT 10500
28081: PPUSH
28082: CALL_OW 67
// solar_recharge_percent := 100 ;
28086: LD_ADDR_OWVAR 79
28090: PUSH
28091: LD_INT 100
28093: ST_TO_ADDR
// end ;
28094: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
28095: LD_EXP 61
28099: IFFALSE 28107
28101: PUSH
28102: LD_EXP 85
28106: AND
28107: IFFALSE 28346
28109: GO 28111
28111: DISABLE
28112: LD_INT 0
28114: PPUSH
28115: PPUSH
28116: PPUSH
// begin tmp := [ ] ;
28117: LD_ADDR_VAR 0 3
28121: PUSH
28122: EMPTY
28123: ST_TO_ADDR
// for i := 1 to 6 do
28124: LD_ADDR_VAR 0 1
28128: PUSH
28129: DOUBLE
28130: LD_INT 1
28132: DEC
28133: ST_TO_ADDR
28134: LD_INT 6
28136: PUSH
28137: FOR_TO
28138: IFFALSE 28243
// begin uc_nation := nation_nature ;
28140: LD_ADDR_OWVAR 21
28144: PUSH
28145: LD_INT 0
28147: ST_TO_ADDR
// uc_side := 0 ;
28148: LD_ADDR_OWVAR 20
28152: PUSH
28153: LD_INT 0
28155: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28156: LD_ADDR_OWVAR 29
28160: PUSH
28161: LD_INT 12
28163: PUSH
28164: LD_INT 12
28166: PUSH
28167: EMPTY
28168: LIST
28169: LIST
28170: ST_TO_ADDR
// hc_agressivity := 20 ;
28171: LD_ADDR_OWVAR 35
28175: PUSH
28176: LD_INT 20
28178: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28179: LD_ADDR_OWVAR 28
28183: PUSH
28184: LD_INT 17
28186: ST_TO_ADDR
// hc_gallery :=  ;
28187: LD_ADDR_OWVAR 33
28191: PUSH
28192: LD_STRING 
28194: ST_TO_ADDR
// hc_name :=  ;
28195: LD_ADDR_OWVAR 26
28199: PUSH
28200: LD_STRING 
28202: ST_TO_ADDR
// un := CreateHuman ;
28203: LD_ADDR_VAR 0 2
28207: PUSH
28208: CALL_OW 44
28212: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28213: LD_VAR 0 2
28217: PPUSH
28218: LD_INT 1
28220: PPUSH
28221: CALL_OW 51
// tmp := tmp ^ un ;
28225: LD_ADDR_VAR 0 3
28229: PUSH
28230: LD_VAR 0 3
28234: PUSH
28235: LD_VAR 0 2
28239: ADD
28240: ST_TO_ADDR
// end ;
28241: GO 28137
28243: POP
28244: POP
// repeat wait ( 0 0$1 ) ;
28245: LD_INT 35
28247: PPUSH
28248: CALL_OW 67
// for un in tmp do
28252: LD_ADDR_VAR 0 2
28256: PUSH
28257: LD_VAR 0 3
28261: PUSH
28262: FOR_IN
28263: IFFALSE 28337
// begin if IsDead ( un ) then
28265: LD_VAR 0 2
28269: PPUSH
28270: CALL_OW 301
28274: IFFALSE 28294
// begin tmp := tmp diff un ;
28276: LD_ADDR_VAR 0 3
28280: PUSH
28281: LD_VAR 0 3
28285: PUSH
28286: LD_VAR 0 2
28290: DIFF
28291: ST_TO_ADDR
// continue ;
28292: GO 28262
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28294: LD_VAR 0 2
28298: PPUSH
28299: LD_INT 3
28301: PUSH
28302: LD_INT 22
28304: PUSH
28305: LD_INT 0
28307: PUSH
28308: EMPTY
28309: LIST
28310: LIST
28311: PUSH
28312: EMPTY
28313: LIST
28314: LIST
28315: PPUSH
28316: CALL_OW 69
28320: PPUSH
28321: LD_VAR 0 2
28325: PPUSH
28326: CALL_OW 74
28330: PPUSH
28331: CALL_OW 115
// end ;
28335: GO 28262
28337: POP
28338: POP
// until not tmp ;
28339: LD_VAR 0 3
28343: NOT
28344: IFFALSE 28245
// end ;
28346: PPOPN 3
28348: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28349: LD_EXP 61
28353: IFFALSE 28361
28355: PUSH
28356: LD_EXP 86
28360: AND
28361: IFFALSE 28415
28363: GO 28365
28365: DISABLE
// begin ToLua ( displayTroll(); ) ;
28366: LD_STRING displayTroll();
28368: PPUSH
28369: CALL_OW 559
// wait ( 3 3$00 ) ;
28373: LD_INT 6300
28375: PPUSH
28376: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28380: LD_STRING hideTroll();
28382: PPUSH
28383: CALL_OW 559
// wait ( 1 1$00 ) ;
28387: LD_INT 2100
28389: PPUSH
28390: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28394: LD_STRING displayTroll();
28396: PPUSH
28397: CALL_OW 559
// wait ( 1 1$00 ) ;
28401: LD_INT 2100
28403: PPUSH
28404: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28408: LD_STRING hideTroll();
28410: PPUSH
28411: CALL_OW 559
// end ;
28415: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28416: LD_EXP 61
28420: IFFALSE 28428
28422: PUSH
28423: LD_EXP 87
28427: AND
28428: IFFALSE 28491
28430: GO 28432
28432: DISABLE
28433: LD_INT 0
28435: PPUSH
// begin p := 0 ;
28436: LD_ADDR_VAR 0 1
28440: PUSH
28441: LD_INT 0
28443: ST_TO_ADDR
// repeat game_speed := 1 ;
28444: LD_ADDR_OWVAR 65
28448: PUSH
28449: LD_INT 1
28451: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28452: LD_INT 35
28454: PPUSH
28455: CALL_OW 67
// p := p + 1 ;
28459: LD_ADDR_VAR 0 1
28463: PUSH
28464: LD_VAR 0 1
28468: PUSH
28469: LD_INT 1
28471: PLUS
28472: ST_TO_ADDR
// until p >= 60 ;
28473: LD_VAR 0 1
28477: PUSH
28478: LD_INT 60
28480: GREATEREQUAL
28481: IFFALSE 28444
// game_speed := 4 ;
28483: LD_ADDR_OWVAR 65
28487: PUSH
28488: LD_INT 4
28490: ST_TO_ADDR
// end ;
28491: PPOPN 1
28493: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28494: LD_EXP 61
28498: IFFALSE 28506
28500: PUSH
28501: LD_EXP 88
28505: AND
28506: IFFALSE 28652
28508: GO 28510
28510: DISABLE
28511: LD_INT 0
28513: PPUSH
28514: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28515: LD_ADDR_VAR 0 1
28519: PUSH
28520: LD_INT 22
28522: PUSH
28523: LD_OWVAR 2
28527: PUSH
28528: EMPTY
28529: LIST
28530: LIST
28531: PUSH
28532: LD_INT 2
28534: PUSH
28535: LD_INT 30
28537: PUSH
28538: LD_INT 0
28540: PUSH
28541: EMPTY
28542: LIST
28543: LIST
28544: PUSH
28545: LD_INT 30
28547: PUSH
28548: LD_INT 1
28550: PUSH
28551: EMPTY
28552: LIST
28553: LIST
28554: PUSH
28555: EMPTY
28556: LIST
28557: LIST
28558: LIST
28559: PUSH
28560: EMPTY
28561: LIST
28562: LIST
28563: PPUSH
28564: CALL_OW 69
28568: ST_TO_ADDR
// if not depot then
28569: LD_VAR 0 1
28573: NOT
28574: IFFALSE 28578
// exit ;
28576: GO 28652
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28578: LD_ADDR_VAR 0 2
28582: PUSH
28583: LD_VAR 0 1
28587: PUSH
28588: LD_INT 1
28590: PPUSH
28591: LD_VAR 0 1
28595: PPUSH
28596: CALL_OW 12
28600: ARRAY
28601: PPUSH
28602: CALL_OW 274
28606: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28607: LD_VAR 0 2
28611: PPUSH
28612: LD_INT 1
28614: PPUSH
28615: LD_INT 0
28617: PPUSH
28618: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28622: LD_VAR 0 2
28626: PPUSH
28627: LD_INT 2
28629: PPUSH
28630: LD_INT 0
28632: PPUSH
28633: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28637: LD_VAR 0 2
28641: PPUSH
28642: LD_INT 3
28644: PPUSH
28645: LD_INT 0
28647: PPUSH
28648: CALL_OW 277
// end ;
28652: PPOPN 2
28654: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28655: LD_EXP 61
28659: IFFALSE 28667
28661: PUSH
28662: LD_EXP 89
28666: AND
28667: IFFALSE 28764
28669: GO 28671
28671: DISABLE
28672: LD_INT 0
28674: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28675: LD_ADDR_VAR 0 1
28679: PUSH
28680: LD_INT 22
28682: PUSH
28683: LD_OWVAR 2
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: PUSH
28692: LD_INT 21
28694: PUSH
28695: LD_INT 1
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: PUSH
28702: LD_INT 3
28704: PUSH
28705: LD_INT 23
28707: PUSH
28708: LD_INT 0
28710: PUSH
28711: EMPTY
28712: LIST
28713: LIST
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: PUSH
28719: EMPTY
28720: LIST
28721: LIST
28722: LIST
28723: PPUSH
28724: CALL_OW 69
28728: ST_TO_ADDR
// if not tmp then
28729: LD_VAR 0 1
28733: NOT
28734: IFFALSE 28738
// exit ;
28736: GO 28764
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28738: LD_VAR 0 1
28742: PUSH
28743: LD_INT 1
28745: PPUSH
28746: LD_VAR 0 1
28750: PPUSH
28751: CALL_OW 12
28755: ARRAY
28756: PPUSH
28757: LD_INT 200
28759: PPUSH
28760: CALL_OW 234
// end ;
28764: PPOPN 1
28766: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28767: LD_EXP 61
28771: IFFALSE 28779
28773: PUSH
28774: LD_EXP 90
28778: AND
28779: IFFALSE 28858
28781: GO 28783
28783: DISABLE
28784: LD_INT 0
28786: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28787: LD_ADDR_VAR 0 1
28791: PUSH
28792: LD_INT 22
28794: PUSH
28795: LD_OWVAR 2
28799: PUSH
28800: EMPTY
28801: LIST
28802: LIST
28803: PUSH
28804: LD_INT 21
28806: PUSH
28807: LD_INT 2
28809: PUSH
28810: EMPTY
28811: LIST
28812: LIST
28813: PUSH
28814: EMPTY
28815: LIST
28816: LIST
28817: PPUSH
28818: CALL_OW 69
28822: ST_TO_ADDR
// if not tmp then
28823: LD_VAR 0 1
28827: NOT
28828: IFFALSE 28832
// exit ;
28830: GO 28858
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28832: LD_VAR 0 1
28836: PUSH
28837: LD_INT 1
28839: PPUSH
28840: LD_VAR 0 1
28844: PPUSH
28845: CALL_OW 12
28849: ARRAY
28850: PPUSH
28851: LD_INT 60
28853: PPUSH
28854: CALL_OW 234
// end ;
28858: PPOPN 1
28860: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28861: LD_EXP 61
28865: IFFALSE 28873
28867: PUSH
28868: LD_EXP 91
28872: AND
28873: IFFALSE 28972
28875: GO 28877
28877: DISABLE
28878: LD_INT 0
28880: PPUSH
28881: PPUSH
// begin enable ;
28882: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28883: LD_ADDR_VAR 0 1
28887: PUSH
28888: LD_INT 22
28890: PUSH
28891: LD_OWVAR 2
28895: PUSH
28896: EMPTY
28897: LIST
28898: LIST
28899: PUSH
28900: LD_INT 61
28902: PUSH
28903: EMPTY
28904: LIST
28905: PUSH
28906: LD_INT 33
28908: PUSH
28909: LD_INT 2
28911: PUSH
28912: EMPTY
28913: LIST
28914: LIST
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: LIST
28920: PPUSH
28921: CALL_OW 69
28925: ST_TO_ADDR
// if not tmp then
28926: LD_VAR 0 1
28930: NOT
28931: IFFALSE 28935
// exit ;
28933: GO 28972
// for i in tmp do
28935: LD_ADDR_VAR 0 2
28939: PUSH
28940: LD_VAR 0 1
28944: PUSH
28945: FOR_IN
28946: IFFALSE 28970
// if IsControledBy ( i ) then
28948: LD_VAR 0 2
28952: PPUSH
28953: CALL_OW 312
28957: IFFALSE 28968
// ComUnlink ( i ) ;
28959: LD_VAR 0 2
28963: PPUSH
28964: CALL_OW 136
28968: GO 28945
28970: POP
28971: POP
// end ;
28972: PPOPN 2
28974: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28975: LD_EXP 61
28979: IFFALSE 28987
28981: PUSH
28982: LD_EXP 92
28986: AND
28987: IFFALSE 29127
28989: GO 28991
28991: DISABLE
28992: LD_INT 0
28994: PPUSH
28995: PPUSH
// begin ToLua ( displayPowell(); ) ;
28996: LD_STRING displayPowell();
28998: PPUSH
28999: CALL_OW 559
// uc_side := 0 ;
29003: LD_ADDR_OWVAR 20
29007: PUSH
29008: LD_INT 0
29010: ST_TO_ADDR
// uc_nation := 2 ;
29011: LD_ADDR_OWVAR 21
29015: PUSH
29016: LD_INT 2
29018: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
29019: LD_ADDR_OWVAR 37
29023: PUSH
29024: LD_INT 14
29026: ST_TO_ADDR
// vc_engine := engine_siberite ;
29027: LD_ADDR_OWVAR 39
29031: PUSH
29032: LD_INT 3
29034: ST_TO_ADDR
// vc_control := control_apeman ;
29035: LD_ADDR_OWVAR 38
29039: PUSH
29040: LD_INT 5
29042: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
29043: LD_ADDR_OWVAR 40
29047: PUSH
29048: LD_INT 29
29050: ST_TO_ADDR
// un := CreateVehicle ;
29051: LD_ADDR_VAR 0 2
29055: PUSH
29056: CALL_OW 45
29060: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29061: LD_VAR 0 2
29065: PPUSH
29066: LD_INT 1
29068: PPUSH
29069: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29073: LD_INT 35
29075: PPUSH
29076: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29080: LD_VAR 0 2
29084: PPUSH
29085: LD_INT 22
29087: PUSH
29088: LD_OWVAR 2
29092: PUSH
29093: EMPTY
29094: LIST
29095: LIST
29096: PPUSH
29097: CALL_OW 69
29101: PPUSH
29102: LD_VAR 0 2
29106: PPUSH
29107: CALL_OW 74
29111: PPUSH
29112: CALL_OW 115
// until IsDead ( un ) ;
29116: LD_VAR 0 2
29120: PPUSH
29121: CALL_OW 301
29125: IFFALSE 29073
// end ;
29127: PPOPN 2
29129: END
// every 0 0$1 trigger StreamModeActive and sStu do
29130: LD_EXP 61
29134: IFFALSE 29142
29136: PUSH
29137: LD_EXP 100
29141: AND
29142: IFFALSE 29158
29144: GO 29146
29146: DISABLE
// begin ToLua ( displayStucuk(); ) ;
29147: LD_STRING displayStucuk();
29149: PPUSH
29150: CALL_OW 559
// ResetFog ;
29154: CALL_OW 335
// end ;
29158: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29159: LD_EXP 61
29163: IFFALSE 29171
29165: PUSH
29166: LD_EXP 93
29170: AND
29171: IFFALSE 29312
29173: GO 29175
29175: DISABLE
29176: LD_INT 0
29178: PPUSH
29179: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29180: LD_ADDR_VAR 0 2
29184: PUSH
29185: LD_INT 22
29187: PUSH
29188: LD_OWVAR 2
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: PUSH
29197: LD_INT 21
29199: PUSH
29200: LD_INT 1
29202: PUSH
29203: EMPTY
29204: LIST
29205: LIST
29206: PUSH
29207: EMPTY
29208: LIST
29209: LIST
29210: PPUSH
29211: CALL_OW 69
29215: ST_TO_ADDR
// if not tmp then
29216: LD_VAR 0 2
29220: NOT
29221: IFFALSE 29225
// exit ;
29223: GO 29312
// un := tmp [ rand ( 1 , tmp ) ] ;
29225: LD_ADDR_VAR 0 1
29229: PUSH
29230: LD_VAR 0 2
29234: PUSH
29235: LD_INT 1
29237: PPUSH
29238: LD_VAR 0 2
29242: PPUSH
29243: CALL_OW 12
29247: ARRAY
29248: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29249: LD_VAR 0 1
29253: PPUSH
29254: LD_INT 0
29256: PPUSH
29257: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29261: LD_VAR 0 1
29265: PPUSH
29266: LD_OWVAR 3
29270: PUSH
29271: LD_VAR 0 1
29275: DIFF
29276: PPUSH
29277: LD_VAR 0 1
29281: PPUSH
29282: CALL_OW 74
29286: PPUSH
29287: CALL_OW 115
// wait ( 0 0$20 ) ;
29291: LD_INT 700
29293: PPUSH
29294: CALL_OW 67
// SetSide ( un , your_side ) ;
29298: LD_VAR 0 1
29302: PPUSH
29303: LD_OWVAR 2
29307: PPUSH
29308: CALL_OW 235
// end ;
29312: PPOPN 2
29314: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29315: LD_EXP 61
29319: IFFALSE 29327
29321: PUSH
29322: LD_EXP 94
29326: AND
29327: IFFALSE 29433
29329: GO 29331
29331: DISABLE
29332: LD_INT 0
29334: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29335: LD_ADDR_VAR 0 1
29339: PUSH
29340: LD_INT 22
29342: PUSH
29343: LD_OWVAR 2
29347: PUSH
29348: EMPTY
29349: LIST
29350: LIST
29351: PUSH
29352: LD_INT 2
29354: PUSH
29355: LD_INT 30
29357: PUSH
29358: LD_INT 0
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: PUSH
29365: LD_INT 30
29367: PUSH
29368: LD_INT 1
29370: PUSH
29371: EMPTY
29372: LIST
29373: LIST
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: LIST
29379: PUSH
29380: EMPTY
29381: LIST
29382: LIST
29383: PPUSH
29384: CALL_OW 69
29388: ST_TO_ADDR
// if not depot then
29389: LD_VAR 0 1
29393: NOT
29394: IFFALSE 29398
// exit ;
29396: GO 29433
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29398: LD_VAR 0 1
29402: PUSH
29403: LD_INT 1
29405: ARRAY
29406: PPUSH
29407: CALL_OW 250
29411: PPUSH
29412: LD_VAR 0 1
29416: PUSH
29417: LD_INT 1
29419: ARRAY
29420: PPUSH
29421: CALL_OW 251
29425: PPUSH
29426: LD_INT 70
29428: PPUSH
29429: CALL_OW 495
// end ;
29433: PPOPN 1
29435: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29436: LD_EXP 61
29440: IFFALSE 29448
29442: PUSH
29443: LD_EXP 95
29447: AND
29448: IFFALSE 29659
29450: GO 29452
29452: DISABLE
29453: LD_INT 0
29455: PPUSH
29456: PPUSH
29457: PPUSH
29458: PPUSH
29459: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29460: LD_ADDR_VAR 0 5
29464: PUSH
29465: LD_INT 22
29467: PUSH
29468: LD_OWVAR 2
29472: PUSH
29473: EMPTY
29474: LIST
29475: LIST
29476: PUSH
29477: LD_INT 21
29479: PUSH
29480: LD_INT 1
29482: PUSH
29483: EMPTY
29484: LIST
29485: LIST
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: PPUSH
29491: CALL_OW 69
29495: ST_TO_ADDR
// if not tmp then
29496: LD_VAR 0 5
29500: NOT
29501: IFFALSE 29505
// exit ;
29503: GO 29659
// for i in tmp do
29505: LD_ADDR_VAR 0 1
29509: PUSH
29510: LD_VAR 0 5
29514: PUSH
29515: FOR_IN
29516: IFFALSE 29657
// begin d := rand ( 0 , 5 ) ;
29518: LD_ADDR_VAR 0 4
29522: PUSH
29523: LD_INT 0
29525: PPUSH
29526: LD_INT 5
29528: PPUSH
29529: CALL_OW 12
29533: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29534: LD_ADDR_VAR 0 2
29538: PUSH
29539: LD_VAR 0 1
29543: PPUSH
29544: CALL_OW 250
29548: PPUSH
29549: LD_VAR 0 4
29553: PPUSH
29554: LD_INT 3
29556: PPUSH
29557: LD_INT 12
29559: PPUSH
29560: CALL_OW 12
29564: PPUSH
29565: CALL_OW 272
29569: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29570: LD_ADDR_VAR 0 3
29574: PUSH
29575: LD_VAR 0 1
29579: PPUSH
29580: CALL_OW 251
29584: PPUSH
29585: LD_VAR 0 4
29589: PPUSH
29590: LD_INT 3
29592: PPUSH
29593: LD_INT 12
29595: PPUSH
29596: CALL_OW 12
29600: PPUSH
29601: CALL_OW 273
29605: ST_TO_ADDR
// if ValidHex ( x , y ) then
29606: LD_VAR 0 2
29610: PPUSH
29611: LD_VAR 0 3
29615: PPUSH
29616: CALL_OW 488
29620: IFFALSE 29655
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29622: LD_VAR 0 1
29626: PPUSH
29627: LD_VAR 0 2
29631: PPUSH
29632: LD_VAR 0 3
29636: PPUSH
29637: LD_INT 3
29639: PPUSH
29640: LD_INT 6
29642: PPUSH
29643: CALL_OW 12
29647: PPUSH
29648: LD_INT 1
29650: PPUSH
29651: CALL_OW 483
// end ;
29655: GO 29515
29657: POP
29658: POP
// end ;
29659: PPOPN 5
29661: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29662: LD_EXP 61
29666: IFFALSE 29674
29668: PUSH
29669: LD_EXP 96
29673: AND
29674: IFFALSE 29768
29676: GO 29678
29678: DISABLE
29679: LD_INT 0
29681: PPUSH
29682: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29683: LD_ADDR_VAR 0 2
29687: PUSH
29688: LD_INT 22
29690: PUSH
29691: LD_OWVAR 2
29695: PUSH
29696: EMPTY
29697: LIST
29698: LIST
29699: PUSH
29700: LD_INT 32
29702: PUSH
29703: LD_INT 1
29705: PUSH
29706: EMPTY
29707: LIST
29708: LIST
29709: PUSH
29710: LD_INT 21
29712: PUSH
29713: LD_INT 2
29715: PUSH
29716: EMPTY
29717: LIST
29718: LIST
29719: PUSH
29720: EMPTY
29721: LIST
29722: LIST
29723: LIST
29724: PPUSH
29725: CALL_OW 69
29729: ST_TO_ADDR
// if not tmp then
29730: LD_VAR 0 2
29734: NOT
29735: IFFALSE 29739
// exit ;
29737: GO 29768
// for i in tmp do
29739: LD_ADDR_VAR 0 1
29743: PUSH
29744: LD_VAR 0 2
29748: PUSH
29749: FOR_IN
29750: IFFALSE 29766
// SetFuel ( i , 0 ) ;
29752: LD_VAR 0 1
29756: PPUSH
29757: LD_INT 0
29759: PPUSH
29760: CALL_OW 240
29764: GO 29749
29766: POP
29767: POP
// end ;
29768: PPOPN 2
29770: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29771: LD_EXP 61
29775: IFFALSE 29783
29777: PUSH
29778: LD_EXP 97
29782: AND
29783: IFFALSE 29849
29785: GO 29787
29787: DISABLE
29788: LD_INT 0
29790: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29791: LD_ADDR_VAR 0 1
29795: PUSH
29796: LD_INT 22
29798: PUSH
29799: LD_OWVAR 2
29803: PUSH
29804: EMPTY
29805: LIST
29806: LIST
29807: PUSH
29808: LD_INT 30
29810: PUSH
29811: LD_INT 29
29813: PUSH
29814: EMPTY
29815: LIST
29816: LIST
29817: PUSH
29818: EMPTY
29819: LIST
29820: LIST
29821: PPUSH
29822: CALL_OW 69
29826: ST_TO_ADDR
// if not tmp then
29827: LD_VAR 0 1
29831: NOT
29832: IFFALSE 29836
// exit ;
29834: GO 29849
// DestroyUnit ( tmp [ 1 ] ) ;
29836: LD_VAR 0 1
29840: PUSH
29841: LD_INT 1
29843: ARRAY
29844: PPUSH
29845: CALL_OW 65
// end ;
29849: PPOPN 1
29851: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29852: LD_EXP 61
29856: IFFALSE 29864
29858: PUSH
29859: LD_EXP 99
29863: AND
29864: IFFALSE 29993
29866: GO 29868
29868: DISABLE
29869: LD_INT 0
29871: PPUSH
// begin uc_side := 0 ;
29872: LD_ADDR_OWVAR 20
29876: PUSH
29877: LD_INT 0
29879: ST_TO_ADDR
// uc_nation := nation_arabian ;
29880: LD_ADDR_OWVAR 21
29884: PUSH
29885: LD_INT 2
29887: ST_TO_ADDR
// hc_gallery :=  ;
29888: LD_ADDR_OWVAR 33
29892: PUSH
29893: LD_STRING 
29895: ST_TO_ADDR
// hc_name :=  ;
29896: LD_ADDR_OWVAR 26
29900: PUSH
29901: LD_STRING 
29903: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29904: LD_INT 1
29906: PPUSH
29907: LD_INT 11
29909: PPUSH
29910: LD_INT 10
29912: PPUSH
29913: CALL_OW 380
// un := CreateHuman ;
29917: LD_ADDR_VAR 0 1
29921: PUSH
29922: CALL_OW 44
29926: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29927: LD_VAR 0 1
29931: PPUSH
29932: LD_INT 1
29934: PPUSH
29935: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29939: LD_INT 35
29941: PPUSH
29942: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29946: LD_VAR 0 1
29950: PPUSH
29951: LD_INT 22
29953: PUSH
29954: LD_OWVAR 2
29958: PUSH
29959: EMPTY
29960: LIST
29961: LIST
29962: PPUSH
29963: CALL_OW 69
29967: PPUSH
29968: LD_VAR 0 1
29972: PPUSH
29973: CALL_OW 74
29977: PPUSH
29978: CALL_OW 115
// until IsDead ( un ) ;
29982: LD_VAR 0 1
29986: PPUSH
29987: CALL_OW 301
29991: IFFALSE 29939
// end ;
29993: PPOPN 1
29995: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29996: LD_EXP 61
30000: IFFALSE 30008
30002: PUSH
30003: LD_EXP 101
30007: AND
30008: IFFALSE 30020
30010: GO 30012
30012: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
30013: LD_STRING earthquake(getX(game), 0, 32)
30015: PPUSH
30016: CALL_OW 559
30020: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
30021: LD_EXP 61
30025: IFFALSE 30033
30027: PUSH
30028: LD_EXP 102
30032: AND
30033: IFFALSE 30124
30035: GO 30037
30037: DISABLE
30038: LD_INT 0
30040: PPUSH
// begin enable ;
30041: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
30042: LD_ADDR_VAR 0 1
30046: PUSH
30047: LD_INT 22
30049: PUSH
30050: LD_OWVAR 2
30054: PUSH
30055: EMPTY
30056: LIST
30057: LIST
30058: PUSH
30059: LD_INT 21
30061: PUSH
30062: LD_INT 2
30064: PUSH
30065: EMPTY
30066: LIST
30067: LIST
30068: PUSH
30069: LD_INT 33
30071: PUSH
30072: LD_INT 3
30074: PUSH
30075: EMPTY
30076: LIST
30077: LIST
30078: PUSH
30079: EMPTY
30080: LIST
30081: LIST
30082: LIST
30083: PPUSH
30084: CALL_OW 69
30088: ST_TO_ADDR
// if not tmp then
30089: LD_VAR 0 1
30093: NOT
30094: IFFALSE 30098
// exit ;
30096: GO 30124
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30098: LD_VAR 0 1
30102: PUSH
30103: LD_INT 1
30105: PPUSH
30106: LD_VAR 0 1
30110: PPUSH
30111: CALL_OW 12
30115: ARRAY
30116: PPUSH
30117: LD_INT 1
30119: PPUSH
30120: CALL_OW 234
// end ;
30124: PPOPN 1
30126: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
30127: LD_EXP 61
30131: IFFALSE 30139
30133: PUSH
30134: LD_EXP 103
30138: AND
30139: IFFALSE 30280
30141: GO 30143
30143: DISABLE
30144: LD_INT 0
30146: PPUSH
30147: PPUSH
30148: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30149: LD_ADDR_VAR 0 3
30153: PUSH
30154: LD_INT 22
30156: PUSH
30157: LD_OWVAR 2
30161: PUSH
30162: EMPTY
30163: LIST
30164: LIST
30165: PUSH
30166: LD_INT 25
30168: PUSH
30169: LD_INT 1
30171: PUSH
30172: EMPTY
30173: LIST
30174: LIST
30175: PUSH
30176: EMPTY
30177: LIST
30178: LIST
30179: PPUSH
30180: CALL_OW 69
30184: ST_TO_ADDR
// if not tmp then
30185: LD_VAR 0 3
30189: NOT
30190: IFFALSE 30194
// exit ;
30192: GO 30280
// un := tmp [ rand ( 1 , tmp ) ] ;
30194: LD_ADDR_VAR 0 2
30198: PUSH
30199: LD_VAR 0 3
30203: PUSH
30204: LD_INT 1
30206: PPUSH
30207: LD_VAR 0 3
30211: PPUSH
30212: CALL_OW 12
30216: ARRAY
30217: ST_TO_ADDR
// if Crawls ( un ) then
30218: LD_VAR 0 2
30222: PPUSH
30223: CALL_OW 318
30227: IFFALSE 30238
// ComWalk ( un ) ;
30229: LD_VAR 0 2
30233: PPUSH
30234: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30238: LD_VAR 0 2
30242: PPUSH
30243: LD_INT 9
30245: PPUSH
30246: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30250: LD_INT 28
30252: PPUSH
30253: LD_OWVAR 2
30257: PPUSH
30258: LD_INT 2
30260: PPUSH
30261: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30265: LD_INT 29
30267: PPUSH
30268: LD_OWVAR 2
30272: PPUSH
30273: LD_INT 2
30275: PPUSH
30276: CALL_OW 322
// end ;
30280: PPOPN 3
30282: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30283: LD_EXP 61
30287: IFFALSE 30295
30289: PUSH
30290: LD_EXP 104
30294: AND
30295: IFFALSE 30406
30297: GO 30299
30299: DISABLE
30300: LD_INT 0
30302: PPUSH
30303: PPUSH
30304: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30305: LD_ADDR_VAR 0 3
30309: PUSH
30310: LD_INT 22
30312: PUSH
30313: LD_OWVAR 2
30317: PUSH
30318: EMPTY
30319: LIST
30320: LIST
30321: PUSH
30322: LD_INT 25
30324: PUSH
30325: LD_INT 1
30327: PUSH
30328: EMPTY
30329: LIST
30330: LIST
30331: PUSH
30332: EMPTY
30333: LIST
30334: LIST
30335: PPUSH
30336: CALL_OW 69
30340: ST_TO_ADDR
// if not tmp then
30341: LD_VAR 0 3
30345: NOT
30346: IFFALSE 30350
// exit ;
30348: GO 30406
// un := tmp [ rand ( 1 , tmp ) ] ;
30350: LD_ADDR_VAR 0 2
30354: PUSH
30355: LD_VAR 0 3
30359: PUSH
30360: LD_INT 1
30362: PPUSH
30363: LD_VAR 0 3
30367: PPUSH
30368: CALL_OW 12
30372: ARRAY
30373: ST_TO_ADDR
// if Crawls ( un ) then
30374: LD_VAR 0 2
30378: PPUSH
30379: CALL_OW 318
30383: IFFALSE 30394
// ComWalk ( un ) ;
30385: LD_VAR 0 2
30389: PPUSH
30390: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30394: LD_VAR 0 2
30398: PPUSH
30399: LD_INT 8
30401: PPUSH
30402: CALL_OW 336
// end ;
30406: PPOPN 3
30408: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30409: LD_EXP 61
30413: IFFALSE 30421
30415: PUSH
30416: LD_EXP 105
30420: AND
30421: IFFALSE 30565
30423: GO 30425
30425: DISABLE
30426: LD_INT 0
30428: PPUSH
30429: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30430: LD_ADDR_VAR 0 2
30434: PUSH
30435: LD_INT 22
30437: PUSH
30438: LD_OWVAR 2
30442: PUSH
30443: EMPTY
30444: LIST
30445: LIST
30446: PUSH
30447: LD_INT 21
30449: PUSH
30450: LD_INT 2
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: PUSH
30457: LD_INT 2
30459: PUSH
30460: LD_INT 34
30462: PUSH
30463: LD_INT 12
30465: PUSH
30466: EMPTY
30467: LIST
30468: LIST
30469: PUSH
30470: LD_INT 34
30472: PUSH
30473: LD_INT 51
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: PUSH
30480: LD_INT 34
30482: PUSH
30483: LD_INT 32
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: PUSH
30490: EMPTY
30491: LIST
30492: LIST
30493: LIST
30494: LIST
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: LIST
30500: PPUSH
30501: CALL_OW 69
30505: ST_TO_ADDR
// if not tmp then
30506: LD_VAR 0 2
30510: NOT
30511: IFFALSE 30515
// exit ;
30513: GO 30565
// for i in tmp do
30515: LD_ADDR_VAR 0 1
30519: PUSH
30520: LD_VAR 0 2
30524: PUSH
30525: FOR_IN
30526: IFFALSE 30563
// if GetCargo ( i , mat_artifact ) = 0 then
30528: LD_VAR 0 1
30532: PPUSH
30533: LD_INT 4
30535: PPUSH
30536: CALL_OW 289
30540: PUSH
30541: LD_INT 0
30543: EQUAL
30544: IFFALSE 30561
// SetCargo ( i , mat_siberit , 100 ) ;
30546: LD_VAR 0 1
30550: PPUSH
30551: LD_INT 3
30553: PPUSH
30554: LD_INT 100
30556: PPUSH
30557: CALL_OW 290
30561: GO 30525
30563: POP
30564: POP
// end ;
30565: PPOPN 2
30567: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30568: LD_EXP 61
30572: IFFALSE 30580
30574: PUSH
30575: LD_EXP 106
30579: AND
30580: IFFALSE 30763
30582: GO 30584
30584: DISABLE
30585: LD_INT 0
30587: PPUSH
30588: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30589: LD_ADDR_VAR 0 2
30593: PUSH
30594: LD_INT 22
30596: PUSH
30597: LD_OWVAR 2
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PPUSH
30606: CALL_OW 69
30610: ST_TO_ADDR
// if not tmp then
30611: LD_VAR 0 2
30615: NOT
30616: IFFALSE 30620
// exit ;
30618: GO 30763
// for i := 1 to 2 do
30620: LD_ADDR_VAR 0 1
30624: PUSH
30625: DOUBLE
30626: LD_INT 1
30628: DEC
30629: ST_TO_ADDR
30630: LD_INT 2
30632: PUSH
30633: FOR_TO
30634: IFFALSE 30761
// begin uc_side := your_side ;
30636: LD_ADDR_OWVAR 20
30640: PUSH
30641: LD_OWVAR 2
30645: ST_TO_ADDR
// uc_nation := nation_american ;
30646: LD_ADDR_OWVAR 21
30650: PUSH
30651: LD_INT 1
30653: ST_TO_ADDR
// vc_chassis := us_morphling ;
30654: LD_ADDR_OWVAR 37
30658: PUSH
30659: LD_INT 5
30661: ST_TO_ADDR
// vc_engine := engine_siberite ;
30662: LD_ADDR_OWVAR 39
30666: PUSH
30667: LD_INT 3
30669: ST_TO_ADDR
// vc_control := control_computer ;
30670: LD_ADDR_OWVAR 38
30674: PUSH
30675: LD_INT 3
30677: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30678: LD_ADDR_OWVAR 40
30682: PUSH
30683: LD_INT 10
30685: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30686: LD_VAR 0 2
30690: PUSH
30691: LD_INT 1
30693: ARRAY
30694: PPUSH
30695: CALL_OW 310
30699: NOT
30700: IFFALSE 30747
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30702: CALL_OW 45
30706: PPUSH
30707: LD_VAR 0 2
30711: PUSH
30712: LD_INT 1
30714: ARRAY
30715: PPUSH
30716: CALL_OW 250
30720: PPUSH
30721: LD_VAR 0 2
30725: PUSH
30726: LD_INT 1
30728: ARRAY
30729: PPUSH
30730: CALL_OW 251
30734: PPUSH
30735: LD_INT 12
30737: PPUSH
30738: LD_INT 1
30740: PPUSH
30741: CALL_OW 50
30745: GO 30759
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30747: CALL_OW 45
30751: PPUSH
30752: LD_INT 1
30754: PPUSH
30755: CALL_OW 51
// end ;
30759: GO 30633
30761: POP
30762: POP
// end ;
30763: PPOPN 2
30765: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30766: LD_EXP 61
30770: IFFALSE 30778
30772: PUSH
30773: LD_EXP 107
30777: AND
30778: IFFALSE 31000
30780: GO 30782
30782: DISABLE
30783: LD_INT 0
30785: PPUSH
30786: PPUSH
30787: PPUSH
30788: PPUSH
30789: PPUSH
30790: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30791: LD_ADDR_VAR 0 6
30795: PUSH
30796: LD_INT 22
30798: PUSH
30799: LD_OWVAR 2
30803: PUSH
30804: EMPTY
30805: LIST
30806: LIST
30807: PUSH
30808: LD_INT 21
30810: PUSH
30811: LD_INT 1
30813: PUSH
30814: EMPTY
30815: LIST
30816: LIST
30817: PUSH
30818: LD_INT 3
30820: PUSH
30821: LD_INT 23
30823: PUSH
30824: LD_INT 0
30826: PUSH
30827: EMPTY
30828: LIST
30829: LIST
30830: PUSH
30831: EMPTY
30832: LIST
30833: LIST
30834: PUSH
30835: EMPTY
30836: LIST
30837: LIST
30838: LIST
30839: PPUSH
30840: CALL_OW 69
30844: ST_TO_ADDR
// if not tmp then
30845: LD_VAR 0 6
30849: NOT
30850: IFFALSE 30854
// exit ;
30852: GO 31000
// s1 := rand ( 1 , 4 ) ;
30854: LD_ADDR_VAR 0 2
30858: PUSH
30859: LD_INT 1
30861: PPUSH
30862: LD_INT 4
30864: PPUSH
30865: CALL_OW 12
30869: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30870: LD_ADDR_VAR 0 4
30874: PUSH
30875: LD_VAR 0 6
30879: PUSH
30880: LD_INT 1
30882: ARRAY
30883: PPUSH
30884: LD_VAR 0 2
30888: PPUSH
30889: CALL_OW 259
30893: ST_TO_ADDR
// if s1 = 1 then
30894: LD_VAR 0 2
30898: PUSH
30899: LD_INT 1
30901: EQUAL
30902: IFFALSE 30922
// s2 := rand ( 2 , 4 ) else
30904: LD_ADDR_VAR 0 3
30908: PUSH
30909: LD_INT 2
30911: PPUSH
30912: LD_INT 4
30914: PPUSH
30915: CALL_OW 12
30919: ST_TO_ADDR
30920: GO 30930
// s2 := 1 ;
30922: LD_ADDR_VAR 0 3
30926: PUSH
30927: LD_INT 1
30929: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30930: LD_ADDR_VAR 0 5
30934: PUSH
30935: LD_VAR 0 6
30939: PUSH
30940: LD_INT 1
30942: ARRAY
30943: PPUSH
30944: LD_VAR 0 3
30948: PPUSH
30949: CALL_OW 259
30953: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30954: LD_VAR 0 6
30958: PUSH
30959: LD_INT 1
30961: ARRAY
30962: PPUSH
30963: LD_VAR 0 2
30967: PPUSH
30968: LD_VAR 0 5
30972: PPUSH
30973: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30977: LD_VAR 0 6
30981: PUSH
30982: LD_INT 1
30984: ARRAY
30985: PPUSH
30986: LD_VAR 0 3
30990: PPUSH
30991: LD_VAR 0 4
30995: PPUSH
30996: CALL_OW 237
// end ;
31000: PPOPN 6
31002: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
31003: LD_EXP 61
31007: IFFALSE 31015
31009: PUSH
31010: LD_EXP 108
31014: AND
31015: IFFALSE 31094
31017: GO 31019
31019: DISABLE
31020: LD_INT 0
31022: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
31023: LD_ADDR_VAR 0 1
31027: PUSH
31028: LD_INT 22
31030: PUSH
31031: LD_OWVAR 2
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: PUSH
31040: LD_INT 30
31042: PUSH
31043: LD_INT 3
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: PUSH
31050: EMPTY
31051: LIST
31052: LIST
31053: PPUSH
31054: CALL_OW 69
31058: ST_TO_ADDR
// if not tmp then
31059: LD_VAR 0 1
31063: NOT
31064: IFFALSE 31068
// exit ;
31066: GO 31094
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31068: LD_VAR 0 1
31072: PUSH
31073: LD_INT 1
31075: PPUSH
31076: LD_VAR 0 1
31080: PPUSH
31081: CALL_OW 12
31085: ARRAY
31086: PPUSH
31087: LD_INT 1
31089: PPUSH
31090: CALL_OW 234
// end ;
31094: PPOPN 1
31096: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
31097: LD_EXP 61
31101: IFFALSE 31109
31103: PUSH
31104: LD_EXP 109
31108: AND
31109: IFFALSE 31221
31111: GO 31113
31113: DISABLE
31114: LD_INT 0
31116: PPUSH
31117: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
31118: LD_ADDR_VAR 0 2
31122: PUSH
31123: LD_INT 22
31125: PUSH
31126: LD_OWVAR 2
31130: PUSH
31131: EMPTY
31132: LIST
31133: LIST
31134: PUSH
31135: LD_INT 2
31137: PUSH
31138: LD_INT 30
31140: PUSH
31141: LD_INT 27
31143: PUSH
31144: EMPTY
31145: LIST
31146: LIST
31147: PUSH
31148: LD_INT 30
31150: PUSH
31151: LD_INT 26
31153: PUSH
31154: EMPTY
31155: LIST
31156: LIST
31157: PUSH
31158: LD_INT 30
31160: PUSH
31161: LD_INT 28
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: PUSH
31168: EMPTY
31169: LIST
31170: LIST
31171: LIST
31172: LIST
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: PPUSH
31178: CALL_OW 69
31182: ST_TO_ADDR
// if not tmp then
31183: LD_VAR 0 2
31187: NOT
31188: IFFALSE 31192
// exit ;
31190: GO 31221
// for i in tmp do
31192: LD_ADDR_VAR 0 1
31196: PUSH
31197: LD_VAR 0 2
31201: PUSH
31202: FOR_IN
31203: IFFALSE 31219
// SetLives ( i , 1 ) ;
31205: LD_VAR 0 1
31209: PPUSH
31210: LD_INT 1
31212: PPUSH
31213: CALL_OW 234
31217: GO 31202
31219: POP
31220: POP
// end ;
31221: PPOPN 2
31223: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31224: LD_EXP 61
31228: IFFALSE 31236
31230: PUSH
31231: LD_EXP 110
31235: AND
31236: IFFALSE 31523
31238: GO 31240
31240: DISABLE
31241: LD_INT 0
31243: PPUSH
31244: PPUSH
31245: PPUSH
// begin i := rand ( 1 , 7 ) ;
31246: LD_ADDR_VAR 0 1
31250: PUSH
31251: LD_INT 1
31253: PPUSH
31254: LD_INT 7
31256: PPUSH
31257: CALL_OW 12
31261: ST_TO_ADDR
// case i of 1 :
31262: LD_VAR 0 1
31266: PUSH
31267: LD_INT 1
31269: DOUBLE
31270: EQUAL
31271: IFTRUE 31275
31273: GO 31285
31275: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31276: LD_STRING earthquake(getX(game), 0, 32)
31278: PPUSH
31279: CALL_OW 559
31283: GO 31523
31285: LD_INT 2
31287: DOUBLE
31288: EQUAL
31289: IFTRUE 31293
31291: GO 31307
31293: POP
// begin ToLua ( displayStucuk(); ) ;
31294: LD_STRING displayStucuk();
31296: PPUSH
31297: CALL_OW 559
// ResetFog ;
31301: CALL_OW 335
// end ; 3 :
31305: GO 31523
31307: LD_INT 3
31309: DOUBLE
31310: EQUAL
31311: IFTRUE 31315
31313: GO 31419
31315: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31316: LD_ADDR_VAR 0 2
31320: PUSH
31321: LD_INT 22
31323: PUSH
31324: LD_OWVAR 2
31328: PUSH
31329: EMPTY
31330: LIST
31331: LIST
31332: PUSH
31333: LD_INT 25
31335: PUSH
31336: LD_INT 1
31338: PUSH
31339: EMPTY
31340: LIST
31341: LIST
31342: PUSH
31343: EMPTY
31344: LIST
31345: LIST
31346: PPUSH
31347: CALL_OW 69
31351: ST_TO_ADDR
// if not tmp then
31352: LD_VAR 0 2
31356: NOT
31357: IFFALSE 31361
// exit ;
31359: GO 31523
// un := tmp [ rand ( 1 , tmp ) ] ;
31361: LD_ADDR_VAR 0 3
31365: PUSH
31366: LD_VAR 0 2
31370: PUSH
31371: LD_INT 1
31373: PPUSH
31374: LD_VAR 0 2
31378: PPUSH
31379: CALL_OW 12
31383: ARRAY
31384: ST_TO_ADDR
// if Crawls ( un ) then
31385: LD_VAR 0 3
31389: PPUSH
31390: CALL_OW 318
31394: IFFALSE 31405
// ComWalk ( un ) ;
31396: LD_VAR 0 3
31400: PPUSH
31401: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31405: LD_VAR 0 3
31409: PPUSH
31410: LD_INT 8
31412: PPUSH
31413: CALL_OW 336
// end ; 4 :
31417: GO 31523
31419: LD_INT 4
31421: DOUBLE
31422: EQUAL
31423: IFTRUE 31427
31425: GO 31501
31427: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31428: LD_ADDR_VAR 0 2
31432: PUSH
31433: LD_INT 22
31435: PUSH
31436: LD_OWVAR 2
31440: PUSH
31441: EMPTY
31442: LIST
31443: LIST
31444: PUSH
31445: LD_INT 30
31447: PUSH
31448: LD_INT 29
31450: PUSH
31451: EMPTY
31452: LIST
31453: LIST
31454: PUSH
31455: EMPTY
31456: LIST
31457: LIST
31458: PPUSH
31459: CALL_OW 69
31463: ST_TO_ADDR
// if not tmp then
31464: LD_VAR 0 2
31468: NOT
31469: IFFALSE 31473
// exit ;
31471: GO 31523
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31473: LD_VAR 0 2
31477: PUSH
31478: LD_INT 1
31480: ARRAY
31481: PPUSH
31482: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31486: LD_VAR 0 2
31490: PUSH
31491: LD_INT 1
31493: ARRAY
31494: PPUSH
31495: CALL_OW 65
// end ; 5 .. 7 :
31499: GO 31523
31501: LD_INT 5
31503: DOUBLE
31504: GREATEREQUAL
31505: IFFALSE 31513
31507: LD_INT 7
31509: DOUBLE
31510: LESSEQUAL
31511: IFTRUE 31515
31513: GO 31522
31515: POP
// StreamSibBomb ; end ;
31516: CALL 27704 0 0
31520: GO 31523
31522: POP
// end ;
31523: PPOPN 3
31525: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31526: LD_EXP 61
31530: IFFALSE 31538
31532: PUSH
31533: LD_EXP 111
31537: AND
31538: IFFALSE 31694
31540: GO 31542
31542: DISABLE
31543: LD_INT 0
31545: PPUSH
31546: PPUSH
31547: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31548: LD_ADDR_VAR 0 2
31552: PUSH
31553: LD_INT 81
31555: PUSH
31556: LD_OWVAR 2
31560: PUSH
31561: EMPTY
31562: LIST
31563: LIST
31564: PUSH
31565: LD_INT 2
31567: PUSH
31568: LD_INT 21
31570: PUSH
31571: LD_INT 1
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PUSH
31578: LD_INT 21
31580: PUSH
31581: LD_INT 2
31583: PUSH
31584: EMPTY
31585: LIST
31586: LIST
31587: PUSH
31588: EMPTY
31589: LIST
31590: LIST
31591: LIST
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: PPUSH
31597: CALL_OW 69
31601: ST_TO_ADDR
// if not tmp then
31602: LD_VAR 0 2
31606: NOT
31607: IFFALSE 31611
// exit ;
31609: GO 31694
// p := 0 ;
31611: LD_ADDR_VAR 0 3
31615: PUSH
31616: LD_INT 0
31618: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31619: LD_INT 35
31621: PPUSH
31622: CALL_OW 67
// p := p + 1 ;
31626: LD_ADDR_VAR 0 3
31630: PUSH
31631: LD_VAR 0 3
31635: PUSH
31636: LD_INT 1
31638: PLUS
31639: ST_TO_ADDR
// for i in tmp do
31640: LD_ADDR_VAR 0 1
31644: PUSH
31645: LD_VAR 0 2
31649: PUSH
31650: FOR_IN
31651: IFFALSE 31682
// if GetLives ( i ) < 1000 then
31653: LD_VAR 0 1
31657: PPUSH
31658: CALL_OW 256
31662: PUSH
31663: LD_INT 1000
31665: LESS
31666: IFFALSE 31680
// SetLives ( i , 1000 ) ;
31668: LD_VAR 0 1
31672: PPUSH
31673: LD_INT 1000
31675: PPUSH
31676: CALL_OW 234
31680: GO 31650
31682: POP
31683: POP
// until p > 20 ;
31684: LD_VAR 0 3
31688: PUSH
31689: LD_INT 20
31691: GREATER
31692: IFFALSE 31619
// end ;
31694: PPOPN 3
31696: END
// every 0 0$1 trigger StreamModeActive and sTime do
31697: LD_EXP 61
31701: IFFALSE 31709
31703: PUSH
31704: LD_EXP 112
31708: AND
31709: IFFALSE 31744
31711: GO 31713
31713: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31714: LD_INT 28
31716: PPUSH
31717: LD_OWVAR 2
31721: PPUSH
31722: LD_INT 2
31724: PPUSH
31725: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31729: LD_INT 30
31731: PPUSH
31732: LD_OWVAR 2
31736: PPUSH
31737: LD_INT 2
31739: PPUSH
31740: CALL_OW 322
// end ;
31744: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31745: LD_EXP 61
31749: IFFALSE 31757
31751: PUSH
31752: LD_EXP 113
31756: AND
31757: IFFALSE 31878
31759: GO 31761
31761: DISABLE
31762: LD_INT 0
31764: PPUSH
31765: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31766: LD_ADDR_VAR 0 2
31770: PUSH
31771: LD_INT 22
31773: PUSH
31774: LD_OWVAR 2
31778: PUSH
31779: EMPTY
31780: LIST
31781: LIST
31782: PUSH
31783: LD_INT 21
31785: PUSH
31786: LD_INT 1
31788: PUSH
31789: EMPTY
31790: LIST
31791: LIST
31792: PUSH
31793: LD_INT 3
31795: PUSH
31796: LD_INT 23
31798: PUSH
31799: LD_INT 0
31801: PUSH
31802: EMPTY
31803: LIST
31804: LIST
31805: PUSH
31806: EMPTY
31807: LIST
31808: LIST
31809: PUSH
31810: EMPTY
31811: LIST
31812: LIST
31813: LIST
31814: PPUSH
31815: CALL_OW 69
31819: ST_TO_ADDR
// if not tmp then
31820: LD_VAR 0 2
31824: NOT
31825: IFFALSE 31829
// exit ;
31827: GO 31878
// for i in tmp do
31829: LD_ADDR_VAR 0 1
31833: PUSH
31834: LD_VAR 0 2
31838: PUSH
31839: FOR_IN
31840: IFFALSE 31876
// begin if Crawls ( i ) then
31842: LD_VAR 0 1
31846: PPUSH
31847: CALL_OW 318
31851: IFFALSE 31862
// ComWalk ( i ) ;
31853: LD_VAR 0 1
31857: PPUSH
31858: CALL_OW 138
// SetClass ( i , 2 ) ;
31862: LD_VAR 0 1
31866: PPUSH
31867: LD_INT 2
31869: PPUSH
31870: CALL_OW 336
// end ;
31874: GO 31839
31876: POP
31877: POP
// end ;
31878: PPOPN 2
31880: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31881: LD_EXP 61
31885: IFFALSE 31893
31887: PUSH
31888: LD_EXP 114
31892: AND
31893: IFFALSE 32183
31895: GO 31897
31897: DISABLE
31898: LD_INT 0
31900: PPUSH
31901: PPUSH
31902: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31903: LD_OWVAR 2
31907: PPUSH
31908: LD_INT 9
31910: PPUSH
31911: LD_INT 1
31913: PPUSH
31914: LD_INT 1
31916: PPUSH
31917: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31921: LD_INT 9
31923: PPUSH
31924: LD_OWVAR 2
31928: PPUSH
31929: CALL_OW 343
// uc_side := 9 ;
31933: LD_ADDR_OWVAR 20
31937: PUSH
31938: LD_INT 9
31940: ST_TO_ADDR
// uc_nation := 2 ;
31941: LD_ADDR_OWVAR 21
31945: PUSH
31946: LD_INT 2
31948: ST_TO_ADDR
// hc_name := Dark Warrior ;
31949: LD_ADDR_OWVAR 26
31953: PUSH
31954: LD_STRING Dark Warrior
31956: ST_TO_ADDR
// hc_gallery :=  ;
31957: LD_ADDR_OWVAR 33
31961: PUSH
31962: LD_STRING 
31964: ST_TO_ADDR
// hc_noskilllimit := true ;
31965: LD_ADDR_OWVAR 76
31969: PUSH
31970: LD_INT 1
31972: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31973: LD_ADDR_OWVAR 31
31977: PUSH
31978: LD_INT 30
31980: PUSH
31981: LD_INT 30
31983: PUSH
31984: LD_INT 30
31986: PUSH
31987: LD_INT 30
31989: PUSH
31990: EMPTY
31991: LIST
31992: LIST
31993: LIST
31994: LIST
31995: ST_TO_ADDR
// un := CreateHuman ;
31996: LD_ADDR_VAR 0 3
32000: PUSH
32001: CALL_OW 44
32005: ST_TO_ADDR
// hc_noskilllimit := false ;
32006: LD_ADDR_OWVAR 76
32010: PUSH
32011: LD_INT 0
32013: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32014: LD_VAR 0 3
32018: PPUSH
32019: LD_INT 1
32021: PPUSH
32022: CALL_OW 51
// ToLua ( playRanger() ) ;
32026: LD_STRING playRanger()
32028: PPUSH
32029: CALL_OW 559
// p := 0 ;
32033: LD_ADDR_VAR 0 2
32037: PUSH
32038: LD_INT 0
32040: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32041: LD_INT 35
32043: PPUSH
32044: CALL_OW 67
// p := p + 1 ;
32048: LD_ADDR_VAR 0 2
32052: PUSH
32053: LD_VAR 0 2
32057: PUSH
32058: LD_INT 1
32060: PLUS
32061: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
32062: LD_VAR 0 3
32066: PPUSH
32067: CALL_OW 256
32071: PUSH
32072: LD_INT 1000
32074: LESS
32075: IFFALSE 32089
// SetLives ( un , 1000 ) ;
32077: LD_VAR 0 3
32081: PPUSH
32082: LD_INT 1000
32084: PPUSH
32085: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
32089: LD_VAR 0 3
32093: PPUSH
32094: LD_INT 81
32096: PUSH
32097: LD_OWVAR 2
32101: PUSH
32102: EMPTY
32103: LIST
32104: LIST
32105: PUSH
32106: LD_INT 91
32108: PUSH
32109: LD_VAR 0 3
32113: PUSH
32114: LD_INT 30
32116: PUSH
32117: EMPTY
32118: LIST
32119: LIST
32120: LIST
32121: PUSH
32122: EMPTY
32123: LIST
32124: LIST
32125: PPUSH
32126: CALL_OW 69
32130: PPUSH
32131: LD_VAR 0 3
32135: PPUSH
32136: CALL_OW 74
32140: PPUSH
32141: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
32145: LD_VAR 0 2
32149: PUSH
32150: LD_INT 80
32152: GREATER
32153: IFTRUE 32166
32155: PUSH
32156: LD_VAR 0 3
32160: PPUSH
32161: CALL_OW 301
32165: OR
32166: IFFALSE 32041
// if un then
32168: LD_VAR 0 3
32172: IFFALSE 32183
// RemoveUnit ( un ) ;
32174: LD_VAR 0 3
32178: PPUSH
32179: CALL_OW 64
// end ;
32183: PPOPN 3
32185: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
32186: LD_EXP 115
32190: IFFALSE 32306
32192: GO 32194
32194: DISABLE
32195: LD_INT 0
32197: PPUSH
32198: PPUSH
32199: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32200: LD_ADDR_VAR 0 2
32204: PUSH
32205: LD_INT 81
32207: PUSH
32208: LD_OWVAR 2
32212: PUSH
32213: EMPTY
32214: LIST
32215: LIST
32216: PUSH
32217: LD_INT 21
32219: PUSH
32220: LD_INT 1
32222: PUSH
32223: EMPTY
32224: LIST
32225: LIST
32226: PUSH
32227: EMPTY
32228: LIST
32229: LIST
32230: PPUSH
32231: CALL_OW 69
32235: ST_TO_ADDR
// ToLua ( playComputer() ) ;
32236: LD_STRING playComputer()
32238: PPUSH
32239: CALL_OW 559
// if not tmp then
32243: LD_VAR 0 2
32247: NOT
32248: IFFALSE 32252
// exit ;
32250: GO 32306
// for i in tmp do
32252: LD_ADDR_VAR 0 1
32256: PUSH
32257: LD_VAR 0 2
32261: PUSH
32262: FOR_IN
32263: IFFALSE 32304
// for j := 1 to 4 do
32265: LD_ADDR_VAR 0 3
32269: PUSH
32270: DOUBLE
32271: LD_INT 1
32273: DEC
32274: ST_TO_ADDR
32275: LD_INT 4
32277: PUSH
32278: FOR_TO
32279: IFFALSE 32300
// SetSkill ( i , j , 10 ) ;
32281: LD_VAR 0 1
32285: PPUSH
32286: LD_VAR 0 3
32290: PPUSH
32291: LD_INT 10
32293: PPUSH
32294: CALL_OW 237
32298: GO 32278
32300: POP
32301: POP
32302: GO 32262
32304: POP
32305: POP
// end ;
32306: PPOPN 3
32308: END
// every 0 0$1 trigger s30 do var i , tmp ;
32309: LD_EXP 116
32313: IFFALSE 32382
32315: GO 32317
32317: DISABLE
32318: LD_INT 0
32320: PPUSH
32321: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32322: LD_ADDR_VAR 0 2
32326: PUSH
32327: LD_INT 22
32329: PUSH
32330: LD_OWVAR 2
32334: PUSH
32335: EMPTY
32336: LIST
32337: LIST
32338: PPUSH
32339: CALL_OW 69
32343: ST_TO_ADDR
// if not tmp then
32344: LD_VAR 0 2
32348: NOT
32349: IFFALSE 32353
// exit ;
32351: GO 32382
// for i in tmp do
32353: LD_ADDR_VAR 0 1
32357: PUSH
32358: LD_VAR 0 2
32362: PUSH
32363: FOR_IN
32364: IFFALSE 32380
// SetLives ( i , 300 ) ;
32366: LD_VAR 0 1
32370: PPUSH
32371: LD_INT 300
32373: PPUSH
32374: CALL_OW 234
32378: GO 32363
32380: POP
32381: POP
// end ;
32382: PPOPN 2
32384: END
// every 0 0$1 trigger s60 do var i , tmp ;
32385: LD_EXP 117
32389: IFFALSE 32458
32391: GO 32393
32393: DISABLE
32394: LD_INT 0
32396: PPUSH
32397: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32398: LD_ADDR_VAR 0 2
32402: PUSH
32403: LD_INT 22
32405: PUSH
32406: LD_OWVAR 2
32410: PUSH
32411: EMPTY
32412: LIST
32413: LIST
32414: PPUSH
32415: CALL_OW 69
32419: ST_TO_ADDR
// if not tmp then
32420: LD_VAR 0 2
32424: NOT
32425: IFFALSE 32429
// exit ;
32427: GO 32458
// for i in tmp do
32429: LD_ADDR_VAR 0 1
32433: PUSH
32434: LD_VAR 0 2
32438: PUSH
32439: FOR_IN
32440: IFFALSE 32456
// SetLives ( i , 600 ) ;
32442: LD_VAR 0 1
32446: PPUSH
32447: LD_INT 600
32449: PPUSH
32450: CALL_OW 234
32454: GO 32439
32456: POP
32457: POP
// end ;
32458: PPOPN 2
32460: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32461: LD_INT 0
32463: PPUSH
// case cmd of 301 :
32464: LD_VAR 0 1
32468: PUSH
32469: LD_INT 301
32471: DOUBLE
32472: EQUAL
32473: IFTRUE 32477
32475: GO 32509
32477: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32478: LD_VAR 0 6
32482: PPUSH
32483: LD_VAR 0 7
32487: PPUSH
32488: LD_VAR 0 8
32492: PPUSH
32493: LD_VAR 0 4
32497: PPUSH
32498: LD_VAR 0 5
32502: PPUSH
32503: CALL 33722 0 5
32507: GO 32630
32509: LD_INT 302
32511: DOUBLE
32512: EQUAL
32513: IFTRUE 32517
32515: GO 32554
32517: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32518: LD_VAR 0 6
32522: PPUSH
32523: LD_VAR 0 7
32527: PPUSH
32528: LD_VAR 0 8
32532: PPUSH
32533: LD_VAR 0 9
32537: PPUSH
32538: LD_VAR 0 4
32542: PPUSH
32543: LD_VAR 0 5
32547: PPUSH
32548: CALL 33813 0 6
32552: GO 32630
32554: LD_INT 303
32556: DOUBLE
32557: EQUAL
32558: IFTRUE 32562
32560: GO 32599
32562: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32563: LD_VAR 0 6
32567: PPUSH
32568: LD_VAR 0 7
32572: PPUSH
32573: LD_VAR 0 8
32577: PPUSH
32578: LD_VAR 0 9
32582: PPUSH
32583: LD_VAR 0 4
32587: PPUSH
32588: LD_VAR 0 5
32592: PPUSH
32593: CALL 32635 0 6
32597: GO 32630
32599: LD_INT 304
32601: DOUBLE
32602: EQUAL
32603: IFTRUE 32607
32605: GO 32629
32607: POP
// hHackTeleport ( unit , x , y ) ; end ;
32608: LD_VAR 0 2
32612: PPUSH
32613: LD_VAR 0 4
32617: PPUSH
32618: LD_VAR 0 5
32622: PPUSH
32623: CALL 34406 0 3
32627: GO 32630
32629: POP
// end ;
32630: LD_VAR 0 12
32634: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32635: LD_INT 0
32637: PPUSH
32638: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32639: LD_VAR 0 1
32643: PUSH
32644: LD_INT 1
32646: LESS
32647: IFTRUE 32659
32649: PUSH
32650: LD_VAR 0 1
32654: PUSH
32655: LD_INT 3
32657: GREATER
32658: OR
32659: IFTRUE 32677
32661: PUSH
32662: LD_VAR 0 5
32666: PPUSH
32667: LD_VAR 0 6
32671: PPUSH
32672: CALL_OW 428
32676: OR
32677: IFFALSE 32681
// exit ;
32679: GO 33409
// uc_side := your_side ;
32681: LD_ADDR_OWVAR 20
32685: PUSH
32686: LD_OWVAR 2
32690: ST_TO_ADDR
// uc_nation := nation ;
32691: LD_ADDR_OWVAR 21
32695: PUSH
32696: LD_VAR 0 1
32700: ST_TO_ADDR
// bc_level = 1 ;
32701: LD_ADDR_OWVAR 43
32705: PUSH
32706: LD_INT 1
32708: ST_TO_ADDR
// case btype of 1 :
32709: LD_VAR 0 2
32713: PUSH
32714: LD_INT 1
32716: DOUBLE
32717: EQUAL
32718: IFTRUE 32722
32720: GO 32733
32722: POP
// bc_type := b_depot ; 2 :
32723: LD_ADDR_OWVAR 42
32727: PUSH
32728: LD_INT 0
32730: ST_TO_ADDR
32731: GO 33353
32733: LD_INT 2
32735: DOUBLE
32736: EQUAL
32737: IFTRUE 32741
32739: GO 32752
32741: POP
// bc_type := b_warehouse ; 3 :
32742: LD_ADDR_OWVAR 42
32746: PUSH
32747: LD_INT 1
32749: ST_TO_ADDR
32750: GO 33353
32752: LD_INT 3
32754: DOUBLE
32755: EQUAL
32756: IFTRUE 32760
32758: GO 32771
32760: POP
// bc_type := b_lab ; 4 .. 9 :
32761: LD_ADDR_OWVAR 42
32765: PUSH
32766: LD_INT 6
32768: ST_TO_ADDR
32769: GO 33353
32771: LD_INT 4
32773: DOUBLE
32774: GREATEREQUAL
32775: IFFALSE 32783
32777: LD_INT 9
32779: DOUBLE
32780: LESSEQUAL
32781: IFTRUE 32785
32783: GO 32845
32785: POP
// begin bc_type := b_lab_half ;
32786: LD_ADDR_OWVAR 42
32790: PUSH
32791: LD_INT 7
32793: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32794: LD_ADDR_OWVAR 44
32798: PUSH
32799: LD_INT 10
32801: PUSH
32802: LD_INT 11
32804: PUSH
32805: LD_INT 12
32807: PUSH
32808: LD_INT 15
32810: PUSH
32811: LD_INT 14
32813: PUSH
32814: LD_INT 13
32816: PUSH
32817: EMPTY
32818: LIST
32819: LIST
32820: LIST
32821: LIST
32822: LIST
32823: LIST
32824: PUSH
32825: LD_VAR 0 2
32829: PUSH
32830: LD_INT 3
32832: MINUS
32833: ARRAY
32834: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
32835: LD_ADDR_OWVAR 45
32839: PUSH
32840: LD_INT 9
32842: ST_TO_ADDR
// end ; 10 .. 13 :
32843: GO 33353
32845: LD_INT 10
32847: DOUBLE
32848: GREATEREQUAL
32849: IFFALSE 32857
32851: LD_INT 13
32853: DOUBLE
32854: LESSEQUAL
32855: IFTRUE 32859
32857: GO 32936
32859: POP
// begin bc_type := b_lab_full ;
32860: LD_ADDR_OWVAR 42
32864: PUSH
32865: LD_INT 8
32867: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32868: LD_ADDR_OWVAR 44
32872: PUSH
32873: LD_INT 10
32875: PUSH
32876: LD_INT 12
32878: PUSH
32879: LD_INT 14
32881: PUSH
32882: LD_INT 13
32884: PUSH
32885: EMPTY
32886: LIST
32887: LIST
32888: LIST
32889: LIST
32890: PUSH
32891: LD_VAR 0 2
32895: PUSH
32896: LD_INT 9
32898: MINUS
32899: ARRAY
32900: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32901: LD_ADDR_OWVAR 45
32905: PUSH
32906: LD_INT 11
32908: PUSH
32909: LD_INT 15
32911: PUSH
32912: LD_INT 12
32914: PUSH
32915: LD_INT 15
32917: PUSH
32918: EMPTY
32919: LIST
32920: LIST
32921: LIST
32922: LIST
32923: PUSH
32924: LD_VAR 0 2
32928: PUSH
32929: LD_INT 9
32931: MINUS
32932: ARRAY
32933: ST_TO_ADDR
// end ; 14 :
32934: GO 33353
32936: LD_INT 14
32938: DOUBLE
32939: EQUAL
32940: IFTRUE 32944
32942: GO 32955
32944: POP
// bc_type := b_workshop ; 15 :
32945: LD_ADDR_OWVAR 42
32949: PUSH
32950: LD_INT 2
32952: ST_TO_ADDR
32953: GO 33353
32955: LD_INT 15
32957: DOUBLE
32958: EQUAL
32959: IFTRUE 32963
32961: GO 32974
32963: POP
// bc_type := b_factory ; 16 :
32964: LD_ADDR_OWVAR 42
32968: PUSH
32969: LD_INT 3
32971: ST_TO_ADDR
32972: GO 33353
32974: LD_INT 16
32976: DOUBLE
32977: EQUAL
32978: IFTRUE 32982
32980: GO 32993
32982: POP
// bc_type := b_ext_gun ; 17 :
32983: LD_ADDR_OWVAR 42
32987: PUSH
32988: LD_INT 17
32990: ST_TO_ADDR
32991: GO 33353
32993: LD_INT 17
32995: DOUBLE
32996: EQUAL
32997: IFTRUE 33001
32999: GO 33029
33001: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
33002: LD_ADDR_OWVAR 42
33006: PUSH
33007: LD_INT 19
33009: PUSH
33010: LD_INT 23
33012: PUSH
33013: LD_INT 19
33015: PUSH
33016: EMPTY
33017: LIST
33018: LIST
33019: LIST
33020: PUSH
33021: LD_VAR 0 1
33025: ARRAY
33026: ST_TO_ADDR
33027: GO 33353
33029: LD_INT 18
33031: DOUBLE
33032: EQUAL
33033: IFTRUE 33037
33035: GO 33048
33037: POP
// bc_type := b_ext_radar ; 19 :
33038: LD_ADDR_OWVAR 42
33042: PUSH
33043: LD_INT 20
33045: ST_TO_ADDR
33046: GO 33353
33048: LD_INT 19
33050: DOUBLE
33051: EQUAL
33052: IFTRUE 33056
33054: GO 33067
33056: POP
// bc_type := b_ext_radio ; 20 :
33057: LD_ADDR_OWVAR 42
33061: PUSH
33062: LD_INT 22
33064: ST_TO_ADDR
33065: GO 33353
33067: LD_INT 20
33069: DOUBLE
33070: EQUAL
33071: IFTRUE 33075
33073: GO 33086
33075: POP
// bc_type := b_ext_siberium ; 21 :
33076: LD_ADDR_OWVAR 42
33080: PUSH
33081: LD_INT 21
33083: ST_TO_ADDR
33084: GO 33353
33086: LD_INT 21
33088: DOUBLE
33089: EQUAL
33090: IFTRUE 33094
33092: GO 33105
33094: POP
// bc_type := b_ext_computer ; 22 :
33095: LD_ADDR_OWVAR 42
33099: PUSH
33100: LD_INT 24
33102: ST_TO_ADDR
33103: GO 33353
33105: LD_INT 22
33107: DOUBLE
33108: EQUAL
33109: IFTRUE 33113
33111: GO 33124
33113: POP
// bc_type := b_ext_track ; 23 :
33114: LD_ADDR_OWVAR 42
33118: PUSH
33119: LD_INT 16
33121: ST_TO_ADDR
33122: GO 33353
33124: LD_INT 23
33126: DOUBLE
33127: EQUAL
33128: IFTRUE 33132
33130: GO 33143
33132: POP
// bc_type := b_ext_laser ; 24 :
33133: LD_ADDR_OWVAR 42
33137: PUSH
33138: LD_INT 25
33140: ST_TO_ADDR
33141: GO 33353
33143: LD_INT 24
33145: DOUBLE
33146: EQUAL
33147: IFTRUE 33151
33149: GO 33162
33151: POP
// bc_type := b_control_tower ; 25 :
33152: LD_ADDR_OWVAR 42
33156: PUSH
33157: LD_INT 36
33159: ST_TO_ADDR
33160: GO 33353
33162: LD_INT 25
33164: DOUBLE
33165: EQUAL
33166: IFTRUE 33170
33168: GO 33181
33170: POP
// bc_type := b_breastwork ; 26 :
33171: LD_ADDR_OWVAR 42
33175: PUSH
33176: LD_INT 31
33178: ST_TO_ADDR
33179: GO 33353
33181: LD_INT 26
33183: DOUBLE
33184: EQUAL
33185: IFTRUE 33189
33187: GO 33200
33189: POP
// bc_type := b_bunker ; 27 :
33190: LD_ADDR_OWVAR 42
33194: PUSH
33195: LD_INT 32
33197: ST_TO_ADDR
33198: GO 33353
33200: LD_INT 27
33202: DOUBLE
33203: EQUAL
33204: IFTRUE 33208
33206: GO 33219
33208: POP
// bc_type := b_turret ; 28 :
33209: LD_ADDR_OWVAR 42
33213: PUSH
33214: LD_INT 33
33216: ST_TO_ADDR
33217: GO 33353
33219: LD_INT 28
33221: DOUBLE
33222: EQUAL
33223: IFTRUE 33227
33225: GO 33238
33227: POP
// bc_type := b_armoury ; 29 :
33228: LD_ADDR_OWVAR 42
33232: PUSH
33233: LD_INT 4
33235: ST_TO_ADDR
33236: GO 33353
33238: LD_INT 29
33240: DOUBLE
33241: EQUAL
33242: IFTRUE 33246
33244: GO 33257
33246: POP
// bc_type := b_barracks ; 30 :
33247: LD_ADDR_OWVAR 42
33251: PUSH
33252: LD_INT 5
33254: ST_TO_ADDR
33255: GO 33353
33257: LD_INT 30
33259: DOUBLE
33260: EQUAL
33261: IFTRUE 33265
33263: GO 33276
33265: POP
// bc_type := b_solar_power ; 31 :
33266: LD_ADDR_OWVAR 42
33270: PUSH
33271: LD_INT 27
33273: ST_TO_ADDR
33274: GO 33353
33276: LD_INT 31
33278: DOUBLE
33279: EQUAL
33280: IFTRUE 33284
33282: GO 33295
33284: POP
// bc_type := b_oil_power ; 32 :
33285: LD_ADDR_OWVAR 42
33289: PUSH
33290: LD_INT 26
33292: ST_TO_ADDR
33293: GO 33353
33295: LD_INT 32
33297: DOUBLE
33298: EQUAL
33299: IFTRUE 33303
33301: GO 33314
33303: POP
// bc_type := b_siberite_power ; 33 :
33304: LD_ADDR_OWVAR 42
33308: PUSH
33309: LD_INT 28
33311: ST_TO_ADDR
33312: GO 33353
33314: LD_INT 33
33316: DOUBLE
33317: EQUAL
33318: IFTRUE 33322
33320: GO 33333
33322: POP
// bc_type := b_oil_mine ; 34 :
33323: LD_ADDR_OWVAR 42
33327: PUSH
33328: LD_INT 29
33330: ST_TO_ADDR
33331: GO 33353
33333: LD_INT 34
33335: DOUBLE
33336: EQUAL
33337: IFTRUE 33341
33339: GO 33352
33341: POP
// bc_type := b_siberite_mine ; end ;
33342: LD_ADDR_OWVAR 42
33346: PUSH
33347: LD_INT 30
33349: ST_TO_ADDR
33350: GO 33353
33352: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33353: LD_ADDR_VAR 0 8
33357: PUSH
33358: LD_VAR 0 5
33362: PPUSH
33363: LD_VAR 0 6
33367: PPUSH
33368: LD_VAR 0 3
33372: PPUSH
33373: CALL_OW 47
33377: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33378: LD_OWVAR 42
33382: PUSH
33383: LD_INT 32
33385: PUSH
33386: LD_INT 33
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: IN
33393: IFFALSE 33409
// PlaceWeaponTurret ( b , weapon ) ;
33395: LD_VAR 0 8
33399: PPUSH
33400: LD_VAR 0 4
33404: PPUSH
33405: CALL_OW 431
// end ;
33409: LD_VAR 0 7
33413: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33414: LD_INT 0
33416: PPUSH
33417: PPUSH
33418: PPUSH
33419: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33420: LD_ADDR_VAR 0 4
33424: PUSH
33425: LD_INT 22
33427: PUSH
33428: LD_OWVAR 2
33432: PUSH
33433: EMPTY
33434: LIST
33435: LIST
33436: PUSH
33437: LD_INT 2
33439: PUSH
33440: LD_INT 30
33442: PUSH
33443: LD_INT 0
33445: PUSH
33446: EMPTY
33447: LIST
33448: LIST
33449: PUSH
33450: LD_INT 30
33452: PUSH
33453: LD_INT 1
33455: PUSH
33456: EMPTY
33457: LIST
33458: LIST
33459: PUSH
33460: EMPTY
33461: LIST
33462: LIST
33463: LIST
33464: PUSH
33465: EMPTY
33466: LIST
33467: LIST
33468: PPUSH
33469: CALL_OW 69
33473: ST_TO_ADDR
// if not tmp then
33474: LD_VAR 0 4
33478: NOT
33479: IFFALSE 33483
// exit ;
33481: GO 33542
// for i in tmp do
33483: LD_ADDR_VAR 0 2
33487: PUSH
33488: LD_VAR 0 4
33492: PUSH
33493: FOR_IN
33494: IFFALSE 33540
// for j = 1 to 3 do
33496: LD_ADDR_VAR 0 3
33500: PUSH
33501: DOUBLE
33502: LD_INT 1
33504: DEC
33505: ST_TO_ADDR
33506: LD_INT 3
33508: PUSH
33509: FOR_TO
33510: IFFALSE 33536
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33512: LD_VAR 0 2
33516: PPUSH
33517: CALL_OW 274
33521: PPUSH
33522: LD_VAR 0 3
33526: PPUSH
33527: LD_INT 99999
33529: PPUSH
33530: CALL_OW 277
33534: GO 33509
33536: POP
33537: POP
33538: GO 33493
33540: POP
33541: POP
// end ;
33542: LD_VAR 0 1
33546: RET
// export function hHackSetLevel10 ; var i , j ; begin
33547: LD_INT 0
33549: PPUSH
33550: PPUSH
33551: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33552: LD_ADDR_VAR 0 2
33556: PUSH
33557: LD_INT 21
33559: PUSH
33560: LD_INT 1
33562: PUSH
33563: EMPTY
33564: LIST
33565: LIST
33566: PPUSH
33567: CALL_OW 69
33571: PUSH
33572: FOR_IN
33573: IFFALSE 33625
// if IsSelected ( i ) then
33575: LD_VAR 0 2
33579: PPUSH
33580: CALL_OW 306
33584: IFFALSE 33623
// begin for j := 1 to 4 do
33586: LD_ADDR_VAR 0 3
33590: PUSH
33591: DOUBLE
33592: LD_INT 1
33594: DEC
33595: ST_TO_ADDR
33596: LD_INT 4
33598: PUSH
33599: FOR_TO
33600: IFFALSE 33621
// SetSkill ( i , j , 10 ) ;
33602: LD_VAR 0 2
33606: PPUSH
33607: LD_VAR 0 3
33611: PPUSH
33612: LD_INT 10
33614: PPUSH
33615: CALL_OW 237
33619: GO 33599
33621: POP
33622: POP
// end ;
33623: GO 33572
33625: POP
33626: POP
// end ;
33627: LD_VAR 0 1
33631: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33632: LD_INT 0
33634: PPUSH
33635: PPUSH
33636: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33637: LD_ADDR_VAR 0 2
33641: PUSH
33642: LD_INT 22
33644: PUSH
33645: LD_OWVAR 2
33649: PUSH
33650: EMPTY
33651: LIST
33652: LIST
33653: PUSH
33654: LD_INT 21
33656: PUSH
33657: LD_INT 1
33659: PUSH
33660: EMPTY
33661: LIST
33662: LIST
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: PPUSH
33668: CALL_OW 69
33672: PUSH
33673: FOR_IN
33674: IFFALSE 33715
// begin for j := 1 to 4 do
33676: LD_ADDR_VAR 0 3
33680: PUSH
33681: DOUBLE
33682: LD_INT 1
33684: DEC
33685: ST_TO_ADDR
33686: LD_INT 4
33688: PUSH
33689: FOR_TO
33690: IFFALSE 33711
// SetSkill ( i , j , 10 ) ;
33692: LD_VAR 0 2
33696: PPUSH
33697: LD_VAR 0 3
33701: PPUSH
33702: LD_INT 10
33704: PPUSH
33705: CALL_OW 237
33709: GO 33689
33711: POP
33712: POP
// end ;
33713: GO 33673
33715: POP
33716: POP
// end ;
33717: LD_VAR 0 1
33721: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33722: LD_INT 0
33724: PPUSH
// uc_side := your_side ;
33725: LD_ADDR_OWVAR 20
33729: PUSH
33730: LD_OWVAR 2
33734: ST_TO_ADDR
// uc_nation := nation ;
33735: LD_ADDR_OWVAR 21
33739: PUSH
33740: LD_VAR 0 1
33744: ST_TO_ADDR
// InitHc ;
33745: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33749: LD_INT 0
33751: PPUSH
33752: LD_VAR 0 2
33756: PPUSH
33757: LD_VAR 0 3
33761: PPUSH
33762: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33766: LD_VAR 0 4
33770: PPUSH
33771: LD_VAR 0 5
33775: PPUSH
33776: CALL_OW 428
33780: PUSH
33781: LD_INT 0
33783: EQUAL
33784: IFFALSE 33808
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33786: CALL_OW 44
33790: PPUSH
33791: LD_VAR 0 4
33795: PPUSH
33796: LD_VAR 0 5
33800: PPUSH
33801: LD_INT 1
33803: PPUSH
33804: CALL_OW 48
// end ;
33808: LD_VAR 0 6
33812: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33813: LD_INT 0
33815: PPUSH
33816: PPUSH
// uc_side := your_side ;
33817: LD_ADDR_OWVAR 20
33821: PUSH
33822: LD_OWVAR 2
33826: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33827: LD_VAR 0 1
33831: PUSH
33832: LD_INT 1
33834: PUSH
33835: LD_INT 2
33837: PUSH
33838: LD_INT 3
33840: PUSH
33841: LD_INT 4
33843: PUSH
33844: LD_INT 5
33846: PUSH
33847: EMPTY
33848: LIST
33849: LIST
33850: LIST
33851: LIST
33852: LIST
33853: IN
33854: IFFALSE 33866
// uc_nation := nation_american else
33856: LD_ADDR_OWVAR 21
33860: PUSH
33861: LD_INT 1
33863: ST_TO_ADDR
33864: GO 33909
// if chassis in [ 11 , 12 , 13 , 14 ] then
33866: LD_VAR 0 1
33870: PUSH
33871: LD_INT 11
33873: PUSH
33874: LD_INT 12
33876: PUSH
33877: LD_INT 13
33879: PUSH
33880: LD_INT 14
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: LIST
33887: LIST
33888: IN
33889: IFFALSE 33901
// uc_nation := nation_arabian else
33891: LD_ADDR_OWVAR 21
33895: PUSH
33896: LD_INT 2
33898: ST_TO_ADDR
33899: GO 33909
// uc_nation := nation_russian ;
33901: LD_ADDR_OWVAR 21
33905: PUSH
33906: LD_INT 3
33908: ST_TO_ADDR
// vc_chassis := chassis ;
33909: LD_ADDR_OWVAR 37
33913: PUSH
33914: LD_VAR 0 1
33918: ST_TO_ADDR
// vc_engine := engine ;
33919: LD_ADDR_OWVAR 39
33923: PUSH
33924: LD_VAR 0 2
33928: ST_TO_ADDR
// vc_control := control ;
33929: LD_ADDR_OWVAR 38
33933: PUSH
33934: LD_VAR 0 3
33938: ST_TO_ADDR
// vc_weapon := weapon ;
33939: LD_ADDR_OWVAR 40
33943: PUSH
33944: LD_VAR 0 4
33948: ST_TO_ADDR
// un := CreateVehicle ;
33949: LD_ADDR_VAR 0 8
33953: PUSH
33954: CALL_OW 45
33958: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33959: LD_VAR 0 8
33963: PPUSH
33964: LD_INT 0
33966: PPUSH
33967: LD_INT 5
33969: PPUSH
33970: CALL_OW 12
33974: PPUSH
33975: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33979: LD_VAR 0 8
33983: PPUSH
33984: LD_VAR 0 5
33988: PPUSH
33989: LD_VAR 0 6
33993: PPUSH
33994: LD_INT 1
33996: PPUSH
33997: CALL_OW 48
// end ;
34001: LD_VAR 0 7
34005: RET
// export hInvincible ; every 1 do
34006: GO 34008
34008: DISABLE
// hInvincible := [ ] ;
34009: LD_ADDR_EXP 118
34013: PUSH
34014: EMPTY
34015: ST_TO_ADDR
34016: END
// every 10 do var i ;
34017: GO 34019
34019: DISABLE
34020: LD_INT 0
34022: PPUSH
// begin enable ;
34023: ENABLE
// if not hInvincible then
34024: LD_EXP 118
34028: NOT
34029: IFFALSE 34033
// exit ;
34031: GO 34077
// for i in hInvincible do
34033: LD_ADDR_VAR 0 1
34037: PUSH
34038: LD_EXP 118
34042: PUSH
34043: FOR_IN
34044: IFFALSE 34075
// if GetLives ( i ) < 1000 then
34046: LD_VAR 0 1
34050: PPUSH
34051: CALL_OW 256
34055: PUSH
34056: LD_INT 1000
34058: LESS
34059: IFFALSE 34073
// SetLives ( i , 1000 ) ;
34061: LD_VAR 0 1
34065: PPUSH
34066: LD_INT 1000
34068: PPUSH
34069: CALL_OW 234
34073: GO 34043
34075: POP
34076: POP
// end ;
34077: PPOPN 1
34079: END
// export function hHackInvincible ; var i ; begin
34080: LD_INT 0
34082: PPUSH
34083: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
34084: LD_ADDR_VAR 0 2
34088: PUSH
34089: LD_INT 2
34091: PUSH
34092: LD_INT 21
34094: PUSH
34095: LD_INT 1
34097: PUSH
34098: EMPTY
34099: LIST
34100: LIST
34101: PUSH
34102: LD_INT 21
34104: PUSH
34105: LD_INT 2
34107: PUSH
34108: EMPTY
34109: LIST
34110: LIST
34111: PUSH
34112: EMPTY
34113: LIST
34114: LIST
34115: LIST
34116: PPUSH
34117: CALL_OW 69
34121: PUSH
34122: FOR_IN
34123: IFFALSE 34184
// if IsSelected ( i ) then
34125: LD_VAR 0 2
34129: PPUSH
34130: CALL_OW 306
34134: IFFALSE 34182
// begin if i in hInvincible then
34136: LD_VAR 0 2
34140: PUSH
34141: LD_EXP 118
34145: IN
34146: IFFALSE 34166
// hInvincible := hInvincible diff i else
34148: LD_ADDR_EXP 118
34152: PUSH
34153: LD_EXP 118
34157: PUSH
34158: LD_VAR 0 2
34162: DIFF
34163: ST_TO_ADDR
34164: GO 34182
// hInvincible := hInvincible union i ;
34166: LD_ADDR_EXP 118
34170: PUSH
34171: LD_EXP 118
34175: PUSH
34176: LD_VAR 0 2
34180: UNION
34181: ST_TO_ADDR
// end ;
34182: GO 34122
34184: POP
34185: POP
// end ;
34186: LD_VAR 0 1
34190: RET
// export function hHackInvisible ; var i , j ; begin
34191: LD_INT 0
34193: PPUSH
34194: PPUSH
34195: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34196: LD_ADDR_VAR 0 2
34200: PUSH
34201: LD_INT 21
34203: PUSH
34204: LD_INT 1
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: PPUSH
34211: CALL_OW 69
34215: PUSH
34216: FOR_IN
34217: IFFALSE 34241
// if IsSelected ( i ) then
34219: LD_VAR 0 2
34223: PPUSH
34224: CALL_OW 306
34228: IFFALSE 34239
// ComForceInvisible ( i ) ;
34230: LD_VAR 0 2
34234: PPUSH
34235: CALL_OW 496
34239: GO 34216
34241: POP
34242: POP
// end ;
34243: LD_VAR 0 1
34247: RET
// export function hHackChangeYourSide ; begin
34248: LD_INT 0
34250: PPUSH
// if your_side = 8 then
34251: LD_OWVAR 2
34255: PUSH
34256: LD_INT 8
34258: EQUAL
34259: IFFALSE 34271
// your_side := 0 else
34261: LD_ADDR_OWVAR 2
34265: PUSH
34266: LD_INT 0
34268: ST_TO_ADDR
34269: GO 34285
// your_side := your_side + 1 ;
34271: LD_ADDR_OWVAR 2
34275: PUSH
34276: LD_OWVAR 2
34280: PUSH
34281: LD_INT 1
34283: PLUS
34284: ST_TO_ADDR
// end ;
34285: LD_VAR 0 1
34289: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34290: LD_INT 0
34292: PPUSH
34293: PPUSH
34294: PPUSH
// for i in all_units do
34295: LD_ADDR_VAR 0 2
34299: PUSH
34300: LD_OWVAR 3
34304: PUSH
34305: FOR_IN
34306: IFFALSE 34384
// if IsSelected ( i ) then
34308: LD_VAR 0 2
34312: PPUSH
34313: CALL_OW 306
34317: IFFALSE 34382
// begin j := GetSide ( i ) ;
34319: LD_ADDR_VAR 0 3
34323: PUSH
34324: LD_VAR 0 2
34328: PPUSH
34329: CALL_OW 255
34333: ST_TO_ADDR
// if j = 8 then
34334: LD_VAR 0 3
34338: PUSH
34339: LD_INT 8
34341: EQUAL
34342: IFFALSE 34354
// j := 0 else
34344: LD_ADDR_VAR 0 3
34348: PUSH
34349: LD_INT 0
34351: ST_TO_ADDR
34352: GO 34368
// j := j + 1 ;
34354: LD_ADDR_VAR 0 3
34358: PUSH
34359: LD_VAR 0 3
34363: PUSH
34364: LD_INT 1
34366: PLUS
34367: ST_TO_ADDR
// SetSide ( i , j ) ;
34368: LD_VAR 0 2
34372: PPUSH
34373: LD_VAR 0 3
34377: PPUSH
34378: CALL_OW 235
// end ;
34382: GO 34305
34384: POP
34385: POP
// end ;
34386: LD_VAR 0 1
34390: RET
// export function hHackFog ; begin
34391: LD_INT 0
34393: PPUSH
// FogOff ( true ) ;
34394: LD_INT 1
34396: PPUSH
34397: CALL_OW 344
// end ;
34401: LD_VAR 0 1
34405: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34406: LD_INT 0
34408: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34409: LD_VAR 0 1
34413: PPUSH
34414: LD_VAR 0 2
34418: PPUSH
34419: LD_VAR 0 3
34423: PPUSH
34424: LD_INT 1
34426: PPUSH
34427: LD_INT 1
34429: PPUSH
34430: CALL_OW 483
// CenterOnXY ( x , y ) ;
34434: LD_VAR 0 2
34438: PPUSH
34439: LD_VAR 0 3
34443: PPUSH
34444: CALL_OW 84
// end ;
34448: LD_VAR 0 4
34452: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34453: LD_INT 0
34455: PPUSH
34456: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34457: LD_VAR 0 1
34461: NOT
34462: IFTRUE 34481
34464: PUSH
34465: LD_VAR 0 2
34469: PPUSH
34470: LD_VAR 0 3
34474: PPUSH
34475: CALL_OW 488
34479: NOT
34480: OR
34481: IFTRUE 34516
34483: PUSH
34484: LD_VAR 0 1
34488: PPUSH
34489: CALL_OW 266
34493: PUSH
34494: LD_INT 3
34496: NONEQUAL
34497: IFFALSE 34515
34499: PUSH
34500: LD_VAR 0 1
34504: PPUSH
34505: CALL_OW 247
34509: PUSH
34510: LD_INT 1
34512: EQUAL
34513: NOT
34514: AND
34515: OR
34516: IFFALSE 34520
// exit ;
34518: GO 34802
// if GetType ( factory ) = unit_human then
34520: LD_VAR 0 1
34524: PPUSH
34525: CALL_OW 247
34529: PUSH
34530: LD_INT 1
34532: EQUAL
34533: IFFALSE 34550
// factory := IsInUnit ( factory ) ;
34535: LD_ADDR_VAR 0 1
34539: PUSH
34540: LD_VAR 0 1
34544: PPUSH
34545: CALL_OW 310
34549: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34550: LD_VAR 0 1
34554: PPUSH
34555: CALL_OW 266
34559: PUSH
34560: LD_INT 3
34562: NONEQUAL
34563: IFFALSE 34567
// exit ;
34565: GO 34802
// for i := 1 to Count ( factoryWaypoints ) do
34567: LD_ADDR_VAR 0 5
34571: PUSH
34572: DOUBLE
34573: LD_INT 1
34575: DEC
34576: ST_TO_ADDR
34577: LD_EXP 119
34581: PPUSH
34582: CALL 43534 0 1
34586: PUSH
34587: FOR_TO
34588: IFFALSE 34750
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
34590: LD_VAR 0 2
34594: PPUSH
34595: LD_VAR 0 3
34599: PPUSH
34600: CALL_OW 428
34604: PUSH
34605: LD_EXP 119
34609: PUSH
34610: LD_VAR 0 5
34614: ARRAY
34615: PUSH
34616: LD_INT 2
34618: ARRAY
34619: EQUAL
34620: IFFALSE 34652
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
34622: LD_ADDR_EXP 119
34626: PUSH
34627: LD_EXP 119
34631: PPUSH
34632: LD_VAR 0 5
34636: PPUSH
34637: CALL_OW 3
34641: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34642: CALL 34807 0 0
// exit ;
34646: POP
34647: POP
34648: GO 34802
// end else
34650: GO 34748
// if factory = factoryWaypoints [ i ] [ 2 ] then
34652: LD_VAR 0 1
34656: PUSH
34657: LD_EXP 119
34661: PUSH
34662: LD_VAR 0 5
34666: ARRAY
34667: PUSH
34668: LD_INT 2
34670: ARRAY
34671: EQUAL
34672: IFFALSE 34748
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
34674: LD_ADDR_EXP 119
34678: PUSH
34679: LD_EXP 119
34683: PPUSH
34684: LD_VAR 0 5
34688: PPUSH
34689: CALL_OW 3
34693: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
34694: LD_ADDR_EXP 119
34698: PUSH
34699: LD_EXP 119
34703: PPUSH
34704: LD_VAR 0 1
34708: PPUSH
34709: CALL_OW 255
34713: PUSH
34714: LD_VAR 0 1
34718: PUSH
34719: LD_VAR 0 2
34723: PUSH
34724: LD_VAR 0 3
34728: PUSH
34729: EMPTY
34730: LIST
34731: LIST
34732: LIST
34733: LIST
34734: PPUSH
34735: CALL 79466 0 2
34739: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34740: CALL 34807 0 0
// exit ;
34744: POP
34745: POP
34746: GO 34802
// end ; end ;
34748: GO 34587
34750: POP
34751: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
34752: LD_ADDR_EXP 119
34756: PUSH
34757: LD_EXP 119
34761: PPUSH
34762: LD_VAR 0 1
34766: PPUSH
34767: CALL_OW 255
34771: PUSH
34772: LD_VAR 0 1
34776: PUSH
34777: LD_VAR 0 2
34781: PUSH
34782: LD_VAR 0 3
34786: PUSH
34787: EMPTY
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: PPUSH
34793: CALL 79466 0 2
34797: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34798: CALL 34807 0 0
// end ;
34802: LD_VAR 0 4
34806: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34807: LD_INT 0
34809: PPUSH
34810: PPUSH
34811: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34812: LD_STRING resetFactoryWaypoint();
34814: PPUSH
34815: CALL_OW 559
// if factoryWaypoints then
34819: LD_EXP 119
34823: IFFALSE 34944
// begin list := factoryWaypoints ;
34825: LD_ADDR_VAR 0 3
34829: PUSH
34830: LD_EXP 119
34834: ST_TO_ADDR
// for i := 1 to list do
34835: LD_ADDR_VAR 0 2
34839: PUSH
34840: DOUBLE
34841: LD_INT 1
34843: DEC
34844: ST_TO_ADDR
34845: LD_VAR 0 3
34849: PUSH
34850: FOR_TO
34851: IFFALSE 34942
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34853: LD_STRING setFactoryWaypointXY(
34855: PUSH
34856: LD_VAR 0 3
34860: PUSH
34861: LD_VAR 0 2
34865: ARRAY
34866: PUSH
34867: LD_INT 1
34869: ARRAY
34870: STR
34871: PUSH
34872: LD_STRING ,
34874: STR
34875: PUSH
34876: LD_VAR 0 3
34880: PUSH
34881: LD_VAR 0 2
34885: ARRAY
34886: PUSH
34887: LD_INT 2
34889: ARRAY
34890: STR
34891: PUSH
34892: LD_STRING ,
34894: STR
34895: PUSH
34896: LD_VAR 0 3
34900: PUSH
34901: LD_VAR 0 2
34905: ARRAY
34906: PUSH
34907: LD_INT 3
34909: ARRAY
34910: STR
34911: PUSH
34912: LD_STRING ,
34914: STR
34915: PUSH
34916: LD_VAR 0 3
34920: PUSH
34921: LD_VAR 0 2
34925: ARRAY
34926: PUSH
34927: LD_INT 4
34929: ARRAY
34930: STR
34931: PUSH
34932: LD_STRING )
34934: STR
34935: PPUSH
34936: CALL_OW 559
34940: GO 34850
34942: POP
34943: POP
// end ; end ;
34944: LD_VAR 0 1
34948: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34949: LD_INT 0
34951: PPUSH
// if HexInfo ( x , y ) = warehouse then
34952: LD_VAR 0 2
34956: PPUSH
34957: LD_VAR 0 3
34961: PPUSH
34962: CALL_OW 428
34966: PUSH
34967: LD_VAR 0 1
34971: EQUAL
34972: IFFALSE 34999
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34974: LD_ADDR_EXP 121
34978: PUSH
34979: LD_EXP 121
34983: PPUSH
34984: LD_VAR 0 1
34988: PPUSH
34989: LD_INT 0
34991: PPUSH
34992: CALL_OW 1
34996: ST_TO_ADDR
34997: GO 35050
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34999: LD_ADDR_EXP 121
35003: PUSH
35004: LD_EXP 121
35008: PPUSH
35009: LD_VAR 0 1
35013: PPUSH
35014: LD_VAR 0 1
35018: PPUSH
35019: CALL_OW 255
35023: PUSH
35024: LD_VAR 0 1
35028: PUSH
35029: LD_VAR 0 2
35033: PUSH
35034: LD_VAR 0 3
35038: PUSH
35039: EMPTY
35040: LIST
35041: LIST
35042: LIST
35043: LIST
35044: PPUSH
35045: CALL_OW 1
35049: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
35050: CALL 35059 0 0
// end ;
35054: LD_VAR 0 4
35058: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
35059: LD_INT 0
35061: PPUSH
35062: PPUSH
35063: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
35064: LD_STRING resetWarehouseGatheringPoints();
35066: PPUSH
35067: CALL_OW 559
// if warehouseGatheringPoints then
35071: LD_EXP 121
35075: IFFALSE 35201
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
35077: LD_ADDR_VAR 0 3
35081: PUSH
35082: LD_EXP 121
35086: PPUSH
35087: CALL 83400 0 1
35091: ST_TO_ADDR
// for i := 1 to list do
35092: LD_ADDR_VAR 0 2
35096: PUSH
35097: DOUBLE
35098: LD_INT 1
35100: DEC
35101: ST_TO_ADDR
35102: LD_VAR 0 3
35106: PUSH
35107: FOR_TO
35108: IFFALSE 35199
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35110: LD_STRING setWarehouseGatheringPointXY(
35112: PUSH
35113: LD_VAR 0 3
35117: PUSH
35118: LD_VAR 0 2
35122: ARRAY
35123: PUSH
35124: LD_INT 1
35126: ARRAY
35127: STR
35128: PUSH
35129: LD_STRING ,
35131: STR
35132: PUSH
35133: LD_VAR 0 3
35137: PUSH
35138: LD_VAR 0 2
35142: ARRAY
35143: PUSH
35144: LD_INT 2
35146: ARRAY
35147: STR
35148: PUSH
35149: LD_STRING ,
35151: STR
35152: PUSH
35153: LD_VAR 0 3
35157: PUSH
35158: LD_VAR 0 2
35162: ARRAY
35163: PUSH
35164: LD_INT 3
35166: ARRAY
35167: STR
35168: PUSH
35169: LD_STRING ,
35171: STR
35172: PUSH
35173: LD_VAR 0 3
35177: PUSH
35178: LD_VAR 0 2
35182: ARRAY
35183: PUSH
35184: LD_INT 4
35186: ARRAY
35187: STR
35188: PUSH
35189: LD_STRING )
35191: STR
35192: PPUSH
35193: CALL_OW 559
35197: GO 35107
35199: POP
35200: POP
// end ; end ;
35201: LD_VAR 0 1
35205: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
35206: LD_EXP 121
35210: IFFALSE 35905
35212: GO 35214
35214: DISABLE
35215: LD_INT 0
35217: PPUSH
35218: PPUSH
35219: PPUSH
35220: PPUSH
35221: PPUSH
35222: PPUSH
35223: PPUSH
35224: PPUSH
35225: PPUSH
// begin enable ;
35226: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
35227: LD_ADDR_VAR 0 3
35231: PUSH
35232: LD_EXP 121
35236: PPUSH
35237: CALL 83400 0 1
35241: ST_TO_ADDR
// if not list then
35242: LD_VAR 0 3
35246: NOT
35247: IFFALSE 35251
// exit ;
35249: GO 35905
// for i := 1 to list do
35251: LD_ADDR_VAR 0 1
35255: PUSH
35256: DOUBLE
35257: LD_INT 1
35259: DEC
35260: ST_TO_ADDR
35261: LD_VAR 0 3
35265: PUSH
35266: FOR_TO
35267: IFFALSE 35903
// begin depot := list [ i ] [ 2 ] ;
35269: LD_ADDR_VAR 0 8
35273: PUSH
35274: LD_VAR 0 3
35278: PUSH
35279: LD_VAR 0 1
35283: ARRAY
35284: PUSH
35285: LD_INT 2
35287: ARRAY
35288: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
35289: LD_ADDR_VAR 0 5
35293: PUSH
35294: LD_VAR 0 3
35298: PUSH
35299: LD_VAR 0 1
35303: ARRAY
35304: PUSH
35305: LD_INT 1
35307: ARRAY
35308: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
35309: LD_VAR 0 8
35313: PPUSH
35314: CALL_OW 301
35318: IFTRUE 35337
35320: PUSH
35321: LD_VAR 0 5
35325: PUSH
35326: LD_VAR 0 8
35330: PPUSH
35331: CALL_OW 255
35335: NONEQUAL
35336: OR
35337: IFFALSE 35366
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
35339: LD_ADDR_EXP 121
35343: PUSH
35344: LD_EXP 121
35348: PPUSH
35349: LD_VAR 0 8
35353: PPUSH
35354: LD_INT 0
35356: PPUSH
35357: CALL_OW 1
35361: ST_TO_ADDR
// exit ;
35362: POP
35363: POP
35364: GO 35905
// end ; x := list [ i ] [ 3 ] ;
35366: LD_ADDR_VAR 0 6
35370: PUSH
35371: LD_VAR 0 3
35375: PUSH
35376: LD_VAR 0 1
35380: ARRAY
35381: PUSH
35382: LD_INT 3
35384: ARRAY
35385: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
35386: LD_ADDR_VAR 0 7
35390: PUSH
35391: LD_VAR 0 3
35395: PUSH
35396: LD_VAR 0 1
35400: ARRAY
35401: PUSH
35402: LD_INT 4
35404: ARRAY
35405: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
35406: LD_ADDR_VAR 0 9
35410: PUSH
35411: LD_VAR 0 6
35415: PPUSH
35416: LD_VAR 0 7
35420: PPUSH
35421: LD_INT 16
35423: PPUSH
35424: CALL 81974 0 3
35428: ST_TO_ADDR
// if not cratesNearbyPoint then
35429: LD_VAR 0 9
35433: NOT
35434: IFFALSE 35440
// exit ;
35436: POP
35437: POP
35438: GO 35905
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35440: LD_ADDR_VAR 0 4
35444: PUSH
35445: LD_INT 22
35447: PUSH
35448: LD_VAR 0 5
35452: PUSH
35453: EMPTY
35454: LIST
35455: LIST
35456: PUSH
35457: LD_INT 3
35459: PUSH
35460: LD_INT 60
35462: PUSH
35463: EMPTY
35464: LIST
35465: PUSH
35466: EMPTY
35467: LIST
35468: LIST
35469: PUSH
35470: LD_INT 91
35472: PUSH
35473: LD_VAR 0 8
35477: PUSH
35478: LD_INT 6
35480: PUSH
35481: EMPTY
35482: LIST
35483: LIST
35484: LIST
35485: PUSH
35486: LD_INT 2
35488: PUSH
35489: LD_INT 25
35491: PUSH
35492: LD_INT 2
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: PUSH
35499: LD_INT 25
35501: PUSH
35502: LD_INT 16
35504: PUSH
35505: EMPTY
35506: LIST
35507: LIST
35508: PUSH
35509: EMPTY
35510: LIST
35511: LIST
35512: LIST
35513: PUSH
35514: EMPTY
35515: LIST
35516: LIST
35517: LIST
35518: LIST
35519: PPUSH
35520: CALL_OW 69
35524: PUSH
35525: LD_VAR 0 8
35529: PPUSH
35530: CALL_OW 313
35534: PPUSH
35535: LD_INT 3
35537: PUSH
35538: LD_INT 60
35540: PUSH
35541: EMPTY
35542: LIST
35543: PUSH
35544: EMPTY
35545: LIST
35546: LIST
35547: PUSH
35548: LD_INT 2
35550: PUSH
35551: LD_INT 25
35553: PUSH
35554: LD_INT 2
35556: PUSH
35557: EMPTY
35558: LIST
35559: LIST
35560: PUSH
35561: LD_INT 25
35563: PUSH
35564: LD_INT 16
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: PUSH
35571: EMPTY
35572: LIST
35573: LIST
35574: LIST
35575: PUSH
35576: EMPTY
35577: LIST
35578: LIST
35579: PPUSH
35580: CALL_OW 72
35584: UNION
35585: ST_TO_ADDR
// if tmp then
35586: LD_VAR 0 4
35590: IFFALSE 35670
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35592: LD_ADDR_VAR 0 4
35596: PUSH
35597: LD_VAR 0 4
35601: PPUSH
35602: LD_INT 3
35604: PPUSH
35605: CALL 79781 0 2
35609: ST_TO_ADDR
// for j in tmp do
35610: LD_ADDR_VAR 0 2
35614: PUSH
35615: LD_VAR 0 4
35619: PUSH
35620: FOR_IN
35621: IFFALSE 35664
// begin if IsInUnit ( j ) then
35623: LD_VAR 0 2
35627: PPUSH
35628: CALL_OW 310
35632: IFFALSE 35643
// ComExit ( j ) ;
35634: LD_VAR 0 2
35638: PPUSH
35639: CALL 79864 0 1
// AddComCollect ( j , x , y ) ;
35643: LD_VAR 0 2
35647: PPUSH
35648: LD_VAR 0 6
35652: PPUSH
35653: LD_VAR 0 7
35657: PPUSH
35658: CALL_OW 177
// end ;
35662: GO 35620
35664: POP
35665: POP
// exit ;
35666: POP
35667: POP
35668: GO 35905
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35670: LD_ADDR_VAR 0 4
35674: PUSH
35675: LD_INT 22
35677: PUSH
35678: LD_VAR 0 5
35682: PUSH
35683: EMPTY
35684: LIST
35685: LIST
35686: PUSH
35687: LD_INT 91
35689: PUSH
35690: LD_VAR 0 8
35694: PUSH
35695: LD_INT 8
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: LIST
35702: PUSH
35703: LD_INT 2
35705: PUSH
35706: LD_INT 34
35708: PUSH
35709: LD_INT 12
35711: PUSH
35712: EMPTY
35713: LIST
35714: LIST
35715: PUSH
35716: LD_INT 34
35718: PUSH
35719: LD_INT 51
35721: PUSH
35722: EMPTY
35723: LIST
35724: LIST
35725: PUSH
35726: LD_INT 34
35728: PUSH
35729: LD_INT 32
35731: PUSH
35732: EMPTY
35733: LIST
35734: LIST
35735: PUSH
35736: LD_INT 34
35738: PUSH
35739: LD_INT 89
35741: PUSH
35742: EMPTY
35743: LIST
35744: LIST
35745: PUSH
35746: EMPTY
35747: LIST
35748: LIST
35749: LIST
35750: LIST
35751: LIST
35752: PUSH
35753: EMPTY
35754: LIST
35755: LIST
35756: LIST
35757: PPUSH
35758: CALL_OW 69
35762: ST_TO_ADDR
// if tmp then
35763: LD_VAR 0 4
35767: IFFALSE 35901
// begin for j in tmp do
35769: LD_ADDR_VAR 0 2
35773: PUSH
35774: LD_VAR 0 4
35778: PUSH
35779: FOR_IN
35780: IFFALSE 35899
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35782: LD_VAR 0 2
35786: PPUSH
35787: CALL_OW 262
35791: PUSH
35792: LD_INT 3
35794: EQUAL
35795: IFTRUE 35812
35797: PUSH
35798: LD_VAR 0 2
35802: PPUSH
35803: CALL_OW 261
35807: PUSH
35808: LD_INT 20
35810: GREATER
35811: OR
35812: IFFALSE 35826
35814: PUSH
35815: LD_VAR 0 2
35819: PPUSH
35820: CALL_OW 314
35824: NOT
35825: AND
35826: IFFALSE 35856
35828: PUSH
35829: LD_VAR 0 2
35833: PPUSH
35834: CALL_OW 263
35838: PUSH
35839: LD_INT 1
35841: NONEQUAL
35842: IFTRUE 35855
35844: PUSH
35845: LD_VAR 0 2
35849: PPUSH
35850: CALL_OW 311
35854: OR
35855: AND
35856: IFFALSE 35897
// begin ComCollect ( j , x , y ) ;
35858: LD_VAR 0 2
35862: PPUSH
35863: LD_VAR 0 6
35867: PPUSH
35868: LD_VAR 0 7
35872: PPUSH
35873: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35877: LD_VAR 0 2
35881: PPUSH
35882: LD_VAR 0 8
35886: PPUSH
35887: CALL_OW 172
// exit ;
35891: POP
35892: POP
35893: POP
35894: POP
35895: GO 35905
// end ;
35897: GO 35779
35899: POP
35900: POP
// end ; end ;
35901: GO 35266
35903: POP
35904: POP
// end ; end_of_file
35905: PPOPN 9
35907: END
// export function SOS_UnitDestroyed ( un ) ; begin
35908: LD_INT 0
35910: PPUSH
// ComRadiation ( un ) ;
35911: LD_VAR 0 1
35915: PPUSH
35916: CALL 36997 0 1
// end ;
35920: LD_VAR 0 2
35924: RET
// export function SOS_UnitKamikazed ( un ) ; begin
35925: LD_INT 0
35927: PPUSH
// ComRadiation ( un ) ;
35928: LD_VAR 0 1
35932: PPUSH
35933: CALL 36997 0 1
// end ;
35937: LD_VAR 0 2
35941: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35942: LD_INT 0
35944: PPUSH
// end ;
35945: LD_VAR 0 4
35949: RET
// export function SOS_Command ( cmd ) ; begin
35950: LD_INT 0
35952: PPUSH
// end ;
35953: LD_VAR 0 2
35957: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35958: LD_INT 0
35960: PPUSH
// end ;
35961: LD_VAR 0 6
35965: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
35966: LD_INT 0
35968: PPUSH
35969: PPUSH
35970: PPUSH
35971: PPUSH
// if not vehicle or not factory then
35972: LD_VAR 0 1
35976: NOT
35977: IFTRUE 35986
35979: PUSH
35980: LD_VAR 0 2
35984: NOT
35985: OR
35986: IFFALSE 35990
// exit ;
35988: GO 36572
// if not factoryWaypoints then
35990: LD_EXP 119
35994: NOT
35995: IFFALSE 35999
// exit ;
35997: GO 36572
// for i := 1 to Count ( factoryWaypoints ) do
35999: LD_ADDR_VAR 0 4
36003: PUSH
36004: DOUBLE
36005: LD_INT 1
36007: DEC
36008: ST_TO_ADDR
36009: LD_EXP 119
36013: PPUSH
36014: CALL 43534 0 1
36018: PUSH
36019: FOR_TO
36020: IFFALSE 36570
// if factoryWaypoints [ i ] [ 2 ] = factory then
36022: LD_EXP 119
36026: PUSH
36027: LD_VAR 0 4
36031: ARRAY
36032: PUSH
36033: LD_INT 2
36035: ARRAY
36036: PUSH
36037: LD_VAR 0 2
36041: EQUAL
36042: IFFALSE 36568
// begin if GetControl ( vehicle ) = control_manual then
36044: LD_VAR 0 1
36048: PPUSH
36049: CALL_OW 263
36053: PUSH
36054: LD_INT 1
36056: EQUAL
36057: IFFALSE 36421
// begin driver := IsDrivenBy ( vehicle ) ;
36059: LD_ADDR_VAR 0 5
36063: PUSH
36064: LD_VAR 0 1
36068: PPUSH
36069: CALL_OW 311
36073: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
36074: LD_VAR 0 5
36078: PUSH
36079: LD_EXP 120
36083: IN
36084: IFTRUE 36098
36086: PUSH
36087: LD_VAR 0 1
36091: PUSH
36092: LD_EXP 120
36096: IN
36097: OR
36098: IFFALSE 36104
// exit ;
36100: POP
36101: POP
36102: GO 36572
// if not HasTask ( driver ) then
36104: LD_VAR 0 5
36108: PPUSH
36109: CALL_OW 314
36113: NOT
36114: IFFALSE 36419
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
36116: LD_ADDR_EXP 120
36120: PUSH
36121: LD_EXP 120
36125: PPUSH
36126: LD_VAR 0 5
36130: PPUSH
36131: CALL 79466 0 2
36135: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
36136: LD_ADDR_EXP 120
36140: PUSH
36141: LD_EXP 120
36145: PPUSH
36146: LD_VAR 0 1
36150: PPUSH
36151: CALL 79466 0 2
36155: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36156: LD_ADDR_VAR 0 6
36160: PUSH
36161: LD_EXP 119
36165: PUSH
36166: LD_VAR 0 4
36170: ARRAY
36171: PUSH
36172: LD_INT 3
36174: ARRAY
36175: PPUSH
36176: LD_EXP 119
36180: PUSH
36181: LD_VAR 0 4
36185: ARRAY
36186: PUSH
36187: LD_INT 4
36189: ARRAY
36190: PPUSH
36191: CALL_OW 428
36195: ST_TO_ADDR
// if hex then
36196: LD_VAR 0 6
36200: IFFALSE 36218
// ComMoveUnit ( driver , hex ) else
36202: LD_VAR 0 5
36206: PPUSH
36207: LD_VAR 0 6
36211: PPUSH
36212: CALL_OW 112
36216: GO 36302
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
36218: LD_VAR 0 1
36222: PPUSH
36223: LD_EXP 119
36227: PUSH
36228: LD_VAR 0 4
36232: ARRAY
36233: PUSH
36234: LD_INT 3
36236: ARRAY
36237: PPUSH
36238: LD_EXP 119
36242: PUSH
36243: LD_VAR 0 4
36247: ARRAY
36248: PUSH
36249: LD_INT 4
36251: ARRAY
36252: PPUSH
36253: CALL_OW 297
36257: PUSH
36258: LD_INT 0
36260: GREATER
36261: IFFALSE 36302
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36263: LD_VAR 0 5
36267: PPUSH
36268: LD_EXP 119
36272: PUSH
36273: LD_VAR 0 4
36277: ARRAY
36278: PUSH
36279: LD_INT 3
36281: ARRAY
36282: PPUSH
36283: LD_EXP 119
36287: PUSH
36288: LD_VAR 0 4
36292: ARRAY
36293: PUSH
36294: LD_INT 4
36296: ARRAY
36297: PPUSH
36298: CALL_OW 111
// AddComExitVehicle ( driver ) ;
36302: LD_VAR 0 5
36306: PPUSH
36307: CALL_OW 181
// if Multiplayer then
36311: LD_OWVAR 4
36315: IFFALSE 36364
// begin repeat wait ( 10 ) ;
36317: LD_INT 10
36319: PPUSH
36320: CALL_OW 67
// until not IsInUnit ( driver ) ;
36324: LD_VAR 0 5
36328: PPUSH
36329: CALL_OW 310
36333: NOT
36334: IFFALSE 36317
// if not HasTask ( driver ) then
36336: LD_VAR 0 5
36340: PPUSH
36341: CALL_OW 314
36345: NOT
36346: IFFALSE 36362
// ComEnterUnit ( driver , factory ) ;
36348: LD_VAR 0 5
36352: PPUSH
36353: LD_VAR 0 2
36357: PPUSH
36358: CALL_OW 120
// end else
36362: GO 36378
// AddComEnterUnit ( driver , factory ) ;
36364: LD_VAR 0 5
36368: PPUSH
36369: LD_VAR 0 2
36373: PPUSH
36374: CALL_OW 180
// wait ( 0 0$1 ) ;
36378: LD_INT 35
36380: PPUSH
36381: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
36385: LD_ADDR_EXP 120
36389: PUSH
36390: LD_EXP 120
36394: PUSH
36395: LD_VAR 0 5
36399: DIFF
36400: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
36401: LD_ADDR_EXP 120
36405: PUSH
36406: LD_EXP 120
36410: PUSH
36411: LD_VAR 0 1
36415: DIFF
36416: ST_TO_ADDR
// break ;
36417: GO 36570
// end ; end else
36419: GO 36568
// if GetControl ( vehicle ) = control_remote then
36421: LD_VAR 0 1
36425: PPUSH
36426: CALL_OW 263
36430: PUSH
36431: LD_INT 2
36433: EQUAL
36434: IFFALSE 36520
// begin wait ( 0 0$2 ) ;
36436: LD_INT 70
36438: PPUSH
36439: CALL_OW 67
// repeat wait ( 10 ) ;
36443: LD_INT 10
36445: PPUSH
36446: CALL_OW 67
// Connect ( vehicle ) ;
36450: LD_VAR 0 1
36454: PPUSH
36455: CALL 49778 0 1
// until IsControledBy ( vehicle ) ;
36459: LD_VAR 0 1
36463: PPUSH
36464: CALL_OW 312
36468: IFFALSE 36443
// wait ( 10 ) ;
36470: LD_INT 10
36472: PPUSH
36473: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36477: LD_VAR 0 1
36481: PPUSH
36482: LD_EXP 119
36486: PUSH
36487: LD_VAR 0 4
36491: ARRAY
36492: PUSH
36493: LD_INT 3
36495: ARRAY
36496: PPUSH
36497: LD_EXP 119
36501: PUSH
36502: LD_VAR 0 4
36506: ARRAY
36507: PUSH
36508: LD_INT 4
36510: ARRAY
36511: PPUSH
36512: CALL_OW 111
// break ;
36516: GO 36570
// end else
36518: GO 36568
// begin wait ( 0 0$3 ) ;
36520: LD_INT 105
36522: PPUSH
36523: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36527: LD_VAR 0 1
36531: PPUSH
36532: LD_EXP 119
36536: PUSH
36537: LD_VAR 0 4
36541: ARRAY
36542: PUSH
36543: LD_INT 3
36545: ARRAY
36546: PPUSH
36547: LD_EXP 119
36551: PUSH
36552: LD_VAR 0 4
36556: ARRAY
36557: PUSH
36558: LD_INT 4
36560: ARRAY
36561: PPUSH
36562: CALL_OW 111
// break ;
36566: GO 36570
// end ; end ;
36568: GO 36019
36570: POP
36571: POP
// end ;
36572: LD_VAR 0 3
36576: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
36577: LD_INT 0
36579: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
36580: LD_VAR 0 1
36584: PUSH
36585: LD_INT 250
36587: EQUAL
36588: IFFALSE 36605
36590: PUSH
36591: LD_VAR 0 2
36595: PPUSH
36596: CALL_OW 264
36600: PUSH
36601: LD_INT 81
36603: EQUAL
36604: AND
36605: IFFALSE 36626
// MinerPlaceMine ( unit , x , y ) ;
36607: LD_VAR 0 2
36611: PPUSH
36612: LD_VAR 0 4
36616: PPUSH
36617: LD_VAR 0 5
36621: PPUSH
36622: CALL 39758 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
36626: LD_VAR 0 1
36630: PUSH
36631: LD_INT 251
36633: EQUAL
36634: IFFALSE 36651
36636: PUSH
36637: LD_VAR 0 2
36641: PPUSH
36642: CALL_OW 264
36646: PUSH
36647: LD_INT 81
36649: EQUAL
36650: AND
36651: IFFALSE 36672
// MinerDetonateMine ( unit , x , y ) ;
36653: LD_VAR 0 2
36657: PPUSH
36658: LD_VAR 0 4
36662: PPUSH
36663: LD_VAR 0 5
36667: PPUSH
36668: CALL 40037 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
36672: LD_VAR 0 1
36676: PUSH
36677: LD_INT 252
36679: EQUAL
36680: IFFALSE 36697
36682: PUSH
36683: LD_VAR 0 2
36687: PPUSH
36688: CALL_OW 264
36692: PUSH
36693: LD_INT 81
36695: EQUAL
36696: AND
36697: IFFALSE 36718
// MinerCreateMinefield ( unit , x , y ) ;
36699: LD_VAR 0 2
36703: PPUSH
36704: LD_VAR 0 4
36708: PPUSH
36709: LD_VAR 0 5
36713: PPUSH
36714: CALL 40456 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
36718: LD_VAR 0 1
36722: PUSH
36723: LD_INT 253
36725: EQUAL
36726: IFFALSE 36743
36728: PUSH
36729: LD_VAR 0 2
36733: PPUSH
36734: CALL_OW 257
36738: PUSH
36739: LD_INT 5
36741: EQUAL
36742: AND
36743: IFFALSE 36764
// ComBinocular ( unit , x , y ) ;
36745: LD_VAR 0 2
36749: PPUSH
36750: LD_VAR 0 4
36754: PPUSH
36755: LD_VAR 0 5
36759: PPUSH
36760: CALL 40831 0 3
// if selectedUnit then
36764: LD_VAR 0 3
36768: IFFALSE 36828
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36770: LD_VAR 0 1
36774: PUSH
36775: LD_INT 254
36777: EQUAL
36778: IFFALSE 36795
36780: PUSH
36781: LD_VAR 0 2
36785: PPUSH
36786: CALL_OW 264
36790: PUSH
36791: LD_INT 99
36793: EQUAL
36794: AND
36795: IFFALSE 36812
36797: PUSH
36798: LD_VAR 0 3
36802: PPUSH
36803: CALL_OW 263
36807: PUSH
36808: LD_INT 3
36810: EQUAL
36811: AND
36812: IFFALSE 36828
// HackDestroyVehicle ( unit , selectedUnit ) ;
36814: LD_VAR 0 2
36818: PPUSH
36819: LD_VAR 0 3
36823: PPUSH
36824: CALL 39118 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36828: LD_VAR 0 1
36832: PUSH
36833: LD_INT 255
36835: EQUAL
36836: IFFALSE 36860
36838: PUSH
36839: LD_VAR 0 2
36843: PPUSH
36844: CALL_OW 264
36848: PUSH
36849: LD_INT 14
36851: PUSH
36852: LD_INT 53
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: IN
36859: AND
36860: IFFALSE 36878
36862: PUSH
36863: LD_VAR 0 4
36867: PPUSH
36868: LD_VAR 0 5
36872: PPUSH
36873: CALL_OW 488
36877: AND
36878: IFFALSE 36902
// CutTreeXYR ( unit , x , y , 12 ) ;
36880: LD_VAR 0 2
36884: PPUSH
36885: LD_VAR 0 4
36889: PPUSH
36890: LD_VAR 0 5
36894: PPUSH
36895: LD_INT 12
36897: PPUSH
36898: CALL 37093 0 4
// if cmd = 256 then
36902: LD_VAR 0 1
36906: PUSH
36907: LD_INT 256
36909: EQUAL
36910: IFFALSE 36931
// SetFactoryWaypoint ( unit , x , y ) ;
36912: LD_VAR 0 2
36916: PPUSH
36917: LD_VAR 0 4
36921: PPUSH
36922: LD_VAR 0 5
36926: PPUSH
36927: CALL 34453 0 3
// if cmd = 257 then
36931: LD_VAR 0 1
36935: PUSH
36936: LD_INT 257
36938: EQUAL
36939: IFFALSE 36960
// SetWarehouseGatheringPoint ( unit , x , y ) ;
36941: LD_VAR 0 2
36945: PPUSH
36946: LD_VAR 0 4
36950: PPUSH
36951: LD_VAR 0 5
36955: PPUSH
36956: CALL 34949 0 3
// if cmd = 258 then
36960: LD_VAR 0 1
36964: PUSH
36965: LD_INT 258
36967: EQUAL
36968: IFFALSE 36992
// BurnTreeXYR ( unit , x , y , 8 ) ;
36970: LD_VAR 0 2
36974: PPUSH
36975: LD_VAR 0 4
36979: PPUSH
36980: LD_VAR 0 5
36984: PPUSH
36985: LD_INT 8
36987: PPUSH
36988: CALL 37493 0 4
// end ;
36992: LD_VAR 0 6
36996: RET
// export function ComRadiation ( un ) ; var eff ; begin
36997: LD_INT 0
36999: PPUSH
37000: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
37001: LD_VAR 0 1
37005: PPUSH
37006: CALL_OW 264
37010: PUSH
37011: LD_INT 91
37013: NONEQUAL
37014: IFFALSE 37018
// exit ;
37016: GO 37088
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
37018: LD_INT 68
37020: PPUSH
37021: LD_VAR 0 1
37025: PPUSH
37026: CALL_OW 255
37030: PPUSH
37031: CALL_OW 321
37035: PUSH
37036: LD_INT 2
37038: EQUAL
37039: IFFALSE 37051
// eff := 50 else
37041: LD_ADDR_VAR 0 3
37045: PUSH
37046: LD_INT 50
37048: ST_TO_ADDR
37049: GO 37059
// eff := 25 ;
37051: LD_ADDR_VAR 0 3
37055: PUSH
37056: LD_INT 25
37058: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
37059: LD_VAR 0 1
37063: PPUSH
37064: CALL_OW 250
37068: PPUSH
37069: LD_VAR 0 1
37073: PPUSH
37074: CALL_OW 251
37078: PPUSH
37079: LD_VAR 0 3
37083: PPUSH
37084: CALL_OW 495
// end ;
37088: LD_VAR 0 2
37092: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
37093: LD_INT 0
37095: PPUSH
37096: PPUSH
37097: PPUSH
37098: PPUSH
37099: PPUSH
37100: PPUSH
37101: PPUSH
37102: PPUSH
37103: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
37104: LD_VAR 0 1
37108: PPUSH
37109: CALL_OW 302
37113: NOT
37114: IFTRUE 37133
37116: PUSH
37117: LD_VAR 0 2
37121: PPUSH
37122: LD_VAR 0 3
37126: PPUSH
37127: CALL_OW 488
37131: NOT
37132: OR
37133: IFTRUE 37142
37135: PUSH
37136: LD_VAR 0 4
37140: NOT
37141: OR
37142: IFFALSE 37146
// exit ;
37144: GO 37488
// list := [ ] ;
37146: LD_ADDR_VAR 0 13
37150: PUSH
37151: EMPTY
37152: ST_TO_ADDR
// if x - r < 0 then
37153: LD_VAR 0 2
37157: PUSH
37158: LD_VAR 0 4
37162: MINUS
37163: PUSH
37164: LD_INT 0
37166: LESS
37167: IFFALSE 37179
// min_x := 0 else
37169: LD_ADDR_VAR 0 7
37173: PUSH
37174: LD_INT 0
37176: ST_TO_ADDR
37177: GO 37195
// min_x := x - r ;
37179: LD_ADDR_VAR 0 7
37183: PUSH
37184: LD_VAR 0 2
37188: PUSH
37189: LD_VAR 0 4
37193: MINUS
37194: ST_TO_ADDR
// if y - r < 0 then
37195: LD_VAR 0 3
37199: PUSH
37200: LD_VAR 0 4
37204: MINUS
37205: PUSH
37206: LD_INT 0
37208: LESS
37209: IFFALSE 37221
// min_y := 0 else
37211: LD_ADDR_VAR 0 8
37215: PUSH
37216: LD_INT 0
37218: ST_TO_ADDR
37219: GO 37237
// min_y := y - r ;
37221: LD_ADDR_VAR 0 8
37225: PUSH
37226: LD_VAR 0 3
37230: PUSH
37231: LD_VAR 0 4
37235: MINUS
37236: ST_TO_ADDR
// max_x := x + r ;
37237: LD_ADDR_VAR 0 9
37241: PUSH
37242: LD_VAR 0 2
37246: PUSH
37247: LD_VAR 0 4
37251: PLUS
37252: ST_TO_ADDR
// max_y := y + r ;
37253: LD_ADDR_VAR 0 10
37257: PUSH
37258: LD_VAR 0 3
37262: PUSH
37263: LD_VAR 0 4
37267: PLUS
37268: ST_TO_ADDR
// for _x = min_x to max_x do
37269: LD_ADDR_VAR 0 11
37273: PUSH
37274: DOUBLE
37275: LD_VAR 0 7
37279: DEC
37280: ST_TO_ADDR
37281: LD_VAR 0 9
37285: PUSH
37286: FOR_TO
37287: IFFALSE 37406
// for _y = min_y to max_y do
37289: LD_ADDR_VAR 0 12
37293: PUSH
37294: DOUBLE
37295: LD_VAR 0 8
37299: DEC
37300: ST_TO_ADDR
37301: LD_VAR 0 10
37305: PUSH
37306: FOR_TO
37307: IFFALSE 37402
// begin if not ValidHex ( _x , _y ) then
37309: LD_VAR 0 11
37313: PPUSH
37314: LD_VAR 0 12
37318: PPUSH
37319: CALL_OW 488
37323: NOT
37324: IFFALSE 37328
// continue ;
37326: GO 37306
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37328: LD_VAR 0 11
37332: PPUSH
37333: LD_VAR 0 12
37337: PPUSH
37338: CALL_OW 351
37342: IFFALSE 37360
37344: PUSH
37345: LD_VAR 0 11
37349: PPUSH
37350: LD_VAR 0 12
37354: PPUSH
37355: CALL_OW 554
37359: AND
37360: IFFALSE 37400
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37362: LD_ADDR_VAR 0 13
37366: PUSH
37367: LD_VAR 0 13
37371: PPUSH
37372: LD_VAR 0 13
37376: PUSH
37377: LD_INT 1
37379: PLUS
37380: PPUSH
37381: LD_VAR 0 11
37385: PUSH
37386: LD_VAR 0 12
37390: PUSH
37391: EMPTY
37392: LIST
37393: LIST
37394: PPUSH
37395: CALL_OW 2
37399: ST_TO_ADDR
// end ;
37400: GO 37306
37402: POP
37403: POP
37404: GO 37286
37406: POP
37407: POP
// if not list then
37408: LD_VAR 0 13
37412: NOT
37413: IFFALSE 37417
// exit ;
37415: GO 37488
// for i in list do
37417: LD_ADDR_VAR 0 6
37421: PUSH
37422: LD_VAR 0 13
37426: PUSH
37427: FOR_IN
37428: IFFALSE 37486
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
37430: LD_VAR 0 1
37434: PPUSH
37435: LD_STRING M
37437: PUSH
37438: LD_VAR 0 6
37442: PUSH
37443: LD_INT 1
37445: ARRAY
37446: PUSH
37447: LD_VAR 0 6
37451: PUSH
37452: LD_INT 2
37454: ARRAY
37455: PUSH
37456: LD_INT 0
37458: PUSH
37459: LD_INT 0
37461: PUSH
37462: LD_INT 0
37464: PUSH
37465: LD_INT 0
37467: PUSH
37468: EMPTY
37469: LIST
37470: LIST
37471: LIST
37472: LIST
37473: LIST
37474: LIST
37475: LIST
37476: PUSH
37477: EMPTY
37478: LIST
37479: PPUSH
37480: CALL_OW 447
37484: GO 37427
37486: POP
37487: POP
// end ;
37488: LD_VAR 0 5
37492: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
37493: LD_INT 0
37495: PPUSH
37496: PPUSH
37497: PPUSH
37498: PPUSH
37499: PPUSH
37500: PPUSH
37501: PPUSH
37502: PPUSH
37503: PPUSH
37504: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
37505: LD_VAR 0 1
37509: PPUSH
37510: CALL_OW 302
37514: NOT
37515: IFTRUE 37534
37517: PUSH
37518: LD_VAR 0 2
37522: PPUSH
37523: LD_VAR 0 3
37527: PPUSH
37528: CALL_OW 488
37532: NOT
37533: OR
37534: IFTRUE 37543
37536: PUSH
37537: LD_VAR 0 4
37541: NOT
37542: OR
37543: IFFALSE 37547
// exit ;
37545: GO 38064
// list := [ ] ;
37547: LD_ADDR_VAR 0 13
37551: PUSH
37552: EMPTY
37553: ST_TO_ADDR
// if x - r < 0 then
37554: LD_VAR 0 2
37558: PUSH
37559: LD_VAR 0 4
37563: MINUS
37564: PUSH
37565: LD_INT 0
37567: LESS
37568: IFFALSE 37580
// min_x := 0 else
37570: LD_ADDR_VAR 0 7
37574: PUSH
37575: LD_INT 0
37577: ST_TO_ADDR
37578: GO 37596
// min_x := x - r ;
37580: LD_ADDR_VAR 0 7
37584: PUSH
37585: LD_VAR 0 2
37589: PUSH
37590: LD_VAR 0 4
37594: MINUS
37595: ST_TO_ADDR
// if y - r < 0 then
37596: LD_VAR 0 3
37600: PUSH
37601: LD_VAR 0 4
37605: MINUS
37606: PUSH
37607: LD_INT 0
37609: LESS
37610: IFFALSE 37622
// min_y := 0 else
37612: LD_ADDR_VAR 0 8
37616: PUSH
37617: LD_INT 0
37619: ST_TO_ADDR
37620: GO 37638
// min_y := y - r ;
37622: LD_ADDR_VAR 0 8
37626: PUSH
37627: LD_VAR 0 3
37631: PUSH
37632: LD_VAR 0 4
37636: MINUS
37637: ST_TO_ADDR
// max_x := x + r ;
37638: LD_ADDR_VAR 0 9
37642: PUSH
37643: LD_VAR 0 2
37647: PUSH
37648: LD_VAR 0 4
37652: PLUS
37653: ST_TO_ADDR
// max_y := y + r ;
37654: LD_ADDR_VAR 0 10
37658: PUSH
37659: LD_VAR 0 3
37663: PUSH
37664: LD_VAR 0 4
37668: PLUS
37669: ST_TO_ADDR
// for _x = min_x to max_x do
37670: LD_ADDR_VAR 0 11
37674: PUSH
37675: DOUBLE
37676: LD_VAR 0 7
37680: DEC
37681: ST_TO_ADDR
37682: LD_VAR 0 9
37686: PUSH
37687: FOR_TO
37688: IFFALSE 37807
// for _y = min_y to max_y do
37690: LD_ADDR_VAR 0 12
37694: PUSH
37695: DOUBLE
37696: LD_VAR 0 8
37700: DEC
37701: ST_TO_ADDR
37702: LD_VAR 0 10
37706: PUSH
37707: FOR_TO
37708: IFFALSE 37803
// begin if not ValidHex ( _x , _y ) then
37710: LD_VAR 0 11
37714: PPUSH
37715: LD_VAR 0 12
37719: PPUSH
37720: CALL_OW 488
37724: NOT
37725: IFFALSE 37729
// continue ;
37727: GO 37707
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37729: LD_VAR 0 11
37733: PPUSH
37734: LD_VAR 0 12
37738: PPUSH
37739: CALL_OW 351
37743: IFFALSE 37761
37745: PUSH
37746: LD_VAR 0 11
37750: PPUSH
37751: LD_VAR 0 12
37755: PPUSH
37756: CALL_OW 554
37760: AND
37761: IFFALSE 37801
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37763: LD_ADDR_VAR 0 13
37767: PUSH
37768: LD_VAR 0 13
37772: PPUSH
37773: LD_VAR 0 13
37777: PUSH
37778: LD_INT 1
37780: PLUS
37781: PPUSH
37782: LD_VAR 0 11
37786: PUSH
37787: LD_VAR 0 12
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: PPUSH
37796: CALL_OW 2
37800: ST_TO_ADDR
// end ;
37801: GO 37707
37803: POP
37804: POP
37805: GO 37687
37807: POP
37808: POP
// if not list then
37809: LD_VAR 0 13
37813: NOT
37814: IFFALSE 37818
// exit ;
37816: GO 38064
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
37818: LD_ADDR_VAR 0 13
37822: PUSH
37823: LD_VAR 0 1
37827: PPUSH
37828: LD_VAR 0 13
37832: PPUSH
37833: LD_INT 1
37835: PPUSH
37836: LD_INT 1
37838: PPUSH
37839: CALL 46906 0 4
37843: ST_TO_ADDR
// ComStop ( flame ) ;
37844: LD_VAR 0 1
37848: PPUSH
37849: CALL_OW 141
// for i in list do
37853: LD_ADDR_VAR 0 6
37857: PUSH
37858: LD_VAR 0 13
37862: PUSH
37863: FOR_IN
37864: IFFALSE 37895
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
37866: LD_VAR 0 1
37870: PPUSH
37871: LD_VAR 0 6
37875: PUSH
37876: LD_INT 1
37878: ARRAY
37879: PPUSH
37880: LD_VAR 0 6
37884: PUSH
37885: LD_INT 2
37887: ARRAY
37888: PPUSH
37889: CALL_OW 176
37893: GO 37863
37895: POP
37896: POP
// repeat wait ( 0 0$1 ) ;
37897: LD_INT 35
37899: PPUSH
37900: CALL_OW 67
// task := GetTaskList ( flame ) ;
37904: LD_ADDR_VAR 0 14
37908: PUSH
37909: LD_VAR 0 1
37913: PPUSH
37914: CALL_OW 437
37918: ST_TO_ADDR
// if not task then
37919: LD_VAR 0 14
37923: NOT
37924: IFFALSE 37928
// exit ;
37926: GO 38064
// if task [ 1 ] [ 1 ] <> | then
37928: LD_VAR 0 14
37932: PUSH
37933: LD_INT 1
37935: ARRAY
37936: PUSH
37937: LD_INT 1
37939: ARRAY
37940: PUSH
37941: LD_STRING |
37943: NONEQUAL
37944: IFFALSE 37948
// exit ;
37946: GO 38064
// _x := task [ 1 ] [ 2 ] ;
37948: LD_ADDR_VAR 0 11
37952: PUSH
37953: LD_VAR 0 14
37957: PUSH
37958: LD_INT 1
37960: ARRAY
37961: PUSH
37962: LD_INT 2
37964: ARRAY
37965: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
37966: LD_ADDR_VAR 0 12
37970: PUSH
37971: LD_VAR 0 14
37975: PUSH
37976: LD_INT 1
37978: ARRAY
37979: PUSH
37980: LD_INT 3
37982: ARRAY
37983: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
37984: LD_VAR 0 11
37988: PPUSH
37989: LD_VAR 0 12
37993: PPUSH
37994: CALL_OW 351
37998: NOT
37999: IFTRUE 38018
38001: PUSH
38002: LD_VAR 0 11
38006: PPUSH
38007: LD_VAR 0 12
38011: PPUSH
38012: CALL_OW 554
38016: NOT
38017: OR
38018: IFFALSE 38052
// begin task := Delete ( task , 1 ) ;
38020: LD_ADDR_VAR 0 14
38024: PUSH
38025: LD_VAR 0 14
38029: PPUSH
38030: LD_INT 1
38032: PPUSH
38033: CALL_OW 3
38037: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
38038: LD_VAR 0 1
38042: PPUSH
38043: LD_VAR 0 14
38047: PPUSH
38048: CALL_OW 446
// end ; until not HasTask ( flame ) ;
38052: LD_VAR 0 1
38056: PPUSH
38057: CALL_OW 314
38061: NOT
38062: IFFALSE 37897
// end ;
38064: LD_VAR 0 5
38068: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
38069: LD_EXP 123
38073: NOT
38074: IFFALSE 38124
38076: GO 38078
38078: DISABLE
// begin initHack := true ;
38079: LD_ADDR_EXP 123
38083: PUSH
38084: LD_INT 1
38086: ST_TO_ADDR
// hackTanks := [ ] ;
38087: LD_ADDR_EXP 124
38091: PUSH
38092: EMPTY
38093: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
38094: LD_ADDR_EXP 125
38098: PUSH
38099: EMPTY
38100: ST_TO_ADDR
// hackLimit := 3 ;
38101: LD_ADDR_EXP 126
38105: PUSH
38106: LD_INT 3
38108: ST_TO_ADDR
// hackDist := 12 ;
38109: LD_ADDR_EXP 127
38113: PUSH
38114: LD_INT 12
38116: ST_TO_ADDR
// hackCounter := [ ] ;
38117: LD_ADDR_EXP 128
38121: PUSH
38122: EMPTY
38123: ST_TO_ADDR
// end ;
38124: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
38125: LD_EXP 123
38129: IFFALSE 38147
38131: PUSH
38132: LD_INT 34
38134: PUSH
38135: LD_INT 99
38137: PUSH
38138: EMPTY
38139: LIST
38140: LIST
38141: PPUSH
38142: CALL_OW 69
38146: AND
38147: IFFALSE 38400
38149: GO 38151
38151: DISABLE
38152: LD_INT 0
38154: PPUSH
38155: PPUSH
// begin enable ;
38156: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
38157: LD_ADDR_VAR 0 1
38161: PUSH
38162: LD_INT 34
38164: PUSH
38165: LD_INT 99
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: PPUSH
38172: CALL_OW 69
38176: PUSH
38177: FOR_IN
38178: IFFALSE 38398
// begin if not i in hackTanks then
38180: LD_VAR 0 1
38184: PUSH
38185: LD_EXP 124
38189: IN
38190: NOT
38191: IFFALSE 38274
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
38193: LD_ADDR_EXP 124
38197: PUSH
38198: LD_EXP 124
38202: PPUSH
38203: LD_EXP 124
38207: PUSH
38208: LD_INT 1
38210: PLUS
38211: PPUSH
38212: LD_VAR 0 1
38216: PPUSH
38217: CALL_OW 1
38221: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
38222: LD_ADDR_EXP 125
38226: PUSH
38227: LD_EXP 125
38231: PPUSH
38232: LD_EXP 125
38236: PUSH
38237: LD_INT 1
38239: PLUS
38240: PPUSH
38241: EMPTY
38242: PPUSH
38243: CALL_OW 1
38247: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
38248: LD_ADDR_EXP 128
38252: PUSH
38253: LD_EXP 128
38257: PPUSH
38258: LD_EXP 128
38262: PUSH
38263: LD_INT 1
38265: PLUS
38266: PPUSH
38267: EMPTY
38268: PPUSH
38269: CALL_OW 1
38273: ST_TO_ADDR
// end ; if not IsOk ( i ) then
38274: LD_VAR 0 1
38278: PPUSH
38279: CALL_OW 302
38283: NOT
38284: IFFALSE 38297
// begin HackUnlinkAll ( i ) ;
38286: LD_VAR 0 1
38290: PPUSH
38291: CALL 38403 0 1
// continue ;
38295: GO 38177
// end ; HackCheckCapturedStatus ( i ) ;
38297: LD_VAR 0 1
38301: PPUSH
38302: CALL 38848 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
38306: LD_ADDR_VAR 0 2
38310: PUSH
38311: LD_INT 81
38313: PUSH
38314: LD_VAR 0 1
38318: PPUSH
38319: CALL_OW 255
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: PUSH
38328: LD_INT 33
38330: PUSH
38331: LD_INT 3
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: PUSH
38338: LD_INT 91
38340: PUSH
38341: LD_VAR 0 1
38345: PUSH
38346: LD_EXP 127
38350: PUSH
38351: EMPTY
38352: LIST
38353: LIST
38354: LIST
38355: PUSH
38356: LD_INT 50
38358: PUSH
38359: EMPTY
38360: LIST
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: LIST
38366: LIST
38367: PPUSH
38368: CALL_OW 69
38372: ST_TO_ADDR
// if not tmp then
38373: LD_VAR 0 2
38377: NOT
38378: IFFALSE 38382
// continue ;
38380: GO 38177
// HackLink ( i , tmp ) ;
38382: LD_VAR 0 1
38386: PPUSH
38387: LD_VAR 0 2
38391: PPUSH
38392: CALL 38539 0 2
// end ;
38396: GO 38177
38398: POP
38399: POP
// end ;
38400: PPOPN 2
38402: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
38403: LD_INT 0
38405: PPUSH
38406: PPUSH
38407: PPUSH
// if not hack in hackTanks then
38408: LD_VAR 0 1
38412: PUSH
38413: LD_EXP 124
38417: IN
38418: NOT
38419: IFFALSE 38423
// exit ;
38421: GO 38534
// index := GetElementIndex ( hackTanks , hack ) ;
38423: LD_ADDR_VAR 0 4
38427: PUSH
38428: LD_EXP 124
38432: PPUSH
38433: LD_VAR 0 1
38437: PPUSH
38438: CALL 46201 0 2
38442: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
38443: LD_EXP 125
38447: PUSH
38448: LD_VAR 0 4
38452: ARRAY
38453: IFFALSE 38534
// begin for i in hackTanksCaptured [ index ] do
38455: LD_ADDR_VAR 0 3
38459: PUSH
38460: LD_EXP 125
38464: PUSH
38465: LD_VAR 0 4
38469: ARRAY
38470: PUSH
38471: FOR_IN
38472: IFFALSE 38498
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
38474: LD_VAR 0 3
38478: PUSH
38479: LD_INT 1
38481: ARRAY
38482: PPUSH
38483: LD_VAR 0 3
38487: PUSH
38488: LD_INT 2
38490: ARRAY
38491: PPUSH
38492: CALL_OW 235
38496: GO 38471
38498: POP
38499: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
38500: LD_ADDR_EXP 125
38504: PUSH
38505: LD_EXP 125
38509: PPUSH
38510: LD_VAR 0 4
38514: PPUSH
38515: EMPTY
38516: PPUSH
38517: CALL_OW 1
38521: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
38522: LD_VAR 0 1
38526: PPUSH
38527: LD_INT 0
38529: PPUSH
38530: CALL_OW 505
// end ; end ;
38534: LD_VAR 0 2
38538: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
38539: LD_INT 0
38541: PPUSH
38542: PPUSH
38543: PPUSH
// if not hack in hackTanks or not vehicles then
38544: LD_VAR 0 1
38548: PUSH
38549: LD_EXP 124
38553: IN
38554: NOT
38555: IFTRUE 38564
38557: PUSH
38558: LD_VAR 0 2
38562: NOT
38563: OR
38564: IFFALSE 38568
// exit ;
38566: GO 38843
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
38568: LD_ADDR_VAR 0 2
38572: PUSH
38573: LD_VAR 0 1
38577: PPUSH
38578: LD_VAR 0 2
38582: PPUSH
38583: LD_INT 1
38585: PPUSH
38586: LD_INT 1
38588: PPUSH
38589: CALL 46853 0 4
38593: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
38594: LD_ADDR_VAR 0 5
38598: PUSH
38599: LD_EXP 124
38603: PPUSH
38604: LD_VAR 0 1
38608: PPUSH
38609: CALL 46201 0 2
38613: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
38614: LD_EXP 125
38618: PUSH
38619: LD_VAR 0 5
38623: ARRAY
38624: PUSH
38625: LD_EXP 126
38629: LESS
38630: IFFALSE 38819
// begin for i := 1 to vehicles do
38632: LD_ADDR_VAR 0 4
38636: PUSH
38637: DOUBLE
38638: LD_INT 1
38640: DEC
38641: ST_TO_ADDR
38642: LD_VAR 0 2
38646: PUSH
38647: FOR_TO
38648: IFFALSE 38817
// begin if hackTanksCaptured [ index ] = hackLimit then
38650: LD_EXP 125
38654: PUSH
38655: LD_VAR 0 5
38659: ARRAY
38660: PUSH
38661: LD_EXP 126
38665: EQUAL
38666: IFFALSE 38670
// break ;
38668: GO 38817
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
38670: LD_ADDR_EXP 128
38674: PUSH
38675: LD_EXP 128
38679: PPUSH
38680: LD_VAR 0 5
38684: PPUSH
38685: LD_EXP 128
38689: PUSH
38690: LD_VAR 0 5
38694: ARRAY
38695: PUSH
38696: LD_INT 1
38698: PLUS
38699: PPUSH
38700: CALL_OW 1
38704: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
38705: LD_ADDR_EXP 125
38709: PUSH
38710: LD_EXP 125
38714: PPUSH
38715: LD_VAR 0 5
38719: PUSH
38720: LD_EXP 125
38724: PUSH
38725: LD_VAR 0 5
38729: ARRAY
38730: PUSH
38731: LD_INT 1
38733: PLUS
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: PPUSH
38739: LD_VAR 0 2
38743: PUSH
38744: LD_VAR 0 4
38748: ARRAY
38749: PUSH
38750: LD_VAR 0 2
38754: PUSH
38755: LD_VAR 0 4
38759: ARRAY
38760: PPUSH
38761: CALL_OW 255
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: PPUSH
38770: CALL 46418 0 3
38774: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
38775: LD_VAR 0 2
38779: PUSH
38780: LD_VAR 0 4
38784: ARRAY
38785: PPUSH
38786: LD_VAR 0 1
38790: PPUSH
38791: CALL_OW 255
38795: PPUSH
38796: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
38800: LD_VAR 0 2
38804: PUSH
38805: LD_VAR 0 4
38809: ARRAY
38810: PPUSH
38811: CALL_OW 141
// end ;
38815: GO 38647
38817: POP
38818: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38819: LD_VAR 0 1
38823: PPUSH
38824: LD_EXP 125
38828: PUSH
38829: LD_VAR 0 5
38833: ARRAY
38834: PUSH
38835: LD_INT 0
38837: PLUS
38838: PPUSH
38839: CALL_OW 505
// end ;
38843: LD_VAR 0 3
38847: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
38848: LD_INT 0
38850: PPUSH
38851: PPUSH
38852: PPUSH
38853: PPUSH
// if not hack in hackTanks then
38854: LD_VAR 0 1
38858: PUSH
38859: LD_EXP 124
38863: IN
38864: NOT
38865: IFFALSE 38869
// exit ;
38867: GO 39113
// index := GetElementIndex ( hackTanks , hack ) ;
38869: LD_ADDR_VAR 0 4
38873: PUSH
38874: LD_EXP 124
38878: PPUSH
38879: LD_VAR 0 1
38883: PPUSH
38884: CALL 46201 0 2
38888: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
38889: LD_ADDR_VAR 0 3
38893: PUSH
38894: DOUBLE
38895: LD_EXP 125
38899: PUSH
38900: LD_VAR 0 4
38904: ARRAY
38905: INC
38906: ST_TO_ADDR
38907: LD_INT 1
38909: PUSH
38910: FOR_DOWNTO
38911: IFFALSE 39087
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
38913: LD_ADDR_VAR 0 5
38917: PUSH
38918: LD_EXP 125
38922: PUSH
38923: LD_VAR 0 4
38927: ARRAY
38928: PUSH
38929: LD_VAR 0 3
38933: ARRAY
38934: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
38935: LD_VAR 0 5
38939: PUSH
38940: LD_INT 1
38942: ARRAY
38943: PPUSH
38944: CALL_OW 302
38948: NOT
38949: IFTRUE 38977
38951: PUSH
38952: LD_VAR 0 5
38956: PUSH
38957: LD_INT 1
38959: ARRAY
38960: PPUSH
38961: CALL_OW 255
38965: PUSH
38966: LD_VAR 0 1
38970: PPUSH
38971: CALL_OW 255
38975: NONEQUAL
38976: OR
38977: IFFALSE 39085
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
38979: LD_VAR 0 5
38983: PUSH
38984: LD_INT 1
38986: ARRAY
38987: PPUSH
38988: CALL_OW 305
38992: IFFALSE 39020
38994: PUSH
38995: LD_VAR 0 5
38999: PUSH
39000: LD_INT 1
39002: ARRAY
39003: PPUSH
39004: CALL_OW 255
39008: PUSH
39009: LD_VAR 0 1
39013: PPUSH
39014: CALL_OW 255
39018: EQUAL
39019: AND
39020: IFFALSE 39044
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
39022: LD_VAR 0 5
39026: PUSH
39027: LD_INT 1
39029: ARRAY
39030: PPUSH
39031: LD_VAR 0 5
39035: PUSH
39036: LD_INT 2
39038: ARRAY
39039: PPUSH
39040: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
39044: LD_ADDR_EXP 125
39048: PUSH
39049: LD_EXP 125
39053: PPUSH
39054: LD_VAR 0 4
39058: PPUSH
39059: LD_EXP 125
39063: PUSH
39064: LD_VAR 0 4
39068: ARRAY
39069: PPUSH
39070: LD_VAR 0 3
39074: PPUSH
39075: CALL_OW 3
39079: PPUSH
39080: CALL_OW 1
39084: ST_TO_ADDR
// end ; end ;
39085: GO 38910
39087: POP
39088: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
39089: LD_VAR 0 1
39093: PPUSH
39094: LD_EXP 125
39098: PUSH
39099: LD_VAR 0 4
39103: ARRAY
39104: PUSH
39105: LD_INT 0
39107: PLUS
39108: PPUSH
39109: CALL_OW 505
// end ;
39113: LD_VAR 0 2
39117: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
39118: LD_INT 0
39120: PPUSH
39121: PPUSH
39122: PPUSH
39123: PPUSH
// if not hack in hackTanks then
39124: LD_VAR 0 1
39128: PUSH
39129: LD_EXP 124
39133: IN
39134: NOT
39135: IFFALSE 39139
// exit ;
39137: GO 39224
// index := GetElementIndex ( hackTanks , hack ) ;
39139: LD_ADDR_VAR 0 5
39143: PUSH
39144: LD_EXP 124
39148: PPUSH
39149: LD_VAR 0 1
39153: PPUSH
39154: CALL 46201 0 2
39158: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
39159: LD_ADDR_VAR 0 4
39163: PUSH
39164: DOUBLE
39165: LD_INT 1
39167: DEC
39168: ST_TO_ADDR
39169: LD_EXP 125
39173: PUSH
39174: LD_VAR 0 5
39178: ARRAY
39179: PUSH
39180: FOR_TO
39181: IFFALSE 39222
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
39183: LD_EXP 125
39187: PUSH
39188: LD_VAR 0 5
39192: ARRAY
39193: PUSH
39194: LD_VAR 0 4
39198: ARRAY
39199: PUSH
39200: LD_INT 1
39202: ARRAY
39203: PUSH
39204: LD_VAR 0 2
39208: EQUAL
39209: IFFALSE 39220
// KillUnit ( vehicle ) ;
39211: LD_VAR 0 2
39215: PPUSH
39216: CALL_OW 66
39220: GO 39180
39222: POP
39223: POP
// end ;
39224: LD_VAR 0 3
39228: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
39229: LD_EXP 129
39233: NOT
39234: IFFALSE 39269
39236: GO 39238
39238: DISABLE
// begin initMiner := true ;
39239: LD_ADDR_EXP 129
39243: PUSH
39244: LD_INT 1
39246: ST_TO_ADDR
// minersList := [ ] ;
39247: LD_ADDR_EXP 130
39251: PUSH
39252: EMPTY
39253: ST_TO_ADDR
// minerMinesList := [ ] ;
39254: LD_ADDR_EXP 131
39258: PUSH
39259: EMPTY
39260: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
39261: LD_ADDR_EXP 132
39265: PUSH
39266: LD_INT 5
39268: ST_TO_ADDR
// end ;
39269: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
39270: LD_EXP 129
39274: IFFALSE 39292
39276: PUSH
39277: LD_INT 34
39279: PUSH
39280: LD_INT 81
39282: PUSH
39283: EMPTY
39284: LIST
39285: LIST
39286: PPUSH
39287: CALL_OW 69
39291: AND
39292: IFFALSE 39755
39294: GO 39296
39296: DISABLE
39297: LD_INT 0
39299: PPUSH
39300: PPUSH
39301: PPUSH
39302: PPUSH
// begin enable ;
39303: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
39304: LD_ADDR_VAR 0 1
39308: PUSH
39309: LD_INT 34
39311: PUSH
39312: LD_INT 81
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PPUSH
39319: CALL_OW 69
39323: PUSH
39324: FOR_IN
39325: IFFALSE 39397
// begin if not i in minersList then
39327: LD_VAR 0 1
39331: PUSH
39332: LD_EXP 130
39336: IN
39337: NOT
39338: IFFALSE 39395
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
39340: LD_ADDR_EXP 130
39344: PUSH
39345: LD_EXP 130
39349: PPUSH
39350: LD_EXP 130
39354: PUSH
39355: LD_INT 1
39357: PLUS
39358: PPUSH
39359: LD_VAR 0 1
39363: PPUSH
39364: CALL_OW 1
39368: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
39369: LD_ADDR_EXP 131
39373: PUSH
39374: LD_EXP 131
39378: PPUSH
39379: LD_EXP 131
39383: PUSH
39384: LD_INT 1
39386: PLUS
39387: PPUSH
39388: EMPTY
39389: PPUSH
39390: CALL_OW 1
39394: ST_TO_ADDR
// end end ;
39395: GO 39324
39397: POP
39398: POP
// for i := minerMinesList downto 1 do
39399: LD_ADDR_VAR 0 1
39403: PUSH
39404: DOUBLE
39405: LD_EXP 131
39409: INC
39410: ST_TO_ADDR
39411: LD_INT 1
39413: PUSH
39414: FOR_DOWNTO
39415: IFFALSE 39753
// begin if IsLive ( minersList [ i ] ) then
39417: LD_EXP 130
39421: PUSH
39422: LD_VAR 0 1
39426: ARRAY
39427: PPUSH
39428: CALL_OW 300
39432: IFFALSE 39460
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
39434: LD_EXP 130
39438: PUSH
39439: LD_VAR 0 1
39443: ARRAY
39444: PPUSH
39445: LD_EXP 131
39449: PUSH
39450: LD_VAR 0 1
39454: ARRAY
39455: PPUSH
39456: CALL_OW 505
// if not minerMinesList [ i ] then
39460: LD_EXP 131
39464: PUSH
39465: LD_VAR 0 1
39469: ARRAY
39470: NOT
39471: IFFALSE 39475
// continue ;
39473: GO 39414
// for j := minerMinesList [ i ] downto 1 do
39475: LD_ADDR_VAR 0 2
39479: PUSH
39480: DOUBLE
39481: LD_EXP 131
39485: PUSH
39486: LD_VAR 0 1
39490: ARRAY
39491: INC
39492: ST_TO_ADDR
39493: LD_INT 1
39495: PUSH
39496: FOR_DOWNTO
39497: IFFALSE 39749
// begin side := GetSide ( minersList [ i ] ) ;
39499: LD_ADDR_VAR 0 3
39503: PUSH
39504: LD_EXP 130
39508: PUSH
39509: LD_VAR 0 1
39513: ARRAY
39514: PPUSH
39515: CALL_OW 255
39519: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
39520: LD_ADDR_VAR 0 4
39524: PUSH
39525: LD_EXP 131
39529: PUSH
39530: LD_VAR 0 1
39534: ARRAY
39535: PUSH
39536: LD_VAR 0 2
39540: ARRAY
39541: PUSH
39542: LD_INT 1
39544: ARRAY
39545: PPUSH
39546: LD_EXP 131
39550: PUSH
39551: LD_VAR 0 1
39555: ARRAY
39556: PUSH
39557: LD_VAR 0 2
39561: ARRAY
39562: PUSH
39563: LD_INT 2
39565: ARRAY
39566: PPUSH
39567: CALL_OW 428
39571: ST_TO_ADDR
// if not tmp then
39572: LD_VAR 0 4
39576: NOT
39577: IFFALSE 39581
// continue ;
39579: GO 39496
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
39581: LD_VAR 0 4
39585: PUSH
39586: LD_INT 81
39588: PUSH
39589: LD_VAR 0 3
39593: PUSH
39594: EMPTY
39595: LIST
39596: LIST
39597: PPUSH
39598: CALL_OW 69
39602: IN
39603: IFFALSE 39653
39605: PUSH
39606: LD_EXP 131
39610: PUSH
39611: LD_VAR 0 1
39615: ARRAY
39616: PUSH
39617: LD_VAR 0 2
39621: ARRAY
39622: PUSH
39623: LD_INT 1
39625: ARRAY
39626: PPUSH
39627: LD_EXP 131
39631: PUSH
39632: LD_VAR 0 1
39636: ARRAY
39637: PUSH
39638: LD_VAR 0 2
39642: ARRAY
39643: PUSH
39644: LD_INT 2
39646: ARRAY
39647: PPUSH
39648: CALL_OW 458
39652: AND
39653: IFFALSE 39747
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
39655: LD_EXP 131
39659: PUSH
39660: LD_VAR 0 1
39664: ARRAY
39665: PUSH
39666: LD_VAR 0 2
39670: ARRAY
39671: PUSH
39672: LD_INT 1
39674: ARRAY
39675: PPUSH
39676: LD_EXP 131
39680: PUSH
39681: LD_VAR 0 1
39685: ARRAY
39686: PUSH
39687: LD_VAR 0 2
39691: ARRAY
39692: PUSH
39693: LD_INT 2
39695: ARRAY
39696: PPUSH
39697: LD_VAR 0 3
39701: PPUSH
39702: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
39706: LD_ADDR_EXP 131
39710: PUSH
39711: LD_EXP 131
39715: PPUSH
39716: LD_VAR 0 1
39720: PPUSH
39721: LD_EXP 131
39725: PUSH
39726: LD_VAR 0 1
39730: ARRAY
39731: PPUSH
39732: LD_VAR 0 2
39736: PPUSH
39737: CALL_OW 3
39741: PPUSH
39742: CALL_OW 1
39746: ST_TO_ADDR
// end ; end ;
39747: GO 39496
39749: POP
39750: POP
// end ;
39751: GO 39414
39753: POP
39754: POP
// end ;
39755: PPOPN 4
39757: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
39758: LD_INT 0
39760: PPUSH
39761: PPUSH
// result := false ;
39762: LD_ADDR_VAR 0 4
39766: PUSH
39767: LD_INT 0
39769: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
39770: LD_VAR 0 1
39774: PPUSH
39775: CALL_OW 264
39779: PUSH
39780: LD_INT 81
39782: EQUAL
39783: NOT
39784: IFFALSE 39788
// exit ;
39786: GO 40032
// index := GetElementIndex ( minersList , unit ) ;
39788: LD_ADDR_VAR 0 5
39792: PUSH
39793: LD_EXP 130
39797: PPUSH
39798: LD_VAR 0 1
39802: PPUSH
39803: CALL 46201 0 2
39807: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
39808: LD_EXP 131
39812: PUSH
39813: LD_VAR 0 5
39817: ARRAY
39818: PUSH
39819: LD_EXP 132
39823: GREATEREQUAL
39824: IFFALSE 39828
// exit ;
39826: GO 40032
// ComMoveXY ( unit , x , y ) ;
39828: LD_VAR 0 1
39832: PPUSH
39833: LD_VAR 0 2
39837: PPUSH
39838: LD_VAR 0 3
39842: PPUSH
39843: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39847: LD_INT 35
39849: PPUSH
39850: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
39854: LD_VAR 0 1
39858: PPUSH
39859: LD_VAR 0 2
39863: PPUSH
39864: LD_VAR 0 3
39868: PPUSH
39869: CALL 78247 0 3
39873: NOT
39874: IFFALSE 39887
39876: PUSH
39877: LD_VAR 0 1
39881: PPUSH
39882: CALL_OW 314
39886: AND
39887: IFFALSE 39891
// exit ;
39889: GO 40032
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
39891: LD_VAR 0 2
39895: PPUSH
39896: LD_VAR 0 3
39900: PPUSH
39901: CALL_OW 428
39905: PUSH
39906: LD_VAR 0 1
39910: EQUAL
39911: IFFALSE 39925
39913: PUSH
39914: LD_VAR 0 1
39918: PPUSH
39919: CALL_OW 314
39923: NOT
39924: AND
39925: IFFALSE 39847
// PlaySoundXY ( x , y , PlantMine ) ;
39927: LD_VAR 0 2
39931: PPUSH
39932: LD_VAR 0 3
39936: PPUSH
39937: LD_STRING PlantMine
39939: PPUSH
39940: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
39944: LD_VAR 0 2
39948: PPUSH
39949: LD_VAR 0 3
39953: PPUSH
39954: LD_VAR 0 1
39958: PPUSH
39959: CALL_OW 255
39963: PPUSH
39964: LD_INT 0
39966: PPUSH
39967: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
39971: LD_ADDR_EXP 131
39975: PUSH
39976: LD_EXP 131
39980: PPUSH
39981: LD_VAR 0 5
39985: PUSH
39986: LD_EXP 131
39990: PUSH
39991: LD_VAR 0 5
39995: ARRAY
39996: PUSH
39997: LD_INT 1
39999: PLUS
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: PPUSH
40005: LD_VAR 0 2
40009: PUSH
40010: LD_VAR 0 3
40014: PUSH
40015: EMPTY
40016: LIST
40017: LIST
40018: PPUSH
40019: CALL 46418 0 3
40023: ST_TO_ADDR
// result := true ;
40024: LD_ADDR_VAR 0 4
40028: PUSH
40029: LD_INT 1
40031: ST_TO_ADDR
// end ;
40032: LD_VAR 0 4
40036: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
40037: LD_INT 0
40039: PPUSH
40040: PPUSH
40041: PPUSH
// if not unit in minersList then
40042: LD_VAR 0 1
40046: PUSH
40047: LD_EXP 130
40051: IN
40052: NOT
40053: IFFALSE 40057
// exit ;
40055: GO 40451
// index := GetElementIndex ( minersList , unit ) ;
40057: LD_ADDR_VAR 0 6
40061: PUSH
40062: LD_EXP 130
40066: PPUSH
40067: LD_VAR 0 1
40071: PPUSH
40072: CALL 46201 0 2
40076: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
40077: LD_ADDR_VAR 0 5
40081: PUSH
40082: DOUBLE
40083: LD_EXP 131
40087: PUSH
40088: LD_VAR 0 6
40092: ARRAY
40093: INC
40094: ST_TO_ADDR
40095: LD_INT 1
40097: PUSH
40098: FOR_DOWNTO
40099: IFFALSE 40262
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
40101: LD_EXP 131
40105: PUSH
40106: LD_VAR 0 6
40110: ARRAY
40111: PUSH
40112: LD_VAR 0 5
40116: ARRAY
40117: PUSH
40118: LD_INT 1
40120: ARRAY
40121: PUSH
40122: LD_VAR 0 2
40126: EQUAL
40127: IFFALSE 40157
40129: PUSH
40130: LD_EXP 131
40134: PUSH
40135: LD_VAR 0 6
40139: ARRAY
40140: PUSH
40141: LD_VAR 0 5
40145: ARRAY
40146: PUSH
40147: LD_INT 2
40149: ARRAY
40150: PUSH
40151: LD_VAR 0 3
40155: EQUAL
40156: AND
40157: IFFALSE 40260
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40159: LD_EXP 131
40163: PUSH
40164: LD_VAR 0 6
40168: ARRAY
40169: PUSH
40170: LD_VAR 0 5
40174: ARRAY
40175: PUSH
40176: LD_INT 1
40178: ARRAY
40179: PPUSH
40180: LD_EXP 131
40184: PUSH
40185: LD_VAR 0 6
40189: ARRAY
40190: PUSH
40191: LD_VAR 0 5
40195: ARRAY
40196: PUSH
40197: LD_INT 2
40199: ARRAY
40200: PPUSH
40201: LD_VAR 0 1
40205: PPUSH
40206: CALL_OW 255
40210: PPUSH
40211: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40215: LD_ADDR_EXP 131
40219: PUSH
40220: LD_EXP 131
40224: PPUSH
40225: LD_VAR 0 6
40229: PPUSH
40230: LD_EXP 131
40234: PUSH
40235: LD_VAR 0 6
40239: ARRAY
40240: PPUSH
40241: LD_VAR 0 5
40245: PPUSH
40246: CALL_OW 3
40250: PPUSH
40251: CALL_OW 1
40255: ST_TO_ADDR
// exit ;
40256: POP
40257: POP
40258: GO 40451
// end ; end ;
40260: GO 40098
40262: POP
40263: POP
// for i := minerMinesList [ index ] downto 1 do
40264: LD_ADDR_VAR 0 5
40268: PUSH
40269: DOUBLE
40270: LD_EXP 131
40274: PUSH
40275: LD_VAR 0 6
40279: ARRAY
40280: INC
40281: ST_TO_ADDR
40282: LD_INT 1
40284: PUSH
40285: FOR_DOWNTO
40286: IFFALSE 40449
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
40288: LD_EXP 131
40292: PUSH
40293: LD_VAR 0 6
40297: ARRAY
40298: PUSH
40299: LD_VAR 0 5
40303: ARRAY
40304: PUSH
40305: LD_INT 1
40307: ARRAY
40308: PPUSH
40309: LD_EXP 131
40313: PUSH
40314: LD_VAR 0 6
40318: ARRAY
40319: PUSH
40320: LD_VAR 0 5
40324: ARRAY
40325: PUSH
40326: LD_INT 2
40328: ARRAY
40329: PPUSH
40330: LD_VAR 0 2
40334: PPUSH
40335: LD_VAR 0 3
40339: PPUSH
40340: CALL_OW 298
40344: PUSH
40345: LD_INT 6
40347: LESS
40348: IFFALSE 40447
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40350: LD_EXP 131
40354: PUSH
40355: LD_VAR 0 6
40359: ARRAY
40360: PUSH
40361: LD_VAR 0 5
40365: ARRAY
40366: PUSH
40367: LD_INT 1
40369: ARRAY
40370: PPUSH
40371: LD_EXP 131
40375: PUSH
40376: LD_VAR 0 6
40380: ARRAY
40381: PUSH
40382: LD_VAR 0 5
40386: ARRAY
40387: PUSH
40388: LD_INT 2
40390: ARRAY
40391: PPUSH
40392: LD_VAR 0 1
40396: PPUSH
40397: CALL_OW 255
40401: PPUSH
40402: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40406: LD_ADDR_EXP 131
40410: PUSH
40411: LD_EXP 131
40415: PPUSH
40416: LD_VAR 0 6
40420: PPUSH
40421: LD_EXP 131
40425: PUSH
40426: LD_VAR 0 6
40430: ARRAY
40431: PPUSH
40432: LD_VAR 0 5
40436: PPUSH
40437: CALL_OW 3
40441: PPUSH
40442: CALL_OW 1
40446: ST_TO_ADDR
// end ; end ;
40447: GO 40285
40449: POP
40450: POP
// end ;
40451: LD_VAR 0 4
40455: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
40456: LD_INT 0
40458: PPUSH
40459: PPUSH
40460: PPUSH
40461: PPUSH
40462: PPUSH
40463: PPUSH
40464: PPUSH
40465: PPUSH
40466: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
40467: LD_VAR 0 1
40471: PPUSH
40472: CALL_OW 264
40476: PUSH
40477: LD_INT 81
40479: EQUAL
40480: NOT
40481: IFTRUE 40496
40483: PUSH
40484: LD_VAR 0 1
40488: PUSH
40489: LD_EXP 130
40493: IN
40494: NOT
40495: OR
40496: IFFALSE 40500
// exit ;
40498: GO 40826
// index := GetElementIndex ( minersList , unit ) ;
40500: LD_ADDR_VAR 0 6
40504: PUSH
40505: LD_EXP 130
40509: PPUSH
40510: LD_VAR 0 1
40514: PPUSH
40515: CALL 46201 0 2
40519: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
40520: LD_ADDR_VAR 0 8
40524: PUSH
40525: LD_EXP 132
40529: PUSH
40530: LD_EXP 131
40534: PUSH
40535: LD_VAR 0 6
40539: ARRAY
40540: MINUS
40541: ST_TO_ADDR
// if not minesFreeAmount then
40542: LD_VAR 0 8
40546: NOT
40547: IFFALSE 40551
// exit ;
40549: GO 40826
// tmp := [ ] ;
40551: LD_ADDR_VAR 0 7
40555: PUSH
40556: EMPTY
40557: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
40558: LD_ADDR_VAR 0 5
40562: PUSH
40563: DOUBLE
40564: LD_INT 1
40566: DEC
40567: ST_TO_ADDR
40568: LD_VAR 0 8
40572: PUSH
40573: FOR_TO
40574: IFFALSE 40773
// begin _d := rand ( 0 , 5 ) ;
40576: LD_ADDR_VAR 0 11
40580: PUSH
40581: LD_INT 0
40583: PPUSH
40584: LD_INT 5
40586: PPUSH
40587: CALL_OW 12
40591: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
40592: LD_ADDR_VAR 0 12
40596: PUSH
40597: LD_INT 2
40599: PPUSH
40600: LD_INT 6
40602: PPUSH
40603: CALL_OW 12
40607: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
40608: LD_ADDR_VAR 0 9
40612: PUSH
40613: LD_VAR 0 2
40617: PPUSH
40618: LD_VAR 0 11
40622: PPUSH
40623: LD_VAR 0 12
40627: PPUSH
40628: CALL_OW 272
40632: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
40633: LD_ADDR_VAR 0 10
40637: PUSH
40638: LD_VAR 0 3
40642: PPUSH
40643: LD_VAR 0 11
40647: PPUSH
40648: LD_VAR 0 12
40652: PPUSH
40653: CALL_OW 273
40657: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
40658: LD_VAR 0 9
40662: PPUSH
40663: LD_VAR 0 10
40667: PPUSH
40668: CALL_OW 488
40672: IFFALSE 40696
40674: PUSH
40675: LD_VAR 0 9
40679: PUSH
40680: LD_VAR 0 10
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PUSH
40689: LD_VAR 0 7
40693: IN
40694: NOT
40695: AND
40696: IFFALSE 40715
40698: PUSH
40699: LD_VAR 0 9
40703: PPUSH
40704: LD_VAR 0 10
40708: PPUSH
40709: CALL_OW 458
40713: NOT
40714: AND
40715: IFFALSE 40757
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
40717: LD_ADDR_VAR 0 7
40721: PUSH
40722: LD_VAR 0 7
40726: PPUSH
40727: LD_VAR 0 7
40731: PUSH
40732: LD_INT 1
40734: PLUS
40735: PPUSH
40736: LD_VAR 0 9
40740: PUSH
40741: LD_VAR 0 10
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: PPUSH
40750: CALL_OW 1
40754: ST_TO_ADDR
40755: GO 40771
// i := i - 1 ;
40757: LD_ADDR_VAR 0 5
40761: PUSH
40762: LD_VAR 0 5
40766: PUSH
40767: LD_INT 1
40769: MINUS
40770: ST_TO_ADDR
// end ;
40771: GO 40573
40773: POP
40774: POP
// for i in tmp do
40775: LD_ADDR_VAR 0 5
40779: PUSH
40780: LD_VAR 0 7
40784: PUSH
40785: FOR_IN
40786: IFFALSE 40824
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
40788: LD_VAR 0 1
40792: PPUSH
40793: LD_VAR 0 5
40797: PUSH
40798: LD_INT 1
40800: ARRAY
40801: PPUSH
40802: LD_VAR 0 5
40806: PUSH
40807: LD_INT 2
40809: ARRAY
40810: PPUSH
40811: CALL 39758 0 3
40815: NOT
40816: IFFALSE 40822
// exit ;
40818: POP
40819: POP
40820: GO 40826
40822: GO 40785
40824: POP
40825: POP
// end ;
40826: LD_VAR 0 4
40830: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
40831: LD_INT 0
40833: PPUSH
40834: PPUSH
40835: PPUSH
40836: PPUSH
40837: PPUSH
40838: PPUSH
40839: PPUSH
40840: PPUSH
40841: PPUSH
// if GetClass ( unit ) <> class_sniper then
40842: LD_VAR 0 1
40846: PPUSH
40847: CALL_OW 257
40851: PUSH
40852: LD_INT 5
40854: NONEQUAL
40855: IFFALSE 40859
// exit ;
40857: GO 41329
// dist := 8 ;
40859: LD_ADDR_VAR 0 5
40863: PUSH
40864: LD_INT 8
40866: ST_TO_ADDR
// viewRange := 12 ;
40867: LD_ADDR_VAR 0 8
40871: PUSH
40872: LD_INT 12
40874: ST_TO_ADDR
// side := GetSide ( unit ) ;
40875: LD_ADDR_VAR 0 6
40879: PUSH
40880: LD_VAR 0 1
40884: PPUSH
40885: CALL_OW 255
40889: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
40890: LD_INT 61
40892: PPUSH
40893: LD_VAR 0 6
40897: PPUSH
40898: CALL_OW 321
40902: PUSH
40903: LD_INT 2
40905: EQUAL
40906: IFFALSE 40916
// viewRange := 16 ;
40908: LD_ADDR_VAR 0 8
40912: PUSH
40913: LD_INT 16
40915: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
40916: LD_VAR 0 1
40920: PPUSH
40921: LD_VAR 0 2
40925: PPUSH
40926: LD_VAR 0 3
40930: PPUSH
40931: CALL_OW 297
40935: PUSH
40936: LD_VAR 0 5
40940: GREATER
40941: IFFALSE 41020
// begin ComMoveXY ( unit , x , y ) ;
40943: LD_VAR 0 1
40947: PPUSH
40948: LD_VAR 0 2
40952: PPUSH
40953: LD_VAR 0 3
40957: PPUSH
40958: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40962: LD_INT 35
40964: PPUSH
40965: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
40969: LD_VAR 0 1
40973: PPUSH
40974: LD_VAR 0 2
40978: PPUSH
40979: LD_VAR 0 3
40983: PPUSH
40984: CALL 78247 0 3
40988: NOT
40989: IFFALSE 40993
// exit ;
40991: GO 41329
// until GetDistUnitXY ( unit , x , y ) < dist ;
40993: LD_VAR 0 1
40997: PPUSH
40998: LD_VAR 0 2
41002: PPUSH
41003: LD_VAR 0 3
41007: PPUSH
41008: CALL_OW 297
41012: PUSH
41013: LD_VAR 0 5
41017: LESS
41018: IFFALSE 40962
// end ; ComTurnXY ( unit , x , y ) ;
41020: LD_VAR 0 1
41024: PPUSH
41025: LD_VAR 0 2
41029: PPUSH
41030: LD_VAR 0 3
41034: PPUSH
41035: CALL_OW 118
// repeat if Multiplayer then
41039: LD_OWVAR 4
41043: IFFALSE 41054
// wait ( 35 ) else
41045: LD_INT 35
41047: PPUSH
41048: CALL_OW 67
41052: GO 41061
// wait ( 5 ) ;
41054: LD_INT 5
41056: PPUSH
41057: CALL_OW 67
// _d := GetDir ( unit ) ;
41061: LD_ADDR_VAR 0 11
41065: PUSH
41066: LD_VAR 0 1
41070: PPUSH
41071: CALL_OW 254
41075: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
41076: LD_ADDR_VAR 0 7
41080: PUSH
41081: LD_VAR 0 1
41085: PPUSH
41086: CALL_OW 250
41090: PPUSH
41091: LD_VAR 0 1
41095: PPUSH
41096: CALL_OW 251
41100: PPUSH
41101: LD_VAR 0 2
41105: PPUSH
41106: LD_VAR 0 3
41110: PPUSH
41111: CALL 80883 0 4
41115: ST_TO_ADDR
// until dir = _d ;
41116: LD_VAR 0 7
41120: PUSH
41121: LD_VAR 0 11
41125: EQUAL
41126: IFFALSE 41039
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
41128: LD_ADDR_VAR 0 9
41132: PUSH
41133: LD_VAR 0 1
41137: PPUSH
41138: CALL_OW 250
41142: PPUSH
41143: LD_VAR 0 7
41147: PPUSH
41148: LD_VAR 0 5
41152: PPUSH
41153: CALL_OW 272
41157: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
41158: LD_ADDR_VAR 0 10
41162: PUSH
41163: LD_VAR 0 1
41167: PPUSH
41168: CALL_OW 251
41172: PPUSH
41173: LD_VAR 0 7
41177: PPUSH
41178: LD_VAR 0 5
41182: PPUSH
41183: CALL_OW 273
41187: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41188: LD_VAR 0 9
41192: PPUSH
41193: LD_VAR 0 10
41197: PPUSH
41198: CALL_OW 488
41202: NOT
41203: IFFALSE 41207
// exit ;
41205: GO 41329
// ComAnimCustom ( unit , 1 ) ;
41207: LD_VAR 0 1
41211: PPUSH
41212: LD_INT 1
41214: PPUSH
41215: CALL_OW 592
// p := 0 ;
41219: LD_ADDR_VAR 0 12
41223: PUSH
41224: LD_INT 0
41226: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
41227: LD_VAR 0 9
41231: PPUSH
41232: LD_VAR 0 10
41236: PPUSH
41237: LD_VAR 0 6
41241: PPUSH
41242: LD_VAR 0 8
41246: PPUSH
41247: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
41251: LD_INT 35
41253: PPUSH
41254: CALL_OW 67
// p := Inc ( p ) ;
41258: LD_ADDR_VAR 0 12
41262: PUSH
41263: LD_VAR 0 12
41267: PPUSH
41268: CALL 80839 0 1
41272: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
41273: LD_VAR 0 12
41277: PUSH
41278: LD_INT 3
41280: EQUAL
41281: IFTRUE 41295
41283: PUSH
41284: LD_VAR 0 1
41288: PPUSH
41289: CALL_OW 302
41293: NOT
41294: OR
41295: IFTRUE 41308
41297: PUSH
41298: LD_VAR 0 1
41302: PPUSH
41303: CALL_OW 301
41307: OR
41308: IFFALSE 41251
// RemoveSeeing ( _x , _y , side ) ;
41310: LD_VAR 0 9
41314: PPUSH
41315: LD_VAR 0 10
41319: PPUSH
41320: LD_VAR 0 6
41324: PPUSH
41325: CALL_OW 331
// end ; end_of_file
41329: LD_VAR 0 4
41333: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
41334: LD_INT 0
41336: PPUSH
41337: PPUSH
// if exist_mode then
41338: LD_VAR 0 2
41342: IFFALSE 41388
// begin unit := CreateCharacter ( prefix & ident ) ;
41344: LD_ADDR_VAR 0 5
41348: PUSH
41349: LD_VAR 0 3
41353: PUSH
41354: LD_VAR 0 1
41358: STR
41359: PPUSH
41360: CALL_OW 34
41364: ST_TO_ADDR
// if unit then
41365: LD_VAR 0 5
41369: IFFALSE 41386
// DeleteCharacters ( prefix & ident ) ;
41371: LD_VAR 0 3
41375: PUSH
41376: LD_VAR 0 1
41380: STR
41381: PPUSH
41382: CALL_OW 40
// end else
41386: GO 41403
// unit := NewCharacter ( ident ) ;
41388: LD_ADDR_VAR 0 5
41392: PUSH
41393: LD_VAR 0 1
41397: PPUSH
41398: CALL_OW 25
41402: ST_TO_ADDR
// result := unit ;
41403: LD_ADDR_VAR 0 4
41407: PUSH
41408: LD_VAR 0 5
41412: ST_TO_ADDR
// end ;
41413: LD_VAR 0 4
41417: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
41418: LD_INT 0
41420: PPUSH
41421: PPUSH
// if exist_mode then
41422: LD_VAR 0 2
41426: IFFALSE 41451
// unit := CreateCharacter ( prefix & ident ) else
41428: LD_ADDR_VAR 0 5
41432: PUSH
41433: LD_VAR 0 3
41437: PUSH
41438: LD_VAR 0 1
41442: STR
41443: PPUSH
41444: CALL_OW 34
41448: ST_TO_ADDR
41449: GO 41466
// unit := NewCharacter ( ident ) ;
41451: LD_ADDR_VAR 0 5
41455: PUSH
41456: LD_VAR 0 1
41460: PPUSH
41461: CALL_OW 25
41465: ST_TO_ADDR
// result := unit ;
41466: LD_ADDR_VAR 0 4
41470: PUSH
41471: LD_VAR 0 5
41475: ST_TO_ADDR
// end ;
41476: LD_VAR 0 4
41480: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
41481: LD_INT 0
41483: PPUSH
41484: PPUSH
// if not side or not nation then
41485: LD_VAR 0 1
41489: NOT
41490: IFTRUE 41499
41492: PUSH
41493: LD_VAR 0 2
41497: NOT
41498: OR
41499: IFFALSE 41503
// exit ;
41501: GO 42273
// case nation of nation_american :
41503: LD_VAR 0 2
41507: PUSH
41508: LD_INT 1
41510: DOUBLE
41511: EQUAL
41512: IFTRUE 41516
41514: GO 41730
41516: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
41517: LD_ADDR_VAR 0 4
41521: PUSH
41522: LD_INT 35
41524: PUSH
41525: LD_INT 45
41527: PUSH
41528: LD_INT 46
41530: PUSH
41531: LD_INT 47
41533: PUSH
41534: LD_INT 82
41536: PUSH
41537: LD_INT 83
41539: PUSH
41540: LD_INT 84
41542: PUSH
41543: LD_INT 85
41545: PUSH
41546: LD_INT 86
41548: PUSH
41549: LD_INT 1
41551: PUSH
41552: LD_INT 2
41554: PUSH
41555: LD_INT 6
41557: PUSH
41558: LD_INT 15
41560: PUSH
41561: LD_INT 16
41563: PUSH
41564: LD_INT 7
41566: PUSH
41567: LD_INT 12
41569: PUSH
41570: LD_INT 13
41572: PUSH
41573: LD_INT 10
41575: PUSH
41576: LD_INT 14
41578: PUSH
41579: LD_INT 20
41581: PUSH
41582: LD_INT 21
41584: PUSH
41585: LD_INT 22
41587: PUSH
41588: LD_INT 25
41590: PUSH
41591: LD_INT 32
41593: PUSH
41594: LD_INT 27
41596: PUSH
41597: LD_INT 36
41599: PUSH
41600: LD_INT 69
41602: PUSH
41603: LD_INT 39
41605: PUSH
41606: LD_INT 34
41608: PUSH
41609: LD_INT 40
41611: PUSH
41612: LD_INT 48
41614: PUSH
41615: LD_INT 49
41617: PUSH
41618: LD_INT 50
41620: PUSH
41621: LD_INT 51
41623: PUSH
41624: LD_INT 52
41626: PUSH
41627: LD_INT 53
41629: PUSH
41630: LD_INT 54
41632: PUSH
41633: LD_INT 55
41635: PUSH
41636: LD_INT 56
41638: PUSH
41639: LD_INT 57
41641: PUSH
41642: LD_INT 58
41644: PUSH
41645: LD_INT 59
41647: PUSH
41648: LD_INT 60
41650: PUSH
41651: LD_INT 61
41653: PUSH
41654: LD_INT 62
41656: PUSH
41657: LD_INT 80
41659: PUSH
41660: LD_INT 82
41662: PUSH
41663: LD_INT 83
41665: PUSH
41666: LD_INT 84
41668: PUSH
41669: LD_INT 85
41671: PUSH
41672: LD_INT 86
41674: PUSH
41675: EMPTY
41676: LIST
41677: LIST
41678: LIST
41679: LIST
41680: LIST
41681: LIST
41682: LIST
41683: LIST
41684: LIST
41685: LIST
41686: LIST
41687: LIST
41688: LIST
41689: LIST
41690: LIST
41691: LIST
41692: LIST
41693: LIST
41694: LIST
41695: LIST
41696: LIST
41697: LIST
41698: LIST
41699: LIST
41700: LIST
41701: LIST
41702: LIST
41703: LIST
41704: LIST
41705: LIST
41706: LIST
41707: LIST
41708: LIST
41709: LIST
41710: LIST
41711: LIST
41712: LIST
41713: LIST
41714: LIST
41715: LIST
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: LIST
41723: LIST
41724: LIST
41725: LIST
41726: LIST
41727: ST_TO_ADDR
41728: GO 42195
41730: LD_INT 2
41732: DOUBLE
41733: EQUAL
41734: IFTRUE 41738
41736: GO 41964
41738: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
41739: LD_ADDR_VAR 0 4
41743: PUSH
41744: LD_INT 35
41746: PUSH
41747: LD_INT 45
41749: PUSH
41750: LD_INT 46
41752: PUSH
41753: LD_INT 47
41755: PUSH
41756: LD_INT 82
41758: PUSH
41759: LD_INT 83
41761: PUSH
41762: LD_INT 84
41764: PUSH
41765: LD_INT 85
41767: PUSH
41768: LD_INT 87
41770: PUSH
41771: LD_INT 70
41773: PUSH
41774: LD_INT 1
41776: PUSH
41777: LD_INT 11
41779: PUSH
41780: LD_INT 3
41782: PUSH
41783: LD_INT 4
41785: PUSH
41786: LD_INT 5
41788: PUSH
41789: LD_INT 6
41791: PUSH
41792: LD_INT 15
41794: PUSH
41795: LD_INT 18
41797: PUSH
41798: LD_INT 7
41800: PUSH
41801: LD_INT 17
41803: PUSH
41804: LD_INT 8
41806: PUSH
41807: LD_INT 20
41809: PUSH
41810: LD_INT 21
41812: PUSH
41813: LD_INT 22
41815: PUSH
41816: LD_INT 72
41818: PUSH
41819: LD_INT 26
41821: PUSH
41822: LD_INT 69
41824: PUSH
41825: LD_INT 39
41827: PUSH
41828: LD_INT 40
41830: PUSH
41831: LD_INT 41
41833: PUSH
41834: LD_INT 42
41836: PUSH
41837: LD_INT 43
41839: PUSH
41840: LD_INT 48
41842: PUSH
41843: LD_INT 49
41845: PUSH
41846: LD_INT 50
41848: PUSH
41849: LD_INT 51
41851: PUSH
41852: LD_INT 52
41854: PUSH
41855: LD_INT 53
41857: PUSH
41858: LD_INT 54
41860: PUSH
41861: LD_INT 55
41863: PUSH
41864: LD_INT 56
41866: PUSH
41867: LD_INT 60
41869: PUSH
41870: LD_INT 61
41872: PUSH
41873: LD_INT 62
41875: PUSH
41876: LD_INT 66
41878: PUSH
41879: LD_INT 67
41881: PUSH
41882: LD_INT 68
41884: PUSH
41885: LD_INT 81
41887: PUSH
41888: LD_INT 82
41890: PUSH
41891: LD_INT 83
41893: PUSH
41894: LD_INT 84
41896: PUSH
41897: LD_INT 85
41899: PUSH
41900: LD_INT 87
41902: PUSH
41903: LD_INT 88
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: LIST
41910: LIST
41911: LIST
41912: LIST
41913: LIST
41914: LIST
41915: LIST
41916: LIST
41917: LIST
41918: LIST
41919: LIST
41920: LIST
41921: LIST
41922: LIST
41923: LIST
41924: LIST
41925: LIST
41926: LIST
41927: LIST
41928: LIST
41929: LIST
41930: LIST
41931: LIST
41932: LIST
41933: LIST
41934: LIST
41935: LIST
41936: LIST
41937: LIST
41938: LIST
41939: LIST
41940: LIST
41941: LIST
41942: LIST
41943: LIST
41944: LIST
41945: LIST
41946: LIST
41947: LIST
41948: LIST
41949: LIST
41950: LIST
41951: LIST
41952: LIST
41953: LIST
41954: LIST
41955: LIST
41956: LIST
41957: LIST
41958: LIST
41959: LIST
41960: LIST
41961: ST_TO_ADDR
41962: GO 42195
41964: LD_INT 3
41966: DOUBLE
41967: EQUAL
41968: IFTRUE 41972
41970: GO 42194
41972: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
41973: LD_ADDR_VAR 0 4
41977: PUSH
41978: LD_INT 46
41980: PUSH
41981: LD_INT 47
41983: PUSH
41984: LD_INT 1
41986: PUSH
41987: LD_INT 2
41989: PUSH
41990: LD_INT 82
41992: PUSH
41993: LD_INT 83
41995: PUSH
41996: LD_INT 84
41998: PUSH
41999: LD_INT 85
42001: PUSH
42002: LD_INT 86
42004: PUSH
42005: LD_INT 11
42007: PUSH
42008: LD_INT 9
42010: PUSH
42011: LD_INT 20
42013: PUSH
42014: LD_INT 19
42016: PUSH
42017: LD_INT 21
42019: PUSH
42020: LD_INT 24
42022: PUSH
42023: LD_INT 22
42025: PUSH
42026: LD_INT 25
42028: PUSH
42029: LD_INT 28
42031: PUSH
42032: LD_INT 29
42034: PUSH
42035: LD_INT 30
42037: PUSH
42038: LD_INT 31
42040: PUSH
42041: LD_INT 37
42043: PUSH
42044: LD_INT 38
42046: PUSH
42047: LD_INT 32
42049: PUSH
42050: LD_INT 27
42052: PUSH
42053: LD_INT 33
42055: PUSH
42056: LD_INT 69
42058: PUSH
42059: LD_INT 39
42061: PUSH
42062: LD_INT 34
42064: PUSH
42065: LD_INT 40
42067: PUSH
42068: LD_INT 71
42070: PUSH
42071: LD_INT 23
42073: PUSH
42074: LD_INT 44
42076: PUSH
42077: LD_INT 48
42079: PUSH
42080: LD_INT 49
42082: PUSH
42083: LD_INT 50
42085: PUSH
42086: LD_INT 51
42088: PUSH
42089: LD_INT 52
42091: PUSH
42092: LD_INT 53
42094: PUSH
42095: LD_INT 54
42097: PUSH
42098: LD_INT 55
42100: PUSH
42101: LD_INT 56
42103: PUSH
42104: LD_INT 57
42106: PUSH
42107: LD_INT 58
42109: PUSH
42110: LD_INT 59
42112: PUSH
42113: LD_INT 63
42115: PUSH
42116: LD_INT 64
42118: PUSH
42119: LD_INT 65
42121: PUSH
42122: LD_INT 82
42124: PUSH
42125: LD_INT 83
42127: PUSH
42128: LD_INT 84
42130: PUSH
42131: LD_INT 85
42133: PUSH
42134: LD_INT 86
42136: PUSH
42137: EMPTY
42138: LIST
42139: LIST
42140: LIST
42141: LIST
42142: LIST
42143: LIST
42144: LIST
42145: LIST
42146: LIST
42147: LIST
42148: LIST
42149: LIST
42150: LIST
42151: LIST
42152: LIST
42153: LIST
42154: LIST
42155: LIST
42156: LIST
42157: LIST
42158: LIST
42159: LIST
42160: LIST
42161: LIST
42162: LIST
42163: LIST
42164: LIST
42165: LIST
42166: LIST
42167: LIST
42168: LIST
42169: LIST
42170: LIST
42171: LIST
42172: LIST
42173: LIST
42174: LIST
42175: LIST
42176: LIST
42177: LIST
42178: LIST
42179: LIST
42180: LIST
42181: LIST
42182: LIST
42183: LIST
42184: LIST
42185: LIST
42186: LIST
42187: LIST
42188: LIST
42189: LIST
42190: LIST
42191: ST_TO_ADDR
42192: GO 42195
42194: POP
// if state > - 1 and state < 3 then
42195: LD_VAR 0 3
42199: PUSH
42200: LD_INT 1
42202: NEG
42203: GREATER
42204: IFFALSE 42216
42206: PUSH
42207: LD_VAR 0 3
42211: PUSH
42212: LD_INT 3
42214: LESS
42215: AND
42216: IFFALSE 42273
// for i in result do
42218: LD_ADDR_VAR 0 5
42222: PUSH
42223: LD_VAR 0 4
42227: PUSH
42228: FOR_IN
42229: IFFALSE 42271
// if GetTech ( i , side ) <> state then
42231: LD_VAR 0 5
42235: PPUSH
42236: LD_VAR 0 1
42240: PPUSH
42241: CALL_OW 321
42245: PUSH
42246: LD_VAR 0 3
42250: NONEQUAL
42251: IFFALSE 42269
// result := result diff i ;
42253: LD_ADDR_VAR 0 4
42257: PUSH
42258: LD_VAR 0 4
42262: PUSH
42263: LD_VAR 0 5
42267: DIFF
42268: ST_TO_ADDR
42269: GO 42228
42271: POP
42272: POP
// end ;
42273: LD_VAR 0 4
42277: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
42278: LD_INT 0
42280: PPUSH
42281: PPUSH
42282: PPUSH
// result := true ;
42283: LD_ADDR_VAR 0 3
42287: PUSH
42288: LD_INT 1
42290: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
42291: LD_ADDR_VAR 0 5
42295: PUSH
42296: LD_VAR 0 2
42300: PPUSH
42301: CALL_OW 480
42305: ST_TO_ADDR
// if not tmp then
42306: LD_VAR 0 5
42310: NOT
42311: IFFALSE 42315
// exit ;
42313: GO 42364
// for i in tmp do
42315: LD_ADDR_VAR 0 4
42319: PUSH
42320: LD_VAR 0 5
42324: PUSH
42325: FOR_IN
42326: IFFALSE 42362
// if GetTech ( i , side ) <> state_researched then
42328: LD_VAR 0 4
42332: PPUSH
42333: LD_VAR 0 1
42337: PPUSH
42338: CALL_OW 321
42342: PUSH
42343: LD_INT 2
42345: NONEQUAL
42346: IFFALSE 42360
// begin result := false ;
42348: LD_ADDR_VAR 0 3
42352: PUSH
42353: LD_INT 0
42355: ST_TO_ADDR
// exit ;
42356: POP
42357: POP
42358: GO 42364
// end ;
42360: GO 42325
42362: POP
42363: POP
// end ;
42364: LD_VAR 0 3
42368: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
42369: LD_INT 0
42371: PPUSH
42372: PPUSH
42373: PPUSH
42374: PPUSH
42375: PPUSH
42376: PPUSH
42377: PPUSH
42378: PPUSH
42379: PPUSH
42380: PPUSH
42381: PPUSH
42382: PPUSH
42383: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
42384: LD_VAR 0 1
42388: NOT
42389: IFTRUE 42406
42391: PUSH
42392: LD_VAR 0 1
42396: PPUSH
42397: CALL_OW 257
42401: PUSH
42402: LD_INT 9
42404: NONEQUAL
42405: OR
42406: IFFALSE 42410
// exit ;
42408: GO 42989
// side := GetSide ( unit ) ;
42410: LD_ADDR_VAR 0 9
42414: PUSH
42415: LD_VAR 0 1
42419: PPUSH
42420: CALL_OW 255
42424: ST_TO_ADDR
// tech_space := tech_spacanom ;
42425: LD_ADDR_VAR 0 12
42429: PUSH
42430: LD_INT 29
42432: ST_TO_ADDR
// tech_time := tech_taurad ;
42433: LD_ADDR_VAR 0 13
42437: PUSH
42438: LD_INT 28
42440: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
42441: LD_ADDR_VAR 0 11
42445: PUSH
42446: LD_VAR 0 1
42450: PPUSH
42451: CALL_OW 310
42455: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
42456: LD_VAR 0 11
42460: PPUSH
42461: CALL_OW 247
42465: PUSH
42466: LD_INT 2
42468: EQUAL
42469: IFFALSE 42473
// exit ;
42471: GO 42989
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42473: LD_ADDR_VAR 0 8
42477: PUSH
42478: LD_INT 81
42480: PUSH
42481: LD_VAR 0 9
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: LD_INT 3
42492: PUSH
42493: LD_INT 21
42495: PUSH
42496: LD_INT 3
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PPUSH
42511: CALL_OW 69
42515: ST_TO_ADDR
// if not tmp then
42516: LD_VAR 0 8
42520: NOT
42521: IFFALSE 42525
// exit ;
42523: GO 42989
// if in_unit then
42525: LD_VAR 0 11
42529: IFFALSE 42553
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
42531: LD_ADDR_VAR 0 10
42535: PUSH
42536: LD_VAR 0 8
42540: PPUSH
42541: LD_VAR 0 11
42545: PPUSH
42546: CALL_OW 74
42550: ST_TO_ADDR
42551: GO 42573
// enemy := NearestUnitToUnit ( tmp , unit ) ;
42553: LD_ADDR_VAR 0 10
42557: PUSH
42558: LD_VAR 0 8
42562: PPUSH
42563: LD_VAR 0 1
42567: PPUSH
42568: CALL_OW 74
42572: ST_TO_ADDR
// if not enemy then
42573: LD_VAR 0 10
42577: NOT
42578: IFFALSE 42582
// exit ;
42580: GO 42989
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
42582: LD_VAR 0 11
42586: IFFALSE 42608
42588: PUSH
42589: LD_VAR 0 11
42593: PPUSH
42594: LD_VAR 0 10
42598: PPUSH
42599: CALL_OW 296
42603: PUSH
42604: LD_INT 13
42606: GREATER
42607: AND
42608: IFTRUE 42630
42610: PUSH
42611: LD_VAR 0 1
42615: PPUSH
42616: LD_VAR 0 10
42620: PPUSH
42621: CALL_OW 296
42625: PUSH
42626: LD_INT 12
42628: GREATER
42629: OR
42630: IFFALSE 42634
// exit ;
42632: GO 42989
// missile := [ 1 ] ;
42634: LD_ADDR_VAR 0 14
42638: PUSH
42639: LD_INT 1
42641: PUSH
42642: EMPTY
42643: LIST
42644: ST_TO_ADDR
// if Researched ( side , tech_space ) then
42645: LD_VAR 0 9
42649: PPUSH
42650: LD_VAR 0 12
42654: PPUSH
42655: CALL_OW 325
42659: IFFALSE 42688
// missile := Replace ( missile , missile + 1 , 2 ) ;
42661: LD_ADDR_VAR 0 14
42665: PUSH
42666: LD_VAR 0 14
42670: PPUSH
42671: LD_VAR 0 14
42675: PUSH
42676: LD_INT 1
42678: PLUS
42679: PPUSH
42680: LD_INT 2
42682: PPUSH
42683: CALL_OW 1
42687: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
42688: LD_VAR 0 9
42692: PPUSH
42693: LD_VAR 0 13
42697: PPUSH
42698: CALL_OW 325
42702: IFFALSE 42726
42704: PUSH
42705: LD_VAR 0 10
42709: PPUSH
42710: CALL_OW 255
42714: PPUSH
42715: LD_VAR 0 13
42719: PPUSH
42720: CALL_OW 325
42724: NOT
42725: AND
42726: IFFALSE 42755
// missile := Replace ( missile , missile + 1 , 3 ) ;
42728: LD_ADDR_VAR 0 14
42732: PUSH
42733: LD_VAR 0 14
42737: PPUSH
42738: LD_VAR 0 14
42742: PUSH
42743: LD_INT 1
42745: PLUS
42746: PPUSH
42747: LD_INT 3
42749: PPUSH
42750: CALL_OW 1
42754: ST_TO_ADDR
// if missile < 2 then
42755: LD_VAR 0 14
42759: PUSH
42760: LD_INT 2
42762: LESS
42763: IFFALSE 42767
// exit ;
42765: GO 42989
// x := GetX ( enemy ) ;
42767: LD_ADDR_VAR 0 4
42771: PUSH
42772: LD_VAR 0 10
42776: PPUSH
42777: CALL_OW 250
42781: ST_TO_ADDR
// y := GetY ( enemy ) ;
42782: LD_ADDR_VAR 0 5
42786: PUSH
42787: LD_VAR 0 10
42791: PPUSH
42792: CALL_OW 251
42796: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
42797: LD_ADDR_VAR 0 6
42801: PUSH
42802: LD_VAR 0 4
42806: PUSH
42807: LD_INT 1
42809: NEG
42810: PPUSH
42811: LD_INT 1
42813: PPUSH
42814: CALL_OW 12
42818: PLUS
42819: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
42820: LD_ADDR_VAR 0 7
42824: PUSH
42825: LD_VAR 0 5
42829: PUSH
42830: LD_INT 1
42832: NEG
42833: PPUSH
42834: LD_INT 1
42836: PPUSH
42837: CALL_OW 12
42841: PLUS
42842: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42843: LD_VAR 0 6
42847: PPUSH
42848: LD_VAR 0 7
42852: PPUSH
42853: CALL_OW 488
42857: NOT
42858: IFFALSE 42880
// begin _x := x ;
42860: LD_ADDR_VAR 0 6
42864: PUSH
42865: LD_VAR 0 4
42869: ST_TO_ADDR
// _y := y ;
42870: LD_ADDR_VAR 0 7
42874: PUSH
42875: LD_VAR 0 5
42879: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
42880: LD_ADDR_VAR 0 3
42884: PUSH
42885: LD_INT 1
42887: PPUSH
42888: LD_VAR 0 14
42892: PPUSH
42893: CALL_OW 12
42897: ST_TO_ADDR
// case i of 1 :
42898: LD_VAR 0 3
42902: PUSH
42903: LD_INT 1
42905: DOUBLE
42906: EQUAL
42907: IFTRUE 42911
42909: GO 42928
42911: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
42912: LD_VAR 0 1
42916: PPUSH
42917: LD_VAR 0 10
42921: PPUSH
42922: CALL_OW 115
42926: GO 42989
42928: LD_INT 2
42930: DOUBLE
42931: EQUAL
42932: IFTRUE 42936
42934: GO 42958
42936: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
42937: LD_VAR 0 1
42941: PPUSH
42942: LD_VAR 0 6
42946: PPUSH
42947: LD_VAR 0 7
42951: PPUSH
42952: CALL_OW 153
42956: GO 42989
42958: LD_INT 3
42960: DOUBLE
42961: EQUAL
42962: IFTRUE 42966
42964: GO 42988
42966: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
42967: LD_VAR 0 1
42971: PPUSH
42972: LD_VAR 0 6
42976: PPUSH
42977: LD_VAR 0 7
42981: PPUSH
42982: CALL_OW 154
42986: GO 42989
42988: POP
// end ;
42989: LD_VAR 0 2
42993: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
42994: LD_INT 0
42996: PPUSH
42997: PPUSH
42998: PPUSH
42999: PPUSH
43000: PPUSH
43001: PPUSH
// if not unit or not building then
43002: LD_VAR 0 1
43006: NOT
43007: IFTRUE 43016
43009: PUSH
43010: LD_VAR 0 2
43014: NOT
43015: OR
43016: IFFALSE 43020
// exit ;
43018: GO 43178
// x := GetX ( building ) ;
43020: LD_ADDR_VAR 0 5
43024: PUSH
43025: LD_VAR 0 2
43029: PPUSH
43030: CALL_OW 250
43034: ST_TO_ADDR
// y := GetY ( building ) ;
43035: LD_ADDR_VAR 0 6
43039: PUSH
43040: LD_VAR 0 2
43044: PPUSH
43045: CALL_OW 251
43049: ST_TO_ADDR
// for i := 0 to 5 do
43050: LD_ADDR_VAR 0 4
43054: PUSH
43055: DOUBLE
43056: LD_INT 0
43058: DEC
43059: ST_TO_ADDR
43060: LD_INT 5
43062: PUSH
43063: FOR_TO
43064: IFFALSE 43176
// begin _x := ShiftX ( x , i , 3 ) ;
43066: LD_ADDR_VAR 0 7
43070: PUSH
43071: LD_VAR 0 5
43075: PPUSH
43076: LD_VAR 0 4
43080: PPUSH
43081: LD_INT 3
43083: PPUSH
43084: CALL_OW 272
43088: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
43089: LD_ADDR_VAR 0 8
43093: PUSH
43094: LD_VAR 0 6
43098: PPUSH
43099: LD_VAR 0 4
43103: PPUSH
43104: LD_INT 3
43106: PPUSH
43107: CALL_OW 273
43111: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43112: LD_VAR 0 7
43116: PPUSH
43117: LD_VAR 0 8
43121: PPUSH
43122: CALL_OW 488
43126: NOT
43127: IFFALSE 43131
// continue ;
43129: GO 43063
// if HexInfo ( _x , _y ) = 0 then
43131: LD_VAR 0 7
43135: PPUSH
43136: LD_VAR 0 8
43140: PPUSH
43141: CALL_OW 428
43145: PUSH
43146: LD_INT 0
43148: EQUAL
43149: IFFALSE 43174
// begin ComMoveXY ( unit , _x , _y ) ;
43151: LD_VAR 0 1
43155: PPUSH
43156: LD_VAR 0 7
43160: PPUSH
43161: LD_VAR 0 8
43165: PPUSH
43166: CALL_OW 111
// exit ;
43170: POP
43171: POP
43172: GO 43178
// end ; end ;
43174: GO 43063
43176: POP
43177: POP
// end ;
43178: LD_VAR 0 3
43182: RET
// export function ScanBase ( side , base_area ) ; begin
43183: LD_INT 0
43185: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
43186: LD_ADDR_VAR 0 3
43190: PUSH
43191: LD_VAR 0 2
43195: PPUSH
43196: LD_INT 81
43198: PUSH
43199: LD_VAR 0 1
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: PPUSH
43208: CALL_OW 70
43212: ST_TO_ADDR
// end ;
43213: LD_VAR 0 3
43217: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
43218: LD_INT 0
43220: PPUSH
43221: PPUSH
43222: PPUSH
43223: PPUSH
// result := false ;
43224: LD_ADDR_VAR 0 2
43228: PUSH
43229: LD_INT 0
43231: ST_TO_ADDR
// side := GetSide ( unit ) ;
43232: LD_ADDR_VAR 0 3
43236: PUSH
43237: LD_VAR 0 1
43241: PPUSH
43242: CALL_OW 255
43246: ST_TO_ADDR
// nat := GetNation ( unit ) ;
43247: LD_ADDR_VAR 0 4
43251: PUSH
43252: LD_VAR 0 1
43256: PPUSH
43257: CALL_OW 248
43261: ST_TO_ADDR
// case nat of 1 :
43262: LD_VAR 0 4
43266: PUSH
43267: LD_INT 1
43269: DOUBLE
43270: EQUAL
43271: IFTRUE 43275
43273: GO 43286
43275: POP
// tech := tech_lassight ; 2 :
43276: LD_ADDR_VAR 0 5
43280: PUSH
43281: LD_INT 12
43283: ST_TO_ADDR
43284: GO 43325
43286: LD_INT 2
43288: DOUBLE
43289: EQUAL
43290: IFTRUE 43294
43292: GO 43305
43294: POP
// tech := tech_mortar ; 3 :
43295: LD_ADDR_VAR 0 5
43299: PUSH
43300: LD_INT 41
43302: ST_TO_ADDR
43303: GO 43325
43305: LD_INT 3
43307: DOUBLE
43308: EQUAL
43309: IFTRUE 43313
43311: GO 43324
43313: POP
// tech := tech_bazooka ; end ;
43314: LD_ADDR_VAR 0 5
43318: PUSH
43319: LD_INT 44
43321: ST_TO_ADDR
43322: GO 43325
43324: POP
// if Researched ( side , tech ) then
43325: LD_VAR 0 3
43329: PPUSH
43330: LD_VAR 0 5
43334: PPUSH
43335: CALL_OW 325
43339: IFFALSE 43366
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
43341: LD_ADDR_VAR 0 2
43345: PUSH
43346: LD_INT 5
43348: PUSH
43349: LD_INT 8
43351: PUSH
43352: LD_INT 9
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: LIST
43359: PUSH
43360: LD_VAR 0 4
43364: ARRAY
43365: ST_TO_ADDR
// end ;
43366: LD_VAR 0 2
43370: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
43371: LD_INT 0
43373: PPUSH
43374: PPUSH
43375: PPUSH
// if not mines then
43376: LD_VAR 0 2
43380: NOT
43381: IFFALSE 43385
// exit ;
43383: GO 43529
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43385: LD_ADDR_VAR 0 5
43389: PUSH
43390: LD_INT 81
43392: PUSH
43393: LD_VAR 0 1
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PUSH
43402: LD_INT 3
43404: PUSH
43405: LD_INT 21
43407: PUSH
43408: LD_INT 3
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: PUSH
43415: EMPTY
43416: LIST
43417: LIST
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: PPUSH
43423: CALL_OW 69
43427: ST_TO_ADDR
// for i in mines do
43428: LD_ADDR_VAR 0 4
43432: PUSH
43433: LD_VAR 0 2
43437: PUSH
43438: FOR_IN
43439: IFFALSE 43527
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
43441: LD_VAR 0 4
43445: PUSH
43446: LD_INT 1
43448: ARRAY
43449: PPUSH
43450: LD_VAR 0 4
43454: PUSH
43455: LD_INT 2
43457: ARRAY
43458: PPUSH
43459: CALL_OW 458
43463: NOT
43464: IFFALSE 43468
// continue ;
43466: GO 43438
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
43468: LD_VAR 0 4
43472: PUSH
43473: LD_INT 1
43475: ARRAY
43476: PPUSH
43477: LD_VAR 0 4
43481: PUSH
43482: LD_INT 2
43484: ARRAY
43485: PPUSH
43486: CALL_OW 428
43490: PUSH
43491: LD_VAR 0 5
43495: IN
43496: IFFALSE 43525
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
43498: LD_VAR 0 4
43502: PUSH
43503: LD_INT 1
43505: ARRAY
43506: PPUSH
43507: LD_VAR 0 4
43511: PUSH
43512: LD_INT 2
43514: ARRAY
43515: PPUSH
43516: LD_VAR 0 1
43520: PPUSH
43521: CALL_OW 456
// end ;
43525: GO 43438
43527: POP
43528: POP
// end ;
43529: LD_VAR 0 3
43533: RET
// export function Count ( array ) ; begin
43534: LD_INT 0
43536: PPUSH
// result := array + 0 ;
43537: LD_ADDR_VAR 0 2
43541: PUSH
43542: LD_VAR 0 1
43546: PUSH
43547: LD_INT 0
43549: PLUS
43550: ST_TO_ADDR
// end ;
43551: LD_VAR 0 2
43555: RET
// export function IsEmpty ( building ) ; begin
43556: LD_INT 0
43558: PPUSH
// if not building then
43559: LD_VAR 0 1
43563: NOT
43564: IFFALSE 43568
// exit ;
43566: GO 43611
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
43568: LD_ADDR_VAR 0 2
43572: PUSH
43573: LD_VAR 0 1
43577: PUSH
43578: LD_INT 22
43580: PUSH
43581: LD_VAR 0 1
43585: PPUSH
43586: CALL_OW 255
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: LD_INT 58
43597: PUSH
43598: EMPTY
43599: LIST
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: PPUSH
43605: CALL_OW 69
43609: IN
43610: ST_TO_ADDR
// end ;
43611: LD_VAR 0 2
43615: RET
// export function IsNotFull ( building ) ; var places ; begin
43616: LD_INT 0
43618: PPUSH
43619: PPUSH
// if not building then
43620: LD_VAR 0 1
43624: NOT
43625: IFFALSE 43629
// exit ;
43627: GO 43657
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
43629: LD_ADDR_VAR 0 2
43633: PUSH
43634: LD_VAR 0 1
43638: PPUSH
43639: LD_INT 3
43641: PUSH
43642: LD_INT 62
43644: PUSH
43645: EMPTY
43646: LIST
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PPUSH
43652: CALL_OW 72
43656: ST_TO_ADDR
// end ;
43657: LD_VAR 0 2
43661: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
43662: LD_INT 0
43664: PPUSH
43665: PPUSH
43666: PPUSH
43667: PPUSH
// tmp := [ ] ;
43668: LD_ADDR_VAR 0 3
43672: PUSH
43673: EMPTY
43674: ST_TO_ADDR
// list := [ ] ;
43675: LD_ADDR_VAR 0 5
43679: PUSH
43680: EMPTY
43681: ST_TO_ADDR
// for i = 16 to 25 do
43682: LD_ADDR_VAR 0 4
43686: PUSH
43687: DOUBLE
43688: LD_INT 16
43690: DEC
43691: ST_TO_ADDR
43692: LD_INT 25
43694: PUSH
43695: FOR_TO
43696: IFFALSE 43769
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
43698: LD_ADDR_VAR 0 3
43702: PUSH
43703: LD_VAR 0 3
43707: PUSH
43708: LD_INT 22
43710: PUSH
43711: LD_VAR 0 1
43715: PPUSH
43716: CALL_OW 255
43720: PUSH
43721: EMPTY
43722: LIST
43723: LIST
43724: PUSH
43725: LD_INT 91
43727: PUSH
43728: LD_VAR 0 1
43732: PUSH
43733: LD_INT 6
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 30
43743: PUSH
43744: LD_VAR 0 4
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: LIST
43757: PUSH
43758: EMPTY
43759: LIST
43760: PPUSH
43761: CALL_OW 69
43765: ADD
43766: ST_TO_ADDR
43767: GO 43695
43769: POP
43770: POP
// for i = 1 to tmp do
43771: LD_ADDR_VAR 0 4
43775: PUSH
43776: DOUBLE
43777: LD_INT 1
43779: DEC
43780: ST_TO_ADDR
43781: LD_VAR 0 3
43785: PUSH
43786: FOR_TO
43787: IFFALSE 43875
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
43789: LD_ADDR_VAR 0 5
43793: PUSH
43794: LD_VAR 0 5
43798: PUSH
43799: LD_VAR 0 3
43803: PUSH
43804: LD_VAR 0 4
43808: ARRAY
43809: PPUSH
43810: CALL_OW 266
43814: PUSH
43815: LD_VAR 0 3
43819: PUSH
43820: LD_VAR 0 4
43824: ARRAY
43825: PPUSH
43826: CALL_OW 250
43830: PUSH
43831: LD_VAR 0 3
43835: PUSH
43836: LD_VAR 0 4
43840: ARRAY
43841: PPUSH
43842: CALL_OW 251
43846: PUSH
43847: LD_VAR 0 3
43851: PUSH
43852: LD_VAR 0 4
43856: ARRAY
43857: PPUSH
43858: CALL_OW 254
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: LIST
43867: LIST
43868: PUSH
43869: EMPTY
43870: LIST
43871: ADD
43872: ST_TO_ADDR
43873: GO 43786
43875: POP
43876: POP
// result := list ;
43877: LD_ADDR_VAR 0 2
43881: PUSH
43882: LD_VAR 0 5
43886: ST_TO_ADDR
// end ;
43887: LD_VAR 0 2
43891: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
43892: LD_INT 0
43894: PPUSH
43895: PPUSH
43896: PPUSH
43897: PPUSH
43898: PPUSH
43899: PPUSH
43900: PPUSH
// if not factory then
43901: LD_VAR 0 1
43905: NOT
43906: IFFALSE 43910
// exit ;
43908: GO 44513
// if control = control_apeman then
43910: LD_VAR 0 4
43914: PUSH
43915: LD_INT 5
43917: EQUAL
43918: IFFALSE 44027
// begin tmp := UnitsInside ( factory ) ;
43920: LD_ADDR_VAR 0 8
43924: PUSH
43925: LD_VAR 0 1
43929: PPUSH
43930: CALL_OW 313
43934: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
43935: LD_VAR 0 8
43939: PPUSH
43940: LD_INT 25
43942: PUSH
43943: LD_INT 12
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: PPUSH
43950: CALL_OW 72
43954: NOT
43955: IFFALSE 43965
// control := control_manual ;
43957: LD_ADDR_VAR 0 4
43961: PUSH
43962: LD_INT 1
43964: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
43965: LD_ADDR_VAR 0 8
43969: PUSH
43970: LD_VAR 0 1
43974: PPUSH
43975: CALL 43662 0 1
43979: ST_TO_ADDR
// if tmp then
43980: LD_VAR 0 8
43984: IFFALSE 44027
// begin for i in tmp do
43986: LD_ADDR_VAR 0 7
43990: PUSH
43991: LD_VAR 0 8
43995: PUSH
43996: FOR_IN
43997: IFFALSE 44025
// if i [ 1 ] = b_ext_radio then
43999: LD_VAR 0 7
44003: PUSH
44004: LD_INT 1
44006: ARRAY
44007: PUSH
44008: LD_INT 22
44010: EQUAL
44011: IFFALSE 44023
// begin control := control_remote ;
44013: LD_ADDR_VAR 0 4
44017: PUSH
44018: LD_INT 2
44020: ST_TO_ADDR
// break ;
44021: GO 44025
// end ;
44023: GO 43996
44025: POP
44026: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44027: LD_VAR 0 1
44031: PPUSH
44032: LD_VAR 0 2
44036: PPUSH
44037: LD_VAR 0 3
44041: PPUSH
44042: LD_VAR 0 4
44046: PPUSH
44047: LD_VAR 0 5
44051: PPUSH
44052: CALL_OW 448
44056: IFFALSE 44091
// begin result := [ chassis , engine , control , weapon ] ;
44058: LD_ADDR_VAR 0 6
44062: PUSH
44063: LD_VAR 0 2
44067: PUSH
44068: LD_VAR 0 3
44072: PUSH
44073: LD_VAR 0 4
44077: PUSH
44078: LD_VAR 0 5
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: LIST
44087: LIST
44088: ST_TO_ADDR
// exit ;
44089: GO 44513
// end ; _chassis := AvailableChassisList ( factory ) ;
44091: LD_ADDR_VAR 0 9
44095: PUSH
44096: LD_VAR 0 1
44100: PPUSH
44101: CALL_OW 475
44105: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
44106: LD_ADDR_VAR 0 11
44110: PUSH
44111: LD_VAR 0 1
44115: PPUSH
44116: CALL_OW 476
44120: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
44121: LD_ADDR_VAR 0 12
44125: PUSH
44126: LD_VAR 0 1
44130: PPUSH
44131: CALL_OW 477
44135: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
44136: LD_ADDR_VAR 0 10
44140: PUSH
44141: LD_VAR 0 1
44145: PPUSH
44146: CALL_OW 478
44150: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
44151: LD_VAR 0 9
44155: NOT
44156: IFTRUE 44165
44158: PUSH
44159: LD_VAR 0 11
44163: NOT
44164: OR
44165: IFTRUE 44174
44167: PUSH
44168: LD_VAR 0 12
44172: NOT
44173: OR
44174: IFTRUE 44183
44176: PUSH
44177: LD_VAR 0 10
44181: NOT
44182: OR
44183: IFFALSE 44218
// begin result := [ chassis , engine , control , weapon ] ;
44185: LD_ADDR_VAR 0 6
44189: PUSH
44190: LD_VAR 0 2
44194: PUSH
44195: LD_VAR 0 3
44199: PUSH
44200: LD_VAR 0 4
44204: PUSH
44205: LD_VAR 0 5
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: LIST
44214: LIST
44215: ST_TO_ADDR
// exit ;
44216: GO 44513
// end ; if not chassis in _chassis then
44218: LD_VAR 0 2
44222: PUSH
44223: LD_VAR 0 9
44227: IN
44228: NOT
44229: IFFALSE 44255
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
44231: LD_ADDR_VAR 0 2
44235: PUSH
44236: LD_VAR 0 9
44240: PUSH
44241: LD_INT 1
44243: PPUSH
44244: LD_VAR 0 9
44248: PPUSH
44249: CALL_OW 12
44253: ARRAY
44254: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
44255: LD_VAR 0 2
44259: PPUSH
44260: LD_VAR 0 3
44264: PPUSH
44265: CALL 44518 0 2
44269: NOT
44270: IFFALSE 44331
// repeat engine := _engine [ 1 ] ;
44272: LD_ADDR_VAR 0 3
44276: PUSH
44277: LD_VAR 0 11
44281: PUSH
44282: LD_INT 1
44284: ARRAY
44285: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
44286: LD_ADDR_VAR 0 11
44290: PUSH
44291: LD_VAR 0 11
44295: PPUSH
44296: LD_INT 1
44298: PPUSH
44299: CALL_OW 3
44303: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
44304: LD_VAR 0 2
44308: PPUSH
44309: LD_VAR 0 3
44313: PPUSH
44314: CALL 44518 0 2
44318: IFTRUE 44329
44320: PUSH
44321: LD_VAR 0 11
44325: PUSH
44326: EMPTY
44327: EQUAL
44328: OR
44329: IFFALSE 44272
// if not control in _control then
44331: LD_VAR 0 4
44335: PUSH
44336: LD_VAR 0 12
44340: IN
44341: NOT
44342: IFFALSE 44368
// control := _control [ rand ( 1 , _control ) ] ;
44344: LD_ADDR_VAR 0 4
44348: PUSH
44349: LD_VAR 0 12
44353: PUSH
44354: LD_INT 1
44356: PPUSH
44357: LD_VAR 0 12
44361: PPUSH
44362: CALL_OW 12
44366: ARRAY
44367: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
44368: LD_VAR 0 2
44372: PPUSH
44373: LD_VAR 0 5
44377: PPUSH
44378: CALL 44740 0 2
44382: NOT
44383: IFFALSE 44444
// repeat weapon := _weapon [ 1 ] ;
44385: LD_ADDR_VAR 0 5
44389: PUSH
44390: LD_VAR 0 10
44394: PUSH
44395: LD_INT 1
44397: ARRAY
44398: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
44399: LD_ADDR_VAR 0 10
44403: PUSH
44404: LD_VAR 0 10
44408: PPUSH
44409: LD_INT 1
44411: PPUSH
44412: CALL_OW 3
44416: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
44417: LD_VAR 0 2
44421: PPUSH
44422: LD_VAR 0 5
44426: PPUSH
44427: CALL 44740 0 2
44431: IFTRUE 44442
44433: PUSH
44434: LD_VAR 0 10
44438: PUSH
44439: EMPTY
44440: EQUAL
44441: OR
44442: IFFALSE 44385
// result := [ ] ;
44444: LD_ADDR_VAR 0 6
44448: PUSH
44449: EMPTY
44450: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44451: LD_VAR 0 1
44455: PPUSH
44456: LD_VAR 0 2
44460: PPUSH
44461: LD_VAR 0 3
44465: PPUSH
44466: LD_VAR 0 4
44470: PPUSH
44471: LD_VAR 0 5
44475: PPUSH
44476: CALL_OW 448
44480: IFFALSE 44513
// result := [ chassis , engine , control , weapon ] ;
44482: LD_ADDR_VAR 0 6
44486: PUSH
44487: LD_VAR 0 2
44491: PUSH
44492: LD_VAR 0 3
44496: PUSH
44497: LD_VAR 0 4
44501: PUSH
44502: LD_VAR 0 5
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: ST_TO_ADDR
// end ;
44513: LD_VAR 0 6
44517: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
44518: LD_INT 0
44520: PPUSH
// if not chassis or not engine then
44521: LD_VAR 0 1
44525: NOT
44526: IFTRUE 44535
44528: PUSH
44529: LD_VAR 0 2
44533: NOT
44534: OR
44535: IFFALSE 44539
// exit ;
44537: GO 44735
// case engine of engine_solar :
44539: LD_VAR 0 2
44543: PUSH
44544: LD_INT 2
44546: DOUBLE
44547: EQUAL
44548: IFTRUE 44552
44550: GO 44590
44552: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
44553: LD_ADDR_VAR 0 3
44557: PUSH
44558: LD_INT 11
44560: PUSH
44561: LD_INT 12
44563: PUSH
44564: LD_INT 13
44566: PUSH
44567: LD_INT 14
44569: PUSH
44570: LD_INT 1
44572: PUSH
44573: LD_INT 2
44575: PUSH
44576: LD_INT 3
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: LIST
44583: LIST
44584: LIST
44585: LIST
44586: LIST
44587: ST_TO_ADDR
44588: GO 44719
44590: LD_INT 1
44592: DOUBLE
44593: EQUAL
44594: IFTRUE 44598
44596: GO 44660
44598: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
44599: LD_ADDR_VAR 0 3
44603: PUSH
44604: LD_INT 11
44606: PUSH
44607: LD_INT 12
44609: PUSH
44610: LD_INT 13
44612: PUSH
44613: LD_INT 14
44615: PUSH
44616: LD_INT 1
44618: PUSH
44619: LD_INT 2
44621: PUSH
44622: LD_INT 3
44624: PUSH
44625: LD_INT 4
44627: PUSH
44628: LD_INT 5
44630: PUSH
44631: LD_INT 21
44633: PUSH
44634: LD_INT 23
44636: PUSH
44637: LD_INT 22
44639: PUSH
44640: LD_INT 24
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: LIST
44647: LIST
44648: LIST
44649: LIST
44650: LIST
44651: LIST
44652: LIST
44653: LIST
44654: LIST
44655: LIST
44656: LIST
44657: ST_TO_ADDR
44658: GO 44719
44660: LD_INT 3
44662: DOUBLE
44663: EQUAL
44664: IFTRUE 44668
44666: GO 44718
44668: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44669: LD_ADDR_VAR 0 3
44673: PUSH
44674: LD_INT 13
44676: PUSH
44677: LD_INT 14
44679: PUSH
44680: LD_INT 2
44682: PUSH
44683: LD_INT 3
44685: PUSH
44686: LD_INT 4
44688: PUSH
44689: LD_INT 5
44691: PUSH
44692: LD_INT 21
44694: PUSH
44695: LD_INT 22
44697: PUSH
44698: LD_INT 23
44700: PUSH
44701: LD_INT 24
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: LIST
44708: LIST
44709: LIST
44710: LIST
44711: LIST
44712: LIST
44713: LIST
44714: LIST
44715: ST_TO_ADDR
44716: GO 44719
44718: POP
// result := ( chassis in result ) ;
44719: LD_ADDR_VAR 0 3
44723: PUSH
44724: LD_VAR 0 1
44728: PUSH
44729: LD_VAR 0 3
44733: IN
44734: ST_TO_ADDR
// end ;
44735: LD_VAR 0 3
44739: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
44740: LD_INT 0
44742: PPUSH
// if not chassis or not weapon then
44743: LD_VAR 0 1
44747: NOT
44748: IFTRUE 44757
44750: PUSH
44751: LD_VAR 0 2
44755: NOT
44756: OR
44757: IFFALSE 44761
// exit ;
44759: GO 45821
// case weapon of us_machine_gun :
44761: LD_VAR 0 2
44765: PUSH
44766: LD_INT 2
44768: DOUBLE
44769: EQUAL
44770: IFTRUE 44774
44772: GO 44804
44774: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
44775: LD_ADDR_VAR 0 3
44779: PUSH
44780: LD_INT 1
44782: PUSH
44783: LD_INT 2
44785: PUSH
44786: LD_INT 3
44788: PUSH
44789: LD_INT 4
44791: PUSH
44792: LD_INT 5
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: ST_TO_ADDR
44802: GO 45805
44804: LD_INT 3
44806: DOUBLE
44807: EQUAL
44808: IFTRUE 44812
44810: GO 44842
44812: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
44813: LD_ADDR_VAR 0 3
44817: PUSH
44818: LD_INT 1
44820: PUSH
44821: LD_INT 2
44823: PUSH
44824: LD_INT 3
44826: PUSH
44827: LD_INT 4
44829: PUSH
44830: LD_INT 5
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: ST_TO_ADDR
44840: GO 45805
44842: LD_INT 11
44844: DOUBLE
44845: EQUAL
44846: IFTRUE 44850
44848: GO 44880
44850: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
44851: LD_ADDR_VAR 0 3
44855: PUSH
44856: LD_INT 1
44858: PUSH
44859: LD_INT 2
44861: PUSH
44862: LD_INT 3
44864: PUSH
44865: LD_INT 4
44867: PUSH
44868: LD_INT 5
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: LIST
44875: LIST
44876: LIST
44877: ST_TO_ADDR
44878: GO 45805
44880: LD_INT 4
44882: DOUBLE
44883: EQUAL
44884: IFTRUE 44888
44886: GO 44914
44888: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
44889: LD_ADDR_VAR 0 3
44893: PUSH
44894: LD_INT 2
44896: PUSH
44897: LD_INT 3
44899: PUSH
44900: LD_INT 4
44902: PUSH
44903: LD_INT 5
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: LIST
44910: LIST
44911: ST_TO_ADDR
44912: GO 45805
44914: LD_INT 5
44916: DOUBLE
44917: EQUAL
44918: IFTRUE 44922
44920: GO 44948
44922: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
44923: LD_ADDR_VAR 0 3
44927: PUSH
44928: LD_INT 2
44930: PUSH
44931: LD_INT 3
44933: PUSH
44934: LD_INT 4
44936: PUSH
44937: LD_INT 5
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: LIST
44944: LIST
44945: ST_TO_ADDR
44946: GO 45805
44948: LD_INT 9
44950: DOUBLE
44951: EQUAL
44952: IFTRUE 44956
44954: GO 44982
44956: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
44957: LD_ADDR_VAR 0 3
44961: PUSH
44962: LD_INT 2
44964: PUSH
44965: LD_INT 3
44967: PUSH
44968: LD_INT 4
44970: PUSH
44971: LD_INT 5
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: ST_TO_ADDR
44980: GO 45805
44982: LD_INT 7
44984: DOUBLE
44985: EQUAL
44986: IFTRUE 44990
44988: GO 45016
44990: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
44991: LD_ADDR_VAR 0 3
44995: PUSH
44996: LD_INT 2
44998: PUSH
44999: LD_INT 3
45001: PUSH
45002: LD_INT 4
45004: PUSH
45005: LD_INT 5
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: LIST
45012: LIST
45013: ST_TO_ADDR
45014: GO 45805
45016: LD_INT 12
45018: DOUBLE
45019: EQUAL
45020: IFTRUE 45024
45022: GO 45050
45024: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
45025: LD_ADDR_VAR 0 3
45029: PUSH
45030: LD_INT 2
45032: PUSH
45033: LD_INT 3
45035: PUSH
45036: LD_INT 4
45038: PUSH
45039: LD_INT 5
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: ST_TO_ADDR
45048: GO 45805
45050: LD_INT 13
45052: DOUBLE
45053: EQUAL
45054: IFTRUE 45058
45056: GO 45084
45058: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
45059: LD_ADDR_VAR 0 3
45063: PUSH
45064: LD_INT 2
45066: PUSH
45067: LD_INT 3
45069: PUSH
45070: LD_INT 4
45072: PUSH
45073: LD_INT 5
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: LIST
45080: LIST
45081: ST_TO_ADDR
45082: GO 45805
45084: LD_INT 14
45086: DOUBLE
45087: EQUAL
45088: IFTRUE 45092
45090: GO 45110
45092: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
45093: LD_ADDR_VAR 0 3
45097: PUSH
45098: LD_INT 4
45100: PUSH
45101: LD_INT 5
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: ST_TO_ADDR
45108: GO 45805
45110: LD_INT 6
45112: DOUBLE
45113: EQUAL
45114: IFTRUE 45118
45116: GO 45136
45118: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
45119: LD_ADDR_VAR 0 3
45123: PUSH
45124: LD_INT 4
45126: PUSH
45127: LD_INT 5
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: ST_TO_ADDR
45134: GO 45805
45136: LD_INT 10
45138: DOUBLE
45139: EQUAL
45140: IFTRUE 45144
45142: GO 45162
45144: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
45145: LD_ADDR_VAR 0 3
45149: PUSH
45150: LD_INT 4
45152: PUSH
45153: LD_INT 5
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: ST_TO_ADDR
45160: GO 45805
45162: LD_INT 22
45164: DOUBLE
45165: EQUAL
45166: IFTRUE 45170
45168: GO 45196
45170: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
45171: LD_ADDR_VAR 0 3
45175: PUSH
45176: LD_INT 11
45178: PUSH
45179: LD_INT 12
45181: PUSH
45182: LD_INT 13
45184: PUSH
45185: LD_INT 14
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: LIST
45192: LIST
45193: ST_TO_ADDR
45194: GO 45805
45196: LD_INT 23
45198: DOUBLE
45199: EQUAL
45200: IFTRUE 45204
45202: GO 45230
45204: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
45205: LD_ADDR_VAR 0 3
45209: PUSH
45210: LD_INT 11
45212: PUSH
45213: LD_INT 12
45215: PUSH
45216: LD_INT 13
45218: PUSH
45219: LD_INT 14
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: LIST
45226: LIST
45227: ST_TO_ADDR
45228: GO 45805
45230: LD_INT 24
45232: DOUBLE
45233: EQUAL
45234: IFTRUE 45238
45236: GO 45264
45238: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
45239: LD_ADDR_VAR 0 3
45243: PUSH
45244: LD_INT 11
45246: PUSH
45247: LD_INT 12
45249: PUSH
45250: LD_INT 13
45252: PUSH
45253: LD_INT 14
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: ST_TO_ADDR
45262: GO 45805
45264: LD_INT 30
45266: DOUBLE
45267: EQUAL
45268: IFTRUE 45272
45270: GO 45298
45272: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
45273: LD_ADDR_VAR 0 3
45277: PUSH
45278: LD_INT 11
45280: PUSH
45281: LD_INT 12
45283: PUSH
45284: LD_INT 13
45286: PUSH
45287: LD_INT 14
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: LIST
45294: LIST
45295: ST_TO_ADDR
45296: GO 45805
45298: LD_INT 25
45300: DOUBLE
45301: EQUAL
45302: IFTRUE 45306
45304: GO 45324
45306: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
45307: LD_ADDR_VAR 0 3
45311: PUSH
45312: LD_INT 13
45314: PUSH
45315: LD_INT 14
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: ST_TO_ADDR
45322: GO 45805
45324: LD_INT 27
45326: DOUBLE
45327: EQUAL
45328: IFTRUE 45332
45330: GO 45350
45332: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
45333: LD_ADDR_VAR 0 3
45337: PUSH
45338: LD_INT 13
45340: PUSH
45341: LD_INT 14
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: ST_TO_ADDR
45348: GO 45805
45350: LD_INT 92
45352: DOUBLE
45353: EQUAL
45354: IFTRUE 45358
45356: GO 45384
45358: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
45359: LD_ADDR_VAR 0 3
45363: PUSH
45364: LD_INT 11
45366: PUSH
45367: LD_INT 12
45369: PUSH
45370: LD_INT 13
45372: PUSH
45373: LD_INT 14
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: LIST
45380: LIST
45381: ST_TO_ADDR
45382: GO 45805
45384: LD_INT 28
45386: DOUBLE
45387: EQUAL
45388: IFTRUE 45392
45390: GO 45410
45392: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
45393: LD_ADDR_VAR 0 3
45397: PUSH
45398: LD_INT 13
45400: PUSH
45401: LD_INT 14
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: ST_TO_ADDR
45408: GO 45805
45410: LD_INT 29
45412: DOUBLE
45413: EQUAL
45414: IFTRUE 45418
45416: GO 45436
45418: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
45419: LD_ADDR_VAR 0 3
45423: PUSH
45424: LD_INT 13
45426: PUSH
45427: LD_INT 14
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: ST_TO_ADDR
45434: GO 45805
45436: LD_INT 31
45438: DOUBLE
45439: EQUAL
45440: IFTRUE 45444
45442: GO 45462
45444: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
45445: LD_ADDR_VAR 0 3
45449: PUSH
45450: LD_INT 13
45452: PUSH
45453: LD_INT 14
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: ST_TO_ADDR
45460: GO 45805
45462: LD_INT 26
45464: DOUBLE
45465: EQUAL
45466: IFTRUE 45470
45468: GO 45488
45470: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
45471: LD_ADDR_VAR 0 3
45475: PUSH
45476: LD_INT 13
45478: PUSH
45479: LD_INT 14
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: ST_TO_ADDR
45486: GO 45805
45488: LD_INT 42
45490: DOUBLE
45491: EQUAL
45492: IFTRUE 45496
45494: GO 45522
45496: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
45497: LD_ADDR_VAR 0 3
45501: PUSH
45502: LD_INT 21
45504: PUSH
45505: LD_INT 22
45507: PUSH
45508: LD_INT 23
45510: PUSH
45511: LD_INT 24
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: ST_TO_ADDR
45520: GO 45805
45522: LD_INT 43
45524: DOUBLE
45525: EQUAL
45526: IFTRUE 45530
45528: GO 45556
45530: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
45531: LD_ADDR_VAR 0 3
45535: PUSH
45536: LD_INT 21
45538: PUSH
45539: LD_INT 22
45541: PUSH
45542: LD_INT 23
45544: PUSH
45545: LD_INT 24
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: LIST
45552: LIST
45553: ST_TO_ADDR
45554: GO 45805
45556: LD_INT 44
45558: DOUBLE
45559: EQUAL
45560: IFTRUE 45564
45562: GO 45590
45564: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
45565: LD_ADDR_VAR 0 3
45569: PUSH
45570: LD_INT 21
45572: PUSH
45573: LD_INT 22
45575: PUSH
45576: LD_INT 23
45578: PUSH
45579: LD_INT 24
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: LIST
45586: LIST
45587: ST_TO_ADDR
45588: GO 45805
45590: LD_INT 45
45592: DOUBLE
45593: EQUAL
45594: IFTRUE 45598
45596: GO 45624
45598: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
45599: LD_ADDR_VAR 0 3
45603: PUSH
45604: LD_INT 21
45606: PUSH
45607: LD_INT 22
45609: PUSH
45610: LD_INT 23
45612: PUSH
45613: LD_INT 24
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: ST_TO_ADDR
45622: GO 45805
45624: LD_INT 49
45626: DOUBLE
45627: EQUAL
45628: IFTRUE 45632
45630: GO 45658
45632: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
45633: LD_ADDR_VAR 0 3
45637: PUSH
45638: LD_INT 21
45640: PUSH
45641: LD_INT 22
45643: PUSH
45644: LD_INT 23
45646: PUSH
45647: LD_INT 24
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: LIST
45654: LIST
45655: ST_TO_ADDR
45656: GO 45805
45658: LD_INT 51
45660: DOUBLE
45661: EQUAL
45662: IFTRUE 45666
45664: GO 45692
45666: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
45667: LD_ADDR_VAR 0 3
45671: PUSH
45672: LD_INT 21
45674: PUSH
45675: LD_INT 22
45677: PUSH
45678: LD_INT 23
45680: PUSH
45681: LD_INT 24
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: ST_TO_ADDR
45690: GO 45805
45692: LD_INT 52
45694: DOUBLE
45695: EQUAL
45696: IFTRUE 45700
45698: GO 45726
45700: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
45701: LD_ADDR_VAR 0 3
45705: PUSH
45706: LD_INT 21
45708: PUSH
45709: LD_INT 22
45711: PUSH
45712: LD_INT 23
45714: PUSH
45715: LD_INT 24
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: ST_TO_ADDR
45724: GO 45805
45726: LD_INT 53
45728: DOUBLE
45729: EQUAL
45730: IFTRUE 45734
45732: GO 45752
45734: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
45735: LD_ADDR_VAR 0 3
45739: PUSH
45740: LD_INT 23
45742: PUSH
45743: LD_INT 24
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: ST_TO_ADDR
45750: GO 45805
45752: LD_INT 46
45754: DOUBLE
45755: EQUAL
45756: IFTRUE 45760
45758: GO 45778
45760: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
45761: LD_ADDR_VAR 0 3
45765: PUSH
45766: LD_INT 23
45768: PUSH
45769: LD_INT 24
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: ST_TO_ADDR
45776: GO 45805
45778: LD_INT 47
45780: DOUBLE
45781: EQUAL
45782: IFTRUE 45786
45784: GO 45804
45786: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45787: LD_ADDR_VAR 0 3
45791: PUSH
45792: LD_INT 23
45794: PUSH
45795: LD_INT 24
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: ST_TO_ADDR
45802: GO 45805
45804: POP
// result := ( chassis in result ) ;
45805: LD_ADDR_VAR 0 3
45809: PUSH
45810: LD_VAR 0 1
45814: PUSH
45815: LD_VAR 0 3
45819: IN
45820: ST_TO_ADDR
// end ;
45821: LD_VAR 0 3
45825: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
45826: LD_INT 0
45828: PPUSH
45829: PPUSH
45830: PPUSH
45831: PPUSH
45832: PPUSH
45833: PPUSH
45834: PPUSH
// result := array ;
45835: LD_ADDR_VAR 0 5
45839: PUSH
45840: LD_VAR 0 1
45844: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
45845: LD_VAR 0 1
45849: NOT
45850: IFTRUE 45859
45852: PUSH
45853: LD_VAR 0 2
45857: NOT
45858: OR
45859: IFTRUE 45868
45861: PUSH
45862: LD_VAR 0 3
45866: NOT
45867: OR
45868: IFTRUE 45882
45870: PUSH
45871: LD_VAR 0 2
45875: PUSH
45876: LD_VAR 0 1
45880: GREATER
45881: OR
45882: IFTRUE 45896
45884: PUSH
45885: LD_VAR 0 3
45889: PUSH
45890: LD_VAR 0 1
45894: GREATER
45895: OR
45896: IFFALSE 45900
// exit ;
45898: GO 46196
// if direction then
45900: LD_VAR 0 4
45904: IFFALSE 45968
// begin d := 1 ;
45906: LD_ADDR_VAR 0 9
45910: PUSH
45911: LD_INT 1
45913: ST_TO_ADDR
// if i_from > i_to then
45914: LD_VAR 0 2
45918: PUSH
45919: LD_VAR 0 3
45923: GREATER
45924: IFFALSE 45950
// length := ( array - i_from ) + i_to else
45926: LD_ADDR_VAR 0 11
45930: PUSH
45931: LD_VAR 0 1
45935: PUSH
45936: LD_VAR 0 2
45940: MINUS
45941: PUSH
45942: LD_VAR 0 3
45946: PLUS
45947: ST_TO_ADDR
45948: GO 45966
// length := i_to - i_from ;
45950: LD_ADDR_VAR 0 11
45954: PUSH
45955: LD_VAR 0 3
45959: PUSH
45960: LD_VAR 0 2
45964: MINUS
45965: ST_TO_ADDR
// end else
45966: GO 46029
// begin d := - 1 ;
45968: LD_ADDR_VAR 0 9
45972: PUSH
45973: LD_INT 1
45975: NEG
45976: ST_TO_ADDR
// if i_from > i_to then
45977: LD_VAR 0 2
45981: PUSH
45982: LD_VAR 0 3
45986: GREATER
45987: IFFALSE 46007
// length := i_from - i_to else
45989: LD_ADDR_VAR 0 11
45993: PUSH
45994: LD_VAR 0 2
45998: PUSH
45999: LD_VAR 0 3
46003: MINUS
46004: ST_TO_ADDR
46005: GO 46029
// length := ( array - i_to ) + i_from ;
46007: LD_ADDR_VAR 0 11
46011: PUSH
46012: LD_VAR 0 1
46016: PUSH
46017: LD_VAR 0 3
46021: MINUS
46022: PUSH
46023: LD_VAR 0 2
46027: PLUS
46028: ST_TO_ADDR
// end ; if not length then
46029: LD_VAR 0 11
46033: NOT
46034: IFFALSE 46038
// exit ;
46036: GO 46196
// tmp := array ;
46038: LD_ADDR_VAR 0 10
46042: PUSH
46043: LD_VAR 0 1
46047: ST_TO_ADDR
// for i = 1 to length do
46048: LD_ADDR_VAR 0 6
46052: PUSH
46053: DOUBLE
46054: LD_INT 1
46056: DEC
46057: ST_TO_ADDR
46058: LD_VAR 0 11
46062: PUSH
46063: FOR_TO
46064: IFFALSE 46184
// begin for j = 1 to array do
46066: LD_ADDR_VAR 0 7
46070: PUSH
46071: DOUBLE
46072: LD_INT 1
46074: DEC
46075: ST_TO_ADDR
46076: LD_VAR 0 1
46080: PUSH
46081: FOR_TO
46082: IFFALSE 46170
// begin k := j + d ;
46084: LD_ADDR_VAR 0 8
46088: PUSH
46089: LD_VAR 0 7
46093: PUSH
46094: LD_VAR 0 9
46098: PLUS
46099: ST_TO_ADDR
// if k > array then
46100: LD_VAR 0 8
46104: PUSH
46105: LD_VAR 0 1
46109: GREATER
46110: IFFALSE 46120
// k := 1 ;
46112: LD_ADDR_VAR 0 8
46116: PUSH
46117: LD_INT 1
46119: ST_TO_ADDR
// if not k then
46120: LD_VAR 0 8
46124: NOT
46125: IFFALSE 46137
// k := array ;
46127: LD_ADDR_VAR 0 8
46131: PUSH
46132: LD_VAR 0 1
46136: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
46137: LD_ADDR_VAR 0 10
46141: PUSH
46142: LD_VAR 0 10
46146: PPUSH
46147: LD_VAR 0 8
46151: PPUSH
46152: LD_VAR 0 1
46156: PUSH
46157: LD_VAR 0 7
46161: ARRAY
46162: PPUSH
46163: CALL_OW 1
46167: ST_TO_ADDR
// end ;
46168: GO 46081
46170: POP
46171: POP
// array := tmp ;
46172: LD_ADDR_VAR 0 1
46176: PUSH
46177: LD_VAR 0 10
46181: ST_TO_ADDR
// end ;
46182: GO 46063
46184: POP
46185: POP
// result := array ;
46186: LD_ADDR_VAR 0 5
46190: PUSH
46191: LD_VAR 0 1
46195: ST_TO_ADDR
// end ;
46196: LD_VAR 0 5
46200: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
46201: LD_INT 0
46203: PPUSH
46204: PPUSH
// result := 0 ;
46205: LD_ADDR_VAR 0 3
46209: PUSH
46210: LD_INT 0
46212: ST_TO_ADDR
// if not array or not value in array then
46213: LD_VAR 0 1
46217: NOT
46218: IFTRUE 46233
46220: PUSH
46221: LD_VAR 0 2
46225: PUSH
46226: LD_VAR 0 1
46230: IN
46231: NOT
46232: OR
46233: IFFALSE 46237
// exit ;
46235: GO 46291
// for i = 1 to array do
46237: LD_ADDR_VAR 0 4
46241: PUSH
46242: DOUBLE
46243: LD_INT 1
46245: DEC
46246: ST_TO_ADDR
46247: LD_VAR 0 1
46251: PUSH
46252: FOR_TO
46253: IFFALSE 46289
// if value = array [ i ] then
46255: LD_VAR 0 2
46259: PUSH
46260: LD_VAR 0 1
46264: PUSH
46265: LD_VAR 0 4
46269: ARRAY
46270: EQUAL
46271: IFFALSE 46287
// begin result := i ;
46273: LD_ADDR_VAR 0 3
46277: PUSH
46278: LD_VAR 0 4
46282: ST_TO_ADDR
// exit ;
46283: POP
46284: POP
46285: GO 46291
// end ;
46287: GO 46252
46289: POP
46290: POP
// end ;
46291: LD_VAR 0 3
46295: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
46296: LD_INT 0
46298: PPUSH
// vc_chassis := chassis ;
46299: LD_ADDR_OWVAR 37
46303: PUSH
46304: LD_VAR 0 1
46308: ST_TO_ADDR
// vc_engine := engine ;
46309: LD_ADDR_OWVAR 39
46313: PUSH
46314: LD_VAR 0 2
46318: ST_TO_ADDR
// vc_control := control ;
46319: LD_ADDR_OWVAR 38
46323: PUSH
46324: LD_VAR 0 3
46328: ST_TO_ADDR
// vc_weapon := weapon ;
46329: LD_ADDR_OWVAR 40
46333: PUSH
46334: LD_VAR 0 4
46338: ST_TO_ADDR
// vc_fuel_battery := fuel ;
46339: LD_ADDR_OWVAR 41
46343: PUSH
46344: LD_VAR 0 5
46348: ST_TO_ADDR
// end ;
46349: LD_VAR 0 6
46353: RET
// export function WantPlant ( unit ) ; var task ; begin
46354: LD_INT 0
46356: PPUSH
46357: PPUSH
// result := false ;
46358: LD_ADDR_VAR 0 2
46362: PUSH
46363: LD_INT 0
46365: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
46366: LD_ADDR_VAR 0 3
46370: PUSH
46371: LD_VAR 0 1
46375: PPUSH
46376: CALL_OW 437
46380: ST_TO_ADDR
// if task then
46381: LD_VAR 0 3
46385: IFFALSE 46413
// if task [ 1 ] [ 1 ] = p then
46387: LD_VAR 0 3
46391: PUSH
46392: LD_INT 1
46394: ARRAY
46395: PUSH
46396: LD_INT 1
46398: ARRAY
46399: PUSH
46400: LD_STRING p
46402: EQUAL
46403: IFFALSE 46413
// result := true ;
46405: LD_ADDR_VAR 0 2
46409: PUSH
46410: LD_INT 1
46412: ST_TO_ADDR
// end ;
46413: LD_VAR 0 2
46417: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
46418: LD_INT 0
46420: PPUSH
46421: PPUSH
46422: PPUSH
46423: PPUSH
// if pos < 1 then
46424: LD_VAR 0 2
46428: PUSH
46429: LD_INT 1
46431: LESS
46432: IFFALSE 46436
// exit ;
46434: GO 46739
// if pos = 1 then
46436: LD_VAR 0 2
46440: PUSH
46441: LD_INT 1
46443: EQUAL
46444: IFFALSE 46477
// result := Replace ( arr , pos [ 1 ] , value ) else
46446: LD_ADDR_VAR 0 4
46450: PUSH
46451: LD_VAR 0 1
46455: PPUSH
46456: LD_VAR 0 2
46460: PUSH
46461: LD_INT 1
46463: ARRAY
46464: PPUSH
46465: LD_VAR 0 3
46469: PPUSH
46470: CALL_OW 1
46474: ST_TO_ADDR
46475: GO 46739
// begin tmp := arr ;
46477: LD_ADDR_VAR 0 6
46481: PUSH
46482: LD_VAR 0 1
46486: ST_TO_ADDR
// s_arr := [ tmp ] ;
46487: LD_ADDR_VAR 0 7
46491: PUSH
46492: LD_VAR 0 6
46496: PUSH
46497: EMPTY
46498: LIST
46499: ST_TO_ADDR
// for i = 1 to pos - 1 do
46500: LD_ADDR_VAR 0 5
46504: PUSH
46505: DOUBLE
46506: LD_INT 1
46508: DEC
46509: ST_TO_ADDR
46510: LD_VAR 0 2
46514: PUSH
46515: LD_INT 1
46517: MINUS
46518: PUSH
46519: FOR_TO
46520: IFFALSE 46565
// begin tmp := tmp [ pos [ i ] ] ;
46522: LD_ADDR_VAR 0 6
46526: PUSH
46527: LD_VAR 0 6
46531: PUSH
46532: LD_VAR 0 2
46536: PUSH
46537: LD_VAR 0 5
46541: ARRAY
46542: ARRAY
46543: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
46544: LD_ADDR_VAR 0 7
46548: PUSH
46549: LD_VAR 0 7
46553: PUSH
46554: LD_VAR 0 6
46558: PUSH
46559: EMPTY
46560: LIST
46561: ADD
46562: ST_TO_ADDR
// end ;
46563: GO 46519
46565: POP
46566: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
46567: LD_ADDR_VAR 0 6
46571: PUSH
46572: LD_VAR 0 6
46576: PPUSH
46577: LD_VAR 0 2
46581: PUSH
46582: LD_VAR 0 2
46586: ARRAY
46587: PPUSH
46588: LD_VAR 0 3
46592: PPUSH
46593: CALL_OW 1
46597: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
46598: LD_ADDR_VAR 0 7
46602: PUSH
46603: LD_VAR 0 7
46607: PPUSH
46608: LD_VAR 0 7
46612: PPUSH
46613: LD_VAR 0 6
46617: PPUSH
46618: CALL_OW 1
46622: ST_TO_ADDR
// for i = s_arr downto 2 do
46623: LD_ADDR_VAR 0 5
46627: PUSH
46628: DOUBLE
46629: LD_VAR 0 7
46633: INC
46634: ST_TO_ADDR
46635: LD_INT 2
46637: PUSH
46638: FOR_DOWNTO
46639: IFFALSE 46723
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
46641: LD_ADDR_VAR 0 6
46645: PUSH
46646: LD_VAR 0 7
46650: PUSH
46651: LD_VAR 0 5
46655: PUSH
46656: LD_INT 1
46658: MINUS
46659: ARRAY
46660: PPUSH
46661: LD_VAR 0 2
46665: PUSH
46666: LD_VAR 0 5
46670: PUSH
46671: LD_INT 1
46673: MINUS
46674: ARRAY
46675: PPUSH
46676: LD_VAR 0 7
46680: PUSH
46681: LD_VAR 0 5
46685: ARRAY
46686: PPUSH
46687: CALL_OW 1
46691: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
46692: LD_ADDR_VAR 0 7
46696: PUSH
46697: LD_VAR 0 7
46701: PPUSH
46702: LD_VAR 0 5
46706: PUSH
46707: LD_INT 1
46709: MINUS
46710: PPUSH
46711: LD_VAR 0 6
46715: PPUSH
46716: CALL_OW 1
46720: ST_TO_ADDR
// end ;
46721: GO 46638
46723: POP
46724: POP
// result := s_arr [ 1 ] ;
46725: LD_ADDR_VAR 0 4
46729: PUSH
46730: LD_VAR 0 7
46734: PUSH
46735: LD_INT 1
46737: ARRAY
46738: ST_TO_ADDR
// end ; end ;
46739: LD_VAR 0 4
46743: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
46744: LD_INT 0
46746: PPUSH
46747: PPUSH
// if not list then
46748: LD_VAR 0 1
46752: NOT
46753: IFFALSE 46757
// exit ;
46755: GO 46848
// i := list [ pos1 ] ;
46757: LD_ADDR_VAR 0 5
46761: PUSH
46762: LD_VAR 0 1
46766: PUSH
46767: LD_VAR 0 2
46771: ARRAY
46772: ST_TO_ADDR
// if not i then
46773: LD_VAR 0 5
46777: NOT
46778: IFFALSE 46782
// exit ;
46780: GO 46848
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
46782: LD_ADDR_VAR 0 1
46786: PUSH
46787: LD_VAR 0 1
46791: PPUSH
46792: LD_VAR 0 2
46796: PPUSH
46797: LD_VAR 0 1
46801: PUSH
46802: LD_VAR 0 3
46806: ARRAY
46807: PPUSH
46808: CALL_OW 1
46812: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
46813: LD_ADDR_VAR 0 1
46817: PUSH
46818: LD_VAR 0 1
46822: PPUSH
46823: LD_VAR 0 3
46827: PPUSH
46828: LD_VAR 0 5
46832: PPUSH
46833: CALL_OW 1
46837: ST_TO_ADDR
// result := list ;
46838: LD_ADDR_VAR 0 4
46842: PUSH
46843: LD_VAR 0 1
46847: ST_TO_ADDR
// end ;
46848: LD_VAR 0 4
46852: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
46853: LD_INT 0
46855: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
46856: LD_ADDR_VAR 0 5
46860: PUSH
46861: LD_VAR 0 1
46865: PPUSH
46866: CALL_OW 250
46870: PPUSH
46871: LD_VAR 0 1
46875: PPUSH
46876: CALL_OW 251
46880: PPUSH
46881: LD_VAR 0 2
46885: PPUSH
46886: LD_VAR 0 3
46890: PPUSH
46891: LD_VAR 0 4
46895: PPUSH
46896: CALL 47278 0 5
46900: ST_TO_ADDR
// end ;
46901: LD_VAR 0 5
46905: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
46906: LD_INT 0
46908: PPUSH
46909: PPUSH
46910: PPUSH
46911: PPUSH
// if not list or not unit then
46912: LD_VAR 0 2
46916: NOT
46917: IFTRUE 46926
46919: PUSH
46920: LD_VAR 0 1
46924: NOT
46925: OR
46926: IFFALSE 46930
// exit ;
46928: GO 47273
// result := [ ] ;
46930: LD_ADDR_VAR 0 5
46934: PUSH
46935: EMPTY
46936: ST_TO_ADDR
// for i in list do
46937: LD_ADDR_VAR 0 6
46941: PUSH
46942: LD_VAR 0 2
46946: PUSH
46947: FOR_IN
46948: IFFALSE 47166
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
46950: LD_ADDR_VAR 0 8
46954: PUSH
46955: LD_VAR 0 1
46959: PPUSH
46960: LD_VAR 0 6
46964: PUSH
46965: LD_INT 1
46967: ARRAY
46968: PPUSH
46969: LD_VAR 0 6
46973: PUSH
46974: LD_INT 2
46976: ARRAY
46977: PPUSH
46978: CALL_OW 297
46982: ST_TO_ADDR
// if not Count ( result ) then
46983: LD_VAR 0 5
46987: PPUSH
46988: CALL 43534 0 1
46992: NOT
46993: IFFALSE 47026
// begin result := Join ( result , [ i , tmp ] ) ;
46995: LD_ADDR_VAR 0 5
46999: PUSH
47000: LD_VAR 0 5
47004: PPUSH
47005: LD_VAR 0 6
47009: PUSH
47010: LD_VAR 0 8
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PPUSH
47019: CALL 79466 0 2
47023: ST_TO_ADDR
// continue ;
47024: GO 46947
// end ; if result [ result ] [ 2 ] <= tmp then
47026: LD_VAR 0 5
47030: PUSH
47031: LD_VAR 0 5
47035: ARRAY
47036: PUSH
47037: LD_INT 2
47039: ARRAY
47040: PUSH
47041: LD_VAR 0 8
47045: LESSEQUAL
47046: IFFALSE 47079
// result := Join ( result , [ i , tmp ] ) else
47048: LD_ADDR_VAR 0 5
47052: PUSH
47053: LD_VAR 0 5
47057: PPUSH
47058: LD_VAR 0 6
47062: PUSH
47063: LD_VAR 0 8
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PPUSH
47072: CALL 79466 0 2
47076: ST_TO_ADDR
47077: GO 47164
// begin for j := 1 to Count ( result ) do
47079: LD_ADDR_VAR 0 7
47083: PUSH
47084: DOUBLE
47085: LD_INT 1
47087: DEC
47088: ST_TO_ADDR
47089: LD_VAR 0 5
47093: PPUSH
47094: CALL 43534 0 1
47098: PUSH
47099: FOR_TO
47100: IFFALSE 47162
// begin if tmp < result [ j ] [ 2 ] then
47102: LD_VAR 0 8
47106: PUSH
47107: LD_VAR 0 5
47111: PUSH
47112: LD_VAR 0 7
47116: ARRAY
47117: PUSH
47118: LD_INT 2
47120: ARRAY
47121: LESS
47122: IFFALSE 47160
// begin result := Insert ( result , j , [ i , tmp ] ) ;
47124: LD_ADDR_VAR 0 5
47128: PUSH
47129: LD_VAR 0 5
47133: PPUSH
47134: LD_VAR 0 7
47138: PPUSH
47139: LD_VAR 0 6
47143: PUSH
47144: LD_VAR 0 8
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PPUSH
47153: CALL_OW 2
47157: ST_TO_ADDR
// break ;
47158: GO 47162
// end ; end ;
47160: GO 47099
47162: POP
47163: POP
// end ; end ;
47164: GO 46947
47166: POP
47167: POP
// if result and not asc then
47168: LD_VAR 0 5
47172: IFFALSE 47181
47174: PUSH
47175: LD_VAR 0 3
47179: NOT
47180: AND
47181: IFFALSE 47198
// result := ReverseArray ( result ) ;
47183: LD_ADDR_VAR 0 5
47187: PUSH
47188: LD_VAR 0 5
47192: PPUSH
47193: CALL 74556 0 1
47197: ST_TO_ADDR
// tmp := [ ] ;
47198: LD_ADDR_VAR 0 8
47202: PUSH
47203: EMPTY
47204: ST_TO_ADDR
// if mode then
47205: LD_VAR 0 4
47209: IFFALSE 47273
// begin for i := 1 to result do
47211: LD_ADDR_VAR 0 6
47215: PUSH
47216: DOUBLE
47217: LD_INT 1
47219: DEC
47220: ST_TO_ADDR
47221: LD_VAR 0 5
47225: PUSH
47226: FOR_TO
47227: IFFALSE 47261
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
47229: LD_ADDR_VAR 0 8
47233: PUSH
47234: LD_VAR 0 8
47238: PPUSH
47239: LD_VAR 0 5
47243: PUSH
47244: LD_VAR 0 6
47248: ARRAY
47249: PUSH
47250: LD_INT 1
47252: ARRAY
47253: PPUSH
47254: CALL 79466 0 2
47258: ST_TO_ADDR
47259: GO 47226
47261: POP
47262: POP
// result := tmp ;
47263: LD_ADDR_VAR 0 5
47267: PUSH
47268: LD_VAR 0 8
47272: ST_TO_ADDR
// end ; end ;
47273: LD_VAR 0 5
47277: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
47278: LD_INT 0
47280: PPUSH
47281: PPUSH
47282: PPUSH
47283: PPUSH
// if not list then
47284: LD_VAR 0 3
47288: NOT
47289: IFFALSE 47293
// exit ;
47291: GO 47683
// result := [ ] ;
47293: LD_ADDR_VAR 0 6
47297: PUSH
47298: EMPTY
47299: ST_TO_ADDR
// for i in list do
47300: LD_ADDR_VAR 0 7
47304: PUSH
47305: LD_VAR 0 3
47309: PUSH
47310: FOR_IN
47311: IFFALSE 47513
// begin tmp := GetDistUnitXY ( i , x , y ) ;
47313: LD_ADDR_VAR 0 9
47317: PUSH
47318: LD_VAR 0 7
47322: PPUSH
47323: LD_VAR 0 1
47327: PPUSH
47328: LD_VAR 0 2
47332: PPUSH
47333: CALL_OW 297
47337: ST_TO_ADDR
// if not result then
47338: LD_VAR 0 6
47342: NOT
47343: IFFALSE 47369
// result := [ [ i , tmp ] ] else
47345: LD_ADDR_VAR 0 6
47349: PUSH
47350: LD_VAR 0 7
47354: PUSH
47355: LD_VAR 0 9
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: EMPTY
47365: LIST
47366: ST_TO_ADDR
47367: GO 47511
// begin if result [ result ] [ 2 ] <= tmp then
47369: LD_VAR 0 6
47373: PUSH
47374: LD_VAR 0 6
47378: ARRAY
47379: PUSH
47380: LD_INT 2
47382: ARRAY
47383: PUSH
47384: LD_VAR 0 9
47388: LESSEQUAL
47389: IFFALSE 47431
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
47391: LD_ADDR_VAR 0 6
47395: PUSH
47396: LD_VAR 0 6
47400: PPUSH
47401: LD_VAR 0 6
47405: PUSH
47406: LD_INT 1
47408: PLUS
47409: PPUSH
47410: LD_VAR 0 7
47414: PUSH
47415: LD_VAR 0 9
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PPUSH
47424: CALL_OW 2
47428: ST_TO_ADDR
47429: GO 47511
// for j := 1 to result do
47431: LD_ADDR_VAR 0 8
47435: PUSH
47436: DOUBLE
47437: LD_INT 1
47439: DEC
47440: ST_TO_ADDR
47441: LD_VAR 0 6
47445: PUSH
47446: FOR_TO
47447: IFFALSE 47509
// begin if tmp < result [ j ] [ 2 ] then
47449: LD_VAR 0 9
47453: PUSH
47454: LD_VAR 0 6
47458: PUSH
47459: LD_VAR 0 8
47463: ARRAY
47464: PUSH
47465: LD_INT 2
47467: ARRAY
47468: LESS
47469: IFFALSE 47507
// begin result := Insert ( result , j , [ i , tmp ] ) ;
47471: LD_ADDR_VAR 0 6
47475: PUSH
47476: LD_VAR 0 6
47480: PPUSH
47481: LD_VAR 0 8
47485: PPUSH
47486: LD_VAR 0 7
47490: PUSH
47491: LD_VAR 0 9
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: PPUSH
47500: CALL_OW 2
47504: ST_TO_ADDR
// break ;
47505: GO 47509
// end ; end ;
47507: GO 47446
47509: POP
47510: POP
// end ; end ;
47511: GO 47310
47513: POP
47514: POP
// if result and not asc then
47515: LD_VAR 0 6
47519: IFFALSE 47528
47521: PUSH
47522: LD_VAR 0 4
47526: NOT
47527: AND
47528: IFFALSE 47603
// begin tmp := result ;
47530: LD_ADDR_VAR 0 9
47534: PUSH
47535: LD_VAR 0 6
47539: ST_TO_ADDR
// for i = tmp downto 1 do
47540: LD_ADDR_VAR 0 7
47544: PUSH
47545: DOUBLE
47546: LD_VAR 0 9
47550: INC
47551: ST_TO_ADDR
47552: LD_INT 1
47554: PUSH
47555: FOR_DOWNTO
47556: IFFALSE 47601
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
47558: LD_ADDR_VAR 0 6
47562: PUSH
47563: LD_VAR 0 6
47567: PPUSH
47568: LD_VAR 0 9
47572: PUSH
47573: LD_VAR 0 7
47577: MINUS
47578: PUSH
47579: LD_INT 1
47581: PLUS
47582: PPUSH
47583: LD_VAR 0 9
47587: PUSH
47588: LD_VAR 0 7
47592: ARRAY
47593: PPUSH
47594: CALL_OW 1
47598: ST_TO_ADDR
47599: GO 47555
47601: POP
47602: POP
// end ; tmp := [ ] ;
47603: LD_ADDR_VAR 0 9
47607: PUSH
47608: EMPTY
47609: ST_TO_ADDR
// if mode then
47610: LD_VAR 0 5
47614: IFFALSE 47683
// begin for i = 1 to result do
47616: LD_ADDR_VAR 0 7
47620: PUSH
47621: DOUBLE
47622: LD_INT 1
47624: DEC
47625: ST_TO_ADDR
47626: LD_VAR 0 6
47630: PUSH
47631: FOR_TO
47632: IFFALSE 47671
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
47634: LD_ADDR_VAR 0 9
47638: PUSH
47639: LD_VAR 0 9
47643: PPUSH
47644: LD_VAR 0 7
47648: PPUSH
47649: LD_VAR 0 6
47653: PUSH
47654: LD_VAR 0 7
47658: ARRAY
47659: PUSH
47660: LD_INT 1
47662: ARRAY
47663: PPUSH
47664: CALL_OW 1
47668: ST_TO_ADDR
47669: GO 47631
47671: POP
47672: POP
// result := tmp ;
47673: LD_ADDR_VAR 0 6
47677: PUSH
47678: LD_VAR 0 9
47682: ST_TO_ADDR
// end ; end ;
47683: LD_VAR 0 6
47687: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
47688: LD_INT 0
47690: PPUSH
47691: PPUSH
47692: PPUSH
47693: PPUSH
47694: PPUSH
47695: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
47696: LD_ADDR_VAR 0 5
47700: PUSH
47701: LD_INT 0
47703: PUSH
47704: LD_INT 0
47706: PUSH
47707: LD_INT 0
47709: PUSH
47710: EMPTY
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: ST_TO_ADDR
// if not x or not y then
47718: LD_VAR 0 2
47722: NOT
47723: IFTRUE 47732
47725: PUSH
47726: LD_VAR 0 3
47730: NOT
47731: OR
47732: IFFALSE 47736
// exit ;
47734: GO 49392
// if not range then
47736: LD_VAR 0 4
47740: NOT
47741: IFFALSE 47751
// range := 10 ;
47743: LD_ADDR_VAR 0 4
47747: PUSH
47748: LD_INT 10
47750: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
47751: LD_ADDR_VAR 0 8
47755: PUSH
47756: LD_INT 81
47758: PUSH
47759: LD_VAR 0 1
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 92
47770: PUSH
47771: LD_VAR 0 2
47775: PUSH
47776: LD_VAR 0 3
47780: PUSH
47781: LD_VAR 0 4
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 3
47794: PUSH
47795: LD_INT 21
47797: PUSH
47798: LD_INT 3
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: LIST
47813: PPUSH
47814: CALL_OW 69
47818: ST_TO_ADDR
// if not tmp then
47819: LD_VAR 0 8
47823: NOT
47824: IFFALSE 47828
// exit ;
47826: GO 49392
// for i in tmp do
47828: LD_ADDR_VAR 0 6
47832: PUSH
47833: LD_VAR 0 8
47837: PUSH
47838: FOR_IN
47839: IFFALSE 49367
// begin points := [ 0 , 0 , 0 ] ;
47841: LD_ADDR_VAR 0 9
47845: PUSH
47846: LD_INT 0
47848: PUSH
47849: LD_INT 0
47851: PUSH
47852: LD_INT 0
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: LIST
47859: ST_TO_ADDR
// bpoints := 1 ;
47860: LD_ADDR_VAR 0 10
47864: PUSH
47865: LD_INT 1
47867: ST_TO_ADDR
// case GetType ( i ) of unit_human :
47868: LD_VAR 0 6
47872: PPUSH
47873: CALL_OW 247
47877: PUSH
47878: LD_INT 1
47880: DOUBLE
47881: EQUAL
47882: IFTRUE 47886
47884: GO 48468
47886: POP
// begin if GetClass ( i ) = 1 then
47887: LD_VAR 0 6
47891: PPUSH
47892: CALL_OW 257
47896: PUSH
47897: LD_INT 1
47899: EQUAL
47900: IFFALSE 47921
// points := [ 10 , 5 , 3 ] ;
47902: LD_ADDR_VAR 0 9
47906: PUSH
47907: LD_INT 10
47909: PUSH
47910: LD_INT 5
47912: PUSH
47913: LD_INT 3
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: LIST
47920: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
47921: LD_VAR 0 6
47925: PPUSH
47926: CALL_OW 257
47930: PUSH
47931: LD_INT 2
47933: PUSH
47934: LD_INT 3
47936: PUSH
47937: LD_INT 4
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: LIST
47944: IN
47945: IFFALSE 47966
// points := [ 3 , 2 , 1 ] ;
47947: LD_ADDR_VAR 0 9
47951: PUSH
47952: LD_INT 3
47954: PUSH
47955: LD_INT 2
47957: PUSH
47958: LD_INT 1
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: LIST
47965: ST_TO_ADDR
// if GetClass ( i ) = 5 then
47966: LD_VAR 0 6
47970: PPUSH
47971: CALL_OW 257
47975: PUSH
47976: LD_INT 5
47978: EQUAL
47979: IFFALSE 48000
// points := [ 130 , 5 , 2 ] ;
47981: LD_ADDR_VAR 0 9
47985: PUSH
47986: LD_INT 130
47988: PUSH
47989: LD_INT 5
47991: PUSH
47992: LD_INT 2
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: LIST
47999: ST_TO_ADDR
// if GetClass ( i ) = 8 then
48000: LD_VAR 0 6
48004: PPUSH
48005: CALL_OW 257
48009: PUSH
48010: LD_INT 8
48012: EQUAL
48013: IFFALSE 48034
// points := [ 35 , 35 , 30 ] ;
48015: LD_ADDR_VAR 0 9
48019: PUSH
48020: LD_INT 35
48022: PUSH
48023: LD_INT 35
48025: PUSH
48026: LD_INT 30
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: LIST
48033: ST_TO_ADDR
// if GetClass ( i ) = 9 then
48034: LD_VAR 0 6
48038: PPUSH
48039: CALL_OW 257
48043: PUSH
48044: LD_INT 9
48046: EQUAL
48047: IFFALSE 48068
// points := [ 20 , 55 , 40 ] ;
48049: LD_ADDR_VAR 0 9
48053: PUSH
48054: LD_INT 20
48056: PUSH
48057: LD_INT 55
48059: PUSH
48060: LD_INT 40
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: LIST
48067: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
48068: LD_VAR 0 6
48072: PPUSH
48073: CALL_OW 257
48077: PUSH
48078: LD_INT 12
48080: PUSH
48081: LD_INT 16
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: IN
48088: IFFALSE 48109
// points := [ 5 , 3 , 2 ] ;
48090: LD_ADDR_VAR 0 9
48094: PUSH
48095: LD_INT 5
48097: PUSH
48098: LD_INT 3
48100: PUSH
48101: LD_INT 2
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: LIST
48108: ST_TO_ADDR
// if GetClass ( i ) = 17 then
48109: LD_VAR 0 6
48113: PPUSH
48114: CALL_OW 257
48118: PUSH
48119: LD_INT 17
48121: EQUAL
48122: IFFALSE 48143
// points := [ 100 , 50 , 75 ] ;
48124: LD_ADDR_VAR 0 9
48128: PUSH
48129: LD_INT 100
48131: PUSH
48132: LD_INT 50
48134: PUSH
48135: LD_INT 75
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: LIST
48142: ST_TO_ADDR
// if GetClass ( i ) = 15 then
48143: LD_VAR 0 6
48147: PPUSH
48148: CALL_OW 257
48152: PUSH
48153: LD_INT 15
48155: EQUAL
48156: IFFALSE 48177
// points := [ 10 , 5 , 3 ] ;
48158: LD_ADDR_VAR 0 9
48162: PUSH
48163: LD_INT 10
48165: PUSH
48166: LD_INT 5
48168: PUSH
48169: LD_INT 3
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: LIST
48176: ST_TO_ADDR
// if GetClass ( i ) = 14 then
48177: LD_VAR 0 6
48181: PPUSH
48182: CALL_OW 257
48186: PUSH
48187: LD_INT 14
48189: EQUAL
48190: IFFALSE 48211
// points := [ 10 , 0 , 0 ] ;
48192: LD_ADDR_VAR 0 9
48196: PUSH
48197: LD_INT 10
48199: PUSH
48200: LD_INT 0
48202: PUSH
48203: LD_INT 0
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: LIST
48210: ST_TO_ADDR
// if GetClass ( i ) = 11 then
48211: LD_VAR 0 6
48215: PPUSH
48216: CALL_OW 257
48220: PUSH
48221: LD_INT 11
48223: EQUAL
48224: IFFALSE 48245
// points := [ 30 , 10 , 5 ] ;
48226: LD_ADDR_VAR 0 9
48230: PUSH
48231: LD_INT 30
48233: PUSH
48234: LD_INT 10
48236: PUSH
48237: LD_INT 5
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: LIST
48244: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
48245: LD_VAR 0 1
48249: PPUSH
48250: LD_INT 5
48252: PPUSH
48253: CALL_OW 321
48257: PUSH
48258: LD_INT 2
48260: EQUAL
48261: IFFALSE 48278
// bpoints := bpoints * 1.8 ;
48263: LD_ADDR_VAR 0 10
48267: PUSH
48268: LD_VAR 0 10
48272: PUSH
48273: LD_REAL  1.80000000000000E+0000
48276: MUL
48277: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
48278: LD_VAR 0 6
48282: PPUSH
48283: CALL_OW 257
48287: PUSH
48288: LD_INT 1
48290: PUSH
48291: LD_INT 2
48293: PUSH
48294: LD_INT 3
48296: PUSH
48297: LD_INT 4
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: IN
48306: IFFALSE 48326
48308: PUSH
48309: LD_VAR 0 1
48313: PPUSH
48314: LD_INT 51
48316: PPUSH
48317: CALL_OW 321
48321: PUSH
48322: LD_INT 2
48324: EQUAL
48325: AND
48326: IFFALSE 48343
// bpoints := bpoints * 1.2 ;
48328: LD_ADDR_VAR 0 10
48332: PUSH
48333: LD_VAR 0 10
48337: PUSH
48338: LD_REAL  1.20000000000000E+0000
48341: MUL
48342: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
48343: LD_VAR 0 6
48347: PPUSH
48348: CALL_OW 257
48352: PUSH
48353: LD_INT 5
48355: PUSH
48356: LD_INT 7
48358: PUSH
48359: LD_INT 9
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: LIST
48366: IN
48367: IFFALSE 48387
48369: PUSH
48370: LD_VAR 0 1
48374: PPUSH
48375: LD_INT 52
48377: PPUSH
48378: CALL_OW 321
48382: PUSH
48383: LD_INT 2
48385: EQUAL
48386: AND
48387: IFFALSE 48404
// bpoints := bpoints * 1.5 ;
48389: LD_ADDR_VAR 0 10
48393: PUSH
48394: LD_VAR 0 10
48398: PUSH
48399: LD_REAL  1.50000000000000E+0000
48402: MUL
48403: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
48404: LD_VAR 0 1
48408: PPUSH
48409: LD_INT 66
48411: PPUSH
48412: CALL_OW 321
48416: PUSH
48417: LD_INT 2
48419: EQUAL
48420: IFFALSE 48437
// bpoints := bpoints * 1.1 ;
48422: LD_ADDR_VAR 0 10
48426: PUSH
48427: LD_VAR 0 10
48431: PUSH
48432: LD_REAL  1.10000000000000E+0000
48435: MUL
48436: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
48437: LD_ADDR_VAR 0 10
48441: PUSH
48442: LD_VAR 0 10
48446: PUSH
48447: LD_VAR 0 6
48451: PPUSH
48452: LD_INT 1
48454: PPUSH
48455: CALL_OW 259
48459: PUSH
48460: LD_REAL  1.15000000000000E+0000
48463: MUL
48464: MUL
48465: ST_TO_ADDR
// end ; unit_vehicle :
48466: GO 49296
48468: LD_INT 2
48470: DOUBLE
48471: EQUAL
48472: IFTRUE 48476
48474: GO 49284
48476: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
48477: LD_VAR 0 6
48481: PPUSH
48482: CALL_OW 264
48486: PUSH
48487: LD_INT 2
48489: PUSH
48490: LD_INT 42
48492: PUSH
48493: LD_INT 24
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: LIST
48500: IN
48501: IFFALSE 48522
// points := [ 25 , 5 , 3 ] ;
48503: LD_ADDR_VAR 0 9
48507: PUSH
48508: LD_INT 25
48510: PUSH
48511: LD_INT 5
48513: PUSH
48514: LD_INT 3
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: LIST
48521: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
48522: LD_VAR 0 6
48526: PPUSH
48527: CALL_OW 264
48531: PUSH
48532: LD_INT 4
48534: PUSH
48535: LD_INT 43
48537: PUSH
48538: LD_INT 25
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: LIST
48545: IN
48546: IFFALSE 48567
// points := [ 40 , 15 , 5 ] ;
48548: LD_ADDR_VAR 0 9
48552: PUSH
48553: LD_INT 40
48555: PUSH
48556: LD_INT 15
48558: PUSH
48559: LD_INT 5
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: LIST
48566: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
48567: LD_VAR 0 6
48571: PPUSH
48572: CALL_OW 264
48576: PUSH
48577: LD_INT 3
48579: PUSH
48580: LD_INT 23
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: IN
48587: IFFALSE 48608
// points := [ 7 , 25 , 8 ] ;
48589: LD_ADDR_VAR 0 9
48593: PUSH
48594: LD_INT 7
48596: PUSH
48597: LD_INT 25
48599: PUSH
48600: LD_INT 8
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: LIST
48607: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
48608: LD_VAR 0 6
48612: PPUSH
48613: CALL_OW 264
48617: PUSH
48618: LD_INT 5
48620: PUSH
48621: LD_INT 27
48623: PUSH
48624: LD_INT 44
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: LIST
48631: IN
48632: IFFALSE 48653
// points := [ 14 , 50 , 16 ] ;
48634: LD_ADDR_VAR 0 9
48638: PUSH
48639: LD_INT 14
48641: PUSH
48642: LD_INT 50
48644: PUSH
48645: LD_INT 16
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: LIST
48652: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
48653: LD_VAR 0 6
48657: PPUSH
48658: CALL_OW 264
48662: PUSH
48663: LD_INT 6
48665: PUSH
48666: LD_INT 46
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: IN
48673: IFFALSE 48694
// points := [ 32 , 120 , 70 ] ;
48675: LD_ADDR_VAR 0 9
48679: PUSH
48680: LD_INT 32
48682: PUSH
48683: LD_INT 120
48685: PUSH
48686: LD_INT 70
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: LIST
48693: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
48694: LD_VAR 0 6
48698: PPUSH
48699: CALL_OW 264
48703: PUSH
48704: LD_INT 7
48706: PUSH
48707: LD_INT 28
48709: PUSH
48710: LD_INT 45
48712: PUSH
48713: LD_INT 92
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: LIST
48720: LIST
48721: IN
48722: IFFALSE 48743
// points := [ 35 , 20 , 45 ] ;
48724: LD_ADDR_VAR 0 9
48728: PUSH
48729: LD_INT 35
48731: PUSH
48732: LD_INT 20
48734: PUSH
48735: LD_INT 45
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: LIST
48742: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
48743: LD_VAR 0 6
48747: PPUSH
48748: CALL_OW 264
48752: PUSH
48753: LD_INT 47
48755: PUSH
48756: EMPTY
48757: LIST
48758: IN
48759: IFFALSE 48780
// points := [ 67 , 45 , 75 ] ;
48761: LD_ADDR_VAR 0 9
48765: PUSH
48766: LD_INT 67
48768: PUSH
48769: LD_INT 45
48771: PUSH
48772: LD_INT 75
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: LIST
48779: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
48780: LD_VAR 0 6
48784: PPUSH
48785: CALL_OW 264
48789: PUSH
48790: LD_INT 26
48792: PUSH
48793: EMPTY
48794: LIST
48795: IN
48796: IFFALSE 48817
// points := [ 120 , 30 , 80 ] ;
48798: LD_ADDR_VAR 0 9
48802: PUSH
48803: LD_INT 120
48805: PUSH
48806: LD_INT 30
48808: PUSH
48809: LD_INT 80
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: LIST
48816: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
48817: LD_VAR 0 6
48821: PPUSH
48822: CALL_OW 264
48826: PUSH
48827: LD_INT 22
48829: PUSH
48830: EMPTY
48831: LIST
48832: IN
48833: IFFALSE 48854
// points := [ 40 , 1 , 1 ] ;
48835: LD_ADDR_VAR 0 9
48839: PUSH
48840: LD_INT 40
48842: PUSH
48843: LD_INT 1
48845: PUSH
48846: LD_INT 1
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: LIST
48853: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
48854: LD_VAR 0 6
48858: PPUSH
48859: CALL_OW 264
48863: PUSH
48864: LD_INT 29
48866: PUSH
48867: EMPTY
48868: LIST
48869: IN
48870: IFFALSE 48891
// points := [ 70 , 200 , 400 ] ;
48872: LD_ADDR_VAR 0 9
48876: PUSH
48877: LD_INT 70
48879: PUSH
48880: LD_INT 200
48882: PUSH
48883: LD_INT 400
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: LIST
48890: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
48891: LD_VAR 0 6
48895: PPUSH
48896: CALL_OW 264
48900: PUSH
48901: LD_INT 14
48903: PUSH
48904: LD_INT 53
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: IN
48911: IFFALSE 48932
// points := [ 40 , 10 , 20 ] ;
48913: LD_ADDR_VAR 0 9
48917: PUSH
48918: LD_INT 40
48920: PUSH
48921: LD_INT 10
48923: PUSH
48924: LD_INT 20
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: LIST
48931: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
48932: LD_VAR 0 6
48936: PPUSH
48937: CALL_OW 264
48941: PUSH
48942: LD_INT 9
48944: PUSH
48945: EMPTY
48946: LIST
48947: IN
48948: IFFALSE 48969
// points := [ 5 , 70 , 20 ] ;
48950: LD_ADDR_VAR 0 9
48954: PUSH
48955: LD_INT 5
48957: PUSH
48958: LD_INT 70
48960: PUSH
48961: LD_INT 20
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: LIST
48968: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
48969: LD_VAR 0 6
48973: PPUSH
48974: CALL_OW 264
48978: PUSH
48979: LD_INT 10
48981: PUSH
48982: EMPTY
48983: LIST
48984: IN
48985: IFFALSE 49006
// points := [ 35 , 110 , 70 ] ;
48987: LD_ADDR_VAR 0 9
48991: PUSH
48992: LD_INT 35
48994: PUSH
48995: LD_INT 110
48997: PUSH
48998: LD_INT 70
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: LIST
49005: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
49006: LD_VAR 0 6
49010: PPUSH
49011: CALL_OW 265
49015: PUSH
49016: LD_INT 25
49018: EQUAL
49019: IFFALSE 49040
// points := [ 80 , 65 , 100 ] ;
49021: LD_ADDR_VAR 0 9
49025: PUSH
49026: LD_INT 80
49028: PUSH
49029: LD_INT 65
49031: PUSH
49032: LD_INT 100
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: LIST
49039: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
49040: LD_VAR 0 6
49044: PPUSH
49045: CALL_OW 263
49049: PUSH
49050: LD_INT 1
49052: EQUAL
49053: IFFALSE 49088
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
49055: LD_ADDR_VAR 0 10
49059: PUSH
49060: LD_VAR 0 10
49064: PUSH
49065: LD_VAR 0 6
49069: PPUSH
49070: CALL_OW 311
49074: PPUSH
49075: LD_INT 3
49077: PPUSH
49078: CALL_OW 259
49082: PUSH
49083: LD_INT 4
49085: MUL
49086: MUL
49087: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
49088: LD_VAR 0 6
49092: PPUSH
49093: CALL_OW 263
49097: PUSH
49098: LD_INT 2
49100: EQUAL
49101: IFFALSE 49152
// begin j := IsControledBy ( i ) ;
49103: LD_ADDR_VAR 0 7
49107: PUSH
49108: LD_VAR 0 6
49112: PPUSH
49113: CALL_OW 312
49117: ST_TO_ADDR
// if j then
49118: LD_VAR 0 7
49122: IFFALSE 49152
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
49124: LD_ADDR_VAR 0 10
49128: PUSH
49129: LD_VAR 0 10
49133: PUSH
49134: LD_VAR 0 7
49138: PPUSH
49139: LD_INT 3
49141: PPUSH
49142: CALL_OW 259
49146: PUSH
49147: LD_INT 3
49149: MUL
49150: MUL
49151: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
49152: LD_VAR 0 6
49156: PPUSH
49157: CALL_OW 264
49161: PUSH
49162: LD_INT 5
49164: PUSH
49165: LD_INT 6
49167: PUSH
49168: LD_INT 46
49170: PUSH
49171: LD_INT 44
49173: PUSH
49174: LD_INT 47
49176: PUSH
49177: LD_INT 45
49179: PUSH
49180: LD_INT 28
49182: PUSH
49183: LD_INT 7
49185: PUSH
49186: LD_INT 27
49188: PUSH
49189: LD_INT 29
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: LIST
49196: LIST
49197: LIST
49198: LIST
49199: LIST
49200: LIST
49201: LIST
49202: LIST
49203: IN
49204: IFFALSE 49224
49206: PUSH
49207: LD_VAR 0 1
49211: PPUSH
49212: LD_INT 52
49214: PPUSH
49215: CALL_OW 321
49219: PUSH
49220: LD_INT 2
49222: EQUAL
49223: AND
49224: IFFALSE 49241
// bpoints := bpoints * 1.2 ;
49226: LD_ADDR_VAR 0 10
49230: PUSH
49231: LD_VAR 0 10
49235: PUSH
49236: LD_REAL  1.20000000000000E+0000
49239: MUL
49240: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
49241: LD_VAR 0 6
49245: PPUSH
49246: CALL_OW 264
49250: PUSH
49251: LD_INT 6
49253: PUSH
49254: LD_INT 46
49256: PUSH
49257: LD_INT 47
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: LIST
49264: IN
49265: IFFALSE 49282
// bpoints := bpoints * 1.2 ;
49267: LD_ADDR_VAR 0 10
49271: PUSH
49272: LD_VAR 0 10
49276: PUSH
49277: LD_REAL  1.20000000000000E+0000
49280: MUL
49281: ST_TO_ADDR
// end ; unit_building :
49282: GO 49296
49284: LD_INT 3
49286: DOUBLE
49287: EQUAL
49288: IFTRUE 49292
49290: GO 49295
49292: POP
// ; end ;
49293: GO 49296
49295: POP
// for j = 1 to 3 do
49296: LD_ADDR_VAR 0 7
49300: PUSH
49301: DOUBLE
49302: LD_INT 1
49304: DEC
49305: ST_TO_ADDR
49306: LD_INT 3
49308: PUSH
49309: FOR_TO
49310: IFFALSE 49363
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
49312: LD_ADDR_VAR 0 5
49316: PUSH
49317: LD_VAR 0 5
49321: PPUSH
49322: LD_VAR 0 7
49326: PPUSH
49327: LD_VAR 0 5
49331: PUSH
49332: LD_VAR 0 7
49336: ARRAY
49337: PUSH
49338: LD_VAR 0 9
49342: PUSH
49343: LD_VAR 0 7
49347: ARRAY
49348: PUSH
49349: LD_VAR 0 10
49353: MUL
49354: PLUS
49355: PPUSH
49356: CALL_OW 1
49360: ST_TO_ADDR
49361: GO 49309
49363: POP
49364: POP
// end ;
49365: GO 47838
49367: POP
49368: POP
// result := Replace ( result , 4 , tmp ) ;
49369: LD_ADDR_VAR 0 5
49373: PUSH
49374: LD_VAR 0 5
49378: PPUSH
49379: LD_INT 4
49381: PPUSH
49382: LD_VAR 0 8
49386: PPUSH
49387: CALL_OW 1
49391: ST_TO_ADDR
// end ;
49392: LD_VAR 0 5
49396: RET
// export function DangerAtRange ( unit , range ) ; begin
49397: LD_INT 0
49399: PPUSH
// if not unit then
49400: LD_VAR 0 1
49404: NOT
49405: IFFALSE 49409
// exit ;
49407: GO 49454
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
49409: LD_ADDR_VAR 0 3
49413: PUSH
49414: LD_VAR 0 1
49418: PPUSH
49419: CALL_OW 255
49423: PPUSH
49424: LD_VAR 0 1
49428: PPUSH
49429: CALL_OW 250
49433: PPUSH
49434: LD_VAR 0 1
49438: PPUSH
49439: CALL_OW 251
49443: PPUSH
49444: LD_VAR 0 2
49448: PPUSH
49449: CALL 47688 0 4
49453: ST_TO_ADDR
// end ;
49454: LD_VAR 0 3
49458: RET
// export function DangerInArea ( side , area ) ; begin
49459: LD_INT 0
49461: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
49462: LD_ADDR_VAR 0 3
49466: PUSH
49467: LD_VAR 0 2
49471: PPUSH
49472: LD_INT 81
49474: PUSH
49475: LD_VAR 0 1
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: PPUSH
49484: CALL_OW 70
49488: ST_TO_ADDR
// end ;
49489: LD_VAR 0 3
49493: RET
// export function IsExtension ( b ) ; begin
49494: LD_INT 0
49496: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
49497: LD_ADDR_VAR 0 2
49501: PUSH
49502: LD_VAR 0 1
49506: PUSH
49507: LD_INT 23
49509: PUSH
49510: LD_INT 20
49512: PUSH
49513: LD_INT 22
49515: PUSH
49516: LD_INT 17
49518: PUSH
49519: LD_INT 24
49521: PUSH
49522: LD_INT 21
49524: PUSH
49525: LD_INT 19
49527: PUSH
49528: LD_INT 16
49530: PUSH
49531: LD_INT 25
49533: PUSH
49534: LD_INT 18
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: LIST
49548: IN
49549: ST_TO_ADDR
// end ;
49550: LD_VAR 0 2
49554: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
49555: LD_INT 0
49557: PPUSH
49558: PPUSH
49559: PPUSH
// result := [ ] ;
49560: LD_ADDR_VAR 0 4
49564: PUSH
49565: EMPTY
49566: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
49567: LD_ADDR_VAR 0 5
49571: PUSH
49572: LD_VAR 0 2
49576: PPUSH
49577: LD_INT 21
49579: PUSH
49580: LD_INT 3
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PPUSH
49587: CALL_OW 70
49591: ST_TO_ADDR
// if not tmp then
49592: LD_VAR 0 5
49596: NOT
49597: IFFALSE 49601
// exit ;
49599: GO 49665
// if checkLink then
49601: LD_VAR 0 3
49605: IFFALSE 49655
// begin for i in tmp do
49607: LD_ADDR_VAR 0 6
49611: PUSH
49612: LD_VAR 0 5
49616: PUSH
49617: FOR_IN
49618: IFFALSE 49653
// if GetBase ( i ) <> base then
49620: LD_VAR 0 6
49624: PPUSH
49625: CALL_OW 274
49629: PUSH
49630: LD_VAR 0 1
49634: NONEQUAL
49635: IFFALSE 49651
// ComLinkToBase ( base , i ) ;
49637: LD_VAR 0 1
49641: PPUSH
49642: LD_VAR 0 6
49646: PPUSH
49647: CALL_OW 169
49651: GO 49617
49653: POP
49654: POP
// end ; result := tmp ;
49655: LD_ADDR_VAR 0 4
49659: PUSH
49660: LD_VAR 0 5
49664: ST_TO_ADDR
// end ;
49665: LD_VAR 0 4
49669: RET
// export function ComComplete ( units , b ) ; var i ; begin
49670: LD_INT 0
49672: PPUSH
49673: PPUSH
// if not units then
49674: LD_VAR 0 1
49678: NOT
49679: IFFALSE 49683
// exit ;
49681: GO 49773
// for i in units do
49683: LD_ADDR_VAR 0 4
49687: PUSH
49688: LD_VAR 0 1
49692: PUSH
49693: FOR_IN
49694: IFFALSE 49771
// if BuildingStatus ( b ) = bs_build then
49696: LD_VAR 0 2
49700: PPUSH
49701: CALL_OW 461
49705: PUSH
49706: LD_INT 1
49708: EQUAL
49709: IFFALSE 49769
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
49711: LD_VAR 0 4
49715: PPUSH
49716: LD_STRING h
49718: PUSH
49719: LD_VAR 0 2
49723: PPUSH
49724: CALL_OW 250
49728: PUSH
49729: LD_VAR 0 2
49733: PPUSH
49734: CALL_OW 251
49738: PUSH
49739: LD_VAR 0 2
49743: PUSH
49744: LD_INT 0
49746: PUSH
49747: LD_INT 0
49749: PUSH
49750: LD_INT 0
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: LIST
49757: LIST
49758: LIST
49759: LIST
49760: LIST
49761: PUSH
49762: EMPTY
49763: LIST
49764: PPUSH
49765: CALL_OW 446
49769: GO 49693
49771: POP
49772: POP
// end ;
49773: LD_VAR 0 3
49777: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
49778: LD_INT 0
49780: PPUSH
49781: PPUSH
49782: PPUSH
49783: PPUSH
49784: PPUSH
49785: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
49786: LD_VAR 0 1
49790: NOT
49791: IFTRUE 49808
49793: PUSH
49794: LD_VAR 0 1
49798: PPUSH
49799: CALL_OW 263
49803: PUSH
49804: LD_INT 2
49806: NONEQUAL
49807: OR
49808: IFFALSE 49812
// exit ;
49810: GO 50128
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
49812: LD_ADDR_VAR 0 6
49816: PUSH
49817: LD_INT 22
49819: PUSH
49820: LD_VAR 0 1
49824: PPUSH
49825: CALL_OW 255
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PUSH
49834: LD_INT 2
49836: PUSH
49837: LD_INT 30
49839: PUSH
49840: LD_INT 36
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 34
49849: PUSH
49850: LD_INT 31
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: LIST
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PPUSH
49866: CALL_OW 69
49870: ST_TO_ADDR
// if not tmp then
49871: LD_VAR 0 6
49875: NOT
49876: IFFALSE 49880
// exit ;
49878: GO 50128
// result := [ ] ;
49880: LD_ADDR_VAR 0 2
49884: PUSH
49885: EMPTY
49886: ST_TO_ADDR
// for i in tmp do
49887: LD_ADDR_VAR 0 3
49891: PUSH
49892: LD_VAR 0 6
49896: PUSH
49897: FOR_IN
49898: IFFALSE 49969
// begin t := UnitsInside ( i ) ;
49900: LD_ADDR_VAR 0 4
49904: PUSH
49905: LD_VAR 0 3
49909: PPUSH
49910: CALL_OW 313
49914: ST_TO_ADDR
// if t then
49915: LD_VAR 0 4
49919: IFFALSE 49967
// for j in t do
49921: LD_ADDR_VAR 0 7
49925: PUSH
49926: LD_VAR 0 4
49930: PUSH
49931: FOR_IN
49932: IFFALSE 49965
// result := Replace ( result , result + 1 , j ) ;
49934: LD_ADDR_VAR 0 2
49938: PUSH
49939: LD_VAR 0 2
49943: PPUSH
49944: LD_VAR 0 2
49948: PUSH
49949: LD_INT 1
49951: PLUS
49952: PPUSH
49953: LD_VAR 0 7
49957: PPUSH
49958: CALL_OW 1
49962: ST_TO_ADDR
49963: GO 49931
49965: POP
49966: POP
// end ;
49967: GO 49897
49969: POP
49970: POP
// if not result then
49971: LD_VAR 0 2
49975: NOT
49976: IFFALSE 49980
// exit ;
49978: GO 50128
// mech := result [ 1 ] ;
49980: LD_ADDR_VAR 0 5
49984: PUSH
49985: LD_VAR 0 2
49989: PUSH
49990: LD_INT 1
49992: ARRAY
49993: ST_TO_ADDR
// if result > 1 then
49994: LD_VAR 0 2
49998: PUSH
49999: LD_INT 1
50001: GREATER
50002: IFFALSE 50114
// begin for i = 2 to result do
50004: LD_ADDR_VAR 0 3
50008: PUSH
50009: DOUBLE
50010: LD_INT 2
50012: DEC
50013: ST_TO_ADDR
50014: LD_VAR 0 2
50018: PUSH
50019: FOR_TO
50020: IFFALSE 50112
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
50022: LD_ADDR_VAR 0 4
50026: PUSH
50027: LD_VAR 0 2
50031: PUSH
50032: LD_VAR 0 3
50036: ARRAY
50037: PPUSH
50038: LD_INT 3
50040: PPUSH
50041: CALL_OW 259
50045: PUSH
50046: LD_VAR 0 2
50050: PUSH
50051: LD_VAR 0 3
50055: ARRAY
50056: PPUSH
50057: CALL_OW 432
50061: MINUS
50062: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
50063: LD_VAR 0 4
50067: PUSH
50068: LD_VAR 0 5
50072: PPUSH
50073: LD_INT 3
50075: PPUSH
50076: CALL_OW 259
50080: PUSH
50081: LD_VAR 0 5
50085: PPUSH
50086: CALL_OW 432
50090: MINUS
50091: GREATEREQUAL
50092: IFFALSE 50110
// mech := result [ i ] ;
50094: LD_ADDR_VAR 0 5
50098: PUSH
50099: LD_VAR 0 2
50103: PUSH
50104: LD_VAR 0 3
50108: ARRAY
50109: ST_TO_ADDR
// end ;
50110: GO 50019
50112: POP
50113: POP
// end ; ComLinkTo ( vehicle , mech ) ;
50114: LD_VAR 0 1
50118: PPUSH
50119: LD_VAR 0 5
50123: PPUSH
50124: CALL_OW 135
// end ;
50128: LD_VAR 0 2
50132: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
50133: LD_INT 0
50135: PPUSH
50136: PPUSH
50137: PPUSH
50138: PPUSH
50139: PPUSH
50140: PPUSH
50141: PPUSH
50142: PPUSH
50143: PPUSH
50144: PPUSH
50145: PPUSH
50146: PPUSH
50147: PPUSH
// result := [ ] ;
50148: LD_ADDR_VAR 0 7
50152: PUSH
50153: EMPTY
50154: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
50155: LD_VAR 0 1
50159: PPUSH
50160: CALL_OW 266
50164: PUSH
50165: LD_INT 0
50167: PUSH
50168: LD_INT 1
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: IN
50175: NOT
50176: IFFALSE 50180
// exit ;
50178: GO 51820
// if name then
50180: LD_VAR 0 3
50184: IFFALSE 50200
// SetBName ( base_dep , name ) ;
50186: LD_VAR 0 1
50190: PPUSH
50191: LD_VAR 0 3
50195: PPUSH
50196: CALL_OW 500
// base := GetBase ( base_dep ) ;
50200: LD_ADDR_VAR 0 15
50204: PUSH
50205: LD_VAR 0 1
50209: PPUSH
50210: CALL_OW 274
50214: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
50215: LD_ADDR_VAR 0 16
50219: PUSH
50220: LD_VAR 0 1
50224: PPUSH
50225: CALL_OW 255
50229: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
50230: LD_ADDR_VAR 0 17
50234: PUSH
50235: LD_VAR 0 1
50239: PPUSH
50240: CALL_OW 248
50244: ST_TO_ADDR
// if sources then
50245: LD_VAR 0 5
50249: IFFALSE 50296
// for i = 1 to 3 do
50251: LD_ADDR_VAR 0 8
50255: PUSH
50256: DOUBLE
50257: LD_INT 1
50259: DEC
50260: ST_TO_ADDR
50261: LD_INT 3
50263: PUSH
50264: FOR_TO
50265: IFFALSE 50294
// AddResourceType ( base , i , sources [ i ] ) ;
50267: LD_VAR 0 15
50271: PPUSH
50272: LD_VAR 0 8
50276: PPUSH
50277: LD_VAR 0 5
50281: PUSH
50282: LD_VAR 0 8
50286: ARRAY
50287: PPUSH
50288: CALL_OW 276
50292: GO 50264
50294: POP
50295: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
50296: LD_ADDR_VAR 0 18
50300: PUSH
50301: LD_VAR 0 15
50305: PPUSH
50306: LD_VAR 0 2
50310: PPUSH
50311: LD_INT 1
50313: PPUSH
50314: CALL 49555 0 3
50318: ST_TO_ADDR
// InitHc ;
50319: CALL_OW 19
// InitUc ;
50323: CALL_OW 18
// uc_side := side ;
50327: LD_ADDR_OWVAR 20
50331: PUSH
50332: LD_VAR 0 16
50336: ST_TO_ADDR
// uc_nation := nation ;
50337: LD_ADDR_OWVAR 21
50341: PUSH
50342: LD_VAR 0 17
50346: ST_TO_ADDR
// if buildings then
50347: LD_VAR 0 18
50351: IFFALSE 51679
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
50353: LD_ADDR_VAR 0 19
50357: PUSH
50358: LD_VAR 0 18
50362: PPUSH
50363: LD_INT 2
50365: PUSH
50366: LD_INT 30
50368: PUSH
50369: LD_INT 29
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 30
50378: PUSH
50379: LD_INT 30
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: LIST
50390: PPUSH
50391: CALL_OW 72
50395: ST_TO_ADDR
// if tmp then
50396: LD_VAR 0 19
50400: IFFALSE 50448
// for i in tmp do
50402: LD_ADDR_VAR 0 8
50406: PUSH
50407: LD_VAR 0 19
50411: PUSH
50412: FOR_IN
50413: IFFALSE 50446
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
50415: LD_VAR 0 8
50419: PPUSH
50420: CALL_OW 250
50424: PPUSH
50425: LD_VAR 0 8
50429: PPUSH
50430: CALL_OW 251
50434: PPUSH
50435: LD_VAR 0 16
50439: PPUSH
50440: CALL_OW 441
50444: GO 50412
50446: POP
50447: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
50448: LD_VAR 0 18
50452: PPUSH
50453: LD_INT 2
50455: PUSH
50456: LD_INT 30
50458: PUSH
50459: LD_INT 32
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 30
50468: PUSH
50469: LD_INT 33
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: LIST
50480: PPUSH
50481: CALL_OW 72
50485: IFFALSE 50573
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
50487: LD_ADDR_VAR 0 8
50491: PUSH
50492: LD_VAR 0 18
50496: PPUSH
50497: LD_INT 2
50499: PUSH
50500: LD_INT 30
50502: PUSH
50503: LD_INT 32
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 30
50512: PUSH
50513: LD_INT 33
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: LIST
50524: PPUSH
50525: CALL_OW 72
50529: PUSH
50530: FOR_IN
50531: IFFALSE 50571
// begin if not GetBWeapon ( i ) then
50533: LD_VAR 0 8
50537: PPUSH
50538: CALL_OW 269
50542: NOT
50543: IFFALSE 50569
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
50545: LD_VAR 0 8
50549: PPUSH
50550: LD_VAR 0 8
50554: PPUSH
50555: LD_VAR 0 2
50559: PPUSH
50560: CALL 51825 0 2
50564: PPUSH
50565: CALL_OW 431
// end ;
50569: GO 50530
50571: POP
50572: POP
// end ; for i = 1 to personel do
50573: LD_ADDR_VAR 0 8
50577: PUSH
50578: DOUBLE
50579: LD_INT 1
50581: DEC
50582: ST_TO_ADDR
50583: LD_VAR 0 6
50587: PUSH
50588: FOR_TO
50589: IFFALSE 51659
// begin if i > 4 then
50591: LD_VAR 0 8
50595: PUSH
50596: LD_INT 4
50598: GREATER
50599: IFFALSE 50603
// break ;
50601: GO 51659
// case i of 1 :
50603: LD_VAR 0 8
50607: PUSH
50608: LD_INT 1
50610: DOUBLE
50611: EQUAL
50612: IFTRUE 50616
50614: GO 50696
50616: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
50617: LD_ADDR_VAR 0 12
50621: PUSH
50622: LD_VAR 0 18
50626: PPUSH
50627: LD_INT 22
50629: PUSH
50630: LD_VAR 0 16
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 58
50641: PUSH
50642: EMPTY
50643: LIST
50644: PUSH
50645: LD_INT 2
50647: PUSH
50648: LD_INT 30
50650: PUSH
50651: LD_INT 32
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: LD_INT 30
50660: PUSH
50661: LD_INT 4
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: LD_INT 30
50670: PUSH
50671: LD_INT 5
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: LIST
50688: PPUSH
50689: CALL_OW 72
50693: ST_TO_ADDR
50694: GO 50918
50696: LD_INT 2
50698: DOUBLE
50699: EQUAL
50700: IFTRUE 50704
50702: GO 50766
50704: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
50705: LD_ADDR_VAR 0 12
50709: PUSH
50710: LD_VAR 0 18
50714: PPUSH
50715: LD_INT 22
50717: PUSH
50718: LD_VAR 0 16
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: LD_INT 2
50729: PUSH
50730: LD_INT 30
50732: PUSH
50733: LD_INT 0
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 30
50742: PUSH
50743: LD_INT 1
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: LIST
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PPUSH
50759: CALL_OW 72
50763: ST_TO_ADDR
50764: GO 50918
50766: LD_INT 3
50768: DOUBLE
50769: EQUAL
50770: IFTRUE 50774
50772: GO 50836
50774: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
50775: LD_ADDR_VAR 0 12
50779: PUSH
50780: LD_VAR 0 18
50784: PPUSH
50785: LD_INT 22
50787: PUSH
50788: LD_VAR 0 16
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: LD_INT 2
50799: PUSH
50800: LD_INT 30
50802: PUSH
50803: LD_INT 2
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 30
50812: PUSH
50813: LD_INT 3
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: LIST
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PPUSH
50829: CALL_OW 72
50833: ST_TO_ADDR
50834: GO 50918
50836: LD_INT 4
50838: DOUBLE
50839: EQUAL
50840: IFTRUE 50844
50842: GO 50917
50844: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
50845: LD_ADDR_VAR 0 12
50849: PUSH
50850: LD_VAR 0 18
50854: PPUSH
50855: LD_INT 22
50857: PUSH
50858: LD_VAR 0 16
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 2
50869: PUSH
50870: LD_INT 30
50872: PUSH
50873: LD_INT 6
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 30
50882: PUSH
50883: LD_INT 7
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 30
50892: PUSH
50893: LD_INT 8
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PPUSH
50910: CALL_OW 72
50914: ST_TO_ADDR
50915: GO 50918
50917: POP
// if i = 1 then
50918: LD_VAR 0 8
50922: PUSH
50923: LD_INT 1
50925: EQUAL
50926: IFFALSE 51037
// begin tmp := [ ] ;
50928: LD_ADDR_VAR 0 19
50932: PUSH
50933: EMPTY
50934: ST_TO_ADDR
// for j in f do
50935: LD_ADDR_VAR 0 9
50939: PUSH
50940: LD_VAR 0 12
50944: PUSH
50945: FOR_IN
50946: IFFALSE 51019
// if GetBType ( j ) = b_bunker then
50948: LD_VAR 0 9
50952: PPUSH
50953: CALL_OW 266
50957: PUSH
50958: LD_INT 32
50960: EQUAL
50961: IFFALSE 50988
// tmp := Insert ( tmp , 1 , j ) else
50963: LD_ADDR_VAR 0 19
50967: PUSH
50968: LD_VAR 0 19
50972: PPUSH
50973: LD_INT 1
50975: PPUSH
50976: LD_VAR 0 9
50980: PPUSH
50981: CALL_OW 2
50985: ST_TO_ADDR
50986: GO 51017
// tmp := Insert ( tmp , tmp + 1 , j ) ;
50988: LD_ADDR_VAR 0 19
50992: PUSH
50993: LD_VAR 0 19
50997: PPUSH
50998: LD_VAR 0 19
51002: PUSH
51003: LD_INT 1
51005: PLUS
51006: PPUSH
51007: LD_VAR 0 9
51011: PPUSH
51012: CALL_OW 2
51016: ST_TO_ADDR
51017: GO 50945
51019: POP
51020: POP
// if tmp then
51021: LD_VAR 0 19
51025: IFFALSE 51037
// f := tmp ;
51027: LD_ADDR_VAR 0 12
51031: PUSH
51032: LD_VAR 0 19
51036: ST_TO_ADDR
// end ; x := personel [ i ] ;
51037: LD_ADDR_VAR 0 13
51041: PUSH
51042: LD_VAR 0 6
51046: PUSH
51047: LD_VAR 0 8
51051: ARRAY
51052: ST_TO_ADDR
// if x = - 1 then
51053: LD_VAR 0 13
51057: PUSH
51058: LD_INT 1
51060: NEG
51061: EQUAL
51062: IFFALSE 51273
// begin for j in f do
51064: LD_ADDR_VAR 0 9
51068: PUSH
51069: LD_VAR 0 12
51073: PUSH
51074: FOR_IN
51075: IFFALSE 51269
// repeat InitHc ;
51077: CALL_OW 19
// if GetBType ( j ) = b_barracks then
51081: LD_VAR 0 9
51085: PPUSH
51086: CALL_OW 266
51090: PUSH
51091: LD_INT 5
51093: EQUAL
51094: IFFALSE 51164
// begin if UnitsInside ( j ) < 3 then
51096: LD_VAR 0 9
51100: PPUSH
51101: CALL_OW 313
51105: PUSH
51106: LD_INT 3
51108: LESS
51109: IFFALSE 51145
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
51111: LD_INT 0
51113: PPUSH
51114: LD_INT 5
51116: PUSH
51117: LD_INT 8
51119: PUSH
51120: LD_INT 9
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: LIST
51127: PUSH
51128: LD_VAR 0 17
51132: ARRAY
51133: PPUSH
51134: LD_VAR 0 4
51138: PPUSH
51139: CALL_OW 380
51143: GO 51162
// PrepareHuman ( false , i , skill ) ;
51145: LD_INT 0
51147: PPUSH
51148: LD_VAR 0 8
51152: PPUSH
51153: LD_VAR 0 4
51157: PPUSH
51158: CALL_OW 380
// end else
51162: GO 51181
// PrepareHuman ( false , i , skill ) ;
51164: LD_INT 0
51166: PPUSH
51167: LD_VAR 0 8
51171: PPUSH
51172: LD_VAR 0 4
51176: PPUSH
51177: CALL_OW 380
// un := CreateHuman ;
51181: LD_ADDR_VAR 0 14
51185: PUSH
51186: CALL_OW 44
51190: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51191: LD_ADDR_VAR 0 7
51195: PUSH
51196: LD_VAR 0 7
51200: PPUSH
51201: LD_INT 1
51203: PPUSH
51204: LD_VAR 0 14
51208: PPUSH
51209: CALL_OW 2
51213: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
51214: LD_VAR 0 14
51218: PPUSH
51219: LD_VAR 0 9
51223: PPUSH
51224: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
51228: LD_VAR 0 9
51232: PPUSH
51233: CALL_OW 313
51237: PUSH
51238: LD_INT 6
51240: EQUAL
51241: IFTRUE 51265
51243: PUSH
51244: LD_VAR 0 9
51248: PPUSH
51249: CALL_OW 266
51253: PUSH
51254: LD_INT 32
51256: PUSH
51257: LD_INT 31
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: IN
51264: OR
51265: IFFALSE 51077
51267: GO 51074
51269: POP
51270: POP
// end else
51271: GO 51657
// for j = 1 to x do
51273: LD_ADDR_VAR 0 9
51277: PUSH
51278: DOUBLE
51279: LD_INT 1
51281: DEC
51282: ST_TO_ADDR
51283: LD_VAR 0 13
51287: PUSH
51288: FOR_TO
51289: IFFALSE 51655
// begin InitHc ;
51291: CALL_OW 19
// if not f then
51295: LD_VAR 0 12
51299: NOT
51300: IFFALSE 51389
// begin PrepareHuman ( false , i , skill ) ;
51302: LD_INT 0
51304: PPUSH
51305: LD_VAR 0 8
51309: PPUSH
51310: LD_VAR 0 4
51314: PPUSH
51315: CALL_OW 380
// un := CreateHuman ;
51319: LD_ADDR_VAR 0 14
51323: PUSH
51324: CALL_OW 44
51328: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51329: LD_ADDR_VAR 0 7
51333: PUSH
51334: LD_VAR 0 7
51338: PPUSH
51339: LD_INT 1
51341: PPUSH
51342: LD_VAR 0 14
51346: PPUSH
51347: CALL_OW 2
51351: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51352: LD_VAR 0 14
51356: PPUSH
51357: LD_VAR 0 1
51361: PPUSH
51362: CALL_OW 250
51366: PPUSH
51367: LD_VAR 0 1
51371: PPUSH
51372: CALL_OW 251
51376: PPUSH
51377: LD_INT 10
51379: PPUSH
51380: LD_INT 0
51382: PPUSH
51383: CALL_OW 50
// continue ;
51387: GO 51288
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
51389: LD_VAR 0 12
51393: PUSH
51394: LD_INT 1
51396: ARRAY
51397: PPUSH
51398: CALL_OW 313
51402: IFFALSE 51430
51404: PUSH
51405: LD_VAR 0 12
51409: PUSH
51410: LD_INT 1
51412: ARRAY
51413: PPUSH
51414: CALL_OW 266
51418: PUSH
51419: LD_INT 32
51421: PUSH
51422: LD_INT 31
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: IN
51429: AND
51430: IFTRUE 51451
51432: PUSH
51433: LD_VAR 0 12
51437: PUSH
51438: LD_INT 1
51440: ARRAY
51441: PPUSH
51442: CALL_OW 313
51446: PUSH
51447: LD_INT 6
51449: EQUAL
51450: OR
51451: IFFALSE 51471
// f := Delete ( f , 1 ) ;
51453: LD_ADDR_VAR 0 12
51457: PUSH
51458: LD_VAR 0 12
51462: PPUSH
51463: LD_INT 1
51465: PPUSH
51466: CALL_OW 3
51470: ST_TO_ADDR
// if not f then
51471: LD_VAR 0 12
51475: NOT
51476: IFFALSE 51494
// begin x := x + 2 ;
51478: LD_ADDR_VAR 0 13
51482: PUSH
51483: LD_VAR 0 13
51487: PUSH
51488: LD_INT 2
51490: PLUS
51491: ST_TO_ADDR
// continue ;
51492: GO 51288
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
51494: LD_VAR 0 12
51498: PUSH
51499: LD_INT 1
51501: ARRAY
51502: PPUSH
51503: CALL_OW 266
51507: PUSH
51508: LD_INT 5
51510: EQUAL
51511: IFFALSE 51585
// begin if UnitsInside ( f [ 1 ] ) < 3 then
51513: LD_VAR 0 12
51517: PUSH
51518: LD_INT 1
51520: ARRAY
51521: PPUSH
51522: CALL_OW 313
51526: PUSH
51527: LD_INT 3
51529: LESS
51530: IFFALSE 51566
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
51532: LD_INT 0
51534: PPUSH
51535: LD_INT 5
51537: PUSH
51538: LD_INT 8
51540: PUSH
51541: LD_INT 9
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: LIST
51548: PUSH
51549: LD_VAR 0 17
51553: ARRAY
51554: PPUSH
51555: LD_VAR 0 4
51559: PPUSH
51560: CALL_OW 380
51564: GO 51583
// PrepareHuman ( false , i , skill ) ;
51566: LD_INT 0
51568: PPUSH
51569: LD_VAR 0 8
51573: PPUSH
51574: LD_VAR 0 4
51578: PPUSH
51579: CALL_OW 380
// end else
51583: GO 51602
// PrepareHuman ( false , i , skill ) ;
51585: LD_INT 0
51587: PPUSH
51588: LD_VAR 0 8
51592: PPUSH
51593: LD_VAR 0 4
51597: PPUSH
51598: CALL_OW 380
// un := CreateHuman ;
51602: LD_ADDR_VAR 0 14
51606: PUSH
51607: CALL_OW 44
51611: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51612: LD_ADDR_VAR 0 7
51616: PUSH
51617: LD_VAR 0 7
51621: PPUSH
51622: LD_INT 1
51624: PPUSH
51625: LD_VAR 0 14
51629: PPUSH
51630: CALL_OW 2
51634: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
51635: LD_VAR 0 14
51639: PPUSH
51640: LD_VAR 0 12
51644: PUSH
51645: LD_INT 1
51647: ARRAY
51648: PPUSH
51649: CALL_OW 52
// end ;
51653: GO 51288
51655: POP
51656: POP
// end ;
51657: GO 50588
51659: POP
51660: POP
// result := result ^ buildings ;
51661: LD_ADDR_VAR 0 7
51665: PUSH
51666: LD_VAR 0 7
51670: PUSH
51671: LD_VAR 0 18
51675: ADD
51676: ST_TO_ADDR
// end else
51677: GO 51820
// begin for i = 1 to personel do
51679: LD_ADDR_VAR 0 8
51683: PUSH
51684: DOUBLE
51685: LD_INT 1
51687: DEC
51688: ST_TO_ADDR
51689: LD_VAR 0 6
51693: PUSH
51694: FOR_TO
51695: IFFALSE 51818
// begin if i > 4 then
51697: LD_VAR 0 8
51701: PUSH
51702: LD_INT 4
51704: GREATER
51705: IFFALSE 51709
// break ;
51707: GO 51818
// x := personel [ i ] ;
51709: LD_ADDR_VAR 0 13
51713: PUSH
51714: LD_VAR 0 6
51718: PUSH
51719: LD_VAR 0 8
51723: ARRAY
51724: ST_TO_ADDR
// if x = - 1 then
51725: LD_VAR 0 13
51729: PUSH
51730: LD_INT 1
51732: NEG
51733: EQUAL
51734: IFFALSE 51738
// continue ;
51736: GO 51694
// PrepareHuman ( false , i , skill ) ;
51738: LD_INT 0
51740: PPUSH
51741: LD_VAR 0 8
51745: PPUSH
51746: LD_VAR 0 4
51750: PPUSH
51751: CALL_OW 380
// un := CreateHuman ;
51755: LD_ADDR_VAR 0 14
51759: PUSH
51760: CALL_OW 44
51764: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51765: LD_VAR 0 14
51769: PPUSH
51770: LD_VAR 0 1
51774: PPUSH
51775: CALL_OW 250
51779: PPUSH
51780: LD_VAR 0 1
51784: PPUSH
51785: CALL_OW 251
51789: PPUSH
51790: LD_INT 10
51792: PPUSH
51793: LD_INT 0
51795: PPUSH
51796: CALL_OW 50
// result := result ^ un ;
51800: LD_ADDR_VAR 0 7
51804: PUSH
51805: LD_VAR 0 7
51809: PUSH
51810: LD_VAR 0 14
51814: ADD
51815: ST_TO_ADDR
// end ;
51816: GO 51694
51818: POP
51819: POP
// end ; end ;
51820: LD_VAR 0 7
51824: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
51825: LD_INT 0
51827: PPUSH
51828: PPUSH
51829: PPUSH
51830: PPUSH
51831: PPUSH
51832: PPUSH
51833: PPUSH
51834: PPUSH
51835: PPUSH
51836: PPUSH
51837: PPUSH
51838: PPUSH
51839: PPUSH
51840: PPUSH
51841: PPUSH
51842: PPUSH
// result := false ;
51843: LD_ADDR_VAR 0 3
51847: PUSH
51848: LD_INT 0
51850: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
51851: LD_VAR 0 1
51855: NOT
51856: IFTRUE 51881
51858: PUSH
51859: LD_VAR 0 1
51863: PPUSH
51864: CALL_OW 266
51868: PUSH
51869: LD_INT 32
51871: PUSH
51872: LD_INT 33
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: IN
51879: NOT
51880: OR
51881: IFFALSE 51885
// exit ;
51883: GO 53020
// nat := GetNation ( tower ) ;
51885: LD_ADDR_VAR 0 12
51889: PUSH
51890: LD_VAR 0 1
51894: PPUSH
51895: CALL_OW 248
51899: ST_TO_ADDR
// side := GetSide ( tower ) ;
51900: LD_ADDR_VAR 0 16
51904: PUSH
51905: LD_VAR 0 1
51909: PPUSH
51910: CALL_OW 255
51914: ST_TO_ADDR
// x := GetX ( tower ) ;
51915: LD_ADDR_VAR 0 10
51919: PUSH
51920: LD_VAR 0 1
51924: PPUSH
51925: CALL_OW 250
51929: ST_TO_ADDR
// y := GetY ( tower ) ;
51930: LD_ADDR_VAR 0 11
51934: PUSH
51935: LD_VAR 0 1
51939: PPUSH
51940: CALL_OW 251
51944: ST_TO_ADDR
// if not x or not y then
51945: LD_VAR 0 10
51949: NOT
51950: IFTRUE 51959
51952: PUSH
51953: LD_VAR 0 11
51957: NOT
51958: OR
51959: IFFALSE 51963
// exit ;
51961: GO 53020
// weapon := 0 ;
51963: LD_ADDR_VAR 0 18
51967: PUSH
51968: LD_INT 0
51970: ST_TO_ADDR
// fac_list := [ ] ;
51971: LD_ADDR_VAR 0 17
51975: PUSH
51976: EMPTY
51977: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
51978: LD_ADDR_VAR 0 6
51982: PUSH
51983: LD_VAR 0 1
51987: PPUSH
51988: CALL_OW 274
51992: PPUSH
51993: LD_VAR 0 2
51997: PPUSH
51998: LD_INT 0
52000: PPUSH
52001: CALL 49555 0 3
52005: PPUSH
52006: LD_INT 30
52008: PUSH
52009: LD_INT 3
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PPUSH
52016: CALL_OW 72
52020: ST_TO_ADDR
// if not factories then
52021: LD_VAR 0 6
52025: NOT
52026: IFFALSE 52030
// exit ;
52028: GO 53020
// for i in factories do
52030: LD_ADDR_VAR 0 8
52034: PUSH
52035: LD_VAR 0 6
52039: PUSH
52040: FOR_IN
52041: IFFALSE 52066
// fac_list := fac_list union AvailableWeaponList ( i ) ;
52043: LD_ADDR_VAR 0 17
52047: PUSH
52048: LD_VAR 0 17
52052: PUSH
52053: LD_VAR 0 8
52057: PPUSH
52058: CALL_OW 478
52062: UNION
52063: ST_TO_ADDR
52064: GO 52040
52066: POP
52067: POP
// if not fac_list then
52068: LD_VAR 0 17
52072: NOT
52073: IFFALSE 52077
// exit ;
52075: GO 53020
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
52077: LD_ADDR_VAR 0 5
52081: PUSH
52082: LD_INT 4
52084: PUSH
52085: LD_INT 5
52087: PUSH
52088: LD_INT 9
52090: PUSH
52091: LD_INT 10
52093: PUSH
52094: LD_INT 6
52096: PUSH
52097: LD_INT 7
52099: PUSH
52100: LD_INT 11
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: LIST
52107: LIST
52108: LIST
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 27
52114: PUSH
52115: LD_INT 28
52117: PUSH
52118: LD_INT 26
52120: PUSH
52121: LD_INT 30
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 43
52132: PUSH
52133: LD_INT 44
52135: PUSH
52136: LD_INT 46
52138: PUSH
52139: LD_INT 45
52141: PUSH
52142: LD_INT 47
52144: PUSH
52145: LD_INT 49
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: LIST
52160: PUSH
52161: LD_VAR 0 12
52165: ARRAY
52166: ST_TO_ADDR
// list := list isect fac_list ;
52167: LD_ADDR_VAR 0 5
52171: PUSH
52172: LD_VAR 0 5
52176: PUSH
52177: LD_VAR 0 17
52181: ISECT
52182: ST_TO_ADDR
// if not list then
52183: LD_VAR 0 5
52187: NOT
52188: IFFALSE 52192
// exit ;
52190: GO 53020
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
52192: LD_VAR 0 12
52196: PUSH
52197: LD_INT 3
52199: EQUAL
52200: IFFALSE 52212
52202: PUSH
52203: LD_INT 49
52205: PUSH
52206: LD_VAR 0 5
52210: IN
52211: AND
52212: IFFALSE 52232
52214: PUSH
52215: LD_INT 31
52217: PPUSH
52218: LD_VAR 0 16
52222: PPUSH
52223: CALL_OW 321
52227: PUSH
52228: LD_INT 2
52230: EQUAL
52231: AND
52232: IFFALSE 52292
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
52234: LD_INT 22
52236: PUSH
52237: LD_VAR 0 16
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 35
52248: PUSH
52249: LD_INT 49
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: LD_INT 91
52258: PUSH
52259: LD_VAR 0 1
52263: PUSH
52264: LD_INT 10
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: LIST
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: LIST
52276: PPUSH
52277: CALL_OW 69
52281: NOT
52282: IFFALSE 52292
// weapon := ru_time_lapser ;
52284: LD_ADDR_VAR 0 18
52288: PUSH
52289: LD_INT 49
52291: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
52292: LD_VAR 0 12
52296: PUSH
52297: LD_INT 1
52299: PUSH
52300: LD_INT 2
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: IN
52307: IFFALSE 52331
52309: PUSH
52310: LD_INT 11
52312: PUSH
52313: LD_VAR 0 5
52317: IN
52318: IFTRUE 52330
52320: PUSH
52321: LD_INT 30
52323: PUSH
52324: LD_VAR 0 5
52328: IN
52329: OR
52330: AND
52331: IFFALSE 52351
52333: PUSH
52334: LD_INT 6
52336: PPUSH
52337: LD_VAR 0 16
52341: PPUSH
52342: CALL_OW 321
52346: PUSH
52347: LD_INT 2
52349: EQUAL
52350: AND
52351: IFFALSE 52518
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
52353: LD_INT 22
52355: PUSH
52356: LD_VAR 0 16
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 2
52367: PUSH
52368: LD_INT 35
52370: PUSH
52371: LD_INT 11
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 35
52380: PUSH
52381: LD_INT 30
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 91
52395: PUSH
52396: LD_VAR 0 1
52400: PUSH
52401: LD_INT 18
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: LIST
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: LIST
52413: PPUSH
52414: CALL_OW 69
52418: NOT
52419: IFFALSE 52495
52421: PUSH
52422: LD_INT 22
52424: PUSH
52425: LD_VAR 0 16
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 2
52436: PUSH
52437: LD_INT 30
52439: PUSH
52440: LD_INT 32
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: PUSH
52447: LD_INT 30
52449: PUSH
52450: LD_INT 33
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: LIST
52461: PUSH
52462: LD_INT 91
52464: PUSH
52465: LD_VAR 0 1
52469: PUSH
52470: LD_INT 12
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: LIST
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: LIST
52482: PUSH
52483: EMPTY
52484: LIST
52485: PPUSH
52486: CALL_OW 69
52490: PUSH
52491: LD_INT 2
52493: GREATER
52494: AND
52495: IFFALSE 52518
// weapon := [ us_radar , ar_radar ] [ nat ] ;
52497: LD_ADDR_VAR 0 18
52501: PUSH
52502: LD_INT 11
52504: PUSH
52505: LD_INT 30
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_VAR 0 12
52516: ARRAY
52517: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
52518: LD_VAR 0 18
52522: NOT
52523: IFFALSE 52543
52525: PUSH
52526: LD_INT 40
52528: PPUSH
52529: LD_VAR 0 16
52533: PPUSH
52534: CALL_OW 321
52538: PUSH
52539: LD_INT 2
52541: EQUAL
52542: AND
52543: IFFALSE 52579
52545: PUSH
52546: LD_INT 7
52548: PUSH
52549: LD_VAR 0 5
52553: IN
52554: IFTRUE 52566
52556: PUSH
52557: LD_INT 28
52559: PUSH
52560: LD_VAR 0 5
52564: IN
52565: OR
52566: IFTRUE 52578
52568: PUSH
52569: LD_INT 45
52571: PUSH
52572: LD_VAR 0 5
52576: IN
52577: OR
52578: AND
52579: IFFALSE 52833
// begin hex := GetHexInfo ( x , y ) ;
52581: LD_ADDR_VAR 0 4
52585: PUSH
52586: LD_VAR 0 10
52590: PPUSH
52591: LD_VAR 0 11
52595: PPUSH
52596: CALL_OW 546
52600: ST_TO_ADDR
// if hex [ 1 ] then
52601: LD_VAR 0 4
52605: PUSH
52606: LD_INT 1
52608: ARRAY
52609: IFFALSE 52613
// exit ;
52611: GO 53020
// height := hex [ 2 ] ;
52613: LD_ADDR_VAR 0 15
52617: PUSH
52618: LD_VAR 0 4
52622: PUSH
52623: LD_INT 2
52625: ARRAY
52626: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
52627: LD_ADDR_VAR 0 14
52631: PUSH
52632: LD_INT 0
52634: PUSH
52635: LD_INT 2
52637: PUSH
52638: LD_INT 3
52640: PUSH
52641: LD_INT 5
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: ST_TO_ADDR
// for i in tmp do
52650: LD_ADDR_VAR 0 8
52654: PUSH
52655: LD_VAR 0 14
52659: PUSH
52660: FOR_IN
52661: IFFALSE 52831
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
52663: LD_ADDR_VAR 0 9
52667: PUSH
52668: LD_VAR 0 10
52672: PPUSH
52673: LD_VAR 0 8
52677: PPUSH
52678: LD_INT 5
52680: PPUSH
52681: CALL_OW 272
52685: PUSH
52686: LD_VAR 0 11
52690: PPUSH
52691: LD_VAR 0 8
52695: PPUSH
52696: LD_INT 5
52698: PPUSH
52699: CALL_OW 273
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
52708: LD_VAR 0 9
52712: PUSH
52713: LD_INT 1
52715: ARRAY
52716: PPUSH
52717: LD_VAR 0 9
52721: PUSH
52722: LD_INT 2
52724: ARRAY
52725: PPUSH
52726: CALL_OW 488
52730: IFFALSE 52829
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
52732: LD_ADDR_VAR 0 4
52736: PUSH
52737: LD_VAR 0 9
52741: PUSH
52742: LD_INT 1
52744: ARRAY
52745: PPUSH
52746: LD_VAR 0 9
52750: PUSH
52751: LD_INT 2
52753: ARRAY
52754: PPUSH
52755: CALL_OW 546
52759: ST_TO_ADDR
// if hex [ 1 ] then
52760: LD_VAR 0 4
52764: PUSH
52765: LD_INT 1
52767: ARRAY
52768: IFFALSE 52772
// continue ;
52770: GO 52660
// h := hex [ 2 ] ;
52772: LD_ADDR_VAR 0 13
52776: PUSH
52777: LD_VAR 0 4
52781: PUSH
52782: LD_INT 2
52784: ARRAY
52785: ST_TO_ADDR
// if h + 7 < height then
52786: LD_VAR 0 13
52790: PUSH
52791: LD_INT 7
52793: PLUS
52794: PUSH
52795: LD_VAR 0 15
52799: LESS
52800: IFFALSE 52829
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
52802: LD_ADDR_VAR 0 18
52806: PUSH
52807: LD_INT 7
52809: PUSH
52810: LD_INT 28
52812: PUSH
52813: LD_INT 45
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: LIST
52820: PUSH
52821: LD_VAR 0 12
52825: ARRAY
52826: ST_TO_ADDR
// break ;
52827: GO 52831
// end ; end ; end ;
52829: GO 52660
52831: POP
52832: POP
// end ; if not weapon then
52833: LD_VAR 0 18
52837: NOT
52838: IFFALSE 52898
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
52840: LD_ADDR_VAR 0 5
52844: PUSH
52845: LD_VAR 0 5
52849: PUSH
52850: LD_INT 11
52852: PUSH
52853: LD_INT 30
52855: PUSH
52856: LD_INT 49
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: LIST
52863: DIFF
52864: ST_TO_ADDR
// if not list then
52865: LD_VAR 0 5
52869: NOT
52870: IFFALSE 52874
// exit ;
52872: GO 53020
// weapon := list [ rand ( 1 , list ) ] ;
52874: LD_ADDR_VAR 0 18
52878: PUSH
52879: LD_VAR 0 5
52883: PUSH
52884: LD_INT 1
52886: PPUSH
52887: LD_VAR 0 5
52891: PPUSH
52892: CALL_OW 12
52896: ARRAY
52897: ST_TO_ADDR
// end ; if weapon then
52898: LD_VAR 0 18
52902: IFFALSE 53020
// begin tmp := CostOfWeapon ( weapon ) ;
52904: LD_ADDR_VAR 0 14
52908: PUSH
52909: LD_VAR 0 18
52913: PPUSH
52914: CALL_OW 451
52918: ST_TO_ADDR
// j := GetBase ( tower ) ;
52919: LD_ADDR_VAR 0 9
52923: PUSH
52924: LD_VAR 0 1
52928: PPUSH
52929: CALL_OW 274
52933: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
52934: LD_VAR 0 9
52938: PPUSH
52939: LD_INT 1
52941: PPUSH
52942: CALL_OW 275
52946: PUSH
52947: LD_VAR 0 14
52951: PUSH
52952: LD_INT 1
52954: ARRAY
52955: GREATEREQUAL
52956: IFFALSE 52982
52958: PUSH
52959: LD_VAR 0 9
52963: PPUSH
52964: LD_INT 2
52966: PPUSH
52967: CALL_OW 275
52971: PUSH
52972: LD_VAR 0 14
52976: PUSH
52977: LD_INT 2
52979: ARRAY
52980: GREATEREQUAL
52981: AND
52982: IFFALSE 53008
52984: PUSH
52985: LD_VAR 0 9
52989: PPUSH
52990: LD_INT 3
52992: PPUSH
52993: CALL_OW 275
52997: PUSH
52998: LD_VAR 0 14
53002: PUSH
53003: LD_INT 3
53005: ARRAY
53006: GREATEREQUAL
53007: AND
53008: IFFALSE 53020
// result := weapon ;
53010: LD_ADDR_VAR 0 3
53014: PUSH
53015: LD_VAR 0 18
53019: ST_TO_ADDR
// end ; end ;
53020: LD_VAR 0 3
53024: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
53025: LD_INT 0
53027: PPUSH
53028: PPUSH
// result := true ;
53029: LD_ADDR_VAR 0 3
53033: PUSH
53034: LD_INT 1
53036: ST_TO_ADDR
// if array1 = array2 then
53037: LD_VAR 0 1
53041: PUSH
53042: LD_VAR 0 2
53046: EQUAL
53047: IFFALSE 53107
// begin for i = 1 to array1 do
53049: LD_ADDR_VAR 0 4
53053: PUSH
53054: DOUBLE
53055: LD_INT 1
53057: DEC
53058: ST_TO_ADDR
53059: LD_VAR 0 1
53063: PUSH
53064: FOR_TO
53065: IFFALSE 53103
// if array1 [ i ] <> array2 [ i ] then
53067: LD_VAR 0 1
53071: PUSH
53072: LD_VAR 0 4
53076: ARRAY
53077: PUSH
53078: LD_VAR 0 2
53082: PUSH
53083: LD_VAR 0 4
53087: ARRAY
53088: NONEQUAL
53089: IFFALSE 53101
// begin result := false ;
53091: LD_ADDR_VAR 0 3
53095: PUSH
53096: LD_INT 0
53098: ST_TO_ADDR
// break ;
53099: GO 53103
// end ;
53101: GO 53064
53103: POP
53104: POP
// end else
53105: GO 53115
// result := false ;
53107: LD_ADDR_VAR 0 3
53111: PUSH
53112: LD_INT 0
53114: ST_TO_ADDR
// end ;
53115: LD_VAR 0 3
53119: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
53120: LD_INT 0
53122: PPUSH
53123: PPUSH
// if not array1 or not array2 then
53124: LD_VAR 0 1
53128: NOT
53129: IFTRUE 53138
53131: PUSH
53132: LD_VAR 0 2
53136: NOT
53137: OR
53138: IFFALSE 53142
// exit ;
53140: GO 53206
// result := true ;
53142: LD_ADDR_VAR 0 3
53146: PUSH
53147: LD_INT 1
53149: ST_TO_ADDR
// for i = 1 to array1 do
53150: LD_ADDR_VAR 0 4
53154: PUSH
53155: DOUBLE
53156: LD_INT 1
53158: DEC
53159: ST_TO_ADDR
53160: LD_VAR 0 1
53164: PUSH
53165: FOR_TO
53166: IFFALSE 53204
// if array1 [ i ] <> array2 [ i ] then
53168: LD_VAR 0 1
53172: PUSH
53173: LD_VAR 0 4
53177: ARRAY
53178: PUSH
53179: LD_VAR 0 2
53183: PUSH
53184: LD_VAR 0 4
53188: ARRAY
53189: NONEQUAL
53190: IFFALSE 53202
// begin result := false ;
53192: LD_ADDR_VAR 0 3
53196: PUSH
53197: LD_INT 0
53199: ST_TO_ADDR
// break ;
53200: GO 53204
// end ;
53202: GO 53165
53204: POP
53205: POP
// end ;
53206: LD_VAR 0 3
53210: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
53211: LD_INT 0
53213: PPUSH
53214: PPUSH
53215: PPUSH
// pom := GetBase ( fac ) ;
53216: LD_ADDR_VAR 0 5
53220: PUSH
53221: LD_VAR 0 1
53225: PPUSH
53226: CALL_OW 274
53230: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
53231: LD_ADDR_VAR 0 4
53235: PUSH
53236: LD_VAR 0 2
53240: PUSH
53241: LD_INT 1
53243: ARRAY
53244: PPUSH
53245: LD_VAR 0 2
53249: PUSH
53250: LD_INT 2
53252: ARRAY
53253: PPUSH
53254: LD_VAR 0 2
53258: PUSH
53259: LD_INT 3
53261: ARRAY
53262: PPUSH
53263: LD_VAR 0 2
53267: PUSH
53268: LD_INT 4
53270: ARRAY
53271: PPUSH
53272: CALL_OW 449
53276: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53277: LD_ADDR_VAR 0 3
53281: PUSH
53282: LD_VAR 0 5
53286: PPUSH
53287: LD_INT 1
53289: PPUSH
53290: CALL_OW 275
53294: PUSH
53295: LD_VAR 0 4
53299: PUSH
53300: LD_INT 1
53302: ARRAY
53303: GREATEREQUAL
53304: IFFALSE 53330
53306: PUSH
53307: LD_VAR 0 5
53311: PPUSH
53312: LD_INT 2
53314: PPUSH
53315: CALL_OW 275
53319: PUSH
53320: LD_VAR 0 4
53324: PUSH
53325: LD_INT 2
53327: ARRAY
53328: GREATEREQUAL
53329: AND
53330: IFFALSE 53356
53332: PUSH
53333: LD_VAR 0 5
53337: PPUSH
53338: LD_INT 3
53340: PPUSH
53341: CALL_OW 275
53345: PUSH
53346: LD_VAR 0 4
53350: PUSH
53351: LD_INT 3
53353: ARRAY
53354: GREATEREQUAL
53355: AND
53356: ST_TO_ADDR
// end ;
53357: LD_VAR 0 3
53361: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
53362: LD_INT 0
53364: PPUSH
53365: PPUSH
53366: PPUSH
53367: PPUSH
// pom := GetBase ( building ) ;
53368: LD_ADDR_VAR 0 3
53372: PUSH
53373: LD_VAR 0 1
53377: PPUSH
53378: CALL_OW 274
53382: ST_TO_ADDR
// if not pom then
53383: LD_VAR 0 3
53387: NOT
53388: IFFALSE 53392
// exit ;
53390: GO 53566
// btype := GetBType ( building ) ;
53392: LD_ADDR_VAR 0 5
53396: PUSH
53397: LD_VAR 0 1
53401: PPUSH
53402: CALL_OW 266
53406: ST_TO_ADDR
// if btype = b_armoury then
53407: LD_VAR 0 5
53411: PUSH
53412: LD_INT 4
53414: EQUAL
53415: IFFALSE 53425
// btype := b_barracks ;
53417: LD_ADDR_VAR 0 5
53421: PUSH
53422: LD_INT 5
53424: ST_TO_ADDR
// if btype = b_depot then
53425: LD_VAR 0 5
53429: PUSH
53430: LD_INT 0
53432: EQUAL
53433: IFFALSE 53443
// btype := b_warehouse ;
53435: LD_ADDR_VAR 0 5
53439: PUSH
53440: LD_INT 1
53442: ST_TO_ADDR
// if btype = b_workshop then
53443: LD_VAR 0 5
53447: PUSH
53448: LD_INT 2
53450: EQUAL
53451: IFFALSE 53461
// btype := b_factory ;
53453: LD_ADDR_VAR 0 5
53457: PUSH
53458: LD_INT 3
53460: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53461: LD_ADDR_VAR 0 4
53465: PUSH
53466: LD_VAR 0 5
53470: PPUSH
53471: LD_VAR 0 1
53475: PPUSH
53476: CALL_OW 248
53480: PPUSH
53481: CALL_OW 450
53485: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53486: LD_ADDR_VAR 0 2
53490: PUSH
53491: LD_VAR 0 3
53495: PPUSH
53496: LD_INT 1
53498: PPUSH
53499: CALL_OW 275
53503: PUSH
53504: LD_VAR 0 4
53508: PUSH
53509: LD_INT 1
53511: ARRAY
53512: GREATEREQUAL
53513: IFFALSE 53539
53515: PUSH
53516: LD_VAR 0 3
53520: PPUSH
53521: LD_INT 2
53523: PPUSH
53524: CALL_OW 275
53528: PUSH
53529: LD_VAR 0 4
53533: PUSH
53534: LD_INT 2
53536: ARRAY
53537: GREATEREQUAL
53538: AND
53539: IFFALSE 53565
53541: PUSH
53542: LD_VAR 0 3
53546: PPUSH
53547: LD_INT 3
53549: PPUSH
53550: CALL_OW 275
53554: PUSH
53555: LD_VAR 0 4
53559: PUSH
53560: LD_INT 3
53562: ARRAY
53563: GREATEREQUAL
53564: AND
53565: ST_TO_ADDR
// end ;
53566: LD_VAR 0 2
53570: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
53571: LD_INT 0
53573: PPUSH
53574: PPUSH
53575: PPUSH
// pom := GetBase ( building ) ;
53576: LD_ADDR_VAR 0 4
53580: PUSH
53581: LD_VAR 0 1
53585: PPUSH
53586: CALL_OW 274
53590: ST_TO_ADDR
// if not pom then
53591: LD_VAR 0 4
53595: NOT
53596: IFFALSE 53600
// exit ;
53598: GO 53705
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53600: LD_ADDR_VAR 0 5
53604: PUSH
53605: LD_VAR 0 2
53609: PPUSH
53610: LD_VAR 0 1
53614: PPUSH
53615: CALL_OW 248
53619: PPUSH
53620: CALL_OW 450
53624: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53625: LD_ADDR_VAR 0 3
53629: PUSH
53630: LD_VAR 0 4
53634: PPUSH
53635: LD_INT 1
53637: PPUSH
53638: CALL_OW 275
53642: PUSH
53643: LD_VAR 0 5
53647: PUSH
53648: LD_INT 1
53650: ARRAY
53651: GREATEREQUAL
53652: IFFALSE 53678
53654: PUSH
53655: LD_VAR 0 4
53659: PPUSH
53660: LD_INT 2
53662: PPUSH
53663: CALL_OW 275
53667: PUSH
53668: LD_VAR 0 5
53672: PUSH
53673: LD_INT 2
53675: ARRAY
53676: GREATEREQUAL
53677: AND
53678: IFFALSE 53704
53680: PUSH
53681: LD_VAR 0 4
53685: PPUSH
53686: LD_INT 3
53688: PPUSH
53689: CALL_OW 275
53693: PUSH
53694: LD_VAR 0 5
53698: PUSH
53699: LD_INT 3
53701: ARRAY
53702: GREATEREQUAL
53703: AND
53704: ST_TO_ADDR
// end ;
53705: LD_VAR 0 3
53709: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
53710: LD_INT 0
53712: PPUSH
53713: PPUSH
53714: PPUSH
53715: PPUSH
53716: PPUSH
53717: PPUSH
53718: PPUSH
53719: PPUSH
53720: PPUSH
53721: PPUSH
53722: PPUSH
// result := false ;
53723: LD_ADDR_VAR 0 8
53727: PUSH
53728: LD_INT 0
53730: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
53731: LD_VAR 0 5
53735: NOT
53736: IFTRUE 53745
53738: PUSH
53739: LD_VAR 0 1
53743: NOT
53744: OR
53745: IFTRUE 53754
53747: PUSH
53748: LD_VAR 0 2
53752: NOT
53753: OR
53754: IFTRUE 53763
53756: PUSH
53757: LD_VAR 0 3
53761: NOT
53762: OR
53763: IFFALSE 53767
// exit ;
53765: GO 54593
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
53767: LD_ADDR_VAR 0 14
53771: PUSH
53772: LD_VAR 0 1
53776: PPUSH
53777: LD_VAR 0 2
53781: PPUSH
53782: LD_VAR 0 3
53786: PPUSH
53787: LD_VAR 0 4
53791: PPUSH
53792: LD_VAR 0 5
53796: PUSH
53797: LD_INT 1
53799: ARRAY
53800: PPUSH
53801: CALL_OW 248
53805: PPUSH
53806: LD_INT 0
53808: PPUSH
53809: CALL 55874 0 6
53813: ST_TO_ADDR
// if not hexes then
53814: LD_VAR 0 14
53818: NOT
53819: IFFALSE 53823
// exit ;
53821: GO 54593
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53823: LD_ADDR_VAR 0 17
53827: PUSH
53828: LD_VAR 0 5
53832: PPUSH
53833: LD_INT 22
53835: PUSH
53836: LD_VAR 0 13
53840: PPUSH
53841: CALL_OW 255
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 2
53852: PUSH
53853: LD_INT 30
53855: PUSH
53856: LD_INT 0
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: LD_INT 30
53865: PUSH
53866: LD_INT 1
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: LIST
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PPUSH
53882: CALL_OW 72
53886: ST_TO_ADDR
// for i = 1 to hexes do
53887: LD_ADDR_VAR 0 9
53891: PUSH
53892: DOUBLE
53893: LD_INT 1
53895: DEC
53896: ST_TO_ADDR
53897: LD_VAR 0 14
53901: PUSH
53902: FOR_TO
53903: IFFALSE 54591
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53905: LD_ADDR_VAR 0 13
53909: PUSH
53910: LD_VAR 0 14
53914: PUSH
53915: LD_VAR 0 9
53919: ARRAY
53920: PUSH
53921: LD_INT 1
53923: ARRAY
53924: PPUSH
53925: LD_VAR 0 14
53929: PUSH
53930: LD_VAR 0 9
53934: ARRAY
53935: PUSH
53936: LD_INT 2
53938: ARRAY
53939: PPUSH
53940: CALL_OW 428
53944: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
53945: LD_VAR 0 14
53949: PUSH
53950: LD_VAR 0 9
53954: ARRAY
53955: PUSH
53956: LD_INT 1
53958: ARRAY
53959: PPUSH
53960: LD_VAR 0 14
53964: PUSH
53965: LD_VAR 0 9
53969: ARRAY
53970: PUSH
53971: LD_INT 2
53973: ARRAY
53974: PPUSH
53975: CALL_OW 351
53979: IFTRUE 54018
53981: PUSH
53982: LD_VAR 0 14
53986: PUSH
53987: LD_VAR 0 9
53991: ARRAY
53992: PUSH
53993: LD_INT 1
53995: ARRAY
53996: PPUSH
53997: LD_VAR 0 14
54001: PUSH
54002: LD_VAR 0 9
54006: ARRAY
54007: PUSH
54008: LD_INT 2
54010: ARRAY
54011: PPUSH
54012: CALL_OW 488
54016: NOT
54017: OR
54018: IFTRUE 54035
54020: PUSH
54021: LD_VAR 0 13
54025: PPUSH
54026: CALL_OW 247
54030: PUSH
54031: LD_INT 3
54033: EQUAL
54034: OR
54035: IFFALSE 54041
// exit ;
54037: POP
54038: POP
54039: GO 54593
// if not tmp then
54041: LD_VAR 0 13
54045: NOT
54046: IFFALSE 54050
// continue ;
54048: GO 53902
// result := true ;
54050: LD_ADDR_VAR 0 8
54054: PUSH
54055: LD_INT 1
54057: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
54058: LD_VAR 0 6
54062: IFFALSE 54079
54064: PUSH
54065: LD_VAR 0 13
54069: PPUSH
54070: CALL_OW 247
54074: PUSH
54075: LD_INT 2
54077: EQUAL
54078: AND
54079: IFFALSE 54096
54081: PUSH
54082: LD_VAR 0 13
54086: PPUSH
54087: CALL_OW 263
54091: PUSH
54092: LD_INT 1
54094: EQUAL
54095: AND
54096: IFFALSE 54260
// begin if IsDrivenBy ( tmp ) then
54098: LD_VAR 0 13
54102: PPUSH
54103: CALL_OW 311
54107: IFFALSE 54111
// continue ;
54109: GO 53902
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
54111: LD_VAR 0 6
54115: PPUSH
54116: LD_INT 3
54118: PUSH
54119: LD_INT 60
54121: PUSH
54122: EMPTY
54123: LIST
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: LD_INT 3
54131: PUSH
54132: LD_INT 55
54134: PUSH
54135: EMPTY
54136: LIST
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: PPUSH
54146: CALL_OW 72
54150: IFFALSE 54258
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
54152: LD_ADDR_VAR 0 18
54156: PUSH
54157: LD_VAR 0 6
54161: PPUSH
54162: LD_INT 3
54164: PUSH
54165: LD_INT 60
54167: PUSH
54168: EMPTY
54169: LIST
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 3
54177: PUSH
54178: LD_INT 55
54180: PUSH
54181: EMPTY
54182: LIST
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PPUSH
54192: CALL_OW 72
54196: PUSH
54197: LD_INT 1
54199: ARRAY
54200: ST_TO_ADDR
// if IsInUnit ( driver ) then
54201: LD_VAR 0 18
54205: PPUSH
54206: CALL_OW 310
54210: IFFALSE 54221
// ComExit ( driver ) ;
54212: LD_VAR 0 18
54216: PPUSH
54217: CALL 79864 0 1
// AddComEnterUnit ( driver , tmp ) ;
54221: LD_VAR 0 18
54225: PPUSH
54226: LD_VAR 0 13
54230: PPUSH
54231: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
54235: LD_VAR 0 18
54239: PPUSH
54240: LD_VAR 0 7
54244: PPUSH
54245: CALL_OW 173
// AddComExitVehicle ( driver ) ;
54249: LD_VAR 0 18
54253: PPUSH
54254: CALL_OW 181
// end ; continue ;
54258: GO 53902
// end ; if not cleaners or not tmp in cleaners then
54260: LD_VAR 0 6
54264: NOT
54265: IFTRUE 54280
54267: PUSH
54268: LD_VAR 0 13
54272: PUSH
54273: LD_VAR 0 6
54277: IN
54278: NOT
54279: OR
54280: IFFALSE 54589
// begin if dep then
54282: LD_VAR 0 17
54286: IFFALSE 54422
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
54288: LD_ADDR_VAR 0 16
54292: PUSH
54293: LD_VAR 0 17
54297: PUSH
54298: LD_INT 1
54300: ARRAY
54301: PPUSH
54302: CALL_OW 250
54306: PPUSH
54307: LD_VAR 0 17
54311: PUSH
54312: LD_INT 1
54314: ARRAY
54315: PPUSH
54316: CALL_OW 254
54320: PPUSH
54321: LD_INT 5
54323: PPUSH
54324: CALL_OW 272
54328: PUSH
54329: LD_VAR 0 17
54333: PUSH
54334: LD_INT 1
54336: ARRAY
54337: PPUSH
54338: CALL_OW 251
54342: PPUSH
54343: LD_VAR 0 17
54347: PUSH
54348: LD_INT 1
54350: ARRAY
54351: PPUSH
54352: CALL_OW 254
54356: PPUSH
54357: LD_INT 5
54359: PPUSH
54360: CALL_OW 273
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
54369: LD_VAR 0 16
54373: PUSH
54374: LD_INT 1
54376: ARRAY
54377: PPUSH
54378: LD_VAR 0 16
54382: PUSH
54383: LD_INT 2
54385: ARRAY
54386: PPUSH
54387: CALL_OW 488
54391: IFFALSE 54422
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
54393: LD_VAR 0 13
54397: PPUSH
54398: LD_VAR 0 16
54402: PUSH
54403: LD_INT 1
54405: ARRAY
54406: PPUSH
54407: LD_VAR 0 16
54411: PUSH
54412: LD_INT 2
54414: ARRAY
54415: PPUSH
54416: CALL_OW 111
// continue ;
54420: GO 53902
// end ; end ; r := GetDir ( tmp ) ;
54422: LD_ADDR_VAR 0 15
54426: PUSH
54427: LD_VAR 0 13
54431: PPUSH
54432: CALL_OW 254
54436: ST_TO_ADDR
// if r = 5 then
54437: LD_VAR 0 15
54441: PUSH
54442: LD_INT 5
54444: EQUAL
54445: IFFALSE 54455
// r := 0 ;
54447: LD_ADDR_VAR 0 15
54451: PUSH
54452: LD_INT 0
54454: ST_TO_ADDR
// for j = r to 5 do
54455: LD_ADDR_VAR 0 10
54459: PUSH
54460: DOUBLE
54461: LD_VAR 0 15
54465: DEC
54466: ST_TO_ADDR
54467: LD_INT 5
54469: PUSH
54470: FOR_TO
54471: IFFALSE 54587
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
54473: LD_ADDR_VAR 0 11
54477: PUSH
54478: LD_VAR 0 13
54482: PPUSH
54483: CALL_OW 250
54487: PPUSH
54488: LD_VAR 0 10
54492: PPUSH
54493: LD_INT 2
54495: PPUSH
54496: CALL_OW 272
54500: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
54501: LD_ADDR_VAR 0 12
54505: PUSH
54506: LD_VAR 0 13
54510: PPUSH
54511: CALL_OW 251
54515: PPUSH
54516: LD_VAR 0 10
54520: PPUSH
54521: LD_INT 2
54523: PPUSH
54524: CALL_OW 273
54528: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
54529: LD_VAR 0 11
54533: PPUSH
54534: LD_VAR 0 12
54538: PPUSH
54539: CALL_OW 488
54543: IFFALSE 54562
54545: PUSH
54546: LD_VAR 0 11
54550: PPUSH
54551: LD_VAR 0 12
54555: PPUSH
54556: CALL_OW 428
54560: NOT
54561: AND
54562: IFFALSE 54585
// begin ComMoveXY ( tmp , _x , _y ) ;
54564: LD_VAR 0 13
54568: PPUSH
54569: LD_VAR 0 11
54573: PPUSH
54574: LD_VAR 0 12
54578: PPUSH
54579: CALL_OW 111
// break ;
54583: GO 54587
// end ; end ;
54585: GO 54470
54587: POP
54588: POP
// end ; end ;
54589: GO 53902
54591: POP
54592: POP
// end ;
54593: LD_VAR 0 8
54597: RET
// export function BuildingTechInvented ( side , btype ) ; begin
54598: LD_INT 0
54600: PPUSH
// result := true ;
54601: LD_ADDR_VAR 0 3
54605: PUSH
54606: LD_INT 1
54608: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
54609: LD_VAR 0 2
54613: PUSH
54614: LD_INT 24
54616: DOUBLE
54617: EQUAL
54618: IFTRUE 54628
54620: LD_INT 33
54622: DOUBLE
54623: EQUAL
54624: IFTRUE 54628
54626: GO 54653
54628: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
54629: LD_ADDR_VAR 0 3
54633: PUSH
54634: LD_INT 32
54636: PPUSH
54637: LD_VAR 0 1
54641: PPUSH
54642: CALL_OW 321
54646: PUSH
54647: LD_INT 2
54649: EQUAL
54650: ST_TO_ADDR
54651: GO 54969
54653: LD_INT 20
54655: DOUBLE
54656: EQUAL
54657: IFTRUE 54661
54659: GO 54686
54661: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
54662: LD_ADDR_VAR 0 3
54666: PUSH
54667: LD_INT 6
54669: PPUSH
54670: LD_VAR 0 1
54674: PPUSH
54675: CALL_OW 321
54679: PUSH
54680: LD_INT 2
54682: EQUAL
54683: ST_TO_ADDR
54684: GO 54969
54686: LD_INT 22
54688: DOUBLE
54689: EQUAL
54690: IFTRUE 54700
54692: LD_INT 36
54694: DOUBLE
54695: EQUAL
54696: IFTRUE 54700
54698: GO 54725
54700: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
54701: LD_ADDR_VAR 0 3
54705: PUSH
54706: LD_INT 15
54708: PPUSH
54709: LD_VAR 0 1
54713: PPUSH
54714: CALL_OW 321
54718: PUSH
54719: LD_INT 2
54721: EQUAL
54722: ST_TO_ADDR
54723: GO 54969
54725: LD_INT 30
54727: DOUBLE
54728: EQUAL
54729: IFTRUE 54733
54731: GO 54758
54733: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
54734: LD_ADDR_VAR 0 3
54738: PUSH
54739: LD_INT 20
54741: PPUSH
54742: LD_VAR 0 1
54746: PPUSH
54747: CALL_OW 321
54751: PUSH
54752: LD_INT 2
54754: EQUAL
54755: ST_TO_ADDR
54756: GO 54969
54758: LD_INT 28
54760: DOUBLE
54761: EQUAL
54762: IFTRUE 54772
54764: LD_INT 21
54766: DOUBLE
54767: EQUAL
54768: IFTRUE 54772
54770: GO 54797
54772: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
54773: LD_ADDR_VAR 0 3
54777: PUSH
54778: LD_INT 21
54780: PPUSH
54781: LD_VAR 0 1
54785: PPUSH
54786: CALL_OW 321
54790: PUSH
54791: LD_INT 2
54793: EQUAL
54794: ST_TO_ADDR
54795: GO 54969
54797: LD_INT 16
54799: DOUBLE
54800: EQUAL
54801: IFTRUE 54805
54803: GO 54830
54805: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
54806: LD_ADDR_VAR 0 3
54810: PUSH
54811: LD_INT 84
54813: PPUSH
54814: LD_VAR 0 1
54818: PPUSH
54819: CALL_OW 321
54823: PUSH
54824: LD_INT 2
54826: EQUAL
54827: ST_TO_ADDR
54828: GO 54969
54830: LD_INT 19
54832: DOUBLE
54833: EQUAL
54834: IFTRUE 54844
54836: LD_INT 23
54838: DOUBLE
54839: EQUAL
54840: IFTRUE 54844
54842: GO 54869
54844: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
54845: LD_ADDR_VAR 0 3
54849: PUSH
54850: LD_INT 83
54852: PPUSH
54853: LD_VAR 0 1
54857: PPUSH
54858: CALL_OW 321
54862: PUSH
54863: LD_INT 2
54865: EQUAL
54866: ST_TO_ADDR
54867: GO 54969
54869: LD_INT 17
54871: DOUBLE
54872: EQUAL
54873: IFTRUE 54877
54875: GO 54902
54877: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
54878: LD_ADDR_VAR 0 3
54882: PUSH
54883: LD_INT 39
54885: PPUSH
54886: LD_VAR 0 1
54890: PPUSH
54891: CALL_OW 321
54895: PUSH
54896: LD_INT 2
54898: EQUAL
54899: ST_TO_ADDR
54900: GO 54969
54902: LD_INT 18
54904: DOUBLE
54905: EQUAL
54906: IFTRUE 54910
54908: GO 54935
54910: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
54911: LD_ADDR_VAR 0 3
54915: PUSH
54916: LD_INT 40
54918: PPUSH
54919: LD_VAR 0 1
54923: PPUSH
54924: CALL_OW 321
54928: PUSH
54929: LD_INT 2
54931: EQUAL
54932: ST_TO_ADDR
54933: GO 54969
54935: LD_INT 27
54937: DOUBLE
54938: EQUAL
54939: IFTRUE 54943
54941: GO 54968
54943: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
54944: LD_ADDR_VAR 0 3
54948: PUSH
54949: LD_INT 35
54951: PPUSH
54952: LD_VAR 0 1
54956: PPUSH
54957: CALL_OW 321
54961: PUSH
54962: LD_INT 2
54964: EQUAL
54965: ST_TO_ADDR
54966: GO 54969
54968: POP
// end ;
54969: LD_VAR 0 3
54973: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
54974: LD_INT 0
54976: PPUSH
54977: PPUSH
54978: PPUSH
54979: PPUSH
54980: PPUSH
54981: PPUSH
54982: PPUSH
54983: PPUSH
54984: PPUSH
54985: PPUSH
54986: PPUSH
// result := false ;
54987: LD_ADDR_VAR 0 6
54991: PUSH
54992: LD_INT 0
54994: ST_TO_ADDR
// if btype = b_depot then
54995: LD_VAR 0 2
54999: PUSH
55000: LD_INT 0
55002: EQUAL
55003: IFFALSE 55015
// begin result := true ;
55005: LD_ADDR_VAR 0 6
55009: PUSH
55010: LD_INT 1
55012: ST_TO_ADDR
// exit ;
55013: GO 55869
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
55015: LD_VAR 0 1
55019: NOT
55020: IFTRUE 55045
55022: PUSH
55023: LD_VAR 0 1
55027: PPUSH
55028: CALL_OW 266
55032: PUSH
55033: LD_INT 0
55035: PUSH
55036: LD_INT 1
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: IN
55043: NOT
55044: OR
55045: IFTRUE 55054
55047: PUSH
55048: LD_VAR 0 2
55052: NOT
55053: OR
55054: IFTRUE 55090
55056: PUSH
55057: LD_VAR 0 5
55061: PUSH
55062: LD_INT 0
55064: PUSH
55065: LD_INT 1
55067: PUSH
55068: LD_INT 2
55070: PUSH
55071: LD_INT 3
55073: PUSH
55074: LD_INT 4
55076: PUSH
55077: LD_INT 5
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: LIST
55084: LIST
55085: LIST
55086: LIST
55087: IN
55088: NOT
55089: OR
55090: IFTRUE 55109
55092: PUSH
55093: LD_VAR 0 3
55097: PPUSH
55098: LD_VAR 0 4
55102: PPUSH
55103: CALL_OW 488
55107: NOT
55108: OR
55109: IFFALSE 55113
// exit ;
55111: GO 55869
// side := GetSide ( depot ) ;
55113: LD_ADDR_VAR 0 9
55117: PUSH
55118: LD_VAR 0 1
55122: PPUSH
55123: CALL_OW 255
55127: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
55128: LD_VAR 0 9
55132: PPUSH
55133: LD_VAR 0 2
55137: PPUSH
55138: CALL 54598 0 2
55142: NOT
55143: IFFALSE 55147
// exit ;
55145: GO 55869
// pom := GetBase ( depot ) ;
55147: LD_ADDR_VAR 0 10
55151: PUSH
55152: LD_VAR 0 1
55156: PPUSH
55157: CALL_OW 274
55161: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
55162: LD_ADDR_VAR 0 11
55166: PUSH
55167: LD_VAR 0 2
55171: PPUSH
55172: LD_VAR 0 1
55176: PPUSH
55177: CALL_OW 248
55181: PPUSH
55182: CALL_OW 450
55186: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
55187: LD_VAR 0 10
55191: PPUSH
55192: LD_INT 1
55194: PPUSH
55195: CALL_OW 275
55199: PUSH
55200: LD_VAR 0 11
55204: PUSH
55205: LD_INT 1
55207: ARRAY
55208: GREATEREQUAL
55209: IFFALSE 55235
55211: PUSH
55212: LD_VAR 0 10
55216: PPUSH
55217: LD_INT 2
55219: PPUSH
55220: CALL_OW 275
55224: PUSH
55225: LD_VAR 0 11
55229: PUSH
55230: LD_INT 2
55232: ARRAY
55233: GREATEREQUAL
55234: AND
55235: IFFALSE 55261
55237: PUSH
55238: LD_VAR 0 10
55242: PPUSH
55243: LD_INT 3
55245: PPUSH
55246: CALL_OW 275
55250: PUSH
55251: LD_VAR 0 11
55255: PUSH
55256: LD_INT 3
55258: ARRAY
55259: GREATEREQUAL
55260: AND
55261: NOT
55262: IFFALSE 55266
// exit ;
55264: GO 55869
// if GetBType ( depot ) = b_depot then
55266: LD_VAR 0 1
55270: PPUSH
55271: CALL_OW 266
55275: PUSH
55276: LD_INT 0
55278: EQUAL
55279: IFFALSE 55291
// dist := 28 else
55281: LD_ADDR_VAR 0 14
55285: PUSH
55286: LD_INT 28
55288: ST_TO_ADDR
55289: GO 55299
// dist := 36 ;
55291: LD_ADDR_VAR 0 14
55295: PUSH
55296: LD_INT 36
55298: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
55299: LD_VAR 0 1
55303: PPUSH
55304: LD_VAR 0 3
55308: PPUSH
55309: LD_VAR 0 4
55313: PPUSH
55314: CALL_OW 297
55318: PUSH
55319: LD_VAR 0 14
55323: GREATER
55324: IFFALSE 55328
// exit ;
55326: GO 55869
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
55328: LD_ADDR_VAR 0 12
55332: PUSH
55333: LD_VAR 0 2
55337: PPUSH
55338: LD_VAR 0 3
55342: PPUSH
55343: LD_VAR 0 4
55347: PPUSH
55348: LD_VAR 0 5
55352: PPUSH
55353: LD_VAR 0 1
55357: PPUSH
55358: CALL_OW 248
55362: PPUSH
55363: LD_INT 0
55365: PPUSH
55366: CALL 55874 0 6
55370: ST_TO_ADDR
// if not hexes then
55371: LD_VAR 0 12
55375: NOT
55376: IFFALSE 55380
// exit ;
55378: GO 55869
// hex := GetHexInfo ( x , y ) ;
55380: LD_ADDR_VAR 0 15
55384: PUSH
55385: LD_VAR 0 3
55389: PPUSH
55390: LD_VAR 0 4
55394: PPUSH
55395: CALL_OW 546
55399: ST_TO_ADDR
// if hex [ 1 ] then
55400: LD_VAR 0 15
55404: PUSH
55405: LD_INT 1
55407: ARRAY
55408: IFFALSE 55412
// exit ;
55410: GO 55869
// height := hex [ 2 ] ;
55412: LD_ADDR_VAR 0 13
55416: PUSH
55417: LD_VAR 0 15
55421: PUSH
55422: LD_INT 2
55424: ARRAY
55425: ST_TO_ADDR
// for i = 1 to hexes do
55426: LD_ADDR_VAR 0 7
55430: PUSH
55431: DOUBLE
55432: LD_INT 1
55434: DEC
55435: ST_TO_ADDR
55436: LD_VAR 0 12
55440: PUSH
55441: FOR_TO
55442: IFFALSE 55786
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
55444: LD_VAR 0 12
55448: PUSH
55449: LD_VAR 0 7
55453: ARRAY
55454: PUSH
55455: LD_INT 1
55457: ARRAY
55458: PPUSH
55459: LD_VAR 0 12
55463: PUSH
55464: LD_VAR 0 7
55468: ARRAY
55469: PUSH
55470: LD_INT 2
55472: ARRAY
55473: PPUSH
55474: CALL_OW 488
55478: NOT
55479: IFTRUE 55521
55481: PUSH
55482: LD_VAR 0 12
55486: PUSH
55487: LD_VAR 0 7
55491: ARRAY
55492: PUSH
55493: LD_INT 1
55495: ARRAY
55496: PPUSH
55497: LD_VAR 0 12
55501: PUSH
55502: LD_VAR 0 7
55506: ARRAY
55507: PUSH
55508: LD_INT 2
55510: ARRAY
55511: PPUSH
55512: CALL_OW 428
55516: PUSH
55517: LD_INT 0
55519: GREATER
55520: OR
55521: IFTRUE 55559
55523: PUSH
55524: LD_VAR 0 12
55528: PUSH
55529: LD_VAR 0 7
55533: ARRAY
55534: PUSH
55535: LD_INT 1
55537: ARRAY
55538: PPUSH
55539: LD_VAR 0 12
55543: PUSH
55544: LD_VAR 0 7
55548: ARRAY
55549: PUSH
55550: LD_INT 2
55552: ARRAY
55553: PPUSH
55554: CALL_OW 351
55558: OR
55559: IFFALSE 55565
// exit ;
55561: POP
55562: POP
55563: GO 55869
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55565: LD_ADDR_VAR 0 8
55569: PUSH
55570: LD_VAR 0 12
55574: PUSH
55575: LD_VAR 0 7
55579: ARRAY
55580: PUSH
55581: LD_INT 1
55583: ARRAY
55584: PPUSH
55585: LD_VAR 0 12
55589: PUSH
55590: LD_VAR 0 7
55594: ARRAY
55595: PUSH
55596: LD_INT 2
55598: ARRAY
55599: PPUSH
55600: CALL_OW 546
55604: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
55605: LD_VAR 0 8
55609: PUSH
55610: LD_INT 1
55612: ARRAY
55613: IFTRUE 55635
55615: PUSH
55616: LD_VAR 0 8
55620: PUSH
55621: LD_INT 2
55623: ARRAY
55624: PUSH
55625: LD_VAR 0 13
55629: PUSH
55630: LD_INT 2
55632: PLUS
55633: GREATER
55634: OR
55635: IFTRUE 55657
55637: PUSH
55638: LD_VAR 0 8
55642: PUSH
55643: LD_INT 2
55645: ARRAY
55646: PUSH
55647: LD_VAR 0 13
55651: PUSH
55652: LD_INT 2
55654: MINUS
55655: LESS
55656: OR
55657: IFTRUE 55725
55659: PUSH
55660: LD_VAR 0 8
55664: PUSH
55665: LD_INT 3
55667: ARRAY
55668: PUSH
55669: LD_INT 0
55671: PUSH
55672: LD_INT 8
55674: PUSH
55675: LD_INT 9
55677: PUSH
55678: LD_INT 10
55680: PUSH
55681: LD_INT 11
55683: PUSH
55684: LD_INT 12
55686: PUSH
55687: LD_INT 13
55689: PUSH
55690: LD_INT 16
55692: PUSH
55693: LD_INT 17
55695: PUSH
55696: LD_INT 18
55698: PUSH
55699: LD_INT 19
55701: PUSH
55702: LD_INT 20
55704: PUSH
55705: LD_INT 21
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: LIST
55722: IN
55723: NOT
55724: OR
55725: IFTRUE 55738
55727: PUSH
55728: LD_VAR 0 8
55732: PUSH
55733: LD_INT 5
55735: ARRAY
55736: NOT
55737: OR
55738: IFTRUE 55778
55740: PUSH
55741: LD_VAR 0 8
55745: PUSH
55746: LD_INT 6
55748: ARRAY
55749: PUSH
55750: LD_INT 1
55752: PUSH
55753: LD_INT 2
55755: PUSH
55756: LD_INT 7
55758: PUSH
55759: LD_INT 9
55761: PUSH
55762: LD_INT 10
55764: PUSH
55765: LD_INT 11
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: IN
55776: NOT
55777: OR
55778: IFFALSE 55784
// exit ;
55780: POP
55781: POP
55782: GO 55869
// end ;
55784: GO 55441
55786: POP
55787: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
55788: LD_VAR 0 9
55792: PPUSH
55793: LD_VAR 0 3
55797: PPUSH
55798: LD_VAR 0 4
55802: PPUSH
55803: LD_INT 20
55805: PPUSH
55806: CALL 47688 0 4
55810: PUSH
55811: LD_INT 4
55813: ARRAY
55814: IFFALSE 55818
// exit ;
55816: GO 55869
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
55818: LD_VAR 0 2
55822: PUSH
55823: LD_INT 29
55825: PUSH
55826: LD_INT 30
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: IN
55833: IFFALSE 55857
55835: PUSH
55836: LD_VAR 0 3
55840: PPUSH
55841: LD_VAR 0 4
55845: PPUSH
55846: LD_VAR 0 9
55850: PPUSH
55851: CALL_OW 440
55855: NOT
55856: AND
55857: IFFALSE 55861
// exit ;
55859: GO 55869
// result := true ;
55861: LD_ADDR_VAR 0 6
55865: PUSH
55866: LD_INT 1
55868: ST_TO_ADDR
// end ;
55869: LD_VAR 0 6
55873: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
55874: LD_INT 0
55876: PPUSH
55877: PPUSH
55878: PPUSH
55879: PPUSH
55880: PPUSH
55881: PPUSH
55882: PPUSH
55883: PPUSH
55884: PPUSH
55885: PPUSH
55886: PPUSH
55887: PPUSH
55888: PPUSH
55889: PPUSH
55890: PPUSH
55891: PPUSH
55892: PPUSH
55893: PPUSH
55894: PPUSH
55895: PPUSH
55896: PPUSH
55897: PPUSH
55898: PPUSH
55899: PPUSH
55900: PPUSH
55901: PPUSH
55902: PPUSH
55903: PPUSH
55904: PPUSH
55905: PPUSH
55906: PPUSH
55907: PPUSH
55908: PPUSH
55909: PPUSH
55910: PPUSH
55911: PPUSH
55912: PPUSH
55913: PPUSH
55914: PPUSH
55915: PPUSH
55916: PPUSH
55917: PPUSH
55918: PPUSH
55919: PPUSH
55920: PPUSH
55921: PPUSH
55922: PPUSH
55923: PPUSH
55924: PPUSH
55925: PPUSH
55926: PPUSH
55927: PPUSH
55928: PPUSH
55929: PPUSH
55930: PPUSH
55931: PPUSH
55932: PPUSH
55933: PPUSH
// result = [ ] ;
55934: LD_ADDR_VAR 0 7
55938: PUSH
55939: EMPTY
55940: ST_TO_ADDR
// temp_list = [ ] ;
55941: LD_ADDR_VAR 0 9
55945: PUSH
55946: EMPTY
55947: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
55948: LD_VAR 0 4
55952: PUSH
55953: LD_INT 0
55955: PUSH
55956: LD_INT 1
55958: PUSH
55959: LD_INT 2
55961: PUSH
55962: LD_INT 3
55964: PUSH
55965: LD_INT 4
55967: PUSH
55968: LD_INT 5
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: IN
55979: NOT
55980: IFTRUE 56023
55982: PUSH
55983: LD_VAR 0 1
55987: PUSH
55988: LD_INT 0
55990: PUSH
55991: LD_INT 1
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: IN
55998: IFFALSE 56022
56000: PUSH
56001: LD_VAR 0 5
56005: PUSH
56006: LD_INT 1
56008: PUSH
56009: LD_INT 2
56011: PUSH
56012: LD_INT 3
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: LIST
56019: IN
56020: NOT
56021: AND
56022: OR
56023: IFFALSE 56027
// exit ;
56025: GO 74426
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
56027: LD_VAR 0 1
56031: PUSH
56032: LD_INT 6
56034: PUSH
56035: LD_INT 7
56037: PUSH
56038: LD_INT 8
56040: PUSH
56041: LD_INT 13
56043: PUSH
56044: LD_INT 12
56046: PUSH
56047: LD_INT 15
56049: PUSH
56050: LD_INT 11
56052: PUSH
56053: LD_INT 14
56055: PUSH
56056: LD_INT 10
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: IN
56070: IFFALSE 56080
// btype = b_lab ;
56072: LD_ADDR_VAR 0 1
56076: PUSH
56077: LD_INT 6
56079: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
56080: LD_VAR 0 6
56084: PUSH
56085: LD_INT 0
56087: PUSH
56088: LD_INT 1
56090: PUSH
56091: LD_INT 2
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: LIST
56098: IN
56099: NOT
56100: IFTRUE 56168
56102: PUSH
56103: LD_VAR 0 1
56107: PUSH
56108: LD_INT 0
56110: PUSH
56111: LD_INT 1
56113: PUSH
56114: LD_INT 2
56116: PUSH
56117: LD_INT 3
56119: PUSH
56120: LD_INT 6
56122: PUSH
56123: LD_INT 36
56125: PUSH
56126: LD_INT 4
56128: PUSH
56129: LD_INT 5
56131: PUSH
56132: LD_INT 31
56134: PUSH
56135: LD_INT 32
56137: PUSH
56138: LD_INT 33
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: LIST
56145: LIST
56146: LIST
56147: LIST
56148: LIST
56149: LIST
56150: LIST
56151: LIST
56152: LIST
56153: IN
56154: NOT
56155: IFFALSE 56167
56157: PUSH
56158: LD_VAR 0 6
56162: PUSH
56163: LD_INT 1
56165: EQUAL
56166: AND
56167: OR
56168: IFTRUE 56200
56170: PUSH
56171: LD_VAR 0 1
56175: PUSH
56176: LD_INT 2
56178: PUSH
56179: LD_INT 3
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: IN
56186: NOT
56187: IFFALSE 56199
56189: PUSH
56190: LD_VAR 0 6
56194: PUSH
56195: LD_INT 2
56197: EQUAL
56198: AND
56199: OR
56200: IFFALSE 56210
// mode = 0 ;
56202: LD_ADDR_VAR 0 6
56206: PUSH
56207: LD_INT 0
56209: ST_TO_ADDR
// case mode of 0 :
56210: LD_VAR 0 6
56214: PUSH
56215: LD_INT 0
56217: DOUBLE
56218: EQUAL
56219: IFTRUE 56223
56221: GO 67676
56223: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56224: LD_ADDR_VAR 0 11
56228: PUSH
56229: LD_INT 0
56231: PUSH
56232: LD_INT 0
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 0
56241: PUSH
56242: LD_INT 1
56244: NEG
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: PUSH
56250: LD_INT 1
56252: PUSH
56253: LD_INT 0
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: PUSH
56260: LD_INT 1
56262: PUSH
56263: LD_INT 1
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PUSH
56270: LD_INT 0
56272: PUSH
56273: LD_INT 1
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 1
56282: NEG
56283: PUSH
56284: LD_INT 0
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: LD_INT 1
56293: NEG
56294: PUSH
56295: LD_INT 1
56297: NEG
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 1
56305: NEG
56306: PUSH
56307: LD_INT 2
56309: NEG
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 0
56317: PUSH
56318: LD_INT 2
56320: NEG
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: LD_INT 1
56328: PUSH
56329: LD_INT 1
56331: NEG
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 1
56339: PUSH
56340: LD_INT 2
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: LD_INT 0
56349: PUSH
56350: LD_INT 2
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: LD_INT 1
56359: NEG
56360: PUSH
56361: LD_INT 1
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: PUSH
56368: LD_INT 1
56370: PUSH
56371: LD_INT 3
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: LD_INT 0
56380: PUSH
56381: LD_INT 3
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: LD_INT 1
56390: NEG
56391: PUSH
56392: LD_INT 2
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56417: LD_ADDR_VAR 0 12
56421: PUSH
56422: LD_INT 0
56424: PUSH
56425: LD_INT 0
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 0
56434: PUSH
56435: LD_INT 1
56437: NEG
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 1
56445: PUSH
56446: LD_INT 0
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: LD_INT 1
56455: PUSH
56456: LD_INT 1
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 0
56465: PUSH
56466: LD_INT 1
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 1
56475: NEG
56476: PUSH
56477: LD_INT 0
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 1
56486: NEG
56487: PUSH
56488: LD_INT 1
56490: NEG
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 1
56498: PUSH
56499: LD_INT 1
56501: NEG
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 2
56509: PUSH
56510: LD_INT 0
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 2
56519: PUSH
56520: LD_INT 1
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 1
56529: NEG
56530: PUSH
56531: LD_INT 1
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 2
56540: NEG
56541: PUSH
56542: LD_INT 0
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 2
56551: NEG
56552: PUSH
56553: LD_INT 1
56555: NEG
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: LD_INT 2
56563: NEG
56564: PUSH
56565: LD_INT 1
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 3
56574: NEG
56575: PUSH
56576: LD_INT 0
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 3
56585: NEG
56586: PUSH
56587: LD_INT 1
56589: NEG
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: LIST
56599: LIST
56600: LIST
56601: LIST
56602: LIST
56603: LIST
56604: LIST
56605: LIST
56606: LIST
56607: LIST
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56613: LD_ADDR_VAR 0 13
56617: PUSH
56618: LD_INT 0
56620: PUSH
56621: LD_INT 0
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 0
56630: PUSH
56631: LD_INT 1
56633: NEG
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 1
56641: PUSH
56642: LD_INT 0
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 1
56651: PUSH
56652: LD_INT 1
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: LD_INT 0
56661: PUSH
56662: LD_INT 1
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: LD_INT 1
56671: NEG
56672: PUSH
56673: LD_INT 0
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 1
56682: NEG
56683: PUSH
56684: LD_INT 1
56686: NEG
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: LD_INT 1
56694: NEG
56695: PUSH
56696: LD_INT 2
56698: NEG
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 2
56706: PUSH
56707: LD_INT 1
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 2
56716: PUSH
56717: LD_INT 2
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 1
56726: PUSH
56727: LD_INT 2
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 2
56736: NEG
56737: PUSH
56738: LD_INT 1
56740: NEG
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: LD_INT 2
56748: NEG
56749: PUSH
56750: LD_INT 2
56752: NEG
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 2
56760: NEG
56761: PUSH
56762: LD_INT 3
56764: NEG
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 3
56772: NEG
56773: PUSH
56774: LD_INT 2
56776: NEG
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 3
56784: NEG
56785: PUSH
56786: LD_INT 3
56788: NEG
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56812: LD_ADDR_VAR 0 14
56816: PUSH
56817: LD_INT 0
56819: PUSH
56820: LD_INT 0
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 0
56829: PUSH
56830: LD_INT 1
56832: NEG
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 1
56840: PUSH
56841: LD_INT 0
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 1
56850: PUSH
56851: LD_INT 1
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 0
56860: PUSH
56861: LD_INT 1
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 1
56870: NEG
56871: PUSH
56872: LD_INT 0
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: LD_INT 1
56881: NEG
56882: PUSH
56883: LD_INT 1
56885: NEG
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 1
56893: NEG
56894: PUSH
56895: LD_INT 2
56897: NEG
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 0
56905: PUSH
56906: LD_INT 2
56908: NEG
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: LD_INT 1
56916: PUSH
56917: LD_INT 1
56919: NEG
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: LD_INT 1
56927: PUSH
56928: LD_INT 2
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: PUSH
56935: LD_INT 0
56937: PUSH
56938: LD_INT 2
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: LD_INT 1
56947: NEG
56948: PUSH
56949: LD_INT 1
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: PUSH
56956: LD_INT 1
56958: NEG
56959: PUSH
56960: LD_INT 3
56962: NEG
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: LD_INT 0
56970: PUSH
56971: LD_INT 3
56973: NEG
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: PUSH
56979: LD_INT 1
56981: PUSH
56982: LD_INT 2
56984: NEG
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: LIST
57007: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57008: LD_ADDR_VAR 0 15
57012: PUSH
57013: LD_INT 0
57015: PUSH
57016: LD_INT 0
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 0
57025: PUSH
57026: LD_INT 1
57028: NEG
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 1
57036: PUSH
57037: LD_INT 0
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 1
57046: PUSH
57047: LD_INT 1
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 0
57056: PUSH
57057: LD_INT 1
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 1
57066: NEG
57067: PUSH
57068: LD_INT 0
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: LD_INT 1
57077: NEG
57078: PUSH
57079: LD_INT 1
57081: NEG
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 1
57089: PUSH
57090: LD_INT 1
57092: NEG
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: LD_INT 2
57100: PUSH
57101: LD_INT 0
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 2
57110: PUSH
57111: LD_INT 1
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 1
57120: NEG
57121: PUSH
57122: LD_INT 1
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 2
57131: NEG
57132: PUSH
57133: LD_INT 0
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 2
57142: NEG
57143: PUSH
57144: LD_INT 1
57146: NEG
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 2
57154: PUSH
57155: LD_INT 1
57157: NEG
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: LD_INT 3
57165: PUSH
57166: LD_INT 0
57168: PUSH
57169: EMPTY
57170: LIST
57171: LIST
57172: PUSH
57173: LD_INT 3
57175: PUSH
57176: LD_INT 1
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: LIST
57187: LIST
57188: LIST
57189: LIST
57190: LIST
57191: LIST
57192: LIST
57193: LIST
57194: LIST
57195: LIST
57196: LIST
57197: LIST
57198: LIST
57199: LIST
57200: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57201: LD_ADDR_VAR 0 16
57205: PUSH
57206: LD_INT 0
57208: PUSH
57209: LD_INT 0
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: LD_INT 0
57218: PUSH
57219: LD_INT 1
57221: NEG
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: PUSH
57227: LD_INT 1
57229: PUSH
57230: LD_INT 0
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: LD_INT 1
57239: PUSH
57240: LD_INT 1
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: PUSH
57247: LD_INT 0
57249: PUSH
57250: LD_INT 1
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: PUSH
57257: LD_INT 1
57259: NEG
57260: PUSH
57261: LD_INT 0
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 1
57270: NEG
57271: PUSH
57272: LD_INT 1
57274: NEG
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: LD_INT 1
57282: NEG
57283: PUSH
57284: LD_INT 2
57286: NEG
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 2
57294: PUSH
57295: LD_INT 1
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: LD_INT 2
57304: PUSH
57305: LD_INT 2
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: LD_INT 1
57314: PUSH
57315: LD_INT 2
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 2
57324: NEG
57325: PUSH
57326: LD_INT 1
57328: NEG
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 2
57336: NEG
57337: PUSH
57338: LD_INT 2
57340: NEG
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: LD_INT 3
57348: PUSH
57349: LD_INT 2
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PUSH
57356: LD_INT 3
57358: PUSH
57359: LD_INT 3
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 2
57368: PUSH
57369: LD_INT 3
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: LIST
57380: LIST
57381: LIST
57382: LIST
57383: LIST
57384: LIST
57385: LIST
57386: LIST
57387: LIST
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: LIST
57393: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57394: LD_ADDR_VAR 0 17
57398: PUSH
57399: LD_INT 0
57401: PUSH
57402: LD_INT 0
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 0
57411: PUSH
57412: LD_INT 1
57414: NEG
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: PUSH
57420: LD_INT 1
57422: PUSH
57423: LD_INT 0
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 1
57432: PUSH
57433: LD_INT 1
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 0
57442: PUSH
57443: LD_INT 1
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PUSH
57450: LD_INT 1
57452: NEG
57453: PUSH
57454: LD_INT 0
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PUSH
57461: LD_INT 1
57463: NEG
57464: PUSH
57465: LD_INT 1
57467: NEG
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 1
57475: NEG
57476: PUSH
57477: LD_INT 2
57479: NEG
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 0
57487: PUSH
57488: LD_INT 2
57490: NEG
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 1
57498: PUSH
57499: LD_INT 1
57501: NEG
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: LD_INT 2
57509: PUSH
57510: LD_INT 0
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 2
57519: PUSH
57520: LD_INT 1
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: LD_INT 2
57529: PUSH
57530: LD_INT 2
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 1
57539: PUSH
57540: LD_INT 2
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 0
57549: PUSH
57550: LD_INT 2
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: LD_INT 1
57559: NEG
57560: PUSH
57561: LD_INT 1
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: LD_INT 2
57570: NEG
57571: PUSH
57572: LD_INT 0
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: LD_INT 2
57581: NEG
57582: PUSH
57583: LD_INT 1
57585: NEG
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: PUSH
57591: LD_INT 2
57593: NEG
57594: PUSH
57595: LD_INT 2
57597: NEG
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: LIST
57607: LIST
57608: LIST
57609: LIST
57610: LIST
57611: LIST
57612: LIST
57613: LIST
57614: LIST
57615: LIST
57616: LIST
57617: LIST
57618: LIST
57619: LIST
57620: LIST
57621: LIST
57622: LIST
57623: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57624: LD_ADDR_VAR 0 18
57628: PUSH
57629: LD_INT 0
57631: PUSH
57632: LD_INT 0
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: LD_INT 0
57641: PUSH
57642: LD_INT 1
57644: NEG
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 1
57652: PUSH
57653: LD_INT 0
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: LD_INT 1
57662: PUSH
57663: LD_INT 1
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 0
57672: PUSH
57673: LD_INT 1
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 1
57682: NEG
57683: PUSH
57684: LD_INT 0
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: LD_INT 1
57693: NEG
57694: PUSH
57695: LD_INT 1
57697: NEG
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: LD_INT 1
57705: NEG
57706: PUSH
57707: LD_INT 2
57709: NEG
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: PUSH
57715: LD_INT 0
57717: PUSH
57718: LD_INT 2
57720: NEG
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: LD_INT 1
57728: PUSH
57729: LD_INT 1
57731: NEG
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: LD_INT 2
57739: PUSH
57740: LD_INT 0
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 2
57749: PUSH
57750: LD_INT 1
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 2
57759: PUSH
57760: LD_INT 2
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 1
57769: PUSH
57770: LD_INT 2
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: LD_INT 0
57779: PUSH
57780: LD_INT 2
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 1
57789: NEG
57790: PUSH
57791: LD_INT 1
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PUSH
57798: LD_INT 2
57800: NEG
57801: PUSH
57802: LD_INT 0
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: LD_INT 2
57811: NEG
57812: PUSH
57813: LD_INT 1
57815: NEG
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PUSH
57821: LD_INT 2
57823: NEG
57824: PUSH
57825: LD_INT 2
57827: NEG
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: LIST
57849: LIST
57850: LIST
57851: LIST
57852: LIST
57853: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57854: LD_ADDR_VAR 0 19
57858: PUSH
57859: LD_INT 0
57861: PUSH
57862: LD_INT 0
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PUSH
57869: LD_INT 0
57871: PUSH
57872: LD_INT 1
57874: NEG
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: LD_INT 1
57882: PUSH
57883: LD_INT 0
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 1
57892: PUSH
57893: LD_INT 1
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 0
57902: PUSH
57903: LD_INT 1
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 1
57912: NEG
57913: PUSH
57914: LD_INT 0
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: LD_INT 1
57923: NEG
57924: PUSH
57925: LD_INT 1
57927: NEG
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_INT 1
57935: NEG
57936: PUSH
57937: LD_INT 2
57939: NEG
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: LD_INT 0
57947: PUSH
57948: LD_INT 2
57950: NEG
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: PUSH
57956: LD_INT 1
57958: PUSH
57959: LD_INT 1
57961: NEG
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: PUSH
57967: LD_INT 2
57969: PUSH
57970: LD_INT 0
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: LD_INT 2
57979: PUSH
57980: LD_INT 1
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 2
57989: PUSH
57990: LD_INT 2
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: LD_INT 1
57999: PUSH
58000: LD_INT 2
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 0
58009: PUSH
58010: LD_INT 2
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: LD_INT 1
58019: NEG
58020: PUSH
58021: LD_INT 1
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PUSH
58028: LD_INT 2
58030: NEG
58031: PUSH
58032: LD_INT 0
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PUSH
58039: LD_INT 2
58041: NEG
58042: PUSH
58043: LD_INT 1
58045: NEG
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: PUSH
58051: LD_INT 2
58053: NEG
58054: PUSH
58055: LD_INT 2
58057: NEG
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: LIST
58067: LIST
58068: LIST
58069: LIST
58070: LIST
58071: LIST
58072: LIST
58073: LIST
58074: LIST
58075: LIST
58076: LIST
58077: LIST
58078: LIST
58079: LIST
58080: LIST
58081: LIST
58082: LIST
58083: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58084: LD_ADDR_VAR 0 20
58088: PUSH
58089: LD_INT 0
58091: PUSH
58092: LD_INT 0
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: LD_INT 0
58101: PUSH
58102: LD_INT 1
58104: NEG
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: PUSH
58110: LD_INT 1
58112: PUSH
58113: LD_INT 0
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: LD_INT 1
58122: PUSH
58123: LD_INT 1
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 0
58132: PUSH
58133: LD_INT 1
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: PUSH
58140: LD_INT 1
58142: NEG
58143: PUSH
58144: LD_INT 0
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: PUSH
58151: LD_INT 1
58153: NEG
58154: PUSH
58155: LD_INT 1
58157: NEG
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: LD_INT 1
58165: NEG
58166: PUSH
58167: LD_INT 2
58169: NEG
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: PUSH
58175: LD_INT 0
58177: PUSH
58178: LD_INT 2
58180: NEG
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: PUSH
58186: LD_INT 1
58188: PUSH
58189: LD_INT 1
58191: NEG
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 2
58199: PUSH
58200: LD_INT 0
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 2
58209: PUSH
58210: LD_INT 1
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 2
58219: PUSH
58220: LD_INT 2
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 1
58229: PUSH
58230: LD_INT 2
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: LD_INT 0
58239: PUSH
58240: LD_INT 2
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 1
58249: NEG
58250: PUSH
58251: LD_INT 1
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PUSH
58258: LD_INT 2
58260: NEG
58261: PUSH
58262: LD_INT 0
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: LD_INT 2
58271: NEG
58272: PUSH
58273: LD_INT 1
58275: NEG
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: LD_INT 2
58283: NEG
58284: PUSH
58285: LD_INT 2
58287: NEG
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: LIST
58297: LIST
58298: LIST
58299: LIST
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58314: LD_ADDR_VAR 0 21
58318: PUSH
58319: LD_INT 0
58321: PUSH
58322: LD_INT 0
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: LD_INT 0
58331: PUSH
58332: LD_INT 1
58334: NEG
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 1
58342: PUSH
58343: LD_INT 0
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: LD_INT 1
58352: PUSH
58353: LD_INT 1
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 0
58362: PUSH
58363: LD_INT 1
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: PUSH
58370: LD_INT 1
58372: NEG
58373: PUSH
58374: LD_INT 0
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 1
58383: NEG
58384: PUSH
58385: LD_INT 1
58387: NEG
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 1
58395: NEG
58396: PUSH
58397: LD_INT 2
58399: NEG
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 0
58407: PUSH
58408: LD_INT 2
58410: NEG
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 1
58418: PUSH
58419: LD_INT 1
58421: NEG
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: PUSH
58427: LD_INT 2
58429: PUSH
58430: LD_INT 0
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 2
58439: PUSH
58440: LD_INT 1
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 2
58449: PUSH
58450: LD_INT 2
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: LD_INT 1
58459: PUSH
58460: LD_INT 2
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PUSH
58467: LD_INT 0
58469: PUSH
58470: LD_INT 2
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: LD_INT 1
58479: NEG
58480: PUSH
58481: LD_INT 1
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: PUSH
58488: LD_INT 2
58490: NEG
58491: PUSH
58492: LD_INT 0
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 2
58501: NEG
58502: PUSH
58503: LD_INT 1
58505: NEG
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 2
58513: NEG
58514: PUSH
58515: LD_INT 2
58517: NEG
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: LIST
58527: LIST
58528: LIST
58529: LIST
58530: LIST
58531: LIST
58532: LIST
58533: LIST
58534: LIST
58535: LIST
58536: LIST
58537: LIST
58538: LIST
58539: LIST
58540: LIST
58541: LIST
58542: LIST
58543: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58544: LD_ADDR_VAR 0 22
58548: PUSH
58549: LD_INT 0
58551: PUSH
58552: LD_INT 0
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: PUSH
58559: LD_INT 0
58561: PUSH
58562: LD_INT 1
58564: NEG
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 1
58572: PUSH
58573: LD_INT 0
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: PUSH
58580: LD_INT 1
58582: PUSH
58583: LD_INT 1
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: LD_INT 0
58592: PUSH
58593: LD_INT 1
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: LD_INT 1
58602: NEG
58603: PUSH
58604: LD_INT 0
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: PUSH
58611: LD_INT 1
58613: NEG
58614: PUSH
58615: LD_INT 1
58617: NEG
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: PUSH
58623: LD_INT 1
58625: NEG
58626: PUSH
58627: LD_INT 2
58629: NEG
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: LD_INT 0
58637: PUSH
58638: LD_INT 2
58640: NEG
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: PUSH
58646: LD_INT 1
58648: PUSH
58649: LD_INT 1
58651: NEG
58652: PUSH
58653: EMPTY
58654: LIST
58655: LIST
58656: PUSH
58657: LD_INT 2
58659: PUSH
58660: LD_INT 0
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: PUSH
58667: LD_INT 2
58669: PUSH
58670: LD_INT 1
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: PUSH
58677: LD_INT 2
58679: PUSH
58680: LD_INT 2
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: PUSH
58687: LD_INT 1
58689: PUSH
58690: LD_INT 2
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: PUSH
58697: LD_INT 0
58699: PUSH
58700: LD_INT 2
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: LD_INT 1
58709: NEG
58710: PUSH
58711: LD_INT 1
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 2
58720: NEG
58721: PUSH
58722: LD_INT 0
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 2
58731: NEG
58732: PUSH
58733: LD_INT 1
58735: NEG
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 2
58743: NEG
58744: PUSH
58745: LD_INT 2
58747: NEG
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: LIST
58757: LIST
58758: LIST
58759: LIST
58760: LIST
58761: LIST
58762: LIST
58763: LIST
58764: LIST
58765: LIST
58766: LIST
58767: LIST
58768: LIST
58769: LIST
58770: LIST
58771: LIST
58772: LIST
58773: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58774: LD_ADDR_VAR 0 23
58778: PUSH
58779: LD_INT 0
58781: PUSH
58782: LD_INT 0
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 0
58791: PUSH
58792: LD_INT 1
58794: NEG
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: PUSH
58800: LD_INT 1
58802: PUSH
58803: LD_INT 0
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PUSH
58810: LD_INT 1
58812: PUSH
58813: LD_INT 1
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: PUSH
58820: LD_INT 0
58822: PUSH
58823: LD_INT 1
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 1
58832: NEG
58833: PUSH
58834: LD_INT 0
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 1
58843: NEG
58844: PUSH
58845: LD_INT 1
58847: NEG
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PUSH
58853: LD_INT 1
58855: NEG
58856: PUSH
58857: LD_INT 2
58859: NEG
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: LD_INT 0
58867: PUSH
58868: LD_INT 2
58870: NEG
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 1
58878: PUSH
58879: LD_INT 1
58881: NEG
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 2
58889: PUSH
58890: LD_INT 0
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 2
58899: PUSH
58900: LD_INT 1
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: LD_INT 2
58909: PUSH
58910: LD_INT 2
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: LD_INT 1
58919: PUSH
58920: LD_INT 2
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: PUSH
58927: LD_INT 0
58929: PUSH
58930: LD_INT 2
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 1
58939: NEG
58940: PUSH
58941: LD_INT 1
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 2
58950: NEG
58951: PUSH
58952: LD_INT 0
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: LD_INT 2
58961: NEG
58962: PUSH
58963: LD_INT 1
58965: NEG
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: PUSH
58971: LD_INT 2
58973: NEG
58974: PUSH
58975: LD_INT 2
58977: NEG
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: LD_INT 2
58985: NEG
58986: PUSH
58987: LD_INT 3
58989: NEG
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 1
58997: NEG
58998: PUSH
58999: LD_INT 3
59001: NEG
59002: PUSH
59003: EMPTY
59004: LIST
59005: LIST
59006: PUSH
59007: LD_INT 1
59009: PUSH
59010: LD_INT 2
59012: NEG
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: LD_INT 2
59020: PUSH
59021: LD_INT 1
59023: NEG
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: LIST
59033: LIST
59034: LIST
59035: LIST
59036: LIST
59037: LIST
59038: LIST
59039: LIST
59040: LIST
59041: LIST
59042: LIST
59043: LIST
59044: LIST
59045: LIST
59046: LIST
59047: LIST
59048: LIST
59049: LIST
59050: LIST
59051: LIST
59052: LIST
59053: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
59054: LD_ADDR_VAR 0 24
59058: PUSH
59059: LD_INT 0
59061: PUSH
59062: LD_INT 0
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: PUSH
59069: LD_INT 0
59071: PUSH
59072: LD_INT 1
59074: NEG
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 1
59082: PUSH
59083: LD_INT 0
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: PUSH
59090: LD_INT 1
59092: PUSH
59093: LD_INT 1
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: PUSH
59100: LD_INT 0
59102: PUSH
59103: LD_INT 1
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: PUSH
59110: LD_INT 1
59112: NEG
59113: PUSH
59114: LD_INT 0
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: LD_INT 1
59123: NEG
59124: PUSH
59125: LD_INT 1
59127: NEG
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 1
59135: NEG
59136: PUSH
59137: LD_INT 2
59139: NEG
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 0
59147: PUSH
59148: LD_INT 2
59150: NEG
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PUSH
59156: LD_INT 1
59158: PUSH
59159: LD_INT 1
59161: NEG
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: LD_INT 2
59169: PUSH
59170: LD_INT 0
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: PUSH
59177: LD_INT 2
59179: PUSH
59180: LD_INT 1
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: LD_INT 2
59189: PUSH
59190: LD_INT 2
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: LD_INT 1
59199: PUSH
59200: LD_INT 2
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PUSH
59207: LD_INT 0
59209: PUSH
59210: LD_INT 2
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: PUSH
59217: LD_INT 1
59219: NEG
59220: PUSH
59221: LD_INT 1
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: PUSH
59228: LD_INT 2
59230: NEG
59231: PUSH
59232: LD_INT 0
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: LD_INT 2
59241: NEG
59242: PUSH
59243: LD_INT 1
59245: NEG
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: LD_INT 2
59253: NEG
59254: PUSH
59255: LD_INT 2
59257: NEG
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: PUSH
59263: LD_INT 1
59265: PUSH
59266: LD_INT 2
59268: NEG
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: LD_INT 2
59276: PUSH
59277: LD_INT 1
59279: NEG
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: LD_INT 3
59287: PUSH
59288: LD_INT 1
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 3
59297: PUSH
59298: LD_INT 2
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: LIST
59309: LIST
59310: LIST
59311: LIST
59312: LIST
59313: LIST
59314: LIST
59315: LIST
59316: LIST
59317: LIST
59318: LIST
59319: LIST
59320: LIST
59321: LIST
59322: LIST
59323: LIST
59324: LIST
59325: LIST
59326: LIST
59327: LIST
59328: LIST
59329: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
59330: LD_ADDR_VAR 0 25
59334: PUSH
59335: LD_INT 0
59337: PUSH
59338: LD_INT 0
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: PUSH
59345: LD_INT 0
59347: PUSH
59348: LD_INT 1
59350: NEG
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: LD_INT 1
59358: PUSH
59359: LD_INT 0
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: LD_INT 1
59368: PUSH
59369: LD_INT 1
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: LD_INT 0
59378: PUSH
59379: LD_INT 1
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 1
59388: NEG
59389: PUSH
59390: LD_INT 0
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PUSH
59397: LD_INT 1
59399: NEG
59400: PUSH
59401: LD_INT 1
59403: NEG
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: LD_INT 1
59411: NEG
59412: PUSH
59413: LD_INT 2
59415: NEG
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: LD_INT 0
59423: PUSH
59424: LD_INT 2
59426: NEG
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: LD_INT 1
59434: PUSH
59435: LD_INT 1
59437: NEG
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: LD_INT 2
59445: PUSH
59446: LD_INT 0
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 2
59455: PUSH
59456: LD_INT 1
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: PUSH
59463: LD_INT 2
59465: PUSH
59466: LD_INT 2
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 1
59475: PUSH
59476: LD_INT 2
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: LD_INT 0
59485: PUSH
59486: LD_INT 2
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 1
59495: NEG
59496: PUSH
59497: LD_INT 1
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 2
59506: NEG
59507: PUSH
59508: LD_INT 0
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 2
59517: NEG
59518: PUSH
59519: LD_INT 1
59521: NEG
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 2
59529: NEG
59530: PUSH
59531: LD_INT 2
59533: NEG
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 3
59541: PUSH
59542: LD_INT 1
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: PUSH
59549: LD_INT 3
59551: PUSH
59552: LD_INT 2
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: LD_INT 2
59561: PUSH
59562: LD_INT 3
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: PUSH
59569: LD_INT 1
59571: PUSH
59572: LD_INT 3
59574: PUSH
59575: EMPTY
59576: LIST
59577: LIST
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: LIST
59583: LIST
59584: LIST
59585: LIST
59586: LIST
59587: LIST
59588: LIST
59589: LIST
59590: LIST
59591: LIST
59592: LIST
59593: LIST
59594: LIST
59595: LIST
59596: LIST
59597: LIST
59598: LIST
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59604: LD_ADDR_VAR 0 26
59608: PUSH
59609: LD_INT 0
59611: PUSH
59612: LD_INT 0
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: LD_INT 0
59621: PUSH
59622: LD_INT 1
59624: NEG
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: LD_INT 1
59632: PUSH
59633: LD_INT 0
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 1
59642: PUSH
59643: LD_INT 1
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: PUSH
59650: LD_INT 0
59652: PUSH
59653: LD_INT 1
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 1
59662: NEG
59663: PUSH
59664: LD_INT 0
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PUSH
59671: LD_INT 1
59673: NEG
59674: PUSH
59675: LD_INT 1
59677: NEG
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: PUSH
59683: LD_INT 1
59685: NEG
59686: PUSH
59687: LD_INT 2
59689: NEG
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: PUSH
59695: LD_INT 0
59697: PUSH
59698: LD_INT 2
59700: NEG
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: LD_INT 1
59708: PUSH
59709: LD_INT 1
59711: NEG
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 2
59719: PUSH
59720: LD_INT 0
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: PUSH
59727: LD_INT 2
59729: PUSH
59730: LD_INT 1
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: LD_INT 2
59739: PUSH
59740: LD_INT 2
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: PUSH
59747: LD_INT 1
59749: PUSH
59750: LD_INT 2
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: PUSH
59757: LD_INT 0
59759: PUSH
59760: LD_INT 2
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: LD_INT 1
59769: NEG
59770: PUSH
59771: LD_INT 1
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 2
59780: NEG
59781: PUSH
59782: LD_INT 0
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: LD_INT 2
59791: NEG
59792: PUSH
59793: LD_INT 1
59795: NEG
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 2
59803: NEG
59804: PUSH
59805: LD_INT 2
59807: NEG
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: PUSH
59813: LD_INT 2
59815: PUSH
59816: LD_INT 3
59818: PUSH
59819: EMPTY
59820: LIST
59821: LIST
59822: PUSH
59823: LD_INT 1
59825: PUSH
59826: LD_INT 3
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: PUSH
59833: LD_INT 1
59835: NEG
59836: PUSH
59837: LD_INT 2
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: PUSH
59844: LD_INT 2
59846: NEG
59847: PUSH
59848: LD_INT 1
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: PUSH
59855: EMPTY
59856: LIST
59857: LIST
59858: LIST
59859: LIST
59860: LIST
59861: LIST
59862: LIST
59863: LIST
59864: LIST
59865: LIST
59866: LIST
59867: LIST
59868: LIST
59869: LIST
59870: LIST
59871: LIST
59872: LIST
59873: LIST
59874: LIST
59875: LIST
59876: LIST
59877: LIST
59878: LIST
59879: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59880: LD_ADDR_VAR 0 27
59884: PUSH
59885: LD_INT 0
59887: PUSH
59888: LD_INT 0
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: PUSH
59895: LD_INT 0
59897: PUSH
59898: LD_INT 1
59900: NEG
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: PUSH
59906: LD_INT 1
59908: PUSH
59909: LD_INT 0
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 1
59918: PUSH
59919: LD_INT 1
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 0
59928: PUSH
59929: LD_INT 1
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: LD_INT 1
59938: NEG
59939: PUSH
59940: LD_INT 0
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: PUSH
59947: LD_INT 1
59949: NEG
59950: PUSH
59951: LD_INT 1
59953: NEG
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: PUSH
59959: LD_INT 1
59961: NEG
59962: PUSH
59963: LD_INT 2
59965: NEG
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: LD_INT 0
59973: PUSH
59974: LD_INT 2
59976: NEG
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 1
59984: PUSH
59985: LD_INT 1
59987: NEG
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: LD_INT 2
59995: PUSH
59996: LD_INT 0
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: LD_INT 2
60005: PUSH
60006: LD_INT 1
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: PUSH
60013: LD_INT 2
60015: PUSH
60016: LD_INT 2
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: PUSH
60023: LD_INT 1
60025: PUSH
60026: LD_INT 2
60028: PUSH
60029: EMPTY
60030: LIST
60031: LIST
60032: PUSH
60033: LD_INT 0
60035: PUSH
60036: LD_INT 2
60038: PUSH
60039: EMPTY
60040: LIST
60041: LIST
60042: PUSH
60043: LD_INT 1
60045: NEG
60046: PUSH
60047: LD_INT 1
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: PUSH
60054: LD_INT 2
60056: NEG
60057: PUSH
60058: LD_INT 0
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: PUSH
60065: LD_INT 2
60067: NEG
60068: PUSH
60069: LD_INT 1
60071: NEG
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: PUSH
60077: LD_INT 2
60079: NEG
60080: PUSH
60081: LD_INT 2
60083: NEG
60084: PUSH
60085: EMPTY
60086: LIST
60087: LIST
60088: PUSH
60089: LD_INT 1
60091: NEG
60092: PUSH
60093: LD_INT 2
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: PUSH
60100: LD_INT 2
60102: NEG
60103: PUSH
60104: LD_INT 1
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 3
60113: NEG
60114: PUSH
60115: LD_INT 1
60117: NEG
60118: PUSH
60119: EMPTY
60120: LIST
60121: LIST
60122: PUSH
60123: LD_INT 3
60125: NEG
60126: PUSH
60127: LD_INT 2
60129: NEG
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: LIST
60139: LIST
60140: LIST
60141: LIST
60142: LIST
60143: LIST
60144: LIST
60145: LIST
60146: LIST
60147: LIST
60148: LIST
60149: LIST
60150: LIST
60151: LIST
60152: LIST
60153: LIST
60154: LIST
60155: LIST
60156: LIST
60157: LIST
60158: LIST
60159: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60160: LD_ADDR_VAR 0 28
60164: PUSH
60165: LD_INT 0
60167: PUSH
60168: LD_INT 0
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 0
60177: PUSH
60178: LD_INT 1
60180: NEG
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: PUSH
60186: LD_INT 1
60188: PUSH
60189: LD_INT 0
60191: PUSH
60192: EMPTY
60193: LIST
60194: LIST
60195: PUSH
60196: LD_INT 1
60198: PUSH
60199: LD_INT 1
60201: PUSH
60202: EMPTY
60203: LIST
60204: LIST
60205: PUSH
60206: LD_INT 0
60208: PUSH
60209: LD_INT 1
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: PUSH
60216: LD_INT 1
60218: NEG
60219: PUSH
60220: LD_INT 0
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: PUSH
60227: LD_INT 1
60229: NEG
60230: PUSH
60231: LD_INT 1
60233: NEG
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: PUSH
60239: LD_INT 1
60241: NEG
60242: PUSH
60243: LD_INT 2
60245: NEG
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: LD_INT 0
60253: PUSH
60254: LD_INT 2
60256: NEG
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 1
60264: PUSH
60265: LD_INT 1
60267: NEG
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: PUSH
60273: LD_INT 2
60275: PUSH
60276: LD_INT 0
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: LD_INT 2
60285: PUSH
60286: LD_INT 1
60288: PUSH
60289: EMPTY
60290: LIST
60291: LIST
60292: PUSH
60293: LD_INT 2
60295: PUSH
60296: LD_INT 2
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: PUSH
60303: LD_INT 1
60305: PUSH
60306: LD_INT 2
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: LD_INT 0
60315: PUSH
60316: LD_INT 2
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: PUSH
60323: LD_INT 1
60325: NEG
60326: PUSH
60327: LD_INT 1
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_INT 2
60336: NEG
60337: PUSH
60338: LD_INT 0
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 2
60347: NEG
60348: PUSH
60349: LD_INT 1
60351: NEG
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 2
60359: NEG
60360: PUSH
60361: LD_INT 2
60363: NEG
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: LD_INT 2
60371: NEG
60372: PUSH
60373: LD_INT 3
60375: NEG
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: PUSH
60381: LD_INT 1
60383: NEG
60384: PUSH
60385: LD_INT 3
60387: NEG
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: PUSH
60393: LD_INT 3
60395: NEG
60396: PUSH
60397: LD_INT 1
60399: NEG
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: LD_INT 3
60407: NEG
60408: PUSH
60409: LD_INT 2
60411: NEG
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: LIST
60421: LIST
60422: LIST
60423: LIST
60424: LIST
60425: LIST
60426: LIST
60427: LIST
60428: LIST
60429: LIST
60430: LIST
60431: LIST
60432: LIST
60433: LIST
60434: LIST
60435: LIST
60436: LIST
60437: LIST
60438: LIST
60439: LIST
60440: LIST
60441: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60442: LD_ADDR_VAR 0 29
60446: PUSH
60447: LD_INT 0
60449: PUSH
60450: LD_INT 0
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: LD_INT 0
60459: PUSH
60460: LD_INT 1
60462: NEG
60463: PUSH
60464: EMPTY
60465: LIST
60466: LIST
60467: PUSH
60468: LD_INT 1
60470: PUSH
60471: LD_INT 0
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: PUSH
60478: LD_INT 1
60480: PUSH
60481: LD_INT 1
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 0
60490: PUSH
60491: LD_INT 1
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 1
60500: NEG
60501: PUSH
60502: LD_INT 0
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 1
60511: NEG
60512: PUSH
60513: LD_INT 1
60515: NEG
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 1
60523: NEG
60524: PUSH
60525: LD_INT 2
60527: NEG
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: PUSH
60533: LD_INT 0
60535: PUSH
60536: LD_INT 2
60538: NEG
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: PUSH
60544: LD_INT 1
60546: PUSH
60547: LD_INT 1
60549: NEG
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 2
60557: PUSH
60558: LD_INT 0
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 2
60567: PUSH
60568: LD_INT 1
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: LD_INT 1
60577: PUSH
60578: LD_INT 2
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: PUSH
60585: LD_INT 0
60587: PUSH
60588: LD_INT 2
60590: PUSH
60591: EMPTY
60592: LIST
60593: LIST
60594: PUSH
60595: LD_INT 1
60597: NEG
60598: PUSH
60599: LD_INT 1
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: PUSH
60606: LD_INT 2
60608: NEG
60609: PUSH
60610: LD_INT 1
60612: NEG
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: PUSH
60618: LD_INT 2
60620: NEG
60621: PUSH
60622: LD_INT 2
60624: NEG
60625: PUSH
60626: EMPTY
60627: LIST
60628: LIST
60629: PUSH
60630: LD_INT 2
60632: NEG
60633: PUSH
60634: LD_INT 3
60636: NEG
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: LD_INT 2
60644: PUSH
60645: LD_INT 1
60647: NEG
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: PUSH
60653: LD_INT 3
60655: PUSH
60656: LD_INT 1
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: PUSH
60663: LD_INT 1
60665: PUSH
60666: LD_INT 3
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PUSH
60673: LD_INT 1
60675: NEG
60676: PUSH
60677: LD_INT 2
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: LD_INT 3
60686: NEG
60687: PUSH
60688: LD_INT 2
60690: NEG
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: LIST
60706: LIST
60707: LIST
60708: LIST
60709: LIST
60710: LIST
60711: LIST
60712: LIST
60713: LIST
60714: LIST
60715: LIST
60716: LIST
60717: LIST
60718: LIST
60719: LIST
60720: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60721: LD_ADDR_VAR 0 30
60725: PUSH
60726: LD_INT 0
60728: PUSH
60729: LD_INT 0
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PUSH
60736: LD_INT 0
60738: PUSH
60739: LD_INT 1
60741: NEG
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: PUSH
60747: LD_INT 1
60749: PUSH
60750: LD_INT 0
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: LD_INT 1
60759: PUSH
60760: LD_INT 1
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: PUSH
60767: LD_INT 0
60769: PUSH
60770: LD_INT 1
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: PUSH
60777: LD_INT 1
60779: NEG
60780: PUSH
60781: LD_INT 0
60783: PUSH
60784: EMPTY
60785: LIST
60786: LIST
60787: PUSH
60788: LD_INT 1
60790: NEG
60791: PUSH
60792: LD_INT 1
60794: NEG
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: PUSH
60800: LD_INT 1
60802: NEG
60803: PUSH
60804: LD_INT 2
60806: NEG
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: PUSH
60812: LD_INT 0
60814: PUSH
60815: LD_INT 2
60817: NEG
60818: PUSH
60819: EMPTY
60820: LIST
60821: LIST
60822: PUSH
60823: LD_INT 1
60825: PUSH
60826: LD_INT 1
60828: NEG
60829: PUSH
60830: EMPTY
60831: LIST
60832: LIST
60833: PUSH
60834: LD_INT 2
60836: PUSH
60837: LD_INT 0
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 2
60846: PUSH
60847: LD_INT 1
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 2
60856: PUSH
60857: LD_INT 2
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 1
60866: PUSH
60867: LD_INT 2
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: PUSH
60874: LD_INT 1
60876: NEG
60877: PUSH
60878: LD_INT 1
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: LD_INT 2
60887: NEG
60888: PUSH
60889: LD_INT 0
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: PUSH
60896: LD_INT 2
60898: NEG
60899: PUSH
60900: LD_INT 1
60902: NEG
60903: PUSH
60904: EMPTY
60905: LIST
60906: LIST
60907: PUSH
60908: LD_INT 1
60910: NEG
60911: PUSH
60912: LD_INT 3
60914: NEG
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: PUSH
60920: LD_INT 1
60922: PUSH
60923: LD_INT 2
60925: NEG
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PUSH
60931: LD_INT 3
60933: PUSH
60934: LD_INT 2
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: LD_INT 2
60943: PUSH
60944: LD_INT 3
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: LD_INT 2
60953: NEG
60954: PUSH
60955: LD_INT 1
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: PUSH
60962: LD_INT 3
60964: NEG
60965: PUSH
60966: LD_INT 1
60968: NEG
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: LIST
60978: LIST
60979: LIST
60980: LIST
60981: LIST
60982: LIST
60983: LIST
60984: LIST
60985: LIST
60986: LIST
60987: LIST
60988: LIST
60989: LIST
60990: LIST
60991: LIST
60992: LIST
60993: LIST
60994: LIST
60995: LIST
60996: LIST
60997: LIST
60998: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60999: LD_ADDR_VAR 0 31
61003: PUSH
61004: LD_INT 0
61006: PUSH
61007: LD_INT 0
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PUSH
61014: LD_INT 0
61016: PUSH
61017: LD_INT 1
61019: NEG
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: PUSH
61025: LD_INT 1
61027: PUSH
61028: LD_INT 0
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: LD_INT 1
61037: PUSH
61038: LD_INT 1
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: PUSH
61045: LD_INT 0
61047: PUSH
61048: LD_INT 1
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: PUSH
61055: LD_INT 1
61057: NEG
61058: PUSH
61059: LD_INT 0
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: PUSH
61066: LD_INT 1
61068: NEG
61069: PUSH
61070: LD_INT 1
61072: NEG
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 1
61080: NEG
61081: PUSH
61082: LD_INT 2
61084: NEG
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: PUSH
61090: LD_INT 1
61092: PUSH
61093: LD_INT 1
61095: NEG
61096: PUSH
61097: EMPTY
61098: LIST
61099: LIST
61100: PUSH
61101: LD_INT 2
61103: PUSH
61104: LD_INT 0
61106: PUSH
61107: EMPTY
61108: LIST
61109: LIST
61110: PUSH
61111: LD_INT 2
61113: PUSH
61114: LD_INT 1
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PUSH
61121: LD_INT 2
61123: PUSH
61124: LD_INT 2
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: PUSH
61131: LD_INT 1
61133: PUSH
61134: LD_INT 2
61136: PUSH
61137: EMPTY
61138: LIST
61139: LIST
61140: PUSH
61141: LD_INT 0
61143: PUSH
61144: LD_INT 2
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: PUSH
61151: LD_INT 1
61153: NEG
61154: PUSH
61155: LD_INT 1
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: PUSH
61162: LD_INT 2
61164: NEG
61165: PUSH
61166: LD_INT 1
61168: NEG
61169: PUSH
61170: EMPTY
61171: LIST
61172: LIST
61173: PUSH
61174: LD_INT 2
61176: NEG
61177: PUSH
61178: LD_INT 2
61180: NEG
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: PUSH
61186: LD_INT 2
61188: NEG
61189: PUSH
61190: LD_INT 3
61192: NEG
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: PUSH
61198: LD_INT 2
61200: PUSH
61201: LD_INT 1
61203: NEG
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PUSH
61209: LD_INT 3
61211: PUSH
61212: LD_INT 1
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: PUSH
61219: LD_INT 1
61221: PUSH
61222: LD_INT 3
61224: PUSH
61225: EMPTY
61226: LIST
61227: LIST
61228: PUSH
61229: LD_INT 1
61231: NEG
61232: PUSH
61233: LD_INT 2
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: PUSH
61240: LD_INT 3
61242: NEG
61243: PUSH
61244: LD_INT 2
61246: NEG
61247: PUSH
61248: EMPTY
61249: LIST
61250: LIST
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: LIST
61258: LIST
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: LIST
61271: LIST
61272: LIST
61273: LIST
61274: LIST
61275: LIST
61276: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61277: LD_ADDR_VAR 0 32
61281: PUSH
61282: LD_INT 0
61284: PUSH
61285: LD_INT 0
61287: PUSH
61288: EMPTY
61289: LIST
61290: LIST
61291: PUSH
61292: LD_INT 0
61294: PUSH
61295: LD_INT 1
61297: NEG
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: PUSH
61303: LD_INT 1
61305: PUSH
61306: LD_INT 0
61308: PUSH
61309: EMPTY
61310: LIST
61311: LIST
61312: PUSH
61313: LD_INT 1
61315: PUSH
61316: LD_INT 1
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PUSH
61323: LD_INT 0
61325: PUSH
61326: LD_INT 1
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: PUSH
61333: LD_INT 1
61335: NEG
61336: PUSH
61337: LD_INT 0
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: LD_INT 1
61346: NEG
61347: PUSH
61348: LD_INT 1
61350: NEG
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: PUSH
61356: LD_INT 1
61358: NEG
61359: PUSH
61360: LD_INT 2
61362: NEG
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: LD_INT 0
61370: PUSH
61371: LD_INT 2
61373: NEG
61374: PUSH
61375: EMPTY
61376: LIST
61377: LIST
61378: PUSH
61379: LD_INT 1
61381: PUSH
61382: LD_INT 1
61384: NEG
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: LD_INT 2
61392: PUSH
61393: LD_INT 1
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 2
61402: PUSH
61403: LD_INT 2
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 1
61412: PUSH
61413: LD_INT 2
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 0
61422: PUSH
61423: LD_INT 2
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: PUSH
61430: LD_INT 1
61432: NEG
61433: PUSH
61434: LD_INT 1
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: PUSH
61441: LD_INT 2
61443: NEG
61444: PUSH
61445: LD_INT 0
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: PUSH
61452: LD_INT 2
61454: NEG
61455: PUSH
61456: LD_INT 1
61458: NEG
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: PUSH
61464: LD_INT 1
61466: NEG
61467: PUSH
61468: LD_INT 3
61470: NEG
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: PUSH
61476: LD_INT 1
61478: PUSH
61479: LD_INT 2
61481: NEG
61482: PUSH
61483: EMPTY
61484: LIST
61485: LIST
61486: PUSH
61487: LD_INT 3
61489: PUSH
61490: LD_INT 2
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: PUSH
61497: LD_INT 2
61499: PUSH
61500: LD_INT 3
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 2
61509: NEG
61510: PUSH
61511: LD_INT 1
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 3
61520: NEG
61521: PUSH
61522: LD_INT 1
61524: NEG
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: EMPTY
61531: LIST
61532: LIST
61533: LIST
61534: LIST
61535: LIST
61536: LIST
61537: LIST
61538: LIST
61539: LIST
61540: LIST
61541: LIST
61542: LIST
61543: LIST
61544: LIST
61545: LIST
61546: LIST
61547: LIST
61548: LIST
61549: LIST
61550: LIST
61551: LIST
61552: LIST
61553: LIST
61554: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61555: LD_ADDR_VAR 0 33
61559: PUSH
61560: LD_INT 0
61562: PUSH
61563: LD_INT 0
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: PUSH
61570: LD_INT 0
61572: PUSH
61573: LD_INT 1
61575: NEG
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: PUSH
61581: LD_INT 1
61583: PUSH
61584: LD_INT 0
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: PUSH
61591: LD_INT 1
61593: PUSH
61594: LD_INT 1
61596: PUSH
61597: EMPTY
61598: LIST
61599: LIST
61600: PUSH
61601: LD_INT 0
61603: PUSH
61604: LD_INT 1
61606: PUSH
61607: EMPTY
61608: LIST
61609: LIST
61610: PUSH
61611: LD_INT 1
61613: NEG
61614: PUSH
61615: LD_INT 0
61617: PUSH
61618: EMPTY
61619: LIST
61620: LIST
61621: PUSH
61622: LD_INT 1
61624: NEG
61625: PUSH
61626: LD_INT 1
61628: NEG
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: LD_INT 1
61636: NEG
61637: PUSH
61638: LD_INT 2
61640: NEG
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: PUSH
61646: LD_INT 1
61648: PUSH
61649: LD_INT 1
61651: NEG
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: PUSH
61657: LD_INT 2
61659: PUSH
61660: LD_INT 0
61662: PUSH
61663: EMPTY
61664: LIST
61665: LIST
61666: PUSH
61667: LD_INT 2
61669: PUSH
61670: LD_INT 1
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: PUSH
61677: LD_INT 1
61679: PUSH
61680: LD_INT 2
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: LD_INT 0
61689: PUSH
61690: LD_INT 2
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PUSH
61697: LD_INT 1
61699: NEG
61700: PUSH
61701: LD_INT 1
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: PUSH
61708: LD_INT 2
61710: NEG
61711: PUSH
61712: LD_INT 0
61714: PUSH
61715: EMPTY
61716: LIST
61717: LIST
61718: PUSH
61719: LD_INT 2
61721: NEG
61722: PUSH
61723: LD_INT 1
61725: NEG
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: PUSH
61731: LD_INT 2
61733: NEG
61734: PUSH
61735: LD_INT 2
61737: NEG
61738: PUSH
61739: EMPTY
61740: LIST
61741: LIST
61742: PUSH
61743: LD_INT 2
61745: NEG
61746: PUSH
61747: LD_INT 3
61749: NEG
61750: PUSH
61751: EMPTY
61752: LIST
61753: LIST
61754: PUSH
61755: LD_INT 2
61757: PUSH
61758: LD_INT 1
61760: NEG
61761: PUSH
61762: EMPTY
61763: LIST
61764: LIST
61765: PUSH
61766: LD_INT 3
61768: PUSH
61769: LD_INT 1
61771: PUSH
61772: EMPTY
61773: LIST
61774: LIST
61775: PUSH
61776: LD_INT 1
61778: PUSH
61779: LD_INT 3
61781: PUSH
61782: EMPTY
61783: LIST
61784: LIST
61785: PUSH
61786: LD_INT 1
61788: NEG
61789: PUSH
61790: LD_INT 2
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: LD_INT 3
61799: NEG
61800: PUSH
61801: LD_INT 2
61803: NEG
61804: PUSH
61805: EMPTY
61806: LIST
61807: LIST
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: LIST
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: LIST
61831: LIST
61832: LIST
61833: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61834: LD_ADDR_VAR 0 34
61838: PUSH
61839: LD_INT 0
61841: PUSH
61842: LD_INT 0
61844: PUSH
61845: EMPTY
61846: LIST
61847: LIST
61848: PUSH
61849: LD_INT 0
61851: PUSH
61852: LD_INT 1
61854: NEG
61855: PUSH
61856: EMPTY
61857: LIST
61858: LIST
61859: PUSH
61860: LD_INT 1
61862: PUSH
61863: LD_INT 0
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: PUSH
61870: LD_INT 1
61872: PUSH
61873: LD_INT 1
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: LD_INT 0
61882: PUSH
61883: LD_INT 1
61885: PUSH
61886: EMPTY
61887: LIST
61888: LIST
61889: PUSH
61890: LD_INT 1
61892: NEG
61893: PUSH
61894: LD_INT 0
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: PUSH
61901: LD_INT 1
61903: NEG
61904: PUSH
61905: LD_INT 1
61907: NEG
61908: PUSH
61909: EMPTY
61910: LIST
61911: LIST
61912: PUSH
61913: LD_INT 1
61915: NEG
61916: PUSH
61917: LD_INT 2
61919: NEG
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: PUSH
61925: LD_INT 0
61927: PUSH
61928: LD_INT 2
61930: NEG
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: PUSH
61936: LD_INT 1
61938: PUSH
61939: LD_INT 1
61941: NEG
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PUSH
61947: LD_INT 2
61949: PUSH
61950: LD_INT 1
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: PUSH
61957: LD_INT 2
61959: PUSH
61960: LD_INT 2
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: PUSH
61967: LD_INT 1
61969: PUSH
61970: LD_INT 2
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: PUSH
61977: LD_INT 1
61979: NEG
61980: PUSH
61981: LD_INT 1
61983: PUSH
61984: EMPTY
61985: LIST
61986: LIST
61987: PUSH
61988: LD_INT 2
61990: NEG
61991: PUSH
61992: LD_INT 0
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: LD_INT 2
62001: NEG
62002: PUSH
62003: LD_INT 1
62005: NEG
62006: PUSH
62007: EMPTY
62008: LIST
62009: LIST
62010: PUSH
62011: LD_INT 2
62013: NEG
62014: PUSH
62015: LD_INT 2
62017: NEG
62018: PUSH
62019: EMPTY
62020: LIST
62021: LIST
62022: PUSH
62023: LD_INT 1
62025: NEG
62026: PUSH
62027: LD_INT 3
62029: NEG
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 1
62037: PUSH
62038: LD_INT 2
62040: NEG
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: LD_INT 3
62048: PUSH
62049: LD_INT 2
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: PUSH
62056: LD_INT 2
62058: PUSH
62059: LD_INT 3
62061: PUSH
62062: EMPTY
62063: LIST
62064: LIST
62065: PUSH
62066: LD_INT 2
62068: NEG
62069: PUSH
62070: LD_INT 1
62072: PUSH
62073: EMPTY
62074: LIST
62075: LIST
62076: PUSH
62077: LD_INT 3
62079: NEG
62080: PUSH
62081: LD_INT 1
62083: NEG
62084: PUSH
62085: EMPTY
62086: LIST
62087: LIST
62088: PUSH
62089: EMPTY
62090: LIST
62091: LIST
62092: LIST
62093: LIST
62094: LIST
62095: LIST
62096: LIST
62097: LIST
62098: LIST
62099: LIST
62100: LIST
62101: LIST
62102: LIST
62103: LIST
62104: LIST
62105: LIST
62106: LIST
62107: LIST
62108: LIST
62109: LIST
62110: LIST
62111: LIST
62112: LIST
62113: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
62114: LD_ADDR_VAR 0 35
62118: PUSH
62119: LD_INT 0
62121: PUSH
62122: LD_INT 0
62124: PUSH
62125: EMPTY
62126: LIST
62127: LIST
62128: PUSH
62129: LD_INT 0
62131: PUSH
62132: LD_INT 1
62134: NEG
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: PUSH
62140: LD_INT 1
62142: PUSH
62143: LD_INT 0
62145: PUSH
62146: EMPTY
62147: LIST
62148: LIST
62149: PUSH
62150: LD_INT 1
62152: PUSH
62153: LD_INT 1
62155: PUSH
62156: EMPTY
62157: LIST
62158: LIST
62159: PUSH
62160: LD_INT 0
62162: PUSH
62163: LD_INT 1
62165: PUSH
62166: EMPTY
62167: LIST
62168: LIST
62169: PUSH
62170: LD_INT 1
62172: NEG
62173: PUSH
62174: LD_INT 0
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: PUSH
62181: LD_INT 1
62183: NEG
62184: PUSH
62185: LD_INT 1
62187: NEG
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: PUSH
62193: LD_INT 2
62195: PUSH
62196: LD_INT 1
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: PUSH
62203: LD_INT 2
62205: NEG
62206: PUSH
62207: LD_INT 1
62209: NEG
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: PUSH
62215: EMPTY
62216: LIST
62217: LIST
62218: LIST
62219: LIST
62220: LIST
62221: LIST
62222: LIST
62223: LIST
62224: LIST
62225: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
62226: LD_ADDR_VAR 0 36
62230: PUSH
62231: LD_INT 0
62233: PUSH
62234: LD_INT 0
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: PUSH
62241: LD_INT 0
62243: PUSH
62244: LD_INT 1
62246: NEG
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: PUSH
62252: LD_INT 1
62254: PUSH
62255: LD_INT 0
62257: PUSH
62258: EMPTY
62259: LIST
62260: LIST
62261: PUSH
62262: LD_INT 1
62264: PUSH
62265: LD_INT 1
62267: PUSH
62268: EMPTY
62269: LIST
62270: LIST
62271: PUSH
62272: LD_INT 0
62274: PUSH
62275: LD_INT 1
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: PUSH
62282: LD_INT 1
62284: NEG
62285: PUSH
62286: LD_INT 0
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: PUSH
62293: LD_INT 1
62295: NEG
62296: PUSH
62297: LD_INT 1
62299: NEG
62300: PUSH
62301: EMPTY
62302: LIST
62303: LIST
62304: PUSH
62305: LD_INT 1
62307: NEG
62308: PUSH
62309: LD_INT 2
62311: NEG
62312: PUSH
62313: EMPTY
62314: LIST
62315: LIST
62316: PUSH
62317: LD_INT 1
62319: PUSH
62320: LD_INT 2
62322: PUSH
62323: EMPTY
62324: LIST
62325: LIST
62326: PUSH
62327: EMPTY
62328: LIST
62329: LIST
62330: LIST
62331: LIST
62332: LIST
62333: LIST
62334: LIST
62335: LIST
62336: LIST
62337: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62338: LD_ADDR_VAR 0 37
62342: PUSH
62343: LD_INT 0
62345: PUSH
62346: LD_INT 0
62348: PUSH
62349: EMPTY
62350: LIST
62351: LIST
62352: PUSH
62353: LD_INT 0
62355: PUSH
62356: LD_INT 1
62358: NEG
62359: PUSH
62360: EMPTY
62361: LIST
62362: LIST
62363: PUSH
62364: LD_INT 1
62366: PUSH
62367: LD_INT 0
62369: PUSH
62370: EMPTY
62371: LIST
62372: LIST
62373: PUSH
62374: LD_INT 1
62376: PUSH
62377: LD_INT 1
62379: PUSH
62380: EMPTY
62381: LIST
62382: LIST
62383: PUSH
62384: LD_INT 0
62386: PUSH
62387: LD_INT 1
62389: PUSH
62390: EMPTY
62391: LIST
62392: LIST
62393: PUSH
62394: LD_INT 1
62396: NEG
62397: PUSH
62398: LD_INT 0
62400: PUSH
62401: EMPTY
62402: LIST
62403: LIST
62404: PUSH
62405: LD_INT 1
62407: NEG
62408: PUSH
62409: LD_INT 1
62411: NEG
62412: PUSH
62413: EMPTY
62414: LIST
62415: LIST
62416: PUSH
62417: LD_INT 1
62419: PUSH
62420: LD_INT 1
62422: NEG
62423: PUSH
62424: EMPTY
62425: LIST
62426: LIST
62427: PUSH
62428: LD_INT 1
62430: NEG
62431: PUSH
62432: LD_INT 1
62434: PUSH
62435: EMPTY
62436: LIST
62437: LIST
62438: PUSH
62439: EMPTY
62440: LIST
62441: LIST
62442: LIST
62443: LIST
62444: LIST
62445: LIST
62446: LIST
62447: LIST
62448: LIST
62449: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
62450: LD_ADDR_VAR 0 38
62454: PUSH
62455: LD_INT 0
62457: PUSH
62458: LD_INT 0
62460: PUSH
62461: EMPTY
62462: LIST
62463: LIST
62464: PUSH
62465: LD_INT 0
62467: PUSH
62468: LD_INT 1
62470: NEG
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: LD_INT 1
62478: PUSH
62479: LD_INT 0
62481: PUSH
62482: EMPTY
62483: LIST
62484: LIST
62485: PUSH
62486: LD_INT 1
62488: PUSH
62489: LD_INT 1
62491: PUSH
62492: EMPTY
62493: LIST
62494: LIST
62495: PUSH
62496: LD_INT 0
62498: PUSH
62499: LD_INT 1
62501: PUSH
62502: EMPTY
62503: LIST
62504: LIST
62505: PUSH
62506: LD_INT 1
62508: NEG
62509: PUSH
62510: LD_INT 0
62512: PUSH
62513: EMPTY
62514: LIST
62515: LIST
62516: PUSH
62517: LD_INT 1
62519: NEG
62520: PUSH
62521: LD_INT 1
62523: NEG
62524: PUSH
62525: EMPTY
62526: LIST
62527: LIST
62528: PUSH
62529: LD_INT 2
62531: PUSH
62532: LD_INT 1
62534: PUSH
62535: EMPTY
62536: LIST
62537: LIST
62538: PUSH
62539: LD_INT 2
62541: NEG
62542: PUSH
62543: LD_INT 1
62545: NEG
62546: PUSH
62547: EMPTY
62548: LIST
62549: LIST
62550: PUSH
62551: EMPTY
62552: LIST
62553: LIST
62554: LIST
62555: LIST
62556: LIST
62557: LIST
62558: LIST
62559: LIST
62560: LIST
62561: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
62562: LD_ADDR_VAR 0 39
62566: PUSH
62567: LD_INT 0
62569: PUSH
62570: LD_INT 0
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: LD_INT 0
62579: PUSH
62580: LD_INT 1
62582: NEG
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: PUSH
62588: LD_INT 1
62590: PUSH
62591: LD_INT 0
62593: PUSH
62594: EMPTY
62595: LIST
62596: LIST
62597: PUSH
62598: LD_INT 1
62600: PUSH
62601: LD_INT 1
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: PUSH
62608: LD_INT 0
62610: PUSH
62611: LD_INT 1
62613: PUSH
62614: EMPTY
62615: LIST
62616: LIST
62617: PUSH
62618: LD_INT 1
62620: NEG
62621: PUSH
62622: LD_INT 0
62624: PUSH
62625: EMPTY
62626: LIST
62627: LIST
62628: PUSH
62629: LD_INT 1
62631: NEG
62632: PUSH
62633: LD_INT 1
62635: NEG
62636: PUSH
62637: EMPTY
62638: LIST
62639: LIST
62640: PUSH
62641: LD_INT 1
62643: NEG
62644: PUSH
62645: LD_INT 2
62647: NEG
62648: PUSH
62649: EMPTY
62650: LIST
62651: LIST
62652: PUSH
62653: LD_INT 1
62655: PUSH
62656: LD_INT 2
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: PUSH
62663: EMPTY
62664: LIST
62665: LIST
62666: LIST
62667: LIST
62668: LIST
62669: LIST
62670: LIST
62671: LIST
62672: LIST
62673: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62674: LD_ADDR_VAR 0 40
62678: PUSH
62679: LD_INT 0
62681: PUSH
62682: LD_INT 0
62684: PUSH
62685: EMPTY
62686: LIST
62687: LIST
62688: PUSH
62689: LD_INT 0
62691: PUSH
62692: LD_INT 1
62694: NEG
62695: PUSH
62696: EMPTY
62697: LIST
62698: LIST
62699: PUSH
62700: LD_INT 1
62702: PUSH
62703: LD_INT 0
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: PUSH
62710: LD_INT 1
62712: PUSH
62713: LD_INT 1
62715: PUSH
62716: EMPTY
62717: LIST
62718: LIST
62719: PUSH
62720: LD_INT 0
62722: PUSH
62723: LD_INT 1
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: PUSH
62730: LD_INT 1
62732: NEG
62733: PUSH
62734: LD_INT 0
62736: PUSH
62737: EMPTY
62738: LIST
62739: LIST
62740: PUSH
62741: LD_INT 1
62743: NEG
62744: PUSH
62745: LD_INT 1
62747: NEG
62748: PUSH
62749: EMPTY
62750: LIST
62751: LIST
62752: PUSH
62753: LD_INT 1
62755: PUSH
62756: LD_INT 1
62758: NEG
62759: PUSH
62760: EMPTY
62761: LIST
62762: LIST
62763: PUSH
62764: LD_INT 1
62766: NEG
62767: PUSH
62768: LD_INT 1
62770: PUSH
62771: EMPTY
62772: LIST
62773: LIST
62774: PUSH
62775: EMPTY
62776: LIST
62777: LIST
62778: LIST
62779: LIST
62780: LIST
62781: LIST
62782: LIST
62783: LIST
62784: LIST
62785: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62786: LD_ADDR_VAR 0 41
62790: PUSH
62791: LD_INT 0
62793: PUSH
62794: LD_INT 0
62796: PUSH
62797: EMPTY
62798: LIST
62799: LIST
62800: PUSH
62801: LD_INT 0
62803: PUSH
62804: LD_INT 1
62806: NEG
62807: PUSH
62808: EMPTY
62809: LIST
62810: LIST
62811: PUSH
62812: LD_INT 1
62814: PUSH
62815: LD_INT 0
62817: PUSH
62818: EMPTY
62819: LIST
62820: LIST
62821: PUSH
62822: LD_INT 1
62824: PUSH
62825: LD_INT 1
62827: PUSH
62828: EMPTY
62829: LIST
62830: LIST
62831: PUSH
62832: LD_INT 0
62834: PUSH
62835: LD_INT 1
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: PUSH
62842: LD_INT 1
62844: NEG
62845: PUSH
62846: LD_INT 0
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: PUSH
62853: LD_INT 1
62855: NEG
62856: PUSH
62857: LD_INT 1
62859: NEG
62860: PUSH
62861: EMPTY
62862: LIST
62863: LIST
62864: PUSH
62865: LD_INT 1
62867: NEG
62868: PUSH
62869: LD_INT 2
62871: NEG
62872: PUSH
62873: EMPTY
62874: LIST
62875: LIST
62876: PUSH
62877: LD_INT 1
62879: PUSH
62880: LD_INT 1
62882: NEG
62883: PUSH
62884: EMPTY
62885: LIST
62886: LIST
62887: PUSH
62888: LD_INT 2
62890: PUSH
62891: LD_INT 0
62893: PUSH
62894: EMPTY
62895: LIST
62896: LIST
62897: PUSH
62898: LD_INT 2
62900: PUSH
62901: LD_INT 1
62903: PUSH
62904: EMPTY
62905: LIST
62906: LIST
62907: PUSH
62908: LD_INT 2
62910: PUSH
62911: LD_INT 2
62913: PUSH
62914: EMPTY
62915: LIST
62916: LIST
62917: PUSH
62918: LD_INT 1
62920: PUSH
62921: LD_INT 2
62923: PUSH
62924: EMPTY
62925: LIST
62926: LIST
62927: PUSH
62928: LD_INT 1
62930: NEG
62931: PUSH
62932: LD_INT 1
62934: PUSH
62935: EMPTY
62936: LIST
62937: LIST
62938: PUSH
62939: LD_INT 2
62941: NEG
62942: PUSH
62943: LD_INT 0
62945: PUSH
62946: EMPTY
62947: LIST
62948: LIST
62949: PUSH
62950: LD_INT 2
62952: NEG
62953: PUSH
62954: LD_INT 1
62956: NEG
62957: PUSH
62958: EMPTY
62959: LIST
62960: LIST
62961: PUSH
62962: LD_INT 2
62964: NEG
62965: PUSH
62966: LD_INT 2
62968: NEG
62969: PUSH
62970: EMPTY
62971: LIST
62972: LIST
62973: PUSH
62974: LD_INT 2
62976: NEG
62977: PUSH
62978: LD_INT 3
62980: NEG
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PUSH
62986: LD_INT 2
62988: PUSH
62989: LD_INT 1
62991: NEG
62992: PUSH
62993: EMPTY
62994: LIST
62995: LIST
62996: PUSH
62997: LD_INT 3
62999: PUSH
63000: LD_INT 0
63002: PUSH
63003: EMPTY
63004: LIST
63005: LIST
63006: PUSH
63007: LD_INT 3
63009: PUSH
63010: LD_INT 1
63012: PUSH
63013: EMPTY
63014: LIST
63015: LIST
63016: PUSH
63017: LD_INT 3
63019: PUSH
63020: LD_INT 2
63022: PUSH
63023: EMPTY
63024: LIST
63025: LIST
63026: PUSH
63027: LD_INT 3
63029: PUSH
63030: LD_INT 3
63032: PUSH
63033: EMPTY
63034: LIST
63035: LIST
63036: PUSH
63037: LD_INT 2
63039: PUSH
63040: LD_INT 3
63042: PUSH
63043: EMPTY
63044: LIST
63045: LIST
63046: PUSH
63047: LD_INT 2
63049: NEG
63050: PUSH
63051: LD_INT 1
63053: PUSH
63054: EMPTY
63055: LIST
63056: LIST
63057: PUSH
63058: LD_INT 3
63060: NEG
63061: PUSH
63062: LD_INT 0
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: PUSH
63069: LD_INT 3
63071: NEG
63072: PUSH
63073: LD_INT 1
63075: NEG
63076: PUSH
63077: EMPTY
63078: LIST
63079: LIST
63080: PUSH
63081: LD_INT 3
63083: NEG
63084: PUSH
63085: LD_INT 2
63087: NEG
63088: PUSH
63089: EMPTY
63090: LIST
63091: LIST
63092: PUSH
63093: LD_INT 3
63095: NEG
63096: PUSH
63097: LD_INT 3
63099: NEG
63100: PUSH
63101: EMPTY
63102: LIST
63103: LIST
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: LIST
63109: LIST
63110: LIST
63111: LIST
63112: LIST
63113: LIST
63114: LIST
63115: LIST
63116: LIST
63117: LIST
63118: LIST
63119: LIST
63120: LIST
63121: LIST
63122: LIST
63123: LIST
63124: LIST
63125: LIST
63126: LIST
63127: LIST
63128: LIST
63129: LIST
63130: LIST
63131: LIST
63132: LIST
63133: LIST
63134: LIST
63135: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63136: LD_ADDR_VAR 0 42
63140: PUSH
63141: LD_INT 0
63143: PUSH
63144: LD_INT 0
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: PUSH
63151: LD_INT 0
63153: PUSH
63154: LD_INT 1
63156: NEG
63157: PUSH
63158: EMPTY
63159: LIST
63160: LIST
63161: PUSH
63162: LD_INT 1
63164: PUSH
63165: LD_INT 0
63167: PUSH
63168: EMPTY
63169: LIST
63170: LIST
63171: PUSH
63172: LD_INT 1
63174: PUSH
63175: LD_INT 1
63177: PUSH
63178: EMPTY
63179: LIST
63180: LIST
63181: PUSH
63182: LD_INT 0
63184: PUSH
63185: LD_INT 1
63187: PUSH
63188: EMPTY
63189: LIST
63190: LIST
63191: PUSH
63192: LD_INT 1
63194: NEG
63195: PUSH
63196: LD_INT 0
63198: PUSH
63199: EMPTY
63200: LIST
63201: LIST
63202: PUSH
63203: LD_INT 1
63205: NEG
63206: PUSH
63207: LD_INT 1
63209: NEG
63210: PUSH
63211: EMPTY
63212: LIST
63213: LIST
63214: PUSH
63215: LD_INT 1
63217: NEG
63218: PUSH
63219: LD_INT 2
63221: NEG
63222: PUSH
63223: EMPTY
63224: LIST
63225: LIST
63226: PUSH
63227: LD_INT 0
63229: PUSH
63230: LD_INT 2
63232: NEG
63233: PUSH
63234: EMPTY
63235: LIST
63236: LIST
63237: PUSH
63238: LD_INT 1
63240: PUSH
63241: LD_INT 1
63243: NEG
63244: PUSH
63245: EMPTY
63246: LIST
63247: LIST
63248: PUSH
63249: LD_INT 2
63251: PUSH
63252: LD_INT 1
63254: PUSH
63255: EMPTY
63256: LIST
63257: LIST
63258: PUSH
63259: LD_INT 2
63261: PUSH
63262: LD_INT 2
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: PUSH
63269: LD_INT 1
63271: PUSH
63272: LD_INT 2
63274: PUSH
63275: EMPTY
63276: LIST
63277: LIST
63278: PUSH
63279: LD_INT 0
63281: PUSH
63282: LD_INT 2
63284: PUSH
63285: EMPTY
63286: LIST
63287: LIST
63288: PUSH
63289: LD_INT 1
63291: NEG
63292: PUSH
63293: LD_INT 1
63295: PUSH
63296: EMPTY
63297: LIST
63298: LIST
63299: PUSH
63300: LD_INT 2
63302: NEG
63303: PUSH
63304: LD_INT 1
63306: NEG
63307: PUSH
63308: EMPTY
63309: LIST
63310: LIST
63311: PUSH
63312: LD_INT 2
63314: NEG
63315: PUSH
63316: LD_INT 2
63318: NEG
63319: PUSH
63320: EMPTY
63321: LIST
63322: LIST
63323: PUSH
63324: LD_INT 2
63326: NEG
63327: PUSH
63328: LD_INT 3
63330: NEG
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: PUSH
63336: LD_INT 1
63338: NEG
63339: PUSH
63340: LD_INT 3
63342: NEG
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: PUSH
63348: LD_INT 0
63350: PUSH
63351: LD_INT 3
63353: NEG
63354: PUSH
63355: EMPTY
63356: LIST
63357: LIST
63358: PUSH
63359: LD_INT 1
63361: PUSH
63362: LD_INT 2
63364: NEG
63365: PUSH
63366: EMPTY
63367: LIST
63368: LIST
63369: PUSH
63370: LD_INT 3
63372: PUSH
63373: LD_INT 2
63375: PUSH
63376: EMPTY
63377: LIST
63378: LIST
63379: PUSH
63380: LD_INT 3
63382: PUSH
63383: LD_INT 3
63385: PUSH
63386: EMPTY
63387: LIST
63388: LIST
63389: PUSH
63390: LD_INT 2
63392: PUSH
63393: LD_INT 3
63395: PUSH
63396: EMPTY
63397: LIST
63398: LIST
63399: PUSH
63400: LD_INT 1
63402: PUSH
63403: LD_INT 3
63405: PUSH
63406: EMPTY
63407: LIST
63408: LIST
63409: PUSH
63410: LD_INT 0
63412: PUSH
63413: LD_INT 3
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: PUSH
63420: LD_INT 1
63422: NEG
63423: PUSH
63424: LD_INT 2
63426: PUSH
63427: EMPTY
63428: LIST
63429: LIST
63430: PUSH
63431: LD_INT 3
63433: NEG
63434: PUSH
63435: LD_INT 2
63437: NEG
63438: PUSH
63439: EMPTY
63440: LIST
63441: LIST
63442: PUSH
63443: LD_INT 3
63445: NEG
63446: PUSH
63447: LD_INT 3
63449: NEG
63450: PUSH
63451: EMPTY
63452: LIST
63453: LIST
63454: PUSH
63455: EMPTY
63456: LIST
63457: LIST
63458: LIST
63459: LIST
63460: LIST
63461: LIST
63462: LIST
63463: LIST
63464: LIST
63465: LIST
63466: LIST
63467: LIST
63468: LIST
63469: LIST
63470: LIST
63471: LIST
63472: LIST
63473: LIST
63474: LIST
63475: LIST
63476: LIST
63477: LIST
63478: LIST
63479: LIST
63480: LIST
63481: LIST
63482: LIST
63483: LIST
63484: LIST
63485: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63486: LD_ADDR_VAR 0 43
63490: PUSH
63491: LD_INT 0
63493: PUSH
63494: LD_INT 0
63496: PUSH
63497: EMPTY
63498: LIST
63499: LIST
63500: PUSH
63501: LD_INT 0
63503: PUSH
63504: LD_INT 1
63506: NEG
63507: PUSH
63508: EMPTY
63509: LIST
63510: LIST
63511: PUSH
63512: LD_INT 1
63514: PUSH
63515: LD_INT 0
63517: PUSH
63518: EMPTY
63519: LIST
63520: LIST
63521: PUSH
63522: LD_INT 1
63524: PUSH
63525: LD_INT 1
63527: PUSH
63528: EMPTY
63529: LIST
63530: LIST
63531: PUSH
63532: LD_INT 0
63534: PUSH
63535: LD_INT 1
63537: PUSH
63538: EMPTY
63539: LIST
63540: LIST
63541: PUSH
63542: LD_INT 1
63544: NEG
63545: PUSH
63546: LD_INT 0
63548: PUSH
63549: EMPTY
63550: LIST
63551: LIST
63552: PUSH
63553: LD_INT 1
63555: NEG
63556: PUSH
63557: LD_INT 1
63559: NEG
63560: PUSH
63561: EMPTY
63562: LIST
63563: LIST
63564: PUSH
63565: LD_INT 1
63567: NEG
63568: PUSH
63569: LD_INT 2
63571: NEG
63572: PUSH
63573: EMPTY
63574: LIST
63575: LIST
63576: PUSH
63577: LD_INT 0
63579: PUSH
63580: LD_INT 2
63582: NEG
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: PUSH
63588: LD_INT 1
63590: PUSH
63591: LD_INT 1
63593: NEG
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: PUSH
63599: LD_INT 2
63601: PUSH
63602: LD_INT 0
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: PUSH
63609: LD_INT 2
63611: PUSH
63612: LD_INT 1
63614: PUSH
63615: EMPTY
63616: LIST
63617: LIST
63618: PUSH
63619: LD_INT 1
63621: PUSH
63622: LD_INT 2
63624: PUSH
63625: EMPTY
63626: LIST
63627: LIST
63628: PUSH
63629: LD_INT 0
63631: PUSH
63632: LD_INT 2
63634: PUSH
63635: EMPTY
63636: LIST
63637: LIST
63638: PUSH
63639: LD_INT 1
63641: NEG
63642: PUSH
63643: LD_INT 1
63645: PUSH
63646: EMPTY
63647: LIST
63648: LIST
63649: PUSH
63650: LD_INT 2
63652: NEG
63653: PUSH
63654: LD_INT 0
63656: PUSH
63657: EMPTY
63658: LIST
63659: LIST
63660: PUSH
63661: LD_INT 2
63663: NEG
63664: PUSH
63665: LD_INT 1
63667: NEG
63668: PUSH
63669: EMPTY
63670: LIST
63671: LIST
63672: PUSH
63673: LD_INT 1
63675: NEG
63676: PUSH
63677: LD_INT 3
63679: NEG
63680: PUSH
63681: EMPTY
63682: LIST
63683: LIST
63684: PUSH
63685: LD_INT 0
63687: PUSH
63688: LD_INT 3
63690: NEG
63691: PUSH
63692: EMPTY
63693: LIST
63694: LIST
63695: PUSH
63696: LD_INT 1
63698: PUSH
63699: LD_INT 2
63701: NEG
63702: PUSH
63703: EMPTY
63704: LIST
63705: LIST
63706: PUSH
63707: LD_INT 2
63709: PUSH
63710: LD_INT 1
63712: NEG
63713: PUSH
63714: EMPTY
63715: LIST
63716: LIST
63717: PUSH
63718: LD_INT 3
63720: PUSH
63721: LD_INT 0
63723: PUSH
63724: EMPTY
63725: LIST
63726: LIST
63727: PUSH
63728: LD_INT 3
63730: PUSH
63731: LD_INT 1
63733: PUSH
63734: EMPTY
63735: LIST
63736: LIST
63737: PUSH
63738: LD_INT 1
63740: PUSH
63741: LD_INT 3
63743: PUSH
63744: EMPTY
63745: LIST
63746: LIST
63747: PUSH
63748: LD_INT 0
63750: PUSH
63751: LD_INT 3
63753: PUSH
63754: EMPTY
63755: LIST
63756: LIST
63757: PUSH
63758: LD_INT 1
63760: NEG
63761: PUSH
63762: LD_INT 2
63764: PUSH
63765: EMPTY
63766: LIST
63767: LIST
63768: PUSH
63769: LD_INT 2
63771: NEG
63772: PUSH
63773: LD_INT 1
63775: PUSH
63776: EMPTY
63777: LIST
63778: LIST
63779: PUSH
63780: LD_INT 3
63782: NEG
63783: PUSH
63784: LD_INT 0
63786: PUSH
63787: EMPTY
63788: LIST
63789: LIST
63790: PUSH
63791: LD_INT 3
63793: NEG
63794: PUSH
63795: LD_INT 1
63797: NEG
63798: PUSH
63799: EMPTY
63800: LIST
63801: LIST
63802: PUSH
63803: EMPTY
63804: LIST
63805: LIST
63806: LIST
63807: LIST
63808: LIST
63809: LIST
63810: LIST
63811: LIST
63812: LIST
63813: LIST
63814: LIST
63815: LIST
63816: LIST
63817: LIST
63818: LIST
63819: LIST
63820: LIST
63821: LIST
63822: LIST
63823: LIST
63824: LIST
63825: LIST
63826: LIST
63827: LIST
63828: LIST
63829: LIST
63830: LIST
63831: LIST
63832: LIST
63833: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63834: LD_ADDR_VAR 0 44
63838: PUSH
63839: LD_INT 0
63841: PUSH
63842: LD_INT 0
63844: PUSH
63845: EMPTY
63846: LIST
63847: LIST
63848: PUSH
63849: LD_INT 0
63851: PUSH
63852: LD_INT 1
63854: NEG
63855: PUSH
63856: EMPTY
63857: LIST
63858: LIST
63859: PUSH
63860: LD_INT 1
63862: PUSH
63863: LD_INT 0
63865: PUSH
63866: EMPTY
63867: LIST
63868: LIST
63869: PUSH
63870: LD_INT 1
63872: PUSH
63873: LD_INT 1
63875: PUSH
63876: EMPTY
63877: LIST
63878: LIST
63879: PUSH
63880: LD_INT 0
63882: PUSH
63883: LD_INT 1
63885: PUSH
63886: EMPTY
63887: LIST
63888: LIST
63889: PUSH
63890: LD_INT 1
63892: NEG
63893: PUSH
63894: LD_INT 0
63896: PUSH
63897: EMPTY
63898: LIST
63899: LIST
63900: PUSH
63901: LD_INT 1
63903: NEG
63904: PUSH
63905: LD_INT 1
63907: NEG
63908: PUSH
63909: EMPTY
63910: LIST
63911: LIST
63912: PUSH
63913: LD_INT 1
63915: NEG
63916: PUSH
63917: LD_INT 2
63919: NEG
63920: PUSH
63921: EMPTY
63922: LIST
63923: LIST
63924: PUSH
63925: LD_INT 1
63927: PUSH
63928: LD_INT 1
63930: NEG
63931: PUSH
63932: EMPTY
63933: LIST
63934: LIST
63935: PUSH
63936: LD_INT 2
63938: PUSH
63939: LD_INT 0
63941: PUSH
63942: EMPTY
63943: LIST
63944: LIST
63945: PUSH
63946: LD_INT 2
63948: PUSH
63949: LD_INT 1
63951: PUSH
63952: EMPTY
63953: LIST
63954: LIST
63955: PUSH
63956: LD_INT 2
63958: PUSH
63959: LD_INT 2
63961: PUSH
63962: EMPTY
63963: LIST
63964: LIST
63965: PUSH
63966: LD_INT 1
63968: PUSH
63969: LD_INT 2
63971: PUSH
63972: EMPTY
63973: LIST
63974: LIST
63975: PUSH
63976: LD_INT 1
63978: NEG
63979: PUSH
63980: LD_INT 1
63982: PUSH
63983: EMPTY
63984: LIST
63985: LIST
63986: PUSH
63987: LD_INT 2
63989: NEG
63990: PUSH
63991: LD_INT 0
63993: PUSH
63994: EMPTY
63995: LIST
63996: LIST
63997: PUSH
63998: LD_INT 2
64000: NEG
64001: PUSH
64002: LD_INT 1
64004: NEG
64005: PUSH
64006: EMPTY
64007: LIST
64008: LIST
64009: PUSH
64010: LD_INT 2
64012: NEG
64013: PUSH
64014: LD_INT 2
64016: NEG
64017: PUSH
64018: EMPTY
64019: LIST
64020: LIST
64021: PUSH
64022: LD_INT 2
64024: NEG
64025: PUSH
64026: LD_INT 3
64028: NEG
64029: PUSH
64030: EMPTY
64031: LIST
64032: LIST
64033: PUSH
64034: LD_INT 2
64036: PUSH
64037: LD_INT 1
64039: NEG
64040: PUSH
64041: EMPTY
64042: LIST
64043: LIST
64044: PUSH
64045: LD_INT 3
64047: PUSH
64048: LD_INT 0
64050: PUSH
64051: EMPTY
64052: LIST
64053: LIST
64054: PUSH
64055: LD_INT 3
64057: PUSH
64058: LD_INT 1
64060: PUSH
64061: EMPTY
64062: LIST
64063: LIST
64064: PUSH
64065: LD_INT 3
64067: PUSH
64068: LD_INT 2
64070: PUSH
64071: EMPTY
64072: LIST
64073: LIST
64074: PUSH
64075: LD_INT 3
64077: PUSH
64078: LD_INT 3
64080: PUSH
64081: EMPTY
64082: LIST
64083: LIST
64084: PUSH
64085: LD_INT 2
64087: PUSH
64088: LD_INT 3
64090: PUSH
64091: EMPTY
64092: LIST
64093: LIST
64094: PUSH
64095: LD_INT 2
64097: NEG
64098: PUSH
64099: LD_INT 1
64101: PUSH
64102: EMPTY
64103: LIST
64104: LIST
64105: PUSH
64106: LD_INT 3
64108: NEG
64109: PUSH
64110: LD_INT 0
64112: PUSH
64113: EMPTY
64114: LIST
64115: LIST
64116: PUSH
64117: LD_INT 3
64119: NEG
64120: PUSH
64121: LD_INT 1
64123: NEG
64124: PUSH
64125: EMPTY
64126: LIST
64127: LIST
64128: PUSH
64129: LD_INT 3
64131: NEG
64132: PUSH
64133: LD_INT 2
64135: NEG
64136: PUSH
64137: EMPTY
64138: LIST
64139: LIST
64140: PUSH
64141: LD_INT 3
64143: NEG
64144: PUSH
64145: LD_INT 3
64147: NEG
64148: PUSH
64149: EMPTY
64150: LIST
64151: LIST
64152: PUSH
64153: EMPTY
64154: LIST
64155: LIST
64156: LIST
64157: LIST
64158: LIST
64159: LIST
64160: LIST
64161: LIST
64162: LIST
64163: LIST
64164: LIST
64165: LIST
64166: LIST
64167: LIST
64168: LIST
64169: LIST
64170: LIST
64171: LIST
64172: LIST
64173: LIST
64174: LIST
64175: LIST
64176: LIST
64177: LIST
64178: LIST
64179: LIST
64180: LIST
64181: LIST
64182: LIST
64183: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64184: LD_ADDR_VAR 0 45
64188: PUSH
64189: LD_INT 0
64191: PUSH
64192: LD_INT 0
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: PUSH
64199: LD_INT 0
64201: PUSH
64202: LD_INT 1
64204: NEG
64205: PUSH
64206: EMPTY
64207: LIST
64208: LIST
64209: PUSH
64210: LD_INT 1
64212: PUSH
64213: LD_INT 0
64215: PUSH
64216: EMPTY
64217: LIST
64218: LIST
64219: PUSH
64220: LD_INT 1
64222: PUSH
64223: LD_INT 1
64225: PUSH
64226: EMPTY
64227: LIST
64228: LIST
64229: PUSH
64230: LD_INT 0
64232: PUSH
64233: LD_INT 1
64235: PUSH
64236: EMPTY
64237: LIST
64238: LIST
64239: PUSH
64240: LD_INT 1
64242: NEG
64243: PUSH
64244: LD_INT 0
64246: PUSH
64247: EMPTY
64248: LIST
64249: LIST
64250: PUSH
64251: LD_INT 1
64253: NEG
64254: PUSH
64255: LD_INT 1
64257: NEG
64258: PUSH
64259: EMPTY
64260: LIST
64261: LIST
64262: PUSH
64263: LD_INT 1
64265: NEG
64266: PUSH
64267: LD_INT 2
64269: NEG
64270: PUSH
64271: EMPTY
64272: LIST
64273: LIST
64274: PUSH
64275: LD_INT 0
64277: PUSH
64278: LD_INT 2
64280: NEG
64281: PUSH
64282: EMPTY
64283: LIST
64284: LIST
64285: PUSH
64286: LD_INT 1
64288: PUSH
64289: LD_INT 1
64291: NEG
64292: PUSH
64293: EMPTY
64294: LIST
64295: LIST
64296: PUSH
64297: LD_INT 2
64299: PUSH
64300: LD_INT 1
64302: PUSH
64303: EMPTY
64304: LIST
64305: LIST
64306: PUSH
64307: LD_INT 2
64309: PUSH
64310: LD_INT 2
64312: PUSH
64313: EMPTY
64314: LIST
64315: LIST
64316: PUSH
64317: LD_INT 1
64319: PUSH
64320: LD_INT 2
64322: PUSH
64323: EMPTY
64324: LIST
64325: LIST
64326: PUSH
64327: LD_INT 0
64329: PUSH
64330: LD_INT 2
64332: PUSH
64333: EMPTY
64334: LIST
64335: LIST
64336: PUSH
64337: LD_INT 1
64339: NEG
64340: PUSH
64341: LD_INT 1
64343: PUSH
64344: EMPTY
64345: LIST
64346: LIST
64347: PUSH
64348: LD_INT 2
64350: NEG
64351: PUSH
64352: LD_INT 1
64354: NEG
64355: PUSH
64356: EMPTY
64357: LIST
64358: LIST
64359: PUSH
64360: LD_INT 2
64362: NEG
64363: PUSH
64364: LD_INT 2
64366: NEG
64367: PUSH
64368: EMPTY
64369: LIST
64370: LIST
64371: PUSH
64372: LD_INT 2
64374: NEG
64375: PUSH
64376: LD_INT 3
64378: NEG
64379: PUSH
64380: EMPTY
64381: LIST
64382: LIST
64383: PUSH
64384: LD_INT 1
64386: NEG
64387: PUSH
64388: LD_INT 3
64390: NEG
64391: PUSH
64392: EMPTY
64393: LIST
64394: LIST
64395: PUSH
64396: LD_INT 0
64398: PUSH
64399: LD_INT 3
64401: NEG
64402: PUSH
64403: EMPTY
64404: LIST
64405: LIST
64406: PUSH
64407: LD_INT 1
64409: PUSH
64410: LD_INT 2
64412: NEG
64413: PUSH
64414: EMPTY
64415: LIST
64416: LIST
64417: PUSH
64418: LD_INT 3
64420: PUSH
64421: LD_INT 2
64423: PUSH
64424: EMPTY
64425: LIST
64426: LIST
64427: PUSH
64428: LD_INT 3
64430: PUSH
64431: LD_INT 3
64433: PUSH
64434: EMPTY
64435: LIST
64436: LIST
64437: PUSH
64438: LD_INT 2
64440: PUSH
64441: LD_INT 3
64443: PUSH
64444: EMPTY
64445: LIST
64446: LIST
64447: PUSH
64448: LD_INT 1
64450: PUSH
64451: LD_INT 3
64453: PUSH
64454: EMPTY
64455: LIST
64456: LIST
64457: PUSH
64458: LD_INT 0
64460: PUSH
64461: LD_INT 3
64463: PUSH
64464: EMPTY
64465: LIST
64466: LIST
64467: PUSH
64468: LD_INT 1
64470: NEG
64471: PUSH
64472: LD_INT 2
64474: PUSH
64475: EMPTY
64476: LIST
64477: LIST
64478: PUSH
64479: LD_INT 3
64481: NEG
64482: PUSH
64483: LD_INT 2
64485: NEG
64486: PUSH
64487: EMPTY
64488: LIST
64489: LIST
64490: PUSH
64491: LD_INT 3
64493: NEG
64494: PUSH
64495: LD_INT 3
64497: NEG
64498: PUSH
64499: EMPTY
64500: LIST
64501: LIST
64502: PUSH
64503: EMPTY
64504: LIST
64505: LIST
64506: LIST
64507: LIST
64508: LIST
64509: LIST
64510: LIST
64511: LIST
64512: LIST
64513: LIST
64514: LIST
64515: LIST
64516: LIST
64517: LIST
64518: LIST
64519: LIST
64520: LIST
64521: LIST
64522: LIST
64523: LIST
64524: LIST
64525: LIST
64526: LIST
64527: LIST
64528: LIST
64529: LIST
64530: LIST
64531: LIST
64532: LIST
64533: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64534: LD_ADDR_VAR 0 46
64538: PUSH
64539: LD_INT 0
64541: PUSH
64542: LD_INT 0
64544: PUSH
64545: EMPTY
64546: LIST
64547: LIST
64548: PUSH
64549: LD_INT 0
64551: PUSH
64552: LD_INT 1
64554: NEG
64555: PUSH
64556: EMPTY
64557: LIST
64558: LIST
64559: PUSH
64560: LD_INT 1
64562: PUSH
64563: LD_INT 0
64565: PUSH
64566: EMPTY
64567: LIST
64568: LIST
64569: PUSH
64570: LD_INT 1
64572: PUSH
64573: LD_INT 1
64575: PUSH
64576: EMPTY
64577: LIST
64578: LIST
64579: PUSH
64580: LD_INT 0
64582: PUSH
64583: LD_INT 1
64585: PUSH
64586: EMPTY
64587: LIST
64588: LIST
64589: PUSH
64590: LD_INT 1
64592: NEG
64593: PUSH
64594: LD_INT 0
64596: PUSH
64597: EMPTY
64598: LIST
64599: LIST
64600: PUSH
64601: LD_INT 1
64603: NEG
64604: PUSH
64605: LD_INT 1
64607: NEG
64608: PUSH
64609: EMPTY
64610: LIST
64611: LIST
64612: PUSH
64613: LD_INT 1
64615: NEG
64616: PUSH
64617: LD_INT 2
64619: NEG
64620: PUSH
64621: EMPTY
64622: LIST
64623: LIST
64624: PUSH
64625: LD_INT 0
64627: PUSH
64628: LD_INT 2
64630: NEG
64631: PUSH
64632: EMPTY
64633: LIST
64634: LIST
64635: PUSH
64636: LD_INT 1
64638: PUSH
64639: LD_INT 1
64641: NEG
64642: PUSH
64643: EMPTY
64644: LIST
64645: LIST
64646: PUSH
64647: LD_INT 2
64649: PUSH
64650: LD_INT 0
64652: PUSH
64653: EMPTY
64654: LIST
64655: LIST
64656: PUSH
64657: LD_INT 2
64659: PUSH
64660: LD_INT 1
64662: PUSH
64663: EMPTY
64664: LIST
64665: LIST
64666: PUSH
64667: LD_INT 1
64669: PUSH
64670: LD_INT 2
64672: PUSH
64673: EMPTY
64674: LIST
64675: LIST
64676: PUSH
64677: LD_INT 0
64679: PUSH
64680: LD_INT 2
64682: PUSH
64683: EMPTY
64684: LIST
64685: LIST
64686: PUSH
64687: LD_INT 1
64689: NEG
64690: PUSH
64691: LD_INT 1
64693: PUSH
64694: EMPTY
64695: LIST
64696: LIST
64697: PUSH
64698: LD_INT 2
64700: NEG
64701: PUSH
64702: LD_INT 0
64704: PUSH
64705: EMPTY
64706: LIST
64707: LIST
64708: PUSH
64709: LD_INT 2
64711: NEG
64712: PUSH
64713: LD_INT 1
64715: NEG
64716: PUSH
64717: EMPTY
64718: LIST
64719: LIST
64720: PUSH
64721: LD_INT 1
64723: NEG
64724: PUSH
64725: LD_INT 3
64727: NEG
64728: PUSH
64729: EMPTY
64730: LIST
64731: LIST
64732: PUSH
64733: LD_INT 0
64735: PUSH
64736: LD_INT 3
64738: NEG
64739: PUSH
64740: EMPTY
64741: LIST
64742: LIST
64743: PUSH
64744: LD_INT 1
64746: PUSH
64747: LD_INT 2
64749: NEG
64750: PUSH
64751: EMPTY
64752: LIST
64753: LIST
64754: PUSH
64755: LD_INT 2
64757: PUSH
64758: LD_INT 1
64760: NEG
64761: PUSH
64762: EMPTY
64763: LIST
64764: LIST
64765: PUSH
64766: LD_INT 3
64768: PUSH
64769: LD_INT 0
64771: PUSH
64772: EMPTY
64773: LIST
64774: LIST
64775: PUSH
64776: LD_INT 3
64778: PUSH
64779: LD_INT 1
64781: PUSH
64782: EMPTY
64783: LIST
64784: LIST
64785: PUSH
64786: LD_INT 1
64788: PUSH
64789: LD_INT 3
64791: PUSH
64792: EMPTY
64793: LIST
64794: LIST
64795: PUSH
64796: LD_INT 0
64798: PUSH
64799: LD_INT 3
64801: PUSH
64802: EMPTY
64803: LIST
64804: LIST
64805: PUSH
64806: LD_INT 1
64808: NEG
64809: PUSH
64810: LD_INT 2
64812: PUSH
64813: EMPTY
64814: LIST
64815: LIST
64816: PUSH
64817: LD_INT 2
64819: NEG
64820: PUSH
64821: LD_INT 1
64823: PUSH
64824: EMPTY
64825: LIST
64826: LIST
64827: PUSH
64828: LD_INT 3
64830: NEG
64831: PUSH
64832: LD_INT 0
64834: PUSH
64835: EMPTY
64836: LIST
64837: LIST
64838: PUSH
64839: LD_INT 3
64841: NEG
64842: PUSH
64843: LD_INT 1
64845: NEG
64846: PUSH
64847: EMPTY
64848: LIST
64849: LIST
64850: PUSH
64851: EMPTY
64852: LIST
64853: LIST
64854: LIST
64855: LIST
64856: LIST
64857: LIST
64858: LIST
64859: LIST
64860: LIST
64861: LIST
64862: LIST
64863: LIST
64864: LIST
64865: LIST
64866: LIST
64867: LIST
64868: LIST
64869: LIST
64870: LIST
64871: LIST
64872: LIST
64873: LIST
64874: LIST
64875: LIST
64876: LIST
64877: LIST
64878: LIST
64879: LIST
64880: LIST
64881: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64882: LD_ADDR_VAR 0 47
64886: PUSH
64887: LD_INT 0
64889: PUSH
64890: LD_INT 0
64892: PUSH
64893: EMPTY
64894: LIST
64895: LIST
64896: PUSH
64897: LD_INT 0
64899: PUSH
64900: LD_INT 1
64902: NEG
64903: PUSH
64904: EMPTY
64905: LIST
64906: LIST
64907: PUSH
64908: LD_INT 1
64910: PUSH
64911: LD_INT 0
64913: PUSH
64914: EMPTY
64915: LIST
64916: LIST
64917: PUSH
64918: LD_INT 1
64920: PUSH
64921: LD_INT 1
64923: PUSH
64924: EMPTY
64925: LIST
64926: LIST
64927: PUSH
64928: LD_INT 0
64930: PUSH
64931: LD_INT 1
64933: PUSH
64934: EMPTY
64935: LIST
64936: LIST
64937: PUSH
64938: LD_INT 1
64940: NEG
64941: PUSH
64942: LD_INT 0
64944: PUSH
64945: EMPTY
64946: LIST
64947: LIST
64948: PUSH
64949: LD_INT 1
64951: NEG
64952: PUSH
64953: LD_INT 1
64955: NEG
64956: PUSH
64957: EMPTY
64958: LIST
64959: LIST
64960: PUSH
64961: LD_INT 1
64963: NEG
64964: PUSH
64965: LD_INT 2
64967: NEG
64968: PUSH
64969: EMPTY
64970: LIST
64971: LIST
64972: PUSH
64973: LD_INT 0
64975: PUSH
64976: LD_INT 2
64978: NEG
64979: PUSH
64980: EMPTY
64981: LIST
64982: LIST
64983: PUSH
64984: LD_INT 1
64986: PUSH
64987: LD_INT 1
64989: NEG
64990: PUSH
64991: EMPTY
64992: LIST
64993: LIST
64994: PUSH
64995: LD_INT 2
64997: NEG
64998: PUSH
64999: LD_INT 1
65001: NEG
65002: PUSH
65003: EMPTY
65004: LIST
65005: LIST
65006: PUSH
65007: LD_INT 2
65009: NEG
65010: PUSH
65011: LD_INT 2
65013: NEG
65014: PUSH
65015: EMPTY
65016: LIST
65017: LIST
65018: PUSH
65019: EMPTY
65020: LIST
65021: LIST
65022: LIST
65023: LIST
65024: LIST
65025: LIST
65026: LIST
65027: LIST
65028: LIST
65029: LIST
65030: LIST
65031: LIST
65032: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
65033: LD_ADDR_VAR 0 48
65037: PUSH
65038: LD_INT 0
65040: PUSH
65041: LD_INT 0
65043: PUSH
65044: EMPTY
65045: LIST
65046: LIST
65047: PUSH
65048: LD_INT 0
65050: PUSH
65051: LD_INT 1
65053: NEG
65054: PUSH
65055: EMPTY
65056: LIST
65057: LIST
65058: PUSH
65059: LD_INT 1
65061: PUSH
65062: LD_INT 0
65064: PUSH
65065: EMPTY
65066: LIST
65067: LIST
65068: PUSH
65069: LD_INT 1
65071: PUSH
65072: LD_INT 1
65074: PUSH
65075: EMPTY
65076: LIST
65077: LIST
65078: PUSH
65079: LD_INT 0
65081: PUSH
65082: LD_INT 1
65084: PUSH
65085: EMPTY
65086: LIST
65087: LIST
65088: PUSH
65089: LD_INT 1
65091: NEG
65092: PUSH
65093: LD_INT 0
65095: PUSH
65096: EMPTY
65097: LIST
65098: LIST
65099: PUSH
65100: LD_INT 1
65102: NEG
65103: PUSH
65104: LD_INT 1
65106: NEG
65107: PUSH
65108: EMPTY
65109: LIST
65110: LIST
65111: PUSH
65112: LD_INT 1
65114: NEG
65115: PUSH
65116: LD_INT 2
65118: NEG
65119: PUSH
65120: EMPTY
65121: LIST
65122: LIST
65123: PUSH
65124: LD_INT 0
65126: PUSH
65127: LD_INT 2
65129: NEG
65130: PUSH
65131: EMPTY
65132: LIST
65133: LIST
65134: PUSH
65135: LD_INT 1
65137: PUSH
65138: LD_INT 1
65140: NEG
65141: PUSH
65142: EMPTY
65143: LIST
65144: LIST
65145: PUSH
65146: LD_INT 2
65148: PUSH
65149: LD_INT 0
65151: PUSH
65152: EMPTY
65153: LIST
65154: LIST
65155: PUSH
65156: LD_INT 2
65158: PUSH
65159: LD_INT 1
65161: PUSH
65162: EMPTY
65163: LIST
65164: LIST
65165: PUSH
65166: EMPTY
65167: LIST
65168: LIST
65169: LIST
65170: LIST
65171: LIST
65172: LIST
65173: LIST
65174: LIST
65175: LIST
65176: LIST
65177: LIST
65178: LIST
65179: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
65180: LD_ADDR_VAR 0 49
65184: PUSH
65185: LD_INT 0
65187: PUSH
65188: LD_INT 0
65190: PUSH
65191: EMPTY
65192: LIST
65193: LIST
65194: PUSH
65195: LD_INT 0
65197: PUSH
65198: LD_INT 1
65200: NEG
65201: PUSH
65202: EMPTY
65203: LIST
65204: LIST
65205: PUSH
65206: LD_INT 1
65208: PUSH
65209: LD_INT 0
65211: PUSH
65212: EMPTY
65213: LIST
65214: LIST
65215: PUSH
65216: LD_INT 1
65218: PUSH
65219: LD_INT 1
65221: PUSH
65222: EMPTY
65223: LIST
65224: LIST
65225: PUSH
65226: LD_INT 0
65228: PUSH
65229: LD_INT 1
65231: PUSH
65232: EMPTY
65233: LIST
65234: LIST
65235: PUSH
65236: LD_INT 1
65238: NEG
65239: PUSH
65240: LD_INT 0
65242: PUSH
65243: EMPTY
65244: LIST
65245: LIST
65246: PUSH
65247: LD_INT 1
65249: NEG
65250: PUSH
65251: LD_INT 1
65253: NEG
65254: PUSH
65255: EMPTY
65256: LIST
65257: LIST
65258: PUSH
65259: LD_INT 1
65261: PUSH
65262: LD_INT 1
65264: NEG
65265: PUSH
65266: EMPTY
65267: LIST
65268: LIST
65269: PUSH
65270: LD_INT 2
65272: PUSH
65273: LD_INT 0
65275: PUSH
65276: EMPTY
65277: LIST
65278: LIST
65279: PUSH
65280: LD_INT 2
65282: PUSH
65283: LD_INT 1
65285: PUSH
65286: EMPTY
65287: LIST
65288: LIST
65289: PUSH
65290: LD_INT 2
65292: PUSH
65293: LD_INT 2
65295: PUSH
65296: EMPTY
65297: LIST
65298: LIST
65299: PUSH
65300: LD_INT 1
65302: PUSH
65303: LD_INT 2
65305: PUSH
65306: EMPTY
65307: LIST
65308: LIST
65309: PUSH
65310: EMPTY
65311: LIST
65312: LIST
65313: LIST
65314: LIST
65315: LIST
65316: LIST
65317: LIST
65318: LIST
65319: LIST
65320: LIST
65321: LIST
65322: LIST
65323: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
65324: LD_ADDR_VAR 0 50
65328: PUSH
65329: LD_INT 0
65331: PUSH
65332: LD_INT 0
65334: PUSH
65335: EMPTY
65336: LIST
65337: LIST
65338: PUSH
65339: LD_INT 0
65341: PUSH
65342: LD_INT 1
65344: NEG
65345: PUSH
65346: EMPTY
65347: LIST
65348: LIST
65349: PUSH
65350: LD_INT 1
65352: PUSH
65353: LD_INT 0
65355: PUSH
65356: EMPTY
65357: LIST
65358: LIST
65359: PUSH
65360: LD_INT 1
65362: PUSH
65363: LD_INT 1
65365: PUSH
65366: EMPTY
65367: LIST
65368: LIST
65369: PUSH
65370: LD_INT 0
65372: PUSH
65373: LD_INT 1
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: PUSH
65380: LD_INT 1
65382: NEG
65383: PUSH
65384: LD_INT 0
65386: PUSH
65387: EMPTY
65388: LIST
65389: LIST
65390: PUSH
65391: LD_INT 1
65393: NEG
65394: PUSH
65395: LD_INT 1
65397: NEG
65398: PUSH
65399: EMPTY
65400: LIST
65401: LIST
65402: PUSH
65403: LD_INT 2
65405: PUSH
65406: LD_INT 1
65408: PUSH
65409: EMPTY
65410: LIST
65411: LIST
65412: PUSH
65413: LD_INT 2
65415: PUSH
65416: LD_INT 2
65418: PUSH
65419: EMPTY
65420: LIST
65421: LIST
65422: PUSH
65423: LD_INT 1
65425: PUSH
65426: LD_INT 2
65428: PUSH
65429: EMPTY
65430: LIST
65431: LIST
65432: PUSH
65433: LD_INT 0
65435: PUSH
65436: LD_INT 2
65438: PUSH
65439: EMPTY
65440: LIST
65441: LIST
65442: PUSH
65443: LD_INT 1
65445: NEG
65446: PUSH
65447: LD_INT 1
65449: PUSH
65450: EMPTY
65451: LIST
65452: LIST
65453: PUSH
65454: EMPTY
65455: LIST
65456: LIST
65457: LIST
65458: LIST
65459: LIST
65460: LIST
65461: LIST
65462: LIST
65463: LIST
65464: LIST
65465: LIST
65466: LIST
65467: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65468: LD_ADDR_VAR 0 51
65472: PUSH
65473: LD_INT 0
65475: PUSH
65476: LD_INT 0
65478: PUSH
65479: EMPTY
65480: LIST
65481: LIST
65482: PUSH
65483: LD_INT 0
65485: PUSH
65486: LD_INT 1
65488: NEG
65489: PUSH
65490: EMPTY
65491: LIST
65492: LIST
65493: PUSH
65494: LD_INT 1
65496: PUSH
65497: LD_INT 0
65499: PUSH
65500: EMPTY
65501: LIST
65502: LIST
65503: PUSH
65504: LD_INT 1
65506: PUSH
65507: LD_INT 1
65509: PUSH
65510: EMPTY
65511: LIST
65512: LIST
65513: PUSH
65514: LD_INT 0
65516: PUSH
65517: LD_INT 1
65519: PUSH
65520: EMPTY
65521: LIST
65522: LIST
65523: PUSH
65524: LD_INT 1
65526: NEG
65527: PUSH
65528: LD_INT 0
65530: PUSH
65531: EMPTY
65532: LIST
65533: LIST
65534: PUSH
65535: LD_INT 1
65537: NEG
65538: PUSH
65539: LD_INT 1
65541: NEG
65542: PUSH
65543: EMPTY
65544: LIST
65545: LIST
65546: PUSH
65547: LD_INT 1
65549: PUSH
65550: LD_INT 2
65552: PUSH
65553: EMPTY
65554: LIST
65555: LIST
65556: PUSH
65557: LD_INT 0
65559: PUSH
65560: LD_INT 2
65562: PUSH
65563: EMPTY
65564: LIST
65565: LIST
65566: PUSH
65567: LD_INT 1
65569: NEG
65570: PUSH
65571: LD_INT 1
65573: PUSH
65574: EMPTY
65575: LIST
65576: LIST
65577: PUSH
65578: LD_INT 2
65580: NEG
65581: PUSH
65582: LD_INT 0
65584: PUSH
65585: EMPTY
65586: LIST
65587: LIST
65588: PUSH
65589: LD_INT 2
65591: NEG
65592: PUSH
65593: LD_INT 1
65595: NEG
65596: PUSH
65597: EMPTY
65598: LIST
65599: LIST
65600: PUSH
65601: EMPTY
65602: LIST
65603: LIST
65604: LIST
65605: LIST
65606: LIST
65607: LIST
65608: LIST
65609: LIST
65610: LIST
65611: LIST
65612: LIST
65613: LIST
65614: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65615: LD_ADDR_VAR 0 52
65619: PUSH
65620: LD_INT 0
65622: PUSH
65623: LD_INT 0
65625: PUSH
65626: EMPTY
65627: LIST
65628: LIST
65629: PUSH
65630: LD_INT 0
65632: PUSH
65633: LD_INT 1
65635: NEG
65636: PUSH
65637: EMPTY
65638: LIST
65639: LIST
65640: PUSH
65641: LD_INT 1
65643: PUSH
65644: LD_INT 0
65646: PUSH
65647: EMPTY
65648: LIST
65649: LIST
65650: PUSH
65651: LD_INT 1
65653: PUSH
65654: LD_INT 1
65656: PUSH
65657: EMPTY
65658: LIST
65659: LIST
65660: PUSH
65661: LD_INT 0
65663: PUSH
65664: LD_INT 1
65666: PUSH
65667: EMPTY
65668: LIST
65669: LIST
65670: PUSH
65671: LD_INT 1
65673: NEG
65674: PUSH
65675: LD_INT 0
65677: PUSH
65678: EMPTY
65679: LIST
65680: LIST
65681: PUSH
65682: LD_INT 1
65684: NEG
65685: PUSH
65686: LD_INT 1
65688: NEG
65689: PUSH
65690: EMPTY
65691: LIST
65692: LIST
65693: PUSH
65694: LD_INT 1
65696: NEG
65697: PUSH
65698: LD_INT 2
65700: NEG
65701: PUSH
65702: EMPTY
65703: LIST
65704: LIST
65705: PUSH
65706: LD_INT 1
65708: NEG
65709: PUSH
65710: LD_INT 1
65712: PUSH
65713: EMPTY
65714: LIST
65715: LIST
65716: PUSH
65717: LD_INT 2
65719: NEG
65720: PUSH
65721: LD_INT 0
65723: PUSH
65724: EMPTY
65725: LIST
65726: LIST
65727: PUSH
65728: LD_INT 2
65730: NEG
65731: PUSH
65732: LD_INT 1
65734: NEG
65735: PUSH
65736: EMPTY
65737: LIST
65738: LIST
65739: PUSH
65740: LD_INT 2
65742: NEG
65743: PUSH
65744: LD_INT 2
65746: NEG
65747: PUSH
65748: EMPTY
65749: LIST
65750: LIST
65751: PUSH
65752: EMPTY
65753: LIST
65754: LIST
65755: LIST
65756: LIST
65757: LIST
65758: LIST
65759: LIST
65760: LIST
65761: LIST
65762: LIST
65763: LIST
65764: LIST
65765: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65766: LD_ADDR_VAR 0 53
65770: PUSH
65771: LD_INT 0
65773: PUSH
65774: LD_INT 0
65776: PUSH
65777: EMPTY
65778: LIST
65779: LIST
65780: PUSH
65781: LD_INT 0
65783: PUSH
65784: LD_INT 1
65786: NEG
65787: PUSH
65788: EMPTY
65789: LIST
65790: LIST
65791: PUSH
65792: LD_INT 1
65794: PUSH
65795: LD_INT 0
65797: PUSH
65798: EMPTY
65799: LIST
65800: LIST
65801: PUSH
65802: LD_INT 1
65804: PUSH
65805: LD_INT 1
65807: PUSH
65808: EMPTY
65809: LIST
65810: LIST
65811: PUSH
65812: LD_INT 0
65814: PUSH
65815: LD_INT 1
65817: PUSH
65818: EMPTY
65819: LIST
65820: LIST
65821: PUSH
65822: LD_INT 1
65824: NEG
65825: PUSH
65826: LD_INT 0
65828: PUSH
65829: EMPTY
65830: LIST
65831: LIST
65832: PUSH
65833: LD_INT 1
65835: NEG
65836: PUSH
65837: LD_INT 1
65839: NEG
65840: PUSH
65841: EMPTY
65842: LIST
65843: LIST
65844: PUSH
65845: LD_INT 1
65847: NEG
65848: PUSH
65849: LD_INT 2
65851: NEG
65852: PUSH
65853: EMPTY
65854: LIST
65855: LIST
65856: PUSH
65857: LD_INT 0
65859: PUSH
65860: LD_INT 2
65862: NEG
65863: PUSH
65864: EMPTY
65865: LIST
65866: LIST
65867: PUSH
65868: LD_INT 1
65870: PUSH
65871: LD_INT 1
65873: NEG
65874: PUSH
65875: EMPTY
65876: LIST
65877: LIST
65878: PUSH
65879: LD_INT 2
65881: PUSH
65882: LD_INT 0
65884: PUSH
65885: EMPTY
65886: LIST
65887: LIST
65888: PUSH
65889: LD_INT 2
65891: PUSH
65892: LD_INT 1
65894: PUSH
65895: EMPTY
65896: LIST
65897: LIST
65898: PUSH
65899: LD_INT 2
65901: PUSH
65902: LD_INT 2
65904: PUSH
65905: EMPTY
65906: LIST
65907: LIST
65908: PUSH
65909: LD_INT 1
65911: PUSH
65912: LD_INT 2
65914: PUSH
65915: EMPTY
65916: LIST
65917: LIST
65918: PUSH
65919: LD_INT 0
65921: PUSH
65922: LD_INT 2
65924: PUSH
65925: EMPTY
65926: LIST
65927: LIST
65928: PUSH
65929: LD_INT 1
65931: NEG
65932: PUSH
65933: LD_INT 1
65935: PUSH
65936: EMPTY
65937: LIST
65938: LIST
65939: PUSH
65940: LD_INT 2
65942: NEG
65943: PUSH
65944: LD_INT 0
65946: PUSH
65947: EMPTY
65948: LIST
65949: LIST
65950: PUSH
65951: LD_INT 2
65953: NEG
65954: PUSH
65955: LD_INT 1
65957: NEG
65958: PUSH
65959: EMPTY
65960: LIST
65961: LIST
65962: PUSH
65963: LD_INT 2
65965: NEG
65966: PUSH
65967: LD_INT 2
65969: NEG
65970: PUSH
65971: EMPTY
65972: LIST
65973: LIST
65974: PUSH
65975: EMPTY
65976: LIST
65977: LIST
65978: LIST
65979: LIST
65980: LIST
65981: LIST
65982: LIST
65983: LIST
65984: LIST
65985: LIST
65986: LIST
65987: LIST
65988: LIST
65989: LIST
65990: LIST
65991: LIST
65992: LIST
65993: LIST
65994: LIST
65995: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65996: LD_ADDR_VAR 0 54
66000: PUSH
66001: LD_INT 0
66003: PUSH
66004: LD_INT 0
66006: PUSH
66007: EMPTY
66008: LIST
66009: LIST
66010: PUSH
66011: LD_INT 0
66013: PUSH
66014: LD_INT 1
66016: NEG
66017: PUSH
66018: EMPTY
66019: LIST
66020: LIST
66021: PUSH
66022: LD_INT 1
66024: PUSH
66025: LD_INT 0
66027: PUSH
66028: EMPTY
66029: LIST
66030: LIST
66031: PUSH
66032: LD_INT 1
66034: PUSH
66035: LD_INT 1
66037: PUSH
66038: EMPTY
66039: LIST
66040: LIST
66041: PUSH
66042: LD_INT 0
66044: PUSH
66045: LD_INT 1
66047: PUSH
66048: EMPTY
66049: LIST
66050: LIST
66051: PUSH
66052: LD_INT 1
66054: NEG
66055: PUSH
66056: LD_INT 0
66058: PUSH
66059: EMPTY
66060: LIST
66061: LIST
66062: PUSH
66063: LD_INT 1
66065: NEG
66066: PUSH
66067: LD_INT 1
66069: NEG
66070: PUSH
66071: EMPTY
66072: LIST
66073: LIST
66074: PUSH
66075: LD_INT 1
66077: NEG
66078: PUSH
66079: LD_INT 2
66081: NEG
66082: PUSH
66083: EMPTY
66084: LIST
66085: LIST
66086: PUSH
66087: LD_INT 0
66089: PUSH
66090: LD_INT 2
66092: NEG
66093: PUSH
66094: EMPTY
66095: LIST
66096: LIST
66097: PUSH
66098: LD_INT 1
66100: PUSH
66101: LD_INT 1
66103: NEG
66104: PUSH
66105: EMPTY
66106: LIST
66107: LIST
66108: PUSH
66109: LD_INT 2
66111: PUSH
66112: LD_INT 0
66114: PUSH
66115: EMPTY
66116: LIST
66117: LIST
66118: PUSH
66119: LD_INT 2
66121: PUSH
66122: LD_INT 1
66124: PUSH
66125: EMPTY
66126: LIST
66127: LIST
66128: PUSH
66129: LD_INT 2
66131: PUSH
66132: LD_INT 2
66134: PUSH
66135: EMPTY
66136: LIST
66137: LIST
66138: PUSH
66139: LD_INT 1
66141: PUSH
66142: LD_INT 2
66144: PUSH
66145: EMPTY
66146: LIST
66147: LIST
66148: PUSH
66149: LD_INT 0
66151: PUSH
66152: LD_INT 2
66154: PUSH
66155: EMPTY
66156: LIST
66157: LIST
66158: PUSH
66159: LD_INT 1
66161: NEG
66162: PUSH
66163: LD_INT 1
66165: PUSH
66166: EMPTY
66167: LIST
66168: LIST
66169: PUSH
66170: LD_INT 2
66172: NEG
66173: PUSH
66174: LD_INT 0
66176: PUSH
66177: EMPTY
66178: LIST
66179: LIST
66180: PUSH
66181: LD_INT 2
66183: NEG
66184: PUSH
66185: LD_INT 1
66187: NEG
66188: PUSH
66189: EMPTY
66190: LIST
66191: LIST
66192: PUSH
66193: LD_INT 2
66195: NEG
66196: PUSH
66197: LD_INT 2
66199: NEG
66200: PUSH
66201: EMPTY
66202: LIST
66203: LIST
66204: PUSH
66205: EMPTY
66206: LIST
66207: LIST
66208: LIST
66209: LIST
66210: LIST
66211: LIST
66212: LIST
66213: LIST
66214: LIST
66215: LIST
66216: LIST
66217: LIST
66218: LIST
66219: LIST
66220: LIST
66221: LIST
66222: LIST
66223: LIST
66224: LIST
66225: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66226: LD_ADDR_VAR 0 55
66230: PUSH
66231: LD_INT 0
66233: PUSH
66234: LD_INT 0
66236: PUSH
66237: EMPTY
66238: LIST
66239: LIST
66240: PUSH
66241: LD_INT 0
66243: PUSH
66244: LD_INT 1
66246: NEG
66247: PUSH
66248: EMPTY
66249: LIST
66250: LIST
66251: PUSH
66252: LD_INT 1
66254: PUSH
66255: LD_INT 0
66257: PUSH
66258: EMPTY
66259: LIST
66260: LIST
66261: PUSH
66262: LD_INT 1
66264: PUSH
66265: LD_INT 1
66267: PUSH
66268: EMPTY
66269: LIST
66270: LIST
66271: PUSH
66272: LD_INT 0
66274: PUSH
66275: LD_INT 1
66277: PUSH
66278: EMPTY
66279: LIST
66280: LIST
66281: PUSH
66282: LD_INT 1
66284: NEG
66285: PUSH
66286: LD_INT 0
66288: PUSH
66289: EMPTY
66290: LIST
66291: LIST
66292: PUSH
66293: LD_INT 1
66295: NEG
66296: PUSH
66297: LD_INT 1
66299: NEG
66300: PUSH
66301: EMPTY
66302: LIST
66303: LIST
66304: PUSH
66305: LD_INT 1
66307: NEG
66308: PUSH
66309: LD_INT 2
66311: NEG
66312: PUSH
66313: EMPTY
66314: LIST
66315: LIST
66316: PUSH
66317: LD_INT 0
66319: PUSH
66320: LD_INT 2
66322: NEG
66323: PUSH
66324: EMPTY
66325: LIST
66326: LIST
66327: PUSH
66328: LD_INT 1
66330: PUSH
66331: LD_INT 1
66333: NEG
66334: PUSH
66335: EMPTY
66336: LIST
66337: LIST
66338: PUSH
66339: LD_INT 2
66341: PUSH
66342: LD_INT 0
66344: PUSH
66345: EMPTY
66346: LIST
66347: LIST
66348: PUSH
66349: LD_INT 2
66351: PUSH
66352: LD_INT 1
66354: PUSH
66355: EMPTY
66356: LIST
66357: LIST
66358: PUSH
66359: LD_INT 2
66361: PUSH
66362: LD_INT 2
66364: PUSH
66365: EMPTY
66366: LIST
66367: LIST
66368: PUSH
66369: LD_INT 1
66371: PUSH
66372: LD_INT 2
66374: PUSH
66375: EMPTY
66376: LIST
66377: LIST
66378: PUSH
66379: LD_INT 0
66381: PUSH
66382: LD_INT 2
66384: PUSH
66385: EMPTY
66386: LIST
66387: LIST
66388: PUSH
66389: LD_INT 1
66391: NEG
66392: PUSH
66393: LD_INT 1
66395: PUSH
66396: EMPTY
66397: LIST
66398: LIST
66399: PUSH
66400: LD_INT 2
66402: NEG
66403: PUSH
66404: LD_INT 0
66406: PUSH
66407: EMPTY
66408: LIST
66409: LIST
66410: PUSH
66411: LD_INT 2
66413: NEG
66414: PUSH
66415: LD_INT 1
66417: NEG
66418: PUSH
66419: EMPTY
66420: LIST
66421: LIST
66422: PUSH
66423: LD_INT 2
66425: NEG
66426: PUSH
66427: LD_INT 2
66429: NEG
66430: PUSH
66431: EMPTY
66432: LIST
66433: LIST
66434: PUSH
66435: EMPTY
66436: LIST
66437: LIST
66438: LIST
66439: LIST
66440: LIST
66441: LIST
66442: LIST
66443: LIST
66444: LIST
66445: LIST
66446: LIST
66447: LIST
66448: LIST
66449: LIST
66450: LIST
66451: LIST
66452: LIST
66453: LIST
66454: LIST
66455: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66456: LD_ADDR_VAR 0 56
66460: PUSH
66461: LD_INT 0
66463: PUSH
66464: LD_INT 0
66466: PUSH
66467: EMPTY
66468: LIST
66469: LIST
66470: PUSH
66471: LD_INT 0
66473: PUSH
66474: LD_INT 1
66476: NEG
66477: PUSH
66478: EMPTY
66479: LIST
66480: LIST
66481: PUSH
66482: LD_INT 1
66484: PUSH
66485: LD_INT 0
66487: PUSH
66488: EMPTY
66489: LIST
66490: LIST
66491: PUSH
66492: LD_INT 1
66494: PUSH
66495: LD_INT 1
66497: PUSH
66498: EMPTY
66499: LIST
66500: LIST
66501: PUSH
66502: LD_INT 0
66504: PUSH
66505: LD_INT 1
66507: PUSH
66508: EMPTY
66509: LIST
66510: LIST
66511: PUSH
66512: LD_INT 1
66514: NEG
66515: PUSH
66516: LD_INT 0
66518: PUSH
66519: EMPTY
66520: LIST
66521: LIST
66522: PUSH
66523: LD_INT 1
66525: NEG
66526: PUSH
66527: LD_INT 1
66529: NEG
66530: PUSH
66531: EMPTY
66532: LIST
66533: LIST
66534: PUSH
66535: LD_INT 1
66537: NEG
66538: PUSH
66539: LD_INT 2
66541: NEG
66542: PUSH
66543: EMPTY
66544: LIST
66545: LIST
66546: PUSH
66547: LD_INT 0
66549: PUSH
66550: LD_INT 2
66552: NEG
66553: PUSH
66554: EMPTY
66555: LIST
66556: LIST
66557: PUSH
66558: LD_INT 1
66560: PUSH
66561: LD_INT 1
66563: NEG
66564: PUSH
66565: EMPTY
66566: LIST
66567: LIST
66568: PUSH
66569: LD_INT 2
66571: PUSH
66572: LD_INT 0
66574: PUSH
66575: EMPTY
66576: LIST
66577: LIST
66578: PUSH
66579: LD_INT 2
66581: PUSH
66582: LD_INT 1
66584: PUSH
66585: EMPTY
66586: LIST
66587: LIST
66588: PUSH
66589: LD_INT 2
66591: PUSH
66592: LD_INT 2
66594: PUSH
66595: EMPTY
66596: LIST
66597: LIST
66598: PUSH
66599: LD_INT 1
66601: PUSH
66602: LD_INT 2
66604: PUSH
66605: EMPTY
66606: LIST
66607: LIST
66608: PUSH
66609: LD_INT 0
66611: PUSH
66612: LD_INT 2
66614: PUSH
66615: EMPTY
66616: LIST
66617: LIST
66618: PUSH
66619: LD_INT 1
66621: NEG
66622: PUSH
66623: LD_INT 1
66625: PUSH
66626: EMPTY
66627: LIST
66628: LIST
66629: PUSH
66630: LD_INT 2
66632: NEG
66633: PUSH
66634: LD_INT 0
66636: PUSH
66637: EMPTY
66638: LIST
66639: LIST
66640: PUSH
66641: LD_INT 2
66643: NEG
66644: PUSH
66645: LD_INT 1
66647: NEG
66648: PUSH
66649: EMPTY
66650: LIST
66651: LIST
66652: PUSH
66653: LD_INT 2
66655: NEG
66656: PUSH
66657: LD_INT 2
66659: NEG
66660: PUSH
66661: EMPTY
66662: LIST
66663: LIST
66664: PUSH
66665: EMPTY
66666: LIST
66667: LIST
66668: LIST
66669: LIST
66670: LIST
66671: LIST
66672: LIST
66673: LIST
66674: LIST
66675: LIST
66676: LIST
66677: LIST
66678: LIST
66679: LIST
66680: LIST
66681: LIST
66682: LIST
66683: LIST
66684: LIST
66685: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66686: LD_ADDR_VAR 0 57
66690: PUSH
66691: LD_INT 0
66693: PUSH
66694: LD_INT 0
66696: PUSH
66697: EMPTY
66698: LIST
66699: LIST
66700: PUSH
66701: LD_INT 0
66703: PUSH
66704: LD_INT 1
66706: NEG
66707: PUSH
66708: EMPTY
66709: LIST
66710: LIST
66711: PUSH
66712: LD_INT 1
66714: PUSH
66715: LD_INT 0
66717: PUSH
66718: EMPTY
66719: LIST
66720: LIST
66721: PUSH
66722: LD_INT 1
66724: PUSH
66725: LD_INT 1
66727: PUSH
66728: EMPTY
66729: LIST
66730: LIST
66731: PUSH
66732: LD_INT 0
66734: PUSH
66735: LD_INT 1
66737: PUSH
66738: EMPTY
66739: LIST
66740: LIST
66741: PUSH
66742: LD_INT 1
66744: NEG
66745: PUSH
66746: LD_INT 0
66748: PUSH
66749: EMPTY
66750: LIST
66751: LIST
66752: PUSH
66753: LD_INT 1
66755: NEG
66756: PUSH
66757: LD_INT 1
66759: NEG
66760: PUSH
66761: EMPTY
66762: LIST
66763: LIST
66764: PUSH
66765: LD_INT 1
66767: NEG
66768: PUSH
66769: LD_INT 2
66771: NEG
66772: PUSH
66773: EMPTY
66774: LIST
66775: LIST
66776: PUSH
66777: LD_INT 0
66779: PUSH
66780: LD_INT 2
66782: NEG
66783: PUSH
66784: EMPTY
66785: LIST
66786: LIST
66787: PUSH
66788: LD_INT 1
66790: PUSH
66791: LD_INT 1
66793: NEG
66794: PUSH
66795: EMPTY
66796: LIST
66797: LIST
66798: PUSH
66799: LD_INT 2
66801: PUSH
66802: LD_INT 0
66804: PUSH
66805: EMPTY
66806: LIST
66807: LIST
66808: PUSH
66809: LD_INT 2
66811: PUSH
66812: LD_INT 1
66814: PUSH
66815: EMPTY
66816: LIST
66817: LIST
66818: PUSH
66819: LD_INT 2
66821: PUSH
66822: LD_INT 2
66824: PUSH
66825: EMPTY
66826: LIST
66827: LIST
66828: PUSH
66829: LD_INT 1
66831: PUSH
66832: LD_INT 2
66834: PUSH
66835: EMPTY
66836: LIST
66837: LIST
66838: PUSH
66839: LD_INT 0
66841: PUSH
66842: LD_INT 2
66844: PUSH
66845: EMPTY
66846: LIST
66847: LIST
66848: PUSH
66849: LD_INT 1
66851: NEG
66852: PUSH
66853: LD_INT 1
66855: PUSH
66856: EMPTY
66857: LIST
66858: LIST
66859: PUSH
66860: LD_INT 2
66862: NEG
66863: PUSH
66864: LD_INT 0
66866: PUSH
66867: EMPTY
66868: LIST
66869: LIST
66870: PUSH
66871: LD_INT 2
66873: NEG
66874: PUSH
66875: LD_INT 1
66877: NEG
66878: PUSH
66879: EMPTY
66880: LIST
66881: LIST
66882: PUSH
66883: LD_INT 2
66885: NEG
66886: PUSH
66887: LD_INT 2
66889: NEG
66890: PUSH
66891: EMPTY
66892: LIST
66893: LIST
66894: PUSH
66895: EMPTY
66896: LIST
66897: LIST
66898: LIST
66899: LIST
66900: LIST
66901: LIST
66902: LIST
66903: LIST
66904: LIST
66905: LIST
66906: LIST
66907: LIST
66908: LIST
66909: LIST
66910: LIST
66911: LIST
66912: LIST
66913: LIST
66914: LIST
66915: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66916: LD_ADDR_VAR 0 58
66920: PUSH
66921: LD_INT 0
66923: PUSH
66924: LD_INT 0
66926: PUSH
66927: EMPTY
66928: LIST
66929: LIST
66930: PUSH
66931: LD_INT 0
66933: PUSH
66934: LD_INT 1
66936: NEG
66937: PUSH
66938: EMPTY
66939: LIST
66940: LIST
66941: PUSH
66942: LD_INT 1
66944: PUSH
66945: LD_INT 0
66947: PUSH
66948: EMPTY
66949: LIST
66950: LIST
66951: PUSH
66952: LD_INT 1
66954: PUSH
66955: LD_INT 1
66957: PUSH
66958: EMPTY
66959: LIST
66960: LIST
66961: PUSH
66962: LD_INT 0
66964: PUSH
66965: LD_INT 1
66967: PUSH
66968: EMPTY
66969: LIST
66970: LIST
66971: PUSH
66972: LD_INT 1
66974: NEG
66975: PUSH
66976: LD_INT 0
66978: PUSH
66979: EMPTY
66980: LIST
66981: LIST
66982: PUSH
66983: LD_INT 1
66985: NEG
66986: PUSH
66987: LD_INT 1
66989: NEG
66990: PUSH
66991: EMPTY
66992: LIST
66993: LIST
66994: PUSH
66995: LD_INT 1
66997: NEG
66998: PUSH
66999: LD_INT 2
67001: NEG
67002: PUSH
67003: EMPTY
67004: LIST
67005: LIST
67006: PUSH
67007: LD_INT 0
67009: PUSH
67010: LD_INT 2
67012: NEG
67013: PUSH
67014: EMPTY
67015: LIST
67016: LIST
67017: PUSH
67018: LD_INT 1
67020: PUSH
67021: LD_INT 1
67023: NEG
67024: PUSH
67025: EMPTY
67026: LIST
67027: LIST
67028: PUSH
67029: LD_INT 2
67031: PUSH
67032: LD_INT 0
67034: PUSH
67035: EMPTY
67036: LIST
67037: LIST
67038: PUSH
67039: LD_INT 2
67041: PUSH
67042: LD_INT 1
67044: PUSH
67045: EMPTY
67046: LIST
67047: LIST
67048: PUSH
67049: LD_INT 2
67051: PUSH
67052: LD_INT 2
67054: PUSH
67055: EMPTY
67056: LIST
67057: LIST
67058: PUSH
67059: LD_INT 1
67061: PUSH
67062: LD_INT 2
67064: PUSH
67065: EMPTY
67066: LIST
67067: LIST
67068: PUSH
67069: LD_INT 0
67071: PUSH
67072: LD_INT 2
67074: PUSH
67075: EMPTY
67076: LIST
67077: LIST
67078: PUSH
67079: LD_INT 1
67081: NEG
67082: PUSH
67083: LD_INT 1
67085: PUSH
67086: EMPTY
67087: LIST
67088: LIST
67089: PUSH
67090: LD_INT 2
67092: NEG
67093: PUSH
67094: LD_INT 0
67096: PUSH
67097: EMPTY
67098: LIST
67099: LIST
67100: PUSH
67101: LD_INT 2
67103: NEG
67104: PUSH
67105: LD_INT 1
67107: NEG
67108: PUSH
67109: EMPTY
67110: LIST
67111: LIST
67112: PUSH
67113: LD_INT 2
67115: NEG
67116: PUSH
67117: LD_INT 2
67119: NEG
67120: PUSH
67121: EMPTY
67122: LIST
67123: LIST
67124: PUSH
67125: EMPTY
67126: LIST
67127: LIST
67128: LIST
67129: LIST
67130: LIST
67131: LIST
67132: LIST
67133: LIST
67134: LIST
67135: LIST
67136: LIST
67137: LIST
67138: LIST
67139: LIST
67140: LIST
67141: LIST
67142: LIST
67143: LIST
67144: LIST
67145: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67146: LD_ADDR_VAR 0 59
67150: PUSH
67151: LD_INT 0
67153: PUSH
67154: LD_INT 0
67156: PUSH
67157: EMPTY
67158: LIST
67159: LIST
67160: PUSH
67161: LD_INT 0
67163: PUSH
67164: LD_INT 1
67166: NEG
67167: PUSH
67168: EMPTY
67169: LIST
67170: LIST
67171: PUSH
67172: LD_INT 1
67174: PUSH
67175: LD_INT 0
67177: PUSH
67178: EMPTY
67179: LIST
67180: LIST
67181: PUSH
67182: LD_INT 1
67184: PUSH
67185: LD_INT 1
67187: PUSH
67188: EMPTY
67189: LIST
67190: LIST
67191: PUSH
67192: LD_INT 0
67194: PUSH
67195: LD_INT 1
67197: PUSH
67198: EMPTY
67199: LIST
67200: LIST
67201: PUSH
67202: LD_INT 1
67204: NEG
67205: PUSH
67206: LD_INT 0
67208: PUSH
67209: EMPTY
67210: LIST
67211: LIST
67212: PUSH
67213: LD_INT 1
67215: NEG
67216: PUSH
67217: LD_INT 1
67219: NEG
67220: PUSH
67221: EMPTY
67222: LIST
67223: LIST
67224: PUSH
67225: EMPTY
67226: LIST
67227: LIST
67228: LIST
67229: LIST
67230: LIST
67231: LIST
67232: LIST
67233: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67234: LD_ADDR_VAR 0 60
67238: PUSH
67239: LD_INT 0
67241: PUSH
67242: LD_INT 0
67244: PUSH
67245: EMPTY
67246: LIST
67247: LIST
67248: PUSH
67249: LD_INT 0
67251: PUSH
67252: LD_INT 1
67254: NEG
67255: PUSH
67256: EMPTY
67257: LIST
67258: LIST
67259: PUSH
67260: LD_INT 1
67262: PUSH
67263: LD_INT 0
67265: PUSH
67266: EMPTY
67267: LIST
67268: LIST
67269: PUSH
67270: LD_INT 1
67272: PUSH
67273: LD_INT 1
67275: PUSH
67276: EMPTY
67277: LIST
67278: LIST
67279: PUSH
67280: LD_INT 0
67282: PUSH
67283: LD_INT 1
67285: PUSH
67286: EMPTY
67287: LIST
67288: LIST
67289: PUSH
67290: LD_INT 1
67292: NEG
67293: PUSH
67294: LD_INT 0
67296: PUSH
67297: EMPTY
67298: LIST
67299: LIST
67300: PUSH
67301: LD_INT 1
67303: NEG
67304: PUSH
67305: LD_INT 1
67307: NEG
67308: PUSH
67309: EMPTY
67310: LIST
67311: LIST
67312: PUSH
67313: EMPTY
67314: LIST
67315: LIST
67316: LIST
67317: LIST
67318: LIST
67319: LIST
67320: LIST
67321: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67322: LD_ADDR_VAR 0 61
67326: PUSH
67327: LD_INT 0
67329: PUSH
67330: LD_INT 0
67332: PUSH
67333: EMPTY
67334: LIST
67335: LIST
67336: PUSH
67337: LD_INT 0
67339: PUSH
67340: LD_INT 1
67342: NEG
67343: PUSH
67344: EMPTY
67345: LIST
67346: LIST
67347: PUSH
67348: LD_INT 1
67350: PUSH
67351: LD_INT 0
67353: PUSH
67354: EMPTY
67355: LIST
67356: LIST
67357: PUSH
67358: LD_INT 1
67360: PUSH
67361: LD_INT 1
67363: PUSH
67364: EMPTY
67365: LIST
67366: LIST
67367: PUSH
67368: LD_INT 0
67370: PUSH
67371: LD_INT 1
67373: PUSH
67374: EMPTY
67375: LIST
67376: LIST
67377: PUSH
67378: LD_INT 1
67380: NEG
67381: PUSH
67382: LD_INT 0
67384: PUSH
67385: EMPTY
67386: LIST
67387: LIST
67388: PUSH
67389: LD_INT 1
67391: NEG
67392: PUSH
67393: LD_INT 1
67395: NEG
67396: PUSH
67397: EMPTY
67398: LIST
67399: LIST
67400: PUSH
67401: EMPTY
67402: LIST
67403: LIST
67404: LIST
67405: LIST
67406: LIST
67407: LIST
67408: LIST
67409: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67410: LD_ADDR_VAR 0 62
67414: PUSH
67415: LD_INT 0
67417: PUSH
67418: LD_INT 0
67420: PUSH
67421: EMPTY
67422: LIST
67423: LIST
67424: PUSH
67425: LD_INT 0
67427: PUSH
67428: LD_INT 1
67430: NEG
67431: PUSH
67432: EMPTY
67433: LIST
67434: LIST
67435: PUSH
67436: LD_INT 1
67438: PUSH
67439: LD_INT 0
67441: PUSH
67442: EMPTY
67443: LIST
67444: LIST
67445: PUSH
67446: LD_INT 1
67448: PUSH
67449: LD_INT 1
67451: PUSH
67452: EMPTY
67453: LIST
67454: LIST
67455: PUSH
67456: LD_INT 0
67458: PUSH
67459: LD_INT 1
67461: PUSH
67462: EMPTY
67463: LIST
67464: LIST
67465: PUSH
67466: LD_INT 1
67468: NEG
67469: PUSH
67470: LD_INT 0
67472: PUSH
67473: EMPTY
67474: LIST
67475: LIST
67476: PUSH
67477: LD_INT 1
67479: NEG
67480: PUSH
67481: LD_INT 1
67483: NEG
67484: PUSH
67485: EMPTY
67486: LIST
67487: LIST
67488: PUSH
67489: EMPTY
67490: LIST
67491: LIST
67492: LIST
67493: LIST
67494: LIST
67495: LIST
67496: LIST
67497: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67498: LD_ADDR_VAR 0 63
67502: PUSH
67503: LD_INT 0
67505: PUSH
67506: LD_INT 0
67508: PUSH
67509: EMPTY
67510: LIST
67511: LIST
67512: PUSH
67513: LD_INT 0
67515: PUSH
67516: LD_INT 1
67518: NEG
67519: PUSH
67520: EMPTY
67521: LIST
67522: LIST
67523: PUSH
67524: LD_INT 1
67526: PUSH
67527: LD_INT 0
67529: PUSH
67530: EMPTY
67531: LIST
67532: LIST
67533: PUSH
67534: LD_INT 1
67536: PUSH
67537: LD_INT 1
67539: PUSH
67540: EMPTY
67541: LIST
67542: LIST
67543: PUSH
67544: LD_INT 0
67546: PUSH
67547: LD_INT 1
67549: PUSH
67550: EMPTY
67551: LIST
67552: LIST
67553: PUSH
67554: LD_INT 1
67556: NEG
67557: PUSH
67558: LD_INT 0
67560: PUSH
67561: EMPTY
67562: LIST
67563: LIST
67564: PUSH
67565: LD_INT 1
67567: NEG
67568: PUSH
67569: LD_INT 1
67571: NEG
67572: PUSH
67573: EMPTY
67574: LIST
67575: LIST
67576: PUSH
67577: EMPTY
67578: LIST
67579: LIST
67580: LIST
67581: LIST
67582: LIST
67583: LIST
67584: LIST
67585: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67586: LD_ADDR_VAR 0 64
67590: PUSH
67591: LD_INT 0
67593: PUSH
67594: LD_INT 0
67596: PUSH
67597: EMPTY
67598: LIST
67599: LIST
67600: PUSH
67601: LD_INT 0
67603: PUSH
67604: LD_INT 1
67606: NEG
67607: PUSH
67608: EMPTY
67609: LIST
67610: LIST
67611: PUSH
67612: LD_INT 1
67614: PUSH
67615: LD_INT 0
67617: PUSH
67618: EMPTY
67619: LIST
67620: LIST
67621: PUSH
67622: LD_INT 1
67624: PUSH
67625: LD_INT 1
67627: PUSH
67628: EMPTY
67629: LIST
67630: LIST
67631: PUSH
67632: LD_INT 0
67634: PUSH
67635: LD_INT 1
67637: PUSH
67638: EMPTY
67639: LIST
67640: LIST
67641: PUSH
67642: LD_INT 1
67644: NEG
67645: PUSH
67646: LD_INT 0
67648: PUSH
67649: EMPTY
67650: LIST
67651: LIST
67652: PUSH
67653: LD_INT 1
67655: NEG
67656: PUSH
67657: LD_INT 1
67659: NEG
67660: PUSH
67661: EMPTY
67662: LIST
67663: LIST
67664: PUSH
67665: EMPTY
67666: LIST
67667: LIST
67668: LIST
67669: LIST
67670: LIST
67671: LIST
67672: LIST
67673: ST_TO_ADDR
// end ; 1 :
67674: GO 73571
67676: LD_INT 1
67678: DOUBLE
67679: EQUAL
67680: IFTRUE 67684
67682: GO 70307
67684: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67685: LD_ADDR_VAR 0 11
67689: PUSH
67690: LD_INT 1
67692: NEG
67693: PUSH
67694: LD_INT 3
67696: NEG
67697: PUSH
67698: EMPTY
67699: LIST
67700: LIST
67701: PUSH
67702: LD_INT 0
67704: PUSH
67705: LD_INT 3
67707: NEG
67708: PUSH
67709: EMPTY
67710: LIST
67711: LIST
67712: PUSH
67713: LD_INT 1
67715: PUSH
67716: LD_INT 2
67718: NEG
67719: PUSH
67720: EMPTY
67721: LIST
67722: LIST
67723: PUSH
67724: EMPTY
67725: LIST
67726: LIST
67727: LIST
67728: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67729: LD_ADDR_VAR 0 12
67733: PUSH
67734: LD_INT 2
67736: PUSH
67737: LD_INT 1
67739: NEG
67740: PUSH
67741: EMPTY
67742: LIST
67743: LIST
67744: PUSH
67745: LD_INT 3
67747: PUSH
67748: LD_INT 0
67750: PUSH
67751: EMPTY
67752: LIST
67753: LIST
67754: PUSH
67755: LD_INT 3
67757: PUSH
67758: LD_INT 1
67760: PUSH
67761: EMPTY
67762: LIST
67763: LIST
67764: PUSH
67765: EMPTY
67766: LIST
67767: LIST
67768: LIST
67769: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67770: LD_ADDR_VAR 0 13
67774: PUSH
67775: LD_INT 3
67777: PUSH
67778: LD_INT 2
67780: PUSH
67781: EMPTY
67782: LIST
67783: LIST
67784: PUSH
67785: LD_INT 3
67787: PUSH
67788: LD_INT 3
67790: PUSH
67791: EMPTY
67792: LIST
67793: LIST
67794: PUSH
67795: LD_INT 2
67797: PUSH
67798: LD_INT 3
67800: PUSH
67801: EMPTY
67802: LIST
67803: LIST
67804: PUSH
67805: EMPTY
67806: LIST
67807: LIST
67808: LIST
67809: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67810: LD_ADDR_VAR 0 14
67814: PUSH
67815: LD_INT 1
67817: PUSH
67818: LD_INT 3
67820: PUSH
67821: EMPTY
67822: LIST
67823: LIST
67824: PUSH
67825: LD_INT 0
67827: PUSH
67828: LD_INT 3
67830: PUSH
67831: EMPTY
67832: LIST
67833: LIST
67834: PUSH
67835: LD_INT 1
67837: NEG
67838: PUSH
67839: LD_INT 2
67841: PUSH
67842: EMPTY
67843: LIST
67844: LIST
67845: PUSH
67846: EMPTY
67847: LIST
67848: LIST
67849: LIST
67850: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67851: LD_ADDR_VAR 0 15
67855: PUSH
67856: LD_INT 2
67858: NEG
67859: PUSH
67860: LD_INT 1
67862: PUSH
67863: EMPTY
67864: LIST
67865: LIST
67866: PUSH
67867: LD_INT 3
67869: NEG
67870: PUSH
67871: LD_INT 0
67873: PUSH
67874: EMPTY
67875: LIST
67876: LIST
67877: PUSH
67878: LD_INT 3
67880: NEG
67881: PUSH
67882: LD_INT 1
67884: NEG
67885: PUSH
67886: EMPTY
67887: LIST
67888: LIST
67889: PUSH
67890: EMPTY
67891: LIST
67892: LIST
67893: LIST
67894: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67895: LD_ADDR_VAR 0 16
67899: PUSH
67900: LD_INT 2
67902: NEG
67903: PUSH
67904: LD_INT 3
67906: NEG
67907: PUSH
67908: EMPTY
67909: LIST
67910: LIST
67911: PUSH
67912: LD_INT 3
67914: NEG
67915: PUSH
67916: LD_INT 2
67918: NEG
67919: PUSH
67920: EMPTY
67921: LIST
67922: LIST
67923: PUSH
67924: LD_INT 3
67926: NEG
67927: PUSH
67928: LD_INT 3
67930: NEG
67931: PUSH
67932: EMPTY
67933: LIST
67934: LIST
67935: PUSH
67936: EMPTY
67937: LIST
67938: LIST
67939: LIST
67940: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67941: LD_ADDR_VAR 0 17
67945: PUSH
67946: LD_INT 1
67948: NEG
67949: PUSH
67950: LD_INT 3
67952: NEG
67953: PUSH
67954: EMPTY
67955: LIST
67956: LIST
67957: PUSH
67958: LD_INT 0
67960: PUSH
67961: LD_INT 3
67963: NEG
67964: PUSH
67965: EMPTY
67966: LIST
67967: LIST
67968: PUSH
67969: LD_INT 1
67971: PUSH
67972: LD_INT 2
67974: NEG
67975: PUSH
67976: EMPTY
67977: LIST
67978: LIST
67979: PUSH
67980: EMPTY
67981: LIST
67982: LIST
67983: LIST
67984: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67985: LD_ADDR_VAR 0 18
67989: PUSH
67990: LD_INT 2
67992: PUSH
67993: LD_INT 1
67995: NEG
67996: PUSH
67997: EMPTY
67998: LIST
67999: LIST
68000: PUSH
68001: LD_INT 3
68003: PUSH
68004: LD_INT 0
68006: PUSH
68007: EMPTY
68008: LIST
68009: LIST
68010: PUSH
68011: LD_INT 3
68013: PUSH
68014: LD_INT 1
68016: PUSH
68017: EMPTY
68018: LIST
68019: LIST
68020: PUSH
68021: EMPTY
68022: LIST
68023: LIST
68024: LIST
68025: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68026: LD_ADDR_VAR 0 19
68030: PUSH
68031: LD_INT 3
68033: PUSH
68034: LD_INT 2
68036: PUSH
68037: EMPTY
68038: LIST
68039: LIST
68040: PUSH
68041: LD_INT 3
68043: PUSH
68044: LD_INT 3
68046: PUSH
68047: EMPTY
68048: LIST
68049: LIST
68050: PUSH
68051: LD_INT 2
68053: PUSH
68054: LD_INT 3
68056: PUSH
68057: EMPTY
68058: LIST
68059: LIST
68060: PUSH
68061: EMPTY
68062: LIST
68063: LIST
68064: LIST
68065: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68066: LD_ADDR_VAR 0 20
68070: PUSH
68071: LD_INT 1
68073: PUSH
68074: LD_INT 3
68076: PUSH
68077: EMPTY
68078: LIST
68079: LIST
68080: PUSH
68081: LD_INT 0
68083: PUSH
68084: LD_INT 3
68086: PUSH
68087: EMPTY
68088: LIST
68089: LIST
68090: PUSH
68091: LD_INT 1
68093: NEG
68094: PUSH
68095: LD_INT 2
68097: PUSH
68098: EMPTY
68099: LIST
68100: LIST
68101: PUSH
68102: EMPTY
68103: LIST
68104: LIST
68105: LIST
68106: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68107: LD_ADDR_VAR 0 21
68111: PUSH
68112: LD_INT 2
68114: NEG
68115: PUSH
68116: LD_INT 1
68118: PUSH
68119: EMPTY
68120: LIST
68121: LIST
68122: PUSH
68123: LD_INT 3
68125: NEG
68126: PUSH
68127: LD_INT 0
68129: PUSH
68130: EMPTY
68131: LIST
68132: LIST
68133: PUSH
68134: LD_INT 3
68136: NEG
68137: PUSH
68138: LD_INT 1
68140: NEG
68141: PUSH
68142: EMPTY
68143: LIST
68144: LIST
68145: PUSH
68146: EMPTY
68147: LIST
68148: LIST
68149: LIST
68150: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68151: LD_ADDR_VAR 0 22
68155: PUSH
68156: LD_INT 2
68158: NEG
68159: PUSH
68160: LD_INT 3
68162: NEG
68163: PUSH
68164: EMPTY
68165: LIST
68166: LIST
68167: PUSH
68168: LD_INT 3
68170: NEG
68171: PUSH
68172: LD_INT 2
68174: NEG
68175: PUSH
68176: EMPTY
68177: LIST
68178: LIST
68179: PUSH
68180: LD_INT 3
68182: NEG
68183: PUSH
68184: LD_INT 3
68186: NEG
68187: PUSH
68188: EMPTY
68189: LIST
68190: LIST
68191: PUSH
68192: EMPTY
68193: LIST
68194: LIST
68195: LIST
68196: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
68197: LD_ADDR_VAR 0 23
68201: PUSH
68202: LD_INT 0
68204: PUSH
68205: LD_INT 3
68207: NEG
68208: PUSH
68209: EMPTY
68210: LIST
68211: LIST
68212: PUSH
68213: LD_INT 1
68215: NEG
68216: PUSH
68217: LD_INT 4
68219: NEG
68220: PUSH
68221: EMPTY
68222: LIST
68223: LIST
68224: PUSH
68225: LD_INT 1
68227: PUSH
68228: LD_INT 3
68230: NEG
68231: PUSH
68232: EMPTY
68233: LIST
68234: LIST
68235: PUSH
68236: EMPTY
68237: LIST
68238: LIST
68239: LIST
68240: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
68241: LD_ADDR_VAR 0 24
68245: PUSH
68246: LD_INT 3
68248: PUSH
68249: LD_INT 0
68251: PUSH
68252: EMPTY
68253: LIST
68254: LIST
68255: PUSH
68256: LD_INT 3
68258: PUSH
68259: LD_INT 1
68261: NEG
68262: PUSH
68263: EMPTY
68264: LIST
68265: LIST
68266: PUSH
68267: LD_INT 4
68269: PUSH
68270: LD_INT 1
68272: PUSH
68273: EMPTY
68274: LIST
68275: LIST
68276: PUSH
68277: EMPTY
68278: LIST
68279: LIST
68280: LIST
68281: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
68282: LD_ADDR_VAR 0 25
68286: PUSH
68287: LD_INT 3
68289: PUSH
68290: LD_INT 3
68292: PUSH
68293: EMPTY
68294: LIST
68295: LIST
68296: PUSH
68297: LD_INT 4
68299: PUSH
68300: LD_INT 3
68302: PUSH
68303: EMPTY
68304: LIST
68305: LIST
68306: PUSH
68307: LD_INT 3
68309: PUSH
68310: LD_INT 4
68312: PUSH
68313: EMPTY
68314: LIST
68315: LIST
68316: PUSH
68317: EMPTY
68318: LIST
68319: LIST
68320: LIST
68321: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
68322: LD_ADDR_VAR 0 26
68326: PUSH
68327: LD_INT 0
68329: PUSH
68330: LD_INT 3
68332: PUSH
68333: EMPTY
68334: LIST
68335: LIST
68336: PUSH
68337: LD_INT 1
68339: PUSH
68340: LD_INT 4
68342: PUSH
68343: EMPTY
68344: LIST
68345: LIST
68346: PUSH
68347: LD_INT 1
68349: NEG
68350: PUSH
68351: LD_INT 3
68353: PUSH
68354: EMPTY
68355: LIST
68356: LIST
68357: PUSH
68358: EMPTY
68359: LIST
68360: LIST
68361: LIST
68362: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
68363: LD_ADDR_VAR 0 27
68367: PUSH
68368: LD_INT 3
68370: NEG
68371: PUSH
68372: LD_INT 0
68374: PUSH
68375: EMPTY
68376: LIST
68377: LIST
68378: PUSH
68379: LD_INT 3
68381: NEG
68382: PUSH
68383: LD_INT 1
68385: PUSH
68386: EMPTY
68387: LIST
68388: LIST
68389: PUSH
68390: LD_INT 4
68392: NEG
68393: PUSH
68394: LD_INT 1
68396: NEG
68397: PUSH
68398: EMPTY
68399: LIST
68400: LIST
68401: PUSH
68402: EMPTY
68403: LIST
68404: LIST
68405: LIST
68406: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
68407: LD_ADDR_VAR 0 28
68411: PUSH
68412: LD_INT 3
68414: NEG
68415: PUSH
68416: LD_INT 3
68418: NEG
68419: PUSH
68420: EMPTY
68421: LIST
68422: LIST
68423: PUSH
68424: LD_INT 3
68426: NEG
68427: PUSH
68428: LD_INT 4
68430: NEG
68431: PUSH
68432: EMPTY
68433: LIST
68434: LIST
68435: PUSH
68436: LD_INT 4
68438: NEG
68439: PUSH
68440: LD_INT 3
68442: NEG
68443: PUSH
68444: EMPTY
68445: LIST
68446: LIST
68447: PUSH
68448: EMPTY
68449: LIST
68450: LIST
68451: LIST
68452: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
68453: LD_ADDR_VAR 0 29
68457: PUSH
68458: LD_INT 1
68460: NEG
68461: PUSH
68462: LD_INT 3
68464: NEG
68465: PUSH
68466: EMPTY
68467: LIST
68468: LIST
68469: PUSH
68470: LD_INT 0
68472: PUSH
68473: LD_INT 3
68475: NEG
68476: PUSH
68477: EMPTY
68478: LIST
68479: LIST
68480: PUSH
68481: LD_INT 1
68483: PUSH
68484: LD_INT 2
68486: NEG
68487: PUSH
68488: EMPTY
68489: LIST
68490: LIST
68491: PUSH
68492: LD_INT 1
68494: NEG
68495: PUSH
68496: LD_INT 4
68498: NEG
68499: PUSH
68500: EMPTY
68501: LIST
68502: LIST
68503: PUSH
68504: LD_INT 0
68506: PUSH
68507: LD_INT 4
68509: NEG
68510: PUSH
68511: EMPTY
68512: LIST
68513: LIST
68514: PUSH
68515: LD_INT 1
68517: PUSH
68518: LD_INT 3
68520: NEG
68521: PUSH
68522: EMPTY
68523: LIST
68524: LIST
68525: PUSH
68526: LD_INT 1
68528: NEG
68529: PUSH
68530: LD_INT 5
68532: NEG
68533: PUSH
68534: EMPTY
68535: LIST
68536: LIST
68537: PUSH
68538: LD_INT 0
68540: PUSH
68541: LD_INT 5
68543: NEG
68544: PUSH
68545: EMPTY
68546: LIST
68547: LIST
68548: PUSH
68549: LD_INT 1
68551: PUSH
68552: LD_INT 4
68554: NEG
68555: PUSH
68556: EMPTY
68557: LIST
68558: LIST
68559: PUSH
68560: LD_INT 1
68562: NEG
68563: PUSH
68564: LD_INT 6
68566: NEG
68567: PUSH
68568: EMPTY
68569: LIST
68570: LIST
68571: PUSH
68572: LD_INT 0
68574: PUSH
68575: LD_INT 6
68577: NEG
68578: PUSH
68579: EMPTY
68580: LIST
68581: LIST
68582: PUSH
68583: LD_INT 1
68585: PUSH
68586: LD_INT 5
68588: NEG
68589: PUSH
68590: EMPTY
68591: LIST
68592: LIST
68593: PUSH
68594: EMPTY
68595: LIST
68596: LIST
68597: LIST
68598: LIST
68599: LIST
68600: LIST
68601: LIST
68602: LIST
68603: LIST
68604: LIST
68605: LIST
68606: LIST
68607: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
68608: LD_ADDR_VAR 0 30
68612: PUSH
68613: LD_INT 2
68615: PUSH
68616: LD_INT 1
68618: NEG
68619: PUSH
68620: EMPTY
68621: LIST
68622: LIST
68623: PUSH
68624: LD_INT 3
68626: PUSH
68627: LD_INT 0
68629: PUSH
68630: EMPTY
68631: LIST
68632: LIST
68633: PUSH
68634: LD_INT 3
68636: PUSH
68637: LD_INT 1
68639: PUSH
68640: EMPTY
68641: LIST
68642: LIST
68643: PUSH
68644: LD_INT 3
68646: PUSH
68647: LD_INT 1
68649: NEG
68650: PUSH
68651: EMPTY
68652: LIST
68653: LIST
68654: PUSH
68655: LD_INT 4
68657: PUSH
68658: LD_INT 0
68660: PUSH
68661: EMPTY
68662: LIST
68663: LIST
68664: PUSH
68665: LD_INT 4
68667: PUSH
68668: LD_INT 1
68670: PUSH
68671: EMPTY
68672: LIST
68673: LIST
68674: PUSH
68675: LD_INT 4
68677: PUSH
68678: LD_INT 1
68680: NEG
68681: PUSH
68682: EMPTY
68683: LIST
68684: LIST
68685: PUSH
68686: LD_INT 5
68688: PUSH
68689: LD_INT 0
68691: PUSH
68692: EMPTY
68693: LIST
68694: LIST
68695: PUSH
68696: LD_INT 5
68698: PUSH
68699: LD_INT 1
68701: PUSH
68702: EMPTY
68703: LIST
68704: LIST
68705: PUSH
68706: LD_INT 5
68708: PUSH
68709: LD_INT 1
68711: NEG
68712: PUSH
68713: EMPTY
68714: LIST
68715: LIST
68716: PUSH
68717: LD_INT 6
68719: PUSH
68720: LD_INT 0
68722: PUSH
68723: EMPTY
68724: LIST
68725: LIST
68726: PUSH
68727: LD_INT 6
68729: PUSH
68730: LD_INT 1
68732: PUSH
68733: EMPTY
68734: LIST
68735: LIST
68736: PUSH
68737: EMPTY
68738: LIST
68739: LIST
68740: LIST
68741: LIST
68742: LIST
68743: LIST
68744: LIST
68745: LIST
68746: LIST
68747: LIST
68748: LIST
68749: LIST
68750: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
68751: LD_ADDR_VAR 0 31
68755: PUSH
68756: LD_INT 3
68758: PUSH
68759: LD_INT 2
68761: PUSH
68762: EMPTY
68763: LIST
68764: LIST
68765: PUSH
68766: LD_INT 3
68768: PUSH
68769: LD_INT 3
68771: PUSH
68772: EMPTY
68773: LIST
68774: LIST
68775: PUSH
68776: LD_INT 2
68778: PUSH
68779: LD_INT 3
68781: PUSH
68782: EMPTY
68783: LIST
68784: LIST
68785: PUSH
68786: LD_INT 4
68788: PUSH
68789: LD_INT 3
68791: PUSH
68792: EMPTY
68793: LIST
68794: LIST
68795: PUSH
68796: LD_INT 4
68798: PUSH
68799: LD_INT 4
68801: PUSH
68802: EMPTY
68803: LIST
68804: LIST
68805: PUSH
68806: LD_INT 3
68808: PUSH
68809: LD_INT 4
68811: PUSH
68812: EMPTY
68813: LIST
68814: LIST
68815: PUSH
68816: LD_INT 5
68818: PUSH
68819: LD_INT 4
68821: PUSH
68822: EMPTY
68823: LIST
68824: LIST
68825: PUSH
68826: LD_INT 5
68828: PUSH
68829: LD_INT 5
68831: PUSH
68832: EMPTY
68833: LIST
68834: LIST
68835: PUSH
68836: LD_INT 4
68838: PUSH
68839: LD_INT 5
68841: PUSH
68842: EMPTY
68843: LIST
68844: LIST
68845: PUSH
68846: LD_INT 6
68848: PUSH
68849: LD_INT 5
68851: PUSH
68852: EMPTY
68853: LIST
68854: LIST
68855: PUSH
68856: LD_INT 6
68858: PUSH
68859: LD_INT 6
68861: PUSH
68862: EMPTY
68863: LIST
68864: LIST
68865: PUSH
68866: LD_INT 5
68868: PUSH
68869: LD_INT 6
68871: PUSH
68872: EMPTY
68873: LIST
68874: LIST
68875: PUSH
68876: EMPTY
68877: LIST
68878: LIST
68879: LIST
68880: LIST
68881: LIST
68882: LIST
68883: LIST
68884: LIST
68885: LIST
68886: LIST
68887: LIST
68888: LIST
68889: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
68890: LD_ADDR_VAR 0 32
68894: PUSH
68895: LD_INT 1
68897: PUSH
68898: LD_INT 3
68900: PUSH
68901: EMPTY
68902: LIST
68903: LIST
68904: PUSH
68905: LD_INT 0
68907: PUSH
68908: LD_INT 3
68910: PUSH
68911: EMPTY
68912: LIST
68913: LIST
68914: PUSH
68915: LD_INT 1
68917: NEG
68918: PUSH
68919: LD_INT 2
68921: PUSH
68922: EMPTY
68923: LIST
68924: LIST
68925: PUSH
68926: LD_INT 1
68928: PUSH
68929: LD_INT 4
68931: PUSH
68932: EMPTY
68933: LIST
68934: LIST
68935: PUSH
68936: LD_INT 0
68938: PUSH
68939: LD_INT 4
68941: PUSH
68942: EMPTY
68943: LIST
68944: LIST
68945: PUSH
68946: LD_INT 1
68948: NEG
68949: PUSH
68950: LD_INT 3
68952: PUSH
68953: EMPTY
68954: LIST
68955: LIST
68956: PUSH
68957: LD_INT 1
68959: PUSH
68960: LD_INT 5
68962: PUSH
68963: EMPTY
68964: LIST
68965: LIST
68966: PUSH
68967: LD_INT 0
68969: PUSH
68970: LD_INT 5
68972: PUSH
68973: EMPTY
68974: LIST
68975: LIST
68976: PUSH
68977: LD_INT 1
68979: NEG
68980: PUSH
68981: LD_INT 4
68983: PUSH
68984: EMPTY
68985: LIST
68986: LIST
68987: PUSH
68988: LD_INT 1
68990: PUSH
68991: LD_INT 6
68993: PUSH
68994: EMPTY
68995: LIST
68996: LIST
68997: PUSH
68998: LD_INT 0
69000: PUSH
69001: LD_INT 6
69003: PUSH
69004: EMPTY
69005: LIST
69006: LIST
69007: PUSH
69008: LD_INT 1
69010: NEG
69011: PUSH
69012: LD_INT 5
69014: PUSH
69015: EMPTY
69016: LIST
69017: LIST
69018: PUSH
69019: EMPTY
69020: LIST
69021: LIST
69022: LIST
69023: LIST
69024: LIST
69025: LIST
69026: LIST
69027: LIST
69028: LIST
69029: LIST
69030: LIST
69031: LIST
69032: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
69033: LD_ADDR_VAR 0 33
69037: PUSH
69038: LD_INT 2
69040: NEG
69041: PUSH
69042: LD_INT 1
69044: PUSH
69045: EMPTY
69046: LIST
69047: LIST
69048: PUSH
69049: LD_INT 3
69051: NEG
69052: PUSH
69053: LD_INT 0
69055: PUSH
69056: EMPTY
69057: LIST
69058: LIST
69059: PUSH
69060: LD_INT 3
69062: NEG
69063: PUSH
69064: LD_INT 1
69066: NEG
69067: PUSH
69068: EMPTY
69069: LIST
69070: LIST
69071: PUSH
69072: LD_INT 3
69074: NEG
69075: PUSH
69076: LD_INT 1
69078: PUSH
69079: EMPTY
69080: LIST
69081: LIST
69082: PUSH
69083: LD_INT 4
69085: NEG
69086: PUSH
69087: LD_INT 0
69089: PUSH
69090: EMPTY
69091: LIST
69092: LIST
69093: PUSH
69094: LD_INT 4
69096: NEG
69097: PUSH
69098: LD_INT 1
69100: NEG
69101: PUSH
69102: EMPTY
69103: LIST
69104: LIST
69105: PUSH
69106: LD_INT 4
69108: NEG
69109: PUSH
69110: LD_INT 1
69112: PUSH
69113: EMPTY
69114: LIST
69115: LIST
69116: PUSH
69117: LD_INT 5
69119: NEG
69120: PUSH
69121: LD_INT 0
69123: PUSH
69124: EMPTY
69125: LIST
69126: LIST
69127: PUSH
69128: LD_INT 5
69130: NEG
69131: PUSH
69132: LD_INT 1
69134: NEG
69135: PUSH
69136: EMPTY
69137: LIST
69138: LIST
69139: PUSH
69140: LD_INT 5
69142: NEG
69143: PUSH
69144: LD_INT 1
69146: PUSH
69147: EMPTY
69148: LIST
69149: LIST
69150: PUSH
69151: LD_INT 6
69153: NEG
69154: PUSH
69155: LD_INT 0
69157: PUSH
69158: EMPTY
69159: LIST
69160: LIST
69161: PUSH
69162: LD_INT 6
69164: NEG
69165: PUSH
69166: LD_INT 1
69168: NEG
69169: PUSH
69170: EMPTY
69171: LIST
69172: LIST
69173: PUSH
69174: EMPTY
69175: LIST
69176: LIST
69177: LIST
69178: LIST
69179: LIST
69180: LIST
69181: LIST
69182: LIST
69183: LIST
69184: LIST
69185: LIST
69186: LIST
69187: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
69188: LD_ADDR_VAR 0 34
69192: PUSH
69193: LD_INT 2
69195: NEG
69196: PUSH
69197: LD_INT 3
69199: NEG
69200: PUSH
69201: EMPTY
69202: LIST
69203: LIST
69204: PUSH
69205: LD_INT 3
69207: NEG
69208: PUSH
69209: LD_INT 2
69211: NEG
69212: PUSH
69213: EMPTY
69214: LIST
69215: LIST
69216: PUSH
69217: LD_INT 3
69219: NEG
69220: PUSH
69221: LD_INT 3
69223: NEG
69224: PUSH
69225: EMPTY
69226: LIST
69227: LIST
69228: PUSH
69229: LD_INT 3
69231: NEG
69232: PUSH
69233: LD_INT 4
69235: NEG
69236: PUSH
69237: EMPTY
69238: LIST
69239: LIST
69240: PUSH
69241: LD_INT 4
69243: NEG
69244: PUSH
69245: LD_INT 3
69247: NEG
69248: PUSH
69249: EMPTY
69250: LIST
69251: LIST
69252: PUSH
69253: LD_INT 4
69255: NEG
69256: PUSH
69257: LD_INT 4
69259: NEG
69260: PUSH
69261: EMPTY
69262: LIST
69263: LIST
69264: PUSH
69265: LD_INT 4
69267: NEG
69268: PUSH
69269: LD_INT 5
69271: NEG
69272: PUSH
69273: EMPTY
69274: LIST
69275: LIST
69276: PUSH
69277: LD_INT 5
69279: NEG
69280: PUSH
69281: LD_INT 4
69283: NEG
69284: PUSH
69285: EMPTY
69286: LIST
69287: LIST
69288: PUSH
69289: LD_INT 5
69291: NEG
69292: PUSH
69293: LD_INT 5
69295: NEG
69296: PUSH
69297: EMPTY
69298: LIST
69299: LIST
69300: PUSH
69301: LD_INT 5
69303: NEG
69304: PUSH
69305: LD_INT 6
69307: NEG
69308: PUSH
69309: EMPTY
69310: LIST
69311: LIST
69312: PUSH
69313: LD_INT 6
69315: NEG
69316: PUSH
69317: LD_INT 5
69319: NEG
69320: PUSH
69321: EMPTY
69322: LIST
69323: LIST
69324: PUSH
69325: LD_INT 6
69327: NEG
69328: PUSH
69329: LD_INT 6
69331: NEG
69332: PUSH
69333: EMPTY
69334: LIST
69335: LIST
69336: PUSH
69337: EMPTY
69338: LIST
69339: LIST
69340: LIST
69341: LIST
69342: LIST
69343: LIST
69344: LIST
69345: LIST
69346: LIST
69347: LIST
69348: LIST
69349: LIST
69350: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
69351: LD_ADDR_VAR 0 41
69355: PUSH
69356: LD_INT 0
69358: PUSH
69359: LD_INT 2
69361: NEG
69362: PUSH
69363: EMPTY
69364: LIST
69365: LIST
69366: PUSH
69367: LD_INT 1
69369: NEG
69370: PUSH
69371: LD_INT 3
69373: NEG
69374: PUSH
69375: EMPTY
69376: LIST
69377: LIST
69378: PUSH
69379: LD_INT 1
69381: PUSH
69382: LD_INT 2
69384: NEG
69385: PUSH
69386: EMPTY
69387: LIST
69388: LIST
69389: PUSH
69390: EMPTY
69391: LIST
69392: LIST
69393: LIST
69394: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
69395: LD_ADDR_VAR 0 42
69399: PUSH
69400: LD_INT 2
69402: PUSH
69403: LD_INT 0
69405: PUSH
69406: EMPTY
69407: LIST
69408: LIST
69409: PUSH
69410: LD_INT 2
69412: PUSH
69413: LD_INT 1
69415: NEG
69416: PUSH
69417: EMPTY
69418: LIST
69419: LIST
69420: PUSH
69421: LD_INT 3
69423: PUSH
69424: LD_INT 1
69426: PUSH
69427: EMPTY
69428: LIST
69429: LIST
69430: PUSH
69431: EMPTY
69432: LIST
69433: LIST
69434: LIST
69435: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
69436: LD_ADDR_VAR 0 43
69440: PUSH
69441: LD_INT 2
69443: PUSH
69444: LD_INT 2
69446: PUSH
69447: EMPTY
69448: LIST
69449: LIST
69450: PUSH
69451: LD_INT 3
69453: PUSH
69454: LD_INT 2
69456: PUSH
69457: EMPTY
69458: LIST
69459: LIST
69460: PUSH
69461: LD_INT 2
69463: PUSH
69464: LD_INT 3
69466: PUSH
69467: EMPTY
69468: LIST
69469: LIST
69470: PUSH
69471: EMPTY
69472: LIST
69473: LIST
69474: LIST
69475: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
69476: LD_ADDR_VAR 0 44
69480: PUSH
69481: LD_INT 0
69483: PUSH
69484: LD_INT 2
69486: PUSH
69487: EMPTY
69488: LIST
69489: LIST
69490: PUSH
69491: LD_INT 1
69493: PUSH
69494: LD_INT 3
69496: PUSH
69497: EMPTY
69498: LIST
69499: LIST
69500: PUSH
69501: LD_INT 1
69503: NEG
69504: PUSH
69505: LD_INT 2
69507: PUSH
69508: EMPTY
69509: LIST
69510: LIST
69511: PUSH
69512: EMPTY
69513: LIST
69514: LIST
69515: LIST
69516: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
69517: LD_ADDR_VAR 0 45
69521: PUSH
69522: LD_INT 2
69524: NEG
69525: PUSH
69526: LD_INT 0
69528: PUSH
69529: EMPTY
69530: LIST
69531: LIST
69532: PUSH
69533: LD_INT 2
69535: NEG
69536: PUSH
69537: LD_INT 1
69539: PUSH
69540: EMPTY
69541: LIST
69542: LIST
69543: PUSH
69544: LD_INT 3
69546: NEG
69547: PUSH
69548: LD_INT 1
69550: NEG
69551: PUSH
69552: EMPTY
69553: LIST
69554: LIST
69555: PUSH
69556: EMPTY
69557: LIST
69558: LIST
69559: LIST
69560: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
69561: LD_ADDR_VAR 0 46
69565: PUSH
69566: LD_INT 2
69568: NEG
69569: PUSH
69570: LD_INT 2
69572: NEG
69573: PUSH
69574: EMPTY
69575: LIST
69576: LIST
69577: PUSH
69578: LD_INT 2
69580: NEG
69581: PUSH
69582: LD_INT 3
69584: NEG
69585: PUSH
69586: EMPTY
69587: LIST
69588: LIST
69589: PUSH
69590: LD_INT 3
69592: NEG
69593: PUSH
69594: LD_INT 2
69596: NEG
69597: PUSH
69598: EMPTY
69599: LIST
69600: LIST
69601: PUSH
69602: EMPTY
69603: LIST
69604: LIST
69605: LIST
69606: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
69607: LD_ADDR_VAR 0 47
69611: PUSH
69612: LD_INT 2
69614: NEG
69615: PUSH
69616: LD_INT 3
69618: NEG
69619: PUSH
69620: EMPTY
69621: LIST
69622: LIST
69623: PUSH
69624: LD_INT 1
69626: NEG
69627: PUSH
69628: LD_INT 3
69630: NEG
69631: PUSH
69632: EMPTY
69633: LIST
69634: LIST
69635: PUSH
69636: EMPTY
69637: LIST
69638: LIST
69639: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
69640: LD_ADDR_VAR 0 48
69644: PUSH
69645: LD_INT 1
69647: PUSH
69648: LD_INT 2
69650: NEG
69651: PUSH
69652: EMPTY
69653: LIST
69654: LIST
69655: PUSH
69656: LD_INT 2
69658: PUSH
69659: LD_INT 1
69661: NEG
69662: PUSH
69663: EMPTY
69664: LIST
69665: LIST
69666: PUSH
69667: EMPTY
69668: LIST
69669: LIST
69670: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
69671: LD_ADDR_VAR 0 49
69675: PUSH
69676: LD_INT 3
69678: PUSH
69679: LD_INT 1
69681: PUSH
69682: EMPTY
69683: LIST
69684: LIST
69685: PUSH
69686: LD_INT 3
69688: PUSH
69689: LD_INT 2
69691: PUSH
69692: EMPTY
69693: LIST
69694: LIST
69695: PUSH
69696: EMPTY
69697: LIST
69698: LIST
69699: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
69700: LD_ADDR_VAR 0 50
69704: PUSH
69705: LD_INT 2
69707: PUSH
69708: LD_INT 3
69710: PUSH
69711: EMPTY
69712: LIST
69713: LIST
69714: PUSH
69715: LD_INT 1
69717: PUSH
69718: LD_INT 3
69720: PUSH
69721: EMPTY
69722: LIST
69723: LIST
69724: PUSH
69725: EMPTY
69726: LIST
69727: LIST
69728: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
69729: LD_ADDR_VAR 0 51
69733: PUSH
69734: LD_INT 1
69736: NEG
69737: PUSH
69738: LD_INT 2
69740: PUSH
69741: EMPTY
69742: LIST
69743: LIST
69744: PUSH
69745: LD_INT 2
69747: NEG
69748: PUSH
69749: LD_INT 1
69751: PUSH
69752: EMPTY
69753: LIST
69754: LIST
69755: PUSH
69756: EMPTY
69757: LIST
69758: LIST
69759: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
69760: LD_ADDR_VAR 0 52
69764: PUSH
69765: LD_INT 3
69767: NEG
69768: PUSH
69769: LD_INT 1
69771: NEG
69772: PUSH
69773: EMPTY
69774: LIST
69775: LIST
69776: PUSH
69777: LD_INT 3
69779: NEG
69780: PUSH
69781: LD_INT 2
69783: NEG
69784: PUSH
69785: EMPTY
69786: LIST
69787: LIST
69788: PUSH
69789: EMPTY
69790: LIST
69791: LIST
69792: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69793: LD_ADDR_VAR 0 53
69797: PUSH
69798: LD_INT 1
69800: NEG
69801: PUSH
69802: LD_INT 3
69804: NEG
69805: PUSH
69806: EMPTY
69807: LIST
69808: LIST
69809: PUSH
69810: LD_INT 0
69812: PUSH
69813: LD_INT 3
69815: NEG
69816: PUSH
69817: EMPTY
69818: LIST
69819: LIST
69820: PUSH
69821: LD_INT 1
69823: PUSH
69824: LD_INT 2
69826: NEG
69827: PUSH
69828: EMPTY
69829: LIST
69830: LIST
69831: PUSH
69832: EMPTY
69833: LIST
69834: LIST
69835: LIST
69836: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69837: LD_ADDR_VAR 0 54
69841: PUSH
69842: LD_INT 2
69844: PUSH
69845: LD_INT 1
69847: NEG
69848: PUSH
69849: EMPTY
69850: LIST
69851: LIST
69852: PUSH
69853: LD_INT 3
69855: PUSH
69856: LD_INT 0
69858: PUSH
69859: EMPTY
69860: LIST
69861: LIST
69862: PUSH
69863: LD_INT 3
69865: PUSH
69866: LD_INT 1
69868: PUSH
69869: EMPTY
69870: LIST
69871: LIST
69872: PUSH
69873: EMPTY
69874: LIST
69875: LIST
69876: LIST
69877: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69878: LD_ADDR_VAR 0 55
69882: PUSH
69883: LD_INT 3
69885: PUSH
69886: LD_INT 2
69888: PUSH
69889: EMPTY
69890: LIST
69891: LIST
69892: PUSH
69893: LD_INT 3
69895: PUSH
69896: LD_INT 3
69898: PUSH
69899: EMPTY
69900: LIST
69901: LIST
69902: PUSH
69903: LD_INT 2
69905: PUSH
69906: LD_INT 3
69908: PUSH
69909: EMPTY
69910: LIST
69911: LIST
69912: PUSH
69913: EMPTY
69914: LIST
69915: LIST
69916: LIST
69917: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69918: LD_ADDR_VAR 0 56
69922: PUSH
69923: LD_INT 1
69925: PUSH
69926: LD_INT 3
69928: PUSH
69929: EMPTY
69930: LIST
69931: LIST
69932: PUSH
69933: LD_INT 0
69935: PUSH
69936: LD_INT 3
69938: PUSH
69939: EMPTY
69940: LIST
69941: LIST
69942: PUSH
69943: LD_INT 1
69945: NEG
69946: PUSH
69947: LD_INT 2
69949: PUSH
69950: EMPTY
69951: LIST
69952: LIST
69953: PUSH
69954: EMPTY
69955: LIST
69956: LIST
69957: LIST
69958: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69959: LD_ADDR_VAR 0 57
69963: PUSH
69964: LD_INT 2
69966: NEG
69967: PUSH
69968: LD_INT 1
69970: PUSH
69971: EMPTY
69972: LIST
69973: LIST
69974: PUSH
69975: LD_INT 3
69977: NEG
69978: PUSH
69979: LD_INT 0
69981: PUSH
69982: EMPTY
69983: LIST
69984: LIST
69985: PUSH
69986: LD_INT 3
69988: NEG
69989: PUSH
69990: LD_INT 1
69992: NEG
69993: PUSH
69994: EMPTY
69995: LIST
69996: LIST
69997: PUSH
69998: EMPTY
69999: LIST
70000: LIST
70001: LIST
70002: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70003: LD_ADDR_VAR 0 58
70007: PUSH
70008: LD_INT 2
70010: NEG
70011: PUSH
70012: LD_INT 3
70014: NEG
70015: PUSH
70016: EMPTY
70017: LIST
70018: LIST
70019: PUSH
70020: LD_INT 3
70022: NEG
70023: PUSH
70024: LD_INT 2
70026: NEG
70027: PUSH
70028: EMPTY
70029: LIST
70030: LIST
70031: PUSH
70032: LD_INT 3
70034: NEG
70035: PUSH
70036: LD_INT 3
70038: NEG
70039: PUSH
70040: EMPTY
70041: LIST
70042: LIST
70043: PUSH
70044: EMPTY
70045: LIST
70046: LIST
70047: LIST
70048: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
70049: LD_ADDR_VAR 0 59
70053: PUSH
70054: LD_INT 1
70056: NEG
70057: PUSH
70058: LD_INT 2
70060: NEG
70061: PUSH
70062: EMPTY
70063: LIST
70064: LIST
70065: PUSH
70066: LD_INT 0
70068: PUSH
70069: LD_INT 2
70071: NEG
70072: PUSH
70073: EMPTY
70074: LIST
70075: LIST
70076: PUSH
70077: LD_INT 1
70079: PUSH
70080: LD_INT 1
70082: NEG
70083: PUSH
70084: EMPTY
70085: LIST
70086: LIST
70087: PUSH
70088: EMPTY
70089: LIST
70090: LIST
70091: LIST
70092: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
70093: LD_ADDR_VAR 0 60
70097: PUSH
70098: LD_INT 1
70100: PUSH
70101: LD_INT 1
70103: NEG
70104: PUSH
70105: EMPTY
70106: LIST
70107: LIST
70108: PUSH
70109: LD_INT 2
70111: PUSH
70112: LD_INT 0
70114: PUSH
70115: EMPTY
70116: LIST
70117: LIST
70118: PUSH
70119: LD_INT 2
70121: PUSH
70122: LD_INT 1
70124: PUSH
70125: EMPTY
70126: LIST
70127: LIST
70128: PUSH
70129: EMPTY
70130: LIST
70131: LIST
70132: LIST
70133: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
70134: LD_ADDR_VAR 0 61
70138: PUSH
70139: LD_INT 2
70141: PUSH
70142: LD_INT 1
70144: PUSH
70145: EMPTY
70146: LIST
70147: LIST
70148: PUSH
70149: LD_INT 2
70151: PUSH
70152: LD_INT 2
70154: PUSH
70155: EMPTY
70156: LIST
70157: LIST
70158: PUSH
70159: LD_INT 1
70161: PUSH
70162: LD_INT 2
70164: PUSH
70165: EMPTY
70166: LIST
70167: LIST
70168: PUSH
70169: EMPTY
70170: LIST
70171: LIST
70172: LIST
70173: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
70174: LD_ADDR_VAR 0 62
70178: PUSH
70179: LD_INT 1
70181: PUSH
70182: LD_INT 2
70184: PUSH
70185: EMPTY
70186: LIST
70187: LIST
70188: PUSH
70189: LD_INT 0
70191: PUSH
70192: LD_INT 2
70194: PUSH
70195: EMPTY
70196: LIST
70197: LIST
70198: PUSH
70199: LD_INT 1
70201: NEG
70202: PUSH
70203: LD_INT 1
70205: PUSH
70206: EMPTY
70207: LIST
70208: LIST
70209: PUSH
70210: EMPTY
70211: LIST
70212: LIST
70213: LIST
70214: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
70215: LD_ADDR_VAR 0 63
70219: PUSH
70220: LD_INT 1
70222: NEG
70223: PUSH
70224: LD_INT 1
70226: PUSH
70227: EMPTY
70228: LIST
70229: LIST
70230: PUSH
70231: LD_INT 2
70233: NEG
70234: PUSH
70235: LD_INT 0
70237: PUSH
70238: EMPTY
70239: LIST
70240: LIST
70241: PUSH
70242: LD_INT 2
70244: NEG
70245: PUSH
70246: LD_INT 1
70248: NEG
70249: PUSH
70250: EMPTY
70251: LIST
70252: LIST
70253: PUSH
70254: EMPTY
70255: LIST
70256: LIST
70257: LIST
70258: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70259: LD_ADDR_VAR 0 64
70263: PUSH
70264: LD_INT 1
70266: NEG
70267: PUSH
70268: LD_INT 2
70270: NEG
70271: PUSH
70272: EMPTY
70273: LIST
70274: LIST
70275: PUSH
70276: LD_INT 2
70278: NEG
70279: PUSH
70280: LD_INT 1
70282: NEG
70283: PUSH
70284: EMPTY
70285: LIST
70286: LIST
70287: PUSH
70288: LD_INT 2
70290: NEG
70291: PUSH
70292: LD_INT 2
70294: NEG
70295: PUSH
70296: EMPTY
70297: LIST
70298: LIST
70299: PUSH
70300: EMPTY
70301: LIST
70302: LIST
70303: LIST
70304: ST_TO_ADDR
// end ; 2 :
70305: GO 73571
70307: LD_INT 2
70309: DOUBLE
70310: EQUAL
70311: IFTRUE 70315
70313: GO 73570
70315: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
70316: LD_ADDR_VAR 0 29
70320: PUSH
70321: LD_INT 4
70323: PUSH
70324: LD_INT 0
70326: PUSH
70327: EMPTY
70328: LIST
70329: LIST
70330: PUSH
70331: LD_INT 4
70333: PUSH
70334: LD_INT 1
70336: NEG
70337: PUSH
70338: EMPTY
70339: LIST
70340: LIST
70341: PUSH
70342: LD_INT 5
70344: PUSH
70345: LD_INT 0
70347: PUSH
70348: EMPTY
70349: LIST
70350: LIST
70351: PUSH
70352: LD_INT 5
70354: PUSH
70355: LD_INT 1
70357: PUSH
70358: EMPTY
70359: LIST
70360: LIST
70361: PUSH
70362: LD_INT 4
70364: PUSH
70365: LD_INT 1
70367: PUSH
70368: EMPTY
70369: LIST
70370: LIST
70371: PUSH
70372: LD_INT 3
70374: PUSH
70375: LD_INT 0
70377: PUSH
70378: EMPTY
70379: LIST
70380: LIST
70381: PUSH
70382: LD_INT 3
70384: PUSH
70385: LD_INT 1
70387: NEG
70388: PUSH
70389: EMPTY
70390: LIST
70391: LIST
70392: PUSH
70393: LD_INT 3
70395: PUSH
70396: LD_INT 2
70398: NEG
70399: PUSH
70400: EMPTY
70401: LIST
70402: LIST
70403: PUSH
70404: LD_INT 5
70406: PUSH
70407: LD_INT 2
70409: PUSH
70410: EMPTY
70411: LIST
70412: LIST
70413: PUSH
70414: LD_INT 3
70416: PUSH
70417: LD_INT 3
70419: PUSH
70420: EMPTY
70421: LIST
70422: LIST
70423: PUSH
70424: LD_INT 3
70426: PUSH
70427: LD_INT 2
70429: PUSH
70430: EMPTY
70431: LIST
70432: LIST
70433: PUSH
70434: LD_INT 4
70436: PUSH
70437: LD_INT 3
70439: PUSH
70440: EMPTY
70441: LIST
70442: LIST
70443: PUSH
70444: LD_INT 4
70446: PUSH
70447: LD_INT 4
70449: PUSH
70450: EMPTY
70451: LIST
70452: LIST
70453: PUSH
70454: LD_INT 3
70456: PUSH
70457: LD_INT 4
70459: PUSH
70460: EMPTY
70461: LIST
70462: LIST
70463: PUSH
70464: LD_INT 2
70466: PUSH
70467: LD_INT 3
70469: PUSH
70470: EMPTY
70471: LIST
70472: LIST
70473: PUSH
70474: LD_INT 2
70476: PUSH
70477: LD_INT 2
70479: PUSH
70480: EMPTY
70481: LIST
70482: LIST
70483: PUSH
70484: LD_INT 4
70486: PUSH
70487: LD_INT 2
70489: PUSH
70490: EMPTY
70491: LIST
70492: LIST
70493: PUSH
70494: LD_INT 2
70496: PUSH
70497: LD_INT 4
70499: PUSH
70500: EMPTY
70501: LIST
70502: LIST
70503: PUSH
70504: LD_INT 0
70506: PUSH
70507: LD_INT 4
70509: PUSH
70510: EMPTY
70511: LIST
70512: LIST
70513: PUSH
70514: LD_INT 0
70516: PUSH
70517: LD_INT 3
70519: PUSH
70520: EMPTY
70521: LIST
70522: LIST
70523: PUSH
70524: LD_INT 1
70526: PUSH
70527: LD_INT 4
70529: PUSH
70530: EMPTY
70531: LIST
70532: LIST
70533: PUSH
70534: LD_INT 1
70536: PUSH
70537: LD_INT 5
70539: PUSH
70540: EMPTY
70541: LIST
70542: LIST
70543: PUSH
70544: LD_INT 0
70546: PUSH
70547: LD_INT 5
70549: PUSH
70550: EMPTY
70551: LIST
70552: LIST
70553: PUSH
70554: LD_INT 1
70556: NEG
70557: PUSH
70558: LD_INT 4
70560: PUSH
70561: EMPTY
70562: LIST
70563: LIST
70564: PUSH
70565: LD_INT 1
70567: NEG
70568: PUSH
70569: LD_INT 3
70571: PUSH
70572: EMPTY
70573: LIST
70574: LIST
70575: PUSH
70576: LD_INT 2
70578: PUSH
70579: LD_INT 5
70581: PUSH
70582: EMPTY
70583: LIST
70584: LIST
70585: PUSH
70586: LD_INT 2
70588: NEG
70589: PUSH
70590: LD_INT 3
70592: PUSH
70593: EMPTY
70594: LIST
70595: LIST
70596: PUSH
70597: LD_INT 3
70599: NEG
70600: PUSH
70601: LD_INT 0
70603: PUSH
70604: EMPTY
70605: LIST
70606: LIST
70607: PUSH
70608: LD_INT 3
70610: NEG
70611: PUSH
70612: LD_INT 1
70614: NEG
70615: PUSH
70616: EMPTY
70617: LIST
70618: LIST
70619: PUSH
70620: LD_INT 2
70622: NEG
70623: PUSH
70624: LD_INT 0
70626: PUSH
70627: EMPTY
70628: LIST
70629: LIST
70630: PUSH
70631: LD_INT 2
70633: NEG
70634: PUSH
70635: LD_INT 1
70637: PUSH
70638: EMPTY
70639: LIST
70640: LIST
70641: PUSH
70642: LD_INT 3
70644: NEG
70645: PUSH
70646: LD_INT 1
70648: PUSH
70649: EMPTY
70650: LIST
70651: LIST
70652: PUSH
70653: LD_INT 4
70655: NEG
70656: PUSH
70657: LD_INT 0
70659: PUSH
70660: EMPTY
70661: LIST
70662: LIST
70663: PUSH
70664: LD_INT 4
70666: NEG
70667: PUSH
70668: LD_INT 1
70670: NEG
70671: PUSH
70672: EMPTY
70673: LIST
70674: LIST
70675: PUSH
70676: LD_INT 4
70678: NEG
70679: PUSH
70680: LD_INT 2
70682: NEG
70683: PUSH
70684: EMPTY
70685: LIST
70686: LIST
70687: PUSH
70688: LD_INT 2
70690: NEG
70691: PUSH
70692: LD_INT 2
70694: PUSH
70695: EMPTY
70696: LIST
70697: LIST
70698: PUSH
70699: LD_INT 4
70701: NEG
70702: PUSH
70703: LD_INT 4
70705: NEG
70706: PUSH
70707: EMPTY
70708: LIST
70709: LIST
70710: PUSH
70711: LD_INT 4
70713: NEG
70714: PUSH
70715: LD_INT 5
70717: NEG
70718: PUSH
70719: EMPTY
70720: LIST
70721: LIST
70722: PUSH
70723: LD_INT 3
70725: NEG
70726: PUSH
70727: LD_INT 4
70729: NEG
70730: PUSH
70731: EMPTY
70732: LIST
70733: LIST
70734: PUSH
70735: LD_INT 3
70737: NEG
70738: PUSH
70739: LD_INT 3
70741: NEG
70742: PUSH
70743: EMPTY
70744: LIST
70745: LIST
70746: PUSH
70747: LD_INT 4
70749: NEG
70750: PUSH
70751: LD_INT 3
70753: NEG
70754: PUSH
70755: EMPTY
70756: LIST
70757: LIST
70758: PUSH
70759: LD_INT 5
70761: NEG
70762: PUSH
70763: LD_INT 4
70765: NEG
70766: PUSH
70767: EMPTY
70768: LIST
70769: LIST
70770: PUSH
70771: LD_INT 5
70773: NEG
70774: PUSH
70775: LD_INT 5
70777: NEG
70778: PUSH
70779: EMPTY
70780: LIST
70781: LIST
70782: PUSH
70783: LD_INT 3
70785: NEG
70786: PUSH
70787: LD_INT 5
70789: NEG
70790: PUSH
70791: EMPTY
70792: LIST
70793: LIST
70794: PUSH
70795: LD_INT 5
70797: NEG
70798: PUSH
70799: LD_INT 3
70801: NEG
70802: PUSH
70803: EMPTY
70804: LIST
70805: LIST
70806: PUSH
70807: EMPTY
70808: LIST
70809: LIST
70810: LIST
70811: LIST
70812: LIST
70813: LIST
70814: LIST
70815: LIST
70816: LIST
70817: LIST
70818: LIST
70819: LIST
70820: LIST
70821: LIST
70822: LIST
70823: LIST
70824: LIST
70825: LIST
70826: LIST
70827: LIST
70828: LIST
70829: LIST
70830: LIST
70831: LIST
70832: LIST
70833: LIST
70834: LIST
70835: LIST
70836: LIST
70837: LIST
70838: LIST
70839: LIST
70840: LIST
70841: LIST
70842: LIST
70843: LIST
70844: LIST
70845: LIST
70846: LIST
70847: LIST
70848: LIST
70849: LIST
70850: LIST
70851: LIST
70852: LIST
70853: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
70854: LD_ADDR_VAR 0 30
70858: PUSH
70859: LD_INT 4
70861: PUSH
70862: LD_INT 4
70864: PUSH
70865: EMPTY
70866: LIST
70867: LIST
70868: PUSH
70869: LD_INT 4
70871: PUSH
70872: LD_INT 3
70874: PUSH
70875: EMPTY
70876: LIST
70877: LIST
70878: PUSH
70879: LD_INT 5
70881: PUSH
70882: LD_INT 4
70884: PUSH
70885: EMPTY
70886: LIST
70887: LIST
70888: PUSH
70889: LD_INT 5
70891: PUSH
70892: LD_INT 5
70894: PUSH
70895: EMPTY
70896: LIST
70897: LIST
70898: PUSH
70899: LD_INT 4
70901: PUSH
70902: LD_INT 5
70904: PUSH
70905: EMPTY
70906: LIST
70907: LIST
70908: PUSH
70909: LD_INT 3
70911: PUSH
70912: LD_INT 4
70914: PUSH
70915: EMPTY
70916: LIST
70917: LIST
70918: PUSH
70919: LD_INT 3
70921: PUSH
70922: LD_INT 3
70924: PUSH
70925: EMPTY
70926: LIST
70927: LIST
70928: PUSH
70929: LD_INT 5
70931: PUSH
70932: LD_INT 3
70934: PUSH
70935: EMPTY
70936: LIST
70937: LIST
70938: PUSH
70939: LD_INT 3
70941: PUSH
70942: LD_INT 5
70944: PUSH
70945: EMPTY
70946: LIST
70947: LIST
70948: PUSH
70949: LD_INT 0
70951: PUSH
70952: LD_INT 3
70954: PUSH
70955: EMPTY
70956: LIST
70957: LIST
70958: PUSH
70959: LD_INT 0
70961: PUSH
70962: LD_INT 2
70964: PUSH
70965: EMPTY
70966: LIST
70967: LIST
70968: PUSH
70969: LD_INT 1
70971: PUSH
70972: LD_INT 3
70974: PUSH
70975: EMPTY
70976: LIST
70977: LIST
70978: PUSH
70979: LD_INT 1
70981: PUSH
70982: LD_INT 4
70984: PUSH
70985: EMPTY
70986: LIST
70987: LIST
70988: PUSH
70989: LD_INT 0
70991: PUSH
70992: LD_INT 4
70994: PUSH
70995: EMPTY
70996: LIST
70997: LIST
70998: PUSH
70999: LD_INT 1
71001: NEG
71002: PUSH
71003: LD_INT 3
71005: PUSH
71006: EMPTY
71007: LIST
71008: LIST
71009: PUSH
71010: LD_INT 1
71012: NEG
71013: PUSH
71014: LD_INT 2
71016: PUSH
71017: EMPTY
71018: LIST
71019: LIST
71020: PUSH
71021: LD_INT 2
71023: PUSH
71024: LD_INT 4
71026: PUSH
71027: EMPTY
71028: LIST
71029: LIST
71030: PUSH
71031: LD_INT 2
71033: NEG
71034: PUSH
71035: LD_INT 2
71037: PUSH
71038: EMPTY
71039: LIST
71040: LIST
71041: PUSH
71042: LD_INT 4
71044: NEG
71045: PUSH
71046: LD_INT 0
71048: PUSH
71049: EMPTY
71050: LIST
71051: LIST
71052: PUSH
71053: LD_INT 4
71055: NEG
71056: PUSH
71057: LD_INT 1
71059: NEG
71060: PUSH
71061: EMPTY
71062: LIST
71063: LIST
71064: PUSH
71065: LD_INT 3
71067: NEG
71068: PUSH
71069: LD_INT 0
71071: PUSH
71072: EMPTY
71073: LIST
71074: LIST
71075: PUSH
71076: LD_INT 3
71078: NEG
71079: PUSH
71080: LD_INT 1
71082: PUSH
71083: EMPTY
71084: LIST
71085: LIST
71086: PUSH
71087: LD_INT 4
71089: NEG
71090: PUSH
71091: LD_INT 1
71093: PUSH
71094: EMPTY
71095: LIST
71096: LIST
71097: PUSH
71098: LD_INT 5
71100: NEG
71101: PUSH
71102: LD_INT 0
71104: PUSH
71105: EMPTY
71106: LIST
71107: LIST
71108: PUSH
71109: LD_INT 5
71111: NEG
71112: PUSH
71113: LD_INT 1
71115: NEG
71116: PUSH
71117: EMPTY
71118: LIST
71119: LIST
71120: PUSH
71121: LD_INT 5
71123: NEG
71124: PUSH
71125: LD_INT 2
71127: NEG
71128: PUSH
71129: EMPTY
71130: LIST
71131: LIST
71132: PUSH
71133: LD_INT 3
71135: NEG
71136: PUSH
71137: LD_INT 2
71139: PUSH
71140: EMPTY
71141: LIST
71142: LIST
71143: PUSH
71144: LD_INT 3
71146: NEG
71147: PUSH
71148: LD_INT 3
71150: NEG
71151: PUSH
71152: EMPTY
71153: LIST
71154: LIST
71155: PUSH
71156: LD_INT 3
71158: NEG
71159: PUSH
71160: LD_INT 4
71162: NEG
71163: PUSH
71164: EMPTY
71165: LIST
71166: LIST
71167: PUSH
71168: LD_INT 2
71170: NEG
71171: PUSH
71172: LD_INT 3
71174: NEG
71175: PUSH
71176: EMPTY
71177: LIST
71178: LIST
71179: PUSH
71180: LD_INT 2
71182: NEG
71183: PUSH
71184: LD_INT 2
71186: NEG
71187: PUSH
71188: EMPTY
71189: LIST
71190: LIST
71191: PUSH
71192: LD_INT 3
71194: NEG
71195: PUSH
71196: LD_INT 2
71198: NEG
71199: PUSH
71200: EMPTY
71201: LIST
71202: LIST
71203: PUSH
71204: LD_INT 4
71206: NEG
71207: PUSH
71208: LD_INT 3
71210: NEG
71211: PUSH
71212: EMPTY
71213: LIST
71214: LIST
71215: PUSH
71216: LD_INT 4
71218: NEG
71219: PUSH
71220: LD_INT 4
71222: NEG
71223: PUSH
71224: EMPTY
71225: LIST
71226: LIST
71227: PUSH
71228: LD_INT 2
71230: NEG
71231: PUSH
71232: LD_INT 4
71234: NEG
71235: PUSH
71236: EMPTY
71237: LIST
71238: LIST
71239: PUSH
71240: LD_INT 4
71242: NEG
71243: PUSH
71244: LD_INT 2
71246: NEG
71247: PUSH
71248: EMPTY
71249: LIST
71250: LIST
71251: PUSH
71252: LD_INT 0
71254: PUSH
71255: LD_INT 4
71257: NEG
71258: PUSH
71259: EMPTY
71260: LIST
71261: LIST
71262: PUSH
71263: LD_INT 0
71265: PUSH
71266: LD_INT 5
71268: NEG
71269: PUSH
71270: EMPTY
71271: LIST
71272: LIST
71273: PUSH
71274: LD_INT 1
71276: PUSH
71277: LD_INT 4
71279: NEG
71280: PUSH
71281: EMPTY
71282: LIST
71283: LIST
71284: PUSH
71285: LD_INT 1
71287: PUSH
71288: LD_INT 3
71290: NEG
71291: PUSH
71292: EMPTY
71293: LIST
71294: LIST
71295: PUSH
71296: LD_INT 0
71298: PUSH
71299: LD_INT 3
71301: NEG
71302: PUSH
71303: EMPTY
71304: LIST
71305: LIST
71306: PUSH
71307: LD_INT 1
71309: NEG
71310: PUSH
71311: LD_INT 4
71313: NEG
71314: PUSH
71315: EMPTY
71316: LIST
71317: LIST
71318: PUSH
71319: LD_INT 1
71321: NEG
71322: PUSH
71323: LD_INT 5
71325: NEG
71326: PUSH
71327: EMPTY
71328: LIST
71329: LIST
71330: PUSH
71331: LD_INT 2
71333: PUSH
71334: LD_INT 3
71336: NEG
71337: PUSH
71338: EMPTY
71339: LIST
71340: LIST
71341: PUSH
71342: LD_INT 2
71344: NEG
71345: PUSH
71346: LD_INT 5
71348: NEG
71349: PUSH
71350: EMPTY
71351: LIST
71352: LIST
71353: PUSH
71354: EMPTY
71355: LIST
71356: LIST
71357: LIST
71358: LIST
71359: LIST
71360: LIST
71361: LIST
71362: LIST
71363: LIST
71364: LIST
71365: LIST
71366: LIST
71367: LIST
71368: LIST
71369: LIST
71370: LIST
71371: LIST
71372: LIST
71373: LIST
71374: LIST
71375: LIST
71376: LIST
71377: LIST
71378: LIST
71379: LIST
71380: LIST
71381: LIST
71382: LIST
71383: LIST
71384: LIST
71385: LIST
71386: LIST
71387: LIST
71388: LIST
71389: LIST
71390: LIST
71391: LIST
71392: LIST
71393: LIST
71394: LIST
71395: LIST
71396: LIST
71397: LIST
71398: LIST
71399: LIST
71400: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
71401: LD_ADDR_VAR 0 31
71405: PUSH
71406: LD_INT 0
71408: PUSH
71409: LD_INT 4
71411: PUSH
71412: EMPTY
71413: LIST
71414: LIST
71415: PUSH
71416: LD_INT 0
71418: PUSH
71419: LD_INT 3
71421: PUSH
71422: EMPTY
71423: LIST
71424: LIST
71425: PUSH
71426: LD_INT 1
71428: PUSH
71429: LD_INT 4
71431: PUSH
71432: EMPTY
71433: LIST
71434: LIST
71435: PUSH
71436: LD_INT 1
71438: PUSH
71439: LD_INT 5
71441: PUSH
71442: EMPTY
71443: LIST
71444: LIST
71445: PUSH
71446: LD_INT 0
71448: PUSH
71449: LD_INT 5
71451: PUSH
71452: EMPTY
71453: LIST
71454: LIST
71455: PUSH
71456: LD_INT 1
71458: NEG
71459: PUSH
71460: LD_INT 4
71462: PUSH
71463: EMPTY
71464: LIST
71465: LIST
71466: PUSH
71467: LD_INT 1
71469: NEG
71470: PUSH
71471: LD_INT 3
71473: PUSH
71474: EMPTY
71475: LIST
71476: LIST
71477: PUSH
71478: LD_INT 2
71480: PUSH
71481: LD_INT 5
71483: PUSH
71484: EMPTY
71485: LIST
71486: LIST
71487: PUSH
71488: LD_INT 2
71490: NEG
71491: PUSH
71492: LD_INT 3
71494: PUSH
71495: EMPTY
71496: LIST
71497: LIST
71498: PUSH
71499: LD_INT 3
71501: NEG
71502: PUSH
71503: LD_INT 0
71505: PUSH
71506: EMPTY
71507: LIST
71508: LIST
71509: PUSH
71510: LD_INT 3
71512: NEG
71513: PUSH
71514: LD_INT 1
71516: NEG
71517: PUSH
71518: EMPTY
71519: LIST
71520: LIST
71521: PUSH
71522: LD_INT 2
71524: NEG
71525: PUSH
71526: LD_INT 0
71528: PUSH
71529: EMPTY
71530: LIST
71531: LIST
71532: PUSH
71533: LD_INT 2
71535: NEG
71536: PUSH
71537: LD_INT 1
71539: PUSH
71540: EMPTY
71541: LIST
71542: LIST
71543: PUSH
71544: LD_INT 3
71546: NEG
71547: PUSH
71548: LD_INT 1
71550: PUSH
71551: EMPTY
71552: LIST
71553: LIST
71554: PUSH
71555: LD_INT 4
71557: NEG
71558: PUSH
71559: LD_INT 0
71561: PUSH
71562: EMPTY
71563: LIST
71564: LIST
71565: PUSH
71566: LD_INT 4
71568: NEG
71569: PUSH
71570: LD_INT 1
71572: NEG
71573: PUSH
71574: EMPTY
71575: LIST
71576: LIST
71577: PUSH
71578: LD_INT 4
71580: NEG
71581: PUSH
71582: LD_INT 2
71584: NEG
71585: PUSH
71586: EMPTY
71587: LIST
71588: LIST
71589: PUSH
71590: LD_INT 2
71592: NEG
71593: PUSH
71594: LD_INT 2
71596: PUSH
71597: EMPTY
71598: LIST
71599: LIST
71600: PUSH
71601: LD_INT 4
71603: NEG
71604: PUSH
71605: LD_INT 4
71607: NEG
71608: PUSH
71609: EMPTY
71610: LIST
71611: LIST
71612: PUSH
71613: LD_INT 4
71615: NEG
71616: PUSH
71617: LD_INT 5
71619: NEG
71620: PUSH
71621: EMPTY
71622: LIST
71623: LIST
71624: PUSH
71625: LD_INT 3
71627: NEG
71628: PUSH
71629: LD_INT 4
71631: NEG
71632: PUSH
71633: EMPTY
71634: LIST
71635: LIST
71636: PUSH
71637: LD_INT 3
71639: NEG
71640: PUSH
71641: LD_INT 3
71643: NEG
71644: PUSH
71645: EMPTY
71646: LIST
71647: LIST
71648: PUSH
71649: LD_INT 4
71651: NEG
71652: PUSH
71653: LD_INT 3
71655: NEG
71656: PUSH
71657: EMPTY
71658: LIST
71659: LIST
71660: PUSH
71661: LD_INT 5
71663: NEG
71664: PUSH
71665: LD_INT 4
71667: NEG
71668: PUSH
71669: EMPTY
71670: LIST
71671: LIST
71672: PUSH
71673: LD_INT 5
71675: NEG
71676: PUSH
71677: LD_INT 5
71679: NEG
71680: PUSH
71681: EMPTY
71682: LIST
71683: LIST
71684: PUSH
71685: LD_INT 3
71687: NEG
71688: PUSH
71689: LD_INT 5
71691: NEG
71692: PUSH
71693: EMPTY
71694: LIST
71695: LIST
71696: PUSH
71697: LD_INT 5
71699: NEG
71700: PUSH
71701: LD_INT 3
71703: NEG
71704: PUSH
71705: EMPTY
71706: LIST
71707: LIST
71708: PUSH
71709: LD_INT 0
71711: PUSH
71712: LD_INT 3
71714: NEG
71715: PUSH
71716: EMPTY
71717: LIST
71718: LIST
71719: PUSH
71720: LD_INT 0
71722: PUSH
71723: LD_INT 4
71725: NEG
71726: PUSH
71727: EMPTY
71728: LIST
71729: LIST
71730: PUSH
71731: LD_INT 1
71733: PUSH
71734: LD_INT 3
71736: NEG
71737: PUSH
71738: EMPTY
71739: LIST
71740: LIST
71741: PUSH
71742: LD_INT 1
71744: PUSH
71745: LD_INT 2
71747: NEG
71748: PUSH
71749: EMPTY
71750: LIST
71751: LIST
71752: PUSH
71753: LD_INT 0
71755: PUSH
71756: LD_INT 2
71758: NEG
71759: PUSH
71760: EMPTY
71761: LIST
71762: LIST
71763: PUSH
71764: LD_INT 1
71766: NEG
71767: PUSH
71768: LD_INT 3
71770: NEG
71771: PUSH
71772: EMPTY
71773: LIST
71774: LIST
71775: PUSH
71776: LD_INT 1
71778: NEG
71779: PUSH
71780: LD_INT 4
71782: NEG
71783: PUSH
71784: EMPTY
71785: LIST
71786: LIST
71787: PUSH
71788: LD_INT 2
71790: PUSH
71791: LD_INT 2
71793: NEG
71794: PUSH
71795: EMPTY
71796: LIST
71797: LIST
71798: PUSH
71799: LD_INT 2
71801: NEG
71802: PUSH
71803: LD_INT 4
71805: NEG
71806: PUSH
71807: EMPTY
71808: LIST
71809: LIST
71810: PUSH
71811: LD_INT 4
71813: PUSH
71814: LD_INT 0
71816: PUSH
71817: EMPTY
71818: LIST
71819: LIST
71820: PUSH
71821: LD_INT 4
71823: PUSH
71824: LD_INT 1
71826: NEG
71827: PUSH
71828: EMPTY
71829: LIST
71830: LIST
71831: PUSH
71832: LD_INT 5
71834: PUSH
71835: LD_INT 0
71837: PUSH
71838: EMPTY
71839: LIST
71840: LIST
71841: PUSH
71842: LD_INT 5
71844: PUSH
71845: LD_INT 1
71847: PUSH
71848: EMPTY
71849: LIST
71850: LIST
71851: PUSH
71852: LD_INT 4
71854: PUSH
71855: LD_INT 1
71857: PUSH
71858: EMPTY
71859: LIST
71860: LIST
71861: PUSH
71862: LD_INT 3
71864: PUSH
71865: LD_INT 0
71867: PUSH
71868: EMPTY
71869: LIST
71870: LIST
71871: PUSH
71872: LD_INT 3
71874: PUSH
71875: LD_INT 1
71877: NEG
71878: PUSH
71879: EMPTY
71880: LIST
71881: LIST
71882: PUSH
71883: LD_INT 3
71885: PUSH
71886: LD_INT 2
71888: NEG
71889: PUSH
71890: EMPTY
71891: LIST
71892: LIST
71893: PUSH
71894: LD_INT 5
71896: PUSH
71897: LD_INT 2
71899: PUSH
71900: EMPTY
71901: LIST
71902: LIST
71903: PUSH
71904: EMPTY
71905: LIST
71906: LIST
71907: LIST
71908: LIST
71909: LIST
71910: LIST
71911: LIST
71912: LIST
71913: LIST
71914: LIST
71915: LIST
71916: LIST
71917: LIST
71918: LIST
71919: LIST
71920: LIST
71921: LIST
71922: LIST
71923: LIST
71924: LIST
71925: LIST
71926: LIST
71927: LIST
71928: LIST
71929: LIST
71930: LIST
71931: LIST
71932: LIST
71933: LIST
71934: LIST
71935: LIST
71936: LIST
71937: LIST
71938: LIST
71939: LIST
71940: LIST
71941: LIST
71942: LIST
71943: LIST
71944: LIST
71945: LIST
71946: LIST
71947: LIST
71948: LIST
71949: LIST
71950: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
71951: LD_ADDR_VAR 0 32
71955: PUSH
71956: LD_INT 4
71958: NEG
71959: PUSH
71960: LD_INT 0
71962: PUSH
71963: EMPTY
71964: LIST
71965: LIST
71966: PUSH
71967: LD_INT 4
71969: NEG
71970: PUSH
71971: LD_INT 1
71973: NEG
71974: PUSH
71975: EMPTY
71976: LIST
71977: LIST
71978: PUSH
71979: LD_INT 3
71981: NEG
71982: PUSH
71983: LD_INT 0
71985: PUSH
71986: EMPTY
71987: LIST
71988: LIST
71989: PUSH
71990: LD_INT 3
71992: NEG
71993: PUSH
71994: LD_INT 1
71996: PUSH
71997: EMPTY
71998: LIST
71999: LIST
72000: PUSH
72001: LD_INT 4
72003: NEG
72004: PUSH
72005: LD_INT 1
72007: PUSH
72008: EMPTY
72009: LIST
72010: LIST
72011: PUSH
72012: LD_INT 5
72014: NEG
72015: PUSH
72016: LD_INT 0
72018: PUSH
72019: EMPTY
72020: LIST
72021: LIST
72022: PUSH
72023: LD_INT 5
72025: NEG
72026: PUSH
72027: LD_INT 1
72029: NEG
72030: PUSH
72031: EMPTY
72032: LIST
72033: LIST
72034: PUSH
72035: LD_INT 5
72037: NEG
72038: PUSH
72039: LD_INT 2
72041: NEG
72042: PUSH
72043: EMPTY
72044: LIST
72045: LIST
72046: PUSH
72047: LD_INT 3
72049: NEG
72050: PUSH
72051: LD_INT 2
72053: PUSH
72054: EMPTY
72055: LIST
72056: LIST
72057: PUSH
72058: LD_INT 3
72060: NEG
72061: PUSH
72062: LD_INT 3
72064: NEG
72065: PUSH
72066: EMPTY
72067: LIST
72068: LIST
72069: PUSH
72070: LD_INT 3
72072: NEG
72073: PUSH
72074: LD_INT 4
72076: NEG
72077: PUSH
72078: EMPTY
72079: LIST
72080: LIST
72081: PUSH
72082: LD_INT 2
72084: NEG
72085: PUSH
72086: LD_INT 3
72088: NEG
72089: PUSH
72090: EMPTY
72091: LIST
72092: LIST
72093: PUSH
72094: LD_INT 2
72096: NEG
72097: PUSH
72098: LD_INT 2
72100: NEG
72101: PUSH
72102: EMPTY
72103: LIST
72104: LIST
72105: PUSH
72106: LD_INT 3
72108: NEG
72109: PUSH
72110: LD_INT 2
72112: NEG
72113: PUSH
72114: EMPTY
72115: LIST
72116: LIST
72117: PUSH
72118: LD_INT 4
72120: NEG
72121: PUSH
72122: LD_INT 3
72124: NEG
72125: PUSH
72126: EMPTY
72127: LIST
72128: LIST
72129: PUSH
72130: LD_INT 4
72132: NEG
72133: PUSH
72134: LD_INT 4
72136: NEG
72137: PUSH
72138: EMPTY
72139: LIST
72140: LIST
72141: PUSH
72142: LD_INT 2
72144: NEG
72145: PUSH
72146: LD_INT 4
72148: NEG
72149: PUSH
72150: EMPTY
72151: LIST
72152: LIST
72153: PUSH
72154: LD_INT 4
72156: NEG
72157: PUSH
72158: LD_INT 2
72160: NEG
72161: PUSH
72162: EMPTY
72163: LIST
72164: LIST
72165: PUSH
72166: LD_INT 0
72168: PUSH
72169: LD_INT 4
72171: NEG
72172: PUSH
72173: EMPTY
72174: LIST
72175: LIST
72176: PUSH
72177: LD_INT 0
72179: PUSH
72180: LD_INT 5
72182: NEG
72183: PUSH
72184: EMPTY
72185: LIST
72186: LIST
72187: PUSH
72188: LD_INT 1
72190: PUSH
72191: LD_INT 4
72193: NEG
72194: PUSH
72195: EMPTY
72196: LIST
72197: LIST
72198: PUSH
72199: LD_INT 1
72201: PUSH
72202: LD_INT 3
72204: NEG
72205: PUSH
72206: EMPTY
72207: LIST
72208: LIST
72209: PUSH
72210: LD_INT 0
72212: PUSH
72213: LD_INT 3
72215: NEG
72216: PUSH
72217: EMPTY
72218: LIST
72219: LIST
72220: PUSH
72221: LD_INT 1
72223: NEG
72224: PUSH
72225: LD_INT 4
72227: NEG
72228: PUSH
72229: EMPTY
72230: LIST
72231: LIST
72232: PUSH
72233: LD_INT 1
72235: NEG
72236: PUSH
72237: LD_INT 5
72239: NEG
72240: PUSH
72241: EMPTY
72242: LIST
72243: LIST
72244: PUSH
72245: LD_INT 2
72247: PUSH
72248: LD_INT 3
72250: NEG
72251: PUSH
72252: EMPTY
72253: LIST
72254: LIST
72255: PUSH
72256: LD_INT 2
72258: NEG
72259: PUSH
72260: LD_INT 5
72262: NEG
72263: PUSH
72264: EMPTY
72265: LIST
72266: LIST
72267: PUSH
72268: LD_INT 3
72270: PUSH
72271: LD_INT 0
72273: PUSH
72274: EMPTY
72275: LIST
72276: LIST
72277: PUSH
72278: LD_INT 3
72280: PUSH
72281: LD_INT 1
72283: NEG
72284: PUSH
72285: EMPTY
72286: LIST
72287: LIST
72288: PUSH
72289: LD_INT 4
72291: PUSH
72292: LD_INT 0
72294: PUSH
72295: EMPTY
72296: LIST
72297: LIST
72298: PUSH
72299: LD_INT 4
72301: PUSH
72302: LD_INT 1
72304: PUSH
72305: EMPTY
72306: LIST
72307: LIST
72308: PUSH
72309: LD_INT 3
72311: PUSH
72312: LD_INT 1
72314: PUSH
72315: EMPTY
72316: LIST
72317: LIST
72318: PUSH
72319: LD_INT 2
72321: PUSH
72322: LD_INT 0
72324: PUSH
72325: EMPTY
72326: LIST
72327: LIST
72328: PUSH
72329: LD_INT 2
72331: PUSH
72332: LD_INT 1
72334: NEG
72335: PUSH
72336: EMPTY
72337: LIST
72338: LIST
72339: PUSH
72340: LD_INT 2
72342: PUSH
72343: LD_INT 2
72345: NEG
72346: PUSH
72347: EMPTY
72348: LIST
72349: LIST
72350: PUSH
72351: LD_INT 4
72353: PUSH
72354: LD_INT 2
72356: PUSH
72357: EMPTY
72358: LIST
72359: LIST
72360: PUSH
72361: LD_INT 4
72363: PUSH
72364: LD_INT 4
72366: PUSH
72367: EMPTY
72368: LIST
72369: LIST
72370: PUSH
72371: LD_INT 4
72373: PUSH
72374: LD_INT 3
72376: PUSH
72377: EMPTY
72378: LIST
72379: LIST
72380: PUSH
72381: LD_INT 5
72383: PUSH
72384: LD_INT 4
72386: PUSH
72387: EMPTY
72388: LIST
72389: LIST
72390: PUSH
72391: LD_INT 5
72393: PUSH
72394: LD_INT 5
72396: PUSH
72397: EMPTY
72398: LIST
72399: LIST
72400: PUSH
72401: LD_INT 4
72403: PUSH
72404: LD_INT 5
72406: PUSH
72407: EMPTY
72408: LIST
72409: LIST
72410: PUSH
72411: LD_INT 3
72413: PUSH
72414: LD_INT 4
72416: PUSH
72417: EMPTY
72418: LIST
72419: LIST
72420: PUSH
72421: LD_INT 3
72423: PUSH
72424: LD_INT 3
72426: PUSH
72427: EMPTY
72428: LIST
72429: LIST
72430: PUSH
72431: LD_INT 5
72433: PUSH
72434: LD_INT 3
72436: PUSH
72437: EMPTY
72438: LIST
72439: LIST
72440: PUSH
72441: LD_INT 3
72443: PUSH
72444: LD_INT 5
72446: PUSH
72447: EMPTY
72448: LIST
72449: LIST
72450: PUSH
72451: EMPTY
72452: LIST
72453: LIST
72454: LIST
72455: LIST
72456: LIST
72457: LIST
72458: LIST
72459: LIST
72460: LIST
72461: LIST
72462: LIST
72463: LIST
72464: LIST
72465: LIST
72466: LIST
72467: LIST
72468: LIST
72469: LIST
72470: LIST
72471: LIST
72472: LIST
72473: LIST
72474: LIST
72475: LIST
72476: LIST
72477: LIST
72478: LIST
72479: LIST
72480: LIST
72481: LIST
72482: LIST
72483: LIST
72484: LIST
72485: LIST
72486: LIST
72487: LIST
72488: LIST
72489: LIST
72490: LIST
72491: LIST
72492: LIST
72493: LIST
72494: LIST
72495: LIST
72496: LIST
72497: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
72498: LD_ADDR_VAR 0 33
72502: PUSH
72503: LD_INT 4
72505: NEG
72506: PUSH
72507: LD_INT 4
72509: NEG
72510: PUSH
72511: EMPTY
72512: LIST
72513: LIST
72514: PUSH
72515: LD_INT 4
72517: NEG
72518: PUSH
72519: LD_INT 5
72521: NEG
72522: PUSH
72523: EMPTY
72524: LIST
72525: LIST
72526: PUSH
72527: LD_INT 3
72529: NEG
72530: PUSH
72531: LD_INT 4
72533: NEG
72534: PUSH
72535: EMPTY
72536: LIST
72537: LIST
72538: PUSH
72539: LD_INT 3
72541: NEG
72542: PUSH
72543: LD_INT 3
72545: NEG
72546: PUSH
72547: EMPTY
72548: LIST
72549: LIST
72550: PUSH
72551: LD_INT 4
72553: NEG
72554: PUSH
72555: LD_INT 3
72557: NEG
72558: PUSH
72559: EMPTY
72560: LIST
72561: LIST
72562: PUSH
72563: LD_INT 5
72565: NEG
72566: PUSH
72567: LD_INT 4
72569: NEG
72570: PUSH
72571: EMPTY
72572: LIST
72573: LIST
72574: PUSH
72575: LD_INT 5
72577: NEG
72578: PUSH
72579: LD_INT 5
72581: NEG
72582: PUSH
72583: EMPTY
72584: LIST
72585: LIST
72586: PUSH
72587: LD_INT 3
72589: NEG
72590: PUSH
72591: LD_INT 5
72593: NEG
72594: PUSH
72595: EMPTY
72596: LIST
72597: LIST
72598: PUSH
72599: LD_INT 5
72601: NEG
72602: PUSH
72603: LD_INT 3
72605: NEG
72606: PUSH
72607: EMPTY
72608: LIST
72609: LIST
72610: PUSH
72611: LD_INT 0
72613: PUSH
72614: LD_INT 3
72616: NEG
72617: PUSH
72618: EMPTY
72619: LIST
72620: LIST
72621: PUSH
72622: LD_INT 0
72624: PUSH
72625: LD_INT 4
72627: NEG
72628: PUSH
72629: EMPTY
72630: LIST
72631: LIST
72632: PUSH
72633: LD_INT 1
72635: PUSH
72636: LD_INT 3
72638: NEG
72639: PUSH
72640: EMPTY
72641: LIST
72642: LIST
72643: PUSH
72644: LD_INT 1
72646: PUSH
72647: LD_INT 2
72649: NEG
72650: PUSH
72651: EMPTY
72652: LIST
72653: LIST
72654: PUSH
72655: LD_INT 0
72657: PUSH
72658: LD_INT 2
72660: NEG
72661: PUSH
72662: EMPTY
72663: LIST
72664: LIST
72665: PUSH
72666: LD_INT 1
72668: NEG
72669: PUSH
72670: LD_INT 3
72672: NEG
72673: PUSH
72674: EMPTY
72675: LIST
72676: LIST
72677: PUSH
72678: LD_INT 1
72680: NEG
72681: PUSH
72682: LD_INT 4
72684: NEG
72685: PUSH
72686: EMPTY
72687: LIST
72688: LIST
72689: PUSH
72690: LD_INT 2
72692: PUSH
72693: LD_INT 2
72695: NEG
72696: PUSH
72697: EMPTY
72698: LIST
72699: LIST
72700: PUSH
72701: LD_INT 2
72703: NEG
72704: PUSH
72705: LD_INT 4
72707: NEG
72708: PUSH
72709: EMPTY
72710: LIST
72711: LIST
72712: PUSH
72713: LD_INT 4
72715: PUSH
72716: LD_INT 0
72718: PUSH
72719: EMPTY
72720: LIST
72721: LIST
72722: PUSH
72723: LD_INT 4
72725: PUSH
72726: LD_INT 1
72728: NEG
72729: PUSH
72730: EMPTY
72731: LIST
72732: LIST
72733: PUSH
72734: LD_INT 5
72736: PUSH
72737: LD_INT 0
72739: PUSH
72740: EMPTY
72741: LIST
72742: LIST
72743: PUSH
72744: LD_INT 5
72746: PUSH
72747: LD_INT 1
72749: PUSH
72750: EMPTY
72751: LIST
72752: LIST
72753: PUSH
72754: LD_INT 4
72756: PUSH
72757: LD_INT 1
72759: PUSH
72760: EMPTY
72761: LIST
72762: LIST
72763: PUSH
72764: LD_INT 3
72766: PUSH
72767: LD_INT 0
72769: PUSH
72770: EMPTY
72771: LIST
72772: LIST
72773: PUSH
72774: LD_INT 3
72776: PUSH
72777: LD_INT 1
72779: NEG
72780: PUSH
72781: EMPTY
72782: LIST
72783: LIST
72784: PUSH
72785: LD_INT 3
72787: PUSH
72788: LD_INT 2
72790: NEG
72791: PUSH
72792: EMPTY
72793: LIST
72794: LIST
72795: PUSH
72796: LD_INT 5
72798: PUSH
72799: LD_INT 2
72801: PUSH
72802: EMPTY
72803: LIST
72804: LIST
72805: PUSH
72806: LD_INT 3
72808: PUSH
72809: LD_INT 3
72811: PUSH
72812: EMPTY
72813: LIST
72814: LIST
72815: PUSH
72816: LD_INT 3
72818: PUSH
72819: LD_INT 2
72821: PUSH
72822: EMPTY
72823: LIST
72824: LIST
72825: PUSH
72826: LD_INT 4
72828: PUSH
72829: LD_INT 3
72831: PUSH
72832: EMPTY
72833: LIST
72834: LIST
72835: PUSH
72836: LD_INT 4
72838: PUSH
72839: LD_INT 4
72841: PUSH
72842: EMPTY
72843: LIST
72844: LIST
72845: PUSH
72846: LD_INT 3
72848: PUSH
72849: LD_INT 4
72851: PUSH
72852: EMPTY
72853: LIST
72854: LIST
72855: PUSH
72856: LD_INT 2
72858: PUSH
72859: LD_INT 3
72861: PUSH
72862: EMPTY
72863: LIST
72864: LIST
72865: PUSH
72866: LD_INT 2
72868: PUSH
72869: LD_INT 2
72871: PUSH
72872: EMPTY
72873: LIST
72874: LIST
72875: PUSH
72876: LD_INT 4
72878: PUSH
72879: LD_INT 2
72881: PUSH
72882: EMPTY
72883: LIST
72884: LIST
72885: PUSH
72886: LD_INT 2
72888: PUSH
72889: LD_INT 4
72891: PUSH
72892: EMPTY
72893: LIST
72894: LIST
72895: PUSH
72896: LD_INT 0
72898: PUSH
72899: LD_INT 4
72901: PUSH
72902: EMPTY
72903: LIST
72904: LIST
72905: PUSH
72906: LD_INT 0
72908: PUSH
72909: LD_INT 3
72911: PUSH
72912: EMPTY
72913: LIST
72914: LIST
72915: PUSH
72916: LD_INT 1
72918: PUSH
72919: LD_INT 4
72921: PUSH
72922: EMPTY
72923: LIST
72924: LIST
72925: PUSH
72926: LD_INT 1
72928: PUSH
72929: LD_INT 5
72931: PUSH
72932: EMPTY
72933: LIST
72934: LIST
72935: PUSH
72936: LD_INT 0
72938: PUSH
72939: LD_INT 5
72941: PUSH
72942: EMPTY
72943: LIST
72944: LIST
72945: PUSH
72946: LD_INT 1
72948: NEG
72949: PUSH
72950: LD_INT 4
72952: PUSH
72953: EMPTY
72954: LIST
72955: LIST
72956: PUSH
72957: LD_INT 1
72959: NEG
72960: PUSH
72961: LD_INT 3
72963: PUSH
72964: EMPTY
72965: LIST
72966: LIST
72967: PUSH
72968: LD_INT 2
72970: PUSH
72971: LD_INT 5
72973: PUSH
72974: EMPTY
72975: LIST
72976: LIST
72977: PUSH
72978: LD_INT 2
72980: NEG
72981: PUSH
72982: LD_INT 3
72984: PUSH
72985: EMPTY
72986: LIST
72987: LIST
72988: PUSH
72989: EMPTY
72990: LIST
72991: LIST
72992: LIST
72993: LIST
72994: LIST
72995: LIST
72996: LIST
72997: LIST
72998: LIST
72999: LIST
73000: LIST
73001: LIST
73002: LIST
73003: LIST
73004: LIST
73005: LIST
73006: LIST
73007: LIST
73008: LIST
73009: LIST
73010: LIST
73011: LIST
73012: LIST
73013: LIST
73014: LIST
73015: LIST
73016: LIST
73017: LIST
73018: LIST
73019: LIST
73020: LIST
73021: LIST
73022: LIST
73023: LIST
73024: LIST
73025: LIST
73026: LIST
73027: LIST
73028: LIST
73029: LIST
73030: LIST
73031: LIST
73032: LIST
73033: LIST
73034: LIST
73035: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
73036: LD_ADDR_VAR 0 34
73040: PUSH
73041: LD_INT 0
73043: PUSH
73044: LD_INT 4
73046: NEG
73047: PUSH
73048: EMPTY
73049: LIST
73050: LIST
73051: PUSH
73052: LD_INT 0
73054: PUSH
73055: LD_INT 5
73057: NEG
73058: PUSH
73059: EMPTY
73060: LIST
73061: LIST
73062: PUSH
73063: LD_INT 1
73065: PUSH
73066: LD_INT 4
73068: NEG
73069: PUSH
73070: EMPTY
73071: LIST
73072: LIST
73073: PUSH
73074: LD_INT 1
73076: PUSH
73077: LD_INT 3
73079: NEG
73080: PUSH
73081: EMPTY
73082: LIST
73083: LIST
73084: PUSH
73085: LD_INT 0
73087: PUSH
73088: LD_INT 3
73090: NEG
73091: PUSH
73092: EMPTY
73093: LIST
73094: LIST
73095: PUSH
73096: LD_INT 1
73098: NEG
73099: PUSH
73100: LD_INT 4
73102: NEG
73103: PUSH
73104: EMPTY
73105: LIST
73106: LIST
73107: PUSH
73108: LD_INT 1
73110: NEG
73111: PUSH
73112: LD_INT 5
73114: NEG
73115: PUSH
73116: EMPTY
73117: LIST
73118: LIST
73119: PUSH
73120: LD_INT 2
73122: PUSH
73123: LD_INT 3
73125: NEG
73126: PUSH
73127: EMPTY
73128: LIST
73129: LIST
73130: PUSH
73131: LD_INT 2
73133: NEG
73134: PUSH
73135: LD_INT 5
73137: NEG
73138: PUSH
73139: EMPTY
73140: LIST
73141: LIST
73142: PUSH
73143: LD_INT 3
73145: PUSH
73146: LD_INT 0
73148: PUSH
73149: EMPTY
73150: LIST
73151: LIST
73152: PUSH
73153: LD_INT 3
73155: PUSH
73156: LD_INT 1
73158: NEG
73159: PUSH
73160: EMPTY
73161: LIST
73162: LIST
73163: PUSH
73164: LD_INT 4
73166: PUSH
73167: LD_INT 0
73169: PUSH
73170: EMPTY
73171: LIST
73172: LIST
73173: PUSH
73174: LD_INT 4
73176: PUSH
73177: LD_INT 1
73179: PUSH
73180: EMPTY
73181: LIST
73182: LIST
73183: PUSH
73184: LD_INT 3
73186: PUSH
73187: LD_INT 1
73189: PUSH
73190: EMPTY
73191: LIST
73192: LIST
73193: PUSH
73194: LD_INT 2
73196: PUSH
73197: LD_INT 0
73199: PUSH
73200: EMPTY
73201: LIST
73202: LIST
73203: PUSH
73204: LD_INT 2
73206: PUSH
73207: LD_INT 1
73209: NEG
73210: PUSH
73211: EMPTY
73212: LIST
73213: LIST
73214: PUSH
73215: LD_INT 2
73217: PUSH
73218: LD_INT 2
73220: NEG
73221: PUSH
73222: EMPTY
73223: LIST
73224: LIST
73225: PUSH
73226: LD_INT 4
73228: PUSH
73229: LD_INT 2
73231: PUSH
73232: EMPTY
73233: LIST
73234: LIST
73235: PUSH
73236: LD_INT 4
73238: PUSH
73239: LD_INT 4
73241: PUSH
73242: EMPTY
73243: LIST
73244: LIST
73245: PUSH
73246: LD_INT 4
73248: PUSH
73249: LD_INT 3
73251: PUSH
73252: EMPTY
73253: LIST
73254: LIST
73255: PUSH
73256: LD_INT 5
73258: PUSH
73259: LD_INT 4
73261: PUSH
73262: EMPTY
73263: LIST
73264: LIST
73265: PUSH
73266: LD_INT 5
73268: PUSH
73269: LD_INT 5
73271: PUSH
73272: EMPTY
73273: LIST
73274: LIST
73275: PUSH
73276: LD_INT 4
73278: PUSH
73279: LD_INT 5
73281: PUSH
73282: EMPTY
73283: LIST
73284: LIST
73285: PUSH
73286: LD_INT 3
73288: PUSH
73289: LD_INT 4
73291: PUSH
73292: EMPTY
73293: LIST
73294: LIST
73295: PUSH
73296: LD_INT 3
73298: PUSH
73299: LD_INT 3
73301: PUSH
73302: EMPTY
73303: LIST
73304: LIST
73305: PUSH
73306: LD_INT 5
73308: PUSH
73309: LD_INT 3
73311: PUSH
73312: EMPTY
73313: LIST
73314: LIST
73315: PUSH
73316: LD_INT 3
73318: PUSH
73319: LD_INT 5
73321: PUSH
73322: EMPTY
73323: LIST
73324: LIST
73325: PUSH
73326: LD_INT 0
73328: PUSH
73329: LD_INT 3
73331: PUSH
73332: EMPTY
73333: LIST
73334: LIST
73335: PUSH
73336: LD_INT 0
73338: PUSH
73339: LD_INT 2
73341: PUSH
73342: EMPTY
73343: LIST
73344: LIST
73345: PUSH
73346: LD_INT 1
73348: PUSH
73349: LD_INT 3
73351: PUSH
73352: EMPTY
73353: LIST
73354: LIST
73355: PUSH
73356: LD_INT 1
73358: PUSH
73359: LD_INT 4
73361: PUSH
73362: EMPTY
73363: LIST
73364: LIST
73365: PUSH
73366: LD_INT 0
73368: PUSH
73369: LD_INT 4
73371: PUSH
73372: EMPTY
73373: LIST
73374: LIST
73375: PUSH
73376: LD_INT 1
73378: NEG
73379: PUSH
73380: LD_INT 3
73382: PUSH
73383: EMPTY
73384: LIST
73385: LIST
73386: PUSH
73387: LD_INT 1
73389: NEG
73390: PUSH
73391: LD_INT 2
73393: PUSH
73394: EMPTY
73395: LIST
73396: LIST
73397: PUSH
73398: LD_INT 2
73400: PUSH
73401: LD_INT 4
73403: PUSH
73404: EMPTY
73405: LIST
73406: LIST
73407: PUSH
73408: LD_INT 2
73410: NEG
73411: PUSH
73412: LD_INT 2
73414: PUSH
73415: EMPTY
73416: LIST
73417: LIST
73418: PUSH
73419: LD_INT 4
73421: NEG
73422: PUSH
73423: LD_INT 0
73425: PUSH
73426: EMPTY
73427: LIST
73428: LIST
73429: PUSH
73430: LD_INT 4
73432: NEG
73433: PUSH
73434: LD_INT 1
73436: NEG
73437: PUSH
73438: EMPTY
73439: LIST
73440: LIST
73441: PUSH
73442: LD_INT 3
73444: NEG
73445: PUSH
73446: LD_INT 0
73448: PUSH
73449: EMPTY
73450: LIST
73451: LIST
73452: PUSH
73453: LD_INT 3
73455: NEG
73456: PUSH
73457: LD_INT 1
73459: PUSH
73460: EMPTY
73461: LIST
73462: LIST
73463: PUSH
73464: LD_INT 4
73466: NEG
73467: PUSH
73468: LD_INT 1
73470: PUSH
73471: EMPTY
73472: LIST
73473: LIST
73474: PUSH
73475: LD_INT 5
73477: NEG
73478: PUSH
73479: LD_INT 0
73481: PUSH
73482: EMPTY
73483: LIST
73484: LIST
73485: PUSH
73486: LD_INT 5
73488: NEG
73489: PUSH
73490: LD_INT 1
73492: NEG
73493: PUSH
73494: EMPTY
73495: LIST
73496: LIST
73497: PUSH
73498: LD_INT 5
73500: NEG
73501: PUSH
73502: LD_INT 2
73504: NEG
73505: PUSH
73506: EMPTY
73507: LIST
73508: LIST
73509: PUSH
73510: LD_INT 3
73512: NEG
73513: PUSH
73514: LD_INT 2
73516: PUSH
73517: EMPTY
73518: LIST
73519: LIST
73520: PUSH
73521: EMPTY
73522: LIST
73523: LIST
73524: LIST
73525: LIST
73526: LIST
73527: LIST
73528: LIST
73529: LIST
73530: LIST
73531: LIST
73532: LIST
73533: LIST
73534: LIST
73535: LIST
73536: LIST
73537: LIST
73538: LIST
73539: LIST
73540: LIST
73541: LIST
73542: LIST
73543: LIST
73544: LIST
73545: LIST
73546: LIST
73547: LIST
73548: LIST
73549: LIST
73550: LIST
73551: LIST
73552: LIST
73553: LIST
73554: LIST
73555: LIST
73556: LIST
73557: LIST
73558: LIST
73559: LIST
73560: LIST
73561: LIST
73562: LIST
73563: LIST
73564: LIST
73565: LIST
73566: LIST
73567: ST_TO_ADDR
// end ; end ;
73568: GO 73571
73570: POP
// case btype of b_depot , b_warehouse :
73571: LD_VAR 0 1
73575: PUSH
73576: LD_INT 0
73578: DOUBLE
73579: EQUAL
73580: IFTRUE 73590
73582: LD_INT 1
73584: DOUBLE
73585: EQUAL
73586: IFTRUE 73590
73588: GO 73791
73590: POP
// case nation of nation_american :
73591: LD_VAR 0 5
73595: PUSH
73596: LD_INT 1
73598: DOUBLE
73599: EQUAL
73600: IFTRUE 73604
73602: GO 73660
73604: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
73605: LD_ADDR_VAR 0 9
73609: PUSH
73610: LD_VAR 0 11
73614: PUSH
73615: LD_VAR 0 12
73619: PUSH
73620: LD_VAR 0 13
73624: PUSH
73625: LD_VAR 0 14
73629: PUSH
73630: LD_VAR 0 15
73634: PUSH
73635: LD_VAR 0 16
73639: PUSH
73640: EMPTY
73641: LIST
73642: LIST
73643: LIST
73644: LIST
73645: LIST
73646: LIST
73647: PUSH
73648: LD_VAR 0 4
73652: PUSH
73653: LD_INT 1
73655: PLUS
73656: ARRAY
73657: ST_TO_ADDR
73658: GO 73789
73660: LD_INT 2
73662: DOUBLE
73663: EQUAL
73664: IFTRUE 73668
73666: GO 73724
73668: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
73669: LD_ADDR_VAR 0 9
73673: PUSH
73674: LD_VAR 0 17
73678: PUSH
73679: LD_VAR 0 18
73683: PUSH
73684: LD_VAR 0 19
73688: PUSH
73689: LD_VAR 0 20
73693: PUSH
73694: LD_VAR 0 21
73698: PUSH
73699: LD_VAR 0 22
73703: PUSH
73704: EMPTY
73705: LIST
73706: LIST
73707: LIST
73708: LIST
73709: LIST
73710: LIST
73711: PUSH
73712: LD_VAR 0 4
73716: PUSH
73717: LD_INT 1
73719: PLUS
73720: ARRAY
73721: ST_TO_ADDR
73722: GO 73789
73724: LD_INT 3
73726: DOUBLE
73727: EQUAL
73728: IFTRUE 73732
73730: GO 73788
73732: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
73733: LD_ADDR_VAR 0 9
73737: PUSH
73738: LD_VAR 0 23
73742: PUSH
73743: LD_VAR 0 24
73747: PUSH
73748: LD_VAR 0 25
73752: PUSH
73753: LD_VAR 0 26
73757: PUSH
73758: LD_VAR 0 27
73762: PUSH
73763: LD_VAR 0 28
73767: PUSH
73768: EMPTY
73769: LIST
73770: LIST
73771: LIST
73772: LIST
73773: LIST
73774: LIST
73775: PUSH
73776: LD_VAR 0 4
73780: PUSH
73781: LD_INT 1
73783: PLUS
73784: ARRAY
73785: ST_TO_ADDR
73786: GO 73789
73788: POP
73789: GO 74344
73791: LD_INT 2
73793: DOUBLE
73794: EQUAL
73795: IFTRUE 73805
73797: LD_INT 3
73799: DOUBLE
73800: EQUAL
73801: IFTRUE 73805
73803: GO 73861
73805: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
73806: LD_ADDR_VAR 0 9
73810: PUSH
73811: LD_VAR 0 29
73815: PUSH
73816: LD_VAR 0 30
73820: PUSH
73821: LD_VAR 0 31
73825: PUSH
73826: LD_VAR 0 32
73830: PUSH
73831: LD_VAR 0 33
73835: PUSH
73836: LD_VAR 0 34
73840: PUSH
73841: EMPTY
73842: LIST
73843: LIST
73844: LIST
73845: LIST
73846: LIST
73847: LIST
73848: PUSH
73849: LD_VAR 0 4
73853: PUSH
73854: LD_INT 1
73856: PLUS
73857: ARRAY
73858: ST_TO_ADDR
73859: GO 74344
73861: LD_INT 16
73863: DOUBLE
73864: EQUAL
73865: IFTRUE 73923
73867: LD_INT 17
73869: DOUBLE
73870: EQUAL
73871: IFTRUE 73923
73873: LD_INT 18
73875: DOUBLE
73876: EQUAL
73877: IFTRUE 73923
73879: LD_INT 19
73881: DOUBLE
73882: EQUAL
73883: IFTRUE 73923
73885: LD_INT 22
73887: DOUBLE
73888: EQUAL
73889: IFTRUE 73923
73891: LD_INT 20
73893: DOUBLE
73894: EQUAL
73895: IFTRUE 73923
73897: LD_INT 21
73899: DOUBLE
73900: EQUAL
73901: IFTRUE 73923
73903: LD_INT 23
73905: DOUBLE
73906: EQUAL
73907: IFTRUE 73923
73909: LD_INT 24
73911: DOUBLE
73912: EQUAL
73913: IFTRUE 73923
73915: LD_INT 25
73917: DOUBLE
73918: EQUAL
73919: IFTRUE 73923
73921: GO 73979
73923: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
73924: LD_ADDR_VAR 0 9
73928: PUSH
73929: LD_VAR 0 35
73933: PUSH
73934: LD_VAR 0 36
73938: PUSH
73939: LD_VAR 0 37
73943: PUSH
73944: LD_VAR 0 38
73948: PUSH
73949: LD_VAR 0 39
73953: PUSH
73954: LD_VAR 0 40
73958: PUSH
73959: EMPTY
73960: LIST
73961: LIST
73962: LIST
73963: LIST
73964: LIST
73965: LIST
73966: PUSH
73967: LD_VAR 0 4
73971: PUSH
73972: LD_INT 1
73974: PLUS
73975: ARRAY
73976: ST_TO_ADDR
73977: GO 74344
73979: LD_INT 6
73981: DOUBLE
73982: EQUAL
73983: IFTRUE 74035
73985: LD_INT 7
73987: DOUBLE
73988: EQUAL
73989: IFTRUE 74035
73991: LD_INT 8
73993: DOUBLE
73994: EQUAL
73995: IFTRUE 74035
73997: LD_INT 13
73999: DOUBLE
74000: EQUAL
74001: IFTRUE 74035
74003: LD_INT 12
74005: DOUBLE
74006: EQUAL
74007: IFTRUE 74035
74009: LD_INT 15
74011: DOUBLE
74012: EQUAL
74013: IFTRUE 74035
74015: LD_INT 11
74017: DOUBLE
74018: EQUAL
74019: IFTRUE 74035
74021: LD_INT 14
74023: DOUBLE
74024: EQUAL
74025: IFTRUE 74035
74027: LD_INT 10
74029: DOUBLE
74030: EQUAL
74031: IFTRUE 74035
74033: GO 74091
74035: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
74036: LD_ADDR_VAR 0 9
74040: PUSH
74041: LD_VAR 0 41
74045: PUSH
74046: LD_VAR 0 42
74050: PUSH
74051: LD_VAR 0 43
74055: PUSH
74056: LD_VAR 0 44
74060: PUSH
74061: LD_VAR 0 45
74065: PUSH
74066: LD_VAR 0 46
74070: PUSH
74071: EMPTY
74072: LIST
74073: LIST
74074: LIST
74075: LIST
74076: LIST
74077: LIST
74078: PUSH
74079: LD_VAR 0 4
74083: PUSH
74084: LD_INT 1
74086: PLUS
74087: ARRAY
74088: ST_TO_ADDR
74089: GO 74344
74091: LD_INT 36
74093: DOUBLE
74094: EQUAL
74095: IFTRUE 74099
74097: GO 74155
74099: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
74100: LD_ADDR_VAR 0 9
74104: PUSH
74105: LD_VAR 0 47
74109: PUSH
74110: LD_VAR 0 48
74114: PUSH
74115: LD_VAR 0 49
74119: PUSH
74120: LD_VAR 0 50
74124: PUSH
74125: LD_VAR 0 51
74129: PUSH
74130: LD_VAR 0 52
74134: PUSH
74135: EMPTY
74136: LIST
74137: LIST
74138: LIST
74139: LIST
74140: LIST
74141: LIST
74142: PUSH
74143: LD_VAR 0 4
74147: PUSH
74148: LD_INT 1
74150: PLUS
74151: ARRAY
74152: ST_TO_ADDR
74153: GO 74344
74155: LD_INT 4
74157: DOUBLE
74158: EQUAL
74159: IFTRUE 74181
74161: LD_INT 5
74163: DOUBLE
74164: EQUAL
74165: IFTRUE 74181
74167: LD_INT 34
74169: DOUBLE
74170: EQUAL
74171: IFTRUE 74181
74173: LD_INT 37
74175: DOUBLE
74176: EQUAL
74177: IFTRUE 74181
74179: GO 74237
74181: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
74182: LD_ADDR_VAR 0 9
74186: PUSH
74187: LD_VAR 0 53
74191: PUSH
74192: LD_VAR 0 54
74196: PUSH
74197: LD_VAR 0 55
74201: PUSH
74202: LD_VAR 0 56
74206: PUSH
74207: LD_VAR 0 57
74211: PUSH
74212: LD_VAR 0 58
74216: PUSH
74217: EMPTY
74218: LIST
74219: LIST
74220: LIST
74221: LIST
74222: LIST
74223: LIST
74224: PUSH
74225: LD_VAR 0 4
74229: PUSH
74230: LD_INT 1
74232: PLUS
74233: ARRAY
74234: ST_TO_ADDR
74235: GO 74344
74237: LD_INT 31
74239: DOUBLE
74240: EQUAL
74241: IFTRUE 74287
74243: LD_INT 32
74245: DOUBLE
74246: EQUAL
74247: IFTRUE 74287
74249: LD_INT 33
74251: DOUBLE
74252: EQUAL
74253: IFTRUE 74287
74255: LD_INT 27
74257: DOUBLE
74258: EQUAL
74259: IFTRUE 74287
74261: LD_INT 26
74263: DOUBLE
74264: EQUAL
74265: IFTRUE 74287
74267: LD_INT 28
74269: DOUBLE
74270: EQUAL
74271: IFTRUE 74287
74273: LD_INT 29
74275: DOUBLE
74276: EQUAL
74277: IFTRUE 74287
74279: LD_INT 30
74281: DOUBLE
74282: EQUAL
74283: IFTRUE 74287
74285: GO 74343
74287: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
74288: LD_ADDR_VAR 0 9
74292: PUSH
74293: LD_VAR 0 59
74297: PUSH
74298: LD_VAR 0 60
74302: PUSH
74303: LD_VAR 0 61
74307: PUSH
74308: LD_VAR 0 62
74312: PUSH
74313: LD_VAR 0 63
74317: PUSH
74318: LD_VAR 0 64
74322: PUSH
74323: EMPTY
74324: LIST
74325: LIST
74326: LIST
74327: LIST
74328: LIST
74329: LIST
74330: PUSH
74331: LD_VAR 0 4
74335: PUSH
74336: LD_INT 1
74338: PLUS
74339: ARRAY
74340: ST_TO_ADDR
74341: GO 74344
74343: POP
// temp_list2 = [ ] ;
74344: LD_ADDR_VAR 0 10
74348: PUSH
74349: EMPTY
74350: ST_TO_ADDR
// for i in temp_list do
74351: LD_ADDR_VAR 0 8
74355: PUSH
74356: LD_VAR 0 9
74360: PUSH
74361: FOR_IN
74362: IFFALSE 74414
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
74364: LD_ADDR_VAR 0 10
74368: PUSH
74369: LD_VAR 0 10
74373: PUSH
74374: LD_VAR 0 8
74378: PUSH
74379: LD_INT 1
74381: ARRAY
74382: PUSH
74383: LD_VAR 0 2
74387: PLUS
74388: PUSH
74389: LD_VAR 0 8
74393: PUSH
74394: LD_INT 2
74396: ARRAY
74397: PUSH
74398: LD_VAR 0 3
74402: PLUS
74403: PUSH
74404: EMPTY
74405: LIST
74406: LIST
74407: PUSH
74408: EMPTY
74409: LIST
74410: ADD
74411: ST_TO_ADDR
74412: GO 74361
74414: POP
74415: POP
// result = temp_list2 ;
74416: LD_ADDR_VAR 0 7
74420: PUSH
74421: LD_VAR 0 10
74425: ST_TO_ADDR
// end ;
74426: LD_VAR 0 7
74430: RET
// export function EnemyInRange ( unit , dist ) ; begin
74431: LD_INT 0
74433: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
74434: LD_ADDR_VAR 0 3
74438: PUSH
74439: LD_VAR 0 1
74443: PPUSH
74444: CALL_OW 255
74448: PPUSH
74449: LD_VAR 0 1
74453: PPUSH
74454: CALL_OW 250
74458: PPUSH
74459: LD_VAR 0 1
74463: PPUSH
74464: CALL_OW 251
74468: PPUSH
74469: LD_VAR 0 2
74473: PPUSH
74474: CALL 47688 0 4
74478: PUSH
74479: LD_INT 4
74481: ARRAY
74482: ST_TO_ADDR
// end ;
74483: LD_VAR 0 3
74487: RET
// export function PlayerSeeMe ( unit ) ; begin
74488: LD_INT 0
74490: PPUSH
// result := See ( your_side , unit ) ;
74491: LD_ADDR_VAR 0 2
74495: PUSH
74496: LD_OWVAR 2
74500: PPUSH
74501: LD_VAR 0 1
74505: PPUSH
74506: CALL_OW 292
74510: ST_TO_ADDR
// end ;
74511: LD_VAR 0 2
74515: RET
// export function ReverseDir ( unit ) ; begin
74516: LD_INT 0
74518: PPUSH
// if not unit then
74519: LD_VAR 0 1
74523: NOT
74524: IFFALSE 74528
// exit ;
74526: GO 74551
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
74528: LD_ADDR_VAR 0 2
74532: PUSH
74533: LD_VAR 0 1
74537: PPUSH
74538: CALL_OW 254
74542: PUSH
74543: LD_INT 3
74545: PLUS
74546: PUSH
74547: LD_INT 6
74549: MOD
74550: ST_TO_ADDR
// end ;
74551: LD_VAR 0 2
74555: RET
// export function ReverseArray ( array ) ; var i ; begin
74556: LD_INT 0
74558: PPUSH
74559: PPUSH
// if not array then
74560: LD_VAR 0 1
74564: NOT
74565: IFFALSE 74569
// exit ;
74567: GO 74624
// result := [ ] ;
74569: LD_ADDR_VAR 0 2
74573: PUSH
74574: EMPTY
74575: ST_TO_ADDR
// for i := array downto 1 do
74576: LD_ADDR_VAR 0 3
74580: PUSH
74581: DOUBLE
74582: LD_VAR 0 1
74586: INC
74587: ST_TO_ADDR
74588: LD_INT 1
74590: PUSH
74591: FOR_DOWNTO
74592: IFFALSE 74622
// result := Join ( result , array [ i ] ) ;
74594: LD_ADDR_VAR 0 2
74598: PUSH
74599: LD_VAR 0 2
74603: PPUSH
74604: LD_VAR 0 1
74608: PUSH
74609: LD_VAR 0 3
74613: ARRAY
74614: PPUSH
74615: CALL 79466 0 2
74619: ST_TO_ADDR
74620: GO 74591
74622: POP
74623: POP
// end ;
74624: LD_VAR 0 2
74628: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
74629: LD_INT 0
74631: PPUSH
74632: PPUSH
74633: PPUSH
74634: PPUSH
74635: PPUSH
74636: PPUSH
// if not unit or not hexes then
74637: LD_VAR 0 1
74641: NOT
74642: IFTRUE 74651
74644: PUSH
74645: LD_VAR 0 2
74649: NOT
74650: OR
74651: IFFALSE 74655
// exit ;
74653: GO 74778
// dist := 9999 ;
74655: LD_ADDR_VAR 0 5
74659: PUSH
74660: LD_INT 9999
74662: ST_TO_ADDR
// for i = 1 to hexes do
74663: LD_ADDR_VAR 0 4
74667: PUSH
74668: DOUBLE
74669: LD_INT 1
74671: DEC
74672: ST_TO_ADDR
74673: LD_VAR 0 2
74677: PUSH
74678: FOR_TO
74679: IFFALSE 74766
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
74681: LD_ADDR_VAR 0 6
74685: PUSH
74686: LD_VAR 0 1
74690: PPUSH
74691: LD_VAR 0 2
74695: PUSH
74696: LD_VAR 0 4
74700: ARRAY
74701: PUSH
74702: LD_INT 1
74704: ARRAY
74705: PPUSH
74706: LD_VAR 0 2
74710: PUSH
74711: LD_VAR 0 4
74715: ARRAY
74716: PUSH
74717: LD_INT 2
74719: ARRAY
74720: PPUSH
74721: CALL_OW 297
74725: ST_TO_ADDR
// if tdist < dist then
74726: LD_VAR 0 6
74730: PUSH
74731: LD_VAR 0 5
74735: LESS
74736: IFFALSE 74764
// begin hex := hexes [ i ] ;
74738: LD_ADDR_VAR 0 8
74742: PUSH
74743: LD_VAR 0 2
74747: PUSH
74748: LD_VAR 0 4
74752: ARRAY
74753: ST_TO_ADDR
// dist := tdist ;
74754: LD_ADDR_VAR 0 5
74758: PUSH
74759: LD_VAR 0 6
74763: ST_TO_ADDR
// end ; end ;
74764: GO 74678
74766: POP
74767: POP
// result := hex ;
74768: LD_ADDR_VAR 0 3
74772: PUSH
74773: LD_VAR 0 8
74777: ST_TO_ADDR
// end ;
74778: LD_VAR 0 3
74782: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
74783: LD_INT 0
74785: PPUSH
74786: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
74787: LD_VAR 0 1
74791: NOT
74792: IFTRUE 74831
74794: PUSH
74795: LD_VAR 0 1
74799: PUSH
74800: LD_INT 21
74802: PUSH
74803: LD_INT 2
74805: PUSH
74806: EMPTY
74807: LIST
74808: LIST
74809: PUSH
74810: LD_INT 23
74812: PUSH
74813: LD_INT 2
74815: PUSH
74816: EMPTY
74817: LIST
74818: LIST
74819: PUSH
74820: EMPTY
74821: LIST
74822: LIST
74823: PPUSH
74824: CALL_OW 69
74828: IN
74829: NOT
74830: OR
74831: IFFALSE 74835
// exit ;
74833: GO 74882
// for i = 1 to 3 do
74835: LD_ADDR_VAR 0 3
74839: PUSH
74840: DOUBLE
74841: LD_INT 1
74843: DEC
74844: ST_TO_ADDR
74845: LD_INT 3
74847: PUSH
74848: FOR_TO
74849: IFFALSE 74880
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
74851: LD_VAR 0 1
74855: PPUSH
74856: CALL_OW 250
74860: PPUSH
74861: LD_VAR 0 1
74865: PPUSH
74866: CALL_OW 251
74870: PPUSH
74871: LD_INT 1
74873: PPUSH
74874: CALL_OW 453
74878: GO 74848
74880: POP
74881: POP
// end ;
74882: LD_VAR 0 2
74886: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
74887: LD_INT 0
74889: PPUSH
74890: PPUSH
74891: PPUSH
74892: PPUSH
74893: PPUSH
74894: PPUSH
// if not unit or not enemy_unit then
74895: LD_VAR 0 1
74899: NOT
74900: IFTRUE 74909
74902: PUSH
74903: LD_VAR 0 2
74907: NOT
74908: OR
74909: IFFALSE 74913
// exit ;
74911: GO 75384
// if GetLives ( i ) < 250 then
74913: LD_VAR 0 4
74917: PPUSH
74918: CALL_OW 256
74922: PUSH
74923: LD_INT 250
74925: LESS
74926: IFFALSE 74939
// begin ComAutodestruct ( i ) ;
74928: LD_VAR 0 4
74932: PPUSH
74933: CALL 74783 0 1
// exit ;
74937: GO 75384
// end ; x := GetX ( enemy_unit ) ;
74939: LD_ADDR_VAR 0 7
74943: PUSH
74944: LD_VAR 0 2
74948: PPUSH
74949: CALL_OW 250
74953: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
74954: LD_ADDR_VAR 0 8
74958: PUSH
74959: LD_VAR 0 2
74963: PPUSH
74964: CALL_OW 251
74968: ST_TO_ADDR
// if not x or not y then
74969: LD_VAR 0 7
74973: NOT
74974: IFTRUE 74983
74976: PUSH
74977: LD_VAR 0 8
74981: NOT
74982: OR
74983: IFFALSE 74987
// exit ;
74985: GO 75384
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
74987: LD_ADDR_VAR 0 6
74991: PUSH
74992: LD_VAR 0 7
74996: PPUSH
74997: LD_INT 0
74999: PPUSH
75000: LD_INT 4
75002: PPUSH
75003: CALL_OW 272
75007: PUSH
75008: LD_VAR 0 8
75012: PPUSH
75013: LD_INT 0
75015: PPUSH
75016: LD_INT 4
75018: PPUSH
75019: CALL_OW 273
75023: PUSH
75024: EMPTY
75025: LIST
75026: LIST
75027: PUSH
75028: LD_VAR 0 7
75032: PPUSH
75033: LD_INT 1
75035: PPUSH
75036: LD_INT 4
75038: PPUSH
75039: CALL_OW 272
75043: PUSH
75044: LD_VAR 0 8
75048: PPUSH
75049: LD_INT 1
75051: PPUSH
75052: LD_INT 4
75054: PPUSH
75055: CALL_OW 273
75059: PUSH
75060: EMPTY
75061: LIST
75062: LIST
75063: PUSH
75064: LD_VAR 0 7
75068: PPUSH
75069: LD_INT 2
75071: PPUSH
75072: LD_INT 4
75074: PPUSH
75075: CALL_OW 272
75079: PUSH
75080: LD_VAR 0 8
75084: PPUSH
75085: LD_INT 2
75087: PPUSH
75088: LD_INT 4
75090: PPUSH
75091: CALL_OW 273
75095: PUSH
75096: EMPTY
75097: LIST
75098: LIST
75099: PUSH
75100: LD_VAR 0 7
75104: PPUSH
75105: LD_INT 3
75107: PPUSH
75108: LD_INT 4
75110: PPUSH
75111: CALL_OW 272
75115: PUSH
75116: LD_VAR 0 8
75120: PPUSH
75121: LD_INT 3
75123: PPUSH
75124: LD_INT 4
75126: PPUSH
75127: CALL_OW 273
75131: PUSH
75132: EMPTY
75133: LIST
75134: LIST
75135: PUSH
75136: LD_VAR 0 7
75140: PPUSH
75141: LD_INT 4
75143: PPUSH
75144: LD_INT 4
75146: PPUSH
75147: CALL_OW 272
75151: PUSH
75152: LD_VAR 0 8
75156: PPUSH
75157: LD_INT 4
75159: PPUSH
75160: LD_INT 4
75162: PPUSH
75163: CALL_OW 273
75167: PUSH
75168: EMPTY
75169: LIST
75170: LIST
75171: PUSH
75172: LD_VAR 0 7
75176: PPUSH
75177: LD_INT 5
75179: PPUSH
75180: LD_INT 4
75182: PPUSH
75183: CALL_OW 272
75187: PUSH
75188: LD_VAR 0 8
75192: PPUSH
75193: LD_INT 5
75195: PPUSH
75196: LD_INT 4
75198: PPUSH
75199: CALL_OW 273
75203: PUSH
75204: EMPTY
75205: LIST
75206: LIST
75207: PUSH
75208: EMPTY
75209: LIST
75210: LIST
75211: LIST
75212: LIST
75213: LIST
75214: LIST
75215: ST_TO_ADDR
// for i = tmp downto 1 do
75216: LD_ADDR_VAR 0 4
75220: PUSH
75221: DOUBLE
75222: LD_VAR 0 6
75226: INC
75227: ST_TO_ADDR
75228: LD_INT 1
75230: PUSH
75231: FOR_DOWNTO
75232: IFFALSE 75335
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
75234: LD_VAR 0 6
75238: PUSH
75239: LD_VAR 0 4
75243: ARRAY
75244: PUSH
75245: LD_INT 1
75247: ARRAY
75248: PPUSH
75249: LD_VAR 0 6
75253: PUSH
75254: LD_VAR 0 4
75258: ARRAY
75259: PUSH
75260: LD_INT 2
75262: ARRAY
75263: PPUSH
75264: CALL_OW 488
75268: NOT
75269: IFTRUE 75311
75271: PUSH
75272: LD_VAR 0 6
75276: PUSH
75277: LD_VAR 0 4
75281: ARRAY
75282: PUSH
75283: LD_INT 1
75285: ARRAY
75286: PPUSH
75287: LD_VAR 0 6
75291: PUSH
75292: LD_VAR 0 4
75296: ARRAY
75297: PUSH
75298: LD_INT 2
75300: ARRAY
75301: PPUSH
75302: CALL_OW 428
75306: PUSH
75307: LD_INT 0
75309: NONEQUAL
75310: OR
75311: IFFALSE 75333
// tmp := Delete ( tmp , i ) ;
75313: LD_ADDR_VAR 0 6
75317: PUSH
75318: LD_VAR 0 6
75322: PPUSH
75323: LD_VAR 0 4
75327: PPUSH
75328: CALL_OW 3
75332: ST_TO_ADDR
75333: GO 75231
75335: POP
75336: POP
// j := GetClosestHex ( unit , tmp ) ;
75337: LD_ADDR_VAR 0 5
75341: PUSH
75342: LD_VAR 0 1
75346: PPUSH
75347: LD_VAR 0 6
75351: PPUSH
75352: CALL 74629 0 2
75356: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
75357: LD_VAR 0 1
75361: PPUSH
75362: LD_VAR 0 5
75366: PUSH
75367: LD_INT 1
75369: ARRAY
75370: PPUSH
75371: LD_VAR 0 5
75375: PUSH
75376: LD_INT 2
75378: ARRAY
75379: PPUSH
75380: CALL_OW 111
// end ;
75384: LD_VAR 0 3
75388: RET
// export function PrepareApemanSoldier ( ) ; begin
75389: LD_INT 0
75391: PPUSH
// uc_nation := 0 ;
75392: LD_ADDR_OWVAR 21
75396: PUSH
75397: LD_INT 0
75399: ST_TO_ADDR
// hc_sex := sex_male ;
75400: LD_ADDR_OWVAR 27
75404: PUSH
75405: LD_INT 1
75407: ST_TO_ADDR
// hc_name :=  ;
75408: LD_ADDR_OWVAR 26
75412: PUSH
75413: LD_STRING 
75415: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
75416: LD_ADDR_OWVAR 28
75420: PUSH
75421: LD_INT 15
75423: ST_TO_ADDR
// hc_gallery :=  ;
75424: LD_ADDR_OWVAR 33
75428: PUSH
75429: LD_STRING 
75431: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75432: LD_ADDR_OWVAR 31
75436: PUSH
75437: LD_INT 0
75439: PPUSH
75440: LD_INT 3
75442: PPUSH
75443: CALL_OW 12
75447: PUSH
75448: LD_INT 0
75450: PPUSH
75451: LD_INT 3
75453: PPUSH
75454: CALL_OW 12
75458: PUSH
75459: LD_INT 0
75461: PUSH
75462: LD_INT 0
75464: PUSH
75465: EMPTY
75466: LIST
75467: LIST
75468: LIST
75469: LIST
75470: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
75471: LD_ADDR_OWVAR 29
75475: PUSH
75476: LD_INT 12
75478: PUSH
75479: LD_INT 12
75481: PUSH
75482: EMPTY
75483: LIST
75484: LIST
75485: ST_TO_ADDR
// end ;
75486: LD_VAR 0 1
75490: RET
// export function PrepareApemanEngineer ( ) ; begin
75491: LD_INT 0
75493: PPUSH
// uc_nation := 0 ;
75494: LD_ADDR_OWVAR 21
75498: PUSH
75499: LD_INT 0
75501: ST_TO_ADDR
// hc_sex := sex_male ;
75502: LD_ADDR_OWVAR 27
75506: PUSH
75507: LD_INT 1
75509: ST_TO_ADDR
// hc_name :=  ;
75510: LD_ADDR_OWVAR 26
75514: PUSH
75515: LD_STRING 
75517: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
75518: LD_ADDR_OWVAR 28
75522: PUSH
75523: LD_INT 16
75525: ST_TO_ADDR
// hc_gallery :=  ;
75526: LD_ADDR_OWVAR 33
75530: PUSH
75531: LD_STRING 
75533: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75534: LD_ADDR_OWVAR 31
75538: PUSH
75539: LD_INT 0
75541: PPUSH
75542: LD_INT 3
75544: PPUSH
75545: CALL_OW 12
75549: PUSH
75550: LD_INT 0
75552: PPUSH
75553: LD_INT 3
75555: PPUSH
75556: CALL_OW 12
75560: PUSH
75561: LD_INT 0
75563: PUSH
75564: LD_INT 0
75566: PUSH
75567: EMPTY
75568: LIST
75569: LIST
75570: LIST
75571: LIST
75572: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
75573: LD_ADDR_OWVAR 29
75577: PUSH
75578: LD_INT 12
75580: PUSH
75581: LD_INT 12
75583: PUSH
75584: EMPTY
75585: LIST
75586: LIST
75587: ST_TO_ADDR
// end ;
75588: LD_VAR 0 1
75592: RET
// export function PrepareApeman ( agressivity ) ; begin
75593: LD_INT 0
75595: PPUSH
// uc_side := 0 ;
75596: LD_ADDR_OWVAR 20
75600: PUSH
75601: LD_INT 0
75603: ST_TO_ADDR
// uc_nation := 0 ;
75604: LD_ADDR_OWVAR 21
75608: PUSH
75609: LD_INT 0
75611: ST_TO_ADDR
// hc_sex := sex_male ;
75612: LD_ADDR_OWVAR 27
75616: PUSH
75617: LD_INT 1
75619: ST_TO_ADDR
// hc_class := class_apeman ;
75620: LD_ADDR_OWVAR 28
75624: PUSH
75625: LD_INT 12
75627: ST_TO_ADDR
// hc_gallery :=  ;
75628: LD_ADDR_OWVAR 33
75632: PUSH
75633: LD_STRING 
75635: ST_TO_ADDR
// hc_name :=  ;
75636: LD_ADDR_OWVAR 26
75640: PUSH
75641: LD_STRING 
75643: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
75644: LD_ADDR_OWVAR 29
75648: PUSH
75649: LD_INT 12
75651: PUSH
75652: LD_INT 12
75654: PUSH
75655: EMPTY
75656: LIST
75657: LIST
75658: ST_TO_ADDR
// if agressivity = 0 then
75659: LD_VAR 0 1
75663: PUSH
75664: LD_INT 0
75666: EQUAL
75667: IFFALSE 75679
// hc_agressivity := 0 else
75669: LD_ADDR_OWVAR 35
75673: PUSH
75674: LD_INT 0
75676: ST_TO_ADDR
75677: GO 75700
// hc_agressivity := rand ( - agressivity , agressivity ) ;
75679: LD_ADDR_OWVAR 35
75683: PUSH
75684: LD_VAR 0 1
75688: NEG
75689: PPUSH
75690: LD_VAR 0 1
75694: PPUSH
75695: CALL_OW 12
75699: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75700: LD_ADDR_OWVAR 31
75704: PUSH
75705: LD_INT 0
75707: PPUSH
75708: LD_INT 3
75710: PPUSH
75711: CALL_OW 12
75715: PUSH
75716: LD_INT 0
75718: PPUSH
75719: LD_INT 3
75721: PPUSH
75722: CALL_OW 12
75726: PUSH
75727: LD_INT 0
75729: PUSH
75730: LD_INT 0
75732: PUSH
75733: EMPTY
75734: LIST
75735: LIST
75736: LIST
75737: LIST
75738: ST_TO_ADDR
// end ;
75739: LD_VAR 0 2
75743: RET
// export function PrepareTiger ( agressivity ) ; begin
75744: LD_INT 0
75746: PPUSH
// uc_side := 0 ;
75747: LD_ADDR_OWVAR 20
75751: PUSH
75752: LD_INT 0
75754: ST_TO_ADDR
// uc_nation := 0 ;
75755: LD_ADDR_OWVAR 21
75759: PUSH
75760: LD_INT 0
75762: ST_TO_ADDR
// InitHc ;
75763: CALL_OW 19
// hc_class := class_tiger ;
75767: LD_ADDR_OWVAR 28
75771: PUSH
75772: LD_INT 14
75774: ST_TO_ADDR
// hc_gallery :=  ;
75775: LD_ADDR_OWVAR 33
75779: PUSH
75780: LD_STRING 
75782: ST_TO_ADDR
// hc_name :=  ;
75783: LD_ADDR_OWVAR 26
75787: PUSH
75788: LD_STRING 
75790: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
75791: LD_ADDR_OWVAR 35
75795: PUSH
75796: LD_VAR 0 1
75800: NEG
75801: PPUSH
75802: LD_VAR 0 1
75806: PPUSH
75807: CALL_OW 12
75811: ST_TO_ADDR
// end ;
75812: LD_VAR 0 2
75816: RET
// export function PrepareEnchidna ( ) ; begin
75817: LD_INT 0
75819: PPUSH
// uc_side := 0 ;
75820: LD_ADDR_OWVAR 20
75824: PUSH
75825: LD_INT 0
75827: ST_TO_ADDR
// uc_nation := 0 ;
75828: LD_ADDR_OWVAR 21
75832: PUSH
75833: LD_INT 0
75835: ST_TO_ADDR
// InitHc ;
75836: CALL_OW 19
// hc_class := class_baggie ;
75840: LD_ADDR_OWVAR 28
75844: PUSH
75845: LD_INT 13
75847: ST_TO_ADDR
// hc_gallery :=  ;
75848: LD_ADDR_OWVAR 33
75852: PUSH
75853: LD_STRING 
75855: ST_TO_ADDR
// hc_name :=  ;
75856: LD_ADDR_OWVAR 26
75860: PUSH
75861: LD_STRING 
75863: ST_TO_ADDR
// end ;
75864: LD_VAR 0 1
75868: RET
// export function PrepareFrog ( ) ; begin
75869: LD_INT 0
75871: PPUSH
// uc_side := 0 ;
75872: LD_ADDR_OWVAR 20
75876: PUSH
75877: LD_INT 0
75879: ST_TO_ADDR
// uc_nation := 0 ;
75880: LD_ADDR_OWVAR 21
75884: PUSH
75885: LD_INT 0
75887: ST_TO_ADDR
// InitHc ;
75888: CALL_OW 19
// hc_class := class_frog ;
75892: LD_ADDR_OWVAR 28
75896: PUSH
75897: LD_INT 19
75899: ST_TO_ADDR
// hc_gallery :=  ;
75900: LD_ADDR_OWVAR 33
75904: PUSH
75905: LD_STRING 
75907: ST_TO_ADDR
// hc_name :=  ;
75908: LD_ADDR_OWVAR 26
75912: PUSH
75913: LD_STRING 
75915: ST_TO_ADDR
// end ;
75916: LD_VAR 0 1
75920: RET
// export function PrepareFish ( ) ; begin
75921: LD_INT 0
75923: PPUSH
// uc_side := 0 ;
75924: LD_ADDR_OWVAR 20
75928: PUSH
75929: LD_INT 0
75931: ST_TO_ADDR
// uc_nation := 0 ;
75932: LD_ADDR_OWVAR 21
75936: PUSH
75937: LD_INT 0
75939: ST_TO_ADDR
// InitHc ;
75940: CALL_OW 19
// hc_class := class_fish ;
75944: LD_ADDR_OWVAR 28
75948: PUSH
75949: LD_INT 20
75951: ST_TO_ADDR
// hc_gallery :=  ;
75952: LD_ADDR_OWVAR 33
75956: PUSH
75957: LD_STRING 
75959: ST_TO_ADDR
// hc_name :=  ;
75960: LD_ADDR_OWVAR 26
75964: PUSH
75965: LD_STRING 
75967: ST_TO_ADDR
// end ;
75968: LD_VAR 0 1
75972: RET
// export function PrepareBird ( ) ; begin
75973: LD_INT 0
75975: PPUSH
// uc_side := 0 ;
75976: LD_ADDR_OWVAR 20
75980: PUSH
75981: LD_INT 0
75983: ST_TO_ADDR
// uc_nation := 0 ;
75984: LD_ADDR_OWVAR 21
75988: PUSH
75989: LD_INT 0
75991: ST_TO_ADDR
// InitHc ;
75992: CALL_OW 19
// hc_class := class_phororhacos ;
75996: LD_ADDR_OWVAR 28
76000: PUSH
76001: LD_INT 18
76003: ST_TO_ADDR
// hc_gallery :=  ;
76004: LD_ADDR_OWVAR 33
76008: PUSH
76009: LD_STRING 
76011: ST_TO_ADDR
// hc_name :=  ;
76012: LD_ADDR_OWVAR 26
76016: PUSH
76017: LD_STRING 
76019: ST_TO_ADDR
// end ;
76020: LD_VAR 0 1
76024: RET
// export function PrepareHorse ( ) ; begin
76025: LD_INT 0
76027: PPUSH
// uc_side := 0 ;
76028: LD_ADDR_OWVAR 20
76032: PUSH
76033: LD_INT 0
76035: ST_TO_ADDR
// uc_nation := 0 ;
76036: LD_ADDR_OWVAR 21
76040: PUSH
76041: LD_INT 0
76043: ST_TO_ADDR
// InitHc ;
76044: CALL_OW 19
// hc_class := class_horse ;
76048: LD_ADDR_OWVAR 28
76052: PUSH
76053: LD_INT 21
76055: ST_TO_ADDR
// hc_gallery :=  ;
76056: LD_ADDR_OWVAR 33
76060: PUSH
76061: LD_STRING 
76063: ST_TO_ADDR
// hc_name :=  ;
76064: LD_ADDR_OWVAR 26
76068: PUSH
76069: LD_STRING 
76071: ST_TO_ADDR
// end ;
76072: LD_VAR 0 1
76076: RET
// export function PrepareMastodont ( ) ; begin
76077: LD_INT 0
76079: PPUSH
// uc_side := 0 ;
76080: LD_ADDR_OWVAR 20
76084: PUSH
76085: LD_INT 0
76087: ST_TO_ADDR
// uc_nation := 0 ;
76088: LD_ADDR_OWVAR 21
76092: PUSH
76093: LD_INT 0
76095: ST_TO_ADDR
// vc_chassis := class_mastodont ;
76096: LD_ADDR_OWVAR 37
76100: PUSH
76101: LD_INT 31
76103: ST_TO_ADDR
// vc_control := control_rider ;
76104: LD_ADDR_OWVAR 38
76108: PUSH
76109: LD_INT 4
76111: ST_TO_ADDR
// end ;
76112: LD_VAR 0 1
76116: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
76117: LD_INT 0
76119: PPUSH
76120: PPUSH
76121: PPUSH
// uc_side = 0 ;
76122: LD_ADDR_OWVAR 20
76126: PUSH
76127: LD_INT 0
76129: ST_TO_ADDR
// uc_nation = 0 ;
76130: LD_ADDR_OWVAR 21
76134: PUSH
76135: LD_INT 0
76137: ST_TO_ADDR
// InitHc_All ( ) ;
76138: CALL_OW 584
// InitVc ;
76142: CALL_OW 20
// if mastodonts then
76146: LD_VAR 0 6
76150: IFFALSE 76217
// for i = 1 to mastodonts do
76152: LD_ADDR_VAR 0 11
76156: PUSH
76157: DOUBLE
76158: LD_INT 1
76160: DEC
76161: ST_TO_ADDR
76162: LD_VAR 0 6
76166: PUSH
76167: FOR_TO
76168: IFFALSE 76215
// begin vc_chassis := 31 ;
76170: LD_ADDR_OWVAR 37
76174: PUSH
76175: LD_INT 31
76177: ST_TO_ADDR
// vc_control := control_rider ;
76178: LD_ADDR_OWVAR 38
76182: PUSH
76183: LD_INT 4
76185: ST_TO_ADDR
// animal := CreateVehicle ;
76186: LD_ADDR_VAR 0 12
76190: PUSH
76191: CALL_OW 45
76195: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76196: LD_VAR 0 12
76200: PPUSH
76201: LD_VAR 0 8
76205: PPUSH
76206: LD_INT 0
76208: PPUSH
76209: CALL 78359 0 3
// end ;
76213: GO 76167
76215: POP
76216: POP
// if horses then
76217: LD_VAR 0 5
76221: IFFALSE 76288
// for i = 1 to horses do
76223: LD_ADDR_VAR 0 11
76227: PUSH
76228: DOUBLE
76229: LD_INT 1
76231: DEC
76232: ST_TO_ADDR
76233: LD_VAR 0 5
76237: PUSH
76238: FOR_TO
76239: IFFALSE 76286
// begin hc_class := 21 ;
76241: LD_ADDR_OWVAR 28
76245: PUSH
76246: LD_INT 21
76248: ST_TO_ADDR
// hc_gallery :=  ;
76249: LD_ADDR_OWVAR 33
76253: PUSH
76254: LD_STRING 
76256: ST_TO_ADDR
// animal := CreateHuman ;
76257: LD_ADDR_VAR 0 12
76261: PUSH
76262: CALL_OW 44
76266: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76267: LD_VAR 0 12
76271: PPUSH
76272: LD_VAR 0 8
76276: PPUSH
76277: LD_INT 0
76279: PPUSH
76280: CALL 78359 0 3
// end ;
76284: GO 76238
76286: POP
76287: POP
// if birds then
76288: LD_VAR 0 1
76292: IFFALSE 76359
// for i = 1 to birds do
76294: LD_ADDR_VAR 0 11
76298: PUSH
76299: DOUBLE
76300: LD_INT 1
76302: DEC
76303: ST_TO_ADDR
76304: LD_VAR 0 1
76308: PUSH
76309: FOR_TO
76310: IFFALSE 76357
// begin hc_class := 18 ;
76312: LD_ADDR_OWVAR 28
76316: PUSH
76317: LD_INT 18
76319: ST_TO_ADDR
// hc_gallery =  ;
76320: LD_ADDR_OWVAR 33
76324: PUSH
76325: LD_STRING 
76327: ST_TO_ADDR
// animal := CreateHuman ;
76328: LD_ADDR_VAR 0 12
76332: PUSH
76333: CALL_OW 44
76337: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76338: LD_VAR 0 12
76342: PPUSH
76343: LD_VAR 0 8
76347: PPUSH
76348: LD_INT 0
76350: PPUSH
76351: CALL 78359 0 3
// end ;
76355: GO 76309
76357: POP
76358: POP
// if tigers then
76359: LD_VAR 0 2
76363: IFFALSE 76447
// for i = 1 to tigers do
76365: LD_ADDR_VAR 0 11
76369: PUSH
76370: DOUBLE
76371: LD_INT 1
76373: DEC
76374: ST_TO_ADDR
76375: LD_VAR 0 2
76379: PUSH
76380: FOR_TO
76381: IFFALSE 76445
// begin hc_class = class_tiger ;
76383: LD_ADDR_OWVAR 28
76387: PUSH
76388: LD_INT 14
76390: ST_TO_ADDR
// hc_gallery =  ;
76391: LD_ADDR_OWVAR 33
76395: PUSH
76396: LD_STRING 
76398: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
76399: LD_ADDR_OWVAR 35
76403: PUSH
76404: LD_INT 7
76406: NEG
76407: PPUSH
76408: LD_INT 7
76410: PPUSH
76411: CALL_OW 12
76415: ST_TO_ADDR
// animal := CreateHuman ;
76416: LD_ADDR_VAR 0 12
76420: PUSH
76421: CALL_OW 44
76425: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76426: LD_VAR 0 12
76430: PPUSH
76431: LD_VAR 0 8
76435: PPUSH
76436: LD_INT 0
76438: PPUSH
76439: CALL 78359 0 3
// end ;
76443: GO 76380
76445: POP
76446: POP
// if apemans then
76447: LD_VAR 0 3
76451: IFFALSE 76574
// for i = 1 to apemans do
76453: LD_ADDR_VAR 0 11
76457: PUSH
76458: DOUBLE
76459: LD_INT 1
76461: DEC
76462: ST_TO_ADDR
76463: LD_VAR 0 3
76467: PUSH
76468: FOR_TO
76469: IFFALSE 76572
// begin hc_class = class_apeman ;
76471: LD_ADDR_OWVAR 28
76475: PUSH
76476: LD_INT 12
76478: ST_TO_ADDR
// hc_gallery =  ;
76479: LD_ADDR_OWVAR 33
76483: PUSH
76484: LD_STRING 
76486: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
76487: LD_ADDR_OWVAR 35
76491: PUSH
76492: LD_INT 2
76494: NEG
76495: PPUSH
76496: LD_INT 2
76498: PPUSH
76499: CALL_OW 12
76503: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
76504: LD_ADDR_OWVAR 31
76508: PUSH
76509: LD_INT 1
76511: PPUSH
76512: LD_INT 3
76514: PPUSH
76515: CALL_OW 12
76519: PUSH
76520: LD_INT 1
76522: PPUSH
76523: LD_INT 3
76525: PPUSH
76526: CALL_OW 12
76530: PUSH
76531: LD_INT 0
76533: PUSH
76534: LD_INT 0
76536: PUSH
76537: EMPTY
76538: LIST
76539: LIST
76540: LIST
76541: LIST
76542: ST_TO_ADDR
// animal := CreateHuman ;
76543: LD_ADDR_VAR 0 12
76547: PUSH
76548: CALL_OW 44
76552: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76553: LD_VAR 0 12
76557: PPUSH
76558: LD_VAR 0 8
76562: PPUSH
76563: LD_INT 0
76565: PPUSH
76566: CALL 78359 0 3
// end ;
76570: GO 76468
76572: POP
76573: POP
// if enchidnas then
76574: LD_VAR 0 4
76578: IFFALSE 76645
// for i = 1 to enchidnas do
76580: LD_ADDR_VAR 0 11
76584: PUSH
76585: DOUBLE
76586: LD_INT 1
76588: DEC
76589: ST_TO_ADDR
76590: LD_VAR 0 4
76594: PUSH
76595: FOR_TO
76596: IFFALSE 76643
// begin hc_class = 13 ;
76598: LD_ADDR_OWVAR 28
76602: PUSH
76603: LD_INT 13
76605: ST_TO_ADDR
// hc_gallery =  ;
76606: LD_ADDR_OWVAR 33
76610: PUSH
76611: LD_STRING 
76613: ST_TO_ADDR
// animal := CreateHuman ;
76614: LD_ADDR_VAR 0 12
76618: PUSH
76619: CALL_OW 44
76623: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76624: LD_VAR 0 12
76628: PPUSH
76629: LD_VAR 0 8
76633: PPUSH
76634: LD_INT 0
76636: PPUSH
76637: CALL 78359 0 3
// end ;
76641: GO 76595
76643: POP
76644: POP
// if fishes then
76645: LD_VAR 0 7
76649: IFFALSE 76716
// for i = 1 to fishes do
76651: LD_ADDR_VAR 0 11
76655: PUSH
76656: DOUBLE
76657: LD_INT 1
76659: DEC
76660: ST_TO_ADDR
76661: LD_VAR 0 7
76665: PUSH
76666: FOR_TO
76667: IFFALSE 76714
// begin hc_class = 20 ;
76669: LD_ADDR_OWVAR 28
76673: PUSH
76674: LD_INT 20
76676: ST_TO_ADDR
// hc_gallery =  ;
76677: LD_ADDR_OWVAR 33
76681: PUSH
76682: LD_STRING 
76684: ST_TO_ADDR
// animal := CreateHuman ;
76685: LD_ADDR_VAR 0 12
76689: PUSH
76690: CALL_OW 44
76694: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
76695: LD_VAR 0 12
76699: PPUSH
76700: LD_VAR 0 9
76704: PPUSH
76705: LD_INT 0
76707: PPUSH
76708: CALL 78359 0 3
// end ;
76712: GO 76666
76714: POP
76715: POP
// end ;
76716: LD_VAR 0 10
76720: RET
// export function WantHeal ( sci , unit ) ; begin
76721: LD_INT 0
76723: PPUSH
// if GetTaskList ( sci ) > 0 then
76724: LD_VAR 0 1
76728: PPUSH
76729: CALL_OW 437
76733: PUSH
76734: LD_INT 0
76736: GREATER
76737: IFFALSE 76809
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
76739: LD_VAR 0 1
76743: PPUSH
76744: CALL_OW 437
76748: PUSH
76749: LD_INT 1
76751: ARRAY
76752: PUSH
76753: LD_INT 1
76755: ARRAY
76756: PUSH
76757: LD_STRING l
76759: EQUAL
76760: IFFALSE 76787
76762: PUSH
76763: LD_VAR 0 1
76767: PPUSH
76768: CALL_OW 437
76772: PUSH
76773: LD_INT 1
76775: ARRAY
76776: PUSH
76777: LD_INT 4
76779: ARRAY
76780: PUSH
76781: LD_VAR 0 2
76785: EQUAL
76786: AND
76787: IFFALSE 76799
// result := true else
76789: LD_ADDR_VAR 0 3
76793: PUSH
76794: LD_INT 1
76796: ST_TO_ADDR
76797: GO 76807
// result := false ;
76799: LD_ADDR_VAR 0 3
76803: PUSH
76804: LD_INT 0
76806: ST_TO_ADDR
// end else
76807: GO 76817
// result := false ;
76809: LD_ADDR_VAR 0 3
76813: PUSH
76814: LD_INT 0
76816: ST_TO_ADDR
// end ;
76817: LD_VAR 0 3
76821: RET
// export function HealTarget ( sci ) ; begin
76822: LD_INT 0
76824: PPUSH
// if not sci then
76825: LD_VAR 0 1
76829: NOT
76830: IFFALSE 76834
// exit ;
76832: GO 76899
// result := 0 ;
76834: LD_ADDR_VAR 0 2
76838: PUSH
76839: LD_INT 0
76841: ST_TO_ADDR
// if GetTaskList ( sci ) then
76842: LD_VAR 0 1
76846: PPUSH
76847: CALL_OW 437
76851: IFFALSE 76899
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
76853: LD_VAR 0 1
76857: PPUSH
76858: CALL_OW 437
76862: PUSH
76863: LD_INT 1
76865: ARRAY
76866: PUSH
76867: LD_INT 1
76869: ARRAY
76870: PUSH
76871: LD_STRING l
76873: EQUAL
76874: IFFALSE 76899
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
76876: LD_ADDR_VAR 0 2
76880: PUSH
76881: LD_VAR 0 1
76885: PPUSH
76886: CALL_OW 437
76890: PUSH
76891: LD_INT 1
76893: ARRAY
76894: PUSH
76895: LD_INT 4
76897: ARRAY
76898: ST_TO_ADDR
// end ;
76899: LD_VAR 0 2
76903: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
76904: LD_INT 0
76906: PPUSH
76907: PPUSH
76908: PPUSH
76909: PPUSH
// if not base_units then
76910: LD_VAR 0 1
76914: NOT
76915: IFFALSE 76919
// exit ;
76917: GO 77006
// result := false ;
76919: LD_ADDR_VAR 0 2
76923: PUSH
76924: LD_INT 0
76926: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
76927: LD_ADDR_VAR 0 5
76931: PUSH
76932: LD_VAR 0 1
76936: PPUSH
76937: LD_INT 21
76939: PUSH
76940: LD_INT 3
76942: PUSH
76943: EMPTY
76944: LIST
76945: LIST
76946: PPUSH
76947: CALL_OW 72
76951: ST_TO_ADDR
// if not tmp then
76952: LD_VAR 0 5
76956: NOT
76957: IFFALSE 76961
// exit ;
76959: GO 77006
// for i in tmp do
76961: LD_ADDR_VAR 0 3
76965: PUSH
76966: LD_VAR 0 5
76970: PUSH
76971: FOR_IN
76972: IFFALSE 77004
// begin result := EnemyInRange ( i , 22 ) ;
76974: LD_ADDR_VAR 0 2
76978: PUSH
76979: LD_VAR 0 3
76983: PPUSH
76984: LD_INT 22
76986: PPUSH
76987: CALL 74431 0 2
76991: ST_TO_ADDR
// if result then
76992: LD_VAR 0 2
76996: IFFALSE 77002
// exit ;
76998: POP
76999: POP
77000: GO 77006
// end ;
77002: GO 76971
77004: POP
77005: POP
// end ;
77006: LD_VAR 0 2
77010: RET
// export function FilterByTag ( units , tag ) ; begin
77011: LD_INT 0
77013: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
77014: LD_ADDR_VAR 0 3
77018: PUSH
77019: LD_VAR 0 1
77023: PPUSH
77024: LD_INT 120
77026: PUSH
77027: LD_VAR 0 2
77031: PUSH
77032: EMPTY
77033: LIST
77034: LIST
77035: PPUSH
77036: CALL_OW 72
77040: ST_TO_ADDR
// end ;
77041: LD_VAR 0 3
77045: RET
// export function IsDriver ( un ) ; begin
77046: LD_INT 0
77048: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
77049: LD_ADDR_VAR 0 2
77053: PUSH
77054: LD_VAR 0 1
77058: PUSH
77059: LD_INT 55
77061: PUSH
77062: EMPTY
77063: LIST
77064: PPUSH
77065: CALL_OW 69
77069: IN
77070: ST_TO_ADDR
// end ;
77071: LD_VAR 0 2
77075: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
77076: LD_INT 0
77078: PPUSH
77079: PPUSH
// list := [ ] ;
77080: LD_ADDR_VAR 0 5
77084: PUSH
77085: EMPTY
77086: ST_TO_ADDR
// case d of 0 :
77087: LD_VAR 0 3
77091: PUSH
77092: LD_INT 0
77094: DOUBLE
77095: EQUAL
77096: IFTRUE 77100
77098: GO 77233
77100: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
77101: LD_ADDR_VAR 0 5
77105: PUSH
77106: LD_VAR 0 1
77110: PUSH
77111: LD_INT 4
77113: MINUS
77114: PUSH
77115: LD_VAR 0 2
77119: PUSH
77120: LD_INT 4
77122: MINUS
77123: PUSH
77124: LD_INT 2
77126: PUSH
77127: EMPTY
77128: LIST
77129: LIST
77130: LIST
77131: PUSH
77132: LD_VAR 0 1
77136: PUSH
77137: LD_INT 3
77139: MINUS
77140: PUSH
77141: LD_VAR 0 2
77145: PUSH
77146: LD_INT 1
77148: PUSH
77149: EMPTY
77150: LIST
77151: LIST
77152: LIST
77153: PUSH
77154: LD_VAR 0 1
77158: PUSH
77159: LD_INT 4
77161: PLUS
77162: PUSH
77163: LD_VAR 0 2
77167: PUSH
77168: LD_INT 4
77170: PUSH
77171: EMPTY
77172: LIST
77173: LIST
77174: LIST
77175: PUSH
77176: LD_VAR 0 1
77180: PUSH
77181: LD_INT 3
77183: PLUS
77184: PUSH
77185: LD_VAR 0 2
77189: PUSH
77190: LD_INT 3
77192: PLUS
77193: PUSH
77194: LD_INT 5
77196: PUSH
77197: EMPTY
77198: LIST
77199: LIST
77200: LIST
77201: PUSH
77202: LD_VAR 0 1
77206: PUSH
77207: LD_VAR 0 2
77211: PUSH
77212: LD_INT 4
77214: PLUS
77215: PUSH
77216: LD_INT 0
77218: PUSH
77219: EMPTY
77220: LIST
77221: LIST
77222: LIST
77223: PUSH
77224: EMPTY
77225: LIST
77226: LIST
77227: LIST
77228: LIST
77229: LIST
77230: ST_TO_ADDR
// end ; 1 :
77231: GO 77931
77233: LD_INT 1
77235: DOUBLE
77236: EQUAL
77237: IFTRUE 77241
77239: GO 77374
77241: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
77242: LD_ADDR_VAR 0 5
77246: PUSH
77247: LD_VAR 0 1
77251: PUSH
77252: LD_VAR 0 2
77256: PUSH
77257: LD_INT 4
77259: MINUS
77260: PUSH
77261: LD_INT 3
77263: PUSH
77264: EMPTY
77265: LIST
77266: LIST
77267: LIST
77268: PUSH
77269: LD_VAR 0 1
77273: PUSH
77274: LD_INT 3
77276: MINUS
77277: PUSH
77278: LD_VAR 0 2
77282: PUSH
77283: LD_INT 3
77285: MINUS
77286: PUSH
77287: LD_INT 2
77289: PUSH
77290: EMPTY
77291: LIST
77292: LIST
77293: LIST
77294: PUSH
77295: LD_VAR 0 1
77299: PUSH
77300: LD_INT 4
77302: MINUS
77303: PUSH
77304: LD_VAR 0 2
77308: PUSH
77309: LD_INT 1
77311: PUSH
77312: EMPTY
77313: LIST
77314: LIST
77315: LIST
77316: PUSH
77317: LD_VAR 0 1
77321: PUSH
77322: LD_VAR 0 2
77326: PUSH
77327: LD_INT 3
77329: PLUS
77330: PUSH
77331: LD_INT 0
77333: PUSH
77334: EMPTY
77335: LIST
77336: LIST
77337: LIST
77338: PUSH
77339: LD_VAR 0 1
77343: PUSH
77344: LD_INT 4
77346: PLUS
77347: PUSH
77348: LD_VAR 0 2
77352: PUSH
77353: LD_INT 4
77355: PLUS
77356: PUSH
77357: LD_INT 5
77359: PUSH
77360: EMPTY
77361: LIST
77362: LIST
77363: LIST
77364: PUSH
77365: EMPTY
77366: LIST
77367: LIST
77368: LIST
77369: LIST
77370: LIST
77371: ST_TO_ADDR
// end ; 2 :
77372: GO 77931
77374: LD_INT 2
77376: DOUBLE
77377: EQUAL
77378: IFTRUE 77382
77380: GO 77511
77382: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
77383: LD_ADDR_VAR 0 5
77387: PUSH
77388: LD_VAR 0 1
77392: PUSH
77393: LD_VAR 0 2
77397: PUSH
77398: LD_INT 3
77400: MINUS
77401: PUSH
77402: LD_INT 3
77404: PUSH
77405: EMPTY
77406: LIST
77407: LIST
77408: LIST
77409: PUSH
77410: LD_VAR 0 1
77414: PUSH
77415: LD_INT 4
77417: PLUS
77418: PUSH
77419: LD_VAR 0 2
77423: PUSH
77424: LD_INT 4
77426: PUSH
77427: EMPTY
77428: LIST
77429: LIST
77430: LIST
77431: PUSH
77432: LD_VAR 0 1
77436: PUSH
77437: LD_VAR 0 2
77441: PUSH
77442: LD_INT 4
77444: PLUS
77445: PUSH
77446: LD_INT 0
77448: PUSH
77449: EMPTY
77450: LIST
77451: LIST
77452: LIST
77453: PUSH
77454: LD_VAR 0 1
77458: PUSH
77459: LD_INT 3
77461: MINUS
77462: PUSH
77463: LD_VAR 0 2
77467: PUSH
77468: LD_INT 1
77470: PUSH
77471: EMPTY
77472: LIST
77473: LIST
77474: LIST
77475: PUSH
77476: LD_VAR 0 1
77480: PUSH
77481: LD_INT 4
77483: MINUS
77484: PUSH
77485: LD_VAR 0 2
77489: PUSH
77490: LD_INT 4
77492: MINUS
77493: PUSH
77494: LD_INT 2
77496: PUSH
77497: EMPTY
77498: LIST
77499: LIST
77500: LIST
77501: PUSH
77502: EMPTY
77503: LIST
77504: LIST
77505: LIST
77506: LIST
77507: LIST
77508: ST_TO_ADDR
// end ; 3 :
77509: GO 77931
77511: LD_INT 3
77513: DOUBLE
77514: EQUAL
77515: IFTRUE 77519
77517: GO 77652
77519: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
77520: LD_ADDR_VAR 0 5
77524: PUSH
77525: LD_VAR 0 1
77529: PUSH
77530: LD_INT 3
77532: PLUS
77533: PUSH
77534: LD_VAR 0 2
77538: PUSH
77539: LD_INT 4
77541: PUSH
77542: EMPTY
77543: LIST
77544: LIST
77545: LIST
77546: PUSH
77547: LD_VAR 0 1
77551: PUSH
77552: LD_INT 4
77554: PLUS
77555: PUSH
77556: LD_VAR 0 2
77560: PUSH
77561: LD_INT 4
77563: PLUS
77564: PUSH
77565: LD_INT 5
77567: PUSH
77568: EMPTY
77569: LIST
77570: LIST
77571: LIST
77572: PUSH
77573: LD_VAR 0 1
77577: PUSH
77578: LD_INT 4
77580: MINUS
77581: PUSH
77582: LD_VAR 0 2
77586: PUSH
77587: LD_INT 1
77589: PUSH
77590: EMPTY
77591: LIST
77592: LIST
77593: LIST
77594: PUSH
77595: LD_VAR 0 1
77599: PUSH
77600: LD_VAR 0 2
77604: PUSH
77605: LD_INT 4
77607: MINUS
77608: PUSH
77609: LD_INT 3
77611: PUSH
77612: EMPTY
77613: LIST
77614: LIST
77615: LIST
77616: PUSH
77617: LD_VAR 0 1
77621: PUSH
77622: LD_INT 3
77624: MINUS
77625: PUSH
77626: LD_VAR 0 2
77630: PUSH
77631: LD_INT 3
77633: MINUS
77634: PUSH
77635: LD_INT 2
77637: PUSH
77638: EMPTY
77639: LIST
77640: LIST
77641: LIST
77642: PUSH
77643: EMPTY
77644: LIST
77645: LIST
77646: LIST
77647: LIST
77648: LIST
77649: ST_TO_ADDR
// end ; 4 :
77650: GO 77931
77652: LD_INT 4
77654: DOUBLE
77655: EQUAL
77656: IFTRUE 77660
77658: GO 77793
77660: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
77661: LD_ADDR_VAR 0 5
77665: PUSH
77666: LD_VAR 0 1
77670: PUSH
77671: LD_VAR 0 2
77675: PUSH
77676: LD_INT 4
77678: PLUS
77679: PUSH
77680: LD_INT 0
77682: PUSH
77683: EMPTY
77684: LIST
77685: LIST
77686: LIST
77687: PUSH
77688: LD_VAR 0 1
77692: PUSH
77693: LD_INT 3
77695: PLUS
77696: PUSH
77697: LD_VAR 0 2
77701: PUSH
77702: LD_INT 3
77704: PLUS
77705: PUSH
77706: LD_INT 5
77708: PUSH
77709: EMPTY
77710: LIST
77711: LIST
77712: LIST
77713: PUSH
77714: LD_VAR 0 1
77718: PUSH
77719: LD_INT 4
77721: PLUS
77722: PUSH
77723: LD_VAR 0 2
77727: PUSH
77728: LD_INT 4
77730: PUSH
77731: EMPTY
77732: LIST
77733: LIST
77734: LIST
77735: PUSH
77736: LD_VAR 0 1
77740: PUSH
77741: LD_VAR 0 2
77745: PUSH
77746: LD_INT 3
77748: MINUS
77749: PUSH
77750: LD_INT 3
77752: PUSH
77753: EMPTY
77754: LIST
77755: LIST
77756: LIST
77757: PUSH
77758: LD_VAR 0 1
77762: PUSH
77763: LD_INT 4
77765: MINUS
77766: PUSH
77767: LD_VAR 0 2
77771: PUSH
77772: LD_INT 4
77774: MINUS
77775: PUSH
77776: LD_INT 2
77778: PUSH
77779: EMPTY
77780: LIST
77781: LIST
77782: LIST
77783: PUSH
77784: EMPTY
77785: LIST
77786: LIST
77787: LIST
77788: LIST
77789: LIST
77790: ST_TO_ADDR
// end ; 5 :
77791: GO 77931
77793: LD_INT 5
77795: DOUBLE
77796: EQUAL
77797: IFTRUE 77801
77799: GO 77930
77801: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
77802: LD_ADDR_VAR 0 5
77806: PUSH
77807: LD_VAR 0 1
77811: PUSH
77812: LD_INT 4
77814: MINUS
77815: PUSH
77816: LD_VAR 0 2
77820: PUSH
77821: LD_INT 1
77823: PUSH
77824: EMPTY
77825: LIST
77826: LIST
77827: LIST
77828: PUSH
77829: LD_VAR 0 1
77833: PUSH
77834: LD_VAR 0 2
77838: PUSH
77839: LD_INT 4
77841: MINUS
77842: PUSH
77843: LD_INT 3
77845: PUSH
77846: EMPTY
77847: LIST
77848: LIST
77849: LIST
77850: PUSH
77851: LD_VAR 0 1
77855: PUSH
77856: LD_INT 4
77858: PLUS
77859: PUSH
77860: LD_VAR 0 2
77864: PUSH
77865: LD_INT 4
77867: PLUS
77868: PUSH
77869: LD_INT 5
77871: PUSH
77872: EMPTY
77873: LIST
77874: LIST
77875: LIST
77876: PUSH
77877: LD_VAR 0 1
77881: PUSH
77882: LD_INT 3
77884: PLUS
77885: PUSH
77886: LD_VAR 0 2
77890: PUSH
77891: LD_INT 4
77893: PUSH
77894: EMPTY
77895: LIST
77896: LIST
77897: LIST
77898: PUSH
77899: LD_VAR 0 1
77903: PUSH
77904: LD_VAR 0 2
77908: PUSH
77909: LD_INT 3
77911: PLUS
77912: PUSH
77913: LD_INT 0
77915: PUSH
77916: EMPTY
77917: LIST
77918: LIST
77919: LIST
77920: PUSH
77921: EMPTY
77922: LIST
77923: LIST
77924: LIST
77925: LIST
77926: LIST
77927: ST_TO_ADDR
// end ; end ;
77928: GO 77931
77930: POP
// result := list ;
77931: LD_ADDR_VAR 0 4
77935: PUSH
77936: LD_VAR 0 5
77940: ST_TO_ADDR
// end ;
77941: LD_VAR 0 4
77945: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
77946: LD_INT 0
77948: PPUSH
77949: PPUSH
77950: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
77951: LD_VAR 0 1
77955: NOT
77956: IFTRUE 77984
77958: PUSH
77959: LD_VAR 0 2
77963: PUSH
77964: LD_INT 1
77966: PUSH
77967: LD_INT 2
77969: PUSH
77970: LD_INT 3
77972: PUSH
77973: LD_INT 4
77975: PUSH
77976: EMPTY
77977: LIST
77978: LIST
77979: LIST
77980: LIST
77981: IN
77982: NOT
77983: OR
77984: IFFALSE 77988
// exit ;
77986: GO 78071
// tmp := [ ] ;
77988: LD_ADDR_VAR 0 5
77992: PUSH
77993: EMPTY
77994: ST_TO_ADDR
// for i in units do
77995: LD_ADDR_VAR 0 4
77999: PUSH
78000: LD_VAR 0 1
78004: PUSH
78005: FOR_IN
78006: IFFALSE 78040
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
78008: LD_ADDR_VAR 0 5
78012: PUSH
78013: LD_VAR 0 5
78017: PPUSH
78018: LD_VAR 0 4
78022: PPUSH
78023: LD_VAR 0 2
78027: PPUSH
78028: CALL_OW 259
78032: PPUSH
78033: CALL 79466 0 2
78037: ST_TO_ADDR
78038: GO 78005
78040: POP
78041: POP
// if not tmp then
78042: LD_VAR 0 5
78046: NOT
78047: IFFALSE 78051
// exit ;
78049: GO 78071
// result := SortListByListDesc ( units , tmp ) ;
78051: LD_ADDR_VAR 0 3
78055: PUSH
78056: LD_VAR 0 1
78060: PPUSH
78061: LD_VAR 0 5
78065: PPUSH
78066: CALL_OW 77
78070: ST_TO_ADDR
// end ;
78071: LD_VAR 0 3
78075: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
78076: LD_INT 0
78078: PPUSH
78079: PPUSH
78080: PPUSH
// result := false ;
78081: LD_ADDR_VAR 0 3
78085: PUSH
78086: LD_INT 0
78088: ST_TO_ADDR
// if not building then
78089: LD_VAR 0 2
78093: NOT
78094: IFFALSE 78098
// exit ;
78096: GO 78242
// x := GetX ( building ) ;
78098: LD_ADDR_VAR 0 4
78102: PUSH
78103: LD_VAR 0 2
78107: PPUSH
78108: CALL_OW 250
78112: ST_TO_ADDR
// y := GetY ( building ) ;
78113: LD_ADDR_VAR 0 5
78117: PUSH
78118: LD_VAR 0 2
78122: PPUSH
78123: CALL_OW 251
78127: ST_TO_ADDR
// if not x or not y then
78128: LD_VAR 0 4
78132: NOT
78133: IFTRUE 78142
78135: PUSH
78136: LD_VAR 0 5
78140: NOT
78141: OR
78142: IFFALSE 78146
// exit ;
78144: GO 78242
// if GetTaskList ( unit ) then
78146: LD_VAR 0 1
78150: PPUSH
78151: CALL_OW 437
78155: IFFALSE 78242
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
78157: LD_STRING e
78159: PUSH
78160: LD_VAR 0 1
78164: PPUSH
78165: CALL_OW 437
78169: PUSH
78170: LD_INT 1
78172: ARRAY
78173: PUSH
78174: LD_INT 1
78176: ARRAY
78177: EQUAL
78178: IFFALSE 78205
78180: PUSH
78181: LD_VAR 0 4
78185: PUSH
78186: LD_VAR 0 1
78190: PPUSH
78191: CALL_OW 437
78195: PUSH
78196: LD_INT 1
78198: ARRAY
78199: PUSH
78200: LD_INT 2
78202: ARRAY
78203: EQUAL
78204: AND
78205: IFFALSE 78232
78207: PUSH
78208: LD_VAR 0 5
78212: PUSH
78213: LD_VAR 0 1
78217: PPUSH
78218: CALL_OW 437
78222: PUSH
78223: LD_INT 1
78225: ARRAY
78226: PUSH
78227: LD_INT 3
78229: ARRAY
78230: EQUAL
78231: AND
78232: IFFALSE 78242
// result := true end ;
78234: LD_ADDR_VAR 0 3
78238: PUSH
78239: LD_INT 1
78241: ST_TO_ADDR
// end ;
78242: LD_VAR 0 3
78246: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
78247: LD_INT 0
78249: PPUSH
// result := false ;
78250: LD_ADDR_VAR 0 4
78254: PUSH
78255: LD_INT 0
78257: ST_TO_ADDR
// if GetTaskList ( unit ) then
78258: LD_VAR 0 1
78262: PPUSH
78263: CALL_OW 437
78267: IFFALSE 78354
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
78269: LD_STRING M
78271: PUSH
78272: LD_VAR 0 1
78276: PPUSH
78277: CALL_OW 437
78281: PUSH
78282: LD_INT 1
78284: ARRAY
78285: PUSH
78286: LD_INT 1
78288: ARRAY
78289: EQUAL
78290: IFFALSE 78317
78292: PUSH
78293: LD_VAR 0 2
78297: PUSH
78298: LD_VAR 0 1
78302: PPUSH
78303: CALL_OW 437
78307: PUSH
78308: LD_INT 1
78310: ARRAY
78311: PUSH
78312: LD_INT 2
78314: ARRAY
78315: EQUAL
78316: AND
78317: IFFALSE 78344
78319: PUSH
78320: LD_VAR 0 3
78324: PUSH
78325: LD_VAR 0 1
78329: PPUSH
78330: CALL_OW 437
78334: PUSH
78335: LD_INT 1
78337: ARRAY
78338: PUSH
78339: LD_INT 3
78341: ARRAY
78342: EQUAL
78343: AND
78344: IFFALSE 78354
// result := true ;
78346: LD_ADDR_VAR 0 4
78350: PUSH
78351: LD_INT 1
78353: ST_TO_ADDR
// end ; end ;
78354: LD_VAR 0 4
78358: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
78359: LD_INT 0
78361: PPUSH
78362: PPUSH
78363: PPUSH
78364: PPUSH
// if not unit or not area then
78365: LD_VAR 0 1
78369: NOT
78370: IFTRUE 78379
78372: PUSH
78373: LD_VAR 0 2
78377: NOT
78378: OR
78379: IFFALSE 78383
// exit ;
78381: GO 78559
// tmp := AreaToList ( area , i ) ;
78383: LD_ADDR_VAR 0 6
78387: PUSH
78388: LD_VAR 0 2
78392: PPUSH
78393: LD_VAR 0 5
78397: PPUSH
78398: CALL_OW 517
78402: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
78403: LD_ADDR_VAR 0 5
78407: PUSH
78408: DOUBLE
78409: LD_INT 1
78411: DEC
78412: ST_TO_ADDR
78413: LD_VAR 0 6
78417: PUSH
78418: LD_INT 1
78420: ARRAY
78421: PUSH
78422: FOR_TO
78423: IFFALSE 78557
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
78425: LD_ADDR_VAR 0 7
78429: PUSH
78430: LD_VAR 0 6
78434: PUSH
78435: LD_INT 1
78437: ARRAY
78438: PUSH
78439: LD_VAR 0 5
78443: ARRAY
78444: PUSH
78445: LD_VAR 0 6
78449: PUSH
78450: LD_INT 2
78452: ARRAY
78453: PUSH
78454: LD_VAR 0 5
78458: ARRAY
78459: PUSH
78460: EMPTY
78461: LIST
78462: LIST
78463: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
78464: LD_INT 92
78466: PUSH
78467: LD_VAR 0 7
78471: PUSH
78472: LD_INT 1
78474: ARRAY
78475: PUSH
78476: LD_VAR 0 7
78480: PUSH
78481: LD_INT 2
78483: ARRAY
78484: PUSH
78485: LD_INT 2
78487: PUSH
78488: EMPTY
78489: LIST
78490: LIST
78491: LIST
78492: LIST
78493: PPUSH
78494: CALL_OW 69
78498: PUSH
78499: LD_INT 0
78501: EQUAL
78502: IFFALSE 78555
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
78504: LD_VAR 0 1
78508: PPUSH
78509: LD_VAR 0 7
78513: PUSH
78514: LD_INT 1
78516: ARRAY
78517: PPUSH
78518: LD_VAR 0 7
78522: PUSH
78523: LD_INT 2
78525: ARRAY
78526: PPUSH
78527: LD_VAR 0 3
78531: PPUSH
78532: CALL_OW 48
// result := IsPlaced ( unit ) ;
78536: LD_ADDR_VAR 0 4
78540: PUSH
78541: LD_VAR 0 1
78545: PPUSH
78546: CALL_OW 305
78550: ST_TO_ADDR
// exit ;
78551: POP
78552: POP
78553: GO 78559
// end ; end ;
78555: GO 78422
78557: POP
78558: POP
// end ;
78559: LD_VAR 0 4
78563: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
78564: LD_INT 0
78566: PPUSH
78567: PPUSH
78568: PPUSH
// if not side or side > 8 then
78569: LD_VAR 0 1
78573: NOT
78574: IFTRUE 78586
78576: PUSH
78577: LD_VAR 0 1
78581: PUSH
78582: LD_INT 8
78584: GREATER
78585: OR
78586: IFFALSE 78590
// exit ;
78588: GO 78777
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
78590: LD_ADDR_VAR 0 4
78594: PUSH
78595: LD_INT 22
78597: PUSH
78598: LD_VAR 0 1
78602: PUSH
78603: EMPTY
78604: LIST
78605: LIST
78606: PUSH
78607: LD_INT 21
78609: PUSH
78610: LD_INT 3
78612: PUSH
78613: EMPTY
78614: LIST
78615: LIST
78616: PUSH
78617: EMPTY
78618: LIST
78619: LIST
78620: PPUSH
78621: CALL_OW 69
78625: ST_TO_ADDR
// if not tmp then
78626: LD_VAR 0 4
78630: NOT
78631: IFFALSE 78635
// exit ;
78633: GO 78777
// enable_addtolog := true ;
78635: LD_ADDR_OWVAR 81
78639: PUSH
78640: LD_INT 1
78642: ST_TO_ADDR
// AddToLog ( [ ) ;
78643: LD_STRING [
78645: PPUSH
78646: CALL_OW 561
// for i in tmp do
78650: LD_ADDR_VAR 0 3
78654: PUSH
78655: LD_VAR 0 4
78659: PUSH
78660: FOR_IN
78661: IFFALSE 78768
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
78663: LD_STRING [
78665: PUSH
78666: LD_VAR 0 3
78670: PPUSH
78671: CALL_OW 266
78675: STR
78676: PUSH
78677: LD_STRING , 
78679: STR
78680: PUSH
78681: LD_VAR 0 3
78685: PPUSH
78686: CALL_OW 250
78690: STR
78691: PUSH
78692: LD_STRING , 
78694: STR
78695: PUSH
78696: LD_VAR 0 3
78700: PPUSH
78701: CALL_OW 251
78705: STR
78706: PUSH
78707: LD_STRING , 
78709: STR
78710: PUSH
78711: LD_VAR 0 3
78715: PPUSH
78716: CALL_OW 254
78720: STR
78721: PUSH
78722: LD_STRING , 
78724: STR
78725: PUSH
78726: LD_VAR 0 3
78730: PPUSH
78731: LD_INT 1
78733: PPUSH
78734: CALL_OW 268
78738: STR
78739: PUSH
78740: LD_STRING , 
78742: STR
78743: PUSH
78744: LD_VAR 0 3
78748: PPUSH
78749: LD_INT 2
78751: PPUSH
78752: CALL_OW 268
78756: STR
78757: PUSH
78758: LD_STRING ],
78760: STR
78761: PPUSH
78762: CALL_OW 561
// end ;
78766: GO 78660
78768: POP
78769: POP
// AddToLog ( ]; ) ;
78770: LD_STRING ];
78772: PPUSH
78773: CALL_OW 561
// end ;
78777: LD_VAR 0 2
78781: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
78782: LD_INT 0
78784: PPUSH
78785: PPUSH
78786: PPUSH
78787: PPUSH
78788: PPUSH
// if not area or not rate or not max then
78789: LD_VAR 0 1
78793: NOT
78794: IFTRUE 78803
78796: PUSH
78797: LD_VAR 0 2
78801: NOT
78802: OR
78803: IFTRUE 78812
78805: PUSH
78806: LD_VAR 0 4
78810: NOT
78811: OR
78812: IFFALSE 78816
// exit ;
78814: GO 79005
// while 1 do
78816: LD_INT 1
78818: IFFALSE 79005
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
78820: LD_ADDR_VAR 0 9
78824: PUSH
78825: LD_VAR 0 1
78829: PPUSH
78830: LD_INT 1
78832: PPUSH
78833: CALL_OW 287
78837: PUSH
78838: LD_INT 10
78840: MUL
78841: ST_TO_ADDR
// r := rate / 10 ;
78842: LD_ADDR_VAR 0 7
78846: PUSH
78847: LD_VAR 0 2
78851: PUSH
78852: LD_INT 10
78854: DIVREAL
78855: ST_TO_ADDR
// time := 1 1$00 ;
78856: LD_ADDR_VAR 0 8
78860: PUSH
78861: LD_INT 2100
78863: ST_TO_ADDR
// if amount < min then
78864: LD_VAR 0 9
78868: PUSH
78869: LD_VAR 0 3
78873: LESS
78874: IFFALSE 78892
// r := r * 2 else
78876: LD_ADDR_VAR 0 7
78880: PUSH
78881: LD_VAR 0 7
78885: PUSH
78886: LD_INT 2
78888: MUL
78889: ST_TO_ADDR
78890: GO 78918
// if amount > max then
78892: LD_VAR 0 9
78896: PUSH
78897: LD_VAR 0 4
78901: GREATER
78902: IFFALSE 78918
// r := r / 2 ;
78904: LD_ADDR_VAR 0 7
78908: PUSH
78909: LD_VAR 0 7
78913: PUSH
78914: LD_INT 2
78916: DIVREAL
78917: ST_TO_ADDR
// time := time / r ;
78918: LD_ADDR_VAR 0 8
78922: PUSH
78923: LD_VAR 0 8
78927: PUSH
78928: LD_VAR 0 7
78932: DIVREAL
78933: ST_TO_ADDR
// if time < 0 then
78934: LD_VAR 0 8
78938: PUSH
78939: LD_INT 0
78941: LESS
78942: IFFALSE 78959
// time := time * - 1 ;
78944: LD_ADDR_VAR 0 8
78948: PUSH
78949: LD_VAR 0 8
78953: PUSH
78954: LD_INT 1
78956: NEG
78957: MUL
78958: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
78959: LD_VAR 0 8
78963: PUSH
78964: LD_INT 35
78966: PPUSH
78967: LD_INT 875
78969: PPUSH
78970: CALL_OW 12
78974: PLUS
78975: PPUSH
78976: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
78980: LD_INT 1
78982: PPUSH
78983: LD_INT 5
78985: PPUSH
78986: CALL_OW 12
78990: PPUSH
78991: LD_VAR 0 1
78995: PPUSH
78996: LD_INT 1
78998: PPUSH
78999: CALL_OW 55
// end ;
79003: GO 78816
// end ;
79005: LD_VAR 0 5
79009: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
79010: LD_INT 0
79012: PPUSH
79013: PPUSH
79014: PPUSH
79015: PPUSH
79016: PPUSH
79017: PPUSH
79018: PPUSH
79019: PPUSH
// if not turrets or not factories then
79020: LD_VAR 0 1
79024: NOT
79025: IFTRUE 79034
79027: PUSH
79028: LD_VAR 0 2
79032: NOT
79033: OR
79034: IFFALSE 79038
// exit ;
79036: GO 79345
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
79038: LD_ADDR_VAR 0 10
79042: PUSH
79043: LD_INT 5
79045: PUSH
79046: LD_INT 6
79048: PUSH
79049: EMPTY
79050: LIST
79051: LIST
79052: PUSH
79053: LD_INT 2
79055: PUSH
79056: LD_INT 4
79058: PUSH
79059: EMPTY
79060: LIST
79061: LIST
79062: PUSH
79063: LD_INT 3
79065: PUSH
79066: LD_INT 5
79068: PUSH
79069: EMPTY
79070: LIST
79071: LIST
79072: PUSH
79073: EMPTY
79074: LIST
79075: LIST
79076: LIST
79077: PUSH
79078: LD_INT 24
79080: PUSH
79081: LD_INT 25
79083: PUSH
79084: EMPTY
79085: LIST
79086: LIST
79087: PUSH
79088: LD_INT 23
79090: PUSH
79091: LD_INT 27
79093: PUSH
79094: EMPTY
79095: LIST
79096: LIST
79097: PUSH
79098: EMPTY
79099: LIST
79100: LIST
79101: PUSH
79102: LD_INT 42
79104: PUSH
79105: LD_INT 43
79107: PUSH
79108: EMPTY
79109: LIST
79110: LIST
79111: PUSH
79112: LD_INT 44
79114: PUSH
79115: LD_INT 46
79117: PUSH
79118: EMPTY
79119: LIST
79120: LIST
79121: PUSH
79122: LD_INT 45
79124: PUSH
79125: LD_INT 47
79127: PUSH
79128: EMPTY
79129: LIST
79130: LIST
79131: PUSH
79132: EMPTY
79133: LIST
79134: LIST
79135: LIST
79136: PUSH
79137: EMPTY
79138: LIST
79139: LIST
79140: LIST
79141: ST_TO_ADDR
// result := [ ] ;
79142: LD_ADDR_VAR 0 3
79146: PUSH
79147: EMPTY
79148: ST_TO_ADDR
// for i in turrets do
79149: LD_ADDR_VAR 0 4
79153: PUSH
79154: LD_VAR 0 1
79158: PUSH
79159: FOR_IN
79160: IFFALSE 79343
// begin nat := GetNation ( i ) ;
79162: LD_ADDR_VAR 0 7
79166: PUSH
79167: LD_VAR 0 4
79171: PPUSH
79172: CALL_OW 248
79176: ST_TO_ADDR
// weapon := 0 ;
79177: LD_ADDR_VAR 0 8
79181: PUSH
79182: LD_INT 0
79184: ST_TO_ADDR
// if not nat then
79185: LD_VAR 0 7
79189: NOT
79190: IFFALSE 79194
// continue ;
79192: GO 79159
// for j in list [ nat ] do
79194: LD_ADDR_VAR 0 5
79198: PUSH
79199: LD_VAR 0 10
79203: PUSH
79204: LD_VAR 0 7
79208: ARRAY
79209: PUSH
79210: FOR_IN
79211: IFFALSE 79252
// if GetBWeapon ( i ) = j [ 1 ] then
79213: LD_VAR 0 4
79217: PPUSH
79218: CALL_OW 269
79222: PUSH
79223: LD_VAR 0 5
79227: PUSH
79228: LD_INT 1
79230: ARRAY
79231: EQUAL
79232: IFFALSE 79250
// begin weapon := j [ 2 ] ;
79234: LD_ADDR_VAR 0 8
79238: PUSH
79239: LD_VAR 0 5
79243: PUSH
79244: LD_INT 2
79246: ARRAY
79247: ST_TO_ADDR
// break ;
79248: GO 79252
// end ;
79250: GO 79210
79252: POP
79253: POP
// if not weapon then
79254: LD_VAR 0 8
79258: NOT
79259: IFFALSE 79263
// continue ;
79261: GO 79159
// for k in factories do
79263: LD_ADDR_VAR 0 6
79267: PUSH
79268: LD_VAR 0 2
79272: PUSH
79273: FOR_IN
79274: IFFALSE 79339
// begin weapons := AvailableWeaponList ( k ) ;
79276: LD_ADDR_VAR 0 9
79280: PUSH
79281: LD_VAR 0 6
79285: PPUSH
79286: CALL_OW 478
79290: ST_TO_ADDR
// if not weapons then
79291: LD_VAR 0 9
79295: NOT
79296: IFFALSE 79300
// continue ;
79298: GO 79273
// if weapon in weapons then
79300: LD_VAR 0 8
79304: PUSH
79305: LD_VAR 0 9
79309: IN
79310: IFFALSE 79337
// begin result := [ i , weapon ] ;
79312: LD_ADDR_VAR 0 3
79316: PUSH
79317: LD_VAR 0 4
79321: PUSH
79322: LD_VAR 0 8
79326: PUSH
79327: EMPTY
79328: LIST
79329: LIST
79330: ST_TO_ADDR
// exit ;
79331: POP
79332: POP
79333: POP
79334: POP
79335: GO 79345
// end ; end ;
79337: GO 79273
79339: POP
79340: POP
// end ;
79341: GO 79159
79343: POP
79344: POP
// end ;
79345: LD_VAR 0 3
79349: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
79350: LD_INT 0
79352: PPUSH
// if not side or side > 8 then
79353: LD_VAR 0 3
79357: NOT
79358: IFTRUE 79370
79360: PUSH
79361: LD_VAR 0 3
79365: PUSH
79366: LD_INT 8
79368: GREATER
79369: OR
79370: IFFALSE 79374
// exit ;
79372: GO 79433
// if not range then
79374: LD_VAR 0 4
79378: NOT
79379: IFFALSE 79390
// range := - 12 ;
79381: LD_ADDR_VAR 0 4
79385: PUSH
79386: LD_INT 12
79388: NEG
79389: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
79390: LD_VAR 0 1
79394: PPUSH
79395: LD_VAR 0 2
79399: PPUSH
79400: LD_VAR 0 3
79404: PPUSH
79405: LD_VAR 0 4
79409: PPUSH
79410: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
79414: LD_VAR 0 1
79418: PPUSH
79419: LD_VAR 0 2
79423: PPUSH
79424: LD_VAR 0 3
79428: PPUSH
79429: CALL_OW 331
// end ;
79433: LD_VAR 0 5
79437: RET
// export function Video ( mode ) ; begin
79438: LD_INT 0
79440: PPUSH
// ingame_video = mode ;
79441: LD_ADDR_OWVAR 52
79445: PUSH
79446: LD_VAR 0 1
79450: ST_TO_ADDR
// interface_hidden = mode ;
79451: LD_ADDR_OWVAR 54
79455: PUSH
79456: LD_VAR 0 1
79460: ST_TO_ADDR
// end ;
79461: LD_VAR 0 2
79465: RET
// export function Join ( array , element ) ; begin
79466: LD_INT 0
79468: PPUSH
// result := Replace ( array , array + 1 , element ) ;
79469: LD_ADDR_VAR 0 3
79473: PUSH
79474: LD_VAR 0 1
79478: PPUSH
79479: LD_VAR 0 1
79483: PUSH
79484: LD_INT 1
79486: PLUS
79487: PPUSH
79488: LD_VAR 0 2
79492: PPUSH
79493: CALL_OW 1
79497: ST_TO_ADDR
// end ;
79498: LD_VAR 0 3
79502: RET
// export function JoinUnion ( array , element ) ; begin
79503: LD_INT 0
79505: PPUSH
// result := array union element ;
79506: LD_ADDR_VAR 0 3
79510: PUSH
79511: LD_VAR 0 1
79515: PUSH
79516: LD_VAR 0 2
79520: UNION
79521: ST_TO_ADDR
// end ;
79522: LD_VAR 0 3
79526: RET
// export function GetBehemoths ( side ) ; begin
79527: LD_INT 0
79529: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
79530: LD_ADDR_VAR 0 2
79534: PUSH
79535: LD_INT 22
79537: PUSH
79538: LD_VAR 0 1
79542: PUSH
79543: EMPTY
79544: LIST
79545: LIST
79546: PUSH
79547: LD_INT 31
79549: PUSH
79550: LD_INT 25
79552: PUSH
79553: EMPTY
79554: LIST
79555: LIST
79556: PUSH
79557: EMPTY
79558: LIST
79559: LIST
79560: PPUSH
79561: CALL_OW 69
79565: ST_TO_ADDR
// end ;
79566: LD_VAR 0 2
79570: RET
// export function Shuffle ( array ) ; var i , index ; begin
79571: LD_INT 0
79573: PPUSH
79574: PPUSH
79575: PPUSH
// result := [ ] ;
79576: LD_ADDR_VAR 0 2
79580: PUSH
79581: EMPTY
79582: ST_TO_ADDR
// if not array then
79583: LD_VAR 0 1
79587: NOT
79588: IFFALSE 79592
// exit ;
79590: GO 79691
// Randomize ;
79592: CALL_OW 10
// for i = array downto 1 do
79596: LD_ADDR_VAR 0 3
79600: PUSH
79601: DOUBLE
79602: LD_VAR 0 1
79606: INC
79607: ST_TO_ADDR
79608: LD_INT 1
79610: PUSH
79611: FOR_DOWNTO
79612: IFFALSE 79689
// begin index := rand ( 1 , array ) ;
79614: LD_ADDR_VAR 0 4
79618: PUSH
79619: LD_INT 1
79621: PPUSH
79622: LD_VAR 0 1
79626: PPUSH
79627: CALL_OW 12
79631: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
79632: LD_ADDR_VAR 0 2
79636: PUSH
79637: LD_VAR 0 2
79641: PPUSH
79642: LD_VAR 0 2
79646: PUSH
79647: LD_INT 1
79649: PLUS
79650: PPUSH
79651: LD_VAR 0 1
79655: PUSH
79656: LD_VAR 0 4
79660: ARRAY
79661: PPUSH
79662: CALL_OW 2
79666: ST_TO_ADDR
// array := Delete ( array , index ) ;
79667: LD_ADDR_VAR 0 1
79671: PUSH
79672: LD_VAR 0 1
79676: PPUSH
79677: LD_VAR 0 4
79681: PPUSH
79682: CALL_OW 3
79686: ST_TO_ADDR
// end ;
79687: GO 79611
79689: POP
79690: POP
// end ;
79691: LD_VAR 0 2
79695: RET
// export function GetBaseMaterials ( base ) ; begin
79696: LD_INT 0
79698: PPUSH
// result := [ 0 , 0 , 0 ] ;
79699: LD_ADDR_VAR 0 2
79703: PUSH
79704: LD_INT 0
79706: PUSH
79707: LD_INT 0
79709: PUSH
79710: LD_INT 0
79712: PUSH
79713: EMPTY
79714: LIST
79715: LIST
79716: LIST
79717: ST_TO_ADDR
// if not base then
79718: LD_VAR 0 1
79722: NOT
79723: IFFALSE 79727
// exit ;
79725: GO 79776
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
79727: LD_ADDR_VAR 0 2
79731: PUSH
79732: LD_VAR 0 1
79736: PPUSH
79737: LD_INT 1
79739: PPUSH
79740: CALL_OW 275
79744: PUSH
79745: LD_VAR 0 1
79749: PPUSH
79750: LD_INT 2
79752: PPUSH
79753: CALL_OW 275
79757: PUSH
79758: LD_VAR 0 1
79762: PPUSH
79763: LD_INT 3
79765: PPUSH
79766: CALL_OW 275
79770: PUSH
79771: EMPTY
79772: LIST
79773: LIST
79774: LIST
79775: ST_TO_ADDR
// end ;
79776: LD_VAR 0 2
79780: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
79781: LD_INT 0
79783: PPUSH
79784: PPUSH
// result := array ;
79785: LD_ADDR_VAR 0 3
79789: PUSH
79790: LD_VAR 0 1
79794: ST_TO_ADDR
// if size >= result then
79795: LD_VAR 0 2
79799: PUSH
79800: LD_VAR 0 3
79804: GREATEREQUAL
79805: IFFALSE 79809
// exit ;
79807: GO 79859
// if size then
79809: LD_VAR 0 2
79813: IFFALSE 79859
// for i := array downto size do
79815: LD_ADDR_VAR 0 4
79819: PUSH
79820: DOUBLE
79821: LD_VAR 0 1
79825: INC
79826: ST_TO_ADDR
79827: LD_VAR 0 2
79831: PUSH
79832: FOR_DOWNTO
79833: IFFALSE 79857
// result := Delete ( result , result ) ;
79835: LD_ADDR_VAR 0 3
79839: PUSH
79840: LD_VAR 0 3
79844: PPUSH
79845: LD_VAR 0 3
79849: PPUSH
79850: CALL_OW 3
79854: ST_TO_ADDR
79855: GO 79832
79857: POP
79858: POP
// end ;
79859: LD_VAR 0 3
79863: RET
// export function ComExit ( unit ) ; var tmp ; begin
79864: LD_INT 0
79866: PPUSH
79867: PPUSH
// if not IsInUnit ( unit ) then
79868: LD_VAR 0 1
79872: PPUSH
79873: CALL_OW 310
79877: NOT
79878: IFFALSE 79882
// exit ;
79880: GO 79942
// tmp := IsInUnit ( unit ) ;
79882: LD_ADDR_VAR 0 3
79886: PUSH
79887: LD_VAR 0 1
79891: PPUSH
79892: CALL_OW 310
79896: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
79897: LD_VAR 0 3
79901: PPUSH
79902: CALL_OW 247
79906: PUSH
79907: LD_INT 2
79909: EQUAL
79910: IFFALSE 79923
// ComExitVehicle ( unit ) else
79912: LD_VAR 0 1
79916: PPUSH
79917: CALL_OW 121
79921: GO 79932
// ComExitBuilding ( unit ) ;
79923: LD_VAR 0 1
79927: PPUSH
79928: CALL_OW 122
// result := tmp ;
79932: LD_ADDR_VAR 0 2
79936: PUSH
79937: LD_VAR 0 3
79941: ST_TO_ADDR
// end ;
79942: LD_VAR 0 2
79946: RET
// export function ComExitAll ( units ) ; var i ; begin
79947: LD_INT 0
79949: PPUSH
79950: PPUSH
// if not units then
79951: LD_VAR 0 1
79955: NOT
79956: IFFALSE 79960
// exit ;
79958: GO 79986
// for i in units do
79960: LD_ADDR_VAR 0 3
79964: PUSH
79965: LD_VAR 0 1
79969: PUSH
79970: FOR_IN
79971: IFFALSE 79984
// ComExit ( i ) ;
79973: LD_VAR 0 3
79977: PPUSH
79978: CALL 79864 0 1
79982: GO 79970
79984: POP
79985: POP
// end ;
79986: LD_VAR 0 2
79990: RET
// export function ResetHc ; begin
79991: LD_INT 0
79993: PPUSH
// InitHc ;
79994: CALL_OW 19
// hc_importance := 0 ;
79998: LD_ADDR_OWVAR 32
80002: PUSH
80003: LD_INT 0
80005: ST_TO_ADDR
// end ;
80006: LD_VAR 0 1
80010: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
80011: LD_INT 0
80013: PPUSH
80014: PPUSH
80015: PPUSH
// _x := ( x1 + x2 ) div 2 ;
80016: LD_ADDR_VAR 0 6
80020: PUSH
80021: LD_VAR 0 1
80025: PUSH
80026: LD_VAR 0 3
80030: PLUS
80031: PUSH
80032: LD_INT 2
80034: DIV
80035: ST_TO_ADDR
// if _x < 0 then
80036: LD_VAR 0 6
80040: PUSH
80041: LD_INT 0
80043: LESS
80044: IFFALSE 80061
// _x := _x * - 1 ;
80046: LD_ADDR_VAR 0 6
80050: PUSH
80051: LD_VAR 0 6
80055: PUSH
80056: LD_INT 1
80058: NEG
80059: MUL
80060: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
80061: LD_ADDR_VAR 0 7
80065: PUSH
80066: LD_VAR 0 2
80070: PUSH
80071: LD_VAR 0 4
80075: PLUS
80076: PUSH
80077: LD_INT 2
80079: DIV
80080: ST_TO_ADDR
// if _y < 0 then
80081: LD_VAR 0 7
80085: PUSH
80086: LD_INT 0
80088: LESS
80089: IFFALSE 80106
// _y := _y * - 1 ;
80091: LD_ADDR_VAR 0 7
80095: PUSH
80096: LD_VAR 0 7
80100: PUSH
80101: LD_INT 1
80103: NEG
80104: MUL
80105: ST_TO_ADDR
// result := [ _x , _y ] ;
80106: LD_ADDR_VAR 0 5
80110: PUSH
80111: LD_VAR 0 6
80115: PUSH
80116: LD_VAR 0 7
80120: PUSH
80121: EMPTY
80122: LIST
80123: LIST
80124: ST_TO_ADDR
// end ;
80125: LD_VAR 0 5
80129: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
80130: LD_INT 0
80132: PPUSH
80133: PPUSH
80134: PPUSH
80135: PPUSH
// task := GetTaskList ( unit ) ;
80136: LD_ADDR_VAR 0 7
80140: PUSH
80141: LD_VAR 0 1
80145: PPUSH
80146: CALL_OW 437
80150: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
80151: LD_VAR 0 7
80155: NOT
80156: IFFALSE 80175
80158: PUSH
80159: LD_VAR 0 1
80163: PPUSH
80164: LD_VAR 0 2
80168: PPUSH
80169: CALL_OW 308
80173: NOT
80174: AND
80175: IFFALSE 80179
// exit ;
80177: GO 80297
// if IsInArea ( unit , area ) then
80179: LD_VAR 0 1
80183: PPUSH
80184: LD_VAR 0 2
80188: PPUSH
80189: CALL_OW 308
80193: IFFALSE 80211
// begin ComMoveToArea ( unit , goAway ) ;
80195: LD_VAR 0 1
80199: PPUSH
80200: LD_VAR 0 3
80204: PPUSH
80205: CALL_OW 113
// exit ;
80209: GO 80297
// end ; if task [ 1 ] [ 1 ] <> M then
80211: LD_VAR 0 7
80215: PUSH
80216: LD_INT 1
80218: ARRAY
80219: PUSH
80220: LD_INT 1
80222: ARRAY
80223: PUSH
80224: LD_STRING M
80226: NONEQUAL
80227: IFFALSE 80231
// exit ;
80229: GO 80297
// x := task [ 1 ] [ 2 ] ;
80231: LD_ADDR_VAR 0 5
80235: PUSH
80236: LD_VAR 0 7
80240: PUSH
80241: LD_INT 1
80243: ARRAY
80244: PUSH
80245: LD_INT 2
80247: ARRAY
80248: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
80249: LD_ADDR_VAR 0 6
80253: PUSH
80254: LD_VAR 0 7
80258: PUSH
80259: LD_INT 1
80261: ARRAY
80262: PUSH
80263: LD_INT 3
80265: ARRAY
80266: ST_TO_ADDR
// if InArea ( x , y , area ) then
80267: LD_VAR 0 5
80271: PPUSH
80272: LD_VAR 0 6
80276: PPUSH
80277: LD_VAR 0 2
80281: PPUSH
80282: CALL_OW 309
80286: IFFALSE 80297
// ComStop ( unit ) ;
80288: LD_VAR 0 1
80292: PPUSH
80293: CALL_OW 141
// end ;
80297: LD_VAR 0 4
80301: RET
// export function Abs ( value ) ; begin
80302: LD_INT 0
80304: PPUSH
// result := value ;
80305: LD_ADDR_VAR 0 2
80309: PUSH
80310: LD_VAR 0 1
80314: ST_TO_ADDR
// if value < 0 then
80315: LD_VAR 0 1
80319: PUSH
80320: LD_INT 0
80322: LESS
80323: IFFALSE 80340
// result := value * - 1 ;
80325: LD_ADDR_VAR 0 2
80329: PUSH
80330: LD_VAR 0 1
80334: PUSH
80335: LD_INT 1
80337: NEG
80338: MUL
80339: ST_TO_ADDR
// end ;
80340: LD_VAR 0 2
80344: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
80345: LD_INT 0
80347: PPUSH
80348: PPUSH
80349: PPUSH
80350: PPUSH
80351: PPUSH
80352: PPUSH
80353: PPUSH
80354: PPUSH
// if not unit or not building then
80355: LD_VAR 0 1
80359: NOT
80360: IFTRUE 80369
80362: PUSH
80363: LD_VAR 0 2
80367: NOT
80368: OR
80369: IFFALSE 80373
// exit ;
80371: GO 80601
// x := GetX ( building ) ;
80373: LD_ADDR_VAR 0 4
80377: PUSH
80378: LD_VAR 0 2
80382: PPUSH
80383: CALL_OW 250
80387: ST_TO_ADDR
// y := GetY ( building ) ;
80388: LD_ADDR_VAR 0 6
80392: PUSH
80393: LD_VAR 0 2
80397: PPUSH
80398: CALL_OW 251
80402: ST_TO_ADDR
// d := GetDir ( building ) ;
80403: LD_ADDR_VAR 0 8
80407: PUSH
80408: LD_VAR 0 2
80412: PPUSH
80413: CALL_OW 254
80417: ST_TO_ADDR
// r := 4 ;
80418: LD_ADDR_VAR 0 9
80422: PUSH
80423: LD_INT 4
80425: ST_TO_ADDR
// for i := 1 to 5 do
80426: LD_ADDR_VAR 0 10
80430: PUSH
80431: DOUBLE
80432: LD_INT 1
80434: DEC
80435: ST_TO_ADDR
80436: LD_INT 5
80438: PUSH
80439: FOR_TO
80440: IFFALSE 80599
// begin _x := ShiftX ( x , d , r + i ) ;
80442: LD_ADDR_VAR 0 5
80446: PUSH
80447: LD_VAR 0 4
80451: PPUSH
80452: LD_VAR 0 8
80456: PPUSH
80457: LD_VAR 0 9
80461: PUSH
80462: LD_VAR 0 10
80466: PLUS
80467: PPUSH
80468: CALL_OW 272
80472: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
80473: LD_ADDR_VAR 0 7
80477: PUSH
80478: LD_VAR 0 6
80482: PPUSH
80483: LD_VAR 0 8
80487: PPUSH
80488: LD_VAR 0 9
80492: PUSH
80493: LD_VAR 0 10
80497: PLUS
80498: PPUSH
80499: CALL_OW 273
80503: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
80504: LD_VAR 0 5
80508: PPUSH
80509: LD_VAR 0 7
80513: PPUSH
80514: CALL_OW 488
80518: IFFALSE 80553
80520: PUSH
80521: LD_VAR 0 5
80525: PPUSH
80526: LD_VAR 0 7
80530: PPUSH
80531: CALL_OW 428
80535: PPUSH
80536: CALL_OW 247
80540: PUSH
80541: LD_INT 3
80543: PUSH
80544: LD_INT 2
80546: PUSH
80547: EMPTY
80548: LIST
80549: LIST
80550: IN
80551: NOT
80552: AND
80553: IFFALSE 80597
// begin ComMoveXY ( unit , _x , _y ) ;
80555: LD_VAR 0 1
80559: PPUSH
80560: LD_VAR 0 5
80564: PPUSH
80565: LD_VAR 0 7
80569: PPUSH
80570: CALL_OW 111
// result := [ _x , _y ] ;
80574: LD_ADDR_VAR 0 3
80578: PUSH
80579: LD_VAR 0 5
80583: PUSH
80584: LD_VAR 0 7
80588: PUSH
80589: EMPTY
80590: LIST
80591: LIST
80592: ST_TO_ADDR
// exit ;
80593: POP
80594: POP
80595: GO 80601
// end ; end ;
80597: GO 80439
80599: POP
80600: POP
// end ;
80601: LD_VAR 0 3
80605: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
80606: LD_INT 0
80608: PPUSH
80609: PPUSH
80610: PPUSH
// result := 0 ;
80611: LD_ADDR_VAR 0 3
80615: PUSH
80616: LD_INT 0
80618: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
80619: LD_VAR 0 1
80623: PUSH
80624: LD_INT 0
80626: LESS
80627: IFTRUE 80639
80629: PUSH
80630: LD_VAR 0 1
80634: PUSH
80635: LD_INT 8
80637: GREATER
80638: OR
80639: IFTRUE 80651
80641: PUSH
80642: LD_VAR 0 2
80646: PUSH
80647: LD_INT 0
80649: LESS
80650: OR
80651: IFTRUE 80663
80653: PUSH
80654: LD_VAR 0 2
80658: PUSH
80659: LD_INT 8
80661: GREATER
80662: OR
80663: IFFALSE 80667
// exit ;
80665: GO 80742
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
80667: LD_ADDR_VAR 0 4
80671: PUSH
80672: LD_INT 22
80674: PUSH
80675: LD_VAR 0 2
80679: PUSH
80680: EMPTY
80681: LIST
80682: LIST
80683: PPUSH
80684: CALL_OW 69
80688: PUSH
80689: FOR_IN
80690: IFFALSE 80740
// begin un := UnitShoot ( i ) ;
80692: LD_ADDR_VAR 0 5
80696: PUSH
80697: LD_VAR 0 4
80701: PPUSH
80702: CALL_OW 504
80706: ST_TO_ADDR
// if GetSide ( un ) = side1 then
80707: LD_VAR 0 5
80711: PPUSH
80712: CALL_OW 255
80716: PUSH
80717: LD_VAR 0 1
80721: EQUAL
80722: IFFALSE 80738
// begin result := un ;
80724: LD_ADDR_VAR 0 3
80728: PUSH
80729: LD_VAR 0 5
80733: ST_TO_ADDR
// exit ;
80734: POP
80735: POP
80736: GO 80742
// end ; end ;
80738: GO 80689
80740: POP
80741: POP
// end ;
80742: LD_VAR 0 3
80746: RET
// export function GetCargoBay ( units ) ; begin
80747: LD_INT 0
80749: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
80750: LD_ADDR_VAR 0 2
80754: PUSH
80755: LD_VAR 0 1
80759: PPUSH
80760: LD_INT 2
80762: PUSH
80763: LD_INT 34
80765: PUSH
80766: LD_INT 12
80768: PUSH
80769: EMPTY
80770: LIST
80771: LIST
80772: PUSH
80773: LD_INT 34
80775: PUSH
80776: LD_INT 51
80778: PUSH
80779: EMPTY
80780: LIST
80781: LIST
80782: PUSH
80783: LD_INT 34
80785: PUSH
80786: LD_INT 32
80788: PUSH
80789: EMPTY
80790: LIST
80791: LIST
80792: PUSH
80793: LD_INT 34
80795: PUSH
80796: LD_INT 89
80798: PUSH
80799: EMPTY
80800: LIST
80801: LIST
80802: PUSH
80803: EMPTY
80804: LIST
80805: LIST
80806: LIST
80807: LIST
80808: LIST
80809: PPUSH
80810: CALL_OW 72
80814: ST_TO_ADDR
// end ;
80815: LD_VAR 0 2
80819: RET
// export function Negate ( value ) ; begin
80820: LD_INT 0
80822: PPUSH
// result := not value ;
80823: LD_ADDR_VAR 0 2
80827: PUSH
80828: LD_VAR 0 1
80832: NOT
80833: ST_TO_ADDR
// end ;
80834: LD_VAR 0 2
80838: RET
// export function Inc ( value ) ; begin
80839: LD_INT 0
80841: PPUSH
// result := value + 1 ;
80842: LD_ADDR_VAR 0 2
80846: PUSH
80847: LD_VAR 0 1
80851: PUSH
80852: LD_INT 1
80854: PLUS
80855: ST_TO_ADDR
// end ;
80856: LD_VAR 0 2
80860: RET
// export function Dec ( value ) ; begin
80861: LD_INT 0
80863: PPUSH
// result := value - 1 ;
80864: LD_ADDR_VAR 0 2
80868: PUSH
80869: LD_VAR 0 1
80873: PUSH
80874: LD_INT 1
80876: MINUS
80877: ST_TO_ADDR
// end ;
80878: LD_VAR 0 2
80882: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
80883: LD_INT 0
80885: PPUSH
80886: PPUSH
80887: PPUSH
80888: PPUSH
80889: PPUSH
80890: PPUSH
80891: PPUSH
80892: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
80893: LD_VAR 0 1
80897: PPUSH
80898: LD_VAR 0 2
80902: PPUSH
80903: CALL_OW 488
80907: NOT
80908: IFTRUE 80927
80910: PUSH
80911: LD_VAR 0 3
80915: PPUSH
80916: LD_VAR 0 4
80920: PPUSH
80921: CALL_OW 488
80925: NOT
80926: OR
80927: IFFALSE 80940
// begin result := - 1 ;
80929: LD_ADDR_VAR 0 5
80933: PUSH
80934: LD_INT 1
80936: NEG
80937: ST_TO_ADDR
// exit ;
80938: GO 81175
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
80940: LD_ADDR_VAR 0 12
80944: PUSH
80945: LD_VAR 0 1
80949: PPUSH
80950: LD_VAR 0 2
80954: PPUSH
80955: LD_VAR 0 3
80959: PPUSH
80960: LD_VAR 0 4
80964: PPUSH
80965: CALL 80011 0 4
80969: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
80970: LD_ADDR_VAR 0 11
80974: PUSH
80975: LD_VAR 0 1
80979: PPUSH
80980: LD_VAR 0 2
80984: PPUSH
80985: LD_VAR 0 12
80989: PUSH
80990: LD_INT 1
80992: ARRAY
80993: PPUSH
80994: LD_VAR 0 12
80998: PUSH
80999: LD_INT 2
81001: ARRAY
81002: PPUSH
81003: CALL_OW 298
81007: ST_TO_ADDR
// distance := 9999 ;
81008: LD_ADDR_VAR 0 10
81012: PUSH
81013: LD_INT 9999
81015: ST_TO_ADDR
// for i := 0 to 5 do
81016: LD_ADDR_VAR 0 6
81020: PUSH
81021: DOUBLE
81022: LD_INT 0
81024: DEC
81025: ST_TO_ADDR
81026: LD_INT 5
81028: PUSH
81029: FOR_TO
81030: IFFALSE 81173
// begin _x := ShiftX ( x1 , i , centerDist ) ;
81032: LD_ADDR_VAR 0 7
81036: PUSH
81037: LD_VAR 0 1
81041: PPUSH
81042: LD_VAR 0 6
81046: PPUSH
81047: LD_VAR 0 11
81051: PPUSH
81052: CALL_OW 272
81056: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
81057: LD_ADDR_VAR 0 8
81061: PUSH
81062: LD_VAR 0 2
81066: PPUSH
81067: LD_VAR 0 6
81071: PPUSH
81072: LD_VAR 0 11
81076: PPUSH
81077: CALL_OW 273
81081: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
81082: LD_VAR 0 7
81086: PPUSH
81087: LD_VAR 0 8
81091: PPUSH
81092: CALL_OW 488
81096: NOT
81097: IFFALSE 81101
// continue ;
81099: GO 81029
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
81101: LD_ADDR_VAR 0 9
81105: PUSH
81106: LD_VAR 0 12
81110: PUSH
81111: LD_INT 1
81113: ARRAY
81114: PPUSH
81115: LD_VAR 0 12
81119: PUSH
81120: LD_INT 2
81122: ARRAY
81123: PPUSH
81124: LD_VAR 0 7
81128: PPUSH
81129: LD_VAR 0 8
81133: PPUSH
81134: CALL_OW 298
81138: ST_TO_ADDR
// if tmp < distance then
81139: LD_VAR 0 9
81143: PUSH
81144: LD_VAR 0 10
81148: LESS
81149: IFFALSE 81171
// begin result := i ;
81151: LD_ADDR_VAR 0 5
81155: PUSH
81156: LD_VAR 0 6
81160: ST_TO_ADDR
// distance := tmp ;
81161: LD_ADDR_VAR 0 10
81165: PUSH
81166: LD_VAR 0 9
81170: ST_TO_ADDR
// end ; end ;
81171: GO 81029
81173: POP
81174: POP
// end ;
81175: LD_VAR 0 5
81179: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
81180: LD_INT 0
81182: PPUSH
81183: PPUSH
// if not driver or not IsInUnit ( driver ) then
81184: LD_VAR 0 1
81188: NOT
81189: IFTRUE 81203
81191: PUSH
81192: LD_VAR 0 1
81196: PPUSH
81197: CALL_OW 310
81201: NOT
81202: OR
81203: IFFALSE 81207
// exit ;
81205: GO 81297
// vehicle := IsInUnit ( driver ) ;
81207: LD_ADDR_VAR 0 3
81211: PUSH
81212: LD_VAR 0 1
81216: PPUSH
81217: CALL_OW 310
81221: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
81222: LD_VAR 0 1
81226: PPUSH
81227: LD_STRING \
81229: PUSH
81230: LD_INT 0
81232: PUSH
81233: LD_INT 0
81235: PUSH
81236: LD_INT 0
81238: PUSH
81239: LD_INT 0
81241: PUSH
81242: LD_INT 0
81244: PUSH
81245: LD_INT 0
81247: PUSH
81248: EMPTY
81249: LIST
81250: LIST
81251: LIST
81252: LIST
81253: LIST
81254: LIST
81255: LIST
81256: PUSH
81257: LD_STRING E
81259: PUSH
81260: LD_INT 0
81262: PUSH
81263: LD_INT 0
81265: PUSH
81266: LD_VAR 0 3
81270: PUSH
81271: LD_INT 0
81273: PUSH
81274: LD_INT 0
81276: PUSH
81277: LD_INT 0
81279: PUSH
81280: EMPTY
81281: LIST
81282: LIST
81283: LIST
81284: LIST
81285: LIST
81286: LIST
81287: LIST
81288: PUSH
81289: EMPTY
81290: LIST
81291: LIST
81292: PPUSH
81293: CALL_OW 446
// end ;
81297: LD_VAR 0 2
81301: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
81302: LD_INT 0
81304: PPUSH
81305: PPUSH
// if not driver or not IsInUnit ( driver ) then
81306: LD_VAR 0 1
81310: NOT
81311: IFTRUE 81325
81313: PUSH
81314: LD_VAR 0 1
81318: PPUSH
81319: CALL_OW 310
81323: NOT
81324: OR
81325: IFFALSE 81329
// exit ;
81327: GO 81419
// vehicle := IsInUnit ( driver ) ;
81329: LD_ADDR_VAR 0 3
81333: PUSH
81334: LD_VAR 0 1
81338: PPUSH
81339: CALL_OW 310
81343: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
81344: LD_VAR 0 1
81348: PPUSH
81349: LD_STRING \
81351: PUSH
81352: LD_INT 0
81354: PUSH
81355: LD_INT 0
81357: PUSH
81358: LD_INT 0
81360: PUSH
81361: LD_INT 0
81363: PUSH
81364: LD_INT 0
81366: PUSH
81367: LD_INT 0
81369: PUSH
81370: EMPTY
81371: LIST
81372: LIST
81373: LIST
81374: LIST
81375: LIST
81376: LIST
81377: LIST
81378: PUSH
81379: LD_STRING E
81381: PUSH
81382: LD_INT 0
81384: PUSH
81385: LD_INT 0
81387: PUSH
81388: LD_VAR 0 3
81392: PUSH
81393: LD_INT 0
81395: PUSH
81396: LD_INT 0
81398: PUSH
81399: LD_INT 0
81401: PUSH
81402: EMPTY
81403: LIST
81404: LIST
81405: LIST
81406: LIST
81407: LIST
81408: LIST
81409: LIST
81410: PUSH
81411: EMPTY
81412: LIST
81413: LIST
81414: PPUSH
81415: CALL_OW 447
// end ;
81419: LD_VAR 0 2
81423: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
81424: LD_INT 0
81426: PPUSH
81427: PPUSH
81428: PPUSH
// tmp := [ ] ;
81429: LD_ADDR_VAR 0 5
81433: PUSH
81434: EMPTY
81435: ST_TO_ADDR
// for i in units do
81436: LD_ADDR_VAR 0 4
81440: PUSH
81441: LD_VAR 0 1
81445: PUSH
81446: FOR_IN
81447: IFFALSE 81485
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
81449: LD_ADDR_VAR 0 5
81453: PUSH
81454: LD_VAR 0 5
81458: PPUSH
81459: LD_VAR 0 5
81463: PUSH
81464: LD_INT 1
81466: PLUS
81467: PPUSH
81468: LD_VAR 0 4
81472: PPUSH
81473: CALL_OW 256
81477: PPUSH
81478: CALL_OW 2
81482: ST_TO_ADDR
81483: GO 81446
81485: POP
81486: POP
// if not tmp then
81487: LD_VAR 0 5
81491: NOT
81492: IFFALSE 81496
// exit ;
81494: GO 81544
// if asc then
81496: LD_VAR 0 2
81500: IFFALSE 81524
// result := SortListByListAsc ( units , tmp ) else
81502: LD_ADDR_VAR 0 3
81506: PUSH
81507: LD_VAR 0 1
81511: PPUSH
81512: LD_VAR 0 5
81516: PPUSH
81517: CALL_OW 76
81521: ST_TO_ADDR
81522: GO 81544
// result := SortListByListDesc ( units , tmp ) ;
81524: LD_ADDR_VAR 0 3
81528: PUSH
81529: LD_VAR 0 1
81533: PPUSH
81534: LD_VAR 0 5
81538: PPUSH
81539: CALL_OW 77
81543: ST_TO_ADDR
// end ;
81544: LD_VAR 0 3
81548: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
81549: LD_INT 0
81551: PPUSH
81552: PPUSH
// task := GetTaskList ( mech ) ;
81553: LD_ADDR_VAR 0 4
81557: PUSH
81558: LD_VAR 0 1
81562: PPUSH
81563: CALL_OW 437
81567: ST_TO_ADDR
// if not task then
81568: LD_VAR 0 4
81572: NOT
81573: IFFALSE 81577
// exit ;
81575: GO 81621
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
81577: LD_ADDR_VAR 0 3
81581: PUSH
81582: LD_VAR 0 4
81586: PUSH
81587: LD_INT 1
81589: ARRAY
81590: PUSH
81591: LD_INT 1
81593: ARRAY
81594: PUSH
81595: LD_STRING r
81597: EQUAL
81598: IFFALSE 81620
81600: PUSH
81601: LD_VAR 0 4
81605: PUSH
81606: LD_INT 1
81608: ARRAY
81609: PUSH
81610: LD_INT 4
81612: ARRAY
81613: PUSH
81614: LD_VAR 0 2
81618: EQUAL
81619: AND
81620: ST_TO_ADDR
// end ;
81621: LD_VAR 0 3
81625: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
81626: LD_INT 0
81628: PPUSH
// SetDir ( unit , d ) ;
81629: LD_VAR 0 1
81633: PPUSH
81634: LD_VAR 0 4
81638: PPUSH
81639: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
81643: LD_ADDR_VAR 0 6
81647: PUSH
81648: LD_VAR 0 1
81652: PPUSH
81653: LD_VAR 0 2
81657: PPUSH
81658: LD_VAR 0 3
81662: PPUSH
81663: LD_VAR 0 5
81667: PPUSH
81668: CALL_OW 48
81672: ST_TO_ADDR
// end ;
81673: LD_VAR 0 6
81677: RET
// export function ToNaturalNumber ( number ) ; begin
81678: LD_INT 0
81680: PPUSH
// result := number div 1 ;
81681: LD_ADDR_VAR 0 2
81685: PUSH
81686: LD_VAR 0 1
81690: PUSH
81691: LD_INT 1
81693: DIV
81694: ST_TO_ADDR
// if number < 0 then
81695: LD_VAR 0 1
81699: PUSH
81700: LD_INT 0
81702: LESS
81703: IFFALSE 81713
// result := 0 ;
81705: LD_ADDR_VAR 0 2
81709: PUSH
81710: LD_INT 0
81712: ST_TO_ADDR
// end ;
81713: LD_VAR 0 2
81717: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
81718: LD_INT 0
81720: PPUSH
81721: PPUSH
81722: PPUSH
// if not buildings then
81723: LD_VAR 0 1
81727: NOT
81728: IFFALSE 81732
// exit ;
81730: GO 81847
// tmp := [ ] ;
81732: LD_ADDR_VAR 0 5
81736: PUSH
81737: EMPTY
81738: ST_TO_ADDR
// for b in buildings do
81739: LD_ADDR_VAR 0 4
81743: PUSH
81744: LD_VAR 0 1
81748: PUSH
81749: FOR_IN
81750: IFFALSE 81788
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
81752: LD_ADDR_VAR 0 5
81756: PUSH
81757: LD_VAR 0 5
81761: PPUSH
81762: LD_VAR 0 5
81766: PUSH
81767: LD_INT 1
81769: PLUS
81770: PPUSH
81771: LD_VAR 0 4
81775: PPUSH
81776: CALL_OW 266
81780: PPUSH
81781: CALL_OW 1
81785: ST_TO_ADDR
81786: GO 81749
81788: POP
81789: POP
// if not tmp then
81790: LD_VAR 0 5
81794: NOT
81795: IFFALSE 81799
// exit ;
81797: GO 81847
// if asc then
81799: LD_VAR 0 2
81803: IFFALSE 81827
// result := SortListByListAsc ( buildings , tmp ) else
81805: LD_ADDR_VAR 0 3
81809: PUSH
81810: LD_VAR 0 1
81814: PPUSH
81815: LD_VAR 0 5
81819: PPUSH
81820: CALL_OW 76
81824: ST_TO_ADDR
81825: GO 81847
// result := SortListByListDesc ( buildings , tmp ) ;
81827: LD_ADDR_VAR 0 3
81831: PUSH
81832: LD_VAR 0 1
81836: PPUSH
81837: LD_VAR 0 5
81841: PPUSH
81842: CALL_OW 77
81846: ST_TO_ADDR
// end ;
81847: LD_VAR 0 3
81851: RET
// export function SortByClass ( units , class ) ; var un ; begin
81852: LD_INT 0
81854: PPUSH
81855: PPUSH
// if not units or not class then
81856: LD_VAR 0 1
81860: NOT
81861: IFTRUE 81870
81863: PUSH
81864: LD_VAR 0 2
81868: NOT
81869: OR
81870: IFFALSE 81874
// exit ;
81872: GO 81969
// result := [ ] ;
81874: LD_ADDR_VAR 0 3
81878: PUSH
81879: EMPTY
81880: ST_TO_ADDR
// for un in units do
81881: LD_ADDR_VAR 0 4
81885: PUSH
81886: LD_VAR 0 1
81890: PUSH
81891: FOR_IN
81892: IFFALSE 81967
// if GetClass ( un ) = class then
81894: LD_VAR 0 4
81898: PPUSH
81899: CALL_OW 257
81903: PUSH
81904: LD_VAR 0 2
81908: EQUAL
81909: IFFALSE 81936
// result := Insert ( result , 1 , un ) else
81911: LD_ADDR_VAR 0 3
81915: PUSH
81916: LD_VAR 0 3
81920: PPUSH
81921: LD_INT 1
81923: PPUSH
81924: LD_VAR 0 4
81928: PPUSH
81929: CALL_OW 2
81933: ST_TO_ADDR
81934: GO 81965
// result := Replace ( result , result + 1 , un ) ;
81936: LD_ADDR_VAR 0 3
81940: PUSH
81941: LD_VAR 0 3
81945: PPUSH
81946: LD_VAR 0 3
81950: PUSH
81951: LD_INT 1
81953: PLUS
81954: PPUSH
81955: LD_VAR 0 4
81959: PPUSH
81960: CALL_OW 1
81964: ST_TO_ADDR
81965: GO 81891
81967: POP
81968: POP
// end ;
81969: LD_VAR 0 3
81973: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
81974: LD_INT 0
81976: PPUSH
81977: PPUSH
81978: PPUSH
81979: PPUSH
81980: PPUSH
81981: PPUSH
81982: PPUSH
// result := [ ] ;
81983: LD_ADDR_VAR 0 4
81987: PUSH
81988: EMPTY
81989: ST_TO_ADDR
// if x - r < 0 then
81990: LD_VAR 0 1
81994: PUSH
81995: LD_VAR 0 3
81999: MINUS
82000: PUSH
82001: LD_INT 0
82003: LESS
82004: IFFALSE 82016
// min_x := 0 else
82006: LD_ADDR_VAR 0 8
82010: PUSH
82011: LD_INT 0
82013: ST_TO_ADDR
82014: GO 82032
// min_x := x - r ;
82016: LD_ADDR_VAR 0 8
82020: PUSH
82021: LD_VAR 0 1
82025: PUSH
82026: LD_VAR 0 3
82030: MINUS
82031: ST_TO_ADDR
// if y - r < 0 then
82032: LD_VAR 0 2
82036: PUSH
82037: LD_VAR 0 3
82041: MINUS
82042: PUSH
82043: LD_INT 0
82045: LESS
82046: IFFALSE 82058
// min_y := 0 else
82048: LD_ADDR_VAR 0 7
82052: PUSH
82053: LD_INT 0
82055: ST_TO_ADDR
82056: GO 82074
// min_y := y - r ;
82058: LD_ADDR_VAR 0 7
82062: PUSH
82063: LD_VAR 0 2
82067: PUSH
82068: LD_VAR 0 3
82072: MINUS
82073: ST_TO_ADDR
// max_x := x + r ;
82074: LD_ADDR_VAR 0 9
82078: PUSH
82079: LD_VAR 0 1
82083: PUSH
82084: LD_VAR 0 3
82088: PLUS
82089: ST_TO_ADDR
// max_y := y + r ;
82090: LD_ADDR_VAR 0 10
82094: PUSH
82095: LD_VAR 0 2
82099: PUSH
82100: LD_VAR 0 3
82104: PLUS
82105: ST_TO_ADDR
// for _x = min_x to max_x do
82106: LD_ADDR_VAR 0 5
82110: PUSH
82111: DOUBLE
82112: LD_VAR 0 8
82116: DEC
82117: ST_TO_ADDR
82118: LD_VAR 0 9
82122: PUSH
82123: FOR_TO
82124: IFFALSE 82225
// for _y = min_y to max_y do
82126: LD_ADDR_VAR 0 6
82130: PUSH
82131: DOUBLE
82132: LD_VAR 0 7
82136: DEC
82137: ST_TO_ADDR
82138: LD_VAR 0 10
82142: PUSH
82143: FOR_TO
82144: IFFALSE 82221
// begin if not ValidHex ( _x , _y ) then
82146: LD_VAR 0 5
82150: PPUSH
82151: LD_VAR 0 6
82155: PPUSH
82156: CALL_OW 488
82160: NOT
82161: IFFALSE 82165
// continue ;
82163: GO 82143
// if GetResourceTypeXY ( _x , _y ) then
82165: LD_VAR 0 5
82169: PPUSH
82170: LD_VAR 0 6
82174: PPUSH
82175: CALL_OW 283
82179: IFFALSE 82219
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
82181: LD_ADDR_VAR 0 4
82185: PUSH
82186: LD_VAR 0 4
82190: PPUSH
82191: LD_VAR 0 4
82195: PUSH
82196: LD_INT 1
82198: PLUS
82199: PPUSH
82200: LD_VAR 0 5
82204: PUSH
82205: LD_VAR 0 6
82209: PUSH
82210: EMPTY
82211: LIST
82212: LIST
82213: PPUSH
82214: CALL_OW 1
82218: ST_TO_ADDR
// end ;
82219: GO 82143
82221: POP
82222: POP
82223: GO 82123
82225: POP
82226: POP
// end ;
82227: LD_VAR 0 4
82231: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
82232: LD_INT 0
82234: PPUSH
82235: PPUSH
82236: PPUSH
82237: PPUSH
82238: PPUSH
82239: PPUSH
82240: PPUSH
82241: PPUSH
// if not units then
82242: LD_VAR 0 1
82246: NOT
82247: IFFALSE 82251
// exit ;
82249: GO 82783
// result := UnitFilter ( units , [ f_ok ] ) ;
82251: LD_ADDR_VAR 0 3
82255: PUSH
82256: LD_VAR 0 1
82260: PPUSH
82261: LD_INT 50
82263: PUSH
82264: EMPTY
82265: LIST
82266: PPUSH
82267: CALL_OW 72
82271: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
82272: LD_ADDR_VAR 0 8
82276: PUSH
82277: LD_VAR 0 1
82281: PUSH
82282: LD_INT 1
82284: ARRAY
82285: PPUSH
82286: CALL_OW 255
82290: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
82291: LD_ADDR_VAR 0 10
82295: PUSH
82296: LD_INT 29
82298: PUSH
82299: LD_INT 91
82301: PUSH
82302: LD_INT 49
82304: PUSH
82305: EMPTY
82306: LIST
82307: LIST
82308: LIST
82309: ST_TO_ADDR
// if not result then
82310: LD_VAR 0 3
82314: NOT
82315: IFFALSE 82319
// exit ;
82317: GO 82783
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
82319: LD_ADDR_VAR 0 5
82323: PUSH
82324: LD_INT 81
82326: PUSH
82327: LD_VAR 0 8
82331: PUSH
82332: EMPTY
82333: LIST
82334: LIST
82335: PPUSH
82336: CALL_OW 69
82340: ST_TO_ADDR
// for i in result do
82341: LD_ADDR_VAR 0 4
82345: PUSH
82346: LD_VAR 0 3
82350: PUSH
82351: FOR_IN
82352: IFFALSE 82781
// begin tag := GetTag ( i ) + 1 ;
82354: LD_ADDR_VAR 0 9
82358: PUSH
82359: LD_VAR 0 4
82363: PPUSH
82364: CALL_OW 110
82368: PUSH
82369: LD_INT 1
82371: PLUS
82372: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
82373: LD_ADDR_VAR 0 7
82377: PUSH
82378: LD_VAR 0 4
82382: PPUSH
82383: CALL_OW 250
82387: PPUSH
82388: LD_VAR 0 4
82392: PPUSH
82393: CALL_OW 251
82397: PPUSH
82398: LD_INT 4
82400: PPUSH
82401: CALL 81974 0 3
82405: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
82406: LD_VAR 0 4
82410: PPUSH
82411: CALL_OW 247
82415: PUSH
82416: LD_INT 2
82418: EQUAL
82419: IFFALSE 82431
82421: PUSH
82422: LD_VAR 0 7
82426: PUSH
82427: LD_INT 2
82429: GREATER
82430: AND
82431: IFFALSE 82451
82433: PUSH
82434: LD_VAR 0 4
82438: PPUSH
82439: CALL_OW 264
82443: PUSH
82444: LD_VAR 0 10
82448: IN
82449: NOT
82450: AND
82451: IFFALSE 82490
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
82453: LD_VAR 0 4
82457: PPUSH
82458: LD_VAR 0 7
82462: PUSH
82463: LD_INT 1
82465: ARRAY
82466: PUSH
82467: LD_INT 1
82469: ARRAY
82470: PPUSH
82471: LD_VAR 0 7
82475: PUSH
82476: LD_INT 1
82478: ARRAY
82479: PUSH
82480: LD_INT 2
82482: ARRAY
82483: PPUSH
82484: CALL_OW 116
82488: GO 82779
// if path > tag then
82490: LD_VAR 0 2
82494: PUSH
82495: LD_VAR 0 9
82499: GREATER
82500: IFFALSE 82708
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
82502: LD_ADDR_VAR 0 6
82506: PUSH
82507: LD_VAR 0 5
82511: PPUSH
82512: LD_INT 91
82514: PUSH
82515: LD_VAR 0 4
82519: PUSH
82520: LD_INT 8
82522: PUSH
82523: EMPTY
82524: LIST
82525: LIST
82526: LIST
82527: PPUSH
82528: CALL_OW 72
82532: ST_TO_ADDR
// if nearEnemy then
82533: LD_VAR 0 6
82537: IFFALSE 82606
// begin if GetWeapon ( i ) = ru_time_lapser then
82539: LD_VAR 0 4
82543: PPUSH
82544: CALL_OW 264
82548: PUSH
82549: LD_INT 49
82551: EQUAL
82552: IFFALSE 82580
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
82554: LD_VAR 0 4
82558: PPUSH
82559: LD_VAR 0 6
82563: PPUSH
82564: LD_VAR 0 4
82568: PPUSH
82569: CALL_OW 74
82573: PPUSH
82574: CALL_OW 112
82578: GO 82604
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
82580: LD_VAR 0 4
82584: PPUSH
82585: LD_VAR 0 6
82589: PPUSH
82590: LD_VAR 0 4
82594: PPUSH
82595: CALL_OW 74
82599: PPUSH
82600: CALL 83864 0 2
// end else
82604: GO 82706
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
82606: LD_VAR 0 4
82610: PPUSH
82611: LD_VAR 0 2
82615: PUSH
82616: LD_VAR 0 9
82620: ARRAY
82621: PUSH
82622: LD_INT 1
82624: ARRAY
82625: PPUSH
82626: LD_VAR 0 2
82630: PUSH
82631: LD_VAR 0 9
82635: ARRAY
82636: PUSH
82637: LD_INT 2
82639: ARRAY
82640: PPUSH
82641: CALL_OW 297
82645: PUSH
82646: LD_INT 6
82648: GREATER
82649: IFFALSE 82692
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
82651: LD_VAR 0 4
82655: PPUSH
82656: LD_VAR 0 2
82660: PUSH
82661: LD_VAR 0 9
82665: ARRAY
82666: PUSH
82667: LD_INT 1
82669: ARRAY
82670: PPUSH
82671: LD_VAR 0 2
82675: PUSH
82676: LD_VAR 0 9
82680: ARRAY
82681: PUSH
82682: LD_INT 2
82684: ARRAY
82685: PPUSH
82686: CALL_OW 114
82690: GO 82706
// SetTag ( i , tag ) ;
82692: LD_VAR 0 4
82696: PPUSH
82697: LD_VAR 0 9
82701: PPUSH
82702: CALL_OW 109
// end else
82706: GO 82779
// if enemy then
82708: LD_VAR 0 5
82712: IFFALSE 82779
// begin if GetWeapon ( i ) = ru_time_lapser then
82714: LD_VAR 0 4
82718: PPUSH
82719: CALL_OW 264
82723: PUSH
82724: LD_INT 49
82726: EQUAL
82727: IFFALSE 82755
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
82729: LD_VAR 0 4
82733: PPUSH
82734: LD_VAR 0 5
82738: PPUSH
82739: LD_VAR 0 4
82743: PPUSH
82744: CALL_OW 74
82748: PPUSH
82749: CALL_OW 112
82753: GO 82779
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
82755: LD_VAR 0 4
82759: PPUSH
82760: LD_VAR 0 5
82764: PPUSH
82765: LD_VAR 0 4
82769: PPUSH
82770: CALL_OW 74
82774: PPUSH
82775: CALL 83864 0 2
// end ; end ;
82779: GO 82351
82781: POP
82782: POP
// end ;
82783: LD_VAR 0 3
82787: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
82788: LD_INT 0
82790: PPUSH
82791: PPUSH
82792: PPUSH
// if not unit or IsInUnit ( unit ) then
82793: LD_VAR 0 1
82797: NOT
82798: IFTRUE 82811
82800: PUSH
82801: LD_VAR 0 1
82805: PPUSH
82806: CALL_OW 310
82810: OR
82811: IFFALSE 82815
// exit ;
82813: GO 82906
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
82815: LD_ADDR_VAR 0 4
82819: PUSH
82820: LD_VAR 0 1
82824: PPUSH
82825: CALL_OW 250
82829: PPUSH
82830: LD_VAR 0 2
82834: PPUSH
82835: LD_INT 1
82837: PPUSH
82838: CALL_OW 272
82842: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
82843: LD_ADDR_VAR 0 5
82847: PUSH
82848: LD_VAR 0 1
82852: PPUSH
82853: CALL_OW 251
82857: PPUSH
82858: LD_VAR 0 2
82862: PPUSH
82863: LD_INT 1
82865: PPUSH
82866: CALL_OW 273
82870: ST_TO_ADDR
// if ValidHex ( x , y ) then
82871: LD_VAR 0 4
82875: PPUSH
82876: LD_VAR 0 5
82880: PPUSH
82881: CALL_OW 488
82885: IFFALSE 82906
// ComTurnXY ( unit , x , y ) ;
82887: LD_VAR 0 1
82891: PPUSH
82892: LD_VAR 0 4
82896: PPUSH
82897: LD_VAR 0 5
82901: PPUSH
82902: CALL_OW 118
// end ;
82906: LD_VAR 0 3
82910: RET
// export function SeeUnits ( side , units ) ; var i ; begin
82911: LD_INT 0
82913: PPUSH
82914: PPUSH
// result := false ;
82915: LD_ADDR_VAR 0 3
82919: PUSH
82920: LD_INT 0
82922: ST_TO_ADDR
// if not units then
82923: LD_VAR 0 2
82927: NOT
82928: IFFALSE 82932
// exit ;
82930: GO 82977
// for i in units do
82932: LD_ADDR_VAR 0 4
82936: PUSH
82937: LD_VAR 0 2
82941: PUSH
82942: FOR_IN
82943: IFFALSE 82975
// if See ( side , i ) then
82945: LD_VAR 0 1
82949: PPUSH
82950: LD_VAR 0 4
82954: PPUSH
82955: CALL_OW 292
82959: IFFALSE 82973
// begin result := true ;
82961: LD_ADDR_VAR 0 3
82965: PUSH
82966: LD_INT 1
82968: ST_TO_ADDR
// exit ;
82969: POP
82970: POP
82971: GO 82977
// end ;
82973: GO 82942
82975: POP
82976: POP
// end ;
82977: LD_VAR 0 3
82981: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
82982: LD_INT 0
82984: PPUSH
82985: PPUSH
82986: PPUSH
82987: PPUSH
// if not unit or not points then
82988: LD_VAR 0 1
82992: NOT
82993: IFTRUE 83002
82995: PUSH
82996: LD_VAR 0 2
83000: NOT
83001: OR
83002: IFFALSE 83006
// exit ;
83004: GO 83096
// dist := 99999 ;
83006: LD_ADDR_VAR 0 5
83010: PUSH
83011: LD_INT 99999
83013: ST_TO_ADDR
// for i in points do
83014: LD_ADDR_VAR 0 4
83018: PUSH
83019: LD_VAR 0 2
83023: PUSH
83024: FOR_IN
83025: IFFALSE 83094
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
83027: LD_ADDR_VAR 0 6
83031: PUSH
83032: LD_VAR 0 1
83036: PPUSH
83037: LD_VAR 0 4
83041: PUSH
83042: LD_INT 1
83044: ARRAY
83045: PPUSH
83046: LD_VAR 0 4
83050: PUSH
83051: LD_INT 2
83053: ARRAY
83054: PPUSH
83055: CALL_OW 297
83059: ST_TO_ADDR
// if tmpDist < dist then
83060: LD_VAR 0 6
83064: PUSH
83065: LD_VAR 0 5
83069: LESS
83070: IFFALSE 83092
// begin result := i ;
83072: LD_ADDR_VAR 0 3
83076: PUSH
83077: LD_VAR 0 4
83081: ST_TO_ADDR
// dist := tmpDist ;
83082: LD_ADDR_VAR 0 5
83086: PUSH
83087: LD_VAR 0 6
83091: ST_TO_ADDR
// end ; end ;
83092: GO 83024
83094: POP
83095: POP
// end ;
83096: LD_VAR 0 3
83100: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
83101: LD_INT 0
83103: PPUSH
// uc_side := side ;
83104: LD_ADDR_OWVAR 20
83108: PUSH
83109: LD_VAR 0 1
83113: ST_TO_ADDR
// uc_nation := 3 ;
83114: LD_ADDR_OWVAR 21
83118: PUSH
83119: LD_INT 3
83121: ST_TO_ADDR
// vc_chassis := 25 ;
83122: LD_ADDR_OWVAR 37
83126: PUSH
83127: LD_INT 25
83129: ST_TO_ADDR
// vc_engine := engine_siberite ;
83130: LD_ADDR_OWVAR 39
83134: PUSH
83135: LD_INT 3
83137: ST_TO_ADDR
// vc_control := control_computer ;
83138: LD_ADDR_OWVAR 38
83142: PUSH
83143: LD_INT 3
83145: ST_TO_ADDR
// vc_weapon := 59 ;
83146: LD_ADDR_OWVAR 40
83150: PUSH
83151: LD_INT 59
83153: ST_TO_ADDR
// result := CreateVehicle ;
83154: LD_ADDR_VAR 0 5
83158: PUSH
83159: CALL_OW 45
83163: ST_TO_ADDR
// SetDir ( result , d ) ;
83164: LD_VAR 0 5
83168: PPUSH
83169: LD_VAR 0 4
83173: PPUSH
83174: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
83178: LD_VAR 0 5
83182: PPUSH
83183: LD_VAR 0 2
83187: PPUSH
83188: LD_VAR 0 3
83192: PPUSH
83193: LD_INT 0
83195: PPUSH
83196: CALL_OW 48
// end ;
83200: LD_VAR 0 5
83204: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
83205: LD_INT 0
83207: PPUSH
83208: PPUSH
83209: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
83210: LD_ADDR_VAR 0 2
83214: PUSH
83215: LD_INT 0
83217: PUSH
83218: LD_INT 0
83220: PUSH
83221: LD_INT 0
83223: PUSH
83224: LD_INT 0
83226: PUSH
83227: EMPTY
83228: LIST
83229: LIST
83230: LIST
83231: LIST
83232: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
83233: LD_VAR 0 1
83237: NOT
83238: IFTRUE 83271
83240: PUSH
83241: LD_VAR 0 1
83245: PPUSH
83246: CALL_OW 264
83250: PUSH
83251: LD_INT 12
83253: PUSH
83254: LD_INT 51
83256: PUSH
83257: LD_INT 32
83259: PUSH
83260: LD_INT 89
83262: PUSH
83263: EMPTY
83264: LIST
83265: LIST
83266: LIST
83267: LIST
83268: IN
83269: NOT
83270: OR
83271: IFFALSE 83275
// exit ;
83273: GO 83373
// for i := 1 to 3 do
83275: LD_ADDR_VAR 0 3
83279: PUSH
83280: DOUBLE
83281: LD_INT 1
83283: DEC
83284: ST_TO_ADDR
83285: LD_INT 3
83287: PUSH
83288: FOR_TO
83289: IFFALSE 83371
// begin tmp := GetCargo ( cargo , i ) ;
83291: LD_ADDR_VAR 0 4
83295: PUSH
83296: LD_VAR 0 1
83300: PPUSH
83301: LD_VAR 0 3
83305: PPUSH
83306: CALL_OW 289
83310: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
83311: LD_ADDR_VAR 0 2
83315: PUSH
83316: LD_VAR 0 2
83320: PPUSH
83321: LD_VAR 0 3
83325: PPUSH
83326: LD_VAR 0 4
83330: PPUSH
83331: CALL_OW 1
83335: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
83336: LD_ADDR_VAR 0 2
83340: PUSH
83341: LD_VAR 0 2
83345: PPUSH
83346: LD_INT 4
83348: PPUSH
83349: LD_VAR 0 2
83353: PUSH
83354: LD_INT 4
83356: ARRAY
83357: PUSH
83358: LD_VAR 0 4
83362: PLUS
83363: PPUSH
83364: CALL_OW 1
83368: ST_TO_ADDR
// end ;
83369: GO 83288
83371: POP
83372: POP
// end ;
83373: LD_VAR 0 2
83377: RET
// export function Length ( array ) ; begin
83378: LD_INT 0
83380: PPUSH
// result := array + 0 ;
83381: LD_ADDR_VAR 0 2
83385: PUSH
83386: LD_VAR 0 1
83390: PUSH
83391: LD_INT 0
83393: PLUS
83394: ST_TO_ADDR
// end ;
83395: LD_VAR 0 2
83399: RET
// export function PrepareArray ( array ) ; begin
83400: LD_INT 0
83402: PPUSH
// result := array diff 0 ;
83403: LD_ADDR_VAR 0 2
83407: PUSH
83408: LD_VAR 0 1
83412: PUSH
83413: LD_INT 0
83415: DIFF
83416: ST_TO_ADDR
// if not result [ 1 ] then
83417: LD_VAR 0 2
83421: PUSH
83422: LD_INT 1
83424: ARRAY
83425: NOT
83426: IFFALSE 83446
// result := Delete ( result , 1 ) ;
83428: LD_ADDR_VAR 0 2
83432: PUSH
83433: LD_VAR 0 2
83437: PPUSH
83438: LD_INT 1
83440: PPUSH
83441: CALL_OW 3
83445: ST_TO_ADDR
// end ;
83446: LD_VAR 0 2
83450: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
83451: LD_INT 0
83453: PPUSH
83454: PPUSH
83455: PPUSH
83456: PPUSH
// sibRocketRange := 25 ;
83457: LD_ADDR_VAR 0 6
83461: PUSH
83462: LD_INT 25
83464: ST_TO_ADDR
// result := false ;
83465: LD_ADDR_VAR 0 4
83469: PUSH
83470: LD_INT 0
83472: ST_TO_ADDR
// for i := 0 to 5 do
83473: LD_ADDR_VAR 0 5
83477: PUSH
83478: DOUBLE
83479: LD_INT 0
83481: DEC
83482: ST_TO_ADDR
83483: LD_INT 5
83485: PUSH
83486: FOR_TO
83487: IFFALSE 83554
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
83489: LD_VAR 0 1
83493: PPUSH
83494: LD_VAR 0 5
83498: PPUSH
83499: LD_VAR 0 6
83503: PPUSH
83504: CALL_OW 272
83508: PPUSH
83509: LD_VAR 0 2
83513: PPUSH
83514: LD_VAR 0 5
83518: PPUSH
83519: LD_VAR 0 6
83523: PPUSH
83524: CALL_OW 273
83528: PPUSH
83529: LD_VAR 0 3
83533: PPUSH
83534: CALL_OW 309
83538: IFFALSE 83552
// begin result := true ;
83540: LD_ADDR_VAR 0 4
83544: PUSH
83545: LD_INT 1
83547: ST_TO_ADDR
// exit ;
83548: POP
83549: POP
83550: GO 83556
// end ;
83552: GO 83486
83554: POP
83555: POP
// end ;
83556: LD_VAR 0 4
83560: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
83561: LD_INT 0
83563: PPUSH
83564: PPUSH
83565: PPUSH
// if btype = b_depot then
83566: LD_VAR 0 2
83570: PUSH
83571: LD_INT 0
83573: EQUAL
83574: IFFALSE 83586
// begin result := true ;
83576: LD_ADDR_VAR 0 3
83580: PUSH
83581: LD_INT 1
83583: ST_TO_ADDR
// exit ;
83584: GO 83706
// end ; pom := GetBase ( depot ) ;
83586: LD_ADDR_VAR 0 4
83590: PUSH
83591: LD_VAR 0 1
83595: PPUSH
83596: CALL_OW 274
83600: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
83601: LD_ADDR_VAR 0 5
83605: PUSH
83606: LD_VAR 0 2
83610: PPUSH
83611: LD_VAR 0 1
83615: PPUSH
83616: CALL_OW 248
83620: PPUSH
83621: CALL_OW 450
83625: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
83626: LD_ADDR_VAR 0 3
83630: PUSH
83631: LD_VAR 0 4
83635: PPUSH
83636: LD_INT 1
83638: PPUSH
83639: CALL_OW 275
83643: PUSH
83644: LD_VAR 0 5
83648: PUSH
83649: LD_INT 1
83651: ARRAY
83652: GREATEREQUAL
83653: IFFALSE 83679
83655: PUSH
83656: LD_VAR 0 4
83660: PPUSH
83661: LD_INT 2
83663: PPUSH
83664: CALL_OW 275
83668: PUSH
83669: LD_VAR 0 5
83673: PUSH
83674: LD_INT 2
83676: ARRAY
83677: GREATEREQUAL
83678: AND
83679: IFFALSE 83705
83681: PUSH
83682: LD_VAR 0 4
83686: PPUSH
83687: LD_INT 3
83689: PPUSH
83690: CALL_OW 275
83694: PUSH
83695: LD_VAR 0 5
83699: PUSH
83700: LD_INT 3
83702: ARRAY
83703: GREATEREQUAL
83704: AND
83705: ST_TO_ADDR
// end ;
83706: LD_VAR 0 3
83710: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
83711: LD_INT 0
83713: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
83714: LD_VAR 0 1
83718: PPUSH
83719: LD_VAR 0 2
83723: PPUSH
83724: LD_INT 0
83726: PPUSH
83727: LD_INT 0
83729: PPUSH
83730: LD_INT 1
83732: PPUSH
83733: LD_INT 0
83735: PPUSH
83736: CALL_OW 587
// end ;
83740: LD_VAR 0 3
83744: RET
// export function CenterOnNow ( unit ) ; begin
83745: LD_INT 0
83747: PPUSH
// result := IsInUnit ( unit ) ;
83748: LD_ADDR_VAR 0 2
83752: PUSH
83753: LD_VAR 0 1
83757: PPUSH
83758: CALL_OW 310
83762: ST_TO_ADDR
// if not result then
83763: LD_VAR 0 2
83767: NOT
83768: IFFALSE 83780
// result := unit ;
83770: LD_ADDR_VAR 0 2
83774: PUSH
83775: LD_VAR 0 1
83779: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
83780: LD_VAR 0 1
83784: PPUSH
83785: CALL_OW 87
// end ;
83789: LD_VAR 0 2
83793: RET
// export function ComMoveHex ( unit , hex ) ; begin
83794: LD_INT 0
83796: PPUSH
// if not hex then
83797: LD_VAR 0 2
83801: NOT
83802: IFFALSE 83806
// exit ;
83804: GO 83859
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
83806: LD_VAR 0 2
83810: PUSH
83811: LD_INT 1
83813: ARRAY
83814: PPUSH
83815: LD_VAR 0 2
83819: PUSH
83820: LD_INT 2
83822: ARRAY
83823: PPUSH
83824: CALL_OW 428
83828: IFFALSE 83832
// exit ;
83830: GO 83859
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
83832: LD_VAR 0 1
83836: PPUSH
83837: LD_VAR 0 2
83841: PUSH
83842: LD_INT 1
83844: ARRAY
83845: PPUSH
83846: LD_VAR 0 2
83850: PUSH
83851: LD_INT 2
83853: ARRAY
83854: PPUSH
83855: CALL_OW 111
// end ;
83859: LD_VAR 0 3
83863: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
83864: LD_INT 0
83866: PPUSH
83867: PPUSH
83868: PPUSH
// if not unit or not enemy then
83869: LD_VAR 0 1
83873: NOT
83874: IFTRUE 83883
83876: PUSH
83877: LD_VAR 0 2
83881: NOT
83882: OR
83883: IFFALSE 83887
// exit ;
83885: GO 84013
// x := GetX ( enemy ) ;
83887: LD_ADDR_VAR 0 4
83891: PUSH
83892: LD_VAR 0 2
83896: PPUSH
83897: CALL_OW 250
83901: ST_TO_ADDR
// y := GetY ( enemy ) ;
83902: LD_ADDR_VAR 0 5
83906: PUSH
83907: LD_VAR 0 2
83911: PPUSH
83912: CALL_OW 251
83916: ST_TO_ADDR
// if ValidHex ( x , y ) then
83917: LD_VAR 0 4
83921: PPUSH
83922: LD_VAR 0 5
83926: PPUSH
83927: CALL_OW 488
83931: IFFALSE 84013
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
83933: LD_VAR 0 2
83937: PPUSH
83938: CALL_OW 247
83942: PUSH
83943: LD_INT 3
83945: PUSH
83946: LD_INT 2
83948: PUSH
83949: EMPTY
83950: LIST
83951: LIST
83952: IN
83953: IFTRUE 83976
83955: PUSH
83956: LD_VAR 0 1
83960: PPUSH
83961: CALL_OW 255
83965: PPUSH
83966: LD_VAR 0 2
83970: PPUSH
83971: CALL_OW 292
83975: OR
83976: IFFALSE 83994
// ComAttackUnit ( unit , enemy ) else
83978: LD_VAR 0 1
83982: PPUSH
83983: LD_VAR 0 2
83987: PPUSH
83988: CALL_OW 115
83992: GO 84013
// ComAgressiveMove ( unit , x , y ) ;
83994: LD_VAR 0 1
83998: PPUSH
83999: LD_VAR 0 4
84003: PPUSH
84004: LD_VAR 0 5
84008: PPUSH
84009: CALL_OW 114
// end ;
84013: LD_VAR 0 3
84017: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
84018: LD_INT 0
84020: PPUSH
84021: PPUSH
84022: PPUSH
// list := AreaToList ( area , 0 ) ;
84023: LD_ADDR_VAR 0 5
84027: PUSH
84028: LD_VAR 0 1
84032: PPUSH
84033: LD_INT 0
84035: PPUSH
84036: CALL_OW 517
84040: ST_TO_ADDR
// if not list then
84041: LD_VAR 0 5
84045: NOT
84046: IFFALSE 84050
// exit ;
84048: GO 84180
// if all then
84050: LD_VAR 0 2
84054: IFFALSE 84142
// begin for i := 1 to list [ 1 ] do
84056: LD_ADDR_VAR 0 4
84060: PUSH
84061: DOUBLE
84062: LD_INT 1
84064: DEC
84065: ST_TO_ADDR
84066: LD_VAR 0 5
84070: PUSH
84071: LD_INT 1
84073: ARRAY
84074: PUSH
84075: FOR_TO
84076: IFFALSE 84138
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
84078: LD_ADDR_VAR 0 3
84082: PUSH
84083: LD_VAR 0 3
84087: PPUSH
84088: LD_VAR 0 3
84092: PUSH
84093: LD_INT 1
84095: PLUS
84096: PPUSH
84097: LD_VAR 0 5
84101: PUSH
84102: LD_INT 1
84104: ARRAY
84105: PUSH
84106: LD_VAR 0 4
84110: ARRAY
84111: PUSH
84112: LD_VAR 0 5
84116: PUSH
84117: LD_INT 2
84119: ARRAY
84120: PUSH
84121: LD_VAR 0 4
84125: ARRAY
84126: PUSH
84127: EMPTY
84128: LIST
84129: LIST
84130: PPUSH
84131: CALL_OW 1
84135: ST_TO_ADDR
84136: GO 84075
84138: POP
84139: POP
// exit ;
84140: GO 84180
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
84142: LD_ADDR_VAR 0 3
84146: PUSH
84147: LD_VAR 0 5
84151: PUSH
84152: LD_INT 1
84154: ARRAY
84155: PUSH
84156: LD_INT 1
84158: ARRAY
84159: PUSH
84160: LD_VAR 0 5
84164: PUSH
84165: LD_INT 2
84167: ARRAY
84168: PUSH
84169: LD_INT 1
84171: ARRAY
84172: PUSH
84173: EMPTY
84174: LIST
84175: LIST
84176: PUSH
84177: EMPTY
84178: LIST
84179: ST_TO_ADDR
// end ;
84180: LD_VAR 0 3
84184: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
84185: LD_INT 0
84187: PPUSH
84188: PPUSH
// list := AreaToList ( area , 0 ) ;
84189: LD_ADDR_VAR 0 4
84193: PUSH
84194: LD_VAR 0 1
84198: PPUSH
84199: LD_INT 0
84201: PPUSH
84202: CALL_OW 517
84206: ST_TO_ADDR
// if not list then
84207: LD_VAR 0 4
84211: NOT
84212: IFFALSE 84216
// exit ;
84214: GO 84257
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
84216: LD_ADDR_VAR 0 3
84220: PUSH
84221: LD_VAR 0 4
84225: PUSH
84226: LD_INT 1
84228: ARRAY
84229: PUSH
84230: LD_INT 1
84232: ARRAY
84233: PUSH
84234: LD_VAR 0 4
84238: PUSH
84239: LD_INT 2
84241: ARRAY
84242: PUSH
84243: LD_INT 1
84245: ARRAY
84246: PUSH
84247: LD_VAR 0 2
84251: PUSH
84252: EMPTY
84253: LIST
84254: LIST
84255: LIST
84256: ST_TO_ADDR
// end ;
84257: LD_VAR 0 3
84261: RET
// export function First ( array ) ; begin
84262: LD_INT 0
84264: PPUSH
// if not array then
84265: LD_VAR 0 1
84269: NOT
84270: IFFALSE 84274
// exit ;
84272: GO 84288
// result := array [ 1 ] ;
84274: LD_ADDR_VAR 0 2
84278: PUSH
84279: LD_VAR 0 1
84283: PUSH
84284: LD_INT 1
84286: ARRAY
84287: ST_TO_ADDR
// end ;
84288: LD_VAR 0 2
84292: RET
// export function Last ( array ) ; begin
84293: LD_INT 0
84295: PPUSH
// if not array then
84296: LD_VAR 0 1
84300: NOT
84301: IFFALSE 84305
// exit ;
84303: GO 84321
// result := array [ array ] ;
84305: LD_ADDR_VAR 0 2
84309: PUSH
84310: LD_VAR 0 1
84314: PUSH
84315: LD_VAR 0 1
84319: ARRAY
84320: ST_TO_ADDR
// end ;
84321: LD_VAR 0 2
84325: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
84326: LD_INT 0
84328: PPUSH
84329: PPUSH
// result := [ ] ;
84330: LD_ADDR_VAR 0 5
84334: PUSH
84335: EMPTY
84336: ST_TO_ADDR
// if not array then
84337: LD_VAR 0 1
84341: NOT
84342: IFFALSE 84346
// exit ;
84344: GO 84458
// for i := 1 to array do
84346: LD_ADDR_VAR 0 6
84350: PUSH
84351: DOUBLE
84352: LD_INT 1
84354: DEC
84355: ST_TO_ADDR
84356: LD_VAR 0 1
84360: PUSH
84361: FOR_TO
84362: IFFALSE 84456
// if array [ i ] [ index ] = value then
84364: LD_VAR 0 1
84368: PUSH
84369: LD_VAR 0 6
84373: ARRAY
84374: PUSH
84375: LD_VAR 0 2
84379: ARRAY
84380: PUSH
84381: LD_VAR 0 3
84385: EQUAL
84386: IFFALSE 84454
// begin if indexColumn then
84388: LD_VAR 0 4
84392: IFFALSE 84428
// result := Join ( result , array [ i ] [ indexColumn ] ) else
84394: LD_ADDR_VAR 0 5
84398: PUSH
84399: LD_VAR 0 5
84403: PPUSH
84404: LD_VAR 0 1
84408: PUSH
84409: LD_VAR 0 6
84413: ARRAY
84414: PUSH
84415: LD_VAR 0 4
84419: ARRAY
84420: PPUSH
84421: CALL 79466 0 2
84425: ST_TO_ADDR
84426: GO 84454
// result := Join ( result , array [ i ] ) ;
84428: LD_ADDR_VAR 0 5
84432: PUSH
84433: LD_VAR 0 5
84437: PPUSH
84438: LD_VAR 0 1
84442: PUSH
84443: LD_VAR 0 6
84447: ARRAY
84448: PPUSH
84449: CALL 79466 0 2
84453: ST_TO_ADDR
// end ;
84454: GO 84361
84456: POP
84457: POP
// end ;
84458: LD_VAR 0 5
84462: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
84463: LD_INT 0
84465: PPUSH
// if not vehicles or not parkingPoint then
84466: LD_VAR 0 1
84470: NOT
84471: IFTRUE 84480
84473: PUSH
84474: LD_VAR 0 2
84478: NOT
84479: OR
84480: IFFALSE 84484
// exit ;
84482: GO 84582
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
84484: LD_ADDR_VAR 0 1
84488: PUSH
84489: LD_VAR 0 1
84493: PPUSH
84494: LD_INT 50
84496: PUSH
84497: EMPTY
84498: LIST
84499: PUSH
84500: LD_INT 3
84502: PUSH
84503: LD_INT 92
84505: PUSH
84506: LD_VAR 0 2
84510: PUSH
84511: LD_INT 1
84513: ARRAY
84514: PUSH
84515: LD_VAR 0 2
84519: PUSH
84520: LD_INT 2
84522: ARRAY
84523: PUSH
84524: LD_INT 8
84526: PUSH
84527: EMPTY
84528: LIST
84529: LIST
84530: LIST
84531: LIST
84532: PUSH
84533: EMPTY
84534: LIST
84535: LIST
84536: PUSH
84537: EMPTY
84538: LIST
84539: LIST
84540: PPUSH
84541: CALL_OW 72
84545: ST_TO_ADDR
// if not vehicles then
84546: LD_VAR 0 1
84550: NOT
84551: IFFALSE 84555
// exit ;
84553: GO 84582
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
84555: LD_VAR 0 1
84559: PPUSH
84560: LD_VAR 0 2
84564: PUSH
84565: LD_INT 1
84567: ARRAY
84568: PPUSH
84569: LD_VAR 0 2
84573: PUSH
84574: LD_INT 2
84576: ARRAY
84577: PPUSH
84578: CALL_OW 111
// end ;
84582: LD_VAR 0 3
84586: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
84587: LD_INT 0
84589: PPUSH
84590: PPUSH
84591: PPUSH
// if not side or not area then
84592: LD_VAR 0 1
84596: NOT
84597: IFTRUE 84606
84599: PUSH
84600: LD_VAR 0 2
84604: NOT
84605: OR
84606: IFFALSE 84610
// exit ;
84608: GO 84729
// tmp := AreaToList ( area , 0 ) ;
84610: LD_ADDR_VAR 0 5
84614: PUSH
84615: LD_VAR 0 2
84619: PPUSH
84620: LD_INT 0
84622: PPUSH
84623: CALL_OW 517
84627: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
84628: LD_ADDR_VAR 0 4
84632: PUSH
84633: DOUBLE
84634: LD_INT 1
84636: DEC
84637: ST_TO_ADDR
84638: LD_VAR 0 5
84642: PUSH
84643: LD_INT 1
84645: ARRAY
84646: PUSH
84647: FOR_TO
84648: IFFALSE 84727
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
84650: LD_VAR 0 5
84654: PUSH
84655: LD_INT 1
84657: ARRAY
84658: PUSH
84659: LD_VAR 0 4
84663: ARRAY
84664: PPUSH
84665: LD_VAR 0 5
84669: PUSH
84670: LD_INT 2
84672: ARRAY
84673: PUSH
84674: LD_VAR 0 4
84678: ARRAY
84679: PPUSH
84680: CALL_OW 351
84684: IFFALSE 84725
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
84686: LD_VAR 0 5
84690: PUSH
84691: LD_INT 1
84693: ARRAY
84694: PUSH
84695: LD_VAR 0 4
84699: ARRAY
84700: PPUSH
84701: LD_VAR 0 5
84705: PUSH
84706: LD_INT 2
84708: ARRAY
84709: PUSH
84710: LD_VAR 0 4
84714: ARRAY
84715: PPUSH
84716: LD_VAR 0 1
84720: PPUSH
84721: CALL_OW 244
// end ;
84725: GO 84647
84727: POP
84728: POP
// end ; end_of_file
84729: LD_VAR 0 3
84733: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
84734: LD_VAR 0 1
84738: PUSH
84739: LD_INT 200
84741: DOUBLE
84742: GREATEREQUAL
84743: IFFALSE 84751
84745: LD_INT 299
84747: DOUBLE
84748: LESSEQUAL
84749: IFTRUE 84753
84751: GO 84785
84753: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
84754: LD_VAR 0 1
84758: PPUSH
84759: LD_VAR 0 2
84763: PPUSH
84764: LD_VAR 0 3
84768: PPUSH
84769: LD_VAR 0 4
84773: PPUSH
84774: LD_VAR 0 5
84778: PPUSH
84779: CALL 36577 0 5
84783: GO 84862
84785: LD_INT 300
84787: DOUBLE
84788: GREATEREQUAL
84789: IFFALSE 84797
84791: LD_INT 399
84793: DOUBLE
84794: LESSEQUAL
84795: IFTRUE 84799
84797: GO 84861
84799: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
84800: LD_VAR 0 1
84804: PPUSH
84805: LD_VAR 0 2
84809: PPUSH
84810: LD_VAR 0 3
84814: PPUSH
84815: LD_VAR 0 4
84819: PPUSH
84820: LD_VAR 0 5
84824: PPUSH
84825: LD_VAR 0 6
84829: PPUSH
84830: LD_VAR 0 7
84834: PPUSH
84835: LD_VAR 0 8
84839: PPUSH
84840: LD_VAR 0 9
84844: PPUSH
84845: LD_VAR 0 10
84849: PPUSH
84850: LD_VAR 0 11
84854: PPUSH
84855: CALL 32461 0 11
84859: GO 84862
84861: POP
// end ;
84862: PPOPN 11
84864: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
84865: LD_VAR 0 1
84869: PPUSH
84870: LD_VAR 0 2
84874: PPUSH
84875: LD_VAR 0 3
84879: PPUSH
84880: LD_VAR 0 4
84884: PPUSH
84885: LD_VAR 0 5
84889: PPUSH
84890: CALL 35958 0 5
// end ; end_of_file
84894: PPOPN 5
84896: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
84897: LD_VAR 0 1
84901: PPUSH
84902: LD_VAR 0 2
84906: PPUSH
84907: LD_VAR 0 3
84911: PPUSH
84912: LD_VAR 0 4
84916: PPUSH
84917: LD_VAR 0 5
84921: PPUSH
84922: LD_VAR 0 6
84926: PPUSH
84927: CALL 20001 0 6
// end ;
84931: PPOPN 6
84933: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
84934: LD_INT 0
84936: PPUSH
// begin if not units then
84937: LD_VAR 0 1
84941: NOT
84942: IFFALSE 84946
// exit ;
84944: GO 84946
// end ;
84946: PPOPN 7
84948: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
84949: CALL 19888 0 0
// end ;
84953: PPOPN 1
84955: END
