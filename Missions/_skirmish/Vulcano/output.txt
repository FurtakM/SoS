// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// PrepareTrigger ;
  15: CALL 40 0 0
// PrepareVulcanoBase ;
  19: CALL 1102 0 0
// PrepareRussian ;
  23: CALL 3784 0 0
// PrepareLegion ;
  27: CALL 8065 0 0
// Action ;
  31: CALL 11573 0 0
// InitArt ;
  35: CALL 241 0 0
// end ;
  39: END
// export base_captured , russian_prepared , ru_can_attack , ru_sib_bomb , chance_to_bomb , player_res_art , artifact_progress , player_artifact_ready , art_icon , time_res_art , player_commander , time_to_reuse , mine_vulc , medal_enabled , debug , dead_counter , kill_counter , veh_counter , tech_counter , sib_contamin_counter , event_legion_attack , event_russian_attack , event_alliance_attack ; function PrepareTrigger ; begin
  40: LD_INT 0
  42: PPUSH
// debug := false ;
  43: LD_ADDR_EXP 15
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// base_captured := false ;
  51: LD_ADDR_EXP 1
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// russian_prepared := false ;
  59: LD_ADDR_EXP 2
  63: PUSH
  64: LD_INT 0
  66: ST_TO_ADDR
// ru_can_attack := false ;
  67: LD_ADDR_EXP 3
  71: PUSH
  72: LD_INT 0
  74: ST_TO_ADDR
// ru_sib_bomb := false ;
  75: LD_ADDR_EXP 4
  79: PUSH
  80: LD_INT 0
  82: ST_TO_ADDR
// chance_to_bomb := [ 5 , 10 , 25 ] [ Difficulty ] ;
  83: LD_ADDR_EXP 5
  87: PUSH
  88: LD_INT 5
  90: PUSH
  91: LD_INT 10
  93: PUSH
  94: LD_INT 25
  96: PUSH
  97: EMPTY
  98: LIST
  99: LIST
 100: LIST
 101: PUSH
 102: LD_OWVAR 67
 106: ARRAY
 107: ST_TO_ADDR
// player_res_art := false ;
 108: LD_ADDR_EXP 6
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// player_artifact_ready := false ;
 116: LD_ADDR_EXP 8
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// art_icon := art_use_atom ;
 124: LD_ADDR_EXP 9
 128: PUSH
 129: LD_INT 7
 131: ST_TO_ADDR
// time_res_art := 600 ;
 132: LD_ADDR_EXP 10
 136: PUSH
 137: LD_INT 600
 139: ST_TO_ADDR
// time_to_reuse := 10 10$00 ;
 140: LD_ADDR_EXP 12
 144: PUSH
 145: LD_INT 21000
 147: ST_TO_ADDR
// mine_vulc := false ;
 148: LD_ADDR_EXP 13
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// medal_enabled := false ;
 156: LD_ADDR_EXP 14
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// dead_counter := 0 ;
 164: LD_ADDR_EXP 16
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// kill_counter := 0 ;
 172: LD_ADDR_EXP 17
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// veh_counter := 0 ;
 180: LD_ADDR_EXP 18
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// tech_counter := 0 ;
 188: LD_ADDR_EXP 19
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// sib_contamin_counter := 0 ;
 196: LD_ADDR_EXP 20
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// artifact_progress := 0 ;
 204: LD_ADDR_EXP 7
 208: PUSH
 209: LD_INT 0
 211: ST_TO_ADDR
// event_legion_attack := 1 ;
 212: LD_ADDR_EXP 21
 216: PUSH
 217: LD_INT 1
 219: ST_TO_ADDR
// event_russian_attack := 2 ;
 220: LD_ADDR_EXP 22
 224: PUSH
 225: LD_INT 2
 227: ST_TO_ADDR
// event_alliance_attack := 3 ;
 228: LD_ADDR_EXP 23
 232: PUSH
 233: LD_INT 3
 235: ST_TO_ADDR
// end ;
 236: LD_VAR 0 1
 240: RET
// function InitArt ; begin
 241: LD_INT 0
 243: PPUSH
// SetArtifactRes ( your_side , true ) ;
 244: LD_OWVAR 2
 248: PPUSH
 249: LD_INT 1
 251: PPUSH
 252: CALL_OW 467
// end ; end_of_file
 256: LD_VAR 0 1
 260: RET
// export us_commander , us_force , us_skill , us_guy ; export function PrepareAmerican ; var i , filter , un , team ; begin
 261: LD_INT 0
 263: PPUSH
 264: PPUSH
 265: PPUSH
 266: PPUSH
 267: PPUSH
// us_skill := [ 7 , 6 , 5 ] [ Difficulty ] ;
 268: LD_ADDR_EXP 26
 272: PUSH
 273: LD_INT 7
 275: PUSH
 276: LD_INT 6
 278: PUSH
 279: LD_INT 5
 281: PUSH
 282: EMPTY
 283: LIST
 284: LIST
 285: LIST
 286: PUSH
 287: LD_OWVAR 67
 291: ARRAY
 292: ST_TO_ADDR
// us_force := [ ] ;
 293: LD_ADDR_EXP 25
 297: PUSH
 298: EMPTY
 299: ST_TO_ADDR
// RemoveEnvironmentArea ( evn ) ;
 300: LD_INT 17
 302: PPUSH
 303: CALL_OW 355
// PrepareAllianceAI ( ) ;
 307: CALL 16956 0 0
// uc_side := 1 ;
 311: LD_ADDR_OWVAR 20
 315: PUSH
 316: LD_INT 1
 318: ST_TO_ADDR
// uc_nation := nation_american ;
 319: LD_ADDR_OWVAR 21
 323: PUSH
 324: LD_INT 1
 326: ST_TO_ADDR
// hc_gallery :=  ;
 327: LD_ADDR_OWVAR 33
 331: PUSH
 332: LD_STRING 
 334: ST_TO_ADDR
// hc_name :=  ;
 335: LD_ADDR_OWVAR 26
 339: PUSH
 340: LD_STRING 
 342: ST_TO_ADDR
// hc_importance := 0 ;
 343: LD_ADDR_OWVAR 32
 347: PUSH
 348: LD_INT 0
 350: ST_TO_ADDR
// for i = 1 to 11 do
 351: LD_ADDR_VAR 0 2
 355: PUSH
 356: DOUBLE
 357: LD_INT 1
 359: DEC
 360: ST_TO_ADDR
 361: LD_INT 11
 363: PUSH
 364: FOR_TO
 365: IFFALSE 418
// begin PrepareHuman ( false , Rand ( 1 , 4 ) , us_skill ) ;
 367: LD_INT 0
 369: PPUSH
 370: LD_INT 1
 372: PPUSH
 373: LD_INT 4
 375: PPUSH
 376: CALL_OW 12
 380: PPUSH
 381: LD_EXP 26
 385: PPUSH
 386: CALL_OW 380
// un := CreateHuman ;
 390: LD_ADDR_VAR 0 4
 394: PUSH
 395: CALL_OW 44
 399: ST_TO_ADDR
// us_force := us_force ^ un ;
 400: LD_ADDR_EXP 25
 404: PUSH
 405: LD_EXP 25
 409: PUSH
 410: LD_VAR 0 4
 414: ADD
 415: ST_TO_ADDR
// end ;
 416: GO 364
 418: POP
 419: POP
// hc_importance := 100 ;
 420: LD_ADDR_OWVAR 32
 424: PUSH
 425: LD_INT 100
 427: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , us_skill ) ;
 428: LD_INT 1
 430: PPUSH
 431: LD_INT 1
 433: PPUSH
 434: LD_EXP 26
 438: PPUSH
 439: CALL_OW 380
// us_commander := CreateHuman ;
 443: LD_ADDR_EXP 24
 447: PUSH
 448: CALL_OW 44
 452: ST_TO_ADDR
// player_commander := us_commander ;
 453: LD_ADDR_EXP 11
 457: PUSH
 458: LD_EXP 24
 462: ST_TO_ADDR
// team := CharacterSelection ( text , [ 7 , 6 , 5 ] [ Difficulty ] , [ 7 , 6 , 5 ] [ Difficulty ] , [ sel_change_class , us_commander , sel_changeable , sel_not_hired ] ^ us_force , [ class_soldier , [ class_mechanic , 1 ] , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , [ 5 , 5 , - 1 ] [ Difficulty ] ] ) ;
 463: LD_ADDR_VAR 0 5
 467: PUSH
 468: LD_STRING text
 470: PPUSH
 471: LD_INT 7
 473: PUSH
 474: LD_INT 6
 476: PUSH
 477: LD_INT 5
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: LIST
 484: PUSH
 485: LD_OWVAR 67
 489: ARRAY
 490: PPUSH
 491: LD_INT 7
 493: PUSH
 494: LD_INT 6
 496: PUSH
 497: LD_INT 5
 499: PUSH
 500: EMPTY
 501: LIST
 502: LIST
 503: LIST
 504: PUSH
 505: LD_OWVAR 67
 509: ARRAY
 510: PPUSH
 511: LD_INT -5
 513: PUSH
 514: LD_EXP 24
 518: PUSH
 519: LD_INT -3
 521: PUSH
 522: LD_INT -2
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: LIST
 529: LIST
 530: PUSH
 531: LD_EXP 25
 535: ADD
 536: PPUSH
 537: LD_INT 1
 539: PUSH
 540: LD_INT 3
 542: PUSH
 543: LD_INT 1
 545: PUSH
 546: EMPTY
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 2
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: EMPTY
 557: LIST
 558: LIST
 559: PUSH
 560: LD_INT 4
 562: PUSH
 563: LD_INT 1
 565: PUSH
 566: EMPTY
 567: LIST
 568: LIST
 569: PUSH
 570: LD_INT 5
 572: PUSH
 573: LD_INT 5
 575: PUSH
 576: LD_INT 1
 578: NEG
 579: PUSH
 580: EMPTY
 581: LIST
 582: LIST
 583: LIST
 584: PUSH
 585: LD_OWVAR 67
 589: ARRAY
 590: PUSH
 591: EMPTY
 592: LIST
 593: LIST
 594: LIST
 595: LIST
 596: LIST
 597: PPUSH
 598: CALL_OW 42
 602: ST_TO_ADDR
// team := team ^ us_commander ;
 603: LD_ADDR_VAR 0 5
 607: PUSH
 608: LD_VAR 0 5
 612: PUSH
 613: LD_EXP 24
 617: ADD
 618: ST_TO_ADDR
// for i = 1 to team do
 619: LD_ADDR_VAR 0 2
 623: PUSH
 624: DOUBLE
 625: LD_INT 1
 627: DEC
 628: ST_TO_ADDR
 629: LD_VAR 0 5
 633: PUSH
 634: FOR_TO
 635: IFFALSE 835
// begin if GetClass ( team [ i ] ) = class_mechanic then
 637: LD_VAR 0 5
 641: PUSH
 642: LD_VAR 0 2
 646: ARRAY
 647: PPUSH
 648: CALL_OW 257
 652: PUSH
 653: LD_INT 3
 655: EQUAL
 656: IFFALSE 797
// begin vc_chassis := [ us_medium_tracked , us_heavy_tracked , us_morphling ] [ i mod 3 + 1 ] ;
 658: LD_ADDR_OWVAR 37
 662: PUSH
 663: LD_INT 3
 665: PUSH
 666: LD_INT 4
 668: PUSH
 669: LD_INT 5
 671: PUSH
 672: EMPTY
 673: LIST
 674: LIST
 675: LIST
 676: PUSH
 677: LD_VAR 0 2
 681: PUSH
 682: LD_INT 3
 684: MOD
 685: PUSH
 686: LD_INT 1
 688: PLUS
 689: ARRAY
 690: ST_TO_ADDR
// vc_engine := engine_siberite ;
 691: LD_ADDR_OWVAR 39
 695: PUSH
 696: LD_INT 3
 698: ST_TO_ADDR
// vc_control := control_manual ;
 699: LD_ADDR_OWVAR 38
 703: PUSH
 704: LD_INT 1
 706: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_laser ] [ rand ( 1 , 3 ) ] ;
 707: LD_ADDR_OWVAR 40
 711: PUSH
 712: LD_INT 4
 714: PUSH
 715: LD_INT 5
 717: PUSH
 718: LD_INT 9
 720: PUSH
 721: EMPTY
 722: LIST
 723: LIST
 724: LIST
 725: PUSH
 726: LD_INT 1
 728: PPUSH
 729: LD_INT 3
 731: PPUSH
 732: CALL_OW 12
 736: ARRAY
 737: ST_TO_ADDR
// un := CreateVehicle ;
 738: LD_ADDR_VAR 0 4
 742: PUSH
 743: CALL_OW 45
 747: ST_TO_ADDR
// SetDir ( un , 2 ) ;
 748: LD_VAR 0 4
 752: PPUSH
 753: LD_INT 2
 755: PPUSH
 756: CALL_OW 233
// PlaceUnitArea ( un , start_north , false ) ;
 760: LD_VAR 0 4
 764: PPUSH
 765: LD_INT 1
 767: PPUSH
 768: LD_INT 0
 770: PPUSH
 771: CALL_OW 49
// PlaceHumanInUnit ( team [ i ] , un ) ;
 775: LD_VAR 0 5
 779: PUSH
 780: LD_VAR 0 2
 784: ARRAY
 785: PPUSH
 786: LD_VAR 0 4
 790: PPUSH
 791: CALL_OW 52
// end else
 795: GO 833
// begin PlaceUnitArea ( team [ i ] , start_north , false ) ;
 797: LD_VAR 0 5
 801: PUSH
 802: LD_VAR 0 2
 806: ARRAY
 807: PPUSH
 808: LD_INT 1
 810: PPUSH
 811: LD_INT 0
 813: PPUSH
 814: CALL_OW 49
// ComHold ( team [ i ] ) ;
 818: LD_VAR 0 5
 822: PUSH
 823: LD_VAR 0 2
 827: ARRAY
 828: PPUSH
 829: CALL_OW 140
// end ; end ;
 833: GO 634
 835: POP
 836: POP
// end ;
 837: LD_VAR 0 1
 841: RET
// every 0 0$38 + 2 2$30 trigger tick < 73500 do
 842: LD_OWVAR 1
 846: PUSH
 847: LD_INT 73500
 849: LESS
 850: IFFALSE 877
 852: GO 854
 854: DISABLE
// begin enable ;
 855: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , extra_crates , true ) ;
 856: LD_INT 1
 858: PPUSH
 859: LD_INT 5
 861: PPUSH
 862: CALL_OW 12
 866: PPUSH
 867: LD_INT 23
 869: PPUSH
 870: LD_INT 1
 872: PPUSH
 873: CALL_OW 55
// end ;
 877: END
// every 1 1$10 do var time , p , l ;
 878: GO 880
 880: DISABLE
 881: LD_INT 0
 883: PPUSH
 884: PPUSH
 885: PPUSH
// begin time := 0 0$44 ;
 886: LD_ADDR_VAR 0 1
 890: PUSH
 891: LD_INT 1540
 893: ST_TO_ADDR
// l := 0 ;
 894: LD_ADDR_VAR 0 3
 898: PUSH
 899: LD_INT 0
 901: ST_TO_ADDR
// repeat begin Wait ( time ) ;
 902: LD_VAR 0 1
 906: PPUSH
 907: CALL_OW 67
// l := l + 1 ;
 911: LD_ADDR_VAR 0 3
 915: PUSH
 916: LD_VAR 0 3
 920: PUSH
 921: LD_INT 1
 923: PLUS
 924: ST_TO_ADDR
// if GetListOfCratesInArea ( us_crates ) < 20 then
 925: LD_INT 12
 927: PPUSH
 928: CALL_OW 435
 932: PUSH
 933: LD_INT 20
 935: LESS
 936: IFFALSE 995
// begin CreateCratesArea ( Rand ( 1 , 5 ) , us_crates , true ) ;
 938: LD_INT 1
 940: PPUSH
 941: LD_INT 5
 943: PPUSH
 944: CALL_OW 12
 948: PPUSH
 949: LD_INT 12
 951: PPUSH
 952: LD_INT 1
 954: PPUSH
 955: CALL_OW 55
// Wait ( Rand ( 0 0$39 , 0 0$48 ) ) ;
 959: LD_INT 1365
 961: PPUSH
 962: LD_INT 1680
 964: PPUSH
 965: CALL_OW 12
 969: PPUSH
 970: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 5 ) , us_crates , true ) ;
 974: LD_INT 1
 976: PPUSH
 977: LD_INT 5
 979: PPUSH
 980: CALL_OW 12
 984: PPUSH
 985: LD_INT 12
 987: PPUSH
 988: LD_INT 1
 990: PPUSH
 991: CALL_OW 55
// end ; p := Rand ( 0 , 1 ) ;
 995: LD_ADDR_VAR 0 2
 999: PUSH
1000: LD_INT 0
1002: PPUSH
1003: LD_INT 1
1005: PPUSH
1006: CALL_OW 12
1010: ST_TO_ADDR
// if p then
1011: LD_VAR 0 2
1015: IFFALSE 1050
// begin Wait ( Rand ( 0 0$09 , 0 0$20 ) ) ;
1017: LD_INT 315
1019: PPUSH
1020: LD_INT 700
1022: PPUSH
1023: CALL_OW 12
1027: PPUSH
1028: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 4 ) , true ) ;
1032: LD_INT 1
1034: PPUSH
1035: LD_INT 4
1037: PPUSH
1038: CALL_OW 12
1042: PPUSH
1043: LD_INT 1
1045: PPUSH
1046: CALL_OW 57
// end ; if l mod [ 15 , 13 , 11 ] [ Difficulty ] = 0 then
1050: LD_VAR 0 3
1054: PUSH
1055: LD_INT 15
1057: PUSH
1058: LD_INT 13
1060: PUSH
1061: LD_INT 11
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: LIST
1068: PUSH
1069: LD_OWVAR 67
1073: ARRAY
1074: MOD
1075: PUSH
1076: LD_INT 0
1078: EQUAL
1079: IFFALSE 1095
// time := time + 2 2$00 ;
1081: LD_ADDR_VAR 0 1
1085: PUSH
1086: LD_VAR 0 1
1090: PUSH
1091: LD_INT 4200
1093: PLUS
1094: ST_TO_ADDR
// end until false ;
1095: LD_INT 0
1097: IFFALSE 902
// end ; end_of_file
1099: PPOPN 3
1101: END
// export russians_in_base ; export function PrepareVulcanoBase ; var i , filter , hp , un , area ; begin
1102: LD_INT 0
1104: PPUSH
1105: PPUSH
1106: PPUSH
1107: PPUSH
1108: PPUSH
1109: PPUSH
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) ;
1110: LD_ADDR_VAR 0 3
1114: PUSH
1115: LD_INT 22
1117: PUSH
1118: LD_INT 4
1120: PUSH
1121: EMPTY
1122: LIST
1123: LIST
1124: PUSH
1125: LD_INT 21
1127: PUSH
1128: LD_INT 3
1130: PUSH
1131: EMPTY
1132: LIST
1133: LIST
1134: PUSH
1135: EMPTY
1136: LIST
1137: LIST
1138: PPUSH
1139: CALL_OW 69
1143: ST_TO_ADDR
// hp := [ 470 , 370 , 290 ] [ Difficulty ] ;
1144: LD_ADDR_VAR 0 4
1148: PUSH
1149: LD_INT 470
1151: PUSH
1152: LD_INT 370
1154: PUSH
1155: LD_INT 290
1157: PUSH
1158: EMPTY
1159: LIST
1160: LIST
1161: LIST
1162: PUSH
1163: LD_OWVAR 67
1167: ARRAY
1168: ST_TO_ADDR
// case Difficulty of 2 :
1169: LD_OWVAR 67
1173: PUSH
1174: LD_INT 2
1176: DOUBLE
1177: EQUAL
1178: IFTRUE 1182
1180: GO 1213
1182: POP
// begin DestroyUnit ( UnitFilter ( filter , [ f_btype , b_bunker ] ) [ 1 ] ) ;
1183: LD_VAR 0 3
1187: PPUSH
1188: LD_INT 30
1190: PUSH
1191: LD_INT 32
1193: PUSH
1194: EMPTY
1195: LIST
1196: LIST
1197: PPUSH
1198: CALL_OW 72
1202: PUSH
1203: LD_INT 1
1205: ARRAY
1206: PPUSH
1207: CALL_OW 65
// end ; 3 :
1211: GO 1289
1213: LD_INT 3
1215: DOUBLE
1216: EQUAL
1217: IFTRUE 1221
1219: GO 1288
1221: POP
// begin DestroyUnit ( UnitFilter ( filter , [ f_btype , b_bunker ] ) [ 1 ] ) ;
1222: LD_VAR 0 3
1226: PPUSH
1227: LD_INT 30
1229: PUSH
1230: LD_INT 32
1232: PUSH
1233: EMPTY
1234: LIST
1235: LIST
1236: PPUSH
1237: CALL_OW 72
1241: PUSH
1242: LD_INT 1
1244: ARRAY
1245: PPUSH
1246: CALL_OW 65
// DestroyUnit ( UnitFilter ( filter , [ f_btype , b_solar_power ] ) [ Rand ( 1 , 3 ) ] ) ;
1250: LD_VAR 0 3
1254: PPUSH
1255: LD_INT 30
1257: PUSH
1258: LD_INT 27
1260: PUSH
1261: EMPTY
1262: LIST
1263: LIST
1264: PPUSH
1265: CALL_OW 72
1269: PUSH
1270: LD_INT 1
1272: PPUSH
1273: LD_INT 3
1275: PPUSH
1276: CALL_OW 12
1280: ARRAY
1281: PPUSH
1282: CALL_OW 65
// end ; end ;
1286: GO 1289
1288: POP
// for i = 1 to filter do
1289: LD_ADDR_VAR 0 2
1293: PUSH
1294: DOUBLE
1295: LD_INT 1
1297: DEC
1298: ST_TO_ADDR
1299: LD_VAR 0 3
1303: PUSH
1304: FOR_TO
1305: IFFALSE 1342
// SetLives ( filter [ i ] , hp + Rand ( - 29 , 29 ) ) ;
1307: LD_VAR 0 3
1311: PUSH
1312: LD_VAR 0 2
1316: ARRAY
1317: PPUSH
1318: LD_VAR 0 4
1322: PUSH
1323: LD_INT 29
1325: NEG
1326: PPUSH
1327: LD_INT 29
1329: PPUSH
1330: CALL_OW 12
1334: PLUS
1335: PPUSH
1336: CALL_OW 234
1340: GO 1304
1342: POP
1343: POP
// SetBName ( us_depot , Vulcano1 ) ;
1344: LD_INT 50
1346: PPUSH
1347: LD_STRING Vulcano1
1349: PPUSH
1350: CALL_OW 500
// hc_importance := 0 ;
1354: LD_ADDR_OWVAR 32
1358: PUSH
1359: LD_INT 0
1361: ST_TO_ADDR
// uc_side := 3 ;
1362: LD_ADDR_OWVAR 20
1366: PUSH
1367: LD_INT 3
1369: ST_TO_ADDR
// uc_nation := nation_russian ;
1370: LD_ADDR_OWVAR 21
1374: PUSH
1375: LD_INT 3
1377: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
1378: LD_ADDR_OWVAR 37
1382: PUSH
1383: LD_INT 22
1385: ST_TO_ADDR
// vc_engine := engine_combustion ;
1386: LD_ADDR_OWVAR 39
1390: PUSH
1391: LD_INT 1
1393: ST_TO_ADDR
// vc_control := control_manual ;
1394: LD_ADDR_OWVAR 38
1398: PUSH
1399: LD_INT 1
1401: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1402: LD_ADDR_OWVAR 40
1406: PUSH
1407: LD_INT 51
1409: ST_TO_ADDR
// un := CreateVehicle ;
1410: LD_ADDR_VAR 0 5
1414: PUSH
1415: CALL_OW 45
1419: ST_TO_ADDR
// PlaceUnitXY ( un , 97 , 138 , false ) ;
1420: LD_VAR 0 5
1424: PPUSH
1425: LD_INT 97
1427: PPUSH
1428: LD_INT 138
1430: PPUSH
1431: LD_INT 0
1433: PPUSH
1434: CALL_OW 48
// SetCargo ( un , mat_cans , 100 ) ;
1438: LD_VAR 0 5
1442: PPUSH
1443: LD_INT 1
1445: PPUSH
1446: LD_INT 100
1448: PPUSH
1449: CALL_OW 290
// SetFuel ( un , 45 ) ;
1453: LD_VAR 0 5
1457: PPUSH
1458: LD_INT 45
1460: PPUSH
1461: CALL_OW 240
// un := CreateVehicle ;
1465: LD_ADDR_VAR 0 5
1469: PUSH
1470: CALL_OW 45
1474: ST_TO_ADDR
// PlaceUnitXY ( un , 109 , 154 , false ) ;
1475: LD_VAR 0 5
1479: PPUSH
1480: LD_INT 109
1482: PPUSH
1483: LD_INT 154
1485: PPUSH
1486: LD_INT 0
1488: PPUSH
1489: CALL_OW 48
// SetCargo ( un , mat_cans , 100 ) ;
1493: LD_VAR 0 5
1497: PPUSH
1498: LD_INT 1
1500: PPUSH
1501: LD_INT 100
1503: PPUSH
1504: CALL_OW 290
// SetDir ( un , 1 ) ;
1508: LD_VAR 0 5
1512: PPUSH
1513: LD_INT 1
1515: PPUSH
1516: CALL_OW 233
// SetFuel ( un , 50 ) ;
1520: LD_VAR 0 5
1524: PPUSH
1525: LD_INT 50
1527: PPUSH
1528: CALL_OW 240
// russians_in_base := [ ] ;
1532: LD_ADDR_EXP 28
1536: PUSH
1537: EMPTY
1538: ST_TO_ADDR
// for i = 1 to [ 6 , 6 , 7 ] [ Difficulty ] do
1539: LD_ADDR_VAR 0 2
1543: PUSH
1544: DOUBLE
1545: LD_INT 1
1547: DEC
1548: ST_TO_ADDR
1549: LD_INT 6
1551: PUSH
1552: LD_INT 6
1554: PUSH
1555: LD_INT 7
1557: PUSH
1558: EMPTY
1559: LIST
1560: LIST
1561: LIST
1562: PUSH
1563: LD_OWVAR 67
1567: ARRAY
1568: PUSH
1569: FOR_TO
1570: IFFALSE 1651
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
1572: LD_INT 0
1574: PPUSH
1575: LD_INT 1
1577: PPUSH
1578: LD_INT 4
1580: PUSH
1581: LD_INT 5
1583: PUSH
1584: LD_INT 6
1586: PUSH
1587: EMPTY
1588: LIST
1589: LIST
1590: LIST
1591: PUSH
1592: LD_OWVAR 67
1596: ARRAY
1597: PPUSH
1598: CALL_OW 380
// un := CreateHuman ;
1602: LD_ADDR_VAR 0 5
1606: PUSH
1607: CALL_OW 44
1611: ST_TO_ADDR
// russians_in_base := russians_in_base ^ un ;
1612: LD_ADDR_EXP 28
1616: PUSH
1617: LD_EXP 28
1621: PUSH
1622: LD_VAR 0 5
1626: ADD
1627: ST_TO_ADDR
// PlaceUnitXYR ( un , 94 , 145 , 10 , false ) ;
1628: LD_VAR 0 5
1632: PPUSH
1633: LD_INT 94
1635: PPUSH
1636: LD_INT 145
1638: PPUSH
1639: LD_INT 10
1641: PPUSH
1642: LD_INT 0
1644: PPUSH
1645: CALL_OW 50
// end ;
1649: GO 1569
1651: POP
1652: POP
// end ;
1653: LD_VAR 0 1
1657: RET
// every 0 0$2 trigger UnitFilter ( russians_in_base , [ f_see , 1 ] ) do var enemy ;
1658: LD_EXP 28
1662: PPUSH
1663: LD_INT 101
1665: PUSH
1666: LD_INT 1
1668: PUSH
1669: EMPTY
1670: LIST
1671: LIST
1672: PPUSH
1673: CALL_OW 72
1677: IFFALSE 1743
1679: GO 1681
1681: DISABLE
1682: LD_INT 0
1684: PPUSH
// begin enemy := UnitFilter ( russians_in_base , [ f_see , 1 ] ) [ 1 ] ;
1685: LD_ADDR_VAR 0 1
1689: PUSH
1690: LD_EXP 28
1694: PPUSH
1695: LD_INT 101
1697: PUSH
1698: LD_INT 1
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: PPUSH
1705: CALL_OW 72
1709: PUSH
1710: LD_INT 1
1712: ARRAY
1713: ST_TO_ADDR
// ComAgressiveMove ( russians_in_base , GetX ( enemy ) , GetY ( enemy ) ) ;
1714: LD_EXP 28
1718: PPUSH
1719: LD_VAR 0 1
1723: PPUSH
1724: CALL_OW 250
1728: PPUSH
1729: LD_VAR 0 1
1733: PPUSH
1734: CALL_OW 251
1738: PPUSH
1739: CALL_OW 114
// end ;
1743: PPOPN 1
1745: END
// every 0 0$01 trigger GetDistUnitToSide ( us_depot , 1 ) < 40 do var i , un ;
1746: LD_INT 50
1748: PPUSH
1749: LD_INT 1
1751: PPUSH
1752: CALL 2122 0 2
1756: PUSH
1757: LD_INT 40
1759: LESS
1760: IFFALSE 1957
1762: GO 1764
1764: DISABLE
1765: LD_INT 0
1767: PPUSH
1768: PPUSH
// begin uc_side := 4 ;
1769: LD_ADDR_OWVAR 20
1773: PUSH
1774: LD_INT 4
1776: ST_TO_ADDR
// uc_nation := nation_american ;
1777: LD_ADDR_OWVAR 21
1781: PUSH
1782: LD_INT 1
1784: ST_TO_ADDR
// hc_importance := 0 ;
1785: LD_ADDR_OWVAR 32
1789: PUSH
1790: LD_INT 0
1792: ST_TO_ADDR
// for i = 1 to 7 do
1793: LD_ADDR_VAR 0 1
1797: PUSH
1798: DOUBLE
1799: LD_INT 1
1801: DEC
1802: ST_TO_ADDR
1803: LD_INT 7
1805: PUSH
1806: FOR_TO
1807: IFFALSE 1871
// begin PrepareHuman ( false , Rand ( 1 , 3 ) , us_skill ) ;
1809: LD_INT 0
1811: PPUSH
1812: LD_INT 1
1814: PPUSH
1815: LD_INT 3
1817: PPUSH
1818: CALL_OW 12
1822: PPUSH
1823: LD_EXP 26
1827: PPUSH
1828: CALL_OW 380
// un := CreateHuman ;
1832: LD_ADDR_VAR 0 2
1836: PUSH
1837: CALL_OW 44
1841: ST_TO_ADDR
// PlaceUnitArea ( un , base_resp , false ) ;
1842: LD_VAR 0 2
1846: PPUSH
1847: LD_INT 7
1849: PPUSH
1850: LD_INT 0
1852: PPUSH
1853: CALL_OW 49
// SetLives ( un , 10 ) ;
1857: LD_VAR 0 2
1861: PPUSH
1862: LD_INT 10
1864: PPUSH
1865: CALL_OW 234
// end ;
1869: GO 1806
1871: POP
1872: POP
// for i = 1 to 5 do
1873: LD_ADDR_VAR 0 1
1877: PUSH
1878: DOUBLE
1879: LD_INT 1
1881: DEC
1882: ST_TO_ADDR
1883: LD_INT 5
1885: PUSH
1886: FOR_TO
1887: IFFALSE 1955
// begin PrepareHuman ( false , 4 , us_skill ) ;
1889: LD_INT 0
1891: PPUSH
1892: LD_INT 4
1894: PPUSH
1895: LD_EXP 26
1899: PPUSH
1900: CALL_OW 380
// SetDir ( un , 1 ) ;
1904: LD_VAR 0 2
1908: PPUSH
1909: LD_INT 1
1911: PPUSH
1912: CALL_OW 233
// un := CreateHuman ;
1916: LD_ADDR_VAR 0 2
1920: PUSH
1921: CALL_OW 44
1925: ST_TO_ADDR
// PlaceUnitArea ( un , rekt , false ) ;
1926: LD_VAR 0 2
1930: PPUSH
1931: LD_INT 22
1933: PPUSH
1934: LD_INT 0
1936: PPUSH
1937: CALL_OW 49
// SetLives ( un , 10 ) ;
1941: LD_VAR 0 2
1945: PPUSH
1946: LD_INT 10
1948: PPUSH
1949: CALL_OW 234
// end ;
1953: GO 1886
1955: POP
1956: POP
// end ; end_of_file
1957: PPOPN 2
1959: END
// export function PrepareApeman2 ( n ) ; var un , i ; begin
1960: LD_INT 0
1962: PPUSH
1963: PPUSH
1964: PPUSH
// for i = 1 to n do
1965: LD_ADDR_VAR 0 4
1969: PUSH
1970: DOUBLE
1971: LD_INT 1
1973: DEC
1974: ST_TO_ADDR
1975: LD_VAR 0 1
1979: PUSH
1980: FOR_TO
1981: IFFALSE 2115
// begin uc_side := 0 ;
1983: LD_ADDR_OWVAR 20
1987: PUSH
1988: LD_INT 0
1990: ST_TO_ADDR
// uc_nation := 0 ;
1991: LD_ADDR_OWVAR 21
1995: PUSH
1996: LD_INT 0
1998: ST_TO_ADDR
// hc_class := class_apeman ;
1999: LD_ADDR_OWVAR 28
2003: PUSH
2004: LD_INT 12
2006: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
2007: LD_ADDR_OWVAR 31
2011: PUSH
2012: LD_INT 0
2014: PUSH
2015: LD_INT 0
2017: PUSH
2018: LD_INT 0
2020: PUSH
2021: LD_INT 0
2023: PUSH
2024: EMPTY
2025: LIST
2026: LIST
2027: LIST
2028: LIST
2029: ST_TO_ADDR
// hc_name :=  ;
2030: LD_ADDR_OWVAR 26
2034: PUSH
2035: LD_STRING 
2037: ST_TO_ADDR
// hc_gallery :=  ;
2038: LD_ADDR_OWVAR 33
2042: PUSH
2043: LD_STRING 
2045: ST_TO_ADDR
// hc_importance := 0 ;
2046: LD_ADDR_OWVAR 32
2050: PUSH
2051: LD_INT 0
2053: ST_TO_ADDR
// un := CreateHuman ;
2054: LD_ADDR_VAR 0 3
2058: PUSH
2059: CALL_OW 44
2063: ST_TO_ADDR
// PlaceUnitArea ( un , [ ape1 , ape2 ] [ Rand ( 1 , 2 ) ] , false ) ;
2064: LD_VAR 0 3
2068: PPUSH
2069: LD_INT 19
2071: PUSH
2072: LD_INT 20
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: PUSH
2079: LD_INT 1
2081: PPUSH
2082: LD_INT 2
2084: PPUSH
2085: CALL_OW 12
2089: ARRAY
2090: PPUSH
2091: LD_INT 0
2093: PPUSH
2094: CALL_OW 49
// Wait ( Rand ( 0 0$33 , 2 2$33 ) ) ;
2098: LD_INT 1155
2100: PPUSH
2101: LD_INT 5355
2103: PPUSH
2104: CALL_OW 12
2108: PPUSH
2109: CALL_OW 67
// end ;
2113: GO 1980
2115: POP
2116: POP
// end ;
2117: LD_VAR 0 2
2121: RET
// export function GetDistUnitToSide ( unit , side ) ; var tmp , dist ; begin
2122: LD_INT 0
2124: PPUSH
2125: PPUSH
2126: PPUSH
// tmp := NearestUnitToUnit ( FilterAllUnits ( [ f_side , side ] ) , unit ) ;
2127: LD_ADDR_VAR 0 4
2131: PUSH
2132: LD_INT 22
2134: PUSH
2135: LD_VAR 0 2
2139: PUSH
2140: EMPTY
2141: LIST
2142: LIST
2143: PPUSH
2144: CALL_OW 69
2148: PPUSH
2149: LD_VAR 0 1
2153: PPUSH
2154: CALL_OW 74
2158: ST_TO_ADDR
// dist := GetDistUnits ( unit , tmp ) ;
2159: LD_ADDR_VAR 0 5
2163: PUSH
2164: LD_VAR 0 1
2168: PPUSH
2169: LD_VAR 0 4
2173: PPUSH
2174: CALL_OW 296
2178: ST_TO_ADDR
// if dist >= 9999 then
2179: LD_VAR 0 5
2183: PUSH
2184: LD_INT 9999
2186: GREATEREQUAL
2187: IFFALSE 2200
// result := - 1 else
2189: LD_ADDR_VAR 0 3
2193: PUSH
2194: LD_INT 1
2196: NEG
2197: ST_TO_ADDR
2198: GO 2210
// result := dist ;
2200: LD_ADDR_VAR 0 3
2204: PUSH
2205: LD_VAR 0 5
2209: ST_TO_ADDR
// end ;
2210: LD_VAR 0 3
2214: RET
// export function NearestUnitToSide ( plist , side ) ; var i , tmp , unit ; begin
2215: LD_INT 0
2217: PPUSH
2218: PPUSH
2219: PPUSH
2220: PPUSH
// tmp := 9999 ;
2221: LD_ADDR_VAR 0 5
2225: PUSH
2226: LD_INT 9999
2228: ST_TO_ADDR
// for i = 1 to plist do
2229: LD_ADDR_VAR 0 4
2233: PUSH
2234: DOUBLE
2235: LD_INT 1
2237: DEC
2238: ST_TO_ADDR
2239: LD_VAR 0 1
2243: PUSH
2244: FOR_TO
2245: IFFALSE 2319
// if GetDistUnitToSide ( plist [ i ] , side ) < tmp then
2247: LD_VAR 0 1
2251: PUSH
2252: LD_VAR 0 4
2256: ARRAY
2257: PPUSH
2258: LD_VAR 0 2
2262: PPUSH
2263: CALL 2122 0 2
2267: PUSH
2268: LD_VAR 0 5
2272: LESS
2273: IFFALSE 2317
// begin tmp := GetDistUnitToSide ( plist [ i ] , side ) ;
2275: LD_ADDR_VAR 0 5
2279: PUSH
2280: LD_VAR 0 1
2284: PUSH
2285: LD_VAR 0 4
2289: ARRAY
2290: PPUSH
2291: LD_VAR 0 2
2295: PPUSH
2296: CALL 2122 0 2
2300: ST_TO_ADDR
// unit := plist [ i ] ;
2301: LD_ADDR_VAR 0 6
2305: PUSH
2306: LD_VAR 0 1
2310: PUSH
2311: LD_VAR 0 4
2315: ARRAY
2316: ST_TO_ADDR
// end ;
2317: GO 2244
2319: POP
2320: POP
// result := unit ;
2321: LD_ADDR_VAR 0 3
2325: PUSH
2326: LD_VAR 0 6
2330: ST_TO_ADDR
// end ;
2331: LD_VAR 0 3
2335: RET
// export function CalculateCommanderPoints ; var points , crates_collected , sib_collected , i ; begin
2336: LD_INT 0
2338: PPUSH
2339: PPUSH
2340: PPUSH
2341: PPUSH
2342: PPUSH
// points := [ 1000 , 2500 , 5000 ] [ Difficulty ] ;
2343: LD_ADDR_VAR 0 2
2347: PUSH
2348: LD_INT 1000
2350: PUSH
2351: LD_INT 2500
2353: PUSH
2354: LD_INT 5000
2356: PUSH
2357: EMPTY
2358: LIST
2359: LIST
2360: LIST
2361: PUSH
2362: LD_OWVAR 67
2366: ARRAY
2367: ST_TO_ADDR
// points := points + ( - 1 * FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) * 30 ) ;
2368: LD_ADDR_VAR 0 2
2372: PUSH
2373: LD_VAR 0 2
2377: PUSH
2378: LD_INT 1
2380: NEG
2381: PUSH
2382: LD_INT 22
2384: PUSH
2385: LD_OWVAR 2
2389: PUSH
2390: EMPTY
2391: LIST
2392: LIST
2393: PUSH
2394: LD_INT 21
2396: PUSH
2397: LD_INT 3
2399: PUSH
2400: EMPTY
2401: LIST
2402: LIST
2403: PUSH
2404: EMPTY
2405: LIST
2406: LIST
2407: PPUSH
2408: CALL_OW 69
2412: MUL
2413: PUSH
2414: LD_INT 30
2416: MUL
2417: PLUS
2418: ST_TO_ADDR
// points := points + ( kill_counter * 10 ) ;
2419: LD_ADDR_VAR 0 2
2423: PUSH
2424: LD_VAR 0 2
2428: PUSH
2429: LD_EXP 17
2433: PUSH
2434: LD_INT 10
2436: MUL
2437: PLUS
2438: ST_TO_ADDR
// points := points + ( - 1 * kill_counter * 20 ) ;
2439: LD_ADDR_VAR 0 2
2443: PUSH
2444: LD_VAR 0 2
2448: PUSH
2449: LD_INT 1
2451: NEG
2452: PUSH
2453: LD_EXP 17
2457: MUL
2458: PUSH
2459: LD_INT 20
2461: MUL
2462: PLUS
2463: ST_TO_ADDR
// points := points + ( - 1 * ( ( tick / 35 ) / 60 ) * 25 ) ;
2464: LD_ADDR_VAR 0 2
2468: PUSH
2469: LD_VAR 0 2
2473: PUSH
2474: LD_INT 1
2476: NEG
2477: PUSH
2478: LD_OWVAR 1
2482: PUSH
2483: LD_INT 35
2485: DIVREAL
2486: PUSH
2487: LD_INT 60
2489: DIVREAL
2490: MUL
2491: PUSH
2492: LD_INT 25
2494: MUL
2495: PLUS
2496: ST_TO_ADDR
// points := points + ( tech_counter * 15 ) ;
2497: LD_ADDR_VAR 0 2
2501: PUSH
2502: LD_VAR 0 2
2506: PUSH
2507: LD_EXP 19
2511: PUSH
2512: LD_INT 15
2514: MUL
2515: PLUS
2516: ST_TO_ADDR
// points := points + ( - 1 * sib_contamin_counter ) * 1000 ;
2517: LD_ADDR_VAR 0 2
2521: PUSH
2522: LD_VAR 0 2
2526: PUSH
2527: LD_INT 1
2529: NEG
2530: PUSH
2531: LD_EXP 20
2535: MUL
2536: PUSH
2537: LD_INT 1000
2539: MUL
2540: PLUS
2541: ST_TO_ADDR
// points := points + ( veh_counter * 5 ) ;
2542: LD_ADDR_VAR 0 2
2546: PUSH
2547: LD_VAR 0 2
2551: PUSH
2552: LD_EXP 18
2556: PUSH
2557: LD_INT 5
2559: MUL
2560: PLUS
2561: ST_TO_ADDR
// result := points ;
2562: LD_ADDR_VAR 0 1
2566: PUSH
2567: LD_VAR 0 2
2571: ST_TO_ADDR
// end ; end_of_file
2572: LD_VAR 0 1
2576: RET
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2577: LD_VAR 0 1
2581: PPUSH
2582: CALL 35447 0 1
// if un = ru_cargo then
2586: LD_VAR 0 1
2590: PUSH
2591: LD_EXP 31
2595: EQUAL
2596: IFFALSE 2606
// ru_cargo := 0 ;
2598: LD_ADDR_EXP 31
2602: PUSH
2603: LD_INT 0
2605: ST_TO_ADDR
// if GetSide ( un ) = your_side then
2606: LD_VAR 0 1
2610: PPUSH
2611: CALL_OW 255
2615: PUSH
2616: LD_OWVAR 2
2620: EQUAL
2621: IFFALSE 2637
// dead_counter := dead_counter + 1 ;
2623: LD_ADDR_EXP 16
2627: PUSH
2628: LD_EXP 16
2632: PUSH
2633: LD_INT 1
2635: PLUS
2636: ST_TO_ADDR
// if GetSide ( un ) in FilterAllUnits ( [ f_enemy , your_side ] ) then
2637: LD_VAR 0 1
2641: PPUSH
2642: CALL_OW 255
2646: PUSH
2647: LD_INT 81
2649: PUSH
2650: LD_OWVAR 2
2654: PUSH
2655: EMPTY
2656: LIST
2657: LIST
2658: PPUSH
2659: CALL_OW 69
2663: IN
2664: IFFALSE 2680
// kill_counter := kill_counter + 1 ;
2666: LD_ADDR_EXP 17
2670: PUSH
2671: LD_EXP 17
2675: PUSH
2676: LD_INT 1
2678: PLUS
2679: ST_TO_ADDR
// if un = player_commander then
2680: LD_VAR 0 1
2684: PUSH
2685: LD_EXP 11
2689: EQUAL
2690: IFFALSE 2699
// YouLost ( vulcano-lost ) ;
2692: LD_STRING vulcano-lost
2694: PPUSH
2695: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) then
2699: LD_VAR 0 1
2703: PUSH
2704: LD_INT 22
2706: PUSH
2707: LD_INT 3
2709: PUSH
2710: EMPTY
2711: LIST
2712: LIST
2713: PUSH
2714: LD_INT 21
2716: PUSH
2717: LD_INT 3
2719: PUSH
2720: EMPTY
2721: LIST
2722: LIST
2723: PUSH
2724: EMPTY
2725: LIST
2726: LIST
2727: PPUSH
2728: CALL_OW 69
2732: IN
2733: IFFALSE 2849
// begin if GetBType ( un ) = b_turret or GetBType ( un ) = b_siberite_power then
2735: LD_VAR 0 1
2739: PPUSH
2740: CALL_OW 266
2744: PUSH
2745: LD_INT 33
2747: EQUAL
2748: PUSH
2749: LD_VAR 0 1
2753: PPUSH
2754: CALL_OW 266
2758: PUSH
2759: LD_INT 28
2761: EQUAL
2762: OR
2763: IFFALSE 2849
// begin ru_blist := ru_blist ^ GetBType ( un ) ;
2765: LD_ADDR_EXP 32
2769: PUSH
2770: LD_EXP 32
2774: PUSH
2775: LD_VAR 0 1
2779: PPUSH
2780: CALL_OW 266
2784: ADD
2785: ST_TO_ADDR
// ru_blist := ru_blist ^ GetX ( un ) ;
2786: LD_ADDR_EXP 32
2790: PUSH
2791: LD_EXP 32
2795: PUSH
2796: LD_VAR 0 1
2800: PPUSH
2801: CALL_OW 250
2805: ADD
2806: ST_TO_ADDR
// ru_blist := ru_blist ^ GetY ( un ) ;
2807: LD_ADDR_EXP 32
2811: PUSH
2812: LD_EXP 32
2816: PUSH
2817: LD_VAR 0 1
2821: PPUSH
2822: CALL_OW 251
2826: ADD
2827: ST_TO_ADDR
// ru_blist := ru_blist ^ GetDir ( un ) ;
2828: LD_ADDR_EXP 32
2832: PUSH
2833: LD_EXP 32
2837: PUSH
2838: LD_VAR 0 1
2842: PPUSH
2843: CALL_OW 254
2847: ADD
2848: ST_TO_ADDR
// end ; end ; if un in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) then
2849: LD_VAR 0 1
2853: PUSH
2854: LD_INT 22
2856: PUSH
2857: LD_INT 8
2859: PUSH
2860: EMPTY
2861: LIST
2862: LIST
2863: PUSH
2864: LD_INT 21
2866: PUSH
2867: LD_INT 3
2869: PUSH
2870: EMPTY
2871: LIST
2872: LIST
2873: PUSH
2874: EMPTY
2875: LIST
2876: LIST
2877: PPUSH
2878: CALL_OW 69
2882: IN
2883: IFFALSE 3027
// begin if GetBType ( un ) = b_barracks then
2885: LD_VAR 0 1
2889: PPUSH
2890: CALL_OW 266
2894: PUSH
2895: LD_INT 5
2897: EQUAL
2898: IFFALSE 2916
// legion_blist := legion_blist ^ b_armoury else
2900: LD_ADDR_EXP 40
2904: PUSH
2905: LD_EXP 40
2909: PUSH
2910: LD_INT 4
2912: ADD
2913: ST_TO_ADDR
2914: GO 2964
// if not GetBType ( un ) in [ b_warehouse , b_lab , b_lab_full ] then
2916: LD_VAR 0 1
2920: PPUSH
2921: CALL_OW 266
2925: PUSH
2926: LD_INT 1
2928: PUSH
2929: LD_INT 6
2931: PUSH
2932: LD_INT 8
2934: PUSH
2935: EMPTY
2936: LIST
2937: LIST
2938: LIST
2939: IN
2940: NOT
2941: IFFALSE 2964
// legion_blist := legion_blist ^ GetBType ( un ) ;
2943: LD_ADDR_EXP 40
2947: PUSH
2948: LD_EXP 40
2952: PUSH
2953: LD_VAR 0 1
2957: PPUSH
2958: CALL_OW 266
2962: ADD
2963: ST_TO_ADDR
// legion_blist := legion_blist ^ GetX ( un ) ;
2964: LD_ADDR_EXP 40
2968: PUSH
2969: LD_EXP 40
2973: PUSH
2974: LD_VAR 0 1
2978: PPUSH
2979: CALL_OW 250
2983: ADD
2984: ST_TO_ADDR
// legion_blist := legion_blist ^ GetY ( un ) ;
2985: LD_ADDR_EXP 40
2989: PUSH
2990: LD_EXP 40
2994: PUSH
2995: LD_VAR 0 1
2999: PPUSH
3000: CALL_OW 251
3004: ADD
3005: ST_TO_ADDR
// legion_blist := legion_blist ^ GetDir ( un ) ;
3006: LD_ADDR_EXP 40
3010: PUSH
3011: LD_EXP 40
3015: PUSH
3016: LD_VAR 0 1
3020: PPUSH
3021: CALL_OW 254
3025: ADD
3026: ST_TO_ADDR
// end ; if un in legion_force then
3027: LD_VAR 0 1
3031: PUSH
3032: LD_EXP 37
3036: IN
3037: IFFALSE 3055
// legion_force := legion_force diff un ;
3039: LD_ADDR_EXP 37
3043: PUSH
3044: LD_EXP 37
3048: PUSH
3049: LD_VAR 0 1
3053: DIFF
3054: ST_TO_ADDR
// if un in ru_force then
3055: LD_VAR 0 1
3059: PUSH
3060: LD_EXP 29
3064: IN
3065: IFFALSE 3083
// ru_force := ru_force diff un ;
3067: LD_ADDR_EXP 29
3071: PUSH
3072: LD_EXP 29
3076: PUSH
3077: LD_VAR 0 1
3081: DIFF
3082: ST_TO_ADDR
// if un in al_force then
3083: LD_VAR 0 1
3087: PUSH
3088: LD_EXP 44
3092: IN
3093: IFFALSE 3111
// al_force := al_force diff un ;
3095: LD_ADDR_EXP 44
3099: PUSH
3100: LD_EXP 44
3104: PUSH
3105: LD_VAR 0 1
3109: DIFF
3110: ST_TO_ADDR
// end ;
3111: PPOPN 1
3113: END
// on BuildingComplete ( b ) do var i ;
3114: LD_INT 0
3116: PPUSH
// begin if GetSide ( b ) = 8 then
3117: LD_VAR 0 1
3121: PPUSH
3122: CALL_OW 255
3126: PUSH
3127: LD_INT 8
3129: EQUAL
3130: IFFALSE 3170
// for i = 1 to 4 do
3132: LD_ADDR_VAR 0 2
3136: PUSH
3137: DOUBLE
3138: LD_INT 1
3140: DEC
3141: ST_TO_ADDR
3142: LD_INT 4
3144: PUSH
3145: FOR_TO
3146: IFFALSE 3168
// legion_blist := Delete ( legion_blist , 1 ) ;
3148: LD_ADDR_EXP 40
3152: PUSH
3153: LD_EXP 40
3157: PPUSH
3158: LD_INT 1
3160: PPUSH
3161: CALL_OW 3
3165: ST_TO_ADDR
3166: GO 3145
3168: POP
3169: POP
// if GetSide ( b ) = 3 then
3170: LD_VAR 0 1
3174: PPUSH
3175: CALL_OW 255
3179: PUSH
3180: LD_INT 3
3182: EQUAL
3183: IFFALSE 3223
// for i = 1 to 4 do
3185: LD_ADDR_VAR 0 2
3189: PUSH
3190: DOUBLE
3191: LD_INT 1
3193: DEC
3194: ST_TO_ADDR
3195: LD_INT 4
3197: PUSH
3198: FOR_TO
3199: IFFALSE 3221
// ru_blist := Delete ( ru_blist , 1 ) ;
3201: LD_ADDR_EXP 32
3205: PUSH
3206: LD_EXP 32
3210: PPUSH
3211: LD_INT 1
3213: PPUSH
3214: CALL_OW 3
3218: ST_TO_ADDR
3219: GO 3198
3221: POP
3222: POP
// end ;
3223: PPOPN 2
3225: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
3226: LD_VAR 0 1
3230: PPUSH
3231: LD_VAR 0 2
3235: PPUSH
3236: CALL 35567 0 2
// if not GetWeapon ( veh ) in [ ru_cargo_bay , ru_siberium_rocket ] then
3240: LD_VAR 0 1
3244: PPUSH
3245: CALL_OW 264
3249: PUSH
3250: LD_INT 51
3252: PUSH
3253: LD_INT 48
3255: PUSH
3256: EMPTY
3257: LIST
3258: LIST
3259: IN
3260: NOT
3261: IFFALSE 3309
// begin if GetSide ( veh ) = 3 then
3263: LD_VAR 0 1
3267: PPUSH
3268: CALL_OW 255
3272: PUSH
3273: LD_INT 3
3275: EQUAL
3276: IFFALSE 3309
// begin ComMoveXY ( veh , 149 , 8 ) ;
3278: LD_VAR 0 1
3282: PPUSH
3283: LD_INT 149
3285: PPUSH
3286: LD_INT 8
3288: PPUSH
3289: CALL_OW 111
// ru_force := ru_force ^ veh ;
3293: LD_ADDR_EXP 29
3297: PUSH
3298: LD_EXP 29
3302: PUSH
3303: LD_VAR 0 1
3307: ADD
3308: ST_TO_ADDR
// end ; end ; if not GetWeapon ( veh ) in [ ar_cargo_bay , ar_control_tower ] then
3309: LD_VAR 0 1
3313: PPUSH
3314: CALL_OW 264
3318: PUSH
3319: LD_INT 32
3321: PUSH
3322: LD_INT 31
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: IN
3329: NOT
3330: IFFALSE 3363
// begin if GetSide ( veh ) = 8 then
3332: LD_VAR 0 1
3336: PPUSH
3337: CALL_OW 255
3341: PUSH
3342: LD_INT 8
3344: EQUAL
3345: IFFALSE 3363
// legion_force := legion_force ^ veh ;
3347: LD_ADDR_EXP 37
3351: PUSH
3352: LD_EXP 37
3356: PUSH
3357: LD_VAR 0 1
3361: ADD
3362: ST_TO_ADDR
// end ; if GetSide ( veh ) = 3 and not ru_cargo and GetWeapon ( veh ) = ru_cargo_bay then
3363: LD_VAR 0 1
3367: PPUSH
3368: CALL_OW 255
3372: PUSH
3373: LD_INT 3
3375: EQUAL
3376: PUSH
3377: LD_EXP 31
3381: NOT
3382: AND
3383: PUSH
3384: LD_VAR 0 1
3388: PPUSH
3389: CALL_OW 264
3393: PUSH
3394: LD_INT 51
3396: EQUAL
3397: AND
3398: IFFALSE 3410
// ru_cargo := veh ;
3400: LD_ADDR_EXP 31
3404: PUSH
3405: LD_VAR 0 1
3409: ST_TO_ADDR
// if GetSide ( veh ) = 7 and your_side <> 7 then
3410: LD_VAR 0 1
3414: PPUSH
3415: CALL_OW 255
3419: PUSH
3420: LD_INT 7
3422: EQUAL
3423: PUSH
3424: LD_OWVAR 2
3428: PUSH
3429: LD_INT 7
3431: NONEQUAL
3432: AND
3433: IFFALSE 3451
// al_force := al_force ^ veh ;
3435: LD_ADDR_EXP 44
3439: PUSH
3440: LD_EXP 44
3444: PUSH
3445: LD_VAR 0 1
3449: ADD
3450: ST_TO_ADDR
// if GetSide ( veh ) = your_side then
3451: LD_VAR 0 1
3455: PPUSH
3456: CALL_OW 255
3460: PUSH
3461: LD_OWVAR 2
3465: EQUAL
3466: IFFALSE 3482
// veh_counter := veh_counter + 1 ;
3468: LD_ADDR_EXP 18
3472: PUSH
3473: LD_EXP 18
3477: PUSH
3478: LD_INT 1
3480: PLUS
3481: ST_TO_ADDR
// end ;
3482: PPOPN 2
3484: END
// on SibDepositContaminated ( contaminating_scientist , x_of_deposit , y_of_deposit ) do begin if GetSide ( contaminating_scientist ) <> your_side then
3485: LD_VAR 0 1
3489: PPUSH
3490: CALL_OW 255
3494: PUSH
3495: LD_OWVAR 2
3499: NONEQUAL
3500: IFFALSE 3516
// sib_contamin_counter := sib_contamin_counter + 1 ;
3502: LD_ADDR_EXP 20
3506: PUSH
3507: LD_EXP 20
3511: PUSH
3512: LD_INT 1
3514: PLUS
3515: ST_TO_ADDR
// end ;
3516: PPOPN 3
3518: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = your_side then
3519: LD_VAR 0 2
3523: PPUSH
3524: CALL_OW 255
3528: PUSH
3529: LD_OWVAR 2
3533: EQUAL
3534: IFFALSE 3550
// tech_counter := tech_counter + 1 ;
3536: LD_ADDR_EXP 19
3540: PUSH
3541: LD_EXP 19
3545: PUSH
3546: LD_INT 1
3548: PLUS
3549: ST_TO_ADDR
// if tech = 53 and your_side = 1 then
3550: LD_VAR 0 1
3554: PUSH
3555: LD_INT 53
3557: EQUAL
3558: PUSH
3559: LD_OWVAR 2
3563: PUSH
3564: LD_INT 1
3566: EQUAL
3567: AND
3568: IFFALSE 3583
// SetTech ( 80 , 1 , state_researched ) ;
3570: LD_INT 80
3572: PPUSH
3573: LD_INT 1
3575: PPUSH
3576: LD_INT 2
3578: PPUSH
3579: CALL_OW 322
// end ;
3583: PPOPN 2
3585: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 8 and GetControl ( un ) = control_remote then
3586: LD_VAR 0 1
3590: PPUSH
3591: CALL_OW 255
3595: PUSH
3596: LD_INT 8
3598: EQUAL
3599: PUSH
3600: LD_VAR 0 1
3604: PPUSH
3605: CALL_OW 263
3609: PUSH
3610: LD_INT 2
3612: EQUAL
3613: AND
3614: IFFALSE 3625
// ComAutodestruct ( un ) ;
3616: LD_VAR 0 1
3620: PPUSH
3621: CALL 72717 0 1
// end ;
3625: PPOPN 1
3627: END
// on SailEvent ( event ) do begin case event of event_legion_attack :
3628: LD_VAR 0 1
3632: PUSH
3633: LD_EXP 21
3637: DOUBLE
3638: EQUAL
3639: IFTRUE 3643
3641: GO 3650
3643: POP
// LegionAttack ( ) ; event_alliance_attack :
3644: CALL 11363 0 0
3648: GO 3685
3650: LD_EXP 23
3654: DOUBLE
3655: EQUAL
3656: IFTRUE 3660
3658: GO 3667
3660: POP
// AllianceAttack ( ) ; event_russian_attack :
3661: CALL 18864 0 0
3665: GO 3685
3667: LD_EXP 22
3671: DOUBLE
3672: EQUAL
3673: IFTRUE 3677
3675: GO 3684
3677: POP
// RussianAttack ( ) ; end ;
3678: CALL 7589 0 0
3682: GO 3685
3684: POP
// end ;
3685: PPOPN 1
3687: END
// every 9 9$30 trigger FilterAllUnits ( [ f_class , class_apeman ] ) < 9 and tick < 50 50$00 do
3688: LD_INT 25
3690: PUSH
3691: LD_INT 12
3693: PUSH
3694: EMPTY
3695: LIST
3696: LIST
3697: PPUSH
3698: CALL_OW 69
3702: PUSH
3703: LD_INT 9
3705: LESS
3706: PUSH
3707: LD_OWVAR 1
3711: PUSH
3712: LD_INT 105000
3714: LESS
3715: AND
3716: IFFALSE 3749
3718: GO 3720
3720: DISABLE
// begin enable ;
3721: ENABLE
// PrepareApeman2 ( 8 - ( FilterAllUnits ( [ f_class , class_apeman ] ) + 0 ) ) ;
3722: LD_INT 8
3724: PUSH
3725: LD_INT 25
3727: PUSH
3728: LD_INT 12
3730: PUSH
3731: EMPTY
3732: LIST
3733: LIST
3734: PPUSH
3735: CALL_OW 69
3739: PUSH
3740: LD_INT 0
3742: PLUS
3743: MINUS
3744: PPUSH
3745: CALL 1960 0 1
// end ;
3749: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
3750: LD_VAR 0 1
3754: PPUSH
3755: LD_VAR 0 2
3759: PPUSH
3760: LD_VAR 0 3
3764: PPUSH
3765: CALL 35543 0 3
// end ;
3769: PPOPN 3
3771: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
3772: LD_VAR 0 1
3776: PPUSH
3777: CALL 35551 0 1
// end ; end_of_file
3781: PPOPN 1
3783: END
// export ru_force , ru_skill , ru_cargo , ru_blist , ru_vlist , ru_amount , ru_time , ru_teleport_exit ; export function PrepareRussian ; var i , un , ru_depot , ru_factory , ru_teleport , ru_barracks , ru_bunkers , ru_buildings , ru_vehicles , ru_humans ; begin
3784: LD_INT 0
3786: PPUSH
3787: PPUSH
3788: PPUSH
3789: PPUSH
3790: PPUSH
3791: PPUSH
3792: PPUSH
3793: PPUSH
3794: PPUSH
3795: PPUSH
3796: PPUSH
// uc_side := 3 ;
3797: LD_ADDR_OWVAR 20
3801: PUSH
3802: LD_INT 3
3804: ST_TO_ADDR
// uc_nation := nation_russian ;
3805: LD_ADDR_OWVAR 21
3809: PUSH
3810: LD_INT 3
3812: ST_TO_ADDR
// ru_depot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
3813: LD_ADDR_VAR 0 4
3817: PUSH
3818: LD_INT 22
3820: PUSH
3821: LD_INT 3
3823: PUSH
3824: EMPTY
3825: LIST
3826: LIST
3827: PUSH
3828: LD_INT 30
3830: PUSH
3831: LD_INT 1
3833: PUSH
3834: EMPTY
3835: LIST
3836: LIST
3837: PUSH
3838: EMPTY
3839: LIST
3840: LIST
3841: PPUSH
3842: CALL_OW 69
3846: PUSH
3847: LD_INT 1
3849: ARRAY
3850: ST_TO_ADDR
// ru_factory := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3851: LD_ADDR_VAR 0 5
3855: PUSH
3856: LD_INT 22
3858: PUSH
3859: LD_INT 3
3861: PUSH
3862: EMPTY
3863: LIST
3864: LIST
3865: PUSH
3866: LD_INT 30
3868: PUSH
3869: LD_INT 3
3871: PUSH
3872: EMPTY
3873: LIST
3874: LIST
3875: PUSH
3876: EMPTY
3877: LIST
3878: LIST
3879: PPUSH
3880: CALL_OW 69
3884: PUSH
3885: LD_INT 1
3887: ARRAY
3888: ST_TO_ADDR
// ru_teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] ;
3889: LD_ADDR_VAR 0 6
3893: PUSH
3894: LD_INT 22
3896: PUSH
3897: LD_INT 3
3899: PUSH
3900: EMPTY
3901: LIST
3902: LIST
3903: PUSH
3904: LD_INT 30
3906: PUSH
3907: LD_INT 34
3909: PUSH
3910: EMPTY
3911: LIST
3912: LIST
3913: PUSH
3914: EMPTY
3915: LIST
3916: LIST
3917: PPUSH
3918: CALL_OW 69
3922: PUSH
3923: LD_INT 1
3925: ARRAY
3926: ST_TO_ADDR
// ru_bunkers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
3927: LD_ADDR_VAR 0 8
3931: PUSH
3932: LD_INT 22
3934: PUSH
3935: LD_INT 3
3937: PUSH
3938: EMPTY
3939: LIST
3940: LIST
3941: PUSH
3942: LD_INT 30
3944: PUSH
3945: LD_INT 33
3947: PUSH
3948: EMPTY
3949: LIST
3950: LIST
3951: PUSH
3952: EMPTY
3953: LIST
3954: LIST
3955: PPUSH
3956: CALL_OW 69
3960: ST_TO_ADDR
// ru_barracks := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
3961: LD_ADDR_VAR 0 7
3965: PUSH
3966: LD_INT 22
3968: PUSH
3969: LD_INT 3
3971: PUSH
3972: EMPTY
3973: LIST
3974: LIST
3975: PUSH
3976: LD_INT 30
3978: PUSH
3979: LD_INT 5
3981: PUSH
3982: EMPTY
3983: LIST
3984: LIST
3985: PUSH
3986: EMPTY
3987: LIST
3988: LIST
3989: PPUSH
3990: CALL_OW 69
3994: PUSH
3995: LD_INT 1
3997: ARRAY
3998: ST_TO_ADDR
// ru_blist := [ ] ;
3999: LD_ADDR_EXP 32
4003: PUSH
4004: EMPTY
4005: ST_TO_ADDR
// ru_vlist := [ ] ;
4006: LD_ADDR_EXP 33
4010: PUSH
4011: EMPTY
4012: ST_TO_ADDR
// ru_teleport_exit := [ 183 , 62 , 147 , 44 ] ;
4013: LD_ADDR_EXP 36
4017: PUSH
4018: LD_INT 183
4020: PUSH
4021: LD_INT 62
4023: PUSH
4024: LD_INT 147
4026: PUSH
4027: LD_INT 44
4029: PUSH
4030: EMPTY
4031: LIST
4032: LIST
4033: LIST
4034: LIST
4035: ST_TO_ADDR
// TeleportExit ( FilterAllUnits ( [ f_btype , b_teleport ] ) [ 1 ] , ru_teleport_exit [ 1 ] , ru_teleport_exit [ 2 ] ) ;
4036: LD_INT 30
4038: PUSH
4039: LD_INT 34
4041: PUSH
4042: EMPTY
4043: LIST
4044: LIST
4045: PPUSH
4046: CALL_OW 69
4050: PUSH
4051: LD_INT 1
4053: ARRAY
4054: PPUSH
4055: LD_EXP 36
4059: PUSH
4060: LD_INT 1
4062: ARRAY
4063: PPUSH
4064: LD_EXP 36
4068: PUSH
4069: LD_INT 2
4071: ARRAY
4072: PPUSH
4073: CALL_OW 243
// ru_amount := [ 4 , 5 , 6 ] [ Difficulty ] ;
4077: LD_ADDR_EXP 34
4081: PUSH
4082: LD_INT 4
4084: PUSH
4085: LD_INT 5
4087: PUSH
4088: LD_INT 6
4090: PUSH
4091: EMPTY
4092: LIST
4093: LIST
4094: LIST
4095: PUSH
4096: LD_OWVAR 67
4100: ARRAY
4101: ST_TO_ADDR
// SetResourceType ( GetBase ( ru_depot ) , mat_cans , 3000 ) ;
4102: LD_VAR 0 4
4106: PPUSH
4107: CALL_OW 274
4111: PPUSH
4112: LD_INT 1
4114: PPUSH
4115: LD_INT 3000
4117: PPUSH
4118: CALL_OW 277
// SetResourceType ( GetBase ( ru_depot ) , mat_oil , 300 ) ;
4122: LD_VAR 0 4
4126: PPUSH
4127: CALL_OW 274
4131: PPUSH
4132: LD_INT 2
4134: PPUSH
4135: LD_INT 300
4137: PPUSH
4138: CALL_OW 277
// hc_gallery :=  ;
4142: LD_ADDR_OWVAR 33
4146: PUSH
4147: LD_STRING 
4149: ST_TO_ADDR
// hc_name :=  ;
4150: LD_ADDR_OWVAR 26
4154: PUSH
4155: LD_STRING 
4157: ST_TO_ADDR
// hc_importance := 0 ;
4158: LD_ADDR_OWVAR 32
4162: PUSH
4163: LD_INT 0
4165: ST_TO_ADDR
// ru_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
4166: LD_ADDR_EXP 30
4170: PUSH
4171: LD_INT 5
4173: PUSH
4174: LD_INT 6
4176: PUSH
4177: LD_INT 7
4179: PUSH
4180: EMPTY
4181: LIST
4182: LIST
4183: LIST
4184: PUSH
4185: LD_OWVAR 67
4189: ARRAY
4190: ST_TO_ADDR
// for i = 1 to 6 do
4191: LD_ADDR_VAR 0 2
4195: PUSH
4196: DOUBLE
4197: LD_INT 1
4199: DEC
4200: ST_TO_ADDR
4201: LD_INT 6
4203: PUSH
4204: FOR_TO
4205: IFFALSE 4363
// begin PrepareHuman ( false , class_bazooker , ru_skill ) ;
4207: LD_INT 0
4209: PPUSH
4210: LD_INT 9
4212: PPUSH
4213: LD_EXP 30
4217: PPUSH
4218: CALL_OW 380
// un := CreateHuman ;
4222: LD_ADDR_VAR 0 3
4226: PUSH
4227: CALL_OW 44
4231: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_barracks ) ;
4232: LD_VAR 0 3
4236: PPUSH
4237: LD_VAR 0 7
4241: PPUSH
4242: CALL_OW 52
// PrepareHuman ( false , 4 , ru_skill ) ;
4246: LD_INT 0
4248: PPUSH
4249: LD_INT 4
4251: PPUSH
4252: LD_EXP 30
4256: PPUSH
4257: CALL_OW 380
// un := CreateHuman ;
4261: LD_ADDR_VAR 0 3
4265: PUSH
4266: CALL_OW 44
4270: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
4271: LD_VAR 0 3
4275: PPUSH
4276: LD_INT 24
4278: PPUSH
4279: CALL_OW 52
// PrepareHuman ( false , 3 , ru_skill ) ;
4283: LD_INT 0
4285: PPUSH
4286: LD_INT 3
4288: PPUSH
4289: LD_EXP 30
4293: PPUSH
4294: CALL_OW 380
// un := CreateHuman ;
4298: LD_ADDR_VAR 0 3
4302: PUSH
4303: CALL_OW 44
4307: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_factory ) ;
4308: LD_VAR 0 3
4312: PPUSH
4313: LD_VAR 0 5
4317: PPUSH
4318: CALL_OW 52
// PrepareHuman ( false , 2 , ru_skill ) ;
4322: LD_INT 0
4324: PPUSH
4325: LD_INT 2
4327: PPUSH
4328: LD_EXP 30
4332: PPUSH
4333: CALL_OW 380
// un := CreateHuman ;
4337: LD_ADDR_VAR 0 3
4341: PUSH
4342: CALL_OW 44
4346: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_depot ) ;
4347: LD_VAR 0 3
4351: PPUSH
4352: LD_VAR 0 4
4356: PPUSH
4357: CALL_OW 52
// end ;
4361: GO 4204
4363: POP
4364: POP
// if Difficulty > 1 then
4365: LD_OWVAR 67
4369: PUSH
4370: LD_INT 1
4372: GREATER
4373: IFFALSE 4406
// begin un := CreateBehemoth ( 3 , 160 , 36 , 3 ) ;
4375: LD_ADDR_VAR 0 3
4379: PUSH
4380: LD_INT 3
4382: PPUSH
4383: LD_INT 160
4385: PPUSH
4386: LD_INT 36
4388: PPUSH
4389: LD_INT 3
4391: PPUSH
4392: CALL 80665 0 4
4396: ST_TO_ADDR
// ComHold ( un ) ;
4397: LD_VAR 0 3
4401: PPUSH
4402: CALL_OW 140
// end ; russian_prepared := true ;
4406: LD_ADDR_EXP 2
4410: PUSH
4411: LD_INT 1
4413: ST_TO_ADDR
// ComConstruct ( ru_factory , ru_medium_wheeled , 3 , control_computer , ru_cargo_bay ) ;
4414: LD_VAR 0 5
4418: PPUSH
4419: LD_INT 21
4421: PPUSH
4422: LD_INT 3
4424: PPUSH
4425: LD_INT 3
4427: PPUSH
4428: LD_INT 51
4430: PPUSH
4431: CALL_OW 125
// end ;
4435: LD_VAR 0 1
4439: RET
// every 0 0$02 trigger FilterAllUnits ( [ f_side , 3 ] ) > 0 and russian_prepared do var ru_depot , ru_factory , ru_teleport , ru_bunkers , ru_buildings , ru_vehicles , ru_humans , ru_barracks , ru_engs , ru_mech , ru_sci , i , tmp , filter , cr , sib_bomb ;
4440: LD_INT 22
4442: PUSH
4443: LD_INT 3
4445: PUSH
4446: EMPTY
4447: LIST
4448: LIST
4449: PPUSH
4450: CALL_OW 69
4454: PUSH
4455: LD_INT 0
4457: GREATER
4458: PUSH
4459: LD_EXP 2
4463: AND
4464: IFFALSE 6614
4466: GO 4468
4468: DISABLE
4469: LD_INT 0
4471: PPUSH
4472: PPUSH
4473: PPUSH
4474: PPUSH
4475: PPUSH
4476: PPUSH
4477: PPUSH
4478: PPUSH
4479: PPUSH
4480: PPUSH
4481: PPUSH
4482: PPUSH
4483: PPUSH
4484: PPUSH
4485: PPUSH
4486: PPUSH
// begin enable ;
4487: ENABLE
// ru_depot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
4488: LD_ADDR_VAR 0 1
4492: PUSH
4493: LD_INT 22
4495: PUSH
4496: LD_INT 3
4498: PUSH
4499: EMPTY
4500: LIST
4501: LIST
4502: PUSH
4503: LD_INT 30
4505: PUSH
4506: LD_INT 1
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: PPUSH
4517: CALL_OW 69
4521: PUSH
4522: LD_INT 1
4524: ARRAY
4525: ST_TO_ADDR
// ru_factory := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
4526: LD_ADDR_VAR 0 2
4530: PUSH
4531: LD_INT 22
4533: PUSH
4534: LD_INT 3
4536: PUSH
4537: EMPTY
4538: LIST
4539: LIST
4540: PUSH
4541: LD_INT 30
4543: PUSH
4544: LD_INT 3
4546: PUSH
4547: EMPTY
4548: LIST
4549: LIST
4550: PUSH
4551: EMPTY
4552: LIST
4553: LIST
4554: PPUSH
4555: CALL_OW 69
4559: PUSH
4560: LD_INT 1
4562: ARRAY
4563: ST_TO_ADDR
// ru_teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] ;
4564: LD_ADDR_VAR 0 3
4568: PUSH
4569: LD_INT 22
4571: PUSH
4572: LD_INT 3
4574: PUSH
4575: EMPTY
4576: LIST
4577: LIST
4578: PUSH
4579: LD_INT 30
4581: PUSH
4582: LD_INT 34
4584: PUSH
4585: EMPTY
4586: LIST
4587: LIST
4588: PUSH
4589: EMPTY
4590: LIST
4591: LIST
4592: PPUSH
4593: CALL_OW 69
4597: PUSH
4598: LD_INT 1
4600: ARRAY
4601: ST_TO_ADDR
// ru_bunkers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
4602: LD_ADDR_VAR 0 4
4606: PUSH
4607: LD_INT 22
4609: PUSH
4610: LD_INT 3
4612: PUSH
4613: EMPTY
4614: LIST
4615: LIST
4616: PUSH
4617: LD_INT 30
4619: PUSH
4620: LD_INT 33
4622: PUSH
4623: EMPTY
4624: LIST
4625: LIST
4626: PUSH
4627: EMPTY
4628: LIST
4629: LIST
4630: PPUSH
4631: CALL_OW 69
4635: ST_TO_ADDR
// ru_barracks := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
4636: LD_ADDR_VAR 0 8
4640: PUSH
4641: LD_INT 22
4643: PUSH
4644: LD_INT 3
4646: PUSH
4647: EMPTY
4648: LIST
4649: LIST
4650: PUSH
4651: LD_INT 30
4653: PUSH
4654: LD_INT 5
4656: PUSH
4657: EMPTY
4658: LIST
4659: LIST
4660: PUSH
4661: EMPTY
4662: LIST
4663: LIST
4664: PPUSH
4665: CALL_OW 69
4669: PUSH
4670: LD_INT 1
4672: ARRAY
4673: ST_TO_ADDR
// ru_buildings := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
4674: LD_ADDR_VAR 0 5
4678: PUSH
4679: LD_INT 22
4681: PUSH
4682: LD_INT 3
4684: PUSH
4685: EMPTY
4686: LIST
4687: LIST
4688: PUSH
4689: LD_INT 21
4691: PUSH
4692: LD_INT 3
4694: PUSH
4695: EMPTY
4696: LIST
4697: LIST
4698: PUSH
4699: EMPTY
4700: LIST
4701: LIST
4702: PPUSH
4703: CALL_OW 69
4707: ST_TO_ADDR
// ru_vehicles := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
4708: LD_ADDR_VAR 0 6
4712: PUSH
4713: LD_INT 22
4715: PUSH
4716: LD_INT 3
4718: PUSH
4719: EMPTY
4720: LIST
4721: LIST
4722: PUSH
4723: LD_INT 21
4725: PUSH
4726: LD_INT 2
4728: PUSH
4729: EMPTY
4730: LIST
4731: LIST
4732: PUSH
4733: EMPTY
4734: LIST
4735: LIST
4736: PPUSH
4737: CALL_OW 69
4741: ST_TO_ADDR
// ru_humans := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
4742: LD_ADDR_VAR 0 7
4746: PUSH
4747: LD_INT 22
4749: PUSH
4750: LD_INT 3
4752: PUSH
4753: EMPTY
4754: LIST
4755: LIST
4756: PUSH
4757: LD_INT 21
4759: PUSH
4760: LD_INT 1
4762: PUSH
4763: EMPTY
4764: LIST
4765: LIST
4766: PUSH
4767: EMPTY
4768: LIST
4769: LIST
4770: PPUSH
4771: CALL_OW 69
4775: ST_TO_ADDR
// ru_engs := UnitFilter ( ru_humans , [ f_class , 2 ] ) ;
4776: LD_ADDR_VAR 0 9
4780: PUSH
4781: LD_VAR 0 7
4785: PPUSH
4786: LD_INT 25
4788: PUSH
4789: LD_INT 2
4791: PUSH
4792: EMPTY
4793: LIST
4794: LIST
4795: PPUSH
4796: CALL_OW 72
4800: ST_TO_ADDR
// ru_mech := UnitFilter ( ru_humans , [ f_class , 3 ] ) ;
4801: LD_ADDR_VAR 0 10
4805: PUSH
4806: LD_VAR 0 7
4810: PPUSH
4811: LD_INT 25
4813: PUSH
4814: LD_INT 3
4816: PUSH
4817: EMPTY
4818: LIST
4819: LIST
4820: PPUSH
4821: CALL_OW 72
4825: ST_TO_ADDR
// ru_sci := UnitFilter ( ru_humans , [ f_class , 4 ] ) ;
4826: LD_ADDR_VAR 0 11
4830: PUSH
4831: LD_VAR 0 7
4835: PPUSH
4836: LD_INT 25
4838: PUSH
4839: LD_INT 4
4841: PUSH
4842: EMPTY
4843: LIST
4844: LIST
4845: PPUSH
4846: CALL_OW 72
4850: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) > 0 and ru_cargo = false then
4851: LD_INT 22
4853: PUSH
4854: LD_INT 3
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: PUSH
4861: LD_INT 34
4863: PUSH
4864: LD_INT 51
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: PUSH
4871: EMPTY
4872: LIST
4873: LIST
4874: PPUSH
4875: CALL_OW 69
4879: PUSH
4880: LD_INT 0
4882: GREATER
4883: PUSH
4884: LD_EXP 31
4888: PUSH
4889: LD_INT 0
4891: EQUAL
4892: AND
4893: IFFALSE 4933
// ru_cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
4895: LD_ADDR_EXP 31
4899: PUSH
4900: LD_INT 22
4902: PUSH
4903: LD_INT 3
4905: PUSH
4906: EMPTY
4907: LIST
4908: LIST
4909: PUSH
4910: LD_INT 34
4912: PUSH
4913: LD_INT 51
4915: PUSH
4916: EMPTY
4917: LIST
4918: LIST
4919: PUSH
4920: EMPTY
4921: LIST
4922: LIST
4923: PPUSH
4924: CALL_OW 69
4928: PUSH
4929: LD_INT 1
4931: ARRAY
4932: ST_TO_ADDR
// if ru_cargo then
4933: LD_EXP 31
4937: IFFALSE 5277
// begin if IsInArea ( ru_cargo , ru_base ) then
4939: LD_EXP 31
4943: PPUSH
4944: LD_INT 9
4946: PPUSH
4947: CALL_OW 308
4951: IFFALSE 5030
// begin if GetCargo ( ru_cargo , mat_cans ) = 0 then
4953: LD_EXP 31
4957: PPUSH
4958: LD_INT 1
4960: PPUSH
4961: CALL_OW 289
4965: PUSH
4966: LD_INT 0
4968: EQUAL
4969: IFFALSE 4987
// ComEnterUnit ( ru_cargo , ru_teleport ) else
4971: LD_EXP 31
4975: PPUSH
4976: LD_VAR 0 3
4980: PPUSH
4981: CALL_OW 120
4985: GO 5028
// if not HasTask ( ru_cargo ) then
4987: LD_EXP 31
4991: PPUSH
4992: CALL_OW 314
4996: NOT
4997: IFFALSE 5028
// ComMoveXY ( ru_cargo , GetX ( ru_depot ) , GetY ( ru_depot ) ) ;
4999: LD_EXP 31
5003: PPUSH
5004: LD_VAR 0 1
5008: PPUSH
5009: CALL_OW 250
5013: PPUSH
5014: LD_VAR 0 1
5018: PPUSH
5019: CALL_OW 251
5023: PPUSH
5024: CALL_OW 111
// end else
5028: GO 5277
// begin if not HasTask ( ru_cargo ) and GetCargo ( ru_cargo , mat_cans ) < 100 and not IsInArea ( ru_cargo , cargoa ) then
5030: LD_EXP 31
5034: PPUSH
5035: CALL_OW 314
5039: NOT
5040: PUSH
5041: LD_EXP 31
5045: PPUSH
5046: LD_INT 1
5048: PPUSH
5049: CALL_OW 289
5053: PUSH
5054: LD_INT 100
5056: LESS
5057: AND
5058: PUSH
5059: LD_EXP 31
5063: PPUSH
5064: LD_INT 10
5066: PPUSH
5067: CALL_OW 308
5071: NOT
5072: AND
5073: IFFALSE 5150
// begin cr := GetListOfCratesInArea ( ru_crates ) ;
5075: LD_ADDR_VAR 0 15
5079: PUSH
5080: LD_INT 11
5082: PPUSH
5083: CALL_OW 435
5087: ST_TO_ADDR
// if cr then
5088: LD_VAR 0 15
5092: IFFALSE 5123
// ComCollect ( ru_cargo , cr [ 1 ] , cr [ 2 ] ) else
5094: LD_EXP 31
5098: PPUSH
5099: LD_VAR 0 15
5103: PUSH
5104: LD_INT 1
5106: ARRAY
5107: PPUSH
5108: LD_VAR 0 15
5112: PUSH
5113: LD_INT 2
5115: ARRAY
5116: PPUSH
5117: CALL_OW 117
5121: GO 5150
// if not IsInArea ( ru_cargo , ru_crates ) then
5123: LD_EXP 31
5127: PPUSH
5128: LD_INT 11
5130: PPUSH
5131: CALL_OW 308
5135: NOT
5136: IFFALSE 5150
// ComMoveToArea ( ru_cargo , ru_crates ) ;
5138: LD_EXP 31
5142: PPUSH
5143: LD_INT 11
5145: PPUSH
5146: CALL_OW 113
// end ; if not HasTask ( ru_cargo ) and not IsInArea ( ru_cargo , cargoa ) and ( GetCargo ( ru_cargo , mat_cans ) = 100 or See ( your_side , ru_cargo ) ) then
5150: LD_EXP 31
5154: PPUSH
5155: CALL_OW 314
5159: NOT
5160: PUSH
5161: LD_EXP 31
5165: PPUSH
5166: LD_INT 10
5168: PPUSH
5169: CALL_OW 308
5173: NOT
5174: AND
5175: PUSH
5176: LD_EXP 31
5180: PPUSH
5181: LD_INT 1
5183: PPUSH
5184: CALL_OW 289
5188: PUSH
5189: LD_INT 100
5191: EQUAL
5192: PUSH
5193: LD_OWVAR 2
5197: PPUSH
5198: LD_EXP 31
5202: PPUSH
5203: CALL_OW 292
5207: OR
5208: AND
5209: IFFALSE 5223
// ComMoveToArea ( ru_cargo , cargoa ) ;
5211: LD_EXP 31
5215: PPUSH
5216: LD_INT 10
5218: PPUSH
5219: CALL_OW 113
// if IsInArea ( ru_cargo , cargoa ) and ru_barracks then
5223: LD_EXP 31
5227: PPUSH
5228: LD_INT 10
5230: PPUSH
5231: CALL_OW 308
5235: PUSH
5236: LD_VAR 0 8
5240: AND
5241: IFFALSE 5277
// ComSpaceShift ( UnitFilter ( ru_humans , [ f_class , class_bazooker ] ) [ 1 ] , 139 , 24 ) ;
5243: LD_VAR 0 7
5247: PPUSH
5248: LD_INT 25
5250: PUSH
5251: LD_INT 9
5253: PUSH
5254: EMPTY
5255: LIST
5256: LIST
5257: PPUSH
5258: CALL_OW 72
5262: PUSH
5263: LD_INT 1
5265: ARRAY
5266: PPUSH
5267: LD_INT 139
5269: PPUSH
5270: LD_INT 24
5272: PPUSH
5273: CALL_OW 153
// end ; end ; if ru_cargo = 0 and ru_factory and BuildingStatus ( ru_factory ) = bs_idle then
5277: LD_EXP 31
5281: PUSH
5282: LD_INT 0
5284: EQUAL
5285: PUSH
5286: LD_VAR 0 2
5290: AND
5291: PUSH
5292: LD_VAR 0 2
5296: PPUSH
5297: CALL_OW 461
5301: PUSH
5302: LD_INT 2
5304: EQUAL
5305: AND
5306: IFFALSE 5329
// ComConstruct ( ru_factory , ru_medium_wheeled , 3 , control_computer , ru_cargo_bay ) ;
5308: LD_VAR 0 2
5312: PPUSH
5313: LD_INT 21
5315: PPUSH
5316: LD_INT 3
5318: PPUSH
5319: LD_INT 3
5321: PPUSH
5322: LD_INT 51
5324: PPUSH
5325: CALL_OW 125
// if ru_factory and ru_vlist > 0 then
5329: LD_VAR 0 2
5333: PUSH
5334: LD_EXP 33
5338: PUSH
5339: LD_INT 0
5341: GREATER
5342: AND
5343: IFFALSE 5443
// begin if BuildingStatus ( ru_factory ) = bs_idle then
5345: LD_VAR 0 2
5349: PPUSH
5350: CALL_OW 461
5354: PUSH
5355: LD_INT 2
5357: EQUAL
5358: IFFALSE 5443
// begin ComConstruct ( ru_factory , ru_vlist [ 1 ] , ru_vlist [ 2 ] , ru_vlist [ 3 ] , ru_vlist [ 4 ] ) ;
5360: LD_VAR 0 2
5364: PPUSH
5365: LD_EXP 33
5369: PUSH
5370: LD_INT 1
5372: ARRAY
5373: PPUSH
5374: LD_EXP 33
5378: PUSH
5379: LD_INT 2
5381: ARRAY
5382: PPUSH
5383: LD_EXP 33
5387: PUSH
5388: LD_INT 3
5390: ARRAY
5391: PPUSH
5392: LD_EXP 33
5396: PUSH
5397: LD_INT 4
5399: ARRAY
5400: PPUSH
5401: CALL_OW 125
// for i = 1 to 4 do
5405: LD_ADDR_VAR 0 12
5409: PUSH
5410: DOUBLE
5411: LD_INT 1
5413: DEC
5414: ST_TO_ADDR
5415: LD_INT 4
5417: PUSH
5418: FOR_TO
5419: IFFALSE 5441
// ru_vlist := Delete ( ru_vlist , 1 ) ;
5421: LD_ADDR_EXP 33
5425: PUSH
5426: LD_EXP 33
5430: PPUSH
5431: LD_INT 1
5433: PPUSH
5434: CALL_OW 3
5438: ST_TO_ADDR
5439: GO 5418
5441: POP
5442: POP
// end ; end ; if BuildingStatus ( ru_lab ) = bs_idle and ru_sib_bomb then
5443: LD_INT 24
5445: PPUSH
5446: CALL_OW 461
5450: PUSH
5451: LD_INT 2
5453: EQUAL
5454: PUSH
5455: LD_EXP 4
5459: AND
5460: IFFALSE 5488
// if GetTech ( tech_sibfiss , 3 ) = state_enabled then
5462: LD_INT 25
5464: PPUSH
5465: LD_INT 3
5467: PPUSH
5468: CALL_OW 321
5472: PUSH
5473: LD_INT 1
5475: EQUAL
5476: IFFALSE 5488
// ComResearch ( ru_lab , tech_sibfiss ) ;
5478: LD_INT 24
5480: PPUSH
5481: LD_INT 25
5483: PPUSH
5484: CALL_OW 124
// if GetTech ( tech_sibfiss , 3 ) = state_researched and tick mod 5 5$00 = 0 then
5488: LD_INT 25
5490: PPUSH
5491: LD_INT 3
5493: PPUSH
5494: CALL_OW 321
5498: PUSH
5499: LD_INT 2
5501: EQUAL
5502: PUSH
5503: LD_OWVAR 1
5507: PUSH
5508: LD_INT 10500
5510: MOD
5511: PUSH
5512: LD_INT 0
5514: EQUAL
5515: AND
5516: IFFALSE 5554
// if BuildingStatus ( ru_factory ) = bs_idle then
5518: LD_VAR 0 2
5522: PPUSH
5523: CALL_OW 461
5527: PUSH
5528: LD_INT 2
5530: EQUAL
5531: IFFALSE 5554
// ComConstruct ( ru_factory , ru_heavy_wheeled , 3 , control_computer , ru_siberium_rocket ) ;
5533: LD_VAR 0 2
5537: PPUSH
5538: LD_INT 23
5540: PPUSH
5541: LD_INT 3
5543: PPUSH
5544: LD_INT 3
5546: PPUSH
5547: LD_INT 48
5549: PPUSH
5550: CALL_OW 125
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) > 0 then
5554: LD_INT 22
5556: PUSH
5557: LD_INT 3
5559: PUSH
5560: EMPTY
5561: LIST
5562: LIST
5563: PUSH
5564: LD_INT 34
5566: PUSH
5567: LD_INT 48
5569: PUSH
5570: EMPTY
5571: LIST
5572: LIST
5573: PUSH
5574: EMPTY
5575: LIST
5576: LIST
5577: PPUSH
5578: CALL_OW 69
5582: PUSH
5583: LD_INT 0
5585: GREATER
5586: IFFALSE 5960
// begin sib_bomb := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) [ 1 ] ;
5588: LD_ADDR_VAR 0 16
5592: PUSH
5593: LD_INT 22
5595: PUSH
5596: LD_INT 3
5598: PUSH
5599: EMPTY
5600: LIST
5601: LIST
5602: PUSH
5603: LD_INT 34
5605: PUSH
5606: LD_INT 48
5608: PUSH
5609: EMPTY
5610: LIST
5611: LIST
5612: PUSH
5613: EMPTY
5614: LIST
5615: LIST
5616: PPUSH
5617: CALL_OW 69
5621: PUSH
5622: LD_INT 1
5624: ARRAY
5625: ST_TO_ADDR
// if IsInArea ( sib_bomb , ru_base ) then
5626: LD_VAR 0 16
5630: PPUSH
5631: LD_INT 9
5633: PPUSH
5634: CALL_OW 308
5638: IFFALSE 5656
// ComEnterUnit ( sib_bomb , ru_teleport ) else
5640: LD_VAR 0 16
5644: PPUSH
5645: LD_VAR 0 3
5649: PPUSH
5650: CALL_OW 120
5654: GO 5960
// if not HasTask ( sib_bomb ) then
5656: LD_VAR 0 16
5660: PPUSH
5661: CALL_OW 314
5665: NOT
5666: IFFALSE 5960
// if GetLives ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) > 250 then
5668: LD_INT 22
5670: PUSH
5671: LD_OWVAR 2
5675: PUSH
5676: EMPTY
5677: LIST
5678: LIST
5679: PUSH
5680: LD_INT 30
5682: PUSH
5683: LD_INT 1
5685: PUSH
5686: EMPTY
5687: LIST
5688: LIST
5689: PUSH
5690: EMPTY
5691: LIST
5692: LIST
5693: PPUSH
5694: CALL_OW 69
5698: PUSH
5699: LD_INT 1
5701: ARRAY
5702: PPUSH
5703: CALL_OW 256
5707: PUSH
5708: LD_INT 250
5710: GREATER
5711: IFFALSE 5804
// ComAttackPlace ( sib_bomb , GetX ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) , GetY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ) else
5713: LD_VAR 0 16
5717: PPUSH
5718: LD_INT 22
5720: PUSH
5721: LD_OWVAR 2
5725: PUSH
5726: EMPTY
5727: LIST
5728: LIST
5729: PUSH
5730: LD_INT 30
5732: PUSH
5733: LD_INT 1
5735: PUSH
5736: EMPTY
5737: LIST
5738: LIST
5739: PUSH
5740: EMPTY
5741: LIST
5742: LIST
5743: PPUSH
5744: CALL_OW 69
5748: PUSH
5749: LD_INT 1
5751: ARRAY
5752: PPUSH
5753: CALL_OW 250
5757: PPUSH
5758: LD_INT 22
5760: PUSH
5761: LD_OWVAR 2
5765: PUSH
5766: EMPTY
5767: LIST
5768: LIST
5769: PUSH
5770: LD_INT 30
5772: PUSH
5773: LD_INT 1
5775: PUSH
5776: EMPTY
5777: LIST
5778: LIST
5779: PUSH
5780: EMPTY
5781: LIST
5782: LIST
5783: PPUSH
5784: CALL_OW 69
5788: PUSH
5789: LD_INT 1
5791: ARRAY
5792: PPUSH
5793: CALL_OW 251
5797: PPUSH
5798: CALL_OW 116
5802: GO 5960
// if FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) > 0 then
5804: LD_INT 22
5806: PUSH
5807: LD_OWVAR 2
5811: PUSH
5812: EMPTY
5813: LIST
5814: LIST
5815: PUSH
5816: LD_INT 21
5818: PUSH
5819: LD_INT 3
5821: PUSH
5822: EMPTY
5823: LIST
5824: LIST
5825: PUSH
5826: EMPTY
5827: LIST
5828: LIST
5829: PPUSH
5830: CALL_OW 69
5834: PUSH
5835: LD_INT 0
5837: GREATER
5838: IFFALSE 5931
// ComAttackPlace ( sib_bomb , GetX ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) [ 1 ] ) , GetY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) [ 1 ] ) ) else
5840: LD_VAR 0 16
5844: PPUSH
5845: LD_INT 22
5847: PUSH
5848: LD_OWVAR 2
5852: PUSH
5853: EMPTY
5854: LIST
5855: LIST
5856: PUSH
5857: LD_INT 21
5859: PUSH
5860: LD_INT 3
5862: PUSH
5863: EMPTY
5864: LIST
5865: LIST
5866: PUSH
5867: EMPTY
5868: LIST
5869: LIST
5870: PPUSH
5871: CALL_OW 69
5875: PUSH
5876: LD_INT 1
5878: ARRAY
5879: PPUSH
5880: CALL_OW 250
5884: PPUSH
5885: LD_INT 22
5887: PUSH
5888: LD_OWVAR 2
5892: PUSH
5893: EMPTY
5894: LIST
5895: LIST
5896: PUSH
5897: LD_INT 21
5899: PUSH
5900: LD_INT 3
5902: PUSH
5903: EMPTY
5904: LIST
5905: LIST
5906: PUSH
5907: EMPTY
5908: LIST
5909: LIST
5910: PPUSH
5911: CALL_OW 69
5915: PUSH
5916: LD_INT 1
5918: ARRAY
5919: PPUSH
5920: CALL_OW 251
5924: PPUSH
5925: CALL_OW 116
5929: GO 5960
// ComAttackPlace ( sib_bomb , GetX ( player_commander ) , GetY ( player_commander ) ) ;
5931: LD_VAR 0 16
5935: PPUSH
5936: LD_EXP 11
5940: PPUSH
5941: CALL_OW 250
5945: PPUSH
5946: LD_EXP 11
5950: PPUSH
5951: CALL_OW 251
5955: PPUSH
5956: CALL_OW 116
// end ; if ru_can_attack then
5960: LD_EXP 3
5964: IFFALSE 6112
// if ru_time > 0 0$00 then
5966: LD_EXP 35
5970: PUSH
5971: LD_INT 0
5973: GREATER
5974: IFFALSE 5992
// ru_time := ru_time - 0 0$03 else
5976: LD_ADDR_EXP 35
5980: PUSH
5981: LD_EXP 35
5985: PUSH
5986: LD_INT 105
5988: MINUS
5989: ST_TO_ADDR
5990: GO 6112
// begin ru_time := Rand ( 9 9$39 , 14 14$39 ) ;
5992: LD_ADDR_EXP 35
5996: PUSH
5997: LD_INT 20265
5999: PPUSH
6000: LD_INT 30765
6002: PPUSH
6003: CALL_OW 12
6007: ST_TO_ADDR
// for i = 1 to ru_amount do
6008: LD_ADDR_VAR 0 12
6012: PUSH
6013: DOUBLE
6014: LD_INT 1
6016: DEC
6017: ST_TO_ADDR
6018: LD_EXP 34
6022: PUSH
6023: FOR_TO
6024: IFFALSE 6110
// begin ru_vlist := ru_vlist ^ ru_heavy_wheeled ;
6026: LD_ADDR_EXP 33
6030: PUSH
6031: LD_EXP 33
6035: PUSH
6036: LD_INT 23
6038: ADD
6039: ST_TO_ADDR
// ru_vlist := ru_vlist ^ engine_siberite ;
6040: LD_ADDR_EXP 33
6044: PUSH
6045: LD_EXP 33
6049: PUSH
6050: LD_INT 3
6052: ADD
6053: ST_TO_ADDR
// ru_vlist := ru_vlist ^ control_computer ;
6054: LD_ADDR_EXP 33
6058: PUSH
6059: LD_EXP 33
6063: PUSH
6064: LD_INT 3
6066: ADD
6067: ST_TO_ADDR
// ru_vlist := ru_vlist ^ [ ru_heavy_gun , ru_rocket_launcher , ru_rocket ] [ MultiRand ( 1 , 2 , 3 ) ] ;
6068: LD_ADDR_EXP 33
6072: PUSH
6073: LD_EXP 33
6077: PUSH
6078: LD_INT 46
6080: PUSH
6081: LD_INT 45
6083: PUSH
6084: LD_INT 47
6086: PUSH
6087: EMPTY
6088: LIST
6089: LIST
6090: LIST
6091: PUSH
6092: LD_INT 1
6094: PPUSH
6095: LD_INT 2
6097: PPUSH
6098: LD_INT 3
6100: PPUSH
6101: CALL_OW 14
6105: ARRAY
6106: ADD
6107: ST_TO_ADDR
// end ;
6108: GO 6023
6110: POP
6111: POP
// end ; if UnitFilter ( ru_bunkers , [ f_bweapon , 0 ] ) > 0 then
6112: LD_VAR 0 4
6116: PPUSH
6117: LD_INT 35
6119: PUSH
6120: LD_INT 0
6122: PUSH
6123: EMPTY
6124: LIST
6125: LIST
6126: PPUSH
6127: CALL_OW 72
6131: PUSH
6132: LD_INT 0
6134: GREATER
6135: IFFALSE 6183
// if BuildingStatus ( ru_factory ) = bs_idle then
6137: LD_VAR 0 2
6141: PPUSH
6142: CALL_OW 461
6146: PUSH
6147: LD_INT 2
6149: EQUAL
6150: IFFALSE 6183
// ComPlaceWeapon ( UnitFilter ( ru_bunkers , [ f_bweapon , 0 ] ) [ 1 ] , ru_rocket ) ;
6152: LD_VAR 0 4
6156: PPUSH
6157: LD_INT 35
6159: PUSH
6160: LD_INT 0
6162: PUSH
6163: EMPTY
6164: LIST
6165: LIST
6166: PPUSH
6167: CALL_OW 72
6171: PUSH
6172: LD_INT 1
6174: ARRAY
6175: PPUSH
6176: LD_INT 47
6178: PPUSH
6179: CALL_OW 148
// if ru_force >= ru_amount then
6183: LD_EXP 29
6187: PUSH
6188: LD_EXP 34
6192: GREATEREQUAL
6193: IFFALSE 6204
// RaiseSailEvent ( event_russian_attack ) ;
6195: LD_EXP 22
6199: PPUSH
6200: CALL_OW 427
// if ru_engs > 0 then
6204: LD_VAR 0 9
6208: PUSH
6209: LD_INT 0
6211: GREATER
6212: IFFALSE 6614
// begin if UnitFilter ( ru_buildings , [ f_not , [ f_lives , 1000 ] ] ) > 0 then
6214: LD_VAR 0 5
6218: PPUSH
6219: LD_INT 3
6221: PUSH
6222: LD_INT 24
6224: PUSH
6225: LD_INT 1000
6227: PUSH
6228: EMPTY
6229: LIST
6230: LIST
6231: PUSH
6232: EMPTY
6233: LIST
6234: LIST
6235: PPUSH
6236: CALL_OW 72
6240: PUSH
6241: LD_INT 0
6243: GREATER
6244: IFFALSE 6399
// begin filter := UnitFilter ( ru_buildings , [ f_not , [ f_lives , 1000 ] ] ) ;
6246: LD_ADDR_VAR 0 14
6250: PUSH
6251: LD_VAR 0 5
6255: PPUSH
6256: LD_INT 3
6258: PUSH
6259: LD_INT 24
6261: PUSH
6262: LD_INT 1000
6264: PUSH
6265: EMPTY
6266: LIST
6267: LIST
6268: PUSH
6269: EMPTY
6270: LIST
6271: LIST
6272: PPUSH
6273: CALL_OW 72
6277: ST_TO_ADDR
// for i = 1 to ru_engs do
6278: LD_ADDR_VAR 0 12
6282: PUSH
6283: DOUBLE
6284: LD_INT 1
6286: DEC
6287: ST_TO_ADDR
6288: LD_VAR 0 9
6292: PUSH
6293: FOR_TO
6294: IFFALSE 6395
// begin if IsInUnit ( ru_engs [ i ] ) then
6296: LD_VAR 0 9
6300: PUSH
6301: LD_VAR 0 12
6305: ARRAY
6306: PPUSH
6307: CALL_OW 310
6311: IFFALSE 6330
// ComExitBuilding ( ru_engs [ i ] ) else
6313: LD_VAR 0 9
6317: PUSH
6318: LD_VAR 0 12
6322: ARRAY
6323: PPUSH
6324: CALL_OW 122
6328: GO 6393
// if not HasTask ( ru_engs [ i ] ) and GetLives ( ru_engs [ i ] ) > 600 then
6330: LD_VAR 0 9
6334: PUSH
6335: LD_VAR 0 12
6339: ARRAY
6340: PPUSH
6341: CALL_OW 314
6345: NOT
6346: PUSH
6347: LD_VAR 0 9
6351: PUSH
6352: LD_VAR 0 12
6356: ARRAY
6357: PPUSH
6358: CALL_OW 256
6362: PUSH
6363: LD_INT 600
6365: GREATER
6366: AND
6367: IFFALSE 6393
// ComRepairBuilding ( ru_engs [ i ] , filter [ 1 ] ) ;
6369: LD_VAR 0 9
6373: PUSH
6374: LD_VAR 0 12
6378: ARRAY
6379: PPUSH
6380: LD_VAR 0 14
6384: PUSH
6385: LD_INT 1
6387: ARRAY
6388: PPUSH
6389: CALL_OW 130
// end ;
6393: GO 6293
6395: POP
6396: POP
// end else
6397: GO 6614
// begin if ru_blist = 0 then
6399: LD_EXP 32
6403: PUSH
6404: LD_INT 0
6406: EQUAL
6407: IFFALSE 6489
// begin for i = 1 to ru_engs do
6409: LD_ADDR_VAR 0 12
6413: PUSH
6414: DOUBLE
6415: LD_INT 1
6417: DEC
6418: ST_TO_ADDR
6419: LD_VAR 0 9
6423: PUSH
6424: FOR_TO
6425: IFFALSE 6485
// if not HasTask ( ru_engs [ i ] ) and not IsInUnit ( ru_engs [ i ] ) then
6427: LD_VAR 0 9
6431: PUSH
6432: LD_VAR 0 12
6436: ARRAY
6437: PPUSH
6438: CALL_OW 314
6442: NOT
6443: PUSH
6444: LD_VAR 0 9
6448: PUSH
6449: LD_VAR 0 12
6453: ARRAY
6454: PPUSH
6455: CALL_OW 310
6459: NOT
6460: AND
6461: IFFALSE 6483
// ComEnterUnit ( ru_engs [ i ] , ru_depot ) ;
6463: LD_VAR 0 9
6467: PUSH
6468: LD_VAR 0 12
6472: ARRAY
6473: PPUSH
6474: LD_VAR 0 1
6478: PPUSH
6479: CALL_OW 120
6483: GO 6424
6485: POP
6486: POP
// end else
6487: GO 6614
// begin for i = 1 to ru_engs do
6489: LD_ADDR_VAR 0 12
6493: PUSH
6494: DOUBLE
6495: LD_INT 1
6497: DEC
6498: ST_TO_ADDR
6499: LD_VAR 0 9
6503: PUSH
6504: FOR_TO
6505: IFFALSE 6612
// begin if IsInUnit ( ru_engs [ i ] ) then
6507: LD_VAR 0 9
6511: PUSH
6512: LD_VAR 0 12
6516: ARRAY
6517: PPUSH
6518: CALL_OW 310
6522: IFFALSE 6541
// ComExitBuilding ( ru_engs [ i ] ) else
6524: LD_VAR 0 9
6528: PUSH
6529: LD_VAR 0 12
6533: ARRAY
6534: PPUSH
6535: CALL_OW 122
6539: GO 6610
// if not HasTask ( ru_engs [ i ] ) then
6541: LD_VAR 0 9
6545: PUSH
6546: LD_VAR 0 12
6550: ARRAY
6551: PPUSH
6552: CALL_OW 314
6556: NOT
6557: IFFALSE 6610
// ComBuild ( ru_engs [ i ] , ru_blist [ 1 ] , ru_blist [ 2 ] , ru_blist [ 3 ] , ru_blist [ 4 ] ) ;
6559: LD_VAR 0 9
6563: PUSH
6564: LD_VAR 0 12
6568: ARRAY
6569: PPUSH
6570: LD_EXP 32
6574: PUSH
6575: LD_INT 1
6577: ARRAY
6578: PPUSH
6579: LD_EXP 32
6583: PUSH
6584: LD_INT 2
6586: ARRAY
6587: PPUSH
6588: LD_EXP 32
6592: PUSH
6593: LD_INT 3
6595: ARRAY
6596: PPUSH
6597: LD_EXP 32
6601: PUSH
6602: LD_INT 4
6604: ARRAY
6605: PPUSH
6606: CALL_OW 145
// end ;
6610: GO 6504
6612: POP
6613: POP
// end ; end ; end ; end ;
6614: PPOPN 16
6616: END
// every 3 3$40 + 0 0$45 trigger russian_prepared and GetListOfCratesInArea ( ru_crates ) < 10 do
6617: LD_EXP 2
6621: PUSH
6622: LD_INT 11
6624: PPUSH
6625: CALL_OW 435
6629: PUSH
6630: LD_INT 10
6632: LESS
6633: AND
6634: IFFALSE 6697
6636: GO 6638
6638: DISABLE
// begin enable ;
6639: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , ru_crates , true ) ;
6640: LD_INT 1
6642: PPUSH
6643: LD_INT 5
6645: PPUSH
6646: CALL_OW 12
6650: PPUSH
6651: LD_INT 11
6653: PPUSH
6654: LD_INT 1
6656: PPUSH
6657: CALL_OW 55
// Wait ( Rand ( 0 0$43 , 1 1$00 ) ) ;
6661: LD_INT 1505
6663: PPUSH
6664: LD_INT 2100
6666: PPUSH
6667: CALL_OW 12
6671: PPUSH
6672: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 5 ) , ru_crates , true ) ;
6676: LD_INT 1
6678: PPUSH
6679: LD_INT 5
6681: PPUSH
6682: CALL_OW 12
6686: PPUSH
6687: LD_INT 11
6689: PPUSH
6690: LD_INT 1
6692: PPUSH
6693: CALL_OW 55
// end ;
6697: END
// every 15 15$00 + 25 25$00 trigger not ru_sib_bomb do var i , tmp ;
6698: LD_EXP 4
6702: NOT
6703: IFFALSE 6818
6705: GO 6707
6707: DISABLE
6708: LD_INT 0
6710: PPUSH
6711: PPUSH
// begin enable ;
6712: ENABLE
// i := Rand ( 0 , 100 ) ;
6713: LD_ADDR_VAR 0 1
6717: PUSH
6718: LD_INT 0
6720: PPUSH
6721: LD_INT 100
6723: PPUSH
6724: CALL_OW 12
6728: ST_TO_ADDR
// case your_side of 1 :
6729: LD_OWVAR 2
6733: PUSH
6734: LD_INT 1
6736: DOUBLE
6737: EQUAL
6738: IFTRUE 6742
6740: GO 6753
6742: POP
// tmp := 10 ; 2 :
6743: LD_ADDR_VAR 0 2
6747: PUSH
6748: LD_INT 10
6750: ST_TO_ADDR
6751: GO 6792
6753: LD_INT 2
6755: DOUBLE
6756: EQUAL
6757: IFTRUE 6761
6759: GO 6772
6761: POP
// tmp := 0 ; 7 :
6762: LD_ADDR_VAR 0 2
6766: PUSH
6767: LD_INT 0
6769: ST_TO_ADDR
6770: GO 6792
6772: LD_INT 7
6774: DOUBLE
6775: EQUAL
6776: IFTRUE 6780
6778: GO 6791
6780: POP
// tmp := 15 ; end ;
6781: LD_ADDR_VAR 0 2
6785: PUSH
6786: LD_INT 15
6788: ST_TO_ADDR
6789: GO 6792
6791: POP
// if i < chance_to_bomb + tmp then
6792: LD_VAR 0 1
6796: PUSH
6797: LD_EXP 5
6801: PUSH
6802: LD_VAR 0 2
6806: PLUS
6807: LESS
6808: IFFALSE 6818
// ru_sib_bomb := true ;
6810: LD_ADDR_EXP 4
6814: PUSH
6815: LD_INT 1
6817: ST_TO_ADDR
// end ;
6818: PPOPN 2
6820: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_weapon , us_siberium_rocket ] ] ) do
6821: LD_INT 22
6823: PUSH
6824: LD_OWVAR 2
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: PUSH
6833: LD_INT 34
6835: PUSH
6836: LD_INT 8
6838: PUSH
6839: EMPTY
6840: LIST
6841: LIST
6842: PUSH
6843: EMPTY
6844: LIST
6845: LIST
6846: PPUSH
6847: CALL_OW 69
6851: IFFALSE 6864
6853: GO 6855
6855: DISABLE
// begin ru_sib_bomb := true ;
6856: LD_ADDR_EXP 4
6860: PUSH
6861: LD_INT 1
6863: ST_TO_ADDR
// end ;
6864: END
// every 10 10$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) do var i ;
6865: LD_INT 22
6867: PUSH
6868: LD_INT 3
6870: PUSH
6871: EMPTY
6872: LIST
6873: LIST
6874: PUSH
6875: LD_INT 30
6877: PUSH
6878: LD_INT 34
6880: PUSH
6881: EMPTY
6882: LIST
6883: LIST
6884: PUSH
6885: EMPTY
6886: LIST
6887: LIST
6888: PPUSH
6889: CALL_OW 69
6893: IFFALSE 6992
6895: GO 6897
6897: DISABLE
6898: LD_INT 0
6900: PPUSH
// begin enable ;
6901: ENABLE
// i := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
6902: LD_ADDR_VAR 0 1
6906: PUSH
6907: LD_INT 1
6909: PUSH
6910: LD_INT 3
6912: PUSH
6913: EMPTY
6914: LIST
6915: LIST
6916: PUSH
6917: LD_INT 1
6919: PPUSH
6920: LD_INT 2
6922: PPUSH
6923: CALL_OW 12
6927: ARRAY
6928: ST_TO_ADDR
// TeleportExit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] , ru_teleport_exit [ i ] , ru_teleport_exit [ i + 1 ] ) ;
6929: LD_INT 22
6931: PUSH
6932: LD_INT 3
6934: PUSH
6935: EMPTY
6936: LIST
6937: LIST
6938: PUSH
6939: LD_INT 30
6941: PUSH
6942: LD_INT 34
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: PUSH
6949: EMPTY
6950: LIST
6951: LIST
6952: PPUSH
6953: CALL_OW 69
6957: PUSH
6958: LD_INT 1
6960: ARRAY
6961: PPUSH
6962: LD_EXP 36
6966: PUSH
6967: LD_VAR 0 1
6971: ARRAY
6972: PPUSH
6973: LD_EXP 36
6977: PUSH
6978: LD_VAR 0 1
6982: PUSH
6983: LD_INT 1
6985: PLUS
6986: ARRAY
6987: PPUSH
6988: CALL_OW 243
// end ;
6992: PPOPN 1
6994: END
// every 12 12$00 trigger tick >= [ 28 28$00 , 25 25$00 ] [ Difficulty - 1 ] and Difficulty > 1 and FilterAllUnits ( [ f_side , 3 ] ) do var i , un , tmp , p , path ;
6995: LD_OWVAR 1
6999: PUSH
7000: LD_INT 58800
7002: PUSH
7003: LD_INT 52500
7005: PUSH
7006: EMPTY
7007: LIST
7008: LIST
7009: PUSH
7010: LD_OWVAR 67
7014: PUSH
7015: LD_INT 1
7017: MINUS
7018: ARRAY
7019: GREATEREQUAL
7020: PUSH
7021: LD_OWVAR 67
7025: PUSH
7026: LD_INT 1
7028: GREATER
7029: AND
7030: PUSH
7031: LD_INT 22
7033: PUSH
7034: LD_INT 3
7036: PUSH
7037: EMPTY
7038: LIST
7039: LIST
7040: PPUSH
7041: CALL_OW 69
7045: AND
7046: IFFALSE 7468
7048: GO 7050
7050: DISABLE
7051: LD_INT 0
7053: PPUSH
7054: PPUSH
7055: PPUSH
7056: PPUSH
7057: PPUSH
// begin enable ;
7058: ENABLE
// if tick > 60 60$00 then
7059: LD_OWVAR 1
7063: PUSH
7064: LD_INT 126000
7066: GREATER
7067: IFFALSE 7070
// disable ;
7069: DISABLE
// tmp := [ ] ;
7070: LD_ADDR_VAR 0 3
7074: PUSH
7075: EMPTY
7076: ST_TO_ADDR
// for i := 1 to 8 do
7077: LD_ADDR_VAR 0 1
7081: PUSH
7082: DOUBLE
7083: LD_INT 1
7085: DEC
7086: ST_TO_ADDR
7087: LD_INT 8
7089: PUSH
7090: FOR_TO
7091: IFFALSE 7250
// begin uc_side := 6 ;
7093: LD_ADDR_OWVAR 20
7097: PUSH
7098: LD_INT 6
7100: ST_TO_ADDR
// uc_nation := 3 ;
7101: LD_ADDR_OWVAR 21
7105: PUSH
7106: LD_INT 3
7108: ST_TO_ADDR
// vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod 3 + 1 ] ;
7109: LD_ADDR_OWVAR 37
7113: PUSH
7114: LD_INT 21
7116: PUSH
7117: LD_INT 23
7119: PUSH
7120: LD_INT 24
7122: PUSH
7123: EMPTY
7124: LIST
7125: LIST
7126: LIST
7127: PUSH
7128: LD_VAR 0 1
7132: PUSH
7133: LD_INT 3
7135: MOD
7136: PUSH
7137: LD_INT 1
7139: PLUS
7140: ARRAY
7141: ST_TO_ADDR
// vc_engine := engine_siberite ;
7142: LD_ADDR_OWVAR 39
7146: PUSH
7147: LD_INT 3
7149: ST_TO_ADDR
// vc_control := control_computer ;
7150: LD_ADDR_OWVAR 38
7154: PUSH
7155: LD_INT 3
7157: ST_TO_ADDR
// vc_weapon := [ ru_rocket_launcher , ru_flamethrower , ru_rocket ] [ i mod 3 + 1 ] ;
7158: LD_ADDR_OWVAR 40
7162: PUSH
7163: LD_INT 45
7165: PUSH
7166: LD_INT 93
7168: PUSH
7169: LD_INT 47
7171: PUSH
7172: EMPTY
7173: LIST
7174: LIST
7175: LIST
7176: PUSH
7177: LD_VAR 0 1
7181: PUSH
7182: LD_INT 3
7184: MOD
7185: PUSH
7186: LD_INT 1
7188: PLUS
7189: ARRAY
7190: ST_TO_ADDR
// un := CreateVehicle ;
7191: LD_ADDR_VAR 0 2
7195: PUSH
7196: CALL_OW 45
7200: ST_TO_ADDR
// SetDir ( un , 2 ) ;
7201: LD_VAR 0 2
7205: PPUSH
7206: LD_INT 2
7208: PPUSH
7209: CALL_OW 233
// PlaceUnitArea ( un , start_north , false ) ;
7213: LD_VAR 0 2
7217: PPUSH
7218: LD_INT 1
7220: PPUSH
7221: LD_INT 0
7223: PPUSH
7224: CALL_OW 49
// tmp := Join ( tmp , un ) ;
7228: LD_ADDR_VAR 0 3
7232: PUSH
7233: LD_VAR 0 3
7237: PPUSH
7238: LD_VAR 0 2
7242: PPUSH
7243: CALL 77204 0 2
7247: ST_TO_ADDR
// end ;
7248: GO 7090
7250: POP
7251: POP
// if FilterAllUnits ( [ [ f_side , your_side ] , [ f_distxy , 58 , 15 , 18 ] ] ) > 1 then
7252: LD_INT 22
7254: PUSH
7255: LD_OWVAR 2
7259: PUSH
7260: EMPTY
7261: LIST
7262: LIST
7263: PUSH
7264: LD_INT 92
7266: PUSH
7267: LD_INT 58
7269: PUSH
7270: LD_INT 15
7272: PUSH
7273: LD_INT 18
7275: PUSH
7276: EMPTY
7277: LIST
7278: LIST
7279: LIST
7280: LIST
7281: PUSH
7282: EMPTY
7283: LIST
7284: LIST
7285: PPUSH
7286: CALL_OW 69
7290: PUSH
7291: LD_INT 1
7293: GREATER
7294: IFFALSE 7306
// p := 2 else
7296: LD_ADDR_VAR 0 4
7300: PUSH
7301: LD_INT 2
7303: ST_TO_ADDR
7304: GO 7314
// p := 1 ;
7306: LD_ADDR_VAR 0 4
7310: PUSH
7311: LD_INT 1
7313: ST_TO_ADDR
// case p of 1 :
7314: LD_VAR 0 4
7318: PUSH
7319: LD_INT 1
7321: DOUBLE
7322: EQUAL
7323: IFTRUE 7327
7325: GO 7392
7327: POP
// path := [ [ 29 , 29 ] , [ 49 , 70 ] , [ 49 , 70 ] , [ 61 , 110 ] , [ 74 , 129 ] ] ; 2 :
7328: LD_ADDR_VAR 0 5
7332: PUSH
7333: LD_INT 29
7335: PUSH
7336: LD_INT 29
7338: PUSH
7339: EMPTY
7340: LIST
7341: LIST
7342: PUSH
7343: LD_INT 49
7345: PUSH
7346: LD_INT 70
7348: PUSH
7349: EMPTY
7350: LIST
7351: LIST
7352: PUSH
7353: LD_INT 49
7355: PUSH
7356: LD_INT 70
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: PUSH
7363: LD_INT 61
7365: PUSH
7366: LD_INT 110
7368: PUSH
7369: EMPTY
7370: LIST
7371: LIST
7372: PUSH
7373: LD_INT 74
7375: PUSH
7376: LD_INT 129
7378: PUSH
7379: EMPTY
7380: LIST
7381: LIST
7382: PUSH
7383: EMPTY
7384: LIST
7385: LIST
7386: LIST
7387: LIST
7388: LIST
7389: ST_TO_ADDR
7390: GO 7444
7392: LD_INT 2
7394: DOUBLE
7395: EQUAL
7396: IFTRUE 7400
7398: GO 7443
7400: POP
// path := [ [ 24 , 23 ] , [ 49 , 39 ] , [ 52 , 27 ] ] ; end ;
7401: LD_ADDR_VAR 0 5
7405: PUSH
7406: LD_INT 24
7408: PUSH
7409: LD_INT 23
7411: PUSH
7412: EMPTY
7413: LIST
7414: LIST
7415: PUSH
7416: LD_INT 49
7418: PUSH
7419: LD_INT 39
7421: PUSH
7422: EMPTY
7423: LIST
7424: LIST
7425: PUSH
7426: LD_INT 52
7428: PUSH
7429: LD_INT 27
7431: PUSH
7432: EMPTY
7433: LIST
7434: LIST
7435: PUSH
7436: EMPTY
7437: LIST
7438: LIST
7439: LIST
7440: ST_TO_ADDR
7441: GO 7444
7443: POP
// repeat wait ( 0 0$1 ) ;
7444: LD_INT 35
7446: PPUSH
7447: CALL_OW 67
// until not AgressiveMove ( tmp , path ) ;
7451: LD_VAR 0 3
7455: PPUSH
7456: LD_VAR 0 5
7460: PPUSH
7461: CALL 79808 0 2
7465: NOT
7466: IFFALSE 7444
// end ;
7468: PPOPN 5
7470: END
// every 30 30$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) do var ru_depot ;
7471: LD_INT 22
7473: PUSH
7474: LD_INT 3
7476: PUSH
7477: EMPTY
7478: LIST
7479: LIST
7480: PUSH
7481: LD_INT 30
7483: PUSH
7484: LD_INT 1
7486: PUSH
7487: EMPTY
7488: LIST
7489: LIST
7490: PUSH
7491: EMPTY
7492: LIST
7493: LIST
7494: PPUSH
7495: CALL_OW 69
7499: IFFALSE 7586
7501: GO 7503
7503: DISABLE
7504: LD_INT 0
7506: PPUSH
// begin enable ;
7507: ENABLE
// ru_depot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
7508: LD_ADDR_VAR 0 1
7512: PUSH
7513: LD_INT 22
7515: PUSH
7516: LD_INT 3
7518: PUSH
7519: EMPTY
7520: LIST
7521: LIST
7522: PUSH
7523: LD_INT 30
7525: PUSH
7526: LD_INT 1
7528: PUSH
7529: EMPTY
7530: LIST
7531: LIST
7532: PUSH
7533: EMPTY
7534: LIST
7535: LIST
7536: PPUSH
7537: CALL_OW 69
7541: PUSH
7542: LD_INT 1
7544: ARRAY
7545: ST_TO_ADDR
// AddResourceType ( GetBase ( ru_depot ) , mat_cans , 6000 ) ;
7546: LD_VAR 0 1
7550: PPUSH
7551: CALL_OW 274
7555: PPUSH
7556: LD_INT 1
7558: PPUSH
7559: LD_INT 6000
7561: PPUSH
7562: CALL_OW 276
// AddResourceType ( GetBase ( ru_depot ) , mat_oil , 600 ) ;
7566: LD_VAR 0 1
7570: PPUSH
7571: CALL_OW 274
7575: PPUSH
7576: LD_INT 2
7578: PPUSH
7579: LD_INT 600
7581: PPUSH
7582: CALL_OW 276
// end ;
7586: PPOPN 1
7588: END
// export function RussianAttack ( ) ; var path , units , p , i , teleport ; begin
7589: LD_INT 0
7591: PPUSH
7592: PPUSH
7593: PPUSH
7594: PPUSH
7595: PPUSH
7596: PPUSH
// units := ru_force ;
7597: LD_ADDR_VAR 0 3
7601: PUSH
7602: LD_EXP 29
7606: ST_TO_ADDR
// teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) ;
7607: LD_ADDR_VAR 0 6
7611: PUSH
7612: LD_INT 22
7614: PUSH
7615: LD_INT 3
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: PUSH
7622: LD_INT 30
7624: PUSH
7625: LD_INT 34
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: PUSH
7632: EMPTY
7633: LIST
7634: LIST
7635: PPUSH
7636: CALL_OW 69
7640: ST_TO_ADDR
// ru_force := [ ] ;
7641: LD_ADDR_EXP 29
7645: PUSH
7646: EMPTY
7647: ST_TO_ADDR
// if not teleport then
7648: LD_VAR 0 6
7652: NOT
7653: IFFALSE 7695
// begin for i in units do
7655: LD_ADDR_VAR 0 5
7659: PUSH
7660: LD_VAR 0 3
7664: PUSH
7665: FOR_IN
7666: IFFALSE 7691
// TeleportUnit ( i , 150 , 65 , 12 , true ) ;
7668: LD_VAR 0 5
7672: PPUSH
7673: LD_INT 150
7675: PPUSH
7676: LD_INT 65
7678: PPUSH
7679: LD_INT 12
7681: PPUSH
7682: LD_INT 1
7684: PPUSH
7685: CALL_OW 483
7689: GO 7665
7691: POP
7692: POP
// end else
7693: GO 7790
// begin repeat for i = 1 to units do
7695: LD_ADDR_VAR 0 5
7699: PUSH
7700: DOUBLE
7701: LD_INT 1
7703: DEC
7704: ST_TO_ADDR
7705: LD_VAR 0 3
7709: PUSH
7710: FOR_TO
7711: IFFALSE 7759
// if IsInArea ( units [ i ] , ru_base ) then
7713: LD_VAR 0 3
7717: PUSH
7718: LD_VAR 0 5
7722: ARRAY
7723: PPUSH
7724: LD_INT 9
7726: PPUSH
7727: CALL_OW 308
7731: IFFALSE 7757
// ComEnterUnit ( units [ i ] , teleport [ 1 ] ) ;
7733: LD_VAR 0 3
7737: PUSH
7738: LD_VAR 0 5
7742: ARRAY
7743: PPUSH
7744: LD_VAR 0 6
7748: PUSH
7749: LD_INT 1
7751: ARRAY
7752: PPUSH
7753: CALL_OW 120
7757: GO 7710
7759: POP
7760: POP
// wait ( 0 0$10 ) ;
7761: LD_INT 350
7763: PPUSH
7764: CALL_OW 67
// until not UnitFilter ( units , [ f_inarea , ru_base ] ) ;
7768: LD_VAR 0 3
7772: PPUSH
7773: LD_INT 95
7775: PUSH
7776: LD_INT 9
7778: PUSH
7779: EMPTY
7780: LIST
7781: LIST
7782: PPUSH
7783: CALL_OW 72
7787: NOT
7788: IFFALSE 7695
// end ; p := rand ( 1 , 2 ) ;
7790: LD_ADDR_VAR 0 4
7794: PUSH
7795: LD_INT 1
7797: PPUSH
7798: LD_INT 2
7800: PPUSH
7801: CALL_OW 12
7805: ST_TO_ADDR
// case p of 1 :
7806: LD_VAR 0 4
7810: PUSH
7811: LD_INT 1
7813: DOUBLE
7814: EQUAL
7815: IFTRUE 7819
7817: GO 7873
7819: POP
// path := [ [ 159 , 71 ] , [ 152 , 99 ] , [ 107 , 119 ] , [ 104 , 127 ] ] ; 2 :
7820: LD_ADDR_VAR 0 2
7824: PUSH
7825: LD_INT 159
7827: PUSH
7828: LD_INT 71
7830: PUSH
7831: EMPTY
7832: LIST
7833: LIST
7834: PUSH
7835: LD_INT 152
7837: PUSH
7838: LD_INT 99
7840: PUSH
7841: EMPTY
7842: LIST
7843: LIST
7844: PUSH
7845: LD_INT 107
7847: PUSH
7848: LD_INT 119
7850: PUSH
7851: EMPTY
7852: LIST
7853: LIST
7854: PUSH
7855: LD_INT 104
7857: PUSH
7858: LD_INT 127
7860: PUSH
7861: EMPTY
7862: LIST
7863: LIST
7864: PUSH
7865: EMPTY
7866: LIST
7867: LIST
7868: LIST
7869: LIST
7870: ST_TO_ADDR
7871: GO 7936
7873: LD_INT 2
7875: DOUBLE
7876: EQUAL
7877: IFTRUE 7881
7879: GO 7935
7881: POP
// path := [ [ 116 , 36 ] , [ 91 , 52 ] , [ 53 , 67 ] , [ 58 , 107 ] ] ; end ;
7882: LD_ADDR_VAR 0 2
7886: PUSH
7887: LD_INT 116
7889: PUSH
7890: LD_INT 36
7892: PUSH
7893: EMPTY
7894: LIST
7895: LIST
7896: PUSH
7897: LD_INT 91
7899: PUSH
7900: LD_INT 52
7902: PUSH
7903: EMPTY
7904: LIST
7905: LIST
7906: PUSH
7907: LD_INT 53
7909: PUSH
7910: LD_INT 67
7912: PUSH
7913: EMPTY
7914: LIST
7915: LIST
7916: PUSH
7917: LD_INT 58
7919: PUSH
7920: LD_INT 107
7922: PUSH
7923: EMPTY
7924: LIST
7925: LIST
7926: PUSH
7927: EMPTY
7928: LIST
7929: LIST
7930: LIST
7931: LIST
7932: ST_TO_ADDR
7933: GO 7936
7935: POP
// if FilterAllUnits ( [ f_side , 7 ] ) and p > 1 then
7936: LD_INT 22
7938: PUSH
7939: LD_INT 7
7941: PUSH
7942: EMPTY
7943: LIST
7944: LIST
7945: PPUSH
7946: CALL_OW 69
7950: PUSH
7951: LD_VAR 0 4
7955: PUSH
7956: LD_INT 1
7958: GREATER
7959: AND
7960: IFFALSE 7991
// path := [ [ 116 , 36 ] , [ 91 , 52 ] ] ;
7962: LD_ADDR_VAR 0 2
7966: PUSH
7967: LD_INT 116
7969: PUSH
7970: LD_INT 36
7972: PUSH
7973: EMPTY
7974: LIST
7975: LIST
7976: PUSH
7977: LD_INT 91
7979: PUSH
7980: LD_INT 52
7982: PUSH
7983: EMPTY
7984: LIST
7985: LIST
7986: PUSH
7987: EMPTY
7988: LIST
7989: LIST
7990: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7991: LD_INT 35
7993: PPUSH
7994: CALL_OW 67
// until not AgressiveMove ( units , path ) ;
7998: LD_VAR 0 3
8002: PPUSH
8003: LD_VAR 0 2
8007: PPUSH
8008: CALL 79808 0 2
8012: NOT
8013: IFFALSE 7991
// end ; end_of_file
8015: LD_VAR 0 1
8019: RET
// export function RemoveLegion ; var i ; begin
8020: LD_INT 0
8022: PPUSH
8023: PPUSH
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
8024: LD_ADDR_VAR 0 2
8028: PUSH
8029: LD_INT 22
8031: PUSH
8032: LD_INT 8
8034: PUSH
8035: EMPTY
8036: LIST
8037: LIST
8038: PPUSH
8039: CALL_OW 69
8043: PUSH
8044: FOR_IN
8045: IFFALSE 8058
// RemoveUnit ( i ) ;
8047: LD_VAR 0 2
8051: PPUSH
8052: CALL_OW 64
8056: GO 8044
8058: POP
8059: POP
// end ;
8060: LD_VAR 0 1
8064: RET
// export legion_force , legion_skill , legion_mines , legion_blist , legion_vlist , legion_enemy ; export function PrepareLegion ; var un , i , tmp , veh , l_depot , p , l_factory , l_lab , l_towers ; begin
8065: LD_INT 0
8067: PPUSH
8068: PPUSH
8069: PPUSH
8070: PPUSH
8071: PPUSH
8072: PPUSH
8073: PPUSH
8074: PPUSH
8075: PPUSH
8076: PPUSH
// l_depot := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
8077: LD_ADDR_VAR 0 6
8081: PUSH
8082: LD_INT 22
8084: PUSH
8085: LD_INT 8
8087: PUSH
8088: EMPTY
8089: LIST
8090: LIST
8091: PUSH
8092: LD_INT 30
8094: PUSH
8095: LD_INT 1
8097: PUSH
8098: EMPTY
8099: LIST
8100: LIST
8101: PUSH
8102: EMPTY
8103: LIST
8104: LIST
8105: PPUSH
8106: CALL_OW 69
8110: PUSH
8111: LD_INT 1
8113: ARRAY
8114: ST_TO_ADDR
// l_factory := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
8115: LD_ADDR_VAR 0 8
8119: PUSH
8120: LD_INT 22
8122: PUSH
8123: LD_INT 8
8125: PUSH
8126: EMPTY
8127: LIST
8128: LIST
8129: PUSH
8130: LD_INT 30
8132: PUSH
8133: LD_INT 3
8135: PUSH
8136: EMPTY
8137: LIST
8138: LIST
8139: PUSH
8140: EMPTY
8141: LIST
8142: LIST
8143: PPUSH
8144: CALL_OW 69
8148: PUSH
8149: LD_INT 1
8151: ARRAY
8152: ST_TO_ADDR
// l_lab := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ;
8153: LD_ADDR_VAR 0 9
8157: PUSH
8158: LD_INT 22
8160: PUSH
8161: LD_INT 8
8163: PUSH
8164: EMPTY
8165: LIST
8166: LIST
8167: PUSH
8168: LD_INT 2
8170: PUSH
8171: LD_INT 30
8173: PUSH
8174: LD_INT 6
8176: PUSH
8177: EMPTY
8178: LIST
8179: LIST
8180: PUSH
8181: LD_INT 30
8183: PUSH
8184: LD_INT 8
8186: PUSH
8187: EMPTY
8188: LIST
8189: LIST
8190: PUSH
8191: EMPTY
8192: LIST
8193: LIST
8194: LIST
8195: PUSH
8196: EMPTY
8197: LIST
8198: LIST
8199: PPUSH
8200: CALL_OW 69
8204: PUSH
8205: LD_INT 1
8207: ARRAY
8208: ST_TO_ADDR
// l_towers := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) ;
8209: LD_ADDR_VAR 0 10
8213: PUSH
8214: LD_INT 22
8216: PUSH
8217: LD_INT 8
8219: PUSH
8220: EMPTY
8221: LIST
8222: LIST
8223: PUSH
8224: LD_INT 30
8226: PUSH
8227: LD_INT 32
8229: PUSH
8230: EMPTY
8231: LIST
8232: LIST
8233: PUSH
8234: EMPTY
8235: LIST
8236: LIST
8237: PPUSH
8238: CALL_OW 69
8242: ST_TO_ADDR
// uc_side := 8 ;
8243: LD_ADDR_OWVAR 20
8247: PUSH
8248: LD_INT 8
8250: ST_TO_ADDR
// uc_nation := nation_arabian ;
8251: LD_ADDR_OWVAR 21
8255: PUSH
8256: LD_INT 2
8258: ST_TO_ADDR
// legion_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
8259: LD_ADDR_EXP 38
8263: PUSH
8264: LD_INT 5
8266: PUSH
8267: LD_INT 6
8269: PUSH
8270: LD_INT 7
8272: PUSH
8273: EMPTY
8274: LIST
8275: LIST
8276: LIST
8277: PUSH
8278: LD_OWVAR 67
8282: ARRAY
8283: ST_TO_ADDR
// legion_blist := [ ] ;
8284: LD_ADDR_EXP 40
8288: PUSH
8289: EMPTY
8290: ST_TO_ADDR
// legion_vlist := [ ] ;
8291: LD_ADDR_EXP 41
8295: PUSH
8296: EMPTY
8297: ST_TO_ADDR
// legion_force := [ ] ;
8298: LD_ADDR_EXP 37
8302: PUSH
8303: EMPTY
8304: ST_TO_ADDR
// legion_enemy := - 1 ;
8305: LD_ADDR_EXP 42
8309: PUSH
8310: LD_INT 1
8312: NEG
8313: ST_TO_ADDR
// SetResourceType ( GetBase ( l_depot ) , mat_cans , 10000 ) ;
8314: LD_VAR 0 6
8318: PPUSH
8319: CALL_OW 274
8323: PPUSH
8324: LD_INT 1
8326: PPUSH
8327: LD_INT 10000
8329: PPUSH
8330: CALL_OW 277
// SetResourceType ( GetBase ( l_depot ) , 3 , 1000 ) ;
8334: LD_VAR 0 6
8338: PPUSH
8339: CALL_OW 274
8343: PPUSH
8344: LD_INT 3
8346: PPUSH
8347: LD_INT 1000
8349: PPUSH
8350: CALL_OW 277
// for i = 1 to l_towers do
8354: LD_ADDR_VAR 0 3
8358: PUSH
8359: DOUBLE
8360: LD_INT 1
8362: DEC
8363: ST_TO_ADDR
8364: LD_VAR 0 10
8368: PUSH
8369: FOR_TO
8370: IFFALSE 8419
// begin PrepareHuman ( false , 1 , legion_skill ) ;
8372: LD_INT 0
8374: PPUSH
8375: LD_INT 1
8377: PPUSH
8378: LD_EXP 38
8382: PPUSH
8383: CALL_OW 380
// un := CreateHuman ;
8387: LD_ADDR_VAR 0 2
8391: PUSH
8392: CALL_OW 44
8396: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_towers [ i ] ) ;
8397: LD_VAR 0 2
8401: PPUSH
8402: LD_VAR 0 10
8406: PUSH
8407: LD_VAR 0 3
8411: ARRAY
8412: PPUSH
8413: CALL_OW 52
// end ;
8417: GO 8369
8419: POP
8420: POP
// for i = 1 to 4 do
8421: LD_ADDR_VAR 0 3
8425: PUSH
8426: DOUBLE
8427: LD_INT 1
8429: DEC
8430: ST_TO_ADDR
8431: LD_INT 4
8433: PUSH
8434: FOR_TO
8435: IFFALSE 8528
// for p = 1 to 2 do
8437: LD_ADDR_VAR 0 7
8441: PUSH
8442: DOUBLE
8443: LD_INT 1
8445: DEC
8446: ST_TO_ADDR
8447: LD_INT 2
8449: PUSH
8450: FOR_TO
8451: IFFALSE 8524
// begin PrepareHuman ( false , class_mortar , legion_skill ) ;
8453: LD_INT 0
8455: PPUSH
8456: LD_INT 8
8458: PPUSH
8459: LD_EXP 38
8463: PPUSH
8464: CALL_OW 380
// un := CreateHuman ;
8468: LD_ADDR_VAR 0 2
8472: PUSH
8473: CALL_OW 44
8477: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_barracks ] ] ) [ p ] ) ;
8478: LD_VAR 0 2
8482: PPUSH
8483: LD_INT 22
8485: PUSH
8486: LD_INT 8
8488: PUSH
8489: EMPTY
8490: LIST
8491: LIST
8492: PUSH
8493: LD_INT 30
8495: PUSH
8496: LD_INT 5
8498: PUSH
8499: EMPTY
8500: LIST
8501: LIST
8502: PUSH
8503: EMPTY
8504: LIST
8505: LIST
8506: PPUSH
8507: CALL_OW 69
8511: PUSH
8512: LD_VAR 0 7
8516: ARRAY
8517: PPUSH
8518: CALL_OW 52
// end ;
8522: GO 8450
8524: POP
8525: POP
8526: GO 8434
8528: POP
8529: POP
// for i = 1 to 4 do
8530: LD_ADDR_VAR 0 3
8534: PUSH
8535: DOUBLE
8536: LD_INT 1
8538: DEC
8539: ST_TO_ADDR
8540: LD_INT 4
8542: PUSH
8543: FOR_TO
8544: IFFALSE 8587
// begin PrepareHuman ( false , 4 , legion_skill ) ;
8546: LD_INT 0
8548: PPUSH
8549: LD_INT 4
8551: PPUSH
8552: LD_EXP 38
8556: PPUSH
8557: CALL_OW 380
// un := CreateHuman ;
8561: LD_ADDR_VAR 0 2
8565: PUSH
8566: CALL_OW 44
8570: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_lab ) ;
8571: LD_VAR 0 2
8575: PPUSH
8576: LD_VAR 0 9
8580: PPUSH
8581: CALL_OW 52
// end ;
8585: GO 8543
8587: POP
8588: POP
// for i = 1 to 4 do
8589: LD_ADDR_VAR 0 3
8593: PUSH
8594: DOUBLE
8595: LD_INT 1
8597: DEC
8598: ST_TO_ADDR
8599: LD_INT 4
8601: PUSH
8602: FOR_TO
8603: IFFALSE 8646
// begin PrepareHuman ( false , 3 , legion_skill ) ;
8605: LD_INT 0
8607: PPUSH
8608: LD_INT 3
8610: PPUSH
8611: LD_EXP 38
8615: PPUSH
8616: CALL_OW 380
// un := CreateHuman ;
8620: LD_ADDR_VAR 0 2
8624: PUSH
8625: CALL_OW 44
8629: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_factory ) ;
8630: LD_VAR 0 2
8634: PPUSH
8635: LD_VAR 0 8
8639: PPUSH
8640: CALL_OW 52
// end ;
8644: GO 8602
8646: POP
8647: POP
// for i = 1 to 3 do
8648: LD_ADDR_VAR 0 3
8652: PUSH
8653: DOUBLE
8654: LD_INT 1
8656: DEC
8657: ST_TO_ADDR
8658: LD_INT 3
8660: PUSH
8661: FOR_TO
8662: IFFALSE 8705
// begin PrepareHuman ( false , 2 , legion_skill ) ;
8664: LD_INT 0
8666: PPUSH
8667: LD_INT 2
8669: PPUSH
8670: LD_EXP 38
8674: PPUSH
8675: CALL_OW 380
// un := CreateHuman ;
8679: LD_ADDR_VAR 0 2
8683: PUSH
8684: CALL_OW 44
8688: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_depot ) ;
8689: LD_VAR 0 2
8693: PPUSH
8694: LD_VAR 0 6
8698: PPUSH
8699: CALL_OW 52
// end ;
8703: GO 8661
8705: POP
8706: POP
// for i = 1 to 3 do
8707: LD_ADDR_VAR 0 3
8711: PUSH
8712: DOUBLE
8713: LD_INT 1
8715: DEC
8716: ST_TO_ADDR
8717: LD_INT 3
8719: PUSH
8720: FOR_TO
8721: IFFALSE 8831
// begin vc_chassis := ar_half_tracked ;
8723: LD_ADDR_OWVAR 37
8727: PUSH
8728: LD_INT 14
8730: ST_TO_ADDR
// vc_engine := engine_siberite ;
8731: LD_ADDR_OWVAR 39
8735: PUSH
8736: LD_INT 3
8738: ST_TO_ADDR
// vc_control := control_manual ;
8739: LD_ADDR_OWVAR 38
8743: PUSH
8744: LD_INT 1
8746: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
8747: LD_ADDR_OWVAR 40
8751: PUSH
8752: LD_INT 31
8754: ST_TO_ADDR
// veh := CreateVehicle ;
8755: LD_ADDR_VAR 0 5
8759: PUSH
8760: CALL_OW 45
8764: ST_TO_ADDR
// PlaceUnitXYR ( veh , 212 , 135 , 5 , false ) ;
8765: LD_VAR 0 5
8769: PPUSH
8770: LD_INT 212
8772: PPUSH
8773: LD_INT 135
8775: PPUSH
8776: LD_INT 5
8778: PPUSH
8779: LD_INT 0
8781: PPUSH
8782: CALL_OW 50
// PrepareHuman ( false , 3 , legion_skill + 1 ) ;
8786: LD_INT 0
8788: PPUSH
8789: LD_INT 3
8791: PPUSH
8792: LD_EXP 38
8796: PUSH
8797: LD_INT 1
8799: PLUS
8800: PPUSH
8801: CALL_OW 380
// un := CreateHuman ;
8805: LD_ADDR_VAR 0 2
8809: PUSH
8810: CALL_OW 44
8814: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8815: LD_VAR 0 2
8819: PPUSH
8820: LD_VAR 0 5
8824: PPUSH
8825: CALL_OW 52
// end ;
8829: GO 8720
8831: POP
8832: POP
// PrepareSoldier ( false , 8 ) ;
8833: LD_INT 0
8835: PPUSH
8836: LD_INT 8
8838: PPUSH
8839: CALL_OW 381
// hc_class := class_sniper ;
8843: LD_ADDR_OWVAR 28
8847: PUSH
8848: LD_INT 5
8850: ST_TO_ADDR
// un := CreateHuman ;
8851: LD_ADDR_VAR 0 2
8855: PUSH
8856: CALL_OW 44
8860: ST_TO_ADDR
// SetDir ( un , 4 ) ;
8861: LD_VAR 0 2
8865: PPUSH
8866: LD_INT 4
8868: PPUSH
8869: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( 136 , 92 ) ) ;
8873: LD_VAR 0 2
8877: PPUSH
8878: LD_INT 136
8880: PPUSH
8881: LD_INT 92
8883: PPUSH
8884: CALL_OW 428
8888: PPUSH
8889: CALL_OW 52
// PlaceSeeing ( 198 , 94 , 8 , 10 ) ;
8893: LD_INT 198
8895: PPUSH
8896: LD_INT 94
8898: PPUSH
8899: LD_INT 8
8901: PPUSH
8902: LD_INT 10
8904: PPUSH
8905: CALL_OW 330
// PlaceSeeing ( 167 , 130 , 8 , 10 ) ;
8909: LD_INT 167
8911: PPUSH
8912: LD_INT 130
8914: PPUSH
8915: LD_INT 8
8917: PPUSH
8918: LD_INT 10
8920: PPUSH
8921: CALL_OW 330
// tmp := AreaToList ( legion_mines_area , 0 ) ;
8925: LD_ADDR_VAR 0 4
8929: PUSH
8930: LD_INT 24
8932: PPUSH
8933: LD_INT 0
8935: PPUSH
8936: CALL_OW 517
8940: ST_TO_ADDR
// legion_mines := [ ] ;
8941: LD_ADDR_EXP 39
8945: PUSH
8946: EMPTY
8947: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
8948: LD_ADDR_VAR 0 3
8952: PUSH
8953: DOUBLE
8954: LD_INT 1
8956: DEC
8957: ST_TO_ADDR
8958: LD_VAR 0 4
8962: PUSH
8963: LD_INT 1
8965: ARRAY
8966: PUSH
8967: FOR_TO
8968: IFFALSE 9070
// begin PlaceMine ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 8 , 0 ) ;
8970: LD_VAR 0 4
8974: PUSH
8975: LD_INT 1
8977: ARRAY
8978: PUSH
8979: LD_VAR 0 3
8983: ARRAY
8984: PPUSH
8985: LD_VAR 0 4
8989: PUSH
8990: LD_INT 2
8992: ARRAY
8993: PUSH
8994: LD_VAR 0 3
8998: ARRAY
8999: PPUSH
9000: LD_INT 8
9002: PPUSH
9003: LD_INT 0
9005: PPUSH
9006: CALL_OW 454
// legion_mines := Replace ( legion_mines , legion_mines + 1 , [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ) ;
9010: LD_ADDR_EXP 39
9014: PUSH
9015: LD_EXP 39
9019: PPUSH
9020: LD_EXP 39
9024: PUSH
9025: LD_INT 1
9027: PLUS
9028: PPUSH
9029: LD_VAR 0 4
9033: PUSH
9034: LD_INT 1
9036: ARRAY
9037: PUSH
9038: LD_VAR 0 3
9042: ARRAY
9043: PUSH
9044: LD_VAR 0 4
9048: PUSH
9049: LD_INT 2
9051: ARRAY
9052: PUSH
9053: LD_VAR 0 3
9057: ARRAY
9058: PUSH
9059: EMPTY
9060: LIST
9061: LIST
9062: PPUSH
9063: CALL_OW 1
9067: ST_TO_ADDR
// end ;
9068: GO 8967
9070: POP
9071: POP
// legion_vlist := [ ar_medium_trike , 3 , control_remote , ar_cargo_bay ] ;
9072: LD_ADDR_EXP 41
9076: PUSH
9077: LD_INT 13
9079: PUSH
9080: LD_INT 3
9082: PUSH
9083: LD_INT 2
9085: PUSH
9086: LD_INT 32
9088: PUSH
9089: EMPTY
9090: LIST
9091: LIST
9092: LIST
9093: LIST
9094: ST_TO_ADDR
// end ;
9095: LD_VAR 0 1
9099: RET
// every 0 0$1 trigger legion_mines and FilterUnitsInArea ( legion_mines_area , [ f_side , your_side ] ) do var i , un ;
9100: LD_EXP 39
9104: PUSH
9105: LD_INT 24
9107: PPUSH
9108: LD_INT 22
9110: PUSH
9111: LD_OWVAR 2
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: PPUSH
9120: CALL_OW 70
9124: AND
9125: IFFALSE 9292
9127: GO 9129
9129: DISABLE
9130: LD_INT 0
9132: PPUSH
9133: PPUSH
// begin enable ;
9134: ENABLE
// for i := legion_mines downto 1 do
9135: LD_ADDR_VAR 0 1
9139: PUSH
9140: DOUBLE
9141: LD_EXP 39
9145: INC
9146: ST_TO_ADDR
9147: LD_INT 1
9149: PUSH
9150: FOR_DOWNTO
9151: IFFALSE 9290
// begin un := HexInfo ( legion_mines [ i ] [ 1 ] , legion_mines [ i ] [ 2 ] ) ;
9153: LD_ADDR_VAR 0 2
9157: PUSH
9158: LD_EXP 39
9162: PUSH
9163: LD_VAR 0 1
9167: ARRAY
9168: PUSH
9169: LD_INT 1
9171: ARRAY
9172: PPUSH
9173: LD_EXP 39
9177: PUSH
9178: LD_VAR 0 1
9182: ARRAY
9183: PUSH
9184: LD_INT 2
9186: ARRAY
9187: PPUSH
9188: CALL_OW 428
9192: ST_TO_ADDR
// if un then
9193: LD_VAR 0 2
9197: IFFALSE 9288
// if GetSide ( un ) = legion_enemy then
9199: LD_VAR 0 2
9203: PPUSH
9204: CALL_OW 255
9208: PUSH
9209: LD_EXP 42
9213: EQUAL
9214: IFFALSE 9288
// begin LaunchMineAtPos ( legion_mines [ i ] [ 1 ] , legion_mines [ i ] [ 2 ] , 8 ) ;
9216: LD_EXP 39
9220: PUSH
9221: LD_VAR 0 1
9225: ARRAY
9226: PUSH
9227: LD_INT 1
9229: ARRAY
9230: PPUSH
9231: LD_EXP 39
9235: PUSH
9236: LD_VAR 0 1
9240: ARRAY
9241: PUSH
9242: LD_INT 2
9244: ARRAY
9245: PPUSH
9246: LD_INT 8
9248: PPUSH
9249: CALL_OW 456
// legion_mines := Delete ( legion_mines , i ) ;
9253: LD_ADDR_EXP 39
9257: PUSH
9258: LD_EXP 39
9262: PPUSH
9263: LD_VAR 0 1
9267: PPUSH
9268: CALL_OW 3
9272: ST_TO_ADDR
// if not mine_vulc then
9273: LD_EXP 13
9277: NOT
9278: IFFALSE 9288
// mine_vulc := true ;
9280: LD_ADDR_EXP 13
9284: PUSH
9285: LD_INT 1
9287: ST_TO_ADDR
// end ; end ;
9288: GO 9150
9290: POP
9291: POP
// end ;
9292: PPOPN 2
9294: END
// every 0 0$1 trigger tick >= [ 25 25$00 , 22 22$00 , 20 20$00 ] [ Difficulty ] do var artifact , un ;
9295: LD_OWVAR 1
9299: PUSH
9300: LD_INT 52500
9302: PUSH
9303: LD_INT 46200
9305: PUSH
9306: LD_INT 42000
9308: PUSH
9309: EMPTY
9310: LIST
9311: LIST
9312: LIST
9313: PUSH
9314: LD_OWVAR 67
9318: ARRAY
9319: GREATEREQUAL
9320: IFFALSE 9498
9322: GO 9324
9324: DISABLE
9325: LD_INT 0
9327: PPUSH
9328: PPUSH
// begin artifact := FindArtifact ( 1 ) ;
9329: LD_ADDR_VAR 0 1
9333: PUSH
9334: LD_INT 1
9336: PPUSH
9337: CALL_OW 469
9341: ST_TO_ADDR
// if artifact [ 1 ] = 112 and artifact [ 2 ] = 67 then
9342: LD_VAR 0 1
9346: PUSH
9347: LD_INT 1
9349: ARRAY
9350: PUSH
9351: LD_INT 112
9353: EQUAL
9354: PUSH
9355: LD_VAR 0 1
9359: PUSH
9360: LD_INT 2
9362: ARRAY
9363: PUSH
9364: LD_INT 67
9366: EQUAL
9367: AND
9368: IFFALSE 9498
// begin un := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 2 ] ] ) ;
9370: LD_ADDR_VAR 0 2
9374: PUSH
9375: LD_INT 22
9377: PUSH
9378: LD_INT 8
9380: PUSH
9381: EMPTY
9382: LIST
9383: LIST
9384: PUSH
9385: LD_INT 25
9387: PUSH
9388: LD_INT 2
9390: PUSH
9391: EMPTY
9392: LIST
9393: LIST
9394: PUSH
9395: EMPTY
9396: LIST
9397: LIST
9398: PPUSH
9399: CALL_OW 69
9403: ST_TO_ADDR
// if not un then
9404: LD_VAR 0 2
9408: NOT
9409: IFFALSE 9413
// exit ;
9411: GO 9498
// un := un [ 1 ] ;
9413: LD_ADDR_VAR 0 2
9417: PUSH
9418: LD_VAR 0 2
9422: PUSH
9423: LD_INT 1
9425: ARRAY
9426: ST_TO_ADDR
// if IsInUnit ( un ) then
9427: LD_VAR 0 2
9431: PPUSH
9432: CALL_OW 310
9436: IFFALSE 9447
// ComExitBuilding ( un ) ;
9438: LD_VAR 0 2
9442: PPUSH
9443: CALL_OW 122
// AddComCollect ( un , artifact [ 1 ] , artifact [ 2 ] ) ;
9447: LD_VAR 0 2
9451: PPUSH
9452: LD_VAR 0 1
9456: PUSH
9457: LD_INT 1
9459: ARRAY
9460: PPUSH
9461: LD_VAR 0 1
9465: PUSH
9466: LD_INT 2
9468: ARRAY
9469: PPUSH
9470: CALL_OW 177
// AddComMoveXY ( un , 207 , 123 ) ;
9474: LD_VAR 0 2
9478: PPUSH
9479: LD_INT 207
9481: PPUSH
9482: LD_INT 123
9484: PPUSH
9485: CALL_OW 171
// AddComUnload ( un ) ;
9489: LD_VAR 0 2
9493: PPUSH
9494: CALL_OW 219
// end ; end ;
9498: PPOPN 2
9500: END
// every 0 0$02 trigger FilterAllUnits ( [ f_side , 8 ] ) > 0 do var un , i , tmp , veh , b , p , cr , l_depot , l_factory , l_lab , l_towers , l_sib , l_sci , l_mech , l_sold , l_eng , l_cargo ;
9501: LD_INT 22
9503: PUSH
9504: LD_INT 8
9506: PUSH
9507: EMPTY
9508: LIST
9509: LIST
9510: PPUSH
9511: CALL_OW 69
9515: PUSH
9516: LD_INT 0
9518: GREATER
9519: IFFALSE 11105
9521: GO 9523
9523: DISABLE
9524: LD_INT 0
9526: PPUSH
9527: PPUSH
9528: PPUSH
9529: PPUSH
9530: PPUSH
9531: PPUSH
9532: PPUSH
9533: PPUSH
9534: PPUSH
9535: PPUSH
9536: PPUSH
9537: PPUSH
9538: PPUSH
9539: PPUSH
9540: PPUSH
9541: PPUSH
9542: PPUSH
// begin enable ;
9543: ENABLE
// l_depot := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
9544: LD_ADDR_VAR 0 8
9548: PUSH
9549: LD_INT 22
9551: PUSH
9552: LD_INT 8
9554: PUSH
9555: EMPTY
9556: LIST
9557: LIST
9558: PUSH
9559: LD_INT 30
9561: PUSH
9562: LD_INT 1
9564: PUSH
9565: EMPTY
9566: LIST
9567: LIST
9568: PUSH
9569: EMPTY
9570: LIST
9571: LIST
9572: PPUSH
9573: CALL_OW 69
9577: PUSH
9578: LD_INT 1
9580: ARRAY
9581: ST_TO_ADDR
// l_factory := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
9582: LD_ADDR_VAR 0 9
9586: PUSH
9587: LD_INT 22
9589: PUSH
9590: LD_INT 8
9592: PUSH
9593: EMPTY
9594: LIST
9595: LIST
9596: PUSH
9597: LD_INT 30
9599: PUSH
9600: LD_INT 3
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: PUSH
9607: EMPTY
9608: LIST
9609: LIST
9610: PPUSH
9611: CALL_OW 69
9615: PUSH
9616: LD_INT 1
9618: ARRAY
9619: ST_TO_ADDR
// l_lab := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ;
9620: LD_ADDR_VAR 0 10
9624: PUSH
9625: LD_INT 22
9627: PUSH
9628: LD_INT 8
9630: PUSH
9631: EMPTY
9632: LIST
9633: LIST
9634: PUSH
9635: LD_INT 2
9637: PUSH
9638: LD_INT 30
9640: PUSH
9641: LD_INT 6
9643: PUSH
9644: EMPTY
9645: LIST
9646: LIST
9647: PUSH
9648: LD_INT 30
9650: PUSH
9651: LD_INT 8
9653: PUSH
9654: EMPTY
9655: LIST
9656: LIST
9657: PUSH
9658: EMPTY
9659: LIST
9660: LIST
9661: LIST
9662: PUSH
9663: EMPTY
9664: LIST
9665: LIST
9666: PPUSH
9667: CALL_OW 69
9671: PUSH
9672: LD_INT 1
9674: ARRAY
9675: ST_TO_ADDR
// l_towers := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) ;
9676: LD_ADDR_VAR 0 11
9680: PUSH
9681: LD_INT 22
9683: PUSH
9684: LD_INT 8
9686: PUSH
9687: EMPTY
9688: LIST
9689: LIST
9690: PUSH
9691: LD_INT 30
9693: PUSH
9694: LD_INT 32
9696: PUSH
9697: EMPTY
9698: LIST
9699: LIST
9700: PUSH
9701: EMPTY
9702: LIST
9703: LIST
9704: PPUSH
9705: CALL_OW 69
9709: ST_TO_ADDR
// l_eng := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 2 ] ] ) ;
9710: LD_ADDR_VAR 0 16
9714: PUSH
9715: LD_INT 22
9717: PUSH
9718: LD_INT 8
9720: PUSH
9721: EMPTY
9722: LIST
9723: LIST
9724: PUSH
9725: LD_INT 25
9727: PUSH
9728: LD_INT 2
9730: PUSH
9731: EMPTY
9732: LIST
9733: LIST
9734: PUSH
9735: EMPTY
9736: LIST
9737: LIST
9738: PPUSH
9739: CALL_OW 69
9743: ST_TO_ADDR
// l_sold := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 1 ] ] ) ;
9744: LD_ADDR_VAR 0 15
9748: PUSH
9749: LD_INT 22
9751: PUSH
9752: LD_INT 8
9754: PUSH
9755: EMPTY
9756: LIST
9757: LIST
9758: PUSH
9759: LD_INT 25
9761: PUSH
9762: LD_INT 1
9764: PUSH
9765: EMPTY
9766: LIST
9767: LIST
9768: PUSH
9769: EMPTY
9770: LIST
9771: LIST
9772: PPUSH
9773: CALL_OW 69
9777: ST_TO_ADDR
// l_mech := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 3 ] ] ) ;
9778: LD_ADDR_VAR 0 14
9782: PUSH
9783: LD_INT 22
9785: PUSH
9786: LD_INT 8
9788: PUSH
9789: EMPTY
9790: LIST
9791: LIST
9792: PUSH
9793: LD_INT 25
9795: PUSH
9796: LD_INT 3
9798: PUSH
9799: EMPTY
9800: LIST
9801: LIST
9802: PUSH
9803: EMPTY
9804: LIST
9805: LIST
9806: PPUSH
9807: CALL_OW 69
9811: ST_TO_ADDR
// l_sci := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 4 ] ] ) ;
9812: LD_ADDR_VAR 0 13
9816: PUSH
9817: LD_INT 22
9819: PUSH
9820: LD_INT 8
9822: PUSH
9823: EMPTY
9824: LIST
9825: LIST
9826: PUSH
9827: LD_INT 25
9829: PUSH
9830: LD_INT 4
9832: PUSH
9833: EMPTY
9834: LIST
9835: LIST
9836: PUSH
9837: EMPTY
9838: LIST
9839: LIST
9840: PPUSH
9841: CALL_OW 69
9845: ST_TO_ADDR
// if l_eng then
9846: LD_VAR 0 16
9850: IFFALSE 10268
// begin b := FilterUnitsInArea ( legion_base_area , [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) ;
9852: LD_ADDR_VAR 0 5
9856: PUSH
9857: LD_INT 25
9859: PPUSH
9860: LD_INT 22
9862: PUSH
9863: LD_INT 8
9865: PUSH
9866: EMPTY
9867: LIST
9868: LIST
9869: PUSH
9870: LD_INT 21
9872: PUSH
9873: LD_INT 3
9875: PUSH
9876: EMPTY
9877: LIST
9878: LIST
9879: PUSH
9880: EMPTY
9881: LIST
9882: LIST
9883: PPUSH
9884: CALL_OW 70
9888: ST_TO_ADDR
// if UnitFilter ( b , [ f_not , [ f_lives , 1000 ] ] ) > 0 then
9889: LD_VAR 0 5
9893: PPUSH
9894: LD_INT 3
9896: PUSH
9897: LD_INT 24
9899: PUSH
9900: LD_INT 1000
9902: PUSH
9903: EMPTY
9904: LIST
9905: LIST
9906: PUSH
9907: EMPTY
9908: LIST
9909: LIST
9910: PPUSH
9911: CALL_OW 72
9915: PUSH
9916: LD_INT 0
9918: GREATER
9919: IFFALSE 10053
// begin tmp := UnitFilter ( b , [ f_not , [ f_lives , 1000 ] ] ) ;
9921: LD_ADDR_VAR 0 3
9925: PUSH
9926: LD_VAR 0 5
9930: PPUSH
9931: LD_INT 3
9933: PUSH
9934: LD_INT 24
9936: PUSH
9937: LD_INT 1000
9939: PUSH
9940: EMPTY
9941: LIST
9942: LIST
9943: PUSH
9944: EMPTY
9945: LIST
9946: LIST
9947: PPUSH
9948: CALL_OW 72
9952: ST_TO_ADDR
// for i = 1 to l_eng do
9953: LD_ADDR_VAR 0 2
9957: PUSH
9958: DOUBLE
9959: LD_INT 1
9961: DEC
9962: ST_TO_ADDR
9963: LD_VAR 0 16
9967: PUSH
9968: FOR_TO
9969: IFFALSE 10049
// if IsInUnit ( l_eng [ i ] ) then
9971: LD_VAR 0 16
9975: PUSH
9976: LD_VAR 0 2
9980: ARRAY
9981: PPUSH
9982: CALL_OW 310
9986: IFFALSE 10005
// ComExitBuilding ( l_eng [ i ] ) else
9988: LD_VAR 0 16
9992: PUSH
9993: LD_VAR 0 2
9997: ARRAY
9998: PPUSH
9999: CALL_OW 122
10003: GO 10047
// if not HasTask ( l_eng [ i ] ) then
10005: LD_VAR 0 16
10009: PUSH
10010: LD_VAR 0 2
10014: ARRAY
10015: PPUSH
10016: CALL_OW 314
10020: NOT
10021: IFFALSE 10047
// ComRepairBuilding ( l_eng [ i ] , tmp [ 1 ] ) ;
10023: LD_VAR 0 16
10027: PUSH
10028: LD_VAR 0 2
10032: ARRAY
10033: PPUSH
10034: LD_VAR 0 3
10038: PUSH
10039: LD_INT 1
10041: ARRAY
10042: PPUSH
10043: CALL_OW 130
10047: GO 9968
10049: POP
10050: POP
// end else
10051: GO 10268
// begin if legion_blist > 0 then
10053: LD_EXP 40
10057: PUSH
10058: LD_INT 0
10060: GREATER
10061: IFFALSE 10190
// begin for i = 1 to l_eng do
10063: LD_ADDR_VAR 0 2
10067: PUSH
10068: DOUBLE
10069: LD_INT 1
10071: DEC
10072: ST_TO_ADDR
10073: LD_VAR 0 16
10077: PUSH
10078: FOR_TO
10079: IFFALSE 10186
// if IsInUnit ( l_eng [ i ] ) then
10081: LD_VAR 0 16
10085: PUSH
10086: LD_VAR 0 2
10090: ARRAY
10091: PPUSH
10092: CALL_OW 310
10096: IFFALSE 10115
// ComExitBuilding ( l_eng [ i ] ) else
10098: LD_VAR 0 16
10102: PUSH
10103: LD_VAR 0 2
10107: ARRAY
10108: PPUSH
10109: CALL_OW 122
10113: GO 10184
// if not HasTask ( l_eng [ i ] ) then
10115: LD_VAR 0 16
10119: PUSH
10120: LD_VAR 0 2
10124: ARRAY
10125: PPUSH
10126: CALL_OW 314
10130: NOT
10131: IFFALSE 10184
// ComBuild ( l_eng [ i ] , legion_blist [ 1 ] , legion_blist [ 2 ] , legion_blist [ 3 ] , legion_blist [ 4 ] ) ;
10133: LD_VAR 0 16
10137: PUSH
10138: LD_VAR 0 2
10142: ARRAY
10143: PPUSH
10144: LD_EXP 40
10148: PUSH
10149: LD_INT 1
10151: ARRAY
10152: PPUSH
10153: LD_EXP 40
10157: PUSH
10158: LD_INT 2
10160: ARRAY
10161: PPUSH
10162: LD_EXP 40
10166: PUSH
10167: LD_INT 3
10169: ARRAY
10170: PPUSH
10171: LD_EXP 40
10175: PUSH
10176: LD_INT 4
10178: ARRAY
10179: PPUSH
10180: CALL_OW 145
10184: GO 10078
10186: POP
10187: POP
// end else
10188: GO 10268
// for i = 1 to l_eng do
10190: LD_ADDR_VAR 0 2
10194: PUSH
10195: DOUBLE
10196: LD_INT 1
10198: DEC
10199: ST_TO_ADDR
10200: LD_VAR 0 16
10204: PUSH
10205: FOR_TO
10206: IFFALSE 10266
// if not IsInUnit ( l_eng [ i ] ) and not HasTask ( l_eng [ i ] ) then
10208: LD_VAR 0 16
10212: PUSH
10213: LD_VAR 0 2
10217: ARRAY
10218: PPUSH
10219: CALL_OW 310
10223: NOT
10224: PUSH
10225: LD_VAR 0 16
10229: PUSH
10230: LD_VAR 0 2
10234: ARRAY
10235: PPUSH
10236: CALL_OW 314
10240: NOT
10241: AND
10242: IFFALSE 10264
// ComEnterUnit ( l_eng [ i ] , l_depot ) ;
10244: LD_VAR 0 16
10248: PUSH
10249: LD_VAR 0 2
10253: ARRAY
10254: PPUSH
10255: LD_VAR 0 8
10259: PPUSH
10260: CALL_OW 120
10264: GO 10205
10266: POP
10267: POP
// end ; end ; if l_factory then
10268: LD_VAR 0 9
10272: IFFALSE 10672
// begin if FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) > 0 then
10274: LD_INT 22
10276: PUSH
10277: LD_INT 8
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: PUSH
10284: LD_INT 33
10286: PUSH
10287: LD_INT 2
10289: PUSH
10290: EMPTY
10291: LIST
10292: LIST
10293: PUSH
10294: LD_INT 3
10296: PUSH
10297: LD_INT 61
10299: PUSH
10300: EMPTY
10301: LIST
10302: PUSH
10303: EMPTY
10304: LIST
10305: LIST
10306: PUSH
10307: EMPTY
10308: LIST
10309: LIST
10310: LIST
10311: PPUSH
10312: CALL_OW 69
10316: PUSH
10317: LD_INT 0
10319: GREATER
10320: PUSH
10321: LD_INT 22
10323: PUSH
10324: LD_INT 8
10326: PUSH
10327: EMPTY
10328: LIST
10329: LIST
10330: PUSH
10331: LD_INT 34
10333: PUSH
10334: LD_INT 31
10336: PUSH
10337: EMPTY
10338: LIST
10339: LIST
10340: PUSH
10341: EMPTY
10342: LIST
10343: LIST
10344: PPUSH
10345: CALL_OW 69
10349: PUSH
10350: LD_INT 0
10352: GREATER
10353: AND
10354: IFFALSE 10474
// ComLinkTo ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) [ 1 ] , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) [ Rand ( 1 , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) ) ] ) ;
10356: LD_INT 22
10358: PUSH
10359: LD_INT 8
10361: PUSH
10362: EMPTY
10363: LIST
10364: LIST
10365: PUSH
10366: LD_INT 33
10368: PUSH
10369: LD_INT 2
10371: PUSH
10372: EMPTY
10373: LIST
10374: LIST
10375: PUSH
10376: LD_INT 3
10378: PUSH
10379: LD_INT 61
10381: PUSH
10382: EMPTY
10383: LIST
10384: PUSH
10385: EMPTY
10386: LIST
10387: LIST
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: LIST
10393: PPUSH
10394: CALL_OW 69
10398: PUSH
10399: LD_INT 1
10401: ARRAY
10402: PPUSH
10403: LD_INT 22
10405: PUSH
10406: LD_INT 8
10408: PUSH
10409: EMPTY
10410: LIST
10411: LIST
10412: PUSH
10413: LD_INT 34
10415: PUSH
10416: LD_INT 31
10418: PUSH
10419: EMPTY
10420: LIST
10421: LIST
10422: PUSH
10423: EMPTY
10424: LIST
10425: LIST
10426: PPUSH
10427: CALL_OW 69
10431: PUSH
10432: LD_INT 1
10434: PPUSH
10435: LD_INT 22
10437: PUSH
10438: LD_INT 8
10440: PUSH
10441: EMPTY
10442: LIST
10443: LIST
10444: PUSH
10445: LD_INT 34
10447: PUSH
10448: LD_INT 31
10450: PUSH
10451: EMPTY
10452: LIST
10453: LIST
10454: PUSH
10455: EMPTY
10456: LIST
10457: LIST
10458: PPUSH
10459: CALL_OW 69
10463: PPUSH
10464: CALL_OW 12
10468: ARRAY
10469: PPUSH
10470: CALL_OW 135
// if legion_vlist > 0 and BuildingStatus ( l_factory ) = bs_idle then
10474: LD_EXP 41
10478: PUSH
10479: LD_INT 0
10481: GREATER
10482: PUSH
10483: LD_VAR 0 9
10487: PPUSH
10488: CALL_OW 461
10492: PUSH
10493: LD_INT 2
10495: EQUAL
10496: AND
10497: IFFALSE 10582
// begin ComConstruct ( l_factory , legion_vlist [ 1 ] , legion_vlist [ 2 ] , legion_vlist [ 3 ] , legion_vlist [ 4 ] ) ;
10499: LD_VAR 0 9
10503: PPUSH
10504: LD_EXP 41
10508: PUSH
10509: LD_INT 1
10511: ARRAY
10512: PPUSH
10513: LD_EXP 41
10517: PUSH
10518: LD_INT 2
10520: ARRAY
10521: PPUSH
10522: LD_EXP 41
10526: PUSH
10527: LD_INT 3
10529: ARRAY
10530: PPUSH
10531: LD_EXP 41
10535: PUSH
10536: LD_INT 4
10538: ARRAY
10539: PPUSH
10540: CALL_OW 125
// for i = 1 to 4 do
10544: LD_ADDR_VAR 0 2
10548: PUSH
10549: DOUBLE
10550: LD_INT 1
10552: DEC
10553: ST_TO_ADDR
10554: LD_INT 4
10556: PUSH
10557: FOR_TO
10558: IFFALSE 10580
// legion_vlist := Delete ( legion_vlist , 1 ) ;
10560: LD_ADDR_EXP 41
10564: PUSH
10565: LD_EXP 41
10569: PPUSH
10570: LD_INT 1
10572: PPUSH
10573: CALL_OW 3
10577: ST_TO_ADDR
10578: GO 10557
10580: POP
10581: POP
// end ; if UnitFilter ( l_towers , [ f_bweapon , 0 ] ) > 0 and BuildingStatus ( l_factory ) = bs_idle then
10582: LD_VAR 0 11
10586: PPUSH
10587: LD_INT 35
10589: PUSH
10590: LD_INT 0
10592: PUSH
10593: EMPTY
10594: LIST
10595: LIST
10596: PPUSH
10597: CALL_OW 72
10601: PUSH
10602: LD_INT 0
10604: GREATER
10605: PUSH
10606: LD_VAR 0 9
10610: PPUSH
10611: CALL_OW 461
10615: PUSH
10616: LD_INT 2
10618: EQUAL
10619: AND
10620: IFFALSE 10672
// ComPlaceWeapon ( UnitFilter ( l_towers , [ f_bweapon , 0 ] ) [ 1 ] , [ ar_rocket_launcher , ar_gun ] [ Rand ( 1 , 2 ) ] ) ;
10622: LD_VAR 0 11
10626: PPUSH
10627: LD_INT 35
10629: PUSH
10630: LD_INT 0
10632: PUSH
10633: EMPTY
10634: LIST
10635: LIST
10636: PPUSH
10637: CALL_OW 72
10641: PUSH
10642: LD_INT 1
10644: ARRAY
10645: PPUSH
10646: LD_INT 28
10648: PUSH
10649: LD_INT 27
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: PUSH
10656: LD_INT 1
10658: PPUSH
10659: LD_INT 2
10661: PPUSH
10662: CALL_OW 12
10666: ARRAY
10667: PPUSH
10668: CALL_OW 148
// end ; if legion_enemy > 0 then
10672: LD_EXP 42
10676: PUSH
10677: LD_INT 0
10679: GREATER
10680: IFFALSE 10963
// begin if tick mod 11 11$00 = 0 then
10682: LD_OWVAR 1
10686: PUSH
10687: LD_INT 23100
10689: MOD
10690: PUSH
10691: LD_INT 0
10693: EQUAL
10694: IFFALSE 10944
// begin legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
10696: LD_ADDR_EXP 41
10700: PUSH
10701: LD_EXP 41
10705: PUSH
10706: LD_INT 13
10708: PUSH
10709: LD_INT 1
10711: PUSH
10712: LD_INT 2
10714: PUSH
10715: EMPTY
10716: LIST
10717: LIST
10718: LIST
10719: ADD
10720: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
10721: LD_ADDR_EXP 41
10725: PUSH
10726: LD_EXP 41
10730: PUSH
10731: LD_INT 28
10733: PUSH
10734: LD_INT 27
10736: PUSH
10737: LD_INT 29
10739: PUSH
10740: EMPTY
10741: LIST
10742: LIST
10743: LIST
10744: PUSH
10745: LD_INT 1
10747: PPUSH
10748: LD_INT 3
10750: PPUSH
10751: CALL_OW 12
10755: ARRAY
10756: ADD
10757: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
10758: LD_ADDR_EXP 41
10762: PUSH
10763: LD_EXP 41
10767: PUSH
10768: LD_INT 13
10770: PUSH
10771: LD_INT 1
10773: PUSH
10774: LD_INT 2
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: LIST
10781: ADD
10782: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
10783: LD_ADDR_EXP 41
10787: PUSH
10788: LD_EXP 41
10792: PUSH
10793: LD_INT 28
10795: PUSH
10796: LD_INT 27
10798: PUSH
10799: LD_INT 29
10801: PUSH
10802: EMPTY
10803: LIST
10804: LIST
10805: LIST
10806: PUSH
10807: LD_INT 1
10809: PPUSH
10810: LD_INT 3
10812: PPUSH
10813: CALL_OW 12
10817: ARRAY
10818: ADD
10819: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
10820: LD_ADDR_EXP 41
10824: PUSH
10825: LD_EXP 41
10829: PUSH
10830: LD_INT 13
10832: PUSH
10833: LD_INT 1
10835: PUSH
10836: LD_INT 2
10838: PUSH
10839: EMPTY
10840: LIST
10841: LIST
10842: LIST
10843: ADD
10844: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_mortar , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
10845: LD_ADDR_EXP 41
10849: PUSH
10850: LD_EXP 41
10854: PUSH
10855: LD_INT 28
10857: PUSH
10858: LD_INT 92
10860: PUSH
10861: LD_INT 29
10863: PUSH
10864: EMPTY
10865: LIST
10866: LIST
10867: LIST
10868: PUSH
10869: LD_INT 1
10871: PPUSH
10872: LD_INT 3
10874: PPUSH
10875: CALL_OW 12
10879: ARRAY
10880: ADD
10881: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
10882: LD_ADDR_EXP 41
10886: PUSH
10887: LD_EXP 41
10891: PUSH
10892: LD_INT 13
10894: PUSH
10895: LD_INT 1
10897: PUSH
10898: LD_INT 2
10900: PUSH
10901: EMPTY
10902: LIST
10903: LIST
10904: LIST
10905: ADD
10906: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
10907: LD_ADDR_EXP 41
10911: PUSH
10912: LD_EXP 41
10916: PUSH
10917: LD_INT 28
10919: PUSH
10920: LD_INT 27
10922: PUSH
10923: LD_INT 29
10925: PUSH
10926: EMPTY
10927: LIST
10928: LIST
10929: LIST
10930: PUSH
10931: LD_INT 1
10933: PPUSH
10934: LD_INT 3
10936: PPUSH
10937: CALL_OW 12
10941: ARRAY
10942: ADD
10943: ST_TO_ADDR
// end ; if legion_force >= 8 then
10944: LD_EXP 37
10948: PUSH
10949: LD_INT 8
10951: GREATEREQUAL
10952: IFFALSE 10963
// RaiseSailEvent ( event_legion_attack ) ;
10954: LD_EXP 21
10958: PPUSH
10959: CALL_OW 427
// end ; if FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_cargo_bay ] ] ) then
10963: LD_INT 22
10965: PUSH
10966: LD_INT 8
10968: PUSH
10969: EMPTY
10970: LIST
10971: LIST
10972: PUSH
10973: LD_INT 34
10975: PUSH
10976: LD_INT 32
10978: PUSH
10979: EMPTY
10980: LIST
10981: LIST
10982: PUSH
10983: EMPTY
10984: LIST
10985: LIST
10986: PPUSH
10987: CALL_OW 69
10991: IFFALSE 11105
// begin if l_cargo = false then
10993: LD_VAR 0 17
10997: PUSH
10998: LD_INT 0
11000: EQUAL
11001: IFFALSE 11037
// l_cargo := FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_cargo_bay ] ] ) ;
11003: LD_ADDR_VAR 0 17
11007: PUSH
11008: LD_INT 22
11010: PUSH
11011: LD_INT 8
11013: PUSH
11014: EMPTY
11015: LIST
11016: LIST
11017: PUSH
11018: LD_INT 34
11020: PUSH
11021: LD_INT 32
11023: PUSH
11024: EMPTY
11025: LIST
11026: LIST
11027: PUSH
11028: EMPTY
11029: LIST
11030: LIST
11031: PPUSH
11032: CALL_OW 69
11036: ST_TO_ADDR
// if l_cargo then
11037: LD_VAR 0 17
11041: IFFALSE 11105
// begin cr := GetListOfCratesInArea ( legion_crates ) ;
11043: LD_ADDR_VAR 0 7
11047: PUSH
11048: LD_INT 14
11050: PPUSH
11051: CALL_OW 435
11055: ST_TO_ADDR
// if cr > 0 then
11056: LD_VAR 0 7
11060: PUSH
11061: LD_INT 0
11063: GREATER
11064: IFFALSE 11105
// if not HasTask ( l_cargo ) then
11066: LD_VAR 0 17
11070: PPUSH
11071: CALL_OW 314
11075: NOT
11076: IFFALSE 11105
// ComCollect ( l_cargo , cr [ 1 ] , cr [ 2 ] ) ;
11078: LD_VAR 0 17
11082: PPUSH
11083: LD_VAR 0 7
11087: PUSH
11088: LD_INT 1
11090: ARRAY
11091: PPUSH
11092: LD_VAR 0 7
11096: PUSH
11097: LD_INT 2
11099: ARRAY
11100: PPUSH
11101: CALL_OW 117
// end ; end ; end ;
11105: PPOPN 17
11107: END
// every 9 9$00 trigger difficulty > 1 do var i , sci , sib , p ;
11108: LD_OWVAR 67
11112: PUSH
11113: LD_INT 1
11115: GREATER
11116: IFFALSE 11321
11118: GO 11120
11120: DISABLE
11121: LD_INT 0
11123: PPUSH
11124: PPUSH
11125: PPUSH
11126: PPUSH
// begin Wait ( Rand ( 0 0$01 , 6 6$01 ) ) ;
11127: LD_INT 35
11129: PPUSH
11130: LD_INT 12635
11132: PPUSH
11133: CALL_OW 12
11137: PPUSH
11138: CALL_OW 67
// sci := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 4 ] ] ) ;
11142: LD_ADDR_VAR 0 2
11146: PUSH
11147: LD_INT 22
11149: PUSH
11150: LD_INT 8
11152: PUSH
11153: EMPTY
11154: LIST
11155: LIST
11156: PUSH
11157: LD_INT 25
11159: PUSH
11160: LD_INT 4
11162: PUSH
11163: EMPTY
11164: LIST
11165: LIST
11166: PUSH
11167: EMPTY
11168: LIST
11169: LIST
11170: PPUSH
11171: CALL_OW 69
11175: ST_TO_ADDR
// p := 1 ;
11176: LD_ADDR_VAR 0 4
11180: PUSH
11181: LD_INT 1
11183: ST_TO_ADDR
// sib := [ 116 , 139 , 69 , 13 ] ;
11184: LD_ADDR_VAR 0 3
11188: PUSH
11189: LD_INT 116
11191: PUSH
11192: LD_INT 139
11194: PUSH
11195: LD_INT 69
11197: PUSH
11198: LD_INT 13
11200: PUSH
11201: EMPTY
11202: LIST
11203: LIST
11204: LIST
11205: LIST
11206: ST_TO_ADDR
// for i = 1 to 2 do
11207: LD_ADDR_VAR 0 1
11211: PUSH
11212: DOUBLE
11213: LD_INT 1
11215: DEC
11216: ST_TO_ADDR
11217: LD_INT 2
11219: PUSH
11220: FOR_TO
11221: IFFALSE 11319
// begin if IsInUnit ( sci [ i ] ) then
11223: LD_VAR 0 2
11227: PUSH
11228: LD_VAR 0 1
11232: ARRAY
11233: PPUSH
11234: CALL_OW 310
11238: IFFALSE 11255
// ComExitBuilding ( sci [ i ] ) ;
11240: LD_VAR 0 2
11244: PUSH
11245: LD_VAR 0 1
11249: ARRAY
11250: PPUSH
11251: CALL_OW 122
// Wait ( 0 0$03 ) ;
11255: LD_INT 105
11257: PPUSH
11258: CALL_OW 67
// ComContaminate ( sci [ i ] , sib [ p ] , sib [ p + 1 ] ) ;
11262: LD_VAR 0 2
11266: PUSH
11267: LD_VAR 0 1
11271: ARRAY
11272: PPUSH
11273: LD_VAR 0 3
11277: PUSH
11278: LD_VAR 0 4
11282: ARRAY
11283: PPUSH
11284: LD_VAR 0 3
11288: PUSH
11289: LD_VAR 0 4
11293: PUSH
11294: LD_INT 1
11296: PLUS
11297: ARRAY
11298: PPUSH
11299: CALL_OW 158
// p := p + 2 ;
11303: LD_ADDR_VAR 0 4
11307: PUSH
11308: LD_VAR 0 4
11312: PUSH
11313: LD_INT 2
11315: PLUS
11316: ST_TO_ADDR
// end ;
11317: GO 11220
11319: POP
11320: POP
// end ;
11321: PPOPN 4
11323: END
// every 3 3$30 trigger GetListOfCratesInArea ( legion_crates ) < 20 do
11324: LD_INT 14
11326: PPUSH
11327: CALL_OW 435
11331: PUSH
11332: LD_INT 20
11334: LESS
11335: IFFALSE 11362
11337: GO 11339
11339: DISABLE
// begin enable ;
11340: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , legion_crates , true ) ;
11341: LD_INT 1
11343: PPUSH
11344: LD_INT 5
11346: PPUSH
11347: CALL_OW 12
11351: PPUSH
11352: LD_INT 14
11354: PPUSH
11355: LD_INT 1
11357: PPUSH
11358: CALL_OW 55
// end ;
11362: END
// export function LegionAttack ( ) ; var path , units ; begin
11363: LD_INT 0
11365: PPUSH
11366: PPUSH
11367: PPUSH
// units := legion_force ;
11368: LD_ADDR_VAR 0 3
11372: PUSH
11373: LD_EXP 37
11377: ST_TO_ADDR
// legion_force := [ ] ;
11378: LD_ADDR_EXP 37
11382: PUSH
11383: EMPTY
11384: ST_TO_ADDR
// case legion_enemy of 1 :
11385: LD_EXP 42
11389: PUSH
11390: LD_INT 1
11392: DOUBLE
11393: EQUAL
11394: IFTRUE 11398
11396: GO 11441
11398: POP
// path := [ [ 174 , 135 ] , [ 153 , 146 ] , [ 118 , 122 ] ] ; 2 :
11399: LD_ADDR_VAR 0 2
11403: PUSH
11404: LD_INT 174
11406: PUSH
11407: LD_INT 135
11409: PUSH
11410: EMPTY
11411: LIST
11412: LIST
11413: PUSH
11414: LD_INT 153
11416: PUSH
11417: LD_INT 146
11419: PUSH
11420: EMPTY
11421: LIST
11422: LIST
11423: PUSH
11424: LD_INT 118
11426: PUSH
11427: LD_INT 122
11429: PUSH
11430: EMPTY
11431: LIST
11432: LIST
11433: PUSH
11434: EMPTY
11435: LIST
11436: LIST
11437: LIST
11438: ST_TO_ADDR
11439: GO 11544
11441: LD_INT 2
11443: DOUBLE
11444: EQUAL
11445: IFTRUE 11449
11447: GO 11492
11449: POP
// path := [ [ 164 , 73 ] , [ 130 , 48 ] , [ 96 , 48 ] ] ; 7 :
11450: LD_ADDR_VAR 0 2
11454: PUSH
11455: LD_INT 164
11457: PUSH
11458: LD_INT 73
11460: PUSH
11461: EMPTY
11462: LIST
11463: LIST
11464: PUSH
11465: LD_INT 130
11467: PUSH
11468: LD_INT 48
11470: PUSH
11471: EMPTY
11472: LIST
11473: LIST
11474: PUSH
11475: LD_INT 96
11477: PUSH
11478: LD_INT 48
11480: PUSH
11481: EMPTY
11482: LIST
11483: LIST
11484: PUSH
11485: EMPTY
11486: LIST
11487: LIST
11488: LIST
11489: ST_TO_ADDR
11490: GO 11544
11492: LD_INT 7
11494: DOUBLE
11495: EQUAL
11496: IFTRUE 11500
11498: GO 11543
11500: POP
// path := [ [ 174 , 135 ] , [ 153 , 146 ] , [ 118 , 122 ] ] ; end ;
11501: LD_ADDR_VAR 0 2
11505: PUSH
11506: LD_INT 174
11508: PUSH
11509: LD_INT 135
11511: PUSH
11512: EMPTY
11513: LIST
11514: LIST
11515: PUSH
11516: LD_INT 153
11518: PUSH
11519: LD_INT 146
11521: PUSH
11522: EMPTY
11523: LIST
11524: LIST
11525: PUSH
11526: LD_INT 118
11528: PUSH
11529: LD_INT 122
11531: PUSH
11532: EMPTY
11533: LIST
11534: LIST
11535: PUSH
11536: EMPTY
11537: LIST
11538: LIST
11539: LIST
11540: ST_TO_ADDR
11541: GO 11544
11543: POP
// repeat wait ( 0 0$1 ) ;
11544: LD_INT 35
11546: PPUSH
11547: CALL_OW 67
// until not AgressiveMove ( units , path ) ;
11551: LD_VAR 0 3
11555: PPUSH
11556: LD_VAR 0 2
11560: PPUSH
11561: CALL 79808 0 2
11565: NOT
11566: IFFALSE 11544
// end ; end_of_file
11568: LD_VAR 0 1
11572: RET
// export function Action ; var un , gamemode , speaker ; begin
11573: LD_INT 0
11575: PPUSH
11576: PPUSH
11577: PPUSH
11578: PPUSH
// if debug then
11579: LD_EXP 15
11583: IFFALSE 11610
// begin Difficulty := 2 ;
11585: LD_ADDR_OWVAR 67
11589: PUSH
11590: LD_INT 2
11592: ST_TO_ADDR
// gamemode := 3 ;
11593: LD_ADDR_VAR 0 3
11597: PUSH
11598: LD_INT 3
11600: ST_TO_ADDR
// FogOff ( 7 ) ;
11601: LD_INT 7
11603: PPUSH
11604: CALL_OW 344
// end else
11608: GO 11636
// begin Difficulty := GetMultiplayerSetting ( 0 ) ;
11610: LD_ADDR_OWVAR 67
11614: PUSH
11615: LD_INT 0
11617: PPUSH
11618: CALL_OW 426
11622: ST_TO_ADDR
// gamemode := GetMultiplayerSetting ( 1 ) ;
11623: LD_ADDR_VAR 0 3
11627: PUSH
11628: LD_INT 1
11630: PPUSH
11631: CALL_OW 426
11635: ST_TO_ADDR
// end ; if gamemode = 1 then
11636: LD_VAR 0 3
11640: PUSH
11641: LD_INT 1
11643: EQUAL
11644: IFFALSE 11668
// begin your_side := 1 ;
11646: LD_ADDR_OWVAR 2
11650: PUSH
11651: LD_INT 1
11653: ST_TO_ADDR
// legion_enemy := 1 ;
11654: LD_ADDR_EXP 42
11658: PUSH
11659: LD_INT 1
11661: ST_TO_ADDR
// PrepareAmerican ;
11662: CALL 261 0 0
// end else
11666: GO 11720
// if gamemode = 2 then
11668: LD_VAR 0 3
11672: PUSH
11673: LD_INT 2
11675: EQUAL
11676: IFFALSE 11700
// begin your_side := 2 ;
11678: LD_ADDR_OWVAR 2
11682: PUSH
11683: LD_INT 2
11685: ST_TO_ADDR
// legion_enemy := 2 ;
11686: LD_ADDR_EXP 42
11690: PUSH
11691: LD_INT 2
11693: ST_TO_ADDR
// PrepareArabian ;
11694: CALL 18998 0 0
// end else
11698: GO 11720
// begin your_side := 7 ;
11700: LD_ADDR_OWVAR 2
11704: PUSH
11705: LD_INT 7
11707: ST_TO_ADDR
// legion_enemy := 7 ;
11708: LD_ADDR_EXP 42
11712: PUSH
11713: LD_INT 7
11715: ST_TO_ADDR
// PrepareAlliance ;
11716: CALL 16182 0 0
// end ; if your_side = 1 then
11720: LD_OWVAR 2
11724: PUSH
11725: LD_INT 1
11727: EQUAL
11728: IFFALSE 12304
// begin Query ( QVul4 ) ;
11730: LD_STRING QVul4
11732: PPUSH
11733: CALL_OW 97
// InGameOn ;
11737: CALL_OW 8
// PlaceSeeing ( 8 , 5 , 1 , 12 ) ;
11741: LD_INT 8
11743: PPUSH
11744: LD_INT 5
11746: PPUSH
11747: LD_INT 1
11749: PPUSH
11750: LD_INT 12
11752: PPUSH
11753: CALL_OW 330
// RemoveSeeing ( 8 , 5 , 1 ) ;
11757: LD_INT 8
11759: PPUSH
11760: LD_INT 5
11762: PPUSH
11763: LD_INT 1
11765: PPUSH
11766: CALL_OW 331
// PlaceSeeing ( 98 , 148 , 1 , 2 ) ;
11770: LD_INT 98
11772: PPUSH
11773: LD_INT 148
11775: PPUSH
11776: LD_INT 1
11778: PPUSH
11779: LD_INT 2
11781: PPUSH
11782: CALL_OW 330
// RemoveSeeing ( 98 , 148 , 1 ) ;
11786: LD_INT 98
11788: PPUSH
11789: LD_INT 148
11791: PPUSH
11792: LD_INT 1
11794: PPUSH
11795: CALL_OW 331
// CenterNowOnXY ( 8 , 5 ) ;
11799: LD_INT 8
11801: PPUSH
11802: LD_INT 5
11804: PPUSH
11805: CALL_OW 86
// uc_side := 4 ;
11809: LD_ADDR_OWVAR 20
11813: PUSH
11814: LD_INT 4
11816: ST_TO_ADDR
// uc_nation := 1 ;
11817: LD_ADDR_OWVAR 21
11821: PUSH
11822: LD_INT 1
11824: ST_TO_ADDR
// hc_importance := 0 ;
11825: LD_ADDR_OWVAR 32
11829: PUSH
11830: LD_INT 0
11832: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , us_skill ) ;
11833: LD_INT 1
11835: PPUSH
11836: LD_INT 3
11838: PPUSH
11839: LD_EXP 26
11843: PPUSH
11844: CALL_OW 380
// un := CreateHuman ;
11848: LD_ADDR_VAR 0 2
11852: PUSH
11853: CALL_OW 44
11857: ST_TO_ADDR
// PlaceUnitXY ( un , 19 , 23 , false ) ;
11858: LD_VAR 0 2
11862: PPUSH
11863: LD_INT 19
11865: PPUSH
11866: LD_INT 23
11868: PPUSH
11869: LD_INT 0
11871: PPUSH
11872: CALL_OW 48
// hc_name := Stuart Carey ;
11876: LD_ADDR_OWVAR 26
11880: PUSH
11881: LD_STRING Stuart Carey
11883: ST_TO_ADDR
// hc_class := 1 ;
11884: LD_ADDR_OWVAR 28
11888: PUSH
11889: LD_INT 1
11891: ST_TO_ADDR
// hc_gallery := vulcano ;
11892: LD_ADDR_OWVAR 33
11896: PUSH
11897: LD_STRING vulcano
11899: ST_TO_ADDR
// hc_face_number := 1 ;
11900: LD_ADDR_OWVAR 34
11904: PUSH
11905: LD_INT 1
11907: ST_TO_ADDR
// us_guy := CreateHuman ;
11908: LD_ADDR_EXP 27
11912: PUSH
11913: CALL_OW 44
11917: ST_TO_ADDR
// InitHc ;
11918: CALL_OW 19
// if rand ( 0 , 1 ) then
11922: LD_INT 0
11924: PPUSH
11925: LD_INT 1
11927: PPUSH
11928: CALL_OW 12
11932: IFFALSE 11949
// PrepareHuman ( sex_male , 3 , 6 ) else
11934: LD_INT 1
11936: PPUSH
11937: LD_INT 3
11939: PPUSH
11940: LD_INT 6
11942: PPUSH
11943: CALL_OW 380
11947: GO 11962
// PrepareHuman ( sex_female , 4 , 8 ) ;
11949: LD_INT 2
11951: PPUSH
11952: LD_INT 4
11954: PPUSH
11955: LD_INT 8
11957: PPUSH
11958: CALL_OW 380
// ComMoveXY ( un , 12 , 10 ) ;
11962: LD_VAR 0 2
11966: PPUSH
11967: LD_INT 12
11969: PPUSH
11970: LD_INT 10
11972: PPUSH
11973: CALL_OW 111
// ComTurnUnit ( us_commander , un ) ;
11977: LD_EXP 24
11981: PPUSH
11982: LD_VAR 0 2
11986: PPUSH
11987: CALL_OW 119
// repeat wait ( 0 0$3 ) ;
11991: LD_INT 105
11993: PPUSH
11994: CALL_OW 67
// until See ( 4 , us_commander ) or IsAt ( un , 12 , 10 ) ;
11998: LD_INT 4
12000: PPUSH
12001: LD_EXP 24
12005: PPUSH
12006: CALL_OW 292
12010: PUSH
12011: LD_VAR 0 2
12015: PPUSH
12016: LD_INT 12
12018: PPUSH
12019: LD_INT 10
12021: PPUSH
12022: CALL_OW 307
12026: OR
12027: IFFALSE 11991
// ComTurnUnit ( un , us_commander ) ;
12029: LD_VAR 0 2
12033: PPUSH
12034: LD_EXP 24
12038: PPUSH
12039: CALL_OW 119
// if GetSex ( un ) = sex_male then
12043: LD_VAR 0 2
12047: PPUSH
12048: CALL_OW 258
12052: PUSH
12053: LD_INT 1
12055: EQUAL
12056: IFFALSE 12139
// begin Say ( un , VD-un1 ) ;
12058: LD_VAR 0 2
12062: PPUSH
12063: LD_STRING VD-un1
12065: PPUSH
12066: CALL_OW 88
// Say ( us_commander , VDc-1 ) ;
12070: LD_EXP 24
12074: PPUSH
12075: LD_STRING VDc-1
12077: PPUSH
12078: CALL_OW 88
// Say ( un , VD-un2 ) ;
12082: LD_VAR 0 2
12086: PPUSH
12087: LD_STRING VD-un2
12089: PPUSH
12090: CALL_OW 88
// Say ( us_commander , VDc-2 ) ;
12094: LD_EXP 24
12098: PPUSH
12099: LD_STRING VDc-2
12101: PPUSH
12102: CALL_OW 88
// Say ( un , VD-un3 ) ;
12106: LD_VAR 0 2
12110: PPUSH
12111: LD_STRING VD-un3
12113: PPUSH
12114: CALL_OW 88
// wait ( 0 0$0.2 ) ;
12118: LD_INT 7
12120: PPUSH
12121: CALL_OW 67
// Say ( un , VD-un4 ) ;
12125: LD_VAR 0 2
12129: PPUSH
12130: LD_STRING VD-un4
12132: PPUSH
12133: CALL_OW 88
// end else
12137: GO 12218
// begin Say ( un , VD-unf1 ) ;
12139: LD_VAR 0 2
12143: PPUSH
12144: LD_STRING VD-unf1
12146: PPUSH
12147: CALL_OW 88
// Say ( us_commander , VDc-1 ) ;
12151: LD_EXP 24
12155: PPUSH
12156: LD_STRING VDc-1
12158: PPUSH
12159: CALL_OW 88
// Say ( un , VD-unf2 ) ;
12163: LD_VAR 0 2
12167: PPUSH
12168: LD_STRING VD-unf2
12170: PPUSH
12171: CALL_OW 88
// Say ( us_commander , VDc-2 ) ;
12175: LD_EXP 24
12179: PPUSH
12180: LD_STRING VDc-2
12182: PPUSH
12183: CALL_OW 88
// Say ( un , VD-unf3 ) ;
12187: LD_VAR 0 2
12191: PPUSH
12192: LD_STRING VD-unf3
12194: PPUSH
12195: CALL_OW 88
// wait ( 0 0$0.2 ) ;
12199: LD_INT 7
12201: PPUSH
12202: CALL_OW 67
// Say ( un , VD-unf4 ) ;
12206: LD_VAR 0 2
12210: PPUSH
12211: LD_STRING VD-unf4
12213: PPUSH
12214: CALL_OW 88
// end ; ComMoveXY ( un , 2 , 2 ) ;
12218: LD_VAR 0 2
12222: PPUSH
12223: LD_INT 2
12225: PPUSH
12226: LD_INT 2
12228: PPUSH
12229: CALL_OW 111
// Say ( us_commander , VDc-3 ) ;
12233: LD_EXP 24
12237: PPUSH
12238: LD_STRING VDc-3
12240: PPUSH
12241: CALL_OW 88
// InGameOff ;
12245: CALL_OW 9
// ChangeMissionObjectives ( CVulc1 ) ;
12249: LD_STRING CVulc1
12251: PPUSH
12252: CALL_OW 337
// repeat Wait ( 0 0$01 ) ;
12256: LD_INT 35
12258: PPUSH
12259: CALL_OW 67
// until GetX ( un ) = 2 and GetY ( un ) = 2 ;
12263: LD_VAR 0 2
12267: PPUSH
12268: CALL_OW 250
12272: PUSH
12273: LD_INT 2
12275: EQUAL
12276: PUSH
12277: LD_VAR 0 2
12281: PPUSH
12282: CALL_OW 251
12286: PUSH
12287: LD_INT 2
12289: EQUAL
12290: AND
12291: IFFALSE 12256
// RemoveUnit ( un ) ;
12293: LD_VAR 0 2
12297: PPUSH
12298: CALL_OW 64
// end else
12302: GO 12681
// if your_side = 2 then
12304: LD_OWVAR 2
12308: PUSH
12309: LD_INT 2
12311: EQUAL
12312: IFFALSE 12528
// begin CenterNowOnUnits ( player_commander ) ;
12314: LD_EXP 11
12318: PPUSH
12319: CALL_OW 87
// speaker := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff ar_commander ;
12323: LD_ADDR_VAR 0 4
12327: PUSH
12328: LD_INT 22
12330: PUSH
12331: LD_INT 2
12333: PUSH
12334: EMPTY
12335: LIST
12336: LIST
12337: PUSH
12338: LD_INT 21
12340: PUSH
12341: LD_INT 1
12343: PUSH
12344: EMPTY
12345: LIST
12346: LIST
12347: PUSH
12348: EMPTY
12349: LIST
12350: LIST
12351: PPUSH
12352: CALL_OW 69
12356: PUSH
12357: LD_EXP 57
12361: DIFF
12362: ST_TO_ADDR
// if speaker then
12363: LD_VAR 0 4
12367: IFFALSE 12519
// begin InGameOn ;
12369: CALL_OW 8
// Say ( ar_commander , VSd-1 ) ;
12373: LD_EXP 57
12377: PPUSH
12378: LD_STRING VSd-1
12380: PPUSH
12381: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
12385: LD_VAR 0 4
12389: PUSH
12390: LD_INT 1
12392: ARRAY
12393: PPUSH
12394: CALL_OW 258
12398: PUSH
12399: LD_INT 1
12401: EQUAL
12402: IFFALSE 12422
// Say ( speaker [ 1 ] , VAd-1 ) else
12404: LD_VAR 0 4
12408: PUSH
12409: LD_INT 1
12411: ARRAY
12412: PPUSH
12413: LD_STRING VAd-1
12415: PPUSH
12416: CALL_OW 88
12420: GO 12438
// Say ( speaker [ 1 ] , VAfd-1 ) ;
12422: LD_VAR 0 4
12426: PUSH
12427: LD_INT 1
12429: ARRAY
12430: PPUSH
12431: LD_STRING VAfd-1
12433: PPUSH
12434: CALL_OW 88
// Say ( ar_commander , VSd-2 ) ;
12438: LD_EXP 57
12442: PPUSH
12443: LD_STRING VSd-2
12445: PPUSH
12446: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
12450: LD_VAR 0 4
12454: PUSH
12455: LD_INT 1
12457: ARRAY
12458: PPUSH
12459: CALL_OW 258
12463: PUSH
12464: LD_INT 1
12466: EQUAL
12467: IFFALSE 12487
// Say ( speaker [ 1 ] , VAd-2 ) else
12469: LD_VAR 0 4
12473: PUSH
12474: LD_INT 1
12476: ARRAY
12477: PPUSH
12478: LD_STRING VAd-2
12480: PPUSH
12481: CALL_OW 88
12485: GO 12503
// Say ( speaker [ 1 ] , VAfd-2 ) ;
12487: LD_VAR 0 4
12491: PUSH
12492: LD_INT 1
12494: ARRAY
12495: PPUSH
12496: LD_STRING VAfd-2
12498: PPUSH
12499: CALL_OW 88
// Say ( ar_commander , VSd-3 ) ;
12503: LD_EXP 57
12507: PPUSH
12508: LD_STRING VSd-3
12510: PPUSH
12511: CALL_OW 88
// InGameOff ;
12515: CALL_OW 9
// end ; ChangeMissionObjectives ( CVulc5 ) ;
12519: LD_STRING CVulc5
12521: PPUSH
12522: CALL_OW 337
// end else
12526: GO 12681
// if your_side = 7 then
12528: LD_OWVAR 2
12532: PUSH
12533: LD_INT 7
12535: EQUAL
12536: IFFALSE 12681
// begin speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) diff al_commander ;
12538: LD_ADDR_VAR 0 4
12542: PUSH
12543: LD_INT 22
12545: PUSH
12546: LD_INT 7
12548: PUSH
12549: EMPTY
12550: LIST
12551: LIST
12552: PUSH
12553: LD_INT 21
12555: PUSH
12556: LD_INT 1
12558: PUSH
12559: EMPTY
12560: LIST
12561: LIST
12562: PUSH
12563: EMPTY
12564: LIST
12565: LIST
12566: PPUSH
12567: CALL_OW 69
12571: PUSH
12572: LD_EXP 43
12576: DIFF
12577: ST_TO_ADDR
// if speaker then
12578: LD_VAR 0 4
12582: IFFALSE 12674
// begin CenterNowOnUnits ( al_commander ) ;
12584: LD_EXP 43
12588: PPUSH
12589: CALL_OW 87
// InGameOn ;
12593: CALL_OW 8
// Say ( al_commander , VPd-1 ) ;
12597: LD_EXP 43
12601: PPUSH
12602: LD_STRING VPd-1
12604: PPUSH
12605: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) then
12609: LD_VAR 0 4
12613: PUSH
12614: LD_INT 1
12616: ARRAY
12617: PPUSH
12618: CALL_OW 258
12622: IFFALSE 12642
// Say ( speaker [ 1 ] , VPpd-1 ) else
12624: LD_VAR 0 4
12628: PUSH
12629: LD_INT 1
12631: ARRAY
12632: PPUSH
12633: LD_STRING VPpd-1
12635: PPUSH
12636: CALL_OW 88
12640: GO 12658
// Say ( speaker [ 1 ] , VPpdf-1 ) ;
12642: LD_VAR 0 4
12646: PUSH
12647: LD_INT 1
12649: ARRAY
12650: PPUSH
12651: LD_STRING VPpdf-1
12653: PPUSH
12654: CALL_OW 88
// Say ( al_commander , VPd-2 ) ;
12658: LD_EXP 43
12662: PPUSH
12663: LD_STRING VPd-2
12665: PPUSH
12666: CALL_OW 88
// InGameOff ;
12670: CALL_OW 9
// end ; ChangeMissionObjectives ( CVulc7 ) ;
12674: LD_STRING CVulc7
12676: PPUSH
12677: CALL_OW 337
// end ; SaveForQuickRestart ;
12681: CALL_OW 22
// end ;
12685: LD_VAR 0 1
12689: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) do
12690: LD_INT 22
12692: PUSH
12693: LD_INT 2
12695: PUSH
12696: EMPTY
12697: LIST
12698: LIST
12699: PUSH
12700: LD_INT 30
12702: PUSH
12703: LD_INT 3
12705: PUSH
12706: EMPTY
12707: LIST
12708: LIST
12709: PUSH
12710: EMPTY
12711: LIST
12712: LIST
12713: PPUSH
12714: CALL_OW 69
12718: IFFALSE 12762
12720: GO 12722
12722: DISABLE
// begin ChangeMissionObjectives ( CVulc6 ) ;
12723: LD_STRING CVulc6
12725: PPUSH
12726: CALL_OW 337
// Wait ( [ 25 25$00 , 22 22$30 , 20 20$00 ] [ Difficulty ] ) ;
12730: LD_INT 52500
12732: PUSH
12733: LD_INT 47250
12735: PUSH
12736: LD_INT 42000
12738: PUSH
12739: EMPTY
12740: LIST
12741: LIST
12742: LIST
12743: PUSH
12744: LD_OWVAR 67
12748: ARRAY
12749: PPUSH
12750: CALL_OW 67
// ru_can_attack := true ;
12754: LD_ADDR_EXP 3
12758: PUSH
12759: LD_INT 1
12761: ST_TO_ADDR
// end ;
12762: END
// every 0 0$01 trigger GetSide ( us_depot ) = 1 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_warehouse ] ] ] ) do var speaker ;
12763: LD_INT 50
12765: PPUSH
12766: CALL_OW 255
12770: PUSH
12771: LD_INT 1
12773: EQUAL
12774: PUSH
12775: LD_INT 22
12777: PUSH
12778: LD_INT 1
12780: PUSH
12781: EMPTY
12782: LIST
12783: LIST
12784: PUSH
12785: LD_INT 2
12787: PUSH
12788: LD_INT 30
12790: PUSH
12791: LD_INT 3
12793: PUSH
12794: EMPTY
12795: LIST
12796: LIST
12797: PUSH
12798: LD_INT 30
12800: PUSH
12801: LD_INT 1
12803: PUSH
12804: EMPTY
12805: LIST
12806: LIST
12807: PUSH
12808: EMPTY
12809: LIST
12810: LIST
12811: LIST
12812: PUSH
12813: EMPTY
12814: LIST
12815: LIST
12816: PPUSH
12817: CALL_OW 69
12821: OR
12822: IFFALSE 13056
12824: GO 12826
12826: DISABLE
12827: LD_INT 0
12829: PPUSH
// begin ChangeMissionObjectives ( CVulc2 ) ;
12830: LD_STRING CVulc2
12832: PPUSH
12833: CALL_OW 337
// speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) diff us_commander ;
12837: LD_ADDR_VAR 0 1
12841: PUSH
12842: LD_INT 22
12844: PUSH
12845: LD_INT 1
12847: PUSH
12848: EMPTY
12849: LIST
12850: LIST
12851: PUSH
12852: LD_INT 25
12854: PUSH
12855: LD_INT 2
12857: PUSH
12858: EMPTY
12859: LIST
12860: LIST
12861: PUSH
12862: EMPTY
12863: LIST
12864: LIST
12865: PPUSH
12866: CALL_OW 69
12870: PUSH
12871: LD_EXP 24
12875: DIFF
12876: ST_TO_ADDR
// DialogueOn ;
12877: CALL_OW 6
// DWait ( 0 0$0.3 ) ;
12881: LD_INT 10
12883: PPUSH
12884: CALL_OW 68
// if GetSex ( speaker [ 1 ] ) = sex_male then
12888: LD_VAR 0 1
12892: PUSH
12893: LD_INT 1
12895: ARRAY
12896: PPUSH
12897: CALL_OW 258
12901: PUSH
12902: LD_INT 1
12904: EQUAL
12905: IFFALSE 12925
// Say ( speaker [ 1 ] , VDb-1 ) else
12907: LD_VAR 0 1
12911: PUSH
12912: LD_INT 1
12914: ARRAY
12915: PPUSH
12916: LD_STRING VDb-1
12918: PPUSH
12919: CALL_OW 88
12923: GO 12941
// Say ( speaker [ 1 ] , VDbf-1 ) ;
12925: LD_VAR 0 1
12929: PUSH
12930: LD_INT 1
12932: ARRAY
12933: PPUSH
12934: LD_STRING VDbf-1
12936: PPUSH
12937: CALL_OW 88
// DWait ( 0 0$0.3 ) ;
12941: LD_INT 10
12943: PPUSH
12944: CALL_OW 68
// if GetSex ( speaker [ 1 ] ) = sex_male then
12948: LD_VAR 0 1
12952: PUSH
12953: LD_INT 1
12955: ARRAY
12956: PPUSH
12957: CALL_OW 258
12961: PUSH
12962: LD_INT 1
12964: EQUAL
12965: IFFALSE 12985
// Say ( speaker [ 1 ] , VDb-2 ) else
12967: LD_VAR 0 1
12971: PUSH
12972: LD_INT 1
12974: ARRAY
12975: PPUSH
12976: LD_STRING VDb-2
12978: PPUSH
12979: CALL_OW 88
12983: GO 13001
// Say ( speaker [ 1 ] , VDbf-2 ) ;
12985: LD_VAR 0 1
12989: PUSH
12990: LD_INT 1
12992: ARRAY
12993: PPUSH
12994: LD_STRING VDbf-2
12996: PPUSH
12997: CALL_OW 88
// DWait ( 0 0$01 ) ;
13001: LD_INT 35
13003: PPUSH
13004: CALL_OW 68
// Say ( us_commander , VDb-com1 ) ;
13008: LD_EXP 24
13012: PPUSH
13013: LD_STRING VDb-com1
13015: PPUSH
13016: CALL_OW 88
// DialogueOff ;
13020: CALL_OW 7
// Wait ( [ 21 21$00 , 17 17$30 , 15 15$00 ] [ Difficulty ] ) ;
13024: LD_INT 44100
13026: PUSH
13027: LD_INT 36750
13029: PUSH
13030: LD_INT 31500
13032: PUSH
13033: EMPTY
13034: LIST
13035: LIST
13036: LIST
13037: PUSH
13038: LD_OWVAR 67
13042: ARRAY
13043: PPUSH
13044: CALL_OW 67
// ru_can_attack := true ;
13048: LD_ADDR_EXP 3
13052: PUSH
13053: LD_INT 1
13055: ST_TO_ADDR
// end ;
13056: PPOPN 1
13058: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) do
13059: LD_INT 22
13061: PUSH
13062: LD_INT 7
13064: PUSH
13065: EMPTY
13066: LIST
13067: LIST
13068: PUSH
13069: LD_INT 30
13071: PUSH
13072: LD_INT 3
13074: PUSH
13075: EMPTY
13076: LIST
13077: LIST
13078: PUSH
13079: EMPTY
13080: LIST
13081: LIST
13082: PPUSH
13083: CALL_OW 69
13087: IFFALSE 13124
13089: GO 13091
13091: DISABLE
// begin Wait ( [ 20 20$00 , 16 16$30 , 14 14$00 ] [ Difficulty ] ) ;
13092: LD_INT 42000
13094: PUSH
13095: LD_INT 34650
13097: PUSH
13098: LD_INT 29400
13100: PUSH
13101: EMPTY
13102: LIST
13103: LIST
13104: LIST
13105: PUSH
13106: LD_OWVAR 67
13110: ARRAY
13111: PPUSH
13112: CALL_OW 67
// ru_can_attack := true ;
13116: LD_ADDR_EXP 3
13120: PUSH
13121: LD_INT 1
13123: ST_TO_ADDR
// end ;
13124: END
// every 0 0$01 trigger GetSide ( us_lab ) = 1 do var speaker ;
13125: LD_INT 58
13127: PPUSH
13128: CALL_OW 255
13132: PUSH
13133: LD_INT 1
13135: EQUAL
13136: IFFALSE 13343
13138: GO 13140
13140: DISABLE
13141: LD_INT 0
13143: PPUSH
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
13144: LD_ADDR_VAR 0 1
13148: PUSH
13149: LD_INT 22
13151: PUSH
13152: LD_INT 1
13154: PUSH
13155: EMPTY
13156: LIST
13157: LIST
13158: PUSH
13159: LD_INT 25
13161: PUSH
13162: LD_INT 2
13164: PUSH
13165: EMPTY
13166: LIST
13167: LIST
13168: PUSH
13169: EMPTY
13170: LIST
13171: LIST
13172: PPUSH
13173: CALL_OW 69
13177: ST_TO_ADDR
// DialogueOn ;
13178: CALL_OW 6
// if speaker then
13182: LD_VAR 0 1
13186: IFFALSE 13241
// if GetSex ( speaker [ 1 ] ) = sex_male then
13188: LD_VAR 0 1
13192: PUSH
13193: LD_INT 1
13195: ARRAY
13196: PPUSH
13197: CALL_OW 258
13201: PUSH
13202: LD_INT 1
13204: EQUAL
13205: IFFALSE 13225
// Say ( speaker [ 1 ] , VDe-1 ) else
13207: LD_VAR 0 1
13211: PUSH
13212: LD_INT 1
13214: ARRAY
13215: PPUSH
13216: LD_STRING VDe-1
13218: PPUSH
13219: CALL_OW 88
13223: GO 13241
// Say ( speaker [ 1 ] , VDef-1 ) ;
13225: LD_VAR 0 1
13229: PUSH
13230: LD_INT 1
13232: ARRAY
13233: PPUSH
13234: LD_STRING VDef-1
13236: PPUSH
13237: CALL_OW 88
// case Query ( SibNote ) of 1 :
13241: LD_STRING SibNote
13243: PPUSH
13244: CALL_OW 97
13248: PUSH
13249: LD_INT 1
13251: DOUBLE
13252: EQUAL
13253: IFTRUE 13257
13255: GO 13260
13257: POP
// ; end ;
13258: GO 13261
13260: POP
// if speaker then
13261: LD_VAR 0 1
13265: IFFALSE 13320
// if GetSex ( speaker [ 1 ] ) = sex_male then
13267: LD_VAR 0 1
13271: PUSH
13272: LD_INT 1
13274: ARRAY
13275: PPUSH
13276: CALL_OW 258
13280: PUSH
13281: LD_INT 1
13283: EQUAL
13284: IFFALSE 13304
// Say ( speaker [ 1 ] , VDe-2 ) else
13286: LD_VAR 0 1
13290: PUSH
13291: LD_INT 1
13293: ARRAY
13294: PPUSH
13295: LD_STRING VDe-2
13297: PPUSH
13298: CALL_OW 88
13302: GO 13320
// Say ( speaker [ 1 ] , VDef-2 ) ;
13304: LD_VAR 0 1
13308: PUSH
13309: LD_INT 1
13311: ARRAY
13312: PPUSH
13313: LD_STRING VDef-2
13315: PPUSH
13316: CALL_OW 88
// Say ( us_commander , VDc-4 ) ;
13320: LD_EXP 24
13324: PPUSH
13325: LD_STRING VDc-4
13327: PPUSH
13328: CALL_OW 88
// DialogueOff ;
13332: CALL_OW 7
// ChangeMissionObjectives ( CVulc3 ) ;
13336: LD_STRING CVulc3
13338: PPUSH
13339: CALL_OW 337
// end ;
13343: PPOPN 1
13345: END
// every 0 0$01 trigger your_side = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) > 0 do var i , un , veh ;
13346: LD_OWVAR 2
13350: PUSH
13351: LD_INT 1
13353: EQUAL
13354: PUSH
13355: LD_INT 22
13357: PUSH
13358: LD_INT 1
13360: PUSH
13361: EMPTY
13362: LIST
13363: LIST
13364: PUSH
13365: LD_INT 30
13367: PUSH
13368: LD_INT 3
13370: PUSH
13371: EMPTY
13372: LIST
13373: LIST
13374: PUSH
13375: EMPTY
13376: LIST
13377: LIST
13378: PPUSH
13379: CALL_OW 69
13383: PUSH
13384: LD_INT 0
13386: GREATER
13387: AND
13388: IFFALSE 13834
13390: GO 13392
13392: DISABLE
13393: LD_INT 0
13395: PPUSH
13396: PPUSH
13397: PPUSH
// begin Wait ( Rand ( 0 0$07 , 0 0$37 ) ) ;
13398: LD_INT 245
13400: PPUSH
13401: LD_INT 1295
13403: PPUSH
13404: CALL_OW 12
13408: PPUSH
13409: CALL_OW 67
// DialogueOn ;
13413: CALL_OW 6
// SayRadio ( us_guy , VDG-1 ) ;
13417: LD_EXP 27
13421: PPUSH
13422: LD_STRING VDG-1
13424: PPUSH
13425: CALL_OW 94
// Say ( us_commander , VDc-5 ) ;
13429: LD_EXP 24
13433: PPUSH
13434: LD_STRING VDc-5
13436: PPUSH
13437: CALL_OW 88
// SayRadio ( us_guy , VDG-2 ) ;
13441: LD_EXP 27
13445: PPUSH
13446: LD_STRING VDG-2
13448: PPUSH
13449: CALL_OW 94
// Say ( us_commander , VDc-6 ) ;
13453: LD_EXP 24
13457: PPUSH
13458: LD_STRING VDc-6
13460: PPUSH
13461: CALL_OW 88
// Say ( us_commander , VDc-6a ) ;
13465: LD_EXP 24
13469: PPUSH
13470: LD_STRING VDc-6a
13472: PPUSH
13473: CALL_OW 88
// SayRadio ( us_guy , VDG-3 ) ;
13477: LD_EXP 27
13481: PPUSH
13482: LD_STRING VDG-3
13484: PPUSH
13485: CALL_OW 94
// Say ( us_commander , VDc-7 ) ;
13489: LD_EXP 24
13493: PPUSH
13494: LD_STRING VDc-7
13496: PPUSH
13497: CALL_OW 88
// SayRadio ( us_guy , VDG-4 ) ;
13501: LD_EXP 27
13505: PPUSH
13506: LD_STRING VDG-4
13508: PPUSH
13509: CALL_OW 94
// DialogueOff ;
13513: CALL_OW 7
// ChangeMissionObjectives ( CVulc4 ) ;
13517: LD_STRING CVulc4
13519: PPUSH
13520: CALL_OW 337
// Wait ( [ 9 9$00 , 10 10$00 , 11 11$00 ] [ Difficulty ] ) ;
13524: LD_INT 18900
13526: PUSH
13527: LD_INT 21000
13529: PUSH
13530: LD_INT 23100
13532: PUSH
13533: EMPTY
13534: LIST
13535: LIST
13536: LIST
13537: PUSH
13538: LD_OWVAR 67
13542: ARRAY
13543: PPUSH
13544: CALL_OW 67
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
13548: LD_ADDR_VAR 0 1
13552: PUSH
13553: DOUBLE
13554: LD_INT 1
13556: DEC
13557: ST_TO_ADDR
13558: LD_INT 4
13560: PUSH
13561: LD_INT 5
13563: PUSH
13564: LD_INT 6
13566: PUSH
13567: EMPTY
13568: LIST
13569: LIST
13570: LIST
13571: PUSH
13572: LD_OWVAR 67
13576: ARRAY
13577: PUSH
13578: FOR_TO
13579: IFFALSE 13823
// begin uc_side := 1 ;
13581: LD_ADDR_OWVAR 20
13585: PUSH
13586: LD_INT 1
13588: ST_TO_ADDR
// uc_nation := 1 ;
13589: LD_ADDR_OWVAR 21
13593: PUSH
13594: LD_INT 1
13596: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , us_skill ) ;
13597: LD_INT 0
13599: PPUSH
13600: LD_INT 1
13602: PPUSH
13603: LD_INT 4
13605: PPUSH
13606: CALL_OW 12
13610: PPUSH
13611: LD_EXP 26
13615: PPUSH
13616: CALL_OW 380
// un := CreateHuman ;
13620: LD_ADDR_VAR 0 2
13624: PUSH
13625: CALL_OW 44
13629: ST_TO_ADDR
// SetDir ( un , 2 ) ;
13630: LD_VAR 0 2
13634: PPUSH
13635: LD_INT 2
13637: PPUSH
13638: CALL_OW 233
// if GetClass ( un ) = 3 then
13642: LD_VAR 0 2
13646: PPUSH
13647: CALL_OW 257
13651: PUSH
13652: LD_INT 3
13654: EQUAL
13655: IFFALSE 13806
// begin vc_chassis := [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 ] ;
13657: LD_ADDR_OWVAR 37
13661: PUSH
13662: LD_INT 2
13664: PUSH
13665: LD_INT 3
13667: PUSH
13668: EMPTY
13669: LIST
13670: LIST
13671: PUSH
13672: LD_VAR 0 1
13676: PUSH
13677: LD_INT 2
13679: MOD
13680: ARRAY
13681: ST_TO_ADDR
// vc_engine := engine_combustion ;
13682: LD_ADDR_OWVAR 39
13686: PUSH
13687: LD_INT 1
13689: ST_TO_ADDR
// vc_control := control_manual ;
13690: LD_ADDR_OWVAR 38
13694: PUSH
13695: LD_INT 1
13697: ST_TO_ADDR
// vc_weapon := [ us_laser , us_laser , us_double_gun , us_radar ] [ rand ( 1 , 4 ) ] ;
13698: LD_ADDR_OWVAR 40
13702: PUSH
13703: LD_INT 9
13705: PUSH
13706: LD_INT 9
13708: PUSH
13709: LD_INT 5
13711: PUSH
13712: LD_INT 11
13714: PUSH
13715: EMPTY
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: PUSH
13721: LD_INT 1
13723: PPUSH
13724: LD_INT 4
13726: PPUSH
13727: CALL_OW 12
13731: ARRAY
13732: ST_TO_ADDR
// veh := CreateVehicle ;
13733: LD_ADDR_VAR 0 3
13737: PUSH
13738: CALL_OW 45
13742: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
13743: LD_VAR 0 3
13747: PPUSH
13748: LD_INT 2
13750: PPUSH
13751: CALL_OW 233
// SetFuel ( veh , Rand ( 77 , 88 ) ) ;
13755: LD_VAR 0 3
13759: PPUSH
13760: LD_INT 77
13762: PPUSH
13763: LD_INT 88
13765: PPUSH
13766: CALL_OW 12
13770: PPUSH
13771: CALL_OW 240
// PlaceUnitArea ( veh , start_north , false ) ;
13775: LD_VAR 0 3
13779: PPUSH
13780: LD_INT 1
13782: PPUSH
13783: LD_INT 0
13785: PPUSH
13786: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
13790: LD_VAR 0 2
13794: PPUSH
13795: LD_VAR 0 3
13799: PPUSH
13800: CALL_OW 52
// end else
13804: GO 13821
// PlaceUnitArea ( un , start_north , false ) ;
13806: LD_VAR 0 2
13810: PPUSH
13811: LD_INT 1
13813: PPUSH
13814: LD_INT 0
13816: PPUSH
13817: CALL_OW 49
// end ;
13821: GO 13578
13823: POP
13824: POP
// CenterNowOnUnits ( un ) ;
13825: LD_VAR 0 2
13829: PPUSH
13830: CALL_OW 87
// end ;
13834: PPOPN 3
13836: END
// every 0 0$01 trigger FilterUnitsInArea ( vulc_artifact , [ f_side , your_side ] ) do var un , filter ;
13837: LD_INT 21
13839: PPUSH
13840: LD_INT 22
13842: PUSH
13843: LD_OWVAR 2
13847: PUSH
13848: EMPTY
13849: LIST
13850: LIST
13851: PPUSH
13852: CALL_OW 70
13856: IFFALSE 14177
13858: GO 13860
13860: DISABLE
13861: LD_INT 0
13863: PPUSH
13864: PPUSH
// begin filter := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff player_commander ;
13865: LD_ADDR_VAR 0 2
13869: PUSH
13870: LD_INT 22
13872: PUSH
13873: LD_OWVAR 2
13877: PUSH
13878: EMPTY
13879: LIST
13880: LIST
13881: PUSH
13882: LD_INT 2
13884: PUSH
13885: LD_INT 25
13887: PUSH
13888: LD_INT 1
13890: PUSH
13891: EMPTY
13892: LIST
13893: LIST
13894: PUSH
13895: LD_INT 25
13897: PUSH
13898: LD_INT 2
13900: PUSH
13901: EMPTY
13902: LIST
13903: LIST
13904: PUSH
13905: LD_INT 25
13907: PUSH
13908: LD_INT 3
13910: PUSH
13911: EMPTY
13912: LIST
13913: LIST
13914: PUSH
13915: LD_INT 25
13917: PUSH
13918: LD_INT 4
13920: PUSH
13921: EMPTY
13922: LIST
13923: LIST
13924: PUSH
13925: EMPTY
13926: LIST
13927: LIST
13928: LIST
13929: LIST
13930: LIST
13931: PUSH
13932: EMPTY
13933: LIST
13934: LIST
13935: PPUSH
13936: CALL_OW 69
13940: PUSH
13941: LD_EXP 11
13945: DIFF
13946: ST_TO_ADDR
// un := NearestUnitToXY ( filter , 112 , 67 ) ;
13947: LD_ADDR_VAR 0 1
13951: PUSH
13952: LD_VAR 0 2
13956: PPUSH
13957: LD_INT 112
13959: PPUSH
13960: LD_INT 67
13962: PPUSH
13963: CALL_OW 73
13967: ST_TO_ADDR
// if GetSide ( un ) = 7 then
13968: LD_VAR 0 1
13972: PPUSH
13973: CALL_OW 255
13977: PUSH
13978: LD_INT 7
13980: EQUAL
13981: IFFALSE 14024
// if GetSex ( un ) = sex_male then
13983: LD_VAR 0 1
13987: PPUSH
13988: CALL_OW 258
13992: PUSH
13993: LD_INT 1
13995: EQUAL
13996: IFFALSE 14012
// Say ( un , VD-find-al ) else
13998: LD_VAR 0 1
14002: PPUSH
14003: LD_STRING VD-find-al
14005: PPUSH
14006: CALL_OW 88
14010: GO 14024
// Say ( un , VD-find-al-f ) ;
14012: LD_VAR 0 1
14016: PPUSH
14017: LD_STRING VD-find-al-f
14019: PPUSH
14020: CALL_OW 88
// if GetSide ( un ) = 2 then
14024: LD_VAR 0 1
14028: PPUSH
14029: CALL_OW 255
14033: PUSH
14034: LD_INT 2
14036: EQUAL
14037: IFFALSE 14080
// if GetSex ( un ) = sex_male then
14039: LD_VAR 0 1
14043: PPUSH
14044: CALL_OW 258
14048: PUSH
14049: LD_INT 1
14051: EQUAL
14052: IFFALSE 14068
// Say ( un , VD-find-ar ) else
14054: LD_VAR 0 1
14058: PPUSH
14059: LD_STRING VD-find-ar
14061: PPUSH
14062: CALL_OW 88
14066: GO 14080
// Say ( un , VD-find-ar-f ) ;
14068: LD_VAR 0 1
14072: PPUSH
14073: LD_STRING VD-find-ar-f
14075: PPUSH
14076: CALL_OW 88
// if GetSide ( un ) = 1 then
14080: LD_VAR 0 1
14084: PPUSH
14085: CALL_OW 255
14089: PUSH
14090: LD_INT 1
14092: EQUAL
14093: IFFALSE 14160
// begin if GetSex ( un ) = sex_male then
14095: LD_VAR 0 1
14099: PPUSH
14100: CALL_OW 258
14104: PUSH
14105: LD_INT 1
14107: EQUAL
14108: IFFALSE 14136
// begin Say ( un , VD-find-us ) ;
14110: LD_VAR 0 1
14114: PPUSH
14115: LD_STRING VD-find-us
14117: PPUSH
14118: CALL_OW 88
// Say ( un , VD-find-us2 ) ;
14122: LD_VAR 0 1
14126: PPUSH
14127: LD_STRING VD-find-us2
14129: PPUSH
14130: CALL_OW 88
// end else
14134: GO 14160
// begin Say ( un , VD-find-us-f ) ;
14136: LD_VAR 0 1
14140: PPUSH
14141: LD_STRING VD-find-us-f
14143: PPUSH
14144: CALL_OW 88
// Say ( un , VD-find-us2-f ) ;
14148: LD_VAR 0 1
14152: PPUSH
14153: LD_STRING VD-find-us2-f
14155: PPUSH
14156: CALL_OW 88
// end ; end ; Wait ( 0 0$0.3 ) ;
14160: LD_INT 10
14162: PPUSH
14163: CALL_OW 67
// CenterNowOnXY ( 112 , 67 ) ;
14167: LD_INT 112
14169: PPUSH
14170: LD_INT 67
14172: PPUSH
14173: CALL_OW 86
// end ;
14177: PPOPN 2
14179: END
// every 0 0$01 trigger player_artifact_ready do var speaker ;
14180: LD_EXP 8
14184: IFFALSE 14686
14186: GO 14188
14188: DISABLE
14189: LD_INT 0
14191: PPUSH
// begin if your_side = 1 then
14192: LD_OWVAR 2
14196: PUSH
14197: LD_INT 1
14199: EQUAL
14200: IFFALSE 14381
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) diff us_commander ;
14202: LD_ADDR_VAR 0 1
14206: PUSH
14207: LD_INT 22
14209: PUSH
14210: LD_INT 1
14212: PUSH
14213: EMPTY
14214: LIST
14215: LIST
14216: PUSH
14217: LD_INT 25
14219: PUSH
14220: LD_INT 4
14222: PUSH
14223: EMPTY
14224: LIST
14225: LIST
14226: PUSH
14227: EMPTY
14228: LIST
14229: LIST
14230: PPUSH
14231: CALL_OW 69
14235: PUSH
14236: LD_EXP 24
14240: DIFF
14241: ST_TO_ADDR
// if not speaker then
14242: LD_VAR 0 1
14246: NOT
14247: IFFALSE 14251
// exit ;
14249: GO 14686
// if GetSex ( speaker [ 1 ] ) = sex_male then
14251: LD_VAR 0 1
14255: PUSH
14256: LD_INT 1
14258: ARRAY
14259: PPUSH
14260: CALL_OW 258
14264: PUSH
14265: LD_INT 1
14267: EQUAL
14268: IFFALSE 14288
// Say ( speaker [ 1 ] , VD-us-sci-art-1 ) else
14270: LD_VAR 0 1
14274: PUSH
14275: LD_INT 1
14277: ARRAY
14278: PPUSH
14279: LD_STRING VD-us-sci-art-1
14281: PPUSH
14282: CALL_OW 88
14286: GO 14304
// Say ( speaker [ 1 ] , VD-us-fsci-art-1 ) ;
14288: LD_VAR 0 1
14292: PUSH
14293: LD_INT 1
14295: ARRAY
14296: PPUSH
14297: LD_STRING VD-us-fsci-art-1
14299: PPUSH
14300: CALL_OW 88
// Say ( us_commander , VDc-art1 ) ;
14304: LD_EXP 24
14308: PPUSH
14309: LD_STRING VDc-art1
14311: PPUSH
14312: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
14316: LD_VAR 0 1
14320: PUSH
14321: LD_INT 1
14323: ARRAY
14324: PPUSH
14325: CALL_OW 258
14329: PUSH
14330: LD_INT 1
14332: EQUAL
14333: IFFALSE 14353
// Say ( speaker [ 1 ] , VD-us-sci-art-2 ) else
14335: LD_VAR 0 1
14339: PUSH
14340: LD_INT 1
14342: ARRAY
14343: PPUSH
14344: LD_STRING VD-us-sci-art-2
14346: PPUSH
14347: CALL_OW 88
14351: GO 14369
// Say ( speaker [ 1 ] , VD-us-fsci-art-2 ) ;
14353: LD_VAR 0 1
14357: PUSH
14358: LD_INT 1
14360: ARRAY
14361: PPUSH
14362: LD_STRING VD-us-fsci-art-2
14364: PPUSH
14365: CALL_OW 88
// Say ( us_commander , VDc-art2 ) ;
14369: LD_EXP 24
14373: PPUSH
14374: LD_STRING VDc-art2
14376: PPUSH
14377: CALL_OW 88
// end ; if your_side = 2 then
14381: LD_OWVAR 2
14385: PUSH
14386: LD_INT 2
14388: EQUAL
14389: IFFALSE 14493
// begin speaker := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) diff ar_commander ;
14391: LD_ADDR_VAR 0 1
14395: PUSH
14396: LD_INT 22
14398: PUSH
14399: LD_INT 2
14401: PUSH
14402: EMPTY
14403: LIST
14404: LIST
14405: PUSH
14406: LD_INT 25
14408: PUSH
14409: LD_INT 4
14411: PUSH
14412: EMPTY
14413: LIST
14414: LIST
14415: PUSH
14416: EMPTY
14417: LIST
14418: LIST
14419: PPUSH
14420: CALL_OW 69
14424: PUSH
14425: LD_EXP 57
14429: DIFF
14430: ST_TO_ADDR
// if not speaker then
14431: LD_VAR 0 1
14435: NOT
14436: IFFALSE 14440
// exit ;
14438: GO 14686
// if GetSex ( speaker [ 1 ] ) = sex_male then
14440: LD_VAR 0 1
14444: PUSH
14445: LD_INT 1
14447: ARRAY
14448: PPUSH
14449: CALL_OW 258
14453: PUSH
14454: LD_INT 1
14456: EQUAL
14457: IFFALSE 14477
// Say ( speaker [ 1 ] , VD-ar-sci-art-1 ) else
14459: LD_VAR 0 1
14463: PUSH
14464: LD_INT 1
14466: ARRAY
14467: PPUSH
14468: LD_STRING VD-ar-sci-art-1
14470: PPUSH
14471: CALL_OW 88
14475: GO 14493
// Say ( speaker [ 1 ] , VD-ar-fsci-art-1 ) ;
14477: LD_VAR 0 1
14481: PUSH
14482: LD_INT 1
14484: ARRAY
14485: PPUSH
14486: LD_STRING VD-ar-fsci-art-1
14488: PPUSH
14489: CALL_OW 88
// end ; if your_side = 7 then
14493: LD_OWVAR 2
14497: PUSH
14498: LD_INT 7
14500: EQUAL
14501: IFFALSE 14686
// begin speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 4 ] ] ) diff al_commander ;
14503: LD_ADDR_VAR 0 1
14507: PUSH
14508: LD_INT 22
14510: PUSH
14511: LD_INT 7
14513: PUSH
14514: EMPTY
14515: LIST
14516: LIST
14517: PUSH
14518: LD_INT 25
14520: PUSH
14521: LD_INT 4
14523: PUSH
14524: EMPTY
14525: LIST
14526: LIST
14527: PUSH
14528: EMPTY
14529: LIST
14530: LIST
14531: PPUSH
14532: CALL_OW 69
14536: PUSH
14537: LD_EXP 43
14541: DIFF
14542: ST_TO_ADDR
// if speaker then
14543: LD_VAR 0 1
14547: IFFALSE 14679
// begin if GetSex ( speaker [ 1 ] ) = sex_male then
14549: LD_VAR 0 1
14553: PUSH
14554: LD_INT 1
14556: ARRAY
14557: PPUSH
14558: CALL_OW 258
14562: PUSH
14563: LD_INT 1
14565: EQUAL
14566: IFFALSE 14586
// Say ( speaker [ 1 ] , VD-al-sci-art-1 ) else
14568: LD_VAR 0 1
14572: PUSH
14573: LD_INT 1
14575: ARRAY
14576: PPUSH
14577: LD_STRING VD-al-sci-art-1
14579: PPUSH
14580: CALL_OW 88
14584: GO 14602
// Say ( speaker [ 1 ] , VD-al-fsci-art-1 ) ;
14586: LD_VAR 0 1
14590: PUSH
14591: LD_INT 1
14593: ARRAY
14594: PPUSH
14595: LD_STRING VD-al-fsci-art-1
14597: PPUSH
14598: CALL_OW 88
// Say ( al_commander , VPd-art-1 ) ;
14602: LD_EXP 43
14606: PPUSH
14607: LD_STRING VPd-art-1
14609: PPUSH
14610: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
14614: LD_VAR 0 1
14618: PUSH
14619: LD_INT 1
14621: ARRAY
14622: PPUSH
14623: CALL_OW 258
14627: PUSH
14628: LD_INT 1
14630: EQUAL
14631: IFFALSE 14651
// Say ( speaker [ 1 ] , VD-al-sci-art-2 ) else
14633: LD_VAR 0 1
14637: PUSH
14638: LD_INT 1
14640: ARRAY
14641: PPUSH
14642: LD_STRING VD-al-sci-art-2
14644: PPUSH
14645: CALL_OW 88
14649: GO 14667
// Say ( speaker [ 1 ] , VD-al-fsci-art-2 ) ;
14651: LD_VAR 0 1
14655: PUSH
14656: LD_INT 1
14658: ARRAY
14659: PPUSH
14660: LD_STRING VD-al-fsci-art-2
14662: PPUSH
14663: CALL_OW 88
// Say ( al_commander , VPd-art-2 ) ;
14667: LD_EXP 43
14671: PPUSH
14672: LD_STRING VPd-art-2
14674: PPUSH
14675: CALL_OW 88
// end ; ChangeMissionObjectives ( CVulc7out ) ;
14679: LD_STRING CVulc7out
14681: PPUSH
14682: CALL_OW 337
// end ; end ;
14686: PPOPN 1
14688: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_see , 8 ] ] ) do var speaker ;
14689: LD_INT 22
14691: PUSH
14692: LD_OWVAR 2
14696: PUSH
14697: EMPTY
14698: LIST
14699: LIST
14700: PUSH
14701: LD_INT 101
14703: PUSH
14704: LD_INT 8
14706: PUSH
14707: EMPTY
14708: LIST
14709: LIST
14710: PUSH
14711: EMPTY
14712: LIST
14713: LIST
14714: PPUSH
14715: CALL_OW 69
14719: IFFALSE 14862
14721: GO 14723
14723: DISABLE
14724: LD_INT 0
14726: PPUSH
// begin if your_side = 1 then
14727: LD_OWVAR 2
14731: PUSH
14732: LD_INT 1
14734: EQUAL
14735: IFFALSE 14818
// begin speaker := FilterAllUnits ( [ f_side , 1 ] ) diff us_commander ;
14737: LD_ADDR_VAR 0 1
14741: PUSH
14742: LD_INT 22
14744: PUSH
14745: LD_INT 1
14747: PUSH
14748: EMPTY
14749: LIST
14750: LIST
14751: PPUSH
14752: CALL_OW 69
14756: PUSH
14757: LD_EXP 24
14761: DIFF
14762: ST_TO_ADDR
// if speaker then
14763: LD_VAR 0 1
14767: IFFALSE 14818
// if GetSex ( speaker [ 1 ] ) then
14769: LD_VAR 0 1
14773: PUSH
14774: LD_INT 1
14776: ARRAY
14777: PPUSH
14778: CALL_OW 258
14782: IFFALSE 14802
// Say ( speaker [ 1 ] , VD-legion-us ) else
14784: LD_VAR 0 1
14788: PUSH
14789: LD_INT 1
14791: ARRAY
14792: PPUSH
14793: LD_STRING VD-legion-us
14795: PPUSH
14796: CALL_OW 88
14800: GO 14818
// Say ( speaker [ 1 ] , VD-legion-us-f ) ;
14802: LD_VAR 0 1
14806: PUSH
14807: LD_INT 1
14809: ARRAY
14810: PPUSH
14811: LD_STRING VD-legion-us-f
14813: PPUSH
14814: CALL_OW 88
// end ; if your_side = 2 then
14818: LD_OWVAR 2
14822: PUSH
14823: LD_INT 2
14825: EQUAL
14826: IFFALSE 14840
// Say ( ar_commander , VD-legion-ar ) ;
14828: LD_EXP 57
14832: PPUSH
14833: LD_STRING VD-legion-ar
14835: PPUSH
14836: CALL_OW 88
// if your_side = 7 then
14840: LD_OWVAR 2
14844: PUSH
14845: LD_INT 7
14847: EQUAL
14848: IFFALSE 14862
// Say ( al_commander , VD-legion-al ) ;
14850: LD_EXP 43
14854: PPUSH
14855: LD_STRING VD-legion-al
14857: PPUSH
14858: CALL_OW 88
// end ;
14862: PPOPN 1
14864: END
// every 0 0$01 trigger mine_vulc do
14865: LD_EXP 13
14869: IFFALSE 14886
14871: GO 14873
14873: DISABLE
// begin Say ( player_commander , VD-vulc-mines ) ;
14874: LD_EXP 11
14878: PPUSH
14879: LD_STRING VD-vulc-mines
14881: PPUSH
14882: CALL_OW 88
// end ;
14886: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 3 ] ) = 0 and your_side <> 2 do
14887: LD_INT 22
14889: PUSH
14890: LD_INT 3
14892: PUSH
14893: EMPTY
14894: LIST
14895: LIST
14896: PPUSH
14897: CALL_OW 69
14901: PUSH
14902: LD_INT 0
14904: EQUAL
14905: PUSH
14906: LD_OWVAR 2
14910: PUSH
14911: LD_INT 2
14913: NONEQUAL
14914: AND
14915: IFFALSE 14924
14917: GO 14919
14919: DISABLE
// Win ;
14920: CALL 14981 0 0
14924: END
// every 0 0$01 trigger FilterAllUnits ( [ f_or , [ f_side , 8 ] , [ f_side , 3 ] ] ) = 0 and your_side = 2 do
14925: LD_INT 2
14927: PUSH
14928: LD_INT 22
14930: PUSH
14931: LD_INT 8
14933: PUSH
14934: EMPTY
14935: LIST
14936: LIST
14937: PUSH
14938: LD_INT 22
14940: PUSH
14941: LD_INT 3
14943: PUSH
14944: EMPTY
14945: LIST
14946: LIST
14947: PUSH
14948: EMPTY
14949: LIST
14950: LIST
14951: LIST
14952: PPUSH
14953: CALL_OW 69
14957: PUSH
14958: LD_INT 0
14960: EQUAL
14961: PUSH
14962: LD_OWVAR 2
14966: PUSH
14967: LD_INT 2
14969: EQUAL
14970: AND
14971: IFFALSE 14980
14973: GO 14975
14975: DISABLE
// Win ;
14976: CALL 14981 0 0
14980: END
// function Win ; var points ; begin
14981: LD_INT 0
14983: PPUSH
14984: PPUSH
// case Query ( VulcWin ) of 1 :
14985: LD_STRING VulcWin
14987: PPUSH
14988: CALL_OW 97
14992: PUSH
14993: LD_INT 1
14995: DOUBLE
14996: EQUAL
14997: IFTRUE 15001
14999: GO 15004
15001: POP
// ; end ;
15002: GO 15005
15004: POP
// if medal_enabled then
15005: LD_EXP 14
15009: IFFALSE 15023
// AddMedal ( vulc_1 , 1 ) else
15011: LD_STRING vulc_1
15013: PPUSH
15014: LD_INT 1
15016: PPUSH
15017: CALL_OW 101
15021: GO 15034
// AddMedal ( vulc_1 , - 1 ) ;
15023: LD_STRING vulc_1
15025: PPUSH
15026: LD_INT 1
15028: NEG
15029: PPUSH
15030: CALL_OW 101
// if FilterAllUnits ( [ f_side , 8 ] ) = 0 then
15034: LD_INT 22
15036: PUSH
15037: LD_INT 8
15039: PUSH
15040: EMPTY
15041: LIST
15042: LIST
15043: PPUSH
15044: CALL_OW 69
15048: PUSH
15049: LD_INT 0
15051: EQUAL
15052: IFFALSE 15066
// AddMedal ( vulc_2 , 1 ) else
15054: LD_STRING vulc_2
15056: PPUSH
15057: LD_INT 1
15059: PPUSH
15060: CALL_OW 101
15064: GO 15077
// AddMedal ( vulc_2 , - 1 ) ;
15066: LD_STRING vulc_2
15068: PPUSH
15069: LD_INT 1
15071: NEG
15072: PPUSH
15073: CALL_OW 101
// points := CalculateCommanderPoints ;
15077: LD_ADDR_VAR 0 2
15081: PUSH
15082: CALL 2336 0 0
15086: ST_TO_ADDR
// if points >= 2000 then
15087: LD_VAR 0 2
15091: PUSH
15092: LD_INT 2000
15094: GREATEREQUAL
15095: IFFALSE 15109
// AddMedal ( vulc_3 , 2 ) else
15097: LD_STRING vulc_3
15099: PPUSH
15100: LD_INT 2
15102: PPUSH
15103: CALL_OW 101
15107: GO 15142
// if points >= 0 then
15109: LD_VAR 0 2
15113: PUSH
15114: LD_INT 0
15116: GREATEREQUAL
15117: IFFALSE 15131
// AddMedal ( vulc_3 , 1 ) else
15119: LD_STRING vulc_3
15121: PPUSH
15122: LD_INT 1
15124: PPUSH
15125: CALL_OW 101
15129: GO 15142
// AddMedal ( vulc_3 , - 1 ) ;
15131: LD_STRING vulc_3
15133: PPUSH
15134: LD_INT 1
15136: NEG
15137: PPUSH
15138: CALL_OW 101
// GiveMedals ( MAIN ) ;
15142: LD_STRING MAIN
15144: PPUSH
15145: CALL_OW 102
// YouWin ;
15149: CALL_OW 103
// end ; end_of_file
15153: LD_VAR 0 1
15157: RET
// every 0 0$01 trigger FilterUnitsInArea ( vulcano_area , [ f_type , unit_human ] ) do var i , un ;
15158: LD_INT 13
15160: PPUSH
15161: LD_INT 21
15163: PUSH
15164: LD_INT 1
15166: PUSH
15167: EMPTY
15168: LIST
15169: LIST
15170: PPUSH
15171: CALL_OW 70
15175: IFFALSE 15235
15177: GO 15179
15179: DISABLE
15180: LD_INT 0
15182: PPUSH
15183: PPUSH
// begin enable ;
15184: ENABLE
// for i in FilterUnitsInArea ( vulcano_area , [ f_type , unit_human ] ) do
15185: LD_ADDR_VAR 0 1
15189: PUSH
15190: LD_INT 13
15192: PPUSH
15193: LD_INT 21
15195: PUSH
15196: LD_INT 1
15198: PUSH
15199: EMPTY
15200: LIST
15201: LIST
15202: PPUSH
15203: CALL_OW 70
15207: PUSH
15208: FOR_IN
15209: IFFALSE 15233
// if GetLives ( i ) then
15211: LD_VAR 0 1
15215: PPUSH
15216: CALL_OW 256
15220: IFFALSE 15231
// KillUnit ( i ) ;
15222: LD_VAR 0 1
15226: PPUSH
15227: CALL_OW 66
15231: GO 15208
15233: POP
15234: POP
// end ;
15235: PPOPN 2
15237: END
// on ArtifactResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
15238: LD_VAR 0 1
15242: PPUSH
15243: CALL_OW 255
15247: PUSH
15248: LD_OWVAR 2
15252: EQUAL
15253: IFFALSE 15263
// player_res_art := true ;
15255: LD_ADDR_EXP 6
15259: PUSH
15260: LD_INT 1
15262: ST_TO_ADDR
// end ;
15263: PPOPN 1
15265: END
// every 0 0$03 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) and player_res_art do var xy , lab ;
15266: LD_INT 22
15268: PUSH
15269: LD_OWVAR 2
15273: PUSH
15274: EMPTY
15275: LIST
15276: LIST
15277: PUSH
15278: LD_INT 2
15280: PUSH
15281: LD_INT 30
15283: PUSH
15284: LD_INT 7
15286: PUSH
15287: EMPTY
15288: LIST
15289: LIST
15290: PUSH
15291: LD_INT 30
15293: PUSH
15294: LD_INT 8
15296: PUSH
15297: EMPTY
15298: LIST
15299: LIST
15300: PUSH
15301: LD_INT 30
15303: PUSH
15304: LD_INT 11
15306: PUSH
15307: EMPTY
15308: LIST
15309: LIST
15310: PUSH
15311: EMPTY
15312: LIST
15313: LIST
15314: LIST
15315: LIST
15316: PUSH
15317: EMPTY
15318: LIST
15319: LIST
15320: PPUSH
15321: CALL_OW 69
15325: PUSH
15326: LD_EXP 6
15330: AND
15331: IFFALSE 15688
15333: GO 15335
15335: DISABLE
15336: LD_INT 0
15338: PPUSH
15339: PPUSH
// begin enable ;
15340: ENABLE
// xy := FindArtifact ( 1 ) ;
15341: LD_ADDR_VAR 0 1
15345: PUSH
15346: LD_INT 1
15348: PPUSH
15349: CALL_OW 469
15353: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_siberium ] ] ] ) , xy [ 1 ] , xy [ 2 ] ) ;
15354: LD_ADDR_VAR 0 2
15358: PUSH
15359: LD_INT 22
15361: PUSH
15362: LD_OWVAR 2
15366: PUSH
15367: EMPTY
15368: LIST
15369: LIST
15370: PUSH
15371: LD_INT 2
15373: PUSH
15374: LD_INT 30
15376: PUSH
15377: LD_INT 8
15379: PUSH
15380: EMPTY
15381: LIST
15382: LIST
15383: PUSH
15384: LD_INT 30
15386: PUSH
15387: LD_INT 7
15389: PUSH
15390: EMPTY
15391: LIST
15392: LIST
15393: PUSH
15394: LD_INT 30
15396: PUSH
15397: LD_INT 11
15399: PUSH
15400: EMPTY
15401: LIST
15402: LIST
15403: PUSH
15404: EMPTY
15405: LIST
15406: LIST
15407: LIST
15408: LIST
15409: PUSH
15410: EMPTY
15411: LIST
15412: LIST
15413: PPUSH
15414: CALL_OW 69
15418: PPUSH
15419: LD_VAR 0 1
15423: PUSH
15424: LD_INT 1
15426: ARRAY
15427: PPUSH
15428: LD_VAR 0 1
15432: PUSH
15433: LD_INT 2
15435: ARRAY
15436: PPUSH
15437: CALL_OW 73
15441: ST_TO_ADDR
// if player_artifact_ready = false then
15442: LD_EXP 8
15446: PUSH
15447: LD_INT 0
15449: EQUAL
15450: IFFALSE 15564
// if GetDistUnitXY ( lab , xy [ 1 ] , xy [ 2 ] ) < 6 then
15452: LD_VAR 0 2
15456: PPUSH
15457: LD_VAR 0 1
15461: PUSH
15462: LD_INT 1
15464: ARRAY
15465: PPUSH
15466: LD_VAR 0 1
15470: PUSH
15471: LD_INT 2
15473: ARRAY
15474: PPUSH
15475: CALL_OW 297
15479: PUSH
15480: LD_INT 6
15482: LESS
15483: IFFALSE 15544
// begin if BuildingStatus ( lab ) = bs_idle then
15485: LD_VAR 0 2
15489: PPUSH
15490: CALL_OW 461
15494: PUSH
15495: LD_INT 2
15497: EQUAL
15498: IFFALSE 15522
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) else
15500: LD_OWVAR 2
15504: PPUSH
15505: LD_INT 1
15507: PPUSH
15508: LD_INT 2
15510: PPUSH
15511: LD_VAR 0 2
15515: PPUSH
15516: CALL_OW 468
15520: GO 15542
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
15522: LD_OWVAR 2
15526: PPUSH
15527: LD_INT 1
15529: PPUSH
15530: LD_INT 1
15532: PPUSH
15533: LD_VAR 0 2
15537: PPUSH
15538: CALL_OW 468
// end else
15542: GO 15564
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
15544: LD_OWVAR 2
15548: PPUSH
15549: LD_INT 1
15551: PPUSH
15552: LD_INT 1
15554: PPUSH
15555: LD_VAR 0 2
15559: PPUSH
15560: CALL_OW 468
// if player_artifact_ready then
15564: LD_EXP 8
15568: IFFALSE 15688
// if GetDistUnitXY ( lab , xy [ 1 ] , xy [ 2 ] ) < 6 then
15570: LD_VAR 0 2
15574: PPUSH
15575: LD_VAR 0 1
15579: PUSH
15580: LD_INT 1
15582: ARRAY
15583: PPUSH
15584: LD_VAR 0 1
15588: PUSH
15589: LD_INT 2
15591: ARRAY
15592: PPUSH
15593: CALL_OW 297
15597: PUSH
15598: LD_INT 6
15600: LESS
15601: IFFALSE 15666
// begin if BuildingStatus ( lab ) = bs_idle then
15603: LD_VAR 0 2
15607: PPUSH
15608: CALL_OW 461
15612: PUSH
15613: LD_INT 2
15615: EQUAL
15616: IFFALSE 15642
// SetArtifactUse ( your_side , art_icon , art_unit , lab ) else
15618: LD_OWVAR 2
15622: PPUSH
15623: LD_EXP 9
15627: PPUSH
15628: LD_INT 4
15630: PPUSH
15631: LD_VAR 0 2
15635: PPUSH
15636: CALL_OW 468
15640: GO 15664
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
15642: LD_OWVAR 2
15646: PPUSH
15647: LD_EXP 9
15651: PPUSH
15652: LD_INT 1
15654: PPUSH
15655: LD_VAR 0 2
15659: PPUSH
15660: CALL_OW 468
// end else
15664: GO 15688
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
15666: LD_OWVAR 2
15670: PPUSH
15671: LD_EXP 9
15675: PPUSH
15676: LD_INT 1
15678: PPUSH
15679: LD_VAR 0 2
15683: PPUSH
15684: CALL_OW 468
// end ;
15688: PPOPN 2
15690: END
// on ArtifactUsed ( s , icon , cr1 , cr2 ) do var xy , i , lab , side ;
15691: LD_INT 0
15693: PPUSH
15694: PPUSH
15695: PPUSH
15696: PPUSH
// begin xy := FindArtifact ( 1 ) ;
15697: LD_ADDR_VAR 0 5
15701: PUSH
15702: LD_INT 1
15704: PPUSH
15705: CALL_OW 469
15709: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , xy [ 1 ] , xy [ 2 ] ) ;
15710: LD_ADDR_VAR 0 7
15714: PUSH
15715: LD_INT 22
15717: PUSH
15718: LD_OWVAR 2
15722: PUSH
15723: EMPTY
15724: LIST
15725: LIST
15726: PUSH
15727: LD_INT 2
15729: PUSH
15730: LD_INT 30
15732: PUSH
15733: LD_INT 8
15735: PUSH
15736: EMPTY
15737: LIST
15738: LIST
15739: PUSH
15740: LD_INT 30
15742: PUSH
15743: LD_INT 11
15745: PUSH
15746: EMPTY
15747: LIST
15748: LIST
15749: PUSH
15750: EMPTY
15751: LIST
15752: LIST
15753: LIST
15754: PUSH
15755: EMPTY
15756: LIST
15757: LIST
15758: PPUSH
15759: CALL_OW 69
15763: PPUSH
15764: LD_VAR 0 5
15768: PUSH
15769: LD_INT 1
15771: ARRAY
15772: PPUSH
15773: LD_VAR 0 5
15777: PUSH
15778: LD_INT 2
15780: ARRAY
15781: PPUSH
15782: CALL_OW 73
15786: ST_TO_ADDR
// if icon = art_exp_left then
15787: LD_VAR 0 2
15791: PUSH
15792: LD_INT 1
15794: EQUAL
15795: IFFALSE 15848
// begin SetSpecResearch ( lab , time_res_art , true ) ;
15797: LD_VAR 0 7
15801: PPUSH
15802: LD_EXP 10
15806: PPUSH
15807: LD_INT 1
15809: PPUSH
15810: CALL_OW 486
// SetWorkingProgress ( lab , artifact_progress ) ;
15814: LD_VAR 0 7
15818: PPUSH
15819: LD_EXP 7
15823: PPUSH
15824: CALL_OW 329
// SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
15828: LD_OWVAR 2
15832: PPUSH
15833: LD_INT 1
15835: PPUSH
15836: LD_INT 0
15838: PPUSH
15839: LD_VAR 0 7
15843: PPUSH
15844: CALL_OW 468
// end ; if icon = art_icon then
15848: LD_VAR 0 2
15852: PUSH
15853: LD_EXP 9
15857: EQUAL
15858: IFFALSE 16091
// begin if cr1 in FilterAllUnits ( [ f_type , unit_building ] ) then
15860: LD_VAR 0 3
15864: PUSH
15865: LD_INT 21
15867: PUSH
15868: LD_INT 3
15870: PUSH
15871: EMPTY
15872: LIST
15873: LIST
15874: PPUSH
15875: CALL_OW 69
15879: IN
15880: IFFALSE 16091
// begin side := GetSide ( cr1 ) ;
15882: LD_ADDR_VAR 0 8
15886: PUSH
15887: LD_VAR 0 3
15891: PPUSH
15892: CALL_OW 255
15896: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_siberite_power ] ] ) > 0 then
15897: LD_INT 22
15899: PUSH
15900: LD_VAR 0 8
15904: PUSH
15905: EMPTY
15906: LIST
15907: LIST
15908: PUSH
15909: LD_INT 30
15911: PUSH
15912: LD_INT 28
15914: PUSH
15915: EMPTY
15916: LIST
15917: LIST
15918: PUSH
15919: EMPTY
15920: LIST
15921: LIST
15922: PPUSH
15923: CALL_OW 69
15927: PUSH
15928: LD_INT 0
15930: GREATER
15931: IFFALSE 16091
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_solar_power ] , [ f_btype , b_siberite_power ] ] ] ) do
15933: LD_ADDR_VAR 0 6
15937: PUSH
15938: LD_INT 22
15940: PUSH
15941: LD_VAR 0 8
15945: PUSH
15946: EMPTY
15947: LIST
15948: LIST
15949: PUSH
15950: LD_INT 2
15952: PUSH
15953: LD_INT 30
15955: PUSH
15956: LD_INT 26
15958: PUSH
15959: EMPTY
15960: LIST
15961: LIST
15962: PUSH
15963: LD_INT 30
15965: PUSH
15966: LD_INT 27
15968: PUSH
15969: EMPTY
15970: LIST
15971: LIST
15972: PUSH
15973: LD_INT 30
15975: PUSH
15976: LD_INT 28
15978: PUSH
15979: EMPTY
15980: LIST
15981: LIST
15982: PUSH
15983: EMPTY
15984: LIST
15985: LIST
15986: LIST
15987: LIST
15988: PUSH
15989: EMPTY
15990: LIST
15991: LIST
15992: PPUSH
15993: CALL_OW 69
15997: PUSH
15998: FOR_IN
15999: IFFALSE 16012
// KillUnit ( i ) ;
16001: LD_VAR 0 6
16005: PPUSH
16006: CALL_OW 66
16010: GO 15998
16012: POP
16013: POP
// medal_enabled := true ;
16014: LD_ADDR_EXP 14
16018: PUSH
16019: LD_INT 1
16021: ST_TO_ADDR
// player_res_art := false ;
16022: LD_ADDR_EXP 6
16026: PUSH
16027: LD_INT 0
16029: ST_TO_ADDR
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
16030: LD_OWVAR 2
16034: PPUSH
16035: LD_EXP 9
16039: PPUSH
16040: LD_INT 1
16042: PPUSH
16043: LD_VAR 0 7
16047: PPUSH
16048: CALL_OW 468
// wait ( time_to_reuse ) ;
16052: LD_EXP 12
16056: PPUSH
16057: CALL_OW 67
// SetArtifactUse ( your_side , art_icon , art_unit , lab ) ;
16061: LD_OWVAR 2
16065: PPUSH
16066: LD_EXP 9
16070: PPUSH
16071: LD_INT 4
16073: PPUSH
16074: LD_VAR 0 7
16078: PPUSH
16079: CALL_OW 468
// player_res_art := true ;
16083: LD_ADDR_EXP 6
16087: PUSH
16088: LD_INT 1
16090: ST_TO_ADDR
// end ; end ; end ; end ;
16091: PPOPN 8
16093: END
// on SpecResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
16094: LD_VAR 0 1
16098: PPUSH
16099: CALL_OW 255
16103: PUSH
16104: LD_OWVAR 2
16108: EQUAL
16109: IFFALSE 16146
// begin SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
16111: LD_OWVAR 2
16115: PPUSH
16116: LD_INT 1
16118: PPUSH
16119: LD_INT 0
16121: PPUSH
16122: LD_VAR 0 1
16126: PPUSH
16127: CALL_OW 468
// player_artifact_ready := true ;
16131: LD_ADDR_EXP 8
16135: PUSH
16136: LD_INT 1
16138: ST_TO_ADDR
// Hint ( ArtVulcano ) ;
16139: LD_STRING ArtVulcano
16141: PPUSH
16142: CALL_OW 339
// end ; end ;
16146: PPOPN 1
16148: END
// on SpecResearchCancel ( lab , progress ) do begin artifact_progress := progress ;
16149: LD_ADDR_EXP 7
16153: PUSH
16154: LD_VAR 0 2
16158: ST_TO_ADDR
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) ;
16159: LD_OWVAR 2
16163: PPUSH
16164: LD_INT 1
16166: PPUSH
16167: LD_INT 2
16169: PPUSH
16170: LD_VAR 0 1
16174: PPUSH
16175: CALL_OW 468
// end ; end_of_file end_of_file
16179: PPOPN 2
16181: END
// export al_commander , al_force , al_skill ; export function PrepareAlliance ; var i , filter , un , team ; begin
16182: LD_INT 0
16184: PPUSH
16185: PPUSH
16186: PPUSH
16187: PPUSH
16188: PPUSH
// al_skill := [ 7 , 6 , 5 ] [ Difficulty ] ;
16189: LD_ADDR_EXP 45
16193: PUSH
16194: LD_INT 7
16196: PUSH
16197: LD_INT 6
16199: PUSH
16200: LD_INT 5
16202: PUSH
16203: EMPTY
16204: LIST
16205: LIST
16206: LIST
16207: PUSH
16208: LD_OWVAR 67
16212: ARRAY
16213: ST_TO_ADDR
// al_force := [ ] ;
16214: LD_ADDR_EXP 44
16218: PUSH
16219: EMPTY
16220: ST_TO_ADDR
// RemoveAlliance ;
16221: CALL 16874 0 0
// ResetFog ;
16225: CALL_OW 335
// your_side := 7 ;
16229: LD_ADDR_OWVAR 2
16233: PUSH
16234: LD_INT 7
16236: ST_TO_ADDR
// uc_side := 7 ;
16237: LD_ADDR_OWVAR 20
16241: PUSH
16242: LD_INT 7
16244: ST_TO_ADDR
// hc_gallery :=  ;
16245: LD_ADDR_OWVAR 33
16249: PUSH
16250: LD_STRING 
16252: ST_TO_ADDR
// hc_name :=  ;
16253: LD_ADDR_OWVAR 26
16257: PUSH
16258: LD_STRING 
16260: ST_TO_ADDR
// hc_importance := 0 ;
16261: LD_ADDR_OWVAR 32
16265: PUSH
16266: LD_INT 0
16268: ST_TO_ADDR
// for i = 1 to 17 do
16269: LD_ADDR_VAR 0 2
16273: PUSH
16274: DOUBLE
16275: LD_INT 1
16277: DEC
16278: ST_TO_ADDR
16279: LD_INT 17
16281: PUSH
16282: FOR_TO
16283: IFFALSE 16363
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
16285: LD_ADDR_OWVAR 21
16289: PUSH
16290: LD_INT 1
16292: PUSH
16293: LD_INT 3
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: PUSH
16300: LD_INT 1
16302: PPUSH
16303: LD_INT 2
16305: PPUSH
16306: CALL_OW 12
16310: ARRAY
16311: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , al_skill ) ;
16312: LD_INT 0
16314: PPUSH
16315: LD_INT 1
16317: PPUSH
16318: LD_INT 4
16320: PPUSH
16321: CALL_OW 12
16325: PPUSH
16326: LD_EXP 45
16330: PPUSH
16331: CALL_OW 380
// un := CreateHuman ;
16335: LD_ADDR_VAR 0 4
16339: PUSH
16340: CALL_OW 44
16344: ST_TO_ADDR
// al_force := al_force ^ un ;
16345: LD_ADDR_EXP 44
16349: PUSH
16350: LD_EXP 44
16354: PUSH
16355: LD_VAR 0 4
16359: ADD
16360: ST_TO_ADDR
// end ;
16361: GO 16282
16363: POP
16364: POP
// hc_importance := 100 ;
16365: LD_ADDR_OWVAR 32
16369: PUSH
16370: LD_INT 100
16372: ST_TO_ADDR
// uc_nation := 1 ;
16373: LD_ADDR_OWVAR 21
16377: PUSH
16378: LD_INT 1
16380: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , al_skill ) ;
16381: LD_INT 1
16383: PPUSH
16384: LD_INT 1
16386: PPUSH
16387: LD_EXP 45
16391: PPUSH
16392: CALL_OW 380
// al_commander := CreateHuman ;
16396: LD_ADDR_EXP 43
16400: PUSH
16401: CALL_OW 44
16405: ST_TO_ADDR
// player_commander := al_commander ;
16406: LD_ADDR_EXP 11
16410: PUSH
16411: LD_EXP 43
16415: ST_TO_ADDR
// team := CharacterSelection ( text , [ 9 , 9 , 8 ] [ Difficulty ] , [ 9 , 9 , 8 ] [ Difficulty ] , [ sel_change_class , al_commander , sel_changeable , sel_not_hired ] ^ al_force , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , class_bazooker , class_sniper ] ) ;
16416: LD_ADDR_VAR 0 5
16420: PUSH
16421: LD_STRING text
16423: PPUSH
16424: LD_INT 9
16426: PUSH
16427: LD_INT 9
16429: PUSH
16430: LD_INT 8
16432: PUSH
16433: EMPTY
16434: LIST
16435: LIST
16436: LIST
16437: PUSH
16438: LD_OWVAR 67
16442: ARRAY
16443: PPUSH
16444: LD_INT 9
16446: PUSH
16447: LD_INT 9
16449: PUSH
16450: LD_INT 8
16452: PUSH
16453: EMPTY
16454: LIST
16455: LIST
16456: LIST
16457: PUSH
16458: LD_OWVAR 67
16462: ARRAY
16463: PPUSH
16464: LD_INT -5
16466: PUSH
16467: LD_EXP 43
16471: PUSH
16472: LD_INT -3
16474: PUSH
16475: LD_INT -2
16477: PUSH
16478: EMPTY
16479: LIST
16480: LIST
16481: LIST
16482: LIST
16483: PUSH
16484: LD_EXP 44
16488: ADD
16489: PPUSH
16490: LD_INT 1
16492: PUSH
16493: LD_INT 3
16495: PUSH
16496: LD_INT 2
16498: PUSH
16499: LD_INT 1
16501: PUSH
16502: EMPTY
16503: LIST
16504: LIST
16505: PUSH
16506: LD_INT 4
16508: PUSH
16509: LD_INT 1
16511: PUSH
16512: EMPTY
16513: LIST
16514: LIST
16515: PUSH
16516: LD_INT 9
16518: PUSH
16519: LD_INT 5
16521: PUSH
16522: EMPTY
16523: LIST
16524: LIST
16525: LIST
16526: LIST
16527: LIST
16528: LIST
16529: PPUSH
16530: CALL_OW 42
16534: ST_TO_ADDR
// team := team ^ al_commander ;
16535: LD_ADDR_VAR 0 5
16539: PUSH
16540: LD_VAR 0 5
16544: PUSH
16545: LD_EXP 43
16549: ADD
16550: ST_TO_ADDR
// for i = 1 to team do
16551: LD_ADDR_VAR 0 2
16555: PUSH
16556: DOUBLE
16557: LD_INT 1
16559: DEC
16560: ST_TO_ADDR
16561: LD_VAR 0 5
16565: PUSH
16566: FOR_TO
16567: IFFALSE 16867
// begin if GetClass ( team [ i ] ) = class_mechanic then
16569: LD_VAR 0 5
16573: PUSH
16574: LD_VAR 0 2
16578: ARRAY
16579: PPUSH
16580: CALL_OW 257
16584: PUSH
16585: LD_INT 3
16587: EQUAL
16588: IFFALSE 16844
// begin uc_nation := [ 1 , 3 ] [ rand ( 1 , 2 ) ] ;
16590: LD_ADDR_OWVAR 21
16594: PUSH
16595: LD_INT 1
16597: PUSH
16598: LD_INT 3
16600: PUSH
16601: EMPTY
16602: LIST
16603: LIST
16604: PUSH
16605: LD_INT 1
16607: PPUSH
16608: LD_INT 2
16610: PPUSH
16611: CALL_OW 12
16615: ARRAY
16616: ST_TO_ADDR
// if uc_nation = 1 then
16617: LD_OWVAR 21
16621: PUSH
16622: LD_INT 1
16624: EQUAL
16625: IFFALSE 16709
// begin vc_chassis := [ us_medium_tracked , us_heavy_tracked , us_morphling ] [ i mod 3 + 1 ] ;
16627: LD_ADDR_OWVAR 37
16631: PUSH
16632: LD_INT 3
16634: PUSH
16635: LD_INT 4
16637: PUSH
16638: LD_INT 5
16640: PUSH
16641: EMPTY
16642: LIST
16643: LIST
16644: LIST
16645: PUSH
16646: LD_VAR 0 2
16650: PUSH
16651: LD_INT 3
16653: MOD
16654: PUSH
16655: LD_INT 1
16657: PLUS
16658: ARRAY
16659: ST_TO_ADDR
// vc_engine := engine_siberite ;
16660: LD_ADDR_OWVAR 39
16664: PUSH
16665: LD_INT 3
16667: ST_TO_ADDR
// vc_control := control_manual ;
16668: LD_ADDR_OWVAR 38
16672: PUSH
16673: LD_INT 1
16675: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_laser ] [ rand ( 1 , 3 ) ] ;
16676: LD_ADDR_OWVAR 40
16680: PUSH
16681: LD_INT 4
16683: PUSH
16684: LD_INT 5
16686: PUSH
16687: LD_INT 9
16689: PUSH
16690: EMPTY
16691: LIST
16692: LIST
16693: LIST
16694: PUSH
16695: LD_INT 1
16697: PPUSH
16698: LD_INT 3
16700: PPUSH
16701: CALL_OW 12
16705: ARRAY
16706: ST_TO_ADDR
// end else
16707: GO 16785
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] ;
16709: LD_ADDR_OWVAR 37
16713: PUSH
16714: LD_INT 21
16716: PUSH
16717: LD_INT 23
16719: PUSH
16720: EMPTY
16721: LIST
16722: LIST
16723: PUSH
16724: LD_VAR 0 2
16728: PUSH
16729: LD_INT 2
16731: MOD
16732: PUSH
16733: LD_INT 1
16735: PLUS
16736: ARRAY
16737: ST_TO_ADDR
// vc_engine := engine_siberite ;
16738: LD_ADDR_OWVAR 39
16742: PUSH
16743: LD_INT 3
16745: ST_TO_ADDR
// vc_control := control_manual ;
16746: LD_ADDR_OWVAR 38
16750: PUSH
16751: LD_INT 1
16753: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_rocket_launcher , ru_gatling_gun ] [ rand ( 1 , 3 ) ] ;
16754: LD_ADDR_OWVAR 40
16758: PUSH
16759: LD_INT 44
16761: PUSH
16762: LD_INT 45
16764: PUSH
16765: LD_INT 43
16767: PUSH
16768: EMPTY
16769: LIST
16770: LIST
16771: LIST
16772: PUSH
16773: LD_INT 1
16775: PPUSH
16776: LD_INT 3
16778: PPUSH
16779: CALL_OW 12
16783: ARRAY
16784: ST_TO_ADDR
// end ; un := CreateVehicle ;
16785: LD_ADDR_VAR 0 4
16789: PUSH
16790: CALL_OW 45
16794: ST_TO_ADDR
// SetDir ( un , 5 ) ;
16795: LD_VAR 0 4
16799: PPUSH
16800: LD_INT 5
16802: PPUSH
16803: CALL_OW 233
// PlaceUnitArea ( un , south_resp , false ) ;
16807: LD_VAR 0 4
16811: PPUSH
16812: LD_INT 15
16814: PPUSH
16815: LD_INT 0
16817: PPUSH
16818: CALL_OW 49
// PlaceHumanInUnit ( team [ i ] , un ) ;
16822: LD_VAR 0 5
16826: PUSH
16827: LD_VAR 0 2
16831: ARRAY
16832: PPUSH
16833: LD_VAR 0 4
16837: PPUSH
16838: CALL_OW 52
// end else
16842: GO 16865
// PlaceUnitArea ( team [ i ] , south_resp , false ) ;
16844: LD_VAR 0 5
16848: PUSH
16849: LD_VAR 0 2
16853: ARRAY
16854: PPUSH
16855: LD_INT 15
16857: PPUSH
16858: LD_INT 0
16860: PPUSH
16861: CALL_OW 49
// end ;
16865: GO 16566
16867: POP
16868: POP
// end ;
16869: LD_VAR 0 1
16873: RET
// export function RemoveAlliance ; var i ; begin
16874: LD_INT 0
16876: PPUSH
16877: PPUSH
// DestroyUnit ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
16878: LD_INT 22
16880: PUSH
16881: LD_INT 7
16883: PUSH
16884: EMPTY
16885: LIST
16886: LIST
16887: PUSH
16888: LD_INT 30
16890: PUSH
16891: LD_INT 1
16893: PUSH
16894: EMPTY
16895: LIST
16896: LIST
16897: PUSH
16898: EMPTY
16899: LIST
16900: LIST
16901: PPUSH
16902: CALL_OW 69
16906: PUSH
16907: LD_INT 1
16909: ARRAY
16910: PPUSH
16911: CALL_OW 65
// for i in FilterAllUnits ( [ f_side , 7 ] ) do
16915: LD_ADDR_VAR 0 2
16919: PUSH
16920: LD_INT 22
16922: PUSH
16923: LD_INT 7
16925: PUSH
16926: EMPTY
16927: LIST
16928: LIST
16929: PPUSH
16930: CALL_OW 69
16934: PUSH
16935: FOR_IN
16936: IFFALSE 16949
// RemoveUnit ( i ) ;
16938: LD_VAR 0 2
16942: PPUSH
16943: CALL_OW 64
16947: GO 16935
16949: POP
16950: POP
// end ;
16951: LD_VAR 0 1
16955: RET
// export function PrepareAllianceAI ; var i , un , b ; begin
16956: LD_INT 0
16958: PPUSH
16959: PPUSH
16960: PPUSH
16961: PPUSH
// SetTech ( tech_lapser , 7 , state_researched ) ;
16962: LD_INT 31
16964: PPUSH
16965: LD_INT 7
16967: PPUSH
16968: LD_INT 2
16970: PPUSH
16971: CALL_OW 322
// SetTech ( tech_ai , 7 , state_researched ) ;
16975: LD_INT 32
16977: PPUSH
16978: LD_INT 7
16980: PPUSH
16981: LD_INT 2
16983: PPUSH
16984: CALL_OW 322
// SetTech ( tech_comp3 , 7 , state_researched ) ;
16988: LD_INT 59
16990: PPUSH
16991: LD_INT 7
16993: PPUSH
16994: LD_INT 2
16996: PPUSH
16997: CALL_OW 322
// al_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
17001: LD_ADDR_EXP 45
17005: PUSH
17006: LD_INT 5
17008: PUSH
17009: LD_INT 6
17011: PUSH
17012: LD_INT 7
17014: PUSH
17015: EMPTY
17016: LIST
17017: LIST
17018: LIST
17019: PUSH
17020: LD_OWVAR 67
17024: ARRAY
17025: ST_TO_ADDR
// al_force := [ ] ;
17026: LD_ADDR_EXP 44
17030: PUSH
17031: EMPTY
17032: ST_TO_ADDR
// al_vehs := [ ] ;
17033: LD_ADDR_EXP 50
17037: PUSH
17038: EMPTY
17039: ST_TO_ADDR
// uc_side := 7 ;
17040: LD_ADDR_OWVAR 20
17044: PUSH
17045: LD_INT 7
17047: ST_TO_ADDR
// uc_nation := 1 ;
17048: LD_ADDR_OWVAR 21
17052: PUSH
17053: LD_INT 1
17055: ST_TO_ADDR
// bc_type := b_oil_mine ;
17056: LD_ADDR_OWVAR 42
17060: PUSH
17061: LD_INT 29
17063: ST_TO_ADDR
// b := CreateBuilding ;
17064: LD_ADDR_VAR 0 4
17068: PUSH
17069: CALL_OW 46
17073: ST_TO_ADDR
// PlaceUnitXYR ( b , 61 , 7 , 0 , false ) ;
17074: LD_VAR 0 4
17078: PPUSH
17079: LD_INT 61
17081: PPUSH
17082: LD_INT 7
17084: PPUSH
17085: LD_INT 0
17087: PPUSH
17088: LD_INT 0
17090: PPUSH
17091: CALL_OW 50
// bc_type := b_siberite_mine ;
17095: LD_ADDR_OWVAR 42
17099: PUSH
17100: LD_INT 30
17102: ST_TO_ADDR
// b := CreateBuilding ;
17103: LD_ADDR_VAR 0 4
17107: PUSH
17108: CALL_OW 46
17112: ST_TO_ADDR
// PlaceUnitXYR ( b , 69 , 13 , 0 , false ) ;
17113: LD_VAR 0 4
17117: PPUSH
17118: LD_INT 69
17120: PPUSH
17121: LD_INT 13
17123: PPUSH
17124: LD_INT 0
17126: PPUSH
17127: LD_INT 0
17129: PPUSH
17130: CALL_OW 50
// hc_gallery :=  ;
17134: LD_ADDR_OWVAR 33
17138: PUSH
17139: LD_STRING 
17141: ST_TO_ADDR
// hc_name :=  ;
17142: LD_ADDR_OWVAR 26
17146: PUSH
17147: LD_STRING 
17149: ST_TO_ADDR
// hc_importance := 0 ;
17150: LD_ADDR_OWVAR 32
17154: PUSH
17155: LD_INT 0
17157: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_bunker ] ] ) do
17158: LD_ADDR_VAR 0 2
17162: PUSH
17163: LD_INT 22
17165: PUSH
17166: LD_INT 7
17168: PUSH
17169: EMPTY
17170: LIST
17171: LIST
17172: PUSH
17173: LD_INT 30
17175: PUSH
17176: LD_INT 32
17178: PUSH
17179: EMPTY
17180: LIST
17181: LIST
17182: PUSH
17183: EMPTY
17184: LIST
17185: LIST
17186: PPUSH
17187: CALL_OW 69
17191: PUSH
17192: FOR_IN
17193: IFFALSE 17263
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17195: LD_ADDR_OWVAR 21
17199: PUSH
17200: LD_INT 1
17202: PUSH
17203: LD_INT 3
17205: PUSH
17206: EMPTY
17207: LIST
17208: LIST
17209: PUSH
17210: LD_INT 1
17212: PPUSH
17213: LD_INT 2
17215: PPUSH
17216: CALL_OW 12
17220: ARRAY
17221: ST_TO_ADDR
// PrepareHuman ( false , 1 , al_skill ) ;
17222: LD_INT 0
17224: PPUSH
17225: LD_INT 1
17227: PPUSH
17228: LD_EXP 45
17232: PPUSH
17233: CALL_OW 380
// un := CreateHuman ;
17237: LD_ADDR_VAR 0 3
17241: PUSH
17242: CALL_OW 44
17246: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
17247: LD_VAR 0 3
17251: PPUSH
17252: LD_VAR 0 2
17256: PPUSH
17257: CALL_OW 52
// end ;
17261: GO 17192
17263: POP
17264: POP
// for i = 1 to 3 do
17265: LD_ADDR_VAR 0 2
17269: PUSH
17270: DOUBLE
17271: LD_INT 1
17273: DEC
17274: ST_TO_ADDR
17275: LD_INT 3
17277: PUSH
17278: FOR_TO
17279: IFFALSE 17347
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17281: LD_ADDR_OWVAR 21
17285: PUSH
17286: LD_INT 1
17288: PUSH
17289: LD_INT 3
17291: PUSH
17292: EMPTY
17293: LIST
17294: LIST
17295: PUSH
17296: LD_INT 1
17298: PPUSH
17299: LD_INT 2
17301: PPUSH
17302: CALL_OW 12
17306: ARRAY
17307: ST_TO_ADDR
// PrepareHuman ( false , 4 , al_skill ) ;
17308: LD_INT 0
17310: PPUSH
17311: LD_INT 4
17313: PPUSH
17314: LD_EXP 45
17318: PPUSH
17319: CALL_OW 380
// un := CreateHuman ;
17323: LD_ADDR_VAR 0 3
17327: PUSH
17328: CALL_OW 44
17332: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_lab1 ) ;
17333: LD_VAR 0 3
17337: PPUSH
17338: LD_INT 164
17340: PPUSH
17341: CALL_OW 52
// end ;
17345: GO 17278
17347: POP
17348: POP
// for i = 1 to 4 do
17349: LD_ADDR_VAR 0 2
17353: PUSH
17354: DOUBLE
17355: LD_INT 1
17357: DEC
17358: ST_TO_ADDR
17359: LD_INT 4
17361: PUSH
17362: FOR_TO
17363: IFFALSE 17454
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17365: LD_ADDR_OWVAR 21
17369: PUSH
17370: LD_INT 1
17372: PUSH
17373: LD_INT 3
17375: PUSH
17376: EMPTY
17377: LIST
17378: LIST
17379: PUSH
17380: LD_INT 1
17382: PPUSH
17383: LD_INT 2
17385: PPUSH
17386: CALL_OW 12
17390: ARRAY
17391: ST_TO_ADDR
// PrepareHuman ( false , [ class_sniper , class_bazooker , class_bazooker ] [ Rand ( 1 , 3 ) ] , al_skill ) ;
17392: LD_INT 0
17394: PPUSH
17395: LD_INT 5
17397: PUSH
17398: LD_INT 9
17400: PUSH
17401: LD_INT 9
17403: PUSH
17404: EMPTY
17405: LIST
17406: LIST
17407: LIST
17408: PUSH
17409: LD_INT 1
17411: PPUSH
17412: LD_INT 3
17414: PPUSH
17415: CALL_OW 12
17419: ARRAY
17420: PPUSH
17421: LD_EXP 45
17425: PPUSH
17426: CALL_OW 380
// un := CreateHuman ;
17430: LD_ADDR_VAR 0 3
17434: PUSH
17435: CALL_OW 44
17439: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_bar ) ;
17440: LD_VAR 0 3
17444: PPUSH
17445: LD_INT 173
17447: PPUSH
17448: CALL_OW 52
// end ;
17452: GO 17362
17454: POP
17455: POP
// for i = 1 to 4 do
17456: LD_ADDR_VAR 0 2
17460: PUSH
17461: DOUBLE
17462: LD_INT 1
17464: DEC
17465: ST_TO_ADDR
17466: LD_INT 4
17468: PUSH
17469: FOR_TO
17470: IFFALSE 17568
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17472: LD_ADDR_OWVAR 21
17476: PUSH
17477: LD_INT 1
17479: PUSH
17480: LD_INT 3
17482: PUSH
17483: EMPTY
17484: LIST
17485: LIST
17486: PUSH
17487: LD_INT 1
17489: PPUSH
17490: LD_INT 2
17492: PPUSH
17493: CALL_OW 12
17497: ARRAY
17498: ST_TO_ADDR
// PrepareHuman ( false , 3 , al_skill ) ;
17499: LD_INT 0
17501: PPUSH
17502: LD_INT 3
17504: PPUSH
17505: LD_EXP 45
17509: PPUSH
17510: CALL_OW 380
// un := CreateHuman ;
17514: LD_ADDR_VAR 0 3
17518: PUSH
17519: CALL_OW 44
17523: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
17524: LD_VAR 0 3
17528: PPUSH
17529: LD_INT 22
17531: PUSH
17532: LD_INT 7
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: PUSH
17539: LD_INT 30
17541: PUSH
17542: LD_INT 3
17544: PUSH
17545: EMPTY
17546: LIST
17547: LIST
17548: PUSH
17549: EMPTY
17550: LIST
17551: LIST
17552: PPUSH
17553: CALL_OW 69
17557: PUSH
17558: LD_INT 1
17560: ARRAY
17561: PPUSH
17562: CALL_OW 52
// end ;
17566: GO 17469
17568: POP
17569: POP
// for i = 1 to 4 do
17570: LD_ADDR_VAR 0 2
17574: PUSH
17575: DOUBLE
17576: LD_INT 1
17578: DEC
17579: ST_TO_ADDR
17580: LD_INT 4
17582: PUSH
17583: FOR_TO
17584: IFFALSE 17652
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17586: LD_ADDR_OWVAR 21
17590: PUSH
17591: LD_INT 1
17593: PUSH
17594: LD_INT 3
17596: PUSH
17597: EMPTY
17598: LIST
17599: LIST
17600: PUSH
17601: LD_INT 1
17603: PPUSH
17604: LD_INT 2
17606: PPUSH
17607: CALL_OW 12
17611: ARRAY
17612: ST_TO_ADDR
// PrepareHuman ( false , 2 , al_skill ) ;
17613: LD_INT 0
17615: PPUSH
17616: LD_INT 2
17618: PPUSH
17619: LD_EXP 45
17623: PPUSH
17624: CALL_OW 380
// un := CreateHuman ;
17628: LD_ADDR_VAR 0 3
17632: PUSH
17633: CALL_OW 44
17637: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_depot ) ;
17638: LD_VAR 0 3
17642: PPUSH
17643: LD_INT 162
17645: PPUSH
17646: CALL_OW 52
// end ;
17650: GO 17583
17652: POP
17653: POP
// uc_nation := 3 ;
17654: LD_ADDR_OWVAR 21
17658: PUSH
17659: LD_INT 3
17661: ST_TO_ADDR
// vc_chassis := ru_medium_wheeled ;
17662: LD_ADDR_OWVAR 37
17666: PUSH
17667: LD_INT 21
17669: ST_TO_ADDR
// vc_engine := engine_siberite ;
17670: LD_ADDR_OWVAR 39
17674: PUSH
17675: LD_INT 3
17677: ST_TO_ADDR
// vc_control := control_computer ;
17678: LD_ADDR_OWVAR 38
17682: PUSH
17683: LD_INT 3
17685: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
17686: LD_ADDR_OWVAR 40
17690: PUSH
17691: LD_INT 51
17693: ST_TO_ADDR
// PlaceUnitXY ( CreateVehicle , 49 , 13 , false ) ;
17694: CALL_OW 45
17698: PPUSH
17699: LD_INT 49
17701: PPUSH
17702: LD_INT 13
17704: PPUSH
17705: LD_INT 0
17707: PPUSH
17708: CALL_OW 48
// al_turrets := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_turret ] ] ) ;
17712: LD_ADDR_EXP 52
17716: PUSH
17717: LD_INT 22
17719: PUSH
17720: LD_INT 7
17722: PUSH
17723: EMPTY
17724: LIST
17725: LIST
17726: PUSH
17727: LD_INT 30
17729: PUSH
17730: LD_INT 33
17732: PUSH
17733: EMPTY
17734: LIST
17735: LIST
17736: PUSH
17737: EMPTY
17738: LIST
17739: LIST
17740: PPUSH
17741: CALL_OW 69
17745: ST_TO_ADDR
// for i = 1 to FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_btype , b_turret ] , [ f_bweapon , 0 ] ] ] ) do
17746: LD_ADDR_VAR 0 2
17750: PUSH
17751: DOUBLE
17752: LD_INT 1
17754: DEC
17755: ST_TO_ADDR
17756: LD_INT 22
17758: PUSH
17759: LD_INT 7
17761: PUSH
17762: EMPTY
17763: LIST
17764: LIST
17765: PUSH
17766: LD_INT 30
17768: PUSH
17769: LD_INT 33
17771: PUSH
17772: EMPTY
17773: LIST
17774: LIST
17775: PUSH
17776: LD_INT 35
17778: PUSH
17779: LD_INT 0
17781: PUSH
17782: EMPTY
17783: LIST
17784: LIST
17785: PUSH
17786: EMPTY
17787: LIST
17788: LIST
17789: LIST
17790: PUSH
17791: EMPTY
17792: LIST
17793: PPUSH
17794: CALL_OW 69
17798: PUSH
17799: FOR_TO
17800: IFFALSE 17860
// AddComPlaceWeapon ( FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_btype , b_turret ] , [ f_bweapon , 0 ] ] ] ) [ i ] , ru_time_lapser ) ;
17802: LD_INT 22
17804: PUSH
17805: LD_INT 7
17807: PUSH
17808: EMPTY
17809: LIST
17810: LIST
17811: PUSH
17812: LD_INT 30
17814: PUSH
17815: LD_INT 33
17817: PUSH
17818: EMPTY
17819: LIST
17820: LIST
17821: PUSH
17822: LD_INT 35
17824: PUSH
17825: LD_INT 0
17827: PUSH
17828: EMPTY
17829: LIST
17830: LIST
17831: PUSH
17832: EMPTY
17833: LIST
17834: LIST
17835: LIST
17836: PUSH
17837: EMPTY
17838: LIST
17839: PPUSH
17840: CALL_OW 69
17844: PUSH
17845: LD_VAR 0 2
17849: ARRAY
17850: PPUSH
17851: LD_INT 49
17853: PPUSH
17854: CALL_OW 208
17858: GO 17799
17860: POP
17861: POP
// end ;
17862: LD_VAR 0 1
17866: RET
// export al_eng , al_sold , al_mech , al_sci ; export al_vehs , al_cargo , al_turrets ; export al_dep , al_lab , al_fac ; export al_bul ; every 0 0$02 trigger your_side = 1 do var i , un , veh , cr ;
17867: LD_OWVAR 2
17871: PUSH
17872: LD_INT 1
17874: EQUAL
17875: IFFALSE 18861
17877: GO 17879
17879: DISABLE
17880: LD_INT 0
17882: PPUSH
17883: PPUSH
17884: PPUSH
17885: PPUSH
// begin enable ;
17886: ENABLE
// al_bul := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] ] ) ;
17887: LD_ADDR_EXP 56
17891: PUSH
17892: LD_INT 22
17894: PUSH
17895: LD_INT 7
17897: PUSH
17898: EMPTY
17899: LIST
17900: LIST
17901: PUSH
17902: LD_INT 21
17904: PUSH
17905: LD_INT 3
17907: PUSH
17908: EMPTY
17909: LIST
17910: LIST
17911: PUSH
17912: EMPTY
17913: LIST
17914: LIST
17915: PPUSH
17916: CALL_OW 69
17920: ST_TO_ADDR
// al_lab := [ al_lab1 , al_lab2 ] ;
17921: LD_ADDR_EXP 54
17925: PUSH
17926: LD_INT 164
17928: PUSH
17929: LD_INT 197
17931: PUSH
17932: EMPTY
17933: LIST
17934: LIST
17935: ST_TO_ADDR
// al_dep := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
17936: LD_ADDR_EXP 53
17940: PUSH
17941: LD_INT 22
17943: PUSH
17944: LD_INT 7
17946: PUSH
17947: EMPTY
17948: LIST
17949: LIST
17950: PUSH
17951: LD_INT 30
17953: PUSH
17954: LD_INT 1
17956: PUSH
17957: EMPTY
17958: LIST
17959: LIST
17960: PUSH
17961: EMPTY
17962: LIST
17963: LIST
17964: PPUSH
17965: CALL_OW 69
17969: PUSH
17970: LD_INT 1
17972: ARRAY
17973: ST_TO_ADDR
// al_fac := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
17974: LD_ADDR_EXP 55
17978: PUSH
17979: LD_INT 22
17981: PUSH
17982: LD_INT 7
17984: PUSH
17985: EMPTY
17986: LIST
17987: LIST
17988: PUSH
17989: LD_INT 30
17991: PUSH
17992: LD_INT 3
17994: PUSH
17995: EMPTY
17996: LIST
17997: LIST
17998: PUSH
17999: EMPTY
18000: LIST
18001: LIST
18002: PPUSH
18003: CALL_OW 69
18007: PUSH
18008: LD_INT 1
18010: ARRAY
18011: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) then
18012: LD_INT 22
18014: PUSH
18015: LD_INT 7
18017: PUSH
18018: EMPTY
18019: LIST
18020: LIST
18021: PUSH
18022: LD_INT 34
18024: PUSH
18025: LD_INT 51
18027: PUSH
18028: EMPTY
18029: LIST
18030: LIST
18031: PUSH
18032: EMPTY
18033: LIST
18034: LIST
18035: PPUSH
18036: CALL_OW 69
18040: IFFALSE 18080
// al_cargo := FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
18042: LD_ADDR_EXP 51
18046: PUSH
18047: LD_INT 22
18049: PUSH
18050: LD_INT 7
18052: PUSH
18053: EMPTY
18054: LIST
18055: LIST
18056: PUSH
18057: LD_INT 34
18059: PUSH
18060: LD_INT 51
18062: PUSH
18063: EMPTY
18064: LIST
18065: LIST
18066: PUSH
18067: EMPTY
18068: LIST
18069: LIST
18070: PPUSH
18071: CALL_OW 69
18075: PUSH
18076: LD_INT 1
18078: ARRAY
18079: ST_TO_ADDR
// al_sold := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , class_bazooker ] ] ) ;
18080: LD_ADDR_EXP 47
18084: PUSH
18085: LD_INT 22
18087: PUSH
18088: LD_INT 7
18090: PUSH
18091: EMPTY
18092: LIST
18093: LIST
18094: PUSH
18095: LD_INT 25
18097: PUSH
18098: LD_INT 9
18100: PUSH
18101: EMPTY
18102: LIST
18103: LIST
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: PPUSH
18109: CALL_OW 69
18113: ST_TO_ADDR
// al_eng := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 2 ] ] ) ;
18114: LD_ADDR_EXP 46
18118: PUSH
18119: LD_INT 22
18121: PUSH
18122: LD_INT 7
18124: PUSH
18125: EMPTY
18126: LIST
18127: LIST
18128: PUSH
18129: LD_INT 25
18131: PUSH
18132: LD_INT 2
18134: PUSH
18135: EMPTY
18136: LIST
18137: LIST
18138: PUSH
18139: EMPTY
18140: LIST
18141: LIST
18142: PPUSH
18143: CALL_OW 69
18147: ST_TO_ADDR
// al_mech := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 3 ] ] ) ;
18148: LD_ADDR_EXP 48
18152: PUSH
18153: LD_INT 22
18155: PUSH
18156: LD_INT 7
18158: PUSH
18159: EMPTY
18160: LIST
18161: LIST
18162: PUSH
18163: LD_INT 25
18165: PUSH
18166: LD_INT 3
18168: PUSH
18169: EMPTY
18170: LIST
18171: LIST
18172: PUSH
18173: EMPTY
18174: LIST
18175: LIST
18176: PPUSH
18177: CALL_OW 69
18181: ST_TO_ADDR
// al_sci := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 4 ] ] ) ;
18182: LD_ADDR_EXP 49
18186: PUSH
18187: LD_INT 22
18189: PUSH
18190: LD_INT 7
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PUSH
18197: LD_INT 25
18199: PUSH
18200: LD_INT 4
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: PUSH
18207: EMPTY
18208: LIST
18209: LIST
18210: PPUSH
18211: CALL_OW 69
18215: ST_TO_ADDR
// if not HasTask ( al_cargo ) and GetCargo ( al_cargo , mat_cans ) < 100 then
18216: LD_EXP 51
18220: PPUSH
18221: CALL_OW 314
18225: NOT
18226: PUSH
18227: LD_EXP 51
18231: PPUSH
18232: LD_INT 1
18234: PPUSH
18235: CALL_OW 289
18239: PUSH
18240: LD_INT 100
18242: LESS
18243: AND
18244: IFFALSE 18292
// begin cr := GetListOfCratesInArea ( us_crates ) ;
18246: LD_ADDR_VAR 0 4
18250: PUSH
18251: LD_INT 12
18253: PPUSH
18254: CALL_OW 435
18258: ST_TO_ADDR
// if cr then
18259: LD_VAR 0 4
18263: IFFALSE 18292
// ComCollect ( al_cargo , cr [ 1 ] , cr [ 2 ] ) ;
18265: LD_EXP 51
18269: PPUSH
18270: LD_VAR 0 4
18274: PUSH
18275: LD_INT 1
18277: ARRAY
18278: PPUSH
18279: LD_VAR 0 4
18283: PUSH
18284: LD_INT 2
18286: ARRAY
18287: PPUSH
18288: CALL_OW 117
// end ; if UnitFilter ( al_bul , [ f_not , [ f_lives , 1000 ] ] ) then
18292: LD_EXP 56
18296: PPUSH
18297: LD_INT 3
18299: PUSH
18300: LD_INT 24
18302: PUSH
18303: LD_INT 1000
18305: PUSH
18306: EMPTY
18307: LIST
18308: LIST
18309: PUSH
18310: EMPTY
18311: LIST
18312: LIST
18313: PPUSH
18314: CALL_OW 72
18318: IFFALSE 18448
// begin if al_eng then
18320: LD_EXP 46
18324: IFFALSE 18446
// for i = 1 to al_eng do
18326: LD_ADDR_VAR 0 1
18330: PUSH
18331: DOUBLE
18332: LD_INT 1
18334: DEC
18335: ST_TO_ADDR
18336: LD_EXP 46
18340: PUSH
18341: FOR_TO
18342: IFFALSE 18444
// if IsInUnit ( al_eng [ i ] ) then
18344: LD_EXP 46
18348: PUSH
18349: LD_VAR 0 1
18353: ARRAY
18354: PPUSH
18355: CALL_OW 310
18359: IFFALSE 18378
// ComExitBuilding ( al_eng [ i ] ) else
18361: LD_EXP 46
18365: PUSH
18366: LD_VAR 0 1
18370: ARRAY
18371: PPUSH
18372: CALL_OW 122
18376: GO 18442
// if not HasTask ( al_eng [ i ] ) then
18378: LD_EXP 46
18382: PUSH
18383: LD_VAR 0 1
18387: ARRAY
18388: PPUSH
18389: CALL_OW 314
18393: NOT
18394: IFFALSE 18442
// ComRepairBuilding ( al_eng [ i ] , UnitFilter ( al_bul , [ f_not , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
18396: LD_EXP 46
18400: PUSH
18401: LD_VAR 0 1
18405: ARRAY
18406: PPUSH
18407: LD_EXP 56
18411: PPUSH
18412: LD_INT 3
18414: PUSH
18415: LD_INT 24
18417: PUSH
18418: LD_INT 1000
18420: PUSH
18421: EMPTY
18422: LIST
18423: LIST
18424: PUSH
18425: EMPTY
18426: LIST
18427: LIST
18428: PPUSH
18429: CALL_OW 72
18433: PUSH
18434: LD_INT 1
18436: ARRAY
18437: PPUSH
18438: CALL_OW 130
18442: GO 18341
18444: POP
18445: POP
// end else
18446: GO 18530
// if al_eng then
18448: LD_EXP 46
18452: IFFALSE 18530
// if not IsInUnit ( al_eng [ 1 ] ) then
18454: LD_EXP 46
18458: PUSH
18459: LD_INT 1
18461: ARRAY
18462: PPUSH
18463: CALL_OW 310
18467: NOT
18468: IFFALSE 18530
// for i = 1 to al_eng do
18470: LD_ADDR_VAR 0 1
18474: PUSH
18475: DOUBLE
18476: LD_INT 1
18478: DEC
18479: ST_TO_ADDR
18480: LD_EXP 46
18484: PUSH
18485: FOR_TO
18486: IFFALSE 18528
// if not IsInUnit ( al_eng [ i ] ) then
18488: LD_EXP 46
18492: PUSH
18493: LD_VAR 0 1
18497: ARRAY
18498: PPUSH
18499: CALL_OW 310
18503: NOT
18504: IFFALSE 18526
// ComEnterUnit ( al_eng [ i ] , al_dep ) ;
18506: LD_EXP 46
18510: PUSH
18511: LD_VAR 0 1
18515: ARRAY
18516: PPUSH
18517: LD_EXP 53
18521: PPUSH
18522: CALL_OW 120
18526: GO 18485
18528: POP
18529: POP
// if al_vehs then
18530: LD_EXP 50
18534: IFFALSE 18634
// if BuildingStatus ( al_fac ) = bs_idle then
18536: LD_EXP 55
18540: PPUSH
18541: CALL_OW 461
18545: PUSH
18546: LD_INT 2
18548: EQUAL
18549: IFFALSE 18634
// begin ComConstruct ( al_fac , al_vehs [ 1 ] , al_vehs [ 2 ] , al_vehs [ 3 ] , al_vehs [ 4 ] ) ;
18551: LD_EXP 55
18555: PPUSH
18556: LD_EXP 50
18560: PUSH
18561: LD_INT 1
18563: ARRAY
18564: PPUSH
18565: LD_EXP 50
18569: PUSH
18570: LD_INT 2
18572: ARRAY
18573: PPUSH
18574: LD_EXP 50
18578: PUSH
18579: LD_INT 3
18581: ARRAY
18582: PPUSH
18583: LD_EXP 50
18587: PUSH
18588: LD_INT 4
18590: ARRAY
18591: PPUSH
18592: CALL_OW 125
// for i = 1 to 4 do
18596: LD_ADDR_VAR 0 1
18600: PUSH
18601: DOUBLE
18602: LD_INT 1
18604: DEC
18605: ST_TO_ADDR
18606: LD_INT 4
18608: PUSH
18609: FOR_TO
18610: IFFALSE 18632
// al_vehs := Delete ( al_vehs , 1 ) ;
18612: LD_ADDR_EXP 50
18616: PUSH
18617: LD_EXP 50
18621: PPUSH
18622: LD_INT 1
18624: PPUSH
18625: CALL_OW 3
18629: ST_TO_ADDR
18630: GO 18609
18632: POP
18633: POP
// end ; if al_force = 0 and tick mod 23100 = 0 then
18634: LD_EXP 44
18638: PUSH
18639: LD_INT 0
18641: EQUAL
18642: PUSH
18643: LD_OWVAR 1
18647: PUSH
18648: LD_INT 23100
18650: MOD
18651: PUSH
18652: LD_INT 0
18654: EQUAL
18655: AND
18656: IFFALSE 18770
// begin for i = 1 to [ 6 , 7 , 8 ] [ Difficulty ] do
18658: LD_ADDR_VAR 0 1
18662: PUSH
18663: DOUBLE
18664: LD_INT 1
18666: DEC
18667: ST_TO_ADDR
18668: LD_INT 6
18670: PUSH
18671: LD_INT 7
18673: PUSH
18674: LD_INT 8
18676: PUSH
18677: EMPTY
18678: LIST
18679: LIST
18680: LIST
18681: PUSH
18682: LD_OWVAR 67
18686: ARRAY
18687: PUSH
18688: FOR_TO
18689: IFFALSE 18768
// begin al_vehs := al_vehs ^ ru_heavy_wheeled ;
18691: LD_ADDR_EXP 50
18695: PUSH
18696: LD_EXP 50
18700: PUSH
18701: LD_INT 23
18703: ADD
18704: ST_TO_ADDR
// al_vehs := al_vehs ^ engine_combustion ;
18705: LD_ADDR_EXP 50
18709: PUSH
18710: LD_EXP 50
18714: PUSH
18715: LD_INT 1
18717: ADD
18718: ST_TO_ADDR
// al_vehs := al_vehs ^ control_computer ;
18719: LD_ADDR_EXP 50
18723: PUSH
18724: LD_EXP 50
18728: PUSH
18729: LD_INT 3
18731: ADD
18732: ST_TO_ADDR
// al_vehs := al_vehs ^ [ ru_heavy_gun , ru_rocket ] [ Rand ( 1 , 2 ) ] ;
18733: LD_ADDR_EXP 50
18737: PUSH
18738: LD_EXP 50
18742: PUSH
18743: LD_INT 46
18745: PUSH
18746: LD_INT 47
18748: PUSH
18749: EMPTY
18750: LIST
18751: LIST
18752: PUSH
18753: LD_INT 1
18755: PPUSH
18756: LD_INT 2
18758: PPUSH
18759: CALL_OW 12
18763: ARRAY
18764: ADD
18765: ST_TO_ADDR
// end ;
18766: GO 18688
18768: POP
18769: POP
// end ; if FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 then
18770: LD_INT 22
18772: PUSH
18773: LD_INT 7
18775: PUSH
18776: EMPTY
18777: LIST
18778: LIST
18779: PUSH
18780: LD_INT 34
18782: PUSH
18783: LD_INT 51
18785: PUSH
18786: EMPTY
18787: LIST
18788: LIST
18789: PUSH
18790: EMPTY
18791: LIST
18792: LIST
18793: PPUSH
18794: CALL_OW 69
18798: PUSH
18799: LD_INT 0
18801: EQUAL
18802: IFFALSE 18825
// ComConstruct ( al_fac , ru_medium_wheeled , engine_combustion , control_computer , ru_cargo_bay ) ;
18804: LD_EXP 55
18808: PPUSH
18809: LD_INT 21
18811: PPUSH
18812: LD_INT 1
18814: PPUSH
18815: LD_INT 3
18817: PPUSH
18818: LD_INT 51
18820: PPUSH
18821: CALL_OW 125
// if al_force >= [ 6 , 7 , 8 ] [ Difficulty ] then
18825: LD_EXP 44
18829: PUSH
18830: LD_INT 6
18832: PUSH
18833: LD_INT 7
18835: PUSH
18836: LD_INT 8
18838: PUSH
18839: EMPTY
18840: LIST
18841: LIST
18842: LIST
18843: PUSH
18844: LD_OWVAR 67
18848: ARRAY
18849: GREATEREQUAL
18850: IFFALSE 18861
// RaiseSailEvent ( event_alliance_attack ) ;
18852: LD_EXP 23
18856: PPUSH
18857: CALL_OW 427
// end ;
18861: PPOPN 4
18863: END
// export function AllianceAttack ( ) ; var path , units ; begin
18864: LD_INT 0
18866: PPUSH
18867: PPUSH
18868: PPUSH
// units := al_force ;
18869: LD_ADDR_VAR 0 3
18873: PUSH
18874: LD_EXP 44
18878: ST_TO_ADDR
// al_force := [ ] ;
18879: LD_ADDR_EXP 44
18883: PUSH
18884: EMPTY
18885: ST_TO_ADDR
// if rand ( 0 , 1 ) then
18886: LD_INT 0
18888: PPUSH
18889: LD_INT 1
18891: PPUSH
18892: CALL_OW 12
18896: IFFALSE 18940
// path := [ [ 49 , 53 ] , [ 52 , 90 ] , [ 63 , 114 ] ] else
18898: LD_ADDR_VAR 0 2
18902: PUSH
18903: LD_INT 49
18905: PUSH
18906: LD_INT 53
18908: PUSH
18909: EMPTY
18910: LIST
18911: LIST
18912: PUSH
18913: LD_INT 52
18915: PUSH
18916: LD_INT 90
18918: PUSH
18919: EMPTY
18920: LIST
18921: LIST
18922: PUSH
18923: LD_INT 63
18925: PUSH
18926: LD_INT 114
18928: PUSH
18929: EMPTY
18930: LIST
18931: LIST
18932: PUSH
18933: EMPTY
18934: LIST
18935: LIST
18936: LIST
18937: ST_TO_ADDR
18938: GO 18969
// path := [ [ 89 , 52 ] , [ 143 , 50 ] ] ;
18940: LD_ADDR_VAR 0 2
18944: PUSH
18945: LD_INT 89
18947: PUSH
18948: LD_INT 52
18950: PUSH
18951: EMPTY
18952: LIST
18953: LIST
18954: PUSH
18955: LD_INT 143
18957: PUSH
18958: LD_INT 50
18960: PUSH
18961: EMPTY
18962: LIST
18963: LIST
18964: PUSH
18965: EMPTY
18966: LIST
18967: LIST
18968: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18969: LD_INT 35
18971: PPUSH
18972: CALL_OW 67
// until not AgressiveMove ( units , path ) ;
18976: LD_VAR 0 3
18980: PPUSH
18981: LD_VAR 0 2
18985: PPUSH
18986: CALL 79808 0 2
18990: NOT
18991: IFFALSE 18969
// end ; end_of_file
18993: LD_VAR 0 1
18997: RET
// export ar_commander , ar_force , ar_skill ; export function PrepareArabian ; var i , filter , un , team ; begin
18998: LD_INT 0
19000: PPUSH
19001: PPUSH
19002: PPUSH
19003: PPUSH
19004: PPUSH
// ar_skill := [ 9 , 8 , 7 ] [ Difficulty ] ;
19005: LD_ADDR_EXP 59
19009: PUSH
19010: LD_INT 9
19012: PUSH
19013: LD_INT 8
19015: PUSH
19016: LD_INT 7
19018: PUSH
19019: EMPTY
19020: LIST
19021: LIST
19022: LIST
19023: PUSH
19024: LD_OWVAR 67
19028: ARRAY
19029: ST_TO_ADDR
// ar_force := [ ] ;
19030: LD_ADDR_EXP 58
19034: PUSH
19035: EMPTY
19036: ST_TO_ADDR
// RemoveAlliance ;
19037: CALL 16874 0 0
// RemoveEnvironmentArea ( evn ) ;
19041: LD_INT 17
19043: PPUSH
19044: CALL_OW 355
// your_side := 2 ;
19048: LD_ADDR_OWVAR 2
19052: PUSH
19053: LD_INT 2
19055: ST_TO_ADDR
// uc_side := 2 ;
19056: LD_ADDR_OWVAR 20
19060: PUSH
19061: LD_INT 2
19063: ST_TO_ADDR
// uc_nation := nation_arabian ;
19064: LD_ADDR_OWVAR 21
19068: PUSH
19069: LD_INT 2
19071: ST_TO_ADDR
// hc_gallery :=  ;
19072: LD_ADDR_OWVAR 33
19076: PUSH
19077: LD_STRING 
19079: ST_TO_ADDR
// hc_name :=  ;
19080: LD_ADDR_OWVAR 26
19084: PUSH
19085: LD_STRING 
19087: ST_TO_ADDR
// hc_importance := 0 ;
19088: LD_ADDR_OWVAR 32
19092: PUSH
19093: LD_INT 0
19095: ST_TO_ADDR
// for i = 1 to 20 do
19096: LD_ADDR_VAR 0 2
19100: PUSH
19101: DOUBLE
19102: LD_INT 1
19104: DEC
19105: ST_TO_ADDR
19106: LD_INT 20
19108: PUSH
19109: FOR_TO
19110: IFFALSE 19175
// begin PrepareHuman ( false , Rand ( 1 , 4 ) , ar_skill ) ;
19112: LD_INT 0
19114: PPUSH
19115: LD_INT 1
19117: PPUSH
19118: LD_INT 4
19120: PPUSH
19121: CALL_OW 12
19125: PPUSH
19126: LD_EXP 59
19130: PPUSH
19131: CALL_OW 380
// un := CreateHuman ;
19135: LD_ADDR_VAR 0 4
19139: PUSH
19140: CALL_OW 44
19144: ST_TO_ADDR
// SetDir ( un , 2 ) ;
19145: LD_VAR 0 4
19149: PPUSH
19150: LD_INT 2
19152: PPUSH
19153: CALL_OW 233
// ar_force := ar_force ^ un ;
19157: LD_ADDR_EXP 58
19161: PUSH
19162: LD_EXP 58
19166: PUSH
19167: LD_VAR 0 4
19171: ADD
19172: ST_TO_ADDR
// end ;
19173: GO 19109
19175: POP
19176: POP
// hc_importance := 100 ;
19177: LD_ADDR_OWVAR 32
19181: PUSH
19182: LD_INT 100
19184: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , ar_skill ) ;
19185: LD_INT 1
19187: PPUSH
19188: LD_INT 11
19190: PPUSH
19191: LD_EXP 59
19195: PPUSH
19196: CALL_OW 380
// ar_commander := CreateHuman ;
19200: LD_ADDR_EXP 57
19204: PUSH
19205: CALL_OW 44
19209: ST_TO_ADDR
// SetDir ( ar_commander , 2 ) ;
19210: LD_EXP 57
19214: PPUSH
19215: LD_INT 2
19217: PPUSH
19218: CALL_OW 233
// player_commander := ar_commander ;
19222: LD_ADDR_EXP 11
19226: PUSH
19227: LD_EXP 57
19231: ST_TO_ADDR
// team := CharacterSelection ( text , [ 14 , 13 , 12 ] [ Difficulty ] , [ 14 , 13 , 12 ] [ Difficulty ] , [ sel_dont_change_class , ar_commander , sel_not_hired , sel_changeable , sel_change_class ] ^ ar_force , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , class_mortar ] ) ;
19232: LD_ADDR_VAR 0 5
19236: PUSH
19237: LD_STRING text
19239: PPUSH
19240: LD_INT 14
19242: PUSH
19243: LD_INT 13
19245: PUSH
19246: LD_INT 12
19248: PUSH
19249: EMPTY
19250: LIST
19251: LIST
19252: LIST
19253: PUSH
19254: LD_OWVAR 67
19258: ARRAY
19259: PPUSH
19260: LD_INT 14
19262: PUSH
19263: LD_INT 13
19265: PUSH
19266: LD_INT 12
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: LIST
19273: PUSH
19274: LD_OWVAR 67
19278: ARRAY
19279: PPUSH
19280: LD_INT -6
19282: PUSH
19283: LD_EXP 57
19287: PUSH
19288: LD_INT -2
19290: PUSH
19291: LD_INT -3
19293: PUSH
19294: LD_INT -5
19296: PUSH
19297: EMPTY
19298: LIST
19299: LIST
19300: LIST
19301: LIST
19302: LIST
19303: PUSH
19304: LD_EXP 58
19308: ADD
19309: PPUSH
19310: LD_INT 1
19312: PUSH
19313: LD_INT 3
19315: PUSH
19316: LD_INT 2
19318: PUSH
19319: LD_INT 1
19321: PUSH
19322: EMPTY
19323: LIST
19324: LIST
19325: PUSH
19326: LD_INT 4
19328: PUSH
19329: LD_INT 1
19331: PUSH
19332: EMPTY
19333: LIST
19334: LIST
19335: PUSH
19336: LD_INT 8
19338: PUSH
19339: EMPTY
19340: LIST
19341: LIST
19342: LIST
19343: LIST
19344: LIST
19345: PPUSH
19346: CALL_OW 42
19350: ST_TO_ADDR
// team := team ^ ar_commander ;
19351: LD_ADDR_VAR 0 5
19355: PUSH
19356: LD_VAR 0 5
19360: PUSH
19361: LD_EXP 57
19365: ADD
19366: ST_TO_ADDR
// for i = 1 to 4 do
19367: LD_ADDR_VAR 0 2
19371: PUSH
19372: DOUBLE
19373: LD_INT 1
19375: DEC
19376: ST_TO_ADDR
19377: LD_INT 4
19379: PUSH
19380: FOR_TO
19381: IFFALSE 19481
// begin vc_chassis := ar_medium_trike ;
19383: LD_ADDR_OWVAR 37
19387: PUSH
19388: LD_INT 13
19390: ST_TO_ADDR
// vc_engine := engine_siberite ;
19391: LD_ADDR_OWVAR 39
19395: PUSH
19396: LD_INT 3
19398: ST_TO_ADDR
// vc_control := control_manual ;
19399: LD_ADDR_OWVAR 38
19403: PUSH
19404: LD_INT 1
19406: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_cargo_bay , ar_crane , ar_gun ] [ i ] ;
19407: LD_ADDR_OWVAR 40
19411: PUSH
19412: LD_INT 27
19414: PUSH
19415: LD_INT 32
19417: PUSH
19418: LD_INT 88
19420: PUSH
19421: LD_INT 27
19423: PUSH
19424: EMPTY
19425: LIST
19426: LIST
19427: LIST
19428: LIST
19429: PUSH
19430: LD_VAR 0 2
19434: ARRAY
19435: ST_TO_ADDR
// un := CreateVehicle ;
19436: LD_ADDR_VAR 0 4
19440: PUSH
19441: CALL_OW 45
19445: ST_TO_ADDR
// SetDir ( un , 2 ) ;
19446: LD_VAR 0 4
19450: PPUSH
19451: LD_INT 2
19453: PPUSH
19454: CALL_OW 233
// PlaceUnitXYR ( un , 54 , 15 , 6 , false ) ;
19458: LD_VAR 0 4
19462: PPUSH
19463: LD_INT 54
19465: PPUSH
19466: LD_INT 15
19468: PPUSH
19469: LD_INT 6
19471: PPUSH
19472: LD_INT 0
19474: PPUSH
19475: CALL_OW 50
// end ;
19479: GO 19380
19481: POP
19482: POP
// for i = 1 to team do
19483: LD_ADDR_VAR 0 2
19487: PUSH
19488: DOUBLE
19489: LD_INT 1
19491: DEC
19492: ST_TO_ADDR
19493: LD_VAR 0 5
19497: PUSH
19498: FOR_TO
19499: IFFALSE 19596
// begin if FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) then
19501: LD_INT 22
19503: PUSH
19504: LD_INT 2
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: PUSH
19511: LD_INT 58
19513: PUSH
19514: EMPTY
19515: LIST
19516: PUSH
19517: EMPTY
19518: LIST
19519: LIST
19520: PPUSH
19521: CALL_OW 69
19525: IFFALSE 19573
// PlaceHumanInUnit ( team [ i ] , FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) [ 1 ] ) else
19527: LD_VAR 0 5
19531: PUSH
19532: LD_VAR 0 2
19536: ARRAY
19537: PPUSH
19538: LD_INT 22
19540: PUSH
19541: LD_INT 2
19543: PUSH
19544: EMPTY
19545: LIST
19546: LIST
19547: PUSH
19548: LD_INT 58
19550: PUSH
19551: EMPTY
19552: LIST
19553: PUSH
19554: EMPTY
19555: LIST
19556: LIST
19557: PPUSH
19558: CALL_OW 69
19562: PUSH
19563: LD_INT 1
19565: ARRAY
19566: PPUSH
19567: CALL_OW 52
19571: GO 19594
// PlaceUnitArea ( team [ i ] , center_resp , false ) ;
19573: LD_VAR 0 5
19577: PUSH
19578: LD_VAR 0 2
19582: ARRAY
19583: PPUSH
19584: LD_INT 16
19586: PPUSH
19587: LD_INT 0
19589: PPUSH
19590: CALL_OW 49
// end ;
19594: GO 19498
19596: POP
19597: POP
// uc_side := 0 ;
19598: LD_ADDR_OWVAR 20
19602: PUSH
19603: LD_INT 0
19605: ST_TO_ADDR
// uc_nation := 0 ;
19606: LD_ADDR_OWVAR 21
19610: PUSH
19611: LD_INT 0
19613: ST_TO_ADDR
// vc_chassis := 31 ;
19614: LD_ADDR_OWVAR 37
19618: PUSH
19619: LD_INT 31
19621: ST_TO_ADDR
// vc_control := control_rider ;
19622: LD_ADDR_OWVAR 38
19626: PUSH
19627: LD_INT 4
19629: ST_TO_ADDR
// PlaceUnitXY ( CreateVehicle , 96 , 20 , false ) ;
19630: CALL_OW 45
19634: PPUSH
19635: LD_INT 96
19637: PPUSH
19638: LD_INT 20
19640: PPUSH
19641: LD_INT 0
19643: PPUSH
19644: CALL_OW 48
// end ; end_of_file end_of_file
19648: LD_VAR 0 1
19652: RET
// export globalGameSaveCounter ; every 0 0$1 do
19653: GO 19655
19655: DISABLE
// begin enable ;
19656: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19657: LD_STRING updateTimer(
19659: PUSH
19660: LD_OWVAR 1
19664: STR
19665: PUSH
19666: LD_STRING );
19668: STR
19669: PPUSH
19670: CALL_OW 559
// end ;
19674: END
// every 0 0$1 do
19675: GO 19677
19677: DISABLE
// begin globalGameSaveCounter := 0 ;
19678: LD_ADDR_EXP 60
19682: PUSH
19683: LD_INT 0
19685: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
19686: LD_STRING setGameSaveCounter(0)
19688: PPUSH
19689: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
19693: LD_STRING initStreamRollete();
19695: PPUSH
19696: CALL_OW 559
// InitStreamMode ;
19700: CALL 21026 0 0
// DefineStreamItems ( false ) ;
19704: LD_INT 0
19706: PPUSH
19707: CALL 21490 0 1
// end ;
19711: END
// export function SOS_MapStart ( ) ; begin
19712: LD_INT 0
19714: PPUSH
// if streamModeActive then
19715: LD_EXP 61
19719: IFFALSE 19728
// DefineStreamItems ( true ) ;
19721: LD_INT 1
19723: PPUSH
19724: CALL 21490 0 1
// UpdateLuaVariables ( ) ;
19728: CALL 19745 0 0
// UpdateFactoryWaypoints ( ) ;
19732: CALL 34351 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19736: CALL 34608 0 0
// end ;
19740: LD_VAR 0 1
19744: RET
// function UpdateLuaVariables ( ) ; begin
19745: LD_INT 0
19747: PPUSH
// if globalGameSaveCounter then
19748: LD_EXP 60
19752: IFFALSE 19786
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
19754: LD_ADDR_EXP 60
19758: PUSH
19759: LD_EXP 60
19763: PPUSH
19764: CALL 78565 0 1
19768: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19769: LD_STRING setGameSaveCounter(
19771: PUSH
19772: LD_EXP 60
19776: STR
19777: PUSH
19778: LD_STRING )
19780: STR
19781: PPUSH
19782: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
19786: LD_STRING setGameDifficulty(
19788: PUSH
19789: LD_OWVAR 67
19793: STR
19794: PUSH
19795: LD_STRING )
19797: STR
19798: PPUSH
19799: CALL_OW 559
// end ;
19803: LD_VAR 0 1
19807: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19808: LD_INT 0
19810: PPUSH
// if p2 = stream_mode then
19811: LD_VAR 0 2
19815: PUSH
19816: LD_INT 100
19818: EQUAL
19819: IFFALSE 20822
// begin if not StreamModeActive then
19821: LD_EXP 61
19825: NOT
19826: IFFALSE 19836
// StreamModeActive := true ;
19828: LD_ADDR_EXP 61
19832: PUSH
19833: LD_INT 1
19835: ST_TO_ADDR
// if p3 = 0 then
19836: LD_VAR 0 3
19840: PUSH
19841: LD_INT 0
19843: EQUAL
19844: IFFALSE 19850
// InitStreamMode ;
19846: CALL 21026 0 0
// if p3 = 1 then
19850: LD_VAR 0 3
19854: PUSH
19855: LD_INT 1
19857: EQUAL
19858: IFFALSE 19868
// sRocket := true ;
19860: LD_ADDR_EXP 66
19864: PUSH
19865: LD_INT 1
19867: ST_TO_ADDR
// if p3 = 2 then
19868: LD_VAR 0 3
19872: PUSH
19873: LD_INT 2
19875: EQUAL
19876: IFFALSE 19886
// sSpeed := true ;
19878: LD_ADDR_EXP 65
19882: PUSH
19883: LD_INT 1
19885: ST_TO_ADDR
// if p3 = 3 then
19886: LD_VAR 0 3
19890: PUSH
19891: LD_INT 3
19893: EQUAL
19894: IFFALSE 19904
// sEngine := true ;
19896: LD_ADDR_EXP 67
19900: PUSH
19901: LD_INT 1
19903: ST_TO_ADDR
// if p3 = 4 then
19904: LD_VAR 0 3
19908: PUSH
19909: LD_INT 4
19911: EQUAL
19912: IFFALSE 19922
// sSpec := true ;
19914: LD_ADDR_EXP 64
19918: PUSH
19919: LD_INT 1
19921: ST_TO_ADDR
// if p3 = 5 then
19922: LD_VAR 0 3
19926: PUSH
19927: LD_INT 5
19929: EQUAL
19930: IFFALSE 19940
// sLevel := true ;
19932: LD_ADDR_EXP 68
19936: PUSH
19937: LD_INT 1
19939: ST_TO_ADDR
// if p3 = 6 then
19940: LD_VAR 0 3
19944: PUSH
19945: LD_INT 6
19947: EQUAL
19948: IFFALSE 19958
// sArmoury := true ;
19950: LD_ADDR_EXP 69
19954: PUSH
19955: LD_INT 1
19957: ST_TO_ADDR
// if p3 = 7 then
19958: LD_VAR 0 3
19962: PUSH
19963: LD_INT 7
19965: EQUAL
19966: IFFALSE 19976
// sRadar := true ;
19968: LD_ADDR_EXP 70
19972: PUSH
19973: LD_INT 1
19975: ST_TO_ADDR
// if p3 = 8 then
19976: LD_VAR 0 3
19980: PUSH
19981: LD_INT 8
19983: EQUAL
19984: IFFALSE 19994
// sBunker := true ;
19986: LD_ADDR_EXP 71
19990: PUSH
19991: LD_INT 1
19993: ST_TO_ADDR
// if p3 = 9 then
19994: LD_VAR 0 3
19998: PUSH
19999: LD_INT 9
20001: EQUAL
20002: IFFALSE 20012
// sHack := true ;
20004: LD_ADDR_EXP 72
20008: PUSH
20009: LD_INT 1
20011: ST_TO_ADDR
// if p3 = 10 then
20012: LD_VAR 0 3
20016: PUSH
20017: LD_INT 10
20019: EQUAL
20020: IFFALSE 20030
// sFire := true ;
20022: LD_ADDR_EXP 73
20026: PUSH
20027: LD_INT 1
20029: ST_TO_ADDR
// if p3 = 11 then
20030: LD_VAR 0 3
20034: PUSH
20035: LD_INT 11
20037: EQUAL
20038: IFFALSE 20048
// sRefresh := true ;
20040: LD_ADDR_EXP 74
20044: PUSH
20045: LD_INT 1
20047: ST_TO_ADDR
// if p3 = 12 then
20048: LD_VAR 0 3
20052: PUSH
20053: LD_INT 12
20055: EQUAL
20056: IFFALSE 20066
// sExp := true ;
20058: LD_ADDR_EXP 75
20062: PUSH
20063: LD_INT 1
20065: ST_TO_ADDR
// if p3 = 13 then
20066: LD_VAR 0 3
20070: PUSH
20071: LD_INT 13
20073: EQUAL
20074: IFFALSE 20084
// sDepot := true ;
20076: LD_ADDR_EXP 76
20080: PUSH
20081: LD_INT 1
20083: ST_TO_ADDR
// if p3 = 14 then
20084: LD_VAR 0 3
20088: PUSH
20089: LD_INT 14
20091: EQUAL
20092: IFFALSE 20102
// sFlag := true ;
20094: LD_ADDR_EXP 77
20098: PUSH
20099: LD_INT 1
20101: ST_TO_ADDR
// if p3 = 15 then
20102: LD_VAR 0 3
20106: PUSH
20107: LD_INT 15
20109: EQUAL
20110: IFFALSE 20120
// sKamikadze := true ;
20112: LD_ADDR_EXP 85
20116: PUSH
20117: LD_INT 1
20119: ST_TO_ADDR
// if p3 = 16 then
20120: LD_VAR 0 3
20124: PUSH
20125: LD_INT 16
20127: EQUAL
20128: IFFALSE 20138
// sTroll := true ;
20130: LD_ADDR_EXP 86
20134: PUSH
20135: LD_INT 1
20137: ST_TO_ADDR
// if p3 = 17 then
20138: LD_VAR 0 3
20142: PUSH
20143: LD_INT 17
20145: EQUAL
20146: IFFALSE 20156
// sSlow := true ;
20148: LD_ADDR_EXP 87
20152: PUSH
20153: LD_INT 1
20155: ST_TO_ADDR
// if p3 = 18 then
20156: LD_VAR 0 3
20160: PUSH
20161: LD_INT 18
20163: EQUAL
20164: IFFALSE 20174
// sLack := true ;
20166: LD_ADDR_EXP 88
20170: PUSH
20171: LD_INT 1
20173: ST_TO_ADDR
// if p3 = 19 then
20174: LD_VAR 0 3
20178: PUSH
20179: LD_INT 19
20181: EQUAL
20182: IFFALSE 20192
// sTank := true ;
20184: LD_ADDR_EXP 90
20188: PUSH
20189: LD_INT 1
20191: ST_TO_ADDR
// if p3 = 20 then
20192: LD_VAR 0 3
20196: PUSH
20197: LD_INT 20
20199: EQUAL
20200: IFFALSE 20210
// sRemote := true ;
20202: LD_ADDR_EXP 91
20206: PUSH
20207: LD_INT 1
20209: ST_TO_ADDR
// if p3 = 21 then
20210: LD_VAR 0 3
20214: PUSH
20215: LD_INT 21
20217: EQUAL
20218: IFFALSE 20228
// sPowell := true ;
20220: LD_ADDR_EXP 92
20224: PUSH
20225: LD_INT 1
20227: ST_TO_ADDR
// if p3 = 22 then
20228: LD_VAR 0 3
20232: PUSH
20233: LD_INT 22
20235: EQUAL
20236: IFFALSE 20246
// sTeleport := true ;
20238: LD_ADDR_EXP 95
20242: PUSH
20243: LD_INT 1
20245: ST_TO_ADDR
// if p3 = 23 then
20246: LD_VAR 0 3
20250: PUSH
20251: LD_INT 23
20253: EQUAL
20254: IFFALSE 20264
// sOilTower := true ;
20256: LD_ADDR_EXP 97
20260: PUSH
20261: LD_INT 1
20263: ST_TO_ADDR
// if p3 = 24 then
20264: LD_VAR 0 3
20268: PUSH
20269: LD_INT 24
20271: EQUAL
20272: IFFALSE 20282
// sShovel := true ;
20274: LD_ADDR_EXP 98
20278: PUSH
20279: LD_INT 1
20281: ST_TO_ADDR
// if p3 = 25 then
20282: LD_VAR 0 3
20286: PUSH
20287: LD_INT 25
20289: EQUAL
20290: IFFALSE 20300
// sSheik := true ;
20292: LD_ADDR_EXP 99
20296: PUSH
20297: LD_INT 1
20299: ST_TO_ADDR
// if p3 = 26 then
20300: LD_VAR 0 3
20304: PUSH
20305: LD_INT 26
20307: EQUAL
20308: IFFALSE 20318
// sEarthquake := true ;
20310: LD_ADDR_EXP 101
20314: PUSH
20315: LD_INT 1
20317: ST_TO_ADDR
// if p3 = 27 then
20318: LD_VAR 0 3
20322: PUSH
20323: LD_INT 27
20325: EQUAL
20326: IFFALSE 20336
// sAI := true ;
20328: LD_ADDR_EXP 102
20332: PUSH
20333: LD_INT 1
20335: ST_TO_ADDR
// if p3 = 28 then
20336: LD_VAR 0 3
20340: PUSH
20341: LD_INT 28
20343: EQUAL
20344: IFFALSE 20354
// sCargo := true ;
20346: LD_ADDR_EXP 105
20350: PUSH
20351: LD_INT 1
20353: ST_TO_ADDR
// if p3 = 29 then
20354: LD_VAR 0 3
20358: PUSH
20359: LD_INT 29
20361: EQUAL
20362: IFFALSE 20372
// sDLaser := true ;
20364: LD_ADDR_EXP 106
20368: PUSH
20369: LD_INT 1
20371: ST_TO_ADDR
// if p3 = 30 then
20372: LD_VAR 0 3
20376: PUSH
20377: LD_INT 30
20379: EQUAL
20380: IFFALSE 20390
// sExchange := true ;
20382: LD_ADDR_EXP 107
20386: PUSH
20387: LD_INT 1
20389: ST_TO_ADDR
// if p3 = 31 then
20390: LD_VAR 0 3
20394: PUSH
20395: LD_INT 31
20397: EQUAL
20398: IFFALSE 20408
// sFac := true ;
20400: LD_ADDR_EXP 108
20404: PUSH
20405: LD_INT 1
20407: ST_TO_ADDR
// if p3 = 32 then
20408: LD_VAR 0 3
20412: PUSH
20413: LD_INT 32
20415: EQUAL
20416: IFFALSE 20426
// sPower := true ;
20418: LD_ADDR_EXP 109
20422: PUSH
20423: LD_INT 1
20425: ST_TO_ADDR
// if p3 = 33 then
20426: LD_VAR 0 3
20430: PUSH
20431: LD_INT 33
20433: EQUAL
20434: IFFALSE 20444
// sRandom := true ;
20436: LD_ADDR_EXP 110
20440: PUSH
20441: LD_INT 1
20443: ST_TO_ADDR
// if p3 = 34 then
20444: LD_VAR 0 3
20448: PUSH
20449: LD_INT 34
20451: EQUAL
20452: IFFALSE 20462
// sShield := true ;
20454: LD_ADDR_EXP 111
20458: PUSH
20459: LD_INT 1
20461: ST_TO_ADDR
// if p3 = 35 then
20462: LD_VAR 0 3
20466: PUSH
20467: LD_INT 35
20469: EQUAL
20470: IFFALSE 20480
// sTime := true ;
20472: LD_ADDR_EXP 112
20476: PUSH
20477: LD_INT 1
20479: ST_TO_ADDR
// if p3 = 36 then
20480: LD_VAR 0 3
20484: PUSH
20485: LD_INT 36
20487: EQUAL
20488: IFFALSE 20498
// sTools := true ;
20490: LD_ADDR_EXP 113
20494: PUSH
20495: LD_INT 1
20497: ST_TO_ADDR
// if p3 = 101 then
20498: LD_VAR 0 3
20502: PUSH
20503: LD_INT 101
20505: EQUAL
20506: IFFALSE 20516
// sSold := true ;
20508: LD_ADDR_EXP 78
20512: PUSH
20513: LD_INT 1
20515: ST_TO_ADDR
// if p3 = 102 then
20516: LD_VAR 0 3
20520: PUSH
20521: LD_INT 102
20523: EQUAL
20524: IFFALSE 20534
// sDiff := true ;
20526: LD_ADDR_EXP 79
20530: PUSH
20531: LD_INT 1
20533: ST_TO_ADDR
// if p3 = 103 then
20534: LD_VAR 0 3
20538: PUSH
20539: LD_INT 103
20541: EQUAL
20542: IFFALSE 20552
// sFog := true ;
20544: LD_ADDR_EXP 82
20548: PUSH
20549: LD_INT 1
20551: ST_TO_ADDR
// if p3 = 104 then
20552: LD_VAR 0 3
20556: PUSH
20557: LD_INT 104
20559: EQUAL
20560: IFFALSE 20570
// sReset := true ;
20562: LD_ADDR_EXP 83
20566: PUSH
20567: LD_INT 1
20569: ST_TO_ADDR
// if p3 = 105 then
20570: LD_VAR 0 3
20574: PUSH
20575: LD_INT 105
20577: EQUAL
20578: IFFALSE 20588
// sSun := true ;
20580: LD_ADDR_EXP 84
20584: PUSH
20585: LD_INT 1
20587: ST_TO_ADDR
// if p3 = 106 then
20588: LD_VAR 0 3
20592: PUSH
20593: LD_INT 106
20595: EQUAL
20596: IFFALSE 20606
// sTiger := true ;
20598: LD_ADDR_EXP 80
20602: PUSH
20603: LD_INT 1
20605: ST_TO_ADDR
// if p3 = 107 then
20606: LD_VAR 0 3
20610: PUSH
20611: LD_INT 107
20613: EQUAL
20614: IFFALSE 20624
// sBomb := true ;
20616: LD_ADDR_EXP 81
20620: PUSH
20621: LD_INT 1
20623: ST_TO_ADDR
// if p3 = 108 then
20624: LD_VAR 0 3
20628: PUSH
20629: LD_INT 108
20631: EQUAL
20632: IFFALSE 20642
// sWound := true ;
20634: LD_ADDR_EXP 89
20638: PUSH
20639: LD_INT 1
20641: ST_TO_ADDR
// if p3 = 109 then
20642: LD_VAR 0 3
20646: PUSH
20647: LD_INT 109
20649: EQUAL
20650: IFFALSE 20660
// sBetray := true ;
20652: LD_ADDR_EXP 93
20656: PUSH
20657: LD_INT 1
20659: ST_TO_ADDR
// if p3 = 110 then
20660: LD_VAR 0 3
20664: PUSH
20665: LD_INT 110
20667: EQUAL
20668: IFFALSE 20678
// sContamin := true ;
20670: LD_ADDR_EXP 94
20674: PUSH
20675: LD_INT 1
20677: ST_TO_ADDR
// if p3 = 111 then
20678: LD_VAR 0 3
20682: PUSH
20683: LD_INT 111
20685: EQUAL
20686: IFFALSE 20696
// sOil := true ;
20688: LD_ADDR_EXP 96
20692: PUSH
20693: LD_INT 1
20695: ST_TO_ADDR
// if p3 = 112 then
20696: LD_VAR 0 3
20700: PUSH
20701: LD_INT 112
20703: EQUAL
20704: IFFALSE 20714
// sStu := true ;
20706: LD_ADDR_EXP 100
20710: PUSH
20711: LD_INT 1
20713: ST_TO_ADDR
// if p3 = 113 then
20714: LD_VAR 0 3
20718: PUSH
20719: LD_INT 113
20721: EQUAL
20722: IFFALSE 20732
// sBazooka := true ;
20724: LD_ADDR_EXP 103
20728: PUSH
20729: LD_INT 1
20731: ST_TO_ADDR
// if p3 = 114 then
20732: LD_VAR 0 3
20736: PUSH
20737: LD_INT 114
20739: EQUAL
20740: IFFALSE 20750
// sMortar := true ;
20742: LD_ADDR_EXP 104
20746: PUSH
20747: LD_INT 1
20749: ST_TO_ADDR
// if p3 = 115 then
20750: LD_VAR 0 3
20754: PUSH
20755: LD_INT 115
20757: EQUAL
20758: IFFALSE 20768
// sRanger := true ;
20760: LD_ADDR_EXP 114
20764: PUSH
20765: LD_INT 1
20767: ST_TO_ADDR
// if p3 = 116 then
20768: LD_VAR 0 3
20772: PUSH
20773: LD_INT 116
20775: EQUAL
20776: IFFALSE 20786
// sComputer := true ;
20778: LD_ADDR_EXP 115
20782: PUSH
20783: LD_INT 1
20785: ST_TO_ADDR
// if p3 = 117 then
20786: LD_VAR 0 3
20790: PUSH
20791: LD_INT 117
20793: EQUAL
20794: IFFALSE 20804
// s30 := true ;
20796: LD_ADDR_EXP 116
20800: PUSH
20801: LD_INT 1
20803: ST_TO_ADDR
// if p3 = 118 then
20804: LD_VAR 0 3
20808: PUSH
20809: LD_INT 118
20811: EQUAL
20812: IFFALSE 20822
// s60 := true ;
20814: LD_ADDR_EXP 117
20818: PUSH
20819: LD_INT 1
20821: ST_TO_ADDR
// end ; if p2 = hack_mode then
20822: LD_VAR 0 2
20826: PUSH
20827: LD_INT 101
20829: EQUAL
20830: IFFALSE 20958
// begin case p3 of 1 :
20832: LD_VAR 0 3
20836: PUSH
20837: LD_INT 1
20839: DOUBLE
20840: EQUAL
20841: IFTRUE 20845
20843: GO 20852
20845: POP
// hHackUnlimitedResources ; 2 :
20846: CALL 33097 0 0
20850: GO 20958
20852: LD_INT 2
20854: DOUBLE
20855: EQUAL
20856: IFTRUE 20860
20858: GO 20867
20860: POP
// hHackSetLevel10 ; 3 :
20861: CALL 33230 0 0
20865: GO 20958
20867: LD_INT 3
20869: DOUBLE
20870: EQUAL
20871: IFTRUE 20875
20873: GO 20882
20875: POP
// hHackSetLevel10YourUnits ; 4 :
20876: CALL 33315 0 0
20880: GO 20958
20882: LD_INT 4
20884: DOUBLE
20885: EQUAL
20886: IFTRUE 20890
20888: GO 20897
20890: POP
// hHackInvincible ; 5 :
20891: CALL 33763 0 0
20895: GO 20958
20897: LD_INT 5
20899: DOUBLE
20900: EQUAL
20901: IFTRUE 20905
20903: GO 20912
20905: POP
// hHackInvisible ; 6 :
20906: CALL 33874 0 0
20910: GO 20958
20912: LD_INT 6
20914: DOUBLE
20915: EQUAL
20916: IFTRUE 20920
20918: GO 20927
20920: POP
// hHackChangeYourSide ; 7 :
20921: CALL 33931 0 0
20925: GO 20958
20927: LD_INT 7
20929: DOUBLE
20930: EQUAL
20931: IFTRUE 20935
20933: GO 20942
20935: POP
// hHackChangeUnitSide ; 8 :
20936: CALL 33973 0 0
20940: GO 20958
20942: LD_INT 8
20944: DOUBLE
20945: EQUAL
20946: IFTRUE 20950
20948: GO 20957
20950: POP
// hHackFog ; end ;
20951: CALL 34074 0 0
20955: GO 20958
20957: POP
// end ; if p2 = game_save_mode then
20958: LD_VAR 0 2
20962: PUSH
20963: LD_INT 102
20965: EQUAL
20966: IFFALSE 21021
// begin if p3 = 1 then
20968: LD_VAR 0 3
20972: PUSH
20973: LD_INT 1
20975: EQUAL
20976: IFFALSE 20988
// globalGameSaveCounter := p4 ;
20978: LD_ADDR_EXP 60
20982: PUSH
20983: LD_VAR 0 4
20987: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
20988: LD_VAR 0 3
20992: PUSH
20993: LD_INT 2
20995: EQUAL
20996: PUSH
20997: LD_EXP 60
21001: AND
21002: IFFALSE 21021
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21004: LD_STRING setGameSaveCounter(
21006: PUSH
21007: LD_EXP 60
21011: STR
21012: PUSH
21013: LD_STRING )
21015: STR
21016: PPUSH
21017: CALL_OW 559
// end ; end ;
21021: LD_VAR 0 7
21025: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
21026: LD_INT 0
21028: PPUSH
// streamModeActive := false ;
21029: LD_ADDR_EXP 61
21033: PUSH
21034: LD_INT 0
21036: ST_TO_ADDR
// normalCounter := 36 ;
21037: LD_ADDR_EXP 62
21041: PUSH
21042: LD_INT 36
21044: ST_TO_ADDR
// hardcoreCounter := 18 ;
21045: LD_ADDR_EXP 63
21049: PUSH
21050: LD_INT 18
21052: ST_TO_ADDR
// sRocket := false ;
21053: LD_ADDR_EXP 66
21057: PUSH
21058: LD_INT 0
21060: ST_TO_ADDR
// sSpeed := false ;
21061: LD_ADDR_EXP 65
21065: PUSH
21066: LD_INT 0
21068: ST_TO_ADDR
// sEngine := false ;
21069: LD_ADDR_EXP 67
21073: PUSH
21074: LD_INT 0
21076: ST_TO_ADDR
// sSpec := false ;
21077: LD_ADDR_EXP 64
21081: PUSH
21082: LD_INT 0
21084: ST_TO_ADDR
// sLevel := false ;
21085: LD_ADDR_EXP 68
21089: PUSH
21090: LD_INT 0
21092: ST_TO_ADDR
// sArmoury := false ;
21093: LD_ADDR_EXP 69
21097: PUSH
21098: LD_INT 0
21100: ST_TO_ADDR
// sRadar := false ;
21101: LD_ADDR_EXP 70
21105: PUSH
21106: LD_INT 0
21108: ST_TO_ADDR
// sBunker := false ;
21109: LD_ADDR_EXP 71
21113: PUSH
21114: LD_INT 0
21116: ST_TO_ADDR
// sHack := false ;
21117: LD_ADDR_EXP 72
21121: PUSH
21122: LD_INT 0
21124: ST_TO_ADDR
// sFire := false ;
21125: LD_ADDR_EXP 73
21129: PUSH
21130: LD_INT 0
21132: ST_TO_ADDR
// sRefresh := false ;
21133: LD_ADDR_EXP 74
21137: PUSH
21138: LD_INT 0
21140: ST_TO_ADDR
// sExp := false ;
21141: LD_ADDR_EXP 75
21145: PUSH
21146: LD_INT 0
21148: ST_TO_ADDR
// sDepot := false ;
21149: LD_ADDR_EXP 76
21153: PUSH
21154: LD_INT 0
21156: ST_TO_ADDR
// sFlag := false ;
21157: LD_ADDR_EXP 77
21161: PUSH
21162: LD_INT 0
21164: ST_TO_ADDR
// sKamikadze := false ;
21165: LD_ADDR_EXP 85
21169: PUSH
21170: LD_INT 0
21172: ST_TO_ADDR
// sTroll := false ;
21173: LD_ADDR_EXP 86
21177: PUSH
21178: LD_INT 0
21180: ST_TO_ADDR
// sSlow := false ;
21181: LD_ADDR_EXP 87
21185: PUSH
21186: LD_INT 0
21188: ST_TO_ADDR
// sLack := false ;
21189: LD_ADDR_EXP 88
21193: PUSH
21194: LD_INT 0
21196: ST_TO_ADDR
// sTank := false ;
21197: LD_ADDR_EXP 90
21201: PUSH
21202: LD_INT 0
21204: ST_TO_ADDR
// sRemote := false ;
21205: LD_ADDR_EXP 91
21209: PUSH
21210: LD_INT 0
21212: ST_TO_ADDR
// sPowell := false ;
21213: LD_ADDR_EXP 92
21217: PUSH
21218: LD_INT 0
21220: ST_TO_ADDR
// sTeleport := false ;
21221: LD_ADDR_EXP 95
21225: PUSH
21226: LD_INT 0
21228: ST_TO_ADDR
// sOilTower := false ;
21229: LD_ADDR_EXP 97
21233: PUSH
21234: LD_INT 0
21236: ST_TO_ADDR
// sShovel := false ;
21237: LD_ADDR_EXP 98
21241: PUSH
21242: LD_INT 0
21244: ST_TO_ADDR
// sSheik := false ;
21245: LD_ADDR_EXP 99
21249: PUSH
21250: LD_INT 0
21252: ST_TO_ADDR
// sEarthquake := false ;
21253: LD_ADDR_EXP 101
21257: PUSH
21258: LD_INT 0
21260: ST_TO_ADDR
// sAI := false ;
21261: LD_ADDR_EXP 102
21265: PUSH
21266: LD_INT 0
21268: ST_TO_ADDR
// sCargo := false ;
21269: LD_ADDR_EXP 105
21273: PUSH
21274: LD_INT 0
21276: ST_TO_ADDR
// sDLaser := false ;
21277: LD_ADDR_EXP 106
21281: PUSH
21282: LD_INT 0
21284: ST_TO_ADDR
// sExchange := false ;
21285: LD_ADDR_EXP 107
21289: PUSH
21290: LD_INT 0
21292: ST_TO_ADDR
// sFac := false ;
21293: LD_ADDR_EXP 108
21297: PUSH
21298: LD_INT 0
21300: ST_TO_ADDR
// sPower := false ;
21301: LD_ADDR_EXP 109
21305: PUSH
21306: LD_INT 0
21308: ST_TO_ADDR
// sRandom := false ;
21309: LD_ADDR_EXP 110
21313: PUSH
21314: LD_INT 0
21316: ST_TO_ADDR
// sShield := false ;
21317: LD_ADDR_EXP 111
21321: PUSH
21322: LD_INT 0
21324: ST_TO_ADDR
// sTime := false ;
21325: LD_ADDR_EXP 112
21329: PUSH
21330: LD_INT 0
21332: ST_TO_ADDR
// sTools := false ;
21333: LD_ADDR_EXP 113
21337: PUSH
21338: LD_INT 0
21340: ST_TO_ADDR
// sSold := false ;
21341: LD_ADDR_EXP 78
21345: PUSH
21346: LD_INT 0
21348: ST_TO_ADDR
// sDiff := false ;
21349: LD_ADDR_EXP 79
21353: PUSH
21354: LD_INT 0
21356: ST_TO_ADDR
// sFog := false ;
21357: LD_ADDR_EXP 82
21361: PUSH
21362: LD_INT 0
21364: ST_TO_ADDR
// sReset := false ;
21365: LD_ADDR_EXP 83
21369: PUSH
21370: LD_INT 0
21372: ST_TO_ADDR
// sSun := false ;
21373: LD_ADDR_EXP 84
21377: PUSH
21378: LD_INT 0
21380: ST_TO_ADDR
// sTiger := false ;
21381: LD_ADDR_EXP 80
21385: PUSH
21386: LD_INT 0
21388: ST_TO_ADDR
// sBomb := false ;
21389: LD_ADDR_EXP 81
21393: PUSH
21394: LD_INT 0
21396: ST_TO_ADDR
// sWound := false ;
21397: LD_ADDR_EXP 89
21401: PUSH
21402: LD_INT 0
21404: ST_TO_ADDR
// sBetray := false ;
21405: LD_ADDR_EXP 93
21409: PUSH
21410: LD_INT 0
21412: ST_TO_ADDR
// sContamin := false ;
21413: LD_ADDR_EXP 94
21417: PUSH
21418: LD_INT 0
21420: ST_TO_ADDR
// sOil := false ;
21421: LD_ADDR_EXP 96
21425: PUSH
21426: LD_INT 0
21428: ST_TO_ADDR
// sStu := false ;
21429: LD_ADDR_EXP 100
21433: PUSH
21434: LD_INT 0
21436: ST_TO_ADDR
// sBazooka := false ;
21437: LD_ADDR_EXP 103
21441: PUSH
21442: LD_INT 0
21444: ST_TO_ADDR
// sMortar := false ;
21445: LD_ADDR_EXP 104
21449: PUSH
21450: LD_INT 0
21452: ST_TO_ADDR
// sRanger := false ;
21453: LD_ADDR_EXP 114
21457: PUSH
21458: LD_INT 0
21460: ST_TO_ADDR
// sComputer := false ;
21461: LD_ADDR_EXP 115
21465: PUSH
21466: LD_INT 0
21468: ST_TO_ADDR
// s30 := false ;
21469: LD_ADDR_EXP 116
21473: PUSH
21474: LD_INT 0
21476: ST_TO_ADDR
// s60 := false ;
21477: LD_ADDR_EXP 117
21481: PUSH
21482: LD_INT 0
21484: ST_TO_ADDR
// end ;
21485: LD_VAR 0 1
21489: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21490: LD_INT 0
21492: PPUSH
21493: PPUSH
21494: PPUSH
21495: PPUSH
21496: PPUSH
21497: PPUSH
21498: PPUSH
// result := [ ] ;
21499: LD_ADDR_VAR 0 2
21503: PUSH
21504: EMPTY
21505: ST_TO_ADDR
// if campaign_id = 1 then
21506: LD_OWVAR 69
21510: PUSH
21511: LD_INT 1
21513: EQUAL
21514: IFFALSE 24680
// begin case mission_number of 1 :
21516: LD_OWVAR 70
21520: PUSH
21521: LD_INT 1
21523: DOUBLE
21524: EQUAL
21525: IFTRUE 21529
21527: GO 21605
21529: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21530: LD_ADDR_VAR 0 2
21534: PUSH
21535: LD_INT 2
21537: PUSH
21538: LD_INT 4
21540: PUSH
21541: LD_INT 11
21543: PUSH
21544: LD_INT 12
21546: PUSH
21547: LD_INT 15
21549: PUSH
21550: LD_INT 16
21552: PUSH
21553: LD_INT 22
21555: PUSH
21556: LD_INT 23
21558: PUSH
21559: LD_INT 26
21561: PUSH
21562: EMPTY
21563: LIST
21564: LIST
21565: LIST
21566: LIST
21567: LIST
21568: LIST
21569: LIST
21570: LIST
21571: LIST
21572: PUSH
21573: LD_INT 101
21575: PUSH
21576: LD_INT 102
21578: PUSH
21579: LD_INT 106
21581: PUSH
21582: LD_INT 116
21584: PUSH
21585: LD_INT 117
21587: PUSH
21588: LD_INT 118
21590: PUSH
21591: EMPTY
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: PUSH
21599: EMPTY
21600: LIST
21601: LIST
21602: ST_TO_ADDR
21603: GO 24678
21605: LD_INT 2
21607: DOUBLE
21608: EQUAL
21609: IFTRUE 21613
21611: GO 21697
21613: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21614: LD_ADDR_VAR 0 2
21618: PUSH
21619: LD_INT 2
21621: PUSH
21622: LD_INT 4
21624: PUSH
21625: LD_INT 11
21627: PUSH
21628: LD_INT 12
21630: PUSH
21631: LD_INT 15
21633: PUSH
21634: LD_INT 16
21636: PUSH
21637: LD_INT 22
21639: PUSH
21640: LD_INT 23
21642: PUSH
21643: LD_INT 26
21645: PUSH
21646: EMPTY
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: PUSH
21657: LD_INT 101
21659: PUSH
21660: LD_INT 102
21662: PUSH
21663: LD_INT 105
21665: PUSH
21666: LD_INT 106
21668: PUSH
21669: LD_INT 108
21671: PUSH
21672: LD_INT 116
21674: PUSH
21675: LD_INT 117
21677: PUSH
21678: LD_INT 118
21680: PUSH
21681: EMPTY
21682: LIST
21683: LIST
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: PUSH
21691: EMPTY
21692: LIST
21693: LIST
21694: ST_TO_ADDR
21695: GO 24678
21697: LD_INT 3
21699: DOUBLE
21700: EQUAL
21701: IFTRUE 21705
21703: GO 21793
21705: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21706: LD_ADDR_VAR 0 2
21710: PUSH
21711: LD_INT 2
21713: PUSH
21714: LD_INT 4
21716: PUSH
21717: LD_INT 5
21719: PUSH
21720: LD_INT 11
21722: PUSH
21723: LD_INT 12
21725: PUSH
21726: LD_INT 15
21728: PUSH
21729: LD_INT 16
21731: PUSH
21732: LD_INT 22
21734: PUSH
21735: LD_INT 26
21737: PUSH
21738: LD_INT 36
21740: PUSH
21741: EMPTY
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: PUSH
21753: LD_INT 101
21755: PUSH
21756: LD_INT 102
21758: PUSH
21759: LD_INT 105
21761: PUSH
21762: LD_INT 106
21764: PUSH
21765: LD_INT 108
21767: PUSH
21768: LD_INT 116
21770: PUSH
21771: LD_INT 117
21773: PUSH
21774: LD_INT 118
21776: PUSH
21777: EMPTY
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: PUSH
21787: EMPTY
21788: LIST
21789: LIST
21790: ST_TO_ADDR
21791: GO 24678
21793: LD_INT 4
21795: DOUBLE
21796: EQUAL
21797: IFTRUE 21801
21799: GO 21897
21801: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21802: LD_ADDR_VAR 0 2
21806: PUSH
21807: LD_INT 2
21809: PUSH
21810: LD_INT 4
21812: PUSH
21813: LD_INT 5
21815: PUSH
21816: LD_INT 8
21818: PUSH
21819: LD_INT 11
21821: PUSH
21822: LD_INT 12
21824: PUSH
21825: LD_INT 15
21827: PUSH
21828: LD_INT 16
21830: PUSH
21831: LD_INT 22
21833: PUSH
21834: LD_INT 23
21836: PUSH
21837: LD_INT 26
21839: PUSH
21840: LD_INT 36
21842: PUSH
21843: EMPTY
21844: LIST
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: PUSH
21857: LD_INT 101
21859: PUSH
21860: LD_INT 102
21862: PUSH
21863: LD_INT 105
21865: PUSH
21866: LD_INT 106
21868: PUSH
21869: LD_INT 108
21871: PUSH
21872: LD_INT 116
21874: PUSH
21875: LD_INT 117
21877: PUSH
21878: LD_INT 118
21880: PUSH
21881: EMPTY
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: PUSH
21891: EMPTY
21892: LIST
21893: LIST
21894: ST_TO_ADDR
21895: GO 24678
21897: LD_INT 5
21899: DOUBLE
21900: EQUAL
21901: IFTRUE 21905
21903: GO 22017
21905: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21906: LD_ADDR_VAR 0 2
21910: PUSH
21911: LD_INT 2
21913: PUSH
21914: LD_INT 4
21916: PUSH
21917: LD_INT 5
21919: PUSH
21920: LD_INT 6
21922: PUSH
21923: LD_INT 8
21925: PUSH
21926: LD_INT 11
21928: PUSH
21929: LD_INT 12
21931: PUSH
21932: LD_INT 15
21934: PUSH
21935: LD_INT 16
21937: PUSH
21938: LD_INT 22
21940: PUSH
21941: LD_INT 23
21943: PUSH
21944: LD_INT 25
21946: PUSH
21947: LD_INT 26
21949: PUSH
21950: LD_INT 36
21952: PUSH
21953: EMPTY
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: PUSH
21969: LD_INT 101
21971: PUSH
21972: LD_INT 102
21974: PUSH
21975: LD_INT 105
21977: PUSH
21978: LD_INT 106
21980: PUSH
21981: LD_INT 108
21983: PUSH
21984: LD_INT 109
21986: PUSH
21987: LD_INT 112
21989: PUSH
21990: LD_INT 116
21992: PUSH
21993: LD_INT 117
21995: PUSH
21996: LD_INT 118
21998: PUSH
21999: EMPTY
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: PUSH
22011: EMPTY
22012: LIST
22013: LIST
22014: ST_TO_ADDR
22015: GO 24678
22017: LD_INT 6
22019: DOUBLE
22020: EQUAL
22021: IFTRUE 22025
22023: GO 22157
22025: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22026: LD_ADDR_VAR 0 2
22030: PUSH
22031: LD_INT 2
22033: PUSH
22034: LD_INT 4
22036: PUSH
22037: LD_INT 5
22039: PUSH
22040: LD_INT 6
22042: PUSH
22043: LD_INT 8
22045: PUSH
22046: LD_INT 11
22048: PUSH
22049: LD_INT 12
22051: PUSH
22052: LD_INT 15
22054: PUSH
22055: LD_INT 16
22057: PUSH
22058: LD_INT 20
22060: PUSH
22061: LD_INT 21
22063: PUSH
22064: LD_INT 22
22066: PUSH
22067: LD_INT 23
22069: PUSH
22070: LD_INT 25
22072: PUSH
22073: LD_INT 26
22075: PUSH
22076: LD_INT 30
22078: PUSH
22079: LD_INT 31
22081: PUSH
22082: LD_INT 32
22084: PUSH
22085: LD_INT 36
22087: PUSH
22088: EMPTY
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: PUSH
22109: LD_INT 101
22111: PUSH
22112: LD_INT 102
22114: PUSH
22115: LD_INT 105
22117: PUSH
22118: LD_INT 106
22120: PUSH
22121: LD_INT 108
22123: PUSH
22124: LD_INT 109
22126: PUSH
22127: LD_INT 112
22129: PUSH
22130: LD_INT 116
22132: PUSH
22133: LD_INT 117
22135: PUSH
22136: LD_INT 118
22138: PUSH
22139: EMPTY
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: PUSH
22151: EMPTY
22152: LIST
22153: LIST
22154: ST_TO_ADDR
22155: GO 24678
22157: LD_INT 7
22159: DOUBLE
22160: EQUAL
22161: IFTRUE 22165
22163: GO 22277
22165: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22166: LD_ADDR_VAR 0 2
22170: PUSH
22171: LD_INT 2
22173: PUSH
22174: LD_INT 4
22176: PUSH
22177: LD_INT 5
22179: PUSH
22180: LD_INT 7
22182: PUSH
22183: LD_INT 11
22185: PUSH
22186: LD_INT 12
22188: PUSH
22189: LD_INT 15
22191: PUSH
22192: LD_INT 16
22194: PUSH
22195: LD_INT 20
22197: PUSH
22198: LD_INT 21
22200: PUSH
22201: LD_INT 22
22203: PUSH
22204: LD_INT 23
22206: PUSH
22207: LD_INT 25
22209: PUSH
22210: LD_INT 26
22212: PUSH
22213: EMPTY
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: PUSH
22229: LD_INT 101
22231: PUSH
22232: LD_INT 102
22234: PUSH
22235: LD_INT 103
22237: PUSH
22238: LD_INT 105
22240: PUSH
22241: LD_INT 106
22243: PUSH
22244: LD_INT 108
22246: PUSH
22247: LD_INT 112
22249: PUSH
22250: LD_INT 116
22252: PUSH
22253: LD_INT 117
22255: PUSH
22256: LD_INT 118
22258: PUSH
22259: EMPTY
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: PUSH
22271: EMPTY
22272: LIST
22273: LIST
22274: ST_TO_ADDR
22275: GO 24678
22277: LD_INT 8
22279: DOUBLE
22280: EQUAL
22281: IFTRUE 22285
22283: GO 22425
22285: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22286: LD_ADDR_VAR 0 2
22290: PUSH
22291: LD_INT 2
22293: PUSH
22294: LD_INT 4
22296: PUSH
22297: LD_INT 5
22299: PUSH
22300: LD_INT 6
22302: PUSH
22303: LD_INT 7
22305: PUSH
22306: LD_INT 8
22308: PUSH
22309: LD_INT 11
22311: PUSH
22312: LD_INT 12
22314: PUSH
22315: LD_INT 15
22317: PUSH
22318: LD_INT 16
22320: PUSH
22321: LD_INT 20
22323: PUSH
22324: LD_INT 21
22326: PUSH
22327: LD_INT 22
22329: PUSH
22330: LD_INT 23
22332: PUSH
22333: LD_INT 25
22335: PUSH
22336: LD_INT 26
22338: PUSH
22339: LD_INT 30
22341: PUSH
22342: LD_INT 31
22344: PUSH
22345: LD_INT 32
22347: PUSH
22348: LD_INT 36
22350: PUSH
22351: EMPTY
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: LIST
22358: LIST
22359: LIST
22360: LIST
22361: LIST
22362: LIST
22363: LIST
22364: LIST
22365: LIST
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: PUSH
22373: LD_INT 101
22375: PUSH
22376: LD_INT 102
22378: PUSH
22379: LD_INT 103
22381: PUSH
22382: LD_INT 105
22384: PUSH
22385: LD_INT 106
22387: PUSH
22388: LD_INT 108
22390: PUSH
22391: LD_INT 109
22393: PUSH
22394: LD_INT 112
22396: PUSH
22397: LD_INT 116
22399: PUSH
22400: LD_INT 117
22402: PUSH
22403: LD_INT 118
22405: PUSH
22406: EMPTY
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: PUSH
22419: EMPTY
22420: LIST
22421: LIST
22422: ST_TO_ADDR
22423: GO 24678
22425: LD_INT 9
22427: DOUBLE
22428: EQUAL
22429: IFTRUE 22433
22431: GO 22581
22433: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22434: LD_ADDR_VAR 0 2
22438: PUSH
22439: LD_INT 2
22441: PUSH
22442: LD_INT 4
22444: PUSH
22445: LD_INT 5
22447: PUSH
22448: LD_INT 6
22450: PUSH
22451: LD_INT 7
22453: PUSH
22454: LD_INT 8
22456: PUSH
22457: LD_INT 11
22459: PUSH
22460: LD_INT 12
22462: PUSH
22463: LD_INT 15
22465: PUSH
22466: LD_INT 16
22468: PUSH
22469: LD_INT 20
22471: PUSH
22472: LD_INT 21
22474: PUSH
22475: LD_INT 22
22477: PUSH
22478: LD_INT 23
22480: PUSH
22481: LD_INT 25
22483: PUSH
22484: LD_INT 26
22486: PUSH
22487: LD_INT 28
22489: PUSH
22490: LD_INT 30
22492: PUSH
22493: LD_INT 31
22495: PUSH
22496: LD_INT 32
22498: PUSH
22499: LD_INT 36
22501: PUSH
22502: EMPTY
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: PUSH
22525: LD_INT 101
22527: PUSH
22528: LD_INT 102
22530: PUSH
22531: LD_INT 103
22533: PUSH
22534: LD_INT 105
22536: PUSH
22537: LD_INT 106
22539: PUSH
22540: LD_INT 108
22542: PUSH
22543: LD_INT 109
22545: PUSH
22546: LD_INT 112
22548: PUSH
22549: LD_INT 114
22551: PUSH
22552: LD_INT 116
22554: PUSH
22555: LD_INT 117
22557: PUSH
22558: LD_INT 118
22560: PUSH
22561: EMPTY
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: PUSH
22575: EMPTY
22576: LIST
22577: LIST
22578: ST_TO_ADDR
22579: GO 24678
22581: LD_INT 10
22583: DOUBLE
22584: EQUAL
22585: IFTRUE 22589
22587: GO 22785
22589: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22590: LD_ADDR_VAR 0 2
22594: PUSH
22595: LD_INT 2
22597: PUSH
22598: LD_INT 4
22600: PUSH
22601: LD_INT 5
22603: PUSH
22604: LD_INT 6
22606: PUSH
22607: LD_INT 7
22609: PUSH
22610: LD_INT 8
22612: PUSH
22613: LD_INT 9
22615: PUSH
22616: LD_INT 10
22618: PUSH
22619: LD_INT 11
22621: PUSH
22622: LD_INT 12
22624: PUSH
22625: LD_INT 13
22627: PUSH
22628: LD_INT 14
22630: PUSH
22631: LD_INT 15
22633: PUSH
22634: LD_INT 16
22636: PUSH
22637: LD_INT 17
22639: PUSH
22640: LD_INT 18
22642: PUSH
22643: LD_INT 19
22645: PUSH
22646: LD_INT 20
22648: PUSH
22649: LD_INT 21
22651: PUSH
22652: LD_INT 22
22654: PUSH
22655: LD_INT 23
22657: PUSH
22658: LD_INT 24
22660: PUSH
22661: LD_INT 25
22663: PUSH
22664: LD_INT 26
22666: PUSH
22667: LD_INT 28
22669: PUSH
22670: LD_INT 30
22672: PUSH
22673: LD_INT 31
22675: PUSH
22676: LD_INT 32
22678: PUSH
22679: LD_INT 36
22681: PUSH
22682: EMPTY
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: PUSH
22713: LD_INT 101
22715: PUSH
22716: LD_INT 102
22718: PUSH
22719: LD_INT 103
22721: PUSH
22722: LD_INT 104
22724: PUSH
22725: LD_INT 105
22727: PUSH
22728: LD_INT 106
22730: PUSH
22731: LD_INT 107
22733: PUSH
22734: LD_INT 108
22736: PUSH
22737: LD_INT 109
22739: PUSH
22740: LD_INT 110
22742: PUSH
22743: LD_INT 111
22745: PUSH
22746: LD_INT 112
22748: PUSH
22749: LD_INT 114
22751: PUSH
22752: LD_INT 116
22754: PUSH
22755: LD_INT 117
22757: PUSH
22758: LD_INT 118
22760: PUSH
22761: EMPTY
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: PUSH
22779: EMPTY
22780: LIST
22781: LIST
22782: ST_TO_ADDR
22783: GO 24678
22785: LD_INT 11
22787: DOUBLE
22788: EQUAL
22789: IFTRUE 22793
22791: GO 22997
22793: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22794: LD_ADDR_VAR 0 2
22798: PUSH
22799: LD_INT 2
22801: PUSH
22802: LD_INT 3
22804: PUSH
22805: LD_INT 4
22807: PUSH
22808: LD_INT 5
22810: PUSH
22811: LD_INT 6
22813: PUSH
22814: LD_INT 7
22816: PUSH
22817: LD_INT 8
22819: PUSH
22820: LD_INT 9
22822: PUSH
22823: LD_INT 10
22825: PUSH
22826: LD_INT 11
22828: PUSH
22829: LD_INT 12
22831: PUSH
22832: LD_INT 13
22834: PUSH
22835: LD_INT 14
22837: PUSH
22838: LD_INT 15
22840: PUSH
22841: LD_INT 16
22843: PUSH
22844: LD_INT 17
22846: PUSH
22847: LD_INT 18
22849: PUSH
22850: LD_INT 19
22852: PUSH
22853: LD_INT 20
22855: PUSH
22856: LD_INT 21
22858: PUSH
22859: LD_INT 22
22861: PUSH
22862: LD_INT 23
22864: PUSH
22865: LD_INT 24
22867: PUSH
22868: LD_INT 25
22870: PUSH
22871: LD_INT 26
22873: PUSH
22874: LD_INT 28
22876: PUSH
22877: LD_INT 30
22879: PUSH
22880: LD_INT 31
22882: PUSH
22883: LD_INT 32
22885: PUSH
22886: LD_INT 34
22888: PUSH
22889: LD_INT 36
22891: PUSH
22892: EMPTY
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: PUSH
22925: LD_INT 101
22927: PUSH
22928: LD_INT 102
22930: PUSH
22931: LD_INT 103
22933: PUSH
22934: LD_INT 104
22936: PUSH
22937: LD_INT 105
22939: PUSH
22940: LD_INT 106
22942: PUSH
22943: LD_INT 107
22945: PUSH
22946: LD_INT 108
22948: PUSH
22949: LD_INT 109
22951: PUSH
22952: LD_INT 110
22954: PUSH
22955: LD_INT 111
22957: PUSH
22958: LD_INT 112
22960: PUSH
22961: LD_INT 114
22963: PUSH
22964: LD_INT 116
22966: PUSH
22967: LD_INT 117
22969: PUSH
22970: LD_INT 118
22972: PUSH
22973: EMPTY
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: PUSH
22991: EMPTY
22992: LIST
22993: LIST
22994: ST_TO_ADDR
22995: GO 24678
22997: LD_INT 12
22999: DOUBLE
23000: EQUAL
23001: IFTRUE 23005
23003: GO 23225
23005: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23006: LD_ADDR_VAR 0 2
23010: PUSH
23011: LD_INT 1
23013: PUSH
23014: LD_INT 2
23016: PUSH
23017: LD_INT 3
23019: PUSH
23020: LD_INT 4
23022: PUSH
23023: LD_INT 5
23025: PUSH
23026: LD_INT 6
23028: PUSH
23029: LD_INT 7
23031: PUSH
23032: LD_INT 8
23034: PUSH
23035: LD_INT 9
23037: PUSH
23038: LD_INT 10
23040: PUSH
23041: LD_INT 11
23043: PUSH
23044: LD_INT 12
23046: PUSH
23047: LD_INT 13
23049: PUSH
23050: LD_INT 14
23052: PUSH
23053: LD_INT 15
23055: PUSH
23056: LD_INT 16
23058: PUSH
23059: LD_INT 17
23061: PUSH
23062: LD_INT 18
23064: PUSH
23065: LD_INT 19
23067: PUSH
23068: LD_INT 20
23070: PUSH
23071: LD_INT 21
23073: PUSH
23074: LD_INT 22
23076: PUSH
23077: LD_INT 23
23079: PUSH
23080: LD_INT 24
23082: PUSH
23083: LD_INT 25
23085: PUSH
23086: LD_INT 26
23088: PUSH
23089: LD_INT 27
23091: PUSH
23092: LD_INT 28
23094: PUSH
23095: LD_INT 30
23097: PUSH
23098: LD_INT 31
23100: PUSH
23101: LD_INT 32
23103: PUSH
23104: LD_INT 33
23106: PUSH
23107: LD_INT 34
23109: PUSH
23110: LD_INT 36
23112: PUSH
23113: EMPTY
23114: LIST
23115: LIST
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: PUSH
23149: LD_INT 101
23151: PUSH
23152: LD_INT 102
23154: PUSH
23155: LD_INT 103
23157: PUSH
23158: LD_INT 104
23160: PUSH
23161: LD_INT 105
23163: PUSH
23164: LD_INT 106
23166: PUSH
23167: LD_INT 107
23169: PUSH
23170: LD_INT 108
23172: PUSH
23173: LD_INT 109
23175: PUSH
23176: LD_INT 110
23178: PUSH
23179: LD_INT 111
23181: PUSH
23182: LD_INT 112
23184: PUSH
23185: LD_INT 113
23187: PUSH
23188: LD_INT 114
23190: PUSH
23191: LD_INT 116
23193: PUSH
23194: LD_INT 117
23196: PUSH
23197: LD_INT 118
23199: PUSH
23200: EMPTY
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: PUSH
23219: EMPTY
23220: LIST
23221: LIST
23222: ST_TO_ADDR
23223: GO 24678
23225: LD_INT 13
23227: DOUBLE
23228: EQUAL
23229: IFTRUE 23233
23231: GO 23441
23233: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23234: LD_ADDR_VAR 0 2
23238: PUSH
23239: LD_INT 1
23241: PUSH
23242: LD_INT 2
23244: PUSH
23245: LD_INT 3
23247: PUSH
23248: LD_INT 4
23250: PUSH
23251: LD_INT 5
23253: PUSH
23254: LD_INT 8
23256: PUSH
23257: LD_INT 9
23259: PUSH
23260: LD_INT 10
23262: PUSH
23263: LD_INT 11
23265: PUSH
23266: LD_INT 12
23268: PUSH
23269: LD_INT 14
23271: PUSH
23272: LD_INT 15
23274: PUSH
23275: LD_INT 16
23277: PUSH
23278: LD_INT 17
23280: PUSH
23281: LD_INT 18
23283: PUSH
23284: LD_INT 19
23286: PUSH
23287: LD_INT 20
23289: PUSH
23290: LD_INT 21
23292: PUSH
23293: LD_INT 22
23295: PUSH
23296: LD_INT 23
23298: PUSH
23299: LD_INT 24
23301: PUSH
23302: LD_INT 25
23304: PUSH
23305: LD_INT 26
23307: PUSH
23308: LD_INT 27
23310: PUSH
23311: LD_INT 28
23313: PUSH
23314: LD_INT 30
23316: PUSH
23317: LD_INT 31
23319: PUSH
23320: LD_INT 32
23322: PUSH
23323: LD_INT 33
23325: PUSH
23326: LD_INT 34
23328: PUSH
23329: LD_INT 36
23331: PUSH
23332: EMPTY
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: PUSH
23365: LD_INT 101
23367: PUSH
23368: LD_INT 102
23370: PUSH
23371: LD_INT 103
23373: PUSH
23374: LD_INT 104
23376: PUSH
23377: LD_INT 105
23379: PUSH
23380: LD_INT 106
23382: PUSH
23383: LD_INT 107
23385: PUSH
23386: LD_INT 108
23388: PUSH
23389: LD_INT 109
23391: PUSH
23392: LD_INT 110
23394: PUSH
23395: LD_INT 111
23397: PUSH
23398: LD_INT 112
23400: PUSH
23401: LD_INT 113
23403: PUSH
23404: LD_INT 114
23406: PUSH
23407: LD_INT 116
23409: PUSH
23410: LD_INT 117
23412: PUSH
23413: LD_INT 118
23415: PUSH
23416: EMPTY
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: PUSH
23435: EMPTY
23436: LIST
23437: LIST
23438: ST_TO_ADDR
23439: GO 24678
23441: LD_INT 14
23443: DOUBLE
23444: EQUAL
23445: IFTRUE 23449
23447: GO 23673
23449: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23450: LD_ADDR_VAR 0 2
23454: PUSH
23455: LD_INT 1
23457: PUSH
23458: LD_INT 2
23460: PUSH
23461: LD_INT 3
23463: PUSH
23464: LD_INT 4
23466: PUSH
23467: LD_INT 5
23469: PUSH
23470: LD_INT 6
23472: PUSH
23473: LD_INT 7
23475: PUSH
23476: LD_INT 8
23478: PUSH
23479: LD_INT 9
23481: PUSH
23482: LD_INT 10
23484: PUSH
23485: LD_INT 11
23487: PUSH
23488: LD_INT 12
23490: PUSH
23491: LD_INT 13
23493: PUSH
23494: LD_INT 14
23496: PUSH
23497: LD_INT 15
23499: PUSH
23500: LD_INT 16
23502: PUSH
23503: LD_INT 17
23505: PUSH
23506: LD_INT 18
23508: PUSH
23509: LD_INT 19
23511: PUSH
23512: LD_INT 20
23514: PUSH
23515: LD_INT 21
23517: PUSH
23518: LD_INT 22
23520: PUSH
23521: LD_INT 23
23523: PUSH
23524: LD_INT 24
23526: PUSH
23527: LD_INT 25
23529: PUSH
23530: LD_INT 26
23532: PUSH
23533: LD_INT 27
23535: PUSH
23536: LD_INT 28
23538: PUSH
23539: LD_INT 29
23541: PUSH
23542: LD_INT 30
23544: PUSH
23545: LD_INT 31
23547: PUSH
23548: LD_INT 32
23550: PUSH
23551: LD_INT 33
23553: PUSH
23554: LD_INT 34
23556: PUSH
23557: LD_INT 36
23559: PUSH
23560: EMPTY
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: PUSH
23597: LD_INT 101
23599: PUSH
23600: LD_INT 102
23602: PUSH
23603: LD_INT 103
23605: PUSH
23606: LD_INT 104
23608: PUSH
23609: LD_INT 105
23611: PUSH
23612: LD_INT 106
23614: PUSH
23615: LD_INT 107
23617: PUSH
23618: LD_INT 108
23620: PUSH
23621: LD_INT 109
23623: PUSH
23624: LD_INT 110
23626: PUSH
23627: LD_INT 111
23629: PUSH
23630: LD_INT 112
23632: PUSH
23633: LD_INT 113
23635: PUSH
23636: LD_INT 114
23638: PUSH
23639: LD_INT 116
23641: PUSH
23642: LD_INT 117
23644: PUSH
23645: LD_INT 118
23647: PUSH
23648: EMPTY
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: PUSH
23667: EMPTY
23668: LIST
23669: LIST
23670: ST_TO_ADDR
23671: GO 24678
23673: LD_INT 15
23675: DOUBLE
23676: EQUAL
23677: IFTRUE 23681
23679: GO 23905
23681: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23682: LD_ADDR_VAR 0 2
23686: PUSH
23687: LD_INT 1
23689: PUSH
23690: LD_INT 2
23692: PUSH
23693: LD_INT 3
23695: PUSH
23696: LD_INT 4
23698: PUSH
23699: LD_INT 5
23701: PUSH
23702: LD_INT 6
23704: PUSH
23705: LD_INT 7
23707: PUSH
23708: LD_INT 8
23710: PUSH
23711: LD_INT 9
23713: PUSH
23714: LD_INT 10
23716: PUSH
23717: LD_INT 11
23719: PUSH
23720: LD_INT 12
23722: PUSH
23723: LD_INT 13
23725: PUSH
23726: LD_INT 14
23728: PUSH
23729: LD_INT 15
23731: PUSH
23732: LD_INT 16
23734: PUSH
23735: LD_INT 17
23737: PUSH
23738: LD_INT 18
23740: PUSH
23741: LD_INT 19
23743: PUSH
23744: LD_INT 20
23746: PUSH
23747: LD_INT 21
23749: PUSH
23750: LD_INT 22
23752: PUSH
23753: LD_INT 23
23755: PUSH
23756: LD_INT 24
23758: PUSH
23759: LD_INT 25
23761: PUSH
23762: LD_INT 26
23764: PUSH
23765: LD_INT 27
23767: PUSH
23768: LD_INT 28
23770: PUSH
23771: LD_INT 29
23773: PUSH
23774: LD_INT 30
23776: PUSH
23777: LD_INT 31
23779: PUSH
23780: LD_INT 32
23782: PUSH
23783: LD_INT 33
23785: PUSH
23786: LD_INT 34
23788: PUSH
23789: LD_INT 36
23791: PUSH
23792: EMPTY
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: PUSH
23829: LD_INT 101
23831: PUSH
23832: LD_INT 102
23834: PUSH
23835: LD_INT 103
23837: PUSH
23838: LD_INT 104
23840: PUSH
23841: LD_INT 105
23843: PUSH
23844: LD_INT 106
23846: PUSH
23847: LD_INT 107
23849: PUSH
23850: LD_INT 108
23852: PUSH
23853: LD_INT 109
23855: PUSH
23856: LD_INT 110
23858: PUSH
23859: LD_INT 111
23861: PUSH
23862: LD_INT 112
23864: PUSH
23865: LD_INT 113
23867: PUSH
23868: LD_INT 114
23870: PUSH
23871: LD_INT 116
23873: PUSH
23874: LD_INT 117
23876: PUSH
23877: LD_INT 118
23879: PUSH
23880: EMPTY
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: PUSH
23899: EMPTY
23900: LIST
23901: LIST
23902: ST_TO_ADDR
23903: GO 24678
23905: LD_INT 16
23907: DOUBLE
23908: EQUAL
23909: IFTRUE 23913
23911: GO 24049
23913: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23914: LD_ADDR_VAR 0 2
23918: PUSH
23919: LD_INT 2
23921: PUSH
23922: LD_INT 4
23924: PUSH
23925: LD_INT 5
23927: PUSH
23928: LD_INT 7
23930: PUSH
23931: LD_INT 11
23933: PUSH
23934: LD_INT 12
23936: PUSH
23937: LD_INT 15
23939: PUSH
23940: LD_INT 16
23942: PUSH
23943: LD_INT 20
23945: PUSH
23946: LD_INT 21
23948: PUSH
23949: LD_INT 22
23951: PUSH
23952: LD_INT 23
23954: PUSH
23955: LD_INT 25
23957: PUSH
23958: LD_INT 26
23960: PUSH
23961: LD_INT 30
23963: PUSH
23964: LD_INT 31
23966: PUSH
23967: LD_INT 32
23969: PUSH
23970: LD_INT 33
23972: PUSH
23973: LD_INT 34
23975: PUSH
23976: EMPTY
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: PUSH
23997: LD_INT 101
23999: PUSH
24000: LD_INT 102
24002: PUSH
24003: LD_INT 103
24005: PUSH
24006: LD_INT 106
24008: PUSH
24009: LD_INT 108
24011: PUSH
24012: LD_INT 112
24014: PUSH
24015: LD_INT 113
24017: PUSH
24018: LD_INT 114
24020: PUSH
24021: LD_INT 116
24023: PUSH
24024: LD_INT 117
24026: PUSH
24027: LD_INT 118
24029: PUSH
24030: EMPTY
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: ST_TO_ADDR
24047: GO 24678
24049: LD_INT 17
24051: DOUBLE
24052: EQUAL
24053: IFTRUE 24057
24055: GO 24281
24057: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24058: LD_ADDR_VAR 0 2
24062: PUSH
24063: LD_INT 1
24065: PUSH
24066: LD_INT 2
24068: PUSH
24069: LD_INT 3
24071: PUSH
24072: LD_INT 4
24074: PUSH
24075: LD_INT 5
24077: PUSH
24078: LD_INT 6
24080: PUSH
24081: LD_INT 7
24083: PUSH
24084: LD_INT 8
24086: PUSH
24087: LD_INT 9
24089: PUSH
24090: LD_INT 10
24092: PUSH
24093: LD_INT 11
24095: PUSH
24096: LD_INT 12
24098: PUSH
24099: LD_INT 13
24101: PUSH
24102: LD_INT 14
24104: PUSH
24105: LD_INT 15
24107: PUSH
24108: LD_INT 16
24110: PUSH
24111: LD_INT 17
24113: PUSH
24114: LD_INT 18
24116: PUSH
24117: LD_INT 19
24119: PUSH
24120: LD_INT 20
24122: PUSH
24123: LD_INT 21
24125: PUSH
24126: LD_INT 22
24128: PUSH
24129: LD_INT 23
24131: PUSH
24132: LD_INT 24
24134: PUSH
24135: LD_INT 25
24137: PUSH
24138: LD_INT 26
24140: PUSH
24141: LD_INT 27
24143: PUSH
24144: LD_INT 28
24146: PUSH
24147: LD_INT 29
24149: PUSH
24150: LD_INT 30
24152: PUSH
24153: LD_INT 31
24155: PUSH
24156: LD_INT 32
24158: PUSH
24159: LD_INT 33
24161: PUSH
24162: LD_INT 34
24164: PUSH
24165: LD_INT 36
24167: PUSH
24168: EMPTY
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: PUSH
24205: LD_INT 101
24207: PUSH
24208: LD_INT 102
24210: PUSH
24211: LD_INT 103
24213: PUSH
24214: LD_INT 104
24216: PUSH
24217: LD_INT 105
24219: PUSH
24220: LD_INT 106
24222: PUSH
24223: LD_INT 107
24225: PUSH
24226: LD_INT 108
24228: PUSH
24229: LD_INT 109
24231: PUSH
24232: LD_INT 110
24234: PUSH
24235: LD_INT 111
24237: PUSH
24238: LD_INT 112
24240: PUSH
24241: LD_INT 113
24243: PUSH
24244: LD_INT 114
24246: PUSH
24247: LD_INT 116
24249: PUSH
24250: LD_INT 117
24252: PUSH
24253: LD_INT 118
24255: PUSH
24256: EMPTY
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: PUSH
24275: EMPTY
24276: LIST
24277: LIST
24278: ST_TO_ADDR
24279: GO 24678
24281: LD_INT 18
24283: DOUBLE
24284: EQUAL
24285: IFTRUE 24289
24287: GO 24437
24289: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24290: LD_ADDR_VAR 0 2
24294: PUSH
24295: LD_INT 2
24297: PUSH
24298: LD_INT 4
24300: PUSH
24301: LD_INT 5
24303: PUSH
24304: LD_INT 7
24306: PUSH
24307: LD_INT 11
24309: PUSH
24310: LD_INT 12
24312: PUSH
24313: LD_INT 15
24315: PUSH
24316: LD_INT 16
24318: PUSH
24319: LD_INT 20
24321: PUSH
24322: LD_INT 21
24324: PUSH
24325: LD_INT 22
24327: PUSH
24328: LD_INT 23
24330: PUSH
24331: LD_INT 25
24333: PUSH
24334: LD_INT 26
24336: PUSH
24337: LD_INT 30
24339: PUSH
24340: LD_INT 31
24342: PUSH
24343: LD_INT 32
24345: PUSH
24346: LD_INT 33
24348: PUSH
24349: LD_INT 34
24351: PUSH
24352: LD_INT 35
24354: PUSH
24355: LD_INT 36
24357: PUSH
24358: EMPTY
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: PUSH
24381: LD_INT 101
24383: PUSH
24384: LD_INT 102
24386: PUSH
24387: LD_INT 103
24389: PUSH
24390: LD_INT 106
24392: PUSH
24393: LD_INT 108
24395: PUSH
24396: LD_INT 112
24398: PUSH
24399: LD_INT 113
24401: PUSH
24402: LD_INT 114
24404: PUSH
24405: LD_INT 115
24407: PUSH
24408: LD_INT 116
24410: PUSH
24411: LD_INT 117
24413: PUSH
24414: LD_INT 118
24416: PUSH
24417: EMPTY
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: PUSH
24431: EMPTY
24432: LIST
24433: LIST
24434: ST_TO_ADDR
24435: GO 24678
24437: LD_INT 19
24439: DOUBLE
24440: EQUAL
24441: IFTRUE 24445
24443: GO 24677
24445: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24446: LD_ADDR_VAR 0 2
24450: PUSH
24451: LD_INT 1
24453: PUSH
24454: LD_INT 2
24456: PUSH
24457: LD_INT 3
24459: PUSH
24460: LD_INT 4
24462: PUSH
24463: LD_INT 5
24465: PUSH
24466: LD_INT 6
24468: PUSH
24469: LD_INT 7
24471: PUSH
24472: LD_INT 8
24474: PUSH
24475: LD_INT 9
24477: PUSH
24478: LD_INT 10
24480: PUSH
24481: LD_INT 11
24483: PUSH
24484: LD_INT 12
24486: PUSH
24487: LD_INT 13
24489: PUSH
24490: LD_INT 14
24492: PUSH
24493: LD_INT 15
24495: PUSH
24496: LD_INT 16
24498: PUSH
24499: LD_INT 17
24501: PUSH
24502: LD_INT 18
24504: PUSH
24505: LD_INT 19
24507: PUSH
24508: LD_INT 20
24510: PUSH
24511: LD_INT 21
24513: PUSH
24514: LD_INT 22
24516: PUSH
24517: LD_INT 23
24519: PUSH
24520: LD_INT 24
24522: PUSH
24523: LD_INT 25
24525: PUSH
24526: LD_INT 26
24528: PUSH
24529: LD_INT 27
24531: PUSH
24532: LD_INT 28
24534: PUSH
24535: LD_INT 29
24537: PUSH
24538: LD_INT 30
24540: PUSH
24541: LD_INT 31
24543: PUSH
24544: LD_INT 32
24546: PUSH
24547: LD_INT 33
24549: PUSH
24550: LD_INT 34
24552: PUSH
24553: LD_INT 35
24555: PUSH
24556: LD_INT 36
24558: PUSH
24559: EMPTY
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: LIST
24595: LIST
24596: PUSH
24597: LD_INT 101
24599: PUSH
24600: LD_INT 102
24602: PUSH
24603: LD_INT 103
24605: PUSH
24606: LD_INT 104
24608: PUSH
24609: LD_INT 105
24611: PUSH
24612: LD_INT 106
24614: PUSH
24615: LD_INT 107
24617: PUSH
24618: LD_INT 108
24620: PUSH
24621: LD_INT 109
24623: PUSH
24624: LD_INT 110
24626: PUSH
24627: LD_INT 111
24629: PUSH
24630: LD_INT 112
24632: PUSH
24633: LD_INT 113
24635: PUSH
24636: LD_INT 114
24638: PUSH
24639: LD_INT 115
24641: PUSH
24642: LD_INT 116
24644: PUSH
24645: LD_INT 117
24647: PUSH
24648: LD_INT 118
24650: PUSH
24651: EMPTY
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: PUSH
24671: EMPTY
24672: LIST
24673: LIST
24674: ST_TO_ADDR
24675: GO 24678
24677: POP
// end else
24678: GO 24909
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24680: LD_ADDR_VAR 0 2
24684: PUSH
24685: LD_INT 1
24687: PUSH
24688: LD_INT 2
24690: PUSH
24691: LD_INT 3
24693: PUSH
24694: LD_INT 4
24696: PUSH
24697: LD_INT 5
24699: PUSH
24700: LD_INT 6
24702: PUSH
24703: LD_INT 7
24705: PUSH
24706: LD_INT 8
24708: PUSH
24709: LD_INT 9
24711: PUSH
24712: LD_INT 10
24714: PUSH
24715: LD_INT 11
24717: PUSH
24718: LD_INT 12
24720: PUSH
24721: LD_INT 13
24723: PUSH
24724: LD_INT 14
24726: PUSH
24727: LD_INT 15
24729: PUSH
24730: LD_INT 16
24732: PUSH
24733: LD_INT 17
24735: PUSH
24736: LD_INT 18
24738: PUSH
24739: LD_INT 19
24741: PUSH
24742: LD_INT 20
24744: PUSH
24745: LD_INT 21
24747: PUSH
24748: LD_INT 22
24750: PUSH
24751: LD_INT 23
24753: PUSH
24754: LD_INT 24
24756: PUSH
24757: LD_INT 25
24759: PUSH
24760: LD_INT 26
24762: PUSH
24763: LD_INT 27
24765: PUSH
24766: LD_INT 28
24768: PUSH
24769: LD_INT 29
24771: PUSH
24772: LD_INT 30
24774: PUSH
24775: LD_INT 31
24777: PUSH
24778: LD_INT 32
24780: PUSH
24781: LD_INT 33
24783: PUSH
24784: LD_INT 34
24786: PUSH
24787: LD_INT 35
24789: PUSH
24790: LD_INT 36
24792: PUSH
24793: EMPTY
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: LIST
24809: LIST
24810: LIST
24811: LIST
24812: LIST
24813: LIST
24814: LIST
24815: LIST
24816: LIST
24817: LIST
24818: LIST
24819: LIST
24820: LIST
24821: LIST
24822: LIST
24823: LIST
24824: LIST
24825: LIST
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: PUSH
24831: LD_INT 101
24833: PUSH
24834: LD_INT 102
24836: PUSH
24837: LD_INT 103
24839: PUSH
24840: LD_INT 104
24842: PUSH
24843: LD_INT 105
24845: PUSH
24846: LD_INT 106
24848: PUSH
24849: LD_INT 107
24851: PUSH
24852: LD_INT 108
24854: PUSH
24855: LD_INT 109
24857: PUSH
24858: LD_INT 110
24860: PUSH
24861: LD_INT 111
24863: PUSH
24864: LD_INT 112
24866: PUSH
24867: LD_INT 113
24869: PUSH
24870: LD_INT 114
24872: PUSH
24873: LD_INT 115
24875: PUSH
24876: LD_INT 116
24878: PUSH
24879: LD_INT 117
24881: PUSH
24882: LD_INT 118
24884: PUSH
24885: EMPTY
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: PUSH
24905: EMPTY
24906: LIST
24907: LIST
24908: ST_TO_ADDR
// if result then
24909: LD_VAR 0 2
24913: IFFALSE 25699
// begin normal :=  ;
24915: LD_ADDR_VAR 0 5
24919: PUSH
24920: LD_STRING 
24922: ST_TO_ADDR
// hardcore :=  ;
24923: LD_ADDR_VAR 0 6
24927: PUSH
24928: LD_STRING 
24930: ST_TO_ADDR
// active :=  ;
24931: LD_ADDR_VAR 0 7
24935: PUSH
24936: LD_STRING 
24938: ST_TO_ADDR
// for i = 1 to normalCounter do
24939: LD_ADDR_VAR 0 8
24943: PUSH
24944: DOUBLE
24945: LD_INT 1
24947: DEC
24948: ST_TO_ADDR
24949: LD_EXP 62
24953: PUSH
24954: FOR_TO
24955: IFFALSE 25056
// begin tmp := 0 ;
24957: LD_ADDR_VAR 0 3
24961: PUSH
24962: LD_STRING 0
24964: ST_TO_ADDR
// if result [ 1 ] then
24965: LD_VAR 0 2
24969: PUSH
24970: LD_INT 1
24972: ARRAY
24973: IFFALSE 25038
// if result [ 1 ] [ 1 ] = i then
24975: LD_VAR 0 2
24979: PUSH
24980: LD_INT 1
24982: ARRAY
24983: PUSH
24984: LD_INT 1
24986: ARRAY
24987: PUSH
24988: LD_VAR 0 8
24992: EQUAL
24993: IFFALSE 25038
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24995: LD_ADDR_VAR 0 2
24999: PUSH
25000: LD_VAR 0 2
25004: PPUSH
25005: LD_INT 1
25007: PPUSH
25008: LD_VAR 0 2
25012: PUSH
25013: LD_INT 1
25015: ARRAY
25016: PPUSH
25017: LD_INT 1
25019: PPUSH
25020: CALL_OW 3
25024: PPUSH
25025: CALL_OW 1
25029: ST_TO_ADDR
// tmp := 1 ;
25030: LD_ADDR_VAR 0 3
25034: PUSH
25035: LD_STRING 1
25037: ST_TO_ADDR
// end ; normal := normal & tmp ;
25038: LD_ADDR_VAR 0 5
25042: PUSH
25043: LD_VAR 0 5
25047: PUSH
25048: LD_VAR 0 3
25052: STR
25053: ST_TO_ADDR
// end ;
25054: GO 24954
25056: POP
25057: POP
// for i = 1 to hardcoreCounter do
25058: LD_ADDR_VAR 0 8
25062: PUSH
25063: DOUBLE
25064: LD_INT 1
25066: DEC
25067: ST_TO_ADDR
25068: LD_EXP 63
25072: PUSH
25073: FOR_TO
25074: IFFALSE 25179
// begin tmp := 0 ;
25076: LD_ADDR_VAR 0 3
25080: PUSH
25081: LD_STRING 0
25083: ST_TO_ADDR
// if result [ 2 ] then
25084: LD_VAR 0 2
25088: PUSH
25089: LD_INT 2
25091: ARRAY
25092: IFFALSE 25161
// if result [ 2 ] [ 1 ] = 100 + i then
25094: LD_VAR 0 2
25098: PUSH
25099: LD_INT 2
25101: ARRAY
25102: PUSH
25103: LD_INT 1
25105: ARRAY
25106: PUSH
25107: LD_INT 100
25109: PUSH
25110: LD_VAR 0 8
25114: PLUS
25115: EQUAL
25116: IFFALSE 25161
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25118: LD_ADDR_VAR 0 2
25122: PUSH
25123: LD_VAR 0 2
25127: PPUSH
25128: LD_INT 2
25130: PPUSH
25131: LD_VAR 0 2
25135: PUSH
25136: LD_INT 2
25138: ARRAY
25139: PPUSH
25140: LD_INT 1
25142: PPUSH
25143: CALL_OW 3
25147: PPUSH
25148: CALL_OW 1
25152: ST_TO_ADDR
// tmp := 1 ;
25153: LD_ADDR_VAR 0 3
25157: PUSH
25158: LD_STRING 1
25160: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25161: LD_ADDR_VAR 0 6
25165: PUSH
25166: LD_VAR 0 6
25170: PUSH
25171: LD_VAR 0 3
25175: STR
25176: ST_TO_ADDR
// end ;
25177: GO 25073
25179: POP
25180: POP
// if isGameLoad then
25181: LD_VAR 0 1
25185: IFFALSE 25660
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25187: LD_ADDR_VAR 0 4
25191: PUSH
25192: LD_EXP 66
25196: PUSH
25197: LD_EXP 65
25201: PUSH
25202: LD_EXP 67
25206: PUSH
25207: LD_EXP 64
25211: PUSH
25212: LD_EXP 68
25216: PUSH
25217: LD_EXP 69
25221: PUSH
25222: LD_EXP 70
25226: PUSH
25227: LD_EXP 71
25231: PUSH
25232: LD_EXP 72
25236: PUSH
25237: LD_EXP 73
25241: PUSH
25242: LD_EXP 74
25246: PUSH
25247: LD_EXP 75
25251: PUSH
25252: LD_EXP 76
25256: PUSH
25257: LD_EXP 77
25261: PUSH
25262: LD_EXP 85
25266: PUSH
25267: LD_EXP 86
25271: PUSH
25272: LD_EXP 87
25276: PUSH
25277: LD_EXP 88
25281: PUSH
25282: LD_EXP 90
25286: PUSH
25287: LD_EXP 91
25291: PUSH
25292: LD_EXP 92
25296: PUSH
25297: LD_EXP 95
25301: PUSH
25302: LD_EXP 97
25306: PUSH
25307: LD_EXP 98
25311: PUSH
25312: LD_EXP 99
25316: PUSH
25317: LD_EXP 101
25321: PUSH
25322: LD_EXP 102
25326: PUSH
25327: LD_EXP 105
25331: PUSH
25332: LD_EXP 106
25336: PUSH
25337: LD_EXP 107
25341: PUSH
25342: LD_EXP 108
25346: PUSH
25347: LD_EXP 109
25351: PUSH
25352: LD_EXP 110
25356: PUSH
25357: LD_EXP 111
25361: PUSH
25362: LD_EXP 112
25366: PUSH
25367: LD_EXP 113
25371: PUSH
25372: LD_EXP 78
25376: PUSH
25377: LD_EXP 79
25381: PUSH
25382: LD_EXP 82
25386: PUSH
25387: LD_EXP 83
25391: PUSH
25392: LD_EXP 84
25396: PUSH
25397: LD_EXP 80
25401: PUSH
25402: LD_EXP 81
25406: PUSH
25407: LD_EXP 89
25411: PUSH
25412: LD_EXP 93
25416: PUSH
25417: LD_EXP 94
25421: PUSH
25422: LD_EXP 96
25426: PUSH
25427: LD_EXP 100
25431: PUSH
25432: LD_EXP 103
25436: PUSH
25437: LD_EXP 104
25441: PUSH
25442: LD_EXP 114
25446: PUSH
25447: LD_EXP 115
25451: PUSH
25452: LD_EXP 116
25456: PUSH
25457: LD_EXP 117
25461: PUSH
25462: EMPTY
25463: LIST
25464: LIST
25465: LIST
25466: LIST
25467: LIST
25468: LIST
25469: LIST
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: LIST
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: LIST
25503: LIST
25504: LIST
25505: LIST
25506: LIST
25507: LIST
25508: LIST
25509: LIST
25510: LIST
25511: LIST
25512: LIST
25513: LIST
25514: LIST
25515: LIST
25516: LIST
25517: ST_TO_ADDR
// tmp :=  ;
25518: LD_ADDR_VAR 0 3
25522: PUSH
25523: LD_STRING 
25525: ST_TO_ADDR
// for i = 1 to normalCounter do
25526: LD_ADDR_VAR 0 8
25530: PUSH
25531: DOUBLE
25532: LD_INT 1
25534: DEC
25535: ST_TO_ADDR
25536: LD_EXP 62
25540: PUSH
25541: FOR_TO
25542: IFFALSE 25578
// begin if flags [ i ] then
25544: LD_VAR 0 4
25548: PUSH
25549: LD_VAR 0 8
25553: ARRAY
25554: IFFALSE 25576
// tmp := tmp & i & ; ;
25556: LD_ADDR_VAR 0 3
25560: PUSH
25561: LD_VAR 0 3
25565: PUSH
25566: LD_VAR 0 8
25570: STR
25571: PUSH
25572: LD_STRING ;
25574: STR
25575: ST_TO_ADDR
// end ;
25576: GO 25541
25578: POP
25579: POP
// for i = 1 to hardcoreCounter do
25580: LD_ADDR_VAR 0 8
25584: PUSH
25585: DOUBLE
25586: LD_INT 1
25588: DEC
25589: ST_TO_ADDR
25590: LD_EXP 63
25594: PUSH
25595: FOR_TO
25596: IFFALSE 25642
// begin if flags [ normalCounter + i ] then
25598: LD_VAR 0 4
25602: PUSH
25603: LD_EXP 62
25607: PUSH
25608: LD_VAR 0 8
25612: PLUS
25613: ARRAY
25614: IFFALSE 25640
// tmp := tmp & ( 100 + i ) & ; ;
25616: LD_ADDR_VAR 0 3
25620: PUSH
25621: LD_VAR 0 3
25625: PUSH
25626: LD_INT 100
25628: PUSH
25629: LD_VAR 0 8
25633: PLUS
25634: STR
25635: PUSH
25636: LD_STRING ;
25638: STR
25639: ST_TO_ADDR
// end ;
25640: GO 25595
25642: POP
25643: POP
// if tmp then
25644: LD_VAR 0 3
25648: IFFALSE 25660
// active := tmp ;
25650: LD_ADDR_VAR 0 7
25654: PUSH
25655: LD_VAR 0 3
25659: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25660: LD_STRING getStreamItemsFromMission("
25662: PUSH
25663: LD_VAR 0 5
25667: STR
25668: PUSH
25669: LD_STRING ","
25671: STR
25672: PUSH
25673: LD_VAR 0 6
25677: STR
25678: PUSH
25679: LD_STRING ","
25681: STR
25682: PUSH
25683: LD_VAR 0 7
25687: STR
25688: PUSH
25689: LD_STRING ")
25691: STR
25692: PPUSH
25693: CALL_OW 559
// end else
25697: GO 25706
// ToLua ( getStreamItemsFromMission("","","") ) ;
25699: LD_STRING getStreamItemsFromMission("","","")
25701: PPUSH
25702: CALL_OW 559
// end ;
25706: LD_VAR 0 2
25710: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25711: LD_EXP 61
25715: PUSH
25716: LD_EXP 66
25720: AND
25721: IFFALSE 25845
25723: GO 25725
25725: DISABLE
25726: LD_INT 0
25728: PPUSH
25729: PPUSH
// begin enable ;
25730: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25731: LD_ADDR_VAR 0 2
25735: PUSH
25736: LD_INT 22
25738: PUSH
25739: LD_OWVAR 2
25743: PUSH
25744: EMPTY
25745: LIST
25746: LIST
25747: PUSH
25748: LD_INT 2
25750: PUSH
25751: LD_INT 34
25753: PUSH
25754: LD_INT 7
25756: PUSH
25757: EMPTY
25758: LIST
25759: LIST
25760: PUSH
25761: LD_INT 34
25763: PUSH
25764: LD_INT 45
25766: PUSH
25767: EMPTY
25768: LIST
25769: LIST
25770: PUSH
25771: LD_INT 34
25773: PUSH
25774: LD_INT 28
25776: PUSH
25777: EMPTY
25778: LIST
25779: LIST
25780: PUSH
25781: LD_INT 34
25783: PUSH
25784: LD_INT 47
25786: PUSH
25787: EMPTY
25788: LIST
25789: LIST
25790: PUSH
25791: EMPTY
25792: LIST
25793: LIST
25794: LIST
25795: LIST
25796: LIST
25797: PUSH
25798: EMPTY
25799: LIST
25800: LIST
25801: PPUSH
25802: CALL_OW 69
25806: ST_TO_ADDR
// if not tmp then
25807: LD_VAR 0 2
25811: NOT
25812: IFFALSE 25816
// exit ;
25814: GO 25845
// for i in tmp do
25816: LD_ADDR_VAR 0 1
25820: PUSH
25821: LD_VAR 0 2
25825: PUSH
25826: FOR_IN
25827: IFFALSE 25843
// begin SetLives ( i , 0 ) ;
25829: LD_VAR 0 1
25833: PPUSH
25834: LD_INT 0
25836: PPUSH
25837: CALL_OW 234
// end ;
25841: GO 25826
25843: POP
25844: POP
// end ;
25845: PPOPN 2
25847: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25848: LD_EXP 61
25852: PUSH
25853: LD_EXP 67
25857: AND
25858: IFFALSE 25942
25860: GO 25862
25862: DISABLE
25863: LD_INT 0
25865: PPUSH
25866: PPUSH
// begin enable ;
25867: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25868: LD_ADDR_VAR 0 2
25872: PUSH
25873: LD_INT 22
25875: PUSH
25876: LD_OWVAR 2
25880: PUSH
25881: EMPTY
25882: LIST
25883: LIST
25884: PUSH
25885: LD_INT 32
25887: PUSH
25888: LD_INT 3
25890: PUSH
25891: EMPTY
25892: LIST
25893: LIST
25894: PUSH
25895: EMPTY
25896: LIST
25897: LIST
25898: PPUSH
25899: CALL_OW 69
25903: ST_TO_ADDR
// if not tmp then
25904: LD_VAR 0 2
25908: NOT
25909: IFFALSE 25913
// exit ;
25911: GO 25942
// for i in tmp do
25913: LD_ADDR_VAR 0 1
25917: PUSH
25918: LD_VAR 0 2
25922: PUSH
25923: FOR_IN
25924: IFFALSE 25940
// begin SetLives ( i , 0 ) ;
25926: LD_VAR 0 1
25930: PPUSH
25931: LD_INT 0
25933: PPUSH
25934: CALL_OW 234
// end ;
25938: GO 25923
25940: POP
25941: POP
// end ;
25942: PPOPN 2
25944: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25945: LD_EXP 61
25949: PUSH
25950: LD_EXP 64
25954: AND
25955: IFFALSE 26048
25957: GO 25959
25959: DISABLE
25960: LD_INT 0
25962: PPUSH
// begin enable ;
25963: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25964: LD_ADDR_VAR 0 1
25968: PUSH
25969: LD_INT 22
25971: PUSH
25972: LD_OWVAR 2
25976: PUSH
25977: EMPTY
25978: LIST
25979: LIST
25980: PUSH
25981: LD_INT 2
25983: PUSH
25984: LD_INT 25
25986: PUSH
25987: LD_INT 5
25989: PUSH
25990: EMPTY
25991: LIST
25992: LIST
25993: PUSH
25994: LD_INT 25
25996: PUSH
25997: LD_INT 9
25999: PUSH
26000: EMPTY
26001: LIST
26002: LIST
26003: PUSH
26004: LD_INT 25
26006: PUSH
26007: LD_INT 8
26009: PUSH
26010: EMPTY
26011: LIST
26012: LIST
26013: PUSH
26014: EMPTY
26015: LIST
26016: LIST
26017: LIST
26018: LIST
26019: PUSH
26020: EMPTY
26021: LIST
26022: LIST
26023: PPUSH
26024: CALL_OW 69
26028: PUSH
26029: FOR_IN
26030: IFFALSE 26046
// begin SetClass ( i , 1 ) ;
26032: LD_VAR 0 1
26036: PPUSH
26037: LD_INT 1
26039: PPUSH
26040: CALL_OW 336
// end ;
26044: GO 26029
26046: POP
26047: POP
// end ;
26048: PPOPN 1
26050: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26051: LD_EXP 61
26055: PUSH
26056: LD_EXP 65
26060: AND
26061: PUSH
26062: LD_OWVAR 65
26066: PUSH
26067: LD_INT 7
26069: LESS
26070: AND
26071: IFFALSE 26085
26073: GO 26075
26075: DISABLE
// begin enable ;
26076: ENABLE
// game_speed := 7 ;
26077: LD_ADDR_OWVAR 65
26081: PUSH
26082: LD_INT 7
26084: ST_TO_ADDR
// end ;
26085: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26086: LD_EXP 61
26090: PUSH
26091: LD_EXP 68
26095: AND
26096: IFFALSE 26298
26098: GO 26100
26100: DISABLE
26101: LD_INT 0
26103: PPUSH
26104: PPUSH
26105: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26106: LD_ADDR_VAR 0 3
26110: PUSH
26111: LD_INT 81
26113: PUSH
26114: LD_OWVAR 2
26118: PUSH
26119: EMPTY
26120: LIST
26121: LIST
26122: PUSH
26123: LD_INT 21
26125: PUSH
26126: LD_INT 1
26128: PUSH
26129: EMPTY
26130: LIST
26131: LIST
26132: PUSH
26133: EMPTY
26134: LIST
26135: LIST
26136: PPUSH
26137: CALL_OW 69
26141: ST_TO_ADDR
// if not tmp then
26142: LD_VAR 0 3
26146: NOT
26147: IFFALSE 26151
// exit ;
26149: GO 26298
// if tmp > 5 then
26151: LD_VAR 0 3
26155: PUSH
26156: LD_INT 5
26158: GREATER
26159: IFFALSE 26171
// k := 5 else
26161: LD_ADDR_VAR 0 2
26165: PUSH
26166: LD_INT 5
26168: ST_TO_ADDR
26169: GO 26181
// k := tmp ;
26171: LD_ADDR_VAR 0 2
26175: PUSH
26176: LD_VAR 0 3
26180: ST_TO_ADDR
// for i := 1 to k do
26181: LD_ADDR_VAR 0 1
26185: PUSH
26186: DOUBLE
26187: LD_INT 1
26189: DEC
26190: ST_TO_ADDR
26191: LD_VAR 0 2
26195: PUSH
26196: FOR_TO
26197: IFFALSE 26296
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26199: LD_VAR 0 3
26203: PUSH
26204: LD_VAR 0 1
26208: ARRAY
26209: PPUSH
26210: LD_VAR 0 1
26214: PUSH
26215: LD_INT 4
26217: MOD
26218: PUSH
26219: LD_INT 1
26221: PLUS
26222: PPUSH
26223: CALL_OW 259
26227: PUSH
26228: LD_INT 10
26230: LESS
26231: IFFALSE 26294
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26233: LD_VAR 0 3
26237: PUSH
26238: LD_VAR 0 1
26242: ARRAY
26243: PPUSH
26244: LD_VAR 0 1
26248: PUSH
26249: LD_INT 4
26251: MOD
26252: PUSH
26253: LD_INT 1
26255: PLUS
26256: PPUSH
26257: LD_VAR 0 3
26261: PUSH
26262: LD_VAR 0 1
26266: ARRAY
26267: PPUSH
26268: LD_VAR 0 1
26272: PUSH
26273: LD_INT 4
26275: MOD
26276: PUSH
26277: LD_INT 1
26279: PLUS
26280: PPUSH
26281: CALL_OW 259
26285: PUSH
26286: LD_INT 1
26288: PLUS
26289: PPUSH
26290: CALL_OW 237
26294: GO 26196
26296: POP
26297: POP
// end ;
26298: PPOPN 3
26300: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26301: LD_EXP 61
26305: PUSH
26306: LD_EXP 69
26310: AND
26311: IFFALSE 26331
26313: GO 26315
26315: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26316: LD_INT 4
26318: PPUSH
26319: LD_OWVAR 2
26323: PPUSH
26324: LD_INT 0
26326: PPUSH
26327: CALL_OW 324
26331: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26332: LD_EXP 61
26336: PUSH
26337: LD_EXP 98
26341: AND
26342: IFFALSE 26362
26344: GO 26346
26346: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26347: LD_INT 19
26349: PPUSH
26350: LD_OWVAR 2
26354: PPUSH
26355: LD_INT 0
26357: PPUSH
26358: CALL_OW 324
26362: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26363: LD_EXP 61
26367: PUSH
26368: LD_EXP 70
26372: AND
26373: IFFALSE 26475
26375: GO 26377
26377: DISABLE
26378: LD_INT 0
26380: PPUSH
26381: PPUSH
// begin enable ;
26382: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26383: LD_ADDR_VAR 0 2
26387: PUSH
26388: LD_INT 22
26390: PUSH
26391: LD_OWVAR 2
26395: PUSH
26396: EMPTY
26397: LIST
26398: LIST
26399: PUSH
26400: LD_INT 2
26402: PUSH
26403: LD_INT 34
26405: PUSH
26406: LD_INT 11
26408: PUSH
26409: EMPTY
26410: LIST
26411: LIST
26412: PUSH
26413: LD_INT 34
26415: PUSH
26416: LD_INT 30
26418: PUSH
26419: EMPTY
26420: LIST
26421: LIST
26422: PUSH
26423: EMPTY
26424: LIST
26425: LIST
26426: LIST
26427: PUSH
26428: EMPTY
26429: LIST
26430: LIST
26431: PPUSH
26432: CALL_OW 69
26436: ST_TO_ADDR
// if not tmp then
26437: LD_VAR 0 2
26441: NOT
26442: IFFALSE 26446
// exit ;
26444: GO 26475
// for i in tmp do
26446: LD_ADDR_VAR 0 1
26450: PUSH
26451: LD_VAR 0 2
26455: PUSH
26456: FOR_IN
26457: IFFALSE 26473
// begin SetLives ( i , 0 ) ;
26459: LD_VAR 0 1
26463: PPUSH
26464: LD_INT 0
26466: PPUSH
26467: CALL_OW 234
// end ;
26471: GO 26456
26473: POP
26474: POP
// end ;
26475: PPOPN 2
26477: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26478: LD_EXP 61
26482: PUSH
26483: LD_EXP 71
26487: AND
26488: IFFALSE 26508
26490: GO 26492
26492: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26493: LD_INT 32
26495: PPUSH
26496: LD_OWVAR 2
26500: PPUSH
26501: LD_INT 0
26503: PPUSH
26504: CALL_OW 324
26508: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26509: LD_EXP 61
26513: PUSH
26514: LD_EXP 72
26518: AND
26519: IFFALSE 26700
26521: GO 26523
26523: DISABLE
26524: LD_INT 0
26526: PPUSH
26527: PPUSH
26528: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26529: LD_ADDR_VAR 0 2
26533: PUSH
26534: LD_INT 22
26536: PUSH
26537: LD_OWVAR 2
26541: PUSH
26542: EMPTY
26543: LIST
26544: LIST
26545: PUSH
26546: LD_INT 33
26548: PUSH
26549: LD_INT 3
26551: PUSH
26552: EMPTY
26553: LIST
26554: LIST
26555: PUSH
26556: EMPTY
26557: LIST
26558: LIST
26559: PPUSH
26560: CALL_OW 69
26564: ST_TO_ADDR
// if not tmp then
26565: LD_VAR 0 2
26569: NOT
26570: IFFALSE 26574
// exit ;
26572: GO 26700
// side := 0 ;
26574: LD_ADDR_VAR 0 3
26578: PUSH
26579: LD_INT 0
26581: ST_TO_ADDR
// for i := 1 to 8 do
26582: LD_ADDR_VAR 0 1
26586: PUSH
26587: DOUBLE
26588: LD_INT 1
26590: DEC
26591: ST_TO_ADDR
26592: LD_INT 8
26594: PUSH
26595: FOR_TO
26596: IFFALSE 26644
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26598: LD_OWVAR 2
26602: PUSH
26603: LD_VAR 0 1
26607: NONEQUAL
26608: PUSH
26609: LD_OWVAR 2
26613: PPUSH
26614: LD_VAR 0 1
26618: PPUSH
26619: CALL_OW 81
26623: PUSH
26624: LD_INT 2
26626: EQUAL
26627: AND
26628: IFFALSE 26642
// begin side := i ;
26630: LD_ADDR_VAR 0 3
26634: PUSH
26635: LD_VAR 0 1
26639: ST_TO_ADDR
// break ;
26640: GO 26644
// end ;
26642: GO 26595
26644: POP
26645: POP
// if not side then
26646: LD_VAR 0 3
26650: NOT
26651: IFFALSE 26655
// exit ;
26653: GO 26700
// for i := 1 to tmp do
26655: LD_ADDR_VAR 0 1
26659: PUSH
26660: DOUBLE
26661: LD_INT 1
26663: DEC
26664: ST_TO_ADDR
26665: LD_VAR 0 2
26669: PUSH
26670: FOR_TO
26671: IFFALSE 26698
// if Prob ( 60 ) then
26673: LD_INT 60
26675: PPUSH
26676: CALL_OW 13
26680: IFFALSE 26696
// SetSide ( i , side ) ;
26682: LD_VAR 0 1
26686: PPUSH
26687: LD_VAR 0 3
26691: PPUSH
26692: CALL_OW 235
26696: GO 26670
26698: POP
26699: POP
// end ;
26700: PPOPN 3
26702: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26703: LD_EXP 61
26707: PUSH
26708: LD_EXP 74
26712: AND
26713: IFFALSE 26832
26715: GO 26717
26717: DISABLE
26718: LD_INT 0
26720: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26721: LD_ADDR_VAR 0 1
26725: PUSH
26726: LD_INT 22
26728: PUSH
26729: LD_OWVAR 2
26733: PUSH
26734: EMPTY
26735: LIST
26736: LIST
26737: PUSH
26738: LD_INT 21
26740: PUSH
26741: LD_INT 1
26743: PUSH
26744: EMPTY
26745: LIST
26746: LIST
26747: PUSH
26748: LD_INT 3
26750: PUSH
26751: LD_INT 23
26753: PUSH
26754: LD_INT 0
26756: PUSH
26757: EMPTY
26758: LIST
26759: LIST
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: PUSH
26765: EMPTY
26766: LIST
26767: LIST
26768: LIST
26769: PPUSH
26770: CALL_OW 69
26774: PUSH
26775: FOR_IN
26776: IFFALSE 26830
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26778: LD_VAR 0 1
26782: PPUSH
26783: CALL_OW 257
26787: PUSH
26788: LD_INT 1
26790: PUSH
26791: LD_INT 2
26793: PUSH
26794: LD_INT 3
26796: PUSH
26797: LD_INT 4
26799: PUSH
26800: EMPTY
26801: LIST
26802: LIST
26803: LIST
26804: LIST
26805: IN
26806: IFFALSE 26828
// SetClass ( un , rand ( 1 , 4 ) ) ;
26808: LD_VAR 0 1
26812: PPUSH
26813: LD_INT 1
26815: PPUSH
26816: LD_INT 4
26818: PPUSH
26819: CALL_OW 12
26823: PPUSH
26824: CALL_OW 336
26828: GO 26775
26830: POP
26831: POP
// end ;
26832: PPOPN 1
26834: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26835: LD_EXP 61
26839: PUSH
26840: LD_EXP 73
26844: AND
26845: IFFALSE 26924
26847: GO 26849
26849: DISABLE
26850: LD_INT 0
26852: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26853: LD_ADDR_VAR 0 1
26857: PUSH
26858: LD_INT 22
26860: PUSH
26861: LD_OWVAR 2
26865: PUSH
26866: EMPTY
26867: LIST
26868: LIST
26869: PUSH
26870: LD_INT 21
26872: PUSH
26873: LD_INT 3
26875: PUSH
26876: EMPTY
26877: LIST
26878: LIST
26879: PUSH
26880: EMPTY
26881: LIST
26882: LIST
26883: PPUSH
26884: CALL_OW 69
26888: ST_TO_ADDR
// if not tmp then
26889: LD_VAR 0 1
26893: NOT
26894: IFFALSE 26898
// exit ;
26896: GO 26924
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26898: LD_VAR 0 1
26902: PUSH
26903: LD_INT 1
26905: PPUSH
26906: LD_VAR 0 1
26910: PPUSH
26911: CALL_OW 12
26915: ARRAY
26916: PPUSH
26917: LD_INT 100
26919: PPUSH
26920: CALL_OW 234
// end ;
26924: PPOPN 1
26926: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26927: LD_EXP 61
26931: PUSH
26932: LD_EXP 75
26936: AND
26937: IFFALSE 27035
26939: GO 26941
26941: DISABLE
26942: LD_INT 0
26944: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26945: LD_ADDR_VAR 0 1
26949: PUSH
26950: LD_INT 22
26952: PUSH
26953: LD_OWVAR 2
26957: PUSH
26958: EMPTY
26959: LIST
26960: LIST
26961: PUSH
26962: LD_INT 21
26964: PUSH
26965: LD_INT 1
26967: PUSH
26968: EMPTY
26969: LIST
26970: LIST
26971: PUSH
26972: EMPTY
26973: LIST
26974: LIST
26975: PPUSH
26976: CALL_OW 69
26980: ST_TO_ADDR
// if not tmp then
26981: LD_VAR 0 1
26985: NOT
26986: IFFALSE 26990
// exit ;
26988: GO 27035
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26990: LD_VAR 0 1
26994: PUSH
26995: LD_INT 1
26997: PPUSH
26998: LD_VAR 0 1
27002: PPUSH
27003: CALL_OW 12
27007: ARRAY
27008: PPUSH
27009: LD_INT 1
27011: PPUSH
27012: LD_INT 4
27014: PPUSH
27015: CALL_OW 12
27019: PPUSH
27020: LD_INT 3000
27022: PPUSH
27023: LD_INT 9000
27025: PPUSH
27026: CALL_OW 12
27030: PPUSH
27031: CALL_OW 492
// end ;
27035: PPOPN 1
27037: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27038: LD_EXP 61
27042: PUSH
27043: LD_EXP 76
27047: AND
27048: IFFALSE 27068
27050: GO 27052
27052: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27053: LD_INT 1
27055: PPUSH
27056: LD_OWVAR 2
27060: PPUSH
27061: LD_INT 0
27063: PPUSH
27064: CALL_OW 324
27068: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27069: LD_EXP 61
27073: PUSH
27074: LD_EXP 77
27078: AND
27079: IFFALSE 27162
27081: GO 27083
27083: DISABLE
27084: LD_INT 0
27086: PPUSH
27087: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27088: LD_ADDR_VAR 0 2
27092: PUSH
27093: LD_INT 22
27095: PUSH
27096: LD_OWVAR 2
27100: PUSH
27101: EMPTY
27102: LIST
27103: LIST
27104: PUSH
27105: LD_INT 21
27107: PUSH
27108: LD_INT 3
27110: PUSH
27111: EMPTY
27112: LIST
27113: LIST
27114: PUSH
27115: EMPTY
27116: LIST
27117: LIST
27118: PPUSH
27119: CALL_OW 69
27123: ST_TO_ADDR
// if not tmp then
27124: LD_VAR 0 2
27128: NOT
27129: IFFALSE 27133
// exit ;
27131: GO 27162
// for i in tmp do
27133: LD_ADDR_VAR 0 1
27137: PUSH
27138: LD_VAR 0 2
27142: PUSH
27143: FOR_IN
27144: IFFALSE 27160
// SetBLevel ( i , 10 ) ;
27146: LD_VAR 0 1
27150: PPUSH
27151: LD_INT 10
27153: PPUSH
27154: CALL_OW 241
27158: GO 27143
27160: POP
27161: POP
// end ;
27162: PPOPN 2
27164: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27165: LD_EXP 61
27169: PUSH
27170: LD_EXP 78
27174: AND
27175: IFFALSE 27286
27177: GO 27179
27179: DISABLE
27180: LD_INT 0
27182: PPUSH
27183: PPUSH
27184: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27185: LD_ADDR_VAR 0 3
27189: PUSH
27190: LD_INT 22
27192: PUSH
27193: LD_OWVAR 2
27197: PUSH
27198: EMPTY
27199: LIST
27200: LIST
27201: PUSH
27202: LD_INT 25
27204: PUSH
27205: LD_INT 1
27207: PUSH
27208: EMPTY
27209: LIST
27210: LIST
27211: PUSH
27212: EMPTY
27213: LIST
27214: LIST
27215: PPUSH
27216: CALL_OW 69
27220: ST_TO_ADDR
// if not tmp then
27221: LD_VAR 0 3
27225: NOT
27226: IFFALSE 27230
// exit ;
27228: GO 27286
// un := tmp [ rand ( 1 , tmp ) ] ;
27230: LD_ADDR_VAR 0 2
27234: PUSH
27235: LD_VAR 0 3
27239: PUSH
27240: LD_INT 1
27242: PPUSH
27243: LD_VAR 0 3
27247: PPUSH
27248: CALL_OW 12
27252: ARRAY
27253: ST_TO_ADDR
// if Crawls ( un ) then
27254: LD_VAR 0 2
27258: PPUSH
27259: CALL_OW 318
27263: IFFALSE 27274
// ComWalk ( un ) ;
27265: LD_VAR 0 2
27269: PPUSH
27270: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27274: LD_VAR 0 2
27278: PPUSH
27279: LD_INT 5
27281: PPUSH
27282: CALL_OW 336
// end ;
27286: PPOPN 3
27288: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27289: LD_EXP 61
27293: PUSH
27294: LD_EXP 79
27298: AND
27299: PUSH
27300: LD_OWVAR 67
27304: PUSH
27305: LD_INT 4
27307: LESS
27308: AND
27309: IFFALSE 27328
27311: GO 27313
27313: DISABLE
// begin Difficulty := Difficulty + 1 ;
27314: LD_ADDR_OWVAR 67
27318: PUSH
27319: LD_OWVAR 67
27323: PUSH
27324: LD_INT 1
27326: PLUS
27327: ST_TO_ADDR
// end ;
27328: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27329: LD_EXP 61
27333: PUSH
27334: LD_EXP 80
27338: AND
27339: IFFALSE 27442
27341: GO 27343
27343: DISABLE
27344: LD_INT 0
27346: PPUSH
// begin for i := 1 to 5 do
27347: LD_ADDR_VAR 0 1
27351: PUSH
27352: DOUBLE
27353: LD_INT 1
27355: DEC
27356: ST_TO_ADDR
27357: LD_INT 5
27359: PUSH
27360: FOR_TO
27361: IFFALSE 27440
// begin uc_nation := nation_nature ;
27363: LD_ADDR_OWVAR 21
27367: PUSH
27368: LD_INT 0
27370: ST_TO_ADDR
// uc_side := 0 ;
27371: LD_ADDR_OWVAR 20
27375: PUSH
27376: LD_INT 0
27378: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27379: LD_ADDR_OWVAR 29
27383: PUSH
27384: LD_INT 12
27386: PUSH
27387: LD_INT 12
27389: PUSH
27390: EMPTY
27391: LIST
27392: LIST
27393: ST_TO_ADDR
// hc_agressivity := 20 ;
27394: LD_ADDR_OWVAR 35
27398: PUSH
27399: LD_INT 20
27401: ST_TO_ADDR
// hc_class := class_tiger ;
27402: LD_ADDR_OWVAR 28
27406: PUSH
27407: LD_INT 14
27409: ST_TO_ADDR
// hc_gallery :=  ;
27410: LD_ADDR_OWVAR 33
27414: PUSH
27415: LD_STRING 
27417: ST_TO_ADDR
// hc_name :=  ;
27418: LD_ADDR_OWVAR 26
27422: PUSH
27423: LD_STRING 
27425: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27426: CALL_OW 44
27430: PPUSH
27431: LD_INT 0
27433: PPUSH
27434: CALL_OW 51
// end ;
27438: GO 27360
27440: POP
27441: POP
// end ;
27442: PPOPN 1
27444: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27445: LD_EXP 61
27449: PUSH
27450: LD_EXP 81
27454: AND
27455: IFFALSE 27464
27457: GO 27459
27459: DISABLE
// StreamSibBomb ;
27460: CALL 27465 0 0
27464: END
// export function StreamSibBomb ; var i , x , y ; begin
27465: LD_INT 0
27467: PPUSH
27468: PPUSH
27469: PPUSH
27470: PPUSH
// result := false ;
27471: LD_ADDR_VAR 0 1
27475: PUSH
27476: LD_INT 0
27478: ST_TO_ADDR
// for i := 1 to 16 do
27479: LD_ADDR_VAR 0 2
27483: PUSH
27484: DOUBLE
27485: LD_INT 1
27487: DEC
27488: ST_TO_ADDR
27489: LD_INT 16
27491: PUSH
27492: FOR_TO
27493: IFFALSE 27692
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27495: LD_ADDR_VAR 0 3
27499: PUSH
27500: LD_INT 10
27502: PUSH
27503: LD_INT 20
27505: PUSH
27506: LD_INT 30
27508: PUSH
27509: LD_INT 40
27511: PUSH
27512: LD_INT 50
27514: PUSH
27515: LD_INT 60
27517: PUSH
27518: LD_INT 70
27520: PUSH
27521: LD_INT 80
27523: PUSH
27524: LD_INT 90
27526: PUSH
27527: LD_INT 100
27529: PUSH
27530: LD_INT 110
27532: PUSH
27533: LD_INT 120
27535: PUSH
27536: LD_INT 130
27538: PUSH
27539: LD_INT 140
27541: PUSH
27542: LD_INT 150
27544: PUSH
27545: EMPTY
27546: LIST
27547: LIST
27548: LIST
27549: LIST
27550: LIST
27551: LIST
27552: LIST
27553: LIST
27554: LIST
27555: LIST
27556: LIST
27557: LIST
27558: LIST
27559: LIST
27560: LIST
27561: PUSH
27562: LD_INT 1
27564: PPUSH
27565: LD_INT 15
27567: PPUSH
27568: CALL_OW 12
27572: ARRAY
27573: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27574: LD_ADDR_VAR 0 4
27578: PUSH
27579: LD_INT 10
27581: PUSH
27582: LD_INT 20
27584: PUSH
27585: LD_INT 30
27587: PUSH
27588: LD_INT 40
27590: PUSH
27591: LD_INT 50
27593: PUSH
27594: LD_INT 60
27596: PUSH
27597: LD_INT 70
27599: PUSH
27600: LD_INT 80
27602: PUSH
27603: LD_INT 90
27605: PUSH
27606: LD_INT 100
27608: PUSH
27609: LD_INT 110
27611: PUSH
27612: LD_INT 120
27614: PUSH
27615: LD_INT 130
27617: PUSH
27618: LD_INT 140
27620: PUSH
27621: LD_INT 150
27623: PUSH
27624: EMPTY
27625: LIST
27626: LIST
27627: LIST
27628: LIST
27629: LIST
27630: LIST
27631: LIST
27632: LIST
27633: LIST
27634: LIST
27635: LIST
27636: LIST
27637: LIST
27638: LIST
27639: LIST
27640: PUSH
27641: LD_INT 1
27643: PPUSH
27644: LD_INT 15
27646: PPUSH
27647: CALL_OW 12
27651: ARRAY
27652: ST_TO_ADDR
// if ValidHex ( x , y ) then
27653: LD_VAR 0 3
27657: PPUSH
27658: LD_VAR 0 4
27662: PPUSH
27663: CALL_OW 488
27667: IFFALSE 27690
// begin result := [ x , y ] ;
27669: LD_ADDR_VAR 0 1
27673: PUSH
27674: LD_VAR 0 3
27678: PUSH
27679: LD_VAR 0 4
27683: PUSH
27684: EMPTY
27685: LIST
27686: LIST
27687: ST_TO_ADDR
// break ;
27688: GO 27692
// end ; end ;
27690: GO 27492
27692: POP
27693: POP
// if result then
27694: LD_VAR 0 1
27698: IFFALSE 27758
// begin ToLua ( playSibBomb() ) ;
27700: LD_STRING playSibBomb()
27702: PPUSH
27703: CALL_OW 559
// wait ( 0 0$14 ) ;
27707: LD_INT 490
27709: PPUSH
27710: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27714: LD_VAR 0 1
27718: PUSH
27719: LD_INT 1
27721: ARRAY
27722: PPUSH
27723: LD_VAR 0 1
27727: PUSH
27728: LD_INT 2
27730: ARRAY
27731: PPUSH
27732: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27736: LD_VAR 0 1
27740: PUSH
27741: LD_INT 1
27743: ARRAY
27744: PPUSH
27745: LD_VAR 0 1
27749: PUSH
27750: LD_INT 2
27752: ARRAY
27753: PPUSH
27754: CALL_OW 429
// end ; end ;
27758: LD_VAR 0 1
27762: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27763: LD_EXP 61
27767: PUSH
27768: LD_EXP 83
27772: AND
27773: IFFALSE 27785
27775: GO 27777
27777: DISABLE
// YouLost (  ) ;
27778: LD_STRING 
27780: PPUSH
27781: CALL_OW 104
27785: END
// every 0 0$1 trigger StreamModeActive and sFog do
27786: LD_EXP 61
27790: PUSH
27791: LD_EXP 82
27795: AND
27796: IFFALSE 27810
27798: GO 27800
27800: DISABLE
// FogOff ( your_side ) ;
27801: LD_OWVAR 2
27805: PPUSH
27806: CALL_OW 344
27810: END
// every 0 0$1 trigger StreamModeActive and sSun do
27811: LD_EXP 61
27815: PUSH
27816: LD_EXP 84
27820: AND
27821: IFFALSE 27849
27823: GO 27825
27825: DISABLE
// begin solar_recharge_percent := 0 ;
27826: LD_ADDR_OWVAR 79
27830: PUSH
27831: LD_INT 0
27833: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27834: LD_INT 10500
27836: PPUSH
27837: CALL_OW 67
// solar_recharge_percent := 100 ;
27841: LD_ADDR_OWVAR 79
27845: PUSH
27846: LD_INT 100
27848: ST_TO_ADDR
// end ;
27849: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27850: LD_EXP 61
27854: PUSH
27855: LD_EXP 85
27859: AND
27860: IFFALSE 28099
27862: GO 27864
27864: DISABLE
27865: LD_INT 0
27867: PPUSH
27868: PPUSH
27869: PPUSH
// begin tmp := [ ] ;
27870: LD_ADDR_VAR 0 3
27874: PUSH
27875: EMPTY
27876: ST_TO_ADDR
// for i := 1 to 6 do
27877: LD_ADDR_VAR 0 1
27881: PUSH
27882: DOUBLE
27883: LD_INT 1
27885: DEC
27886: ST_TO_ADDR
27887: LD_INT 6
27889: PUSH
27890: FOR_TO
27891: IFFALSE 27996
// begin uc_nation := nation_nature ;
27893: LD_ADDR_OWVAR 21
27897: PUSH
27898: LD_INT 0
27900: ST_TO_ADDR
// uc_side := 0 ;
27901: LD_ADDR_OWVAR 20
27905: PUSH
27906: LD_INT 0
27908: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27909: LD_ADDR_OWVAR 29
27913: PUSH
27914: LD_INT 12
27916: PUSH
27917: LD_INT 12
27919: PUSH
27920: EMPTY
27921: LIST
27922: LIST
27923: ST_TO_ADDR
// hc_agressivity := 20 ;
27924: LD_ADDR_OWVAR 35
27928: PUSH
27929: LD_INT 20
27931: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27932: LD_ADDR_OWVAR 28
27936: PUSH
27937: LD_INT 17
27939: ST_TO_ADDR
// hc_gallery :=  ;
27940: LD_ADDR_OWVAR 33
27944: PUSH
27945: LD_STRING 
27947: ST_TO_ADDR
// hc_name :=  ;
27948: LD_ADDR_OWVAR 26
27952: PUSH
27953: LD_STRING 
27955: ST_TO_ADDR
// un := CreateHuman ;
27956: LD_ADDR_VAR 0 2
27960: PUSH
27961: CALL_OW 44
27965: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27966: LD_VAR 0 2
27970: PPUSH
27971: LD_INT 1
27973: PPUSH
27974: CALL_OW 51
// tmp := tmp ^ un ;
27978: LD_ADDR_VAR 0 3
27982: PUSH
27983: LD_VAR 0 3
27987: PUSH
27988: LD_VAR 0 2
27992: ADD
27993: ST_TO_ADDR
// end ;
27994: GO 27890
27996: POP
27997: POP
// repeat wait ( 0 0$1 ) ;
27998: LD_INT 35
28000: PPUSH
28001: CALL_OW 67
// for un in tmp do
28005: LD_ADDR_VAR 0 2
28009: PUSH
28010: LD_VAR 0 3
28014: PUSH
28015: FOR_IN
28016: IFFALSE 28090
// begin if IsDead ( un ) then
28018: LD_VAR 0 2
28022: PPUSH
28023: CALL_OW 301
28027: IFFALSE 28047
// begin tmp := tmp diff un ;
28029: LD_ADDR_VAR 0 3
28033: PUSH
28034: LD_VAR 0 3
28038: PUSH
28039: LD_VAR 0 2
28043: DIFF
28044: ST_TO_ADDR
// continue ;
28045: GO 28015
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28047: LD_VAR 0 2
28051: PPUSH
28052: LD_INT 3
28054: PUSH
28055: LD_INT 22
28057: PUSH
28058: LD_INT 0
28060: PUSH
28061: EMPTY
28062: LIST
28063: LIST
28064: PUSH
28065: EMPTY
28066: LIST
28067: LIST
28068: PPUSH
28069: CALL_OW 69
28073: PPUSH
28074: LD_VAR 0 2
28078: PPUSH
28079: CALL_OW 74
28083: PPUSH
28084: CALL_OW 115
// end ;
28088: GO 28015
28090: POP
28091: POP
// until not tmp ;
28092: LD_VAR 0 3
28096: NOT
28097: IFFALSE 27998
// end ;
28099: PPOPN 3
28101: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28102: LD_EXP 61
28106: PUSH
28107: LD_EXP 86
28111: AND
28112: IFFALSE 28166
28114: GO 28116
28116: DISABLE
// begin ToLua ( displayTroll(); ) ;
28117: LD_STRING displayTroll();
28119: PPUSH
28120: CALL_OW 559
// wait ( 3 3$00 ) ;
28124: LD_INT 6300
28126: PPUSH
28127: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28131: LD_STRING hideTroll();
28133: PPUSH
28134: CALL_OW 559
// wait ( 1 1$00 ) ;
28138: LD_INT 2100
28140: PPUSH
28141: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28145: LD_STRING displayTroll();
28147: PPUSH
28148: CALL_OW 559
// wait ( 1 1$00 ) ;
28152: LD_INT 2100
28154: PPUSH
28155: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28159: LD_STRING hideTroll();
28161: PPUSH
28162: CALL_OW 559
// end ;
28166: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28167: LD_EXP 61
28171: PUSH
28172: LD_EXP 87
28176: AND
28177: IFFALSE 28240
28179: GO 28181
28181: DISABLE
28182: LD_INT 0
28184: PPUSH
// begin p := 0 ;
28185: LD_ADDR_VAR 0 1
28189: PUSH
28190: LD_INT 0
28192: ST_TO_ADDR
// repeat game_speed := 1 ;
28193: LD_ADDR_OWVAR 65
28197: PUSH
28198: LD_INT 1
28200: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28201: LD_INT 35
28203: PPUSH
28204: CALL_OW 67
// p := p + 1 ;
28208: LD_ADDR_VAR 0 1
28212: PUSH
28213: LD_VAR 0 1
28217: PUSH
28218: LD_INT 1
28220: PLUS
28221: ST_TO_ADDR
// until p >= 60 ;
28222: LD_VAR 0 1
28226: PUSH
28227: LD_INT 60
28229: GREATEREQUAL
28230: IFFALSE 28193
// game_speed := 4 ;
28232: LD_ADDR_OWVAR 65
28236: PUSH
28237: LD_INT 4
28239: ST_TO_ADDR
// end ;
28240: PPOPN 1
28242: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28243: LD_EXP 61
28247: PUSH
28248: LD_EXP 88
28252: AND
28253: IFFALSE 28399
28255: GO 28257
28257: DISABLE
28258: LD_INT 0
28260: PPUSH
28261: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28262: LD_ADDR_VAR 0 1
28266: PUSH
28267: LD_INT 22
28269: PUSH
28270: LD_OWVAR 2
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: PUSH
28279: LD_INT 2
28281: PUSH
28282: LD_INT 30
28284: PUSH
28285: LD_INT 0
28287: PUSH
28288: EMPTY
28289: LIST
28290: LIST
28291: PUSH
28292: LD_INT 30
28294: PUSH
28295: LD_INT 1
28297: PUSH
28298: EMPTY
28299: LIST
28300: LIST
28301: PUSH
28302: EMPTY
28303: LIST
28304: LIST
28305: LIST
28306: PUSH
28307: EMPTY
28308: LIST
28309: LIST
28310: PPUSH
28311: CALL_OW 69
28315: ST_TO_ADDR
// if not depot then
28316: LD_VAR 0 1
28320: NOT
28321: IFFALSE 28325
// exit ;
28323: GO 28399
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28325: LD_ADDR_VAR 0 2
28329: PUSH
28330: LD_VAR 0 1
28334: PUSH
28335: LD_INT 1
28337: PPUSH
28338: LD_VAR 0 1
28342: PPUSH
28343: CALL_OW 12
28347: ARRAY
28348: PPUSH
28349: CALL_OW 274
28353: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28354: LD_VAR 0 2
28358: PPUSH
28359: LD_INT 1
28361: PPUSH
28362: LD_INT 0
28364: PPUSH
28365: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28369: LD_VAR 0 2
28373: PPUSH
28374: LD_INT 2
28376: PPUSH
28377: LD_INT 0
28379: PPUSH
28380: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28384: LD_VAR 0 2
28388: PPUSH
28389: LD_INT 3
28391: PPUSH
28392: LD_INT 0
28394: PPUSH
28395: CALL_OW 277
// end ;
28399: PPOPN 2
28401: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28402: LD_EXP 61
28406: PUSH
28407: LD_EXP 89
28411: AND
28412: IFFALSE 28509
28414: GO 28416
28416: DISABLE
28417: LD_INT 0
28419: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28420: LD_ADDR_VAR 0 1
28424: PUSH
28425: LD_INT 22
28427: PUSH
28428: LD_OWVAR 2
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: PUSH
28437: LD_INT 21
28439: PUSH
28440: LD_INT 1
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: PUSH
28447: LD_INT 3
28449: PUSH
28450: LD_INT 23
28452: PUSH
28453: LD_INT 0
28455: PUSH
28456: EMPTY
28457: LIST
28458: LIST
28459: PUSH
28460: EMPTY
28461: LIST
28462: LIST
28463: PUSH
28464: EMPTY
28465: LIST
28466: LIST
28467: LIST
28468: PPUSH
28469: CALL_OW 69
28473: ST_TO_ADDR
// if not tmp then
28474: LD_VAR 0 1
28478: NOT
28479: IFFALSE 28483
// exit ;
28481: GO 28509
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28483: LD_VAR 0 1
28487: PUSH
28488: LD_INT 1
28490: PPUSH
28491: LD_VAR 0 1
28495: PPUSH
28496: CALL_OW 12
28500: ARRAY
28501: PPUSH
28502: LD_INT 200
28504: PPUSH
28505: CALL_OW 234
// end ;
28509: PPOPN 1
28511: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28512: LD_EXP 61
28516: PUSH
28517: LD_EXP 90
28521: AND
28522: IFFALSE 28601
28524: GO 28526
28526: DISABLE
28527: LD_INT 0
28529: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28530: LD_ADDR_VAR 0 1
28534: PUSH
28535: LD_INT 22
28537: PUSH
28538: LD_OWVAR 2
28542: PUSH
28543: EMPTY
28544: LIST
28545: LIST
28546: PUSH
28547: LD_INT 21
28549: PUSH
28550: LD_INT 2
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: PUSH
28557: EMPTY
28558: LIST
28559: LIST
28560: PPUSH
28561: CALL_OW 69
28565: ST_TO_ADDR
// if not tmp then
28566: LD_VAR 0 1
28570: NOT
28571: IFFALSE 28575
// exit ;
28573: GO 28601
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28575: LD_VAR 0 1
28579: PUSH
28580: LD_INT 1
28582: PPUSH
28583: LD_VAR 0 1
28587: PPUSH
28588: CALL_OW 12
28592: ARRAY
28593: PPUSH
28594: LD_INT 60
28596: PPUSH
28597: CALL_OW 234
// end ;
28601: PPOPN 1
28603: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28604: LD_EXP 61
28608: PUSH
28609: LD_EXP 91
28613: AND
28614: IFFALSE 28713
28616: GO 28618
28618: DISABLE
28619: LD_INT 0
28621: PPUSH
28622: PPUSH
// begin enable ;
28623: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28624: LD_ADDR_VAR 0 1
28628: PUSH
28629: LD_INT 22
28631: PUSH
28632: LD_OWVAR 2
28636: PUSH
28637: EMPTY
28638: LIST
28639: LIST
28640: PUSH
28641: LD_INT 61
28643: PUSH
28644: EMPTY
28645: LIST
28646: PUSH
28647: LD_INT 33
28649: PUSH
28650: LD_INT 2
28652: PUSH
28653: EMPTY
28654: LIST
28655: LIST
28656: PUSH
28657: EMPTY
28658: LIST
28659: LIST
28660: LIST
28661: PPUSH
28662: CALL_OW 69
28666: ST_TO_ADDR
// if not tmp then
28667: LD_VAR 0 1
28671: NOT
28672: IFFALSE 28676
// exit ;
28674: GO 28713
// for i in tmp do
28676: LD_ADDR_VAR 0 2
28680: PUSH
28681: LD_VAR 0 1
28685: PUSH
28686: FOR_IN
28687: IFFALSE 28711
// if IsControledBy ( i ) then
28689: LD_VAR 0 2
28693: PPUSH
28694: CALL_OW 312
28698: IFFALSE 28709
// ComUnlink ( i ) ;
28700: LD_VAR 0 2
28704: PPUSH
28705: CALL_OW 136
28709: GO 28686
28711: POP
28712: POP
// end ;
28713: PPOPN 2
28715: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28716: LD_EXP 61
28720: PUSH
28721: LD_EXP 92
28725: AND
28726: IFFALSE 28866
28728: GO 28730
28730: DISABLE
28731: LD_INT 0
28733: PPUSH
28734: PPUSH
// begin ToLua ( displayPowell(); ) ;
28735: LD_STRING displayPowell();
28737: PPUSH
28738: CALL_OW 559
// uc_side := 0 ;
28742: LD_ADDR_OWVAR 20
28746: PUSH
28747: LD_INT 0
28749: ST_TO_ADDR
// uc_nation := 2 ;
28750: LD_ADDR_OWVAR 21
28754: PUSH
28755: LD_INT 2
28757: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28758: LD_ADDR_OWVAR 37
28762: PUSH
28763: LD_INT 14
28765: ST_TO_ADDR
// vc_engine := engine_siberite ;
28766: LD_ADDR_OWVAR 39
28770: PUSH
28771: LD_INT 3
28773: ST_TO_ADDR
// vc_control := control_apeman ;
28774: LD_ADDR_OWVAR 38
28778: PUSH
28779: LD_INT 5
28781: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28782: LD_ADDR_OWVAR 40
28786: PUSH
28787: LD_INT 29
28789: ST_TO_ADDR
// un := CreateVehicle ;
28790: LD_ADDR_VAR 0 2
28794: PUSH
28795: CALL_OW 45
28799: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28800: LD_VAR 0 2
28804: PPUSH
28805: LD_INT 1
28807: PPUSH
28808: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28812: LD_INT 35
28814: PPUSH
28815: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28819: LD_VAR 0 2
28823: PPUSH
28824: LD_INT 22
28826: PUSH
28827: LD_OWVAR 2
28831: PUSH
28832: EMPTY
28833: LIST
28834: LIST
28835: PPUSH
28836: CALL_OW 69
28840: PPUSH
28841: LD_VAR 0 2
28845: PPUSH
28846: CALL_OW 74
28850: PPUSH
28851: CALL_OW 115
// until IsDead ( un ) ;
28855: LD_VAR 0 2
28859: PPUSH
28860: CALL_OW 301
28864: IFFALSE 28812
// end ;
28866: PPOPN 2
28868: END
// every 0 0$1 trigger StreamModeActive and sStu do
28869: LD_EXP 61
28873: PUSH
28874: LD_EXP 100
28878: AND
28879: IFFALSE 28895
28881: GO 28883
28883: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28884: LD_STRING displayStucuk();
28886: PPUSH
28887: CALL_OW 559
// ResetFog ;
28891: CALL_OW 335
// end ;
28895: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28896: LD_EXP 61
28900: PUSH
28901: LD_EXP 93
28905: AND
28906: IFFALSE 29047
28908: GO 28910
28910: DISABLE
28911: LD_INT 0
28913: PPUSH
28914: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28915: LD_ADDR_VAR 0 2
28919: PUSH
28920: LD_INT 22
28922: PUSH
28923: LD_OWVAR 2
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: PUSH
28932: LD_INT 21
28934: PUSH
28935: LD_INT 1
28937: PUSH
28938: EMPTY
28939: LIST
28940: LIST
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: PPUSH
28946: CALL_OW 69
28950: ST_TO_ADDR
// if not tmp then
28951: LD_VAR 0 2
28955: NOT
28956: IFFALSE 28960
// exit ;
28958: GO 29047
// un := tmp [ rand ( 1 , tmp ) ] ;
28960: LD_ADDR_VAR 0 1
28964: PUSH
28965: LD_VAR 0 2
28969: PUSH
28970: LD_INT 1
28972: PPUSH
28973: LD_VAR 0 2
28977: PPUSH
28978: CALL_OW 12
28982: ARRAY
28983: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28984: LD_VAR 0 1
28988: PPUSH
28989: LD_INT 0
28991: PPUSH
28992: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28996: LD_VAR 0 1
29000: PPUSH
29001: LD_OWVAR 3
29005: PUSH
29006: LD_VAR 0 1
29010: DIFF
29011: PPUSH
29012: LD_VAR 0 1
29016: PPUSH
29017: CALL_OW 74
29021: PPUSH
29022: CALL_OW 115
// wait ( 0 0$20 ) ;
29026: LD_INT 700
29028: PPUSH
29029: CALL_OW 67
// SetSide ( un , your_side ) ;
29033: LD_VAR 0 1
29037: PPUSH
29038: LD_OWVAR 2
29042: PPUSH
29043: CALL_OW 235
// end ;
29047: PPOPN 2
29049: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29050: LD_EXP 61
29054: PUSH
29055: LD_EXP 94
29059: AND
29060: IFFALSE 29166
29062: GO 29064
29064: DISABLE
29065: LD_INT 0
29067: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29068: LD_ADDR_VAR 0 1
29072: PUSH
29073: LD_INT 22
29075: PUSH
29076: LD_OWVAR 2
29080: PUSH
29081: EMPTY
29082: LIST
29083: LIST
29084: PUSH
29085: LD_INT 2
29087: PUSH
29088: LD_INT 30
29090: PUSH
29091: LD_INT 0
29093: PUSH
29094: EMPTY
29095: LIST
29096: LIST
29097: PUSH
29098: LD_INT 30
29100: PUSH
29101: LD_INT 1
29103: PUSH
29104: EMPTY
29105: LIST
29106: LIST
29107: PUSH
29108: EMPTY
29109: LIST
29110: LIST
29111: LIST
29112: PUSH
29113: EMPTY
29114: LIST
29115: LIST
29116: PPUSH
29117: CALL_OW 69
29121: ST_TO_ADDR
// if not depot then
29122: LD_VAR 0 1
29126: NOT
29127: IFFALSE 29131
// exit ;
29129: GO 29166
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29131: LD_VAR 0 1
29135: PUSH
29136: LD_INT 1
29138: ARRAY
29139: PPUSH
29140: CALL_OW 250
29144: PPUSH
29145: LD_VAR 0 1
29149: PUSH
29150: LD_INT 1
29152: ARRAY
29153: PPUSH
29154: CALL_OW 251
29158: PPUSH
29159: LD_INT 70
29161: PPUSH
29162: CALL_OW 495
// end ;
29166: PPOPN 1
29168: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29169: LD_EXP 61
29173: PUSH
29174: LD_EXP 95
29178: AND
29179: IFFALSE 29390
29181: GO 29183
29183: DISABLE
29184: LD_INT 0
29186: PPUSH
29187: PPUSH
29188: PPUSH
29189: PPUSH
29190: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29191: LD_ADDR_VAR 0 5
29195: PUSH
29196: LD_INT 22
29198: PUSH
29199: LD_OWVAR 2
29203: PUSH
29204: EMPTY
29205: LIST
29206: LIST
29207: PUSH
29208: LD_INT 21
29210: PUSH
29211: LD_INT 1
29213: PUSH
29214: EMPTY
29215: LIST
29216: LIST
29217: PUSH
29218: EMPTY
29219: LIST
29220: LIST
29221: PPUSH
29222: CALL_OW 69
29226: ST_TO_ADDR
// if not tmp then
29227: LD_VAR 0 5
29231: NOT
29232: IFFALSE 29236
// exit ;
29234: GO 29390
// for i in tmp do
29236: LD_ADDR_VAR 0 1
29240: PUSH
29241: LD_VAR 0 5
29245: PUSH
29246: FOR_IN
29247: IFFALSE 29388
// begin d := rand ( 0 , 5 ) ;
29249: LD_ADDR_VAR 0 4
29253: PUSH
29254: LD_INT 0
29256: PPUSH
29257: LD_INT 5
29259: PPUSH
29260: CALL_OW 12
29264: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29265: LD_ADDR_VAR 0 2
29269: PUSH
29270: LD_VAR 0 1
29274: PPUSH
29275: CALL_OW 250
29279: PPUSH
29280: LD_VAR 0 4
29284: PPUSH
29285: LD_INT 3
29287: PPUSH
29288: LD_INT 12
29290: PPUSH
29291: CALL_OW 12
29295: PPUSH
29296: CALL_OW 272
29300: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29301: LD_ADDR_VAR 0 3
29305: PUSH
29306: LD_VAR 0 1
29310: PPUSH
29311: CALL_OW 251
29315: PPUSH
29316: LD_VAR 0 4
29320: PPUSH
29321: LD_INT 3
29323: PPUSH
29324: LD_INT 12
29326: PPUSH
29327: CALL_OW 12
29331: PPUSH
29332: CALL_OW 273
29336: ST_TO_ADDR
// if ValidHex ( x , y ) then
29337: LD_VAR 0 2
29341: PPUSH
29342: LD_VAR 0 3
29346: PPUSH
29347: CALL_OW 488
29351: IFFALSE 29386
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29353: LD_VAR 0 1
29357: PPUSH
29358: LD_VAR 0 2
29362: PPUSH
29363: LD_VAR 0 3
29367: PPUSH
29368: LD_INT 3
29370: PPUSH
29371: LD_INT 6
29373: PPUSH
29374: CALL_OW 12
29378: PPUSH
29379: LD_INT 1
29381: PPUSH
29382: CALL_OW 483
// end ;
29386: GO 29246
29388: POP
29389: POP
// end ;
29390: PPOPN 5
29392: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29393: LD_EXP 61
29397: PUSH
29398: LD_EXP 96
29402: AND
29403: IFFALSE 29497
29405: GO 29407
29407: DISABLE
29408: LD_INT 0
29410: PPUSH
29411: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29412: LD_ADDR_VAR 0 2
29416: PUSH
29417: LD_INT 22
29419: PUSH
29420: LD_OWVAR 2
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: PUSH
29429: LD_INT 32
29431: PUSH
29432: LD_INT 1
29434: PUSH
29435: EMPTY
29436: LIST
29437: LIST
29438: PUSH
29439: LD_INT 21
29441: PUSH
29442: LD_INT 2
29444: PUSH
29445: EMPTY
29446: LIST
29447: LIST
29448: PUSH
29449: EMPTY
29450: LIST
29451: LIST
29452: LIST
29453: PPUSH
29454: CALL_OW 69
29458: ST_TO_ADDR
// if not tmp then
29459: LD_VAR 0 2
29463: NOT
29464: IFFALSE 29468
// exit ;
29466: GO 29497
// for i in tmp do
29468: LD_ADDR_VAR 0 1
29472: PUSH
29473: LD_VAR 0 2
29477: PUSH
29478: FOR_IN
29479: IFFALSE 29495
// SetFuel ( i , 0 ) ;
29481: LD_VAR 0 1
29485: PPUSH
29486: LD_INT 0
29488: PPUSH
29489: CALL_OW 240
29493: GO 29478
29495: POP
29496: POP
// end ;
29497: PPOPN 2
29499: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29500: LD_EXP 61
29504: PUSH
29505: LD_EXP 97
29509: AND
29510: IFFALSE 29576
29512: GO 29514
29514: DISABLE
29515: LD_INT 0
29517: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29518: LD_ADDR_VAR 0 1
29522: PUSH
29523: LD_INT 22
29525: PUSH
29526: LD_OWVAR 2
29530: PUSH
29531: EMPTY
29532: LIST
29533: LIST
29534: PUSH
29535: LD_INT 30
29537: PUSH
29538: LD_INT 29
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: PPUSH
29549: CALL_OW 69
29553: ST_TO_ADDR
// if not tmp then
29554: LD_VAR 0 1
29558: NOT
29559: IFFALSE 29563
// exit ;
29561: GO 29576
// DestroyUnit ( tmp [ 1 ] ) ;
29563: LD_VAR 0 1
29567: PUSH
29568: LD_INT 1
29570: ARRAY
29571: PPUSH
29572: CALL_OW 65
// end ;
29576: PPOPN 1
29578: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29579: LD_EXP 61
29583: PUSH
29584: LD_EXP 99
29588: AND
29589: IFFALSE 29718
29591: GO 29593
29593: DISABLE
29594: LD_INT 0
29596: PPUSH
// begin uc_side := 0 ;
29597: LD_ADDR_OWVAR 20
29601: PUSH
29602: LD_INT 0
29604: ST_TO_ADDR
// uc_nation := nation_arabian ;
29605: LD_ADDR_OWVAR 21
29609: PUSH
29610: LD_INT 2
29612: ST_TO_ADDR
// hc_gallery :=  ;
29613: LD_ADDR_OWVAR 33
29617: PUSH
29618: LD_STRING 
29620: ST_TO_ADDR
// hc_name :=  ;
29621: LD_ADDR_OWVAR 26
29625: PUSH
29626: LD_STRING 
29628: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29629: LD_INT 1
29631: PPUSH
29632: LD_INT 11
29634: PPUSH
29635: LD_INT 10
29637: PPUSH
29638: CALL_OW 380
// un := CreateHuman ;
29642: LD_ADDR_VAR 0 1
29646: PUSH
29647: CALL_OW 44
29651: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29652: LD_VAR 0 1
29656: PPUSH
29657: LD_INT 1
29659: PPUSH
29660: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29664: LD_INT 35
29666: PPUSH
29667: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29671: LD_VAR 0 1
29675: PPUSH
29676: LD_INT 22
29678: PUSH
29679: LD_OWVAR 2
29683: PUSH
29684: EMPTY
29685: LIST
29686: LIST
29687: PPUSH
29688: CALL_OW 69
29692: PPUSH
29693: LD_VAR 0 1
29697: PPUSH
29698: CALL_OW 74
29702: PPUSH
29703: CALL_OW 115
// until IsDead ( un ) ;
29707: LD_VAR 0 1
29711: PPUSH
29712: CALL_OW 301
29716: IFFALSE 29664
// end ;
29718: PPOPN 1
29720: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29721: LD_EXP 61
29725: PUSH
29726: LD_EXP 101
29730: AND
29731: IFFALSE 29743
29733: GO 29735
29735: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29736: LD_STRING earthquake(getX(game), 0, 32)
29738: PPUSH
29739: CALL_OW 559
29743: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29744: LD_EXP 61
29748: PUSH
29749: LD_EXP 102
29753: AND
29754: IFFALSE 29845
29756: GO 29758
29758: DISABLE
29759: LD_INT 0
29761: PPUSH
// begin enable ;
29762: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29763: LD_ADDR_VAR 0 1
29767: PUSH
29768: LD_INT 22
29770: PUSH
29771: LD_OWVAR 2
29775: PUSH
29776: EMPTY
29777: LIST
29778: LIST
29779: PUSH
29780: LD_INT 21
29782: PUSH
29783: LD_INT 2
29785: PUSH
29786: EMPTY
29787: LIST
29788: LIST
29789: PUSH
29790: LD_INT 33
29792: PUSH
29793: LD_INT 3
29795: PUSH
29796: EMPTY
29797: LIST
29798: LIST
29799: PUSH
29800: EMPTY
29801: LIST
29802: LIST
29803: LIST
29804: PPUSH
29805: CALL_OW 69
29809: ST_TO_ADDR
// if not tmp then
29810: LD_VAR 0 1
29814: NOT
29815: IFFALSE 29819
// exit ;
29817: GO 29845
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29819: LD_VAR 0 1
29823: PUSH
29824: LD_INT 1
29826: PPUSH
29827: LD_VAR 0 1
29831: PPUSH
29832: CALL_OW 12
29836: ARRAY
29837: PPUSH
29838: LD_INT 1
29840: PPUSH
29841: CALL_OW 234
// end ;
29845: PPOPN 1
29847: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29848: LD_EXP 61
29852: PUSH
29853: LD_EXP 103
29857: AND
29858: IFFALSE 29999
29860: GO 29862
29862: DISABLE
29863: LD_INT 0
29865: PPUSH
29866: PPUSH
29867: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29868: LD_ADDR_VAR 0 3
29872: PUSH
29873: LD_INT 22
29875: PUSH
29876: LD_OWVAR 2
29880: PUSH
29881: EMPTY
29882: LIST
29883: LIST
29884: PUSH
29885: LD_INT 25
29887: PUSH
29888: LD_INT 1
29890: PUSH
29891: EMPTY
29892: LIST
29893: LIST
29894: PUSH
29895: EMPTY
29896: LIST
29897: LIST
29898: PPUSH
29899: CALL_OW 69
29903: ST_TO_ADDR
// if not tmp then
29904: LD_VAR 0 3
29908: NOT
29909: IFFALSE 29913
// exit ;
29911: GO 29999
// un := tmp [ rand ( 1 , tmp ) ] ;
29913: LD_ADDR_VAR 0 2
29917: PUSH
29918: LD_VAR 0 3
29922: PUSH
29923: LD_INT 1
29925: PPUSH
29926: LD_VAR 0 3
29930: PPUSH
29931: CALL_OW 12
29935: ARRAY
29936: ST_TO_ADDR
// if Crawls ( un ) then
29937: LD_VAR 0 2
29941: PPUSH
29942: CALL_OW 318
29946: IFFALSE 29957
// ComWalk ( un ) ;
29948: LD_VAR 0 2
29952: PPUSH
29953: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29957: LD_VAR 0 2
29961: PPUSH
29962: LD_INT 9
29964: PPUSH
29965: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29969: LD_INT 28
29971: PPUSH
29972: LD_OWVAR 2
29976: PPUSH
29977: LD_INT 2
29979: PPUSH
29980: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29984: LD_INT 29
29986: PPUSH
29987: LD_OWVAR 2
29991: PPUSH
29992: LD_INT 2
29994: PPUSH
29995: CALL_OW 322
// end ;
29999: PPOPN 3
30001: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30002: LD_EXP 61
30006: PUSH
30007: LD_EXP 104
30011: AND
30012: IFFALSE 30123
30014: GO 30016
30016: DISABLE
30017: LD_INT 0
30019: PPUSH
30020: PPUSH
30021: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30022: LD_ADDR_VAR 0 3
30026: PUSH
30027: LD_INT 22
30029: PUSH
30030: LD_OWVAR 2
30034: PUSH
30035: EMPTY
30036: LIST
30037: LIST
30038: PUSH
30039: LD_INT 25
30041: PUSH
30042: LD_INT 1
30044: PUSH
30045: EMPTY
30046: LIST
30047: LIST
30048: PUSH
30049: EMPTY
30050: LIST
30051: LIST
30052: PPUSH
30053: CALL_OW 69
30057: ST_TO_ADDR
// if not tmp then
30058: LD_VAR 0 3
30062: NOT
30063: IFFALSE 30067
// exit ;
30065: GO 30123
// un := tmp [ rand ( 1 , tmp ) ] ;
30067: LD_ADDR_VAR 0 2
30071: PUSH
30072: LD_VAR 0 3
30076: PUSH
30077: LD_INT 1
30079: PPUSH
30080: LD_VAR 0 3
30084: PPUSH
30085: CALL_OW 12
30089: ARRAY
30090: ST_TO_ADDR
// if Crawls ( un ) then
30091: LD_VAR 0 2
30095: PPUSH
30096: CALL_OW 318
30100: IFFALSE 30111
// ComWalk ( un ) ;
30102: LD_VAR 0 2
30106: PPUSH
30107: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30111: LD_VAR 0 2
30115: PPUSH
30116: LD_INT 8
30118: PPUSH
30119: CALL_OW 336
// end ;
30123: PPOPN 3
30125: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30126: LD_EXP 61
30130: PUSH
30131: LD_EXP 105
30135: AND
30136: IFFALSE 30280
30138: GO 30140
30140: DISABLE
30141: LD_INT 0
30143: PPUSH
30144: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30145: LD_ADDR_VAR 0 2
30149: PUSH
30150: LD_INT 22
30152: PUSH
30153: LD_OWVAR 2
30157: PUSH
30158: EMPTY
30159: LIST
30160: LIST
30161: PUSH
30162: LD_INT 21
30164: PUSH
30165: LD_INT 2
30167: PUSH
30168: EMPTY
30169: LIST
30170: LIST
30171: PUSH
30172: LD_INT 2
30174: PUSH
30175: LD_INT 34
30177: PUSH
30178: LD_INT 12
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: PUSH
30185: LD_INT 34
30187: PUSH
30188: LD_INT 51
30190: PUSH
30191: EMPTY
30192: LIST
30193: LIST
30194: PUSH
30195: LD_INT 34
30197: PUSH
30198: LD_INT 32
30200: PUSH
30201: EMPTY
30202: LIST
30203: LIST
30204: PUSH
30205: EMPTY
30206: LIST
30207: LIST
30208: LIST
30209: LIST
30210: PUSH
30211: EMPTY
30212: LIST
30213: LIST
30214: LIST
30215: PPUSH
30216: CALL_OW 69
30220: ST_TO_ADDR
// if not tmp then
30221: LD_VAR 0 2
30225: NOT
30226: IFFALSE 30230
// exit ;
30228: GO 30280
// for i in tmp do
30230: LD_ADDR_VAR 0 1
30234: PUSH
30235: LD_VAR 0 2
30239: PUSH
30240: FOR_IN
30241: IFFALSE 30278
// if GetCargo ( i , mat_artifact ) = 0 then
30243: LD_VAR 0 1
30247: PPUSH
30248: LD_INT 4
30250: PPUSH
30251: CALL_OW 289
30255: PUSH
30256: LD_INT 0
30258: EQUAL
30259: IFFALSE 30276
// SetCargo ( i , mat_siberit , 100 ) ;
30261: LD_VAR 0 1
30265: PPUSH
30266: LD_INT 3
30268: PPUSH
30269: LD_INT 100
30271: PPUSH
30272: CALL_OW 290
30276: GO 30240
30278: POP
30279: POP
// end ;
30280: PPOPN 2
30282: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30283: LD_EXP 61
30287: PUSH
30288: LD_EXP 106
30292: AND
30293: IFFALSE 30476
30295: GO 30297
30297: DISABLE
30298: LD_INT 0
30300: PPUSH
30301: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30302: LD_ADDR_VAR 0 2
30306: PUSH
30307: LD_INT 22
30309: PUSH
30310: LD_OWVAR 2
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: PPUSH
30319: CALL_OW 69
30323: ST_TO_ADDR
// if not tmp then
30324: LD_VAR 0 2
30328: NOT
30329: IFFALSE 30333
// exit ;
30331: GO 30476
// for i := 1 to 2 do
30333: LD_ADDR_VAR 0 1
30337: PUSH
30338: DOUBLE
30339: LD_INT 1
30341: DEC
30342: ST_TO_ADDR
30343: LD_INT 2
30345: PUSH
30346: FOR_TO
30347: IFFALSE 30474
// begin uc_side := your_side ;
30349: LD_ADDR_OWVAR 20
30353: PUSH
30354: LD_OWVAR 2
30358: ST_TO_ADDR
// uc_nation := nation_american ;
30359: LD_ADDR_OWVAR 21
30363: PUSH
30364: LD_INT 1
30366: ST_TO_ADDR
// vc_chassis := us_morphling ;
30367: LD_ADDR_OWVAR 37
30371: PUSH
30372: LD_INT 5
30374: ST_TO_ADDR
// vc_engine := engine_siberite ;
30375: LD_ADDR_OWVAR 39
30379: PUSH
30380: LD_INT 3
30382: ST_TO_ADDR
// vc_control := control_computer ;
30383: LD_ADDR_OWVAR 38
30387: PUSH
30388: LD_INT 3
30390: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30391: LD_ADDR_OWVAR 40
30395: PUSH
30396: LD_INT 10
30398: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30399: LD_VAR 0 2
30403: PUSH
30404: LD_INT 1
30406: ARRAY
30407: PPUSH
30408: CALL_OW 310
30412: NOT
30413: IFFALSE 30460
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30415: CALL_OW 45
30419: PPUSH
30420: LD_VAR 0 2
30424: PUSH
30425: LD_INT 1
30427: ARRAY
30428: PPUSH
30429: CALL_OW 250
30433: PPUSH
30434: LD_VAR 0 2
30438: PUSH
30439: LD_INT 1
30441: ARRAY
30442: PPUSH
30443: CALL_OW 251
30447: PPUSH
30448: LD_INT 12
30450: PPUSH
30451: LD_INT 1
30453: PPUSH
30454: CALL_OW 50
30458: GO 30472
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30460: CALL_OW 45
30464: PPUSH
30465: LD_INT 1
30467: PPUSH
30468: CALL_OW 51
// end ;
30472: GO 30346
30474: POP
30475: POP
// end ;
30476: PPOPN 2
30478: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30479: LD_EXP 61
30483: PUSH
30484: LD_EXP 107
30488: AND
30489: IFFALSE 30711
30491: GO 30493
30493: DISABLE
30494: LD_INT 0
30496: PPUSH
30497: PPUSH
30498: PPUSH
30499: PPUSH
30500: PPUSH
30501: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30502: LD_ADDR_VAR 0 6
30506: PUSH
30507: LD_INT 22
30509: PUSH
30510: LD_OWVAR 2
30514: PUSH
30515: EMPTY
30516: LIST
30517: LIST
30518: PUSH
30519: LD_INT 21
30521: PUSH
30522: LD_INT 1
30524: PUSH
30525: EMPTY
30526: LIST
30527: LIST
30528: PUSH
30529: LD_INT 3
30531: PUSH
30532: LD_INT 23
30534: PUSH
30535: LD_INT 0
30537: PUSH
30538: EMPTY
30539: LIST
30540: LIST
30541: PUSH
30542: EMPTY
30543: LIST
30544: LIST
30545: PUSH
30546: EMPTY
30547: LIST
30548: LIST
30549: LIST
30550: PPUSH
30551: CALL_OW 69
30555: ST_TO_ADDR
// if not tmp then
30556: LD_VAR 0 6
30560: NOT
30561: IFFALSE 30565
// exit ;
30563: GO 30711
// s1 := rand ( 1 , 4 ) ;
30565: LD_ADDR_VAR 0 2
30569: PUSH
30570: LD_INT 1
30572: PPUSH
30573: LD_INT 4
30575: PPUSH
30576: CALL_OW 12
30580: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30581: LD_ADDR_VAR 0 4
30585: PUSH
30586: LD_VAR 0 6
30590: PUSH
30591: LD_INT 1
30593: ARRAY
30594: PPUSH
30595: LD_VAR 0 2
30599: PPUSH
30600: CALL_OW 259
30604: ST_TO_ADDR
// if s1 = 1 then
30605: LD_VAR 0 2
30609: PUSH
30610: LD_INT 1
30612: EQUAL
30613: IFFALSE 30633
// s2 := rand ( 2 , 4 ) else
30615: LD_ADDR_VAR 0 3
30619: PUSH
30620: LD_INT 2
30622: PPUSH
30623: LD_INT 4
30625: PPUSH
30626: CALL_OW 12
30630: ST_TO_ADDR
30631: GO 30641
// s2 := 1 ;
30633: LD_ADDR_VAR 0 3
30637: PUSH
30638: LD_INT 1
30640: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30641: LD_ADDR_VAR 0 5
30645: PUSH
30646: LD_VAR 0 6
30650: PUSH
30651: LD_INT 1
30653: ARRAY
30654: PPUSH
30655: LD_VAR 0 3
30659: PPUSH
30660: CALL_OW 259
30664: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30665: LD_VAR 0 6
30669: PUSH
30670: LD_INT 1
30672: ARRAY
30673: PPUSH
30674: LD_VAR 0 2
30678: PPUSH
30679: LD_VAR 0 5
30683: PPUSH
30684: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30688: LD_VAR 0 6
30692: PUSH
30693: LD_INT 1
30695: ARRAY
30696: PPUSH
30697: LD_VAR 0 3
30701: PPUSH
30702: LD_VAR 0 4
30706: PPUSH
30707: CALL_OW 237
// end ;
30711: PPOPN 6
30713: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30714: LD_EXP 61
30718: PUSH
30719: LD_EXP 108
30723: AND
30724: IFFALSE 30803
30726: GO 30728
30728: DISABLE
30729: LD_INT 0
30731: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30732: LD_ADDR_VAR 0 1
30736: PUSH
30737: LD_INT 22
30739: PUSH
30740: LD_OWVAR 2
30744: PUSH
30745: EMPTY
30746: LIST
30747: LIST
30748: PUSH
30749: LD_INT 30
30751: PUSH
30752: LD_INT 3
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: PUSH
30759: EMPTY
30760: LIST
30761: LIST
30762: PPUSH
30763: CALL_OW 69
30767: ST_TO_ADDR
// if not tmp then
30768: LD_VAR 0 1
30772: NOT
30773: IFFALSE 30777
// exit ;
30775: GO 30803
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30777: LD_VAR 0 1
30781: PUSH
30782: LD_INT 1
30784: PPUSH
30785: LD_VAR 0 1
30789: PPUSH
30790: CALL_OW 12
30794: ARRAY
30795: PPUSH
30796: LD_INT 1
30798: PPUSH
30799: CALL_OW 234
// end ;
30803: PPOPN 1
30805: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30806: LD_EXP 61
30810: PUSH
30811: LD_EXP 109
30815: AND
30816: IFFALSE 30928
30818: GO 30820
30820: DISABLE
30821: LD_INT 0
30823: PPUSH
30824: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30825: LD_ADDR_VAR 0 2
30829: PUSH
30830: LD_INT 22
30832: PUSH
30833: LD_OWVAR 2
30837: PUSH
30838: EMPTY
30839: LIST
30840: LIST
30841: PUSH
30842: LD_INT 2
30844: PUSH
30845: LD_INT 30
30847: PUSH
30848: LD_INT 27
30850: PUSH
30851: EMPTY
30852: LIST
30853: LIST
30854: PUSH
30855: LD_INT 30
30857: PUSH
30858: LD_INT 26
30860: PUSH
30861: EMPTY
30862: LIST
30863: LIST
30864: PUSH
30865: LD_INT 30
30867: PUSH
30868: LD_INT 28
30870: PUSH
30871: EMPTY
30872: LIST
30873: LIST
30874: PUSH
30875: EMPTY
30876: LIST
30877: LIST
30878: LIST
30879: LIST
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: PPUSH
30885: CALL_OW 69
30889: ST_TO_ADDR
// if not tmp then
30890: LD_VAR 0 2
30894: NOT
30895: IFFALSE 30899
// exit ;
30897: GO 30928
// for i in tmp do
30899: LD_ADDR_VAR 0 1
30903: PUSH
30904: LD_VAR 0 2
30908: PUSH
30909: FOR_IN
30910: IFFALSE 30926
// SetLives ( i , 1 ) ;
30912: LD_VAR 0 1
30916: PPUSH
30917: LD_INT 1
30919: PPUSH
30920: CALL_OW 234
30924: GO 30909
30926: POP
30927: POP
// end ;
30928: PPOPN 2
30930: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30931: LD_EXP 61
30935: PUSH
30936: LD_EXP 110
30940: AND
30941: IFFALSE 31228
30943: GO 30945
30945: DISABLE
30946: LD_INT 0
30948: PPUSH
30949: PPUSH
30950: PPUSH
// begin i := rand ( 1 , 7 ) ;
30951: LD_ADDR_VAR 0 1
30955: PUSH
30956: LD_INT 1
30958: PPUSH
30959: LD_INT 7
30961: PPUSH
30962: CALL_OW 12
30966: ST_TO_ADDR
// case i of 1 :
30967: LD_VAR 0 1
30971: PUSH
30972: LD_INT 1
30974: DOUBLE
30975: EQUAL
30976: IFTRUE 30980
30978: GO 30990
30980: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30981: LD_STRING earthquake(getX(game), 0, 32)
30983: PPUSH
30984: CALL_OW 559
30988: GO 31228
30990: LD_INT 2
30992: DOUBLE
30993: EQUAL
30994: IFTRUE 30998
30996: GO 31012
30998: POP
// begin ToLua ( displayStucuk(); ) ;
30999: LD_STRING displayStucuk();
31001: PPUSH
31002: CALL_OW 559
// ResetFog ;
31006: CALL_OW 335
// end ; 3 :
31010: GO 31228
31012: LD_INT 3
31014: DOUBLE
31015: EQUAL
31016: IFTRUE 31020
31018: GO 31124
31020: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31021: LD_ADDR_VAR 0 2
31025: PUSH
31026: LD_INT 22
31028: PUSH
31029: LD_OWVAR 2
31033: PUSH
31034: EMPTY
31035: LIST
31036: LIST
31037: PUSH
31038: LD_INT 25
31040: PUSH
31041: LD_INT 1
31043: PUSH
31044: EMPTY
31045: LIST
31046: LIST
31047: PUSH
31048: EMPTY
31049: LIST
31050: LIST
31051: PPUSH
31052: CALL_OW 69
31056: ST_TO_ADDR
// if not tmp then
31057: LD_VAR 0 2
31061: NOT
31062: IFFALSE 31066
// exit ;
31064: GO 31228
// un := tmp [ rand ( 1 , tmp ) ] ;
31066: LD_ADDR_VAR 0 3
31070: PUSH
31071: LD_VAR 0 2
31075: PUSH
31076: LD_INT 1
31078: PPUSH
31079: LD_VAR 0 2
31083: PPUSH
31084: CALL_OW 12
31088: ARRAY
31089: ST_TO_ADDR
// if Crawls ( un ) then
31090: LD_VAR 0 3
31094: PPUSH
31095: CALL_OW 318
31099: IFFALSE 31110
// ComWalk ( un ) ;
31101: LD_VAR 0 3
31105: PPUSH
31106: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31110: LD_VAR 0 3
31114: PPUSH
31115: LD_INT 8
31117: PPUSH
31118: CALL_OW 336
// end ; 4 :
31122: GO 31228
31124: LD_INT 4
31126: DOUBLE
31127: EQUAL
31128: IFTRUE 31132
31130: GO 31206
31132: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31133: LD_ADDR_VAR 0 2
31137: PUSH
31138: LD_INT 22
31140: PUSH
31141: LD_OWVAR 2
31145: PUSH
31146: EMPTY
31147: LIST
31148: LIST
31149: PUSH
31150: LD_INT 30
31152: PUSH
31153: LD_INT 29
31155: PUSH
31156: EMPTY
31157: LIST
31158: LIST
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: PPUSH
31164: CALL_OW 69
31168: ST_TO_ADDR
// if not tmp then
31169: LD_VAR 0 2
31173: NOT
31174: IFFALSE 31178
// exit ;
31176: GO 31228
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31178: LD_VAR 0 2
31182: PUSH
31183: LD_INT 1
31185: ARRAY
31186: PPUSH
31187: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31191: LD_VAR 0 2
31195: PUSH
31196: LD_INT 1
31198: ARRAY
31199: PPUSH
31200: CALL_OW 65
// end ; 5 .. 7 :
31204: GO 31228
31206: LD_INT 5
31208: DOUBLE
31209: GREATEREQUAL
31210: IFFALSE 31218
31212: LD_INT 7
31214: DOUBLE
31215: LESSEQUAL
31216: IFTRUE 31220
31218: GO 31227
31220: POP
// StreamSibBomb ; end ;
31221: CALL 27465 0 0
31225: GO 31228
31227: POP
// end ;
31228: PPOPN 3
31230: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31231: LD_EXP 61
31235: PUSH
31236: LD_EXP 111
31240: AND
31241: IFFALSE 31397
31243: GO 31245
31245: DISABLE
31246: LD_INT 0
31248: PPUSH
31249: PPUSH
31250: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31251: LD_ADDR_VAR 0 2
31255: PUSH
31256: LD_INT 81
31258: PUSH
31259: LD_OWVAR 2
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: PUSH
31268: LD_INT 2
31270: PUSH
31271: LD_INT 21
31273: PUSH
31274: LD_INT 1
31276: PUSH
31277: EMPTY
31278: LIST
31279: LIST
31280: PUSH
31281: LD_INT 21
31283: PUSH
31284: LD_INT 2
31286: PUSH
31287: EMPTY
31288: LIST
31289: LIST
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: LIST
31295: PUSH
31296: EMPTY
31297: LIST
31298: LIST
31299: PPUSH
31300: CALL_OW 69
31304: ST_TO_ADDR
// if not tmp then
31305: LD_VAR 0 2
31309: NOT
31310: IFFALSE 31314
// exit ;
31312: GO 31397
// p := 0 ;
31314: LD_ADDR_VAR 0 3
31318: PUSH
31319: LD_INT 0
31321: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31322: LD_INT 35
31324: PPUSH
31325: CALL_OW 67
// p := p + 1 ;
31329: LD_ADDR_VAR 0 3
31333: PUSH
31334: LD_VAR 0 3
31338: PUSH
31339: LD_INT 1
31341: PLUS
31342: ST_TO_ADDR
// for i in tmp do
31343: LD_ADDR_VAR 0 1
31347: PUSH
31348: LD_VAR 0 2
31352: PUSH
31353: FOR_IN
31354: IFFALSE 31385
// if GetLives ( i ) < 1000 then
31356: LD_VAR 0 1
31360: PPUSH
31361: CALL_OW 256
31365: PUSH
31366: LD_INT 1000
31368: LESS
31369: IFFALSE 31383
// SetLives ( i , 1000 ) ;
31371: LD_VAR 0 1
31375: PPUSH
31376: LD_INT 1000
31378: PPUSH
31379: CALL_OW 234
31383: GO 31353
31385: POP
31386: POP
// until p > 20 ;
31387: LD_VAR 0 3
31391: PUSH
31392: LD_INT 20
31394: GREATER
31395: IFFALSE 31322
// end ;
31397: PPOPN 3
31399: END
// every 0 0$1 trigger StreamModeActive and sTime do
31400: LD_EXP 61
31404: PUSH
31405: LD_EXP 112
31409: AND
31410: IFFALSE 31445
31412: GO 31414
31414: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31415: LD_INT 28
31417: PPUSH
31418: LD_OWVAR 2
31422: PPUSH
31423: LD_INT 2
31425: PPUSH
31426: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31430: LD_INT 30
31432: PPUSH
31433: LD_OWVAR 2
31437: PPUSH
31438: LD_INT 2
31440: PPUSH
31441: CALL_OW 322
// end ;
31445: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31446: LD_EXP 61
31450: PUSH
31451: LD_EXP 113
31455: AND
31456: IFFALSE 31577
31458: GO 31460
31460: DISABLE
31461: LD_INT 0
31463: PPUSH
31464: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31465: LD_ADDR_VAR 0 2
31469: PUSH
31470: LD_INT 22
31472: PUSH
31473: LD_OWVAR 2
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: PUSH
31482: LD_INT 21
31484: PUSH
31485: LD_INT 1
31487: PUSH
31488: EMPTY
31489: LIST
31490: LIST
31491: PUSH
31492: LD_INT 3
31494: PUSH
31495: LD_INT 23
31497: PUSH
31498: LD_INT 0
31500: PUSH
31501: EMPTY
31502: LIST
31503: LIST
31504: PUSH
31505: EMPTY
31506: LIST
31507: LIST
31508: PUSH
31509: EMPTY
31510: LIST
31511: LIST
31512: LIST
31513: PPUSH
31514: CALL_OW 69
31518: ST_TO_ADDR
// if not tmp then
31519: LD_VAR 0 2
31523: NOT
31524: IFFALSE 31528
// exit ;
31526: GO 31577
// for i in tmp do
31528: LD_ADDR_VAR 0 1
31532: PUSH
31533: LD_VAR 0 2
31537: PUSH
31538: FOR_IN
31539: IFFALSE 31575
// begin if Crawls ( i ) then
31541: LD_VAR 0 1
31545: PPUSH
31546: CALL_OW 318
31550: IFFALSE 31561
// ComWalk ( i ) ;
31552: LD_VAR 0 1
31556: PPUSH
31557: CALL_OW 138
// SetClass ( i , 2 ) ;
31561: LD_VAR 0 1
31565: PPUSH
31566: LD_INT 2
31568: PPUSH
31569: CALL_OW 336
// end ;
31573: GO 31538
31575: POP
31576: POP
// end ;
31577: PPOPN 2
31579: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31580: LD_EXP 61
31584: PUSH
31585: LD_EXP 114
31589: AND
31590: IFFALSE 31878
31592: GO 31594
31594: DISABLE
31595: LD_INT 0
31597: PPUSH
31598: PPUSH
31599: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31600: LD_OWVAR 2
31604: PPUSH
31605: LD_INT 9
31607: PPUSH
31608: LD_INT 1
31610: PPUSH
31611: LD_INT 1
31613: PPUSH
31614: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31618: LD_INT 9
31620: PPUSH
31621: LD_OWVAR 2
31625: PPUSH
31626: CALL_OW 343
// uc_side := 9 ;
31630: LD_ADDR_OWVAR 20
31634: PUSH
31635: LD_INT 9
31637: ST_TO_ADDR
// uc_nation := 2 ;
31638: LD_ADDR_OWVAR 21
31642: PUSH
31643: LD_INT 2
31645: ST_TO_ADDR
// hc_name := Dark Warrior ;
31646: LD_ADDR_OWVAR 26
31650: PUSH
31651: LD_STRING Dark Warrior
31653: ST_TO_ADDR
// hc_gallery :=  ;
31654: LD_ADDR_OWVAR 33
31658: PUSH
31659: LD_STRING 
31661: ST_TO_ADDR
// hc_noskilllimit := true ;
31662: LD_ADDR_OWVAR 76
31666: PUSH
31667: LD_INT 1
31669: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31670: LD_ADDR_OWVAR 31
31674: PUSH
31675: LD_INT 30
31677: PUSH
31678: LD_INT 30
31680: PUSH
31681: LD_INT 30
31683: PUSH
31684: LD_INT 30
31686: PUSH
31687: EMPTY
31688: LIST
31689: LIST
31690: LIST
31691: LIST
31692: ST_TO_ADDR
// un := CreateHuman ;
31693: LD_ADDR_VAR 0 3
31697: PUSH
31698: CALL_OW 44
31702: ST_TO_ADDR
// hc_noskilllimit := false ;
31703: LD_ADDR_OWVAR 76
31707: PUSH
31708: LD_INT 0
31710: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31711: LD_VAR 0 3
31715: PPUSH
31716: LD_INT 1
31718: PPUSH
31719: CALL_OW 51
// ToLua ( playRanger() ) ;
31723: LD_STRING playRanger()
31725: PPUSH
31726: CALL_OW 559
// p := 0 ;
31730: LD_ADDR_VAR 0 2
31734: PUSH
31735: LD_INT 0
31737: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31738: LD_INT 35
31740: PPUSH
31741: CALL_OW 67
// p := p + 1 ;
31745: LD_ADDR_VAR 0 2
31749: PUSH
31750: LD_VAR 0 2
31754: PUSH
31755: LD_INT 1
31757: PLUS
31758: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31759: LD_VAR 0 3
31763: PPUSH
31764: CALL_OW 256
31768: PUSH
31769: LD_INT 1000
31771: LESS
31772: IFFALSE 31786
// SetLives ( un , 1000 ) ;
31774: LD_VAR 0 3
31778: PPUSH
31779: LD_INT 1000
31781: PPUSH
31782: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31786: LD_VAR 0 3
31790: PPUSH
31791: LD_INT 81
31793: PUSH
31794: LD_OWVAR 2
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: PUSH
31803: LD_INT 91
31805: PUSH
31806: LD_VAR 0 3
31810: PUSH
31811: LD_INT 30
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: LIST
31818: PUSH
31819: EMPTY
31820: LIST
31821: LIST
31822: PPUSH
31823: CALL_OW 69
31827: PPUSH
31828: LD_VAR 0 3
31832: PPUSH
31833: CALL_OW 74
31837: PPUSH
31838: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31842: LD_VAR 0 2
31846: PUSH
31847: LD_INT 80
31849: GREATER
31850: PUSH
31851: LD_VAR 0 3
31855: PPUSH
31856: CALL_OW 301
31860: OR
31861: IFFALSE 31738
// if un then
31863: LD_VAR 0 3
31867: IFFALSE 31878
// RemoveUnit ( un ) ;
31869: LD_VAR 0 3
31873: PPUSH
31874: CALL_OW 64
// end ;
31878: PPOPN 3
31880: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31881: LD_EXP 115
31885: IFFALSE 32001
31887: GO 31889
31889: DISABLE
31890: LD_INT 0
31892: PPUSH
31893: PPUSH
31894: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31895: LD_ADDR_VAR 0 2
31899: PUSH
31900: LD_INT 81
31902: PUSH
31903: LD_OWVAR 2
31907: PUSH
31908: EMPTY
31909: LIST
31910: LIST
31911: PUSH
31912: LD_INT 21
31914: PUSH
31915: LD_INT 1
31917: PUSH
31918: EMPTY
31919: LIST
31920: LIST
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: PPUSH
31926: CALL_OW 69
31930: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31931: LD_STRING playComputer()
31933: PPUSH
31934: CALL_OW 559
// if not tmp then
31938: LD_VAR 0 2
31942: NOT
31943: IFFALSE 31947
// exit ;
31945: GO 32001
// for i in tmp do
31947: LD_ADDR_VAR 0 1
31951: PUSH
31952: LD_VAR 0 2
31956: PUSH
31957: FOR_IN
31958: IFFALSE 31999
// for j := 1 to 4 do
31960: LD_ADDR_VAR 0 3
31964: PUSH
31965: DOUBLE
31966: LD_INT 1
31968: DEC
31969: ST_TO_ADDR
31970: LD_INT 4
31972: PUSH
31973: FOR_TO
31974: IFFALSE 31995
// SetSkill ( i , j , 10 ) ;
31976: LD_VAR 0 1
31980: PPUSH
31981: LD_VAR 0 3
31985: PPUSH
31986: LD_INT 10
31988: PPUSH
31989: CALL_OW 237
31993: GO 31973
31995: POP
31996: POP
31997: GO 31957
31999: POP
32000: POP
// end ;
32001: PPOPN 3
32003: END
// every 0 0$1 trigger s30 do var i , tmp ;
32004: LD_EXP 116
32008: IFFALSE 32077
32010: GO 32012
32012: DISABLE
32013: LD_INT 0
32015: PPUSH
32016: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32017: LD_ADDR_VAR 0 2
32021: PUSH
32022: LD_INT 22
32024: PUSH
32025: LD_OWVAR 2
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: PPUSH
32034: CALL_OW 69
32038: ST_TO_ADDR
// if not tmp then
32039: LD_VAR 0 2
32043: NOT
32044: IFFALSE 32048
// exit ;
32046: GO 32077
// for i in tmp do
32048: LD_ADDR_VAR 0 1
32052: PUSH
32053: LD_VAR 0 2
32057: PUSH
32058: FOR_IN
32059: IFFALSE 32075
// SetLives ( i , 300 ) ;
32061: LD_VAR 0 1
32065: PPUSH
32066: LD_INT 300
32068: PPUSH
32069: CALL_OW 234
32073: GO 32058
32075: POP
32076: POP
// end ;
32077: PPOPN 2
32079: END
// every 0 0$1 trigger s60 do var i , tmp ;
32080: LD_EXP 117
32084: IFFALSE 32153
32086: GO 32088
32088: DISABLE
32089: LD_INT 0
32091: PPUSH
32092: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32093: LD_ADDR_VAR 0 2
32097: PUSH
32098: LD_INT 22
32100: PUSH
32101: LD_OWVAR 2
32105: PUSH
32106: EMPTY
32107: LIST
32108: LIST
32109: PPUSH
32110: CALL_OW 69
32114: ST_TO_ADDR
// if not tmp then
32115: LD_VAR 0 2
32119: NOT
32120: IFFALSE 32124
// exit ;
32122: GO 32153
// for i in tmp do
32124: LD_ADDR_VAR 0 1
32128: PUSH
32129: LD_VAR 0 2
32133: PUSH
32134: FOR_IN
32135: IFFALSE 32151
// SetLives ( i , 600 ) ;
32137: LD_VAR 0 1
32141: PPUSH
32142: LD_INT 600
32144: PPUSH
32145: CALL_OW 234
32149: GO 32134
32151: POP
32152: POP
// end ;
32153: PPOPN 2
32155: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32156: LD_INT 0
32158: PPUSH
// case cmd of 301 :
32159: LD_VAR 0 1
32163: PUSH
32164: LD_INT 301
32166: DOUBLE
32167: EQUAL
32168: IFTRUE 32172
32170: GO 32204
32172: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32173: LD_VAR 0 6
32177: PPUSH
32178: LD_VAR 0 7
32182: PPUSH
32183: LD_VAR 0 8
32187: PPUSH
32188: LD_VAR 0 4
32192: PPUSH
32193: LD_VAR 0 5
32197: PPUSH
32198: CALL 33405 0 5
32202: GO 32325
32204: LD_INT 302
32206: DOUBLE
32207: EQUAL
32208: IFTRUE 32212
32210: GO 32249
32212: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32213: LD_VAR 0 6
32217: PPUSH
32218: LD_VAR 0 7
32222: PPUSH
32223: LD_VAR 0 8
32227: PPUSH
32228: LD_VAR 0 9
32232: PPUSH
32233: LD_VAR 0 4
32237: PPUSH
32238: LD_VAR 0 5
32242: PPUSH
32243: CALL 33496 0 6
32247: GO 32325
32249: LD_INT 303
32251: DOUBLE
32252: EQUAL
32253: IFTRUE 32257
32255: GO 32294
32257: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32258: LD_VAR 0 6
32262: PPUSH
32263: LD_VAR 0 7
32267: PPUSH
32268: LD_VAR 0 8
32272: PPUSH
32273: LD_VAR 0 9
32277: PPUSH
32278: LD_VAR 0 4
32282: PPUSH
32283: LD_VAR 0 5
32287: PPUSH
32288: CALL 32330 0 6
32292: GO 32325
32294: LD_INT 304
32296: DOUBLE
32297: EQUAL
32298: IFTRUE 32302
32300: GO 32324
32302: POP
// hHackTeleport ( unit , x , y ) ; end ;
32303: LD_VAR 0 2
32307: PPUSH
32308: LD_VAR 0 4
32312: PPUSH
32313: LD_VAR 0 5
32317: PPUSH
32318: CALL 34089 0 3
32322: GO 32325
32324: POP
// end ;
32325: LD_VAR 0 12
32329: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32330: LD_INT 0
32332: PPUSH
32333: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32334: LD_VAR 0 1
32338: PUSH
32339: LD_INT 1
32341: LESS
32342: PUSH
32343: LD_VAR 0 1
32347: PUSH
32348: LD_INT 3
32350: GREATER
32351: OR
32352: PUSH
32353: LD_VAR 0 5
32357: PPUSH
32358: LD_VAR 0 6
32362: PPUSH
32363: CALL_OW 428
32367: OR
32368: IFFALSE 32372
// exit ;
32370: GO 33092
// uc_side := your_side ;
32372: LD_ADDR_OWVAR 20
32376: PUSH
32377: LD_OWVAR 2
32381: ST_TO_ADDR
// uc_nation := nation ;
32382: LD_ADDR_OWVAR 21
32386: PUSH
32387: LD_VAR 0 1
32391: ST_TO_ADDR
// bc_level = 1 ;
32392: LD_ADDR_OWVAR 43
32396: PUSH
32397: LD_INT 1
32399: ST_TO_ADDR
// case btype of 1 :
32400: LD_VAR 0 2
32404: PUSH
32405: LD_INT 1
32407: DOUBLE
32408: EQUAL
32409: IFTRUE 32413
32411: GO 32424
32413: POP
// bc_type := b_depot ; 2 :
32414: LD_ADDR_OWVAR 42
32418: PUSH
32419: LD_INT 0
32421: ST_TO_ADDR
32422: GO 33036
32424: LD_INT 2
32426: DOUBLE
32427: EQUAL
32428: IFTRUE 32432
32430: GO 32443
32432: POP
// bc_type := b_warehouse ; 3 :
32433: LD_ADDR_OWVAR 42
32437: PUSH
32438: LD_INT 1
32440: ST_TO_ADDR
32441: GO 33036
32443: LD_INT 3
32445: DOUBLE
32446: EQUAL
32447: IFTRUE 32451
32449: GO 32462
32451: POP
// bc_type := b_lab ; 4 .. 9 :
32452: LD_ADDR_OWVAR 42
32456: PUSH
32457: LD_INT 6
32459: ST_TO_ADDR
32460: GO 33036
32462: LD_INT 4
32464: DOUBLE
32465: GREATEREQUAL
32466: IFFALSE 32474
32468: LD_INT 9
32470: DOUBLE
32471: LESSEQUAL
32472: IFTRUE 32476
32474: GO 32528
32476: POP
// begin bc_type := b_lab_half ;
32477: LD_ADDR_OWVAR 42
32481: PUSH
32482: LD_INT 7
32484: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32485: LD_ADDR_OWVAR 44
32489: PUSH
32490: LD_INT 10
32492: PUSH
32493: LD_INT 11
32495: PUSH
32496: LD_INT 12
32498: PUSH
32499: LD_INT 15
32501: PUSH
32502: LD_INT 14
32504: PUSH
32505: LD_INT 13
32507: PUSH
32508: EMPTY
32509: LIST
32510: LIST
32511: LIST
32512: LIST
32513: LIST
32514: LIST
32515: PUSH
32516: LD_VAR 0 2
32520: PUSH
32521: LD_INT 3
32523: MINUS
32524: ARRAY
32525: ST_TO_ADDR
// end ; 10 .. 13 :
32526: GO 33036
32528: LD_INT 10
32530: DOUBLE
32531: GREATEREQUAL
32532: IFFALSE 32540
32534: LD_INT 13
32536: DOUBLE
32537: LESSEQUAL
32538: IFTRUE 32542
32540: GO 32619
32542: POP
// begin bc_type := b_lab_full ;
32543: LD_ADDR_OWVAR 42
32547: PUSH
32548: LD_INT 8
32550: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32551: LD_ADDR_OWVAR 44
32555: PUSH
32556: LD_INT 10
32558: PUSH
32559: LD_INT 12
32561: PUSH
32562: LD_INT 14
32564: PUSH
32565: LD_INT 13
32567: PUSH
32568: EMPTY
32569: LIST
32570: LIST
32571: LIST
32572: LIST
32573: PUSH
32574: LD_VAR 0 2
32578: PUSH
32579: LD_INT 9
32581: MINUS
32582: ARRAY
32583: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32584: LD_ADDR_OWVAR 45
32588: PUSH
32589: LD_INT 11
32591: PUSH
32592: LD_INT 15
32594: PUSH
32595: LD_INT 12
32597: PUSH
32598: LD_INT 15
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: PUSH
32607: LD_VAR 0 2
32611: PUSH
32612: LD_INT 9
32614: MINUS
32615: ARRAY
32616: ST_TO_ADDR
// end ; 14 :
32617: GO 33036
32619: LD_INT 14
32621: DOUBLE
32622: EQUAL
32623: IFTRUE 32627
32625: GO 32638
32627: POP
// bc_type := b_workshop ; 15 :
32628: LD_ADDR_OWVAR 42
32632: PUSH
32633: LD_INT 2
32635: ST_TO_ADDR
32636: GO 33036
32638: LD_INT 15
32640: DOUBLE
32641: EQUAL
32642: IFTRUE 32646
32644: GO 32657
32646: POP
// bc_type := b_factory ; 16 :
32647: LD_ADDR_OWVAR 42
32651: PUSH
32652: LD_INT 3
32654: ST_TO_ADDR
32655: GO 33036
32657: LD_INT 16
32659: DOUBLE
32660: EQUAL
32661: IFTRUE 32665
32663: GO 32676
32665: POP
// bc_type := b_ext_gun ; 17 :
32666: LD_ADDR_OWVAR 42
32670: PUSH
32671: LD_INT 17
32673: ST_TO_ADDR
32674: GO 33036
32676: LD_INT 17
32678: DOUBLE
32679: EQUAL
32680: IFTRUE 32684
32682: GO 32712
32684: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32685: LD_ADDR_OWVAR 42
32689: PUSH
32690: LD_INT 19
32692: PUSH
32693: LD_INT 23
32695: PUSH
32696: LD_INT 19
32698: PUSH
32699: EMPTY
32700: LIST
32701: LIST
32702: LIST
32703: PUSH
32704: LD_VAR 0 1
32708: ARRAY
32709: ST_TO_ADDR
32710: GO 33036
32712: LD_INT 18
32714: DOUBLE
32715: EQUAL
32716: IFTRUE 32720
32718: GO 32731
32720: POP
// bc_type := b_ext_radar ; 19 :
32721: LD_ADDR_OWVAR 42
32725: PUSH
32726: LD_INT 20
32728: ST_TO_ADDR
32729: GO 33036
32731: LD_INT 19
32733: DOUBLE
32734: EQUAL
32735: IFTRUE 32739
32737: GO 32750
32739: POP
// bc_type := b_ext_radio ; 20 :
32740: LD_ADDR_OWVAR 42
32744: PUSH
32745: LD_INT 22
32747: ST_TO_ADDR
32748: GO 33036
32750: LD_INT 20
32752: DOUBLE
32753: EQUAL
32754: IFTRUE 32758
32756: GO 32769
32758: POP
// bc_type := b_ext_siberium ; 21 :
32759: LD_ADDR_OWVAR 42
32763: PUSH
32764: LD_INT 21
32766: ST_TO_ADDR
32767: GO 33036
32769: LD_INT 21
32771: DOUBLE
32772: EQUAL
32773: IFTRUE 32777
32775: GO 32788
32777: POP
// bc_type := b_ext_computer ; 22 :
32778: LD_ADDR_OWVAR 42
32782: PUSH
32783: LD_INT 24
32785: ST_TO_ADDR
32786: GO 33036
32788: LD_INT 22
32790: DOUBLE
32791: EQUAL
32792: IFTRUE 32796
32794: GO 32807
32796: POP
// bc_type := b_ext_track ; 23 :
32797: LD_ADDR_OWVAR 42
32801: PUSH
32802: LD_INT 16
32804: ST_TO_ADDR
32805: GO 33036
32807: LD_INT 23
32809: DOUBLE
32810: EQUAL
32811: IFTRUE 32815
32813: GO 32826
32815: POP
// bc_type := b_ext_laser ; 24 :
32816: LD_ADDR_OWVAR 42
32820: PUSH
32821: LD_INT 25
32823: ST_TO_ADDR
32824: GO 33036
32826: LD_INT 24
32828: DOUBLE
32829: EQUAL
32830: IFTRUE 32834
32832: GO 32845
32834: POP
// bc_type := b_control_tower ; 25 :
32835: LD_ADDR_OWVAR 42
32839: PUSH
32840: LD_INT 36
32842: ST_TO_ADDR
32843: GO 33036
32845: LD_INT 25
32847: DOUBLE
32848: EQUAL
32849: IFTRUE 32853
32851: GO 32864
32853: POP
// bc_type := b_breastwork ; 26 :
32854: LD_ADDR_OWVAR 42
32858: PUSH
32859: LD_INT 31
32861: ST_TO_ADDR
32862: GO 33036
32864: LD_INT 26
32866: DOUBLE
32867: EQUAL
32868: IFTRUE 32872
32870: GO 32883
32872: POP
// bc_type := b_bunker ; 27 :
32873: LD_ADDR_OWVAR 42
32877: PUSH
32878: LD_INT 32
32880: ST_TO_ADDR
32881: GO 33036
32883: LD_INT 27
32885: DOUBLE
32886: EQUAL
32887: IFTRUE 32891
32889: GO 32902
32891: POP
// bc_type := b_turret ; 28 :
32892: LD_ADDR_OWVAR 42
32896: PUSH
32897: LD_INT 33
32899: ST_TO_ADDR
32900: GO 33036
32902: LD_INT 28
32904: DOUBLE
32905: EQUAL
32906: IFTRUE 32910
32908: GO 32921
32910: POP
// bc_type := b_armoury ; 29 :
32911: LD_ADDR_OWVAR 42
32915: PUSH
32916: LD_INT 4
32918: ST_TO_ADDR
32919: GO 33036
32921: LD_INT 29
32923: DOUBLE
32924: EQUAL
32925: IFTRUE 32929
32927: GO 32940
32929: POP
// bc_type := b_barracks ; 30 :
32930: LD_ADDR_OWVAR 42
32934: PUSH
32935: LD_INT 5
32937: ST_TO_ADDR
32938: GO 33036
32940: LD_INT 30
32942: DOUBLE
32943: EQUAL
32944: IFTRUE 32948
32946: GO 32959
32948: POP
// bc_type := b_solar_power ; 31 :
32949: LD_ADDR_OWVAR 42
32953: PUSH
32954: LD_INT 27
32956: ST_TO_ADDR
32957: GO 33036
32959: LD_INT 31
32961: DOUBLE
32962: EQUAL
32963: IFTRUE 32967
32965: GO 32978
32967: POP
// bc_type := b_oil_power ; 32 :
32968: LD_ADDR_OWVAR 42
32972: PUSH
32973: LD_INT 26
32975: ST_TO_ADDR
32976: GO 33036
32978: LD_INT 32
32980: DOUBLE
32981: EQUAL
32982: IFTRUE 32986
32984: GO 32997
32986: POP
// bc_type := b_siberite_power ; 33 :
32987: LD_ADDR_OWVAR 42
32991: PUSH
32992: LD_INT 28
32994: ST_TO_ADDR
32995: GO 33036
32997: LD_INT 33
32999: DOUBLE
33000: EQUAL
33001: IFTRUE 33005
33003: GO 33016
33005: POP
// bc_type := b_oil_mine ; 34 :
33006: LD_ADDR_OWVAR 42
33010: PUSH
33011: LD_INT 29
33013: ST_TO_ADDR
33014: GO 33036
33016: LD_INT 34
33018: DOUBLE
33019: EQUAL
33020: IFTRUE 33024
33022: GO 33035
33024: POP
// bc_type := b_siberite_mine ; end ;
33025: LD_ADDR_OWVAR 42
33029: PUSH
33030: LD_INT 30
33032: ST_TO_ADDR
33033: GO 33036
33035: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33036: LD_ADDR_VAR 0 8
33040: PUSH
33041: LD_VAR 0 5
33045: PPUSH
33046: LD_VAR 0 6
33050: PPUSH
33051: LD_VAR 0 3
33055: PPUSH
33056: CALL_OW 47
33060: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33061: LD_OWVAR 42
33065: PUSH
33066: LD_INT 32
33068: PUSH
33069: LD_INT 33
33071: PUSH
33072: EMPTY
33073: LIST
33074: LIST
33075: IN
33076: IFFALSE 33092
// PlaceWeaponTurret ( b , weapon ) ;
33078: LD_VAR 0 8
33082: PPUSH
33083: LD_VAR 0 4
33087: PPUSH
33088: CALL_OW 431
// end ;
33092: LD_VAR 0 7
33096: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33097: LD_INT 0
33099: PPUSH
33100: PPUSH
33101: PPUSH
33102: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33103: LD_ADDR_VAR 0 4
33107: PUSH
33108: LD_INT 22
33110: PUSH
33111: LD_OWVAR 2
33115: PUSH
33116: EMPTY
33117: LIST
33118: LIST
33119: PUSH
33120: LD_INT 2
33122: PUSH
33123: LD_INT 30
33125: PUSH
33126: LD_INT 0
33128: PUSH
33129: EMPTY
33130: LIST
33131: LIST
33132: PUSH
33133: LD_INT 30
33135: PUSH
33136: LD_INT 1
33138: PUSH
33139: EMPTY
33140: LIST
33141: LIST
33142: PUSH
33143: EMPTY
33144: LIST
33145: LIST
33146: LIST
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: PPUSH
33152: CALL_OW 69
33156: ST_TO_ADDR
// if not tmp then
33157: LD_VAR 0 4
33161: NOT
33162: IFFALSE 33166
// exit ;
33164: GO 33225
// for i in tmp do
33166: LD_ADDR_VAR 0 2
33170: PUSH
33171: LD_VAR 0 4
33175: PUSH
33176: FOR_IN
33177: IFFALSE 33223
// for j = 1 to 3 do
33179: LD_ADDR_VAR 0 3
33183: PUSH
33184: DOUBLE
33185: LD_INT 1
33187: DEC
33188: ST_TO_ADDR
33189: LD_INT 3
33191: PUSH
33192: FOR_TO
33193: IFFALSE 33219
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33195: LD_VAR 0 2
33199: PPUSH
33200: CALL_OW 274
33204: PPUSH
33205: LD_VAR 0 3
33209: PPUSH
33210: LD_INT 99999
33212: PPUSH
33213: CALL_OW 277
33217: GO 33192
33219: POP
33220: POP
33221: GO 33176
33223: POP
33224: POP
// end ;
33225: LD_VAR 0 1
33229: RET
// export function hHackSetLevel10 ; var i , j ; begin
33230: LD_INT 0
33232: PPUSH
33233: PPUSH
33234: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33235: LD_ADDR_VAR 0 2
33239: PUSH
33240: LD_INT 21
33242: PUSH
33243: LD_INT 1
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: PPUSH
33250: CALL_OW 69
33254: PUSH
33255: FOR_IN
33256: IFFALSE 33308
// if IsSelected ( i ) then
33258: LD_VAR 0 2
33262: PPUSH
33263: CALL_OW 306
33267: IFFALSE 33306
// begin for j := 1 to 4 do
33269: LD_ADDR_VAR 0 3
33273: PUSH
33274: DOUBLE
33275: LD_INT 1
33277: DEC
33278: ST_TO_ADDR
33279: LD_INT 4
33281: PUSH
33282: FOR_TO
33283: IFFALSE 33304
// SetSkill ( i , j , 10 ) ;
33285: LD_VAR 0 2
33289: PPUSH
33290: LD_VAR 0 3
33294: PPUSH
33295: LD_INT 10
33297: PPUSH
33298: CALL_OW 237
33302: GO 33282
33304: POP
33305: POP
// end ;
33306: GO 33255
33308: POP
33309: POP
// end ;
33310: LD_VAR 0 1
33314: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33315: LD_INT 0
33317: PPUSH
33318: PPUSH
33319: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33320: LD_ADDR_VAR 0 2
33324: PUSH
33325: LD_INT 22
33327: PUSH
33328: LD_OWVAR 2
33332: PUSH
33333: EMPTY
33334: LIST
33335: LIST
33336: PUSH
33337: LD_INT 21
33339: PUSH
33340: LD_INT 1
33342: PUSH
33343: EMPTY
33344: LIST
33345: LIST
33346: PUSH
33347: EMPTY
33348: LIST
33349: LIST
33350: PPUSH
33351: CALL_OW 69
33355: PUSH
33356: FOR_IN
33357: IFFALSE 33398
// begin for j := 1 to 4 do
33359: LD_ADDR_VAR 0 3
33363: PUSH
33364: DOUBLE
33365: LD_INT 1
33367: DEC
33368: ST_TO_ADDR
33369: LD_INT 4
33371: PUSH
33372: FOR_TO
33373: IFFALSE 33394
// SetSkill ( i , j , 10 ) ;
33375: LD_VAR 0 2
33379: PPUSH
33380: LD_VAR 0 3
33384: PPUSH
33385: LD_INT 10
33387: PPUSH
33388: CALL_OW 237
33392: GO 33372
33394: POP
33395: POP
// end ;
33396: GO 33356
33398: POP
33399: POP
// end ;
33400: LD_VAR 0 1
33404: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33405: LD_INT 0
33407: PPUSH
// uc_side := your_side ;
33408: LD_ADDR_OWVAR 20
33412: PUSH
33413: LD_OWVAR 2
33417: ST_TO_ADDR
// uc_nation := nation ;
33418: LD_ADDR_OWVAR 21
33422: PUSH
33423: LD_VAR 0 1
33427: ST_TO_ADDR
// InitHc ;
33428: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33432: LD_INT 0
33434: PPUSH
33435: LD_VAR 0 2
33439: PPUSH
33440: LD_VAR 0 3
33444: PPUSH
33445: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33449: LD_VAR 0 4
33453: PPUSH
33454: LD_VAR 0 5
33458: PPUSH
33459: CALL_OW 428
33463: PUSH
33464: LD_INT 0
33466: EQUAL
33467: IFFALSE 33491
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33469: CALL_OW 44
33473: PPUSH
33474: LD_VAR 0 4
33478: PPUSH
33479: LD_VAR 0 5
33483: PPUSH
33484: LD_INT 1
33486: PPUSH
33487: CALL_OW 48
// end ;
33491: LD_VAR 0 6
33495: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33496: LD_INT 0
33498: PPUSH
33499: PPUSH
// uc_side := your_side ;
33500: LD_ADDR_OWVAR 20
33504: PUSH
33505: LD_OWVAR 2
33509: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33510: LD_VAR 0 1
33514: PUSH
33515: LD_INT 1
33517: PUSH
33518: LD_INT 2
33520: PUSH
33521: LD_INT 3
33523: PUSH
33524: LD_INT 4
33526: PUSH
33527: LD_INT 5
33529: PUSH
33530: EMPTY
33531: LIST
33532: LIST
33533: LIST
33534: LIST
33535: LIST
33536: IN
33537: IFFALSE 33549
// uc_nation := nation_american else
33539: LD_ADDR_OWVAR 21
33543: PUSH
33544: LD_INT 1
33546: ST_TO_ADDR
33547: GO 33592
// if chassis in [ 11 , 12 , 13 , 14 ] then
33549: LD_VAR 0 1
33553: PUSH
33554: LD_INT 11
33556: PUSH
33557: LD_INT 12
33559: PUSH
33560: LD_INT 13
33562: PUSH
33563: LD_INT 14
33565: PUSH
33566: EMPTY
33567: LIST
33568: LIST
33569: LIST
33570: LIST
33571: IN
33572: IFFALSE 33584
// uc_nation := nation_arabian else
33574: LD_ADDR_OWVAR 21
33578: PUSH
33579: LD_INT 2
33581: ST_TO_ADDR
33582: GO 33592
// uc_nation := nation_russian ;
33584: LD_ADDR_OWVAR 21
33588: PUSH
33589: LD_INT 3
33591: ST_TO_ADDR
// vc_chassis := chassis ;
33592: LD_ADDR_OWVAR 37
33596: PUSH
33597: LD_VAR 0 1
33601: ST_TO_ADDR
// vc_engine := engine ;
33602: LD_ADDR_OWVAR 39
33606: PUSH
33607: LD_VAR 0 2
33611: ST_TO_ADDR
// vc_control := control ;
33612: LD_ADDR_OWVAR 38
33616: PUSH
33617: LD_VAR 0 3
33621: ST_TO_ADDR
// vc_weapon := weapon ;
33622: LD_ADDR_OWVAR 40
33626: PUSH
33627: LD_VAR 0 4
33631: ST_TO_ADDR
// un := CreateVehicle ;
33632: LD_ADDR_VAR 0 8
33636: PUSH
33637: CALL_OW 45
33641: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33642: LD_VAR 0 8
33646: PPUSH
33647: LD_INT 0
33649: PPUSH
33650: LD_INT 5
33652: PPUSH
33653: CALL_OW 12
33657: PPUSH
33658: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33662: LD_VAR 0 8
33666: PPUSH
33667: LD_VAR 0 5
33671: PPUSH
33672: LD_VAR 0 6
33676: PPUSH
33677: LD_INT 1
33679: PPUSH
33680: CALL_OW 48
// end ;
33684: LD_VAR 0 7
33688: RET
// export hInvincible ; every 1 do
33689: GO 33691
33691: DISABLE
// hInvincible := [ ] ;
33692: LD_ADDR_EXP 118
33696: PUSH
33697: EMPTY
33698: ST_TO_ADDR
33699: END
// every 10 do var i ;
33700: GO 33702
33702: DISABLE
33703: LD_INT 0
33705: PPUSH
// begin enable ;
33706: ENABLE
// if not hInvincible then
33707: LD_EXP 118
33711: NOT
33712: IFFALSE 33716
// exit ;
33714: GO 33760
// for i in hInvincible do
33716: LD_ADDR_VAR 0 1
33720: PUSH
33721: LD_EXP 118
33725: PUSH
33726: FOR_IN
33727: IFFALSE 33758
// if GetLives ( i ) < 1000 then
33729: LD_VAR 0 1
33733: PPUSH
33734: CALL_OW 256
33738: PUSH
33739: LD_INT 1000
33741: LESS
33742: IFFALSE 33756
// SetLives ( i , 1000 ) ;
33744: LD_VAR 0 1
33748: PPUSH
33749: LD_INT 1000
33751: PPUSH
33752: CALL_OW 234
33756: GO 33726
33758: POP
33759: POP
// end ;
33760: PPOPN 1
33762: END
// export function hHackInvincible ; var i ; begin
33763: LD_INT 0
33765: PPUSH
33766: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33767: LD_ADDR_VAR 0 2
33771: PUSH
33772: LD_INT 2
33774: PUSH
33775: LD_INT 21
33777: PUSH
33778: LD_INT 1
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: PUSH
33785: LD_INT 21
33787: PUSH
33788: LD_INT 2
33790: PUSH
33791: EMPTY
33792: LIST
33793: LIST
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: LIST
33799: PPUSH
33800: CALL_OW 69
33804: PUSH
33805: FOR_IN
33806: IFFALSE 33867
// if IsSelected ( i ) then
33808: LD_VAR 0 2
33812: PPUSH
33813: CALL_OW 306
33817: IFFALSE 33865
// begin if i in hInvincible then
33819: LD_VAR 0 2
33823: PUSH
33824: LD_EXP 118
33828: IN
33829: IFFALSE 33849
// hInvincible := hInvincible diff i else
33831: LD_ADDR_EXP 118
33835: PUSH
33836: LD_EXP 118
33840: PUSH
33841: LD_VAR 0 2
33845: DIFF
33846: ST_TO_ADDR
33847: GO 33865
// hInvincible := hInvincible union i ;
33849: LD_ADDR_EXP 118
33853: PUSH
33854: LD_EXP 118
33858: PUSH
33859: LD_VAR 0 2
33863: UNION
33864: ST_TO_ADDR
// end ;
33865: GO 33805
33867: POP
33868: POP
// end ;
33869: LD_VAR 0 1
33873: RET
// export function hHackInvisible ; var i , j ; begin
33874: LD_INT 0
33876: PPUSH
33877: PPUSH
33878: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33879: LD_ADDR_VAR 0 2
33883: PUSH
33884: LD_INT 21
33886: PUSH
33887: LD_INT 1
33889: PUSH
33890: EMPTY
33891: LIST
33892: LIST
33893: PPUSH
33894: CALL_OW 69
33898: PUSH
33899: FOR_IN
33900: IFFALSE 33924
// if IsSelected ( i ) then
33902: LD_VAR 0 2
33906: PPUSH
33907: CALL_OW 306
33911: IFFALSE 33922
// ComForceInvisible ( i ) ;
33913: LD_VAR 0 2
33917: PPUSH
33918: CALL_OW 496
33922: GO 33899
33924: POP
33925: POP
// end ;
33926: LD_VAR 0 1
33930: RET
// export function hHackChangeYourSide ; begin
33931: LD_INT 0
33933: PPUSH
// if your_side = 8 then
33934: LD_OWVAR 2
33938: PUSH
33939: LD_INT 8
33941: EQUAL
33942: IFFALSE 33954
// your_side := 0 else
33944: LD_ADDR_OWVAR 2
33948: PUSH
33949: LD_INT 0
33951: ST_TO_ADDR
33952: GO 33968
// your_side := your_side + 1 ;
33954: LD_ADDR_OWVAR 2
33958: PUSH
33959: LD_OWVAR 2
33963: PUSH
33964: LD_INT 1
33966: PLUS
33967: ST_TO_ADDR
// end ;
33968: LD_VAR 0 1
33972: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33973: LD_INT 0
33975: PPUSH
33976: PPUSH
33977: PPUSH
// for i in all_units do
33978: LD_ADDR_VAR 0 2
33982: PUSH
33983: LD_OWVAR 3
33987: PUSH
33988: FOR_IN
33989: IFFALSE 34067
// if IsSelected ( i ) then
33991: LD_VAR 0 2
33995: PPUSH
33996: CALL_OW 306
34000: IFFALSE 34065
// begin j := GetSide ( i ) ;
34002: LD_ADDR_VAR 0 3
34006: PUSH
34007: LD_VAR 0 2
34011: PPUSH
34012: CALL_OW 255
34016: ST_TO_ADDR
// if j = 8 then
34017: LD_VAR 0 3
34021: PUSH
34022: LD_INT 8
34024: EQUAL
34025: IFFALSE 34037
// j := 0 else
34027: LD_ADDR_VAR 0 3
34031: PUSH
34032: LD_INT 0
34034: ST_TO_ADDR
34035: GO 34051
// j := j + 1 ;
34037: LD_ADDR_VAR 0 3
34041: PUSH
34042: LD_VAR 0 3
34046: PUSH
34047: LD_INT 1
34049: PLUS
34050: ST_TO_ADDR
// SetSide ( i , j ) ;
34051: LD_VAR 0 2
34055: PPUSH
34056: LD_VAR 0 3
34060: PPUSH
34061: CALL_OW 235
// end ;
34065: GO 33988
34067: POP
34068: POP
// end ;
34069: LD_VAR 0 1
34073: RET
// export function hHackFog ; begin
34074: LD_INT 0
34076: PPUSH
// FogOff ( true ) ;
34077: LD_INT 1
34079: PPUSH
34080: CALL_OW 344
// end ;
34084: LD_VAR 0 1
34088: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34089: LD_INT 0
34091: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34092: LD_VAR 0 1
34096: PPUSH
34097: LD_VAR 0 2
34101: PPUSH
34102: LD_VAR 0 3
34106: PPUSH
34107: LD_INT 1
34109: PPUSH
34110: LD_INT 1
34112: PPUSH
34113: CALL_OW 483
// CenterOnXY ( x , y ) ;
34117: LD_VAR 0 2
34121: PPUSH
34122: LD_VAR 0 3
34126: PPUSH
34127: CALL_OW 84
// end ;
34131: LD_VAR 0 4
34135: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34136: LD_INT 0
34138: PPUSH
34139: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34140: LD_VAR 0 1
34144: NOT
34145: PUSH
34146: LD_VAR 0 2
34150: PPUSH
34151: LD_VAR 0 3
34155: PPUSH
34156: CALL_OW 488
34160: NOT
34161: OR
34162: PUSH
34163: LD_VAR 0 1
34167: PPUSH
34168: CALL_OW 266
34172: PUSH
34173: LD_INT 3
34175: NONEQUAL
34176: PUSH
34177: LD_VAR 0 1
34181: PPUSH
34182: CALL_OW 247
34186: PUSH
34187: LD_INT 1
34189: EQUAL
34190: NOT
34191: AND
34192: OR
34193: IFFALSE 34197
// exit ;
34195: GO 34346
// if GetType ( factory ) = unit_human then
34197: LD_VAR 0 1
34201: PPUSH
34202: CALL_OW 247
34206: PUSH
34207: LD_INT 1
34209: EQUAL
34210: IFFALSE 34227
// factory := IsInUnit ( factory ) ;
34212: LD_ADDR_VAR 0 1
34216: PUSH
34217: LD_VAR 0 1
34221: PPUSH
34222: CALL_OW 310
34226: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34227: LD_VAR 0 1
34231: PPUSH
34232: CALL_OW 266
34236: PUSH
34237: LD_INT 3
34239: NONEQUAL
34240: IFFALSE 34244
// exit ;
34242: GO 34346
// if HexInfo ( x , y ) = factory then
34244: LD_VAR 0 2
34248: PPUSH
34249: LD_VAR 0 3
34253: PPUSH
34254: CALL_OW 428
34258: PUSH
34259: LD_VAR 0 1
34263: EQUAL
34264: IFFALSE 34291
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
34266: LD_ADDR_EXP 119
34270: PUSH
34271: LD_EXP 119
34275: PPUSH
34276: LD_VAR 0 1
34280: PPUSH
34281: LD_INT 0
34283: PPUSH
34284: CALL_OW 1
34288: ST_TO_ADDR
34289: GO 34342
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
34291: LD_ADDR_EXP 119
34295: PUSH
34296: LD_EXP 119
34300: PPUSH
34301: LD_VAR 0 1
34305: PPUSH
34306: LD_VAR 0 1
34310: PPUSH
34311: CALL_OW 255
34315: PUSH
34316: LD_VAR 0 1
34320: PUSH
34321: LD_VAR 0 2
34325: PUSH
34326: LD_VAR 0 3
34330: PUSH
34331: EMPTY
34332: LIST
34333: LIST
34334: LIST
34335: LIST
34336: PPUSH
34337: CALL_OW 1
34341: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34342: CALL 34351 0 0
// end ;
34346: LD_VAR 0 4
34350: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34351: LD_INT 0
34353: PPUSH
34354: PPUSH
34355: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34356: LD_STRING resetFactoryWaypoint();
34358: PPUSH
34359: CALL_OW 559
// if factoryWaypoints then
34363: LD_EXP 119
34367: IFFALSE 34493
// begin list := PrepareArray ( factoryWaypoints ) ;
34369: LD_ADDR_VAR 0 3
34373: PUSH
34374: LD_EXP 119
34378: PPUSH
34379: CALL 80962 0 1
34383: ST_TO_ADDR
// for i := 1 to list do
34384: LD_ADDR_VAR 0 2
34388: PUSH
34389: DOUBLE
34390: LD_INT 1
34392: DEC
34393: ST_TO_ADDR
34394: LD_VAR 0 3
34398: PUSH
34399: FOR_TO
34400: IFFALSE 34491
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34402: LD_STRING setFactoryWaypointXY(
34404: PUSH
34405: LD_VAR 0 3
34409: PUSH
34410: LD_VAR 0 2
34414: ARRAY
34415: PUSH
34416: LD_INT 1
34418: ARRAY
34419: STR
34420: PUSH
34421: LD_STRING ,
34423: STR
34424: PUSH
34425: LD_VAR 0 3
34429: PUSH
34430: LD_VAR 0 2
34434: ARRAY
34435: PUSH
34436: LD_INT 2
34438: ARRAY
34439: STR
34440: PUSH
34441: LD_STRING ,
34443: STR
34444: PUSH
34445: LD_VAR 0 3
34449: PUSH
34450: LD_VAR 0 2
34454: ARRAY
34455: PUSH
34456: LD_INT 3
34458: ARRAY
34459: STR
34460: PUSH
34461: LD_STRING ,
34463: STR
34464: PUSH
34465: LD_VAR 0 3
34469: PUSH
34470: LD_VAR 0 2
34474: ARRAY
34475: PUSH
34476: LD_INT 4
34478: ARRAY
34479: STR
34480: PUSH
34481: LD_STRING )
34483: STR
34484: PPUSH
34485: CALL_OW 559
34489: GO 34399
34491: POP
34492: POP
// end ; end ;
34493: LD_VAR 0 1
34497: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34498: LD_INT 0
34500: PPUSH
// if HexInfo ( x , y ) = warehouse then
34501: LD_VAR 0 2
34505: PPUSH
34506: LD_VAR 0 3
34510: PPUSH
34511: CALL_OW 428
34515: PUSH
34516: LD_VAR 0 1
34520: EQUAL
34521: IFFALSE 34548
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34523: LD_ADDR_EXP 120
34527: PUSH
34528: LD_EXP 120
34532: PPUSH
34533: LD_VAR 0 1
34537: PPUSH
34538: LD_INT 0
34540: PPUSH
34541: CALL_OW 1
34545: ST_TO_ADDR
34546: GO 34599
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34548: LD_ADDR_EXP 120
34552: PUSH
34553: LD_EXP 120
34557: PPUSH
34558: LD_VAR 0 1
34562: PPUSH
34563: LD_VAR 0 1
34567: PPUSH
34568: CALL_OW 255
34572: PUSH
34573: LD_VAR 0 1
34577: PUSH
34578: LD_VAR 0 2
34582: PUSH
34583: LD_VAR 0 3
34587: PUSH
34588: EMPTY
34589: LIST
34590: LIST
34591: LIST
34592: LIST
34593: PPUSH
34594: CALL_OW 1
34598: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
34599: CALL 34608 0 0
// end ;
34603: LD_VAR 0 4
34607: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
34608: LD_INT 0
34610: PPUSH
34611: PPUSH
34612: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
34613: LD_STRING resetWarehouseGatheringPoints();
34615: PPUSH
34616: CALL_OW 559
// if warehouseGatheringPoints then
34620: LD_EXP 120
34624: IFFALSE 34750
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
34626: LD_ADDR_VAR 0 3
34630: PUSH
34631: LD_EXP 120
34635: PPUSH
34636: CALL 80962 0 1
34640: ST_TO_ADDR
// for i := 1 to list do
34641: LD_ADDR_VAR 0 2
34645: PUSH
34646: DOUBLE
34647: LD_INT 1
34649: DEC
34650: ST_TO_ADDR
34651: LD_VAR 0 3
34655: PUSH
34656: FOR_TO
34657: IFFALSE 34748
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34659: LD_STRING setWarehouseGatheringPointXY(
34661: PUSH
34662: LD_VAR 0 3
34666: PUSH
34667: LD_VAR 0 2
34671: ARRAY
34672: PUSH
34673: LD_INT 1
34675: ARRAY
34676: STR
34677: PUSH
34678: LD_STRING ,
34680: STR
34681: PUSH
34682: LD_VAR 0 3
34686: PUSH
34687: LD_VAR 0 2
34691: ARRAY
34692: PUSH
34693: LD_INT 2
34695: ARRAY
34696: STR
34697: PUSH
34698: LD_STRING ,
34700: STR
34701: PUSH
34702: LD_VAR 0 3
34706: PUSH
34707: LD_VAR 0 2
34711: ARRAY
34712: PUSH
34713: LD_INT 3
34715: ARRAY
34716: STR
34717: PUSH
34718: LD_STRING ,
34720: STR
34721: PUSH
34722: LD_VAR 0 3
34726: PUSH
34727: LD_VAR 0 2
34731: ARRAY
34732: PUSH
34733: LD_INT 4
34735: ARRAY
34736: STR
34737: PUSH
34738: LD_STRING )
34740: STR
34741: PPUSH
34742: CALL_OW 559
34746: GO 34656
34748: POP
34749: POP
// end ; end ;
34750: LD_VAR 0 1
34754: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
34755: LD_EXP 120
34759: IFFALSE 35444
34761: GO 34763
34763: DISABLE
34764: LD_INT 0
34766: PPUSH
34767: PPUSH
34768: PPUSH
34769: PPUSH
34770: PPUSH
34771: PPUSH
34772: PPUSH
34773: PPUSH
34774: PPUSH
// begin enable ;
34775: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
34776: LD_ADDR_VAR 0 3
34780: PUSH
34781: LD_EXP 120
34785: PPUSH
34786: CALL 80962 0 1
34790: ST_TO_ADDR
// if not list then
34791: LD_VAR 0 3
34795: NOT
34796: IFFALSE 34800
// exit ;
34798: GO 35444
// for i := 1 to list do
34800: LD_ADDR_VAR 0 1
34804: PUSH
34805: DOUBLE
34806: LD_INT 1
34808: DEC
34809: ST_TO_ADDR
34810: LD_VAR 0 3
34814: PUSH
34815: FOR_TO
34816: IFFALSE 35442
// begin depot := list [ i ] [ 2 ] ;
34818: LD_ADDR_VAR 0 8
34822: PUSH
34823: LD_VAR 0 3
34827: PUSH
34828: LD_VAR 0 1
34832: ARRAY
34833: PUSH
34834: LD_INT 2
34836: ARRAY
34837: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
34838: LD_ADDR_VAR 0 5
34842: PUSH
34843: LD_VAR 0 3
34847: PUSH
34848: LD_VAR 0 1
34852: ARRAY
34853: PUSH
34854: LD_INT 1
34856: ARRAY
34857: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
34858: LD_VAR 0 8
34862: PPUSH
34863: CALL_OW 301
34867: PUSH
34868: LD_VAR 0 5
34872: PUSH
34873: LD_VAR 0 8
34877: PPUSH
34878: CALL_OW 255
34882: NONEQUAL
34883: OR
34884: IFFALSE 34913
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
34886: LD_ADDR_EXP 120
34890: PUSH
34891: LD_EXP 120
34895: PPUSH
34896: LD_VAR 0 8
34900: PPUSH
34901: LD_INT 0
34903: PPUSH
34904: CALL_OW 1
34908: ST_TO_ADDR
// exit ;
34909: POP
34910: POP
34911: GO 35444
// end ; x := list [ i ] [ 3 ] ;
34913: LD_ADDR_VAR 0 6
34917: PUSH
34918: LD_VAR 0 3
34922: PUSH
34923: LD_VAR 0 1
34927: ARRAY
34928: PUSH
34929: LD_INT 3
34931: ARRAY
34932: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
34933: LD_ADDR_VAR 0 7
34937: PUSH
34938: LD_VAR 0 3
34942: PUSH
34943: LD_VAR 0 1
34947: ARRAY
34948: PUSH
34949: LD_INT 4
34951: ARRAY
34952: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
34953: LD_ADDR_VAR 0 9
34957: PUSH
34958: LD_VAR 0 6
34962: PPUSH
34963: LD_VAR 0 7
34967: PPUSH
34968: LD_INT 16
34970: PPUSH
34971: CALL 79550 0 3
34975: ST_TO_ADDR
// if not cratesNearbyPoint then
34976: LD_VAR 0 9
34980: NOT
34981: IFFALSE 34987
// exit ;
34983: POP
34984: POP
34985: GO 35444
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
34987: LD_ADDR_VAR 0 4
34991: PUSH
34992: LD_INT 22
34994: PUSH
34995: LD_VAR 0 5
34999: PUSH
35000: EMPTY
35001: LIST
35002: LIST
35003: PUSH
35004: LD_INT 3
35006: PUSH
35007: LD_INT 60
35009: PUSH
35010: EMPTY
35011: LIST
35012: PUSH
35013: EMPTY
35014: LIST
35015: LIST
35016: PUSH
35017: LD_INT 91
35019: PUSH
35020: LD_VAR 0 8
35024: PUSH
35025: LD_INT 6
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: LIST
35032: PUSH
35033: LD_INT 2
35035: PUSH
35036: LD_INT 25
35038: PUSH
35039: LD_INT 2
35041: PUSH
35042: EMPTY
35043: LIST
35044: LIST
35045: PUSH
35046: LD_INT 25
35048: PUSH
35049: LD_INT 16
35051: PUSH
35052: EMPTY
35053: LIST
35054: LIST
35055: PUSH
35056: EMPTY
35057: LIST
35058: LIST
35059: LIST
35060: PUSH
35061: EMPTY
35062: LIST
35063: LIST
35064: LIST
35065: LIST
35066: PPUSH
35067: CALL_OW 69
35071: PUSH
35072: LD_VAR 0 8
35076: PPUSH
35077: CALL_OW 313
35081: PPUSH
35082: LD_INT 3
35084: PUSH
35085: LD_INT 60
35087: PUSH
35088: EMPTY
35089: LIST
35090: PUSH
35091: EMPTY
35092: LIST
35093: LIST
35094: PUSH
35095: LD_INT 2
35097: PUSH
35098: LD_INT 25
35100: PUSH
35101: LD_INT 2
35103: PUSH
35104: EMPTY
35105: LIST
35106: LIST
35107: PUSH
35108: LD_INT 25
35110: PUSH
35111: LD_INT 16
35113: PUSH
35114: EMPTY
35115: LIST
35116: LIST
35117: PUSH
35118: EMPTY
35119: LIST
35120: LIST
35121: LIST
35122: PUSH
35123: EMPTY
35124: LIST
35125: LIST
35126: PPUSH
35127: CALL_OW 72
35131: UNION
35132: ST_TO_ADDR
// if tmp then
35133: LD_VAR 0 4
35137: IFFALSE 35217
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35139: LD_ADDR_VAR 0 4
35143: PUSH
35144: LD_VAR 0 4
35148: PPUSH
35149: LD_INT 3
35151: PPUSH
35152: CALL 77519 0 2
35156: ST_TO_ADDR
// for j in tmp do
35157: LD_ADDR_VAR 0 2
35161: PUSH
35162: LD_VAR 0 4
35166: PUSH
35167: FOR_IN
35168: IFFALSE 35211
// begin if IsInUnit ( j ) then
35170: LD_VAR 0 2
35174: PPUSH
35175: CALL_OW 310
35179: IFFALSE 35190
// ComExit ( j ) ;
35181: LD_VAR 0 2
35185: PPUSH
35186: CALL 77602 0 1
// AddComCollect ( j , x , y ) ;
35190: LD_VAR 0 2
35194: PPUSH
35195: LD_VAR 0 6
35199: PPUSH
35200: LD_VAR 0 7
35204: PPUSH
35205: CALL_OW 177
// end ;
35209: GO 35167
35211: POP
35212: POP
// exit ;
35213: POP
35214: POP
35215: GO 35444
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35217: LD_ADDR_VAR 0 4
35221: PUSH
35222: LD_INT 22
35224: PUSH
35225: LD_VAR 0 5
35229: PUSH
35230: EMPTY
35231: LIST
35232: LIST
35233: PUSH
35234: LD_INT 91
35236: PUSH
35237: LD_VAR 0 8
35241: PUSH
35242: LD_INT 8
35244: PUSH
35245: EMPTY
35246: LIST
35247: LIST
35248: LIST
35249: PUSH
35250: LD_INT 2
35252: PUSH
35253: LD_INT 34
35255: PUSH
35256: LD_INT 12
35258: PUSH
35259: EMPTY
35260: LIST
35261: LIST
35262: PUSH
35263: LD_INT 34
35265: PUSH
35266: LD_INT 51
35268: PUSH
35269: EMPTY
35270: LIST
35271: LIST
35272: PUSH
35273: LD_INT 34
35275: PUSH
35276: LD_INT 32
35278: PUSH
35279: EMPTY
35280: LIST
35281: LIST
35282: PUSH
35283: LD_INT 34
35285: PUSH
35286: LD_INT 89
35288: PUSH
35289: EMPTY
35290: LIST
35291: LIST
35292: PUSH
35293: EMPTY
35294: LIST
35295: LIST
35296: LIST
35297: LIST
35298: LIST
35299: PUSH
35300: EMPTY
35301: LIST
35302: LIST
35303: LIST
35304: PPUSH
35305: CALL_OW 69
35309: ST_TO_ADDR
// if tmp then
35310: LD_VAR 0 4
35314: IFFALSE 35440
// begin for j in tmp do
35316: LD_ADDR_VAR 0 2
35320: PUSH
35321: LD_VAR 0 4
35325: PUSH
35326: FOR_IN
35327: IFFALSE 35438
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35329: LD_VAR 0 2
35333: PPUSH
35334: CALL_OW 262
35338: PUSH
35339: LD_INT 3
35341: EQUAL
35342: PUSH
35343: LD_VAR 0 2
35347: PPUSH
35348: CALL_OW 261
35352: PUSH
35353: LD_INT 20
35355: GREATER
35356: OR
35357: PUSH
35358: LD_VAR 0 2
35362: PPUSH
35363: CALL_OW 314
35367: NOT
35368: AND
35369: PUSH
35370: LD_VAR 0 2
35374: PPUSH
35375: CALL_OW 263
35379: PUSH
35380: LD_INT 1
35382: NONEQUAL
35383: PUSH
35384: LD_VAR 0 2
35388: PPUSH
35389: CALL_OW 311
35393: OR
35394: AND
35395: IFFALSE 35436
// begin ComCollect ( j , x , y ) ;
35397: LD_VAR 0 2
35401: PPUSH
35402: LD_VAR 0 6
35406: PPUSH
35407: LD_VAR 0 7
35411: PPUSH
35412: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35416: LD_VAR 0 2
35420: PPUSH
35421: LD_VAR 0 8
35425: PPUSH
35426: CALL_OW 172
// exit ;
35430: POP
35431: POP
35432: POP
35433: POP
35434: GO 35444
// end ;
35436: GO 35326
35438: POP
35439: POP
// end ; end ;
35440: GO 34815
35442: POP
35443: POP
// end ; end_of_file
35444: PPOPN 9
35446: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
35447: LD_INT 0
35449: PPUSH
35450: PPUSH
35451: PPUSH
35452: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
35453: LD_VAR 0 1
35457: PPUSH
35458: CALL_OW 264
35462: PUSH
35463: LD_INT 91
35465: EQUAL
35466: IFFALSE 35538
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
35468: LD_INT 68
35470: PPUSH
35471: LD_VAR 0 1
35475: PPUSH
35476: CALL_OW 255
35480: PPUSH
35481: CALL_OW 321
35485: PUSH
35486: LD_INT 2
35488: EQUAL
35489: IFFALSE 35501
// eff := 70 else
35491: LD_ADDR_VAR 0 4
35495: PUSH
35496: LD_INT 70
35498: ST_TO_ADDR
35499: GO 35509
// eff := 30 ;
35501: LD_ADDR_VAR 0 4
35505: PUSH
35506: LD_INT 30
35508: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35509: LD_VAR 0 1
35513: PPUSH
35514: CALL_OW 250
35518: PPUSH
35519: LD_VAR 0 1
35523: PPUSH
35524: CALL_OW 251
35528: PPUSH
35529: LD_VAR 0 4
35533: PPUSH
35534: CALL_OW 495
// end ; end ;
35538: LD_VAR 0 2
35542: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35543: LD_INT 0
35545: PPUSH
// end ;
35546: LD_VAR 0 4
35550: RET
// export function SOS_Command ( cmd ) ; begin
35551: LD_INT 0
35553: PPUSH
// end ;
35554: LD_VAR 0 2
35558: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35559: LD_INT 0
35561: PPUSH
// end ;
35562: LD_VAR 0 6
35566: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
35567: LD_INT 0
35569: PPUSH
35570: PPUSH
// if not vehicle or not factory then
35571: LD_VAR 0 1
35575: NOT
35576: PUSH
35577: LD_VAR 0 2
35581: NOT
35582: OR
35583: IFFALSE 35587
// exit ;
35585: GO 35818
// if factoryWaypoints >= factory then
35587: LD_EXP 119
35591: PUSH
35592: LD_VAR 0 2
35596: GREATEREQUAL
35597: IFFALSE 35818
// if factoryWaypoints [ factory ] then
35599: LD_EXP 119
35603: PUSH
35604: LD_VAR 0 2
35608: ARRAY
35609: IFFALSE 35818
// begin if GetControl ( vehicle ) = control_manual then
35611: LD_VAR 0 1
35615: PPUSH
35616: CALL_OW 263
35620: PUSH
35621: LD_INT 1
35623: EQUAL
35624: IFFALSE 35705
// begin driver := IsDrivenBy ( vehicle ) ;
35626: LD_ADDR_VAR 0 4
35630: PUSH
35631: LD_VAR 0 1
35635: PPUSH
35636: CALL_OW 311
35640: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35641: LD_VAR 0 4
35645: PPUSH
35646: LD_EXP 119
35650: PUSH
35651: LD_VAR 0 2
35655: ARRAY
35656: PUSH
35657: LD_INT 3
35659: ARRAY
35660: PPUSH
35661: LD_EXP 119
35665: PUSH
35666: LD_VAR 0 2
35670: ARRAY
35671: PUSH
35672: LD_INT 4
35674: ARRAY
35675: PPUSH
35676: CALL_OW 171
// AddComExitVehicle ( driver ) ;
35680: LD_VAR 0 4
35684: PPUSH
35685: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
35689: LD_VAR 0 4
35693: PPUSH
35694: LD_VAR 0 2
35698: PPUSH
35699: CALL_OW 180
// end else
35703: GO 35818
// if GetControl ( vehicle ) = control_remote then
35705: LD_VAR 0 1
35709: PPUSH
35710: CALL_OW 263
35714: PUSH
35715: LD_INT 2
35717: EQUAL
35718: IFFALSE 35779
// begin wait ( 0 0$2 ) ;
35720: LD_INT 70
35722: PPUSH
35723: CALL_OW 67
// if Connect ( vehicle ) then
35727: LD_VAR 0 1
35731: PPUSH
35732: CALL 47842 0 1
35736: IFFALSE 35777
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35738: LD_VAR 0 1
35742: PPUSH
35743: LD_EXP 119
35747: PUSH
35748: LD_VAR 0 2
35752: ARRAY
35753: PUSH
35754: LD_INT 3
35756: ARRAY
35757: PPUSH
35758: LD_EXP 119
35762: PUSH
35763: LD_VAR 0 2
35767: ARRAY
35768: PUSH
35769: LD_INT 4
35771: ARRAY
35772: PPUSH
35773: CALL_OW 171
// end else
35777: GO 35818
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35779: LD_VAR 0 1
35783: PPUSH
35784: LD_EXP 119
35788: PUSH
35789: LD_VAR 0 2
35793: ARRAY
35794: PUSH
35795: LD_INT 3
35797: ARRAY
35798: PPUSH
35799: LD_EXP 119
35803: PUSH
35804: LD_VAR 0 2
35808: ARRAY
35809: PUSH
35810: LD_INT 4
35812: ARRAY
35813: PPUSH
35814: CALL_OW 171
// end ; end ;
35818: LD_VAR 0 3
35822: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
35823: LD_INT 0
35825: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
35826: LD_VAR 0 1
35830: PUSH
35831: LD_INT 250
35833: EQUAL
35834: PUSH
35835: LD_VAR 0 2
35839: PPUSH
35840: CALL_OW 264
35844: PUSH
35845: LD_INT 81
35847: EQUAL
35848: AND
35849: IFFALSE 35870
// MinerPlaceMine ( unit , x , y ) ;
35851: LD_VAR 0 2
35855: PPUSH
35856: LD_VAR 0 4
35860: PPUSH
35861: LD_VAR 0 5
35865: PPUSH
35866: CALL 38255 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
35870: LD_VAR 0 1
35874: PUSH
35875: LD_INT 251
35877: EQUAL
35878: PUSH
35879: LD_VAR 0 2
35883: PPUSH
35884: CALL_OW 264
35888: PUSH
35889: LD_INT 81
35891: EQUAL
35892: AND
35893: IFFALSE 35914
// MinerDetonateMine ( unit , x , y ) ;
35895: LD_VAR 0 2
35899: PPUSH
35900: LD_VAR 0 4
35904: PPUSH
35905: LD_VAR 0 5
35909: PPUSH
35910: CALL 38530 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
35914: LD_VAR 0 1
35918: PUSH
35919: LD_INT 252
35921: EQUAL
35922: PUSH
35923: LD_VAR 0 2
35927: PPUSH
35928: CALL_OW 264
35932: PUSH
35933: LD_INT 81
35935: EQUAL
35936: AND
35937: IFFALSE 35958
// MinerCreateMinefield ( unit , x , y ) ;
35939: LD_VAR 0 2
35943: PPUSH
35944: LD_VAR 0 4
35948: PPUSH
35949: LD_VAR 0 5
35953: PPUSH
35954: CALL 38947 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
35958: LD_VAR 0 1
35962: PUSH
35963: LD_INT 253
35965: EQUAL
35966: PUSH
35967: LD_VAR 0 2
35971: PPUSH
35972: CALL_OW 257
35976: PUSH
35977: LD_INT 5
35979: EQUAL
35980: AND
35981: IFFALSE 36002
// ComBinocular ( unit , x , y ) ;
35983: LD_VAR 0 2
35987: PPUSH
35988: LD_VAR 0 4
35992: PPUSH
35993: LD_VAR 0 5
35997: PPUSH
35998: CALL 39316 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36002: LD_VAR 0 1
36006: PUSH
36007: LD_INT 254
36009: EQUAL
36010: PUSH
36011: LD_VAR 0 2
36015: PPUSH
36016: CALL_OW 264
36020: PUSH
36021: LD_INT 99
36023: EQUAL
36024: AND
36025: PUSH
36026: LD_VAR 0 3
36030: PPUSH
36031: CALL_OW 263
36035: PUSH
36036: LD_INT 3
36038: EQUAL
36039: AND
36040: IFFALSE 36056
// HackDestroyVehicle ( unit , selectedUnit ) ;
36042: LD_VAR 0 2
36046: PPUSH
36047: LD_VAR 0 3
36051: PPUSH
36052: CALL 37619 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36056: LD_VAR 0 1
36060: PUSH
36061: LD_INT 255
36063: EQUAL
36064: PUSH
36065: LD_VAR 0 2
36069: PPUSH
36070: CALL_OW 264
36074: PUSH
36075: LD_INT 14
36077: PUSH
36078: LD_INT 53
36080: PUSH
36081: EMPTY
36082: LIST
36083: LIST
36084: IN
36085: AND
36086: PUSH
36087: LD_VAR 0 4
36091: PPUSH
36092: LD_VAR 0 5
36096: PPUSH
36097: CALL_OW 488
36101: AND
36102: IFFALSE 36126
// CutTreeXYR ( unit , x , y , 12 ) ;
36104: LD_VAR 0 2
36108: PPUSH
36109: LD_VAR 0 4
36113: PPUSH
36114: LD_VAR 0 5
36118: PPUSH
36119: LD_INT 12
36121: PPUSH
36122: CALL 36189 0 4
// if cmd = 256 then
36126: LD_VAR 0 1
36130: PUSH
36131: LD_INT 256
36133: EQUAL
36134: IFFALSE 36155
// SetFactoryWaypoint ( unit , x , y ) ;
36136: LD_VAR 0 2
36140: PPUSH
36141: LD_VAR 0 4
36145: PPUSH
36146: LD_VAR 0 5
36150: PPUSH
36151: CALL 34136 0 3
// if cmd = 257 then
36155: LD_VAR 0 1
36159: PUSH
36160: LD_INT 257
36162: EQUAL
36163: IFFALSE 36184
// SetWarehouseGatheringPoint ( unit , x , y ) ;
36165: LD_VAR 0 2
36169: PPUSH
36170: LD_VAR 0 4
36174: PPUSH
36175: LD_VAR 0 5
36179: PPUSH
36180: CALL 34498 0 3
// end ;
36184: LD_VAR 0 6
36188: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36189: LD_INT 0
36191: PPUSH
36192: PPUSH
36193: PPUSH
36194: PPUSH
36195: PPUSH
36196: PPUSH
36197: PPUSH
36198: PPUSH
36199: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
36200: LD_VAR 0 1
36204: NOT
36205: PUSH
36206: LD_VAR 0 2
36210: PPUSH
36211: LD_VAR 0 3
36215: PPUSH
36216: CALL_OW 488
36220: NOT
36221: OR
36222: PUSH
36223: LD_VAR 0 4
36227: NOT
36228: OR
36229: IFFALSE 36233
// exit ;
36231: GO 36573
// list := [ ] ;
36233: LD_ADDR_VAR 0 13
36237: PUSH
36238: EMPTY
36239: ST_TO_ADDR
// if x - r < 0 then
36240: LD_VAR 0 2
36244: PUSH
36245: LD_VAR 0 4
36249: MINUS
36250: PUSH
36251: LD_INT 0
36253: LESS
36254: IFFALSE 36266
// min_x := 0 else
36256: LD_ADDR_VAR 0 7
36260: PUSH
36261: LD_INT 0
36263: ST_TO_ADDR
36264: GO 36282
// min_x := x - r ;
36266: LD_ADDR_VAR 0 7
36270: PUSH
36271: LD_VAR 0 2
36275: PUSH
36276: LD_VAR 0 4
36280: MINUS
36281: ST_TO_ADDR
// if y - r < 0 then
36282: LD_VAR 0 3
36286: PUSH
36287: LD_VAR 0 4
36291: MINUS
36292: PUSH
36293: LD_INT 0
36295: LESS
36296: IFFALSE 36308
// min_y := 0 else
36298: LD_ADDR_VAR 0 8
36302: PUSH
36303: LD_INT 0
36305: ST_TO_ADDR
36306: GO 36324
// min_y := y - r ;
36308: LD_ADDR_VAR 0 8
36312: PUSH
36313: LD_VAR 0 3
36317: PUSH
36318: LD_VAR 0 4
36322: MINUS
36323: ST_TO_ADDR
// max_x := x + r ;
36324: LD_ADDR_VAR 0 9
36328: PUSH
36329: LD_VAR 0 2
36333: PUSH
36334: LD_VAR 0 4
36338: PLUS
36339: ST_TO_ADDR
// max_y := y + r ;
36340: LD_ADDR_VAR 0 10
36344: PUSH
36345: LD_VAR 0 3
36349: PUSH
36350: LD_VAR 0 4
36354: PLUS
36355: ST_TO_ADDR
// for _x = min_x to max_x do
36356: LD_ADDR_VAR 0 11
36360: PUSH
36361: DOUBLE
36362: LD_VAR 0 7
36366: DEC
36367: ST_TO_ADDR
36368: LD_VAR 0 9
36372: PUSH
36373: FOR_TO
36374: IFFALSE 36491
// for _y = min_y to max_y do
36376: LD_ADDR_VAR 0 12
36380: PUSH
36381: DOUBLE
36382: LD_VAR 0 8
36386: DEC
36387: ST_TO_ADDR
36388: LD_VAR 0 10
36392: PUSH
36393: FOR_TO
36394: IFFALSE 36487
// begin if not ValidHex ( _x , _y ) then
36396: LD_VAR 0 11
36400: PPUSH
36401: LD_VAR 0 12
36405: PPUSH
36406: CALL_OW 488
36410: NOT
36411: IFFALSE 36415
// continue ;
36413: GO 36393
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36415: LD_VAR 0 11
36419: PPUSH
36420: LD_VAR 0 12
36424: PPUSH
36425: CALL_OW 351
36429: PUSH
36430: LD_VAR 0 11
36434: PPUSH
36435: LD_VAR 0 12
36439: PPUSH
36440: CALL_OW 554
36444: AND
36445: IFFALSE 36485
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36447: LD_ADDR_VAR 0 13
36451: PUSH
36452: LD_VAR 0 13
36456: PPUSH
36457: LD_VAR 0 13
36461: PUSH
36462: LD_INT 1
36464: PLUS
36465: PPUSH
36466: LD_VAR 0 11
36470: PUSH
36471: LD_VAR 0 12
36475: PUSH
36476: EMPTY
36477: LIST
36478: LIST
36479: PPUSH
36480: CALL_OW 2
36484: ST_TO_ADDR
// end ;
36485: GO 36393
36487: POP
36488: POP
36489: GO 36373
36491: POP
36492: POP
// if not list then
36493: LD_VAR 0 13
36497: NOT
36498: IFFALSE 36502
// exit ;
36500: GO 36573
// for i in list do
36502: LD_ADDR_VAR 0 6
36506: PUSH
36507: LD_VAR 0 13
36511: PUSH
36512: FOR_IN
36513: IFFALSE 36571
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
36515: LD_VAR 0 1
36519: PPUSH
36520: LD_STRING M
36522: PUSH
36523: LD_VAR 0 6
36527: PUSH
36528: LD_INT 1
36530: ARRAY
36531: PUSH
36532: LD_VAR 0 6
36536: PUSH
36537: LD_INT 2
36539: ARRAY
36540: PUSH
36541: LD_INT 0
36543: PUSH
36544: LD_INT 0
36546: PUSH
36547: LD_INT 0
36549: PUSH
36550: LD_INT 0
36552: PUSH
36553: EMPTY
36554: LIST
36555: LIST
36556: LIST
36557: LIST
36558: LIST
36559: LIST
36560: LIST
36561: PUSH
36562: EMPTY
36563: LIST
36564: PPUSH
36565: CALL_OW 447
36569: GO 36512
36571: POP
36572: POP
// end ;
36573: LD_VAR 0 5
36577: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
36578: LD_EXP 122
36582: NOT
36583: IFFALSE 36633
36585: GO 36587
36587: DISABLE
// begin initHack := true ;
36588: LD_ADDR_EXP 122
36592: PUSH
36593: LD_INT 1
36595: ST_TO_ADDR
// hackTanks := [ ] ;
36596: LD_ADDR_EXP 123
36600: PUSH
36601: EMPTY
36602: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
36603: LD_ADDR_EXP 124
36607: PUSH
36608: EMPTY
36609: ST_TO_ADDR
// hackLimit := 3 ;
36610: LD_ADDR_EXP 125
36614: PUSH
36615: LD_INT 3
36617: ST_TO_ADDR
// hackDist := 12 ;
36618: LD_ADDR_EXP 126
36622: PUSH
36623: LD_INT 12
36625: ST_TO_ADDR
// hackCounter := [ ] ;
36626: LD_ADDR_EXP 127
36630: PUSH
36631: EMPTY
36632: ST_TO_ADDR
// end ;
36633: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
36634: LD_EXP 122
36638: PUSH
36639: LD_INT 34
36641: PUSH
36642: LD_INT 99
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: PPUSH
36649: CALL_OW 69
36653: AND
36654: IFFALSE 36907
36656: GO 36658
36658: DISABLE
36659: LD_INT 0
36661: PPUSH
36662: PPUSH
// begin enable ;
36663: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
36664: LD_ADDR_VAR 0 1
36668: PUSH
36669: LD_INT 34
36671: PUSH
36672: LD_INT 99
36674: PUSH
36675: EMPTY
36676: LIST
36677: LIST
36678: PPUSH
36679: CALL_OW 69
36683: PUSH
36684: FOR_IN
36685: IFFALSE 36905
// begin if not i in hackTanks then
36687: LD_VAR 0 1
36691: PUSH
36692: LD_EXP 123
36696: IN
36697: NOT
36698: IFFALSE 36781
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
36700: LD_ADDR_EXP 123
36704: PUSH
36705: LD_EXP 123
36709: PPUSH
36710: LD_EXP 123
36714: PUSH
36715: LD_INT 1
36717: PLUS
36718: PPUSH
36719: LD_VAR 0 1
36723: PPUSH
36724: CALL_OW 1
36728: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
36729: LD_ADDR_EXP 124
36733: PUSH
36734: LD_EXP 124
36738: PPUSH
36739: LD_EXP 124
36743: PUSH
36744: LD_INT 1
36746: PLUS
36747: PPUSH
36748: EMPTY
36749: PPUSH
36750: CALL_OW 1
36754: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
36755: LD_ADDR_EXP 127
36759: PUSH
36760: LD_EXP 127
36764: PPUSH
36765: LD_EXP 127
36769: PUSH
36770: LD_INT 1
36772: PLUS
36773: PPUSH
36774: EMPTY
36775: PPUSH
36776: CALL_OW 1
36780: ST_TO_ADDR
// end ; if not IsOk ( i ) then
36781: LD_VAR 0 1
36785: PPUSH
36786: CALL_OW 302
36790: NOT
36791: IFFALSE 36804
// begin HackUnlinkAll ( i ) ;
36793: LD_VAR 0 1
36797: PPUSH
36798: CALL 36910 0 1
// continue ;
36802: GO 36684
// end ; HackCheckCapturedStatus ( i ) ;
36804: LD_VAR 0 1
36808: PPUSH
36809: CALL 37353 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
36813: LD_ADDR_VAR 0 2
36817: PUSH
36818: LD_INT 81
36820: PUSH
36821: LD_VAR 0 1
36825: PPUSH
36826: CALL_OW 255
36830: PUSH
36831: EMPTY
36832: LIST
36833: LIST
36834: PUSH
36835: LD_INT 33
36837: PUSH
36838: LD_INT 3
36840: PUSH
36841: EMPTY
36842: LIST
36843: LIST
36844: PUSH
36845: LD_INT 91
36847: PUSH
36848: LD_VAR 0 1
36852: PUSH
36853: LD_EXP 126
36857: PUSH
36858: EMPTY
36859: LIST
36860: LIST
36861: LIST
36862: PUSH
36863: LD_INT 50
36865: PUSH
36866: EMPTY
36867: LIST
36868: PUSH
36869: EMPTY
36870: LIST
36871: LIST
36872: LIST
36873: LIST
36874: PPUSH
36875: CALL_OW 69
36879: ST_TO_ADDR
// if not tmp then
36880: LD_VAR 0 2
36884: NOT
36885: IFFALSE 36889
// continue ;
36887: GO 36684
// HackLink ( i , tmp ) ;
36889: LD_VAR 0 1
36893: PPUSH
36894: LD_VAR 0 2
36898: PPUSH
36899: CALL 37046 0 2
// end ;
36903: GO 36684
36905: POP
36906: POP
// end ;
36907: PPOPN 2
36909: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36910: LD_INT 0
36912: PPUSH
36913: PPUSH
36914: PPUSH
// if not hack in hackTanks then
36915: LD_VAR 0 1
36919: PUSH
36920: LD_EXP 123
36924: IN
36925: NOT
36926: IFFALSE 36930
// exit ;
36928: GO 37041
// index := GetElementIndex ( hackTanks , hack ) ;
36930: LD_ADDR_VAR 0 4
36934: PUSH
36935: LD_EXP 123
36939: PPUSH
36940: LD_VAR 0 1
36944: PPUSH
36945: CALL 44658 0 2
36949: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
36950: LD_EXP 124
36954: PUSH
36955: LD_VAR 0 4
36959: ARRAY
36960: IFFALSE 37041
// begin for i in hackTanksCaptured [ index ] do
36962: LD_ADDR_VAR 0 3
36966: PUSH
36967: LD_EXP 124
36971: PUSH
36972: LD_VAR 0 4
36976: ARRAY
36977: PUSH
36978: FOR_IN
36979: IFFALSE 37005
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
36981: LD_VAR 0 3
36985: PUSH
36986: LD_INT 1
36988: ARRAY
36989: PPUSH
36990: LD_VAR 0 3
36994: PUSH
36995: LD_INT 2
36997: ARRAY
36998: PPUSH
36999: CALL_OW 235
37003: GO 36978
37005: POP
37006: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
37007: LD_ADDR_EXP 124
37011: PUSH
37012: LD_EXP 124
37016: PPUSH
37017: LD_VAR 0 4
37021: PPUSH
37022: EMPTY
37023: PPUSH
37024: CALL_OW 1
37028: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
37029: LD_VAR 0 1
37033: PPUSH
37034: LD_INT 0
37036: PPUSH
37037: CALL_OW 505
// end ; end ;
37041: LD_VAR 0 2
37045: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
37046: LD_INT 0
37048: PPUSH
37049: PPUSH
37050: PPUSH
// if not hack in hackTanks or not vehicles then
37051: LD_VAR 0 1
37055: PUSH
37056: LD_EXP 123
37060: IN
37061: NOT
37062: PUSH
37063: LD_VAR 0 2
37067: NOT
37068: OR
37069: IFFALSE 37073
// exit ;
37071: GO 37348
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
37073: LD_ADDR_VAR 0 2
37077: PUSH
37078: LD_VAR 0 1
37082: PPUSH
37083: LD_VAR 0 2
37087: PPUSH
37088: LD_INT 1
37090: PPUSH
37091: LD_INT 1
37093: PPUSH
37094: CALL 45308 0 4
37098: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
37099: LD_ADDR_VAR 0 5
37103: PUSH
37104: LD_EXP 123
37108: PPUSH
37109: LD_VAR 0 1
37113: PPUSH
37114: CALL 44658 0 2
37118: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
37119: LD_EXP 124
37123: PUSH
37124: LD_VAR 0 5
37128: ARRAY
37129: PUSH
37130: LD_EXP 125
37134: LESS
37135: IFFALSE 37324
// begin for i := 1 to vehicles do
37137: LD_ADDR_VAR 0 4
37141: PUSH
37142: DOUBLE
37143: LD_INT 1
37145: DEC
37146: ST_TO_ADDR
37147: LD_VAR 0 2
37151: PUSH
37152: FOR_TO
37153: IFFALSE 37322
// begin if hackTanksCaptured [ index ] = hackLimit then
37155: LD_EXP 124
37159: PUSH
37160: LD_VAR 0 5
37164: ARRAY
37165: PUSH
37166: LD_EXP 125
37170: EQUAL
37171: IFFALSE 37175
// break ;
37173: GO 37322
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
37175: LD_ADDR_EXP 127
37179: PUSH
37180: LD_EXP 127
37184: PPUSH
37185: LD_VAR 0 5
37189: PPUSH
37190: LD_EXP 127
37194: PUSH
37195: LD_VAR 0 5
37199: ARRAY
37200: PUSH
37201: LD_INT 1
37203: PLUS
37204: PPUSH
37205: CALL_OW 1
37209: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
37210: LD_ADDR_EXP 124
37214: PUSH
37215: LD_EXP 124
37219: PPUSH
37220: LD_VAR 0 5
37224: PUSH
37225: LD_EXP 124
37229: PUSH
37230: LD_VAR 0 5
37234: ARRAY
37235: PUSH
37236: LD_INT 1
37238: PLUS
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: PPUSH
37244: LD_VAR 0 2
37248: PUSH
37249: LD_VAR 0 4
37253: ARRAY
37254: PUSH
37255: LD_VAR 0 2
37259: PUSH
37260: LD_VAR 0 4
37264: ARRAY
37265: PPUSH
37266: CALL_OW 255
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: PPUSH
37275: CALL 44873 0 3
37279: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
37280: LD_VAR 0 2
37284: PUSH
37285: LD_VAR 0 4
37289: ARRAY
37290: PPUSH
37291: LD_VAR 0 1
37295: PPUSH
37296: CALL_OW 255
37300: PPUSH
37301: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
37305: LD_VAR 0 2
37309: PUSH
37310: LD_VAR 0 4
37314: ARRAY
37315: PPUSH
37316: CALL_OW 141
// end ;
37320: GO 37152
37322: POP
37323: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37324: LD_VAR 0 1
37328: PPUSH
37329: LD_EXP 124
37333: PUSH
37334: LD_VAR 0 5
37338: ARRAY
37339: PUSH
37340: LD_INT 0
37342: PLUS
37343: PPUSH
37344: CALL_OW 505
// end ;
37348: LD_VAR 0 3
37352: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
37353: LD_INT 0
37355: PPUSH
37356: PPUSH
37357: PPUSH
37358: PPUSH
// if not hack in hackTanks then
37359: LD_VAR 0 1
37363: PUSH
37364: LD_EXP 123
37368: IN
37369: NOT
37370: IFFALSE 37374
// exit ;
37372: GO 37614
// index := GetElementIndex ( hackTanks , hack ) ;
37374: LD_ADDR_VAR 0 4
37378: PUSH
37379: LD_EXP 123
37383: PPUSH
37384: LD_VAR 0 1
37388: PPUSH
37389: CALL 44658 0 2
37393: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
37394: LD_ADDR_VAR 0 3
37398: PUSH
37399: DOUBLE
37400: LD_EXP 124
37404: PUSH
37405: LD_VAR 0 4
37409: ARRAY
37410: INC
37411: ST_TO_ADDR
37412: LD_INT 1
37414: PUSH
37415: FOR_DOWNTO
37416: IFFALSE 37588
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
37418: LD_ADDR_VAR 0 5
37422: PUSH
37423: LD_EXP 124
37427: PUSH
37428: LD_VAR 0 4
37432: ARRAY
37433: PUSH
37434: LD_VAR 0 3
37438: ARRAY
37439: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
37440: LD_VAR 0 5
37444: PUSH
37445: LD_INT 1
37447: ARRAY
37448: PPUSH
37449: CALL_OW 302
37453: NOT
37454: PUSH
37455: LD_VAR 0 5
37459: PUSH
37460: LD_INT 1
37462: ARRAY
37463: PPUSH
37464: CALL_OW 255
37468: PUSH
37469: LD_VAR 0 1
37473: PPUSH
37474: CALL_OW 255
37478: NONEQUAL
37479: OR
37480: IFFALSE 37586
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
37482: LD_VAR 0 5
37486: PUSH
37487: LD_INT 1
37489: ARRAY
37490: PPUSH
37491: CALL_OW 305
37495: PUSH
37496: LD_VAR 0 5
37500: PUSH
37501: LD_INT 1
37503: ARRAY
37504: PPUSH
37505: CALL_OW 255
37509: PUSH
37510: LD_VAR 0 1
37514: PPUSH
37515: CALL_OW 255
37519: EQUAL
37520: AND
37521: IFFALSE 37545
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
37523: LD_VAR 0 5
37527: PUSH
37528: LD_INT 1
37530: ARRAY
37531: PPUSH
37532: LD_VAR 0 5
37536: PUSH
37537: LD_INT 2
37539: ARRAY
37540: PPUSH
37541: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
37545: LD_ADDR_EXP 124
37549: PUSH
37550: LD_EXP 124
37554: PPUSH
37555: LD_VAR 0 4
37559: PPUSH
37560: LD_EXP 124
37564: PUSH
37565: LD_VAR 0 4
37569: ARRAY
37570: PPUSH
37571: LD_VAR 0 3
37575: PPUSH
37576: CALL_OW 3
37580: PPUSH
37581: CALL_OW 1
37585: ST_TO_ADDR
// end ; end ;
37586: GO 37415
37588: POP
37589: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37590: LD_VAR 0 1
37594: PPUSH
37595: LD_EXP 124
37599: PUSH
37600: LD_VAR 0 4
37604: ARRAY
37605: PUSH
37606: LD_INT 0
37608: PLUS
37609: PPUSH
37610: CALL_OW 505
// end ;
37614: LD_VAR 0 2
37618: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
37619: LD_INT 0
37621: PPUSH
37622: PPUSH
37623: PPUSH
37624: PPUSH
// if not hack in hackTanks then
37625: LD_VAR 0 1
37629: PUSH
37630: LD_EXP 123
37634: IN
37635: NOT
37636: IFFALSE 37640
// exit ;
37638: GO 37725
// index := GetElementIndex ( hackTanks , hack ) ;
37640: LD_ADDR_VAR 0 5
37644: PUSH
37645: LD_EXP 123
37649: PPUSH
37650: LD_VAR 0 1
37654: PPUSH
37655: CALL 44658 0 2
37659: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
37660: LD_ADDR_VAR 0 4
37664: PUSH
37665: DOUBLE
37666: LD_INT 1
37668: DEC
37669: ST_TO_ADDR
37670: LD_EXP 124
37674: PUSH
37675: LD_VAR 0 5
37679: ARRAY
37680: PUSH
37681: FOR_TO
37682: IFFALSE 37723
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
37684: LD_EXP 124
37688: PUSH
37689: LD_VAR 0 5
37693: ARRAY
37694: PUSH
37695: LD_VAR 0 4
37699: ARRAY
37700: PUSH
37701: LD_INT 1
37703: ARRAY
37704: PUSH
37705: LD_VAR 0 2
37709: EQUAL
37710: IFFALSE 37721
// KillUnit ( vehicle ) ;
37712: LD_VAR 0 2
37716: PPUSH
37717: CALL_OW 66
37721: GO 37681
37723: POP
37724: POP
// end ;
37725: LD_VAR 0 3
37729: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
37730: LD_EXP 128
37734: NOT
37735: IFFALSE 37770
37737: GO 37739
37739: DISABLE
// begin initMiner := true ;
37740: LD_ADDR_EXP 128
37744: PUSH
37745: LD_INT 1
37747: ST_TO_ADDR
// minersList := [ ] ;
37748: LD_ADDR_EXP 129
37752: PUSH
37753: EMPTY
37754: ST_TO_ADDR
// minerMinesList := [ ] ;
37755: LD_ADDR_EXP 130
37759: PUSH
37760: EMPTY
37761: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
37762: LD_ADDR_EXP 131
37766: PUSH
37767: LD_INT 5
37769: ST_TO_ADDR
// end ;
37770: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
37771: LD_EXP 128
37775: PUSH
37776: LD_INT 34
37778: PUSH
37779: LD_INT 81
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: PPUSH
37786: CALL_OW 69
37790: AND
37791: IFFALSE 38252
37793: GO 37795
37795: DISABLE
37796: LD_INT 0
37798: PPUSH
37799: PPUSH
37800: PPUSH
37801: PPUSH
// begin enable ;
37802: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
37803: LD_ADDR_VAR 0 1
37807: PUSH
37808: LD_INT 34
37810: PUSH
37811: LD_INT 81
37813: PUSH
37814: EMPTY
37815: LIST
37816: LIST
37817: PPUSH
37818: CALL_OW 69
37822: PUSH
37823: FOR_IN
37824: IFFALSE 37896
// begin if not i in minersList then
37826: LD_VAR 0 1
37830: PUSH
37831: LD_EXP 129
37835: IN
37836: NOT
37837: IFFALSE 37894
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
37839: LD_ADDR_EXP 129
37843: PUSH
37844: LD_EXP 129
37848: PPUSH
37849: LD_EXP 129
37853: PUSH
37854: LD_INT 1
37856: PLUS
37857: PPUSH
37858: LD_VAR 0 1
37862: PPUSH
37863: CALL_OW 1
37867: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
37868: LD_ADDR_EXP 130
37872: PUSH
37873: LD_EXP 130
37877: PPUSH
37878: LD_EXP 130
37882: PUSH
37883: LD_INT 1
37885: PLUS
37886: PPUSH
37887: EMPTY
37888: PPUSH
37889: CALL_OW 1
37893: ST_TO_ADDR
// end end ;
37894: GO 37823
37896: POP
37897: POP
// for i := minerMinesList downto 1 do
37898: LD_ADDR_VAR 0 1
37902: PUSH
37903: DOUBLE
37904: LD_EXP 130
37908: INC
37909: ST_TO_ADDR
37910: LD_INT 1
37912: PUSH
37913: FOR_DOWNTO
37914: IFFALSE 38250
// begin if IsLive ( minersList [ i ] ) then
37916: LD_EXP 129
37920: PUSH
37921: LD_VAR 0 1
37925: ARRAY
37926: PPUSH
37927: CALL_OW 300
37931: IFFALSE 37959
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
37933: LD_EXP 129
37937: PUSH
37938: LD_VAR 0 1
37942: ARRAY
37943: PPUSH
37944: LD_EXP 130
37948: PUSH
37949: LD_VAR 0 1
37953: ARRAY
37954: PPUSH
37955: CALL_OW 505
// if not minerMinesList [ i ] then
37959: LD_EXP 130
37963: PUSH
37964: LD_VAR 0 1
37968: ARRAY
37969: NOT
37970: IFFALSE 37974
// continue ;
37972: GO 37913
// for j := minerMinesList [ i ] downto 1 do
37974: LD_ADDR_VAR 0 2
37978: PUSH
37979: DOUBLE
37980: LD_EXP 130
37984: PUSH
37985: LD_VAR 0 1
37989: ARRAY
37990: INC
37991: ST_TO_ADDR
37992: LD_INT 1
37994: PUSH
37995: FOR_DOWNTO
37996: IFFALSE 38246
// begin side := GetSide ( minersList [ i ] ) ;
37998: LD_ADDR_VAR 0 3
38002: PUSH
38003: LD_EXP 129
38007: PUSH
38008: LD_VAR 0 1
38012: ARRAY
38013: PPUSH
38014: CALL_OW 255
38018: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
38019: LD_ADDR_VAR 0 4
38023: PUSH
38024: LD_EXP 130
38028: PUSH
38029: LD_VAR 0 1
38033: ARRAY
38034: PUSH
38035: LD_VAR 0 2
38039: ARRAY
38040: PUSH
38041: LD_INT 1
38043: ARRAY
38044: PPUSH
38045: LD_EXP 130
38049: PUSH
38050: LD_VAR 0 1
38054: ARRAY
38055: PUSH
38056: LD_VAR 0 2
38060: ARRAY
38061: PUSH
38062: LD_INT 2
38064: ARRAY
38065: PPUSH
38066: CALL_OW 428
38070: ST_TO_ADDR
// if not tmp then
38071: LD_VAR 0 4
38075: NOT
38076: IFFALSE 38080
// continue ;
38078: GO 37995
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
38080: LD_VAR 0 4
38084: PUSH
38085: LD_INT 81
38087: PUSH
38088: LD_VAR 0 3
38092: PUSH
38093: EMPTY
38094: LIST
38095: LIST
38096: PPUSH
38097: CALL_OW 69
38101: IN
38102: PUSH
38103: LD_EXP 130
38107: PUSH
38108: LD_VAR 0 1
38112: ARRAY
38113: PUSH
38114: LD_VAR 0 2
38118: ARRAY
38119: PUSH
38120: LD_INT 1
38122: ARRAY
38123: PPUSH
38124: LD_EXP 130
38128: PUSH
38129: LD_VAR 0 1
38133: ARRAY
38134: PUSH
38135: LD_VAR 0 2
38139: ARRAY
38140: PUSH
38141: LD_INT 2
38143: ARRAY
38144: PPUSH
38145: CALL_OW 458
38149: AND
38150: IFFALSE 38244
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
38152: LD_EXP 130
38156: PUSH
38157: LD_VAR 0 1
38161: ARRAY
38162: PUSH
38163: LD_VAR 0 2
38167: ARRAY
38168: PUSH
38169: LD_INT 1
38171: ARRAY
38172: PPUSH
38173: LD_EXP 130
38177: PUSH
38178: LD_VAR 0 1
38182: ARRAY
38183: PUSH
38184: LD_VAR 0 2
38188: ARRAY
38189: PUSH
38190: LD_INT 2
38192: ARRAY
38193: PPUSH
38194: LD_VAR 0 3
38198: PPUSH
38199: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
38203: LD_ADDR_EXP 130
38207: PUSH
38208: LD_EXP 130
38212: PPUSH
38213: LD_VAR 0 1
38217: PPUSH
38218: LD_EXP 130
38222: PUSH
38223: LD_VAR 0 1
38227: ARRAY
38228: PPUSH
38229: LD_VAR 0 2
38233: PPUSH
38234: CALL_OW 3
38238: PPUSH
38239: CALL_OW 1
38243: ST_TO_ADDR
// end ; end ;
38244: GO 37995
38246: POP
38247: POP
// end ;
38248: GO 37913
38250: POP
38251: POP
// end ;
38252: PPOPN 4
38254: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
38255: LD_INT 0
38257: PPUSH
38258: PPUSH
// result := false ;
38259: LD_ADDR_VAR 0 4
38263: PUSH
38264: LD_INT 0
38266: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
38267: LD_VAR 0 1
38271: PPUSH
38272: CALL_OW 264
38276: PUSH
38277: LD_INT 81
38279: EQUAL
38280: NOT
38281: IFFALSE 38285
// exit ;
38283: GO 38525
// index := GetElementIndex ( minersList , unit ) ;
38285: LD_ADDR_VAR 0 5
38289: PUSH
38290: LD_EXP 129
38294: PPUSH
38295: LD_VAR 0 1
38299: PPUSH
38300: CALL 44658 0 2
38304: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
38305: LD_EXP 130
38309: PUSH
38310: LD_VAR 0 5
38314: ARRAY
38315: PUSH
38316: LD_EXP 131
38320: GREATEREQUAL
38321: IFFALSE 38325
// exit ;
38323: GO 38525
// ComMoveXY ( unit , x , y ) ;
38325: LD_VAR 0 1
38329: PPUSH
38330: LD_VAR 0 2
38334: PPUSH
38335: LD_VAR 0 3
38339: PPUSH
38340: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38344: LD_INT 35
38346: PPUSH
38347: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
38351: LD_VAR 0 1
38355: PPUSH
38356: LD_VAR 0 2
38360: PPUSH
38361: LD_VAR 0 3
38365: PPUSH
38366: CALL 76013 0 3
38370: NOT
38371: PUSH
38372: LD_VAR 0 1
38376: PPUSH
38377: CALL_OW 314
38381: AND
38382: IFFALSE 38386
// exit ;
38384: GO 38525
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
38386: LD_VAR 0 2
38390: PPUSH
38391: LD_VAR 0 3
38395: PPUSH
38396: CALL_OW 428
38400: PUSH
38401: LD_VAR 0 1
38405: EQUAL
38406: PUSH
38407: LD_VAR 0 1
38411: PPUSH
38412: CALL_OW 314
38416: NOT
38417: AND
38418: IFFALSE 38344
// PlaySoundXY ( x , y , PlantMine ) ;
38420: LD_VAR 0 2
38424: PPUSH
38425: LD_VAR 0 3
38429: PPUSH
38430: LD_STRING PlantMine
38432: PPUSH
38433: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
38437: LD_VAR 0 2
38441: PPUSH
38442: LD_VAR 0 3
38446: PPUSH
38447: LD_VAR 0 1
38451: PPUSH
38452: CALL_OW 255
38456: PPUSH
38457: LD_INT 0
38459: PPUSH
38460: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
38464: LD_ADDR_EXP 130
38468: PUSH
38469: LD_EXP 130
38473: PPUSH
38474: LD_VAR 0 5
38478: PUSH
38479: LD_EXP 130
38483: PUSH
38484: LD_VAR 0 5
38488: ARRAY
38489: PUSH
38490: LD_INT 1
38492: PLUS
38493: PUSH
38494: EMPTY
38495: LIST
38496: LIST
38497: PPUSH
38498: LD_VAR 0 2
38502: PUSH
38503: LD_VAR 0 3
38507: PUSH
38508: EMPTY
38509: LIST
38510: LIST
38511: PPUSH
38512: CALL 44873 0 3
38516: ST_TO_ADDR
// result := true ;
38517: LD_ADDR_VAR 0 4
38521: PUSH
38522: LD_INT 1
38524: ST_TO_ADDR
// end ;
38525: LD_VAR 0 4
38529: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
38530: LD_INT 0
38532: PPUSH
38533: PPUSH
38534: PPUSH
// if not unit in minersList then
38535: LD_VAR 0 1
38539: PUSH
38540: LD_EXP 129
38544: IN
38545: NOT
38546: IFFALSE 38550
// exit ;
38548: GO 38942
// index := GetElementIndex ( minersList , unit ) ;
38550: LD_ADDR_VAR 0 6
38554: PUSH
38555: LD_EXP 129
38559: PPUSH
38560: LD_VAR 0 1
38564: PPUSH
38565: CALL 44658 0 2
38569: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
38570: LD_ADDR_VAR 0 5
38574: PUSH
38575: DOUBLE
38576: LD_EXP 130
38580: PUSH
38581: LD_VAR 0 6
38585: ARRAY
38586: INC
38587: ST_TO_ADDR
38588: LD_INT 1
38590: PUSH
38591: FOR_DOWNTO
38592: IFFALSE 38753
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
38594: LD_EXP 130
38598: PUSH
38599: LD_VAR 0 6
38603: ARRAY
38604: PUSH
38605: LD_VAR 0 5
38609: ARRAY
38610: PUSH
38611: LD_INT 1
38613: ARRAY
38614: PUSH
38615: LD_VAR 0 2
38619: EQUAL
38620: PUSH
38621: LD_EXP 130
38625: PUSH
38626: LD_VAR 0 6
38630: ARRAY
38631: PUSH
38632: LD_VAR 0 5
38636: ARRAY
38637: PUSH
38638: LD_INT 2
38640: ARRAY
38641: PUSH
38642: LD_VAR 0 3
38646: EQUAL
38647: AND
38648: IFFALSE 38751
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38650: LD_EXP 130
38654: PUSH
38655: LD_VAR 0 6
38659: ARRAY
38660: PUSH
38661: LD_VAR 0 5
38665: ARRAY
38666: PUSH
38667: LD_INT 1
38669: ARRAY
38670: PPUSH
38671: LD_EXP 130
38675: PUSH
38676: LD_VAR 0 6
38680: ARRAY
38681: PUSH
38682: LD_VAR 0 5
38686: ARRAY
38687: PUSH
38688: LD_INT 2
38690: ARRAY
38691: PPUSH
38692: LD_VAR 0 1
38696: PPUSH
38697: CALL_OW 255
38701: PPUSH
38702: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38706: LD_ADDR_EXP 130
38710: PUSH
38711: LD_EXP 130
38715: PPUSH
38716: LD_VAR 0 6
38720: PPUSH
38721: LD_EXP 130
38725: PUSH
38726: LD_VAR 0 6
38730: ARRAY
38731: PPUSH
38732: LD_VAR 0 5
38736: PPUSH
38737: CALL_OW 3
38741: PPUSH
38742: CALL_OW 1
38746: ST_TO_ADDR
// exit ;
38747: POP
38748: POP
38749: GO 38942
// end ; end ;
38751: GO 38591
38753: POP
38754: POP
// for i := minerMinesList [ index ] downto 1 do
38755: LD_ADDR_VAR 0 5
38759: PUSH
38760: DOUBLE
38761: LD_EXP 130
38765: PUSH
38766: LD_VAR 0 6
38770: ARRAY
38771: INC
38772: ST_TO_ADDR
38773: LD_INT 1
38775: PUSH
38776: FOR_DOWNTO
38777: IFFALSE 38940
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
38779: LD_EXP 130
38783: PUSH
38784: LD_VAR 0 6
38788: ARRAY
38789: PUSH
38790: LD_VAR 0 5
38794: ARRAY
38795: PUSH
38796: LD_INT 1
38798: ARRAY
38799: PPUSH
38800: LD_EXP 130
38804: PUSH
38805: LD_VAR 0 6
38809: ARRAY
38810: PUSH
38811: LD_VAR 0 5
38815: ARRAY
38816: PUSH
38817: LD_INT 2
38819: ARRAY
38820: PPUSH
38821: LD_VAR 0 2
38825: PPUSH
38826: LD_VAR 0 3
38830: PPUSH
38831: CALL_OW 298
38835: PUSH
38836: LD_INT 6
38838: LESS
38839: IFFALSE 38938
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38841: LD_EXP 130
38845: PUSH
38846: LD_VAR 0 6
38850: ARRAY
38851: PUSH
38852: LD_VAR 0 5
38856: ARRAY
38857: PUSH
38858: LD_INT 1
38860: ARRAY
38861: PPUSH
38862: LD_EXP 130
38866: PUSH
38867: LD_VAR 0 6
38871: ARRAY
38872: PUSH
38873: LD_VAR 0 5
38877: ARRAY
38878: PUSH
38879: LD_INT 2
38881: ARRAY
38882: PPUSH
38883: LD_VAR 0 1
38887: PPUSH
38888: CALL_OW 255
38892: PPUSH
38893: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38897: LD_ADDR_EXP 130
38901: PUSH
38902: LD_EXP 130
38906: PPUSH
38907: LD_VAR 0 6
38911: PPUSH
38912: LD_EXP 130
38916: PUSH
38917: LD_VAR 0 6
38921: ARRAY
38922: PPUSH
38923: LD_VAR 0 5
38927: PPUSH
38928: CALL_OW 3
38932: PPUSH
38933: CALL_OW 1
38937: ST_TO_ADDR
// end ; end ;
38938: GO 38776
38940: POP
38941: POP
// end ;
38942: LD_VAR 0 4
38946: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
38947: LD_INT 0
38949: PPUSH
38950: PPUSH
38951: PPUSH
38952: PPUSH
38953: PPUSH
38954: PPUSH
38955: PPUSH
38956: PPUSH
38957: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
38958: LD_VAR 0 1
38962: PPUSH
38963: CALL_OW 264
38967: PUSH
38968: LD_INT 81
38970: EQUAL
38971: NOT
38972: PUSH
38973: LD_VAR 0 1
38977: PUSH
38978: LD_EXP 129
38982: IN
38983: NOT
38984: OR
38985: IFFALSE 38989
// exit ;
38987: GO 39311
// index := GetElementIndex ( minersList , unit ) ;
38989: LD_ADDR_VAR 0 6
38993: PUSH
38994: LD_EXP 129
38998: PPUSH
38999: LD_VAR 0 1
39003: PPUSH
39004: CALL 44658 0 2
39008: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
39009: LD_ADDR_VAR 0 8
39013: PUSH
39014: LD_EXP 131
39018: PUSH
39019: LD_EXP 130
39023: PUSH
39024: LD_VAR 0 6
39028: ARRAY
39029: MINUS
39030: ST_TO_ADDR
// if not minesFreeAmount then
39031: LD_VAR 0 8
39035: NOT
39036: IFFALSE 39040
// exit ;
39038: GO 39311
// tmp := [ ] ;
39040: LD_ADDR_VAR 0 7
39044: PUSH
39045: EMPTY
39046: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
39047: LD_ADDR_VAR 0 5
39051: PUSH
39052: DOUBLE
39053: LD_INT 1
39055: DEC
39056: ST_TO_ADDR
39057: LD_VAR 0 8
39061: PUSH
39062: FOR_TO
39063: IFFALSE 39258
// begin _d := rand ( 0 , 5 ) ;
39065: LD_ADDR_VAR 0 11
39069: PUSH
39070: LD_INT 0
39072: PPUSH
39073: LD_INT 5
39075: PPUSH
39076: CALL_OW 12
39080: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
39081: LD_ADDR_VAR 0 12
39085: PUSH
39086: LD_INT 2
39088: PPUSH
39089: LD_INT 6
39091: PPUSH
39092: CALL_OW 12
39096: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
39097: LD_ADDR_VAR 0 9
39101: PUSH
39102: LD_VAR 0 2
39106: PPUSH
39107: LD_VAR 0 11
39111: PPUSH
39112: LD_VAR 0 12
39116: PPUSH
39117: CALL_OW 272
39121: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
39122: LD_ADDR_VAR 0 10
39126: PUSH
39127: LD_VAR 0 3
39131: PPUSH
39132: LD_VAR 0 11
39136: PPUSH
39137: LD_VAR 0 12
39141: PPUSH
39142: CALL_OW 273
39146: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
39147: LD_VAR 0 9
39151: PPUSH
39152: LD_VAR 0 10
39156: PPUSH
39157: CALL_OW 488
39161: PUSH
39162: LD_VAR 0 9
39166: PUSH
39167: LD_VAR 0 10
39171: PUSH
39172: EMPTY
39173: LIST
39174: LIST
39175: PUSH
39176: LD_VAR 0 7
39180: IN
39181: NOT
39182: AND
39183: PUSH
39184: LD_VAR 0 9
39188: PPUSH
39189: LD_VAR 0 10
39193: PPUSH
39194: CALL_OW 458
39198: NOT
39199: AND
39200: IFFALSE 39242
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
39202: LD_ADDR_VAR 0 7
39206: PUSH
39207: LD_VAR 0 7
39211: PPUSH
39212: LD_VAR 0 7
39216: PUSH
39217: LD_INT 1
39219: PLUS
39220: PPUSH
39221: LD_VAR 0 9
39225: PUSH
39226: LD_VAR 0 10
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: PPUSH
39235: CALL_OW 1
39239: ST_TO_ADDR
39240: GO 39256
// i := i - 1 ;
39242: LD_ADDR_VAR 0 5
39246: PUSH
39247: LD_VAR 0 5
39251: PUSH
39252: LD_INT 1
39254: MINUS
39255: ST_TO_ADDR
// end ;
39256: GO 39062
39258: POP
39259: POP
// for i in tmp do
39260: LD_ADDR_VAR 0 5
39264: PUSH
39265: LD_VAR 0 7
39269: PUSH
39270: FOR_IN
39271: IFFALSE 39309
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
39273: LD_VAR 0 1
39277: PPUSH
39278: LD_VAR 0 5
39282: PUSH
39283: LD_INT 1
39285: ARRAY
39286: PPUSH
39287: LD_VAR 0 5
39291: PUSH
39292: LD_INT 2
39294: ARRAY
39295: PPUSH
39296: CALL 38255 0 3
39300: NOT
39301: IFFALSE 39307
// exit ;
39303: POP
39304: POP
39305: GO 39311
39307: GO 39270
39309: POP
39310: POP
// end ;
39311: LD_VAR 0 4
39315: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
39316: LD_INT 0
39318: PPUSH
39319: PPUSH
39320: PPUSH
39321: PPUSH
39322: PPUSH
39323: PPUSH
39324: PPUSH
// if not GetClass ( unit ) = class_sniper then
39325: LD_VAR 0 1
39329: PPUSH
39330: CALL_OW 257
39334: PUSH
39335: LD_INT 5
39337: EQUAL
39338: NOT
39339: IFFALSE 39343
// exit ;
39341: GO 39731
// dist := 8 ;
39343: LD_ADDR_VAR 0 5
39347: PUSH
39348: LD_INT 8
39350: ST_TO_ADDR
// viewRange := 12 ;
39351: LD_ADDR_VAR 0 7
39355: PUSH
39356: LD_INT 12
39358: ST_TO_ADDR
// side := GetSide ( unit ) ;
39359: LD_ADDR_VAR 0 6
39363: PUSH
39364: LD_VAR 0 1
39368: PPUSH
39369: CALL_OW 255
39373: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
39374: LD_INT 61
39376: PPUSH
39377: LD_VAR 0 6
39381: PPUSH
39382: CALL_OW 321
39386: PUSH
39387: LD_INT 2
39389: EQUAL
39390: IFFALSE 39400
// viewRange := 16 ;
39392: LD_ADDR_VAR 0 7
39396: PUSH
39397: LD_INT 16
39399: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
39400: LD_VAR 0 1
39404: PPUSH
39405: LD_VAR 0 2
39409: PPUSH
39410: LD_VAR 0 3
39414: PPUSH
39415: CALL_OW 297
39419: PUSH
39420: LD_VAR 0 5
39424: GREATER
39425: IFFALSE 39504
// begin ComMoveXY ( unit , x , y ) ;
39427: LD_VAR 0 1
39431: PPUSH
39432: LD_VAR 0 2
39436: PPUSH
39437: LD_VAR 0 3
39441: PPUSH
39442: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39446: LD_INT 35
39448: PPUSH
39449: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
39453: LD_VAR 0 1
39457: PPUSH
39458: LD_VAR 0 2
39462: PPUSH
39463: LD_VAR 0 3
39467: PPUSH
39468: CALL 76013 0 3
39472: NOT
39473: IFFALSE 39477
// exit ;
39475: GO 39731
// until GetDistUnitXY ( unit , x , y ) < dist ;
39477: LD_VAR 0 1
39481: PPUSH
39482: LD_VAR 0 2
39486: PPUSH
39487: LD_VAR 0 3
39491: PPUSH
39492: CALL_OW 297
39496: PUSH
39497: LD_VAR 0 5
39501: LESS
39502: IFFALSE 39446
// end ; ComTurnXY ( unit , x , y ) ;
39504: LD_VAR 0 1
39508: PPUSH
39509: LD_VAR 0 2
39513: PPUSH
39514: LD_VAR 0 3
39518: PPUSH
39519: CALL_OW 118
// wait ( 5 ) ;
39523: LD_INT 5
39525: PPUSH
39526: CALL_OW 67
// _d := GetDir ( unit ) ;
39530: LD_ADDR_VAR 0 10
39534: PUSH
39535: LD_VAR 0 1
39539: PPUSH
39540: CALL_OW 254
39544: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
39545: LD_ADDR_VAR 0 8
39549: PUSH
39550: LD_VAR 0 1
39554: PPUSH
39555: CALL_OW 250
39559: PPUSH
39560: LD_VAR 0 10
39564: PPUSH
39565: LD_VAR 0 5
39569: PPUSH
39570: CALL_OW 272
39574: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
39575: LD_ADDR_VAR 0 9
39579: PUSH
39580: LD_VAR 0 1
39584: PPUSH
39585: CALL_OW 251
39589: PPUSH
39590: LD_VAR 0 10
39594: PPUSH
39595: LD_VAR 0 5
39599: PPUSH
39600: CALL_OW 273
39604: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39605: LD_VAR 0 8
39609: PPUSH
39610: LD_VAR 0 9
39614: PPUSH
39615: CALL_OW 488
39619: NOT
39620: IFFALSE 39624
// exit ;
39622: GO 39731
// ComAnimCustom ( unit , 1 ) ;
39624: LD_VAR 0 1
39628: PPUSH
39629: LD_INT 1
39631: PPUSH
39632: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
39636: LD_VAR 0 8
39640: PPUSH
39641: LD_VAR 0 9
39645: PPUSH
39646: LD_VAR 0 6
39650: PPUSH
39651: LD_VAR 0 7
39655: PPUSH
39656: CALL_OW 330
// repeat wait ( 1 ) ;
39660: LD_INT 1
39662: PPUSH
39663: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
39667: LD_VAR 0 1
39671: PPUSH
39672: CALL_OW 316
39676: PUSH
39677: LD_VAR 0 1
39681: PPUSH
39682: CALL_OW 314
39686: OR
39687: PUSH
39688: LD_VAR 0 1
39692: PPUSH
39693: CALL_OW 302
39697: NOT
39698: OR
39699: PUSH
39700: LD_VAR 0 1
39704: PPUSH
39705: CALL_OW 301
39709: OR
39710: IFFALSE 39660
// RemoveSeeing ( _x , _y , side ) ;
39712: LD_VAR 0 8
39716: PPUSH
39717: LD_VAR 0 9
39721: PPUSH
39722: LD_VAR 0 6
39726: PPUSH
39727: CALL_OW 331
// end ; end_of_file
39731: LD_VAR 0 4
39735: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
39736: LD_INT 0
39738: PPUSH
39739: PPUSH
// if exist_mode then
39740: LD_VAR 0 2
39744: IFFALSE 39769
// unit := CreateCharacter ( prefix & ident ) else
39746: LD_ADDR_VAR 0 5
39750: PUSH
39751: LD_VAR 0 3
39755: PUSH
39756: LD_VAR 0 1
39760: STR
39761: PPUSH
39762: CALL_OW 34
39766: ST_TO_ADDR
39767: GO 39784
// unit := NewCharacter ( ident ) ;
39769: LD_ADDR_VAR 0 5
39773: PUSH
39774: LD_VAR 0 1
39778: PPUSH
39779: CALL_OW 25
39783: ST_TO_ADDR
// result := unit ;
39784: LD_ADDR_VAR 0 4
39788: PUSH
39789: LD_VAR 0 5
39793: ST_TO_ADDR
// end ;
39794: LD_VAR 0 4
39798: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
39799: LD_INT 0
39801: PPUSH
39802: PPUSH
// if not side or not nation then
39803: LD_VAR 0 1
39807: NOT
39808: PUSH
39809: LD_VAR 0 2
39813: NOT
39814: OR
39815: IFFALSE 39819
// exit ;
39817: GO 40587
// case nation of nation_american :
39819: LD_VAR 0 2
39823: PUSH
39824: LD_INT 1
39826: DOUBLE
39827: EQUAL
39828: IFTRUE 39832
39830: GO 40046
39832: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
39833: LD_ADDR_VAR 0 4
39837: PUSH
39838: LD_INT 35
39840: PUSH
39841: LD_INT 45
39843: PUSH
39844: LD_INT 46
39846: PUSH
39847: LD_INT 47
39849: PUSH
39850: LD_INT 82
39852: PUSH
39853: LD_INT 83
39855: PUSH
39856: LD_INT 84
39858: PUSH
39859: LD_INT 85
39861: PUSH
39862: LD_INT 86
39864: PUSH
39865: LD_INT 1
39867: PUSH
39868: LD_INT 2
39870: PUSH
39871: LD_INT 6
39873: PUSH
39874: LD_INT 15
39876: PUSH
39877: LD_INT 16
39879: PUSH
39880: LD_INT 7
39882: PUSH
39883: LD_INT 12
39885: PUSH
39886: LD_INT 13
39888: PUSH
39889: LD_INT 10
39891: PUSH
39892: LD_INT 14
39894: PUSH
39895: LD_INT 20
39897: PUSH
39898: LD_INT 21
39900: PUSH
39901: LD_INT 22
39903: PUSH
39904: LD_INT 25
39906: PUSH
39907: LD_INT 32
39909: PUSH
39910: LD_INT 27
39912: PUSH
39913: LD_INT 36
39915: PUSH
39916: LD_INT 69
39918: PUSH
39919: LD_INT 39
39921: PUSH
39922: LD_INT 34
39924: PUSH
39925: LD_INT 40
39927: PUSH
39928: LD_INT 48
39930: PUSH
39931: LD_INT 49
39933: PUSH
39934: LD_INT 50
39936: PUSH
39937: LD_INT 51
39939: PUSH
39940: LD_INT 52
39942: PUSH
39943: LD_INT 53
39945: PUSH
39946: LD_INT 54
39948: PUSH
39949: LD_INT 55
39951: PUSH
39952: LD_INT 56
39954: PUSH
39955: LD_INT 57
39957: PUSH
39958: LD_INT 58
39960: PUSH
39961: LD_INT 59
39963: PUSH
39964: LD_INT 60
39966: PUSH
39967: LD_INT 61
39969: PUSH
39970: LD_INT 62
39972: PUSH
39973: LD_INT 80
39975: PUSH
39976: LD_INT 82
39978: PUSH
39979: LD_INT 83
39981: PUSH
39982: LD_INT 84
39984: PUSH
39985: LD_INT 85
39987: PUSH
39988: LD_INT 86
39990: PUSH
39991: EMPTY
39992: LIST
39993: LIST
39994: LIST
39995: LIST
39996: LIST
39997: LIST
39998: LIST
39999: LIST
40000: LIST
40001: LIST
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: LIST
40020: LIST
40021: LIST
40022: LIST
40023: LIST
40024: LIST
40025: LIST
40026: LIST
40027: LIST
40028: LIST
40029: LIST
40030: LIST
40031: LIST
40032: LIST
40033: LIST
40034: LIST
40035: LIST
40036: LIST
40037: LIST
40038: LIST
40039: LIST
40040: LIST
40041: LIST
40042: LIST
40043: ST_TO_ADDR
40044: GO 40511
40046: LD_INT 2
40048: DOUBLE
40049: EQUAL
40050: IFTRUE 40054
40052: GO 40280
40054: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
40055: LD_ADDR_VAR 0 4
40059: PUSH
40060: LD_INT 35
40062: PUSH
40063: LD_INT 45
40065: PUSH
40066: LD_INT 46
40068: PUSH
40069: LD_INT 47
40071: PUSH
40072: LD_INT 82
40074: PUSH
40075: LD_INT 83
40077: PUSH
40078: LD_INT 84
40080: PUSH
40081: LD_INT 85
40083: PUSH
40084: LD_INT 87
40086: PUSH
40087: LD_INT 70
40089: PUSH
40090: LD_INT 1
40092: PUSH
40093: LD_INT 11
40095: PUSH
40096: LD_INT 3
40098: PUSH
40099: LD_INT 4
40101: PUSH
40102: LD_INT 5
40104: PUSH
40105: LD_INT 6
40107: PUSH
40108: LD_INT 15
40110: PUSH
40111: LD_INT 18
40113: PUSH
40114: LD_INT 7
40116: PUSH
40117: LD_INT 17
40119: PUSH
40120: LD_INT 8
40122: PUSH
40123: LD_INT 20
40125: PUSH
40126: LD_INT 21
40128: PUSH
40129: LD_INT 22
40131: PUSH
40132: LD_INT 72
40134: PUSH
40135: LD_INT 26
40137: PUSH
40138: LD_INT 69
40140: PUSH
40141: LD_INT 39
40143: PUSH
40144: LD_INT 40
40146: PUSH
40147: LD_INT 41
40149: PUSH
40150: LD_INT 42
40152: PUSH
40153: LD_INT 43
40155: PUSH
40156: LD_INT 48
40158: PUSH
40159: LD_INT 49
40161: PUSH
40162: LD_INT 50
40164: PUSH
40165: LD_INT 51
40167: PUSH
40168: LD_INT 52
40170: PUSH
40171: LD_INT 53
40173: PUSH
40174: LD_INT 54
40176: PUSH
40177: LD_INT 55
40179: PUSH
40180: LD_INT 56
40182: PUSH
40183: LD_INT 60
40185: PUSH
40186: LD_INT 61
40188: PUSH
40189: LD_INT 62
40191: PUSH
40192: LD_INT 66
40194: PUSH
40195: LD_INT 67
40197: PUSH
40198: LD_INT 68
40200: PUSH
40201: LD_INT 81
40203: PUSH
40204: LD_INT 82
40206: PUSH
40207: LD_INT 83
40209: PUSH
40210: LD_INT 84
40212: PUSH
40213: LD_INT 85
40215: PUSH
40216: LD_INT 87
40218: PUSH
40219: LD_INT 88
40221: PUSH
40222: EMPTY
40223: LIST
40224: LIST
40225: LIST
40226: LIST
40227: LIST
40228: LIST
40229: LIST
40230: LIST
40231: LIST
40232: LIST
40233: LIST
40234: LIST
40235: LIST
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: LIST
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: LIST
40256: LIST
40257: LIST
40258: LIST
40259: LIST
40260: LIST
40261: LIST
40262: LIST
40263: LIST
40264: LIST
40265: LIST
40266: LIST
40267: LIST
40268: LIST
40269: LIST
40270: LIST
40271: LIST
40272: LIST
40273: LIST
40274: LIST
40275: LIST
40276: LIST
40277: ST_TO_ADDR
40278: GO 40511
40280: LD_INT 3
40282: DOUBLE
40283: EQUAL
40284: IFTRUE 40288
40286: GO 40510
40288: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
40289: LD_ADDR_VAR 0 4
40293: PUSH
40294: LD_INT 46
40296: PUSH
40297: LD_INT 47
40299: PUSH
40300: LD_INT 1
40302: PUSH
40303: LD_INT 2
40305: PUSH
40306: LD_INT 82
40308: PUSH
40309: LD_INT 83
40311: PUSH
40312: LD_INT 84
40314: PUSH
40315: LD_INT 85
40317: PUSH
40318: LD_INT 86
40320: PUSH
40321: LD_INT 11
40323: PUSH
40324: LD_INT 9
40326: PUSH
40327: LD_INT 20
40329: PUSH
40330: LD_INT 19
40332: PUSH
40333: LD_INT 21
40335: PUSH
40336: LD_INT 24
40338: PUSH
40339: LD_INT 22
40341: PUSH
40342: LD_INT 25
40344: PUSH
40345: LD_INT 28
40347: PUSH
40348: LD_INT 29
40350: PUSH
40351: LD_INT 30
40353: PUSH
40354: LD_INT 31
40356: PUSH
40357: LD_INT 37
40359: PUSH
40360: LD_INT 38
40362: PUSH
40363: LD_INT 32
40365: PUSH
40366: LD_INT 27
40368: PUSH
40369: LD_INT 33
40371: PUSH
40372: LD_INT 69
40374: PUSH
40375: LD_INT 39
40377: PUSH
40378: LD_INT 34
40380: PUSH
40381: LD_INT 40
40383: PUSH
40384: LD_INT 71
40386: PUSH
40387: LD_INT 23
40389: PUSH
40390: LD_INT 44
40392: PUSH
40393: LD_INT 48
40395: PUSH
40396: LD_INT 49
40398: PUSH
40399: LD_INT 50
40401: PUSH
40402: LD_INT 51
40404: PUSH
40405: LD_INT 52
40407: PUSH
40408: LD_INT 53
40410: PUSH
40411: LD_INT 54
40413: PUSH
40414: LD_INT 55
40416: PUSH
40417: LD_INT 56
40419: PUSH
40420: LD_INT 57
40422: PUSH
40423: LD_INT 58
40425: PUSH
40426: LD_INT 59
40428: PUSH
40429: LD_INT 63
40431: PUSH
40432: LD_INT 64
40434: PUSH
40435: LD_INT 65
40437: PUSH
40438: LD_INT 82
40440: PUSH
40441: LD_INT 83
40443: PUSH
40444: LD_INT 84
40446: PUSH
40447: LD_INT 85
40449: PUSH
40450: LD_INT 86
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: LIST
40457: LIST
40458: LIST
40459: LIST
40460: LIST
40461: LIST
40462: LIST
40463: LIST
40464: LIST
40465: LIST
40466: LIST
40467: LIST
40468: LIST
40469: LIST
40470: LIST
40471: LIST
40472: LIST
40473: LIST
40474: LIST
40475: LIST
40476: LIST
40477: LIST
40478: LIST
40479: LIST
40480: LIST
40481: LIST
40482: LIST
40483: LIST
40484: LIST
40485: LIST
40486: LIST
40487: LIST
40488: LIST
40489: LIST
40490: LIST
40491: LIST
40492: LIST
40493: LIST
40494: LIST
40495: LIST
40496: LIST
40497: LIST
40498: LIST
40499: LIST
40500: LIST
40501: LIST
40502: LIST
40503: LIST
40504: LIST
40505: LIST
40506: LIST
40507: ST_TO_ADDR
40508: GO 40511
40510: POP
// if state > - 1 and state < 3 then
40511: LD_VAR 0 3
40515: PUSH
40516: LD_INT 1
40518: NEG
40519: GREATER
40520: PUSH
40521: LD_VAR 0 3
40525: PUSH
40526: LD_INT 3
40528: LESS
40529: AND
40530: IFFALSE 40587
// for i in result do
40532: LD_ADDR_VAR 0 5
40536: PUSH
40537: LD_VAR 0 4
40541: PUSH
40542: FOR_IN
40543: IFFALSE 40585
// if GetTech ( i , side ) <> state then
40545: LD_VAR 0 5
40549: PPUSH
40550: LD_VAR 0 1
40554: PPUSH
40555: CALL_OW 321
40559: PUSH
40560: LD_VAR 0 3
40564: NONEQUAL
40565: IFFALSE 40583
// result := result diff i ;
40567: LD_ADDR_VAR 0 4
40571: PUSH
40572: LD_VAR 0 4
40576: PUSH
40577: LD_VAR 0 5
40581: DIFF
40582: ST_TO_ADDR
40583: GO 40542
40585: POP
40586: POP
// end ;
40587: LD_VAR 0 4
40591: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
40592: LD_INT 0
40594: PPUSH
40595: PPUSH
40596: PPUSH
// result := true ;
40597: LD_ADDR_VAR 0 3
40601: PUSH
40602: LD_INT 1
40604: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
40605: LD_ADDR_VAR 0 5
40609: PUSH
40610: LD_VAR 0 2
40614: PPUSH
40615: CALL_OW 480
40619: ST_TO_ADDR
// if not tmp then
40620: LD_VAR 0 5
40624: NOT
40625: IFFALSE 40629
// exit ;
40627: GO 40678
// for i in tmp do
40629: LD_ADDR_VAR 0 4
40633: PUSH
40634: LD_VAR 0 5
40638: PUSH
40639: FOR_IN
40640: IFFALSE 40676
// if GetTech ( i , side ) <> state_researched then
40642: LD_VAR 0 4
40646: PPUSH
40647: LD_VAR 0 1
40651: PPUSH
40652: CALL_OW 321
40656: PUSH
40657: LD_INT 2
40659: NONEQUAL
40660: IFFALSE 40674
// begin result := false ;
40662: LD_ADDR_VAR 0 3
40666: PUSH
40667: LD_INT 0
40669: ST_TO_ADDR
// exit ;
40670: POP
40671: POP
40672: GO 40678
// end ;
40674: GO 40639
40676: POP
40677: POP
// end ;
40678: LD_VAR 0 3
40682: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
40683: LD_INT 0
40685: PPUSH
40686: PPUSH
40687: PPUSH
40688: PPUSH
40689: PPUSH
40690: PPUSH
40691: PPUSH
40692: PPUSH
40693: PPUSH
40694: PPUSH
40695: PPUSH
40696: PPUSH
40697: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
40698: LD_VAR 0 1
40702: NOT
40703: PUSH
40704: LD_VAR 0 1
40708: PPUSH
40709: CALL_OW 257
40713: PUSH
40714: LD_INT 9
40716: NONEQUAL
40717: OR
40718: IFFALSE 40722
// exit ;
40720: GO 41295
// side := GetSide ( unit ) ;
40722: LD_ADDR_VAR 0 9
40726: PUSH
40727: LD_VAR 0 1
40731: PPUSH
40732: CALL_OW 255
40736: ST_TO_ADDR
// tech_space := tech_spacanom ;
40737: LD_ADDR_VAR 0 12
40741: PUSH
40742: LD_INT 29
40744: ST_TO_ADDR
// tech_time := tech_taurad ;
40745: LD_ADDR_VAR 0 13
40749: PUSH
40750: LD_INT 28
40752: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
40753: LD_ADDR_VAR 0 11
40757: PUSH
40758: LD_VAR 0 1
40762: PPUSH
40763: CALL_OW 310
40767: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
40768: LD_VAR 0 11
40772: PPUSH
40773: CALL_OW 247
40777: PUSH
40778: LD_INT 2
40780: EQUAL
40781: IFFALSE 40785
// exit ;
40783: GO 41295
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40785: LD_ADDR_VAR 0 8
40789: PUSH
40790: LD_INT 81
40792: PUSH
40793: LD_VAR 0 9
40797: PUSH
40798: EMPTY
40799: LIST
40800: LIST
40801: PUSH
40802: LD_INT 3
40804: PUSH
40805: LD_INT 21
40807: PUSH
40808: LD_INT 3
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: PPUSH
40823: CALL_OW 69
40827: ST_TO_ADDR
// if not tmp then
40828: LD_VAR 0 8
40832: NOT
40833: IFFALSE 40837
// exit ;
40835: GO 41295
// if in_unit then
40837: LD_VAR 0 11
40841: IFFALSE 40865
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
40843: LD_ADDR_VAR 0 10
40847: PUSH
40848: LD_VAR 0 8
40852: PPUSH
40853: LD_VAR 0 11
40857: PPUSH
40858: CALL_OW 74
40862: ST_TO_ADDR
40863: GO 40885
// enemy := NearestUnitToUnit ( tmp , unit ) ;
40865: LD_ADDR_VAR 0 10
40869: PUSH
40870: LD_VAR 0 8
40874: PPUSH
40875: LD_VAR 0 1
40879: PPUSH
40880: CALL_OW 74
40884: ST_TO_ADDR
// if not enemy then
40885: LD_VAR 0 10
40889: NOT
40890: IFFALSE 40894
// exit ;
40892: GO 41295
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
40894: LD_VAR 0 11
40898: PUSH
40899: LD_VAR 0 11
40903: PPUSH
40904: LD_VAR 0 10
40908: PPUSH
40909: CALL_OW 296
40913: PUSH
40914: LD_INT 13
40916: GREATER
40917: AND
40918: PUSH
40919: LD_VAR 0 1
40923: PPUSH
40924: LD_VAR 0 10
40928: PPUSH
40929: CALL_OW 296
40933: PUSH
40934: LD_INT 12
40936: GREATER
40937: OR
40938: IFFALSE 40942
// exit ;
40940: GO 41295
// missile := [ 1 ] ;
40942: LD_ADDR_VAR 0 14
40946: PUSH
40947: LD_INT 1
40949: PUSH
40950: EMPTY
40951: LIST
40952: ST_TO_ADDR
// if Researched ( side , tech_space ) then
40953: LD_VAR 0 9
40957: PPUSH
40958: LD_VAR 0 12
40962: PPUSH
40963: CALL_OW 325
40967: IFFALSE 40996
// missile := Replace ( missile , missile + 1 , 2 ) ;
40969: LD_ADDR_VAR 0 14
40973: PUSH
40974: LD_VAR 0 14
40978: PPUSH
40979: LD_VAR 0 14
40983: PUSH
40984: LD_INT 1
40986: PLUS
40987: PPUSH
40988: LD_INT 2
40990: PPUSH
40991: CALL_OW 1
40995: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
40996: LD_VAR 0 9
41000: PPUSH
41001: LD_VAR 0 13
41005: PPUSH
41006: CALL_OW 325
41010: PUSH
41011: LD_VAR 0 10
41015: PPUSH
41016: CALL_OW 255
41020: PPUSH
41021: LD_VAR 0 13
41025: PPUSH
41026: CALL_OW 325
41030: NOT
41031: AND
41032: IFFALSE 41061
// missile := Replace ( missile , missile + 1 , 3 ) ;
41034: LD_ADDR_VAR 0 14
41038: PUSH
41039: LD_VAR 0 14
41043: PPUSH
41044: LD_VAR 0 14
41048: PUSH
41049: LD_INT 1
41051: PLUS
41052: PPUSH
41053: LD_INT 3
41055: PPUSH
41056: CALL_OW 1
41060: ST_TO_ADDR
// if missile < 2 then
41061: LD_VAR 0 14
41065: PUSH
41066: LD_INT 2
41068: LESS
41069: IFFALSE 41073
// exit ;
41071: GO 41295
// x := GetX ( enemy ) ;
41073: LD_ADDR_VAR 0 4
41077: PUSH
41078: LD_VAR 0 10
41082: PPUSH
41083: CALL_OW 250
41087: ST_TO_ADDR
// y := GetY ( enemy ) ;
41088: LD_ADDR_VAR 0 5
41092: PUSH
41093: LD_VAR 0 10
41097: PPUSH
41098: CALL_OW 251
41102: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
41103: LD_ADDR_VAR 0 6
41107: PUSH
41108: LD_VAR 0 4
41112: PUSH
41113: LD_INT 1
41115: NEG
41116: PPUSH
41117: LD_INT 1
41119: PPUSH
41120: CALL_OW 12
41124: PLUS
41125: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
41126: LD_ADDR_VAR 0 7
41130: PUSH
41131: LD_VAR 0 5
41135: PUSH
41136: LD_INT 1
41138: NEG
41139: PPUSH
41140: LD_INT 1
41142: PPUSH
41143: CALL_OW 12
41147: PLUS
41148: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41149: LD_VAR 0 6
41153: PPUSH
41154: LD_VAR 0 7
41158: PPUSH
41159: CALL_OW 488
41163: NOT
41164: IFFALSE 41186
// begin _x := x ;
41166: LD_ADDR_VAR 0 6
41170: PUSH
41171: LD_VAR 0 4
41175: ST_TO_ADDR
// _y := y ;
41176: LD_ADDR_VAR 0 7
41180: PUSH
41181: LD_VAR 0 5
41185: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
41186: LD_ADDR_VAR 0 3
41190: PUSH
41191: LD_INT 1
41193: PPUSH
41194: LD_VAR 0 14
41198: PPUSH
41199: CALL_OW 12
41203: ST_TO_ADDR
// case i of 1 :
41204: LD_VAR 0 3
41208: PUSH
41209: LD_INT 1
41211: DOUBLE
41212: EQUAL
41213: IFTRUE 41217
41215: GO 41234
41217: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
41218: LD_VAR 0 1
41222: PPUSH
41223: LD_VAR 0 10
41227: PPUSH
41228: CALL_OW 115
41232: GO 41295
41234: LD_INT 2
41236: DOUBLE
41237: EQUAL
41238: IFTRUE 41242
41240: GO 41264
41242: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
41243: LD_VAR 0 1
41247: PPUSH
41248: LD_VAR 0 6
41252: PPUSH
41253: LD_VAR 0 7
41257: PPUSH
41258: CALL_OW 153
41262: GO 41295
41264: LD_INT 3
41266: DOUBLE
41267: EQUAL
41268: IFTRUE 41272
41270: GO 41294
41272: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
41273: LD_VAR 0 1
41277: PPUSH
41278: LD_VAR 0 6
41282: PPUSH
41283: LD_VAR 0 7
41287: PPUSH
41288: CALL_OW 154
41292: GO 41295
41294: POP
// end ;
41295: LD_VAR 0 2
41299: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
41300: LD_INT 0
41302: PPUSH
41303: PPUSH
41304: PPUSH
41305: PPUSH
41306: PPUSH
41307: PPUSH
// if not unit or not building then
41308: LD_VAR 0 1
41312: NOT
41313: PUSH
41314: LD_VAR 0 2
41318: NOT
41319: OR
41320: IFFALSE 41324
// exit ;
41322: GO 41482
// x := GetX ( building ) ;
41324: LD_ADDR_VAR 0 5
41328: PUSH
41329: LD_VAR 0 2
41333: PPUSH
41334: CALL_OW 250
41338: ST_TO_ADDR
// y := GetY ( building ) ;
41339: LD_ADDR_VAR 0 6
41343: PUSH
41344: LD_VAR 0 2
41348: PPUSH
41349: CALL_OW 251
41353: ST_TO_ADDR
// for i = 0 to 5 do
41354: LD_ADDR_VAR 0 4
41358: PUSH
41359: DOUBLE
41360: LD_INT 0
41362: DEC
41363: ST_TO_ADDR
41364: LD_INT 5
41366: PUSH
41367: FOR_TO
41368: IFFALSE 41480
// begin _x := ShiftX ( x , i , 3 ) ;
41370: LD_ADDR_VAR 0 7
41374: PUSH
41375: LD_VAR 0 5
41379: PPUSH
41380: LD_VAR 0 4
41384: PPUSH
41385: LD_INT 3
41387: PPUSH
41388: CALL_OW 272
41392: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
41393: LD_ADDR_VAR 0 8
41397: PUSH
41398: LD_VAR 0 6
41402: PPUSH
41403: LD_VAR 0 4
41407: PPUSH
41408: LD_INT 3
41410: PPUSH
41411: CALL_OW 273
41415: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41416: LD_VAR 0 7
41420: PPUSH
41421: LD_VAR 0 8
41425: PPUSH
41426: CALL_OW 488
41430: NOT
41431: IFFALSE 41435
// continue ;
41433: GO 41367
// if HexInfo ( _x , _y ) = 0 then
41435: LD_VAR 0 7
41439: PPUSH
41440: LD_VAR 0 8
41444: PPUSH
41445: CALL_OW 428
41449: PUSH
41450: LD_INT 0
41452: EQUAL
41453: IFFALSE 41478
// begin ComMoveXY ( unit , _x , _y ) ;
41455: LD_VAR 0 1
41459: PPUSH
41460: LD_VAR 0 7
41464: PPUSH
41465: LD_VAR 0 8
41469: PPUSH
41470: CALL_OW 111
// exit ;
41474: POP
41475: POP
41476: GO 41482
// end ; end ;
41478: GO 41367
41480: POP
41481: POP
// end ;
41482: LD_VAR 0 3
41486: RET
// export function ScanBase ( side , base_area ) ; begin
41487: LD_INT 0
41489: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
41490: LD_ADDR_VAR 0 3
41494: PUSH
41495: LD_VAR 0 2
41499: PPUSH
41500: LD_INT 81
41502: PUSH
41503: LD_VAR 0 1
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: PPUSH
41512: CALL_OW 70
41516: ST_TO_ADDR
// end ;
41517: LD_VAR 0 3
41521: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
41522: LD_INT 0
41524: PPUSH
41525: PPUSH
41526: PPUSH
41527: PPUSH
// result := false ;
41528: LD_ADDR_VAR 0 2
41532: PUSH
41533: LD_INT 0
41535: ST_TO_ADDR
// side := GetSide ( unit ) ;
41536: LD_ADDR_VAR 0 3
41540: PUSH
41541: LD_VAR 0 1
41545: PPUSH
41546: CALL_OW 255
41550: ST_TO_ADDR
// nat := GetNation ( unit ) ;
41551: LD_ADDR_VAR 0 4
41555: PUSH
41556: LD_VAR 0 1
41560: PPUSH
41561: CALL_OW 248
41565: ST_TO_ADDR
// case nat of 1 :
41566: LD_VAR 0 4
41570: PUSH
41571: LD_INT 1
41573: DOUBLE
41574: EQUAL
41575: IFTRUE 41579
41577: GO 41590
41579: POP
// tech := tech_lassight ; 2 :
41580: LD_ADDR_VAR 0 5
41584: PUSH
41585: LD_INT 12
41587: ST_TO_ADDR
41588: GO 41629
41590: LD_INT 2
41592: DOUBLE
41593: EQUAL
41594: IFTRUE 41598
41596: GO 41609
41598: POP
// tech := tech_mortar ; 3 :
41599: LD_ADDR_VAR 0 5
41603: PUSH
41604: LD_INT 41
41606: ST_TO_ADDR
41607: GO 41629
41609: LD_INT 3
41611: DOUBLE
41612: EQUAL
41613: IFTRUE 41617
41615: GO 41628
41617: POP
// tech := tech_bazooka ; end ;
41618: LD_ADDR_VAR 0 5
41622: PUSH
41623: LD_INT 44
41625: ST_TO_ADDR
41626: GO 41629
41628: POP
// if Researched ( side , tech ) then
41629: LD_VAR 0 3
41633: PPUSH
41634: LD_VAR 0 5
41638: PPUSH
41639: CALL_OW 325
41643: IFFALSE 41670
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
41645: LD_ADDR_VAR 0 2
41649: PUSH
41650: LD_INT 5
41652: PUSH
41653: LD_INT 8
41655: PUSH
41656: LD_INT 9
41658: PUSH
41659: EMPTY
41660: LIST
41661: LIST
41662: LIST
41663: PUSH
41664: LD_VAR 0 4
41668: ARRAY
41669: ST_TO_ADDR
// end ;
41670: LD_VAR 0 2
41674: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
41675: LD_INT 0
41677: PPUSH
41678: PPUSH
41679: PPUSH
// if not mines then
41680: LD_VAR 0 2
41684: NOT
41685: IFFALSE 41689
// exit ;
41687: GO 41833
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41689: LD_ADDR_VAR 0 5
41693: PUSH
41694: LD_INT 81
41696: PUSH
41697: LD_VAR 0 1
41701: PUSH
41702: EMPTY
41703: LIST
41704: LIST
41705: PUSH
41706: LD_INT 3
41708: PUSH
41709: LD_INT 21
41711: PUSH
41712: LD_INT 3
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: PPUSH
41727: CALL_OW 69
41731: ST_TO_ADDR
// for i in mines do
41732: LD_ADDR_VAR 0 4
41736: PUSH
41737: LD_VAR 0 2
41741: PUSH
41742: FOR_IN
41743: IFFALSE 41831
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
41745: LD_VAR 0 4
41749: PUSH
41750: LD_INT 1
41752: ARRAY
41753: PPUSH
41754: LD_VAR 0 4
41758: PUSH
41759: LD_INT 2
41761: ARRAY
41762: PPUSH
41763: CALL_OW 458
41767: NOT
41768: IFFALSE 41772
// continue ;
41770: GO 41742
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
41772: LD_VAR 0 4
41776: PUSH
41777: LD_INT 1
41779: ARRAY
41780: PPUSH
41781: LD_VAR 0 4
41785: PUSH
41786: LD_INT 2
41788: ARRAY
41789: PPUSH
41790: CALL_OW 428
41794: PUSH
41795: LD_VAR 0 5
41799: IN
41800: IFFALSE 41829
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
41802: LD_VAR 0 4
41806: PUSH
41807: LD_INT 1
41809: ARRAY
41810: PPUSH
41811: LD_VAR 0 4
41815: PUSH
41816: LD_INT 2
41818: ARRAY
41819: PPUSH
41820: LD_VAR 0 1
41824: PPUSH
41825: CALL_OW 456
// end ;
41829: GO 41742
41831: POP
41832: POP
// end ;
41833: LD_VAR 0 3
41837: RET
// export function Count ( array ) ; var i ; begin
41838: LD_INT 0
41840: PPUSH
41841: PPUSH
// result := 0 ;
41842: LD_ADDR_VAR 0 2
41846: PUSH
41847: LD_INT 0
41849: ST_TO_ADDR
// for i in array do
41850: LD_ADDR_VAR 0 3
41854: PUSH
41855: LD_VAR 0 1
41859: PUSH
41860: FOR_IN
41861: IFFALSE 41885
// if i then
41863: LD_VAR 0 3
41867: IFFALSE 41883
// result := result + 1 ;
41869: LD_ADDR_VAR 0 2
41873: PUSH
41874: LD_VAR 0 2
41878: PUSH
41879: LD_INT 1
41881: PLUS
41882: ST_TO_ADDR
41883: GO 41860
41885: POP
41886: POP
// end ;
41887: LD_VAR 0 2
41891: RET
// export function IsEmpty ( building ) ; begin
41892: LD_INT 0
41894: PPUSH
// if not building then
41895: LD_VAR 0 1
41899: NOT
41900: IFFALSE 41904
// exit ;
41902: GO 41947
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
41904: LD_ADDR_VAR 0 2
41908: PUSH
41909: LD_VAR 0 1
41913: PUSH
41914: LD_INT 22
41916: PUSH
41917: LD_VAR 0 1
41921: PPUSH
41922: CALL_OW 255
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 58
41933: PUSH
41934: EMPTY
41935: LIST
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: PPUSH
41941: CALL_OW 69
41945: IN
41946: ST_TO_ADDR
// end ;
41947: LD_VAR 0 2
41951: RET
// export function IsNotFull ( building ) ; var places ; begin
41952: LD_INT 0
41954: PPUSH
41955: PPUSH
// if not building then
41956: LD_VAR 0 1
41960: NOT
41961: IFFALSE 41965
// exit ;
41963: GO 42136
// result := false ;
41965: LD_ADDR_VAR 0 2
41969: PUSH
41970: LD_INT 0
41972: ST_TO_ADDR
// places := 0 ;
41973: LD_ADDR_VAR 0 3
41977: PUSH
41978: LD_INT 0
41980: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
41981: LD_VAR 0 1
41985: PPUSH
41986: CALL_OW 266
41990: PUSH
41991: LD_INT 0
41993: DOUBLE
41994: EQUAL
41995: IFTRUE 42053
41997: LD_INT 1
41999: DOUBLE
42000: EQUAL
42001: IFTRUE 42053
42003: LD_INT 6
42005: DOUBLE
42006: EQUAL
42007: IFTRUE 42053
42009: LD_INT 7
42011: DOUBLE
42012: EQUAL
42013: IFTRUE 42053
42015: LD_INT 8
42017: DOUBLE
42018: EQUAL
42019: IFTRUE 42053
42021: LD_INT 4
42023: DOUBLE
42024: EQUAL
42025: IFTRUE 42053
42027: LD_INT 5
42029: DOUBLE
42030: EQUAL
42031: IFTRUE 42053
42033: LD_INT 2
42035: DOUBLE
42036: EQUAL
42037: IFTRUE 42053
42039: LD_INT 3
42041: DOUBLE
42042: EQUAL
42043: IFTRUE 42053
42045: LD_INT 35
42047: DOUBLE
42048: EQUAL
42049: IFTRUE 42053
42051: GO 42064
42053: POP
// places := 6 ; b_bunker , b_breastwork :
42054: LD_ADDR_VAR 0 3
42058: PUSH
42059: LD_INT 6
42061: ST_TO_ADDR
42062: GO 42109
42064: LD_INT 32
42066: DOUBLE
42067: EQUAL
42068: IFTRUE 42078
42070: LD_INT 31
42072: DOUBLE
42073: EQUAL
42074: IFTRUE 42078
42076: GO 42089
42078: POP
// places := 1 ; b_control_tower :
42079: LD_ADDR_VAR 0 3
42083: PUSH
42084: LD_INT 1
42086: ST_TO_ADDR
42087: GO 42109
42089: LD_INT 36
42091: DOUBLE
42092: EQUAL
42093: IFTRUE 42097
42095: GO 42108
42097: POP
// places := 3 ; end ;
42098: LD_ADDR_VAR 0 3
42102: PUSH
42103: LD_INT 3
42105: ST_TO_ADDR
42106: GO 42109
42108: POP
// if places then
42109: LD_VAR 0 3
42113: IFFALSE 42136
// result := UnitsInside ( building ) < places ;
42115: LD_ADDR_VAR 0 2
42119: PUSH
42120: LD_VAR 0 1
42124: PPUSH
42125: CALL_OW 313
42129: PUSH
42130: LD_VAR 0 3
42134: LESS
42135: ST_TO_ADDR
// end ;
42136: LD_VAR 0 2
42140: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
42141: LD_INT 0
42143: PPUSH
42144: PPUSH
42145: PPUSH
42146: PPUSH
// tmp := [ ] ;
42147: LD_ADDR_VAR 0 3
42151: PUSH
42152: EMPTY
42153: ST_TO_ADDR
// list := [ ] ;
42154: LD_ADDR_VAR 0 5
42158: PUSH
42159: EMPTY
42160: ST_TO_ADDR
// for i = 16 to 25 do
42161: LD_ADDR_VAR 0 4
42165: PUSH
42166: DOUBLE
42167: LD_INT 16
42169: DEC
42170: ST_TO_ADDR
42171: LD_INT 25
42173: PUSH
42174: FOR_TO
42175: IFFALSE 42248
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
42177: LD_ADDR_VAR 0 3
42181: PUSH
42182: LD_VAR 0 3
42186: PUSH
42187: LD_INT 22
42189: PUSH
42190: LD_VAR 0 1
42194: PPUSH
42195: CALL_OW 255
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: PUSH
42204: LD_INT 91
42206: PUSH
42207: LD_VAR 0 1
42211: PUSH
42212: LD_INT 6
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: LIST
42219: PUSH
42220: LD_INT 30
42222: PUSH
42223: LD_VAR 0 4
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: PUSH
42232: EMPTY
42233: LIST
42234: LIST
42235: LIST
42236: PUSH
42237: EMPTY
42238: LIST
42239: PPUSH
42240: CALL_OW 69
42244: ADD
42245: ST_TO_ADDR
42246: GO 42174
42248: POP
42249: POP
// for i = 1 to tmp do
42250: LD_ADDR_VAR 0 4
42254: PUSH
42255: DOUBLE
42256: LD_INT 1
42258: DEC
42259: ST_TO_ADDR
42260: LD_VAR 0 3
42264: PUSH
42265: FOR_TO
42266: IFFALSE 42354
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
42268: LD_ADDR_VAR 0 5
42272: PUSH
42273: LD_VAR 0 5
42277: PUSH
42278: LD_VAR 0 3
42282: PUSH
42283: LD_VAR 0 4
42287: ARRAY
42288: PPUSH
42289: CALL_OW 266
42293: PUSH
42294: LD_VAR 0 3
42298: PUSH
42299: LD_VAR 0 4
42303: ARRAY
42304: PPUSH
42305: CALL_OW 250
42309: PUSH
42310: LD_VAR 0 3
42314: PUSH
42315: LD_VAR 0 4
42319: ARRAY
42320: PPUSH
42321: CALL_OW 251
42325: PUSH
42326: LD_VAR 0 3
42330: PUSH
42331: LD_VAR 0 4
42335: ARRAY
42336: PPUSH
42337: CALL_OW 254
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: LIST
42346: LIST
42347: PUSH
42348: EMPTY
42349: LIST
42350: ADD
42351: ST_TO_ADDR
42352: GO 42265
42354: POP
42355: POP
// result := list ;
42356: LD_ADDR_VAR 0 2
42360: PUSH
42361: LD_VAR 0 5
42365: ST_TO_ADDR
// end ;
42366: LD_VAR 0 2
42370: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
42371: LD_INT 0
42373: PPUSH
42374: PPUSH
42375: PPUSH
42376: PPUSH
42377: PPUSH
42378: PPUSH
42379: PPUSH
// if not factory then
42380: LD_VAR 0 1
42384: NOT
42385: IFFALSE 42389
// exit ;
42387: GO 42982
// if control = control_apeman then
42389: LD_VAR 0 4
42393: PUSH
42394: LD_INT 5
42396: EQUAL
42397: IFFALSE 42506
// begin tmp := UnitsInside ( factory ) ;
42399: LD_ADDR_VAR 0 8
42403: PUSH
42404: LD_VAR 0 1
42408: PPUSH
42409: CALL_OW 313
42413: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
42414: LD_VAR 0 8
42418: PPUSH
42419: LD_INT 25
42421: PUSH
42422: LD_INT 12
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: PPUSH
42429: CALL_OW 72
42433: NOT
42434: IFFALSE 42444
// control := control_manual ;
42436: LD_ADDR_VAR 0 4
42440: PUSH
42441: LD_INT 1
42443: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
42444: LD_ADDR_VAR 0 8
42448: PUSH
42449: LD_VAR 0 1
42453: PPUSH
42454: CALL 42141 0 1
42458: ST_TO_ADDR
// if tmp then
42459: LD_VAR 0 8
42463: IFFALSE 42506
// begin for i in tmp do
42465: LD_ADDR_VAR 0 7
42469: PUSH
42470: LD_VAR 0 8
42474: PUSH
42475: FOR_IN
42476: IFFALSE 42504
// if i [ 1 ] = b_ext_radio then
42478: LD_VAR 0 7
42482: PUSH
42483: LD_INT 1
42485: ARRAY
42486: PUSH
42487: LD_INT 22
42489: EQUAL
42490: IFFALSE 42502
// begin control := control_remote ;
42492: LD_ADDR_VAR 0 4
42496: PUSH
42497: LD_INT 2
42499: ST_TO_ADDR
// break ;
42500: GO 42504
// end ;
42502: GO 42475
42504: POP
42505: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42506: LD_VAR 0 1
42510: PPUSH
42511: LD_VAR 0 2
42515: PPUSH
42516: LD_VAR 0 3
42520: PPUSH
42521: LD_VAR 0 4
42525: PPUSH
42526: LD_VAR 0 5
42530: PPUSH
42531: CALL_OW 448
42535: IFFALSE 42570
// begin result := [ chassis , engine , control , weapon ] ;
42537: LD_ADDR_VAR 0 6
42541: PUSH
42542: LD_VAR 0 2
42546: PUSH
42547: LD_VAR 0 3
42551: PUSH
42552: LD_VAR 0 4
42556: PUSH
42557: LD_VAR 0 5
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: ST_TO_ADDR
// exit ;
42568: GO 42982
// end ; _chassis := AvailableChassisList ( factory ) ;
42570: LD_ADDR_VAR 0 9
42574: PUSH
42575: LD_VAR 0 1
42579: PPUSH
42580: CALL_OW 475
42584: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
42585: LD_ADDR_VAR 0 11
42589: PUSH
42590: LD_VAR 0 1
42594: PPUSH
42595: CALL_OW 476
42599: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
42600: LD_ADDR_VAR 0 12
42604: PUSH
42605: LD_VAR 0 1
42609: PPUSH
42610: CALL_OW 477
42614: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
42615: LD_ADDR_VAR 0 10
42619: PUSH
42620: LD_VAR 0 1
42624: PPUSH
42625: CALL_OW 478
42629: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
42630: LD_VAR 0 9
42634: NOT
42635: PUSH
42636: LD_VAR 0 11
42640: NOT
42641: OR
42642: PUSH
42643: LD_VAR 0 12
42647: NOT
42648: OR
42649: PUSH
42650: LD_VAR 0 10
42654: NOT
42655: OR
42656: IFFALSE 42691
// begin result := [ chassis , engine , control , weapon ] ;
42658: LD_ADDR_VAR 0 6
42662: PUSH
42663: LD_VAR 0 2
42667: PUSH
42668: LD_VAR 0 3
42672: PUSH
42673: LD_VAR 0 4
42677: PUSH
42678: LD_VAR 0 5
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: LIST
42687: LIST
42688: ST_TO_ADDR
// exit ;
42689: GO 42982
// end ; if not chassis in _chassis then
42691: LD_VAR 0 2
42695: PUSH
42696: LD_VAR 0 9
42700: IN
42701: NOT
42702: IFFALSE 42728
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
42704: LD_ADDR_VAR 0 2
42708: PUSH
42709: LD_VAR 0 9
42713: PUSH
42714: LD_INT 1
42716: PPUSH
42717: LD_VAR 0 9
42721: PPUSH
42722: CALL_OW 12
42726: ARRAY
42727: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
42728: LD_VAR 0 2
42732: PPUSH
42733: LD_VAR 0 3
42737: PPUSH
42738: CALL 42987 0 2
42742: NOT
42743: IFFALSE 42802
// repeat engine := _engine [ 1 ] ;
42745: LD_ADDR_VAR 0 3
42749: PUSH
42750: LD_VAR 0 11
42754: PUSH
42755: LD_INT 1
42757: ARRAY
42758: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
42759: LD_ADDR_VAR 0 11
42763: PUSH
42764: LD_VAR 0 11
42768: PPUSH
42769: LD_INT 1
42771: PPUSH
42772: CALL_OW 3
42776: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
42777: LD_VAR 0 2
42781: PPUSH
42782: LD_VAR 0 3
42786: PPUSH
42787: CALL 42987 0 2
42791: PUSH
42792: LD_VAR 0 11
42796: PUSH
42797: EMPTY
42798: EQUAL
42799: OR
42800: IFFALSE 42745
// if not control in _control then
42802: LD_VAR 0 4
42806: PUSH
42807: LD_VAR 0 12
42811: IN
42812: NOT
42813: IFFALSE 42839
// control := _control [ rand ( 1 , _control ) ] ;
42815: LD_ADDR_VAR 0 4
42819: PUSH
42820: LD_VAR 0 12
42824: PUSH
42825: LD_INT 1
42827: PPUSH
42828: LD_VAR 0 12
42832: PPUSH
42833: CALL_OW 12
42837: ARRAY
42838: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
42839: LD_VAR 0 2
42843: PPUSH
42844: LD_VAR 0 5
42848: PPUSH
42849: CALL 43207 0 2
42853: NOT
42854: IFFALSE 42913
// repeat weapon := _weapon [ 1 ] ;
42856: LD_ADDR_VAR 0 5
42860: PUSH
42861: LD_VAR 0 10
42865: PUSH
42866: LD_INT 1
42868: ARRAY
42869: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
42870: LD_ADDR_VAR 0 10
42874: PUSH
42875: LD_VAR 0 10
42879: PPUSH
42880: LD_INT 1
42882: PPUSH
42883: CALL_OW 3
42887: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
42888: LD_VAR 0 2
42892: PPUSH
42893: LD_VAR 0 5
42897: PPUSH
42898: CALL 43207 0 2
42902: PUSH
42903: LD_VAR 0 10
42907: PUSH
42908: EMPTY
42909: EQUAL
42910: OR
42911: IFFALSE 42856
// result := [ ] ;
42913: LD_ADDR_VAR 0 6
42917: PUSH
42918: EMPTY
42919: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42920: LD_VAR 0 1
42924: PPUSH
42925: LD_VAR 0 2
42929: PPUSH
42930: LD_VAR 0 3
42934: PPUSH
42935: LD_VAR 0 4
42939: PPUSH
42940: LD_VAR 0 5
42944: PPUSH
42945: CALL_OW 448
42949: IFFALSE 42982
// result := [ chassis , engine , control , weapon ] ;
42951: LD_ADDR_VAR 0 6
42955: PUSH
42956: LD_VAR 0 2
42960: PUSH
42961: LD_VAR 0 3
42965: PUSH
42966: LD_VAR 0 4
42970: PUSH
42971: LD_VAR 0 5
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: LIST
42980: LIST
42981: ST_TO_ADDR
// end ;
42982: LD_VAR 0 6
42986: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
42987: LD_INT 0
42989: PPUSH
// if not chassis or not engine then
42990: LD_VAR 0 1
42994: NOT
42995: PUSH
42996: LD_VAR 0 2
43000: NOT
43001: OR
43002: IFFALSE 43006
// exit ;
43004: GO 43202
// case engine of engine_solar :
43006: LD_VAR 0 2
43010: PUSH
43011: LD_INT 2
43013: DOUBLE
43014: EQUAL
43015: IFTRUE 43019
43017: GO 43057
43019: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
43020: LD_ADDR_VAR 0 3
43024: PUSH
43025: LD_INT 11
43027: PUSH
43028: LD_INT 12
43030: PUSH
43031: LD_INT 13
43033: PUSH
43034: LD_INT 14
43036: PUSH
43037: LD_INT 1
43039: PUSH
43040: LD_INT 2
43042: PUSH
43043: LD_INT 3
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: LIST
43050: LIST
43051: LIST
43052: LIST
43053: LIST
43054: ST_TO_ADDR
43055: GO 43186
43057: LD_INT 1
43059: DOUBLE
43060: EQUAL
43061: IFTRUE 43065
43063: GO 43127
43065: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
43066: LD_ADDR_VAR 0 3
43070: PUSH
43071: LD_INT 11
43073: PUSH
43074: LD_INT 12
43076: PUSH
43077: LD_INT 13
43079: PUSH
43080: LD_INT 14
43082: PUSH
43083: LD_INT 1
43085: PUSH
43086: LD_INT 2
43088: PUSH
43089: LD_INT 3
43091: PUSH
43092: LD_INT 4
43094: PUSH
43095: LD_INT 5
43097: PUSH
43098: LD_INT 21
43100: PUSH
43101: LD_INT 23
43103: PUSH
43104: LD_INT 22
43106: PUSH
43107: LD_INT 24
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: LIST
43118: LIST
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: ST_TO_ADDR
43125: GO 43186
43127: LD_INT 3
43129: DOUBLE
43130: EQUAL
43131: IFTRUE 43135
43133: GO 43185
43135: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43136: LD_ADDR_VAR 0 3
43140: PUSH
43141: LD_INT 13
43143: PUSH
43144: LD_INT 14
43146: PUSH
43147: LD_INT 2
43149: PUSH
43150: LD_INT 3
43152: PUSH
43153: LD_INT 4
43155: PUSH
43156: LD_INT 5
43158: PUSH
43159: LD_INT 21
43161: PUSH
43162: LD_INT 22
43164: PUSH
43165: LD_INT 23
43167: PUSH
43168: LD_INT 24
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: LIST
43175: LIST
43176: LIST
43177: LIST
43178: LIST
43179: LIST
43180: LIST
43181: LIST
43182: ST_TO_ADDR
43183: GO 43186
43185: POP
// result := ( chassis in result ) ;
43186: LD_ADDR_VAR 0 3
43190: PUSH
43191: LD_VAR 0 1
43195: PUSH
43196: LD_VAR 0 3
43200: IN
43201: ST_TO_ADDR
// end ;
43202: LD_VAR 0 3
43206: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
43207: LD_INT 0
43209: PPUSH
// if not chassis or not weapon then
43210: LD_VAR 0 1
43214: NOT
43215: PUSH
43216: LD_VAR 0 2
43220: NOT
43221: OR
43222: IFFALSE 43226
// exit ;
43224: GO 44286
// case weapon of us_machine_gun :
43226: LD_VAR 0 2
43230: PUSH
43231: LD_INT 2
43233: DOUBLE
43234: EQUAL
43235: IFTRUE 43239
43237: GO 43269
43239: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
43240: LD_ADDR_VAR 0 3
43244: PUSH
43245: LD_INT 1
43247: PUSH
43248: LD_INT 2
43250: PUSH
43251: LD_INT 3
43253: PUSH
43254: LD_INT 4
43256: PUSH
43257: LD_INT 5
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: LIST
43264: LIST
43265: LIST
43266: ST_TO_ADDR
43267: GO 44270
43269: LD_INT 3
43271: DOUBLE
43272: EQUAL
43273: IFTRUE 43277
43275: GO 43307
43277: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
43278: LD_ADDR_VAR 0 3
43282: PUSH
43283: LD_INT 1
43285: PUSH
43286: LD_INT 2
43288: PUSH
43289: LD_INT 3
43291: PUSH
43292: LD_INT 4
43294: PUSH
43295: LD_INT 5
43297: PUSH
43298: EMPTY
43299: LIST
43300: LIST
43301: LIST
43302: LIST
43303: LIST
43304: ST_TO_ADDR
43305: GO 44270
43307: LD_INT 11
43309: DOUBLE
43310: EQUAL
43311: IFTRUE 43315
43313: GO 43345
43315: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
43316: LD_ADDR_VAR 0 3
43320: PUSH
43321: LD_INT 1
43323: PUSH
43324: LD_INT 2
43326: PUSH
43327: LD_INT 3
43329: PUSH
43330: LD_INT 4
43332: PUSH
43333: LD_INT 5
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: LIST
43340: LIST
43341: LIST
43342: ST_TO_ADDR
43343: GO 44270
43345: LD_INT 4
43347: DOUBLE
43348: EQUAL
43349: IFTRUE 43353
43351: GO 43379
43353: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
43354: LD_ADDR_VAR 0 3
43358: PUSH
43359: LD_INT 2
43361: PUSH
43362: LD_INT 3
43364: PUSH
43365: LD_INT 4
43367: PUSH
43368: LD_INT 5
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: LIST
43375: LIST
43376: ST_TO_ADDR
43377: GO 44270
43379: LD_INT 5
43381: DOUBLE
43382: EQUAL
43383: IFTRUE 43387
43385: GO 43413
43387: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
43388: LD_ADDR_VAR 0 3
43392: PUSH
43393: LD_INT 2
43395: PUSH
43396: LD_INT 3
43398: PUSH
43399: LD_INT 4
43401: PUSH
43402: LD_INT 5
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: LIST
43409: LIST
43410: ST_TO_ADDR
43411: GO 44270
43413: LD_INT 9
43415: DOUBLE
43416: EQUAL
43417: IFTRUE 43421
43419: GO 43447
43421: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
43422: LD_ADDR_VAR 0 3
43426: PUSH
43427: LD_INT 2
43429: PUSH
43430: LD_INT 3
43432: PUSH
43433: LD_INT 4
43435: PUSH
43436: LD_INT 5
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: LIST
43443: LIST
43444: ST_TO_ADDR
43445: GO 44270
43447: LD_INT 7
43449: DOUBLE
43450: EQUAL
43451: IFTRUE 43455
43453: GO 43481
43455: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
43456: LD_ADDR_VAR 0 3
43460: PUSH
43461: LD_INT 2
43463: PUSH
43464: LD_INT 3
43466: PUSH
43467: LD_INT 4
43469: PUSH
43470: LD_INT 5
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: LIST
43477: LIST
43478: ST_TO_ADDR
43479: GO 44270
43481: LD_INT 12
43483: DOUBLE
43484: EQUAL
43485: IFTRUE 43489
43487: GO 43515
43489: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
43490: LD_ADDR_VAR 0 3
43494: PUSH
43495: LD_INT 2
43497: PUSH
43498: LD_INT 3
43500: PUSH
43501: LD_INT 4
43503: PUSH
43504: LD_INT 5
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: LIST
43511: LIST
43512: ST_TO_ADDR
43513: GO 44270
43515: LD_INT 13
43517: DOUBLE
43518: EQUAL
43519: IFTRUE 43523
43521: GO 43549
43523: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
43524: LD_ADDR_VAR 0 3
43528: PUSH
43529: LD_INT 2
43531: PUSH
43532: LD_INT 3
43534: PUSH
43535: LD_INT 4
43537: PUSH
43538: LD_INT 5
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: LIST
43545: LIST
43546: ST_TO_ADDR
43547: GO 44270
43549: LD_INT 14
43551: DOUBLE
43552: EQUAL
43553: IFTRUE 43557
43555: GO 43575
43557: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
43558: LD_ADDR_VAR 0 3
43562: PUSH
43563: LD_INT 4
43565: PUSH
43566: LD_INT 5
43568: PUSH
43569: EMPTY
43570: LIST
43571: LIST
43572: ST_TO_ADDR
43573: GO 44270
43575: LD_INT 6
43577: DOUBLE
43578: EQUAL
43579: IFTRUE 43583
43581: GO 43601
43583: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
43584: LD_ADDR_VAR 0 3
43588: PUSH
43589: LD_INT 4
43591: PUSH
43592: LD_INT 5
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: ST_TO_ADDR
43599: GO 44270
43601: LD_INT 10
43603: DOUBLE
43604: EQUAL
43605: IFTRUE 43609
43607: GO 43627
43609: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
43610: LD_ADDR_VAR 0 3
43614: PUSH
43615: LD_INT 4
43617: PUSH
43618: LD_INT 5
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: ST_TO_ADDR
43625: GO 44270
43627: LD_INT 22
43629: DOUBLE
43630: EQUAL
43631: IFTRUE 43635
43633: GO 43661
43635: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
43636: LD_ADDR_VAR 0 3
43640: PUSH
43641: LD_INT 11
43643: PUSH
43644: LD_INT 12
43646: PUSH
43647: LD_INT 13
43649: PUSH
43650: LD_INT 14
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: LIST
43657: LIST
43658: ST_TO_ADDR
43659: GO 44270
43661: LD_INT 23
43663: DOUBLE
43664: EQUAL
43665: IFTRUE 43669
43667: GO 43695
43669: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
43670: LD_ADDR_VAR 0 3
43674: PUSH
43675: LD_INT 11
43677: PUSH
43678: LD_INT 12
43680: PUSH
43681: LD_INT 13
43683: PUSH
43684: LD_INT 14
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: LIST
43691: LIST
43692: ST_TO_ADDR
43693: GO 44270
43695: LD_INT 24
43697: DOUBLE
43698: EQUAL
43699: IFTRUE 43703
43701: GO 43729
43703: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
43704: LD_ADDR_VAR 0 3
43708: PUSH
43709: LD_INT 11
43711: PUSH
43712: LD_INT 12
43714: PUSH
43715: LD_INT 13
43717: PUSH
43718: LD_INT 14
43720: PUSH
43721: EMPTY
43722: LIST
43723: LIST
43724: LIST
43725: LIST
43726: ST_TO_ADDR
43727: GO 44270
43729: LD_INT 30
43731: DOUBLE
43732: EQUAL
43733: IFTRUE 43737
43735: GO 43763
43737: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
43738: LD_ADDR_VAR 0 3
43742: PUSH
43743: LD_INT 11
43745: PUSH
43746: LD_INT 12
43748: PUSH
43749: LD_INT 13
43751: PUSH
43752: LD_INT 14
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: LIST
43759: LIST
43760: ST_TO_ADDR
43761: GO 44270
43763: LD_INT 25
43765: DOUBLE
43766: EQUAL
43767: IFTRUE 43771
43769: GO 43789
43771: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
43772: LD_ADDR_VAR 0 3
43776: PUSH
43777: LD_INT 13
43779: PUSH
43780: LD_INT 14
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: ST_TO_ADDR
43787: GO 44270
43789: LD_INT 27
43791: DOUBLE
43792: EQUAL
43793: IFTRUE 43797
43795: GO 43815
43797: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
43798: LD_ADDR_VAR 0 3
43802: PUSH
43803: LD_INT 13
43805: PUSH
43806: LD_INT 14
43808: PUSH
43809: EMPTY
43810: LIST
43811: LIST
43812: ST_TO_ADDR
43813: GO 44270
43815: LD_INT 92
43817: DOUBLE
43818: EQUAL
43819: IFTRUE 43823
43821: GO 43849
43823: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
43824: LD_ADDR_VAR 0 3
43828: PUSH
43829: LD_INT 11
43831: PUSH
43832: LD_INT 12
43834: PUSH
43835: LD_INT 13
43837: PUSH
43838: LD_INT 14
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: ST_TO_ADDR
43847: GO 44270
43849: LD_INT 28
43851: DOUBLE
43852: EQUAL
43853: IFTRUE 43857
43855: GO 43875
43857: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
43858: LD_ADDR_VAR 0 3
43862: PUSH
43863: LD_INT 13
43865: PUSH
43866: LD_INT 14
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: ST_TO_ADDR
43873: GO 44270
43875: LD_INT 29
43877: DOUBLE
43878: EQUAL
43879: IFTRUE 43883
43881: GO 43901
43883: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
43884: LD_ADDR_VAR 0 3
43888: PUSH
43889: LD_INT 13
43891: PUSH
43892: LD_INT 14
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: ST_TO_ADDR
43899: GO 44270
43901: LD_INT 31
43903: DOUBLE
43904: EQUAL
43905: IFTRUE 43909
43907: GO 43927
43909: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43910: LD_ADDR_VAR 0 3
43914: PUSH
43915: LD_INT 13
43917: PUSH
43918: LD_INT 14
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: ST_TO_ADDR
43925: GO 44270
43927: LD_INT 26
43929: DOUBLE
43930: EQUAL
43931: IFTRUE 43935
43933: GO 43953
43935: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
43936: LD_ADDR_VAR 0 3
43940: PUSH
43941: LD_INT 13
43943: PUSH
43944: LD_INT 14
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: ST_TO_ADDR
43951: GO 44270
43953: LD_INT 42
43955: DOUBLE
43956: EQUAL
43957: IFTRUE 43961
43959: GO 43987
43961: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
43962: LD_ADDR_VAR 0 3
43966: PUSH
43967: LD_INT 21
43969: PUSH
43970: LD_INT 22
43972: PUSH
43973: LD_INT 23
43975: PUSH
43976: LD_INT 24
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: LIST
43983: LIST
43984: ST_TO_ADDR
43985: GO 44270
43987: LD_INT 43
43989: DOUBLE
43990: EQUAL
43991: IFTRUE 43995
43993: GO 44021
43995: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
43996: LD_ADDR_VAR 0 3
44000: PUSH
44001: LD_INT 21
44003: PUSH
44004: LD_INT 22
44006: PUSH
44007: LD_INT 23
44009: PUSH
44010: LD_INT 24
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: LIST
44017: LIST
44018: ST_TO_ADDR
44019: GO 44270
44021: LD_INT 44
44023: DOUBLE
44024: EQUAL
44025: IFTRUE 44029
44027: GO 44055
44029: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
44030: LD_ADDR_VAR 0 3
44034: PUSH
44035: LD_INT 21
44037: PUSH
44038: LD_INT 22
44040: PUSH
44041: LD_INT 23
44043: PUSH
44044: LD_INT 24
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: LIST
44051: LIST
44052: ST_TO_ADDR
44053: GO 44270
44055: LD_INT 45
44057: DOUBLE
44058: EQUAL
44059: IFTRUE 44063
44061: GO 44089
44063: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
44064: LD_ADDR_VAR 0 3
44068: PUSH
44069: LD_INT 21
44071: PUSH
44072: LD_INT 22
44074: PUSH
44075: LD_INT 23
44077: PUSH
44078: LD_INT 24
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: LIST
44085: LIST
44086: ST_TO_ADDR
44087: GO 44270
44089: LD_INT 49
44091: DOUBLE
44092: EQUAL
44093: IFTRUE 44097
44095: GO 44123
44097: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
44098: LD_ADDR_VAR 0 3
44102: PUSH
44103: LD_INT 21
44105: PUSH
44106: LD_INT 22
44108: PUSH
44109: LD_INT 23
44111: PUSH
44112: LD_INT 24
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: ST_TO_ADDR
44121: GO 44270
44123: LD_INT 51
44125: DOUBLE
44126: EQUAL
44127: IFTRUE 44131
44129: GO 44157
44131: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
44132: LD_ADDR_VAR 0 3
44136: PUSH
44137: LD_INT 21
44139: PUSH
44140: LD_INT 22
44142: PUSH
44143: LD_INT 23
44145: PUSH
44146: LD_INT 24
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: LIST
44153: LIST
44154: ST_TO_ADDR
44155: GO 44270
44157: LD_INT 52
44159: DOUBLE
44160: EQUAL
44161: IFTRUE 44165
44163: GO 44191
44165: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
44166: LD_ADDR_VAR 0 3
44170: PUSH
44171: LD_INT 21
44173: PUSH
44174: LD_INT 22
44176: PUSH
44177: LD_INT 23
44179: PUSH
44180: LD_INT 24
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: LIST
44187: LIST
44188: ST_TO_ADDR
44189: GO 44270
44191: LD_INT 53
44193: DOUBLE
44194: EQUAL
44195: IFTRUE 44199
44197: GO 44217
44199: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
44200: LD_ADDR_VAR 0 3
44204: PUSH
44205: LD_INT 23
44207: PUSH
44208: LD_INT 24
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: ST_TO_ADDR
44215: GO 44270
44217: LD_INT 46
44219: DOUBLE
44220: EQUAL
44221: IFTRUE 44225
44223: GO 44243
44225: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
44226: LD_ADDR_VAR 0 3
44230: PUSH
44231: LD_INT 23
44233: PUSH
44234: LD_INT 24
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: ST_TO_ADDR
44241: GO 44270
44243: LD_INT 47
44245: DOUBLE
44246: EQUAL
44247: IFTRUE 44251
44249: GO 44269
44251: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44252: LD_ADDR_VAR 0 3
44256: PUSH
44257: LD_INT 23
44259: PUSH
44260: LD_INT 24
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: ST_TO_ADDR
44267: GO 44270
44269: POP
// result := ( chassis in result ) ;
44270: LD_ADDR_VAR 0 3
44274: PUSH
44275: LD_VAR 0 1
44279: PUSH
44280: LD_VAR 0 3
44284: IN
44285: ST_TO_ADDR
// end ;
44286: LD_VAR 0 3
44290: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
44291: LD_INT 0
44293: PPUSH
44294: PPUSH
44295: PPUSH
44296: PPUSH
44297: PPUSH
44298: PPUSH
44299: PPUSH
// result := array ;
44300: LD_ADDR_VAR 0 5
44304: PUSH
44305: LD_VAR 0 1
44309: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
44310: LD_VAR 0 1
44314: NOT
44315: PUSH
44316: LD_VAR 0 2
44320: NOT
44321: OR
44322: PUSH
44323: LD_VAR 0 3
44327: NOT
44328: OR
44329: PUSH
44330: LD_VAR 0 2
44334: PUSH
44335: LD_VAR 0 1
44339: GREATER
44340: OR
44341: PUSH
44342: LD_VAR 0 3
44346: PUSH
44347: LD_VAR 0 1
44351: GREATER
44352: OR
44353: IFFALSE 44357
// exit ;
44355: GO 44653
// if direction then
44357: LD_VAR 0 4
44361: IFFALSE 44425
// begin d := 1 ;
44363: LD_ADDR_VAR 0 9
44367: PUSH
44368: LD_INT 1
44370: ST_TO_ADDR
// if i_from > i_to then
44371: LD_VAR 0 2
44375: PUSH
44376: LD_VAR 0 3
44380: GREATER
44381: IFFALSE 44407
// length := ( array - i_from ) + i_to else
44383: LD_ADDR_VAR 0 11
44387: PUSH
44388: LD_VAR 0 1
44392: PUSH
44393: LD_VAR 0 2
44397: MINUS
44398: PUSH
44399: LD_VAR 0 3
44403: PLUS
44404: ST_TO_ADDR
44405: GO 44423
// length := i_to - i_from ;
44407: LD_ADDR_VAR 0 11
44411: PUSH
44412: LD_VAR 0 3
44416: PUSH
44417: LD_VAR 0 2
44421: MINUS
44422: ST_TO_ADDR
// end else
44423: GO 44486
// begin d := - 1 ;
44425: LD_ADDR_VAR 0 9
44429: PUSH
44430: LD_INT 1
44432: NEG
44433: ST_TO_ADDR
// if i_from > i_to then
44434: LD_VAR 0 2
44438: PUSH
44439: LD_VAR 0 3
44443: GREATER
44444: IFFALSE 44464
// length := i_from - i_to else
44446: LD_ADDR_VAR 0 11
44450: PUSH
44451: LD_VAR 0 2
44455: PUSH
44456: LD_VAR 0 3
44460: MINUS
44461: ST_TO_ADDR
44462: GO 44486
// length := ( array - i_to ) + i_from ;
44464: LD_ADDR_VAR 0 11
44468: PUSH
44469: LD_VAR 0 1
44473: PUSH
44474: LD_VAR 0 3
44478: MINUS
44479: PUSH
44480: LD_VAR 0 2
44484: PLUS
44485: ST_TO_ADDR
// end ; if not length then
44486: LD_VAR 0 11
44490: NOT
44491: IFFALSE 44495
// exit ;
44493: GO 44653
// tmp := array ;
44495: LD_ADDR_VAR 0 10
44499: PUSH
44500: LD_VAR 0 1
44504: ST_TO_ADDR
// for i = 1 to length do
44505: LD_ADDR_VAR 0 6
44509: PUSH
44510: DOUBLE
44511: LD_INT 1
44513: DEC
44514: ST_TO_ADDR
44515: LD_VAR 0 11
44519: PUSH
44520: FOR_TO
44521: IFFALSE 44641
// begin for j = 1 to array do
44523: LD_ADDR_VAR 0 7
44527: PUSH
44528: DOUBLE
44529: LD_INT 1
44531: DEC
44532: ST_TO_ADDR
44533: LD_VAR 0 1
44537: PUSH
44538: FOR_TO
44539: IFFALSE 44627
// begin k := j + d ;
44541: LD_ADDR_VAR 0 8
44545: PUSH
44546: LD_VAR 0 7
44550: PUSH
44551: LD_VAR 0 9
44555: PLUS
44556: ST_TO_ADDR
// if k > array then
44557: LD_VAR 0 8
44561: PUSH
44562: LD_VAR 0 1
44566: GREATER
44567: IFFALSE 44577
// k := 1 ;
44569: LD_ADDR_VAR 0 8
44573: PUSH
44574: LD_INT 1
44576: ST_TO_ADDR
// if not k then
44577: LD_VAR 0 8
44581: NOT
44582: IFFALSE 44594
// k := array ;
44584: LD_ADDR_VAR 0 8
44588: PUSH
44589: LD_VAR 0 1
44593: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
44594: LD_ADDR_VAR 0 10
44598: PUSH
44599: LD_VAR 0 10
44603: PPUSH
44604: LD_VAR 0 8
44608: PPUSH
44609: LD_VAR 0 1
44613: PUSH
44614: LD_VAR 0 7
44618: ARRAY
44619: PPUSH
44620: CALL_OW 1
44624: ST_TO_ADDR
// end ;
44625: GO 44538
44627: POP
44628: POP
// array := tmp ;
44629: LD_ADDR_VAR 0 1
44633: PUSH
44634: LD_VAR 0 10
44638: ST_TO_ADDR
// end ;
44639: GO 44520
44641: POP
44642: POP
// result := array ;
44643: LD_ADDR_VAR 0 5
44647: PUSH
44648: LD_VAR 0 1
44652: ST_TO_ADDR
// end ;
44653: LD_VAR 0 5
44657: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
44658: LD_INT 0
44660: PPUSH
44661: PPUSH
// result := 0 ;
44662: LD_ADDR_VAR 0 3
44666: PUSH
44667: LD_INT 0
44669: ST_TO_ADDR
// if not array or not value in array then
44670: LD_VAR 0 1
44674: NOT
44675: PUSH
44676: LD_VAR 0 2
44680: PUSH
44681: LD_VAR 0 1
44685: IN
44686: NOT
44687: OR
44688: IFFALSE 44692
// exit ;
44690: GO 44746
// for i = 1 to array do
44692: LD_ADDR_VAR 0 4
44696: PUSH
44697: DOUBLE
44698: LD_INT 1
44700: DEC
44701: ST_TO_ADDR
44702: LD_VAR 0 1
44706: PUSH
44707: FOR_TO
44708: IFFALSE 44744
// if value = array [ i ] then
44710: LD_VAR 0 2
44714: PUSH
44715: LD_VAR 0 1
44719: PUSH
44720: LD_VAR 0 4
44724: ARRAY
44725: EQUAL
44726: IFFALSE 44742
// begin result := i ;
44728: LD_ADDR_VAR 0 3
44732: PUSH
44733: LD_VAR 0 4
44737: ST_TO_ADDR
// exit ;
44738: POP
44739: POP
44740: GO 44746
// end ;
44742: GO 44707
44744: POP
44745: POP
// end ;
44746: LD_VAR 0 3
44750: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
44751: LD_INT 0
44753: PPUSH
// vc_chassis := chassis ;
44754: LD_ADDR_OWVAR 37
44758: PUSH
44759: LD_VAR 0 1
44763: ST_TO_ADDR
// vc_engine := engine ;
44764: LD_ADDR_OWVAR 39
44768: PUSH
44769: LD_VAR 0 2
44773: ST_TO_ADDR
// vc_control := control ;
44774: LD_ADDR_OWVAR 38
44778: PUSH
44779: LD_VAR 0 3
44783: ST_TO_ADDR
// vc_weapon := weapon ;
44784: LD_ADDR_OWVAR 40
44788: PUSH
44789: LD_VAR 0 4
44793: ST_TO_ADDR
// vc_fuel_battery := fuel ;
44794: LD_ADDR_OWVAR 41
44798: PUSH
44799: LD_VAR 0 5
44803: ST_TO_ADDR
// end ;
44804: LD_VAR 0 6
44808: RET
// export function WantPlant ( unit ) ; var task ; begin
44809: LD_INT 0
44811: PPUSH
44812: PPUSH
// result := false ;
44813: LD_ADDR_VAR 0 2
44817: PUSH
44818: LD_INT 0
44820: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
44821: LD_ADDR_VAR 0 3
44825: PUSH
44826: LD_VAR 0 1
44830: PPUSH
44831: CALL_OW 437
44835: ST_TO_ADDR
// if task then
44836: LD_VAR 0 3
44840: IFFALSE 44868
// if task [ 1 ] [ 1 ] = p then
44842: LD_VAR 0 3
44846: PUSH
44847: LD_INT 1
44849: ARRAY
44850: PUSH
44851: LD_INT 1
44853: ARRAY
44854: PUSH
44855: LD_STRING p
44857: EQUAL
44858: IFFALSE 44868
// result := true ;
44860: LD_ADDR_VAR 0 2
44864: PUSH
44865: LD_INT 1
44867: ST_TO_ADDR
// end ;
44868: LD_VAR 0 2
44872: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
44873: LD_INT 0
44875: PPUSH
44876: PPUSH
44877: PPUSH
44878: PPUSH
// if pos < 1 then
44879: LD_VAR 0 2
44883: PUSH
44884: LD_INT 1
44886: LESS
44887: IFFALSE 44891
// exit ;
44889: GO 45194
// if pos = 1 then
44891: LD_VAR 0 2
44895: PUSH
44896: LD_INT 1
44898: EQUAL
44899: IFFALSE 44932
// result := Replace ( arr , pos [ 1 ] , value ) else
44901: LD_ADDR_VAR 0 4
44905: PUSH
44906: LD_VAR 0 1
44910: PPUSH
44911: LD_VAR 0 2
44915: PUSH
44916: LD_INT 1
44918: ARRAY
44919: PPUSH
44920: LD_VAR 0 3
44924: PPUSH
44925: CALL_OW 1
44929: ST_TO_ADDR
44930: GO 45194
// begin tmp := arr ;
44932: LD_ADDR_VAR 0 6
44936: PUSH
44937: LD_VAR 0 1
44941: ST_TO_ADDR
// s_arr := [ tmp ] ;
44942: LD_ADDR_VAR 0 7
44946: PUSH
44947: LD_VAR 0 6
44951: PUSH
44952: EMPTY
44953: LIST
44954: ST_TO_ADDR
// for i = 1 to pos - 1 do
44955: LD_ADDR_VAR 0 5
44959: PUSH
44960: DOUBLE
44961: LD_INT 1
44963: DEC
44964: ST_TO_ADDR
44965: LD_VAR 0 2
44969: PUSH
44970: LD_INT 1
44972: MINUS
44973: PUSH
44974: FOR_TO
44975: IFFALSE 45020
// begin tmp := tmp [ pos [ i ] ] ;
44977: LD_ADDR_VAR 0 6
44981: PUSH
44982: LD_VAR 0 6
44986: PUSH
44987: LD_VAR 0 2
44991: PUSH
44992: LD_VAR 0 5
44996: ARRAY
44997: ARRAY
44998: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
44999: LD_ADDR_VAR 0 7
45003: PUSH
45004: LD_VAR 0 7
45008: PUSH
45009: LD_VAR 0 6
45013: PUSH
45014: EMPTY
45015: LIST
45016: ADD
45017: ST_TO_ADDR
// end ;
45018: GO 44974
45020: POP
45021: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
45022: LD_ADDR_VAR 0 6
45026: PUSH
45027: LD_VAR 0 6
45031: PPUSH
45032: LD_VAR 0 2
45036: PUSH
45037: LD_VAR 0 2
45041: ARRAY
45042: PPUSH
45043: LD_VAR 0 3
45047: PPUSH
45048: CALL_OW 1
45052: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
45053: LD_ADDR_VAR 0 7
45057: PUSH
45058: LD_VAR 0 7
45062: PPUSH
45063: LD_VAR 0 7
45067: PPUSH
45068: LD_VAR 0 6
45072: PPUSH
45073: CALL_OW 1
45077: ST_TO_ADDR
// for i = s_arr downto 2 do
45078: LD_ADDR_VAR 0 5
45082: PUSH
45083: DOUBLE
45084: LD_VAR 0 7
45088: INC
45089: ST_TO_ADDR
45090: LD_INT 2
45092: PUSH
45093: FOR_DOWNTO
45094: IFFALSE 45178
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
45096: LD_ADDR_VAR 0 6
45100: PUSH
45101: LD_VAR 0 7
45105: PUSH
45106: LD_VAR 0 5
45110: PUSH
45111: LD_INT 1
45113: MINUS
45114: ARRAY
45115: PPUSH
45116: LD_VAR 0 2
45120: PUSH
45121: LD_VAR 0 5
45125: PUSH
45126: LD_INT 1
45128: MINUS
45129: ARRAY
45130: PPUSH
45131: LD_VAR 0 7
45135: PUSH
45136: LD_VAR 0 5
45140: ARRAY
45141: PPUSH
45142: CALL_OW 1
45146: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
45147: LD_ADDR_VAR 0 7
45151: PUSH
45152: LD_VAR 0 7
45156: PPUSH
45157: LD_VAR 0 5
45161: PUSH
45162: LD_INT 1
45164: MINUS
45165: PPUSH
45166: LD_VAR 0 6
45170: PPUSH
45171: CALL_OW 1
45175: ST_TO_ADDR
// end ;
45176: GO 45093
45178: POP
45179: POP
// result := s_arr [ 1 ] ;
45180: LD_ADDR_VAR 0 4
45184: PUSH
45185: LD_VAR 0 7
45189: PUSH
45190: LD_INT 1
45192: ARRAY
45193: ST_TO_ADDR
// end ; end ;
45194: LD_VAR 0 4
45198: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
45199: LD_INT 0
45201: PPUSH
45202: PPUSH
// if not list then
45203: LD_VAR 0 1
45207: NOT
45208: IFFALSE 45212
// exit ;
45210: GO 45303
// i := list [ pos1 ] ;
45212: LD_ADDR_VAR 0 5
45216: PUSH
45217: LD_VAR 0 1
45221: PUSH
45222: LD_VAR 0 2
45226: ARRAY
45227: ST_TO_ADDR
// if not i then
45228: LD_VAR 0 5
45232: NOT
45233: IFFALSE 45237
// exit ;
45235: GO 45303
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
45237: LD_ADDR_VAR 0 1
45241: PUSH
45242: LD_VAR 0 1
45246: PPUSH
45247: LD_VAR 0 2
45251: PPUSH
45252: LD_VAR 0 1
45256: PUSH
45257: LD_VAR 0 3
45261: ARRAY
45262: PPUSH
45263: CALL_OW 1
45267: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
45268: LD_ADDR_VAR 0 1
45272: PUSH
45273: LD_VAR 0 1
45277: PPUSH
45278: LD_VAR 0 3
45282: PPUSH
45283: LD_VAR 0 5
45287: PPUSH
45288: CALL_OW 1
45292: ST_TO_ADDR
// result := list ;
45293: LD_ADDR_VAR 0 4
45297: PUSH
45298: LD_VAR 0 1
45302: ST_TO_ADDR
// end ;
45303: LD_VAR 0 4
45307: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
45308: LD_INT 0
45310: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
45311: LD_ADDR_VAR 0 5
45315: PUSH
45316: LD_VAR 0 1
45320: PPUSH
45321: CALL_OW 250
45325: PPUSH
45326: LD_VAR 0 1
45330: PPUSH
45331: CALL_OW 251
45335: PPUSH
45336: LD_VAR 0 2
45340: PPUSH
45341: LD_VAR 0 3
45345: PPUSH
45346: LD_VAR 0 4
45350: PPUSH
45351: CALL 45361 0 5
45355: ST_TO_ADDR
// end ;
45356: LD_VAR 0 5
45360: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
45361: LD_INT 0
45363: PPUSH
45364: PPUSH
45365: PPUSH
45366: PPUSH
// if not list then
45367: LD_VAR 0 3
45371: NOT
45372: IFFALSE 45376
// exit ;
45374: GO 45764
// result := [ ] ;
45376: LD_ADDR_VAR 0 6
45380: PUSH
45381: EMPTY
45382: ST_TO_ADDR
// for i in list do
45383: LD_ADDR_VAR 0 7
45387: PUSH
45388: LD_VAR 0 3
45392: PUSH
45393: FOR_IN
45394: IFFALSE 45596
// begin tmp := GetDistUnitXY ( i , x , y ) ;
45396: LD_ADDR_VAR 0 9
45400: PUSH
45401: LD_VAR 0 7
45405: PPUSH
45406: LD_VAR 0 1
45410: PPUSH
45411: LD_VAR 0 2
45415: PPUSH
45416: CALL_OW 297
45420: ST_TO_ADDR
// if not result then
45421: LD_VAR 0 6
45425: NOT
45426: IFFALSE 45452
// result := [ [ i , tmp ] ] else
45428: LD_ADDR_VAR 0 6
45432: PUSH
45433: LD_VAR 0 7
45437: PUSH
45438: LD_VAR 0 9
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: EMPTY
45448: LIST
45449: ST_TO_ADDR
45450: GO 45594
// begin if result [ result ] [ 2 ] < tmp then
45452: LD_VAR 0 6
45456: PUSH
45457: LD_VAR 0 6
45461: ARRAY
45462: PUSH
45463: LD_INT 2
45465: ARRAY
45466: PUSH
45467: LD_VAR 0 9
45471: LESS
45472: IFFALSE 45514
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
45474: LD_ADDR_VAR 0 6
45478: PUSH
45479: LD_VAR 0 6
45483: PPUSH
45484: LD_VAR 0 6
45488: PUSH
45489: LD_INT 1
45491: PLUS
45492: PPUSH
45493: LD_VAR 0 7
45497: PUSH
45498: LD_VAR 0 9
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PPUSH
45507: CALL_OW 2
45511: ST_TO_ADDR
45512: GO 45594
// for j = 1 to result do
45514: LD_ADDR_VAR 0 8
45518: PUSH
45519: DOUBLE
45520: LD_INT 1
45522: DEC
45523: ST_TO_ADDR
45524: LD_VAR 0 6
45528: PUSH
45529: FOR_TO
45530: IFFALSE 45592
// begin if tmp < result [ j ] [ 2 ] then
45532: LD_VAR 0 9
45536: PUSH
45537: LD_VAR 0 6
45541: PUSH
45542: LD_VAR 0 8
45546: ARRAY
45547: PUSH
45548: LD_INT 2
45550: ARRAY
45551: LESS
45552: IFFALSE 45590
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45554: LD_ADDR_VAR 0 6
45558: PUSH
45559: LD_VAR 0 6
45563: PPUSH
45564: LD_VAR 0 8
45568: PPUSH
45569: LD_VAR 0 7
45573: PUSH
45574: LD_VAR 0 9
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: PPUSH
45583: CALL_OW 2
45587: ST_TO_ADDR
// break ;
45588: GO 45592
// end ; end ;
45590: GO 45529
45592: POP
45593: POP
// end ; end ;
45594: GO 45393
45596: POP
45597: POP
// if result and not asc then
45598: LD_VAR 0 6
45602: PUSH
45603: LD_VAR 0 4
45607: NOT
45608: AND
45609: IFFALSE 45684
// begin tmp := result ;
45611: LD_ADDR_VAR 0 9
45615: PUSH
45616: LD_VAR 0 6
45620: ST_TO_ADDR
// for i = tmp downto 1 do
45621: LD_ADDR_VAR 0 7
45625: PUSH
45626: DOUBLE
45627: LD_VAR 0 9
45631: INC
45632: ST_TO_ADDR
45633: LD_INT 1
45635: PUSH
45636: FOR_DOWNTO
45637: IFFALSE 45682
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
45639: LD_ADDR_VAR 0 6
45643: PUSH
45644: LD_VAR 0 6
45648: PPUSH
45649: LD_VAR 0 9
45653: PUSH
45654: LD_VAR 0 7
45658: MINUS
45659: PUSH
45660: LD_INT 1
45662: PLUS
45663: PPUSH
45664: LD_VAR 0 9
45668: PUSH
45669: LD_VAR 0 7
45673: ARRAY
45674: PPUSH
45675: CALL_OW 1
45679: ST_TO_ADDR
45680: GO 45636
45682: POP
45683: POP
// end ; tmp := [ ] ;
45684: LD_ADDR_VAR 0 9
45688: PUSH
45689: EMPTY
45690: ST_TO_ADDR
// if mode then
45691: LD_VAR 0 5
45695: IFFALSE 45764
// begin for i = 1 to result do
45697: LD_ADDR_VAR 0 7
45701: PUSH
45702: DOUBLE
45703: LD_INT 1
45705: DEC
45706: ST_TO_ADDR
45707: LD_VAR 0 6
45711: PUSH
45712: FOR_TO
45713: IFFALSE 45752
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
45715: LD_ADDR_VAR 0 9
45719: PUSH
45720: LD_VAR 0 9
45724: PPUSH
45725: LD_VAR 0 7
45729: PPUSH
45730: LD_VAR 0 6
45734: PUSH
45735: LD_VAR 0 7
45739: ARRAY
45740: PUSH
45741: LD_INT 1
45743: ARRAY
45744: PPUSH
45745: CALL_OW 1
45749: ST_TO_ADDR
45750: GO 45712
45752: POP
45753: POP
// result := tmp ;
45754: LD_ADDR_VAR 0 6
45758: PUSH
45759: LD_VAR 0 9
45763: ST_TO_ADDR
// end ; end ;
45764: LD_VAR 0 6
45768: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
45769: LD_INT 0
45771: PPUSH
45772: PPUSH
45773: PPUSH
45774: PPUSH
45775: PPUSH
45776: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
45777: LD_ADDR_VAR 0 5
45781: PUSH
45782: LD_INT 0
45784: PUSH
45785: LD_INT 0
45787: PUSH
45788: LD_INT 0
45790: PUSH
45791: EMPTY
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: ST_TO_ADDR
// if not x or not y then
45799: LD_VAR 0 2
45803: NOT
45804: PUSH
45805: LD_VAR 0 3
45809: NOT
45810: OR
45811: IFFALSE 45815
// exit ;
45813: GO 47465
// if not range then
45815: LD_VAR 0 4
45819: NOT
45820: IFFALSE 45830
// range := 10 ;
45822: LD_ADDR_VAR 0 4
45826: PUSH
45827: LD_INT 10
45829: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45830: LD_ADDR_VAR 0 8
45834: PUSH
45835: LD_INT 81
45837: PUSH
45838: LD_VAR 0 1
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: PUSH
45847: LD_INT 92
45849: PUSH
45850: LD_VAR 0 2
45854: PUSH
45855: LD_VAR 0 3
45859: PUSH
45860: LD_VAR 0 4
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 3
45873: PUSH
45874: LD_INT 21
45876: PUSH
45877: LD_INT 3
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: LIST
45892: PPUSH
45893: CALL_OW 69
45897: ST_TO_ADDR
// if not tmp then
45898: LD_VAR 0 8
45902: NOT
45903: IFFALSE 45907
// exit ;
45905: GO 47465
// for i in tmp do
45907: LD_ADDR_VAR 0 6
45911: PUSH
45912: LD_VAR 0 8
45916: PUSH
45917: FOR_IN
45918: IFFALSE 47440
// begin points := [ 0 , 0 , 0 ] ;
45920: LD_ADDR_VAR 0 9
45924: PUSH
45925: LD_INT 0
45927: PUSH
45928: LD_INT 0
45930: PUSH
45931: LD_INT 0
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: LIST
45938: ST_TO_ADDR
// bpoints := 1 ;
45939: LD_ADDR_VAR 0 10
45943: PUSH
45944: LD_INT 1
45946: ST_TO_ADDR
// case GetType ( i ) of unit_human :
45947: LD_VAR 0 6
45951: PPUSH
45952: CALL_OW 247
45956: PUSH
45957: LD_INT 1
45959: DOUBLE
45960: EQUAL
45961: IFTRUE 45965
45963: GO 46543
45965: POP
// begin if GetClass ( i ) = 1 then
45966: LD_VAR 0 6
45970: PPUSH
45971: CALL_OW 257
45975: PUSH
45976: LD_INT 1
45978: EQUAL
45979: IFFALSE 46000
// points := [ 10 , 5 , 3 ] ;
45981: LD_ADDR_VAR 0 9
45985: PUSH
45986: LD_INT 10
45988: PUSH
45989: LD_INT 5
45991: PUSH
45992: LD_INT 3
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: LIST
45999: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
46000: LD_VAR 0 6
46004: PPUSH
46005: CALL_OW 257
46009: PUSH
46010: LD_INT 2
46012: PUSH
46013: LD_INT 3
46015: PUSH
46016: LD_INT 4
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: LIST
46023: IN
46024: IFFALSE 46045
// points := [ 3 , 2 , 1 ] ;
46026: LD_ADDR_VAR 0 9
46030: PUSH
46031: LD_INT 3
46033: PUSH
46034: LD_INT 2
46036: PUSH
46037: LD_INT 1
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: LIST
46044: ST_TO_ADDR
// if GetClass ( i ) = 5 then
46045: LD_VAR 0 6
46049: PPUSH
46050: CALL_OW 257
46054: PUSH
46055: LD_INT 5
46057: EQUAL
46058: IFFALSE 46079
// points := [ 130 , 5 , 2 ] ;
46060: LD_ADDR_VAR 0 9
46064: PUSH
46065: LD_INT 130
46067: PUSH
46068: LD_INT 5
46070: PUSH
46071: LD_INT 2
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: LIST
46078: ST_TO_ADDR
// if GetClass ( i ) = 8 then
46079: LD_VAR 0 6
46083: PPUSH
46084: CALL_OW 257
46088: PUSH
46089: LD_INT 8
46091: EQUAL
46092: IFFALSE 46113
// points := [ 35 , 35 , 30 ] ;
46094: LD_ADDR_VAR 0 9
46098: PUSH
46099: LD_INT 35
46101: PUSH
46102: LD_INT 35
46104: PUSH
46105: LD_INT 30
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: LIST
46112: ST_TO_ADDR
// if GetClass ( i ) = 9 then
46113: LD_VAR 0 6
46117: PPUSH
46118: CALL_OW 257
46122: PUSH
46123: LD_INT 9
46125: EQUAL
46126: IFFALSE 46147
// points := [ 20 , 55 , 40 ] ;
46128: LD_ADDR_VAR 0 9
46132: PUSH
46133: LD_INT 20
46135: PUSH
46136: LD_INT 55
46138: PUSH
46139: LD_INT 40
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: LIST
46146: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
46147: LD_VAR 0 6
46151: PPUSH
46152: CALL_OW 257
46156: PUSH
46157: LD_INT 12
46159: PUSH
46160: LD_INT 16
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: IN
46167: IFFALSE 46188
// points := [ 5 , 3 , 2 ] ;
46169: LD_ADDR_VAR 0 9
46173: PUSH
46174: LD_INT 5
46176: PUSH
46177: LD_INT 3
46179: PUSH
46180: LD_INT 2
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: LIST
46187: ST_TO_ADDR
// if GetClass ( i ) = 17 then
46188: LD_VAR 0 6
46192: PPUSH
46193: CALL_OW 257
46197: PUSH
46198: LD_INT 17
46200: EQUAL
46201: IFFALSE 46222
// points := [ 100 , 50 , 75 ] ;
46203: LD_ADDR_VAR 0 9
46207: PUSH
46208: LD_INT 100
46210: PUSH
46211: LD_INT 50
46213: PUSH
46214: LD_INT 75
46216: PUSH
46217: EMPTY
46218: LIST
46219: LIST
46220: LIST
46221: ST_TO_ADDR
// if GetClass ( i ) = 15 then
46222: LD_VAR 0 6
46226: PPUSH
46227: CALL_OW 257
46231: PUSH
46232: LD_INT 15
46234: EQUAL
46235: IFFALSE 46256
// points := [ 10 , 5 , 3 ] ;
46237: LD_ADDR_VAR 0 9
46241: PUSH
46242: LD_INT 10
46244: PUSH
46245: LD_INT 5
46247: PUSH
46248: LD_INT 3
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: LIST
46255: ST_TO_ADDR
// if GetClass ( i ) = 14 then
46256: LD_VAR 0 6
46260: PPUSH
46261: CALL_OW 257
46265: PUSH
46266: LD_INT 14
46268: EQUAL
46269: IFFALSE 46290
// points := [ 10 , 0 , 0 ] ;
46271: LD_ADDR_VAR 0 9
46275: PUSH
46276: LD_INT 10
46278: PUSH
46279: LD_INT 0
46281: PUSH
46282: LD_INT 0
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: LIST
46289: ST_TO_ADDR
// if GetClass ( i ) = 11 then
46290: LD_VAR 0 6
46294: PPUSH
46295: CALL_OW 257
46299: PUSH
46300: LD_INT 11
46302: EQUAL
46303: IFFALSE 46324
// points := [ 30 , 10 , 5 ] ;
46305: LD_ADDR_VAR 0 9
46309: PUSH
46310: LD_INT 30
46312: PUSH
46313: LD_INT 10
46315: PUSH
46316: LD_INT 5
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: LIST
46323: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
46324: LD_VAR 0 1
46328: PPUSH
46329: LD_INT 5
46331: PPUSH
46332: CALL_OW 321
46336: PUSH
46337: LD_INT 2
46339: EQUAL
46340: IFFALSE 46357
// bpoints := bpoints * 1.8 ;
46342: LD_ADDR_VAR 0 10
46346: PUSH
46347: LD_VAR 0 10
46351: PUSH
46352: LD_REAL  1.80000000000000E+0000
46355: MUL
46356: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
46357: LD_VAR 0 6
46361: PPUSH
46362: CALL_OW 257
46366: PUSH
46367: LD_INT 1
46369: PUSH
46370: LD_INT 2
46372: PUSH
46373: LD_INT 3
46375: PUSH
46376: LD_INT 4
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: LIST
46383: LIST
46384: IN
46385: PUSH
46386: LD_VAR 0 1
46390: PPUSH
46391: LD_INT 51
46393: PPUSH
46394: CALL_OW 321
46398: PUSH
46399: LD_INT 2
46401: EQUAL
46402: AND
46403: IFFALSE 46420
// bpoints := bpoints * 1.2 ;
46405: LD_ADDR_VAR 0 10
46409: PUSH
46410: LD_VAR 0 10
46414: PUSH
46415: LD_REAL  1.20000000000000E+0000
46418: MUL
46419: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
46420: LD_VAR 0 6
46424: PPUSH
46425: CALL_OW 257
46429: PUSH
46430: LD_INT 5
46432: PUSH
46433: LD_INT 7
46435: PUSH
46436: LD_INT 9
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: LIST
46443: IN
46444: PUSH
46445: LD_VAR 0 1
46449: PPUSH
46450: LD_INT 52
46452: PPUSH
46453: CALL_OW 321
46457: PUSH
46458: LD_INT 2
46460: EQUAL
46461: AND
46462: IFFALSE 46479
// bpoints := bpoints * 1.5 ;
46464: LD_ADDR_VAR 0 10
46468: PUSH
46469: LD_VAR 0 10
46473: PUSH
46474: LD_REAL  1.50000000000000E+0000
46477: MUL
46478: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
46479: LD_VAR 0 1
46483: PPUSH
46484: LD_INT 66
46486: PPUSH
46487: CALL_OW 321
46491: PUSH
46492: LD_INT 2
46494: EQUAL
46495: IFFALSE 46512
// bpoints := bpoints * 1.1 ;
46497: LD_ADDR_VAR 0 10
46501: PUSH
46502: LD_VAR 0 10
46506: PUSH
46507: LD_REAL  1.10000000000000E+0000
46510: MUL
46511: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
46512: LD_ADDR_VAR 0 10
46516: PUSH
46517: LD_VAR 0 10
46521: PUSH
46522: LD_VAR 0 6
46526: PPUSH
46527: LD_INT 1
46529: PPUSH
46530: CALL_OW 259
46534: PUSH
46535: LD_REAL  1.15000000000000E+0000
46538: MUL
46539: MUL
46540: ST_TO_ADDR
// end ; unit_vehicle :
46541: GO 47369
46543: LD_INT 2
46545: DOUBLE
46546: EQUAL
46547: IFTRUE 46551
46549: GO 47357
46551: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
46552: LD_VAR 0 6
46556: PPUSH
46557: CALL_OW 264
46561: PUSH
46562: LD_INT 2
46564: PUSH
46565: LD_INT 42
46567: PUSH
46568: LD_INT 24
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: LIST
46575: IN
46576: IFFALSE 46597
// points := [ 25 , 5 , 3 ] ;
46578: LD_ADDR_VAR 0 9
46582: PUSH
46583: LD_INT 25
46585: PUSH
46586: LD_INT 5
46588: PUSH
46589: LD_INT 3
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: LIST
46596: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
46597: LD_VAR 0 6
46601: PPUSH
46602: CALL_OW 264
46606: PUSH
46607: LD_INT 4
46609: PUSH
46610: LD_INT 43
46612: PUSH
46613: LD_INT 25
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: LIST
46620: IN
46621: IFFALSE 46642
// points := [ 40 , 15 , 5 ] ;
46623: LD_ADDR_VAR 0 9
46627: PUSH
46628: LD_INT 40
46630: PUSH
46631: LD_INT 15
46633: PUSH
46634: LD_INT 5
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: LIST
46641: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
46642: LD_VAR 0 6
46646: PPUSH
46647: CALL_OW 264
46651: PUSH
46652: LD_INT 3
46654: PUSH
46655: LD_INT 23
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: IN
46662: IFFALSE 46683
// points := [ 7 , 25 , 8 ] ;
46664: LD_ADDR_VAR 0 9
46668: PUSH
46669: LD_INT 7
46671: PUSH
46672: LD_INT 25
46674: PUSH
46675: LD_INT 8
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: LIST
46682: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
46683: LD_VAR 0 6
46687: PPUSH
46688: CALL_OW 264
46692: PUSH
46693: LD_INT 5
46695: PUSH
46696: LD_INT 27
46698: PUSH
46699: LD_INT 44
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: LIST
46706: IN
46707: IFFALSE 46728
// points := [ 14 , 50 , 16 ] ;
46709: LD_ADDR_VAR 0 9
46713: PUSH
46714: LD_INT 14
46716: PUSH
46717: LD_INT 50
46719: PUSH
46720: LD_INT 16
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: LIST
46727: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
46728: LD_VAR 0 6
46732: PPUSH
46733: CALL_OW 264
46737: PUSH
46738: LD_INT 6
46740: PUSH
46741: LD_INT 46
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: IN
46748: IFFALSE 46769
// points := [ 32 , 120 , 70 ] ;
46750: LD_ADDR_VAR 0 9
46754: PUSH
46755: LD_INT 32
46757: PUSH
46758: LD_INT 120
46760: PUSH
46761: LD_INT 70
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: LIST
46768: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
46769: LD_VAR 0 6
46773: PPUSH
46774: CALL_OW 264
46778: PUSH
46779: LD_INT 7
46781: PUSH
46782: LD_INT 28
46784: PUSH
46785: LD_INT 45
46787: PUSH
46788: LD_INT 92
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: LIST
46795: LIST
46796: IN
46797: IFFALSE 46818
// points := [ 35 , 20 , 45 ] ;
46799: LD_ADDR_VAR 0 9
46803: PUSH
46804: LD_INT 35
46806: PUSH
46807: LD_INT 20
46809: PUSH
46810: LD_INT 45
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: LIST
46817: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
46818: LD_VAR 0 6
46822: PPUSH
46823: CALL_OW 264
46827: PUSH
46828: LD_INT 47
46830: PUSH
46831: EMPTY
46832: LIST
46833: IN
46834: IFFALSE 46855
// points := [ 67 , 45 , 75 ] ;
46836: LD_ADDR_VAR 0 9
46840: PUSH
46841: LD_INT 67
46843: PUSH
46844: LD_INT 45
46846: PUSH
46847: LD_INT 75
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: LIST
46854: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
46855: LD_VAR 0 6
46859: PPUSH
46860: CALL_OW 264
46864: PUSH
46865: LD_INT 26
46867: PUSH
46868: EMPTY
46869: LIST
46870: IN
46871: IFFALSE 46892
// points := [ 120 , 30 , 80 ] ;
46873: LD_ADDR_VAR 0 9
46877: PUSH
46878: LD_INT 120
46880: PUSH
46881: LD_INT 30
46883: PUSH
46884: LD_INT 80
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: LIST
46891: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
46892: LD_VAR 0 6
46896: PPUSH
46897: CALL_OW 264
46901: PUSH
46902: LD_INT 22
46904: PUSH
46905: EMPTY
46906: LIST
46907: IN
46908: IFFALSE 46929
// points := [ 40 , 1 , 1 ] ;
46910: LD_ADDR_VAR 0 9
46914: PUSH
46915: LD_INT 40
46917: PUSH
46918: LD_INT 1
46920: PUSH
46921: LD_INT 1
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: LIST
46928: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
46929: LD_VAR 0 6
46933: PPUSH
46934: CALL_OW 264
46938: PUSH
46939: LD_INT 29
46941: PUSH
46942: EMPTY
46943: LIST
46944: IN
46945: IFFALSE 46966
// points := [ 70 , 200 , 400 ] ;
46947: LD_ADDR_VAR 0 9
46951: PUSH
46952: LD_INT 70
46954: PUSH
46955: LD_INT 200
46957: PUSH
46958: LD_INT 400
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: LIST
46965: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
46966: LD_VAR 0 6
46970: PPUSH
46971: CALL_OW 264
46975: PUSH
46976: LD_INT 14
46978: PUSH
46979: LD_INT 53
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: IN
46986: IFFALSE 47007
// points := [ 40 , 10 , 20 ] ;
46988: LD_ADDR_VAR 0 9
46992: PUSH
46993: LD_INT 40
46995: PUSH
46996: LD_INT 10
46998: PUSH
46999: LD_INT 20
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: LIST
47006: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
47007: LD_VAR 0 6
47011: PPUSH
47012: CALL_OW 264
47016: PUSH
47017: LD_INT 9
47019: PUSH
47020: EMPTY
47021: LIST
47022: IN
47023: IFFALSE 47044
// points := [ 5 , 70 , 20 ] ;
47025: LD_ADDR_VAR 0 9
47029: PUSH
47030: LD_INT 5
47032: PUSH
47033: LD_INT 70
47035: PUSH
47036: LD_INT 20
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: LIST
47043: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
47044: LD_VAR 0 6
47048: PPUSH
47049: CALL_OW 264
47053: PUSH
47054: LD_INT 10
47056: PUSH
47057: EMPTY
47058: LIST
47059: IN
47060: IFFALSE 47081
// points := [ 35 , 110 , 70 ] ;
47062: LD_ADDR_VAR 0 9
47066: PUSH
47067: LD_INT 35
47069: PUSH
47070: LD_INT 110
47072: PUSH
47073: LD_INT 70
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: LIST
47080: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
47081: LD_VAR 0 6
47085: PPUSH
47086: CALL_OW 265
47090: PUSH
47091: LD_INT 25
47093: EQUAL
47094: IFFALSE 47115
// points := [ 80 , 65 , 100 ] ;
47096: LD_ADDR_VAR 0 9
47100: PUSH
47101: LD_INT 80
47103: PUSH
47104: LD_INT 65
47106: PUSH
47107: LD_INT 100
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: LIST
47114: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
47115: LD_VAR 0 6
47119: PPUSH
47120: CALL_OW 263
47124: PUSH
47125: LD_INT 1
47127: EQUAL
47128: IFFALSE 47163
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
47130: LD_ADDR_VAR 0 10
47134: PUSH
47135: LD_VAR 0 10
47139: PUSH
47140: LD_VAR 0 6
47144: PPUSH
47145: CALL_OW 311
47149: PPUSH
47150: LD_INT 3
47152: PPUSH
47153: CALL_OW 259
47157: PUSH
47158: LD_INT 4
47160: MUL
47161: MUL
47162: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
47163: LD_VAR 0 6
47167: PPUSH
47168: CALL_OW 263
47172: PUSH
47173: LD_INT 2
47175: EQUAL
47176: IFFALSE 47227
// begin j := IsControledBy ( i ) ;
47178: LD_ADDR_VAR 0 7
47182: PUSH
47183: LD_VAR 0 6
47187: PPUSH
47188: CALL_OW 312
47192: ST_TO_ADDR
// if j then
47193: LD_VAR 0 7
47197: IFFALSE 47227
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
47199: LD_ADDR_VAR 0 10
47203: PUSH
47204: LD_VAR 0 10
47208: PUSH
47209: LD_VAR 0 7
47213: PPUSH
47214: LD_INT 3
47216: PPUSH
47217: CALL_OW 259
47221: PUSH
47222: LD_INT 3
47224: MUL
47225: MUL
47226: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
47227: LD_VAR 0 6
47231: PPUSH
47232: CALL_OW 264
47236: PUSH
47237: LD_INT 5
47239: PUSH
47240: LD_INT 6
47242: PUSH
47243: LD_INT 46
47245: PUSH
47246: LD_INT 44
47248: PUSH
47249: LD_INT 47
47251: PUSH
47252: LD_INT 45
47254: PUSH
47255: LD_INT 28
47257: PUSH
47258: LD_INT 7
47260: PUSH
47261: LD_INT 27
47263: PUSH
47264: LD_INT 29
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: IN
47279: PUSH
47280: LD_VAR 0 1
47284: PPUSH
47285: LD_INT 52
47287: PPUSH
47288: CALL_OW 321
47292: PUSH
47293: LD_INT 2
47295: EQUAL
47296: AND
47297: IFFALSE 47314
// bpoints := bpoints * 1.2 ;
47299: LD_ADDR_VAR 0 10
47303: PUSH
47304: LD_VAR 0 10
47308: PUSH
47309: LD_REAL  1.20000000000000E+0000
47312: MUL
47313: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
47314: LD_VAR 0 6
47318: PPUSH
47319: CALL_OW 264
47323: PUSH
47324: LD_INT 6
47326: PUSH
47327: LD_INT 46
47329: PUSH
47330: LD_INT 47
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: LIST
47337: IN
47338: IFFALSE 47355
// bpoints := bpoints * 1.2 ;
47340: LD_ADDR_VAR 0 10
47344: PUSH
47345: LD_VAR 0 10
47349: PUSH
47350: LD_REAL  1.20000000000000E+0000
47353: MUL
47354: ST_TO_ADDR
// end ; unit_building :
47355: GO 47369
47357: LD_INT 3
47359: DOUBLE
47360: EQUAL
47361: IFTRUE 47365
47363: GO 47368
47365: POP
// ; end ;
47366: GO 47369
47368: POP
// for j = 1 to 3 do
47369: LD_ADDR_VAR 0 7
47373: PUSH
47374: DOUBLE
47375: LD_INT 1
47377: DEC
47378: ST_TO_ADDR
47379: LD_INT 3
47381: PUSH
47382: FOR_TO
47383: IFFALSE 47436
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
47385: LD_ADDR_VAR 0 5
47389: PUSH
47390: LD_VAR 0 5
47394: PPUSH
47395: LD_VAR 0 7
47399: PPUSH
47400: LD_VAR 0 5
47404: PUSH
47405: LD_VAR 0 7
47409: ARRAY
47410: PUSH
47411: LD_VAR 0 9
47415: PUSH
47416: LD_VAR 0 7
47420: ARRAY
47421: PUSH
47422: LD_VAR 0 10
47426: MUL
47427: PLUS
47428: PPUSH
47429: CALL_OW 1
47433: ST_TO_ADDR
47434: GO 47382
47436: POP
47437: POP
// end ;
47438: GO 45917
47440: POP
47441: POP
// result := Replace ( result , 4 , tmp ) ;
47442: LD_ADDR_VAR 0 5
47446: PUSH
47447: LD_VAR 0 5
47451: PPUSH
47452: LD_INT 4
47454: PPUSH
47455: LD_VAR 0 8
47459: PPUSH
47460: CALL_OW 1
47464: ST_TO_ADDR
// end ;
47465: LD_VAR 0 5
47469: RET
// export function DangerAtRange ( unit , range ) ; begin
47470: LD_INT 0
47472: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
47473: LD_ADDR_VAR 0 3
47477: PUSH
47478: LD_VAR 0 1
47482: PPUSH
47483: CALL_OW 255
47487: PPUSH
47488: LD_VAR 0 1
47492: PPUSH
47493: CALL_OW 250
47497: PPUSH
47498: LD_VAR 0 1
47502: PPUSH
47503: CALL_OW 251
47507: PPUSH
47508: LD_VAR 0 2
47512: PPUSH
47513: CALL 45769 0 4
47517: ST_TO_ADDR
// end ;
47518: LD_VAR 0 3
47522: RET
// export function DangerInArea ( side , area ) ; begin
47523: LD_INT 0
47525: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
47526: LD_ADDR_VAR 0 3
47530: PUSH
47531: LD_VAR 0 2
47535: PPUSH
47536: LD_INT 81
47538: PUSH
47539: LD_VAR 0 1
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PPUSH
47548: CALL_OW 70
47552: ST_TO_ADDR
// end ;
47553: LD_VAR 0 3
47557: RET
// export function IsExtension ( b ) ; begin
47558: LD_INT 0
47560: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
47561: LD_ADDR_VAR 0 2
47565: PUSH
47566: LD_VAR 0 1
47570: PUSH
47571: LD_INT 23
47573: PUSH
47574: LD_INT 20
47576: PUSH
47577: LD_INT 22
47579: PUSH
47580: LD_INT 17
47582: PUSH
47583: LD_INT 24
47585: PUSH
47586: LD_INT 21
47588: PUSH
47589: LD_INT 19
47591: PUSH
47592: LD_INT 16
47594: PUSH
47595: LD_INT 25
47597: PUSH
47598: LD_INT 18
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: IN
47613: ST_TO_ADDR
// end ;
47614: LD_VAR 0 2
47618: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
47619: LD_INT 0
47621: PPUSH
47622: PPUSH
47623: PPUSH
// result := [ ] ;
47624: LD_ADDR_VAR 0 4
47628: PUSH
47629: EMPTY
47630: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
47631: LD_ADDR_VAR 0 5
47635: PUSH
47636: LD_VAR 0 2
47640: PPUSH
47641: LD_INT 21
47643: PUSH
47644: LD_INT 3
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PPUSH
47651: CALL_OW 70
47655: ST_TO_ADDR
// if not tmp then
47656: LD_VAR 0 5
47660: NOT
47661: IFFALSE 47665
// exit ;
47663: GO 47729
// if checkLink then
47665: LD_VAR 0 3
47669: IFFALSE 47719
// begin for i in tmp do
47671: LD_ADDR_VAR 0 6
47675: PUSH
47676: LD_VAR 0 5
47680: PUSH
47681: FOR_IN
47682: IFFALSE 47717
// if GetBase ( i ) <> base then
47684: LD_VAR 0 6
47688: PPUSH
47689: CALL_OW 274
47693: PUSH
47694: LD_VAR 0 1
47698: NONEQUAL
47699: IFFALSE 47715
// ComLinkToBase ( base , i ) ;
47701: LD_VAR 0 1
47705: PPUSH
47706: LD_VAR 0 6
47710: PPUSH
47711: CALL_OW 169
47715: GO 47681
47717: POP
47718: POP
// end ; result := tmp ;
47719: LD_ADDR_VAR 0 4
47723: PUSH
47724: LD_VAR 0 5
47728: ST_TO_ADDR
// end ;
47729: LD_VAR 0 4
47733: RET
// export function ComComplete ( units , b ) ; var i ; begin
47734: LD_INT 0
47736: PPUSH
47737: PPUSH
// if not units then
47738: LD_VAR 0 1
47742: NOT
47743: IFFALSE 47747
// exit ;
47745: GO 47837
// for i in units do
47747: LD_ADDR_VAR 0 4
47751: PUSH
47752: LD_VAR 0 1
47756: PUSH
47757: FOR_IN
47758: IFFALSE 47835
// if BuildingStatus ( b ) = bs_build then
47760: LD_VAR 0 2
47764: PPUSH
47765: CALL_OW 461
47769: PUSH
47770: LD_INT 1
47772: EQUAL
47773: IFFALSE 47833
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
47775: LD_VAR 0 4
47779: PPUSH
47780: LD_STRING h
47782: PUSH
47783: LD_VAR 0 2
47787: PPUSH
47788: CALL_OW 250
47792: PUSH
47793: LD_VAR 0 2
47797: PPUSH
47798: CALL_OW 251
47802: PUSH
47803: LD_VAR 0 2
47807: PUSH
47808: LD_INT 0
47810: PUSH
47811: LD_INT 0
47813: PUSH
47814: LD_INT 0
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: LIST
47821: LIST
47822: LIST
47823: LIST
47824: LIST
47825: PUSH
47826: EMPTY
47827: LIST
47828: PPUSH
47829: CALL_OW 446
47833: GO 47757
47835: POP
47836: POP
// end ;
47837: LD_VAR 0 3
47841: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
47842: LD_INT 0
47844: PPUSH
47845: PPUSH
47846: PPUSH
47847: PPUSH
47848: PPUSH
47849: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
47850: LD_VAR 0 1
47854: NOT
47855: PUSH
47856: LD_VAR 0 1
47860: PPUSH
47861: CALL_OW 263
47865: PUSH
47866: LD_INT 2
47868: NONEQUAL
47869: OR
47870: IFFALSE 47874
// exit ;
47872: GO 48190
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
47874: LD_ADDR_VAR 0 6
47878: PUSH
47879: LD_INT 22
47881: PUSH
47882: LD_VAR 0 1
47886: PPUSH
47887: CALL_OW 255
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 2
47898: PUSH
47899: LD_INT 30
47901: PUSH
47902: LD_INT 36
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 34
47911: PUSH
47912: LD_INT 31
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: LIST
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PPUSH
47928: CALL_OW 69
47932: ST_TO_ADDR
// if not tmp then
47933: LD_VAR 0 6
47937: NOT
47938: IFFALSE 47942
// exit ;
47940: GO 48190
// result := [ ] ;
47942: LD_ADDR_VAR 0 2
47946: PUSH
47947: EMPTY
47948: ST_TO_ADDR
// for i in tmp do
47949: LD_ADDR_VAR 0 3
47953: PUSH
47954: LD_VAR 0 6
47958: PUSH
47959: FOR_IN
47960: IFFALSE 48031
// begin t := UnitsInside ( i ) ;
47962: LD_ADDR_VAR 0 4
47966: PUSH
47967: LD_VAR 0 3
47971: PPUSH
47972: CALL_OW 313
47976: ST_TO_ADDR
// if t then
47977: LD_VAR 0 4
47981: IFFALSE 48029
// for j in t do
47983: LD_ADDR_VAR 0 7
47987: PUSH
47988: LD_VAR 0 4
47992: PUSH
47993: FOR_IN
47994: IFFALSE 48027
// result := Replace ( result , result + 1 , j ) ;
47996: LD_ADDR_VAR 0 2
48000: PUSH
48001: LD_VAR 0 2
48005: PPUSH
48006: LD_VAR 0 2
48010: PUSH
48011: LD_INT 1
48013: PLUS
48014: PPUSH
48015: LD_VAR 0 7
48019: PPUSH
48020: CALL_OW 1
48024: ST_TO_ADDR
48025: GO 47993
48027: POP
48028: POP
// end ;
48029: GO 47959
48031: POP
48032: POP
// if not result then
48033: LD_VAR 0 2
48037: NOT
48038: IFFALSE 48042
// exit ;
48040: GO 48190
// mech := result [ 1 ] ;
48042: LD_ADDR_VAR 0 5
48046: PUSH
48047: LD_VAR 0 2
48051: PUSH
48052: LD_INT 1
48054: ARRAY
48055: ST_TO_ADDR
// if result > 1 then
48056: LD_VAR 0 2
48060: PUSH
48061: LD_INT 1
48063: GREATER
48064: IFFALSE 48176
// begin for i = 2 to result do
48066: LD_ADDR_VAR 0 3
48070: PUSH
48071: DOUBLE
48072: LD_INT 2
48074: DEC
48075: ST_TO_ADDR
48076: LD_VAR 0 2
48080: PUSH
48081: FOR_TO
48082: IFFALSE 48174
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
48084: LD_ADDR_VAR 0 4
48088: PUSH
48089: LD_VAR 0 2
48093: PUSH
48094: LD_VAR 0 3
48098: ARRAY
48099: PPUSH
48100: LD_INT 3
48102: PPUSH
48103: CALL_OW 259
48107: PUSH
48108: LD_VAR 0 2
48112: PUSH
48113: LD_VAR 0 3
48117: ARRAY
48118: PPUSH
48119: CALL_OW 432
48123: MINUS
48124: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
48125: LD_VAR 0 4
48129: PUSH
48130: LD_VAR 0 5
48134: PPUSH
48135: LD_INT 3
48137: PPUSH
48138: CALL_OW 259
48142: PUSH
48143: LD_VAR 0 5
48147: PPUSH
48148: CALL_OW 432
48152: MINUS
48153: GREATEREQUAL
48154: IFFALSE 48172
// mech := result [ i ] ;
48156: LD_ADDR_VAR 0 5
48160: PUSH
48161: LD_VAR 0 2
48165: PUSH
48166: LD_VAR 0 3
48170: ARRAY
48171: ST_TO_ADDR
// end ;
48172: GO 48081
48174: POP
48175: POP
// end ; ComLinkTo ( vehicle , mech ) ;
48176: LD_VAR 0 1
48180: PPUSH
48181: LD_VAR 0 5
48185: PPUSH
48186: CALL_OW 135
// end ;
48190: LD_VAR 0 2
48194: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
48195: LD_INT 0
48197: PPUSH
48198: PPUSH
48199: PPUSH
48200: PPUSH
48201: PPUSH
48202: PPUSH
48203: PPUSH
48204: PPUSH
48205: PPUSH
48206: PPUSH
48207: PPUSH
48208: PPUSH
48209: PPUSH
// result := [ ] ;
48210: LD_ADDR_VAR 0 7
48214: PUSH
48215: EMPTY
48216: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
48217: LD_VAR 0 1
48221: PPUSH
48222: CALL_OW 266
48226: PUSH
48227: LD_INT 0
48229: PUSH
48230: LD_INT 1
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: IN
48237: NOT
48238: IFFALSE 48242
// exit ;
48240: GO 49876
// if name then
48242: LD_VAR 0 3
48246: IFFALSE 48262
// SetBName ( base_dep , name ) ;
48248: LD_VAR 0 1
48252: PPUSH
48253: LD_VAR 0 3
48257: PPUSH
48258: CALL_OW 500
// base := GetBase ( base_dep ) ;
48262: LD_ADDR_VAR 0 15
48266: PUSH
48267: LD_VAR 0 1
48271: PPUSH
48272: CALL_OW 274
48276: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
48277: LD_ADDR_VAR 0 16
48281: PUSH
48282: LD_VAR 0 1
48286: PPUSH
48287: CALL_OW 255
48291: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
48292: LD_ADDR_VAR 0 17
48296: PUSH
48297: LD_VAR 0 1
48301: PPUSH
48302: CALL_OW 248
48306: ST_TO_ADDR
// if sources then
48307: LD_VAR 0 5
48311: IFFALSE 48358
// for i = 1 to 3 do
48313: LD_ADDR_VAR 0 8
48317: PUSH
48318: DOUBLE
48319: LD_INT 1
48321: DEC
48322: ST_TO_ADDR
48323: LD_INT 3
48325: PUSH
48326: FOR_TO
48327: IFFALSE 48356
// AddResourceType ( base , i , sources [ i ] ) ;
48329: LD_VAR 0 15
48333: PPUSH
48334: LD_VAR 0 8
48338: PPUSH
48339: LD_VAR 0 5
48343: PUSH
48344: LD_VAR 0 8
48348: ARRAY
48349: PPUSH
48350: CALL_OW 276
48354: GO 48326
48356: POP
48357: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
48358: LD_ADDR_VAR 0 18
48362: PUSH
48363: LD_VAR 0 15
48367: PPUSH
48368: LD_VAR 0 2
48372: PPUSH
48373: LD_INT 1
48375: PPUSH
48376: CALL 47619 0 3
48380: ST_TO_ADDR
// InitHc ;
48381: CALL_OW 19
// InitUc ;
48385: CALL_OW 18
// uc_side := side ;
48389: LD_ADDR_OWVAR 20
48393: PUSH
48394: LD_VAR 0 16
48398: ST_TO_ADDR
// uc_nation := nation ;
48399: LD_ADDR_OWVAR 21
48403: PUSH
48404: LD_VAR 0 17
48408: ST_TO_ADDR
// if buildings then
48409: LD_VAR 0 18
48413: IFFALSE 49735
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
48415: LD_ADDR_VAR 0 19
48419: PUSH
48420: LD_VAR 0 18
48424: PPUSH
48425: LD_INT 2
48427: PUSH
48428: LD_INT 30
48430: PUSH
48431: LD_INT 29
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 30
48440: PUSH
48441: LD_INT 30
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: LIST
48452: PPUSH
48453: CALL_OW 72
48457: ST_TO_ADDR
// if tmp then
48458: LD_VAR 0 19
48462: IFFALSE 48510
// for i in tmp do
48464: LD_ADDR_VAR 0 8
48468: PUSH
48469: LD_VAR 0 19
48473: PUSH
48474: FOR_IN
48475: IFFALSE 48508
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
48477: LD_VAR 0 8
48481: PPUSH
48482: CALL_OW 250
48486: PPUSH
48487: LD_VAR 0 8
48491: PPUSH
48492: CALL_OW 251
48496: PPUSH
48497: LD_VAR 0 16
48501: PPUSH
48502: CALL_OW 441
48506: GO 48474
48508: POP
48509: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
48510: LD_VAR 0 18
48514: PPUSH
48515: LD_INT 2
48517: PUSH
48518: LD_INT 30
48520: PUSH
48521: LD_INT 32
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 30
48530: PUSH
48531: LD_INT 33
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: LIST
48542: PPUSH
48543: CALL_OW 72
48547: IFFALSE 48635
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
48549: LD_ADDR_VAR 0 8
48553: PUSH
48554: LD_VAR 0 18
48558: PPUSH
48559: LD_INT 2
48561: PUSH
48562: LD_INT 30
48564: PUSH
48565: LD_INT 32
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 30
48574: PUSH
48575: LD_INT 33
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: LIST
48586: PPUSH
48587: CALL_OW 72
48591: PUSH
48592: FOR_IN
48593: IFFALSE 48633
// begin if not GetBWeapon ( i ) then
48595: LD_VAR 0 8
48599: PPUSH
48600: CALL_OW 269
48604: NOT
48605: IFFALSE 48631
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
48607: LD_VAR 0 8
48611: PPUSH
48612: LD_VAR 0 8
48616: PPUSH
48617: LD_VAR 0 2
48621: PPUSH
48622: CALL 49881 0 2
48626: PPUSH
48627: CALL_OW 431
// end ;
48631: GO 48592
48633: POP
48634: POP
// end ; for i = 1 to personel do
48635: LD_ADDR_VAR 0 8
48639: PUSH
48640: DOUBLE
48641: LD_INT 1
48643: DEC
48644: ST_TO_ADDR
48645: LD_VAR 0 6
48649: PUSH
48650: FOR_TO
48651: IFFALSE 49715
// begin if i > 4 then
48653: LD_VAR 0 8
48657: PUSH
48658: LD_INT 4
48660: GREATER
48661: IFFALSE 48665
// break ;
48663: GO 49715
// case i of 1 :
48665: LD_VAR 0 8
48669: PUSH
48670: LD_INT 1
48672: DOUBLE
48673: EQUAL
48674: IFTRUE 48678
48676: GO 48758
48678: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
48679: LD_ADDR_VAR 0 12
48683: PUSH
48684: LD_VAR 0 18
48688: PPUSH
48689: LD_INT 22
48691: PUSH
48692: LD_VAR 0 16
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_INT 58
48703: PUSH
48704: EMPTY
48705: LIST
48706: PUSH
48707: LD_INT 2
48709: PUSH
48710: LD_INT 30
48712: PUSH
48713: LD_INT 32
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: LD_INT 30
48722: PUSH
48723: LD_INT 4
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 30
48732: PUSH
48733: LD_INT 5
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: LIST
48744: LIST
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: LIST
48750: PPUSH
48751: CALL_OW 72
48755: ST_TO_ADDR
48756: GO 48980
48758: LD_INT 2
48760: DOUBLE
48761: EQUAL
48762: IFTRUE 48766
48764: GO 48828
48766: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
48767: LD_ADDR_VAR 0 12
48771: PUSH
48772: LD_VAR 0 18
48776: PPUSH
48777: LD_INT 22
48779: PUSH
48780: LD_VAR 0 16
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 2
48791: PUSH
48792: LD_INT 30
48794: PUSH
48795: LD_INT 0
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 30
48804: PUSH
48805: LD_INT 1
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: LIST
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PPUSH
48821: CALL_OW 72
48825: ST_TO_ADDR
48826: GO 48980
48828: LD_INT 3
48830: DOUBLE
48831: EQUAL
48832: IFTRUE 48836
48834: GO 48898
48836: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
48837: LD_ADDR_VAR 0 12
48841: PUSH
48842: LD_VAR 0 18
48846: PPUSH
48847: LD_INT 22
48849: PUSH
48850: LD_VAR 0 16
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: LD_INT 2
48861: PUSH
48862: LD_INT 30
48864: PUSH
48865: LD_INT 2
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 30
48874: PUSH
48875: LD_INT 3
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: LIST
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PPUSH
48891: CALL_OW 72
48895: ST_TO_ADDR
48896: GO 48980
48898: LD_INT 4
48900: DOUBLE
48901: EQUAL
48902: IFTRUE 48906
48904: GO 48979
48906: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
48907: LD_ADDR_VAR 0 12
48911: PUSH
48912: LD_VAR 0 18
48916: PPUSH
48917: LD_INT 22
48919: PUSH
48920: LD_VAR 0 16
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 2
48931: PUSH
48932: LD_INT 30
48934: PUSH
48935: LD_INT 6
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 30
48944: PUSH
48945: LD_INT 7
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 30
48954: PUSH
48955: LD_INT 8
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PPUSH
48972: CALL_OW 72
48976: ST_TO_ADDR
48977: GO 48980
48979: POP
// if i = 1 then
48980: LD_VAR 0 8
48984: PUSH
48985: LD_INT 1
48987: EQUAL
48988: IFFALSE 49099
// begin tmp := [ ] ;
48990: LD_ADDR_VAR 0 19
48994: PUSH
48995: EMPTY
48996: ST_TO_ADDR
// for j in f do
48997: LD_ADDR_VAR 0 9
49001: PUSH
49002: LD_VAR 0 12
49006: PUSH
49007: FOR_IN
49008: IFFALSE 49081
// if GetBType ( j ) = b_bunker then
49010: LD_VAR 0 9
49014: PPUSH
49015: CALL_OW 266
49019: PUSH
49020: LD_INT 32
49022: EQUAL
49023: IFFALSE 49050
// tmp := Insert ( tmp , 1 , j ) else
49025: LD_ADDR_VAR 0 19
49029: PUSH
49030: LD_VAR 0 19
49034: PPUSH
49035: LD_INT 1
49037: PPUSH
49038: LD_VAR 0 9
49042: PPUSH
49043: CALL_OW 2
49047: ST_TO_ADDR
49048: GO 49079
// tmp := Insert ( tmp , tmp + 1 , j ) ;
49050: LD_ADDR_VAR 0 19
49054: PUSH
49055: LD_VAR 0 19
49059: PPUSH
49060: LD_VAR 0 19
49064: PUSH
49065: LD_INT 1
49067: PLUS
49068: PPUSH
49069: LD_VAR 0 9
49073: PPUSH
49074: CALL_OW 2
49078: ST_TO_ADDR
49079: GO 49007
49081: POP
49082: POP
// if tmp then
49083: LD_VAR 0 19
49087: IFFALSE 49099
// f := tmp ;
49089: LD_ADDR_VAR 0 12
49093: PUSH
49094: LD_VAR 0 19
49098: ST_TO_ADDR
// end ; x := personel [ i ] ;
49099: LD_ADDR_VAR 0 13
49103: PUSH
49104: LD_VAR 0 6
49108: PUSH
49109: LD_VAR 0 8
49113: ARRAY
49114: ST_TO_ADDR
// if x = - 1 then
49115: LD_VAR 0 13
49119: PUSH
49120: LD_INT 1
49122: NEG
49123: EQUAL
49124: IFFALSE 49333
// begin for j in f do
49126: LD_ADDR_VAR 0 9
49130: PUSH
49131: LD_VAR 0 12
49135: PUSH
49136: FOR_IN
49137: IFFALSE 49329
// repeat InitHc ;
49139: CALL_OW 19
// if GetBType ( j ) = b_barracks then
49143: LD_VAR 0 9
49147: PPUSH
49148: CALL_OW 266
49152: PUSH
49153: LD_INT 5
49155: EQUAL
49156: IFFALSE 49226
// begin if UnitsInside ( j ) < 3 then
49158: LD_VAR 0 9
49162: PPUSH
49163: CALL_OW 313
49167: PUSH
49168: LD_INT 3
49170: LESS
49171: IFFALSE 49207
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49173: LD_INT 0
49175: PPUSH
49176: LD_INT 5
49178: PUSH
49179: LD_INT 8
49181: PUSH
49182: LD_INT 9
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: LIST
49189: PUSH
49190: LD_VAR 0 17
49194: ARRAY
49195: PPUSH
49196: LD_VAR 0 4
49200: PPUSH
49201: CALL_OW 380
49205: GO 49224
// PrepareHuman ( false , i , skill ) ;
49207: LD_INT 0
49209: PPUSH
49210: LD_VAR 0 8
49214: PPUSH
49215: LD_VAR 0 4
49219: PPUSH
49220: CALL_OW 380
// end else
49224: GO 49243
// PrepareHuman ( false , i , skill ) ;
49226: LD_INT 0
49228: PPUSH
49229: LD_VAR 0 8
49233: PPUSH
49234: LD_VAR 0 4
49238: PPUSH
49239: CALL_OW 380
// un := CreateHuman ;
49243: LD_ADDR_VAR 0 14
49247: PUSH
49248: CALL_OW 44
49252: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49253: LD_ADDR_VAR 0 7
49257: PUSH
49258: LD_VAR 0 7
49262: PPUSH
49263: LD_INT 1
49265: PPUSH
49266: LD_VAR 0 14
49270: PPUSH
49271: CALL_OW 2
49275: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
49276: LD_VAR 0 14
49280: PPUSH
49281: LD_VAR 0 9
49285: PPUSH
49286: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
49290: LD_VAR 0 9
49294: PPUSH
49295: CALL_OW 313
49299: PUSH
49300: LD_INT 6
49302: EQUAL
49303: PUSH
49304: LD_VAR 0 9
49308: PPUSH
49309: CALL_OW 266
49313: PUSH
49314: LD_INT 32
49316: PUSH
49317: LD_INT 31
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: IN
49324: OR
49325: IFFALSE 49139
49327: GO 49136
49329: POP
49330: POP
// end else
49331: GO 49713
// for j = 1 to x do
49333: LD_ADDR_VAR 0 9
49337: PUSH
49338: DOUBLE
49339: LD_INT 1
49341: DEC
49342: ST_TO_ADDR
49343: LD_VAR 0 13
49347: PUSH
49348: FOR_TO
49349: IFFALSE 49711
// begin InitHc ;
49351: CALL_OW 19
// if not f then
49355: LD_VAR 0 12
49359: NOT
49360: IFFALSE 49449
// begin PrepareHuman ( false , i , skill ) ;
49362: LD_INT 0
49364: PPUSH
49365: LD_VAR 0 8
49369: PPUSH
49370: LD_VAR 0 4
49374: PPUSH
49375: CALL_OW 380
// un := CreateHuman ;
49379: LD_ADDR_VAR 0 14
49383: PUSH
49384: CALL_OW 44
49388: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49389: LD_ADDR_VAR 0 7
49393: PUSH
49394: LD_VAR 0 7
49398: PPUSH
49399: LD_INT 1
49401: PPUSH
49402: LD_VAR 0 14
49406: PPUSH
49407: CALL_OW 2
49411: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49412: LD_VAR 0 14
49416: PPUSH
49417: LD_VAR 0 1
49421: PPUSH
49422: CALL_OW 250
49426: PPUSH
49427: LD_VAR 0 1
49431: PPUSH
49432: CALL_OW 251
49436: PPUSH
49437: LD_INT 10
49439: PPUSH
49440: LD_INT 0
49442: PPUSH
49443: CALL_OW 50
// continue ;
49447: GO 49348
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
49449: LD_VAR 0 12
49453: PUSH
49454: LD_INT 1
49456: ARRAY
49457: PPUSH
49458: CALL_OW 313
49462: PUSH
49463: LD_VAR 0 12
49467: PUSH
49468: LD_INT 1
49470: ARRAY
49471: PPUSH
49472: CALL_OW 266
49476: PUSH
49477: LD_INT 32
49479: PUSH
49480: LD_INT 31
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: IN
49487: AND
49488: PUSH
49489: LD_VAR 0 12
49493: PUSH
49494: LD_INT 1
49496: ARRAY
49497: PPUSH
49498: CALL_OW 313
49502: PUSH
49503: LD_INT 6
49505: EQUAL
49506: OR
49507: IFFALSE 49527
// f := Delete ( f , 1 ) ;
49509: LD_ADDR_VAR 0 12
49513: PUSH
49514: LD_VAR 0 12
49518: PPUSH
49519: LD_INT 1
49521: PPUSH
49522: CALL_OW 3
49526: ST_TO_ADDR
// if not f then
49527: LD_VAR 0 12
49531: NOT
49532: IFFALSE 49550
// begin x := x + 2 ;
49534: LD_ADDR_VAR 0 13
49538: PUSH
49539: LD_VAR 0 13
49543: PUSH
49544: LD_INT 2
49546: PLUS
49547: ST_TO_ADDR
// continue ;
49548: GO 49348
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
49550: LD_VAR 0 12
49554: PUSH
49555: LD_INT 1
49557: ARRAY
49558: PPUSH
49559: CALL_OW 266
49563: PUSH
49564: LD_INT 5
49566: EQUAL
49567: IFFALSE 49641
// begin if UnitsInside ( f [ 1 ] ) < 3 then
49569: LD_VAR 0 12
49573: PUSH
49574: LD_INT 1
49576: ARRAY
49577: PPUSH
49578: CALL_OW 313
49582: PUSH
49583: LD_INT 3
49585: LESS
49586: IFFALSE 49622
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49588: LD_INT 0
49590: PPUSH
49591: LD_INT 5
49593: PUSH
49594: LD_INT 8
49596: PUSH
49597: LD_INT 9
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: LIST
49604: PUSH
49605: LD_VAR 0 17
49609: ARRAY
49610: PPUSH
49611: LD_VAR 0 4
49615: PPUSH
49616: CALL_OW 380
49620: GO 49639
// PrepareHuman ( false , i , skill ) ;
49622: LD_INT 0
49624: PPUSH
49625: LD_VAR 0 8
49629: PPUSH
49630: LD_VAR 0 4
49634: PPUSH
49635: CALL_OW 380
// end else
49639: GO 49658
// PrepareHuman ( false , i , skill ) ;
49641: LD_INT 0
49643: PPUSH
49644: LD_VAR 0 8
49648: PPUSH
49649: LD_VAR 0 4
49653: PPUSH
49654: CALL_OW 380
// un := CreateHuman ;
49658: LD_ADDR_VAR 0 14
49662: PUSH
49663: CALL_OW 44
49667: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49668: LD_ADDR_VAR 0 7
49672: PUSH
49673: LD_VAR 0 7
49677: PPUSH
49678: LD_INT 1
49680: PPUSH
49681: LD_VAR 0 14
49685: PPUSH
49686: CALL_OW 2
49690: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
49691: LD_VAR 0 14
49695: PPUSH
49696: LD_VAR 0 12
49700: PUSH
49701: LD_INT 1
49703: ARRAY
49704: PPUSH
49705: CALL_OW 52
// end ;
49709: GO 49348
49711: POP
49712: POP
// end ;
49713: GO 48650
49715: POP
49716: POP
// result := result ^ buildings ;
49717: LD_ADDR_VAR 0 7
49721: PUSH
49722: LD_VAR 0 7
49726: PUSH
49727: LD_VAR 0 18
49731: ADD
49732: ST_TO_ADDR
// end else
49733: GO 49876
// begin for i = 1 to personel do
49735: LD_ADDR_VAR 0 8
49739: PUSH
49740: DOUBLE
49741: LD_INT 1
49743: DEC
49744: ST_TO_ADDR
49745: LD_VAR 0 6
49749: PUSH
49750: FOR_TO
49751: IFFALSE 49874
// begin if i > 4 then
49753: LD_VAR 0 8
49757: PUSH
49758: LD_INT 4
49760: GREATER
49761: IFFALSE 49765
// break ;
49763: GO 49874
// x := personel [ i ] ;
49765: LD_ADDR_VAR 0 13
49769: PUSH
49770: LD_VAR 0 6
49774: PUSH
49775: LD_VAR 0 8
49779: ARRAY
49780: ST_TO_ADDR
// if x = - 1 then
49781: LD_VAR 0 13
49785: PUSH
49786: LD_INT 1
49788: NEG
49789: EQUAL
49790: IFFALSE 49794
// continue ;
49792: GO 49750
// PrepareHuman ( false , i , skill ) ;
49794: LD_INT 0
49796: PPUSH
49797: LD_VAR 0 8
49801: PPUSH
49802: LD_VAR 0 4
49806: PPUSH
49807: CALL_OW 380
// un := CreateHuman ;
49811: LD_ADDR_VAR 0 14
49815: PUSH
49816: CALL_OW 44
49820: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49821: LD_VAR 0 14
49825: PPUSH
49826: LD_VAR 0 1
49830: PPUSH
49831: CALL_OW 250
49835: PPUSH
49836: LD_VAR 0 1
49840: PPUSH
49841: CALL_OW 251
49845: PPUSH
49846: LD_INT 10
49848: PPUSH
49849: LD_INT 0
49851: PPUSH
49852: CALL_OW 50
// result := result ^ un ;
49856: LD_ADDR_VAR 0 7
49860: PUSH
49861: LD_VAR 0 7
49865: PUSH
49866: LD_VAR 0 14
49870: ADD
49871: ST_TO_ADDR
// end ;
49872: GO 49750
49874: POP
49875: POP
// end ; end ;
49876: LD_VAR 0 7
49880: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
49881: LD_INT 0
49883: PPUSH
49884: PPUSH
49885: PPUSH
49886: PPUSH
49887: PPUSH
49888: PPUSH
49889: PPUSH
49890: PPUSH
49891: PPUSH
49892: PPUSH
49893: PPUSH
49894: PPUSH
49895: PPUSH
49896: PPUSH
49897: PPUSH
49898: PPUSH
// result := false ;
49899: LD_ADDR_VAR 0 3
49903: PUSH
49904: LD_INT 0
49906: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
49907: LD_VAR 0 1
49911: NOT
49912: PUSH
49913: LD_VAR 0 1
49917: PPUSH
49918: CALL_OW 266
49922: PUSH
49923: LD_INT 32
49925: PUSH
49926: LD_INT 33
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: IN
49933: NOT
49934: OR
49935: IFFALSE 49939
// exit ;
49937: GO 51048
// nat := GetNation ( tower ) ;
49939: LD_ADDR_VAR 0 12
49943: PUSH
49944: LD_VAR 0 1
49948: PPUSH
49949: CALL_OW 248
49953: ST_TO_ADDR
// side := GetSide ( tower ) ;
49954: LD_ADDR_VAR 0 16
49958: PUSH
49959: LD_VAR 0 1
49963: PPUSH
49964: CALL_OW 255
49968: ST_TO_ADDR
// x := GetX ( tower ) ;
49969: LD_ADDR_VAR 0 10
49973: PUSH
49974: LD_VAR 0 1
49978: PPUSH
49979: CALL_OW 250
49983: ST_TO_ADDR
// y := GetY ( tower ) ;
49984: LD_ADDR_VAR 0 11
49988: PUSH
49989: LD_VAR 0 1
49993: PPUSH
49994: CALL_OW 251
49998: ST_TO_ADDR
// if not x or not y then
49999: LD_VAR 0 10
50003: NOT
50004: PUSH
50005: LD_VAR 0 11
50009: NOT
50010: OR
50011: IFFALSE 50015
// exit ;
50013: GO 51048
// weapon := 0 ;
50015: LD_ADDR_VAR 0 18
50019: PUSH
50020: LD_INT 0
50022: ST_TO_ADDR
// fac_list := [ ] ;
50023: LD_ADDR_VAR 0 17
50027: PUSH
50028: EMPTY
50029: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
50030: LD_ADDR_VAR 0 6
50034: PUSH
50035: LD_VAR 0 1
50039: PPUSH
50040: CALL_OW 274
50044: PPUSH
50045: LD_VAR 0 2
50049: PPUSH
50050: LD_INT 0
50052: PPUSH
50053: CALL 47619 0 3
50057: PPUSH
50058: LD_INT 30
50060: PUSH
50061: LD_INT 3
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PPUSH
50068: CALL_OW 72
50072: ST_TO_ADDR
// if not factories then
50073: LD_VAR 0 6
50077: NOT
50078: IFFALSE 50082
// exit ;
50080: GO 51048
// for i in factories do
50082: LD_ADDR_VAR 0 8
50086: PUSH
50087: LD_VAR 0 6
50091: PUSH
50092: FOR_IN
50093: IFFALSE 50118
// fac_list := fac_list union AvailableWeaponList ( i ) ;
50095: LD_ADDR_VAR 0 17
50099: PUSH
50100: LD_VAR 0 17
50104: PUSH
50105: LD_VAR 0 8
50109: PPUSH
50110: CALL_OW 478
50114: UNION
50115: ST_TO_ADDR
50116: GO 50092
50118: POP
50119: POP
// if not fac_list then
50120: LD_VAR 0 17
50124: NOT
50125: IFFALSE 50129
// exit ;
50127: GO 51048
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
50129: LD_ADDR_VAR 0 5
50133: PUSH
50134: LD_INT 4
50136: PUSH
50137: LD_INT 5
50139: PUSH
50140: LD_INT 9
50142: PUSH
50143: LD_INT 10
50145: PUSH
50146: LD_INT 6
50148: PUSH
50149: LD_INT 7
50151: PUSH
50152: LD_INT 11
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: LIST
50159: LIST
50160: LIST
50161: LIST
50162: LIST
50163: PUSH
50164: LD_INT 27
50166: PUSH
50167: LD_INT 28
50169: PUSH
50170: LD_INT 26
50172: PUSH
50173: LD_INT 30
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 43
50184: PUSH
50185: LD_INT 44
50187: PUSH
50188: LD_INT 46
50190: PUSH
50191: LD_INT 45
50193: PUSH
50194: LD_INT 47
50196: PUSH
50197: LD_INT 49
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: LIST
50212: PUSH
50213: LD_VAR 0 12
50217: ARRAY
50218: ST_TO_ADDR
// list := list isect fac_list ;
50219: LD_ADDR_VAR 0 5
50223: PUSH
50224: LD_VAR 0 5
50228: PUSH
50229: LD_VAR 0 17
50233: ISECT
50234: ST_TO_ADDR
// if not list then
50235: LD_VAR 0 5
50239: NOT
50240: IFFALSE 50244
// exit ;
50242: GO 51048
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
50244: LD_VAR 0 12
50248: PUSH
50249: LD_INT 3
50251: EQUAL
50252: PUSH
50253: LD_INT 49
50255: PUSH
50256: LD_VAR 0 5
50260: IN
50261: AND
50262: PUSH
50263: LD_INT 31
50265: PPUSH
50266: LD_VAR 0 16
50270: PPUSH
50271: CALL_OW 321
50275: PUSH
50276: LD_INT 2
50278: EQUAL
50279: AND
50280: IFFALSE 50340
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
50282: LD_INT 22
50284: PUSH
50285: LD_VAR 0 16
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PUSH
50294: LD_INT 35
50296: PUSH
50297: LD_INT 49
50299: PUSH
50300: EMPTY
50301: LIST
50302: LIST
50303: PUSH
50304: LD_INT 91
50306: PUSH
50307: LD_VAR 0 1
50311: PUSH
50312: LD_INT 10
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: LIST
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: LIST
50324: PPUSH
50325: CALL_OW 69
50329: NOT
50330: IFFALSE 50340
// weapon := ru_time_lapser ;
50332: LD_ADDR_VAR 0 18
50336: PUSH
50337: LD_INT 49
50339: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
50340: LD_VAR 0 12
50344: PUSH
50345: LD_INT 1
50347: PUSH
50348: LD_INT 2
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: IN
50355: PUSH
50356: LD_INT 11
50358: PUSH
50359: LD_VAR 0 5
50363: IN
50364: PUSH
50365: LD_INT 30
50367: PUSH
50368: LD_VAR 0 5
50372: IN
50373: OR
50374: AND
50375: PUSH
50376: LD_INT 6
50378: PPUSH
50379: LD_VAR 0 16
50383: PPUSH
50384: CALL_OW 321
50388: PUSH
50389: LD_INT 2
50391: EQUAL
50392: AND
50393: IFFALSE 50558
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
50395: LD_INT 22
50397: PUSH
50398: LD_VAR 0 16
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 2
50409: PUSH
50410: LD_INT 35
50412: PUSH
50413: LD_INT 11
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: LD_INT 35
50422: PUSH
50423: LD_INT 30
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: LIST
50434: PUSH
50435: LD_INT 91
50437: PUSH
50438: LD_VAR 0 1
50442: PUSH
50443: LD_INT 18
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: LIST
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: LIST
50455: PPUSH
50456: CALL_OW 69
50460: NOT
50461: PUSH
50462: LD_INT 22
50464: PUSH
50465: LD_VAR 0 16
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 2
50476: PUSH
50477: LD_INT 30
50479: PUSH
50480: LD_INT 32
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: LD_INT 30
50489: PUSH
50490: LD_INT 33
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 91
50504: PUSH
50505: LD_VAR 0 1
50509: PUSH
50510: LD_INT 12
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: LIST
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: LIST
50522: PUSH
50523: EMPTY
50524: LIST
50525: PPUSH
50526: CALL_OW 69
50530: PUSH
50531: LD_INT 2
50533: GREATER
50534: AND
50535: IFFALSE 50558
// weapon := [ us_radar , ar_radar ] [ nat ] ;
50537: LD_ADDR_VAR 0 18
50541: PUSH
50542: LD_INT 11
50544: PUSH
50545: LD_INT 30
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_VAR 0 12
50556: ARRAY
50557: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
50558: LD_VAR 0 18
50562: NOT
50563: PUSH
50564: LD_INT 40
50566: PPUSH
50567: LD_VAR 0 16
50571: PPUSH
50572: CALL_OW 321
50576: PUSH
50577: LD_INT 2
50579: EQUAL
50580: AND
50581: PUSH
50582: LD_INT 7
50584: PUSH
50585: LD_VAR 0 5
50589: IN
50590: PUSH
50591: LD_INT 28
50593: PUSH
50594: LD_VAR 0 5
50598: IN
50599: OR
50600: PUSH
50601: LD_INT 45
50603: PUSH
50604: LD_VAR 0 5
50608: IN
50609: OR
50610: AND
50611: IFFALSE 50865
// begin hex := GetHexInfo ( x , y ) ;
50613: LD_ADDR_VAR 0 4
50617: PUSH
50618: LD_VAR 0 10
50622: PPUSH
50623: LD_VAR 0 11
50627: PPUSH
50628: CALL_OW 546
50632: ST_TO_ADDR
// if hex [ 1 ] then
50633: LD_VAR 0 4
50637: PUSH
50638: LD_INT 1
50640: ARRAY
50641: IFFALSE 50645
// exit ;
50643: GO 51048
// height := hex [ 2 ] ;
50645: LD_ADDR_VAR 0 15
50649: PUSH
50650: LD_VAR 0 4
50654: PUSH
50655: LD_INT 2
50657: ARRAY
50658: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
50659: LD_ADDR_VAR 0 14
50663: PUSH
50664: LD_INT 0
50666: PUSH
50667: LD_INT 2
50669: PUSH
50670: LD_INT 3
50672: PUSH
50673: LD_INT 5
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: ST_TO_ADDR
// for i in tmp do
50682: LD_ADDR_VAR 0 8
50686: PUSH
50687: LD_VAR 0 14
50691: PUSH
50692: FOR_IN
50693: IFFALSE 50863
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
50695: LD_ADDR_VAR 0 9
50699: PUSH
50700: LD_VAR 0 10
50704: PPUSH
50705: LD_VAR 0 8
50709: PPUSH
50710: LD_INT 5
50712: PPUSH
50713: CALL_OW 272
50717: PUSH
50718: LD_VAR 0 11
50722: PPUSH
50723: LD_VAR 0 8
50727: PPUSH
50728: LD_INT 5
50730: PPUSH
50731: CALL_OW 273
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
50740: LD_VAR 0 9
50744: PUSH
50745: LD_INT 1
50747: ARRAY
50748: PPUSH
50749: LD_VAR 0 9
50753: PUSH
50754: LD_INT 2
50756: ARRAY
50757: PPUSH
50758: CALL_OW 488
50762: IFFALSE 50861
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
50764: LD_ADDR_VAR 0 4
50768: PUSH
50769: LD_VAR 0 9
50773: PUSH
50774: LD_INT 1
50776: ARRAY
50777: PPUSH
50778: LD_VAR 0 9
50782: PUSH
50783: LD_INT 2
50785: ARRAY
50786: PPUSH
50787: CALL_OW 546
50791: ST_TO_ADDR
// if hex [ 1 ] then
50792: LD_VAR 0 4
50796: PUSH
50797: LD_INT 1
50799: ARRAY
50800: IFFALSE 50804
// continue ;
50802: GO 50692
// h := hex [ 2 ] ;
50804: LD_ADDR_VAR 0 13
50808: PUSH
50809: LD_VAR 0 4
50813: PUSH
50814: LD_INT 2
50816: ARRAY
50817: ST_TO_ADDR
// if h + 7 < height then
50818: LD_VAR 0 13
50822: PUSH
50823: LD_INT 7
50825: PLUS
50826: PUSH
50827: LD_VAR 0 15
50831: LESS
50832: IFFALSE 50861
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
50834: LD_ADDR_VAR 0 18
50838: PUSH
50839: LD_INT 7
50841: PUSH
50842: LD_INT 28
50844: PUSH
50845: LD_INT 45
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: LIST
50852: PUSH
50853: LD_VAR 0 12
50857: ARRAY
50858: ST_TO_ADDR
// break ;
50859: GO 50863
// end ; end ; end ;
50861: GO 50692
50863: POP
50864: POP
// end ; if not weapon then
50865: LD_VAR 0 18
50869: NOT
50870: IFFALSE 50930
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
50872: LD_ADDR_VAR 0 5
50876: PUSH
50877: LD_VAR 0 5
50881: PUSH
50882: LD_INT 11
50884: PUSH
50885: LD_INT 30
50887: PUSH
50888: LD_INT 49
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: LIST
50895: DIFF
50896: ST_TO_ADDR
// if not list then
50897: LD_VAR 0 5
50901: NOT
50902: IFFALSE 50906
// exit ;
50904: GO 51048
// weapon := list [ rand ( 1 , list ) ] ;
50906: LD_ADDR_VAR 0 18
50910: PUSH
50911: LD_VAR 0 5
50915: PUSH
50916: LD_INT 1
50918: PPUSH
50919: LD_VAR 0 5
50923: PPUSH
50924: CALL_OW 12
50928: ARRAY
50929: ST_TO_ADDR
// end ; if weapon then
50930: LD_VAR 0 18
50934: IFFALSE 51048
// begin tmp := CostOfWeapon ( weapon ) ;
50936: LD_ADDR_VAR 0 14
50940: PUSH
50941: LD_VAR 0 18
50945: PPUSH
50946: CALL_OW 451
50950: ST_TO_ADDR
// j := GetBase ( tower ) ;
50951: LD_ADDR_VAR 0 9
50955: PUSH
50956: LD_VAR 0 1
50960: PPUSH
50961: CALL_OW 274
50965: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
50966: LD_VAR 0 9
50970: PPUSH
50971: LD_INT 1
50973: PPUSH
50974: CALL_OW 275
50978: PUSH
50979: LD_VAR 0 14
50983: PUSH
50984: LD_INT 1
50986: ARRAY
50987: GREATEREQUAL
50988: PUSH
50989: LD_VAR 0 9
50993: PPUSH
50994: LD_INT 2
50996: PPUSH
50997: CALL_OW 275
51001: PUSH
51002: LD_VAR 0 14
51006: PUSH
51007: LD_INT 2
51009: ARRAY
51010: GREATEREQUAL
51011: AND
51012: PUSH
51013: LD_VAR 0 9
51017: PPUSH
51018: LD_INT 3
51020: PPUSH
51021: CALL_OW 275
51025: PUSH
51026: LD_VAR 0 14
51030: PUSH
51031: LD_INT 3
51033: ARRAY
51034: GREATEREQUAL
51035: AND
51036: IFFALSE 51048
// result := weapon ;
51038: LD_ADDR_VAR 0 3
51042: PUSH
51043: LD_VAR 0 18
51047: ST_TO_ADDR
// end ; end ;
51048: LD_VAR 0 3
51052: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
51053: LD_INT 0
51055: PPUSH
51056: PPUSH
// result := true ;
51057: LD_ADDR_VAR 0 3
51061: PUSH
51062: LD_INT 1
51064: ST_TO_ADDR
// if array1 = array2 then
51065: LD_VAR 0 1
51069: PUSH
51070: LD_VAR 0 2
51074: EQUAL
51075: IFFALSE 51135
// begin for i = 1 to array1 do
51077: LD_ADDR_VAR 0 4
51081: PUSH
51082: DOUBLE
51083: LD_INT 1
51085: DEC
51086: ST_TO_ADDR
51087: LD_VAR 0 1
51091: PUSH
51092: FOR_TO
51093: IFFALSE 51131
// if array1 [ i ] <> array2 [ i ] then
51095: LD_VAR 0 1
51099: PUSH
51100: LD_VAR 0 4
51104: ARRAY
51105: PUSH
51106: LD_VAR 0 2
51110: PUSH
51111: LD_VAR 0 4
51115: ARRAY
51116: NONEQUAL
51117: IFFALSE 51129
// begin result := false ;
51119: LD_ADDR_VAR 0 3
51123: PUSH
51124: LD_INT 0
51126: ST_TO_ADDR
// break ;
51127: GO 51131
// end ;
51129: GO 51092
51131: POP
51132: POP
// end else
51133: GO 51143
// result := false ;
51135: LD_ADDR_VAR 0 3
51139: PUSH
51140: LD_INT 0
51142: ST_TO_ADDR
// end ;
51143: LD_VAR 0 3
51147: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
51148: LD_INT 0
51150: PPUSH
51151: PPUSH
// if not array1 or not array2 then
51152: LD_VAR 0 1
51156: NOT
51157: PUSH
51158: LD_VAR 0 2
51162: NOT
51163: OR
51164: IFFALSE 51168
// exit ;
51166: GO 51232
// result := true ;
51168: LD_ADDR_VAR 0 3
51172: PUSH
51173: LD_INT 1
51175: ST_TO_ADDR
// for i = 1 to array1 do
51176: LD_ADDR_VAR 0 4
51180: PUSH
51181: DOUBLE
51182: LD_INT 1
51184: DEC
51185: ST_TO_ADDR
51186: LD_VAR 0 1
51190: PUSH
51191: FOR_TO
51192: IFFALSE 51230
// if array1 [ i ] <> array2 [ i ] then
51194: LD_VAR 0 1
51198: PUSH
51199: LD_VAR 0 4
51203: ARRAY
51204: PUSH
51205: LD_VAR 0 2
51209: PUSH
51210: LD_VAR 0 4
51214: ARRAY
51215: NONEQUAL
51216: IFFALSE 51228
// begin result := false ;
51218: LD_ADDR_VAR 0 3
51222: PUSH
51223: LD_INT 0
51225: ST_TO_ADDR
// break ;
51226: GO 51230
// end ;
51228: GO 51191
51230: POP
51231: POP
// end ;
51232: LD_VAR 0 3
51236: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
51237: LD_INT 0
51239: PPUSH
51240: PPUSH
51241: PPUSH
// pom := GetBase ( fac ) ;
51242: LD_ADDR_VAR 0 5
51246: PUSH
51247: LD_VAR 0 1
51251: PPUSH
51252: CALL_OW 274
51256: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
51257: LD_ADDR_VAR 0 4
51261: PUSH
51262: LD_VAR 0 2
51266: PUSH
51267: LD_INT 1
51269: ARRAY
51270: PPUSH
51271: LD_VAR 0 2
51275: PUSH
51276: LD_INT 2
51278: ARRAY
51279: PPUSH
51280: LD_VAR 0 2
51284: PUSH
51285: LD_INT 3
51287: ARRAY
51288: PPUSH
51289: LD_VAR 0 2
51293: PUSH
51294: LD_INT 4
51296: ARRAY
51297: PPUSH
51298: CALL_OW 449
51302: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51303: LD_ADDR_VAR 0 3
51307: PUSH
51308: LD_VAR 0 5
51312: PPUSH
51313: LD_INT 1
51315: PPUSH
51316: CALL_OW 275
51320: PUSH
51321: LD_VAR 0 4
51325: PUSH
51326: LD_INT 1
51328: ARRAY
51329: GREATEREQUAL
51330: PUSH
51331: LD_VAR 0 5
51335: PPUSH
51336: LD_INT 2
51338: PPUSH
51339: CALL_OW 275
51343: PUSH
51344: LD_VAR 0 4
51348: PUSH
51349: LD_INT 2
51351: ARRAY
51352: GREATEREQUAL
51353: AND
51354: PUSH
51355: LD_VAR 0 5
51359: PPUSH
51360: LD_INT 3
51362: PPUSH
51363: CALL_OW 275
51367: PUSH
51368: LD_VAR 0 4
51372: PUSH
51373: LD_INT 3
51375: ARRAY
51376: GREATEREQUAL
51377: AND
51378: ST_TO_ADDR
// end ;
51379: LD_VAR 0 3
51383: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
51384: LD_INT 0
51386: PPUSH
51387: PPUSH
51388: PPUSH
51389: PPUSH
// pom := GetBase ( building ) ;
51390: LD_ADDR_VAR 0 3
51394: PUSH
51395: LD_VAR 0 1
51399: PPUSH
51400: CALL_OW 274
51404: ST_TO_ADDR
// if not pom then
51405: LD_VAR 0 3
51409: NOT
51410: IFFALSE 51414
// exit ;
51412: GO 51584
// btype := GetBType ( building ) ;
51414: LD_ADDR_VAR 0 5
51418: PUSH
51419: LD_VAR 0 1
51423: PPUSH
51424: CALL_OW 266
51428: ST_TO_ADDR
// if btype = b_armoury then
51429: LD_VAR 0 5
51433: PUSH
51434: LD_INT 4
51436: EQUAL
51437: IFFALSE 51447
// btype := b_barracks ;
51439: LD_ADDR_VAR 0 5
51443: PUSH
51444: LD_INT 5
51446: ST_TO_ADDR
// if btype = b_depot then
51447: LD_VAR 0 5
51451: PUSH
51452: LD_INT 0
51454: EQUAL
51455: IFFALSE 51465
// btype := b_warehouse ;
51457: LD_ADDR_VAR 0 5
51461: PUSH
51462: LD_INT 1
51464: ST_TO_ADDR
// if btype = b_workshop then
51465: LD_VAR 0 5
51469: PUSH
51470: LD_INT 2
51472: EQUAL
51473: IFFALSE 51483
// btype := b_factory ;
51475: LD_ADDR_VAR 0 5
51479: PUSH
51480: LD_INT 3
51482: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51483: LD_ADDR_VAR 0 4
51487: PUSH
51488: LD_VAR 0 5
51492: PPUSH
51493: LD_VAR 0 1
51497: PPUSH
51498: CALL_OW 248
51502: PPUSH
51503: CALL_OW 450
51507: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51508: LD_ADDR_VAR 0 2
51512: PUSH
51513: LD_VAR 0 3
51517: PPUSH
51518: LD_INT 1
51520: PPUSH
51521: CALL_OW 275
51525: PUSH
51526: LD_VAR 0 4
51530: PUSH
51531: LD_INT 1
51533: ARRAY
51534: GREATEREQUAL
51535: PUSH
51536: LD_VAR 0 3
51540: PPUSH
51541: LD_INT 2
51543: PPUSH
51544: CALL_OW 275
51548: PUSH
51549: LD_VAR 0 4
51553: PUSH
51554: LD_INT 2
51556: ARRAY
51557: GREATEREQUAL
51558: AND
51559: PUSH
51560: LD_VAR 0 3
51564: PPUSH
51565: LD_INT 3
51567: PPUSH
51568: CALL_OW 275
51572: PUSH
51573: LD_VAR 0 4
51577: PUSH
51578: LD_INT 3
51580: ARRAY
51581: GREATEREQUAL
51582: AND
51583: ST_TO_ADDR
// end ;
51584: LD_VAR 0 2
51588: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
51589: LD_INT 0
51591: PPUSH
51592: PPUSH
51593: PPUSH
// pom := GetBase ( building ) ;
51594: LD_ADDR_VAR 0 4
51598: PUSH
51599: LD_VAR 0 1
51603: PPUSH
51604: CALL_OW 274
51608: ST_TO_ADDR
// if not pom then
51609: LD_VAR 0 4
51613: NOT
51614: IFFALSE 51618
// exit ;
51616: GO 51719
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51618: LD_ADDR_VAR 0 5
51622: PUSH
51623: LD_VAR 0 2
51627: PPUSH
51628: LD_VAR 0 1
51632: PPUSH
51633: CALL_OW 248
51637: PPUSH
51638: CALL_OW 450
51642: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51643: LD_ADDR_VAR 0 3
51647: PUSH
51648: LD_VAR 0 4
51652: PPUSH
51653: LD_INT 1
51655: PPUSH
51656: CALL_OW 275
51660: PUSH
51661: LD_VAR 0 5
51665: PUSH
51666: LD_INT 1
51668: ARRAY
51669: GREATEREQUAL
51670: PUSH
51671: LD_VAR 0 4
51675: PPUSH
51676: LD_INT 2
51678: PPUSH
51679: CALL_OW 275
51683: PUSH
51684: LD_VAR 0 5
51688: PUSH
51689: LD_INT 2
51691: ARRAY
51692: GREATEREQUAL
51693: AND
51694: PUSH
51695: LD_VAR 0 4
51699: PPUSH
51700: LD_INT 3
51702: PPUSH
51703: CALL_OW 275
51707: PUSH
51708: LD_VAR 0 5
51712: PUSH
51713: LD_INT 3
51715: ARRAY
51716: GREATEREQUAL
51717: AND
51718: ST_TO_ADDR
// end ;
51719: LD_VAR 0 3
51723: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
51724: LD_INT 0
51726: PPUSH
51727: PPUSH
51728: PPUSH
51729: PPUSH
51730: PPUSH
51731: PPUSH
51732: PPUSH
51733: PPUSH
51734: PPUSH
51735: PPUSH
51736: PPUSH
// result := false ;
51737: LD_ADDR_VAR 0 8
51741: PUSH
51742: LD_INT 0
51744: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
51745: LD_VAR 0 5
51749: NOT
51750: PUSH
51751: LD_VAR 0 1
51755: NOT
51756: OR
51757: PUSH
51758: LD_VAR 0 2
51762: NOT
51763: OR
51764: PUSH
51765: LD_VAR 0 3
51769: NOT
51770: OR
51771: IFFALSE 51775
// exit ;
51773: GO 52589
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
51775: LD_ADDR_VAR 0 14
51779: PUSH
51780: LD_VAR 0 1
51784: PPUSH
51785: LD_VAR 0 2
51789: PPUSH
51790: LD_VAR 0 3
51794: PPUSH
51795: LD_VAR 0 4
51799: PPUSH
51800: LD_VAR 0 5
51804: PUSH
51805: LD_INT 1
51807: ARRAY
51808: PPUSH
51809: CALL_OW 248
51813: PPUSH
51814: LD_INT 0
51816: PPUSH
51817: CALL 53822 0 6
51821: ST_TO_ADDR
// if not hexes then
51822: LD_VAR 0 14
51826: NOT
51827: IFFALSE 51831
// exit ;
51829: GO 52589
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51831: LD_ADDR_VAR 0 17
51835: PUSH
51836: LD_VAR 0 5
51840: PPUSH
51841: LD_INT 22
51843: PUSH
51844: LD_VAR 0 13
51848: PPUSH
51849: CALL_OW 255
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 2
51860: PUSH
51861: LD_INT 30
51863: PUSH
51864: LD_INT 0
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 30
51873: PUSH
51874: LD_INT 1
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: LIST
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PPUSH
51890: CALL_OW 72
51894: ST_TO_ADDR
// for i = 1 to hexes do
51895: LD_ADDR_VAR 0 9
51899: PUSH
51900: DOUBLE
51901: LD_INT 1
51903: DEC
51904: ST_TO_ADDR
51905: LD_VAR 0 14
51909: PUSH
51910: FOR_TO
51911: IFFALSE 52587
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51913: LD_ADDR_VAR 0 13
51917: PUSH
51918: LD_VAR 0 14
51922: PUSH
51923: LD_VAR 0 9
51927: ARRAY
51928: PUSH
51929: LD_INT 1
51931: ARRAY
51932: PPUSH
51933: LD_VAR 0 14
51937: PUSH
51938: LD_VAR 0 9
51942: ARRAY
51943: PUSH
51944: LD_INT 2
51946: ARRAY
51947: PPUSH
51948: CALL_OW 428
51952: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
51953: LD_VAR 0 14
51957: PUSH
51958: LD_VAR 0 9
51962: ARRAY
51963: PUSH
51964: LD_INT 1
51966: ARRAY
51967: PPUSH
51968: LD_VAR 0 14
51972: PUSH
51973: LD_VAR 0 9
51977: ARRAY
51978: PUSH
51979: LD_INT 2
51981: ARRAY
51982: PPUSH
51983: CALL_OW 351
51987: PUSH
51988: LD_VAR 0 14
51992: PUSH
51993: LD_VAR 0 9
51997: ARRAY
51998: PUSH
51999: LD_INT 1
52001: ARRAY
52002: PPUSH
52003: LD_VAR 0 14
52007: PUSH
52008: LD_VAR 0 9
52012: ARRAY
52013: PUSH
52014: LD_INT 2
52016: ARRAY
52017: PPUSH
52018: CALL_OW 488
52022: NOT
52023: OR
52024: PUSH
52025: LD_VAR 0 13
52029: PPUSH
52030: CALL_OW 247
52034: PUSH
52035: LD_INT 3
52037: EQUAL
52038: OR
52039: IFFALSE 52045
// exit ;
52041: POP
52042: POP
52043: GO 52589
// if not tmp then
52045: LD_VAR 0 13
52049: NOT
52050: IFFALSE 52054
// continue ;
52052: GO 51910
// result := true ;
52054: LD_ADDR_VAR 0 8
52058: PUSH
52059: LD_INT 1
52061: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
52062: LD_VAR 0 6
52066: PUSH
52067: LD_VAR 0 13
52071: PPUSH
52072: CALL_OW 247
52076: PUSH
52077: LD_INT 2
52079: EQUAL
52080: AND
52081: PUSH
52082: LD_VAR 0 13
52086: PPUSH
52087: CALL_OW 263
52091: PUSH
52092: LD_INT 1
52094: EQUAL
52095: AND
52096: IFFALSE 52260
// begin if IsDrivenBy ( tmp ) then
52098: LD_VAR 0 13
52102: PPUSH
52103: CALL_OW 311
52107: IFFALSE 52111
// continue ;
52109: GO 51910
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
52111: LD_VAR 0 6
52115: PPUSH
52116: LD_INT 3
52118: PUSH
52119: LD_INT 60
52121: PUSH
52122: EMPTY
52123: LIST
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 3
52131: PUSH
52132: LD_INT 55
52134: PUSH
52135: EMPTY
52136: LIST
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PPUSH
52146: CALL_OW 72
52150: IFFALSE 52258
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
52152: LD_ADDR_VAR 0 18
52156: PUSH
52157: LD_VAR 0 6
52161: PPUSH
52162: LD_INT 3
52164: PUSH
52165: LD_INT 60
52167: PUSH
52168: EMPTY
52169: LIST
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 3
52177: PUSH
52178: LD_INT 55
52180: PUSH
52181: EMPTY
52182: LIST
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PPUSH
52192: CALL_OW 72
52196: PUSH
52197: LD_INT 1
52199: ARRAY
52200: ST_TO_ADDR
// if IsInUnit ( driver ) then
52201: LD_VAR 0 18
52205: PPUSH
52206: CALL_OW 310
52210: IFFALSE 52221
// ComExit ( driver ) ;
52212: LD_VAR 0 18
52216: PPUSH
52217: CALL 77602 0 1
// AddComEnterUnit ( driver , tmp ) ;
52221: LD_VAR 0 18
52225: PPUSH
52226: LD_VAR 0 13
52230: PPUSH
52231: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
52235: LD_VAR 0 18
52239: PPUSH
52240: LD_VAR 0 7
52244: PPUSH
52245: CALL_OW 173
// AddComExitVehicle ( driver ) ;
52249: LD_VAR 0 18
52253: PPUSH
52254: CALL_OW 181
// end ; continue ;
52258: GO 51910
// end ; if not cleaners or not tmp in cleaners then
52260: LD_VAR 0 6
52264: NOT
52265: PUSH
52266: LD_VAR 0 13
52270: PUSH
52271: LD_VAR 0 6
52275: IN
52276: NOT
52277: OR
52278: IFFALSE 52585
// begin if dep then
52280: LD_VAR 0 17
52284: IFFALSE 52420
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
52286: LD_ADDR_VAR 0 16
52290: PUSH
52291: LD_VAR 0 17
52295: PUSH
52296: LD_INT 1
52298: ARRAY
52299: PPUSH
52300: CALL_OW 250
52304: PPUSH
52305: LD_VAR 0 17
52309: PUSH
52310: LD_INT 1
52312: ARRAY
52313: PPUSH
52314: CALL_OW 254
52318: PPUSH
52319: LD_INT 5
52321: PPUSH
52322: CALL_OW 272
52326: PUSH
52327: LD_VAR 0 17
52331: PUSH
52332: LD_INT 1
52334: ARRAY
52335: PPUSH
52336: CALL_OW 251
52340: PPUSH
52341: LD_VAR 0 17
52345: PUSH
52346: LD_INT 1
52348: ARRAY
52349: PPUSH
52350: CALL_OW 254
52354: PPUSH
52355: LD_INT 5
52357: PPUSH
52358: CALL_OW 273
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
52367: LD_VAR 0 16
52371: PUSH
52372: LD_INT 1
52374: ARRAY
52375: PPUSH
52376: LD_VAR 0 16
52380: PUSH
52381: LD_INT 2
52383: ARRAY
52384: PPUSH
52385: CALL_OW 488
52389: IFFALSE 52420
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
52391: LD_VAR 0 13
52395: PPUSH
52396: LD_VAR 0 16
52400: PUSH
52401: LD_INT 1
52403: ARRAY
52404: PPUSH
52405: LD_VAR 0 16
52409: PUSH
52410: LD_INT 2
52412: ARRAY
52413: PPUSH
52414: CALL_OW 111
// continue ;
52418: GO 51910
// end ; end ; r := GetDir ( tmp ) ;
52420: LD_ADDR_VAR 0 15
52424: PUSH
52425: LD_VAR 0 13
52429: PPUSH
52430: CALL_OW 254
52434: ST_TO_ADDR
// if r = 5 then
52435: LD_VAR 0 15
52439: PUSH
52440: LD_INT 5
52442: EQUAL
52443: IFFALSE 52453
// r := 0 ;
52445: LD_ADDR_VAR 0 15
52449: PUSH
52450: LD_INT 0
52452: ST_TO_ADDR
// for j = r to 5 do
52453: LD_ADDR_VAR 0 10
52457: PUSH
52458: DOUBLE
52459: LD_VAR 0 15
52463: DEC
52464: ST_TO_ADDR
52465: LD_INT 5
52467: PUSH
52468: FOR_TO
52469: IFFALSE 52583
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
52471: LD_ADDR_VAR 0 11
52475: PUSH
52476: LD_VAR 0 13
52480: PPUSH
52481: CALL_OW 250
52485: PPUSH
52486: LD_VAR 0 10
52490: PPUSH
52491: LD_INT 2
52493: PPUSH
52494: CALL_OW 272
52498: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
52499: LD_ADDR_VAR 0 12
52503: PUSH
52504: LD_VAR 0 13
52508: PPUSH
52509: CALL_OW 251
52513: PPUSH
52514: LD_VAR 0 10
52518: PPUSH
52519: LD_INT 2
52521: PPUSH
52522: CALL_OW 273
52526: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
52527: LD_VAR 0 11
52531: PPUSH
52532: LD_VAR 0 12
52536: PPUSH
52537: CALL_OW 488
52541: PUSH
52542: LD_VAR 0 11
52546: PPUSH
52547: LD_VAR 0 12
52551: PPUSH
52552: CALL_OW 428
52556: NOT
52557: AND
52558: IFFALSE 52581
// begin ComMoveXY ( tmp , _x , _y ) ;
52560: LD_VAR 0 13
52564: PPUSH
52565: LD_VAR 0 11
52569: PPUSH
52570: LD_VAR 0 12
52574: PPUSH
52575: CALL_OW 111
// break ;
52579: GO 52583
// end ; end ;
52581: GO 52468
52583: POP
52584: POP
// end ; end ;
52585: GO 51910
52587: POP
52588: POP
// end ;
52589: LD_VAR 0 8
52593: RET
// export function BuildingTechInvented ( side , btype ) ; begin
52594: LD_INT 0
52596: PPUSH
// result := true ;
52597: LD_ADDR_VAR 0 3
52601: PUSH
52602: LD_INT 1
52604: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
52605: LD_VAR 0 2
52609: PUSH
52610: LD_INT 24
52612: DOUBLE
52613: EQUAL
52614: IFTRUE 52624
52616: LD_INT 33
52618: DOUBLE
52619: EQUAL
52620: IFTRUE 52624
52622: GO 52649
52624: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
52625: LD_ADDR_VAR 0 3
52629: PUSH
52630: LD_INT 32
52632: PPUSH
52633: LD_VAR 0 1
52637: PPUSH
52638: CALL_OW 321
52642: PUSH
52643: LD_INT 2
52645: EQUAL
52646: ST_TO_ADDR
52647: GO 52965
52649: LD_INT 20
52651: DOUBLE
52652: EQUAL
52653: IFTRUE 52657
52655: GO 52682
52657: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
52658: LD_ADDR_VAR 0 3
52662: PUSH
52663: LD_INT 6
52665: PPUSH
52666: LD_VAR 0 1
52670: PPUSH
52671: CALL_OW 321
52675: PUSH
52676: LD_INT 2
52678: EQUAL
52679: ST_TO_ADDR
52680: GO 52965
52682: LD_INT 22
52684: DOUBLE
52685: EQUAL
52686: IFTRUE 52696
52688: LD_INT 36
52690: DOUBLE
52691: EQUAL
52692: IFTRUE 52696
52694: GO 52721
52696: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
52697: LD_ADDR_VAR 0 3
52701: PUSH
52702: LD_INT 15
52704: PPUSH
52705: LD_VAR 0 1
52709: PPUSH
52710: CALL_OW 321
52714: PUSH
52715: LD_INT 2
52717: EQUAL
52718: ST_TO_ADDR
52719: GO 52965
52721: LD_INT 30
52723: DOUBLE
52724: EQUAL
52725: IFTRUE 52729
52727: GO 52754
52729: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
52730: LD_ADDR_VAR 0 3
52734: PUSH
52735: LD_INT 20
52737: PPUSH
52738: LD_VAR 0 1
52742: PPUSH
52743: CALL_OW 321
52747: PUSH
52748: LD_INT 2
52750: EQUAL
52751: ST_TO_ADDR
52752: GO 52965
52754: LD_INT 28
52756: DOUBLE
52757: EQUAL
52758: IFTRUE 52768
52760: LD_INT 21
52762: DOUBLE
52763: EQUAL
52764: IFTRUE 52768
52766: GO 52793
52768: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
52769: LD_ADDR_VAR 0 3
52773: PUSH
52774: LD_INT 21
52776: PPUSH
52777: LD_VAR 0 1
52781: PPUSH
52782: CALL_OW 321
52786: PUSH
52787: LD_INT 2
52789: EQUAL
52790: ST_TO_ADDR
52791: GO 52965
52793: LD_INT 16
52795: DOUBLE
52796: EQUAL
52797: IFTRUE 52801
52799: GO 52826
52801: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
52802: LD_ADDR_VAR 0 3
52806: PUSH
52807: LD_INT 84
52809: PPUSH
52810: LD_VAR 0 1
52814: PPUSH
52815: CALL_OW 321
52819: PUSH
52820: LD_INT 2
52822: EQUAL
52823: ST_TO_ADDR
52824: GO 52965
52826: LD_INT 19
52828: DOUBLE
52829: EQUAL
52830: IFTRUE 52840
52832: LD_INT 23
52834: DOUBLE
52835: EQUAL
52836: IFTRUE 52840
52838: GO 52865
52840: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
52841: LD_ADDR_VAR 0 3
52845: PUSH
52846: LD_INT 83
52848: PPUSH
52849: LD_VAR 0 1
52853: PPUSH
52854: CALL_OW 321
52858: PUSH
52859: LD_INT 2
52861: EQUAL
52862: ST_TO_ADDR
52863: GO 52965
52865: LD_INT 17
52867: DOUBLE
52868: EQUAL
52869: IFTRUE 52873
52871: GO 52898
52873: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
52874: LD_ADDR_VAR 0 3
52878: PUSH
52879: LD_INT 39
52881: PPUSH
52882: LD_VAR 0 1
52886: PPUSH
52887: CALL_OW 321
52891: PUSH
52892: LD_INT 2
52894: EQUAL
52895: ST_TO_ADDR
52896: GO 52965
52898: LD_INT 18
52900: DOUBLE
52901: EQUAL
52902: IFTRUE 52906
52904: GO 52931
52906: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
52907: LD_ADDR_VAR 0 3
52911: PUSH
52912: LD_INT 40
52914: PPUSH
52915: LD_VAR 0 1
52919: PPUSH
52920: CALL_OW 321
52924: PUSH
52925: LD_INT 2
52927: EQUAL
52928: ST_TO_ADDR
52929: GO 52965
52931: LD_INT 27
52933: DOUBLE
52934: EQUAL
52935: IFTRUE 52939
52937: GO 52964
52939: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
52940: LD_ADDR_VAR 0 3
52944: PUSH
52945: LD_INT 35
52947: PPUSH
52948: LD_VAR 0 1
52952: PPUSH
52953: CALL_OW 321
52957: PUSH
52958: LD_INT 2
52960: EQUAL
52961: ST_TO_ADDR
52962: GO 52965
52964: POP
// end ;
52965: LD_VAR 0 3
52969: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
52970: LD_INT 0
52972: PPUSH
52973: PPUSH
52974: PPUSH
52975: PPUSH
52976: PPUSH
52977: PPUSH
52978: PPUSH
52979: PPUSH
52980: PPUSH
52981: PPUSH
52982: PPUSH
// result := false ;
52983: LD_ADDR_VAR 0 6
52987: PUSH
52988: LD_INT 0
52990: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
52991: LD_VAR 0 1
52995: NOT
52996: PUSH
52997: LD_VAR 0 1
53001: PPUSH
53002: CALL_OW 266
53006: PUSH
53007: LD_INT 0
53009: PUSH
53010: LD_INT 1
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: IN
53017: NOT
53018: OR
53019: PUSH
53020: LD_VAR 0 2
53024: NOT
53025: OR
53026: PUSH
53027: LD_VAR 0 5
53031: PUSH
53032: LD_INT 0
53034: PUSH
53035: LD_INT 1
53037: PUSH
53038: LD_INT 2
53040: PUSH
53041: LD_INT 3
53043: PUSH
53044: LD_INT 4
53046: PUSH
53047: LD_INT 5
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: LIST
53054: LIST
53055: LIST
53056: LIST
53057: IN
53058: NOT
53059: OR
53060: PUSH
53061: LD_VAR 0 3
53065: PPUSH
53066: LD_VAR 0 4
53070: PPUSH
53071: CALL_OW 488
53075: NOT
53076: OR
53077: IFFALSE 53081
// exit ;
53079: GO 53817
// side := GetSide ( depot ) ;
53081: LD_ADDR_VAR 0 9
53085: PUSH
53086: LD_VAR 0 1
53090: PPUSH
53091: CALL_OW 255
53095: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
53096: LD_VAR 0 9
53100: PPUSH
53101: LD_VAR 0 2
53105: PPUSH
53106: CALL 52594 0 2
53110: NOT
53111: IFFALSE 53115
// exit ;
53113: GO 53817
// pom := GetBase ( depot ) ;
53115: LD_ADDR_VAR 0 10
53119: PUSH
53120: LD_VAR 0 1
53124: PPUSH
53125: CALL_OW 274
53129: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
53130: LD_ADDR_VAR 0 11
53134: PUSH
53135: LD_VAR 0 2
53139: PPUSH
53140: LD_VAR 0 1
53144: PPUSH
53145: CALL_OW 248
53149: PPUSH
53150: CALL_OW 450
53154: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
53155: LD_VAR 0 10
53159: PPUSH
53160: LD_INT 1
53162: PPUSH
53163: CALL_OW 275
53167: PUSH
53168: LD_VAR 0 11
53172: PUSH
53173: LD_INT 1
53175: ARRAY
53176: GREATEREQUAL
53177: PUSH
53178: LD_VAR 0 10
53182: PPUSH
53183: LD_INT 2
53185: PPUSH
53186: CALL_OW 275
53190: PUSH
53191: LD_VAR 0 11
53195: PUSH
53196: LD_INT 2
53198: ARRAY
53199: GREATEREQUAL
53200: AND
53201: PUSH
53202: LD_VAR 0 10
53206: PPUSH
53207: LD_INT 3
53209: PPUSH
53210: CALL_OW 275
53214: PUSH
53215: LD_VAR 0 11
53219: PUSH
53220: LD_INT 3
53222: ARRAY
53223: GREATEREQUAL
53224: AND
53225: NOT
53226: IFFALSE 53230
// exit ;
53228: GO 53817
// if GetBType ( depot ) = b_depot then
53230: LD_VAR 0 1
53234: PPUSH
53235: CALL_OW 266
53239: PUSH
53240: LD_INT 0
53242: EQUAL
53243: IFFALSE 53255
// dist := 28 else
53245: LD_ADDR_VAR 0 14
53249: PUSH
53250: LD_INT 28
53252: ST_TO_ADDR
53253: GO 53263
// dist := 36 ;
53255: LD_ADDR_VAR 0 14
53259: PUSH
53260: LD_INT 36
53262: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
53263: LD_VAR 0 1
53267: PPUSH
53268: LD_VAR 0 3
53272: PPUSH
53273: LD_VAR 0 4
53277: PPUSH
53278: CALL_OW 297
53282: PUSH
53283: LD_VAR 0 14
53287: GREATER
53288: IFFALSE 53292
// exit ;
53290: GO 53817
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
53292: LD_ADDR_VAR 0 12
53296: PUSH
53297: LD_VAR 0 2
53301: PPUSH
53302: LD_VAR 0 3
53306: PPUSH
53307: LD_VAR 0 4
53311: PPUSH
53312: LD_VAR 0 5
53316: PPUSH
53317: LD_VAR 0 1
53321: PPUSH
53322: CALL_OW 248
53326: PPUSH
53327: LD_INT 0
53329: PPUSH
53330: CALL 53822 0 6
53334: ST_TO_ADDR
// if not hexes then
53335: LD_VAR 0 12
53339: NOT
53340: IFFALSE 53344
// exit ;
53342: GO 53817
// hex := GetHexInfo ( x , y ) ;
53344: LD_ADDR_VAR 0 15
53348: PUSH
53349: LD_VAR 0 3
53353: PPUSH
53354: LD_VAR 0 4
53358: PPUSH
53359: CALL_OW 546
53363: ST_TO_ADDR
// if hex [ 1 ] then
53364: LD_VAR 0 15
53368: PUSH
53369: LD_INT 1
53371: ARRAY
53372: IFFALSE 53376
// exit ;
53374: GO 53817
// height := hex [ 2 ] ;
53376: LD_ADDR_VAR 0 13
53380: PUSH
53381: LD_VAR 0 15
53385: PUSH
53386: LD_INT 2
53388: ARRAY
53389: ST_TO_ADDR
// for i = 1 to hexes do
53390: LD_ADDR_VAR 0 7
53394: PUSH
53395: DOUBLE
53396: LD_INT 1
53398: DEC
53399: ST_TO_ADDR
53400: LD_VAR 0 12
53404: PUSH
53405: FOR_TO
53406: IFFALSE 53736
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
53408: LD_VAR 0 12
53412: PUSH
53413: LD_VAR 0 7
53417: ARRAY
53418: PUSH
53419: LD_INT 1
53421: ARRAY
53422: PPUSH
53423: LD_VAR 0 12
53427: PUSH
53428: LD_VAR 0 7
53432: ARRAY
53433: PUSH
53434: LD_INT 2
53436: ARRAY
53437: PPUSH
53438: CALL_OW 488
53442: NOT
53443: PUSH
53444: LD_VAR 0 12
53448: PUSH
53449: LD_VAR 0 7
53453: ARRAY
53454: PUSH
53455: LD_INT 1
53457: ARRAY
53458: PPUSH
53459: LD_VAR 0 12
53463: PUSH
53464: LD_VAR 0 7
53468: ARRAY
53469: PUSH
53470: LD_INT 2
53472: ARRAY
53473: PPUSH
53474: CALL_OW 428
53478: PUSH
53479: LD_INT 0
53481: GREATER
53482: OR
53483: PUSH
53484: LD_VAR 0 12
53488: PUSH
53489: LD_VAR 0 7
53493: ARRAY
53494: PUSH
53495: LD_INT 1
53497: ARRAY
53498: PPUSH
53499: LD_VAR 0 12
53503: PUSH
53504: LD_VAR 0 7
53508: ARRAY
53509: PUSH
53510: LD_INT 2
53512: ARRAY
53513: PPUSH
53514: CALL_OW 351
53518: OR
53519: IFFALSE 53525
// exit ;
53521: POP
53522: POP
53523: GO 53817
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53525: LD_ADDR_VAR 0 8
53529: PUSH
53530: LD_VAR 0 12
53534: PUSH
53535: LD_VAR 0 7
53539: ARRAY
53540: PUSH
53541: LD_INT 1
53543: ARRAY
53544: PPUSH
53545: LD_VAR 0 12
53549: PUSH
53550: LD_VAR 0 7
53554: ARRAY
53555: PUSH
53556: LD_INT 2
53558: ARRAY
53559: PPUSH
53560: CALL_OW 546
53564: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
53565: LD_VAR 0 8
53569: PUSH
53570: LD_INT 1
53572: ARRAY
53573: PUSH
53574: LD_VAR 0 8
53578: PUSH
53579: LD_INT 2
53581: ARRAY
53582: PUSH
53583: LD_VAR 0 13
53587: PUSH
53588: LD_INT 2
53590: PLUS
53591: GREATER
53592: OR
53593: PUSH
53594: LD_VAR 0 8
53598: PUSH
53599: LD_INT 2
53601: ARRAY
53602: PUSH
53603: LD_VAR 0 13
53607: PUSH
53608: LD_INT 2
53610: MINUS
53611: LESS
53612: OR
53613: PUSH
53614: LD_VAR 0 8
53618: PUSH
53619: LD_INT 3
53621: ARRAY
53622: PUSH
53623: LD_INT 0
53625: PUSH
53626: LD_INT 8
53628: PUSH
53629: LD_INT 9
53631: PUSH
53632: LD_INT 10
53634: PUSH
53635: LD_INT 11
53637: PUSH
53638: LD_INT 12
53640: PUSH
53641: LD_INT 13
53643: PUSH
53644: LD_INT 16
53646: PUSH
53647: LD_INT 17
53649: PUSH
53650: LD_INT 18
53652: PUSH
53653: LD_INT 19
53655: PUSH
53656: LD_INT 20
53658: PUSH
53659: LD_INT 21
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: LIST
53676: IN
53677: NOT
53678: OR
53679: PUSH
53680: LD_VAR 0 8
53684: PUSH
53685: LD_INT 5
53687: ARRAY
53688: NOT
53689: OR
53690: PUSH
53691: LD_VAR 0 8
53695: PUSH
53696: LD_INT 6
53698: ARRAY
53699: PUSH
53700: LD_INT 1
53702: PUSH
53703: LD_INT 2
53705: PUSH
53706: LD_INT 7
53708: PUSH
53709: LD_INT 9
53711: PUSH
53712: LD_INT 10
53714: PUSH
53715: LD_INT 11
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: LIST
53724: LIST
53725: IN
53726: NOT
53727: OR
53728: IFFALSE 53734
// exit ;
53730: POP
53731: POP
53732: GO 53817
// end ;
53734: GO 53405
53736: POP
53737: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
53738: LD_VAR 0 9
53742: PPUSH
53743: LD_VAR 0 3
53747: PPUSH
53748: LD_VAR 0 4
53752: PPUSH
53753: LD_INT 20
53755: PPUSH
53756: CALL 45769 0 4
53760: PUSH
53761: LD_INT 4
53763: ARRAY
53764: IFFALSE 53768
// exit ;
53766: GO 53817
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
53768: LD_VAR 0 2
53772: PUSH
53773: LD_INT 29
53775: PUSH
53776: LD_INT 30
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: IN
53783: PUSH
53784: LD_VAR 0 3
53788: PPUSH
53789: LD_VAR 0 4
53793: PPUSH
53794: LD_VAR 0 9
53798: PPUSH
53799: CALL_OW 440
53803: NOT
53804: AND
53805: IFFALSE 53809
// exit ;
53807: GO 53817
// result := true ;
53809: LD_ADDR_VAR 0 6
53813: PUSH
53814: LD_INT 1
53816: ST_TO_ADDR
// end ;
53817: LD_VAR 0 6
53821: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
53822: LD_INT 0
53824: PPUSH
53825: PPUSH
53826: PPUSH
53827: PPUSH
53828: PPUSH
53829: PPUSH
53830: PPUSH
53831: PPUSH
53832: PPUSH
53833: PPUSH
53834: PPUSH
53835: PPUSH
53836: PPUSH
53837: PPUSH
53838: PPUSH
53839: PPUSH
53840: PPUSH
53841: PPUSH
53842: PPUSH
53843: PPUSH
53844: PPUSH
53845: PPUSH
53846: PPUSH
53847: PPUSH
53848: PPUSH
53849: PPUSH
53850: PPUSH
53851: PPUSH
53852: PPUSH
53853: PPUSH
53854: PPUSH
53855: PPUSH
53856: PPUSH
53857: PPUSH
53858: PPUSH
53859: PPUSH
53860: PPUSH
53861: PPUSH
53862: PPUSH
53863: PPUSH
53864: PPUSH
53865: PPUSH
53866: PPUSH
53867: PPUSH
53868: PPUSH
53869: PPUSH
53870: PPUSH
53871: PPUSH
53872: PPUSH
53873: PPUSH
53874: PPUSH
53875: PPUSH
53876: PPUSH
53877: PPUSH
53878: PPUSH
53879: PPUSH
53880: PPUSH
53881: PPUSH
// result = [ ] ;
53882: LD_ADDR_VAR 0 7
53886: PUSH
53887: EMPTY
53888: ST_TO_ADDR
// temp_list = [ ] ;
53889: LD_ADDR_VAR 0 9
53893: PUSH
53894: EMPTY
53895: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
53896: LD_VAR 0 4
53900: PUSH
53901: LD_INT 0
53903: PUSH
53904: LD_INT 1
53906: PUSH
53907: LD_INT 2
53909: PUSH
53910: LD_INT 3
53912: PUSH
53913: LD_INT 4
53915: PUSH
53916: LD_INT 5
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: LIST
53923: LIST
53924: LIST
53925: LIST
53926: IN
53927: NOT
53928: PUSH
53929: LD_VAR 0 1
53933: PUSH
53934: LD_INT 0
53936: PUSH
53937: LD_INT 1
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: IN
53944: PUSH
53945: LD_VAR 0 5
53949: PUSH
53950: LD_INT 1
53952: PUSH
53953: LD_INT 2
53955: PUSH
53956: LD_INT 3
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: LIST
53963: IN
53964: NOT
53965: AND
53966: OR
53967: IFFALSE 53971
// exit ;
53969: GO 72362
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
53971: LD_VAR 0 1
53975: PUSH
53976: LD_INT 6
53978: PUSH
53979: LD_INT 7
53981: PUSH
53982: LD_INT 8
53984: PUSH
53985: LD_INT 13
53987: PUSH
53988: LD_INT 12
53990: PUSH
53991: LD_INT 15
53993: PUSH
53994: LD_INT 11
53996: PUSH
53997: LD_INT 14
53999: PUSH
54000: LD_INT 10
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: LIST
54007: LIST
54008: LIST
54009: LIST
54010: LIST
54011: LIST
54012: LIST
54013: IN
54014: IFFALSE 54024
// btype = b_lab ;
54016: LD_ADDR_VAR 0 1
54020: PUSH
54021: LD_INT 6
54023: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
54024: LD_VAR 0 6
54028: PUSH
54029: LD_INT 0
54031: PUSH
54032: LD_INT 1
54034: PUSH
54035: LD_INT 2
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: LIST
54042: IN
54043: NOT
54044: PUSH
54045: LD_VAR 0 1
54049: PUSH
54050: LD_INT 0
54052: PUSH
54053: LD_INT 1
54055: PUSH
54056: LD_INT 2
54058: PUSH
54059: LD_INT 3
54061: PUSH
54062: LD_INT 6
54064: PUSH
54065: LD_INT 36
54067: PUSH
54068: LD_INT 4
54070: PUSH
54071: LD_INT 5
54073: PUSH
54074: LD_INT 31
54076: PUSH
54077: LD_INT 32
54079: PUSH
54080: LD_INT 33
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: IN
54096: NOT
54097: PUSH
54098: LD_VAR 0 6
54102: PUSH
54103: LD_INT 1
54105: EQUAL
54106: AND
54107: OR
54108: PUSH
54109: LD_VAR 0 1
54113: PUSH
54114: LD_INT 2
54116: PUSH
54117: LD_INT 3
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: IN
54124: NOT
54125: PUSH
54126: LD_VAR 0 6
54130: PUSH
54131: LD_INT 2
54133: EQUAL
54134: AND
54135: OR
54136: IFFALSE 54146
// mode = 0 ;
54138: LD_ADDR_VAR 0 6
54142: PUSH
54143: LD_INT 0
54145: ST_TO_ADDR
// case mode of 0 :
54146: LD_VAR 0 6
54150: PUSH
54151: LD_INT 0
54153: DOUBLE
54154: EQUAL
54155: IFTRUE 54159
54157: GO 65612
54159: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54160: LD_ADDR_VAR 0 11
54164: PUSH
54165: LD_INT 0
54167: PUSH
54168: LD_INT 0
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 0
54177: PUSH
54178: LD_INT 1
54180: NEG
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 1
54188: PUSH
54189: LD_INT 0
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 1
54198: PUSH
54199: LD_INT 1
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: PUSH
54206: LD_INT 0
54208: PUSH
54209: LD_INT 1
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 1
54218: NEG
54219: PUSH
54220: LD_INT 0
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 1
54229: NEG
54230: PUSH
54231: LD_INT 1
54233: NEG
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: LD_INT 1
54241: NEG
54242: PUSH
54243: LD_INT 2
54245: NEG
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 0
54253: PUSH
54254: LD_INT 2
54256: NEG
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: PUSH
54262: LD_INT 1
54264: PUSH
54265: LD_INT 1
54267: NEG
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 1
54275: PUSH
54276: LD_INT 2
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PUSH
54283: LD_INT 0
54285: PUSH
54286: LD_INT 2
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 1
54295: NEG
54296: PUSH
54297: LD_INT 1
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 1
54306: PUSH
54307: LD_INT 3
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: PUSH
54314: LD_INT 0
54316: PUSH
54317: LD_INT 3
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 1
54326: NEG
54327: PUSH
54328: LD_INT 2
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54353: LD_ADDR_VAR 0 12
54357: PUSH
54358: LD_INT 0
54360: PUSH
54361: LD_INT 0
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 0
54370: PUSH
54371: LD_INT 1
54373: NEG
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 1
54381: PUSH
54382: LD_INT 0
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 1
54391: PUSH
54392: LD_INT 1
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 0
54401: PUSH
54402: LD_INT 1
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 1
54411: NEG
54412: PUSH
54413: LD_INT 0
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: LD_INT 1
54422: NEG
54423: PUSH
54424: LD_INT 1
54426: NEG
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 1
54434: PUSH
54435: LD_INT 1
54437: NEG
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 2
54445: PUSH
54446: LD_INT 0
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 2
54455: PUSH
54456: LD_INT 1
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 1
54465: NEG
54466: PUSH
54467: LD_INT 1
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 2
54476: NEG
54477: PUSH
54478: LD_INT 0
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 2
54487: NEG
54488: PUSH
54489: LD_INT 1
54491: NEG
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 2
54499: NEG
54500: PUSH
54501: LD_INT 1
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 3
54510: NEG
54511: PUSH
54512: LD_INT 0
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 3
54521: NEG
54522: PUSH
54523: LD_INT 1
54525: NEG
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: LIST
54535: LIST
54536: LIST
54537: LIST
54538: LIST
54539: LIST
54540: LIST
54541: LIST
54542: LIST
54543: LIST
54544: LIST
54545: LIST
54546: LIST
54547: LIST
54548: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54549: LD_ADDR_VAR 0 13
54553: PUSH
54554: LD_INT 0
54556: PUSH
54557: LD_INT 0
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_INT 0
54566: PUSH
54567: LD_INT 1
54569: NEG
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 1
54577: PUSH
54578: LD_INT 0
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 1
54587: PUSH
54588: LD_INT 1
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 0
54597: PUSH
54598: LD_INT 1
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 1
54607: NEG
54608: PUSH
54609: LD_INT 0
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: LD_INT 1
54618: NEG
54619: PUSH
54620: LD_INT 1
54622: NEG
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 1
54630: NEG
54631: PUSH
54632: LD_INT 2
54634: NEG
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: LD_INT 2
54642: PUSH
54643: LD_INT 1
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 2
54652: PUSH
54653: LD_INT 2
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 1
54662: PUSH
54663: LD_INT 2
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 2
54672: NEG
54673: PUSH
54674: LD_INT 1
54676: NEG
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 2
54684: NEG
54685: PUSH
54686: LD_INT 2
54688: NEG
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: LD_INT 2
54696: NEG
54697: PUSH
54698: LD_INT 3
54700: NEG
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: LD_INT 3
54708: NEG
54709: PUSH
54710: LD_INT 2
54712: NEG
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: PUSH
54718: LD_INT 3
54720: NEG
54721: PUSH
54722: LD_INT 3
54724: NEG
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: LIST
54734: LIST
54735: LIST
54736: LIST
54737: LIST
54738: LIST
54739: LIST
54740: LIST
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54748: LD_ADDR_VAR 0 14
54752: PUSH
54753: LD_INT 0
54755: PUSH
54756: LD_INT 0
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 0
54765: PUSH
54766: LD_INT 1
54768: NEG
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 1
54776: PUSH
54777: LD_INT 0
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 1
54786: PUSH
54787: LD_INT 1
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 0
54796: PUSH
54797: LD_INT 1
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 1
54806: NEG
54807: PUSH
54808: LD_INT 0
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 1
54817: NEG
54818: PUSH
54819: LD_INT 1
54821: NEG
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: LD_INT 1
54829: NEG
54830: PUSH
54831: LD_INT 2
54833: NEG
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 0
54841: PUSH
54842: LD_INT 2
54844: NEG
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 1
54852: PUSH
54853: LD_INT 1
54855: NEG
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 1
54863: PUSH
54864: LD_INT 2
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 0
54873: PUSH
54874: LD_INT 2
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 1
54883: NEG
54884: PUSH
54885: LD_INT 1
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 1
54894: NEG
54895: PUSH
54896: LD_INT 3
54898: NEG
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: LD_INT 0
54906: PUSH
54907: LD_INT 3
54909: NEG
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: LD_INT 1
54917: PUSH
54918: LD_INT 2
54920: NEG
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: LIST
54932: LIST
54933: LIST
54934: LIST
54935: LIST
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54944: LD_ADDR_VAR 0 15
54948: PUSH
54949: LD_INT 0
54951: PUSH
54952: LD_INT 0
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: LD_INT 0
54961: PUSH
54962: LD_INT 1
54964: NEG
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: LD_INT 1
54972: PUSH
54973: LD_INT 0
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 1
54982: PUSH
54983: LD_INT 1
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 0
54992: PUSH
54993: LD_INT 1
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 1
55002: NEG
55003: PUSH
55004: LD_INT 0
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 1
55013: NEG
55014: PUSH
55015: LD_INT 1
55017: NEG
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 1
55025: PUSH
55026: LD_INT 1
55028: NEG
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 2
55036: PUSH
55037: LD_INT 0
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 2
55046: PUSH
55047: LD_INT 1
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: LD_INT 1
55056: NEG
55057: PUSH
55058: LD_INT 1
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 2
55067: NEG
55068: PUSH
55069: LD_INT 0
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 2
55078: NEG
55079: PUSH
55080: LD_INT 1
55082: NEG
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 2
55090: PUSH
55091: LD_INT 1
55093: NEG
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: LD_INT 3
55101: PUSH
55102: LD_INT 0
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: LD_INT 3
55111: PUSH
55112: LD_INT 1
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: LIST
55123: LIST
55124: LIST
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55137: LD_ADDR_VAR 0 16
55141: PUSH
55142: LD_INT 0
55144: PUSH
55145: LD_INT 0
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 0
55154: PUSH
55155: LD_INT 1
55157: NEG
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 1
55165: PUSH
55166: LD_INT 0
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 1
55175: PUSH
55176: LD_INT 1
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 0
55185: PUSH
55186: LD_INT 1
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: LD_INT 1
55195: NEG
55196: PUSH
55197: LD_INT 0
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 1
55206: NEG
55207: PUSH
55208: LD_INT 1
55210: NEG
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 1
55218: NEG
55219: PUSH
55220: LD_INT 2
55222: NEG
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 2
55230: PUSH
55231: LD_INT 1
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: LD_INT 2
55240: PUSH
55241: LD_INT 2
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: LD_INT 1
55250: PUSH
55251: LD_INT 2
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 2
55260: NEG
55261: PUSH
55262: LD_INT 1
55264: NEG
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 2
55272: NEG
55273: PUSH
55274: LD_INT 2
55276: NEG
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 3
55284: PUSH
55285: LD_INT 2
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 3
55294: PUSH
55295: LD_INT 3
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: LD_INT 2
55304: PUSH
55305: LD_INT 3
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: LIST
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55330: LD_ADDR_VAR 0 17
55334: PUSH
55335: LD_INT 0
55337: PUSH
55338: LD_INT 0
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 0
55347: PUSH
55348: LD_INT 1
55350: NEG
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 1
55358: PUSH
55359: LD_INT 0
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 1
55368: PUSH
55369: LD_INT 1
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 0
55378: PUSH
55379: LD_INT 1
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 1
55388: NEG
55389: PUSH
55390: LD_INT 0
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 1
55399: NEG
55400: PUSH
55401: LD_INT 1
55403: NEG
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 1
55411: NEG
55412: PUSH
55413: LD_INT 2
55415: NEG
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 0
55423: PUSH
55424: LD_INT 2
55426: NEG
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 1
55434: PUSH
55435: LD_INT 1
55437: NEG
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 2
55445: PUSH
55446: LD_INT 0
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 2
55455: PUSH
55456: LD_INT 1
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 2
55465: PUSH
55466: LD_INT 2
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_INT 1
55475: PUSH
55476: LD_INT 2
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: LD_INT 0
55485: PUSH
55486: LD_INT 2
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: PUSH
55493: LD_INT 1
55495: NEG
55496: PUSH
55497: LD_INT 1
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: PUSH
55504: LD_INT 2
55506: NEG
55507: PUSH
55508: LD_INT 0
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 2
55517: NEG
55518: PUSH
55519: LD_INT 1
55521: NEG
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 2
55529: NEG
55530: PUSH
55531: LD_INT 2
55533: NEG
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55560: LD_ADDR_VAR 0 18
55564: PUSH
55565: LD_INT 0
55567: PUSH
55568: LD_INT 0
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: LD_INT 0
55577: PUSH
55578: LD_INT 1
55580: NEG
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: LD_INT 1
55588: PUSH
55589: LD_INT 0
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: PUSH
55596: LD_INT 1
55598: PUSH
55599: LD_INT 1
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: LD_INT 0
55608: PUSH
55609: LD_INT 1
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 1
55618: NEG
55619: PUSH
55620: LD_INT 0
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 1
55629: NEG
55630: PUSH
55631: LD_INT 1
55633: NEG
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 1
55641: NEG
55642: PUSH
55643: LD_INT 2
55645: NEG
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: LD_INT 0
55653: PUSH
55654: LD_INT 2
55656: NEG
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 1
55664: PUSH
55665: LD_INT 1
55667: NEG
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 2
55675: PUSH
55676: LD_INT 0
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: LD_INT 2
55685: PUSH
55686: LD_INT 1
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: LD_INT 2
55695: PUSH
55696: LD_INT 2
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 1
55705: PUSH
55706: LD_INT 2
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 0
55715: PUSH
55716: LD_INT 2
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 1
55725: NEG
55726: PUSH
55727: LD_INT 1
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 2
55736: NEG
55737: PUSH
55738: LD_INT 0
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 2
55747: NEG
55748: PUSH
55749: LD_INT 1
55751: NEG
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 2
55759: NEG
55760: PUSH
55761: LD_INT 2
55763: NEG
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55790: LD_ADDR_VAR 0 19
55794: PUSH
55795: LD_INT 0
55797: PUSH
55798: LD_INT 0
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: LD_INT 0
55807: PUSH
55808: LD_INT 1
55810: NEG
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 1
55818: PUSH
55819: LD_INT 0
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 1
55828: PUSH
55829: LD_INT 1
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: LD_INT 0
55838: PUSH
55839: LD_INT 1
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 1
55848: NEG
55849: PUSH
55850: LD_INT 0
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 1
55859: NEG
55860: PUSH
55861: LD_INT 1
55863: NEG
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 1
55871: NEG
55872: PUSH
55873: LD_INT 2
55875: NEG
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 0
55883: PUSH
55884: LD_INT 2
55886: NEG
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 1
55894: PUSH
55895: LD_INT 1
55897: NEG
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 2
55905: PUSH
55906: LD_INT 0
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: LD_INT 2
55915: PUSH
55916: LD_INT 1
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 2
55925: PUSH
55926: LD_INT 2
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 1
55935: PUSH
55936: LD_INT 2
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: LD_INT 0
55945: PUSH
55946: LD_INT 2
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 1
55955: NEG
55956: PUSH
55957: LD_INT 1
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 2
55966: NEG
55967: PUSH
55968: LD_INT 0
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: PUSH
55975: LD_INT 2
55977: NEG
55978: PUSH
55979: LD_INT 1
55981: NEG
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 2
55989: NEG
55990: PUSH
55991: LD_INT 2
55993: NEG
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56020: LD_ADDR_VAR 0 20
56024: PUSH
56025: LD_INT 0
56027: PUSH
56028: LD_INT 0
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 0
56037: PUSH
56038: LD_INT 1
56040: NEG
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: LD_INT 1
56048: PUSH
56049: LD_INT 0
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 1
56058: PUSH
56059: LD_INT 1
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: PUSH
56066: LD_INT 0
56068: PUSH
56069: LD_INT 1
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: LD_INT 1
56078: NEG
56079: PUSH
56080: LD_INT 0
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: LD_INT 1
56089: NEG
56090: PUSH
56091: LD_INT 1
56093: NEG
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 1
56101: NEG
56102: PUSH
56103: LD_INT 2
56105: NEG
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 0
56113: PUSH
56114: LD_INT 2
56116: NEG
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_INT 1
56124: PUSH
56125: LD_INT 1
56127: NEG
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 2
56135: PUSH
56136: LD_INT 0
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 2
56145: PUSH
56146: LD_INT 1
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 2
56155: PUSH
56156: LD_INT 2
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 1
56165: PUSH
56166: LD_INT 2
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 0
56175: PUSH
56176: LD_INT 2
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 1
56185: NEG
56186: PUSH
56187: LD_INT 1
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: LD_INT 2
56196: NEG
56197: PUSH
56198: LD_INT 0
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 2
56207: NEG
56208: PUSH
56209: LD_INT 1
56211: NEG
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 2
56219: NEG
56220: PUSH
56221: LD_INT 2
56223: NEG
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: LIST
56233: LIST
56234: LIST
56235: LIST
56236: LIST
56237: LIST
56238: LIST
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56250: LD_ADDR_VAR 0 21
56254: PUSH
56255: LD_INT 0
56257: PUSH
56258: LD_INT 0
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 0
56267: PUSH
56268: LD_INT 1
56270: NEG
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 1
56278: PUSH
56279: LD_INT 0
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PUSH
56286: LD_INT 1
56288: PUSH
56289: LD_INT 1
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: LD_INT 0
56298: PUSH
56299: LD_INT 1
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: PUSH
56306: LD_INT 1
56308: NEG
56309: PUSH
56310: LD_INT 0
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 1
56319: NEG
56320: PUSH
56321: LD_INT 1
56323: NEG
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 1
56331: NEG
56332: PUSH
56333: LD_INT 2
56335: NEG
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: LD_INT 0
56343: PUSH
56344: LD_INT 2
56346: NEG
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 1
56354: PUSH
56355: LD_INT 1
56357: NEG
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: LD_INT 2
56365: PUSH
56366: LD_INT 0
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 2
56375: PUSH
56376: LD_INT 1
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 2
56385: PUSH
56386: LD_INT 2
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 1
56395: PUSH
56396: LD_INT 2
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: LD_INT 0
56405: PUSH
56406: LD_INT 2
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 1
56415: NEG
56416: PUSH
56417: LD_INT 1
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 2
56426: NEG
56427: PUSH
56428: LD_INT 0
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: LD_INT 2
56437: NEG
56438: PUSH
56439: LD_INT 1
56441: NEG
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: LD_INT 2
56449: NEG
56450: PUSH
56451: LD_INT 2
56453: NEG
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: LIST
56463: LIST
56464: LIST
56465: LIST
56466: LIST
56467: LIST
56468: LIST
56469: LIST
56470: LIST
56471: LIST
56472: LIST
56473: LIST
56474: LIST
56475: LIST
56476: LIST
56477: LIST
56478: LIST
56479: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56480: LD_ADDR_VAR 0 22
56484: PUSH
56485: LD_INT 0
56487: PUSH
56488: LD_INT 0
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: LD_INT 0
56497: PUSH
56498: LD_INT 1
56500: NEG
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 1
56508: PUSH
56509: LD_INT 0
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 1
56518: PUSH
56519: LD_INT 1
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 0
56528: PUSH
56529: LD_INT 1
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 1
56538: NEG
56539: PUSH
56540: LD_INT 0
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 1
56549: NEG
56550: PUSH
56551: LD_INT 1
56553: NEG
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 1
56561: NEG
56562: PUSH
56563: LD_INT 2
56565: NEG
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: LD_INT 0
56573: PUSH
56574: LD_INT 2
56576: NEG
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: PUSH
56582: LD_INT 1
56584: PUSH
56585: LD_INT 1
56587: NEG
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: PUSH
56593: LD_INT 2
56595: PUSH
56596: LD_INT 0
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: LD_INT 2
56605: PUSH
56606: LD_INT 1
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: PUSH
56613: LD_INT 2
56615: PUSH
56616: LD_INT 2
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: PUSH
56623: LD_INT 1
56625: PUSH
56626: LD_INT 2
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: LD_INT 0
56635: PUSH
56636: LD_INT 2
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 1
56645: NEG
56646: PUSH
56647: LD_INT 1
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: LD_INT 2
56656: NEG
56657: PUSH
56658: LD_INT 0
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 2
56667: NEG
56668: PUSH
56669: LD_INT 1
56671: NEG
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 2
56679: NEG
56680: PUSH
56681: LD_INT 2
56683: NEG
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: LIST
56693: LIST
56694: LIST
56695: LIST
56696: LIST
56697: LIST
56698: LIST
56699: LIST
56700: LIST
56701: LIST
56702: LIST
56703: LIST
56704: LIST
56705: LIST
56706: LIST
56707: LIST
56708: LIST
56709: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56710: LD_ADDR_VAR 0 23
56714: PUSH
56715: LD_INT 0
56717: PUSH
56718: LD_INT 0
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 0
56727: PUSH
56728: LD_INT 1
56730: NEG
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: PUSH
56736: LD_INT 1
56738: PUSH
56739: LD_INT 0
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: LD_INT 1
56748: PUSH
56749: LD_INT 1
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: PUSH
56756: LD_INT 0
56758: PUSH
56759: LD_INT 1
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: LD_INT 1
56768: NEG
56769: PUSH
56770: LD_INT 0
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: LD_INT 1
56779: NEG
56780: PUSH
56781: LD_INT 1
56783: NEG
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 1
56791: NEG
56792: PUSH
56793: LD_INT 2
56795: NEG
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PUSH
56801: LD_INT 0
56803: PUSH
56804: LD_INT 2
56806: NEG
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: PUSH
56812: LD_INT 1
56814: PUSH
56815: LD_INT 1
56817: NEG
56818: PUSH
56819: EMPTY
56820: LIST
56821: LIST
56822: PUSH
56823: LD_INT 2
56825: PUSH
56826: LD_INT 0
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: PUSH
56833: LD_INT 2
56835: PUSH
56836: LD_INT 1
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: PUSH
56843: LD_INT 2
56845: PUSH
56846: LD_INT 2
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: LD_INT 1
56855: PUSH
56856: LD_INT 2
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: LD_INT 0
56865: PUSH
56866: LD_INT 2
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 1
56875: NEG
56876: PUSH
56877: LD_INT 1
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: LD_INT 2
56886: NEG
56887: PUSH
56888: LD_INT 0
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 2
56897: NEG
56898: PUSH
56899: LD_INT 1
56901: NEG
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: PUSH
56907: LD_INT 2
56909: NEG
56910: PUSH
56911: LD_INT 2
56913: NEG
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: LD_INT 2
56921: NEG
56922: PUSH
56923: LD_INT 3
56925: NEG
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 1
56933: NEG
56934: PUSH
56935: LD_INT 3
56937: NEG
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 1
56945: PUSH
56946: LD_INT 2
56948: NEG
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 2
56956: PUSH
56957: LD_INT 1
56959: NEG
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: LIST
56969: LIST
56970: LIST
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
56990: LD_ADDR_VAR 0 24
56994: PUSH
56995: LD_INT 0
56997: PUSH
56998: LD_INT 0
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 0
57007: PUSH
57008: LD_INT 1
57010: NEG
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: LD_INT 1
57018: PUSH
57019: LD_INT 0
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 1
57028: PUSH
57029: LD_INT 1
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PUSH
57036: LD_INT 0
57038: PUSH
57039: LD_INT 1
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: LD_INT 1
57048: NEG
57049: PUSH
57050: LD_INT 0
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 1
57059: NEG
57060: PUSH
57061: LD_INT 1
57063: NEG
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 1
57071: NEG
57072: PUSH
57073: LD_INT 2
57075: NEG
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: LD_INT 0
57083: PUSH
57084: LD_INT 2
57086: NEG
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 1
57094: PUSH
57095: LD_INT 1
57097: NEG
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: LD_INT 2
57105: PUSH
57106: LD_INT 0
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: PUSH
57113: LD_INT 2
57115: PUSH
57116: LD_INT 1
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: PUSH
57123: LD_INT 2
57125: PUSH
57126: LD_INT 2
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 1
57135: PUSH
57136: LD_INT 2
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: LD_INT 0
57145: PUSH
57146: LD_INT 2
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 1
57155: NEG
57156: PUSH
57157: LD_INT 1
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 2
57166: NEG
57167: PUSH
57168: LD_INT 0
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: LD_INT 2
57177: NEG
57178: PUSH
57179: LD_INT 1
57181: NEG
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 2
57189: NEG
57190: PUSH
57191: LD_INT 2
57193: NEG
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 1
57201: PUSH
57202: LD_INT 2
57204: NEG
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 2
57212: PUSH
57213: LD_INT 1
57215: NEG
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 3
57223: PUSH
57224: LD_INT 1
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 3
57233: PUSH
57234: LD_INT 2
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: LIST
57249: LIST
57250: LIST
57251: LIST
57252: LIST
57253: LIST
57254: LIST
57255: LIST
57256: LIST
57257: LIST
57258: LIST
57259: LIST
57260: LIST
57261: LIST
57262: LIST
57263: LIST
57264: LIST
57265: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
57266: LD_ADDR_VAR 0 25
57270: PUSH
57271: LD_INT 0
57273: PUSH
57274: LD_INT 0
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 0
57283: PUSH
57284: LD_INT 1
57286: NEG
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 1
57294: PUSH
57295: LD_INT 0
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: LD_INT 1
57304: PUSH
57305: LD_INT 1
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: LD_INT 0
57314: PUSH
57315: LD_INT 1
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 1
57324: NEG
57325: PUSH
57326: LD_INT 0
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: LD_INT 1
57335: NEG
57336: PUSH
57337: LD_INT 1
57339: NEG
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: LD_INT 1
57347: NEG
57348: PUSH
57349: LD_INT 2
57351: NEG
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 0
57359: PUSH
57360: LD_INT 2
57362: NEG
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: LD_INT 1
57370: PUSH
57371: LD_INT 1
57373: NEG
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: PUSH
57379: LD_INT 2
57381: PUSH
57382: LD_INT 0
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: LD_INT 2
57391: PUSH
57392: LD_INT 1
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: LD_INT 2
57401: PUSH
57402: LD_INT 2
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 1
57411: PUSH
57412: LD_INT 2
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: LD_INT 0
57421: PUSH
57422: LD_INT 2
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 1
57431: NEG
57432: PUSH
57433: LD_INT 1
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 2
57442: NEG
57443: PUSH
57444: LD_INT 0
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 2
57453: NEG
57454: PUSH
57455: LD_INT 1
57457: NEG
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: LD_INT 2
57465: NEG
57466: PUSH
57467: LD_INT 2
57469: NEG
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 3
57477: PUSH
57478: LD_INT 1
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 3
57487: PUSH
57488: LD_INT 2
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PUSH
57495: LD_INT 2
57497: PUSH
57498: LD_INT 3
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: LD_INT 1
57507: PUSH
57508: LD_INT 3
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57540: LD_ADDR_VAR 0 26
57544: PUSH
57545: LD_INT 0
57547: PUSH
57548: LD_INT 0
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 0
57557: PUSH
57558: LD_INT 1
57560: NEG
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 1
57568: PUSH
57569: LD_INT 0
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: LD_INT 1
57578: PUSH
57579: LD_INT 1
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 0
57588: PUSH
57589: LD_INT 1
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 1
57598: NEG
57599: PUSH
57600: LD_INT 0
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 1
57609: NEG
57610: PUSH
57611: LD_INT 1
57613: NEG
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 1
57621: NEG
57622: PUSH
57623: LD_INT 2
57625: NEG
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: PUSH
57631: LD_INT 0
57633: PUSH
57634: LD_INT 2
57636: NEG
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: LD_INT 1
57644: PUSH
57645: LD_INT 1
57647: NEG
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PUSH
57653: LD_INT 2
57655: PUSH
57656: LD_INT 0
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: LD_INT 2
57665: PUSH
57666: LD_INT 1
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: LD_INT 2
57675: PUSH
57676: LD_INT 2
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PUSH
57683: LD_INT 1
57685: PUSH
57686: LD_INT 2
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: PUSH
57693: LD_INT 0
57695: PUSH
57696: LD_INT 2
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: LD_INT 1
57705: NEG
57706: PUSH
57707: LD_INT 1
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: LD_INT 2
57716: NEG
57717: PUSH
57718: LD_INT 0
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PUSH
57725: LD_INT 2
57727: NEG
57728: PUSH
57729: LD_INT 1
57731: NEG
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: LD_INT 2
57739: NEG
57740: PUSH
57741: LD_INT 2
57743: NEG
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 2
57751: PUSH
57752: LD_INT 3
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: PUSH
57759: LD_INT 1
57761: PUSH
57762: LD_INT 3
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: PUSH
57769: LD_INT 1
57771: NEG
57772: PUSH
57773: LD_INT 2
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 2
57782: NEG
57783: PUSH
57784: LD_INT 1
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: LIST
57795: LIST
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: LIST
57801: LIST
57802: LIST
57803: LIST
57804: LIST
57805: LIST
57806: LIST
57807: LIST
57808: LIST
57809: LIST
57810: LIST
57811: LIST
57812: LIST
57813: LIST
57814: LIST
57815: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57816: LD_ADDR_VAR 0 27
57820: PUSH
57821: LD_INT 0
57823: PUSH
57824: LD_INT 0
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 0
57833: PUSH
57834: LD_INT 1
57836: NEG
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: LD_INT 1
57844: PUSH
57845: LD_INT 0
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 1
57854: PUSH
57855: LD_INT 1
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: LD_INT 0
57864: PUSH
57865: LD_INT 1
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: LD_INT 1
57874: NEG
57875: PUSH
57876: LD_INT 0
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: PUSH
57883: LD_INT 1
57885: NEG
57886: PUSH
57887: LD_INT 1
57889: NEG
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: PUSH
57895: LD_INT 1
57897: NEG
57898: PUSH
57899: LD_INT 2
57901: NEG
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 0
57909: PUSH
57910: LD_INT 2
57912: NEG
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: LD_INT 1
57920: PUSH
57921: LD_INT 1
57923: NEG
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: PUSH
57929: LD_INT 2
57931: PUSH
57932: LD_INT 0
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 2
57941: PUSH
57942: LD_INT 1
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 2
57951: PUSH
57952: LD_INT 2
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: LD_INT 1
57961: PUSH
57962: LD_INT 2
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 0
57971: PUSH
57972: LD_INT 2
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: PUSH
57979: LD_INT 1
57981: NEG
57982: PUSH
57983: LD_INT 1
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PUSH
57990: LD_INT 2
57992: NEG
57993: PUSH
57994: LD_INT 0
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: PUSH
58001: LD_INT 2
58003: NEG
58004: PUSH
58005: LD_INT 1
58007: NEG
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: PUSH
58013: LD_INT 2
58015: NEG
58016: PUSH
58017: LD_INT 2
58019: NEG
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 1
58027: NEG
58028: PUSH
58029: LD_INT 2
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 2
58038: NEG
58039: PUSH
58040: LD_INT 1
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 3
58049: NEG
58050: PUSH
58051: LD_INT 1
58053: NEG
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: PUSH
58059: LD_INT 3
58061: NEG
58062: PUSH
58063: LD_INT 2
58065: NEG
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: LIST
58075: LIST
58076: LIST
58077: LIST
58078: LIST
58079: LIST
58080: LIST
58081: LIST
58082: LIST
58083: LIST
58084: LIST
58085: LIST
58086: LIST
58087: LIST
58088: LIST
58089: LIST
58090: LIST
58091: LIST
58092: LIST
58093: LIST
58094: LIST
58095: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58096: LD_ADDR_VAR 0 28
58100: PUSH
58101: LD_INT 0
58103: PUSH
58104: LD_INT 0
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 0
58113: PUSH
58114: LD_INT 1
58116: NEG
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 1
58124: PUSH
58125: LD_INT 0
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: PUSH
58132: LD_INT 1
58134: PUSH
58135: LD_INT 1
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: PUSH
58142: LD_INT 0
58144: PUSH
58145: LD_INT 1
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: PUSH
58152: LD_INT 1
58154: NEG
58155: PUSH
58156: LD_INT 0
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: LD_INT 1
58165: NEG
58166: PUSH
58167: LD_INT 1
58169: NEG
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: PUSH
58175: LD_INT 1
58177: NEG
58178: PUSH
58179: LD_INT 2
58181: NEG
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 0
58189: PUSH
58190: LD_INT 2
58192: NEG
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: LD_INT 1
58200: PUSH
58201: LD_INT 1
58203: NEG
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 2
58211: PUSH
58212: LD_INT 0
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: LD_INT 2
58221: PUSH
58222: LD_INT 1
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: LD_INT 2
58231: PUSH
58232: LD_INT 2
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: LD_INT 1
58241: PUSH
58242: LD_INT 2
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 0
58251: PUSH
58252: LD_INT 2
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: PUSH
58259: LD_INT 1
58261: NEG
58262: PUSH
58263: LD_INT 1
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: PUSH
58270: LD_INT 2
58272: NEG
58273: PUSH
58274: LD_INT 0
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: LD_INT 2
58283: NEG
58284: PUSH
58285: LD_INT 1
58287: NEG
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: PUSH
58293: LD_INT 2
58295: NEG
58296: PUSH
58297: LD_INT 2
58299: NEG
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: PUSH
58305: LD_INT 2
58307: NEG
58308: PUSH
58309: LD_INT 3
58311: NEG
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: LD_INT 1
58319: NEG
58320: PUSH
58321: LD_INT 3
58323: NEG
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: LD_INT 3
58331: NEG
58332: PUSH
58333: LD_INT 1
58335: NEG
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 3
58343: NEG
58344: PUSH
58345: LD_INT 2
58347: NEG
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: LIST
58357: LIST
58358: LIST
58359: LIST
58360: LIST
58361: LIST
58362: LIST
58363: LIST
58364: LIST
58365: LIST
58366: LIST
58367: LIST
58368: LIST
58369: LIST
58370: LIST
58371: LIST
58372: LIST
58373: LIST
58374: LIST
58375: LIST
58376: LIST
58377: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58378: LD_ADDR_VAR 0 29
58382: PUSH
58383: LD_INT 0
58385: PUSH
58386: LD_INT 0
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 0
58395: PUSH
58396: LD_INT 1
58398: NEG
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: LD_INT 1
58406: PUSH
58407: LD_INT 0
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: PUSH
58414: LD_INT 1
58416: PUSH
58417: LD_INT 1
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: PUSH
58424: LD_INT 0
58426: PUSH
58427: LD_INT 1
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 1
58436: NEG
58437: PUSH
58438: LD_INT 0
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: LD_INT 1
58447: NEG
58448: PUSH
58449: LD_INT 1
58451: NEG
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: LD_INT 1
58459: NEG
58460: PUSH
58461: LD_INT 2
58463: NEG
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: LD_INT 0
58471: PUSH
58472: LD_INT 2
58474: NEG
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: PUSH
58480: LD_INT 1
58482: PUSH
58483: LD_INT 1
58485: NEG
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: LD_INT 2
58493: PUSH
58494: LD_INT 0
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 2
58503: PUSH
58504: LD_INT 1
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 1
58513: PUSH
58514: LD_INT 2
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: PUSH
58521: LD_INT 0
58523: PUSH
58524: LD_INT 2
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PUSH
58531: LD_INT 1
58533: NEG
58534: PUSH
58535: LD_INT 1
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 2
58544: NEG
58545: PUSH
58546: LD_INT 1
58548: NEG
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: PUSH
58554: LD_INT 2
58556: NEG
58557: PUSH
58558: LD_INT 2
58560: NEG
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: PUSH
58566: LD_INT 2
58568: NEG
58569: PUSH
58570: LD_INT 3
58572: NEG
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: LD_INT 2
58580: PUSH
58581: LD_INT 1
58583: NEG
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PUSH
58589: LD_INT 3
58591: PUSH
58592: LD_INT 1
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: PUSH
58599: LD_INT 1
58601: PUSH
58602: LD_INT 3
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 1
58611: NEG
58612: PUSH
58613: LD_INT 2
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: LD_INT 3
58622: NEG
58623: PUSH
58624: LD_INT 2
58626: NEG
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: LIST
58636: LIST
58637: LIST
58638: LIST
58639: LIST
58640: LIST
58641: LIST
58642: LIST
58643: LIST
58644: LIST
58645: LIST
58646: LIST
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: LIST
58655: LIST
58656: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58657: LD_ADDR_VAR 0 30
58661: PUSH
58662: LD_INT 0
58664: PUSH
58665: LD_INT 0
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 0
58674: PUSH
58675: LD_INT 1
58677: NEG
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: LD_INT 1
58685: PUSH
58686: LD_INT 0
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PUSH
58693: LD_INT 1
58695: PUSH
58696: LD_INT 1
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PUSH
58703: LD_INT 0
58705: PUSH
58706: LD_INT 1
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: LD_INT 1
58715: NEG
58716: PUSH
58717: LD_INT 0
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: PUSH
58724: LD_INT 1
58726: NEG
58727: PUSH
58728: LD_INT 1
58730: NEG
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: LD_INT 1
58738: NEG
58739: PUSH
58740: LD_INT 2
58742: NEG
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 0
58750: PUSH
58751: LD_INT 2
58753: NEG
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PUSH
58759: LD_INT 1
58761: PUSH
58762: LD_INT 1
58764: NEG
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: PUSH
58770: LD_INT 2
58772: PUSH
58773: LD_INT 0
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: LD_INT 2
58782: PUSH
58783: LD_INT 1
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: LD_INT 2
58792: PUSH
58793: LD_INT 2
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: PUSH
58800: LD_INT 1
58802: PUSH
58803: LD_INT 2
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PUSH
58810: LD_INT 1
58812: NEG
58813: PUSH
58814: LD_INT 1
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: PUSH
58821: LD_INT 2
58823: NEG
58824: PUSH
58825: LD_INT 0
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PUSH
58832: LD_INT 2
58834: NEG
58835: PUSH
58836: LD_INT 1
58838: NEG
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: PUSH
58844: LD_INT 1
58846: NEG
58847: PUSH
58848: LD_INT 3
58850: NEG
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: LD_INT 1
58858: PUSH
58859: LD_INT 2
58861: NEG
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 3
58869: PUSH
58870: LD_INT 2
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 2
58879: PUSH
58880: LD_INT 3
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 2
58889: NEG
58890: PUSH
58891: LD_INT 1
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 3
58900: NEG
58901: PUSH
58902: LD_INT 1
58904: NEG
58905: PUSH
58906: EMPTY
58907: LIST
58908: LIST
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: LIST
58914: LIST
58915: LIST
58916: LIST
58917: LIST
58918: LIST
58919: LIST
58920: LIST
58921: LIST
58922: LIST
58923: LIST
58924: LIST
58925: LIST
58926: LIST
58927: LIST
58928: LIST
58929: LIST
58930: LIST
58931: LIST
58932: LIST
58933: LIST
58934: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58935: LD_ADDR_VAR 0 31
58939: PUSH
58940: LD_INT 0
58942: PUSH
58943: LD_INT 0
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: PUSH
58950: LD_INT 0
58952: PUSH
58953: LD_INT 1
58955: NEG
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: PUSH
58961: LD_INT 1
58963: PUSH
58964: LD_INT 0
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: PUSH
58971: LD_INT 1
58973: PUSH
58974: LD_INT 1
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 0
58983: PUSH
58984: LD_INT 1
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PUSH
58991: LD_INT 1
58993: NEG
58994: PUSH
58995: LD_INT 0
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: PUSH
59002: LD_INT 1
59004: NEG
59005: PUSH
59006: LD_INT 1
59008: NEG
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: PUSH
59014: LD_INT 1
59016: NEG
59017: PUSH
59018: LD_INT 2
59020: NEG
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 1
59028: PUSH
59029: LD_INT 1
59031: NEG
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: LD_INT 2
59039: PUSH
59040: LD_INT 0
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: LD_INT 2
59049: PUSH
59050: LD_INT 1
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: PUSH
59057: LD_INT 2
59059: PUSH
59060: LD_INT 2
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 1
59069: PUSH
59070: LD_INT 2
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: LD_INT 0
59079: PUSH
59080: LD_INT 2
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: LD_INT 1
59089: NEG
59090: PUSH
59091: LD_INT 1
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 2
59100: NEG
59101: PUSH
59102: LD_INT 1
59104: NEG
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: PUSH
59110: LD_INT 2
59112: NEG
59113: PUSH
59114: LD_INT 2
59116: NEG
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: PUSH
59122: LD_INT 2
59124: NEG
59125: PUSH
59126: LD_INT 3
59128: NEG
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 2
59136: PUSH
59137: LD_INT 1
59139: NEG
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 3
59147: PUSH
59148: LD_INT 1
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: LD_INT 1
59157: PUSH
59158: LD_INT 3
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 1
59167: NEG
59168: PUSH
59169: LD_INT 2
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: LD_INT 3
59178: NEG
59179: PUSH
59180: LD_INT 2
59182: NEG
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: LIST
59192: LIST
59193: LIST
59194: LIST
59195: LIST
59196: LIST
59197: LIST
59198: LIST
59199: LIST
59200: LIST
59201: LIST
59202: LIST
59203: LIST
59204: LIST
59205: LIST
59206: LIST
59207: LIST
59208: LIST
59209: LIST
59210: LIST
59211: LIST
59212: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59213: LD_ADDR_VAR 0 32
59217: PUSH
59218: LD_INT 0
59220: PUSH
59221: LD_INT 0
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: PUSH
59228: LD_INT 0
59230: PUSH
59231: LD_INT 1
59233: NEG
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: LD_INT 1
59241: PUSH
59242: LD_INT 0
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 1
59251: PUSH
59252: LD_INT 1
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PUSH
59259: LD_INT 0
59261: PUSH
59262: LD_INT 1
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PUSH
59269: LD_INT 1
59271: NEG
59272: PUSH
59273: LD_INT 0
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: LD_INT 1
59282: NEG
59283: PUSH
59284: LD_INT 1
59286: NEG
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: LD_INT 1
59294: NEG
59295: PUSH
59296: LD_INT 2
59298: NEG
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PUSH
59304: LD_INT 0
59306: PUSH
59307: LD_INT 2
59309: NEG
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: PUSH
59315: LD_INT 1
59317: PUSH
59318: LD_INT 1
59320: NEG
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: PUSH
59326: LD_INT 2
59328: PUSH
59329: LD_INT 1
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: PUSH
59336: LD_INT 2
59338: PUSH
59339: LD_INT 2
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: LD_INT 1
59348: PUSH
59349: LD_INT 2
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: LD_INT 0
59358: PUSH
59359: LD_INT 2
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: LD_INT 1
59368: NEG
59369: PUSH
59370: LD_INT 1
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 2
59379: NEG
59380: PUSH
59381: LD_INT 0
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: LD_INT 2
59390: NEG
59391: PUSH
59392: LD_INT 1
59394: NEG
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 1
59402: NEG
59403: PUSH
59404: LD_INT 3
59406: NEG
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PUSH
59412: LD_INT 1
59414: PUSH
59415: LD_INT 2
59417: NEG
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: PUSH
59423: LD_INT 3
59425: PUSH
59426: LD_INT 2
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: LD_INT 2
59435: PUSH
59436: LD_INT 3
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: LD_INT 2
59445: NEG
59446: PUSH
59447: LD_INT 1
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: PUSH
59454: LD_INT 3
59456: NEG
59457: PUSH
59458: LD_INT 1
59460: NEG
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: LIST
59470: LIST
59471: LIST
59472: LIST
59473: LIST
59474: LIST
59475: LIST
59476: LIST
59477: LIST
59478: LIST
59479: LIST
59480: LIST
59481: LIST
59482: LIST
59483: LIST
59484: LIST
59485: LIST
59486: LIST
59487: LIST
59488: LIST
59489: LIST
59490: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59491: LD_ADDR_VAR 0 33
59495: PUSH
59496: LD_INT 0
59498: PUSH
59499: LD_INT 0
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 0
59508: PUSH
59509: LD_INT 1
59511: NEG
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: PUSH
59517: LD_INT 1
59519: PUSH
59520: LD_INT 0
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 1
59529: PUSH
59530: LD_INT 1
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: PUSH
59537: LD_INT 0
59539: PUSH
59540: LD_INT 1
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: PUSH
59547: LD_INT 1
59549: NEG
59550: PUSH
59551: LD_INT 0
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: LD_INT 1
59560: NEG
59561: PUSH
59562: LD_INT 1
59564: NEG
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: PUSH
59570: LD_INT 1
59572: NEG
59573: PUSH
59574: LD_INT 2
59576: NEG
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: PUSH
59582: LD_INT 1
59584: PUSH
59585: LD_INT 1
59587: NEG
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: LD_INT 2
59595: PUSH
59596: LD_INT 0
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: LD_INT 2
59605: PUSH
59606: LD_INT 1
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: LD_INT 1
59615: PUSH
59616: LD_INT 2
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 0
59625: PUSH
59626: LD_INT 2
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: LD_INT 1
59635: NEG
59636: PUSH
59637: LD_INT 1
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: PUSH
59644: LD_INT 2
59646: NEG
59647: PUSH
59648: LD_INT 0
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 2
59657: NEG
59658: PUSH
59659: LD_INT 1
59661: NEG
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: LD_INT 2
59669: NEG
59670: PUSH
59671: LD_INT 2
59673: NEG
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: LD_INT 2
59681: NEG
59682: PUSH
59683: LD_INT 3
59685: NEG
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: PUSH
59691: LD_INT 2
59693: PUSH
59694: LD_INT 1
59696: NEG
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: PUSH
59702: LD_INT 3
59704: PUSH
59705: LD_INT 1
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: PUSH
59712: LD_INT 1
59714: PUSH
59715: LD_INT 3
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: PUSH
59722: LD_INT 1
59724: NEG
59725: PUSH
59726: LD_INT 2
59728: PUSH
59729: EMPTY
59730: LIST
59731: LIST
59732: PUSH
59733: LD_INT 3
59735: NEG
59736: PUSH
59737: LD_INT 2
59739: NEG
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: LIST
59749: LIST
59750: LIST
59751: LIST
59752: LIST
59753: LIST
59754: LIST
59755: LIST
59756: LIST
59757: LIST
59758: LIST
59759: LIST
59760: LIST
59761: LIST
59762: LIST
59763: LIST
59764: LIST
59765: LIST
59766: LIST
59767: LIST
59768: LIST
59769: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59770: LD_ADDR_VAR 0 34
59774: PUSH
59775: LD_INT 0
59777: PUSH
59778: LD_INT 0
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: LD_INT 0
59787: PUSH
59788: LD_INT 1
59790: NEG
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: PUSH
59796: LD_INT 1
59798: PUSH
59799: LD_INT 0
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: PUSH
59806: LD_INT 1
59808: PUSH
59809: LD_INT 1
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PUSH
59816: LD_INT 0
59818: PUSH
59819: LD_INT 1
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PUSH
59826: LD_INT 1
59828: NEG
59829: PUSH
59830: LD_INT 0
59832: PUSH
59833: EMPTY
59834: LIST
59835: LIST
59836: PUSH
59837: LD_INT 1
59839: NEG
59840: PUSH
59841: LD_INT 1
59843: NEG
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: PUSH
59849: LD_INT 1
59851: NEG
59852: PUSH
59853: LD_INT 2
59855: NEG
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: LD_INT 0
59863: PUSH
59864: LD_INT 2
59866: NEG
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: PUSH
59872: LD_INT 1
59874: PUSH
59875: LD_INT 1
59877: NEG
59878: PUSH
59879: EMPTY
59880: LIST
59881: LIST
59882: PUSH
59883: LD_INT 2
59885: PUSH
59886: LD_INT 1
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: PUSH
59893: LD_INT 2
59895: PUSH
59896: LD_INT 2
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: LD_INT 1
59905: PUSH
59906: LD_INT 2
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: PUSH
59913: LD_INT 1
59915: NEG
59916: PUSH
59917: LD_INT 1
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: PUSH
59924: LD_INT 2
59926: NEG
59927: PUSH
59928: LD_INT 0
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: LD_INT 2
59937: NEG
59938: PUSH
59939: LD_INT 1
59941: NEG
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: PUSH
59947: LD_INT 2
59949: NEG
59950: PUSH
59951: LD_INT 2
59953: NEG
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: PUSH
59959: LD_INT 1
59961: NEG
59962: PUSH
59963: LD_INT 3
59965: NEG
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: LD_INT 1
59973: PUSH
59974: LD_INT 2
59976: NEG
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 3
59984: PUSH
59985: LD_INT 2
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: LD_INT 2
59994: PUSH
59995: LD_INT 3
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PUSH
60002: LD_INT 2
60004: NEG
60005: PUSH
60006: LD_INT 1
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: PUSH
60013: LD_INT 3
60015: NEG
60016: PUSH
60017: LD_INT 1
60019: NEG
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: LIST
60029: LIST
60030: LIST
60031: LIST
60032: LIST
60033: LIST
60034: LIST
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: LIST
60040: LIST
60041: LIST
60042: LIST
60043: LIST
60044: LIST
60045: LIST
60046: LIST
60047: LIST
60048: LIST
60049: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60050: LD_ADDR_VAR 0 35
60054: PUSH
60055: LD_INT 0
60057: PUSH
60058: LD_INT 0
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: PUSH
60065: LD_INT 0
60067: PUSH
60068: LD_INT 1
60070: NEG
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: LD_INT 1
60078: PUSH
60079: LD_INT 0
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: LD_INT 1
60088: PUSH
60089: LD_INT 1
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 0
60098: PUSH
60099: LD_INT 1
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 1
60108: NEG
60109: PUSH
60110: LD_INT 0
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: PUSH
60117: LD_INT 1
60119: NEG
60120: PUSH
60121: LD_INT 1
60123: NEG
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: PUSH
60129: LD_INT 2
60131: PUSH
60132: LD_INT 1
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: PUSH
60139: LD_INT 2
60141: NEG
60142: PUSH
60143: LD_INT 1
60145: NEG
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: LIST
60155: LIST
60156: LIST
60157: LIST
60158: LIST
60159: LIST
60160: LIST
60161: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60162: LD_ADDR_VAR 0 36
60166: PUSH
60167: LD_INT 0
60169: PUSH
60170: LD_INT 0
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: PUSH
60177: LD_INT 0
60179: PUSH
60180: LD_INT 1
60182: NEG
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: LD_INT 1
60190: PUSH
60191: LD_INT 0
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: LD_INT 1
60200: PUSH
60201: LD_INT 1
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 0
60210: PUSH
60211: LD_INT 1
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PUSH
60218: LD_INT 1
60220: NEG
60221: PUSH
60222: LD_INT 0
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: LD_INT 1
60231: NEG
60232: PUSH
60233: LD_INT 1
60235: NEG
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: LD_INT 1
60243: NEG
60244: PUSH
60245: LD_INT 2
60247: NEG
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: PUSH
60253: LD_INT 1
60255: PUSH
60256: LD_INT 2
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: LIST
60267: LIST
60268: LIST
60269: LIST
60270: LIST
60271: LIST
60272: LIST
60273: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60274: LD_ADDR_VAR 0 37
60278: PUSH
60279: LD_INT 0
60281: PUSH
60282: LD_INT 0
60284: PUSH
60285: EMPTY
60286: LIST
60287: LIST
60288: PUSH
60289: LD_INT 0
60291: PUSH
60292: LD_INT 1
60294: NEG
60295: PUSH
60296: EMPTY
60297: LIST
60298: LIST
60299: PUSH
60300: LD_INT 1
60302: PUSH
60303: LD_INT 0
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: PUSH
60310: LD_INT 1
60312: PUSH
60313: LD_INT 1
60315: PUSH
60316: EMPTY
60317: LIST
60318: LIST
60319: PUSH
60320: LD_INT 0
60322: PUSH
60323: LD_INT 1
60325: PUSH
60326: EMPTY
60327: LIST
60328: LIST
60329: PUSH
60330: LD_INT 1
60332: NEG
60333: PUSH
60334: LD_INT 0
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PUSH
60341: LD_INT 1
60343: NEG
60344: PUSH
60345: LD_INT 1
60347: NEG
60348: PUSH
60349: EMPTY
60350: LIST
60351: LIST
60352: PUSH
60353: LD_INT 1
60355: PUSH
60356: LD_INT 1
60358: NEG
60359: PUSH
60360: EMPTY
60361: LIST
60362: LIST
60363: PUSH
60364: LD_INT 1
60366: NEG
60367: PUSH
60368: LD_INT 1
60370: PUSH
60371: EMPTY
60372: LIST
60373: LIST
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60386: LD_ADDR_VAR 0 38
60390: PUSH
60391: LD_INT 0
60393: PUSH
60394: LD_INT 0
60396: PUSH
60397: EMPTY
60398: LIST
60399: LIST
60400: PUSH
60401: LD_INT 0
60403: PUSH
60404: LD_INT 1
60406: NEG
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: PUSH
60412: LD_INT 1
60414: PUSH
60415: LD_INT 0
60417: PUSH
60418: EMPTY
60419: LIST
60420: LIST
60421: PUSH
60422: LD_INT 1
60424: PUSH
60425: LD_INT 1
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: PUSH
60432: LD_INT 0
60434: PUSH
60435: LD_INT 1
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: PUSH
60442: LD_INT 1
60444: NEG
60445: PUSH
60446: LD_INT 0
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 1
60455: NEG
60456: PUSH
60457: LD_INT 1
60459: NEG
60460: PUSH
60461: EMPTY
60462: LIST
60463: LIST
60464: PUSH
60465: LD_INT 2
60467: PUSH
60468: LD_INT 1
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: PUSH
60475: LD_INT 2
60477: NEG
60478: PUSH
60479: LD_INT 1
60481: NEG
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: LIST
60491: LIST
60492: LIST
60493: LIST
60494: LIST
60495: LIST
60496: LIST
60497: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60498: LD_ADDR_VAR 0 39
60502: PUSH
60503: LD_INT 0
60505: PUSH
60506: LD_INT 0
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: PUSH
60513: LD_INT 0
60515: PUSH
60516: LD_INT 1
60518: NEG
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: PUSH
60524: LD_INT 1
60526: PUSH
60527: LD_INT 0
60529: PUSH
60530: EMPTY
60531: LIST
60532: LIST
60533: PUSH
60534: LD_INT 1
60536: PUSH
60537: LD_INT 1
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: PUSH
60544: LD_INT 0
60546: PUSH
60547: LD_INT 1
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: PUSH
60554: LD_INT 1
60556: NEG
60557: PUSH
60558: LD_INT 0
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 1
60567: NEG
60568: PUSH
60569: LD_INT 1
60571: NEG
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: PUSH
60577: LD_INT 1
60579: NEG
60580: PUSH
60581: LD_INT 2
60583: NEG
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: LD_INT 1
60591: PUSH
60592: LD_INT 2
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: LIST
60603: LIST
60604: LIST
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60610: LD_ADDR_VAR 0 40
60614: PUSH
60615: LD_INT 0
60617: PUSH
60618: LD_INT 0
60620: PUSH
60621: EMPTY
60622: LIST
60623: LIST
60624: PUSH
60625: LD_INT 0
60627: PUSH
60628: LD_INT 1
60630: NEG
60631: PUSH
60632: EMPTY
60633: LIST
60634: LIST
60635: PUSH
60636: LD_INT 1
60638: PUSH
60639: LD_INT 0
60641: PUSH
60642: EMPTY
60643: LIST
60644: LIST
60645: PUSH
60646: LD_INT 1
60648: PUSH
60649: LD_INT 1
60651: PUSH
60652: EMPTY
60653: LIST
60654: LIST
60655: PUSH
60656: LD_INT 0
60658: PUSH
60659: LD_INT 1
60661: PUSH
60662: EMPTY
60663: LIST
60664: LIST
60665: PUSH
60666: LD_INT 1
60668: NEG
60669: PUSH
60670: LD_INT 0
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: PUSH
60677: LD_INT 1
60679: NEG
60680: PUSH
60681: LD_INT 1
60683: NEG
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: PUSH
60689: LD_INT 1
60691: PUSH
60692: LD_INT 1
60694: NEG
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PUSH
60700: LD_INT 1
60702: NEG
60703: PUSH
60704: LD_INT 1
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: LIST
60715: LIST
60716: LIST
60717: LIST
60718: LIST
60719: LIST
60720: LIST
60721: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60722: LD_ADDR_VAR 0 41
60726: PUSH
60727: LD_INT 0
60729: PUSH
60730: LD_INT 0
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: PUSH
60737: LD_INT 0
60739: PUSH
60740: LD_INT 1
60742: NEG
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: PUSH
60748: LD_INT 1
60750: PUSH
60751: LD_INT 0
60753: PUSH
60754: EMPTY
60755: LIST
60756: LIST
60757: PUSH
60758: LD_INT 1
60760: PUSH
60761: LD_INT 1
60763: PUSH
60764: EMPTY
60765: LIST
60766: LIST
60767: PUSH
60768: LD_INT 0
60770: PUSH
60771: LD_INT 1
60773: PUSH
60774: EMPTY
60775: LIST
60776: LIST
60777: PUSH
60778: LD_INT 1
60780: NEG
60781: PUSH
60782: LD_INT 0
60784: PUSH
60785: EMPTY
60786: LIST
60787: LIST
60788: PUSH
60789: LD_INT 1
60791: NEG
60792: PUSH
60793: LD_INT 1
60795: NEG
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: PUSH
60801: LD_INT 1
60803: NEG
60804: PUSH
60805: LD_INT 2
60807: NEG
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: PUSH
60813: LD_INT 1
60815: PUSH
60816: LD_INT 1
60818: NEG
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: PUSH
60824: LD_INT 2
60826: PUSH
60827: LD_INT 0
60829: PUSH
60830: EMPTY
60831: LIST
60832: LIST
60833: PUSH
60834: LD_INT 2
60836: PUSH
60837: LD_INT 1
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 2
60846: PUSH
60847: LD_INT 2
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 1
60856: PUSH
60857: LD_INT 2
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 1
60866: NEG
60867: PUSH
60868: LD_INT 1
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 2
60877: NEG
60878: PUSH
60879: LD_INT 0
60881: PUSH
60882: EMPTY
60883: LIST
60884: LIST
60885: PUSH
60886: LD_INT 2
60888: NEG
60889: PUSH
60890: LD_INT 1
60892: NEG
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: PUSH
60898: LD_INT 2
60900: NEG
60901: PUSH
60902: LD_INT 2
60904: NEG
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: PUSH
60910: LD_INT 2
60912: NEG
60913: PUSH
60914: LD_INT 3
60916: NEG
60917: PUSH
60918: EMPTY
60919: LIST
60920: LIST
60921: PUSH
60922: LD_INT 2
60924: PUSH
60925: LD_INT 1
60927: NEG
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: PUSH
60933: LD_INT 3
60935: PUSH
60936: LD_INT 0
60938: PUSH
60939: EMPTY
60940: LIST
60941: LIST
60942: PUSH
60943: LD_INT 3
60945: PUSH
60946: LD_INT 1
60948: PUSH
60949: EMPTY
60950: LIST
60951: LIST
60952: PUSH
60953: LD_INT 3
60955: PUSH
60956: LD_INT 2
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: PUSH
60963: LD_INT 3
60965: PUSH
60966: LD_INT 3
60968: PUSH
60969: EMPTY
60970: LIST
60971: LIST
60972: PUSH
60973: LD_INT 2
60975: PUSH
60976: LD_INT 3
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 2
60985: NEG
60986: PUSH
60987: LD_INT 1
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 3
60996: NEG
60997: PUSH
60998: LD_INT 0
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 3
61007: NEG
61008: PUSH
61009: LD_INT 1
61011: NEG
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: PUSH
61017: LD_INT 3
61019: NEG
61020: PUSH
61021: LD_INT 2
61023: NEG
61024: PUSH
61025: EMPTY
61026: LIST
61027: LIST
61028: PUSH
61029: LD_INT 3
61031: NEG
61032: PUSH
61033: LD_INT 3
61035: NEG
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: LIST
61045: LIST
61046: LIST
61047: LIST
61048: LIST
61049: LIST
61050: LIST
61051: LIST
61052: LIST
61053: LIST
61054: LIST
61055: LIST
61056: LIST
61057: LIST
61058: LIST
61059: LIST
61060: LIST
61061: LIST
61062: LIST
61063: LIST
61064: LIST
61065: LIST
61066: LIST
61067: LIST
61068: LIST
61069: LIST
61070: LIST
61071: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61072: LD_ADDR_VAR 0 42
61076: PUSH
61077: LD_INT 0
61079: PUSH
61080: LD_INT 0
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: PUSH
61087: LD_INT 0
61089: PUSH
61090: LD_INT 1
61092: NEG
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: PUSH
61098: LD_INT 1
61100: PUSH
61101: LD_INT 0
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: LD_INT 1
61110: PUSH
61111: LD_INT 1
61113: PUSH
61114: EMPTY
61115: LIST
61116: LIST
61117: PUSH
61118: LD_INT 0
61120: PUSH
61121: LD_INT 1
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: PUSH
61128: LD_INT 1
61130: NEG
61131: PUSH
61132: LD_INT 0
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: PUSH
61139: LD_INT 1
61141: NEG
61142: PUSH
61143: LD_INT 1
61145: NEG
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: PUSH
61151: LD_INT 1
61153: NEG
61154: PUSH
61155: LD_INT 2
61157: NEG
61158: PUSH
61159: EMPTY
61160: LIST
61161: LIST
61162: PUSH
61163: LD_INT 0
61165: PUSH
61166: LD_INT 2
61168: NEG
61169: PUSH
61170: EMPTY
61171: LIST
61172: LIST
61173: PUSH
61174: LD_INT 1
61176: PUSH
61177: LD_INT 1
61179: NEG
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: PUSH
61185: LD_INT 2
61187: PUSH
61188: LD_INT 1
61190: PUSH
61191: EMPTY
61192: LIST
61193: LIST
61194: PUSH
61195: LD_INT 2
61197: PUSH
61198: LD_INT 2
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: PUSH
61205: LD_INT 1
61207: PUSH
61208: LD_INT 2
61210: PUSH
61211: EMPTY
61212: LIST
61213: LIST
61214: PUSH
61215: LD_INT 0
61217: PUSH
61218: LD_INT 2
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PUSH
61225: LD_INT 1
61227: NEG
61228: PUSH
61229: LD_INT 1
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: PUSH
61236: LD_INT 2
61238: NEG
61239: PUSH
61240: LD_INT 1
61242: NEG
61243: PUSH
61244: EMPTY
61245: LIST
61246: LIST
61247: PUSH
61248: LD_INT 2
61250: NEG
61251: PUSH
61252: LD_INT 2
61254: NEG
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: PUSH
61260: LD_INT 2
61262: NEG
61263: PUSH
61264: LD_INT 3
61266: NEG
61267: PUSH
61268: EMPTY
61269: LIST
61270: LIST
61271: PUSH
61272: LD_INT 1
61274: NEG
61275: PUSH
61276: LD_INT 3
61278: NEG
61279: PUSH
61280: EMPTY
61281: LIST
61282: LIST
61283: PUSH
61284: LD_INT 0
61286: PUSH
61287: LD_INT 3
61289: NEG
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PUSH
61295: LD_INT 1
61297: PUSH
61298: LD_INT 2
61300: NEG
61301: PUSH
61302: EMPTY
61303: LIST
61304: LIST
61305: PUSH
61306: LD_INT 3
61308: PUSH
61309: LD_INT 2
61311: PUSH
61312: EMPTY
61313: LIST
61314: LIST
61315: PUSH
61316: LD_INT 3
61318: PUSH
61319: LD_INT 3
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: PUSH
61326: LD_INT 2
61328: PUSH
61329: LD_INT 3
61331: PUSH
61332: EMPTY
61333: LIST
61334: LIST
61335: PUSH
61336: LD_INT 1
61338: PUSH
61339: LD_INT 3
61341: PUSH
61342: EMPTY
61343: LIST
61344: LIST
61345: PUSH
61346: LD_INT 0
61348: PUSH
61349: LD_INT 3
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: PUSH
61356: LD_INT 1
61358: NEG
61359: PUSH
61360: LD_INT 2
61362: PUSH
61363: EMPTY
61364: LIST
61365: LIST
61366: PUSH
61367: LD_INT 3
61369: NEG
61370: PUSH
61371: LD_INT 2
61373: NEG
61374: PUSH
61375: EMPTY
61376: LIST
61377: LIST
61378: PUSH
61379: LD_INT 3
61381: NEG
61382: PUSH
61383: LD_INT 3
61385: NEG
61386: PUSH
61387: EMPTY
61388: LIST
61389: LIST
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: LIST
61395: LIST
61396: LIST
61397: LIST
61398: LIST
61399: LIST
61400: LIST
61401: LIST
61402: LIST
61403: LIST
61404: LIST
61405: LIST
61406: LIST
61407: LIST
61408: LIST
61409: LIST
61410: LIST
61411: LIST
61412: LIST
61413: LIST
61414: LIST
61415: LIST
61416: LIST
61417: LIST
61418: LIST
61419: LIST
61420: LIST
61421: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61422: LD_ADDR_VAR 0 43
61426: PUSH
61427: LD_INT 0
61429: PUSH
61430: LD_INT 0
61432: PUSH
61433: EMPTY
61434: LIST
61435: LIST
61436: PUSH
61437: LD_INT 0
61439: PUSH
61440: LD_INT 1
61442: NEG
61443: PUSH
61444: EMPTY
61445: LIST
61446: LIST
61447: PUSH
61448: LD_INT 1
61450: PUSH
61451: LD_INT 0
61453: PUSH
61454: EMPTY
61455: LIST
61456: LIST
61457: PUSH
61458: LD_INT 1
61460: PUSH
61461: LD_INT 1
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: PUSH
61468: LD_INT 0
61470: PUSH
61471: LD_INT 1
61473: PUSH
61474: EMPTY
61475: LIST
61476: LIST
61477: PUSH
61478: LD_INT 1
61480: NEG
61481: PUSH
61482: LD_INT 0
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: PUSH
61489: LD_INT 1
61491: NEG
61492: PUSH
61493: LD_INT 1
61495: NEG
61496: PUSH
61497: EMPTY
61498: LIST
61499: LIST
61500: PUSH
61501: LD_INT 1
61503: NEG
61504: PUSH
61505: LD_INT 2
61507: NEG
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: PUSH
61513: LD_INT 0
61515: PUSH
61516: LD_INT 2
61518: NEG
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PUSH
61524: LD_INT 1
61526: PUSH
61527: LD_INT 1
61529: NEG
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: PUSH
61535: LD_INT 2
61537: PUSH
61538: LD_INT 0
61540: PUSH
61541: EMPTY
61542: LIST
61543: LIST
61544: PUSH
61545: LD_INT 2
61547: PUSH
61548: LD_INT 1
61550: PUSH
61551: EMPTY
61552: LIST
61553: LIST
61554: PUSH
61555: LD_INT 1
61557: PUSH
61558: LD_INT 2
61560: PUSH
61561: EMPTY
61562: LIST
61563: LIST
61564: PUSH
61565: LD_INT 0
61567: PUSH
61568: LD_INT 2
61570: PUSH
61571: EMPTY
61572: LIST
61573: LIST
61574: PUSH
61575: LD_INT 1
61577: NEG
61578: PUSH
61579: LD_INT 1
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: PUSH
61586: LD_INT 2
61588: NEG
61589: PUSH
61590: LD_INT 0
61592: PUSH
61593: EMPTY
61594: LIST
61595: LIST
61596: PUSH
61597: LD_INT 2
61599: NEG
61600: PUSH
61601: LD_INT 1
61603: NEG
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: PUSH
61609: LD_INT 1
61611: NEG
61612: PUSH
61613: LD_INT 3
61615: NEG
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: PUSH
61621: LD_INT 0
61623: PUSH
61624: LD_INT 3
61626: NEG
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PUSH
61632: LD_INT 1
61634: PUSH
61635: LD_INT 2
61637: NEG
61638: PUSH
61639: EMPTY
61640: LIST
61641: LIST
61642: PUSH
61643: LD_INT 2
61645: PUSH
61646: LD_INT 1
61648: NEG
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: PUSH
61654: LD_INT 3
61656: PUSH
61657: LD_INT 0
61659: PUSH
61660: EMPTY
61661: LIST
61662: LIST
61663: PUSH
61664: LD_INT 3
61666: PUSH
61667: LD_INT 1
61669: PUSH
61670: EMPTY
61671: LIST
61672: LIST
61673: PUSH
61674: LD_INT 1
61676: PUSH
61677: LD_INT 3
61679: PUSH
61680: EMPTY
61681: LIST
61682: LIST
61683: PUSH
61684: LD_INT 0
61686: PUSH
61687: LD_INT 3
61689: PUSH
61690: EMPTY
61691: LIST
61692: LIST
61693: PUSH
61694: LD_INT 1
61696: NEG
61697: PUSH
61698: LD_INT 2
61700: PUSH
61701: EMPTY
61702: LIST
61703: LIST
61704: PUSH
61705: LD_INT 2
61707: NEG
61708: PUSH
61709: LD_INT 1
61711: PUSH
61712: EMPTY
61713: LIST
61714: LIST
61715: PUSH
61716: LD_INT 3
61718: NEG
61719: PUSH
61720: LD_INT 0
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: PUSH
61727: LD_INT 3
61729: NEG
61730: PUSH
61731: LD_INT 1
61733: NEG
61734: PUSH
61735: EMPTY
61736: LIST
61737: LIST
61738: PUSH
61739: EMPTY
61740: LIST
61741: LIST
61742: LIST
61743: LIST
61744: LIST
61745: LIST
61746: LIST
61747: LIST
61748: LIST
61749: LIST
61750: LIST
61751: LIST
61752: LIST
61753: LIST
61754: LIST
61755: LIST
61756: LIST
61757: LIST
61758: LIST
61759: LIST
61760: LIST
61761: LIST
61762: LIST
61763: LIST
61764: LIST
61765: LIST
61766: LIST
61767: LIST
61768: LIST
61769: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61770: LD_ADDR_VAR 0 44
61774: PUSH
61775: LD_INT 0
61777: PUSH
61778: LD_INT 0
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PUSH
61785: LD_INT 0
61787: PUSH
61788: LD_INT 1
61790: NEG
61791: PUSH
61792: EMPTY
61793: LIST
61794: LIST
61795: PUSH
61796: LD_INT 1
61798: PUSH
61799: LD_INT 0
61801: PUSH
61802: EMPTY
61803: LIST
61804: LIST
61805: PUSH
61806: LD_INT 1
61808: PUSH
61809: LD_INT 1
61811: PUSH
61812: EMPTY
61813: LIST
61814: LIST
61815: PUSH
61816: LD_INT 0
61818: PUSH
61819: LD_INT 1
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: PUSH
61826: LD_INT 1
61828: NEG
61829: PUSH
61830: LD_INT 0
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: PUSH
61837: LD_INT 1
61839: NEG
61840: PUSH
61841: LD_INT 1
61843: NEG
61844: PUSH
61845: EMPTY
61846: LIST
61847: LIST
61848: PUSH
61849: LD_INT 1
61851: NEG
61852: PUSH
61853: LD_INT 2
61855: NEG
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: PUSH
61861: LD_INT 1
61863: PUSH
61864: LD_INT 1
61866: NEG
61867: PUSH
61868: EMPTY
61869: LIST
61870: LIST
61871: PUSH
61872: LD_INT 2
61874: PUSH
61875: LD_INT 0
61877: PUSH
61878: EMPTY
61879: LIST
61880: LIST
61881: PUSH
61882: LD_INT 2
61884: PUSH
61885: LD_INT 1
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: PUSH
61892: LD_INT 2
61894: PUSH
61895: LD_INT 2
61897: PUSH
61898: EMPTY
61899: LIST
61900: LIST
61901: PUSH
61902: LD_INT 1
61904: PUSH
61905: LD_INT 2
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: PUSH
61912: LD_INT 1
61914: NEG
61915: PUSH
61916: LD_INT 1
61918: PUSH
61919: EMPTY
61920: LIST
61921: LIST
61922: PUSH
61923: LD_INT 2
61925: NEG
61926: PUSH
61927: LD_INT 0
61929: PUSH
61930: EMPTY
61931: LIST
61932: LIST
61933: PUSH
61934: LD_INT 2
61936: NEG
61937: PUSH
61938: LD_INT 1
61940: NEG
61941: PUSH
61942: EMPTY
61943: LIST
61944: LIST
61945: PUSH
61946: LD_INT 2
61948: NEG
61949: PUSH
61950: LD_INT 2
61952: NEG
61953: PUSH
61954: EMPTY
61955: LIST
61956: LIST
61957: PUSH
61958: LD_INT 2
61960: NEG
61961: PUSH
61962: LD_INT 3
61964: NEG
61965: PUSH
61966: EMPTY
61967: LIST
61968: LIST
61969: PUSH
61970: LD_INT 2
61972: PUSH
61973: LD_INT 1
61975: NEG
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: PUSH
61981: LD_INT 3
61983: PUSH
61984: LD_INT 0
61986: PUSH
61987: EMPTY
61988: LIST
61989: LIST
61990: PUSH
61991: LD_INT 3
61993: PUSH
61994: LD_INT 1
61996: PUSH
61997: EMPTY
61998: LIST
61999: LIST
62000: PUSH
62001: LD_INT 3
62003: PUSH
62004: LD_INT 2
62006: PUSH
62007: EMPTY
62008: LIST
62009: LIST
62010: PUSH
62011: LD_INT 3
62013: PUSH
62014: LD_INT 3
62016: PUSH
62017: EMPTY
62018: LIST
62019: LIST
62020: PUSH
62021: LD_INT 2
62023: PUSH
62024: LD_INT 3
62026: PUSH
62027: EMPTY
62028: LIST
62029: LIST
62030: PUSH
62031: LD_INT 2
62033: NEG
62034: PUSH
62035: LD_INT 1
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: PUSH
62042: LD_INT 3
62044: NEG
62045: PUSH
62046: LD_INT 0
62048: PUSH
62049: EMPTY
62050: LIST
62051: LIST
62052: PUSH
62053: LD_INT 3
62055: NEG
62056: PUSH
62057: LD_INT 1
62059: NEG
62060: PUSH
62061: EMPTY
62062: LIST
62063: LIST
62064: PUSH
62065: LD_INT 3
62067: NEG
62068: PUSH
62069: LD_INT 2
62071: NEG
62072: PUSH
62073: EMPTY
62074: LIST
62075: LIST
62076: PUSH
62077: LD_INT 3
62079: NEG
62080: PUSH
62081: LD_INT 3
62083: NEG
62084: PUSH
62085: EMPTY
62086: LIST
62087: LIST
62088: PUSH
62089: EMPTY
62090: LIST
62091: LIST
62092: LIST
62093: LIST
62094: LIST
62095: LIST
62096: LIST
62097: LIST
62098: LIST
62099: LIST
62100: LIST
62101: LIST
62102: LIST
62103: LIST
62104: LIST
62105: LIST
62106: LIST
62107: LIST
62108: LIST
62109: LIST
62110: LIST
62111: LIST
62112: LIST
62113: LIST
62114: LIST
62115: LIST
62116: LIST
62117: LIST
62118: LIST
62119: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62120: LD_ADDR_VAR 0 45
62124: PUSH
62125: LD_INT 0
62127: PUSH
62128: LD_INT 0
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: PUSH
62135: LD_INT 0
62137: PUSH
62138: LD_INT 1
62140: NEG
62141: PUSH
62142: EMPTY
62143: LIST
62144: LIST
62145: PUSH
62146: LD_INT 1
62148: PUSH
62149: LD_INT 0
62151: PUSH
62152: EMPTY
62153: LIST
62154: LIST
62155: PUSH
62156: LD_INT 1
62158: PUSH
62159: LD_INT 1
62161: PUSH
62162: EMPTY
62163: LIST
62164: LIST
62165: PUSH
62166: LD_INT 0
62168: PUSH
62169: LD_INT 1
62171: PUSH
62172: EMPTY
62173: LIST
62174: LIST
62175: PUSH
62176: LD_INT 1
62178: NEG
62179: PUSH
62180: LD_INT 0
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: PUSH
62187: LD_INT 1
62189: NEG
62190: PUSH
62191: LD_INT 1
62193: NEG
62194: PUSH
62195: EMPTY
62196: LIST
62197: LIST
62198: PUSH
62199: LD_INT 1
62201: NEG
62202: PUSH
62203: LD_INT 2
62205: NEG
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: PUSH
62211: LD_INT 0
62213: PUSH
62214: LD_INT 2
62216: NEG
62217: PUSH
62218: EMPTY
62219: LIST
62220: LIST
62221: PUSH
62222: LD_INT 1
62224: PUSH
62225: LD_INT 1
62227: NEG
62228: PUSH
62229: EMPTY
62230: LIST
62231: LIST
62232: PUSH
62233: LD_INT 2
62235: PUSH
62236: LD_INT 1
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: PUSH
62243: LD_INT 2
62245: PUSH
62246: LD_INT 2
62248: PUSH
62249: EMPTY
62250: LIST
62251: LIST
62252: PUSH
62253: LD_INT 1
62255: PUSH
62256: LD_INT 2
62258: PUSH
62259: EMPTY
62260: LIST
62261: LIST
62262: PUSH
62263: LD_INT 0
62265: PUSH
62266: LD_INT 2
62268: PUSH
62269: EMPTY
62270: LIST
62271: LIST
62272: PUSH
62273: LD_INT 1
62275: NEG
62276: PUSH
62277: LD_INT 1
62279: PUSH
62280: EMPTY
62281: LIST
62282: LIST
62283: PUSH
62284: LD_INT 2
62286: NEG
62287: PUSH
62288: LD_INT 1
62290: NEG
62291: PUSH
62292: EMPTY
62293: LIST
62294: LIST
62295: PUSH
62296: LD_INT 2
62298: NEG
62299: PUSH
62300: LD_INT 2
62302: NEG
62303: PUSH
62304: EMPTY
62305: LIST
62306: LIST
62307: PUSH
62308: LD_INT 2
62310: NEG
62311: PUSH
62312: LD_INT 3
62314: NEG
62315: PUSH
62316: EMPTY
62317: LIST
62318: LIST
62319: PUSH
62320: LD_INT 1
62322: NEG
62323: PUSH
62324: LD_INT 3
62326: NEG
62327: PUSH
62328: EMPTY
62329: LIST
62330: LIST
62331: PUSH
62332: LD_INT 0
62334: PUSH
62335: LD_INT 3
62337: NEG
62338: PUSH
62339: EMPTY
62340: LIST
62341: LIST
62342: PUSH
62343: LD_INT 1
62345: PUSH
62346: LD_INT 2
62348: NEG
62349: PUSH
62350: EMPTY
62351: LIST
62352: LIST
62353: PUSH
62354: LD_INT 3
62356: PUSH
62357: LD_INT 2
62359: PUSH
62360: EMPTY
62361: LIST
62362: LIST
62363: PUSH
62364: LD_INT 3
62366: PUSH
62367: LD_INT 3
62369: PUSH
62370: EMPTY
62371: LIST
62372: LIST
62373: PUSH
62374: LD_INT 2
62376: PUSH
62377: LD_INT 3
62379: PUSH
62380: EMPTY
62381: LIST
62382: LIST
62383: PUSH
62384: LD_INT 1
62386: PUSH
62387: LD_INT 3
62389: PUSH
62390: EMPTY
62391: LIST
62392: LIST
62393: PUSH
62394: LD_INT 0
62396: PUSH
62397: LD_INT 3
62399: PUSH
62400: EMPTY
62401: LIST
62402: LIST
62403: PUSH
62404: LD_INT 1
62406: NEG
62407: PUSH
62408: LD_INT 2
62410: PUSH
62411: EMPTY
62412: LIST
62413: LIST
62414: PUSH
62415: LD_INT 3
62417: NEG
62418: PUSH
62419: LD_INT 2
62421: NEG
62422: PUSH
62423: EMPTY
62424: LIST
62425: LIST
62426: PUSH
62427: LD_INT 3
62429: NEG
62430: PUSH
62431: LD_INT 3
62433: NEG
62434: PUSH
62435: EMPTY
62436: LIST
62437: LIST
62438: PUSH
62439: EMPTY
62440: LIST
62441: LIST
62442: LIST
62443: LIST
62444: LIST
62445: LIST
62446: LIST
62447: LIST
62448: LIST
62449: LIST
62450: LIST
62451: LIST
62452: LIST
62453: LIST
62454: LIST
62455: LIST
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: LIST
62467: LIST
62468: LIST
62469: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62470: LD_ADDR_VAR 0 46
62474: PUSH
62475: LD_INT 0
62477: PUSH
62478: LD_INT 0
62480: PUSH
62481: EMPTY
62482: LIST
62483: LIST
62484: PUSH
62485: LD_INT 0
62487: PUSH
62488: LD_INT 1
62490: NEG
62491: PUSH
62492: EMPTY
62493: LIST
62494: LIST
62495: PUSH
62496: LD_INT 1
62498: PUSH
62499: LD_INT 0
62501: PUSH
62502: EMPTY
62503: LIST
62504: LIST
62505: PUSH
62506: LD_INT 1
62508: PUSH
62509: LD_INT 1
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: PUSH
62516: LD_INT 0
62518: PUSH
62519: LD_INT 1
62521: PUSH
62522: EMPTY
62523: LIST
62524: LIST
62525: PUSH
62526: LD_INT 1
62528: NEG
62529: PUSH
62530: LD_INT 0
62532: PUSH
62533: EMPTY
62534: LIST
62535: LIST
62536: PUSH
62537: LD_INT 1
62539: NEG
62540: PUSH
62541: LD_INT 1
62543: NEG
62544: PUSH
62545: EMPTY
62546: LIST
62547: LIST
62548: PUSH
62549: LD_INT 1
62551: NEG
62552: PUSH
62553: LD_INT 2
62555: NEG
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: PUSH
62561: LD_INT 0
62563: PUSH
62564: LD_INT 2
62566: NEG
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: PUSH
62572: LD_INT 1
62574: PUSH
62575: LD_INT 1
62577: NEG
62578: PUSH
62579: EMPTY
62580: LIST
62581: LIST
62582: PUSH
62583: LD_INT 2
62585: PUSH
62586: LD_INT 0
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: PUSH
62593: LD_INT 2
62595: PUSH
62596: LD_INT 1
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: PUSH
62603: LD_INT 1
62605: PUSH
62606: LD_INT 2
62608: PUSH
62609: EMPTY
62610: LIST
62611: LIST
62612: PUSH
62613: LD_INT 0
62615: PUSH
62616: LD_INT 2
62618: PUSH
62619: EMPTY
62620: LIST
62621: LIST
62622: PUSH
62623: LD_INT 1
62625: NEG
62626: PUSH
62627: LD_INT 1
62629: PUSH
62630: EMPTY
62631: LIST
62632: LIST
62633: PUSH
62634: LD_INT 2
62636: NEG
62637: PUSH
62638: LD_INT 0
62640: PUSH
62641: EMPTY
62642: LIST
62643: LIST
62644: PUSH
62645: LD_INT 2
62647: NEG
62648: PUSH
62649: LD_INT 1
62651: NEG
62652: PUSH
62653: EMPTY
62654: LIST
62655: LIST
62656: PUSH
62657: LD_INT 1
62659: NEG
62660: PUSH
62661: LD_INT 3
62663: NEG
62664: PUSH
62665: EMPTY
62666: LIST
62667: LIST
62668: PUSH
62669: LD_INT 0
62671: PUSH
62672: LD_INT 3
62674: NEG
62675: PUSH
62676: EMPTY
62677: LIST
62678: LIST
62679: PUSH
62680: LD_INT 1
62682: PUSH
62683: LD_INT 2
62685: NEG
62686: PUSH
62687: EMPTY
62688: LIST
62689: LIST
62690: PUSH
62691: LD_INT 2
62693: PUSH
62694: LD_INT 1
62696: NEG
62697: PUSH
62698: EMPTY
62699: LIST
62700: LIST
62701: PUSH
62702: LD_INT 3
62704: PUSH
62705: LD_INT 0
62707: PUSH
62708: EMPTY
62709: LIST
62710: LIST
62711: PUSH
62712: LD_INT 3
62714: PUSH
62715: LD_INT 1
62717: PUSH
62718: EMPTY
62719: LIST
62720: LIST
62721: PUSH
62722: LD_INT 1
62724: PUSH
62725: LD_INT 3
62727: PUSH
62728: EMPTY
62729: LIST
62730: LIST
62731: PUSH
62732: LD_INT 0
62734: PUSH
62735: LD_INT 3
62737: PUSH
62738: EMPTY
62739: LIST
62740: LIST
62741: PUSH
62742: LD_INT 1
62744: NEG
62745: PUSH
62746: LD_INT 2
62748: PUSH
62749: EMPTY
62750: LIST
62751: LIST
62752: PUSH
62753: LD_INT 2
62755: NEG
62756: PUSH
62757: LD_INT 1
62759: PUSH
62760: EMPTY
62761: LIST
62762: LIST
62763: PUSH
62764: LD_INT 3
62766: NEG
62767: PUSH
62768: LD_INT 0
62770: PUSH
62771: EMPTY
62772: LIST
62773: LIST
62774: PUSH
62775: LD_INT 3
62777: NEG
62778: PUSH
62779: LD_INT 1
62781: NEG
62782: PUSH
62783: EMPTY
62784: LIST
62785: LIST
62786: PUSH
62787: EMPTY
62788: LIST
62789: LIST
62790: LIST
62791: LIST
62792: LIST
62793: LIST
62794: LIST
62795: LIST
62796: LIST
62797: LIST
62798: LIST
62799: LIST
62800: LIST
62801: LIST
62802: LIST
62803: LIST
62804: LIST
62805: LIST
62806: LIST
62807: LIST
62808: LIST
62809: LIST
62810: LIST
62811: LIST
62812: LIST
62813: LIST
62814: LIST
62815: LIST
62816: LIST
62817: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62818: LD_ADDR_VAR 0 47
62822: PUSH
62823: LD_INT 0
62825: PUSH
62826: LD_INT 0
62828: PUSH
62829: EMPTY
62830: LIST
62831: LIST
62832: PUSH
62833: LD_INT 0
62835: PUSH
62836: LD_INT 1
62838: NEG
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: PUSH
62844: LD_INT 1
62846: PUSH
62847: LD_INT 0
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: PUSH
62854: LD_INT 1
62856: PUSH
62857: LD_INT 1
62859: PUSH
62860: EMPTY
62861: LIST
62862: LIST
62863: PUSH
62864: LD_INT 0
62866: PUSH
62867: LD_INT 1
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: PUSH
62874: LD_INT 1
62876: NEG
62877: PUSH
62878: LD_INT 0
62880: PUSH
62881: EMPTY
62882: LIST
62883: LIST
62884: PUSH
62885: LD_INT 1
62887: NEG
62888: PUSH
62889: LD_INT 1
62891: NEG
62892: PUSH
62893: EMPTY
62894: LIST
62895: LIST
62896: PUSH
62897: LD_INT 1
62899: NEG
62900: PUSH
62901: LD_INT 2
62903: NEG
62904: PUSH
62905: EMPTY
62906: LIST
62907: LIST
62908: PUSH
62909: LD_INT 0
62911: PUSH
62912: LD_INT 2
62914: NEG
62915: PUSH
62916: EMPTY
62917: LIST
62918: LIST
62919: PUSH
62920: LD_INT 1
62922: PUSH
62923: LD_INT 1
62925: NEG
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: PUSH
62931: LD_INT 2
62933: NEG
62934: PUSH
62935: LD_INT 1
62937: NEG
62938: PUSH
62939: EMPTY
62940: LIST
62941: LIST
62942: PUSH
62943: LD_INT 2
62945: NEG
62946: PUSH
62947: LD_INT 2
62949: NEG
62950: PUSH
62951: EMPTY
62952: LIST
62953: LIST
62954: PUSH
62955: EMPTY
62956: LIST
62957: LIST
62958: LIST
62959: LIST
62960: LIST
62961: LIST
62962: LIST
62963: LIST
62964: LIST
62965: LIST
62966: LIST
62967: LIST
62968: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62969: LD_ADDR_VAR 0 48
62973: PUSH
62974: LD_INT 0
62976: PUSH
62977: LD_INT 0
62979: PUSH
62980: EMPTY
62981: LIST
62982: LIST
62983: PUSH
62984: LD_INT 0
62986: PUSH
62987: LD_INT 1
62989: NEG
62990: PUSH
62991: EMPTY
62992: LIST
62993: LIST
62994: PUSH
62995: LD_INT 1
62997: PUSH
62998: LD_INT 0
63000: PUSH
63001: EMPTY
63002: LIST
63003: LIST
63004: PUSH
63005: LD_INT 1
63007: PUSH
63008: LD_INT 1
63010: PUSH
63011: EMPTY
63012: LIST
63013: LIST
63014: PUSH
63015: LD_INT 0
63017: PUSH
63018: LD_INT 1
63020: PUSH
63021: EMPTY
63022: LIST
63023: LIST
63024: PUSH
63025: LD_INT 1
63027: NEG
63028: PUSH
63029: LD_INT 0
63031: PUSH
63032: EMPTY
63033: LIST
63034: LIST
63035: PUSH
63036: LD_INT 1
63038: NEG
63039: PUSH
63040: LD_INT 1
63042: NEG
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: PUSH
63048: LD_INT 1
63050: NEG
63051: PUSH
63052: LD_INT 2
63054: NEG
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: PUSH
63060: LD_INT 0
63062: PUSH
63063: LD_INT 2
63065: NEG
63066: PUSH
63067: EMPTY
63068: LIST
63069: LIST
63070: PUSH
63071: LD_INT 1
63073: PUSH
63074: LD_INT 1
63076: NEG
63077: PUSH
63078: EMPTY
63079: LIST
63080: LIST
63081: PUSH
63082: LD_INT 2
63084: PUSH
63085: LD_INT 0
63087: PUSH
63088: EMPTY
63089: LIST
63090: LIST
63091: PUSH
63092: LD_INT 2
63094: PUSH
63095: LD_INT 1
63097: PUSH
63098: EMPTY
63099: LIST
63100: LIST
63101: PUSH
63102: EMPTY
63103: LIST
63104: LIST
63105: LIST
63106: LIST
63107: LIST
63108: LIST
63109: LIST
63110: LIST
63111: LIST
63112: LIST
63113: LIST
63114: LIST
63115: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63116: LD_ADDR_VAR 0 49
63120: PUSH
63121: LD_INT 0
63123: PUSH
63124: LD_INT 0
63126: PUSH
63127: EMPTY
63128: LIST
63129: LIST
63130: PUSH
63131: LD_INT 0
63133: PUSH
63134: LD_INT 1
63136: NEG
63137: PUSH
63138: EMPTY
63139: LIST
63140: LIST
63141: PUSH
63142: LD_INT 1
63144: PUSH
63145: LD_INT 0
63147: PUSH
63148: EMPTY
63149: LIST
63150: LIST
63151: PUSH
63152: LD_INT 1
63154: PUSH
63155: LD_INT 1
63157: PUSH
63158: EMPTY
63159: LIST
63160: LIST
63161: PUSH
63162: LD_INT 0
63164: PUSH
63165: LD_INT 1
63167: PUSH
63168: EMPTY
63169: LIST
63170: LIST
63171: PUSH
63172: LD_INT 1
63174: NEG
63175: PUSH
63176: LD_INT 0
63178: PUSH
63179: EMPTY
63180: LIST
63181: LIST
63182: PUSH
63183: LD_INT 1
63185: NEG
63186: PUSH
63187: LD_INT 1
63189: NEG
63190: PUSH
63191: EMPTY
63192: LIST
63193: LIST
63194: PUSH
63195: LD_INT 1
63197: PUSH
63198: LD_INT 1
63200: NEG
63201: PUSH
63202: EMPTY
63203: LIST
63204: LIST
63205: PUSH
63206: LD_INT 2
63208: PUSH
63209: LD_INT 0
63211: PUSH
63212: EMPTY
63213: LIST
63214: LIST
63215: PUSH
63216: LD_INT 2
63218: PUSH
63219: LD_INT 1
63221: PUSH
63222: EMPTY
63223: LIST
63224: LIST
63225: PUSH
63226: LD_INT 2
63228: PUSH
63229: LD_INT 2
63231: PUSH
63232: EMPTY
63233: LIST
63234: LIST
63235: PUSH
63236: LD_INT 1
63238: PUSH
63239: LD_INT 2
63241: PUSH
63242: EMPTY
63243: LIST
63244: LIST
63245: PUSH
63246: EMPTY
63247: LIST
63248: LIST
63249: LIST
63250: LIST
63251: LIST
63252: LIST
63253: LIST
63254: LIST
63255: LIST
63256: LIST
63257: LIST
63258: LIST
63259: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63260: LD_ADDR_VAR 0 50
63264: PUSH
63265: LD_INT 0
63267: PUSH
63268: LD_INT 0
63270: PUSH
63271: EMPTY
63272: LIST
63273: LIST
63274: PUSH
63275: LD_INT 0
63277: PUSH
63278: LD_INT 1
63280: NEG
63281: PUSH
63282: EMPTY
63283: LIST
63284: LIST
63285: PUSH
63286: LD_INT 1
63288: PUSH
63289: LD_INT 0
63291: PUSH
63292: EMPTY
63293: LIST
63294: LIST
63295: PUSH
63296: LD_INT 1
63298: PUSH
63299: LD_INT 1
63301: PUSH
63302: EMPTY
63303: LIST
63304: LIST
63305: PUSH
63306: LD_INT 0
63308: PUSH
63309: LD_INT 1
63311: PUSH
63312: EMPTY
63313: LIST
63314: LIST
63315: PUSH
63316: LD_INT 1
63318: NEG
63319: PUSH
63320: LD_INT 0
63322: PUSH
63323: EMPTY
63324: LIST
63325: LIST
63326: PUSH
63327: LD_INT 1
63329: NEG
63330: PUSH
63331: LD_INT 1
63333: NEG
63334: PUSH
63335: EMPTY
63336: LIST
63337: LIST
63338: PUSH
63339: LD_INT 2
63341: PUSH
63342: LD_INT 1
63344: PUSH
63345: EMPTY
63346: LIST
63347: LIST
63348: PUSH
63349: LD_INT 2
63351: PUSH
63352: LD_INT 2
63354: PUSH
63355: EMPTY
63356: LIST
63357: LIST
63358: PUSH
63359: LD_INT 1
63361: PUSH
63362: LD_INT 2
63364: PUSH
63365: EMPTY
63366: LIST
63367: LIST
63368: PUSH
63369: LD_INT 0
63371: PUSH
63372: LD_INT 2
63374: PUSH
63375: EMPTY
63376: LIST
63377: LIST
63378: PUSH
63379: LD_INT 1
63381: NEG
63382: PUSH
63383: LD_INT 1
63385: PUSH
63386: EMPTY
63387: LIST
63388: LIST
63389: PUSH
63390: EMPTY
63391: LIST
63392: LIST
63393: LIST
63394: LIST
63395: LIST
63396: LIST
63397: LIST
63398: LIST
63399: LIST
63400: LIST
63401: LIST
63402: LIST
63403: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63404: LD_ADDR_VAR 0 51
63408: PUSH
63409: LD_INT 0
63411: PUSH
63412: LD_INT 0
63414: PUSH
63415: EMPTY
63416: LIST
63417: LIST
63418: PUSH
63419: LD_INT 0
63421: PUSH
63422: LD_INT 1
63424: NEG
63425: PUSH
63426: EMPTY
63427: LIST
63428: LIST
63429: PUSH
63430: LD_INT 1
63432: PUSH
63433: LD_INT 0
63435: PUSH
63436: EMPTY
63437: LIST
63438: LIST
63439: PUSH
63440: LD_INT 1
63442: PUSH
63443: LD_INT 1
63445: PUSH
63446: EMPTY
63447: LIST
63448: LIST
63449: PUSH
63450: LD_INT 0
63452: PUSH
63453: LD_INT 1
63455: PUSH
63456: EMPTY
63457: LIST
63458: LIST
63459: PUSH
63460: LD_INT 1
63462: NEG
63463: PUSH
63464: LD_INT 0
63466: PUSH
63467: EMPTY
63468: LIST
63469: LIST
63470: PUSH
63471: LD_INT 1
63473: NEG
63474: PUSH
63475: LD_INT 1
63477: NEG
63478: PUSH
63479: EMPTY
63480: LIST
63481: LIST
63482: PUSH
63483: LD_INT 1
63485: PUSH
63486: LD_INT 2
63488: PUSH
63489: EMPTY
63490: LIST
63491: LIST
63492: PUSH
63493: LD_INT 0
63495: PUSH
63496: LD_INT 2
63498: PUSH
63499: EMPTY
63500: LIST
63501: LIST
63502: PUSH
63503: LD_INT 1
63505: NEG
63506: PUSH
63507: LD_INT 1
63509: PUSH
63510: EMPTY
63511: LIST
63512: LIST
63513: PUSH
63514: LD_INT 2
63516: NEG
63517: PUSH
63518: LD_INT 0
63520: PUSH
63521: EMPTY
63522: LIST
63523: LIST
63524: PUSH
63525: LD_INT 2
63527: NEG
63528: PUSH
63529: LD_INT 1
63531: NEG
63532: PUSH
63533: EMPTY
63534: LIST
63535: LIST
63536: PUSH
63537: EMPTY
63538: LIST
63539: LIST
63540: LIST
63541: LIST
63542: LIST
63543: LIST
63544: LIST
63545: LIST
63546: LIST
63547: LIST
63548: LIST
63549: LIST
63550: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63551: LD_ADDR_VAR 0 52
63555: PUSH
63556: LD_INT 0
63558: PUSH
63559: LD_INT 0
63561: PUSH
63562: EMPTY
63563: LIST
63564: LIST
63565: PUSH
63566: LD_INT 0
63568: PUSH
63569: LD_INT 1
63571: NEG
63572: PUSH
63573: EMPTY
63574: LIST
63575: LIST
63576: PUSH
63577: LD_INT 1
63579: PUSH
63580: LD_INT 0
63582: PUSH
63583: EMPTY
63584: LIST
63585: LIST
63586: PUSH
63587: LD_INT 1
63589: PUSH
63590: LD_INT 1
63592: PUSH
63593: EMPTY
63594: LIST
63595: LIST
63596: PUSH
63597: LD_INT 0
63599: PUSH
63600: LD_INT 1
63602: PUSH
63603: EMPTY
63604: LIST
63605: LIST
63606: PUSH
63607: LD_INT 1
63609: NEG
63610: PUSH
63611: LD_INT 0
63613: PUSH
63614: EMPTY
63615: LIST
63616: LIST
63617: PUSH
63618: LD_INT 1
63620: NEG
63621: PUSH
63622: LD_INT 1
63624: NEG
63625: PUSH
63626: EMPTY
63627: LIST
63628: LIST
63629: PUSH
63630: LD_INT 1
63632: NEG
63633: PUSH
63634: LD_INT 2
63636: NEG
63637: PUSH
63638: EMPTY
63639: LIST
63640: LIST
63641: PUSH
63642: LD_INT 1
63644: NEG
63645: PUSH
63646: LD_INT 1
63648: PUSH
63649: EMPTY
63650: LIST
63651: LIST
63652: PUSH
63653: LD_INT 2
63655: NEG
63656: PUSH
63657: LD_INT 0
63659: PUSH
63660: EMPTY
63661: LIST
63662: LIST
63663: PUSH
63664: LD_INT 2
63666: NEG
63667: PUSH
63668: LD_INT 1
63670: NEG
63671: PUSH
63672: EMPTY
63673: LIST
63674: LIST
63675: PUSH
63676: LD_INT 2
63678: NEG
63679: PUSH
63680: LD_INT 2
63682: NEG
63683: PUSH
63684: EMPTY
63685: LIST
63686: LIST
63687: PUSH
63688: EMPTY
63689: LIST
63690: LIST
63691: LIST
63692: LIST
63693: LIST
63694: LIST
63695: LIST
63696: LIST
63697: LIST
63698: LIST
63699: LIST
63700: LIST
63701: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63702: LD_ADDR_VAR 0 53
63706: PUSH
63707: LD_INT 0
63709: PUSH
63710: LD_INT 0
63712: PUSH
63713: EMPTY
63714: LIST
63715: LIST
63716: PUSH
63717: LD_INT 0
63719: PUSH
63720: LD_INT 1
63722: NEG
63723: PUSH
63724: EMPTY
63725: LIST
63726: LIST
63727: PUSH
63728: LD_INT 1
63730: PUSH
63731: LD_INT 0
63733: PUSH
63734: EMPTY
63735: LIST
63736: LIST
63737: PUSH
63738: LD_INT 1
63740: PUSH
63741: LD_INT 1
63743: PUSH
63744: EMPTY
63745: LIST
63746: LIST
63747: PUSH
63748: LD_INT 0
63750: PUSH
63751: LD_INT 1
63753: PUSH
63754: EMPTY
63755: LIST
63756: LIST
63757: PUSH
63758: LD_INT 1
63760: NEG
63761: PUSH
63762: LD_INT 0
63764: PUSH
63765: EMPTY
63766: LIST
63767: LIST
63768: PUSH
63769: LD_INT 1
63771: NEG
63772: PUSH
63773: LD_INT 1
63775: NEG
63776: PUSH
63777: EMPTY
63778: LIST
63779: LIST
63780: PUSH
63781: LD_INT 1
63783: NEG
63784: PUSH
63785: LD_INT 2
63787: NEG
63788: PUSH
63789: EMPTY
63790: LIST
63791: LIST
63792: PUSH
63793: LD_INT 0
63795: PUSH
63796: LD_INT 2
63798: NEG
63799: PUSH
63800: EMPTY
63801: LIST
63802: LIST
63803: PUSH
63804: LD_INT 1
63806: PUSH
63807: LD_INT 1
63809: NEG
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: PUSH
63815: LD_INT 2
63817: PUSH
63818: LD_INT 0
63820: PUSH
63821: EMPTY
63822: LIST
63823: LIST
63824: PUSH
63825: LD_INT 2
63827: PUSH
63828: LD_INT 1
63830: PUSH
63831: EMPTY
63832: LIST
63833: LIST
63834: PUSH
63835: LD_INT 2
63837: PUSH
63838: LD_INT 2
63840: PUSH
63841: EMPTY
63842: LIST
63843: LIST
63844: PUSH
63845: LD_INT 1
63847: PUSH
63848: LD_INT 2
63850: PUSH
63851: EMPTY
63852: LIST
63853: LIST
63854: PUSH
63855: LD_INT 0
63857: PUSH
63858: LD_INT 2
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: PUSH
63865: LD_INT 1
63867: NEG
63868: PUSH
63869: LD_INT 1
63871: PUSH
63872: EMPTY
63873: LIST
63874: LIST
63875: PUSH
63876: LD_INT 2
63878: NEG
63879: PUSH
63880: LD_INT 0
63882: PUSH
63883: EMPTY
63884: LIST
63885: LIST
63886: PUSH
63887: LD_INT 2
63889: NEG
63890: PUSH
63891: LD_INT 1
63893: NEG
63894: PUSH
63895: EMPTY
63896: LIST
63897: LIST
63898: PUSH
63899: LD_INT 2
63901: NEG
63902: PUSH
63903: LD_INT 2
63905: NEG
63906: PUSH
63907: EMPTY
63908: LIST
63909: LIST
63910: PUSH
63911: EMPTY
63912: LIST
63913: LIST
63914: LIST
63915: LIST
63916: LIST
63917: LIST
63918: LIST
63919: LIST
63920: LIST
63921: LIST
63922: LIST
63923: LIST
63924: LIST
63925: LIST
63926: LIST
63927: LIST
63928: LIST
63929: LIST
63930: LIST
63931: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63932: LD_ADDR_VAR 0 54
63936: PUSH
63937: LD_INT 0
63939: PUSH
63940: LD_INT 0
63942: PUSH
63943: EMPTY
63944: LIST
63945: LIST
63946: PUSH
63947: LD_INT 0
63949: PUSH
63950: LD_INT 1
63952: NEG
63953: PUSH
63954: EMPTY
63955: LIST
63956: LIST
63957: PUSH
63958: LD_INT 1
63960: PUSH
63961: LD_INT 0
63963: PUSH
63964: EMPTY
63965: LIST
63966: LIST
63967: PUSH
63968: LD_INT 1
63970: PUSH
63971: LD_INT 1
63973: PUSH
63974: EMPTY
63975: LIST
63976: LIST
63977: PUSH
63978: LD_INT 0
63980: PUSH
63981: LD_INT 1
63983: PUSH
63984: EMPTY
63985: LIST
63986: LIST
63987: PUSH
63988: LD_INT 1
63990: NEG
63991: PUSH
63992: LD_INT 0
63994: PUSH
63995: EMPTY
63996: LIST
63997: LIST
63998: PUSH
63999: LD_INT 1
64001: NEG
64002: PUSH
64003: LD_INT 1
64005: NEG
64006: PUSH
64007: EMPTY
64008: LIST
64009: LIST
64010: PUSH
64011: LD_INT 1
64013: NEG
64014: PUSH
64015: LD_INT 2
64017: NEG
64018: PUSH
64019: EMPTY
64020: LIST
64021: LIST
64022: PUSH
64023: LD_INT 0
64025: PUSH
64026: LD_INT 2
64028: NEG
64029: PUSH
64030: EMPTY
64031: LIST
64032: LIST
64033: PUSH
64034: LD_INT 1
64036: PUSH
64037: LD_INT 1
64039: NEG
64040: PUSH
64041: EMPTY
64042: LIST
64043: LIST
64044: PUSH
64045: LD_INT 2
64047: PUSH
64048: LD_INT 0
64050: PUSH
64051: EMPTY
64052: LIST
64053: LIST
64054: PUSH
64055: LD_INT 2
64057: PUSH
64058: LD_INT 1
64060: PUSH
64061: EMPTY
64062: LIST
64063: LIST
64064: PUSH
64065: LD_INT 2
64067: PUSH
64068: LD_INT 2
64070: PUSH
64071: EMPTY
64072: LIST
64073: LIST
64074: PUSH
64075: LD_INT 1
64077: PUSH
64078: LD_INT 2
64080: PUSH
64081: EMPTY
64082: LIST
64083: LIST
64084: PUSH
64085: LD_INT 0
64087: PUSH
64088: LD_INT 2
64090: PUSH
64091: EMPTY
64092: LIST
64093: LIST
64094: PUSH
64095: LD_INT 1
64097: NEG
64098: PUSH
64099: LD_INT 1
64101: PUSH
64102: EMPTY
64103: LIST
64104: LIST
64105: PUSH
64106: LD_INT 2
64108: NEG
64109: PUSH
64110: LD_INT 0
64112: PUSH
64113: EMPTY
64114: LIST
64115: LIST
64116: PUSH
64117: LD_INT 2
64119: NEG
64120: PUSH
64121: LD_INT 1
64123: NEG
64124: PUSH
64125: EMPTY
64126: LIST
64127: LIST
64128: PUSH
64129: LD_INT 2
64131: NEG
64132: PUSH
64133: LD_INT 2
64135: NEG
64136: PUSH
64137: EMPTY
64138: LIST
64139: LIST
64140: PUSH
64141: EMPTY
64142: LIST
64143: LIST
64144: LIST
64145: LIST
64146: LIST
64147: LIST
64148: LIST
64149: LIST
64150: LIST
64151: LIST
64152: LIST
64153: LIST
64154: LIST
64155: LIST
64156: LIST
64157: LIST
64158: LIST
64159: LIST
64160: LIST
64161: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64162: LD_ADDR_VAR 0 55
64166: PUSH
64167: LD_INT 0
64169: PUSH
64170: LD_INT 0
64172: PUSH
64173: EMPTY
64174: LIST
64175: LIST
64176: PUSH
64177: LD_INT 0
64179: PUSH
64180: LD_INT 1
64182: NEG
64183: PUSH
64184: EMPTY
64185: LIST
64186: LIST
64187: PUSH
64188: LD_INT 1
64190: PUSH
64191: LD_INT 0
64193: PUSH
64194: EMPTY
64195: LIST
64196: LIST
64197: PUSH
64198: LD_INT 1
64200: PUSH
64201: LD_INT 1
64203: PUSH
64204: EMPTY
64205: LIST
64206: LIST
64207: PUSH
64208: LD_INT 0
64210: PUSH
64211: LD_INT 1
64213: PUSH
64214: EMPTY
64215: LIST
64216: LIST
64217: PUSH
64218: LD_INT 1
64220: NEG
64221: PUSH
64222: LD_INT 0
64224: PUSH
64225: EMPTY
64226: LIST
64227: LIST
64228: PUSH
64229: LD_INT 1
64231: NEG
64232: PUSH
64233: LD_INT 1
64235: NEG
64236: PUSH
64237: EMPTY
64238: LIST
64239: LIST
64240: PUSH
64241: LD_INT 1
64243: NEG
64244: PUSH
64245: LD_INT 2
64247: NEG
64248: PUSH
64249: EMPTY
64250: LIST
64251: LIST
64252: PUSH
64253: LD_INT 0
64255: PUSH
64256: LD_INT 2
64258: NEG
64259: PUSH
64260: EMPTY
64261: LIST
64262: LIST
64263: PUSH
64264: LD_INT 1
64266: PUSH
64267: LD_INT 1
64269: NEG
64270: PUSH
64271: EMPTY
64272: LIST
64273: LIST
64274: PUSH
64275: LD_INT 2
64277: PUSH
64278: LD_INT 0
64280: PUSH
64281: EMPTY
64282: LIST
64283: LIST
64284: PUSH
64285: LD_INT 2
64287: PUSH
64288: LD_INT 1
64290: PUSH
64291: EMPTY
64292: LIST
64293: LIST
64294: PUSH
64295: LD_INT 2
64297: PUSH
64298: LD_INT 2
64300: PUSH
64301: EMPTY
64302: LIST
64303: LIST
64304: PUSH
64305: LD_INT 1
64307: PUSH
64308: LD_INT 2
64310: PUSH
64311: EMPTY
64312: LIST
64313: LIST
64314: PUSH
64315: LD_INT 0
64317: PUSH
64318: LD_INT 2
64320: PUSH
64321: EMPTY
64322: LIST
64323: LIST
64324: PUSH
64325: LD_INT 1
64327: NEG
64328: PUSH
64329: LD_INT 1
64331: PUSH
64332: EMPTY
64333: LIST
64334: LIST
64335: PUSH
64336: LD_INT 2
64338: NEG
64339: PUSH
64340: LD_INT 0
64342: PUSH
64343: EMPTY
64344: LIST
64345: LIST
64346: PUSH
64347: LD_INT 2
64349: NEG
64350: PUSH
64351: LD_INT 1
64353: NEG
64354: PUSH
64355: EMPTY
64356: LIST
64357: LIST
64358: PUSH
64359: LD_INT 2
64361: NEG
64362: PUSH
64363: LD_INT 2
64365: NEG
64366: PUSH
64367: EMPTY
64368: LIST
64369: LIST
64370: PUSH
64371: EMPTY
64372: LIST
64373: LIST
64374: LIST
64375: LIST
64376: LIST
64377: LIST
64378: LIST
64379: LIST
64380: LIST
64381: LIST
64382: LIST
64383: LIST
64384: LIST
64385: LIST
64386: LIST
64387: LIST
64388: LIST
64389: LIST
64390: LIST
64391: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64392: LD_ADDR_VAR 0 56
64396: PUSH
64397: LD_INT 0
64399: PUSH
64400: LD_INT 0
64402: PUSH
64403: EMPTY
64404: LIST
64405: LIST
64406: PUSH
64407: LD_INT 0
64409: PUSH
64410: LD_INT 1
64412: NEG
64413: PUSH
64414: EMPTY
64415: LIST
64416: LIST
64417: PUSH
64418: LD_INT 1
64420: PUSH
64421: LD_INT 0
64423: PUSH
64424: EMPTY
64425: LIST
64426: LIST
64427: PUSH
64428: LD_INT 1
64430: PUSH
64431: LD_INT 1
64433: PUSH
64434: EMPTY
64435: LIST
64436: LIST
64437: PUSH
64438: LD_INT 0
64440: PUSH
64441: LD_INT 1
64443: PUSH
64444: EMPTY
64445: LIST
64446: LIST
64447: PUSH
64448: LD_INT 1
64450: NEG
64451: PUSH
64452: LD_INT 0
64454: PUSH
64455: EMPTY
64456: LIST
64457: LIST
64458: PUSH
64459: LD_INT 1
64461: NEG
64462: PUSH
64463: LD_INT 1
64465: NEG
64466: PUSH
64467: EMPTY
64468: LIST
64469: LIST
64470: PUSH
64471: LD_INT 1
64473: NEG
64474: PUSH
64475: LD_INT 2
64477: NEG
64478: PUSH
64479: EMPTY
64480: LIST
64481: LIST
64482: PUSH
64483: LD_INT 0
64485: PUSH
64486: LD_INT 2
64488: NEG
64489: PUSH
64490: EMPTY
64491: LIST
64492: LIST
64493: PUSH
64494: LD_INT 1
64496: PUSH
64497: LD_INT 1
64499: NEG
64500: PUSH
64501: EMPTY
64502: LIST
64503: LIST
64504: PUSH
64505: LD_INT 2
64507: PUSH
64508: LD_INT 0
64510: PUSH
64511: EMPTY
64512: LIST
64513: LIST
64514: PUSH
64515: LD_INT 2
64517: PUSH
64518: LD_INT 1
64520: PUSH
64521: EMPTY
64522: LIST
64523: LIST
64524: PUSH
64525: LD_INT 2
64527: PUSH
64528: LD_INT 2
64530: PUSH
64531: EMPTY
64532: LIST
64533: LIST
64534: PUSH
64535: LD_INT 1
64537: PUSH
64538: LD_INT 2
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: PUSH
64545: LD_INT 0
64547: PUSH
64548: LD_INT 2
64550: PUSH
64551: EMPTY
64552: LIST
64553: LIST
64554: PUSH
64555: LD_INT 1
64557: NEG
64558: PUSH
64559: LD_INT 1
64561: PUSH
64562: EMPTY
64563: LIST
64564: LIST
64565: PUSH
64566: LD_INT 2
64568: NEG
64569: PUSH
64570: LD_INT 0
64572: PUSH
64573: EMPTY
64574: LIST
64575: LIST
64576: PUSH
64577: LD_INT 2
64579: NEG
64580: PUSH
64581: LD_INT 1
64583: NEG
64584: PUSH
64585: EMPTY
64586: LIST
64587: LIST
64588: PUSH
64589: LD_INT 2
64591: NEG
64592: PUSH
64593: LD_INT 2
64595: NEG
64596: PUSH
64597: EMPTY
64598: LIST
64599: LIST
64600: PUSH
64601: EMPTY
64602: LIST
64603: LIST
64604: LIST
64605: LIST
64606: LIST
64607: LIST
64608: LIST
64609: LIST
64610: LIST
64611: LIST
64612: LIST
64613: LIST
64614: LIST
64615: LIST
64616: LIST
64617: LIST
64618: LIST
64619: LIST
64620: LIST
64621: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64622: LD_ADDR_VAR 0 57
64626: PUSH
64627: LD_INT 0
64629: PUSH
64630: LD_INT 0
64632: PUSH
64633: EMPTY
64634: LIST
64635: LIST
64636: PUSH
64637: LD_INT 0
64639: PUSH
64640: LD_INT 1
64642: NEG
64643: PUSH
64644: EMPTY
64645: LIST
64646: LIST
64647: PUSH
64648: LD_INT 1
64650: PUSH
64651: LD_INT 0
64653: PUSH
64654: EMPTY
64655: LIST
64656: LIST
64657: PUSH
64658: LD_INT 1
64660: PUSH
64661: LD_INT 1
64663: PUSH
64664: EMPTY
64665: LIST
64666: LIST
64667: PUSH
64668: LD_INT 0
64670: PUSH
64671: LD_INT 1
64673: PUSH
64674: EMPTY
64675: LIST
64676: LIST
64677: PUSH
64678: LD_INT 1
64680: NEG
64681: PUSH
64682: LD_INT 0
64684: PUSH
64685: EMPTY
64686: LIST
64687: LIST
64688: PUSH
64689: LD_INT 1
64691: NEG
64692: PUSH
64693: LD_INT 1
64695: NEG
64696: PUSH
64697: EMPTY
64698: LIST
64699: LIST
64700: PUSH
64701: LD_INT 1
64703: NEG
64704: PUSH
64705: LD_INT 2
64707: NEG
64708: PUSH
64709: EMPTY
64710: LIST
64711: LIST
64712: PUSH
64713: LD_INT 0
64715: PUSH
64716: LD_INT 2
64718: NEG
64719: PUSH
64720: EMPTY
64721: LIST
64722: LIST
64723: PUSH
64724: LD_INT 1
64726: PUSH
64727: LD_INT 1
64729: NEG
64730: PUSH
64731: EMPTY
64732: LIST
64733: LIST
64734: PUSH
64735: LD_INT 2
64737: PUSH
64738: LD_INT 0
64740: PUSH
64741: EMPTY
64742: LIST
64743: LIST
64744: PUSH
64745: LD_INT 2
64747: PUSH
64748: LD_INT 1
64750: PUSH
64751: EMPTY
64752: LIST
64753: LIST
64754: PUSH
64755: LD_INT 2
64757: PUSH
64758: LD_INT 2
64760: PUSH
64761: EMPTY
64762: LIST
64763: LIST
64764: PUSH
64765: LD_INT 1
64767: PUSH
64768: LD_INT 2
64770: PUSH
64771: EMPTY
64772: LIST
64773: LIST
64774: PUSH
64775: LD_INT 0
64777: PUSH
64778: LD_INT 2
64780: PUSH
64781: EMPTY
64782: LIST
64783: LIST
64784: PUSH
64785: LD_INT 1
64787: NEG
64788: PUSH
64789: LD_INT 1
64791: PUSH
64792: EMPTY
64793: LIST
64794: LIST
64795: PUSH
64796: LD_INT 2
64798: NEG
64799: PUSH
64800: LD_INT 0
64802: PUSH
64803: EMPTY
64804: LIST
64805: LIST
64806: PUSH
64807: LD_INT 2
64809: NEG
64810: PUSH
64811: LD_INT 1
64813: NEG
64814: PUSH
64815: EMPTY
64816: LIST
64817: LIST
64818: PUSH
64819: LD_INT 2
64821: NEG
64822: PUSH
64823: LD_INT 2
64825: NEG
64826: PUSH
64827: EMPTY
64828: LIST
64829: LIST
64830: PUSH
64831: EMPTY
64832: LIST
64833: LIST
64834: LIST
64835: LIST
64836: LIST
64837: LIST
64838: LIST
64839: LIST
64840: LIST
64841: LIST
64842: LIST
64843: LIST
64844: LIST
64845: LIST
64846: LIST
64847: LIST
64848: LIST
64849: LIST
64850: LIST
64851: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64852: LD_ADDR_VAR 0 58
64856: PUSH
64857: LD_INT 0
64859: PUSH
64860: LD_INT 0
64862: PUSH
64863: EMPTY
64864: LIST
64865: LIST
64866: PUSH
64867: LD_INT 0
64869: PUSH
64870: LD_INT 1
64872: NEG
64873: PUSH
64874: EMPTY
64875: LIST
64876: LIST
64877: PUSH
64878: LD_INT 1
64880: PUSH
64881: LD_INT 0
64883: PUSH
64884: EMPTY
64885: LIST
64886: LIST
64887: PUSH
64888: LD_INT 1
64890: PUSH
64891: LD_INT 1
64893: PUSH
64894: EMPTY
64895: LIST
64896: LIST
64897: PUSH
64898: LD_INT 0
64900: PUSH
64901: LD_INT 1
64903: PUSH
64904: EMPTY
64905: LIST
64906: LIST
64907: PUSH
64908: LD_INT 1
64910: NEG
64911: PUSH
64912: LD_INT 0
64914: PUSH
64915: EMPTY
64916: LIST
64917: LIST
64918: PUSH
64919: LD_INT 1
64921: NEG
64922: PUSH
64923: LD_INT 1
64925: NEG
64926: PUSH
64927: EMPTY
64928: LIST
64929: LIST
64930: PUSH
64931: LD_INT 1
64933: NEG
64934: PUSH
64935: LD_INT 2
64937: NEG
64938: PUSH
64939: EMPTY
64940: LIST
64941: LIST
64942: PUSH
64943: LD_INT 0
64945: PUSH
64946: LD_INT 2
64948: NEG
64949: PUSH
64950: EMPTY
64951: LIST
64952: LIST
64953: PUSH
64954: LD_INT 1
64956: PUSH
64957: LD_INT 1
64959: NEG
64960: PUSH
64961: EMPTY
64962: LIST
64963: LIST
64964: PUSH
64965: LD_INT 2
64967: PUSH
64968: LD_INT 0
64970: PUSH
64971: EMPTY
64972: LIST
64973: LIST
64974: PUSH
64975: LD_INT 2
64977: PUSH
64978: LD_INT 1
64980: PUSH
64981: EMPTY
64982: LIST
64983: LIST
64984: PUSH
64985: LD_INT 2
64987: PUSH
64988: LD_INT 2
64990: PUSH
64991: EMPTY
64992: LIST
64993: LIST
64994: PUSH
64995: LD_INT 1
64997: PUSH
64998: LD_INT 2
65000: PUSH
65001: EMPTY
65002: LIST
65003: LIST
65004: PUSH
65005: LD_INT 0
65007: PUSH
65008: LD_INT 2
65010: PUSH
65011: EMPTY
65012: LIST
65013: LIST
65014: PUSH
65015: LD_INT 1
65017: NEG
65018: PUSH
65019: LD_INT 1
65021: PUSH
65022: EMPTY
65023: LIST
65024: LIST
65025: PUSH
65026: LD_INT 2
65028: NEG
65029: PUSH
65030: LD_INT 0
65032: PUSH
65033: EMPTY
65034: LIST
65035: LIST
65036: PUSH
65037: LD_INT 2
65039: NEG
65040: PUSH
65041: LD_INT 1
65043: NEG
65044: PUSH
65045: EMPTY
65046: LIST
65047: LIST
65048: PUSH
65049: LD_INT 2
65051: NEG
65052: PUSH
65053: LD_INT 2
65055: NEG
65056: PUSH
65057: EMPTY
65058: LIST
65059: LIST
65060: PUSH
65061: EMPTY
65062: LIST
65063: LIST
65064: LIST
65065: LIST
65066: LIST
65067: LIST
65068: LIST
65069: LIST
65070: LIST
65071: LIST
65072: LIST
65073: LIST
65074: LIST
65075: LIST
65076: LIST
65077: LIST
65078: LIST
65079: LIST
65080: LIST
65081: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65082: LD_ADDR_VAR 0 59
65086: PUSH
65087: LD_INT 0
65089: PUSH
65090: LD_INT 0
65092: PUSH
65093: EMPTY
65094: LIST
65095: LIST
65096: PUSH
65097: LD_INT 0
65099: PUSH
65100: LD_INT 1
65102: NEG
65103: PUSH
65104: EMPTY
65105: LIST
65106: LIST
65107: PUSH
65108: LD_INT 1
65110: PUSH
65111: LD_INT 0
65113: PUSH
65114: EMPTY
65115: LIST
65116: LIST
65117: PUSH
65118: LD_INT 1
65120: PUSH
65121: LD_INT 1
65123: PUSH
65124: EMPTY
65125: LIST
65126: LIST
65127: PUSH
65128: LD_INT 0
65130: PUSH
65131: LD_INT 1
65133: PUSH
65134: EMPTY
65135: LIST
65136: LIST
65137: PUSH
65138: LD_INT 1
65140: NEG
65141: PUSH
65142: LD_INT 0
65144: PUSH
65145: EMPTY
65146: LIST
65147: LIST
65148: PUSH
65149: LD_INT 1
65151: NEG
65152: PUSH
65153: LD_INT 1
65155: NEG
65156: PUSH
65157: EMPTY
65158: LIST
65159: LIST
65160: PUSH
65161: EMPTY
65162: LIST
65163: LIST
65164: LIST
65165: LIST
65166: LIST
65167: LIST
65168: LIST
65169: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65170: LD_ADDR_VAR 0 60
65174: PUSH
65175: LD_INT 0
65177: PUSH
65178: LD_INT 0
65180: PUSH
65181: EMPTY
65182: LIST
65183: LIST
65184: PUSH
65185: LD_INT 0
65187: PUSH
65188: LD_INT 1
65190: NEG
65191: PUSH
65192: EMPTY
65193: LIST
65194: LIST
65195: PUSH
65196: LD_INT 1
65198: PUSH
65199: LD_INT 0
65201: PUSH
65202: EMPTY
65203: LIST
65204: LIST
65205: PUSH
65206: LD_INT 1
65208: PUSH
65209: LD_INT 1
65211: PUSH
65212: EMPTY
65213: LIST
65214: LIST
65215: PUSH
65216: LD_INT 0
65218: PUSH
65219: LD_INT 1
65221: PUSH
65222: EMPTY
65223: LIST
65224: LIST
65225: PUSH
65226: LD_INT 1
65228: NEG
65229: PUSH
65230: LD_INT 0
65232: PUSH
65233: EMPTY
65234: LIST
65235: LIST
65236: PUSH
65237: LD_INT 1
65239: NEG
65240: PUSH
65241: LD_INT 1
65243: NEG
65244: PUSH
65245: EMPTY
65246: LIST
65247: LIST
65248: PUSH
65249: EMPTY
65250: LIST
65251: LIST
65252: LIST
65253: LIST
65254: LIST
65255: LIST
65256: LIST
65257: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65258: LD_ADDR_VAR 0 61
65262: PUSH
65263: LD_INT 0
65265: PUSH
65266: LD_INT 0
65268: PUSH
65269: EMPTY
65270: LIST
65271: LIST
65272: PUSH
65273: LD_INT 0
65275: PUSH
65276: LD_INT 1
65278: NEG
65279: PUSH
65280: EMPTY
65281: LIST
65282: LIST
65283: PUSH
65284: LD_INT 1
65286: PUSH
65287: LD_INT 0
65289: PUSH
65290: EMPTY
65291: LIST
65292: LIST
65293: PUSH
65294: LD_INT 1
65296: PUSH
65297: LD_INT 1
65299: PUSH
65300: EMPTY
65301: LIST
65302: LIST
65303: PUSH
65304: LD_INT 0
65306: PUSH
65307: LD_INT 1
65309: PUSH
65310: EMPTY
65311: LIST
65312: LIST
65313: PUSH
65314: LD_INT 1
65316: NEG
65317: PUSH
65318: LD_INT 0
65320: PUSH
65321: EMPTY
65322: LIST
65323: LIST
65324: PUSH
65325: LD_INT 1
65327: NEG
65328: PUSH
65329: LD_INT 1
65331: NEG
65332: PUSH
65333: EMPTY
65334: LIST
65335: LIST
65336: PUSH
65337: EMPTY
65338: LIST
65339: LIST
65340: LIST
65341: LIST
65342: LIST
65343: LIST
65344: LIST
65345: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65346: LD_ADDR_VAR 0 62
65350: PUSH
65351: LD_INT 0
65353: PUSH
65354: LD_INT 0
65356: PUSH
65357: EMPTY
65358: LIST
65359: LIST
65360: PUSH
65361: LD_INT 0
65363: PUSH
65364: LD_INT 1
65366: NEG
65367: PUSH
65368: EMPTY
65369: LIST
65370: LIST
65371: PUSH
65372: LD_INT 1
65374: PUSH
65375: LD_INT 0
65377: PUSH
65378: EMPTY
65379: LIST
65380: LIST
65381: PUSH
65382: LD_INT 1
65384: PUSH
65385: LD_INT 1
65387: PUSH
65388: EMPTY
65389: LIST
65390: LIST
65391: PUSH
65392: LD_INT 0
65394: PUSH
65395: LD_INT 1
65397: PUSH
65398: EMPTY
65399: LIST
65400: LIST
65401: PUSH
65402: LD_INT 1
65404: NEG
65405: PUSH
65406: LD_INT 0
65408: PUSH
65409: EMPTY
65410: LIST
65411: LIST
65412: PUSH
65413: LD_INT 1
65415: NEG
65416: PUSH
65417: LD_INT 1
65419: NEG
65420: PUSH
65421: EMPTY
65422: LIST
65423: LIST
65424: PUSH
65425: EMPTY
65426: LIST
65427: LIST
65428: LIST
65429: LIST
65430: LIST
65431: LIST
65432: LIST
65433: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65434: LD_ADDR_VAR 0 63
65438: PUSH
65439: LD_INT 0
65441: PUSH
65442: LD_INT 0
65444: PUSH
65445: EMPTY
65446: LIST
65447: LIST
65448: PUSH
65449: LD_INT 0
65451: PUSH
65452: LD_INT 1
65454: NEG
65455: PUSH
65456: EMPTY
65457: LIST
65458: LIST
65459: PUSH
65460: LD_INT 1
65462: PUSH
65463: LD_INT 0
65465: PUSH
65466: EMPTY
65467: LIST
65468: LIST
65469: PUSH
65470: LD_INT 1
65472: PUSH
65473: LD_INT 1
65475: PUSH
65476: EMPTY
65477: LIST
65478: LIST
65479: PUSH
65480: LD_INT 0
65482: PUSH
65483: LD_INT 1
65485: PUSH
65486: EMPTY
65487: LIST
65488: LIST
65489: PUSH
65490: LD_INT 1
65492: NEG
65493: PUSH
65494: LD_INT 0
65496: PUSH
65497: EMPTY
65498: LIST
65499: LIST
65500: PUSH
65501: LD_INT 1
65503: NEG
65504: PUSH
65505: LD_INT 1
65507: NEG
65508: PUSH
65509: EMPTY
65510: LIST
65511: LIST
65512: PUSH
65513: EMPTY
65514: LIST
65515: LIST
65516: LIST
65517: LIST
65518: LIST
65519: LIST
65520: LIST
65521: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65522: LD_ADDR_VAR 0 64
65526: PUSH
65527: LD_INT 0
65529: PUSH
65530: LD_INT 0
65532: PUSH
65533: EMPTY
65534: LIST
65535: LIST
65536: PUSH
65537: LD_INT 0
65539: PUSH
65540: LD_INT 1
65542: NEG
65543: PUSH
65544: EMPTY
65545: LIST
65546: LIST
65547: PUSH
65548: LD_INT 1
65550: PUSH
65551: LD_INT 0
65553: PUSH
65554: EMPTY
65555: LIST
65556: LIST
65557: PUSH
65558: LD_INT 1
65560: PUSH
65561: LD_INT 1
65563: PUSH
65564: EMPTY
65565: LIST
65566: LIST
65567: PUSH
65568: LD_INT 0
65570: PUSH
65571: LD_INT 1
65573: PUSH
65574: EMPTY
65575: LIST
65576: LIST
65577: PUSH
65578: LD_INT 1
65580: NEG
65581: PUSH
65582: LD_INT 0
65584: PUSH
65585: EMPTY
65586: LIST
65587: LIST
65588: PUSH
65589: LD_INT 1
65591: NEG
65592: PUSH
65593: LD_INT 1
65595: NEG
65596: PUSH
65597: EMPTY
65598: LIST
65599: LIST
65600: PUSH
65601: EMPTY
65602: LIST
65603: LIST
65604: LIST
65605: LIST
65606: LIST
65607: LIST
65608: LIST
65609: ST_TO_ADDR
// end ; 1 :
65610: GO 71507
65612: LD_INT 1
65614: DOUBLE
65615: EQUAL
65616: IFTRUE 65620
65618: GO 68243
65620: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65621: LD_ADDR_VAR 0 11
65625: PUSH
65626: LD_INT 1
65628: NEG
65629: PUSH
65630: LD_INT 3
65632: NEG
65633: PUSH
65634: EMPTY
65635: LIST
65636: LIST
65637: PUSH
65638: LD_INT 0
65640: PUSH
65641: LD_INT 3
65643: NEG
65644: PUSH
65645: EMPTY
65646: LIST
65647: LIST
65648: PUSH
65649: LD_INT 1
65651: PUSH
65652: LD_INT 2
65654: NEG
65655: PUSH
65656: EMPTY
65657: LIST
65658: LIST
65659: PUSH
65660: EMPTY
65661: LIST
65662: LIST
65663: LIST
65664: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65665: LD_ADDR_VAR 0 12
65669: PUSH
65670: LD_INT 2
65672: PUSH
65673: LD_INT 1
65675: NEG
65676: PUSH
65677: EMPTY
65678: LIST
65679: LIST
65680: PUSH
65681: LD_INT 3
65683: PUSH
65684: LD_INT 0
65686: PUSH
65687: EMPTY
65688: LIST
65689: LIST
65690: PUSH
65691: LD_INT 3
65693: PUSH
65694: LD_INT 1
65696: PUSH
65697: EMPTY
65698: LIST
65699: LIST
65700: PUSH
65701: EMPTY
65702: LIST
65703: LIST
65704: LIST
65705: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65706: LD_ADDR_VAR 0 13
65710: PUSH
65711: LD_INT 3
65713: PUSH
65714: LD_INT 2
65716: PUSH
65717: EMPTY
65718: LIST
65719: LIST
65720: PUSH
65721: LD_INT 3
65723: PUSH
65724: LD_INT 3
65726: PUSH
65727: EMPTY
65728: LIST
65729: LIST
65730: PUSH
65731: LD_INT 2
65733: PUSH
65734: LD_INT 3
65736: PUSH
65737: EMPTY
65738: LIST
65739: LIST
65740: PUSH
65741: EMPTY
65742: LIST
65743: LIST
65744: LIST
65745: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65746: LD_ADDR_VAR 0 14
65750: PUSH
65751: LD_INT 1
65753: PUSH
65754: LD_INT 3
65756: PUSH
65757: EMPTY
65758: LIST
65759: LIST
65760: PUSH
65761: LD_INT 0
65763: PUSH
65764: LD_INT 3
65766: PUSH
65767: EMPTY
65768: LIST
65769: LIST
65770: PUSH
65771: LD_INT 1
65773: NEG
65774: PUSH
65775: LD_INT 2
65777: PUSH
65778: EMPTY
65779: LIST
65780: LIST
65781: PUSH
65782: EMPTY
65783: LIST
65784: LIST
65785: LIST
65786: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65787: LD_ADDR_VAR 0 15
65791: PUSH
65792: LD_INT 2
65794: NEG
65795: PUSH
65796: LD_INT 1
65798: PUSH
65799: EMPTY
65800: LIST
65801: LIST
65802: PUSH
65803: LD_INT 3
65805: NEG
65806: PUSH
65807: LD_INT 0
65809: PUSH
65810: EMPTY
65811: LIST
65812: LIST
65813: PUSH
65814: LD_INT 3
65816: NEG
65817: PUSH
65818: LD_INT 1
65820: NEG
65821: PUSH
65822: EMPTY
65823: LIST
65824: LIST
65825: PUSH
65826: EMPTY
65827: LIST
65828: LIST
65829: LIST
65830: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65831: LD_ADDR_VAR 0 16
65835: PUSH
65836: LD_INT 2
65838: NEG
65839: PUSH
65840: LD_INT 3
65842: NEG
65843: PUSH
65844: EMPTY
65845: LIST
65846: LIST
65847: PUSH
65848: LD_INT 3
65850: NEG
65851: PUSH
65852: LD_INT 2
65854: NEG
65855: PUSH
65856: EMPTY
65857: LIST
65858: LIST
65859: PUSH
65860: LD_INT 3
65862: NEG
65863: PUSH
65864: LD_INT 3
65866: NEG
65867: PUSH
65868: EMPTY
65869: LIST
65870: LIST
65871: PUSH
65872: EMPTY
65873: LIST
65874: LIST
65875: LIST
65876: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65877: LD_ADDR_VAR 0 17
65881: PUSH
65882: LD_INT 1
65884: NEG
65885: PUSH
65886: LD_INT 3
65888: NEG
65889: PUSH
65890: EMPTY
65891: LIST
65892: LIST
65893: PUSH
65894: LD_INT 0
65896: PUSH
65897: LD_INT 3
65899: NEG
65900: PUSH
65901: EMPTY
65902: LIST
65903: LIST
65904: PUSH
65905: LD_INT 1
65907: PUSH
65908: LD_INT 2
65910: NEG
65911: PUSH
65912: EMPTY
65913: LIST
65914: LIST
65915: PUSH
65916: EMPTY
65917: LIST
65918: LIST
65919: LIST
65920: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65921: LD_ADDR_VAR 0 18
65925: PUSH
65926: LD_INT 2
65928: PUSH
65929: LD_INT 1
65931: NEG
65932: PUSH
65933: EMPTY
65934: LIST
65935: LIST
65936: PUSH
65937: LD_INT 3
65939: PUSH
65940: LD_INT 0
65942: PUSH
65943: EMPTY
65944: LIST
65945: LIST
65946: PUSH
65947: LD_INT 3
65949: PUSH
65950: LD_INT 1
65952: PUSH
65953: EMPTY
65954: LIST
65955: LIST
65956: PUSH
65957: EMPTY
65958: LIST
65959: LIST
65960: LIST
65961: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65962: LD_ADDR_VAR 0 19
65966: PUSH
65967: LD_INT 3
65969: PUSH
65970: LD_INT 2
65972: PUSH
65973: EMPTY
65974: LIST
65975: LIST
65976: PUSH
65977: LD_INT 3
65979: PUSH
65980: LD_INT 3
65982: PUSH
65983: EMPTY
65984: LIST
65985: LIST
65986: PUSH
65987: LD_INT 2
65989: PUSH
65990: LD_INT 3
65992: PUSH
65993: EMPTY
65994: LIST
65995: LIST
65996: PUSH
65997: EMPTY
65998: LIST
65999: LIST
66000: LIST
66001: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66002: LD_ADDR_VAR 0 20
66006: PUSH
66007: LD_INT 1
66009: PUSH
66010: LD_INT 3
66012: PUSH
66013: EMPTY
66014: LIST
66015: LIST
66016: PUSH
66017: LD_INT 0
66019: PUSH
66020: LD_INT 3
66022: PUSH
66023: EMPTY
66024: LIST
66025: LIST
66026: PUSH
66027: LD_INT 1
66029: NEG
66030: PUSH
66031: LD_INT 2
66033: PUSH
66034: EMPTY
66035: LIST
66036: LIST
66037: PUSH
66038: EMPTY
66039: LIST
66040: LIST
66041: LIST
66042: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66043: LD_ADDR_VAR 0 21
66047: PUSH
66048: LD_INT 2
66050: NEG
66051: PUSH
66052: LD_INT 1
66054: PUSH
66055: EMPTY
66056: LIST
66057: LIST
66058: PUSH
66059: LD_INT 3
66061: NEG
66062: PUSH
66063: LD_INT 0
66065: PUSH
66066: EMPTY
66067: LIST
66068: LIST
66069: PUSH
66070: LD_INT 3
66072: NEG
66073: PUSH
66074: LD_INT 1
66076: NEG
66077: PUSH
66078: EMPTY
66079: LIST
66080: LIST
66081: PUSH
66082: EMPTY
66083: LIST
66084: LIST
66085: LIST
66086: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66087: LD_ADDR_VAR 0 22
66091: PUSH
66092: LD_INT 2
66094: NEG
66095: PUSH
66096: LD_INT 3
66098: NEG
66099: PUSH
66100: EMPTY
66101: LIST
66102: LIST
66103: PUSH
66104: LD_INT 3
66106: NEG
66107: PUSH
66108: LD_INT 2
66110: NEG
66111: PUSH
66112: EMPTY
66113: LIST
66114: LIST
66115: PUSH
66116: LD_INT 3
66118: NEG
66119: PUSH
66120: LD_INT 3
66122: NEG
66123: PUSH
66124: EMPTY
66125: LIST
66126: LIST
66127: PUSH
66128: EMPTY
66129: LIST
66130: LIST
66131: LIST
66132: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
66133: LD_ADDR_VAR 0 23
66137: PUSH
66138: LD_INT 0
66140: PUSH
66141: LD_INT 3
66143: NEG
66144: PUSH
66145: EMPTY
66146: LIST
66147: LIST
66148: PUSH
66149: LD_INT 1
66151: NEG
66152: PUSH
66153: LD_INT 4
66155: NEG
66156: PUSH
66157: EMPTY
66158: LIST
66159: LIST
66160: PUSH
66161: LD_INT 1
66163: PUSH
66164: LD_INT 3
66166: NEG
66167: PUSH
66168: EMPTY
66169: LIST
66170: LIST
66171: PUSH
66172: EMPTY
66173: LIST
66174: LIST
66175: LIST
66176: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
66177: LD_ADDR_VAR 0 24
66181: PUSH
66182: LD_INT 3
66184: PUSH
66185: LD_INT 0
66187: PUSH
66188: EMPTY
66189: LIST
66190: LIST
66191: PUSH
66192: LD_INT 3
66194: PUSH
66195: LD_INT 1
66197: NEG
66198: PUSH
66199: EMPTY
66200: LIST
66201: LIST
66202: PUSH
66203: LD_INT 4
66205: PUSH
66206: LD_INT 1
66208: PUSH
66209: EMPTY
66210: LIST
66211: LIST
66212: PUSH
66213: EMPTY
66214: LIST
66215: LIST
66216: LIST
66217: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
66218: LD_ADDR_VAR 0 25
66222: PUSH
66223: LD_INT 3
66225: PUSH
66226: LD_INT 3
66228: PUSH
66229: EMPTY
66230: LIST
66231: LIST
66232: PUSH
66233: LD_INT 4
66235: PUSH
66236: LD_INT 3
66238: PUSH
66239: EMPTY
66240: LIST
66241: LIST
66242: PUSH
66243: LD_INT 3
66245: PUSH
66246: LD_INT 4
66248: PUSH
66249: EMPTY
66250: LIST
66251: LIST
66252: PUSH
66253: EMPTY
66254: LIST
66255: LIST
66256: LIST
66257: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
66258: LD_ADDR_VAR 0 26
66262: PUSH
66263: LD_INT 0
66265: PUSH
66266: LD_INT 3
66268: PUSH
66269: EMPTY
66270: LIST
66271: LIST
66272: PUSH
66273: LD_INT 1
66275: PUSH
66276: LD_INT 4
66278: PUSH
66279: EMPTY
66280: LIST
66281: LIST
66282: PUSH
66283: LD_INT 1
66285: NEG
66286: PUSH
66287: LD_INT 3
66289: PUSH
66290: EMPTY
66291: LIST
66292: LIST
66293: PUSH
66294: EMPTY
66295: LIST
66296: LIST
66297: LIST
66298: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
66299: LD_ADDR_VAR 0 27
66303: PUSH
66304: LD_INT 3
66306: NEG
66307: PUSH
66308: LD_INT 0
66310: PUSH
66311: EMPTY
66312: LIST
66313: LIST
66314: PUSH
66315: LD_INT 3
66317: NEG
66318: PUSH
66319: LD_INT 1
66321: PUSH
66322: EMPTY
66323: LIST
66324: LIST
66325: PUSH
66326: LD_INT 4
66328: NEG
66329: PUSH
66330: LD_INT 1
66332: NEG
66333: PUSH
66334: EMPTY
66335: LIST
66336: LIST
66337: PUSH
66338: EMPTY
66339: LIST
66340: LIST
66341: LIST
66342: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
66343: LD_ADDR_VAR 0 28
66347: PUSH
66348: LD_INT 3
66350: NEG
66351: PUSH
66352: LD_INT 3
66354: NEG
66355: PUSH
66356: EMPTY
66357: LIST
66358: LIST
66359: PUSH
66360: LD_INT 3
66362: NEG
66363: PUSH
66364: LD_INT 4
66366: NEG
66367: PUSH
66368: EMPTY
66369: LIST
66370: LIST
66371: PUSH
66372: LD_INT 4
66374: NEG
66375: PUSH
66376: LD_INT 3
66378: NEG
66379: PUSH
66380: EMPTY
66381: LIST
66382: LIST
66383: PUSH
66384: EMPTY
66385: LIST
66386: LIST
66387: LIST
66388: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
66389: LD_ADDR_VAR 0 29
66393: PUSH
66394: LD_INT 1
66396: NEG
66397: PUSH
66398: LD_INT 3
66400: NEG
66401: PUSH
66402: EMPTY
66403: LIST
66404: LIST
66405: PUSH
66406: LD_INT 0
66408: PUSH
66409: LD_INT 3
66411: NEG
66412: PUSH
66413: EMPTY
66414: LIST
66415: LIST
66416: PUSH
66417: LD_INT 1
66419: PUSH
66420: LD_INT 2
66422: NEG
66423: PUSH
66424: EMPTY
66425: LIST
66426: LIST
66427: PUSH
66428: LD_INT 1
66430: NEG
66431: PUSH
66432: LD_INT 4
66434: NEG
66435: PUSH
66436: EMPTY
66437: LIST
66438: LIST
66439: PUSH
66440: LD_INT 0
66442: PUSH
66443: LD_INT 4
66445: NEG
66446: PUSH
66447: EMPTY
66448: LIST
66449: LIST
66450: PUSH
66451: LD_INT 1
66453: PUSH
66454: LD_INT 3
66456: NEG
66457: PUSH
66458: EMPTY
66459: LIST
66460: LIST
66461: PUSH
66462: LD_INT 1
66464: NEG
66465: PUSH
66466: LD_INT 5
66468: NEG
66469: PUSH
66470: EMPTY
66471: LIST
66472: LIST
66473: PUSH
66474: LD_INT 0
66476: PUSH
66477: LD_INT 5
66479: NEG
66480: PUSH
66481: EMPTY
66482: LIST
66483: LIST
66484: PUSH
66485: LD_INT 1
66487: PUSH
66488: LD_INT 4
66490: NEG
66491: PUSH
66492: EMPTY
66493: LIST
66494: LIST
66495: PUSH
66496: LD_INT 1
66498: NEG
66499: PUSH
66500: LD_INT 6
66502: NEG
66503: PUSH
66504: EMPTY
66505: LIST
66506: LIST
66507: PUSH
66508: LD_INT 0
66510: PUSH
66511: LD_INT 6
66513: NEG
66514: PUSH
66515: EMPTY
66516: LIST
66517: LIST
66518: PUSH
66519: LD_INT 1
66521: PUSH
66522: LD_INT 5
66524: NEG
66525: PUSH
66526: EMPTY
66527: LIST
66528: LIST
66529: PUSH
66530: EMPTY
66531: LIST
66532: LIST
66533: LIST
66534: LIST
66535: LIST
66536: LIST
66537: LIST
66538: LIST
66539: LIST
66540: LIST
66541: LIST
66542: LIST
66543: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
66544: LD_ADDR_VAR 0 30
66548: PUSH
66549: LD_INT 2
66551: PUSH
66552: LD_INT 1
66554: NEG
66555: PUSH
66556: EMPTY
66557: LIST
66558: LIST
66559: PUSH
66560: LD_INT 3
66562: PUSH
66563: LD_INT 0
66565: PUSH
66566: EMPTY
66567: LIST
66568: LIST
66569: PUSH
66570: LD_INT 3
66572: PUSH
66573: LD_INT 1
66575: PUSH
66576: EMPTY
66577: LIST
66578: LIST
66579: PUSH
66580: LD_INT 3
66582: PUSH
66583: LD_INT 1
66585: NEG
66586: PUSH
66587: EMPTY
66588: LIST
66589: LIST
66590: PUSH
66591: LD_INT 4
66593: PUSH
66594: LD_INT 0
66596: PUSH
66597: EMPTY
66598: LIST
66599: LIST
66600: PUSH
66601: LD_INT 4
66603: PUSH
66604: LD_INT 1
66606: PUSH
66607: EMPTY
66608: LIST
66609: LIST
66610: PUSH
66611: LD_INT 4
66613: PUSH
66614: LD_INT 1
66616: NEG
66617: PUSH
66618: EMPTY
66619: LIST
66620: LIST
66621: PUSH
66622: LD_INT 5
66624: PUSH
66625: LD_INT 0
66627: PUSH
66628: EMPTY
66629: LIST
66630: LIST
66631: PUSH
66632: LD_INT 5
66634: PUSH
66635: LD_INT 1
66637: PUSH
66638: EMPTY
66639: LIST
66640: LIST
66641: PUSH
66642: LD_INT 5
66644: PUSH
66645: LD_INT 1
66647: NEG
66648: PUSH
66649: EMPTY
66650: LIST
66651: LIST
66652: PUSH
66653: LD_INT 6
66655: PUSH
66656: LD_INT 0
66658: PUSH
66659: EMPTY
66660: LIST
66661: LIST
66662: PUSH
66663: LD_INT 6
66665: PUSH
66666: LD_INT 1
66668: PUSH
66669: EMPTY
66670: LIST
66671: LIST
66672: PUSH
66673: EMPTY
66674: LIST
66675: LIST
66676: LIST
66677: LIST
66678: LIST
66679: LIST
66680: LIST
66681: LIST
66682: LIST
66683: LIST
66684: LIST
66685: LIST
66686: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
66687: LD_ADDR_VAR 0 31
66691: PUSH
66692: LD_INT 3
66694: PUSH
66695: LD_INT 2
66697: PUSH
66698: EMPTY
66699: LIST
66700: LIST
66701: PUSH
66702: LD_INT 3
66704: PUSH
66705: LD_INT 3
66707: PUSH
66708: EMPTY
66709: LIST
66710: LIST
66711: PUSH
66712: LD_INT 2
66714: PUSH
66715: LD_INT 3
66717: PUSH
66718: EMPTY
66719: LIST
66720: LIST
66721: PUSH
66722: LD_INT 4
66724: PUSH
66725: LD_INT 3
66727: PUSH
66728: EMPTY
66729: LIST
66730: LIST
66731: PUSH
66732: LD_INT 4
66734: PUSH
66735: LD_INT 4
66737: PUSH
66738: EMPTY
66739: LIST
66740: LIST
66741: PUSH
66742: LD_INT 3
66744: PUSH
66745: LD_INT 4
66747: PUSH
66748: EMPTY
66749: LIST
66750: LIST
66751: PUSH
66752: LD_INT 5
66754: PUSH
66755: LD_INT 4
66757: PUSH
66758: EMPTY
66759: LIST
66760: LIST
66761: PUSH
66762: LD_INT 5
66764: PUSH
66765: LD_INT 5
66767: PUSH
66768: EMPTY
66769: LIST
66770: LIST
66771: PUSH
66772: LD_INT 4
66774: PUSH
66775: LD_INT 5
66777: PUSH
66778: EMPTY
66779: LIST
66780: LIST
66781: PUSH
66782: LD_INT 6
66784: PUSH
66785: LD_INT 5
66787: PUSH
66788: EMPTY
66789: LIST
66790: LIST
66791: PUSH
66792: LD_INT 6
66794: PUSH
66795: LD_INT 6
66797: PUSH
66798: EMPTY
66799: LIST
66800: LIST
66801: PUSH
66802: LD_INT 5
66804: PUSH
66805: LD_INT 6
66807: PUSH
66808: EMPTY
66809: LIST
66810: LIST
66811: PUSH
66812: EMPTY
66813: LIST
66814: LIST
66815: LIST
66816: LIST
66817: LIST
66818: LIST
66819: LIST
66820: LIST
66821: LIST
66822: LIST
66823: LIST
66824: LIST
66825: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
66826: LD_ADDR_VAR 0 32
66830: PUSH
66831: LD_INT 1
66833: PUSH
66834: LD_INT 3
66836: PUSH
66837: EMPTY
66838: LIST
66839: LIST
66840: PUSH
66841: LD_INT 0
66843: PUSH
66844: LD_INT 3
66846: PUSH
66847: EMPTY
66848: LIST
66849: LIST
66850: PUSH
66851: LD_INT 1
66853: NEG
66854: PUSH
66855: LD_INT 2
66857: PUSH
66858: EMPTY
66859: LIST
66860: LIST
66861: PUSH
66862: LD_INT 1
66864: PUSH
66865: LD_INT 4
66867: PUSH
66868: EMPTY
66869: LIST
66870: LIST
66871: PUSH
66872: LD_INT 0
66874: PUSH
66875: LD_INT 4
66877: PUSH
66878: EMPTY
66879: LIST
66880: LIST
66881: PUSH
66882: LD_INT 1
66884: NEG
66885: PUSH
66886: LD_INT 3
66888: PUSH
66889: EMPTY
66890: LIST
66891: LIST
66892: PUSH
66893: LD_INT 1
66895: PUSH
66896: LD_INT 5
66898: PUSH
66899: EMPTY
66900: LIST
66901: LIST
66902: PUSH
66903: LD_INT 0
66905: PUSH
66906: LD_INT 5
66908: PUSH
66909: EMPTY
66910: LIST
66911: LIST
66912: PUSH
66913: LD_INT 1
66915: NEG
66916: PUSH
66917: LD_INT 4
66919: PUSH
66920: EMPTY
66921: LIST
66922: LIST
66923: PUSH
66924: LD_INT 1
66926: PUSH
66927: LD_INT 6
66929: PUSH
66930: EMPTY
66931: LIST
66932: LIST
66933: PUSH
66934: LD_INT 0
66936: PUSH
66937: LD_INT 6
66939: PUSH
66940: EMPTY
66941: LIST
66942: LIST
66943: PUSH
66944: LD_INT 1
66946: NEG
66947: PUSH
66948: LD_INT 5
66950: PUSH
66951: EMPTY
66952: LIST
66953: LIST
66954: PUSH
66955: EMPTY
66956: LIST
66957: LIST
66958: LIST
66959: LIST
66960: LIST
66961: LIST
66962: LIST
66963: LIST
66964: LIST
66965: LIST
66966: LIST
66967: LIST
66968: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
66969: LD_ADDR_VAR 0 33
66973: PUSH
66974: LD_INT 2
66976: NEG
66977: PUSH
66978: LD_INT 1
66980: PUSH
66981: EMPTY
66982: LIST
66983: LIST
66984: PUSH
66985: LD_INT 3
66987: NEG
66988: PUSH
66989: LD_INT 0
66991: PUSH
66992: EMPTY
66993: LIST
66994: LIST
66995: PUSH
66996: LD_INT 3
66998: NEG
66999: PUSH
67000: LD_INT 1
67002: NEG
67003: PUSH
67004: EMPTY
67005: LIST
67006: LIST
67007: PUSH
67008: LD_INT 3
67010: NEG
67011: PUSH
67012: LD_INT 1
67014: PUSH
67015: EMPTY
67016: LIST
67017: LIST
67018: PUSH
67019: LD_INT 4
67021: NEG
67022: PUSH
67023: LD_INT 0
67025: PUSH
67026: EMPTY
67027: LIST
67028: LIST
67029: PUSH
67030: LD_INT 4
67032: NEG
67033: PUSH
67034: LD_INT 1
67036: NEG
67037: PUSH
67038: EMPTY
67039: LIST
67040: LIST
67041: PUSH
67042: LD_INT 4
67044: NEG
67045: PUSH
67046: LD_INT 1
67048: PUSH
67049: EMPTY
67050: LIST
67051: LIST
67052: PUSH
67053: LD_INT 5
67055: NEG
67056: PUSH
67057: LD_INT 0
67059: PUSH
67060: EMPTY
67061: LIST
67062: LIST
67063: PUSH
67064: LD_INT 5
67066: NEG
67067: PUSH
67068: LD_INT 1
67070: NEG
67071: PUSH
67072: EMPTY
67073: LIST
67074: LIST
67075: PUSH
67076: LD_INT 5
67078: NEG
67079: PUSH
67080: LD_INT 1
67082: PUSH
67083: EMPTY
67084: LIST
67085: LIST
67086: PUSH
67087: LD_INT 6
67089: NEG
67090: PUSH
67091: LD_INT 0
67093: PUSH
67094: EMPTY
67095: LIST
67096: LIST
67097: PUSH
67098: LD_INT 6
67100: NEG
67101: PUSH
67102: LD_INT 1
67104: NEG
67105: PUSH
67106: EMPTY
67107: LIST
67108: LIST
67109: PUSH
67110: EMPTY
67111: LIST
67112: LIST
67113: LIST
67114: LIST
67115: LIST
67116: LIST
67117: LIST
67118: LIST
67119: LIST
67120: LIST
67121: LIST
67122: LIST
67123: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
67124: LD_ADDR_VAR 0 34
67128: PUSH
67129: LD_INT 2
67131: NEG
67132: PUSH
67133: LD_INT 3
67135: NEG
67136: PUSH
67137: EMPTY
67138: LIST
67139: LIST
67140: PUSH
67141: LD_INT 3
67143: NEG
67144: PUSH
67145: LD_INT 2
67147: NEG
67148: PUSH
67149: EMPTY
67150: LIST
67151: LIST
67152: PUSH
67153: LD_INT 3
67155: NEG
67156: PUSH
67157: LD_INT 3
67159: NEG
67160: PUSH
67161: EMPTY
67162: LIST
67163: LIST
67164: PUSH
67165: LD_INT 3
67167: NEG
67168: PUSH
67169: LD_INT 4
67171: NEG
67172: PUSH
67173: EMPTY
67174: LIST
67175: LIST
67176: PUSH
67177: LD_INT 4
67179: NEG
67180: PUSH
67181: LD_INT 3
67183: NEG
67184: PUSH
67185: EMPTY
67186: LIST
67187: LIST
67188: PUSH
67189: LD_INT 4
67191: NEG
67192: PUSH
67193: LD_INT 4
67195: NEG
67196: PUSH
67197: EMPTY
67198: LIST
67199: LIST
67200: PUSH
67201: LD_INT 4
67203: NEG
67204: PUSH
67205: LD_INT 5
67207: NEG
67208: PUSH
67209: EMPTY
67210: LIST
67211: LIST
67212: PUSH
67213: LD_INT 5
67215: NEG
67216: PUSH
67217: LD_INT 4
67219: NEG
67220: PUSH
67221: EMPTY
67222: LIST
67223: LIST
67224: PUSH
67225: LD_INT 5
67227: NEG
67228: PUSH
67229: LD_INT 5
67231: NEG
67232: PUSH
67233: EMPTY
67234: LIST
67235: LIST
67236: PUSH
67237: LD_INT 5
67239: NEG
67240: PUSH
67241: LD_INT 6
67243: NEG
67244: PUSH
67245: EMPTY
67246: LIST
67247: LIST
67248: PUSH
67249: LD_INT 6
67251: NEG
67252: PUSH
67253: LD_INT 5
67255: NEG
67256: PUSH
67257: EMPTY
67258: LIST
67259: LIST
67260: PUSH
67261: LD_INT 6
67263: NEG
67264: PUSH
67265: LD_INT 6
67267: NEG
67268: PUSH
67269: EMPTY
67270: LIST
67271: LIST
67272: PUSH
67273: EMPTY
67274: LIST
67275: LIST
67276: LIST
67277: LIST
67278: LIST
67279: LIST
67280: LIST
67281: LIST
67282: LIST
67283: LIST
67284: LIST
67285: LIST
67286: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
67287: LD_ADDR_VAR 0 41
67291: PUSH
67292: LD_INT 0
67294: PUSH
67295: LD_INT 2
67297: NEG
67298: PUSH
67299: EMPTY
67300: LIST
67301: LIST
67302: PUSH
67303: LD_INT 1
67305: NEG
67306: PUSH
67307: LD_INT 3
67309: NEG
67310: PUSH
67311: EMPTY
67312: LIST
67313: LIST
67314: PUSH
67315: LD_INT 1
67317: PUSH
67318: LD_INT 2
67320: NEG
67321: PUSH
67322: EMPTY
67323: LIST
67324: LIST
67325: PUSH
67326: EMPTY
67327: LIST
67328: LIST
67329: LIST
67330: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
67331: LD_ADDR_VAR 0 42
67335: PUSH
67336: LD_INT 2
67338: PUSH
67339: LD_INT 0
67341: PUSH
67342: EMPTY
67343: LIST
67344: LIST
67345: PUSH
67346: LD_INT 2
67348: PUSH
67349: LD_INT 1
67351: NEG
67352: PUSH
67353: EMPTY
67354: LIST
67355: LIST
67356: PUSH
67357: LD_INT 3
67359: PUSH
67360: LD_INT 1
67362: PUSH
67363: EMPTY
67364: LIST
67365: LIST
67366: PUSH
67367: EMPTY
67368: LIST
67369: LIST
67370: LIST
67371: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
67372: LD_ADDR_VAR 0 43
67376: PUSH
67377: LD_INT 2
67379: PUSH
67380: LD_INT 2
67382: PUSH
67383: EMPTY
67384: LIST
67385: LIST
67386: PUSH
67387: LD_INT 3
67389: PUSH
67390: LD_INT 2
67392: PUSH
67393: EMPTY
67394: LIST
67395: LIST
67396: PUSH
67397: LD_INT 2
67399: PUSH
67400: LD_INT 3
67402: PUSH
67403: EMPTY
67404: LIST
67405: LIST
67406: PUSH
67407: EMPTY
67408: LIST
67409: LIST
67410: LIST
67411: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
67412: LD_ADDR_VAR 0 44
67416: PUSH
67417: LD_INT 0
67419: PUSH
67420: LD_INT 2
67422: PUSH
67423: EMPTY
67424: LIST
67425: LIST
67426: PUSH
67427: LD_INT 1
67429: PUSH
67430: LD_INT 3
67432: PUSH
67433: EMPTY
67434: LIST
67435: LIST
67436: PUSH
67437: LD_INT 1
67439: NEG
67440: PUSH
67441: LD_INT 2
67443: PUSH
67444: EMPTY
67445: LIST
67446: LIST
67447: PUSH
67448: EMPTY
67449: LIST
67450: LIST
67451: LIST
67452: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67453: LD_ADDR_VAR 0 45
67457: PUSH
67458: LD_INT 2
67460: NEG
67461: PUSH
67462: LD_INT 0
67464: PUSH
67465: EMPTY
67466: LIST
67467: LIST
67468: PUSH
67469: LD_INT 2
67471: NEG
67472: PUSH
67473: LD_INT 1
67475: PUSH
67476: EMPTY
67477: LIST
67478: LIST
67479: PUSH
67480: LD_INT 3
67482: NEG
67483: PUSH
67484: LD_INT 1
67486: NEG
67487: PUSH
67488: EMPTY
67489: LIST
67490: LIST
67491: PUSH
67492: EMPTY
67493: LIST
67494: LIST
67495: LIST
67496: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
67497: LD_ADDR_VAR 0 46
67501: PUSH
67502: LD_INT 2
67504: NEG
67505: PUSH
67506: LD_INT 2
67508: NEG
67509: PUSH
67510: EMPTY
67511: LIST
67512: LIST
67513: PUSH
67514: LD_INT 2
67516: NEG
67517: PUSH
67518: LD_INT 3
67520: NEG
67521: PUSH
67522: EMPTY
67523: LIST
67524: LIST
67525: PUSH
67526: LD_INT 3
67528: NEG
67529: PUSH
67530: LD_INT 2
67532: NEG
67533: PUSH
67534: EMPTY
67535: LIST
67536: LIST
67537: PUSH
67538: EMPTY
67539: LIST
67540: LIST
67541: LIST
67542: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
67543: LD_ADDR_VAR 0 47
67547: PUSH
67548: LD_INT 2
67550: NEG
67551: PUSH
67552: LD_INT 3
67554: NEG
67555: PUSH
67556: EMPTY
67557: LIST
67558: LIST
67559: PUSH
67560: LD_INT 1
67562: NEG
67563: PUSH
67564: LD_INT 3
67566: NEG
67567: PUSH
67568: EMPTY
67569: LIST
67570: LIST
67571: PUSH
67572: EMPTY
67573: LIST
67574: LIST
67575: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
67576: LD_ADDR_VAR 0 48
67580: PUSH
67581: LD_INT 1
67583: PUSH
67584: LD_INT 2
67586: NEG
67587: PUSH
67588: EMPTY
67589: LIST
67590: LIST
67591: PUSH
67592: LD_INT 2
67594: PUSH
67595: LD_INT 1
67597: NEG
67598: PUSH
67599: EMPTY
67600: LIST
67601: LIST
67602: PUSH
67603: EMPTY
67604: LIST
67605: LIST
67606: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
67607: LD_ADDR_VAR 0 49
67611: PUSH
67612: LD_INT 3
67614: PUSH
67615: LD_INT 1
67617: PUSH
67618: EMPTY
67619: LIST
67620: LIST
67621: PUSH
67622: LD_INT 3
67624: PUSH
67625: LD_INT 2
67627: PUSH
67628: EMPTY
67629: LIST
67630: LIST
67631: PUSH
67632: EMPTY
67633: LIST
67634: LIST
67635: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
67636: LD_ADDR_VAR 0 50
67640: PUSH
67641: LD_INT 2
67643: PUSH
67644: LD_INT 3
67646: PUSH
67647: EMPTY
67648: LIST
67649: LIST
67650: PUSH
67651: LD_INT 1
67653: PUSH
67654: LD_INT 3
67656: PUSH
67657: EMPTY
67658: LIST
67659: LIST
67660: PUSH
67661: EMPTY
67662: LIST
67663: LIST
67664: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
67665: LD_ADDR_VAR 0 51
67669: PUSH
67670: LD_INT 1
67672: NEG
67673: PUSH
67674: LD_INT 2
67676: PUSH
67677: EMPTY
67678: LIST
67679: LIST
67680: PUSH
67681: LD_INT 2
67683: NEG
67684: PUSH
67685: LD_INT 1
67687: PUSH
67688: EMPTY
67689: LIST
67690: LIST
67691: PUSH
67692: EMPTY
67693: LIST
67694: LIST
67695: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
67696: LD_ADDR_VAR 0 52
67700: PUSH
67701: LD_INT 3
67703: NEG
67704: PUSH
67705: LD_INT 1
67707: NEG
67708: PUSH
67709: EMPTY
67710: LIST
67711: LIST
67712: PUSH
67713: LD_INT 3
67715: NEG
67716: PUSH
67717: LD_INT 2
67719: NEG
67720: PUSH
67721: EMPTY
67722: LIST
67723: LIST
67724: PUSH
67725: EMPTY
67726: LIST
67727: LIST
67728: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67729: LD_ADDR_VAR 0 53
67733: PUSH
67734: LD_INT 1
67736: NEG
67737: PUSH
67738: LD_INT 3
67740: NEG
67741: PUSH
67742: EMPTY
67743: LIST
67744: LIST
67745: PUSH
67746: LD_INT 0
67748: PUSH
67749: LD_INT 3
67751: NEG
67752: PUSH
67753: EMPTY
67754: LIST
67755: LIST
67756: PUSH
67757: LD_INT 1
67759: PUSH
67760: LD_INT 2
67762: NEG
67763: PUSH
67764: EMPTY
67765: LIST
67766: LIST
67767: PUSH
67768: EMPTY
67769: LIST
67770: LIST
67771: LIST
67772: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67773: LD_ADDR_VAR 0 54
67777: PUSH
67778: LD_INT 2
67780: PUSH
67781: LD_INT 1
67783: NEG
67784: PUSH
67785: EMPTY
67786: LIST
67787: LIST
67788: PUSH
67789: LD_INT 3
67791: PUSH
67792: LD_INT 0
67794: PUSH
67795: EMPTY
67796: LIST
67797: LIST
67798: PUSH
67799: LD_INT 3
67801: PUSH
67802: LD_INT 1
67804: PUSH
67805: EMPTY
67806: LIST
67807: LIST
67808: PUSH
67809: EMPTY
67810: LIST
67811: LIST
67812: LIST
67813: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67814: LD_ADDR_VAR 0 55
67818: PUSH
67819: LD_INT 3
67821: PUSH
67822: LD_INT 2
67824: PUSH
67825: EMPTY
67826: LIST
67827: LIST
67828: PUSH
67829: LD_INT 3
67831: PUSH
67832: LD_INT 3
67834: PUSH
67835: EMPTY
67836: LIST
67837: LIST
67838: PUSH
67839: LD_INT 2
67841: PUSH
67842: LD_INT 3
67844: PUSH
67845: EMPTY
67846: LIST
67847: LIST
67848: PUSH
67849: EMPTY
67850: LIST
67851: LIST
67852: LIST
67853: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67854: LD_ADDR_VAR 0 56
67858: PUSH
67859: LD_INT 1
67861: PUSH
67862: LD_INT 3
67864: PUSH
67865: EMPTY
67866: LIST
67867: LIST
67868: PUSH
67869: LD_INT 0
67871: PUSH
67872: LD_INT 3
67874: PUSH
67875: EMPTY
67876: LIST
67877: LIST
67878: PUSH
67879: LD_INT 1
67881: NEG
67882: PUSH
67883: LD_INT 2
67885: PUSH
67886: EMPTY
67887: LIST
67888: LIST
67889: PUSH
67890: EMPTY
67891: LIST
67892: LIST
67893: LIST
67894: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67895: LD_ADDR_VAR 0 57
67899: PUSH
67900: LD_INT 2
67902: NEG
67903: PUSH
67904: LD_INT 1
67906: PUSH
67907: EMPTY
67908: LIST
67909: LIST
67910: PUSH
67911: LD_INT 3
67913: NEG
67914: PUSH
67915: LD_INT 0
67917: PUSH
67918: EMPTY
67919: LIST
67920: LIST
67921: PUSH
67922: LD_INT 3
67924: NEG
67925: PUSH
67926: LD_INT 1
67928: NEG
67929: PUSH
67930: EMPTY
67931: LIST
67932: LIST
67933: PUSH
67934: EMPTY
67935: LIST
67936: LIST
67937: LIST
67938: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67939: LD_ADDR_VAR 0 58
67943: PUSH
67944: LD_INT 2
67946: NEG
67947: PUSH
67948: LD_INT 3
67950: NEG
67951: PUSH
67952: EMPTY
67953: LIST
67954: LIST
67955: PUSH
67956: LD_INT 3
67958: NEG
67959: PUSH
67960: LD_INT 2
67962: NEG
67963: PUSH
67964: EMPTY
67965: LIST
67966: LIST
67967: PUSH
67968: LD_INT 3
67970: NEG
67971: PUSH
67972: LD_INT 3
67974: NEG
67975: PUSH
67976: EMPTY
67977: LIST
67978: LIST
67979: PUSH
67980: EMPTY
67981: LIST
67982: LIST
67983: LIST
67984: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
67985: LD_ADDR_VAR 0 59
67989: PUSH
67990: LD_INT 1
67992: NEG
67993: PUSH
67994: LD_INT 2
67996: NEG
67997: PUSH
67998: EMPTY
67999: LIST
68000: LIST
68001: PUSH
68002: LD_INT 0
68004: PUSH
68005: LD_INT 2
68007: NEG
68008: PUSH
68009: EMPTY
68010: LIST
68011: LIST
68012: PUSH
68013: LD_INT 1
68015: PUSH
68016: LD_INT 1
68018: NEG
68019: PUSH
68020: EMPTY
68021: LIST
68022: LIST
68023: PUSH
68024: EMPTY
68025: LIST
68026: LIST
68027: LIST
68028: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
68029: LD_ADDR_VAR 0 60
68033: PUSH
68034: LD_INT 1
68036: PUSH
68037: LD_INT 1
68039: NEG
68040: PUSH
68041: EMPTY
68042: LIST
68043: LIST
68044: PUSH
68045: LD_INT 2
68047: PUSH
68048: LD_INT 0
68050: PUSH
68051: EMPTY
68052: LIST
68053: LIST
68054: PUSH
68055: LD_INT 2
68057: PUSH
68058: LD_INT 1
68060: PUSH
68061: EMPTY
68062: LIST
68063: LIST
68064: PUSH
68065: EMPTY
68066: LIST
68067: LIST
68068: LIST
68069: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
68070: LD_ADDR_VAR 0 61
68074: PUSH
68075: LD_INT 2
68077: PUSH
68078: LD_INT 1
68080: PUSH
68081: EMPTY
68082: LIST
68083: LIST
68084: PUSH
68085: LD_INT 2
68087: PUSH
68088: LD_INT 2
68090: PUSH
68091: EMPTY
68092: LIST
68093: LIST
68094: PUSH
68095: LD_INT 1
68097: PUSH
68098: LD_INT 2
68100: PUSH
68101: EMPTY
68102: LIST
68103: LIST
68104: PUSH
68105: EMPTY
68106: LIST
68107: LIST
68108: LIST
68109: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
68110: LD_ADDR_VAR 0 62
68114: PUSH
68115: LD_INT 1
68117: PUSH
68118: LD_INT 2
68120: PUSH
68121: EMPTY
68122: LIST
68123: LIST
68124: PUSH
68125: LD_INT 0
68127: PUSH
68128: LD_INT 2
68130: PUSH
68131: EMPTY
68132: LIST
68133: LIST
68134: PUSH
68135: LD_INT 1
68137: NEG
68138: PUSH
68139: LD_INT 1
68141: PUSH
68142: EMPTY
68143: LIST
68144: LIST
68145: PUSH
68146: EMPTY
68147: LIST
68148: LIST
68149: LIST
68150: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
68151: LD_ADDR_VAR 0 63
68155: PUSH
68156: LD_INT 1
68158: NEG
68159: PUSH
68160: LD_INT 1
68162: PUSH
68163: EMPTY
68164: LIST
68165: LIST
68166: PUSH
68167: LD_INT 2
68169: NEG
68170: PUSH
68171: LD_INT 0
68173: PUSH
68174: EMPTY
68175: LIST
68176: LIST
68177: PUSH
68178: LD_INT 2
68180: NEG
68181: PUSH
68182: LD_INT 1
68184: NEG
68185: PUSH
68186: EMPTY
68187: LIST
68188: LIST
68189: PUSH
68190: EMPTY
68191: LIST
68192: LIST
68193: LIST
68194: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68195: LD_ADDR_VAR 0 64
68199: PUSH
68200: LD_INT 1
68202: NEG
68203: PUSH
68204: LD_INT 2
68206: NEG
68207: PUSH
68208: EMPTY
68209: LIST
68210: LIST
68211: PUSH
68212: LD_INT 2
68214: NEG
68215: PUSH
68216: LD_INT 1
68218: NEG
68219: PUSH
68220: EMPTY
68221: LIST
68222: LIST
68223: PUSH
68224: LD_INT 2
68226: NEG
68227: PUSH
68228: LD_INT 2
68230: NEG
68231: PUSH
68232: EMPTY
68233: LIST
68234: LIST
68235: PUSH
68236: EMPTY
68237: LIST
68238: LIST
68239: LIST
68240: ST_TO_ADDR
// end ; 2 :
68241: GO 71507
68243: LD_INT 2
68245: DOUBLE
68246: EQUAL
68247: IFTRUE 68251
68249: GO 71506
68251: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
68252: LD_ADDR_VAR 0 29
68256: PUSH
68257: LD_INT 4
68259: PUSH
68260: LD_INT 0
68262: PUSH
68263: EMPTY
68264: LIST
68265: LIST
68266: PUSH
68267: LD_INT 4
68269: PUSH
68270: LD_INT 1
68272: NEG
68273: PUSH
68274: EMPTY
68275: LIST
68276: LIST
68277: PUSH
68278: LD_INT 5
68280: PUSH
68281: LD_INT 0
68283: PUSH
68284: EMPTY
68285: LIST
68286: LIST
68287: PUSH
68288: LD_INT 5
68290: PUSH
68291: LD_INT 1
68293: PUSH
68294: EMPTY
68295: LIST
68296: LIST
68297: PUSH
68298: LD_INT 4
68300: PUSH
68301: LD_INT 1
68303: PUSH
68304: EMPTY
68305: LIST
68306: LIST
68307: PUSH
68308: LD_INT 3
68310: PUSH
68311: LD_INT 0
68313: PUSH
68314: EMPTY
68315: LIST
68316: LIST
68317: PUSH
68318: LD_INT 3
68320: PUSH
68321: LD_INT 1
68323: NEG
68324: PUSH
68325: EMPTY
68326: LIST
68327: LIST
68328: PUSH
68329: LD_INT 3
68331: PUSH
68332: LD_INT 2
68334: NEG
68335: PUSH
68336: EMPTY
68337: LIST
68338: LIST
68339: PUSH
68340: LD_INT 5
68342: PUSH
68343: LD_INT 2
68345: PUSH
68346: EMPTY
68347: LIST
68348: LIST
68349: PUSH
68350: LD_INT 3
68352: PUSH
68353: LD_INT 3
68355: PUSH
68356: EMPTY
68357: LIST
68358: LIST
68359: PUSH
68360: LD_INT 3
68362: PUSH
68363: LD_INT 2
68365: PUSH
68366: EMPTY
68367: LIST
68368: LIST
68369: PUSH
68370: LD_INT 4
68372: PUSH
68373: LD_INT 3
68375: PUSH
68376: EMPTY
68377: LIST
68378: LIST
68379: PUSH
68380: LD_INT 4
68382: PUSH
68383: LD_INT 4
68385: PUSH
68386: EMPTY
68387: LIST
68388: LIST
68389: PUSH
68390: LD_INT 3
68392: PUSH
68393: LD_INT 4
68395: PUSH
68396: EMPTY
68397: LIST
68398: LIST
68399: PUSH
68400: LD_INT 2
68402: PUSH
68403: LD_INT 3
68405: PUSH
68406: EMPTY
68407: LIST
68408: LIST
68409: PUSH
68410: LD_INT 2
68412: PUSH
68413: LD_INT 2
68415: PUSH
68416: EMPTY
68417: LIST
68418: LIST
68419: PUSH
68420: LD_INT 4
68422: PUSH
68423: LD_INT 2
68425: PUSH
68426: EMPTY
68427: LIST
68428: LIST
68429: PUSH
68430: LD_INT 2
68432: PUSH
68433: LD_INT 4
68435: PUSH
68436: EMPTY
68437: LIST
68438: LIST
68439: PUSH
68440: LD_INT 0
68442: PUSH
68443: LD_INT 4
68445: PUSH
68446: EMPTY
68447: LIST
68448: LIST
68449: PUSH
68450: LD_INT 0
68452: PUSH
68453: LD_INT 3
68455: PUSH
68456: EMPTY
68457: LIST
68458: LIST
68459: PUSH
68460: LD_INT 1
68462: PUSH
68463: LD_INT 4
68465: PUSH
68466: EMPTY
68467: LIST
68468: LIST
68469: PUSH
68470: LD_INT 1
68472: PUSH
68473: LD_INT 5
68475: PUSH
68476: EMPTY
68477: LIST
68478: LIST
68479: PUSH
68480: LD_INT 0
68482: PUSH
68483: LD_INT 5
68485: PUSH
68486: EMPTY
68487: LIST
68488: LIST
68489: PUSH
68490: LD_INT 1
68492: NEG
68493: PUSH
68494: LD_INT 4
68496: PUSH
68497: EMPTY
68498: LIST
68499: LIST
68500: PUSH
68501: LD_INT 1
68503: NEG
68504: PUSH
68505: LD_INT 3
68507: PUSH
68508: EMPTY
68509: LIST
68510: LIST
68511: PUSH
68512: LD_INT 2
68514: PUSH
68515: LD_INT 5
68517: PUSH
68518: EMPTY
68519: LIST
68520: LIST
68521: PUSH
68522: LD_INT 2
68524: NEG
68525: PUSH
68526: LD_INT 3
68528: PUSH
68529: EMPTY
68530: LIST
68531: LIST
68532: PUSH
68533: LD_INT 3
68535: NEG
68536: PUSH
68537: LD_INT 0
68539: PUSH
68540: EMPTY
68541: LIST
68542: LIST
68543: PUSH
68544: LD_INT 3
68546: NEG
68547: PUSH
68548: LD_INT 1
68550: NEG
68551: PUSH
68552: EMPTY
68553: LIST
68554: LIST
68555: PUSH
68556: LD_INT 2
68558: NEG
68559: PUSH
68560: LD_INT 0
68562: PUSH
68563: EMPTY
68564: LIST
68565: LIST
68566: PUSH
68567: LD_INT 2
68569: NEG
68570: PUSH
68571: LD_INT 1
68573: PUSH
68574: EMPTY
68575: LIST
68576: LIST
68577: PUSH
68578: LD_INT 3
68580: NEG
68581: PUSH
68582: LD_INT 1
68584: PUSH
68585: EMPTY
68586: LIST
68587: LIST
68588: PUSH
68589: LD_INT 4
68591: NEG
68592: PUSH
68593: LD_INT 0
68595: PUSH
68596: EMPTY
68597: LIST
68598: LIST
68599: PUSH
68600: LD_INT 4
68602: NEG
68603: PUSH
68604: LD_INT 1
68606: NEG
68607: PUSH
68608: EMPTY
68609: LIST
68610: LIST
68611: PUSH
68612: LD_INT 4
68614: NEG
68615: PUSH
68616: LD_INT 2
68618: NEG
68619: PUSH
68620: EMPTY
68621: LIST
68622: LIST
68623: PUSH
68624: LD_INT 2
68626: NEG
68627: PUSH
68628: LD_INT 2
68630: PUSH
68631: EMPTY
68632: LIST
68633: LIST
68634: PUSH
68635: LD_INT 4
68637: NEG
68638: PUSH
68639: LD_INT 4
68641: NEG
68642: PUSH
68643: EMPTY
68644: LIST
68645: LIST
68646: PUSH
68647: LD_INT 4
68649: NEG
68650: PUSH
68651: LD_INT 5
68653: NEG
68654: PUSH
68655: EMPTY
68656: LIST
68657: LIST
68658: PUSH
68659: LD_INT 3
68661: NEG
68662: PUSH
68663: LD_INT 4
68665: NEG
68666: PUSH
68667: EMPTY
68668: LIST
68669: LIST
68670: PUSH
68671: LD_INT 3
68673: NEG
68674: PUSH
68675: LD_INT 3
68677: NEG
68678: PUSH
68679: EMPTY
68680: LIST
68681: LIST
68682: PUSH
68683: LD_INT 4
68685: NEG
68686: PUSH
68687: LD_INT 3
68689: NEG
68690: PUSH
68691: EMPTY
68692: LIST
68693: LIST
68694: PUSH
68695: LD_INT 5
68697: NEG
68698: PUSH
68699: LD_INT 4
68701: NEG
68702: PUSH
68703: EMPTY
68704: LIST
68705: LIST
68706: PUSH
68707: LD_INT 5
68709: NEG
68710: PUSH
68711: LD_INT 5
68713: NEG
68714: PUSH
68715: EMPTY
68716: LIST
68717: LIST
68718: PUSH
68719: LD_INT 3
68721: NEG
68722: PUSH
68723: LD_INT 5
68725: NEG
68726: PUSH
68727: EMPTY
68728: LIST
68729: LIST
68730: PUSH
68731: LD_INT 5
68733: NEG
68734: PUSH
68735: LD_INT 3
68737: NEG
68738: PUSH
68739: EMPTY
68740: LIST
68741: LIST
68742: PUSH
68743: EMPTY
68744: LIST
68745: LIST
68746: LIST
68747: LIST
68748: LIST
68749: LIST
68750: LIST
68751: LIST
68752: LIST
68753: LIST
68754: LIST
68755: LIST
68756: LIST
68757: LIST
68758: LIST
68759: LIST
68760: LIST
68761: LIST
68762: LIST
68763: LIST
68764: LIST
68765: LIST
68766: LIST
68767: LIST
68768: LIST
68769: LIST
68770: LIST
68771: LIST
68772: LIST
68773: LIST
68774: LIST
68775: LIST
68776: LIST
68777: LIST
68778: LIST
68779: LIST
68780: LIST
68781: LIST
68782: LIST
68783: LIST
68784: LIST
68785: LIST
68786: LIST
68787: LIST
68788: LIST
68789: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
68790: LD_ADDR_VAR 0 30
68794: PUSH
68795: LD_INT 4
68797: PUSH
68798: LD_INT 4
68800: PUSH
68801: EMPTY
68802: LIST
68803: LIST
68804: PUSH
68805: LD_INT 4
68807: PUSH
68808: LD_INT 3
68810: PUSH
68811: EMPTY
68812: LIST
68813: LIST
68814: PUSH
68815: LD_INT 5
68817: PUSH
68818: LD_INT 4
68820: PUSH
68821: EMPTY
68822: LIST
68823: LIST
68824: PUSH
68825: LD_INT 5
68827: PUSH
68828: LD_INT 5
68830: PUSH
68831: EMPTY
68832: LIST
68833: LIST
68834: PUSH
68835: LD_INT 4
68837: PUSH
68838: LD_INT 5
68840: PUSH
68841: EMPTY
68842: LIST
68843: LIST
68844: PUSH
68845: LD_INT 3
68847: PUSH
68848: LD_INT 4
68850: PUSH
68851: EMPTY
68852: LIST
68853: LIST
68854: PUSH
68855: LD_INT 3
68857: PUSH
68858: LD_INT 3
68860: PUSH
68861: EMPTY
68862: LIST
68863: LIST
68864: PUSH
68865: LD_INT 5
68867: PUSH
68868: LD_INT 3
68870: PUSH
68871: EMPTY
68872: LIST
68873: LIST
68874: PUSH
68875: LD_INT 3
68877: PUSH
68878: LD_INT 5
68880: PUSH
68881: EMPTY
68882: LIST
68883: LIST
68884: PUSH
68885: LD_INT 0
68887: PUSH
68888: LD_INT 3
68890: PUSH
68891: EMPTY
68892: LIST
68893: LIST
68894: PUSH
68895: LD_INT 0
68897: PUSH
68898: LD_INT 2
68900: PUSH
68901: EMPTY
68902: LIST
68903: LIST
68904: PUSH
68905: LD_INT 1
68907: PUSH
68908: LD_INT 3
68910: PUSH
68911: EMPTY
68912: LIST
68913: LIST
68914: PUSH
68915: LD_INT 1
68917: PUSH
68918: LD_INT 4
68920: PUSH
68921: EMPTY
68922: LIST
68923: LIST
68924: PUSH
68925: LD_INT 0
68927: PUSH
68928: LD_INT 4
68930: PUSH
68931: EMPTY
68932: LIST
68933: LIST
68934: PUSH
68935: LD_INT 1
68937: NEG
68938: PUSH
68939: LD_INT 3
68941: PUSH
68942: EMPTY
68943: LIST
68944: LIST
68945: PUSH
68946: LD_INT 1
68948: NEG
68949: PUSH
68950: LD_INT 2
68952: PUSH
68953: EMPTY
68954: LIST
68955: LIST
68956: PUSH
68957: LD_INT 2
68959: PUSH
68960: LD_INT 4
68962: PUSH
68963: EMPTY
68964: LIST
68965: LIST
68966: PUSH
68967: LD_INT 2
68969: NEG
68970: PUSH
68971: LD_INT 2
68973: PUSH
68974: EMPTY
68975: LIST
68976: LIST
68977: PUSH
68978: LD_INT 4
68980: NEG
68981: PUSH
68982: LD_INT 0
68984: PUSH
68985: EMPTY
68986: LIST
68987: LIST
68988: PUSH
68989: LD_INT 4
68991: NEG
68992: PUSH
68993: LD_INT 1
68995: NEG
68996: PUSH
68997: EMPTY
68998: LIST
68999: LIST
69000: PUSH
69001: LD_INT 3
69003: NEG
69004: PUSH
69005: LD_INT 0
69007: PUSH
69008: EMPTY
69009: LIST
69010: LIST
69011: PUSH
69012: LD_INT 3
69014: NEG
69015: PUSH
69016: LD_INT 1
69018: PUSH
69019: EMPTY
69020: LIST
69021: LIST
69022: PUSH
69023: LD_INT 4
69025: NEG
69026: PUSH
69027: LD_INT 1
69029: PUSH
69030: EMPTY
69031: LIST
69032: LIST
69033: PUSH
69034: LD_INT 5
69036: NEG
69037: PUSH
69038: LD_INT 0
69040: PUSH
69041: EMPTY
69042: LIST
69043: LIST
69044: PUSH
69045: LD_INT 5
69047: NEG
69048: PUSH
69049: LD_INT 1
69051: NEG
69052: PUSH
69053: EMPTY
69054: LIST
69055: LIST
69056: PUSH
69057: LD_INT 5
69059: NEG
69060: PUSH
69061: LD_INT 2
69063: NEG
69064: PUSH
69065: EMPTY
69066: LIST
69067: LIST
69068: PUSH
69069: LD_INT 3
69071: NEG
69072: PUSH
69073: LD_INT 2
69075: PUSH
69076: EMPTY
69077: LIST
69078: LIST
69079: PUSH
69080: LD_INT 3
69082: NEG
69083: PUSH
69084: LD_INT 3
69086: NEG
69087: PUSH
69088: EMPTY
69089: LIST
69090: LIST
69091: PUSH
69092: LD_INT 3
69094: NEG
69095: PUSH
69096: LD_INT 4
69098: NEG
69099: PUSH
69100: EMPTY
69101: LIST
69102: LIST
69103: PUSH
69104: LD_INT 2
69106: NEG
69107: PUSH
69108: LD_INT 3
69110: NEG
69111: PUSH
69112: EMPTY
69113: LIST
69114: LIST
69115: PUSH
69116: LD_INT 2
69118: NEG
69119: PUSH
69120: LD_INT 2
69122: NEG
69123: PUSH
69124: EMPTY
69125: LIST
69126: LIST
69127: PUSH
69128: LD_INT 3
69130: NEG
69131: PUSH
69132: LD_INT 2
69134: NEG
69135: PUSH
69136: EMPTY
69137: LIST
69138: LIST
69139: PUSH
69140: LD_INT 4
69142: NEG
69143: PUSH
69144: LD_INT 3
69146: NEG
69147: PUSH
69148: EMPTY
69149: LIST
69150: LIST
69151: PUSH
69152: LD_INT 4
69154: NEG
69155: PUSH
69156: LD_INT 4
69158: NEG
69159: PUSH
69160: EMPTY
69161: LIST
69162: LIST
69163: PUSH
69164: LD_INT 2
69166: NEG
69167: PUSH
69168: LD_INT 4
69170: NEG
69171: PUSH
69172: EMPTY
69173: LIST
69174: LIST
69175: PUSH
69176: LD_INT 4
69178: NEG
69179: PUSH
69180: LD_INT 2
69182: NEG
69183: PUSH
69184: EMPTY
69185: LIST
69186: LIST
69187: PUSH
69188: LD_INT 0
69190: PUSH
69191: LD_INT 4
69193: NEG
69194: PUSH
69195: EMPTY
69196: LIST
69197: LIST
69198: PUSH
69199: LD_INT 0
69201: PUSH
69202: LD_INT 5
69204: NEG
69205: PUSH
69206: EMPTY
69207: LIST
69208: LIST
69209: PUSH
69210: LD_INT 1
69212: PUSH
69213: LD_INT 4
69215: NEG
69216: PUSH
69217: EMPTY
69218: LIST
69219: LIST
69220: PUSH
69221: LD_INT 1
69223: PUSH
69224: LD_INT 3
69226: NEG
69227: PUSH
69228: EMPTY
69229: LIST
69230: LIST
69231: PUSH
69232: LD_INT 0
69234: PUSH
69235: LD_INT 3
69237: NEG
69238: PUSH
69239: EMPTY
69240: LIST
69241: LIST
69242: PUSH
69243: LD_INT 1
69245: NEG
69246: PUSH
69247: LD_INT 4
69249: NEG
69250: PUSH
69251: EMPTY
69252: LIST
69253: LIST
69254: PUSH
69255: LD_INT 1
69257: NEG
69258: PUSH
69259: LD_INT 5
69261: NEG
69262: PUSH
69263: EMPTY
69264: LIST
69265: LIST
69266: PUSH
69267: LD_INT 2
69269: PUSH
69270: LD_INT 3
69272: NEG
69273: PUSH
69274: EMPTY
69275: LIST
69276: LIST
69277: PUSH
69278: LD_INT 2
69280: NEG
69281: PUSH
69282: LD_INT 5
69284: NEG
69285: PUSH
69286: EMPTY
69287: LIST
69288: LIST
69289: PUSH
69290: EMPTY
69291: LIST
69292: LIST
69293: LIST
69294: LIST
69295: LIST
69296: LIST
69297: LIST
69298: LIST
69299: LIST
69300: LIST
69301: LIST
69302: LIST
69303: LIST
69304: LIST
69305: LIST
69306: LIST
69307: LIST
69308: LIST
69309: LIST
69310: LIST
69311: LIST
69312: LIST
69313: LIST
69314: LIST
69315: LIST
69316: LIST
69317: LIST
69318: LIST
69319: LIST
69320: LIST
69321: LIST
69322: LIST
69323: LIST
69324: LIST
69325: LIST
69326: LIST
69327: LIST
69328: LIST
69329: LIST
69330: LIST
69331: LIST
69332: LIST
69333: LIST
69334: LIST
69335: LIST
69336: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
69337: LD_ADDR_VAR 0 31
69341: PUSH
69342: LD_INT 0
69344: PUSH
69345: LD_INT 4
69347: PUSH
69348: EMPTY
69349: LIST
69350: LIST
69351: PUSH
69352: LD_INT 0
69354: PUSH
69355: LD_INT 3
69357: PUSH
69358: EMPTY
69359: LIST
69360: LIST
69361: PUSH
69362: LD_INT 1
69364: PUSH
69365: LD_INT 4
69367: PUSH
69368: EMPTY
69369: LIST
69370: LIST
69371: PUSH
69372: LD_INT 1
69374: PUSH
69375: LD_INT 5
69377: PUSH
69378: EMPTY
69379: LIST
69380: LIST
69381: PUSH
69382: LD_INT 0
69384: PUSH
69385: LD_INT 5
69387: PUSH
69388: EMPTY
69389: LIST
69390: LIST
69391: PUSH
69392: LD_INT 1
69394: NEG
69395: PUSH
69396: LD_INT 4
69398: PUSH
69399: EMPTY
69400: LIST
69401: LIST
69402: PUSH
69403: LD_INT 1
69405: NEG
69406: PUSH
69407: LD_INT 3
69409: PUSH
69410: EMPTY
69411: LIST
69412: LIST
69413: PUSH
69414: LD_INT 2
69416: PUSH
69417: LD_INT 5
69419: PUSH
69420: EMPTY
69421: LIST
69422: LIST
69423: PUSH
69424: LD_INT 2
69426: NEG
69427: PUSH
69428: LD_INT 3
69430: PUSH
69431: EMPTY
69432: LIST
69433: LIST
69434: PUSH
69435: LD_INT 3
69437: NEG
69438: PUSH
69439: LD_INT 0
69441: PUSH
69442: EMPTY
69443: LIST
69444: LIST
69445: PUSH
69446: LD_INT 3
69448: NEG
69449: PUSH
69450: LD_INT 1
69452: NEG
69453: PUSH
69454: EMPTY
69455: LIST
69456: LIST
69457: PUSH
69458: LD_INT 2
69460: NEG
69461: PUSH
69462: LD_INT 0
69464: PUSH
69465: EMPTY
69466: LIST
69467: LIST
69468: PUSH
69469: LD_INT 2
69471: NEG
69472: PUSH
69473: LD_INT 1
69475: PUSH
69476: EMPTY
69477: LIST
69478: LIST
69479: PUSH
69480: LD_INT 3
69482: NEG
69483: PUSH
69484: LD_INT 1
69486: PUSH
69487: EMPTY
69488: LIST
69489: LIST
69490: PUSH
69491: LD_INT 4
69493: NEG
69494: PUSH
69495: LD_INT 0
69497: PUSH
69498: EMPTY
69499: LIST
69500: LIST
69501: PUSH
69502: LD_INT 4
69504: NEG
69505: PUSH
69506: LD_INT 1
69508: NEG
69509: PUSH
69510: EMPTY
69511: LIST
69512: LIST
69513: PUSH
69514: LD_INT 4
69516: NEG
69517: PUSH
69518: LD_INT 2
69520: NEG
69521: PUSH
69522: EMPTY
69523: LIST
69524: LIST
69525: PUSH
69526: LD_INT 2
69528: NEG
69529: PUSH
69530: LD_INT 2
69532: PUSH
69533: EMPTY
69534: LIST
69535: LIST
69536: PUSH
69537: LD_INT 4
69539: NEG
69540: PUSH
69541: LD_INT 4
69543: NEG
69544: PUSH
69545: EMPTY
69546: LIST
69547: LIST
69548: PUSH
69549: LD_INT 4
69551: NEG
69552: PUSH
69553: LD_INT 5
69555: NEG
69556: PUSH
69557: EMPTY
69558: LIST
69559: LIST
69560: PUSH
69561: LD_INT 3
69563: NEG
69564: PUSH
69565: LD_INT 4
69567: NEG
69568: PUSH
69569: EMPTY
69570: LIST
69571: LIST
69572: PUSH
69573: LD_INT 3
69575: NEG
69576: PUSH
69577: LD_INT 3
69579: NEG
69580: PUSH
69581: EMPTY
69582: LIST
69583: LIST
69584: PUSH
69585: LD_INT 4
69587: NEG
69588: PUSH
69589: LD_INT 3
69591: NEG
69592: PUSH
69593: EMPTY
69594: LIST
69595: LIST
69596: PUSH
69597: LD_INT 5
69599: NEG
69600: PUSH
69601: LD_INT 4
69603: NEG
69604: PUSH
69605: EMPTY
69606: LIST
69607: LIST
69608: PUSH
69609: LD_INT 5
69611: NEG
69612: PUSH
69613: LD_INT 5
69615: NEG
69616: PUSH
69617: EMPTY
69618: LIST
69619: LIST
69620: PUSH
69621: LD_INT 3
69623: NEG
69624: PUSH
69625: LD_INT 5
69627: NEG
69628: PUSH
69629: EMPTY
69630: LIST
69631: LIST
69632: PUSH
69633: LD_INT 5
69635: NEG
69636: PUSH
69637: LD_INT 3
69639: NEG
69640: PUSH
69641: EMPTY
69642: LIST
69643: LIST
69644: PUSH
69645: LD_INT 0
69647: PUSH
69648: LD_INT 3
69650: NEG
69651: PUSH
69652: EMPTY
69653: LIST
69654: LIST
69655: PUSH
69656: LD_INT 0
69658: PUSH
69659: LD_INT 4
69661: NEG
69662: PUSH
69663: EMPTY
69664: LIST
69665: LIST
69666: PUSH
69667: LD_INT 1
69669: PUSH
69670: LD_INT 3
69672: NEG
69673: PUSH
69674: EMPTY
69675: LIST
69676: LIST
69677: PUSH
69678: LD_INT 1
69680: PUSH
69681: LD_INT 2
69683: NEG
69684: PUSH
69685: EMPTY
69686: LIST
69687: LIST
69688: PUSH
69689: LD_INT 0
69691: PUSH
69692: LD_INT 2
69694: NEG
69695: PUSH
69696: EMPTY
69697: LIST
69698: LIST
69699: PUSH
69700: LD_INT 1
69702: NEG
69703: PUSH
69704: LD_INT 3
69706: NEG
69707: PUSH
69708: EMPTY
69709: LIST
69710: LIST
69711: PUSH
69712: LD_INT 1
69714: NEG
69715: PUSH
69716: LD_INT 4
69718: NEG
69719: PUSH
69720: EMPTY
69721: LIST
69722: LIST
69723: PUSH
69724: LD_INT 2
69726: PUSH
69727: LD_INT 2
69729: NEG
69730: PUSH
69731: EMPTY
69732: LIST
69733: LIST
69734: PUSH
69735: LD_INT 2
69737: NEG
69738: PUSH
69739: LD_INT 4
69741: NEG
69742: PUSH
69743: EMPTY
69744: LIST
69745: LIST
69746: PUSH
69747: LD_INT 4
69749: PUSH
69750: LD_INT 0
69752: PUSH
69753: EMPTY
69754: LIST
69755: LIST
69756: PUSH
69757: LD_INT 4
69759: PUSH
69760: LD_INT 1
69762: NEG
69763: PUSH
69764: EMPTY
69765: LIST
69766: LIST
69767: PUSH
69768: LD_INT 5
69770: PUSH
69771: LD_INT 0
69773: PUSH
69774: EMPTY
69775: LIST
69776: LIST
69777: PUSH
69778: LD_INT 5
69780: PUSH
69781: LD_INT 1
69783: PUSH
69784: EMPTY
69785: LIST
69786: LIST
69787: PUSH
69788: LD_INT 4
69790: PUSH
69791: LD_INT 1
69793: PUSH
69794: EMPTY
69795: LIST
69796: LIST
69797: PUSH
69798: LD_INT 3
69800: PUSH
69801: LD_INT 0
69803: PUSH
69804: EMPTY
69805: LIST
69806: LIST
69807: PUSH
69808: LD_INT 3
69810: PUSH
69811: LD_INT 1
69813: NEG
69814: PUSH
69815: EMPTY
69816: LIST
69817: LIST
69818: PUSH
69819: LD_INT 3
69821: PUSH
69822: LD_INT 2
69824: NEG
69825: PUSH
69826: EMPTY
69827: LIST
69828: LIST
69829: PUSH
69830: LD_INT 5
69832: PUSH
69833: LD_INT 2
69835: PUSH
69836: EMPTY
69837: LIST
69838: LIST
69839: PUSH
69840: EMPTY
69841: LIST
69842: LIST
69843: LIST
69844: LIST
69845: LIST
69846: LIST
69847: LIST
69848: LIST
69849: LIST
69850: LIST
69851: LIST
69852: LIST
69853: LIST
69854: LIST
69855: LIST
69856: LIST
69857: LIST
69858: LIST
69859: LIST
69860: LIST
69861: LIST
69862: LIST
69863: LIST
69864: LIST
69865: LIST
69866: LIST
69867: LIST
69868: LIST
69869: LIST
69870: LIST
69871: LIST
69872: LIST
69873: LIST
69874: LIST
69875: LIST
69876: LIST
69877: LIST
69878: LIST
69879: LIST
69880: LIST
69881: LIST
69882: LIST
69883: LIST
69884: LIST
69885: LIST
69886: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
69887: LD_ADDR_VAR 0 32
69891: PUSH
69892: LD_INT 4
69894: NEG
69895: PUSH
69896: LD_INT 0
69898: PUSH
69899: EMPTY
69900: LIST
69901: LIST
69902: PUSH
69903: LD_INT 4
69905: NEG
69906: PUSH
69907: LD_INT 1
69909: NEG
69910: PUSH
69911: EMPTY
69912: LIST
69913: LIST
69914: PUSH
69915: LD_INT 3
69917: NEG
69918: PUSH
69919: LD_INT 0
69921: PUSH
69922: EMPTY
69923: LIST
69924: LIST
69925: PUSH
69926: LD_INT 3
69928: NEG
69929: PUSH
69930: LD_INT 1
69932: PUSH
69933: EMPTY
69934: LIST
69935: LIST
69936: PUSH
69937: LD_INT 4
69939: NEG
69940: PUSH
69941: LD_INT 1
69943: PUSH
69944: EMPTY
69945: LIST
69946: LIST
69947: PUSH
69948: LD_INT 5
69950: NEG
69951: PUSH
69952: LD_INT 0
69954: PUSH
69955: EMPTY
69956: LIST
69957: LIST
69958: PUSH
69959: LD_INT 5
69961: NEG
69962: PUSH
69963: LD_INT 1
69965: NEG
69966: PUSH
69967: EMPTY
69968: LIST
69969: LIST
69970: PUSH
69971: LD_INT 5
69973: NEG
69974: PUSH
69975: LD_INT 2
69977: NEG
69978: PUSH
69979: EMPTY
69980: LIST
69981: LIST
69982: PUSH
69983: LD_INT 3
69985: NEG
69986: PUSH
69987: LD_INT 2
69989: PUSH
69990: EMPTY
69991: LIST
69992: LIST
69993: PUSH
69994: LD_INT 3
69996: NEG
69997: PUSH
69998: LD_INT 3
70000: NEG
70001: PUSH
70002: EMPTY
70003: LIST
70004: LIST
70005: PUSH
70006: LD_INT 3
70008: NEG
70009: PUSH
70010: LD_INT 4
70012: NEG
70013: PUSH
70014: EMPTY
70015: LIST
70016: LIST
70017: PUSH
70018: LD_INT 2
70020: NEG
70021: PUSH
70022: LD_INT 3
70024: NEG
70025: PUSH
70026: EMPTY
70027: LIST
70028: LIST
70029: PUSH
70030: LD_INT 2
70032: NEG
70033: PUSH
70034: LD_INT 2
70036: NEG
70037: PUSH
70038: EMPTY
70039: LIST
70040: LIST
70041: PUSH
70042: LD_INT 3
70044: NEG
70045: PUSH
70046: LD_INT 2
70048: NEG
70049: PUSH
70050: EMPTY
70051: LIST
70052: LIST
70053: PUSH
70054: LD_INT 4
70056: NEG
70057: PUSH
70058: LD_INT 3
70060: NEG
70061: PUSH
70062: EMPTY
70063: LIST
70064: LIST
70065: PUSH
70066: LD_INT 4
70068: NEG
70069: PUSH
70070: LD_INT 4
70072: NEG
70073: PUSH
70074: EMPTY
70075: LIST
70076: LIST
70077: PUSH
70078: LD_INT 2
70080: NEG
70081: PUSH
70082: LD_INT 4
70084: NEG
70085: PUSH
70086: EMPTY
70087: LIST
70088: LIST
70089: PUSH
70090: LD_INT 4
70092: NEG
70093: PUSH
70094: LD_INT 2
70096: NEG
70097: PUSH
70098: EMPTY
70099: LIST
70100: LIST
70101: PUSH
70102: LD_INT 0
70104: PUSH
70105: LD_INT 4
70107: NEG
70108: PUSH
70109: EMPTY
70110: LIST
70111: LIST
70112: PUSH
70113: LD_INT 0
70115: PUSH
70116: LD_INT 5
70118: NEG
70119: PUSH
70120: EMPTY
70121: LIST
70122: LIST
70123: PUSH
70124: LD_INT 1
70126: PUSH
70127: LD_INT 4
70129: NEG
70130: PUSH
70131: EMPTY
70132: LIST
70133: LIST
70134: PUSH
70135: LD_INT 1
70137: PUSH
70138: LD_INT 3
70140: NEG
70141: PUSH
70142: EMPTY
70143: LIST
70144: LIST
70145: PUSH
70146: LD_INT 0
70148: PUSH
70149: LD_INT 3
70151: NEG
70152: PUSH
70153: EMPTY
70154: LIST
70155: LIST
70156: PUSH
70157: LD_INT 1
70159: NEG
70160: PUSH
70161: LD_INT 4
70163: NEG
70164: PUSH
70165: EMPTY
70166: LIST
70167: LIST
70168: PUSH
70169: LD_INT 1
70171: NEG
70172: PUSH
70173: LD_INT 5
70175: NEG
70176: PUSH
70177: EMPTY
70178: LIST
70179: LIST
70180: PUSH
70181: LD_INT 2
70183: PUSH
70184: LD_INT 3
70186: NEG
70187: PUSH
70188: EMPTY
70189: LIST
70190: LIST
70191: PUSH
70192: LD_INT 2
70194: NEG
70195: PUSH
70196: LD_INT 5
70198: NEG
70199: PUSH
70200: EMPTY
70201: LIST
70202: LIST
70203: PUSH
70204: LD_INT 3
70206: PUSH
70207: LD_INT 0
70209: PUSH
70210: EMPTY
70211: LIST
70212: LIST
70213: PUSH
70214: LD_INT 3
70216: PUSH
70217: LD_INT 1
70219: NEG
70220: PUSH
70221: EMPTY
70222: LIST
70223: LIST
70224: PUSH
70225: LD_INT 4
70227: PUSH
70228: LD_INT 0
70230: PUSH
70231: EMPTY
70232: LIST
70233: LIST
70234: PUSH
70235: LD_INT 4
70237: PUSH
70238: LD_INT 1
70240: PUSH
70241: EMPTY
70242: LIST
70243: LIST
70244: PUSH
70245: LD_INT 3
70247: PUSH
70248: LD_INT 1
70250: PUSH
70251: EMPTY
70252: LIST
70253: LIST
70254: PUSH
70255: LD_INT 2
70257: PUSH
70258: LD_INT 0
70260: PUSH
70261: EMPTY
70262: LIST
70263: LIST
70264: PUSH
70265: LD_INT 2
70267: PUSH
70268: LD_INT 1
70270: NEG
70271: PUSH
70272: EMPTY
70273: LIST
70274: LIST
70275: PUSH
70276: LD_INT 2
70278: PUSH
70279: LD_INT 2
70281: NEG
70282: PUSH
70283: EMPTY
70284: LIST
70285: LIST
70286: PUSH
70287: LD_INT 4
70289: PUSH
70290: LD_INT 2
70292: PUSH
70293: EMPTY
70294: LIST
70295: LIST
70296: PUSH
70297: LD_INT 4
70299: PUSH
70300: LD_INT 4
70302: PUSH
70303: EMPTY
70304: LIST
70305: LIST
70306: PUSH
70307: LD_INT 4
70309: PUSH
70310: LD_INT 3
70312: PUSH
70313: EMPTY
70314: LIST
70315: LIST
70316: PUSH
70317: LD_INT 5
70319: PUSH
70320: LD_INT 4
70322: PUSH
70323: EMPTY
70324: LIST
70325: LIST
70326: PUSH
70327: LD_INT 5
70329: PUSH
70330: LD_INT 5
70332: PUSH
70333: EMPTY
70334: LIST
70335: LIST
70336: PUSH
70337: LD_INT 4
70339: PUSH
70340: LD_INT 5
70342: PUSH
70343: EMPTY
70344: LIST
70345: LIST
70346: PUSH
70347: LD_INT 3
70349: PUSH
70350: LD_INT 4
70352: PUSH
70353: EMPTY
70354: LIST
70355: LIST
70356: PUSH
70357: LD_INT 3
70359: PUSH
70360: LD_INT 3
70362: PUSH
70363: EMPTY
70364: LIST
70365: LIST
70366: PUSH
70367: LD_INT 5
70369: PUSH
70370: LD_INT 3
70372: PUSH
70373: EMPTY
70374: LIST
70375: LIST
70376: PUSH
70377: LD_INT 3
70379: PUSH
70380: LD_INT 5
70382: PUSH
70383: EMPTY
70384: LIST
70385: LIST
70386: PUSH
70387: EMPTY
70388: LIST
70389: LIST
70390: LIST
70391: LIST
70392: LIST
70393: LIST
70394: LIST
70395: LIST
70396: LIST
70397: LIST
70398: LIST
70399: LIST
70400: LIST
70401: LIST
70402: LIST
70403: LIST
70404: LIST
70405: LIST
70406: LIST
70407: LIST
70408: LIST
70409: LIST
70410: LIST
70411: LIST
70412: LIST
70413: LIST
70414: LIST
70415: LIST
70416: LIST
70417: LIST
70418: LIST
70419: LIST
70420: LIST
70421: LIST
70422: LIST
70423: LIST
70424: LIST
70425: LIST
70426: LIST
70427: LIST
70428: LIST
70429: LIST
70430: LIST
70431: LIST
70432: LIST
70433: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
70434: LD_ADDR_VAR 0 33
70438: PUSH
70439: LD_INT 4
70441: NEG
70442: PUSH
70443: LD_INT 4
70445: NEG
70446: PUSH
70447: EMPTY
70448: LIST
70449: LIST
70450: PUSH
70451: LD_INT 4
70453: NEG
70454: PUSH
70455: LD_INT 5
70457: NEG
70458: PUSH
70459: EMPTY
70460: LIST
70461: LIST
70462: PUSH
70463: LD_INT 3
70465: NEG
70466: PUSH
70467: LD_INT 4
70469: NEG
70470: PUSH
70471: EMPTY
70472: LIST
70473: LIST
70474: PUSH
70475: LD_INT 3
70477: NEG
70478: PUSH
70479: LD_INT 3
70481: NEG
70482: PUSH
70483: EMPTY
70484: LIST
70485: LIST
70486: PUSH
70487: LD_INT 4
70489: NEG
70490: PUSH
70491: LD_INT 3
70493: NEG
70494: PUSH
70495: EMPTY
70496: LIST
70497: LIST
70498: PUSH
70499: LD_INT 5
70501: NEG
70502: PUSH
70503: LD_INT 4
70505: NEG
70506: PUSH
70507: EMPTY
70508: LIST
70509: LIST
70510: PUSH
70511: LD_INT 5
70513: NEG
70514: PUSH
70515: LD_INT 5
70517: NEG
70518: PUSH
70519: EMPTY
70520: LIST
70521: LIST
70522: PUSH
70523: LD_INT 3
70525: NEG
70526: PUSH
70527: LD_INT 5
70529: NEG
70530: PUSH
70531: EMPTY
70532: LIST
70533: LIST
70534: PUSH
70535: LD_INT 5
70537: NEG
70538: PUSH
70539: LD_INT 3
70541: NEG
70542: PUSH
70543: EMPTY
70544: LIST
70545: LIST
70546: PUSH
70547: LD_INT 0
70549: PUSH
70550: LD_INT 3
70552: NEG
70553: PUSH
70554: EMPTY
70555: LIST
70556: LIST
70557: PUSH
70558: LD_INT 0
70560: PUSH
70561: LD_INT 4
70563: NEG
70564: PUSH
70565: EMPTY
70566: LIST
70567: LIST
70568: PUSH
70569: LD_INT 1
70571: PUSH
70572: LD_INT 3
70574: NEG
70575: PUSH
70576: EMPTY
70577: LIST
70578: LIST
70579: PUSH
70580: LD_INT 1
70582: PUSH
70583: LD_INT 2
70585: NEG
70586: PUSH
70587: EMPTY
70588: LIST
70589: LIST
70590: PUSH
70591: LD_INT 0
70593: PUSH
70594: LD_INT 2
70596: NEG
70597: PUSH
70598: EMPTY
70599: LIST
70600: LIST
70601: PUSH
70602: LD_INT 1
70604: NEG
70605: PUSH
70606: LD_INT 3
70608: NEG
70609: PUSH
70610: EMPTY
70611: LIST
70612: LIST
70613: PUSH
70614: LD_INT 1
70616: NEG
70617: PUSH
70618: LD_INT 4
70620: NEG
70621: PUSH
70622: EMPTY
70623: LIST
70624: LIST
70625: PUSH
70626: LD_INT 2
70628: PUSH
70629: LD_INT 2
70631: NEG
70632: PUSH
70633: EMPTY
70634: LIST
70635: LIST
70636: PUSH
70637: LD_INT 2
70639: NEG
70640: PUSH
70641: LD_INT 4
70643: NEG
70644: PUSH
70645: EMPTY
70646: LIST
70647: LIST
70648: PUSH
70649: LD_INT 4
70651: PUSH
70652: LD_INT 0
70654: PUSH
70655: EMPTY
70656: LIST
70657: LIST
70658: PUSH
70659: LD_INT 4
70661: PUSH
70662: LD_INT 1
70664: NEG
70665: PUSH
70666: EMPTY
70667: LIST
70668: LIST
70669: PUSH
70670: LD_INT 5
70672: PUSH
70673: LD_INT 0
70675: PUSH
70676: EMPTY
70677: LIST
70678: LIST
70679: PUSH
70680: LD_INT 5
70682: PUSH
70683: LD_INT 1
70685: PUSH
70686: EMPTY
70687: LIST
70688: LIST
70689: PUSH
70690: LD_INT 4
70692: PUSH
70693: LD_INT 1
70695: PUSH
70696: EMPTY
70697: LIST
70698: LIST
70699: PUSH
70700: LD_INT 3
70702: PUSH
70703: LD_INT 0
70705: PUSH
70706: EMPTY
70707: LIST
70708: LIST
70709: PUSH
70710: LD_INT 3
70712: PUSH
70713: LD_INT 1
70715: NEG
70716: PUSH
70717: EMPTY
70718: LIST
70719: LIST
70720: PUSH
70721: LD_INT 3
70723: PUSH
70724: LD_INT 2
70726: NEG
70727: PUSH
70728: EMPTY
70729: LIST
70730: LIST
70731: PUSH
70732: LD_INT 5
70734: PUSH
70735: LD_INT 2
70737: PUSH
70738: EMPTY
70739: LIST
70740: LIST
70741: PUSH
70742: LD_INT 3
70744: PUSH
70745: LD_INT 3
70747: PUSH
70748: EMPTY
70749: LIST
70750: LIST
70751: PUSH
70752: LD_INT 3
70754: PUSH
70755: LD_INT 2
70757: PUSH
70758: EMPTY
70759: LIST
70760: LIST
70761: PUSH
70762: LD_INT 4
70764: PUSH
70765: LD_INT 3
70767: PUSH
70768: EMPTY
70769: LIST
70770: LIST
70771: PUSH
70772: LD_INT 4
70774: PUSH
70775: LD_INT 4
70777: PUSH
70778: EMPTY
70779: LIST
70780: LIST
70781: PUSH
70782: LD_INT 3
70784: PUSH
70785: LD_INT 4
70787: PUSH
70788: EMPTY
70789: LIST
70790: LIST
70791: PUSH
70792: LD_INT 2
70794: PUSH
70795: LD_INT 3
70797: PUSH
70798: EMPTY
70799: LIST
70800: LIST
70801: PUSH
70802: LD_INT 2
70804: PUSH
70805: LD_INT 2
70807: PUSH
70808: EMPTY
70809: LIST
70810: LIST
70811: PUSH
70812: LD_INT 4
70814: PUSH
70815: LD_INT 2
70817: PUSH
70818: EMPTY
70819: LIST
70820: LIST
70821: PUSH
70822: LD_INT 2
70824: PUSH
70825: LD_INT 4
70827: PUSH
70828: EMPTY
70829: LIST
70830: LIST
70831: PUSH
70832: LD_INT 0
70834: PUSH
70835: LD_INT 4
70837: PUSH
70838: EMPTY
70839: LIST
70840: LIST
70841: PUSH
70842: LD_INT 0
70844: PUSH
70845: LD_INT 3
70847: PUSH
70848: EMPTY
70849: LIST
70850: LIST
70851: PUSH
70852: LD_INT 1
70854: PUSH
70855: LD_INT 4
70857: PUSH
70858: EMPTY
70859: LIST
70860: LIST
70861: PUSH
70862: LD_INT 1
70864: PUSH
70865: LD_INT 5
70867: PUSH
70868: EMPTY
70869: LIST
70870: LIST
70871: PUSH
70872: LD_INT 0
70874: PUSH
70875: LD_INT 5
70877: PUSH
70878: EMPTY
70879: LIST
70880: LIST
70881: PUSH
70882: LD_INT 1
70884: NEG
70885: PUSH
70886: LD_INT 4
70888: PUSH
70889: EMPTY
70890: LIST
70891: LIST
70892: PUSH
70893: LD_INT 1
70895: NEG
70896: PUSH
70897: LD_INT 3
70899: PUSH
70900: EMPTY
70901: LIST
70902: LIST
70903: PUSH
70904: LD_INT 2
70906: PUSH
70907: LD_INT 5
70909: PUSH
70910: EMPTY
70911: LIST
70912: LIST
70913: PUSH
70914: LD_INT 2
70916: NEG
70917: PUSH
70918: LD_INT 3
70920: PUSH
70921: EMPTY
70922: LIST
70923: LIST
70924: PUSH
70925: EMPTY
70926: LIST
70927: LIST
70928: LIST
70929: LIST
70930: LIST
70931: LIST
70932: LIST
70933: LIST
70934: LIST
70935: LIST
70936: LIST
70937: LIST
70938: LIST
70939: LIST
70940: LIST
70941: LIST
70942: LIST
70943: LIST
70944: LIST
70945: LIST
70946: LIST
70947: LIST
70948: LIST
70949: LIST
70950: LIST
70951: LIST
70952: LIST
70953: LIST
70954: LIST
70955: LIST
70956: LIST
70957: LIST
70958: LIST
70959: LIST
70960: LIST
70961: LIST
70962: LIST
70963: LIST
70964: LIST
70965: LIST
70966: LIST
70967: LIST
70968: LIST
70969: LIST
70970: LIST
70971: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
70972: LD_ADDR_VAR 0 34
70976: PUSH
70977: LD_INT 0
70979: PUSH
70980: LD_INT 4
70982: NEG
70983: PUSH
70984: EMPTY
70985: LIST
70986: LIST
70987: PUSH
70988: LD_INT 0
70990: PUSH
70991: LD_INT 5
70993: NEG
70994: PUSH
70995: EMPTY
70996: LIST
70997: LIST
70998: PUSH
70999: LD_INT 1
71001: PUSH
71002: LD_INT 4
71004: NEG
71005: PUSH
71006: EMPTY
71007: LIST
71008: LIST
71009: PUSH
71010: LD_INT 1
71012: PUSH
71013: LD_INT 3
71015: NEG
71016: PUSH
71017: EMPTY
71018: LIST
71019: LIST
71020: PUSH
71021: LD_INT 0
71023: PUSH
71024: LD_INT 3
71026: NEG
71027: PUSH
71028: EMPTY
71029: LIST
71030: LIST
71031: PUSH
71032: LD_INT 1
71034: NEG
71035: PUSH
71036: LD_INT 4
71038: NEG
71039: PUSH
71040: EMPTY
71041: LIST
71042: LIST
71043: PUSH
71044: LD_INT 1
71046: NEG
71047: PUSH
71048: LD_INT 5
71050: NEG
71051: PUSH
71052: EMPTY
71053: LIST
71054: LIST
71055: PUSH
71056: LD_INT 2
71058: PUSH
71059: LD_INT 3
71061: NEG
71062: PUSH
71063: EMPTY
71064: LIST
71065: LIST
71066: PUSH
71067: LD_INT 2
71069: NEG
71070: PUSH
71071: LD_INT 5
71073: NEG
71074: PUSH
71075: EMPTY
71076: LIST
71077: LIST
71078: PUSH
71079: LD_INT 3
71081: PUSH
71082: LD_INT 0
71084: PUSH
71085: EMPTY
71086: LIST
71087: LIST
71088: PUSH
71089: LD_INT 3
71091: PUSH
71092: LD_INT 1
71094: NEG
71095: PUSH
71096: EMPTY
71097: LIST
71098: LIST
71099: PUSH
71100: LD_INT 4
71102: PUSH
71103: LD_INT 0
71105: PUSH
71106: EMPTY
71107: LIST
71108: LIST
71109: PUSH
71110: LD_INT 4
71112: PUSH
71113: LD_INT 1
71115: PUSH
71116: EMPTY
71117: LIST
71118: LIST
71119: PUSH
71120: LD_INT 3
71122: PUSH
71123: LD_INT 1
71125: PUSH
71126: EMPTY
71127: LIST
71128: LIST
71129: PUSH
71130: LD_INT 2
71132: PUSH
71133: LD_INT 0
71135: PUSH
71136: EMPTY
71137: LIST
71138: LIST
71139: PUSH
71140: LD_INT 2
71142: PUSH
71143: LD_INT 1
71145: NEG
71146: PUSH
71147: EMPTY
71148: LIST
71149: LIST
71150: PUSH
71151: LD_INT 2
71153: PUSH
71154: LD_INT 2
71156: NEG
71157: PUSH
71158: EMPTY
71159: LIST
71160: LIST
71161: PUSH
71162: LD_INT 4
71164: PUSH
71165: LD_INT 2
71167: PUSH
71168: EMPTY
71169: LIST
71170: LIST
71171: PUSH
71172: LD_INT 4
71174: PUSH
71175: LD_INT 4
71177: PUSH
71178: EMPTY
71179: LIST
71180: LIST
71181: PUSH
71182: LD_INT 4
71184: PUSH
71185: LD_INT 3
71187: PUSH
71188: EMPTY
71189: LIST
71190: LIST
71191: PUSH
71192: LD_INT 5
71194: PUSH
71195: LD_INT 4
71197: PUSH
71198: EMPTY
71199: LIST
71200: LIST
71201: PUSH
71202: LD_INT 5
71204: PUSH
71205: LD_INT 5
71207: PUSH
71208: EMPTY
71209: LIST
71210: LIST
71211: PUSH
71212: LD_INT 4
71214: PUSH
71215: LD_INT 5
71217: PUSH
71218: EMPTY
71219: LIST
71220: LIST
71221: PUSH
71222: LD_INT 3
71224: PUSH
71225: LD_INT 4
71227: PUSH
71228: EMPTY
71229: LIST
71230: LIST
71231: PUSH
71232: LD_INT 3
71234: PUSH
71235: LD_INT 3
71237: PUSH
71238: EMPTY
71239: LIST
71240: LIST
71241: PUSH
71242: LD_INT 5
71244: PUSH
71245: LD_INT 3
71247: PUSH
71248: EMPTY
71249: LIST
71250: LIST
71251: PUSH
71252: LD_INT 3
71254: PUSH
71255: LD_INT 5
71257: PUSH
71258: EMPTY
71259: LIST
71260: LIST
71261: PUSH
71262: LD_INT 0
71264: PUSH
71265: LD_INT 3
71267: PUSH
71268: EMPTY
71269: LIST
71270: LIST
71271: PUSH
71272: LD_INT 0
71274: PUSH
71275: LD_INT 2
71277: PUSH
71278: EMPTY
71279: LIST
71280: LIST
71281: PUSH
71282: LD_INT 1
71284: PUSH
71285: LD_INT 3
71287: PUSH
71288: EMPTY
71289: LIST
71290: LIST
71291: PUSH
71292: LD_INT 1
71294: PUSH
71295: LD_INT 4
71297: PUSH
71298: EMPTY
71299: LIST
71300: LIST
71301: PUSH
71302: LD_INT 0
71304: PUSH
71305: LD_INT 4
71307: PUSH
71308: EMPTY
71309: LIST
71310: LIST
71311: PUSH
71312: LD_INT 1
71314: NEG
71315: PUSH
71316: LD_INT 3
71318: PUSH
71319: EMPTY
71320: LIST
71321: LIST
71322: PUSH
71323: LD_INT 1
71325: NEG
71326: PUSH
71327: LD_INT 2
71329: PUSH
71330: EMPTY
71331: LIST
71332: LIST
71333: PUSH
71334: LD_INT 2
71336: PUSH
71337: LD_INT 4
71339: PUSH
71340: EMPTY
71341: LIST
71342: LIST
71343: PUSH
71344: LD_INT 2
71346: NEG
71347: PUSH
71348: LD_INT 2
71350: PUSH
71351: EMPTY
71352: LIST
71353: LIST
71354: PUSH
71355: LD_INT 4
71357: NEG
71358: PUSH
71359: LD_INT 0
71361: PUSH
71362: EMPTY
71363: LIST
71364: LIST
71365: PUSH
71366: LD_INT 4
71368: NEG
71369: PUSH
71370: LD_INT 1
71372: NEG
71373: PUSH
71374: EMPTY
71375: LIST
71376: LIST
71377: PUSH
71378: LD_INT 3
71380: NEG
71381: PUSH
71382: LD_INT 0
71384: PUSH
71385: EMPTY
71386: LIST
71387: LIST
71388: PUSH
71389: LD_INT 3
71391: NEG
71392: PUSH
71393: LD_INT 1
71395: PUSH
71396: EMPTY
71397: LIST
71398: LIST
71399: PUSH
71400: LD_INT 4
71402: NEG
71403: PUSH
71404: LD_INT 1
71406: PUSH
71407: EMPTY
71408: LIST
71409: LIST
71410: PUSH
71411: LD_INT 5
71413: NEG
71414: PUSH
71415: LD_INT 0
71417: PUSH
71418: EMPTY
71419: LIST
71420: LIST
71421: PUSH
71422: LD_INT 5
71424: NEG
71425: PUSH
71426: LD_INT 1
71428: NEG
71429: PUSH
71430: EMPTY
71431: LIST
71432: LIST
71433: PUSH
71434: LD_INT 5
71436: NEG
71437: PUSH
71438: LD_INT 2
71440: NEG
71441: PUSH
71442: EMPTY
71443: LIST
71444: LIST
71445: PUSH
71446: LD_INT 3
71448: NEG
71449: PUSH
71450: LD_INT 2
71452: PUSH
71453: EMPTY
71454: LIST
71455: LIST
71456: PUSH
71457: EMPTY
71458: LIST
71459: LIST
71460: LIST
71461: LIST
71462: LIST
71463: LIST
71464: LIST
71465: LIST
71466: LIST
71467: LIST
71468: LIST
71469: LIST
71470: LIST
71471: LIST
71472: LIST
71473: LIST
71474: LIST
71475: LIST
71476: LIST
71477: LIST
71478: LIST
71479: LIST
71480: LIST
71481: LIST
71482: LIST
71483: LIST
71484: LIST
71485: LIST
71486: LIST
71487: LIST
71488: LIST
71489: LIST
71490: LIST
71491: LIST
71492: LIST
71493: LIST
71494: LIST
71495: LIST
71496: LIST
71497: LIST
71498: LIST
71499: LIST
71500: LIST
71501: LIST
71502: LIST
71503: ST_TO_ADDR
// end ; end ;
71504: GO 71507
71506: POP
// case btype of b_depot , b_warehouse :
71507: LD_VAR 0 1
71511: PUSH
71512: LD_INT 0
71514: DOUBLE
71515: EQUAL
71516: IFTRUE 71526
71518: LD_INT 1
71520: DOUBLE
71521: EQUAL
71522: IFTRUE 71526
71524: GO 71727
71526: POP
// case nation of nation_american :
71527: LD_VAR 0 5
71531: PUSH
71532: LD_INT 1
71534: DOUBLE
71535: EQUAL
71536: IFTRUE 71540
71538: GO 71596
71540: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
71541: LD_ADDR_VAR 0 9
71545: PUSH
71546: LD_VAR 0 11
71550: PUSH
71551: LD_VAR 0 12
71555: PUSH
71556: LD_VAR 0 13
71560: PUSH
71561: LD_VAR 0 14
71565: PUSH
71566: LD_VAR 0 15
71570: PUSH
71571: LD_VAR 0 16
71575: PUSH
71576: EMPTY
71577: LIST
71578: LIST
71579: LIST
71580: LIST
71581: LIST
71582: LIST
71583: PUSH
71584: LD_VAR 0 4
71588: PUSH
71589: LD_INT 1
71591: PLUS
71592: ARRAY
71593: ST_TO_ADDR
71594: GO 71725
71596: LD_INT 2
71598: DOUBLE
71599: EQUAL
71600: IFTRUE 71604
71602: GO 71660
71604: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
71605: LD_ADDR_VAR 0 9
71609: PUSH
71610: LD_VAR 0 17
71614: PUSH
71615: LD_VAR 0 18
71619: PUSH
71620: LD_VAR 0 19
71624: PUSH
71625: LD_VAR 0 20
71629: PUSH
71630: LD_VAR 0 21
71634: PUSH
71635: LD_VAR 0 22
71639: PUSH
71640: EMPTY
71641: LIST
71642: LIST
71643: LIST
71644: LIST
71645: LIST
71646: LIST
71647: PUSH
71648: LD_VAR 0 4
71652: PUSH
71653: LD_INT 1
71655: PLUS
71656: ARRAY
71657: ST_TO_ADDR
71658: GO 71725
71660: LD_INT 3
71662: DOUBLE
71663: EQUAL
71664: IFTRUE 71668
71666: GO 71724
71668: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
71669: LD_ADDR_VAR 0 9
71673: PUSH
71674: LD_VAR 0 23
71678: PUSH
71679: LD_VAR 0 24
71683: PUSH
71684: LD_VAR 0 25
71688: PUSH
71689: LD_VAR 0 26
71693: PUSH
71694: LD_VAR 0 27
71698: PUSH
71699: LD_VAR 0 28
71703: PUSH
71704: EMPTY
71705: LIST
71706: LIST
71707: LIST
71708: LIST
71709: LIST
71710: LIST
71711: PUSH
71712: LD_VAR 0 4
71716: PUSH
71717: LD_INT 1
71719: PLUS
71720: ARRAY
71721: ST_TO_ADDR
71722: GO 71725
71724: POP
71725: GO 72280
71727: LD_INT 2
71729: DOUBLE
71730: EQUAL
71731: IFTRUE 71741
71733: LD_INT 3
71735: DOUBLE
71736: EQUAL
71737: IFTRUE 71741
71739: GO 71797
71741: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
71742: LD_ADDR_VAR 0 9
71746: PUSH
71747: LD_VAR 0 29
71751: PUSH
71752: LD_VAR 0 30
71756: PUSH
71757: LD_VAR 0 31
71761: PUSH
71762: LD_VAR 0 32
71766: PUSH
71767: LD_VAR 0 33
71771: PUSH
71772: LD_VAR 0 34
71776: PUSH
71777: EMPTY
71778: LIST
71779: LIST
71780: LIST
71781: LIST
71782: LIST
71783: LIST
71784: PUSH
71785: LD_VAR 0 4
71789: PUSH
71790: LD_INT 1
71792: PLUS
71793: ARRAY
71794: ST_TO_ADDR
71795: GO 72280
71797: LD_INT 16
71799: DOUBLE
71800: EQUAL
71801: IFTRUE 71859
71803: LD_INT 17
71805: DOUBLE
71806: EQUAL
71807: IFTRUE 71859
71809: LD_INT 18
71811: DOUBLE
71812: EQUAL
71813: IFTRUE 71859
71815: LD_INT 19
71817: DOUBLE
71818: EQUAL
71819: IFTRUE 71859
71821: LD_INT 22
71823: DOUBLE
71824: EQUAL
71825: IFTRUE 71859
71827: LD_INT 20
71829: DOUBLE
71830: EQUAL
71831: IFTRUE 71859
71833: LD_INT 21
71835: DOUBLE
71836: EQUAL
71837: IFTRUE 71859
71839: LD_INT 23
71841: DOUBLE
71842: EQUAL
71843: IFTRUE 71859
71845: LD_INT 24
71847: DOUBLE
71848: EQUAL
71849: IFTRUE 71859
71851: LD_INT 25
71853: DOUBLE
71854: EQUAL
71855: IFTRUE 71859
71857: GO 71915
71859: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
71860: LD_ADDR_VAR 0 9
71864: PUSH
71865: LD_VAR 0 35
71869: PUSH
71870: LD_VAR 0 36
71874: PUSH
71875: LD_VAR 0 37
71879: PUSH
71880: LD_VAR 0 38
71884: PUSH
71885: LD_VAR 0 39
71889: PUSH
71890: LD_VAR 0 40
71894: PUSH
71895: EMPTY
71896: LIST
71897: LIST
71898: LIST
71899: LIST
71900: LIST
71901: LIST
71902: PUSH
71903: LD_VAR 0 4
71907: PUSH
71908: LD_INT 1
71910: PLUS
71911: ARRAY
71912: ST_TO_ADDR
71913: GO 72280
71915: LD_INT 6
71917: DOUBLE
71918: EQUAL
71919: IFTRUE 71971
71921: LD_INT 7
71923: DOUBLE
71924: EQUAL
71925: IFTRUE 71971
71927: LD_INT 8
71929: DOUBLE
71930: EQUAL
71931: IFTRUE 71971
71933: LD_INT 13
71935: DOUBLE
71936: EQUAL
71937: IFTRUE 71971
71939: LD_INT 12
71941: DOUBLE
71942: EQUAL
71943: IFTRUE 71971
71945: LD_INT 15
71947: DOUBLE
71948: EQUAL
71949: IFTRUE 71971
71951: LD_INT 11
71953: DOUBLE
71954: EQUAL
71955: IFTRUE 71971
71957: LD_INT 14
71959: DOUBLE
71960: EQUAL
71961: IFTRUE 71971
71963: LD_INT 10
71965: DOUBLE
71966: EQUAL
71967: IFTRUE 71971
71969: GO 72027
71971: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
71972: LD_ADDR_VAR 0 9
71976: PUSH
71977: LD_VAR 0 41
71981: PUSH
71982: LD_VAR 0 42
71986: PUSH
71987: LD_VAR 0 43
71991: PUSH
71992: LD_VAR 0 44
71996: PUSH
71997: LD_VAR 0 45
72001: PUSH
72002: LD_VAR 0 46
72006: PUSH
72007: EMPTY
72008: LIST
72009: LIST
72010: LIST
72011: LIST
72012: LIST
72013: LIST
72014: PUSH
72015: LD_VAR 0 4
72019: PUSH
72020: LD_INT 1
72022: PLUS
72023: ARRAY
72024: ST_TO_ADDR
72025: GO 72280
72027: LD_INT 36
72029: DOUBLE
72030: EQUAL
72031: IFTRUE 72035
72033: GO 72091
72035: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
72036: LD_ADDR_VAR 0 9
72040: PUSH
72041: LD_VAR 0 47
72045: PUSH
72046: LD_VAR 0 48
72050: PUSH
72051: LD_VAR 0 49
72055: PUSH
72056: LD_VAR 0 50
72060: PUSH
72061: LD_VAR 0 51
72065: PUSH
72066: LD_VAR 0 52
72070: PUSH
72071: EMPTY
72072: LIST
72073: LIST
72074: LIST
72075: LIST
72076: LIST
72077: LIST
72078: PUSH
72079: LD_VAR 0 4
72083: PUSH
72084: LD_INT 1
72086: PLUS
72087: ARRAY
72088: ST_TO_ADDR
72089: GO 72280
72091: LD_INT 4
72093: DOUBLE
72094: EQUAL
72095: IFTRUE 72117
72097: LD_INT 5
72099: DOUBLE
72100: EQUAL
72101: IFTRUE 72117
72103: LD_INT 34
72105: DOUBLE
72106: EQUAL
72107: IFTRUE 72117
72109: LD_INT 37
72111: DOUBLE
72112: EQUAL
72113: IFTRUE 72117
72115: GO 72173
72117: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
72118: LD_ADDR_VAR 0 9
72122: PUSH
72123: LD_VAR 0 53
72127: PUSH
72128: LD_VAR 0 54
72132: PUSH
72133: LD_VAR 0 55
72137: PUSH
72138: LD_VAR 0 56
72142: PUSH
72143: LD_VAR 0 57
72147: PUSH
72148: LD_VAR 0 58
72152: PUSH
72153: EMPTY
72154: LIST
72155: LIST
72156: LIST
72157: LIST
72158: LIST
72159: LIST
72160: PUSH
72161: LD_VAR 0 4
72165: PUSH
72166: LD_INT 1
72168: PLUS
72169: ARRAY
72170: ST_TO_ADDR
72171: GO 72280
72173: LD_INT 31
72175: DOUBLE
72176: EQUAL
72177: IFTRUE 72223
72179: LD_INT 32
72181: DOUBLE
72182: EQUAL
72183: IFTRUE 72223
72185: LD_INT 33
72187: DOUBLE
72188: EQUAL
72189: IFTRUE 72223
72191: LD_INT 27
72193: DOUBLE
72194: EQUAL
72195: IFTRUE 72223
72197: LD_INT 26
72199: DOUBLE
72200: EQUAL
72201: IFTRUE 72223
72203: LD_INT 28
72205: DOUBLE
72206: EQUAL
72207: IFTRUE 72223
72209: LD_INT 29
72211: DOUBLE
72212: EQUAL
72213: IFTRUE 72223
72215: LD_INT 30
72217: DOUBLE
72218: EQUAL
72219: IFTRUE 72223
72221: GO 72279
72223: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
72224: LD_ADDR_VAR 0 9
72228: PUSH
72229: LD_VAR 0 59
72233: PUSH
72234: LD_VAR 0 60
72238: PUSH
72239: LD_VAR 0 61
72243: PUSH
72244: LD_VAR 0 62
72248: PUSH
72249: LD_VAR 0 63
72253: PUSH
72254: LD_VAR 0 64
72258: PUSH
72259: EMPTY
72260: LIST
72261: LIST
72262: LIST
72263: LIST
72264: LIST
72265: LIST
72266: PUSH
72267: LD_VAR 0 4
72271: PUSH
72272: LD_INT 1
72274: PLUS
72275: ARRAY
72276: ST_TO_ADDR
72277: GO 72280
72279: POP
// temp_list2 = [ ] ;
72280: LD_ADDR_VAR 0 10
72284: PUSH
72285: EMPTY
72286: ST_TO_ADDR
// for i in temp_list do
72287: LD_ADDR_VAR 0 8
72291: PUSH
72292: LD_VAR 0 9
72296: PUSH
72297: FOR_IN
72298: IFFALSE 72350
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
72300: LD_ADDR_VAR 0 10
72304: PUSH
72305: LD_VAR 0 10
72309: PUSH
72310: LD_VAR 0 8
72314: PUSH
72315: LD_INT 1
72317: ARRAY
72318: PUSH
72319: LD_VAR 0 2
72323: PLUS
72324: PUSH
72325: LD_VAR 0 8
72329: PUSH
72330: LD_INT 2
72332: ARRAY
72333: PUSH
72334: LD_VAR 0 3
72338: PLUS
72339: PUSH
72340: EMPTY
72341: LIST
72342: LIST
72343: PUSH
72344: EMPTY
72345: LIST
72346: ADD
72347: ST_TO_ADDR
72348: GO 72297
72350: POP
72351: POP
// result = temp_list2 ;
72352: LD_ADDR_VAR 0 7
72356: PUSH
72357: LD_VAR 0 10
72361: ST_TO_ADDR
// end ;
72362: LD_VAR 0 7
72366: RET
// export function EnemyInRange ( unit , dist ) ; begin
72367: LD_INT 0
72369: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
72370: LD_ADDR_VAR 0 3
72374: PUSH
72375: LD_VAR 0 1
72379: PPUSH
72380: CALL_OW 255
72384: PPUSH
72385: LD_VAR 0 1
72389: PPUSH
72390: CALL_OW 250
72394: PPUSH
72395: LD_VAR 0 1
72399: PPUSH
72400: CALL_OW 251
72404: PPUSH
72405: LD_VAR 0 2
72409: PPUSH
72410: CALL 45769 0 4
72414: PUSH
72415: LD_INT 4
72417: ARRAY
72418: ST_TO_ADDR
// end ;
72419: LD_VAR 0 3
72423: RET
// export function PlayerSeeMe ( unit ) ; begin
72424: LD_INT 0
72426: PPUSH
// result := See ( your_side , unit ) ;
72427: LD_ADDR_VAR 0 2
72431: PUSH
72432: LD_OWVAR 2
72436: PPUSH
72437: LD_VAR 0 1
72441: PPUSH
72442: CALL_OW 292
72446: ST_TO_ADDR
// end ;
72447: LD_VAR 0 2
72451: RET
// export function ReverseDir ( unit ) ; begin
72452: LD_INT 0
72454: PPUSH
// if not unit then
72455: LD_VAR 0 1
72459: NOT
72460: IFFALSE 72464
// exit ;
72462: GO 72487
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
72464: LD_ADDR_VAR 0 2
72468: PUSH
72469: LD_VAR 0 1
72473: PPUSH
72474: CALL_OW 254
72478: PUSH
72479: LD_INT 3
72481: PLUS
72482: PUSH
72483: LD_INT 6
72485: MOD
72486: ST_TO_ADDR
// end ;
72487: LD_VAR 0 2
72491: RET
// export function ReverseArray ( array ) ; var i ; begin
72492: LD_INT 0
72494: PPUSH
72495: PPUSH
// if not array then
72496: LD_VAR 0 1
72500: NOT
72501: IFFALSE 72505
// exit ;
72503: GO 72560
// result := [ ] ;
72505: LD_ADDR_VAR 0 2
72509: PUSH
72510: EMPTY
72511: ST_TO_ADDR
// for i := array downto 1 do
72512: LD_ADDR_VAR 0 3
72516: PUSH
72517: DOUBLE
72518: LD_VAR 0 1
72522: INC
72523: ST_TO_ADDR
72524: LD_INT 1
72526: PUSH
72527: FOR_DOWNTO
72528: IFFALSE 72558
// result := Join ( result , array [ i ] ) ;
72530: LD_ADDR_VAR 0 2
72534: PUSH
72535: LD_VAR 0 2
72539: PPUSH
72540: LD_VAR 0 1
72544: PUSH
72545: LD_VAR 0 3
72549: ARRAY
72550: PPUSH
72551: CALL 77204 0 2
72555: ST_TO_ADDR
72556: GO 72527
72558: POP
72559: POP
// end ;
72560: LD_VAR 0 2
72564: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
72565: LD_INT 0
72567: PPUSH
72568: PPUSH
72569: PPUSH
72570: PPUSH
72571: PPUSH
72572: PPUSH
// if not unit or not hexes then
72573: LD_VAR 0 1
72577: NOT
72578: PUSH
72579: LD_VAR 0 2
72583: NOT
72584: OR
72585: IFFALSE 72589
// exit ;
72587: GO 72712
// dist := 9999 ;
72589: LD_ADDR_VAR 0 5
72593: PUSH
72594: LD_INT 9999
72596: ST_TO_ADDR
// for i = 1 to hexes do
72597: LD_ADDR_VAR 0 4
72601: PUSH
72602: DOUBLE
72603: LD_INT 1
72605: DEC
72606: ST_TO_ADDR
72607: LD_VAR 0 2
72611: PUSH
72612: FOR_TO
72613: IFFALSE 72700
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
72615: LD_ADDR_VAR 0 6
72619: PUSH
72620: LD_VAR 0 1
72624: PPUSH
72625: LD_VAR 0 2
72629: PUSH
72630: LD_VAR 0 4
72634: ARRAY
72635: PUSH
72636: LD_INT 1
72638: ARRAY
72639: PPUSH
72640: LD_VAR 0 2
72644: PUSH
72645: LD_VAR 0 4
72649: ARRAY
72650: PUSH
72651: LD_INT 2
72653: ARRAY
72654: PPUSH
72655: CALL_OW 297
72659: ST_TO_ADDR
// if tdist < dist then
72660: LD_VAR 0 6
72664: PUSH
72665: LD_VAR 0 5
72669: LESS
72670: IFFALSE 72698
// begin hex := hexes [ i ] ;
72672: LD_ADDR_VAR 0 8
72676: PUSH
72677: LD_VAR 0 2
72681: PUSH
72682: LD_VAR 0 4
72686: ARRAY
72687: ST_TO_ADDR
// dist := tdist ;
72688: LD_ADDR_VAR 0 5
72692: PUSH
72693: LD_VAR 0 6
72697: ST_TO_ADDR
// end ; end ;
72698: GO 72612
72700: POP
72701: POP
// result := hex ;
72702: LD_ADDR_VAR 0 3
72706: PUSH
72707: LD_VAR 0 8
72711: ST_TO_ADDR
// end ;
72712: LD_VAR 0 3
72716: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
72717: LD_INT 0
72719: PPUSH
72720: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
72721: LD_VAR 0 1
72725: NOT
72726: PUSH
72727: LD_VAR 0 1
72731: PUSH
72732: LD_INT 21
72734: PUSH
72735: LD_INT 2
72737: PUSH
72738: EMPTY
72739: LIST
72740: LIST
72741: PUSH
72742: LD_INT 23
72744: PUSH
72745: LD_INT 2
72747: PUSH
72748: EMPTY
72749: LIST
72750: LIST
72751: PUSH
72752: EMPTY
72753: LIST
72754: LIST
72755: PPUSH
72756: CALL_OW 69
72760: IN
72761: NOT
72762: OR
72763: IFFALSE 72767
// exit ;
72765: GO 72814
// for i = 1 to 3 do
72767: LD_ADDR_VAR 0 3
72771: PUSH
72772: DOUBLE
72773: LD_INT 1
72775: DEC
72776: ST_TO_ADDR
72777: LD_INT 3
72779: PUSH
72780: FOR_TO
72781: IFFALSE 72812
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
72783: LD_VAR 0 1
72787: PPUSH
72788: CALL_OW 250
72792: PPUSH
72793: LD_VAR 0 1
72797: PPUSH
72798: CALL_OW 251
72802: PPUSH
72803: LD_INT 1
72805: PPUSH
72806: CALL_OW 453
72810: GO 72780
72812: POP
72813: POP
// end ;
72814: LD_VAR 0 2
72818: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
72819: LD_INT 0
72821: PPUSH
72822: PPUSH
72823: PPUSH
72824: PPUSH
72825: PPUSH
72826: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
72827: LD_VAR 0 1
72831: NOT
72832: PUSH
72833: LD_VAR 0 2
72837: NOT
72838: OR
72839: PUSH
72840: LD_VAR 0 1
72844: PPUSH
72845: CALL_OW 314
72849: OR
72850: IFFALSE 72854
// exit ;
72852: GO 73321
// if GetLives ( i ) < 250 then
72854: LD_VAR 0 4
72858: PPUSH
72859: CALL_OW 256
72863: PUSH
72864: LD_INT 250
72866: LESS
72867: IFFALSE 72880
// begin ComAutodestruct ( i ) ;
72869: LD_VAR 0 4
72873: PPUSH
72874: CALL 72717 0 1
// exit ;
72878: GO 73321
// end ; x := GetX ( enemy_unit ) ;
72880: LD_ADDR_VAR 0 7
72884: PUSH
72885: LD_VAR 0 2
72889: PPUSH
72890: CALL_OW 250
72894: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
72895: LD_ADDR_VAR 0 8
72899: PUSH
72900: LD_VAR 0 2
72904: PPUSH
72905: CALL_OW 251
72909: ST_TO_ADDR
// if not x or not y then
72910: LD_VAR 0 7
72914: NOT
72915: PUSH
72916: LD_VAR 0 8
72920: NOT
72921: OR
72922: IFFALSE 72926
// exit ;
72924: GO 73321
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
72926: LD_ADDR_VAR 0 6
72930: PUSH
72931: LD_VAR 0 7
72935: PPUSH
72936: LD_INT 0
72938: PPUSH
72939: LD_INT 4
72941: PPUSH
72942: CALL_OW 272
72946: PUSH
72947: LD_VAR 0 8
72951: PPUSH
72952: LD_INT 0
72954: PPUSH
72955: LD_INT 4
72957: PPUSH
72958: CALL_OW 273
72962: PUSH
72963: EMPTY
72964: LIST
72965: LIST
72966: PUSH
72967: LD_VAR 0 7
72971: PPUSH
72972: LD_INT 1
72974: PPUSH
72975: LD_INT 4
72977: PPUSH
72978: CALL_OW 272
72982: PUSH
72983: LD_VAR 0 8
72987: PPUSH
72988: LD_INT 1
72990: PPUSH
72991: LD_INT 4
72993: PPUSH
72994: CALL_OW 273
72998: PUSH
72999: EMPTY
73000: LIST
73001: LIST
73002: PUSH
73003: LD_VAR 0 7
73007: PPUSH
73008: LD_INT 2
73010: PPUSH
73011: LD_INT 4
73013: PPUSH
73014: CALL_OW 272
73018: PUSH
73019: LD_VAR 0 8
73023: PPUSH
73024: LD_INT 2
73026: PPUSH
73027: LD_INT 4
73029: PPUSH
73030: CALL_OW 273
73034: PUSH
73035: EMPTY
73036: LIST
73037: LIST
73038: PUSH
73039: LD_VAR 0 7
73043: PPUSH
73044: LD_INT 3
73046: PPUSH
73047: LD_INT 4
73049: PPUSH
73050: CALL_OW 272
73054: PUSH
73055: LD_VAR 0 8
73059: PPUSH
73060: LD_INT 3
73062: PPUSH
73063: LD_INT 4
73065: PPUSH
73066: CALL_OW 273
73070: PUSH
73071: EMPTY
73072: LIST
73073: LIST
73074: PUSH
73075: LD_VAR 0 7
73079: PPUSH
73080: LD_INT 4
73082: PPUSH
73083: LD_INT 4
73085: PPUSH
73086: CALL_OW 272
73090: PUSH
73091: LD_VAR 0 8
73095: PPUSH
73096: LD_INT 4
73098: PPUSH
73099: LD_INT 4
73101: PPUSH
73102: CALL_OW 273
73106: PUSH
73107: EMPTY
73108: LIST
73109: LIST
73110: PUSH
73111: LD_VAR 0 7
73115: PPUSH
73116: LD_INT 5
73118: PPUSH
73119: LD_INT 4
73121: PPUSH
73122: CALL_OW 272
73126: PUSH
73127: LD_VAR 0 8
73131: PPUSH
73132: LD_INT 5
73134: PPUSH
73135: LD_INT 4
73137: PPUSH
73138: CALL_OW 273
73142: PUSH
73143: EMPTY
73144: LIST
73145: LIST
73146: PUSH
73147: EMPTY
73148: LIST
73149: LIST
73150: LIST
73151: LIST
73152: LIST
73153: LIST
73154: ST_TO_ADDR
// for i = tmp downto 1 do
73155: LD_ADDR_VAR 0 4
73159: PUSH
73160: DOUBLE
73161: LD_VAR 0 6
73165: INC
73166: ST_TO_ADDR
73167: LD_INT 1
73169: PUSH
73170: FOR_DOWNTO
73171: IFFALSE 73272
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
73173: LD_VAR 0 6
73177: PUSH
73178: LD_VAR 0 4
73182: ARRAY
73183: PUSH
73184: LD_INT 1
73186: ARRAY
73187: PPUSH
73188: LD_VAR 0 6
73192: PUSH
73193: LD_VAR 0 4
73197: ARRAY
73198: PUSH
73199: LD_INT 2
73201: ARRAY
73202: PPUSH
73203: CALL_OW 488
73207: NOT
73208: PUSH
73209: LD_VAR 0 6
73213: PUSH
73214: LD_VAR 0 4
73218: ARRAY
73219: PUSH
73220: LD_INT 1
73222: ARRAY
73223: PPUSH
73224: LD_VAR 0 6
73228: PUSH
73229: LD_VAR 0 4
73233: ARRAY
73234: PUSH
73235: LD_INT 2
73237: ARRAY
73238: PPUSH
73239: CALL_OW 428
73243: PUSH
73244: LD_INT 0
73246: NONEQUAL
73247: OR
73248: IFFALSE 73270
// tmp := Delete ( tmp , i ) ;
73250: LD_ADDR_VAR 0 6
73254: PUSH
73255: LD_VAR 0 6
73259: PPUSH
73260: LD_VAR 0 4
73264: PPUSH
73265: CALL_OW 3
73269: ST_TO_ADDR
73270: GO 73170
73272: POP
73273: POP
// j := GetClosestHex ( unit , tmp ) ;
73274: LD_ADDR_VAR 0 5
73278: PUSH
73279: LD_VAR 0 1
73283: PPUSH
73284: LD_VAR 0 6
73288: PPUSH
73289: CALL 72565 0 2
73293: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
73294: LD_VAR 0 1
73298: PPUSH
73299: LD_VAR 0 5
73303: PUSH
73304: LD_INT 1
73306: ARRAY
73307: PPUSH
73308: LD_VAR 0 5
73312: PUSH
73313: LD_INT 2
73315: ARRAY
73316: PPUSH
73317: CALL_OW 111
// end ;
73321: LD_VAR 0 3
73325: RET
// export function PrepareApemanSoldier ( ) ; begin
73326: LD_INT 0
73328: PPUSH
// uc_nation := 0 ;
73329: LD_ADDR_OWVAR 21
73333: PUSH
73334: LD_INT 0
73336: ST_TO_ADDR
// hc_sex := sex_male ;
73337: LD_ADDR_OWVAR 27
73341: PUSH
73342: LD_INT 1
73344: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
73345: LD_ADDR_OWVAR 28
73349: PUSH
73350: LD_INT 15
73352: ST_TO_ADDR
// hc_gallery :=  ;
73353: LD_ADDR_OWVAR 33
73357: PUSH
73358: LD_STRING 
73360: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73361: LD_ADDR_OWVAR 31
73365: PUSH
73366: LD_INT 0
73368: PPUSH
73369: LD_INT 3
73371: PPUSH
73372: CALL_OW 12
73376: PUSH
73377: LD_INT 0
73379: PPUSH
73380: LD_INT 3
73382: PPUSH
73383: CALL_OW 12
73387: PUSH
73388: LD_INT 0
73390: PUSH
73391: LD_INT 0
73393: PUSH
73394: EMPTY
73395: LIST
73396: LIST
73397: LIST
73398: LIST
73399: ST_TO_ADDR
// end ;
73400: LD_VAR 0 1
73404: RET
// export function PrepareApemanEngineer ( ) ; begin
73405: LD_INT 0
73407: PPUSH
// uc_nation := 0 ;
73408: LD_ADDR_OWVAR 21
73412: PUSH
73413: LD_INT 0
73415: ST_TO_ADDR
// hc_sex := sex_male ;
73416: LD_ADDR_OWVAR 27
73420: PUSH
73421: LD_INT 1
73423: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
73424: LD_ADDR_OWVAR 28
73428: PUSH
73429: LD_INT 16
73431: ST_TO_ADDR
// hc_gallery :=  ;
73432: LD_ADDR_OWVAR 33
73436: PUSH
73437: LD_STRING 
73439: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73440: LD_ADDR_OWVAR 31
73444: PUSH
73445: LD_INT 0
73447: PPUSH
73448: LD_INT 3
73450: PPUSH
73451: CALL_OW 12
73455: PUSH
73456: LD_INT 0
73458: PPUSH
73459: LD_INT 3
73461: PPUSH
73462: CALL_OW 12
73466: PUSH
73467: LD_INT 0
73469: PUSH
73470: LD_INT 0
73472: PUSH
73473: EMPTY
73474: LIST
73475: LIST
73476: LIST
73477: LIST
73478: ST_TO_ADDR
// end ;
73479: LD_VAR 0 1
73483: RET
// export function PrepareApeman ( agressivity ) ; begin
73484: LD_INT 0
73486: PPUSH
// uc_side := 0 ;
73487: LD_ADDR_OWVAR 20
73491: PUSH
73492: LD_INT 0
73494: ST_TO_ADDR
// uc_nation := 0 ;
73495: LD_ADDR_OWVAR 21
73499: PUSH
73500: LD_INT 0
73502: ST_TO_ADDR
// hc_sex := sex_male ;
73503: LD_ADDR_OWVAR 27
73507: PUSH
73508: LD_INT 1
73510: ST_TO_ADDR
// hc_class := class_apeman ;
73511: LD_ADDR_OWVAR 28
73515: PUSH
73516: LD_INT 12
73518: ST_TO_ADDR
// hc_gallery :=  ;
73519: LD_ADDR_OWVAR 33
73523: PUSH
73524: LD_STRING 
73526: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73527: LD_ADDR_OWVAR 35
73531: PUSH
73532: LD_VAR 0 1
73536: NEG
73537: PPUSH
73538: LD_VAR 0 1
73542: PPUSH
73543: CALL_OW 12
73547: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73548: LD_ADDR_OWVAR 31
73552: PUSH
73553: LD_INT 0
73555: PPUSH
73556: LD_INT 3
73558: PPUSH
73559: CALL_OW 12
73563: PUSH
73564: LD_INT 0
73566: PPUSH
73567: LD_INT 3
73569: PPUSH
73570: CALL_OW 12
73574: PUSH
73575: LD_INT 0
73577: PUSH
73578: LD_INT 0
73580: PUSH
73581: EMPTY
73582: LIST
73583: LIST
73584: LIST
73585: LIST
73586: ST_TO_ADDR
// end ;
73587: LD_VAR 0 2
73591: RET
// export function PrepareTiger ( agressivity ) ; begin
73592: LD_INT 0
73594: PPUSH
// uc_side := 0 ;
73595: LD_ADDR_OWVAR 20
73599: PUSH
73600: LD_INT 0
73602: ST_TO_ADDR
// uc_nation := 0 ;
73603: LD_ADDR_OWVAR 21
73607: PUSH
73608: LD_INT 0
73610: ST_TO_ADDR
// hc_class := class_tiger ;
73611: LD_ADDR_OWVAR 28
73615: PUSH
73616: LD_INT 14
73618: ST_TO_ADDR
// hc_gallery :=  ;
73619: LD_ADDR_OWVAR 33
73623: PUSH
73624: LD_STRING 
73626: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73627: LD_ADDR_OWVAR 35
73631: PUSH
73632: LD_VAR 0 1
73636: NEG
73637: PPUSH
73638: LD_VAR 0 1
73642: PPUSH
73643: CALL_OW 12
73647: ST_TO_ADDR
// end ;
73648: LD_VAR 0 2
73652: RET
// export function PrepareEnchidna ( ) ; begin
73653: LD_INT 0
73655: PPUSH
// uc_side := 0 ;
73656: LD_ADDR_OWVAR 20
73660: PUSH
73661: LD_INT 0
73663: ST_TO_ADDR
// uc_nation := 0 ;
73664: LD_ADDR_OWVAR 21
73668: PUSH
73669: LD_INT 0
73671: ST_TO_ADDR
// hc_class := class_baggie ;
73672: LD_ADDR_OWVAR 28
73676: PUSH
73677: LD_INT 13
73679: ST_TO_ADDR
// hc_gallery :=  ;
73680: LD_ADDR_OWVAR 33
73684: PUSH
73685: LD_STRING 
73687: ST_TO_ADDR
// end ;
73688: LD_VAR 0 1
73692: RET
// export function PrepareFrog ( ) ; begin
73693: LD_INT 0
73695: PPUSH
// uc_side := 0 ;
73696: LD_ADDR_OWVAR 20
73700: PUSH
73701: LD_INT 0
73703: ST_TO_ADDR
// uc_nation := 0 ;
73704: LD_ADDR_OWVAR 21
73708: PUSH
73709: LD_INT 0
73711: ST_TO_ADDR
// hc_class := class_frog ;
73712: LD_ADDR_OWVAR 28
73716: PUSH
73717: LD_INT 19
73719: ST_TO_ADDR
// hc_gallery :=  ;
73720: LD_ADDR_OWVAR 33
73724: PUSH
73725: LD_STRING 
73727: ST_TO_ADDR
// end ;
73728: LD_VAR 0 1
73732: RET
// export function PrepareFish ( ) ; begin
73733: LD_INT 0
73735: PPUSH
// uc_side := 0 ;
73736: LD_ADDR_OWVAR 20
73740: PUSH
73741: LD_INT 0
73743: ST_TO_ADDR
// uc_nation := 0 ;
73744: LD_ADDR_OWVAR 21
73748: PUSH
73749: LD_INT 0
73751: ST_TO_ADDR
// hc_class := class_fish ;
73752: LD_ADDR_OWVAR 28
73756: PUSH
73757: LD_INT 20
73759: ST_TO_ADDR
// hc_gallery :=  ;
73760: LD_ADDR_OWVAR 33
73764: PUSH
73765: LD_STRING 
73767: ST_TO_ADDR
// end ;
73768: LD_VAR 0 1
73772: RET
// export function PrepareBird ( ) ; begin
73773: LD_INT 0
73775: PPUSH
// uc_side := 0 ;
73776: LD_ADDR_OWVAR 20
73780: PUSH
73781: LD_INT 0
73783: ST_TO_ADDR
// uc_nation := 0 ;
73784: LD_ADDR_OWVAR 21
73788: PUSH
73789: LD_INT 0
73791: ST_TO_ADDR
// hc_class := class_phororhacos ;
73792: LD_ADDR_OWVAR 28
73796: PUSH
73797: LD_INT 18
73799: ST_TO_ADDR
// hc_gallery :=  ;
73800: LD_ADDR_OWVAR 33
73804: PUSH
73805: LD_STRING 
73807: ST_TO_ADDR
// end ;
73808: LD_VAR 0 1
73812: RET
// export function PrepareHorse ( ) ; begin
73813: LD_INT 0
73815: PPUSH
// uc_side := 0 ;
73816: LD_ADDR_OWVAR 20
73820: PUSH
73821: LD_INT 0
73823: ST_TO_ADDR
// uc_nation := 0 ;
73824: LD_ADDR_OWVAR 21
73828: PUSH
73829: LD_INT 0
73831: ST_TO_ADDR
// hc_class := class_horse ;
73832: LD_ADDR_OWVAR 28
73836: PUSH
73837: LD_INT 21
73839: ST_TO_ADDR
// hc_gallery :=  ;
73840: LD_ADDR_OWVAR 33
73844: PUSH
73845: LD_STRING 
73847: ST_TO_ADDR
// end ;
73848: LD_VAR 0 1
73852: RET
// export function PrepareMastodont ( ) ; begin
73853: LD_INT 0
73855: PPUSH
// uc_side := 0 ;
73856: LD_ADDR_OWVAR 20
73860: PUSH
73861: LD_INT 0
73863: ST_TO_ADDR
// uc_nation := 0 ;
73864: LD_ADDR_OWVAR 21
73868: PUSH
73869: LD_INT 0
73871: ST_TO_ADDR
// vc_chassis := class_mastodont ;
73872: LD_ADDR_OWVAR 37
73876: PUSH
73877: LD_INT 31
73879: ST_TO_ADDR
// vc_control := control_rider ;
73880: LD_ADDR_OWVAR 38
73884: PUSH
73885: LD_INT 4
73887: ST_TO_ADDR
// end ;
73888: LD_VAR 0 1
73892: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
73893: LD_INT 0
73895: PPUSH
73896: PPUSH
73897: PPUSH
// uc_side = 0 ;
73898: LD_ADDR_OWVAR 20
73902: PUSH
73903: LD_INT 0
73905: ST_TO_ADDR
// uc_nation = 0 ;
73906: LD_ADDR_OWVAR 21
73910: PUSH
73911: LD_INT 0
73913: ST_TO_ADDR
// InitHc_All ( ) ;
73914: CALL_OW 584
// InitVc ;
73918: CALL_OW 20
// if mastodonts then
73922: LD_VAR 0 6
73926: IFFALSE 73993
// for i = 1 to mastodonts do
73928: LD_ADDR_VAR 0 11
73932: PUSH
73933: DOUBLE
73934: LD_INT 1
73936: DEC
73937: ST_TO_ADDR
73938: LD_VAR 0 6
73942: PUSH
73943: FOR_TO
73944: IFFALSE 73991
// begin vc_chassis := 31 ;
73946: LD_ADDR_OWVAR 37
73950: PUSH
73951: LD_INT 31
73953: ST_TO_ADDR
// vc_control := control_rider ;
73954: LD_ADDR_OWVAR 38
73958: PUSH
73959: LD_INT 4
73961: ST_TO_ADDR
// animal := CreateVehicle ;
73962: LD_ADDR_VAR 0 12
73966: PUSH
73967: CALL_OW 45
73971: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73972: LD_VAR 0 12
73976: PPUSH
73977: LD_VAR 0 8
73981: PPUSH
73982: LD_INT 0
73984: PPUSH
73985: CALL 76121 0 3
// end ;
73989: GO 73943
73991: POP
73992: POP
// if horses then
73993: LD_VAR 0 5
73997: IFFALSE 74064
// for i = 1 to horses do
73999: LD_ADDR_VAR 0 11
74003: PUSH
74004: DOUBLE
74005: LD_INT 1
74007: DEC
74008: ST_TO_ADDR
74009: LD_VAR 0 5
74013: PUSH
74014: FOR_TO
74015: IFFALSE 74062
// begin hc_class := 21 ;
74017: LD_ADDR_OWVAR 28
74021: PUSH
74022: LD_INT 21
74024: ST_TO_ADDR
// hc_gallery :=  ;
74025: LD_ADDR_OWVAR 33
74029: PUSH
74030: LD_STRING 
74032: ST_TO_ADDR
// animal := CreateHuman ;
74033: LD_ADDR_VAR 0 12
74037: PUSH
74038: CALL_OW 44
74042: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74043: LD_VAR 0 12
74047: PPUSH
74048: LD_VAR 0 8
74052: PPUSH
74053: LD_INT 0
74055: PPUSH
74056: CALL 76121 0 3
// end ;
74060: GO 74014
74062: POP
74063: POP
// if birds then
74064: LD_VAR 0 1
74068: IFFALSE 74135
// for i = 1 to birds do
74070: LD_ADDR_VAR 0 11
74074: PUSH
74075: DOUBLE
74076: LD_INT 1
74078: DEC
74079: ST_TO_ADDR
74080: LD_VAR 0 1
74084: PUSH
74085: FOR_TO
74086: IFFALSE 74133
// begin hc_class = 18 ;
74088: LD_ADDR_OWVAR 28
74092: PUSH
74093: LD_INT 18
74095: ST_TO_ADDR
// hc_gallery =  ;
74096: LD_ADDR_OWVAR 33
74100: PUSH
74101: LD_STRING 
74103: ST_TO_ADDR
// animal := CreateHuman ;
74104: LD_ADDR_VAR 0 12
74108: PUSH
74109: CALL_OW 44
74113: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74114: LD_VAR 0 12
74118: PPUSH
74119: LD_VAR 0 8
74123: PPUSH
74124: LD_INT 0
74126: PPUSH
74127: CALL 76121 0 3
// end ;
74131: GO 74085
74133: POP
74134: POP
// if tigers then
74135: LD_VAR 0 2
74139: IFFALSE 74223
// for i = 1 to tigers do
74141: LD_ADDR_VAR 0 11
74145: PUSH
74146: DOUBLE
74147: LD_INT 1
74149: DEC
74150: ST_TO_ADDR
74151: LD_VAR 0 2
74155: PUSH
74156: FOR_TO
74157: IFFALSE 74221
// begin hc_class = class_tiger ;
74159: LD_ADDR_OWVAR 28
74163: PUSH
74164: LD_INT 14
74166: ST_TO_ADDR
// hc_gallery =  ;
74167: LD_ADDR_OWVAR 33
74171: PUSH
74172: LD_STRING 
74174: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
74175: LD_ADDR_OWVAR 35
74179: PUSH
74180: LD_INT 7
74182: NEG
74183: PPUSH
74184: LD_INT 7
74186: PPUSH
74187: CALL_OW 12
74191: ST_TO_ADDR
// animal := CreateHuman ;
74192: LD_ADDR_VAR 0 12
74196: PUSH
74197: CALL_OW 44
74201: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74202: LD_VAR 0 12
74206: PPUSH
74207: LD_VAR 0 8
74211: PPUSH
74212: LD_INT 0
74214: PPUSH
74215: CALL 76121 0 3
// end ;
74219: GO 74156
74221: POP
74222: POP
// if apemans then
74223: LD_VAR 0 3
74227: IFFALSE 74350
// for i = 1 to apemans do
74229: LD_ADDR_VAR 0 11
74233: PUSH
74234: DOUBLE
74235: LD_INT 1
74237: DEC
74238: ST_TO_ADDR
74239: LD_VAR 0 3
74243: PUSH
74244: FOR_TO
74245: IFFALSE 74348
// begin hc_class = class_apeman ;
74247: LD_ADDR_OWVAR 28
74251: PUSH
74252: LD_INT 12
74254: ST_TO_ADDR
// hc_gallery =  ;
74255: LD_ADDR_OWVAR 33
74259: PUSH
74260: LD_STRING 
74262: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
74263: LD_ADDR_OWVAR 35
74267: PUSH
74268: LD_INT 2
74270: NEG
74271: PPUSH
74272: LD_INT 2
74274: PPUSH
74275: CALL_OW 12
74279: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
74280: LD_ADDR_OWVAR 31
74284: PUSH
74285: LD_INT 1
74287: PPUSH
74288: LD_INT 3
74290: PPUSH
74291: CALL_OW 12
74295: PUSH
74296: LD_INT 1
74298: PPUSH
74299: LD_INT 3
74301: PPUSH
74302: CALL_OW 12
74306: PUSH
74307: LD_INT 0
74309: PUSH
74310: LD_INT 0
74312: PUSH
74313: EMPTY
74314: LIST
74315: LIST
74316: LIST
74317: LIST
74318: ST_TO_ADDR
// animal := CreateHuman ;
74319: LD_ADDR_VAR 0 12
74323: PUSH
74324: CALL_OW 44
74328: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74329: LD_VAR 0 12
74333: PPUSH
74334: LD_VAR 0 8
74338: PPUSH
74339: LD_INT 0
74341: PPUSH
74342: CALL 76121 0 3
// end ;
74346: GO 74244
74348: POP
74349: POP
// if enchidnas then
74350: LD_VAR 0 4
74354: IFFALSE 74421
// for i = 1 to enchidnas do
74356: LD_ADDR_VAR 0 11
74360: PUSH
74361: DOUBLE
74362: LD_INT 1
74364: DEC
74365: ST_TO_ADDR
74366: LD_VAR 0 4
74370: PUSH
74371: FOR_TO
74372: IFFALSE 74419
// begin hc_class = 13 ;
74374: LD_ADDR_OWVAR 28
74378: PUSH
74379: LD_INT 13
74381: ST_TO_ADDR
// hc_gallery =  ;
74382: LD_ADDR_OWVAR 33
74386: PUSH
74387: LD_STRING 
74389: ST_TO_ADDR
// animal := CreateHuman ;
74390: LD_ADDR_VAR 0 12
74394: PUSH
74395: CALL_OW 44
74399: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74400: LD_VAR 0 12
74404: PPUSH
74405: LD_VAR 0 8
74409: PPUSH
74410: LD_INT 0
74412: PPUSH
74413: CALL 76121 0 3
// end ;
74417: GO 74371
74419: POP
74420: POP
// if fishes then
74421: LD_VAR 0 7
74425: IFFALSE 74492
// for i = 1 to fishes do
74427: LD_ADDR_VAR 0 11
74431: PUSH
74432: DOUBLE
74433: LD_INT 1
74435: DEC
74436: ST_TO_ADDR
74437: LD_VAR 0 7
74441: PUSH
74442: FOR_TO
74443: IFFALSE 74490
// begin hc_class = 20 ;
74445: LD_ADDR_OWVAR 28
74449: PUSH
74450: LD_INT 20
74452: ST_TO_ADDR
// hc_gallery =  ;
74453: LD_ADDR_OWVAR 33
74457: PUSH
74458: LD_STRING 
74460: ST_TO_ADDR
// animal := CreateHuman ;
74461: LD_ADDR_VAR 0 12
74465: PUSH
74466: CALL_OW 44
74470: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
74471: LD_VAR 0 12
74475: PPUSH
74476: LD_VAR 0 9
74480: PPUSH
74481: LD_INT 0
74483: PPUSH
74484: CALL 76121 0 3
// end ;
74488: GO 74442
74490: POP
74491: POP
// end ;
74492: LD_VAR 0 10
74496: RET
// export function WantHeal ( sci , unit ) ; begin
74497: LD_INT 0
74499: PPUSH
// if GetTaskList ( sci ) > 0 then
74500: LD_VAR 0 1
74504: PPUSH
74505: CALL_OW 437
74509: PUSH
74510: LD_INT 0
74512: GREATER
74513: IFFALSE 74583
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
74515: LD_VAR 0 1
74519: PPUSH
74520: CALL_OW 437
74524: PUSH
74525: LD_INT 1
74527: ARRAY
74528: PUSH
74529: LD_INT 1
74531: ARRAY
74532: PUSH
74533: LD_STRING l
74535: EQUAL
74536: PUSH
74537: LD_VAR 0 1
74541: PPUSH
74542: CALL_OW 437
74546: PUSH
74547: LD_INT 1
74549: ARRAY
74550: PUSH
74551: LD_INT 4
74553: ARRAY
74554: PUSH
74555: LD_VAR 0 2
74559: EQUAL
74560: AND
74561: IFFALSE 74573
// result := true else
74563: LD_ADDR_VAR 0 3
74567: PUSH
74568: LD_INT 1
74570: ST_TO_ADDR
74571: GO 74581
// result := false ;
74573: LD_ADDR_VAR 0 3
74577: PUSH
74578: LD_INT 0
74580: ST_TO_ADDR
// end else
74581: GO 74591
// result := false ;
74583: LD_ADDR_VAR 0 3
74587: PUSH
74588: LD_INT 0
74590: ST_TO_ADDR
// end ;
74591: LD_VAR 0 3
74595: RET
// export function HealTarget ( sci ) ; begin
74596: LD_INT 0
74598: PPUSH
// if not sci then
74599: LD_VAR 0 1
74603: NOT
74604: IFFALSE 74608
// exit ;
74606: GO 74673
// result := 0 ;
74608: LD_ADDR_VAR 0 2
74612: PUSH
74613: LD_INT 0
74615: ST_TO_ADDR
// if GetTaskList ( sci ) then
74616: LD_VAR 0 1
74620: PPUSH
74621: CALL_OW 437
74625: IFFALSE 74673
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
74627: LD_VAR 0 1
74631: PPUSH
74632: CALL_OW 437
74636: PUSH
74637: LD_INT 1
74639: ARRAY
74640: PUSH
74641: LD_INT 1
74643: ARRAY
74644: PUSH
74645: LD_STRING l
74647: EQUAL
74648: IFFALSE 74673
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
74650: LD_ADDR_VAR 0 2
74654: PUSH
74655: LD_VAR 0 1
74659: PPUSH
74660: CALL_OW 437
74664: PUSH
74665: LD_INT 1
74667: ARRAY
74668: PUSH
74669: LD_INT 4
74671: ARRAY
74672: ST_TO_ADDR
// end ;
74673: LD_VAR 0 2
74677: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
74678: LD_INT 0
74680: PPUSH
74681: PPUSH
74682: PPUSH
74683: PPUSH
// if not base_units then
74684: LD_VAR 0 1
74688: NOT
74689: IFFALSE 74693
// exit ;
74691: GO 74780
// result := false ;
74693: LD_ADDR_VAR 0 2
74697: PUSH
74698: LD_INT 0
74700: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
74701: LD_ADDR_VAR 0 5
74705: PUSH
74706: LD_VAR 0 1
74710: PPUSH
74711: LD_INT 21
74713: PUSH
74714: LD_INT 3
74716: PUSH
74717: EMPTY
74718: LIST
74719: LIST
74720: PPUSH
74721: CALL_OW 72
74725: ST_TO_ADDR
// if not tmp then
74726: LD_VAR 0 5
74730: NOT
74731: IFFALSE 74735
// exit ;
74733: GO 74780
// for i in tmp do
74735: LD_ADDR_VAR 0 3
74739: PUSH
74740: LD_VAR 0 5
74744: PUSH
74745: FOR_IN
74746: IFFALSE 74778
// begin result := EnemyInRange ( i , 22 ) ;
74748: LD_ADDR_VAR 0 2
74752: PUSH
74753: LD_VAR 0 3
74757: PPUSH
74758: LD_INT 22
74760: PPUSH
74761: CALL 72367 0 2
74765: ST_TO_ADDR
// if result then
74766: LD_VAR 0 2
74770: IFFALSE 74776
// exit ;
74772: POP
74773: POP
74774: GO 74780
// end ;
74776: GO 74745
74778: POP
74779: POP
// end ;
74780: LD_VAR 0 2
74784: RET
// export function FilterByTag ( units , tag ) ; begin
74785: LD_INT 0
74787: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
74788: LD_ADDR_VAR 0 3
74792: PUSH
74793: LD_VAR 0 1
74797: PPUSH
74798: LD_INT 120
74800: PUSH
74801: LD_VAR 0 2
74805: PUSH
74806: EMPTY
74807: LIST
74808: LIST
74809: PPUSH
74810: CALL_OW 72
74814: ST_TO_ADDR
// end ;
74815: LD_VAR 0 3
74819: RET
// export function IsDriver ( un ) ; begin
74820: LD_INT 0
74822: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
74823: LD_ADDR_VAR 0 2
74827: PUSH
74828: LD_VAR 0 1
74832: PUSH
74833: LD_INT 55
74835: PUSH
74836: EMPTY
74837: LIST
74838: PPUSH
74839: CALL_OW 69
74843: IN
74844: ST_TO_ADDR
// end ;
74845: LD_VAR 0 2
74849: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
74850: LD_INT 0
74852: PPUSH
74853: PPUSH
// list := [ ] ;
74854: LD_ADDR_VAR 0 5
74858: PUSH
74859: EMPTY
74860: ST_TO_ADDR
// case d of 0 :
74861: LD_VAR 0 3
74865: PUSH
74866: LD_INT 0
74868: DOUBLE
74869: EQUAL
74870: IFTRUE 74874
74872: GO 75007
74874: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
74875: LD_ADDR_VAR 0 5
74879: PUSH
74880: LD_VAR 0 1
74884: PUSH
74885: LD_INT 4
74887: MINUS
74888: PUSH
74889: LD_VAR 0 2
74893: PUSH
74894: LD_INT 4
74896: MINUS
74897: PUSH
74898: LD_INT 2
74900: PUSH
74901: EMPTY
74902: LIST
74903: LIST
74904: LIST
74905: PUSH
74906: LD_VAR 0 1
74910: PUSH
74911: LD_INT 3
74913: MINUS
74914: PUSH
74915: LD_VAR 0 2
74919: PUSH
74920: LD_INT 1
74922: PUSH
74923: EMPTY
74924: LIST
74925: LIST
74926: LIST
74927: PUSH
74928: LD_VAR 0 1
74932: PUSH
74933: LD_INT 4
74935: PLUS
74936: PUSH
74937: LD_VAR 0 2
74941: PUSH
74942: LD_INT 4
74944: PUSH
74945: EMPTY
74946: LIST
74947: LIST
74948: LIST
74949: PUSH
74950: LD_VAR 0 1
74954: PUSH
74955: LD_INT 3
74957: PLUS
74958: PUSH
74959: LD_VAR 0 2
74963: PUSH
74964: LD_INT 3
74966: PLUS
74967: PUSH
74968: LD_INT 5
74970: PUSH
74971: EMPTY
74972: LIST
74973: LIST
74974: LIST
74975: PUSH
74976: LD_VAR 0 1
74980: PUSH
74981: LD_VAR 0 2
74985: PUSH
74986: LD_INT 4
74988: PLUS
74989: PUSH
74990: LD_INT 0
74992: PUSH
74993: EMPTY
74994: LIST
74995: LIST
74996: LIST
74997: PUSH
74998: EMPTY
74999: LIST
75000: LIST
75001: LIST
75002: LIST
75003: LIST
75004: ST_TO_ADDR
// end ; 1 :
75005: GO 75705
75007: LD_INT 1
75009: DOUBLE
75010: EQUAL
75011: IFTRUE 75015
75013: GO 75148
75015: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
75016: LD_ADDR_VAR 0 5
75020: PUSH
75021: LD_VAR 0 1
75025: PUSH
75026: LD_VAR 0 2
75030: PUSH
75031: LD_INT 4
75033: MINUS
75034: PUSH
75035: LD_INT 3
75037: PUSH
75038: EMPTY
75039: LIST
75040: LIST
75041: LIST
75042: PUSH
75043: LD_VAR 0 1
75047: PUSH
75048: LD_INT 3
75050: MINUS
75051: PUSH
75052: LD_VAR 0 2
75056: PUSH
75057: LD_INT 3
75059: MINUS
75060: PUSH
75061: LD_INT 2
75063: PUSH
75064: EMPTY
75065: LIST
75066: LIST
75067: LIST
75068: PUSH
75069: LD_VAR 0 1
75073: PUSH
75074: LD_INT 4
75076: MINUS
75077: PUSH
75078: LD_VAR 0 2
75082: PUSH
75083: LD_INT 1
75085: PUSH
75086: EMPTY
75087: LIST
75088: LIST
75089: LIST
75090: PUSH
75091: LD_VAR 0 1
75095: PUSH
75096: LD_VAR 0 2
75100: PUSH
75101: LD_INT 3
75103: PLUS
75104: PUSH
75105: LD_INT 0
75107: PUSH
75108: EMPTY
75109: LIST
75110: LIST
75111: LIST
75112: PUSH
75113: LD_VAR 0 1
75117: PUSH
75118: LD_INT 4
75120: PLUS
75121: PUSH
75122: LD_VAR 0 2
75126: PUSH
75127: LD_INT 4
75129: PLUS
75130: PUSH
75131: LD_INT 5
75133: PUSH
75134: EMPTY
75135: LIST
75136: LIST
75137: LIST
75138: PUSH
75139: EMPTY
75140: LIST
75141: LIST
75142: LIST
75143: LIST
75144: LIST
75145: ST_TO_ADDR
// end ; 2 :
75146: GO 75705
75148: LD_INT 2
75150: DOUBLE
75151: EQUAL
75152: IFTRUE 75156
75154: GO 75285
75156: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
75157: LD_ADDR_VAR 0 5
75161: PUSH
75162: LD_VAR 0 1
75166: PUSH
75167: LD_VAR 0 2
75171: PUSH
75172: LD_INT 3
75174: MINUS
75175: PUSH
75176: LD_INT 3
75178: PUSH
75179: EMPTY
75180: LIST
75181: LIST
75182: LIST
75183: PUSH
75184: LD_VAR 0 1
75188: PUSH
75189: LD_INT 4
75191: PLUS
75192: PUSH
75193: LD_VAR 0 2
75197: PUSH
75198: LD_INT 4
75200: PUSH
75201: EMPTY
75202: LIST
75203: LIST
75204: LIST
75205: PUSH
75206: LD_VAR 0 1
75210: PUSH
75211: LD_VAR 0 2
75215: PUSH
75216: LD_INT 4
75218: PLUS
75219: PUSH
75220: LD_INT 0
75222: PUSH
75223: EMPTY
75224: LIST
75225: LIST
75226: LIST
75227: PUSH
75228: LD_VAR 0 1
75232: PUSH
75233: LD_INT 3
75235: MINUS
75236: PUSH
75237: LD_VAR 0 2
75241: PUSH
75242: LD_INT 1
75244: PUSH
75245: EMPTY
75246: LIST
75247: LIST
75248: LIST
75249: PUSH
75250: LD_VAR 0 1
75254: PUSH
75255: LD_INT 4
75257: MINUS
75258: PUSH
75259: LD_VAR 0 2
75263: PUSH
75264: LD_INT 4
75266: MINUS
75267: PUSH
75268: LD_INT 2
75270: PUSH
75271: EMPTY
75272: LIST
75273: LIST
75274: LIST
75275: PUSH
75276: EMPTY
75277: LIST
75278: LIST
75279: LIST
75280: LIST
75281: LIST
75282: ST_TO_ADDR
// end ; 3 :
75283: GO 75705
75285: LD_INT 3
75287: DOUBLE
75288: EQUAL
75289: IFTRUE 75293
75291: GO 75426
75293: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
75294: LD_ADDR_VAR 0 5
75298: PUSH
75299: LD_VAR 0 1
75303: PUSH
75304: LD_INT 3
75306: PLUS
75307: PUSH
75308: LD_VAR 0 2
75312: PUSH
75313: LD_INT 4
75315: PUSH
75316: EMPTY
75317: LIST
75318: LIST
75319: LIST
75320: PUSH
75321: LD_VAR 0 1
75325: PUSH
75326: LD_INT 4
75328: PLUS
75329: PUSH
75330: LD_VAR 0 2
75334: PUSH
75335: LD_INT 4
75337: PLUS
75338: PUSH
75339: LD_INT 5
75341: PUSH
75342: EMPTY
75343: LIST
75344: LIST
75345: LIST
75346: PUSH
75347: LD_VAR 0 1
75351: PUSH
75352: LD_INT 4
75354: MINUS
75355: PUSH
75356: LD_VAR 0 2
75360: PUSH
75361: LD_INT 1
75363: PUSH
75364: EMPTY
75365: LIST
75366: LIST
75367: LIST
75368: PUSH
75369: LD_VAR 0 1
75373: PUSH
75374: LD_VAR 0 2
75378: PUSH
75379: LD_INT 4
75381: MINUS
75382: PUSH
75383: LD_INT 3
75385: PUSH
75386: EMPTY
75387: LIST
75388: LIST
75389: LIST
75390: PUSH
75391: LD_VAR 0 1
75395: PUSH
75396: LD_INT 3
75398: MINUS
75399: PUSH
75400: LD_VAR 0 2
75404: PUSH
75405: LD_INT 3
75407: MINUS
75408: PUSH
75409: LD_INT 2
75411: PUSH
75412: EMPTY
75413: LIST
75414: LIST
75415: LIST
75416: PUSH
75417: EMPTY
75418: LIST
75419: LIST
75420: LIST
75421: LIST
75422: LIST
75423: ST_TO_ADDR
// end ; 4 :
75424: GO 75705
75426: LD_INT 4
75428: DOUBLE
75429: EQUAL
75430: IFTRUE 75434
75432: GO 75567
75434: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
75435: LD_ADDR_VAR 0 5
75439: PUSH
75440: LD_VAR 0 1
75444: PUSH
75445: LD_VAR 0 2
75449: PUSH
75450: LD_INT 4
75452: PLUS
75453: PUSH
75454: LD_INT 0
75456: PUSH
75457: EMPTY
75458: LIST
75459: LIST
75460: LIST
75461: PUSH
75462: LD_VAR 0 1
75466: PUSH
75467: LD_INT 3
75469: PLUS
75470: PUSH
75471: LD_VAR 0 2
75475: PUSH
75476: LD_INT 3
75478: PLUS
75479: PUSH
75480: LD_INT 5
75482: PUSH
75483: EMPTY
75484: LIST
75485: LIST
75486: LIST
75487: PUSH
75488: LD_VAR 0 1
75492: PUSH
75493: LD_INT 4
75495: PLUS
75496: PUSH
75497: LD_VAR 0 2
75501: PUSH
75502: LD_INT 4
75504: PUSH
75505: EMPTY
75506: LIST
75507: LIST
75508: LIST
75509: PUSH
75510: LD_VAR 0 1
75514: PUSH
75515: LD_VAR 0 2
75519: PUSH
75520: LD_INT 3
75522: MINUS
75523: PUSH
75524: LD_INT 3
75526: PUSH
75527: EMPTY
75528: LIST
75529: LIST
75530: LIST
75531: PUSH
75532: LD_VAR 0 1
75536: PUSH
75537: LD_INT 4
75539: MINUS
75540: PUSH
75541: LD_VAR 0 2
75545: PUSH
75546: LD_INT 4
75548: MINUS
75549: PUSH
75550: LD_INT 2
75552: PUSH
75553: EMPTY
75554: LIST
75555: LIST
75556: LIST
75557: PUSH
75558: EMPTY
75559: LIST
75560: LIST
75561: LIST
75562: LIST
75563: LIST
75564: ST_TO_ADDR
// end ; 5 :
75565: GO 75705
75567: LD_INT 5
75569: DOUBLE
75570: EQUAL
75571: IFTRUE 75575
75573: GO 75704
75575: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
75576: LD_ADDR_VAR 0 5
75580: PUSH
75581: LD_VAR 0 1
75585: PUSH
75586: LD_INT 4
75588: MINUS
75589: PUSH
75590: LD_VAR 0 2
75594: PUSH
75595: LD_INT 1
75597: PUSH
75598: EMPTY
75599: LIST
75600: LIST
75601: LIST
75602: PUSH
75603: LD_VAR 0 1
75607: PUSH
75608: LD_VAR 0 2
75612: PUSH
75613: LD_INT 4
75615: MINUS
75616: PUSH
75617: LD_INT 3
75619: PUSH
75620: EMPTY
75621: LIST
75622: LIST
75623: LIST
75624: PUSH
75625: LD_VAR 0 1
75629: PUSH
75630: LD_INT 4
75632: PLUS
75633: PUSH
75634: LD_VAR 0 2
75638: PUSH
75639: LD_INT 4
75641: PLUS
75642: PUSH
75643: LD_INT 5
75645: PUSH
75646: EMPTY
75647: LIST
75648: LIST
75649: LIST
75650: PUSH
75651: LD_VAR 0 1
75655: PUSH
75656: LD_INT 3
75658: PLUS
75659: PUSH
75660: LD_VAR 0 2
75664: PUSH
75665: LD_INT 4
75667: PUSH
75668: EMPTY
75669: LIST
75670: LIST
75671: LIST
75672: PUSH
75673: LD_VAR 0 1
75677: PUSH
75678: LD_VAR 0 2
75682: PUSH
75683: LD_INT 3
75685: PLUS
75686: PUSH
75687: LD_INT 0
75689: PUSH
75690: EMPTY
75691: LIST
75692: LIST
75693: LIST
75694: PUSH
75695: EMPTY
75696: LIST
75697: LIST
75698: LIST
75699: LIST
75700: LIST
75701: ST_TO_ADDR
// end ; end ;
75702: GO 75705
75704: POP
// result := list ;
75705: LD_ADDR_VAR 0 4
75709: PUSH
75710: LD_VAR 0 5
75714: ST_TO_ADDR
// end ;
75715: LD_VAR 0 4
75719: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
75720: LD_INT 0
75722: PPUSH
75723: PPUSH
75724: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
75725: LD_VAR 0 1
75729: NOT
75730: PUSH
75731: LD_VAR 0 2
75735: PUSH
75736: LD_INT 1
75738: PUSH
75739: LD_INT 2
75741: PUSH
75742: LD_INT 3
75744: PUSH
75745: LD_INT 4
75747: PUSH
75748: EMPTY
75749: LIST
75750: LIST
75751: LIST
75752: LIST
75753: IN
75754: NOT
75755: OR
75756: IFFALSE 75760
// exit ;
75758: GO 75843
// tmp := [ ] ;
75760: LD_ADDR_VAR 0 5
75764: PUSH
75765: EMPTY
75766: ST_TO_ADDR
// for i in units do
75767: LD_ADDR_VAR 0 4
75771: PUSH
75772: LD_VAR 0 1
75776: PUSH
75777: FOR_IN
75778: IFFALSE 75812
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
75780: LD_ADDR_VAR 0 5
75784: PUSH
75785: LD_VAR 0 5
75789: PPUSH
75790: LD_VAR 0 4
75794: PPUSH
75795: LD_VAR 0 2
75799: PPUSH
75800: CALL_OW 259
75804: PPUSH
75805: CALL 77204 0 2
75809: ST_TO_ADDR
75810: GO 75777
75812: POP
75813: POP
// if not tmp then
75814: LD_VAR 0 5
75818: NOT
75819: IFFALSE 75823
// exit ;
75821: GO 75843
// result := SortListByListDesc ( units , tmp ) ;
75823: LD_ADDR_VAR 0 3
75827: PUSH
75828: LD_VAR 0 1
75832: PPUSH
75833: LD_VAR 0 5
75837: PPUSH
75838: CALL_OW 77
75842: ST_TO_ADDR
// end ;
75843: LD_VAR 0 3
75847: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
75848: LD_INT 0
75850: PPUSH
75851: PPUSH
75852: PPUSH
// result := false ;
75853: LD_ADDR_VAR 0 3
75857: PUSH
75858: LD_INT 0
75860: ST_TO_ADDR
// if not building then
75861: LD_VAR 0 2
75865: NOT
75866: IFFALSE 75870
// exit ;
75868: GO 76008
// x := GetX ( building ) ;
75870: LD_ADDR_VAR 0 4
75874: PUSH
75875: LD_VAR 0 2
75879: PPUSH
75880: CALL_OW 250
75884: ST_TO_ADDR
// y := GetY ( building ) ;
75885: LD_ADDR_VAR 0 5
75889: PUSH
75890: LD_VAR 0 2
75894: PPUSH
75895: CALL_OW 251
75899: ST_TO_ADDR
// if not x or not y then
75900: LD_VAR 0 4
75904: NOT
75905: PUSH
75906: LD_VAR 0 5
75910: NOT
75911: OR
75912: IFFALSE 75916
// exit ;
75914: GO 76008
// if GetTaskList ( unit ) then
75916: LD_VAR 0 1
75920: PPUSH
75921: CALL_OW 437
75925: IFFALSE 76008
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75927: LD_STRING e
75929: PUSH
75930: LD_VAR 0 1
75934: PPUSH
75935: CALL_OW 437
75939: PUSH
75940: LD_INT 1
75942: ARRAY
75943: PUSH
75944: LD_INT 1
75946: ARRAY
75947: EQUAL
75948: PUSH
75949: LD_VAR 0 4
75953: PUSH
75954: LD_VAR 0 1
75958: PPUSH
75959: CALL_OW 437
75963: PUSH
75964: LD_INT 1
75966: ARRAY
75967: PUSH
75968: LD_INT 2
75970: ARRAY
75971: EQUAL
75972: AND
75973: PUSH
75974: LD_VAR 0 5
75978: PUSH
75979: LD_VAR 0 1
75983: PPUSH
75984: CALL_OW 437
75988: PUSH
75989: LD_INT 1
75991: ARRAY
75992: PUSH
75993: LD_INT 3
75995: ARRAY
75996: EQUAL
75997: AND
75998: IFFALSE 76008
// result := true end ;
76000: LD_ADDR_VAR 0 3
76004: PUSH
76005: LD_INT 1
76007: ST_TO_ADDR
// end ;
76008: LD_VAR 0 3
76012: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
76013: LD_INT 0
76015: PPUSH
// result := false ;
76016: LD_ADDR_VAR 0 4
76020: PUSH
76021: LD_INT 0
76023: ST_TO_ADDR
// if GetTaskList ( unit ) then
76024: LD_VAR 0 1
76028: PPUSH
76029: CALL_OW 437
76033: IFFALSE 76116
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76035: LD_STRING M
76037: PUSH
76038: LD_VAR 0 1
76042: PPUSH
76043: CALL_OW 437
76047: PUSH
76048: LD_INT 1
76050: ARRAY
76051: PUSH
76052: LD_INT 1
76054: ARRAY
76055: EQUAL
76056: PUSH
76057: LD_VAR 0 2
76061: PUSH
76062: LD_VAR 0 1
76066: PPUSH
76067: CALL_OW 437
76071: PUSH
76072: LD_INT 1
76074: ARRAY
76075: PUSH
76076: LD_INT 2
76078: ARRAY
76079: EQUAL
76080: AND
76081: PUSH
76082: LD_VAR 0 3
76086: PUSH
76087: LD_VAR 0 1
76091: PPUSH
76092: CALL_OW 437
76096: PUSH
76097: LD_INT 1
76099: ARRAY
76100: PUSH
76101: LD_INT 3
76103: ARRAY
76104: EQUAL
76105: AND
76106: IFFALSE 76116
// result := true ;
76108: LD_ADDR_VAR 0 4
76112: PUSH
76113: LD_INT 1
76115: ST_TO_ADDR
// end ; end ;
76116: LD_VAR 0 4
76120: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
76121: LD_INT 0
76123: PPUSH
76124: PPUSH
76125: PPUSH
76126: PPUSH
// if not unit or not area then
76127: LD_VAR 0 1
76131: NOT
76132: PUSH
76133: LD_VAR 0 2
76137: NOT
76138: OR
76139: IFFALSE 76143
// exit ;
76141: GO 76307
// tmp := AreaToList ( area , i ) ;
76143: LD_ADDR_VAR 0 6
76147: PUSH
76148: LD_VAR 0 2
76152: PPUSH
76153: LD_VAR 0 5
76157: PPUSH
76158: CALL_OW 517
76162: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
76163: LD_ADDR_VAR 0 5
76167: PUSH
76168: DOUBLE
76169: LD_INT 1
76171: DEC
76172: ST_TO_ADDR
76173: LD_VAR 0 6
76177: PUSH
76178: LD_INT 1
76180: ARRAY
76181: PUSH
76182: FOR_TO
76183: IFFALSE 76305
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
76185: LD_ADDR_VAR 0 7
76189: PUSH
76190: LD_VAR 0 6
76194: PUSH
76195: LD_INT 1
76197: ARRAY
76198: PUSH
76199: LD_VAR 0 5
76203: ARRAY
76204: PUSH
76205: LD_VAR 0 6
76209: PUSH
76210: LD_INT 2
76212: ARRAY
76213: PUSH
76214: LD_VAR 0 5
76218: ARRAY
76219: PUSH
76220: EMPTY
76221: LIST
76222: LIST
76223: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
76224: LD_VAR 0 7
76228: PUSH
76229: LD_INT 1
76231: ARRAY
76232: PPUSH
76233: LD_VAR 0 7
76237: PUSH
76238: LD_INT 2
76240: ARRAY
76241: PPUSH
76242: CALL_OW 428
76246: PUSH
76247: LD_INT 0
76249: EQUAL
76250: IFFALSE 76303
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
76252: LD_VAR 0 1
76256: PPUSH
76257: LD_VAR 0 7
76261: PUSH
76262: LD_INT 1
76264: ARRAY
76265: PPUSH
76266: LD_VAR 0 7
76270: PUSH
76271: LD_INT 2
76273: ARRAY
76274: PPUSH
76275: LD_VAR 0 3
76279: PPUSH
76280: CALL_OW 48
// result := IsPlaced ( unit ) ;
76284: LD_ADDR_VAR 0 4
76288: PUSH
76289: LD_VAR 0 1
76293: PPUSH
76294: CALL_OW 305
76298: ST_TO_ADDR
// exit ;
76299: POP
76300: POP
76301: GO 76307
// end ; end ;
76303: GO 76182
76305: POP
76306: POP
// end ;
76307: LD_VAR 0 4
76311: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
76312: LD_INT 0
76314: PPUSH
76315: PPUSH
76316: PPUSH
// if not side or side > 8 then
76317: LD_VAR 0 1
76321: NOT
76322: PUSH
76323: LD_VAR 0 1
76327: PUSH
76328: LD_INT 8
76330: GREATER
76331: OR
76332: IFFALSE 76336
// exit ;
76334: GO 76523
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
76336: LD_ADDR_VAR 0 4
76340: PUSH
76341: LD_INT 22
76343: PUSH
76344: LD_VAR 0 1
76348: PUSH
76349: EMPTY
76350: LIST
76351: LIST
76352: PUSH
76353: LD_INT 21
76355: PUSH
76356: LD_INT 3
76358: PUSH
76359: EMPTY
76360: LIST
76361: LIST
76362: PUSH
76363: EMPTY
76364: LIST
76365: LIST
76366: PPUSH
76367: CALL_OW 69
76371: ST_TO_ADDR
// if not tmp then
76372: LD_VAR 0 4
76376: NOT
76377: IFFALSE 76381
// exit ;
76379: GO 76523
// enable_addtolog := true ;
76381: LD_ADDR_OWVAR 81
76385: PUSH
76386: LD_INT 1
76388: ST_TO_ADDR
// AddToLog ( [ ) ;
76389: LD_STRING [
76391: PPUSH
76392: CALL_OW 561
// for i in tmp do
76396: LD_ADDR_VAR 0 3
76400: PUSH
76401: LD_VAR 0 4
76405: PUSH
76406: FOR_IN
76407: IFFALSE 76514
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
76409: LD_STRING [
76411: PUSH
76412: LD_VAR 0 3
76416: PPUSH
76417: CALL_OW 266
76421: STR
76422: PUSH
76423: LD_STRING , 
76425: STR
76426: PUSH
76427: LD_VAR 0 3
76431: PPUSH
76432: CALL_OW 250
76436: STR
76437: PUSH
76438: LD_STRING , 
76440: STR
76441: PUSH
76442: LD_VAR 0 3
76446: PPUSH
76447: CALL_OW 251
76451: STR
76452: PUSH
76453: LD_STRING , 
76455: STR
76456: PUSH
76457: LD_VAR 0 3
76461: PPUSH
76462: CALL_OW 254
76466: STR
76467: PUSH
76468: LD_STRING , 
76470: STR
76471: PUSH
76472: LD_VAR 0 3
76476: PPUSH
76477: LD_INT 1
76479: PPUSH
76480: CALL_OW 268
76484: STR
76485: PUSH
76486: LD_STRING , 
76488: STR
76489: PUSH
76490: LD_VAR 0 3
76494: PPUSH
76495: LD_INT 2
76497: PPUSH
76498: CALL_OW 268
76502: STR
76503: PUSH
76504: LD_STRING ],
76506: STR
76507: PPUSH
76508: CALL_OW 561
// end ;
76512: GO 76406
76514: POP
76515: POP
// AddToLog ( ]; ) ;
76516: LD_STRING ];
76518: PPUSH
76519: CALL_OW 561
// end ;
76523: LD_VAR 0 2
76527: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
76528: LD_INT 0
76530: PPUSH
76531: PPUSH
76532: PPUSH
76533: PPUSH
76534: PPUSH
// if not area or not rate or not max then
76535: LD_VAR 0 1
76539: NOT
76540: PUSH
76541: LD_VAR 0 2
76545: NOT
76546: OR
76547: PUSH
76548: LD_VAR 0 4
76552: NOT
76553: OR
76554: IFFALSE 76558
// exit ;
76556: GO 76747
// while 1 do
76558: LD_INT 1
76560: IFFALSE 76747
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
76562: LD_ADDR_VAR 0 9
76566: PUSH
76567: LD_VAR 0 1
76571: PPUSH
76572: LD_INT 1
76574: PPUSH
76575: CALL_OW 287
76579: PUSH
76580: LD_INT 10
76582: MUL
76583: ST_TO_ADDR
// r := rate / 10 ;
76584: LD_ADDR_VAR 0 7
76588: PUSH
76589: LD_VAR 0 2
76593: PUSH
76594: LD_INT 10
76596: DIVREAL
76597: ST_TO_ADDR
// time := 1 1$00 ;
76598: LD_ADDR_VAR 0 8
76602: PUSH
76603: LD_INT 2100
76605: ST_TO_ADDR
// if amount < min then
76606: LD_VAR 0 9
76610: PUSH
76611: LD_VAR 0 3
76615: LESS
76616: IFFALSE 76634
// r := r * 2 else
76618: LD_ADDR_VAR 0 7
76622: PUSH
76623: LD_VAR 0 7
76627: PUSH
76628: LD_INT 2
76630: MUL
76631: ST_TO_ADDR
76632: GO 76660
// if amount > max then
76634: LD_VAR 0 9
76638: PUSH
76639: LD_VAR 0 4
76643: GREATER
76644: IFFALSE 76660
// r := r / 2 ;
76646: LD_ADDR_VAR 0 7
76650: PUSH
76651: LD_VAR 0 7
76655: PUSH
76656: LD_INT 2
76658: DIVREAL
76659: ST_TO_ADDR
// time := time / r ;
76660: LD_ADDR_VAR 0 8
76664: PUSH
76665: LD_VAR 0 8
76669: PUSH
76670: LD_VAR 0 7
76674: DIVREAL
76675: ST_TO_ADDR
// if time < 0 then
76676: LD_VAR 0 8
76680: PUSH
76681: LD_INT 0
76683: LESS
76684: IFFALSE 76701
// time := time * - 1 ;
76686: LD_ADDR_VAR 0 8
76690: PUSH
76691: LD_VAR 0 8
76695: PUSH
76696: LD_INT 1
76698: NEG
76699: MUL
76700: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
76701: LD_VAR 0 8
76705: PUSH
76706: LD_INT 35
76708: PPUSH
76709: LD_INT 875
76711: PPUSH
76712: CALL_OW 12
76716: PLUS
76717: PPUSH
76718: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
76722: LD_INT 1
76724: PPUSH
76725: LD_INT 5
76727: PPUSH
76728: CALL_OW 12
76732: PPUSH
76733: LD_VAR 0 1
76737: PPUSH
76738: LD_INT 1
76740: PPUSH
76741: CALL_OW 55
// end ;
76745: GO 76558
// end ;
76747: LD_VAR 0 5
76751: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
76752: LD_INT 0
76754: PPUSH
76755: PPUSH
76756: PPUSH
76757: PPUSH
76758: PPUSH
76759: PPUSH
76760: PPUSH
76761: PPUSH
// if not turrets or not factories then
76762: LD_VAR 0 1
76766: NOT
76767: PUSH
76768: LD_VAR 0 2
76772: NOT
76773: OR
76774: IFFALSE 76778
// exit ;
76776: GO 77085
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
76778: LD_ADDR_VAR 0 10
76782: PUSH
76783: LD_INT 5
76785: PUSH
76786: LD_INT 6
76788: PUSH
76789: EMPTY
76790: LIST
76791: LIST
76792: PUSH
76793: LD_INT 2
76795: PUSH
76796: LD_INT 4
76798: PUSH
76799: EMPTY
76800: LIST
76801: LIST
76802: PUSH
76803: LD_INT 3
76805: PUSH
76806: LD_INT 5
76808: PUSH
76809: EMPTY
76810: LIST
76811: LIST
76812: PUSH
76813: EMPTY
76814: LIST
76815: LIST
76816: LIST
76817: PUSH
76818: LD_INT 24
76820: PUSH
76821: LD_INT 25
76823: PUSH
76824: EMPTY
76825: LIST
76826: LIST
76827: PUSH
76828: LD_INT 23
76830: PUSH
76831: LD_INT 27
76833: PUSH
76834: EMPTY
76835: LIST
76836: LIST
76837: PUSH
76838: EMPTY
76839: LIST
76840: LIST
76841: PUSH
76842: LD_INT 42
76844: PUSH
76845: LD_INT 43
76847: PUSH
76848: EMPTY
76849: LIST
76850: LIST
76851: PUSH
76852: LD_INT 44
76854: PUSH
76855: LD_INT 46
76857: PUSH
76858: EMPTY
76859: LIST
76860: LIST
76861: PUSH
76862: LD_INT 45
76864: PUSH
76865: LD_INT 47
76867: PUSH
76868: EMPTY
76869: LIST
76870: LIST
76871: PUSH
76872: EMPTY
76873: LIST
76874: LIST
76875: LIST
76876: PUSH
76877: EMPTY
76878: LIST
76879: LIST
76880: LIST
76881: ST_TO_ADDR
// result := [ ] ;
76882: LD_ADDR_VAR 0 3
76886: PUSH
76887: EMPTY
76888: ST_TO_ADDR
// for i in turrets do
76889: LD_ADDR_VAR 0 4
76893: PUSH
76894: LD_VAR 0 1
76898: PUSH
76899: FOR_IN
76900: IFFALSE 77083
// begin nat := GetNation ( i ) ;
76902: LD_ADDR_VAR 0 7
76906: PUSH
76907: LD_VAR 0 4
76911: PPUSH
76912: CALL_OW 248
76916: ST_TO_ADDR
// weapon := 0 ;
76917: LD_ADDR_VAR 0 8
76921: PUSH
76922: LD_INT 0
76924: ST_TO_ADDR
// if not nat then
76925: LD_VAR 0 7
76929: NOT
76930: IFFALSE 76934
// continue ;
76932: GO 76899
// for j in list [ nat ] do
76934: LD_ADDR_VAR 0 5
76938: PUSH
76939: LD_VAR 0 10
76943: PUSH
76944: LD_VAR 0 7
76948: ARRAY
76949: PUSH
76950: FOR_IN
76951: IFFALSE 76992
// if GetBWeapon ( i ) = j [ 1 ] then
76953: LD_VAR 0 4
76957: PPUSH
76958: CALL_OW 269
76962: PUSH
76963: LD_VAR 0 5
76967: PUSH
76968: LD_INT 1
76970: ARRAY
76971: EQUAL
76972: IFFALSE 76990
// begin weapon := j [ 2 ] ;
76974: LD_ADDR_VAR 0 8
76978: PUSH
76979: LD_VAR 0 5
76983: PUSH
76984: LD_INT 2
76986: ARRAY
76987: ST_TO_ADDR
// break ;
76988: GO 76992
// end ;
76990: GO 76950
76992: POP
76993: POP
// if not weapon then
76994: LD_VAR 0 8
76998: NOT
76999: IFFALSE 77003
// continue ;
77001: GO 76899
// for k in factories do
77003: LD_ADDR_VAR 0 6
77007: PUSH
77008: LD_VAR 0 2
77012: PUSH
77013: FOR_IN
77014: IFFALSE 77079
// begin weapons := AvailableWeaponList ( k ) ;
77016: LD_ADDR_VAR 0 9
77020: PUSH
77021: LD_VAR 0 6
77025: PPUSH
77026: CALL_OW 478
77030: ST_TO_ADDR
// if not weapons then
77031: LD_VAR 0 9
77035: NOT
77036: IFFALSE 77040
// continue ;
77038: GO 77013
// if weapon in weapons then
77040: LD_VAR 0 8
77044: PUSH
77045: LD_VAR 0 9
77049: IN
77050: IFFALSE 77077
// begin result := [ i , weapon ] ;
77052: LD_ADDR_VAR 0 3
77056: PUSH
77057: LD_VAR 0 4
77061: PUSH
77062: LD_VAR 0 8
77066: PUSH
77067: EMPTY
77068: LIST
77069: LIST
77070: ST_TO_ADDR
// exit ;
77071: POP
77072: POP
77073: POP
77074: POP
77075: GO 77085
// end ; end ;
77077: GO 77013
77079: POP
77080: POP
// end ;
77081: GO 76899
77083: POP
77084: POP
// end ;
77085: LD_VAR 0 3
77089: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
77090: LD_INT 0
77092: PPUSH
// if not side or side > 8 then
77093: LD_VAR 0 3
77097: NOT
77098: PUSH
77099: LD_VAR 0 3
77103: PUSH
77104: LD_INT 8
77106: GREATER
77107: OR
77108: IFFALSE 77112
// exit ;
77110: GO 77171
// if not range then
77112: LD_VAR 0 4
77116: NOT
77117: IFFALSE 77128
// range := - 12 ;
77119: LD_ADDR_VAR 0 4
77123: PUSH
77124: LD_INT 12
77126: NEG
77127: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
77128: LD_VAR 0 1
77132: PPUSH
77133: LD_VAR 0 2
77137: PPUSH
77138: LD_VAR 0 3
77142: PPUSH
77143: LD_VAR 0 4
77147: PPUSH
77148: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
77152: LD_VAR 0 1
77156: PPUSH
77157: LD_VAR 0 2
77161: PPUSH
77162: LD_VAR 0 3
77166: PPUSH
77167: CALL_OW 331
// end ;
77171: LD_VAR 0 5
77175: RET
// export function Video ( mode ) ; begin
77176: LD_INT 0
77178: PPUSH
// ingame_video = mode ;
77179: LD_ADDR_OWVAR 52
77183: PUSH
77184: LD_VAR 0 1
77188: ST_TO_ADDR
// interface_hidden = mode ;
77189: LD_ADDR_OWVAR 54
77193: PUSH
77194: LD_VAR 0 1
77198: ST_TO_ADDR
// end ;
77199: LD_VAR 0 2
77203: RET
// export function Join ( array , element ) ; begin
77204: LD_INT 0
77206: PPUSH
// result := Replace ( array , array + 1 , element ) ;
77207: LD_ADDR_VAR 0 3
77211: PUSH
77212: LD_VAR 0 1
77216: PPUSH
77217: LD_VAR 0 1
77221: PUSH
77222: LD_INT 1
77224: PLUS
77225: PPUSH
77226: LD_VAR 0 2
77230: PPUSH
77231: CALL_OW 1
77235: ST_TO_ADDR
// end ;
77236: LD_VAR 0 3
77240: RET
// export function JoinUnion ( array , element ) ; begin
77241: LD_INT 0
77243: PPUSH
// result := array union element ;
77244: LD_ADDR_VAR 0 3
77248: PUSH
77249: LD_VAR 0 1
77253: PUSH
77254: LD_VAR 0 2
77258: UNION
77259: ST_TO_ADDR
// end ;
77260: LD_VAR 0 3
77264: RET
// export function GetBehemoths ( side ) ; begin
77265: LD_INT 0
77267: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
77268: LD_ADDR_VAR 0 2
77272: PUSH
77273: LD_INT 22
77275: PUSH
77276: LD_VAR 0 1
77280: PUSH
77281: EMPTY
77282: LIST
77283: LIST
77284: PUSH
77285: LD_INT 31
77287: PUSH
77288: LD_INT 25
77290: PUSH
77291: EMPTY
77292: LIST
77293: LIST
77294: PUSH
77295: EMPTY
77296: LIST
77297: LIST
77298: PPUSH
77299: CALL_OW 69
77303: ST_TO_ADDR
// end ;
77304: LD_VAR 0 2
77308: RET
// export function Shuffle ( array ) ; var i , index ; begin
77309: LD_INT 0
77311: PPUSH
77312: PPUSH
77313: PPUSH
// result := [ ] ;
77314: LD_ADDR_VAR 0 2
77318: PUSH
77319: EMPTY
77320: ST_TO_ADDR
// if not array then
77321: LD_VAR 0 1
77325: NOT
77326: IFFALSE 77330
// exit ;
77328: GO 77429
// Randomize ;
77330: CALL_OW 10
// for i = array downto 1 do
77334: LD_ADDR_VAR 0 3
77338: PUSH
77339: DOUBLE
77340: LD_VAR 0 1
77344: INC
77345: ST_TO_ADDR
77346: LD_INT 1
77348: PUSH
77349: FOR_DOWNTO
77350: IFFALSE 77427
// begin index := rand ( 1 , array ) ;
77352: LD_ADDR_VAR 0 4
77356: PUSH
77357: LD_INT 1
77359: PPUSH
77360: LD_VAR 0 1
77364: PPUSH
77365: CALL_OW 12
77369: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
77370: LD_ADDR_VAR 0 2
77374: PUSH
77375: LD_VAR 0 2
77379: PPUSH
77380: LD_VAR 0 2
77384: PUSH
77385: LD_INT 1
77387: PLUS
77388: PPUSH
77389: LD_VAR 0 1
77393: PUSH
77394: LD_VAR 0 4
77398: ARRAY
77399: PPUSH
77400: CALL_OW 2
77404: ST_TO_ADDR
// array := Delete ( array , index ) ;
77405: LD_ADDR_VAR 0 1
77409: PUSH
77410: LD_VAR 0 1
77414: PPUSH
77415: LD_VAR 0 4
77419: PPUSH
77420: CALL_OW 3
77424: ST_TO_ADDR
// end ;
77425: GO 77349
77427: POP
77428: POP
// end ;
77429: LD_VAR 0 2
77433: RET
// export function GetBaseMaterials ( base ) ; begin
77434: LD_INT 0
77436: PPUSH
// result := [ 0 , 0 , 0 ] ;
77437: LD_ADDR_VAR 0 2
77441: PUSH
77442: LD_INT 0
77444: PUSH
77445: LD_INT 0
77447: PUSH
77448: LD_INT 0
77450: PUSH
77451: EMPTY
77452: LIST
77453: LIST
77454: LIST
77455: ST_TO_ADDR
// if not base then
77456: LD_VAR 0 1
77460: NOT
77461: IFFALSE 77465
// exit ;
77463: GO 77514
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
77465: LD_ADDR_VAR 0 2
77469: PUSH
77470: LD_VAR 0 1
77474: PPUSH
77475: LD_INT 1
77477: PPUSH
77478: CALL_OW 275
77482: PUSH
77483: LD_VAR 0 1
77487: PPUSH
77488: LD_INT 2
77490: PPUSH
77491: CALL_OW 275
77495: PUSH
77496: LD_VAR 0 1
77500: PPUSH
77501: LD_INT 3
77503: PPUSH
77504: CALL_OW 275
77508: PUSH
77509: EMPTY
77510: LIST
77511: LIST
77512: LIST
77513: ST_TO_ADDR
// end ;
77514: LD_VAR 0 2
77518: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
77519: LD_INT 0
77521: PPUSH
77522: PPUSH
// result := array ;
77523: LD_ADDR_VAR 0 3
77527: PUSH
77528: LD_VAR 0 1
77532: ST_TO_ADDR
// if size >= result then
77533: LD_VAR 0 2
77537: PUSH
77538: LD_VAR 0 3
77542: GREATEREQUAL
77543: IFFALSE 77547
// exit ;
77545: GO 77597
// if size then
77547: LD_VAR 0 2
77551: IFFALSE 77597
// for i := array downto size do
77553: LD_ADDR_VAR 0 4
77557: PUSH
77558: DOUBLE
77559: LD_VAR 0 1
77563: INC
77564: ST_TO_ADDR
77565: LD_VAR 0 2
77569: PUSH
77570: FOR_DOWNTO
77571: IFFALSE 77595
// result := Delete ( result , result ) ;
77573: LD_ADDR_VAR 0 3
77577: PUSH
77578: LD_VAR 0 3
77582: PPUSH
77583: LD_VAR 0 3
77587: PPUSH
77588: CALL_OW 3
77592: ST_TO_ADDR
77593: GO 77570
77595: POP
77596: POP
// end ;
77597: LD_VAR 0 3
77601: RET
// export function ComExit ( unit ) ; var tmp ; begin
77602: LD_INT 0
77604: PPUSH
77605: PPUSH
// if not IsInUnit ( unit ) then
77606: LD_VAR 0 1
77610: PPUSH
77611: CALL_OW 310
77615: NOT
77616: IFFALSE 77620
// exit ;
77618: GO 77680
// tmp := IsInUnit ( unit ) ;
77620: LD_ADDR_VAR 0 3
77624: PUSH
77625: LD_VAR 0 1
77629: PPUSH
77630: CALL_OW 310
77634: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
77635: LD_VAR 0 3
77639: PPUSH
77640: CALL_OW 247
77644: PUSH
77645: LD_INT 2
77647: EQUAL
77648: IFFALSE 77661
// ComExitVehicle ( unit ) else
77650: LD_VAR 0 1
77654: PPUSH
77655: CALL_OW 121
77659: GO 77670
// ComExitBuilding ( unit ) ;
77661: LD_VAR 0 1
77665: PPUSH
77666: CALL_OW 122
// result := tmp ;
77670: LD_ADDR_VAR 0 2
77674: PUSH
77675: LD_VAR 0 3
77679: ST_TO_ADDR
// end ;
77680: LD_VAR 0 2
77684: RET
// export function ComExitAll ( units ) ; var i ; begin
77685: LD_INT 0
77687: PPUSH
77688: PPUSH
// if not units then
77689: LD_VAR 0 1
77693: NOT
77694: IFFALSE 77698
// exit ;
77696: GO 77724
// for i in units do
77698: LD_ADDR_VAR 0 3
77702: PUSH
77703: LD_VAR 0 1
77707: PUSH
77708: FOR_IN
77709: IFFALSE 77722
// ComExit ( i ) ;
77711: LD_VAR 0 3
77715: PPUSH
77716: CALL 77602 0 1
77720: GO 77708
77722: POP
77723: POP
// end ;
77724: LD_VAR 0 2
77728: RET
// export function ResetHc ; begin
77729: LD_INT 0
77731: PPUSH
// InitHc ;
77732: CALL_OW 19
// hc_importance := 0 ;
77736: LD_ADDR_OWVAR 32
77740: PUSH
77741: LD_INT 0
77743: ST_TO_ADDR
// end ;
77744: LD_VAR 0 1
77748: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
77749: LD_INT 0
77751: PPUSH
77752: PPUSH
77753: PPUSH
// _x := ( x1 + x2 ) div 2 ;
77754: LD_ADDR_VAR 0 6
77758: PUSH
77759: LD_VAR 0 1
77763: PUSH
77764: LD_VAR 0 3
77768: PLUS
77769: PUSH
77770: LD_INT 2
77772: DIV
77773: ST_TO_ADDR
// if _x < 0 then
77774: LD_VAR 0 6
77778: PUSH
77779: LD_INT 0
77781: LESS
77782: IFFALSE 77799
// _x := _x * - 1 ;
77784: LD_ADDR_VAR 0 6
77788: PUSH
77789: LD_VAR 0 6
77793: PUSH
77794: LD_INT 1
77796: NEG
77797: MUL
77798: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
77799: LD_ADDR_VAR 0 7
77803: PUSH
77804: LD_VAR 0 2
77808: PUSH
77809: LD_VAR 0 4
77813: PLUS
77814: PUSH
77815: LD_INT 2
77817: DIV
77818: ST_TO_ADDR
// if _y < 0 then
77819: LD_VAR 0 7
77823: PUSH
77824: LD_INT 0
77826: LESS
77827: IFFALSE 77844
// _y := _y * - 1 ;
77829: LD_ADDR_VAR 0 7
77833: PUSH
77834: LD_VAR 0 7
77838: PUSH
77839: LD_INT 1
77841: NEG
77842: MUL
77843: ST_TO_ADDR
// result := [ _x , _y ] ;
77844: LD_ADDR_VAR 0 5
77848: PUSH
77849: LD_VAR 0 6
77853: PUSH
77854: LD_VAR 0 7
77858: PUSH
77859: EMPTY
77860: LIST
77861: LIST
77862: ST_TO_ADDR
// end ;
77863: LD_VAR 0 5
77867: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
77868: LD_INT 0
77870: PPUSH
77871: PPUSH
77872: PPUSH
77873: PPUSH
// task := GetTaskList ( unit ) ;
77874: LD_ADDR_VAR 0 7
77878: PUSH
77879: LD_VAR 0 1
77883: PPUSH
77884: CALL_OW 437
77888: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
77889: LD_VAR 0 7
77893: NOT
77894: PUSH
77895: LD_VAR 0 1
77899: PPUSH
77900: LD_VAR 0 2
77904: PPUSH
77905: CALL_OW 308
77909: NOT
77910: AND
77911: IFFALSE 77915
// exit ;
77913: GO 78033
// if IsInArea ( unit , area ) then
77915: LD_VAR 0 1
77919: PPUSH
77920: LD_VAR 0 2
77924: PPUSH
77925: CALL_OW 308
77929: IFFALSE 77947
// begin ComMoveToArea ( unit , goAway ) ;
77931: LD_VAR 0 1
77935: PPUSH
77936: LD_VAR 0 3
77940: PPUSH
77941: CALL_OW 113
// exit ;
77945: GO 78033
// end ; if task [ 1 ] [ 1 ] <> M then
77947: LD_VAR 0 7
77951: PUSH
77952: LD_INT 1
77954: ARRAY
77955: PUSH
77956: LD_INT 1
77958: ARRAY
77959: PUSH
77960: LD_STRING M
77962: NONEQUAL
77963: IFFALSE 77967
// exit ;
77965: GO 78033
// x := task [ 1 ] [ 2 ] ;
77967: LD_ADDR_VAR 0 5
77971: PUSH
77972: LD_VAR 0 7
77976: PUSH
77977: LD_INT 1
77979: ARRAY
77980: PUSH
77981: LD_INT 2
77983: ARRAY
77984: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
77985: LD_ADDR_VAR 0 6
77989: PUSH
77990: LD_VAR 0 7
77994: PUSH
77995: LD_INT 1
77997: ARRAY
77998: PUSH
77999: LD_INT 3
78001: ARRAY
78002: ST_TO_ADDR
// if InArea ( x , y , area ) then
78003: LD_VAR 0 5
78007: PPUSH
78008: LD_VAR 0 6
78012: PPUSH
78013: LD_VAR 0 2
78017: PPUSH
78018: CALL_OW 309
78022: IFFALSE 78033
// ComStop ( unit ) ;
78024: LD_VAR 0 1
78028: PPUSH
78029: CALL_OW 141
// end ;
78033: LD_VAR 0 4
78037: RET
// export function Abs ( value ) ; begin
78038: LD_INT 0
78040: PPUSH
// result := value ;
78041: LD_ADDR_VAR 0 2
78045: PUSH
78046: LD_VAR 0 1
78050: ST_TO_ADDR
// if value < 0 then
78051: LD_VAR 0 1
78055: PUSH
78056: LD_INT 0
78058: LESS
78059: IFFALSE 78076
// result := value * - 1 ;
78061: LD_ADDR_VAR 0 2
78065: PUSH
78066: LD_VAR 0 1
78070: PUSH
78071: LD_INT 1
78073: NEG
78074: MUL
78075: ST_TO_ADDR
// end ;
78076: LD_VAR 0 2
78080: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
78081: LD_INT 0
78083: PPUSH
78084: PPUSH
78085: PPUSH
78086: PPUSH
78087: PPUSH
78088: PPUSH
78089: PPUSH
78090: PPUSH
// if not unit or not building then
78091: LD_VAR 0 1
78095: NOT
78096: PUSH
78097: LD_VAR 0 2
78101: NOT
78102: OR
78103: IFFALSE 78107
// exit ;
78105: GO 78333
// x := GetX ( building ) ;
78107: LD_ADDR_VAR 0 4
78111: PUSH
78112: LD_VAR 0 2
78116: PPUSH
78117: CALL_OW 250
78121: ST_TO_ADDR
// y := GetY ( building ) ;
78122: LD_ADDR_VAR 0 6
78126: PUSH
78127: LD_VAR 0 2
78131: PPUSH
78132: CALL_OW 251
78136: ST_TO_ADDR
// d := GetDir ( building ) ;
78137: LD_ADDR_VAR 0 8
78141: PUSH
78142: LD_VAR 0 2
78146: PPUSH
78147: CALL_OW 254
78151: ST_TO_ADDR
// r := 4 ;
78152: LD_ADDR_VAR 0 9
78156: PUSH
78157: LD_INT 4
78159: ST_TO_ADDR
// for i := 1 to 5 do
78160: LD_ADDR_VAR 0 10
78164: PUSH
78165: DOUBLE
78166: LD_INT 1
78168: DEC
78169: ST_TO_ADDR
78170: LD_INT 5
78172: PUSH
78173: FOR_TO
78174: IFFALSE 78331
// begin _x := ShiftX ( x , d , r + i ) ;
78176: LD_ADDR_VAR 0 5
78180: PUSH
78181: LD_VAR 0 4
78185: PPUSH
78186: LD_VAR 0 8
78190: PPUSH
78191: LD_VAR 0 9
78195: PUSH
78196: LD_VAR 0 10
78200: PLUS
78201: PPUSH
78202: CALL_OW 272
78206: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
78207: LD_ADDR_VAR 0 7
78211: PUSH
78212: LD_VAR 0 6
78216: PPUSH
78217: LD_VAR 0 8
78221: PPUSH
78222: LD_VAR 0 9
78226: PUSH
78227: LD_VAR 0 10
78231: PLUS
78232: PPUSH
78233: CALL_OW 273
78237: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
78238: LD_VAR 0 5
78242: PPUSH
78243: LD_VAR 0 7
78247: PPUSH
78248: CALL_OW 488
78252: PUSH
78253: LD_VAR 0 5
78257: PPUSH
78258: LD_VAR 0 7
78262: PPUSH
78263: CALL_OW 428
78267: PPUSH
78268: CALL_OW 247
78272: PUSH
78273: LD_INT 3
78275: PUSH
78276: LD_INT 2
78278: PUSH
78279: EMPTY
78280: LIST
78281: LIST
78282: IN
78283: NOT
78284: AND
78285: IFFALSE 78329
// begin ComMoveXY ( unit , _x , _y ) ;
78287: LD_VAR 0 1
78291: PPUSH
78292: LD_VAR 0 5
78296: PPUSH
78297: LD_VAR 0 7
78301: PPUSH
78302: CALL_OW 111
// result := [ _x , _y ] ;
78306: LD_ADDR_VAR 0 3
78310: PUSH
78311: LD_VAR 0 5
78315: PUSH
78316: LD_VAR 0 7
78320: PUSH
78321: EMPTY
78322: LIST
78323: LIST
78324: ST_TO_ADDR
// exit ;
78325: POP
78326: POP
78327: GO 78333
// end ; end ;
78329: GO 78173
78331: POP
78332: POP
// end ;
78333: LD_VAR 0 3
78337: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
78338: LD_INT 0
78340: PPUSH
78341: PPUSH
78342: PPUSH
// result := 0 ;
78343: LD_ADDR_VAR 0 3
78347: PUSH
78348: LD_INT 0
78350: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
78351: LD_VAR 0 1
78355: PUSH
78356: LD_INT 0
78358: LESS
78359: PUSH
78360: LD_VAR 0 1
78364: PUSH
78365: LD_INT 8
78367: GREATER
78368: OR
78369: PUSH
78370: LD_VAR 0 2
78374: PUSH
78375: LD_INT 0
78377: LESS
78378: OR
78379: PUSH
78380: LD_VAR 0 2
78384: PUSH
78385: LD_INT 8
78387: GREATER
78388: OR
78389: IFFALSE 78393
// exit ;
78391: GO 78468
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
78393: LD_ADDR_VAR 0 4
78397: PUSH
78398: LD_INT 22
78400: PUSH
78401: LD_VAR 0 2
78405: PUSH
78406: EMPTY
78407: LIST
78408: LIST
78409: PPUSH
78410: CALL_OW 69
78414: PUSH
78415: FOR_IN
78416: IFFALSE 78466
// begin un := UnitShoot ( i ) ;
78418: LD_ADDR_VAR 0 5
78422: PUSH
78423: LD_VAR 0 4
78427: PPUSH
78428: CALL_OW 504
78432: ST_TO_ADDR
// if GetSide ( un ) = side1 then
78433: LD_VAR 0 5
78437: PPUSH
78438: CALL_OW 255
78442: PUSH
78443: LD_VAR 0 1
78447: EQUAL
78448: IFFALSE 78464
// begin result := un ;
78450: LD_ADDR_VAR 0 3
78454: PUSH
78455: LD_VAR 0 5
78459: ST_TO_ADDR
// exit ;
78460: POP
78461: POP
78462: GO 78468
// end ; end ;
78464: GO 78415
78466: POP
78467: POP
// end ;
78468: LD_VAR 0 3
78472: RET
// export function GetCargoBay ( units ) ; begin
78473: LD_INT 0
78475: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
78476: LD_ADDR_VAR 0 2
78480: PUSH
78481: LD_VAR 0 1
78485: PPUSH
78486: LD_INT 2
78488: PUSH
78489: LD_INT 34
78491: PUSH
78492: LD_INT 12
78494: PUSH
78495: EMPTY
78496: LIST
78497: LIST
78498: PUSH
78499: LD_INT 34
78501: PUSH
78502: LD_INT 51
78504: PUSH
78505: EMPTY
78506: LIST
78507: LIST
78508: PUSH
78509: LD_INT 34
78511: PUSH
78512: LD_INT 32
78514: PUSH
78515: EMPTY
78516: LIST
78517: LIST
78518: PUSH
78519: LD_INT 34
78521: PUSH
78522: LD_INT 89
78524: PUSH
78525: EMPTY
78526: LIST
78527: LIST
78528: PUSH
78529: EMPTY
78530: LIST
78531: LIST
78532: LIST
78533: LIST
78534: LIST
78535: PPUSH
78536: CALL_OW 72
78540: ST_TO_ADDR
// end ;
78541: LD_VAR 0 2
78545: RET
// export function Negate ( value ) ; begin
78546: LD_INT 0
78548: PPUSH
// result := not value ;
78549: LD_ADDR_VAR 0 2
78553: PUSH
78554: LD_VAR 0 1
78558: NOT
78559: ST_TO_ADDR
// end ;
78560: LD_VAR 0 2
78564: RET
// export function Inc ( value ) ; begin
78565: LD_INT 0
78567: PPUSH
// result := value + 1 ;
78568: LD_ADDR_VAR 0 2
78572: PUSH
78573: LD_VAR 0 1
78577: PUSH
78578: LD_INT 1
78580: PLUS
78581: ST_TO_ADDR
// end ;
78582: LD_VAR 0 2
78586: RET
// export function Dec ( value ) ; begin
78587: LD_INT 0
78589: PPUSH
// result := value - 1 ;
78590: LD_ADDR_VAR 0 2
78594: PUSH
78595: LD_VAR 0 1
78599: PUSH
78600: LD_INT 1
78602: MINUS
78603: ST_TO_ADDR
// end ;
78604: LD_VAR 0 2
78608: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
78609: LD_INT 0
78611: PPUSH
78612: PPUSH
78613: PPUSH
78614: PPUSH
78615: PPUSH
78616: PPUSH
78617: PPUSH
78618: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
78619: LD_VAR 0 1
78623: PPUSH
78624: LD_VAR 0 2
78628: PPUSH
78629: CALL_OW 488
78633: NOT
78634: PUSH
78635: LD_VAR 0 3
78639: PPUSH
78640: LD_VAR 0 4
78644: PPUSH
78645: CALL_OW 488
78649: NOT
78650: OR
78651: IFFALSE 78664
// begin result := - 1 ;
78653: LD_ADDR_VAR 0 5
78657: PUSH
78658: LD_INT 1
78660: NEG
78661: ST_TO_ADDR
// exit ;
78662: GO 78899
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
78664: LD_ADDR_VAR 0 12
78668: PUSH
78669: LD_VAR 0 1
78673: PPUSH
78674: LD_VAR 0 2
78678: PPUSH
78679: LD_VAR 0 3
78683: PPUSH
78684: LD_VAR 0 4
78688: PPUSH
78689: CALL 77749 0 4
78693: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
78694: LD_ADDR_VAR 0 11
78698: PUSH
78699: LD_VAR 0 1
78703: PPUSH
78704: LD_VAR 0 2
78708: PPUSH
78709: LD_VAR 0 12
78713: PUSH
78714: LD_INT 1
78716: ARRAY
78717: PPUSH
78718: LD_VAR 0 12
78722: PUSH
78723: LD_INT 2
78725: ARRAY
78726: PPUSH
78727: CALL_OW 298
78731: ST_TO_ADDR
// distance := 9999 ;
78732: LD_ADDR_VAR 0 10
78736: PUSH
78737: LD_INT 9999
78739: ST_TO_ADDR
// for i := 0 to 5 do
78740: LD_ADDR_VAR 0 6
78744: PUSH
78745: DOUBLE
78746: LD_INT 0
78748: DEC
78749: ST_TO_ADDR
78750: LD_INT 5
78752: PUSH
78753: FOR_TO
78754: IFFALSE 78897
// begin _x := ShiftX ( x1 , i , centerDist ) ;
78756: LD_ADDR_VAR 0 7
78760: PUSH
78761: LD_VAR 0 1
78765: PPUSH
78766: LD_VAR 0 6
78770: PPUSH
78771: LD_VAR 0 11
78775: PPUSH
78776: CALL_OW 272
78780: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
78781: LD_ADDR_VAR 0 8
78785: PUSH
78786: LD_VAR 0 2
78790: PPUSH
78791: LD_VAR 0 6
78795: PPUSH
78796: LD_VAR 0 11
78800: PPUSH
78801: CALL_OW 273
78805: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
78806: LD_VAR 0 7
78810: PPUSH
78811: LD_VAR 0 8
78815: PPUSH
78816: CALL_OW 488
78820: NOT
78821: IFFALSE 78825
// continue ;
78823: GO 78753
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
78825: LD_ADDR_VAR 0 9
78829: PUSH
78830: LD_VAR 0 12
78834: PUSH
78835: LD_INT 1
78837: ARRAY
78838: PPUSH
78839: LD_VAR 0 12
78843: PUSH
78844: LD_INT 2
78846: ARRAY
78847: PPUSH
78848: LD_VAR 0 7
78852: PPUSH
78853: LD_VAR 0 8
78857: PPUSH
78858: CALL_OW 298
78862: ST_TO_ADDR
// if tmp < distance then
78863: LD_VAR 0 9
78867: PUSH
78868: LD_VAR 0 10
78872: LESS
78873: IFFALSE 78895
// begin result := i ;
78875: LD_ADDR_VAR 0 5
78879: PUSH
78880: LD_VAR 0 6
78884: ST_TO_ADDR
// distance := tmp ;
78885: LD_ADDR_VAR 0 10
78889: PUSH
78890: LD_VAR 0 9
78894: ST_TO_ADDR
// end ; end ;
78895: GO 78753
78897: POP
78898: POP
// end ;
78899: LD_VAR 0 5
78903: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78904: LD_INT 0
78906: PPUSH
78907: PPUSH
// if not driver or not IsInUnit ( driver ) then
78908: LD_VAR 0 1
78912: NOT
78913: PUSH
78914: LD_VAR 0 1
78918: PPUSH
78919: CALL_OW 310
78923: NOT
78924: OR
78925: IFFALSE 78929
// exit ;
78927: GO 79019
// vehicle := IsInUnit ( driver ) ;
78929: LD_ADDR_VAR 0 3
78933: PUSH
78934: LD_VAR 0 1
78938: PPUSH
78939: CALL_OW 310
78943: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78944: LD_VAR 0 1
78948: PPUSH
78949: LD_STRING \
78951: PUSH
78952: LD_INT 0
78954: PUSH
78955: LD_INT 0
78957: PUSH
78958: LD_INT 0
78960: PUSH
78961: LD_INT 0
78963: PUSH
78964: LD_INT 0
78966: PUSH
78967: LD_INT 0
78969: PUSH
78970: EMPTY
78971: LIST
78972: LIST
78973: LIST
78974: LIST
78975: LIST
78976: LIST
78977: LIST
78978: PUSH
78979: LD_STRING E
78981: PUSH
78982: LD_INT 0
78984: PUSH
78985: LD_INT 0
78987: PUSH
78988: LD_VAR 0 3
78992: PUSH
78993: LD_INT 0
78995: PUSH
78996: LD_INT 0
78998: PUSH
78999: LD_INT 0
79001: PUSH
79002: EMPTY
79003: LIST
79004: LIST
79005: LIST
79006: LIST
79007: LIST
79008: LIST
79009: LIST
79010: PUSH
79011: EMPTY
79012: LIST
79013: LIST
79014: PPUSH
79015: CALL_OW 446
// end ;
79019: LD_VAR 0 2
79023: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79024: LD_INT 0
79026: PPUSH
79027: PPUSH
// if not driver or not IsInUnit ( driver ) then
79028: LD_VAR 0 1
79032: NOT
79033: PUSH
79034: LD_VAR 0 1
79038: PPUSH
79039: CALL_OW 310
79043: NOT
79044: OR
79045: IFFALSE 79049
// exit ;
79047: GO 79139
// vehicle := IsInUnit ( driver ) ;
79049: LD_ADDR_VAR 0 3
79053: PUSH
79054: LD_VAR 0 1
79058: PPUSH
79059: CALL_OW 310
79063: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79064: LD_VAR 0 1
79068: PPUSH
79069: LD_STRING \
79071: PUSH
79072: LD_INT 0
79074: PUSH
79075: LD_INT 0
79077: PUSH
79078: LD_INT 0
79080: PUSH
79081: LD_INT 0
79083: PUSH
79084: LD_INT 0
79086: PUSH
79087: LD_INT 0
79089: PUSH
79090: EMPTY
79091: LIST
79092: LIST
79093: LIST
79094: LIST
79095: LIST
79096: LIST
79097: LIST
79098: PUSH
79099: LD_STRING E
79101: PUSH
79102: LD_INT 0
79104: PUSH
79105: LD_INT 0
79107: PUSH
79108: LD_VAR 0 3
79112: PUSH
79113: LD_INT 0
79115: PUSH
79116: LD_INT 0
79118: PUSH
79119: LD_INT 0
79121: PUSH
79122: EMPTY
79123: LIST
79124: LIST
79125: LIST
79126: LIST
79127: LIST
79128: LIST
79129: LIST
79130: PUSH
79131: EMPTY
79132: LIST
79133: LIST
79134: PPUSH
79135: CALL_OW 447
// end ;
79139: LD_VAR 0 2
79143: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
79144: LD_INT 0
79146: PPUSH
79147: PPUSH
79148: PPUSH
// tmp := [ ] ;
79149: LD_ADDR_VAR 0 5
79153: PUSH
79154: EMPTY
79155: ST_TO_ADDR
// for i in units do
79156: LD_ADDR_VAR 0 4
79160: PUSH
79161: LD_VAR 0 1
79165: PUSH
79166: FOR_IN
79167: IFFALSE 79205
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
79169: LD_ADDR_VAR 0 5
79173: PUSH
79174: LD_VAR 0 5
79178: PPUSH
79179: LD_VAR 0 5
79183: PUSH
79184: LD_INT 1
79186: PLUS
79187: PPUSH
79188: LD_VAR 0 4
79192: PPUSH
79193: CALL_OW 256
79197: PPUSH
79198: CALL_OW 2
79202: ST_TO_ADDR
79203: GO 79166
79205: POP
79206: POP
// if not tmp then
79207: LD_VAR 0 5
79211: NOT
79212: IFFALSE 79216
// exit ;
79214: GO 79264
// if asc then
79216: LD_VAR 0 2
79220: IFFALSE 79244
// result := SortListByListAsc ( units , tmp ) else
79222: LD_ADDR_VAR 0 3
79226: PUSH
79227: LD_VAR 0 1
79231: PPUSH
79232: LD_VAR 0 5
79236: PPUSH
79237: CALL_OW 76
79241: ST_TO_ADDR
79242: GO 79264
// result := SortListByListDesc ( units , tmp ) ;
79244: LD_ADDR_VAR 0 3
79248: PUSH
79249: LD_VAR 0 1
79253: PPUSH
79254: LD_VAR 0 5
79258: PPUSH
79259: CALL_OW 77
79263: ST_TO_ADDR
// end ;
79264: LD_VAR 0 3
79268: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
79269: LD_INT 0
79271: PPUSH
79272: PPUSH
// task := GetTaskList ( mech ) ;
79273: LD_ADDR_VAR 0 4
79277: PUSH
79278: LD_VAR 0 1
79282: PPUSH
79283: CALL_OW 437
79287: ST_TO_ADDR
// if not task then
79288: LD_VAR 0 4
79292: NOT
79293: IFFALSE 79297
// exit ;
79295: GO 79339
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
79297: LD_ADDR_VAR 0 3
79301: PUSH
79302: LD_VAR 0 4
79306: PUSH
79307: LD_INT 1
79309: ARRAY
79310: PUSH
79311: LD_INT 1
79313: ARRAY
79314: PUSH
79315: LD_STRING r
79317: EQUAL
79318: PUSH
79319: LD_VAR 0 4
79323: PUSH
79324: LD_INT 1
79326: ARRAY
79327: PUSH
79328: LD_INT 4
79330: ARRAY
79331: PUSH
79332: LD_VAR 0 2
79336: EQUAL
79337: AND
79338: ST_TO_ADDR
// end ;
79339: LD_VAR 0 3
79343: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
79344: LD_INT 0
79346: PPUSH
// SetDir ( unit , d ) ;
79347: LD_VAR 0 1
79351: PPUSH
79352: LD_VAR 0 4
79356: PPUSH
79357: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
79361: LD_VAR 0 1
79365: PPUSH
79366: LD_VAR 0 2
79370: PPUSH
79371: LD_VAR 0 3
79375: PPUSH
79376: LD_VAR 0 5
79380: PPUSH
79381: CALL_OW 48
// end ;
79385: LD_VAR 0 6
79389: RET
// export function ToNaturalNumber ( number ) ; begin
79390: LD_INT 0
79392: PPUSH
// result := number div 1 ;
79393: LD_ADDR_VAR 0 2
79397: PUSH
79398: LD_VAR 0 1
79402: PUSH
79403: LD_INT 1
79405: DIV
79406: ST_TO_ADDR
// if number < 0 then
79407: LD_VAR 0 1
79411: PUSH
79412: LD_INT 0
79414: LESS
79415: IFFALSE 79425
// result := 0 ;
79417: LD_ADDR_VAR 0 2
79421: PUSH
79422: LD_INT 0
79424: ST_TO_ADDR
// end ;
79425: LD_VAR 0 2
79429: RET
// export function SortByClass ( units , class ) ; var un ; begin
79430: LD_INT 0
79432: PPUSH
79433: PPUSH
// if not units or not class then
79434: LD_VAR 0 1
79438: NOT
79439: PUSH
79440: LD_VAR 0 2
79444: NOT
79445: OR
79446: IFFALSE 79450
// exit ;
79448: GO 79545
// result := [ ] ;
79450: LD_ADDR_VAR 0 3
79454: PUSH
79455: EMPTY
79456: ST_TO_ADDR
// for un in units do
79457: LD_ADDR_VAR 0 4
79461: PUSH
79462: LD_VAR 0 1
79466: PUSH
79467: FOR_IN
79468: IFFALSE 79543
// if GetClass ( un ) = class then
79470: LD_VAR 0 4
79474: PPUSH
79475: CALL_OW 257
79479: PUSH
79480: LD_VAR 0 2
79484: EQUAL
79485: IFFALSE 79512
// result := Insert ( result , 1 , un ) else
79487: LD_ADDR_VAR 0 3
79491: PUSH
79492: LD_VAR 0 3
79496: PPUSH
79497: LD_INT 1
79499: PPUSH
79500: LD_VAR 0 4
79504: PPUSH
79505: CALL_OW 2
79509: ST_TO_ADDR
79510: GO 79541
// result := Replace ( result , result + 1 , un ) ;
79512: LD_ADDR_VAR 0 3
79516: PUSH
79517: LD_VAR 0 3
79521: PPUSH
79522: LD_VAR 0 3
79526: PUSH
79527: LD_INT 1
79529: PLUS
79530: PPUSH
79531: LD_VAR 0 4
79535: PPUSH
79536: CALL_OW 1
79540: ST_TO_ADDR
79541: GO 79467
79543: POP
79544: POP
// end ;
79545: LD_VAR 0 3
79549: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
79550: LD_INT 0
79552: PPUSH
79553: PPUSH
79554: PPUSH
79555: PPUSH
79556: PPUSH
79557: PPUSH
79558: PPUSH
// result := [ ] ;
79559: LD_ADDR_VAR 0 4
79563: PUSH
79564: EMPTY
79565: ST_TO_ADDR
// if x - r < 0 then
79566: LD_VAR 0 1
79570: PUSH
79571: LD_VAR 0 3
79575: MINUS
79576: PUSH
79577: LD_INT 0
79579: LESS
79580: IFFALSE 79592
// min_x := 0 else
79582: LD_ADDR_VAR 0 8
79586: PUSH
79587: LD_INT 0
79589: ST_TO_ADDR
79590: GO 79608
// min_x := x - r ;
79592: LD_ADDR_VAR 0 8
79596: PUSH
79597: LD_VAR 0 1
79601: PUSH
79602: LD_VAR 0 3
79606: MINUS
79607: ST_TO_ADDR
// if y - r < 0 then
79608: LD_VAR 0 2
79612: PUSH
79613: LD_VAR 0 3
79617: MINUS
79618: PUSH
79619: LD_INT 0
79621: LESS
79622: IFFALSE 79634
// min_y := 0 else
79624: LD_ADDR_VAR 0 7
79628: PUSH
79629: LD_INT 0
79631: ST_TO_ADDR
79632: GO 79650
// min_y := y - r ;
79634: LD_ADDR_VAR 0 7
79638: PUSH
79639: LD_VAR 0 2
79643: PUSH
79644: LD_VAR 0 3
79648: MINUS
79649: ST_TO_ADDR
// max_x := x + r ;
79650: LD_ADDR_VAR 0 9
79654: PUSH
79655: LD_VAR 0 1
79659: PUSH
79660: LD_VAR 0 3
79664: PLUS
79665: ST_TO_ADDR
// max_y := y + r ;
79666: LD_ADDR_VAR 0 10
79670: PUSH
79671: LD_VAR 0 2
79675: PUSH
79676: LD_VAR 0 3
79680: PLUS
79681: ST_TO_ADDR
// for _x = min_x to max_x do
79682: LD_ADDR_VAR 0 5
79686: PUSH
79687: DOUBLE
79688: LD_VAR 0 8
79692: DEC
79693: ST_TO_ADDR
79694: LD_VAR 0 9
79698: PUSH
79699: FOR_TO
79700: IFFALSE 79801
// for _y = min_y to max_y do
79702: LD_ADDR_VAR 0 6
79706: PUSH
79707: DOUBLE
79708: LD_VAR 0 7
79712: DEC
79713: ST_TO_ADDR
79714: LD_VAR 0 10
79718: PUSH
79719: FOR_TO
79720: IFFALSE 79797
// begin if not ValidHex ( _x , _y ) then
79722: LD_VAR 0 5
79726: PPUSH
79727: LD_VAR 0 6
79731: PPUSH
79732: CALL_OW 488
79736: NOT
79737: IFFALSE 79741
// continue ;
79739: GO 79719
// if GetResourceTypeXY ( _x , _y ) then
79741: LD_VAR 0 5
79745: PPUSH
79746: LD_VAR 0 6
79750: PPUSH
79751: CALL_OW 283
79755: IFFALSE 79795
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
79757: LD_ADDR_VAR 0 4
79761: PUSH
79762: LD_VAR 0 4
79766: PPUSH
79767: LD_VAR 0 4
79771: PUSH
79772: LD_INT 1
79774: PLUS
79775: PPUSH
79776: LD_VAR 0 5
79780: PUSH
79781: LD_VAR 0 6
79785: PUSH
79786: EMPTY
79787: LIST
79788: LIST
79789: PPUSH
79790: CALL_OW 1
79794: ST_TO_ADDR
// end ;
79795: GO 79719
79797: POP
79798: POP
79799: GO 79699
79801: POP
79802: POP
// end ;
79803: LD_VAR 0 4
79807: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
79808: LD_INT 0
79810: PPUSH
79811: PPUSH
79812: PPUSH
79813: PPUSH
79814: PPUSH
79815: PPUSH
79816: PPUSH
79817: PPUSH
// if not units then
79818: LD_VAR 0 1
79822: NOT
79823: IFFALSE 79827
// exit ;
79825: GO 80351
// result := UnitFilter ( units , [ f_ok ] ) ;
79827: LD_ADDR_VAR 0 3
79831: PUSH
79832: LD_VAR 0 1
79836: PPUSH
79837: LD_INT 50
79839: PUSH
79840: EMPTY
79841: LIST
79842: PPUSH
79843: CALL_OW 72
79847: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
79848: LD_ADDR_VAR 0 8
79852: PUSH
79853: LD_VAR 0 1
79857: PUSH
79858: LD_INT 1
79860: ARRAY
79861: PPUSH
79862: CALL_OW 255
79866: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
79867: LD_ADDR_VAR 0 10
79871: PUSH
79872: LD_INT 29
79874: PUSH
79875: LD_INT 91
79877: PUSH
79878: LD_INT 49
79880: PUSH
79881: EMPTY
79882: LIST
79883: LIST
79884: LIST
79885: ST_TO_ADDR
// if not result then
79886: LD_VAR 0 3
79890: NOT
79891: IFFALSE 79895
// exit ;
79893: GO 80351
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
79895: LD_ADDR_VAR 0 5
79899: PUSH
79900: LD_INT 81
79902: PUSH
79903: LD_VAR 0 8
79907: PUSH
79908: EMPTY
79909: LIST
79910: LIST
79911: PPUSH
79912: CALL_OW 69
79916: ST_TO_ADDR
// for i in result do
79917: LD_ADDR_VAR 0 4
79921: PUSH
79922: LD_VAR 0 3
79926: PUSH
79927: FOR_IN
79928: IFFALSE 80349
// begin tag := GetTag ( i ) + 1 ;
79930: LD_ADDR_VAR 0 9
79934: PUSH
79935: LD_VAR 0 4
79939: PPUSH
79940: CALL_OW 110
79944: PUSH
79945: LD_INT 1
79947: PLUS
79948: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
79949: LD_ADDR_VAR 0 7
79953: PUSH
79954: LD_VAR 0 4
79958: PPUSH
79959: CALL_OW 250
79963: PPUSH
79964: LD_VAR 0 4
79968: PPUSH
79969: CALL_OW 251
79973: PPUSH
79974: LD_INT 6
79976: PPUSH
79977: CALL 79550 0 3
79981: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
79982: LD_VAR 0 4
79986: PPUSH
79987: CALL_OW 247
79991: PUSH
79992: LD_INT 2
79994: EQUAL
79995: PUSH
79996: LD_VAR 0 7
80000: AND
80001: PUSH
80002: LD_VAR 0 4
80006: PPUSH
80007: CALL_OW 264
80011: PUSH
80012: LD_VAR 0 10
80016: IN
80017: NOT
80018: AND
80019: IFFALSE 80058
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
80021: LD_VAR 0 4
80025: PPUSH
80026: LD_VAR 0 7
80030: PUSH
80031: LD_INT 1
80033: ARRAY
80034: PUSH
80035: LD_INT 1
80037: ARRAY
80038: PPUSH
80039: LD_VAR 0 7
80043: PUSH
80044: LD_INT 1
80046: ARRAY
80047: PUSH
80048: LD_INT 2
80050: ARRAY
80051: PPUSH
80052: CALL_OW 116
80056: GO 80347
// if path > tag then
80058: LD_VAR 0 2
80062: PUSH
80063: LD_VAR 0 9
80067: GREATER
80068: IFFALSE 80276
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
80070: LD_ADDR_VAR 0 6
80074: PUSH
80075: LD_VAR 0 5
80079: PPUSH
80080: LD_INT 91
80082: PUSH
80083: LD_VAR 0 4
80087: PUSH
80088: LD_INT 8
80090: PUSH
80091: EMPTY
80092: LIST
80093: LIST
80094: LIST
80095: PPUSH
80096: CALL_OW 72
80100: ST_TO_ADDR
// if nearEnemy then
80101: LD_VAR 0 6
80105: IFFALSE 80174
// begin if GetWeapon ( i ) = ru_time_lapser then
80107: LD_VAR 0 4
80111: PPUSH
80112: CALL_OW 264
80116: PUSH
80117: LD_INT 49
80119: EQUAL
80120: IFFALSE 80148
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
80122: LD_VAR 0 4
80126: PPUSH
80127: LD_VAR 0 6
80131: PPUSH
80132: LD_VAR 0 4
80136: PPUSH
80137: CALL_OW 74
80141: PPUSH
80142: CALL_OW 112
80146: GO 80172
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
80148: LD_VAR 0 4
80152: PPUSH
80153: LD_VAR 0 6
80157: PPUSH
80158: LD_VAR 0 4
80162: PPUSH
80163: CALL_OW 74
80167: PPUSH
80168: CALL_OW 115
// end else
80172: GO 80274
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
80174: LD_VAR 0 4
80178: PPUSH
80179: LD_VAR 0 2
80183: PUSH
80184: LD_VAR 0 9
80188: ARRAY
80189: PUSH
80190: LD_INT 1
80192: ARRAY
80193: PPUSH
80194: LD_VAR 0 2
80198: PUSH
80199: LD_VAR 0 9
80203: ARRAY
80204: PUSH
80205: LD_INT 2
80207: ARRAY
80208: PPUSH
80209: CALL_OW 297
80213: PUSH
80214: LD_INT 6
80216: GREATER
80217: IFFALSE 80260
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
80219: LD_VAR 0 4
80223: PPUSH
80224: LD_VAR 0 2
80228: PUSH
80229: LD_VAR 0 9
80233: ARRAY
80234: PUSH
80235: LD_INT 1
80237: ARRAY
80238: PPUSH
80239: LD_VAR 0 2
80243: PUSH
80244: LD_VAR 0 9
80248: ARRAY
80249: PUSH
80250: LD_INT 2
80252: ARRAY
80253: PPUSH
80254: CALL_OW 114
80258: GO 80274
// SetTag ( i , tag ) ;
80260: LD_VAR 0 4
80264: PPUSH
80265: LD_VAR 0 9
80269: PPUSH
80270: CALL_OW 109
// end else
80274: GO 80347
// if enemy then
80276: LD_VAR 0 5
80280: IFFALSE 80347
// begin if GetWeapon ( i ) = ru_time_lapser then
80282: LD_VAR 0 4
80286: PPUSH
80287: CALL_OW 264
80291: PUSH
80292: LD_INT 49
80294: EQUAL
80295: IFFALSE 80323
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
80297: LD_VAR 0 4
80301: PPUSH
80302: LD_VAR 0 5
80306: PPUSH
80307: LD_VAR 0 4
80311: PPUSH
80312: CALL_OW 74
80316: PPUSH
80317: CALL_OW 112
80321: GO 80347
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
80323: LD_VAR 0 4
80327: PPUSH
80328: LD_VAR 0 5
80332: PPUSH
80333: LD_VAR 0 4
80337: PPUSH
80338: CALL_OW 74
80342: PPUSH
80343: CALL_OW 115
// end ; end ;
80347: GO 79927
80349: POP
80350: POP
// end ;
80351: LD_VAR 0 3
80355: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
80356: LD_INT 0
80358: PPUSH
80359: PPUSH
80360: PPUSH
// if not unit or IsInUnit ( unit ) then
80361: LD_VAR 0 1
80365: NOT
80366: PUSH
80367: LD_VAR 0 1
80371: PPUSH
80372: CALL_OW 310
80376: OR
80377: IFFALSE 80381
// exit ;
80379: GO 80472
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
80381: LD_ADDR_VAR 0 4
80385: PUSH
80386: LD_VAR 0 1
80390: PPUSH
80391: CALL_OW 250
80395: PPUSH
80396: LD_VAR 0 2
80400: PPUSH
80401: LD_INT 1
80403: PPUSH
80404: CALL_OW 272
80408: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
80409: LD_ADDR_VAR 0 5
80413: PUSH
80414: LD_VAR 0 1
80418: PPUSH
80419: CALL_OW 251
80423: PPUSH
80424: LD_VAR 0 2
80428: PPUSH
80429: LD_INT 1
80431: PPUSH
80432: CALL_OW 273
80436: ST_TO_ADDR
// if ValidHex ( x , y ) then
80437: LD_VAR 0 4
80441: PPUSH
80442: LD_VAR 0 5
80446: PPUSH
80447: CALL_OW 488
80451: IFFALSE 80472
// ComTurnXY ( unit , x , y ) ;
80453: LD_VAR 0 1
80457: PPUSH
80458: LD_VAR 0 4
80462: PPUSH
80463: LD_VAR 0 5
80467: PPUSH
80468: CALL_OW 118
// end ;
80472: LD_VAR 0 3
80476: RET
// export function SeeUnits ( side , units ) ; var i ; begin
80477: LD_INT 0
80479: PPUSH
80480: PPUSH
// result := false ;
80481: LD_ADDR_VAR 0 3
80485: PUSH
80486: LD_INT 0
80488: ST_TO_ADDR
// if not units then
80489: LD_VAR 0 2
80493: NOT
80494: IFFALSE 80498
// exit ;
80496: GO 80543
// for i in units do
80498: LD_ADDR_VAR 0 4
80502: PUSH
80503: LD_VAR 0 2
80507: PUSH
80508: FOR_IN
80509: IFFALSE 80541
// if See ( side , i ) then
80511: LD_VAR 0 1
80515: PPUSH
80516: LD_VAR 0 4
80520: PPUSH
80521: CALL_OW 292
80525: IFFALSE 80539
// begin result := true ;
80527: LD_ADDR_VAR 0 3
80531: PUSH
80532: LD_INT 1
80534: ST_TO_ADDR
// exit ;
80535: POP
80536: POP
80537: GO 80543
// end ;
80539: GO 80508
80541: POP
80542: POP
// end ;
80543: LD_VAR 0 3
80547: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
80548: LD_INT 0
80550: PPUSH
80551: PPUSH
80552: PPUSH
80553: PPUSH
// if not unit or not points then
80554: LD_VAR 0 1
80558: NOT
80559: PUSH
80560: LD_VAR 0 2
80564: NOT
80565: OR
80566: IFFALSE 80570
// exit ;
80568: GO 80660
// dist := 99999 ;
80570: LD_ADDR_VAR 0 5
80574: PUSH
80575: LD_INT 99999
80577: ST_TO_ADDR
// for i in points do
80578: LD_ADDR_VAR 0 4
80582: PUSH
80583: LD_VAR 0 2
80587: PUSH
80588: FOR_IN
80589: IFFALSE 80658
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
80591: LD_ADDR_VAR 0 6
80595: PUSH
80596: LD_VAR 0 1
80600: PPUSH
80601: LD_VAR 0 4
80605: PUSH
80606: LD_INT 1
80608: ARRAY
80609: PPUSH
80610: LD_VAR 0 4
80614: PUSH
80615: LD_INT 2
80617: ARRAY
80618: PPUSH
80619: CALL_OW 297
80623: ST_TO_ADDR
// if tmpDist < dist then
80624: LD_VAR 0 6
80628: PUSH
80629: LD_VAR 0 5
80633: LESS
80634: IFFALSE 80656
// begin result := i ;
80636: LD_ADDR_VAR 0 3
80640: PUSH
80641: LD_VAR 0 4
80645: ST_TO_ADDR
// dist := tmpDist ;
80646: LD_ADDR_VAR 0 5
80650: PUSH
80651: LD_VAR 0 6
80655: ST_TO_ADDR
// end ; end ;
80656: GO 80588
80658: POP
80659: POP
// end ;
80660: LD_VAR 0 3
80664: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
80665: LD_INT 0
80667: PPUSH
// uc_side := side ;
80668: LD_ADDR_OWVAR 20
80672: PUSH
80673: LD_VAR 0 1
80677: ST_TO_ADDR
// uc_nation := 3 ;
80678: LD_ADDR_OWVAR 21
80682: PUSH
80683: LD_INT 3
80685: ST_TO_ADDR
// vc_chassis := 25 ;
80686: LD_ADDR_OWVAR 37
80690: PUSH
80691: LD_INT 25
80693: ST_TO_ADDR
// vc_engine := engine_siberite ;
80694: LD_ADDR_OWVAR 39
80698: PUSH
80699: LD_INT 3
80701: ST_TO_ADDR
// vc_control := control_computer ;
80702: LD_ADDR_OWVAR 38
80706: PUSH
80707: LD_INT 3
80709: ST_TO_ADDR
// vc_weapon := 59 ;
80710: LD_ADDR_OWVAR 40
80714: PUSH
80715: LD_INT 59
80717: ST_TO_ADDR
// result := CreateVehicle ;
80718: LD_ADDR_VAR 0 5
80722: PUSH
80723: CALL_OW 45
80727: ST_TO_ADDR
// SetDir ( result , d ) ;
80728: LD_VAR 0 5
80732: PPUSH
80733: LD_VAR 0 4
80737: PPUSH
80738: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
80742: LD_VAR 0 5
80746: PPUSH
80747: LD_VAR 0 2
80751: PPUSH
80752: LD_VAR 0 3
80756: PPUSH
80757: LD_INT 0
80759: PPUSH
80760: CALL_OW 48
// end ;
80764: LD_VAR 0 5
80768: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
80769: LD_INT 0
80771: PPUSH
80772: PPUSH
80773: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
80774: LD_ADDR_VAR 0 2
80778: PUSH
80779: LD_INT 0
80781: PUSH
80782: LD_INT 0
80784: PUSH
80785: LD_INT 0
80787: PUSH
80788: LD_INT 0
80790: PUSH
80791: EMPTY
80792: LIST
80793: LIST
80794: LIST
80795: LIST
80796: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
80797: LD_VAR 0 1
80801: NOT
80802: PUSH
80803: LD_VAR 0 1
80807: PPUSH
80808: CALL_OW 264
80812: PUSH
80813: LD_INT 12
80815: PUSH
80816: LD_INT 51
80818: PUSH
80819: LD_INT 32
80821: PUSH
80822: LD_INT 89
80824: PUSH
80825: EMPTY
80826: LIST
80827: LIST
80828: LIST
80829: LIST
80830: IN
80831: NOT
80832: OR
80833: IFFALSE 80837
// exit ;
80835: GO 80935
// for i := 1 to 3 do
80837: LD_ADDR_VAR 0 3
80841: PUSH
80842: DOUBLE
80843: LD_INT 1
80845: DEC
80846: ST_TO_ADDR
80847: LD_INT 3
80849: PUSH
80850: FOR_TO
80851: IFFALSE 80933
// begin tmp := GetCargo ( cargo , i ) ;
80853: LD_ADDR_VAR 0 4
80857: PUSH
80858: LD_VAR 0 1
80862: PPUSH
80863: LD_VAR 0 3
80867: PPUSH
80868: CALL_OW 289
80872: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
80873: LD_ADDR_VAR 0 2
80877: PUSH
80878: LD_VAR 0 2
80882: PPUSH
80883: LD_VAR 0 3
80887: PPUSH
80888: LD_VAR 0 4
80892: PPUSH
80893: CALL_OW 1
80897: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
80898: LD_ADDR_VAR 0 2
80902: PUSH
80903: LD_VAR 0 2
80907: PPUSH
80908: LD_INT 4
80910: PPUSH
80911: LD_VAR 0 2
80915: PUSH
80916: LD_INT 4
80918: ARRAY
80919: PUSH
80920: LD_VAR 0 4
80924: PLUS
80925: PPUSH
80926: CALL_OW 1
80930: ST_TO_ADDR
// end ;
80931: GO 80850
80933: POP
80934: POP
// end ;
80935: LD_VAR 0 2
80939: RET
// export function Length ( array ) ; begin
80940: LD_INT 0
80942: PPUSH
// result := array + 0 ;
80943: LD_ADDR_VAR 0 2
80947: PUSH
80948: LD_VAR 0 1
80952: PUSH
80953: LD_INT 0
80955: PLUS
80956: ST_TO_ADDR
// end ;
80957: LD_VAR 0 2
80961: RET
// export function PrepareArray ( array ) ; begin
80962: LD_INT 0
80964: PPUSH
// result := array diff 0 ;
80965: LD_ADDR_VAR 0 2
80969: PUSH
80970: LD_VAR 0 1
80974: PUSH
80975: LD_INT 0
80977: DIFF
80978: ST_TO_ADDR
// if not result [ 1 ] then
80979: LD_VAR 0 2
80983: PUSH
80984: LD_INT 1
80986: ARRAY
80987: NOT
80988: IFFALSE 81008
// result := Delete ( result , 1 ) ;
80990: LD_ADDR_VAR 0 2
80994: PUSH
80995: LD_VAR 0 2
80999: PPUSH
81000: LD_INT 1
81002: PPUSH
81003: CALL_OW 3
81007: ST_TO_ADDR
// end ;
81008: LD_VAR 0 2
81012: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
81013: LD_INT 0
81015: PPUSH
81016: PPUSH
81017: PPUSH
81018: PPUSH
// sibRocketRange := 25 ;
81019: LD_ADDR_VAR 0 6
81023: PUSH
81024: LD_INT 25
81026: ST_TO_ADDR
// result := false ;
81027: LD_ADDR_VAR 0 4
81031: PUSH
81032: LD_INT 0
81034: ST_TO_ADDR
// for i := 0 to 5 do
81035: LD_ADDR_VAR 0 5
81039: PUSH
81040: DOUBLE
81041: LD_INT 0
81043: DEC
81044: ST_TO_ADDR
81045: LD_INT 5
81047: PUSH
81048: FOR_TO
81049: IFFALSE 81116
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
81051: LD_VAR 0 1
81055: PPUSH
81056: LD_VAR 0 5
81060: PPUSH
81061: LD_VAR 0 6
81065: PPUSH
81066: CALL_OW 272
81070: PPUSH
81071: LD_VAR 0 2
81075: PPUSH
81076: LD_VAR 0 5
81080: PPUSH
81081: LD_VAR 0 6
81085: PPUSH
81086: CALL_OW 273
81090: PPUSH
81091: LD_VAR 0 3
81095: PPUSH
81096: CALL_OW 309
81100: IFFALSE 81114
// begin result := true ;
81102: LD_ADDR_VAR 0 4
81106: PUSH
81107: LD_INT 1
81109: ST_TO_ADDR
// exit ;
81110: POP
81111: POP
81112: GO 81118
// end ;
81114: GO 81048
81116: POP
81117: POP
// end ;
81118: LD_VAR 0 4
81122: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
81123: LD_INT 0
81125: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
81126: LD_VAR 0 1
81130: PPUSH
81131: LD_VAR 0 2
81135: PPUSH
81136: LD_INT 0
81138: PPUSH
81139: LD_INT 0
81141: PPUSH
81142: LD_INT 1
81144: PPUSH
81145: LD_INT 0
81147: PPUSH
81148: CALL_OW 587
// end ; end_of_file
81152: LD_VAR 0 3
81156: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
81157: LD_VAR 0 1
81161: PUSH
81162: LD_INT 200
81164: DOUBLE
81165: GREATEREQUAL
81166: IFFALSE 81174
81168: LD_INT 299
81170: DOUBLE
81171: LESSEQUAL
81172: IFTRUE 81176
81174: GO 81208
81176: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
81177: LD_VAR 0 1
81181: PPUSH
81182: LD_VAR 0 2
81186: PPUSH
81187: LD_VAR 0 3
81191: PPUSH
81192: LD_VAR 0 4
81196: PPUSH
81197: LD_VAR 0 5
81201: PPUSH
81202: CALL 35823 0 5
81206: GO 81285
81208: LD_INT 300
81210: DOUBLE
81211: GREATEREQUAL
81212: IFFALSE 81220
81214: LD_INT 399
81216: DOUBLE
81217: LESSEQUAL
81218: IFTRUE 81222
81220: GO 81284
81222: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
81223: LD_VAR 0 1
81227: PPUSH
81228: LD_VAR 0 2
81232: PPUSH
81233: LD_VAR 0 3
81237: PPUSH
81238: LD_VAR 0 4
81242: PPUSH
81243: LD_VAR 0 5
81247: PPUSH
81248: LD_VAR 0 6
81252: PPUSH
81253: LD_VAR 0 7
81257: PPUSH
81258: LD_VAR 0 8
81262: PPUSH
81263: LD_VAR 0 9
81267: PPUSH
81268: LD_VAR 0 10
81272: PPUSH
81273: LD_VAR 0 11
81277: PPUSH
81278: CALL 32156 0 11
81282: GO 81285
81284: POP
// end ;
81285: PPOPN 11
81287: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
81288: LD_VAR 0 1
81292: PPUSH
81293: LD_VAR 0 2
81297: PPUSH
81298: LD_VAR 0 3
81302: PPUSH
81303: LD_VAR 0 4
81307: PPUSH
81308: LD_VAR 0 5
81312: PPUSH
81313: CALL 35559 0 5
// end ; end_of_file
81317: PPOPN 5
81319: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
81320: LD_VAR 0 1
81324: PPUSH
81325: LD_VAR 0 2
81329: PPUSH
81330: LD_VAR 0 3
81334: PPUSH
81335: LD_VAR 0 4
81339: PPUSH
81340: LD_VAR 0 5
81344: PPUSH
81345: LD_VAR 0 6
81349: PPUSH
81350: CALL 19808 0 6
// end ;
81354: PPOPN 6
81356: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
81357: LD_INT 0
81359: PPUSH
// begin if not units then
81360: LD_VAR 0 1
81364: NOT
81365: IFFALSE 81369
// exit ;
81367: GO 81369
// end ;
81369: PPOPN 7
81371: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
81372: CALL 19712 0 0
// end ;
81376: PPOPN 1
81378: END
