// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// InitGlobalVariables ;
  15: CALL 18312 0 0
// PrepareTrigger ;
  19: CALL 44 0 0
// PrepareVulcanoBase ;
  23: CALL 924 0 0
// PrepareRussian ;
  27: CALL 3341 0 0
// PrepareLegion ;
  31: CALL 7105 0 0
// Action ;
  35: CALL 10615 0 0
// InitArt ;
  39: CALL 245 0 0
// end ;
  43: END
// export base_captured , russian_prepared , ru_can_attack , ru_sib_bomb , chance_to_bomb , player_res_art , artifact_progress , player_artifact_ready , art_icon , time_res_art , player_commander , time_to_reuse , mine_vulc , medal_enabled , debug , dead_counter , kill_counter , veh_counter , tech_counter , sib_contamin_counter , event_legion_attack , event_russian_attack , event_alliance_attack ; function PrepareTrigger ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 15
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// base_captured := false ;
  55: LD_ADDR_EXP 1
  59: PUSH
  60: LD_INT 0
  62: ST_TO_ADDR
// russian_prepared := false ;
  63: LD_ADDR_EXP 2
  67: PUSH
  68: LD_INT 0
  70: ST_TO_ADDR
// ru_can_attack := false ;
  71: LD_ADDR_EXP 3
  75: PUSH
  76: LD_INT 0
  78: ST_TO_ADDR
// ru_sib_bomb := false ;
  79: LD_ADDR_EXP 4
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// chance_to_bomb := [ 5 , 10 , 25 ] [ Difficulty ] ;
  87: LD_ADDR_EXP 5
  91: PUSH
  92: LD_INT 5
  94: PUSH
  95: LD_INT 10
  97: PUSH
  98: LD_INT 25
 100: PUSH
 101: EMPTY
 102: LIST
 103: LIST
 104: LIST
 105: PUSH
 106: LD_OWVAR 67
 110: ARRAY
 111: ST_TO_ADDR
// player_res_art := false ;
 112: LD_ADDR_EXP 6
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// player_artifact_ready := false ;
 120: LD_ADDR_EXP 8
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// art_icon := art_use_atom ;
 128: LD_ADDR_EXP 9
 132: PUSH
 133: LD_INT 7
 135: ST_TO_ADDR
// time_res_art := 600 ;
 136: LD_ADDR_EXP 10
 140: PUSH
 141: LD_INT 600
 143: ST_TO_ADDR
// time_to_reuse := 10 10$00 ;
 144: LD_ADDR_EXP 12
 148: PUSH
 149: LD_INT 21000
 151: ST_TO_ADDR
// mine_vulc := false ;
 152: LD_ADDR_EXP 13
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// medal_enabled := false ;
 160: LD_ADDR_EXP 14
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// dead_counter := 0 ;
 168: LD_ADDR_EXP 16
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// kill_counter := 0 ;
 176: LD_ADDR_EXP 17
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// veh_counter := 0 ;
 184: LD_ADDR_EXP 18
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// tech_counter := 0 ;
 192: LD_ADDR_EXP 19
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// sib_contamin_counter := 0 ;
 200: LD_ADDR_EXP 20
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// artifact_progress := 0 ;
 208: LD_ADDR_EXP 7
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// event_legion_attack := 1 ;
 216: LD_ADDR_EXP 21
 220: PUSH
 221: LD_INT 1
 223: ST_TO_ADDR
// event_russian_attack := 2 ;
 224: LD_ADDR_EXP 22
 228: PUSH
 229: LD_INT 2
 231: ST_TO_ADDR
// event_alliance_attack := 3 ;
 232: LD_ADDR_EXP 23
 236: PUSH
 237: LD_INT 3
 239: ST_TO_ADDR
// end ;
 240: LD_VAR 0 1
 244: RET
// function InitArt ; begin
 245: LD_INT 0
 247: PPUSH
// SetArtifactRes ( your_side , true ) ;
 248: LD_OWVAR 2
 252: PPUSH
 253: LD_INT 1
 255: PPUSH
 256: CALL_OW 467
// end ; end_of_file
 260: LD_VAR 0 1
 264: RET
// export us_commander , us_force , us_skill , us_guy ; export function PrepareAmerican ; var i , filter , un , team ; begin
 265: LD_INT 0
 267: PPUSH
 268: PPUSH
 269: PPUSH
 270: PPUSH
 271: PPUSH
// us_skill := [ 7 , 6 , 5 ] [ Difficulty ] ;
 272: LD_ADDR_EXP 26
 276: PUSH
 277: LD_INT 7
 279: PUSH
 280: LD_INT 6
 282: PUSH
 283: LD_INT 5
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: LIST
 290: PUSH
 291: LD_OWVAR 67
 295: ARRAY
 296: ST_TO_ADDR
// us_force := [ ] ;
 297: LD_ADDR_EXP 25
 301: PUSH
 302: EMPTY
 303: ST_TO_ADDR
// RemoveEnvironmentArea ( evn ) ;
 304: LD_INT 17
 306: PPUSH
 307: CALL_OW 355
// PrepareAllianceAI ( ) ;
 311: CALL 15613 0 0
// uc_side := 1 ;
 315: LD_ADDR_OWVAR 20
 319: PUSH
 320: LD_INT 1
 322: ST_TO_ADDR
// uc_nation := nation_american ;
 323: LD_ADDR_OWVAR 21
 327: PUSH
 328: LD_INT 1
 330: ST_TO_ADDR
// hc_gallery :=  ;
 331: LD_ADDR_OWVAR 33
 335: PUSH
 336: LD_STRING 
 338: ST_TO_ADDR
// hc_name :=  ;
 339: LD_ADDR_OWVAR 26
 343: PUSH
 344: LD_STRING 
 346: ST_TO_ADDR
// hc_importance := 0 ;
 347: LD_ADDR_OWVAR 32
 351: PUSH
 352: LD_INT 0
 354: ST_TO_ADDR
// for i = 1 to 11 do
 355: LD_ADDR_VAR 0 2
 359: PUSH
 360: DOUBLE
 361: LD_INT 1
 363: DEC
 364: ST_TO_ADDR
 365: LD_INT 11
 367: PUSH
 368: FOR_TO
 369: IFFALSE 422
// begin PrepareHuman ( false , Rand ( 1 , 4 ) , us_skill ) ;
 371: LD_INT 0
 373: PPUSH
 374: LD_INT 1
 376: PPUSH
 377: LD_INT 4
 379: PPUSH
 380: CALL_OW 12
 384: PPUSH
 385: LD_EXP 26
 389: PPUSH
 390: CALL_OW 380
// un := CreateHuman ;
 394: LD_ADDR_VAR 0 4
 398: PUSH
 399: CALL_OW 44
 403: ST_TO_ADDR
// us_force := us_force ^ un ;
 404: LD_ADDR_EXP 25
 408: PUSH
 409: LD_EXP 25
 413: PUSH
 414: LD_VAR 0 4
 418: ADD
 419: ST_TO_ADDR
// end ;
 420: GO 368
 422: POP
 423: POP
// hc_importance := 100 ;
 424: LD_ADDR_OWVAR 32
 428: PUSH
 429: LD_INT 100
 431: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , us_skill ) ;
 432: LD_INT 1
 434: PPUSH
 435: LD_INT 1
 437: PPUSH
 438: LD_EXP 26
 442: PPUSH
 443: CALL_OW 380
// us_commander := CreateHuman ;
 447: LD_ADDR_EXP 24
 451: PUSH
 452: CALL_OW 44
 456: ST_TO_ADDR
// player_commander := us_commander ;
 457: LD_ADDR_EXP 11
 461: PUSH
 462: LD_EXP 24
 466: ST_TO_ADDR
// team := CharacterSelection ( text , [ 6 , 5 , 4 ] [ Difficulty ] , [ 6 , 5 , 4 ] [ Difficulty ] , [ sel_change_class , us_commander , sel_changeable , sel_not_hired ] ^ us_force , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , [ 5 , 5 , - 1 ] [ Difficulty ] ] ) ;
 467: LD_ADDR_VAR 0 5
 471: PUSH
 472: LD_STRING text
 474: PPUSH
 475: LD_INT 6
 477: PUSH
 478: LD_INT 5
 480: PUSH
 481: LD_INT 4
 483: PUSH
 484: EMPTY
 485: LIST
 486: LIST
 487: LIST
 488: PUSH
 489: LD_OWVAR 67
 493: ARRAY
 494: PPUSH
 495: LD_INT 6
 497: PUSH
 498: LD_INT 5
 500: PUSH
 501: LD_INT 4
 503: PUSH
 504: EMPTY
 505: LIST
 506: LIST
 507: LIST
 508: PUSH
 509: LD_OWVAR 67
 513: ARRAY
 514: PPUSH
 515: LD_INT -5
 517: PUSH
 518: LD_EXP 24
 522: PUSH
 523: LD_INT -3
 525: PUSH
 526: LD_INT -2
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: LIST
 533: LIST
 534: PUSH
 535: LD_EXP 25
 539: ADD
 540: PPUSH
 541: LD_INT 1
 543: PUSH
 544: LD_INT 3
 546: PUSH
 547: LD_INT 2
 549: PUSH
 550: LD_INT 1
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: PUSH
 557: LD_INT 4
 559: PUSH
 560: LD_INT 1
 562: PUSH
 563: EMPTY
 564: LIST
 565: LIST
 566: PUSH
 567: LD_INT 5
 569: PUSH
 570: LD_INT 5
 572: PUSH
 573: LD_INT 1
 575: NEG
 576: PUSH
 577: EMPTY
 578: LIST
 579: LIST
 580: LIST
 581: PUSH
 582: LD_OWVAR 67
 586: ARRAY
 587: PUSH
 588: EMPTY
 589: LIST
 590: LIST
 591: LIST
 592: LIST
 593: LIST
 594: PPUSH
 595: CALL_OW 42
 599: ST_TO_ADDR
// team := team ^ us_commander ;
 600: LD_ADDR_VAR 0 5
 604: PUSH
 605: LD_VAR 0 5
 609: PUSH
 610: LD_EXP 24
 614: ADD
 615: ST_TO_ADDR
// for i = 1 to team do
 616: LD_ADDR_VAR 0 2
 620: PUSH
 621: DOUBLE
 622: LD_INT 1
 624: DEC
 625: ST_TO_ADDR
 626: LD_VAR 0 5
 630: PUSH
 631: FOR_TO
 632: IFFALSE 657
// PlaceUnitArea ( team [ i ] , start_north , false ) ;
 634: LD_VAR 0 5
 638: PUSH
 639: LD_VAR 0 2
 643: ARRAY
 644: PPUSH
 645: LD_INT 1
 647: PPUSH
 648: LD_INT 0
 650: PPUSH
 651: CALL_OW 49
 655: GO 631
 657: POP
 658: POP
// end ;
 659: LD_VAR 0 1
 663: RET
// every 0 0$38 + 2 2$30 trigger tick < 73500 do
 664: LD_OWVAR 1
 668: PUSH
 669: LD_INT 73500
 671: LESS
 672: IFFALSE 699
 674: GO 676
 676: DISABLE
// begin enable ;
 677: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , extra_crates , true ) ;
 678: LD_INT 1
 680: PPUSH
 681: LD_INT 5
 683: PPUSH
 684: CALL_OW 12
 688: PPUSH
 689: LD_INT 23
 691: PPUSH
 692: LD_INT 1
 694: PPUSH
 695: CALL_OW 55
// end ;
 699: END
// every 1 1$10 do var time , p , l ;
 700: GO 702
 702: DISABLE
 703: LD_INT 0
 705: PPUSH
 706: PPUSH
 707: PPUSH
// begin time := 0 0$44 ;
 708: LD_ADDR_VAR 0 1
 712: PUSH
 713: LD_INT 1540
 715: ST_TO_ADDR
// l := 0 ;
 716: LD_ADDR_VAR 0 3
 720: PUSH
 721: LD_INT 0
 723: ST_TO_ADDR
// repeat begin Wait ( time ) ;
 724: LD_VAR 0 1
 728: PPUSH
 729: CALL_OW 67
// l := l + 1 ;
 733: LD_ADDR_VAR 0 3
 737: PUSH
 738: LD_VAR 0 3
 742: PUSH
 743: LD_INT 1
 745: PLUS
 746: ST_TO_ADDR
// if GetListOfCratesInArea ( us_crates ) < 20 then
 747: LD_INT 12
 749: PPUSH
 750: CALL_OW 435
 754: PUSH
 755: LD_INT 20
 757: LESS
 758: IFFALSE 817
// begin CreateCratesArea ( Rand ( 1 , 5 ) , us_crates , true ) ;
 760: LD_INT 1
 762: PPUSH
 763: LD_INT 5
 765: PPUSH
 766: CALL_OW 12
 770: PPUSH
 771: LD_INT 12
 773: PPUSH
 774: LD_INT 1
 776: PPUSH
 777: CALL_OW 55
// Wait ( Rand ( 0 0$39 , 0 0$48 ) ) ;
 781: LD_INT 1365
 783: PPUSH
 784: LD_INT 1680
 786: PPUSH
 787: CALL_OW 12
 791: PPUSH
 792: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 5 ) , us_crates , true ) ;
 796: LD_INT 1
 798: PPUSH
 799: LD_INT 5
 801: PPUSH
 802: CALL_OW 12
 806: PPUSH
 807: LD_INT 12
 809: PPUSH
 810: LD_INT 1
 812: PPUSH
 813: CALL_OW 55
// end ; p := Rand ( 0 , 1 ) ;
 817: LD_ADDR_VAR 0 2
 821: PUSH
 822: LD_INT 0
 824: PPUSH
 825: LD_INT 1
 827: PPUSH
 828: CALL_OW 12
 832: ST_TO_ADDR
// if p then
 833: LD_VAR 0 2
 837: IFFALSE 872
// begin Wait ( Rand ( 0 0$09 , 0 0$20 ) ) ;
 839: LD_INT 315
 841: PPUSH
 842: LD_INT 700
 844: PPUSH
 845: CALL_OW 12
 849: PPUSH
 850: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 4 ) , true ) ;
 854: LD_INT 1
 856: PPUSH
 857: LD_INT 4
 859: PPUSH
 860: CALL_OW 12
 864: PPUSH
 865: LD_INT 1
 867: PPUSH
 868: CALL_OW 57
// end ; if l mod [ 15 , 13 , 11 ] [ Difficulty ] = 0 then
 872: LD_VAR 0 3
 876: PUSH
 877: LD_INT 15
 879: PUSH
 880: LD_INT 13
 882: PUSH
 883: LD_INT 11
 885: PUSH
 886: EMPTY
 887: LIST
 888: LIST
 889: LIST
 890: PUSH
 891: LD_OWVAR 67
 895: ARRAY
 896: MOD
 897: PUSH
 898: LD_INT 0
 900: EQUAL
 901: IFFALSE 917
// time := time + 2 2$00 ;
 903: LD_ADDR_VAR 0 1
 907: PUSH
 908: LD_VAR 0 1
 912: PUSH
 913: LD_INT 4200
 915: PLUS
 916: ST_TO_ADDR
// end until false ;
 917: LD_INT 0
 919: IFFALSE 724
// end ; end_of_file
 921: PPOPN 3
 923: END
// export function PrepareVulcanoBase ; var i , filter , hp , un , area , russian_in_base ; begin
 924: LD_INT 0
 926: PPUSH
 927: PPUSH
 928: PPUSH
 929: PPUSH
 930: PPUSH
 931: PPUSH
 932: PPUSH
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) ;
 933: LD_ADDR_VAR 0 3
 937: PUSH
 938: LD_INT 22
 940: PUSH
 941: LD_INT 4
 943: PUSH
 944: EMPTY
 945: LIST
 946: LIST
 947: PUSH
 948: LD_INT 21
 950: PUSH
 951: LD_INT 3
 953: PUSH
 954: EMPTY
 955: LIST
 956: LIST
 957: PUSH
 958: EMPTY
 959: LIST
 960: LIST
 961: PPUSH
 962: CALL_OW 69
 966: ST_TO_ADDR
// hp := [ 470 , 370 , 290 ] [ Difficulty ] ;
 967: LD_ADDR_VAR 0 4
 971: PUSH
 972: LD_INT 470
 974: PUSH
 975: LD_INT 370
 977: PUSH
 978: LD_INT 290
 980: PUSH
 981: EMPTY
 982: LIST
 983: LIST
 984: LIST
 985: PUSH
 986: LD_OWVAR 67
 990: ARRAY
 991: ST_TO_ADDR
// case Difficulty of 2 :
 992: LD_OWVAR 67
 996: PUSH
 997: LD_INT 2
 999: DOUBLE
1000: EQUAL
1001: IFTRUE 1005
1003: GO 1036
1005: POP
// begin DestroyUnit ( UnitFilter ( filter , [ f_btype , b_bunker ] ) [ 1 ] ) ;
1006: LD_VAR 0 3
1010: PPUSH
1011: LD_INT 30
1013: PUSH
1014: LD_INT 32
1016: PUSH
1017: EMPTY
1018: LIST
1019: LIST
1020: PPUSH
1021: CALL_OW 72
1025: PUSH
1026: LD_INT 1
1028: ARRAY
1029: PPUSH
1030: CALL_OW 65
// end ; 3 :
1034: GO 1112
1036: LD_INT 3
1038: DOUBLE
1039: EQUAL
1040: IFTRUE 1044
1042: GO 1111
1044: POP
// begin DestroyUnit ( UnitFilter ( filter , [ f_btype , b_bunker ] ) [ 1 ] ) ;
1045: LD_VAR 0 3
1049: PPUSH
1050: LD_INT 30
1052: PUSH
1053: LD_INT 32
1055: PUSH
1056: EMPTY
1057: LIST
1058: LIST
1059: PPUSH
1060: CALL_OW 72
1064: PUSH
1065: LD_INT 1
1067: ARRAY
1068: PPUSH
1069: CALL_OW 65
// DestroyUnit ( UnitFilter ( filter , [ f_btype , b_solar_power ] ) [ Rand ( 1 , 3 ) ] ) ;
1073: LD_VAR 0 3
1077: PPUSH
1078: LD_INT 30
1080: PUSH
1081: LD_INT 27
1083: PUSH
1084: EMPTY
1085: LIST
1086: LIST
1087: PPUSH
1088: CALL_OW 72
1092: PUSH
1093: LD_INT 1
1095: PPUSH
1096: LD_INT 3
1098: PPUSH
1099: CALL_OW 12
1103: ARRAY
1104: PPUSH
1105: CALL_OW 65
// end ; end ;
1109: GO 1112
1111: POP
// for i = 1 to filter do
1112: LD_ADDR_VAR 0 2
1116: PUSH
1117: DOUBLE
1118: LD_INT 1
1120: DEC
1121: ST_TO_ADDR
1122: LD_VAR 0 3
1126: PUSH
1127: FOR_TO
1128: IFFALSE 1165
// SetLives ( filter [ i ] , hp + Rand ( - 29 , 29 ) ) ;
1130: LD_VAR 0 3
1134: PUSH
1135: LD_VAR 0 2
1139: ARRAY
1140: PPUSH
1141: LD_VAR 0 4
1145: PUSH
1146: LD_INT 29
1148: NEG
1149: PPUSH
1150: LD_INT 29
1152: PPUSH
1153: CALL_OW 12
1157: PLUS
1158: PPUSH
1159: CALL_OW 234
1163: GO 1127
1165: POP
1166: POP
// SetBName ( us_depot , Vulcano1 ) ;
1167: LD_INT 50
1169: PPUSH
1170: LD_STRING Vulcano1
1172: PPUSH
1173: CALL_OW 500
// hc_importance := 0 ;
1177: LD_ADDR_OWVAR 32
1181: PUSH
1182: LD_INT 0
1184: ST_TO_ADDR
// uc_side := 3 ;
1185: LD_ADDR_OWVAR 20
1189: PUSH
1190: LD_INT 3
1192: ST_TO_ADDR
// uc_nation := nation_russian ;
1193: LD_ADDR_OWVAR 21
1197: PUSH
1198: LD_INT 3
1200: ST_TO_ADDR
// russian_in_base := [ ] ;
1201: LD_ADDR_VAR 0 7
1205: PUSH
1206: EMPTY
1207: ST_TO_ADDR
// for i = 1 to [ 6 , 6 , 7 ] [ Difficulty ] do
1208: LD_ADDR_VAR 0 2
1212: PUSH
1213: DOUBLE
1214: LD_INT 1
1216: DEC
1217: ST_TO_ADDR
1218: LD_INT 6
1220: PUSH
1221: LD_INT 6
1223: PUSH
1224: LD_INT 7
1226: PUSH
1227: EMPTY
1228: LIST
1229: LIST
1230: LIST
1231: PUSH
1232: LD_OWVAR 67
1236: ARRAY
1237: PUSH
1238: FOR_TO
1239: IFFALSE 1320
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
1241: LD_INT 0
1243: PPUSH
1244: LD_INT 1
1246: PPUSH
1247: LD_INT 4
1249: PUSH
1250: LD_INT 5
1252: PUSH
1253: LD_INT 6
1255: PUSH
1256: EMPTY
1257: LIST
1258: LIST
1259: LIST
1260: PUSH
1261: LD_OWVAR 67
1265: ARRAY
1266: PPUSH
1267: CALL_OW 380
// un := CreateHuman ;
1271: LD_ADDR_VAR 0 5
1275: PUSH
1276: CALL_OW 44
1280: ST_TO_ADDR
// russian_in_base := russian_in_base ^ un ;
1281: LD_ADDR_VAR 0 7
1285: PUSH
1286: LD_VAR 0 7
1290: PUSH
1291: LD_VAR 0 5
1295: ADD
1296: ST_TO_ADDR
// PlaceUnitXYR ( un , 94 , 145 , 10 , false ) ;
1297: LD_VAR 0 5
1301: PPUSH
1302: LD_INT 94
1304: PPUSH
1305: LD_INT 145
1307: PPUSH
1308: LD_INT 10
1310: PPUSH
1311: LD_INT 0
1313: PPUSH
1314: CALL_OW 50
// end ;
1318: GO 1238
1320: POP
1321: POP
// end ;
1322: LD_VAR 0 1
1326: RET
// every 0 0$01 trigger GetDistUnitToSide ( us_depot , 1 ) < 40 do var i , un ;
1327: LD_INT 50
1329: PPUSH
1330: LD_INT 1
1332: PPUSH
1333: CALL 1703 0 2
1337: PUSH
1338: LD_INT 40
1340: LESS
1341: IFFALSE 1538
1343: GO 1345
1345: DISABLE
1346: LD_INT 0
1348: PPUSH
1349: PPUSH
// begin uc_side := 4 ;
1350: LD_ADDR_OWVAR 20
1354: PUSH
1355: LD_INT 4
1357: ST_TO_ADDR
// uc_nation := nation_american ;
1358: LD_ADDR_OWVAR 21
1362: PUSH
1363: LD_INT 1
1365: ST_TO_ADDR
// hc_importance := 0 ;
1366: LD_ADDR_OWVAR 32
1370: PUSH
1371: LD_INT 0
1373: ST_TO_ADDR
// for i = 1 to 7 do
1374: LD_ADDR_VAR 0 1
1378: PUSH
1379: DOUBLE
1380: LD_INT 1
1382: DEC
1383: ST_TO_ADDR
1384: LD_INT 7
1386: PUSH
1387: FOR_TO
1388: IFFALSE 1452
// begin PrepareHuman ( false , Rand ( 1 , 3 ) , us_skill ) ;
1390: LD_INT 0
1392: PPUSH
1393: LD_INT 1
1395: PPUSH
1396: LD_INT 3
1398: PPUSH
1399: CALL_OW 12
1403: PPUSH
1404: LD_EXP 26
1408: PPUSH
1409: CALL_OW 380
// un := CreateHuman ;
1413: LD_ADDR_VAR 0 2
1417: PUSH
1418: CALL_OW 44
1422: ST_TO_ADDR
// PlaceUnitArea ( un , base_resp , false ) ;
1423: LD_VAR 0 2
1427: PPUSH
1428: LD_INT 7
1430: PPUSH
1431: LD_INT 0
1433: PPUSH
1434: CALL_OW 49
// SetLives ( un , 10 ) ;
1438: LD_VAR 0 2
1442: PPUSH
1443: LD_INT 10
1445: PPUSH
1446: CALL_OW 234
// end ;
1450: GO 1387
1452: POP
1453: POP
// for i = 1 to 5 do
1454: LD_ADDR_VAR 0 1
1458: PUSH
1459: DOUBLE
1460: LD_INT 1
1462: DEC
1463: ST_TO_ADDR
1464: LD_INT 5
1466: PUSH
1467: FOR_TO
1468: IFFALSE 1536
// begin PrepareHuman ( false , 4 , us_skill ) ;
1470: LD_INT 0
1472: PPUSH
1473: LD_INT 4
1475: PPUSH
1476: LD_EXP 26
1480: PPUSH
1481: CALL_OW 380
// SetDir ( un , 1 ) ;
1485: LD_VAR 0 2
1489: PPUSH
1490: LD_INT 1
1492: PPUSH
1493: CALL_OW 233
// un := CreateHuman ;
1497: LD_ADDR_VAR 0 2
1501: PUSH
1502: CALL_OW 44
1506: ST_TO_ADDR
// PlaceUnitArea ( un , rekt , false ) ;
1507: LD_VAR 0 2
1511: PPUSH
1512: LD_INT 22
1514: PPUSH
1515: LD_INT 0
1517: PPUSH
1518: CALL_OW 49
// SetLives ( un , 10 ) ;
1522: LD_VAR 0 2
1526: PPUSH
1527: LD_INT 10
1529: PPUSH
1530: CALL_OW 234
// end ;
1534: GO 1467
1536: POP
1537: POP
// end ; end_of_file
1538: PPOPN 2
1540: END
// export function PrepareApeman ( n ) ; var un , i ; begin
1541: LD_INT 0
1543: PPUSH
1544: PPUSH
1545: PPUSH
// for i = 1 to n do
1546: LD_ADDR_VAR 0 4
1550: PUSH
1551: DOUBLE
1552: LD_INT 1
1554: DEC
1555: ST_TO_ADDR
1556: LD_VAR 0 1
1560: PUSH
1561: FOR_TO
1562: IFFALSE 1696
// begin uc_side := 0 ;
1564: LD_ADDR_OWVAR 20
1568: PUSH
1569: LD_INT 0
1571: ST_TO_ADDR
// uc_nation := 0 ;
1572: LD_ADDR_OWVAR 21
1576: PUSH
1577: LD_INT 0
1579: ST_TO_ADDR
// hc_class := class_apeman ;
1580: LD_ADDR_OWVAR 28
1584: PUSH
1585: LD_INT 12
1587: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
1588: LD_ADDR_OWVAR 31
1592: PUSH
1593: LD_INT 0
1595: PUSH
1596: LD_INT 0
1598: PUSH
1599: LD_INT 0
1601: PUSH
1602: LD_INT 0
1604: PUSH
1605: EMPTY
1606: LIST
1607: LIST
1608: LIST
1609: LIST
1610: ST_TO_ADDR
// hc_name :=  ;
1611: LD_ADDR_OWVAR 26
1615: PUSH
1616: LD_STRING 
1618: ST_TO_ADDR
// hc_gallery :=  ;
1619: LD_ADDR_OWVAR 33
1623: PUSH
1624: LD_STRING 
1626: ST_TO_ADDR
// hc_importance := 0 ;
1627: LD_ADDR_OWVAR 32
1631: PUSH
1632: LD_INT 0
1634: ST_TO_ADDR
// un := CreateHuman ;
1635: LD_ADDR_VAR 0 3
1639: PUSH
1640: CALL_OW 44
1644: ST_TO_ADDR
// PlaceUnitArea ( un , [ ape1 , ape2 ] [ Rand ( 1 , 2 ) ] , false ) ;
1645: LD_VAR 0 3
1649: PPUSH
1650: LD_INT 19
1652: PUSH
1653: LD_INT 20
1655: PUSH
1656: EMPTY
1657: LIST
1658: LIST
1659: PUSH
1660: LD_INT 1
1662: PPUSH
1663: LD_INT 2
1665: PPUSH
1666: CALL_OW 12
1670: ARRAY
1671: PPUSH
1672: LD_INT 0
1674: PPUSH
1675: CALL_OW 49
// Wait ( Rand ( 0 0$33 , 2 2$33 ) ) ;
1679: LD_INT 1155
1681: PPUSH
1682: LD_INT 5355
1684: PPUSH
1685: CALL_OW 12
1689: PPUSH
1690: CALL_OW 67
// end ;
1694: GO 1561
1696: POP
1697: POP
// end ;
1698: LD_VAR 0 2
1702: RET
// export function GetDistUnitToSide ( unit , side ) ; var tmp , dist ; begin
1703: LD_INT 0
1705: PPUSH
1706: PPUSH
1707: PPUSH
// tmp := NearestUnitToUnit ( FilterAllUnits ( [ f_side , side ] ) , unit ) ;
1708: LD_ADDR_VAR 0 4
1712: PUSH
1713: LD_INT 22
1715: PUSH
1716: LD_VAR 0 2
1720: PUSH
1721: EMPTY
1722: LIST
1723: LIST
1724: PPUSH
1725: CALL_OW 69
1729: PPUSH
1730: LD_VAR 0 1
1734: PPUSH
1735: CALL_OW 74
1739: ST_TO_ADDR
// dist := GetDistUnits ( unit , tmp ) ;
1740: LD_ADDR_VAR 0 5
1744: PUSH
1745: LD_VAR 0 1
1749: PPUSH
1750: LD_VAR 0 4
1754: PPUSH
1755: CALL_OW 296
1759: ST_TO_ADDR
// if dist >= 9999 then
1760: LD_VAR 0 5
1764: PUSH
1765: LD_INT 9999
1767: GREATEREQUAL
1768: IFFALSE 1781
// result := - 1 else
1770: LD_ADDR_VAR 0 3
1774: PUSH
1775: LD_INT 1
1777: NEG
1778: ST_TO_ADDR
1779: GO 1791
// result := dist ;
1781: LD_ADDR_VAR 0 3
1785: PUSH
1786: LD_VAR 0 5
1790: ST_TO_ADDR
// end ;
1791: LD_VAR 0 3
1795: RET
// export function NearestUnitToSide ( plist , side ) ; var i , tmp , unit ; begin
1796: LD_INT 0
1798: PPUSH
1799: PPUSH
1800: PPUSH
1801: PPUSH
// tmp := 9999 ;
1802: LD_ADDR_VAR 0 5
1806: PUSH
1807: LD_INT 9999
1809: ST_TO_ADDR
// for i = 1 to plist do
1810: LD_ADDR_VAR 0 4
1814: PUSH
1815: DOUBLE
1816: LD_INT 1
1818: DEC
1819: ST_TO_ADDR
1820: LD_VAR 0 1
1824: PUSH
1825: FOR_TO
1826: IFFALSE 1900
// if GetDistUnitToSide ( plist [ i ] , side ) < tmp then
1828: LD_VAR 0 1
1832: PUSH
1833: LD_VAR 0 4
1837: ARRAY
1838: PPUSH
1839: LD_VAR 0 2
1843: PPUSH
1844: CALL 1703 0 2
1848: PUSH
1849: LD_VAR 0 5
1853: LESS
1854: IFFALSE 1898
// begin tmp := GetDistUnitToSide ( plist [ i ] , side ) ;
1856: LD_ADDR_VAR 0 5
1860: PUSH
1861: LD_VAR 0 1
1865: PUSH
1866: LD_VAR 0 4
1870: ARRAY
1871: PPUSH
1872: LD_VAR 0 2
1876: PPUSH
1877: CALL 1703 0 2
1881: ST_TO_ADDR
// unit := plist [ i ] ;
1882: LD_ADDR_VAR 0 6
1886: PUSH
1887: LD_VAR 0 1
1891: PUSH
1892: LD_VAR 0 4
1896: ARRAY
1897: ST_TO_ADDR
// end ;
1898: GO 1825
1900: POP
1901: POP
// result := unit ;
1902: LD_ADDR_VAR 0 3
1906: PUSH
1907: LD_VAR 0 6
1911: ST_TO_ADDR
// end ;
1912: LD_VAR 0 3
1916: RET
// export function CalculateCommanderPoints ; var points , crates_collected , sib_collected , i ; begin
1917: LD_INT 0
1919: PPUSH
1920: PPUSH
1921: PPUSH
1922: PPUSH
1923: PPUSH
// points := [ 1000 , 2500 , 5000 ] [ Difficulty ] ;
1924: LD_ADDR_VAR 0 2
1928: PUSH
1929: LD_INT 1000
1931: PUSH
1932: LD_INT 2500
1934: PUSH
1935: LD_INT 5000
1937: PUSH
1938: EMPTY
1939: LIST
1940: LIST
1941: LIST
1942: PUSH
1943: LD_OWVAR 67
1947: ARRAY
1948: ST_TO_ADDR
// points := points + ( - 1 * FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) * 30 ) ;
1949: LD_ADDR_VAR 0 2
1953: PUSH
1954: LD_VAR 0 2
1958: PUSH
1959: LD_INT 1
1961: NEG
1962: PUSH
1963: LD_INT 22
1965: PUSH
1966: LD_OWVAR 2
1970: PUSH
1971: EMPTY
1972: LIST
1973: LIST
1974: PUSH
1975: LD_INT 21
1977: PUSH
1978: LD_INT 3
1980: PUSH
1981: EMPTY
1982: LIST
1983: LIST
1984: PUSH
1985: EMPTY
1986: LIST
1987: LIST
1988: PPUSH
1989: CALL_OW 69
1993: MUL
1994: PUSH
1995: LD_INT 30
1997: MUL
1998: PLUS
1999: ST_TO_ADDR
// points := points + ( kill_counter * 10 ) ;
2000: LD_ADDR_VAR 0 2
2004: PUSH
2005: LD_VAR 0 2
2009: PUSH
2010: LD_EXP 17
2014: PUSH
2015: LD_INT 10
2017: MUL
2018: PLUS
2019: ST_TO_ADDR
// points := points + ( - 1 * kill_counter * 20 ) ;
2020: LD_ADDR_VAR 0 2
2024: PUSH
2025: LD_VAR 0 2
2029: PUSH
2030: LD_INT 1
2032: NEG
2033: PUSH
2034: LD_EXP 17
2038: MUL
2039: PUSH
2040: LD_INT 20
2042: MUL
2043: PLUS
2044: ST_TO_ADDR
// points := points + ( - 1 * ( ( tick / 35 ) / 60 ) * 25 ) ;
2045: LD_ADDR_VAR 0 2
2049: PUSH
2050: LD_VAR 0 2
2054: PUSH
2055: LD_INT 1
2057: NEG
2058: PUSH
2059: LD_OWVAR 1
2063: PUSH
2064: LD_INT 35
2066: DIVREAL
2067: PUSH
2068: LD_INT 60
2070: DIVREAL
2071: MUL
2072: PUSH
2073: LD_INT 25
2075: MUL
2076: PLUS
2077: ST_TO_ADDR
// points := points + ( tech_counter * 15 ) ;
2078: LD_ADDR_VAR 0 2
2082: PUSH
2083: LD_VAR 0 2
2087: PUSH
2088: LD_EXP 19
2092: PUSH
2093: LD_INT 15
2095: MUL
2096: PLUS
2097: ST_TO_ADDR
// points := points + ( - 1 * sib_contamin_counter ) * 1000 ;
2098: LD_ADDR_VAR 0 2
2102: PUSH
2103: LD_VAR 0 2
2107: PUSH
2108: LD_INT 1
2110: NEG
2111: PUSH
2112: LD_EXP 20
2116: MUL
2117: PUSH
2118: LD_INT 1000
2120: MUL
2121: PLUS
2122: ST_TO_ADDR
// points := points + ( veh_counter * 5 ) ;
2123: LD_ADDR_VAR 0 2
2127: PUSH
2128: LD_VAR 0 2
2132: PUSH
2133: LD_EXP 18
2137: PUSH
2138: LD_INT 5
2140: MUL
2141: PLUS
2142: ST_TO_ADDR
// result := points ;
2143: LD_ADDR_VAR 0 1
2147: PUSH
2148: LD_VAR 0 2
2152: ST_TO_ADDR
// end ; end_of_file
2153: LD_VAR 0 1
2157: RET
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2158: LD_VAR 0 1
2162: PPUSH
2163: CALL 32287 0 1
// if un = ru_cargo then
2167: LD_VAR 0 1
2171: PUSH
2172: LD_EXP 30
2176: EQUAL
2177: IFFALSE 2187
// ru_cargo := 0 ;
2179: LD_ADDR_EXP 30
2183: PUSH
2184: LD_INT 0
2186: ST_TO_ADDR
// if GetSide ( un ) = your_side then
2187: LD_VAR 0 1
2191: PPUSH
2192: CALL_OW 255
2196: PUSH
2197: LD_OWVAR 2
2201: EQUAL
2202: IFFALSE 2218
// dead_counter := dead_counter + 1 ;
2204: LD_ADDR_EXP 16
2208: PUSH
2209: LD_EXP 16
2213: PUSH
2214: LD_INT 1
2216: PLUS
2217: ST_TO_ADDR
// if GetSide ( un ) in FilterAllUnits ( [ f_enemy , your_side ] ) then
2218: LD_VAR 0 1
2222: PPUSH
2223: CALL_OW 255
2227: PUSH
2228: LD_INT 81
2230: PUSH
2231: LD_OWVAR 2
2235: PUSH
2236: EMPTY
2237: LIST
2238: LIST
2239: PPUSH
2240: CALL_OW 69
2244: IN
2245: IFFALSE 2261
// kill_counter := kill_counter + 1 ;
2247: LD_ADDR_EXP 17
2251: PUSH
2252: LD_EXP 17
2256: PUSH
2257: LD_INT 1
2259: PLUS
2260: ST_TO_ADDR
// if un = player_commander then
2261: LD_VAR 0 1
2265: PUSH
2266: LD_EXP 11
2270: EQUAL
2271: IFFALSE 2280
// YouLost ( vulcano-lost ) ;
2273: LD_STRING vulcano-lost
2275: PPUSH
2276: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) then
2280: LD_VAR 0 1
2284: PUSH
2285: LD_INT 22
2287: PUSH
2288: LD_INT 3
2290: PUSH
2291: EMPTY
2292: LIST
2293: LIST
2294: PUSH
2295: LD_INT 21
2297: PUSH
2298: LD_INT 3
2300: PUSH
2301: EMPTY
2302: LIST
2303: LIST
2304: PUSH
2305: EMPTY
2306: LIST
2307: LIST
2308: PPUSH
2309: CALL_OW 69
2313: IN
2314: IFFALSE 2430
// begin if GetBType ( un ) = b_turret or GetBType ( un ) = b_siberite_power then
2316: LD_VAR 0 1
2320: PPUSH
2321: CALL_OW 266
2325: PUSH
2326: LD_INT 33
2328: EQUAL
2329: PUSH
2330: LD_VAR 0 1
2334: PPUSH
2335: CALL_OW 266
2339: PUSH
2340: LD_INT 28
2342: EQUAL
2343: OR
2344: IFFALSE 2430
// begin ru_blist := ru_blist ^ GetBType ( un ) ;
2346: LD_ADDR_EXP 31
2350: PUSH
2351: LD_EXP 31
2355: PUSH
2356: LD_VAR 0 1
2360: PPUSH
2361: CALL_OW 266
2365: ADD
2366: ST_TO_ADDR
// ru_blist := ru_blist ^ GetX ( un ) ;
2367: LD_ADDR_EXP 31
2371: PUSH
2372: LD_EXP 31
2376: PUSH
2377: LD_VAR 0 1
2381: PPUSH
2382: CALL_OW 250
2386: ADD
2387: ST_TO_ADDR
// ru_blist := ru_blist ^ GetY ( un ) ;
2388: LD_ADDR_EXP 31
2392: PUSH
2393: LD_EXP 31
2397: PUSH
2398: LD_VAR 0 1
2402: PPUSH
2403: CALL_OW 251
2407: ADD
2408: ST_TO_ADDR
// ru_blist := ru_blist ^ GetDir ( un ) ;
2409: LD_ADDR_EXP 31
2413: PUSH
2414: LD_EXP 31
2418: PUSH
2419: LD_VAR 0 1
2423: PPUSH
2424: CALL_OW 254
2428: ADD
2429: ST_TO_ADDR
// end ; end ; if un in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) then
2430: LD_VAR 0 1
2434: PUSH
2435: LD_INT 22
2437: PUSH
2438: LD_INT 8
2440: PUSH
2441: EMPTY
2442: LIST
2443: LIST
2444: PUSH
2445: LD_INT 21
2447: PUSH
2448: LD_INT 3
2450: PUSH
2451: EMPTY
2452: LIST
2453: LIST
2454: PUSH
2455: EMPTY
2456: LIST
2457: LIST
2458: PPUSH
2459: CALL_OW 69
2463: IN
2464: IFFALSE 2608
// begin if GetBType ( un ) = b_barracks then
2466: LD_VAR 0 1
2470: PPUSH
2471: CALL_OW 266
2475: PUSH
2476: LD_INT 5
2478: EQUAL
2479: IFFALSE 2497
// legion_blist := legion_blist ^ b_armoury else
2481: LD_ADDR_EXP 39
2485: PUSH
2486: LD_EXP 39
2490: PUSH
2491: LD_INT 4
2493: ADD
2494: ST_TO_ADDR
2495: GO 2545
// if not GetBType ( un ) in [ b_warehouse , b_lab , b_lab_full ] then
2497: LD_VAR 0 1
2501: PPUSH
2502: CALL_OW 266
2506: PUSH
2507: LD_INT 1
2509: PUSH
2510: LD_INT 6
2512: PUSH
2513: LD_INT 8
2515: PUSH
2516: EMPTY
2517: LIST
2518: LIST
2519: LIST
2520: IN
2521: NOT
2522: IFFALSE 2545
// legion_blist := legion_blist ^ GetBType ( un ) ;
2524: LD_ADDR_EXP 39
2528: PUSH
2529: LD_EXP 39
2533: PUSH
2534: LD_VAR 0 1
2538: PPUSH
2539: CALL_OW 266
2543: ADD
2544: ST_TO_ADDR
// legion_blist := legion_blist ^ GetX ( un ) ;
2545: LD_ADDR_EXP 39
2549: PUSH
2550: LD_EXP 39
2554: PUSH
2555: LD_VAR 0 1
2559: PPUSH
2560: CALL_OW 250
2564: ADD
2565: ST_TO_ADDR
// legion_blist := legion_blist ^ GetY ( un ) ;
2566: LD_ADDR_EXP 39
2570: PUSH
2571: LD_EXP 39
2575: PUSH
2576: LD_VAR 0 1
2580: PPUSH
2581: CALL_OW 251
2585: ADD
2586: ST_TO_ADDR
// legion_blist := legion_blist ^ GetDir ( un ) ;
2587: LD_ADDR_EXP 39
2591: PUSH
2592: LD_EXP 39
2596: PUSH
2597: LD_VAR 0 1
2601: PPUSH
2602: CALL_OW 254
2606: ADD
2607: ST_TO_ADDR
// end ; if un in legion_force then
2608: LD_VAR 0 1
2612: PUSH
2613: LD_EXP 36
2617: IN
2618: IFFALSE 2636
// legion_force := legion_force diff un ;
2620: LD_ADDR_EXP 36
2624: PUSH
2625: LD_EXP 36
2629: PUSH
2630: LD_VAR 0 1
2634: DIFF
2635: ST_TO_ADDR
// if un in ru_force then
2636: LD_VAR 0 1
2640: PUSH
2641: LD_EXP 28
2645: IN
2646: IFFALSE 2664
// ru_force := ru_force diff un ;
2648: LD_ADDR_EXP 28
2652: PUSH
2653: LD_EXP 28
2657: PUSH
2658: LD_VAR 0 1
2662: DIFF
2663: ST_TO_ADDR
// if un in al_force then
2664: LD_VAR 0 1
2668: PUSH
2669: LD_EXP 43
2673: IN
2674: IFFALSE 2692
// al_force := al_force diff un ;
2676: LD_ADDR_EXP 43
2680: PUSH
2681: LD_EXP 43
2685: PUSH
2686: LD_VAR 0 1
2690: DIFF
2691: ST_TO_ADDR
// end ;
2692: PPOPN 1
2694: END
// on BuildingComplete ( b ) do var i ;
2695: LD_INT 0
2697: PPUSH
// begin if GetSide ( b ) = 8 then
2698: LD_VAR 0 1
2702: PPUSH
2703: CALL_OW 255
2707: PUSH
2708: LD_INT 8
2710: EQUAL
2711: IFFALSE 2751
// for i = 1 to 4 do
2713: LD_ADDR_VAR 0 2
2717: PUSH
2718: DOUBLE
2719: LD_INT 1
2721: DEC
2722: ST_TO_ADDR
2723: LD_INT 4
2725: PUSH
2726: FOR_TO
2727: IFFALSE 2749
// legion_blist := Delete ( legion_blist , 1 ) ;
2729: LD_ADDR_EXP 39
2733: PUSH
2734: LD_EXP 39
2738: PPUSH
2739: LD_INT 1
2741: PPUSH
2742: CALL_OW 3
2746: ST_TO_ADDR
2747: GO 2726
2749: POP
2750: POP
// if GetSide ( b ) = 3 then
2751: LD_VAR 0 1
2755: PPUSH
2756: CALL_OW 255
2760: PUSH
2761: LD_INT 3
2763: EQUAL
2764: IFFALSE 2804
// for i = 1 to 4 do
2766: LD_ADDR_VAR 0 2
2770: PUSH
2771: DOUBLE
2772: LD_INT 1
2774: DEC
2775: ST_TO_ADDR
2776: LD_INT 4
2778: PUSH
2779: FOR_TO
2780: IFFALSE 2802
// ru_blist := Delete ( ru_blist , 1 ) ;
2782: LD_ADDR_EXP 31
2786: PUSH
2787: LD_EXP 31
2791: PPUSH
2792: LD_INT 1
2794: PPUSH
2795: CALL_OW 3
2799: ST_TO_ADDR
2800: GO 2779
2802: POP
2803: POP
// end ;
2804: PPOPN 2
2806: END
// on VehicleConstructed ( veh , fac ) do begin if not GetWeapon ( veh ) in [ ru_cargo_bay , ru_siberium_rocket ] then
2807: LD_VAR 0 1
2811: PPUSH
2812: CALL_OW 264
2816: PUSH
2817: LD_INT 51
2819: PUSH
2820: LD_INT 48
2822: PUSH
2823: EMPTY
2824: LIST
2825: LIST
2826: IN
2827: NOT
2828: IFFALSE 2876
// begin if GetSide ( veh ) = 3 then
2830: LD_VAR 0 1
2834: PPUSH
2835: CALL_OW 255
2839: PUSH
2840: LD_INT 3
2842: EQUAL
2843: IFFALSE 2876
// begin ComMoveXY ( veh , 149 , 8 ) ;
2845: LD_VAR 0 1
2849: PPUSH
2850: LD_INT 149
2852: PPUSH
2853: LD_INT 8
2855: PPUSH
2856: CALL_OW 111
// ru_force := ru_force ^ veh ;
2860: LD_ADDR_EXP 28
2864: PUSH
2865: LD_EXP 28
2869: PUSH
2870: LD_VAR 0 1
2874: ADD
2875: ST_TO_ADDR
// end ; end ; if not GetWeapon ( veh ) in [ ar_cargo_bay , ar_control_tower ] then
2876: LD_VAR 0 1
2880: PPUSH
2881: CALL_OW 264
2885: PUSH
2886: LD_INT 32
2888: PUSH
2889: LD_INT 31
2891: PUSH
2892: EMPTY
2893: LIST
2894: LIST
2895: IN
2896: NOT
2897: IFFALSE 2930
// begin if GetSide ( veh ) = 8 then
2899: LD_VAR 0 1
2903: PPUSH
2904: CALL_OW 255
2908: PUSH
2909: LD_INT 8
2911: EQUAL
2912: IFFALSE 2930
// legion_force := legion_force ^ veh ;
2914: LD_ADDR_EXP 36
2918: PUSH
2919: LD_EXP 36
2923: PUSH
2924: LD_VAR 0 1
2928: ADD
2929: ST_TO_ADDR
// end ; if GetSide ( veh ) = 3 and not ru_cargo and GetWeapon ( veh ) = ru_cargo_bay then
2930: LD_VAR 0 1
2934: PPUSH
2935: CALL_OW 255
2939: PUSH
2940: LD_INT 3
2942: EQUAL
2943: PUSH
2944: LD_EXP 30
2948: NOT
2949: AND
2950: PUSH
2951: LD_VAR 0 1
2955: PPUSH
2956: CALL_OW 264
2960: PUSH
2961: LD_INT 51
2963: EQUAL
2964: AND
2965: IFFALSE 2977
// ru_cargo := veh ;
2967: LD_ADDR_EXP 30
2971: PUSH
2972: LD_VAR 0 1
2976: ST_TO_ADDR
// if GetSide ( veh ) = 7 and your_side <> 7 then
2977: LD_VAR 0 1
2981: PPUSH
2982: CALL_OW 255
2986: PUSH
2987: LD_INT 7
2989: EQUAL
2990: PUSH
2991: LD_OWVAR 2
2995: PUSH
2996: LD_INT 7
2998: NONEQUAL
2999: AND
3000: IFFALSE 3018
// al_force := al_force ^ veh ;
3002: LD_ADDR_EXP 43
3006: PUSH
3007: LD_EXP 43
3011: PUSH
3012: LD_VAR 0 1
3016: ADD
3017: ST_TO_ADDR
// if GetSide ( veh ) = your_side then
3018: LD_VAR 0 1
3022: PPUSH
3023: CALL_OW 255
3027: PUSH
3028: LD_OWVAR 2
3032: EQUAL
3033: IFFALSE 3049
// veh_counter := veh_counter + 1 ;
3035: LD_ADDR_EXP 18
3039: PUSH
3040: LD_EXP 18
3044: PUSH
3045: LD_INT 1
3047: PLUS
3048: ST_TO_ADDR
// end ;
3049: PPOPN 2
3051: END
// on SibDepositContaminated ( contaminating_scientist , x_of_deposit , y_of_deposit ) do begin if GetSide ( contaminating_scientist ) <> your_side then
3052: LD_VAR 0 1
3056: PPUSH
3057: CALL_OW 255
3061: PUSH
3062: LD_OWVAR 2
3066: NONEQUAL
3067: IFFALSE 3083
// sib_contamin_counter := sib_contamin_counter + 1 ;
3069: LD_ADDR_EXP 20
3073: PUSH
3074: LD_EXP 20
3078: PUSH
3079: LD_INT 1
3081: PLUS
3082: ST_TO_ADDR
// end ;
3083: PPOPN 3
3085: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = your_side then
3086: LD_VAR 0 2
3090: PPUSH
3091: CALL_OW 255
3095: PUSH
3096: LD_OWVAR 2
3100: EQUAL
3101: IFFALSE 3117
// tech_counter := tech_counter + 1 ;
3103: LD_ADDR_EXP 19
3107: PUSH
3108: LD_EXP 19
3112: PUSH
3113: LD_INT 1
3115: PLUS
3116: ST_TO_ADDR
// if tech = 53 and your_side = 1 then
3117: LD_VAR 0 1
3121: PUSH
3122: LD_INT 53
3124: EQUAL
3125: PUSH
3126: LD_OWVAR 2
3130: PUSH
3131: LD_INT 1
3133: EQUAL
3134: AND
3135: IFFALSE 3150
// SetTech ( 80 , 1 , state_researched ) ;
3137: LD_INT 80
3139: PPUSH
3140: LD_INT 1
3142: PPUSH
3143: LD_INT 2
3145: PPUSH
3146: CALL_OW 322
// end ;
3150: PPOPN 2
3152: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 8 and GetControl ( un ) = control_remote then
3153: LD_VAR 0 1
3157: PPUSH
3158: CALL_OW 255
3162: PUSH
3163: LD_INT 8
3165: EQUAL
3166: PUSH
3167: LD_VAR 0 1
3171: PPUSH
3172: CALL_OW 263
3176: PUSH
3177: LD_INT 2
3179: EQUAL
3180: AND
3181: IFFALSE 3192
// ComAutodestruct ( un ) ;
3183: LD_VAR 0 1
3187: PPUSH
3188: CALL 69072 0 1
// end ;
3192: PPOPN 1
3194: END
// on SailEvent ( event ) do begin case event of event_legion_attack :
3195: LD_VAR 0 1
3199: PUSH
3200: LD_EXP 21
3204: DOUBLE
3205: EQUAL
3206: IFTRUE 3210
3208: GO 3217
3210: POP
// LegionAttack ( ) ; event_alliance_attack :
3211: CALL 10405 0 0
3215: GO 3252
3217: LD_EXP 23
3221: DOUBLE
3222: EQUAL
3223: IFTRUE 3227
3225: GO 3234
3227: POP
// AllianceAttack ( ) ; event_russian_attack :
3228: CALL 17521 0 0
3232: GO 3252
3234: LD_EXP 22
3238: DOUBLE
3239: EQUAL
3240: IFTRUE 3244
3242: GO 3251
3244: POP
// RussianAttack ( ) ; end ;
3245: CALL 6629 0 0
3249: GO 3252
3251: POP
// end ;
3252: PPOPN 1
3254: END
// every 9 9$30 trigger FilterAllUnits ( [ f_class , class_apeman ] ) < 9 do
3255: LD_INT 25
3257: PUSH
3258: LD_INT 12
3260: PUSH
3261: EMPTY
3262: LIST
3263: LIST
3264: PPUSH
3265: CALL_OW 69
3269: PUSH
3270: LD_INT 9
3272: LESS
3273: IFFALSE 3306
3275: GO 3277
3277: DISABLE
// begin enable ;
3278: ENABLE
// PrepareApeman ( 8 - ( FilterAllUnits ( [ f_class , class_apeman ] ) + 0 ) ) ;
3279: LD_INT 8
3281: PUSH
3282: LD_INT 25
3284: PUSH
3285: LD_INT 12
3287: PUSH
3288: EMPTY
3289: LIST
3290: LIST
3291: PPUSH
3292: CALL_OW 69
3296: PUSH
3297: LD_INT 0
3299: PLUS
3300: MINUS
3301: PPUSH
3302: CALL 1541 0 1
// end ;
3306: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
3307: LD_VAR 0 1
3311: PPUSH
3312: LD_VAR 0 2
3316: PPUSH
3317: LD_VAR 0 3
3321: PPUSH
3322: CALL 32385 0 3
// end ;
3326: PPOPN 3
3328: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
3329: LD_VAR 0 1
3333: PPUSH
3334: CALL 32393 0 1
// end ; end_of_file
3338: PPOPN 1
3340: END
// export ru_force , ru_skill , ru_cargo , ru_blist , ru_vlist , ru_amount , ru_time , ru_teleport_exit ; export function PrepareRussian ; var i , un , ru_depot , ru_factory , ru_teleport , ru_barracks , ru_bunkers , ru_buildings , ru_vehicles , ru_humans ; begin
3341: LD_INT 0
3343: PPUSH
3344: PPUSH
3345: PPUSH
3346: PPUSH
3347: PPUSH
3348: PPUSH
3349: PPUSH
3350: PPUSH
3351: PPUSH
3352: PPUSH
3353: PPUSH
// uc_side := 3 ;
3354: LD_ADDR_OWVAR 20
3358: PUSH
3359: LD_INT 3
3361: ST_TO_ADDR
// uc_nation := nation_russian ;
3362: LD_ADDR_OWVAR 21
3366: PUSH
3367: LD_INT 3
3369: ST_TO_ADDR
// ru_depot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
3370: LD_ADDR_VAR 0 4
3374: PUSH
3375: LD_INT 22
3377: PUSH
3378: LD_INT 3
3380: PUSH
3381: EMPTY
3382: LIST
3383: LIST
3384: PUSH
3385: LD_INT 30
3387: PUSH
3388: LD_INT 1
3390: PUSH
3391: EMPTY
3392: LIST
3393: LIST
3394: PUSH
3395: EMPTY
3396: LIST
3397: LIST
3398: PPUSH
3399: CALL_OW 69
3403: PUSH
3404: LD_INT 1
3406: ARRAY
3407: ST_TO_ADDR
// ru_factory := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3408: LD_ADDR_VAR 0 5
3412: PUSH
3413: LD_INT 22
3415: PUSH
3416: LD_INT 3
3418: PUSH
3419: EMPTY
3420: LIST
3421: LIST
3422: PUSH
3423: LD_INT 30
3425: PUSH
3426: LD_INT 3
3428: PUSH
3429: EMPTY
3430: LIST
3431: LIST
3432: PUSH
3433: EMPTY
3434: LIST
3435: LIST
3436: PPUSH
3437: CALL_OW 69
3441: PUSH
3442: LD_INT 1
3444: ARRAY
3445: ST_TO_ADDR
// ru_teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] ;
3446: LD_ADDR_VAR 0 6
3450: PUSH
3451: LD_INT 22
3453: PUSH
3454: LD_INT 3
3456: PUSH
3457: EMPTY
3458: LIST
3459: LIST
3460: PUSH
3461: LD_INT 30
3463: PUSH
3464: LD_INT 34
3466: PUSH
3467: EMPTY
3468: LIST
3469: LIST
3470: PUSH
3471: EMPTY
3472: LIST
3473: LIST
3474: PPUSH
3475: CALL_OW 69
3479: PUSH
3480: LD_INT 1
3482: ARRAY
3483: ST_TO_ADDR
// ru_bunkers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
3484: LD_ADDR_VAR 0 8
3488: PUSH
3489: LD_INT 22
3491: PUSH
3492: LD_INT 3
3494: PUSH
3495: EMPTY
3496: LIST
3497: LIST
3498: PUSH
3499: LD_INT 30
3501: PUSH
3502: LD_INT 33
3504: PUSH
3505: EMPTY
3506: LIST
3507: LIST
3508: PUSH
3509: EMPTY
3510: LIST
3511: LIST
3512: PPUSH
3513: CALL_OW 69
3517: ST_TO_ADDR
// ru_barracks := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
3518: LD_ADDR_VAR 0 7
3522: PUSH
3523: LD_INT 22
3525: PUSH
3526: LD_INT 3
3528: PUSH
3529: EMPTY
3530: LIST
3531: LIST
3532: PUSH
3533: LD_INT 30
3535: PUSH
3536: LD_INT 5
3538: PUSH
3539: EMPTY
3540: LIST
3541: LIST
3542: PUSH
3543: EMPTY
3544: LIST
3545: LIST
3546: PPUSH
3547: CALL_OW 69
3551: PUSH
3552: LD_INT 1
3554: ARRAY
3555: ST_TO_ADDR
// ru_blist := [ ] ;
3556: LD_ADDR_EXP 31
3560: PUSH
3561: EMPTY
3562: ST_TO_ADDR
// ru_vlist := [ ] ;
3563: LD_ADDR_EXP 32
3567: PUSH
3568: EMPTY
3569: ST_TO_ADDR
// ru_teleport_exit := [ 183 , 62 , 147 , 44 ] ;
3570: LD_ADDR_EXP 35
3574: PUSH
3575: LD_INT 183
3577: PUSH
3578: LD_INT 62
3580: PUSH
3581: LD_INT 147
3583: PUSH
3584: LD_INT 44
3586: PUSH
3587: EMPTY
3588: LIST
3589: LIST
3590: LIST
3591: LIST
3592: ST_TO_ADDR
// TeleportExit ( FilterAllUnits ( [ f_btype , b_teleport ] ) [ 1 ] , ru_teleport_exit [ 1 ] , ru_teleport_exit [ 2 ] ) ;
3593: LD_INT 30
3595: PUSH
3596: LD_INT 34
3598: PUSH
3599: EMPTY
3600: LIST
3601: LIST
3602: PPUSH
3603: CALL_OW 69
3607: PUSH
3608: LD_INT 1
3610: ARRAY
3611: PPUSH
3612: LD_EXP 35
3616: PUSH
3617: LD_INT 1
3619: ARRAY
3620: PPUSH
3621: LD_EXP 35
3625: PUSH
3626: LD_INT 2
3628: ARRAY
3629: PPUSH
3630: CALL_OW 243
// ru_amount := [ 4 , 5 , 6 ] [ Difficulty ] ;
3634: LD_ADDR_EXP 33
3638: PUSH
3639: LD_INT 4
3641: PUSH
3642: LD_INT 5
3644: PUSH
3645: LD_INT 6
3647: PUSH
3648: EMPTY
3649: LIST
3650: LIST
3651: LIST
3652: PUSH
3653: LD_OWVAR 67
3657: ARRAY
3658: ST_TO_ADDR
// SetResourceType ( GetBase ( ru_depot ) , mat_cans , 3000 ) ;
3659: LD_VAR 0 4
3663: PPUSH
3664: CALL_OW 274
3668: PPUSH
3669: LD_INT 1
3671: PPUSH
3672: LD_INT 3000
3674: PPUSH
3675: CALL_OW 277
// SetResourceType ( GetBase ( ru_depot ) , mat_oil , 300 ) ;
3679: LD_VAR 0 4
3683: PPUSH
3684: CALL_OW 274
3688: PPUSH
3689: LD_INT 2
3691: PPUSH
3692: LD_INT 300
3694: PPUSH
3695: CALL_OW 277
// hc_gallery :=  ;
3699: LD_ADDR_OWVAR 33
3703: PUSH
3704: LD_STRING 
3706: ST_TO_ADDR
// hc_name :=  ;
3707: LD_ADDR_OWVAR 26
3711: PUSH
3712: LD_STRING 
3714: ST_TO_ADDR
// hc_importance := 0 ;
3715: LD_ADDR_OWVAR 32
3719: PUSH
3720: LD_INT 0
3722: ST_TO_ADDR
// ru_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
3723: LD_ADDR_EXP 29
3727: PUSH
3728: LD_INT 5
3730: PUSH
3731: LD_INT 6
3733: PUSH
3734: LD_INT 7
3736: PUSH
3737: EMPTY
3738: LIST
3739: LIST
3740: LIST
3741: PUSH
3742: LD_OWVAR 67
3746: ARRAY
3747: ST_TO_ADDR
// for i = 1 to 6 do
3748: LD_ADDR_VAR 0 2
3752: PUSH
3753: DOUBLE
3754: LD_INT 1
3756: DEC
3757: ST_TO_ADDR
3758: LD_INT 6
3760: PUSH
3761: FOR_TO
3762: IFFALSE 3920
// begin PrepareHuman ( false , class_bazooker , ru_skill ) ;
3764: LD_INT 0
3766: PPUSH
3767: LD_INT 9
3769: PPUSH
3770: LD_EXP 29
3774: PPUSH
3775: CALL_OW 380
// un := CreateHuman ;
3779: LD_ADDR_VAR 0 3
3783: PUSH
3784: CALL_OW 44
3788: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_barracks ) ;
3789: LD_VAR 0 3
3793: PPUSH
3794: LD_VAR 0 7
3798: PPUSH
3799: CALL_OW 52
// PrepareHuman ( false , 4 , ru_skill ) ;
3803: LD_INT 0
3805: PPUSH
3806: LD_INT 4
3808: PPUSH
3809: LD_EXP 29
3813: PPUSH
3814: CALL_OW 380
// un := CreateHuman ;
3818: LD_ADDR_VAR 0 3
3822: PUSH
3823: CALL_OW 44
3827: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
3828: LD_VAR 0 3
3832: PPUSH
3833: LD_INT 24
3835: PPUSH
3836: CALL_OW 52
// PrepareHuman ( false , 3 , ru_skill ) ;
3840: LD_INT 0
3842: PPUSH
3843: LD_INT 3
3845: PPUSH
3846: LD_EXP 29
3850: PPUSH
3851: CALL_OW 380
// un := CreateHuman ;
3855: LD_ADDR_VAR 0 3
3859: PUSH
3860: CALL_OW 44
3864: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_factory ) ;
3865: LD_VAR 0 3
3869: PPUSH
3870: LD_VAR 0 5
3874: PPUSH
3875: CALL_OW 52
// PrepareHuman ( false , 2 , ru_skill ) ;
3879: LD_INT 0
3881: PPUSH
3882: LD_INT 2
3884: PPUSH
3885: LD_EXP 29
3889: PPUSH
3890: CALL_OW 380
// un := CreateHuman ;
3894: LD_ADDR_VAR 0 3
3898: PUSH
3899: CALL_OW 44
3903: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_depot ) ;
3904: LD_VAR 0 3
3908: PPUSH
3909: LD_VAR 0 4
3913: PPUSH
3914: CALL_OW 52
// end ;
3918: GO 3761
3920: POP
3921: POP
// russian_prepared := true ;
3922: LD_ADDR_EXP 2
3926: PUSH
3927: LD_INT 1
3929: ST_TO_ADDR
// ComConstruct ( ru_factory , ru_medium_wheeled , 3 , control_computer , ru_cargo_bay ) ;
3930: LD_VAR 0 5
3934: PPUSH
3935: LD_INT 21
3937: PPUSH
3938: LD_INT 3
3940: PPUSH
3941: LD_INT 3
3943: PPUSH
3944: LD_INT 51
3946: PPUSH
3947: CALL_OW 125
// end ;
3951: LD_VAR 0 1
3955: RET
// every 0 0$02 trigger FilterAllUnits ( [ f_side , 3 ] ) > 0 and russian_prepared do var ru_depot , ru_factory , ru_teleport , ru_bunkers , ru_buildings , ru_vehicles , ru_humans , ru_barracks , ru_engs , ru_mech , ru_sci , i , tmp , filter , cr , sib_bomb ;
3956: LD_INT 22
3958: PUSH
3959: LD_INT 3
3961: PUSH
3962: EMPTY
3963: LIST
3964: LIST
3965: PPUSH
3966: CALL_OW 69
3970: PUSH
3971: LD_INT 0
3973: GREATER
3974: PUSH
3975: LD_EXP 2
3979: AND
3980: IFFALSE 6130
3982: GO 3984
3984: DISABLE
3985: LD_INT 0
3987: PPUSH
3988: PPUSH
3989: PPUSH
3990: PPUSH
3991: PPUSH
3992: PPUSH
3993: PPUSH
3994: PPUSH
3995: PPUSH
3996: PPUSH
3997: PPUSH
3998: PPUSH
3999: PPUSH
4000: PPUSH
4001: PPUSH
4002: PPUSH
// begin enable ;
4003: ENABLE
// ru_depot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
4004: LD_ADDR_VAR 0 1
4008: PUSH
4009: LD_INT 22
4011: PUSH
4012: LD_INT 3
4014: PUSH
4015: EMPTY
4016: LIST
4017: LIST
4018: PUSH
4019: LD_INT 30
4021: PUSH
4022: LD_INT 1
4024: PUSH
4025: EMPTY
4026: LIST
4027: LIST
4028: PUSH
4029: EMPTY
4030: LIST
4031: LIST
4032: PPUSH
4033: CALL_OW 69
4037: PUSH
4038: LD_INT 1
4040: ARRAY
4041: ST_TO_ADDR
// ru_factory := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
4042: LD_ADDR_VAR 0 2
4046: PUSH
4047: LD_INT 22
4049: PUSH
4050: LD_INT 3
4052: PUSH
4053: EMPTY
4054: LIST
4055: LIST
4056: PUSH
4057: LD_INT 30
4059: PUSH
4060: LD_INT 3
4062: PUSH
4063: EMPTY
4064: LIST
4065: LIST
4066: PUSH
4067: EMPTY
4068: LIST
4069: LIST
4070: PPUSH
4071: CALL_OW 69
4075: PUSH
4076: LD_INT 1
4078: ARRAY
4079: ST_TO_ADDR
// ru_teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] ;
4080: LD_ADDR_VAR 0 3
4084: PUSH
4085: LD_INT 22
4087: PUSH
4088: LD_INT 3
4090: PUSH
4091: EMPTY
4092: LIST
4093: LIST
4094: PUSH
4095: LD_INT 30
4097: PUSH
4098: LD_INT 34
4100: PUSH
4101: EMPTY
4102: LIST
4103: LIST
4104: PUSH
4105: EMPTY
4106: LIST
4107: LIST
4108: PPUSH
4109: CALL_OW 69
4113: PUSH
4114: LD_INT 1
4116: ARRAY
4117: ST_TO_ADDR
// ru_bunkers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
4118: LD_ADDR_VAR 0 4
4122: PUSH
4123: LD_INT 22
4125: PUSH
4126: LD_INT 3
4128: PUSH
4129: EMPTY
4130: LIST
4131: LIST
4132: PUSH
4133: LD_INT 30
4135: PUSH
4136: LD_INT 33
4138: PUSH
4139: EMPTY
4140: LIST
4141: LIST
4142: PUSH
4143: EMPTY
4144: LIST
4145: LIST
4146: PPUSH
4147: CALL_OW 69
4151: ST_TO_ADDR
// ru_barracks := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
4152: LD_ADDR_VAR 0 8
4156: PUSH
4157: LD_INT 22
4159: PUSH
4160: LD_INT 3
4162: PUSH
4163: EMPTY
4164: LIST
4165: LIST
4166: PUSH
4167: LD_INT 30
4169: PUSH
4170: LD_INT 5
4172: PUSH
4173: EMPTY
4174: LIST
4175: LIST
4176: PUSH
4177: EMPTY
4178: LIST
4179: LIST
4180: PPUSH
4181: CALL_OW 69
4185: PUSH
4186: LD_INT 1
4188: ARRAY
4189: ST_TO_ADDR
// ru_buildings := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
4190: LD_ADDR_VAR 0 5
4194: PUSH
4195: LD_INT 22
4197: PUSH
4198: LD_INT 3
4200: PUSH
4201: EMPTY
4202: LIST
4203: LIST
4204: PUSH
4205: LD_INT 21
4207: PUSH
4208: LD_INT 3
4210: PUSH
4211: EMPTY
4212: LIST
4213: LIST
4214: PUSH
4215: EMPTY
4216: LIST
4217: LIST
4218: PPUSH
4219: CALL_OW 69
4223: ST_TO_ADDR
// ru_vehicles := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
4224: LD_ADDR_VAR 0 6
4228: PUSH
4229: LD_INT 22
4231: PUSH
4232: LD_INT 3
4234: PUSH
4235: EMPTY
4236: LIST
4237: LIST
4238: PUSH
4239: LD_INT 21
4241: PUSH
4242: LD_INT 2
4244: PUSH
4245: EMPTY
4246: LIST
4247: LIST
4248: PUSH
4249: EMPTY
4250: LIST
4251: LIST
4252: PPUSH
4253: CALL_OW 69
4257: ST_TO_ADDR
// ru_humans := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
4258: LD_ADDR_VAR 0 7
4262: PUSH
4263: LD_INT 22
4265: PUSH
4266: LD_INT 3
4268: PUSH
4269: EMPTY
4270: LIST
4271: LIST
4272: PUSH
4273: LD_INT 21
4275: PUSH
4276: LD_INT 1
4278: PUSH
4279: EMPTY
4280: LIST
4281: LIST
4282: PUSH
4283: EMPTY
4284: LIST
4285: LIST
4286: PPUSH
4287: CALL_OW 69
4291: ST_TO_ADDR
// ru_engs := UnitFilter ( ru_humans , [ f_class , 2 ] ) ;
4292: LD_ADDR_VAR 0 9
4296: PUSH
4297: LD_VAR 0 7
4301: PPUSH
4302: LD_INT 25
4304: PUSH
4305: LD_INT 2
4307: PUSH
4308: EMPTY
4309: LIST
4310: LIST
4311: PPUSH
4312: CALL_OW 72
4316: ST_TO_ADDR
// ru_mech := UnitFilter ( ru_humans , [ f_class , 3 ] ) ;
4317: LD_ADDR_VAR 0 10
4321: PUSH
4322: LD_VAR 0 7
4326: PPUSH
4327: LD_INT 25
4329: PUSH
4330: LD_INT 3
4332: PUSH
4333: EMPTY
4334: LIST
4335: LIST
4336: PPUSH
4337: CALL_OW 72
4341: ST_TO_ADDR
// ru_sci := UnitFilter ( ru_humans , [ f_class , 4 ] ) ;
4342: LD_ADDR_VAR 0 11
4346: PUSH
4347: LD_VAR 0 7
4351: PPUSH
4352: LD_INT 25
4354: PUSH
4355: LD_INT 4
4357: PUSH
4358: EMPTY
4359: LIST
4360: LIST
4361: PPUSH
4362: CALL_OW 72
4366: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) > 0 and ru_cargo = false then
4367: LD_INT 22
4369: PUSH
4370: LD_INT 3
4372: PUSH
4373: EMPTY
4374: LIST
4375: LIST
4376: PUSH
4377: LD_INT 34
4379: PUSH
4380: LD_INT 51
4382: PUSH
4383: EMPTY
4384: LIST
4385: LIST
4386: PUSH
4387: EMPTY
4388: LIST
4389: LIST
4390: PPUSH
4391: CALL_OW 69
4395: PUSH
4396: LD_INT 0
4398: GREATER
4399: PUSH
4400: LD_EXP 30
4404: PUSH
4405: LD_INT 0
4407: EQUAL
4408: AND
4409: IFFALSE 4449
// ru_cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
4411: LD_ADDR_EXP 30
4415: PUSH
4416: LD_INT 22
4418: PUSH
4419: LD_INT 3
4421: PUSH
4422: EMPTY
4423: LIST
4424: LIST
4425: PUSH
4426: LD_INT 34
4428: PUSH
4429: LD_INT 51
4431: PUSH
4432: EMPTY
4433: LIST
4434: LIST
4435: PUSH
4436: EMPTY
4437: LIST
4438: LIST
4439: PPUSH
4440: CALL_OW 69
4444: PUSH
4445: LD_INT 1
4447: ARRAY
4448: ST_TO_ADDR
// if ru_cargo then
4449: LD_EXP 30
4453: IFFALSE 4793
// begin if IsInArea ( ru_cargo , ru_base ) then
4455: LD_EXP 30
4459: PPUSH
4460: LD_INT 9
4462: PPUSH
4463: CALL_OW 308
4467: IFFALSE 4546
// begin if GetCargo ( ru_cargo , mat_cans ) = 0 then
4469: LD_EXP 30
4473: PPUSH
4474: LD_INT 1
4476: PPUSH
4477: CALL_OW 289
4481: PUSH
4482: LD_INT 0
4484: EQUAL
4485: IFFALSE 4503
// ComEnterUnit ( ru_cargo , ru_teleport ) else
4487: LD_EXP 30
4491: PPUSH
4492: LD_VAR 0 3
4496: PPUSH
4497: CALL_OW 120
4501: GO 4544
// if not HasTask ( ru_cargo ) then
4503: LD_EXP 30
4507: PPUSH
4508: CALL_OW 314
4512: NOT
4513: IFFALSE 4544
// ComMoveXY ( ru_cargo , GetX ( ru_depot ) , GetY ( ru_depot ) ) ;
4515: LD_EXP 30
4519: PPUSH
4520: LD_VAR 0 1
4524: PPUSH
4525: CALL_OW 250
4529: PPUSH
4530: LD_VAR 0 1
4534: PPUSH
4535: CALL_OW 251
4539: PPUSH
4540: CALL_OW 111
// end else
4544: GO 4793
// begin if not HasTask ( ru_cargo ) and GetCargo ( ru_cargo , mat_cans ) < 100 and not IsInArea ( ru_cargo , cargoa ) then
4546: LD_EXP 30
4550: PPUSH
4551: CALL_OW 314
4555: NOT
4556: PUSH
4557: LD_EXP 30
4561: PPUSH
4562: LD_INT 1
4564: PPUSH
4565: CALL_OW 289
4569: PUSH
4570: LD_INT 100
4572: LESS
4573: AND
4574: PUSH
4575: LD_EXP 30
4579: PPUSH
4580: LD_INT 10
4582: PPUSH
4583: CALL_OW 308
4587: NOT
4588: AND
4589: IFFALSE 4666
// begin cr := GetListOfCratesInArea ( ru_crates ) ;
4591: LD_ADDR_VAR 0 15
4595: PUSH
4596: LD_INT 11
4598: PPUSH
4599: CALL_OW 435
4603: ST_TO_ADDR
// if cr then
4604: LD_VAR 0 15
4608: IFFALSE 4639
// ComCollect ( ru_cargo , cr [ 1 ] , cr [ 2 ] ) else
4610: LD_EXP 30
4614: PPUSH
4615: LD_VAR 0 15
4619: PUSH
4620: LD_INT 1
4622: ARRAY
4623: PPUSH
4624: LD_VAR 0 15
4628: PUSH
4629: LD_INT 2
4631: ARRAY
4632: PPUSH
4633: CALL_OW 117
4637: GO 4666
// if not IsInArea ( ru_cargo , ru_crates ) then
4639: LD_EXP 30
4643: PPUSH
4644: LD_INT 11
4646: PPUSH
4647: CALL_OW 308
4651: NOT
4652: IFFALSE 4666
// ComMoveToArea ( ru_cargo , ru_crates ) ;
4654: LD_EXP 30
4658: PPUSH
4659: LD_INT 11
4661: PPUSH
4662: CALL_OW 113
// end ; if not HasTask ( ru_cargo ) and not IsInArea ( ru_cargo , cargoa ) and ( GetCargo ( ru_cargo , mat_cans ) = 100 or See ( your_side , ru_cargo ) ) then
4666: LD_EXP 30
4670: PPUSH
4671: CALL_OW 314
4675: NOT
4676: PUSH
4677: LD_EXP 30
4681: PPUSH
4682: LD_INT 10
4684: PPUSH
4685: CALL_OW 308
4689: NOT
4690: AND
4691: PUSH
4692: LD_EXP 30
4696: PPUSH
4697: LD_INT 1
4699: PPUSH
4700: CALL_OW 289
4704: PUSH
4705: LD_INT 100
4707: EQUAL
4708: PUSH
4709: LD_OWVAR 2
4713: PPUSH
4714: LD_EXP 30
4718: PPUSH
4719: CALL_OW 292
4723: OR
4724: AND
4725: IFFALSE 4739
// ComMoveToArea ( ru_cargo , cargoa ) ;
4727: LD_EXP 30
4731: PPUSH
4732: LD_INT 10
4734: PPUSH
4735: CALL_OW 113
// if IsInArea ( ru_cargo , cargoa ) and ru_barracks then
4739: LD_EXP 30
4743: PPUSH
4744: LD_INT 10
4746: PPUSH
4747: CALL_OW 308
4751: PUSH
4752: LD_VAR 0 8
4756: AND
4757: IFFALSE 4793
// ComSpaceShift ( UnitFilter ( ru_humans , [ f_class , class_bazooker ] ) [ 1 ] , 139 , 24 ) ;
4759: LD_VAR 0 7
4763: PPUSH
4764: LD_INT 25
4766: PUSH
4767: LD_INT 9
4769: PUSH
4770: EMPTY
4771: LIST
4772: LIST
4773: PPUSH
4774: CALL_OW 72
4778: PUSH
4779: LD_INT 1
4781: ARRAY
4782: PPUSH
4783: LD_INT 139
4785: PPUSH
4786: LD_INT 24
4788: PPUSH
4789: CALL_OW 153
// end ; end ; if ru_cargo = 0 and ru_factory and BuildingStatus ( ru_factory ) = bs_idle then
4793: LD_EXP 30
4797: PUSH
4798: LD_INT 0
4800: EQUAL
4801: PUSH
4802: LD_VAR 0 2
4806: AND
4807: PUSH
4808: LD_VAR 0 2
4812: PPUSH
4813: CALL_OW 461
4817: PUSH
4818: LD_INT 2
4820: EQUAL
4821: AND
4822: IFFALSE 4845
// ComConstruct ( ru_factory , ru_medium_wheeled , 3 , control_computer , ru_cargo_bay ) ;
4824: LD_VAR 0 2
4828: PPUSH
4829: LD_INT 21
4831: PPUSH
4832: LD_INT 3
4834: PPUSH
4835: LD_INT 3
4837: PPUSH
4838: LD_INT 51
4840: PPUSH
4841: CALL_OW 125
// if ru_factory and ru_vlist > 0 then
4845: LD_VAR 0 2
4849: PUSH
4850: LD_EXP 32
4854: PUSH
4855: LD_INT 0
4857: GREATER
4858: AND
4859: IFFALSE 4959
// begin if BuildingStatus ( ru_factory ) = bs_idle then
4861: LD_VAR 0 2
4865: PPUSH
4866: CALL_OW 461
4870: PUSH
4871: LD_INT 2
4873: EQUAL
4874: IFFALSE 4959
// begin ComConstruct ( ru_factory , ru_vlist [ 1 ] , ru_vlist [ 2 ] , ru_vlist [ 3 ] , ru_vlist [ 4 ] ) ;
4876: LD_VAR 0 2
4880: PPUSH
4881: LD_EXP 32
4885: PUSH
4886: LD_INT 1
4888: ARRAY
4889: PPUSH
4890: LD_EXP 32
4894: PUSH
4895: LD_INT 2
4897: ARRAY
4898: PPUSH
4899: LD_EXP 32
4903: PUSH
4904: LD_INT 3
4906: ARRAY
4907: PPUSH
4908: LD_EXP 32
4912: PUSH
4913: LD_INT 4
4915: ARRAY
4916: PPUSH
4917: CALL_OW 125
// for i = 1 to 4 do
4921: LD_ADDR_VAR 0 12
4925: PUSH
4926: DOUBLE
4927: LD_INT 1
4929: DEC
4930: ST_TO_ADDR
4931: LD_INT 4
4933: PUSH
4934: FOR_TO
4935: IFFALSE 4957
// ru_vlist := Delete ( ru_vlist , 1 ) ;
4937: LD_ADDR_EXP 32
4941: PUSH
4942: LD_EXP 32
4946: PPUSH
4947: LD_INT 1
4949: PPUSH
4950: CALL_OW 3
4954: ST_TO_ADDR
4955: GO 4934
4957: POP
4958: POP
// end ; end ; if BuildingStatus ( ru_lab ) = bs_idle and ru_sib_bomb then
4959: LD_INT 24
4961: PPUSH
4962: CALL_OW 461
4966: PUSH
4967: LD_INT 2
4969: EQUAL
4970: PUSH
4971: LD_EXP 4
4975: AND
4976: IFFALSE 5004
// if GetTech ( tech_sibfiss , 3 ) = state_enabled then
4978: LD_INT 25
4980: PPUSH
4981: LD_INT 3
4983: PPUSH
4984: CALL_OW 321
4988: PUSH
4989: LD_INT 1
4991: EQUAL
4992: IFFALSE 5004
// ComResearch ( ru_lab , tech_sibfiss ) ;
4994: LD_INT 24
4996: PPUSH
4997: LD_INT 25
4999: PPUSH
5000: CALL_OW 124
// if GetTech ( tech_sibfiss , 3 ) = state_researched and tick mod 5 5$00 = 0 then
5004: LD_INT 25
5006: PPUSH
5007: LD_INT 3
5009: PPUSH
5010: CALL_OW 321
5014: PUSH
5015: LD_INT 2
5017: EQUAL
5018: PUSH
5019: LD_OWVAR 1
5023: PUSH
5024: LD_INT 10500
5026: MOD
5027: PUSH
5028: LD_INT 0
5030: EQUAL
5031: AND
5032: IFFALSE 5070
// if BuildingStatus ( ru_factory ) = bs_idle then
5034: LD_VAR 0 2
5038: PPUSH
5039: CALL_OW 461
5043: PUSH
5044: LD_INT 2
5046: EQUAL
5047: IFFALSE 5070
// ComConstruct ( ru_factory , ru_heavy_wheeled , 3 , control_computer , ru_siberium_rocket ) ;
5049: LD_VAR 0 2
5053: PPUSH
5054: LD_INT 23
5056: PPUSH
5057: LD_INT 3
5059: PPUSH
5060: LD_INT 3
5062: PPUSH
5063: LD_INT 48
5065: PPUSH
5066: CALL_OW 125
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) > 0 then
5070: LD_INT 22
5072: PUSH
5073: LD_INT 3
5075: PUSH
5076: EMPTY
5077: LIST
5078: LIST
5079: PUSH
5080: LD_INT 34
5082: PUSH
5083: LD_INT 48
5085: PUSH
5086: EMPTY
5087: LIST
5088: LIST
5089: PUSH
5090: EMPTY
5091: LIST
5092: LIST
5093: PPUSH
5094: CALL_OW 69
5098: PUSH
5099: LD_INT 0
5101: GREATER
5102: IFFALSE 5476
// begin sib_bomb := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) [ 1 ] ;
5104: LD_ADDR_VAR 0 16
5108: PUSH
5109: LD_INT 22
5111: PUSH
5112: LD_INT 3
5114: PUSH
5115: EMPTY
5116: LIST
5117: LIST
5118: PUSH
5119: LD_INT 34
5121: PUSH
5122: LD_INT 48
5124: PUSH
5125: EMPTY
5126: LIST
5127: LIST
5128: PUSH
5129: EMPTY
5130: LIST
5131: LIST
5132: PPUSH
5133: CALL_OW 69
5137: PUSH
5138: LD_INT 1
5140: ARRAY
5141: ST_TO_ADDR
// if IsInArea ( sib_bomb , ru_base ) then
5142: LD_VAR 0 16
5146: PPUSH
5147: LD_INT 9
5149: PPUSH
5150: CALL_OW 308
5154: IFFALSE 5172
// ComEnterUnit ( sib_bomb , ru_teleport ) else
5156: LD_VAR 0 16
5160: PPUSH
5161: LD_VAR 0 3
5165: PPUSH
5166: CALL_OW 120
5170: GO 5476
// if not HasTask ( sib_bomb ) then
5172: LD_VAR 0 16
5176: PPUSH
5177: CALL_OW 314
5181: NOT
5182: IFFALSE 5476
// if GetLives ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) > 250 then
5184: LD_INT 22
5186: PUSH
5187: LD_OWVAR 2
5191: PUSH
5192: EMPTY
5193: LIST
5194: LIST
5195: PUSH
5196: LD_INT 30
5198: PUSH
5199: LD_INT 1
5201: PUSH
5202: EMPTY
5203: LIST
5204: LIST
5205: PUSH
5206: EMPTY
5207: LIST
5208: LIST
5209: PPUSH
5210: CALL_OW 69
5214: PUSH
5215: LD_INT 1
5217: ARRAY
5218: PPUSH
5219: CALL_OW 256
5223: PUSH
5224: LD_INT 250
5226: GREATER
5227: IFFALSE 5320
// ComAttackPlace ( sib_bomb , GetX ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) , GetY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ) else
5229: LD_VAR 0 16
5233: PPUSH
5234: LD_INT 22
5236: PUSH
5237: LD_OWVAR 2
5241: PUSH
5242: EMPTY
5243: LIST
5244: LIST
5245: PUSH
5246: LD_INT 30
5248: PUSH
5249: LD_INT 1
5251: PUSH
5252: EMPTY
5253: LIST
5254: LIST
5255: PUSH
5256: EMPTY
5257: LIST
5258: LIST
5259: PPUSH
5260: CALL_OW 69
5264: PUSH
5265: LD_INT 1
5267: ARRAY
5268: PPUSH
5269: CALL_OW 250
5273: PPUSH
5274: LD_INT 22
5276: PUSH
5277: LD_OWVAR 2
5281: PUSH
5282: EMPTY
5283: LIST
5284: LIST
5285: PUSH
5286: LD_INT 30
5288: PUSH
5289: LD_INT 1
5291: PUSH
5292: EMPTY
5293: LIST
5294: LIST
5295: PUSH
5296: EMPTY
5297: LIST
5298: LIST
5299: PPUSH
5300: CALL_OW 69
5304: PUSH
5305: LD_INT 1
5307: ARRAY
5308: PPUSH
5309: CALL_OW 251
5313: PPUSH
5314: CALL_OW 116
5318: GO 5476
// if FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) > 0 then
5320: LD_INT 22
5322: PUSH
5323: LD_OWVAR 2
5327: PUSH
5328: EMPTY
5329: LIST
5330: LIST
5331: PUSH
5332: LD_INT 21
5334: PUSH
5335: LD_INT 3
5337: PUSH
5338: EMPTY
5339: LIST
5340: LIST
5341: PUSH
5342: EMPTY
5343: LIST
5344: LIST
5345: PPUSH
5346: CALL_OW 69
5350: PUSH
5351: LD_INT 0
5353: GREATER
5354: IFFALSE 5447
// ComAttackPlace ( sib_bomb , GetX ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) [ 1 ] ) , GetY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) [ 1 ] ) ) else
5356: LD_VAR 0 16
5360: PPUSH
5361: LD_INT 22
5363: PUSH
5364: LD_OWVAR 2
5368: PUSH
5369: EMPTY
5370: LIST
5371: LIST
5372: PUSH
5373: LD_INT 21
5375: PUSH
5376: LD_INT 3
5378: PUSH
5379: EMPTY
5380: LIST
5381: LIST
5382: PUSH
5383: EMPTY
5384: LIST
5385: LIST
5386: PPUSH
5387: CALL_OW 69
5391: PUSH
5392: LD_INT 1
5394: ARRAY
5395: PPUSH
5396: CALL_OW 250
5400: PPUSH
5401: LD_INT 22
5403: PUSH
5404: LD_OWVAR 2
5408: PUSH
5409: EMPTY
5410: LIST
5411: LIST
5412: PUSH
5413: LD_INT 21
5415: PUSH
5416: LD_INT 3
5418: PUSH
5419: EMPTY
5420: LIST
5421: LIST
5422: PUSH
5423: EMPTY
5424: LIST
5425: LIST
5426: PPUSH
5427: CALL_OW 69
5431: PUSH
5432: LD_INT 1
5434: ARRAY
5435: PPUSH
5436: CALL_OW 251
5440: PPUSH
5441: CALL_OW 116
5445: GO 5476
// ComAttackPlace ( sib_bomb , GetX ( player_commander ) , GetY ( player_commander ) ) ;
5447: LD_VAR 0 16
5451: PPUSH
5452: LD_EXP 11
5456: PPUSH
5457: CALL_OW 250
5461: PPUSH
5462: LD_EXP 11
5466: PPUSH
5467: CALL_OW 251
5471: PPUSH
5472: CALL_OW 116
// end ; if ru_can_attack then
5476: LD_EXP 3
5480: IFFALSE 5628
// if ru_time > 0 0$00 then
5482: LD_EXP 34
5486: PUSH
5487: LD_INT 0
5489: GREATER
5490: IFFALSE 5508
// ru_time := ru_time - 0 0$03 else
5492: LD_ADDR_EXP 34
5496: PUSH
5497: LD_EXP 34
5501: PUSH
5502: LD_INT 105
5504: MINUS
5505: ST_TO_ADDR
5506: GO 5628
// begin ru_time := Rand ( 9 9$39 , 14 14$39 ) ;
5508: LD_ADDR_EXP 34
5512: PUSH
5513: LD_INT 20265
5515: PPUSH
5516: LD_INT 30765
5518: PPUSH
5519: CALL_OW 12
5523: ST_TO_ADDR
// for i = 1 to ru_amount do
5524: LD_ADDR_VAR 0 12
5528: PUSH
5529: DOUBLE
5530: LD_INT 1
5532: DEC
5533: ST_TO_ADDR
5534: LD_EXP 33
5538: PUSH
5539: FOR_TO
5540: IFFALSE 5626
// begin ru_vlist := ru_vlist ^ ru_heavy_wheeled ;
5542: LD_ADDR_EXP 32
5546: PUSH
5547: LD_EXP 32
5551: PUSH
5552: LD_INT 23
5554: ADD
5555: ST_TO_ADDR
// ru_vlist := ru_vlist ^ engine_siberite ;
5556: LD_ADDR_EXP 32
5560: PUSH
5561: LD_EXP 32
5565: PUSH
5566: LD_INT 3
5568: ADD
5569: ST_TO_ADDR
// ru_vlist := ru_vlist ^ control_computer ;
5570: LD_ADDR_EXP 32
5574: PUSH
5575: LD_EXP 32
5579: PUSH
5580: LD_INT 3
5582: ADD
5583: ST_TO_ADDR
// ru_vlist := ru_vlist ^ [ ru_heavy_gun , ru_rocket_launcher , ru_rocket ] [ MultiRand ( 1 , 2 , 3 ) ] ;
5584: LD_ADDR_EXP 32
5588: PUSH
5589: LD_EXP 32
5593: PUSH
5594: LD_INT 46
5596: PUSH
5597: LD_INT 45
5599: PUSH
5600: LD_INT 47
5602: PUSH
5603: EMPTY
5604: LIST
5605: LIST
5606: LIST
5607: PUSH
5608: LD_INT 1
5610: PPUSH
5611: LD_INT 2
5613: PPUSH
5614: LD_INT 3
5616: PPUSH
5617: CALL_OW 14
5621: ARRAY
5622: ADD
5623: ST_TO_ADDR
// end ;
5624: GO 5539
5626: POP
5627: POP
// end ; if UnitFilter ( ru_bunkers , [ f_bweapon , 0 ] ) > 0 then
5628: LD_VAR 0 4
5632: PPUSH
5633: LD_INT 35
5635: PUSH
5636: LD_INT 0
5638: PUSH
5639: EMPTY
5640: LIST
5641: LIST
5642: PPUSH
5643: CALL_OW 72
5647: PUSH
5648: LD_INT 0
5650: GREATER
5651: IFFALSE 5699
// if BuildingStatus ( ru_factory ) = bs_idle then
5653: LD_VAR 0 2
5657: PPUSH
5658: CALL_OW 461
5662: PUSH
5663: LD_INT 2
5665: EQUAL
5666: IFFALSE 5699
// ComPlaceWeapon ( UnitFilter ( ru_bunkers , [ f_bweapon , 0 ] ) [ 1 ] , ru_rocket ) ;
5668: LD_VAR 0 4
5672: PPUSH
5673: LD_INT 35
5675: PUSH
5676: LD_INT 0
5678: PUSH
5679: EMPTY
5680: LIST
5681: LIST
5682: PPUSH
5683: CALL_OW 72
5687: PUSH
5688: LD_INT 1
5690: ARRAY
5691: PPUSH
5692: LD_INT 47
5694: PPUSH
5695: CALL_OW 148
// if ru_force >= ru_amount then
5699: LD_EXP 28
5703: PUSH
5704: LD_EXP 33
5708: GREATEREQUAL
5709: IFFALSE 5720
// RaiseSailEvent ( event_russian_attack ) ;
5711: LD_EXP 22
5715: PPUSH
5716: CALL_OW 427
// if ru_engs > 0 then
5720: LD_VAR 0 9
5724: PUSH
5725: LD_INT 0
5727: GREATER
5728: IFFALSE 6130
// begin if UnitFilter ( ru_buildings , [ f_not , [ f_lives , 1000 ] ] ) > 0 then
5730: LD_VAR 0 5
5734: PPUSH
5735: LD_INT 3
5737: PUSH
5738: LD_INT 24
5740: PUSH
5741: LD_INT 1000
5743: PUSH
5744: EMPTY
5745: LIST
5746: LIST
5747: PUSH
5748: EMPTY
5749: LIST
5750: LIST
5751: PPUSH
5752: CALL_OW 72
5756: PUSH
5757: LD_INT 0
5759: GREATER
5760: IFFALSE 5915
// begin filter := UnitFilter ( ru_buildings , [ f_not , [ f_lives , 1000 ] ] ) ;
5762: LD_ADDR_VAR 0 14
5766: PUSH
5767: LD_VAR 0 5
5771: PPUSH
5772: LD_INT 3
5774: PUSH
5775: LD_INT 24
5777: PUSH
5778: LD_INT 1000
5780: PUSH
5781: EMPTY
5782: LIST
5783: LIST
5784: PUSH
5785: EMPTY
5786: LIST
5787: LIST
5788: PPUSH
5789: CALL_OW 72
5793: ST_TO_ADDR
// for i = 1 to ru_engs do
5794: LD_ADDR_VAR 0 12
5798: PUSH
5799: DOUBLE
5800: LD_INT 1
5802: DEC
5803: ST_TO_ADDR
5804: LD_VAR 0 9
5808: PUSH
5809: FOR_TO
5810: IFFALSE 5911
// begin if IsInUnit ( ru_engs [ i ] ) then
5812: LD_VAR 0 9
5816: PUSH
5817: LD_VAR 0 12
5821: ARRAY
5822: PPUSH
5823: CALL_OW 310
5827: IFFALSE 5846
// ComExitBuilding ( ru_engs [ i ] ) else
5829: LD_VAR 0 9
5833: PUSH
5834: LD_VAR 0 12
5838: ARRAY
5839: PPUSH
5840: CALL_OW 122
5844: GO 5909
// if not HasTask ( ru_engs [ i ] ) and GetLives ( ru_engs [ i ] ) > 600 then
5846: LD_VAR 0 9
5850: PUSH
5851: LD_VAR 0 12
5855: ARRAY
5856: PPUSH
5857: CALL_OW 314
5861: NOT
5862: PUSH
5863: LD_VAR 0 9
5867: PUSH
5868: LD_VAR 0 12
5872: ARRAY
5873: PPUSH
5874: CALL_OW 256
5878: PUSH
5879: LD_INT 600
5881: GREATER
5882: AND
5883: IFFALSE 5909
// ComRepairBuilding ( ru_engs [ i ] , filter [ 1 ] ) ;
5885: LD_VAR 0 9
5889: PUSH
5890: LD_VAR 0 12
5894: ARRAY
5895: PPUSH
5896: LD_VAR 0 14
5900: PUSH
5901: LD_INT 1
5903: ARRAY
5904: PPUSH
5905: CALL_OW 130
// end ;
5909: GO 5809
5911: POP
5912: POP
// end else
5913: GO 6130
// begin if ru_blist = 0 then
5915: LD_EXP 31
5919: PUSH
5920: LD_INT 0
5922: EQUAL
5923: IFFALSE 6005
// begin for i = 1 to ru_engs do
5925: LD_ADDR_VAR 0 12
5929: PUSH
5930: DOUBLE
5931: LD_INT 1
5933: DEC
5934: ST_TO_ADDR
5935: LD_VAR 0 9
5939: PUSH
5940: FOR_TO
5941: IFFALSE 6001
// if not HasTask ( ru_engs [ i ] ) and not IsInUnit ( ru_engs [ i ] ) then
5943: LD_VAR 0 9
5947: PUSH
5948: LD_VAR 0 12
5952: ARRAY
5953: PPUSH
5954: CALL_OW 314
5958: NOT
5959: PUSH
5960: LD_VAR 0 9
5964: PUSH
5965: LD_VAR 0 12
5969: ARRAY
5970: PPUSH
5971: CALL_OW 310
5975: NOT
5976: AND
5977: IFFALSE 5999
// ComEnterUnit ( ru_engs [ i ] , ru_depot ) ;
5979: LD_VAR 0 9
5983: PUSH
5984: LD_VAR 0 12
5988: ARRAY
5989: PPUSH
5990: LD_VAR 0 1
5994: PPUSH
5995: CALL_OW 120
5999: GO 5940
6001: POP
6002: POP
// end else
6003: GO 6130
// begin for i = 1 to ru_engs do
6005: LD_ADDR_VAR 0 12
6009: PUSH
6010: DOUBLE
6011: LD_INT 1
6013: DEC
6014: ST_TO_ADDR
6015: LD_VAR 0 9
6019: PUSH
6020: FOR_TO
6021: IFFALSE 6128
// begin if IsInUnit ( ru_engs [ i ] ) then
6023: LD_VAR 0 9
6027: PUSH
6028: LD_VAR 0 12
6032: ARRAY
6033: PPUSH
6034: CALL_OW 310
6038: IFFALSE 6057
// ComExitBuilding ( ru_engs [ i ] ) else
6040: LD_VAR 0 9
6044: PUSH
6045: LD_VAR 0 12
6049: ARRAY
6050: PPUSH
6051: CALL_OW 122
6055: GO 6126
// if not HasTask ( ru_engs [ i ] ) then
6057: LD_VAR 0 9
6061: PUSH
6062: LD_VAR 0 12
6066: ARRAY
6067: PPUSH
6068: CALL_OW 314
6072: NOT
6073: IFFALSE 6126
// ComBuild ( ru_engs [ i ] , ru_blist [ 1 ] , ru_blist [ 2 ] , ru_blist [ 3 ] , ru_blist [ 4 ] ) ;
6075: LD_VAR 0 9
6079: PUSH
6080: LD_VAR 0 12
6084: ARRAY
6085: PPUSH
6086: LD_EXP 31
6090: PUSH
6091: LD_INT 1
6093: ARRAY
6094: PPUSH
6095: LD_EXP 31
6099: PUSH
6100: LD_INT 2
6102: ARRAY
6103: PPUSH
6104: LD_EXP 31
6108: PUSH
6109: LD_INT 3
6111: ARRAY
6112: PPUSH
6113: LD_EXP 31
6117: PUSH
6118: LD_INT 4
6120: ARRAY
6121: PPUSH
6122: CALL_OW 145
// end ;
6126: GO 6020
6128: POP
6129: POP
// end ; end ; end ; end ;
6130: PPOPN 16
6132: END
// every 3 3$40 + 0 0$45 trigger russian_prepared and GetListOfCratesInArea ( ru_crates ) < 10 do
6133: LD_EXP 2
6137: PUSH
6138: LD_INT 11
6140: PPUSH
6141: CALL_OW 435
6145: PUSH
6146: LD_INT 10
6148: LESS
6149: AND
6150: IFFALSE 6213
6152: GO 6154
6154: DISABLE
// begin enable ;
6155: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , ru_crates , true ) ;
6156: LD_INT 1
6158: PPUSH
6159: LD_INT 5
6161: PPUSH
6162: CALL_OW 12
6166: PPUSH
6167: LD_INT 11
6169: PPUSH
6170: LD_INT 1
6172: PPUSH
6173: CALL_OW 55
// Wait ( Rand ( 0 0$43 , 1 1$00 ) ) ;
6177: LD_INT 1505
6179: PPUSH
6180: LD_INT 2100
6182: PPUSH
6183: CALL_OW 12
6187: PPUSH
6188: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 5 ) , ru_crates , true ) ;
6192: LD_INT 1
6194: PPUSH
6195: LD_INT 5
6197: PPUSH
6198: CALL_OW 12
6202: PPUSH
6203: LD_INT 11
6205: PPUSH
6206: LD_INT 1
6208: PPUSH
6209: CALL_OW 55
// end ;
6213: END
// every 15 15$00 + 25 25$00 trigger not ru_sib_bomb do var i , tmp ;
6214: LD_EXP 4
6218: NOT
6219: IFFALSE 6334
6221: GO 6223
6223: DISABLE
6224: LD_INT 0
6226: PPUSH
6227: PPUSH
// begin enable ;
6228: ENABLE
// i := Rand ( 0 , 100 ) ;
6229: LD_ADDR_VAR 0 1
6233: PUSH
6234: LD_INT 0
6236: PPUSH
6237: LD_INT 100
6239: PPUSH
6240: CALL_OW 12
6244: ST_TO_ADDR
// case your_side of 1 :
6245: LD_OWVAR 2
6249: PUSH
6250: LD_INT 1
6252: DOUBLE
6253: EQUAL
6254: IFTRUE 6258
6256: GO 6269
6258: POP
// tmp := 10 ; 2 :
6259: LD_ADDR_VAR 0 2
6263: PUSH
6264: LD_INT 10
6266: ST_TO_ADDR
6267: GO 6308
6269: LD_INT 2
6271: DOUBLE
6272: EQUAL
6273: IFTRUE 6277
6275: GO 6288
6277: POP
// tmp := 0 ; 7 :
6278: LD_ADDR_VAR 0 2
6282: PUSH
6283: LD_INT 0
6285: ST_TO_ADDR
6286: GO 6308
6288: LD_INT 7
6290: DOUBLE
6291: EQUAL
6292: IFTRUE 6296
6294: GO 6307
6296: POP
// tmp := 15 ; end ;
6297: LD_ADDR_VAR 0 2
6301: PUSH
6302: LD_INT 15
6304: ST_TO_ADDR
6305: GO 6308
6307: POP
// if i < chance_to_bomb + tmp then
6308: LD_VAR 0 1
6312: PUSH
6313: LD_EXP 5
6317: PUSH
6318: LD_VAR 0 2
6322: PLUS
6323: LESS
6324: IFFALSE 6334
// ru_sib_bomb := true ;
6326: LD_ADDR_EXP 4
6330: PUSH
6331: LD_INT 1
6333: ST_TO_ADDR
// end ;
6334: PPOPN 2
6336: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_weapon , us_siberium_rocket ] ] ) do
6337: LD_INT 22
6339: PUSH
6340: LD_OWVAR 2
6344: PUSH
6345: EMPTY
6346: LIST
6347: LIST
6348: PUSH
6349: LD_INT 34
6351: PUSH
6352: LD_INT 8
6354: PUSH
6355: EMPTY
6356: LIST
6357: LIST
6358: PUSH
6359: EMPTY
6360: LIST
6361: LIST
6362: PPUSH
6363: CALL_OW 69
6367: IFFALSE 6380
6369: GO 6371
6371: DISABLE
// begin ru_sib_bomb := true ;
6372: LD_ADDR_EXP 4
6376: PUSH
6377: LD_INT 1
6379: ST_TO_ADDR
// end ;
6380: END
// every 15 15$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) do var i ;
6381: LD_INT 22
6383: PUSH
6384: LD_INT 3
6386: PUSH
6387: EMPTY
6388: LIST
6389: LIST
6390: PUSH
6391: LD_INT 30
6393: PUSH
6394: LD_INT 34
6396: PUSH
6397: EMPTY
6398: LIST
6399: LIST
6400: PUSH
6401: EMPTY
6402: LIST
6403: LIST
6404: PPUSH
6405: CALL_OW 69
6409: IFFALSE 6508
6411: GO 6413
6413: DISABLE
6414: LD_INT 0
6416: PPUSH
// begin enable ;
6417: ENABLE
// i := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
6418: LD_ADDR_VAR 0 1
6422: PUSH
6423: LD_INT 1
6425: PUSH
6426: LD_INT 3
6428: PUSH
6429: EMPTY
6430: LIST
6431: LIST
6432: PUSH
6433: LD_INT 1
6435: PPUSH
6436: LD_INT 2
6438: PPUSH
6439: CALL_OW 12
6443: ARRAY
6444: ST_TO_ADDR
// TeleportExit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] , ru_teleport_exit [ i ] , ru_teleport_exit [ i + 1 ] ) ;
6445: LD_INT 22
6447: PUSH
6448: LD_INT 3
6450: PUSH
6451: EMPTY
6452: LIST
6453: LIST
6454: PUSH
6455: LD_INT 30
6457: PUSH
6458: LD_INT 34
6460: PUSH
6461: EMPTY
6462: LIST
6463: LIST
6464: PUSH
6465: EMPTY
6466: LIST
6467: LIST
6468: PPUSH
6469: CALL_OW 69
6473: PUSH
6474: LD_INT 1
6476: ARRAY
6477: PPUSH
6478: LD_EXP 35
6482: PUSH
6483: LD_VAR 0 1
6487: ARRAY
6488: PPUSH
6489: LD_EXP 35
6493: PUSH
6494: LD_VAR 0 1
6498: PUSH
6499: LD_INT 1
6501: PLUS
6502: ARRAY
6503: PPUSH
6504: CALL_OW 243
// end ;
6508: PPOPN 1
6510: END
// every 30 30$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) do var ru_depot ;
6511: LD_INT 22
6513: PUSH
6514: LD_INT 3
6516: PUSH
6517: EMPTY
6518: LIST
6519: LIST
6520: PUSH
6521: LD_INT 30
6523: PUSH
6524: LD_INT 1
6526: PUSH
6527: EMPTY
6528: LIST
6529: LIST
6530: PUSH
6531: EMPTY
6532: LIST
6533: LIST
6534: PPUSH
6535: CALL_OW 69
6539: IFFALSE 6626
6541: GO 6543
6543: DISABLE
6544: LD_INT 0
6546: PPUSH
// begin enable ;
6547: ENABLE
// ru_depot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
6548: LD_ADDR_VAR 0 1
6552: PUSH
6553: LD_INT 22
6555: PUSH
6556: LD_INT 3
6558: PUSH
6559: EMPTY
6560: LIST
6561: LIST
6562: PUSH
6563: LD_INT 30
6565: PUSH
6566: LD_INT 1
6568: PUSH
6569: EMPTY
6570: LIST
6571: LIST
6572: PUSH
6573: EMPTY
6574: LIST
6575: LIST
6576: PPUSH
6577: CALL_OW 69
6581: PUSH
6582: LD_INT 1
6584: ARRAY
6585: ST_TO_ADDR
// AddResourceType ( GetBase ( ru_depot ) , mat_cans , 6000 ) ;
6586: LD_VAR 0 1
6590: PPUSH
6591: CALL_OW 274
6595: PPUSH
6596: LD_INT 1
6598: PPUSH
6599: LD_INT 6000
6601: PPUSH
6602: CALL_OW 276
// AddResourceType ( GetBase ( ru_depot ) , mat_oil , 600 ) ;
6606: LD_VAR 0 1
6610: PPUSH
6611: CALL_OW 274
6615: PPUSH
6616: LD_INT 2
6618: PPUSH
6619: LD_INT 600
6621: PPUSH
6622: CALL_OW 276
// end ;
6626: PPOPN 1
6628: END
// export function RussianAttack ( ) ; var path , units , p , i , teleport ; begin
6629: LD_INT 0
6631: PPUSH
6632: PPUSH
6633: PPUSH
6634: PPUSH
6635: PPUSH
6636: PPUSH
// units := ru_force ;
6637: LD_ADDR_VAR 0 3
6641: PUSH
6642: LD_EXP 28
6646: ST_TO_ADDR
// teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) ;
6647: LD_ADDR_VAR 0 6
6651: PUSH
6652: LD_INT 22
6654: PUSH
6655: LD_INT 3
6657: PUSH
6658: EMPTY
6659: LIST
6660: LIST
6661: PUSH
6662: LD_INT 30
6664: PUSH
6665: LD_INT 34
6667: PUSH
6668: EMPTY
6669: LIST
6670: LIST
6671: PUSH
6672: EMPTY
6673: LIST
6674: LIST
6675: PPUSH
6676: CALL_OW 69
6680: ST_TO_ADDR
// ru_force := [ ] ;
6681: LD_ADDR_EXP 28
6685: PUSH
6686: EMPTY
6687: ST_TO_ADDR
// if not teleport then
6688: LD_VAR 0 6
6692: NOT
6693: IFFALSE 6735
// begin for i in units do
6695: LD_ADDR_VAR 0 5
6699: PUSH
6700: LD_VAR 0 3
6704: PUSH
6705: FOR_IN
6706: IFFALSE 6731
// TeleportUnit ( i , 150 , 65 , 12 , true ) ;
6708: LD_VAR 0 5
6712: PPUSH
6713: LD_INT 150
6715: PPUSH
6716: LD_INT 65
6718: PPUSH
6719: LD_INT 12
6721: PPUSH
6722: LD_INT 1
6724: PPUSH
6725: CALL_OW 483
6729: GO 6705
6731: POP
6732: POP
// end else
6733: GO 6830
// begin repeat for i = 1 to units do
6735: LD_ADDR_VAR 0 5
6739: PUSH
6740: DOUBLE
6741: LD_INT 1
6743: DEC
6744: ST_TO_ADDR
6745: LD_VAR 0 3
6749: PUSH
6750: FOR_TO
6751: IFFALSE 6799
// if IsInArea ( units [ i ] , ru_base ) then
6753: LD_VAR 0 3
6757: PUSH
6758: LD_VAR 0 5
6762: ARRAY
6763: PPUSH
6764: LD_INT 9
6766: PPUSH
6767: CALL_OW 308
6771: IFFALSE 6797
// ComEnterUnit ( units [ i ] , teleport [ 1 ] ) ;
6773: LD_VAR 0 3
6777: PUSH
6778: LD_VAR 0 5
6782: ARRAY
6783: PPUSH
6784: LD_VAR 0 6
6788: PUSH
6789: LD_INT 1
6791: ARRAY
6792: PPUSH
6793: CALL_OW 120
6797: GO 6750
6799: POP
6800: POP
// wait ( 0 0$10 ) ;
6801: LD_INT 350
6803: PPUSH
6804: CALL_OW 67
// until not UnitFilter ( units , [ f_inarea , ru_base ] ) ;
6808: LD_VAR 0 3
6812: PPUSH
6813: LD_INT 95
6815: PUSH
6816: LD_INT 9
6818: PUSH
6819: EMPTY
6820: LIST
6821: LIST
6822: PPUSH
6823: CALL_OW 72
6827: NOT
6828: IFFALSE 6735
// end ; p := rand ( 1 , 2 ) ;
6830: LD_ADDR_VAR 0 4
6834: PUSH
6835: LD_INT 1
6837: PPUSH
6838: LD_INT 2
6840: PPUSH
6841: CALL_OW 12
6845: ST_TO_ADDR
// case p of 1 :
6846: LD_VAR 0 4
6850: PUSH
6851: LD_INT 1
6853: DOUBLE
6854: EQUAL
6855: IFTRUE 6859
6857: GO 6913
6859: POP
// path := [ [ 159 , 71 ] , [ 152 , 99 ] , [ 107 , 119 ] , [ 104 , 127 ] ] ; 2 :
6860: LD_ADDR_VAR 0 2
6864: PUSH
6865: LD_INT 159
6867: PUSH
6868: LD_INT 71
6870: PUSH
6871: EMPTY
6872: LIST
6873: LIST
6874: PUSH
6875: LD_INT 152
6877: PUSH
6878: LD_INT 99
6880: PUSH
6881: EMPTY
6882: LIST
6883: LIST
6884: PUSH
6885: LD_INT 107
6887: PUSH
6888: LD_INT 119
6890: PUSH
6891: EMPTY
6892: LIST
6893: LIST
6894: PUSH
6895: LD_INT 104
6897: PUSH
6898: LD_INT 127
6900: PUSH
6901: EMPTY
6902: LIST
6903: LIST
6904: PUSH
6905: EMPTY
6906: LIST
6907: LIST
6908: LIST
6909: LIST
6910: ST_TO_ADDR
6911: GO 6976
6913: LD_INT 2
6915: DOUBLE
6916: EQUAL
6917: IFTRUE 6921
6919: GO 6975
6921: POP
// path := [ [ 116 , 36 ] , [ 91 , 52 ] , [ 53 , 67 ] , [ 58 , 107 ] ] ; end ;
6922: LD_ADDR_VAR 0 2
6926: PUSH
6927: LD_INT 116
6929: PUSH
6930: LD_INT 36
6932: PUSH
6933: EMPTY
6934: LIST
6935: LIST
6936: PUSH
6937: LD_INT 91
6939: PUSH
6940: LD_INT 52
6942: PUSH
6943: EMPTY
6944: LIST
6945: LIST
6946: PUSH
6947: LD_INT 53
6949: PUSH
6950: LD_INT 67
6952: PUSH
6953: EMPTY
6954: LIST
6955: LIST
6956: PUSH
6957: LD_INT 58
6959: PUSH
6960: LD_INT 107
6962: PUSH
6963: EMPTY
6964: LIST
6965: LIST
6966: PUSH
6967: EMPTY
6968: LIST
6969: LIST
6970: LIST
6971: LIST
6972: ST_TO_ADDR
6973: GO 6976
6975: POP
// if FilterAllUnits ( [ f_side , 7 ] ) and p > 1 then
6976: LD_INT 22
6978: PUSH
6979: LD_INT 7
6981: PUSH
6982: EMPTY
6983: LIST
6984: LIST
6985: PPUSH
6986: CALL_OW 69
6990: PUSH
6991: LD_VAR 0 4
6995: PUSH
6996: LD_INT 1
6998: GREATER
6999: AND
7000: IFFALSE 7031
// path := [ [ 116 , 36 ] , [ 91 , 52 ] ] ;
7002: LD_ADDR_VAR 0 2
7006: PUSH
7007: LD_INT 116
7009: PUSH
7010: LD_INT 36
7012: PUSH
7013: EMPTY
7014: LIST
7015: LIST
7016: PUSH
7017: LD_INT 91
7019: PUSH
7020: LD_INT 52
7022: PUSH
7023: EMPTY
7024: LIST
7025: LIST
7026: PUSH
7027: EMPTY
7028: LIST
7029: LIST
7030: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7031: LD_INT 35
7033: PPUSH
7034: CALL_OW 67
// until not AgressiveMove ( units , path ) ;
7038: LD_VAR 0 3
7042: PPUSH
7043: LD_VAR 0 2
7047: PPUSH
7048: CALL 75625 0 2
7052: NOT
7053: IFFALSE 7031
// end ; end_of_file
7055: LD_VAR 0 1
7059: RET
// export function RemoveLegion ; var i ; begin
7060: LD_INT 0
7062: PPUSH
7063: PPUSH
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
7064: LD_ADDR_VAR 0 2
7068: PUSH
7069: LD_INT 22
7071: PUSH
7072: LD_INT 8
7074: PUSH
7075: EMPTY
7076: LIST
7077: LIST
7078: PPUSH
7079: CALL_OW 69
7083: PUSH
7084: FOR_IN
7085: IFFALSE 7098
// RemoveUnit ( i ) ;
7087: LD_VAR 0 2
7091: PPUSH
7092: CALL_OW 64
7096: GO 7084
7098: POP
7099: POP
// end ;
7100: LD_VAR 0 1
7104: RET
// export legion_force , legion_skill , legion_mines , legion_blist , legion_vlist , legion_enemy ; export function PrepareLegion ; var un , i , tmp , veh , l_depot , p , l_factory , l_lab , l_towers ; begin
7105: LD_INT 0
7107: PPUSH
7108: PPUSH
7109: PPUSH
7110: PPUSH
7111: PPUSH
7112: PPUSH
7113: PPUSH
7114: PPUSH
7115: PPUSH
7116: PPUSH
// l_depot := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
7117: LD_ADDR_VAR 0 6
7121: PUSH
7122: LD_INT 22
7124: PUSH
7125: LD_INT 8
7127: PUSH
7128: EMPTY
7129: LIST
7130: LIST
7131: PUSH
7132: LD_INT 30
7134: PUSH
7135: LD_INT 1
7137: PUSH
7138: EMPTY
7139: LIST
7140: LIST
7141: PUSH
7142: EMPTY
7143: LIST
7144: LIST
7145: PPUSH
7146: CALL_OW 69
7150: PUSH
7151: LD_INT 1
7153: ARRAY
7154: ST_TO_ADDR
// l_factory := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
7155: LD_ADDR_VAR 0 8
7159: PUSH
7160: LD_INT 22
7162: PUSH
7163: LD_INT 8
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: PUSH
7170: LD_INT 30
7172: PUSH
7173: LD_INT 3
7175: PUSH
7176: EMPTY
7177: LIST
7178: LIST
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: PPUSH
7184: CALL_OW 69
7188: PUSH
7189: LD_INT 1
7191: ARRAY
7192: ST_TO_ADDR
// l_lab := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ;
7193: LD_ADDR_VAR 0 9
7197: PUSH
7198: LD_INT 22
7200: PUSH
7201: LD_INT 8
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: PUSH
7208: LD_INT 2
7210: PUSH
7211: LD_INT 30
7213: PUSH
7214: LD_INT 6
7216: PUSH
7217: EMPTY
7218: LIST
7219: LIST
7220: PUSH
7221: LD_INT 30
7223: PUSH
7224: LD_INT 8
7226: PUSH
7227: EMPTY
7228: LIST
7229: LIST
7230: PUSH
7231: EMPTY
7232: LIST
7233: LIST
7234: LIST
7235: PUSH
7236: EMPTY
7237: LIST
7238: LIST
7239: PPUSH
7240: CALL_OW 69
7244: PUSH
7245: LD_INT 1
7247: ARRAY
7248: ST_TO_ADDR
// l_towers := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) ;
7249: LD_ADDR_VAR 0 10
7253: PUSH
7254: LD_INT 22
7256: PUSH
7257: LD_INT 8
7259: PUSH
7260: EMPTY
7261: LIST
7262: LIST
7263: PUSH
7264: LD_INT 30
7266: PUSH
7267: LD_INT 32
7269: PUSH
7270: EMPTY
7271: LIST
7272: LIST
7273: PUSH
7274: EMPTY
7275: LIST
7276: LIST
7277: PPUSH
7278: CALL_OW 69
7282: ST_TO_ADDR
// uc_side := 8 ;
7283: LD_ADDR_OWVAR 20
7287: PUSH
7288: LD_INT 8
7290: ST_TO_ADDR
// uc_nation := nation_arabian ;
7291: LD_ADDR_OWVAR 21
7295: PUSH
7296: LD_INT 2
7298: ST_TO_ADDR
// legion_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
7299: LD_ADDR_EXP 37
7303: PUSH
7304: LD_INT 5
7306: PUSH
7307: LD_INT 6
7309: PUSH
7310: LD_INT 7
7312: PUSH
7313: EMPTY
7314: LIST
7315: LIST
7316: LIST
7317: PUSH
7318: LD_OWVAR 67
7322: ARRAY
7323: ST_TO_ADDR
// legion_blist := [ ] ;
7324: LD_ADDR_EXP 39
7328: PUSH
7329: EMPTY
7330: ST_TO_ADDR
// legion_vlist := [ ] ;
7331: LD_ADDR_EXP 40
7335: PUSH
7336: EMPTY
7337: ST_TO_ADDR
// legion_force := [ ] ;
7338: LD_ADDR_EXP 36
7342: PUSH
7343: EMPTY
7344: ST_TO_ADDR
// legion_enemy := - 1 ;
7345: LD_ADDR_EXP 41
7349: PUSH
7350: LD_INT 1
7352: NEG
7353: ST_TO_ADDR
// SetResourceType ( GetBase ( l_depot ) , mat_cans , 10000 ) ;
7354: LD_VAR 0 6
7358: PPUSH
7359: CALL_OW 274
7363: PPUSH
7364: LD_INT 1
7366: PPUSH
7367: LD_INT 10000
7369: PPUSH
7370: CALL_OW 277
// SetResourceType ( GetBase ( l_depot ) , 3 , 1000 ) ;
7374: LD_VAR 0 6
7378: PPUSH
7379: CALL_OW 274
7383: PPUSH
7384: LD_INT 3
7386: PPUSH
7387: LD_INT 1000
7389: PPUSH
7390: CALL_OW 277
// for i = 1 to l_towers do
7394: LD_ADDR_VAR 0 3
7398: PUSH
7399: DOUBLE
7400: LD_INT 1
7402: DEC
7403: ST_TO_ADDR
7404: LD_VAR 0 10
7408: PUSH
7409: FOR_TO
7410: IFFALSE 7459
// begin PrepareHuman ( false , 1 , legion_skill ) ;
7412: LD_INT 0
7414: PPUSH
7415: LD_INT 1
7417: PPUSH
7418: LD_EXP 37
7422: PPUSH
7423: CALL_OW 380
// un := CreateHuman ;
7427: LD_ADDR_VAR 0 2
7431: PUSH
7432: CALL_OW 44
7436: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_towers [ i ] ) ;
7437: LD_VAR 0 2
7441: PPUSH
7442: LD_VAR 0 10
7446: PUSH
7447: LD_VAR 0 3
7451: ARRAY
7452: PPUSH
7453: CALL_OW 52
// end ;
7457: GO 7409
7459: POP
7460: POP
// for i = 1 to 4 do
7461: LD_ADDR_VAR 0 3
7465: PUSH
7466: DOUBLE
7467: LD_INT 1
7469: DEC
7470: ST_TO_ADDR
7471: LD_INT 4
7473: PUSH
7474: FOR_TO
7475: IFFALSE 7568
// for p = 1 to 2 do
7477: LD_ADDR_VAR 0 7
7481: PUSH
7482: DOUBLE
7483: LD_INT 1
7485: DEC
7486: ST_TO_ADDR
7487: LD_INT 2
7489: PUSH
7490: FOR_TO
7491: IFFALSE 7564
// begin PrepareHuman ( false , class_mortar , legion_skill ) ;
7493: LD_INT 0
7495: PPUSH
7496: LD_INT 8
7498: PPUSH
7499: LD_EXP 37
7503: PPUSH
7504: CALL_OW 380
// un := CreateHuman ;
7508: LD_ADDR_VAR 0 2
7512: PUSH
7513: CALL_OW 44
7517: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_barracks ] ] ) [ p ] ) ;
7518: LD_VAR 0 2
7522: PPUSH
7523: LD_INT 22
7525: PUSH
7526: LD_INT 8
7528: PUSH
7529: EMPTY
7530: LIST
7531: LIST
7532: PUSH
7533: LD_INT 30
7535: PUSH
7536: LD_INT 5
7538: PUSH
7539: EMPTY
7540: LIST
7541: LIST
7542: PUSH
7543: EMPTY
7544: LIST
7545: LIST
7546: PPUSH
7547: CALL_OW 69
7551: PUSH
7552: LD_VAR 0 7
7556: ARRAY
7557: PPUSH
7558: CALL_OW 52
// end ;
7562: GO 7490
7564: POP
7565: POP
7566: GO 7474
7568: POP
7569: POP
// for i = 1 to 4 do
7570: LD_ADDR_VAR 0 3
7574: PUSH
7575: DOUBLE
7576: LD_INT 1
7578: DEC
7579: ST_TO_ADDR
7580: LD_INT 4
7582: PUSH
7583: FOR_TO
7584: IFFALSE 7627
// begin PrepareHuman ( false , 4 , legion_skill ) ;
7586: LD_INT 0
7588: PPUSH
7589: LD_INT 4
7591: PPUSH
7592: LD_EXP 37
7596: PPUSH
7597: CALL_OW 380
// un := CreateHuman ;
7601: LD_ADDR_VAR 0 2
7605: PUSH
7606: CALL_OW 44
7610: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_lab ) ;
7611: LD_VAR 0 2
7615: PPUSH
7616: LD_VAR 0 9
7620: PPUSH
7621: CALL_OW 52
// end ;
7625: GO 7583
7627: POP
7628: POP
// for i = 1 to 4 do
7629: LD_ADDR_VAR 0 3
7633: PUSH
7634: DOUBLE
7635: LD_INT 1
7637: DEC
7638: ST_TO_ADDR
7639: LD_INT 4
7641: PUSH
7642: FOR_TO
7643: IFFALSE 7686
// begin PrepareHuman ( false , 3 , legion_skill ) ;
7645: LD_INT 0
7647: PPUSH
7648: LD_INT 3
7650: PPUSH
7651: LD_EXP 37
7655: PPUSH
7656: CALL_OW 380
// un := CreateHuman ;
7660: LD_ADDR_VAR 0 2
7664: PUSH
7665: CALL_OW 44
7669: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_factory ) ;
7670: LD_VAR 0 2
7674: PPUSH
7675: LD_VAR 0 8
7679: PPUSH
7680: CALL_OW 52
// end ;
7684: GO 7642
7686: POP
7687: POP
// for i = 1 to 3 do
7688: LD_ADDR_VAR 0 3
7692: PUSH
7693: DOUBLE
7694: LD_INT 1
7696: DEC
7697: ST_TO_ADDR
7698: LD_INT 3
7700: PUSH
7701: FOR_TO
7702: IFFALSE 7745
// begin PrepareHuman ( false , 2 , legion_skill ) ;
7704: LD_INT 0
7706: PPUSH
7707: LD_INT 2
7709: PPUSH
7710: LD_EXP 37
7714: PPUSH
7715: CALL_OW 380
// un := CreateHuman ;
7719: LD_ADDR_VAR 0 2
7723: PUSH
7724: CALL_OW 44
7728: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_depot ) ;
7729: LD_VAR 0 2
7733: PPUSH
7734: LD_VAR 0 6
7738: PPUSH
7739: CALL_OW 52
// end ;
7743: GO 7701
7745: POP
7746: POP
// for i = 1 to 3 do
7747: LD_ADDR_VAR 0 3
7751: PUSH
7752: DOUBLE
7753: LD_INT 1
7755: DEC
7756: ST_TO_ADDR
7757: LD_INT 3
7759: PUSH
7760: FOR_TO
7761: IFFALSE 7871
// begin vc_chassis := ar_half_tracked ;
7763: LD_ADDR_OWVAR 37
7767: PUSH
7768: LD_INT 14
7770: ST_TO_ADDR
// vc_engine := engine_siberite ;
7771: LD_ADDR_OWVAR 39
7775: PUSH
7776: LD_INT 3
7778: ST_TO_ADDR
// vc_control := control_manual ;
7779: LD_ADDR_OWVAR 38
7783: PUSH
7784: LD_INT 1
7786: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
7787: LD_ADDR_OWVAR 40
7791: PUSH
7792: LD_INT 31
7794: ST_TO_ADDR
// veh := CreateVehicle ;
7795: LD_ADDR_VAR 0 5
7799: PUSH
7800: CALL_OW 45
7804: ST_TO_ADDR
// PlaceUnitXYR ( veh , 212 , 135 , 5 , false ) ;
7805: LD_VAR 0 5
7809: PPUSH
7810: LD_INT 212
7812: PPUSH
7813: LD_INT 135
7815: PPUSH
7816: LD_INT 5
7818: PPUSH
7819: LD_INT 0
7821: PPUSH
7822: CALL_OW 50
// PrepareHuman ( false , 3 , legion_skill + 1 ) ;
7826: LD_INT 0
7828: PPUSH
7829: LD_INT 3
7831: PPUSH
7832: LD_EXP 37
7836: PUSH
7837: LD_INT 1
7839: PLUS
7840: PPUSH
7841: CALL_OW 380
// un := CreateHuman ;
7845: LD_ADDR_VAR 0 2
7849: PUSH
7850: CALL_OW 44
7854: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7855: LD_VAR 0 2
7859: PPUSH
7860: LD_VAR 0 5
7864: PPUSH
7865: CALL_OW 52
// end ;
7869: GO 7760
7871: POP
7872: POP
// PrepareSoldier ( false , 8 ) ;
7873: LD_INT 0
7875: PPUSH
7876: LD_INT 8
7878: PPUSH
7879: CALL_OW 381
// hc_class := class_sniper ;
7883: LD_ADDR_OWVAR 28
7887: PUSH
7888: LD_INT 5
7890: ST_TO_ADDR
// un := CreateHuman ;
7891: LD_ADDR_VAR 0 2
7895: PUSH
7896: CALL_OW 44
7900: ST_TO_ADDR
// SetDir ( un , 4 ) ;
7901: LD_VAR 0 2
7905: PPUSH
7906: LD_INT 4
7908: PPUSH
7909: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( 136 , 92 ) ) ;
7913: LD_VAR 0 2
7917: PPUSH
7918: LD_INT 136
7920: PPUSH
7921: LD_INT 92
7923: PPUSH
7924: CALL_OW 428
7928: PPUSH
7929: CALL_OW 52
// PlaceSeeing ( 198 , 94 , 8 , 10 ) ;
7933: LD_INT 198
7935: PPUSH
7936: LD_INT 94
7938: PPUSH
7939: LD_INT 8
7941: PPUSH
7942: LD_INT 10
7944: PPUSH
7945: CALL_OW 330
// PlaceSeeing ( 167 , 130 , 8 , 10 ) ;
7949: LD_INT 167
7951: PPUSH
7952: LD_INT 130
7954: PPUSH
7955: LD_INT 8
7957: PPUSH
7958: LD_INT 10
7960: PPUSH
7961: CALL_OW 330
// tmp := AreaToList ( legion_mines_area , 0 ) ;
7965: LD_ADDR_VAR 0 4
7969: PUSH
7970: LD_INT 24
7972: PPUSH
7973: LD_INT 0
7975: PPUSH
7976: CALL_OW 517
7980: ST_TO_ADDR
// legion_mines := [ ] ;
7981: LD_ADDR_EXP 38
7985: PUSH
7986: EMPTY
7987: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
7988: LD_ADDR_VAR 0 3
7992: PUSH
7993: DOUBLE
7994: LD_INT 1
7996: DEC
7997: ST_TO_ADDR
7998: LD_VAR 0 4
8002: PUSH
8003: LD_INT 1
8005: ARRAY
8006: PUSH
8007: FOR_TO
8008: IFFALSE 8110
// begin PlaceMine ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 8 , 0 ) ;
8010: LD_VAR 0 4
8014: PUSH
8015: LD_INT 1
8017: ARRAY
8018: PUSH
8019: LD_VAR 0 3
8023: ARRAY
8024: PPUSH
8025: LD_VAR 0 4
8029: PUSH
8030: LD_INT 2
8032: ARRAY
8033: PUSH
8034: LD_VAR 0 3
8038: ARRAY
8039: PPUSH
8040: LD_INT 8
8042: PPUSH
8043: LD_INT 0
8045: PPUSH
8046: CALL_OW 454
// legion_mines := Replace ( legion_mines , legion_mines + 1 , [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ) ;
8050: LD_ADDR_EXP 38
8054: PUSH
8055: LD_EXP 38
8059: PPUSH
8060: LD_EXP 38
8064: PUSH
8065: LD_INT 1
8067: PLUS
8068: PPUSH
8069: LD_VAR 0 4
8073: PUSH
8074: LD_INT 1
8076: ARRAY
8077: PUSH
8078: LD_VAR 0 3
8082: ARRAY
8083: PUSH
8084: LD_VAR 0 4
8088: PUSH
8089: LD_INT 2
8091: ARRAY
8092: PUSH
8093: LD_VAR 0 3
8097: ARRAY
8098: PUSH
8099: EMPTY
8100: LIST
8101: LIST
8102: PPUSH
8103: CALL_OW 1
8107: ST_TO_ADDR
// end ;
8108: GO 8007
8110: POP
8111: POP
// legion_vlist := [ ar_medium_trike , 3 , control_remote , ar_cargo_bay ] ;
8112: LD_ADDR_EXP 40
8116: PUSH
8117: LD_INT 13
8119: PUSH
8120: LD_INT 3
8122: PUSH
8123: LD_INT 2
8125: PUSH
8126: LD_INT 32
8128: PUSH
8129: EMPTY
8130: LIST
8131: LIST
8132: LIST
8133: LIST
8134: ST_TO_ADDR
// end ;
8135: LD_VAR 0 1
8139: RET
// every 0 0$1 trigger legion_mines and FilterUnitsInArea ( legion_mines_area , [ f_side , your_side ] ) do var i , un ;
8140: LD_EXP 38
8144: PUSH
8145: LD_INT 24
8147: PPUSH
8148: LD_INT 22
8150: PUSH
8151: LD_OWVAR 2
8155: PUSH
8156: EMPTY
8157: LIST
8158: LIST
8159: PPUSH
8160: CALL_OW 70
8164: AND
8165: IFFALSE 8332
8167: GO 8169
8169: DISABLE
8170: LD_INT 0
8172: PPUSH
8173: PPUSH
// begin enable ;
8174: ENABLE
// for i := legion_mines downto 1 do
8175: LD_ADDR_VAR 0 1
8179: PUSH
8180: DOUBLE
8181: LD_EXP 38
8185: INC
8186: ST_TO_ADDR
8187: LD_INT 1
8189: PUSH
8190: FOR_DOWNTO
8191: IFFALSE 8330
// begin un := HexInfo ( legion_mines [ i ] [ 1 ] , legion_mines [ i ] [ 2 ] ) ;
8193: LD_ADDR_VAR 0 2
8197: PUSH
8198: LD_EXP 38
8202: PUSH
8203: LD_VAR 0 1
8207: ARRAY
8208: PUSH
8209: LD_INT 1
8211: ARRAY
8212: PPUSH
8213: LD_EXP 38
8217: PUSH
8218: LD_VAR 0 1
8222: ARRAY
8223: PUSH
8224: LD_INT 2
8226: ARRAY
8227: PPUSH
8228: CALL_OW 428
8232: ST_TO_ADDR
// if un then
8233: LD_VAR 0 2
8237: IFFALSE 8328
// if GetSide ( un ) = legion_enemy then
8239: LD_VAR 0 2
8243: PPUSH
8244: CALL_OW 255
8248: PUSH
8249: LD_EXP 41
8253: EQUAL
8254: IFFALSE 8328
// begin LaunchMineAtPos ( legion_mines [ i ] [ 1 ] , legion_mines [ i ] [ 2 ] , 8 ) ;
8256: LD_EXP 38
8260: PUSH
8261: LD_VAR 0 1
8265: ARRAY
8266: PUSH
8267: LD_INT 1
8269: ARRAY
8270: PPUSH
8271: LD_EXP 38
8275: PUSH
8276: LD_VAR 0 1
8280: ARRAY
8281: PUSH
8282: LD_INT 2
8284: ARRAY
8285: PPUSH
8286: LD_INT 8
8288: PPUSH
8289: CALL_OW 456
// legion_mines := Delete ( legion_mines , i ) ;
8293: LD_ADDR_EXP 38
8297: PUSH
8298: LD_EXP 38
8302: PPUSH
8303: LD_VAR 0 1
8307: PPUSH
8308: CALL_OW 3
8312: ST_TO_ADDR
// if not mine_vulc then
8313: LD_EXP 13
8317: NOT
8318: IFFALSE 8328
// mine_vulc := true ;
8320: LD_ADDR_EXP 13
8324: PUSH
8325: LD_INT 1
8327: ST_TO_ADDR
// end ; end ;
8328: GO 8190
8330: POP
8331: POP
// end ;
8332: PPOPN 2
8334: END
// every 0 0$1 trigger tick >= [ 25 25$00 , 22 22$00 , 20 20$00 ] [ Difficulty ] do var artifact , un ;
8335: LD_OWVAR 1
8339: PUSH
8340: LD_INT 52500
8342: PUSH
8343: LD_INT 46200
8345: PUSH
8346: LD_INT 42000
8348: PUSH
8349: EMPTY
8350: LIST
8351: LIST
8352: LIST
8353: PUSH
8354: LD_OWVAR 67
8358: ARRAY
8359: GREATEREQUAL
8360: IFFALSE 8538
8362: GO 8364
8364: DISABLE
8365: LD_INT 0
8367: PPUSH
8368: PPUSH
// begin artifact := FindArtifact ( 1 ) ;
8369: LD_ADDR_VAR 0 1
8373: PUSH
8374: LD_INT 1
8376: PPUSH
8377: CALL_OW 469
8381: ST_TO_ADDR
// if artifact [ 1 ] = 112 and artifact [ 2 ] = 67 then
8382: LD_VAR 0 1
8386: PUSH
8387: LD_INT 1
8389: ARRAY
8390: PUSH
8391: LD_INT 112
8393: EQUAL
8394: PUSH
8395: LD_VAR 0 1
8399: PUSH
8400: LD_INT 2
8402: ARRAY
8403: PUSH
8404: LD_INT 67
8406: EQUAL
8407: AND
8408: IFFALSE 8538
// begin un := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 2 ] ] ) ;
8410: LD_ADDR_VAR 0 2
8414: PUSH
8415: LD_INT 22
8417: PUSH
8418: LD_INT 8
8420: PUSH
8421: EMPTY
8422: LIST
8423: LIST
8424: PUSH
8425: LD_INT 25
8427: PUSH
8428: LD_INT 2
8430: PUSH
8431: EMPTY
8432: LIST
8433: LIST
8434: PUSH
8435: EMPTY
8436: LIST
8437: LIST
8438: PPUSH
8439: CALL_OW 69
8443: ST_TO_ADDR
// if not un then
8444: LD_VAR 0 2
8448: NOT
8449: IFFALSE 8453
// exit ;
8451: GO 8538
// un := un [ 1 ] ;
8453: LD_ADDR_VAR 0 2
8457: PUSH
8458: LD_VAR 0 2
8462: PUSH
8463: LD_INT 1
8465: ARRAY
8466: ST_TO_ADDR
// if IsInUnit ( un ) then
8467: LD_VAR 0 2
8471: PPUSH
8472: CALL_OW 310
8476: IFFALSE 8487
// ComExitBuilding ( un ) ;
8478: LD_VAR 0 2
8482: PPUSH
8483: CALL_OW 122
// AddComCollect ( un , artifact [ 1 ] , artifact [ 2 ] ) ;
8487: LD_VAR 0 2
8491: PPUSH
8492: LD_VAR 0 1
8496: PUSH
8497: LD_INT 1
8499: ARRAY
8500: PPUSH
8501: LD_VAR 0 1
8505: PUSH
8506: LD_INT 2
8508: ARRAY
8509: PPUSH
8510: CALL_OW 177
// AddComMoveXY ( un , 207 , 123 ) ;
8514: LD_VAR 0 2
8518: PPUSH
8519: LD_INT 207
8521: PPUSH
8522: LD_INT 123
8524: PPUSH
8525: CALL_OW 171
// AddComUnload ( un ) ;
8529: LD_VAR 0 2
8533: PPUSH
8534: CALL_OW 219
// end ; end ;
8538: PPOPN 2
8540: END
// every 0 0$02 trigger FilterAllUnits ( [ f_side , 8 ] ) > 0 do var un , i , tmp , veh , b , p , cr , l_depot , l_factory , l_lab , l_towers , l_sib , l_sci , l_mech , l_sold , l_eng , l_cargo ;
8541: LD_INT 22
8543: PUSH
8544: LD_INT 8
8546: PUSH
8547: EMPTY
8548: LIST
8549: LIST
8550: PPUSH
8551: CALL_OW 69
8555: PUSH
8556: LD_INT 0
8558: GREATER
8559: IFFALSE 10147
8561: GO 8563
8563: DISABLE
8564: LD_INT 0
8566: PPUSH
8567: PPUSH
8568: PPUSH
8569: PPUSH
8570: PPUSH
8571: PPUSH
8572: PPUSH
8573: PPUSH
8574: PPUSH
8575: PPUSH
8576: PPUSH
8577: PPUSH
8578: PPUSH
8579: PPUSH
8580: PPUSH
8581: PPUSH
8582: PPUSH
// begin enable ;
8583: ENABLE
// l_depot := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
8584: LD_ADDR_VAR 0 8
8588: PUSH
8589: LD_INT 22
8591: PUSH
8592: LD_INT 8
8594: PUSH
8595: EMPTY
8596: LIST
8597: LIST
8598: PUSH
8599: LD_INT 30
8601: PUSH
8602: LD_INT 1
8604: PUSH
8605: EMPTY
8606: LIST
8607: LIST
8608: PUSH
8609: EMPTY
8610: LIST
8611: LIST
8612: PPUSH
8613: CALL_OW 69
8617: PUSH
8618: LD_INT 1
8620: ARRAY
8621: ST_TO_ADDR
// l_factory := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
8622: LD_ADDR_VAR 0 9
8626: PUSH
8627: LD_INT 22
8629: PUSH
8630: LD_INT 8
8632: PUSH
8633: EMPTY
8634: LIST
8635: LIST
8636: PUSH
8637: LD_INT 30
8639: PUSH
8640: LD_INT 3
8642: PUSH
8643: EMPTY
8644: LIST
8645: LIST
8646: PUSH
8647: EMPTY
8648: LIST
8649: LIST
8650: PPUSH
8651: CALL_OW 69
8655: PUSH
8656: LD_INT 1
8658: ARRAY
8659: ST_TO_ADDR
// l_lab := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ;
8660: LD_ADDR_VAR 0 10
8664: PUSH
8665: LD_INT 22
8667: PUSH
8668: LD_INT 8
8670: PUSH
8671: EMPTY
8672: LIST
8673: LIST
8674: PUSH
8675: LD_INT 2
8677: PUSH
8678: LD_INT 30
8680: PUSH
8681: LD_INT 6
8683: PUSH
8684: EMPTY
8685: LIST
8686: LIST
8687: PUSH
8688: LD_INT 30
8690: PUSH
8691: LD_INT 8
8693: PUSH
8694: EMPTY
8695: LIST
8696: LIST
8697: PUSH
8698: EMPTY
8699: LIST
8700: LIST
8701: LIST
8702: PUSH
8703: EMPTY
8704: LIST
8705: LIST
8706: PPUSH
8707: CALL_OW 69
8711: PUSH
8712: LD_INT 1
8714: ARRAY
8715: ST_TO_ADDR
// l_towers := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) ;
8716: LD_ADDR_VAR 0 11
8720: PUSH
8721: LD_INT 22
8723: PUSH
8724: LD_INT 8
8726: PUSH
8727: EMPTY
8728: LIST
8729: LIST
8730: PUSH
8731: LD_INT 30
8733: PUSH
8734: LD_INT 32
8736: PUSH
8737: EMPTY
8738: LIST
8739: LIST
8740: PUSH
8741: EMPTY
8742: LIST
8743: LIST
8744: PPUSH
8745: CALL_OW 69
8749: ST_TO_ADDR
// l_eng := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 2 ] ] ) ;
8750: LD_ADDR_VAR 0 16
8754: PUSH
8755: LD_INT 22
8757: PUSH
8758: LD_INT 8
8760: PUSH
8761: EMPTY
8762: LIST
8763: LIST
8764: PUSH
8765: LD_INT 25
8767: PUSH
8768: LD_INT 2
8770: PUSH
8771: EMPTY
8772: LIST
8773: LIST
8774: PUSH
8775: EMPTY
8776: LIST
8777: LIST
8778: PPUSH
8779: CALL_OW 69
8783: ST_TO_ADDR
// l_sold := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 1 ] ] ) ;
8784: LD_ADDR_VAR 0 15
8788: PUSH
8789: LD_INT 22
8791: PUSH
8792: LD_INT 8
8794: PUSH
8795: EMPTY
8796: LIST
8797: LIST
8798: PUSH
8799: LD_INT 25
8801: PUSH
8802: LD_INT 1
8804: PUSH
8805: EMPTY
8806: LIST
8807: LIST
8808: PUSH
8809: EMPTY
8810: LIST
8811: LIST
8812: PPUSH
8813: CALL_OW 69
8817: ST_TO_ADDR
// l_mech := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 3 ] ] ) ;
8818: LD_ADDR_VAR 0 14
8822: PUSH
8823: LD_INT 22
8825: PUSH
8826: LD_INT 8
8828: PUSH
8829: EMPTY
8830: LIST
8831: LIST
8832: PUSH
8833: LD_INT 25
8835: PUSH
8836: LD_INT 3
8838: PUSH
8839: EMPTY
8840: LIST
8841: LIST
8842: PUSH
8843: EMPTY
8844: LIST
8845: LIST
8846: PPUSH
8847: CALL_OW 69
8851: ST_TO_ADDR
// l_sci := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 4 ] ] ) ;
8852: LD_ADDR_VAR 0 13
8856: PUSH
8857: LD_INT 22
8859: PUSH
8860: LD_INT 8
8862: PUSH
8863: EMPTY
8864: LIST
8865: LIST
8866: PUSH
8867: LD_INT 25
8869: PUSH
8870: LD_INT 4
8872: PUSH
8873: EMPTY
8874: LIST
8875: LIST
8876: PUSH
8877: EMPTY
8878: LIST
8879: LIST
8880: PPUSH
8881: CALL_OW 69
8885: ST_TO_ADDR
// if l_eng then
8886: LD_VAR 0 16
8890: IFFALSE 9308
// begin b := FilterUnitsInArea ( legion_base_area , [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) ;
8892: LD_ADDR_VAR 0 5
8896: PUSH
8897: LD_INT 25
8899: PPUSH
8900: LD_INT 22
8902: PUSH
8903: LD_INT 8
8905: PUSH
8906: EMPTY
8907: LIST
8908: LIST
8909: PUSH
8910: LD_INT 21
8912: PUSH
8913: LD_INT 3
8915: PUSH
8916: EMPTY
8917: LIST
8918: LIST
8919: PUSH
8920: EMPTY
8921: LIST
8922: LIST
8923: PPUSH
8924: CALL_OW 70
8928: ST_TO_ADDR
// if UnitFilter ( b , [ f_not , [ f_lives , 1000 ] ] ) > 0 then
8929: LD_VAR 0 5
8933: PPUSH
8934: LD_INT 3
8936: PUSH
8937: LD_INT 24
8939: PUSH
8940: LD_INT 1000
8942: PUSH
8943: EMPTY
8944: LIST
8945: LIST
8946: PUSH
8947: EMPTY
8948: LIST
8949: LIST
8950: PPUSH
8951: CALL_OW 72
8955: PUSH
8956: LD_INT 0
8958: GREATER
8959: IFFALSE 9093
// begin tmp := UnitFilter ( b , [ f_not , [ f_lives , 1000 ] ] ) ;
8961: LD_ADDR_VAR 0 3
8965: PUSH
8966: LD_VAR 0 5
8970: PPUSH
8971: LD_INT 3
8973: PUSH
8974: LD_INT 24
8976: PUSH
8977: LD_INT 1000
8979: PUSH
8980: EMPTY
8981: LIST
8982: LIST
8983: PUSH
8984: EMPTY
8985: LIST
8986: LIST
8987: PPUSH
8988: CALL_OW 72
8992: ST_TO_ADDR
// for i = 1 to l_eng do
8993: LD_ADDR_VAR 0 2
8997: PUSH
8998: DOUBLE
8999: LD_INT 1
9001: DEC
9002: ST_TO_ADDR
9003: LD_VAR 0 16
9007: PUSH
9008: FOR_TO
9009: IFFALSE 9089
// if IsInUnit ( l_eng [ i ] ) then
9011: LD_VAR 0 16
9015: PUSH
9016: LD_VAR 0 2
9020: ARRAY
9021: PPUSH
9022: CALL_OW 310
9026: IFFALSE 9045
// ComExitBuilding ( l_eng [ i ] ) else
9028: LD_VAR 0 16
9032: PUSH
9033: LD_VAR 0 2
9037: ARRAY
9038: PPUSH
9039: CALL_OW 122
9043: GO 9087
// if not HasTask ( l_eng [ i ] ) then
9045: LD_VAR 0 16
9049: PUSH
9050: LD_VAR 0 2
9054: ARRAY
9055: PPUSH
9056: CALL_OW 314
9060: NOT
9061: IFFALSE 9087
// ComRepairBuilding ( l_eng [ i ] , tmp [ 1 ] ) ;
9063: LD_VAR 0 16
9067: PUSH
9068: LD_VAR 0 2
9072: ARRAY
9073: PPUSH
9074: LD_VAR 0 3
9078: PUSH
9079: LD_INT 1
9081: ARRAY
9082: PPUSH
9083: CALL_OW 130
9087: GO 9008
9089: POP
9090: POP
// end else
9091: GO 9308
// begin if legion_blist > 0 then
9093: LD_EXP 39
9097: PUSH
9098: LD_INT 0
9100: GREATER
9101: IFFALSE 9230
// begin for i = 1 to l_eng do
9103: LD_ADDR_VAR 0 2
9107: PUSH
9108: DOUBLE
9109: LD_INT 1
9111: DEC
9112: ST_TO_ADDR
9113: LD_VAR 0 16
9117: PUSH
9118: FOR_TO
9119: IFFALSE 9226
// if IsInUnit ( l_eng [ i ] ) then
9121: LD_VAR 0 16
9125: PUSH
9126: LD_VAR 0 2
9130: ARRAY
9131: PPUSH
9132: CALL_OW 310
9136: IFFALSE 9155
// ComExitBuilding ( l_eng [ i ] ) else
9138: LD_VAR 0 16
9142: PUSH
9143: LD_VAR 0 2
9147: ARRAY
9148: PPUSH
9149: CALL_OW 122
9153: GO 9224
// if not HasTask ( l_eng [ i ] ) then
9155: LD_VAR 0 16
9159: PUSH
9160: LD_VAR 0 2
9164: ARRAY
9165: PPUSH
9166: CALL_OW 314
9170: NOT
9171: IFFALSE 9224
// ComBuild ( l_eng [ i ] , legion_blist [ 1 ] , legion_blist [ 2 ] , legion_blist [ 3 ] , legion_blist [ 4 ] ) ;
9173: LD_VAR 0 16
9177: PUSH
9178: LD_VAR 0 2
9182: ARRAY
9183: PPUSH
9184: LD_EXP 39
9188: PUSH
9189: LD_INT 1
9191: ARRAY
9192: PPUSH
9193: LD_EXP 39
9197: PUSH
9198: LD_INT 2
9200: ARRAY
9201: PPUSH
9202: LD_EXP 39
9206: PUSH
9207: LD_INT 3
9209: ARRAY
9210: PPUSH
9211: LD_EXP 39
9215: PUSH
9216: LD_INT 4
9218: ARRAY
9219: PPUSH
9220: CALL_OW 145
9224: GO 9118
9226: POP
9227: POP
// end else
9228: GO 9308
// for i = 1 to l_eng do
9230: LD_ADDR_VAR 0 2
9234: PUSH
9235: DOUBLE
9236: LD_INT 1
9238: DEC
9239: ST_TO_ADDR
9240: LD_VAR 0 16
9244: PUSH
9245: FOR_TO
9246: IFFALSE 9306
// if not IsInUnit ( l_eng [ i ] ) and not HasTask ( l_eng [ i ] ) then
9248: LD_VAR 0 16
9252: PUSH
9253: LD_VAR 0 2
9257: ARRAY
9258: PPUSH
9259: CALL_OW 310
9263: NOT
9264: PUSH
9265: LD_VAR 0 16
9269: PUSH
9270: LD_VAR 0 2
9274: ARRAY
9275: PPUSH
9276: CALL_OW 314
9280: NOT
9281: AND
9282: IFFALSE 9304
// ComEnterUnit ( l_eng [ i ] , l_depot ) ;
9284: LD_VAR 0 16
9288: PUSH
9289: LD_VAR 0 2
9293: ARRAY
9294: PPUSH
9295: LD_VAR 0 8
9299: PPUSH
9300: CALL_OW 120
9304: GO 9245
9306: POP
9307: POP
// end ; end ; if l_factory then
9308: LD_VAR 0 9
9312: IFFALSE 9712
// begin if FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) > 0 then
9314: LD_INT 22
9316: PUSH
9317: LD_INT 8
9319: PUSH
9320: EMPTY
9321: LIST
9322: LIST
9323: PUSH
9324: LD_INT 33
9326: PUSH
9327: LD_INT 2
9329: PUSH
9330: EMPTY
9331: LIST
9332: LIST
9333: PUSH
9334: LD_INT 3
9336: PUSH
9337: LD_INT 61
9339: PUSH
9340: EMPTY
9341: LIST
9342: PUSH
9343: EMPTY
9344: LIST
9345: LIST
9346: PUSH
9347: EMPTY
9348: LIST
9349: LIST
9350: LIST
9351: PPUSH
9352: CALL_OW 69
9356: PUSH
9357: LD_INT 0
9359: GREATER
9360: PUSH
9361: LD_INT 22
9363: PUSH
9364: LD_INT 8
9366: PUSH
9367: EMPTY
9368: LIST
9369: LIST
9370: PUSH
9371: LD_INT 34
9373: PUSH
9374: LD_INT 31
9376: PUSH
9377: EMPTY
9378: LIST
9379: LIST
9380: PUSH
9381: EMPTY
9382: LIST
9383: LIST
9384: PPUSH
9385: CALL_OW 69
9389: PUSH
9390: LD_INT 0
9392: GREATER
9393: AND
9394: IFFALSE 9514
// ComLinkTo ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) [ 1 ] , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) [ Rand ( 1 , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) ) ] ) ;
9396: LD_INT 22
9398: PUSH
9399: LD_INT 8
9401: PUSH
9402: EMPTY
9403: LIST
9404: LIST
9405: PUSH
9406: LD_INT 33
9408: PUSH
9409: LD_INT 2
9411: PUSH
9412: EMPTY
9413: LIST
9414: LIST
9415: PUSH
9416: LD_INT 3
9418: PUSH
9419: LD_INT 61
9421: PUSH
9422: EMPTY
9423: LIST
9424: PUSH
9425: EMPTY
9426: LIST
9427: LIST
9428: PUSH
9429: EMPTY
9430: LIST
9431: LIST
9432: LIST
9433: PPUSH
9434: CALL_OW 69
9438: PUSH
9439: LD_INT 1
9441: ARRAY
9442: PPUSH
9443: LD_INT 22
9445: PUSH
9446: LD_INT 8
9448: PUSH
9449: EMPTY
9450: LIST
9451: LIST
9452: PUSH
9453: LD_INT 34
9455: PUSH
9456: LD_INT 31
9458: PUSH
9459: EMPTY
9460: LIST
9461: LIST
9462: PUSH
9463: EMPTY
9464: LIST
9465: LIST
9466: PPUSH
9467: CALL_OW 69
9471: PUSH
9472: LD_INT 1
9474: PPUSH
9475: LD_INT 22
9477: PUSH
9478: LD_INT 8
9480: PUSH
9481: EMPTY
9482: LIST
9483: LIST
9484: PUSH
9485: LD_INT 34
9487: PUSH
9488: LD_INT 31
9490: PUSH
9491: EMPTY
9492: LIST
9493: LIST
9494: PUSH
9495: EMPTY
9496: LIST
9497: LIST
9498: PPUSH
9499: CALL_OW 69
9503: PPUSH
9504: CALL_OW 12
9508: ARRAY
9509: PPUSH
9510: CALL_OW 135
// if legion_vlist > 0 and BuildingStatus ( l_factory ) = bs_idle then
9514: LD_EXP 40
9518: PUSH
9519: LD_INT 0
9521: GREATER
9522: PUSH
9523: LD_VAR 0 9
9527: PPUSH
9528: CALL_OW 461
9532: PUSH
9533: LD_INT 2
9535: EQUAL
9536: AND
9537: IFFALSE 9622
// begin ComConstruct ( l_factory , legion_vlist [ 1 ] , legion_vlist [ 2 ] , legion_vlist [ 3 ] , legion_vlist [ 4 ] ) ;
9539: LD_VAR 0 9
9543: PPUSH
9544: LD_EXP 40
9548: PUSH
9549: LD_INT 1
9551: ARRAY
9552: PPUSH
9553: LD_EXP 40
9557: PUSH
9558: LD_INT 2
9560: ARRAY
9561: PPUSH
9562: LD_EXP 40
9566: PUSH
9567: LD_INT 3
9569: ARRAY
9570: PPUSH
9571: LD_EXP 40
9575: PUSH
9576: LD_INT 4
9578: ARRAY
9579: PPUSH
9580: CALL_OW 125
// for i = 1 to 4 do
9584: LD_ADDR_VAR 0 2
9588: PUSH
9589: DOUBLE
9590: LD_INT 1
9592: DEC
9593: ST_TO_ADDR
9594: LD_INT 4
9596: PUSH
9597: FOR_TO
9598: IFFALSE 9620
// legion_vlist := Delete ( legion_vlist , 1 ) ;
9600: LD_ADDR_EXP 40
9604: PUSH
9605: LD_EXP 40
9609: PPUSH
9610: LD_INT 1
9612: PPUSH
9613: CALL_OW 3
9617: ST_TO_ADDR
9618: GO 9597
9620: POP
9621: POP
// end ; if UnitFilter ( l_towers , [ f_bweapon , 0 ] ) > 0 and BuildingStatus ( l_factory ) = bs_idle then
9622: LD_VAR 0 11
9626: PPUSH
9627: LD_INT 35
9629: PUSH
9630: LD_INT 0
9632: PUSH
9633: EMPTY
9634: LIST
9635: LIST
9636: PPUSH
9637: CALL_OW 72
9641: PUSH
9642: LD_INT 0
9644: GREATER
9645: PUSH
9646: LD_VAR 0 9
9650: PPUSH
9651: CALL_OW 461
9655: PUSH
9656: LD_INT 2
9658: EQUAL
9659: AND
9660: IFFALSE 9712
// ComPlaceWeapon ( UnitFilter ( l_towers , [ f_bweapon , 0 ] ) [ 1 ] , [ ar_rocket_launcher , ar_gun ] [ Rand ( 1 , 2 ) ] ) ;
9662: LD_VAR 0 11
9666: PPUSH
9667: LD_INT 35
9669: PUSH
9670: LD_INT 0
9672: PUSH
9673: EMPTY
9674: LIST
9675: LIST
9676: PPUSH
9677: CALL_OW 72
9681: PUSH
9682: LD_INT 1
9684: ARRAY
9685: PPUSH
9686: LD_INT 28
9688: PUSH
9689: LD_INT 27
9691: PUSH
9692: EMPTY
9693: LIST
9694: LIST
9695: PUSH
9696: LD_INT 1
9698: PPUSH
9699: LD_INT 2
9701: PPUSH
9702: CALL_OW 12
9706: ARRAY
9707: PPUSH
9708: CALL_OW 148
// end ; if legion_enemy > 0 then
9712: LD_EXP 41
9716: PUSH
9717: LD_INT 0
9719: GREATER
9720: IFFALSE 10005
// begin if tick mod 11 11$00 = 0 then
9722: LD_OWVAR 1
9726: PUSH
9727: LD_INT 23100
9729: MOD
9730: PUSH
9731: LD_INT 0
9733: EQUAL
9734: IFFALSE 9986
// begin legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
9736: LD_ADDR_EXP 40
9740: PUSH
9741: LD_EXP 40
9745: PUSH
9746: LD_INT 13
9748: PUSH
9749: LD_INT 1
9751: PUSH
9752: LD_INT 2
9754: PUSH
9755: EMPTY
9756: LIST
9757: LIST
9758: LIST
9759: ADD
9760: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
9761: LD_ADDR_EXP 40
9765: PUSH
9766: LD_EXP 40
9770: PUSH
9771: LD_INT 28
9773: PUSH
9774: LD_INT 27
9776: PUSH
9777: LD_INT 29
9779: PUSH
9780: EMPTY
9781: LIST
9782: LIST
9783: LIST
9784: PUSH
9785: LD_INT 1
9787: PPUSH
9788: LD_INT 3
9790: PPUSH
9791: CALL_OW 12
9795: ARRAY
9796: ADD
9797: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
9798: LD_ADDR_EXP 40
9802: PUSH
9803: LD_EXP 40
9807: PUSH
9808: LD_INT 13
9810: PUSH
9811: LD_INT 1
9813: PUSH
9814: LD_INT 2
9816: PUSH
9817: EMPTY
9818: LIST
9819: LIST
9820: LIST
9821: ADD
9822: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
9823: LD_ADDR_EXP 40
9827: PUSH
9828: LD_EXP 40
9832: PUSH
9833: LD_INT 28
9835: PUSH
9836: LD_INT 27
9838: PUSH
9839: LD_INT 29
9841: PUSH
9842: EMPTY
9843: LIST
9844: LIST
9845: LIST
9846: PUSH
9847: LD_INT 1
9849: PPUSH
9850: LD_INT 3
9852: PPUSH
9853: CALL_OW 12
9857: ARRAY
9858: ADD
9859: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
9860: LD_ADDR_EXP 40
9864: PUSH
9865: LD_EXP 40
9869: PUSH
9870: LD_INT 13
9872: PUSH
9873: LD_INT 1
9875: PUSH
9876: LD_INT 2
9878: PUSH
9879: EMPTY
9880: LIST
9881: LIST
9882: LIST
9883: ADD
9884: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_mortar , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
9885: LD_ADDR_EXP 40
9889: PUSH
9890: LD_EXP 40
9894: PUSH
9895: LD_INT 28
9897: PUSH
9898: LD_EXP 64
9902: PUSH
9903: LD_INT 29
9905: PUSH
9906: EMPTY
9907: LIST
9908: LIST
9909: LIST
9910: PUSH
9911: LD_INT 1
9913: PPUSH
9914: LD_INT 3
9916: PPUSH
9917: CALL_OW 12
9921: ARRAY
9922: ADD
9923: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
9924: LD_ADDR_EXP 40
9928: PUSH
9929: LD_EXP 40
9933: PUSH
9934: LD_INT 13
9936: PUSH
9937: LD_INT 1
9939: PUSH
9940: LD_INT 2
9942: PUSH
9943: EMPTY
9944: LIST
9945: LIST
9946: LIST
9947: ADD
9948: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
9949: LD_ADDR_EXP 40
9953: PUSH
9954: LD_EXP 40
9958: PUSH
9959: LD_INT 28
9961: PUSH
9962: LD_INT 27
9964: PUSH
9965: LD_INT 29
9967: PUSH
9968: EMPTY
9969: LIST
9970: LIST
9971: LIST
9972: PUSH
9973: LD_INT 1
9975: PPUSH
9976: LD_INT 3
9978: PPUSH
9979: CALL_OW 12
9983: ARRAY
9984: ADD
9985: ST_TO_ADDR
// end ; if legion_force >= 8 then
9986: LD_EXP 36
9990: PUSH
9991: LD_INT 8
9993: GREATEREQUAL
9994: IFFALSE 10005
// RaiseSailEvent ( event_legion_attack ) ;
9996: LD_EXP 21
10000: PPUSH
10001: CALL_OW 427
// end ; if FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_cargo_bay ] ] ) then
10005: LD_INT 22
10007: PUSH
10008: LD_INT 8
10010: PUSH
10011: EMPTY
10012: LIST
10013: LIST
10014: PUSH
10015: LD_INT 34
10017: PUSH
10018: LD_INT 32
10020: PUSH
10021: EMPTY
10022: LIST
10023: LIST
10024: PUSH
10025: EMPTY
10026: LIST
10027: LIST
10028: PPUSH
10029: CALL_OW 69
10033: IFFALSE 10147
// begin if l_cargo = false then
10035: LD_VAR 0 17
10039: PUSH
10040: LD_INT 0
10042: EQUAL
10043: IFFALSE 10079
// l_cargo := FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_cargo_bay ] ] ) ;
10045: LD_ADDR_VAR 0 17
10049: PUSH
10050: LD_INT 22
10052: PUSH
10053: LD_INT 8
10055: PUSH
10056: EMPTY
10057: LIST
10058: LIST
10059: PUSH
10060: LD_INT 34
10062: PUSH
10063: LD_INT 32
10065: PUSH
10066: EMPTY
10067: LIST
10068: LIST
10069: PUSH
10070: EMPTY
10071: LIST
10072: LIST
10073: PPUSH
10074: CALL_OW 69
10078: ST_TO_ADDR
// if l_cargo then
10079: LD_VAR 0 17
10083: IFFALSE 10147
// begin cr := GetListOfCratesInArea ( legion_crates ) ;
10085: LD_ADDR_VAR 0 7
10089: PUSH
10090: LD_INT 14
10092: PPUSH
10093: CALL_OW 435
10097: ST_TO_ADDR
// if cr > 0 then
10098: LD_VAR 0 7
10102: PUSH
10103: LD_INT 0
10105: GREATER
10106: IFFALSE 10147
// if not HasTask ( l_cargo ) then
10108: LD_VAR 0 17
10112: PPUSH
10113: CALL_OW 314
10117: NOT
10118: IFFALSE 10147
// ComCollect ( l_cargo , cr [ 1 ] , cr [ 2 ] ) ;
10120: LD_VAR 0 17
10124: PPUSH
10125: LD_VAR 0 7
10129: PUSH
10130: LD_INT 1
10132: ARRAY
10133: PPUSH
10134: LD_VAR 0 7
10138: PUSH
10139: LD_INT 2
10141: ARRAY
10142: PPUSH
10143: CALL_OW 117
// end ; end ; end ;
10147: PPOPN 17
10149: END
// every 9 9$00 trigger difficulty > 1 do var i , sci , sib , p ;
10150: LD_OWVAR 67
10154: PUSH
10155: LD_INT 1
10157: GREATER
10158: IFFALSE 10363
10160: GO 10162
10162: DISABLE
10163: LD_INT 0
10165: PPUSH
10166: PPUSH
10167: PPUSH
10168: PPUSH
// begin Wait ( Rand ( 0 0$01 , 6 6$01 ) ) ;
10169: LD_INT 35
10171: PPUSH
10172: LD_INT 12635
10174: PPUSH
10175: CALL_OW 12
10179: PPUSH
10180: CALL_OW 67
// sci := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 4 ] ] ) ;
10184: LD_ADDR_VAR 0 2
10188: PUSH
10189: LD_INT 22
10191: PUSH
10192: LD_INT 8
10194: PUSH
10195: EMPTY
10196: LIST
10197: LIST
10198: PUSH
10199: LD_INT 25
10201: PUSH
10202: LD_INT 4
10204: PUSH
10205: EMPTY
10206: LIST
10207: LIST
10208: PUSH
10209: EMPTY
10210: LIST
10211: LIST
10212: PPUSH
10213: CALL_OW 69
10217: ST_TO_ADDR
// p := 1 ;
10218: LD_ADDR_VAR 0 4
10222: PUSH
10223: LD_INT 1
10225: ST_TO_ADDR
// sib := [ 116 , 139 , 69 , 13 ] ;
10226: LD_ADDR_VAR 0 3
10230: PUSH
10231: LD_INT 116
10233: PUSH
10234: LD_INT 139
10236: PUSH
10237: LD_INT 69
10239: PUSH
10240: LD_INT 13
10242: PUSH
10243: EMPTY
10244: LIST
10245: LIST
10246: LIST
10247: LIST
10248: ST_TO_ADDR
// for i = 1 to 2 do
10249: LD_ADDR_VAR 0 1
10253: PUSH
10254: DOUBLE
10255: LD_INT 1
10257: DEC
10258: ST_TO_ADDR
10259: LD_INT 2
10261: PUSH
10262: FOR_TO
10263: IFFALSE 10361
// begin if IsInUnit ( sci [ i ] ) then
10265: LD_VAR 0 2
10269: PUSH
10270: LD_VAR 0 1
10274: ARRAY
10275: PPUSH
10276: CALL_OW 310
10280: IFFALSE 10297
// ComExitBuilding ( sci [ i ] ) ;
10282: LD_VAR 0 2
10286: PUSH
10287: LD_VAR 0 1
10291: ARRAY
10292: PPUSH
10293: CALL_OW 122
// Wait ( 0 0$03 ) ;
10297: LD_INT 105
10299: PPUSH
10300: CALL_OW 67
// ComContaminate ( sci [ i ] , sib [ p ] , sib [ p + 1 ] ) ;
10304: LD_VAR 0 2
10308: PUSH
10309: LD_VAR 0 1
10313: ARRAY
10314: PPUSH
10315: LD_VAR 0 3
10319: PUSH
10320: LD_VAR 0 4
10324: ARRAY
10325: PPUSH
10326: LD_VAR 0 3
10330: PUSH
10331: LD_VAR 0 4
10335: PUSH
10336: LD_INT 1
10338: PLUS
10339: ARRAY
10340: PPUSH
10341: CALL_OW 158
// p := p + 2 ;
10345: LD_ADDR_VAR 0 4
10349: PUSH
10350: LD_VAR 0 4
10354: PUSH
10355: LD_INT 2
10357: PLUS
10358: ST_TO_ADDR
// end ;
10359: GO 10262
10361: POP
10362: POP
// end ;
10363: PPOPN 4
10365: END
// every 3 3$30 trigger GetListOfCratesInArea ( legion_crates ) < 20 do
10366: LD_INT 14
10368: PPUSH
10369: CALL_OW 435
10373: PUSH
10374: LD_INT 20
10376: LESS
10377: IFFALSE 10404
10379: GO 10381
10381: DISABLE
// begin enable ;
10382: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , legion_crates , true ) ;
10383: LD_INT 1
10385: PPUSH
10386: LD_INT 5
10388: PPUSH
10389: CALL_OW 12
10393: PPUSH
10394: LD_INT 14
10396: PPUSH
10397: LD_INT 1
10399: PPUSH
10400: CALL_OW 55
// end ;
10404: END
// export function LegionAttack ( ) ; var path , units ; begin
10405: LD_INT 0
10407: PPUSH
10408: PPUSH
10409: PPUSH
// units := legion_force ;
10410: LD_ADDR_VAR 0 3
10414: PUSH
10415: LD_EXP 36
10419: ST_TO_ADDR
// legion_force := [ ] ;
10420: LD_ADDR_EXP 36
10424: PUSH
10425: EMPTY
10426: ST_TO_ADDR
// case legion_enemy of 1 :
10427: LD_EXP 41
10431: PUSH
10432: LD_INT 1
10434: DOUBLE
10435: EQUAL
10436: IFTRUE 10440
10438: GO 10483
10440: POP
// path := [ [ 174 , 135 ] , [ 153 , 146 ] , [ 118 , 122 ] ] ; 2 :
10441: LD_ADDR_VAR 0 2
10445: PUSH
10446: LD_INT 174
10448: PUSH
10449: LD_INT 135
10451: PUSH
10452: EMPTY
10453: LIST
10454: LIST
10455: PUSH
10456: LD_INT 153
10458: PUSH
10459: LD_INT 146
10461: PUSH
10462: EMPTY
10463: LIST
10464: LIST
10465: PUSH
10466: LD_INT 118
10468: PUSH
10469: LD_INT 122
10471: PUSH
10472: EMPTY
10473: LIST
10474: LIST
10475: PUSH
10476: EMPTY
10477: LIST
10478: LIST
10479: LIST
10480: ST_TO_ADDR
10481: GO 10586
10483: LD_INT 2
10485: DOUBLE
10486: EQUAL
10487: IFTRUE 10491
10489: GO 10534
10491: POP
// path := [ [ 164 , 73 ] , [ 130 , 48 ] , [ 96 , 48 ] ] ; 7 :
10492: LD_ADDR_VAR 0 2
10496: PUSH
10497: LD_INT 164
10499: PUSH
10500: LD_INT 73
10502: PUSH
10503: EMPTY
10504: LIST
10505: LIST
10506: PUSH
10507: LD_INT 130
10509: PUSH
10510: LD_INT 48
10512: PUSH
10513: EMPTY
10514: LIST
10515: LIST
10516: PUSH
10517: LD_INT 96
10519: PUSH
10520: LD_INT 48
10522: PUSH
10523: EMPTY
10524: LIST
10525: LIST
10526: PUSH
10527: EMPTY
10528: LIST
10529: LIST
10530: LIST
10531: ST_TO_ADDR
10532: GO 10586
10534: LD_INT 7
10536: DOUBLE
10537: EQUAL
10538: IFTRUE 10542
10540: GO 10585
10542: POP
// path := [ [ 174 , 135 ] , [ 153 , 146 ] , [ 118 , 122 ] ] ; end ;
10543: LD_ADDR_VAR 0 2
10547: PUSH
10548: LD_INT 174
10550: PUSH
10551: LD_INT 135
10553: PUSH
10554: EMPTY
10555: LIST
10556: LIST
10557: PUSH
10558: LD_INT 153
10560: PUSH
10561: LD_INT 146
10563: PUSH
10564: EMPTY
10565: LIST
10566: LIST
10567: PUSH
10568: LD_INT 118
10570: PUSH
10571: LD_INT 122
10573: PUSH
10574: EMPTY
10575: LIST
10576: LIST
10577: PUSH
10578: EMPTY
10579: LIST
10580: LIST
10581: LIST
10582: ST_TO_ADDR
10583: GO 10586
10585: POP
// repeat wait ( 0 0$1 ) ;
10586: LD_INT 35
10588: PPUSH
10589: CALL_OW 67
// until not AgressiveMove ( units , path ) ;
10593: LD_VAR 0 3
10597: PPUSH
10598: LD_VAR 0 2
10602: PPUSH
10603: CALL 75625 0 2
10607: NOT
10608: IFFALSE 10586
// end ; end_of_file
10610: LD_VAR 0 1
10614: RET
// export function Action ; var un , gamemode , speaker ; begin
10615: LD_INT 0
10617: PPUSH
10618: PPUSH
10619: PPUSH
10620: PPUSH
// if debug then
10621: LD_EXP 15
10625: IFFALSE 10652
// begin Difficulty := 2 ;
10627: LD_ADDR_OWVAR 67
10631: PUSH
10632: LD_INT 2
10634: ST_TO_ADDR
// gamemode := 3 ;
10635: LD_ADDR_VAR 0 3
10639: PUSH
10640: LD_INT 3
10642: ST_TO_ADDR
// FogOff ( 7 ) ;
10643: LD_INT 7
10645: PPUSH
10646: CALL_OW 344
// end else
10650: GO 10678
// begin Difficulty := GetMultiplayerSetting ( 0 ) ;
10652: LD_ADDR_OWVAR 67
10656: PUSH
10657: LD_INT 0
10659: PPUSH
10660: CALL_OW 426
10664: ST_TO_ADDR
// gamemode := GetMultiplayerSetting ( 1 ) ;
10665: LD_ADDR_VAR 0 3
10669: PUSH
10670: LD_INT 1
10672: PPUSH
10673: CALL_OW 426
10677: ST_TO_ADDR
// end ; if gamemode = 1 then
10678: LD_VAR 0 3
10682: PUSH
10683: LD_INT 1
10685: EQUAL
10686: IFFALSE 10710
// begin your_side := 1 ;
10688: LD_ADDR_OWVAR 2
10692: PUSH
10693: LD_INT 1
10695: ST_TO_ADDR
// legion_enemy := 1 ;
10696: LD_ADDR_EXP 41
10700: PUSH
10701: LD_INT 1
10703: ST_TO_ADDR
// PrepareAmerican ;
10704: CALL 265 0 0
// end else
10708: GO 10762
// if gamemode = 2 then
10710: LD_VAR 0 3
10714: PUSH
10715: LD_INT 2
10717: EQUAL
10718: IFFALSE 10742
// begin your_side := 2 ;
10720: LD_ADDR_OWVAR 2
10724: PUSH
10725: LD_INT 2
10727: ST_TO_ADDR
// legion_enemy := 2 ;
10728: LD_ADDR_EXP 41
10732: PUSH
10733: LD_INT 2
10735: ST_TO_ADDR
// PrepareArabian ;
10736: CALL 17655 0 0
// end else
10740: GO 10762
// begin your_side := 7 ;
10742: LD_ADDR_OWVAR 2
10746: PUSH
10747: LD_INT 7
10749: ST_TO_ADDR
// legion_enemy := 7 ;
10750: LD_ADDR_EXP 41
10754: PUSH
10755: LD_INT 7
10757: ST_TO_ADDR
// PrepareAlliance ;
10758: CALL 15114 0 0
// end ; if your_side = 1 then
10762: LD_OWVAR 2
10766: PUSH
10767: LD_INT 1
10769: EQUAL
10770: IFFALSE 11248
// begin case Query ( QVul4 ) of 1 :
10772: LD_STRING QVul4
10774: PPUSH
10775: CALL_OW 97
10779: PUSH
10780: LD_INT 1
10782: DOUBLE
10783: EQUAL
10784: IFTRUE 10788
10786: GO 10791
10788: POP
// ; end ;
10789: GO 10792
10791: POP
// InGameOn ;
10792: CALL_OW 8
// CenterNowOnXY ( 8 , 5 ) ;
10796: LD_INT 8
10798: PPUSH
10799: LD_INT 5
10801: PPUSH
10802: CALL_OW 86
// uc_side := 4 ;
10806: LD_ADDR_OWVAR 20
10810: PUSH
10811: LD_INT 4
10813: ST_TO_ADDR
// uc_nation := 1 ;
10814: LD_ADDR_OWVAR 21
10818: PUSH
10819: LD_INT 1
10821: ST_TO_ADDR
// hc_importance := 0 ;
10822: LD_ADDR_OWVAR 32
10826: PUSH
10827: LD_INT 0
10829: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , us_skill ) ;
10830: LD_INT 1
10832: PPUSH
10833: LD_INT 3
10835: PPUSH
10836: LD_EXP 26
10840: PPUSH
10841: CALL_OW 380
// un := CreateHuman ;
10845: LD_ADDR_VAR 0 2
10849: PUSH
10850: CALL_OW 44
10854: ST_TO_ADDR
// PlaceUnitXY ( un , 12 , 9 , false ) ;
10855: LD_VAR 0 2
10859: PPUSH
10860: LD_INT 12
10862: PPUSH
10863: LD_INT 9
10865: PPUSH
10866: LD_INT 0
10868: PPUSH
10869: CALL_OW 48
// hc_name := Stuart Carey ;
10873: LD_ADDR_OWVAR 26
10877: PUSH
10878: LD_STRING Stuart Carey
10880: ST_TO_ADDR
// hc_class := 1 ;
10881: LD_ADDR_OWVAR 28
10885: PUSH
10886: LD_INT 1
10888: ST_TO_ADDR
// hc_gallery := vulcano ;
10889: LD_ADDR_OWVAR 33
10893: PUSH
10894: LD_STRING vulcano
10896: ST_TO_ADDR
// hc_face_number := 1 ;
10897: LD_ADDR_OWVAR 34
10901: PUSH
10902: LD_INT 1
10904: ST_TO_ADDR
// us_guy := CreateHuman ;
10905: LD_ADDR_EXP 27
10909: PUSH
10910: CALL_OW 44
10914: ST_TO_ADDR
// InitHc ;
10915: CALL_OW 19
// if rand ( 0 , 1 ) then
10919: LD_INT 0
10921: PPUSH
10922: LD_INT 1
10924: PPUSH
10925: CALL_OW 12
10929: IFFALSE 10946
// PrepareHuman ( sex_male , 3 , 6 ) else
10931: LD_INT 1
10933: PPUSH
10934: LD_INT 3
10936: PPUSH
10937: LD_INT 6
10939: PPUSH
10940: CALL_OW 380
10944: GO 10959
// PrepareHuman ( sex_female , 4 , 8 ) ;
10946: LD_INT 2
10948: PPUSH
10949: LD_INT 4
10951: PPUSH
10952: LD_INT 8
10954: PPUSH
10955: CALL_OW 380
// ComTurnUnit ( un , us_commander ) ;
10959: LD_VAR 0 2
10963: PPUSH
10964: LD_EXP 24
10968: PPUSH
10969: CALL_OW 119
// ComTurnUnit ( us_commander , un ) ;
10973: LD_EXP 24
10977: PPUSH
10978: LD_VAR 0 2
10982: PPUSH
10983: CALL_OW 119
// if GetSex ( un ) = sex_male then
10987: LD_VAR 0 2
10991: PPUSH
10992: CALL_OW 258
10996: PUSH
10997: LD_INT 1
10999: EQUAL
11000: IFFALSE 11083
// begin Say ( un , VD-un1 ) ;
11002: LD_VAR 0 2
11006: PPUSH
11007: LD_STRING VD-un1
11009: PPUSH
11010: CALL_OW 88
// Say ( us_commander , VDc-1 ) ;
11014: LD_EXP 24
11018: PPUSH
11019: LD_STRING VDc-1
11021: PPUSH
11022: CALL_OW 88
// Say ( un , VD-un2 ) ;
11026: LD_VAR 0 2
11030: PPUSH
11031: LD_STRING VD-un2
11033: PPUSH
11034: CALL_OW 88
// Say ( us_commander , VDc-2 ) ;
11038: LD_EXP 24
11042: PPUSH
11043: LD_STRING VDc-2
11045: PPUSH
11046: CALL_OW 88
// Say ( un , VD-un3 ) ;
11050: LD_VAR 0 2
11054: PPUSH
11055: LD_STRING VD-un3
11057: PPUSH
11058: CALL_OW 88
// wait ( 0 0$0.2 ) ;
11062: LD_INT 7
11064: PPUSH
11065: CALL_OW 67
// Say ( un , VD-un4 ) ;
11069: LD_VAR 0 2
11073: PPUSH
11074: LD_STRING VD-un4
11076: PPUSH
11077: CALL_OW 88
// end else
11081: GO 11162
// begin Say ( un , VD-unf1 ) ;
11083: LD_VAR 0 2
11087: PPUSH
11088: LD_STRING VD-unf1
11090: PPUSH
11091: CALL_OW 88
// Say ( us_commander , VDc-1 ) ;
11095: LD_EXP 24
11099: PPUSH
11100: LD_STRING VDc-1
11102: PPUSH
11103: CALL_OW 88
// Say ( un , VD-unf2 ) ;
11107: LD_VAR 0 2
11111: PPUSH
11112: LD_STRING VD-unf2
11114: PPUSH
11115: CALL_OW 88
// Say ( us_commander , VDc-2 ) ;
11119: LD_EXP 24
11123: PPUSH
11124: LD_STRING VDc-2
11126: PPUSH
11127: CALL_OW 88
// Say ( un , VD-unf3 ) ;
11131: LD_VAR 0 2
11135: PPUSH
11136: LD_STRING VD-unf3
11138: PPUSH
11139: CALL_OW 88
// wait ( 0 0$0.2 ) ;
11143: LD_INT 7
11145: PPUSH
11146: CALL_OW 67
// Say ( un , VD-unf4 ) ;
11150: LD_VAR 0 2
11154: PPUSH
11155: LD_STRING VD-unf4
11157: PPUSH
11158: CALL_OW 88
// end ; ComMoveXY ( un , 2 , 2 ) ;
11162: LD_VAR 0 2
11166: PPUSH
11167: LD_INT 2
11169: PPUSH
11170: LD_INT 2
11172: PPUSH
11173: CALL_OW 111
// Say ( us_commander , VDc-3 ) ;
11177: LD_EXP 24
11181: PPUSH
11182: LD_STRING VDc-3
11184: PPUSH
11185: CALL_OW 88
// InGameOff ;
11189: CALL_OW 9
// ChangeMissionObjectives ( CVulc1 ) ;
11193: LD_STRING CVulc1
11195: PPUSH
11196: CALL_OW 337
// repeat Wait ( 0 0$01 ) ;
11200: LD_INT 35
11202: PPUSH
11203: CALL_OW 67
// until GetX ( un ) = 2 and GetY ( un ) = 2 ;
11207: LD_VAR 0 2
11211: PPUSH
11212: CALL_OW 250
11216: PUSH
11217: LD_INT 2
11219: EQUAL
11220: PUSH
11221: LD_VAR 0 2
11225: PPUSH
11226: CALL_OW 251
11230: PUSH
11231: LD_INT 2
11233: EQUAL
11234: AND
11235: IFFALSE 11200
// RemoveUnit ( un ) ;
11237: LD_VAR 0 2
11241: PPUSH
11242: CALL_OW 64
// end else
11246: GO 11625
// if your_side = 2 then
11248: LD_OWVAR 2
11252: PUSH
11253: LD_INT 2
11255: EQUAL
11256: IFFALSE 11472
// begin CenterNowOnUnits ( player_commander ) ;
11258: LD_EXP 11
11262: PPUSH
11263: CALL_OW 87
// speaker := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff ar_commander ;
11267: LD_ADDR_VAR 0 4
11271: PUSH
11272: LD_INT 22
11274: PUSH
11275: LD_INT 2
11277: PUSH
11278: EMPTY
11279: LIST
11280: LIST
11281: PUSH
11282: LD_INT 21
11284: PUSH
11285: LD_INT 1
11287: PUSH
11288: EMPTY
11289: LIST
11290: LIST
11291: PUSH
11292: EMPTY
11293: LIST
11294: LIST
11295: PPUSH
11296: CALL_OW 69
11300: PUSH
11301: LD_EXP 56
11305: DIFF
11306: ST_TO_ADDR
// if speaker then
11307: LD_VAR 0 4
11311: IFFALSE 11463
// begin InGameOn ;
11313: CALL_OW 8
// Say ( ar_commander , VSd-1 ) ;
11317: LD_EXP 56
11321: PPUSH
11322: LD_STRING VSd-1
11324: PPUSH
11325: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
11329: LD_VAR 0 4
11333: PUSH
11334: LD_INT 1
11336: ARRAY
11337: PPUSH
11338: CALL_OW 258
11342: PUSH
11343: LD_INT 1
11345: EQUAL
11346: IFFALSE 11366
// Say ( speaker [ 1 ] , VAd-1 ) else
11348: LD_VAR 0 4
11352: PUSH
11353: LD_INT 1
11355: ARRAY
11356: PPUSH
11357: LD_STRING VAd-1
11359: PPUSH
11360: CALL_OW 88
11364: GO 11382
// Say ( speaker [ 1 ] , VAfd-1 ) ;
11366: LD_VAR 0 4
11370: PUSH
11371: LD_INT 1
11373: ARRAY
11374: PPUSH
11375: LD_STRING VAfd-1
11377: PPUSH
11378: CALL_OW 88
// Say ( ar_commander , VSd-2 ) ;
11382: LD_EXP 56
11386: PPUSH
11387: LD_STRING VSd-2
11389: PPUSH
11390: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
11394: LD_VAR 0 4
11398: PUSH
11399: LD_INT 1
11401: ARRAY
11402: PPUSH
11403: CALL_OW 258
11407: PUSH
11408: LD_INT 1
11410: EQUAL
11411: IFFALSE 11431
// Say ( speaker [ 1 ] , VAd-2 ) else
11413: LD_VAR 0 4
11417: PUSH
11418: LD_INT 1
11420: ARRAY
11421: PPUSH
11422: LD_STRING VAd-2
11424: PPUSH
11425: CALL_OW 88
11429: GO 11447
// Say ( speaker [ 1 ] , VAfd-2 ) ;
11431: LD_VAR 0 4
11435: PUSH
11436: LD_INT 1
11438: ARRAY
11439: PPUSH
11440: LD_STRING VAfd-2
11442: PPUSH
11443: CALL_OW 88
// Say ( ar_commander , VSd-3 ) ;
11447: LD_EXP 56
11451: PPUSH
11452: LD_STRING VSd-3
11454: PPUSH
11455: CALL_OW 88
// InGameOff ;
11459: CALL_OW 9
// end ; ChangeMissionObjectives ( CVulc5 ) ;
11463: LD_STRING CVulc5
11465: PPUSH
11466: CALL_OW 337
// end else
11470: GO 11625
// if your_side = 7 then
11472: LD_OWVAR 2
11476: PUSH
11477: LD_INT 7
11479: EQUAL
11480: IFFALSE 11625
// begin speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) diff al_commander ;
11482: LD_ADDR_VAR 0 4
11486: PUSH
11487: LD_INT 22
11489: PUSH
11490: LD_INT 7
11492: PUSH
11493: EMPTY
11494: LIST
11495: LIST
11496: PUSH
11497: LD_INT 21
11499: PUSH
11500: LD_INT 1
11502: PUSH
11503: EMPTY
11504: LIST
11505: LIST
11506: PUSH
11507: EMPTY
11508: LIST
11509: LIST
11510: PPUSH
11511: CALL_OW 69
11515: PUSH
11516: LD_EXP 42
11520: DIFF
11521: ST_TO_ADDR
// if speaker then
11522: LD_VAR 0 4
11526: IFFALSE 11618
// begin CenterNowOnUnits ( al_commander ) ;
11528: LD_EXP 42
11532: PPUSH
11533: CALL_OW 87
// InGameOn ;
11537: CALL_OW 8
// Say ( al_commander , VPd-1 ) ;
11541: LD_EXP 42
11545: PPUSH
11546: LD_STRING VPd-1
11548: PPUSH
11549: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) then
11553: LD_VAR 0 4
11557: PUSH
11558: LD_INT 1
11560: ARRAY
11561: PPUSH
11562: CALL_OW 258
11566: IFFALSE 11586
// Say ( speaker [ 1 ] , VPpd-1 ) else
11568: LD_VAR 0 4
11572: PUSH
11573: LD_INT 1
11575: ARRAY
11576: PPUSH
11577: LD_STRING VPpd-1
11579: PPUSH
11580: CALL_OW 88
11584: GO 11602
// Say ( speaker [ 1 ] , VPpdf-1 ) ;
11586: LD_VAR 0 4
11590: PUSH
11591: LD_INT 1
11593: ARRAY
11594: PPUSH
11595: LD_STRING VPpdf-1
11597: PPUSH
11598: CALL_OW 88
// Say ( al_commander , VPd-2 ) ;
11602: LD_EXP 42
11606: PPUSH
11607: LD_STRING VPd-2
11609: PPUSH
11610: CALL_OW 88
// InGameOff ;
11614: CALL_OW 9
// end ; ChangeMissionObjectives ( CVulc7 ) ;
11618: LD_STRING CVulc7
11620: PPUSH
11621: CALL_OW 337
// end ; SaveForQuickRestart ;
11625: CALL_OW 22
// end ;
11629: LD_VAR 0 1
11633: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) do
11634: LD_INT 22
11636: PUSH
11637: LD_INT 2
11639: PUSH
11640: EMPTY
11641: LIST
11642: LIST
11643: PUSH
11644: LD_INT 30
11646: PUSH
11647: LD_INT 3
11649: PUSH
11650: EMPTY
11651: LIST
11652: LIST
11653: PUSH
11654: EMPTY
11655: LIST
11656: LIST
11657: PPUSH
11658: CALL_OW 69
11662: IFFALSE 11706
11664: GO 11666
11666: DISABLE
// begin ChangeMissionObjectives ( CVulc6 ) ;
11667: LD_STRING CVulc6
11669: PPUSH
11670: CALL_OW 337
// Wait ( [ 25 25$00 , 22 22$30 , 20 20$00 ] [ Difficulty ] ) ;
11674: LD_INT 52500
11676: PUSH
11677: LD_INT 47250
11679: PUSH
11680: LD_INT 42000
11682: PUSH
11683: EMPTY
11684: LIST
11685: LIST
11686: LIST
11687: PUSH
11688: LD_OWVAR 67
11692: ARRAY
11693: PPUSH
11694: CALL_OW 67
// ru_can_attack := true ;
11698: LD_ADDR_EXP 3
11702: PUSH
11703: LD_INT 1
11705: ST_TO_ADDR
// end ;
11706: END
// every 0 0$01 trigger GetSide ( us_depot ) = 1 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_warehouse ] ] ] ) do var speaker ;
11707: LD_INT 50
11709: PPUSH
11710: CALL_OW 255
11714: PUSH
11715: LD_INT 1
11717: EQUAL
11718: PUSH
11719: LD_INT 22
11721: PUSH
11722: LD_INT 1
11724: PUSH
11725: EMPTY
11726: LIST
11727: LIST
11728: PUSH
11729: LD_INT 2
11731: PUSH
11732: LD_INT 30
11734: PUSH
11735: LD_INT 3
11737: PUSH
11738: EMPTY
11739: LIST
11740: LIST
11741: PUSH
11742: LD_INT 30
11744: PUSH
11745: LD_INT 1
11747: PUSH
11748: EMPTY
11749: LIST
11750: LIST
11751: PUSH
11752: EMPTY
11753: LIST
11754: LIST
11755: LIST
11756: PUSH
11757: EMPTY
11758: LIST
11759: LIST
11760: PPUSH
11761: CALL_OW 69
11765: OR
11766: IFFALSE 12000
11768: GO 11770
11770: DISABLE
11771: LD_INT 0
11773: PPUSH
// begin ChangeMissionObjectives ( CVulc2 ) ;
11774: LD_STRING CVulc2
11776: PPUSH
11777: CALL_OW 337
// speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) diff us_commander ;
11781: LD_ADDR_VAR 0 1
11785: PUSH
11786: LD_INT 22
11788: PUSH
11789: LD_INT 1
11791: PUSH
11792: EMPTY
11793: LIST
11794: LIST
11795: PUSH
11796: LD_INT 25
11798: PUSH
11799: LD_INT 2
11801: PUSH
11802: EMPTY
11803: LIST
11804: LIST
11805: PUSH
11806: EMPTY
11807: LIST
11808: LIST
11809: PPUSH
11810: CALL_OW 69
11814: PUSH
11815: LD_EXP 24
11819: DIFF
11820: ST_TO_ADDR
// DialogueOn ;
11821: CALL_OW 6
// DWait ( 0 0$0.3 ) ;
11825: LD_INT 10
11827: PPUSH
11828: CALL_OW 68
// if GetSex ( speaker [ 1 ] ) = sex_male then
11832: LD_VAR 0 1
11836: PUSH
11837: LD_INT 1
11839: ARRAY
11840: PPUSH
11841: CALL_OW 258
11845: PUSH
11846: LD_INT 1
11848: EQUAL
11849: IFFALSE 11869
// Say ( speaker [ 1 ] , VDb-1 ) else
11851: LD_VAR 0 1
11855: PUSH
11856: LD_INT 1
11858: ARRAY
11859: PPUSH
11860: LD_STRING VDb-1
11862: PPUSH
11863: CALL_OW 88
11867: GO 11885
// Say ( speaker [ 1 ] , VDbf-1 ) ;
11869: LD_VAR 0 1
11873: PUSH
11874: LD_INT 1
11876: ARRAY
11877: PPUSH
11878: LD_STRING VDbf-1
11880: PPUSH
11881: CALL_OW 88
// DWait ( 0 0$0.3 ) ;
11885: LD_INT 10
11887: PPUSH
11888: CALL_OW 68
// if GetSex ( speaker [ 1 ] ) = sex_male then
11892: LD_VAR 0 1
11896: PUSH
11897: LD_INT 1
11899: ARRAY
11900: PPUSH
11901: CALL_OW 258
11905: PUSH
11906: LD_INT 1
11908: EQUAL
11909: IFFALSE 11929
// Say ( speaker [ 1 ] , VDb-2 ) else
11911: LD_VAR 0 1
11915: PUSH
11916: LD_INT 1
11918: ARRAY
11919: PPUSH
11920: LD_STRING VDb-2
11922: PPUSH
11923: CALL_OW 88
11927: GO 11945
// Say ( speaker [ 1 ] , VDbf-2 ) ;
11929: LD_VAR 0 1
11933: PUSH
11934: LD_INT 1
11936: ARRAY
11937: PPUSH
11938: LD_STRING VDbf-2
11940: PPUSH
11941: CALL_OW 88
// DWait ( 0 0$01 ) ;
11945: LD_INT 35
11947: PPUSH
11948: CALL_OW 68
// Say ( us_commander , VDb-com1 ) ;
11952: LD_EXP 24
11956: PPUSH
11957: LD_STRING VDb-com1
11959: PPUSH
11960: CALL_OW 88
// DialogueOff ;
11964: CALL_OW 7
// Wait ( [ 21 21$00 , 17 17$30 , 15 15$00 ] [ Difficulty ] ) ;
11968: LD_INT 44100
11970: PUSH
11971: LD_INT 36750
11973: PUSH
11974: LD_INT 31500
11976: PUSH
11977: EMPTY
11978: LIST
11979: LIST
11980: LIST
11981: PUSH
11982: LD_OWVAR 67
11986: ARRAY
11987: PPUSH
11988: CALL_OW 67
// ru_can_attack := true ;
11992: LD_ADDR_EXP 3
11996: PUSH
11997: LD_INT 1
11999: ST_TO_ADDR
// end ;
12000: PPOPN 1
12002: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) do
12003: LD_INT 22
12005: PUSH
12006: LD_INT 7
12008: PUSH
12009: EMPTY
12010: LIST
12011: LIST
12012: PUSH
12013: LD_INT 30
12015: PUSH
12016: LD_INT 3
12018: PUSH
12019: EMPTY
12020: LIST
12021: LIST
12022: PUSH
12023: EMPTY
12024: LIST
12025: LIST
12026: PPUSH
12027: CALL_OW 69
12031: IFFALSE 12068
12033: GO 12035
12035: DISABLE
// begin Wait ( [ 20 20$00 , 16 16$30 , 14 14$00 ] [ Difficulty ] ) ;
12036: LD_INT 42000
12038: PUSH
12039: LD_INT 34650
12041: PUSH
12042: LD_INT 29400
12044: PUSH
12045: EMPTY
12046: LIST
12047: LIST
12048: LIST
12049: PUSH
12050: LD_OWVAR 67
12054: ARRAY
12055: PPUSH
12056: CALL_OW 67
// ru_can_attack := true ;
12060: LD_ADDR_EXP 3
12064: PUSH
12065: LD_INT 1
12067: ST_TO_ADDR
// end ;
12068: END
// every 0 0$01 trigger GetSide ( us_lab ) = 1 do var speaker ;
12069: LD_INT 58
12071: PPUSH
12072: CALL_OW 255
12076: PUSH
12077: LD_INT 1
12079: EQUAL
12080: IFFALSE 12287
12082: GO 12084
12084: DISABLE
12085: LD_INT 0
12087: PPUSH
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
12088: LD_ADDR_VAR 0 1
12092: PUSH
12093: LD_INT 22
12095: PUSH
12096: LD_INT 1
12098: PUSH
12099: EMPTY
12100: LIST
12101: LIST
12102: PUSH
12103: LD_INT 25
12105: PUSH
12106: LD_INT 2
12108: PUSH
12109: EMPTY
12110: LIST
12111: LIST
12112: PUSH
12113: EMPTY
12114: LIST
12115: LIST
12116: PPUSH
12117: CALL_OW 69
12121: ST_TO_ADDR
// DialogueOn ;
12122: CALL_OW 6
// if speaker then
12126: LD_VAR 0 1
12130: IFFALSE 12185
// if GetSex ( speaker [ 1 ] ) = sex_male then
12132: LD_VAR 0 1
12136: PUSH
12137: LD_INT 1
12139: ARRAY
12140: PPUSH
12141: CALL_OW 258
12145: PUSH
12146: LD_INT 1
12148: EQUAL
12149: IFFALSE 12169
// Say ( speaker [ 1 ] , VDe-1 ) else
12151: LD_VAR 0 1
12155: PUSH
12156: LD_INT 1
12158: ARRAY
12159: PPUSH
12160: LD_STRING VDe-1
12162: PPUSH
12163: CALL_OW 88
12167: GO 12185
// Say ( speaker [ 1 ] , VDef-1 ) ;
12169: LD_VAR 0 1
12173: PUSH
12174: LD_INT 1
12176: ARRAY
12177: PPUSH
12178: LD_STRING VDef-1
12180: PPUSH
12181: CALL_OW 88
// case Query ( SibNote ) of 1 :
12185: LD_STRING SibNote
12187: PPUSH
12188: CALL_OW 97
12192: PUSH
12193: LD_INT 1
12195: DOUBLE
12196: EQUAL
12197: IFTRUE 12201
12199: GO 12204
12201: POP
// ; end ;
12202: GO 12205
12204: POP
// if speaker then
12205: LD_VAR 0 1
12209: IFFALSE 12264
// if GetSex ( speaker [ 1 ] ) = sex_male then
12211: LD_VAR 0 1
12215: PUSH
12216: LD_INT 1
12218: ARRAY
12219: PPUSH
12220: CALL_OW 258
12224: PUSH
12225: LD_INT 1
12227: EQUAL
12228: IFFALSE 12248
// Say ( speaker [ 1 ] , VDe-2 ) else
12230: LD_VAR 0 1
12234: PUSH
12235: LD_INT 1
12237: ARRAY
12238: PPUSH
12239: LD_STRING VDe-2
12241: PPUSH
12242: CALL_OW 88
12246: GO 12264
// Say ( speaker [ 1 ] , VDef-2 ) ;
12248: LD_VAR 0 1
12252: PUSH
12253: LD_INT 1
12255: ARRAY
12256: PPUSH
12257: LD_STRING VDef-2
12259: PPUSH
12260: CALL_OW 88
// Say ( us_commander , VDc-4 ) ;
12264: LD_EXP 24
12268: PPUSH
12269: LD_STRING VDc-4
12271: PPUSH
12272: CALL_OW 88
// DialogueOff ;
12276: CALL_OW 7
// ChangeMissionObjectives ( CVulc3 ) ;
12280: LD_STRING CVulc3
12282: PPUSH
12283: CALL_OW 337
// end ;
12287: PPOPN 1
12289: END
// every 0 0$01 trigger your_side = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) > 0 do var i , un , veh ;
12290: LD_OWVAR 2
12294: PUSH
12295: LD_INT 1
12297: EQUAL
12298: PUSH
12299: LD_INT 22
12301: PUSH
12302: LD_INT 1
12304: PUSH
12305: EMPTY
12306: LIST
12307: LIST
12308: PUSH
12309: LD_INT 30
12311: PUSH
12312: LD_INT 3
12314: PUSH
12315: EMPTY
12316: LIST
12317: LIST
12318: PUSH
12319: EMPTY
12320: LIST
12321: LIST
12322: PPUSH
12323: CALL_OW 69
12327: PUSH
12328: LD_INT 0
12330: GREATER
12331: AND
12332: IFFALSE 12766
12334: GO 12336
12336: DISABLE
12337: LD_INT 0
12339: PPUSH
12340: PPUSH
12341: PPUSH
// begin Wait ( Rand ( 0 0$07 , 0 0$37 ) ) ;
12342: LD_INT 245
12344: PPUSH
12345: LD_INT 1295
12347: PPUSH
12348: CALL_OW 12
12352: PPUSH
12353: CALL_OW 67
// DialogueOn ;
12357: CALL_OW 6
// SayRadio ( us_guy , VDG-1 ) ;
12361: LD_EXP 27
12365: PPUSH
12366: LD_STRING VDG-1
12368: PPUSH
12369: CALL_OW 94
// Say ( us_commander , VDc-5 ) ;
12373: LD_EXP 24
12377: PPUSH
12378: LD_STRING VDc-5
12380: PPUSH
12381: CALL_OW 88
// SayRadio ( us_guy , VDG-2 ) ;
12385: LD_EXP 27
12389: PPUSH
12390: LD_STRING VDG-2
12392: PPUSH
12393: CALL_OW 94
// Say ( us_commander , VDc-6 ) ;
12397: LD_EXP 24
12401: PPUSH
12402: LD_STRING VDc-6
12404: PPUSH
12405: CALL_OW 88
// SayRadio ( us_guy , VDG-3 ) ;
12409: LD_EXP 27
12413: PPUSH
12414: LD_STRING VDG-3
12416: PPUSH
12417: CALL_OW 94
// Say ( us_commander , VDc-7 ) ;
12421: LD_EXP 24
12425: PPUSH
12426: LD_STRING VDc-7
12428: PPUSH
12429: CALL_OW 88
// SayRadio ( us_guy , VDG-4 ) ;
12433: LD_EXP 27
12437: PPUSH
12438: LD_STRING VDG-4
12440: PPUSH
12441: CALL_OW 94
// DialogueOff ;
12445: CALL_OW 7
// ChangeMissionObjectives ( CVulc4 ) ;
12449: LD_STRING CVulc4
12451: PPUSH
12452: CALL_OW 337
// Wait ( [ 9 9$00 , 10 10$00 , 11 11$00 ] [ Difficulty ] ) ;
12456: LD_INT 18900
12458: PUSH
12459: LD_INT 21000
12461: PUSH
12462: LD_INT 23100
12464: PUSH
12465: EMPTY
12466: LIST
12467: LIST
12468: LIST
12469: PUSH
12470: LD_OWVAR 67
12474: ARRAY
12475: PPUSH
12476: CALL_OW 67
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
12480: LD_ADDR_VAR 0 1
12484: PUSH
12485: DOUBLE
12486: LD_INT 1
12488: DEC
12489: ST_TO_ADDR
12490: LD_INT 4
12492: PUSH
12493: LD_INT 5
12495: PUSH
12496: LD_INT 6
12498: PUSH
12499: EMPTY
12500: LIST
12501: LIST
12502: LIST
12503: PUSH
12504: LD_OWVAR 67
12508: ARRAY
12509: PUSH
12510: FOR_TO
12511: IFFALSE 12755
// begin uc_side := 1 ;
12513: LD_ADDR_OWVAR 20
12517: PUSH
12518: LD_INT 1
12520: ST_TO_ADDR
// uc_nation := 1 ;
12521: LD_ADDR_OWVAR 21
12525: PUSH
12526: LD_INT 1
12528: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , us_skill ) ;
12529: LD_INT 0
12531: PPUSH
12532: LD_INT 1
12534: PPUSH
12535: LD_INT 4
12537: PPUSH
12538: CALL_OW 12
12542: PPUSH
12543: LD_EXP 26
12547: PPUSH
12548: CALL_OW 380
// un := CreateHuman ;
12552: LD_ADDR_VAR 0 2
12556: PUSH
12557: CALL_OW 44
12561: ST_TO_ADDR
// SetDir ( un , 2 ) ;
12562: LD_VAR 0 2
12566: PPUSH
12567: LD_INT 2
12569: PPUSH
12570: CALL_OW 233
// if GetClass ( un ) = 3 then
12574: LD_VAR 0 2
12578: PPUSH
12579: CALL_OW 257
12583: PUSH
12584: LD_INT 3
12586: EQUAL
12587: IFFALSE 12738
// begin vc_chassis := [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 ] ;
12589: LD_ADDR_OWVAR 37
12593: PUSH
12594: LD_INT 2
12596: PUSH
12597: LD_INT 3
12599: PUSH
12600: EMPTY
12601: LIST
12602: LIST
12603: PUSH
12604: LD_VAR 0 1
12608: PUSH
12609: LD_INT 2
12611: MOD
12612: ARRAY
12613: ST_TO_ADDR
// vc_engine := engine_combustion ;
12614: LD_ADDR_OWVAR 39
12618: PUSH
12619: LD_INT 1
12621: ST_TO_ADDR
// vc_control := control_manual ;
12622: LD_ADDR_OWVAR 38
12626: PUSH
12627: LD_INT 1
12629: ST_TO_ADDR
// vc_weapon := [ us_laser , us_laser , us_double_gun , us_radar ] [ rand ( 1 , 4 ) ] ;
12630: LD_ADDR_OWVAR 40
12634: PUSH
12635: LD_INT 9
12637: PUSH
12638: LD_INT 9
12640: PUSH
12641: LD_INT 5
12643: PUSH
12644: LD_INT 11
12646: PUSH
12647: EMPTY
12648: LIST
12649: LIST
12650: LIST
12651: LIST
12652: PUSH
12653: LD_INT 1
12655: PPUSH
12656: LD_INT 4
12658: PPUSH
12659: CALL_OW 12
12663: ARRAY
12664: ST_TO_ADDR
// veh := CreateVehicle ;
12665: LD_ADDR_VAR 0 3
12669: PUSH
12670: CALL_OW 45
12674: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
12675: LD_VAR 0 3
12679: PPUSH
12680: LD_INT 2
12682: PPUSH
12683: CALL_OW 233
// SetFuel ( veh , Rand ( 77 , 88 ) ) ;
12687: LD_VAR 0 3
12691: PPUSH
12692: LD_INT 77
12694: PPUSH
12695: LD_INT 88
12697: PPUSH
12698: CALL_OW 12
12702: PPUSH
12703: CALL_OW 240
// PlaceUnitArea ( veh , start_north , false ) ;
12707: LD_VAR 0 3
12711: PPUSH
12712: LD_INT 1
12714: PPUSH
12715: LD_INT 0
12717: PPUSH
12718: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
12722: LD_VAR 0 2
12726: PPUSH
12727: LD_VAR 0 3
12731: PPUSH
12732: CALL_OW 52
// end else
12736: GO 12753
// PlaceUnitArea ( un , start_north , false ) ;
12738: LD_VAR 0 2
12742: PPUSH
12743: LD_INT 1
12745: PPUSH
12746: LD_INT 0
12748: PPUSH
12749: CALL_OW 49
// end ;
12753: GO 12510
12755: POP
12756: POP
// CenterNowOnUnits ( un ) ;
12757: LD_VAR 0 2
12761: PPUSH
12762: CALL_OW 87
// end ;
12766: PPOPN 3
12768: END
// every 0 0$01 trigger FilterUnitsInArea ( vulc_artifact , [ f_side , your_side ] ) do var un , filter ;
12769: LD_INT 21
12771: PPUSH
12772: LD_INT 22
12774: PUSH
12775: LD_OWVAR 2
12779: PUSH
12780: EMPTY
12781: LIST
12782: LIST
12783: PPUSH
12784: CALL_OW 70
12788: IFFALSE 13109
12790: GO 12792
12792: DISABLE
12793: LD_INT 0
12795: PPUSH
12796: PPUSH
// begin filter := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff player_commander ;
12797: LD_ADDR_VAR 0 2
12801: PUSH
12802: LD_INT 22
12804: PUSH
12805: LD_OWVAR 2
12809: PUSH
12810: EMPTY
12811: LIST
12812: LIST
12813: PUSH
12814: LD_INT 2
12816: PUSH
12817: LD_INT 25
12819: PUSH
12820: LD_INT 1
12822: PUSH
12823: EMPTY
12824: LIST
12825: LIST
12826: PUSH
12827: LD_INT 25
12829: PUSH
12830: LD_INT 2
12832: PUSH
12833: EMPTY
12834: LIST
12835: LIST
12836: PUSH
12837: LD_INT 25
12839: PUSH
12840: LD_INT 3
12842: PUSH
12843: EMPTY
12844: LIST
12845: LIST
12846: PUSH
12847: LD_INT 25
12849: PUSH
12850: LD_INT 4
12852: PUSH
12853: EMPTY
12854: LIST
12855: LIST
12856: PUSH
12857: EMPTY
12858: LIST
12859: LIST
12860: LIST
12861: LIST
12862: LIST
12863: PUSH
12864: EMPTY
12865: LIST
12866: LIST
12867: PPUSH
12868: CALL_OW 69
12872: PUSH
12873: LD_EXP 11
12877: DIFF
12878: ST_TO_ADDR
// un := NearestUnitToXY ( filter , 112 , 67 ) ;
12879: LD_ADDR_VAR 0 1
12883: PUSH
12884: LD_VAR 0 2
12888: PPUSH
12889: LD_INT 112
12891: PPUSH
12892: LD_INT 67
12894: PPUSH
12895: CALL_OW 73
12899: ST_TO_ADDR
// if GetSide ( un ) = 7 then
12900: LD_VAR 0 1
12904: PPUSH
12905: CALL_OW 255
12909: PUSH
12910: LD_INT 7
12912: EQUAL
12913: IFFALSE 12956
// if GetSex ( un ) = sex_male then
12915: LD_VAR 0 1
12919: PPUSH
12920: CALL_OW 258
12924: PUSH
12925: LD_INT 1
12927: EQUAL
12928: IFFALSE 12944
// Say ( un , VD-find-al ) else
12930: LD_VAR 0 1
12934: PPUSH
12935: LD_STRING VD-find-al
12937: PPUSH
12938: CALL_OW 88
12942: GO 12956
// Say ( un , VD-find-al-f ) ;
12944: LD_VAR 0 1
12948: PPUSH
12949: LD_STRING VD-find-al-f
12951: PPUSH
12952: CALL_OW 88
// if GetSide ( un ) = 2 then
12956: LD_VAR 0 1
12960: PPUSH
12961: CALL_OW 255
12965: PUSH
12966: LD_INT 2
12968: EQUAL
12969: IFFALSE 13012
// if GetSex ( un ) = sex_male then
12971: LD_VAR 0 1
12975: PPUSH
12976: CALL_OW 258
12980: PUSH
12981: LD_INT 1
12983: EQUAL
12984: IFFALSE 13000
// Say ( un , VD-find-ar ) else
12986: LD_VAR 0 1
12990: PPUSH
12991: LD_STRING VD-find-ar
12993: PPUSH
12994: CALL_OW 88
12998: GO 13012
// Say ( un , VD-find-ar-f ) ;
13000: LD_VAR 0 1
13004: PPUSH
13005: LD_STRING VD-find-ar-f
13007: PPUSH
13008: CALL_OW 88
// if GetSide ( un ) = 1 then
13012: LD_VAR 0 1
13016: PPUSH
13017: CALL_OW 255
13021: PUSH
13022: LD_INT 1
13024: EQUAL
13025: IFFALSE 13092
// begin if GetSex ( un ) = sex_male then
13027: LD_VAR 0 1
13031: PPUSH
13032: CALL_OW 258
13036: PUSH
13037: LD_INT 1
13039: EQUAL
13040: IFFALSE 13068
// begin Say ( un , VD-find-us ) ;
13042: LD_VAR 0 1
13046: PPUSH
13047: LD_STRING VD-find-us
13049: PPUSH
13050: CALL_OW 88
// Say ( un , VD-find-us2 ) ;
13054: LD_VAR 0 1
13058: PPUSH
13059: LD_STRING VD-find-us2
13061: PPUSH
13062: CALL_OW 88
// end else
13066: GO 13092
// begin Say ( un , VD-find-us-f ) ;
13068: LD_VAR 0 1
13072: PPUSH
13073: LD_STRING VD-find-us-f
13075: PPUSH
13076: CALL_OW 88
// Say ( un , VD-find-us2-f ) ;
13080: LD_VAR 0 1
13084: PPUSH
13085: LD_STRING VD-find-us2-f
13087: PPUSH
13088: CALL_OW 88
// end ; end ; Wait ( 0 0$0.3 ) ;
13092: LD_INT 10
13094: PPUSH
13095: CALL_OW 67
// CenterNowOnXY ( 112 , 67 ) ;
13099: LD_INT 112
13101: PPUSH
13102: LD_INT 67
13104: PPUSH
13105: CALL_OW 86
// end ;
13109: PPOPN 2
13111: END
// every 0 0$01 trigger player_artifact_ready do var speaker ;
13112: LD_EXP 8
13116: IFFALSE 13618
13118: GO 13120
13120: DISABLE
13121: LD_INT 0
13123: PPUSH
// begin if your_side = 1 then
13124: LD_OWVAR 2
13128: PUSH
13129: LD_INT 1
13131: EQUAL
13132: IFFALSE 13313
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) diff us_commander ;
13134: LD_ADDR_VAR 0 1
13138: PUSH
13139: LD_INT 22
13141: PUSH
13142: LD_INT 1
13144: PUSH
13145: EMPTY
13146: LIST
13147: LIST
13148: PUSH
13149: LD_INT 25
13151: PUSH
13152: LD_INT 4
13154: PUSH
13155: EMPTY
13156: LIST
13157: LIST
13158: PUSH
13159: EMPTY
13160: LIST
13161: LIST
13162: PPUSH
13163: CALL_OW 69
13167: PUSH
13168: LD_EXP 24
13172: DIFF
13173: ST_TO_ADDR
// if not speaker then
13174: LD_VAR 0 1
13178: NOT
13179: IFFALSE 13183
// exit ;
13181: GO 13618
// if GetSex ( speaker [ 1 ] ) = sex_male then
13183: LD_VAR 0 1
13187: PUSH
13188: LD_INT 1
13190: ARRAY
13191: PPUSH
13192: CALL_OW 258
13196: PUSH
13197: LD_INT 1
13199: EQUAL
13200: IFFALSE 13220
// Say ( speaker [ 1 ] , VD-us-sci-art-1 ) else
13202: LD_VAR 0 1
13206: PUSH
13207: LD_INT 1
13209: ARRAY
13210: PPUSH
13211: LD_STRING VD-us-sci-art-1
13213: PPUSH
13214: CALL_OW 88
13218: GO 13236
// Say ( speaker [ 1 ] , VD-us-fsci-art-1 ) ;
13220: LD_VAR 0 1
13224: PUSH
13225: LD_INT 1
13227: ARRAY
13228: PPUSH
13229: LD_STRING VD-us-fsci-art-1
13231: PPUSH
13232: CALL_OW 88
// Say ( us_commander , VDc-art1 ) ;
13236: LD_EXP 24
13240: PPUSH
13241: LD_STRING VDc-art1
13243: PPUSH
13244: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
13248: LD_VAR 0 1
13252: PUSH
13253: LD_INT 1
13255: ARRAY
13256: PPUSH
13257: CALL_OW 258
13261: PUSH
13262: LD_INT 1
13264: EQUAL
13265: IFFALSE 13285
// Say ( speaker [ 1 ] , VD-us-sci-art-2 ) else
13267: LD_VAR 0 1
13271: PUSH
13272: LD_INT 1
13274: ARRAY
13275: PPUSH
13276: LD_STRING VD-us-sci-art-2
13278: PPUSH
13279: CALL_OW 88
13283: GO 13301
// Say ( speaker [ 1 ] , VD-us-fsci-art-2 ) ;
13285: LD_VAR 0 1
13289: PUSH
13290: LD_INT 1
13292: ARRAY
13293: PPUSH
13294: LD_STRING VD-us-fsci-art-2
13296: PPUSH
13297: CALL_OW 88
// Say ( us_commander , VDc-art2 ) ;
13301: LD_EXP 24
13305: PPUSH
13306: LD_STRING VDc-art2
13308: PPUSH
13309: CALL_OW 88
// end ; if your_side = 2 then
13313: LD_OWVAR 2
13317: PUSH
13318: LD_INT 2
13320: EQUAL
13321: IFFALSE 13425
// begin speaker := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) diff ar_commander ;
13323: LD_ADDR_VAR 0 1
13327: PUSH
13328: LD_INT 22
13330: PUSH
13331: LD_INT 2
13333: PUSH
13334: EMPTY
13335: LIST
13336: LIST
13337: PUSH
13338: LD_INT 25
13340: PUSH
13341: LD_INT 4
13343: PUSH
13344: EMPTY
13345: LIST
13346: LIST
13347: PUSH
13348: EMPTY
13349: LIST
13350: LIST
13351: PPUSH
13352: CALL_OW 69
13356: PUSH
13357: LD_EXP 56
13361: DIFF
13362: ST_TO_ADDR
// if not speaker then
13363: LD_VAR 0 1
13367: NOT
13368: IFFALSE 13372
// exit ;
13370: GO 13618
// if GetSex ( speaker [ 1 ] ) = sex_male then
13372: LD_VAR 0 1
13376: PUSH
13377: LD_INT 1
13379: ARRAY
13380: PPUSH
13381: CALL_OW 258
13385: PUSH
13386: LD_INT 1
13388: EQUAL
13389: IFFALSE 13409
// Say ( speaker [ 1 ] , VD-ar-sci-art-1 ) else
13391: LD_VAR 0 1
13395: PUSH
13396: LD_INT 1
13398: ARRAY
13399: PPUSH
13400: LD_STRING VD-ar-sci-art-1
13402: PPUSH
13403: CALL_OW 88
13407: GO 13425
// Say ( speaker [ 1 ] , VD-ar-fsci-art-1 ) ;
13409: LD_VAR 0 1
13413: PUSH
13414: LD_INT 1
13416: ARRAY
13417: PPUSH
13418: LD_STRING VD-ar-fsci-art-1
13420: PPUSH
13421: CALL_OW 88
// end ; if your_side = 7 then
13425: LD_OWVAR 2
13429: PUSH
13430: LD_INT 7
13432: EQUAL
13433: IFFALSE 13618
// begin speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 4 ] ] ) diff al_commander ;
13435: LD_ADDR_VAR 0 1
13439: PUSH
13440: LD_INT 22
13442: PUSH
13443: LD_INT 7
13445: PUSH
13446: EMPTY
13447: LIST
13448: LIST
13449: PUSH
13450: LD_INT 25
13452: PUSH
13453: LD_INT 4
13455: PUSH
13456: EMPTY
13457: LIST
13458: LIST
13459: PUSH
13460: EMPTY
13461: LIST
13462: LIST
13463: PPUSH
13464: CALL_OW 69
13468: PUSH
13469: LD_EXP 42
13473: DIFF
13474: ST_TO_ADDR
// if speaker then
13475: LD_VAR 0 1
13479: IFFALSE 13611
// begin if GetSex ( speaker [ 1 ] ) = sex_male then
13481: LD_VAR 0 1
13485: PUSH
13486: LD_INT 1
13488: ARRAY
13489: PPUSH
13490: CALL_OW 258
13494: PUSH
13495: LD_INT 1
13497: EQUAL
13498: IFFALSE 13518
// Say ( speaker [ 1 ] , VD-al-sci-art-1 ) else
13500: LD_VAR 0 1
13504: PUSH
13505: LD_INT 1
13507: ARRAY
13508: PPUSH
13509: LD_STRING VD-al-sci-art-1
13511: PPUSH
13512: CALL_OW 88
13516: GO 13534
// Say ( speaker [ 1 ] , VD-al-fsci-art-1 ) ;
13518: LD_VAR 0 1
13522: PUSH
13523: LD_INT 1
13525: ARRAY
13526: PPUSH
13527: LD_STRING VD-al-fsci-art-1
13529: PPUSH
13530: CALL_OW 88
// Say ( al_commander , VPd-art-1 ) ;
13534: LD_EXP 42
13538: PPUSH
13539: LD_STRING VPd-art-1
13541: PPUSH
13542: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
13546: LD_VAR 0 1
13550: PUSH
13551: LD_INT 1
13553: ARRAY
13554: PPUSH
13555: CALL_OW 258
13559: PUSH
13560: LD_INT 1
13562: EQUAL
13563: IFFALSE 13583
// Say ( speaker [ 1 ] , VD-al-sci-art-2 ) else
13565: LD_VAR 0 1
13569: PUSH
13570: LD_INT 1
13572: ARRAY
13573: PPUSH
13574: LD_STRING VD-al-sci-art-2
13576: PPUSH
13577: CALL_OW 88
13581: GO 13599
// Say ( speaker [ 1 ] , VD-al-fsci-art-2 ) ;
13583: LD_VAR 0 1
13587: PUSH
13588: LD_INT 1
13590: ARRAY
13591: PPUSH
13592: LD_STRING VD-al-fsci-art-2
13594: PPUSH
13595: CALL_OW 88
// Say ( al_commander , VPd-art-2 ) ;
13599: LD_EXP 42
13603: PPUSH
13604: LD_STRING VPd-art-2
13606: PPUSH
13607: CALL_OW 88
// end ; ChangeMissionObjectives ( CVulc7out ) ;
13611: LD_STRING CVulc7out
13613: PPUSH
13614: CALL_OW 337
// end ; end ;
13618: PPOPN 1
13620: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_see , 8 ] ] ) do var speaker ;
13621: LD_INT 22
13623: PUSH
13624: LD_OWVAR 2
13628: PUSH
13629: EMPTY
13630: LIST
13631: LIST
13632: PUSH
13633: LD_INT 101
13635: PUSH
13636: LD_INT 8
13638: PUSH
13639: EMPTY
13640: LIST
13641: LIST
13642: PUSH
13643: EMPTY
13644: LIST
13645: LIST
13646: PPUSH
13647: CALL_OW 69
13651: IFFALSE 13794
13653: GO 13655
13655: DISABLE
13656: LD_INT 0
13658: PPUSH
// begin if your_side = 1 then
13659: LD_OWVAR 2
13663: PUSH
13664: LD_INT 1
13666: EQUAL
13667: IFFALSE 13750
// begin speaker := FilterAllUnits ( [ f_side , 1 ] ) diff us_commander ;
13669: LD_ADDR_VAR 0 1
13673: PUSH
13674: LD_INT 22
13676: PUSH
13677: LD_INT 1
13679: PUSH
13680: EMPTY
13681: LIST
13682: LIST
13683: PPUSH
13684: CALL_OW 69
13688: PUSH
13689: LD_EXP 24
13693: DIFF
13694: ST_TO_ADDR
// if speaker then
13695: LD_VAR 0 1
13699: IFFALSE 13750
// if GetSex ( speaker [ 1 ] ) then
13701: LD_VAR 0 1
13705: PUSH
13706: LD_INT 1
13708: ARRAY
13709: PPUSH
13710: CALL_OW 258
13714: IFFALSE 13734
// Say ( speaker [ 1 ] , VD-legion-us ) else
13716: LD_VAR 0 1
13720: PUSH
13721: LD_INT 1
13723: ARRAY
13724: PPUSH
13725: LD_STRING VD-legion-us
13727: PPUSH
13728: CALL_OW 88
13732: GO 13750
// Say ( speaker [ 1 ] , VD-legion-us-f ) ;
13734: LD_VAR 0 1
13738: PUSH
13739: LD_INT 1
13741: ARRAY
13742: PPUSH
13743: LD_STRING VD-legion-us-f
13745: PPUSH
13746: CALL_OW 88
// end ; if your_side = 2 then
13750: LD_OWVAR 2
13754: PUSH
13755: LD_INT 2
13757: EQUAL
13758: IFFALSE 13772
// Say ( ar_commander , VD-legion-ar ) ;
13760: LD_EXP 56
13764: PPUSH
13765: LD_STRING VD-legion-ar
13767: PPUSH
13768: CALL_OW 88
// if your_side = 7 then
13772: LD_OWVAR 2
13776: PUSH
13777: LD_INT 7
13779: EQUAL
13780: IFFALSE 13794
// Say ( al_commander , VD-legion-al ) ;
13782: LD_EXP 42
13786: PPUSH
13787: LD_STRING VD-legion-al
13789: PPUSH
13790: CALL_OW 88
// end ;
13794: PPOPN 1
13796: END
// every 0 0$01 trigger mine_vulc do
13797: LD_EXP 13
13801: IFFALSE 13818
13803: GO 13805
13805: DISABLE
// begin Say ( player_commander , VD-vulc-mines ) ;
13806: LD_EXP 11
13810: PPUSH
13811: LD_STRING VD-vulc-mines
13813: PPUSH
13814: CALL_OW 88
// end ;
13818: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 3 ] ) = 0 and your_side <> 2 do
13819: LD_INT 22
13821: PUSH
13822: LD_INT 3
13824: PUSH
13825: EMPTY
13826: LIST
13827: LIST
13828: PPUSH
13829: CALL_OW 69
13833: PUSH
13834: LD_INT 0
13836: EQUAL
13837: PUSH
13838: LD_OWVAR 2
13842: PUSH
13843: LD_INT 2
13845: NONEQUAL
13846: AND
13847: IFFALSE 13856
13849: GO 13851
13851: DISABLE
// Win ;
13852: CALL 13913 0 0
13856: END
// every 0 0$01 trigger FilterAllUnits ( [ f_or , [ f_side , 8 ] , [ f_side , 3 ] ] ) = 0 and your_side = 2 do
13857: LD_INT 2
13859: PUSH
13860: LD_INT 22
13862: PUSH
13863: LD_INT 8
13865: PUSH
13866: EMPTY
13867: LIST
13868: LIST
13869: PUSH
13870: LD_INT 22
13872: PUSH
13873: LD_INT 3
13875: PUSH
13876: EMPTY
13877: LIST
13878: LIST
13879: PUSH
13880: EMPTY
13881: LIST
13882: LIST
13883: LIST
13884: PPUSH
13885: CALL_OW 69
13889: PUSH
13890: LD_INT 0
13892: EQUAL
13893: PUSH
13894: LD_OWVAR 2
13898: PUSH
13899: LD_INT 2
13901: EQUAL
13902: AND
13903: IFFALSE 13912
13905: GO 13907
13907: DISABLE
// Win ;
13908: CALL 13913 0 0
13912: END
// function Win ; var points ; begin
13913: LD_INT 0
13915: PPUSH
13916: PPUSH
// case Query ( VulcWin ) of 1 :
13917: LD_STRING VulcWin
13919: PPUSH
13920: CALL_OW 97
13924: PUSH
13925: LD_INT 1
13927: DOUBLE
13928: EQUAL
13929: IFTRUE 13933
13931: GO 13936
13933: POP
// ; end ;
13934: GO 13937
13936: POP
// if medal_enabled then
13937: LD_EXP 14
13941: IFFALSE 13955
// AddMedal ( vulc_1 , 1 ) else
13943: LD_STRING vulc_1
13945: PPUSH
13946: LD_INT 1
13948: PPUSH
13949: CALL_OW 101
13953: GO 13966
// AddMedal ( vulc_1 , - 1 ) ;
13955: LD_STRING vulc_1
13957: PPUSH
13958: LD_INT 1
13960: NEG
13961: PPUSH
13962: CALL_OW 101
// if FilterAllUnits ( [ f_side , 8 ] ) = 0 then
13966: LD_INT 22
13968: PUSH
13969: LD_INT 8
13971: PUSH
13972: EMPTY
13973: LIST
13974: LIST
13975: PPUSH
13976: CALL_OW 69
13980: PUSH
13981: LD_INT 0
13983: EQUAL
13984: IFFALSE 13998
// AddMedal ( vulc_2 , 1 ) else
13986: LD_STRING vulc_2
13988: PPUSH
13989: LD_INT 1
13991: PPUSH
13992: CALL_OW 101
13996: GO 14009
// AddMedal ( vulc_2 , - 1 ) ;
13998: LD_STRING vulc_2
14000: PPUSH
14001: LD_INT 1
14003: NEG
14004: PPUSH
14005: CALL_OW 101
// points := CalculateCommanderPoints ;
14009: LD_ADDR_VAR 0 2
14013: PUSH
14014: CALL 1917 0 0
14018: ST_TO_ADDR
// if points >= 2000 then
14019: LD_VAR 0 2
14023: PUSH
14024: LD_INT 2000
14026: GREATEREQUAL
14027: IFFALSE 14041
// AddMedal ( vulc_3 , 2 ) else
14029: LD_STRING vulc_3
14031: PPUSH
14032: LD_INT 2
14034: PPUSH
14035: CALL_OW 101
14039: GO 14074
// if points >= 0 then
14041: LD_VAR 0 2
14045: PUSH
14046: LD_INT 0
14048: GREATEREQUAL
14049: IFFALSE 14063
// AddMedal ( vulc_3 , 1 ) else
14051: LD_STRING vulc_3
14053: PPUSH
14054: LD_INT 1
14056: PPUSH
14057: CALL_OW 101
14061: GO 14074
// AddMedal ( vulc_3 , - 1 ) ;
14063: LD_STRING vulc_3
14065: PPUSH
14066: LD_INT 1
14068: NEG
14069: PPUSH
14070: CALL_OW 101
// GiveMedals ( MAIN ) ;
14074: LD_STRING MAIN
14076: PPUSH
14077: CALL_OW 102
// YouWin ;
14081: CALL_OW 103
// end ; end_of_file
14085: LD_VAR 0 1
14089: RET
// every 0 0$01 trigger FilterUnitsInArea ( vulcano_area , [ f_type , unit_human ] ) do var i , un ;
14090: LD_INT 13
14092: PPUSH
14093: LD_INT 21
14095: PUSH
14096: LD_INT 1
14098: PUSH
14099: EMPTY
14100: LIST
14101: LIST
14102: PPUSH
14103: CALL_OW 70
14107: IFFALSE 14167
14109: GO 14111
14111: DISABLE
14112: LD_INT 0
14114: PPUSH
14115: PPUSH
// begin enable ;
14116: ENABLE
// for i in FilterUnitsInArea ( vulcano_area , [ f_type , unit_human ] ) do
14117: LD_ADDR_VAR 0 1
14121: PUSH
14122: LD_INT 13
14124: PPUSH
14125: LD_INT 21
14127: PUSH
14128: LD_INT 1
14130: PUSH
14131: EMPTY
14132: LIST
14133: LIST
14134: PPUSH
14135: CALL_OW 70
14139: PUSH
14140: FOR_IN
14141: IFFALSE 14165
// if GetLives ( i ) then
14143: LD_VAR 0 1
14147: PPUSH
14148: CALL_OW 256
14152: IFFALSE 14163
// KillUnit ( i ) ;
14154: LD_VAR 0 1
14158: PPUSH
14159: CALL_OW 66
14163: GO 14140
14165: POP
14166: POP
// end ;
14167: PPOPN 2
14169: END
// on ArtifactResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
14170: LD_VAR 0 1
14174: PPUSH
14175: CALL_OW 255
14179: PUSH
14180: LD_OWVAR 2
14184: EQUAL
14185: IFFALSE 14195
// player_res_art := true ;
14187: LD_ADDR_EXP 6
14191: PUSH
14192: LD_INT 1
14194: ST_TO_ADDR
// end ;
14195: PPOPN 1
14197: END
// every 0 0$03 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) and player_res_art do var xy , lab ;
14198: LD_INT 22
14200: PUSH
14201: LD_OWVAR 2
14205: PUSH
14206: EMPTY
14207: LIST
14208: LIST
14209: PUSH
14210: LD_INT 2
14212: PUSH
14213: LD_INT 30
14215: PUSH
14216: LD_INT 7
14218: PUSH
14219: EMPTY
14220: LIST
14221: LIST
14222: PUSH
14223: LD_INT 30
14225: PUSH
14226: LD_INT 8
14228: PUSH
14229: EMPTY
14230: LIST
14231: LIST
14232: PUSH
14233: LD_INT 30
14235: PUSH
14236: LD_INT 11
14238: PUSH
14239: EMPTY
14240: LIST
14241: LIST
14242: PUSH
14243: EMPTY
14244: LIST
14245: LIST
14246: LIST
14247: LIST
14248: PUSH
14249: EMPTY
14250: LIST
14251: LIST
14252: PPUSH
14253: CALL_OW 69
14257: PUSH
14258: LD_EXP 6
14262: AND
14263: IFFALSE 14620
14265: GO 14267
14267: DISABLE
14268: LD_INT 0
14270: PPUSH
14271: PPUSH
// begin enable ;
14272: ENABLE
// xy := FindArtifact ( 1 ) ;
14273: LD_ADDR_VAR 0 1
14277: PUSH
14278: LD_INT 1
14280: PPUSH
14281: CALL_OW 469
14285: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_siberium ] ] ] ) , xy [ 1 ] , xy [ 2 ] ) ;
14286: LD_ADDR_VAR 0 2
14290: PUSH
14291: LD_INT 22
14293: PUSH
14294: LD_OWVAR 2
14298: PUSH
14299: EMPTY
14300: LIST
14301: LIST
14302: PUSH
14303: LD_INT 2
14305: PUSH
14306: LD_INT 30
14308: PUSH
14309: LD_INT 8
14311: PUSH
14312: EMPTY
14313: LIST
14314: LIST
14315: PUSH
14316: LD_INT 30
14318: PUSH
14319: LD_INT 7
14321: PUSH
14322: EMPTY
14323: LIST
14324: LIST
14325: PUSH
14326: LD_INT 30
14328: PUSH
14329: LD_INT 11
14331: PUSH
14332: EMPTY
14333: LIST
14334: LIST
14335: PUSH
14336: EMPTY
14337: LIST
14338: LIST
14339: LIST
14340: LIST
14341: PUSH
14342: EMPTY
14343: LIST
14344: LIST
14345: PPUSH
14346: CALL_OW 69
14350: PPUSH
14351: LD_VAR 0 1
14355: PUSH
14356: LD_INT 1
14358: ARRAY
14359: PPUSH
14360: LD_VAR 0 1
14364: PUSH
14365: LD_INT 2
14367: ARRAY
14368: PPUSH
14369: CALL_OW 73
14373: ST_TO_ADDR
// if player_artifact_ready = false then
14374: LD_EXP 8
14378: PUSH
14379: LD_INT 0
14381: EQUAL
14382: IFFALSE 14496
// if GetDistUnitXY ( lab , xy [ 1 ] , xy [ 2 ] ) < 6 then
14384: LD_VAR 0 2
14388: PPUSH
14389: LD_VAR 0 1
14393: PUSH
14394: LD_INT 1
14396: ARRAY
14397: PPUSH
14398: LD_VAR 0 1
14402: PUSH
14403: LD_INT 2
14405: ARRAY
14406: PPUSH
14407: CALL_OW 297
14411: PUSH
14412: LD_INT 6
14414: LESS
14415: IFFALSE 14476
// begin if BuildingStatus ( lab ) = bs_idle then
14417: LD_VAR 0 2
14421: PPUSH
14422: CALL_OW 461
14426: PUSH
14427: LD_INT 2
14429: EQUAL
14430: IFFALSE 14454
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) else
14432: LD_OWVAR 2
14436: PPUSH
14437: LD_INT 1
14439: PPUSH
14440: LD_INT 2
14442: PPUSH
14443: LD_VAR 0 2
14447: PPUSH
14448: CALL_OW 468
14452: GO 14474
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
14454: LD_OWVAR 2
14458: PPUSH
14459: LD_INT 1
14461: PPUSH
14462: LD_INT 1
14464: PPUSH
14465: LD_VAR 0 2
14469: PPUSH
14470: CALL_OW 468
// end else
14474: GO 14496
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
14476: LD_OWVAR 2
14480: PPUSH
14481: LD_INT 1
14483: PPUSH
14484: LD_INT 1
14486: PPUSH
14487: LD_VAR 0 2
14491: PPUSH
14492: CALL_OW 468
// if player_artifact_ready then
14496: LD_EXP 8
14500: IFFALSE 14620
// if GetDistUnitXY ( lab , xy [ 1 ] , xy [ 2 ] ) < 6 then
14502: LD_VAR 0 2
14506: PPUSH
14507: LD_VAR 0 1
14511: PUSH
14512: LD_INT 1
14514: ARRAY
14515: PPUSH
14516: LD_VAR 0 1
14520: PUSH
14521: LD_INT 2
14523: ARRAY
14524: PPUSH
14525: CALL_OW 297
14529: PUSH
14530: LD_INT 6
14532: LESS
14533: IFFALSE 14598
// begin if BuildingStatus ( lab ) = bs_idle then
14535: LD_VAR 0 2
14539: PPUSH
14540: CALL_OW 461
14544: PUSH
14545: LD_INT 2
14547: EQUAL
14548: IFFALSE 14574
// SetArtifactUse ( your_side , art_icon , art_unit , lab ) else
14550: LD_OWVAR 2
14554: PPUSH
14555: LD_EXP 9
14559: PPUSH
14560: LD_INT 4
14562: PPUSH
14563: LD_VAR 0 2
14567: PPUSH
14568: CALL_OW 468
14572: GO 14596
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
14574: LD_OWVAR 2
14578: PPUSH
14579: LD_EXP 9
14583: PPUSH
14584: LD_INT 1
14586: PPUSH
14587: LD_VAR 0 2
14591: PPUSH
14592: CALL_OW 468
// end else
14596: GO 14620
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
14598: LD_OWVAR 2
14602: PPUSH
14603: LD_EXP 9
14607: PPUSH
14608: LD_INT 1
14610: PPUSH
14611: LD_VAR 0 2
14615: PPUSH
14616: CALL_OW 468
// end ;
14620: PPOPN 2
14622: END
// on ArtifactUsed ( s , icon , cr1 , cr2 ) do var xy , i , lab , side ;
14623: LD_INT 0
14625: PPUSH
14626: PPUSH
14627: PPUSH
14628: PPUSH
// begin xy := FindArtifact ( 1 ) ;
14629: LD_ADDR_VAR 0 5
14633: PUSH
14634: LD_INT 1
14636: PPUSH
14637: CALL_OW 469
14641: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , xy [ 1 ] , xy [ 2 ] ) ;
14642: LD_ADDR_VAR 0 7
14646: PUSH
14647: LD_INT 22
14649: PUSH
14650: LD_OWVAR 2
14654: PUSH
14655: EMPTY
14656: LIST
14657: LIST
14658: PUSH
14659: LD_INT 2
14661: PUSH
14662: LD_INT 30
14664: PUSH
14665: LD_INT 8
14667: PUSH
14668: EMPTY
14669: LIST
14670: LIST
14671: PUSH
14672: LD_INT 30
14674: PUSH
14675: LD_INT 11
14677: PUSH
14678: EMPTY
14679: LIST
14680: LIST
14681: PUSH
14682: EMPTY
14683: LIST
14684: LIST
14685: LIST
14686: PUSH
14687: EMPTY
14688: LIST
14689: LIST
14690: PPUSH
14691: CALL_OW 69
14695: PPUSH
14696: LD_VAR 0 5
14700: PUSH
14701: LD_INT 1
14703: ARRAY
14704: PPUSH
14705: LD_VAR 0 5
14709: PUSH
14710: LD_INT 2
14712: ARRAY
14713: PPUSH
14714: CALL_OW 73
14718: ST_TO_ADDR
// if icon = art_exp_left then
14719: LD_VAR 0 2
14723: PUSH
14724: LD_INT 1
14726: EQUAL
14727: IFFALSE 14780
// begin SetSpecResearch ( lab , time_res_art , true ) ;
14729: LD_VAR 0 7
14733: PPUSH
14734: LD_EXP 10
14738: PPUSH
14739: LD_INT 1
14741: PPUSH
14742: CALL_OW 486
// SetWorkingProgress ( lab , artifact_progress ) ;
14746: LD_VAR 0 7
14750: PPUSH
14751: LD_EXP 7
14755: PPUSH
14756: CALL_OW 329
// SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
14760: LD_OWVAR 2
14764: PPUSH
14765: LD_INT 1
14767: PPUSH
14768: LD_INT 0
14770: PPUSH
14771: LD_VAR 0 7
14775: PPUSH
14776: CALL_OW 468
// end ; if icon = art_icon then
14780: LD_VAR 0 2
14784: PUSH
14785: LD_EXP 9
14789: EQUAL
14790: IFFALSE 15001
// begin if cr1 in FilterAllUnits ( [ f_type , unit_building ] ) then
14792: LD_VAR 0 3
14796: PUSH
14797: LD_INT 21
14799: PUSH
14800: LD_INT 3
14802: PUSH
14803: EMPTY
14804: LIST
14805: LIST
14806: PPUSH
14807: CALL_OW 69
14811: IN
14812: IFFALSE 15001
// begin side := GetSide ( cr1 ) ;
14814: LD_ADDR_VAR 0 8
14818: PUSH
14819: LD_VAR 0 3
14823: PPUSH
14824: CALL_OW 255
14828: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_siberite_power ] ] ) > 0 then
14829: LD_INT 22
14831: PUSH
14832: LD_VAR 0 8
14836: PUSH
14837: EMPTY
14838: LIST
14839: LIST
14840: PUSH
14841: LD_INT 30
14843: PUSH
14844: LD_INT 28
14846: PUSH
14847: EMPTY
14848: LIST
14849: LIST
14850: PUSH
14851: EMPTY
14852: LIST
14853: LIST
14854: PPUSH
14855: CALL_OW 69
14859: PUSH
14860: LD_INT 0
14862: GREATER
14863: IFFALSE 15001
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_solar_power ] , [ f_btype , b_siberite_power ] ] ] ) do
14865: LD_ADDR_VAR 0 6
14869: PUSH
14870: LD_INT 22
14872: PUSH
14873: LD_VAR 0 8
14877: PUSH
14878: EMPTY
14879: LIST
14880: LIST
14881: PUSH
14882: LD_INT 2
14884: PUSH
14885: LD_INT 30
14887: PUSH
14888: LD_INT 26
14890: PUSH
14891: EMPTY
14892: LIST
14893: LIST
14894: PUSH
14895: LD_INT 30
14897: PUSH
14898: LD_INT 27
14900: PUSH
14901: EMPTY
14902: LIST
14903: LIST
14904: PUSH
14905: LD_INT 30
14907: PUSH
14908: LD_INT 28
14910: PUSH
14911: EMPTY
14912: LIST
14913: LIST
14914: PUSH
14915: EMPTY
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: PUSH
14921: EMPTY
14922: LIST
14923: LIST
14924: PPUSH
14925: CALL_OW 69
14929: PUSH
14930: FOR_IN
14931: IFFALSE 14944
// KillUnit ( i ) ;
14933: LD_VAR 0 6
14937: PPUSH
14938: CALL_OW 66
14942: GO 14930
14944: POP
14945: POP
// player_res_art := false ;
14946: LD_ADDR_EXP 6
14950: PUSH
14951: LD_INT 0
14953: ST_TO_ADDR
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
14954: LD_OWVAR 2
14958: PPUSH
14959: LD_EXP 9
14963: PPUSH
14964: LD_INT 1
14966: PPUSH
14967: LD_VAR 0 7
14971: PPUSH
14972: CALL_OW 468
// wait ( time_to_reuse ) ;
14976: LD_EXP 12
14980: PPUSH
14981: CALL_OW 67
// player_res_art := true ;
14985: LD_ADDR_EXP 6
14989: PUSH
14990: LD_INT 1
14992: ST_TO_ADDR
// medal_enabled := true ;
14993: LD_ADDR_EXP 14
14997: PUSH
14998: LD_INT 1
15000: ST_TO_ADDR
// end ; end ; end ; end ;
15001: PPOPN 8
15003: END
// on SpecResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
15004: LD_VAR 0 1
15008: PPUSH
15009: CALL_OW 255
15013: PUSH
15014: LD_OWVAR 2
15018: EQUAL
15019: IFFALSE 15056
// begin SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
15021: LD_OWVAR 2
15025: PPUSH
15026: LD_INT 1
15028: PPUSH
15029: LD_INT 0
15031: PPUSH
15032: LD_VAR 0 1
15036: PPUSH
15037: CALL_OW 468
// player_artifact_ready := true ;
15041: LD_ADDR_EXP 8
15045: PUSH
15046: LD_INT 1
15048: ST_TO_ADDR
// Hint ( ArtVulcano ) ;
15049: LD_STRING ArtVulcano
15051: PPUSH
15052: CALL_OW 339
// end ; end ;
15056: PPOPN 1
15058: END
// on SpecResearchCancel ( lab , progress ) do begin artifact_progress := progress ;
15059: LD_ADDR_EXP 7
15063: PUSH
15064: LD_VAR 0 2
15068: ST_TO_ADDR
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) ;
15069: LD_OWVAR 2
15073: PPUSH
15074: LD_INT 1
15076: PPUSH
15077: LD_INT 2
15079: PPUSH
15080: LD_VAR 0 1
15084: PPUSH
15085: CALL_OW 468
// end ; end_of_file
15089: PPOPN 2
15091: END
// every 0 0$01 do
15092: GO 15094
15094: DISABLE
// begin enable ;
15095: ENABLE
// Display_Strings := [ #tick , tick ] ;
15096: LD_ADDR_OWVAR 47
15100: PUSH
15101: LD_STRING #tick
15103: PUSH
15104: LD_OWVAR 1
15108: PUSH
15109: EMPTY
15110: LIST
15111: LIST
15112: ST_TO_ADDR
// end ; end_of_file
15113: END
// export al_commander , al_force , al_skill ; export function PrepareAlliance ; var i , filter , un , team ; begin
15114: LD_INT 0
15116: PPUSH
15117: PPUSH
15118: PPUSH
15119: PPUSH
15120: PPUSH
// al_skill := [ 7 , 6 , 5 ] [ Difficulty ] ;
15121: LD_ADDR_EXP 44
15125: PUSH
15126: LD_INT 7
15128: PUSH
15129: LD_INT 6
15131: PUSH
15132: LD_INT 5
15134: PUSH
15135: EMPTY
15136: LIST
15137: LIST
15138: LIST
15139: PUSH
15140: LD_OWVAR 67
15144: ARRAY
15145: ST_TO_ADDR
// al_force := [ ] ;
15146: LD_ADDR_EXP 43
15150: PUSH
15151: EMPTY
15152: ST_TO_ADDR
// RemoveAlliance ;
15153: CALL 15531 0 0
// ResetFog ;
15157: CALL_OW 335
// your_side := 7 ;
15161: LD_ADDR_OWVAR 2
15165: PUSH
15166: LD_INT 7
15168: ST_TO_ADDR
// uc_side := 7 ;
15169: LD_ADDR_OWVAR 20
15173: PUSH
15174: LD_INT 7
15176: ST_TO_ADDR
// hc_gallery :=  ;
15177: LD_ADDR_OWVAR 33
15181: PUSH
15182: LD_STRING 
15184: ST_TO_ADDR
// hc_name :=  ;
15185: LD_ADDR_OWVAR 26
15189: PUSH
15190: LD_STRING 
15192: ST_TO_ADDR
// hc_importance := 0 ;
15193: LD_ADDR_OWVAR 32
15197: PUSH
15198: LD_INT 0
15200: ST_TO_ADDR
// for i = 1 to 17 do
15201: LD_ADDR_VAR 0 2
15205: PUSH
15206: DOUBLE
15207: LD_INT 1
15209: DEC
15210: ST_TO_ADDR
15211: LD_INT 17
15213: PUSH
15214: FOR_TO
15215: IFFALSE 15295
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
15217: LD_ADDR_OWVAR 21
15221: PUSH
15222: LD_INT 1
15224: PUSH
15225: LD_INT 3
15227: PUSH
15228: EMPTY
15229: LIST
15230: LIST
15231: PUSH
15232: LD_INT 1
15234: PPUSH
15235: LD_INT 2
15237: PPUSH
15238: CALL_OW 12
15242: ARRAY
15243: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , al_skill ) ;
15244: LD_INT 0
15246: PPUSH
15247: LD_INT 1
15249: PPUSH
15250: LD_INT 4
15252: PPUSH
15253: CALL_OW 12
15257: PPUSH
15258: LD_EXP 44
15262: PPUSH
15263: CALL_OW 380
// un := CreateHuman ;
15267: LD_ADDR_VAR 0 4
15271: PUSH
15272: CALL_OW 44
15276: ST_TO_ADDR
// al_force := al_force ^ un ;
15277: LD_ADDR_EXP 43
15281: PUSH
15282: LD_EXP 43
15286: PUSH
15287: LD_VAR 0 4
15291: ADD
15292: ST_TO_ADDR
// end ;
15293: GO 15214
15295: POP
15296: POP
// hc_importance := 100 ;
15297: LD_ADDR_OWVAR 32
15301: PUSH
15302: LD_INT 100
15304: ST_TO_ADDR
// uc_nation := 1 ;
15305: LD_ADDR_OWVAR 21
15309: PUSH
15310: LD_INT 1
15312: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , al_skill ) ;
15313: LD_INT 1
15315: PPUSH
15316: LD_INT 1
15318: PPUSH
15319: LD_EXP 44
15323: PPUSH
15324: CALL_OW 380
// al_commander := CreateHuman ;
15328: LD_ADDR_EXP 42
15332: PUSH
15333: CALL_OW 44
15337: ST_TO_ADDR
// player_commander := al_commander ;
15338: LD_ADDR_EXP 11
15342: PUSH
15343: LD_EXP 42
15347: ST_TO_ADDR
// team := CharacterSelection ( text , [ 9 , 9 , 8 ] [ Difficulty ] , [ 9 , 9 , 8 ] [ Difficulty ] , [ sel_change_class , al_commander , sel_changeable , sel_not_hired ] ^ al_force , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , class_bazooker , class_sniper ] ) ;
15348: LD_ADDR_VAR 0 5
15352: PUSH
15353: LD_STRING text
15355: PPUSH
15356: LD_INT 9
15358: PUSH
15359: LD_INT 9
15361: PUSH
15362: LD_INT 8
15364: PUSH
15365: EMPTY
15366: LIST
15367: LIST
15368: LIST
15369: PUSH
15370: LD_OWVAR 67
15374: ARRAY
15375: PPUSH
15376: LD_INT 9
15378: PUSH
15379: LD_INT 9
15381: PUSH
15382: LD_INT 8
15384: PUSH
15385: EMPTY
15386: LIST
15387: LIST
15388: LIST
15389: PUSH
15390: LD_OWVAR 67
15394: ARRAY
15395: PPUSH
15396: LD_INT -5
15398: PUSH
15399: LD_EXP 42
15403: PUSH
15404: LD_INT -3
15406: PUSH
15407: LD_INT -2
15409: PUSH
15410: EMPTY
15411: LIST
15412: LIST
15413: LIST
15414: LIST
15415: PUSH
15416: LD_EXP 43
15420: ADD
15421: PPUSH
15422: LD_INT 1
15424: PUSH
15425: LD_INT 3
15427: PUSH
15428: LD_INT 2
15430: PUSH
15431: LD_INT 1
15433: PUSH
15434: EMPTY
15435: LIST
15436: LIST
15437: PUSH
15438: LD_INT 4
15440: PUSH
15441: LD_INT 1
15443: PUSH
15444: EMPTY
15445: LIST
15446: LIST
15447: PUSH
15448: LD_INT 9
15450: PUSH
15451: LD_INT 5
15453: PUSH
15454: EMPTY
15455: LIST
15456: LIST
15457: LIST
15458: LIST
15459: LIST
15460: LIST
15461: PPUSH
15462: CALL_OW 42
15466: ST_TO_ADDR
// team := team ^ al_commander ;
15467: LD_ADDR_VAR 0 5
15471: PUSH
15472: LD_VAR 0 5
15476: PUSH
15477: LD_EXP 42
15481: ADD
15482: ST_TO_ADDR
// for i = 1 to team do
15483: LD_ADDR_VAR 0 2
15487: PUSH
15488: DOUBLE
15489: LD_INT 1
15491: DEC
15492: ST_TO_ADDR
15493: LD_VAR 0 5
15497: PUSH
15498: FOR_TO
15499: IFFALSE 15524
// PlaceUnitArea ( team [ i ] , south_resp , false ) ;
15501: LD_VAR 0 5
15505: PUSH
15506: LD_VAR 0 2
15510: ARRAY
15511: PPUSH
15512: LD_INT 15
15514: PPUSH
15515: LD_INT 0
15517: PPUSH
15518: CALL_OW 49
15522: GO 15498
15524: POP
15525: POP
// end ;
15526: LD_VAR 0 1
15530: RET
// export function RemoveAlliance ; var i ; begin
15531: LD_INT 0
15533: PPUSH
15534: PPUSH
// DestroyUnit ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
15535: LD_INT 22
15537: PUSH
15538: LD_INT 7
15540: PUSH
15541: EMPTY
15542: LIST
15543: LIST
15544: PUSH
15545: LD_INT 30
15547: PUSH
15548: LD_INT 1
15550: PUSH
15551: EMPTY
15552: LIST
15553: LIST
15554: PUSH
15555: EMPTY
15556: LIST
15557: LIST
15558: PPUSH
15559: CALL_OW 69
15563: PUSH
15564: LD_INT 1
15566: ARRAY
15567: PPUSH
15568: CALL_OW 65
// for i in FilterAllUnits ( [ f_side , 7 ] ) do
15572: LD_ADDR_VAR 0 2
15576: PUSH
15577: LD_INT 22
15579: PUSH
15580: LD_INT 7
15582: PUSH
15583: EMPTY
15584: LIST
15585: LIST
15586: PPUSH
15587: CALL_OW 69
15591: PUSH
15592: FOR_IN
15593: IFFALSE 15606
// RemoveUnit ( i ) ;
15595: LD_VAR 0 2
15599: PPUSH
15600: CALL_OW 64
15604: GO 15592
15606: POP
15607: POP
// end ;
15608: LD_VAR 0 1
15612: RET
// export function PrepareAllianceAI ; var i , un , b ; begin
15613: LD_INT 0
15615: PPUSH
15616: PPUSH
15617: PPUSH
15618: PPUSH
// SetTech ( tech_lapser , 7 , state_researched ) ;
15619: LD_INT 31
15621: PPUSH
15622: LD_INT 7
15624: PPUSH
15625: LD_INT 2
15627: PPUSH
15628: CALL_OW 322
// SetTech ( tech_ai , 7 , state_researched ) ;
15632: LD_INT 32
15634: PPUSH
15635: LD_INT 7
15637: PPUSH
15638: LD_INT 2
15640: PPUSH
15641: CALL_OW 322
// SetTech ( tech_comp3 , 7 , state_researched ) ;
15645: LD_INT 59
15647: PPUSH
15648: LD_INT 7
15650: PPUSH
15651: LD_INT 2
15653: PPUSH
15654: CALL_OW 322
// al_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
15658: LD_ADDR_EXP 44
15662: PUSH
15663: LD_INT 5
15665: PUSH
15666: LD_INT 6
15668: PUSH
15669: LD_INT 7
15671: PUSH
15672: EMPTY
15673: LIST
15674: LIST
15675: LIST
15676: PUSH
15677: LD_OWVAR 67
15681: ARRAY
15682: ST_TO_ADDR
// al_force := [ ] ;
15683: LD_ADDR_EXP 43
15687: PUSH
15688: EMPTY
15689: ST_TO_ADDR
// al_vehs := [ ] ;
15690: LD_ADDR_EXP 49
15694: PUSH
15695: EMPTY
15696: ST_TO_ADDR
// uc_side := 7 ;
15697: LD_ADDR_OWVAR 20
15701: PUSH
15702: LD_INT 7
15704: ST_TO_ADDR
// uc_nation := 1 ;
15705: LD_ADDR_OWVAR 21
15709: PUSH
15710: LD_INT 1
15712: ST_TO_ADDR
// bc_type := b_oil_mine ;
15713: LD_ADDR_OWVAR 42
15717: PUSH
15718: LD_INT 29
15720: ST_TO_ADDR
// b := CreateBuilding ;
15721: LD_ADDR_VAR 0 4
15725: PUSH
15726: CALL_OW 46
15730: ST_TO_ADDR
// PlaceUnitXYR ( b , 61 , 7 , 0 , false ) ;
15731: LD_VAR 0 4
15735: PPUSH
15736: LD_INT 61
15738: PPUSH
15739: LD_INT 7
15741: PPUSH
15742: LD_INT 0
15744: PPUSH
15745: LD_INT 0
15747: PPUSH
15748: CALL_OW 50
// bc_type := b_siberite_mine ;
15752: LD_ADDR_OWVAR 42
15756: PUSH
15757: LD_INT 30
15759: ST_TO_ADDR
// b := CreateBuilding ;
15760: LD_ADDR_VAR 0 4
15764: PUSH
15765: CALL_OW 46
15769: ST_TO_ADDR
// PlaceUnitXYR ( b , 69 , 13 , 0 , false ) ;
15770: LD_VAR 0 4
15774: PPUSH
15775: LD_INT 69
15777: PPUSH
15778: LD_INT 13
15780: PPUSH
15781: LD_INT 0
15783: PPUSH
15784: LD_INT 0
15786: PPUSH
15787: CALL_OW 50
// hc_gallery :=  ;
15791: LD_ADDR_OWVAR 33
15795: PUSH
15796: LD_STRING 
15798: ST_TO_ADDR
// hc_name :=  ;
15799: LD_ADDR_OWVAR 26
15803: PUSH
15804: LD_STRING 
15806: ST_TO_ADDR
// hc_importance := 0 ;
15807: LD_ADDR_OWVAR 32
15811: PUSH
15812: LD_INT 0
15814: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_bunker ] ] ) do
15815: LD_ADDR_VAR 0 2
15819: PUSH
15820: LD_INT 22
15822: PUSH
15823: LD_INT 7
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: PUSH
15830: LD_INT 30
15832: PUSH
15833: LD_INT 32
15835: PUSH
15836: EMPTY
15837: LIST
15838: LIST
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: PPUSH
15844: CALL_OW 69
15848: PUSH
15849: FOR_IN
15850: IFFALSE 15920
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
15852: LD_ADDR_OWVAR 21
15856: PUSH
15857: LD_INT 1
15859: PUSH
15860: LD_INT 3
15862: PUSH
15863: EMPTY
15864: LIST
15865: LIST
15866: PUSH
15867: LD_INT 1
15869: PPUSH
15870: LD_INT 2
15872: PPUSH
15873: CALL_OW 12
15877: ARRAY
15878: ST_TO_ADDR
// PrepareHuman ( false , 1 , al_skill ) ;
15879: LD_INT 0
15881: PPUSH
15882: LD_INT 1
15884: PPUSH
15885: LD_EXP 44
15889: PPUSH
15890: CALL_OW 380
// un := CreateHuman ;
15894: LD_ADDR_VAR 0 3
15898: PUSH
15899: CALL_OW 44
15903: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
15904: LD_VAR 0 3
15908: PPUSH
15909: LD_VAR 0 2
15913: PPUSH
15914: CALL_OW 52
// end ;
15918: GO 15849
15920: POP
15921: POP
// for i = 1 to 3 do
15922: LD_ADDR_VAR 0 2
15926: PUSH
15927: DOUBLE
15928: LD_INT 1
15930: DEC
15931: ST_TO_ADDR
15932: LD_INT 3
15934: PUSH
15935: FOR_TO
15936: IFFALSE 16004
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
15938: LD_ADDR_OWVAR 21
15942: PUSH
15943: LD_INT 1
15945: PUSH
15946: LD_INT 3
15948: PUSH
15949: EMPTY
15950: LIST
15951: LIST
15952: PUSH
15953: LD_INT 1
15955: PPUSH
15956: LD_INT 2
15958: PPUSH
15959: CALL_OW 12
15963: ARRAY
15964: ST_TO_ADDR
// PrepareHuman ( false , 4 , al_skill ) ;
15965: LD_INT 0
15967: PPUSH
15968: LD_INT 4
15970: PPUSH
15971: LD_EXP 44
15975: PPUSH
15976: CALL_OW 380
// un := CreateHuman ;
15980: LD_ADDR_VAR 0 3
15984: PUSH
15985: CALL_OW 44
15989: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_lab1 ) ;
15990: LD_VAR 0 3
15994: PPUSH
15995: LD_INT 164
15997: PPUSH
15998: CALL_OW 52
// end ;
16002: GO 15935
16004: POP
16005: POP
// for i = 1 to 4 do
16006: LD_ADDR_VAR 0 2
16010: PUSH
16011: DOUBLE
16012: LD_INT 1
16014: DEC
16015: ST_TO_ADDR
16016: LD_INT 4
16018: PUSH
16019: FOR_TO
16020: IFFALSE 16111
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
16022: LD_ADDR_OWVAR 21
16026: PUSH
16027: LD_INT 1
16029: PUSH
16030: LD_INT 3
16032: PUSH
16033: EMPTY
16034: LIST
16035: LIST
16036: PUSH
16037: LD_INT 1
16039: PPUSH
16040: LD_INT 2
16042: PPUSH
16043: CALL_OW 12
16047: ARRAY
16048: ST_TO_ADDR
// PrepareHuman ( false , [ class_sniper , class_bazooker , class_bazooker ] [ Rand ( 1 , 3 ) ] , al_skill ) ;
16049: LD_INT 0
16051: PPUSH
16052: LD_INT 5
16054: PUSH
16055: LD_INT 9
16057: PUSH
16058: LD_INT 9
16060: PUSH
16061: EMPTY
16062: LIST
16063: LIST
16064: LIST
16065: PUSH
16066: LD_INT 1
16068: PPUSH
16069: LD_INT 3
16071: PPUSH
16072: CALL_OW 12
16076: ARRAY
16077: PPUSH
16078: LD_EXP 44
16082: PPUSH
16083: CALL_OW 380
// un := CreateHuman ;
16087: LD_ADDR_VAR 0 3
16091: PUSH
16092: CALL_OW 44
16096: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_bar ) ;
16097: LD_VAR 0 3
16101: PPUSH
16102: LD_INT 173
16104: PPUSH
16105: CALL_OW 52
// end ;
16109: GO 16019
16111: POP
16112: POP
// for i = 1 to 4 do
16113: LD_ADDR_VAR 0 2
16117: PUSH
16118: DOUBLE
16119: LD_INT 1
16121: DEC
16122: ST_TO_ADDR
16123: LD_INT 4
16125: PUSH
16126: FOR_TO
16127: IFFALSE 16225
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
16129: LD_ADDR_OWVAR 21
16133: PUSH
16134: LD_INT 1
16136: PUSH
16137: LD_INT 3
16139: PUSH
16140: EMPTY
16141: LIST
16142: LIST
16143: PUSH
16144: LD_INT 1
16146: PPUSH
16147: LD_INT 2
16149: PPUSH
16150: CALL_OW 12
16154: ARRAY
16155: ST_TO_ADDR
// PrepareHuman ( false , 3 , al_skill ) ;
16156: LD_INT 0
16158: PPUSH
16159: LD_INT 3
16161: PPUSH
16162: LD_EXP 44
16166: PPUSH
16167: CALL_OW 380
// un := CreateHuman ;
16171: LD_ADDR_VAR 0 3
16175: PUSH
16176: CALL_OW 44
16180: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
16181: LD_VAR 0 3
16185: PPUSH
16186: LD_INT 22
16188: PUSH
16189: LD_INT 7
16191: PUSH
16192: EMPTY
16193: LIST
16194: LIST
16195: PUSH
16196: LD_INT 30
16198: PUSH
16199: LD_INT 3
16201: PUSH
16202: EMPTY
16203: LIST
16204: LIST
16205: PUSH
16206: EMPTY
16207: LIST
16208: LIST
16209: PPUSH
16210: CALL_OW 69
16214: PUSH
16215: LD_INT 1
16217: ARRAY
16218: PPUSH
16219: CALL_OW 52
// end ;
16223: GO 16126
16225: POP
16226: POP
// for i = 1 to 4 do
16227: LD_ADDR_VAR 0 2
16231: PUSH
16232: DOUBLE
16233: LD_INT 1
16235: DEC
16236: ST_TO_ADDR
16237: LD_INT 4
16239: PUSH
16240: FOR_TO
16241: IFFALSE 16309
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
16243: LD_ADDR_OWVAR 21
16247: PUSH
16248: LD_INT 1
16250: PUSH
16251: LD_INT 3
16253: PUSH
16254: EMPTY
16255: LIST
16256: LIST
16257: PUSH
16258: LD_INT 1
16260: PPUSH
16261: LD_INT 2
16263: PPUSH
16264: CALL_OW 12
16268: ARRAY
16269: ST_TO_ADDR
// PrepareHuman ( false , 2 , al_skill ) ;
16270: LD_INT 0
16272: PPUSH
16273: LD_INT 2
16275: PPUSH
16276: LD_EXP 44
16280: PPUSH
16281: CALL_OW 380
// un := CreateHuman ;
16285: LD_ADDR_VAR 0 3
16289: PUSH
16290: CALL_OW 44
16294: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_depot ) ;
16295: LD_VAR 0 3
16299: PPUSH
16300: LD_INT 162
16302: PPUSH
16303: CALL_OW 52
// end ;
16307: GO 16240
16309: POP
16310: POP
// uc_nation := 3 ;
16311: LD_ADDR_OWVAR 21
16315: PUSH
16316: LD_INT 3
16318: ST_TO_ADDR
// vc_chassis := ru_medium_wheeled ;
16319: LD_ADDR_OWVAR 37
16323: PUSH
16324: LD_INT 21
16326: ST_TO_ADDR
// vc_engine := engine_siberite ;
16327: LD_ADDR_OWVAR 39
16331: PUSH
16332: LD_INT 3
16334: ST_TO_ADDR
// vc_control := control_computer ;
16335: LD_ADDR_OWVAR 38
16339: PUSH
16340: LD_INT 3
16342: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
16343: LD_ADDR_OWVAR 40
16347: PUSH
16348: LD_INT 51
16350: ST_TO_ADDR
// PlaceUnitXY ( CreateVehicle , 49 , 13 , false ) ;
16351: CALL_OW 45
16355: PPUSH
16356: LD_INT 49
16358: PPUSH
16359: LD_INT 13
16361: PPUSH
16362: LD_INT 0
16364: PPUSH
16365: CALL_OW 48
// al_turrets := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_turret ] ] ) ;
16369: LD_ADDR_EXP 51
16373: PUSH
16374: LD_INT 22
16376: PUSH
16377: LD_INT 7
16379: PUSH
16380: EMPTY
16381: LIST
16382: LIST
16383: PUSH
16384: LD_INT 30
16386: PUSH
16387: LD_INT 33
16389: PUSH
16390: EMPTY
16391: LIST
16392: LIST
16393: PUSH
16394: EMPTY
16395: LIST
16396: LIST
16397: PPUSH
16398: CALL_OW 69
16402: ST_TO_ADDR
// for i = 1 to FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_btype , b_turret ] , [ f_bweapon , 0 ] ] ] ) do
16403: LD_ADDR_VAR 0 2
16407: PUSH
16408: DOUBLE
16409: LD_INT 1
16411: DEC
16412: ST_TO_ADDR
16413: LD_INT 22
16415: PUSH
16416: LD_INT 7
16418: PUSH
16419: EMPTY
16420: LIST
16421: LIST
16422: PUSH
16423: LD_INT 30
16425: PUSH
16426: LD_INT 33
16428: PUSH
16429: EMPTY
16430: LIST
16431: LIST
16432: PUSH
16433: LD_INT 35
16435: PUSH
16436: LD_INT 0
16438: PUSH
16439: EMPTY
16440: LIST
16441: LIST
16442: PUSH
16443: EMPTY
16444: LIST
16445: LIST
16446: LIST
16447: PUSH
16448: EMPTY
16449: LIST
16450: PPUSH
16451: CALL_OW 69
16455: PUSH
16456: FOR_TO
16457: IFFALSE 16517
// AddComPlaceWeapon ( FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_btype , b_turret ] , [ f_bweapon , 0 ] ] ] ) [ i ] , ru_time_lapser ) ;
16459: LD_INT 22
16461: PUSH
16462: LD_INT 7
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: PUSH
16469: LD_INT 30
16471: PUSH
16472: LD_INT 33
16474: PUSH
16475: EMPTY
16476: LIST
16477: LIST
16478: PUSH
16479: LD_INT 35
16481: PUSH
16482: LD_INT 0
16484: PUSH
16485: EMPTY
16486: LIST
16487: LIST
16488: PUSH
16489: EMPTY
16490: LIST
16491: LIST
16492: LIST
16493: PUSH
16494: EMPTY
16495: LIST
16496: PPUSH
16497: CALL_OW 69
16501: PUSH
16502: LD_VAR 0 2
16506: ARRAY
16507: PPUSH
16508: LD_INT 49
16510: PPUSH
16511: CALL_OW 208
16515: GO 16456
16517: POP
16518: POP
// end ;
16519: LD_VAR 0 1
16523: RET
// export al_eng , al_sold , al_mech , al_sci ; export al_vehs , al_cargo , al_turrets ; export al_dep , al_lab , al_fac ; export al_bul ; every 0 0$02 trigger your_side = 1 do var i , un , veh , cr ;
16524: LD_OWVAR 2
16528: PUSH
16529: LD_INT 1
16531: EQUAL
16532: IFFALSE 17518
16534: GO 16536
16536: DISABLE
16537: LD_INT 0
16539: PPUSH
16540: PPUSH
16541: PPUSH
16542: PPUSH
// begin enable ;
16543: ENABLE
// al_bul := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] ] ) ;
16544: LD_ADDR_EXP 55
16548: PUSH
16549: LD_INT 22
16551: PUSH
16552: LD_INT 7
16554: PUSH
16555: EMPTY
16556: LIST
16557: LIST
16558: PUSH
16559: LD_INT 21
16561: PUSH
16562: LD_INT 3
16564: PUSH
16565: EMPTY
16566: LIST
16567: LIST
16568: PUSH
16569: EMPTY
16570: LIST
16571: LIST
16572: PPUSH
16573: CALL_OW 69
16577: ST_TO_ADDR
// al_lab := [ al_lab1 , al_lab2 ] ;
16578: LD_ADDR_EXP 53
16582: PUSH
16583: LD_INT 164
16585: PUSH
16586: LD_INT 197
16588: PUSH
16589: EMPTY
16590: LIST
16591: LIST
16592: ST_TO_ADDR
// al_dep := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
16593: LD_ADDR_EXP 52
16597: PUSH
16598: LD_INT 22
16600: PUSH
16601: LD_INT 7
16603: PUSH
16604: EMPTY
16605: LIST
16606: LIST
16607: PUSH
16608: LD_INT 30
16610: PUSH
16611: LD_INT 1
16613: PUSH
16614: EMPTY
16615: LIST
16616: LIST
16617: PUSH
16618: EMPTY
16619: LIST
16620: LIST
16621: PPUSH
16622: CALL_OW 69
16626: PUSH
16627: LD_INT 1
16629: ARRAY
16630: ST_TO_ADDR
// al_fac := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
16631: LD_ADDR_EXP 54
16635: PUSH
16636: LD_INT 22
16638: PUSH
16639: LD_INT 7
16641: PUSH
16642: EMPTY
16643: LIST
16644: LIST
16645: PUSH
16646: LD_INT 30
16648: PUSH
16649: LD_INT 3
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: PUSH
16656: EMPTY
16657: LIST
16658: LIST
16659: PPUSH
16660: CALL_OW 69
16664: PUSH
16665: LD_INT 1
16667: ARRAY
16668: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) then
16669: LD_INT 22
16671: PUSH
16672: LD_INT 7
16674: PUSH
16675: EMPTY
16676: LIST
16677: LIST
16678: PUSH
16679: LD_INT 34
16681: PUSH
16682: LD_INT 51
16684: PUSH
16685: EMPTY
16686: LIST
16687: LIST
16688: PUSH
16689: EMPTY
16690: LIST
16691: LIST
16692: PPUSH
16693: CALL_OW 69
16697: IFFALSE 16737
// al_cargo := FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
16699: LD_ADDR_EXP 50
16703: PUSH
16704: LD_INT 22
16706: PUSH
16707: LD_INT 7
16709: PUSH
16710: EMPTY
16711: LIST
16712: LIST
16713: PUSH
16714: LD_INT 34
16716: PUSH
16717: LD_INT 51
16719: PUSH
16720: EMPTY
16721: LIST
16722: LIST
16723: PUSH
16724: EMPTY
16725: LIST
16726: LIST
16727: PPUSH
16728: CALL_OW 69
16732: PUSH
16733: LD_INT 1
16735: ARRAY
16736: ST_TO_ADDR
// al_sold := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , class_bazooker ] ] ) ;
16737: LD_ADDR_EXP 46
16741: PUSH
16742: LD_INT 22
16744: PUSH
16745: LD_INT 7
16747: PUSH
16748: EMPTY
16749: LIST
16750: LIST
16751: PUSH
16752: LD_INT 25
16754: PUSH
16755: LD_INT 9
16757: PUSH
16758: EMPTY
16759: LIST
16760: LIST
16761: PUSH
16762: EMPTY
16763: LIST
16764: LIST
16765: PPUSH
16766: CALL_OW 69
16770: ST_TO_ADDR
// al_eng := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 2 ] ] ) ;
16771: LD_ADDR_EXP 45
16775: PUSH
16776: LD_INT 22
16778: PUSH
16779: LD_INT 7
16781: PUSH
16782: EMPTY
16783: LIST
16784: LIST
16785: PUSH
16786: LD_INT 25
16788: PUSH
16789: LD_INT 2
16791: PUSH
16792: EMPTY
16793: LIST
16794: LIST
16795: PUSH
16796: EMPTY
16797: LIST
16798: LIST
16799: PPUSH
16800: CALL_OW 69
16804: ST_TO_ADDR
// al_mech := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 3 ] ] ) ;
16805: LD_ADDR_EXP 47
16809: PUSH
16810: LD_INT 22
16812: PUSH
16813: LD_INT 7
16815: PUSH
16816: EMPTY
16817: LIST
16818: LIST
16819: PUSH
16820: LD_INT 25
16822: PUSH
16823: LD_INT 3
16825: PUSH
16826: EMPTY
16827: LIST
16828: LIST
16829: PUSH
16830: EMPTY
16831: LIST
16832: LIST
16833: PPUSH
16834: CALL_OW 69
16838: ST_TO_ADDR
// al_sci := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 4 ] ] ) ;
16839: LD_ADDR_EXP 48
16843: PUSH
16844: LD_INT 22
16846: PUSH
16847: LD_INT 7
16849: PUSH
16850: EMPTY
16851: LIST
16852: LIST
16853: PUSH
16854: LD_INT 25
16856: PUSH
16857: LD_INT 4
16859: PUSH
16860: EMPTY
16861: LIST
16862: LIST
16863: PUSH
16864: EMPTY
16865: LIST
16866: LIST
16867: PPUSH
16868: CALL_OW 69
16872: ST_TO_ADDR
// if not HasTask ( al_cargo ) and GetCargo ( al_cargo , mat_cans ) < 100 then
16873: LD_EXP 50
16877: PPUSH
16878: CALL_OW 314
16882: NOT
16883: PUSH
16884: LD_EXP 50
16888: PPUSH
16889: LD_INT 1
16891: PPUSH
16892: CALL_OW 289
16896: PUSH
16897: LD_INT 100
16899: LESS
16900: AND
16901: IFFALSE 16949
// begin cr := GetListOfCratesInArea ( us_crates ) ;
16903: LD_ADDR_VAR 0 4
16907: PUSH
16908: LD_INT 12
16910: PPUSH
16911: CALL_OW 435
16915: ST_TO_ADDR
// if cr then
16916: LD_VAR 0 4
16920: IFFALSE 16949
// ComCollect ( al_cargo , cr [ 1 ] , cr [ 2 ] ) ;
16922: LD_EXP 50
16926: PPUSH
16927: LD_VAR 0 4
16931: PUSH
16932: LD_INT 1
16934: ARRAY
16935: PPUSH
16936: LD_VAR 0 4
16940: PUSH
16941: LD_INT 2
16943: ARRAY
16944: PPUSH
16945: CALL_OW 117
// end ; if UnitFilter ( al_bul , [ f_not , [ f_lives , 1000 ] ] ) then
16949: LD_EXP 55
16953: PPUSH
16954: LD_INT 3
16956: PUSH
16957: LD_INT 24
16959: PUSH
16960: LD_INT 1000
16962: PUSH
16963: EMPTY
16964: LIST
16965: LIST
16966: PUSH
16967: EMPTY
16968: LIST
16969: LIST
16970: PPUSH
16971: CALL_OW 72
16975: IFFALSE 17105
// begin if al_eng then
16977: LD_EXP 45
16981: IFFALSE 17103
// for i = 1 to al_eng do
16983: LD_ADDR_VAR 0 1
16987: PUSH
16988: DOUBLE
16989: LD_INT 1
16991: DEC
16992: ST_TO_ADDR
16993: LD_EXP 45
16997: PUSH
16998: FOR_TO
16999: IFFALSE 17101
// if IsInUnit ( al_eng [ i ] ) then
17001: LD_EXP 45
17005: PUSH
17006: LD_VAR 0 1
17010: ARRAY
17011: PPUSH
17012: CALL_OW 310
17016: IFFALSE 17035
// ComExitBuilding ( al_eng [ i ] ) else
17018: LD_EXP 45
17022: PUSH
17023: LD_VAR 0 1
17027: ARRAY
17028: PPUSH
17029: CALL_OW 122
17033: GO 17099
// if not HasTask ( al_eng [ i ] ) then
17035: LD_EXP 45
17039: PUSH
17040: LD_VAR 0 1
17044: ARRAY
17045: PPUSH
17046: CALL_OW 314
17050: NOT
17051: IFFALSE 17099
// ComRepairBuilding ( al_eng [ i ] , UnitFilter ( al_bul , [ f_not , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
17053: LD_EXP 45
17057: PUSH
17058: LD_VAR 0 1
17062: ARRAY
17063: PPUSH
17064: LD_EXP 55
17068: PPUSH
17069: LD_INT 3
17071: PUSH
17072: LD_INT 24
17074: PUSH
17075: LD_INT 1000
17077: PUSH
17078: EMPTY
17079: LIST
17080: LIST
17081: PUSH
17082: EMPTY
17083: LIST
17084: LIST
17085: PPUSH
17086: CALL_OW 72
17090: PUSH
17091: LD_INT 1
17093: ARRAY
17094: PPUSH
17095: CALL_OW 130
17099: GO 16998
17101: POP
17102: POP
// end else
17103: GO 17187
// if al_eng then
17105: LD_EXP 45
17109: IFFALSE 17187
// if not IsInUnit ( al_eng [ 1 ] ) then
17111: LD_EXP 45
17115: PUSH
17116: LD_INT 1
17118: ARRAY
17119: PPUSH
17120: CALL_OW 310
17124: NOT
17125: IFFALSE 17187
// for i = 1 to al_eng do
17127: LD_ADDR_VAR 0 1
17131: PUSH
17132: DOUBLE
17133: LD_INT 1
17135: DEC
17136: ST_TO_ADDR
17137: LD_EXP 45
17141: PUSH
17142: FOR_TO
17143: IFFALSE 17185
// if not IsInUnit ( al_eng [ i ] ) then
17145: LD_EXP 45
17149: PUSH
17150: LD_VAR 0 1
17154: ARRAY
17155: PPUSH
17156: CALL_OW 310
17160: NOT
17161: IFFALSE 17183
// ComEnterUnit ( al_eng [ i ] , al_dep ) ;
17163: LD_EXP 45
17167: PUSH
17168: LD_VAR 0 1
17172: ARRAY
17173: PPUSH
17174: LD_EXP 52
17178: PPUSH
17179: CALL_OW 120
17183: GO 17142
17185: POP
17186: POP
// if al_vehs then
17187: LD_EXP 49
17191: IFFALSE 17291
// if BuildingStatus ( al_fac ) = bs_idle then
17193: LD_EXP 54
17197: PPUSH
17198: CALL_OW 461
17202: PUSH
17203: LD_INT 2
17205: EQUAL
17206: IFFALSE 17291
// begin ComConstruct ( al_fac , al_vehs [ 1 ] , al_vehs [ 2 ] , al_vehs [ 3 ] , al_vehs [ 4 ] ) ;
17208: LD_EXP 54
17212: PPUSH
17213: LD_EXP 49
17217: PUSH
17218: LD_INT 1
17220: ARRAY
17221: PPUSH
17222: LD_EXP 49
17226: PUSH
17227: LD_INT 2
17229: ARRAY
17230: PPUSH
17231: LD_EXP 49
17235: PUSH
17236: LD_INT 3
17238: ARRAY
17239: PPUSH
17240: LD_EXP 49
17244: PUSH
17245: LD_INT 4
17247: ARRAY
17248: PPUSH
17249: CALL_OW 125
// for i = 1 to 4 do
17253: LD_ADDR_VAR 0 1
17257: PUSH
17258: DOUBLE
17259: LD_INT 1
17261: DEC
17262: ST_TO_ADDR
17263: LD_INT 4
17265: PUSH
17266: FOR_TO
17267: IFFALSE 17289
// al_vehs := Delete ( al_vehs , 1 ) ;
17269: LD_ADDR_EXP 49
17273: PUSH
17274: LD_EXP 49
17278: PPUSH
17279: LD_INT 1
17281: PPUSH
17282: CALL_OW 3
17286: ST_TO_ADDR
17287: GO 17266
17289: POP
17290: POP
// end ; if al_force = 0 and tick mod 23100 = 0 then
17291: LD_EXP 43
17295: PUSH
17296: LD_INT 0
17298: EQUAL
17299: PUSH
17300: LD_OWVAR 1
17304: PUSH
17305: LD_INT 23100
17307: MOD
17308: PUSH
17309: LD_INT 0
17311: EQUAL
17312: AND
17313: IFFALSE 17427
// begin for i = 1 to [ 6 , 7 , 8 ] [ Difficulty ] do
17315: LD_ADDR_VAR 0 1
17319: PUSH
17320: DOUBLE
17321: LD_INT 1
17323: DEC
17324: ST_TO_ADDR
17325: LD_INT 6
17327: PUSH
17328: LD_INT 7
17330: PUSH
17331: LD_INT 8
17333: PUSH
17334: EMPTY
17335: LIST
17336: LIST
17337: LIST
17338: PUSH
17339: LD_OWVAR 67
17343: ARRAY
17344: PUSH
17345: FOR_TO
17346: IFFALSE 17425
// begin al_vehs := al_vehs ^ ru_heavy_wheeled ;
17348: LD_ADDR_EXP 49
17352: PUSH
17353: LD_EXP 49
17357: PUSH
17358: LD_INT 23
17360: ADD
17361: ST_TO_ADDR
// al_vehs := al_vehs ^ engine_combustion ;
17362: LD_ADDR_EXP 49
17366: PUSH
17367: LD_EXP 49
17371: PUSH
17372: LD_INT 1
17374: ADD
17375: ST_TO_ADDR
// al_vehs := al_vehs ^ control_computer ;
17376: LD_ADDR_EXP 49
17380: PUSH
17381: LD_EXP 49
17385: PUSH
17386: LD_INT 3
17388: ADD
17389: ST_TO_ADDR
// al_vehs := al_vehs ^ [ ru_heavy_gun , ru_rocket ] [ Rand ( 1 , 2 ) ] ;
17390: LD_ADDR_EXP 49
17394: PUSH
17395: LD_EXP 49
17399: PUSH
17400: LD_INT 46
17402: PUSH
17403: LD_INT 47
17405: PUSH
17406: EMPTY
17407: LIST
17408: LIST
17409: PUSH
17410: LD_INT 1
17412: PPUSH
17413: LD_INT 2
17415: PPUSH
17416: CALL_OW 12
17420: ARRAY
17421: ADD
17422: ST_TO_ADDR
// end ;
17423: GO 17345
17425: POP
17426: POP
// end ; if FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 then
17427: LD_INT 22
17429: PUSH
17430: LD_INT 7
17432: PUSH
17433: EMPTY
17434: LIST
17435: LIST
17436: PUSH
17437: LD_INT 34
17439: PUSH
17440: LD_INT 51
17442: PUSH
17443: EMPTY
17444: LIST
17445: LIST
17446: PUSH
17447: EMPTY
17448: LIST
17449: LIST
17450: PPUSH
17451: CALL_OW 69
17455: PUSH
17456: LD_INT 0
17458: EQUAL
17459: IFFALSE 17482
// ComConstruct ( al_fac , ru_medium_wheeled , engine_combustion , control_computer , ru_cargo_bay ) ;
17461: LD_EXP 54
17465: PPUSH
17466: LD_INT 21
17468: PPUSH
17469: LD_INT 1
17471: PPUSH
17472: LD_INT 3
17474: PPUSH
17475: LD_INT 51
17477: PPUSH
17478: CALL_OW 125
// if al_force >= [ 6 , 7 , 8 ] [ Difficulty ] then
17482: LD_EXP 43
17486: PUSH
17487: LD_INT 6
17489: PUSH
17490: LD_INT 7
17492: PUSH
17493: LD_INT 8
17495: PUSH
17496: EMPTY
17497: LIST
17498: LIST
17499: LIST
17500: PUSH
17501: LD_OWVAR 67
17505: ARRAY
17506: GREATEREQUAL
17507: IFFALSE 17518
// RaiseSailEvent ( event_alliance_attack ) ;
17509: LD_EXP 23
17513: PPUSH
17514: CALL_OW 427
// end ;
17518: PPOPN 4
17520: END
// export function AllianceAttack ( ) ; var path , units ; begin
17521: LD_INT 0
17523: PPUSH
17524: PPUSH
17525: PPUSH
// units := al_force ;
17526: LD_ADDR_VAR 0 3
17530: PUSH
17531: LD_EXP 43
17535: ST_TO_ADDR
// al_force := [ ] ;
17536: LD_ADDR_EXP 43
17540: PUSH
17541: EMPTY
17542: ST_TO_ADDR
// if rand ( 0 , 1 ) then
17543: LD_INT 0
17545: PPUSH
17546: LD_INT 1
17548: PPUSH
17549: CALL_OW 12
17553: IFFALSE 17597
// path := [ [ 49 , 53 ] , [ 52 , 90 ] , [ 63 , 114 ] ] else
17555: LD_ADDR_VAR 0 2
17559: PUSH
17560: LD_INT 49
17562: PUSH
17563: LD_INT 53
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: PUSH
17570: LD_INT 52
17572: PUSH
17573: LD_INT 90
17575: PUSH
17576: EMPTY
17577: LIST
17578: LIST
17579: PUSH
17580: LD_INT 63
17582: PUSH
17583: LD_INT 114
17585: PUSH
17586: EMPTY
17587: LIST
17588: LIST
17589: PUSH
17590: EMPTY
17591: LIST
17592: LIST
17593: LIST
17594: ST_TO_ADDR
17595: GO 17626
// path := [ [ 89 , 52 ] , [ 143 , 50 ] ] ;
17597: LD_ADDR_VAR 0 2
17601: PUSH
17602: LD_INT 89
17604: PUSH
17605: LD_INT 52
17607: PUSH
17608: EMPTY
17609: LIST
17610: LIST
17611: PUSH
17612: LD_INT 143
17614: PUSH
17615: LD_INT 50
17617: PUSH
17618: EMPTY
17619: LIST
17620: LIST
17621: PUSH
17622: EMPTY
17623: LIST
17624: LIST
17625: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17626: LD_INT 35
17628: PPUSH
17629: CALL_OW 67
// until not AgressiveMove ( units , path ) ;
17633: LD_VAR 0 3
17637: PPUSH
17638: LD_VAR 0 2
17642: PPUSH
17643: CALL 75625 0 2
17647: NOT
17648: IFFALSE 17626
// end ; end_of_file
17650: LD_VAR 0 1
17654: RET
// export ar_commander , ar_force , ar_skill ; export function PrepareArabian ; var i , filter , un , team ; begin
17655: LD_INT 0
17657: PPUSH
17658: PPUSH
17659: PPUSH
17660: PPUSH
17661: PPUSH
// ar_skill := [ 9 , 8 , 7 ] [ Difficulty ] ;
17662: LD_ADDR_EXP 58
17666: PUSH
17667: LD_INT 9
17669: PUSH
17670: LD_INT 8
17672: PUSH
17673: LD_INT 7
17675: PUSH
17676: EMPTY
17677: LIST
17678: LIST
17679: LIST
17680: PUSH
17681: LD_OWVAR 67
17685: ARRAY
17686: ST_TO_ADDR
// ar_force := [ ] ;
17687: LD_ADDR_EXP 57
17691: PUSH
17692: EMPTY
17693: ST_TO_ADDR
// RemoveAlliance ;
17694: CALL 15531 0 0
// RemoveEnvironmentArea ( evn ) ;
17698: LD_INT 17
17700: PPUSH
17701: CALL_OW 355
// your_side := 2 ;
17705: LD_ADDR_OWVAR 2
17709: PUSH
17710: LD_INT 2
17712: ST_TO_ADDR
// uc_side := 2 ;
17713: LD_ADDR_OWVAR 20
17717: PUSH
17718: LD_INT 2
17720: ST_TO_ADDR
// uc_nation := nation_arabian ;
17721: LD_ADDR_OWVAR 21
17725: PUSH
17726: LD_INT 2
17728: ST_TO_ADDR
// hc_gallery :=  ;
17729: LD_ADDR_OWVAR 33
17733: PUSH
17734: LD_STRING 
17736: ST_TO_ADDR
// hc_name :=  ;
17737: LD_ADDR_OWVAR 26
17741: PUSH
17742: LD_STRING 
17744: ST_TO_ADDR
// hc_importance := 0 ;
17745: LD_ADDR_OWVAR 32
17749: PUSH
17750: LD_INT 0
17752: ST_TO_ADDR
// for i = 1 to 20 do
17753: LD_ADDR_VAR 0 2
17757: PUSH
17758: DOUBLE
17759: LD_INT 1
17761: DEC
17762: ST_TO_ADDR
17763: LD_INT 20
17765: PUSH
17766: FOR_TO
17767: IFFALSE 17832
// begin PrepareHuman ( false , Rand ( 1 , 4 ) , ar_skill ) ;
17769: LD_INT 0
17771: PPUSH
17772: LD_INT 1
17774: PPUSH
17775: LD_INT 4
17777: PPUSH
17778: CALL_OW 12
17782: PPUSH
17783: LD_EXP 58
17787: PPUSH
17788: CALL_OW 380
// un := CreateHuman ;
17792: LD_ADDR_VAR 0 4
17796: PUSH
17797: CALL_OW 44
17801: ST_TO_ADDR
// SetDir ( un , 2 ) ;
17802: LD_VAR 0 4
17806: PPUSH
17807: LD_INT 2
17809: PPUSH
17810: CALL_OW 233
// ar_force := ar_force ^ un ;
17814: LD_ADDR_EXP 57
17818: PUSH
17819: LD_EXP 57
17823: PUSH
17824: LD_VAR 0 4
17828: ADD
17829: ST_TO_ADDR
// end ;
17830: GO 17766
17832: POP
17833: POP
// hc_importance := 100 ;
17834: LD_ADDR_OWVAR 32
17838: PUSH
17839: LD_INT 100
17841: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , ar_skill ) ;
17842: LD_INT 1
17844: PPUSH
17845: LD_INT 11
17847: PPUSH
17848: LD_EXP 58
17852: PPUSH
17853: CALL_OW 380
// ar_commander := CreateHuman ;
17857: LD_ADDR_EXP 56
17861: PUSH
17862: CALL_OW 44
17866: ST_TO_ADDR
// SetDir ( ar_commander , 2 ) ;
17867: LD_EXP 56
17871: PPUSH
17872: LD_INT 2
17874: PPUSH
17875: CALL_OW 233
// player_commander := ar_commander ;
17879: LD_ADDR_EXP 11
17883: PUSH
17884: LD_EXP 56
17888: ST_TO_ADDR
// team := CharacterSelection ( text , [ 14 , 13 , 12 ] [ Difficulty ] , [ 14 , 13 , 12 ] [ Difficulty ] , [ sel_dont_change_class , ar_commander , sel_not_hired , sel_changeable , sel_change_class ] ^ ar_force , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , class_mortar ] ) ;
17889: LD_ADDR_VAR 0 5
17893: PUSH
17894: LD_STRING text
17896: PPUSH
17897: LD_INT 14
17899: PUSH
17900: LD_INT 13
17902: PUSH
17903: LD_INT 12
17905: PUSH
17906: EMPTY
17907: LIST
17908: LIST
17909: LIST
17910: PUSH
17911: LD_OWVAR 67
17915: ARRAY
17916: PPUSH
17917: LD_INT 14
17919: PUSH
17920: LD_INT 13
17922: PUSH
17923: LD_INT 12
17925: PUSH
17926: EMPTY
17927: LIST
17928: LIST
17929: LIST
17930: PUSH
17931: LD_OWVAR 67
17935: ARRAY
17936: PPUSH
17937: LD_INT -6
17939: PUSH
17940: LD_EXP 56
17944: PUSH
17945: LD_INT -2
17947: PUSH
17948: LD_INT -3
17950: PUSH
17951: LD_INT -5
17953: PUSH
17954: EMPTY
17955: LIST
17956: LIST
17957: LIST
17958: LIST
17959: LIST
17960: PUSH
17961: LD_EXP 57
17965: ADD
17966: PPUSH
17967: LD_INT 1
17969: PUSH
17970: LD_INT 3
17972: PUSH
17973: LD_INT 2
17975: PUSH
17976: LD_INT 1
17978: PUSH
17979: EMPTY
17980: LIST
17981: LIST
17982: PUSH
17983: LD_INT 4
17985: PUSH
17986: LD_INT 1
17988: PUSH
17989: EMPTY
17990: LIST
17991: LIST
17992: PUSH
17993: LD_INT 8
17995: PUSH
17996: EMPTY
17997: LIST
17998: LIST
17999: LIST
18000: LIST
18001: LIST
18002: PPUSH
18003: CALL_OW 42
18007: ST_TO_ADDR
// team := team ^ ar_commander ;
18008: LD_ADDR_VAR 0 5
18012: PUSH
18013: LD_VAR 0 5
18017: PUSH
18018: LD_EXP 56
18022: ADD
18023: ST_TO_ADDR
// for i = 1 to 4 do
18024: LD_ADDR_VAR 0 2
18028: PUSH
18029: DOUBLE
18030: LD_INT 1
18032: DEC
18033: ST_TO_ADDR
18034: LD_INT 4
18036: PUSH
18037: FOR_TO
18038: IFFALSE 18140
// begin vc_chassis := ar_medium_trike ;
18040: LD_ADDR_OWVAR 37
18044: PUSH
18045: LD_INT 13
18047: ST_TO_ADDR
// vc_engine := engine_siberite ;
18048: LD_ADDR_OWVAR 39
18052: PUSH
18053: LD_INT 3
18055: ST_TO_ADDR
// vc_control := control_manual ;
18056: LD_ADDR_OWVAR 38
18060: PUSH
18061: LD_INT 1
18063: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_cargo_bay , ar_crane , ar_gun ] [ i ] ;
18064: LD_ADDR_OWVAR 40
18068: PUSH
18069: LD_INT 27
18071: PUSH
18072: LD_INT 32
18074: PUSH
18075: LD_EXP 65
18079: PUSH
18080: LD_INT 27
18082: PUSH
18083: EMPTY
18084: LIST
18085: LIST
18086: LIST
18087: LIST
18088: PUSH
18089: LD_VAR 0 2
18093: ARRAY
18094: ST_TO_ADDR
// un := CreateVehicle ;
18095: LD_ADDR_VAR 0 4
18099: PUSH
18100: CALL_OW 45
18104: ST_TO_ADDR
// SetDir ( un , 2 ) ;
18105: LD_VAR 0 4
18109: PPUSH
18110: LD_INT 2
18112: PPUSH
18113: CALL_OW 233
// PlaceUnitXYR ( un , 54 , 15 , 6 , false ) ;
18117: LD_VAR 0 4
18121: PPUSH
18122: LD_INT 54
18124: PPUSH
18125: LD_INT 15
18127: PPUSH
18128: LD_INT 6
18130: PPUSH
18131: LD_INT 0
18133: PPUSH
18134: CALL_OW 50
// end ;
18138: GO 18037
18140: POP
18141: POP
// for i = 1 to team do
18142: LD_ADDR_VAR 0 2
18146: PUSH
18147: DOUBLE
18148: LD_INT 1
18150: DEC
18151: ST_TO_ADDR
18152: LD_VAR 0 5
18156: PUSH
18157: FOR_TO
18158: IFFALSE 18255
// begin if FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) then
18160: LD_INT 22
18162: PUSH
18163: LD_INT 2
18165: PUSH
18166: EMPTY
18167: LIST
18168: LIST
18169: PUSH
18170: LD_INT 58
18172: PUSH
18173: EMPTY
18174: LIST
18175: PUSH
18176: EMPTY
18177: LIST
18178: LIST
18179: PPUSH
18180: CALL_OW 69
18184: IFFALSE 18232
// PlaceHumanInUnit ( team [ i ] , FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) [ 1 ] ) else
18186: LD_VAR 0 5
18190: PUSH
18191: LD_VAR 0 2
18195: ARRAY
18196: PPUSH
18197: LD_INT 22
18199: PUSH
18200: LD_INT 2
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: PUSH
18207: LD_INT 58
18209: PUSH
18210: EMPTY
18211: LIST
18212: PUSH
18213: EMPTY
18214: LIST
18215: LIST
18216: PPUSH
18217: CALL_OW 69
18221: PUSH
18222: LD_INT 1
18224: ARRAY
18225: PPUSH
18226: CALL_OW 52
18230: GO 18253
// PlaceUnitArea ( team [ i ] , center_resp , false ) ;
18232: LD_VAR 0 5
18236: PUSH
18237: LD_VAR 0 2
18241: ARRAY
18242: PPUSH
18243: LD_INT 16
18245: PPUSH
18246: LD_INT 0
18248: PPUSH
18249: CALL_OW 49
// end ;
18253: GO 18157
18255: POP
18256: POP
// uc_side := 0 ;
18257: LD_ADDR_OWVAR 20
18261: PUSH
18262: LD_INT 0
18264: ST_TO_ADDR
// uc_nation := 0 ;
18265: LD_ADDR_OWVAR 21
18269: PUSH
18270: LD_INT 0
18272: ST_TO_ADDR
// vc_chassis := 31 ;
18273: LD_ADDR_OWVAR 37
18277: PUSH
18278: LD_INT 31
18280: ST_TO_ADDR
// vc_control := control_rider ;
18281: LD_ADDR_OWVAR 38
18285: PUSH
18286: LD_INT 4
18288: ST_TO_ADDR
// PlaceUnitXY ( CreateVehicle , 96 , 20 , false ) ;
18289: CALL_OW 45
18293: PPUSH
18294: LD_INT 96
18296: PPUSH
18297: LD_INT 20
18299: PPUSH
18300: LD_INT 0
18302: PPUSH
18303: CALL_OW 48
// end ; end_of_file
18307: LD_VAR 0 1
18311: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
18312: LD_INT 0
18314: PPUSH
// ar_miner := 81 ;
18315: LD_ADDR_EXP 66
18319: PUSH
18320: LD_INT 81
18322: ST_TO_ADDR
// ar_crane := 88 ;
18323: LD_ADDR_EXP 65
18327: PUSH
18328: LD_INT 88
18330: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
18331: LD_ADDR_EXP 60
18335: PUSH
18336: LD_INT 89
18338: ST_TO_ADDR
// us_hack := 99 ;
18339: LD_ADDR_EXP 61
18343: PUSH
18344: LD_INT 99
18346: ST_TO_ADDR
// us_artillery := 97 ;
18347: LD_ADDR_EXP 62
18351: PUSH
18352: LD_INT 97
18354: ST_TO_ADDR
// ar_bio_bomb := 91 ;
18355: LD_ADDR_EXP 63
18359: PUSH
18360: LD_INT 91
18362: ST_TO_ADDR
// ar_mortar := 92 ;
18363: LD_ADDR_EXP 64
18367: PUSH
18368: LD_INT 92
18370: ST_TO_ADDR
// ru_radar := 98 ;
18371: LD_ADDR_EXP 59
18375: PUSH
18376: LD_INT 98
18378: ST_TO_ADDR
// tech_Artillery := 80 ;
18379: LD_ADDR_EXP 67
18383: PUSH
18384: LD_INT 80
18386: ST_TO_ADDR
// tech_RadMat := 81 ;
18387: LD_ADDR_EXP 68
18391: PUSH
18392: LD_INT 81
18394: ST_TO_ADDR
// tech_BasicTools := 82 ;
18395: LD_ADDR_EXP 69
18399: PUSH
18400: LD_INT 82
18402: ST_TO_ADDR
// tech_Cargo := 83 ;
18403: LD_ADDR_EXP 70
18407: PUSH
18408: LD_INT 83
18410: ST_TO_ADDR
// tech_Track := 84 ;
18411: LD_ADDR_EXP 71
18415: PUSH
18416: LD_INT 84
18418: ST_TO_ADDR
// tech_Crane := 85 ;
18419: LD_ADDR_EXP 72
18423: PUSH
18424: LD_INT 85
18426: ST_TO_ADDR
// tech_Bulldozer := 86 ;
18427: LD_ADDR_EXP 73
18431: PUSH
18432: LD_INT 86
18434: ST_TO_ADDR
// tech_Hovercraft := 87 ;
18435: LD_ADDR_EXP 74
18439: PUSH
18440: LD_INT 87
18442: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
18443: LD_ADDR_EXP 75
18447: PUSH
18448: LD_INT 88
18450: ST_TO_ADDR
// class_mastodont := 31 ;
18451: LD_ADDR_EXP 76
18455: PUSH
18456: LD_INT 31
18458: ST_TO_ADDR
// class_horse := 21 ;
18459: LD_ADDR_EXP 77
18463: PUSH
18464: LD_INT 21
18466: ST_TO_ADDR
// end ;
18467: LD_VAR 0 1
18471: RET
// every 1 do
18472: GO 18474
18474: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
18475: CALL 18312 0 0
18479: END
// every 0 0$1 do
18480: GO 18482
18482: DISABLE
// begin enable ;
18483: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
18484: LD_STRING updateTimer(
18486: PUSH
18487: LD_OWVAR 1
18491: STR
18492: PUSH
18493: LD_STRING );
18495: STR
18496: PPUSH
18497: CALL_OW 559
// end ;
18501: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18502: LD_INT 0
18504: PPUSH
// if p2 = 100 then
18505: LD_VAR 0 2
18509: PUSH
18510: LD_INT 100
18512: EQUAL
18513: IFFALSE 19516
// begin if not StreamModeActive then
18515: LD_EXP 78
18519: NOT
18520: IFFALSE 18530
// StreamModeActive := true ;
18522: LD_ADDR_EXP 78
18526: PUSH
18527: LD_INT 1
18529: ST_TO_ADDR
// if p3 = 0 then
18530: LD_VAR 0 3
18534: PUSH
18535: LD_INT 0
18537: EQUAL
18538: IFFALSE 18544
// InitStreamMode ;
18540: CALL 19676 0 0
// if p3 = 1 then
18544: LD_VAR 0 3
18548: PUSH
18549: LD_INT 1
18551: EQUAL
18552: IFFALSE 18562
// sRocket := true ;
18554: LD_ADDR_EXP 83
18558: PUSH
18559: LD_INT 1
18561: ST_TO_ADDR
// if p3 = 2 then
18562: LD_VAR 0 3
18566: PUSH
18567: LD_INT 2
18569: EQUAL
18570: IFFALSE 18580
// sSpeed := true ;
18572: LD_ADDR_EXP 82
18576: PUSH
18577: LD_INT 1
18579: ST_TO_ADDR
// if p3 = 3 then
18580: LD_VAR 0 3
18584: PUSH
18585: LD_INT 3
18587: EQUAL
18588: IFFALSE 18598
// sEngine := true ;
18590: LD_ADDR_EXP 84
18594: PUSH
18595: LD_INT 1
18597: ST_TO_ADDR
// if p3 = 4 then
18598: LD_VAR 0 3
18602: PUSH
18603: LD_INT 4
18605: EQUAL
18606: IFFALSE 18616
// sSpec := true ;
18608: LD_ADDR_EXP 81
18612: PUSH
18613: LD_INT 1
18615: ST_TO_ADDR
// if p3 = 5 then
18616: LD_VAR 0 3
18620: PUSH
18621: LD_INT 5
18623: EQUAL
18624: IFFALSE 18634
// sLevel := true ;
18626: LD_ADDR_EXP 85
18630: PUSH
18631: LD_INT 1
18633: ST_TO_ADDR
// if p3 = 6 then
18634: LD_VAR 0 3
18638: PUSH
18639: LD_INT 6
18641: EQUAL
18642: IFFALSE 18652
// sArmoury := true ;
18644: LD_ADDR_EXP 86
18648: PUSH
18649: LD_INT 1
18651: ST_TO_ADDR
// if p3 = 7 then
18652: LD_VAR 0 3
18656: PUSH
18657: LD_INT 7
18659: EQUAL
18660: IFFALSE 18670
// sRadar := true ;
18662: LD_ADDR_EXP 87
18666: PUSH
18667: LD_INT 1
18669: ST_TO_ADDR
// if p3 = 8 then
18670: LD_VAR 0 3
18674: PUSH
18675: LD_INT 8
18677: EQUAL
18678: IFFALSE 18688
// sBunker := true ;
18680: LD_ADDR_EXP 88
18684: PUSH
18685: LD_INT 1
18687: ST_TO_ADDR
// if p3 = 9 then
18688: LD_VAR 0 3
18692: PUSH
18693: LD_INT 9
18695: EQUAL
18696: IFFALSE 18706
// sHack := true ;
18698: LD_ADDR_EXP 89
18702: PUSH
18703: LD_INT 1
18705: ST_TO_ADDR
// if p3 = 10 then
18706: LD_VAR 0 3
18710: PUSH
18711: LD_INT 10
18713: EQUAL
18714: IFFALSE 18724
// sFire := true ;
18716: LD_ADDR_EXP 90
18720: PUSH
18721: LD_INT 1
18723: ST_TO_ADDR
// if p3 = 11 then
18724: LD_VAR 0 3
18728: PUSH
18729: LD_INT 11
18731: EQUAL
18732: IFFALSE 18742
// sRefresh := true ;
18734: LD_ADDR_EXP 91
18738: PUSH
18739: LD_INT 1
18741: ST_TO_ADDR
// if p3 = 12 then
18742: LD_VAR 0 3
18746: PUSH
18747: LD_INT 12
18749: EQUAL
18750: IFFALSE 18760
// sExp := true ;
18752: LD_ADDR_EXP 92
18756: PUSH
18757: LD_INT 1
18759: ST_TO_ADDR
// if p3 = 13 then
18760: LD_VAR 0 3
18764: PUSH
18765: LD_INT 13
18767: EQUAL
18768: IFFALSE 18778
// sDepot := true ;
18770: LD_ADDR_EXP 93
18774: PUSH
18775: LD_INT 1
18777: ST_TO_ADDR
// if p3 = 14 then
18778: LD_VAR 0 3
18782: PUSH
18783: LD_INT 14
18785: EQUAL
18786: IFFALSE 18796
// sFlag := true ;
18788: LD_ADDR_EXP 94
18792: PUSH
18793: LD_INT 1
18795: ST_TO_ADDR
// if p3 = 15 then
18796: LD_VAR 0 3
18800: PUSH
18801: LD_INT 15
18803: EQUAL
18804: IFFALSE 18814
// sKamikadze := true ;
18806: LD_ADDR_EXP 102
18810: PUSH
18811: LD_INT 1
18813: ST_TO_ADDR
// if p3 = 16 then
18814: LD_VAR 0 3
18818: PUSH
18819: LD_INT 16
18821: EQUAL
18822: IFFALSE 18832
// sTroll := true ;
18824: LD_ADDR_EXP 103
18828: PUSH
18829: LD_INT 1
18831: ST_TO_ADDR
// if p3 = 17 then
18832: LD_VAR 0 3
18836: PUSH
18837: LD_INT 17
18839: EQUAL
18840: IFFALSE 18850
// sSlow := true ;
18842: LD_ADDR_EXP 104
18846: PUSH
18847: LD_INT 1
18849: ST_TO_ADDR
// if p3 = 18 then
18850: LD_VAR 0 3
18854: PUSH
18855: LD_INT 18
18857: EQUAL
18858: IFFALSE 18868
// sLack := true ;
18860: LD_ADDR_EXP 105
18864: PUSH
18865: LD_INT 1
18867: ST_TO_ADDR
// if p3 = 19 then
18868: LD_VAR 0 3
18872: PUSH
18873: LD_INT 19
18875: EQUAL
18876: IFFALSE 18886
// sTank := true ;
18878: LD_ADDR_EXP 107
18882: PUSH
18883: LD_INT 1
18885: ST_TO_ADDR
// if p3 = 20 then
18886: LD_VAR 0 3
18890: PUSH
18891: LD_INT 20
18893: EQUAL
18894: IFFALSE 18904
// sRemote := true ;
18896: LD_ADDR_EXP 108
18900: PUSH
18901: LD_INT 1
18903: ST_TO_ADDR
// if p3 = 21 then
18904: LD_VAR 0 3
18908: PUSH
18909: LD_INT 21
18911: EQUAL
18912: IFFALSE 18922
// sPowell := true ;
18914: LD_ADDR_EXP 109
18918: PUSH
18919: LD_INT 1
18921: ST_TO_ADDR
// if p3 = 22 then
18922: LD_VAR 0 3
18926: PUSH
18927: LD_INT 22
18929: EQUAL
18930: IFFALSE 18940
// sTeleport := true ;
18932: LD_ADDR_EXP 112
18936: PUSH
18937: LD_INT 1
18939: ST_TO_ADDR
// if p3 = 23 then
18940: LD_VAR 0 3
18944: PUSH
18945: LD_INT 23
18947: EQUAL
18948: IFFALSE 18958
// sOilTower := true ;
18950: LD_ADDR_EXP 114
18954: PUSH
18955: LD_INT 1
18957: ST_TO_ADDR
// if p3 = 24 then
18958: LD_VAR 0 3
18962: PUSH
18963: LD_INT 24
18965: EQUAL
18966: IFFALSE 18976
// sShovel := true ;
18968: LD_ADDR_EXP 115
18972: PUSH
18973: LD_INT 1
18975: ST_TO_ADDR
// if p3 = 25 then
18976: LD_VAR 0 3
18980: PUSH
18981: LD_INT 25
18983: EQUAL
18984: IFFALSE 18994
// sSheik := true ;
18986: LD_ADDR_EXP 116
18990: PUSH
18991: LD_INT 1
18993: ST_TO_ADDR
// if p3 = 26 then
18994: LD_VAR 0 3
18998: PUSH
18999: LD_INT 26
19001: EQUAL
19002: IFFALSE 19012
// sEarthquake := true ;
19004: LD_ADDR_EXP 118
19008: PUSH
19009: LD_INT 1
19011: ST_TO_ADDR
// if p3 = 27 then
19012: LD_VAR 0 3
19016: PUSH
19017: LD_INT 27
19019: EQUAL
19020: IFFALSE 19030
// sAI := true ;
19022: LD_ADDR_EXP 119
19026: PUSH
19027: LD_INT 1
19029: ST_TO_ADDR
// if p3 = 28 then
19030: LD_VAR 0 3
19034: PUSH
19035: LD_INT 28
19037: EQUAL
19038: IFFALSE 19048
// sCargo := true ;
19040: LD_ADDR_EXP 122
19044: PUSH
19045: LD_INT 1
19047: ST_TO_ADDR
// if p3 = 29 then
19048: LD_VAR 0 3
19052: PUSH
19053: LD_INT 29
19055: EQUAL
19056: IFFALSE 19066
// sDLaser := true ;
19058: LD_ADDR_EXP 123
19062: PUSH
19063: LD_INT 1
19065: ST_TO_ADDR
// if p3 = 30 then
19066: LD_VAR 0 3
19070: PUSH
19071: LD_INT 30
19073: EQUAL
19074: IFFALSE 19084
// sExchange := true ;
19076: LD_ADDR_EXP 124
19080: PUSH
19081: LD_INT 1
19083: ST_TO_ADDR
// if p3 = 31 then
19084: LD_VAR 0 3
19088: PUSH
19089: LD_INT 31
19091: EQUAL
19092: IFFALSE 19102
// sFac := true ;
19094: LD_ADDR_EXP 125
19098: PUSH
19099: LD_INT 1
19101: ST_TO_ADDR
// if p3 = 32 then
19102: LD_VAR 0 3
19106: PUSH
19107: LD_INT 32
19109: EQUAL
19110: IFFALSE 19120
// sPower := true ;
19112: LD_ADDR_EXP 126
19116: PUSH
19117: LD_INT 1
19119: ST_TO_ADDR
// if p3 = 33 then
19120: LD_VAR 0 3
19124: PUSH
19125: LD_INT 33
19127: EQUAL
19128: IFFALSE 19138
// sRandom := true ;
19130: LD_ADDR_EXP 127
19134: PUSH
19135: LD_INT 1
19137: ST_TO_ADDR
// if p3 = 34 then
19138: LD_VAR 0 3
19142: PUSH
19143: LD_INT 34
19145: EQUAL
19146: IFFALSE 19156
// sShield := true ;
19148: LD_ADDR_EXP 128
19152: PUSH
19153: LD_INT 1
19155: ST_TO_ADDR
// if p3 = 35 then
19156: LD_VAR 0 3
19160: PUSH
19161: LD_INT 35
19163: EQUAL
19164: IFFALSE 19174
// sTime := true ;
19166: LD_ADDR_EXP 129
19170: PUSH
19171: LD_INT 1
19173: ST_TO_ADDR
// if p3 = 36 then
19174: LD_VAR 0 3
19178: PUSH
19179: LD_INT 36
19181: EQUAL
19182: IFFALSE 19192
// sTools := true ;
19184: LD_ADDR_EXP 130
19188: PUSH
19189: LD_INT 1
19191: ST_TO_ADDR
// if p3 = 101 then
19192: LD_VAR 0 3
19196: PUSH
19197: LD_INT 101
19199: EQUAL
19200: IFFALSE 19210
// sSold := true ;
19202: LD_ADDR_EXP 95
19206: PUSH
19207: LD_INT 1
19209: ST_TO_ADDR
// if p3 = 102 then
19210: LD_VAR 0 3
19214: PUSH
19215: LD_INT 102
19217: EQUAL
19218: IFFALSE 19228
// sDiff := true ;
19220: LD_ADDR_EXP 96
19224: PUSH
19225: LD_INT 1
19227: ST_TO_ADDR
// if p3 = 103 then
19228: LD_VAR 0 3
19232: PUSH
19233: LD_INT 103
19235: EQUAL
19236: IFFALSE 19246
// sFog := true ;
19238: LD_ADDR_EXP 99
19242: PUSH
19243: LD_INT 1
19245: ST_TO_ADDR
// if p3 = 104 then
19246: LD_VAR 0 3
19250: PUSH
19251: LD_INT 104
19253: EQUAL
19254: IFFALSE 19264
// sReset := true ;
19256: LD_ADDR_EXP 100
19260: PUSH
19261: LD_INT 1
19263: ST_TO_ADDR
// if p3 = 105 then
19264: LD_VAR 0 3
19268: PUSH
19269: LD_INT 105
19271: EQUAL
19272: IFFALSE 19282
// sSun := true ;
19274: LD_ADDR_EXP 101
19278: PUSH
19279: LD_INT 1
19281: ST_TO_ADDR
// if p3 = 106 then
19282: LD_VAR 0 3
19286: PUSH
19287: LD_INT 106
19289: EQUAL
19290: IFFALSE 19300
// sTiger := true ;
19292: LD_ADDR_EXP 97
19296: PUSH
19297: LD_INT 1
19299: ST_TO_ADDR
// if p3 = 107 then
19300: LD_VAR 0 3
19304: PUSH
19305: LD_INT 107
19307: EQUAL
19308: IFFALSE 19318
// sBomb := true ;
19310: LD_ADDR_EXP 98
19314: PUSH
19315: LD_INT 1
19317: ST_TO_ADDR
// if p3 = 108 then
19318: LD_VAR 0 3
19322: PUSH
19323: LD_INT 108
19325: EQUAL
19326: IFFALSE 19336
// sWound := true ;
19328: LD_ADDR_EXP 106
19332: PUSH
19333: LD_INT 1
19335: ST_TO_ADDR
// if p3 = 109 then
19336: LD_VAR 0 3
19340: PUSH
19341: LD_INT 109
19343: EQUAL
19344: IFFALSE 19354
// sBetray := true ;
19346: LD_ADDR_EXP 110
19350: PUSH
19351: LD_INT 1
19353: ST_TO_ADDR
// if p3 = 110 then
19354: LD_VAR 0 3
19358: PUSH
19359: LD_INT 110
19361: EQUAL
19362: IFFALSE 19372
// sContamin := true ;
19364: LD_ADDR_EXP 111
19368: PUSH
19369: LD_INT 1
19371: ST_TO_ADDR
// if p3 = 111 then
19372: LD_VAR 0 3
19376: PUSH
19377: LD_INT 111
19379: EQUAL
19380: IFFALSE 19390
// sOil := true ;
19382: LD_ADDR_EXP 113
19386: PUSH
19387: LD_INT 1
19389: ST_TO_ADDR
// if p3 = 112 then
19390: LD_VAR 0 3
19394: PUSH
19395: LD_INT 112
19397: EQUAL
19398: IFFALSE 19408
// sStu := true ;
19400: LD_ADDR_EXP 117
19404: PUSH
19405: LD_INT 1
19407: ST_TO_ADDR
// if p3 = 113 then
19408: LD_VAR 0 3
19412: PUSH
19413: LD_INT 113
19415: EQUAL
19416: IFFALSE 19426
// sBazooka := true ;
19418: LD_ADDR_EXP 120
19422: PUSH
19423: LD_INT 1
19425: ST_TO_ADDR
// if p3 = 114 then
19426: LD_VAR 0 3
19430: PUSH
19431: LD_INT 114
19433: EQUAL
19434: IFFALSE 19444
// sMortar := true ;
19436: LD_ADDR_EXP 121
19440: PUSH
19441: LD_INT 1
19443: ST_TO_ADDR
// if p3 = 115 then
19444: LD_VAR 0 3
19448: PUSH
19449: LD_INT 115
19451: EQUAL
19452: IFFALSE 19462
// sRanger := true ;
19454: LD_ADDR_EXP 131
19458: PUSH
19459: LD_INT 1
19461: ST_TO_ADDR
// if p3 = 116 then
19462: LD_VAR 0 3
19466: PUSH
19467: LD_INT 116
19469: EQUAL
19470: IFFALSE 19480
// sComputer := true ;
19472: LD_ADDR_EXP 132
19476: PUSH
19477: LD_INT 1
19479: ST_TO_ADDR
// if p3 = 117 then
19480: LD_VAR 0 3
19484: PUSH
19485: LD_INT 117
19487: EQUAL
19488: IFFALSE 19498
// s30 := true ;
19490: LD_ADDR_EXP 133
19494: PUSH
19495: LD_INT 1
19497: ST_TO_ADDR
// if p3 = 118 then
19498: LD_VAR 0 3
19502: PUSH
19503: LD_INT 118
19505: EQUAL
19506: IFFALSE 19516
// s60 := true ;
19508: LD_ADDR_EXP 134
19512: PUSH
19513: LD_INT 1
19515: ST_TO_ADDR
// end ; if p2 = 101 then
19516: LD_VAR 0 2
19520: PUSH
19521: LD_INT 101
19523: EQUAL
19524: IFFALSE 19652
// begin case p3 of 1 :
19526: LD_VAR 0 3
19530: PUSH
19531: LD_INT 1
19533: DOUBLE
19534: EQUAL
19535: IFTRUE 19539
19537: GO 19546
19539: POP
// hHackUnlimitedResources ; 2 :
19540: CALL 31248 0 0
19544: GO 19652
19546: LD_INT 2
19548: DOUBLE
19549: EQUAL
19550: IFTRUE 19554
19552: GO 19561
19554: POP
// hHackSetLevel10 ; 3 :
19555: CALL 31381 0 0
19559: GO 19652
19561: LD_INT 3
19563: DOUBLE
19564: EQUAL
19565: IFTRUE 19569
19567: GO 19576
19569: POP
// hHackSetLevel10YourUnits ; 4 :
19570: CALL 31466 0 0
19574: GO 19652
19576: LD_INT 4
19578: DOUBLE
19579: EQUAL
19580: IFTRUE 19584
19582: GO 19591
19584: POP
// hHackInvincible ; 5 :
19585: CALL 31914 0 0
19589: GO 19652
19591: LD_INT 5
19593: DOUBLE
19594: EQUAL
19595: IFTRUE 19599
19597: GO 19606
19599: POP
// hHackInvisible ; 6 :
19600: CALL 32025 0 0
19604: GO 19652
19606: LD_INT 6
19608: DOUBLE
19609: EQUAL
19610: IFTRUE 19614
19612: GO 19621
19614: POP
// hHackChangeYourSide ; 7 :
19615: CALL 32082 0 0
19619: GO 19652
19621: LD_INT 7
19623: DOUBLE
19624: EQUAL
19625: IFTRUE 19629
19627: GO 19636
19629: POP
// hHackChangeUnitSide ; 8 :
19630: CALL 32124 0 0
19634: GO 19652
19636: LD_INT 8
19638: DOUBLE
19639: EQUAL
19640: IFTRUE 19644
19642: GO 19651
19644: POP
// hHackFog ; end ;
19645: CALL 32225 0 0
19649: GO 19652
19651: POP
// end ; end ;
19652: LD_VAR 0 7
19656: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
19657: GO 19659
19659: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
19660: LD_STRING initStreamRollete();
19662: PPUSH
19663: CALL_OW 559
// InitStreamMode ;
19667: CALL 19676 0 0
// DefineStreamItems ( ) ;
19671: CALL 20140 0 0
// end ;
19675: END
// function InitStreamMode ; begin
19676: LD_INT 0
19678: PPUSH
// streamModeActive := false ;
19679: LD_ADDR_EXP 78
19683: PUSH
19684: LD_INT 0
19686: ST_TO_ADDR
// normalCounter := 36 ;
19687: LD_ADDR_EXP 79
19691: PUSH
19692: LD_INT 36
19694: ST_TO_ADDR
// hardcoreCounter := 16 ;
19695: LD_ADDR_EXP 80
19699: PUSH
19700: LD_INT 16
19702: ST_TO_ADDR
// sRocket := false ;
19703: LD_ADDR_EXP 83
19707: PUSH
19708: LD_INT 0
19710: ST_TO_ADDR
// sSpeed := false ;
19711: LD_ADDR_EXP 82
19715: PUSH
19716: LD_INT 0
19718: ST_TO_ADDR
// sEngine := false ;
19719: LD_ADDR_EXP 84
19723: PUSH
19724: LD_INT 0
19726: ST_TO_ADDR
// sSpec := false ;
19727: LD_ADDR_EXP 81
19731: PUSH
19732: LD_INT 0
19734: ST_TO_ADDR
// sLevel := false ;
19735: LD_ADDR_EXP 85
19739: PUSH
19740: LD_INT 0
19742: ST_TO_ADDR
// sArmoury := false ;
19743: LD_ADDR_EXP 86
19747: PUSH
19748: LD_INT 0
19750: ST_TO_ADDR
// sRadar := false ;
19751: LD_ADDR_EXP 87
19755: PUSH
19756: LD_INT 0
19758: ST_TO_ADDR
// sBunker := false ;
19759: LD_ADDR_EXP 88
19763: PUSH
19764: LD_INT 0
19766: ST_TO_ADDR
// sHack := false ;
19767: LD_ADDR_EXP 89
19771: PUSH
19772: LD_INT 0
19774: ST_TO_ADDR
// sFire := false ;
19775: LD_ADDR_EXP 90
19779: PUSH
19780: LD_INT 0
19782: ST_TO_ADDR
// sRefresh := false ;
19783: LD_ADDR_EXP 91
19787: PUSH
19788: LD_INT 0
19790: ST_TO_ADDR
// sExp := false ;
19791: LD_ADDR_EXP 92
19795: PUSH
19796: LD_INT 0
19798: ST_TO_ADDR
// sDepot := false ;
19799: LD_ADDR_EXP 93
19803: PUSH
19804: LD_INT 0
19806: ST_TO_ADDR
// sFlag := false ;
19807: LD_ADDR_EXP 94
19811: PUSH
19812: LD_INT 0
19814: ST_TO_ADDR
// sKamikadze := false ;
19815: LD_ADDR_EXP 102
19819: PUSH
19820: LD_INT 0
19822: ST_TO_ADDR
// sTroll := false ;
19823: LD_ADDR_EXP 103
19827: PUSH
19828: LD_INT 0
19830: ST_TO_ADDR
// sSlow := false ;
19831: LD_ADDR_EXP 104
19835: PUSH
19836: LD_INT 0
19838: ST_TO_ADDR
// sLack := false ;
19839: LD_ADDR_EXP 105
19843: PUSH
19844: LD_INT 0
19846: ST_TO_ADDR
// sTank := false ;
19847: LD_ADDR_EXP 107
19851: PUSH
19852: LD_INT 0
19854: ST_TO_ADDR
// sRemote := false ;
19855: LD_ADDR_EXP 108
19859: PUSH
19860: LD_INT 0
19862: ST_TO_ADDR
// sPowell := false ;
19863: LD_ADDR_EXP 109
19867: PUSH
19868: LD_INT 0
19870: ST_TO_ADDR
// sTeleport := false ;
19871: LD_ADDR_EXP 112
19875: PUSH
19876: LD_INT 0
19878: ST_TO_ADDR
// sOilTower := false ;
19879: LD_ADDR_EXP 114
19883: PUSH
19884: LD_INT 0
19886: ST_TO_ADDR
// sShovel := false ;
19887: LD_ADDR_EXP 115
19891: PUSH
19892: LD_INT 0
19894: ST_TO_ADDR
// sSheik := false ;
19895: LD_ADDR_EXP 116
19899: PUSH
19900: LD_INT 0
19902: ST_TO_ADDR
// sEarthquake := false ;
19903: LD_ADDR_EXP 118
19907: PUSH
19908: LD_INT 0
19910: ST_TO_ADDR
// sAI := false ;
19911: LD_ADDR_EXP 119
19915: PUSH
19916: LD_INT 0
19918: ST_TO_ADDR
// sCargo := false ;
19919: LD_ADDR_EXP 122
19923: PUSH
19924: LD_INT 0
19926: ST_TO_ADDR
// sDLaser := false ;
19927: LD_ADDR_EXP 123
19931: PUSH
19932: LD_INT 0
19934: ST_TO_ADDR
// sExchange := false ;
19935: LD_ADDR_EXP 124
19939: PUSH
19940: LD_INT 0
19942: ST_TO_ADDR
// sFac := false ;
19943: LD_ADDR_EXP 125
19947: PUSH
19948: LD_INT 0
19950: ST_TO_ADDR
// sPower := false ;
19951: LD_ADDR_EXP 126
19955: PUSH
19956: LD_INT 0
19958: ST_TO_ADDR
// sRandom := false ;
19959: LD_ADDR_EXP 127
19963: PUSH
19964: LD_INT 0
19966: ST_TO_ADDR
// sShield := false ;
19967: LD_ADDR_EXP 128
19971: PUSH
19972: LD_INT 0
19974: ST_TO_ADDR
// sTime := false ;
19975: LD_ADDR_EXP 129
19979: PUSH
19980: LD_INT 0
19982: ST_TO_ADDR
// sTools := false ;
19983: LD_ADDR_EXP 130
19987: PUSH
19988: LD_INT 0
19990: ST_TO_ADDR
// sSold := false ;
19991: LD_ADDR_EXP 95
19995: PUSH
19996: LD_INT 0
19998: ST_TO_ADDR
// sDiff := false ;
19999: LD_ADDR_EXP 96
20003: PUSH
20004: LD_INT 0
20006: ST_TO_ADDR
// sFog := false ;
20007: LD_ADDR_EXP 99
20011: PUSH
20012: LD_INT 0
20014: ST_TO_ADDR
// sReset := false ;
20015: LD_ADDR_EXP 100
20019: PUSH
20020: LD_INT 0
20022: ST_TO_ADDR
// sSun := false ;
20023: LD_ADDR_EXP 101
20027: PUSH
20028: LD_INT 0
20030: ST_TO_ADDR
// sTiger := false ;
20031: LD_ADDR_EXP 97
20035: PUSH
20036: LD_INT 0
20038: ST_TO_ADDR
// sBomb := false ;
20039: LD_ADDR_EXP 98
20043: PUSH
20044: LD_INT 0
20046: ST_TO_ADDR
// sWound := false ;
20047: LD_ADDR_EXP 106
20051: PUSH
20052: LD_INT 0
20054: ST_TO_ADDR
// sBetray := false ;
20055: LD_ADDR_EXP 110
20059: PUSH
20060: LD_INT 0
20062: ST_TO_ADDR
// sContamin := false ;
20063: LD_ADDR_EXP 111
20067: PUSH
20068: LD_INT 0
20070: ST_TO_ADDR
// sOil := false ;
20071: LD_ADDR_EXP 113
20075: PUSH
20076: LD_INT 0
20078: ST_TO_ADDR
// sStu := false ;
20079: LD_ADDR_EXP 117
20083: PUSH
20084: LD_INT 0
20086: ST_TO_ADDR
// sBazooka := false ;
20087: LD_ADDR_EXP 120
20091: PUSH
20092: LD_INT 0
20094: ST_TO_ADDR
// sMortar := false ;
20095: LD_ADDR_EXP 121
20099: PUSH
20100: LD_INT 0
20102: ST_TO_ADDR
// sRanger := false ;
20103: LD_ADDR_EXP 131
20107: PUSH
20108: LD_INT 0
20110: ST_TO_ADDR
// sComputer := false ;
20111: LD_ADDR_EXP 132
20115: PUSH
20116: LD_INT 0
20118: ST_TO_ADDR
// s30 := false ;
20119: LD_ADDR_EXP 133
20123: PUSH
20124: LD_INT 0
20126: ST_TO_ADDR
// s60 := false ;
20127: LD_ADDR_EXP 134
20131: PUSH
20132: LD_INT 0
20134: ST_TO_ADDR
// end ;
20135: LD_VAR 0 1
20139: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
20140: LD_INT 0
20142: PPUSH
20143: PPUSH
20144: PPUSH
20145: PPUSH
20146: PPUSH
// result := [ ] ;
20147: LD_ADDR_VAR 0 1
20151: PUSH
20152: EMPTY
20153: ST_TO_ADDR
// if campaign_id = 1 then
20154: LD_OWVAR 69
20158: PUSH
20159: LD_INT 1
20161: EQUAL
20162: IFFALSE 23328
// begin case mission_number of 1 :
20164: LD_OWVAR 70
20168: PUSH
20169: LD_INT 1
20171: DOUBLE
20172: EQUAL
20173: IFTRUE 20177
20175: GO 20253
20177: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20178: LD_ADDR_VAR 0 1
20182: PUSH
20183: LD_INT 2
20185: PUSH
20186: LD_INT 4
20188: PUSH
20189: LD_INT 11
20191: PUSH
20192: LD_INT 12
20194: PUSH
20195: LD_INT 15
20197: PUSH
20198: LD_INT 16
20200: PUSH
20201: LD_INT 22
20203: PUSH
20204: LD_INT 23
20206: PUSH
20207: LD_INT 26
20209: PUSH
20210: EMPTY
20211: LIST
20212: LIST
20213: LIST
20214: LIST
20215: LIST
20216: LIST
20217: LIST
20218: LIST
20219: LIST
20220: PUSH
20221: LD_INT 101
20223: PUSH
20224: LD_INT 102
20226: PUSH
20227: LD_INT 106
20229: PUSH
20230: LD_INT 116
20232: PUSH
20233: LD_INT 117
20235: PUSH
20236: LD_INT 118
20238: PUSH
20239: EMPTY
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: PUSH
20247: EMPTY
20248: LIST
20249: LIST
20250: ST_TO_ADDR
20251: GO 23326
20253: LD_INT 2
20255: DOUBLE
20256: EQUAL
20257: IFTRUE 20261
20259: GO 20345
20261: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20262: LD_ADDR_VAR 0 1
20266: PUSH
20267: LD_INT 2
20269: PUSH
20270: LD_INT 4
20272: PUSH
20273: LD_INT 11
20275: PUSH
20276: LD_INT 12
20278: PUSH
20279: LD_INT 15
20281: PUSH
20282: LD_INT 16
20284: PUSH
20285: LD_INT 22
20287: PUSH
20288: LD_INT 23
20290: PUSH
20291: LD_INT 26
20293: PUSH
20294: EMPTY
20295: LIST
20296: LIST
20297: LIST
20298: LIST
20299: LIST
20300: LIST
20301: LIST
20302: LIST
20303: LIST
20304: PUSH
20305: LD_INT 101
20307: PUSH
20308: LD_INT 102
20310: PUSH
20311: LD_INT 105
20313: PUSH
20314: LD_INT 106
20316: PUSH
20317: LD_INT 108
20319: PUSH
20320: LD_INT 116
20322: PUSH
20323: LD_INT 117
20325: PUSH
20326: LD_INT 118
20328: PUSH
20329: EMPTY
20330: LIST
20331: LIST
20332: LIST
20333: LIST
20334: LIST
20335: LIST
20336: LIST
20337: LIST
20338: PUSH
20339: EMPTY
20340: LIST
20341: LIST
20342: ST_TO_ADDR
20343: GO 23326
20345: LD_INT 3
20347: DOUBLE
20348: EQUAL
20349: IFTRUE 20353
20351: GO 20441
20353: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
20354: LD_ADDR_VAR 0 1
20358: PUSH
20359: LD_INT 2
20361: PUSH
20362: LD_INT 4
20364: PUSH
20365: LD_INT 5
20367: PUSH
20368: LD_INT 11
20370: PUSH
20371: LD_INT 12
20373: PUSH
20374: LD_INT 15
20376: PUSH
20377: LD_INT 16
20379: PUSH
20380: LD_INT 22
20382: PUSH
20383: LD_INT 26
20385: PUSH
20386: LD_INT 36
20388: PUSH
20389: EMPTY
20390: LIST
20391: LIST
20392: LIST
20393: LIST
20394: LIST
20395: LIST
20396: LIST
20397: LIST
20398: LIST
20399: LIST
20400: PUSH
20401: LD_INT 101
20403: PUSH
20404: LD_INT 102
20406: PUSH
20407: LD_INT 105
20409: PUSH
20410: LD_INT 106
20412: PUSH
20413: LD_INT 108
20415: PUSH
20416: LD_INT 116
20418: PUSH
20419: LD_INT 117
20421: PUSH
20422: LD_INT 118
20424: PUSH
20425: EMPTY
20426: LIST
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: LIST
20432: LIST
20433: LIST
20434: PUSH
20435: EMPTY
20436: LIST
20437: LIST
20438: ST_TO_ADDR
20439: GO 23326
20441: LD_INT 4
20443: DOUBLE
20444: EQUAL
20445: IFTRUE 20449
20447: GO 20545
20449: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
20450: LD_ADDR_VAR 0 1
20454: PUSH
20455: LD_INT 2
20457: PUSH
20458: LD_INT 4
20460: PUSH
20461: LD_INT 5
20463: PUSH
20464: LD_INT 8
20466: PUSH
20467: LD_INT 11
20469: PUSH
20470: LD_INT 12
20472: PUSH
20473: LD_INT 15
20475: PUSH
20476: LD_INT 16
20478: PUSH
20479: LD_INT 22
20481: PUSH
20482: LD_INT 23
20484: PUSH
20485: LD_INT 26
20487: PUSH
20488: LD_INT 36
20490: PUSH
20491: EMPTY
20492: LIST
20493: LIST
20494: LIST
20495: LIST
20496: LIST
20497: LIST
20498: LIST
20499: LIST
20500: LIST
20501: LIST
20502: LIST
20503: LIST
20504: PUSH
20505: LD_INT 101
20507: PUSH
20508: LD_INT 102
20510: PUSH
20511: LD_INT 105
20513: PUSH
20514: LD_INT 106
20516: PUSH
20517: LD_INT 108
20519: PUSH
20520: LD_INT 116
20522: PUSH
20523: LD_INT 117
20525: PUSH
20526: LD_INT 118
20528: PUSH
20529: EMPTY
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: LIST
20535: LIST
20536: LIST
20537: LIST
20538: PUSH
20539: EMPTY
20540: LIST
20541: LIST
20542: ST_TO_ADDR
20543: GO 23326
20545: LD_INT 5
20547: DOUBLE
20548: EQUAL
20549: IFTRUE 20553
20551: GO 20665
20553: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
20554: LD_ADDR_VAR 0 1
20558: PUSH
20559: LD_INT 2
20561: PUSH
20562: LD_INT 4
20564: PUSH
20565: LD_INT 5
20567: PUSH
20568: LD_INT 6
20570: PUSH
20571: LD_INT 8
20573: PUSH
20574: LD_INT 11
20576: PUSH
20577: LD_INT 12
20579: PUSH
20580: LD_INT 15
20582: PUSH
20583: LD_INT 16
20585: PUSH
20586: LD_INT 22
20588: PUSH
20589: LD_INT 23
20591: PUSH
20592: LD_INT 25
20594: PUSH
20595: LD_INT 26
20597: PUSH
20598: LD_INT 36
20600: PUSH
20601: EMPTY
20602: LIST
20603: LIST
20604: LIST
20605: LIST
20606: LIST
20607: LIST
20608: LIST
20609: LIST
20610: LIST
20611: LIST
20612: LIST
20613: LIST
20614: LIST
20615: LIST
20616: PUSH
20617: LD_INT 101
20619: PUSH
20620: LD_INT 102
20622: PUSH
20623: LD_INT 105
20625: PUSH
20626: LD_INT 106
20628: PUSH
20629: LD_INT 108
20631: PUSH
20632: LD_INT 109
20634: PUSH
20635: LD_INT 112
20637: PUSH
20638: LD_INT 116
20640: PUSH
20641: LD_INT 117
20643: PUSH
20644: LD_INT 118
20646: PUSH
20647: EMPTY
20648: LIST
20649: LIST
20650: LIST
20651: LIST
20652: LIST
20653: LIST
20654: LIST
20655: LIST
20656: LIST
20657: LIST
20658: PUSH
20659: EMPTY
20660: LIST
20661: LIST
20662: ST_TO_ADDR
20663: GO 23326
20665: LD_INT 6
20667: DOUBLE
20668: EQUAL
20669: IFTRUE 20673
20671: GO 20805
20673: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
20674: LD_ADDR_VAR 0 1
20678: PUSH
20679: LD_INT 2
20681: PUSH
20682: LD_INT 4
20684: PUSH
20685: LD_INT 5
20687: PUSH
20688: LD_INT 6
20690: PUSH
20691: LD_INT 8
20693: PUSH
20694: LD_INT 11
20696: PUSH
20697: LD_INT 12
20699: PUSH
20700: LD_INT 15
20702: PUSH
20703: LD_INT 16
20705: PUSH
20706: LD_INT 20
20708: PUSH
20709: LD_INT 21
20711: PUSH
20712: LD_INT 22
20714: PUSH
20715: LD_INT 23
20717: PUSH
20718: LD_INT 25
20720: PUSH
20721: LD_INT 26
20723: PUSH
20724: LD_INT 30
20726: PUSH
20727: LD_INT 31
20729: PUSH
20730: LD_INT 32
20732: PUSH
20733: LD_INT 36
20735: PUSH
20736: EMPTY
20737: LIST
20738: LIST
20739: LIST
20740: LIST
20741: LIST
20742: LIST
20743: LIST
20744: LIST
20745: LIST
20746: LIST
20747: LIST
20748: LIST
20749: LIST
20750: LIST
20751: LIST
20752: LIST
20753: LIST
20754: LIST
20755: LIST
20756: PUSH
20757: LD_INT 101
20759: PUSH
20760: LD_INT 102
20762: PUSH
20763: LD_INT 105
20765: PUSH
20766: LD_INT 106
20768: PUSH
20769: LD_INT 108
20771: PUSH
20772: LD_INT 109
20774: PUSH
20775: LD_INT 112
20777: PUSH
20778: LD_INT 116
20780: PUSH
20781: LD_INT 117
20783: PUSH
20784: LD_INT 118
20786: PUSH
20787: EMPTY
20788: LIST
20789: LIST
20790: LIST
20791: LIST
20792: LIST
20793: LIST
20794: LIST
20795: LIST
20796: LIST
20797: LIST
20798: PUSH
20799: EMPTY
20800: LIST
20801: LIST
20802: ST_TO_ADDR
20803: GO 23326
20805: LD_INT 7
20807: DOUBLE
20808: EQUAL
20809: IFTRUE 20813
20811: GO 20925
20813: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
20814: LD_ADDR_VAR 0 1
20818: PUSH
20819: LD_INT 2
20821: PUSH
20822: LD_INT 4
20824: PUSH
20825: LD_INT 5
20827: PUSH
20828: LD_INT 7
20830: PUSH
20831: LD_INT 11
20833: PUSH
20834: LD_INT 12
20836: PUSH
20837: LD_INT 15
20839: PUSH
20840: LD_INT 16
20842: PUSH
20843: LD_INT 20
20845: PUSH
20846: LD_INT 21
20848: PUSH
20849: LD_INT 22
20851: PUSH
20852: LD_INT 23
20854: PUSH
20855: LD_INT 25
20857: PUSH
20858: LD_INT 26
20860: PUSH
20861: EMPTY
20862: LIST
20863: LIST
20864: LIST
20865: LIST
20866: LIST
20867: LIST
20868: LIST
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: PUSH
20877: LD_INT 101
20879: PUSH
20880: LD_INT 102
20882: PUSH
20883: LD_INT 103
20885: PUSH
20886: LD_INT 105
20888: PUSH
20889: LD_INT 106
20891: PUSH
20892: LD_INT 108
20894: PUSH
20895: LD_INT 112
20897: PUSH
20898: LD_INT 116
20900: PUSH
20901: LD_INT 117
20903: PUSH
20904: LD_INT 118
20906: PUSH
20907: EMPTY
20908: LIST
20909: LIST
20910: LIST
20911: LIST
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: LIST
20918: PUSH
20919: EMPTY
20920: LIST
20921: LIST
20922: ST_TO_ADDR
20923: GO 23326
20925: LD_INT 8
20927: DOUBLE
20928: EQUAL
20929: IFTRUE 20933
20931: GO 21073
20933: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
20934: LD_ADDR_VAR 0 1
20938: PUSH
20939: LD_INT 2
20941: PUSH
20942: LD_INT 4
20944: PUSH
20945: LD_INT 5
20947: PUSH
20948: LD_INT 6
20950: PUSH
20951: LD_INT 7
20953: PUSH
20954: LD_INT 8
20956: PUSH
20957: LD_INT 11
20959: PUSH
20960: LD_INT 12
20962: PUSH
20963: LD_INT 15
20965: PUSH
20966: LD_INT 16
20968: PUSH
20969: LD_INT 20
20971: PUSH
20972: LD_INT 21
20974: PUSH
20975: LD_INT 22
20977: PUSH
20978: LD_INT 23
20980: PUSH
20981: LD_INT 25
20983: PUSH
20984: LD_INT 26
20986: PUSH
20987: LD_INT 30
20989: PUSH
20990: LD_INT 31
20992: PUSH
20993: LD_INT 32
20995: PUSH
20996: LD_INT 36
20998: PUSH
20999: EMPTY
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: LIST
21005: LIST
21006: LIST
21007: LIST
21008: LIST
21009: LIST
21010: LIST
21011: LIST
21012: LIST
21013: LIST
21014: LIST
21015: LIST
21016: LIST
21017: LIST
21018: LIST
21019: LIST
21020: PUSH
21021: LD_INT 101
21023: PUSH
21024: LD_INT 102
21026: PUSH
21027: LD_INT 103
21029: PUSH
21030: LD_INT 105
21032: PUSH
21033: LD_INT 106
21035: PUSH
21036: LD_INT 108
21038: PUSH
21039: LD_INT 109
21041: PUSH
21042: LD_INT 112
21044: PUSH
21045: LD_INT 116
21047: PUSH
21048: LD_INT 117
21050: PUSH
21051: LD_INT 118
21053: PUSH
21054: EMPTY
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: LIST
21064: LIST
21065: LIST
21066: PUSH
21067: EMPTY
21068: LIST
21069: LIST
21070: ST_TO_ADDR
21071: GO 23326
21073: LD_INT 9
21075: DOUBLE
21076: EQUAL
21077: IFTRUE 21081
21079: GO 21229
21081: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21082: LD_ADDR_VAR 0 1
21086: PUSH
21087: LD_INT 2
21089: PUSH
21090: LD_INT 4
21092: PUSH
21093: LD_INT 5
21095: PUSH
21096: LD_INT 6
21098: PUSH
21099: LD_INT 7
21101: PUSH
21102: LD_INT 8
21104: PUSH
21105: LD_INT 11
21107: PUSH
21108: LD_INT 12
21110: PUSH
21111: LD_INT 15
21113: PUSH
21114: LD_INT 16
21116: PUSH
21117: LD_INT 20
21119: PUSH
21120: LD_INT 21
21122: PUSH
21123: LD_INT 22
21125: PUSH
21126: LD_INT 23
21128: PUSH
21129: LD_INT 25
21131: PUSH
21132: LD_INT 26
21134: PUSH
21135: LD_INT 28
21137: PUSH
21138: LD_INT 30
21140: PUSH
21141: LD_INT 31
21143: PUSH
21144: LD_INT 32
21146: PUSH
21147: LD_INT 36
21149: PUSH
21150: EMPTY
21151: LIST
21152: LIST
21153: LIST
21154: LIST
21155: LIST
21156: LIST
21157: LIST
21158: LIST
21159: LIST
21160: LIST
21161: LIST
21162: LIST
21163: LIST
21164: LIST
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: LIST
21170: LIST
21171: LIST
21172: PUSH
21173: LD_INT 101
21175: PUSH
21176: LD_INT 102
21178: PUSH
21179: LD_INT 103
21181: PUSH
21182: LD_INT 105
21184: PUSH
21185: LD_INT 106
21187: PUSH
21188: LD_INT 108
21190: PUSH
21191: LD_INT 109
21193: PUSH
21194: LD_INT 112
21196: PUSH
21197: LD_INT 114
21199: PUSH
21200: LD_INT 116
21202: PUSH
21203: LD_INT 117
21205: PUSH
21206: LD_INT 118
21208: PUSH
21209: EMPTY
21210: LIST
21211: LIST
21212: LIST
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: LIST
21218: LIST
21219: LIST
21220: LIST
21221: LIST
21222: PUSH
21223: EMPTY
21224: LIST
21225: LIST
21226: ST_TO_ADDR
21227: GO 23326
21229: LD_INT 10
21231: DOUBLE
21232: EQUAL
21233: IFTRUE 21237
21235: GO 21433
21237: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21238: LD_ADDR_VAR 0 1
21242: PUSH
21243: LD_INT 2
21245: PUSH
21246: LD_INT 4
21248: PUSH
21249: LD_INT 5
21251: PUSH
21252: LD_INT 6
21254: PUSH
21255: LD_INT 7
21257: PUSH
21258: LD_INT 8
21260: PUSH
21261: LD_INT 9
21263: PUSH
21264: LD_INT 10
21266: PUSH
21267: LD_INT 11
21269: PUSH
21270: LD_INT 12
21272: PUSH
21273: LD_INT 13
21275: PUSH
21276: LD_INT 14
21278: PUSH
21279: LD_INT 15
21281: PUSH
21282: LD_INT 16
21284: PUSH
21285: LD_INT 17
21287: PUSH
21288: LD_INT 18
21290: PUSH
21291: LD_INT 19
21293: PUSH
21294: LD_INT 20
21296: PUSH
21297: LD_INT 21
21299: PUSH
21300: LD_INT 22
21302: PUSH
21303: LD_INT 23
21305: PUSH
21306: LD_INT 24
21308: PUSH
21309: LD_INT 25
21311: PUSH
21312: LD_INT 26
21314: PUSH
21315: LD_INT 28
21317: PUSH
21318: LD_INT 30
21320: PUSH
21321: LD_INT 31
21323: PUSH
21324: LD_INT 32
21326: PUSH
21327: LD_INT 36
21329: PUSH
21330: EMPTY
21331: LIST
21332: LIST
21333: LIST
21334: LIST
21335: LIST
21336: LIST
21337: LIST
21338: LIST
21339: LIST
21340: LIST
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: LIST
21346: LIST
21347: LIST
21348: LIST
21349: LIST
21350: LIST
21351: LIST
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: PUSH
21361: LD_INT 101
21363: PUSH
21364: LD_INT 102
21366: PUSH
21367: LD_INT 103
21369: PUSH
21370: LD_INT 104
21372: PUSH
21373: LD_INT 105
21375: PUSH
21376: LD_INT 106
21378: PUSH
21379: LD_INT 107
21381: PUSH
21382: LD_INT 108
21384: PUSH
21385: LD_INT 109
21387: PUSH
21388: LD_INT 110
21390: PUSH
21391: LD_INT 111
21393: PUSH
21394: LD_INT 112
21396: PUSH
21397: LD_INT 114
21399: PUSH
21400: LD_INT 116
21402: PUSH
21403: LD_INT 117
21405: PUSH
21406: LD_INT 118
21408: PUSH
21409: EMPTY
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: LIST
21425: LIST
21426: PUSH
21427: EMPTY
21428: LIST
21429: LIST
21430: ST_TO_ADDR
21431: GO 23326
21433: LD_INT 11
21435: DOUBLE
21436: EQUAL
21437: IFTRUE 21441
21439: GO 21645
21441: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
21442: LD_ADDR_VAR 0 1
21446: PUSH
21447: LD_INT 2
21449: PUSH
21450: LD_INT 3
21452: PUSH
21453: LD_INT 4
21455: PUSH
21456: LD_INT 5
21458: PUSH
21459: LD_INT 6
21461: PUSH
21462: LD_INT 7
21464: PUSH
21465: LD_INT 8
21467: PUSH
21468: LD_INT 9
21470: PUSH
21471: LD_INT 10
21473: PUSH
21474: LD_INT 11
21476: PUSH
21477: LD_INT 12
21479: PUSH
21480: LD_INT 13
21482: PUSH
21483: LD_INT 14
21485: PUSH
21486: LD_INT 15
21488: PUSH
21489: LD_INT 16
21491: PUSH
21492: LD_INT 17
21494: PUSH
21495: LD_INT 18
21497: PUSH
21498: LD_INT 19
21500: PUSH
21501: LD_INT 20
21503: PUSH
21504: LD_INT 21
21506: PUSH
21507: LD_INT 22
21509: PUSH
21510: LD_INT 23
21512: PUSH
21513: LD_INT 24
21515: PUSH
21516: LD_INT 25
21518: PUSH
21519: LD_INT 26
21521: PUSH
21522: LD_INT 28
21524: PUSH
21525: LD_INT 30
21527: PUSH
21528: LD_INT 31
21530: PUSH
21531: LD_INT 32
21533: PUSH
21534: LD_INT 34
21536: PUSH
21537: LD_INT 36
21539: PUSH
21540: EMPTY
21541: LIST
21542: LIST
21543: LIST
21544: LIST
21545: LIST
21546: LIST
21547: LIST
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: LIST
21556: LIST
21557: LIST
21558: LIST
21559: LIST
21560: LIST
21561: LIST
21562: LIST
21563: LIST
21564: LIST
21565: LIST
21566: LIST
21567: LIST
21568: LIST
21569: LIST
21570: LIST
21571: LIST
21572: PUSH
21573: LD_INT 101
21575: PUSH
21576: LD_INT 102
21578: PUSH
21579: LD_INT 103
21581: PUSH
21582: LD_INT 104
21584: PUSH
21585: LD_INT 105
21587: PUSH
21588: LD_INT 106
21590: PUSH
21591: LD_INT 107
21593: PUSH
21594: LD_INT 108
21596: PUSH
21597: LD_INT 109
21599: PUSH
21600: LD_INT 110
21602: PUSH
21603: LD_INT 111
21605: PUSH
21606: LD_INT 112
21608: PUSH
21609: LD_INT 114
21611: PUSH
21612: LD_INT 116
21614: PUSH
21615: LD_INT 117
21617: PUSH
21618: LD_INT 118
21620: PUSH
21621: EMPTY
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: LIST
21636: LIST
21637: LIST
21638: PUSH
21639: EMPTY
21640: LIST
21641: LIST
21642: ST_TO_ADDR
21643: GO 23326
21645: LD_INT 12
21647: DOUBLE
21648: EQUAL
21649: IFTRUE 21653
21651: GO 21873
21653: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
21654: LD_ADDR_VAR 0 1
21658: PUSH
21659: LD_INT 1
21661: PUSH
21662: LD_INT 2
21664: PUSH
21665: LD_INT 3
21667: PUSH
21668: LD_INT 4
21670: PUSH
21671: LD_INT 5
21673: PUSH
21674: LD_INT 6
21676: PUSH
21677: LD_INT 7
21679: PUSH
21680: LD_INT 8
21682: PUSH
21683: LD_INT 9
21685: PUSH
21686: LD_INT 10
21688: PUSH
21689: LD_INT 11
21691: PUSH
21692: LD_INT 12
21694: PUSH
21695: LD_INT 13
21697: PUSH
21698: LD_INT 14
21700: PUSH
21701: LD_INT 15
21703: PUSH
21704: LD_INT 16
21706: PUSH
21707: LD_INT 17
21709: PUSH
21710: LD_INT 18
21712: PUSH
21713: LD_INT 19
21715: PUSH
21716: LD_INT 20
21718: PUSH
21719: LD_INT 21
21721: PUSH
21722: LD_INT 22
21724: PUSH
21725: LD_INT 23
21727: PUSH
21728: LD_INT 24
21730: PUSH
21731: LD_INT 25
21733: PUSH
21734: LD_INT 26
21736: PUSH
21737: LD_INT 27
21739: PUSH
21740: LD_INT 28
21742: PUSH
21743: LD_INT 30
21745: PUSH
21746: LD_INT 31
21748: PUSH
21749: LD_INT 32
21751: PUSH
21752: LD_INT 33
21754: PUSH
21755: LD_INT 34
21757: PUSH
21758: LD_INT 36
21760: PUSH
21761: EMPTY
21762: LIST
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: LIST
21769: LIST
21770: LIST
21771: LIST
21772: LIST
21773: LIST
21774: LIST
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: PUSH
21797: LD_INT 101
21799: PUSH
21800: LD_INT 102
21802: PUSH
21803: LD_INT 103
21805: PUSH
21806: LD_INT 104
21808: PUSH
21809: LD_INT 105
21811: PUSH
21812: LD_INT 106
21814: PUSH
21815: LD_INT 107
21817: PUSH
21818: LD_INT 108
21820: PUSH
21821: LD_INT 109
21823: PUSH
21824: LD_INT 110
21826: PUSH
21827: LD_INT 111
21829: PUSH
21830: LD_INT 112
21832: PUSH
21833: LD_INT 113
21835: PUSH
21836: LD_INT 114
21838: PUSH
21839: LD_INT 116
21841: PUSH
21842: LD_INT 117
21844: PUSH
21845: LD_INT 118
21847: PUSH
21848: EMPTY
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: PUSH
21867: EMPTY
21868: LIST
21869: LIST
21870: ST_TO_ADDR
21871: GO 23326
21873: LD_INT 13
21875: DOUBLE
21876: EQUAL
21877: IFTRUE 21881
21879: GO 22089
21881: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
21882: LD_ADDR_VAR 0 1
21886: PUSH
21887: LD_INT 1
21889: PUSH
21890: LD_INT 2
21892: PUSH
21893: LD_INT 3
21895: PUSH
21896: LD_INT 4
21898: PUSH
21899: LD_INT 5
21901: PUSH
21902: LD_INT 8
21904: PUSH
21905: LD_INT 9
21907: PUSH
21908: LD_INT 10
21910: PUSH
21911: LD_INT 11
21913: PUSH
21914: LD_INT 12
21916: PUSH
21917: LD_INT 14
21919: PUSH
21920: LD_INT 15
21922: PUSH
21923: LD_INT 16
21925: PUSH
21926: LD_INT 17
21928: PUSH
21929: LD_INT 18
21931: PUSH
21932: LD_INT 19
21934: PUSH
21935: LD_INT 20
21937: PUSH
21938: LD_INT 21
21940: PUSH
21941: LD_INT 22
21943: PUSH
21944: LD_INT 23
21946: PUSH
21947: LD_INT 24
21949: PUSH
21950: LD_INT 25
21952: PUSH
21953: LD_INT 26
21955: PUSH
21956: LD_INT 27
21958: PUSH
21959: LD_INT 28
21961: PUSH
21962: LD_INT 30
21964: PUSH
21965: LD_INT 31
21967: PUSH
21968: LD_INT 32
21970: PUSH
21971: LD_INT 33
21973: PUSH
21974: LD_INT 34
21976: PUSH
21977: LD_INT 36
21979: PUSH
21980: EMPTY
21981: LIST
21982: LIST
21983: LIST
21984: LIST
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: PUSH
22013: LD_INT 101
22015: PUSH
22016: LD_INT 102
22018: PUSH
22019: LD_INT 103
22021: PUSH
22022: LD_INT 104
22024: PUSH
22025: LD_INT 105
22027: PUSH
22028: LD_INT 106
22030: PUSH
22031: LD_INT 107
22033: PUSH
22034: LD_INT 108
22036: PUSH
22037: LD_INT 109
22039: PUSH
22040: LD_INT 110
22042: PUSH
22043: LD_INT 111
22045: PUSH
22046: LD_INT 112
22048: PUSH
22049: LD_INT 113
22051: PUSH
22052: LD_INT 114
22054: PUSH
22055: LD_INT 116
22057: PUSH
22058: LD_INT 117
22060: PUSH
22061: LD_INT 118
22063: PUSH
22064: EMPTY
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: PUSH
22083: EMPTY
22084: LIST
22085: LIST
22086: ST_TO_ADDR
22087: GO 23326
22089: LD_INT 14
22091: DOUBLE
22092: EQUAL
22093: IFTRUE 22097
22095: GO 22321
22097: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22098: LD_ADDR_VAR 0 1
22102: PUSH
22103: LD_INT 1
22105: PUSH
22106: LD_INT 2
22108: PUSH
22109: LD_INT 3
22111: PUSH
22112: LD_INT 4
22114: PUSH
22115: LD_INT 5
22117: PUSH
22118: LD_INT 6
22120: PUSH
22121: LD_INT 7
22123: PUSH
22124: LD_INT 8
22126: PUSH
22127: LD_INT 9
22129: PUSH
22130: LD_INT 10
22132: PUSH
22133: LD_INT 11
22135: PUSH
22136: LD_INT 12
22138: PUSH
22139: LD_INT 13
22141: PUSH
22142: LD_INT 14
22144: PUSH
22145: LD_INT 15
22147: PUSH
22148: LD_INT 16
22150: PUSH
22151: LD_INT 17
22153: PUSH
22154: LD_INT 18
22156: PUSH
22157: LD_INT 19
22159: PUSH
22160: LD_INT 20
22162: PUSH
22163: LD_INT 21
22165: PUSH
22166: LD_INT 22
22168: PUSH
22169: LD_INT 23
22171: PUSH
22172: LD_INT 24
22174: PUSH
22175: LD_INT 25
22177: PUSH
22178: LD_INT 26
22180: PUSH
22181: LD_INT 27
22183: PUSH
22184: LD_INT 28
22186: PUSH
22187: LD_INT 29
22189: PUSH
22190: LD_INT 30
22192: PUSH
22193: LD_INT 31
22195: PUSH
22196: LD_INT 32
22198: PUSH
22199: LD_INT 33
22201: PUSH
22202: LD_INT 34
22204: PUSH
22205: LD_INT 36
22207: PUSH
22208: EMPTY
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: PUSH
22245: LD_INT 101
22247: PUSH
22248: LD_INT 102
22250: PUSH
22251: LD_INT 103
22253: PUSH
22254: LD_INT 104
22256: PUSH
22257: LD_INT 105
22259: PUSH
22260: LD_INT 106
22262: PUSH
22263: LD_INT 107
22265: PUSH
22266: LD_INT 108
22268: PUSH
22269: LD_INT 109
22271: PUSH
22272: LD_INT 110
22274: PUSH
22275: LD_INT 111
22277: PUSH
22278: LD_INT 112
22280: PUSH
22281: LD_INT 113
22283: PUSH
22284: LD_INT 114
22286: PUSH
22287: LD_INT 116
22289: PUSH
22290: LD_INT 117
22292: PUSH
22293: LD_INT 118
22295: PUSH
22296: EMPTY
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: PUSH
22315: EMPTY
22316: LIST
22317: LIST
22318: ST_TO_ADDR
22319: GO 23326
22321: LD_INT 15
22323: DOUBLE
22324: EQUAL
22325: IFTRUE 22329
22327: GO 22553
22329: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
22330: LD_ADDR_VAR 0 1
22334: PUSH
22335: LD_INT 1
22337: PUSH
22338: LD_INT 2
22340: PUSH
22341: LD_INT 3
22343: PUSH
22344: LD_INT 4
22346: PUSH
22347: LD_INT 5
22349: PUSH
22350: LD_INT 6
22352: PUSH
22353: LD_INT 7
22355: PUSH
22356: LD_INT 8
22358: PUSH
22359: LD_INT 9
22361: PUSH
22362: LD_INT 10
22364: PUSH
22365: LD_INT 11
22367: PUSH
22368: LD_INT 12
22370: PUSH
22371: LD_INT 13
22373: PUSH
22374: LD_INT 14
22376: PUSH
22377: LD_INT 15
22379: PUSH
22380: LD_INT 16
22382: PUSH
22383: LD_INT 17
22385: PUSH
22386: LD_INT 18
22388: PUSH
22389: LD_INT 19
22391: PUSH
22392: LD_INT 20
22394: PUSH
22395: LD_INT 21
22397: PUSH
22398: LD_INT 22
22400: PUSH
22401: LD_INT 23
22403: PUSH
22404: LD_INT 24
22406: PUSH
22407: LD_INT 25
22409: PUSH
22410: LD_INT 26
22412: PUSH
22413: LD_INT 27
22415: PUSH
22416: LD_INT 28
22418: PUSH
22419: LD_INT 29
22421: PUSH
22422: LD_INT 30
22424: PUSH
22425: LD_INT 31
22427: PUSH
22428: LD_INT 32
22430: PUSH
22431: LD_INT 33
22433: PUSH
22434: LD_INT 34
22436: PUSH
22437: LD_INT 36
22439: PUSH
22440: EMPTY
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: PUSH
22477: LD_INT 101
22479: PUSH
22480: LD_INT 102
22482: PUSH
22483: LD_INT 103
22485: PUSH
22486: LD_INT 104
22488: PUSH
22489: LD_INT 105
22491: PUSH
22492: LD_INT 106
22494: PUSH
22495: LD_INT 107
22497: PUSH
22498: LD_INT 108
22500: PUSH
22501: LD_INT 109
22503: PUSH
22504: LD_INT 110
22506: PUSH
22507: LD_INT 111
22509: PUSH
22510: LD_INT 112
22512: PUSH
22513: LD_INT 113
22515: PUSH
22516: LD_INT 114
22518: PUSH
22519: LD_INT 116
22521: PUSH
22522: LD_INT 117
22524: PUSH
22525: LD_INT 118
22527: PUSH
22528: EMPTY
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: PUSH
22547: EMPTY
22548: LIST
22549: LIST
22550: ST_TO_ADDR
22551: GO 23326
22553: LD_INT 16
22555: DOUBLE
22556: EQUAL
22557: IFTRUE 22561
22559: GO 22697
22561: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
22562: LD_ADDR_VAR 0 1
22566: PUSH
22567: LD_INT 2
22569: PUSH
22570: LD_INT 4
22572: PUSH
22573: LD_INT 5
22575: PUSH
22576: LD_INT 7
22578: PUSH
22579: LD_INT 11
22581: PUSH
22582: LD_INT 12
22584: PUSH
22585: LD_INT 15
22587: PUSH
22588: LD_INT 16
22590: PUSH
22591: LD_INT 20
22593: PUSH
22594: LD_INT 21
22596: PUSH
22597: LD_INT 22
22599: PUSH
22600: LD_INT 23
22602: PUSH
22603: LD_INT 25
22605: PUSH
22606: LD_INT 26
22608: PUSH
22609: LD_INT 30
22611: PUSH
22612: LD_INT 31
22614: PUSH
22615: LD_INT 32
22617: PUSH
22618: LD_INT 33
22620: PUSH
22621: LD_INT 34
22623: PUSH
22624: EMPTY
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: PUSH
22645: LD_INT 101
22647: PUSH
22648: LD_INT 102
22650: PUSH
22651: LD_INT 103
22653: PUSH
22654: LD_INT 106
22656: PUSH
22657: LD_INT 108
22659: PUSH
22660: LD_INT 112
22662: PUSH
22663: LD_INT 113
22665: PUSH
22666: LD_INT 114
22668: PUSH
22669: LD_INT 116
22671: PUSH
22672: LD_INT 117
22674: PUSH
22675: LD_INT 118
22677: PUSH
22678: EMPTY
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: PUSH
22691: EMPTY
22692: LIST
22693: LIST
22694: ST_TO_ADDR
22695: GO 23326
22697: LD_INT 17
22699: DOUBLE
22700: EQUAL
22701: IFTRUE 22705
22703: GO 22929
22705: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
22706: LD_ADDR_VAR 0 1
22710: PUSH
22711: LD_INT 1
22713: PUSH
22714: LD_INT 2
22716: PUSH
22717: LD_INT 3
22719: PUSH
22720: LD_INT 4
22722: PUSH
22723: LD_INT 5
22725: PUSH
22726: LD_INT 6
22728: PUSH
22729: LD_INT 7
22731: PUSH
22732: LD_INT 8
22734: PUSH
22735: LD_INT 9
22737: PUSH
22738: LD_INT 10
22740: PUSH
22741: LD_INT 11
22743: PUSH
22744: LD_INT 12
22746: PUSH
22747: LD_INT 13
22749: PUSH
22750: LD_INT 14
22752: PUSH
22753: LD_INT 15
22755: PUSH
22756: LD_INT 16
22758: PUSH
22759: LD_INT 17
22761: PUSH
22762: LD_INT 18
22764: PUSH
22765: LD_INT 19
22767: PUSH
22768: LD_INT 20
22770: PUSH
22771: LD_INT 21
22773: PUSH
22774: LD_INT 22
22776: PUSH
22777: LD_INT 23
22779: PUSH
22780: LD_INT 24
22782: PUSH
22783: LD_INT 25
22785: PUSH
22786: LD_INT 26
22788: PUSH
22789: LD_INT 27
22791: PUSH
22792: LD_INT 28
22794: PUSH
22795: LD_INT 29
22797: PUSH
22798: LD_INT 30
22800: PUSH
22801: LD_INT 31
22803: PUSH
22804: LD_INT 32
22806: PUSH
22807: LD_INT 33
22809: PUSH
22810: LD_INT 34
22812: PUSH
22813: LD_INT 36
22815: PUSH
22816: EMPTY
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: PUSH
22853: LD_INT 101
22855: PUSH
22856: LD_INT 102
22858: PUSH
22859: LD_INT 103
22861: PUSH
22862: LD_INT 104
22864: PUSH
22865: LD_INT 105
22867: PUSH
22868: LD_INT 106
22870: PUSH
22871: LD_INT 107
22873: PUSH
22874: LD_INT 108
22876: PUSH
22877: LD_INT 109
22879: PUSH
22880: LD_INT 110
22882: PUSH
22883: LD_INT 111
22885: PUSH
22886: LD_INT 112
22888: PUSH
22889: LD_INT 113
22891: PUSH
22892: LD_INT 114
22894: PUSH
22895: LD_INT 116
22897: PUSH
22898: LD_INT 117
22900: PUSH
22901: LD_INT 118
22903: PUSH
22904: EMPTY
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: PUSH
22923: EMPTY
22924: LIST
22925: LIST
22926: ST_TO_ADDR
22927: GO 23326
22929: LD_INT 18
22931: DOUBLE
22932: EQUAL
22933: IFTRUE 22937
22935: GO 23085
22937: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
22938: LD_ADDR_VAR 0 1
22942: PUSH
22943: LD_INT 2
22945: PUSH
22946: LD_INT 4
22948: PUSH
22949: LD_INT 5
22951: PUSH
22952: LD_INT 7
22954: PUSH
22955: LD_INT 11
22957: PUSH
22958: LD_INT 12
22960: PUSH
22961: LD_INT 15
22963: PUSH
22964: LD_INT 16
22966: PUSH
22967: LD_INT 20
22969: PUSH
22970: LD_INT 21
22972: PUSH
22973: LD_INT 22
22975: PUSH
22976: LD_INT 23
22978: PUSH
22979: LD_INT 25
22981: PUSH
22982: LD_INT 26
22984: PUSH
22985: LD_INT 30
22987: PUSH
22988: LD_INT 31
22990: PUSH
22991: LD_INT 32
22993: PUSH
22994: LD_INT 33
22996: PUSH
22997: LD_INT 34
22999: PUSH
23000: LD_INT 35
23002: PUSH
23003: LD_INT 36
23005: PUSH
23006: EMPTY
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: PUSH
23029: LD_INT 101
23031: PUSH
23032: LD_INT 102
23034: PUSH
23035: LD_INT 103
23037: PUSH
23038: LD_INT 106
23040: PUSH
23041: LD_INT 108
23043: PUSH
23044: LD_INT 112
23046: PUSH
23047: LD_INT 113
23049: PUSH
23050: LD_INT 114
23052: PUSH
23053: LD_INT 115
23055: PUSH
23056: LD_INT 116
23058: PUSH
23059: LD_INT 117
23061: PUSH
23062: LD_INT 118
23064: PUSH
23065: EMPTY
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: PUSH
23079: EMPTY
23080: LIST
23081: LIST
23082: ST_TO_ADDR
23083: GO 23326
23085: LD_INT 19
23087: DOUBLE
23088: EQUAL
23089: IFTRUE 23093
23091: GO 23325
23093: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23094: LD_ADDR_VAR 0 1
23098: PUSH
23099: LD_INT 1
23101: PUSH
23102: LD_INT 2
23104: PUSH
23105: LD_INT 3
23107: PUSH
23108: LD_INT 4
23110: PUSH
23111: LD_INT 5
23113: PUSH
23114: LD_INT 6
23116: PUSH
23117: LD_INT 7
23119: PUSH
23120: LD_INT 8
23122: PUSH
23123: LD_INT 9
23125: PUSH
23126: LD_INT 10
23128: PUSH
23129: LD_INT 11
23131: PUSH
23132: LD_INT 12
23134: PUSH
23135: LD_INT 13
23137: PUSH
23138: LD_INT 14
23140: PUSH
23141: LD_INT 15
23143: PUSH
23144: LD_INT 16
23146: PUSH
23147: LD_INT 17
23149: PUSH
23150: LD_INT 18
23152: PUSH
23153: LD_INT 19
23155: PUSH
23156: LD_INT 20
23158: PUSH
23159: LD_INT 21
23161: PUSH
23162: LD_INT 22
23164: PUSH
23165: LD_INT 23
23167: PUSH
23168: LD_INT 24
23170: PUSH
23171: LD_INT 25
23173: PUSH
23174: LD_INT 26
23176: PUSH
23177: LD_INT 27
23179: PUSH
23180: LD_INT 28
23182: PUSH
23183: LD_INT 29
23185: PUSH
23186: LD_INT 30
23188: PUSH
23189: LD_INT 31
23191: PUSH
23192: LD_INT 32
23194: PUSH
23195: LD_INT 33
23197: PUSH
23198: LD_INT 34
23200: PUSH
23201: LD_INT 35
23203: PUSH
23204: LD_INT 36
23206: PUSH
23207: EMPTY
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: PUSH
23245: LD_INT 101
23247: PUSH
23248: LD_INT 102
23250: PUSH
23251: LD_INT 103
23253: PUSH
23254: LD_INT 104
23256: PUSH
23257: LD_INT 105
23259: PUSH
23260: LD_INT 106
23262: PUSH
23263: LD_INT 107
23265: PUSH
23266: LD_INT 108
23268: PUSH
23269: LD_INT 109
23271: PUSH
23272: LD_INT 110
23274: PUSH
23275: LD_INT 111
23277: PUSH
23278: LD_INT 112
23280: PUSH
23281: LD_INT 113
23283: PUSH
23284: LD_INT 114
23286: PUSH
23287: LD_INT 115
23289: PUSH
23290: LD_INT 116
23292: PUSH
23293: LD_INT 117
23295: PUSH
23296: LD_INT 118
23298: PUSH
23299: EMPTY
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: PUSH
23319: EMPTY
23320: LIST
23321: LIST
23322: ST_TO_ADDR
23323: GO 23326
23325: POP
// end else
23326: GO 23557
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
23328: LD_ADDR_VAR 0 1
23332: PUSH
23333: LD_INT 1
23335: PUSH
23336: LD_INT 2
23338: PUSH
23339: LD_INT 3
23341: PUSH
23342: LD_INT 4
23344: PUSH
23345: LD_INT 5
23347: PUSH
23348: LD_INT 6
23350: PUSH
23351: LD_INT 7
23353: PUSH
23354: LD_INT 8
23356: PUSH
23357: LD_INT 9
23359: PUSH
23360: LD_INT 10
23362: PUSH
23363: LD_INT 11
23365: PUSH
23366: LD_INT 12
23368: PUSH
23369: LD_INT 13
23371: PUSH
23372: LD_INT 14
23374: PUSH
23375: LD_INT 15
23377: PUSH
23378: LD_INT 16
23380: PUSH
23381: LD_INT 17
23383: PUSH
23384: LD_INT 18
23386: PUSH
23387: LD_INT 19
23389: PUSH
23390: LD_INT 20
23392: PUSH
23393: LD_INT 21
23395: PUSH
23396: LD_INT 22
23398: PUSH
23399: LD_INT 23
23401: PUSH
23402: LD_INT 24
23404: PUSH
23405: LD_INT 25
23407: PUSH
23408: LD_INT 26
23410: PUSH
23411: LD_INT 27
23413: PUSH
23414: LD_INT 28
23416: PUSH
23417: LD_INT 29
23419: PUSH
23420: LD_INT 30
23422: PUSH
23423: LD_INT 31
23425: PUSH
23426: LD_INT 32
23428: PUSH
23429: LD_INT 33
23431: PUSH
23432: LD_INT 34
23434: PUSH
23435: LD_INT 35
23437: PUSH
23438: LD_INT 36
23440: PUSH
23441: EMPTY
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: PUSH
23479: LD_INT 101
23481: PUSH
23482: LD_INT 102
23484: PUSH
23485: LD_INT 103
23487: PUSH
23488: LD_INT 104
23490: PUSH
23491: LD_INT 105
23493: PUSH
23494: LD_INT 106
23496: PUSH
23497: LD_INT 107
23499: PUSH
23500: LD_INT 108
23502: PUSH
23503: LD_INT 109
23505: PUSH
23506: LD_INT 110
23508: PUSH
23509: LD_INT 111
23511: PUSH
23512: LD_INT 112
23514: PUSH
23515: LD_INT 113
23517: PUSH
23518: LD_INT 114
23520: PUSH
23521: LD_INT 115
23523: PUSH
23524: LD_INT 116
23526: PUSH
23527: LD_INT 117
23529: PUSH
23530: LD_INT 118
23532: PUSH
23533: EMPTY
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: PUSH
23553: EMPTY
23554: LIST
23555: LIST
23556: ST_TO_ADDR
// if result then
23557: LD_VAR 0 1
23561: IFFALSE 23850
// begin normal :=  ;
23563: LD_ADDR_VAR 0 3
23567: PUSH
23568: LD_STRING 
23570: ST_TO_ADDR
// hardcore :=  ;
23571: LD_ADDR_VAR 0 4
23575: PUSH
23576: LD_STRING 
23578: ST_TO_ADDR
// for i = 1 to normalCounter do
23579: LD_ADDR_VAR 0 5
23583: PUSH
23584: DOUBLE
23585: LD_INT 1
23587: DEC
23588: ST_TO_ADDR
23589: LD_EXP 79
23593: PUSH
23594: FOR_TO
23595: IFFALSE 23696
// begin tmp := 0 ;
23597: LD_ADDR_VAR 0 2
23601: PUSH
23602: LD_STRING 0
23604: ST_TO_ADDR
// if result [ 1 ] then
23605: LD_VAR 0 1
23609: PUSH
23610: LD_INT 1
23612: ARRAY
23613: IFFALSE 23678
// if result [ 1 ] [ 1 ] = i then
23615: LD_VAR 0 1
23619: PUSH
23620: LD_INT 1
23622: ARRAY
23623: PUSH
23624: LD_INT 1
23626: ARRAY
23627: PUSH
23628: LD_VAR 0 5
23632: EQUAL
23633: IFFALSE 23678
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23635: LD_ADDR_VAR 0 1
23639: PUSH
23640: LD_VAR 0 1
23644: PPUSH
23645: LD_INT 1
23647: PPUSH
23648: LD_VAR 0 1
23652: PUSH
23653: LD_INT 1
23655: ARRAY
23656: PPUSH
23657: LD_INT 1
23659: PPUSH
23660: CALL_OW 3
23664: PPUSH
23665: CALL_OW 1
23669: ST_TO_ADDR
// tmp := 1 ;
23670: LD_ADDR_VAR 0 2
23674: PUSH
23675: LD_STRING 1
23677: ST_TO_ADDR
// end ; normal := normal & tmp ;
23678: LD_ADDR_VAR 0 3
23682: PUSH
23683: LD_VAR 0 3
23687: PUSH
23688: LD_VAR 0 2
23692: STR
23693: ST_TO_ADDR
// end ;
23694: GO 23594
23696: POP
23697: POP
// for i = 1 to hardcoreCounter do
23698: LD_ADDR_VAR 0 5
23702: PUSH
23703: DOUBLE
23704: LD_INT 1
23706: DEC
23707: ST_TO_ADDR
23708: LD_EXP 80
23712: PUSH
23713: FOR_TO
23714: IFFALSE 23819
// begin tmp := 0 ;
23716: LD_ADDR_VAR 0 2
23720: PUSH
23721: LD_STRING 0
23723: ST_TO_ADDR
// if result [ 2 ] then
23724: LD_VAR 0 1
23728: PUSH
23729: LD_INT 2
23731: ARRAY
23732: IFFALSE 23801
// if result [ 2 ] [ 1 ] = 100 + i then
23734: LD_VAR 0 1
23738: PUSH
23739: LD_INT 2
23741: ARRAY
23742: PUSH
23743: LD_INT 1
23745: ARRAY
23746: PUSH
23747: LD_INT 100
23749: PUSH
23750: LD_VAR 0 5
23754: PLUS
23755: EQUAL
23756: IFFALSE 23801
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
23758: LD_ADDR_VAR 0 1
23762: PUSH
23763: LD_VAR 0 1
23767: PPUSH
23768: LD_INT 2
23770: PPUSH
23771: LD_VAR 0 1
23775: PUSH
23776: LD_INT 2
23778: ARRAY
23779: PPUSH
23780: LD_INT 1
23782: PPUSH
23783: CALL_OW 3
23787: PPUSH
23788: CALL_OW 1
23792: ST_TO_ADDR
// tmp := 1 ;
23793: LD_ADDR_VAR 0 2
23797: PUSH
23798: LD_STRING 1
23800: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
23801: LD_ADDR_VAR 0 4
23805: PUSH
23806: LD_VAR 0 4
23810: PUSH
23811: LD_VAR 0 2
23815: STR
23816: ST_TO_ADDR
// end ;
23817: GO 23713
23819: POP
23820: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
23821: LD_STRING getStreamItemsFromMission("
23823: PUSH
23824: LD_VAR 0 3
23828: STR
23829: PUSH
23830: LD_STRING ","
23832: STR
23833: PUSH
23834: LD_VAR 0 4
23838: STR
23839: PUSH
23840: LD_STRING ")
23842: STR
23843: PPUSH
23844: CALL_OW 559
// end else
23848: GO 23857
// ToLua ( getStreamItemsFromMission("","") ) ;
23850: LD_STRING getStreamItemsFromMission("","")
23852: PPUSH
23853: CALL_OW 559
// end ;
23857: LD_VAR 0 1
23861: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
23862: LD_EXP 78
23866: PUSH
23867: LD_EXP 83
23871: AND
23872: IFFALSE 23996
23874: GO 23876
23876: DISABLE
23877: LD_INT 0
23879: PPUSH
23880: PPUSH
// begin enable ;
23881: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
23882: LD_ADDR_VAR 0 2
23886: PUSH
23887: LD_INT 22
23889: PUSH
23890: LD_OWVAR 2
23894: PUSH
23895: EMPTY
23896: LIST
23897: LIST
23898: PUSH
23899: LD_INT 2
23901: PUSH
23902: LD_INT 34
23904: PUSH
23905: LD_INT 7
23907: PUSH
23908: EMPTY
23909: LIST
23910: LIST
23911: PUSH
23912: LD_INT 34
23914: PUSH
23915: LD_INT 45
23917: PUSH
23918: EMPTY
23919: LIST
23920: LIST
23921: PUSH
23922: LD_INT 34
23924: PUSH
23925: LD_INT 28
23927: PUSH
23928: EMPTY
23929: LIST
23930: LIST
23931: PUSH
23932: LD_INT 34
23934: PUSH
23935: LD_INT 47
23937: PUSH
23938: EMPTY
23939: LIST
23940: LIST
23941: PUSH
23942: EMPTY
23943: LIST
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: PUSH
23949: EMPTY
23950: LIST
23951: LIST
23952: PPUSH
23953: CALL_OW 69
23957: ST_TO_ADDR
// if not tmp then
23958: LD_VAR 0 2
23962: NOT
23963: IFFALSE 23967
// exit ;
23965: GO 23996
// for i in tmp do
23967: LD_ADDR_VAR 0 1
23971: PUSH
23972: LD_VAR 0 2
23976: PUSH
23977: FOR_IN
23978: IFFALSE 23994
// begin SetLives ( i , 0 ) ;
23980: LD_VAR 0 1
23984: PPUSH
23985: LD_INT 0
23987: PPUSH
23988: CALL_OW 234
// end ;
23992: GO 23977
23994: POP
23995: POP
// end ;
23996: PPOPN 2
23998: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
23999: LD_EXP 78
24003: PUSH
24004: LD_EXP 84
24008: AND
24009: IFFALSE 24093
24011: GO 24013
24013: DISABLE
24014: LD_INT 0
24016: PPUSH
24017: PPUSH
// begin enable ;
24018: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24019: LD_ADDR_VAR 0 2
24023: PUSH
24024: LD_INT 22
24026: PUSH
24027: LD_OWVAR 2
24031: PUSH
24032: EMPTY
24033: LIST
24034: LIST
24035: PUSH
24036: LD_INT 32
24038: PUSH
24039: LD_INT 3
24041: PUSH
24042: EMPTY
24043: LIST
24044: LIST
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: PPUSH
24050: CALL_OW 69
24054: ST_TO_ADDR
// if not tmp then
24055: LD_VAR 0 2
24059: NOT
24060: IFFALSE 24064
// exit ;
24062: GO 24093
// for i in tmp do
24064: LD_ADDR_VAR 0 1
24068: PUSH
24069: LD_VAR 0 2
24073: PUSH
24074: FOR_IN
24075: IFFALSE 24091
// begin SetLives ( i , 0 ) ;
24077: LD_VAR 0 1
24081: PPUSH
24082: LD_INT 0
24084: PPUSH
24085: CALL_OW 234
// end ;
24089: GO 24074
24091: POP
24092: POP
// end ;
24093: PPOPN 2
24095: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24096: LD_EXP 78
24100: PUSH
24101: LD_EXP 81
24105: AND
24106: IFFALSE 24199
24108: GO 24110
24110: DISABLE
24111: LD_INT 0
24113: PPUSH
// begin enable ;
24114: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24115: LD_ADDR_VAR 0 1
24119: PUSH
24120: LD_INT 22
24122: PUSH
24123: LD_OWVAR 2
24127: PUSH
24128: EMPTY
24129: LIST
24130: LIST
24131: PUSH
24132: LD_INT 2
24134: PUSH
24135: LD_INT 25
24137: PUSH
24138: LD_INT 5
24140: PUSH
24141: EMPTY
24142: LIST
24143: LIST
24144: PUSH
24145: LD_INT 25
24147: PUSH
24148: LD_INT 9
24150: PUSH
24151: EMPTY
24152: LIST
24153: LIST
24154: PUSH
24155: LD_INT 25
24157: PUSH
24158: LD_INT 8
24160: PUSH
24161: EMPTY
24162: LIST
24163: LIST
24164: PUSH
24165: EMPTY
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: PUSH
24171: EMPTY
24172: LIST
24173: LIST
24174: PPUSH
24175: CALL_OW 69
24179: PUSH
24180: FOR_IN
24181: IFFALSE 24197
// begin SetClass ( i , 1 ) ;
24183: LD_VAR 0 1
24187: PPUSH
24188: LD_INT 1
24190: PPUSH
24191: CALL_OW 336
// end ;
24195: GO 24180
24197: POP
24198: POP
// end ;
24199: PPOPN 1
24201: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24202: LD_EXP 78
24206: PUSH
24207: LD_EXP 82
24211: AND
24212: PUSH
24213: LD_OWVAR 65
24217: PUSH
24218: LD_INT 7
24220: LESS
24221: AND
24222: IFFALSE 24236
24224: GO 24226
24226: DISABLE
// begin enable ;
24227: ENABLE
// game_speed := 7 ;
24228: LD_ADDR_OWVAR 65
24232: PUSH
24233: LD_INT 7
24235: ST_TO_ADDR
// end ;
24236: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24237: LD_EXP 78
24241: PUSH
24242: LD_EXP 85
24246: AND
24247: IFFALSE 24449
24249: GO 24251
24251: DISABLE
24252: LD_INT 0
24254: PPUSH
24255: PPUSH
24256: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24257: LD_ADDR_VAR 0 3
24261: PUSH
24262: LD_INT 81
24264: PUSH
24265: LD_OWVAR 2
24269: PUSH
24270: EMPTY
24271: LIST
24272: LIST
24273: PUSH
24274: LD_INT 21
24276: PUSH
24277: LD_INT 1
24279: PUSH
24280: EMPTY
24281: LIST
24282: LIST
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: PPUSH
24288: CALL_OW 69
24292: ST_TO_ADDR
// if not tmp then
24293: LD_VAR 0 3
24297: NOT
24298: IFFALSE 24302
// exit ;
24300: GO 24449
// if tmp > 5 then
24302: LD_VAR 0 3
24306: PUSH
24307: LD_INT 5
24309: GREATER
24310: IFFALSE 24322
// k := 5 else
24312: LD_ADDR_VAR 0 2
24316: PUSH
24317: LD_INT 5
24319: ST_TO_ADDR
24320: GO 24332
// k := tmp ;
24322: LD_ADDR_VAR 0 2
24326: PUSH
24327: LD_VAR 0 3
24331: ST_TO_ADDR
// for i := 1 to k do
24332: LD_ADDR_VAR 0 1
24336: PUSH
24337: DOUBLE
24338: LD_INT 1
24340: DEC
24341: ST_TO_ADDR
24342: LD_VAR 0 2
24346: PUSH
24347: FOR_TO
24348: IFFALSE 24447
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24350: LD_VAR 0 3
24354: PUSH
24355: LD_VAR 0 1
24359: ARRAY
24360: PPUSH
24361: LD_VAR 0 1
24365: PUSH
24366: LD_INT 4
24368: MOD
24369: PUSH
24370: LD_INT 1
24372: PLUS
24373: PPUSH
24374: CALL_OW 259
24378: PUSH
24379: LD_INT 10
24381: LESS
24382: IFFALSE 24445
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24384: LD_VAR 0 3
24388: PUSH
24389: LD_VAR 0 1
24393: ARRAY
24394: PPUSH
24395: LD_VAR 0 1
24399: PUSH
24400: LD_INT 4
24402: MOD
24403: PUSH
24404: LD_INT 1
24406: PLUS
24407: PPUSH
24408: LD_VAR 0 3
24412: PUSH
24413: LD_VAR 0 1
24417: ARRAY
24418: PPUSH
24419: LD_VAR 0 1
24423: PUSH
24424: LD_INT 4
24426: MOD
24427: PUSH
24428: LD_INT 1
24430: PLUS
24431: PPUSH
24432: CALL_OW 259
24436: PUSH
24437: LD_INT 1
24439: PLUS
24440: PPUSH
24441: CALL_OW 237
24445: GO 24347
24447: POP
24448: POP
// end ;
24449: PPOPN 3
24451: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
24452: LD_EXP 78
24456: PUSH
24457: LD_EXP 86
24461: AND
24462: IFFALSE 24482
24464: GO 24466
24466: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
24467: LD_INT 4
24469: PPUSH
24470: LD_OWVAR 2
24474: PPUSH
24475: LD_INT 0
24477: PPUSH
24478: CALL_OW 324
24482: END
// every 0 0$1 trigger StreamModeActive and sShovel do
24483: LD_EXP 78
24487: PUSH
24488: LD_EXP 115
24492: AND
24493: IFFALSE 24513
24495: GO 24497
24497: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
24498: LD_INT 19
24500: PPUSH
24501: LD_OWVAR 2
24505: PPUSH
24506: LD_INT 0
24508: PPUSH
24509: CALL_OW 324
24513: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
24514: LD_EXP 78
24518: PUSH
24519: LD_EXP 87
24523: AND
24524: IFFALSE 24626
24526: GO 24528
24528: DISABLE
24529: LD_INT 0
24531: PPUSH
24532: PPUSH
// begin enable ;
24533: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
24534: LD_ADDR_VAR 0 2
24538: PUSH
24539: LD_INT 22
24541: PUSH
24542: LD_OWVAR 2
24546: PUSH
24547: EMPTY
24548: LIST
24549: LIST
24550: PUSH
24551: LD_INT 2
24553: PUSH
24554: LD_INT 34
24556: PUSH
24557: LD_INT 11
24559: PUSH
24560: EMPTY
24561: LIST
24562: LIST
24563: PUSH
24564: LD_INT 34
24566: PUSH
24567: LD_INT 30
24569: PUSH
24570: EMPTY
24571: LIST
24572: LIST
24573: PUSH
24574: EMPTY
24575: LIST
24576: LIST
24577: LIST
24578: PUSH
24579: EMPTY
24580: LIST
24581: LIST
24582: PPUSH
24583: CALL_OW 69
24587: ST_TO_ADDR
// if not tmp then
24588: LD_VAR 0 2
24592: NOT
24593: IFFALSE 24597
// exit ;
24595: GO 24626
// for i in tmp do
24597: LD_ADDR_VAR 0 1
24601: PUSH
24602: LD_VAR 0 2
24606: PUSH
24607: FOR_IN
24608: IFFALSE 24624
// begin SetLives ( i , 0 ) ;
24610: LD_VAR 0 1
24614: PPUSH
24615: LD_INT 0
24617: PPUSH
24618: CALL_OW 234
// end ;
24622: GO 24607
24624: POP
24625: POP
// end ;
24626: PPOPN 2
24628: END
// every 0 0$1 trigger StreamModeActive and sBunker do
24629: LD_EXP 78
24633: PUSH
24634: LD_EXP 88
24638: AND
24639: IFFALSE 24659
24641: GO 24643
24643: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
24644: LD_INT 32
24646: PPUSH
24647: LD_OWVAR 2
24651: PPUSH
24652: LD_INT 0
24654: PPUSH
24655: CALL_OW 324
24659: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
24660: LD_EXP 78
24664: PUSH
24665: LD_EXP 89
24669: AND
24670: IFFALSE 24851
24672: GO 24674
24674: DISABLE
24675: LD_INT 0
24677: PPUSH
24678: PPUSH
24679: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
24680: LD_ADDR_VAR 0 2
24684: PUSH
24685: LD_INT 22
24687: PUSH
24688: LD_OWVAR 2
24692: PUSH
24693: EMPTY
24694: LIST
24695: LIST
24696: PUSH
24697: LD_INT 33
24699: PUSH
24700: LD_INT 3
24702: PUSH
24703: EMPTY
24704: LIST
24705: LIST
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: PPUSH
24711: CALL_OW 69
24715: ST_TO_ADDR
// if not tmp then
24716: LD_VAR 0 2
24720: NOT
24721: IFFALSE 24725
// exit ;
24723: GO 24851
// side := 0 ;
24725: LD_ADDR_VAR 0 3
24729: PUSH
24730: LD_INT 0
24732: ST_TO_ADDR
// for i := 1 to 8 do
24733: LD_ADDR_VAR 0 1
24737: PUSH
24738: DOUBLE
24739: LD_INT 1
24741: DEC
24742: ST_TO_ADDR
24743: LD_INT 8
24745: PUSH
24746: FOR_TO
24747: IFFALSE 24795
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
24749: LD_OWVAR 2
24753: PUSH
24754: LD_VAR 0 1
24758: NONEQUAL
24759: PUSH
24760: LD_OWVAR 2
24764: PPUSH
24765: LD_VAR 0 1
24769: PPUSH
24770: CALL_OW 81
24774: PUSH
24775: LD_INT 2
24777: EQUAL
24778: AND
24779: IFFALSE 24793
// begin side := i ;
24781: LD_ADDR_VAR 0 3
24785: PUSH
24786: LD_VAR 0 1
24790: ST_TO_ADDR
// break ;
24791: GO 24795
// end ;
24793: GO 24746
24795: POP
24796: POP
// if not side then
24797: LD_VAR 0 3
24801: NOT
24802: IFFALSE 24806
// exit ;
24804: GO 24851
// for i := 1 to tmp do
24806: LD_ADDR_VAR 0 1
24810: PUSH
24811: DOUBLE
24812: LD_INT 1
24814: DEC
24815: ST_TO_ADDR
24816: LD_VAR 0 2
24820: PUSH
24821: FOR_TO
24822: IFFALSE 24849
// if Prob ( 60 ) then
24824: LD_INT 60
24826: PPUSH
24827: CALL_OW 13
24831: IFFALSE 24847
// SetSide ( i , side ) ;
24833: LD_VAR 0 1
24837: PPUSH
24838: LD_VAR 0 3
24842: PPUSH
24843: CALL_OW 235
24847: GO 24821
24849: POP
24850: POP
// end ;
24851: PPOPN 3
24853: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
24854: LD_EXP 78
24858: PUSH
24859: LD_EXP 91
24863: AND
24864: IFFALSE 24983
24866: GO 24868
24868: DISABLE
24869: LD_INT 0
24871: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
24872: LD_ADDR_VAR 0 1
24876: PUSH
24877: LD_INT 22
24879: PUSH
24880: LD_OWVAR 2
24884: PUSH
24885: EMPTY
24886: LIST
24887: LIST
24888: PUSH
24889: LD_INT 21
24891: PUSH
24892: LD_INT 1
24894: PUSH
24895: EMPTY
24896: LIST
24897: LIST
24898: PUSH
24899: LD_INT 3
24901: PUSH
24902: LD_INT 23
24904: PUSH
24905: LD_INT 0
24907: PUSH
24908: EMPTY
24909: LIST
24910: LIST
24911: PUSH
24912: EMPTY
24913: LIST
24914: LIST
24915: PUSH
24916: EMPTY
24917: LIST
24918: LIST
24919: LIST
24920: PPUSH
24921: CALL_OW 69
24925: PUSH
24926: FOR_IN
24927: IFFALSE 24981
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
24929: LD_VAR 0 1
24933: PPUSH
24934: CALL_OW 257
24938: PUSH
24939: LD_INT 1
24941: PUSH
24942: LD_INT 2
24944: PUSH
24945: LD_INT 3
24947: PUSH
24948: LD_INT 4
24950: PUSH
24951: EMPTY
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: IN
24957: IFFALSE 24979
// SetClass ( un , rand ( 1 , 4 ) ) ;
24959: LD_VAR 0 1
24963: PPUSH
24964: LD_INT 1
24966: PPUSH
24967: LD_INT 4
24969: PPUSH
24970: CALL_OW 12
24974: PPUSH
24975: CALL_OW 336
24979: GO 24926
24981: POP
24982: POP
// end ;
24983: PPOPN 1
24985: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
24986: LD_EXP 78
24990: PUSH
24991: LD_EXP 90
24995: AND
24996: IFFALSE 25075
24998: GO 25000
25000: DISABLE
25001: LD_INT 0
25003: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25004: LD_ADDR_VAR 0 1
25008: PUSH
25009: LD_INT 22
25011: PUSH
25012: LD_OWVAR 2
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: PUSH
25021: LD_INT 21
25023: PUSH
25024: LD_INT 3
25026: PUSH
25027: EMPTY
25028: LIST
25029: LIST
25030: PUSH
25031: EMPTY
25032: LIST
25033: LIST
25034: PPUSH
25035: CALL_OW 69
25039: ST_TO_ADDR
// if not tmp then
25040: LD_VAR 0 1
25044: NOT
25045: IFFALSE 25049
// exit ;
25047: GO 25075
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25049: LD_VAR 0 1
25053: PUSH
25054: LD_INT 1
25056: PPUSH
25057: LD_VAR 0 1
25061: PPUSH
25062: CALL_OW 12
25066: ARRAY
25067: PPUSH
25068: LD_INT 100
25070: PPUSH
25071: CALL_OW 234
// end ;
25075: PPOPN 1
25077: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25078: LD_EXP 78
25082: PUSH
25083: LD_EXP 92
25087: AND
25088: IFFALSE 25186
25090: GO 25092
25092: DISABLE
25093: LD_INT 0
25095: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25096: LD_ADDR_VAR 0 1
25100: PUSH
25101: LD_INT 22
25103: PUSH
25104: LD_OWVAR 2
25108: PUSH
25109: EMPTY
25110: LIST
25111: LIST
25112: PUSH
25113: LD_INT 21
25115: PUSH
25116: LD_INT 1
25118: PUSH
25119: EMPTY
25120: LIST
25121: LIST
25122: PUSH
25123: EMPTY
25124: LIST
25125: LIST
25126: PPUSH
25127: CALL_OW 69
25131: ST_TO_ADDR
// if not tmp then
25132: LD_VAR 0 1
25136: NOT
25137: IFFALSE 25141
// exit ;
25139: GO 25186
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25141: LD_VAR 0 1
25145: PUSH
25146: LD_INT 1
25148: PPUSH
25149: LD_VAR 0 1
25153: PPUSH
25154: CALL_OW 12
25158: ARRAY
25159: PPUSH
25160: LD_INT 1
25162: PPUSH
25163: LD_INT 4
25165: PPUSH
25166: CALL_OW 12
25170: PPUSH
25171: LD_INT 3000
25173: PPUSH
25174: LD_INT 9000
25176: PPUSH
25177: CALL_OW 12
25181: PPUSH
25182: CALL_OW 492
// end ;
25186: PPOPN 1
25188: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25189: LD_EXP 78
25193: PUSH
25194: LD_EXP 93
25198: AND
25199: IFFALSE 25219
25201: GO 25203
25203: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25204: LD_INT 1
25206: PPUSH
25207: LD_OWVAR 2
25211: PPUSH
25212: LD_INT 0
25214: PPUSH
25215: CALL_OW 324
25219: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25220: LD_EXP 78
25224: PUSH
25225: LD_EXP 94
25229: AND
25230: IFFALSE 25313
25232: GO 25234
25234: DISABLE
25235: LD_INT 0
25237: PPUSH
25238: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25239: LD_ADDR_VAR 0 2
25243: PUSH
25244: LD_INT 22
25246: PUSH
25247: LD_OWVAR 2
25251: PUSH
25252: EMPTY
25253: LIST
25254: LIST
25255: PUSH
25256: LD_INT 21
25258: PUSH
25259: LD_INT 3
25261: PUSH
25262: EMPTY
25263: LIST
25264: LIST
25265: PUSH
25266: EMPTY
25267: LIST
25268: LIST
25269: PPUSH
25270: CALL_OW 69
25274: ST_TO_ADDR
// if not tmp then
25275: LD_VAR 0 2
25279: NOT
25280: IFFALSE 25284
// exit ;
25282: GO 25313
// for i in tmp do
25284: LD_ADDR_VAR 0 1
25288: PUSH
25289: LD_VAR 0 2
25293: PUSH
25294: FOR_IN
25295: IFFALSE 25311
// SetBLevel ( i , 10 ) ;
25297: LD_VAR 0 1
25301: PPUSH
25302: LD_INT 10
25304: PPUSH
25305: CALL_OW 241
25309: GO 25294
25311: POP
25312: POP
// end ;
25313: PPOPN 2
25315: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25316: LD_EXP 78
25320: PUSH
25321: LD_EXP 95
25325: AND
25326: IFFALSE 25437
25328: GO 25330
25330: DISABLE
25331: LD_INT 0
25333: PPUSH
25334: PPUSH
25335: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25336: LD_ADDR_VAR 0 3
25340: PUSH
25341: LD_INT 22
25343: PUSH
25344: LD_OWVAR 2
25348: PUSH
25349: EMPTY
25350: LIST
25351: LIST
25352: PUSH
25353: LD_INT 25
25355: PUSH
25356: LD_INT 1
25358: PUSH
25359: EMPTY
25360: LIST
25361: LIST
25362: PUSH
25363: EMPTY
25364: LIST
25365: LIST
25366: PPUSH
25367: CALL_OW 69
25371: ST_TO_ADDR
// if not tmp then
25372: LD_VAR 0 3
25376: NOT
25377: IFFALSE 25381
// exit ;
25379: GO 25437
// un := tmp [ rand ( 1 , tmp ) ] ;
25381: LD_ADDR_VAR 0 2
25385: PUSH
25386: LD_VAR 0 3
25390: PUSH
25391: LD_INT 1
25393: PPUSH
25394: LD_VAR 0 3
25398: PPUSH
25399: CALL_OW 12
25403: ARRAY
25404: ST_TO_ADDR
// if Crawls ( un ) then
25405: LD_VAR 0 2
25409: PPUSH
25410: CALL_OW 318
25414: IFFALSE 25425
// ComWalk ( un ) ;
25416: LD_VAR 0 2
25420: PPUSH
25421: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25425: LD_VAR 0 2
25429: PPUSH
25430: LD_INT 5
25432: PPUSH
25433: CALL_OW 336
// end ;
25437: PPOPN 3
25439: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
25440: LD_EXP 78
25444: PUSH
25445: LD_EXP 96
25449: AND
25450: PUSH
25451: LD_OWVAR 67
25455: PUSH
25456: LD_INT 4
25458: LESS
25459: AND
25460: IFFALSE 25479
25462: GO 25464
25464: DISABLE
// begin Difficulty := Difficulty + 1 ;
25465: LD_ADDR_OWVAR 67
25469: PUSH
25470: LD_OWVAR 67
25474: PUSH
25475: LD_INT 1
25477: PLUS
25478: ST_TO_ADDR
// end ;
25479: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
25480: LD_EXP 78
25484: PUSH
25485: LD_EXP 97
25489: AND
25490: IFFALSE 25593
25492: GO 25494
25494: DISABLE
25495: LD_INT 0
25497: PPUSH
// begin for i := 1 to 5 do
25498: LD_ADDR_VAR 0 1
25502: PUSH
25503: DOUBLE
25504: LD_INT 1
25506: DEC
25507: ST_TO_ADDR
25508: LD_INT 5
25510: PUSH
25511: FOR_TO
25512: IFFALSE 25591
// begin uc_nation := nation_nature ;
25514: LD_ADDR_OWVAR 21
25518: PUSH
25519: LD_INT 0
25521: ST_TO_ADDR
// uc_side := 0 ;
25522: LD_ADDR_OWVAR 20
25526: PUSH
25527: LD_INT 0
25529: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25530: LD_ADDR_OWVAR 29
25534: PUSH
25535: LD_INT 12
25537: PUSH
25538: LD_INT 12
25540: PUSH
25541: EMPTY
25542: LIST
25543: LIST
25544: ST_TO_ADDR
// hc_agressivity := 20 ;
25545: LD_ADDR_OWVAR 35
25549: PUSH
25550: LD_INT 20
25552: ST_TO_ADDR
// hc_class := class_tiger ;
25553: LD_ADDR_OWVAR 28
25557: PUSH
25558: LD_INT 14
25560: ST_TO_ADDR
// hc_gallery :=  ;
25561: LD_ADDR_OWVAR 33
25565: PUSH
25566: LD_STRING 
25568: ST_TO_ADDR
// hc_name :=  ;
25569: LD_ADDR_OWVAR 26
25573: PUSH
25574: LD_STRING 
25576: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
25577: CALL_OW 44
25581: PPUSH
25582: LD_INT 0
25584: PPUSH
25585: CALL_OW 51
// end ;
25589: GO 25511
25591: POP
25592: POP
// end ;
25593: PPOPN 1
25595: END
// every 0 0$1 trigger StreamModeActive and sBomb do
25596: LD_EXP 78
25600: PUSH
25601: LD_EXP 98
25605: AND
25606: IFFALSE 25615
25608: GO 25610
25610: DISABLE
// StreamSibBomb ;
25611: CALL 25616 0 0
25615: END
// export function StreamSibBomb ; var i , x , y ; begin
25616: LD_INT 0
25618: PPUSH
25619: PPUSH
25620: PPUSH
25621: PPUSH
// result := false ;
25622: LD_ADDR_VAR 0 1
25626: PUSH
25627: LD_INT 0
25629: ST_TO_ADDR
// for i := 1 to 16 do
25630: LD_ADDR_VAR 0 2
25634: PUSH
25635: DOUBLE
25636: LD_INT 1
25638: DEC
25639: ST_TO_ADDR
25640: LD_INT 16
25642: PUSH
25643: FOR_TO
25644: IFFALSE 25843
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25646: LD_ADDR_VAR 0 3
25650: PUSH
25651: LD_INT 10
25653: PUSH
25654: LD_INT 20
25656: PUSH
25657: LD_INT 30
25659: PUSH
25660: LD_INT 40
25662: PUSH
25663: LD_INT 50
25665: PUSH
25666: LD_INT 60
25668: PUSH
25669: LD_INT 70
25671: PUSH
25672: LD_INT 80
25674: PUSH
25675: LD_INT 90
25677: PUSH
25678: LD_INT 100
25680: PUSH
25681: LD_INT 110
25683: PUSH
25684: LD_INT 120
25686: PUSH
25687: LD_INT 130
25689: PUSH
25690: LD_INT 140
25692: PUSH
25693: LD_INT 150
25695: PUSH
25696: EMPTY
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: LIST
25704: LIST
25705: LIST
25706: LIST
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: PUSH
25713: LD_INT 1
25715: PPUSH
25716: LD_INT 15
25718: PPUSH
25719: CALL_OW 12
25723: ARRAY
25724: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25725: LD_ADDR_VAR 0 4
25729: PUSH
25730: LD_INT 10
25732: PUSH
25733: LD_INT 20
25735: PUSH
25736: LD_INT 30
25738: PUSH
25739: LD_INT 40
25741: PUSH
25742: LD_INT 50
25744: PUSH
25745: LD_INT 60
25747: PUSH
25748: LD_INT 70
25750: PUSH
25751: LD_INT 80
25753: PUSH
25754: LD_INT 90
25756: PUSH
25757: LD_INT 100
25759: PUSH
25760: LD_INT 110
25762: PUSH
25763: LD_INT 120
25765: PUSH
25766: LD_INT 130
25768: PUSH
25769: LD_INT 140
25771: PUSH
25772: LD_INT 150
25774: PUSH
25775: EMPTY
25776: LIST
25777: LIST
25778: LIST
25779: LIST
25780: LIST
25781: LIST
25782: LIST
25783: LIST
25784: LIST
25785: LIST
25786: LIST
25787: LIST
25788: LIST
25789: LIST
25790: LIST
25791: PUSH
25792: LD_INT 1
25794: PPUSH
25795: LD_INT 15
25797: PPUSH
25798: CALL_OW 12
25802: ARRAY
25803: ST_TO_ADDR
// if ValidHex ( x , y ) then
25804: LD_VAR 0 3
25808: PPUSH
25809: LD_VAR 0 4
25813: PPUSH
25814: CALL_OW 488
25818: IFFALSE 25841
// begin result := [ x , y ] ;
25820: LD_ADDR_VAR 0 1
25824: PUSH
25825: LD_VAR 0 3
25829: PUSH
25830: LD_VAR 0 4
25834: PUSH
25835: EMPTY
25836: LIST
25837: LIST
25838: ST_TO_ADDR
// break ;
25839: GO 25843
// end ; end ;
25841: GO 25643
25843: POP
25844: POP
// if result then
25845: LD_VAR 0 1
25849: IFFALSE 25909
// begin ToLua ( playSibBomb() ) ;
25851: LD_STRING playSibBomb()
25853: PPUSH
25854: CALL_OW 559
// wait ( 0 0$14 ) ;
25858: LD_INT 490
25860: PPUSH
25861: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
25865: LD_VAR 0 1
25869: PUSH
25870: LD_INT 1
25872: ARRAY
25873: PPUSH
25874: LD_VAR 0 1
25878: PUSH
25879: LD_INT 2
25881: ARRAY
25882: PPUSH
25883: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
25887: LD_VAR 0 1
25891: PUSH
25892: LD_INT 1
25894: ARRAY
25895: PPUSH
25896: LD_VAR 0 1
25900: PUSH
25901: LD_INT 2
25903: ARRAY
25904: PPUSH
25905: CALL_OW 429
// end ; end ;
25909: LD_VAR 0 1
25913: RET
// every 0 0$1 trigger StreamModeActive and sReset do
25914: LD_EXP 78
25918: PUSH
25919: LD_EXP 100
25923: AND
25924: IFFALSE 25936
25926: GO 25928
25928: DISABLE
// YouLost (  ) ;
25929: LD_STRING 
25931: PPUSH
25932: CALL_OW 104
25936: END
// every 0 0$1 trigger StreamModeActive and sFog do
25937: LD_EXP 78
25941: PUSH
25942: LD_EXP 99
25946: AND
25947: IFFALSE 25961
25949: GO 25951
25951: DISABLE
// FogOff ( your_side ) ;
25952: LD_OWVAR 2
25956: PPUSH
25957: CALL_OW 344
25961: END
// every 0 0$1 trigger StreamModeActive and sSun do
25962: LD_EXP 78
25966: PUSH
25967: LD_EXP 101
25971: AND
25972: IFFALSE 26000
25974: GO 25976
25976: DISABLE
// begin solar_recharge_percent := 0 ;
25977: LD_ADDR_OWVAR 79
25981: PUSH
25982: LD_INT 0
25984: ST_TO_ADDR
// wait ( 5 5$00 ) ;
25985: LD_INT 10500
25987: PPUSH
25988: CALL_OW 67
// solar_recharge_percent := 100 ;
25992: LD_ADDR_OWVAR 79
25996: PUSH
25997: LD_INT 100
25999: ST_TO_ADDR
// end ;
26000: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26001: LD_EXP 78
26005: PUSH
26006: LD_EXP 102
26010: AND
26011: IFFALSE 26250
26013: GO 26015
26015: DISABLE
26016: LD_INT 0
26018: PPUSH
26019: PPUSH
26020: PPUSH
// begin tmp := [ ] ;
26021: LD_ADDR_VAR 0 3
26025: PUSH
26026: EMPTY
26027: ST_TO_ADDR
// for i := 1 to 6 do
26028: LD_ADDR_VAR 0 1
26032: PUSH
26033: DOUBLE
26034: LD_INT 1
26036: DEC
26037: ST_TO_ADDR
26038: LD_INT 6
26040: PUSH
26041: FOR_TO
26042: IFFALSE 26147
// begin uc_nation := nation_nature ;
26044: LD_ADDR_OWVAR 21
26048: PUSH
26049: LD_INT 0
26051: ST_TO_ADDR
// uc_side := 0 ;
26052: LD_ADDR_OWVAR 20
26056: PUSH
26057: LD_INT 0
26059: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26060: LD_ADDR_OWVAR 29
26064: PUSH
26065: LD_INT 12
26067: PUSH
26068: LD_INT 12
26070: PUSH
26071: EMPTY
26072: LIST
26073: LIST
26074: ST_TO_ADDR
// hc_agressivity := 20 ;
26075: LD_ADDR_OWVAR 35
26079: PUSH
26080: LD_INT 20
26082: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26083: LD_ADDR_OWVAR 28
26087: PUSH
26088: LD_INT 17
26090: ST_TO_ADDR
// hc_gallery :=  ;
26091: LD_ADDR_OWVAR 33
26095: PUSH
26096: LD_STRING 
26098: ST_TO_ADDR
// hc_name :=  ;
26099: LD_ADDR_OWVAR 26
26103: PUSH
26104: LD_STRING 
26106: ST_TO_ADDR
// un := CreateHuman ;
26107: LD_ADDR_VAR 0 2
26111: PUSH
26112: CALL_OW 44
26116: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26117: LD_VAR 0 2
26121: PPUSH
26122: LD_INT 1
26124: PPUSH
26125: CALL_OW 51
// tmp := tmp ^ un ;
26129: LD_ADDR_VAR 0 3
26133: PUSH
26134: LD_VAR 0 3
26138: PUSH
26139: LD_VAR 0 2
26143: ADD
26144: ST_TO_ADDR
// end ;
26145: GO 26041
26147: POP
26148: POP
// repeat wait ( 0 0$1 ) ;
26149: LD_INT 35
26151: PPUSH
26152: CALL_OW 67
// for un in tmp do
26156: LD_ADDR_VAR 0 2
26160: PUSH
26161: LD_VAR 0 3
26165: PUSH
26166: FOR_IN
26167: IFFALSE 26241
// begin if IsDead ( un ) then
26169: LD_VAR 0 2
26173: PPUSH
26174: CALL_OW 301
26178: IFFALSE 26198
// begin tmp := tmp diff un ;
26180: LD_ADDR_VAR 0 3
26184: PUSH
26185: LD_VAR 0 3
26189: PUSH
26190: LD_VAR 0 2
26194: DIFF
26195: ST_TO_ADDR
// continue ;
26196: GO 26166
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26198: LD_VAR 0 2
26202: PPUSH
26203: LD_INT 3
26205: PUSH
26206: LD_INT 22
26208: PUSH
26209: LD_INT 0
26211: PUSH
26212: EMPTY
26213: LIST
26214: LIST
26215: PUSH
26216: EMPTY
26217: LIST
26218: LIST
26219: PPUSH
26220: CALL_OW 69
26224: PPUSH
26225: LD_VAR 0 2
26229: PPUSH
26230: CALL_OW 74
26234: PPUSH
26235: CALL_OW 115
// end ;
26239: GO 26166
26241: POP
26242: POP
// until not tmp ;
26243: LD_VAR 0 3
26247: NOT
26248: IFFALSE 26149
// end ;
26250: PPOPN 3
26252: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26253: LD_EXP 78
26257: PUSH
26258: LD_EXP 103
26262: AND
26263: IFFALSE 26317
26265: GO 26267
26267: DISABLE
// begin ToLua ( displayTroll(); ) ;
26268: LD_STRING displayTroll();
26270: PPUSH
26271: CALL_OW 559
// wait ( 3 3$00 ) ;
26275: LD_INT 6300
26277: PPUSH
26278: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26282: LD_STRING hideTroll();
26284: PPUSH
26285: CALL_OW 559
// wait ( 1 1$00 ) ;
26289: LD_INT 2100
26291: PPUSH
26292: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26296: LD_STRING displayTroll();
26298: PPUSH
26299: CALL_OW 559
// wait ( 1 1$00 ) ;
26303: LD_INT 2100
26305: PPUSH
26306: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26310: LD_STRING hideTroll();
26312: PPUSH
26313: CALL_OW 559
// end ;
26317: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26318: LD_EXP 78
26322: PUSH
26323: LD_EXP 104
26327: AND
26328: IFFALSE 26391
26330: GO 26332
26332: DISABLE
26333: LD_INT 0
26335: PPUSH
// begin p := 0 ;
26336: LD_ADDR_VAR 0 1
26340: PUSH
26341: LD_INT 0
26343: ST_TO_ADDR
// repeat game_speed := 1 ;
26344: LD_ADDR_OWVAR 65
26348: PUSH
26349: LD_INT 1
26351: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26352: LD_INT 35
26354: PPUSH
26355: CALL_OW 67
// p := p + 1 ;
26359: LD_ADDR_VAR 0 1
26363: PUSH
26364: LD_VAR 0 1
26368: PUSH
26369: LD_INT 1
26371: PLUS
26372: ST_TO_ADDR
// until p >= 60 ;
26373: LD_VAR 0 1
26377: PUSH
26378: LD_INT 60
26380: GREATEREQUAL
26381: IFFALSE 26344
// game_speed := 4 ;
26383: LD_ADDR_OWVAR 65
26387: PUSH
26388: LD_INT 4
26390: ST_TO_ADDR
// end ;
26391: PPOPN 1
26393: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26394: LD_EXP 78
26398: PUSH
26399: LD_EXP 105
26403: AND
26404: IFFALSE 26550
26406: GO 26408
26408: DISABLE
26409: LD_INT 0
26411: PPUSH
26412: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26413: LD_ADDR_VAR 0 1
26417: PUSH
26418: LD_INT 22
26420: PUSH
26421: LD_OWVAR 2
26425: PUSH
26426: EMPTY
26427: LIST
26428: LIST
26429: PUSH
26430: LD_INT 2
26432: PUSH
26433: LD_INT 30
26435: PUSH
26436: LD_INT 0
26438: PUSH
26439: EMPTY
26440: LIST
26441: LIST
26442: PUSH
26443: LD_INT 30
26445: PUSH
26446: LD_INT 1
26448: PUSH
26449: EMPTY
26450: LIST
26451: LIST
26452: PUSH
26453: EMPTY
26454: LIST
26455: LIST
26456: LIST
26457: PUSH
26458: EMPTY
26459: LIST
26460: LIST
26461: PPUSH
26462: CALL_OW 69
26466: ST_TO_ADDR
// if not depot then
26467: LD_VAR 0 1
26471: NOT
26472: IFFALSE 26476
// exit ;
26474: GO 26550
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26476: LD_ADDR_VAR 0 2
26480: PUSH
26481: LD_VAR 0 1
26485: PUSH
26486: LD_INT 1
26488: PPUSH
26489: LD_VAR 0 1
26493: PPUSH
26494: CALL_OW 12
26498: ARRAY
26499: PPUSH
26500: CALL_OW 274
26504: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
26505: LD_VAR 0 2
26509: PPUSH
26510: LD_INT 1
26512: PPUSH
26513: LD_INT 0
26515: PPUSH
26516: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
26520: LD_VAR 0 2
26524: PPUSH
26525: LD_INT 2
26527: PPUSH
26528: LD_INT 0
26530: PPUSH
26531: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
26535: LD_VAR 0 2
26539: PPUSH
26540: LD_INT 3
26542: PPUSH
26543: LD_INT 0
26545: PPUSH
26546: CALL_OW 277
// end ;
26550: PPOPN 2
26552: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
26553: LD_EXP 78
26557: PUSH
26558: LD_EXP 106
26562: AND
26563: IFFALSE 26660
26565: GO 26567
26567: DISABLE
26568: LD_INT 0
26570: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26571: LD_ADDR_VAR 0 1
26575: PUSH
26576: LD_INT 22
26578: PUSH
26579: LD_OWVAR 2
26583: PUSH
26584: EMPTY
26585: LIST
26586: LIST
26587: PUSH
26588: LD_INT 21
26590: PUSH
26591: LD_INT 1
26593: PUSH
26594: EMPTY
26595: LIST
26596: LIST
26597: PUSH
26598: LD_INT 3
26600: PUSH
26601: LD_INT 23
26603: PUSH
26604: LD_INT 0
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: PUSH
26611: EMPTY
26612: LIST
26613: LIST
26614: PUSH
26615: EMPTY
26616: LIST
26617: LIST
26618: LIST
26619: PPUSH
26620: CALL_OW 69
26624: ST_TO_ADDR
// if not tmp then
26625: LD_VAR 0 1
26629: NOT
26630: IFFALSE 26634
// exit ;
26632: GO 26660
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
26634: LD_VAR 0 1
26638: PUSH
26639: LD_INT 1
26641: PPUSH
26642: LD_VAR 0 1
26646: PPUSH
26647: CALL_OW 12
26651: ARRAY
26652: PPUSH
26653: LD_INT 200
26655: PPUSH
26656: CALL_OW 234
// end ;
26660: PPOPN 1
26662: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
26663: LD_EXP 78
26667: PUSH
26668: LD_EXP 107
26672: AND
26673: IFFALSE 26752
26675: GO 26677
26677: DISABLE
26678: LD_INT 0
26680: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
26681: LD_ADDR_VAR 0 1
26685: PUSH
26686: LD_INT 22
26688: PUSH
26689: LD_OWVAR 2
26693: PUSH
26694: EMPTY
26695: LIST
26696: LIST
26697: PUSH
26698: LD_INT 21
26700: PUSH
26701: LD_INT 2
26703: PUSH
26704: EMPTY
26705: LIST
26706: LIST
26707: PUSH
26708: EMPTY
26709: LIST
26710: LIST
26711: PPUSH
26712: CALL_OW 69
26716: ST_TO_ADDR
// if not tmp then
26717: LD_VAR 0 1
26721: NOT
26722: IFFALSE 26726
// exit ;
26724: GO 26752
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
26726: LD_VAR 0 1
26730: PUSH
26731: LD_INT 1
26733: PPUSH
26734: LD_VAR 0 1
26738: PPUSH
26739: CALL_OW 12
26743: ARRAY
26744: PPUSH
26745: LD_INT 60
26747: PPUSH
26748: CALL_OW 234
// end ;
26752: PPOPN 1
26754: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
26755: LD_EXP 78
26759: PUSH
26760: LD_EXP 108
26764: AND
26765: IFFALSE 26864
26767: GO 26769
26769: DISABLE
26770: LD_INT 0
26772: PPUSH
26773: PPUSH
// begin enable ;
26774: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
26775: LD_ADDR_VAR 0 1
26779: PUSH
26780: LD_INT 22
26782: PUSH
26783: LD_OWVAR 2
26787: PUSH
26788: EMPTY
26789: LIST
26790: LIST
26791: PUSH
26792: LD_INT 61
26794: PUSH
26795: EMPTY
26796: LIST
26797: PUSH
26798: LD_INT 33
26800: PUSH
26801: LD_INT 2
26803: PUSH
26804: EMPTY
26805: LIST
26806: LIST
26807: PUSH
26808: EMPTY
26809: LIST
26810: LIST
26811: LIST
26812: PPUSH
26813: CALL_OW 69
26817: ST_TO_ADDR
// if not tmp then
26818: LD_VAR 0 1
26822: NOT
26823: IFFALSE 26827
// exit ;
26825: GO 26864
// for i in tmp do
26827: LD_ADDR_VAR 0 2
26831: PUSH
26832: LD_VAR 0 1
26836: PUSH
26837: FOR_IN
26838: IFFALSE 26862
// if IsControledBy ( i ) then
26840: LD_VAR 0 2
26844: PPUSH
26845: CALL_OW 312
26849: IFFALSE 26860
// ComUnlink ( i ) ;
26851: LD_VAR 0 2
26855: PPUSH
26856: CALL_OW 136
26860: GO 26837
26862: POP
26863: POP
// end ;
26864: PPOPN 2
26866: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
26867: LD_EXP 78
26871: PUSH
26872: LD_EXP 109
26876: AND
26877: IFFALSE 27017
26879: GO 26881
26881: DISABLE
26882: LD_INT 0
26884: PPUSH
26885: PPUSH
// begin ToLua ( displayPowell(); ) ;
26886: LD_STRING displayPowell();
26888: PPUSH
26889: CALL_OW 559
// uc_side := 0 ;
26893: LD_ADDR_OWVAR 20
26897: PUSH
26898: LD_INT 0
26900: ST_TO_ADDR
// uc_nation := 2 ;
26901: LD_ADDR_OWVAR 21
26905: PUSH
26906: LD_INT 2
26908: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
26909: LD_ADDR_OWVAR 37
26913: PUSH
26914: LD_INT 14
26916: ST_TO_ADDR
// vc_engine := engine_siberite ;
26917: LD_ADDR_OWVAR 39
26921: PUSH
26922: LD_INT 3
26924: ST_TO_ADDR
// vc_control := control_apeman ;
26925: LD_ADDR_OWVAR 38
26929: PUSH
26930: LD_INT 5
26932: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
26933: LD_ADDR_OWVAR 40
26937: PUSH
26938: LD_INT 29
26940: ST_TO_ADDR
// un := CreateVehicle ;
26941: LD_ADDR_VAR 0 2
26945: PUSH
26946: CALL_OW 45
26950: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26951: LD_VAR 0 2
26955: PPUSH
26956: LD_INT 1
26958: PPUSH
26959: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26963: LD_INT 35
26965: PPUSH
26966: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26970: LD_VAR 0 2
26974: PPUSH
26975: LD_INT 22
26977: PUSH
26978: LD_OWVAR 2
26982: PUSH
26983: EMPTY
26984: LIST
26985: LIST
26986: PPUSH
26987: CALL_OW 69
26991: PPUSH
26992: LD_VAR 0 2
26996: PPUSH
26997: CALL_OW 74
27001: PPUSH
27002: CALL_OW 115
// until IsDead ( un ) ;
27006: LD_VAR 0 2
27010: PPUSH
27011: CALL_OW 301
27015: IFFALSE 26963
// end ;
27017: PPOPN 2
27019: END
// every 0 0$1 trigger StreamModeActive and sStu do
27020: LD_EXP 78
27024: PUSH
27025: LD_EXP 117
27029: AND
27030: IFFALSE 27046
27032: GO 27034
27034: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27035: LD_STRING displayStucuk();
27037: PPUSH
27038: CALL_OW 559
// ResetFog ;
27042: CALL_OW 335
// end ;
27046: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27047: LD_EXP 78
27051: PUSH
27052: LD_EXP 110
27056: AND
27057: IFFALSE 27198
27059: GO 27061
27061: DISABLE
27062: LD_INT 0
27064: PPUSH
27065: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27066: LD_ADDR_VAR 0 2
27070: PUSH
27071: LD_INT 22
27073: PUSH
27074: LD_OWVAR 2
27078: PUSH
27079: EMPTY
27080: LIST
27081: LIST
27082: PUSH
27083: LD_INT 21
27085: PUSH
27086: LD_INT 1
27088: PUSH
27089: EMPTY
27090: LIST
27091: LIST
27092: PUSH
27093: EMPTY
27094: LIST
27095: LIST
27096: PPUSH
27097: CALL_OW 69
27101: ST_TO_ADDR
// if not tmp then
27102: LD_VAR 0 2
27106: NOT
27107: IFFALSE 27111
// exit ;
27109: GO 27198
// un := tmp [ rand ( 1 , tmp ) ] ;
27111: LD_ADDR_VAR 0 1
27115: PUSH
27116: LD_VAR 0 2
27120: PUSH
27121: LD_INT 1
27123: PPUSH
27124: LD_VAR 0 2
27128: PPUSH
27129: CALL_OW 12
27133: ARRAY
27134: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27135: LD_VAR 0 1
27139: PPUSH
27140: LD_INT 0
27142: PPUSH
27143: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27147: LD_VAR 0 1
27151: PPUSH
27152: LD_OWVAR 3
27156: PUSH
27157: LD_VAR 0 1
27161: DIFF
27162: PPUSH
27163: LD_VAR 0 1
27167: PPUSH
27168: CALL_OW 74
27172: PPUSH
27173: CALL_OW 115
// wait ( 0 0$20 ) ;
27177: LD_INT 700
27179: PPUSH
27180: CALL_OW 67
// SetSide ( un , your_side ) ;
27184: LD_VAR 0 1
27188: PPUSH
27189: LD_OWVAR 2
27193: PPUSH
27194: CALL_OW 235
// end ;
27198: PPOPN 2
27200: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27201: LD_EXP 78
27205: PUSH
27206: LD_EXP 111
27210: AND
27211: IFFALSE 27317
27213: GO 27215
27215: DISABLE
27216: LD_INT 0
27218: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27219: LD_ADDR_VAR 0 1
27223: PUSH
27224: LD_INT 22
27226: PUSH
27227: LD_OWVAR 2
27231: PUSH
27232: EMPTY
27233: LIST
27234: LIST
27235: PUSH
27236: LD_INT 2
27238: PUSH
27239: LD_INT 30
27241: PUSH
27242: LD_INT 0
27244: PUSH
27245: EMPTY
27246: LIST
27247: LIST
27248: PUSH
27249: LD_INT 30
27251: PUSH
27252: LD_INT 1
27254: PUSH
27255: EMPTY
27256: LIST
27257: LIST
27258: PUSH
27259: EMPTY
27260: LIST
27261: LIST
27262: LIST
27263: PUSH
27264: EMPTY
27265: LIST
27266: LIST
27267: PPUSH
27268: CALL_OW 69
27272: ST_TO_ADDR
// if not depot then
27273: LD_VAR 0 1
27277: NOT
27278: IFFALSE 27282
// exit ;
27280: GO 27317
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27282: LD_VAR 0 1
27286: PUSH
27287: LD_INT 1
27289: ARRAY
27290: PPUSH
27291: CALL_OW 250
27295: PPUSH
27296: LD_VAR 0 1
27300: PUSH
27301: LD_INT 1
27303: ARRAY
27304: PPUSH
27305: CALL_OW 251
27309: PPUSH
27310: LD_INT 70
27312: PPUSH
27313: CALL_OW 495
// end ;
27317: PPOPN 1
27319: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27320: LD_EXP 78
27324: PUSH
27325: LD_EXP 112
27329: AND
27330: IFFALSE 27541
27332: GO 27334
27334: DISABLE
27335: LD_INT 0
27337: PPUSH
27338: PPUSH
27339: PPUSH
27340: PPUSH
27341: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27342: LD_ADDR_VAR 0 5
27346: PUSH
27347: LD_INT 22
27349: PUSH
27350: LD_OWVAR 2
27354: PUSH
27355: EMPTY
27356: LIST
27357: LIST
27358: PUSH
27359: LD_INT 21
27361: PUSH
27362: LD_INT 1
27364: PUSH
27365: EMPTY
27366: LIST
27367: LIST
27368: PUSH
27369: EMPTY
27370: LIST
27371: LIST
27372: PPUSH
27373: CALL_OW 69
27377: ST_TO_ADDR
// if not tmp then
27378: LD_VAR 0 5
27382: NOT
27383: IFFALSE 27387
// exit ;
27385: GO 27541
// for i in tmp do
27387: LD_ADDR_VAR 0 1
27391: PUSH
27392: LD_VAR 0 5
27396: PUSH
27397: FOR_IN
27398: IFFALSE 27539
// begin d := rand ( 0 , 5 ) ;
27400: LD_ADDR_VAR 0 4
27404: PUSH
27405: LD_INT 0
27407: PPUSH
27408: LD_INT 5
27410: PPUSH
27411: CALL_OW 12
27415: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27416: LD_ADDR_VAR 0 2
27420: PUSH
27421: LD_VAR 0 1
27425: PPUSH
27426: CALL_OW 250
27430: PPUSH
27431: LD_VAR 0 4
27435: PPUSH
27436: LD_INT 3
27438: PPUSH
27439: LD_INT 12
27441: PPUSH
27442: CALL_OW 12
27446: PPUSH
27447: CALL_OW 272
27451: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27452: LD_ADDR_VAR 0 3
27456: PUSH
27457: LD_VAR 0 1
27461: PPUSH
27462: CALL_OW 251
27466: PPUSH
27467: LD_VAR 0 4
27471: PPUSH
27472: LD_INT 3
27474: PPUSH
27475: LD_INT 12
27477: PPUSH
27478: CALL_OW 12
27482: PPUSH
27483: CALL_OW 273
27487: ST_TO_ADDR
// if ValidHex ( x , y ) then
27488: LD_VAR 0 2
27492: PPUSH
27493: LD_VAR 0 3
27497: PPUSH
27498: CALL_OW 488
27502: IFFALSE 27537
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
27504: LD_VAR 0 1
27508: PPUSH
27509: LD_VAR 0 2
27513: PPUSH
27514: LD_VAR 0 3
27518: PPUSH
27519: LD_INT 3
27521: PPUSH
27522: LD_INT 6
27524: PPUSH
27525: CALL_OW 12
27529: PPUSH
27530: LD_INT 1
27532: PPUSH
27533: CALL_OW 483
// end ;
27537: GO 27397
27539: POP
27540: POP
// end ;
27541: PPOPN 5
27543: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
27544: LD_EXP 78
27548: PUSH
27549: LD_EXP 113
27553: AND
27554: IFFALSE 27648
27556: GO 27558
27558: DISABLE
27559: LD_INT 0
27561: PPUSH
27562: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
27563: LD_ADDR_VAR 0 2
27567: PUSH
27568: LD_INT 22
27570: PUSH
27571: LD_OWVAR 2
27575: PUSH
27576: EMPTY
27577: LIST
27578: LIST
27579: PUSH
27580: LD_INT 32
27582: PUSH
27583: LD_INT 1
27585: PUSH
27586: EMPTY
27587: LIST
27588: LIST
27589: PUSH
27590: LD_INT 21
27592: PUSH
27593: LD_INT 2
27595: PUSH
27596: EMPTY
27597: LIST
27598: LIST
27599: PUSH
27600: EMPTY
27601: LIST
27602: LIST
27603: LIST
27604: PPUSH
27605: CALL_OW 69
27609: ST_TO_ADDR
// if not tmp then
27610: LD_VAR 0 2
27614: NOT
27615: IFFALSE 27619
// exit ;
27617: GO 27648
// for i in tmp do
27619: LD_ADDR_VAR 0 1
27623: PUSH
27624: LD_VAR 0 2
27628: PUSH
27629: FOR_IN
27630: IFFALSE 27646
// SetFuel ( i , 0 ) ;
27632: LD_VAR 0 1
27636: PPUSH
27637: LD_INT 0
27639: PPUSH
27640: CALL_OW 240
27644: GO 27629
27646: POP
27647: POP
// end ;
27648: PPOPN 2
27650: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
27651: LD_EXP 78
27655: PUSH
27656: LD_EXP 114
27660: AND
27661: IFFALSE 27727
27663: GO 27665
27665: DISABLE
27666: LD_INT 0
27668: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27669: LD_ADDR_VAR 0 1
27673: PUSH
27674: LD_INT 22
27676: PUSH
27677: LD_OWVAR 2
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: PUSH
27686: LD_INT 30
27688: PUSH
27689: LD_INT 29
27691: PUSH
27692: EMPTY
27693: LIST
27694: LIST
27695: PUSH
27696: EMPTY
27697: LIST
27698: LIST
27699: PPUSH
27700: CALL_OW 69
27704: ST_TO_ADDR
// if not tmp then
27705: LD_VAR 0 1
27709: NOT
27710: IFFALSE 27714
// exit ;
27712: GO 27727
// DestroyUnit ( tmp [ 1 ] ) ;
27714: LD_VAR 0 1
27718: PUSH
27719: LD_INT 1
27721: ARRAY
27722: PPUSH
27723: CALL_OW 65
// end ;
27727: PPOPN 1
27729: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
27730: LD_EXP 78
27734: PUSH
27735: LD_EXP 116
27739: AND
27740: IFFALSE 27869
27742: GO 27744
27744: DISABLE
27745: LD_INT 0
27747: PPUSH
// begin uc_side := 0 ;
27748: LD_ADDR_OWVAR 20
27752: PUSH
27753: LD_INT 0
27755: ST_TO_ADDR
// uc_nation := nation_arabian ;
27756: LD_ADDR_OWVAR 21
27760: PUSH
27761: LD_INT 2
27763: ST_TO_ADDR
// hc_gallery :=  ;
27764: LD_ADDR_OWVAR 33
27768: PUSH
27769: LD_STRING 
27771: ST_TO_ADDR
// hc_name :=  ;
27772: LD_ADDR_OWVAR 26
27776: PUSH
27777: LD_STRING 
27779: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
27780: LD_INT 1
27782: PPUSH
27783: LD_INT 11
27785: PPUSH
27786: LD_INT 10
27788: PPUSH
27789: CALL_OW 380
// un := CreateHuman ;
27793: LD_ADDR_VAR 0 1
27797: PUSH
27798: CALL_OW 44
27802: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27803: LD_VAR 0 1
27807: PPUSH
27808: LD_INT 1
27810: PPUSH
27811: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27815: LD_INT 35
27817: PPUSH
27818: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27822: LD_VAR 0 1
27826: PPUSH
27827: LD_INT 22
27829: PUSH
27830: LD_OWVAR 2
27834: PUSH
27835: EMPTY
27836: LIST
27837: LIST
27838: PPUSH
27839: CALL_OW 69
27843: PPUSH
27844: LD_VAR 0 1
27848: PPUSH
27849: CALL_OW 74
27853: PPUSH
27854: CALL_OW 115
// until IsDead ( un ) ;
27858: LD_VAR 0 1
27862: PPUSH
27863: CALL_OW 301
27867: IFFALSE 27815
// end ;
27869: PPOPN 1
27871: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
27872: LD_EXP 78
27876: PUSH
27877: LD_EXP 118
27881: AND
27882: IFFALSE 27894
27884: GO 27886
27886: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
27887: LD_STRING earthquake(getX(game), 0, 32)
27889: PPUSH
27890: CALL_OW 559
27894: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
27895: LD_EXP 78
27899: PUSH
27900: LD_EXP 119
27904: AND
27905: IFFALSE 27996
27907: GO 27909
27909: DISABLE
27910: LD_INT 0
27912: PPUSH
// begin enable ;
27913: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
27914: LD_ADDR_VAR 0 1
27918: PUSH
27919: LD_INT 22
27921: PUSH
27922: LD_OWVAR 2
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: PUSH
27931: LD_INT 21
27933: PUSH
27934: LD_INT 2
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: PUSH
27941: LD_INT 33
27943: PUSH
27944: LD_INT 3
27946: PUSH
27947: EMPTY
27948: LIST
27949: LIST
27950: PUSH
27951: EMPTY
27952: LIST
27953: LIST
27954: LIST
27955: PPUSH
27956: CALL_OW 69
27960: ST_TO_ADDR
// if not tmp then
27961: LD_VAR 0 1
27965: NOT
27966: IFFALSE 27970
// exit ;
27968: GO 27996
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27970: LD_VAR 0 1
27974: PUSH
27975: LD_INT 1
27977: PPUSH
27978: LD_VAR 0 1
27982: PPUSH
27983: CALL_OW 12
27987: ARRAY
27988: PPUSH
27989: LD_INT 1
27991: PPUSH
27992: CALL_OW 234
// end ;
27996: PPOPN 1
27998: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
27999: LD_EXP 78
28003: PUSH
28004: LD_EXP 120
28008: AND
28009: IFFALSE 28150
28011: GO 28013
28013: DISABLE
28014: LD_INT 0
28016: PPUSH
28017: PPUSH
28018: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28019: LD_ADDR_VAR 0 3
28023: PUSH
28024: LD_INT 22
28026: PUSH
28027: LD_OWVAR 2
28031: PUSH
28032: EMPTY
28033: LIST
28034: LIST
28035: PUSH
28036: LD_INT 25
28038: PUSH
28039: LD_INT 1
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: PUSH
28046: EMPTY
28047: LIST
28048: LIST
28049: PPUSH
28050: CALL_OW 69
28054: ST_TO_ADDR
// if not tmp then
28055: LD_VAR 0 3
28059: NOT
28060: IFFALSE 28064
// exit ;
28062: GO 28150
// un := tmp [ rand ( 1 , tmp ) ] ;
28064: LD_ADDR_VAR 0 2
28068: PUSH
28069: LD_VAR 0 3
28073: PUSH
28074: LD_INT 1
28076: PPUSH
28077: LD_VAR 0 3
28081: PPUSH
28082: CALL_OW 12
28086: ARRAY
28087: ST_TO_ADDR
// if Crawls ( un ) then
28088: LD_VAR 0 2
28092: PPUSH
28093: CALL_OW 318
28097: IFFALSE 28108
// ComWalk ( un ) ;
28099: LD_VAR 0 2
28103: PPUSH
28104: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28108: LD_VAR 0 2
28112: PPUSH
28113: LD_INT 9
28115: PPUSH
28116: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28120: LD_INT 28
28122: PPUSH
28123: LD_OWVAR 2
28127: PPUSH
28128: LD_INT 2
28130: PPUSH
28131: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28135: LD_INT 29
28137: PPUSH
28138: LD_OWVAR 2
28142: PPUSH
28143: LD_INT 2
28145: PPUSH
28146: CALL_OW 322
// end ;
28150: PPOPN 3
28152: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28153: LD_EXP 78
28157: PUSH
28158: LD_EXP 121
28162: AND
28163: IFFALSE 28274
28165: GO 28167
28167: DISABLE
28168: LD_INT 0
28170: PPUSH
28171: PPUSH
28172: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28173: LD_ADDR_VAR 0 3
28177: PUSH
28178: LD_INT 22
28180: PUSH
28181: LD_OWVAR 2
28185: PUSH
28186: EMPTY
28187: LIST
28188: LIST
28189: PUSH
28190: LD_INT 25
28192: PUSH
28193: LD_INT 1
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: PUSH
28200: EMPTY
28201: LIST
28202: LIST
28203: PPUSH
28204: CALL_OW 69
28208: ST_TO_ADDR
// if not tmp then
28209: LD_VAR 0 3
28213: NOT
28214: IFFALSE 28218
// exit ;
28216: GO 28274
// un := tmp [ rand ( 1 , tmp ) ] ;
28218: LD_ADDR_VAR 0 2
28222: PUSH
28223: LD_VAR 0 3
28227: PUSH
28228: LD_INT 1
28230: PPUSH
28231: LD_VAR 0 3
28235: PPUSH
28236: CALL_OW 12
28240: ARRAY
28241: ST_TO_ADDR
// if Crawls ( un ) then
28242: LD_VAR 0 2
28246: PPUSH
28247: CALL_OW 318
28251: IFFALSE 28262
// ComWalk ( un ) ;
28253: LD_VAR 0 2
28257: PPUSH
28258: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28262: LD_VAR 0 2
28266: PPUSH
28267: LD_INT 8
28269: PPUSH
28270: CALL_OW 336
// end ;
28274: PPOPN 3
28276: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28277: LD_EXP 78
28281: PUSH
28282: LD_EXP 122
28286: AND
28287: IFFALSE 28431
28289: GO 28291
28291: DISABLE
28292: LD_INT 0
28294: PPUSH
28295: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28296: LD_ADDR_VAR 0 2
28300: PUSH
28301: LD_INT 22
28303: PUSH
28304: LD_OWVAR 2
28308: PUSH
28309: EMPTY
28310: LIST
28311: LIST
28312: PUSH
28313: LD_INT 21
28315: PUSH
28316: LD_INT 2
28318: PUSH
28319: EMPTY
28320: LIST
28321: LIST
28322: PUSH
28323: LD_INT 2
28325: PUSH
28326: LD_INT 34
28328: PUSH
28329: LD_INT 12
28331: PUSH
28332: EMPTY
28333: LIST
28334: LIST
28335: PUSH
28336: LD_INT 34
28338: PUSH
28339: LD_INT 51
28341: PUSH
28342: EMPTY
28343: LIST
28344: LIST
28345: PUSH
28346: LD_INT 34
28348: PUSH
28349: LD_INT 32
28351: PUSH
28352: EMPTY
28353: LIST
28354: LIST
28355: PUSH
28356: EMPTY
28357: LIST
28358: LIST
28359: LIST
28360: LIST
28361: PUSH
28362: EMPTY
28363: LIST
28364: LIST
28365: LIST
28366: PPUSH
28367: CALL_OW 69
28371: ST_TO_ADDR
// if not tmp then
28372: LD_VAR 0 2
28376: NOT
28377: IFFALSE 28381
// exit ;
28379: GO 28431
// for i in tmp do
28381: LD_ADDR_VAR 0 1
28385: PUSH
28386: LD_VAR 0 2
28390: PUSH
28391: FOR_IN
28392: IFFALSE 28429
// if GetCargo ( i , mat_artifact ) = 0 then
28394: LD_VAR 0 1
28398: PPUSH
28399: LD_INT 4
28401: PPUSH
28402: CALL_OW 289
28406: PUSH
28407: LD_INT 0
28409: EQUAL
28410: IFFALSE 28427
// SetCargo ( i , mat_siberit , 100 ) ;
28412: LD_VAR 0 1
28416: PPUSH
28417: LD_INT 3
28419: PPUSH
28420: LD_INT 100
28422: PPUSH
28423: CALL_OW 290
28427: GO 28391
28429: POP
28430: POP
// end ;
28431: PPOPN 2
28433: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28434: LD_EXP 78
28438: PUSH
28439: LD_EXP 123
28443: AND
28444: IFFALSE 28627
28446: GO 28448
28448: DISABLE
28449: LD_INT 0
28451: PPUSH
28452: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28453: LD_ADDR_VAR 0 2
28457: PUSH
28458: LD_INT 22
28460: PUSH
28461: LD_OWVAR 2
28465: PUSH
28466: EMPTY
28467: LIST
28468: LIST
28469: PPUSH
28470: CALL_OW 69
28474: ST_TO_ADDR
// if not tmp then
28475: LD_VAR 0 2
28479: NOT
28480: IFFALSE 28484
// exit ;
28482: GO 28627
// for i := 1 to 2 do
28484: LD_ADDR_VAR 0 1
28488: PUSH
28489: DOUBLE
28490: LD_INT 1
28492: DEC
28493: ST_TO_ADDR
28494: LD_INT 2
28496: PUSH
28497: FOR_TO
28498: IFFALSE 28625
// begin uc_side := your_side ;
28500: LD_ADDR_OWVAR 20
28504: PUSH
28505: LD_OWVAR 2
28509: ST_TO_ADDR
// uc_nation := nation_american ;
28510: LD_ADDR_OWVAR 21
28514: PUSH
28515: LD_INT 1
28517: ST_TO_ADDR
// vc_chassis := us_morphling ;
28518: LD_ADDR_OWVAR 37
28522: PUSH
28523: LD_INT 5
28525: ST_TO_ADDR
// vc_engine := engine_siberite ;
28526: LD_ADDR_OWVAR 39
28530: PUSH
28531: LD_INT 3
28533: ST_TO_ADDR
// vc_control := control_computer ;
28534: LD_ADDR_OWVAR 38
28538: PUSH
28539: LD_INT 3
28541: ST_TO_ADDR
// vc_weapon := us_double_laser ;
28542: LD_ADDR_OWVAR 40
28546: PUSH
28547: LD_INT 10
28549: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
28550: LD_VAR 0 2
28554: PUSH
28555: LD_INT 1
28557: ARRAY
28558: PPUSH
28559: CALL_OW 310
28563: NOT
28564: IFFALSE 28611
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
28566: CALL_OW 45
28570: PPUSH
28571: LD_VAR 0 2
28575: PUSH
28576: LD_INT 1
28578: ARRAY
28579: PPUSH
28580: CALL_OW 250
28584: PPUSH
28585: LD_VAR 0 2
28589: PUSH
28590: LD_INT 1
28592: ARRAY
28593: PPUSH
28594: CALL_OW 251
28598: PPUSH
28599: LD_INT 12
28601: PPUSH
28602: LD_INT 1
28604: PPUSH
28605: CALL_OW 50
28609: GO 28623
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28611: CALL_OW 45
28615: PPUSH
28616: LD_INT 1
28618: PPUSH
28619: CALL_OW 51
// end ;
28623: GO 28497
28625: POP
28626: POP
// end ;
28627: PPOPN 2
28629: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
28630: LD_EXP 78
28634: PUSH
28635: LD_EXP 124
28639: AND
28640: IFFALSE 28862
28642: GO 28644
28644: DISABLE
28645: LD_INT 0
28647: PPUSH
28648: PPUSH
28649: PPUSH
28650: PPUSH
28651: PPUSH
28652: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28653: LD_ADDR_VAR 0 6
28657: PUSH
28658: LD_INT 22
28660: PUSH
28661: LD_OWVAR 2
28665: PUSH
28666: EMPTY
28667: LIST
28668: LIST
28669: PUSH
28670: LD_INT 21
28672: PUSH
28673: LD_INT 1
28675: PUSH
28676: EMPTY
28677: LIST
28678: LIST
28679: PUSH
28680: LD_INT 3
28682: PUSH
28683: LD_INT 23
28685: PUSH
28686: LD_INT 0
28688: PUSH
28689: EMPTY
28690: LIST
28691: LIST
28692: PUSH
28693: EMPTY
28694: LIST
28695: LIST
28696: PUSH
28697: EMPTY
28698: LIST
28699: LIST
28700: LIST
28701: PPUSH
28702: CALL_OW 69
28706: ST_TO_ADDR
// if not tmp then
28707: LD_VAR 0 6
28711: NOT
28712: IFFALSE 28716
// exit ;
28714: GO 28862
// s1 := rand ( 1 , 4 ) ;
28716: LD_ADDR_VAR 0 2
28720: PUSH
28721: LD_INT 1
28723: PPUSH
28724: LD_INT 4
28726: PPUSH
28727: CALL_OW 12
28731: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
28732: LD_ADDR_VAR 0 4
28736: PUSH
28737: LD_VAR 0 6
28741: PUSH
28742: LD_INT 1
28744: ARRAY
28745: PPUSH
28746: LD_VAR 0 2
28750: PPUSH
28751: CALL_OW 259
28755: ST_TO_ADDR
// if s1 = 1 then
28756: LD_VAR 0 2
28760: PUSH
28761: LD_INT 1
28763: EQUAL
28764: IFFALSE 28784
// s2 := rand ( 2 , 4 ) else
28766: LD_ADDR_VAR 0 3
28770: PUSH
28771: LD_INT 2
28773: PPUSH
28774: LD_INT 4
28776: PPUSH
28777: CALL_OW 12
28781: ST_TO_ADDR
28782: GO 28792
// s2 := 1 ;
28784: LD_ADDR_VAR 0 3
28788: PUSH
28789: LD_INT 1
28791: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
28792: LD_ADDR_VAR 0 5
28796: PUSH
28797: LD_VAR 0 6
28801: PUSH
28802: LD_INT 1
28804: ARRAY
28805: PPUSH
28806: LD_VAR 0 3
28810: PPUSH
28811: CALL_OW 259
28815: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
28816: LD_VAR 0 6
28820: PUSH
28821: LD_INT 1
28823: ARRAY
28824: PPUSH
28825: LD_VAR 0 2
28829: PPUSH
28830: LD_VAR 0 5
28834: PPUSH
28835: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
28839: LD_VAR 0 6
28843: PUSH
28844: LD_INT 1
28846: ARRAY
28847: PPUSH
28848: LD_VAR 0 3
28852: PPUSH
28853: LD_VAR 0 4
28857: PPUSH
28858: CALL_OW 237
// end ;
28862: PPOPN 6
28864: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
28865: LD_EXP 78
28869: PUSH
28870: LD_EXP 125
28874: AND
28875: IFFALSE 28954
28877: GO 28879
28879: DISABLE
28880: LD_INT 0
28882: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
28883: LD_ADDR_VAR 0 1
28887: PUSH
28888: LD_INT 22
28890: PUSH
28891: LD_OWVAR 2
28895: PUSH
28896: EMPTY
28897: LIST
28898: LIST
28899: PUSH
28900: LD_INT 30
28902: PUSH
28903: LD_INT 3
28905: PUSH
28906: EMPTY
28907: LIST
28908: LIST
28909: PUSH
28910: EMPTY
28911: LIST
28912: LIST
28913: PPUSH
28914: CALL_OW 69
28918: ST_TO_ADDR
// if not tmp then
28919: LD_VAR 0 1
28923: NOT
28924: IFFALSE 28928
// exit ;
28926: GO 28954
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28928: LD_VAR 0 1
28932: PUSH
28933: LD_INT 1
28935: PPUSH
28936: LD_VAR 0 1
28940: PPUSH
28941: CALL_OW 12
28945: ARRAY
28946: PPUSH
28947: LD_INT 1
28949: PPUSH
28950: CALL_OW 234
// end ;
28954: PPOPN 1
28956: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
28957: LD_EXP 78
28961: PUSH
28962: LD_EXP 126
28966: AND
28967: IFFALSE 29079
28969: GO 28971
28971: DISABLE
28972: LD_INT 0
28974: PPUSH
28975: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
28976: LD_ADDR_VAR 0 2
28980: PUSH
28981: LD_INT 22
28983: PUSH
28984: LD_OWVAR 2
28988: PUSH
28989: EMPTY
28990: LIST
28991: LIST
28992: PUSH
28993: LD_INT 2
28995: PUSH
28996: LD_INT 30
28998: PUSH
28999: LD_INT 27
29001: PUSH
29002: EMPTY
29003: LIST
29004: LIST
29005: PUSH
29006: LD_INT 30
29008: PUSH
29009: LD_INT 26
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: PUSH
29016: LD_INT 30
29018: PUSH
29019: LD_INT 28
29021: PUSH
29022: EMPTY
29023: LIST
29024: LIST
29025: PUSH
29026: EMPTY
29027: LIST
29028: LIST
29029: LIST
29030: LIST
29031: PUSH
29032: EMPTY
29033: LIST
29034: LIST
29035: PPUSH
29036: CALL_OW 69
29040: ST_TO_ADDR
// if not tmp then
29041: LD_VAR 0 2
29045: NOT
29046: IFFALSE 29050
// exit ;
29048: GO 29079
// for i in tmp do
29050: LD_ADDR_VAR 0 1
29054: PUSH
29055: LD_VAR 0 2
29059: PUSH
29060: FOR_IN
29061: IFFALSE 29077
// SetLives ( i , 1 ) ;
29063: LD_VAR 0 1
29067: PPUSH
29068: LD_INT 1
29070: PPUSH
29071: CALL_OW 234
29075: GO 29060
29077: POP
29078: POP
// end ;
29079: PPOPN 2
29081: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29082: LD_EXP 78
29086: PUSH
29087: LD_EXP 127
29091: AND
29092: IFFALSE 29379
29094: GO 29096
29096: DISABLE
29097: LD_INT 0
29099: PPUSH
29100: PPUSH
29101: PPUSH
// begin i := rand ( 1 , 7 ) ;
29102: LD_ADDR_VAR 0 1
29106: PUSH
29107: LD_INT 1
29109: PPUSH
29110: LD_INT 7
29112: PPUSH
29113: CALL_OW 12
29117: ST_TO_ADDR
// case i of 1 :
29118: LD_VAR 0 1
29122: PUSH
29123: LD_INT 1
29125: DOUBLE
29126: EQUAL
29127: IFTRUE 29131
29129: GO 29141
29131: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29132: LD_STRING earthquake(getX(game), 0, 32)
29134: PPUSH
29135: CALL_OW 559
29139: GO 29379
29141: LD_INT 2
29143: DOUBLE
29144: EQUAL
29145: IFTRUE 29149
29147: GO 29163
29149: POP
// begin ToLua ( displayStucuk(); ) ;
29150: LD_STRING displayStucuk();
29152: PPUSH
29153: CALL_OW 559
// ResetFog ;
29157: CALL_OW 335
// end ; 3 :
29161: GO 29379
29163: LD_INT 3
29165: DOUBLE
29166: EQUAL
29167: IFTRUE 29171
29169: GO 29275
29171: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29172: LD_ADDR_VAR 0 2
29176: PUSH
29177: LD_INT 22
29179: PUSH
29180: LD_OWVAR 2
29184: PUSH
29185: EMPTY
29186: LIST
29187: LIST
29188: PUSH
29189: LD_INT 25
29191: PUSH
29192: LD_INT 1
29194: PUSH
29195: EMPTY
29196: LIST
29197: LIST
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: PPUSH
29203: CALL_OW 69
29207: ST_TO_ADDR
// if not tmp then
29208: LD_VAR 0 2
29212: NOT
29213: IFFALSE 29217
// exit ;
29215: GO 29379
// un := tmp [ rand ( 1 , tmp ) ] ;
29217: LD_ADDR_VAR 0 3
29221: PUSH
29222: LD_VAR 0 2
29226: PUSH
29227: LD_INT 1
29229: PPUSH
29230: LD_VAR 0 2
29234: PPUSH
29235: CALL_OW 12
29239: ARRAY
29240: ST_TO_ADDR
// if Crawls ( un ) then
29241: LD_VAR 0 3
29245: PPUSH
29246: CALL_OW 318
29250: IFFALSE 29261
// ComWalk ( un ) ;
29252: LD_VAR 0 3
29256: PPUSH
29257: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29261: LD_VAR 0 3
29265: PPUSH
29266: LD_INT 8
29268: PPUSH
29269: CALL_OW 336
// end ; 4 :
29273: GO 29379
29275: LD_INT 4
29277: DOUBLE
29278: EQUAL
29279: IFTRUE 29283
29281: GO 29357
29283: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29284: LD_ADDR_VAR 0 2
29288: PUSH
29289: LD_INT 22
29291: PUSH
29292: LD_OWVAR 2
29296: PUSH
29297: EMPTY
29298: LIST
29299: LIST
29300: PUSH
29301: LD_INT 30
29303: PUSH
29304: LD_INT 29
29306: PUSH
29307: EMPTY
29308: LIST
29309: LIST
29310: PUSH
29311: EMPTY
29312: LIST
29313: LIST
29314: PPUSH
29315: CALL_OW 69
29319: ST_TO_ADDR
// if not tmp then
29320: LD_VAR 0 2
29324: NOT
29325: IFFALSE 29329
// exit ;
29327: GO 29379
// CenterNowOnUnits ( tmp [ 1 ] ) ;
29329: LD_VAR 0 2
29333: PUSH
29334: LD_INT 1
29336: ARRAY
29337: PPUSH
29338: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
29342: LD_VAR 0 2
29346: PUSH
29347: LD_INT 1
29349: ARRAY
29350: PPUSH
29351: CALL_OW 65
// end ; 5 .. 7 :
29355: GO 29379
29357: LD_INT 5
29359: DOUBLE
29360: GREATEREQUAL
29361: IFFALSE 29369
29363: LD_INT 7
29365: DOUBLE
29366: LESSEQUAL
29367: IFTRUE 29371
29369: GO 29378
29371: POP
// StreamSibBomb ; end ;
29372: CALL 25616 0 0
29376: GO 29379
29378: POP
// end ;
29379: PPOPN 3
29381: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29382: LD_EXP 78
29386: PUSH
29387: LD_EXP 128
29391: AND
29392: IFFALSE 29548
29394: GO 29396
29396: DISABLE
29397: LD_INT 0
29399: PPUSH
29400: PPUSH
29401: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29402: LD_ADDR_VAR 0 2
29406: PUSH
29407: LD_INT 81
29409: PUSH
29410: LD_OWVAR 2
29414: PUSH
29415: EMPTY
29416: LIST
29417: LIST
29418: PUSH
29419: LD_INT 2
29421: PUSH
29422: LD_INT 21
29424: PUSH
29425: LD_INT 1
29427: PUSH
29428: EMPTY
29429: LIST
29430: LIST
29431: PUSH
29432: LD_INT 21
29434: PUSH
29435: LD_INT 2
29437: PUSH
29438: EMPTY
29439: LIST
29440: LIST
29441: PUSH
29442: EMPTY
29443: LIST
29444: LIST
29445: LIST
29446: PUSH
29447: EMPTY
29448: LIST
29449: LIST
29450: PPUSH
29451: CALL_OW 69
29455: ST_TO_ADDR
// if not tmp then
29456: LD_VAR 0 2
29460: NOT
29461: IFFALSE 29465
// exit ;
29463: GO 29548
// p := 0 ;
29465: LD_ADDR_VAR 0 3
29469: PUSH
29470: LD_INT 0
29472: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29473: LD_INT 35
29475: PPUSH
29476: CALL_OW 67
// p := p + 1 ;
29480: LD_ADDR_VAR 0 3
29484: PUSH
29485: LD_VAR 0 3
29489: PUSH
29490: LD_INT 1
29492: PLUS
29493: ST_TO_ADDR
// for i in tmp do
29494: LD_ADDR_VAR 0 1
29498: PUSH
29499: LD_VAR 0 2
29503: PUSH
29504: FOR_IN
29505: IFFALSE 29536
// if GetLives ( i ) < 1000 then
29507: LD_VAR 0 1
29511: PPUSH
29512: CALL_OW 256
29516: PUSH
29517: LD_INT 1000
29519: LESS
29520: IFFALSE 29534
// SetLives ( i , 1000 ) ;
29522: LD_VAR 0 1
29526: PPUSH
29527: LD_INT 1000
29529: PPUSH
29530: CALL_OW 234
29534: GO 29504
29536: POP
29537: POP
// until p > 20 ;
29538: LD_VAR 0 3
29542: PUSH
29543: LD_INT 20
29545: GREATER
29546: IFFALSE 29473
// end ;
29548: PPOPN 3
29550: END
// every 0 0$1 trigger StreamModeActive and sTime do
29551: LD_EXP 78
29555: PUSH
29556: LD_EXP 129
29560: AND
29561: IFFALSE 29596
29563: GO 29565
29565: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
29566: LD_INT 28
29568: PPUSH
29569: LD_OWVAR 2
29573: PPUSH
29574: LD_INT 2
29576: PPUSH
29577: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
29581: LD_INT 30
29583: PPUSH
29584: LD_OWVAR 2
29588: PPUSH
29589: LD_INT 2
29591: PPUSH
29592: CALL_OW 322
// end ;
29596: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
29597: LD_EXP 78
29601: PUSH
29602: LD_EXP 130
29606: AND
29607: IFFALSE 29728
29609: GO 29611
29611: DISABLE
29612: LD_INT 0
29614: PPUSH
29615: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29616: LD_ADDR_VAR 0 2
29620: PUSH
29621: LD_INT 22
29623: PUSH
29624: LD_OWVAR 2
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: PUSH
29633: LD_INT 21
29635: PUSH
29636: LD_INT 1
29638: PUSH
29639: EMPTY
29640: LIST
29641: LIST
29642: PUSH
29643: LD_INT 3
29645: PUSH
29646: LD_INT 23
29648: PUSH
29649: LD_INT 0
29651: PUSH
29652: EMPTY
29653: LIST
29654: LIST
29655: PUSH
29656: EMPTY
29657: LIST
29658: LIST
29659: PUSH
29660: EMPTY
29661: LIST
29662: LIST
29663: LIST
29664: PPUSH
29665: CALL_OW 69
29669: ST_TO_ADDR
// if not tmp then
29670: LD_VAR 0 2
29674: NOT
29675: IFFALSE 29679
// exit ;
29677: GO 29728
// for i in tmp do
29679: LD_ADDR_VAR 0 1
29683: PUSH
29684: LD_VAR 0 2
29688: PUSH
29689: FOR_IN
29690: IFFALSE 29726
// begin if Crawls ( i ) then
29692: LD_VAR 0 1
29696: PPUSH
29697: CALL_OW 318
29701: IFFALSE 29712
// ComWalk ( i ) ;
29703: LD_VAR 0 1
29707: PPUSH
29708: CALL_OW 138
// SetClass ( i , 2 ) ;
29712: LD_VAR 0 1
29716: PPUSH
29717: LD_INT 2
29719: PPUSH
29720: CALL_OW 336
// end ;
29724: GO 29689
29726: POP
29727: POP
// end ;
29728: PPOPN 2
29730: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
29731: LD_EXP 78
29735: PUSH
29736: LD_EXP 131
29740: AND
29741: IFFALSE 30029
29743: GO 29745
29745: DISABLE
29746: LD_INT 0
29748: PPUSH
29749: PPUSH
29750: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
29751: LD_OWVAR 2
29755: PPUSH
29756: LD_INT 9
29758: PPUSH
29759: LD_INT 1
29761: PPUSH
29762: LD_INT 1
29764: PPUSH
29765: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
29769: LD_INT 9
29771: PPUSH
29772: LD_OWVAR 2
29776: PPUSH
29777: CALL_OW 343
// uc_side := 9 ;
29781: LD_ADDR_OWVAR 20
29785: PUSH
29786: LD_INT 9
29788: ST_TO_ADDR
// uc_nation := 2 ;
29789: LD_ADDR_OWVAR 21
29793: PUSH
29794: LD_INT 2
29796: ST_TO_ADDR
// hc_name := Dark Warrior ;
29797: LD_ADDR_OWVAR 26
29801: PUSH
29802: LD_STRING Dark Warrior
29804: ST_TO_ADDR
// hc_gallery :=  ;
29805: LD_ADDR_OWVAR 33
29809: PUSH
29810: LD_STRING 
29812: ST_TO_ADDR
// hc_noskilllimit := true ;
29813: LD_ADDR_OWVAR 76
29817: PUSH
29818: LD_INT 1
29820: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
29821: LD_ADDR_OWVAR 31
29825: PUSH
29826: LD_INT 30
29828: PUSH
29829: LD_INT 30
29831: PUSH
29832: LD_INT 30
29834: PUSH
29835: LD_INT 30
29837: PUSH
29838: EMPTY
29839: LIST
29840: LIST
29841: LIST
29842: LIST
29843: ST_TO_ADDR
// un := CreateHuman ;
29844: LD_ADDR_VAR 0 3
29848: PUSH
29849: CALL_OW 44
29853: ST_TO_ADDR
// hc_noskilllimit := false ;
29854: LD_ADDR_OWVAR 76
29858: PUSH
29859: LD_INT 0
29861: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29862: LD_VAR 0 3
29866: PPUSH
29867: LD_INT 1
29869: PPUSH
29870: CALL_OW 51
// ToLua ( playRanger() ) ;
29874: LD_STRING playRanger()
29876: PPUSH
29877: CALL_OW 559
// p := 0 ;
29881: LD_ADDR_VAR 0 2
29885: PUSH
29886: LD_INT 0
29888: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29889: LD_INT 35
29891: PPUSH
29892: CALL_OW 67
// p := p + 1 ;
29896: LD_ADDR_VAR 0 2
29900: PUSH
29901: LD_VAR 0 2
29905: PUSH
29906: LD_INT 1
29908: PLUS
29909: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
29910: LD_VAR 0 3
29914: PPUSH
29915: CALL_OW 256
29919: PUSH
29920: LD_INT 1000
29922: LESS
29923: IFFALSE 29937
// SetLives ( un , 1000 ) ;
29925: LD_VAR 0 3
29929: PPUSH
29930: LD_INT 1000
29932: PPUSH
29933: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
29937: LD_VAR 0 3
29941: PPUSH
29942: LD_INT 81
29944: PUSH
29945: LD_OWVAR 2
29949: PUSH
29950: EMPTY
29951: LIST
29952: LIST
29953: PUSH
29954: LD_INT 91
29956: PUSH
29957: LD_VAR 0 3
29961: PUSH
29962: LD_INT 30
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: LIST
29969: PUSH
29970: EMPTY
29971: LIST
29972: LIST
29973: PPUSH
29974: CALL_OW 69
29978: PPUSH
29979: LD_VAR 0 3
29983: PPUSH
29984: CALL_OW 74
29988: PPUSH
29989: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
29993: LD_VAR 0 2
29997: PUSH
29998: LD_INT 80
30000: GREATER
30001: PUSH
30002: LD_VAR 0 3
30006: PPUSH
30007: CALL_OW 301
30011: OR
30012: IFFALSE 29889
// if un then
30014: LD_VAR 0 3
30018: IFFALSE 30029
// RemoveUnit ( un ) ;
30020: LD_VAR 0 3
30024: PPUSH
30025: CALL_OW 64
// end ;
30029: PPOPN 3
30031: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
30032: LD_EXP 132
30036: IFFALSE 30152
30038: GO 30040
30040: DISABLE
30041: LD_INT 0
30043: PPUSH
30044: PPUSH
30045: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
30046: LD_ADDR_VAR 0 2
30050: PUSH
30051: LD_INT 81
30053: PUSH
30054: LD_OWVAR 2
30058: PUSH
30059: EMPTY
30060: LIST
30061: LIST
30062: PUSH
30063: LD_INT 21
30065: PUSH
30066: LD_INT 1
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: PUSH
30073: EMPTY
30074: LIST
30075: LIST
30076: PPUSH
30077: CALL_OW 69
30081: ST_TO_ADDR
// ToLua ( playComputer() ) ;
30082: LD_STRING playComputer()
30084: PPUSH
30085: CALL_OW 559
// if not tmp then
30089: LD_VAR 0 2
30093: NOT
30094: IFFALSE 30098
// exit ;
30096: GO 30152
// for i in tmp do
30098: LD_ADDR_VAR 0 1
30102: PUSH
30103: LD_VAR 0 2
30107: PUSH
30108: FOR_IN
30109: IFFALSE 30150
// for j := 1 to 4 do
30111: LD_ADDR_VAR 0 3
30115: PUSH
30116: DOUBLE
30117: LD_INT 1
30119: DEC
30120: ST_TO_ADDR
30121: LD_INT 4
30123: PUSH
30124: FOR_TO
30125: IFFALSE 30146
// SetSkill ( i , j , 10 ) ;
30127: LD_VAR 0 1
30131: PPUSH
30132: LD_VAR 0 3
30136: PPUSH
30137: LD_INT 10
30139: PPUSH
30140: CALL_OW 237
30144: GO 30124
30146: POP
30147: POP
30148: GO 30108
30150: POP
30151: POP
// end ;
30152: PPOPN 3
30154: END
// every 0 0$1 trigger s30 do var i , tmp ;
30155: LD_EXP 133
30159: IFFALSE 30228
30161: GO 30163
30163: DISABLE
30164: LD_INT 0
30166: PPUSH
30167: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30168: LD_ADDR_VAR 0 2
30172: PUSH
30173: LD_INT 22
30175: PUSH
30176: LD_OWVAR 2
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: PPUSH
30185: CALL_OW 69
30189: ST_TO_ADDR
// if not tmp then
30190: LD_VAR 0 2
30194: NOT
30195: IFFALSE 30199
// exit ;
30197: GO 30228
// for i in tmp do
30199: LD_ADDR_VAR 0 1
30203: PUSH
30204: LD_VAR 0 2
30208: PUSH
30209: FOR_IN
30210: IFFALSE 30226
// SetLives ( i , 300 ) ;
30212: LD_VAR 0 1
30216: PPUSH
30217: LD_INT 300
30219: PPUSH
30220: CALL_OW 234
30224: GO 30209
30226: POP
30227: POP
// end ;
30228: PPOPN 2
30230: END
// every 0 0$1 trigger s60 do var i , tmp ;
30231: LD_EXP 134
30235: IFFALSE 30304
30237: GO 30239
30239: DISABLE
30240: LD_INT 0
30242: PPUSH
30243: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30244: LD_ADDR_VAR 0 2
30248: PUSH
30249: LD_INT 22
30251: PUSH
30252: LD_OWVAR 2
30256: PUSH
30257: EMPTY
30258: LIST
30259: LIST
30260: PPUSH
30261: CALL_OW 69
30265: ST_TO_ADDR
// if not tmp then
30266: LD_VAR 0 2
30270: NOT
30271: IFFALSE 30275
// exit ;
30273: GO 30304
// for i in tmp do
30275: LD_ADDR_VAR 0 1
30279: PUSH
30280: LD_VAR 0 2
30284: PUSH
30285: FOR_IN
30286: IFFALSE 30302
// SetLives ( i , 600 ) ;
30288: LD_VAR 0 1
30292: PPUSH
30293: LD_INT 600
30295: PPUSH
30296: CALL_OW 234
30300: GO 30285
30302: POP
30303: POP
// end ;
30304: PPOPN 2
30306: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30307: LD_INT 0
30309: PPUSH
// case cmd of 301 :
30310: LD_VAR 0 1
30314: PUSH
30315: LD_INT 301
30317: DOUBLE
30318: EQUAL
30319: IFTRUE 30323
30321: GO 30355
30323: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
30324: LD_VAR 0 6
30328: PPUSH
30329: LD_VAR 0 7
30333: PPUSH
30334: LD_VAR 0 8
30338: PPUSH
30339: LD_VAR 0 4
30343: PPUSH
30344: LD_VAR 0 5
30348: PPUSH
30349: CALL 31556 0 5
30353: GO 30476
30355: LD_INT 302
30357: DOUBLE
30358: EQUAL
30359: IFTRUE 30363
30361: GO 30400
30363: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
30364: LD_VAR 0 6
30368: PPUSH
30369: LD_VAR 0 7
30373: PPUSH
30374: LD_VAR 0 8
30378: PPUSH
30379: LD_VAR 0 9
30383: PPUSH
30384: LD_VAR 0 4
30388: PPUSH
30389: LD_VAR 0 5
30393: PPUSH
30394: CALL 31647 0 6
30398: GO 30476
30400: LD_INT 303
30402: DOUBLE
30403: EQUAL
30404: IFTRUE 30408
30406: GO 30445
30408: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
30409: LD_VAR 0 6
30413: PPUSH
30414: LD_VAR 0 7
30418: PPUSH
30419: LD_VAR 0 8
30423: PPUSH
30424: LD_VAR 0 9
30428: PPUSH
30429: LD_VAR 0 4
30433: PPUSH
30434: LD_VAR 0 5
30438: PPUSH
30439: CALL 30481 0 6
30443: GO 30476
30445: LD_INT 304
30447: DOUBLE
30448: EQUAL
30449: IFTRUE 30453
30451: GO 30475
30453: POP
// hHackTeleport ( unit , x , y ) ; end ;
30454: LD_VAR 0 2
30458: PPUSH
30459: LD_VAR 0 4
30463: PPUSH
30464: LD_VAR 0 5
30468: PPUSH
30469: CALL 32240 0 3
30473: GO 30476
30475: POP
// end ;
30476: LD_VAR 0 12
30480: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
30481: LD_INT 0
30483: PPUSH
30484: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
30485: LD_VAR 0 1
30489: PUSH
30490: LD_INT 1
30492: LESS
30493: PUSH
30494: LD_VAR 0 1
30498: PUSH
30499: LD_INT 3
30501: GREATER
30502: OR
30503: PUSH
30504: LD_VAR 0 5
30508: PPUSH
30509: LD_VAR 0 6
30513: PPUSH
30514: CALL_OW 428
30518: OR
30519: IFFALSE 30523
// exit ;
30521: GO 31243
// uc_side := your_side ;
30523: LD_ADDR_OWVAR 20
30527: PUSH
30528: LD_OWVAR 2
30532: ST_TO_ADDR
// uc_nation := nation ;
30533: LD_ADDR_OWVAR 21
30537: PUSH
30538: LD_VAR 0 1
30542: ST_TO_ADDR
// bc_level = 1 ;
30543: LD_ADDR_OWVAR 43
30547: PUSH
30548: LD_INT 1
30550: ST_TO_ADDR
// case btype of 1 :
30551: LD_VAR 0 2
30555: PUSH
30556: LD_INT 1
30558: DOUBLE
30559: EQUAL
30560: IFTRUE 30564
30562: GO 30575
30564: POP
// bc_type := b_depot ; 2 :
30565: LD_ADDR_OWVAR 42
30569: PUSH
30570: LD_INT 0
30572: ST_TO_ADDR
30573: GO 31187
30575: LD_INT 2
30577: DOUBLE
30578: EQUAL
30579: IFTRUE 30583
30581: GO 30594
30583: POP
// bc_type := b_warehouse ; 3 :
30584: LD_ADDR_OWVAR 42
30588: PUSH
30589: LD_INT 1
30591: ST_TO_ADDR
30592: GO 31187
30594: LD_INT 3
30596: DOUBLE
30597: EQUAL
30598: IFTRUE 30602
30600: GO 30613
30602: POP
// bc_type := b_lab ; 4 .. 9 :
30603: LD_ADDR_OWVAR 42
30607: PUSH
30608: LD_INT 6
30610: ST_TO_ADDR
30611: GO 31187
30613: LD_INT 4
30615: DOUBLE
30616: GREATEREQUAL
30617: IFFALSE 30625
30619: LD_INT 9
30621: DOUBLE
30622: LESSEQUAL
30623: IFTRUE 30627
30625: GO 30679
30627: POP
// begin bc_type := b_lab_half ;
30628: LD_ADDR_OWVAR 42
30632: PUSH
30633: LD_INT 7
30635: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
30636: LD_ADDR_OWVAR 44
30640: PUSH
30641: LD_INT 10
30643: PUSH
30644: LD_INT 11
30646: PUSH
30647: LD_INT 12
30649: PUSH
30650: LD_INT 15
30652: PUSH
30653: LD_INT 14
30655: PUSH
30656: LD_INT 13
30658: PUSH
30659: EMPTY
30660: LIST
30661: LIST
30662: LIST
30663: LIST
30664: LIST
30665: LIST
30666: PUSH
30667: LD_VAR 0 2
30671: PUSH
30672: LD_INT 3
30674: MINUS
30675: ARRAY
30676: ST_TO_ADDR
// end ; 10 .. 13 :
30677: GO 31187
30679: LD_INT 10
30681: DOUBLE
30682: GREATEREQUAL
30683: IFFALSE 30691
30685: LD_INT 13
30687: DOUBLE
30688: LESSEQUAL
30689: IFTRUE 30693
30691: GO 30770
30693: POP
// begin bc_type := b_lab_full ;
30694: LD_ADDR_OWVAR 42
30698: PUSH
30699: LD_INT 8
30701: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
30702: LD_ADDR_OWVAR 44
30706: PUSH
30707: LD_INT 10
30709: PUSH
30710: LD_INT 12
30712: PUSH
30713: LD_INT 14
30715: PUSH
30716: LD_INT 13
30718: PUSH
30719: EMPTY
30720: LIST
30721: LIST
30722: LIST
30723: LIST
30724: PUSH
30725: LD_VAR 0 2
30729: PUSH
30730: LD_INT 9
30732: MINUS
30733: ARRAY
30734: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
30735: LD_ADDR_OWVAR 45
30739: PUSH
30740: LD_INT 11
30742: PUSH
30743: LD_INT 15
30745: PUSH
30746: LD_INT 12
30748: PUSH
30749: LD_INT 15
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: LIST
30756: LIST
30757: PUSH
30758: LD_VAR 0 2
30762: PUSH
30763: LD_INT 9
30765: MINUS
30766: ARRAY
30767: ST_TO_ADDR
// end ; 14 :
30768: GO 31187
30770: LD_INT 14
30772: DOUBLE
30773: EQUAL
30774: IFTRUE 30778
30776: GO 30789
30778: POP
// bc_type := b_workshop ; 15 :
30779: LD_ADDR_OWVAR 42
30783: PUSH
30784: LD_INT 2
30786: ST_TO_ADDR
30787: GO 31187
30789: LD_INT 15
30791: DOUBLE
30792: EQUAL
30793: IFTRUE 30797
30795: GO 30808
30797: POP
// bc_type := b_factory ; 16 :
30798: LD_ADDR_OWVAR 42
30802: PUSH
30803: LD_INT 3
30805: ST_TO_ADDR
30806: GO 31187
30808: LD_INT 16
30810: DOUBLE
30811: EQUAL
30812: IFTRUE 30816
30814: GO 30827
30816: POP
// bc_type := b_ext_gun ; 17 :
30817: LD_ADDR_OWVAR 42
30821: PUSH
30822: LD_INT 17
30824: ST_TO_ADDR
30825: GO 31187
30827: LD_INT 17
30829: DOUBLE
30830: EQUAL
30831: IFTRUE 30835
30833: GO 30863
30835: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
30836: LD_ADDR_OWVAR 42
30840: PUSH
30841: LD_INT 19
30843: PUSH
30844: LD_INT 23
30846: PUSH
30847: LD_INT 19
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: LIST
30854: PUSH
30855: LD_VAR 0 1
30859: ARRAY
30860: ST_TO_ADDR
30861: GO 31187
30863: LD_INT 18
30865: DOUBLE
30866: EQUAL
30867: IFTRUE 30871
30869: GO 30882
30871: POP
// bc_type := b_ext_radar ; 19 :
30872: LD_ADDR_OWVAR 42
30876: PUSH
30877: LD_INT 20
30879: ST_TO_ADDR
30880: GO 31187
30882: LD_INT 19
30884: DOUBLE
30885: EQUAL
30886: IFTRUE 30890
30888: GO 30901
30890: POP
// bc_type := b_ext_radio ; 20 :
30891: LD_ADDR_OWVAR 42
30895: PUSH
30896: LD_INT 22
30898: ST_TO_ADDR
30899: GO 31187
30901: LD_INT 20
30903: DOUBLE
30904: EQUAL
30905: IFTRUE 30909
30907: GO 30920
30909: POP
// bc_type := b_ext_siberium ; 21 :
30910: LD_ADDR_OWVAR 42
30914: PUSH
30915: LD_INT 21
30917: ST_TO_ADDR
30918: GO 31187
30920: LD_INT 21
30922: DOUBLE
30923: EQUAL
30924: IFTRUE 30928
30926: GO 30939
30928: POP
// bc_type := b_ext_computer ; 22 :
30929: LD_ADDR_OWVAR 42
30933: PUSH
30934: LD_INT 24
30936: ST_TO_ADDR
30937: GO 31187
30939: LD_INT 22
30941: DOUBLE
30942: EQUAL
30943: IFTRUE 30947
30945: GO 30958
30947: POP
// bc_type := b_ext_track ; 23 :
30948: LD_ADDR_OWVAR 42
30952: PUSH
30953: LD_INT 16
30955: ST_TO_ADDR
30956: GO 31187
30958: LD_INT 23
30960: DOUBLE
30961: EQUAL
30962: IFTRUE 30966
30964: GO 30977
30966: POP
// bc_type := b_ext_laser ; 24 :
30967: LD_ADDR_OWVAR 42
30971: PUSH
30972: LD_INT 25
30974: ST_TO_ADDR
30975: GO 31187
30977: LD_INT 24
30979: DOUBLE
30980: EQUAL
30981: IFTRUE 30985
30983: GO 30996
30985: POP
// bc_type := b_control_tower ; 25 :
30986: LD_ADDR_OWVAR 42
30990: PUSH
30991: LD_INT 36
30993: ST_TO_ADDR
30994: GO 31187
30996: LD_INT 25
30998: DOUBLE
30999: EQUAL
31000: IFTRUE 31004
31002: GO 31015
31004: POP
// bc_type := b_breastwork ; 26 :
31005: LD_ADDR_OWVAR 42
31009: PUSH
31010: LD_INT 31
31012: ST_TO_ADDR
31013: GO 31187
31015: LD_INT 26
31017: DOUBLE
31018: EQUAL
31019: IFTRUE 31023
31021: GO 31034
31023: POP
// bc_type := b_bunker ; 27 :
31024: LD_ADDR_OWVAR 42
31028: PUSH
31029: LD_INT 32
31031: ST_TO_ADDR
31032: GO 31187
31034: LD_INT 27
31036: DOUBLE
31037: EQUAL
31038: IFTRUE 31042
31040: GO 31053
31042: POP
// bc_type := b_turret ; 28 :
31043: LD_ADDR_OWVAR 42
31047: PUSH
31048: LD_INT 33
31050: ST_TO_ADDR
31051: GO 31187
31053: LD_INT 28
31055: DOUBLE
31056: EQUAL
31057: IFTRUE 31061
31059: GO 31072
31061: POP
// bc_type := b_armoury ; 29 :
31062: LD_ADDR_OWVAR 42
31066: PUSH
31067: LD_INT 4
31069: ST_TO_ADDR
31070: GO 31187
31072: LD_INT 29
31074: DOUBLE
31075: EQUAL
31076: IFTRUE 31080
31078: GO 31091
31080: POP
// bc_type := b_barracks ; 30 :
31081: LD_ADDR_OWVAR 42
31085: PUSH
31086: LD_INT 5
31088: ST_TO_ADDR
31089: GO 31187
31091: LD_INT 30
31093: DOUBLE
31094: EQUAL
31095: IFTRUE 31099
31097: GO 31110
31099: POP
// bc_type := b_solar_power ; 31 :
31100: LD_ADDR_OWVAR 42
31104: PUSH
31105: LD_INT 27
31107: ST_TO_ADDR
31108: GO 31187
31110: LD_INT 31
31112: DOUBLE
31113: EQUAL
31114: IFTRUE 31118
31116: GO 31129
31118: POP
// bc_type := b_oil_power ; 32 :
31119: LD_ADDR_OWVAR 42
31123: PUSH
31124: LD_INT 26
31126: ST_TO_ADDR
31127: GO 31187
31129: LD_INT 32
31131: DOUBLE
31132: EQUAL
31133: IFTRUE 31137
31135: GO 31148
31137: POP
// bc_type := b_siberite_power ; 33 :
31138: LD_ADDR_OWVAR 42
31142: PUSH
31143: LD_INT 28
31145: ST_TO_ADDR
31146: GO 31187
31148: LD_INT 33
31150: DOUBLE
31151: EQUAL
31152: IFTRUE 31156
31154: GO 31167
31156: POP
// bc_type := b_oil_mine ; 34 :
31157: LD_ADDR_OWVAR 42
31161: PUSH
31162: LD_INT 29
31164: ST_TO_ADDR
31165: GO 31187
31167: LD_INT 34
31169: DOUBLE
31170: EQUAL
31171: IFTRUE 31175
31173: GO 31186
31175: POP
// bc_type := b_siberite_mine ; end ;
31176: LD_ADDR_OWVAR 42
31180: PUSH
31181: LD_INT 30
31183: ST_TO_ADDR
31184: GO 31187
31186: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
31187: LD_ADDR_VAR 0 8
31191: PUSH
31192: LD_VAR 0 5
31196: PPUSH
31197: LD_VAR 0 6
31201: PPUSH
31202: LD_VAR 0 3
31206: PPUSH
31207: CALL_OW 47
31211: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
31212: LD_OWVAR 42
31216: PUSH
31217: LD_INT 32
31219: PUSH
31220: LD_INT 33
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: IN
31227: IFFALSE 31243
// PlaceWeaponTurret ( b , weapon ) ;
31229: LD_VAR 0 8
31233: PPUSH
31234: LD_VAR 0 4
31238: PPUSH
31239: CALL_OW 431
// end ;
31243: LD_VAR 0 7
31247: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
31248: LD_INT 0
31250: PPUSH
31251: PPUSH
31252: PPUSH
31253: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31254: LD_ADDR_VAR 0 4
31258: PUSH
31259: LD_INT 22
31261: PUSH
31262: LD_OWVAR 2
31266: PUSH
31267: EMPTY
31268: LIST
31269: LIST
31270: PUSH
31271: LD_INT 2
31273: PUSH
31274: LD_INT 30
31276: PUSH
31277: LD_INT 0
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: PUSH
31284: LD_INT 30
31286: PUSH
31287: LD_INT 1
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: PUSH
31294: EMPTY
31295: LIST
31296: LIST
31297: LIST
31298: PUSH
31299: EMPTY
31300: LIST
31301: LIST
31302: PPUSH
31303: CALL_OW 69
31307: ST_TO_ADDR
// if not tmp then
31308: LD_VAR 0 4
31312: NOT
31313: IFFALSE 31317
// exit ;
31315: GO 31376
// for i in tmp do
31317: LD_ADDR_VAR 0 2
31321: PUSH
31322: LD_VAR 0 4
31326: PUSH
31327: FOR_IN
31328: IFFALSE 31374
// for j = 1 to 3 do
31330: LD_ADDR_VAR 0 3
31334: PUSH
31335: DOUBLE
31336: LD_INT 1
31338: DEC
31339: ST_TO_ADDR
31340: LD_INT 3
31342: PUSH
31343: FOR_TO
31344: IFFALSE 31370
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
31346: LD_VAR 0 2
31350: PPUSH
31351: CALL_OW 274
31355: PPUSH
31356: LD_VAR 0 3
31360: PPUSH
31361: LD_INT 99999
31363: PPUSH
31364: CALL_OW 277
31368: GO 31343
31370: POP
31371: POP
31372: GO 31327
31374: POP
31375: POP
// end ;
31376: LD_VAR 0 1
31380: RET
// export function hHackSetLevel10 ; var i , j ; begin
31381: LD_INT 0
31383: PPUSH
31384: PPUSH
31385: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31386: LD_ADDR_VAR 0 2
31390: PUSH
31391: LD_INT 21
31393: PUSH
31394: LD_INT 1
31396: PUSH
31397: EMPTY
31398: LIST
31399: LIST
31400: PPUSH
31401: CALL_OW 69
31405: PUSH
31406: FOR_IN
31407: IFFALSE 31459
// if IsSelected ( i ) then
31409: LD_VAR 0 2
31413: PPUSH
31414: CALL_OW 306
31418: IFFALSE 31457
// begin for j := 1 to 4 do
31420: LD_ADDR_VAR 0 3
31424: PUSH
31425: DOUBLE
31426: LD_INT 1
31428: DEC
31429: ST_TO_ADDR
31430: LD_INT 4
31432: PUSH
31433: FOR_TO
31434: IFFALSE 31455
// SetSkill ( i , j , 10 ) ;
31436: LD_VAR 0 2
31440: PPUSH
31441: LD_VAR 0 3
31445: PPUSH
31446: LD_INT 10
31448: PPUSH
31449: CALL_OW 237
31453: GO 31433
31455: POP
31456: POP
// end ;
31457: GO 31406
31459: POP
31460: POP
// end ;
31461: LD_VAR 0 1
31465: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
31466: LD_INT 0
31468: PPUSH
31469: PPUSH
31470: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
31471: LD_ADDR_VAR 0 2
31475: PUSH
31476: LD_INT 22
31478: PUSH
31479: LD_OWVAR 2
31483: PUSH
31484: EMPTY
31485: LIST
31486: LIST
31487: PUSH
31488: LD_INT 21
31490: PUSH
31491: LD_INT 1
31493: PUSH
31494: EMPTY
31495: LIST
31496: LIST
31497: PUSH
31498: EMPTY
31499: LIST
31500: LIST
31501: PPUSH
31502: CALL_OW 69
31506: PUSH
31507: FOR_IN
31508: IFFALSE 31549
// begin for j := 1 to 4 do
31510: LD_ADDR_VAR 0 3
31514: PUSH
31515: DOUBLE
31516: LD_INT 1
31518: DEC
31519: ST_TO_ADDR
31520: LD_INT 4
31522: PUSH
31523: FOR_TO
31524: IFFALSE 31545
// SetSkill ( i , j , 10 ) ;
31526: LD_VAR 0 2
31530: PPUSH
31531: LD_VAR 0 3
31535: PPUSH
31536: LD_INT 10
31538: PPUSH
31539: CALL_OW 237
31543: GO 31523
31545: POP
31546: POP
// end ;
31547: GO 31507
31549: POP
31550: POP
// end ;
31551: LD_VAR 0 1
31555: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
31556: LD_INT 0
31558: PPUSH
// uc_side := your_side ;
31559: LD_ADDR_OWVAR 20
31563: PUSH
31564: LD_OWVAR 2
31568: ST_TO_ADDR
// uc_nation := nation ;
31569: LD_ADDR_OWVAR 21
31573: PUSH
31574: LD_VAR 0 1
31578: ST_TO_ADDR
// InitHc ;
31579: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
31583: LD_INT 0
31585: PPUSH
31586: LD_VAR 0 2
31590: PPUSH
31591: LD_VAR 0 3
31595: PPUSH
31596: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
31600: LD_VAR 0 4
31604: PPUSH
31605: LD_VAR 0 5
31609: PPUSH
31610: CALL_OW 428
31614: PUSH
31615: LD_INT 0
31617: EQUAL
31618: IFFALSE 31642
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
31620: CALL_OW 44
31624: PPUSH
31625: LD_VAR 0 4
31629: PPUSH
31630: LD_VAR 0 5
31634: PPUSH
31635: LD_INT 1
31637: PPUSH
31638: CALL_OW 48
// end ;
31642: LD_VAR 0 6
31646: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
31647: LD_INT 0
31649: PPUSH
31650: PPUSH
// uc_side := your_side ;
31651: LD_ADDR_OWVAR 20
31655: PUSH
31656: LD_OWVAR 2
31660: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
31661: LD_VAR 0 1
31665: PUSH
31666: LD_INT 1
31668: PUSH
31669: LD_INT 2
31671: PUSH
31672: LD_INT 3
31674: PUSH
31675: LD_INT 4
31677: PUSH
31678: LD_INT 5
31680: PUSH
31681: EMPTY
31682: LIST
31683: LIST
31684: LIST
31685: LIST
31686: LIST
31687: IN
31688: IFFALSE 31700
// uc_nation := nation_american else
31690: LD_ADDR_OWVAR 21
31694: PUSH
31695: LD_INT 1
31697: ST_TO_ADDR
31698: GO 31743
// if chassis in [ 11 , 12 , 13 , 14 ] then
31700: LD_VAR 0 1
31704: PUSH
31705: LD_INT 11
31707: PUSH
31708: LD_INT 12
31710: PUSH
31711: LD_INT 13
31713: PUSH
31714: LD_INT 14
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: LIST
31721: LIST
31722: IN
31723: IFFALSE 31735
// uc_nation := nation_arabian else
31725: LD_ADDR_OWVAR 21
31729: PUSH
31730: LD_INT 2
31732: ST_TO_ADDR
31733: GO 31743
// uc_nation := nation_russian ;
31735: LD_ADDR_OWVAR 21
31739: PUSH
31740: LD_INT 3
31742: ST_TO_ADDR
// vc_chassis := chassis ;
31743: LD_ADDR_OWVAR 37
31747: PUSH
31748: LD_VAR 0 1
31752: ST_TO_ADDR
// vc_engine := engine ;
31753: LD_ADDR_OWVAR 39
31757: PUSH
31758: LD_VAR 0 2
31762: ST_TO_ADDR
// vc_control := control ;
31763: LD_ADDR_OWVAR 38
31767: PUSH
31768: LD_VAR 0 3
31772: ST_TO_ADDR
// vc_weapon := weapon ;
31773: LD_ADDR_OWVAR 40
31777: PUSH
31778: LD_VAR 0 4
31782: ST_TO_ADDR
// un := CreateVehicle ;
31783: LD_ADDR_VAR 0 8
31787: PUSH
31788: CALL_OW 45
31792: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
31793: LD_VAR 0 8
31797: PPUSH
31798: LD_INT 0
31800: PPUSH
31801: LD_INT 5
31803: PPUSH
31804: CALL_OW 12
31808: PPUSH
31809: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
31813: LD_VAR 0 8
31817: PPUSH
31818: LD_VAR 0 5
31822: PPUSH
31823: LD_VAR 0 6
31827: PPUSH
31828: LD_INT 1
31830: PPUSH
31831: CALL_OW 48
// end ;
31835: LD_VAR 0 7
31839: RET
// export hInvincible ; every 1 do
31840: GO 31842
31842: DISABLE
// hInvincible := [ ] ;
31843: LD_ADDR_EXP 135
31847: PUSH
31848: EMPTY
31849: ST_TO_ADDR
31850: END
// every 10 do var i ;
31851: GO 31853
31853: DISABLE
31854: LD_INT 0
31856: PPUSH
// begin enable ;
31857: ENABLE
// if not hInvincible then
31858: LD_EXP 135
31862: NOT
31863: IFFALSE 31867
// exit ;
31865: GO 31911
// for i in hInvincible do
31867: LD_ADDR_VAR 0 1
31871: PUSH
31872: LD_EXP 135
31876: PUSH
31877: FOR_IN
31878: IFFALSE 31909
// if GetLives ( i ) < 1000 then
31880: LD_VAR 0 1
31884: PPUSH
31885: CALL_OW 256
31889: PUSH
31890: LD_INT 1000
31892: LESS
31893: IFFALSE 31907
// SetLives ( i , 1000 ) ;
31895: LD_VAR 0 1
31899: PPUSH
31900: LD_INT 1000
31902: PPUSH
31903: CALL_OW 234
31907: GO 31877
31909: POP
31910: POP
// end ;
31911: PPOPN 1
31913: END
// export function hHackInvincible ; var i ; begin
31914: LD_INT 0
31916: PPUSH
31917: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
31918: LD_ADDR_VAR 0 2
31922: PUSH
31923: LD_INT 2
31925: PUSH
31926: LD_INT 21
31928: PUSH
31929: LD_INT 1
31931: PUSH
31932: EMPTY
31933: LIST
31934: LIST
31935: PUSH
31936: LD_INT 21
31938: PUSH
31939: LD_INT 2
31941: PUSH
31942: EMPTY
31943: LIST
31944: LIST
31945: PUSH
31946: EMPTY
31947: LIST
31948: LIST
31949: LIST
31950: PPUSH
31951: CALL_OW 69
31955: PUSH
31956: FOR_IN
31957: IFFALSE 32018
// if IsSelected ( i ) then
31959: LD_VAR 0 2
31963: PPUSH
31964: CALL_OW 306
31968: IFFALSE 32016
// begin if i in hInvincible then
31970: LD_VAR 0 2
31974: PUSH
31975: LD_EXP 135
31979: IN
31980: IFFALSE 32000
// hInvincible := hInvincible diff i else
31982: LD_ADDR_EXP 135
31986: PUSH
31987: LD_EXP 135
31991: PUSH
31992: LD_VAR 0 2
31996: DIFF
31997: ST_TO_ADDR
31998: GO 32016
// hInvincible := hInvincible union i ;
32000: LD_ADDR_EXP 135
32004: PUSH
32005: LD_EXP 135
32009: PUSH
32010: LD_VAR 0 2
32014: UNION
32015: ST_TO_ADDR
// end ;
32016: GO 31956
32018: POP
32019: POP
// end ;
32020: LD_VAR 0 1
32024: RET
// export function hHackInvisible ; var i , j ; begin
32025: LD_INT 0
32027: PPUSH
32028: PPUSH
32029: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32030: LD_ADDR_VAR 0 2
32034: PUSH
32035: LD_INT 21
32037: PUSH
32038: LD_INT 1
32040: PUSH
32041: EMPTY
32042: LIST
32043: LIST
32044: PPUSH
32045: CALL_OW 69
32049: PUSH
32050: FOR_IN
32051: IFFALSE 32075
// if IsSelected ( i ) then
32053: LD_VAR 0 2
32057: PPUSH
32058: CALL_OW 306
32062: IFFALSE 32073
// ComForceInvisible ( i ) ;
32064: LD_VAR 0 2
32068: PPUSH
32069: CALL_OW 496
32073: GO 32050
32075: POP
32076: POP
// end ;
32077: LD_VAR 0 1
32081: RET
// export function hHackChangeYourSide ; begin
32082: LD_INT 0
32084: PPUSH
// if your_side = 8 then
32085: LD_OWVAR 2
32089: PUSH
32090: LD_INT 8
32092: EQUAL
32093: IFFALSE 32105
// your_side := 0 else
32095: LD_ADDR_OWVAR 2
32099: PUSH
32100: LD_INT 0
32102: ST_TO_ADDR
32103: GO 32119
// your_side := your_side + 1 ;
32105: LD_ADDR_OWVAR 2
32109: PUSH
32110: LD_OWVAR 2
32114: PUSH
32115: LD_INT 1
32117: PLUS
32118: ST_TO_ADDR
// end ;
32119: LD_VAR 0 1
32123: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32124: LD_INT 0
32126: PPUSH
32127: PPUSH
32128: PPUSH
// for i in all_units do
32129: LD_ADDR_VAR 0 2
32133: PUSH
32134: LD_OWVAR 3
32138: PUSH
32139: FOR_IN
32140: IFFALSE 32218
// if IsSelected ( i ) then
32142: LD_VAR 0 2
32146: PPUSH
32147: CALL_OW 306
32151: IFFALSE 32216
// begin j := GetSide ( i ) ;
32153: LD_ADDR_VAR 0 3
32157: PUSH
32158: LD_VAR 0 2
32162: PPUSH
32163: CALL_OW 255
32167: ST_TO_ADDR
// if j = 8 then
32168: LD_VAR 0 3
32172: PUSH
32173: LD_INT 8
32175: EQUAL
32176: IFFALSE 32188
// j := 0 else
32178: LD_ADDR_VAR 0 3
32182: PUSH
32183: LD_INT 0
32185: ST_TO_ADDR
32186: GO 32202
// j := j + 1 ;
32188: LD_ADDR_VAR 0 3
32192: PUSH
32193: LD_VAR 0 3
32197: PUSH
32198: LD_INT 1
32200: PLUS
32201: ST_TO_ADDR
// SetSide ( i , j ) ;
32202: LD_VAR 0 2
32206: PPUSH
32207: LD_VAR 0 3
32211: PPUSH
32212: CALL_OW 235
// end ;
32216: GO 32139
32218: POP
32219: POP
// end ;
32220: LD_VAR 0 1
32224: RET
// export function hHackFog ; begin
32225: LD_INT 0
32227: PPUSH
// FogOff ( true ) ;
32228: LD_INT 1
32230: PPUSH
32231: CALL_OW 344
// end ;
32235: LD_VAR 0 1
32239: RET
// export function hHackTeleport ( unit , x , y ) ; begin
32240: LD_INT 0
32242: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
32243: LD_VAR 0 1
32247: PPUSH
32248: LD_VAR 0 2
32252: PPUSH
32253: LD_VAR 0 3
32257: PPUSH
32258: LD_INT 1
32260: PPUSH
32261: LD_INT 1
32263: PPUSH
32264: CALL_OW 483
// CenterOnXY ( x , y ) ;
32268: LD_VAR 0 2
32272: PPUSH
32273: LD_VAR 0 3
32277: PPUSH
32278: CALL_OW 84
// end ; end_of_file
32282: LD_VAR 0 4
32286: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
32287: LD_INT 0
32289: PPUSH
32290: PPUSH
32291: PPUSH
32292: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
32293: LD_VAR 0 1
32297: PPUSH
32298: CALL_OW 264
32302: PUSH
32303: LD_EXP 63
32307: EQUAL
32308: IFFALSE 32380
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
32310: LD_INT 68
32312: PPUSH
32313: LD_VAR 0 1
32317: PPUSH
32318: CALL_OW 255
32322: PPUSH
32323: CALL_OW 321
32327: PUSH
32328: LD_INT 2
32330: EQUAL
32331: IFFALSE 32343
// eff := 70 else
32333: LD_ADDR_VAR 0 4
32337: PUSH
32338: LD_INT 70
32340: ST_TO_ADDR
32341: GO 32351
// eff := 30 ;
32343: LD_ADDR_VAR 0 4
32347: PUSH
32348: LD_INT 30
32350: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
32351: LD_VAR 0 1
32355: PPUSH
32356: CALL_OW 250
32360: PPUSH
32361: LD_VAR 0 1
32365: PPUSH
32366: CALL_OW 251
32370: PPUSH
32371: LD_VAR 0 4
32375: PPUSH
32376: CALL_OW 495
// end ; end ;
32380: LD_VAR 0 2
32384: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
32385: LD_INT 0
32387: PPUSH
// end ;
32388: LD_VAR 0 4
32392: RET
// export function SOS_Command ( cmd ) ; begin
32393: LD_INT 0
32395: PPUSH
// end ;
32396: LD_VAR 0 2
32400: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
32401: LD_INT 0
32403: PPUSH
// end ;
32404: LD_VAR 0 6
32408: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
32409: LD_INT 0
32411: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
32412: LD_VAR 0 1
32416: PUSH
32417: LD_INT 250
32419: EQUAL
32420: PUSH
32421: LD_VAR 0 2
32425: PPUSH
32426: CALL_OW 264
32430: PUSH
32431: LD_EXP 66
32435: EQUAL
32436: AND
32437: IFFALSE 32458
// MinerPlaceMine ( unit , x , y ) ;
32439: LD_VAR 0 2
32443: PPUSH
32444: LD_VAR 0 4
32448: PPUSH
32449: LD_VAR 0 5
32453: PPUSH
32454: CALL 34807 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
32458: LD_VAR 0 1
32462: PUSH
32463: LD_INT 251
32465: EQUAL
32466: PUSH
32467: LD_VAR 0 2
32471: PPUSH
32472: CALL_OW 264
32476: PUSH
32477: LD_EXP 66
32481: EQUAL
32482: AND
32483: IFFALSE 32504
// MinerDetonateMine ( unit , x , y ) ;
32485: LD_VAR 0 2
32489: PPUSH
32490: LD_VAR 0 4
32494: PPUSH
32495: LD_VAR 0 5
32499: PPUSH
32500: CALL 35084 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
32504: LD_VAR 0 1
32508: PUSH
32509: LD_INT 252
32511: EQUAL
32512: PUSH
32513: LD_VAR 0 2
32517: PPUSH
32518: CALL_OW 264
32522: PUSH
32523: LD_EXP 66
32527: EQUAL
32528: AND
32529: IFFALSE 32550
// MinerCreateMinefield ( unit , x , y ) ;
32531: LD_VAR 0 2
32535: PPUSH
32536: LD_VAR 0 4
32540: PPUSH
32541: LD_VAR 0 5
32545: PPUSH
32546: CALL 35501 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
32550: LD_VAR 0 1
32554: PUSH
32555: LD_INT 253
32557: EQUAL
32558: PUSH
32559: LD_VAR 0 2
32563: PPUSH
32564: CALL_OW 257
32568: PUSH
32569: LD_INT 5
32571: EQUAL
32572: AND
32573: IFFALSE 32594
// ComBinocular ( unit , x , y ) ;
32575: LD_VAR 0 2
32579: PPUSH
32580: LD_VAR 0 4
32584: PPUSH
32585: LD_VAR 0 5
32589: PPUSH
32590: CALL 35872 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
32594: LD_VAR 0 1
32598: PUSH
32599: LD_INT 254
32601: EQUAL
32602: PUSH
32603: LD_VAR 0 2
32607: PPUSH
32608: CALL_OW 264
32612: PUSH
32613: LD_EXP 61
32617: EQUAL
32618: AND
32619: PUSH
32620: LD_VAR 0 3
32624: PPUSH
32625: CALL_OW 263
32629: PUSH
32630: LD_INT 3
32632: EQUAL
32633: AND
32634: IFFALSE 32650
// HackDestroyVehicle ( unit , selectedUnit ) ;
32636: LD_VAR 0 2
32640: PPUSH
32641: LD_VAR 0 3
32645: PPUSH
32646: CALL 34167 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
32650: LD_VAR 0 1
32654: PUSH
32655: LD_INT 255
32657: EQUAL
32658: PUSH
32659: LD_VAR 0 2
32663: PPUSH
32664: CALL_OW 264
32668: PUSH
32669: LD_INT 14
32671: PUSH
32672: LD_INT 53
32674: PUSH
32675: EMPTY
32676: LIST
32677: LIST
32678: IN
32679: AND
32680: PUSH
32681: LD_VAR 0 4
32685: PPUSH
32686: LD_VAR 0 5
32690: PPUSH
32691: CALL_OW 488
32695: AND
32696: IFFALSE 32720
// CutTreeXYR ( unit , x , y , 12 ) ;
32698: LD_VAR 0 2
32702: PPUSH
32703: LD_VAR 0 4
32707: PPUSH
32708: LD_VAR 0 5
32712: PPUSH
32713: LD_INT 12
32715: PPUSH
32716: CALL 32733 0 4
// end ;
32720: LD_VAR 0 6
32724: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
32725: LD_INT 0
32727: PPUSH
// end ;
32728: LD_VAR 0 4
32732: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
32733: LD_INT 0
32735: PPUSH
32736: PPUSH
32737: PPUSH
32738: PPUSH
32739: PPUSH
32740: PPUSH
32741: PPUSH
32742: PPUSH
32743: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
32744: LD_VAR 0 1
32748: NOT
32749: PUSH
32750: LD_VAR 0 2
32754: PPUSH
32755: LD_VAR 0 3
32759: PPUSH
32760: CALL_OW 488
32764: NOT
32765: OR
32766: PUSH
32767: LD_VAR 0 4
32771: NOT
32772: OR
32773: IFFALSE 32777
// exit ;
32775: GO 33117
// list := [ ] ;
32777: LD_ADDR_VAR 0 13
32781: PUSH
32782: EMPTY
32783: ST_TO_ADDR
// if x - r < 0 then
32784: LD_VAR 0 2
32788: PUSH
32789: LD_VAR 0 4
32793: MINUS
32794: PUSH
32795: LD_INT 0
32797: LESS
32798: IFFALSE 32810
// min_x := 0 else
32800: LD_ADDR_VAR 0 7
32804: PUSH
32805: LD_INT 0
32807: ST_TO_ADDR
32808: GO 32826
// min_x := x - r ;
32810: LD_ADDR_VAR 0 7
32814: PUSH
32815: LD_VAR 0 2
32819: PUSH
32820: LD_VAR 0 4
32824: MINUS
32825: ST_TO_ADDR
// if y - r < 0 then
32826: LD_VAR 0 3
32830: PUSH
32831: LD_VAR 0 4
32835: MINUS
32836: PUSH
32837: LD_INT 0
32839: LESS
32840: IFFALSE 32852
// min_y := 0 else
32842: LD_ADDR_VAR 0 8
32846: PUSH
32847: LD_INT 0
32849: ST_TO_ADDR
32850: GO 32868
// min_y := y - r ;
32852: LD_ADDR_VAR 0 8
32856: PUSH
32857: LD_VAR 0 3
32861: PUSH
32862: LD_VAR 0 4
32866: MINUS
32867: ST_TO_ADDR
// max_x := x + r ;
32868: LD_ADDR_VAR 0 9
32872: PUSH
32873: LD_VAR 0 2
32877: PUSH
32878: LD_VAR 0 4
32882: PLUS
32883: ST_TO_ADDR
// max_y := y + r ;
32884: LD_ADDR_VAR 0 10
32888: PUSH
32889: LD_VAR 0 3
32893: PUSH
32894: LD_VAR 0 4
32898: PLUS
32899: ST_TO_ADDR
// for _x = min_x to max_x do
32900: LD_ADDR_VAR 0 11
32904: PUSH
32905: DOUBLE
32906: LD_VAR 0 7
32910: DEC
32911: ST_TO_ADDR
32912: LD_VAR 0 9
32916: PUSH
32917: FOR_TO
32918: IFFALSE 33035
// for _y = min_y to max_y do
32920: LD_ADDR_VAR 0 12
32924: PUSH
32925: DOUBLE
32926: LD_VAR 0 8
32930: DEC
32931: ST_TO_ADDR
32932: LD_VAR 0 10
32936: PUSH
32937: FOR_TO
32938: IFFALSE 33031
// begin if not ValidHex ( _x , _y ) then
32940: LD_VAR 0 11
32944: PPUSH
32945: LD_VAR 0 12
32949: PPUSH
32950: CALL_OW 488
32954: NOT
32955: IFFALSE 32959
// continue ;
32957: GO 32937
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
32959: LD_VAR 0 11
32963: PPUSH
32964: LD_VAR 0 12
32968: PPUSH
32969: CALL_OW 351
32973: PUSH
32974: LD_VAR 0 11
32978: PPUSH
32979: LD_VAR 0 12
32983: PPUSH
32984: CALL_OW 554
32988: AND
32989: IFFALSE 33029
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
32991: LD_ADDR_VAR 0 13
32995: PUSH
32996: LD_VAR 0 13
33000: PPUSH
33001: LD_VAR 0 13
33005: PUSH
33006: LD_INT 1
33008: PLUS
33009: PPUSH
33010: LD_VAR 0 11
33014: PUSH
33015: LD_VAR 0 12
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: PPUSH
33024: CALL_OW 2
33028: ST_TO_ADDR
// end ;
33029: GO 32937
33031: POP
33032: POP
33033: GO 32917
33035: POP
33036: POP
// if not list then
33037: LD_VAR 0 13
33041: NOT
33042: IFFALSE 33046
// exit ;
33044: GO 33117
// for i in list do
33046: LD_ADDR_VAR 0 6
33050: PUSH
33051: LD_VAR 0 13
33055: PUSH
33056: FOR_IN
33057: IFFALSE 33115
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
33059: LD_VAR 0 1
33063: PPUSH
33064: LD_STRING M
33066: PUSH
33067: LD_VAR 0 6
33071: PUSH
33072: LD_INT 1
33074: ARRAY
33075: PUSH
33076: LD_VAR 0 6
33080: PUSH
33081: LD_INT 2
33083: ARRAY
33084: PUSH
33085: LD_INT 0
33087: PUSH
33088: LD_INT 0
33090: PUSH
33091: LD_INT 0
33093: PUSH
33094: LD_INT 0
33096: PUSH
33097: EMPTY
33098: LIST
33099: LIST
33100: LIST
33101: LIST
33102: LIST
33103: LIST
33104: LIST
33105: PUSH
33106: EMPTY
33107: LIST
33108: PPUSH
33109: CALL_OW 447
33113: GO 33056
33115: POP
33116: POP
// end ;
33117: LD_VAR 0 5
33121: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
33122: LD_EXP 138
33126: NOT
33127: IFFALSE 33177
33129: GO 33131
33131: DISABLE
// begin initHack := true ;
33132: LD_ADDR_EXP 138
33136: PUSH
33137: LD_INT 1
33139: ST_TO_ADDR
// hackTanks := [ ] ;
33140: LD_ADDR_EXP 139
33144: PUSH
33145: EMPTY
33146: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
33147: LD_ADDR_EXP 140
33151: PUSH
33152: EMPTY
33153: ST_TO_ADDR
// hackLimit := 3 ;
33154: LD_ADDR_EXP 141
33158: PUSH
33159: LD_INT 3
33161: ST_TO_ADDR
// hackDist := 12 ;
33162: LD_ADDR_EXP 142
33166: PUSH
33167: LD_INT 12
33169: ST_TO_ADDR
// hackCounter := [ ] ;
33170: LD_ADDR_EXP 143
33174: PUSH
33175: EMPTY
33176: ST_TO_ADDR
// end ;
33177: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
33178: LD_EXP 138
33182: PUSH
33183: LD_INT 34
33185: PUSH
33186: LD_EXP 61
33190: PUSH
33191: EMPTY
33192: LIST
33193: LIST
33194: PPUSH
33195: CALL_OW 69
33199: AND
33200: IFFALSE 33455
33202: GO 33204
33204: DISABLE
33205: LD_INT 0
33207: PPUSH
33208: PPUSH
// begin enable ;
33209: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
33210: LD_ADDR_VAR 0 1
33214: PUSH
33215: LD_INT 34
33217: PUSH
33218: LD_EXP 61
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: PPUSH
33227: CALL_OW 69
33231: PUSH
33232: FOR_IN
33233: IFFALSE 33453
// begin if not i in hackTanks then
33235: LD_VAR 0 1
33239: PUSH
33240: LD_EXP 139
33244: IN
33245: NOT
33246: IFFALSE 33329
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
33248: LD_ADDR_EXP 139
33252: PUSH
33253: LD_EXP 139
33257: PPUSH
33258: LD_EXP 139
33262: PUSH
33263: LD_INT 1
33265: PLUS
33266: PPUSH
33267: LD_VAR 0 1
33271: PPUSH
33272: CALL_OW 1
33276: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
33277: LD_ADDR_EXP 140
33281: PUSH
33282: LD_EXP 140
33286: PPUSH
33287: LD_EXP 140
33291: PUSH
33292: LD_INT 1
33294: PLUS
33295: PPUSH
33296: EMPTY
33297: PPUSH
33298: CALL_OW 1
33302: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
33303: LD_ADDR_EXP 143
33307: PUSH
33308: LD_EXP 143
33312: PPUSH
33313: LD_EXP 143
33317: PUSH
33318: LD_INT 1
33320: PLUS
33321: PPUSH
33322: EMPTY
33323: PPUSH
33324: CALL_OW 1
33328: ST_TO_ADDR
// end ; if not IsOk ( i ) then
33329: LD_VAR 0 1
33333: PPUSH
33334: CALL_OW 302
33338: NOT
33339: IFFALSE 33352
// begin HackUnlinkAll ( i ) ;
33341: LD_VAR 0 1
33345: PPUSH
33346: CALL 33458 0 1
// continue ;
33350: GO 33232
// end ; HackCheckCapturedStatus ( i ) ;
33352: LD_VAR 0 1
33356: PPUSH
33357: CALL 33901 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
33361: LD_ADDR_VAR 0 2
33365: PUSH
33366: LD_INT 81
33368: PUSH
33369: LD_VAR 0 1
33373: PPUSH
33374: CALL_OW 255
33378: PUSH
33379: EMPTY
33380: LIST
33381: LIST
33382: PUSH
33383: LD_INT 33
33385: PUSH
33386: LD_INT 3
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: PUSH
33393: LD_INT 91
33395: PUSH
33396: LD_VAR 0 1
33400: PUSH
33401: LD_EXP 142
33405: PUSH
33406: EMPTY
33407: LIST
33408: LIST
33409: LIST
33410: PUSH
33411: LD_INT 50
33413: PUSH
33414: EMPTY
33415: LIST
33416: PUSH
33417: EMPTY
33418: LIST
33419: LIST
33420: LIST
33421: LIST
33422: PPUSH
33423: CALL_OW 69
33427: ST_TO_ADDR
// if not tmp then
33428: LD_VAR 0 2
33432: NOT
33433: IFFALSE 33437
// continue ;
33435: GO 33232
// HackLink ( i , tmp ) ;
33437: LD_VAR 0 1
33441: PPUSH
33442: LD_VAR 0 2
33446: PPUSH
33447: CALL 33594 0 2
// end ;
33451: GO 33232
33453: POP
33454: POP
// end ;
33455: PPOPN 2
33457: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
33458: LD_INT 0
33460: PPUSH
33461: PPUSH
33462: PPUSH
// if not hack in hackTanks then
33463: LD_VAR 0 1
33467: PUSH
33468: LD_EXP 139
33472: IN
33473: NOT
33474: IFFALSE 33478
// exit ;
33476: GO 33589
// index := GetElementIndex ( hackTanks , hack ) ;
33478: LD_ADDR_VAR 0 4
33482: PUSH
33483: LD_EXP 139
33487: PPUSH
33488: LD_VAR 0 1
33492: PPUSH
33493: CALL 41063 0 2
33497: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
33498: LD_EXP 140
33502: PUSH
33503: LD_VAR 0 4
33507: ARRAY
33508: IFFALSE 33589
// begin for i in hackTanksCaptured [ index ] do
33510: LD_ADDR_VAR 0 3
33514: PUSH
33515: LD_EXP 140
33519: PUSH
33520: LD_VAR 0 4
33524: ARRAY
33525: PUSH
33526: FOR_IN
33527: IFFALSE 33553
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
33529: LD_VAR 0 3
33533: PUSH
33534: LD_INT 1
33536: ARRAY
33537: PPUSH
33538: LD_VAR 0 3
33542: PUSH
33543: LD_INT 2
33545: ARRAY
33546: PPUSH
33547: CALL_OW 235
33551: GO 33526
33553: POP
33554: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
33555: LD_ADDR_EXP 140
33559: PUSH
33560: LD_EXP 140
33564: PPUSH
33565: LD_VAR 0 4
33569: PPUSH
33570: EMPTY
33571: PPUSH
33572: CALL_OW 1
33576: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
33577: LD_VAR 0 1
33581: PPUSH
33582: LD_INT 0
33584: PPUSH
33585: CALL_OW 505
// end ; end ;
33589: LD_VAR 0 2
33593: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
33594: LD_INT 0
33596: PPUSH
33597: PPUSH
33598: PPUSH
// if not hack in hackTanks or not vehicles then
33599: LD_VAR 0 1
33603: PUSH
33604: LD_EXP 139
33608: IN
33609: NOT
33610: PUSH
33611: LD_VAR 0 2
33615: NOT
33616: OR
33617: IFFALSE 33621
// exit ;
33619: GO 33896
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
33621: LD_ADDR_VAR 0 2
33625: PUSH
33626: LD_VAR 0 1
33630: PPUSH
33631: LD_VAR 0 2
33635: PPUSH
33636: LD_INT 1
33638: PPUSH
33639: LD_INT 1
33641: PPUSH
33642: CALL 41713 0 4
33646: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
33647: LD_ADDR_VAR 0 5
33651: PUSH
33652: LD_EXP 139
33656: PPUSH
33657: LD_VAR 0 1
33661: PPUSH
33662: CALL 41063 0 2
33666: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
33667: LD_EXP 140
33671: PUSH
33672: LD_VAR 0 5
33676: ARRAY
33677: PUSH
33678: LD_EXP 141
33682: LESS
33683: IFFALSE 33872
// begin for i := 1 to vehicles do
33685: LD_ADDR_VAR 0 4
33689: PUSH
33690: DOUBLE
33691: LD_INT 1
33693: DEC
33694: ST_TO_ADDR
33695: LD_VAR 0 2
33699: PUSH
33700: FOR_TO
33701: IFFALSE 33870
// begin if hackTanksCaptured [ index ] = hackLimit then
33703: LD_EXP 140
33707: PUSH
33708: LD_VAR 0 5
33712: ARRAY
33713: PUSH
33714: LD_EXP 141
33718: EQUAL
33719: IFFALSE 33723
// break ;
33721: GO 33870
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
33723: LD_ADDR_EXP 143
33727: PUSH
33728: LD_EXP 143
33732: PPUSH
33733: LD_VAR 0 5
33737: PPUSH
33738: LD_EXP 143
33742: PUSH
33743: LD_VAR 0 5
33747: ARRAY
33748: PUSH
33749: LD_INT 1
33751: PLUS
33752: PPUSH
33753: CALL_OW 1
33757: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
33758: LD_ADDR_EXP 140
33762: PUSH
33763: LD_EXP 140
33767: PPUSH
33768: LD_VAR 0 5
33772: PUSH
33773: LD_EXP 140
33777: PUSH
33778: LD_VAR 0 5
33782: ARRAY
33783: PUSH
33784: LD_INT 1
33786: PLUS
33787: PUSH
33788: EMPTY
33789: LIST
33790: LIST
33791: PPUSH
33792: LD_VAR 0 2
33796: PUSH
33797: LD_VAR 0 4
33801: ARRAY
33802: PUSH
33803: LD_VAR 0 2
33807: PUSH
33808: LD_VAR 0 4
33812: ARRAY
33813: PPUSH
33814: CALL_OW 255
33818: PUSH
33819: EMPTY
33820: LIST
33821: LIST
33822: PPUSH
33823: CALL 41278 0 3
33827: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
33828: LD_VAR 0 2
33832: PUSH
33833: LD_VAR 0 4
33837: ARRAY
33838: PPUSH
33839: LD_VAR 0 1
33843: PPUSH
33844: CALL_OW 255
33848: PPUSH
33849: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
33853: LD_VAR 0 2
33857: PUSH
33858: LD_VAR 0 4
33862: ARRAY
33863: PPUSH
33864: CALL_OW 141
// end ;
33868: GO 33700
33870: POP
33871: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
33872: LD_VAR 0 1
33876: PPUSH
33877: LD_EXP 140
33881: PUSH
33882: LD_VAR 0 5
33886: ARRAY
33887: PUSH
33888: LD_INT 0
33890: PLUS
33891: PPUSH
33892: CALL_OW 505
// end ;
33896: LD_VAR 0 3
33900: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
33901: LD_INT 0
33903: PPUSH
33904: PPUSH
33905: PPUSH
33906: PPUSH
// if not hack in hackTanks then
33907: LD_VAR 0 1
33911: PUSH
33912: LD_EXP 139
33916: IN
33917: NOT
33918: IFFALSE 33922
// exit ;
33920: GO 34162
// index := GetElementIndex ( hackTanks , hack ) ;
33922: LD_ADDR_VAR 0 4
33926: PUSH
33927: LD_EXP 139
33931: PPUSH
33932: LD_VAR 0 1
33936: PPUSH
33937: CALL 41063 0 2
33941: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
33942: LD_ADDR_VAR 0 3
33946: PUSH
33947: DOUBLE
33948: LD_EXP 140
33952: PUSH
33953: LD_VAR 0 4
33957: ARRAY
33958: INC
33959: ST_TO_ADDR
33960: LD_INT 1
33962: PUSH
33963: FOR_DOWNTO
33964: IFFALSE 34136
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
33966: LD_ADDR_VAR 0 5
33970: PUSH
33971: LD_EXP 140
33975: PUSH
33976: LD_VAR 0 4
33980: ARRAY
33981: PUSH
33982: LD_VAR 0 3
33986: ARRAY
33987: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
33988: LD_VAR 0 5
33992: PUSH
33993: LD_INT 1
33995: ARRAY
33996: PPUSH
33997: CALL_OW 302
34001: NOT
34002: PUSH
34003: LD_VAR 0 5
34007: PUSH
34008: LD_INT 1
34010: ARRAY
34011: PPUSH
34012: CALL_OW 255
34016: PUSH
34017: LD_VAR 0 1
34021: PPUSH
34022: CALL_OW 255
34026: NONEQUAL
34027: OR
34028: IFFALSE 34134
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
34030: LD_VAR 0 5
34034: PUSH
34035: LD_INT 1
34037: ARRAY
34038: PPUSH
34039: CALL_OW 305
34043: PUSH
34044: LD_VAR 0 5
34048: PUSH
34049: LD_INT 1
34051: ARRAY
34052: PPUSH
34053: CALL_OW 255
34057: PUSH
34058: LD_VAR 0 1
34062: PPUSH
34063: CALL_OW 255
34067: EQUAL
34068: AND
34069: IFFALSE 34093
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
34071: LD_VAR 0 5
34075: PUSH
34076: LD_INT 1
34078: ARRAY
34079: PPUSH
34080: LD_VAR 0 5
34084: PUSH
34085: LD_INT 2
34087: ARRAY
34088: PPUSH
34089: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
34093: LD_ADDR_EXP 140
34097: PUSH
34098: LD_EXP 140
34102: PPUSH
34103: LD_VAR 0 4
34107: PPUSH
34108: LD_EXP 140
34112: PUSH
34113: LD_VAR 0 4
34117: ARRAY
34118: PPUSH
34119: LD_VAR 0 3
34123: PPUSH
34124: CALL_OW 3
34128: PPUSH
34129: CALL_OW 1
34133: ST_TO_ADDR
// end ; end ;
34134: GO 33963
34136: POP
34137: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34138: LD_VAR 0 1
34142: PPUSH
34143: LD_EXP 140
34147: PUSH
34148: LD_VAR 0 4
34152: ARRAY
34153: PUSH
34154: LD_INT 0
34156: PLUS
34157: PPUSH
34158: CALL_OW 505
// end ;
34162: LD_VAR 0 2
34166: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
34167: LD_INT 0
34169: PPUSH
34170: PPUSH
34171: PPUSH
34172: PPUSH
// if not hack in hackTanks then
34173: LD_VAR 0 1
34177: PUSH
34178: LD_EXP 139
34182: IN
34183: NOT
34184: IFFALSE 34188
// exit ;
34186: GO 34273
// index := GetElementIndex ( hackTanks , hack ) ;
34188: LD_ADDR_VAR 0 5
34192: PUSH
34193: LD_EXP 139
34197: PPUSH
34198: LD_VAR 0 1
34202: PPUSH
34203: CALL 41063 0 2
34207: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
34208: LD_ADDR_VAR 0 4
34212: PUSH
34213: DOUBLE
34214: LD_INT 1
34216: DEC
34217: ST_TO_ADDR
34218: LD_EXP 140
34222: PUSH
34223: LD_VAR 0 5
34227: ARRAY
34228: PUSH
34229: FOR_TO
34230: IFFALSE 34271
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
34232: LD_EXP 140
34236: PUSH
34237: LD_VAR 0 5
34241: ARRAY
34242: PUSH
34243: LD_VAR 0 4
34247: ARRAY
34248: PUSH
34249: LD_INT 1
34251: ARRAY
34252: PUSH
34253: LD_VAR 0 2
34257: EQUAL
34258: IFFALSE 34269
// KillUnit ( vehicle ) ;
34260: LD_VAR 0 2
34264: PPUSH
34265: CALL_OW 66
34269: GO 34229
34271: POP
34272: POP
// end ;
34273: LD_VAR 0 3
34277: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
34278: LD_EXP 144
34282: NOT
34283: IFFALSE 34318
34285: GO 34287
34287: DISABLE
// begin initMiner := true ;
34288: LD_ADDR_EXP 144
34292: PUSH
34293: LD_INT 1
34295: ST_TO_ADDR
// minersList := [ ] ;
34296: LD_ADDR_EXP 145
34300: PUSH
34301: EMPTY
34302: ST_TO_ADDR
// minerMinesList := [ ] ;
34303: LD_ADDR_EXP 146
34307: PUSH
34308: EMPTY
34309: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
34310: LD_ADDR_EXP 147
34314: PUSH
34315: LD_INT 5
34317: ST_TO_ADDR
// end ;
34318: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
34319: LD_EXP 144
34323: PUSH
34324: LD_INT 34
34326: PUSH
34327: LD_EXP 66
34331: PUSH
34332: EMPTY
34333: LIST
34334: LIST
34335: PPUSH
34336: CALL_OW 69
34340: AND
34341: IFFALSE 34804
34343: GO 34345
34345: DISABLE
34346: LD_INT 0
34348: PPUSH
34349: PPUSH
34350: PPUSH
34351: PPUSH
// begin enable ;
34352: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
34353: LD_ADDR_VAR 0 1
34357: PUSH
34358: LD_INT 34
34360: PUSH
34361: LD_EXP 66
34365: PUSH
34366: EMPTY
34367: LIST
34368: LIST
34369: PPUSH
34370: CALL_OW 69
34374: PUSH
34375: FOR_IN
34376: IFFALSE 34448
// begin if not i in minersList then
34378: LD_VAR 0 1
34382: PUSH
34383: LD_EXP 145
34387: IN
34388: NOT
34389: IFFALSE 34446
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
34391: LD_ADDR_EXP 145
34395: PUSH
34396: LD_EXP 145
34400: PPUSH
34401: LD_EXP 145
34405: PUSH
34406: LD_INT 1
34408: PLUS
34409: PPUSH
34410: LD_VAR 0 1
34414: PPUSH
34415: CALL_OW 1
34419: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
34420: LD_ADDR_EXP 146
34424: PUSH
34425: LD_EXP 146
34429: PPUSH
34430: LD_EXP 146
34434: PUSH
34435: LD_INT 1
34437: PLUS
34438: PPUSH
34439: EMPTY
34440: PPUSH
34441: CALL_OW 1
34445: ST_TO_ADDR
// end end ;
34446: GO 34375
34448: POP
34449: POP
// for i := minerMinesList downto 1 do
34450: LD_ADDR_VAR 0 1
34454: PUSH
34455: DOUBLE
34456: LD_EXP 146
34460: INC
34461: ST_TO_ADDR
34462: LD_INT 1
34464: PUSH
34465: FOR_DOWNTO
34466: IFFALSE 34802
// begin if IsLive ( minersList [ i ] ) then
34468: LD_EXP 145
34472: PUSH
34473: LD_VAR 0 1
34477: ARRAY
34478: PPUSH
34479: CALL_OW 300
34483: IFFALSE 34511
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
34485: LD_EXP 145
34489: PUSH
34490: LD_VAR 0 1
34494: ARRAY
34495: PPUSH
34496: LD_EXP 146
34500: PUSH
34501: LD_VAR 0 1
34505: ARRAY
34506: PPUSH
34507: CALL_OW 505
// if not minerMinesList [ i ] then
34511: LD_EXP 146
34515: PUSH
34516: LD_VAR 0 1
34520: ARRAY
34521: NOT
34522: IFFALSE 34526
// continue ;
34524: GO 34465
// for j := minerMinesList [ i ] downto 1 do
34526: LD_ADDR_VAR 0 2
34530: PUSH
34531: DOUBLE
34532: LD_EXP 146
34536: PUSH
34537: LD_VAR 0 1
34541: ARRAY
34542: INC
34543: ST_TO_ADDR
34544: LD_INT 1
34546: PUSH
34547: FOR_DOWNTO
34548: IFFALSE 34798
// begin side := GetSide ( minersList [ i ] ) ;
34550: LD_ADDR_VAR 0 3
34554: PUSH
34555: LD_EXP 145
34559: PUSH
34560: LD_VAR 0 1
34564: ARRAY
34565: PPUSH
34566: CALL_OW 255
34570: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
34571: LD_ADDR_VAR 0 4
34575: PUSH
34576: LD_EXP 146
34580: PUSH
34581: LD_VAR 0 1
34585: ARRAY
34586: PUSH
34587: LD_VAR 0 2
34591: ARRAY
34592: PUSH
34593: LD_INT 1
34595: ARRAY
34596: PPUSH
34597: LD_EXP 146
34601: PUSH
34602: LD_VAR 0 1
34606: ARRAY
34607: PUSH
34608: LD_VAR 0 2
34612: ARRAY
34613: PUSH
34614: LD_INT 2
34616: ARRAY
34617: PPUSH
34618: CALL_OW 428
34622: ST_TO_ADDR
// if not tmp then
34623: LD_VAR 0 4
34627: NOT
34628: IFFALSE 34632
// continue ;
34630: GO 34547
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
34632: LD_VAR 0 4
34636: PUSH
34637: LD_INT 81
34639: PUSH
34640: LD_VAR 0 3
34644: PUSH
34645: EMPTY
34646: LIST
34647: LIST
34648: PPUSH
34649: CALL_OW 69
34653: IN
34654: PUSH
34655: LD_EXP 146
34659: PUSH
34660: LD_VAR 0 1
34664: ARRAY
34665: PUSH
34666: LD_VAR 0 2
34670: ARRAY
34671: PUSH
34672: LD_INT 1
34674: ARRAY
34675: PPUSH
34676: LD_EXP 146
34680: PUSH
34681: LD_VAR 0 1
34685: ARRAY
34686: PUSH
34687: LD_VAR 0 2
34691: ARRAY
34692: PUSH
34693: LD_INT 2
34695: ARRAY
34696: PPUSH
34697: CALL_OW 458
34701: AND
34702: IFFALSE 34796
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
34704: LD_EXP 146
34708: PUSH
34709: LD_VAR 0 1
34713: ARRAY
34714: PUSH
34715: LD_VAR 0 2
34719: ARRAY
34720: PUSH
34721: LD_INT 1
34723: ARRAY
34724: PPUSH
34725: LD_EXP 146
34729: PUSH
34730: LD_VAR 0 1
34734: ARRAY
34735: PUSH
34736: LD_VAR 0 2
34740: ARRAY
34741: PUSH
34742: LD_INT 2
34744: ARRAY
34745: PPUSH
34746: LD_VAR 0 3
34750: PPUSH
34751: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
34755: LD_ADDR_EXP 146
34759: PUSH
34760: LD_EXP 146
34764: PPUSH
34765: LD_VAR 0 1
34769: PPUSH
34770: LD_EXP 146
34774: PUSH
34775: LD_VAR 0 1
34779: ARRAY
34780: PPUSH
34781: LD_VAR 0 2
34785: PPUSH
34786: CALL_OW 3
34790: PPUSH
34791: CALL_OW 1
34795: ST_TO_ADDR
// end ; end ;
34796: GO 34547
34798: POP
34799: POP
// end ;
34800: GO 34465
34802: POP
34803: POP
// end ;
34804: PPOPN 4
34806: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
34807: LD_INT 0
34809: PPUSH
34810: PPUSH
// result := false ;
34811: LD_ADDR_VAR 0 4
34815: PUSH
34816: LD_INT 0
34818: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
34819: LD_VAR 0 1
34823: PPUSH
34824: CALL_OW 264
34828: PUSH
34829: LD_EXP 66
34833: EQUAL
34834: NOT
34835: IFFALSE 34839
// exit ;
34837: GO 35079
// index := GetElementIndex ( minersList , unit ) ;
34839: LD_ADDR_VAR 0 5
34843: PUSH
34844: LD_EXP 145
34848: PPUSH
34849: LD_VAR 0 1
34853: PPUSH
34854: CALL 41063 0 2
34858: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
34859: LD_EXP 146
34863: PUSH
34864: LD_VAR 0 5
34868: ARRAY
34869: PUSH
34870: LD_EXP 147
34874: GREATEREQUAL
34875: IFFALSE 34879
// exit ;
34877: GO 35079
// ComMoveXY ( unit , x , y ) ;
34879: LD_VAR 0 1
34883: PPUSH
34884: LD_VAR 0 2
34888: PPUSH
34889: LD_VAR 0 3
34893: PPUSH
34894: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
34898: LD_INT 35
34900: PPUSH
34901: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
34905: LD_VAR 0 1
34909: PPUSH
34910: LD_VAR 0 2
34914: PPUSH
34915: LD_VAR 0 3
34919: PPUSH
34920: CALL 71835 0 3
34924: NOT
34925: PUSH
34926: LD_VAR 0 1
34930: PPUSH
34931: CALL_OW 314
34935: AND
34936: IFFALSE 34940
// exit ;
34938: GO 35079
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
34940: LD_VAR 0 2
34944: PPUSH
34945: LD_VAR 0 3
34949: PPUSH
34950: CALL_OW 428
34954: PUSH
34955: LD_VAR 0 1
34959: EQUAL
34960: PUSH
34961: LD_VAR 0 1
34965: PPUSH
34966: CALL_OW 314
34970: NOT
34971: AND
34972: IFFALSE 34898
// PlaySoundXY ( x , y , PlantMine ) ;
34974: LD_VAR 0 2
34978: PPUSH
34979: LD_VAR 0 3
34983: PPUSH
34984: LD_STRING PlantMine
34986: PPUSH
34987: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
34991: LD_VAR 0 2
34995: PPUSH
34996: LD_VAR 0 3
35000: PPUSH
35001: LD_VAR 0 1
35005: PPUSH
35006: CALL_OW 255
35010: PPUSH
35011: LD_INT 0
35013: PPUSH
35014: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
35018: LD_ADDR_EXP 146
35022: PUSH
35023: LD_EXP 146
35027: PPUSH
35028: LD_VAR 0 5
35032: PUSH
35033: LD_EXP 146
35037: PUSH
35038: LD_VAR 0 5
35042: ARRAY
35043: PUSH
35044: LD_INT 1
35046: PLUS
35047: PUSH
35048: EMPTY
35049: LIST
35050: LIST
35051: PPUSH
35052: LD_VAR 0 2
35056: PUSH
35057: LD_VAR 0 3
35061: PUSH
35062: EMPTY
35063: LIST
35064: LIST
35065: PPUSH
35066: CALL 41278 0 3
35070: ST_TO_ADDR
// result := true ;
35071: LD_ADDR_VAR 0 4
35075: PUSH
35076: LD_INT 1
35078: ST_TO_ADDR
// end ;
35079: LD_VAR 0 4
35083: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
35084: LD_INT 0
35086: PPUSH
35087: PPUSH
35088: PPUSH
// if not unit in minersList then
35089: LD_VAR 0 1
35093: PUSH
35094: LD_EXP 145
35098: IN
35099: NOT
35100: IFFALSE 35104
// exit ;
35102: GO 35496
// index := GetElementIndex ( minersList , unit ) ;
35104: LD_ADDR_VAR 0 6
35108: PUSH
35109: LD_EXP 145
35113: PPUSH
35114: LD_VAR 0 1
35118: PPUSH
35119: CALL 41063 0 2
35123: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
35124: LD_ADDR_VAR 0 5
35128: PUSH
35129: DOUBLE
35130: LD_EXP 146
35134: PUSH
35135: LD_VAR 0 6
35139: ARRAY
35140: INC
35141: ST_TO_ADDR
35142: LD_INT 1
35144: PUSH
35145: FOR_DOWNTO
35146: IFFALSE 35307
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
35148: LD_EXP 146
35152: PUSH
35153: LD_VAR 0 6
35157: ARRAY
35158: PUSH
35159: LD_VAR 0 5
35163: ARRAY
35164: PUSH
35165: LD_INT 1
35167: ARRAY
35168: PUSH
35169: LD_VAR 0 2
35173: EQUAL
35174: PUSH
35175: LD_EXP 146
35179: PUSH
35180: LD_VAR 0 6
35184: ARRAY
35185: PUSH
35186: LD_VAR 0 5
35190: ARRAY
35191: PUSH
35192: LD_INT 2
35194: ARRAY
35195: PUSH
35196: LD_VAR 0 3
35200: EQUAL
35201: AND
35202: IFFALSE 35305
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35204: LD_EXP 146
35208: PUSH
35209: LD_VAR 0 6
35213: ARRAY
35214: PUSH
35215: LD_VAR 0 5
35219: ARRAY
35220: PUSH
35221: LD_INT 1
35223: ARRAY
35224: PPUSH
35225: LD_EXP 146
35229: PUSH
35230: LD_VAR 0 6
35234: ARRAY
35235: PUSH
35236: LD_VAR 0 5
35240: ARRAY
35241: PUSH
35242: LD_INT 2
35244: ARRAY
35245: PPUSH
35246: LD_VAR 0 1
35250: PPUSH
35251: CALL_OW 255
35255: PPUSH
35256: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35260: LD_ADDR_EXP 146
35264: PUSH
35265: LD_EXP 146
35269: PPUSH
35270: LD_VAR 0 6
35274: PPUSH
35275: LD_EXP 146
35279: PUSH
35280: LD_VAR 0 6
35284: ARRAY
35285: PPUSH
35286: LD_VAR 0 5
35290: PPUSH
35291: CALL_OW 3
35295: PPUSH
35296: CALL_OW 1
35300: ST_TO_ADDR
// exit ;
35301: POP
35302: POP
35303: GO 35496
// end ; end ;
35305: GO 35145
35307: POP
35308: POP
// for i := minerMinesList [ index ] downto 1 do
35309: LD_ADDR_VAR 0 5
35313: PUSH
35314: DOUBLE
35315: LD_EXP 146
35319: PUSH
35320: LD_VAR 0 6
35324: ARRAY
35325: INC
35326: ST_TO_ADDR
35327: LD_INT 1
35329: PUSH
35330: FOR_DOWNTO
35331: IFFALSE 35494
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
35333: LD_EXP 146
35337: PUSH
35338: LD_VAR 0 6
35342: ARRAY
35343: PUSH
35344: LD_VAR 0 5
35348: ARRAY
35349: PUSH
35350: LD_INT 1
35352: ARRAY
35353: PPUSH
35354: LD_EXP 146
35358: PUSH
35359: LD_VAR 0 6
35363: ARRAY
35364: PUSH
35365: LD_VAR 0 5
35369: ARRAY
35370: PUSH
35371: LD_INT 2
35373: ARRAY
35374: PPUSH
35375: LD_VAR 0 2
35379: PPUSH
35380: LD_VAR 0 3
35384: PPUSH
35385: CALL_OW 298
35389: PUSH
35390: LD_INT 6
35392: LESS
35393: IFFALSE 35492
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35395: LD_EXP 146
35399: PUSH
35400: LD_VAR 0 6
35404: ARRAY
35405: PUSH
35406: LD_VAR 0 5
35410: ARRAY
35411: PUSH
35412: LD_INT 1
35414: ARRAY
35415: PPUSH
35416: LD_EXP 146
35420: PUSH
35421: LD_VAR 0 6
35425: ARRAY
35426: PUSH
35427: LD_VAR 0 5
35431: ARRAY
35432: PUSH
35433: LD_INT 2
35435: ARRAY
35436: PPUSH
35437: LD_VAR 0 1
35441: PPUSH
35442: CALL_OW 255
35446: PPUSH
35447: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35451: LD_ADDR_EXP 146
35455: PUSH
35456: LD_EXP 146
35460: PPUSH
35461: LD_VAR 0 6
35465: PPUSH
35466: LD_EXP 146
35470: PUSH
35471: LD_VAR 0 6
35475: ARRAY
35476: PPUSH
35477: LD_VAR 0 5
35481: PPUSH
35482: CALL_OW 3
35486: PPUSH
35487: CALL_OW 1
35491: ST_TO_ADDR
// end ; end ;
35492: GO 35330
35494: POP
35495: POP
// end ;
35496: LD_VAR 0 4
35500: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
35501: LD_INT 0
35503: PPUSH
35504: PPUSH
35505: PPUSH
35506: PPUSH
35507: PPUSH
35508: PPUSH
35509: PPUSH
35510: PPUSH
35511: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
35512: LD_VAR 0 1
35516: PPUSH
35517: CALL_OW 264
35521: PUSH
35522: LD_EXP 66
35526: EQUAL
35527: NOT
35528: PUSH
35529: LD_VAR 0 1
35533: PUSH
35534: LD_EXP 145
35538: IN
35539: NOT
35540: OR
35541: IFFALSE 35545
// exit ;
35543: GO 35867
// index := GetElementIndex ( minersList , unit ) ;
35545: LD_ADDR_VAR 0 6
35549: PUSH
35550: LD_EXP 145
35554: PPUSH
35555: LD_VAR 0 1
35559: PPUSH
35560: CALL 41063 0 2
35564: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
35565: LD_ADDR_VAR 0 8
35569: PUSH
35570: LD_EXP 147
35574: PUSH
35575: LD_EXP 146
35579: PUSH
35580: LD_VAR 0 6
35584: ARRAY
35585: MINUS
35586: ST_TO_ADDR
// if not minesFreeAmount then
35587: LD_VAR 0 8
35591: NOT
35592: IFFALSE 35596
// exit ;
35594: GO 35867
// tmp := [ ] ;
35596: LD_ADDR_VAR 0 7
35600: PUSH
35601: EMPTY
35602: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
35603: LD_ADDR_VAR 0 5
35607: PUSH
35608: DOUBLE
35609: LD_INT 1
35611: DEC
35612: ST_TO_ADDR
35613: LD_VAR 0 8
35617: PUSH
35618: FOR_TO
35619: IFFALSE 35814
// begin _d := rand ( 0 , 5 ) ;
35621: LD_ADDR_VAR 0 11
35625: PUSH
35626: LD_INT 0
35628: PPUSH
35629: LD_INT 5
35631: PPUSH
35632: CALL_OW 12
35636: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
35637: LD_ADDR_VAR 0 12
35641: PUSH
35642: LD_INT 2
35644: PPUSH
35645: LD_INT 6
35647: PPUSH
35648: CALL_OW 12
35652: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
35653: LD_ADDR_VAR 0 9
35657: PUSH
35658: LD_VAR 0 2
35662: PPUSH
35663: LD_VAR 0 11
35667: PPUSH
35668: LD_VAR 0 12
35672: PPUSH
35673: CALL_OW 272
35677: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
35678: LD_ADDR_VAR 0 10
35682: PUSH
35683: LD_VAR 0 3
35687: PPUSH
35688: LD_VAR 0 11
35692: PPUSH
35693: LD_VAR 0 12
35697: PPUSH
35698: CALL_OW 273
35702: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
35703: LD_VAR 0 9
35707: PPUSH
35708: LD_VAR 0 10
35712: PPUSH
35713: CALL_OW 488
35717: PUSH
35718: LD_VAR 0 9
35722: PUSH
35723: LD_VAR 0 10
35727: PUSH
35728: EMPTY
35729: LIST
35730: LIST
35731: PUSH
35732: LD_VAR 0 7
35736: IN
35737: NOT
35738: AND
35739: PUSH
35740: LD_VAR 0 9
35744: PPUSH
35745: LD_VAR 0 10
35749: PPUSH
35750: CALL_OW 458
35754: NOT
35755: AND
35756: IFFALSE 35798
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
35758: LD_ADDR_VAR 0 7
35762: PUSH
35763: LD_VAR 0 7
35767: PPUSH
35768: LD_VAR 0 7
35772: PUSH
35773: LD_INT 1
35775: PLUS
35776: PPUSH
35777: LD_VAR 0 9
35781: PUSH
35782: LD_VAR 0 10
35786: PUSH
35787: EMPTY
35788: LIST
35789: LIST
35790: PPUSH
35791: CALL_OW 1
35795: ST_TO_ADDR
35796: GO 35812
// i := i - 1 ;
35798: LD_ADDR_VAR 0 5
35802: PUSH
35803: LD_VAR 0 5
35807: PUSH
35808: LD_INT 1
35810: MINUS
35811: ST_TO_ADDR
// end ;
35812: GO 35618
35814: POP
35815: POP
// for i in tmp do
35816: LD_ADDR_VAR 0 5
35820: PUSH
35821: LD_VAR 0 7
35825: PUSH
35826: FOR_IN
35827: IFFALSE 35865
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
35829: LD_VAR 0 1
35833: PPUSH
35834: LD_VAR 0 5
35838: PUSH
35839: LD_INT 1
35841: ARRAY
35842: PPUSH
35843: LD_VAR 0 5
35847: PUSH
35848: LD_INT 2
35850: ARRAY
35851: PPUSH
35852: CALL 34807 0 3
35856: NOT
35857: IFFALSE 35863
// exit ;
35859: POP
35860: POP
35861: GO 35867
35863: GO 35826
35865: POP
35866: POP
// end ;
35867: LD_VAR 0 4
35871: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
35872: LD_INT 0
35874: PPUSH
35875: PPUSH
35876: PPUSH
35877: PPUSH
35878: PPUSH
35879: PPUSH
35880: PPUSH
// if not GetClass ( unit ) = class_sniper then
35881: LD_VAR 0 1
35885: PPUSH
35886: CALL_OW 257
35890: PUSH
35891: LD_INT 5
35893: EQUAL
35894: NOT
35895: IFFALSE 35899
// exit ;
35897: GO 36287
// dist := 8 ;
35899: LD_ADDR_VAR 0 5
35903: PUSH
35904: LD_INT 8
35906: ST_TO_ADDR
// viewRange := 12 ;
35907: LD_ADDR_VAR 0 7
35911: PUSH
35912: LD_INT 12
35914: ST_TO_ADDR
// side := GetSide ( unit ) ;
35915: LD_ADDR_VAR 0 6
35919: PUSH
35920: LD_VAR 0 1
35924: PPUSH
35925: CALL_OW 255
35929: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
35930: LD_INT 61
35932: PPUSH
35933: LD_VAR 0 6
35937: PPUSH
35938: CALL_OW 321
35942: PUSH
35943: LD_INT 2
35945: EQUAL
35946: IFFALSE 35956
// viewRange := 16 ;
35948: LD_ADDR_VAR 0 7
35952: PUSH
35953: LD_INT 16
35955: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
35956: LD_VAR 0 1
35960: PPUSH
35961: LD_VAR 0 2
35965: PPUSH
35966: LD_VAR 0 3
35970: PPUSH
35971: CALL_OW 297
35975: PUSH
35976: LD_VAR 0 5
35980: GREATER
35981: IFFALSE 36060
// begin ComMoveXY ( unit , x , y ) ;
35983: LD_VAR 0 1
35987: PPUSH
35988: LD_VAR 0 2
35992: PPUSH
35993: LD_VAR 0 3
35997: PPUSH
35998: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36002: LD_INT 35
36004: PPUSH
36005: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
36009: LD_VAR 0 1
36013: PPUSH
36014: LD_VAR 0 2
36018: PPUSH
36019: LD_VAR 0 3
36023: PPUSH
36024: CALL 71835 0 3
36028: NOT
36029: IFFALSE 36033
// exit ;
36031: GO 36287
// until GetDistUnitXY ( unit , x , y ) < dist ;
36033: LD_VAR 0 1
36037: PPUSH
36038: LD_VAR 0 2
36042: PPUSH
36043: LD_VAR 0 3
36047: PPUSH
36048: CALL_OW 297
36052: PUSH
36053: LD_VAR 0 5
36057: LESS
36058: IFFALSE 36002
// end ; ComTurnXY ( unit , x , y ) ;
36060: LD_VAR 0 1
36064: PPUSH
36065: LD_VAR 0 2
36069: PPUSH
36070: LD_VAR 0 3
36074: PPUSH
36075: CALL_OW 118
// wait ( 5 ) ;
36079: LD_INT 5
36081: PPUSH
36082: CALL_OW 67
// _d := GetDir ( unit ) ;
36086: LD_ADDR_VAR 0 10
36090: PUSH
36091: LD_VAR 0 1
36095: PPUSH
36096: CALL_OW 254
36100: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
36101: LD_ADDR_VAR 0 8
36105: PUSH
36106: LD_VAR 0 1
36110: PPUSH
36111: CALL_OW 250
36115: PPUSH
36116: LD_VAR 0 10
36120: PPUSH
36121: LD_VAR 0 5
36125: PPUSH
36126: CALL_OW 272
36130: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
36131: LD_ADDR_VAR 0 9
36135: PUSH
36136: LD_VAR 0 1
36140: PPUSH
36141: CALL_OW 251
36145: PPUSH
36146: LD_VAR 0 10
36150: PPUSH
36151: LD_VAR 0 5
36155: PPUSH
36156: CALL_OW 273
36160: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36161: LD_VAR 0 8
36165: PPUSH
36166: LD_VAR 0 9
36170: PPUSH
36171: CALL_OW 488
36175: NOT
36176: IFFALSE 36180
// exit ;
36178: GO 36287
// ComAnimCustom ( unit , 1 ) ;
36180: LD_VAR 0 1
36184: PPUSH
36185: LD_INT 1
36187: PPUSH
36188: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
36192: LD_VAR 0 8
36196: PPUSH
36197: LD_VAR 0 9
36201: PPUSH
36202: LD_VAR 0 6
36206: PPUSH
36207: LD_VAR 0 7
36211: PPUSH
36212: CALL_OW 330
// repeat wait ( 1 ) ;
36216: LD_INT 1
36218: PPUSH
36219: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
36223: LD_VAR 0 1
36227: PPUSH
36228: CALL_OW 316
36232: PUSH
36233: LD_VAR 0 1
36237: PPUSH
36238: CALL_OW 314
36242: OR
36243: PUSH
36244: LD_VAR 0 1
36248: PPUSH
36249: CALL_OW 302
36253: NOT
36254: OR
36255: PUSH
36256: LD_VAR 0 1
36260: PPUSH
36261: CALL_OW 301
36265: OR
36266: IFFALSE 36216
// RemoveSeeing ( _x , _y , side ) ;
36268: LD_VAR 0 8
36272: PPUSH
36273: LD_VAR 0 9
36277: PPUSH
36278: LD_VAR 0 6
36282: PPUSH
36283: CALL_OW 331
// end ; end_of_file
36287: LD_VAR 0 4
36291: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
36292: LD_INT 0
36294: PPUSH
36295: PPUSH
// if exist_mode then
36296: LD_VAR 0 2
36300: IFFALSE 36325
// unit := CreateCharacter ( prefix & ident ) else
36302: LD_ADDR_VAR 0 5
36306: PUSH
36307: LD_VAR 0 3
36311: PUSH
36312: LD_VAR 0 1
36316: STR
36317: PPUSH
36318: CALL_OW 34
36322: ST_TO_ADDR
36323: GO 36340
// unit := NewCharacter ( ident ) ;
36325: LD_ADDR_VAR 0 5
36329: PUSH
36330: LD_VAR 0 1
36334: PPUSH
36335: CALL_OW 25
36339: ST_TO_ADDR
// result := unit ;
36340: LD_ADDR_VAR 0 4
36344: PUSH
36345: LD_VAR 0 5
36349: ST_TO_ADDR
// end ;
36350: LD_VAR 0 4
36354: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
36355: LD_INT 0
36357: PPUSH
36358: PPUSH
// if not side or not nation then
36359: LD_VAR 0 1
36363: NOT
36364: PUSH
36365: LD_VAR 0 2
36369: NOT
36370: OR
36371: IFFALSE 36375
// exit ;
36373: GO 37143
// case nation of nation_american :
36375: LD_VAR 0 2
36379: PUSH
36380: LD_INT 1
36382: DOUBLE
36383: EQUAL
36384: IFTRUE 36388
36386: GO 36602
36388: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
36389: LD_ADDR_VAR 0 4
36393: PUSH
36394: LD_INT 35
36396: PUSH
36397: LD_INT 45
36399: PUSH
36400: LD_INT 46
36402: PUSH
36403: LD_INT 47
36405: PUSH
36406: LD_INT 82
36408: PUSH
36409: LD_INT 83
36411: PUSH
36412: LD_INT 84
36414: PUSH
36415: LD_INT 85
36417: PUSH
36418: LD_INT 86
36420: PUSH
36421: LD_INT 1
36423: PUSH
36424: LD_INT 2
36426: PUSH
36427: LD_INT 6
36429: PUSH
36430: LD_INT 15
36432: PUSH
36433: LD_INT 16
36435: PUSH
36436: LD_INT 7
36438: PUSH
36439: LD_INT 12
36441: PUSH
36442: LD_INT 13
36444: PUSH
36445: LD_INT 10
36447: PUSH
36448: LD_INT 14
36450: PUSH
36451: LD_INT 20
36453: PUSH
36454: LD_INT 21
36456: PUSH
36457: LD_INT 22
36459: PUSH
36460: LD_INT 25
36462: PUSH
36463: LD_INT 32
36465: PUSH
36466: LD_INT 27
36468: PUSH
36469: LD_INT 36
36471: PUSH
36472: LD_INT 69
36474: PUSH
36475: LD_INT 39
36477: PUSH
36478: LD_INT 34
36480: PUSH
36481: LD_INT 40
36483: PUSH
36484: LD_INT 48
36486: PUSH
36487: LD_INT 49
36489: PUSH
36490: LD_INT 50
36492: PUSH
36493: LD_INT 51
36495: PUSH
36496: LD_INT 52
36498: PUSH
36499: LD_INT 53
36501: PUSH
36502: LD_INT 54
36504: PUSH
36505: LD_INT 55
36507: PUSH
36508: LD_INT 56
36510: PUSH
36511: LD_INT 57
36513: PUSH
36514: LD_INT 58
36516: PUSH
36517: LD_INT 59
36519: PUSH
36520: LD_INT 60
36522: PUSH
36523: LD_INT 61
36525: PUSH
36526: LD_INT 62
36528: PUSH
36529: LD_INT 80
36531: PUSH
36532: LD_INT 82
36534: PUSH
36535: LD_INT 83
36537: PUSH
36538: LD_INT 84
36540: PUSH
36541: LD_INT 85
36543: PUSH
36544: LD_INT 86
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: LIST
36551: LIST
36552: LIST
36553: LIST
36554: LIST
36555: LIST
36556: LIST
36557: LIST
36558: LIST
36559: LIST
36560: LIST
36561: LIST
36562: LIST
36563: LIST
36564: LIST
36565: LIST
36566: LIST
36567: LIST
36568: LIST
36569: LIST
36570: LIST
36571: LIST
36572: LIST
36573: LIST
36574: LIST
36575: LIST
36576: LIST
36577: LIST
36578: LIST
36579: LIST
36580: LIST
36581: LIST
36582: LIST
36583: LIST
36584: LIST
36585: LIST
36586: LIST
36587: LIST
36588: LIST
36589: LIST
36590: LIST
36591: LIST
36592: LIST
36593: LIST
36594: LIST
36595: LIST
36596: LIST
36597: LIST
36598: LIST
36599: ST_TO_ADDR
36600: GO 37067
36602: LD_INT 2
36604: DOUBLE
36605: EQUAL
36606: IFTRUE 36610
36608: GO 36836
36610: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
36611: LD_ADDR_VAR 0 4
36615: PUSH
36616: LD_INT 35
36618: PUSH
36619: LD_INT 45
36621: PUSH
36622: LD_INT 46
36624: PUSH
36625: LD_INT 47
36627: PUSH
36628: LD_INT 82
36630: PUSH
36631: LD_INT 83
36633: PUSH
36634: LD_INT 84
36636: PUSH
36637: LD_INT 85
36639: PUSH
36640: LD_INT 87
36642: PUSH
36643: LD_INT 70
36645: PUSH
36646: LD_INT 1
36648: PUSH
36649: LD_INT 11
36651: PUSH
36652: LD_INT 3
36654: PUSH
36655: LD_INT 4
36657: PUSH
36658: LD_INT 5
36660: PUSH
36661: LD_INT 6
36663: PUSH
36664: LD_INT 15
36666: PUSH
36667: LD_INT 18
36669: PUSH
36670: LD_INT 7
36672: PUSH
36673: LD_INT 17
36675: PUSH
36676: LD_INT 8
36678: PUSH
36679: LD_INT 20
36681: PUSH
36682: LD_INT 21
36684: PUSH
36685: LD_INT 22
36687: PUSH
36688: LD_INT 72
36690: PUSH
36691: LD_INT 26
36693: PUSH
36694: LD_INT 69
36696: PUSH
36697: LD_INT 39
36699: PUSH
36700: LD_INT 40
36702: PUSH
36703: LD_INT 41
36705: PUSH
36706: LD_INT 42
36708: PUSH
36709: LD_INT 43
36711: PUSH
36712: LD_INT 48
36714: PUSH
36715: LD_INT 49
36717: PUSH
36718: LD_INT 50
36720: PUSH
36721: LD_INT 51
36723: PUSH
36724: LD_INT 52
36726: PUSH
36727: LD_INT 53
36729: PUSH
36730: LD_INT 54
36732: PUSH
36733: LD_INT 55
36735: PUSH
36736: LD_INT 56
36738: PUSH
36739: LD_INT 60
36741: PUSH
36742: LD_INT 61
36744: PUSH
36745: LD_INT 62
36747: PUSH
36748: LD_INT 66
36750: PUSH
36751: LD_INT 67
36753: PUSH
36754: LD_INT 68
36756: PUSH
36757: LD_INT 81
36759: PUSH
36760: LD_INT 82
36762: PUSH
36763: LD_INT 83
36765: PUSH
36766: LD_INT 84
36768: PUSH
36769: LD_INT 85
36771: PUSH
36772: LD_INT 87
36774: PUSH
36775: LD_INT 88
36777: PUSH
36778: EMPTY
36779: LIST
36780: LIST
36781: LIST
36782: LIST
36783: LIST
36784: LIST
36785: LIST
36786: LIST
36787: LIST
36788: LIST
36789: LIST
36790: LIST
36791: LIST
36792: LIST
36793: LIST
36794: LIST
36795: LIST
36796: LIST
36797: LIST
36798: LIST
36799: LIST
36800: LIST
36801: LIST
36802: LIST
36803: LIST
36804: LIST
36805: LIST
36806: LIST
36807: LIST
36808: LIST
36809: LIST
36810: LIST
36811: LIST
36812: LIST
36813: LIST
36814: LIST
36815: LIST
36816: LIST
36817: LIST
36818: LIST
36819: LIST
36820: LIST
36821: LIST
36822: LIST
36823: LIST
36824: LIST
36825: LIST
36826: LIST
36827: LIST
36828: LIST
36829: LIST
36830: LIST
36831: LIST
36832: LIST
36833: ST_TO_ADDR
36834: GO 37067
36836: LD_INT 3
36838: DOUBLE
36839: EQUAL
36840: IFTRUE 36844
36842: GO 37066
36844: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
36845: LD_ADDR_VAR 0 4
36849: PUSH
36850: LD_INT 46
36852: PUSH
36853: LD_INT 47
36855: PUSH
36856: LD_INT 1
36858: PUSH
36859: LD_INT 2
36861: PUSH
36862: LD_INT 82
36864: PUSH
36865: LD_INT 83
36867: PUSH
36868: LD_INT 84
36870: PUSH
36871: LD_INT 85
36873: PUSH
36874: LD_INT 86
36876: PUSH
36877: LD_INT 11
36879: PUSH
36880: LD_INT 9
36882: PUSH
36883: LD_INT 20
36885: PUSH
36886: LD_INT 19
36888: PUSH
36889: LD_INT 21
36891: PUSH
36892: LD_INT 24
36894: PUSH
36895: LD_INT 22
36897: PUSH
36898: LD_INT 25
36900: PUSH
36901: LD_INT 28
36903: PUSH
36904: LD_INT 29
36906: PUSH
36907: LD_INT 30
36909: PUSH
36910: LD_INT 31
36912: PUSH
36913: LD_INT 37
36915: PUSH
36916: LD_INT 38
36918: PUSH
36919: LD_INT 32
36921: PUSH
36922: LD_INT 27
36924: PUSH
36925: LD_INT 33
36927: PUSH
36928: LD_INT 69
36930: PUSH
36931: LD_INT 39
36933: PUSH
36934: LD_INT 34
36936: PUSH
36937: LD_INT 40
36939: PUSH
36940: LD_INT 71
36942: PUSH
36943: LD_INT 23
36945: PUSH
36946: LD_INT 44
36948: PUSH
36949: LD_INT 48
36951: PUSH
36952: LD_INT 49
36954: PUSH
36955: LD_INT 50
36957: PUSH
36958: LD_INT 51
36960: PUSH
36961: LD_INT 52
36963: PUSH
36964: LD_INT 53
36966: PUSH
36967: LD_INT 54
36969: PUSH
36970: LD_INT 55
36972: PUSH
36973: LD_INT 56
36975: PUSH
36976: LD_INT 57
36978: PUSH
36979: LD_INT 58
36981: PUSH
36982: LD_INT 59
36984: PUSH
36985: LD_INT 63
36987: PUSH
36988: LD_INT 64
36990: PUSH
36991: LD_INT 65
36993: PUSH
36994: LD_INT 82
36996: PUSH
36997: LD_INT 83
36999: PUSH
37000: LD_INT 84
37002: PUSH
37003: LD_INT 85
37005: PUSH
37006: LD_INT 86
37008: PUSH
37009: EMPTY
37010: LIST
37011: LIST
37012: LIST
37013: LIST
37014: LIST
37015: LIST
37016: LIST
37017: LIST
37018: LIST
37019: LIST
37020: LIST
37021: LIST
37022: LIST
37023: LIST
37024: LIST
37025: LIST
37026: LIST
37027: LIST
37028: LIST
37029: LIST
37030: LIST
37031: LIST
37032: LIST
37033: LIST
37034: LIST
37035: LIST
37036: LIST
37037: LIST
37038: LIST
37039: LIST
37040: LIST
37041: LIST
37042: LIST
37043: LIST
37044: LIST
37045: LIST
37046: LIST
37047: LIST
37048: LIST
37049: LIST
37050: LIST
37051: LIST
37052: LIST
37053: LIST
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: LIST
37062: LIST
37063: ST_TO_ADDR
37064: GO 37067
37066: POP
// if state > - 1 and state < 3 then
37067: LD_VAR 0 3
37071: PUSH
37072: LD_INT 1
37074: NEG
37075: GREATER
37076: PUSH
37077: LD_VAR 0 3
37081: PUSH
37082: LD_INT 3
37084: LESS
37085: AND
37086: IFFALSE 37143
// for i in result do
37088: LD_ADDR_VAR 0 5
37092: PUSH
37093: LD_VAR 0 4
37097: PUSH
37098: FOR_IN
37099: IFFALSE 37141
// if GetTech ( i , side ) <> state then
37101: LD_VAR 0 5
37105: PPUSH
37106: LD_VAR 0 1
37110: PPUSH
37111: CALL_OW 321
37115: PUSH
37116: LD_VAR 0 3
37120: NONEQUAL
37121: IFFALSE 37139
// result := result diff i ;
37123: LD_ADDR_VAR 0 4
37127: PUSH
37128: LD_VAR 0 4
37132: PUSH
37133: LD_VAR 0 5
37137: DIFF
37138: ST_TO_ADDR
37139: GO 37098
37141: POP
37142: POP
// end ;
37143: LD_VAR 0 4
37147: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
37148: LD_INT 0
37150: PPUSH
37151: PPUSH
37152: PPUSH
// result := true ;
37153: LD_ADDR_VAR 0 3
37157: PUSH
37158: LD_INT 1
37160: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
37161: LD_ADDR_VAR 0 5
37165: PUSH
37166: LD_VAR 0 2
37170: PPUSH
37171: CALL_OW 480
37175: ST_TO_ADDR
// if not tmp then
37176: LD_VAR 0 5
37180: NOT
37181: IFFALSE 37185
// exit ;
37183: GO 37234
// for i in tmp do
37185: LD_ADDR_VAR 0 4
37189: PUSH
37190: LD_VAR 0 5
37194: PUSH
37195: FOR_IN
37196: IFFALSE 37232
// if GetTech ( i , side ) <> state_researched then
37198: LD_VAR 0 4
37202: PPUSH
37203: LD_VAR 0 1
37207: PPUSH
37208: CALL_OW 321
37212: PUSH
37213: LD_INT 2
37215: NONEQUAL
37216: IFFALSE 37230
// begin result := false ;
37218: LD_ADDR_VAR 0 3
37222: PUSH
37223: LD_INT 0
37225: ST_TO_ADDR
// exit ;
37226: POP
37227: POP
37228: GO 37234
// end ;
37230: GO 37195
37232: POP
37233: POP
// end ;
37234: LD_VAR 0 3
37238: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
37239: LD_INT 0
37241: PPUSH
37242: PPUSH
37243: PPUSH
37244: PPUSH
37245: PPUSH
37246: PPUSH
37247: PPUSH
37248: PPUSH
37249: PPUSH
37250: PPUSH
37251: PPUSH
37252: PPUSH
37253: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
37254: LD_VAR 0 1
37258: NOT
37259: PUSH
37260: LD_VAR 0 1
37264: PPUSH
37265: CALL_OW 257
37269: PUSH
37270: LD_INT 9
37272: NONEQUAL
37273: OR
37274: IFFALSE 37278
// exit ;
37276: GO 37851
// side := GetSide ( unit ) ;
37278: LD_ADDR_VAR 0 9
37282: PUSH
37283: LD_VAR 0 1
37287: PPUSH
37288: CALL_OW 255
37292: ST_TO_ADDR
// tech_space := tech_spacanom ;
37293: LD_ADDR_VAR 0 12
37297: PUSH
37298: LD_INT 29
37300: ST_TO_ADDR
// tech_time := tech_taurad ;
37301: LD_ADDR_VAR 0 13
37305: PUSH
37306: LD_INT 28
37308: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
37309: LD_ADDR_VAR 0 11
37313: PUSH
37314: LD_VAR 0 1
37318: PPUSH
37319: CALL_OW 310
37323: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
37324: LD_VAR 0 11
37328: PPUSH
37329: CALL_OW 247
37333: PUSH
37334: LD_INT 2
37336: EQUAL
37337: IFFALSE 37341
// exit ;
37339: GO 37851
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37341: LD_ADDR_VAR 0 8
37345: PUSH
37346: LD_INT 81
37348: PUSH
37349: LD_VAR 0 9
37353: PUSH
37354: EMPTY
37355: LIST
37356: LIST
37357: PUSH
37358: LD_INT 3
37360: PUSH
37361: LD_INT 21
37363: PUSH
37364: LD_INT 3
37366: PUSH
37367: EMPTY
37368: LIST
37369: LIST
37370: PUSH
37371: EMPTY
37372: LIST
37373: LIST
37374: PUSH
37375: EMPTY
37376: LIST
37377: LIST
37378: PPUSH
37379: CALL_OW 69
37383: ST_TO_ADDR
// if not tmp then
37384: LD_VAR 0 8
37388: NOT
37389: IFFALSE 37393
// exit ;
37391: GO 37851
// if in_unit then
37393: LD_VAR 0 11
37397: IFFALSE 37421
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
37399: LD_ADDR_VAR 0 10
37403: PUSH
37404: LD_VAR 0 8
37408: PPUSH
37409: LD_VAR 0 11
37413: PPUSH
37414: CALL_OW 74
37418: ST_TO_ADDR
37419: GO 37441
// enemy := NearestUnitToUnit ( tmp , unit ) ;
37421: LD_ADDR_VAR 0 10
37425: PUSH
37426: LD_VAR 0 8
37430: PPUSH
37431: LD_VAR 0 1
37435: PPUSH
37436: CALL_OW 74
37440: ST_TO_ADDR
// if not enemy then
37441: LD_VAR 0 10
37445: NOT
37446: IFFALSE 37450
// exit ;
37448: GO 37851
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
37450: LD_VAR 0 11
37454: PUSH
37455: LD_VAR 0 11
37459: PPUSH
37460: LD_VAR 0 10
37464: PPUSH
37465: CALL_OW 296
37469: PUSH
37470: LD_INT 13
37472: GREATER
37473: AND
37474: PUSH
37475: LD_VAR 0 1
37479: PPUSH
37480: LD_VAR 0 10
37484: PPUSH
37485: CALL_OW 296
37489: PUSH
37490: LD_INT 12
37492: GREATER
37493: OR
37494: IFFALSE 37498
// exit ;
37496: GO 37851
// missile := [ 1 ] ;
37498: LD_ADDR_VAR 0 14
37502: PUSH
37503: LD_INT 1
37505: PUSH
37506: EMPTY
37507: LIST
37508: ST_TO_ADDR
// if Researched ( side , tech_space ) then
37509: LD_VAR 0 9
37513: PPUSH
37514: LD_VAR 0 12
37518: PPUSH
37519: CALL_OW 325
37523: IFFALSE 37552
// missile := Insert ( missile , missile + 1 , 2 ) ;
37525: LD_ADDR_VAR 0 14
37529: PUSH
37530: LD_VAR 0 14
37534: PPUSH
37535: LD_VAR 0 14
37539: PUSH
37540: LD_INT 1
37542: PLUS
37543: PPUSH
37544: LD_INT 2
37546: PPUSH
37547: CALL_OW 2
37551: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
37552: LD_VAR 0 9
37556: PPUSH
37557: LD_VAR 0 13
37561: PPUSH
37562: CALL_OW 325
37566: PUSH
37567: LD_VAR 0 10
37571: PPUSH
37572: CALL_OW 255
37576: PPUSH
37577: LD_VAR 0 13
37581: PPUSH
37582: CALL_OW 325
37586: NOT
37587: AND
37588: IFFALSE 37617
// missile := Insert ( missile , missile + 1 , 3 ) ;
37590: LD_ADDR_VAR 0 14
37594: PUSH
37595: LD_VAR 0 14
37599: PPUSH
37600: LD_VAR 0 14
37604: PUSH
37605: LD_INT 1
37607: PLUS
37608: PPUSH
37609: LD_INT 3
37611: PPUSH
37612: CALL_OW 2
37616: ST_TO_ADDR
// if missile < 2 then
37617: LD_VAR 0 14
37621: PUSH
37622: LD_INT 2
37624: LESS
37625: IFFALSE 37629
// exit ;
37627: GO 37851
// x := GetX ( enemy ) ;
37629: LD_ADDR_VAR 0 4
37633: PUSH
37634: LD_VAR 0 10
37638: PPUSH
37639: CALL_OW 250
37643: ST_TO_ADDR
// y := GetY ( enemy ) ;
37644: LD_ADDR_VAR 0 5
37648: PUSH
37649: LD_VAR 0 10
37653: PPUSH
37654: CALL_OW 251
37658: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
37659: LD_ADDR_VAR 0 6
37663: PUSH
37664: LD_VAR 0 4
37668: PUSH
37669: LD_INT 1
37671: NEG
37672: PPUSH
37673: LD_INT 1
37675: PPUSH
37676: CALL_OW 12
37680: PLUS
37681: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
37682: LD_ADDR_VAR 0 7
37686: PUSH
37687: LD_VAR 0 5
37691: PUSH
37692: LD_INT 1
37694: NEG
37695: PPUSH
37696: LD_INT 1
37698: PPUSH
37699: CALL_OW 12
37703: PLUS
37704: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37705: LD_VAR 0 6
37709: PPUSH
37710: LD_VAR 0 7
37714: PPUSH
37715: CALL_OW 488
37719: NOT
37720: IFFALSE 37742
// begin _x := x ;
37722: LD_ADDR_VAR 0 6
37726: PUSH
37727: LD_VAR 0 4
37731: ST_TO_ADDR
// _y := y ;
37732: LD_ADDR_VAR 0 7
37736: PUSH
37737: LD_VAR 0 5
37741: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
37742: LD_ADDR_VAR 0 3
37746: PUSH
37747: LD_INT 1
37749: PPUSH
37750: LD_VAR 0 14
37754: PPUSH
37755: CALL_OW 12
37759: ST_TO_ADDR
// case i of 1 :
37760: LD_VAR 0 3
37764: PUSH
37765: LD_INT 1
37767: DOUBLE
37768: EQUAL
37769: IFTRUE 37773
37771: GO 37790
37773: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
37774: LD_VAR 0 1
37778: PPUSH
37779: LD_VAR 0 10
37783: PPUSH
37784: CALL_OW 115
37788: GO 37851
37790: LD_INT 2
37792: DOUBLE
37793: EQUAL
37794: IFTRUE 37798
37796: GO 37820
37798: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
37799: LD_VAR 0 1
37803: PPUSH
37804: LD_VAR 0 6
37808: PPUSH
37809: LD_VAR 0 7
37813: PPUSH
37814: CALL_OW 153
37818: GO 37851
37820: LD_INT 3
37822: DOUBLE
37823: EQUAL
37824: IFTRUE 37828
37826: GO 37850
37828: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
37829: LD_VAR 0 1
37833: PPUSH
37834: LD_VAR 0 6
37838: PPUSH
37839: LD_VAR 0 7
37843: PPUSH
37844: CALL_OW 154
37848: GO 37851
37850: POP
// end ;
37851: LD_VAR 0 2
37855: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
37856: LD_INT 0
37858: PPUSH
37859: PPUSH
37860: PPUSH
37861: PPUSH
37862: PPUSH
37863: PPUSH
// if not unit or not building then
37864: LD_VAR 0 1
37868: NOT
37869: PUSH
37870: LD_VAR 0 2
37874: NOT
37875: OR
37876: IFFALSE 37880
// exit ;
37878: GO 38038
// x := GetX ( building ) ;
37880: LD_ADDR_VAR 0 5
37884: PUSH
37885: LD_VAR 0 2
37889: PPUSH
37890: CALL_OW 250
37894: ST_TO_ADDR
// y := GetY ( building ) ;
37895: LD_ADDR_VAR 0 6
37899: PUSH
37900: LD_VAR 0 2
37904: PPUSH
37905: CALL_OW 251
37909: ST_TO_ADDR
// for i = 0 to 5 do
37910: LD_ADDR_VAR 0 4
37914: PUSH
37915: DOUBLE
37916: LD_INT 0
37918: DEC
37919: ST_TO_ADDR
37920: LD_INT 5
37922: PUSH
37923: FOR_TO
37924: IFFALSE 38036
// begin _x := ShiftX ( x , i , 3 ) ;
37926: LD_ADDR_VAR 0 7
37930: PUSH
37931: LD_VAR 0 5
37935: PPUSH
37936: LD_VAR 0 4
37940: PPUSH
37941: LD_INT 3
37943: PPUSH
37944: CALL_OW 272
37948: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
37949: LD_ADDR_VAR 0 8
37953: PUSH
37954: LD_VAR 0 6
37958: PPUSH
37959: LD_VAR 0 4
37963: PPUSH
37964: LD_INT 3
37966: PPUSH
37967: CALL_OW 273
37971: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37972: LD_VAR 0 7
37976: PPUSH
37977: LD_VAR 0 8
37981: PPUSH
37982: CALL_OW 488
37986: NOT
37987: IFFALSE 37991
// continue ;
37989: GO 37923
// if HexInfo ( _x , _y ) = 0 then
37991: LD_VAR 0 7
37995: PPUSH
37996: LD_VAR 0 8
38000: PPUSH
38001: CALL_OW 428
38005: PUSH
38006: LD_INT 0
38008: EQUAL
38009: IFFALSE 38034
// begin ComMoveXY ( unit , _x , _y ) ;
38011: LD_VAR 0 1
38015: PPUSH
38016: LD_VAR 0 7
38020: PPUSH
38021: LD_VAR 0 8
38025: PPUSH
38026: CALL_OW 111
// exit ;
38030: POP
38031: POP
38032: GO 38038
// end ; end ;
38034: GO 37923
38036: POP
38037: POP
// end ;
38038: LD_VAR 0 3
38042: RET
// export function ScanBase ( side , base_area ) ; begin
38043: LD_INT 0
38045: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
38046: LD_ADDR_VAR 0 3
38050: PUSH
38051: LD_VAR 0 2
38055: PPUSH
38056: LD_INT 81
38058: PUSH
38059: LD_VAR 0 1
38063: PUSH
38064: EMPTY
38065: LIST
38066: LIST
38067: PPUSH
38068: CALL_OW 70
38072: ST_TO_ADDR
// end ;
38073: LD_VAR 0 3
38077: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
38078: LD_INT 0
38080: PPUSH
38081: PPUSH
38082: PPUSH
38083: PPUSH
// result := false ;
38084: LD_ADDR_VAR 0 2
38088: PUSH
38089: LD_INT 0
38091: ST_TO_ADDR
// side := GetSide ( unit ) ;
38092: LD_ADDR_VAR 0 3
38096: PUSH
38097: LD_VAR 0 1
38101: PPUSH
38102: CALL_OW 255
38106: ST_TO_ADDR
// nat := GetNation ( unit ) ;
38107: LD_ADDR_VAR 0 4
38111: PUSH
38112: LD_VAR 0 1
38116: PPUSH
38117: CALL_OW 248
38121: ST_TO_ADDR
// case nat of 1 :
38122: LD_VAR 0 4
38126: PUSH
38127: LD_INT 1
38129: DOUBLE
38130: EQUAL
38131: IFTRUE 38135
38133: GO 38146
38135: POP
// tech := tech_lassight ; 2 :
38136: LD_ADDR_VAR 0 5
38140: PUSH
38141: LD_INT 12
38143: ST_TO_ADDR
38144: GO 38185
38146: LD_INT 2
38148: DOUBLE
38149: EQUAL
38150: IFTRUE 38154
38152: GO 38165
38154: POP
// tech := tech_mortar ; 3 :
38155: LD_ADDR_VAR 0 5
38159: PUSH
38160: LD_INT 41
38162: ST_TO_ADDR
38163: GO 38185
38165: LD_INT 3
38167: DOUBLE
38168: EQUAL
38169: IFTRUE 38173
38171: GO 38184
38173: POP
// tech := tech_bazooka ; end ;
38174: LD_ADDR_VAR 0 5
38178: PUSH
38179: LD_INT 44
38181: ST_TO_ADDR
38182: GO 38185
38184: POP
// if Researched ( side , tech ) then
38185: LD_VAR 0 3
38189: PPUSH
38190: LD_VAR 0 5
38194: PPUSH
38195: CALL_OW 325
38199: IFFALSE 38226
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
38201: LD_ADDR_VAR 0 2
38205: PUSH
38206: LD_INT 5
38208: PUSH
38209: LD_INT 8
38211: PUSH
38212: LD_INT 9
38214: PUSH
38215: EMPTY
38216: LIST
38217: LIST
38218: LIST
38219: PUSH
38220: LD_VAR 0 4
38224: ARRAY
38225: ST_TO_ADDR
// end ;
38226: LD_VAR 0 2
38230: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
38231: LD_INT 0
38233: PPUSH
38234: PPUSH
38235: PPUSH
// if not mines then
38236: LD_VAR 0 2
38240: NOT
38241: IFFALSE 38245
// exit ;
38243: GO 38389
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38245: LD_ADDR_VAR 0 5
38249: PUSH
38250: LD_INT 81
38252: PUSH
38253: LD_VAR 0 1
38257: PUSH
38258: EMPTY
38259: LIST
38260: LIST
38261: PUSH
38262: LD_INT 3
38264: PUSH
38265: LD_INT 21
38267: PUSH
38268: LD_INT 3
38270: PUSH
38271: EMPTY
38272: LIST
38273: LIST
38274: PUSH
38275: EMPTY
38276: LIST
38277: LIST
38278: PUSH
38279: EMPTY
38280: LIST
38281: LIST
38282: PPUSH
38283: CALL_OW 69
38287: ST_TO_ADDR
// for i in mines do
38288: LD_ADDR_VAR 0 4
38292: PUSH
38293: LD_VAR 0 2
38297: PUSH
38298: FOR_IN
38299: IFFALSE 38387
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
38301: LD_VAR 0 4
38305: PUSH
38306: LD_INT 1
38308: ARRAY
38309: PPUSH
38310: LD_VAR 0 4
38314: PUSH
38315: LD_INT 2
38317: ARRAY
38318: PPUSH
38319: CALL_OW 458
38323: NOT
38324: IFFALSE 38328
// continue ;
38326: GO 38298
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
38328: LD_VAR 0 4
38332: PUSH
38333: LD_INT 1
38335: ARRAY
38336: PPUSH
38337: LD_VAR 0 4
38341: PUSH
38342: LD_INT 2
38344: ARRAY
38345: PPUSH
38346: CALL_OW 428
38350: PUSH
38351: LD_VAR 0 5
38355: IN
38356: IFFALSE 38385
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
38358: LD_VAR 0 4
38362: PUSH
38363: LD_INT 1
38365: ARRAY
38366: PPUSH
38367: LD_VAR 0 4
38371: PUSH
38372: LD_INT 2
38374: ARRAY
38375: PPUSH
38376: LD_VAR 0 1
38380: PPUSH
38381: CALL_OW 456
// end ;
38385: GO 38298
38387: POP
38388: POP
// end ;
38389: LD_VAR 0 3
38393: RET
// export function Count ( array ) ; var i ; begin
38394: LD_INT 0
38396: PPUSH
38397: PPUSH
// result := 0 ;
38398: LD_ADDR_VAR 0 2
38402: PUSH
38403: LD_INT 0
38405: ST_TO_ADDR
// for i in array do
38406: LD_ADDR_VAR 0 3
38410: PUSH
38411: LD_VAR 0 1
38415: PUSH
38416: FOR_IN
38417: IFFALSE 38441
// if i then
38419: LD_VAR 0 3
38423: IFFALSE 38439
// result := result + 1 ;
38425: LD_ADDR_VAR 0 2
38429: PUSH
38430: LD_VAR 0 2
38434: PUSH
38435: LD_INT 1
38437: PLUS
38438: ST_TO_ADDR
38439: GO 38416
38441: POP
38442: POP
// end ;
38443: LD_VAR 0 2
38447: RET
// export function IsEmpty ( building ) ; begin
38448: LD_INT 0
38450: PPUSH
// if not building then
38451: LD_VAR 0 1
38455: NOT
38456: IFFALSE 38460
// exit ;
38458: GO 38503
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
38460: LD_ADDR_VAR 0 2
38464: PUSH
38465: LD_VAR 0 1
38469: PUSH
38470: LD_INT 22
38472: PUSH
38473: LD_VAR 0 1
38477: PPUSH
38478: CALL_OW 255
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: PUSH
38487: LD_INT 58
38489: PUSH
38490: EMPTY
38491: LIST
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: PPUSH
38497: CALL_OW 69
38501: IN
38502: ST_TO_ADDR
// end ;
38503: LD_VAR 0 2
38507: RET
// export function IsNotFull ( building ) ; begin
38508: LD_INT 0
38510: PPUSH
// if not building then
38511: LD_VAR 0 1
38515: NOT
38516: IFFALSE 38520
// exit ;
38518: GO 38539
// result := UnitsInside ( building ) < 6 ;
38520: LD_ADDR_VAR 0 2
38524: PUSH
38525: LD_VAR 0 1
38529: PPUSH
38530: CALL_OW 313
38534: PUSH
38535: LD_INT 6
38537: LESS
38538: ST_TO_ADDR
// end ;
38539: LD_VAR 0 2
38543: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
38544: LD_INT 0
38546: PPUSH
38547: PPUSH
38548: PPUSH
38549: PPUSH
// tmp := [ ] ;
38550: LD_ADDR_VAR 0 3
38554: PUSH
38555: EMPTY
38556: ST_TO_ADDR
// list := [ ] ;
38557: LD_ADDR_VAR 0 5
38561: PUSH
38562: EMPTY
38563: ST_TO_ADDR
// for i = 16 to 25 do
38564: LD_ADDR_VAR 0 4
38568: PUSH
38569: DOUBLE
38570: LD_INT 16
38572: DEC
38573: ST_TO_ADDR
38574: LD_INT 25
38576: PUSH
38577: FOR_TO
38578: IFFALSE 38651
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
38580: LD_ADDR_VAR 0 3
38584: PUSH
38585: LD_VAR 0 3
38589: PUSH
38590: LD_INT 22
38592: PUSH
38593: LD_VAR 0 1
38597: PPUSH
38598: CALL_OW 255
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: PUSH
38607: LD_INT 91
38609: PUSH
38610: LD_VAR 0 1
38614: PUSH
38615: LD_INT 6
38617: PUSH
38618: EMPTY
38619: LIST
38620: LIST
38621: LIST
38622: PUSH
38623: LD_INT 30
38625: PUSH
38626: LD_VAR 0 4
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: LIST
38639: PUSH
38640: EMPTY
38641: LIST
38642: PPUSH
38643: CALL_OW 69
38647: ADD
38648: ST_TO_ADDR
38649: GO 38577
38651: POP
38652: POP
// for i = 1 to tmp do
38653: LD_ADDR_VAR 0 4
38657: PUSH
38658: DOUBLE
38659: LD_INT 1
38661: DEC
38662: ST_TO_ADDR
38663: LD_VAR 0 3
38667: PUSH
38668: FOR_TO
38669: IFFALSE 38757
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
38671: LD_ADDR_VAR 0 5
38675: PUSH
38676: LD_VAR 0 5
38680: PUSH
38681: LD_VAR 0 3
38685: PUSH
38686: LD_VAR 0 4
38690: ARRAY
38691: PPUSH
38692: CALL_OW 266
38696: PUSH
38697: LD_VAR 0 3
38701: PUSH
38702: LD_VAR 0 4
38706: ARRAY
38707: PPUSH
38708: CALL_OW 250
38712: PUSH
38713: LD_VAR 0 3
38717: PUSH
38718: LD_VAR 0 4
38722: ARRAY
38723: PPUSH
38724: CALL_OW 251
38728: PUSH
38729: LD_VAR 0 3
38733: PUSH
38734: LD_VAR 0 4
38738: ARRAY
38739: PPUSH
38740: CALL_OW 254
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: LIST
38749: LIST
38750: PUSH
38751: EMPTY
38752: LIST
38753: ADD
38754: ST_TO_ADDR
38755: GO 38668
38757: POP
38758: POP
// result := list ;
38759: LD_ADDR_VAR 0 2
38763: PUSH
38764: LD_VAR 0 5
38768: ST_TO_ADDR
// end ;
38769: LD_VAR 0 2
38773: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
38774: LD_INT 0
38776: PPUSH
38777: PPUSH
38778: PPUSH
38779: PPUSH
38780: PPUSH
38781: PPUSH
38782: PPUSH
// if not factory then
38783: LD_VAR 0 1
38787: NOT
38788: IFFALSE 38792
// exit ;
38790: GO 39385
// if control = control_apeman then
38792: LD_VAR 0 4
38796: PUSH
38797: LD_INT 5
38799: EQUAL
38800: IFFALSE 38909
// begin tmp := UnitsInside ( factory ) ;
38802: LD_ADDR_VAR 0 8
38806: PUSH
38807: LD_VAR 0 1
38811: PPUSH
38812: CALL_OW 313
38816: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
38817: LD_VAR 0 8
38821: PPUSH
38822: LD_INT 25
38824: PUSH
38825: LD_INT 12
38827: PUSH
38828: EMPTY
38829: LIST
38830: LIST
38831: PPUSH
38832: CALL_OW 72
38836: NOT
38837: IFFALSE 38847
// control := control_manual ;
38839: LD_ADDR_VAR 0 4
38843: PUSH
38844: LD_INT 1
38846: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
38847: LD_ADDR_VAR 0 8
38851: PUSH
38852: LD_VAR 0 1
38856: PPUSH
38857: CALL 38544 0 1
38861: ST_TO_ADDR
// if tmp then
38862: LD_VAR 0 8
38866: IFFALSE 38909
// begin for i in tmp do
38868: LD_ADDR_VAR 0 7
38872: PUSH
38873: LD_VAR 0 8
38877: PUSH
38878: FOR_IN
38879: IFFALSE 38907
// if i [ 1 ] = b_ext_radio then
38881: LD_VAR 0 7
38885: PUSH
38886: LD_INT 1
38888: ARRAY
38889: PUSH
38890: LD_INT 22
38892: EQUAL
38893: IFFALSE 38905
// begin control := control_remote ;
38895: LD_ADDR_VAR 0 4
38899: PUSH
38900: LD_INT 2
38902: ST_TO_ADDR
// break ;
38903: GO 38907
// end ;
38905: GO 38878
38907: POP
38908: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38909: LD_VAR 0 1
38913: PPUSH
38914: LD_VAR 0 2
38918: PPUSH
38919: LD_VAR 0 3
38923: PPUSH
38924: LD_VAR 0 4
38928: PPUSH
38929: LD_VAR 0 5
38933: PPUSH
38934: CALL_OW 448
38938: IFFALSE 38973
// begin result := [ chassis , engine , control , weapon ] ;
38940: LD_ADDR_VAR 0 6
38944: PUSH
38945: LD_VAR 0 2
38949: PUSH
38950: LD_VAR 0 3
38954: PUSH
38955: LD_VAR 0 4
38959: PUSH
38960: LD_VAR 0 5
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: LIST
38969: LIST
38970: ST_TO_ADDR
// exit ;
38971: GO 39385
// end ; _chassis := AvailableChassisList ( factory ) ;
38973: LD_ADDR_VAR 0 9
38977: PUSH
38978: LD_VAR 0 1
38982: PPUSH
38983: CALL_OW 475
38987: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
38988: LD_ADDR_VAR 0 11
38992: PUSH
38993: LD_VAR 0 1
38997: PPUSH
38998: CALL_OW 476
39002: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
39003: LD_ADDR_VAR 0 12
39007: PUSH
39008: LD_VAR 0 1
39012: PPUSH
39013: CALL_OW 477
39017: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
39018: LD_ADDR_VAR 0 10
39022: PUSH
39023: LD_VAR 0 1
39027: PPUSH
39028: CALL_OW 478
39032: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
39033: LD_VAR 0 9
39037: NOT
39038: PUSH
39039: LD_VAR 0 11
39043: NOT
39044: OR
39045: PUSH
39046: LD_VAR 0 12
39050: NOT
39051: OR
39052: PUSH
39053: LD_VAR 0 10
39057: NOT
39058: OR
39059: IFFALSE 39094
// begin result := [ chassis , engine , control , weapon ] ;
39061: LD_ADDR_VAR 0 6
39065: PUSH
39066: LD_VAR 0 2
39070: PUSH
39071: LD_VAR 0 3
39075: PUSH
39076: LD_VAR 0 4
39080: PUSH
39081: LD_VAR 0 5
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: LIST
39090: LIST
39091: ST_TO_ADDR
// exit ;
39092: GO 39385
// end ; if not chassis in _chassis then
39094: LD_VAR 0 2
39098: PUSH
39099: LD_VAR 0 9
39103: IN
39104: NOT
39105: IFFALSE 39131
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
39107: LD_ADDR_VAR 0 2
39111: PUSH
39112: LD_VAR 0 9
39116: PUSH
39117: LD_INT 1
39119: PPUSH
39120: LD_VAR 0 9
39124: PPUSH
39125: CALL_OW 12
39129: ARRAY
39130: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
39131: LD_VAR 0 2
39135: PPUSH
39136: LD_VAR 0 3
39140: PPUSH
39141: CALL 39390 0 2
39145: NOT
39146: IFFALSE 39205
// repeat engine := _engine [ 1 ] ;
39148: LD_ADDR_VAR 0 3
39152: PUSH
39153: LD_VAR 0 11
39157: PUSH
39158: LD_INT 1
39160: ARRAY
39161: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
39162: LD_ADDR_VAR 0 11
39166: PUSH
39167: LD_VAR 0 11
39171: PPUSH
39172: LD_INT 1
39174: PPUSH
39175: CALL_OW 3
39179: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
39180: LD_VAR 0 2
39184: PPUSH
39185: LD_VAR 0 3
39189: PPUSH
39190: CALL 39390 0 2
39194: PUSH
39195: LD_VAR 0 11
39199: PUSH
39200: EMPTY
39201: EQUAL
39202: OR
39203: IFFALSE 39148
// if not control in _control then
39205: LD_VAR 0 4
39209: PUSH
39210: LD_VAR 0 12
39214: IN
39215: NOT
39216: IFFALSE 39242
// control := _control [ rand ( 1 , _control ) ] ;
39218: LD_ADDR_VAR 0 4
39222: PUSH
39223: LD_VAR 0 12
39227: PUSH
39228: LD_INT 1
39230: PPUSH
39231: LD_VAR 0 12
39235: PPUSH
39236: CALL_OW 12
39240: ARRAY
39241: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
39242: LD_VAR 0 2
39246: PPUSH
39247: LD_VAR 0 5
39251: PPUSH
39252: CALL 39610 0 2
39256: NOT
39257: IFFALSE 39316
// repeat weapon := _weapon [ 1 ] ;
39259: LD_ADDR_VAR 0 5
39263: PUSH
39264: LD_VAR 0 10
39268: PUSH
39269: LD_INT 1
39271: ARRAY
39272: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
39273: LD_ADDR_VAR 0 10
39277: PUSH
39278: LD_VAR 0 10
39282: PPUSH
39283: LD_INT 1
39285: PPUSH
39286: CALL_OW 3
39290: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
39291: LD_VAR 0 2
39295: PPUSH
39296: LD_VAR 0 5
39300: PPUSH
39301: CALL 39610 0 2
39305: PUSH
39306: LD_VAR 0 10
39310: PUSH
39311: EMPTY
39312: EQUAL
39313: OR
39314: IFFALSE 39259
// result := [ ] ;
39316: LD_ADDR_VAR 0 6
39320: PUSH
39321: EMPTY
39322: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39323: LD_VAR 0 1
39327: PPUSH
39328: LD_VAR 0 2
39332: PPUSH
39333: LD_VAR 0 3
39337: PPUSH
39338: LD_VAR 0 4
39342: PPUSH
39343: LD_VAR 0 5
39347: PPUSH
39348: CALL_OW 448
39352: IFFALSE 39385
// result := [ chassis , engine , control , weapon ] ;
39354: LD_ADDR_VAR 0 6
39358: PUSH
39359: LD_VAR 0 2
39363: PUSH
39364: LD_VAR 0 3
39368: PUSH
39369: LD_VAR 0 4
39373: PUSH
39374: LD_VAR 0 5
39378: PUSH
39379: EMPTY
39380: LIST
39381: LIST
39382: LIST
39383: LIST
39384: ST_TO_ADDR
// end ;
39385: LD_VAR 0 6
39389: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
39390: LD_INT 0
39392: PPUSH
// if not chassis or not engine then
39393: LD_VAR 0 1
39397: NOT
39398: PUSH
39399: LD_VAR 0 2
39403: NOT
39404: OR
39405: IFFALSE 39409
// exit ;
39407: GO 39605
// case engine of engine_solar :
39409: LD_VAR 0 2
39413: PUSH
39414: LD_INT 2
39416: DOUBLE
39417: EQUAL
39418: IFTRUE 39422
39420: GO 39460
39422: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
39423: LD_ADDR_VAR 0 3
39427: PUSH
39428: LD_INT 11
39430: PUSH
39431: LD_INT 12
39433: PUSH
39434: LD_INT 13
39436: PUSH
39437: LD_INT 14
39439: PUSH
39440: LD_INT 1
39442: PUSH
39443: LD_INT 2
39445: PUSH
39446: LD_INT 3
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: LIST
39453: LIST
39454: LIST
39455: LIST
39456: LIST
39457: ST_TO_ADDR
39458: GO 39589
39460: LD_INT 1
39462: DOUBLE
39463: EQUAL
39464: IFTRUE 39468
39466: GO 39530
39468: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
39469: LD_ADDR_VAR 0 3
39473: PUSH
39474: LD_INT 11
39476: PUSH
39477: LD_INT 12
39479: PUSH
39480: LD_INT 13
39482: PUSH
39483: LD_INT 14
39485: PUSH
39486: LD_INT 1
39488: PUSH
39489: LD_INT 2
39491: PUSH
39492: LD_INT 3
39494: PUSH
39495: LD_INT 4
39497: PUSH
39498: LD_INT 5
39500: PUSH
39501: LD_INT 21
39503: PUSH
39504: LD_INT 23
39506: PUSH
39507: LD_INT 22
39509: PUSH
39510: LD_INT 24
39512: PUSH
39513: EMPTY
39514: LIST
39515: LIST
39516: LIST
39517: LIST
39518: LIST
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: LIST
39527: ST_TO_ADDR
39528: GO 39589
39530: LD_INT 3
39532: DOUBLE
39533: EQUAL
39534: IFTRUE 39538
39536: GO 39588
39538: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39539: LD_ADDR_VAR 0 3
39543: PUSH
39544: LD_INT 13
39546: PUSH
39547: LD_INT 14
39549: PUSH
39550: LD_INT 2
39552: PUSH
39553: LD_INT 3
39555: PUSH
39556: LD_INT 4
39558: PUSH
39559: LD_INT 5
39561: PUSH
39562: LD_INT 21
39564: PUSH
39565: LD_INT 22
39567: PUSH
39568: LD_INT 23
39570: PUSH
39571: LD_INT 24
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: LIST
39578: LIST
39579: LIST
39580: LIST
39581: LIST
39582: LIST
39583: LIST
39584: LIST
39585: ST_TO_ADDR
39586: GO 39589
39588: POP
// result := ( chassis in result ) ;
39589: LD_ADDR_VAR 0 3
39593: PUSH
39594: LD_VAR 0 1
39598: PUSH
39599: LD_VAR 0 3
39603: IN
39604: ST_TO_ADDR
// end ;
39605: LD_VAR 0 3
39609: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
39610: LD_INT 0
39612: PPUSH
// if not chassis or not weapon then
39613: LD_VAR 0 1
39617: NOT
39618: PUSH
39619: LD_VAR 0 2
39623: NOT
39624: OR
39625: IFFALSE 39629
// exit ;
39627: GO 40691
// case weapon of us_machine_gun :
39629: LD_VAR 0 2
39633: PUSH
39634: LD_INT 2
39636: DOUBLE
39637: EQUAL
39638: IFTRUE 39642
39640: GO 39672
39642: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
39643: LD_ADDR_VAR 0 3
39647: PUSH
39648: LD_INT 1
39650: PUSH
39651: LD_INT 2
39653: PUSH
39654: LD_INT 3
39656: PUSH
39657: LD_INT 4
39659: PUSH
39660: LD_INT 5
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: LIST
39667: LIST
39668: LIST
39669: ST_TO_ADDR
39670: GO 40675
39672: LD_INT 3
39674: DOUBLE
39675: EQUAL
39676: IFTRUE 39680
39678: GO 39710
39680: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
39681: LD_ADDR_VAR 0 3
39685: PUSH
39686: LD_INT 1
39688: PUSH
39689: LD_INT 2
39691: PUSH
39692: LD_INT 3
39694: PUSH
39695: LD_INT 4
39697: PUSH
39698: LD_INT 5
39700: PUSH
39701: EMPTY
39702: LIST
39703: LIST
39704: LIST
39705: LIST
39706: LIST
39707: ST_TO_ADDR
39708: GO 40675
39710: LD_INT 11
39712: DOUBLE
39713: EQUAL
39714: IFTRUE 39718
39716: GO 39748
39718: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
39719: LD_ADDR_VAR 0 3
39723: PUSH
39724: LD_INT 1
39726: PUSH
39727: LD_INT 2
39729: PUSH
39730: LD_INT 3
39732: PUSH
39733: LD_INT 4
39735: PUSH
39736: LD_INT 5
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: LIST
39743: LIST
39744: LIST
39745: ST_TO_ADDR
39746: GO 40675
39748: LD_INT 4
39750: DOUBLE
39751: EQUAL
39752: IFTRUE 39756
39754: GO 39782
39756: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
39757: LD_ADDR_VAR 0 3
39761: PUSH
39762: LD_INT 2
39764: PUSH
39765: LD_INT 3
39767: PUSH
39768: LD_INT 4
39770: PUSH
39771: LD_INT 5
39773: PUSH
39774: EMPTY
39775: LIST
39776: LIST
39777: LIST
39778: LIST
39779: ST_TO_ADDR
39780: GO 40675
39782: LD_INT 5
39784: DOUBLE
39785: EQUAL
39786: IFTRUE 39790
39788: GO 39816
39790: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
39791: LD_ADDR_VAR 0 3
39795: PUSH
39796: LD_INT 2
39798: PUSH
39799: LD_INT 3
39801: PUSH
39802: LD_INT 4
39804: PUSH
39805: LD_INT 5
39807: PUSH
39808: EMPTY
39809: LIST
39810: LIST
39811: LIST
39812: LIST
39813: ST_TO_ADDR
39814: GO 40675
39816: LD_INT 9
39818: DOUBLE
39819: EQUAL
39820: IFTRUE 39824
39822: GO 39850
39824: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
39825: LD_ADDR_VAR 0 3
39829: PUSH
39830: LD_INT 2
39832: PUSH
39833: LD_INT 3
39835: PUSH
39836: LD_INT 4
39838: PUSH
39839: LD_INT 5
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: LIST
39846: LIST
39847: ST_TO_ADDR
39848: GO 40675
39850: LD_INT 7
39852: DOUBLE
39853: EQUAL
39854: IFTRUE 39858
39856: GO 39884
39858: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
39859: LD_ADDR_VAR 0 3
39863: PUSH
39864: LD_INT 2
39866: PUSH
39867: LD_INT 3
39869: PUSH
39870: LD_INT 4
39872: PUSH
39873: LD_INT 5
39875: PUSH
39876: EMPTY
39877: LIST
39878: LIST
39879: LIST
39880: LIST
39881: ST_TO_ADDR
39882: GO 40675
39884: LD_INT 12
39886: DOUBLE
39887: EQUAL
39888: IFTRUE 39892
39890: GO 39918
39892: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
39893: LD_ADDR_VAR 0 3
39897: PUSH
39898: LD_INT 2
39900: PUSH
39901: LD_INT 3
39903: PUSH
39904: LD_INT 4
39906: PUSH
39907: LD_INT 5
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: LIST
39914: LIST
39915: ST_TO_ADDR
39916: GO 40675
39918: LD_INT 13
39920: DOUBLE
39921: EQUAL
39922: IFTRUE 39926
39924: GO 39952
39926: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
39927: LD_ADDR_VAR 0 3
39931: PUSH
39932: LD_INT 2
39934: PUSH
39935: LD_INT 3
39937: PUSH
39938: LD_INT 4
39940: PUSH
39941: LD_INT 5
39943: PUSH
39944: EMPTY
39945: LIST
39946: LIST
39947: LIST
39948: LIST
39949: ST_TO_ADDR
39950: GO 40675
39952: LD_INT 14
39954: DOUBLE
39955: EQUAL
39956: IFTRUE 39960
39958: GO 39978
39960: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
39961: LD_ADDR_VAR 0 3
39965: PUSH
39966: LD_INT 4
39968: PUSH
39969: LD_INT 5
39971: PUSH
39972: EMPTY
39973: LIST
39974: LIST
39975: ST_TO_ADDR
39976: GO 40675
39978: LD_INT 6
39980: DOUBLE
39981: EQUAL
39982: IFTRUE 39986
39984: GO 40004
39986: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
39987: LD_ADDR_VAR 0 3
39991: PUSH
39992: LD_INT 4
39994: PUSH
39995: LD_INT 5
39997: PUSH
39998: EMPTY
39999: LIST
40000: LIST
40001: ST_TO_ADDR
40002: GO 40675
40004: LD_INT 10
40006: DOUBLE
40007: EQUAL
40008: IFTRUE 40012
40010: GO 40030
40012: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
40013: LD_ADDR_VAR 0 3
40017: PUSH
40018: LD_INT 4
40020: PUSH
40021: LD_INT 5
40023: PUSH
40024: EMPTY
40025: LIST
40026: LIST
40027: ST_TO_ADDR
40028: GO 40675
40030: LD_INT 22
40032: DOUBLE
40033: EQUAL
40034: IFTRUE 40038
40036: GO 40064
40038: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
40039: LD_ADDR_VAR 0 3
40043: PUSH
40044: LD_INT 11
40046: PUSH
40047: LD_INT 12
40049: PUSH
40050: LD_INT 13
40052: PUSH
40053: LD_INT 14
40055: PUSH
40056: EMPTY
40057: LIST
40058: LIST
40059: LIST
40060: LIST
40061: ST_TO_ADDR
40062: GO 40675
40064: LD_INT 23
40066: DOUBLE
40067: EQUAL
40068: IFTRUE 40072
40070: GO 40098
40072: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
40073: LD_ADDR_VAR 0 3
40077: PUSH
40078: LD_INT 11
40080: PUSH
40081: LD_INT 12
40083: PUSH
40084: LD_INT 13
40086: PUSH
40087: LD_INT 14
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: LIST
40094: LIST
40095: ST_TO_ADDR
40096: GO 40675
40098: LD_INT 24
40100: DOUBLE
40101: EQUAL
40102: IFTRUE 40106
40104: GO 40132
40106: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
40107: LD_ADDR_VAR 0 3
40111: PUSH
40112: LD_INT 11
40114: PUSH
40115: LD_INT 12
40117: PUSH
40118: LD_INT 13
40120: PUSH
40121: LD_INT 14
40123: PUSH
40124: EMPTY
40125: LIST
40126: LIST
40127: LIST
40128: LIST
40129: ST_TO_ADDR
40130: GO 40675
40132: LD_INT 30
40134: DOUBLE
40135: EQUAL
40136: IFTRUE 40140
40138: GO 40166
40140: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
40141: LD_ADDR_VAR 0 3
40145: PUSH
40146: LD_INT 11
40148: PUSH
40149: LD_INT 12
40151: PUSH
40152: LD_INT 13
40154: PUSH
40155: LD_INT 14
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: LIST
40162: LIST
40163: ST_TO_ADDR
40164: GO 40675
40166: LD_INT 25
40168: DOUBLE
40169: EQUAL
40170: IFTRUE 40174
40172: GO 40192
40174: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
40175: LD_ADDR_VAR 0 3
40179: PUSH
40180: LD_INT 13
40182: PUSH
40183: LD_INT 14
40185: PUSH
40186: EMPTY
40187: LIST
40188: LIST
40189: ST_TO_ADDR
40190: GO 40675
40192: LD_INT 27
40194: DOUBLE
40195: EQUAL
40196: IFTRUE 40200
40198: GO 40218
40200: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
40201: LD_ADDR_VAR 0 3
40205: PUSH
40206: LD_INT 13
40208: PUSH
40209: LD_INT 14
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: ST_TO_ADDR
40216: GO 40675
40218: LD_EXP 64
40222: DOUBLE
40223: EQUAL
40224: IFTRUE 40228
40226: GO 40254
40228: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
40229: LD_ADDR_VAR 0 3
40233: PUSH
40234: LD_INT 11
40236: PUSH
40237: LD_INT 12
40239: PUSH
40240: LD_INT 13
40242: PUSH
40243: LD_INT 14
40245: PUSH
40246: EMPTY
40247: LIST
40248: LIST
40249: LIST
40250: LIST
40251: ST_TO_ADDR
40252: GO 40675
40254: LD_INT 28
40256: DOUBLE
40257: EQUAL
40258: IFTRUE 40262
40260: GO 40280
40262: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
40263: LD_ADDR_VAR 0 3
40267: PUSH
40268: LD_INT 13
40270: PUSH
40271: LD_INT 14
40273: PUSH
40274: EMPTY
40275: LIST
40276: LIST
40277: ST_TO_ADDR
40278: GO 40675
40280: LD_INT 29
40282: DOUBLE
40283: EQUAL
40284: IFTRUE 40288
40286: GO 40306
40288: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
40289: LD_ADDR_VAR 0 3
40293: PUSH
40294: LD_INT 13
40296: PUSH
40297: LD_INT 14
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: ST_TO_ADDR
40304: GO 40675
40306: LD_INT 31
40308: DOUBLE
40309: EQUAL
40310: IFTRUE 40314
40312: GO 40332
40314: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
40315: LD_ADDR_VAR 0 3
40319: PUSH
40320: LD_INT 13
40322: PUSH
40323: LD_INT 14
40325: PUSH
40326: EMPTY
40327: LIST
40328: LIST
40329: ST_TO_ADDR
40330: GO 40675
40332: LD_INT 26
40334: DOUBLE
40335: EQUAL
40336: IFTRUE 40340
40338: GO 40358
40340: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
40341: LD_ADDR_VAR 0 3
40345: PUSH
40346: LD_INT 13
40348: PUSH
40349: LD_INT 14
40351: PUSH
40352: EMPTY
40353: LIST
40354: LIST
40355: ST_TO_ADDR
40356: GO 40675
40358: LD_INT 42
40360: DOUBLE
40361: EQUAL
40362: IFTRUE 40366
40364: GO 40392
40366: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
40367: LD_ADDR_VAR 0 3
40371: PUSH
40372: LD_INT 21
40374: PUSH
40375: LD_INT 22
40377: PUSH
40378: LD_INT 23
40380: PUSH
40381: LD_INT 24
40383: PUSH
40384: EMPTY
40385: LIST
40386: LIST
40387: LIST
40388: LIST
40389: ST_TO_ADDR
40390: GO 40675
40392: LD_INT 43
40394: DOUBLE
40395: EQUAL
40396: IFTRUE 40400
40398: GO 40426
40400: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
40401: LD_ADDR_VAR 0 3
40405: PUSH
40406: LD_INT 21
40408: PUSH
40409: LD_INT 22
40411: PUSH
40412: LD_INT 23
40414: PUSH
40415: LD_INT 24
40417: PUSH
40418: EMPTY
40419: LIST
40420: LIST
40421: LIST
40422: LIST
40423: ST_TO_ADDR
40424: GO 40675
40426: LD_INT 44
40428: DOUBLE
40429: EQUAL
40430: IFTRUE 40434
40432: GO 40460
40434: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
40435: LD_ADDR_VAR 0 3
40439: PUSH
40440: LD_INT 21
40442: PUSH
40443: LD_INT 22
40445: PUSH
40446: LD_INT 23
40448: PUSH
40449: LD_INT 24
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: LIST
40456: LIST
40457: ST_TO_ADDR
40458: GO 40675
40460: LD_INT 45
40462: DOUBLE
40463: EQUAL
40464: IFTRUE 40468
40466: GO 40494
40468: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
40469: LD_ADDR_VAR 0 3
40473: PUSH
40474: LD_INT 21
40476: PUSH
40477: LD_INT 22
40479: PUSH
40480: LD_INT 23
40482: PUSH
40483: LD_INT 24
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: LIST
40490: LIST
40491: ST_TO_ADDR
40492: GO 40675
40494: LD_INT 49
40496: DOUBLE
40497: EQUAL
40498: IFTRUE 40502
40500: GO 40528
40502: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
40503: LD_ADDR_VAR 0 3
40507: PUSH
40508: LD_INT 21
40510: PUSH
40511: LD_INT 22
40513: PUSH
40514: LD_INT 23
40516: PUSH
40517: LD_INT 24
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: LIST
40524: LIST
40525: ST_TO_ADDR
40526: GO 40675
40528: LD_INT 51
40530: DOUBLE
40531: EQUAL
40532: IFTRUE 40536
40534: GO 40562
40536: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
40537: LD_ADDR_VAR 0 3
40541: PUSH
40542: LD_INT 21
40544: PUSH
40545: LD_INT 22
40547: PUSH
40548: LD_INT 23
40550: PUSH
40551: LD_INT 24
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: ST_TO_ADDR
40560: GO 40675
40562: LD_INT 52
40564: DOUBLE
40565: EQUAL
40566: IFTRUE 40570
40568: GO 40596
40570: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
40571: LD_ADDR_VAR 0 3
40575: PUSH
40576: LD_INT 21
40578: PUSH
40579: LD_INT 22
40581: PUSH
40582: LD_INT 23
40584: PUSH
40585: LD_INT 24
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: ST_TO_ADDR
40594: GO 40675
40596: LD_INT 53
40598: DOUBLE
40599: EQUAL
40600: IFTRUE 40604
40602: GO 40622
40604: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
40605: LD_ADDR_VAR 0 3
40609: PUSH
40610: LD_INT 23
40612: PUSH
40613: LD_INT 24
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: ST_TO_ADDR
40620: GO 40675
40622: LD_INT 46
40624: DOUBLE
40625: EQUAL
40626: IFTRUE 40630
40628: GO 40648
40630: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
40631: LD_ADDR_VAR 0 3
40635: PUSH
40636: LD_INT 23
40638: PUSH
40639: LD_INT 24
40641: PUSH
40642: EMPTY
40643: LIST
40644: LIST
40645: ST_TO_ADDR
40646: GO 40675
40648: LD_INT 47
40650: DOUBLE
40651: EQUAL
40652: IFTRUE 40656
40654: GO 40674
40656: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40657: LD_ADDR_VAR 0 3
40661: PUSH
40662: LD_INT 23
40664: PUSH
40665: LD_INT 24
40667: PUSH
40668: EMPTY
40669: LIST
40670: LIST
40671: ST_TO_ADDR
40672: GO 40675
40674: POP
// result := ( chassis in result ) ;
40675: LD_ADDR_VAR 0 3
40679: PUSH
40680: LD_VAR 0 1
40684: PUSH
40685: LD_VAR 0 3
40689: IN
40690: ST_TO_ADDR
// end ;
40691: LD_VAR 0 3
40695: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
40696: LD_INT 0
40698: PPUSH
40699: PPUSH
40700: PPUSH
40701: PPUSH
40702: PPUSH
40703: PPUSH
40704: PPUSH
// result := array ;
40705: LD_ADDR_VAR 0 5
40709: PUSH
40710: LD_VAR 0 1
40714: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
40715: LD_VAR 0 1
40719: NOT
40720: PUSH
40721: LD_VAR 0 2
40725: NOT
40726: OR
40727: PUSH
40728: LD_VAR 0 3
40732: NOT
40733: OR
40734: PUSH
40735: LD_VAR 0 2
40739: PUSH
40740: LD_VAR 0 1
40744: GREATER
40745: OR
40746: PUSH
40747: LD_VAR 0 3
40751: PUSH
40752: LD_VAR 0 1
40756: GREATER
40757: OR
40758: IFFALSE 40762
// exit ;
40760: GO 41058
// if direction then
40762: LD_VAR 0 4
40766: IFFALSE 40830
// begin d := 1 ;
40768: LD_ADDR_VAR 0 9
40772: PUSH
40773: LD_INT 1
40775: ST_TO_ADDR
// if i_from > i_to then
40776: LD_VAR 0 2
40780: PUSH
40781: LD_VAR 0 3
40785: GREATER
40786: IFFALSE 40812
// length := ( array - i_from ) + i_to else
40788: LD_ADDR_VAR 0 11
40792: PUSH
40793: LD_VAR 0 1
40797: PUSH
40798: LD_VAR 0 2
40802: MINUS
40803: PUSH
40804: LD_VAR 0 3
40808: PLUS
40809: ST_TO_ADDR
40810: GO 40828
// length := i_to - i_from ;
40812: LD_ADDR_VAR 0 11
40816: PUSH
40817: LD_VAR 0 3
40821: PUSH
40822: LD_VAR 0 2
40826: MINUS
40827: ST_TO_ADDR
// end else
40828: GO 40891
// begin d := - 1 ;
40830: LD_ADDR_VAR 0 9
40834: PUSH
40835: LD_INT 1
40837: NEG
40838: ST_TO_ADDR
// if i_from > i_to then
40839: LD_VAR 0 2
40843: PUSH
40844: LD_VAR 0 3
40848: GREATER
40849: IFFALSE 40869
// length := i_from - i_to else
40851: LD_ADDR_VAR 0 11
40855: PUSH
40856: LD_VAR 0 2
40860: PUSH
40861: LD_VAR 0 3
40865: MINUS
40866: ST_TO_ADDR
40867: GO 40891
// length := ( array - i_to ) + i_from ;
40869: LD_ADDR_VAR 0 11
40873: PUSH
40874: LD_VAR 0 1
40878: PUSH
40879: LD_VAR 0 3
40883: MINUS
40884: PUSH
40885: LD_VAR 0 2
40889: PLUS
40890: ST_TO_ADDR
// end ; if not length then
40891: LD_VAR 0 11
40895: NOT
40896: IFFALSE 40900
// exit ;
40898: GO 41058
// tmp := array ;
40900: LD_ADDR_VAR 0 10
40904: PUSH
40905: LD_VAR 0 1
40909: ST_TO_ADDR
// for i = 1 to length do
40910: LD_ADDR_VAR 0 6
40914: PUSH
40915: DOUBLE
40916: LD_INT 1
40918: DEC
40919: ST_TO_ADDR
40920: LD_VAR 0 11
40924: PUSH
40925: FOR_TO
40926: IFFALSE 41046
// begin for j = 1 to array do
40928: LD_ADDR_VAR 0 7
40932: PUSH
40933: DOUBLE
40934: LD_INT 1
40936: DEC
40937: ST_TO_ADDR
40938: LD_VAR 0 1
40942: PUSH
40943: FOR_TO
40944: IFFALSE 41032
// begin k := j + d ;
40946: LD_ADDR_VAR 0 8
40950: PUSH
40951: LD_VAR 0 7
40955: PUSH
40956: LD_VAR 0 9
40960: PLUS
40961: ST_TO_ADDR
// if k > array then
40962: LD_VAR 0 8
40966: PUSH
40967: LD_VAR 0 1
40971: GREATER
40972: IFFALSE 40982
// k := 1 ;
40974: LD_ADDR_VAR 0 8
40978: PUSH
40979: LD_INT 1
40981: ST_TO_ADDR
// if not k then
40982: LD_VAR 0 8
40986: NOT
40987: IFFALSE 40999
// k := array ;
40989: LD_ADDR_VAR 0 8
40993: PUSH
40994: LD_VAR 0 1
40998: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
40999: LD_ADDR_VAR 0 10
41003: PUSH
41004: LD_VAR 0 10
41008: PPUSH
41009: LD_VAR 0 8
41013: PPUSH
41014: LD_VAR 0 1
41018: PUSH
41019: LD_VAR 0 7
41023: ARRAY
41024: PPUSH
41025: CALL_OW 1
41029: ST_TO_ADDR
// end ;
41030: GO 40943
41032: POP
41033: POP
// array := tmp ;
41034: LD_ADDR_VAR 0 1
41038: PUSH
41039: LD_VAR 0 10
41043: ST_TO_ADDR
// end ;
41044: GO 40925
41046: POP
41047: POP
// result := array ;
41048: LD_ADDR_VAR 0 5
41052: PUSH
41053: LD_VAR 0 1
41057: ST_TO_ADDR
// end ;
41058: LD_VAR 0 5
41062: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
41063: LD_INT 0
41065: PPUSH
41066: PPUSH
// result := 0 ;
41067: LD_ADDR_VAR 0 3
41071: PUSH
41072: LD_INT 0
41074: ST_TO_ADDR
// if not array or not value in array then
41075: LD_VAR 0 1
41079: NOT
41080: PUSH
41081: LD_VAR 0 2
41085: PUSH
41086: LD_VAR 0 1
41090: IN
41091: NOT
41092: OR
41093: IFFALSE 41097
// exit ;
41095: GO 41151
// for i = 1 to array do
41097: LD_ADDR_VAR 0 4
41101: PUSH
41102: DOUBLE
41103: LD_INT 1
41105: DEC
41106: ST_TO_ADDR
41107: LD_VAR 0 1
41111: PUSH
41112: FOR_TO
41113: IFFALSE 41149
// if value = array [ i ] then
41115: LD_VAR 0 2
41119: PUSH
41120: LD_VAR 0 1
41124: PUSH
41125: LD_VAR 0 4
41129: ARRAY
41130: EQUAL
41131: IFFALSE 41147
// begin result := i ;
41133: LD_ADDR_VAR 0 3
41137: PUSH
41138: LD_VAR 0 4
41142: ST_TO_ADDR
// exit ;
41143: POP
41144: POP
41145: GO 41151
// end ;
41147: GO 41112
41149: POP
41150: POP
// end ;
41151: LD_VAR 0 3
41155: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
41156: LD_INT 0
41158: PPUSH
// vc_chassis := chassis ;
41159: LD_ADDR_OWVAR 37
41163: PUSH
41164: LD_VAR 0 1
41168: ST_TO_ADDR
// vc_engine := engine ;
41169: LD_ADDR_OWVAR 39
41173: PUSH
41174: LD_VAR 0 2
41178: ST_TO_ADDR
// vc_control := control ;
41179: LD_ADDR_OWVAR 38
41183: PUSH
41184: LD_VAR 0 3
41188: ST_TO_ADDR
// vc_weapon := weapon ;
41189: LD_ADDR_OWVAR 40
41193: PUSH
41194: LD_VAR 0 4
41198: ST_TO_ADDR
// vc_fuel_battery := fuel ;
41199: LD_ADDR_OWVAR 41
41203: PUSH
41204: LD_VAR 0 5
41208: ST_TO_ADDR
// end ;
41209: LD_VAR 0 6
41213: RET
// export function WantPlant ( unit ) ; var task ; begin
41214: LD_INT 0
41216: PPUSH
41217: PPUSH
// result := false ;
41218: LD_ADDR_VAR 0 2
41222: PUSH
41223: LD_INT 0
41225: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
41226: LD_ADDR_VAR 0 3
41230: PUSH
41231: LD_VAR 0 1
41235: PPUSH
41236: CALL_OW 437
41240: ST_TO_ADDR
// if task then
41241: LD_VAR 0 3
41245: IFFALSE 41273
// if task [ 1 ] [ 1 ] = p then
41247: LD_VAR 0 3
41251: PUSH
41252: LD_INT 1
41254: ARRAY
41255: PUSH
41256: LD_INT 1
41258: ARRAY
41259: PUSH
41260: LD_STRING p
41262: EQUAL
41263: IFFALSE 41273
// result := true ;
41265: LD_ADDR_VAR 0 2
41269: PUSH
41270: LD_INT 1
41272: ST_TO_ADDR
// end ;
41273: LD_VAR 0 2
41277: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
41278: LD_INT 0
41280: PPUSH
41281: PPUSH
41282: PPUSH
41283: PPUSH
// if pos < 1 then
41284: LD_VAR 0 2
41288: PUSH
41289: LD_INT 1
41291: LESS
41292: IFFALSE 41296
// exit ;
41294: GO 41599
// if pos = 1 then
41296: LD_VAR 0 2
41300: PUSH
41301: LD_INT 1
41303: EQUAL
41304: IFFALSE 41337
// result := Replace ( arr , pos [ 1 ] , value ) else
41306: LD_ADDR_VAR 0 4
41310: PUSH
41311: LD_VAR 0 1
41315: PPUSH
41316: LD_VAR 0 2
41320: PUSH
41321: LD_INT 1
41323: ARRAY
41324: PPUSH
41325: LD_VAR 0 3
41329: PPUSH
41330: CALL_OW 1
41334: ST_TO_ADDR
41335: GO 41599
// begin tmp := arr ;
41337: LD_ADDR_VAR 0 6
41341: PUSH
41342: LD_VAR 0 1
41346: ST_TO_ADDR
// s_arr := [ tmp ] ;
41347: LD_ADDR_VAR 0 7
41351: PUSH
41352: LD_VAR 0 6
41356: PUSH
41357: EMPTY
41358: LIST
41359: ST_TO_ADDR
// for i = 1 to pos - 1 do
41360: LD_ADDR_VAR 0 5
41364: PUSH
41365: DOUBLE
41366: LD_INT 1
41368: DEC
41369: ST_TO_ADDR
41370: LD_VAR 0 2
41374: PUSH
41375: LD_INT 1
41377: MINUS
41378: PUSH
41379: FOR_TO
41380: IFFALSE 41425
// begin tmp := tmp [ pos [ i ] ] ;
41382: LD_ADDR_VAR 0 6
41386: PUSH
41387: LD_VAR 0 6
41391: PUSH
41392: LD_VAR 0 2
41396: PUSH
41397: LD_VAR 0 5
41401: ARRAY
41402: ARRAY
41403: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
41404: LD_ADDR_VAR 0 7
41408: PUSH
41409: LD_VAR 0 7
41413: PUSH
41414: LD_VAR 0 6
41418: PUSH
41419: EMPTY
41420: LIST
41421: ADD
41422: ST_TO_ADDR
// end ;
41423: GO 41379
41425: POP
41426: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
41427: LD_ADDR_VAR 0 6
41431: PUSH
41432: LD_VAR 0 6
41436: PPUSH
41437: LD_VAR 0 2
41441: PUSH
41442: LD_VAR 0 2
41446: ARRAY
41447: PPUSH
41448: LD_VAR 0 3
41452: PPUSH
41453: CALL_OW 1
41457: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
41458: LD_ADDR_VAR 0 7
41462: PUSH
41463: LD_VAR 0 7
41467: PPUSH
41468: LD_VAR 0 7
41472: PPUSH
41473: LD_VAR 0 6
41477: PPUSH
41478: CALL_OW 1
41482: ST_TO_ADDR
// for i = s_arr downto 2 do
41483: LD_ADDR_VAR 0 5
41487: PUSH
41488: DOUBLE
41489: LD_VAR 0 7
41493: INC
41494: ST_TO_ADDR
41495: LD_INT 2
41497: PUSH
41498: FOR_DOWNTO
41499: IFFALSE 41583
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
41501: LD_ADDR_VAR 0 6
41505: PUSH
41506: LD_VAR 0 7
41510: PUSH
41511: LD_VAR 0 5
41515: PUSH
41516: LD_INT 1
41518: MINUS
41519: ARRAY
41520: PPUSH
41521: LD_VAR 0 2
41525: PUSH
41526: LD_VAR 0 5
41530: PUSH
41531: LD_INT 1
41533: MINUS
41534: ARRAY
41535: PPUSH
41536: LD_VAR 0 7
41540: PUSH
41541: LD_VAR 0 5
41545: ARRAY
41546: PPUSH
41547: CALL_OW 1
41551: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
41552: LD_ADDR_VAR 0 7
41556: PUSH
41557: LD_VAR 0 7
41561: PPUSH
41562: LD_VAR 0 5
41566: PUSH
41567: LD_INT 1
41569: MINUS
41570: PPUSH
41571: LD_VAR 0 6
41575: PPUSH
41576: CALL_OW 1
41580: ST_TO_ADDR
// end ;
41581: GO 41498
41583: POP
41584: POP
// result := s_arr [ 1 ] ;
41585: LD_ADDR_VAR 0 4
41589: PUSH
41590: LD_VAR 0 7
41594: PUSH
41595: LD_INT 1
41597: ARRAY
41598: ST_TO_ADDR
// end ; end ;
41599: LD_VAR 0 4
41603: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
41604: LD_INT 0
41606: PPUSH
41607: PPUSH
// if not list then
41608: LD_VAR 0 1
41612: NOT
41613: IFFALSE 41617
// exit ;
41615: GO 41708
// i := list [ pos1 ] ;
41617: LD_ADDR_VAR 0 5
41621: PUSH
41622: LD_VAR 0 1
41626: PUSH
41627: LD_VAR 0 2
41631: ARRAY
41632: ST_TO_ADDR
// if not i then
41633: LD_VAR 0 5
41637: NOT
41638: IFFALSE 41642
// exit ;
41640: GO 41708
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
41642: LD_ADDR_VAR 0 1
41646: PUSH
41647: LD_VAR 0 1
41651: PPUSH
41652: LD_VAR 0 2
41656: PPUSH
41657: LD_VAR 0 1
41661: PUSH
41662: LD_VAR 0 3
41666: ARRAY
41667: PPUSH
41668: CALL_OW 1
41672: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
41673: LD_ADDR_VAR 0 1
41677: PUSH
41678: LD_VAR 0 1
41682: PPUSH
41683: LD_VAR 0 3
41687: PPUSH
41688: LD_VAR 0 5
41692: PPUSH
41693: CALL_OW 1
41697: ST_TO_ADDR
// result := list ;
41698: LD_ADDR_VAR 0 4
41702: PUSH
41703: LD_VAR 0 1
41707: ST_TO_ADDR
// end ;
41708: LD_VAR 0 4
41712: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
41713: LD_INT 0
41715: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
41716: LD_ADDR_VAR 0 5
41720: PUSH
41721: LD_VAR 0 1
41725: PPUSH
41726: CALL_OW 250
41730: PPUSH
41731: LD_VAR 0 1
41735: PPUSH
41736: CALL_OW 251
41740: PPUSH
41741: LD_VAR 0 2
41745: PPUSH
41746: LD_VAR 0 3
41750: PPUSH
41751: LD_VAR 0 4
41755: PPUSH
41756: CALL 41766 0 5
41760: ST_TO_ADDR
// end ;
41761: LD_VAR 0 5
41765: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
41766: LD_INT 0
41768: PPUSH
41769: PPUSH
41770: PPUSH
41771: PPUSH
// if not list then
41772: LD_VAR 0 3
41776: NOT
41777: IFFALSE 41781
// exit ;
41779: GO 42169
// result := [ ] ;
41781: LD_ADDR_VAR 0 6
41785: PUSH
41786: EMPTY
41787: ST_TO_ADDR
// for i in list do
41788: LD_ADDR_VAR 0 7
41792: PUSH
41793: LD_VAR 0 3
41797: PUSH
41798: FOR_IN
41799: IFFALSE 42001
// begin tmp := GetDistUnitXY ( i , x , y ) ;
41801: LD_ADDR_VAR 0 9
41805: PUSH
41806: LD_VAR 0 7
41810: PPUSH
41811: LD_VAR 0 1
41815: PPUSH
41816: LD_VAR 0 2
41820: PPUSH
41821: CALL_OW 297
41825: ST_TO_ADDR
// if not result then
41826: LD_VAR 0 6
41830: NOT
41831: IFFALSE 41857
// result := [ [ i , tmp ] ] else
41833: LD_ADDR_VAR 0 6
41837: PUSH
41838: LD_VAR 0 7
41842: PUSH
41843: LD_VAR 0 9
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: EMPTY
41853: LIST
41854: ST_TO_ADDR
41855: GO 41999
// begin if result [ result ] [ 2 ] < tmp then
41857: LD_VAR 0 6
41861: PUSH
41862: LD_VAR 0 6
41866: ARRAY
41867: PUSH
41868: LD_INT 2
41870: ARRAY
41871: PUSH
41872: LD_VAR 0 9
41876: LESS
41877: IFFALSE 41919
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
41879: LD_ADDR_VAR 0 6
41883: PUSH
41884: LD_VAR 0 6
41888: PPUSH
41889: LD_VAR 0 6
41893: PUSH
41894: LD_INT 1
41896: PLUS
41897: PPUSH
41898: LD_VAR 0 7
41902: PUSH
41903: LD_VAR 0 9
41907: PUSH
41908: EMPTY
41909: LIST
41910: LIST
41911: PPUSH
41912: CALL_OW 2
41916: ST_TO_ADDR
41917: GO 41999
// for j = 1 to result do
41919: LD_ADDR_VAR 0 8
41923: PUSH
41924: DOUBLE
41925: LD_INT 1
41927: DEC
41928: ST_TO_ADDR
41929: LD_VAR 0 6
41933: PUSH
41934: FOR_TO
41935: IFFALSE 41997
// begin if tmp < result [ j ] [ 2 ] then
41937: LD_VAR 0 9
41941: PUSH
41942: LD_VAR 0 6
41946: PUSH
41947: LD_VAR 0 8
41951: ARRAY
41952: PUSH
41953: LD_INT 2
41955: ARRAY
41956: LESS
41957: IFFALSE 41995
// begin result := Insert ( result , j , [ i , tmp ] ) ;
41959: LD_ADDR_VAR 0 6
41963: PUSH
41964: LD_VAR 0 6
41968: PPUSH
41969: LD_VAR 0 8
41973: PPUSH
41974: LD_VAR 0 7
41978: PUSH
41979: LD_VAR 0 9
41983: PUSH
41984: EMPTY
41985: LIST
41986: LIST
41987: PPUSH
41988: CALL_OW 2
41992: ST_TO_ADDR
// break ;
41993: GO 41997
// end ; end ;
41995: GO 41934
41997: POP
41998: POP
// end ; end ;
41999: GO 41798
42001: POP
42002: POP
// if result and not asc then
42003: LD_VAR 0 6
42007: PUSH
42008: LD_VAR 0 4
42012: NOT
42013: AND
42014: IFFALSE 42089
// begin tmp := result ;
42016: LD_ADDR_VAR 0 9
42020: PUSH
42021: LD_VAR 0 6
42025: ST_TO_ADDR
// for i = tmp downto 1 do
42026: LD_ADDR_VAR 0 7
42030: PUSH
42031: DOUBLE
42032: LD_VAR 0 9
42036: INC
42037: ST_TO_ADDR
42038: LD_INT 1
42040: PUSH
42041: FOR_DOWNTO
42042: IFFALSE 42087
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
42044: LD_ADDR_VAR 0 6
42048: PUSH
42049: LD_VAR 0 6
42053: PPUSH
42054: LD_VAR 0 9
42058: PUSH
42059: LD_VAR 0 7
42063: MINUS
42064: PUSH
42065: LD_INT 1
42067: PLUS
42068: PPUSH
42069: LD_VAR 0 9
42073: PUSH
42074: LD_VAR 0 7
42078: ARRAY
42079: PPUSH
42080: CALL_OW 1
42084: ST_TO_ADDR
42085: GO 42041
42087: POP
42088: POP
// end ; tmp := [ ] ;
42089: LD_ADDR_VAR 0 9
42093: PUSH
42094: EMPTY
42095: ST_TO_ADDR
// if mode then
42096: LD_VAR 0 5
42100: IFFALSE 42169
// begin for i = 1 to result do
42102: LD_ADDR_VAR 0 7
42106: PUSH
42107: DOUBLE
42108: LD_INT 1
42110: DEC
42111: ST_TO_ADDR
42112: LD_VAR 0 6
42116: PUSH
42117: FOR_TO
42118: IFFALSE 42157
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
42120: LD_ADDR_VAR 0 9
42124: PUSH
42125: LD_VAR 0 9
42129: PPUSH
42130: LD_VAR 0 7
42134: PPUSH
42135: LD_VAR 0 6
42139: PUSH
42140: LD_VAR 0 7
42144: ARRAY
42145: PUSH
42146: LD_INT 1
42148: ARRAY
42149: PPUSH
42150: CALL_OW 1
42154: ST_TO_ADDR
42155: GO 42117
42157: POP
42158: POP
// result := tmp ;
42159: LD_ADDR_VAR 0 6
42163: PUSH
42164: LD_VAR 0 9
42168: ST_TO_ADDR
// end ; end ;
42169: LD_VAR 0 6
42173: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
42174: LD_INT 0
42176: PPUSH
42177: PPUSH
42178: PPUSH
42179: PPUSH
42180: PPUSH
42181: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
42182: LD_ADDR_VAR 0 5
42186: PUSH
42187: LD_INT 0
42189: PUSH
42190: LD_INT 0
42192: PUSH
42193: LD_INT 0
42195: PUSH
42196: EMPTY
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: LIST
42202: LIST
42203: ST_TO_ADDR
// if not x or not y then
42204: LD_VAR 0 2
42208: NOT
42209: PUSH
42210: LD_VAR 0 3
42214: NOT
42215: OR
42216: IFFALSE 42220
// exit ;
42218: GO 43872
// if not range then
42220: LD_VAR 0 4
42224: NOT
42225: IFFALSE 42235
// range := 10 ;
42227: LD_ADDR_VAR 0 4
42231: PUSH
42232: LD_INT 10
42234: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42235: LD_ADDR_VAR 0 8
42239: PUSH
42240: LD_INT 81
42242: PUSH
42243: LD_VAR 0 1
42247: PUSH
42248: EMPTY
42249: LIST
42250: LIST
42251: PUSH
42252: LD_INT 92
42254: PUSH
42255: LD_VAR 0 2
42259: PUSH
42260: LD_VAR 0 3
42264: PUSH
42265: LD_VAR 0 4
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: PUSH
42276: LD_INT 3
42278: PUSH
42279: LD_INT 21
42281: PUSH
42282: LD_INT 3
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: EMPTY
42290: LIST
42291: LIST
42292: PUSH
42293: EMPTY
42294: LIST
42295: LIST
42296: LIST
42297: PPUSH
42298: CALL_OW 69
42302: ST_TO_ADDR
// if not tmp then
42303: LD_VAR 0 8
42307: NOT
42308: IFFALSE 42312
// exit ;
42310: GO 43872
// for i in tmp do
42312: LD_ADDR_VAR 0 6
42316: PUSH
42317: LD_VAR 0 8
42321: PUSH
42322: FOR_IN
42323: IFFALSE 43847
// begin points := [ 0 , 0 , 0 ] ;
42325: LD_ADDR_VAR 0 9
42329: PUSH
42330: LD_INT 0
42332: PUSH
42333: LD_INT 0
42335: PUSH
42336: LD_INT 0
42338: PUSH
42339: EMPTY
42340: LIST
42341: LIST
42342: LIST
42343: ST_TO_ADDR
// bpoints := 1 ;
42344: LD_ADDR_VAR 0 10
42348: PUSH
42349: LD_INT 1
42351: ST_TO_ADDR
// case GetType ( i ) of unit_human :
42352: LD_VAR 0 6
42356: PPUSH
42357: CALL_OW 247
42361: PUSH
42362: LD_INT 1
42364: DOUBLE
42365: EQUAL
42366: IFTRUE 42370
42368: GO 42948
42370: POP
// begin if GetClass ( i ) = 1 then
42371: LD_VAR 0 6
42375: PPUSH
42376: CALL_OW 257
42380: PUSH
42381: LD_INT 1
42383: EQUAL
42384: IFFALSE 42405
// points := [ 10 , 5 , 3 ] ;
42386: LD_ADDR_VAR 0 9
42390: PUSH
42391: LD_INT 10
42393: PUSH
42394: LD_INT 5
42396: PUSH
42397: LD_INT 3
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: LIST
42404: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
42405: LD_VAR 0 6
42409: PPUSH
42410: CALL_OW 257
42414: PUSH
42415: LD_INT 2
42417: PUSH
42418: LD_INT 3
42420: PUSH
42421: LD_INT 4
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: LIST
42428: IN
42429: IFFALSE 42450
// points := [ 3 , 2 , 1 ] ;
42431: LD_ADDR_VAR 0 9
42435: PUSH
42436: LD_INT 3
42438: PUSH
42439: LD_INT 2
42441: PUSH
42442: LD_INT 1
42444: PUSH
42445: EMPTY
42446: LIST
42447: LIST
42448: LIST
42449: ST_TO_ADDR
// if GetClass ( i ) = 5 then
42450: LD_VAR 0 6
42454: PPUSH
42455: CALL_OW 257
42459: PUSH
42460: LD_INT 5
42462: EQUAL
42463: IFFALSE 42484
// points := [ 130 , 5 , 2 ] ;
42465: LD_ADDR_VAR 0 9
42469: PUSH
42470: LD_INT 130
42472: PUSH
42473: LD_INT 5
42475: PUSH
42476: LD_INT 2
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: LIST
42483: ST_TO_ADDR
// if GetClass ( i ) = 8 then
42484: LD_VAR 0 6
42488: PPUSH
42489: CALL_OW 257
42493: PUSH
42494: LD_INT 8
42496: EQUAL
42497: IFFALSE 42518
// points := [ 35 , 35 , 30 ] ;
42499: LD_ADDR_VAR 0 9
42503: PUSH
42504: LD_INT 35
42506: PUSH
42507: LD_INT 35
42509: PUSH
42510: LD_INT 30
42512: PUSH
42513: EMPTY
42514: LIST
42515: LIST
42516: LIST
42517: ST_TO_ADDR
// if GetClass ( i ) = 9 then
42518: LD_VAR 0 6
42522: PPUSH
42523: CALL_OW 257
42527: PUSH
42528: LD_INT 9
42530: EQUAL
42531: IFFALSE 42552
// points := [ 20 , 55 , 40 ] ;
42533: LD_ADDR_VAR 0 9
42537: PUSH
42538: LD_INT 20
42540: PUSH
42541: LD_INT 55
42543: PUSH
42544: LD_INT 40
42546: PUSH
42547: EMPTY
42548: LIST
42549: LIST
42550: LIST
42551: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
42552: LD_VAR 0 6
42556: PPUSH
42557: CALL_OW 257
42561: PUSH
42562: LD_INT 12
42564: PUSH
42565: LD_INT 16
42567: PUSH
42568: EMPTY
42569: LIST
42570: LIST
42571: IN
42572: IFFALSE 42593
// points := [ 5 , 3 , 2 ] ;
42574: LD_ADDR_VAR 0 9
42578: PUSH
42579: LD_INT 5
42581: PUSH
42582: LD_INT 3
42584: PUSH
42585: LD_INT 2
42587: PUSH
42588: EMPTY
42589: LIST
42590: LIST
42591: LIST
42592: ST_TO_ADDR
// if GetClass ( i ) = 17 then
42593: LD_VAR 0 6
42597: PPUSH
42598: CALL_OW 257
42602: PUSH
42603: LD_INT 17
42605: EQUAL
42606: IFFALSE 42627
// points := [ 100 , 50 , 75 ] ;
42608: LD_ADDR_VAR 0 9
42612: PUSH
42613: LD_INT 100
42615: PUSH
42616: LD_INT 50
42618: PUSH
42619: LD_INT 75
42621: PUSH
42622: EMPTY
42623: LIST
42624: LIST
42625: LIST
42626: ST_TO_ADDR
// if GetClass ( i ) = 15 then
42627: LD_VAR 0 6
42631: PPUSH
42632: CALL_OW 257
42636: PUSH
42637: LD_INT 15
42639: EQUAL
42640: IFFALSE 42661
// points := [ 10 , 5 , 3 ] ;
42642: LD_ADDR_VAR 0 9
42646: PUSH
42647: LD_INT 10
42649: PUSH
42650: LD_INT 5
42652: PUSH
42653: LD_INT 3
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: LIST
42660: ST_TO_ADDR
// if GetClass ( i ) = 14 then
42661: LD_VAR 0 6
42665: PPUSH
42666: CALL_OW 257
42670: PUSH
42671: LD_INT 14
42673: EQUAL
42674: IFFALSE 42695
// points := [ 10 , 0 , 0 ] ;
42676: LD_ADDR_VAR 0 9
42680: PUSH
42681: LD_INT 10
42683: PUSH
42684: LD_INT 0
42686: PUSH
42687: LD_INT 0
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: LIST
42694: ST_TO_ADDR
// if GetClass ( i ) = 11 then
42695: LD_VAR 0 6
42699: PPUSH
42700: CALL_OW 257
42704: PUSH
42705: LD_INT 11
42707: EQUAL
42708: IFFALSE 42729
// points := [ 30 , 10 , 5 ] ;
42710: LD_ADDR_VAR 0 9
42714: PUSH
42715: LD_INT 30
42717: PUSH
42718: LD_INT 10
42720: PUSH
42721: LD_INT 5
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: LIST
42728: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
42729: LD_VAR 0 1
42733: PPUSH
42734: LD_INT 5
42736: PPUSH
42737: CALL_OW 321
42741: PUSH
42742: LD_INT 2
42744: EQUAL
42745: IFFALSE 42762
// bpoints := bpoints * 1.8 ;
42747: LD_ADDR_VAR 0 10
42751: PUSH
42752: LD_VAR 0 10
42756: PUSH
42757: LD_REAL  1.80000000000000E+0000
42760: MUL
42761: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
42762: LD_VAR 0 6
42766: PPUSH
42767: CALL_OW 257
42771: PUSH
42772: LD_INT 1
42774: PUSH
42775: LD_INT 2
42777: PUSH
42778: LD_INT 3
42780: PUSH
42781: LD_INT 4
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: LIST
42788: LIST
42789: IN
42790: PUSH
42791: LD_VAR 0 1
42795: PPUSH
42796: LD_INT 51
42798: PPUSH
42799: CALL_OW 321
42803: PUSH
42804: LD_INT 2
42806: EQUAL
42807: AND
42808: IFFALSE 42825
// bpoints := bpoints * 1.2 ;
42810: LD_ADDR_VAR 0 10
42814: PUSH
42815: LD_VAR 0 10
42819: PUSH
42820: LD_REAL  1.20000000000000E+0000
42823: MUL
42824: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
42825: LD_VAR 0 6
42829: PPUSH
42830: CALL_OW 257
42834: PUSH
42835: LD_INT 5
42837: PUSH
42838: LD_INT 7
42840: PUSH
42841: LD_INT 9
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: LIST
42848: IN
42849: PUSH
42850: LD_VAR 0 1
42854: PPUSH
42855: LD_INT 52
42857: PPUSH
42858: CALL_OW 321
42862: PUSH
42863: LD_INT 2
42865: EQUAL
42866: AND
42867: IFFALSE 42884
// bpoints := bpoints * 1.5 ;
42869: LD_ADDR_VAR 0 10
42873: PUSH
42874: LD_VAR 0 10
42878: PUSH
42879: LD_REAL  1.50000000000000E+0000
42882: MUL
42883: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
42884: LD_VAR 0 1
42888: PPUSH
42889: LD_INT 66
42891: PPUSH
42892: CALL_OW 321
42896: PUSH
42897: LD_INT 2
42899: EQUAL
42900: IFFALSE 42917
// bpoints := bpoints * 1.1 ;
42902: LD_ADDR_VAR 0 10
42906: PUSH
42907: LD_VAR 0 10
42911: PUSH
42912: LD_REAL  1.10000000000000E+0000
42915: MUL
42916: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
42917: LD_ADDR_VAR 0 10
42921: PUSH
42922: LD_VAR 0 10
42926: PUSH
42927: LD_VAR 0 6
42931: PPUSH
42932: LD_INT 1
42934: PPUSH
42935: CALL_OW 259
42939: PUSH
42940: LD_REAL  1.15000000000000E+0000
42943: MUL
42944: MUL
42945: ST_TO_ADDR
// end ; unit_vehicle :
42946: GO 43776
42948: LD_INT 2
42950: DOUBLE
42951: EQUAL
42952: IFTRUE 42956
42954: GO 43764
42956: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
42957: LD_VAR 0 6
42961: PPUSH
42962: CALL_OW 264
42966: PUSH
42967: LD_INT 2
42969: PUSH
42970: LD_INT 42
42972: PUSH
42973: LD_INT 24
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: LIST
42980: IN
42981: IFFALSE 43002
// points := [ 25 , 5 , 3 ] ;
42983: LD_ADDR_VAR 0 9
42987: PUSH
42988: LD_INT 25
42990: PUSH
42991: LD_INT 5
42993: PUSH
42994: LD_INT 3
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: LIST
43001: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
43002: LD_VAR 0 6
43006: PPUSH
43007: CALL_OW 264
43011: PUSH
43012: LD_INT 4
43014: PUSH
43015: LD_INT 43
43017: PUSH
43018: LD_INT 25
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: LIST
43025: IN
43026: IFFALSE 43047
// points := [ 40 , 15 , 5 ] ;
43028: LD_ADDR_VAR 0 9
43032: PUSH
43033: LD_INT 40
43035: PUSH
43036: LD_INT 15
43038: PUSH
43039: LD_INT 5
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: LIST
43046: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
43047: LD_VAR 0 6
43051: PPUSH
43052: CALL_OW 264
43056: PUSH
43057: LD_INT 3
43059: PUSH
43060: LD_INT 23
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: IN
43067: IFFALSE 43088
// points := [ 7 , 25 , 8 ] ;
43069: LD_ADDR_VAR 0 9
43073: PUSH
43074: LD_INT 7
43076: PUSH
43077: LD_INT 25
43079: PUSH
43080: LD_INT 8
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: LIST
43087: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
43088: LD_VAR 0 6
43092: PPUSH
43093: CALL_OW 264
43097: PUSH
43098: LD_INT 5
43100: PUSH
43101: LD_INT 27
43103: PUSH
43104: LD_INT 44
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: LIST
43111: IN
43112: IFFALSE 43133
// points := [ 14 , 50 , 16 ] ;
43114: LD_ADDR_VAR 0 9
43118: PUSH
43119: LD_INT 14
43121: PUSH
43122: LD_INT 50
43124: PUSH
43125: LD_INT 16
43127: PUSH
43128: EMPTY
43129: LIST
43130: LIST
43131: LIST
43132: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
43133: LD_VAR 0 6
43137: PPUSH
43138: CALL_OW 264
43142: PUSH
43143: LD_INT 6
43145: PUSH
43146: LD_INT 46
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: IN
43153: IFFALSE 43174
// points := [ 32 , 120 , 70 ] ;
43155: LD_ADDR_VAR 0 9
43159: PUSH
43160: LD_INT 32
43162: PUSH
43163: LD_INT 120
43165: PUSH
43166: LD_INT 70
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: LIST
43173: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
43174: LD_VAR 0 6
43178: PPUSH
43179: CALL_OW 264
43183: PUSH
43184: LD_INT 7
43186: PUSH
43187: LD_INT 28
43189: PUSH
43190: LD_INT 45
43192: PUSH
43193: LD_EXP 64
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: LIST
43202: LIST
43203: IN
43204: IFFALSE 43225
// points := [ 35 , 20 , 45 ] ;
43206: LD_ADDR_VAR 0 9
43210: PUSH
43211: LD_INT 35
43213: PUSH
43214: LD_INT 20
43216: PUSH
43217: LD_INT 45
43219: PUSH
43220: EMPTY
43221: LIST
43222: LIST
43223: LIST
43224: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
43225: LD_VAR 0 6
43229: PPUSH
43230: CALL_OW 264
43234: PUSH
43235: LD_INT 47
43237: PUSH
43238: EMPTY
43239: LIST
43240: IN
43241: IFFALSE 43262
// points := [ 67 , 45 , 75 ] ;
43243: LD_ADDR_VAR 0 9
43247: PUSH
43248: LD_INT 67
43250: PUSH
43251: LD_INT 45
43253: PUSH
43254: LD_INT 75
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: LIST
43261: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
43262: LD_VAR 0 6
43266: PPUSH
43267: CALL_OW 264
43271: PUSH
43272: LD_INT 26
43274: PUSH
43275: EMPTY
43276: LIST
43277: IN
43278: IFFALSE 43299
// points := [ 120 , 30 , 80 ] ;
43280: LD_ADDR_VAR 0 9
43284: PUSH
43285: LD_INT 120
43287: PUSH
43288: LD_INT 30
43290: PUSH
43291: LD_INT 80
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: LIST
43298: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
43299: LD_VAR 0 6
43303: PPUSH
43304: CALL_OW 264
43308: PUSH
43309: LD_INT 22
43311: PUSH
43312: EMPTY
43313: LIST
43314: IN
43315: IFFALSE 43336
// points := [ 40 , 1 , 1 ] ;
43317: LD_ADDR_VAR 0 9
43321: PUSH
43322: LD_INT 40
43324: PUSH
43325: LD_INT 1
43327: PUSH
43328: LD_INT 1
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: LIST
43335: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
43336: LD_VAR 0 6
43340: PPUSH
43341: CALL_OW 264
43345: PUSH
43346: LD_INT 29
43348: PUSH
43349: EMPTY
43350: LIST
43351: IN
43352: IFFALSE 43373
// points := [ 70 , 200 , 400 ] ;
43354: LD_ADDR_VAR 0 9
43358: PUSH
43359: LD_INT 70
43361: PUSH
43362: LD_INT 200
43364: PUSH
43365: LD_INT 400
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: LIST
43372: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
43373: LD_VAR 0 6
43377: PPUSH
43378: CALL_OW 264
43382: PUSH
43383: LD_INT 14
43385: PUSH
43386: LD_INT 53
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: IN
43393: IFFALSE 43414
// points := [ 40 , 10 , 20 ] ;
43395: LD_ADDR_VAR 0 9
43399: PUSH
43400: LD_INT 40
43402: PUSH
43403: LD_INT 10
43405: PUSH
43406: LD_INT 20
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: LIST
43413: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
43414: LD_VAR 0 6
43418: PPUSH
43419: CALL_OW 264
43423: PUSH
43424: LD_INT 9
43426: PUSH
43427: EMPTY
43428: LIST
43429: IN
43430: IFFALSE 43451
// points := [ 5 , 70 , 20 ] ;
43432: LD_ADDR_VAR 0 9
43436: PUSH
43437: LD_INT 5
43439: PUSH
43440: LD_INT 70
43442: PUSH
43443: LD_INT 20
43445: PUSH
43446: EMPTY
43447: LIST
43448: LIST
43449: LIST
43450: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
43451: LD_VAR 0 6
43455: PPUSH
43456: CALL_OW 264
43460: PUSH
43461: LD_INT 10
43463: PUSH
43464: EMPTY
43465: LIST
43466: IN
43467: IFFALSE 43488
// points := [ 35 , 110 , 70 ] ;
43469: LD_ADDR_VAR 0 9
43473: PUSH
43474: LD_INT 35
43476: PUSH
43477: LD_INT 110
43479: PUSH
43480: LD_INT 70
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: LIST
43487: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
43488: LD_VAR 0 6
43492: PPUSH
43493: CALL_OW 265
43497: PUSH
43498: LD_INT 25
43500: EQUAL
43501: IFFALSE 43522
// points := [ 80 , 65 , 100 ] ;
43503: LD_ADDR_VAR 0 9
43507: PUSH
43508: LD_INT 80
43510: PUSH
43511: LD_INT 65
43513: PUSH
43514: LD_INT 100
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: LIST
43521: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
43522: LD_VAR 0 6
43526: PPUSH
43527: CALL_OW 263
43531: PUSH
43532: LD_INT 1
43534: EQUAL
43535: IFFALSE 43570
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
43537: LD_ADDR_VAR 0 10
43541: PUSH
43542: LD_VAR 0 10
43546: PUSH
43547: LD_VAR 0 6
43551: PPUSH
43552: CALL_OW 311
43556: PPUSH
43557: LD_INT 3
43559: PPUSH
43560: CALL_OW 259
43564: PUSH
43565: LD_INT 4
43567: MUL
43568: MUL
43569: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
43570: LD_VAR 0 6
43574: PPUSH
43575: CALL_OW 263
43579: PUSH
43580: LD_INT 2
43582: EQUAL
43583: IFFALSE 43634
// begin j := IsControledBy ( i ) ;
43585: LD_ADDR_VAR 0 7
43589: PUSH
43590: LD_VAR 0 6
43594: PPUSH
43595: CALL_OW 312
43599: ST_TO_ADDR
// if j then
43600: LD_VAR 0 7
43604: IFFALSE 43634
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
43606: LD_ADDR_VAR 0 10
43610: PUSH
43611: LD_VAR 0 10
43615: PUSH
43616: LD_VAR 0 7
43620: PPUSH
43621: LD_INT 3
43623: PPUSH
43624: CALL_OW 259
43628: PUSH
43629: LD_INT 3
43631: MUL
43632: MUL
43633: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
43634: LD_VAR 0 6
43638: PPUSH
43639: CALL_OW 264
43643: PUSH
43644: LD_INT 5
43646: PUSH
43647: LD_INT 6
43649: PUSH
43650: LD_INT 46
43652: PUSH
43653: LD_INT 44
43655: PUSH
43656: LD_INT 47
43658: PUSH
43659: LD_INT 45
43661: PUSH
43662: LD_INT 28
43664: PUSH
43665: LD_INT 7
43667: PUSH
43668: LD_INT 27
43670: PUSH
43671: LD_INT 29
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: LIST
43678: LIST
43679: LIST
43680: LIST
43681: LIST
43682: LIST
43683: LIST
43684: LIST
43685: IN
43686: PUSH
43687: LD_VAR 0 1
43691: PPUSH
43692: LD_INT 52
43694: PPUSH
43695: CALL_OW 321
43699: PUSH
43700: LD_INT 2
43702: EQUAL
43703: AND
43704: IFFALSE 43721
// bpoints := bpoints * 1.2 ;
43706: LD_ADDR_VAR 0 10
43710: PUSH
43711: LD_VAR 0 10
43715: PUSH
43716: LD_REAL  1.20000000000000E+0000
43719: MUL
43720: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
43721: LD_VAR 0 6
43725: PPUSH
43726: CALL_OW 264
43730: PUSH
43731: LD_INT 6
43733: PUSH
43734: LD_INT 46
43736: PUSH
43737: LD_INT 47
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: LIST
43744: IN
43745: IFFALSE 43762
// bpoints := bpoints * 1.2 ;
43747: LD_ADDR_VAR 0 10
43751: PUSH
43752: LD_VAR 0 10
43756: PUSH
43757: LD_REAL  1.20000000000000E+0000
43760: MUL
43761: ST_TO_ADDR
// end ; unit_building :
43762: GO 43776
43764: LD_INT 3
43766: DOUBLE
43767: EQUAL
43768: IFTRUE 43772
43770: GO 43775
43772: POP
// ; end ;
43773: GO 43776
43775: POP
// for j = 1 to 3 do
43776: LD_ADDR_VAR 0 7
43780: PUSH
43781: DOUBLE
43782: LD_INT 1
43784: DEC
43785: ST_TO_ADDR
43786: LD_INT 3
43788: PUSH
43789: FOR_TO
43790: IFFALSE 43843
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
43792: LD_ADDR_VAR 0 5
43796: PUSH
43797: LD_VAR 0 5
43801: PPUSH
43802: LD_VAR 0 7
43806: PPUSH
43807: LD_VAR 0 5
43811: PUSH
43812: LD_VAR 0 7
43816: ARRAY
43817: PUSH
43818: LD_VAR 0 9
43822: PUSH
43823: LD_VAR 0 7
43827: ARRAY
43828: PUSH
43829: LD_VAR 0 10
43833: MUL
43834: PLUS
43835: PPUSH
43836: CALL_OW 1
43840: ST_TO_ADDR
43841: GO 43789
43843: POP
43844: POP
// end ;
43845: GO 42322
43847: POP
43848: POP
// result := Replace ( result , 4 , tmp ) ;
43849: LD_ADDR_VAR 0 5
43853: PUSH
43854: LD_VAR 0 5
43858: PPUSH
43859: LD_INT 4
43861: PPUSH
43862: LD_VAR 0 8
43866: PPUSH
43867: CALL_OW 1
43871: ST_TO_ADDR
// end ;
43872: LD_VAR 0 5
43876: RET
// export function DangerAtRange ( unit , range ) ; begin
43877: LD_INT 0
43879: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
43880: LD_ADDR_VAR 0 3
43884: PUSH
43885: LD_VAR 0 1
43889: PPUSH
43890: CALL_OW 255
43894: PPUSH
43895: LD_VAR 0 1
43899: PPUSH
43900: CALL_OW 250
43904: PPUSH
43905: LD_VAR 0 1
43909: PPUSH
43910: CALL_OW 251
43914: PPUSH
43915: LD_VAR 0 2
43919: PPUSH
43920: CALL 42174 0 4
43924: ST_TO_ADDR
// end ;
43925: LD_VAR 0 3
43929: RET
// export function DangerInArea ( side , area ) ; begin
43930: LD_INT 0
43932: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
43933: LD_ADDR_VAR 0 3
43937: PUSH
43938: LD_VAR 0 2
43942: PPUSH
43943: LD_INT 81
43945: PUSH
43946: LD_VAR 0 1
43950: PUSH
43951: EMPTY
43952: LIST
43953: LIST
43954: PPUSH
43955: CALL_OW 70
43959: ST_TO_ADDR
// end ;
43960: LD_VAR 0 3
43964: RET
// export function IsExtension ( b ) ; begin
43965: LD_INT 0
43967: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
43968: LD_ADDR_VAR 0 2
43972: PUSH
43973: LD_VAR 0 1
43977: PUSH
43978: LD_INT 23
43980: PUSH
43981: LD_INT 20
43983: PUSH
43984: LD_INT 22
43986: PUSH
43987: LD_INT 17
43989: PUSH
43990: LD_INT 24
43992: PUSH
43993: LD_INT 21
43995: PUSH
43996: LD_INT 19
43998: PUSH
43999: LD_INT 16
44001: PUSH
44002: LD_INT 25
44004: PUSH
44005: LD_INT 18
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: LIST
44012: LIST
44013: LIST
44014: LIST
44015: LIST
44016: LIST
44017: LIST
44018: LIST
44019: IN
44020: ST_TO_ADDR
// end ;
44021: LD_VAR 0 2
44025: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
44026: LD_INT 0
44028: PPUSH
44029: PPUSH
44030: PPUSH
// result := [ ] ;
44031: LD_ADDR_VAR 0 4
44035: PUSH
44036: EMPTY
44037: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
44038: LD_ADDR_VAR 0 5
44042: PUSH
44043: LD_VAR 0 2
44047: PPUSH
44048: LD_INT 21
44050: PUSH
44051: LD_INT 3
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: PPUSH
44058: CALL_OW 70
44062: ST_TO_ADDR
// if not tmp then
44063: LD_VAR 0 5
44067: NOT
44068: IFFALSE 44072
// exit ;
44070: GO 44136
// if checkLink then
44072: LD_VAR 0 3
44076: IFFALSE 44126
// begin for i in tmp do
44078: LD_ADDR_VAR 0 6
44082: PUSH
44083: LD_VAR 0 5
44087: PUSH
44088: FOR_IN
44089: IFFALSE 44124
// if GetBase ( i ) <> base then
44091: LD_VAR 0 6
44095: PPUSH
44096: CALL_OW 274
44100: PUSH
44101: LD_VAR 0 1
44105: NONEQUAL
44106: IFFALSE 44122
// ComLinkToBase ( base , i ) ;
44108: LD_VAR 0 1
44112: PPUSH
44113: LD_VAR 0 6
44117: PPUSH
44118: CALL_OW 169
44122: GO 44088
44124: POP
44125: POP
// end ; result := tmp ;
44126: LD_ADDR_VAR 0 4
44130: PUSH
44131: LD_VAR 0 5
44135: ST_TO_ADDR
// end ;
44136: LD_VAR 0 4
44140: RET
// export function ComComplete ( units , b ) ; var i ; begin
44141: LD_INT 0
44143: PPUSH
44144: PPUSH
// if not units then
44145: LD_VAR 0 1
44149: NOT
44150: IFFALSE 44154
// exit ;
44152: GO 44244
// for i in units do
44154: LD_ADDR_VAR 0 4
44158: PUSH
44159: LD_VAR 0 1
44163: PUSH
44164: FOR_IN
44165: IFFALSE 44242
// if BuildingStatus ( b ) = bs_build then
44167: LD_VAR 0 2
44171: PPUSH
44172: CALL_OW 461
44176: PUSH
44177: LD_INT 1
44179: EQUAL
44180: IFFALSE 44240
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
44182: LD_VAR 0 4
44186: PPUSH
44187: LD_STRING h
44189: PUSH
44190: LD_VAR 0 2
44194: PPUSH
44195: CALL_OW 250
44199: PUSH
44200: LD_VAR 0 2
44204: PPUSH
44205: CALL_OW 251
44209: PUSH
44210: LD_VAR 0 2
44214: PUSH
44215: LD_INT 0
44217: PUSH
44218: LD_INT 0
44220: PUSH
44221: LD_INT 0
44223: PUSH
44224: EMPTY
44225: LIST
44226: LIST
44227: LIST
44228: LIST
44229: LIST
44230: LIST
44231: LIST
44232: PUSH
44233: EMPTY
44234: LIST
44235: PPUSH
44236: CALL_OW 446
44240: GO 44164
44242: POP
44243: POP
// end ;
44244: LD_VAR 0 3
44248: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
44249: LD_INT 0
44251: PPUSH
44252: PPUSH
44253: PPUSH
44254: PPUSH
44255: PPUSH
44256: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
44257: LD_VAR 0 1
44261: NOT
44262: PUSH
44263: LD_VAR 0 1
44267: PPUSH
44268: CALL_OW 263
44272: PUSH
44273: LD_INT 2
44275: NONEQUAL
44276: OR
44277: IFFALSE 44281
// exit ;
44279: GO 44597
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
44281: LD_ADDR_VAR 0 6
44285: PUSH
44286: LD_INT 22
44288: PUSH
44289: LD_VAR 0 1
44293: PPUSH
44294: CALL_OW 255
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 2
44305: PUSH
44306: LD_INT 30
44308: PUSH
44309: LD_INT 36
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: PUSH
44316: LD_INT 34
44318: PUSH
44319: LD_INT 31
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: LIST
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PPUSH
44335: CALL_OW 69
44339: ST_TO_ADDR
// if not tmp then
44340: LD_VAR 0 6
44344: NOT
44345: IFFALSE 44349
// exit ;
44347: GO 44597
// result := [ ] ;
44349: LD_ADDR_VAR 0 2
44353: PUSH
44354: EMPTY
44355: ST_TO_ADDR
// for i in tmp do
44356: LD_ADDR_VAR 0 3
44360: PUSH
44361: LD_VAR 0 6
44365: PUSH
44366: FOR_IN
44367: IFFALSE 44438
// begin t := UnitsInside ( i ) ;
44369: LD_ADDR_VAR 0 4
44373: PUSH
44374: LD_VAR 0 3
44378: PPUSH
44379: CALL_OW 313
44383: ST_TO_ADDR
// if t then
44384: LD_VAR 0 4
44388: IFFALSE 44436
// for j in t do
44390: LD_ADDR_VAR 0 7
44394: PUSH
44395: LD_VAR 0 4
44399: PUSH
44400: FOR_IN
44401: IFFALSE 44434
// result := Replace ( result , result + 1 , j ) ;
44403: LD_ADDR_VAR 0 2
44407: PUSH
44408: LD_VAR 0 2
44412: PPUSH
44413: LD_VAR 0 2
44417: PUSH
44418: LD_INT 1
44420: PLUS
44421: PPUSH
44422: LD_VAR 0 7
44426: PPUSH
44427: CALL_OW 1
44431: ST_TO_ADDR
44432: GO 44400
44434: POP
44435: POP
// end ;
44436: GO 44366
44438: POP
44439: POP
// if not result then
44440: LD_VAR 0 2
44444: NOT
44445: IFFALSE 44449
// exit ;
44447: GO 44597
// mech := result [ 1 ] ;
44449: LD_ADDR_VAR 0 5
44453: PUSH
44454: LD_VAR 0 2
44458: PUSH
44459: LD_INT 1
44461: ARRAY
44462: ST_TO_ADDR
// if result > 1 then
44463: LD_VAR 0 2
44467: PUSH
44468: LD_INT 1
44470: GREATER
44471: IFFALSE 44583
// begin for i = 2 to result do
44473: LD_ADDR_VAR 0 3
44477: PUSH
44478: DOUBLE
44479: LD_INT 2
44481: DEC
44482: ST_TO_ADDR
44483: LD_VAR 0 2
44487: PUSH
44488: FOR_TO
44489: IFFALSE 44581
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
44491: LD_ADDR_VAR 0 4
44495: PUSH
44496: LD_VAR 0 2
44500: PUSH
44501: LD_VAR 0 3
44505: ARRAY
44506: PPUSH
44507: LD_INT 3
44509: PPUSH
44510: CALL_OW 259
44514: PUSH
44515: LD_VAR 0 2
44519: PUSH
44520: LD_VAR 0 3
44524: ARRAY
44525: PPUSH
44526: CALL_OW 432
44530: MINUS
44531: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
44532: LD_VAR 0 4
44536: PUSH
44537: LD_VAR 0 5
44541: PPUSH
44542: LD_INT 3
44544: PPUSH
44545: CALL_OW 259
44549: PUSH
44550: LD_VAR 0 5
44554: PPUSH
44555: CALL_OW 432
44559: MINUS
44560: GREATEREQUAL
44561: IFFALSE 44579
// mech := result [ i ] ;
44563: LD_ADDR_VAR 0 5
44567: PUSH
44568: LD_VAR 0 2
44572: PUSH
44573: LD_VAR 0 3
44577: ARRAY
44578: ST_TO_ADDR
// end ;
44579: GO 44488
44581: POP
44582: POP
// end ; ComLinkTo ( vehicle , mech ) ;
44583: LD_VAR 0 1
44587: PPUSH
44588: LD_VAR 0 5
44592: PPUSH
44593: CALL_OW 135
// end ;
44597: LD_VAR 0 2
44601: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
44602: LD_INT 0
44604: PPUSH
44605: PPUSH
44606: PPUSH
44607: PPUSH
44608: PPUSH
44609: PPUSH
44610: PPUSH
44611: PPUSH
44612: PPUSH
44613: PPUSH
44614: PPUSH
44615: PPUSH
44616: PPUSH
// result := [ ] ;
44617: LD_ADDR_VAR 0 7
44621: PUSH
44622: EMPTY
44623: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
44624: LD_VAR 0 1
44628: PPUSH
44629: CALL_OW 266
44633: PUSH
44634: LD_INT 0
44636: PUSH
44637: LD_INT 1
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: IN
44644: NOT
44645: IFFALSE 44649
// exit ;
44647: GO 46283
// if name then
44649: LD_VAR 0 3
44653: IFFALSE 44669
// SetBName ( base_dep , name ) ;
44655: LD_VAR 0 1
44659: PPUSH
44660: LD_VAR 0 3
44664: PPUSH
44665: CALL_OW 500
// base := GetBase ( base_dep ) ;
44669: LD_ADDR_VAR 0 15
44673: PUSH
44674: LD_VAR 0 1
44678: PPUSH
44679: CALL_OW 274
44683: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
44684: LD_ADDR_VAR 0 16
44688: PUSH
44689: LD_VAR 0 1
44693: PPUSH
44694: CALL_OW 255
44698: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
44699: LD_ADDR_VAR 0 17
44703: PUSH
44704: LD_VAR 0 1
44708: PPUSH
44709: CALL_OW 248
44713: ST_TO_ADDR
// if sources then
44714: LD_VAR 0 5
44718: IFFALSE 44765
// for i = 1 to 3 do
44720: LD_ADDR_VAR 0 8
44724: PUSH
44725: DOUBLE
44726: LD_INT 1
44728: DEC
44729: ST_TO_ADDR
44730: LD_INT 3
44732: PUSH
44733: FOR_TO
44734: IFFALSE 44763
// AddResourceType ( base , i , sources [ i ] ) ;
44736: LD_VAR 0 15
44740: PPUSH
44741: LD_VAR 0 8
44745: PPUSH
44746: LD_VAR 0 5
44750: PUSH
44751: LD_VAR 0 8
44755: ARRAY
44756: PPUSH
44757: CALL_OW 276
44761: GO 44733
44763: POP
44764: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
44765: LD_ADDR_VAR 0 18
44769: PUSH
44770: LD_VAR 0 15
44774: PPUSH
44775: LD_VAR 0 2
44779: PPUSH
44780: LD_INT 1
44782: PPUSH
44783: CALL 44026 0 3
44787: ST_TO_ADDR
// InitHc ;
44788: CALL_OW 19
// InitUc ;
44792: CALL_OW 18
// uc_side := side ;
44796: LD_ADDR_OWVAR 20
44800: PUSH
44801: LD_VAR 0 16
44805: ST_TO_ADDR
// uc_nation := nation ;
44806: LD_ADDR_OWVAR 21
44810: PUSH
44811: LD_VAR 0 17
44815: ST_TO_ADDR
// if buildings then
44816: LD_VAR 0 18
44820: IFFALSE 46142
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
44822: LD_ADDR_VAR 0 19
44826: PUSH
44827: LD_VAR 0 18
44831: PPUSH
44832: LD_INT 2
44834: PUSH
44835: LD_INT 30
44837: PUSH
44838: LD_INT 29
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: PUSH
44845: LD_INT 30
44847: PUSH
44848: LD_INT 30
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: LIST
44859: PPUSH
44860: CALL_OW 72
44864: ST_TO_ADDR
// if tmp then
44865: LD_VAR 0 19
44869: IFFALSE 44917
// for i in tmp do
44871: LD_ADDR_VAR 0 8
44875: PUSH
44876: LD_VAR 0 19
44880: PUSH
44881: FOR_IN
44882: IFFALSE 44915
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
44884: LD_VAR 0 8
44888: PPUSH
44889: CALL_OW 250
44893: PPUSH
44894: LD_VAR 0 8
44898: PPUSH
44899: CALL_OW 251
44903: PPUSH
44904: LD_VAR 0 16
44908: PPUSH
44909: CALL_OW 441
44913: GO 44881
44915: POP
44916: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
44917: LD_VAR 0 18
44921: PPUSH
44922: LD_INT 2
44924: PUSH
44925: LD_INT 30
44927: PUSH
44928: LD_INT 32
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: PUSH
44935: LD_INT 30
44937: PUSH
44938: LD_INT 33
44940: PUSH
44941: EMPTY
44942: LIST
44943: LIST
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: LIST
44949: PPUSH
44950: CALL_OW 72
44954: IFFALSE 45042
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
44956: LD_ADDR_VAR 0 8
44960: PUSH
44961: LD_VAR 0 18
44965: PPUSH
44966: LD_INT 2
44968: PUSH
44969: LD_INT 30
44971: PUSH
44972: LD_INT 32
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: LD_INT 30
44981: PUSH
44982: LD_INT 33
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: LIST
44993: PPUSH
44994: CALL_OW 72
44998: PUSH
44999: FOR_IN
45000: IFFALSE 45040
// begin if not GetBWeapon ( i ) then
45002: LD_VAR 0 8
45006: PPUSH
45007: CALL_OW 269
45011: NOT
45012: IFFALSE 45038
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
45014: LD_VAR 0 8
45018: PPUSH
45019: LD_VAR 0 8
45023: PPUSH
45024: LD_VAR 0 2
45028: PPUSH
45029: CALL 46288 0 2
45033: PPUSH
45034: CALL_OW 431
// end ;
45038: GO 44999
45040: POP
45041: POP
// end ; for i = 1 to personel do
45042: LD_ADDR_VAR 0 8
45046: PUSH
45047: DOUBLE
45048: LD_INT 1
45050: DEC
45051: ST_TO_ADDR
45052: LD_VAR 0 6
45056: PUSH
45057: FOR_TO
45058: IFFALSE 46122
// begin if i > 4 then
45060: LD_VAR 0 8
45064: PUSH
45065: LD_INT 4
45067: GREATER
45068: IFFALSE 45072
// break ;
45070: GO 46122
// case i of 1 :
45072: LD_VAR 0 8
45076: PUSH
45077: LD_INT 1
45079: DOUBLE
45080: EQUAL
45081: IFTRUE 45085
45083: GO 45165
45085: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
45086: LD_ADDR_VAR 0 12
45090: PUSH
45091: LD_VAR 0 18
45095: PPUSH
45096: LD_INT 22
45098: PUSH
45099: LD_VAR 0 16
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: PUSH
45108: LD_INT 58
45110: PUSH
45111: EMPTY
45112: LIST
45113: PUSH
45114: LD_INT 2
45116: PUSH
45117: LD_INT 30
45119: PUSH
45120: LD_INT 32
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 30
45129: PUSH
45130: LD_INT 4
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: LD_INT 30
45139: PUSH
45140: LD_INT 5
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: LIST
45151: LIST
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: LIST
45157: PPUSH
45158: CALL_OW 72
45162: ST_TO_ADDR
45163: GO 45387
45165: LD_INT 2
45167: DOUBLE
45168: EQUAL
45169: IFTRUE 45173
45171: GO 45235
45173: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
45174: LD_ADDR_VAR 0 12
45178: PUSH
45179: LD_VAR 0 18
45183: PPUSH
45184: LD_INT 22
45186: PUSH
45187: LD_VAR 0 16
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 2
45198: PUSH
45199: LD_INT 30
45201: PUSH
45202: LD_INT 0
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PUSH
45209: LD_INT 30
45211: PUSH
45212: LD_INT 1
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: LIST
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PPUSH
45228: CALL_OW 72
45232: ST_TO_ADDR
45233: GO 45387
45235: LD_INT 3
45237: DOUBLE
45238: EQUAL
45239: IFTRUE 45243
45241: GO 45305
45243: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
45244: LD_ADDR_VAR 0 12
45248: PUSH
45249: LD_VAR 0 18
45253: PPUSH
45254: LD_INT 22
45256: PUSH
45257: LD_VAR 0 16
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: LD_INT 2
45268: PUSH
45269: LD_INT 30
45271: PUSH
45272: LD_INT 2
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 30
45281: PUSH
45282: LD_INT 3
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: LIST
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PPUSH
45298: CALL_OW 72
45302: ST_TO_ADDR
45303: GO 45387
45305: LD_INT 4
45307: DOUBLE
45308: EQUAL
45309: IFTRUE 45313
45311: GO 45386
45313: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
45314: LD_ADDR_VAR 0 12
45318: PUSH
45319: LD_VAR 0 18
45323: PPUSH
45324: LD_INT 22
45326: PUSH
45327: LD_VAR 0 16
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: LD_INT 2
45338: PUSH
45339: LD_INT 30
45341: PUSH
45342: LD_INT 6
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: LD_INT 30
45351: PUSH
45352: LD_INT 7
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: LD_INT 30
45361: PUSH
45362: LD_INT 8
45364: PUSH
45365: EMPTY
45366: LIST
45367: LIST
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: LIST
45373: LIST
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PPUSH
45379: CALL_OW 72
45383: ST_TO_ADDR
45384: GO 45387
45386: POP
// if i = 1 then
45387: LD_VAR 0 8
45391: PUSH
45392: LD_INT 1
45394: EQUAL
45395: IFFALSE 45506
// begin tmp := [ ] ;
45397: LD_ADDR_VAR 0 19
45401: PUSH
45402: EMPTY
45403: ST_TO_ADDR
// for j in f do
45404: LD_ADDR_VAR 0 9
45408: PUSH
45409: LD_VAR 0 12
45413: PUSH
45414: FOR_IN
45415: IFFALSE 45488
// if GetBType ( j ) = b_bunker then
45417: LD_VAR 0 9
45421: PPUSH
45422: CALL_OW 266
45426: PUSH
45427: LD_INT 32
45429: EQUAL
45430: IFFALSE 45457
// tmp := Insert ( tmp , 1 , j ) else
45432: LD_ADDR_VAR 0 19
45436: PUSH
45437: LD_VAR 0 19
45441: PPUSH
45442: LD_INT 1
45444: PPUSH
45445: LD_VAR 0 9
45449: PPUSH
45450: CALL_OW 2
45454: ST_TO_ADDR
45455: GO 45486
// tmp := Insert ( tmp , tmp + 1 , j ) ;
45457: LD_ADDR_VAR 0 19
45461: PUSH
45462: LD_VAR 0 19
45466: PPUSH
45467: LD_VAR 0 19
45471: PUSH
45472: LD_INT 1
45474: PLUS
45475: PPUSH
45476: LD_VAR 0 9
45480: PPUSH
45481: CALL_OW 2
45485: ST_TO_ADDR
45486: GO 45414
45488: POP
45489: POP
// if tmp then
45490: LD_VAR 0 19
45494: IFFALSE 45506
// f := tmp ;
45496: LD_ADDR_VAR 0 12
45500: PUSH
45501: LD_VAR 0 19
45505: ST_TO_ADDR
// end ; x := personel [ i ] ;
45506: LD_ADDR_VAR 0 13
45510: PUSH
45511: LD_VAR 0 6
45515: PUSH
45516: LD_VAR 0 8
45520: ARRAY
45521: ST_TO_ADDR
// if x = - 1 then
45522: LD_VAR 0 13
45526: PUSH
45527: LD_INT 1
45529: NEG
45530: EQUAL
45531: IFFALSE 45740
// begin for j in f do
45533: LD_ADDR_VAR 0 9
45537: PUSH
45538: LD_VAR 0 12
45542: PUSH
45543: FOR_IN
45544: IFFALSE 45736
// repeat InitHc ;
45546: CALL_OW 19
// if GetBType ( j ) = b_barracks then
45550: LD_VAR 0 9
45554: PPUSH
45555: CALL_OW 266
45559: PUSH
45560: LD_INT 5
45562: EQUAL
45563: IFFALSE 45633
// begin if UnitsInside ( j ) < 3 then
45565: LD_VAR 0 9
45569: PPUSH
45570: CALL_OW 313
45574: PUSH
45575: LD_INT 3
45577: LESS
45578: IFFALSE 45614
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45580: LD_INT 0
45582: PPUSH
45583: LD_INT 5
45585: PUSH
45586: LD_INT 8
45588: PUSH
45589: LD_INT 9
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: LIST
45596: PUSH
45597: LD_VAR 0 17
45601: ARRAY
45602: PPUSH
45603: LD_VAR 0 4
45607: PPUSH
45608: CALL_OW 380
45612: GO 45631
// PrepareHuman ( false , i , skill ) ;
45614: LD_INT 0
45616: PPUSH
45617: LD_VAR 0 8
45621: PPUSH
45622: LD_VAR 0 4
45626: PPUSH
45627: CALL_OW 380
// end else
45631: GO 45650
// PrepareHuman ( false , i , skill ) ;
45633: LD_INT 0
45635: PPUSH
45636: LD_VAR 0 8
45640: PPUSH
45641: LD_VAR 0 4
45645: PPUSH
45646: CALL_OW 380
// un := CreateHuman ;
45650: LD_ADDR_VAR 0 14
45654: PUSH
45655: CALL_OW 44
45659: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45660: LD_ADDR_VAR 0 7
45664: PUSH
45665: LD_VAR 0 7
45669: PPUSH
45670: LD_INT 1
45672: PPUSH
45673: LD_VAR 0 14
45677: PPUSH
45678: CALL_OW 2
45682: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
45683: LD_VAR 0 14
45687: PPUSH
45688: LD_VAR 0 9
45692: PPUSH
45693: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
45697: LD_VAR 0 9
45701: PPUSH
45702: CALL_OW 313
45706: PUSH
45707: LD_INT 6
45709: EQUAL
45710: PUSH
45711: LD_VAR 0 9
45715: PPUSH
45716: CALL_OW 266
45720: PUSH
45721: LD_INT 32
45723: PUSH
45724: LD_INT 31
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: IN
45731: OR
45732: IFFALSE 45546
45734: GO 45543
45736: POP
45737: POP
// end else
45738: GO 46120
// for j = 1 to x do
45740: LD_ADDR_VAR 0 9
45744: PUSH
45745: DOUBLE
45746: LD_INT 1
45748: DEC
45749: ST_TO_ADDR
45750: LD_VAR 0 13
45754: PUSH
45755: FOR_TO
45756: IFFALSE 46118
// begin InitHc ;
45758: CALL_OW 19
// if not f then
45762: LD_VAR 0 12
45766: NOT
45767: IFFALSE 45856
// begin PrepareHuman ( false , i , skill ) ;
45769: LD_INT 0
45771: PPUSH
45772: LD_VAR 0 8
45776: PPUSH
45777: LD_VAR 0 4
45781: PPUSH
45782: CALL_OW 380
// un := CreateHuman ;
45786: LD_ADDR_VAR 0 14
45790: PUSH
45791: CALL_OW 44
45795: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45796: LD_ADDR_VAR 0 7
45800: PUSH
45801: LD_VAR 0 7
45805: PPUSH
45806: LD_INT 1
45808: PPUSH
45809: LD_VAR 0 14
45813: PPUSH
45814: CALL_OW 2
45818: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45819: LD_VAR 0 14
45823: PPUSH
45824: LD_VAR 0 1
45828: PPUSH
45829: CALL_OW 250
45833: PPUSH
45834: LD_VAR 0 1
45838: PPUSH
45839: CALL_OW 251
45843: PPUSH
45844: LD_INT 10
45846: PPUSH
45847: LD_INT 0
45849: PPUSH
45850: CALL_OW 50
// continue ;
45854: GO 45755
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
45856: LD_VAR 0 12
45860: PUSH
45861: LD_INT 1
45863: ARRAY
45864: PPUSH
45865: CALL_OW 313
45869: PUSH
45870: LD_VAR 0 12
45874: PUSH
45875: LD_INT 1
45877: ARRAY
45878: PPUSH
45879: CALL_OW 266
45883: PUSH
45884: LD_INT 32
45886: PUSH
45887: LD_INT 31
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: IN
45894: AND
45895: PUSH
45896: LD_VAR 0 12
45900: PUSH
45901: LD_INT 1
45903: ARRAY
45904: PPUSH
45905: CALL_OW 313
45909: PUSH
45910: LD_INT 6
45912: EQUAL
45913: OR
45914: IFFALSE 45934
// f := Delete ( f , 1 ) ;
45916: LD_ADDR_VAR 0 12
45920: PUSH
45921: LD_VAR 0 12
45925: PPUSH
45926: LD_INT 1
45928: PPUSH
45929: CALL_OW 3
45933: ST_TO_ADDR
// if not f then
45934: LD_VAR 0 12
45938: NOT
45939: IFFALSE 45957
// begin x := x + 2 ;
45941: LD_ADDR_VAR 0 13
45945: PUSH
45946: LD_VAR 0 13
45950: PUSH
45951: LD_INT 2
45953: PLUS
45954: ST_TO_ADDR
// continue ;
45955: GO 45755
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
45957: LD_VAR 0 12
45961: PUSH
45962: LD_INT 1
45964: ARRAY
45965: PPUSH
45966: CALL_OW 266
45970: PUSH
45971: LD_INT 5
45973: EQUAL
45974: IFFALSE 46048
// begin if UnitsInside ( f [ 1 ] ) < 3 then
45976: LD_VAR 0 12
45980: PUSH
45981: LD_INT 1
45983: ARRAY
45984: PPUSH
45985: CALL_OW 313
45989: PUSH
45990: LD_INT 3
45992: LESS
45993: IFFALSE 46029
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45995: LD_INT 0
45997: PPUSH
45998: LD_INT 5
46000: PUSH
46001: LD_INT 8
46003: PUSH
46004: LD_INT 9
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: LIST
46011: PUSH
46012: LD_VAR 0 17
46016: ARRAY
46017: PPUSH
46018: LD_VAR 0 4
46022: PPUSH
46023: CALL_OW 380
46027: GO 46046
// PrepareHuman ( false , i , skill ) ;
46029: LD_INT 0
46031: PPUSH
46032: LD_VAR 0 8
46036: PPUSH
46037: LD_VAR 0 4
46041: PPUSH
46042: CALL_OW 380
// end else
46046: GO 46065
// PrepareHuman ( false , i , skill ) ;
46048: LD_INT 0
46050: PPUSH
46051: LD_VAR 0 8
46055: PPUSH
46056: LD_VAR 0 4
46060: PPUSH
46061: CALL_OW 380
// un := CreateHuman ;
46065: LD_ADDR_VAR 0 14
46069: PUSH
46070: CALL_OW 44
46074: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46075: LD_ADDR_VAR 0 7
46079: PUSH
46080: LD_VAR 0 7
46084: PPUSH
46085: LD_INT 1
46087: PPUSH
46088: LD_VAR 0 14
46092: PPUSH
46093: CALL_OW 2
46097: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
46098: LD_VAR 0 14
46102: PPUSH
46103: LD_VAR 0 12
46107: PUSH
46108: LD_INT 1
46110: ARRAY
46111: PPUSH
46112: CALL_OW 52
// end ;
46116: GO 45755
46118: POP
46119: POP
// end ;
46120: GO 45057
46122: POP
46123: POP
// result := result ^ buildings ;
46124: LD_ADDR_VAR 0 7
46128: PUSH
46129: LD_VAR 0 7
46133: PUSH
46134: LD_VAR 0 18
46138: ADD
46139: ST_TO_ADDR
// end else
46140: GO 46283
// begin for i = 1 to personel do
46142: LD_ADDR_VAR 0 8
46146: PUSH
46147: DOUBLE
46148: LD_INT 1
46150: DEC
46151: ST_TO_ADDR
46152: LD_VAR 0 6
46156: PUSH
46157: FOR_TO
46158: IFFALSE 46281
// begin if i > 4 then
46160: LD_VAR 0 8
46164: PUSH
46165: LD_INT 4
46167: GREATER
46168: IFFALSE 46172
// break ;
46170: GO 46281
// x := personel [ i ] ;
46172: LD_ADDR_VAR 0 13
46176: PUSH
46177: LD_VAR 0 6
46181: PUSH
46182: LD_VAR 0 8
46186: ARRAY
46187: ST_TO_ADDR
// if x = - 1 then
46188: LD_VAR 0 13
46192: PUSH
46193: LD_INT 1
46195: NEG
46196: EQUAL
46197: IFFALSE 46201
// continue ;
46199: GO 46157
// PrepareHuman ( false , i , skill ) ;
46201: LD_INT 0
46203: PPUSH
46204: LD_VAR 0 8
46208: PPUSH
46209: LD_VAR 0 4
46213: PPUSH
46214: CALL_OW 380
// un := CreateHuman ;
46218: LD_ADDR_VAR 0 14
46222: PUSH
46223: CALL_OW 44
46227: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46228: LD_VAR 0 14
46232: PPUSH
46233: LD_VAR 0 1
46237: PPUSH
46238: CALL_OW 250
46242: PPUSH
46243: LD_VAR 0 1
46247: PPUSH
46248: CALL_OW 251
46252: PPUSH
46253: LD_INT 10
46255: PPUSH
46256: LD_INT 0
46258: PPUSH
46259: CALL_OW 50
// result := result ^ un ;
46263: LD_ADDR_VAR 0 7
46267: PUSH
46268: LD_VAR 0 7
46272: PUSH
46273: LD_VAR 0 14
46277: ADD
46278: ST_TO_ADDR
// end ;
46279: GO 46157
46281: POP
46282: POP
// end ; end ;
46283: LD_VAR 0 7
46287: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
46288: LD_INT 0
46290: PPUSH
46291: PPUSH
46292: PPUSH
46293: PPUSH
46294: PPUSH
46295: PPUSH
46296: PPUSH
46297: PPUSH
46298: PPUSH
46299: PPUSH
46300: PPUSH
46301: PPUSH
46302: PPUSH
46303: PPUSH
46304: PPUSH
46305: PPUSH
// result := false ;
46306: LD_ADDR_VAR 0 3
46310: PUSH
46311: LD_INT 0
46313: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
46314: LD_VAR 0 1
46318: NOT
46319: PUSH
46320: LD_VAR 0 1
46324: PPUSH
46325: CALL_OW 266
46329: PUSH
46330: LD_INT 32
46332: PUSH
46333: LD_INT 33
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: IN
46340: NOT
46341: OR
46342: IFFALSE 46346
// exit ;
46344: GO 47455
// nat := GetNation ( tower ) ;
46346: LD_ADDR_VAR 0 12
46350: PUSH
46351: LD_VAR 0 1
46355: PPUSH
46356: CALL_OW 248
46360: ST_TO_ADDR
// side := GetSide ( tower ) ;
46361: LD_ADDR_VAR 0 16
46365: PUSH
46366: LD_VAR 0 1
46370: PPUSH
46371: CALL_OW 255
46375: ST_TO_ADDR
// x := GetX ( tower ) ;
46376: LD_ADDR_VAR 0 10
46380: PUSH
46381: LD_VAR 0 1
46385: PPUSH
46386: CALL_OW 250
46390: ST_TO_ADDR
// y := GetY ( tower ) ;
46391: LD_ADDR_VAR 0 11
46395: PUSH
46396: LD_VAR 0 1
46400: PPUSH
46401: CALL_OW 251
46405: ST_TO_ADDR
// if not x or not y then
46406: LD_VAR 0 10
46410: NOT
46411: PUSH
46412: LD_VAR 0 11
46416: NOT
46417: OR
46418: IFFALSE 46422
// exit ;
46420: GO 47455
// weapon := 0 ;
46422: LD_ADDR_VAR 0 18
46426: PUSH
46427: LD_INT 0
46429: ST_TO_ADDR
// fac_list := [ ] ;
46430: LD_ADDR_VAR 0 17
46434: PUSH
46435: EMPTY
46436: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
46437: LD_ADDR_VAR 0 6
46441: PUSH
46442: LD_VAR 0 1
46446: PPUSH
46447: CALL_OW 274
46451: PPUSH
46452: LD_VAR 0 2
46456: PPUSH
46457: LD_INT 0
46459: PPUSH
46460: CALL 44026 0 3
46464: PPUSH
46465: LD_INT 30
46467: PUSH
46468: LD_INT 3
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: PPUSH
46475: CALL_OW 72
46479: ST_TO_ADDR
// if not factories then
46480: LD_VAR 0 6
46484: NOT
46485: IFFALSE 46489
// exit ;
46487: GO 47455
// for i in factories do
46489: LD_ADDR_VAR 0 8
46493: PUSH
46494: LD_VAR 0 6
46498: PUSH
46499: FOR_IN
46500: IFFALSE 46525
// fac_list := fac_list union AvailableWeaponList ( i ) ;
46502: LD_ADDR_VAR 0 17
46506: PUSH
46507: LD_VAR 0 17
46511: PUSH
46512: LD_VAR 0 8
46516: PPUSH
46517: CALL_OW 478
46521: UNION
46522: ST_TO_ADDR
46523: GO 46499
46525: POP
46526: POP
// if not fac_list then
46527: LD_VAR 0 17
46531: NOT
46532: IFFALSE 46536
// exit ;
46534: GO 47455
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
46536: LD_ADDR_VAR 0 5
46540: PUSH
46541: LD_INT 4
46543: PUSH
46544: LD_INT 5
46546: PUSH
46547: LD_INT 9
46549: PUSH
46550: LD_INT 10
46552: PUSH
46553: LD_INT 6
46555: PUSH
46556: LD_INT 7
46558: PUSH
46559: LD_INT 11
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 27
46573: PUSH
46574: LD_INT 28
46576: PUSH
46577: LD_INT 26
46579: PUSH
46580: LD_INT 30
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: LIST
46587: LIST
46588: PUSH
46589: LD_INT 43
46591: PUSH
46592: LD_INT 44
46594: PUSH
46595: LD_INT 46
46597: PUSH
46598: LD_INT 45
46600: PUSH
46601: LD_INT 47
46603: PUSH
46604: LD_INT 49
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: LIST
46619: PUSH
46620: LD_VAR 0 12
46624: ARRAY
46625: ST_TO_ADDR
// list := list isect fac_list ;
46626: LD_ADDR_VAR 0 5
46630: PUSH
46631: LD_VAR 0 5
46635: PUSH
46636: LD_VAR 0 17
46640: ISECT
46641: ST_TO_ADDR
// if not list then
46642: LD_VAR 0 5
46646: NOT
46647: IFFALSE 46651
// exit ;
46649: GO 47455
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
46651: LD_VAR 0 12
46655: PUSH
46656: LD_INT 3
46658: EQUAL
46659: PUSH
46660: LD_INT 49
46662: PUSH
46663: LD_VAR 0 5
46667: IN
46668: AND
46669: PUSH
46670: LD_INT 31
46672: PPUSH
46673: LD_VAR 0 16
46677: PPUSH
46678: CALL_OW 321
46682: PUSH
46683: LD_INT 2
46685: EQUAL
46686: AND
46687: IFFALSE 46747
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
46689: LD_INT 22
46691: PUSH
46692: LD_VAR 0 16
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: PUSH
46701: LD_INT 35
46703: PUSH
46704: LD_INT 49
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 91
46713: PUSH
46714: LD_VAR 0 1
46718: PUSH
46719: LD_INT 10
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: LIST
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: LIST
46731: PPUSH
46732: CALL_OW 69
46736: NOT
46737: IFFALSE 46747
// weapon := ru_time_lapser ;
46739: LD_ADDR_VAR 0 18
46743: PUSH
46744: LD_INT 49
46746: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
46747: LD_VAR 0 12
46751: PUSH
46752: LD_INT 1
46754: PUSH
46755: LD_INT 2
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: IN
46762: PUSH
46763: LD_INT 11
46765: PUSH
46766: LD_VAR 0 5
46770: IN
46771: PUSH
46772: LD_INT 30
46774: PUSH
46775: LD_VAR 0 5
46779: IN
46780: OR
46781: AND
46782: PUSH
46783: LD_INT 6
46785: PPUSH
46786: LD_VAR 0 16
46790: PPUSH
46791: CALL_OW 321
46795: PUSH
46796: LD_INT 2
46798: EQUAL
46799: AND
46800: IFFALSE 46965
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
46802: LD_INT 22
46804: PUSH
46805: LD_VAR 0 16
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 2
46816: PUSH
46817: LD_INT 35
46819: PUSH
46820: LD_INT 11
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: LD_INT 35
46829: PUSH
46830: LD_INT 30
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 91
46844: PUSH
46845: LD_VAR 0 1
46849: PUSH
46850: LD_INT 18
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: LIST
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: LIST
46862: PPUSH
46863: CALL_OW 69
46867: NOT
46868: PUSH
46869: LD_INT 22
46871: PUSH
46872: LD_VAR 0 16
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 2
46883: PUSH
46884: LD_INT 30
46886: PUSH
46887: LD_INT 32
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 30
46896: PUSH
46897: LD_INT 33
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 91
46911: PUSH
46912: LD_VAR 0 1
46916: PUSH
46917: LD_INT 12
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: LIST
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: LIST
46929: PUSH
46930: EMPTY
46931: LIST
46932: PPUSH
46933: CALL_OW 69
46937: PUSH
46938: LD_INT 2
46940: GREATER
46941: AND
46942: IFFALSE 46965
// weapon := [ us_radar , ar_radar ] [ nat ] ;
46944: LD_ADDR_VAR 0 18
46948: PUSH
46949: LD_INT 11
46951: PUSH
46952: LD_INT 30
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_VAR 0 12
46963: ARRAY
46964: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
46965: LD_VAR 0 18
46969: NOT
46970: PUSH
46971: LD_INT 40
46973: PPUSH
46974: LD_VAR 0 16
46978: PPUSH
46979: CALL_OW 321
46983: PUSH
46984: LD_INT 2
46986: EQUAL
46987: AND
46988: PUSH
46989: LD_INT 7
46991: PUSH
46992: LD_VAR 0 5
46996: IN
46997: PUSH
46998: LD_INT 28
47000: PUSH
47001: LD_VAR 0 5
47005: IN
47006: OR
47007: PUSH
47008: LD_INT 45
47010: PUSH
47011: LD_VAR 0 5
47015: IN
47016: OR
47017: AND
47018: IFFALSE 47272
// begin hex := GetHexInfo ( x , y ) ;
47020: LD_ADDR_VAR 0 4
47024: PUSH
47025: LD_VAR 0 10
47029: PPUSH
47030: LD_VAR 0 11
47034: PPUSH
47035: CALL_OW 546
47039: ST_TO_ADDR
// if hex [ 1 ] then
47040: LD_VAR 0 4
47044: PUSH
47045: LD_INT 1
47047: ARRAY
47048: IFFALSE 47052
// exit ;
47050: GO 47455
// height := hex [ 2 ] ;
47052: LD_ADDR_VAR 0 15
47056: PUSH
47057: LD_VAR 0 4
47061: PUSH
47062: LD_INT 2
47064: ARRAY
47065: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
47066: LD_ADDR_VAR 0 14
47070: PUSH
47071: LD_INT 0
47073: PUSH
47074: LD_INT 2
47076: PUSH
47077: LD_INT 3
47079: PUSH
47080: LD_INT 5
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: LIST
47087: LIST
47088: ST_TO_ADDR
// for i in tmp do
47089: LD_ADDR_VAR 0 8
47093: PUSH
47094: LD_VAR 0 14
47098: PUSH
47099: FOR_IN
47100: IFFALSE 47270
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
47102: LD_ADDR_VAR 0 9
47106: PUSH
47107: LD_VAR 0 10
47111: PPUSH
47112: LD_VAR 0 8
47116: PPUSH
47117: LD_INT 5
47119: PPUSH
47120: CALL_OW 272
47124: PUSH
47125: LD_VAR 0 11
47129: PPUSH
47130: LD_VAR 0 8
47134: PPUSH
47135: LD_INT 5
47137: PPUSH
47138: CALL_OW 273
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
47147: LD_VAR 0 9
47151: PUSH
47152: LD_INT 1
47154: ARRAY
47155: PPUSH
47156: LD_VAR 0 9
47160: PUSH
47161: LD_INT 2
47163: ARRAY
47164: PPUSH
47165: CALL_OW 488
47169: IFFALSE 47268
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
47171: LD_ADDR_VAR 0 4
47175: PUSH
47176: LD_VAR 0 9
47180: PUSH
47181: LD_INT 1
47183: ARRAY
47184: PPUSH
47185: LD_VAR 0 9
47189: PUSH
47190: LD_INT 2
47192: ARRAY
47193: PPUSH
47194: CALL_OW 546
47198: ST_TO_ADDR
// if hex [ 1 ] then
47199: LD_VAR 0 4
47203: PUSH
47204: LD_INT 1
47206: ARRAY
47207: IFFALSE 47211
// continue ;
47209: GO 47099
// h := hex [ 2 ] ;
47211: LD_ADDR_VAR 0 13
47215: PUSH
47216: LD_VAR 0 4
47220: PUSH
47221: LD_INT 2
47223: ARRAY
47224: ST_TO_ADDR
// if h + 7 < height then
47225: LD_VAR 0 13
47229: PUSH
47230: LD_INT 7
47232: PLUS
47233: PUSH
47234: LD_VAR 0 15
47238: LESS
47239: IFFALSE 47268
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
47241: LD_ADDR_VAR 0 18
47245: PUSH
47246: LD_INT 7
47248: PUSH
47249: LD_INT 28
47251: PUSH
47252: LD_INT 45
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: LIST
47259: PUSH
47260: LD_VAR 0 12
47264: ARRAY
47265: ST_TO_ADDR
// break ;
47266: GO 47270
// end ; end ; end ;
47268: GO 47099
47270: POP
47271: POP
// end ; if not weapon then
47272: LD_VAR 0 18
47276: NOT
47277: IFFALSE 47337
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
47279: LD_ADDR_VAR 0 5
47283: PUSH
47284: LD_VAR 0 5
47288: PUSH
47289: LD_INT 11
47291: PUSH
47292: LD_INT 30
47294: PUSH
47295: LD_INT 49
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: LIST
47302: DIFF
47303: ST_TO_ADDR
// if not list then
47304: LD_VAR 0 5
47308: NOT
47309: IFFALSE 47313
// exit ;
47311: GO 47455
// weapon := list [ rand ( 1 , list ) ] ;
47313: LD_ADDR_VAR 0 18
47317: PUSH
47318: LD_VAR 0 5
47322: PUSH
47323: LD_INT 1
47325: PPUSH
47326: LD_VAR 0 5
47330: PPUSH
47331: CALL_OW 12
47335: ARRAY
47336: ST_TO_ADDR
// end ; if weapon then
47337: LD_VAR 0 18
47341: IFFALSE 47455
// begin tmp := CostOfWeapon ( weapon ) ;
47343: LD_ADDR_VAR 0 14
47347: PUSH
47348: LD_VAR 0 18
47352: PPUSH
47353: CALL_OW 451
47357: ST_TO_ADDR
// j := GetBase ( tower ) ;
47358: LD_ADDR_VAR 0 9
47362: PUSH
47363: LD_VAR 0 1
47367: PPUSH
47368: CALL_OW 274
47372: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
47373: LD_VAR 0 9
47377: PPUSH
47378: LD_INT 1
47380: PPUSH
47381: CALL_OW 275
47385: PUSH
47386: LD_VAR 0 14
47390: PUSH
47391: LD_INT 1
47393: ARRAY
47394: GREATEREQUAL
47395: PUSH
47396: LD_VAR 0 9
47400: PPUSH
47401: LD_INT 2
47403: PPUSH
47404: CALL_OW 275
47408: PUSH
47409: LD_VAR 0 14
47413: PUSH
47414: LD_INT 2
47416: ARRAY
47417: GREATEREQUAL
47418: AND
47419: PUSH
47420: LD_VAR 0 9
47424: PPUSH
47425: LD_INT 3
47427: PPUSH
47428: CALL_OW 275
47432: PUSH
47433: LD_VAR 0 14
47437: PUSH
47438: LD_INT 3
47440: ARRAY
47441: GREATEREQUAL
47442: AND
47443: IFFALSE 47455
// result := weapon ;
47445: LD_ADDR_VAR 0 3
47449: PUSH
47450: LD_VAR 0 18
47454: ST_TO_ADDR
// end ; end ;
47455: LD_VAR 0 3
47459: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
47460: LD_INT 0
47462: PPUSH
47463: PPUSH
// result := true ;
47464: LD_ADDR_VAR 0 3
47468: PUSH
47469: LD_INT 1
47471: ST_TO_ADDR
// if array1 = array2 then
47472: LD_VAR 0 1
47476: PUSH
47477: LD_VAR 0 2
47481: EQUAL
47482: IFFALSE 47542
// begin for i = 1 to array1 do
47484: LD_ADDR_VAR 0 4
47488: PUSH
47489: DOUBLE
47490: LD_INT 1
47492: DEC
47493: ST_TO_ADDR
47494: LD_VAR 0 1
47498: PUSH
47499: FOR_TO
47500: IFFALSE 47538
// if array1 [ i ] <> array2 [ i ] then
47502: LD_VAR 0 1
47506: PUSH
47507: LD_VAR 0 4
47511: ARRAY
47512: PUSH
47513: LD_VAR 0 2
47517: PUSH
47518: LD_VAR 0 4
47522: ARRAY
47523: NONEQUAL
47524: IFFALSE 47536
// begin result := false ;
47526: LD_ADDR_VAR 0 3
47530: PUSH
47531: LD_INT 0
47533: ST_TO_ADDR
// break ;
47534: GO 47538
// end ;
47536: GO 47499
47538: POP
47539: POP
// end else
47540: GO 47550
// result := false ;
47542: LD_ADDR_VAR 0 3
47546: PUSH
47547: LD_INT 0
47549: ST_TO_ADDR
// end ;
47550: LD_VAR 0 3
47554: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
47555: LD_INT 0
47557: PPUSH
47558: PPUSH
// if not array1 or not array2 then
47559: LD_VAR 0 1
47563: NOT
47564: PUSH
47565: LD_VAR 0 2
47569: NOT
47570: OR
47571: IFFALSE 47575
// exit ;
47573: GO 47639
// result := true ;
47575: LD_ADDR_VAR 0 3
47579: PUSH
47580: LD_INT 1
47582: ST_TO_ADDR
// for i = 1 to array1 do
47583: LD_ADDR_VAR 0 4
47587: PUSH
47588: DOUBLE
47589: LD_INT 1
47591: DEC
47592: ST_TO_ADDR
47593: LD_VAR 0 1
47597: PUSH
47598: FOR_TO
47599: IFFALSE 47637
// if array1 [ i ] <> array2 [ i ] then
47601: LD_VAR 0 1
47605: PUSH
47606: LD_VAR 0 4
47610: ARRAY
47611: PUSH
47612: LD_VAR 0 2
47616: PUSH
47617: LD_VAR 0 4
47621: ARRAY
47622: NONEQUAL
47623: IFFALSE 47635
// begin result := false ;
47625: LD_ADDR_VAR 0 3
47629: PUSH
47630: LD_INT 0
47632: ST_TO_ADDR
// break ;
47633: GO 47637
// end ;
47635: GO 47598
47637: POP
47638: POP
// end ;
47639: LD_VAR 0 3
47643: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
47644: LD_INT 0
47646: PPUSH
47647: PPUSH
47648: PPUSH
// pom := GetBase ( fac ) ;
47649: LD_ADDR_VAR 0 5
47653: PUSH
47654: LD_VAR 0 1
47658: PPUSH
47659: CALL_OW 274
47663: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
47664: LD_ADDR_VAR 0 4
47668: PUSH
47669: LD_VAR 0 2
47673: PUSH
47674: LD_INT 1
47676: ARRAY
47677: PPUSH
47678: LD_VAR 0 2
47682: PUSH
47683: LD_INT 2
47685: ARRAY
47686: PPUSH
47687: LD_VAR 0 2
47691: PUSH
47692: LD_INT 3
47694: ARRAY
47695: PPUSH
47696: LD_VAR 0 2
47700: PUSH
47701: LD_INT 4
47703: ARRAY
47704: PPUSH
47705: CALL_OW 449
47709: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47710: LD_ADDR_VAR 0 3
47714: PUSH
47715: LD_VAR 0 5
47719: PPUSH
47720: LD_INT 1
47722: PPUSH
47723: CALL_OW 275
47727: PUSH
47728: LD_VAR 0 4
47732: PUSH
47733: LD_INT 1
47735: ARRAY
47736: GREATEREQUAL
47737: PUSH
47738: LD_VAR 0 5
47742: PPUSH
47743: LD_INT 2
47745: PPUSH
47746: CALL_OW 275
47750: PUSH
47751: LD_VAR 0 4
47755: PUSH
47756: LD_INT 2
47758: ARRAY
47759: GREATEREQUAL
47760: AND
47761: PUSH
47762: LD_VAR 0 5
47766: PPUSH
47767: LD_INT 3
47769: PPUSH
47770: CALL_OW 275
47774: PUSH
47775: LD_VAR 0 4
47779: PUSH
47780: LD_INT 3
47782: ARRAY
47783: GREATEREQUAL
47784: AND
47785: ST_TO_ADDR
// end ;
47786: LD_VAR 0 3
47790: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
47791: LD_INT 0
47793: PPUSH
47794: PPUSH
47795: PPUSH
47796: PPUSH
// pom := GetBase ( building ) ;
47797: LD_ADDR_VAR 0 3
47801: PUSH
47802: LD_VAR 0 1
47806: PPUSH
47807: CALL_OW 274
47811: ST_TO_ADDR
// if not pom then
47812: LD_VAR 0 3
47816: NOT
47817: IFFALSE 47821
// exit ;
47819: GO 47991
// btype := GetBType ( building ) ;
47821: LD_ADDR_VAR 0 5
47825: PUSH
47826: LD_VAR 0 1
47830: PPUSH
47831: CALL_OW 266
47835: ST_TO_ADDR
// if btype = b_armoury then
47836: LD_VAR 0 5
47840: PUSH
47841: LD_INT 4
47843: EQUAL
47844: IFFALSE 47854
// btype := b_barracks ;
47846: LD_ADDR_VAR 0 5
47850: PUSH
47851: LD_INT 5
47853: ST_TO_ADDR
// if btype = b_depot then
47854: LD_VAR 0 5
47858: PUSH
47859: LD_INT 0
47861: EQUAL
47862: IFFALSE 47872
// btype := b_warehouse ;
47864: LD_ADDR_VAR 0 5
47868: PUSH
47869: LD_INT 1
47871: ST_TO_ADDR
// if btype = b_workshop then
47872: LD_VAR 0 5
47876: PUSH
47877: LD_INT 2
47879: EQUAL
47880: IFFALSE 47890
// btype := b_factory ;
47882: LD_ADDR_VAR 0 5
47886: PUSH
47887: LD_INT 3
47889: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47890: LD_ADDR_VAR 0 4
47894: PUSH
47895: LD_VAR 0 5
47899: PPUSH
47900: LD_VAR 0 1
47904: PPUSH
47905: CALL_OW 248
47909: PPUSH
47910: CALL_OW 450
47914: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47915: LD_ADDR_VAR 0 2
47919: PUSH
47920: LD_VAR 0 3
47924: PPUSH
47925: LD_INT 1
47927: PPUSH
47928: CALL_OW 275
47932: PUSH
47933: LD_VAR 0 4
47937: PUSH
47938: LD_INT 1
47940: ARRAY
47941: GREATEREQUAL
47942: PUSH
47943: LD_VAR 0 3
47947: PPUSH
47948: LD_INT 2
47950: PPUSH
47951: CALL_OW 275
47955: PUSH
47956: LD_VAR 0 4
47960: PUSH
47961: LD_INT 2
47963: ARRAY
47964: GREATEREQUAL
47965: AND
47966: PUSH
47967: LD_VAR 0 3
47971: PPUSH
47972: LD_INT 3
47974: PPUSH
47975: CALL_OW 275
47979: PUSH
47980: LD_VAR 0 4
47984: PUSH
47985: LD_INT 3
47987: ARRAY
47988: GREATEREQUAL
47989: AND
47990: ST_TO_ADDR
// end ;
47991: LD_VAR 0 2
47995: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
47996: LD_INT 0
47998: PPUSH
47999: PPUSH
48000: PPUSH
// pom := GetBase ( building ) ;
48001: LD_ADDR_VAR 0 4
48005: PUSH
48006: LD_VAR 0 1
48010: PPUSH
48011: CALL_OW 274
48015: ST_TO_ADDR
// if not pom then
48016: LD_VAR 0 4
48020: NOT
48021: IFFALSE 48025
// exit ;
48023: GO 48126
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48025: LD_ADDR_VAR 0 5
48029: PUSH
48030: LD_VAR 0 2
48034: PPUSH
48035: LD_VAR 0 1
48039: PPUSH
48040: CALL_OW 248
48044: PPUSH
48045: CALL_OW 450
48049: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48050: LD_ADDR_VAR 0 3
48054: PUSH
48055: LD_VAR 0 4
48059: PPUSH
48060: LD_INT 1
48062: PPUSH
48063: CALL_OW 275
48067: PUSH
48068: LD_VAR 0 5
48072: PUSH
48073: LD_INT 1
48075: ARRAY
48076: GREATEREQUAL
48077: PUSH
48078: LD_VAR 0 4
48082: PPUSH
48083: LD_INT 2
48085: PPUSH
48086: CALL_OW 275
48090: PUSH
48091: LD_VAR 0 5
48095: PUSH
48096: LD_INT 2
48098: ARRAY
48099: GREATEREQUAL
48100: AND
48101: PUSH
48102: LD_VAR 0 4
48106: PPUSH
48107: LD_INT 3
48109: PPUSH
48110: CALL_OW 275
48114: PUSH
48115: LD_VAR 0 5
48119: PUSH
48120: LD_INT 3
48122: ARRAY
48123: GREATEREQUAL
48124: AND
48125: ST_TO_ADDR
// end ;
48126: LD_VAR 0 3
48130: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
48131: LD_INT 0
48133: PPUSH
48134: PPUSH
48135: PPUSH
48136: PPUSH
48137: PPUSH
48138: PPUSH
48139: PPUSH
48140: PPUSH
48141: PPUSH
48142: PPUSH
48143: PPUSH
// result := false ;
48144: LD_ADDR_VAR 0 8
48148: PUSH
48149: LD_INT 0
48151: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
48152: LD_VAR 0 5
48156: NOT
48157: PUSH
48158: LD_VAR 0 1
48162: NOT
48163: OR
48164: PUSH
48165: LD_VAR 0 2
48169: NOT
48170: OR
48171: PUSH
48172: LD_VAR 0 3
48176: NOT
48177: OR
48178: IFFALSE 48182
// exit ;
48180: GO 48996
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
48182: LD_ADDR_VAR 0 14
48186: PUSH
48187: LD_VAR 0 1
48191: PPUSH
48192: LD_VAR 0 2
48196: PPUSH
48197: LD_VAR 0 3
48201: PPUSH
48202: LD_VAR 0 4
48206: PPUSH
48207: LD_VAR 0 5
48211: PUSH
48212: LD_INT 1
48214: ARRAY
48215: PPUSH
48216: CALL_OW 248
48220: PPUSH
48221: LD_INT 0
48223: PPUSH
48224: CALL 50233 0 6
48228: ST_TO_ADDR
// if not hexes then
48229: LD_VAR 0 14
48233: NOT
48234: IFFALSE 48238
// exit ;
48236: GO 48996
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
48238: LD_ADDR_VAR 0 17
48242: PUSH
48243: LD_VAR 0 5
48247: PPUSH
48248: LD_INT 22
48250: PUSH
48251: LD_VAR 0 13
48255: PPUSH
48256: CALL_OW 255
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: PUSH
48265: LD_INT 2
48267: PUSH
48268: LD_INT 30
48270: PUSH
48271: LD_INT 0
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 30
48280: PUSH
48281: LD_INT 1
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: LIST
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: PPUSH
48297: CALL_OW 72
48301: ST_TO_ADDR
// for i = 1 to hexes do
48302: LD_ADDR_VAR 0 9
48306: PUSH
48307: DOUBLE
48308: LD_INT 1
48310: DEC
48311: ST_TO_ADDR
48312: LD_VAR 0 14
48316: PUSH
48317: FOR_TO
48318: IFFALSE 48994
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48320: LD_ADDR_VAR 0 13
48324: PUSH
48325: LD_VAR 0 14
48329: PUSH
48330: LD_VAR 0 9
48334: ARRAY
48335: PUSH
48336: LD_INT 1
48338: ARRAY
48339: PPUSH
48340: LD_VAR 0 14
48344: PUSH
48345: LD_VAR 0 9
48349: ARRAY
48350: PUSH
48351: LD_INT 2
48353: ARRAY
48354: PPUSH
48355: CALL_OW 428
48359: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
48360: LD_VAR 0 14
48364: PUSH
48365: LD_VAR 0 9
48369: ARRAY
48370: PUSH
48371: LD_INT 1
48373: ARRAY
48374: PPUSH
48375: LD_VAR 0 14
48379: PUSH
48380: LD_VAR 0 9
48384: ARRAY
48385: PUSH
48386: LD_INT 2
48388: ARRAY
48389: PPUSH
48390: CALL_OW 351
48394: PUSH
48395: LD_VAR 0 14
48399: PUSH
48400: LD_VAR 0 9
48404: ARRAY
48405: PUSH
48406: LD_INT 1
48408: ARRAY
48409: PPUSH
48410: LD_VAR 0 14
48414: PUSH
48415: LD_VAR 0 9
48419: ARRAY
48420: PUSH
48421: LD_INT 2
48423: ARRAY
48424: PPUSH
48425: CALL_OW 488
48429: NOT
48430: OR
48431: PUSH
48432: LD_VAR 0 13
48436: PPUSH
48437: CALL_OW 247
48441: PUSH
48442: LD_INT 3
48444: EQUAL
48445: OR
48446: IFFALSE 48452
// exit ;
48448: POP
48449: POP
48450: GO 48996
// if not tmp then
48452: LD_VAR 0 13
48456: NOT
48457: IFFALSE 48461
// continue ;
48459: GO 48317
// result := true ;
48461: LD_ADDR_VAR 0 8
48465: PUSH
48466: LD_INT 1
48468: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
48469: LD_VAR 0 6
48473: PUSH
48474: LD_VAR 0 13
48478: PPUSH
48479: CALL_OW 247
48483: PUSH
48484: LD_INT 2
48486: EQUAL
48487: AND
48488: PUSH
48489: LD_VAR 0 13
48493: PPUSH
48494: CALL_OW 263
48498: PUSH
48499: LD_INT 1
48501: EQUAL
48502: AND
48503: IFFALSE 48667
// begin if IsDrivenBy ( tmp ) then
48505: LD_VAR 0 13
48509: PPUSH
48510: CALL_OW 311
48514: IFFALSE 48518
// continue ;
48516: GO 48317
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
48518: LD_VAR 0 6
48522: PPUSH
48523: LD_INT 3
48525: PUSH
48526: LD_INT 60
48528: PUSH
48529: EMPTY
48530: LIST
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: PUSH
48536: LD_INT 3
48538: PUSH
48539: LD_INT 55
48541: PUSH
48542: EMPTY
48543: LIST
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PPUSH
48553: CALL_OW 72
48557: IFFALSE 48665
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
48559: LD_ADDR_VAR 0 18
48563: PUSH
48564: LD_VAR 0 6
48568: PPUSH
48569: LD_INT 3
48571: PUSH
48572: LD_INT 60
48574: PUSH
48575: EMPTY
48576: LIST
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 3
48584: PUSH
48585: LD_INT 55
48587: PUSH
48588: EMPTY
48589: LIST
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PPUSH
48599: CALL_OW 72
48603: PUSH
48604: LD_INT 1
48606: ARRAY
48607: ST_TO_ADDR
// if IsInUnit ( driver ) then
48608: LD_VAR 0 18
48612: PPUSH
48613: CALL_OW 310
48617: IFFALSE 48628
// ComExit ( driver ) ;
48619: LD_VAR 0 18
48623: PPUSH
48624: CALL 73417 0 1
// AddComEnterUnit ( driver , tmp ) ;
48628: LD_VAR 0 18
48632: PPUSH
48633: LD_VAR 0 13
48637: PPUSH
48638: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
48642: LD_VAR 0 18
48646: PPUSH
48647: LD_VAR 0 7
48651: PPUSH
48652: CALL_OW 173
// AddComExitVehicle ( driver ) ;
48656: LD_VAR 0 18
48660: PPUSH
48661: CALL_OW 181
// end ; continue ;
48665: GO 48317
// end ; if not cleaners or not tmp in cleaners then
48667: LD_VAR 0 6
48671: NOT
48672: PUSH
48673: LD_VAR 0 13
48677: PUSH
48678: LD_VAR 0 6
48682: IN
48683: NOT
48684: OR
48685: IFFALSE 48992
// begin if dep then
48687: LD_VAR 0 17
48691: IFFALSE 48827
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
48693: LD_ADDR_VAR 0 16
48697: PUSH
48698: LD_VAR 0 17
48702: PUSH
48703: LD_INT 1
48705: ARRAY
48706: PPUSH
48707: CALL_OW 250
48711: PPUSH
48712: LD_VAR 0 17
48716: PUSH
48717: LD_INT 1
48719: ARRAY
48720: PPUSH
48721: CALL_OW 254
48725: PPUSH
48726: LD_INT 5
48728: PPUSH
48729: CALL_OW 272
48733: PUSH
48734: LD_VAR 0 17
48738: PUSH
48739: LD_INT 1
48741: ARRAY
48742: PPUSH
48743: CALL_OW 251
48747: PPUSH
48748: LD_VAR 0 17
48752: PUSH
48753: LD_INT 1
48755: ARRAY
48756: PPUSH
48757: CALL_OW 254
48761: PPUSH
48762: LD_INT 5
48764: PPUSH
48765: CALL_OW 273
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
48774: LD_VAR 0 16
48778: PUSH
48779: LD_INT 1
48781: ARRAY
48782: PPUSH
48783: LD_VAR 0 16
48787: PUSH
48788: LD_INT 2
48790: ARRAY
48791: PPUSH
48792: CALL_OW 488
48796: IFFALSE 48827
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
48798: LD_VAR 0 13
48802: PPUSH
48803: LD_VAR 0 16
48807: PUSH
48808: LD_INT 1
48810: ARRAY
48811: PPUSH
48812: LD_VAR 0 16
48816: PUSH
48817: LD_INT 2
48819: ARRAY
48820: PPUSH
48821: CALL_OW 111
// continue ;
48825: GO 48317
// end ; end ; r := GetDir ( tmp ) ;
48827: LD_ADDR_VAR 0 15
48831: PUSH
48832: LD_VAR 0 13
48836: PPUSH
48837: CALL_OW 254
48841: ST_TO_ADDR
// if r = 5 then
48842: LD_VAR 0 15
48846: PUSH
48847: LD_INT 5
48849: EQUAL
48850: IFFALSE 48860
// r := 0 ;
48852: LD_ADDR_VAR 0 15
48856: PUSH
48857: LD_INT 0
48859: ST_TO_ADDR
// for j = r to 5 do
48860: LD_ADDR_VAR 0 10
48864: PUSH
48865: DOUBLE
48866: LD_VAR 0 15
48870: DEC
48871: ST_TO_ADDR
48872: LD_INT 5
48874: PUSH
48875: FOR_TO
48876: IFFALSE 48990
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
48878: LD_ADDR_VAR 0 11
48882: PUSH
48883: LD_VAR 0 13
48887: PPUSH
48888: CALL_OW 250
48892: PPUSH
48893: LD_VAR 0 10
48897: PPUSH
48898: LD_INT 2
48900: PPUSH
48901: CALL_OW 272
48905: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
48906: LD_ADDR_VAR 0 12
48910: PUSH
48911: LD_VAR 0 13
48915: PPUSH
48916: CALL_OW 251
48920: PPUSH
48921: LD_VAR 0 10
48925: PPUSH
48926: LD_INT 2
48928: PPUSH
48929: CALL_OW 273
48933: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
48934: LD_VAR 0 11
48938: PPUSH
48939: LD_VAR 0 12
48943: PPUSH
48944: CALL_OW 488
48948: PUSH
48949: LD_VAR 0 11
48953: PPUSH
48954: LD_VAR 0 12
48958: PPUSH
48959: CALL_OW 428
48963: NOT
48964: AND
48965: IFFALSE 48988
// begin ComMoveXY ( tmp , _x , _y ) ;
48967: LD_VAR 0 13
48971: PPUSH
48972: LD_VAR 0 11
48976: PPUSH
48977: LD_VAR 0 12
48981: PPUSH
48982: CALL_OW 111
// break ;
48986: GO 48990
// end ; end ;
48988: GO 48875
48990: POP
48991: POP
// end ; end ;
48992: GO 48317
48994: POP
48995: POP
// end ;
48996: LD_VAR 0 8
49000: RET
// export function BuildingTechInvented ( side , btype ) ; begin
49001: LD_INT 0
49003: PPUSH
// result := true ;
49004: LD_ADDR_VAR 0 3
49008: PUSH
49009: LD_INT 1
49011: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
49012: LD_VAR 0 2
49016: PUSH
49017: LD_INT 24
49019: DOUBLE
49020: EQUAL
49021: IFTRUE 49031
49023: LD_INT 33
49025: DOUBLE
49026: EQUAL
49027: IFTRUE 49031
49029: GO 49056
49031: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
49032: LD_ADDR_VAR 0 3
49036: PUSH
49037: LD_INT 32
49039: PPUSH
49040: LD_VAR 0 1
49044: PPUSH
49045: CALL_OW 321
49049: PUSH
49050: LD_INT 2
49052: EQUAL
49053: ST_TO_ADDR
49054: GO 49376
49056: LD_INT 20
49058: DOUBLE
49059: EQUAL
49060: IFTRUE 49064
49062: GO 49089
49064: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
49065: LD_ADDR_VAR 0 3
49069: PUSH
49070: LD_INT 6
49072: PPUSH
49073: LD_VAR 0 1
49077: PPUSH
49078: CALL_OW 321
49082: PUSH
49083: LD_INT 2
49085: EQUAL
49086: ST_TO_ADDR
49087: GO 49376
49089: LD_INT 22
49091: DOUBLE
49092: EQUAL
49093: IFTRUE 49103
49095: LD_INT 36
49097: DOUBLE
49098: EQUAL
49099: IFTRUE 49103
49101: GO 49128
49103: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
49104: LD_ADDR_VAR 0 3
49108: PUSH
49109: LD_INT 15
49111: PPUSH
49112: LD_VAR 0 1
49116: PPUSH
49117: CALL_OW 321
49121: PUSH
49122: LD_INT 2
49124: EQUAL
49125: ST_TO_ADDR
49126: GO 49376
49128: LD_INT 30
49130: DOUBLE
49131: EQUAL
49132: IFTRUE 49136
49134: GO 49161
49136: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
49137: LD_ADDR_VAR 0 3
49141: PUSH
49142: LD_INT 20
49144: PPUSH
49145: LD_VAR 0 1
49149: PPUSH
49150: CALL_OW 321
49154: PUSH
49155: LD_INT 2
49157: EQUAL
49158: ST_TO_ADDR
49159: GO 49376
49161: LD_INT 28
49163: DOUBLE
49164: EQUAL
49165: IFTRUE 49175
49167: LD_INT 21
49169: DOUBLE
49170: EQUAL
49171: IFTRUE 49175
49173: GO 49200
49175: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
49176: LD_ADDR_VAR 0 3
49180: PUSH
49181: LD_INT 21
49183: PPUSH
49184: LD_VAR 0 1
49188: PPUSH
49189: CALL_OW 321
49193: PUSH
49194: LD_INT 2
49196: EQUAL
49197: ST_TO_ADDR
49198: GO 49376
49200: LD_INT 16
49202: DOUBLE
49203: EQUAL
49204: IFTRUE 49208
49206: GO 49235
49208: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
49209: LD_ADDR_VAR 0 3
49213: PUSH
49214: LD_EXP 71
49218: PPUSH
49219: LD_VAR 0 1
49223: PPUSH
49224: CALL_OW 321
49228: PUSH
49229: LD_INT 2
49231: EQUAL
49232: ST_TO_ADDR
49233: GO 49376
49235: LD_INT 19
49237: DOUBLE
49238: EQUAL
49239: IFTRUE 49249
49241: LD_INT 23
49243: DOUBLE
49244: EQUAL
49245: IFTRUE 49249
49247: GO 49276
49249: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
49250: LD_ADDR_VAR 0 3
49254: PUSH
49255: LD_EXP 70
49259: PPUSH
49260: LD_VAR 0 1
49264: PPUSH
49265: CALL_OW 321
49269: PUSH
49270: LD_INT 2
49272: EQUAL
49273: ST_TO_ADDR
49274: GO 49376
49276: LD_INT 17
49278: DOUBLE
49279: EQUAL
49280: IFTRUE 49284
49282: GO 49309
49284: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
49285: LD_ADDR_VAR 0 3
49289: PUSH
49290: LD_INT 39
49292: PPUSH
49293: LD_VAR 0 1
49297: PPUSH
49298: CALL_OW 321
49302: PUSH
49303: LD_INT 2
49305: EQUAL
49306: ST_TO_ADDR
49307: GO 49376
49309: LD_INT 18
49311: DOUBLE
49312: EQUAL
49313: IFTRUE 49317
49315: GO 49342
49317: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
49318: LD_ADDR_VAR 0 3
49322: PUSH
49323: LD_INT 40
49325: PPUSH
49326: LD_VAR 0 1
49330: PPUSH
49331: CALL_OW 321
49335: PUSH
49336: LD_INT 2
49338: EQUAL
49339: ST_TO_ADDR
49340: GO 49376
49342: LD_INT 27
49344: DOUBLE
49345: EQUAL
49346: IFTRUE 49350
49348: GO 49375
49350: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
49351: LD_ADDR_VAR 0 3
49355: PUSH
49356: LD_INT 35
49358: PPUSH
49359: LD_VAR 0 1
49363: PPUSH
49364: CALL_OW 321
49368: PUSH
49369: LD_INT 2
49371: EQUAL
49372: ST_TO_ADDR
49373: GO 49376
49375: POP
// end ;
49376: LD_VAR 0 3
49380: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
49381: LD_INT 0
49383: PPUSH
49384: PPUSH
49385: PPUSH
49386: PPUSH
49387: PPUSH
49388: PPUSH
49389: PPUSH
49390: PPUSH
49391: PPUSH
49392: PPUSH
49393: PPUSH
// result := false ;
49394: LD_ADDR_VAR 0 6
49398: PUSH
49399: LD_INT 0
49401: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
49402: LD_VAR 0 1
49406: NOT
49407: PUSH
49408: LD_VAR 0 1
49412: PPUSH
49413: CALL_OW 266
49417: PUSH
49418: LD_INT 0
49420: PUSH
49421: LD_INT 1
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: IN
49428: NOT
49429: OR
49430: PUSH
49431: LD_VAR 0 2
49435: NOT
49436: OR
49437: PUSH
49438: LD_VAR 0 5
49442: PUSH
49443: LD_INT 0
49445: PUSH
49446: LD_INT 1
49448: PUSH
49449: LD_INT 2
49451: PUSH
49452: LD_INT 3
49454: PUSH
49455: LD_INT 4
49457: PUSH
49458: LD_INT 5
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: LIST
49465: LIST
49466: LIST
49467: LIST
49468: IN
49469: NOT
49470: OR
49471: PUSH
49472: LD_VAR 0 3
49476: PPUSH
49477: LD_VAR 0 4
49481: PPUSH
49482: CALL_OW 488
49486: NOT
49487: OR
49488: IFFALSE 49492
// exit ;
49490: GO 50228
// side := GetSide ( depot ) ;
49492: LD_ADDR_VAR 0 9
49496: PUSH
49497: LD_VAR 0 1
49501: PPUSH
49502: CALL_OW 255
49506: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
49507: LD_VAR 0 9
49511: PPUSH
49512: LD_VAR 0 2
49516: PPUSH
49517: CALL 49001 0 2
49521: NOT
49522: IFFALSE 49526
// exit ;
49524: GO 50228
// pom := GetBase ( depot ) ;
49526: LD_ADDR_VAR 0 10
49530: PUSH
49531: LD_VAR 0 1
49535: PPUSH
49536: CALL_OW 274
49540: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
49541: LD_ADDR_VAR 0 11
49545: PUSH
49546: LD_VAR 0 2
49550: PPUSH
49551: LD_VAR 0 1
49555: PPUSH
49556: CALL_OW 248
49560: PPUSH
49561: CALL_OW 450
49565: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
49566: LD_VAR 0 10
49570: PPUSH
49571: LD_INT 1
49573: PPUSH
49574: CALL_OW 275
49578: PUSH
49579: LD_VAR 0 11
49583: PUSH
49584: LD_INT 1
49586: ARRAY
49587: GREATEREQUAL
49588: PUSH
49589: LD_VAR 0 10
49593: PPUSH
49594: LD_INT 2
49596: PPUSH
49597: CALL_OW 275
49601: PUSH
49602: LD_VAR 0 11
49606: PUSH
49607: LD_INT 2
49609: ARRAY
49610: GREATEREQUAL
49611: AND
49612: PUSH
49613: LD_VAR 0 10
49617: PPUSH
49618: LD_INT 3
49620: PPUSH
49621: CALL_OW 275
49625: PUSH
49626: LD_VAR 0 11
49630: PUSH
49631: LD_INT 3
49633: ARRAY
49634: GREATEREQUAL
49635: AND
49636: NOT
49637: IFFALSE 49641
// exit ;
49639: GO 50228
// if GetBType ( depot ) = b_depot then
49641: LD_VAR 0 1
49645: PPUSH
49646: CALL_OW 266
49650: PUSH
49651: LD_INT 0
49653: EQUAL
49654: IFFALSE 49666
// dist := 28 else
49656: LD_ADDR_VAR 0 14
49660: PUSH
49661: LD_INT 28
49663: ST_TO_ADDR
49664: GO 49674
// dist := 36 ;
49666: LD_ADDR_VAR 0 14
49670: PUSH
49671: LD_INT 36
49673: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
49674: LD_VAR 0 1
49678: PPUSH
49679: LD_VAR 0 3
49683: PPUSH
49684: LD_VAR 0 4
49688: PPUSH
49689: CALL_OW 297
49693: PUSH
49694: LD_VAR 0 14
49698: GREATER
49699: IFFALSE 49703
// exit ;
49701: GO 50228
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
49703: LD_ADDR_VAR 0 12
49707: PUSH
49708: LD_VAR 0 2
49712: PPUSH
49713: LD_VAR 0 3
49717: PPUSH
49718: LD_VAR 0 4
49722: PPUSH
49723: LD_VAR 0 5
49727: PPUSH
49728: LD_VAR 0 1
49732: PPUSH
49733: CALL_OW 248
49737: PPUSH
49738: LD_INT 0
49740: PPUSH
49741: CALL 50233 0 6
49745: ST_TO_ADDR
// if not hexes then
49746: LD_VAR 0 12
49750: NOT
49751: IFFALSE 49755
// exit ;
49753: GO 50228
// hex := GetHexInfo ( x , y ) ;
49755: LD_ADDR_VAR 0 15
49759: PUSH
49760: LD_VAR 0 3
49764: PPUSH
49765: LD_VAR 0 4
49769: PPUSH
49770: CALL_OW 546
49774: ST_TO_ADDR
// if hex [ 1 ] then
49775: LD_VAR 0 15
49779: PUSH
49780: LD_INT 1
49782: ARRAY
49783: IFFALSE 49787
// exit ;
49785: GO 50228
// height := hex [ 2 ] ;
49787: LD_ADDR_VAR 0 13
49791: PUSH
49792: LD_VAR 0 15
49796: PUSH
49797: LD_INT 2
49799: ARRAY
49800: ST_TO_ADDR
// for i = 1 to hexes do
49801: LD_ADDR_VAR 0 7
49805: PUSH
49806: DOUBLE
49807: LD_INT 1
49809: DEC
49810: ST_TO_ADDR
49811: LD_VAR 0 12
49815: PUSH
49816: FOR_TO
49817: IFFALSE 50147
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
49819: LD_VAR 0 12
49823: PUSH
49824: LD_VAR 0 7
49828: ARRAY
49829: PUSH
49830: LD_INT 1
49832: ARRAY
49833: PPUSH
49834: LD_VAR 0 12
49838: PUSH
49839: LD_VAR 0 7
49843: ARRAY
49844: PUSH
49845: LD_INT 2
49847: ARRAY
49848: PPUSH
49849: CALL_OW 488
49853: NOT
49854: PUSH
49855: LD_VAR 0 12
49859: PUSH
49860: LD_VAR 0 7
49864: ARRAY
49865: PUSH
49866: LD_INT 1
49868: ARRAY
49869: PPUSH
49870: LD_VAR 0 12
49874: PUSH
49875: LD_VAR 0 7
49879: ARRAY
49880: PUSH
49881: LD_INT 2
49883: ARRAY
49884: PPUSH
49885: CALL_OW 428
49889: PUSH
49890: LD_INT 0
49892: GREATER
49893: OR
49894: PUSH
49895: LD_VAR 0 12
49899: PUSH
49900: LD_VAR 0 7
49904: ARRAY
49905: PUSH
49906: LD_INT 1
49908: ARRAY
49909: PPUSH
49910: LD_VAR 0 12
49914: PUSH
49915: LD_VAR 0 7
49919: ARRAY
49920: PUSH
49921: LD_INT 2
49923: ARRAY
49924: PPUSH
49925: CALL_OW 351
49929: OR
49930: IFFALSE 49936
// exit ;
49932: POP
49933: POP
49934: GO 50228
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49936: LD_ADDR_VAR 0 8
49940: PUSH
49941: LD_VAR 0 12
49945: PUSH
49946: LD_VAR 0 7
49950: ARRAY
49951: PUSH
49952: LD_INT 1
49954: ARRAY
49955: PPUSH
49956: LD_VAR 0 12
49960: PUSH
49961: LD_VAR 0 7
49965: ARRAY
49966: PUSH
49967: LD_INT 2
49969: ARRAY
49970: PPUSH
49971: CALL_OW 546
49975: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
49976: LD_VAR 0 8
49980: PUSH
49981: LD_INT 1
49983: ARRAY
49984: PUSH
49985: LD_VAR 0 8
49989: PUSH
49990: LD_INT 2
49992: ARRAY
49993: PUSH
49994: LD_VAR 0 13
49998: PUSH
49999: LD_INT 2
50001: PLUS
50002: GREATER
50003: OR
50004: PUSH
50005: LD_VAR 0 8
50009: PUSH
50010: LD_INT 2
50012: ARRAY
50013: PUSH
50014: LD_VAR 0 13
50018: PUSH
50019: LD_INT 2
50021: MINUS
50022: LESS
50023: OR
50024: PUSH
50025: LD_VAR 0 8
50029: PUSH
50030: LD_INT 3
50032: ARRAY
50033: PUSH
50034: LD_INT 0
50036: PUSH
50037: LD_INT 8
50039: PUSH
50040: LD_INT 9
50042: PUSH
50043: LD_INT 10
50045: PUSH
50046: LD_INT 11
50048: PUSH
50049: LD_INT 12
50051: PUSH
50052: LD_INT 13
50054: PUSH
50055: LD_INT 16
50057: PUSH
50058: LD_INT 17
50060: PUSH
50061: LD_INT 18
50063: PUSH
50064: LD_INT 19
50066: PUSH
50067: LD_INT 20
50069: PUSH
50070: LD_INT 21
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: LIST
50077: LIST
50078: LIST
50079: LIST
50080: LIST
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: IN
50088: NOT
50089: OR
50090: PUSH
50091: LD_VAR 0 8
50095: PUSH
50096: LD_INT 5
50098: ARRAY
50099: NOT
50100: OR
50101: PUSH
50102: LD_VAR 0 8
50106: PUSH
50107: LD_INT 6
50109: ARRAY
50110: PUSH
50111: LD_INT 1
50113: PUSH
50114: LD_INT 2
50116: PUSH
50117: LD_INT 7
50119: PUSH
50120: LD_INT 9
50122: PUSH
50123: LD_INT 10
50125: PUSH
50126: LD_INT 11
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: LIST
50136: IN
50137: NOT
50138: OR
50139: IFFALSE 50145
// exit ;
50141: POP
50142: POP
50143: GO 50228
// end ;
50145: GO 49816
50147: POP
50148: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
50149: LD_VAR 0 9
50153: PPUSH
50154: LD_VAR 0 3
50158: PPUSH
50159: LD_VAR 0 4
50163: PPUSH
50164: LD_INT 20
50166: PPUSH
50167: CALL 42174 0 4
50171: PUSH
50172: LD_INT 4
50174: ARRAY
50175: IFFALSE 50179
// exit ;
50177: GO 50228
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
50179: LD_VAR 0 2
50183: PUSH
50184: LD_INT 29
50186: PUSH
50187: LD_INT 30
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: IN
50194: PUSH
50195: LD_VAR 0 3
50199: PPUSH
50200: LD_VAR 0 4
50204: PPUSH
50205: LD_VAR 0 9
50209: PPUSH
50210: CALL_OW 440
50214: NOT
50215: AND
50216: IFFALSE 50220
// exit ;
50218: GO 50228
// result := true ;
50220: LD_ADDR_VAR 0 6
50224: PUSH
50225: LD_INT 1
50227: ST_TO_ADDR
// end ;
50228: LD_VAR 0 6
50232: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
50233: LD_INT 0
50235: PPUSH
50236: PPUSH
50237: PPUSH
50238: PPUSH
50239: PPUSH
50240: PPUSH
50241: PPUSH
50242: PPUSH
50243: PPUSH
50244: PPUSH
50245: PPUSH
50246: PPUSH
50247: PPUSH
50248: PPUSH
50249: PPUSH
50250: PPUSH
50251: PPUSH
50252: PPUSH
50253: PPUSH
50254: PPUSH
50255: PPUSH
50256: PPUSH
50257: PPUSH
50258: PPUSH
50259: PPUSH
50260: PPUSH
50261: PPUSH
50262: PPUSH
50263: PPUSH
50264: PPUSH
50265: PPUSH
50266: PPUSH
50267: PPUSH
50268: PPUSH
50269: PPUSH
50270: PPUSH
50271: PPUSH
50272: PPUSH
50273: PPUSH
50274: PPUSH
50275: PPUSH
50276: PPUSH
50277: PPUSH
50278: PPUSH
50279: PPUSH
50280: PPUSH
50281: PPUSH
50282: PPUSH
50283: PPUSH
50284: PPUSH
50285: PPUSH
50286: PPUSH
50287: PPUSH
50288: PPUSH
50289: PPUSH
50290: PPUSH
50291: PPUSH
50292: PPUSH
// result = [ ] ;
50293: LD_ADDR_VAR 0 7
50297: PUSH
50298: EMPTY
50299: ST_TO_ADDR
// temp_list = [ ] ;
50300: LD_ADDR_VAR 0 9
50304: PUSH
50305: EMPTY
50306: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
50307: LD_VAR 0 4
50311: PUSH
50312: LD_INT 0
50314: PUSH
50315: LD_INT 1
50317: PUSH
50318: LD_INT 2
50320: PUSH
50321: LD_INT 3
50323: PUSH
50324: LD_INT 4
50326: PUSH
50327: LD_INT 5
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: IN
50338: NOT
50339: PUSH
50340: LD_VAR 0 1
50344: PUSH
50345: LD_INT 0
50347: PUSH
50348: LD_INT 1
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: IN
50355: PUSH
50356: LD_VAR 0 5
50360: PUSH
50361: LD_INT 1
50363: PUSH
50364: LD_INT 2
50366: PUSH
50367: LD_INT 3
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: LIST
50374: IN
50375: NOT
50376: AND
50377: OR
50378: IFFALSE 50382
// exit ;
50380: GO 68773
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
50382: LD_VAR 0 1
50386: PUSH
50387: LD_INT 6
50389: PUSH
50390: LD_INT 7
50392: PUSH
50393: LD_INT 8
50395: PUSH
50396: LD_INT 13
50398: PUSH
50399: LD_INT 12
50401: PUSH
50402: LD_INT 15
50404: PUSH
50405: LD_INT 11
50407: PUSH
50408: LD_INT 14
50410: PUSH
50411: LD_INT 10
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: IN
50425: IFFALSE 50435
// btype = b_lab ;
50427: LD_ADDR_VAR 0 1
50431: PUSH
50432: LD_INT 6
50434: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
50435: LD_VAR 0 6
50439: PUSH
50440: LD_INT 0
50442: PUSH
50443: LD_INT 1
50445: PUSH
50446: LD_INT 2
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: LIST
50453: IN
50454: NOT
50455: PUSH
50456: LD_VAR 0 1
50460: PUSH
50461: LD_INT 0
50463: PUSH
50464: LD_INT 1
50466: PUSH
50467: LD_INT 2
50469: PUSH
50470: LD_INT 3
50472: PUSH
50473: LD_INT 6
50475: PUSH
50476: LD_INT 36
50478: PUSH
50479: LD_INT 4
50481: PUSH
50482: LD_INT 5
50484: PUSH
50485: LD_INT 31
50487: PUSH
50488: LD_INT 32
50490: PUSH
50491: LD_INT 33
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: IN
50507: NOT
50508: PUSH
50509: LD_VAR 0 6
50513: PUSH
50514: LD_INT 1
50516: EQUAL
50517: AND
50518: OR
50519: PUSH
50520: LD_VAR 0 1
50524: PUSH
50525: LD_INT 2
50527: PUSH
50528: LD_INT 3
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: IN
50535: NOT
50536: PUSH
50537: LD_VAR 0 6
50541: PUSH
50542: LD_INT 2
50544: EQUAL
50545: AND
50546: OR
50547: IFFALSE 50557
// mode = 0 ;
50549: LD_ADDR_VAR 0 6
50553: PUSH
50554: LD_INT 0
50556: ST_TO_ADDR
// case mode of 0 :
50557: LD_VAR 0 6
50561: PUSH
50562: LD_INT 0
50564: DOUBLE
50565: EQUAL
50566: IFTRUE 50570
50568: GO 62023
50570: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50571: LD_ADDR_VAR 0 11
50575: PUSH
50576: LD_INT 0
50578: PUSH
50579: LD_INT 0
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PUSH
50586: LD_INT 0
50588: PUSH
50589: LD_INT 1
50591: NEG
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: PUSH
50597: LD_INT 1
50599: PUSH
50600: LD_INT 0
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 1
50609: PUSH
50610: LD_INT 1
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 0
50619: PUSH
50620: LD_INT 1
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: LD_INT 1
50629: NEG
50630: PUSH
50631: LD_INT 0
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 1
50640: NEG
50641: PUSH
50642: LD_INT 1
50644: NEG
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 1
50652: NEG
50653: PUSH
50654: LD_INT 2
50656: NEG
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 0
50664: PUSH
50665: LD_INT 2
50667: NEG
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: LD_INT 1
50675: PUSH
50676: LD_INT 1
50678: NEG
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: LD_INT 1
50686: PUSH
50687: LD_INT 2
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 0
50696: PUSH
50697: LD_INT 2
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: PUSH
50704: LD_INT 1
50706: NEG
50707: PUSH
50708: LD_INT 1
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: LD_INT 1
50717: PUSH
50718: LD_INT 3
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: PUSH
50725: LD_INT 0
50727: PUSH
50728: LD_INT 3
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: LD_INT 1
50737: NEG
50738: PUSH
50739: LD_INT 2
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50764: LD_ADDR_VAR 0 12
50768: PUSH
50769: LD_INT 0
50771: PUSH
50772: LD_INT 0
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: LD_INT 0
50781: PUSH
50782: LD_INT 1
50784: NEG
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: LD_INT 1
50792: PUSH
50793: LD_INT 0
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: PUSH
50800: LD_INT 1
50802: PUSH
50803: LD_INT 1
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 0
50812: PUSH
50813: LD_INT 1
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 1
50822: NEG
50823: PUSH
50824: LD_INT 0
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: PUSH
50831: LD_INT 1
50833: NEG
50834: PUSH
50835: LD_INT 1
50837: NEG
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 1
50845: PUSH
50846: LD_INT 1
50848: NEG
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PUSH
50854: LD_INT 2
50856: PUSH
50857: LD_INT 0
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 2
50866: PUSH
50867: LD_INT 1
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 1
50876: NEG
50877: PUSH
50878: LD_INT 1
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: LD_INT 2
50887: NEG
50888: PUSH
50889: LD_INT 0
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 2
50898: NEG
50899: PUSH
50900: LD_INT 1
50902: NEG
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 2
50910: NEG
50911: PUSH
50912: LD_INT 1
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 3
50921: NEG
50922: PUSH
50923: LD_INT 0
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 3
50932: NEG
50933: PUSH
50934: LD_INT 1
50936: NEG
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: LIST
50946: LIST
50947: LIST
50948: LIST
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50960: LD_ADDR_VAR 0 13
50964: PUSH
50965: LD_INT 0
50967: PUSH
50968: LD_INT 0
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 0
50977: PUSH
50978: LD_INT 1
50980: NEG
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: LD_INT 1
50988: PUSH
50989: LD_INT 0
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 1
50998: PUSH
50999: LD_INT 1
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 0
51008: PUSH
51009: LD_INT 1
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 1
51018: NEG
51019: PUSH
51020: LD_INT 0
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 1
51029: NEG
51030: PUSH
51031: LD_INT 1
51033: NEG
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 1
51041: NEG
51042: PUSH
51043: LD_INT 2
51045: NEG
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: PUSH
51051: LD_INT 2
51053: PUSH
51054: LD_INT 1
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 2
51063: PUSH
51064: LD_INT 2
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 1
51073: PUSH
51074: LD_INT 2
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 2
51083: NEG
51084: PUSH
51085: LD_INT 1
51087: NEG
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: LD_INT 2
51095: NEG
51096: PUSH
51097: LD_INT 2
51099: NEG
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 2
51107: NEG
51108: PUSH
51109: LD_INT 3
51111: NEG
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 3
51119: NEG
51120: PUSH
51121: LD_INT 2
51123: NEG
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 3
51131: NEG
51132: PUSH
51133: LD_INT 3
51135: NEG
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: LIST
51157: LIST
51158: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51159: LD_ADDR_VAR 0 14
51163: PUSH
51164: LD_INT 0
51166: PUSH
51167: LD_INT 0
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 0
51176: PUSH
51177: LD_INT 1
51179: NEG
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 1
51187: PUSH
51188: LD_INT 0
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 1
51197: PUSH
51198: LD_INT 1
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 0
51207: PUSH
51208: LD_INT 1
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 1
51217: NEG
51218: PUSH
51219: LD_INT 0
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 1
51228: NEG
51229: PUSH
51230: LD_INT 1
51232: NEG
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: LD_INT 1
51240: NEG
51241: PUSH
51242: LD_INT 2
51244: NEG
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 0
51252: PUSH
51253: LD_INT 2
51255: NEG
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 1
51263: PUSH
51264: LD_INT 1
51266: NEG
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 1
51274: PUSH
51275: LD_INT 2
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: LD_INT 0
51284: PUSH
51285: LD_INT 2
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 1
51294: NEG
51295: PUSH
51296: LD_INT 1
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 1
51305: NEG
51306: PUSH
51307: LD_INT 3
51309: NEG
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 0
51317: PUSH
51318: LD_INT 3
51320: NEG
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 1
51328: PUSH
51329: LD_INT 2
51331: NEG
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51355: LD_ADDR_VAR 0 15
51359: PUSH
51360: LD_INT 0
51362: PUSH
51363: LD_INT 0
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 0
51372: PUSH
51373: LD_INT 1
51375: NEG
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 1
51383: PUSH
51384: LD_INT 0
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 1
51393: PUSH
51394: LD_INT 1
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 0
51403: PUSH
51404: LD_INT 1
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 1
51413: NEG
51414: PUSH
51415: LD_INT 0
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 1
51424: NEG
51425: PUSH
51426: LD_INT 1
51428: NEG
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 1
51436: PUSH
51437: LD_INT 1
51439: NEG
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 2
51447: PUSH
51448: LD_INT 0
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 2
51457: PUSH
51458: LD_INT 1
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 1
51467: NEG
51468: PUSH
51469: LD_INT 1
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 2
51478: NEG
51479: PUSH
51480: LD_INT 0
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 2
51489: NEG
51490: PUSH
51491: LD_INT 1
51493: NEG
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: LD_INT 2
51501: PUSH
51502: LD_INT 1
51504: NEG
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 3
51512: PUSH
51513: LD_INT 0
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 3
51522: PUSH
51523: LD_INT 1
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51548: LD_ADDR_VAR 0 16
51552: PUSH
51553: LD_INT 0
51555: PUSH
51556: LD_INT 0
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 0
51565: PUSH
51566: LD_INT 1
51568: NEG
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 1
51576: PUSH
51577: LD_INT 0
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 1
51586: PUSH
51587: LD_INT 1
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 0
51596: PUSH
51597: LD_INT 1
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 1
51606: NEG
51607: PUSH
51608: LD_INT 0
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 1
51617: NEG
51618: PUSH
51619: LD_INT 1
51621: NEG
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 1
51629: NEG
51630: PUSH
51631: LD_INT 2
51633: NEG
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 2
51641: PUSH
51642: LD_INT 1
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 2
51651: PUSH
51652: LD_INT 2
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 1
51661: PUSH
51662: LD_INT 2
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 2
51671: NEG
51672: PUSH
51673: LD_INT 1
51675: NEG
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 2
51683: NEG
51684: PUSH
51685: LD_INT 2
51687: NEG
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 3
51695: PUSH
51696: LD_INT 2
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 3
51705: PUSH
51706: LD_INT 3
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: LD_INT 2
51715: PUSH
51716: LD_INT 3
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: LIST
51731: LIST
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: LIST
51737: LIST
51738: LIST
51739: LIST
51740: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51741: LD_ADDR_VAR 0 17
51745: PUSH
51746: LD_INT 0
51748: PUSH
51749: LD_INT 0
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: PUSH
51756: LD_INT 0
51758: PUSH
51759: LD_INT 1
51761: NEG
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: LD_INT 1
51769: PUSH
51770: LD_INT 0
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 1
51779: PUSH
51780: LD_INT 1
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 0
51789: PUSH
51790: LD_INT 1
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 1
51799: NEG
51800: PUSH
51801: LD_INT 0
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 1
51810: NEG
51811: PUSH
51812: LD_INT 1
51814: NEG
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 1
51822: NEG
51823: PUSH
51824: LD_INT 2
51826: NEG
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: LD_INT 0
51834: PUSH
51835: LD_INT 2
51837: NEG
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 1
51845: PUSH
51846: LD_INT 1
51848: NEG
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 2
51856: PUSH
51857: LD_INT 0
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: PUSH
51864: LD_INT 2
51866: PUSH
51867: LD_INT 1
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 2
51876: PUSH
51877: LD_INT 2
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 1
51886: PUSH
51887: LD_INT 2
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: LD_INT 0
51896: PUSH
51897: LD_INT 2
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 1
51906: NEG
51907: PUSH
51908: LD_INT 1
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 2
51917: NEG
51918: PUSH
51919: LD_INT 0
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 2
51928: NEG
51929: PUSH
51930: LD_INT 1
51932: NEG
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 2
51940: NEG
51941: PUSH
51942: LD_INT 2
51944: NEG
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: LIST
51954: LIST
51955: LIST
51956: LIST
51957: LIST
51958: LIST
51959: LIST
51960: LIST
51961: LIST
51962: LIST
51963: LIST
51964: LIST
51965: LIST
51966: LIST
51967: LIST
51968: LIST
51969: LIST
51970: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51971: LD_ADDR_VAR 0 18
51975: PUSH
51976: LD_INT 0
51978: PUSH
51979: LD_INT 0
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 0
51988: PUSH
51989: LD_INT 1
51991: NEG
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: PUSH
51997: LD_INT 1
51999: PUSH
52000: LD_INT 0
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PUSH
52007: LD_INT 1
52009: PUSH
52010: LD_INT 1
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 0
52019: PUSH
52020: LD_INT 1
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 1
52029: NEG
52030: PUSH
52031: LD_INT 0
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 1
52040: NEG
52041: PUSH
52042: LD_INT 1
52044: NEG
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: LD_INT 1
52052: NEG
52053: PUSH
52054: LD_INT 2
52056: NEG
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: LD_INT 0
52064: PUSH
52065: LD_INT 2
52067: NEG
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: LD_INT 1
52075: PUSH
52076: LD_INT 1
52078: NEG
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 2
52086: PUSH
52087: LD_INT 0
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 2
52096: PUSH
52097: LD_INT 1
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 2
52106: PUSH
52107: LD_INT 2
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 1
52116: PUSH
52117: LD_INT 2
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 0
52126: PUSH
52127: LD_INT 2
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 1
52136: NEG
52137: PUSH
52138: LD_INT 1
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 2
52147: NEG
52148: PUSH
52149: LD_INT 0
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 2
52158: NEG
52159: PUSH
52160: LD_INT 1
52162: NEG
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 2
52170: NEG
52171: PUSH
52172: LD_INT 2
52174: NEG
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: LIST
52198: LIST
52199: LIST
52200: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52201: LD_ADDR_VAR 0 19
52205: PUSH
52206: LD_INT 0
52208: PUSH
52209: LD_INT 0
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: LD_INT 0
52218: PUSH
52219: LD_INT 1
52221: NEG
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: LD_INT 1
52229: PUSH
52230: LD_INT 0
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: LD_INT 1
52239: PUSH
52240: LD_INT 1
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: PUSH
52247: LD_INT 0
52249: PUSH
52250: LD_INT 1
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 1
52259: NEG
52260: PUSH
52261: LD_INT 0
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 1
52270: NEG
52271: PUSH
52272: LD_INT 1
52274: NEG
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 1
52282: NEG
52283: PUSH
52284: LD_INT 2
52286: NEG
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 0
52294: PUSH
52295: LD_INT 2
52297: NEG
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: LD_INT 1
52305: PUSH
52306: LD_INT 1
52308: NEG
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 2
52316: PUSH
52317: LD_INT 0
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: LD_INT 2
52326: PUSH
52327: LD_INT 1
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 2
52336: PUSH
52337: LD_INT 2
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 1
52346: PUSH
52347: LD_INT 2
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 0
52356: PUSH
52357: LD_INT 2
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 1
52366: NEG
52367: PUSH
52368: LD_INT 1
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 2
52377: NEG
52378: PUSH
52379: LD_INT 0
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 2
52388: NEG
52389: PUSH
52390: LD_INT 1
52392: NEG
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 2
52400: NEG
52401: PUSH
52402: LD_INT 2
52404: NEG
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52431: LD_ADDR_VAR 0 20
52435: PUSH
52436: LD_INT 0
52438: PUSH
52439: LD_INT 0
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 0
52448: PUSH
52449: LD_INT 1
52451: NEG
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: LD_INT 1
52459: PUSH
52460: LD_INT 0
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 1
52469: PUSH
52470: LD_INT 1
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 0
52479: PUSH
52480: LD_INT 1
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 1
52489: NEG
52490: PUSH
52491: LD_INT 0
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: LD_INT 1
52500: NEG
52501: PUSH
52502: LD_INT 1
52504: NEG
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 1
52512: NEG
52513: PUSH
52514: LD_INT 2
52516: NEG
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 0
52524: PUSH
52525: LD_INT 2
52527: NEG
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: LD_INT 1
52535: PUSH
52536: LD_INT 1
52538: NEG
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 2
52546: PUSH
52547: LD_INT 0
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 2
52556: PUSH
52557: LD_INT 1
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: LD_INT 2
52566: PUSH
52567: LD_INT 2
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: LD_INT 1
52576: PUSH
52577: LD_INT 2
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 0
52586: PUSH
52587: LD_INT 2
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 1
52596: NEG
52597: PUSH
52598: LD_INT 1
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 2
52607: NEG
52608: PUSH
52609: LD_INT 0
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 2
52618: NEG
52619: PUSH
52620: LD_INT 1
52622: NEG
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 2
52630: NEG
52631: PUSH
52632: LD_INT 2
52634: NEG
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: LIST
52651: LIST
52652: LIST
52653: LIST
52654: LIST
52655: LIST
52656: LIST
52657: LIST
52658: LIST
52659: LIST
52660: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52661: LD_ADDR_VAR 0 21
52665: PUSH
52666: LD_INT 0
52668: PUSH
52669: LD_INT 0
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: LD_INT 0
52678: PUSH
52679: LD_INT 1
52681: NEG
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: LD_INT 1
52689: PUSH
52690: LD_INT 0
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PUSH
52697: LD_INT 1
52699: PUSH
52700: LD_INT 1
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: LD_INT 0
52709: PUSH
52710: LD_INT 1
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 1
52719: NEG
52720: PUSH
52721: LD_INT 0
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 1
52730: NEG
52731: PUSH
52732: LD_INT 1
52734: NEG
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: LD_INT 1
52742: NEG
52743: PUSH
52744: LD_INT 2
52746: NEG
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 0
52754: PUSH
52755: LD_INT 2
52757: NEG
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 1
52765: PUSH
52766: LD_INT 1
52768: NEG
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 2
52776: PUSH
52777: LD_INT 0
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 2
52786: PUSH
52787: LD_INT 1
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 2
52796: PUSH
52797: LD_INT 2
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 1
52806: PUSH
52807: LD_INT 2
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: LD_INT 0
52816: PUSH
52817: LD_INT 2
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 1
52826: NEG
52827: PUSH
52828: LD_INT 1
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: LD_INT 2
52837: NEG
52838: PUSH
52839: LD_INT 0
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 2
52848: NEG
52849: PUSH
52850: LD_INT 1
52852: NEG
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: LD_INT 2
52860: NEG
52861: PUSH
52862: LD_INT 2
52864: NEG
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: LIST
52874: LIST
52875: LIST
52876: LIST
52877: LIST
52878: LIST
52879: LIST
52880: LIST
52881: LIST
52882: LIST
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52891: LD_ADDR_VAR 0 22
52895: PUSH
52896: LD_INT 0
52898: PUSH
52899: LD_INT 0
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: PUSH
52906: LD_INT 0
52908: PUSH
52909: LD_INT 1
52911: NEG
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 1
52919: PUSH
52920: LD_INT 0
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 1
52929: PUSH
52930: LD_INT 1
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 0
52939: PUSH
52940: LD_INT 1
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 1
52949: NEG
52950: PUSH
52951: LD_INT 0
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: LD_INT 1
52960: NEG
52961: PUSH
52962: LD_INT 1
52964: NEG
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: LD_INT 1
52972: NEG
52973: PUSH
52974: LD_INT 2
52976: NEG
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 0
52984: PUSH
52985: LD_INT 2
52987: NEG
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 1
52995: PUSH
52996: LD_INT 1
52998: NEG
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 2
53006: PUSH
53007: LD_INT 0
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: LD_INT 2
53016: PUSH
53017: LD_INT 1
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_INT 2
53026: PUSH
53027: LD_INT 2
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 1
53036: PUSH
53037: LD_INT 2
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 0
53046: PUSH
53047: LD_INT 2
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: PUSH
53054: LD_INT 1
53056: NEG
53057: PUSH
53058: LD_INT 1
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: LD_INT 2
53067: NEG
53068: PUSH
53069: LD_INT 0
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 2
53078: NEG
53079: PUSH
53080: LD_INT 1
53082: NEG
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 2
53090: NEG
53091: PUSH
53092: LD_INT 2
53094: NEG
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: LIST
53119: LIST
53120: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53121: LD_ADDR_VAR 0 23
53125: PUSH
53126: LD_INT 0
53128: PUSH
53129: LD_INT 0
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 0
53138: PUSH
53139: LD_INT 1
53141: NEG
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PUSH
53147: LD_INT 1
53149: PUSH
53150: LD_INT 0
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 1
53159: PUSH
53160: LD_INT 1
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 0
53169: PUSH
53170: LD_INT 1
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: PUSH
53177: LD_INT 1
53179: NEG
53180: PUSH
53181: LD_INT 0
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: PUSH
53188: LD_INT 1
53190: NEG
53191: PUSH
53192: LD_INT 1
53194: NEG
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 1
53202: NEG
53203: PUSH
53204: LD_INT 2
53206: NEG
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: LD_INT 0
53214: PUSH
53215: LD_INT 2
53217: NEG
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: LD_INT 1
53225: PUSH
53226: LD_INT 1
53228: NEG
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 2
53236: PUSH
53237: LD_INT 0
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 2
53246: PUSH
53247: LD_INT 1
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: PUSH
53254: LD_INT 2
53256: PUSH
53257: LD_INT 2
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: LD_INT 1
53266: PUSH
53267: LD_INT 2
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 0
53276: PUSH
53277: LD_INT 2
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 1
53286: NEG
53287: PUSH
53288: LD_INT 1
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: PUSH
53295: LD_INT 2
53297: NEG
53298: PUSH
53299: LD_INT 0
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 2
53308: NEG
53309: PUSH
53310: LD_INT 1
53312: NEG
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 2
53320: NEG
53321: PUSH
53322: LD_INT 2
53324: NEG
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 2
53332: NEG
53333: PUSH
53334: LD_INT 3
53336: NEG
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: LD_INT 1
53344: NEG
53345: PUSH
53346: LD_INT 3
53348: NEG
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 1
53356: PUSH
53357: LD_INT 2
53359: NEG
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: PUSH
53365: LD_INT 2
53367: PUSH
53368: LD_INT 1
53370: NEG
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: LIST
53380: LIST
53381: LIST
53382: LIST
53383: LIST
53384: LIST
53385: LIST
53386: LIST
53387: LIST
53388: LIST
53389: LIST
53390: LIST
53391: LIST
53392: LIST
53393: LIST
53394: LIST
53395: LIST
53396: LIST
53397: LIST
53398: LIST
53399: LIST
53400: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
53401: LD_ADDR_VAR 0 24
53405: PUSH
53406: LD_INT 0
53408: PUSH
53409: LD_INT 0
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: LD_INT 0
53418: PUSH
53419: LD_INT 1
53421: NEG
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: LD_INT 1
53429: PUSH
53430: LD_INT 0
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: LD_INT 1
53439: PUSH
53440: LD_INT 1
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 0
53449: PUSH
53450: LD_INT 1
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 1
53459: NEG
53460: PUSH
53461: LD_INT 0
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: LD_INT 1
53470: NEG
53471: PUSH
53472: LD_INT 1
53474: NEG
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 1
53482: NEG
53483: PUSH
53484: LD_INT 2
53486: NEG
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 0
53494: PUSH
53495: LD_INT 2
53497: NEG
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: LD_INT 1
53505: PUSH
53506: LD_INT 1
53508: NEG
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 2
53516: PUSH
53517: LD_INT 0
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: LD_INT 2
53526: PUSH
53527: LD_INT 1
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: LD_INT 2
53536: PUSH
53537: LD_INT 2
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 1
53546: PUSH
53547: LD_INT 2
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 0
53556: PUSH
53557: LD_INT 2
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 1
53566: NEG
53567: PUSH
53568: LD_INT 1
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 2
53577: NEG
53578: PUSH
53579: LD_INT 0
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 2
53588: NEG
53589: PUSH
53590: LD_INT 1
53592: NEG
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 2
53600: NEG
53601: PUSH
53602: LD_INT 2
53604: NEG
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 1
53612: PUSH
53613: LD_INT 2
53615: NEG
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: LD_INT 2
53623: PUSH
53624: LD_INT 1
53626: NEG
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 3
53634: PUSH
53635: LD_INT 1
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 3
53644: PUSH
53645: LD_INT 2
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: LIST
53676: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
53677: LD_ADDR_VAR 0 25
53681: PUSH
53682: LD_INT 0
53684: PUSH
53685: LD_INT 0
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: PUSH
53692: LD_INT 0
53694: PUSH
53695: LD_INT 1
53697: NEG
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PUSH
53703: LD_INT 1
53705: PUSH
53706: LD_INT 0
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: PUSH
53713: LD_INT 1
53715: PUSH
53716: LD_INT 1
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 0
53725: PUSH
53726: LD_INT 1
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: LD_INT 1
53735: NEG
53736: PUSH
53737: LD_INT 0
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: LD_INT 1
53746: NEG
53747: PUSH
53748: LD_INT 1
53750: NEG
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 1
53758: NEG
53759: PUSH
53760: LD_INT 2
53762: NEG
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 0
53770: PUSH
53771: LD_INT 2
53773: NEG
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 1
53781: PUSH
53782: LD_INT 1
53784: NEG
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 2
53792: PUSH
53793: LD_INT 0
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 2
53802: PUSH
53803: LD_INT 1
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 2
53812: PUSH
53813: LD_INT 2
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 1
53822: PUSH
53823: LD_INT 2
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 0
53832: PUSH
53833: LD_INT 2
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 1
53842: NEG
53843: PUSH
53844: LD_INT 1
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: LD_INT 2
53853: NEG
53854: PUSH
53855: LD_INT 0
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 2
53864: NEG
53865: PUSH
53866: LD_INT 1
53868: NEG
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 2
53876: NEG
53877: PUSH
53878: LD_INT 2
53880: NEG
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 3
53888: PUSH
53889: LD_INT 1
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 3
53898: PUSH
53899: LD_INT 2
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 2
53908: PUSH
53909: LD_INT 3
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 1
53918: PUSH
53919: LD_INT 3
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: LIST
53930: LIST
53931: LIST
53932: LIST
53933: LIST
53934: LIST
53935: LIST
53936: LIST
53937: LIST
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53951: LD_ADDR_VAR 0 26
53955: PUSH
53956: LD_INT 0
53958: PUSH
53959: LD_INT 0
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 0
53968: PUSH
53969: LD_INT 1
53971: NEG
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 1
53979: PUSH
53980: LD_INT 0
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 1
53989: PUSH
53990: LD_INT 1
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: LD_INT 0
53999: PUSH
54000: LD_INT 1
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: LD_INT 1
54009: NEG
54010: PUSH
54011: LD_INT 0
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 1
54020: NEG
54021: PUSH
54022: LD_INT 1
54024: NEG
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 1
54032: NEG
54033: PUSH
54034: LD_INT 2
54036: NEG
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 0
54044: PUSH
54045: LD_INT 2
54047: NEG
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 1
54055: PUSH
54056: LD_INT 1
54058: NEG
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 2
54066: PUSH
54067: LD_INT 0
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: LD_INT 2
54076: PUSH
54077: LD_INT 1
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: LD_INT 2
54086: PUSH
54087: LD_INT 2
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 1
54096: PUSH
54097: LD_INT 2
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 0
54106: PUSH
54107: LD_INT 2
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 1
54116: NEG
54117: PUSH
54118: LD_INT 1
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 2
54127: NEG
54128: PUSH
54129: LD_INT 0
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 2
54138: NEG
54139: PUSH
54140: LD_INT 1
54142: NEG
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 2
54150: NEG
54151: PUSH
54152: LD_INT 2
54154: NEG
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 2
54162: PUSH
54163: LD_INT 3
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 1
54172: PUSH
54173: LD_INT 3
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 1
54182: NEG
54183: PUSH
54184: LD_INT 2
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 2
54193: NEG
54194: PUSH
54195: LD_INT 1
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: LIST
54208: LIST
54209: LIST
54210: LIST
54211: LIST
54212: LIST
54213: LIST
54214: LIST
54215: LIST
54216: LIST
54217: LIST
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54227: LD_ADDR_VAR 0 27
54231: PUSH
54232: LD_INT 0
54234: PUSH
54235: LD_INT 0
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 0
54244: PUSH
54245: LD_INT 1
54247: NEG
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 1
54255: PUSH
54256: LD_INT 0
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: LD_INT 1
54265: PUSH
54266: LD_INT 1
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 0
54275: PUSH
54276: LD_INT 1
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PUSH
54283: LD_INT 1
54285: NEG
54286: PUSH
54287: LD_INT 0
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: LD_INT 1
54296: NEG
54297: PUSH
54298: LD_INT 1
54300: NEG
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 1
54308: NEG
54309: PUSH
54310: LD_INT 2
54312: NEG
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: PUSH
54318: LD_INT 0
54320: PUSH
54321: LD_INT 2
54323: NEG
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 1
54331: PUSH
54332: LD_INT 1
54334: NEG
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 2
54342: PUSH
54343: LD_INT 0
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: LD_INT 2
54352: PUSH
54353: LD_INT 1
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 2
54362: PUSH
54363: LD_INT 2
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: LD_INT 1
54372: PUSH
54373: LD_INT 2
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 0
54382: PUSH
54383: LD_INT 2
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 1
54392: NEG
54393: PUSH
54394: LD_INT 1
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 2
54403: NEG
54404: PUSH
54405: LD_INT 0
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 2
54414: NEG
54415: PUSH
54416: LD_INT 1
54418: NEG
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 2
54426: NEG
54427: PUSH
54428: LD_INT 2
54430: NEG
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 1
54438: NEG
54439: PUSH
54440: LD_INT 2
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 2
54449: NEG
54450: PUSH
54451: LD_INT 1
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 3
54460: NEG
54461: PUSH
54462: LD_INT 1
54464: NEG
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: LD_INT 3
54472: NEG
54473: PUSH
54474: LD_INT 2
54476: NEG
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: LIST
54486: LIST
54487: LIST
54488: LIST
54489: LIST
54490: LIST
54491: LIST
54492: LIST
54493: LIST
54494: LIST
54495: LIST
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54507: LD_ADDR_VAR 0 28
54511: PUSH
54512: LD_INT 0
54514: PUSH
54515: LD_INT 0
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 0
54524: PUSH
54525: LD_INT 1
54527: NEG
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 1
54535: PUSH
54536: LD_INT 0
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 1
54545: PUSH
54546: LD_INT 1
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 0
54555: PUSH
54556: LD_INT 1
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: LD_INT 1
54565: NEG
54566: PUSH
54567: LD_INT 0
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: LD_INT 1
54576: NEG
54577: PUSH
54578: LD_INT 1
54580: NEG
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 1
54588: NEG
54589: PUSH
54590: LD_INT 2
54592: NEG
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 0
54600: PUSH
54601: LD_INT 2
54603: NEG
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 1
54611: PUSH
54612: LD_INT 1
54614: NEG
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 2
54622: PUSH
54623: LD_INT 0
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: LD_INT 2
54632: PUSH
54633: LD_INT 1
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: LD_INT 2
54642: PUSH
54643: LD_INT 2
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 1
54652: PUSH
54653: LD_INT 2
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 0
54662: PUSH
54663: LD_INT 2
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 1
54672: NEG
54673: PUSH
54674: LD_INT 1
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 2
54683: NEG
54684: PUSH
54685: LD_INT 0
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: LD_INT 2
54694: NEG
54695: PUSH
54696: LD_INT 1
54698: NEG
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 2
54706: NEG
54707: PUSH
54708: LD_INT 2
54710: NEG
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 2
54718: NEG
54719: PUSH
54720: LD_INT 3
54722: NEG
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 1
54730: NEG
54731: PUSH
54732: LD_INT 3
54734: NEG
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 3
54742: NEG
54743: PUSH
54744: LD_INT 1
54746: NEG
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 3
54754: NEG
54755: PUSH
54756: LD_INT 2
54758: NEG
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: LIST
54768: LIST
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54789: LD_ADDR_VAR 0 29
54793: PUSH
54794: LD_INT 0
54796: PUSH
54797: LD_INT 0
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 0
54806: PUSH
54807: LD_INT 1
54809: NEG
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 1
54817: PUSH
54818: LD_INT 0
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 1
54827: PUSH
54828: LD_INT 1
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 0
54837: PUSH
54838: LD_INT 1
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 1
54847: NEG
54848: PUSH
54849: LD_INT 0
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 1
54858: NEG
54859: PUSH
54860: LD_INT 1
54862: NEG
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: PUSH
54868: LD_INT 1
54870: NEG
54871: PUSH
54872: LD_INT 2
54874: NEG
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: PUSH
54880: LD_INT 0
54882: PUSH
54883: LD_INT 2
54885: NEG
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 1
54893: PUSH
54894: LD_INT 1
54896: NEG
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 2
54904: PUSH
54905: LD_INT 0
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 2
54914: PUSH
54915: LD_INT 1
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 1
54924: PUSH
54925: LD_INT 2
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 0
54934: PUSH
54935: LD_INT 2
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 1
54944: NEG
54945: PUSH
54946: LD_INT 1
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 2
54955: NEG
54956: PUSH
54957: LD_INT 1
54959: NEG
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 2
54967: NEG
54968: PUSH
54969: LD_INT 2
54971: NEG
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: LD_INT 2
54979: NEG
54980: PUSH
54981: LD_INT 3
54983: NEG
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 2
54991: PUSH
54992: LD_INT 1
54994: NEG
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 3
55002: PUSH
55003: LD_INT 1
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: LD_INT 1
55012: PUSH
55013: LD_INT 3
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 1
55022: NEG
55023: PUSH
55024: LD_INT 2
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 3
55033: NEG
55034: PUSH
55035: LD_INT 2
55037: NEG
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: LIST
55047: LIST
55048: LIST
55049: LIST
55050: LIST
55051: LIST
55052: LIST
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: LIST
55067: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55068: LD_ADDR_VAR 0 30
55072: PUSH
55073: LD_INT 0
55075: PUSH
55076: LD_INT 0
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 0
55085: PUSH
55086: LD_INT 1
55088: NEG
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: LD_INT 1
55096: PUSH
55097: LD_INT 0
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: PUSH
55104: LD_INT 1
55106: PUSH
55107: LD_INT 1
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: LD_INT 0
55116: PUSH
55117: LD_INT 1
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 1
55126: NEG
55127: PUSH
55128: LD_INT 0
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: LD_INT 1
55137: NEG
55138: PUSH
55139: LD_INT 1
55141: NEG
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: LD_INT 1
55149: NEG
55150: PUSH
55151: LD_INT 2
55153: NEG
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: LD_INT 0
55161: PUSH
55162: LD_INT 2
55164: NEG
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 1
55172: PUSH
55173: LD_INT 1
55175: NEG
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: PUSH
55181: LD_INT 2
55183: PUSH
55184: LD_INT 0
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: LD_INT 2
55193: PUSH
55194: LD_INT 1
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: LD_INT 2
55203: PUSH
55204: LD_INT 2
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: PUSH
55211: LD_INT 1
55213: PUSH
55214: LD_INT 2
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: LD_INT 1
55223: NEG
55224: PUSH
55225: LD_INT 1
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 2
55234: NEG
55235: PUSH
55236: LD_INT 0
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: LD_INT 2
55245: NEG
55246: PUSH
55247: LD_INT 1
55249: NEG
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: PUSH
55255: LD_INT 1
55257: NEG
55258: PUSH
55259: LD_INT 3
55261: NEG
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 1
55269: PUSH
55270: LD_INT 2
55272: NEG
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: LD_INT 3
55280: PUSH
55281: LD_INT 2
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PUSH
55288: LD_INT 2
55290: PUSH
55291: LD_INT 3
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: LD_INT 2
55300: NEG
55301: PUSH
55302: LD_INT 1
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 3
55311: NEG
55312: PUSH
55313: LD_INT 1
55315: NEG
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55346: LD_ADDR_VAR 0 31
55350: PUSH
55351: LD_INT 0
55353: PUSH
55354: LD_INT 0
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: PUSH
55361: LD_INT 0
55363: PUSH
55364: LD_INT 1
55366: NEG
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 1
55374: PUSH
55375: LD_INT 0
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 1
55384: PUSH
55385: LD_INT 1
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 0
55394: PUSH
55395: LD_INT 1
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 1
55404: NEG
55405: PUSH
55406: LD_INT 0
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 1
55415: NEG
55416: PUSH
55417: LD_INT 1
55419: NEG
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 1
55427: NEG
55428: PUSH
55429: LD_INT 2
55431: NEG
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: LD_INT 1
55439: PUSH
55440: LD_INT 1
55442: NEG
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 2
55450: PUSH
55451: LD_INT 0
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 2
55460: PUSH
55461: LD_INT 1
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 2
55470: PUSH
55471: LD_INT 2
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 1
55480: PUSH
55481: LD_INT 2
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 0
55490: PUSH
55491: LD_INT 2
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: LD_INT 1
55500: NEG
55501: PUSH
55502: LD_INT 1
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: LD_INT 2
55511: NEG
55512: PUSH
55513: LD_INT 1
55515: NEG
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 2
55523: NEG
55524: PUSH
55525: LD_INT 2
55527: NEG
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 2
55535: NEG
55536: PUSH
55537: LD_INT 3
55539: NEG
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 2
55547: PUSH
55548: LD_INT 1
55550: NEG
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 3
55558: PUSH
55559: LD_INT 1
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: PUSH
55566: LD_INT 1
55568: PUSH
55569: LD_INT 3
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PUSH
55576: LD_INT 1
55578: NEG
55579: PUSH
55580: LD_INT 2
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 3
55589: NEG
55590: PUSH
55591: LD_INT 2
55593: NEG
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: LIST
55623: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55624: LD_ADDR_VAR 0 32
55628: PUSH
55629: LD_INT 0
55631: PUSH
55632: LD_INT 0
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 0
55641: PUSH
55642: LD_INT 1
55644: NEG
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 1
55652: PUSH
55653: LD_INT 0
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: LD_INT 1
55662: PUSH
55663: LD_INT 1
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 0
55672: PUSH
55673: LD_INT 1
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 1
55682: NEG
55683: PUSH
55684: LD_INT 0
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 1
55693: NEG
55694: PUSH
55695: LD_INT 1
55697: NEG
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 1
55705: NEG
55706: PUSH
55707: LD_INT 2
55709: NEG
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 0
55717: PUSH
55718: LD_INT 2
55720: NEG
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 1
55728: PUSH
55729: LD_INT 1
55731: NEG
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 2
55739: PUSH
55740: LD_INT 1
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 2
55749: PUSH
55750: LD_INT 2
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 1
55759: PUSH
55760: LD_INT 2
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 0
55769: PUSH
55770: LD_INT 2
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 1
55779: NEG
55780: PUSH
55781: LD_INT 1
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 2
55790: NEG
55791: PUSH
55792: LD_INT 0
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 2
55801: NEG
55802: PUSH
55803: LD_INT 1
55805: NEG
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: LD_INT 1
55813: NEG
55814: PUSH
55815: LD_INT 3
55817: NEG
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 1
55825: PUSH
55826: LD_INT 2
55828: NEG
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 3
55836: PUSH
55837: LD_INT 2
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 2
55846: PUSH
55847: LD_INT 3
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 2
55856: NEG
55857: PUSH
55858: LD_INT 1
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 3
55867: NEG
55868: PUSH
55869: LD_INT 1
55871: NEG
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55902: LD_ADDR_VAR 0 33
55906: PUSH
55907: LD_INT 0
55909: PUSH
55910: LD_INT 0
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 0
55919: PUSH
55920: LD_INT 1
55922: NEG
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 1
55930: PUSH
55931: LD_INT 0
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: LD_INT 1
55940: PUSH
55941: LD_INT 1
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 0
55950: PUSH
55951: LD_INT 1
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 1
55960: NEG
55961: PUSH
55962: LD_INT 0
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 1
55971: NEG
55972: PUSH
55973: LD_INT 1
55975: NEG
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 1
55983: NEG
55984: PUSH
55985: LD_INT 2
55987: NEG
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 1
55995: PUSH
55996: LD_INT 1
55998: NEG
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 2
56006: PUSH
56007: LD_INT 0
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 2
56016: PUSH
56017: LD_INT 1
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 1
56026: PUSH
56027: LD_INT 2
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: LD_INT 0
56036: PUSH
56037: LD_INT 2
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 1
56046: NEG
56047: PUSH
56048: LD_INT 1
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 2
56057: NEG
56058: PUSH
56059: LD_INT 0
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: PUSH
56066: LD_INT 2
56068: NEG
56069: PUSH
56070: LD_INT 1
56072: NEG
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: LD_INT 2
56080: NEG
56081: PUSH
56082: LD_INT 2
56084: NEG
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 2
56092: NEG
56093: PUSH
56094: LD_INT 3
56096: NEG
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: PUSH
56102: LD_INT 2
56104: PUSH
56105: LD_INT 1
56107: NEG
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: PUSH
56113: LD_INT 3
56115: PUSH
56116: LD_INT 1
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 1
56125: PUSH
56126: LD_INT 3
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 1
56135: NEG
56136: PUSH
56137: LD_INT 2
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: LD_INT 3
56146: NEG
56147: PUSH
56148: LD_INT 2
56150: NEG
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56181: LD_ADDR_VAR 0 34
56185: PUSH
56186: LD_INT 0
56188: PUSH
56189: LD_INT 0
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 0
56198: PUSH
56199: LD_INT 1
56201: NEG
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 1
56209: PUSH
56210: LD_INT 0
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 1
56219: PUSH
56220: LD_INT 1
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 0
56229: PUSH
56230: LD_INT 1
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 1
56239: NEG
56240: PUSH
56241: LD_INT 0
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: PUSH
56248: LD_INT 1
56250: NEG
56251: PUSH
56252: LD_INT 1
56254: NEG
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: PUSH
56260: LD_INT 1
56262: NEG
56263: PUSH
56264: LD_INT 2
56266: NEG
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 0
56274: PUSH
56275: LD_INT 2
56277: NEG
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 1
56285: PUSH
56286: LD_INT 1
56288: NEG
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: LD_INT 2
56296: PUSH
56297: LD_INT 1
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: LD_INT 2
56306: PUSH
56307: LD_INT 2
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: LD_INT 1
56316: PUSH
56317: LD_INT 2
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 1
56326: NEG
56327: PUSH
56328: LD_INT 1
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 2
56337: NEG
56338: PUSH
56339: LD_INT 0
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 2
56348: NEG
56349: PUSH
56350: LD_INT 1
56352: NEG
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PUSH
56358: LD_INT 2
56360: NEG
56361: PUSH
56362: LD_INT 2
56364: NEG
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 1
56372: NEG
56373: PUSH
56374: LD_INT 3
56376: NEG
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: LD_INT 1
56384: PUSH
56385: LD_INT 2
56387: NEG
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 3
56395: PUSH
56396: LD_INT 2
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: LD_INT 2
56405: PUSH
56406: LD_INT 3
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 2
56415: NEG
56416: PUSH
56417: LD_INT 1
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 3
56426: NEG
56427: PUSH
56428: LD_INT 1
56430: NEG
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: LIST
56452: LIST
56453: LIST
56454: LIST
56455: LIST
56456: LIST
56457: LIST
56458: LIST
56459: LIST
56460: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56461: LD_ADDR_VAR 0 35
56465: PUSH
56466: LD_INT 0
56468: PUSH
56469: LD_INT 0
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 0
56478: PUSH
56479: LD_INT 1
56481: NEG
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: LD_INT 1
56489: PUSH
56490: LD_INT 0
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 1
56499: PUSH
56500: LD_INT 1
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 0
56509: PUSH
56510: LD_INT 1
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 1
56519: NEG
56520: PUSH
56521: LD_INT 0
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 1
56530: NEG
56531: PUSH
56532: LD_INT 1
56534: NEG
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PUSH
56540: LD_INT 2
56542: PUSH
56543: LD_INT 1
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: LD_INT 2
56552: NEG
56553: PUSH
56554: LD_INT 1
56556: NEG
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: LIST
56566: LIST
56567: LIST
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56573: LD_ADDR_VAR 0 36
56577: PUSH
56578: LD_INT 0
56580: PUSH
56581: LD_INT 0
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 0
56590: PUSH
56591: LD_INT 1
56593: NEG
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 1
56601: PUSH
56602: LD_INT 0
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 1
56611: PUSH
56612: LD_INT 1
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 0
56621: PUSH
56622: LD_INT 1
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 1
56631: NEG
56632: PUSH
56633: LD_INT 0
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 1
56642: NEG
56643: PUSH
56644: LD_INT 1
56646: NEG
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 1
56654: NEG
56655: PUSH
56656: LD_INT 2
56658: NEG
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: PUSH
56664: LD_INT 1
56666: PUSH
56667: LD_INT 2
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: LIST
56678: LIST
56679: LIST
56680: LIST
56681: LIST
56682: LIST
56683: LIST
56684: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56685: LD_ADDR_VAR 0 37
56689: PUSH
56690: LD_INT 0
56692: PUSH
56693: LD_INT 0
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 0
56702: PUSH
56703: LD_INT 1
56705: NEG
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: LD_INT 1
56713: PUSH
56714: LD_INT 0
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 1
56723: PUSH
56724: LD_INT 1
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 0
56733: PUSH
56734: LD_INT 1
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: LD_INT 1
56743: NEG
56744: PUSH
56745: LD_INT 0
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 1
56754: NEG
56755: PUSH
56756: LD_INT 1
56758: NEG
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 1
56766: PUSH
56767: LD_INT 1
56769: NEG
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 1
56777: NEG
56778: PUSH
56779: LD_INT 1
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: LIST
56795: LIST
56796: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56797: LD_ADDR_VAR 0 38
56801: PUSH
56802: LD_INT 0
56804: PUSH
56805: LD_INT 0
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: PUSH
56812: LD_INT 0
56814: PUSH
56815: LD_INT 1
56817: NEG
56818: PUSH
56819: EMPTY
56820: LIST
56821: LIST
56822: PUSH
56823: LD_INT 1
56825: PUSH
56826: LD_INT 0
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: PUSH
56833: LD_INT 1
56835: PUSH
56836: LD_INT 1
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: PUSH
56843: LD_INT 0
56845: PUSH
56846: LD_INT 1
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: LD_INT 1
56855: NEG
56856: PUSH
56857: LD_INT 0
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PUSH
56864: LD_INT 1
56866: NEG
56867: PUSH
56868: LD_INT 1
56870: NEG
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: LD_INT 2
56878: PUSH
56879: LD_INT 1
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 2
56888: NEG
56889: PUSH
56890: LD_INT 1
56892: NEG
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: LIST
56908: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56909: LD_ADDR_VAR 0 39
56913: PUSH
56914: LD_INT 0
56916: PUSH
56917: LD_INT 0
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: LD_INT 0
56926: PUSH
56927: LD_INT 1
56929: NEG
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: PUSH
56935: LD_INT 1
56937: PUSH
56938: LD_INT 0
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: LD_INT 1
56947: PUSH
56948: LD_INT 1
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 0
56957: PUSH
56958: LD_INT 1
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 1
56967: NEG
56968: PUSH
56969: LD_INT 0
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 1
56978: NEG
56979: PUSH
56980: LD_INT 1
56982: NEG
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 1
56990: NEG
56991: PUSH
56992: LD_INT 2
56994: NEG
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: LD_INT 1
57002: PUSH
57003: LD_INT 2
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: LIST
57018: LIST
57019: LIST
57020: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57021: LD_ADDR_VAR 0 40
57025: PUSH
57026: LD_INT 0
57028: PUSH
57029: LD_INT 0
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PUSH
57036: LD_INT 0
57038: PUSH
57039: LD_INT 1
57041: NEG
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 1
57049: PUSH
57050: LD_INT 0
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 1
57059: PUSH
57060: LD_INT 1
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 0
57069: PUSH
57070: LD_INT 1
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 1
57079: NEG
57080: PUSH
57081: LD_INT 0
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: LD_INT 1
57090: NEG
57091: PUSH
57092: LD_INT 1
57094: NEG
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 1
57102: PUSH
57103: LD_INT 1
57105: NEG
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 1
57113: NEG
57114: PUSH
57115: LD_INT 1
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: LIST
57132: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57133: LD_ADDR_VAR 0 41
57137: PUSH
57138: LD_INT 0
57140: PUSH
57141: LD_INT 0
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: LD_INT 0
57150: PUSH
57151: LD_INT 1
57153: NEG
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 1
57161: PUSH
57162: LD_INT 0
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 1
57171: PUSH
57172: LD_INT 1
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: LD_INT 0
57181: PUSH
57182: LD_INT 1
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PUSH
57189: LD_INT 1
57191: NEG
57192: PUSH
57193: LD_INT 0
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 1
57202: NEG
57203: PUSH
57204: LD_INT 1
57206: NEG
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 1
57214: NEG
57215: PUSH
57216: LD_INT 2
57218: NEG
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 1
57226: PUSH
57227: LD_INT 1
57229: NEG
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 2
57237: PUSH
57238: LD_INT 0
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 2
57247: PUSH
57248: LD_INT 1
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 2
57257: PUSH
57258: LD_INT 2
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: LD_INT 1
57267: PUSH
57268: LD_INT 2
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PUSH
57275: LD_INT 1
57277: NEG
57278: PUSH
57279: LD_INT 1
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: LD_INT 2
57288: NEG
57289: PUSH
57290: LD_INT 0
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 2
57299: NEG
57300: PUSH
57301: LD_INT 1
57303: NEG
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 2
57311: NEG
57312: PUSH
57313: LD_INT 2
57315: NEG
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 2
57323: NEG
57324: PUSH
57325: LD_INT 3
57327: NEG
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: LD_INT 2
57335: PUSH
57336: LD_INT 1
57338: NEG
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: LD_INT 3
57346: PUSH
57347: LD_INT 0
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 3
57356: PUSH
57357: LD_INT 1
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: LD_INT 3
57366: PUSH
57367: LD_INT 2
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 3
57376: PUSH
57377: LD_INT 3
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: LD_INT 2
57386: PUSH
57387: LD_INT 3
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 2
57396: NEG
57397: PUSH
57398: LD_INT 1
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 3
57407: NEG
57408: PUSH
57409: LD_INT 0
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: PUSH
57416: LD_INT 3
57418: NEG
57419: PUSH
57420: LD_INT 1
57422: NEG
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 3
57430: NEG
57431: PUSH
57432: LD_INT 2
57434: NEG
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 3
57442: NEG
57443: PUSH
57444: LD_INT 3
57446: NEG
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: LIST
57458: LIST
57459: LIST
57460: LIST
57461: LIST
57462: LIST
57463: LIST
57464: LIST
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57483: LD_ADDR_VAR 0 42
57487: PUSH
57488: LD_INT 0
57490: PUSH
57491: LD_INT 0
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: PUSH
57498: LD_INT 0
57500: PUSH
57501: LD_INT 1
57503: NEG
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 1
57511: PUSH
57512: LD_INT 0
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: LD_INT 1
57521: PUSH
57522: LD_INT 1
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: LD_INT 0
57531: PUSH
57532: LD_INT 1
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 1
57541: NEG
57542: PUSH
57543: LD_INT 0
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 1
57552: NEG
57553: PUSH
57554: LD_INT 1
57556: NEG
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 1
57564: NEG
57565: PUSH
57566: LD_INT 2
57568: NEG
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: LD_INT 0
57576: PUSH
57577: LD_INT 2
57579: NEG
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 1
57587: PUSH
57588: LD_INT 1
57590: NEG
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 2
57598: PUSH
57599: LD_INT 1
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 2
57608: PUSH
57609: LD_INT 2
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: LD_INT 1
57618: PUSH
57619: LD_INT 2
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 0
57628: PUSH
57629: LD_INT 2
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: LD_INT 1
57638: NEG
57639: PUSH
57640: LD_INT 1
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: LD_INT 2
57649: NEG
57650: PUSH
57651: LD_INT 1
57653: NEG
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 2
57661: NEG
57662: PUSH
57663: LD_INT 2
57665: NEG
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PUSH
57671: LD_INT 2
57673: NEG
57674: PUSH
57675: LD_INT 3
57677: NEG
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PUSH
57683: LD_INT 1
57685: NEG
57686: PUSH
57687: LD_INT 3
57689: NEG
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 0
57697: PUSH
57698: LD_INT 3
57700: NEG
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: LD_INT 1
57708: PUSH
57709: LD_INT 2
57711: NEG
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 3
57719: PUSH
57720: LD_INT 2
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: LD_INT 3
57729: PUSH
57730: LD_INT 3
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: LD_INT 2
57739: PUSH
57740: LD_INT 3
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 1
57749: PUSH
57750: LD_INT 3
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 0
57759: PUSH
57760: LD_INT 3
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 1
57769: NEG
57770: PUSH
57771: LD_INT 2
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: LD_INT 3
57780: NEG
57781: PUSH
57782: LD_INT 2
57784: NEG
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: LD_INT 3
57792: NEG
57793: PUSH
57794: LD_INT 3
57796: NEG
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: LIST
57806: LIST
57807: LIST
57808: LIST
57809: LIST
57810: LIST
57811: LIST
57812: LIST
57813: LIST
57814: LIST
57815: LIST
57816: LIST
57817: LIST
57818: LIST
57819: LIST
57820: LIST
57821: LIST
57822: LIST
57823: LIST
57824: LIST
57825: LIST
57826: LIST
57827: LIST
57828: LIST
57829: LIST
57830: LIST
57831: LIST
57832: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57833: LD_ADDR_VAR 0 43
57837: PUSH
57838: LD_INT 0
57840: PUSH
57841: LD_INT 0
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: LD_INT 0
57850: PUSH
57851: LD_INT 1
57853: NEG
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: LD_INT 1
57861: PUSH
57862: LD_INT 0
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PUSH
57869: LD_INT 1
57871: PUSH
57872: LD_INT 1
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 0
57881: PUSH
57882: LD_INT 1
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: LD_INT 1
57891: NEG
57892: PUSH
57893: LD_INT 0
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 1
57902: NEG
57903: PUSH
57904: LD_INT 1
57906: NEG
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: LD_INT 1
57914: NEG
57915: PUSH
57916: LD_INT 2
57918: NEG
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: LD_INT 0
57926: PUSH
57927: LD_INT 2
57929: NEG
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: PUSH
57935: LD_INT 1
57937: PUSH
57938: LD_INT 1
57940: NEG
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: LD_INT 2
57948: PUSH
57949: LD_INT 0
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: PUSH
57956: LD_INT 2
57958: PUSH
57959: LD_INT 1
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 1
57968: PUSH
57969: LD_INT 2
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: LD_INT 0
57978: PUSH
57979: LD_INT 2
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: LD_INT 1
57988: NEG
57989: PUSH
57990: LD_INT 1
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: LD_INT 2
57999: NEG
58000: PUSH
58001: LD_INT 0
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: LD_INT 2
58010: NEG
58011: PUSH
58012: LD_INT 1
58014: NEG
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: PUSH
58020: LD_INT 1
58022: NEG
58023: PUSH
58024: LD_INT 3
58026: NEG
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 0
58034: PUSH
58035: LD_INT 3
58037: NEG
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: PUSH
58043: LD_INT 1
58045: PUSH
58046: LD_INT 2
58048: NEG
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: LD_INT 2
58056: PUSH
58057: LD_INT 1
58059: NEG
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 3
58067: PUSH
58068: LD_INT 0
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 3
58077: PUSH
58078: LD_INT 1
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: LD_INT 1
58087: PUSH
58088: LD_INT 3
58090: PUSH
58091: EMPTY
58092: LIST
58093: LIST
58094: PUSH
58095: LD_INT 0
58097: PUSH
58098: LD_INT 3
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: PUSH
58105: LD_INT 1
58107: NEG
58108: PUSH
58109: LD_INT 2
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: LD_INT 2
58118: NEG
58119: PUSH
58120: LD_INT 1
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: PUSH
58127: LD_INT 3
58129: NEG
58130: PUSH
58131: LD_INT 0
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 3
58140: NEG
58141: PUSH
58142: LD_INT 1
58144: NEG
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: LIST
58154: LIST
58155: LIST
58156: LIST
58157: LIST
58158: LIST
58159: LIST
58160: LIST
58161: LIST
58162: LIST
58163: LIST
58164: LIST
58165: LIST
58166: LIST
58167: LIST
58168: LIST
58169: LIST
58170: LIST
58171: LIST
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58181: LD_ADDR_VAR 0 44
58185: PUSH
58186: LD_INT 0
58188: PUSH
58189: LD_INT 0
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 0
58198: PUSH
58199: LD_INT 1
58201: NEG
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 1
58209: PUSH
58210: LD_INT 0
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 1
58219: PUSH
58220: LD_INT 1
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 0
58229: PUSH
58230: LD_INT 1
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: LD_INT 1
58239: NEG
58240: PUSH
58241: LD_INT 0
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: LD_INT 1
58250: NEG
58251: PUSH
58252: LD_INT 1
58254: NEG
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 1
58262: NEG
58263: PUSH
58264: LD_INT 2
58266: NEG
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 1
58274: PUSH
58275: LD_INT 1
58277: NEG
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: LD_INT 2
58285: PUSH
58286: LD_INT 0
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: PUSH
58293: LD_INT 2
58295: PUSH
58296: LD_INT 1
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PUSH
58303: LD_INT 2
58305: PUSH
58306: LD_INT 2
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PUSH
58313: LD_INT 1
58315: PUSH
58316: LD_INT 2
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: LD_INT 1
58325: NEG
58326: PUSH
58327: LD_INT 1
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: LD_INT 2
58336: NEG
58337: PUSH
58338: LD_INT 0
58340: PUSH
58341: EMPTY
58342: LIST
58343: LIST
58344: PUSH
58345: LD_INT 2
58347: NEG
58348: PUSH
58349: LD_INT 1
58351: NEG
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: LD_INT 2
58359: NEG
58360: PUSH
58361: LD_INT 2
58363: NEG
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: PUSH
58369: LD_INT 2
58371: NEG
58372: PUSH
58373: LD_INT 3
58375: NEG
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 2
58383: PUSH
58384: LD_INT 1
58386: NEG
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 3
58394: PUSH
58395: LD_INT 0
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 3
58404: PUSH
58405: LD_INT 1
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: LD_INT 3
58414: PUSH
58415: LD_INT 2
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: LD_INT 3
58424: PUSH
58425: LD_INT 3
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 2
58434: PUSH
58435: LD_INT 3
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 2
58444: NEG
58445: PUSH
58446: LD_INT 1
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 3
58455: NEG
58456: PUSH
58457: LD_INT 0
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: LD_INT 3
58466: NEG
58467: PUSH
58468: LD_INT 1
58470: NEG
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: PUSH
58476: LD_INT 3
58478: NEG
58479: PUSH
58480: LD_INT 2
58482: NEG
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: PUSH
58488: LD_INT 3
58490: NEG
58491: PUSH
58492: LD_INT 3
58494: NEG
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: LIST
58504: LIST
58505: LIST
58506: LIST
58507: LIST
58508: LIST
58509: LIST
58510: LIST
58511: LIST
58512: LIST
58513: LIST
58514: LIST
58515: LIST
58516: LIST
58517: LIST
58518: LIST
58519: LIST
58520: LIST
58521: LIST
58522: LIST
58523: LIST
58524: LIST
58525: LIST
58526: LIST
58527: LIST
58528: LIST
58529: LIST
58530: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58531: LD_ADDR_VAR 0 45
58535: PUSH
58536: LD_INT 0
58538: PUSH
58539: LD_INT 0
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 0
58548: PUSH
58549: LD_INT 1
58551: NEG
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: PUSH
58557: LD_INT 1
58559: PUSH
58560: LD_INT 0
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 1
58569: PUSH
58570: LD_INT 1
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: PUSH
58577: LD_INT 0
58579: PUSH
58580: LD_INT 1
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: PUSH
58587: LD_INT 1
58589: NEG
58590: PUSH
58591: LD_INT 0
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 1
58600: NEG
58601: PUSH
58602: LD_INT 1
58604: NEG
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: LD_INT 1
58612: NEG
58613: PUSH
58614: LD_INT 2
58616: NEG
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 0
58624: PUSH
58625: LD_INT 2
58627: NEG
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 1
58635: PUSH
58636: LD_INT 1
58638: NEG
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: LD_INT 2
58646: PUSH
58647: LD_INT 1
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: PUSH
58654: LD_INT 2
58656: PUSH
58657: LD_INT 2
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: PUSH
58664: LD_INT 1
58666: PUSH
58667: LD_INT 2
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: LD_INT 0
58676: PUSH
58677: LD_INT 2
58679: PUSH
58680: EMPTY
58681: LIST
58682: LIST
58683: PUSH
58684: LD_INT 1
58686: NEG
58687: PUSH
58688: LD_INT 1
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 2
58697: NEG
58698: PUSH
58699: LD_INT 1
58701: NEG
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: LD_INT 2
58709: NEG
58710: PUSH
58711: LD_INT 2
58713: NEG
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 2
58721: NEG
58722: PUSH
58723: LD_INT 3
58725: NEG
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PUSH
58731: LD_INT 1
58733: NEG
58734: PUSH
58735: LD_INT 3
58737: NEG
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 0
58745: PUSH
58746: LD_INT 3
58748: NEG
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 1
58756: PUSH
58757: LD_INT 2
58759: NEG
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PUSH
58765: LD_INT 3
58767: PUSH
58768: LD_INT 2
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: PUSH
58775: LD_INT 3
58777: PUSH
58778: LD_INT 3
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: PUSH
58785: LD_INT 2
58787: PUSH
58788: LD_INT 3
58790: PUSH
58791: EMPTY
58792: LIST
58793: LIST
58794: PUSH
58795: LD_INT 1
58797: PUSH
58798: LD_INT 3
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: PUSH
58805: LD_INT 0
58807: PUSH
58808: LD_INT 3
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: PUSH
58815: LD_INT 1
58817: NEG
58818: PUSH
58819: LD_INT 2
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 3
58828: NEG
58829: PUSH
58830: LD_INT 2
58832: NEG
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 3
58840: NEG
58841: PUSH
58842: LD_INT 3
58844: NEG
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: LIST
58854: LIST
58855: LIST
58856: LIST
58857: LIST
58858: LIST
58859: LIST
58860: LIST
58861: LIST
58862: LIST
58863: LIST
58864: LIST
58865: LIST
58866: LIST
58867: LIST
58868: LIST
58869: LIST
58870: LIST
58871: LIST
58872: LIST
58873: LIST
58874: LIST
58875: LIST
58876: LIST
58877: LIST
58878: LIST
58879: LIST
58880: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58881: LD_ADDR_VAR 0 46
58885: PUSH
58886: LD_INT 0
58888: PUSH
58889: LD_INT 0
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: LD_INT 0
58898: PUSH
58899: LD_INT 1
58901: NEG
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: LD_INT 1
58909: PUSH
58910: LD_INT 0
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: LD_INT 1
58919: PUSH
58920: LD_INT 1
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: PUSH
58927: LD_INT 0
58929: PUSH
58930: LD_INT 1
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 1
58939: NEG
58940: PUSH
58941: LD_INT 0
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 1
58950: NEG
58951: PUSH
58952: LD_INT 1
58954: NEG
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: PUSH
58960: LD_INT 1
58962: NEG
58963: PUSH
58964: LD_INT 2
58966: NEG
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: PUSH
58972: LD_INT 0
58974: PUSH
58975: LD_INT 2
58977: NEG
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: LD_INT 1
58985: PUSH
58986: LD_INT 1
58988: NEG
58989: PUSH
58990: EMPTY
58991: LIST
58992: LIST
58993: PUSH
58994: LD_INT 2
58996: PUSH
58997: LD_INT 0
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 2
59006: PUSH
59007: LD_INT 1
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: PUSH
59014: LD_INT 1
59016: PUSH
59017: LD_INT 2
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: LD_INT 0
59026: PUSH
59027: LD_INT 2
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: PUSH
59034: LD_INT 1
59036: NEG
59037: PUSH
59038: LD_INT 1
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: PUSH
59045: LD_INT 2
59047: NEG
59048: PUSH
59049: LD_INT 0
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 2
59058: NEG
59059: PUSH
59060: LD_INT 1
59062: NEG
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: LD_INT 1
59070: NEG
59071: PUSH
59072: LD_INT 3
59074: NEG
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 0
59082: PUSH
59083: LD_INT 3
59085: NEG
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: LD_INT 1
59093: PUSH
59094: LD_INT 2
59096: NEG
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 2
59104: PUSH
59105: LD_INT 1
59107: NEG
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 3
59115: PUSH
59116: LD_INT 0
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 3
59125: PUSH
59126: LD_INT 1
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 1
59135: PUSH
59136: LD_INT 3
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: PUSH
59143: LD_INT 0
59145: PUSH
59146: LD_INT 3
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: PUSH
59153: LD_INT 1
59155: NEG
59156: PUSH
59157: LD_INT 2
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: LD_INT 2
59166: NEG
59167: PUSH
59168: LD_INT 1
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 3
59177: NEG
59178: PUSH
59179: LD_INT 0
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 3
59188: NEG
59189: PUSH
59190: LD_INT 1
59192: NEG
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: LIST
59202: LIST
59203: LIST
59204: LIST
59205: LIST
59206: LIST
59207: LIST
59208: LIST
59209: LIST
59210: LIST
59211: LIST
59212: LIST
59213: LIST
59214: LIST
59215: LIST
59216: LIST
59217: LIST
59218: LIST
59219: LIST
59220: LIST
59221: LIST
59222: LIST
59223: LIST
59224: LIST
59225: LIST
59226: LIST
59227: LIST
59228: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59229: LD_ADDR_VAR 0 47
59233: PUSH
59234: LD_INT 0
59236: PUSH
59237: LD_INT 0
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: PUSH
59244: LD_INT 0
59246: PUSH
59247: LD_INT 1
59249: NEG
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: PUSH
59255: LD_INT 1
59257: PUSH
59258: LD_INT 0
59260: PUSH
59261: EMPTY
59262: LIST
59263: LIST
59264: PUSH
59265: LD_INT 1
59267: PUSH
59268: LD_INT 1
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: LD_INT 0
59277: PUSH
59278: LD_INT 1
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: LD_INT 1
59287: NEG
59288: PUSH
59289: LD_INT 0
59291: PUSH
59292: EMPTY
59293: LIST
59294: LIST
59295: PUSH
59296: LD_INT 1
59298: NEG
59299: PUSH
59300: LD_INT 1
59302: NEG
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: LD_INT 1
59310: NEG
59311: PUSH
59312: LD_INT 2
59314: NEG
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 0
59322: PUSH
59323: LD_INT 2
59325: NEG
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: LD_INT 1
59333: PUSH
59334: LD_INT 1
59336: NEG
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 2
59344: NEG
59345: PUSH
59346: LD_INT 1
59348: NEG
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: LD_INT 2
59356: NEG
59357: PUSH
59358: LD_INT 2
59360: NEG
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: LIST
59370: LIST
59371: LIST
59372: LIST
59373: LIST
59374: LIST
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59380: LD_ADDR_VAR 0 48
59384: PUSH
59385: LD_INT 0
59387: PUSH
59388: LD_INT 0
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: PUSH
59395: LD_INT 0
59397: PUSH
59398: LD_INT 1
59400: NEG
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: PUSH
59406: LD_INT 1
59408: PUSH
59409: LD_INT 0
59411: PUSH
59412: EMPTY
59413: LIST
59414: LIST
59415: PUSH
59416: LD_INT 1
59418: PUSH
59419: LD_INT 1
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: LD_INT 0
59428: PUSH
59429: LD_INT 1
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 1
59438: NEG
59439: PUSH
59440: LD_INT 0
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: LD_INT 1
59449: NEG
59450: PUSH
59451: LD_INT 1
59453: NEG
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: PUSH
59459: LD_INT 1
59461: NEG
59462: PUSH
59463: LD_INT 2
59465: NEG
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 0
59473: PUSH
59474: LD_INT 2
59476: NEG
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 1
59484: PUSH
59485: LD_INT 1
59487: NEG
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 2
59495: PUSH
59496: LD_INT 0
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: PUSH
59503: LD_INT 2
59505: PUSH
59506: LD_INT 1
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: LIST
59517: LIST
59518: LIST
59519: LIST
59520: LIST
59521: LIST
59522: LIST
59523: LIST
59524: LIST
59525: LIST
59526: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59527: LD_ADDR_VAR 0 49
59531: PUSH
59532: LD_INT 0
59534: PUSH
59535: LD_INT 0
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: LD_INT 0
59544: PUSH
59545: LD_INT 1
59547: NEG
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: LD_INT 1
59555: PUSH
59556: LD_INT 0
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PUSH
59563: LD_INT 1
59565: PUSH
59566: LD_INT 1
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: LD_INT 0
59575: PUSH
59576: LD_INT 1
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 1
59585: NEG
59586: PUSH
59587: LD_INT 0
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: PUSH
59594: LD_INT 1
59596: NEG
59597: PUSH
59598: LD_INT 1
59600: NEG
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: LD_INT 1
59608: PUSH
59609: LD_INT 1
59611: NEG
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PUSH
59617: LD_INT 2
59619: PUSH
59620: LD_INT 0
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: LD_INT 2
59629: PUSH
59630: LD_INT 1
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: LD_INT 2
59639: PUSH
59640: LD_INT 2
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: LD_INT 1
59649: PUSH
59650: LD_INT 2
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: LIST
59661: LIST
59662: LIST
59663: LIST
59664: LIST
59665: LIST
59666: LIST
59667: LIST
59668: LIST
59669: LIST
59670: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59671: LD_ADDR_VAR 0 50
59675: PUSH
59676: LD_INT 0
59678: PUSH
59679: LD_INT 0
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: LD_INT 0
59688: PUSH
59689: LD_INT 1
59691: NEG
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 1
59699: PUSH
59700: LD_INT 0
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 1
59709: PUSH
59710: LD_INT 1
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 0
59719: PUSH
59720: LD_INT 1
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: PUSH
59727: LD_INT 1
59729: NEG
59730: PUSH
59731: LD_INT 0
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 1
59740: NEG
59741: PUSH
59742: LD_INT 1
59744: NEG
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: PUSH
59750: LD_INT 2
59752: PUSH
59753: LD_INT 1
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: LD_INT 2
59762: PUSH
59763: LD_INT 2
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: PUSH
59770: LD_INT 1
59772: PUSH
59773: LD_INT 2
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 0
59782: PUSH
59783: LD_INT 2
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: LD_INT 1
59792: NEG
59793: PUSH
59794: LD_INT 1
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: LIST
59805: LIST
59806: LIST
59807: LIST
59808: LIST
59809: LIST
59810: LIST
59811: LIST
59812: LIST
59813: LIST
59814: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59815: LD_ADDR_VAR 0 51
59819: PUSH
59820: LD_INT 0
59822: PUSH
59823: LD_INT 0
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: PUSH
59830: LD_INT 0
59832: PUSH
59833: LD_INT 1
59835: NEG
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: PUSH
59841: LD_INT 1
59843: PUSH
59844: LD_INT 0
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: PUSH
59851: LD_INT 1
59853: PUSH
59854: LD_INT 1
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: LD_INT 0
59863: PUSH
59864: LD_INT 1
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: LD_INT 1
59873: NEG
59874: PUSH
59875: LD_INT 0
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: LD_INT 1
59884: NEG
59885: PUSH
59886: LD_INT 1
59888: NEG
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: PUSH
59894: LD_INT 1
59896: PUSH
59897: LD_INT 2
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 0
59906: PUSH
59907: LD_INT 2
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: LD_INT 1
59916: NEG
59917: PUSH
59918: LD_INT 1
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: PUSH
59925: LD_INT 2
59927: NEG
59928: PUSH
59929: LD_INT 0
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: LD_INT 2
59938: NEG
59939: PUSH
59940: LD_INT 1
59942: NEG
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: LIST
59952: LIST
59953: LIST
59954: LIST
59955: LIST
59956: LIST
59957: LIST
59958: LIST
59959: LIST
59960: LIST
59961: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59962: LD_ADDR_VAR 0 52
59966: PUSH
59967: LD_INT 0
59969: PUSH
59970: LD_INT 0
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: PUSH
59977: LD_INT 0
59979: PUSH
59980: LD_INT 1
59982: NEG
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PUSH
59988: LD_INT 1
59990: PUSH
59991: LD_INT 0
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 1
60000: PUSH
60001: LD_INT 1
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 0
60010: PUSH
60011: LD_INT 1
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: LD_INT 1
60020: NEG
60021: PUSH
60022: LD_INT 0
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: LD_INT 1
60031: NEG
60032: PUSH
60033: LD_INT 1
60035: NEG
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: LD_INT 1
60043: NEG
60044: PUSH
60045: LD_INT 2
60047: NEG
60048: PUSH
60049: EMPTY
60050: LIST
60051: LIST
60052: PUSH
60053: LD_INT 1
60055: NEG
60056: PUSH
60057: LD_INT 1
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 2
60066: NEG
60067: PUSH
60068: LD_INT 0
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: PUSH
60075: LD_INT 2
60077: NEG
60078: PUSH
60079: LD_INT 1
60081: NEG
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: PUSH
60087: LD_INT 2
60089: NEG
60090: PUSH
60091: LD_INT 2
60093: NEG
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: LIST
60103: LIST
60104: LIST
60105: LIST
60106: LIST
60107: LIST
60108: LIST
60109: LIST
60110: LIST
60111: LIST
60112: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60113: LD_ADDR_VAR 0 53
60117: PUSH
60118: LD_INT 0
60120: PUSH
60121: LD_INT 0
60123: PUSH
60124: EMPTY
60125: LIST
60126: LIST
60127: PUSH
60128: LD_INT 0
60130: PUSH
60131: LD_INT 1
60133: NEG
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: PUSH
60139: LD_INT 1
60141: PUSH
60142: LD_INT 0
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: PUSH
60149: LD_INT 1
60151: PUSH
60152: LD_INT 1
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: PUSH
60159: LD_INT 0
60161: PUSH
60162: LD_INT 1
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: PUSH
60169: LD_INT 1
60171: NEG
60172: PUSH
60173: LD_INT 0
60175: PUSH
60176: EMPTY
60177: LIST
60178: LIST
60179: PUSH
60180: LD_INT 1
60182: NEG
60183: PUSH
60184: LD_INT 1
60186: NEG
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: PUSH
60192: LD_INT 1
60194: NEG
60195: PUSH
60196: LD_INT 2
60198: NEG
60199: PUSH
60200: EMPTY
60201: LIST
60202: LIST
60203: PUSH
60204: LD_INT 0
60206: PUSH
60207: LD_INT 2
60209: NEG
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: LD_INT 1
60217: PUSH
60218: LD_INT 1
60220: NEG
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: LD_INT 2
60228: PUSH
60229: LD_INT 0
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: PUSH
60236: LD_INT 2
60238: PUSH
60239: LD_INT 1
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: LD_INT 2
60248: PUSH
60249: LD_INT 2
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: PUSH
60256: LD_INT 1
60258: PUSH
60259: LD_INT 2
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: PUSH
60266: LD_INT 0
60268: PUSH
60269: LD_INT 2
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: PUSH
60276: LD_INT 1
60278: NEG
60279: PUSH
60280: LD_INT 1
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: PUSH
60287: LD_INT 2
60289: NEG
60290: PUSH
60291: LD_INT 0
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: PUSH
60298: LD_INT 2
60300: NEG
60301: PUSH
60302: LD_INT 1
60304: NEG
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: PUSH
60310: LD_INT 2
60312: NEG
60313: PUSH
60314: LD_INT 2
60316: NEG
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: LIST
60326: LIST
60327: LIST
60328: LIST
60329: LIST
60330: LIST
60331: LIST
60332: LIST
60333: LIST
60334: LIST
60335: LIST
60336: LIST
60337: LIST
60338: LIST
60339: LIST
60340: LIST
60341: LIST
60342: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60343: LD_ADDR_VAR 0 54
60347: PUSH
60348: LD_INT 0
60350: PUSH
60351: LD_INT 0
60353: PUSH
60354: EMPTY
60355: LIST
60356: LIST
60357: PUSH
60358: LD_INT 0
60360: PUSH
60361: LD_INT 1
60363: NEG
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: LD_INT 1
60371: PUSH
60372: LD_INT 0
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 1
60381: PUSH
60382: LD_INT 1
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: PUSH
60389: LD_INT 0
60391: PUSH
60392: LD_INT 1
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: LD_INT 1
60401: NEG
60402: PUSH
60403: LD_INT 0
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: PUSH
60410: LD_INT 1
60412: NEG
60413: PUSH
60414: LD_INT 1
60416: NEG
60417: PUSH
60418: EMPTY
60419: LIST
60420: LIST
60421: PUSH
60422: LD_INT 1
60424: NEG
60425: PUSH
60426: LD_INT 2
60428: NEG
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: PUSH
60434: LD_INT 0
60436: PUSH
60437: LD_INT 2
60439: NEG
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: PUSH
60445: LD_INT 1
60447: PUSH
60448: LD_INT 1
60450: NEG
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: PUSH
60456: LD_INT 2
60458: PUSH
60459: LD_INT 0
60461: PUSH
60462: EMPTY
60463: LIST
60464: LIST
60465: PUSH
60466: LD_INT 2
60468: PUSH
60469: LD_INT 1
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: LD_INT 2
60478: PUSH
60479: LD_INT 2
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PUSH
60486: LD_INT 1
60488: PUSH
60489: LD_INT 2
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: PUSH
60496: LD_INT 0
60498: PUSH
60499: LD_INT 2
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: PUSH
60506: LD_INT 1
60508: NEG
60509: PUSH
60510: LD_INT 1
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: PUSH
60517: LD_INT 2
60519: NEG
60520: PUSH
60521: LD_INT 0
60523: PUSH
60524: EMPTY
60525: LIST
60526: LIST
60527: PUSH
60528: LD_INT 2
60530: NEG
60531: PUSH
60532: LD_INT 1
60534: NEG
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: PUSH
60540: LD_INT 2
60542: NEG
60543: PUSH
60544: LD_INT 2
60546: NEG
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: LIST
60556: LIST
60557: LIST
60558: LIST
60559: LIST
60560: LIST
60561: LIST
60562: LIST
60563: LIST
60564: LIST
60565: LIST
60566: LIST
60567: LIST
60568: LIST
60569: LIST
60570: LIST
60571: LIST
60572: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60573: LD_ADDR_VAR 0 55
60577: PUSH
60578: LD_INT 0
60580: PUSH
60581: LD_INT 0
60583: PUSH
60584: EMPTY
60585: LIST
60586: LIST
60587: PUSH
60588: LD_INT 0
60590: PUSH
60591: LD_INT 1
60593: NEG
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: LD_INT 1
60601: PUSH
60602: LD_INT 0
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: LD_INT 1
60611: PUSH
60612: LD_INT 1
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: PUSH
60619: LD_INT 0
60621: PUSH
60622: LD_INT 1
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: PUSH
60629: LD_INT 1
60631: NEG
60632: PUSH
60633: LD_INT 0
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: PUSH
60640: LD_INT 1
60642: NEG
60643: PUSH
60644: LD_INT 1
60646: NEG
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 1
60654: NEG
60655: PUSH
60656: LD_INT 2
60658: NEG
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 0
60666: PUSH
60667: LD_INT 2
60669: NEG
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: PUSH
60675: LD_INT 1
60677: PUSH
60678: LD_INT 1
60680: NEG
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: PUSH
60686: LD_INT 2
60688: PUSH
60689: LD_INT 0
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: PUSH
60696: LD_INT 2
60698: PUSH
60699: LD_INT 1
60701: PUSH
60702: EMPTY
60703: LIST
60704: LIST
60705: PUSH
60706: LD_INT 2
60708: PUSH
60709: LD_INT 2
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: PUSH
60716: LD_INT 1
60718: PUSH
60719: LD_INT 2
60721: PUSH
60722: EMPTY
60723: LIST
60724: LIST
60725: PUSH
60726: LD_INT 0
60728: PUSH
60729: LD_INT 2
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PUSH
60736: LD_INT 1
60738: NEG
60739: PUSH
60740: LD_INT 1
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: PUSH
60747: LD_INT 2
60749: NEG
60750: PUSH
60751: LD_INT 0
60753: PUSH
60754: EMPTY
60755: LIST
60756: LIST
60757: PUSH
60758: LD_INT 2
60760: NEG
60761: PUSH
60762: LD_INT 1
60764: NEG
60765: PUSH
60766: EMPTY
60767: LIST
60768: LIST
60769: PUSH
60770: LD_INT 2
60772: NEG
60773: PUSH
60774: LD_INT 2
60776: NEG
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: LIST
60786: LIST
60787: LIST
60788: LIST
60789: LIST
60790: LIST
60791: LIST
60792: LIST
60793: LIST
60794: LIST
60795: LIST
60796: LIST
60797: LIST
60798: LIST
60799: LIST
60800: LIST
60801: LIST
60802: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60803: LD_ADDR_VAR 0 56
60807: PUSH
60808: LD_INT 0
60810: PUSH
60811: LD_INT 0
60813: PUSH
60814: EMPTY
60815: LIST
60816: LIST
60817: PUSH
60818: LD_INT 0
60820: PUSH
60821: LD_INT 1
60823: NEG
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: LD_INT 1
60831: PUSH
60832: LD_INT 0
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: PUSH
60839: LD_INT 1
60841: PUSH
60842: LD_INT 1
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: PUSH
60849: LD_INT 0
60851: PUSH
60852: LD_INT 1
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: PUSH
60859: LD_INT 1
60861: NEG
60862: PUSH
60863: LD_INT 0
60865: PUSH
60866: EMPTY
60867: LIST
60868: LIST
60869: PUSH
60870: LD_INT 1
60872: NEG
60873: PUSH
60874: LD_INT 1
60876: NEG
60877: PUSH
60878: EMPTY
60879: LIST
60880: LIST
60881: PUSH
60882: LD_INT 1
60884: NEG
60885: PUSH
60886: LD_INT 2
60888: NEG
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: LD_INT 0
60896: PUSH
60897: LD_INT 2
60899: NEG
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PUSH
60905: LD_INT 1
60907: PUSH
60908: LD_INT 1
60910: NEG
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: LD_INT 2
60918: PUSH
60919: LD_INT 0
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: PUSH
60926: LD_INT 2
60928: PUSH
60929: LD_INT 1
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: LD_INT 2
60938: PUSH
60939: LD_INT 2
60941: PUSH
60942: EMPTY
60943: LIST
60944: LIST
60945: PUSH
60946: LD_INT 1
60948: PUSH
60949: LD_INT 2
60951: PUSH
60952: EMPTY
60953: LIST
60954: LIST
60955: PUSH
60956: LD_INT 0
60958: PUSH
60959: LD_INT 2
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: LD_INT 1
60968: NEG
60969: PUSH
60970: LD_INT 1
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: PUSH
60977: LD_INT 2
60979: NEG
60980: PUSH
60981: LD_INT 0
60983: PUSH
60984: EMPTY
60985: LIST
60986: LIST
60987: PUSH
60988: LD_INT 2
60990: NEG
60991: PUSH
60992: LD_INT 1
60994: NEG
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: LD_INT 2
61002: NEG
61003: PUSH
61004: LD_INT 2
61006: NEG
61007: PUSH
61008: EMPTY
61009: LIST
61010: LIST
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: LIST
61016: LIST
61017: LIST
61018: LIST
61019: LIST
61020: LIST
61021: LIST
61022: LIST
61023: LIST
61024: LIST
61025: LIST
61026: LIST
61027: LIST
61028: LIST
61029: LIST
61030: LIST
61031: LIST
61032: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61033: LD_ADDR_VAR 0 57
61037: PUSH
61038: LD_INT 0
61040: PUSH
61041: LD_INT 0
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: PUSH
61048: LD_INT 0
61050: PUSH
61051: LD_INT 1
61053: NEG
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: PUSH
61059: LD_INT 1
61061: PUSH
61062: LD_INT 0
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: PUSH
61069: LD_INT 1
61071: PUSH
61072: LD_INT 1
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: PUSH
61079: LD_INT 0
61081: PUSH
61082: LD_INT 1
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: PUSH
61089: LD_INT 1
61091: NEG
61092: PUSH
61093: LD_INT 0
61095: PUSH
61096: EMPTY
61097: LIST
61098: LIST
61099: PUSH
61100: LD_INT 1
61102: NEG
61103: PUSH
61104: LD_INT 1
61106: NEG
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: LD_INT 1
61114: NEG
61115: PUSH
61116: LD_INT 2
61118: NEG
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: LD_INT 0
61126: PUSH
61127: LD_INT 2
61129: NEG
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: LD_INT 1
61137: PUSH
61138: LD_INT 1
61140: NEG
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 2
61148: PUSH
61149: LD_INT 0
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: LD_INT 2
61158: PUSH
61159: LD_INT 1
61161: PUSH
61162: EMPTY
61163: LIST
61164: LIST
61165: PUSH
61166: LD_INT 2
61168: PUSH
61169: LD_INT 2
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: PUSH
61176: LD_INT 1
61178: PUSH
61179: LD_INT 2
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: PUSH
61186: LD_INT 0
61188: PUSH
61189: LD_INT 2
61191: PUSH
61192: EMPTY
61193: LIST
61194: LIST
61195: PUSH
61196: LD_INT 1
61198: NEG
61199: PUSH
61200: LD_INT 1
61202: PUSH
61203: EMPTY
61204: LIST
61205: LIST
61206: PUSH
61207: LD_INT 2
61209: NEG
61210: PUSH
61211: LD_INT 0
61213: PUSH
61214: EMPTY
61215: LIST
61216: LIST
61217: PUSH
61218: LD_INT 2
61220: NEG
61221: PUSH
61222: LD_INT 1
61224: NEG
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 2
61232: NEG
61233: PUSH
61234: LD_INT 2
61236: NEG
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: LIST
61258: LIST
61259: LIST
61260: LIST
61261: LIST
61262: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61263: LD_ADDR_VAR 0 58
61267: PUSH
61268: LD_INT 0
61270: PUSH
61271: LD_INT 0
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: LD_INT 0
61280: PUSH
61281: LD_INT 1
61283: NEG
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: PUSH
61289: LD_INT 1
61291: PUSH
61292: LD_INT 0
61294: PUSH
61295: EMPTY
61296: LIST
61297: LIST
61298: PUSH
61299: LD_INT 1
61301: PUSH
61302: LD_INT 1
61304: PUSH
61305: EMPTY
61306: LIST
61307: LIST
61308: PUSH
61309: LD_INT 0
61311: PUSH
61312: LD_INT 1
61314: PUSH
61315: EMPTY
61316: LIST
61317: LIST
61318: PUSH
61319: LD_INT 1
61321: NEG
61322: PUSH
61323: LD_INT 0
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: PUSH
61330: LD_INT 1
61332: NEG
61333: PUSH
61334: LD_INT 1
61336: NEG
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: LD_INT 1
61344: NEG
61345: PUSH
61346: LD_INT 2
61348: NEG
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: LD_INT 0
61356: PUSH
61357: LD_INT 2
61359: NEG
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 1
61367: PUSH
61368: LD_INT 1
61370: NEG
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: LD_INT 2
61378: PUSH
61379: LD_INT 0
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: LD_INT 2
61388: PUSH
61389: LD_INT 1
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: PUSH
61396: LD_INT 2
61398: PUSH
61399: LD_INT 2
61401: PUSH
61402: EMPTY
61403: LIST
61404: LIST
61405: PUSH
61406: LD_INT 1
61408: PUSH
61409: LD_INT 2
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: PUSH
61416: LD_INT 0
61418: PUSH
61419: LD_INT 2
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: PUSH
61426: LD_INT 1
61428: NEG
61429: PUSH
61430: LD_INT 1
61432: PUSH
61433: EMPTY
61434: LIST
61435: LIST
61436: PUSH
61437: LD_INT 2
61439: NEG
61440: PUSH
61441: LD_INT 0
61443: PUSH
61444: EMPTY
61445: LIST
61446: LIST
61447: PUSH
61448: LD_INT 2
61450: NEG
61451: PUSH
61452: LD_INT 1
61454: NEG
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: LD_INT 2
61462: NEG
61463: PUSH
61464: LD_INT 2
61466: NEG
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: LIST
61476: LIST
61477: LIST
61478: LIST
61479: LIST
61480: LIST
61481: LIST
61482: LIST
61483: LIST
61484: LIST
61485: LIST
61486: LIST
61487: LIST
61488: LIST
61489: LIST
61490: LIST
61491: LIST
61492: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61493: LD_ADDR_VAR 0 59
61497: PUSH
61498: LD_INT 0
61500: PUSH
61501: LD_INT 0
61503: PUSH
61504: EMPTY
61505: LIST
61506: LIST
61507: PUSH
61508: LD_INT 0
61510: PUSH
61511: LD_INT 1
61513: NEG
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PUSH
61519: LD_INT 1
61521: PUSH
61522: LD_INT 0
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: PUSH
61529: LD_INT 1
61531: PUSH
61532: LD_INT 1
61534: PUSH
61535: EMPTY
61536: LIST
61537: LIST
61538: PUSH
61539: LD_INT 0
61541: PUSH
61542: LD_INT 1
61544: PUSH
61545: EMPTY
61546: LIST
61547: LIST
61548: PUSH
61549: LD_INT 1
61551: NEG
61552: PUSH
61553: LD_INT 0
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PUSH
61560: LD_INT 1
61562: NEG
61563: PUSH
61564: LD_INT 1
61566: NEG
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: LIST
61576: LIST
61577: LIST
61578: LIST
61579: LIST
61580: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61581: LD_ADDR_VAR 0 60
61585: PUSH
61586: LD_INT 0
61588: PUSH
61589: LD_INT 0
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: PUSH
61596: LD_INT 0
61598: PUSH
61599: LD_INT 1
61601: NEG
61602: PUSH
61603: EMPTY
61604: LIST
61605: LIST
61606: PUSH
61607: LD_INT 1
61609: PUSH
61610: LD_INT 0
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: LD_INT 1
61619: PUSH
61620: LD_INT 1
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: PUSH
61627: LD_INT 0
61629: PUSH
61630: LD_INT 1
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: PUSH
61637: LD_INT 1
61639: NEG
61640: PUSH
61641: LD_INT 0
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: PUSH
61648: LD_INT 1
61650: NEG
61651: PUSH
61652: LD_INT 1
61654: NEG
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: PUSH
61660: EMPTY
61661: LIST
61662: LIST
61663: LIST
61664: LIST
61665: LIST
61666: LIST
61667: LIST
61668: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61669: LD_ADDR_VAR 0 61
61673: PUSH
61674: LD_INT 0
61676: PUSH
61677: LD_INT 0
61679: PUSH
61680: EMPTY
61681: LIST
61682: LIST
61683: PUSH
61684: LD_INT 0
61686: PUSH
61687: LD_INT 1
61689: NEG
61690: PUSH
61691: EMPTY
61692: LIST
61693: LIST
61694: PUSH
61695: LD_INT 1
61697: PUSH
61698: LD_INT 0
61700: PUSH
61701: EMPTY
61702: LIST
61703: LIST
61704: PUSH
61705: LD_INT 1
61707: PUSH
61708: LD_INT 1
61710: PUSH
61711: EMPTY
61712: LIST
61713: LIST
61714: PUSH
61715: LD_INT 0
61717: PUSH
61718: LD_INT 1
61720: PUSH
61721: EMPTY
61722: LIST
61723: LIST
61724: PUSH
61725: LD_INT 1
61727: NEG
61728: PUSH
61729: LD_INT 0
61731: PUSH
61732: EMPTY
61733: LIST
61734: LIST
61735: PUSH
61736: LD_INT 1
61738: NEG
61739: PUSH
61740: LD_INT 1
61742: NEG
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: LIST
61752: LIST
61753: LIST
61754: LIST
61755: LIST
61756: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61757: LD_ADDR_VAR 0 62
61761: PUSH
61762: LD_INT 0
61764: PUSH
61765: LD_INT 0
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: PUSH
61772: LD_INT 0
61774: PUSH
61775: LD_INT 1
61777: NEG
61778: PUSH
61779: EMPTY
61780: LIST
61781: LIST
61782: PUSH
61783: LD_INT 1
61785: PUSH
61786: LD_INT 0
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: PUSH
61793: LD_INT 1
61795: PUSH
61796: LD_INT 1
61798: PUSH
61799: EMPTY
61800: LIST
61801: LIST
61802: PUSH
61803: LD_INT 0
61805: PUSH
61806: LD_INT 1
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: PUSH
61813: LD_INT 1
61815: NEG
61816: PUSH
61817: LD_INT 0
61819: PUSH
61820: EMPTY
61821: LIST
61822: LIST
61823: PUSH
61824: LD_INT 1
61826: NEG
61827: PUSH
61828: LD_INT 1
61830: NEG
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: LIST
61840: LIST
61841: LIST
61842: LIST
61843: LIST
61844: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61845: LD_ADDR_VAR 0 63
61849: PUSH
61850: LD_INT 0
61852: PUSH
61853: LD_INT 0
61855: PUSH
61856: EMPTY
61857: LIST
61858: LIST
61859: PUSH
61860: LD_INT 0
61862: PUSH
61863: LD_INT 1
61865: NEG
61866: PUSH
61867: EMPTY
61868: LIST
61869: LIST
61870: PUSH
61871: LD_INT 1
61873: PUSH
61874: LD_INT 0
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: PUSH
61881: LD_INT 1
61883: PUSH
61884: LD_INT 1
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PUSH
61891: LD_INT 0
61893: PUSH
61894: LD_INT 1
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: PUSH
61901: LD_INT 1
61903: NEG
61904: PUSH
61905: LD_INT 0
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: PUSH
61912: LD_INT 1
61914: NEG
61915: PUSH
61916: LD_INT 1
61918: NEG
61919: PUSH
61920: EMPTY
61921: LIST
61922: LIST
61923: PUSH
61924: EMPTY
61925: LIST
61926: LIST
61927: LIST
61928: LIST
61929: LIST
61930: LIST
61931: LIST
61932: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61933: LD_ADDR_VAR 0 64
61937: PUSH
61938: LD_INT 0
61940: PUSH
61941: LD_INT 0
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: PUSH
61948: LD_INT 0
61950: PUSH
61951: LD_INT 1
61953: NEG
61954: PUSH
61955: EMPTY
61956: LIST
61957: LIST
61958: PUSH
61959: LD_INT 1
61961: PUSH
61962: LD_INT 0
61964: PUSH
61965: EMPTY
61966: LIST
61967: LIST
61968: PUSH
61969: LD_INT 1
61971: PUSH
61972: LD_INT 1
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: PUSH
61979: LD_INT 0
61981: PUSH
61982: LD_INT 1
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: LD_INT 1
61991: NEG
61992: PUSH
61993: LD_INT 0
61995: PUSH
61996: EMPTY
61997: LIST
61998: LIST
61999: PUSH
62000: LD_INT 1
62002: NEG
62003: PUSH
62004: LD_INT 1
62006: NEG
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: LIST
62016: LIST
62017: LIST
62018: LIST
62019: LIST
62020: ST_TO_ADDR
// end ; 1 :
62021: GO 67918
62023: LD_INT 1
62025: DOUBLE
62026: EQUAL
62027: IFTRUE 62031
62029: GO 64654
62031: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62032: LD_ADDR_VAR 0 11
62036: PUSH
62037: LD_INT 1
62039: NEG
62040: PUSH
62041: LD_INT 3
62043: NEG
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: PUSH
62049: LD_INT 0
62051: PUSH
62052: LD_INT 3
62054: NEG
62055: PUSH
62056: EMPTY
62057: LIST
62058: LIST
62059: PUSH
62060: LD_INT 1
62062: PUSH
62063: LD_INT 2
62065: NEG
62066: PUSH
62067: EMPTY
62068: LIST
62069: LIST
62070: PUSH
62071: EMPTY
62072: LIST
62073: LIST
62074: LIST
62075: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62076: LD_ADDR_VAR 0 12
62080: PUSH
62081: LD_INT 2
62083: PUSH
62084: LD_INT 1
62086: NEG
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: PUSH
62092: LD_INT 3
62094: PUSH
62095: LD_INT 0
62097: PUSH
62098: EMPTY
62099: LIST
62100: LIST
62101: PUSH
62102: LD_INT 3
62104: PUSH
62105: LD_INT 1
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: PUSH
62112: EMPTY
62113: LIST
62114: LIST
62115: LIST
62116: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62117: LD_ADDR_VAR 0 13
62121: PUSH
62122: LD_INT 3
62124: PUSH
62125: LD_INT 2
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: PUSH
62132: LD_INT 3
62134: PUSH
62135: LD_INT 3
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: PUSH
62142: LD_INT 2
62144: PUSH
62145: LD_INT 3
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: PUSH
62152: EMPTY
62153: LIST
62154: LIST
62155: LIST
62156: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62157: LD_ADDR_VAR 0 14
62161: PUSH
62162: LD_INT 1
62164: PUSH
62165: LD_INT 3
62167: PUSH
62168: EMPTY
62169: LIST
62170: LIST
62171: PUSH
62172: LD_INT 0
62174: PUSH
62175: LD_INT 3
62177: PUSH
62178: EMPTY
62179: LIST
62180: LIST
62181: PUSH
62182: LD_INT 1
62184: NEG
62185: PUSH
62186: LD_INT 2
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: PUSH
62193: EMPTY
62194: LIST
62195: LIST
62196: LIST
62197: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62198: LD_ADDR_VAR 0 15
62202: PUSH
62203: LD_INT 2
62205: NEG
62206: PUSH
62207: LD_INT 1
62209: PUSH
62210: EMPTY
62211: LIST
62212: LIST
62213: PUSH
62214: LD_INT 3
62216: NEG
62217: PUSH
62218: LD_INT 0
62220: PUSH
62221: EMPTY
62222: LIST
62223: LIST
62224: PUSH
62225: LD_INT 3
62227: NEG
62228: PUSH
62229: LD_INT 1
62231: NEG
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: LIST
62241: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62242: LD_ADDR_VAR 0 16
62246: PUSH
62247: LD_INT 2
62249: NEG
62250: PUSH
62251: LD_INT 3
62253: NEG
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: PUSH
62259: LD_INT 3
62261: NEG
62262: PUSH
62263: LD_INT 2
62265: NEG
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: PUSH
62271: LD_INT 3
62273: NEG
62274: PUSH
62275: LD_INT 3
62277: NEG
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: PUSH
62283: EMPTY
62284: LIST
62285: LIST
62286: LIST
62287: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62288: LD_ADDR_VAR 0 17
62292: PUSH
62293: LD_INT 1
62295: NEG
62296: PUSH
62297: LD_INT 3
62299: NEG
62300: PUSH
62301: EMPTY
62302: LIST
62303: LIST
62304: PUSH
62305: LD_INT 0
62307: PUSH
62308: LD_INT 3
62310: NEG
62311: PUSH
62312: EMPTY
62313: LIST
62314: LIST
62315: PUSH
62316: LD_INT 1
62318: PUSH
62319: LD_INT 2
62321: NEG
62322: PUSH
62323: EMPTY
62324: LIST
62325: LIST
62326: PUSH
62327: EMPTY
62328: LIST
62329: LIST
62330: LIST
62331: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62332: LD_ADDR_VAR 0 18
62336: PUSH
62337: LD_INT 2
62339: PUSH
62340: LD_INT 1
62342: NEG
62343: PUSH
62344: EMPTY
62345: LIST
62346: LIST
62347: PUSH
62348: LD_INT 3
62350: PUSH
62351: LD_INT 0
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: PUSH
62358: LD_INT 3
62360: PUSH
62361: LD_INT 1
62363: PUSH
62364: EMPTY
62365: LIST
62366: LIST
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: LIST
62372: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62373: LD_ADDR_VAR 0 19
62377: PUSH
62378: LD_INT 3
62380: PUSH
62381: LD_INT 2
62383: PUSH
62384: EMPTY
62385: LIST
62386: LIST
62387: PUSH
62388: LD_INT 3
62390: PUSH
62391: LD_INT 3
62393: PUSH
62394: EMPTY
62395: LIST
62396: LIST
62397: PUSH
62398: LD_INT 2
62400: PUSH
62401: LD_INT 3
62403: PUSH
62404: EMPTY
62405: LIST
62406: LIST
62407: PUSH
62408: EMPTY
62409: LIST
62410: LIST
62411: LIST
62412: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62413: LD_ADDR_VAR 0 20
62417: PUSH
62418: LD_INT 1
62420: PUSH
62421: LD_INT 3
62423: PUSH
62424: EMPTY
62425: LIST
62426: LIST
62427: PUSH
62428: LD_INT 0
62430: PUSH
62431: LD_INT 3
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: PUSH
62438: LD_INT 1
62440: NEG
62441: PUSH
62442: LD_INT 2
62444: PUSH
62445: EMPTY
62446: LIST
62447: LIST
62448: PUSH
62449: EMPTY
62450: LIST
62451: LIST
62452: LIST
62453: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62454: LD_ADDR_VAR 0 21
62458: PUSH
62459: LD_INT 2
62461: NEG
62462: PUSH
62463: LD_INT 1
62465: PUSH
62466: EMPTY
62467: LIST
62468: LIST
62469: PUSH
62470: LD_INT 3
62472: NEG
62473: PUSH
62474: LD_INT 0
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: PUSH
62481: LD_INT 3
62483: NEG
62484: PUSH
62485: LD_INT 1
62487: NEG
62488: PUSH
62489: EMPTY
62490: LIST
62491: LIST
62492: PUSH
62493: EMPTY
62494: LIST
62495: LIST
62496: LIST
62497: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62498: LD_ADDR_VAR 0 22
62502: PUSH
62503: LD_INT 2
62505: NEG
62506: PUSH
62507: LD_INT 3
62509: NEG
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: PUSH
62515: LD_INT 3
62517: NEG
62518: PUSH
62519: LD_INT 2
62521: NEG
62522: PUSH
62523: EMPTY
62524: LIST
62525: LIST
62526: PUSH
62527: LD_INT 3
62529: NEG
62530: PUSH
62531: LD_INT 3
62533: NEG
62534: PUSH
62535: EMPTY
62536: LIST
62537: LIST
62538: PUSH
62539: EMPTY
62540: LIST
62541: LIST
62542: LIST
62543: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
62544: LD_ADDR_VAR 0 23
62548: PUSH
62549: LD_INT 0
62551: PUSH
62552: LD_INT 3
62554: NEG
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: PUSH
62560: LD_INT 1
62562: NEG
62563: PUSH
62564: LD_INT 4
62566: NEG
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: PUSH
62572: LD_INT 1
62574: PUSH
62575: LD_INT 3
62577: NEG
62578: PUSH
62579: EMPTY
62580: LIST
62581: LIST
62582: PUSH
62583: EMPTY
62584: LIST
62585: LIST
62586: LIST
62587: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
62588: LD_ADDR_VAR 0 24
62592: PUSH
62593: LD_INT 3
62595: PUSH
62596: LD_INT 0
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: PUSH
62603: LD_INT 3
62605: PUSH
62606: LD_INT 1
62608: NEG
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: PUSH
62614: LD_INT 4
62616: PUSH
62617: LD_INT 1
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: PUSH
62624: EMPTY
62625: LIST
62626: LIST
62627: LIST
62628: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
62629: LD_ADDR_VAR 0 25
62633: PUSH
62634: LD_INT 3
62636: PUSH
62637: LD_INT 3
62639: PUSH
62640: EMPTY
62641: LIST
62642: LIST
62643: PUSH
62644: LD_INT 4
62646: PUSH
62647: LD_INT 3
62649: PUSH
62650: EMPTY
62651: LIST
62652: LIST
62653: PUSH
62654: LD_INT 3
62656: PUSH
62657: LD_INT 4
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: LIST
62668: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
62669: LD_ADDR_VAR 0 26
62673: PUSH
62674: LD_INT 0
62676: PUSH
62677: LD_INT 3
62679: PUSH
62680: EMPTY
62681: LIST
62682: LIST
62683: PUSH
62684: LD_INT 1
62686: PUSH
62687: LD_INT 4
62689: PUSH
62690: EMPTY
62691: LIST
62692: LIST
62693: PUSH
62694: LD_INT 1
62696: NEG
62697: PUSH
62698: LD_INT 3
62700: PUSH
62701: EMPTY
62702: LIST
62703: LIST
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: LIST
62709: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
62710: LD_ADDR_VAR 0 27
62714: PUSH
62715: LD_INT 3
62717: NEG
62718: PUSH
62719: LD_INT 0
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: PUSH
62726: LD_INT 3
62728: NEG
62729: PUSH
62730: LD_INT 1
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: PUSH
62737: LD_INT 4
62739: NEG
62740: PUSH
62741: LD_INT 1
62743: NEG
62744: PUSH
62745: EMPTY
62746: LIST
62747: LIST
62748: PUSH
62749: EMPTY
62750: LIST
62751: LIST
62752: LIST
62753: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
62754: LD_ADDR_VAR 0 28
62758: PUSH
62759: LD_INT 3
62761: NEG
62762: PUSH
62763: LD_INT 3
62765: NEG
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: PUSH
62771: LD_INT 3
62773: NEG
62774: PUSH
62775: LD_INT 4
62777: NEG
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: PUSH
62783: LD_INT 4
62785: NEG
62786: PUSH
62787: LD_INT 3
62789: NEG
62790: PUSH
62791: EMPTY
62792: LIST
62793: LIST
62794: PUSH
62795: EMPTY
62796: LIST
62797: LIST
62798: LIST
62799: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
62800: LD_ADDR_VAR 0 29
62804: PUSH
62805: LD_INT 1
62807: NEG
62808: PUSH
62809: LD_INT 3
62811: NEG
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: PUSH
62817: LD_INT 0
62819: PUSH
62820: LD_INT 3
62822: NEG
62823: PUSH
62824: EMPTY
62825: LIST
62826: LIST
62827: PUSH
62828: LD_INT 1
62830: PUSH
62831: LD_INT 2
62833: NEG
62834: PUSH
62835: EMPTY
62836: LIST
62837: LIST
62838: PUSH
62839: LD_INT 1
62841: NEG
62842: PUSH
62843: LD_INT 4
62845: NEG
62846: PUSH
62847: EMPTY
62848: LIST
62849: LIST
62850: PUSH
62851: LD_INT 0
62853: PUSH
62854: LD_INT 4
62856: NEG
62857: PUSH
62858: EMPTY
62859: LIST
62860: LIST
62861: PUSH
62862: LD_INT 1
62864: PUSH
62865: LD_INT 3
62867: NEG
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: PUSH
62873: LD_INT 1
62875: NEG
62876: PUSH
62877: LD_INT 5
62879: NEG
62880: PUSH
62881: EMPTY
62882: LIST
62883: LIST
62884: PUSH
62885: LD_INT 0
62887: PUSH
62888: LD_INT 5
62890: NEG
62891: PUSH
62892: EMPTY
62893: LIST
62894: LIST
62895: PUSH
62896: LD_INT 1
62898: PUSH
62899: LD_INT 4
62901: NEG
62902: PUSH
62903: EMPTY
62904: LIST
62905: LIST
62906: PUSH
62907: LD_INT 1
62909: NEG
62910: PUSH
62911: LD_INT 6
62913: NEG
62914: PUSH
62915: EMPTY
62916: LIST
62917: LIST
62918: PUSH
62919: LD_INT 0
62921: PUSH
62922: LD_INT 6
62924: NEG
62925: PUSH
62926: EMPTY
62927: LIST
62928: LIST
62929: PUSH
62930: LD_INT 1
62932: PUSH
62933: LD_INT 5
62935: NEG
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: PUSH
62941: EMPTY
62942: LIST
62943: LIST
62944: LIST
62945: LIST
62946: LIST
62947: LIST
62948: LIST
62949: LIST
62950: LIST
62951: LIST
62952: LIST
62953: LIST
62954: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
62955: LD_ADDR_VAR 0 30
62959: PUSH
62960: LD_INT 2
62962: PUSH
62963: LD_INT 1
62965: NEG
62966: PUSH
62967: EMPTY
62968: LIST
62969: LIST
62970: PUSH
62971: LD_INT 3
62973: PUSH
62974: LD_INT 0
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: PUSH
62981: LD_INT 3
62983: PUSH
62984: LD_INT 1
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: PUSH
62991: LD_INT 3
62993: PUSH
62994: LD_INT 1
62996: NEG
62997: PUSH
62998: EMPTY
62999: LIST
63000: LIST
63001: PUSH
63002: LD_INT 4
63004: PUSH
63005: LD_INT 0
63007: PUSH
63008: EMPTY
63009: LIST
63010: LIST
63011: PUSH
63012: LD_INT 4
63014: PUSH
63015: LD_INT 1
63017: PUSH
63018: EMPTY
63019: LIST
63020: LIST
63021: PUSH
63022: LD_INT 4
63024: PUSH
63025: LD_INT 1
63027: NEG
63028: PUSH
63029: EMPTY
63030: LIST
63031: LIST
63032: PUSH
63033: LD_INT 5
63035: PUSH
63036: LD_INT 0
63038: PUSH
63039: EMPTY
63040: LIST
63041: LIST
63042: PUSH
63043: LD_INT 5
63045: PUSH
63046: LD_INT 1
63048: PUSH
63049: EMPTY
63050: LIST
63051: LIST
63052: PUSH
63053: LD_INT 5
63055: PUSH
63056: LD_INT 1
63058: NEG
63059: PUSH
63060: EMPTY
63061: LIST
63062: LIST
63063: PUSH
63064: LD_INT 6
63066: PUSH
63067: LD_INT 0
63069: PUSH
63070: EMPTY
63071: LIST
63072: LIST
63073: PUSH
63074: LD_INT 6
63076: PUSH
63077: LD_INT 1
63079: PUSH
63080: EMPTY
63081: LIST
63082: LIST
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: LIST
63088: LIST
63089: LIST
63090: LIST
63091: LIST
63092: LIST
63093: LIST
63094: LIST
63095: LIST
63096: LIST
63097: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
63098: LD_ADDR_VAR 0 31
63102: PUSH
63103: LD_INT 3
63105: PUSH
63106: LD_INT 2
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: PUSH
63113: LD_INT 3
63115: PUSH
63116: LD_INT 3
63118: PUSH
63119: EMPTY
63120: LIST
63121: LIST
63122: PUSH
63123: LD_INT 2
63125: PUSH
63126: LD_INT 3
63128: PUSH
63129: EMPTY
63130: LIST
63131: LIST
63132: PUSH
63133: LD_INT 4
63135: PUSH
63136: LD_INT 3
63138: PUSH
63139: EMPTY
63140: LIST
63141: LIST
63142: PUSH
63143: LD_INT 4
63145: PUSH
63146: LD_INT 4
63148: PUSH
63149: EMPTY
63150: LIST
63151: LIST
63152: PUSH
63153: LD_INT 3
63155: PUSH
63156: LD_INT 4
63158: PUSH
63159: EMPTY
63160: LIST
63161: LIST
63162: PUSH
63163: LD_INT 5
63165: PUSH
63166: LD_INT 4
63168: PUSH
63169: EMPTY
63170: LIST
63171: LIST
63172: PUSH
63173: LD_INT 5
63175: PUSH
63176: LD_INT 5
63178: PUSH
63179: EMPTY
63180: LIST
63181: LIST
63182: PUSH
63183: LD_INT 4
63185: PUSH
63186: LD_INT 5
63188: PUSH
63189: EMPTY
63190: LIST
63191: LIST
63192: PUSH
63193: LD_INT 6
63195: PUSH
63196: LD_INT 5
63198: PUSH
63199: EMPTY
63200: LIST
63201: LIST
63202: PUSH
63203: LD_INT 6
63205: PUSH
63206: LD_INT 6
63208: PUSH
63209: EMPTY
63210: LIST
63211: LIST
63212: PUSH
63213: LD_INT 5
63215: PUSH
63216: LD_INT 6
63218: PUSH
63219: EMPTY
63220: LIST
63221: LIST
63222: PUSH
63223: EMPTY
63224: LIST
63225: LIST
63226: LIST
63227: LIST
63228: LIST
63229: LIST
63230: LIST
63231: LIST
63232: LIST
63233: LIST
63234: LIST
63235: LIST
63236: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
63237: LD_ADDR_VAR 0 32
63241: PUSH
63242: LD_INT 1
63244: PUSH
63245: LD_INT 3
63247: PUSH
63248: EMPTY
63249: LIST
63250: LIST
63251: PUSH
63252: LD_INT 0
63254: PUSH
63255: LD_INT 3
63257: PUSH
63258: EMPTY
63259: LIST
63260: LIST
63261: PUSH
63262: LD_INT 1
63264: NEG
63265: PUSH
63266: LD_INT 2
63268: PUSH
63269: EMPTY
63270: LIST
63271: LIST
63272: PUSH
63273: LD_INT 1
63275: PUSH
63276: LD_INT 4
63278: PUSH
63279: EMPTY
63280: LIST
63281: LIST
63282: PUSH
63283: LD_INT 0
63285: PUSH
63286: LD_INT 4
63288: PUSH
63289: EMPTY
63290: LIST
63291: LIST
63292: PUSH
63293: LD_INT 1
63295: NEG
63296: PUSH
63297: LD_INT 3
63299: PUSH
63300: EMPTY
63301: LIST
63302: LIST
63303: PUSH
63304: LD_INT 1
63306: PUSH
63307: LD_INT 5
63309: PUSH
63310: EMPTY
63311: LIST
63312: LIST
63313: PUSH
63314: LD_INT 0
63316: PUSH
63317: LD_INT 5
63319: PUSH
63320: EMPTY
63321: LIST
63322: LIST
63323: PUSH
63324: LD_INT 1
63326: NEG
63327: PUSH
63328: LD_INT 4
63330: PUSH
63331: EMPTY
63332: LIST
63333: LIST
63334: PUSH
63335: LD_INT 1
63337: PUSH
63338: LD_INT 6
63340: PUSH
63341: EMPTY
63342: LIST
63343: LIST
63344: PUSH
63345: LD_INT 0
63347: PUSH
63348: LD_INT 6
63350: PUSH
63351: EMPTY
63352: LIST
63353: LIST
63354: PUSH
63355: LD_INT 1
63357: NEG
63358: PUSH
63359: LD_INT 5
63361: PUSH
63362: EMPTY
63363: LIST
63364: LIST
63365: PUSH
63366: EMPTY
63367: LIST
63368: LIST
63369: LIST
63370: LIST
63371: LIST
63372: LIST
63373: LIST
63374: LIST
63375: LIST
63376: LIST
63377: LIST
63378: LIST
63379: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
63380: LD_ADDR_VAR 0 33
63384: PUSH
63385: LD_INT 2
63387: NEG
63388: PUSH
63389: LD_INT 1
63391: PUSH
63392: EMPTY
63393: LIST
63394: LIST
63395: PUSH
63396: LD_INT 3
63398: NEG
63399: PUSH
63400: LD_INT 0
63402: PUSH
63403: EMPTY
63404: LIST
63405: LIST
63406: PUSH
63407: LD_INT 3
63409: NEG
63410: PUSH
63411: LD_INT 1
63413: NEG
63414: PUSH
63415: EMPTY
63416: LIST
63417: LIST
63418: PUSH
63419: LD_INT 3
63421: NEG
63422: PUSH
63423: LD_INT 1
63425: PUSH
63426: EMPTY
63427: LIST
63428: LIST
63429: PUSH
63430: LD_INT 4
63432: NEG
63433: PUSH
63434: LD_INT 0
63436: PUSH
63437: EMPTY
63438: LIST
63439: LIST
63440: PUSH
63441: LD_INT 4
63443: NEG
63444: PUSH
63445: LD_INT 1
63447: NEG
63448: PUSH
63449: EMPTY
63450: LIST
63451: LIST
63452: PUSH
63453: LD_INT 4
63455: NEG
63456: PUSH
63457: LD_INT 1
63459: PUSH
63460: EMPTY
63461: LIST
63462: LIST
63463: PUSH
63464: LD_INT 5
63466: NEG
63467: PUSH
63468: LD_INT 0
63470: PUSH
63471: EMPTY
63472: LIST
63473: LIST
63474: PUSH
63475: LD_INT 5
63477: NEG
63478: PUSH
63479: LD_INT 1
63481: NEG
63482: PUSH
63483: EMPTY
63484: LIST
63485: LIST
63486: PUSH
63487: LD_INT 5
63489: NEG
63490: PUSH
63491: LD_INT 1
63493: PUSH
63494: EMPTY
63495: LIST
63496: LIST
63497: PUSH
63498: LD_INT 6
63500: NEG
63501: PUSH
63502: LD_INT 0
63504: PUSH
63505: EMPTY
63506: LIST
63507: LIST
63508: PUSH
63509: LD_INT 6
63511: NEG
63512: PUSH
63513: LD_INT 1
63515: NEG
63516: PUSH
63517: EMPTY
63518: LIST
63519: LIST
63520: PUSH
63521: EMPTY
63522: LIST
63523: LIST
63524: LIST
63525: LIST
63526: LIST
63527: LIST
63528: LIST
63529: LIST
63530: LIST
63531: LIST
63532: LIST
63533: LIST
63534: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
63535: LD_ADDR_VAR 0 34
63539: PUSH
63540: LD_INT 2
63542: NEG
63543: PUSH
63544: LD_INT 3
63546: NEG
63547: PUSH
63548: EMPTY
63549: LIST
63550: LIST
63551: PUSH
63552: LD_INT 3
63554: NEG
63555: PUSH
63556: LD_INT 2
63558: NEG
63559: PUSH
63560: EMPTY
63561: LIST
63562: LIST
63563: PUSH
63564: LD_INT 3
63566: NEG
63567: PUSH
63568: LD_INT 3
63570: NEG
63571: PUSH
63572: EMPTY
63573: LIST
63574: LIST
63575: PUSH
63576: LD_INT 3
63578: NEG
63579: PUSH
63580: LD_INT 4
63582: NEG
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: PUSH
63588: LD_INT 4
63590: NEG
63591: PUSH
63592: LD_INT 3
63594: NEG
63595: PUSH
63596: EMPTY
63597: LIST
63598: LIST
63599: PUSH
63600: LD_INT 4
63602: NEG
63603: PUSH
63604: LD_INT 4
63606: NEG
63607: PUSH
63608: EMPTY
63609: LIST
63610: LIST
63611: PUSH
63612: LD_INT 4
63614: NEG
63615: PUSH
63616: LD_INT 5
63618: NEG
63619: PUSH
63620: EMPTY
63621: LIST
63622: LIST
63623: PUSH
63624: LD_INT 5
63626: NEG
63627: PUSH
63628: LD_INT 4
63630: NEG
63631: PUSH
63632: EMPTY
63633: LIST
63634: LIST
63635: PUSH
63636: LD_INT 5
63638: NEG
63639: PUSH
63640: LD_INT 5
63642: NEG
63643: PUSH
63644: EMPTY
63645: LIST
63646: LIST
63647: PUSH
63648: LD_INT 5
63650: NEG
63651: PUSH
63652: LD_INT 6
63654: NEG
63655: PUSH
63656: EMPTY
63657: LIST
63658: LIST
63659: PUSH
63660: LD_INT 6
63662: NEG
63663: PUSH
63664: LD_INT 5
63666: NEG
63667: PUSH
63668: EMPTY
63669: LIST
63670: LIST
63671: PUSH
63672: LD_INT 6
63674: NEG
63675: PUSH
63676: LD_INT 6
63678: NEG
63679: PUSH
63680: EMPTY
63681: LIST
63682: LIST
63683: PUSH
63684: EMPTY
63685: LIST
63686: LIST
63687: LIST
63688: LIST
63689: LIST
63690: LIST
63691: LIST
63692: LIST
63693: LIST
63694: LIST
63695: LIST
63696: LIST
63697: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
63698: LD_ADDR_VAR 0 41
63702: PUSH
63703: LD_INT 0
63705: PUSH
63706: LD_INT 2
63708: NEG
63709: PUSH
63710: EMPTY
63711: LIST
63712: LIST
63713: PUSH
63714: LD_INT 1
63716: NEG
63717: PUSH
63718: LD_INT 3
63720: NEG
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: PUSH
63726: LD_INT 1
63728: PUSH
63729: LD_INT 2
63731: NEG
63732: PUSH
63733: EMPTY
63734: LIST
63735: LIST
63736: PUSH
63737: EMPTY
63738: LIST
63739: LIST
63740: LIST
63741: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
63742: LD_ADDR_VAR 0 42
63746: PUSH
63747: LD_INT 2
63749: PUSH
63750: LD_INT 0
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: PUSH
63757: LD_INT 2
63759: PUSH
63760: LD_INT 1
63762: NEG
63763: PUSH
63764: EMPTY
63765: LIST
63766: LIST
63767: PUSH
63768: LD_INT 3
63770: PUSH
63771: LD_INT 1
63773: PUSH
63774: EMPTY
63775: LIST
63776: LIST
63777: PUSH
63778: EMPTY
63779: LIST
63780: LIST
63781: LIST
63782: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
63783: LD_ADDR_VAR 0 43
63787: PUSH
63788: LD_INT 2
63790: PUSH
63791: LD_INT 2
63793: PUSH
63794: EMPTY
63795: LIST
63796: LIST
63797: PUSH
63798: LD_INT 3
63800: PUSH
63801: LD_INT 2
63803: PUSH
63804: EMPTY
63805: LIST
63806: LIST
63807: PUSH
63808: LD_INT 2
63810: PUSH
63811: LD_INT 3
63813: PUSH
63814: EMPTY
63815: LIST
63816: LIST
63817: PUSH
63818: EMPTY
63819: LIST
63820: LIST
63821: LIST
63822: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
63823: LD_ADDR_VAR 0 44
63827: PUSH
63828: LD_INT 0
63830: PUSH
63831: LD_INT 2
63833: PUSH
63834: EMPTY
63835: LIST
63836: LIST
63837: PUSH
63838: LD_INT 1
63840: PUSH
63841: LD_INT 3
63843: PUSH
63844: EMPTY
63845: LIST
63846: LIST
63847: PUSH
63848: LD_INT 1
63850: NEG
63851: PUSH
63852: LD_INT 2
63854: PUSH
63855: EMPTY
63856: LIST
63857: LIST
63858: PUSH
63859: EMPTY
63860: LIST
63861: LIST
63862: LIST
63863: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63864: LD_ADDR_VAR 0 45
63868: PUSH
63869: LD_INT 2
63871: NEG
63872: PUSH
63873: LD_INT 0
63875: PUSH
63876: EMPTY
63877: LIST
63878: LIST
63879: PUSH
63880: LD_INT 2
63882: NEG
63883: PUSH
63884: LD_INT 1
63886: PUSH
63887: EMPTY
63888: LIST
63889: LIST
63890: PUSH
63891: LD_INT 3
63893: NEG
63894: PUSH
63895: LD_INT 1
63897: NEG
63898: PUSH
63899: EMPTY
63900: LIST
63901: LIST
63902: PUSH
63903: EMPTY
63904: LIST
63905: LIST
63906: LIST
63907: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
63908: LD_ADDR_VAR 0 46
63912: PUSH
63913: LD_INT 2
63915: NEG
63916: PUSH
63917: LD_INT 2
63919: NEG
63920: PUSH
63921: EMPTY
63922: LIST
63923: LIST
63924: PUSH
63925: LD_INT 2
63927: NEG
63928: PUSH
63929: LD_INT 3
63931: NEG
63932: PUSH
63933: EMPTY
63934: LIST
63935: LIST
63936: PUSH
63937: LD_INT 3
63939: NEG
63940: PUSH
63941: LD_INT 2
63943: NEG
63944: PUSH
63945: EMPTY
63946: LIST
63947: LIST
63948: PUSH
63949: EMPTY
63950: LIST
63951: LIST
63952: LIST
63953: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
63954: LD_ADDR_VAR 0 47
63958: PUSH
63959: LD_INT 2
63961: NEG
63962: PUSH
63963: LD_INT 3
63965: NEG
63966: PUSH
63967: EMPTY
63968: LIST
63969: LIST
63970: PUSH
63971: LD_INT 1
63973: NEG
63974: PUSH
63975: LD_INT 3
63977: NEG
63978: PUSH
63979: EMPTY
63980: LIST
63981: LIST
63982: PUSH
63983: EMPTY
63984: LIST
63985: LIST
63986: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
63987: LD_ADDR_VAR 0 48
63991: PUSH
63992: LD_INT 1
63994: PUSH
63995: LD_INT 2
63997: NEG
63998: PUSH
63999: EMPTY
64000: LIST
64001: LIST
64002: PUSH
64003: LD_INT 2
64005: PUSH
64006: LD_INT 1
64008: NEG
64009: PUSH
64010: EMPTY
64011: LIST
64012: LIST
64013: PUSH
64014: EMPTY
64015: LIST
64016: LIST
64017: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
64018: LD_ADDR_VAR 0 49
64022: PUSH
64023: LD_INT 3
64025: PUSH
64026: LD_INT 1
64028: PUSH
64029: EMPTY
64030: LIST
64031: LIST
64032: PUSH
64033: LD_INT 3
64035: PUSH
64036: LD_INT 2
64038: PUSH
64039: EMPTY
64040: LIST
64041: LIST
64042: PUSH
64043: EMPTY
64044: LIST
64045: LIST
64046: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
64047: LD_ADDR_VAR 0 50
64051: PUSH
64052: LD_INT 2
64054: PUSH
64055: LD_INT 3
64057: PUSH
64058: EMPTY
64059: LIST
64060: LIST
64061: PUSH
64062: LD_INT 1
64064: PUSH
64065: LD_INT 3
64067: PUSH
64068: EMPTY
64069: LIST
64070: LIST
64071: PUSH
64072: EMPTY
64073: LIST
64074: LIST
64075: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
64076: LD_ADDR_VAR 0 51
64080: PUSH
64081: LD_INT 1
64083: NEG
64084: PUSH
64085: LD_INT 2
64087: PUSH
64088: EMPTY
64089: LIST
64090: LIST
64091: PUSH
64092: LD_INT 2
64094: NEG
64095: PUSH
64096: LD_INT 1
64098: PUSH
64099: EMPTY
64100: LIST
64101: LIST
64102: PUSH
64103: EMPTY
64104: LIST
64105: LIST
64106: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
64107: LD_ADDR_VAR 0 52
64111: PUSH
64112: LD_INT 3
64114: NEG
64115: PUSH
64116: LD_INT 1
64118: NEG
64119: PUSH
64120: EMPTY
64121: LIST
64122: LIST
64123: PUSH
64124: LD_INT 3
64126: NEG
64127: PUSH
64128: LD_INT 2
64130: NEG
64131: PUSH
64132: EMPTY
64133: LIST
64134: LIST
64135: PUSH
64136: EMPTY
64137: LIST
64138: LIST
64139: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64140: LD_ADDR_VAR 0 53
64144: PUSH
64145: LD_INT 1
64147: NEG
64148: PUSH
64149: LD_INT 3
64151: NEG
64152: PUSH
64153: EMPTY
64154: LIST
64155: LIST
64156: PUSH
64157: LD_INT 0
64159: PUSH
64160: LD_INT 3
64162: NEG
64163: PUSH
64164: EMPTY
64165: LIST
64166: LIST
64167: PUSH
64168: LD_INT 1
64170: PUSH
64171: LD_INT 2
64173: NEG
64174: PUSH
64175: EMPTY
64176: LIST
64177: LIST
64178: PUSH
64179: EMPTY
64180: LIST
64181: LIST
64182: LIST
64183: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64184: LD_ADDR_VAR 0 54
64188: PUSH
64189: LD_INT 2
64191: PUSH
64192: LD_INT 1
64194: NEG
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: PUSH
64200: LD_INT 3
64202: PUSH
64203: LD_INT 0
64205: PUSH
64206: EMPTY
64207: LIST
64208: LIST
64209: PUSH
64210: LD_INT 3
64212: PUSH
64213: LD_INT 1
64215: PUSH
64216: EMPTY
64217: LIST
64218: LIST
64219: PUSH
64220: EMPTY
64221: LIST
64222: LIST
64223: LIST
64224: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64225: LD_ADDR_VAR 0 55
64229: PUSH
64230: LD_INT 3
64232: PUSH
64233: LD_INT 2
64235: PUSH
64236: EMPTY
64237: LIST
64238: LIST
64239: PUSH
64240: LD_INT 3
64242: PUSH
64243: LD_INT 3
64245: PUSH
64246: EMPTY
64247: LIST
64248: LIST
64249: PUSH
64250: LD_INT 2
64252: PUSH
64253: LD_INT 3
64255: PUSH
64256: EMPTY
64257: LIST
64258: LIST
64259: PUSH
64260: EMPTY
64261: LIST
64262: LIST
64263: LIST
64264: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64265: LD_ADDR_VAR 0 56
64269: PUSH
64270: LD_INT 1
64272: PUSH
64273: LD_INT 3
64275: PUSH
64276: EMPTY
64277: LIST
64278: LIST
64279: PUSH
64280: LD_INT 0
64282: PUSH
64283: LD_INT 3
64285: PUSH
64286: EMPTY
64287: LIST
64288: LIST
64289: PUSH
64290: LD_INT 1
64292: NEG
64293: PUSH
64294: LD_INT 2
64296: PUSH
64297: EMPTY
64298: LIST
64299: LIST
64300: PUSH
64301: EMPTY
64302: LIST
64303: LIST
64304: LIST
64305: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64306: LD_ADDR_VAR 0 57
64310: PUSH
64311: LD_INT 2
64313: NEG
64314: PUSH
64315: LD_INT 1
64317: PUSH
64318: EMPTY
64319: LIST
64320: LIST
64321: PUSH
64322: LD_INT 3
64324: NEG
64325: PUSH
64326: LD_INT 0
64328: PUSH
64329: EMPTY
64330: LIST
64331: LIST
64332: PUSH
64333: LD_INT 3
64335: NEG
64336: PUSH
64337: LD_INT 1
64339: NEG
64340: PUSH
64341: EMPTY
64342: LIST
64343: LIST
64344: PUSH
64345: EMPTY
64346: LIST
64347: LIST
64348: LIST
64349: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64350: LD_ADDR_VAR 0 58
64354: PUSH
64355: LD_INT 2
64357: NEG
64358: PUSH
64359: LD_INT 3
64361: NEG
64362: PUSH
64363: EMPTY
64364: LIST
64365: LIST
64366: PUSH
64367: LD_INT 3
64369: NEG
64370: PUSH
64371: LD_INT 2
64373: NEG
64374: PUSH
64375: EMPTY
64376: LIST
64377: LIST
64378: PUSH
64379: LD_INT 3
64381: NEG
64382: PUSH
64383: LD_INT 3
64385: NEG
64386: PUSH
64387: EMPTY
64388: LIST
64389: LIST
64390: PUSH
64391: EMPTY
64392: LIST
64393: LIST
64394: LIST
64395: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
64396: LD_ADDR_VAR 0 59
64400: PUSH
64401: LD_INT 1
64403: NEG
64404: PUSH
64405: LD_INT 2
64407: NEG
64408: PUSH
64409: EMPTY
64410: LIST
64411: LIST
64412: PUSH
64413: LD_INT 0
64415: PUSH
64416: LD_INT 2
64418: NEG
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: PUSH
64424: LD_INT 1
64426: PUSH
64427: LD_INT 1
64429: NEG
64430: PUSH
64431: EMPTY
64432: LIST
64433: LIST
64434: PUSH
64435: EMPTY
64436: LIST
64437: LIST
64438: LIST
64439: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64440: LD_ADDR_VAR 0 60
64444: PUSH
64445: LD_INT 1
64447: PUSH
64448: LD_INT 1
64450: NEG
64451: PUSH
64452: EMPTY
64453: LIST
64454: LIST
64455: PUSH
64456: LD_INT 2
64458: PUSH
64459: LD_INT 0
64461: PUSH
64462: EMPTY
64463: LIST
64464: LIST
64465: PUSH
64466: LD_INT 2
64468: PUSH
64469: LD_INT 1
64471: PUSH
64472: EMPTY
64473: LIST
64474: LIST
64475: PUSH
64476: EMPTY
64477: LIST
64478: LIST
64479: LIST
64480: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64481: LD_ADDR_VAR 0 61
64485: PUSH
64486: LD_INT 2
64488: PUSH
64489: LD_INT 1
64491: PUSH
64492: EMPTY
64493: LIST
64494: LIST
64495: PUSH
64496: LD_INT 2
64498: PUSH
64499: LD_INT 2
64501: PUSH
64502: EMPTY
64503: LIST
64504: LIST
64505: PUSH
64506: LD_INT 1
64508: PUSH
64509: LD_INT 2
64511: PUSH
64512: EMPTY
64513: LIST
64514: LIST
64515: PUSH
64516: EMPTY
64517: LIST
64518: LIST
64519: LIST
64520: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64521: LD_ADDR_VAR 0 62
64525: PUSH
64526: LD_INT 1
64528: PUSH
64529: LD_INT 2
64531: PUSH
64532: EMPTY
64533: LIST
64534: LIST
64535: PUSH
64536: LD_INT 0
64538: PUSH
64539: LD_INT 2
64541: PUSH
64542: EMPTY
64543: LIST
64544: LIST
64545: PUSH
64546: LD_INT 1
64548: NEG
64549: PUSH
64550: LD_INT 1
64552: PUSH
64553: EMPTY
64554: LIST
64555: LIST
64556: PUSH
64557: EMPTY
64558: LIST
64559: LIST
64560: LIST
64561: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64562: LD_ADDR_VAR 0 63
64566: PUSH
64567: LD_INT 1
64569: NEG
64570: PUSH
64571: LD_INT 1
64573: PUSH
64574: EMPTY
64575: LIST
64576: LIST
64577: PUSH
64578: LD_INT 2
64580: NEG
64581: PUSH
64582: LD_INT 0
64584: PUSH
64585: EMPTY
64586: LIST
64587: LIST
64588: PUSH
64589: LD_INT 2
64591: NEG
64592: PUSH
64593: LD_INT 1
64595: NEG
64596: PUSH
64597: EMPTY
64598: LIST
64599: LIST
64600: PUSH
64601: EMPTY
64602: LIST
64603: LIST
64604: LIST
64605: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64606: LD_ADDR_VAR 0 64
64610: PUSH
64611: LD_INT 1
64613: NEG
64614: PUSH
64615: LD_INT 2
64617: NEG
64618: PUSH
64619: EMPTY
64620: LIST
64621: LIST
64622: PUSH
64623: LD_INT 2
64625: NEG
64626: PUSH
64627: LD_INT 1
64629: NEG
64630: PUSH
64631: EMPTY
64632: LIST
64633: LIST
64634: PUSH
64635: LD_INT 2
64637: NEG
64638: PUSH
64639: LD_INT 2
64641: NEG
64642: PUSH
64643: EMPTY
64644: LIST
64645: LIST
64646: PUSH
64647: EMPTY
64648: LIST
64649: LIST
64650: LIST
64651: ST_TO_ADDR
// end ; 2 :
64652: GO 67918
64654: LD_INT 2
64656: DOUBLE
64657: EQUAL
64658: IFTRUE 64662
64660: GO 67917
64662: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
64663: LD_ADDR_VAR 0 29
64667: PUSH
64668: LD_INT 4
64670: PUSH
64671: LD_INT 0
64673: PUSH
64674: EMPTY
64675: LIST
64676: LIST
64677: PUSH
64678: LD_INT 4
64680: PUSH
64681: LD_INT 1
64683: NEG
64684: PUSH
64685: EMPTY
64686: LIST
64687: LIST
64688: PUSH
64689: LD_INT 5
64691: PUSH
64692: LD_INT 0
64694: PUSH
64695: EMPTY
64696: LIST
64697: LIST
64698: PUSH
64699: LD_INT 5
64701: PUSH
64702: LD_INT 1
64704: PUSH
64705: EMPTY
64706: LIST
64707: LIST
64708: PUSH
64709: LD_INT 4
64711: PUSH
64712: LD_INT 1
64714: PUSH
64715: EMPTY
64716: LIST
64717: LIST
64718: PUSH
64719: LD_INT 3
64721: PUSH
64722: LD_INT 0
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: PUSH
64729: LD_INT 3
64731: PUSH
64732: LD_INT 1
64734: NEG
64735: PUSH
64736: EMPTY
64737: LIST
64738: LIST
64739: PUSH
64740: LD_INT 3
64742: PUSH
64743: LD_INT 2
64745: NEG
64746: PUSH
64747: EMPTY
64748: LIST
64749: LIST
64750: PUSH
64751: LD_INT 5
64753: PUSH
64754: LD_INT 2
64756: PUSH
64757: EMPTY
64758: LIST
64759: LIST
64760: PUSH
64761: LD_INT 3
64763: PUSH
64764: LD_INT 3
64766: PUSH
64767: EMPTY
64768: LIST
64769: LIST
64770: PUSH
64771: LD_INT 3
64773: PUSH
64774: LD_INT 2
64776: PUSH
64777: EMPTY
64778: LIST
64779: LIST
64780: PUSH
64781: LD_INT 4
64783: PUSH
64784: LD_INT 3
64786: PUSH
64787: EMPTY
64788: LIST
64789: LIST
64790: PUSH
64791: LD_INT 4
64793: PUSH
64794: LD_INT 4
64796: PUSH
64797: EMPTY
64798: LIST
64799: LIST
64800: PUSH
64801: LD_INT 3
64803: PUSH
64804: LD_INT 4
64806: PUSH
64807: EMPTY
64808: LIST
64809: LIST
64810: PUSH
64811: LD_INT 2
64813: PUSH
64814: LD_INT 3
64816: PUSH
64817: EMPTY
64818: LIST
64819: LIST
64820: PUSH
64821: LD_INT 2
64823: PUSH
64824: LD_INT 2
64826: PUSH
64827: EMPTY
64828: LIST
64829: LIST
64830: PUSH
64831: LD_INT 4
64833: PUSH
64834: LD_INT 2
64836: PUSH
64837: EMPTY
64838: LIST
64839: LIST
64840: PUSH
64841: LD_INT 2
64843: PUSH
64844: LD_INT 4
64846: PUSH
64847: EMPTY
64848: LIST
64849: LIST
64850: PUSH
64851: LD_INT 0
64853: PUSH
64854: LD_INT 4
64856: PUSH
64857: EMPTY
64858: LIST
64859: LIST
64860: PUSH
64861: LD_INT 0
64863: PUSH
64864: LD_INT 3
64866: PUSH
64867: EMPTY
64868: LIST
64869: LIST
64870: PUSH
64871: LD_INT 1
64873: PUSH
64874: LD_INT 4
64876: PUSH
64877: EMPTY
64878: LIST
64879: LIST
64880: PUSH
64881: LD_INT 1
64883: PUSH
64884: LD_INT 5
64886: PUSH
64887: EMPTY
64888: LIST
64889: LIST
64890: PUSH
64891: LD_INT 0
64893: PUSH
64894: LD_INT 5
64896: PUSH
64897: EMPTY
64898: LIST
64899: LIST
64900: PUSH
64901: LD_INT 1
64903: NEG
64904: PUSH
64905: LD_INT 4
64907: PUSH
64908: EMPTY
64909: LIST
64910: LIST
64911: PUSH
64912: LD_INT 1
64914: NEG
64915: PUSH
64916: LD_INT 3
64918: PUSH
64919: EMPTY
64920: LIST
64921: LIST
64922: PUSH
64923: LD_INT 2
64925: PUSH
64926: LD_INT 5
64928: PUSH
64929: EMPTY
64930: LIST
64931: LIST
64932: PUSH
64933: LD_INT 2
64935: NEG
64936: PUSH
64937: LD_INT 3
64939: PUSH
64940: EMPTY
64941: LIST
64942: LIST
64943: PUSH
64944: LD_INT 3
64946: NEG
64947: PUSH
64948: LD_INT 0
64950: PUSH
64951: EMPTY
64952: LIST
64953: LIST
64954: PUSH
64955: LD_INT 3
64957: NEG
64958: PUSH
64959: LD_INT 1
64961: NEG
64962: PUSH
64963: EMPTY
64964: LIST
64965: LIST
64966: PUSH
64967: LD_INT 2
64969: NEG
64970: PUSH
64971: LD_INT 0
64973: PUSH
64974: EMPTY
64975: LIST
64976: LIST
64977: PUSH
64978: LD_INT 2
64980: NEG
64981: PUSH
64982: LD_INT 1
64984: PUSH
64985: EMPTY
64986: LIST
64987: LIST
64988: PUSH
64989: LD_INT 3
64991: NEG
64992: PUSH
64993: LD_INT 1
64995: PUSH
64996: EMPTY
64997: LIST
64998: LIST
64999: PUSH
65000: LD_INT 4
65002: NEG
65003: PUSH
65004: LD_INT 0
65006: PUSH
65007: EMPTY
65008: LIST
65009: LIST
65010: PUSH
65011: LD_INT 4
65013: NEG
65014: PUSH
65015: LD_INT 1
65017: NEG
65018: PUSH
65019: EMPTY
65020: LIST
65021: LIST
65022: PUSH
65023: LD_INT 4
65025: NEG
65026: PUSH
65027: LD_INT 2
65029: NEG
65030: PUSH
65031: EMPTY
65032: LIST
65033: LIST
65034: PUSH
65035: LD_INT 2
65037: NEG
65038: PUSH
65039: LD_INT 2
65041: PUSH
65042: EMPTY
65043: LIST
65044: LIST
65045: PUSH
65046: LD_INT 4
65048: NEG
65049: PUSH
65050: LD_INT 4
65052: NEG
65053: PUSH
65054: EMPTY
65055: LIST
65056: LIST
65057: PUSH
65058: LD_INT 4
65060: NEG
65061: PUSH
65062: LD_INT 5
65064: NEG
65065: PUSH
65066: EMPTY
65067: LIST
65068: LIST
65069: PUSH
65070: LD_INT 3
65072: NEG
65073: PUSH
65074: LD_INT 4
65076: NEG
65077: PUSH
65078: EMPTY
65079: LIST
65080: LIST
65081: PUSH
65082: LD_INT 3
65084: NEG
65085: PUSH
65086: LD_INT 3
65088: NEG
65089: PUSH
65090: EMPTY
65091: LIST
65092: LIST
65093: PUSH
65094: LD_INT 4
65096: NEG
65097: PUSH
65098: LD_INT 3
65100: NEG
65101: PUSH
65102: EMPTY
65103: LIST
65104: LIST
65105: PUSH
65106: LD_INT 5
65108: NEG
65109: PUSH
65110: LD_INT 4
65112: NEG
65113: PUSH
65114: EMPTY
65115: LIST
65116: LIST
65117: PUSH
65118: LD_INT 5
65120: NEG
65121: PUSH
65122: LD_INT 5
65124: NEG
65125: PUSH
65126: EMPTY
65127: LIST
65128: LIST
65129: PUSH
65130: LD_INT 3
65132: NEG
65133: PUSH
65134: LD_INT 5
65136: NEG
65137: PUSH
65138: EMPTY
65139: LIST
65140: LIST
65141: PUSH
65142: LD_INT 5
65144: NEG
65145: PUSH
65146: LD_INT 3
65148: NEG
65149: PUSH
65150: EMPTY
65151: LIST
65152: LIST
65153: PUSH
65154: EMPTY
65155: LIST
65156: LIST
65157: LIST
65158: LIST
65159: LIST
65160: LIST
65161: LIST
65162: LIST
65163: LIST
65164: LIST
65165: LIST
65166: LIST
65167: LIST
65168: LIST
65169: LIST
65170: LIST
65171: LIST
65172: LIST
65173: LIST
65174: LIST
65175: LIST
65176: LIST
65177: LIST
65178: LIST
65179: LIST
65180: LIST
65181: LIST
65182: LIST
65183: LIST
65184: LIST
65185: LIST
65186: LIST
65187: LIST
65188: LIST
65189: LIST
65190: LIST
65191: LIST
65192: LIST
65193: LIST
65194: LIST
65195: LIST
65196: LIST
65197: LIST
65198: LIST
65199: LIST
65200: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
65201: LD_ADDR_VAR 0 30
65205: PUSH
65206: LD_INT 4
65208: PUSH
65209: LD_INT 4
65211: PUSH
65212: EMPTY
65213: LIST
65214: LIST
65215: PUSH
65216: LD_INT 4
65218: PUSH
65219: LD_INT 3
65221: PUSH
65222: EMPTY
65223: LIST
65224: LIST
65225: PUSH
65226: LD_INT 5
65228: PUSH
65229: LD_INT 4
65231: PUSH
65232: EMPTY
65233: LIST
65234: LIST
65235: PUSH
65236: LD_INT 5
65238: PUSH
65239: LD_INT 5
65241: PUSH
65242: EMPTY
65243: LIST
65244: LIST
65245: PUSH
65246: LD_INT 4
65248: PUSH
65249: LD_INT 5
65251: PUSH
65252: EMPTY
65253: LIST
65254: LIST
65255: PUSH
65256: LD_INT 3
65258: PUSH
65259: LD_INT 4
65261: PUSH
65262: EMPTY
65263: LIST
65264: LIST
65265: PUSH
65266: LD_INT 3
65268: PUSH
65269: LD_INT 3
65271: PUSH
65272: EMPTY
65273: LIST
65274: LIST
65275: PUSH
65276: LD_INT 5
65278: PUSH
65279: LD_INT 3
65281: PUSH
65282: EMPTY
65283: LIST
65284: LIST
65285: PUSH
65286: LD_INT 3
65288: PUSH
65289: LD_INT 5
65291: PUSH
65292: EMPTY
65293: LIST
65294: LIST
65295: PUSH
65296: LD_INT 0
65298: PUSH
65299: LD_INT 3
65301: PUSH
65302: EMPTY
65303: LIST
65304: LIST
65305: PUSH
65306: LD_INT 0
65308: PUSH
65309: LD_INT 2
65311: PUSH
65312: EMPTY
65313: LIST
65314: LIST
65315: PUSH
65316: LD_INT 1
65318: PUSH
65319: LD_INT 3
65321: PUSH
65322: EMPTY
65323: LIST
65324: LIST
65325: PUSH
65326: LD_INT 1
65328: PUSH
65329: LD_INT 4
65331: PUSH
65332: EMPTY
65333: LIST
65334: LIST
65335: PUSH
65336: LD_INT 0
65338: PUSH
65339: LD_INT 4
65341: PUSH
65342: EMPTY
65343: LIST
65344: LIST
65345: PUSH
65346: LD_INT 1
65348: NEG
65349: PUSH
65350: LD_INT 3
65352: PUSH
65353: EMPTY
65354: LIST
65355: LIST
65356: PUSH
65357: LD_INT 1
65359: NEG
65360: PUSH
65361: LD_INT 2
65363: PUSH
65364: EMPTY
65365: LIST
65366: LIST
65367: PUSH
65368: LD_INT 2
65370: PUSH
65371: LD_INT 4
65373: PUSH
65374: EMPTY
65375: LIST
65376: LIST
65377: PUSH
65378: LD_INT 2
65380: NEG
65381: PUSH
65382: LD_INT 2
65384: PUSH
65385: EMPTY
65386: LIST
65387: LIST
65388: PUSH
65389: LD_INT 4
65391: NEG
65392: PUSH
65393: LD_INT 0
65395: PUSH
65396: EMPTY
65397: LIST
65398: LIST
65399: PUSH
65400: LD_INT 4
65402: NEG
65403: PUSH
65404: LD_INT 1
65406: NEG
65407: PUSH
65408: EMPTY
65409: LIST
65410: LIST
65411: PUSH
65412: LD_INT 3
65414: NEG
65415: PUSH
65416: LD_INT 0
65418: PUSH
65419: EMPTY
65420: LIST
65421: LIST
65422: PUSH
65423: LD_INT 3
65425: NEG
65426: PUSH
65427: LD_INT 1
65429: PUSH
65430: EMPTY
65431: LIST
65432: LIST
65433: PUSH
65434: LD_INT 4
65436: NEG
65437: PUSH
65438: LD_INT 1
65440: PUSH
65441: EMPTY
65442: LIST
65443: LIST
65444: PUSH
65445: LD_INT 5
65447: NEG
65448: PUSH
65449: LD_INT 0
65451: PUSH
65452: EMPTY
65453: LIST
65454: LIST
65455: PUSH
65456: LD_INT 5
65458: NEG
65459: PUSH
65460: LD_INT 1
65462: NEG
65463: PUSH
65464: EMPTY
65465: LIST
65466: LIST
65467: PUSH
65468: LD_INT 5
65470: NEG
65471: PUSH
65472: LD_INT 2
65474: NEG
65475: PUSH
65476: EMPTY
65477: LIST
65478: LIST
65479: PUSH
65480: LD_INT 3
65482: NEG
65483: PUSH
65484: LD_INT 2
65486: PUSH
65487: EMPTY
65488: LIST
65489: LIST
65490: PUSH
65491: LD_INT 3
65493: NEG
65494: PUSH
65495: LD_INT 3
65497: NEG
65498: PUSH
65499: EMPTY
65500: LIST
65501: LIST
65502: PUSH
65503: LD_INT 3
65505: NEG
65506: PUSH
65507: LD_INT 4
65509: NEG
65510: PUSH
65511: EMPTY
65512: LIST
65513: LIST
65514: PUSH
65515: LD_INT 2
65517: NEG
65518: PUSH
65519: LD_INT 3
65521: NEG
65522: PUSH
65523: EMPTY
65524: LIST
65525: LIST
65526: PUSH
65527: LD_INT 2
65529: NEG
65530: PUSH
65531: LD_INT 2
65533: NEG
65534: PUSH
65535: EMPTY
65536: LIST
65537: LIST
65538: PUSH
65539: LD_INT 3
65541: NEG
65542: PUSH
65543: LD_INT 2
65545: NEG
65546: PUSH
65547: EMPTY
65548: LIST
65549: LIST
65550: PUSH
65551: LD_INT 4
65553: NEG
65554: PUSH
65555: LD_INT 3
65557: NEG
65558: PUSH
65559: EMPTY
65560: LIST
65561: LIST
65562: PUSH
65563: LD_INT 4
65565: NEG
65566: PUSH
65567: LD_INT 4
65569: NEG
65570: PUSH
65571: EMPTY
65572: LIST
65573: LIST
65574: PUSH
65575: LD_INT 2
65577: NEG
65578: PUSH
65579: LD_INT 4
65581: NEG
65582: PUSH
65583: EMPTY
65584: LIST
65585: LIST
65586: PUSH
65587: LD_INT 4
65589: NEG
65590: PUSH
65591: LD_INT 2
65593: NEG
65594: PUSH
65595: EMPTY
65596: LIST
65597: LIST
65598: PUSH
65599: LD_INT 0
65601: PUSH
65602: LD_INT 4
65604: NEG
65605: PUSH
65606: EMPTY
65607: LIST
65608: LIST
65609: PUSH
65610: LD_INT 0
65612: PUSH
65613: LD_INT 5
65615: NEG
65616: PUSH
65617: EMPTY
65618: LIST
65619: LIST
65620: PUSH
65621: LD_INT 1
65623: PUSH
65624: LD_INT 4
65626: NEG
65627: PUSH
65628: EMPTY
65629: LIST
65630: LIST
65631: PUSH
65632: LD_INT 1
65634: PUSH
65635: LD_INT 3
65637: NEG
65638: PUSH
65639: EMPTY
65640: LIST
65641: LIST
65642: PUSH
65643: LD_INT 0
65645: PUSH
65646: LD_INT 3
65648: NEG
65649: PUSH
65650: EMPTY
65651: LIST
65652: LIST
65653: PUSH
65654: LD_INT 1
65656: NEG
65657: PUSH
65658: LD_INT 4
65660: NEG
65661: PUSH
65662: EMPTY
65663: LIST
65664: LIST
65665: PUSH
65666: LD_INT 1
65668: NEG
65669: PUSH
65670: LD_INT 5
65672: NEG
65673: PUSH
65674: EMPTY
65675: LIST
65676: LIST
65677: PUSH
65678: LD_INT 2
65680: PUSH
65681: LD_INT 3
65683: NEG
65684: PUSH
65685: EMPTY
65686: LIST
65687: LIST
65688: PUSH
65689: LD_INT 2
65691: NEG
65692: PUSH
65693: LD_INT 5
65695: NEG
65696: PUSH
65697: EMPTY
65698: LIST
65699: LIST
65700: PUSH
65701: EMPTY
65702: LIST
65703: LIST
65704: LIST
65705: LIST
65706: LIST
65707: LIST
65708: LIST
65709: LIST
65710: LIST
65711: LIST
65712: LIST
65713: LIST
65714: LIST
65715: LIST
65716: LIST
65717: LIST
65718: LIST
65719: LIST
65720: LIST
65721: LIST
65722: LIST
65723: LIST
65724: LIST
65725: LIST
65726: LIST
65727: LIST
65728: LIST
65729: LIST
65730: LIST
65731: LIST
65732: LIST
65733: LIST
65734: LIST
65735: LIST
65736: LIST
65737: LIST
65738: LIST
65739: LIST
65740: LIST
65741: LIST
65742: LIST
65743: LIST
65744: LIST
65745: LIST
65746: LIST
65747: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
65748: LD_ADDR_VAR 0 31
65752: PUSH
65753: LD_INT 0
65755: PUSH
65756: LD_INT 4
65758: PUSH
65759: EMPTY
65760: LIST
65761: LIST
65762: PUSH
65763: LD_INT 0
65765: PUSH
65766: LD_INT 3
65768: PUSH
65769: EMPTY
65770: LIST
65771: LIST
65772: PUSH
65773: LD_INT 1
65775: PUSH
65776: LD_INT 4
65778: PUSH
65779: EMPTY
65780: LIST
65781: LIST
65782: PUSH
65783: LD_INT 1
65785: PUSH
65786: LD_INT 5
65788: PUSH
65789: EMPTY
65790: LIST
65791: LIST
65792: PUSH
65793: LD_INT 0
65795: PUSH
65796: LD_INT 5
65798: PUSH
65799: EMPTY
65800: LIST
65801: LIST
65802: PUSH
65803: LD_INT 1
65805: NEG
65806: PUSH
65807: LD_INT 4
65809: PUSH
65810: EMPTY
65811: LIST
65812: LIST
65813: PUSH
65814: LD_INT 1
65816: NEG
65817: PUSH
65818: LD_INT 3
65820: PUSH
65821: EMPTY
65822: LIST
65823: LIST
65824: PUSH
65825: LD_INT 2
65827: PUSH
65828: LD_INT 5
65830: PUSH
65831: EMPTY
65832: LIST
65833: LIST
65834: PUSH
65835: LD_INT 2
65837: NEG
65838: PUSH
65839: LD_INT 3
65841: PUSH
65842: EMPTY
65843: LIST
65844: LIST
65845: PUSH
65846: LD_INT 3
65848: NEG
65849: PUSH
65850: LD_INT 0
65852: PUSH
65853: EMPTY
65854: LIST
65855: LIST
65856: PUSH
65857: LD_INT 3
65859: NEG
65860: PUSH
65861: LD_INT 1
65863: NEG
65864: PUSH
65865: EMPTY
65866: LIST
65867: LIST
65868: PUSH
65869: LD_INT 2
65871: NEG
65872: PUSH
65873: LD_INT 0
65875: PUSH
65876: EMPTY
65877: LIST
65878: LIST
65879: PUSH
65880: LD_INT 2
65882: NEG
65883: PUSH
65884: LD_INT 1
65886: PUSH
65887: EMPTY
65888: LIST
65889: LIST
65890: PUSH
65891: LD_INT 3
65893: NEG
65894: PUSH
65895: LD_INT 1
65897: PUSH
65898: EMPTY
65899: LIST
65900: LIST
65901: PUSH
65902: LD_INT 4
65904: NEG
65905: PUSH
65906: LD_INT 0
65908: PUSH
65909: EMPTY
65910: LIST
65911: LIST
65912: PUSH
65913: LD_INT 4
65915: NEG
65916: PUSH
65917: LD_INT 1
65919: NEG
65920: PUSH
65921: EMPTY
65922: LIST
65923: LIST
65924: PUSH
65925: LD_INT 4
65927: NEG
65928: PUSH
65929: LD_INT 2
65931: NEG
65932: PUSH
65933: EMPTY
65934: LIST
65935: LIST
65936: PUSH
65937: LD_INT 2
65939: NEG
65940: PUSH
65941: LD_INT 2
65943: PUSH
65944: EMPTY
65945: LIST
65946: LIST
65947: PUSH
65948: LD_INT 4
65950: NEG
65951: PUSH
65952: LD_INT 4
65954: NEG
65955: PUSH
65956: EMPTY
65957: LIST
65958: LIST
65959: PUSH
65960: LD_INT 4
65962: NEG
65963: PUSH
65964: LD_INT 5
65966: NEG
65967: PUSH
65968: EMPTY
65969: LIST
65970: LIST
65971: PUSH
65972: LD_INT 3
65974: NEG
65975: PUSH
65976: LD_INT 4
65978: NEG
65979: PUSH
65980: EMPTY
65981: LIST
65982: LIST
65983: PUSH
65984: LD_INT 3
65986: NEG
65987: PUSH
65988: LD_INT 3
65990: NEG
65991: PUSH
65992: EMPTY
65993: LIST
65994: LIST
65995: PUSH
65996: LD_INT 4
65998: NEG
65999: PUSH
66000: LD_INT 3
66002: NEG
66003: PUSH
66004: EMPTY
66005: LIST
66006: LIST
66007: PUSH
66008: LD_INT 5
66010: NEG
66011: PUSH
66012: LD_INT 4
66014: NEG
66015: PUSH
66016: EMPTY
66017: LIST
66018: LIST
66019: PUSH
66020: LD_INT 5
66022: NEG
66023: PUSH
66024: LD_INT 5
66026: NEG
66027: PUSH
66028: EMPTY
66029: LIST
66030: LIST
66031: PUSH
66032: LD_INT 3
66034: NEG
66035: PUSH
66036: LD_INT 5
66038: NEG
66039: PUSH
66040: EMPTY
66041: LIST
66042: LIST
66043: PUSH
66044: LD_INT 5
66046: NEG
66047: PUSH
66048: LD_INT 3
66050: NEG
66051: PUSH
66052: EMPTY
66053: LIST
66054: LIST
66055: PUSH
66056: LD_INT 0
66058: PUSH
66059: LD_INT 3
66061: NEG
66062: PUSH
66063: EMPTY
66064: LIST
66065: LIST
66066: PUSH
66067: LD_INT 0
66069: PUSH
66070: LD_INT 4
66072: NEG
66073: PUSH
66074: EMPTY
66075: LIST
66076: LIST
66077: PUSH
66078: LD_INT 1
66080: PUSH
66081: LD_INT 3
66083: NEG
66084: PUSH
66085: EMPTY
66086: LIST
66087: LIST
66088: PUSH
66089: LD_INT 1
66091: PUSH
66092: LD_INT 2
66094: NEG
66095: PUSH
66096: EMPTY
66097: LIST
66098: LIST
66099: PUSH
66100: LD_INT 0
66102: PUSH
66103: LD_INT 2
66105: NEG
66106: PUSH
66107: EMPTY
66108: LIST
66109: LIST
66110: PUSH
66111: LD_INT 1
66113: NEG
66114: PUSH
66115: LD_INT 3
66117: NEG
66118: PUSH
66119: EMPTY
66120: LIST
66121: LIST
66122: PUSH
66123: LD_INT 1
66125: NEG
66126: PUSH
66127: LD_INT 4
66129: NEG
66130: PUSH
66131: EMPTY
66132: LIST
66133: LIST
66134: PUSH
66135: LD_INT 2
66137: PUSH
66138: LD_INT 2
66140: NEG
66141: PUSH
66142: EMPTY
66143: LIST
66144: LIST
66145: PUSH
66146: LD_INT 2
66148: NEG
66149: PUSH
66150: LD_INT 4
66152: NEG
66153: PUSH
66154: EMPTY
66155: LIST
66156: LIST
66157: PUSH
66158: LD_INT 4
66160: PUSH
66161: LD_INT 0
66163: PUSH
66164: EMPTY
66165: LIST
66166: LIST
66167: PUSH
66168: LD_INT 4
66170: PUSH
66171: LD_INT 1
66173: NEG
66174: PUSH
66175: EMPTY
66176: LIST
66177: LIST
66178: PUSH
66179: LD_INT 5
66181: PUSH
66182: LD_INT 0
66184: PUSH
66185: EMPTY
66186: LIST
66187: LIST
66188: PUSH
66189: LD_INT 5
66191: PUSH
66192: LD_INT 1
66194: PUSH
66195: EMPTY
66196: LIST
66197: LIST
66198: PUSH
66199: LD_INT 4
66201: PUSH
66202: LD_INT 1
66204: PUSH
66205: EMPTY
66206: LIST
66207: LIST
66208: PUSH
66209: LD_INT 3
66211: PUSH
66212: LD_INT 0
66214: PUSH
66215: EMPTY
66216: LIST
66217: LIST
66218: PUSH
66219: LD_INT 3
66221: PUSH
66222: LD_INT 1
66224: NEG
66225: PUSH
66226: EMPTY
66227: LIST
66228: LIST
66229: PUSH
66230: LD_INT 3
66232: PUSH
66233: LD_INT 2
66235: NEG
66236: PUSH
66237: EMPTY
66238: LIST
66239: LIST
66240: PUSH
66241: LD_INT 5
66243: PUSH
66244: LD_INT 2
66246: PUSH
66247: EMPTY
66248: LIST
66249: LIST
66250: PUSH
66251: EMPTY
66252: LIST
66253: LIST
66254: LIST
66255: LIST
66256: LIST
66257: LIST
66258: LIST
66259: LIST
66260: LIST
66261: LIST
66262: LIST
66263: LIST
66264: LIST
66265: LIST
66266: LIST
66267: LIST
66268: LIST
66269: LIST
66270: LIST
66271: LIST
66272: LIST
66273: LIST
66274: LIST
66275: LIST
66276: LIST
66277: LIST
66278: LIST
66279: LIST
66280: LIST
66281: LIST
66282: LIST
66283: LIST
66284: LIST
66285: LIST
66286: LIST
66287: LIST
66288: LIST
66289: LIST
66290: LIST
66291: LIST
66292: LIST
66293: LIST
66294: LIST
66295: LIST
66296: LIST
66297: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
66298: LD_ADDR_VAR 0 32
66302: PUSH
66303: LD_INT 4
66305: NEG
66306: PUSH
66307: LD_INT 0
66309: PUSH
66310: EMPTY
66311: LIST
66312: LIST
66313: PUSH
66314: LD_INT 4
66316: NEG
66317: PUSH
66318: LD_INT 1
66320: NEG
66321: PUSH
66322: EMPTY
66323: LIST
66324: LIST
66325: PUSH
66326: LD_INT 3
66328: NEG
66329: PUSH
66330: LD_INT 0
66332: PUSH
66333: EMPTY
66334: LIST
66335: LIST
66336: PUSH
66337: LD_INT 3
66339: NEG
66340: PUSH
66341: LD_INT 1
66343: PUSH
66344: EMPTY
66345: LIST
66346: LIST
66347: PUSH
66348: LD_INT 4
66350: NEG
66351: PUSH
66352: LD_INT 1
66354: PUSH
66355: EMPTY
66356: LIST
66357: LIST
66358: PUSH
66359: LD_INT 5
66361: NEG
66362: PUSH
66363: LD_INT 0
66365: PUSH
66366: EMPTY
66367: LIST
66368: LIST
66369: PUSH
66370: LD_INT 5
66372: NEG
66373: PUSH
66374: LD_INT 1
66376: NEG
66377: PUSH
66378: EMPTY
66379: LIST
66380: LIST
66381: PUSH
66382: LD_INT 5
66384: NEG
66385: PUSH
66386: LD_INT 2
66388: NEG
66389: PUSH
66390: EMPTY
66391: LIST
66392: LIST
66393: PUSH
66394: LD_INT 3
66396: NEG
66397: PUSH
66398: LD_INT 2
66400: PUSH
66401: EMPTY
66402: LIST
66403: LIST
66404: PUSH
66405: LD_INT 3
66407: NEG
66408: PUSH
66409: LD_INT 3
66411: NEG
66412: PUSH
66413: EMPTY
66414: LIST
66415: LIST
66416: PUSH
66417: LD_INT 3
66419: NEG
66420: PUSH
66421: LD_INT 4
66423: NEG
66424: PUSH
66425: EMPTY
66426: LIST
66427: LIST
66428: PUSH
66429: LD_INT 2
66431: NEG
66432: PUSH
66433: LD_INT 3
66435: NEG
66436: PUSH
66437: EMPTY
66438: LIST
66439: LIST
66440: PUSH
66441: LD_INT 2
66443: NEG
66444: PUSH
66445: LD_INT 2
66447: NEG
66448: PUSH
66449: EMPTY
66450: LIST
66451: LIST
66452: PUSH
66453: LD_INT 3
66455: NEG
66456: PUSH
66457: LD_INT 2
66459: NEG
66460: PUSH
66461: EMPTY
66462: LIST
66463: LIST
66464: PUSH
66465: LD_INT 4
66467: NEG
66468: PUSH
66469: LD_INT 3
66471: NEG
66472: PUSH
66473: EMPTY
66474: LIST
66475: LIST
66476: PUSH
66477: LD_INT 4
66479: NEG
66480: PUSH
66481: LD_INT 4
66483: NEG
66484: PUSH
66485: EMPTY
66486: LIST
66487: LIST
66488: PUSH
66489: LD_INT 2
66491: NEG
66492: PUSH
66493: LD_INT 4
66495: NEG
66496: PUSH
66497: EMPTY
66498: LIST
66499: LIST
66500: PUSH
66501: LD_INT 4
66503: NEG
66504: PUSH
66505: LD_INT 2
66507: NEG
66508: PUSH
66509: EMPTY
66510: LIST
66511: LIST
66512: PUSH
66513: LD_INT 0
66515: PUSH
66516: LD_INT 4
66518: NEG
66519: PUSH
66520: EMPTY
66521: LIST
66522: LIST
66523: PUSH
66524: LD_INT 0
66526: PUSH
66527: LD_INT 5
66529: NEG
66530: PUSH
66531: EMPTY
66532: LIST
66533: LIST
66534: PUSH
66535: LD_INT 1
66537: PUSH
66538: LD_INT 4
66540: NEG
66541: PUSH
66542: EMPTY
66543: LIST
66544: LIST
66545: PUSH
66546: LD_INT 1
66548: PUSH
66549: LD_INT 3
66551: NEG
66552: PUSH
66553: EMPTY
66554: LIST
66555: LIST
66556: PUSH
66557: LD_INT 0
66559: PUSH
66560: LD_INT 3
66562: NEG
66563: PUSH
66564: EMPTY
66565: LIST
66566: LIST
66567: PUSH
66568: LD_INT 1
66570: NEG
66571: PUSH
66572: LD_INT 4
66574: NEG
66575: PUSH
66576: EMPTY
66577: LIST
66578: LIST
66579: PUSH
66580: LD_INT 1
66582: NEG
66583: PUSH
66584: LD_INT 5
66586: NEG
66587: PUSH
66588: EMPTY
66589: LIST
66590: LIST
66591: PUSH
66592: LD_INT 2
66594: PUSH
66595: LD_INT 3
66597: NEG
66598: PUSH
66599: EMPTY
66600: LIST
66601: LIST
66602: PUSH
66603: LD_INT 2
66605: NEG
66606: PUSH
66607: LD_INT 5
66609: NEG
66610: PUSH
66611: EMPTY
66612: LIST
66613: LIST
66614: PUSH
66615: LD_INT 3
66617: PUSH
66618: LD_INT 0
66620: PUSH
66621: EMPTY
66622: LIST
66623: LIST
66624: PUSH
66625: LD_INT 3
66627: PUSH
66628: LD_INT 1
66630: NEG
66631: PUSH
66632: EMPTY
66633: LIST
66634: LIST
66635: PUSH
66636: LD_INT 4
66638: PUSH
66639: LD_INT 0
66641: PUSH
66642: EMPTY
66643: LIST
66644: LIST
66645: PUSH
66646: LD_INT 4
66648: PUSH
66649: LD_INT 1
66651: PUSH
66652: EMPTY
66653: LIST
66654: LIST
66655: PUSH
66656: LD_INT 3
66658: PUSH
66659: LD_INT 1
66661: PUSH
66662: EMPTY
66663: LIST
66664: LIST
66665: PUSH
66666: LD_INT 2
66668: PUSH
66669: LD_INT 0
66671: PUSH
66672: EMPTY
66673: LIST
66674: LIST
66675: PUSH
66676: LD_INT 2
66678: PUSH
66679: LD_INT 1
66681: NEG
66682: PUSH
66683: EMPTY
66684: LIST
66685: LIST
66686: PUSH
66687: LD_INT 2
66689: PUSH
66690: LD_INT 2
66692: NEG
66693: PUSH
66694: EMPTY
66695: LIST
66696: LIST
66697: PUSH
66698: LD_INT 4
66700: PUSH
66701: LD_INT 2
66703: PUSH
66704: EMPTY
66705: LIST
66706: LIST
66707: PUSH
66708: LD_INT 4
66710: PUSH
66711: LD_INT 4
66713: PUSH
66714: EMPTY
66715: LIST
66716: LIST
66717: PUSH
66718: LD_INT 4
66720: PUSH
66721: LD_INT 3
66723: PUSH
66724: EMPTY
66725: LIST
66726: LIST
66727: PUSH
66728: LD_INT 5
66730: PUSH
66731: LD_INT 4
66733: PUSH
66734: EMPTY
66735: LIST
66736: LIST
66737: PUSH
66738: LD_INT 5
66740: PUSH
66741: LD_INT 5
66743: PUSH
66744: EMPTY
66745: LIST
66746: LIST
66747: PUSH
66748: LD_INT 4
66750: PUSH
66751: LD_INT 5
66753: PUSH
66754: EMPTY
66755: LIST
66756: LIST
66757: PUSH
66758: LD_INT 3
66760: PUSH
66761: LD_INT 4
66763: PUSH
66764: EMPTY
66765: LIST
66766: LIST
66767: PUSH
66768: LD_INT 3
66770: PUSH
66771: LD_INT 3
66773: PUSH
66774: EMPTY
66775: LIST
66776: LIST
66777: PUSH
66778: LD_INT 5
66780: PUSH
66781: LD_INT 3
66783: PUSH
66784: EMPTY
66785: LIST
66786: LIST
66787: PUSH
66788: LD_INT 3
66790: PUSH
66791: LD_INT 5
66793: PUSH
66794: EMPTY
66795: LIST
66796: LIST
66797: PUSH
66798: EMPTY
66799: LIST
66800: LIST
66801: LIST
66802: LIST
66803: LIST
66804: LIST
66805: LIST
66806: LIST
66807: LIST
66808: LIST
66809: LIST
66810: LIST
66811: LIST
66812: LIST
66813: LIST
66814: LIST
66815: LIST
66816: LIST
66817: LIST
66818: LIST
66819: LIST
66820: LIST
66821: LIST
66822: LIST
66823: LIST
66824: LIST
66825: LIST
66826: LIST
66827: LIST
66828: LIST
66829: LIST
66830: LIST
66831: LIST
66832: LIST
66833: LIST
66834: LIST
66835: LIST
66836: LIST
66837: LIST
66838: LIST
66839: LIST
66840: LIST
66841: LIST
66842: LIST
66843: LIST
66844: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
66845: LD_ADDR_VAR 0 33
66849: PUSH
66850: LD_INT 4
66852: NEG
66853: PUSH
66854: LD_INT 4
66856: NEG
66857: PUSH
66858: EMPTY
66859: LIST
66860: LIST
66861: PUSH
66862: LD_INT 4
66864: NEG
66865: PUSH
66866: LD_INT 5
66868: NEG
66869: PUSH
66870: EMPTY
66871: LIST
66872: LIST
66873: PUSH
66874: LD_INT 3
66876: NEG
66877: PUSH
66878: LD_INT 4
66880: NEG
66881: PUSH
66882: EMPTY
66883: LIST
66884: LIST
66885: PUSH
66886: LD_INT 3
66888: NEG
66889: PUSH
66890: LD_INT 3
66892: NEG
66893: PUSH
66894: EMPTY
66895: LIST
66896: LIST
66897: PUSH
66898: LD_INT 4
66900: NEG
66901: PUSH
66902: LD_INT 3
66904: NEG
66905: PUSH
66906: EMPTY
66907: LIST
66908: LIST
66909: PUSH
66910: LD_INT 5
66912: NEG
66913: PUSH
66914: LD_INT 4
66916: NEG
66917: PUSH
66918: EMPTY
66919: LIST
66920: LIST
66921: PUSH
66922: LD_INT 5
66924: NEG
66925: PUSH
66926: LD_INT 5
66928: NEG
66929: PUSH
66930: EMPTY
66931: LIST
66932: LIST
66933: PUSH
66934: LD_INT 3
66936: NEG
66937: PUSH
66938: LD_INT 5
66940: NEG
66941: PUSH
66942: EMPTY
66943: LIST
66944: LIST
66945: PUSH
66946: LD_INT 5
66948: NEG
66949: PUSH
66950: LD_INT 3
66952: NEG
66953: PUSH
66954: EMPTY
66955: LIST
66956: LIST
66957: PUSH
66958: LD_INT 0
66960: PUSH
66961: LD_INT 3
66963: NEG
66964: PUSH
66965: EMPTY
66966: LIST
66967: LIST
66968: PUSH
66969: LD_INT 0
66971: PUSH
66972: LD_INT 4
66974: NEG
66975: PUSH
66976: EMPTY
66977: LIST
66978: LIST
66979: PUSH
66980: LD_INT 1
66982: PUSH
66983: LD_INT 3
66985: NEG
66986: PUSH
66987: EMPTY
66988: LIST
66989: LIST
66990: PUSH
66991: LD_INT 1
66993: PUSH
66994: LD_INT 2
66996: NEG
66997: PUSH
66998: EMPTY
66999: LIST
67000: LIST
67001: PUSH
67002: LD_INT 0
67004: PUSH
67005: LD_INT 2
67007: NEG
67008: PUSH
67009: EMPTY
67010: LIST
67011: LIST
67012: PUSH
67013: LD_INT 1
67015: NEG
67016: PUSH
67017: LD_INT 3
67019: NEG
67020: PUSH
67021: EMPTY
67022: LIST
67023: LIST
67024: PUSH
67025: LD_INT 1
67027: NEG
67028: PUSH
67029: LD_INT 4
67031: NEG
67032: PUSH
67033: EMPTY
67034: LIST
67035: LIST
67036: PUSH
67037: LD_INT 2
67039: PUSH
67040: LD_INT 2
67042: NEG
67043: PUSH
67044: EMPTY
67045: LIST
67046: LIST
67047: PUSH
67048: LD_INT 2
67050: NEG
67051: PUSH
67052: LD_INT 4
67054: NEG
67055: PUSH
67056: EMPTY
67057: LIST
67058: LIST
67059: PUSH
67060: LD_INT 4
67062: PUSH
67063: LD_INT 0
67065: PUSH
67066: EMPTY
67067: LIST
67068: LIST
67069: PUSH
67070: LD_INT 4
67072: PUSH
67073: LD_INT 1
67075: NEG
67076: PUSH
67077: EMPTY
67078: LIST
67079: LIST
67080: PUSH
67081: LD_INT 5
67083: PUSH
67084: LD_INT 0
67086: PUSH
67087: EMPTY
67088: LIST
67089: LIST
67090: PUSH
67091: LD_INT 5
67093: PUSH
67094: LD_INT 1
67096: PUSH
67097: EMPTY
67098: LIST
67099: LIST
67100: PUSH
67101: LD_INT 4
67103: PUSH
67104: LD_INT 1
67106: PUSH
67107: EMPTY
67108: LIST
67109: LIST
67110: PUSH
67111: LD_INT 3
67113: PUSH
67114: LD_INT 0
67116: PUSH
67117: EMPTY
67118: LIST
67119: LIST
67120: PUSH
67121: LD_INT 3
67123: PUSH
67124: LD_INT 1
67126: NEG
67127: PUSH
67128: EMPTY
67129: LIST
67130: LIST
67131: PUSH
67132: LD_INT 3
67134: PUSH
67135: LD_INT 2
67137: NEG
67138: PUSH
67139: EMPTY
67140: LIST
67141: LIST
67142: PUSH
67143: LD_INT 5
67145: PUSH
67146: LD_INT 2
67148: PUSH
67149: EMPTY
67150: LIST
67151: LIST
67152: PUSH
67153: LD_INT 3
67155: PUSH
67156: LD_INT 3
67158: PUSH
67159: EMPTY
67160: LIST
67161: LIST
67162: PUSH
67163: LD_INT 3
67165: PUSH
67166: LD_INT 2
67168: PUSH
67169: EMPTY
67170: LIST
67171: LIST
67172: PUSH
67173: LD_INT 4
67175: PUSH
67176: LD_INT 3
67178: PUSH
67179: EMPTY
67180: LIST
67181: LIST
67182: PUSH
67183: LD_INT 4
67185: PUSH
67186: LD_INT 4
67188: PUSH
67189: EMPTY
67190: LIST
67191: LIST
67192: PUSH
67193: LD_INT 3
67195: PUSH
67196: LD_INT 4
67198: PUSH
67199: EMPTY
67200: LIST
67201: LIST
67202: PUSH
67203: LD_INT 2
67205: PUSH
67206: LD_INT 3
67208: PUSH
67209: EMPTY
67210: LIST
67211: LIST
67212: PUSH
67213: LD_INT 2
67215: PUSH
67216: LD_INT 2
67218: PUSH
67219: EMPTY
67220: LIST
67221: LIST
67222: PUSH
67223: LD_INT 4
67225: PUSH
67226: LD_INT 2
67228: PUSH
67229: EMPTY
67230: LIST
67231: LIST
67232: PUSH
67233: LD_INT 2
67235: PUSH
67236: LD_INT 4
67238: PUSH
67239: EMPTY
67240: LIST
67241: LIST
67242: PUSH
67243: LD_INT 0
67245: PUSH
67246: LD_INT 4
67248: PUSH
67249: EMPTY
67250: LIST
67251: LIST
67252: PUSH
67253: LD_INT 0
67255: PUSH
67256: LD_INT 3
67258: PUSH
67259: EMPTY
67260: LIST
67261: LIST
67262: PUSH
67263: LD_INT 1
67265: PUSH
67266: LD_INT 4
67268: PUSH
67269: EMPTY
67270: LIST
67271: LIST
67272: PUSH
67273: LD_INT 1
67275: PUSH
67276: LD_INT 5
67278: PUSH
67279: EMPTY
67280: LIST
67281: LIST
67282: PUSH
67283: LD_INT 0
67285: PUSH
67286: LD_INT 5
67288: PUSH
67289: EMPTY
67290: LIST
67291: LIST
67292: PUSH
67293: LD_INT 1
67295: NEG
67296: PUSH
67297: LD_INT 4
67299: PUSH
67300: EMPTY
67301: LIST
67302: LIST
67303: PUSH
67304: LD_INT 1
67306: NEG
67307: PUSH
67308: LD_INT 3
67310: PUSH
67311: EMPTY
67312: LIST
67313: LIST
67314: PUSH
67315: LD_INT 2
67317: PUSH
67318: LD_INT 5
67320: PUSH
67321: EMPTY
67322: LIST
67323: LIST
67324: PUSH
67325: LD_INT 2
67327: NEG
67328: PUSH
67329: LD_INT 3
67331: PUSH
67332: EMPTY
67333: LIST
67334: LIST
67335: PUSH
67336: EMPTY
67337: LIST
67338: LIST
67339: LIST
67340: LIST
67341: LIST
67342: LIST
67343: LIST
67344: LIST
67345: LIST
67346: LIST
67347: LIST
67348: LIST
67349: LIST
67350: LIST
67351: LIST
67352: LIST
67353: LIST
67354: LIST
67355: LIST
67356: LIST
67357: LIST
67358: LIST
67359: LIST
67360: LIST
67361: LIST
67362: LIST
67363: LIST
67364: LIST
67365: LIST
67366: LIST
67367: LIST
67368: LIST
67369: LIST
67370: LIST
67371: LIST
67372: LIST
67373: LIST
67374: LIST
67375: LIST
67376: LIST
67377: LIST
67378: LIST
67379: LIST
67380: LIST
67381: LIST
67382: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
67383: LD_ADDR_VAR 0 34
67387: PUSH
67388: LD_INT 0
67390: PUSH
67391: LD_INT 4
67393: NEG
67394: PUSH
67395: EMPTY
67396: LIST
67397: LIST
67398: PUSH
67399: LD_INT 0
67401: PUSH
67402: LD_INT 5
67404: NEG
67405: PUSH
67406: EMPTY
67407: LIST
67408: LIST
67409: PUSH
67410: LD_INT 1
67412: PUSH
67413: LD_INT 4
67415: NEG
67416: PUSH
67417: EMPTY
67418: LIST
67419: LIST
67420: PUSH
67421: LD_INT 1
67423: PUSH
67424: LD_INT 3
67426: NEG
67427: PUSH
67428: EMPTY
67429: LIST
67430: LIST
67431: PUSH
67432: LD_INT 0
67434: PUSH
67435: LD_INT 3
67437: NEG
67438: PUSH
67439: EMPTY
67440: LIST
67441: LIST
67442: PUSH
67443: LD_INT 1
67445: NEG
67446: PUSH
67447: LD_INT 4
67449: NEG
67450: PUSH
67451: EMPTY
67452: LIST
67453: LIST
67454: PUSH
67455: LD_INT 1
67457: NEG
67458: PUSH
67459: LD_INT 5
67461: NEG
67462: PUSH
67463: EMPTY
67464: LIST
67465: LIST
67466: PUSH
67467: LD_INT 2
67469: PUSH
67470: LD_INT 3
67472: NEG
67473: PUSH
67474: EMPTY
67475: LIST
67476: LIST
67477: PUSH
67478: LD_INT 2
67480: NEG
67481: PUSH
67482: LD_INT 5
67484: NEG
67485: PUSH
67486: EMPTY
67487: LIST
67488: LIST
67489: PUSH
67490: LD_INT 3
67492: PUSH
67493: LD_INT 0
67495: PUSH
67496: EMPTY
67497: LIST
67498: LIST
67499: PUSH
67500: LD_INT 3
67502: PUSH
67503: LD_INT 1
67505: NEG
67506: PUSH
67507: EMPTY
67508: LIST
67509: LIST
67510: PUSH
67511: LD_INT 4
67513: PUSH
67514: LD_INT 0
67516: PUSH
67517: EMPTY
67518: LIST
67519: LIST
67520: PUSH
67521: LD_INT 4
67523: PUSH
67524: LD_INT 1
67526: PUSH
67527: EMPTY
67528: LIST
67529: LIST
67530: PUSH
67531: LD_INT 3
67533: PUSH
67534: LD_INT 1
67536: PUSH
67537: EMPTY
67538: LIST
67539: LIST
67540: PUSH
67541: LD_INT 2
67543: PUSH
67544: LD_INT 0
67546: PUSH
67547: EMPTY
67548: LIST
67549: LIST
67550: PUSH
67551: LD_INT 2
67553: PUSH
67554: LD_INT 1
67556: NEG
67557: PUSH
67558: EMPTY
67559: LIST
67560: LIST
67561: PUSH
67562: LD_INT 2
67564: PUSH
67565: LD_INT 2
67567: NEG
67568: PUSH
67569: EMPTY
67570: LIST
67571: LIST
67572: PUSH
67573: LD_INT 4
67575: PUSH
67576: LD_INT 2
67578: PUSH
67579: EMPTY
67580: LIST
67581: LIST
67582: PUSH
67583: LD_INT 4
67585: PUSH
67586: LD_INT 4
67588: PUSH
67589: EMPTY
67590: LIST
67591: LIST
67592: PUSH
67593: LD_INT 4
67595: PUSH
67596: LD_INT 3
67598: PUSH
67599: EMPTY
67600: LIST
67601: LIST
67602: PUSH
67603: LD_INT 5
67605: PUSH
67606: LD_INT 4
67608: PUSH
67609: EMPTY
67610: LIST
67611: LIST
67612: PUSH
67613: LD_INT 5
67615: PUSH
67616: LD_INT 5
67618: PUSH
67619: EMPTY
67620: LIST
67621: LIST
67622: PUSH
67623: LD_INT 4
67625: PUSH
67626: LD_INT 5
67628: PUSH
67629: EMPTY
67630: LIST
67631: LIST
67632: PUSH
67633: LD_INT 3
67635: PUSH
67636: LD_INT 4
67638: PUSH
67639: EMPTY
67640: LIST
67641: LIST
67642: PUSH
67643: LD_INT 3
67645: PUSH
67646: LD_INT 3
67648: PUSH
67649: EMPTY
67650: LIST
67651: LIST
67652: PUSH
67653: LD_INT 5
67655: PUSH
67656: LD_INT 3
67658: PUSH
67659: EMPTY
67660: LIST
67661: LIST
67662: PUSH
67663: LD_INT 3
67665: PUSH
67666: LD_INT 5
67668: PUSH
67669: EMPTY
67670: LIST
67671: LIST
67672: PUSH
67673: LD_INT 0
67675: PUSH
67676: LD_INT 3
67678: PUSH
67679: EMPTY
67680: LIST
67681: LIST
67682: PUSH
67683: LD_INT 0
67685: PUSH
67686: LD_INT 2
67688: PUSH
67689: EMPTY
67690: LIST
67691: LIST
67692: PUSH
67693: LD_INT 1
67695: PUSH
67696: LD_INT 3
67698: PUSH
67699: EMPTY
67700: LIST
67701: LIST
67702: PUSH
67703: LD_INT 1
67705: PUSH
67706: LD_INT 4
67708: PUSH
67709: EMPTY
67710: LIST
67711: LIST
67712: PUSH
67713: LD_INT 0
67715: PUSH
67716: LD_INT 4
67718: PUSH
67719: EMPTY
67720: LIST
67721: LIST
67722: PUSH
67723: LD_INT 1
67725: NEG
67726: PUSH
67727: LD_INT 3
67729: PUSH
67730: EMPTY
67731: LIST
67732: LIST
67733: PUSH
67734: LD_INT 1
67736: NEG
67737: PUSH
67738: LD_INT 2
67740: PUSH
67741: EMPTY
67742: LIST
67743: LIST
67744: PUSH
67745: LD_INT 2
67747: PUSH
67748: LD_INT 4
67750: PUSH
67751: EMPTY
67752: LIST
67753: LIST
67754: PUSH
67755: LD_INT 2
67757: NEG
67758: PUSH
67759: LD_INT 2
67761: PUSH
67762: EMPTY
67763: LIST
67764: LIST
67765: PUSH
67766: LD_INT 4
67768: NEG
67769: PUSH
67770: LD_INT 0
67772: PUSH
67773: EMPTY
67774: LIST
67775: LIST
67776: PUSH
67777: LD_INT 4
67779: NEG
67780: PUSH
67781: LD_INT 1
67783: NEG
67784: PUSH
67785: EMPTY
67786: LIST
67787: LIST
67788: PUSH
67789: LD_INT 3
67791: NEG
67792: PUSH
67793: LD_INT 0
67795: PUSH
67796: EMPTY
67797: LIST
67798: LIST
67799: PUSH
67800: LD_INT 3
67802: NEG
67803: PUSH
67804: LD_INT 1
67806: PUSH
67807: EMPTY
67808: LIST
67809: LIST
67810: PUSH
67811: LD_INT 4
67813: NEG
67814: PUSH
67815: LD_INT 1
67817: PUSH
67818: EMPTY
67819: LIST
67820: LIST
67821: PUSH
67822: LD_INT 5
67824: NEG
67825: PUSH
67826: LD_INT 0
67828: PUSH
67829: EMPTY
67830: LIST
67831: LIST
67832: PUSH
67833: LD_INT 5
67835: NEG
67836: PUSH
67837: LD_INT 1
67839: NEG
67840: PUSH
67841: EMPTY
67842: LIST
67843: LIST
67844: PUSH
67845: LD_INT 5
67847: NEG
67848: PUSH
67849: LD_INT 2
67851: NEG
67852: PUSH
67853: EMPTY
67854: LIST
67855: LIST
67856: PUSH
67857: LD_INT 3
67859: NEG
67860: PUSH
67861: LD_INT 2
67863: PUSH
67864: EMPTY
67865: LIST
67866: LIST
67867: PUSH
67868: EMPTY
67869: LIST
67870: LIST
67871: LIST
67872: LIST
67873: LIST
67874: LIST
67875: LIST
67876: LIST
67877: LIST
67878: LIST
67879: LIST
67880: LIST
67881: LIST
67882: LIST
67883: LIST
67884: LIST
67885: LIST
67886: LIST
67887: LIST
67888: LIST
67889: LIST
67890: LIST
67891: LIST
67892: LIST
67893: LIST
67894: LIST
67895: LIST
67896: LIST
67897: LIST
67898: LIST
67899: LIST
67900: LIST
67901: LIST
67902: LIST
67903: LIST
67904: LIST
67905: LIST
67906: LIST
67907: LIST
67908: LIST
67909: LIST
67910: LIST
67911: LIST
67912: LIST
67913: LIST
67914: ST_TO_ADDR
// end ; end ;
67915: GO 67918
67917: POP
// case btype of b_depot , b_warehouse :
67918: LD_VAR 0 1
67922: PUSH
67923: LD_INT 0
67925: DOUBLE
67926: EQUAL
67927: IFTRUE 67937
67929: LD_INT 1
67931: DOUBLE
67932: EQUAL
67933: IFTRUE 67937
67935: GO 68138
67937: POP
// case nation of nation_american :
67938: LD_VAR 0 5
67942: PUSH
67943: LD_INT 1
67945: DOUBLE
67946: EQUAL
67947: IFTRUE 67951
67949: GO 68007
67951: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
67952: LD_ADDR_VAR 0 9
67956: PUSH
67957: LD_VAR 0 11
67961: PUSH
67962: LD_VAR 0 12
67966: PUSH
67967: LD_VAR 0 13
67971: PUSH
67972: LD_VAR 0 14
67976: PUSH
67977: LD_VAR 0 15
67981: PUSH
67982: LD_VAR 0 16
67986: PUSH
67987: EMPTY
67988: LIST
67989: LIST
67990: LIST
67991: LIST
67992: LIST
67993: LIST
67994: PUSH
67995: LD_VAR 0 4
67999: PUSH
68000: LD_INT 1
68002: PLUS
68003: ARRAY
68004: ST_TO_ADDR
68005: GO 68136
68007: LD_INT 2
68009: DOUBLE
68010: EQUAL
68011: IFTRUE 68015
68013: GO 68071
68015: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
68016: LD_ADDR_VAR 0 9
68020: PUSH
68021: LD_VAR 0 17
68025: PUSH
68026: LD_VAR 0 18
68030: PUSH
68031: LD_VAR 0 19
68035: PUSH
68036: LD_VAR 0 20
68040: PUSH
68041: LD_VAR 0 21
68045: PUSH
68046: LD_VAR 0 22
68050: PUSH
68051: EMPTY
68052: LIST
68053: LIST
68054: LIST
68055: LIST
68056: LIST
68057: LIST
68058: PUSH
68059: LD_VAR 0 4
68063: PUSH
68064: LD_INT 1
68066: PLUS
68067: ARRAY
68068: ST_TO_ADDR
68069: GO 68136
68071: LD_INT 3
68073: DOUBLE
68074: EQUAL
68075: IFTRUE 68079
68077: GO 68135
68079: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
68080: LD_ADDR_VAR 0 9
68084: PUSH
68085: LD_VAR 0 23
68089: PUSH
68090: LD_VAR 0 24
68094: PUSH
68095: LD_VAR 0 25
68099: PUSH
68100: LD_VAR 0 26
68104: PUSH
68105: LD_VAR 0 27
68109: PUSH
68110: LD_VAR 0 28
68114: PUSH
68115: EMPTY
68116: LIST
68117: LIST
68118: LIST
68119: LIST
68120: LIST
68121: LIST
68122: PUSH
68123: LD_VAR 0 4
68127: PUSH
68128: LD_INT 1
68130: PLUS
68131: ARRAY
68132: ST_TO_ADDR
68133: GO 68136
68135: POP
68136: GO 68691
68138: LD_INT 2
68140: DOUBLE
68141: EQUAL
68142: IFTRUE 68152
68144: LD_INT 3
68146: DOUBLE
68147: EQUAL
68148: IFTRUE 68152
68150: GO 68208
68152: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
68153: LD_ADDR_VAR 0 9
68157: PUSH
68158: LD_VAR 0 29
68162: PUSH
68163: LD_VAR 0 30
68167: PUSH
68168: LD_VAR 0 31
68172: PUSH
68173: LD_VAR 0 32
68177: PUSH
68178: LD_VAR 0 33
68182: PUSH
68183: LD_VAR 0 34
68187: PUSH
68188: EMPTY
68189: LIST
68190: LIST
68191: LIST
68192: LIST
68193: LIST
68194: LIST
68195: PUSH
68196: LD_VAR 0 4
68200: PUSH
68201: LD_INT 1
68203: PLUS
68204: ARRAY
68205: ST_TO_ADDR
68206: GO 68691
68208: LD_INT 16
68210: DOUBLE
68211: EQUAL
68212: IFTRUE 68270
68214: LD_INT 17
68216: DOUBLE
68217: EQUAL
68218: IFTRUE 68270
68220: LD_INT 18
68222: DOUBLE
68223: EQUAL
68224: IFTRUE 68270
68226: LD_INT 19
68228: DOUBLE
68229: EQUAL
68230: IFTRUE 68270
68232: LD_INT 22
68234: DOUBLE
68235: EQUAL
68236: IFTRUE 68270
68238: LD_INT 20
68240: DOUBLE
68241: EQUAL
68242: IFTRUE 68270
68244: LD_INT 21
68246: DOUBLE
68247: EQUAL
68248: IFTRUE 68270
68250: LD_INT 23
68252: DOUBLE
68253: EQUAL
68254: IFTRUE 68270
68256: LD_INT 24
68258: DOUBLE
68259: EQUAL
68260: IFTRUE 68270
68262: LD_INT 25
68264: DOUBLE
68265: EQUAL
68266: IFTRUE 68270
68268: GO 68326
68270: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
68271: LD_ADDR_VAR 0 9
68275: PUSH
68276: LD_VAR 0 35
68280: PUSH
68281: LD_VAR 0 36
68285: PUSH
68286: LD_VAR 0 37
68290: PUSH
68291: LD_VAR 0 38
68295: PUSH
68296: LD_VAR 0 39
68300: PUSH
68301: LD_VAR 0 40
68305: PUSH
68306: EMPTY
68307: LIST
68308: LIST
68309: LIST
68310: LIST
68311: LIST
68312: LIST
68313: PUSH
68314: LD_VAR 0 4
68318: PUSH
68319: LD_INT 1
68321: PLUS
68322: ARRAY
68323: ST_TO_ADDR
68324: GO 68691
68326: LD_INT 6
68328: DOUBLE
68329: EQUAL
68330: IFTRUE 68382
68332: LD_INT 7
68334: DOUBLE
68335: EQUAL
68336: IFTRUE 68382
68338: LD_INT 8
68340: DOUBLE
68341: EQUAL
68342: IFTRUE 68382
68344: LD_INT 13
68346: DOUBLE
68347: EQUAL
68348: IFTRUE 68382
68350: LD_INT 12
68352: DOUBLE
68353: EQUAL
68354: IFTRUE 68382
68356: LD_INT 15
68358: DOUBLE
68359: EQUAL
68360: IFTRUE 68382
68362: LD_INT 11
68364: DOUBLE
68365: EQUAL
68366: IFTRUE 68382
68368: LD_INT 14
68370: DOUBLE
68371: EQUAL
68372: IFTRUE 68382
68374: LD_INT 10
68376: DOUBLE
68377: EQUAL
68378: IFTRUE 68382
68380: GO 68438
68382: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
68383: LD_ADDR_VAR 0 9
68387: PUSH
68388: LD_VAR 0 41
68392: PUSH
68393: LD_VAR 0 42
68397: PUSH
68398: LD_VAR 0 43
68402: PUSH
68403: LD_VAR 0 44
68407: PUSH
68408: LD_VAR 0 45
68412: PUSH
68413: LD_VAR 0 46
68417: PUSH
68418: EMPTY
68419: LIST
68420: LIST
68421: LIST
68422: LIST
68423: LIST
68424: LIST
68425: PUSH
68426: LD_VAR 0 4
68430: PUSH
68431: LD_INT 1
68433: PLUS
68434: ARRAY
68435: ST_TO_ADDR
68436: GO 68691
68438: LD_INT 36
68440: DOUBLE
68441: EQUAL
68442: IFTRUE 68446
68444: GO 68502
68446: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
68447: LD_ADDR_VAR 0 9
68451: PUSH
68452: LD_VAR 0 47
68456: PUSH
68457: LD_VAR 0 48
68461: PUSH
68462: LD_VAR 0 49
68466: PUSH
68467: LD_VAR 0 50
68471: PUSH
68472: LD_VAR 0 51
68476: PUSH
68477: LD_VAR 0 52
68481: PUSH
68482: EMPTY
68483: LIST
68484: LIST
68485: LIST
68486: LIST
68487: LIST
68488: LIST
68489: PUSH
68490: LD_VAR 0 4
68494: PUSH
68495: LD_INT 1
68497: PLUS
68498: ARRAY
68499: ST_TO_ADDR
68500: GO 68691
68502: LD_INT 4
68504: DOUBLE
68505: EQUAL
68506: IFTRUE 68528
68508: LD_INT 5
68510: DOUBLE
68511: EQUAL
68512: IFTRUE 68528
68514: LD_INT 34
68516: DOUBLE
68517: EQUAL
68518: IFTRUE 68528
68520: LD_INT 37
68522: DOUBLE
68523: EQUAL
68524: IFTRUE 68528
68526: GO 68584
68528: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
68529: LD_ADDR_VAR 0 9
68533: PUSH
68534: LD_VAR 0 53
68538: PUSH
68539: LD_VAR 0 54
68543: PUSH
68544: LD_VAR 0 55
68548: PUSH
68549: LD_VAR 0 56
68553: PUSH
68554: LD_VAR 0 57
68558: PUSH
68559: LD_VAR 0 58
68563: PUSH
68564: EMPTY
68565: LIST
68566: LIST
68567: LIST
68568: LIST
68569: LIST
68570: LIST
68571: PUSH
68572: LD_VAR 0 4
68576: PUSH
68577: LD_INT 1
68579: PLUS
68580: ARRAY
68581: ST_TO_ADDR
68582: GO 68691
68584: LD_INT 31
68586: DOUBLE
68587: EQUAL
68588: IFTRUE 68634
68590: LD_INT 32
68592: DOUBLE
68593: EQUAL
68594: IFTRUE 68634
68596: LD_INT 33
68598: DOUBLE
68599: EQUAL
68600: IFTRUE 68634
68602: LD_INT 27
68604: DOUBLE
68605: EQUAL
68606: IFTRUE 68634
68608: LD_INT 26
68610: DOUBLE
68611: EQUAL
68612: IFTRUE 68634
68614: LD_INT 28
68616: DOUBLE
68617: EQUAL
68618: IFTRUE 68634
68620: LD_INT 29
68622: DOUBLE
68623: EQUAL
68624: IFTRUE 68634
68626: LD_INT 30
68628: DOUBLE
68629: EQUAL
68630: IFTRUE 68634
68632: GO 68690
68634: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
68635: LD_ADDR_VAR 0 9
68639: PUSH
68640: LD_VAR 0 59
68644: PUSH
68645: LD_VAR 0 60
68649: PUSH
68650: LD_VAR 0 61
68654: PUSH
68655: LD_VAR 0 62
68659: PUSH
68660: LD_VAR 0 63
68664: PUSH
68665: LD_VAR 0 64
68669: PUSH
68670: EMPTY
68671: LIST
68672: LIST
68673: LIST
68674: LIST
68675: LIST
68676: LIST
68677: PUSH
68678: LD_VAR 0 4
68682: PUSH
68683: LD_INT 1
68685: PLUS
68686: ARRAY
68687: ST_TO_ADDR
68688: GO 68691
68690: POP
// temp_list2 = [ ] ;
68691: LD_ADDR_VAR 0 10
68695: PUSH
68696: EMPTY
68697: ST_TO_ADDR
// for i in temp_list do
68698: LD_ADDR_VAR 0 8
68702: PUSH
68703: LD_VAR 0 9
68707: PUSH
68708: FOR_IN
68709: IFFALSE 68761
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
68711: LD_ADDR_VAR 0 10
68715: PUSH
68716: LD_VAR 0 10
68720: PUSH
68721: LD_VAR 0 8
68725: PUSH
68726: LD_INT 1
68728: ARRAY
68729: PUSH
68730: LD_VAR 0 2
68734: PLUS
68735: PUSH
68736: LD_VAR 0 8
68740: PUSH
68741: LD_INT 2
68743: ARRAY
68744: PUSH
68745: LD_VAR 0 3
68749: PLUS
68750: PUSH
68751: EMPTY
68752: LIST
68753: LIST
68754: PUSH
68755: EMPTY
68756: LIST
68757: ADD
68758: ST_TO_ADDR
68759: GO 68708
68761: POP
68762: POP
// result = temp_list2 ;
68763: LD_ADDR_VAR 0 7
68767: PUSH
68768: LD_VAR 0 10
68772: ST_TO_ADDR
// end ;
68773: LD_VAR 0 7
68777: RET
// export function EnemyInRange ( unit , dist ) ; begin
68778: LD_INT 0
68780: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
68781: LD_ADDR_VAR 0 3
68785: PUSH
68786: LD_VAR 0 1
68790: PPUSH
68791: CALL_OW 255
68795: PPUSH
68796: LD_VAR 0 1
68800: PPUSH
68801: CALL_OW 250
68805: PPUSH
68806: LD_VAR 0 1
68810: PPUSH
68811: CALL_OW 251
68815: PPUSH
68816: LD_VAR 0 2
68820: PPUSH
68821: CALL 42174 0 4
68825: PUSH
68826: LD_INT 4
68828: ARRAY
68829: ST_TO_ADDR
// end ;
68830: LD_VAR 0 3
68834: RET
// export function PlayerSeeMe ( unit ) ; begin
68835: LD_INT 0
68837: PPUSH
// result := See ( your_side , unit ) ;
68838: LD_ADDR_VAR 0 2
68842: PUSH
68843: LD_OWVAR 2
68847: PPUSH
68848: LD_VAR 0 1
68852: PPUSH
68853: CALL_OW 292
68857: ST_TO_ADDR
// end ;
68858: LD_VAR 0 2
68862: RET
// export function ReverseDir ( unit ) ; begin
68863: LD_INT 0
68865: PPUSH
// if not unit then
68866: LD_VAR 0 1
68870: NOT
68871: IFFALSE 68875
// exit ;
68873: GO 68898
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
68875: LD_ADDR_VAR 0 2
68879: PUSH
68880: LD_VAR 0 1
68884: PPUSH
68885: CALL_OW 254
68889: PUSH
68890: LD_INT 3
68892: PLUS
68893: PUSH
68894: LD_INT 6
68896: MOD
68897: ST_TO_ADDR
// end ;
68898: LD_VAR 0 2
68902: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
68903: LD_INT 0
68905: PPUSH
68906: PPUSH
68907: PPUSH
68908: PPUSH
68909: PPUSH
// if not hexes then
68910: LD_VAR 0 2
68914: NOT
68915: IFFALSE 68919
// exit ;
68917: GO 69067
// dist := 9999 ;
68919: LD_ADDR_VAR 0 5
68923: PUSH
68924: LD_INT 9999
68926: ST_TO_ADDR
// for i = 1 to hexes do
68927: LD_ADDR_VAR 0 4
68931: PUSH
68932: DOUBLE
68933: LD_INT 1
68935: DEC
68936: ST_TO_ADDR
68937: LD_VAR 0 2
68941: PUSH
68942: FOR_TO
68943: IFFALSE 69055
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
68945: LD_VAR 0 1
68949: PPUSH
68950: LD_VAR 0 2
68954: PUSH
68955: LD_VAR 0 4
68959: ARRAY
68960: PUSH
68961: LD_INT 1
68963: ARRAY
68964: PPUSH
68965: LD_VAR 0 2
68969: PUSH
68970: LD_VAR 0 4
68974: ARRAY
68975: PUSH
68976: LD_INT 2
68978: ARRAY
68979: PPUSH
68980: CALL_OW 297
68984: PUSH
68985: LD_VAR 0 5
68989: LESS
68990: IFFALSE 69053
// begin hex := hexes [ i ] ;
68992: LD_ADDR_VAR 0 7
68996: PUSH
68997: LD_VAR 0 2
69001: PUSH
69002: LD_VAR 0 4
69006: ARRAY
69007: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
69008: LD_ADDR_VAR 0 5
69012: PUSH
69013: LD_VAR 0 1
69017: PPUSH
69018: LD_VAR 0 2
69022: PUSH
69023: LD_VAR 0 4
69027: ARRAY
69028: PUSH
69029: LD_INT 1
69031: ARRAY
69032: PPUSH
69033: LD_VAR 0 2
69037: PUSH
69038: LD_VAR 0 4
69042: ARRAY
69043: PUSH
69044: LD_INT 2
69046: ARRAY
69047: PPUSH
69048: CALL_OW 297
69052: ST_TO_ADDR
// end ; end ;
69053: GO 68942
69055: POP
69056: POP
// result := hex ;
69057: LD_ADDR_VAR 0 3
69061: PUSH
69062: LD_VAR 0 7
69066: ST_TO_ADDR
// end ;
69067: LD_VAR 0 3
69071: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
69072: LD_INT 0
69074: PPUSH
69075: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
69076: LD_VAR 0 1
69080: NOT
69081: PUSH
69082: LD_VAR 0 1
69086: PUSH
69087: LD_INT 21
69089: PUSH
69090: LD_INT 2
69092: PUSH
69093: EMPTY
69094: LIST
69095: LIST
69096: PUSH
69097: LD_INT 23
69099: PUSH
69100: LD_INT 2
69102: PUSH
69103: EMPTY
69104: LIST
69105: LIST
69106: PUSH
69107: EMPTY
69108: LIST
69109: LIST
69110: PPUSH
69111: CALL_OW 69
69115: IN
69116: NOT
69117: OR
69118: IFFALSE 69122
// exit ;
69120: GO 69169
// for i = 1 to 3 do
69122: LD_ADDR_VAR 0 3
69126: PUSH
69127: DOUBLE
69128: LD_INT 1
69130: DEC
69131: ST_TO_ADDR
69132: LD_INT 3
69134: PUSH
69135: FOR_TO
69136: IFFALSE 69167
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
69138: LD_VAR 0 1
69142: PPUSH
69143: CALL_OW 250
69147: PPUSH
69148: LD_VAR 0 1
69152: PPUSH
69153: CALL_OW 251
69157: PPUSH
69158: LD_INT 1
69160: PPUSH
69161: CALL_OW 453
69165: GO 69135
69167: POP
69168: POP
// end ;
69169: LD_VAR 0 2
69173: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
69174: LD_INT 0
69176: PPUSH
69177: PPUSH
69178: PPUSH
69179: PPUSH
69180: PPUSH
69181: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
69182: LD_VAR 0 1
69186: NOT
69187: PUSH
69188: LD_VAR 0 2
69192: NOT
69193: OR
69194: PUSH
69195: LD_VAR 0 1
69199: PPUSH
69200: CALL_OW 314
69204: OR
69205: IFFALSE 69209
// exit ;
69207: GO 69650
// x := GetX ( enemy_unit ) ;
69209: LD_ADDR_VAR 0 7
69213: PUSH
69214: LD_VAR 0 2
69218: PPUSH
69219: CALL_OW 250
69223: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
69224: LD_ADDR_VAR 0 8
69228: PUSH
69229: LD_VAR 0 2
69233: PPUSH
69234: CALL_OW 251
69238: ST_TO_ADDR
// if not x or not y then
69239: LD_VAR 0 7
69243: NOT
69244: PUSH
69245: LD_VAR 0 8
69249: NOT
69250: OR
69251: IFFALSE 69255
// exit ;
69253: GO 69650
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
69255: LD_ADDR_VAR 0 6
69259: PUSH
69260: LD_VAR 0 7
69264: PPUSH
69265: LD_INT 0
69267: PPUSH
69268: LD_INT 4
69270: PPUSH
69271: CALL_OW 272
69275: PUSH
69276: LD_VAR 0 8
69280: PPUSH
69281: LD_INT 0
69283: PPUSH
69284: LD_INT 4
69286: PPUSH
69287: CALL_OW 273
69291: PUSH
69292: EMPTY
69293: LIST
69294: LIST
69295: PUSH
69296: LD_VAR 0 7
69300: PPUSH
69301: LD_INT 1
69303: PPUSH
69304: LD_INT 4
69306: PPUSH
69307: CALL_OW 272
69311: PUSH
69312: LD_VAR 0 8
69316: PPUSH
69317: LD_INT 1
69319: PPUSH
69320: LD_INT 4
69322: PPUSH
69323: CALL_OW 273
69327: PUSH
69328: EMPTY
69329: LIST
69330: LIST
69331: PUSH
69332: LD_VAR 0 7
69336: PPUSH
69337: LD_INT 2
69339: PPUSH
69340: LD_INT 4
69342: PPUSH
69343: CALL_OW 272
69347: PUSH
69348: LD_VAR 0 8
69352: PPUSH
69353: LD_INT 2
69355: PPUSH
69356: LD_INT 4
69358: PPUSH
69359: CALL_OW 273
69363: PUSH
69364: EMPTY
69365: LIST
69366: LIST
69367: PUSH
69368: LD_VAR 0 7
69372: PPUSH
69373: LD_INT 3
69375: PPUSH
69376: LD_INT 4
69378: PPUSH
69379: CALL_OW 272
69383: PUSH
69384: LD_VAR 0 8
69388: PPUSH
69389: LD_INT 3
69391: PPUSH
69392: LD_INT 4
69394: PPUSH
69395: CALL_OW 273
69399: PUSH
69400: EMPTY
69401: LIST
69402: LIST
69403: PUSH
69404: LD_VAR 0 7
69408: PPUSH
69409: LD_INT 4
69411: PPUSH
69412: LD_INT 4
69414: PPUSH
69415: CALL_OW 272
69419: PUSH
69420: LD_VAR 0 8
69424: PPUSH
69425: LD_INT 4
69427: PPUSH
69428: LD_INT 4
69430: PPUSH
69431: CALL_OW 273
69435: PUSH
69436: EMPTY
69437: LIST
69438: LIST
69439: PUSH
69440: LD_VAR 0 7
69444: PPUSH
69445: LD_INT 5
69447: PPUSH
69448: LD_INT 4
69450: PPUSH
69451: CALL_OW 272
69455: PUSH
69456: LD_VAR 0 8
69460: PPUSH
69461: LD_INT 5
69463: PPUSH
69464: LD_INT 4
69466: PPUSH
69467: CALL_OW 273
69471: PUSH
69472: EMPTY
69473: LIST
69474: LIST
69475: PUSH
69476: EMPTY
69477: LIST
69478: LIST
69479: LIST
69480: LIST
69481: LIST
69482: LIST
69483: ST_TO_ADDR
// for i = tmp downto 1 do
69484: LD_ADDR_VAR 0 4
69488: PUSH
69489: DOUBLE
69490: LD_VAR 0 6
69494: INC
69495: ST_TO_ADDR
69496: LD_INT 1
69498: PUSH
69499: FOR_DOWNTO
69500: IFFALSE 69601
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
69502: LD_VAR 0 6
69506: PUSH
69507: LD_VAR 0 4
69511: ARRAY
69512: PUSH
69513: LD_INT 1
69515: ARRAY
69516: PPUSH
69517: LD_VAR 0 6
69521: PUSH
69522: LD_VAR 0 4
69526: ARRAY
69527: PUSH
69528: LD_INT 2
69530: ARRAY
69531: PPUSH
69532: CALL_OW 488
69536: NOT
69537: PUSH
69538: LD_VAR 0 6
69542: PUSH
69543: LD_VAR 0 4
69547: ARRAY
69548: PUSH
69549: LD_INT 1
69551: ARRAY
69552: PPUSH
69553: LD_VAR 0 6
69557: PUSH
69558: LD_VAR 0 4
69562: ARRAY
69563: PUSH
69564: LD_INT 2
69566: ARRAY
69567: PPUSH
69568: CALL_OW 428
69572: PUSH
69573: LD_INT 0
69575: NONEQUAL
69576: OR
69577: IFFALSE 69599
// tmp := Delete ( tmp , i ) ;
69579: LD_ADDR_VAR 0 6
69583: PUSH
69584: LD_VAR 0 6
69588: PPUSH
69589: LD_VAR 0 4
69593: PPUSH
69594: CALL_OW 3
69598: ST_TO_ADDR
69599: GO 69499
69601: POP
69602: POP
// j := GetClosestHex ( unit , tmp ) ;
69603: LD_ADDR_VAR 0 5
69607: PUSH
69608: LD_VAR 0 1
69612: PPUSH
69613: LD_VAR 0 6
69617: PPUSH
69618: CALL 68903 0 2
69622: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
69623: LD_VAR 0 1
69627: PPUSH
69628: LD_VAR 0 5
69632: PUSH
69633: LD_INT 1
69635: ARRAY
69636: PPUSH
69637: LD_VAR 0 5
69641: PUSH
69642: LD_INT 2
69644: ARRAY
69645: PPUSH
69646: CALL_OW 111
// end ;
69650: LD_VAR 0 3
69654: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
69655: LD_INT 0
69657: PPUSH
69658: PPUSH
69659: PPUSH
// uc_side = 0 ;
69660: LD_ADDR_OWVAR 20
69664: PUSH
69665: LD_INT 0
69667: ST_TO_ADDR
// uc_nation = 0 ;
69668: LD_ADDR_OWVAR 21
69672: PUSH
69673: LD_INT 0
69675: ST_TO_ADDR
// InitHc_All ( ) ;
69676: CALL_OW 584
// InitVc ;
69680: CALL_OW 20
// if mastodonts then
69684: LD_VAR 0 6
69688: IFFALSE 69755
// for i = 1 to mastodonts do
69690: LD_ADDR_VAR 0 11
69694: PUSH
69695: DOUBLE
69696: LD_INT 1
69698: DEC
69699: ST_TO_ADDR
69700: LD_VAR 0 6
69704: PUSH
69705: FOR_TO
69706: IFFALSE 69753
// begin vc_chassis := 31 ;
69708: LD_ADDR_OWVAR 37
69712: PUSH
69713: LD_INT 31
69715: ST_TO_ADDR
// vc_control := control_rider ;
69716: LD_ADDR_OWVAR 38
69720: PUSH
69721: LD_INT 4
69723: ST_TO_ADDR
// animal := CreateVehicle ;
69724: LD_ADDR_VAR 0 12
69728: PUSH
69729: CALL_OW 45
69733: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69734: LD_VAR 0 12
69738: PPUSH
69739: LD_VAR 0 8
69743: PPUSH
69744: LD_INT 0
69746: PPUSH
69747: CALL 71943 0 3
// end ;
69751: GO 69705
69753: POP
69754: POP
// if horses then
69755: LD_VAR 0 5
69759: IFFALSE 69826
// for i = 1 to horses do
69761: LD_ADDR_VAR 0 11
69765: PUSH
69766: DOUBLE
69767: LD_INT 1
69769: DEC
69770: ST_TO_ADDR
69771: LD_VAR 0 5
69775: PUSH
69776: FOR_TO
69777: IFFALSE 69824
// begin hc_class := 21 ;
69779: LD_ADDR_OWVAR 28
69783: PUSH
69784: LD_INT 21
69786: ST_TO_ADDR
// hc_gallery :=  ;
69787: LD_ADDR_OWVAR 33
69791: PUSH
69792: LD_STRING 
69794: ST_TO_ADDR
// animal := CreateHuman ;
69795: LD_ADDR_VAR 0 12
69799: PUSH
69800: CALL_OW 44
69804: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69805: LD_VAR 0 12
69809: PPUSH
69810: LD_VAR 0 8
69814: PPUSH
69815: LD_INT 0
69817: PPUSH
69818: CALL 71943 0 3
// end ;
69822: GO 69776
69824: POP
69825: POP
// if birds then
69826: LD_VAR 0 1
69830: IFFALSE 69897
// for i = 1 to birds do
69832: LD_ADDR_VAR 0 11
69836: PUSH
69837: DOUBLE
69838: LD_INT 1
69840: DEC
69841: ST_TO_ADDR
69842: LD_VAR 0 1
69846: PUSH
69847: FOR_TO
69848: IFFALSE 69895
// begin hc_class = 18 ;
69850: LD_ADDR_OWVAR 28
69854: PUSH
69855: LD_INT 18
69857: ST_TO_ADDR
// hc_gallery =  ;
69858: LD_ADDR_OWVAR 33
69862: PUSH
69863: LD_STRING 
69865: ST_TO_ADDR
// animal := CreateHuman ;
69866: LD_ADDR_VAR 0 12
69870: PUSH
69871: CALL_OW 44
69875: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69876: LD_VAR 0 12
69880: PPUSH
69881: LD_VAR 0 8
69885: PPUSH
69886: LD_INT 0
69888: PPUSH
69889: CALL 71943 0 3
// end ;
69893: GO 69847
69895: POP
69896: POP
// if tigers then
69897: LD_VAR 0 2
69901: IFFALSE 69985
// for i = 1 to tigers do
69903: LD_ADDR_VAR 0 11
69907: PUSH
69908: DOUBLE
69909: LD_INT 1
69911: DEC
69912: ST_TO_ADDR
69913: LD_VAR 0 2
69917: PUSH
69918: FOR_TO
69919: IFFALSE 69983
// begin hc_class = class_tiger ;
69921: LD_ADDR_OWVAR 28
69925: PUSH
69926: LD_INT 14
69928: ST_TO_ADDR
// hc_gallery =  ;
69929: LD_ADDR_OWVAR 33
69933: PUSH
69934: LD_STRING 
69936: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
69937: LD_ADDR_OWVAR 35
69941: PUSH
69942: LD_INT 7
69944: NEG
69945: PPUSH
69946: LD_INT 7
69948: PPUSH
69949: CALL_OW 12
69953: ST_TO_ADDR
// animal := CreateHuman ;
69954: LD_ADDR_VAR 0 12
69958: PUSH
69959: CALL_OW 44
69963: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69964: LD_VAR 0 12
69968: PPUSH
69969: LD_VAR 0 8
69973: PPUSH
69974: LD_INT 0
69976: PPUSH
69977: CALL 71943 0 3
// end ;
69981: GO 69918
69983: POP
69984: POP
// if apemans then
69985: LD_VAR 0 3
69989: IFFALSE 70112
// for i = 1 to apemans do
69991: LD_ADDR_VAR 0 11
69995: PUSH
69996: DOUBLE
69997: LD_INT 1
69999: DEC
70000: ST_TO_ADDR
70001: LD_VAR 0 3
70005: PUSH
70006: FOR_TO
70007: IFFALSE 70110
// begin hc_class = class_apeman ;
70009: LD_ADDR_OWVAR 28
70013: PUSH
70014: LD_INT 12
70016: ST_TO_ADDR
// hc_gallery =  ;
70017: LD_ADDR_OWVAR 33
70021: PUSH
70022: LD_STRING 
70024: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
70025: LD_ADDR_OWVAR 35
70029: PUSH
70030: LD_INT 2
70032: NEG
70033: PPUSH
70034: LD_INT 2
70036: PPUSH
70037: CALL_OW 12
70041: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
70042: LD_ADDR_OWVAR 31
70046: PUSH
70047: LD_INT 1
70049: PPUSH
70050: LD_INT 3
70052: PPUSH
70053: CALL_OW 12
70057: PUSH
70058: LD_INT 1
70060: PPUSH
70061: LD_INT 3
70063: PPUSH
70064: CALL_OW 12
70068: PUSH
70069: LD_INT 0
70071: PUSH
70072: LD_INT 0
70074: PUSH
70075: EMPTY
70076: LIST
70077: LIST
70078: LIST
70079: LIST
70080: ST_TO_ADDR
// animal := CreateHuman ;
70081: LD_ADDR_VAR 0 12
70085: PUSH
70086: CALL_OW 44
70090: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70091: LD_VAR 0 12
70095: PPUSH
70096: LD_VAR 0 8
70100: PPUSH
70101: LD_INT 0
70103: PPUSH
70104: CALL 71943 0 3
// end ;
70108: GO 70006
70110: POP
70111: POP
// if enchidnas then
70112: LD_VAR 0 4
70116: IFFALSE 70183
// for i = 1 to enchidnas do
70118: LD_ADDR_VAR 0 11
70122: PUSH
70123: DOUBLE
70124: LD_INT 1
70126: DEC
70127: ST_TO_ADDR
70128: LD_VAR 0 4
70132: PUSH
70133: FOR_TO
70134: IFFALSE 70181
// begin hc_class = 13 ;
70136: LD_ADDR_OWVAR 28
70140: PUSH
70141: LD_INT 13
70143: ST_TO_ADDR
// hc_gallery =  ;
70144: LD_ADDR_OWVAR 33
70148: PUSH
70149: LD_STRING 
70151: ST_TO_ADDR
// animal := CreateHuman ;
70152: LD_ADDR_VAR 0 12
70156: PUSH
70157: CALL_OW 44
70161: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70162: LD_VAR 0 12
70166: PPUSH
70167: LD_VAR 0 8
70171: PPUSH
70172: LD_INT 0
70174: PPUSH
70175: CALL 71943 0 3
// end ;
70179: GO 70133
70181: POP
70182: POP
// if fishes then
70183: LD_VAR 0 7
70187: IFFALSE 70254
// for i = 1 to fishes do
70189: LD_ADDR_VAR 0 11
70193: PUSH
70194: DOUBLE
70195: LD_INT 1
70197: DEC
70198: ST_TO_ADDR
70199: LD_VAR 0 7
70203: PUSH
70204: FOR_TO
70205: IFFALSE 70252
// begin hc_class = 20 ;
70207: LD_ADDR_OWVAR 28
70211: PUSH
70212: LD_INT 20
70214: ST_TO_ADDR
// hc_gallery =  ;
70215: LD_ADDR_OWVAR 33
70219: PUSH
70220: LD_STRING 
70222: ST_TO_ADDR
// animal := CreateHuman ;
70223: LD_ADDR_VAR 0 12
70227: PUSH
70228: CALL_OW 44
70232: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
70233: LD_VAR 0 12
70237: PPUSH
70238: LD_VAR 0 9
70242: PPUSH
70243: LD_INT 0
70245: PPUSH
70246: CALL 71943 0 3
// end ;
70250: GO 70204
70252: POP
70253: POP
// end ;
70254: LD_VAR 0 10
70258: RET
// export function WantHeal ( sci , unit ) ; begin
70259: LD_INT 0
70261: PPUSH
// if GetTaskList ( sci ) > 0 then
70262: LD_VAR 0 1
70266: PPUSH
70267: CALL_OW 437
70271: PUSH
70272: LD_INT 0
70274: GREATER
70275: IFFALSE 70345
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
70277: LD_VAR 0 1
70281: PPUSH
70282: CALL_OW 437
70286: PUSH
70287: LD_INT 1
70289: ARRAY
70290: PUSH
70291: LD_INT 1
70293: ARRAY
70294: PUSH
70295: LD_STRING l
70297: EQUAL
70298: PUSH
70299: LD_VAR 0 1
70303: PPUSH
70304: CALL_OW 437
70308: PUSH
70309: LD_INT 1
70311: ARRAY
70312: PUSH
70313: LD_INT 4
70315: ARRAY
70316: PUSH
70317: LD_VAR 0 2
70321: EQUAL
70322: AND
70323: IFFALSE 70335
// result := true else
70325: LD_ADDR_VAR 0 3
70329: PUSH
70330: LD_INT 1
70332: ST_TO_ADDR
70333: GO 70343
// result := false ;
70335: LD_ADDR_VAR 0 3
70339: PUSH
70340: LD_INT 0
70342: ST_TO_ADDR
// end else
70343: GO 70353
// result := false ;
70345: LD_ADDR_VAR 0 3
70349: PUSH
70350: LD_INT 0
70352: ST_TO_ADDR
// end ;
70353: LD_VAR 0 3
70357: RET
// export function HealTarget ( sci ) ; begin
70358: LD_INT 0
70360: PPUSH
// if not sci then
70361: LD_VAR 0 1
70365: NOT
70366: IFFALSE 70370
// exit ;
70368: GO 70435
// result := 0 ;
70370: LD_ADDR_VAR 0 2
70374: PUSH
70375: LD_INT 0
70377: ST_TO_ADDR
// if GetTaskList ( sci ) then
70378: LD_VAR 0 1
70382: PPUSH
70383: CALL_OW 437
70387: IFFALSE 70435
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
70389: LD_VAR 0 1
70393: PPUSH
70394: CALL_OW 437
70398: PUSH
70399: LD_INT 1
70401: ARRAY
70402: PUSH
70403: LD_INT 1
70405: ARRAY
70406: PUSH
70407: LD_STRING l
70409: EQUAL
70410: IFFALSE 70435
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
70412: LD_ADDR_VAR 0 2
70416: PUSH
70417: LD_VAR 0 1
70421: PPUSH
70422: CALL_OW 437
70426: PUSH
70427: LD_INT 1
70429: ARRAY
70430: PUSH
70431: LD_INT 4
70433: ARRAY
70434: ST_TO_ADDR
// end ;
70435: LD_VAR 0 2
70439: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
70440: LD_INT 0
70442: PPUSH
70443: PPUSH
70444: PPUSH
70445: PPUSH
// if not base_units then
70446: LD_VAR 0 1
70450: NOT
70451: IFFALSE 70455
// exit ;
70453: GO 70542
// result := false ;
70455: LD_ADDR_VAR 0 2
70459: PUSH
70460: LD_INT 0
70462: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
70463: LD_ADDR_VAR 0 5
70467: PUSH
70468: LD_VAR 0 1
70472: PPUSH
70473: LD_INT 21
70475: PUSH
70476: LD_INT 3
70478: PUSH
70479: EMPTY
70480: LIST
70481: LIST
70482: PPUSH
70483: CALL_OW 72
70487: ST_TO_ADDR
// if not tmp then
70488: LD_VAR 0 5
70492: NOT
70493: IFFALSE 70497
// exit ;
70495: GO 70542
// for i in tmp do
70497: LD_ADDR_VAR 0 3
70501: PUSH
70502: LD_VAR 0 5
70506: PUSH
70507: FOR_IN
70508: IFFALSE 70540
// begin result := EnemyInRange ( i , 22 ) ;
70510: LD_ADDR_VAR 0 2
70514: PUSH
70515: LD_VAR 0 3
70519: PPUSH
70520: LD_INT 22
70522: PPUSH
70523: CALL 68778 0 2
70527: ST_TO_ADDR
// if result then
70528: LD_VAR 0 2
70532: IFFALSE 70538
// exit ;
70534: POP
70535: POP
70536: GO 70542
// end ;
70538: GO 70507
70540: POP
70541: POP
// end ;
70542: LD_VAR 0 2
70546: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
70547: LD_INT 0
70549: PPUSH
70550: PPUSH
// if not units then
70551: LD_VAR 0 1
70555: NOT
70556: IFFALSE 70560
// exit ;
70558: GO 70630
// result := [ ] ;
70560: LD_ADDR_VAR 0 3
70564: PUSH
70565: EMPTY
70566: ST_TO_ADDR
// for i in units do
70567: LD_ADDR_VAR 0 4
70571: PUSH
70572: LD_VAR 0 1
70576: PUSH
70577: FOR_IN
70578: IFFALSE 70628
// if GetTag ( i ) = tag then
70580: LD_VAR 0 4
70584: PPUSH
70585: CALL_OW 110
70589: PUSH
70590: LD_VAR 0 2
70594: EQUAL
70595: IFFALSE 70626
// result := Replace ( result , result + 1 , i ) ;
70597: LD_ADDR_VAR 0 3
70601: PUSH
70602: LD_VAR 0 3
70606: PPUSH
70607: LD_VAR 0 3
70611: PUSH
70612: LD_INT 1
70614: PLUS
70615: PPUSH
70616: LD_VAR 0 4
70620: PPUSH
70621: CALL_OW 1
70625: ST_TO_ADDR
70626: GO 70577
70628: POP
70629: POP
// end ;
70630: LD_VAR 0 3
70634: RET
// export function IsDriver ( un ) ; begin
70635: LD_INT 0
70637: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
70638: LD_ADDR_VAR 0 2
70642: PUSH
70643: LD_VAR 0 1
70647: PUSH
70648: LD_INT 55
70650: PUSH
70651: EMPTY
70652: LIST
70653: PPUSH
70654: CALL_OW 69
70658: IN
70659: ST_TO_ADDR
// end ;
70660: LD_VAR 0 2
70664: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
70665: LD_INT 0
70667: PPUSH
70668: PPUSH
// list := [ ] ;
70669: LD_ADDR_VAR 0 5
70673: PUSH
70674: EMPTY
70675: ST_TO_ADDR
// case d of 0 :
70676: LD_VAR 0 3
70680: PUSH
70681: LD_INT 0
70683: DOUBLE
70684: EQUAL
70685: IFTRUE 70689
70687: GO 70822
70689: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
70690: LD_ADDR_VAR 0 5
70694: PUSH
70695: LD_VAR 0 1
70699: PUSH
70700: LD_INT 4
70702: MINUS
70703: PUSH
70704: LD_VAR 0 2
70708: PUSH
70709: LD_INT 4
70711: MINUS
70712: PUSH
70713: LD_INT 2
70715: PUSH
70716: EMPTY
70717: LIST
70718: LIST
70719: LIST
70720: PUSH
70721: LD_VAR 0 1
70725: PUSH
70726: LD_INT 3
70728: MINUS
70729: PUSH
70730: LD_VAR 0 2
70734: PUSH
70735: LD_INT 1
70737: PUSH
70738: EMPTY
70739: LIST
70740: LIST
70741: LIST
70742: PUSH
70743: LD_VAR 0 1
70747: PUSH
70748: LD_INT 4
70750: PLUS
70751: PUSH
70752: LD_VAR 0 2
70756: PUSH
70757: LD_INT 4
70759: PUSH
70760: EMPTY
70761: LIST
70762: LIST
70763: LIST
70764: PUSH
70765: LD_VAR 0 1
70769: PUSH
70770: LD_INT 3
70772: PLUS
70773: PUSH
70774: LD_VAR 0 2
70778: PUSH
70779: LD_INT 3
70781: PLUS
70782: PUSH
70783: LD_INT 5
70785: PUSH
70786: EMPTY
70787: LIST
70788: LIST
70789: LIST
70790: PUSH
70791: LD_VAR 0 1
70795: PUSH
70796: LD_VAR 0 2
70800: PUSH
70801: LD_INT 4
70803: PLUS
70804: PUSH
70805: LD_INT 0
70807: PUSH
70808: EMPTY
70809: LIST
70810: LIST
70811: LIST
70812: PUSH
70813: EMPTY
70814: LIST
70815: LIST
70816: LIST
70817: LIST
70818: LIST
70819: ST_TO_ADDR
// end ; 1 :
70820: GO 71520
70822: LD_INT 1
70824: DOUBLE
70825: EQUAL
70826: IFTRUE 70830
70828: GO 70963
70830: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
70831: LD_ADDR_VAR 0 5
70835: PUSH
70836: LD_VAR 0 1
70840: PUSH
70841: LD_VAR 0 2
70845: PUSH
70846: LD_INT 4
70848: MINUS
70849: PUSH
70850: LD_INT 3
70852: PUSH
70853: EMPTY
70854: LIST
70855: LIST
70856: LIST
70857: PUSH
70858: LD_VAR 0 1
70862: PUSH
70863: LD_INT 3
70865: MINUS
70866: PUSH
70867: LD_VAR 0 2
70871: PUSH
70872: LD_INT 3
70874: MINUS
70875: PUSH
70876: LD_INT 2
70878: PUSH
70879: EMPTY
70880: LIST
70881: LIST
70882: LIST
70883: PUSH
70884: LD_VAR 0 1
70888: PUSH
70889: LD_INT 4
70891: MINUS
70892: PUSH
70893: LD_VAR 0 2
70897: PUSH
70898: LD_INT 1
70900: PUSH
70901: EMPTY
70902: LIST
70903: LIST
70904: LIST
70905: PUSH
70906: LD_VAR 0 1
70910: PUSH
70911: LD_VAR 0 2
70915: PUSH
70916: LD_INT 3
70918: PLUS
70919: PUSH
70920: LD_INT 0
70922: PUSH
70923: EMPTY
70924: LIST
70925: LIST
70926: LIST
70927: PUSH
70928: LD_VAR 0 1
70932: PUSH
70933: LD_INT 4
70935: PLUS
70936: PUSH
70937: LD_VAR 0 2
70941: PUSH
70942: LD_INT 4
70944: PLUS
70945: PUSH
70946: LD_INT 5
70948: PUSH
70949: EMPTY
70950: LIST
70951: LIST
70952: LIST
70953: PUSH
70954: EMPTY
70955: LIST
70956: LIST
70957: LIST
70958: LIST
70959: LIST
70960: ST_TO_ADDR
// end ; 2 :
70961: GO 71520
70963: LD_INT 2
70965: DOUBLE
70966: EQUAL
70967: IFTRUE 70971
70969: GO 71100
70971: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
70972: LD_ADDR_VAR 0 5
70976: PUSH
70977: LD_VAR 0 1
70981: PUSH
70982: LD_VAR 0 2
70986: PUSH
70987: LD_INT 3
70989: MINUS
70990: PUSH
70991: LD_INT 3
70993: PUSH
70994: EMPTY
70995: LIST
70996: LIST
70997: LIST
70998: PUSH
70999: LD_VAR 0 1
71003: PUSH
71004: LD_INT 4
71006: PLUS
71007: PUSH
71008: LD_VAR 0 2
71012: PUSH
71013: LD_INT 4
71015: PUSH
71016: EMPTY
71017: LIST
71018: LIST
71019: LIST
71020: PUSH
71021: LD_VAR 0 1
71025: PUSH
71026: LD_VAR 0 2
71030: PUSH
71031: LD_INT 4
71033: PLUS
71034: PUSH
71035: LD_INT 0
71037: PUSH
71038: EMPTY
71039: LIST
71040: LIST
71041: LIST
71042: PUSH
71043: LD_VAR 0 1
71047: PUSH
71048: LD_INT 3
71050: MINUS
71051: PUSH
71052: LD_VAR 0 2
71056: PUSH
71057: LD_INT 1
71059: PUSH
71060: EMPTY
71061: LIST
71062: LIST
71063: LIST
71064: PUSH
71065: LD_VAR 0 1
71069: PUSH
71070: LD_INT 4
71072: MINUS
71073: PUSH
71074: LD_VAR 0 2
71078: PUSH
71079: LD_INT 4
71081: MINUS
71082: PUSH
71083: LD_INT 2
71085: PUSH
71086: EMPTY
71087: LIST
71088: LIST
71089: LIST
71090: PUSH
71091: EMPTY
71092: LIST
71093: LIST
71094: LIST
71095: LIST
71096: LIST
71097: ST_TO_ADDR
// end ; 3 :
71098: GO 71520
71100: LD_INT 3
71102: DOUBLE
71103: EQUAL
71104: IFTRUE 71108
71106: GO 71241
71108: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
71109: LD_ADDR_VAR 0 5
71113: PUSH
71114: LD_VAR 0 1
71118: PUSH
71119: LD_INT 3
71121: PLUS
71122: PUSH
71123: LD_VAR 0 2
71127: PUSH
71128: LD_INT 4
71130: PUSH
71131: EMPTY
71132: LIST
71133: LIST
71134: LIST
71135: PUSH
71136: LD_VAR 0 1
71140: PUSH
71141: LD_INT 4
71143: PLUS
71144: PUSH
71145: LD_VAR 0 2
71149: PUSH
71150: LD_INT 4
71152: PLUS
71153: PUSH
71154: LD_INT 5
71156: PUSH
71157: EMPTY
71158: LIST
71159: LIST
71160: LIST
71161: PUSH
71162: LD_VAR 0 1
71166: PUSH
71167: LD_INT 4
71169: MINUS
71170: PUSH
71171: LD_VAR 0 2
71175: PUSH
71176: LD_INT 1
71178: PUSH
71179: EMPTY
71180: LIST
71181: LIST
71182: LIST
71183: PUSH
71184: LD_VAR 0 1
71188: PUSH
71189: LD_VAR 0 2
71193: PUSH
71194: LD_INT 4
71196: MINUS
71197: PUSH
71198: LD_INT 3
71200: PUSH
71201: EMPTY
71202: LIST
71203: LIST
71204: LIST
71205: PUSH
71206: LD_VAR 0 1
71210: PUSH
71211: LD_INT 3
71213: MINUS
71214: PUSH
71215: LD_VAR 0 2
71219: PUSH
71220: LD_INT 3
71222: MINUS
71223: PUSH
71224: LD_INT 2
71226: PUSH
71227: EMPTY
71228: LIST
71229: LIST
71230: LIST
71231: PUSH
71232: EMPTY
71233: LIST
71234: LIST
71235: LIST
71236: LIST
71237: LIST
71238: ST_TO_ADDR
// end ; 4 :
71239: GO 71520
71241: LD_INT 4
71243: DOUBLE
71244: EQUAL
71245: IFTRUE 71249
71247: GO 71382
71249: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
71250: LD_ADDR_VAR 0 5
71254: PUSH
71255: LD_VAR 0 1
71259: PUSH
71260: LD_VAR 0 2
71264: PUSH
71265: LD_INT 4
71267: PLUS
71268: PUSH
71269: LD_INT 0
71271: PUSH
71272: EMPTY
71273: LIST
71274: LIST
71275: LIST
71276: PUSH
71277: LD_VAR 0 1
71281: PUSH
71282: LD_INT 3
71284: PLUS
71285: PUSH
71286: LD_VAR 0 2
71290: PUSH
71291: LD_INT 3
71293: PLUS
71294: PUSH
71295: LD_INT 5
71297: PUSH
71298: EMPTY
71299: LIST
71300: LIST
71301: LIST
71302: PUSH
71303: LD_VAR 0 1
71307: PUSH
71308: LD_INT 4
71310: PLUS
71311: PUSH
71312: LD_VAR 0 2
71316: PUSH
71317: LD_INT 4
71319: PUSH
71320: EMPTY
71321: LIST
71322: LIST
71323: LIST
71324: PUSH
71325: LD_VAR 0 1
71329: PUSH
71330: LD_VAR 0 2
71334: PUSH
71335: LD_INT 3
71337: MINUS
71338: PUSH
71339: LD_INT 3
71341: PUSH
71342: EMPTY
71343: LIST
71344: LIST
71345: LIST
71346: PUSH
71347: LD_VAR 0 1
71351: PUSH
71352: LD_INT 4
71354: MINUS
71355: PUSH
71356: LD_VAR 0 2
71360: PUSH
71361: LD_INT 4
71363: MINUS
71364: PUSH
71365: LD_INT 2
71367: PUSH
71368: EMPTY
71369: LIST
71370: LIST
71371: LIST
71372: PUSH
71373: EMPTY
71374: LIST
71375: LIST
71376: LIST
71377: LIST
71378: LIST
71379: ST_TO_ADDR
// end ; 5 :
71380: GO 71520
71382: LD_INT 5
71384: DOUBLE
71385: EQUAL
71386: IFTRUE 71390
71388: GO 71519
71390: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
71391: LD_ADDR_VAR 0 5
71395: PUSH
71396: LD_VAR 0 1
71400: PUSH
71401: LD_INT 4
71403: MINUS
71404: PUSH
71405: LD_VAR 0 2
71409: PUSH
71410: LD_INT 1
71412: PUSH
71413: EMPTY
71414: LIST
71415: LIST
71416: LIST
71417: PUSH
71418: LD_VAR 0 1
71422: PUSH
71423: LD_VAR 0 2
71427: PUSH
71428: LD_INT 4
71430: MINUS
71431: PUSH
71432: LD_INT 3
71434: PUSH
71435: EMPTY
71436: LIST
71437: LIST
71438: LIST
71439: PUSH
71440: LD_VAR 0 1
71444: PUSH
71445: LD_INT 4
71447: PLUS
71448: PUSH
71449: LD_VAR 0 2
71453: PUSH
71454: LD_INT 4
71456: PLUS
71457: PUSH
71458: LD_INT 5
71460: PUSH
71461: EMPTY
71462: LIST
71463: LIST
71464: LIST
71465: PUSH
71466: LD_VAR 0 1
71470: PUSH
71471: LD_INT 3
71473: PLUS
71474: PUSH
71475: LD_VAR 0 2
71479: PUSH
71480: LD_INT 4
71482: PUSH
71483: EMPTY
71484: LIST
71485: LIST
71486: LIST
71487: PUSH
71488: LD_VAR 0 1
71492: PUSH
71493: LD_VAR 0 2
71497: PUSH
71498: LD_INT 3
71500: PLUS
71501: PUSH
71502: LD_INT 0
71504: PUSH
71505: EMPTY
71506: LIST
71507: LIST
71508: LIST
71509: PUSH
71510: EMPTY
71511: LIST
71512: LIST
71513: LIST
71514: LIST
71515: LIST
71516: ST_TO_ADDR
// end ; end ;
71517: GO 71520
71519: POP
// result := list ;
71520: LD_ADDR_VAR 0 4
71524: PUSH
71525: LD_VAR 0 5
71529: ST_TO_ADDR
// end ;
71530: LD_VAR 0 4
71534: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
71535: LD_INT 0
71537: PPUSH
71538: PPUSH
71539: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
71540: LD_VAR 0 1
71544: NOT
71545: PUSH
71546: LD_VAR 0 2
71550: PUSH
71551: LD_INT 1
71553: PUSH
71554: LD_INT 2
71556: PUSH
71557: LD_INT 3
71559: PUSH
71560: LD_INT 4
71562: PUSH
71563: EMPTY
71564: LIST
71565: LIST
71566: LIST
71567: LIST
71568: IN
71569: NOT
71570: OR
71571: IFFALSE 71575
// exit ;
71573: GO 71667
// tmp := [ ] ;
71575: LD_ADDR_VAR 0 5
71579: PUSH
71580: EMPTY
71581: ST_TO_ADDR
// for i in units do
71582: LD_ADDR_VAR 0 4
71586: PUSH
71587: LD_VAR 0 1
71591: PUSH
71592: FOR_IN
71593: IFFALSE 71636
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
71595: LD_ADDR_VAR 0 5
71599: PUSH
71600: LD_VAR 0 5
71604: PPUSH
71605: LD_VAR 0 5
71609: PUSH
71610: LD_INT 1
71612: PLUS
71613: PPUSH
71614: LD_VAR 0 4
71618: PPUSH
71619: LD_VAR 0 2
71623: PPUSH
71624: CALL_OW 259
71628: PPUSH
71629: CALL_OW 2
71633: ST_TO_ADDR
71634: GO 71592
71636: POP
71637: POP
// if not tmp then
71638: LD_VAR 0 5
71642: NOT
71643: IFFALSE 71647
// exit ;
71645: GO 71667
// result := SortListByListDesc ( units , tmp ) ;
71647: LD_ADDR_VAR 0 3
71651: PUSH
71652: LD_VAR 0 1
71656: PPUSH
71657: LD_VAR 0 5
71661: PPUSH
71662: CALL_OW 77
71666: ST_TO_ADDR
// end ;
71667: LD_VAR 0 3
71671: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
71672: LD_INT 0
71674: PPUSH
71675: PPUSH
71676: PPUSH
// result := false ;
71677: LD_ADDR_VAR 0 3
71681: PUSH
71682: LD_INT 0
71684: ST_TO_ADDR
// x := GetX ( building ) ;
71685: LD_ADDR_VAR 0 4
71689: PUSH
71690: LD_VAR 0 2
71694: PPUSH
71695: CALL_OW 250
71699: ST_TO_ADDR
// y := GetY ( building ) ;
71700: LD_ADDR_VAR 0 5
71704: PUSH
71705: LD_VAR 0 2
71709: PPUSH
71710: CALL_OW 251
71714: ST_TO_ADDR
// if not building or not x or not y then
71715: LD_VAR 0 2
71719: NOT
71720: PUSH
71721: LD_VAR 0 4
71725: NOT
71726: OR
71727: PUSH
71728: LD_VAR 0 5
71732: NOT
71733: OR
71734: IFFALSE 71738
// exit ;
71736: GO 71830
// if GetTaskList ( unit ) then
71738: LD_VAR 0 1
71742: PPUSH
71743: CALL_OW 437
71747: IFFALSE 71830
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71749: LD_STRING e
71751: PUSH
71752: LD_VAR 0 1
71756: PPUSH
71757: CALL_OW 437
71761: PUSH
71762: LD_INT 1
71764: ARRAY
71765: PUSH
71766: LD_INT 1
71768: ARRAY
71769: EQUAL
71770: PUSH
71771: LD_VAR 0 4
71775: PUSH
71776: LD_VAR 0 1
71780: PPUSH
71781: CALL_OW 437
71785: PUSH
71786: LD_INT 1
71788: ARRAY
71789: PUSH
71790: LD_INT 2
71792: ARRAY
71793: EQUAL
71794: AND
71795: PUSH
71796: LD_VAR 0 5
71800: PUSH
71801: LD_VAR 0 1
71805: PPUSH
71806: CALL_OW 437
71810: PUSH
71811: LD_INT 1
71813: ARRAY
71814: PUSH
71815: LD_INT 3
71817: ARRAY
71818: EQUAL
71819: AND
71820: IFFALSE 71830
// result := true end ;
71822: LD_ADDR_VAR 0 3
71826: PUSH
71827: LD_INT 1
71829: ST_TO_ADDR
// end ;
71830: LD_VAR 0 3
71834: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
71835: LD_INT 0
71837: PPUSH
// result := false ;
71838: LD_ADDR_VAR 0 4
71842: PUSH
71843: LD_INT 0
71845: ST_TO_ADDR
// if GetTaskList ( unit ) then
71846: LD_VAR 0 1
71850: PPUSH
71851: CALL_OW 437
71855: IFFALSE 71938
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71857: LD_STRING M
71859: PUSH
71860: LD_VAR 0 1
71864: PPUSH
71865: CALL_OW 437
71869: PUSH
71870: LD_INT 1
71872: ARRAY
71873: PUSH
71874: LD_INT 1
71876: ARRAY
71877: EQUAL
71878: PUSH
71879: LD_VAR 0 2
71883: PUSH
71884: LD_VAR 0 1
71888: PPUSH
71889: CALL_OW 437
71893: PUSH
71894: LD_INT 1
71896: ARRAY
71897: PUSH
71898: LD_INT 2
71900: ARRAY
71901: EQUAL
71902: AND
71903: PUSH
71904: LD_VAR 0 3
71908: PUSH
71909: LD_VAR 0 1
71913: PPUSH
71914: CALL_OW 437
71918: PUSH
71919: LD_INT 1
71921: ARRAY
71922: PUSH
71923: LD_INT 3
71925: ARRAY
71926: EQUAL
71927: AND
71928: IFFALSE 71938
// result := true ;
71930: LD_ADDR_VAR 0 4
71934: PUSH
71935: LD_INT 1
71937: ST_TO_ADDR
// end ; end ;
71938: LD_VAR 0 4
71942: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
71943: LD_INT 0
71945: PPUSH
71946: PPUSH
71947: PPUSH
71948: PPUSH
// if not unit or not area then
71949: LD_VAR 0 1
71953: NOT
71954: PUSH
71955: LD_VAR 0 2
71959: NOT
71960: OR
71961: IFFALSE 71965
// exit ;
71963: GO 72129
// tmp := AreaToList ( area , i ) ;
71965: LD_ADDR_VAR 0 6
71969: PUSH
71970: LD_VAR 0 2
71974: PPUSH
71975: LD_VAR 0 5
71979: PPUSH
71980: CALL_OW 517
71984: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
71985: LD_ADDR_VAR 0 5
71989: PUSH
71990: DOUBLE
71991: LD_INT 1
71993: DEC
71994: ST_TO_ADDR
71995: LD_VAR 0 6
71999: PUSH
72000: LD_INT 1
72002: ARRAY
72003: PUSH
72004: FOR_TO
72005: IFFALSE 72127
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
72007: LD_ADDR_VAR 0 7
72011: PUSH
72012: LD_VAR 0 6
72016: PUSH
72017: LD_INT 1
72019: ARRAY
72020: PUSH
72021: LD_VAR 0 5
72025: ARRAY
72026: PUSH
72027: LD_VAR 0 6
72031: PUSH
72032: LD_INT 2
72034: ARRAY
72035: PUSH
72036: LD_VAR 0 5
72040: ARRAY
72041: PUSH
72042: EMPTY
72043: LIST
72044: LIST
72045: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
72046: LD_VAR 0 7
72050: PUSH
72051: LD_INT 1
72053: ARRAY
72054: PPUSH
72055: LD_VAR 0 7
72059: PUSH
72060: LD_INT 2
72062: ARRAY
72063: PPUSH
72064: CALL_OW 428
72068: PUSH
72069: LD_INT 0
72071: EQUAL
72072: IFFALSE 72125
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
72074: LD_VAR 0 1
72078: PPUSH
72079: LD_VAR 0 7
72083: PUSH
72084: LD_INT 1
72086: ARRAY
72087: PPUSH
72088: LD_VAR 0 7
72092: PUSH
72093: LD_INT 2
72095: ARRAY
72096: PPUSH
72097: LD_VAR 0 3
72101: PPUSH
72102: CALL_OW 48
// result := IsPlaced ( unit ) ;
72106: LD_ADDR_VAR 0 4
72110: PUSH
72111: LD_VAR 0 1
72115: PPUSH
72116: CALL_OW 305
72120: ST_TO_ADDR
// exit ;
72121: POP
72122: POP
72123: GO 72129
// end ; end ;
72125: GO 72004
72127: POP
72128: POP
// end ;
72129: LD_VAR 0 4
72133: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
72134: LD_INT 0
72136: PPUSH
72137: PPUSH
72138: PPUSH
// if not side or side > 8 then
72139: LD_VAR 0 1
72143: NOT
72144: PUSH
72145: LD_VAR 0 1
72149: PUSH
72150: LD_INT 8
72152: GREATER
72153: OR
72154: IFFALSE 72158
// exit ;
72156: GO 72345
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
72158: LD_ADDR_VAR 0 4
72162: PUSH
72163: LD_INT 22
72165: PUSH
72166: LD_VAR 0 1
72170: PUSH
72171: EMPTY
72172: LIST
72173: LIST
72174: PUSH
72175: LD_INT 21
72177: PUSH
72178: LD_INT 3
72180: PUSH
72181: EMPTY
72182: LIST
72183: LIST
72184: PUSH
72185: EMPTY
72186: LIST
72187: LIST
72188: PPUSH
72189: CALL_OW 69
72193: ST_TO_ADDR
// if not tmp then
72194: LD_VAR 0 4
72198: NOT
72199: IFFALSE 72203
// exit ;
72201: GO 72345
// enable_addtolog := true ;
72203: LD_ADDR_OWVAR 81
72207: PUSH
72208: LD_INT 1
72210: ST_TO_ADDR
// AddToLog ( [ ) ;
72211: LD_STRING [
72213: PPUSH
72214: CALL_OW 561
// for i in tmp do
72218: LD_ADDR_VAR 0 3
72222: PUSH
72223: LD_VAR 0 4
72227: PUSH
72228: FOR_IN
72229: IFFALSE 72336
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
72231: LD_STRING [
72233: PUSH
72234: LD_VAR 0 3
72238: PPUSH
72239: CALL_OW 266
72243: STR
72244: PUSH
72245: LD_STRING , 
72247: STR
72248: PUSH
72249: LD_VAR 0 3
72253: PPUSH
72254: CALL_OW 250
72258: STR
72259: PUSH
72260: LD_STRING , 
72262: STR
72263: PUSH
72264: LD_VAR 0 3
72268: PPUSH
72269: CALL_OW 251
72273: STR
72274: PUSH
72275: LD_STRING , 
72277: STR
72278: PUSH
72279: LD_VAR 0 3
72283: PPUSH
72284: CALL_OW 254
72288: STR
72289: PUSH
72290: LD_STRING , 
72292: STR
72293: PUSH
72294: LD_VAR 0 3
72298: PPUSH
72299: LD_INT 1
72301: PPUSH
72302: CALL_OW 268
72306: STR
72307: PUSH
72308: LD_STRING , 
72310: STR
72311: PUSH
72312: LD_VAR 0 3
72316: PPUSH
72317: LD_INT 2
72319: PPUSH
72320: CALL_OW 268
72324: STR
72325: PUSH
72326: LD_STRING ],
72328: STR
72329: PPUSH
72330: CALL_OW 561
// end ;
72334: GO 72228
72336: POP
72337: POP
// AddToLog ( ]; ) ;
72338: LD_STRING ];
72340: PPUSH
72341: CALL_OW 561
// end ;
72345: LD_VAR 0 2
72349: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
72350: LD_INT 0
72352: PPUSH
72353: PPUSH
72354: PPUSH
72355: PPUSH
72356: PPUSH
// if not area or not rate or not max then
72357: LD_VAR 0 1
72361: NOT
72362: PUSH
72363: LD_VAR 0 2
72367: NOT
72368: OR
72369: PUSH
72370: LD_VAR 0 4
72374: NOT
72375: OR
72376: IFFALSE 72380
// exit ;
72378: GO 72572
// while 1 do
72380: LD_INT 1
72382: IFFALSE 72572
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
72384: LD_ADDR_VAR 0 9
72388: PUSH
72389: LD_VAR 0 1
72393: PPUSH
72394: LD_INT 1
72396: PPUSH
72397: CALL_OW 287
72401: PUSH
72402: LD_INT 10
72404: MUL
72405: ST_TO_ADDR
// r := rate / 10 ;
72406: LD_ADDR_VAR 0 7
72410: PUSH
72411: LD_VAR 0 2
72415: PUSH
72416: LD_INT 10
72418: DIVREAL
72419: ST_TO_ADDR
// time := 1 1$00 ;
72420: LD_ADDR_VAR 0 8
72424: PUSH
72425: LD_INT 2100
72427: ST_TO_ADDR
// if amount < min then
72428: LD_VAR 0 9
72432: PUSH
72433: LD_VAR 0 3
72437: LESS
72438: IFFALSE 72456
// r := r * 2 else
72440: LD_ADDR_VAR 0 7
72444: PUSH
72445: LD_VAR 0 7
72449: PUSH
72450: LD_INT 2
72452: MUL
72453: ST_TO_ADDR
72454: GO 72482
// if amount > max then
72456: LD_VAR 0 9
72460: PUSH
72461: LD_VAR 0 4
72465: GREATER
72466: IFFALSE 72482
// r := r / 2 ;
72468: LD_ADDR_VAR 0 7
72472: PUSH
72473: LD_VAR 0 7
72477: PUSH
72478: LD_INT 2
72480: DIVREAL
72481: ST_TO_ADDR
// time := time / r ;
72482: LD_ADDR_VAR 0 8
72486: PUSH
72487: LD_VAR 0 8
72491: PUSH
72492: LD_VAR 0 7
72496: DIVREAL
72497: ST_TO_ADDR
// if time < 0 then
72498: LD_VAR 0 8
72502: PUSH
72503: LD_INT 0
72505: LESS
72506: IFFALSE 72523
// time := time * - 1 ;
72508: LD_ADDR_VAR 0 8
72512: PUSH
72513: LD_VAR 0 8
72517: PUSH
72518: LD_INT 1
72520: NEG
72521: MUL
72522: ST_TO_ADDR
// wait ( time ) ;
72523: LD_VAR 0 8
72527: PPUSH
72528: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
72532: LD_INT 35
72534: PPUSH
72535: LD_INT 875
72537: PPUSH
72538: CALL_OW 12
72542: PPUSH
72543: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
72547: LD_INT 1
72549: PPUSH
72550: LD_INT 5
72552: PPUSH
72553: CALL_OW 12
72557: PPUSH
72558: LD_VAR 0 1
72562: PPUSH
72563: LD_INT 1
72565: PPUSH
72566: CALL_OW 55
// end ;
72570: GO 72380
// end ;
72572: LD_VAR 0 5
72576: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
72577: LD_INT 0
72579: PPUSH
72580: PPUSH
72581: PPUSH
72582: PPUSH
72583: PPUSH
72584: PPUSH
72585: PPUSH
72586: PPUSH
// if not turrets or not factories then
72587: LD_VAR 0 1
72591: NOT
72592: PUSH
72593: LD_VAR 0 2
72597: NOT
72598: OR
72599: IFFALSE 72603
// exit ;
72601: GO 72910
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
72603: LD_ADDR_VAR 0 10
72607: PUSH
72608: LD_INT 5
72610: PUSH
72611: LD_INT 6
72613: PUSH
72614: EMPTY
72615: LIST
72616: LIST
72617: PUSH
72618: LD_INT 2
72620: PUSH
72621: LD_INT 4
72623: PUSH
72624: EMPTY
72625: LIST
72626: LIST
72627: PUSH
72628: LD_INT 3
72630: PUSH
72631: LD_INT 5
72633: PUSH
72634: EMPTY
72635: LIST
72636: LIST
72637: PUSH
72638: EMPTY
72639: LIST
72640: LIST
72641: LIST
72642: PUSH
72643: LD_INT 24
72645: PUSH
72646: LD_INT 25
72648: PUSH
72649: EMPTY
72650: LIST
72651: LIST
72652: PUSH
72653: LD_INT 23
72655: PUSH
72656: LD_INT 27
72658: PUSH
72659: EMPTY
72660: LIST
72661: LIST
72662: PUSH
72663: EMPTY
72664: LIST
72665: LIST
72666: PUSH
72667: LD_INT 42
72669: PUSH
72670: LD_INT 43
72672: PUSH
72673: EMPTY
72674: LIST
72675: LIST
72676: PUSH
72677: LD_INT 44
72679: PUSH
72680: LD_INT 46
72682: PUSH
72683: EMPTY
72684: LIST
72685: LIST
72686: PUSH
72687: LD_INT 45
72689: PUSH
72690: LD_INT 47
72692: PUSH
72693: EMPTY
72694: LIST
72695: LIST
72696: PUSH
72697: EMPTY
72698: LIST
72699: LIST
72700: LIST
72701: PUSH
72702: EMPTY
72703: LIST
72704: LIST
72705: LIST
72706: ST_TO_ADDR
// result := [ ] ;
72707: LD_ADDR_VAR 0 3
72711: PUSH
72712: EMPTY
72713: ST_TO_ADDR
// for i in turrets do
72714: LD_ADDR_VAR 0 4
72718: PUSH
72719: LD_VAR 0 1
72723: PUSH
72724: FOR_IN
72725: IFFALSE 72908
// begin nat := GetNation ( i ) ;
72727: LD_ADDR_VAR 0 7
72731: PUSH
72732: LD_VAR 0 4
72736: PPUSH
72737: CALL_OW 248
72741: ST_TO_ADDR
// weapon := 0 ;
72742: LD_ADDR_VAR 0 8
72746: PUSH
72747: LD_INT 0
72749: ST_TO_ADDR
// if not nat then
72750: LD_VAR 0 7
72754: NOT
72755: IFFALSE 72759
// continue ;
72757: GO 72724
// for j in list [ nat ] do
72759: LD_ADDR_VAR 0 5
72763: PUSH
72764: LD_VAR 0 10
72768: PUSH
72769: LD_VAR 0 7
72773: ARRAY
72774: PUSH
72775: FOR_IN
72776: IFFALSE 72817
// if GetBWeapon ( i ) = j [ 1 ] then
72778: LD_VAR 0 4
72782: PPUSH
72783: CALL_OW 269
72787: PUSH
72788: LD_VAR 0 5
72792: PUSH
72793: LD_INT 1
72795: ARRAY
72796: EQUAL
72797: IFFALSE 72815
// begin weapon := j [ 2 ] ;
72799: LD_ADDR_VAR 0 8
72803: PUSH
72804: LD_VAR 0 5
72808: PUSH
72809: LD_INT 2
72811: ARRAY
72812: ST_TO_ADDR
// break ;
72813: GO 72817
// end ;
72815: GO 72775
72817: POP
72818: POP
// if not weapon then
72819: LD_VAR 0 8
72823: NOT
72824: IFFALSE 72828
// continue ;
72826: GO 72724
// for k in factories do
72828: LD_ADDR_VAR 0 6
72832: PUSH
72833: LD_VAR 0 2
72837: PUSH
72838: FOR_IN
72839: IFFALSE 72904
// begin weapons := AvailableWeaponList ( k ) ;
72841: LD_ADDR_VAR 0 9
72845: PUSH
72846: LD_VAR 0 6
72850: PPUSH
72851: CALL_OW 478
72855: ST_TO_ADDR
// if not weapons then
72856: LD_VAR 0 9
72860: NOT
72861: IFFALSE 72865
// continue ;
72863: GO 72838
// if weapon in weapons then
72865: LD_VAR 0 8
72869: PUSH
72870: LD_VAR 0 9
72874: IN
72875: IFFALSE 72902
// begin result := [ i , weapon ] ;
72877: LD_ADDR_VAR 0 3
72881: PUSH
72882: LD_VAR 0 4
72886: PUSH
72887: LD_VAR 0 8
72891: PUSH
72892: EMPTY
72893: LIST
72894: LIST
72895: ST_TO_ADDR
// exit ;
72896: POP
72897: POP
72898: POP
72899: POP
72900: GO 72910
// end ; end ;
72902: GO 72838
72904: POP
72905: POP
// end ;
72906: GO 72724
72908: POP
72909: POP
// end ;
72910: LD_VAR 0 3
72914: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
72915: LD_INT 0
72917: PPUSH
// if not side or side > 8 then
72918: LD_VAR 0 3
72922: NOT
72923: PUSH
72924: LD_VAR 0 3
72928: PUSH
72929: LD_INT 8
72931: GREATER
72932: OR
72933: IFFALSE 72937
// exit ;
72935: GO 72996
// if not range then
72937: LD_VAR 0 4
72941: NOT
72942: IFFALSE 72953
// range := - 12 ;
72944: LD_ADDR_VAR 0 4
72948: PUSH
72949: LD_INT 12
72951: NEG
72952: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
72953: LD_VAR 0 1
72957: PPUSH
72958: LD_VAR 0 2
72962: PPUSH
72963: LD_VAR 0 3
72967: PPUSH
72968: LD_VAR 0 4
72972: PPUSH
72973: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
72977: LD_VAR 0 1
72981: PPUSH
72982: LD_VAR 0 2
72986: PPUSH
72987: LD_VAR 0 3
72991: PPUSH
72992: CALL_OW 331
// end ;
72996: LD_VAR 0 5
73000: RET
// export function Video ( mode ) ; begin
73001: LD_INT 0
73003: PPUSH
// ingame_video = mode ;
73004: LD_ADDR_OWVAR 52
73008: PUSH
73009: LD_VAR 0 1
73013: ST_TO_ADDR
// interface_hidden = mode ;
73014: LD_ADDR_OWVAR 54
73018: PUSH
73019: LD_VAR 0 1
73023: ST_TO_ADDR
// end ;
73024: LD_VAR 0 2
73028: RET
// export function Join ( array , element ) ; begin
73029: LD_INT 0
73031: PPUSH
// result := Replace ( array , array + 1 , element ) ;
73032: LD_ADDR_VAR 0 3
73036: PUSH
73037: LD_VAR 0 1
73041: PPUSH
73042: LD_VAR 0 1
73046: PUSH
73047: LD_INT 1
73049: PLUS
73050: PPUSH
73051: LD_VAR 0 2
73055: PPUSH
73056: CALL_OW 1
73060: ST_TO_ADDR
// end ;
73061: LD_VAR 0 3
73065: RET
// export function JoinUnion ( array , element ) ; begin
73066: LD_INT 0
73068: PPUSH
// result := array union element ;
73069: LD_ADDR_VAR 0 3
73073: PUSH
73074: LD_VAR 0 1
73078: PUSH
73079: LD_VAR 0 2
73083: UNION
73084: ST_TO_ADDR
// end ;
73085: LD_VAR 0 3
73089: RET
// export function GetBehemoths ( side ) ; begin
73090: LD_INT 0
73092: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
73093: LD_ADDR_VAR 0 2
73097: PUSH
73098: LD_INT 22
73100: PUSH
73101: LD_VAR 0 1
73105: PUSH
73106: EMPTY
73107: LIST
73108: LIST
73109: PUSH
73110: LD_INT 31
73112: PUSH
73113: LD_INT 25
73115: PUSH
73116: EMPTY
73117: LIST
73118: LIST
73119: PUSH
73120: EMPTY
73121: LIST
73122: LIST
73123: PPUSH
73124: CALL_OW 69
73128: ST_TO_ADDR
// end ;
73129: LD_VAR 0 2
73133: RET
// export function Shuffle ( array ) ; var i , index ; begin
73134: LD_INT 0
73136: PPUSH
73137: PPUSH
73138: PPUSH
// result := [ ] ;
73139: LD_ADDR_VAR 0 2
73143: PUSH
73144: EMPTY
73145: ST_TO_ADDR
// if not array then
73146: LD_VAR 0 1
73150: NOT
73151: IFFALSE 73155
// exit ;
73153: GO 73254
// Randomize ;
73155: CALL_OW 10
// for i = array downto 1 do
73159: LD_ADDR_VAR 0 3
73163: PUSH
73164: DOUBLE
73165: LD_VAR 0 1
73169: INC
73170: ST_TO_ADDR
73171: LD_INT 1
73173: PUSH
73174: FOR_DOWNTO
73175: IFFALSE 73252
// begin index := rand ( 1 , array ) ;
73177: LD_ADDR_VAR 0 4
73181: PUSH
73182: LD_INT 1
73184: PPUSH
73185: LD_VAR 0 1
73189: PPUSH
73190: CALL_OW 12
73194: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
73195: LD_ADDR_VAR 0 2
73199: PUSH
73200: LD_VAR 0 2
73204: PPUSH
73205: LD_VAR 0 2
73209: PUSH
73210: LD_INT 1
73212: PLUS
73213: PPUSH
73214: LD_VAR 0 1
73218: PUSH
73219: LD_VAR 0 4
73223: ARRAY
73224: PPUSH
73225: CALL_OW 2
73229: ST_TO_ADDR
// array := Delete ( array , index ) ;
73230: LD_ADDR_VAR 0 1
73234: PUSH
73235: LD_VAR 0 1
73239: PPUSH
73240: LD_VAR 0 4
73244: PPUSH
73245: CALL_OW 3
73249: ST_TO_ADDR
// end ;
73250: GO 73174
73252: POP
73253: POP
// end ;
73254: LD_VAR 0 2
73258: RET
// export function GetBaseMaterials ( base ) ; begin
73259: LD_INT 0
73261: PPUSH
// result := [ 0 , 0 , 0 ] ;
73262: LD_ADDR_VAR 0 2
73266: PUSH
73267: LD_INT 0
73269: PUSH
73270: LD_INT 0
73272: PUSH
73273: LD_INT 0
73275: PUSH
73276: EMPTY
73277: LIST
73278: LIST
73279: LIST
73280: ST_TO_ADDR
// if not base then
73281: LD_VAR 0 1
73285: NOT
73286: IFFALSE 73290
// exit ;
73288: GO 73339
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
73290: LD_ADDR_VAR 0 2
73294: PUSH
73295: LD_VAR 0 1
73299: PPUSH
73300: LD_INT 1
73302: PPUSH
73303: CALL_OW 275
73307: PUSH
73308: LD_VAR 0 1
73312: PPUSH
73313: LD_INT 2
73315: PPUSH
73316: CALL_OW 275
73320: PUSH
73321: LD_VAR 0 1
73325: PPUSH
73326: LD_INT 3
73328: PPUSH
73329: CALL_OW 275
73333: PUSH
73334: EMPTY
73335: LIST
73336: LIST
73337: LIST
73338: ST_TO_ADDR
// end ;
73339: LD_VAR 0 2
73343: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
73344: LD_INT 0
73346: PPUSH
73347: PPUSH
// result := array ;
73348: LD_ADDR_VAR 0 3
73352: PUSH
73353: LD_VAR 0 1
73357: ST_TO_ADDR
// if size > 0 then
73358: LD_VAR 0 2
73362: PUSH
73363: LD_INT 0
73365: GREATER
73366: IFFALSE 73412
// for i := array downto size do
73368: LD_ADDR_VAR 0 4
73372: PUSH
73373: DOUBLE
73374: LD_VAR 0 1
73378: INC
73379: ST_TO_ADDR
73380: LD_VAR 0 2
73384: PUSH
73385: FOR_DOWNTO
73386: IFFALSE 73410
// result := Delete ( result , result ) ;
73388: LD_ADDR_VAR 0 3
73392: PUSH
73393: LD_VAR 0 3
73397: PPUSH
73398: LD_VAR 0 3
73402: PPUSH
73403: CALL_OW 3
73407: ST_TO_ADDR
73408: GO 73385
73410: POP
73411: POP
// end ;
73412: LD_VAR 0 3
73416: RET
// export function ComExit ( unit ) ; var tmp ; begin
73417: LD_INT 0
73419: PPUSH
73420: PPUSH
// if not IsInUnit ( unit ) then
73421: LD_VAR 0 1
73425: PPUSH
73426: CALL_OW 310
73430: NOT
73431: IFFALSE 73435
// exit ;
73433: GO 73495
// tmp := IsInUnit ( unit ) ;
73435: LD_ADDR_VAR 0 3
73439: PUSH
73440: LD_VAR 0 1
73444: PPUSH
73445: CALL_OW 310
73449: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
73450: LD_VAR 0 3
73454: PPUSH
73455: CALL_OW 247
73459: PUSH
73460: LD_INT 2
73462: EQUAL
73463: IFFALSE 73476
// ComExitVehicle ( unit ) else
73465: LD_VAR 0 1
73469: PPUSH
73470: CALL_OW 121
73474: GO 73485
// ComExitBuilding ( unit ) ;
73476: LD_VAR 0 1
73480: PPUSH
73481: CALL_OW 122
// result := tmp ;
73485: LD_ADDR_VAR 0 2
73489: PUSH
73490: LD_VAR 0 3
73494: ST_TO_ADDR
// end ;
73495: LD_VAR 0 2
73499: RET
// export function ComExitAll ( units ) ; var i ; begin
73500: LD_INT 0
73502: PPUSH
73503: PPUSH
// if not units then
73504: LD_VAR 0 1
73508: NOT
73509: IFFALSE 73513
// exit ;
73511: GO 73539
// for i in units do
73513: LD_ADDR_VAR 0 3
73517: PUSH
73518: LD_VAR 0 1
73522: PUSH
73523: FOR_IN
73524: IFFALSE 73537
// ComExit ( i ) ;
73526: LD_VAR 0 3
73530: PPUSH
73531: CALL 73417 0 1
73535: GO 73523
73537: POP
73538: POP
// end ;
73539: LD_VAR 0 2
73543: RET
// export function ResetHc ; begin
73544: LD_INT 0
73546: PPUSH
// InitHc ;
73547: CALL_OW 19
// hc_importance := 0 ;
73551: LD_ADDR_OWVAR 32
73555: PUSH
73556: LD_INT 0
73558: ST_TO_ADDR
// end ;
73559: LD_VAR 0 1
73563: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
73564: LD_INT 0
73566: PPUSH
73567: PPUSH
73568: PPUSH
// _x := ( x1 + x2 ) div 2 ;
73569: LD_ADDR_VAR 0 6
73573: PUSH
73574: LD_VAR 0 1
73578: PUSH
73579: LD_VAR 0 3
73583: PLUS
73584: PUSH
73585: LD_INT 2
73587: DIV
73588: ST_TO_ADDR
// if _x < 0 then
73589: LD_VAR 0 6
73593: PUSH
73594: LD_INT 0
73596: LESS
73597: IFFALSE 73614
// _x := _x * - 1 ;
73599: LD_ADDR_VAR 0 6
73603: PUSH
73604: LD_VAR 0 6
73608: PUSH
73609: LD_INT 1
73611: NEG
73612: MUL
73613: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
73614: LD_ADDR_VAR 0 7
73618: PUSH
73619: LD_VAR 0 2
73623: PUSH
73624: LD_VAR 0 4
73628: PLUS
73629: PUSH
73630: LD_INT 2
73632: DIV
73633: ST_TO_ADDR
// if _y < 0 then
73634: LD_VAR 0 7
73638: PUSH
73639: LD_INT 0
73641: LESS
73642: IFFALSE 73659
// _y := _y * - 1 ;
73644: LD_ADDR_VAR 0 7
73648: PUSH
73649: LD_VAR 0 7
73653: PUSH
73654: LD_INT 1
73656: NEG
73657: MUL
73658: ST_TO_ADDR
// result := [ _x , _y ] ;
73659: LD_ADDR_VAR 0 5
73663: PUSH
73664: LD_VAR 0 6
73668: PUSH
73669: LD_VAR 0 7
73673: PUSH
73674: EMPTY
73675: LIST
73676: LIST
73677: ST_TO_ADDR
// end ;
73678: LD_VAR 0 5
73682: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
73683: LD_INT 0
73685: PPUSH
73686: PPUSH
73687: PPUSH
73688: PPUSH
// task := GetTaskList ( unit ) ;
73689: LD_ADDR_VAR 0 7
73693: PUSH
73694: LD_VAR 0 1
73698: PPUSH
73699: CALL_OW 437
73703: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
73704: LD_VAR 0 7
73708: NOT
73709: PUSH
73710: LD_VAR 0 1
73714: PPUSH
73715: LD_VAR 0 2
73719: PPUSH
73720: CALL_OW 308
73724: NOT
73725: AND
73726: IFFALSE 73730
// exit ;
73728: GO 73848
// if IsInArea ( unit , area ) then
73730: LD_VAR 0 1
73734: PPUSH
73735: LD_VAR 0 2
73739: PPUSH
73740: CALL_OW 308
73744: IFFALSE 73762
// begin ComMoveToArea ( unit , goAway ) ;
73746: LD_VAR 0 1
73750: PPUSH
73751: LD_VAR 0 3
73755: PPUSH
73756: CALL_OW 113
// exit ;
73760: GO 73848
// end ; if task [ 1 ] [ 1 ] <> M then
73762: LD_VAR 0 7
73766: PUSH
73767: LD_INT 1
73769: ARRAY
73770: PUSH
73771: LD_INT 1
73773: ARRAY
73774: PUSH
73775: LD_STRING M
73777: NONEQUAL
73778: IFFALSE 73782
// exit ;
73780: GO 73848
// x := task [ 1 ] [ 2 ] ;
73782: LD_ADDR_VAR 0 5
73786: PUSH
73787: LD_VAR 0 7
73791: PUSH
73792: LD_INT 1
73794: ARRAY
73795: PUSH
73796: LD_INT 2
73798: ARRAY
73799: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
73800: LD_ADDR_VAR 0 6
73804: PUSH
73805: LD_VAR 0 7
73809: PUSH
73810: LD_INT 1
73812: ARRAY
73813: PUSH
73814: LD_INT 3
73816: ARRAY
73817: ST_TO_ADDR
// if InArea ( x , y , area ) then
73818: LD_VAR 0 5
73822: PPUSH
73823: LD_VAR 0 6
73827: PPUSH
73828: LD_VAR 0 2
73832: PPUSH
73833: CALL_OW 309
73837: IFFALSE 73848
// ComStop ( unit ) ;
73839: LD_VAR 0 1
73843: PPUSH
73844: CALL_OW 141
// end ;
73848: LD_VAR 0 4
73852: RET
// export function Abs ( value ) ; begin
73853: LD_INT 0
73855: PPUSH
// result := value ;
73856: LD_ADDR_VAR 0 2
73860: PUSH
73861: LD_VAR 0 1
73865: ST_TO_ADDR
// if value < 0 then
73866: LD_VAR 0 1
73870: PUSH
73871: LD_INT 0
73873: LESS
73874: IFFALSE 73891
// result := value * - 1 ;
73876: LD_ADDR_VAR 0 2
73880: PUSH
73881: LD_VAR 0 1
73885: PUSH
73886: LD_INT 1
73888: NEG
73889: MUL
73890: ST_TO_ADDR
// end ;
73891: LD_VAR 0 2
73895: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
73896: LD_INT 0
73898: PPUSH
73899: PPUSH
73900: PPUSH
73901: PPUSH
73902: PPUSH
73903: PPUSH
73904: PPUSH
73905: PPUSH
// if not unit or not building then
73906: LD_VAR 0 1
73910: NOT
73911: PUSH
73912: LD_VAR 0 2
73916: NOT
73917: OR
73918: IFFALSE 73922
// exit ;
73920: GO 74148
// x := GetX ( building ) ;
73922: LD_ADDR_VAR 0 4
73926: PUSH
73927: LD_VAR 0 2
73931: PPUSH
73932: CALL_OW 250
73936: ST_TO_ADDR
// y := GetY ( building ) ;
73937: LD_ADDR_VAR 0 6
73941: PUSH
73942: LD_VAR 0 2
73946: PPUSH
73947: CALL_OW 251
73951: ST_TO_ADDR
// d := GetDir ( building ) ;
73952: LD_ADDR_VAR 0 8
73956: PUSH
73957: LD_VAR 0 2
73961: PPUSH
73962: CALL_OW 254
73966: ST_TO_ADDR
// r := 4 ;
73967: LD_ADDR_VAR 0 9
73971: PUSH
73972: LD_INT 4
73974: ST_TO_ADDR
// for i := 1 to 5 do
73975: LD_ADDR_VAR 0 10
73979: PUSH
73980: DOUBLE
73981: LD_INT 1
73983: DEC
73984: ST_TO_ADDR
73985: LD_INT 5
73987: PUSH
73988: FOR_TO
73989: IFFALSE 74146
// begin _x := ShiftX ( x , d , r + i ) ;
73991: LD_ADDR_VAR 0 5
73995: PUSH
73996: LD_VAR 0 4
74000: PPUSH
74001: LD_VAR 0 8
74005: PPUSH
74006: LD_VAR 0 9
74010: PUSH
74011: LD_VAR 0 10
74015: PLUS
74016: PPUSH
74017: CALL_OW 272
74021: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
74022: LD_ADDR_VAR 0 7
74026: PUSH
74027: LD_VAR 0 6
74031: PPUSH
74032: LD_VAR 0 8
74036: PPUSH
74037: LD_VAR 0 9
74041: PUSH
74042: LD_VAR 0 10
74046: PLUS
74047: PPUSH
74048: CALL_OW 273
74052: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
74053: LD_VAR 0 5
74057: PPUSH
74058: LD_VAR 0 7
74062: PPUSH
74063: CALL_OW 488
74067: PUSH
74068: LD_VAR 0 5
74072: PPUSH
74073: LD_VAR 0 7
74077: PPUSH
74078: CALL_OW 428
74082: PPUSH
74083: CALL_OW 247
74087: PUSH
74088: LD_INT 3
74090: PUSH
74091: LD_INT 2
74093: PUSH
74094: EMPTY
74095: LIST
74096: LIST
74097: IN
74098: NOT
74099: AND
74100: IFFALSE 74144
// begin ComMoveXY ( unit , _x , _y ) ;
74102: LD_VAR 0 1
74106: PPUSH
74107: LD_VAR 0 5
74111: PPUSH
74112: LD_VAR 0 7
74116: PPUSH
74117: CALL_OW 111
// result := [ _x , _y ] ;
74121: LD_ADDR_VAR 0 3
74125: PUSH
74126: LD_VAR 0 5
74130: PUSH
74131: LD_VAR 0 7
74135: PUSH
74136: EMPTY
74137: LIST
74138: LIST
74139: ST_TO_ADDR
// exit ;
74140: POP
74141: POP
74142: GO 74148
// end ; end ;
74144: GO 73988
74146: POP
74147: POP
// end ;
74148: LD_VAR 0 3
74152: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
74153: LD_INT 0
74155: PPUSH
74156: PPUSH
74157: PPUSH
// result := 0 ;
74158: LD_ADDR_VAR 0 3
74162: PUSH
74163: LD_INT 0
74165: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
74166: LD_VAR 0 1
74170: PUSH
74171: LD_INT 0
74173: LESS
74174: PUSH
74175: LD_VAR 0 1
74179: PUSH
74180: LD_INT 8
74182: GREATER
74183: OR
74184: PUSH
74185: LD_VAR 0 2
74189: PUSH
74190: LD_INT 0
74192: LESS
74193: OR
74194: PUSH
74195: LD_VAR 0 2
74199: PUSH
74200: LD_INT 8
74202: GREATER
74203: OR
74204: IFFALSE 74208
// exit ;
74206: GO 74283
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
74208: LD_ADDR_VAR 0 4
74212: PUSH
74213: LD_INT 22
74215: PUSH
74216: LD_VAR 0 2
74220: PUSH
74221: EMPTY
74222: LIST
74223: LIST
74224: PPUSH
74225: CALL_OW 69
74229: PUSH
74230: FOR_IN
74231: IFFALSE 74281
// begin un := UnitShoot ( i ) ;
74233: LD_ADDR_VAR 0 5
74237: PUSH
74238: LD_VAR 0 4
74242: PPUSH
74243: CALL_OW 504
74247: ST_TO_ADDR
// if GetSide ( un ) = side1 then
74248: LD_VAR 0 5
74252: PPUSH
74253: CALL_OW 255
74257: PUSH
74258: LD_VAR 0 1
74262: EQUAL
74263: IFFALSE 74279
// begin result := un ;
74265: LD_ADDR_VAR 0 3
74269: PUSH
74270: LD_VAR 0 5
74274: ST_TO_ADDR
// exit ;
74275: POP
74276: POP
74277: GO 74283
// end ; end ;
74279: GO 74230
74281: POP
74282: POP
// end ;
74283: LD_VAR 0 3
74287: RET
// export function GetCargoBay ( units ) ; begin
74288: LD_INT 0
74290: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
74291: LD_ADDR_VAR 0 2
74295: PUSH
74296: LD_VAR 0 1
74300: PPUSH
74301: LD_INT 2
74303: PUSH
74304: LD_INT 34
74306: PUSH
74307: LD_INT 12
74309: PUSH
74310: EMPTY
74311: LIST
74312: LIST
74313: PUSH
74314: LD_INT 34
74316: PUSH
74317: LD_INT 51
74319: PUSH
74320: EMPTY
74321: LIST
74322: LIST
74323: PUSH
74324: LD_INT 34
74326: PUSH
74327: LD_INT 32
74329: PUSH
74330: EMPTY
74331: LIST
74332: LIST
74333: PUSH
74334: LD_INT 34
74336: PUSH
74337: LD_EXP 60
74341: PUSH
74342: EMPTY
74343: LIST
74344: LIST
74345: PUSH
74346: EMPTY
74347: LIST
74348: LIST
74349: LIST
74350: LIST
74351: LIST
74352: PPUSH
74353: CALL_OW 72
74357: ST_TO_ADDR
// end ;
74358: LD_VAR 0 2
74362: RET
// export function Negate ( value ) ; begin
74363: LD_INT 0
74365: PPUSH
// result := not value ;
74366: LD_ADDR_VAR 0 2
74370: PUSH
74371: LD_VAR 0 1
74375: NOT
74376: ST_TO_ADDR
// end ;
74377: LD_VAR 0 2
74381: RET
// export function Inc ( value ) ; begin
74382: LD_INT 0
74384: PPUSH
// result := value + 1 ;
74385: LD_ADDR_VAR 0 2
74389: PUSH
74390: LD_VAR 0 1
74394: PUSH
74395: LD_INT 1
74397: PLUS
74398: ST_TO_ADDR
// end ;
74399: LD_VAR 0 2
74403: RET
// export function Dec ( value ) ; begin
74404: LD_INT 0
74406: PPUSH
// result := value - 1 ;
74407: LD_ADDR_VAR 0 2
74411: PUSH
74412: LD_VAR 0 1
74416: PUSH
74417: LD_INT 1
74419: MINUS
74420: ST_TO_ADDR
// end ;
74421: LD_VAR 0 2
74425: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
74426: LD_INT 0
74428: PPUSH
74429: PPUSH
74430: PPUSH
74431: PPUSH
74432: PPUSH
74433: PPUSH
74434: PPUSH
74435: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
74436: LD_VAR 0 1
74440: PPUSH
74441: LD_VAR 0 2
74445: PPUSH
74446: CALL_OW 488
74450: NOT
74451: PUSH
74452: LD_VAR 0 3
74456: PPUSH
74457: LD_VAR 0 4
74461: PPUSH
74462: CALL_OW 488
74466: NOT
74467: OR
74468: IFFALSE 74481
// begin result := - 1 ;
74470: LD_ADDR_VAR 0 5
74474: PUSH
74475: LD_INT 1
74477: NEG
74478: ST_TO_ADDR
// exit ;
74479: GO 74716
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
74481: LD_ADDR_VAR 0 12
74485: PUSH
74486: LD_VAR 0 1
74490: PPUSH
74491: LD_VAR 0 2
74495: PPUSH
74496: LD_VAR 0 3
74500: PPUSH
74501: LD_VAR 0 4
74505: PPUSH
74506: CALL 73564 0 4
74510: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
74511: LD_ADDR_VAR 0 11
74515: PUSH
74516: LD_VAR 0 1
74520: PPUSH
74521: LD_VAR 0 2
74525: PPUSH
74526: LD_VAR 0 12
74530: PUSH
74531: LD_INT 1
74533: ARRAY
74534: PPUSH
74535: LD_VAR 0 12
74539: PUSH
74540: LD_INT 2
74542: ARRAY
74543: PPUSH
74544: CALL_OW 298
74548: ST_TO_ADDR
// distance := 9999 ;
74549: LD_ADDR_VAR 0 10
74553: PUSH
74554: LD_INT 9999
74556: ST_TO_ADDR
// for i := 0 to 5 do
74557: LD_ADDR_VAR 0 6
74561: PUSH
74562: DOUBLE
74563: LD_INT 0
74565: DEC
74566: ST_TO_ADDR
74567: LD_INT 5
74569: PUSH
74570: FOR_TO
74571: IFFALSE 74714
// begin _x := ShiftX ( x1 , i , centerDist ) ;
74573: LD_ADDR_VAR 0 7
74577: PUSH
74578: LD_VAR 0 1
74582: PPUSH
74583: LD_VAR 0 6
74587: PPUSH
74588: LD_VAR 0 11
74592: PPUSH
74593: CALL_OW 272
74597: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
74598: LD_ADDR_VAR 0 8
74602: PUSH
74603: LD_VAR 0 2
74607: PPUSH
74608: LD_VAR 0 6
74612: PPUSH
74613: LD_VAR 0 11
74617: PPUSH
74618: CALL_OW 273
74622: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
74623: LD_VAR 0 7
74627: PPUSH
74628: LD_VAR 0 8
74632: PPUSH
74633: CALL_OW 488
74637: NOT
74638: IFFALSE 74642
// continue ;
74640: GO 74570
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
74642: LD_ADDR_VAR 0 9
74646: PUSH
74647: LD_VAR 0 12
74651: PUSH
74652: LD_INT 1
74654: ARRAY
74655: PPUSH
74656: LD_VAR 0 12
74660: PUSH
74661: LD_INT 2
74663: ARRAY
74664: PPUSH
74665: LD_VAR 0 7
74669: PPUSH
74670: LD_VAR 0 8
74674: PPUSH
74675: CALL_OW 298
74679: ST_TO_ADDR
// if tmp < distance then
74680: LD_VAR 0 9
74684: PUSH
74685: LD_VAR 0 10
74689: LESS
74690: IFFALSE 74712
// begin result := i ;
74692: LD_ADDR_VAR 0 5
74696: PUSH
74697: LD_VAR 0 6
74701: ST_TO_ADDR
// distance := tmp ;
74702: LD_ADDR_VAR 0 10
74706: PUSH
74707: LD_VAR 0 9
74711: ST_TO_ADDR
// end ; end ;
74712: GO 74570
74714: POP
74715: POP
// end ;
74716: LD_VAR 0 5
74720: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
74721: LD_INT 0
74723: PPUSH
74724: PPUSH
// if not driver or not IsInUnit ( driver ) then
74725: LD_VAR 0 1
74729: NOT
74730: PUSH
74731: LD_VAR 0 1
74735: PPUSH
74736: CALL_OW 310
74740: NOT
74741: OR
74742: IFFALSE 74746
// exit ;
74744: GO 74836
// vehicle := IsInUnit ( driver ) ;
74746: LD_ADDR_VAR 0 3
74750: PUSH
74751: LD_VAR 0 1
74755: PPUSH
74756: CALL_OW 310
74760: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
74761: LD_VAR 0 1
74765: PPUSH
74766: LD_STRING \
74768: PUSH
74769: LD_INT 0
74771: PUSH
74772: LD_INT 0
74774: PUSH
74775: LD_INT 0
74777: PUSH
74778: LD_INT 0
74780: PUSH
74781: LD_INT 0
74783: PUSH
74784: LD_INT 0
74786: PUSH
74787: EMPTY
74788: LIST
74789: LIST
74790: LIST
74791: LIST
74792: LIST
74793: LIST
74794: LIST
74795: PUSH
74796: LD_STRING E
74798: PUSH
74799: LD_INT 0
74801: PUSH
74802: LD_INT 0
74804: PUSH
74805: LD_VAR 0 3
74809: PUSH
74810: LD_INT 0
74812: PUSH
74813: LD_INT 0
74815: PUSH
74816: LD_INT 0
74818: PUSH
74819: EMPTY
74820: LIST
74821: LIST
74822: LIST
74823: LIST
74824: LIST
74825: LIST
74826: LIST
74827: PUSH
74828: EMPTY
74829: LIST
74830: LIST
74831: PPUSH
74832: CALL_OW 446
// end ;
74836: LD_VAR 0 2
74840: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
74841: LD_INT 0
74843: PPUSH
74844: PPUSH
// if not driver or not IsInUnit ( driver ) then
74845: LD_VAR 0 1
74849: NOT
74850: PUSH
74851: LD_VAR 0 1
74855: PPUSH
74856: CALL_OW 310
74860: NOT
74861: OR
74862: IFFALSE 74866
// exit ;
74864: GO 74956
// vehicle := IsInUnit ( driver ) ;
74866: LD_ADDR_VAR 0 3
74870: PUSH
74871: LD_VAR 0 1
74875: PPUSH
74876: CALL_OW 310
74880: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
74881: LD_VAR 0 1
74885: PPUSH
74886: LD_STRING \
74888: PUSH
74889: LD_INT 0
74891: PUSH
74892: LD_INT 0
74894: PUSH
74895: LD_INT 0
74897: PUSH
74898: LD_INT 0
74900: PUSH
74901: LD_INT 0
74903: PUSH
74904: LD_INT 0
74906: PUSH
74907: EMPTY
74908: LIST
74909: LIST
74910: LIST
74911: LIST
74912: LIST
74913: LIST
74914: LIST
74915: PUSH
74916: LD_STRING E
74918: PUSH
74919: LD_INT 0
74921: PUSH
74922: LD_INT 0
74924: PUSH
74925: LD_VAR 0 3
74929: PUSH
74930: LD_INT 0
74932: PUSH
74933: LD_INT 0
74935: PUSH
74936: LD_INT 0
74938: PUSH
74939: EMPTY
74940: LIST
74941: LIST
74942: LIST
74943: LIST
74944: LIST
74945: LIST
74946: LIST
74947: PUSH
74948: EMPTY
74949: LIST
74950: LIST
74951: PPUSH
74952: CALL_OW 447
// end ;
74956: LD_VAR 0 2
74960: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
74961: LD_INT 0
74963: PPUSH
74964: PPUSH
74965: PPUSH
// tmp := [ ] ;
74966: LD_ADDR_VAR 0 5
74970: PUSH
74971: EMPTY
74972: ST_TO_ADDR
// for i in units do
74973: LD_ADDR_VAR 0 4
74977: PUSH
74978: LD_VAR 0 1
74982: PUSH
74983: FOR_IN
74984: IFFALSE 75022
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
74986: LD_ADDR_VAR 0 5
74990: PUSH
74991: LD_VAR 0 5
74995: PPUSH
74996: LD_VAR 0 5
75000: PUSH
75001: LD_INT 1
75003: PLUS
75004: PPUSH
75005: LD_VAR 0 4
75009: PPUSH
75010: CALL_OW 256
75014: PPUSH
75015: CALL_OW 2
75019: ST_TO_ADDR
75020: GO 74983
75022: POP
75023: POP
// if not tmp then
75024: LD_VAR 0 5
75028: NOT
75029: IFFALSE 75033
// exit ;
75031: GO 75081
// if asc then
75033: LD_VAR 0 2
75037: IFFALSE 75061
// result := SortListByListAsc ( units , tmp ) else
75039: LD_ADDR_VAR 0 3
75043: PUSH
75044: LD_VAR 0 1
75048: PPUSH
75049: LD_VAR 0 5
75053: PPUSH
75054: CALL_OW 76
75058: ST_TO_ADDR
75059: GO 75081
// result := SortListByListDesc ( units , tmp ) ;
75061: LD_ADDR_VAR 0 3
75065: PUSH
75066: LD_VAR 0 1
75070: PPUSH
75071: LD_VAR 0 5
75075: PPUSH
75076: CALL_OW 77
75080: ST_TO_ADDR
// end ;
75081: LD_VAR 0 3
75085: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
75086: LD_INT 0
75088: PPUSH
75089: PPUSH
// task := GetTaskList ( mech ) ;
75090: LD_ADDR_VAR 0 4
75094: PUSH
75095: LD_VAR 0 1
75099: PPUSH
75100: CALL_OW 437
75104: ST_TO_ADDR
// if not task then
75105: LD_VAR 0 4
75109: NOT
75110: IFFALSE 75114
// exit ;
75112: GO 75156
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
75114: LD_ADDR_VAR 0 3
75118: PUSH
75119: LD_VAR 0 4
75123: PUSH
75124: LD_INT 1
75126: ARRAY
75127: PUSH
75128: LD_INT 1
75130: ARRAY
75131: PUSH
75132: LD_STRING r
75134: EQUAL
75135: PUSH
75136: LD_VAR 0 4
75140: PUSH
75141: LD_INT 1
75143: ARRAY
75144: PUSH
75145: LD_INT 4
75147: ARRAY
75148: PUSH
75149: LD_VAR 0 2
75153: EQUAL
75154: AND
75155: ST_TO_ADDR
// end ;
75156: LD_VAR 0 3
75160: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
75161: LD_INT 0
75163: PPUSH
// SetDir ( unit , d ) ;
75164: LD_VAR 0 1
75168: PPUSH
75169: LD_VAR 0 4
75173: PPUSH
75174: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
75178: LD_VAR 0 1
75182: PPUSH
75183: LD_VAR 0 2
75187: PPUSH
75188: LD_VAR 0 3
75192: PPUSH
75193: LD_VAR 0 5
75197: PPUSH
75198: CALL_OW 48
// end ;
75202: LD_VAR 0 6
75206: RET
// export function ToNaturalNumber ( number ) ; begin
75207: LD_INT 0
75209: PPUSH
// result := number div 1 ;
75210: LD_ADDR_VAR 0 2
75214: PUSH
75215: LD_VAR 0 1
75219: PUSH
75220: LD_INT 1
75222: DIV
75223: ST_TO_ADDR
// if number < 0 then
75224: LD_VAR 0 1
75228: PUSH
75229: LD_INT 0
75231: LESS
75232: IFFALSE 75242
// result := 0 ;
75234: LD_ADDR_VAR 0 2
75238: PUSH
75239: LD_INT 0
75241: ST_TO_ADDR
// end ;
75242: LD_VAR 0 2
75246: RET
// export function SortByClass ( units , class ) ; var un ; begin
75247: LD_INT 0
75249: PPUSH
75250: PPUSH
// if not units or not class then
75251: LD_VAR 0 1
75255: NOT
75256: PUSH
75257: LD_VAR 0 2
75261: NOT
75262: OR
75263: IFFALSE 75267
// exit ;
75265: GO 75362
// result := [ ] ;
75267: LD_ADDR_VAR 0 3
75271: PUSH
75272: EMPTY
75273: ST_TO_ADDR
// for un in units do
75274: LD_ADDR_VAR 0 4
75278: PUSH
75279: LD_VAR 0 1
75283: PUSH
75284: FOR_IN
75285: IFFALSE 75360
// if GetClass ( un ) = class then
75287: LD_VAR 0 4
75291: PPUSH
75292: CALL_OW 257
75296: PUSH
75297: LD_VAR 0 2
75301: EQUAL
75302: IFFALSE 75329
// result := Insert ( result , 1 , un ) else
75304: LD_ADDR_VAR 0 3
75308: PUSH
75309: LD_VAR 0 3
75313: PPUSH
75314: LD_INT 1
75316: PPUSH
75317: LD_VAR 0 4
75321: PPUSH
75322: CALL_OW 2
75326: ST_TO_ADDR
75327: GO 75358
// result := Replace ( result , result + 1 , un ) ;
75329: LD_ADDR_VAR 0 3
75333: PUSH
75334: LD_VAR 0 3
75338: PPUSH
75339: LD_VAR 0 3
75343: PUSH
75344: LD_INT 1
75346: PLUS
75347: PPUSH
75348: LD_VAR 0 4
75352: PPUSH
75353: CALL_OW 1
75357: ST_TO_ADDR
75358: GO 75284
75360: POP
75361: POP
// end ;
75362: LD_VAR 0 3
75366: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
75367: LD_INT 0
75369: PPUSH
75370: PPUSH
75371: PPUSH
75372: PPUSH
75373: PPUSH
75374: PPUSH
75375: PPUSH
// result := [ ] ;
75376: LD_ADDR_VAR 0 4
75380: PUSH
75381: EMPTY
75382: ST_TO_ADDR
// if x - r < 0 then
75383: LD_VAR 0 1
75387: PUSH
75388: LD_VAR 0 3
75392: MINUS
75393: PUSH
75394: LD_INT 0
75396: LESS
75397: IFFALSE 75409
// min_x := 0 else
75399: LD_ADDR_VAR 0 8
75403: PUSH
75404: LD_INT 0
75406: ST_TO_ADDR
75407: GO 75425
// min_x := x - r ;
75409: LD_ADDR_VAR 0 8
75413: PUSH
75414: LD_VAR 0 1
75418: PUSH
75419: LD_VAR 0 3
75423: MINUS
75424: ST_TO_ADDR
// if y - r < 0 then
75425: LD_VAR 0 2
75429: PUSH
75430: LD_VAR 0 3
75434: MINUS
75435: PUSH
75436: LD_INT 0
75438: LESS
75439: IFFALSE 75451
// min_y := 0 else
75441: LD_ADDR_VAR 0 7
75445: PUSH
75446: LD_INT 0
75448: ST_TO_ADDR
75449: GO 75467
// min_y := y - r ;
75451: LD_ADDR_VAR 0 7
75455: PUSH
75456: LD_VAR 0 2
75460: PUSH
75461: LD_VAR 0 3
75465: MINUS
75466: ST_TO_ADDR
// max_x := x + r ;
75467: LD_ADDR_VAR 0 9
75471: PUSH
75472: LD_VAR 0 1
75476: PUSH
75477: LD_VAR 0 3
75481: PLUS
75482: ST_TO_ADDR
// max_y := y + r ;
75483: LD_ADDR_VAR 0 10
75487: PUSH
75488: LD_VAR 0 2
75492: PUSH
75493: LD_VAR 0 3
75497: PLUS
75498: ST_TO_ADDR
// for _x = min_x to max_x do
75499: LD_ADDR_VAR 0 5
75503: PUSH
75504: DOUBLE
75505: LD_VAR 0 8
75509: DEC
75510: ST_TO_ADDR
75511: LD_VAR 0 9
75515: PUSH
75516: FOR_TO
75517: IFFALSE 75618
// for _y = min_y to max_y do
75519: LD_ADDR_VAR 0 6
75523: PUSH
75524: DOUBLE
75525: LD_VAR 0 7
75529: DEC
75530: ST_TO_ADDR
75531: LD_VAR 0 10
75535: PUSH
75536: FOR_TO
75537: IFFALSE 75614
// begin if not ValidHex ( _x , _y ) then
75539: LD_VAR 0 5
75543: PPUSH
75544: LD_VAR 0 6
75548: PPUSH
75549: CALL_OW 488
75553: NOT
75554: IFFALSE 75558
// continue ;
75556: GO 75536
// if GetResourceTypeXY ( _x , _y ) then
75558: LD_VAR 0 5
75562: PPUSH
75563: LD_VAR 0 6
75567: PPUSH
75568: CALL_OW 283
75572: IFFALSE 75612
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
75574: LD_ADDR_VAR 0 4
75578: PUSH
75579: LD_VAR 0 4
75583: PPUSH
75584: LD_VAR 0 4
75588: PUSH
75589: LD_INT 1
75591: PLUS
75592: PPUSH
75593: LD_VAR 0 5
75597: PUSH
75598: LD_VAR 0 6
75602: PUSH
75603: EMPTY
75604: LIST
75605: LIST
75606: PPUSH
75607: CALL_OW 1
75611: ST_TO_ADDR
// end ;
75612: GO 75536
75614: POP
75615: POP
75616: GO 75516
75618: POP
75619: POP
// end ;
75620: LD_VAR 0 4
75624: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
75625: LD_INT 0
75627: PPUSH
75628: PPUSH
75629: PPUSH
75630: PPUSH
75631: PPUSH
75632: PPUSH
75633: PPUSH
75634: PPUSH
// if not units then
75635: LD_VAR 0 1
75639: NOT
75640: IFFALSE 75644
// exit ;
75642: GO 76069
// result := UnitFilter ( units , [ f_ok ] ) ;
75644: LD_ADDR_VAR 0 3
75648: PUSH
75649: LD_VAR 0 1
75653: PPUSH
75654: LD_INT 50
75656: PUSH
75657: EMPTY
75658: LIST
75659: PPUSH
75660: CALL_OW 72
75664: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
75665: LD_ADDR_VAR 0 8
75669: PUSH
75670: LD_VAR 0 1
75674: PUSH
75675: LD_INT 1
75677: ARRAY
75678: PPUSH
75679: CALL_OW 255
75683: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
75684: LD_ADDR_VAR 0 10
75688: PUSH
75689: LD_INT 29
75691: PUSH
75692: LD_EXP 63
75696: PUSH
75697: EMPTY
75698: LIST
75699: LIST
75700: ST_TO_ADDR
// if not result then
75701: LD_VAR 0 3
75705: NOT
75706: IFFALSE 75710
// exit ;
75708: GO 76069
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
75710: LD_ADDR_VAR 0 5
75714: PUSH
75715: LD_INT 81
75717: PUSH
75718: LD_VAR 0 8
75722: PUSH
75723: EMPTY
75724: LIST
75725: LIST
75726: PPUSH
75727: CALL_OW 69
75731: ST_TO_ADDR
// for i in result do
75732: LD_ADDR_VAR 0 4
75736: PUSH
75737: LD_VAR 0 3
75741: PUSH
75742: FOR_IN
75743: IFFALSE 76067
// begin tag := GetTag ( i ) + 1 ;
75745: LD_ADDR_VAR 0 9
75749: PUSH
75750: LD_VAR 0 4
75754: PPUSH
75755: CALL_OW 110
75759: PUSH
75760: LD_INT 1
75762: PLUS
75763: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
75764: LD_ADDR_VAR 0 7
75768: PUSH
75769: LD_VAR 0 4
75773: PPUSH
75774: CALL_OW 250
75778: PPUSH
75779: LD_VAR 0 4
75783: PPUSH
75784: CALL_OW 251
75788: PPUSH
75789: LD_INT 6
75791: PPUSH
75792: CALL 75367 0 3
75796: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
75797: LD_VAR 0 7
75801: PUSH
75802: LD_VAR 0 4
75806: PPUSH
75807: CALL_OW 264
75811: PUSH
75812: LD_VAR 0 10
75816: IN
75817: NOT
75818: AND
75819: IFFALSE 75858
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
75821: LD_VAR 0 4
75825: PPUSH
75826: LD_VAR 0 7
75830: PUSH
75831: LD_INT 1
75833: ARRAY
75834: PUSH
75835: LD_INT 1
75837: ARRAY
75838: PPUSH
75839: LD_VAR 0 7
75843: PUSH
75844: LD_INT 1
75846: ARRAY
75847: PUSH
75848: LD_INT 2
75850: ARRAY
75851: PPUSH
75852: CALL_OW 116
75856: GO 76065
// if path > tag then
75858: LD_VAR 0 2
75862: PUSH
75863: LD_VAR 0 9
75867: GREATER
75868: IFFALSE 76035
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
75870: LD_ADDR_VAR 0 6
75874: PUSH
75875: LD_VAR 0 5
75879: PPUSH
75880: LD_INT 91
75882: PUSH
75883: LD_VAR 0 4
75887: PUSH
75888: LD_INT 12
75890: PUSH
75891: EMPTY
75892: LIST
75893: LIST
75894: LIST
75895: PPUSH
75896: CALL_OW 72
75900: ST_TO_ADDR
// if nearEnemy then
75901: LD_VAR 0 6
75905: IFFALSE 75933
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
75907: LD_VAR 0 4
75911: PPUSH
75912: LD_VAR 0 6
75916: PPUSH
75917: LD_VAR 0 4
75921: PPUSH
75922: CALL_OW 74
75926: PPUSH
75927: CALL_OW 115
75931: GO 76033
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
75933: LD_VAR 0 4
75937: PPUSH
75938: LD_VAR 0 2
75942: PUSH
75943: LD_VAR 0 9
75947: ARRAY
75948: PUSH
75949: LD_INT 1
75951: ARRAY
75952: PPUSH
75953: LD_VAR 0 2
75957: PUSH
75958: LD_VAR 0 9
75962: ARRAY
75963: PUSH
75964: LD_INT 2
75966: ARRAY
75967: PPUSH
75968: CALL_OW 297
75972: PUSH
75973: LD_INT 6
75975: GREATER
75976: IFFALSE 76019
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
75978: LD_VAR 0 4
75982: PPUSH
75983: LD_VAR 0 2
75987: PUSH
75988: LD_VAR 0 9
75992: ARRAY
75993: PUSH
75994: LD_INT 1
75996: ARRAY
75997: PPUSH
75998: LD_VAR 0 2
76002: PUSH
76003: LD_VAR 0 9
76007: ARRAY
76008: PUSH
76009: LD_INT 2
76011: ARRAY
76012: PPUSH
76013: CALL_OW 114
76017: GO 76033
// SetTag ( i , tag ) ;
76019: LD_VAR 0 4
76023: PPUSH
76024: LD_VAR 0 9
76028: PPUSH
76029: CALL_OW 109
// end else
76033: GO 76065
// if enemy then
76035: LD_VAR 0 5
76039: IFFALSE 76065
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
76041: LD_VAR 0 4
76045: PPUSH
76046: LD_VAR 0 5
76050: PPUSH
76051: LD_VAR 0 4
76055: PPUSH
76056: CALL_OW 74
76060: PPUSH
76061: CALL_OW 115
// end ;
76065: GO 75742
76067: POP
76068: POP
// end ;
76069: LD_VAR 0 3
76073: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
76074: LD_INT 0
76076: PPUSH
76077: PPUSH
76078: PPUSH
// if not unit or IsInUnit ( unit ) then
76079: LD_VAR 0 1
76083: NOT
76084: PUSH
76085: LD_VAR 0 1
76089: PPUSH
76090: CALL_OW 310
76094: OR
76095: IFFALSE 76099
// exit ;
76097: GO 76190
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
76099: LD_ADDR_VAR 0 4
76103: PUSH
76104: LD_VAR 0 1
76108: PPUSH
76109: CALL_OW 250
76113: PPUSH
76114: LD_VAR 0 2
76118: PPUSH
76119: LD_INT 1
76121: PPUSH
76122: CALL_OW 272
76126: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
76127: LD_ADDR_VAR 0 5
76131: PUSH
76132: LD_VAR 0 1
76136: PPUSH
76137: CALL_OW 251
76141: PPUSH
76142: LD_VAR 0 2
76146: PPUSH
76147: LD_INT 1
76149: PPUSH
76150: CALL_OW 273
76154: ST_TO_ADDR
// if ValidHex ( x , y ) then
76155: LD_VAR 0 4
76159: PPUSH
76160: LD_VAR 0 5
76164: PPUSH
76165: CALL_OW 488
76169: IFFALSE 76190
// ComTurnXY ( unit , x , y ) ;
76171: LD_VAR 0 1
76175: PPUSH
76176: LD_VAR 0 4
76180: PPUSH
76181: LD_VAR 0 5
76185: PPUSH
76186: CALL_OW 118
// end ;
76190: LD_VAR 0 3
76194: RET
// export function SeeUnits ( side , units ) ; var i ; begin
76195: LD_INT 0
76197: PPUSH
76198: PPUSH
// result := false ;
76199: LD_ADDR_VAR 0 3
76203: PUSH
76204: LD_INT 0
76206: ST_TO_ADDR
// if not units then
76207: LD_VAR 0 2
76211: NOT
76212: IFFALSE 76216
// exit ;
76214: GO 76261
// for i in units do
76216: LD_ADDR_VAR 0 4
76220: PUSH
76221: LD_VAR 0 2
76225: PUSH
76226: FOR_IN
76227: IFFALSE 76259
// if See ( side , i ) then
76229: LD_VAR 0 1
76233: PPUSH
76234: LD_VAR 0 4
76238: PPUSH
76239: CALL_OW 292
76243: IFFALSE 76257
// begin result := true ;
76245: LD_ADDR_VAR 0 3
76249: PUSH
76250: LD_INT 1
76252: ST_TO_ADDR
// exit ;
76253: POP
76254: POP
76255: GO 76261
// end ;
76257: GO 76226
76259: POP
76260: POP
// end ;
76261: LD_VAR 0 3
76265: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
76266: LD_INT 0
76268: PPUSH
76269: PPUSH
76270: PPUSH
76271: PPUSH
// if not unit or not points then
76272: LD_VAR 0 1
76276: NOT
76277: PUSH
76278: LD_VAR 0 2
76282: NOT
76283: OR
76284: IFFALSE 76288
// exit ;
76286: GO 76378
// dist := 99999 ;
76288: LD_ADDR_VAR 0 5
76292: PUSH
76293: LD_INT 99999
76295: ST_TO_ADDR
// for i in points do
76296: LD_ADDR_VAR 0 4
76300: PUSH
76301: LD_VAR 0 2
76305: PUSH
76306: FOR_IN
76307: IFFALSE 76376
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
76309: LD_ADDR_VAR 0 6
76313: PUSH
76314: LD_VAR 0 1
76318: PPUSH
76319: LD_VAR 0 4
76323: PUSH
76324: LD_INT 1
76326: ARRAY
76327: PPUSH
76328: LD_VAR 0 4
76332: PUSH
76333: LD_INT 2
76335: ARRAY
76336: PPUSH
76337: CALL_OW 297
76341: ST_TO_ADDR
// if tmpDist < dist then
76342: LD_VAR 0 6
76346: PUSH
76347: LD_VAR 0 5
76351: LESS
76352: IFFALSE 76374
// begin result := i ;
76354: LD_ADDR_VAR 0 3
76358: PUSH
76359: LD_VAR 0 4
76363: ST_TO_ADDR
// dist := tmpDist ;
76364: LD_ADDR_VAR 0 5
76368: PUSH
76369: LD_VAR 0 6
76373: ST_TO_ADDR
// end ; end ;
76374: GO 76306
76376: POP
76377: POP
// end ; end_of_file
76378: LD_VAR 0 3
76382: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
76383: LD_VAR 0 1
76387: PUSH
76388: LD_INT 200
76390: DOUBLE
76391: GREATEREQUAL
76392: IFFALSE 76400
76394: LD_INT 299
76396: DOUBLE
76397: LESSEQUAL
76398: IFTRUE 76402
76400: GO 76434
76402: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
76403: LD_VAR 0 1
76407: PPUSH
76408: LD_VAR 0 2
76412: PPUSH
76413: LD_VAR 0 3
76417: PPUSH
76418: LD_VAR 0 4
76422: PPUSH
76423: LD_VAR 0 5
76427: PPUSH
76428: CALL 32409 0 5
76432: GO 76511
76434: LD_INT 300
76436: DOUBLE
76437: GREATEREQUAL
76438: IFFALSE 76446
76440: LD_INT 399
76442: DOUBLE
76443: LESSEQUAL
76444: IFTRUE 76448
76446: GO 76510
76448: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
76449: LD_VAR 0 1
76453: PPUSH
76454: LD_VAR 0 2
76458: PPUSH
76459: LD_VAR 0 3
76463: PPUSH
76464: LD_VAR 0 4
76468: PPUSH
76469: LD_VAR 0 5
76473: PPUSH
76474: LD_VAR 0 6
76478: PPUSH
76479: LD_VAR 0 7
76483: PPUSH
76484: LD_VAR 0 8
76488: PPUSH
76489: LD_VAR 0 9
76493: PPUSH
76494: LD_VAR 0 10
76498: PPUSH
76499: LD_VAR 0 11
76503: PPUSH
76504: CALL 30307 0 11
76508: GO 76511
76510: POP
// end ;
76511: PPOPN 11
76513: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
76514: LD_VAR 0 1
76518: PPUSH
76519: LD_VAR 0 2
76523: PPUSH
76524: LD_VAR 0 3
76528: PPUSH
76529: LD_VAR 0 4
76533: PPUSH
76534: LD_VAR 0 5
76538: PPUSH
76539: CALL 32401 0 5
// end ; end_of_file
76543: PPOPN 5
76545: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
76546: LD_VAR 0 1
76550: PPUSH
76551: LD_VAR 0 2
76555: PPUSH
76556: LD_VAR 0 3
76560: PPUSH
76561: LD_VAR 0 4
76565: PPUSH
76566: LD_VAR 0 5
76570: PPUSH
76571: LD_VAR 0 6
76575: PPUSH
76576: CALL 18502 0 6
// end ;
76580: PPOPN 6
76582: END
