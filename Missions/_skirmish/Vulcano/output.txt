// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// InitGlobalVariables ;
  15: CALL 19651 0 0
// PrepareTrigger ;
  19: CALL 44 0 0
// PrepareVulcanoBase ;
  23: CALL 1106 0 0
// PrepareRussian ;
  27: CALL 3788 0 0
// PrepareLegion ;
  31: CALL 8071 0 0
// Action ;
  35: CALL 11581 0 0
// InitArt ;
  39: CALL 245 0 0
// end ;
  43: END
// export base_captured , russian_prepared , ru_can_attack , ru_sib_bomb , chance_to_bomb , player_res_art , artifact_progress , player_artifact_ready , art_icon , time_res_art , player_commander , time_to_reuse , mine_vulc , medal_enabled , debug , dead_counter , kill_counter , veh_counter , tech_counter , sib_contamin_counter , event_legion_attack , event_russian_attack , event_alliance_attack ; function PrepareTrigger ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 15
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// base_captured := false ;
  55: LD_ADDR_EXP 1
  59: PUSH
  60: LD_INT 0
  62: ST_TO_ADDR
// russian_prepared := false ;
  63: LD_ADDR_EXP 2
  67: PUSH
  68: LD_INT 0
  70: ST_TO_ADDR
// ru_can_attack := false ;
  71: LD_ADDR_EXP 3
  75: PUSH
  76: LD_INT 0
  78: ST_TO_ADDR
// ru_sib_bomb := false ;
  79: LD_ADDR_EXP 4
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// chance_to_bomb := [ 5 , 10 , 25 ] [ Difficulty ] ;
  87: LD_ADDR_EXP 5
  91: PUSH
  92: LD_INT 5
  94: PUSH
  95: LD_INT 10
  97: PUSH
  98: LD_INT 25
 100: PUSH
 101: EMPTY
 102: LIST
 103: LIST
 104: LIST
 105: PUSH
 106: LD_OWVAR 67
 110: ARRAY
 111: ST_TO_ADDR
// player_res_art := false ;
 112: LD_ADDR_EXP 6
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// player_artifact_ready := false ;
 120: LD_ADDR_EXP 8
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// art_icon := art_use_atom ;
 128: LD_ADDR_EXP 9
 132: PUSH
 133: LD_INT 7
 135: ST_TO_ADDR
// time_res_art := 600 ;
 136: LD_ADDR_EXP 10
 140: PUSH
 141: LD_INT 600
 143: ST_TO_ADDR
// time_to_reuse := 10 10$00 ;
 144: LD_ADDR_EXP 12
 148: PUSH
 149: LD_INT 21000
 151: ST_TO_ADDR
// mine_vulc := false ;
 152: LD_ADDR_EXP 13
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// medal_enabled := false ;
 160: LD_ADDR_EXP 14
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// dead_counter := 0 ;
 168: LD_ADDR_EXP 16
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// kill_counter := 0 ;
 176: LD_ADDR_EXP 17
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// veh_counter := 0 ;
 184: LD_ADDR_EXP 18
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// tech_counter := 0 ;
 192: LD_ADDR_EXP 19
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// sib_contamin_counter := 0 ;
 200: LD_ADDR_EXP 20
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// artifact_progress := 0 ;
 208: LD_ADDR_EXP 7
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// event_legion_attack := 1 ;
 216: LD_ADDR_EXP 21
 220: PUSH
 221: LD_INT 1
 223: ST_TO_ADDR
// event_russian_attack := 2 ;
 224: LD_ADDR_EXP 22
 228: PUSH
 229: LD_INT 2
 231: ST_TO_ADDR
// event_alliance_attack := 3 ;
 232: LD_ADDR_EXP 23
 236: PUSH
 237: LD_INT 3
 239: ST_TO_ADDR
// end ;
 240: LD_VAR 0 1
 244: RET
// function InitArt ; begin
 245: LD_INT 0
 247: PPUSH
// SetArtifactRes ( your_side , true ) ;
 248: LD_OWVAR 2
 252: PPUSH
 253: LD_INT 1
 255: PPUSH
 256: CALL_OW 467
// end ; end_of_file
 260: LD_VAR 0 1
 264: RET
// export us_commander , us_force , us_skill , us_guy ; export function PrepareAmerican ; var i , filter , un , team ; begin
 265: LD_INT 0
 267: PPUSH
 268: PPUSH
 269: PPUSH
 270: PPUSH
 271: PPUSH
// us_skill := [ 7 , 6 , 5 ] [ Difficulty ] ;
 272: LD_ADDR_EXP 26
 276: PUSH
 277: LD_INT 7
 279: PUSH
 280: LD_INT 6
 282: PUSH
 283: LD_INT 5
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: LIST
 290: PUSH
 291: LD_OWVAR 67
 295: ARRAY
 296: ST_TO_ADDR
// us_force := [ ] ;
 297: LD_ADDR_EXP 25
 301: PUSH
 302: EMPTY
 303: ST_TO_ADDR
// RemoveEnvironmentArea ( evn ) ;
 304: LD_INT 17
 306: PPUSH
 307: CALL_OW 355
// PrepareAllianceAI ( ) ;
 311: CALL 16952 0 0
// uc_side := 1 ;
 315: LD_ADDR_OWVAR 20
 319: PUSH
 320: LD_INT 1
 322: ST_TO_ADDR
// uc_nation := nation_american ;
 323: LD_ADDR_OWVAR 21
 327: PUSH
 328: LD_INT 1
 330: ST_TO_ADDR
// hc_gallery :=  ;
 331: LD_ADDR_OWVAR 33
 335: PUSH
 336: LD_STRING 
 338: ST_TO_ADDR
// hc_name :=  ;
 339: LD_ADDR_OWVAR 26
 343: PUSH
 344: LD_STRING 
 346: ST_TO_ADDR
// hc_importance := 0 ;
 347: LD_ADDR_OWVAR 32
 351: PUSH
 352: LD_INT 0
 354: ST_TO_ADDR
// for i = 1 to 11 do
 355: LD_ADDR_VAR 0 2
 359: PUSH
 360: DOUBLE
 361: LD_INT 1
 363: DEC
 364: ST_TO_ADDR
 365: LD_INT 11
 367: PUSH
 368: FOR_TO
 369: IFFALSE 422
// begin PrepareHuman ( false , Rand ( 1 , 4 ) , us_skill ) ;
 371: LD_INT 0
 373: PPUSH
 374: LD_INT 1
 376: PPUSH
 377: LD_INT 4
 379: PPUSH
 380: CALL_OW 12
 384: PPUSH
 385: LD_EXP 26
 389: PPUSH
 390: CALL_OW 380
// un := CreateHuman ;
 394: LD_ADDR_VAR 0 4
 398: PUSH
 399: CALL_OW 44
 403: ST_TO_ADDR
// us_force := us_force ^ un ;
 404: LD_ADDR_EXP 25
 408: PUSH
 409: LD_EXP 25
 413: PUSH
 414: LD_VAR 0 4
 418: ADD
 419: ST_TO_ADDR
// end ;
 420: GO 368
 422: POP
 423: POP
// hc_importance := 100 ;
 424: LD_ADDR_OWVAR 32
 428: PUSH
 429: LD_INT 100
 431: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , us_skill ) ;
 432: LD_INT 1
 434: PPUSH
 435: LD_INT 1
 437: PPUSH
 438: LD_EXP 26
 442: PPUSH
 443: CALL_OW 380
// us_commander := CreateHuman ;
 447: LD_ADDR_EXP 24
 451: PUSH
 452: CALL_OW 44
 456: ST_TO_ADDR
// player_commander := us_commander ;
 457: LD_ADDR_EXP 11
 461: PUSH
 462: LD_EXP 24
 466: ST_TO_ADDR
// team := CharacterSelection ( text , [ 7 , 6 , 5 ] [ Difficulty ] , [ 7 , 6 , 5 ] [ Difficulty ] , [ sel_change_class , us_commander , sel_changeable , sel_not_hired ] ^ us_force , [ class_soldier , [ class_mechanic , 1 ] , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , [ 5 , 5 , - 1 ] [ Difficulty ] ] ) ;
 467: LD_ADDR_VAR 0 5
 471: PUSH
 472: LD_STRING text
 474: PPUSH
 475: LD_INT 7
 477: PUSH
 478: LD_INT 6
 480: PUSH
 481: LD_INT 5
 483: PUSH
 484: EMPTY
 485: LIST
 486: LIST
 487: LIST
 488: PUSH
 489: LD_OWVAR 67
 493: ARRAY
 494: PPUSH
 495: LD_INT 7
 497: PUSH
 498: LD_INT 6
 500: PUSH
 501: LD_INT 5
 503: PUSH
 504: EMPTY
 505: LIST
 506: LIST
 507: LIST
 508: PUSH
 509: LD_OWVAR 67
 513: ARRAY
 514: PPUSH
 515: LD_INT -5
 517: PUSH
 518: LD_EXP 24
 522: PUSH
 523: LD_INT -3
 525: PUSH
 526: LD_INT -2
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: LIST
 533: LIST
 534: PUSH
 535: LD_EXP 25
 539: ADD
 540: PPUSH
 541: LD_INT 1
 543: PUSH
 544: LD_INT 3
 546: PUSH
 547: LD_INT 1
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: PUSH
 554: LD_INT 2
 556: PUSH
 557: LD_INT 1
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: PUSH
 564: LD_INT 4
 566: PUSH
 567: LD_INT 1
 569: PUSH
 570: EMPTY
 571: LIST
 572: LIST
 573: PUSH
 574: LD_INT 5
 576: PUSH
 577: LD_INT 5
 579: PUSH
 580: LD_INT 1
 582: NEG
 583: PUSH
 584: EMPTY
 585: LIST
 586: LIST
 587: LIST
 588: PUSH
 589: LD_OWVAR 67
 593: ARRAY
 594: PUSH
 595: EMPTY
 596: LIST
 597: LIST
 598: LIST
 599: LIST
 600: LIST
 601: PPUSH
 602: CALL_OW 42
 606: ST_TO_ADDR
// team := team ^ us_commander ;
 607: LD_ADDR_VAR 0 5
 611: PUSH
 612: LD_VAR 0 5
 616: PUSH
 617: LD_EXP 24
 621: ADD
 622: ST_TO_ADDR
// for i = 1 to team do
 623: LD_ADDR_VAR 0 2
 627: PUSH
 628: DOUBLE
 629: LD_INT 1
 631: DEC
 632: ST_TO_ADDR
 633: LD_VAR 0 5
 637: PUSH
 638: FOR_TO
 639: IFFALSE 839
// begin if GetClass ( team [ i ] ) = class_mechanic then
 641: LD_VAR 0 5
 645: PUSH
 646: LD_VAR 0 2
 650: ARRAY
 651: PPUSH
 652: CALL_OW 257
 656: PUSH
 657: LD_INT 3
 659: EQUAL
 660: IFFALSE 801
// begin vc_chassis := [ us_medium_tracked , us_heavy_tracked , us_morphling ] [ i mod 3 + 1 ] ;
 662: LD_ADDR_OWVAR 37
 666: PUSH
 667: LD_INT 3
 669: PUSH
 670: LD_INT 4
 672: PUSH
 673: LD_INT 5
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: LIST
 680: PUSH
 681: LD_VAR 0 2
 685: PUSH
 686: LD_INT 3
 688: MOD
 689: PUSH
 690: LD_INT 1
 692: PLUS
 693: ARRAY
 694: ST_TO_ADDR
// vc_engine := engine_siberite ;
 695: LD_ADDR_OWVAR 39
 699: PUSH
 700: LD_INT 3
 702: ST_TO_ADDR
// vc_control := control_manual ;
 703: LD_ADDR_OWVAR 38
 707: PUSH
 708: LD_INT 1
 710: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_laser ] [ rand ( 1 , 3 ) ] ;
 711: LD_ADDR_OWVAR 40
 715: PUSH
 716: LD_INT 4
 718: PUSH
 719: LD_INT 5
 721: PUSH
 722: LD_INT 9
 724: PUSH
 725: EMPTY
 726: LIST
 727: LIST
 728: LIST
 729: PUSH
 730: LD_INT 1
 732: PPUSH
 733: LD_INT 3
 735: PPUSH
 736: CALL_OW 12
 740: ARRAY
 741: ST_TO_ADDR
// un := CreateVehicle ;
 742: LD_ADDR_VAR 0 4
 746: PUSH
 747: CALL_OW 45
 751: ST_TO_ADDR
// SetDir ( un , 2 ) ;
 752: LD_VAR 0 4
 756: PPUSH
 757: LD_INT 2
 759: PPUSH
 760: CALL_OW 233
// PlaceUnitArea ( un , start_north , false ) ;
 764: LD_VAR 0 4
 768: PPUSH
 769: LD_INT 1
 771: PPUSH
 772: LD_INT 0
 774: PPUSH
 775: CALL_OW 49
// PlaceHumanInUnit ( team [ i ] , un ) ;
 779: LD_VAR 0 5
 783: PUSH
 784: LD_VAR 0 2
 788: ARRAY
 789: PPUSH
 790: LD_VAR 0 4
 794: PPUSH
 795: CALL_OW 52
// end else
 799: GO 837
// begin PlaceUnitArea ( team [ i ] , start_north , false ) ;
 801: LD_VAR 0 5
 805: PUSH
 806: LD_VAR 0 2
 810: ARRAY
 811: PPUSH
 812: LD_INT 1
 814: PPUSH
 815: LD_INT 0
 817: PPUSH
 818: CALL_OW 49
// ComHold ( team [ i ] ) ;
 822: LD_VAR 0 5
 826: PUSH
 827: LD_VAR 0 2
 831: ARRAY
 832: PPUSH
 833: CALL_OW 140
// end ; end ;
 837: GO 638
 839: POP
 840: POP
// end ;
 841: LD_VAR 0 1
 845: RET
// every 0 0$38 + 2 2$30 trigger tick < 73500 do
 846: LD_OWVAR 1
 850: PUSH
 851: LD_INT 73500
 853: LESS
 854: IFFALSE 881
 856: GO 858
 858: DISABLE
// begin enable ;
 859: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , extra_crates , true ) ;
 860: LD_INT 1
 862: PPUSH
 863: LD_INT 5
 865: PPUSH
 866: CALL_OW 12
 870: PPUSH
 871: LD_INT 23
 873: PPUSH
 874: LD_INT 1
 876: PPUSH
 877: CALL_OW 55
// end ;
 881: END
// every 1 1$10 do var time , p , l ;
 882: GO 884
 884: DISABLE
 885: LD_INT 0
 887: PPUSH
 888: PPUSH
 889: PPUSH
// begin time := 0 0$44 ;
 890: LD_ADDR_VAR 0 1
 894: PUSH
 895: LD_INT 1540
 897: ST_TO_ADDR
// l := 0 ;
 898: LD_ADDR_VAR 0 3
 902: PUSH
 903: LD_INT 0
 905: ST_TO_ADDR
// repeat begin Wait ( time ) ;
 906: LD_VAR 0 1
 910: PPUSH
 911: CALL_OW 67
// l := l + 1 ;
 915: LD_ADDR_VAR 0 3
 919: PUSH
 920: LD_VAR 0 3
 924: PUSH
 925: LD_INT 1
 927: PLUS
 928: ST_TO_ADDR
// if GetListOfCratesInArea ( us_crates ) < 20 then
 929: LD_INT 12
 931: PPUSH
 932: CALL_OW 435
 936: PUSH
 937: LD_INT 20
 939: LESS
 940: IFFALSE 999
// begin CreateCratesArea ( Rand ( 1 , 5 ) , us_crates , true ) ;
 942: LD_INT 1
 944: PPUSH
 945: LD_INT 5
 947: PPUSH
 948: CALL_OW 12
 952: PPUSH
 953: LD_INT 12
 955: PPUSH
 956: LD_INT 1
 958: PPUSH
 959: CALL_OW 55
// Wait ( Rand ( 0 0$39 , 0 0$48 ) ) ;
 963: LD_INT 1365
 965: PPUSH
 966: LD_INT 1680
 968: PPUSH
 969: CALL_OW 12
 973: PPUSH
 974: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 5 ) , us_crates , true ) ;
 978: LD_INT 1
 980: PPUSH
 981: LD_INT 5
 983: PPUSH
 984: CALL_OW 12
 988: PPUSH
 989: LD_INT 12
 991: PPUSH
 992: LD_INT 1
 994: PPUSH
 995: CALL_OW 55
// end ; p := Rand ( 0 , 1 ) ;
 999: LD_ADDR_VAR 0 2
1003: PUSH
1004: LD_INT 0
1006: PPUSH
1007: LD_INT 1
1009: PPUSH
1010: CALL_OW 12
1014: ST_TO_ADDR
// if p then
1015: LD_VAR 0 2
1019: IFFALSE 1054
// begin Wait ( Rand ( 0 0$09 , 0 0$20 ) ) ;
1021: LD_INT 315
1023: PPUSH
1024: LD_INT 700
1026: PPUSH
1027: CALL_OW 12
1031: PPUSH
1032: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 4 ) , true ) ;
1036: LD_INT 1
1038: PPUSH
1039: LD_INT 4
1041: PPUSH
1042: CALL_OW 12
1046: PPUSH
1047: LD_INT 1
1049: PPUSH
1050: CALL_OW 57
// end ; if l mod [ 15 , 13 , 11 ] [ Difficulty ] = 0 then
1054: LD_VAR 0 3
1058: PUSH
1059: LD_INT 15
1061: PUSH
1062: LD_INT 13
1064: PUSH
1065: LD_INT 11
1067: PUSH
1068: EMPTY
1069: LIST
1070: LIST
1071: LIST
1072: PUSH
1073: LD_OWVAR 67
1077: ARRAY
1078: MOD
1079: PUSH
1080: LD_INT 0
1082: EQUAL
1083: IFFALSE 1099
// time := time + 2 2$00 ;
1085: LD_ADDR_VAR 0 1
1089: PUSH
1090: LD_VAR 0 1
1094: PUSH
1095: LD_INT 4200
1097: PLUS
1098: ST_TO_ADDR
// end until false ;
1099: LD_INT 0
1101: IFFALSE 906
// end ; end_of_file
1103: PPOPN 3
1105: END
// export russians_in_base ; export function PrepareVulcanoBase ; var i , filter , hp , un , area ; begin
1106: LD_INT 0
1108: PPUSH
1109: PPUSH
1110: PPUSH
1111: PPUSH
1112: PPUSH
1113: PPUSH
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) ;
1114: LD_ADDR_VAR 0 3
1118: PUSH
1119: LD_INT 22
1121: PUSH
1122: LD_INT 4
1124: PUSH
1125: EMPTY
1126: LIST
1127: LIST
1128: PUSH
1129: LD_INT 21
1131: PUSH
1132: LD_INT 3
1134: PUSH
1135: EMPTY
1136: LIST
1137: LIST
1138: PUSH
1139: EMPTY
1140: LIST
1141: LIST
1142: PPUSH
1143: CALL_OW 69
1147: ST_TO_ADDR
// hp := [ 470 , 370 , 290 ] [ Difficulty ] ;
1148: LD_ADDR_VAR 0 4
1152: PUSH
1153: LD_INT 470
1155: PUSH
1156: LD_INT 370
1158: PUSH
1159: LD_INT 290
1161: PUSH
1162: EMPTY
1163: LIST
1164: LIST
1165: LIST
1166: PUSH
1167: LD_OWVAR 67
1171: ARRAY
1172: ST_TO_ADDR
// case Difficulty of 2 :
1173: LD_OWVAR 67
1177: PUSH
1178: LD_INT 2
1180: DOUBLE
1181: EQUAL
1182: IFTRUE 1186
1184: GO 1217
1186: POP
// begin DestroyUnit ( UnitFilter ( filter , [ f_btype , b_bunker ] ) [ 1 ] ) ;
1187: LD_VAR 0 3
1191: PPUSH
1192: LD_INT 30
1194: PUSH
1195: LD_INT 32
1197: PUSH
1198: EMPTY
1199: LIST
1200: LIST
1201: PPUSH
1202: CALL_OW 72
1206: PUSH
1207: LD_INT 1
1209: ARRAY
1210: PPUSH
1211: CALL_OW 65
// end ; 3 :
1215: GO 1293
1217: LD_INT 3
1219: DOUBLE
1220: EQUAL
1221: IFTRUE 1225
1223: GO 1292
1225: POP
// begin DestroyUnit ( UnitFilter ( filter , [ f_btype , b_bunker ] ) [ 1 ] ) ;
1226: LD_VAR 0 3
1230: PPUSH
1231: LD_INT 30
1233: PUSH
1234: LD_INT 32
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: PPUSH
1241: CALL_OW 72
1245: PUSH
1246: LD_INT 1
1248: ARRAY
1249: PPUSH
1250: CALL_OW 65
// DestroyUnit ( UnitFilter ( filter , [ f_btype , b_solar_power ] ) [ Rand ( 1 , 3 ) ] ) ;
1254: LD_VAR 0 3
1258: PPUSH
1259: LD_INT 30
1261: PUSH
1262: LD_INT 27
1264: PUSH
1265: EMPTY
1266: LIST
1267: LIST
1268: PPUSH
1269: CALL_OW 72
1273: PUSH
1274: LD_INT 1
1276: PPUSH
1277: LD_INT 3
1279: PPUSH
1280: CALL_OW 12
1284: ARRAY
1285: PPUSH
1286: CALL_OW 65
// end ; end ;
1290: GO 1293
1292: POP
// for i = 1 to filter do
1293: LD_ADDR_VAR 0 2
1297: PUSH
1298: DOUBLE
1299: LD_INT 1
1301: DEC
1302: ST_TO_ADDR
1303: LD_VAR 0 3
1307: PUSH
1308: FOR_TO
1309: IFFALSE 1346
// SetLives ( filter [ i ] , hp + Rand ( - 29 , 29 ) ) ;
1311: LD_VAR 0 3
1315: PUSH
1316: LD_VAR 0 2
1320: ARRAY
1321: PPUSH
1322: LD_VAR 0 4
1326: PUSH
1327: LD_INT 29
1329: NEG
1330: PPUSH
1331: LD_INT 29
1333: PPUSH
1334: CALL_OW 12
1338: PLUS
1339: PPUSH
1340: CALL_OW 234
1344: GO 1308
1346: POP
1347: POP
// SetBName ( us_depot , Vulcano1 ) ;
1348: LD_INT 50
1350: PPUSH
1351: LD_STRING Vulcano1
1353: PPUSH
1354: CALL_OW 500
// hc_importance := 0 ;
1358: LD_ADDR_OWVAR 32
1362: PUSH
1363: LD_INT 0
1365: ST_TO_ADDR
// uc_side := 3 ;
1366: LD_ADDR_OWVAR 20
1370: PUSH
1371: LD_INT 3
1373: ST_TO_ADDR
// uc_nation := nation_russian ;
1374: LD_ADDR_OWVAR 21
1378: PUSH
1379: LD_INT 3
1381: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
1382: LD_ADDR_OWVAR 37
1386: PUSH
1387: LD_INT 22
1389: ST_TO_ADDR
// vc_engine := engine_combustion ;
1390: LD_ADDR_OWVAR 39
1394: PUSH
1395: LD_INT 1
1397: ST_TO_ADDR
// vc_control := control_manual ;
1398: LD_ADDR_OWVAR 38
1402: PUSH
1403: LD_INT 1
1405: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1406: LD_ADDR_OWVAR 40
1410: PUSH
1411: LD_INT 51
1413: ST_TO_ADDR
// un := CreateVehicle ;
1414: LD_ADDR_VAR 0 5
1418: PUSH
1419: CALL_OW 45
1423: ST_TO_ADDR
// PlaceUnitXY ( un , 97 , 138 , false ) ;
1424: LD_VAR 0 5
1428: PPUSH
1429: LD_INT 97
1431: PPUSH
1432: LD_INT 138
1434: PPUSH
1435: LD_INT 0
1437: PPUSH
1438: CALL_OW 48
// SetCargo ( un , mat_cans , 100 ) ;
1442: LD_VAR 0 5
1446: PPUSH
1447: LD_INT 1
1449: PPUSH
1450: LD_INT 100
1452: PPUSH
1453: CALL_OW 290
// SetFuel ( un , 45 ) ;
1457: LD_VAR 0 5
1461: PPUSH
1462: LD_INT 45
1464: PPUSH
1465: CALL_OW 240
// un := CreateVehicle ;
1469: LD_ADDR_VAR 0 5
1473: PUSH
1474: CALL_OW 45
1478: ST_TO_ADDR
// PlaceUnitXY ( un , 109 , 154 , false ) ;
1479: LD_VAR 0 5
1483: PPUSH
1484: LD_INT 109
1486: PPUSH
1487: LD_INT 154
1489: PPUSH
1490: LD_INT 0
1492: PPUSH
1493: CALL_OW 48
// SetCargo ( un , mat_cans , 100 ) ;
1497: LD_VAR 0 5
1501: PPUSH
1502: LD_INT 1
1504: PPUSH
1505: LD_INT 100
1507: PPUSH
1508: CALL_OW 290
// SetDir ( un , 1 ) ;
1512: LD_VAR 0 5
1516: PPUSH
1517: LD_INT 1
1519: PPUSH
1520: CALL_OW 233
// SetFuel ( un , 50 ) ;
1524: LD_VAR 0 5
1528: PPUSH
1529: LD_INT 50
1531: PPUSH
1532: CALL_OW 240
// russians_in_base := [ ] ;
1536: LD_ADDR_EXP 28
1540: PUSH
1541: EMPTY
1542: ST_TO_ADDR
// for i = 1 to [ 6 , 6 , 7 ] [ Difficulty ] do
1543: LD_ADDR_VAR 0 2
1547: PUSH
1548: DOUBLE
1549: LD_INT 1
1551: DEC
1552: ST_TO_ADDR
1553: LD_INT 6
1555: PUSH
1556: LD_INT 6
1558: PUSH
1559: LD_INT 7
1561: PUSH
1562: EMPTY
1563: LIST
1564: LIST
1565: LIST
1566: PUSH
1567: LD_OWVAR 67
1571: ARRAY
1572: PUSH
1573: FOR_TO
1574: IFFALSE 1655
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
1576: LD_INT 0
1578: PPUSH
1579: LD_INT 1
1581: PPUSH
1582: LD_INT 4
1584: PUSH
1585: LD_INT 5
1587: PUSH
1588: LD_INT 6
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: LIST
1595: PUSH
1596: LD_OWVAR 67
1600: ARRAY
1601: PPUSH
1602: CALL_OW 380
// un := CreateHuman ;
1606: LD_ADDR_VAR 0 5
1610: PUSH
1611: CALL_OW 44
1615: ST_TO_ADDR
// russians_in_base := russians_in_base ^ un ;
1616: LD_ADDR_EXP 28
1620: PUSH
1621: LD_EXP 28
1625: PUSH
1626: LD_VAR 0 5
1630: ADD
1631: ST_TO_ADDR
// PlaceUnitXYR ( un , 94 , 145 , 10 , false ) ;
1632: LD_VAR 0 5
1636: PPUSH
1637: LD_INT 94
1639: PPUSH
1640: LD_INT 145
1642: PPUSH
1643: LD_INT 10
1645: PPUSH
1646: LD_INT 0
1648: PPUSH
1649: CALL_OW 50
// end ;
1653: GO 1573
1655: POP
1656: POP
// end ;
1657: LD_VAR 0 1
1661: RET
// every 0 0$2 trigger UnitFilter ( russians_in_base , [ f_see , 1 ] ) do var enemy ;
1662: LD_EXP 28
1666: PPUSH
1667: LD_INT 101
1669: PUSH
1670: LD_INT 1
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: PPUSH
1677: CALL_OW 72
1681: IFFALSE 1747
1683: GO 1685
1685: DISABLE
1686: LD_INT 0
1688: PPUSH
// begin enemy := UnitFilter ( russians_in_base , [ f_see , 1 ] ) [ 1 ] ;
1689: LD_ADDR_VAR 0 1
1693: PUSH
1694: LD_EXP 28
1698: PPUSH
1699: LD_INT 101
1701: PUSH
1702: LD_INT 1
1704: PUSH
1705: EMPTY
1706: LIST
1707: LIST
1708: PPUSH
1709: CALL_OW 72
1713: PUSH
1714: LD_INT 1
1716: ARRAY
1717: ST_TO_ADDR
// ComAgressiveMove ( russians_in_base , GetX ( enemy ) , GetY ( enemy ) ) ;
1718: LD_EXP 28
1722: PPUSH
1723: LD_VAR 0 1
1727: PPUSH
1728: CALL_OW 250
1732: PPUSH
1733: LD_VAR 0 1
1737: PPUSH
1738: CALL_OW 251
1742: PPUSH
1743: CALL_OW 114
// end ;
1747: PPOPN 1
1749: END
// every 0 0$01 trigger GetDistUnitToSide ( us_depot , 1 ) < 40 do var i , un ;
1750: LD_INT 50
1752: PPUSH
1753: LD_INT 1
1755: PPUSH
1756: CALL 2126 0 2
1760: PUSH
1761: LD_INT 40
1763: LESS
1764: IFFALSE 1961
1766: GO 1768
1768: DISABLE
1769: LD_INT 0
1771: PPUSH
1772: PPUSH
// begin uc_side := 4 ;
1773: LD_ADDR_OWVAR 20
1777: PUSH
1778: LD_INT 4
1780: ST_TO_ADDR
// uc_nation := nation_american ;
1781: LD_ADDR_OWVAR 21
1785: PUSH
1786: LD_INT 1
1788: ST_TO_ADDR
// hc_importance := 0 ;
1789: LD_ADDR_OWVAR 32
1793: PUSH
1794: LD_INT 0
1796: ST_TO_ADDR
// for i = 1 to 7 do
1797: LD_ADDR_VAR 0 1
1801: PUSH
1802: DOUBLE
1803: LD_INT 1
1805: DEC
1806: ST_TO_ADDR
1807: LD_INT 7
1809: PUSH
1810: FOR_TO
1811: IFFALSE 1875
// begin PrepareHuman ( false , Rand ( 1 , 3 ) , us_skill ) ;
1813: LD_INT 0
1815: PPUSH
1816: LD_INT 1
1818: PPUSH
1819: LD_INT 3
1821: PPUSH
1822: CALL_OW 12
1826: PPUSH
1827: LD_EXP 26
1831: PPUSH
1832: CALL_OW 380
// un := CreateHuman ;
1836: LD_ADDR_VAR 0 2
1840: PUSH
1841: CALL_OW 44
1845: ST_TO_ADDR
// PlaceUnitArea ( un , base_resp , false ) ;
1846: LD_VAR 0 2
1850: PPUSH
1851: LD_INT 7
1853: PPUSH
1854: LD_INT 0
1856: PPUSH
1857: CALL_OW 49
// SetLives ( un , 10 ) ;
1861: LD_VAR 0 2
1865: PPUSH
1866: LD_INT 10
1868: PPUSH
1869: CALL_OW 234
// end ;
1873: GO 1810
1875: POP
1876: POP
// for i = 1 to 5 do
1877: LD_ADDR_VAR 0 1
1881: PUSH
1882: DOUBLE
1883: LD_INT 1
1885: DEC
1886: ST_TO_ADDR
1887: LD_INT 5
1889: PUSH
1890: FOR_TO
1891: IFFALSE 1959
// begin PrepareHuman ( false , 4 , us_skill ) ;
1893: LD_INT 0
1895: PPUSH
1896: LD_INT 4
1898: PPUSH
1899: LD_EXP 26
1903: PPUSH
1904: CALL_OW 380
// SetDir ( un , 1 ) ;
1908: LD_VAR 0 2
1912: PPUSH
1913: LD_INT 1
1915: PPUSH
1916: CALL_OW 233
// un := CreateHuman ;
1920: LD_ADDR_VAR 0 2
1924: PUSH
1925: CALL_OW 44
1929: ST_TO_ADDR
// PlaceUnitArea ( un , rekt , false ) ;
1930: LD_VAR 0 2
1934: PPUSH
1935: LD_INT 22
1937: PPUSH
1938: LD_INT 0
1940: PPUSH
1941: CALL_OW 49
// SetLives ( un , 10 ) ;
1945: LD_VAR 0 2
1949: PPUSH
1950: LD_INT 10
1952: PPUSH
1953: CALL_OW 234
// end ;
1957: GO 1890
1959: POP
1960: POP
// end ; end_of_file
1961: PPOPN 2
1963: END
// export function PrepareApeman ( n ) ; var un , i ; begin
1964: LD_INT 0
1966: PPUSH
1967: PPUSH
1968: PPUSH
// for i = 1 to n do
1969: LD_ADDR_VAR 0 4
1973: PUSH
1974: DOUBLE
1975: LD_INT 1
1977: DEC
1978: ST_TO_ADDR
1979: LD_VAR 0 1
1983: PUSH
1984: FOR_TO
1985: IFFALSE 2119
// begin uc_side := 0 ;
1987: LD_ADDR_OWVAR 20
1991: PUSH
1992: LD_INT 0
1994: ST_TO_ADDR
// uc_nation := 0 ;
1995: LD_ADDR_OWVAR 21
1999: PUSH
2000: LD_INT 0
2002: ST_TO_ADDR
// hc_class := class_apeman ;
2003: LD_ADDR_OWVAR 28
2007: PUSH
2008: LD_INT 12
2010: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
2011: LD_ADDR_OWVAR 31
2015: PUSH
2016: LD_INT 0
2018: PUSH
2019: LD_INT 0
2021: PUSH
2022: LD_INT 0
2024: PUSH
2025: LD_INT 0
2027: PUSH
2028: EMPTY
2029: LIST
2030: LIST
2031: LIST
2032: LIST
2033: ST_TO_ADDR
// hc_name :=  ;
2034: LD_ADDR_OWVAR 26
2038: PUSH
2039: LD_STRING 
2041: ST_TO_ADDR
// hc_gallery :=  ;
2042: LD_ADDR_OWVAR 33
2046: PUSH
2047: LD_STRING 
2049: ST_TO_ADDR
// hc_importance := 0 ;
2050: LD_ADDR_OWVAR 32
2054: PUSH
2055: LD_INT 0
2057: ST_TO_ADDR
// un := CreateHuman ;
2058: LD_ADDR_VAR 0 3
2062: PUSH
2063: CALL_OW 44
2067: ST_TO_ADDR
// PlaceUnitArea ( un , [ ape1 , ape2 ] [ Rand ( 1 , 2 ) ] , false ) ;
2068: LD_VAR 0 3
2072: PPUSH
2073: LD_INT 19
2075: PUSH
2076: LD_INT 20
2078: PUSH
2079: EMPTY
2080: LIST
2081: LIST
2082: PUSH
2083: LD_INT 1
2085: PPUSH
2086: LD_INT 2
2088: PPUSH
2089: CALL_OW 12
2093: ARRAY
2094: PPUSH
2095: LD_INT 0
2097: PPUSH
2098: CALL_OW 49
// Wait ( Rand ( 0 0$33 , 2 2$33 ) ) ;
2102: LD_INT 1155
2104: PPUSH
2105: LD_INT 5355
2107: PPUSH
2108: CALL_OW 12
2112: PPUSH
2113: CALL_OW 67
// end ;
2117: GO 1984
2119: POP
2120: POP
// end ;
2121: LD_VAR 0 2
2125: RET
// export function GetDistUnitToSide ( unit , side ) ; var tmp , dist ; begin
2126: LD_INT 0
2128: PPUSH
2129: PPUSH
2130: PPUSH
// tmp := NearestUnitToUnit ( FilterAllUnits ( [ f_side , side ] ) , unit ) ;
2131: LD_ADDR_VAR 0 4
2135: PUSH
2136: LD_INT 22
2138: PUSH
2139: LD_VAR 0 2
2143: PUSH
2144: EMPTY
2145: LIST
2146: LIST
2147: PPUSH
2148: CALL_OW 69
2152: PPUSH
2153: LD_VAR 0 1
2157: PPUSH
2158: CALL_OW 74
2162: ST_TO_ADDR
// dist := GetDistUnits ( unit , tmp ) ;
2163: LD_ADDR_VAR 0 5
2167: PUSH
2168: LD_VAR 0 1
2172: PPUSH
2173: LD_VAR 0 4
2177: PPUSH
2178: CALL_OW 296
2182: ST_TO_ADDR
// if dist >= 9999 then
2183: LD_VAR 0 5
2187: PUSH
2188: LD_INT 9999
2190: GREATEREQUAL
2191: IFFALSE 2204
// result := - 1 else
2193: LD_ADDR_VAR 0 3
2197: PUSH
2198: LD_INT 1
2200: NEG
2201: ST_TO_ADDR
2202: GO 2214
// result := dist ;
2204: LD_ADDR_VAR 0 3
2208: PUSH
2209: LD_VAR 0 5
2213: ST_TO_ADDR
// end ;
2214: LD_VAR 0 3
2218: RET
// export function NearestUnitToSide ( plist , side ) ; var i , tmp , unit ; begin
2219: LD_INT 0
2221: PPUSH
2222: PPUSH
2223: PPUSH
2224: PPUSH
// tmp := 9999 ;
2225: LD_ADDR_VAR 0 5
2229: PUSH
2230: LD_INT 9999
2232: ST_TO_ADDR
// for i = 1 to plist do
2233: LD_ADDR_VAR 0 4
2237: PUSH
2238: DOUBLE
2239: LD_INT 1
2241: DEC
2242: ST_TO_ADDR
2243: LD_VAR 0 1
2247: PUSH
2248: FOR_TO
2249: IFFALSE 2323
// if GetDistUnitToSide ( plist [ i ] , side ) < tmp then
2251: LD_VAR 0 1
2255: PUSH
2256: LD_VAR 0 4
2260: ARRAY
2261: PPUSH
2262: LD_VAR 0 2
2266: PPUSH
2267: CALL 2126 0 2
2271: PUSH
2272: LD_VAR 0 5
2276: LESS
2277: IFFALSE 2321
// begin tmp := GetDistUnitToSide ( plist [ i ] , side ) ;
2279: LD_ADDR_VAR 0 5
2283: PUSH
2284: LD_VAR 0 1
2288: PUSH
2289: LD_VAR 0 4
2293: ARRAY
2294: PPUSH
2295: LD_VAR 0 2
2299: PPUSH
2300: CALL 2126 0 2
2304: ST_TO_ADDR
// unit := plist [ i ] ;
2305: LD_ADDR_VAR 0 6
2309: PUSH
2310: LD_VAR 0 1
2314: PUSH
2315: LD_VAR 0 4
2319: ARRAY
2320: ST_TO_ADDR
// end ;
2321: GO 2248
2323: POP
2324: POP
// result := unit ;
2325: LD_ADDR_VAR 0 3
2329: PUSH
2330: LD_VAR 0 6
2334: ST_TO_ADDR
// end ;
2335: LD_VAR 0 3
2339: RET
// export function CalculateCommanderPoints ; var points , crates_collected , sib_collected , i ; begin
2340: LD_INT 0
2342: PPUSH
2343: PPUSH
2344: PPUSH
2345: PPUSH
2346: PPUSH
// points := [ 1000 , 2500 , 5000 ] [ Difficulty ] ;
2347: LD_ADDR_VAR 0 2
2351: PUSH
2352: LD_INT 1000
2354: PUSH
2355: LD_INT 2500
2357: PUSH
2358: LD_INT 5000
2360: PUSH
2361: EMPTY
2362: LIST
2363: LIST
2364: LIST
2365: PUSH
2366: LD_OWVAR 67
2370: ARRAY
2371: ST_TO_ADDR
// points := points + ( - 1 * FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) * 30 ) ;
2372: LD_ADDR_VAR 0 2
2376: PUSH
2377: LD_VAR 0 2
2381: PUSH
2382: LD_INT 1
2384: NEG
2385: PUSH
2386: LD_INT 22
2388: PUSH
2389: LD_OWVAR 2
2393: PUSH
2394: EMPTY
2395: LIST
2396: LIST
2397: PUSH
2398: LD_INT 21
2400: PUSH
2401: LD_INT 3
2403: PUSH
2404: EMPTY
2405: LIST
2406: LIST
2407: PUSH
2408: EMPTY
2409: LIST
2410: LIST
2411: PPUSH
2412: CALL_OW 69
2416: MUL
2417: PUSH
2418: LD_INT 30
2420: MUL
2421: PLUS
2422: ST_TO_ADDR
// points := points + ( kill_counter * 10 ) ;
2423: LD_ADDR_VAR 0 2
2427: PUSH
2428: LD_VAR 0 2
2432: PUSH
2433: LD_EXP 17
2437: PUSH
2438: LD_INT 10
2440: MUL
2441: PLUS
2442: ST_TO_ADDR
// points := points + ( - 1 * kill_counter * 20 ) ;
2443: LD_ADDR_VAR 0 2
2447: PUSH
2448: LD_VAR 0 2
2452: PUSH
2453: LD_INT 1
2455: NEG
2456: PUSH
2457: LD_EXP 17
2461: MUL
2462: PUSH
2463: LD_INT 20
2465: MUL
2466: PLUS
2467: ST_TO_ADDR
// points := points + ( - 1 * ( ( tick / 35 ) / 60 ) * 25 ) ;
2468: LD_ADDR_VAR 0 2
2472: PUSH
2473: LD_VAR 0 2
2477: PUSH
2478: LD_INT 1
2480: NEG
2481: PUSH
2482: LD_OWVAR 1
2486: PUSH
2487: LD_INT 35
2489: DIVREAL
2490: PUSH
2491: LD_INT 60
2493: DIVREAL
2494: MUL
2495: PUSH
2496: LD_INT 25
2498: MUL
2499: PLUS
2500: ST_TO_ADDR
// points := points + ( tech_counter * 15 ) ;
2501: LD_ADDR_VAR 0 2
2505: PUSH
2506: LD_VAR 0 2
2510: PUSH
2511: LD_EXP 19
2515: PUSH
2516: LD_INT 15
2518: MUL
2519: PLUS
2520: ST_TO_ADDR
// points := points + ( - 1 * sib_contamin_counter ) * 1000 ;
2521: LD_ADDR_VAR 0 2
2525: PUSH
2526: LD_VAR 0 2
2530: PUSH
2531: LD_INT 1
2533: NEG
2534: PUSH
2535: LD_EXP 20
2539: MUL
2540: PUSH
2541: LD_INT 1000
2543: MUL
2544: PLUS
2545: ST_TO_ADDR
// points := points + ( veh_counter * 5 ) ;
2546: LD_ADDR_VAR 0 2
2550: PUSH
2551: LD_VAR 0 2
2555: PUSH
2556: LD_EXP 18
2560: PUSH
2561: LD_INT 5
2563: MUL
2564: PLUS
2565: ST_TO_ADDR
// result := points ;
2566: LD_ADDR_VAR 0 1
2570: PUSH
2571: LD_VAR 0 2
2575: ST_TO_ADDR
// end ; end_of_file
2576: LD_VAR 0 1
2580: RET
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2581: LD_VAR 0 1
2585: PPUSH
2586: CALL 34161 0 1
// if un = ru_cargo then
2590: LD_VAR 0 1
2594: PUSH
2595: LD_EXP 31
2599: EQUAL
2600: IFFALSE 2610
// ru_cargo := 0 ;
2602: LD_ADDR_EXP 31
2606: PUSH
2607: LD_INT 0
2609: ST_TO_ADDR
// if GetSide ( un ) = your_side then
2610: LD_VAR 0 1
2614: PPUSH
2615: CALL_OW 255
2619: PUSH
2620: LD_OWVAR 2
2624: EQUAL
2625: IFFALSE 2641
// dead_counter := dead_counter + 1 ;
2627: LD_ADDR_EXP 16
2631: PUSH
2632: LD_EXP 16
2636: PUSH
2637: LD_INT 1
2639: PLUS
2640: ST_TO_ADDR
// if GetSide ( un ) in FilterAllUnits ( [ f_enemy , your_side ] ) then
2641: LD_VAR 0 1
2645: PPUSH
2646: CALL_OW 255
2650: PUSH
2651: LD_INT 81
2653: PUSH
2654: LD_OWVAR 2
2658: PUSH
2659: EMPTY
2660: LIST
2661: LIST
2662: PPUSH
2663: CALL_OW 69
2667: IN
2668: IFFALSE 2684
// kill_counter := kill_counter + 1 ;
2670: LD_ADDR_EXP 17
2674: PUSH
2675: LD_EXP 17
2679: PUSH
2680: LD_INT 1
2682: PLUS
2683: ST_TO_ADDR
// if un = player_commander then
2684: LD_VAR 0 1
2688: PUSH
2689: LD_EXP 11
2693: EQUAL
2694: IFFALSE 2703
// YouLost ( vulcano-lost ) ;
2696: LD_STRING vulcano-lost
2698: PPUSH
2699: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) then
2703: LD_VAR 0 1
2707: PUSH
2708: LD_INT 22
2710: PUSH
2711: LD_INT 3
2713: PUSH
2714: EMPTY
2715: LIST
2716: LIST
2717: PUSH
2718: LD_INT 21
2720: PUSH
2721: LD_INT 3
2723: PUSH
2724: EMPTY
2725: LIST
2726: LIST
2727: PUSH
2728: EMPTY
2729: LIST
2730: LIST
2731: PPUSH
2732: CALL_OW 69
2736: IN
2737: IFFALSE 2853
// begin if GetBType ( un ) = b_turret or GetBType ( un ) = b_siberite_power then
2739: LD_VAR 0 1
2743: PPUSH
2744: CALL_OW 266
2748: PUSH
2749: LD_INT 33
2751: EQUAL
2752: PUSH
2753: LD_VAR 0 1
2757: PPUSH
2758: CALL_OW 266
2762: PUSH
2763: LD_INT 28
2765: EQUAL
2766: OR
2767: IFFALSE 2853
// begin ru_blist := ru_blist ^ GetBType ( un ) ;
2769: LD_ADDR_EXP 32
2773: PUSH
2774: LD_EXP 32
2778: PUSH
2779: LD_VAR 0 1
2783: PPUSH
2784: CALL_OW 266
2788: ADD
2789: ST_TO_ADDR
// ru_blist := ru_blist ^ GetX ( un ) ;
2790: LD_ADDR_EXP 32
2794: PUSH
2795: LD_EXP 32
2799: PUSH
2800: LD_VAR 0 1
2804: PPUSH
2805: CALL_OW 250
2809: ADD
2810: ST_TO_ADDR
// ru_blist := ru_blist ^ GetY ( un ) ;
2811: LD_ADDR_EXP 32
2815: PUSH
2816: LD_EXP 32
2820: PUSH
2821: LD_VAR 0 1
2825: PPUSH
2826: CALL_OW 251
2830: ADD
2831: ST_TO_ADDR
// ru_blist := ru_blist ^ GetDir ( un ) ;
2832: LD_ADDR_EXP 32
2836: PUSH
2837: LD_EXP 32
2841: PUSH
2842: LD_VAR 0 1
2846: PPUSH
2847: CALL_OW 254
2851: ADD
2852: ST_TO_ADDR
// end ; end ; if un in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) then
2853: LD_VAR 0 1
2857: PUSH
2858: LD_INT 22
2860: PUSH
2861: LD_INT 8
2863: PUSH
2864: EMPTY
2865: LIST
2866: LIST
2867: PUSH
2868: LD_INT 21
2870: PUSH
2871: LD_INT 3
2873: PUSH
2874: EMPTY
2875: LIST
2876: LIST
2877: PUSH
2878: EMPTY
2879: LIST
2880: LIST
2881: PPUSH
2882: CALL_OW 69
2886: IN
2887: IFFALSE 3031
// begin if GetBType ( un ) = b_barracks then
2889: LD_VAR 0 1
2893: PPUSH
2894: CALL_OW 266
2898: PUSH
2899: LD_INT 5
2901: EQUAL
2902: IFFALSE 2920
// legion_blist := legion_blist ^ b_armoury else
2904: LD_ADDR_EXP 40
2908: PUSH
2909: LD_EXP 40
2913: PUSH
2914: LD_INT 4
2916: ADD
2917: ST_TO_ADDR
2918: GO 2968
// if not GetBType ( un ) in [ b_warehouse , b_lab , b_lab_full ] then
2920: LD_VAR 0 1
2924: PPUSH
2925: CALL_OW 266
2929: PUSH
2930: LD_INT 1
2932: PUSH
2933: LD_INT 6
2935: PUSH
2936: LD_INT 8
2938: PUSH
2939: EMPTY
2940: LIST
2941: LIST
2942: LIST
2943: IN
2944: NOT
2945: IFFALSE 2968
// legion_blist := legion_blist ^ GetBType ( un ) ;
2947: LD_ADDR_EXP 40
2951: PUSH
2952: LD_EXP 40
2956: PUSH
2957: LD_VAR 0 1
2961: PPUSH
2962: CALL_OW 266
2966: ADD
2967: ST_TO_ADDR
// legion_blist := legion_blist ^ GetX ( un ) ;
2968: LD_ADDR_EXP 40
2972: PUSH
2973: LD_EXP 40
2977: PUSH
2978: LD_VAR 0 1
2982: PPUSH
2983: CALL_OW 250
2987: ADD
2988: ST_TO_ADDR
// legion_blist := legion_blist ^ GetY ( un ) ;
2989: LD_ADDR_EXP 40
2993: PUSH
2994: LD_EXP 40
2998: PUSH
2999: LD_VAR 0 1
3003: PPUSH
3004: CALL_OW 251
3008: ADD
3009: ST_TO_ADDR
// legion_blist := legion_blist ^ GetDir ( un ) ;
3010: LD_ADDR_EXP 40
3014: PUSH
3015: LD_EXP 40
3019: PUSH
3020: LD_VAR 0 1
3024: PPUSH
3025: CALL_OW 254
3029: ADD
3030: ST_TO_ADDR
// end ; if un in legion_force then
3031: LD_VAR 0 1
3035: PUSH
3036: LD_EXP 37
3040: IN
3041: IFFALSE 3059
// legion_force := legion_force diff un ;
3043: LD_ADDR_EXP 37
3047: PUSH
3048: LD_EXP 37
3052: PUSH
3053: LD_VAR 0 1
3057: DIFF
3058: ST_TO_ADDR
// if un in ru_force then
3059: LD_VAR 0 1
3063: PUSH
3064: LD_EXP 29
3068: IN
3069: IFFALSE 3087
// ru_force := ru_force diff un ;
3071: LD_ADDR_EXP 29
3075: PUSH
3076: LD_EXP 29
3080: PUSH
3081: LD_VAR 0 1
3085: DIFF
3086: ST_TO_ADDR
// if un in al_force then
3087: LD_VAR 0 1
3091: PUSH
3092: LD_EXP 44
3096: IN
3097: IFFALSE 3115
// al_force := al_force diff un ;
3099: LD_ADDR_EXP 44
3103: PUSH
3104: LD_EXP 44
3108: PUSH
3109: LD_VAR 0 1
3113: DIFF
3114: ST_TO_ADDR
// end ;
3115: PPOPN 1
3117: END
// on BuildingComplete ( b ) do var i ;
3118: LD_INT 0
3120: PPUSH
// begin if GetSide ( b ) = 8 then
3121: LD_VAR 0 1
3125: PPUSH
3126: CALL_OW 255
3130: PUSH
3131: LD_INT 8
3133: EQUAL
3134: IFFALSE 3174
// for i = 1 to 4 do
3136: LD_ADDR_VAR 0 2
3140: PUSH
3141: DOUBLE
3142: LD_INT 1
3144: DEC
3145: ST_TO_ADDR
3146: LD_INT 4
3148: PUSH
3149: FOR_TO
3150: IFFALSE 3172
// legion_blist := Delete ( legion_blist , 1 ) ;
3152: LD_ADDR_EXP 40
3156: PUSH
3157: LD_EXP 40
3161: PPUSH
3162: LD_INT 1
3164: PPUSH
3165: CALL_OW 3
3169: ST_TO_ADDR
3170: GO 3149
3172: POP
3173: POP
// if GetSide ( b ) = 3 then
3174: LD_VAR 0 1
3178: PPUSH
3179: CALL_OW 255
3183: PUSH
3184: LD_INT 3
3186: EQUAL
3187: IFFALSE 3227
// for i = 1 to 4 do
3189: LD_ADDR_VAR 0 2
3193: PUSH
3194: DOUBLE
3195: LD_INT 1
3197: DEC
3198: ST_TO_ADDR
3199: LD_INT 4
3201: PUSH
3202: FOR_TO
3203: IFFALSE 3225
// ru_blist := Delete ( ru_blist , 1 ) ;
3205: LD_ADDR_EXP 32
3209: PUSH
3210: LD_EXP 32
3214: PPUSH
3215: LD_INT 1
3217: PPUSH
3218: CALL_OW 3
3222: ST_TO_ADDR
3223: GO 3202
3225: POP
3226: POP
// end ;
3227: PPOPN 2
3229: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
3230: LD_VAR 0 1
3234: PPUSH
3235: LD_VAR 0 2
3239: PPUSH
3240: CALL 34283 0 2
// if not GetWeapon ( veh ) in [ ru_cargo_bay , ru_siberium_rocket ] then
3244: LD_VAR 0 1
3248: PPUSH
3249: CALL_OW 264
3253: PUSH
3254: LD_INT 51
3256: PUSH
3257: LD_INT 48
3259: PUSH
3260: EMPTY
3261: LIST
3262: LIST
3263: IN
3264: NOT
3265: IFFALSE 3313
// begin if GetSide ( veh ) = 3 then
3267: LD_VAR 0 1
3271: PPUSH
3272: CALL_OW 255
3276: PUSH
3277: LD_INT 3
3279: EQUAL
3280: IFFALSE 3313
// begin ComMoveXY ( veh , 149 , 8 ) ;
3282: LD_VAR 0 1
3286: PPUSH
3287: LD_INT 149
3289: PPUSH
3290: LD_INT 8
3292: PPUSH
3293: CALL_OW 111
// ru_force := ru_force ^ veh ;
3297: LD_ADDR_EXP 29
3301: PUSH
3302: LD_EXP 29
3306: PUSH
3307: LD_VAR 0 1
3311: ADD
3312: ST_TO_ADDR
// end ; end ; if not GetWeapon ( veh ) in [ ar_cargo_bay , ar_control_tower ] then
3313: LD_VAR 0 1
3317: PPUSH
3318: CALL_OW 264
3322: PUSH
3323: LD_INT 32
3325: PUSH
3326: LD_INT 31
3328: PUSH
3329: EMPTY
3330: LIST
3331: LIST
3332: IN
3333: NOT
3334: IFFALSE 3367
// begin if GetSide ( veh ) = 8 then
3336: LD_VAR 0 1
3340: PPUSH
3341: CALL_OW 255
3345: PUSH
3346: LD_INT 8
3348: EQUAL
3349: IFFALSE 3367
// legion_force := legion_force ^ veh ;
3351: LD_ADDR_EXP 37
3355: PUSH
3356: LD_EXP 37
3360: PUSH
3361: LD_VAR 0 1
3365: ADD
3366: ST_TO_ADDR
// end ; if GetSide ( veh ) = 3 and not ru_cargo and GetWeapon ( veh ) = ru_cargo_bay then
3367: LD_VAR 0 1
3371: PPUSH
3372: CALL_OW 255
3376: PUSH
3377: LD_INT 3
3379: EQUAL
3380: PUSH
3381: LD_EXP 31
3385: NOT
3386: AND
3387: PUSH
3388: LD_VAR 0 1
3392: PPUSH
3393: CALL_OW 264
3397: PUSH
3398: LD_INT 51
3400: EQUAL
3401: AND
3402: IFFALSE 3414
// ru_cargo := veh ;
3404: LD_ADDR_EXP 31
3408: PUSH
3409: LD_VAR 0 1
3413: ST_TO_ADDR
// if GetSide ( veh ) = 7 and your_side <> 7 then
3414: LD_VAR 0 1
3418: PPUSH
3419: CALL_OW 255
3423: PUSH
3424: LD_INT 7
3426: EQUAL
3427: PUSH
3428: LD_OWVAR 2
3432: PUSH
3433: LD_INT 7
3435: NONEQUAL
3436: AND
3437: IFFALSE 3455
// al_force := al_force ^ veh ;
3439: LD_ADDR_EXP 44
3443: PUSH
3444: LD_EXP 44
3448: PUSH
3449: LD_VAR 0 1
3453: ADD
3454: ST_TO_ADDR
// if GetSide ( veh ) = your_side then
3455: LD_VAR 0 1
3459: PPUSH
3460: CALL_OW 255
3464: PUSH
3465: LD_OWVAR 2
3469: EQUAL
3470: IFFALSE 3486
// veh_counter := veh_counter + 1 ;
3472: LD_ADDR_EXP 18
3476: PUSH
3477: LD_EXP 18
3481: PUSH
3482: LD_INT 1
3484: PLUS
3485: ST_TO_ADDR
// end ;
3486: PPOPN 2
3488: END
// on SibDepositContaminated ( contaminating_scientist , x_of_deposit , y_of_deposit ) do begin if GetSide ( contaminating_scientist ) <> your_side then
3489: LD_VAR 0 1
3493: PPUSH
3494: CALL_OW 255
3498: PUSH
3499: LD_OWVAR 2
3503: NONEQUAL
3504: IFFALSE 3520
// sib_contamin_counter := sib_contamin_counter + 1 ;
3506: LD_ADDR_EXP 20
3510: PUSH
3511: LD_EXP 20
3515: PUSH
3516: LD_INT 1
3518: PLUS
3519: ST_TO_ADDR
// end ;
3520: PPOPN 3
3522: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = your_side then
3523: LD_VAR 0 2
3527: PPUSH
3528: CALL_OW 255
3532: PUSH
3533: LD_OWVAR 2
3537: EQUAL
3538: IFFALSE 3554
// tech_counter := tech_counter + 1 ;
3540: LD_ADDR_EXP 19
3544: PUSH
3545: LD_EXP 19
3549: PUSH
3550: LD_INT 1
3552: PLUS
3553: ST_TO_ADDR
// if tech = 53 and your_side = 1 then
3554: LD_VAR 0 1
3558: PUSH
3559: LD_INT 53
3561: EQUAL
3562: PUSH
3563: LD_OWVAR 2
3567: PUSH
3568: LD_INT 1
3570: EQUAL
3571: AND
3572: IFFALSE 3587
// SetTech ( 80 , 1 , state_researched ) ;
3574: LD_INT 80
3576: PPUSH
3577: LD_INT 1
3579: PPUSH
3580: LD_INT 2
3582: PPUSH
3583: CALL_OW 322
// end ;
3587: PPOPN 2
3589: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 8 and GetControl ( un ) = control_remote then
3590: LD_VAR 0 1
3594: PPUSH
3595: CALL_OW 255
3599: PUSH
3600: LD_INT 8
3602: EQUAL
3603: PUSH
3604: LD_VAR 0 1
3608: PPUSH
3609: CALL_OW 263
3613: PUSH
3614: LD_INT 2
3616: EQUAL
3617: AND
3618: IFFALSE 3629
// ComAutodestruct ( un ) ;
3620: LD_VAR 0 1
3624: PPUSH
3625: CALL 71581 0 1
// end ;
3629: PPOPN 1
3631: END
// on SailEvent ( event ) do begin case event of event_legion_attack :
3632: LD_VAR 0 1
3636: PUSH
3637: LD_EXP 21
3641: DOUBLE
3642: EQUAL
3643: IFTRUE 3647
3645: GO 3654
3647: POP
// LegionAttack ( ) ; event_alliance_attack :
3648: CALL 11371 0 0
3652: GO 3689
3654: LD_EXP 23
3658: DOUBLE
3659: EQUAL
3660: IFTRUE 3664
3662: GO 3671
3664: POP
// AllianceAttack ( ) ; event_russian_attack :
3665: CALL 18860 0 0
3669: GO 3689
3671: LD_EXP 22
3675: DOUBLE
3676: EQUAL
3677: IFTRUE 3681
3679: GO 3688
3681: POP
// RussianAttack ( ) ; end ;
3682: CALL 7595 0 0
3686: GO 3689
3688: POP
// end ;
3689: PPOPN 1
3691: END
// every 9 9$30 trigger FilterAllUnits ( [ f_class , class_apeman ] ) < 9 and tick < 50 50$00 do
3692: LD_INT 25
3694: PUSH
3695: LD_INT 12
3697: PUSH
3698: EMPTY
3699: LIST
3700: LIST
3701: PPUSH
3702: CALL_OW 69
3706: PUSH
3707: LD_INT 9
3709: LESS
3710: PUSH
3711: LD_OWVAR 1
3715: PUSH
3716: LD_INT 105000
3718: LESS
3719: AND
3720: IFFALSE 3753
3722: GO 3724
3724: DISABLE
// begin enable ;
3725: ENABLE
// PrepareApeman ( 8 - ( FilterAllUnits ( [ f_class , class_apeman ] ) + 0 ) ) ;
3726: LD_INT 8
3728: PUSH
3729: LD_INT 25
3731: PUSH
3732: LD_INT 12
3734: PUSH
3735: EMPTY
3736: LIST
3737: LIST
3738: PPUSH
3739: CALL_OW 69
3743: PUSH
3744: LD_INT 0
3746: PLUS
3747: MINUS
3748: PPUSH
3749: CALL 1964 0 1
// end ;
3753: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
3754: LD_VAR 0 1
3758: PPUSH
3759: LD_VAR 0 2
3763: PPUSH
3764: LD_VAR 0 3
3768: PPUSH
3769: CALL 34259 0 3
// end ;
3773: PPOPN 3
3775: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
3776: LD_VAR 0 1
3780: PPUSH
3781: CALL 34267 0 1
// end ; end_of_file
3785: PPOPN 1
3787: END
// export ru_force , ru_skill , ru_cargo , ru_blist , ru_vlist , ru_amount , ru_time , ru_teleport_exit ; export function PrepareRussian ; var i , un , ru_depot , ru_factory , ru_teleport , ru_barracks , ru_bunkers , ru_buildings , ru_vehicles , ru_humans ; begin
3788: LD_INT 0
3790: PPUSH
3791: PPUSH
3792: PPUSH
3793: PPUSH
3794: PPUSH
3795: PPUSH
3796: PPUSH
3797: PPUSH
3798: PPUSH
3799: PPUSH
3800: PPUSH
// uc_side := 3 ;
3801: LD_ADDR_OWVAR 20
3805: PUSH
3806: LD_INT 3
3808: ST_TO_ADDR
// uc_nation := nation_russian ;
3809: LD_ADDR_OWVAR 21
3813: PUSH
3814: LD_INT 3
3816: ST_TO_ADDR
// ru_depot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
3817: LD_ADDR_VAR 0 4
3821: PUSH
3822: LD_INT 22
3824: PUSH
3825: LD_INT 3
3827: PUSH
3828: EMPTY
3829: LIST
3830: LIST
3831: PUSH
3832: LD_INT 30
3834: PUSH
3835: LD_INT 1
3837: PUSH
3838: EMPTY
3839: LIST
3840: LIST
3841: PUSH
3842: EMPTY
3843: LIST
3844: LIST
3845: PPUSH
3846: CALL_OW 69
3850: PUSH
3851: LD_INT 1
3853: ARRAY
3854: ST_TO_ADDR
// ru_factory := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3855: LD_ADDR_VAR 0 5
3859: PUSH
3860: LD_INT 22
3862: PUSH
3863: LD_INT 3
3865: PUSH
3866: EMPTY
3867: LIST
3868: LIST
3869: PUSH
3870: LD_INT 30
3872: PUSH
3873: LD_INT 3
3875: PUSH
3876: EMPTY
3877: LIST
3878: LIST
3879: PUSH
3880: EMPTY
3881: LIST
3882: LIST
3883: PPUSH
3884: CALL_OW 69
3888: PUSH
3889: LD_INT 1
3891: ARRAY
3892: ST_TO_ADDR
// ru_teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] ;
3893: LD_ADDR_VAR 0 6
3897: PUSH
3898: LD_INT 22
3900: PUSH
3901: LD_INT 3
3903: PUSH
3904: EMPTY
3905: LIST
3906: LIST
3907: PUSH
3908: LD_INT 30
3910: PUSH
3911: LD_INT 34
3913: PUSH
3914: EMPTY
3915: LIST
3916: LIST
3917: PUSH
3918: EMPTY
3919: LIST
3920: LIST
3921: PPUSH
3922: CALL_OW 69
3926: PUSH
3927: LD_INT 1
3929: ARRAY
3930: ST_TO_ADDR
// ru_bunkers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
3931: LD_ADDR_VAR 0 8
3935: PUSH
3936: LD_INT 22
3938: PUSH
3939: LD_INT 3
3941: PUSH
3942: EMPTY
3943: LIST
3944: LIST
3945: PUSH
3946: LD_INT 30
3948: PUSH
3949: LD_INT 33
3951: PUSH
3952: EMPTY
3953: LIST
3954: LIST
3955: PUSH
3956: EMPTY
3957: LIST
3958: LIST
3959: PPUSH
3960: CALL_OW 69
3964: ST_TO_ADDR
// ru_barracks := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
3965: LD_ADDR_VAR 0 7
3969: PUSH
3970: LD_INT 22
3972: PUSH
3973: LD_INT 3
3975: PUSH
3976: EMPTY
3977: LIST
3978: LIST
3979: PUSH
3980: LD_INT 30
3982: PUSH
3983: LD_INT 5
3985: PUSH
3986: EMPTY
3987: LIST
3988: LIST
3989: PUSH
3990: EMPTY
3991: LIST
3992: LIST
3993: PPUSH
3994: CALL_OW 69
3998: PUSH
3999: LD_INT 1
4001: ARRAY
4002: ST_TO_ADDR
// ru_blist := [ ] ;
4003: LD_ADDR_EXP 32
4007: PUSH
4008: EMPTY
4009: ST_TO_ADDR
// ru_vlist := [ ] ;
4010: LD_ADDR_EXP 33
4014: PUSH
4015: EMPTY
4016: ST_TO_ADDR
// ru_teleport_exit := [ 183 , 62 , 147 , 44 ] ;
4017: LD_ADDR_EXP 36
4021: PUSH
4022: LD_INT 183
4024: PUSH
4025: LD_INT 62
4027: PUSH
4028: LD_INT 147
4030: PUSH
4031: LD_INT 44
4033: PUSH
4034: EMPTY
4035: LIST
4036: LIST
4037: LIST
4038: LIST
4039: ST_TO_ADDR
// TeleportExit ( FilterAllUnits ( [ f_btype , b_teleport ] ) [ 1 ] , ru_teleport_exit [ 1 ] , ru_teleport_exit [ 2 ] ) ;
4040: LD_INT 30
4042: PUSH
4043: LD_INT 34
4045: PUSH
4046: EMPTY
4047: LIST
4048: LIST
4049: PPUSH
4050: CALL_OW 69
4054: PUSH
4055: LD_INT 1
4057: ARRAY
4058: PPUSH
4059: LD_EXP 36
4063: PUSH
4064: LD_INT 1
4066: ARRAY
4067: PPUSH
4068: LD_EXP 36
4072: PUSH
4073: LD_INT 2
4075: ARRAY
4076: PPUSH
4077: CALL_OW 243
// ru_amount := [ 4 , 5 , 6 ] [ Difficulty ] ;
4081: LD_ADDR_EXP 34
4085: PUSH
4086: LD_INT 4
4088: PUSH
4089: LD_INT 5
4091: PUSH
4092: LD_INT 6
4094: PUSH
4095: EMPTY
4096: LIST
4097: LIST
4098: LIST
4099: PUSH
4100: LD_OWVAR 67
4104: ARRAY
4105: ST_TO_ADDR
// SetResourceType ( GetBase ( ru_depot ) , mat_cans , 3000 ) ;
4106: LD_VAR 0 4
4110: PPUSH
4111: CALL_OW 274
4115: PPUSH
4116: LD_INT 1
4118: PPUSH
4119: LD_INT 3000
4121: PPUSH
4122: CALL_OW 277
// SetResourceType ( GetBase ( ru_depot ) , mat_oil , 300 ) ;
4126: LD_VAR 0 4
4130: PPUSH
4131: CALL_OW 274
4135: PPUSH
4136: LD_INT 2
4138: PPUSH
4139: LD_INT 300
4141: PPUSH
4142: CALL_OW 277
// hc_gallery :=  ;
4146: LD_ADDR_OWVAR 33
4150: PUSH
4151: LD_STRING 
4153: ST_TO_ADDR
// hc_name :=  ;
4154: LD_ADDR_OWVAR 26
4158: PUSH
4159: LD_STRING 
4161: ST_TO_ADDR
// hc_importance := 0 ;
4162: LD_ADDR_OWVAR 32
4166: PUSH
4167: LD_INT 0
4169: ST_TO_ADDR
// ru_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
4170: LD_ADDR_EXP 30
4174: PUSH
4175: LD_INT 5
4177: PUSH
4178: LD_INT 6
4180: PUSH
4181: LD_INT 7
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: LIST
4188: PUSH
4189: LD_OWVAR 67
4193: ARRAY
4194: ST_TO_ADDR
// for i = 1 to 6 do
4195: LD_ADDR_VAR 0 2
4199: PUSH
4200: DOUBLE
4201: LD_INT 1
4203: DEC
4204: ST_TO_ADDR
4205: LD_INT 6
4207: PUSH
4208: FOR_TO
4209: IFFALSE 4367
// begin PrepareHuman ( false , class_bazooker , ru_skill ) ;
4211: LD_INT 0
4213: PPUSH
4214: LD_INT 9
4216: PPUSH
4217: LD_EXP 30
4221: PPUSH
4222: CALL_OW 380
// un := CreateHuman ;
4226: LD_ADDR_VAR 0 3
4230: PUSH
4231: CALL_OW 44
4235: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_barracks ) ;
4236: LD_VAR 0 3
4240: PPUSH
4241: LD_VAR 0 7
4245: PPUSH
4246: CALL_OW 52
// PrepareHuman ( false , 4 , ru_skill ) ;
4250: LD_INT 0
4252: PPUSH
4253: LD_INT 4
4255: PPUSH
4256: LD_EXP 30
4260: PPUSH
4261: CALL_OW 380
// un := CreateHuman ;
4265: LD_ADDR_VAR 0 3
4269: PUSH
4270: CALL_OW 44
4274: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
4275: LD_VAR 0 3
4279: PPUSH
4280: LD_INT 24
4282: PPUSH
4283: CALL_OW 52
// PrepareHuman ( false , 3 , ru_skill ) ;
4287: LD_INT 0
4289: PPUSH
4290: LD_INT 3
4292: PPUSH
4293: LD_EXP 30
4297: PPUSH
4298: CALL_OW 380
// un := CreateHuman ;
4302: LD_ADDR_VAR 0 3
4306: PUSH
4307: CALL_OW 44
4311: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_factory ) ;
4312: LD_VAR 0 3
4316: PPUSH
4317: LD_VAR 0 5
4321: PPUSH
4322: CALL_OW 52
// PrepareHuman ( false , 2 , ru_skill ) ;
4326: LD_INT 0
4328: PPUSH
4329: LD_INT 2
4331: PPUSH
4332: LD_EXP 30
4336: PPUSH
4337: CALL_OW 380
// un := CreateHuman ;
4341: LD_ADDR_VAR 0 3
4345: PUSH
4346: CALL_OW 44
4350: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_depot ) ;
4351: LD_VAR 0 3
4355: PPUSH
4356: LD_VAR 0 4
4360: PPUSH
4361: CALL_OW 52
// end ;
4365: GO 4208
4367: POP
4368: POP
// if Difficulty > 1 then
4369: LD_OWVAR 67
4373: PUSH
4374: LD_INT 1
4376: GREATER
4377: IFFALSE 4410
// begin un := CreateBehemoth ( 3 , 160 , 36 , 3 ) ;
4379: LD_ADDR_VAR 0 3
4383: PUSH
4384: LD_INT 3
4386: PPUSH
4387: LD_INT 160
4389: PPUSH
4390: LD_INT 36
4392: PPUSH
4393: LD_INT 3
4395: PPUSH
4396: CALL 78836 0 4
4400: ST_TO_ADDR
// ComHold ( un ) ;
4401: LD_VAR 0 3
4405: PPUSH
4406: CALL_OW 140
// end ; russian_prepared := true ;
4410: LD_ADDR_EXP 2
4414: PUSH
4415: LD_INT 1
4417: ST_TO_ADDR
// ComConstruct ( ru_factory , ru_medium_wheeled , 3 , control_computer , ru_cargo_bay ) ;
4418: LD_VAR 0 5
4422: PPUSH
4423: LD_INT 21
4425: PPUSH
4426: LD_INT 3
4428: PPUSH
4429: LD_INT 3
4431: PPUSH
4432: LD_INT 51
4434: PPUSH
4435: CALL_OW 125
// end ;
4439: LD_VAR 0 1
4443: RET
// every 0 0$02 trigger FilterAllUnits ( [ f_side , 3 ] ) > 0 and russian_prepared do var ru_depot , ru_factory , ru_teleport , ru_bunkers , ru_buildings , ru_vehicles , ru_humans , ru_barracks , ru_engs , ru_mech , ru_sci , i , tmp , filter , cr , sib_bomb ;
4444: LD_INT 22
4446: PUSH
4447: LD_INT 3
4449: PUSH
4450: EMPTY
4451: LIST
4452: LIST
4453: PPUSH
4454: CALL_OW 69
4458: PUSH
4459: LD_INT 0
4461: GREATER
4462: PUSH
4463: LD_EXP 2
4467: AND
4468: IFFALSE 6618
4470: GO 4472
4472: DISABLE
4473: LD_INT 0
4475: PPUSH
4476: PPUSH
4477: PPUSH
4478: PPUSH
4479: PPUSH
4480: PPUSH
4481: PPUSH
4482: PPUSH
4483: PPUSH
4484: PPUSH
4485: PPUSH
4486: PPUSH
4487: PPUSH
4488: PPUSH
4489: PPUSH
4490: PPUSH
// begin enable ;
4491: ENABLE
// ru_depot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
4492: LD_ADDR_VAR 0 1
4496: PUSH
4497: LD_INT 22
4499: PUSH
4500: LD_INT 3
4502: PUSH
4503: EMPTY
4504: LIST
4505: LIST
4506: PUSH
4507: LD_INT 30
4509: PUSH
4510: LD_INT 1
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: PUSH
4517: EMPTY
4518: LIST
4519: LIST
4520: PPUSH
4521: CALL_OW 69
4525: PUSH
4526: LD_INT 1
4528: ARRAY
4529: ST_TO_ADDR
// ru_factory := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
4530: LD_ADDR_VAR 0 2
4534: PUSH
4535: LD_INT 22
4537: PUSH
4538: LD_INT 3
4540: PUSH
4541: EMPTY
4542: LIST
4543: LIST
4544: PUSH
4545: LD_INT 30
4547: PUSH
4548: LD_INT 3
4550: PUSH
4551: EMPTY
4552: LIST
4553: LIST
4554: PUSH
4555: EMPTY
4556: LIST
4557: LIST
4558: PPUSH
4559: CALL_OW 69
4563: PUSH
4564: LD_INT 1
4566: ARRAY
4567: ST_TO_ADDR
// ru_teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] ;
4568: LD_ADDR_VAR 0 3
4572: PUSH
4573: LD_INT 22
4575: PUSH
4576: LD_INT 3
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: PUSH
4583: LD_INT 30
4585: PUSH
4586: LD_INT 34
4588: PUSH
4589: EMPTY
4590: LIST
4591: LIST
4592: PUSH
4593: EMPTY
4594: LIST
4595: LIST
4596: PPUSH
4597: CALL_OW 69
4601: PUSH
4602: LD_INT 1
4604: ARRAY
4605: ST_TO_ADDR
// ru_bunkers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
4606: LD_ADDR_VAR 0 4
4610: PUSH
4611: LD_INT 22
4613: PUSH
4614: LD_INT 3
4616: PUSH
4617: EMPTY
4618: LIST
4619: LIST
4620: PUSH
4621: LD_INT 30
4623: PUSH
4624: LD_INT 33
4626: PUSH
4627: EMPTY
4628: LIST
4629: LIST
4630: PUSH
4631: EMPTY
4632: LIST
4633: LIST
4634: PPUSH
4635: CALL_OW 69
4639: ST_TO_ADDR
// ru_barracks := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
4640: LD_ADDR_VAR 0 8
4644: PUSH
4645: LD_INT 22
4647: PUSH
4648: LD_INT 3
4650: PUSH
4651: EMPTY
4652: LIST
4653: LIST
4654: PUSH
4655: LD_INT 30
4657: PUSH
4658: LD_INT 5
4660: PUSH
4661: EMPTY
4662: LIST
4663: LIST
4664: PUSH
4665: EMPTY
4666: LIST
4667: LIST
4668: PPUSH
4669: CALL_OW 69
4673: PUSH
4674: LD_INT 1
4676: ARRAY
4677: ST_TO_ADDR
// ru_buildings := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
4678: LD_ADDR_VAR 0 5
4682: PUSH
4683: LD_INT 22
4685: PUSH
4686: LD_INT 3
4688: PUSH
4689: EMPTY
4690: LIST
4691: LIST
4692: PUSH
4693: LD_INT 21
4695: PUSH
4696: LD_INT 3
4698: PUSH
4699: EMPTY
4700: LIST
4701: LIST
4702: PUSH
4703: EMPTY
4704: LIST
4705: LIST
4706: PPUSH
4707: CALL_OW 69
4711: ST_TO_ADDR
// ru_vehicles := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
4712: LD_ADDR_VAR 0 6
4716: PUSH
4717: LD_INT 22
4719: PUSH
4720: LD_INT 3
4722: PUSH
4723: EMPTY
4724: LIST
4725: LIST
4726: PUSH
4727: LD_INT 21
4729: PUSH
4730: LD_INT 2
4732: PUSH
4733: EMPTY
4734: LIST
4735: LIST
4736: PUSH
4737: EMPTY
4738: LIST
4739: LIST
4740: PPUSH
4741: CALL_OW 69
4745: ST_TO_ADDR
// ru_humans := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
4746: LD_ADDR_VAR 0 7
4750: PUSH
4751: LD_INT 22
4753: PUSH
4754: LD_INT 3
4756: PUSH
4757: EMPTY
4758: LIST
4759: LIST
4760: PUSH
4761: LD_INT 21
4763: PUSH
4764: LD_INT 1
4766: PUSH
4767: EMPTY
4768: LIST
4769: LIST
4770: PUSH
4771: EMPTY
4772: LIST
4773: LIST
4774: PPUSH
4775: CALL_OW 69
4779: ST_TO_ADDR
// ru_engs := UnitFilter ( ru_humans , [ f_class , 2 ] ) ;
4780: LD_ADDR_VAR 0 9
4784: PUSH
4785: LD_VAR 0 7
4789: PPUSH
4790: LD_INT 25
4792: PUSH
4793: LD_INT 2
4795: PUSH
4796: EMPTY
4797: LIST
4798: LIST
4799: PPUSH
4800: CALL_OW 72
4804: ST_TO_ADDR
// ru_mech := UnitFilter ( ru_humans , [ f_class , 3 ] ) ;
4805: LD_ADDR_VAR 0 10
4809: PUSH
4810: LD_VAR 0 7
4814: PPUSH
4815: LD_INT 25
4817: PUSH
4818: LD_INT 3
4820: PUSH
4821: EMPTY
4822: LIST
4823: LIST
4824: PPUSH
4825: CALL_OW 72
4829: ST_TO_ADDR
// ru_sci := UnitFilter ( ru_humans , [ f_class , 4 ] ) ;
4830: LD_ADDR_VAR 0 11
4834: PUSH
4835: LD_VAR 0 7
4839: PPUSH
4840: LD_INT 25
4842: PUSH
4843: LD_INT 4
4845: PUSH
4846: EMPTY
4847: LIST
4848: LIST
4849: PPUSH
4850: CALL_OW 72
4854: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) > 0 and ru_cargo = false then
4855: LD_INT 22
4857: PUSH
4858: LD_INT 3
4860: PUSH
4861: EMPTY
4862: LIST
4863: LIST
4864: PUSH
4865: LD_INT 34
4867: PUSH
4868: LD_INT 51
4870: PUSH
4871: EMPTY
4872: LIST
4873: LIST
4874: PUSH
4875: EMPTY
4876: LIST
4877: LIST
4878: PPUSH
4879: CALL_OW 69
4883: PUSH
4884: LD_INT 0
4886: GREATER
4887: PUSH
4888: LD_EXP 31
4892: PUSH
4893: LD_INT 0
4895: EQUAL
4896: AND
4897: IFFALSE 4937
// ru_cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
4899: LD_ADDR_EXP 31
4903: PUSH
4904: LD_INT 22
4906: PUSH
4907: LD_INT 3
4909: PUSH
4910: EMPTY
4911: LIST
4912: LIST
4913: PUSH
4914: LD_INT 34
4916: PUSH
4917: LD_INT 51
4919: PUSH
4920: EMPTY
4921: LIST
4922: LIST
4923: PUSH
4924: EMPTY
4925: LIST
4926: LIST
4927: PPUSH
4928: CALL_OW 69
4932: PUSH
4933: LD_INT 1
4935: ARRAY
4936: ST_TO_ADDR
// if ru_cargo then
4937: LD_EXP 31
4941: IFFALSE 5281
// begin if IsInArea ( ru_cargo , ru_base ) then
4943: LD_EXP 31
4947: PPUSH
4948: LD_INT 9
4950: PPUSH
4951: CALL_OW 308
4955: IFFALSE 5034
// begin if GetCargo ( ru_cargo , mat_cans ) = 0 then
4957: LD_EXP 31
4961: PPUSH
4962: LD_INT 1
4964: PPUSH
4965: CALL_OW 289
4969: PUSH
4970: LD_INT 0
4972: EQUAL
4973: IFFALSE 4991
// ComEnterUnit ( ru_cargo , ru_teleport ) else
4975: LD_EXP 31
4979: PPUSH
4980: LD_VAR 0 3
4984: PPUSH
4985: CALL_OW 120
4989: GO 5032
// if not HasTask ( ru_cargo ) then
4991: LD_EXP 31
4995: PPUSH
4996: CALL_OW 314
5000: NOT
5001: IFFALSE 5032
// ComMoveXY ( ru_cargo , GetX ( ru_depot ) , GetY ( ru_depot ) ) ;
5003: LD_EXP 31
5007: PPUSH
5008: LD_VAR 0 1
5012: PPUSH
5013: CALL_OW 250
5017: PPUSH
5018: LD_VAR 0 1
5022: PPUSH
5023: CALL_OW 251
5027: PPUSH
5028: CALL_OW 111
// end else
5032: GO 5281
// begin if not HasTask ( ru_cargo ) and GetCargo ( ru_cargo , mat_cans ) < 100 and not IsInArea ( ru_cargo , cargoa ) then
5034: LD_EXP 31
5038: PPUSH
5039: CALL_OW 314
5043: NOT
5044: PUSH
5045: LD_EXP 31
5049: PPUSH
5050: LD_INT 1
5052: PPUSH
5053: CALL_OW 289
5057: PUSH
5058: LD_INT 100
5060: LESS
5061: AND
5062: PUSH
5063: LD_EXP 31
5067: PPUSH
5068: LD_INT 10
5070: PPUSH
5071: CALL_OW 308
5075: NOT
5076: AND
5077: IFFALSE 5154
// begin cr := GetListOfCratesInArea ( ru_crates ) ;
5079: LD_ADDR_VAR 0 15
5083: PUSH
5084: LD_INT 11
5086: PPUSH
5087: CALL_OW 435
5091: ST_TO_ADDR
// if cr then
5092: LD_VAR 0 15
5096: IFFALSE 5127
// ComCollect ( ru_cargo , cr [ 1 ] , cr [ 2 ] ) else
5098: LD_EXP 31
5102: PPUSH
5103: LD_VAR 0 15
5107: PUSH
5108: LD_INT 1
5110: ARRAY
5111: PPUSH
5112: LD_VAR 0 15
5116: PUSH
5117: LD_INT 2
5119: ARRAY
5120: PPUSH
5121: CALL_OW 117
5125: GO 5154
// if not IsInArea ( ru_cargo , ru_crates ) then
5127: LD_EXP 31
5131: PPUSH
5132: LD_INT 11
5134: PPUSH
5135: CALL_OW 308
5139: NOT
5140: IFFALSE 5154
// ComMoveToArea ( ru_cargo , ru_crates ) ;
5142: LD_EXP 31
5146: PPUSH
5147: LD_INT 11
5149: PPUSH
5150: CALL_OW 113
// end ; if not HasTask ( ru_cargo ) and not IsInArea ( ru_cargo , cargoa ) and ( GetCargo ( ru_cargo , mat_cans ) = 100 or See ( your_side , ru_cargo ) ) then
5154: LD_EXP 31
5158: PPUSH
5159: CALL_OW 314
5163: NOT
5164: PUSH
5165: LD_EXP 31
5169: PPUSH
5170: LD_INT 10
5172: PPUSH
5173: CALL_OW 308
5177: NOT
5178: AND
5179: PUSH
5180: LD_EXP 31
5184: PPUSH
5185: LD_INT 1
5187: PPUSH
5188: CALL_OW 289
5192: PUSH
5193: LD_INT 100
5195: EQUAL
5196: PUSH
5197: LD_OWVAR 2
5201: PPUSH
5202: LD_EXP 31
5206: PPUSH
5207: CALL_OW 292
5211: OR
5212: AND
5213: IFFALSE 5227
// ComMoveToArea ( ru_cargo , cargoa ) ;
5215: LD_EXP 31
5219: PPUSH
5220: LD_INT 10
5222: PPUSH
5223: CALL_OW 113
// if IsInArea ( ru_cargo , cargoa ) and ru_barracks then
5227: LD_EXP 31
5231: PPUSH
5232: LD_INT 10
5234: PPUSH
5235: CALL_OW 308
5239: PUSH
5240: LD_VAR 0 8
5244: AND
5245: IFFALSE 5281
// ComSpaceShift ( UnitFilter ( ru_humans , [ f_class , class_bazooker ] ) [ 1 ] , 139 , 24 ) ;
5247: LD_VAR 0 7
5251: PPUSH
5252: LD_INT 25
5254: PUSH
5255: LD_INT 9
5257: PUSH
5258: EMPTY
5259: LIST
5260: LIST
5261: PPUSH
5262: CALL_OW 72
5266: PUSH
5267: LD_INT 1
5269: ARRAY
5270: PPUSH
5271: LD_INT 139
5273: PPUSH
5274: LD_INT 24
5276: PPUSH
5277: CALL_OW 153
// end ; end ; if ru_cargo = 0 and ru_factory and BuildingStatus ( ru_factory ) = bs_idle then
5281: LD_EXP 31
5285: PUSH
5286: LD_INT 0
5288: EQUAL
5289: PUSH
5290: LD_VAR 0 2
5294: AND
5295: PUSH
5296: LD_VAR 0 2
5300: PPUSH
5301: CALL_OW 461
5305: PUSH
5306: LD_INT 2
5308: EQUAL
5309: AND
5310: IFFALSE 5333
// ComConstruct ( ru_factory , ru_medium_wheeled , 3 , control_computer , ru_cargo_bay ) ;
5312: LD_VAR 0 2
5316: PPUSH
5317: LD_INT 21
5319: PPUSH
5320: LD_INT 3
5322: PPUSH
5323: LD_INT 3
5325: PPUSH
5326: LD_INT 51
5328: PPUSH
5329: CALL_OW 125
// if ru_factory and ru_vlist > 0 then
5333: LD_VAR 0 2
5337: PUSH
5338: LD_EXP 33
5342: PUSH
5343: LD_INT 0
5345: GREATER
5346: AND
5347: IFFALSE 5447
// begin if BuildingStatus ( ru_factory ) = bs_idle then
5349: LD_VAR 0 2
5353: PPUSH
5354: CALL_OW 461
5358: PUSH
5359: LD_INT 2
5361: EQUAL
5362: IFFALSE 5447
// begin ComConstruct ( ru_factory , ru_vlist [ 1 ] , ru_vlist [ 2 ] , ru_vlist [ 3 ] , ru_vlist [ 4 ] ) ;
5364: LD_VAR 0 2
5368: PPUSH
5369: LD_EXP 33
5373: PUSH
5374: LD_INT 1
5376: ARRAY
5377: PPUSH
5378: LD_EXP 33
5382: PUSH
5383: LD_INT 2
5385: ARRAY
5386: PPUSH
5387: LD_EXP 33
5391: PUSH
5392: LD_INT 3
5394: ARRAY
5395: PPUSH
5396: LD_EXP 33
5400: PUSH
5401: LD_INT 4
5403: ARRAY
5404: PPUSH
5405: CALL_OW 125
// for i = 1 to 4 do
5409: LD_ADDR_VAR 0 12
5413: PUSH
5414: DOUBLE
5415: LD_INT 1
5417: DEC
5418: ST_TO_ADDR
5419: LD_INT 4
5421: PUSH
5422: FOR_TO
5423: IFFALSE 5445
// ru_vlist := Delete ( ru_vlist , 1 ) ;
5425: LD_ADDR_EXP 33
5429: PUSH
5430: LD_EXP 33
5434: PPUSH
5435: LD_INT 1
5437: PPUSH
5438: CALL_OW 3
5442: ST_TO_ADDR
5443: GO 5422
5445: POP
5446: POP
// end ; end ; if BuildingStatus ( ru_lab ) = bs_idle and ru_sib_bomb then
5447: LD_INT 24
5449: PPUSH
5450: CALL_OW 461
5454: PUSH
5455: LD_INT 2
5457: EQUAL
5458: PUSH
5459: LD_EXP 4
5463: AND
5464: IFFALSE 5492
// if GetTech ( tech_sibfiss , 3 ) = state_enabled then
5466: LD_INT 25
5468: PPUSH
5469: LD_INT 3
5471: PPUSH
5472: CALL_OW 321
5476: PUSH
5477: LD_INT 1
5479: EQUAL
5480: IFFALSE 5492
// ComResearch ( ru_lab , tech_sibfiss ) ;
5482: LD_INT 24
5484: PPUSH
5485: LD_INT 25
5487: PPUSH
5488: CALL_OW 124
// if GetTech ( tech_sibfiss , 3 ) = state_researched and tick mod 5 5$00 = 0 then
5492: LD_INT 25
5494: PPUSH
5495: LD_INT 3
5497: PPUSH
5498: CALL_OW 321
5502: PUSH
5503: LD_INT 2
5505: EQUAL
5506: PUSH
5507: LD_OWVAR 1
5511: PUSH
5512: LD_INT 10500
5514: MOD
5515: PUSH
5516: LD_INT 0
5518: EQUAL
5519: AND
5520: IFFALSE 5558
// if BuildingStatus ( ru_factory ) = bs_idle then
5522: LD_VAR 0 2
5526: PPUSH
5527: CALL_OW 461
5531: PUSH
5532: LD_INT 2
5534: EQUAL
5535: IFFALSE 5558
// ComConstruct ( ru_factory , ru_heavy_wheeled , 3 , control_computer , ru_siberium_rocket ) ;
5537: LD_VAR 0 2
5541: PPUSH
5542: LD_INT 23
5544: PPUSH
5545: LD_INT 3
5547: PPUSH
5548: LD_INT 3
5550: PPUSH
5551: LD_INT 48
5553: PPUSH
5554: CALL_OW 125
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) > 0 then
5558: LD_INT 22
5560: PUSH
5561: LD_INT 3
5563: PUSH
5564: EMPTY
5565: LIST
5566: LIST
5567: PUSH
5568: LD_INT 34
5570: PUSH
5571: LD_INT 48
5573: PUSH
5574: EMPTY
5575: LIST
5576: LIST
5577: PUSH
5578: EMPTY
5579: LIST
5580: LIST
5581: PPUSH
5582: CALL_OW 69
5586: PUSH
5587: LD_INT 0
5589: GREATER
5590: IFFALSE 5964
// begin sib_bomb := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) [ 1 ] ;
5592: LD_ADDR_VAR 0 16
5596: PUSH
5597: LD_INT 22
5599: PUSH
5600: LD_INT 3
5602: PUSH
5603: EMPTY
5604: LIST
5605: LIST
5606: PUSH
5607: LD_INT 34
5609: PUSH
5610: LD_INT 48
5612: PUSH
5613: EMPTY
5614: LIST
5615: LIST
5616: PUSH
5617: EMPTY
5618: LIST
5619: LIST
5620: PPUSH
5621: CALL_OW 69
5625: PUSH
5626: LD_INT 1
5628: ARRAY
5629: ST_TO_ADDR
// if IsInArea ( sib_bomb , ru_base ) then
5630: LD_VAR 0 16
5634: PPUSH
5635: LD_INT 9
5637: PPUSH
5638: CALL_OW 308
5642: IFFALSE 5660
// ComEnterUnit ( sib_bomb , ru_teleport ) else
5644: LD_VAR 0 16
5648: PPUSH
5649: LD_VAR 0 3
5653: PPUSH
5654: CALL_OW 120
5658: GO 5964
// if not HasTask ( sib_bomb ) then
5660: LD_VAR 0 16
5664: PPUSH
5665: CALL_OW 314
5669: NOT
5670: IFFALSE 5964
// if GetLives ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) > 250 then
5672: LD_INT 22
5674: PUSH
5675: LD_OWVAR 2
5679: PUSH
5680: EMPTY
5681: LIST
5682: LIST
5683: PUSH
5684: LD_INT 30
5686: PUSH
5687: LD_INT 1
5689: PUSH
5690: EMPTY
5691: LIST
5692: LIST
5693: PUSH
5694: EMPTY
5695: LIST
5696: LIST
5697: PPUSH
5698: CALL_OW 69
5702: PUSH
5703: LD_INT 1
5705: ARRAY
5706: PPUSH
5707: CALL_OW 256
5711: PUSH
5712: LD_INT 250
5714: GREATER
5715: IFFALSE 5808
// ComAttackPlace ( sib_bomb , GetX ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) , GetY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ) else
5717: LD_VAR 0 16
5721: PPUSH
5722: LD_INT 22
5724: PUSH
5725: LD_OWVAR 2
5729: PUSH
5730: EMPTY
5731: LIST
5732: LIST
5733: PUSH
5734: LD_INT 30
5736: PUSH
5737: LD_INT 1
5739: PUSH
5740: EMPTY
5741: LIST
5742: LIST
5743: PUSH
5744: EMPTY
5745: LIST
5746: LIST
5747: PPUSH
5748: CALL_OW 69
5752: PUSH
5753: LD_INT 1
5755: ARRAY
5756: PPUSH
5757: CALL_OW 250
5761: PPUSH
5762: LD_INT 22
5764: PUSH
5765: LD_OWVAR 2
5769: PUSH
5770: EMPTY
5771: LIST
5772: LIST
5773: PUSH
5774: LD_INT 30
5776: PUSH
5777: LD_INT 1
5779: PUSH
5780: EMPTY
5781: LIST
5782: LIST
5783: PUSH
5784: EMPTY
5785: LIST
5786: LIST
5787: PPUSH
5788: CALL_OW 69
5792: PUSH
5793: LD_INT 1
5795: ARRAY
5796: PPUSH
5797: CALL_OW 251
5801: PPUSH
5802: CALL_OW 116
5806: GO 5964
// if FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) > 0 then
5808: LD_INT 22
5810: PUSH
5811: LD_OWVAR 2
5815: PUSH
5816: EMPTY
5817: LIST
5818: LIST
5819: PUSH
5820: LD_INT 21
5822: PUSH
5823: LD_INT 3
5825: PUSH
5826: EMPTY
5827: LIST
5828: LIST
5829: PUSH
5830: EMPTY
5831: LIST
5832: LIST
5833: PPUSH
5834: CALL_OW 69
5838: PUSH
5839: LD_INT 0
5841: GREATER
5842: IFFALSE 5935
// ComAttackPlace ( sib_bomb , GetX ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) [ 1 ] ) , GetY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) [ 1 ] ) ) else
5844: LD_VAR 0 16
5848: PPUSH
5849: LD_INT 22
5851: PUSH
5852: LD_OWVAR 2
5856: PUSH
5857: EMPTY
5858: LIST
5859: LIST
5860: PUSH
5861: LD_INT 21
5863: PUSH
5864: LD_INT 3
5866: PUSH
5867: EMPTY
5868: LIST
5869: LIST
5870: PUSH
5871: EMPTY
5872: LIST
5873: LIST
5874: PPUSH
5875: CALL_OW 69
5879: PUSH
5880: LD_INT 1
5882: ARRAY
5883: PPUSH
5884: CALL_OW 250
5888: PPUSH
5889: LD_INT 22
5891: PUSH
5892: LD_OWVAR 2
5896: PUSH
5897: EMPTY
5898: LIST
5899: LIST
5900: PUSH
5901: LD_INT 21
5903: PUSH
5904: LD_INT 3
5906: PUSH
5907: EMPTY
5908: LIST
5909: LIST
5910: PUSH
5911: EMPTY
5912: LIST
5913: LIST
5914: PPUSH
5915: CALL_OW 69
5919: PUSH
5920: LD_INT 1
5922: ARRAY
5923: PPUSH
5924: CALL_OW 251
5928: PPUSH
5929: CALL_OW 116
5933: GO 5964
// ComAttackPlace ( sib_bomb , GetX ( player_commander ) , GetY ( player_commander ) ) ;
5935: LD_VAR 0 16
5939: PPUSH
5940: LD_EXP 11
5944: PPUSH
5945: CALL_OW 250
5949: PPUSH
5950: LD_EXP 11
5954: PPUSH
5955: CALL_OW 251
5959: PPUSH
5960: CALL_OW 116
// end ; if ru_can_attack then
5964: LD_EXP 3
5968: IFFALSE 6116
// if ru_time > 0 0$00 then
5970: LD_EXP 35
5974: PUSH
5975: LD_INT 0
5977: GREATER
5978: IFFALSE 5996
// ru_time := ru_time - 0 0$03 else
5980: LD_ADDR_EXP 35
5984: PUSH
5985: LD_EXP 35
5989: PUSH
5990: LD_INT 105
5992: MINUS
5993: ST_TO_ADDR
5994: GO 6116
// begin ru_time := Rand ( 9 9$39 , 14 14$39 ) ;
5996: LD_ADDR_EXP 35
6000: PUSH
6001: LD_INT 20265
6003: PPUSH
6004: LD_INT 30765
6006: PPUSH
6007: CALL_OW 12
6011: ST_TO_ADDR
// for i = 1 to ru_amount do
6012: LD_ADDR_VAR 0 12
6016: PUSH
6017: DOUBLE
6018: LD_INT 1
6020: DEC
6021: ST_TO_ADDR
6022: LD_EXP 34
6026: PUSH
6027: FOR_TO
6028: IFFALSE 6114
// begin ru_vlist := ru_vlist ^ ru_heavy_wheeled ;
6030: LD_ADDR_EXP 33
6034: PUSH
6035: LD_EXP 33
6039: PUSH
6040: LD_INT 23
6042: ADD
6043: ST_TO_ADDR
// ru_vlist := ru_vlist ^ engine_siberite ;
6044: LD_ADDR_EXP 33
6048: PUSH
6049: LD_EXP 33
6053: PUSH
6054: LD_INT 3
6056: ADD
6057: ST_TO_ADDR
// ru_vlist := ru_vlist ^ control_computer ;
6058: LD_ADDR_EXP 33
6062: PUSH
6063: LD_EXP 33
6067: PUSH
6068: LD_INT 3
6070: ADD
6071: ST_TO_ADDR
// ru_vlist := ru_vlist ^ [ ru_heavy_gun , ru_rocket_launcher , ru_rocket ] [ MultiRand ( 1 , 2 , 3 ) ] ;
6072: LD_ADDR_EXP 33
6076: PUSH
6077: LD_EXP 33
6081: PUSH
6082: LD_INT 46
6084: PUSH
6085: LD_INT 45
6087: PUSH
6088: LD_INT 47
6090: PUSH
6091: EMPTY
6092: LIST
6093: LIST
6094: LIST
6095: PUSH
6096: LD_INT 1
6098: PPUSH
6099: LD_INT 2
6101: PPUSH
6102: LD_INT 3
6104: PPUSH
6105: CALL_OW 14
6109: ARRAY
6110: ADD
6111: ST_TO_ADDR
// end ;
6112: GO 6027
6114: POP
6115: POP
// end ; if UnitFilter ( ru_bunkers , [ f_bweapon , 0 ] ) > 0 then
6116: LD_VAR 0 4
6120: PPUSH
6121: LD_INT 35
6123: PUSH
6124: LD_INT 0
6126: PUSH
6127: EMPTY
6128: LIST
6129: LIST
6130: PPUSH
6131: CALL_OW 72
6135: PUSH
6136: LD_INT 0
6138: GREATER
6139: IFFALSE 6187
// if BuildingStatus ( ru_factory ) = bs_idle then
6141: LD_VAR 0 2
6145: PPUSH
6146: CALL_OW 461
6150: PUSH
6151: LD_INT 2
6153: EQUAL
6154: IFFALSE 6187
// ComPlaceWeapon ( UnitFilter ( ru_bunkers , [ f_bweapon , 0 ] ) [ 1 ] , ru_rocket ) ;
6156: LD_VAR 0 4
6160: PPUSH
6161: LD_INT 35
6163: PUSH
6164: LD_INT 0
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: PPUSH
6171: CALL_OW 72
6175: PUSH
6176: LD_INT 1
6178: ARRAY
6179: PPUSH
6180: LD_INT 47
6182: PPUSH
6183: CALL_OW 148
// if ru_force >= ru_amount then
6187: LD_EXP 29
6191: PUSH
6192: LD_EXP 34
6196: GREATEREQUAL
6197: IFFALSE 6208
// RaiseSailEvent ( event_russian_attack ) ;
6199: LD_EXP 22
6203: PPUSH
6204: CALL_OW 427
// if ru_engs > 0 then
6208: LD_VAR 0 9
6212: PUSH
6213: LD_INT 0
6215: GREATER
6216: IFFALSE 6618
// begin if UnitFilter ( ru_buildings , [ f_not , [ f_lives , 1000 ] ] ) > 0 then
6218: LD_VAR 0 5
6222: PPUSH
6223: LD_INT 3
6225: PUSH
6226: LD_INT 24
6228: PUSH
6229: LD_INT 1000
6231: PUSH
6232: EMPTY
6233: LIST
6234: LIST
6235: PUSH
6236: EMPTY
6237: LIST
6238: LIST
6239: PPUSH
6240: CALL_OW 72
6244: PUSH
6245: LD_INT 0
6247: GREATER
6248: IFFALSE 6403
// begin filter := UnitFilter ( ru_buildings , [ f_not , [ f_lives , 1000 ] ] ) ;
6250: LD_ADDR_VAR 0 14
6254: PUSH
6255: LD_VAR 0 5
6259: PPUSH
6260: LD_INT 3
6262: PUSH
6263: LD_INT 24
6265: PUSH
6266: LD_INT 1000
6268: PUSH
6269: EMPTY
6270: LIST
6271: LIST
6272: PUSH
6273: EMPTY
6274: LIST
6275: LIST
6276: PPUSH
6277: CALL_OW 72
6281: ST_TO_ADDR
// for i = 1 to ru_engs do
6282: LD_ADDR_VAR 0 12
6286: PUSH
6287: DOUBLE
6288: LD_INT 1
6290: DEC
6291: ST_TO_ADDR
6292: LD_VAR 0 9
6296: PUSH
6297: FOR_TO
6298: IFFALSE 6399
// begin if IsInUnit ( ru_engs [ i ] ) then
6300: LD_VAR 0 9
6304: PUSH
6305: LD_VAR 0 12
6309: ARRAY
6310: PPUSH
6311: CALL_OW 310
6315: IFFALSE 6334
// ComExitBuilding ( ru_engs [ i ] ) else
6317: LD_VAR 0 9
6321: PUSH
6322: LD_VAR 0 12
6326: ARRAY
6327: PPUSH
6328: CALL_OW 122
6332: GO 6397
// if not HasTask ( ru_engs [ i ] ) and GetLives ( ru_engs [ i ] ) > 600 then
6334: LD_VAR 0 9
6338: PUSH
6339: LD_VAR 0 12
6343: ARRAY
6344: PPUSH
6345: CALL_OW 314
6349: NOT
6350: PUSH
6351: LD_VAR 0 9
6355: PUSH
6356: LD_VAR 0 12
6360: ARRAY
6361: PPUSH
6362: CALL_OW 256
6366: PUSH
6367: LD_INT 600
6369: GREATER
6370: AND
6371: IFFALSE 6397
// ComRepairBuilding ( ru_engs [ i ] , filter [ 1 ] ) ;
6373: LD_VAR 0 9
6377: PUSH
6378: LD_VAR 0 12
6382: ARRAY
6383: PPUSH
6384: LD_VAR 0 14
6388: PUSH
6389: LD_INT 1
6391: ARRAY
6392: PPUSH
6393: CALL_OW 130
// end ;
6397: GO 6297
6399: POP
6400: POP
// end else
6401: GO 6618
// begin if ru_blist = 0 then
6403: LD_EXP 32
6407: PUSH
6408: LD_INT 0
6410: EQUAL
6411: IFFALSE 6493
// begin for i = 1 to ru_engs do
6413: LD_ADDR_VAR 0 12
6417: PUSH
6418: DOUBLE
6419: LD_INT 1
6421: DEC
6422: ST_TO_ADDR
6423: LD_VAR 0 9
6427: PUSH
6428: FOR_TO
6429: IFFALSE 6489
// if not HasTask ( ru_engs [ i ] ) and not IsInUnit ( ru_engs [ i ] ) then
6431: LD_VAR 0 9
6435: PUSH
6436: LD_VAR 0 12
6440: ARRAY
6441: PPUSH
6442: CALL_OW 314
6446: NOT
6447: PUSH
6448: LD_VAR 0 9
6452: PUSH
6453: LD_VAR 0 12
6457: ARRAY
6458: PPUSH
6459: CALL_OW 310
6463: NOT
6464: AND
6465: IFFALSE 6487
// ComEnterUnit ( ru_engs [ i ] , ru_depot ) ;
6467: LD_VAR 0 9
6471: PUSH
6472: LD_VAR 0 12
6476: ARRAY
6477: PPUSH
6478: LD_VAR 0 1
6482: PPUSH
6483: CALL_OW 120
6487: GO 6428
6489: POP
6490: POP
// end else
6491: GO 6618
// begin for i = 1 to ru_engs do
6493: LD_ADDR_VAR 0 12
6497: PUSH
6498: DOUBLE
6499: LD_INT 1
6501: DEC
6502: ST_TO_ADDR
6503: LD_VAR 0 9
6507: PUSH
6508: FOR_TO
6509: IFFALSE 6616
// begin if IsInUnit ( ru_engs [ i ] ) then
6511: LD_VAR 0 9
6515: PUSH
6516: LD_VAR 0 12
6520: ARRAY
6521: PPUSH
6522: CALL_OW 310
6526: IFFALSE 6545
// ComExitBuilding ( ru_engs [ i ] ) else
6528: LD_VAR 0 9
6532: PUSH
6533: LD_VAR 0 12
6537: ARRAY
6538: PPUSH
6539: CALL_OW 122
6543: GO 6614
// if not HasTask ( ru_engs [ i ] ) then
6545: LD_VAR 0 9
6549: PUSH
6550: LD_VAR 0 12
6554: ARRAY
6555: PPUSH
6556: CALL_OW 314
6560: NOT
6561: IFFALSE 6614
// ComBuild ( ru_engs [ i ] , ru_blist [ 1 ] , ru_blist [ 2 ] , ru_blist [ 3 ] , ru_blist [ 4 ] ) ;
6563: LD_VAR 0 9
6567: PUSH
6568: LD_VAR 0 12
6572: ARRAY
6573: PPUSH
6574: LD_EXP 32
6578: PUSH
6579: LD_INT 1
6581: ARRAY
6582: PPUSH
6583: LD_EXP 32
6587: PUSH
6588: LD_INT 2
6590: ARRAY
6591: PPUSH
6592: LD_EXP 32
6596: PUSH
6597: LD_INT 3
6599: ARRAY
6600: PPUSH
6601: LD_EXP 32
6605: PUSH
6606: LD_INT 4
6608: ARRAY
6609: PPUSH
6610: CALL_OW 145
// end ;
6614: GO 6508
6616: POP
6617: POP
// end ; end ; end ; end ;
6618: PPOPN 16
6620: END
// every 3 3$40 + 0 0$45 trigger russian_prepared and GetListOfCratesInArea ( ru_crates ) < 10 do
6621: LD_EXP 2
6625: PUSH
6626: LD_INT 11
6628: PPUSH
6629: CALL_OW 435
6633: PUSH
6634: LD_INT 10
6636: LESS
6637: AND
6638: IFFALSE 6701
6640: GO 6642
6642: DISABLE
// begin enable ;
6643: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , ru_crates , true ) ;
6644: LD_INT 1
6646: PPUSH
6647: LD_INT 5
6649: PPUSH
6650: CALL_OW 12
6654: PPUSH
6655: LD_INT 11
6657: PPUSH
6658: LD_INT 1
6660: PPUSH
6661: CALL_OW 55
// Wait ( Rand ( 0 0$43 , 1 1$00 ) ) ;
6665: LD_INT 1505
6667: PPUSH
6668: LD_INT 2100
6670: PPUSH
6671: CALL_OW 12
6675: PPUSH
6676: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 5 ) , ru_crates , true ) ;
6680: LD_INT 1
6682: PPUSH
6683: LD_INT 5
6685: PPUSH
6686: CALL_OW 12
6690: PPUSH
6691: LD_INT 11
6693: PPUSH
6694: LD_INT 1
6696: PPUSH
6697: CALL_OW 55
// end ;
6701: END
// every 15 15$00 + 25 25$00 trigger not ru_sib_bomb do var i , tmp ;
6702: LD_EXP 4
6706: NOT
6707: IFFALSE 6822
6709: GO 6711
6711: DISABLE
6712: LD_INT 0
6714: PPUSH
6715: PPUSH
// begin enable ;
6716: ENABLE
// i := Rand ( 0 , 100 ) ;
6717: LD_ADDR_VAR 0 1
6721: PUSH
6722: LD_INT 0
6724: PPUSH
6725: LD_INT 100
6727: PPUSH
6728: CALL_OW 12
6732: ST_TO_ADDR
// case your_side of 1 :
6733: LD_OWVAR 2
6737: PUSH
6738: LD_INT 1
6740: DOUBLE
6741: EQUAL
6742: IFTRUE 6746
6744: GO 6757
6746: POP
// tmp := 10 ; 2 :
6747: LD_ADDR_VAR 0 2
6751: PUSH
6752: LD_INT 10
6754: ST_TO_ADDR
6755: GO 6796
6757: LD_INT 2
6759: DOUBLE
6760: EQUAL
6761: IFTRUE 6765
6763: GO 6776
6765: POP
// tmp := 0 ; 7 :
6766: LD_ADDR_VAR 0 2
6770: PUSH
6771: LD_INT 0
6773: ST_TO_ADDR
6774: GO 6796
6776: LD_INT 7
6778: DOUBLE
6779: EQUAL
6780: IFTRUE 6784
6782: GO 6795
6784: POP
// tmp := 15 ; end ;
6785: LD_ADDR_VAR 0 2
6789: PUSH
6790: LD_INT 15
6792: ST_TO_ADDR
6793: GO 6796
6795: POP
// if i < chance_to_bomb + tmp then
6796: LD_VAR 0 1
6800: PUSH
6801: LD_EXP 5
6805: PUSH
6806: LD_VAR 0 2
6810: PLUS
6811: LESS
6812: IFFALSE 6822
// ru_sib_bomb := true ;
6814: LD_ADDR_EXP 4
6818: PUSH
6819: LD_INT 1
6821: ST_TO_ADDR
// end ;
6822: PPOPN 2
6824: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_weapon , us_siberium_rocket ] ] ) do
6825: LD_INT 22
6827: PUSH
6828: LD_OWVAR 2
6832: PUSH
6833: EMPTY
6834: LIST
6835: LIST
6836: PUSH
6837: LD_INT 34
6839: PUSH
6840: LD_INT 8
6842: PUSH
6843: EMPTY
6844: LIST
6845: LIST
6846: PUSH
6847: EMPTY
6848: LIST
6849: LIST
6850: PPUSH
6851: CALL_OW 69
6855: IFFALSE 6868
6857: GO 6859
6859: DISABLE
// begin ru_sib_bomb := true ;
6860: LD_ADDR_EXP 4
6864: PUSH
6865: LD_INT 1
6867: ST_TO_ADDR
// end ;
6868: END
// every 10 10$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) do var i ;
6869: LD_INT 22
6871: PUSH
6872: LD_INT 3
6874: PUSH
6875: EMPTY
6876: LIST
6877: LIST
6878: PUSH
6879: LD_INT 30
6881: PUSH
6882: LD_INT 34
6884: PUSH
6885: EMPTY
6886: LIST
6887: LIST
6888: PUSH
6889: EMPTY
6890: LIST
6891: LIST
6892: PPUSH
6893: CALL_OW 69
6897: IFFALSE 6996
6899: GO 6901
6901: DISABLE
6902: LD_INT 0
6904: PPUSH
// begin enable ;
6905: ENABLE
// i := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
6906: LD_ADDR_VAR 0 1
6910: PUSH
6911: LD_INT 1
6913: PUSH
6914: LD_INT 3
6916: PUSH
6917: EMPTY
6918: LIST
6919: LIST
6920: PUSH
6921: LD_INT 1
6923: PPUSH
6924: LD_INT 2
6926: PPUSH
6927: CALL_OW 12
6931: ARRAY
6932: ST_TO_ADDR
// TeleportExit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] , ru_teleport_exit [ i ] , ru_teleport_exit [ i + 1 ] ) ;
6933: LD_INT 22
6935: PUSH
6936: LD_INT 3
6938: PUSH
6939: EMPTY
6940: LIST
6941: LIST
6942: PUSH
6943: LD_INT 30
6945: PUSH
6946: LD_INT 34
6948: PUSH
6949: EMPTY
6950: LIST
6951: LIST
6952: PUSH
6953: EMPTY
6954: LIST
6955: LIST
6956: PPUSH
6957: CALL_OW 69
6961: PUSH
6962: LD_INT 1
6964: ARRAY
6965: PPUSH
6966: LD_EXP 36
6970: PUSH
6971: LD_VAR 0 1
6975: ARRAY
6976: PPUSH
6977: LD_EXP 36
6981: PUSH
6982: LD_VAR 0 1
6986: PUSH
6987: LD_INT 1
6989: PLUS
6990: ARRAY
6991: PPUSH
6992: CALL_OW 243
// end ;
6996: PPOPN 1
6998: END
// every 12 12$00 trigger tick >= [ 28 28$00 , 25 25$00 ] [ Difficulty - 1 ] and Difficulty > 1 and FilterAllUnits ( [ f_side , 3 ] ) do var i , un , tmp , p , path ;
6999: LD_OWVAR 1
7003: PUSH
7004: LD_INT 58800
7006: PUSH
7007: LD_INT 52500
7009: PUSH
7010: EMPTY
7011: LIST
7012: LIST
7013: PUSH
7014: LD_OWVAR 67
7018: PUSH
7019: LD_INT 1
7021: MINUS
7022: ARRAY
7023: GREATEREQUAL
7024: PUSH
7025: LD_OWVAR 67
7029: PUSH
7030: LD_INT 1
7032: GREATER
7033: AND
7034: PUSH
7035: LD_INT 22
7037: PUSH
7038: LD_INT 3
7040: PUSH
7041: EMPTY
7042: LIST
7043: LIST
7044: PPUSH
7045: CALL_OW 69
7049: AND
7050: IFFALSE 7474
7052: GO 7054
7054: DISABLE
7055: LD_INT 0
7057: PPUSH
7058: PPUSH
7059: PPUSH
7060: PPUSH
7061: PPUSH
// begin enable ;
7062: ENABLE
// if tick > 60 60$00 then
7063: LD_OWVAR 1
7067: PUSH
7068: LD_INT 126000
7070: GREATER
7071: IFFALSE 7074
// disable ;
7073: DISABLE
// tmp := [ ] ;
7074: LD_ADDR_VAR 0 3
7078: PUSH
7079: EMPTY
7080: ST_TO_ADDR
// for i := 1 to 8 do
7081: LD_ADDR_VAR 0 1
7085: PUSH
7086: DOUBLE
7087: LD_INT 1
7089: DEC
7090: ST_TO_ADDR
7091: LD_INT 8
7093: PUSH
7094: FOR_TO
7095: IFFALSE 7256
// begin uc_side := 6 ;
7097: LD_ADDR_OWVAR 20
7101: PUSH
7102: LD_INT 6
7104: ST_TO_ADDR
// uc_nation := 3 ;
7105: LD_ADDR_OWVAR 21
7109: PUSH
7110: LD_INT 3
7112: ST_TO_ADDR
// vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod 3 + 1 ] ;
7113: LD_ADDR_OWVAR 37
7117: PUSH
7118: LD_INT 21
7120: PUSH
7121: LD_INT 23
7123: PUSH
7124: LD_INT 24
7126: PUSH
7127: EMPTY
7128: LIST
7129: LIST
7130: LIST
7131: PUSH
7132: LD_VAR 0 1
7136: PUSH
7137: LD_INT 3
7139: MOD
7140: PUSH
7141: LD_INT 1
7143: PLUS
7144: ARRAY
7145: ST_TO_ADDR
// vc_engine := engine_siberite ;
7146: LD_ADDR_OWVAR 39
7150: PUSH
7151: LD_INT 3
7153: ST_TO_ADDR
// vc_control := control_computer ;
7154: LD_ADDR_OWVAR 38
7158: PUSH
7159: LD_INT 3
7161: ST_TO_ADDR
// vc_weapon := [ ru_rocket_launcher , ru_flamethrower , ru_rocket ] [ i mod 3 + 1 ] ;
7162: LD_ADDR_OWVAR 40
7166: PUSH
7167: LD_INT 45
7169: PUSH
7170: LD_EXP 68
7174: PUSH
7175: LD_INT 47
7177: PUSH
7178: EMPTY
7179: LIST
7180: LIST
7181: LIST
7182: PUSH
7183: LD_VAR 0 1
7187: PUSH
7188: LD_INT 3
7190: MOD
7191: PUSH
7192: LD_INT 1
7194: PLUS
7195: ARRAY
7196: ST_TO_ADDR
// un := CreateVehicle ;
7197: LD_ADDR_VAR 0 2
7201: PUSH
7202: CALL_OW 45
7206: ST_TO_ADDR
// SetDir ( un , 2 ) ;
7207: LD_VAR 0 2
7211: PPUSH
7212: LD_INT 2
7214: PPUSH
7215: CALL_OW 233
// PlaceUnitArea ( un , start_north , false ) ;
7219: LD_VAR 0 2
7223: PPUSH
7224: LD_INT 1
7226: PPUSH
7227: LD_INT 0
7229: PPUSH
7230: CALL_OW 49
// tmp := Join ( tmp , un ) ;
7234: LD_ADDR_VAR 0 3
7238: PUSH
7239: LD_VAR 0 3
7243: PPUSH
7244: LD_VAR 0 2
7248: PPUSH
7249: CALL 75482 0 2
7253: ST_TO_ADDR
// end ;
7254: GO 7094
7256: POP
7257: POP
// if FilterAllUnits ( [ [ f_side , your_side ] , [ f_distxy , 58 , 15 , 18 ] ] ) > 1 then
7258: LD_INT 22
7260: PUSH
7261: LD_OWVAR 2
7265: PUSH
7266: EMPTY
7267: LIST
7268: LIST
7269: PUSH
7270: LD_INT 92
7272: PUSH
7273: LD_INT 58
7275: PUSH
7276: LD_INT 15
7278: PUSH
7279: LD_INT 18
7281: PUSH
7282: EMPTY
7283: LIST
7284: LIST
7285: LIST
7286: LIST
7287: PUSH
7288: EMPTY
7289: LIST
7290: LIST
7291: PPUSH
7292: CALL_OW 69
7296: PUSH
7297: LD_INT 1
7299: GREATER
7300: IFFALSE 7312
// p := 2 else
7302: LD_ADDR_VAR 0 4
7306: PUSH
7307: LD_INT 2
7309: ST_TO_ADDR
7310: GO 7320
// p := 1 ;
7312: LD_ADDR_VAR 0 4
7316: PUSH
7317: LD_INT 1
7319: ST_TO_ADDR
// case p of 1 :
7320: LD_VAR 0 4
7324: PUSH
7325: LD_INT 1
7327: DOUBLE
7328: EQUAL
7329: IFTRUE 7333
7331: GO 7398
7333: POP
// path := [ [ 29 , 29 ] , [ 49 , 70 ] , [ 49 , 70 ] , [ 61 , 110 ] , [ 74 , 129 ] ] ; 2 :
7334: LD_ADDR_VAR 0 5
7338: PUSH
7339: LD_INT 29
7341: PUSH
7342: LD_INT 29
7344: PUSH
7345: EMPTY
7346: LIST
7347: LIST
7348: PUSH
7349: LD_INT 49
7351: PUSH
7352: LD_INT 70
7354: PUSH
7355: EMPTY
7356: LIST
7357: LIST
7358: PUSH
7359: LD_INT 49
7361: PUSH
7362: LD_INT 70
7364: PUSH
7365: EMPTY
7366: LIST
7367: LIST
7368: PUSH
7369: LD_INT 61
7371: PUSH
7372: LD_INT 110
7374: PUSH
7375: EMPTY
7376: LIST
7377: LIST
7378: PUSH
7379: LD_INT 74
7381: PUSH
7382: LD_INT 129
7384: PUSH
7385: EMPTY
7386: LIST
7387: LIST
7388: PUSH
7389: EMPTY
7390: LIST
7391: LIST
7392: LIST
7393: LIST
7394: LIST
7395: ST_TO_ADDR
7396: GO 7450
7398: LD_INT 2
7400: DOUBLE
7401: EQUAL
7402: IFTRUE 7406
7404: GO 7449
7406: POP
// path := [ [ 24 , 23 ] , [ 49 , 39 ] , [ 52 , 27 ] ] ; end ;
7407: LD_ADDR_VAR 0 5
7411: PUSH
7412: LD_INT 24
7414: PUSH
7415: LD_INT 23
7417: PUSH
7418: EMPTY
7419: LIST
7420: LIST
7421: PUSH
7422: LD_INT 49
7424: PUSH
7425: LD_INT 39
7427: PUSH
7428: EMPTY
7429: LIST
7430: LIST
7431: PUSH
7432: LD_INT 52
7434: PUSH
7435: LD_INT 27
7437: PUSH
7438: EMPTY
7439: LIST
7440: LIST
7441: PUSH
7442: EMPTY
7443: LIST
7444: LIST
7445: LIST
7446: ST_TO_ADDR
7447: GO 7450
7449: POP
// repeat wait ( 0 0$1 ) ;
7450: LD_INT 35
7452: PPUSH
7453: CALL_OW 67
// until not AgressiveMove ( tmp , path ) ;
7457: LD_VAR 0 3
7461: PPUSH
7462: LD_VAR 0 5
7466: PPUSH
7467: CALL 78078 0 2
7471: NOT
7472: IFFALSE 7450
// end ;
7474: PPOPN 5
7476: END
// every 30 30$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) do var ru_depot ;
7477: LD_INT 22
7479: PUSH
7480: LD_INT 3
7482: PUSH
7483: EMPTY
7484: LIST
7485: LIST
7486: PUSH
7487: LD_INT 30
7489: PUSH
7490: LD_INT 1
7492: PUSH
7493: EMPTY
7494: LIST
7495: LIST
7496: PUSH
7497: EMPTY
7498: LIST
7499: LIST
7500: PPUSH
7501: CALL_OW 69
7505: IFFALSE 7592
7507: GO 7509
7509: DISABLE
7510: LD_INT 0
7512: PPUSH
// begin enable ;
7513: ENABLE
// ru_depot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
7514: LD_ADDR_VAR 0 1
7518: PUSH
7519: LD_INT 22
7521: PUSH
7522: LD_INT 3
7524: PUSH
7525: EMPTY
7526: LIST
7527: LIST
7528: PUSH
7529: LD_INT 30
7531: PUSH
7532: LD_INT 1
7534: PUSH
7535: EMPTY
7536: LIST
7537: LIST
7538: PUSH
7539: EMPTY
7540: LIST
7541: LIST
7542: PPUSH
7543: CALL_OW 69
7547: PUSH
7548: LD_INT 1
7550: ARRAY
7551: ST_TO_ADDR
// AddResourceType ( GetBase ( ru_depot ) , mat_cans , 6000 ) ;
7552: LD_VAR 0 1
7556: PPUSH
7557: CALL_OW 274
7561: PPUSH
7562: LD_INT 1
7564: PPUSH
7565: LD_INT 6000
7567: PPUSH
7568: CALL_OW 276
// AddResourceType ( GetBase ( ru_depot ) , mat_oil , 600 ) ;
7572: LD_VAR 0 1
7576: PPUSH
7577: CALL_OW 274
7581: PPUSH
7582: LD_INT 2
7584: PPUSH
7585: LD_INT 600
7587: PPUSH
7588: CALL_OW 276
// end ;
7592: PPOPN 1
7594: END
// export function RussianAttack ( ) ; var path , units , p , i , teleport ; begin
7595: LD_INT 0
7597: PPUSH
7598: PPUSH
7599: PPUSH
7600: PPUSH
7601: PPUSH
7602: PPUSH
// units := ru_force ;
7603: LD_ADDR_VAR 0 3
7607: PUSH
7608: LD_EXP 29
7612: ST_TO_ADDR
// teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) ;
7613: LD_ADDR_VAR 0 6
7617: PUSH
7618: LD_INT 22
7620: PUSH
7621: LD_INT 3
7623: PUSH
7624: EMPTY
7625: LIST
7626: LIST
7627: PUSH
7628: LD_INT 30
7630: PUSH
7631: LD_INT 34
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: PUSH
7638: EMPTY
7639: LIST
7640: LIST
7641: PPUSH
7642: CALL_OW 69
7646: ST_TO_ADDR
// ru_force := [ ] ;
7647: LD_ADDR_EXP 29
7651: PUSH
7652: EMPTY
7653: ST_TO_ADDR
// if not teleport then
7654: LD_VAR 0 6
7658: NOT
7659: IFFALSE 7701
// begin for i in units do
7661: LD_ADDR_VAR 0 5
7665: PUSH
7666: LD_VAR 0 3
7670: PUSH
7671: FOR_IN
7672: IFFALSE 7697
// TeleportUnit ( i , 150 , 65 , 12 , true ) ;
7674: LD_VAR 0 5
7678: PPUSH
7679: LD_INT 150
7681: PPUSH
7682: LD_INT 65
7684: PPUSH
7685: LD_INT 12
7687: PPUSH
7688: LD_INT 1
7690: PPUSH
7691: CALL_OW 483
7695: GO 7671
7697: POP
7698: POP
// end else
7699: GO 7796
// begin repeat for i = 1 to units do
7701: LD_ADDR_VAR 0 5
7705: PUSH
7706: DOUBLE
7707: LD_INT 1
7709: DEC
7710: ST_TO_ADDR
7711: LD_VAR 0 3
7715: PUSH
7716: FOR_TO
7717: IFFALSE 7765
// if IsInArea ( units [ i ] , ru_base ) then
7719: LD_VAR 0 3
7723: PUSH
7724: LD_VAR 0 5
7728: ARRAY
7729: PPUSH
7730: LD_INT 9
7732: PPUSH
7733: CALL_OW 308
7737: IFFALSE 7763
// ComEnterUnit ( units [ i ] , teleport [ 1 ] ) ;
7739: LD_VAR 0 3
7743: PUSH
7744: LD_VAR 0 5
7748: ARRAY
7749: PPUSH
7750: LD_VAR 0 6
7754: PUSH
7755: LD_INT 1
7757: ARRAY
7758: PPUSH
7759: CALL_OW 120
7763: GO 7716
7765: POP
7766: POP
// wait ( 0 0$10 ) ;
7767: LD_INT 350
7769: PPUSH
7770: CALL_OW 67
// until not UnitFilter ( units , [ f_inarea , ru_base ] ) ;
7774: LD_VAR 0 3
7778: PPUSH
7779: LD_INT 95
7781: PUSH
7782: LD_INT 9
7784: PUSH
7785: EMPTY
7786: LIST
7787: LIST
7788: PPUSH
7789: CALL_OW 72
7793: NOT
7794: IFFALSE 7701
// end ; p := rand ( 1 , 2 ) ;
7796: LD_ADDR_VAR 0 4
7800: PUSH
7801: LD_INT 1
7803: PPUSH
7804: LD_INT 2
7806: PPUSH
7807: CALL_OW 12
7811: ST_TO_ADDR
// case p of 1 :
7812: LD_VAR 0 4
7816: PUSH
7817: LD_INT 1
7819: DOUBLE
7820: EQUAL
7821: IFTRUE 7825
7823: GO 7879
7825: POP
// path := [ [ 159 , 71 ] , [ 152 , 99 ] , [ 107 , 119 ] , [ 104 , 127 ] ] ; 2 :
7826: LD_ADDR_VAR 0 2
7830: PUSH
7831: LD_INT 159
7833: PUSH
7834: LD_INT 71
7836: PUSH
7837: EMPTY
7838: LIST
7839: LIST
7840: PUSH
7841: LD_INT 152
7843: PUSH
7844: LD_INT 99
7846: PUSH
7847: EMPTY
7848: LIST
7849: LIST
7850: PUSH
7851: LD_INT 107
7853: PUSH
7854: LD_INT 119
7856: PUSH
7857: EMPTY
7858: LIST
7859: LIST
7860: PUSH
7861: LD_INT 104
7863: PUSH
7864: LD_INT 127
7866: PUSH
7867: EMPTY
7868: LIST
7869: LIST
7870: PUSH
7871: EMPTY
7872: LIST
7873: LIST
7874: LIST
7875: LIST
7876: ST_TO_ADDR
7877: GO 7942
7879: LD_INT 2
7881: DOUBLE
7882: EQUAL
7883: IFTRUE 7887
7885: GO 7941
7887: POP
// path := [ [ 116 , 36 ] , [ 91 , 52 ] , [ 53 , 67 ] , [ 58 , 107 ] ] ; end ;
7888: LD_ADDR_VAR 0 2
7892: PUSH
7893: LD_INT 116
7895: PUSH
7896: LD_INT 36
7898: PUSH
7899: EMPTY
7900: LIST
7901: LIST
7902: PUSH
7903: LD_INT 91
7905: PUSH
7906: LD_INT 52
7908: PUSH
7909: EMPTY
7910: LIST
7911: LIST
7912: PUSH
7913: LD_INT 53
7915: PUSH
7916: LD_INT 67
7918: PUSH
7919: EMPTY
7920: LIST
7921: LIST
7922: PUSH
7923: LD_INT 58
7925: PUSH
7926: LD_INT 107
7928: PUSH
7929: EMPTY
7930: LIST
7931: LIST
7932: PUSH
7933: EMPTY
7934: LIST
7935: LIST
7936: LIST
7937: LIST
7938: ST_TO_ADDR
7939: GO 7942
7941: POP
// if FilterAllUnits ( [ f_side , 7 ] ) and p > 1 then
7942: LD_INT 22
7944: PUSH
7945: LD_INT 7
7947: PUSH
7948: EMPTY
7949: LIST
7950: LIST
7951: PPUSH
7952: CALL_OW 69
7956: PUSH
7957: LD_VAR 0 4
7961: PUSH
7962: LD_INT 1
7964: GREATER
7965: AND
7966: IFFALSE 7997
// path := [ [ 116 , 36 ] , [ 91 , 52 ] ] ;
7968: LD_ADDR_VAR 0 2
7972: PUSH
7973: LD_INT 116
7975: PUSH
7976: LD_INT 36
7978: PUSH
7979: EMPTY
7980: LIST
7981: LIST
7982: PUSH
7983: LD_INT 91
7985: PUSH
7986: LD_INT 52
7988: PUSH
7989: EMPTY
7990: LIST
7991: LIST
7992: PUSH
7993: EMPTY
7994: LIST
7995: LIST
7996: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7997: LD_INT 35
7999: PPUSH
8000: CALL_OW 67
// until not AgressiveMove ( units , path ) ;
8004: LD_VAR 0 3
8008: PPUSH
8009: LD_VAR 0 2
8013: PPUSH
8014: CALL 78078 0 2
8018: NOT
8019: IFFALSE 7997
// end ; end_of_file
8021: LD_VAR 0 1
8025: RET
// export function RemoveLegion ; var i ; begin
8026: LD_INT 0
8028: PPUSH
8029: PPUSH
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
8030: LD_ADDR_VAR 0 2
8034: PUSH
8035: LD_INT 22
8037: PUSH
8038: LD_INT 8
8040: PUSH
8041: EMPTY
8042: LIST
8043: LIST
8044: PPUSH
8045: CALL_OW 69
8049: PUSH
8050: FOR_IN
8051: IFFALSE 8064
// RemoveUnit ( i ) ;
8053: LD_VAR 0 2
8057: PPUSH
8058: CALL_OW 64
8062: GO 8050
8064: POP
8065: POP
// end ;
8066: LD_VAR 0 1
8070: RET
// export legion_force , legion_skill , legion_mines , legion_blist , legion_vlist , legion_enemy ; export function PrepareLegion ; var un , i , tmp , veh , l_depot , p , l_factory , l_lab , l_towers ; begin
8071: LD_INT 0
8073: PPUSH
8074: PPUSH
8075: PPUSH
8076: PPUSH
8077: PPUSH
8078: PPUSH
8079: PPUSH
8080: PPUSH
8081: PPUSH
8082: PPUSH
// l_depot := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
8083: LD_ADDR_VAR 0 6
8087: PUSH
8088: LD_INT 22
8090: PUSH
8091: LD_INT 8
8093: PUSH
8094: EMPTY
8095: LIST
8096: LIST
8097: PUSH
8098: LD_INT 30
8100: PUSH
8101: LD_INT 1
8103: PUSH
8104: EMPTY
8105: LIST
8106: LIST
8107: PUSH
8108: EMPTY
8109: LIST
8110: LIST
8111: PPUSH
8112: CALL_OW 69
8116: PUSH
8117: LD_INT 1
8119: ARRAY
8120: ST_TO_ADDR
// l_factory := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
8121: LD_ADDR_VAR 0 8
8125: PUSH
8126: LD_INT 22
8128: PUSH
8129: LD_INT 8
8131: PUSH
8132: EMPTY
8133: LIST
8134: LIST
8135: PUSH
8136: LD_INT 30
8138: PUSH
8139: LD_INT 3
8141: PUSH
8142: EMPTY
8143: LIST
8144: LIST
8145: PUSH
8146: EMPTY
8147: LIST
8148: LIST
8149: PPUSH
8150: CALL_OW 69
8154: PUSH
8155: LD_INT 1
8157: ARRAY
8158: ST_TO_ADDR
// l_lab := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ;
8159: LD_ADDR_VAR 0 9
8163: PUSH
8164: LD_INT 22
8166: PUSH
8167: LD_INT 8
8169: PUSH
8170: EMPTY
8171: LIST
8172: LIST
8173: PUSH
8174: LD_INT 2
8176: PUSH
8177: LD_INT 30
8179: PUSH
8180: LD_INT 6
8182: PUSH
8183: EMPTY
8184: LIST
8185: LIST
8186: PUSH
8187: LD_INT 30
8189: PUSH
8190: LD_INT 8
8192: PUSH
8193: EMPTY
8194: LIST
8195: LIST
8196: PUSH
8197: EMPTY
8198: LIST
8199: LIST
8200: LIST
8201: PUSH
8202: EMPTY
8203: LIST
8204: LIST
8205: PPUSH
8206: CALL_OW 69
8210: PUSH
8211: LD_INT 1
8213: ARRAY
8214: ST_TO_ADDR
// l_towers := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) ;
8215: LD_ADDR_VAR 0 10
8219: PUSH
8220: LD_INT 22
8222: PUSH
8223: LD_INT 8
8225: PUSH
8226: EMPTY
8227: LIST
8228: LIST
8229: PUSH
8230: LD_INT 30
8232: PUSH
8233: LD_INT 32
8235: PUSH
8236: EMPTY
8237: LIST
8238: LIST
8239: PUSH
8240: EMPTY
8241: LIST
8242: LIST
8243: PPUSH
8244: CALL_OW 69
8248: ST_TO_ADDR
// uc_side := 8 ;
8249: LD_ADDR_OWVAR 20
8253: PUSH
8254: LD_INT 8
8256: ST_TO_ADDR
// uc_nation := nation_arabian ;
8257: LD_ADDR_OWVAR 21
8261: PUSH
8262: LD_INT 2
8264: ST_TO_ADDR
// legion_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
8265: LD_ADDR_EXP 38
8269: PUSH
8270: LD_INT 5
8272: PUSH
8273: LD_INT 6
8275: PUSH
8276: LD_INT 7
8278: PUSH
8279: EMPTY
8280: LIST
8281: LIST
8282: LIST
8283: PUSH
8284: LD_OWVAR 67
8288: ARRAY
8289: ST_TO_ADDR
// legion_blist := [ ] ;
8290: LD_ADDR_EXP 40
8294: PUSH
8295: EMPTY
8296: ST_TO_ADDR
// legion_vlist := [ ] ;
8297: LD_ADDR_EXP 41
8301: PUSH
8302: EMPTY
8303: ST_TO_ADDR
// legion_force := [ ] ;
8304: LD_ADDR_EXP 37
8308: PUSH
8309: EMPTY
8310: ST_TO_ADDR
// legion_enemy := - 1 ;
8311: LD_ADDR_EXP 42
8315: PUSH
8316: LD_INT 1
8318: NEG
8319: ST_TO_ADDR
// SetResourceType ( GetBase ( l_depot ) , mat_cans , 10000 ) ;
8320: LD_VAR 0 6
8324: PPUSH
8325: CALL_OW 274
8329: PPUSH
8330: LD_INT 1
8332: PPUSH
8333: LD_INT 10000
8335: PPUSH
8336: CALL_OW 277
// SetResourceType ( GetBase ( l_depot ) , 3 , 1000 ) ;
8340: LD_VAR 0 6
8344: PPUSH
8345: CALL_OW 274
8349: PPUSH
8350: LD_INT 3
8352: PPUSH
8353: LD_INT 1000
8355: PPUSH
8356: CALL_OW 277
// for i = 1 to l_towers do
8360: LD_ADDR_VAR 0 3
8364: PUSH
8365: DOUBLE
8366: LD_INT 1
8368: DEC
8369: ST_TO_ADDR
8370: LD_VAR 0 10
8374: PUSH
8375: FOR_TO
8376: IFFALSE 8425
// begin PrepareHuman ( false , 1 , legion_skill ) ;
8378: LD_INT 0
8380: PPUSH
8381: LD_INT 1
8383: PPUSH
8384: LD_EXP 38
8388: PPUSH
8389: CALL_OW 380
// un := CreateHuman ;
8393: LD_ADDR_VAR 0 2
8397: PUSH
8398: CALL_OW 44
8402: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_towers [ i ] ) ;
8403: LD_VAR 0 2
8407: PPUSH
8408: LD_VAR 0 10
8412: PUSH
8413: LD_VAR 0 3
8417: ARRAY
8418: PPUSH
8419: CALL_OW 52
// end ;
8423: GO 8375
8425: POP
8426: POP
// for i = 1 to 4 do
8427: LD_ADDR_VAR 0 3
8431: PUSH
8432: DOUBLE
8433: LD_INT 1
8435: DEC
8436: ST_TO_ADDR
8437: LD_INT 4
8439: PUSH
8440: FOR_TO
8441: IFFALSE 8534
// for p = 1 to 2 do
8443: LD_ADDR_VAR 0 7
8447: PUSH
8448: DOUBLE
8449: LD_INT 1
8451: DEC
8452: ST_TO_ADDR
8453: LD_INT 2
8455: PUSH
8456: FOR_TO
8457: IFFALSE 8530
// begin PrepareHuman ( false , class_mortar , legion_skill ) ;
8459: LD_INT 0
8461: PPUSH
8462: LD_INT 8
8464: PPUSH
8465: LD_EXP 38
8469: PPUSH
8470: CALL_OW 380
// un := CreateHuman ;
8474: LD_ADDR_VAR 0 2
8478: PUSH
8479: CALL_OW 44
8483: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_barracks ] ] ) [ p ] ) ;
8484: LD_VAR 0 2
8488: PPUSH
8489: LD_INT 22
8491: PUSH
8492: LD_INT 8
8494: PUSH
8495: EMPTY
8496: LIST
8497: LIST
8498: PUSH
8499: LD_INT 30
8501: PUSH
8502: LD_INT 5
8504: PUSH
8505: EMPTY
8506: LIST
8507: LIST
8508: PUSH
8509: EMPTY
8510: LIST
8511: LIST
8512: PPUSH
8513: CALL_OW 69
8517: PUSH
8518: LD_VAR 0 7
8522: ARRAY
8523: PPUSH
8524: CALL_OW 52
// end ;
8528: GO 8456
8530: POP
8531: POP
8532: GO 8440
8534: POP
8535: POP
// for i = 1 to 4 do
8536: LD_ADDR_VAR 0 3
8540: PUSH
8541: DOUBLE
8542: LD_INT 1
8544: DEC
8545: ST_TO_ADDR
8546: LD_INT 4
8548: PUSH
8549: FOR_TO
8550: IFFALSE 8593
// begin PrepareHuman ( false , 4 , legion_skill ) ;
8552: LD_INT 0
8554: PPUSH
8555: LD_INT 4
8557: PPUSH
8558: LD_EXP 38
8562: PPUSH
8563: CALL_OW 380
// un := CreateHuman ;
8567: LD_ADDR_VAR 0 2
8571: PUSH
8572: CALL_OW 44
8576: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_lab ) ;
8577: LD_VAR 0 2
8581: PPUSH
8582: LD_VAR 0 9
8586: PPUSH
8587: CALL_OW 52
// end ;
8591: GO 8549
8593: POP
8594: POP
// for i = 1 to 4 do
8595: LD_ADDR_VAR 0 3
8599: PUSH
8600: DOUBLE
8601: LD_INT 1
8603: DEC
8604: ST_TO_ADDR
8605: LD_INT 4
8607: PUSH
8608: FOR_TO
8609: IFFALSE 8652
// begin PrepareHuman ( false , 3 , legion_skill ) ;
8611: LD_INT 0
8613: PPUSH
8614: LD_INT 3
8616: PPUSH
8617: LD_EXP 38
8621: PPUSH
8622: CALL_OW 380
// un := CreateHuman ;
8626: LD_ADDR_VAR 0 2
8630: PUSH
8631: CALL_OW 44
8635: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_factory ) ;
8636: LD_VAR 0 2
8640: PPUSH
8641: LD_VAR 0 8
8645: PPUSH
8646: CALL_OW 52
// end ;
8650: GO 8608
8652: POP
8653: POP
// for i = 1 to 3 do
8654: LD_ADDR_VAR 0 3
8658: PUSH
8659: DOUBLE
8660: LD_INT 1
8662: DEC
8663: ST_TO_ADDR
8664: LD_INT 3
8666: PUSH
8667: FOR_TO
8668: IFFALSE 8711
// begin PrepareHuman ( false , 2 , legion_skill ) ;
8670: LD_INT 0
8672: PPUSH
8673: LD_INT 2
8675: PPUSH
8676: LD_EXP 38
8680: PPUSH
8681: CALL_OW 380
// un := CreateHuman ;
8685: LD_ADDR_VAR 0 2
8689: PUSH
8690: CALL_OW 44
8694: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_depot ) ;
8695: LD_VAR 0 2
8699: PPUSH
8700: LD_VAR 0 6
8704: PPUSH
8705: CALL_OW 52
// end ;
8709: GO 8667
8711: POP
8712: POP
// for i = 1 to 3 do
8713: LD_ADDR_VAR 0 3
8717: PUSH
8718: DOUBLE
8719: LD_INT 1
8721: DEC
8722: ST_TO_ADDR
8723: LD_INT 3
8725: PUSH
8726: FOR_TO
8727: IFFALSE 8837
// begin vc_chassis := ar_half_tracked ;
8729: LD_ADDR_OWVAR 37
8733: PUSH
8734: LD_INT 14
8736: ST_TO_ADDR
// vc_engine := engine_siberite ;
8737: LD_ADDR_OWVAR 39
8741: PUSH
8742: LD_INT 3
8744: ST_TO_ADDR
// vc_control := control_manual ;
8745: LD_ADDR_OWVAR 38
8749: PUSH
8750: LD_INT 1
8752: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
8753: LD_ADDR_OWVAR 40
8757: PUSH
8758: LD_INT 31
8760: ST_TO_ADDR
// veh := CreateVehicle ;
8761: LD_ADDR_VAR 0 5
8765: PUSH
8766: CALL_OW 45
8770: ST_TO_ADDR
// PlaceUnitXYR ( veh , 212 , 135 , 5 , false ) ;
8771: LD_VAR 0 5
8775: PPUSH
8776: LD_INT 212
8778: PPUSH
8779: LD_INT 135
8781: PPUSH
8782: LD_INT 5
8784: PPUSH
8785: LD_INT 0
8787: PPUSH
8788: CALL_OW 50
// PrepareHuman ( false , 3 , legion_skill + 1 ) ;
8792: LD_INT 0
8794: PPUSH
8795: LD_INT 3
8797: PPUSH
8798: LD_EXP 38
8802: PUSH
8803: LD_INT 1
8805: PLUS
8806: PPUSH
8807: CALL_OW 380
// un := CreateHuman ;
8811: LD_ADDR_VAR 0 2
8815: PUSH
8816: CALL_OW 44
8820: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8821: LD_VAR 0 2
8825: PPUSH
8826: LD_VAR 0 5
8830: PPUSH
8831: CALL_OW 52
// end ;
8835: GO 8726
8837: POP
8838: POP
// PrepareSoldier ( false , 8 ) ;
8839: LD_INT 0
8841: PPUSH
8842: LD_INT 8
8844: PPUSH
8845: CALL_OW 381
// hc_class := class_sniper ;
8849: LD_ADDR_OWVAR 28
8853: PUSH
8854: LD_INT 5
8856: ST_TO_ADDR
// un := CreateHuman ;
8857: LD_ADDR_VAR 0 2
8861: PUSH
8862: CALL_OW 44
8866: ST_TO_ADDR
// SetDir ( un , 4 ) ;
8867: LD_VAR 0 2
8871: PPUSH
8872: LD_INT 4
8874: PPUSH
8875: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( 136 , 92 ) ) ;
8879: LD_VAR 0 2
8883: PPUSH
8884: LD_INT 136
8886: PPUSH
8887: LD_INT 92
8889: PPUSH
8890: CALL_OW 428
8894: PPUSH
8895: CALL_OW 52
// PlaceSeeing ( 198 , 94 , 8 , 10 ) ;
8899: LD_INT 198
8901: PPUSH
8902: LD_INT 94
8904: PPUSH
8905: LD_INT 8
8907: PPUSH
8908: LD_INT 10
8910: PPUSH
8911: CALL_OW 330
// PlaceSeeing ( 167 , 130 , 8 , 10 ) ;
8915: LD_INT 167
8917: PPUSH
8918: LD_INT 130
8920: PPUSH
8921: LD_INT 8
8923: PPUSH
8924: LD_INT 10
8926: PPUSH
8927: CALL_OW 330
// tmp := AreaToList ( legion_mines_area , 0 ) ;
8931: LD_ADDR_VAR 0 4
8935: PUSH
8936: LD_INT 24
8938: PPUSH
8939: LD_INT 0
8941: PPUSH
8942: CALL_OW 517
8946: ST_TO_ADDR
// legion_mines := [ ] ;
8947: LD_ADDR_EXP 39
8951: PUSH
8952: EMPTY
8953: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
8954: LD_ADDR_VAR 0 3
8958: PUSH
8959: DOUBLE
8960: LD_INT 1
8962: DEC
8963: ST_TO_ADDR
8964: LD_VAR 0 4
8968: PUSH
8969: LD_INT 1
8971: ARRAY
8972: PUSH
8973: FOR_TO
8974: IFFALSE 9076
// begin PlaceMine ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 8 , 0 ) ;
8976: LD_VAR 0 4
8980: PUSH
8981: LD_INT 1
8983: ARRAY
8984: PUSH
8985: LD_VAR 0 3
8989: ARRAY
8990: PPUSH
8991: LD_VAR 0 4
8995: PUSH
8996: LD_INT 2
8998: ARRAY
8999: PUSH
9000: LD_VAR 0 3
9004: ARRAY
9005: PPUSH
9006: LD_INT 8
9008: PPUSH
9009: LD_INT 0
9011: PPUSH
9012: CALL_OW 454
// legion_mines := Replace ( legion_mines , legion_mines + 1 , [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ) ;
9016: LD_ADDR_EXP 39
9020: PUSH
9021: LD_EXP 39
9025: PPUSH
9026: LD_EXP 39
9030: PUSH
9031: LD_INT 1
9033: PLUS
9034: PPUSH
9035: LD_VAR 0 4
9039: PUSH
9040: LD_INT 1
9042: ARRAY
9043: PUSH
9044: LD_VAR 0 3
9048: ARRAY
9049: PUSH
9050: LD_VAR 0 4
9054: PUSH
9055: LD_INT 2
9057: ARRAY
9058: PUSH
9059: LD_VAR 0 3
9063: ARRAY
9064: PUSH
9065: EMPTY
9066: LIST
9067: LIST
9068: PPUSH
9069: CALL_OW 1
9073: ST_TO_ADDR
// end ;
9074: GO 8973
9076: POP
9077: POP
// legion_vlist := [ ar_medium_trike , 3 , control_remote , ar_cargo_bay ] ;
9078: LD_ADDR_EXP 41
9082: PUSH
9083: LD_INT 13
9085: PUSH
9086: LD_INT 3
9088: PUSH
9089: LD_INT 2
9091: PUSH
9092: LD_INT 32
9094: PUSH
9095: EMPTY
9096: LIST
9097: LIST
9098: LIST
9099: LIST
9100: ST_TO_ADDR
// end ;
9101: LD_VAR 0 1
9105: RET
// every 0 0$1 trigger legion_mines and FilterUnitsInArea ( legion_mines_area , [ f_side , your_side ] ) do var i , un ;
9106: LD_EXP 39
9110: PUSH
9111: LD_INT 24
9113: PPUSH
9114: LD_INT 22
9116: PUSH
9117: LD_OWVAR 2
9121: PUSH
9122: EMPTY
9123: LIST
9124: LIST
9125: PPUSH
9126: CALL_OW 70
9130: AND
9131: IFFALSE 9298
9133: GO 9135
9135: DISABLE
9136: LD_INT 0
9138: PPUSH
9139: PPUSH
// begin enable ;
9140: ENABLE
// for i := legion_mines downto 1 do
9141: LD_ADDR_VAR 0 1
9145: PUSH
9146: DOUBLE
9147: LD_EXP 39
9151: INC
9152: ST_TO_ADDR
9153: LD_INT 1
9155: PUSH
9156: FOR_DOWNTO
9157: IFFALSE 9296
// begin un := HexInfo ( legion_mines [ i ] [ 1 ] , legion_mines [ i ] [ 2 ] ) ;
9159: LD_ADDR_VAR 0 2
9163: PUSH
9164: LD_EXP 39
9168: PUSH
9169: LD_VAR 0 1
9173: ARRAY
9174: PUSH
9175: LD_INT 1
9177: ARRAY
9178: PPUSH
9179: LD_EXP 39
9183: PUSH
9184: LD_VAR 0 1
9188: ARRAY
9189: PUSH
9190: LD_INT 2
9192: ARRAY
9193: PPUSH
9194: CALL_OW 428
9198: ST_TO_ADDR
// if un then
9199: LD_VAR 0 2
9203: IFFALSE 9294
// if GetSide ( un ) = legion_enemy then
9205: LD_VAR 0 2
9209: PPUSH
9210: CALL_OW 255
9214: PUSH
9215: LD_EXP 42
9219: EQUAL
9220: IFFALSE 9294
// begin LaunchMineAtPos ( legion_mines [ i ] [ 1 ] , legion_mines [ i ] [ 2 ] , 8 ) ;
9222: LD_EXP 39
9226: PUSH
9227: LD_VAR 0 1
9231: ARRAY
9232: PUSH
9233: LD_INT 1
9235: ARRAY
9236: PPUSH
9237: LD_EXP 39
9241: PUSH
9242: LD_VAR 0 1
9246: ARRAY
9247: PUSH
9248: LD_INT 2
9250: ARRAY
9251: PPUSH
9252: LD_INT 8
9254: PPUSH
9255: CALL_OW 456
// legion_mines := Delete ( legion_mines , i ) ;
9259: LD_ADDR_EXP 39
9263: PUSH
9264: LD_EXP 39
9268: PPUSH
9269: LD_VAR 0 1
9273: PPUSH
9274: CALL_OW 3
9278: ST_TO_ADDR
// if not mine_vulc then
9279: LD_EXP 13
9283: NOT
9284: IFFALSE 9294
// mine_vulc := true ;
9286: LD_ADDR_EXP 13
9290: PUSH
9291: LD_INT 1
9293: ST_TO_ADDR
// end ; end ;
9294: GO 9156
9296: POP
9297: POP
// end ;
9298: PPOPN 2
9300: END
// every 0 0$1 trigger tick >= [ 25 25$00 , 22 22$00 , 20 20$00 ] [ Difficulty ] do var artifact , un ;
9301: LD_OWVAR 1
9305: PUSH
9306: LD_INT 52500
9308: PUSH
9309: LD_INT 46200
9311: PUSH
9312: LD_INT 42000
9314: PUSH
9315: EMPTY
9316: LIST
9317: LIST
9318: LIST
9319: PUSH
9320: LD_OWVAR 67
9324: ARRAY
9325: GREATEREQUAL
9326: IFFALSE 9504
9328: GO 9330
9330: DISABLE
9331: LD_INT 0
9333: PPUSH
9334: PPUSH
// begin artifact := FindArtifact ( 1 ) ;
9335: LD_ADDR_VAR 0 1
9339: PUSH
9340: LD_INT 1
9342: PPUSH
9343: CALL_OW 469
9347: ST_TO_ADDR
// if artifact [ 1 ] = 112 and artifact [ 2 ] = 67 then
9348: LD_VAR 0 1
9352: PUSH
9353: LD_INT 1
9355: ARRAY
9356: PUSH
9357: LD_INT 112
9359: EQUAL
9360: PUSH
9361: LD_VAR 0 1
9365: PUSH
9366: LD_INT 2
9368: ARRAY
9369: PUSH
9370: LD_INT 67
9372: EQUAL
9373: AND
9374: IFFALSE 9504
// begin un := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 2 ] ] ) ;
9376: LD_ADDR_VAR 0 2
9380: PUSH
9381: LD_INT 22
9383: PUSH
9384: LD_INT 8
9386: PUSH
9387: EMPTY
9388: LIST
9389: LIST
9390: PUSH
9391: LD_INT 25
9393: PUSH
9394: LD_INT 2
9396: PUSH
9397: EMPTY
9398: LIST
9399: LIST
9400: PUSH
9401: EMPTY
9402: LIST
9403: LIST
9404: PPUSH
9405: CALL_OW 69
9409: ST_TO_ADDR
// if not un then
9410: LD_VAR 0 2
9414: NOT
9415: IFFALSE 9419
// exit ;
9417: GO 9504
// un := un [ 1 ] ;
9419: LD_ADDR_VAR 0 2
9423: PUSH
9424: LD_VAR 0 2
9428: PUSH
9429: LD_INT 1
9431: ARRAY
9432: ST_TO_ADDR
// if IsInUnit ( un ) then
9433: LD_VAR 0 2
9437: PPUSH
9438: CALL_OW 310
9442: IFFALSE 9453
// ComExitBuilding ( un ) ;
9444: LD_VAR 0 2
9448: PPUSH
9449: CALL_OW 122
// AddComCollect ( un , artifact [ 1 ] , artifact [ 2 ] ) ;
9453: LD_VAR 0 2
9457: PPUSH
9458: LD_VAR 0 1
9462: PUSH
9463: LD_INT 1
9465: ARRAY
9466: PPUSH
9467: LD_VAR 0 1
9471: PUSH
9472: LD_INT 2
9474: ARRAY
9475: PPUSH
9476: CALL_OW 177
// AddComMoveXY ( un , 207 , 123 ) ;
9480: LD_VAR 0 2
9484: PPUSH
9485: LD_INT 207
9487: PPUSH
9488: LD_INT 123
9490: PPUSH
9491: CALL_OW 171
// AddComUnload ( un ) ;
9495: LD_VAR 0 2
9499: PPUSH
9500: CALL_OW 219
// end ; end ;
9504: PPOPN 2
9506: END
// every 0 0$02 trigger FilterAllUnits ( [ f_side , 8 ] ) > 0 do var un , i , tmp , veh , b , p , cr , l_depot , l_factory , l_lab , l_towers , l_sib , l_sci , l_mech , l_sold , l_eng , l_cargo ;
9507: LD_INT 22
9509: PUSH
9510: LD_INT 8
9512: PUSH
9513: EMPTY
9514: LIST
9515: LIST
9516: PPUSH
9517: CALL_OW 69
9521: PUSH
9522: LD_INT 0
9524: GREATER
9525: IFFALSE 11113
9527: GO 9529
9529: DISABLE
9530: LD_INT 0
9532: PPUSH
9533: PPUSH
9534: PPUSH
9535: PPUSH
9536: PPUSH
9537: PPUSH
9538: PPUSH
9539: PPUSH
9540: PPUSH
9541: PPUSH
9542: PPUSH
9543: PPUSH
9544: PPUSH
9545: PPUSH
9546: PPUSH
9547: PPUSH
9548: PPUSH
// begin enable ;
9549: ENABLE
// l_depot := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
9550: LD_ADDR_VAR 0 8
9554: PUSH
9555: LD_INT 22
9557: PUSH
9558: LD_INT 8
9560: PUSH
9561: EMPTY
9562: LIST
9563: LIST
9564: PUSH
9565: LD_INT 30
9567: PUSH
9568: LD_INT 1
9570: PUSH
9571: EMPTY
9572: LIST
9573: LIST
9574: PUSH
9575: EMPTY
9576: LIST
9577: LIST
9578: PPUSH
9579: CALL_OW 69
9583: PUSH
9584: LD_INT 1
9586: ARRAY
9587: ST_TO_ADDR
// l_factory := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
9588: LD_ADDR_VAR 0 9
9592: PUSH
9593: LD_INT 22
9595: PUSH
9596: LD_INT 8
9598: PUSH
9599: EMPTY
9600: LIST
9601: LIST
9602: PUSH
9603: LD_INT 30
9605: PUSH
9606: LD_INT 3
9608: PUSH
9609: EMPTY
9610: LIST
9611: LIST
9612: PUSH
9613: EMPTY
9614: LIST
9615: LIST
9616: PPUSH
9617: CALL_OW 69
9621: PUSH
9622: LD_INT 1
9624: ARRAY
9625: ST_TO_ADDR
// l_lab := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ;
9626: LD_ADDR_VAR 0 10
9630: PUSH
9631: LD_INT 22
9633: PUSH
9634: LD_INT 8
9636: PUSH
9637: EMPTY
9638: LIST
9639: LIST
9640: PUSH
9641: LD_INT 2
9643: PUSH
9644: LD_INT 30
9646: PUSH
9647: LD_INT 6
9649: PUSH
9650: EMPTY
9651: LIST
9652: LIST
9653: PUSH
9654: LD_INT 30
9656: PUSH
9657: LD_INT 8
9659: PUSH
9660: EMPTY
9661: LIST
9662: LIST
9663: PUSH
9664: EMPTY
9665: LIST
9666: LIST
9667: LIST
9668: PUSH
9669: EMPTY
9670: LIST
9671: LIST
9672: PPUSH
9673: CALL_OW 69
9677: PUSH
9678: LD_INT 1
9680: ARRAY
9681: ST_TO_ADDR
// l_towers := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) ;
9682: LD_ADDR_VAR 0 11
9686: PUSH
9687: LD_INT 22
9689: PUSH
9690: LD_INT 8
9692: PUSH
9693: EMPTY
9694: LIST
9695: LIST
9696: PUSH
9697: LD_INT 30
9699: PUSH
9700: LD_INT 32
9702: PUSH
9703: EMPTY
9704: LIST
9705: LIST
9706: PUSH
9707: EMPTY
9708: LIST
9709: LIST
9710: PPUSH
9711: CALL_OW 69
9715: ST_TO_ADDR
// l_eng := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 2 ] ] ) ;
9716: LD_ADDR_VAR 0 16
9720: PUSH
9721: LD_INT 22
9723: PUSH
9724: LD_INT 8
9726: PUSH
9727: EMPTY
9728: LIST
9729: LIST
9730: PUSH
9731: LD_INT 25
9733: PUSH
9734: LD_INT 2
9736: PUSH
9737: EMPTY
9738: LIST
9739: LIST
9740: PUSH
9741: EMPTY
9742: LIST
9743: LIST
9744: PPUSH
9745: CALL_OW 69
9749: ST_TO_ADDR
// l_sold := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 1 ] ] ) ;
9750: LD_ADDR_VAR 0 15
9754: PUSH
9755: LD_INT 22
9757: PUSH
9758: LD_INT 8
9760: PUSH
9761: EMPTY
9762: LIST
9763: LIST
9764: PUSH
9765: LD_INT 25
9767: PUSH
9768: LD_INT 1
9770: PUSH
9771: EMPTY
9772: LIST
9773: LIST
9774: PUSH
9775: EMPTY
9776: LIST
9777: LIST
9778: PPUSH
9779: CALL_OW 69
9783: ST_TO_ADDR
// l_mech := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 3 ] ] ) ;
9784: LD_ADDR_VAR 0 14
9788: PUSH
9789: LD_INT 22
9791: PUSH
9792: LD_INT 8
9794: PUSH
9795: EMPTY
9796: LIST
9797: LIST
9798: PUSH
9799: LD_INT 25
9801: PUSH
9802: LD_INT 3
9804: PUSH
9805: EMPTY
9806: LIST
9807: LIST
9808: PUSH
9809: EMPTY
9810: LIST
9811: LIST
9812: PPUSH
9813: CALL_OW 69
9817: ST_TO_ADDR
// l_sci := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 4 ] ] ) ;
9818: LD_ADDR_VAR 0 13
9822: PUSH
9823: LD_INT 22
9825: PUSH
9826: LD_INT 8
9828: PUSH
9829: EMPTY
9830: LIST
9831: LIST
9832: PUSH
9833: LD_INT 25
9835: PUSH
9836: LD_INT 4
9838: PUSH
9839: EMPTY
9840: LIST
9841: LIST
9842: PUSH
9843: EMPTY
9844: LIST
9845: LIST
9846: PPUSH
9847: CALL_OW 69
9851: ST_TO_ADDR
// if l_eng then
9852: LD_VAR 0 16
9856: IFFALSE 10274
// begin b := FilterUnitsInArea ( legion_base_area , [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) ;
9858: LD_ADDR_VAR 0 5
9862: PUSH
9863: LD_INT 25
9865: PPUSH
9866: LD_INT 22
9868: PUSH
9869: LD_INT 8
9871: PUSH
9872: EMPTY
9873: LIST
9874: LIST
9875: PUSH
9876: LD_INT 21
9878: PUSH
9879: LD_INT 3
9881: PUSH
9882: EMPTY
9883: LIST
9884: LIST
9885: PUSH
9886: EMPTY
9887: LIST
9888: LIST
9889: PPUSH
9890: CALL_OW 70
9894: ST_TO_ADDR
// if UnitFilter ( b , [ f_not , [ f_lives , 1000 ] ] ) > 0 then
9895: LD_VAR 0 5
9899: PPUSH
9900: LD_INT 3
9902: PUSH
9903: LD_INT 24
9905: PUSH
9906: LD_INT 1000
9908: PUSH
9909: EMPTY
9910: LIST
9911: LIST
9912: PUSH
9913: EMPTY
9914: LIST
9915: LIST
9916: PPUSH
9917: CALL_OW 72
9921: PUSH
9922: LD_INT 0
9924: GREATER
9925: IFFALSE 10059
// begin tmp := UnitFilter ( b , [ f_not , [ f_lives , 1000 ] ] ) ;
9927: LD_ADDR_VAR 0 3
9931: PUSH
9932: LD_VAR 0 5
9936: PPUSH
9937: LD_INT 3
9939: PUSH
9940: LD_INT 24
9942: PUSH
9943: LD_INT 1000
9945: PUSH
9946: EMPTY
9947: LIST
9948: LIST
9949: PUSH
9950: EMPTY
9951: LIST
9952: LIST
9953: PPUSH
9954: CALL_OW 72
9958: ST_TO_ADDR
// for i = 1 to l_eng do
9959: LD_ADDR_VAR 0 2
9963: PUSH
9964: DOUBLE
9965: LD_INT 1
9967: DEC
9968: ST_TO_ADDR
9969: LD_VAR 0 16
9973: PUSH
9974: FOR_TO
9975: IFFALSE 10055
// if IsInUnit ( l_eng [ i ] ) then
9977: LD_VAR 0 16
9981: PUSH
9982: LD_VAR 0 2
9986: ARRAY
9987: PPUSH
9988: CALL_OW 310
9992: IFFALSE 10011
// ComExitBuilding ( l_eng [ i ] ) else
9994: LD_VAR 0 16
9998: PUSH
9999: LD_VAR 0 2
10003: ARRAY
10004: PPUSH
10005: CALL_OW 122
10009: GO 10053
// if not HasTask ( l_eng [ i ] ) then
10011: LD_VAR 0 16
10015: PUSH
10016: LD_VAR 0 2
10020: ARRAY
10021: PPUSH
10022: CALL_OW 314
10026: NOT
10027: IFFALSE 10053
// ComRepairBuilding ( l_eng [ i ] , tmp [ 1 ] ) ;
10029: LD_VAR 0 16
10033: PUSH
10034: LD_VAR 0 2
10038: ARRAY
10039: PPUSH
10040: LD_VAR 0 3
10044: PUSH
10045: LD_INT 1
10047: ARRAY
10048: PPUSH
10049: CALL_OW 130
10053: GO 9974
10055: POP
10056: POP
// end else
10057: GO 10274
// begin if legion_blist > 0 then
10059: LD_EXP 40
10063: PUSH
10064: LD_INT 0
10066: GREATER
10067: IFFALSE 10196
// begin for i = 1 to l_eng do
10069: LD_ADDR_VAR 0 2
10073: PUSH
10074: DOUBLE
10075: LD_INT 1
10077: DEC
10078: ST_TO_ADDR
10079: LD_VAR 0 16
10083: PUSH
10084: FOR_TO
10085: IFFALSE 10192
// if IsInUnit ( l_eng [ i ] ) then
10087: LD_VAR 0 16
10091: PUSH
10092: LD_VAR 0 2
10096: ARRAY
10097: PPUSH
10098: CALL_OW 310
10102: IFFALSE 10121
// ComExitBuilding ( l_eng [ i ] ) else
10104: LD_VAR 0 16
10108: PUSH
10109: LD_VAR 0 2
10113: ARRAY
10114: PPUSH
10115: CALL_OW 122
10119: GO 10190
// if not HasTask ( l_eng [ i ] ) then
10121: LD_VAR 0 16
10125: PUSH
10126: LD_VAR 0 2
10130: ARRAY
10131: PPUSH
10132: CALL_OW 314
10136: NOT
10137: IFFALSE 10190
// ComBuild ( l_eng [ i ] , legion_blist [ 1 ] , legion_blist [ 2 ] , legion_blist [ 3 ] , legion_blist [ 4 ] ) ;
10139: LD_VAR 0 16
10143: PUSH
10144: LD_VAR 0 2
10148: ARRAY
10149: PPUSH
10150: LD_EXP 40
10154: PUSH
10155: LD_INT 1
10157: ARRAY
10158: PPUSH
10159: LD_EXP 40
10163: PUSH
10164: LD_INT 2
10166: ARRAY
10167: PPUSH
10168: LD_EXP 40
10172: PUSH
10173: LD_INT 3
10175: ARRAY
10176: PPUSH
10177: LD_EXP 40
10181: PUSH
10182: LD_INT 4
10184: ARRAY
10185: PPUSH
10186: CALL_OW 145
10190: GO 10084
10192: POP
10193: POP
// end else
10194: GO 10274
// for i = 1 to l_eng do
10196: LD_ADDR_VAR 0 2
10200: PUSH
10201: DOUBLE
10202: LD_INT 1
10204: DEC
10205: ST_TO_ADDR
10206: LD_VAR 0 16
10210: PUSH
10211: FOR_TO
10212: IFFALSE 10272
// if not IsInUnit ( l_eng [ i ] ) and not HasTask ( l_eng [ i ] ) then
10214: LD_VAR 0 16
10218: PUSH
10219: LD_VAR 0 2
10223: ARRAY
10224: PPUSH
10225: CALL_OW 310
10229: NOT
10230: PUSH
10231: LD_VAR 0 16
10235: PUSH
10236: LD_VAR 0 2
10240: ARRAY
10241: PPUSH
10242: CALL_OW 314
10246: NOT
10247: AND
10248: IFFALSE 10270
// ComEnterUnit ( l_eng [ i ] , l_depot ) ;
10250: LD_VAR 0 16
10254: PUSH
10255: LD_VAR 0 2
10259: ARRAY
10260: PPUSH
10261: LD_VAR 0 8
10265: PPUSH
10266: CALL_OW 120
10270: GO 10211
10272: POP
10273: POP
// end ; end ; if l_factory then
10274: LD_VAR 0 9
10278: IFFALSE 10678
// begin if FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) > 0 then
10280: LD_INT 22
10282: PUSH
10283: LD_INT 8
10285: PUSH
10286: EMPTY
10287: LIST
10288: LIST
10289: PUSH
10290: LD_INT 33
10292: PUSH
10293: LD_INT 2
10295: PUSH
10296: EMPTY
10297: LIST
10298: LIST
10299: PUSH
10300: LD_INT 3
10302: PUSH
10303: LD_INT 61
10305: PUSH
10306: EMPTY
10307: LIST
10308: PUSH
10309: EMPTY
10310: LIST
10311: LIST
10312: PUSH
10313: EMPTY
10314: LIST
10315: LIST
10316: LIST
10317: PPUSH
10318: CALL_OW 69
10322: PUSH
10323: LD_INT 0
10325: GREATER
10326: PUSH
10327: LD_INT 22
10329: PUSH
10330: LD_INT 8
10332: PUSH
10333: EMPTY
10334: LIST
10335: LIST
10336: PUSH
10337: LD_INT 34
10339: PUSH
10340: LD_INT 31
10342: PUSH
10343: EMPTY
10344: LIST
10345: LIST
10346: PUSH
10347: EMPTY
10348: LIST
10349: LIST
10350: PPUSH
10351: CALL_OW 69
10355: PUSH
10356: LD_INT 0
10358: GREATER
10359: AND
10360: IFFALSE 10480
// ComLinkTo ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) [ 1 ] , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) [ Rand ( 1 , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) ) ] ) ;
10362: LD_INT 22
10364: PUSH
10365: LD_INT 8
10367: PUSH
10368: EMPTY
10369: LIST
10370: LIST
10371: PUSH
10372: LD_INT 33
10374: PUSH
10375: LD_INT 2
10377: PUSH
10378: EMPTY
10379: LIST
10380: LIST
10381: PUSH
10382: LD_INT 3
10384: PUSH
10385: LD_INT 61
10387: PUSH
10388: EMPTY
10389: LIST
10390: PUSH
10391: EMPTY
10392: LIST
10393: LIST
10394: PUSH
10395: EMPTY
10396: LIST
10397: LIST
10398: LIST
10399: PPUSH
10400: CALL_OW 69
10404: PUSH
10405: LD_INT 1
10407: ARRAY
10408: PPUSH
10409: LD_INT 22
10411: PUSH
10412: LD_INT 8
10414: PUSH
10415: EMPTY
10416: LIST
10417: LIST
10418: PUSH
10419: LD_INT 34
10421: PUSH
10422: LD_INT 31
10424: PUSH
10425: EMPTY
10426: LIST
10427: LIST
10428: PUSH
10429: EMPTY
10430: LIST
10431: LIST
10432: PPUSH
10433: CALL_OW 69
10437: PUSH
10438: LD_INT 1
10440: PPUSH
10441: LD_INT 22
10443: PUSH
10444: LD_INT 8
10446: PUSH
10447: EMPTY
10448: LIST
10449: LIST
10450: PUSH
10451: LD_INT 34
10453: PUSH
10454: LD_INT 31
10456: PUSH
10457: EMPTY
10458: LIST
10459: LIST
10460: PUSH
10461: EMPTY
10462: LIST
10463: LIST
10464: PPUSH
10465: CALL_OW 69
10469: PPUSH
10470: CALL_OW 12
10474: ARRAY
10475: PPUSH
10476: CALL_OW 135
// if legion_vlist > 0 and BuildingStatus ( l_factory ) = bs_idle then
10480: LD_EXP 41
10484: PUSH
10485: LD_INT 0
10487: GREATER
10488: PUSH
10489: LD_VAR 0 9
10493: PPUSH
10494: CALL_OW 461
10498: PUSH
10499: LD_INT 2
10501: EQUAL
10502: AND
10503: IFFALSE 10588
// begin ComConstruct ( l_factory , legion_vlist [ 1 ] , legion_vlist [ 2 ] , legion_vlist [ 3 ] , legion_vlist [ 4 ] ) ;
10505: LD_VAR 0 9
10509: PPUSH
10510: LD_EXP 41
10514: PUSH
10515: LD_INT 1
10517: ARRAY
10518: PPUSH
10519: LD_EXP 41
10523: PUSH
10524: LD_INT 2
10526: ARRAY
10527: PPUSH
10528: LD_EXP 41
10532: PUSH
10533: LD_INT 3
10535: ARRAY
10536: PPUSH
10537: LD_EXP 41
10541: PUSH
10542: LD_INT 4
10544: ARRAY
10545: PPUSH
10546: CALL_OW 125
// for i = 1 to 4 do
10550: LD_ADDR_VAR 0 2
10554: PUSH
10555: DOUBLE
10556: LD_INT 1
10558: DEC
10559: ST_TO_ADDR
10560: LD_INT 4
10562: PUSH
10563: FOR_TO
10564: IFFALSE 10586
// legion_vlist := Delete ( legion_vlist , 1 ) ;
10566: LD_ADDR_EXP 41
10570: PUSH
10571: LD_EXP 41
10575: PPUSH
10576: LD_INT 1
10578: PPUSH
10579: CALL_OW 3
10583: ST_TO_ADDR
10584: GO 10563
10586: POP
10587: POP
// end ; if UnitFilter ( l_towers , [ f_bweapon , 0 ] ) > 0 and BuildingStatus ( l_factory ) = bs_idle then
10588: LD_VAR 0 11
10592: PPUSH
10593: LD_INT 35
10595: PUSH
10596: LD_INT 0
10598: PUSH
10599: EMPTY
10600: LIST
10601: LIST
10602: PPUSH
10603: CALL_OW 72
10607: PUSH
10608: LD_INT 0
10610: GREATER
10611: PUSH
10612: LD_VAR 0 9
10616: PPUSH
10617: CALL_OW 461
10621: PUSH
10622: LD_INT 2
10624: EQUAL
10625: AND
10626: IFFALSE 10678
// ComPlaceWeapon ( UnitFilter ( l_towers , [ f_bweapon , 0 ] ) [ 1 ] , [ ar_rocket_launcher , ar_gun ] [ Rand ( 1 , 2 ) ] ) ;
10628: LD_VAR 0 11
10632: PPUSH
10633: LD_INT 35
10635: PUSH
10636: LD_INT 0
10638: PUSH
10639: EMPTY
10640: LIST
10641: LIST
10642: PPUSH
10643: CALL_OW 72
10647: PUSH
10648: LD_INT 1
10650: ARRAY
10651: PPUSH
10652: LD_INT 28
10654: PUSH
10655: LD_INT 27
10657: PUSH
10658: EMPTY
10659: LIST
10660: LIST
10661: PUSH
10662: LD_INT 1
10664: PPUSH
10665: LD_INT 2
10667: PPUSH
10668: CALL_OW 12
10672: ARRAY
10673: PPUSH
10674: CALL_OW 148
// end ; if legion_enemy > 0 then
10678: LD_EXP 42
10682: PUSH
10683: LD_INT 0
10685: GREATER
10686: IFFALSE 10971
// begin if tick mod 11 11$00 = 0 then
10688: LD_OWVAR 1
10692: PUSH
10693: LD_INT 23100
10695: MOD
10696: PUSH
10697: LD_INT 0
10699: EQUAL
10700: IFFALSE 10952
// begin legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
10702: LD_ADDR_EXP 41
10706: PUSH
10707: LD_EXP 41
10711: PUSH
10712: LD_INT 13
10714: PUSH
10715: LD_INT 1
10717: PUSH
10718: LD_INT 2
10720: PUSH
10721: EMPTY
10722: LIST
10723: LIST
10724: LIST
10725: ADD
10726: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
10727: LD_ADDR_EXP 41
10731: PUSH
10732: LD_EXP 41
10736: PUSH
10737: LD_INT 28
10739: PUSH
10740: LD_INT 27
10742: PUSH
10743: LD_INT 29
10745: PUSH
10746: EMPTY
10747: LIST
10748: LIST
10749: LIST
10750: PUSH
10751: LD_INT 1
10753: PPUSH
10754: LD_INT 3
10756: PPUSH
10757: CALL_OW 12
10761: ARRAY
10762: ADD
10763: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
10764: LD_ADDR_EXP 41
10768: PUSH
10769: LD_EXP 41
10773: PUSH
10774: LD_INT 13
10776: PUSH
10777: LD_INT 1
10779: PUSH
10780: LD_INT 2
10782: PUSH
10783: EMPTY
10784: LIST
10785: LIST
10786: LIST
10787: ADD
10788: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
10789: LD_ADDR_EXP 41
10793: PUSH
10794: LD_EXP 41
10798: PUSH
10799: LD_INT 28
10801: PUSH
10802: LD_INT 27
10804: PUSH
10805: LD_INT 29
10807: PUSH
10808: EMPTY
10809: LIST
10810: LIST
10811: LIST
10812: PUSH
10813: LD_INT 1
10815: PPUSH
10816: LD_INT 3
10818: PPUSH
10819: CALL_OW 12
10823: ARRAY
10824: ADD
10825: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
10826: LD_ADDR_EXP 41
10830: PUSH
10831: LD_EXP 41
10835: PUSH
10836: LD_INT 13
10838: PUSH
10839: LD_INT 1
10841: PUSH
10842: LD_INT 2
10844: PUSH
10845: EMPTY
10846: LIST
10847: LIST
10848: LIST
10849: ADD
10850: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_mortar , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
10851: LD_ADDR_EXP 41
10855: PUSH
10856: LD_EXP 41
10860: PUSH
10861: LD_INT 28
10863: PUSH
10864: LD_EXP 65
10868: PUSH
10869: LD_INT 29
10871: PUSH
10872: EMPTY
10873: LIST
10874: LIST
10875: LIST
10876: PUSH
10877: LD_INT 1
10879: PPUSH
10880: LD_INT 3
10882: PPUSH
10883: CALL_OW 12
10887: ARRAY
10888: ADD
10889: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
10890: LD_ADDR_EXP 41
10894: PUSH
10895: LD_EXP 41
10899: PUSH
10900: LD_INT 13
10902: PUSH
10903: LD_INT 1
10905: PUSH
10906: LD_INT 2
10908: PUSH
10909: EMPTY
10910: LIST
10911: LIST
10912: LIST
10913: ADD
10914: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
10915: LD_ADDR_EXP 41
10919: PUSH
10920: LD_EXP 41
10924: PUSH
10925: LD_INT 28
10927: PUSH
10928: LD_INT 27
10930: PUSH
10931: LD_INT 29
10933: PUSH
10934: EMPTY
10935: LIST
10936: LIST
10937: LIST
10938: PUSH
10939: LD_INT 1
10941: PPUSH
10942: LD_INT 3
10944: PPUSH
10945: CALL_OW 12
10949: ARRAY
10950: ADD
10951: ST_TO_ADDR
// end ; if legion_force >= 8 then
10952: LD_EXP 37
10956: PUSH
10957: LD_INT 8
10959: GREATEREQUAL
10960: IFFALSE 10971
// RaiseSailEvent ( event_legion_attack ) ;
10962: LD_EXP 21
10966: PPUSH
10967: CALL_OW 427
// end ; if FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_cargo_bay ] ] ) then
10971: LD_INT 22
10973: PUSH
10974: LD_INT 8
10976: PUSH
10977: EMPTY
10978: LIST
10979: LIST
10980: PUSH
10981: LD_INT 34
10983: PUSH
10984: LD_INT 32
10986: PUSH
10987: EMPTY
10988: LIST
10989: LIST
10990: PUSH
10991: EMPTY
10992: LIST
10993: LIST
10994: PPUSH
10995: CALL_OW 69
10999: IFFALSE 11113
// begin if l_cargo = false then
11001: LD_VAR 0 17
11005: PUSH
11006: LD_INT 0
11008: EQUAL
11009: IFFALSE 11045
// l_cargo := FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_cargo_bay ] ] ) ;
11011: LD_ADDR_VAR 0 17
11015: PUSH
11016: LD_INT 22
11018: PUSH
11019: LD_INT 8
11021: PUSH
11022: EMPTY
11023: LIST
11024: LIST
11025: PUSH
11026: LD_INT 34
11028: PUSH
11029: LD_INT 32
11031: PUSH
11032: EMPTY
11033: LIST
11034: LIST
11035: PUSH
11036: EMPTY
11037: LIST
11038: LIST
11039: PPUSH
11040: CALL_OW 69
11044: ST_TO_ADDR
// if l_cargo then
11045: LD_VAR 0 17
11049: IFFALSE 11113
// begin cr := GetListOfCratesInArea ( legion_crates ) ;
11051: LD_ADDR_VAR 0 7
11055: PUSH
11056: LD_INT 14
11058: PPUSH
11059: CALL_OW 435
11063: ST_TO_ADDR
// if cr > 0 then
11064: LD_VAR 0 7
11068: PUSH
11069: LD_INT 0
11071: GREATER
11072: IFFALSE 11113
// if not HasTask ( l_cargo ) then
11074: LD_VAR 0 17
11078: PPUSH
11079: CALL_OW 314
11083: NOT
11084: IFFALSE 11113
// ComCollect ( l_cargo , cr [ 1 ] , cr [ 2 ] ) ;
11086: LD_VAR 0 17
11090: PPUSH
11091: LD_VAR 0 7
11095: PUSH
11096: LD_INT 1
11098: ARRAY
11099: PPUSH
11100: LD_VAR 0 7
11104: PUSH
11105: LD_INT 2
11107: ARRAY
11108: PPUSH
11109: CALL_OW 117
// end ; end ; end ;
11113: PPOPN 17
11115: END
// every 9 9$00 trigger difficulty > 1 do var i , sci , sib , p ;
11116: LD_OWVAR 67
11120: PUSH
11121: LD_INT 1
11123: GREATER
11124: IFFALSE 11329
11126: GO 11128
11128: DISABLE
11129: LD_INT 0
11131: PPUSH
11132: PPUSH
11133: PPUSH
11134: PPUSH
// begin Wait ( Rand ( 0 0$01 , 6 6$01 ) ) ;
11135: LD_INT 35
11137: PPUSH
11138: LD_INT 12635
11140: PPUSH
11141: CALL_OW 12
11145: PPUSH
11146: CALL_OW 67
// sci := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 4 ] ] ) ;
11150: LD_ADDR_VAR 0 2
11154: PUSH
11155: LD_INT 22
11157: PUSH
11158: LD_INT 8
11160: PUSH
11161: EMPTY
11162: LIST
11163: LIST
11164: PUSH
11165: LD_INT 25
11167: PUSH
11168: LD_INT 4
11170: PUSH
11171: EMPTY
11172: LIST
11173: LIST
11174: PUSH
11175: EMPTY
11176: LIST
11177: LIST
11178: PPUSH
11179: CALL_OW 69
11183: ST_TO_ADDR
// p := 1 ;
11184: LD_ADDR_VAR 0 4
11188: PUSH
11189: LD_INT 1
11191: ST_TO_ADDR
// sib := [ 116 , 139 , 69 , 13 ] ;
11192: LD_ADDR_VAR 0 3
11196: PUSH
11197: LD_INT 116
11199: PUSH
11200: LD_INT 139
11202: PUSH
11203: LD_INT 69
11205: PUSH
11206: LD_INT 13
11208: PUSH
11209: EMPTY
11210: LIST
11211: LIST
11212: LIST
11213: LIST
11214: ST_TO_ADDR
// for i = 1 to 2 do
11215: LD_ADDR_VAR 0 1
11219: PUSH
11220: DOUBLE
11221: LD_INT 1
11223: DEC
11224: ST_TO_ADDR
11225: LD_INT 2
11227: PUSH
11228: FOR_TO
11229: IFFALSE 11327
// begin if IsInUnit ( sci [ i ] ) then
11231: LD_VAR 0 2
11235: PUSH
11236: LD_VAR 0 1
11240: ARRAY
11241: PPUSH
11242: CALL_OW 310
11246: IFFALSE 11263
// ComExitBuilding ( sci [ i ] ) ;
11248: LD_VAR 0 2
11252: PUSH
11253: LD_VAR 0 1
11257: ARRAY
11258: PPUSH
11259: CALL_OW 122
// Wait ( 0 0$03 ) ;
11263: LD_INT 105
11265: PPUSH
11266: CALL_OW 67
// ComContaminate ( sci [ i ] , sib [ p ] , sib [ p + 1 ] ) ;
11270: LD_VAR 0 2
11274: PUSH
11275: LD_VAR 0 1
11279: ARRAY
11280: PPUSH
11281: LD_VAR 0 3
11285: PUSH
11286: LD_VAR 0 4
11290: ARRAY
11291: PPUSH
11292: LD_VAR 0 3
11296: PUSH
11297: LD_VAR 0 4
11301: PUSH
11302: LD_INT 1
11304: PLUS
11305: ARRAY
11306: PPUSH
11307: CALL_OW 158
// p := p + 2 ;
11311: LD_ADDR_VAR 0 4
11315: PUSH
11316: LD_VAR 0 4
11320: PUSH
11321: LD_INT 2
11323: PLUS
11324: ST_TO_ADDR
// end ;
11325: GO 11228
11327: POP
11328: POP
// end ;
11329: PPOPN 4
11331: END
// every 3 3$30 trigger GetListOfCratesInArea ( legion_crates ) < 20 do
11332: LD_INT 14
11334: PPUSH
11335: CALL_OW 435
11339: PUSH
11340: LD_INT 20
11342: LESS
11343: IFFALSE 11370
11345: GO 11347
11347: DISABLE
// begin enable ;
11348: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , legion_crates , true ) ;
11349: LD_INT 1
11351: PPUSH
11352: LD_INT 5
11354: PPUSH
11355: CALL_OW 12
11359: PPUSH
11360: LD_INT 14
11362: PPUSH
11363: LD_INT 1
11365: PPUSH
11366: CALL_OW 55
// end ;
11370: END
// export function LegionAttack ( ) ; var path , units ; begin
11371: LD_INT 0
11373: PPUSH
11374: PPUSH
11375: PPUSH
// units := legion_force ;
11376: LD_ADDR_VAR 0 3
11380: PUSH
11381: LD_EXP 37
11385: ST_TO_ADDR
// legion_force := [ ] ;
11386: LD_ADDR_EXP 37
11390: PUSH
11391: EMPTY
11392: ST_TO_ADDR
// case legion_enemy of 1 :
11393: LD_EXP 42
11397: PUSH
11398: LD_INT 1
11400: DOUBLE
11401: EQUAL
11402: IFTRUE 11406
11404: GO 11449
11406: POP
// path := [ [ 174 , 135 ] , [ 153 , 146 ] , [ 118 , 122 ] ] ; 2 :
11407: LD_ADDR_VAR 0 2
11411: PUSH
11412: LD_INT 174
11414: PUSH
11415: LD_INT 135
11417: PUSH
11418: EMPTY
11419: LIST
11420: LIST
11421: PUSH
11422: LD_INT 153
11424: PUSH
11425: LD_INT 146
11427: PUSH
11428: EMPTY
11429: LIST
11430: LIST
11431: PUSH
11432: LD_INT 118
11434: PUSH
11435: LD_INT 122
11437: PUSH
11438: EMPTY
11439: LIST
11440: LIST
11441: PUSH
11442: EMPTY
11443: LIST
11444: LIST
11445: LIST
11446: ST_TO_ADDR
11447: GO 11552
11449: LD_INT 2
11451: DOUBLE
11452: EQUAL
11453: IFTRUE 11457
11455: GO 11500
11457: POP
// path := [ [ 164 , 73 ] , [ 130 , 48 ] , [ 96 , 48 ] ] ; 7 :
11458: LD_ADDR_VAR 0 2
11462: PUSH
11463: LD_INT 164
11465: PUSH
11466: LD_INT 73
11468: PUSH
11469: EMPTY
11470: LIST
11471: LIST
11472: PUSH
11473: LD_INT 130
11475: PUSH
11476: LD_INT 48
11478: PUSH
11479: EMPTY
11480: LIST
11481: LIST
11482: PUSH
11483: LD_INT 96
11485: PUSH
11486: LD_INT 48
11488: PUSH
11489: EMPTY
11490: LIST
11491: LIST
11492: PUSH
11493: EMPTY
11494: LIST
11495: LIST
11496: LIST
11497: ST_TO_ADDR
11498: GO 11552
11500: LD_INT 7
11502: DOUBLE
11503: EQUAL
11504: IFTRUE 11508
11506: GO 11551
11508: POP
// path := [ [ 174 , 135 ] , [ 153 , 146 ] , [ 118 , 122 ] ] ; end ;
11509: LD_ADDR_VAR 0 2
11513: PUSH
11514: LD_INT 174
11516: PUSH
11517: LD_INT 135
11519: PUSH
11520: EMPTY
11521: LIST
11522: LIST
11523: PUSH
11524: LD_INT 153
11526: PUSH
11527: LD_INT 146
11529: PUSH
11530: EMPTY
11531: LIST
11532: LIST
11533: PUSH
11534: LD_INT 118
11536: PUSH
11537: LD_INT 122
11539: PUSH
11540: EMPTY
11541: LIST
11542: LIST
11543: PUSH
11544: EMPTY
11545: LIST
11546: LIST
11547: LIST
11548: ST_TO_ADDR
11549: GO 11552
11551: POP
// repeat wait ( 0 0$1 ) ;
11552: LD_INT 35
11554: PPUSH
11555: CALL_OW 67
// until not AgressiveMove ( units , path ) ;
11559: LD_VAR 0 3
11563: PPUSH
11564: LD_VAR 0 2
11568: PPUSH
11569: CALL 78078 0 2
11573: NOT
11574: IFFALSE 11552
// end ; end_of_file
11576: LD_VAR 0 1
11580: RET
// export function Action ; var un , gamemode , speaker ; begin
11581: LD_INT 0
11583: PPUSH
11584: PPUSH
11585: PPUSH
11586: PPUSH
// if debug then
11587: LD_EXP 15
11591: IFFALSE 11618
// begin Difficulty := 2 ;
11593: LD_ADDR_OWVAR 67
11597: PUSH
11598: LD_INT 2
11600: ST_TO_ADDR
// gamemode := 3 ;
11601: LD_ADDR_VAR 0 3
11605: PUSH
11606: LD_INT 3
11608: ST_TO_ADDR
// FogOff ( 7 ) ;
11609: LD_INT 7
11611: PPUSH
11612: CALL_OW 344
// end else
11616: GO 11644
// begin Difficulty := GetMultiplayerSetting ( 0 ) ;
11618: LD_ADDR_OWVAR 67
11622: PUSH
11623: LD_INT 0
11625: PPUSH
11626: CALL_OW 426
11630: ST_TO_ADDR
// gamemode := GetMultiplayerSetting ( 1 ) ;
11631: LD_ADDR_VAR 0 3
11635: PUSH
11636: LD_INT 1
11638: PPUSH
11639: CALL_OW 426
11643: ST_TO_ADDR
// end ; if gamemode = 1 then
11644: LD_VAR 0 3
11648: PUSH
11649: LD_INT 1
11651: EQUAL
11652: IFFALSE 11676
// begin your_side := 1 ;
11654: LD_ADDR_OWVAR 2
11658: PUSH
11659: LD_INT 1
11661: ST_TO_ADDR
// legion_enemy := 1 ;
11662: LD_ADDR_EXP 42
11666: PUSH
11667: LD_INT 1
11669: ST_TO_ADDR
// PrepareAmerican ;
11670: CALL 265 0 0
// end else
11674: GO 11728
// if gamemode = 2 then
11676: LD_VAR 0 3
11680: PUSH
11681: LD_INT 2
11683: EQUAL
11684: IFFALSE 11708
// begin your_side := 2 ;
11686: LD_ADDR_OWVAR 2
11690: PUSH
11691: LD_INT 2
11693: ST_TO_ADDR
// legion_enemy := 2 ;
11694: LD_ADDR_EXP 42
11698: PUSH
11699: LD_INT 2
11701: ST_TO_ADDR
// PrepareArabian ;
11702: CALL 18994 0 0
// end else
11706: GO 11728
// begin your_side := 7 ;
11708: LD_ADDR_OWVAR 2
11712: PUSH
11713: LD_INT 7
11715: ST_TO_ADDR
// legion_enemy := 7 ;
11716: LD_ADDR_EXP 42
11720: PUSH
11721: LD_INT 7
11723: ST_TO_ADDR
// PrepareAlliance ;
11724: CALL 16178 0 0
// end ; if your_side = 1 then
11728: LD_OWVAR 2
11732: PUSH
11733: LD_INT 1
11735: EQUAL
11736: IFFALSE 12312
// begin Query ( QVul4 ) ;
11738: LD_STRING QVul4
11740: PPUSH
11741: CALL_OW 97
// InGameOn ;
11745: CALL_OW 8
// PlaceSeeing ( 8 , 5 , 1 , 12 ) ;
11749: LD_INT 8
11751: PPUSH
11752: LD_INT 5
11754: PPUSH
11755: LD_INT 1
11757: PPUSH
11758: LD_INT 12
11760: PPUSH
11761: CALL_OW 330
// RemoveSeeing ( 8 , 5 , 1 ) ;
11765: LD_INT 8
11767: PPUSH
11768: LD_INT 5
11770: PPUSH
11771: LD_INT 1
11773: PPUSH
11774: CALL_OW 331
// PlaceSeeing ( 98 , 148 , 1 , 2 ) ;
11778: LD_INT 98
11780: PPUSH
11781: LD_INT 148
11783: PPUSH
11784: LD_INT 1
11786: PPUSH
11787: LD_INT 2
11789: PPUSH
11790: CALL_OW 330
// RemoveSeeing ( 98 , 148 , 1 ) ;
11794: LD_INT 98
11796: PPUSH
11797: LD_INT 148
11799: PPUSH
11800: LD_INT 1
11802: PPUSH
11803: CALL_OW 331
// CenterNowOnXY ( 8 , 5 ) ;
11807: LD_INT 8
11809: PPUSH
11810: LD_INT 5
11812: PPUSH
11813: CALL_OW 86
// uc_side := 4 ;
11817: LD_ADDR_OWVAR 20
11821: PUSH
11822: LD_INT 4
11824: ST_TO_ADDR
// uc_nation := 1 ;
11825: LD_ADDR_OWVAR 21
11829: PUSH
11830: LD_INT 1
11832: ST_TO_ADDR
// hc_importance := 0 ;
11833: LD_ADDR_OWVAR 32
11837: PUSH
11838: LD_INT 0
11840: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , us_skill ) ;
11841: LD_INT 1
11843: PPUSH
11844: LD_INT 3
11846: PPUSH
11847: LD_EXP 26
11851: PPUSH
11852: CALL_OW 380
// un := CreateHuman ;
11856: LD_ADDR_VAR 0 2
11860: PUSH
11861: CALL_OW 44
11865: ST_TO_ADDR
// PlaceUnitXY ( un , 19 , 23 , false ) ;
11866: LD_VAR 0 2
11870: PPUSH
11871: LD_INT 19
11873: PPUSH
11874: LD_INT 23
11876: PPUSH
11877: LD_INT 0
11879: PPUSH
11880: CALL_OW 48
// hc_name := Stuart Carey ;
11884: LD_ADDR_OWVAR 26
11888: PUSH
11889: LD_STRING Stuart Carey
11891: ST_TO_ADDR
// hc_class := 1 ;
11892: LD_ADDR_OWVAR 28
11896: PUSH
11897: LD_INT 1
11899: ST_TO_ADDR
// hc_gallery := vulcano ;
11900: LD_ADDR_OWVAR 33
11904: PUSH
11905: LD_STRING vulcano
11907: ST_TO_ADDR
// hc_face_number := 1 ;
11908: LD_ADDR_OWVAR 34
11912: PUSH
11913: LD_INT 1
11915: ST_TO_ADDR
// us_guy := CreateHuman ;
11916: LD_ADDR_EXP 27
11920: PUSH
11921: CALL_OW 44
11925: ST_TO_ADDR
// InitHc ;
11926: CALL_OW 19
// if rand ( 0 , 1 ) then
11930: LD_INT 0
11932: PPUSH
11933: LD_INT 1
11935: PPUSH
11936: CALL_OW 12
11940: IFFALSE 11957
// PrepareHuman ( sex_male , 3 , 6 ) else
11942: LD_INT 1
11944: PPUSH
11945: LD_INT 3
11947: PPUSH
11948: LD_INT 6
11950: PPUSH
11951: CALL_OW 380
11955: GO 11970
// PrepareHuman ( sex_female , 4 , 8 ) ;
11957: LD_INT 2
11959: PPUSH
11960: LD_INT 4
11962: PPUSH
11963: LD_INT 8
11965: PPUSH
11966: CALL_OW 380
// ComMoveXY ( un , 12 , 10 ) ;
11970: LD_VAR 0 2
11974: PPUSH
11975: LD_INT 12
11977: PPUSH
11978: LD_INT 10
11980: PPUSH
11981: CALL_OW 111
// ComTurnUnit ( us_commander , un ) ;
11985: LD_EXP 24
11989: PPUSH
11990: LD_VAR 0 2
11994: PPUSH
11995: CALL_OW 119
// repeat wait ( 0 0$3 ) ;
11999: LD_INT 105
12001: PPUSH
12002: CALL_OW 67
// until See ( 4 , us_commander ) or IsAt ( un , 12 , 10 ) ;
12006: LD_INT 4
12008: PPUSH
12009: LD_EXP 24
12013: PPUSH
12014: CALL_OW 292
12018: PUSH
12019: LD_VAR 0 2
12023: PPUSH
12024: LD_INT 12
12026: PPUSH
12027: LD_INT 10
12029: PPUSH
12030: CALL_OW 307
12034: OR
12035: IFFALSE 11999
// ComTurnUnit ( un , us_commander ) ;
12037: LD_VAR 0 2
12041: PPUSH
12042: LD_EXP 24
12046: PPUSH
12047: CALL_OW 119
// if GetSex ( un ) = sex_male then
12051: LD_VAR 0 2
12055: PPUSH
12056: CALL_OW 258
12060: PUSH
12061: LD_INT 1
12063: EQUAL
12064: IFFALSE 12147
// begin Say ( un , VD-un1 ) ;
12066: LD_VAR 0 2
12070: PPUSH
12071: LD_STRING VD-un1
12073: PPUSH
12074: CALL_OW 88
// Say ( us_commander , VDc-1 ) ;
12078: LD_EXP 24
12082: PPUSH
12083: LD_STRING VDc-1
12085: PPUSH
12086: CALL_OW 88
// Say ( un , VD-un2 ) ;
12090: LD_VAR 0 2
12094: PPUSH
12095: LD_STRING VD-un2
12097: PPUSH
12098: CALL_OW 88
// Say ( us_commander , VDc-2 ) ;
12102: LD_EXP 24
12106: PPUSH
12107: LD_STRING VDc-2
12109: PPUSH
12110: CALL_OW 88
// Say ( un , VD-un3 ) ;
12114: LD_VAR 0 2
12118: PPUSH
12119: LD_STRING VD-un3
12121: PPUSH
12122: CALL_OW 88
// wait ( 0 0$0.2 ) ;
12126: LD_INT 7
12128: PPUSH
12129: CALL_OW 67
// Say ( un , VD-un4 ) ;
12133: LD_VAR 0 2
12137: PPUSH
12138: LD_STRING VD-un4
12140: PPUSH
12141: CALL_OW 88
// end else
12145: GO 12226
// begin Say ( un , VD-unf1 ) ;
12147: LD_VAR 0 2
12151: PPUSH
12152: LD_STRING VD-unf1
12154: PPUSH
12155: CALL_OW 88
// Say ( us_commander , VDc-1 ) ;
12159: LD_EXP 24
12163: PPUSH
12164: LD_STRING VDc-1
12166: PPUSH
12167: CALL_OW 88
// Say ( un , VD-unf2 ) ;
12171: LD_VAR 0 2
12175: PPUSH
12176: LD_STRING VD-unf2
12178: PPUSH
12179: CALL_OW 88
// Say ( us_commander , VDc-2 ) ;
12183: LD_EXP 24
12187: PPUSH
12188: LD_STRING VDc-2
12190: PPUSH
12191: CALL_OW 88
// Say ( un , VD-unf3 ) ;
12195: LD_VAR 0 2
12199: PPUSH
12200: LD_STRING VD-unf3
12202: PPUSH
12203: CALL_OW 88
// wait ( 0 0$0.2 ) ;
12207: LD_INT 7
12209: PPUSH
12210: CALL_OW 67
// Say ( un , VD-unf4 ) ;
12214: LD_VAR 0 2
12218: PPUSH
12219: LD_STRING VD-unf4
12221: PPUSH
12222: CALL_OW 88
// end ; ComMoveXY ( un , 2 , 2 ) ;
12226: LD_VAR 0 2
12230: PPUSH
12231: LD_INT 2
12233: PPUSH
12234: LD_INT 2
12236: PPUSH
12237: CALL_OW 111
// Say ( us_commander , VDc-3 ) ;
12241: LD_EXP 24
12245: PPUSH
12246: LD_STRING VDc-3
12248: PPUSH
12249: CALL_OW 88
// InGameOff ;
12253: CALL_OW 9
// ChangeMissionObjectives ( CVulc1 ) ;
12257: LD_STRING CVulc1
12259: PPUSH
12260: CALL_OW 337
// repeat Wait ( 0 0$01 ) ;
12264: LD_INT 35
12266: PPUSH
12267: CALL_OW 67
// until GetX ( un ) = 2 and GetY ( un ) = 2 ;
12271: LD_VAR 0 2
12275: PPUSH
12276: CALL_OW 250
12280: PUSH
12281: LD_INT 2
12283: EQUAL
12284: PUSH
12285: LD_VAR 0 2
12289: PPUSH
12290: CALL_OW 251
12294: PUSH
12295: LD_INT 2
12297: EQUAL
12298: AND
12299: IFFALSE 12264
// RemoveUnit ( un ) ;
12301: LD_VAR 0 2
12305: PPUSH
12306: CALL_OW 64
// end else
12310: GO 12689
// if your_side = 2 then
12312: LD_OWVAR 2
12316: PUSH
12317: LD_INT 2
12319: EQUAL
12320: IFFALSE 12536
// begin CenterNowOnUnits ( player_commander ) ;
12322: LD_EXP 11
12326: PPUSH
12327: CALL_OW 87
// speaker := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff ar_commander ;
12331: LD_ADDR_VAR 0 4
12335: PUSH
12336: LD_INT 22
12338: PUSH
12339: LD_INT 2
12341: PUSH
12342: EMPTY
12343: LIST
12344: LIST
12345: PUSH
12346: LD_INT 21
12348: PUSH
12349: LD_INT 1
12351: PUSH
12352: EMPTY
12353: LIST
12354: LIST
12355: PUSH
12356: EMPTY
12357: LIST
12358: LIST
12359: PPUSH
12360: CALL_OW 69
12364: PUSH
12365: LD_EXP 57
12369: DIFF
12370: ST_TO_ADDR
// if speaker then
12371: LD_VAR 0 4
12375: IFFALSE 12527
// begin InGameOn ;
12377: CALL_OW 8
// Say ( ar_commander , VSd-1 ) ;
12381: LD_EXP 57
12385: PPUSH
12386: LD_STRING VSd-1
12388: PPUSH
12389: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
12393: LD_VAR 0 4
12397: PUSH
12398: LD_INT 1
12400: ARRAY
12401: PPUSH
12402: CALL_OW 258
12406: PUSH
12407: LD_INT 1
12409: EQUAL
12410: IFFALSE 12430
// Say ( speaker [ 1 ] , VAd-1 ) else
12412: LD_VAR 0 4
12416: PUSH
12417: LD_INT 1
12419: ARRAY
12420: PPUSH
12421: LD_STRING VAd-1
12423: PPUSH
12424: CALL_OW 88
12428: GO 12446
// Say ( speaker [ 1 ] , VAfd-1 ) ;
12430: LD_VAR 0 4
12434: PUSH
12435: LD_INT 1
12437: ARRAY
12438: PPUSH
12439: LD_STRING VAfd-1
12441: PPUSH
12442: CALL_OW 88
// Say ( ar_commander , VSd-2 ) ;
12446: LD_EXP 57
12450: PPUSH
12451: LD_STRING VSd-2
12453: PPUSH
12454: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
12458: LD_VAR 0 4
12462: PUSH
12463: LD_INT 1
12465: ARRAY
12466: PPUSH
12467: CALL_OW 258
12471: PUSH
12472: LD_INT 1
12474: EQUAL
12475: IFFALSE 12495
// Say ( speaker [ 1 ] , VAd-2 ) else
12477: LD_VAR 0 4
12481: PUSH
12482: LD_INT 1
12484: ARRAY
12485: PPUSH
12486: LD_STRING VAd-2
12488: PPUSH
12489: CALL_OW 88
12493: GO 12511
// Say ( speaker [ 1 ] , VAfd-2 ) ;
12495: LD_VAR 0 4
12499: PUSH
12500: LD_INT 1
12502: ARRAY
12503: PPUSH
12504: LD_STRING VAfd-2
12506: PPUSH
12507: CALL_OW 88
// Say ( ar_commander , VSd-3 ) ;
12511: LD_EXP 57
12515: PPUSH
12516: LD_STRING VSd-3
12518: PPUSH
12519: CALL_OW 88
// InGameOff ;
12523: CALL_OW 9
// end ; ChangeMissionObjectives ( CVulc5 ) ;
12527: LD_STRING CVulc5
12529: PPUSH
12530: CALL_OW 337
// end else
12534: GO 12689
// if your_side = 7 then
12536: LD_OWVAR 2
12540: PUSH
12541: LD_INT 7
12543: EQUAL
12544: IFFALSE 12689
// begin speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) diff al_commander ;
12546: LD_ADDR_VAR 0 4
12550: PUSH
12551: LD_INT 22
12553: PUSH
12554: LD_INT 7
12556: PUSH
12557: EMPTY
12558: LIST
12559: LIST
12560: PUSH
12561: LD_INT 21
12563: PUSH
12564: LD_INT 1
12566: PUSH
12567: EMPTY
12568: LIST
12569: LIST
12570: PUSH
12571: EMPTY
12572: LIST
12573: LIST
12574: PPUSH
12575: CALL_OW 69
12579: PUSH
12580: LD_EXP 43
12584: DIFF
12585: ST_TO_ADDR
// if speaker then
12586: LD_VAR 0 4
12590: IFFALSE 12682
// begin CenterNowOnUnits ( al_commander ) ;
12592: LD_EXP 43
12596: PPUSH
12597: CALL_OW 87
// InGameOn ;
12601: CALL_OW 8
// Say ( al_commander , VPd-1 ) ;
12605: LD_EXP 43
12609: PPUSH
12610: LD_STRING VPd-1
12612: PPUSH
12613: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) then
12617: LD_VAR 0 4
12621: PUSH
12622: LD_INT 1
12624: ARRAY
12625: PPUSH
12626: CALL_OW 258
12630: IFFALSE 12650
// Say ( speaker [ 1 ] , VPpd-1 ) else
12632: LD_VAR 0 4
12636: PUSH
12637: LD_INT 1
12639: ARRAY
12640: PPUSH
12641: LD_STRING VPpd-1
12643: PPUSH
12644: CALL_OW 88
12648: GO 12666
// Say ( speaker [ 1 ] , VPpdf-1 ) ;
12650: LD_VAR 0 4
12654: PUSH
12655: LD_INT 1
12657: ARRAY
12658: PPUSH
12659: LD_STRING VPpdf-1
12661: PPUSH
12662: CALL_OW 88
// Say ( al_commander , VPd-2 ) ;
12666: LD_EXP 43
12670: PPUSH
12671: LD_STRING VPd-2
12673: PPUSH
12674: CALL_OW 88
// InGameOff ;
12678: CALL_OW 9
// end ; ChangeMissionObjectives ( CVulc7 ) ;
12682: LD_STRING CVulc7
12684: PPUSH
12685: CALL_OW 337
// end ; SaveForQuickRestart ;
12689: CALL_OW 22
// end ;
12693: LD_VAR 0 1
12697: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) do
12698: LD_INT 22
12700: PUSH
12701: LD_INT 2
12703: PUSH
12704: EMPTY
12705: LIST
12706: LIST
12707: PUSH
12708: LD_INT 30
12710: PUSH
12711: LD_INT 3
12713: PUSH
12714: EMPTY
12715: LIST
12716: LIST
12717: PUSH
12718: EMPTY
12719: LIST
12720: LIST
12721: PPUSH
12722: CALL_OW 69
12726: IFFALSE 12770
12728: GO 12730
12730: DISABLE
// begin ChangeMissionObjectives ( CVulc6 ) ;
12731: LD_STRING CVulc6
12733: PPUSH
12734: CALL_OW 337
// Wait ( [ 25 25$00 , 22 22$30 , 20 20$00 ] [ Difficulty ] ) ;
12738: LD_INT 52500
12740: PUSH
12741: LD_INT 47250
12743: PUSH
12744: LD_INT 42000
12746: PUSH
12747: EMPTY
12748: LIST
12749: LIST
12750: LIST
12751: PUSH
12752: LD_OWVAR 67
12756: ARRAY
12757: PPUSH
12758: CALL_OW 67
// ru_can_attack := true ;
12762: LD_ADDR_EXP 3
12766: PUSH
12767: LD_INT 1
12769: ST_TO_ADDR
// end ;
12770: END
// every 0 0$01 trigger GetSide ( us_depot ) = 1 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_warehouse ] ] ] ) do var speaker ;
12771: LD_INT 50
12773: PPUSH
12774: CALL_OW 255
12778: PUSH
12779: LD_INT 1
12781: EQUAL
12782: PUSH
12783: LD_INT 22
12785: PUSH
12786: LD_INT 1
12788: PUSH
12789: EMPTY
12790: LIST
12791: LIST
12792: PUSH
12793: LD_INT 2
12795: PUSH
12796: LD_INT 30
12798: PUSH
12799: LD_INT 3
12801: PUSH
12802: EMPTY
12803: LIST
12804: LIST
12805: PUSH
12806: LD_INT 30
12808: PUSH
12809: LD_INT 1
12811: PUSH
12812: EMPTY
12813: LIST
12814: LIST
12815: PUSH
12816: EMPTY
12817: LIST
12818: LIST
12819: LIST
12820: PUSH
12821: EMPTY
12822: LIST
12823: LIST
12824: PPUSH
12825: CALL_OW 69
12829: OR
12830: IFFALSE 13064
12832: GO 12834
12834: DISABLE
12835: LD_INT 0
12837: PPUSH
// begin ChangeMissionObjectives ( CVulc2 ) ;
12838: LD_STRING CVulc2
12840: PPUSH
12841: CALL_OW 337
// speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) diff us_commander ;
12845: LD_ADDR_VAR 0 1
12849: PUSH
12850: LD_INT 22
12852: PUSH
12853: LD_INT 1
12855: PUSH
12856: EMPTY
12857: LIST
12858: LIST
12859: PUSH
12860: LD_INT 25
12862: PUSH
12863: LD_INT 2
12865: PUSH
12866: EMPTY
12867: LIST
12868: LIST
12869: PUSH
12870: EMPTY
12871: LIST
12872: LIST
12873: PPUSH
12874: CALL_OW 69
12878: PUSH
12879: LD_EXP 24
12883: DIFF
12884: ST_TO_ADDR
// DialogueOn ;
12885: CALL_OW 6
// DWait ( 0 0$0.3 ) ;
12889: LD_INT 10
12891: PPUSH
12892: CALL_OW 68
// if GetSex ( speaker [ 1 ] ) = sex_male then
12896: LD_VAR 0 1
12900: PUSH
12901: LD_INT 1
12903: ARRAY
12904: PPUSH
12905: CALL_OW 258
12909: PUSH
12910: LD_INT 1
12912: EQUAL
12913: IFFALSE 12933
// Say ( speaker [ 1 ] , VDb-1 ) else
12915: LD_VAR 0 1
12919: PUSH
12920: LD_INT 1
12922: ARRAY
12923: PPUSH
12924: LD_STRING VDb-1
12926: PPUSH
12927: CALL_OW 88
12931: GO 12949
// Say ( speaker [ 1 ] , VDbf-1 ) ;
12933: LD_VAR 0 1
12937: PUSH
12938: LD_INT 1
12940: ARRAY
12941: PPUSH
12942: LD_STRING VDbf-1
12944: PPUSH
12945: CALL_OW 88
// DWait ( 0 0$0.3 ) ;
12949: LD_INT 10
12951: PPUSH
12952: CALL_OW 68
// if GetSex ( speaker [ 1 ] ) = sex_male then
12956: LD_VAR 0 1
12960: PUSH
12961: LD_INT 1
12963: ARRAY
12964: PPUSH
12965: CALL_OW 258
12969: PUSH
12970: LD_INT 1
12972: EQUAL
12973: IFFALSE 12993
// Say ( speaker [ 1 ] , VDb-2 ) else
12975: LD_VAR 0 1
12979: PUSH
12980: LD_INT 1
12982: ARRAY
12983: PPUSH
12984: LD_STRING VDb-2
12986: PPUSH
12987: CALL_OW 88
12991: GO 13009
// Say ( speaker [ 1 ] , VDbf-2 ) ;
12993: LD_VAR 0 1
12997: PUSH
12998: LD_INT 1
13000: ARRAY
13001: PPUSH
13002: LD_STRING VDbf-2
13004: PPUSH
13005: CALL_OW 88
// DWait ( 0 0$01 ) ;
13009: LD_INT 35
13011: PPUSH
13012: CALL_OW 68
// Say ( us_commander , VDb-com1 ) ;
13016: LD_EXP 24
13020: PPUSH
13021: LD_STRING VDb-com1
13023: PPUSH
13024: CALL_OW 88
// DialogueOff ;
13028: CALL_OW 7
// Wait ( [ 21 21$00 , 17 17$30 , 15 15$00 ] [ Difficulty ] ) ;
13032: LD_INT 44100
13034: PUSH
13035: LD_INT 36750
13037: PUSH
13038: LD_INT 31500
13040: PUSH
13041: EMPTY
13042: LIST
13043: LIST
13044: LIST
13045: PUSH
13046: LD_OWVAR 67
13050: ARRAY
13051: PPUSH
13052: CALL_OW 67
// ru_can_attack := true ;
13056: LD_ADDR_EXP 3
13060: PUSH
13061: LD_INT 1
13063: ST_TO_ADDR
// end ;
13064: PPOPN 1
13066: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) do
13067: LD_INT 22
13069: PUSH
13070: LD_INT 7
13072: PUSH
13073: EMPTY
13074: LIST
13075: LIST
13076: PUSH
13077: LD_INT 30
13079: PUSH
13080: LD_INT 3
13082: PUSH
13083: EMPTY
13084: LIST
13085: LIST
13086: PUSH
13087: EMPTY
13088: LIST
13089: LIST
13090: PPUSH
13091: CALL_OW 69
13095: IFFALSE 13132
13097: GO 13099
13099: DISABLE
// begin Wait ( [ 20 20$00 , 16 16$30 , 14 14$00 ] [ Difficulty ] ) ;
13100: LD_INT 42000
13102: PUSH
13103: LD_INT 34650
13105: PUSH
13106: LD_INT 29400
13108: PUSH
13109: EMPTY
13110: LIST
13111: LIST
13112: LIST
13113: PUSH
13114: LD_OWVAR 67
13118: ARRAY
13119: PPUSH
13120: CALL_OW 67
// ru_can_attack := true ;
13124: LD_ADDR_EXP 3
13128: PUSH
13129: LD_INT 1
13131: ST_TO_ADDR
// end ;
13132: END
// every 0 0$01 trigger GetSide ( us_lab ) = 1 do var speaker ;
13133: LD_INT 58
13135: PPUSH
13136: CALL_OW 255
13140: PUSH
13141: LD_INT 1
13143: EQUAL
13144: IFFALSE 13351
13146: GO 13148
13148: DISABLE
13149: LD_INT 0
13151: PPUSH
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
13152: LD_ADDR_VAR 0 1
13156: PUSH
13157: LD_INT 22
13159: PUSH
13160: LD_INT 1
13162: PUSH
13163: EMPTY
13164: LIST
13165: LIST
13166: PUSH
13167: LD_INT 25
13169: PUSH
13170: LD_INT 2
13172: PUSH
13173: EMPTY
13174: LIST
13175: LIST
13176: PUSH
13177: EMPTY
13178: LIST
13179: LIST
13180: PPUSH
13181: CALL_OW 69
13185: ST_TO_ADDR
// DialogueOn ;
13186: CALL_OW 6
// if speaker then
13190: LD_VAR 0 1
13194: IFFALSE 13249
// if GetSex ( speaker [ 1 ] ) = sex_male then
13196: LD_VAR 0 1
13200: PUSH
13201: LD_INT 1
13203: ARRAY
13204: PPUSH
13205: CALL_OW 258
13209: PUSH
13210: LD_INT 1
13212: EQUAL
13213: IFFALSE 13233
// Say ( speaker [ 1 ] , VDe-1 ) else
13215: LD_VAR 0 1
13219: PUSH
13220: LD_INT 1
13222: ARRAY
13223: PPUSH
13224: LD_STRING VDe-1
13226: PPUSH
13227: CALL_OW 88
13231: GO 13249
// Say ( speaker [ 1 ] , VDef-1 ) ;
13233: LD_VAR 0 1
13237: PUSH
13238: LD_INT 1
13240: ARRAY
13241: PPUSH
13242: LD_STRING VDef-1
13244: PPUSH
13245: CALL_OW 88
// case Query ( SibNote ) of 1 :
13249: LD_STRING SibNote
13251: PPUSH
13252: CALL_OW 97
13256: PUSH
13257: LD_INT 1
13259: DOUBLE
13260: EQUAL
13261: IFTRUE 13265
13263: GO 13268
13265: POP
// ; end ;
13266: GO 13269
13268: POP
// if speaker then
13269: LD_VAR 0 1
13273: IFFALSE 13328
// if GetSex ( speaker [ 1 ] ) = sex_male then
13275: LD_VAR 0 1
13279: PUSH
13280: LD_INT 1
13282: ARRAY
13283: PPUSH
13284: CALL_OW 258
13288: PUSH
13289: LD_INT 1
13291: EQUAL
13292: IFFALSE 13312
// Say ( speaker [ 1 ] , VDe-2 ) else
13294: LD_VAR 0 1
13298: PUSH
13299: LD_INT 1
13301: ARRAY
13302: PPUSH
13303: LD_STRING VDe-2
13305: PPUSH
13306: CALL_OW 88
13310: GO 13328
// Say ( speaker [ 1 ] , VDef-2 ) ;
13312: LD_VAR 0 1
13316: PUSH
13317: LD_INT 1
13319: ARRAY
13320: PPUSH
13321: LD_STRING VDef-2
13323: PPUSH
13324: CALL_OW 88
// Say ( us_commander , VDc-4 ) ;
13328: LD_EXP 24
13332: PPUSH
13333: LD_STRING VDc-4
13335: PPUSH
13336: CALL_OW 88
// DialogueOff ;
13340: CALL_OW 7
// ChangeMissionObjectives ( CVulc3 ) ;
13344: LD_STRING CVulc3
13346: PPUSH
13347: CALL_OW 337
// end ;
13351: PPOPN 1
13353: END
// every 0 0$01 trigger your_side = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) > 0 do var i , un , veh ;
13354: LD_OWVAR 2
13358: PUSH
13359: LD_INT 1
13361: EQUAL
13362: PUSH
13363: LD_INT 22
13365: PUSH
13366: LD_INT 1
13368: PUSH
13369: EMPTY
13370: LIST
13371: LIST
13372: PUSH
13373: LD_INT 30
13375: PUSH
13376: LD_INT 3
13378: PUSH
13379: EMPTY
13380: LIST
13381: LIST
13382: PUSH
13383: EMPTY
13384: LIST
13385: LIST
13386: PPUSH
13387: CALL_OW 69
13391: PUSH
13392: LD_INT 0
13394: GREATER
13395: AND
13396: IFFALSE 13830
13398: GO 13400
13400: DISABLE
13401: LD_INT 0
13403: PPUSH
13404: PPUSH
13405: PPUSH
// begin Wait ( Rand ( 0 0$07 , 0 0$37 ) ) ;
13406: LD_INT 245
13408: PPUSH
13409: LD_INT 1295
13411: PPUSH
13412: CALL_OW 12
13416: PPUSH
13417: CALL_OW 67
// DialogueOn ;
13421: CALL_OW 6
// SayRadio ( us_guy , VDG-1 ) ;
13425: LD_EXP 27
13429: PPUSH
13430: LD_STRING VDG-1
13432: PPUSH
13433: CALL_OW 94
// Say ( us_commander , VDc-5 ) ;
13437: LD_EXP 24
13441: PPUSH
13442: LD_STRING VDc-5
13444: PPUSH
13445: CALL_OW 88
// SayRadio ( us_guy , VDG-2 ) ;
13449: LD_EXP 27
13453: PPUSH
13454: LD_STRING VDG-2
13456: PPUSH
13457: CALL_OW 94
// Say ( us_commander , VDc-6 ) ;
13461: LD_EXP 24
13465: PPUSH
13466: LD_STRING VDc-6
13468: PPUSH
13469: CALL_OW 88
// SayRadio ( us_guy , VDG-3 ) ;
13473: LD_EXP 27
13477: PPUSH
13478: LD_STRING VDG-3
13480: PPUSH
13481: CALL_OW 94
// Say ( us_commander , VDc-7 ) ;
13485: LD_EXP 24
13489: PPUSH
13490: LD_STRING VDc-7
13492: PPUSH
13493: CALL_OW 88
// SayRadio ( us_guy , VDG-4 ) ;
13497: LD_EXP 27
13501: PPUSH
13502: LD_STRING VDG-4
13504: PPUSH
13505: CALL_OW 94
// DialogueOff ;
13509: CALL_OW 7
// ChangeMissionObjectives ( CVulc4 ) ;
13513: LD_STRING CVulc4
13515: PPUSH
13516: CALL_OW 337
// Wait ( [ 9 9$00 , 10 10$00 , 11 11$00 ] [ Difficulty ] ) ;
13520: LD_INT 18900
13522: PUSH
13523: LD_INT 21000
13525: PUSH
13526: LD_INT 23100
13528: PUSH
13529: EMPTY
13530: LIST
13531: LIST
13532: LIST
13533: PUSH
13534: LD_OWVAR 67
13538: ARRAY
13539: PPUSH
13540: CALL_OW 67
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
13544: LD_ADDR_VAR 0 1
13548: PUSH
13549: DOUBLE
13550: LD_INT 1
13552: DEC
13553: ST_TO_ADDR
13554: LD_INT 4
13556: PUSH
13557: LD_INT 5
13559: PUSH
13560: LD_INT 6
13562: PUSH
13563: EMPTY
13564: LIST
13565: LIST
13566: LIST
13567: PUSH
13568: LD_OWVAR 67
13572: ARRAY
13573: PUSH
13574: FOR_TO
13575: IFFALSE 13819
// begin uc_side := 1 ;
13577: LD_ADDR_OWVAR 20
13581: PUSH
13582: LD_INT 1
13584: ST_TO_ADDR
// uc_nation := 1 ;
13585: LD_ADDR_OWVAR 21
13589: PUSH
13590: LD_INT 1
13592: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , us_skill ) ;
13593: LD_INT 0
13595: PPUSH
13596: LD_INT 1
13598: PPUSH
13599: LD_INT 4
13601: PPUSH
13602: CALL_OW 12
13606: PPUSH
13607: LD_EXP 26
13611: PPUSH
13612: CALL_OW 380
// un := CreateHuman ;
13616: LD_ADDR_VAR 0 2
13620: PUSH
13621: CALL_OW 44
13625: ST_TO_ADDR
// SetDir ( un , 2 ) ;
13626: LD_VAR 0 2
13630: PPUSH
13631: LD_INT 2
13633: PPUSH
13634: CALL_OW 233
// if GetClass ( un ) = 3 then
13638: LD_VAR 0 2
13642: PPUSH
13643: CALL_OW 257
13647: PUSH
13648: LD_INT 3
13650: EQUAL
13651: IFFALSE 13802
// begin vc_chassis := [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 ] ;
13653: LD_ADDR_OWVAR 37
13657: PUSH
13658: LD_INT 2
13660: PUSH
13661: LD_INT 3
13663: PUSH
13664: EMPTY
13665: LIST
13666: LIST
13667: PUSH
13668: LD_VAR 0 1
13672: PUSH
13673: LD_INT 2
13675: MOD
13676: ARRAY
13677: ST_TO_ADDR
// vc_engine := engine_combustion ;
13678: LD_ADDR_OWVAR 39
13682: PUSH
13683: LD_INT 1
13685: ST_TO_ADDR
// vc_control := control_manual ;
13686: LD_ADDR_OWVAR 38
13690: PUSH
13691: LD_INT 1
13693: ST_TO_ADDR
// vc_weapon := [ us_laser , us_laser , us_double_gun , us_radar ] [ rand ( 1 , 4 ) ] ;
13694: LD_ADDR_OWVAR 40
13698: PUSH
13699: LD_INT 9
13701: PUSH
13702: LD_INT 9
13704: PUSH
13705: LD_INT 5
13707: PUSH
13708: LD_INT 11
13710: PUSH
13711: EMPTY
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: PUSH
13717: LD_INT 1
13719: PPUSH
13720: LD_INT 4
13722: PPUSH
13723: CALL_OW 12
13727: ARRAY
13728: ST_TO_ADDR
// veh := CreateVehicle ;
13729: LD_ADDR_VAR 0 3
13733: PUSH
13734: CALL_OW 45
13738: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
13739: LD_VAR 0 3
13743: PPUSH
13744: LD_INT 2
13746: PPUSH
13747: CALL_OW 233
// SetFuel ( veh , Rand ( 77 , 88 ) ) ;
13751: LD_VAR 0 3
13755: PPUSH
13756: LD_INT 77
13758: PPUSH
13759: LD_INT 88
13761: PPUSH
13762: CALL_OW 12
13766: PPUSH
13767: CALL_OW 240
// PlaceUnitArea ( veh , start_north , false ) ;
13771: LD_VAR 0 3
13775: PPUSH
13776: LD_INT 1
13778: PPUSH
13779: LD_INT 0
13781: PPUSH
13782: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
13786: LD_VAR 0 2
13790: PPUSH
13791: LD_VAR 0 3
13795: PPUSH
13796: CALL_OW 52
// end else
13800: GO 13817
// PlaceUnitArea ( un , start_north , false ) ;
13802: LD_VAR 0 2
13806: PPUSH
13807: LD_INT 1
13809: PPUSH
13810: LD_INT 0
13812: PPUSH
13813: CALL_OW 49
// end ;
13817: GO 13574
13819: POP
13820: POP
// CenterNowOnUnits ( un ) ;
13821: LD_VAR 0 2
13825: PPUSH
13826: CALL_OW 87
// end ;
13830: PPOPN 3
13832: END
// every 0 0$01 trigger FilterUnitsInArea ( vulc_artifact , [ f_side , your_side ] ) do var un , filter ;
13833: LD_INT 21
13835: PPUSH
13836: LD_INT 22
13838: PUSH
13839: LD_OWVAR 2
13843: PUSH
13844: EMPTY
13845: LIST
13846: LIST
13847: PPUSH
13848: CALL_OW 70
13852: IFFALSE 14173
13854: GO 13856
13856: DISABLE
13857: LD_INT 0
13859: PPUSH
13860: PPUSH
// begin filter := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff player_commander ;
13861: LD_ADDR_VAR 0 2
13865: PUSH
13866: LD_INT 22
13868: PUSH
13869: LD_OWVAR 2
13873: PUSH
13874: EMPTY
13875: LIST
13876: LIST
13877: PUSH
13878: LD_INT 2
13880: PUSH
13881: LD_INT 25
13883: PUSH
13884: LD_INT 1
13886: PUSH
13887: EMPTY
13888: LIST
13889: LIST
13890: PUSH
13891: LD_INT 25
13893: PUSH
13894: LD_INT 2
13896: PUSH
13897: EMPTY
13898: LIST
13899: LIST
13900: PUSH
13901: LD_INT 25
13903: PUSH
13904: LD_INT 3
13906: PUSH
13907: EMPTY
13908: LIST
13909: LIST
13910: PUSH
13911: LD_INT 25
13913: PUSH
13914: LD_INT 4
13916: PUSH
13917: EMPTY
13918: LIST
13919: LIST
13920: PUSH
13921: EMPTY
13922: LIST
13923: LIST
13924: LIST
13925: LIST
13926: LIST
13927: PUSH
13928: EMPTY
13929: LIST
13930: LIST
13931: PPUSH
13932: CALL_OW 69
13936: PUSH
13937: LD_EXP 11
13941: DIFF
13942: ST_TO_ADDR
// un := NearestUnitToXY ( filter , 112 , 67 ) ;
13943: LD_ADDR_VAR 0 1
13947: PUSH
13948: LD_VAR 0 2
13952: PPUSH
13953: LD_INT 112
13955: PPUSH
13956: LD_INT 67
13958: PPUSH
13959: CALL_OW 73
13963: ST_TO_ADDR
// if GetSide ( un ) = 7 then
13964: LD_VAR 0 1
13968: PPUSH
13969: CALL_OW 255
13973: PUSH
13974: LD_INT 7
13976: EQUAL
13977: IFFALSE 14020
// if GetSex ( un ) = sex_male then
13979: LD_VAR 0 1
13983: PPUSH
13984: CALL_OW 258
13988: PUSH
13989: LD_INT 1
13991: EQUAL
13992: IFFALSE 14008
// Say ( un , VD-find-al ) else
13994: LD_VAR 0 1
13998: PPUSH
13999: LD_STRING VD-find-al
14001: PPUSH
14002: CALL_OW 88
14006: GO 14020
// Say ( un , VD-find-al-f ) ;
14008: LD_VAR 0 1
14012: PPUSH
14013: LD_STRING VD-find-al-f
14015: PPUSH
14016: CALL_OW 88
// if GetSide ( un ) = 2 then
14020: LD_VAR 0 1
14024: PPUSH
14025: CALL_OW 255
14029: PUSH
14030: LD_INT 2
14032: EQUAL
14033: IFFALSE 14076
// if GetSex ( un ) = sex_male then
14035: LD_VAR 0 1
14039: PPUSH
14040: CALL_OW 258
14044: PUSH
14045: LD_INT 1
14047: EQUAL
14048: IFFALSE 14064
// Say ( un , VD-find-ar ) else
14050: LD_VAR 0 1
14054: PPUSH
14055: LD_STRING VD-find-ar
14057: PPUSH
14058: CALL_OW 88
14062: GO 14076
// Say ( un , VD-find-ar-f ) ;
14064: LD_VAR 0 1
14068: PPUSH
14069: LD_STRING VD-find-ar-f
14071: PPUSH
14072: CALL_OW 88
// if GetSide ( un ) = 1 then
14076: LD_VAR 0 1
14080: PPUSH
14081: CALL_OW 255
14085: PUSH
14086: LD_INT 1
14088: EQUAL
14089: IFFALSE 14156
// begin if GetSex ( un ) = sex_male then
14091: LD_VAR 0 1
14095: PPUSH
14096: CALL_OW 258
14100: PUSH
14101: LD_INT 1
14103: EQUAL
14104: IFFALSE 14132
// begin Say ( un , VD-find-us ) ;
14106: LD_VAR 0 1
14110: PPUSH
14111: LD_STRING VD-find-us
14113: PPUSH
14114: CALL_OW 88
// Say ( un , VD-find-us2 ) ;
14118: LD_VAR 0 1
14122: PPUSH
14123: LD_STRING VD-find-us2
14125: PPUSH
14126: CALL_OW 88
// end else
14130: GO 14156
// begin Say ( un , VD-find-us-f ) ;
14132: LD_VAR 0 1
14136: PPUSH
14137: LD_STRING VD-find-us-f
14139: PPUSH
14140: CALL_OW 88
// Say ( un , VD-find-us2-f ) ;
14144: LD_VAR 0 1
14148: PPUSH
14149: LD_STRING VD-find-us2-f
14151: PPUSH
14152: CALL_OW 88
// end ; end ; Wait ( 0 0$0.3 ) ;
14156: LD_INT 10
14158: PPUSH
14159: CALL_OW 67
// CenterNowOnXY ( 112 , 67 ) ;
14163: LD_INT 112
14165: PPUSH
14166: LD_INT 67
14168: PPUSH
14169: CALL_OW 86
// end ;
14173: PPOPN 2
14175: END
// every 0 0$01 trigger player_artifact_ready do var speaker ;
14176: LD_EXP 8
14180: IFFALSE 14682
14182: GO 14184
14184: DISABLE
14185: LD_INT 0
14187: PPUSH
// begin if your_side = 1 then
14188: LD_OWVAR 2
14192: PUSH
14193: LD_INT 1
14195: EQUAL
14196: IFFALSE 14377
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) diff us_commander ;
14198: LD_ADDR_VAR 0 1
14202: PUSH
14203: LD_INT 22
14205: PUSH
14206: LD_INT 1
14208: PUSH
14209: EMPTY
14210: LIST
14211: LIST
14212: PUSH
14213: LD_INT 25
14215: PUSH
14216: LD_INT 4
14218: PUSH
14219: EMPTY
14220: LIST
14221: LIST
14222: PUSH
14223: EMPTY
14224: LIST
14225: LIST
14226: PPUSH
14227: CALL_OW 69
14231: PUSH
14232: LD_EXP 24
14236: DIFF
14237: ST_TO_ADDR
// if not speaker then
14238: LD_VAR 0 1
14242: NOT
14243: IFFALSE 14247
// exit ;
14245: GO 14682
// if GetSex ( speaker [ 1 ] ) = sex_male then
14247: LD_VAR 0 1
14251: PUSH
14252: LD_INT 1
14254: ARRAY
14255: PPUSH
14256: CALL_OW 258
14260: PUSH
14261: LD_INT 1
14263: EQUAL
14264: IFFALSE 14284
// Say ( speaker [ 1 ] , VD-us-sci-art-1 ) else
14266: LD_VAR 0 1
14270: PUSH
14271: LD_INT 1
14273: ARRAY
14274: PPUSH
14275: LD_STRING VD-us-sci-art-1
14277: PPUSH
14278: CALL_OW 88
14282: GO 14300
// Say ( speaker [ 1 ] , VD-us-fsci-art-1 ) ;
14284: LD_VAR 0 1
14288: PUSH
14289: LD_INT 1
14291: ARRAY
14292: PPUSH
14293: LD_STRING VD-us-fsci-art-1
14295: PPUSH
14296: CALL_OW 88
// Say ( us_commander , VDc-art1 ) ;
14300: LD_EXP 24
14304: PPUSH
14305: LD_STRING VDc-art1
14307: PPUSH
14308: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
14312: LD_VAR 0 1
14316: PUSH
14317: LD_INT 1
14319: ARRAY
14320: PPUSH
14321: CALL_OW 258
14325: PUSH
14326: LD_INT 1
14328: EQUAL
14329: IFFALSE 14349
// Say ( speaker [ 1 ] , VD-us-sci-art-2 ) else
14331: LD_VAR 0 1
14335: PUSH
14336: LD_INT 1
14338: ARRAY
14339: PPUSH
14340: LD_STRING VD-us-sci-art-2
14342: PPUSH
14343: CALL_OW 88
14347: GO 14365
// Say ( speaker [ 1 ] , VD-us-fsci-art-2 ) ;
14349: LD_VAR 0 1
14353: PUSH
14354: LD_INT 1
14356: ARRAY
14357: PPUSH
14358: LD_STRING VD-us-fsci-art-2
14360: PPUSH
14361: CALL_OW 88
// Say ( us_commander , VDc-art2 ) ;
14365: LD_EXP 24
14369: PPUSH
14370: LD_STRING VDc-art2
14372: PPUSH
14373: CALL_OW 88
// end ; if your_side = 2 then
14377: LD_OWVAR 2
14381: PUSH
14382: LD_INT 2
14384: EQUAL
14385: IFFALSE 14489
// begin speaker := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) diff ar_commander ;
14387: LD_ADDR_VAR 0 1
14391: PUSH
14392: LD_INT 22
14394: PUSH
14395: LD_INT 2
14397: PUSH
14398: EMPTY
14399: LIST
14400: LIST
14401: PUSH
14402: LD_INT 25
14404: PUSH
14405: LD_INT 4
14407: PUSH
14408: EMPTY
14409: LIST
14410: LIST
14411: PUSH
14412: EMPTY
14413: LIST
14414: LIST
14415: PPUSH
14416: CALL_OW 69
14420: PUSH
14421: LD_EXP 57
14425: DIFF
14426: ST_TO_ADDR
// if not speaker then
14427: LD_VAR 0 1
14431: NOT
14432: IFFALSE 14436
// exit ;
14434: GO 14682
// if GetSex ( speaker [ 1 ] ) = sex_male then
14436: LD_VAR 0 1
14440: PUSH
14441: LD_INT 1
14443: ARRAY
14444: PPUSH
14445: CALL_OW 258
14449: PUSH
14450: LD_INT 1
14452: EQUAL
14453: IFFALSE 14473
// Say ( speaker [ 1 ] , VD-ar-sci-art-1 ) else
14455: LD_VAR 0 1
14459: PUSH
14460: LD_INT 1
14462: ARRAY
14463: PPUSH
14464: LD_STRING VD-ar-sci-art-1
14466: PPUSH
14467: CALL_OW 88
14471: GO 14489
// Say ( speaker [ 1 ] , VD-ar-fsci-art-1 ) ;
14473: LD_VAR 0 1
14477: PUSH
14478: LD_INT 1
14480: ARRAY
14481: PPUSH
14482: LD_STRING VD-ar-fsci-art-1
14484: PPUSH
14485: CALL_OW 88
// end ; if your_side = 7 then
14489: LD_OWVAR 2
14493: PUSH
14494: LD_INT 7
14496: EQUAL
14497: IFFALSE 14682
// begin speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 4 ] ] ) diff al_commander ;
14499: LD_ADDR_VAR 0 1
14503: PUSH
14504: LD_INT 22
14506: PUSH
14507: LD_INT 7
14509: PUSH
14510: EMPTY
14511: LIST
14512: LIST
14513: PUSH
14514: LD_INT 25
14516: PUSH
14517: LD_INT 4
14519: PUSH
14520: EMPTY
14521: LIST
14522: LIST
14523: PUSH
14524: EMPTY
14525: LIST
14526: LIST
14527: PPUSH
14528: CALL_OW 69
14532: PUSH
14533: LD_EXP 43
14537: DIFF
14538: ST_TO_ADDR
// if speaker then
14539: LD_VAR 0 1
14543: IFFALSE 14675
// begin if GetSex ( speaker [ 1 ] ) = sex_male then
14545: LD_VAR 0 1
14549: PUSH
14550: LD_INT 1
14552: ARRAY
14553: PPUSH
14554: CALL_OW 258
14558: PUSH
14559: LD_INT 1
14561: EQUAL
14562: IFFALSE 14582
// Say ( speaker [ 1 ] , VD-al-sci-art-1 ) else
14564: LD_VAR 0 1
14568: PUSH
14569: LD_INT 1
14571: ARRAY
14572: PPUSH
14573: LD_STRING VD-al-sci-art-1
14575: PPUSH
14576: CALL_OW 88
14580: GO 14598
// Say ( speaker [ 1 ] , VD-al-fsci-art-1 ) ;
14582: LD_VAR 0 1
14586: PUSH
14587: LD_INT 1
14589: ARRAY
14590: PPUSH
14591: LD_STRING VD-al-fsci-art-1
14593: PPUSH
14594: CALL_OW 88
// Say ( al_commander , VPd-art-1 ) ;
14598: LD_EXP 43
14602: PPUSH
14603: LD_STRING VPd-art-1
14605: PPUSH
14606: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
14610: LD_VAR 0 1
14614: PUSH
14615: LD_INT 1
14617: ARRAY
14618: PPUSH
14619: CALL_OW 258
14623: PUSH
14624: LD_INT 1
14626: EQUAL
14627: IFFALSE 14647
// Say ( speaker [ 1 ] , VD-al-sci-art-2 ) else
14629: LD_VAR 0 1
14633: PUSH
14634: LD_INT 1
14636: ARRAY
14637: PPUSH
14638: LD_STRING VD-al-sci-art-2
14640: PPUSH
14641: CALL_OW 88
14645: GO 14663
// Say ( speaker [ 1 ] , VD-al-fsci-art-2 ) ;
14647: LD_VAR 0 1
14651: PUSH
14652: LD_INT 1
14654: ARRAY
14655: PPUSH
14656: LD_STRING VD-al-fsci-art-2
14658: PPUSH
14659: CALL_OW 88
// Say ( al_commander , VPd-art-2 ) ;
14663: LD_EXP 43
14667: PPUSH
14668: LD_STRING VPd-art-2
14670: PPUSH
14671: CALL_OW 88
// end ; ChangeMissionObjectives ( CVulc7out ) ;
14675: LD_STRING CVulc7out
14677: PPUSH
14678: CALL_OW 337
// end ; end ;
14682: PPOPN 1
14684: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_see , 8 ] ] ) do var speaker ;
14685: LD_INT 22
14687: PUSH
14688: LD_OWVAR 2
14692: PUSH
14693: EMPTY
14694: LIST
14695: LIST
14696: PUSH
14697: LD_INT 101
14699: PUSH
14700: LD_INT 8
14702: PUSH
14703: EMPTY
14704: LIST
14705: LIST
14706: PUSH
14707: EMPTY
14708: LIST
14709: LIST
14710: PPUSH
14711: CALL_OW 69
14715: IFFALSE 14858
14717: GO 14719
14719: DISABLE
14720: LD_INT 0
14722: PPUSH
// begin if your_side = 1 then
14723: LD_OWVAR 2
14727: PUSH
14728: LD_INT 1
14730: EQUAL
14731: IFFALSE 14814
// begin speaker := FilterAllUnits ( [ f_side , 1 ] ) diff us_commander ;
14733: LD_ADDR_VAR 0 1
14737: PUSH
14738: LD_INT 22
14740: PUSH
14741: LD_INT 1
14743: PUSH
14744: EMPTY
14745: LIST
14746: LIST
14747: PPUSH
14748: CALL_OW 69
14752: PUSH
14753: LD_EXP 24
14757: DIFF
14758: ST_TO_ADDR
// if speaker then
14759: LD_VAR 0 1
14763: IFFALSE 14814
// if GetSex ( speaker [ 1 ] ) then
14765: LD_VAR 0 1
14769: PUSH
14770: LD_INT 1
14772: ARRAY
14773: PPUSH
14774: CALL_OW 258
14778: IFFALSE 14798
// Say ( speaker [ 1 ] , VD-legion-us ) else
14780: LD_VAR 0 1
14784: PUSH
14785: LD_INT 1
14787: ARRAY
14788: PPUSH
14789: LD_STRING VD-legion-us
14791: PPUSH
14792: CALL_OW 88
14796: GO 14814
// Say ( speaker [ 1 ] , VD-legion-us-f ) ;
14798: LD_VAR 0 1
14802: PUSH
14803: LD_INT 1
14805: ARRAY
14806: PPUSH
14807: LD_STRING VD-legion-us-f
14809: PPUSH
14810: CALL_OW 88
// end ; if your_side = 2 then
14814: LD_OWVAR 2
14818: PUSH
14819: LD_INT 2
14821: EQUAL
14822: IFFALSE 14836
// Say ( ar_commander , VD-legion-ar ) ;
14824: LD_EXP 57
14828: PPUSH
14829: LD_STRING VD-legion-ar
14831: PPUSH
14832: CALL_OW 88
// if your_side = 7 then
14836: LD_OWVAR 2
14840: PUSH
14841: LD_INT 7
14843: EQUAL
14844: IFFALSE 14858
// Say ( al_commander , VD-legion-al ) ;
14846: LD_EXP 43
14850: PPUSH
14851: LD_STRING VD-legion-al
14853: PPUSH
14854: CALL_OW 88
// end ;
14858: PPOPN 1
14860: END
// every 0 0$01 trigger mine_vulc do
14861: LD_EXP 13
14865: IFFALSE 14882
14867: GO 14869
14869: DISABLE
// begin Say ( player_commander , VD-vulc-mines ) ;
14870: LD_EXP 11
14874: PPUSH
14875: LD_STRING VD-vulc-mines
14877: PPUSH
14878: CALL_OW 88
// end ;
14882: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 3 ] ) = 0 and your_side <> 2 do
14883: LD_INT 22
14885: PUSH
14886: LD_INT 3
14888: PUSH
14889: EMPTY
14890: LIST
14891: LIST
14892: PPUSH
14893: CALL_OW 69
14897: PUSH
14898: LD_INT 0
14900: EQUAL
14901: PUSH
14902: LD_OWVAR 2
14906: PUSH
14907: LD_INT 2
14909: NONEQUAL
14910: AND
14911: IFFALSE 14920
14913: GO 14915
14915: DISABLE
// Win ;
14916: CALL 14977 0 0
14920: END
// every 0 0$01 trigger FilterAllUnits ( [ f_or , [ f_side , 8 ] , [ f_side , 3 ] ] ) = 0 and your_side = 2 do
14921: LD_INT 2
14923: PUSH
14924: LD_INT 22
14926: PUSH
14927: LD_INT 8
14929: PUSH
14930: EMPTY
14931: LIST
14932: LIST
14933: PUSH
14934: LD_INT 22
14936: PUSH
14937: LD_INT 3
14939: PUSH
14940: EMPTY
14941: LIST
14942: LIST
14943: PUSH
14944: EMPTY
14945: LIST
14946: LIST
14947: LIST
14948: PPUSH
14949: CALL_OW 69
14953: PUSH
14954: LD_INT 0
14956: EQUAL
14957: PUSH
14958: LD_OWVAR 2
14962: PUSH
14963: LD_INT 2
14965: EQUAL
14966: AND
14967: IFFALSE 14976
14969: GO 14971
14971: DISABLE
// Win ;
14972: CALL 14977 0 0
14976: END
// function Win ; var points ; begin
14977: LD_INT 0
14979: PPUSH
14980: PPUSH
// case Query ( VulcWin ) of 1 :
14981: LD_STRING VulcWin
14983: PPUSH
14984: CALL_OW 97
14988: PUSH
14989: LD_INT 1
14991: DOUBLE
14992: EQUAL
14993: IFTRUE 14997
14995: GO 15000
14997: POP
// ; end ;
14998: GO 15001
15000: POP
// if medal_enabled then
15001: LD_EXP 14
15005: IFFALSE 15019
// AddMedal ( vulc_1 , 1 ) else
15007: LD_STRING vulc_1
15009: PPUSH
15010: LD_INT 1
15012: PPUSH
15013: CALL_OW 101
15017: GO 15030
// AddMedal ( vulc_1 , - 1 ) ;
15019: LD_STRING vulc_1
15021: PPUSH
15022: LD_INT 1
15024: NEG
15025: PPUSH
15026: CALL_OW 101
// if FilterAllUnits ( [ f_side , 8 ] ) = 0 then
15030: LD_INT 22
15032: PUSH
15033: LD_INT 8
15035: PUSH
15036: EMPTY
15037: LIST
15038: LIST
15039: PPUSH
15040: CALL_OW 69
15044: PUSH
15045: LD_INT 0
15047: EQUAL
15048: IFFALSE 15062
// AddMedal ( vulc_2 , 1 ) else
15050: LD_STRING vulc_2
15052: PPUSH
15053: LD_INT 1
15055: PPUSH
15056: CALL_OW 101
15060: GO 15073
// AddMedal ( vulc_2 , - 1 ) ;
15062: LD_STRING vulc_2
15064: PPUSH
15065: LD_INT 1
15067: NEG
15068: PPUSH
15069: CALL_OW 101
// points := CalculateCommanderPoints ;
15073: LD_ADDR_VAR 0 2
15077: PUSH
15078: CALL 2340 0 0
15082: ST_TO_ADDR
// if points >= 2000 then
15083: LD_VAR 0 2
15087: PUSH
15088: LD_INT 2000
15090: GREATEREQUAL
15091: IFFALSE 15105
// AddMedal ( vulc_3 , 2 ) else
15093: LD_STRING vulc_3
15095: PPUSH
15096: LD_INT 2
15098: PPUSH
15099: CALL_OW 101
15103: GO 15138
// if points >= 0 then
15105: LD_VAR 0 2
15109: PUSH
15110: LD_INT 0
15112: GREATEREQUAL
15113: IFFALSE 15127
// AddMedal ( vulc_3 , 1 ) else
15115: LD_STRING vulc_3
15117: PPUSH
15118: LD_INT 1
15120: PPUSH
15121: CALL_OW 101
15125: GO 15138
// AddMedal ( vulc_3 , - 1 ) ;
15127: LD_STRING vulc_3
15129: PPUSH
15130: LD_INT 1
15132: NEG
15133: PPUSH
15134: CALL_OW 101
// GiveMedals ( MAIN ) ;
15138: LD_STRING MAIN
15140: PPUSH
15141: CALL_OW 102
// YouWin ;
15145: CALL_OW 103
// end ; end_of_file
15149: LD_VAR 0 1
15153: RET
// every 0 0$01 trigger FilterUnitsInArea ( vulcano_area , [ f_type , unit_human ] ) do var i , un ;
15154: LD_INT 13
15156: PPUSH
15157: LD_INT 21
15159: PUSH
15160: LD_INT 1
15162: PUSH
15163: EMPTY
15164: LIST
15165: LIST
15166: PPUSH
15167: CALL_OW 70
15171: IFFALSE 15231
15173: GO 15175
15175: DISABLE
15176: LD_INT 0
15178: PPUSH
15179: PPUSH
// begin enable ;
15180: ENABLE
// for i in FilterUnitsInArea ( vulcano_area , [ f_type , unit_human ] ) do
15181: LD_ADDR_VAR 0 1
15185: PUSH
15186: LD_INT 13
15188: PPUSH
15189: LD_INT 21
15191: PUSH
15192: LD_INT 1
15194: PUSH
15195: EMPTY
15196: LIST
15197: LIST
15198: PPUSH
15199: CALL_OW 70
15203: PUSH
15204: FOR_IN
15205: IFFALSE 15229
// if GetLives ( i ) then
15207: LD_VAR 0 1
15211: PPUSH
15212: CALL_OW 256
15216: IFFALSE 15227
// KillUnit ( i ) ;
15218: LD_VAR 0 1
15222: PPUSH
15223: CALL_OW 66
15227: GO 15204
15229: POP
15230: POP
// end ;
15231: PPOPN 2
15233: END
// on ArtifactResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
15234: LD_VAR 0 1
15238: PPUSH
15239: CALL_OW 255
15243: PUSH
15244: LD_OWVAR 2
15248: EQUAL
15249: IFFALSE 15259
// player_res_art := true ;
15251: LD_ADDR_EXP 6
15255: PUSH
15256: LD_INT 1
15258: ST_TO_ADDR
// end ;
15259: PPOPN 1
15261: END
// every 0 0$03 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) and player_res_art do var xy , lab ;
15262: LD_INT 22
15264: PUSH
15265: LD_OWVAR 2
15269: PUSH
15270: EMPTY
15271: LIST
15272: LIST
15273: PUSH
15274: LD_INT 2
15276: PUSH
15277: LD_INT 30
15279: PUSH
15280: LD_INT 7
15282: PUSH
15283: EMPTY
15284: LIST
15285: LIST
15286: PUSH
15287: LD_INT 30
15289: PUSH
15290: LD_INT 8
15292: PUSH
15293: EMPTY
15294: LIST
15295: LIST
15296: PUSH
15297: LD_INT 30
15299: PUSH
15300: LD_INT 11
15302: PUSH
15303: EMPTY
15304: LIST
15305: LIST
15306: PUSH
15307: EMPTY
15308: LIST
15309: LIST
15310: LIST
15311: LIST
15312: PUSH
15313: EMPTY
15314: LIST
15315: LIST
15316: PPUSH
15317: CALL_OW 69
15321: PUSH
15322: LD_EXP 6
15326: AND
15327: IFFALSE 15684
15329: GO 15331
15331: DISABLE
15332: LD_INT 0
15334: PPUSH
15335: PPUSH
// begin enable ;
15336: ENABLE
// xy := FindArtifact ( 1 ) ;
15337: LD_ADDR_VAR 0 1
15341: PUSH
15342: LD_INT 1
15344: PPUSH
15345: CALL_OW 469
15349: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_siberium ] ] ] ) , xy [ 1 ] , xy [ 2 ] ) ;
15350: LD_ADDR_VAR 0 2
15354: PUSH
15355: LD_INT 22
15357: PUSH
15358: LD_OWVAR 2
15362: PUSH
15363: EMPTY
15364: LIST
15365: LIST
15366: PUSH
15367: LD_INT 2
15369: PUSH
15370: LD_INT 30
15372: PUSH
15373: LD_INT 8
15375: PUSH
15376: EMPTY
15377: LIST
15378: LIST
15379: PUSH
15380: LD_INT 30
15382: PUSH
15383: LD_INT 7
15385: PUSH
15386: EMPTY
15387: LIST
15388: LIST
15389: PUSH
15390: LD_INT 30
15392: PUSH
15393: LD_INT 11
15395: PUSH
15396: EMPTY
15397: LIST
15398: LIST
15399: PUSH
15400: EMPTY
15401: LIST
15402: LIST
15403: LIST
15404: LIST
15405: PUSH
15406: EMPTY
15407: LIST
15408: LIST
15409: PPUSH
15410: CALL_OW 69
15414: PPUSH
15415: LD_VAR 0 1
15419: PUSH
15420: LD_INT 1
15422: ARRAY
15423: PPUSH
15424: LD_VAR 0 1
15428: PUSH
15429: LD_INT 2
15431: ARRAY
15432: PPUSH
15433: CALL_OW 73
15437: ST_TO_ADDR
// if player_artifact_ready = false then
15438: LD_EXP 8
15442: PUSH
15443: LD_INT 0
15445: EQUAL
15446: IFFALSE 15560
// if GetDistUnitXY ( lab , xy [ 1 ] , xy [ 2 ] ) < 6 then
15448: LD_VAR 0 2
15452: PPUSH
15453: LD_VAR 0 1
15457: PUSH
15458: LD_INT 1
15460: ARRAY
15461: PPUSH
15462: LD_VAR 0 1
15466: PUSH
15467: LD_INT 2
15469: ARRAY
15470: PPUSH
15471: CALL_OW 297
15475: PUSH
15476: LD_INT 6
15478: LESS
15479: IFFALSE 15540
// begin if BuildingStatus ( lab ) = bs_idle then
15481: LD_VAR 0 2
15485: PPUSH
15486: CALL_OW 461
15490: PUSH
15491: LD_INT 2
15493: EQUAL
15494: IFFALSE 15518
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) else
15496: LD_OWVAR 2
15500: PPUSH
15501: LD_INT 1
15503: PPUSH
15504: LD_INT 2
15506: PPUSH
15507: LD_VAR 0 2
15511: PPUSH
15512: CALL_OW 468
15516: GO 15538
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
15518: LD_OWVAR 2
15522: PPUSH
15523: LD_INT 1
15525: PPUSH
15526: LD_INT 1
15528: PPUSH
15529: LD_VAR 0 2
15533: PPUSH
15534: CALL_OW 468
// end else
15538: GO 15560
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
15540: LD_OWVAR 2
15544: PPUSH
15545: LD_INT 1
15547: PPUSH
15548: LD_INT 1
15550: PPUSH
15551: LD_VAR 0 2
15555: PPUSH
15556: CALL_OW 468
// if player_artifact_ready then
15560: LD_EXP 8
15564: IFFALSE 15684
// if GetDistUnitXY ( lab , xy [ 1 ] , xy [ 2 ] ) < 6 then
15566: LD_VAR 0 2
15570: PPUSH
15571: LD_VAR 0 1
15575: PUSH
15576: LD_INT 1
15578: ARRAY
15579: PPUSH
15580: LD_VAR 0 1
15584: PUSH
15585: LD_INT 2
15587: ARRAY
15588: PPUSH
15589: CALL_OW 297
15593: PUSH
15594: LD_INT 6
15596: LESS
15597: IFFALSE 15662
// begin if BuildingStatus ( lab ) = bs_idle then
15599: LD_VAR 0 2
15603: PPUSH
15604: CALL_OW 461
15608: PUSH
15609: LD_INT 2
15611: EQUAL
15612: IFFALSE 15638
// SetArtifactUse ( your_side , art_icon , art_unit , lab ) else
15614: LD_OWVAR 2
15618: PPUSH
15619: LD_EXP 9
15623: PPUSH
15624: LD_INT 4
15626: PPUSH
15627: LD_VAR 0 2
15631: PPUSH
15632: CALL_OW 468
15636: GO 15660
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
15638: LD_OWVAR 2
15642: PPUSH
15643: LD_EXP 9
15647: PPUSH
15648: LD_INT 1
15650: PPUSH
15651: LD_VAR 0 2
15655: PPUSH
15656: CALL_OW 468
// end else
15660: GO 15684
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
15662: LD_OWVAR 2
15666: PPUSH
15667: LD_EXP 9
15671: PPUSH
15672: LD_INT 1
15674: PPUSH
15675: LD_VAR 0 2
15679: PPUSH
15680: CALL_OW 468
// end ;
15684: PPOPN 2
15686: END
// on ArtifactUsed ( s , icon , cr1 , cr2 ) do var xy , i , lab , side ;
15687: LD_INT 0
15689: PPUSH
15690: PPUSH
15691: PPUSH
15692: PPUSH
// begin xy := FindArtifact ( 1 ) ;
15693: LD_ADDR_VAR 0 5
15697: PUSH
15698: LD_INT 1
15700: PPUSH
15701: CALL_OW 469
15705: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , xy [ 1 ] , xy [ 2 ] ) ;
15706: LD_ADDR_VAR 0 7
15710: PUSH
15711: LD_INT 22
15713: PUSH
15714: LD_OWVAR 2
15718: PUSH
15719: EMPTY
15720: LIST
15721: LIST
15722: PUSH
15723: LD_INT 2
15725: PUSH
15726: LD_INT 30
15728: PUSH
15729: LD_INT 8
15731: PUSH
15732: EMPTY
15733: LIST
15734: LIST
15735: PUSH
15736: LD_INT 30
15738: PUSH
15739: LD_INT 11
15741: PUSH
15742: EMPTY
15743: LIST
15744: LIST
15745: PUSH
15746: EMPTY
15747: LIST
15748: LIST
15749: LIST
15750: PUSH
15751: EMPTY
15752: LIST
15753: LIST
15754: PPUSH
15755: CALL_OW 69
15759: PPUSH
15760: LD_VAR 0 5
15764: PUSH
15765: LD_INT 1
15767: ARRAY
15768: PPUSH
15769: LD_VAR 0 5
15773: PUSH
15774: LD_INT 2
15776: ARRAY
15777: PPUSH
15778: CALL_OW 73
15782: ST_TO_ADDR
// if icon = art_exp_left then
15783: LD_VAR 0 2
15787: PUSH
15788: LD_INT 1
15790: EQUAL
15791: IFFALSE 15844
// begin SetSpecResearch ( lab , time_res_art , true ) ;
15793: LD_VAR 0 7
15797: PPUSH
15798: LD_EXP 10
15802: PPUSH
15803: LD_INT 1
15805: PPUSH
15806: CALL_OW 486
// SetWorkingProgress ( lab , artifact_progress ) ;
15810: LD_VAR 0 7
15814: PPUSH
15815: LD_EXP 7
15819: PPUSH
15820: CALL_OW 329
// SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
15824: LD_OWVAR 2
15828: PPUSH
15829: LD_INT 1
15831: PPUSH
15832: LD_INT 0
15834: PPUSH
15835: LD_VAR 0 7
15839: PPUSH
15840: CALL_OW 468
// end ; if icon = art_icon then
15844: LD_VAR 0 2
15848: PUSH
15849: LD_EXP 9
15853: EQUAL
15854: IFFALSE 16087
// begin if cr1 in FilterAllUnits ( [ f_type , unit_building ] ) then
15856: LD_VAR 0 3
15860: PUSH
15861: LD_INT 21
15863: PUSH
15864: LD_INT 3
15866: PUSH
15867: EMPTY
15868: LIST
15869: LIST
15870: PPUSH
15871: CALL_OW 69
15875: IN
15876: IFFALSE 16087
// begin side := GetSide ( cr1 ) ;
15878: LD_ADDR_VAR 0 8
15882: PUSH
15883: LD_VAR 0 3
15887: PPUSH
15888: CALL_OW 255
15892: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_siberite_power ] ] ) > 0 then
15893: LD_INT 22
15895: PUSH
15896: LD_VAR 0 8
15900: PUSH
15901: EMPTY
15902: LIST
15903: LIST
15904: PUSH
15905: LD_INT 30
15907: PUSH
15908: LD_INT 28
15910: PUSH
15911: EMPTY
15912: LIST
15913: LIST
15914: PUSH
15915: EMPTY
15916: LIST
15917: LIST
15918: PPUSH
15919: CALL_OW 69
15923: PUSH
15924: LD_INT 0
15926: GREATER
15927: IFFALSE 16087
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_solar_power ] , [ f_btype , b_siberite_power ] ] ] ) do
15929: LD_ADDR_VAR 0 6
15933: PUSH
15934: LD_INT 22
15936: PUSH
15937: LD_VAR 0 8
15941: PUSH
15942: EMPTY
15943: LIST
15944: LIST
15945: PUSH
15946: LD_INT 2
15948: PUSH
15949: LD_INT 30
15951: PUSH
15952: LD_INT 26
15954: PUSH
15955: EMPTY
15956: LIST
15957: LIST
15958: PUSH
15959: LD_INT 30
15961: PUSH
15962: LD_INT 27
15964: PUSH
15965: EMPTY
15966: LIST
15967: LIST
15968: PUSH
15969: LD_INT 30
15971: PUSH
15972: LD_INT 28
15974: PUSH
15975: EMPTY
15976: LIST
15977: LIST
15978: PUSH
15979: EMPTY
15980: LIST
15981: LIST
15982: LIST
15983: LIST
15984: PUSH
15985: EMPTY
15986: LIST
15987: LIST
15988: PPUSH
15989: CALL_OW 69
15993: PUSH
15994: FOR_IN
15995: IFFALSE 16008
// KillUnit ( i ) ;
15997: LD_VAR 0 6
16001: PPUSH
16002: CALL_OW 66
16006: GO 15994
16008: POP
16009: POP
// medal_enabled := true ;
16010: LD_ADDR_EXP 14
16014: PUSH
16015: LD_INT 1
16017: ST_TO_ADDR
// player_res_art := false ;
16018: LD_ADDR_EXP 6
16022: PUSH
16023: LD_INT 0
16025: ST_TO_ADDR
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
16026: LD_OWVAR 2
16030: PPUSH
16031: LD_EXP 9
16035: PPUSH
16036: LD_INT 1
16038: PPUSH
16039: LD_VAR 0 7
16043: PPUSH
16044: CALL_OW 468
// wait ( time_to_reuse ) ;
16048: LD_EXP 12
16052: PPUSH
16053: CALL_OW 67
// SetArtifactUse ( your_side , art_icon , art_unit , lab ) ;
16057: LD_OWVAR 2
16061: PPUSH
16062: LD_EXP 9
16066: PPUSH
16067: LD_INT 4
16069: PPUSH
16070: LD_VAR 0 7
16074: PPUSH
16075: CALL_OW 468
// player_res_art := true ;
16079: LD_ADDR_EXP 6
16083: PUSH
16084: LD_INT 1
16086: ST_TO_ADDR
// end ; end ; end ; end ;
16087: PPOPN 8
16089: END
// on SpecResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
16090: LD_VAR 0 1
16094: PPUSH
16095: CALL_OW 255
16099: PUSH
16100: LD_OWVAR 2
16104: EQUAL
16105: IFFALSE 16142
// begin SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
16107: LD_OWVAR 2
16111: PPUSH
16112: LD_INT 1
16114: PPUSH
16115: LD_INT 0
16117: PPUSH
16118: LD_VAR 0 1
16122: PPUSH
16123: CALL_OW 468
// player_artifact_ready := true ;
16127: LD_ADDR_EXP 8
16131: PUSH
16132: LD_INT 1
16134: ST_TO_ADDR
// Hint ( ArtVulcano ) ;
16135: LD_STRING ArtVulcano
16137: PPUSH
16138: CALL_OW 339
// end ; end ;
16142: PPOPN 1
16144: END
// on SpecResearchCancel ( lab , progress ) do begin artifact_progress := progress ;
16145: LD_ADDR_EXP 7
16149: PUSH
16150: LD_VAR 0 2
16154: ST_TO_ADDR
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) ;
16155: LD_OWVAR 2
16159: PPUSH
16160: LD_INT 1
16162: PPUSH
16163: LD_INT 2
16165: PPUSH
16166: LD_VAR 0 1
16170: PPUSH
16171: CALL_OW 468
// end ; end_of_file
16175: PPOPN 2
16177: END
// export al_commander , al_force , al_skill ; export function PrepareAlliance ; var i , filter , un , team ; begin
16178: LD_INT 0
16180: PPUSH
16181: PPUSH
16182: PPUSH
16183: PPUSH
16184: PPUSH
// al_skill := [ 7 , 6 , 5 ] [ Difficulty ] ;
16185: LD_ADDR_EXP 45
16189: PUSH
16190: LD_INT 7
16192: PUSH
16193: LD_INT 6
16195: PUSH
16196: LD_INT 5
16198: PUSH
16199: EMPTY
16200: LIST
16201: LIST
16202: LIST
16203: PUSH
16204: LD_OWVAR 67
16208: ARRAY
16209: ST_TO_ADDR
// al_force := [ ] ;
16210: LD_ADDR_EXP 44
16214: PUSH
16215: EMPTY
16216: ST_TO_ADDR
// RemoveAlliance ;
16217: CALL 16870 0 0
// ResetFog ;
16221: CALL_OW 335
// your_side := 7 ;
16225: LD_ADDR_OWVAR 2
16229: PUSH
16230: LD_INT 7
16232: ST_TO_ADDR
// uc_side := 7 ;
16233: LD_ADDR_OWVAR 20
16237: PUSH
16238: LD_INT 7
16240: ST_TO_ADDR
// hc_gallery :=  ;
16241: LD_ADDR_OWVAR 33
16245: PUSH
16246: LD_STRING 
16248: ST_TO_ADDR
// hc_name :=  ;
16249: LD_ADDR_OWVAR 26
16253: PUSH
16254: LD_STRING 
16256: ST_TO_ADDR
// hc_importance := 0 ;
16257: LD_ADDR_OWVAR 32
16261: PUSH
16262: LD_INT 0
16264: ST_TO_ADDR
// for i = 1 to 17 do
16265: LD_ADDR_VAR 0 2
16269: PUSH
16270: DOUBLE
16271: LD_INT 1
16273: DEC
16274: ST_TO_ADDR
16275: LD_INT 17
16277: PUSH
16278: FOR_TO
16279: IFFALSE 16359
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
16281: LD_ADDR_OWVAR 21
16285: PUSH
16286: LD_INT 1
16288: PUSH
16289: LD_INT 3
16291: PUSH
16292: EMPTY
16293: LIST
16294: LIST
16295: PUSH
16296: LD_INT 1
16298: PPUSH
16299: LD_INT 2
16301: PPUSH
16302: CALL_OW 12
16306: ARRAY
16307: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , al_skill ) ;
16308: LD_INT 0
16310: PPUSH
16311: LD_INT 1
16313: PPUSH
16314: LD_INT 4
16316: PPUSH
16317: CALL_OW 12
16321: PPUSH
16322: LD_EXP 45
16326: PPUSH
16327: CALL_OW 380
// un := CreateHuman ;
16331: LD_ADDR_VAR 0 4
16335: PUSH
16336: CALL_OW 44
16340: ST_TO_ADDR
// al_force := al_force ^ un ;
16341: LD_ADDR_EXP 44
16345: PUSH
16346: LD_EXP 44
16350: PUSH
16351: LD_VAR 0 4
16355: ADD
16356: ST_TO_ADDR
// end ;
16357: GO 16278
16359: POP
16360: POP
// hc_importance := 100 ;
16361: LD_ADDR_OWVAR 32
16365: PUSH
16366: LD_INT 100
16368: ST_TO_ADDR
// uc_nation := 1 ;
16369: LD_ADDR_OWVAR 21
16373: PUSH
16374: LD_INT 1
16376: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , al_skill ) ;
16377: LD_INT 1
16379: PPUSH
16380: LD_INT 1
16382: PPUSH
16383: LD_EXP 45
16387: PPUSH
16388: CALL_OW 380
// al_commander := CreateHuman ;
16392: LD_ADDR_EXP 43
16396: PUSH
16397: CALL_OW 44
16401: ST_TO_ADDR
// player_commander := al_commander ;
16402: LD_ADDR_EXP 11
16406: PUSH
16407: LD_EXP 43
16411: ST_TO_ADDR
// team := CharacterSelection ( text , [ 9 , 9 , 8 ] [ Difficulty ] , [ 9 , 9 , 8 ] [ Difficulty ] , [ sel_change_class , al_commander , sel_changeable , sel_not_hired ] ^ al_force , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , class_bazooker , class_sniper ] ) ;
16412: LD_ADDR_VAR 0 5
16416: PUSH
16417: LD_STRING text
16419: PPUSH
16420: LD_INT 9
16422: PUSH
16423: LD_INT 9
16425: PUSH
16426: LD_INT 8
16428: PUSH
16429: EMPTY
16430: LIST
16431: LIST
16432: LIST
16433: PUSH
16434: LD_OWVAR 67
16438: ARRAY
16439: PPUSH
16440: LD_INT 9
16442: PUSH
16443: LD_INT 9
16445: PUSH
16446: LD_INT 8
16448: PUSH
16449: EMPTY
16450: LIST
16451: LIST
16452: LIST
16453: PUSH
16454: LD_OWVAR 67
16458: ARRAY
16459: PPUSH
16460: LD_INT -5
16462: PUSH
16463: LD_EXP 43
16467: PUSH
16468: LD_INT -3
16470: PUSH
16471: LD_INT -2
16473: PUSH
16474: EMPTY
16475: LIST
16476: LIST
16477: LIST
16478: LIST
16479: PUSH
16480: LD_EXP 44
16484: ADD
16485: PPUSH
16486: LD_INT 1
16488: PUSH
16489: LD_INT 3
16491: PUSH
16492: LD_INT 2
16494: PUSH
16495: LD_INT 1
16497: PUSH
16498: EMPTY
16499: LIST
16500: LIST
16501: PUSH
16502: LD_INT 4
16504: PUSH
16505: LD_INT 1
16507: PUSH
16508: EMPTY
16509: LIST
16510: LIST
16511: PUSH
16512: LD_INT 9
16514: PUSH
16515: LD_INT 5
16517: PUSH
16518: EMPTY
16519: LIST
16520: LIST
16521: LIST
16522: LIST
16523: LIST
16524: LIST
16525: PPUSH
16526: CALL_OW 42
16530: ST_TO_ADDR
// team := team ^ al_commander ;
16531: LD_ADDR_VAR 0 5
16535: PUSH
16536: LD_VAR 0 5
16540: PUSH
16541: LD_EXP 43
16545: ADD
16546: ST_TO_ADDR
// for i = 1 to team do
16547: LD_ADDR_VAR 0 2
16551: PUSH
16552: DOUBLE
16553: LD_INT 1
16555: DEC
16556: ST_TO_ADDR
16557: LD_VAR 0 5
16561: PUSH
16562: FOR_TO
16563: IFFALSE 16863
// begin if GetClass ( team [ i ] ) = class_mechanic then
16565: LD_VAR 0 5
16569: PUSH
16570: LD_VAR 0 2
16574: ARRAY
16575: PPUSH
16576: CALL_OW 257
16580: PUSH
16581: LD_INT 3
16583: EQUAL
16584: IFFALSE 16840
// begin uc_nation := [ 1 , 3 ] [ rand ( 1 , 2 ) ] ;
16586: LD_ADDR_OWVAR 21
16590: PUSH
16591: LD_INT 1
16593: PUSH
16594: LD_INT 3
16596: PUSH
16597: EMPTY
16598: LIST
16599: LIST
16600: PUSH
16601: LD_INT 1
16603: PPUSH
16604: LD_INT 2
16606: PPUSH
16607: CALL_OW 12
16611: ARRAY
16612: ST_TO_ADDR
// if uc_nation = 1 then
16613: LD_OWVAR 21
16617: PUSH
16618: LD_INT 1
16620: EQUAL
16621: IFFALSE 16705
// begin vc_chassis := [ us_medium_tracked , us_heavy_tracked , us_morphling ] [ i mod 3 + 1 ] ;
16623: LD_ADDR_OWVAR 37
16627: PUSH
16628: LD_INT 3
16630: PUSH
16631: LD_INT 4
16633: PUSH
16634: LD_INT 5
16636: PUSH
16637: EMPTY
16638: LIST
16639: LIST
16640: LIST
16641: PUSH
16642: LD_VAR 0 2
16646: PUSH
16647: LD_INT 3
16649: MOD
16650: PUSH
16651: LD_INT 1
16653: PLUS
16654: ARRAY
16655: ST_TO_ADDR
// vc_engine := engine_siberite ;
16656: LD_ADDR_OWVAR 39
16660: PUSH
16661: LD_INT 3
16663: ST_TO_ADDR
// vc_control := control_manual ;
16664: LD_ADDR_OWVAR 38
16668: PUSH
16669: LD_INT 1
16671: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_laser ] [ rand ( 1 , 3 ) ] ;
16672: LD_ADDR_OWVAR 40
16676: PUSH
16677: LD_INT 4
16679: PUSH
16680: LD_INT 5
16682: PUSH
16683: LD_INT 9
16685: PUSH
16686: EMPTY
16687: LIST
16688: LIST
16689: LIST
16690: PUSH
16691: LD_INT 1
16693: PPUSH
16694: LD_INT 3
16696: PPUSH
16697: CALL_OW 12
16701: ARRAY
16702: ST_TO_ADDR
// end else
16703: GO 16781
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] ;
16705: LD_ADDR_OWVAR 37
16709: PUSH
16710: LD_INT 21
16712: PUSH
16713: LD_INT 23
16715: PUSH
16716: EMPTY
16717: LIST
16718: LIST
16719: PUSH
16720: LD_VAR 0 2
16724: PUSH
16725: LD_INT 2
16727: MOD
16728: PUSH
16729: LD_INT 1
16731: PLUS
16732: ARRAY
16733: ST_TO_ADDR
// vc_engine := engine_siberite ;
16734: LD_ADDR_OWVAR 39
16738: PUSH
16739: LD_INT 3
16741: ST_TO_ADDR
// vc_control := control_manual ;
16742: LD_ADDR_OWVAR 38
16746: PUSH
16747: LD_INT 1
16749: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_rocket_launcher , ru_gatling_gun ] [ rand ( 1 , 3 ) ] ;
16750: LD_ADDR_OWVAR 40
16754: PUSH
16755: LD_INT 44
16757: PUSH
16758: LD_INT 45
16760: PUSH
16761: LD_INT 43
16763: PUSH
16764: EMPTY
16765: LIST
16766: LIST
16767: LIST
16768: PUSH
16769: LD_INT 1
16771: PPUSH
16772: LD_INT 3
16774: PPUSH
16775: CALL_OW 12
16779: ARRAY
16780: ST_TO_ADDR
// end ; un := CreateVehicle ;
16781: LD_ADDR_VAR 0 4
16785: PUSH
16786: CALL_OW 45
16790: ST_TO_ADDR
// SetDir ( un , 5 ) ;
16791: LD_VAR 0 4
16795: PPUSH
16796: LD_INT 5
16798: PPUSH
16799: CALL_OW 233
// PlaceUnitArea ( un , south_resp , false ) ;
16803: LD_VAR 0 4
16807: PPUSH
16808: LD_INT 15
16810: PPUSH
16811: LD_INT 0
16813: PPUSH
16814: CALL_OW 49
// PlaceHumanInUnit ( team [ i ] , un ) ;
16818: LD_VAR 0 5
16822: PUSH
16823: LD_VAR 0 2
16827: ARRAY
16828: PPUSH
16829: LD_VAR 0 4
16833: PPUSH
16834: CALL_OW 52
// end else
16838: GO 16861
// PlaceUnitArea ( team [ i ] , south_resp , false ) ;
16840: LD_VAR 0 5
16844: PUSH
16845: LD_VAR 0 2
16849: ARRAY
16850: PPUSH
16851: LD_INT 15
16853: PPUSH
16854: LD_INT 0
16856: PPUSH
16857: CALL_OW 49
// end ;
16861: GO 16562
16863: POP
16864: POP
// end ;
16865: LD_VAR 0 1
16869: RET
// export function RemoveAlliance ; var i ; begin
16870: LD_INT 0
16872: PPUSH
16873: PPUSH
// DestroyUnit ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
16874: LD_INT 22
16876: PUSH
16877: LD_INT 7
16879: PUSH
16880: EMPTY
16881: LIST
16882: LIST
16883: PUSH
16884: LD_INT 30
16886: PUSH
16887: LD_INT 1
16889: PUSH
16890: EMPTY
16891: LIST
16892: LIST
16893: PUSH
16894: EMPTY
16895: LIST
16896: LIST
16897: PPUSH
16898: CALL_OW 69
16902: PUSH
16903: LD_INT 1
16905: ARRAY
16906: PPUSH
16907: CALL_OW 65
// for i in FilterAllUnits ( [ f_side , 7 ] ) do
16911: LD_ADDR_VAR 0 2
16915: PUSH
16916: LD_INT 22
16918: PUSH
16919: LD_INT 7
16921: PUSH
16922: EMPTY
16923: LIST
16924: LIST
16925: PPUSH
16926: CALL_OW 69
16930: PUSH
16931: FOR_IN
16932: IFFALSE 16945
// RemoveUnit ( i ) ;
16934: LD_VAR 0 2
16938: PPUSH
16939: CALL_OW 64
16943: GO 16931
16945: POP
16946: POP
// end ;
16947: LD_VAR 0 1
16951: RET
// export function PrepareAllianceAI ; var i , un , b ; begin
16952: LD_INT 0
16954: PPUSH
16955: PPUSH
16956: PPUSH
16957: PPUSH
// SetTech ( tech_lapser , 7 , state_researched ) ;
16958: LD_INT 31
16960: PPUSH
16961: LD_INT 7
16963: PPUSH
16964: LD_INT 2
16966: PPUSH
16967: CALL_OW 322
// SetTech ( tech_ai , 7 , state_researched ) ;
16971: LD_INT 32
16973: PPUSH
16974: LD_INT 7
16976: PPUSH
16977: LD_INT 2
16979: PPUSH
16980: CALL_OW 322
// SetTech ( tech_comp3 , 7 , state_researched ) ;
16984: LD_INT 59
16986: PPUSH
16987: LD_INT 7
16989: PPUSH
16990: LD_INT 2
16992: PPUSH
16993: CALL_OW 322
// al_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
16997: LD_ADDR_EXP 45
17001: PUSH
17002: LD_INT 5
17004: PUSH
17005: LD_INT 6
17007: PUSH
17008: LD_INT 7
17010: PUSH
17011: EMPTY
17012: LIST
17013: LIST
17014: LIST
17015: PUSH
17016: LD_OWVAR 67
17020: ARRAY
17021: ST_TO_ADDR
// al_force := [ ] ;
17022: LD_ADDR_EXP 44
17026: PUSH
17027: EMPTY
17028: ST_TO_ADDR
// al_vehs := [ ] ;
17029: LD_ADDR_EXP 50
17033: PUSH
17034: EMPTY
17035: ST_TO_ADDR
// uc_side := 7 ;
17036: LD_ADDR_OWVAR 20
17040: PUSH
17041: LD_INT 7
17043: ST_TO_ADDR
// uc_nation := 1 ;
17044: LD_ADDR_OWVAR 21
17048: PUSH
17049: LD_INT 1
17051: ST_TO_ADDR
// bc_type := b_oil_mine ;
17052: LD_ADDR_OWVAR 42
17056: PUSH
17057: LD_INT 29
17059: ST_TO_ADDR
// b := CreateBuilding ;
17060: LD_ADDR_VAR 0 4
17064: PUSH
17065: CALL_OW 46
17069: ST_TO_ADDR
// PlaceUnitXYR ( b , 61 , 7 , 0 , false ) ;
17070: LD_VAR 0 4
17074: PPUSH
17075: LD_INT 61
17077: PPUSH
17078: LD_INT 7
17080: PPUSH
17081: LD_INT 0
17083: PPUSH
17084: LD_INT 0
17086: PPUSH
17087: CALL_OW 50
// bc_type := b_siberite_mine ;
17091: LD_ADDR_OWVAR 42
17095: PUSH
17096: LD_INT 30
17098: ST_TO_ADDR
// b := CreateBuilding ;
17099: LD_ADDR_VAR 0 4
17103: PUSH
17104: CALL_OW 46
17108: ST_TO_ADDR
// PlaceUnitXYR ( b , 69 , 13 , 0 , false ) ;
17109: LD_VAR 0 4
17113: PPUSH
17114: LD_INT 69
17116: PPUSH
17117: LD_INT 13
17119: PPUSH
17120: LD_INT 0
17122: PPUSH
17123: LD_INT 0
17125: PPUSH
17126: CALL_OW 50
// hc_gallery :=  ;
17130: LD_ADDR_OWVAR 33
17134: PUSH
17135: LD_STRING 
17137: ST_TO_ADDR
// hc_name :=  ;
17138: LD_ADDR_OWVAR 26
17142: PUSH
17143: LD_STRING 
17145: ST_TO_ADDR
// hc_importance := 0 ;
17146: LD_ADDR_OWVAR 32
17150: PUSH
17151: LD_INT 0
17153: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_bunker ] ] ) do
17154: LD_ADDR_VAR 0 2
17158: PUSH
17159: LD_INT 22
17161: PUSH
17162: LD_INT 7
17164: PUSH
17165: EMPTY
17166: LIST
17167: LIST
17168: PUSH
17169: LD_INT 30
17171: PUSH
17172: LD_INT 32
17174: PUSH
17175: EMPTY
17176: LIST
17177: LIST
17178: PUSH
17179: EMPTY
17180: LIST
17181: LIST
17182: PPUSH
17183: CALL_OW 69
17187: PUSH
17188: FOR_IN
17189: IFFALSE 17259
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17191: LD_ADDR_OWVAR 21
17195: PUSH
17196: LD_INT 1
17198: PUSH
17199: LD_INT 3
17201: PUSH
17202: EMPTY
17203: LIST
17204: LIST
17205: PUSH
17206: LD_INT 1
17208: PPUSH
17209: LD_INT 2
17211: PPUSH
17212: CALL_OW 12
17216: ARRAY
17217: ST_TO_ADDR
// PrepareHuman ( false , 1 , al_skill ) ;
17218: LD_INT 0
17220: PPUSH
17221: LD_INT 1
17223: PPUSH
17224: LD_EXP 45
17228: PPUSH
17229: CALL_OW 380
// un := CreateHuman ;
17233: LD_ADDR_VAR 0 3
17237: PUSH
17238: CALL_OW 44
17242: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
17243: LD_VAR 0 3
17247: PPUSH
17248: LD_VAR 0 2
17252: PPUSH
17253: CALL_OW 52
// end ;
17257: GO 17188
17259: POP
17260: POP
// for i = 1 to 3 do
17261: LD_ADDR_VAR 0 2
17265: PUSH
17266: DOUBLE
17267: LD_INT 1
17269: DEC
17270: ST_TO_ADDR
17271: LD_INT 3
17273: PUSH
17274: FOR_TO
17275: IFFALSE 17343
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17277: LD_ADDR_OWVAR 21
17281: PUSH
17282: LD_INT 1
17284: PUSH
17285: LD_INT 3
17287: PUSH
17288: EMPTY
17289: LIST
17290: LIST
17291: PUSH
17292: LD_INT 1
17294: PPUSH
17295: LD_INT 2
17297: PPUSH
17298: CALL_OW 12
17302: ARRAY
17303: ST_TO_ADDR
// PrepareHuman ( false , 4 , al_skill ) ;
17304: LD_INT 0
17306: PPUSH
17307: LD_INT 4
17309: PPUSH
17310: LD_EXP 45
17314: PPUSH
17315: CALL_OW 380
// un := CreateHuman ;
17319: LD_ADDR_VAR 0 3
17323: PUSH
17324: CALL_OW 44
17328: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_lab1 ) ;
17329: LD_VAR 0 3
17333: PPUSH
17334: LD_INT 164
17336: PPUSH
17337: CALL_OW 52
// end ;
17341: GO 17274
17343: POP
17344: POP
// for i = 1 to 4 do
17345: LD_ADDR_VAR 0 2
17349: PUSH
17350: DOUBLE
17351: LD_INT 1
17353: DEC
17354: ST_TO_ADDR
17355: LD_INT 4
17357: PUSH
17358: FOR_TO
17359: IFFALSE 17450
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17361: LD_ADDR_OWVAR 21
17365: PUSH
17366: LD_INT 1
17368: PUSH
17369: LD_INT 3
17371: PUSH
17372: EMPTY
17373: LIST
17374: LIST
17375: PUSH
17376: LD_INT 1
17378: PPUSH
17379: LD_INT 2
17381: PPUSH
17382: CALL_OW 12
17386: ARRAY
17387: ST_TO_ADDR
// PrepareHuman ( false , [ class_sniper , class_bazooker , class_bazooker ] [ Rand ( 1 , 3 ) ] , al_skill ) ;
17388: LD_INT 0
17390: PPUSH
17391: LD_INT 5
17393: PUSH
17394: LD_INT 9
17396: PUSH
17397: LD_INT 9
17399: PUSH
17400: EMPTY
17401: LIST
17402: LIST
17403: LIST
17404: PUSH
17405: LD_INT 1
17407: PPUSH
17408: LD_INT 3
17410: PPUSH
17411: CALL_OW 12
17415: ARRAY
17416: PPUSH
17417: LD_EXP 45
17421: PPUSH
17422: CALL_OW 380
// un := CreateHuman ;
17426: LD_ADDR_VAR 0 3
17430: PUSH
17431: CALL_OW 44
17435: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_bar ) ;
17436: LD_VAR 0 3
17440: PPUSH
17441: LD_INT 173
17443: PPUSH
17444: CALL_OW 52
// end ;
17448: GO 17358
17450: POP
17451: POP
// for i = 1 to 4 do
17452: LD_ADDR_VAR 0 2
17456: PUSH
17457: DOUBLE
17458: LD_INT 1
17460: DEC
17461: ST_TO_ADDR
17462: LD_INT 4
17464: PUSH
17465: FOR_TO
17466: IFFALSE 17564
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17468: LD_ADDR_OWVAR 21
17472: PUSH
17473: LD_INT 1
17475: PUSH
17476: LD_INT 3
17478: PUSH
17479: EMPTY
17480: LIST
17481: LIST
17482: PUSH
17483: LD_INT 1
17485: PPUSH
17486: LD_INT 2
17488: PPUSH
17489: CALL_OW 12
17493: ARRAY
17494: ST_TO_ADDR
// PrepareHuman ( false , 3 , al_skill ) ;
17495: LD_INT 0
17497: PPUSH
17498: LD_INT 3
17500: PPUSH
17501: LD_EXP 45
17505: PPUSH
17506: CALL_OW 380
// un := CreateHuman ;
17510: LD_ADDR_VAR 0 3
17514: PUSH
17515: CALL_OW 44
17519: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
17520: LD_VAR 0 3
17524: PPUSH
17525: LD_INT 22
17527: PUSH
17528: LD_INT 7
17530: PUSH
17531: EMPTY
17532: LIST
17533: LIST
17534: PUSH
17535: LD_INT 30
17537: PUSH
17538: LD_INT 3
17540: PUSH
17541: EMPTY
17542: LIST
17543: LIST
17544: PUSH
17545: EMPTY
17546: LIST
17547: LIST
17548: PPUSH
17549: CALL_OW 69
17553: PUSH
17554: LD_INT 1
17556: ARRAY
17557: PPUSH
17558: CALL_OW 52
// end ;
17562: GO 17465
17564: POP
17565: POP
// for i = 1 to 4 do
17566: LD_ADDR_VAR 0 2
17570: PUSH
17571: DOUBLE
17572: LD_INT 1
17574: DEC
17575: ST_TO_ADDR
17576: LD_INT 4
17578: PUSH
17579: FOR_TO
17580: IFFALSE 17648
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17582: LD_ADDR_OWVAR 21
17586: PUSH
17587: LD_INT 1
17589: PUSH
17590: LD_INT 3
17592: PUSH
17593: EMPTY
17594: LIST
17595: LIST
17596: PUSH
17597: LD_INT 1
17599: PPUSH
17600: LD_INT 2
17602: PPUSH
17603: CALL_OW 12
17607: ARRAY
17608: ST_TO_ADDR
// PrepareHuman ( false , 2 , al_skill ) ;
17609: LD_INT 0
17611: PPUSH
17612: LD_INT 2
17614: PPUSH
17615: LD_EXP 45
17619: PPUSH
17620: CALL_OW 380
// un := CreateHuman ;
17624: LD_ADDR_VAR 0 3
17628: PUSH
17629: CALL_OW 44
17633: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_depot ) ;
17634: LD_VAR 0 3
17638: PPUSH
17639: LD_INT 162
17641: PPUSH
17642: CALL_OW 52
// end ;
17646: GO 17579
17648: POP
17649: POP
// uc_nation := 3 ;
17650: LD_ADDR_OWVAR 21
17654: PUSH
17655: LD_INT 3
17657: ST_TO_ADDR
// vc_chassis := ru_medium_wheeled ;
17658: LD_ADDR_OWVAR 37
17662: PUSH
17663: LD_INT 21
17665: ST_TO_ADDR
// vc_engine := engine_siberite ;
17666: LD_ADDR_OWVAR 39
17670: PUSH
17671: LD_INT 3
17673: ST_TO_ADDR
// vc_control := control_computer ;
17674: LD_ADDR_OWVAR 38
17678: PUSH
17679: LD_INT 3
17681: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
17682: LD_ADDR_OWVAR 40
17686: PUSH
17687: LD_INT 51
17689: ST_TO_ADDR
// PlaceUnitXY ( CreateVehicle , 49 , 13 , false ) ;
17690: CALL_OW 45
17694: PPUSH
17695: LD_INT 49
17697: PPUSH
17698: LD_INT 13
17700: PPUSH
17701: LD_INT 0
17703: PPUSH
17704: CALL_OW 48
// al_turrets := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_turret ] ] ) ;
17708: LD_ADDR_EXP 52
17712: PUSH
17713: LD_INT 22
17715: PUSH
17716: LD_INT 7
17718: PUSH
17719: EMPTY
17720: LIST
17721: LIST
17722: PUSH
17723: LD_INT 30
17725: PUSH
17726: LD_INT 33
17728: PUSH
17729: EMPTY
17730: LIST
17731: LIST
17732: PUSH
17733: EMPTY
17734: LIST
17735: LIST
17736: PPUSH
17737: CALL_OW 69
17741: ST_TO_ADDR
// for i = 1 to FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_btype , b_turret ] , [ f_bweapon , 0 ] ] ] ) do
17742: LD_ADDR_VAR 0 2
17746: PUSH
17747: DOUBLE
17748: LD_INT 1
17750: DEC
17751: ST_TO_ADDR
17752: LD_INT 22
17754: PUSH
17755: LD_INT 7
17757: PUSH
17758: EMPTY
17759: LIST
17760: LIST
17761: PUSH
17762: LD_INT 30
17764: PUSH
17765: LD_INT 33
17767: PUSH
17768: EMPTY
17769: LIST
17770: LIST
17771: PUSH
17772: LD_INT 35
17774: PUSH
17775: LD_INT 0
17777: PUSH
17778: EMPTY
17779: LIST
17780: LIST
17781: PUSH
17782: EMPTY
17783: LIST
17784: LIST
17785: LIST
17786: PUSH
17787: EMPTY
17788: LIST
17789: PPUSH
17790: CALL_OW 69
17794: PUSH
17795: FOR_TO
17796: IFFALSE 17856
// AddComPlaceWeapon ( FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_btype , b_turret ] , [ f_bweapon , 0 ] ] ] ) [ i ] , ru_time_lapser ) ;
17798: LD_INT 22
17800: PUSH
17801: LD_INT 7
17803: PUSH
17804: EMPTY
17805: LIST
17806: LIST
17807: PUSH
17808: LD_INT 30
17810: PUSH
17811: LD_INT 33
17813: PUSH
17814: EMPTY
17815: LIST
17816: LIST
17817: PUSH
17818: LD_INT 35
17820: PUSH
17821: LD_INT 0
17823: PUSH
17824: EMPTY
17825: LIST
17826: LIST
17827: PUSH
17828: EMPTY
17829: LIST
17830: LIST
17831: LIST
17832: PUSH
17833: EMPTY
17834: LIST
17835: PPUSH
17836: CALL_OW 69
17840: PUSH
17841: LD_VAR 0 2
17845: ARRAY
17846: PPUSH
17847: LD_INT 49
17849: PPUSH
17850: CALL_OW 208
17854: GO 17795
17856: POP
17857: POP
// end ;
17858: LD_VAR 0 1
17862: RET
// export al_eng , al_sold , al_mech , al_sci ; export al_vehs , al_cargo , al_turrets ; export al_dep , al_lab , al_fac ; export al_bul ; every 0 0$02 trigger your_side = 1 do var i , un , veh , cr ;
17863: LD_OWVAR 2
17867: PUSH
17868: LD_INT 1
17870: EQUAL
17871: IFFALSE 18857
17873: GO 17875
17875: DISABLE
17876: LD_INT 0
17878: PPUSH
17879: PPUSH
17880: PPUSH
17881: PPUSH
// begin enable ;
17882: ENABLE
// al_bul := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] ] ) ;
17883: LD_ADDR_EXP 56
17887: PUSH
17888: LD_INT 22
17890: PUSH
17891: LD_INT 7
17893: PUSH
17894: EMPTY
17895: LIST
17896: LIST
17897: PUSH
17898: LD_INT 21
17900: PUSH
17901: LD_INT 3
17903: PUSH
17904: EMPTY
17905: LIST
17906: LIST
17907: PUSH
17908: EMPTY
17909: LIST
17910: LIST
17911: PPUSH
17912: CALL_OW 69
17916: ST_TO_ADDR
// al_lab := [ al_lab1 , al_lab2 ] ;
17917: LD_ADDR_EXP 54
17921: PUSH
17922: LD_INT 164
17924: PUSH
17925: LD_INT 197
17927: PUSH
17928: EMPTY
17929: LIST
17930: LIST
17931: ST_TO_ADDR
// al_dep := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
17932: LD_ADDR_EXP 53
17936: PUSH
17937: LD_INT 22
17939: PUSH
17940: LD_INT 7
17942: PUSH
17943: EMPTY
17944: LIST
17945: LIST
17946: PUSH
17947: LD_INT 30
17949: PUSH
17950: LD_INT 1
17952: PUSH
17953: EMPTY
17954: LIST
17955: LIST
17956: PUSH
17957: EMPTY
17958: LIST
17959: LIST
17960: PPUSH
17961: CALL_OW 69
17965: PUSH
17966: LD_INT 1
17968: ARRAY
17969: ST_TO_ADDR
// al_fac := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
17970: LD_ADDR_EXP 55
17974: PUSH
17975: LD_INT 22
17977: PUSH
17978: LD_INT 7
17980: PUSH
17981: EMPTY
17982: LIST
17983: LIST
17984: PUSH
17985: LD_INT 30
17987: PUSH
17988: LD_INT 3
17990: PUSH
17991: EMPTY
17992: LIST
17993: LIST
17994: PUSH
17995: EMPTY
17996: LIST
17997: LIST
17998: PPUSH
17999: CALL_OW 69
18003: PUSH
18004: LD_INT 1
18006: ARRAY
18007: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) then
18008: LD_INT 22
18010: PUSH
18011: LD_INT 7
18013: PUSH
18014: EMPTY
18015: LIST
18016: LIST
18017: PUSH
18018: LD_INT 34
18020: PUSH
18021: LD_INT 51
18023: PUSH
18024: EMPTY
18025: LIST
18026: LIST
18027: PUSH
18028: EMPTY
18029: LIST
18030: LIST
18031: PPUSH
18032: CALL_OW 69
18036: IFFALSE 18076
// al_cargo := FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
18038: LD_ADDR_EXP 51
18042: PUSH
18043: LD_INT 22
18045: PUSH
18046: LD_INT 7
18048: PUSH
18049: EMPTY
18050: LIST
18051: LIST
18052: PUSH
18053: LD_INT 34
18055: PUSH
18056: LD_INT 51
18058: PUSH
18059: EMPTY
18060: LIST
18061: LIST
18062: PUSH
18063: EMPTY
18064: LIST
18065: LIST
18066: PPUSH
18067: CALL_OW 69
18071: PUSH
18072: LD_INT 1
18074: ARRAY
18075: ST_TO_ADDR
// al_sold := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , class_bazooker ] ] ) ;
18076: LD_ADDR_EXP 47
18080: PUSH
18081: LD_INT 22
18083: PUSH
18084: LD_INT 7
18086: PUSH
18087: EMPTY
18088: LIST
18089: LIST
18090: PUSH
18091: LD_INT 25
18093: PUSH
18094: LD_INT 9
18096: PUSH
18097: EMPTY
18098: LIST
18099: LIST
18100: PUSH
18101: EMPTY
18102: LIST
18103: LIST
18104: PPUSH
18105: CALL_OW 69
18109: ST_TO_ADDR
// al_eng := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 2 ] ] ) ;
18110: LD_ADDR_EXP 46
18114: PUSH
18115: LD_INT 22
18117: PUSH
18118: LD_INT 7
18120: PUSH
18121: EMPTY
18122: LIST
18123: LIST
18124: PUSH
18125: LD_INT 25
18127: PUSH
18128: LD_INT 2
18130: PUSH
18131: EMPTY
18132: LIST
18133: LIST
18134: PUSH
18135: EMPTY
18136: LIST
18137: LIST
18138: PPUSH
18139: CALL_OW 69
18143: ST_TO_ADDR
// al_mech := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 3 ] ] ) ;
18144: LD_ADDR_EXP 48
18148: PUSH
18149: LD_INT 22
18151: PUSH
18152: LD_INT 7
18154: PUSH
18155: EMPTY
18156: LIST
18157: LIST
18158: PUSH
18159: LD_INT 25
18161: PUSH
18162: LD_INT 3
18164: PUSH
18165: EMPTY
18166: LIST
18167: LIST
18168: PUSH
18169: EMPTY
18170: LIST
18171: LIST
18172: PPUSH
18173: CALL_OW 69
18177: ST_TO_ADDR
// al_sci := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 4 ] ] ) ;
18178: LD_ADDR_EXP 49
18182: PUSH
18183: LD_INT 22
18185: PUSH
18186: LD_INT 7
18188: PUSH
18189: EMPTY
18190: LIST
18191: LIST
18192: PUSH
18193: LD_INT 25
18195: PUSH
18196: LD_INT 4
18198: PUSH
18199: EMPTY
18200: LIST
18201: LIST
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: PPUSH
18207: CALL_OW 69
18211: ST_TO_ADDR
// if not HasTask ( al_cargo ) and GetCargo ( al_cargo , mat_cans ) < 100 then
18212: LD_EXP 51
18216: PPUSH
18217: CALL_OW 314
18221: NOT
18222: PUSH
18223: LD_EXP 51
18227: PPUSH
18228: LD_INT 1
18230: PPUSH
18231: CALL_OW 289
18235: PUSH
18236: LD_INT 100
18238: LESS
18239: AND
18240: IFFALSE 18288
// begin cr := GetListOfCratesInArea ( us_crates ) ;
18242: LD_ADDR_VAR 0 4
18246: PUSH
18247: LD_INT 12
18249: PPUSH
18250: CALL_OW 435
18254: ST_TO_ADDR
// if cr then
18255: LD_VAR 0 4
18259: IFFALSE 18288
// ComCollect ( al_cargo , cr [ 1 ] , cr [ 2 ] ) ;
18261: LD_EXP 51
18265: PPUSH
18266: LD_VAR 0 4
18270: PUSH
18271: LD_INT 1
18273: ARRAY
18274: PPUSH
18275: LD_VAR 0 4
18279: PUSH
18280: LD_INT 2
18282: ARRAY
18283: PPUSH
18284: CALL_OW 117
// end ; if UnitFilter ( al_bul , [ f_not , [ f_lives , 1000 ] ] ) then
18288: LD_EXP 56
18292: PPUSH
18293: LD_INT 3
18295: PUSH
18296: LD_INT 24
18298: PUSH
18299: LD_INT 1000
18301: PUSH
18302: EMPTY
18303: LIST
18304: LIST
18305: PUSH
18306: EMPTY
18307: LIST
18308: LIST
18309: PPUSH
18310: CALL_OW 72
18314: IFFALSE 18444
// begin if al_eng then
18316: LD_EXP 46
18320: IFFALSE 18442
// for i = 1 to al_eng do
18322: LD_ADDR_VAR 0 1
18326: PUSH
18327: DOUBLE
18328: LD_INT 1
18330: DEC
18331: ST_TO_ADDR
18332: LD_EXP 46
18336: PUSH
18337: FOR_TO
18338: IFFALSE 18440
// if IsInUnit ( al_eng [ i ] ) then
18340: LD_EXP 46
18344: PUSH
18345: LD_VAR 0 1
18349: ARRAY
18350: PPUSH
18351: CALL_OW 310
18355: IFFALSE 18374
// ComExitBuilding ( al_eng [ i ] ) else
18357: LD_EXP 46
18361: PUSH
18362: LD_VAR 0 1
18366: ARRAY
18367: PPUSH
18368: CALL_OW 122
18372: GO 18438
// if not HasTask ( al_eng [ i ] ) then
18374: LD_EXP 46
18378: PUSH
18379: LD_VAR 0 1
18383: ARRAY
18384: PPUSH
18385: CALL_OW 314
18389: NOT
18390: IFFALSE 18438
// ComRepairBuilding ( al_eng [ i ] , UnitFilter ( al_bul , [ f_not , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
18392: LD_EXP 46
18396: PUSH
18397: LD_VAR 0 1
18401: ARRAY
18402: PPUSH
18403: LD_EXP 56
18407: PPUSH
18408: LD_INT 3
18410: PUSH
18411: LD_INT 24
18413: PUSH
18414: LD_INT 1000
18416: PUSH
18417: EMPTY
18418: LIST
18419: LIST
18420: PUSH
18421: EMPTY
18422: LIST
18423: LIST
18424: PPUSH
18425: CALL_OW 72
18429: PUSH
18430: LD_INT 1
18432: ARRAY
18433: PPUSH
18434: CALL_OW 130
18438: GO 18337
18440: POP
18441: POP
// end else
18442: GO 18526
// if al_eng then
18444: LD_EXP 46
18448: IFFALSE 18526
// if not IsInUnit ( al_eng [ 1 ] ) then
18450: LD_EXP 46
18454: PUSH
18455: LD_INT 1
18457: ARRAY
18458: PPUSH
18459: CALL_OW 310
18463: NOT
18464: IFFALSE 18526
// for i = 1 to al_eng do
18466: LD_ADDR_VAR 0 1
18470: PUSH
18471: DOUBLE
18472: LD_INT 1
18474: DEC
18475: ST_TO_ADDR
18476: LD_EXP 46
18480: PUSH
18481: FOR_TO
18482: IFFALSE 18524
// if not IsInUnit ( al_eng [ i ] ) then
18484: LD_EXP 46
18488: PUSH
18489: LD_VAR 0 1
18493: ARRAY
18494: PPUSH
18495: CALL_OW 310
18499: NOT
18500: IFFALSE 18522
// ComEnterUnit ( al_eng [ i ] , al_dep ) ;
18502: LD_EXP 46
18506: PUSH
18507: LD_VAR 0 1
18511: ARRAY
18512: PPUSH
18513: LD_EXP 53
18517: PPUSH
18518: CALL_OW 120
18522: GO 18481
18524: POP
18525: POP
// if al_vehs then
18526: LD_EXP 50
18530: IFFALSE 18630
// if BuildingStatus ( al_fac ) = bs_idle then
18532: LD_EXP 55
18536: PPUSH
18537: CALL_OW 461
18541: PUSH
18542: LD_INT 2
18544: EQUAL
18545: IFFALSE 18630
// begin ComConstruct ( al_fac , al_vehs [ 1 ] , al_vehs [ 2 ] , al_vehs [ 3 ] , al_vehs [ 4 ] ) ;
18547: LD_EXP 55
18551: PPUSH
18552: LD_EXP 50
18556: PUSH
18557: LD_INT 1
18559: ARRAY
18560: PPUSH
18561: LD_EXP 50
18565: PUSH
18566: LD_INT 2
18568: ARRAY
18569: PPUSH
18570: LD_EXP 50
18574: PUSH
18575: LD_INT 3
18577: ARRAY
18578: PPUSH
18579: LD_EXP 50
18583: PUSH
18584: LD_INT 4
18586: ARRAY
18587: PPUSH
18588: CALL_OW 125
// for i = 1 to 4 do
18592: LD_ADDR_VAR 0 1
18596: PUSH
18597: DOUBLE
18598: LD_INT 1
18600: DEC
18601: ST_TO_ADDR
18602: LD_INT 4
18604: PUSH
18605: FOR_TO
18606: IFFALSE 18628
// al_vehs := Delete ( al_vehs , 1 ) ;
18608: LD_ADDR_EXP 50
18612: PUSH
18613: LD_EXP 50
18617: PPUSH
18618: LD_INT 1
18620: PPUSH
18621: CALL_OW 3
18625: ST_TO_ADDR
18626: GO 18605
18628: POP
18629: POP
// end ; if al_force = 0 and tick mod 23100 = 0 then
18630: LD_EXP 44
18634: PUSH
18635: LD_INT 0
18637: EQUAL
18638: PUSH
18639: LD_OWVAR 1
18643: PUSH
18644: LD_INT 23100
18646: MOD
18647: PUSH
18648: LD_INT 0
18650: EQUAL
18651: AND
18652: IFFALSE 18766
// begin for i = 1 to [ 6 , 7 , 8 ] [ Difficulty ] do
18654: LD_ADDR_VAR 0 1
18658: PUSH
18659: DOUBLE
18660: LD_INT 1
18662: DEC
18663: ST_TO_ADDR
18664: LD_INT 6
18666: PUSH
18667: LD_INT 7
18669: PUSH
18670: LD_INT 8
18672: PUSH
18673: EMPTY
18674: LIST
18675: LIST
18676: LIST
18677: PUSH
18678: LD_OWVAR 67
18682: ARRAY
18683: PUSH
18684: FOR_TO
18685: IFFALSE 18764
// begin al_vehs := al_vehs ^ ru_heavy_wheeled ;
18687: LD_ADDR_EXP 50
18691: PUSH
18692: LD_EXP 50
18696: PUSH
18697: LD_INT 23
18699: ADD
18700: ST_TO_ADDR
// al_vehs := al_vehs ^ engine_combustion ;
18701: LD_ADDR_EXP 50
18705: PUSH
18706: LD_EXP 50
18710: PUSH
18711: LD_INT 1
18713: ADD
18714: ST_TO_ADDR
// al_vehs := al_vehs ^ control_computer ;
18715: LD_ADDR_EXP 50
18719: PUSH
18720: LD_EXP 50
18724: PUSH
18725: LD_INT 3
18727: ADD
18728: ST_TO_ADDR
// al_vehs := al_vehs ^ [ ru_heavy_gun , ru_rocket ] [ Rand ( 1 , 2 ) ] ;
18729: LD_ADDR_EXP 50
18733: PUSH
18734: LD_EXP 50
18738: PUSH
18739: LD_INT 46
18741: PUSH
18742: LD_INT 47
18744: PUSH
18745: EMPTY
18746: LIST
18747: LIST
18748: PUSH
18749: LD_INT 1
18751: PPUSH
18752: LD_INT 2
18754: PPUSH
18755: CALL_OW 12
18759: ARRAY
18760: ADD
18761: ST_TO_ADDR
// end ;
18762: GO 18684
18764: POP
18765: POP
// end ; if FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 then
18766: LD_INT 22
18768: PUSH
18769: LD_INT 7
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: PUSH
18776: LD_INT 34
18778: PUSH
18779: LD_INT 51
18781: PUSH
18782: EMPTY
18783: LIST
18784: LIST
18785: PUSH
18786: EMPTY
18787: LIST
18788: LIST
18789: PPUSH
18790: CALL_OW 69
18794: PUSH
18795: LD_INT 0
18797: EQUAL
18798: IFFALSE 18821
// ComConstruct ( al_fac , ru_medium_wheeled , engine_combustion , control_computer , ru_cargo_bay ) ;
18800: LD_EXP 55
18804: PPUSH
18805: LD_INT 21
18807: PPUSH
18808: LD_INT 1
18810: PPUSH
18811: LD_INT 3
18813: PPUSH
18814: LD_INT 51
18816: PPUSH
18817: CALL_OW 125
// if al_force >= [ 6 , 7 , 8 ] [ Difficulty ] then
18821: LD_EXP 44
18825: PUSH
18826: LD_INT 6
18828: PUSH
18829: LD_INT 7
18831: PUSH
18832: LD_INT 8
18834: PUSH
18835: EMPTY
18836: LIST
18837: LIST
18838: LIST
18839: PUSH
18840: LD_OWVAR 67
18844: ARRAY
18845: GREATEREQUAL
18846: IFFALSE 18857
// RaiseSailEvent ( event_alliance_attack ) ;
18848: LD_EXP 23
18852: PPUSH
18853: CALL_OW 427
// end ;
18857: PPOPN 4
18859: END
// export function AllianceAttack ( ) ; var path , units ; begin
18860: LD_INT 0
18862: PPUSH
18863: PPUSH
18864: PPUSH
// units := al_force ;
18865: LD_ADDR_VAR 0 3
18869: PUSH
18870: LD_EXP 44
18874: ST_TO_ADDR
// al_force := [ ] ;
18875: LD_ADDR_EXP 44
18879: PUSH
18880: EMPTY
18881: ST_TO_ADDR
// if rand ( 0 , 1 ) then
18882: LD_INT 0
18884: PPUSH
18885: LD_INT 1
18887: PPUSH
18888: CALL_OW 12
18892: IFFALSE 18936
// path := [ [ 49 , 53 ] , [ 52 , 90 ] , [ 63 , 114 ] ] else
18894: LD_ADDR_VAR 0 2
18898: PUSH
18899: LD_INT 49
18901: PUSH
18902: LD_INT 53
18904: PUSH
18905: EMPTY
18906: LIST
18907: LIST
18908: PUSH
18909: LD_INT 52
18911: PUSH
18912: LD_INT 90
18914: PUSH
18915: EMPTY
18916: LIST
18917: LIST
18918: PUSH
18919: LD_INT 63
18921: PUSH
18922: LD_INT 114
18924: PUSH
18925: EMPTY
18926: LIST
18927: LIST
18928: PUSH
18929: EMPTY
18930: LIST
18931: LIST
18932: LIST
18933: ST_TO_ADDR
18934: GO 18965
// path := [ [ 89 , 52 ] , [ 143 , 50 ] ] ;
18936: LD_ADDR_VAR 0 2
18940: PUSH
18941: LD_INT 89
18943: PUSH
18944: LD_INT 52
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: PUSH
18951: LD_INT 143
18953: PUSH
18954: LD_INT 50
18956: PUSH
18957: EMPTY
18958: LIST
18959: LIST
18960: PUSH
18961: EMPTY
18962: LIST
18963: LIST
18964: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18965: LD_INT 35
18967: PPUSH
18968: CALL_OW 67
// until not AgressiveMove ( units , path ) ;
18972: LD_VAR 0 3
18976: PPUSH
18977: LD_VAR 0 2
18981: PPUSH
18982: CALL 78078 0 2
18986: NOT
18987: IFFALSE 18965
// end ; end_of_file
18989: LD_VAR 0 1
18993: RET
// export ar_commander , ar_force , ar_skill ; export function PrepareArabian ; var i , filter , un , team ; begin
18994: LD_INT 0
18996: PPUSH
18997: PPUSH
18998: PPUSH
18999: PPUSH
19000: PPUSH
// ar_skill := [ 9 , 8 , 7 ] [ Difficulty ] ;
19001: LD_ADDR_EXP 59
19005: PUSH
19006: LD_INT 9
19008: PUSH
19009: LD_INT 8
19011: PUSH
19012: LD_INT 7
19014: PUSH
19015: EMPTY
19016: LIST
19017: LIST
19018: LIST
19019: PUSH
19020: LD_OWVAR 67
19024: ARRAY
19025: ST_TO_ADDR
// ar_force := [ ] ;
19026: LD_ADDR_EXP 58
19030: PUSH
19031: EMPTY
19032: ST_TO_ADDR
// RemoveAlliance ;
19033: CALL 16870 0 0
// RemoveEnvironmentArea ( evn ) ;
19037: LD_INT 17
19039: PPUSH
19040: CALL_OW 355
// your_side := 2 ;
19044: LD_ADDR_OWVAR 2
19048: PUSH
19049: LD_INT 2
19051: ST_TO_ADDR
// uc_side := 2 ;
19052: LD_ADDR_OWVAR 20
19056: PUSH
19057: LD_INT 2
19059: ST_TO_ADDR
// uc_nation := nation_arabian ;
19060: LD_ADDR_OWVAR 21
19064: PUSH
19065: LD_INT 2
19067: ST_TO_ADDR
// hc_gallery :=  ;
19068: LD_ADDR_OWVAR 33
19072: PUSH
19073: LD_STRING 
19075: ST_TO_ADDR
// hc_name :=  ;
19076: LD_ADDR_OWVAR 26
19080: PUSH
19081: LD_STRING 
19083: ST_TO_ADDR
// hc_importance := 0 ;
19084: LD_ADDR_OWVAR 32
19088: PUSH
19089: LD_INT 0
19091: ST_TO_ADDR
// for i = 1 to 20 do
19092: LD_ADDR_VAR 0 2
19096: PUSH
19097: DOUBLE
19098: LD_INT 1
19100: DEC
19101: ST_TO_ADDR
19102: LD_INT 20
19104: PUSH
19105: FOR_TO
19106: IFFALSE 19171
// begin PrepareHuman ( false , Rand ( 1 , 4 ) , ar_skill ) ;
19108: LD_INT 0
19110: PPUSH
19111: LD_INT 1
19113: PPUSH
19114: LD_INT 4
19116: PPUSH
19117: CALL_OW 12
19121: PPUSH
19122: LD_EXP 59
19126: PPUSH
19127: CALL_OW 380
// un := CreateHuman ;
19131: LD_ADDR_VAR 0 4
19135: PUSH
19136: CALL_OW 44
19140: ST_TO_ADDR
// SetDir ( un , 2 ) ;
19141: LD_VAR 0 4
19145: PPUSH
19146: LD_INT 2
19148: PPUSH
19149: CALL_OW 233
// ar_force := ar_force ^ un ;
19153: LD_ADDR_EXP 58
19157: PUSH
19158: LD_EXP 58
19162: PUSH
19163: LD_VAR 0 4
19167: ADD
19168: ST_TO_ADDR
// end ;
19169: GO 19105
19171: POP
19172: POP
// hc_importance := 100 ;
19173: LD_ADDR_OWVAR 32
19177: PUSH
19178: LD_INT 100
19180: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , ar_skill ) ;
19181: LD_INT 1
19183: PPUSH
19184: LD_INT 11
19186: PPUSH
19187: LD_EXP 59
19191: PPUSH
19192: CALL_OW 380
// ar_commander := CreateHuman ;
19196: LD_ADDR_EXP 57
19200: PUSH
19201: CALL_OW 44
19205: ST_TO_ADDR
// SetDir ( ar_commander , 2 ) ;
19206: LD_EXP 57
19210: PPUSH
19211: LD_INT 2
19213: PPUSH
19214: CALL_OW 233
// player_commander := ar_commander ;
19218: LD_ADDR_EXP 11
19222: PUSH
19223: LD_EXP 57
19227: ST_TO_ADDR
// team := CharacterSelection ( text , [ 14 , 13 , 12 ] [ Difficulty ] , [ 14 , 13 , 12 ] [ Difficulty ] , [ sel_dont_change_class , ar_commander , sel_not_hired , sel_changeable , sel_change_class ] ^ ar_force , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , class_mortar ] ) ;
19228: LD_ADDR_VAR 0 5
19232: PUSH
19233: LD_STRING text
19235: PPUSH
19236: LD_INT 14
19238: PUSH
19239: LD_INT 13
19241: PUSH
19242: LD_INT 12
19244: PUSH
19245: EMPTY
19246: LIST
19247: LIST
19248: LIST
19249: PUSH
19250: LD_OWVAR 67
19254: ARRAY
19255: PPUSH
19256: LD_INT 14
19258: PUSH
19259: LD_INT 13
19261: PUSH
19262: LD_INT 12
19264: PUSH
19265: EMPTY
19266: LIST
19267: LIST
19268: LIST
19269: PUSH
19270: LD_OWVAR 67
19274: ARRAY
19275: PPUSH
19276: LD_INT -6
19278: PUSH
19279: LD_EXP 57
19283: PUSH
19284: LD_INT -2
19286: PUSH
19287: LD_INT -3
19289: PUSH
19290: LD_INT -5
19292: PUSH
19293: EMPTY
19294: LIST
19295: LIST
19296: LIST
19297: LIST
19298: LIST
19299: PUSH
19300: LD_EXP 58
19304: ADD
19305: PPUSH
19306: LD_INT 1
19308: PUSH
19309: LD_INT 3
19311: PUSH
19312: LD_INT 2
19314: PUSH
19315: LD_INT 1
19317: PUSH
19318: EMPTY
19319: LIST
19320: LIST
19321: PUSH
19322: LD_INT 4
19324: PUSH
19325: LD_INT 1
19327: PUSH
19328: EMPTY
19329: LIST
19330: LIST
19331: PUSH
19332: LD_INT 8
19334: PUSH
19335: EMPTY
19336: LIST
19337: LIST
19338: LIST
19339: LIST
19340: LIST
19341: PPUSH
19342: CALL_OW 42
19346: ST_TO_ADDR
// team := team ^ ar_commander ;
19347: LD_ADDR_VAR 0 5
19351: PUSH
19352: LD_VAR 0 5
19356: PUSH
19357: LD_EXP 57
19361: ADD
19362: ST_TO_ADDR
// for i = 1 to 4 do
19363: LD_ADDR_VAR 0 2
19367: PUSH
19368: DOUBLE
19369: LD_INT 1
19371: DEC
19372: ST_TO_ADDR
19373: LD_INT 4
19375: PUSH
19376: FOR_TO
19377: IFFALSE 19479
// begin vc_chassis := ar_medium_trike ;
19379: LD_ADDR_OWVAR 37
19383: PUSH
19384: LD_INT 13
19386: ST_TO_ADDR
// vc_engine := engine_siberite ;
19387: LD_ADDR_OWVAR 39
19391: PUSH
19392: LD_INT 3
19394: ST_TO_ADDR
// vc_control := control_manual ;
19395: LD_ADDR_OWVAR 38
19399: PUSH
19400: LD_INT 1
19402: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_cargo_bay , ar_crane , ar_gun ] [ i ] ;
19403: LD_ADDR_OWVAR 40
19407: PUSH
19408: LD_INT 27
19410: PUSH
19411: LD_INT 32
19413: PUSH
19414: LD_EXP 66
19418: PUSH
19419: LD_INT 27
19421: PUSH
19422: EMPTY
19423: LIST
19424: LIST
19425: LIST
19426: LIST
19427: PUSH
19428: LD_VAR 0 2
19432: ARRAY
19433: ST_TO_ADDR
// un := CreateVehicle ;
19434: LD_ADDR_VAR 0 4
19438: PUSH
19439: CALL_OW 45
19443: ST_TO_ADDR
// SetDir ( un , 2 ) ;
19444: LD_VAR 0 4
19448: PPUSH
19449: LD_INT 2
19451: PPUSH
19452: CALL_OW 233
// PlaceUnitXYR ( un , 54 , 15 , 6 , false ) ;
19456: LD_VAR 0 4
19460: PPUSH
19461: LD_INT 54
19463: PPUSH
19464: LD_INT 15
19466: PPUSH
19467: LD_INT 6
19469: PPUSH
19470: LD_INT 0
19472: PPUSH
19473: CALL_OW 50
// end ;
19477: GO 19376
19479: POP
19480: POP
// for i = 1 to team do
19481: LD_ADDR_VAR 0 2
19485: PUSH
19486: DOUBLE
19487: LD_INT 1
19489: DEC
19490: ST_TO_ADDR
19491: LD_VAR 0 5
19495: PUSH
19496: FOR_TO
19497: IFFALSE 19594
// begin if FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) then
19499: LD_INT 22
19501: PUSH
19502: LD_INT 2
19504: PUSH
19505: EMPTY
19506: LIST
19507: LIST
19508: PUSH
19509: LD_INT 58
19511: PUSH
19512: EMPTY
19513: LIST
19514: PUSH
19515: EMPTY
19516: LIST
19517: LIST
19518: PPUSH
19519: CALL_OW 69
19523: IFFALSE 19571
// PlaceHumanInUnit ( team [ i ] , FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) [ 1 ] ) else
19525: LD_VAR 0 5
19529: PUSH
19530: LD_VAR 0 2
19534: ARRAY
19535: PPUSH
19536: LD_INT 22
19538: PUSH
19539: LD_INT 2
19541: PUSH
19542: EMPTY
19543: LIST
19544: LIST
19545: PUSH
19546: LD_INT 58
19548: PUSH
19549: EMPTY
19550: LIST
19551: PUSH
19552: EMPTY
19553: LIST
19554: LIST
19555: PPUSH
19556: CALL_OW 69
19560: PUSH
19561: LD_INT 1
19563: ARRAY
19564: PPUSH
19565: CALL_OW 52
19569: GO 19592
// PlaceUnitArea ( team [ i ] , center_resp , false ) ;
19571: LD_VAR 0 5
19575: PUSH
19576: LD_VAR 0 2
19580: ARRAY
19581: PPUSH
19582: LD_INT 16
19584: PPUSH
19585: LD_INT 0
19587: PPUSH
19588: CALL_OW 49
// end ;
19592: GO 19496
19594: POP
19595: POP
// uc_side := 0 ;
19596: LD_ADDR_OWVAR 20
19600: PUSH
19601: LD_INT 0
19603: ST_TO_ADDR
// uc_nation := 0 ;
19604: LD_ADDR_OWVAR 21
19608: PUSH
19609: LD_INT 0
19611: ST_TO_ADDR
// vc_chassis := 31 ;
19612: LD_ADDR_OWVAR 37
19616: PUSH
19617: LD_INT 31
19619: ST_TO_ADDR
// vc_control := control_rider ;
19620: LD_ADDR_OWVAR 38
19624: PUSH
19625: LD_INT 4
19627: ST_TO_ADDR
// PlaceUnitXY ( CreateVehicle , 96 , 20 , false ) ;
19628: CALL_OW 45
19632: PPUSH
19633: LD_INT 96
19635: PPUSH
19636: LD_INT 20
19638: PPUSH
19639: LD_INT 0
19641: PPUSH
19642: CALL_OW 48
// end ; end_of_file
19646: LD_VAR 0 1
19650: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
19651: LD_INT 0
19653: PPUSH
// ar_miner := 81 ;
19654: LD_ADDR_EXP 67
19658: PUSH
19659: LD_INT 81
19661: ST_TO_ADDR
// ar_crane := 88 ;
19662: LD_ADDR_EXP 66
19666: PUSH
19667: LD_INT 88
19669: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
19670: LD_ADDR_EXP 61
19674: PUSH
19675: LD_INT 89
19677: ST_TO_ADDR
// us_hack := 99 ;
19678: LD_ADDR_EXP 62
19682: PUSH
19683: LD_INT 99
19685: ST_TO_ADDR
// us_artillery := 97 ;
19686: LD_ADDR_EXP 63
19690: PUSH
19691: LD_INT 97
19693: ST_TO_ADDR
// ar_bio_bomb := 91 ;
19694: LD_ADDR_EXP 64
19698: PUSH
19699: LD_INT 91
19701: ST_TO_ADDR
// ar_mortar := 92 ;
19702: LD_ADDR_EXP 65
19706: PUSH
19707: LD_INT 92
19709: ST_TO_ADDR
// ru_flamethrower := 93 ;
19710: LD_ADDR_EXP 68
19714: PUSH
19715: LD_INT 93
19717: ST_TO_ADDR
// ru_radar := 98 ;
19718: LD_ADDR_EXP 60
19722: PUSH
19723: LD_INT 98
19725: ST_TO_ADDR
// tech_Artillery := 80 ;
19726: LD_ADDR_EXP 69
19730: PUSH
19731: LD_INT 80
19733: ST_TO_ADDR
// tech_RadMat := 81 ;
19734: LD_ADDR_EXP 70
19738: PUSH
19739: LD_INT 81
19741: ST_TO_ADDR
// tech_BasicTools := 82 ;
19742: LD_ADDR_EXP 71
19746: PUSH
19747: LD_INT 82
19749: ST_TO_ADDR
// tech_Cargo := 83 ;
19750: LD_ADDR_EXP 72
19754: PUSH
19755: LD_INT 83
19757: ST_TO_ADDR
// tech_Track := 84 ;
19758: LD_ADDR_EXP 73
19762: PUSH
19763: LD_INT 84
19765: ST_TO_ADDR
// tech_Crane := 85 ;
19766: LD_ADDR_EXP 74
19770: PUSH
19771: LD_INT 85
19773: ST_TO_ADDR
// tech_Bulldozer := 86 ;
19774: LD_ADDR_EXP 75
19778: PUSH
19779: LD_INT 86
19781: ST_TO_ADDR
// tech_Hovercraft := 87 ;
19782: LD_ADDR_EXP 76
19786: PUSH
19787: LD_INT 87
19789: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
19790: LD_ADDR_EXP 77
19794: PUSH
19795: LD_INT 88
19797: ST_TO_ADDR
// class_mastodont := 31 ;
19798: LD_ADDR_EXP 78
19802: PUSH
19803: LD_INT 31
19805: ST_TO_ADDR
// class_horse := 21 ;
19806: LD_ADDR_EXP 79
19810: PUSH
19811: LD_INT 21
19813: ST_TO_ADDR
// end ;
19814: LD_VAR 0 1
19818: RET
// every 1 do
19819: GO 19821
19821: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
19822: CALL 19651 0 0
19826: END
// every 0 0$1 do
19827: GO 19829
19829: DISABLE
// begin enable ;
19830: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19831: LD_STRING updateTimer(
19833: PUSH
19834: LD_OWVAR 1
19838: STR
19839: PUSH
19840: LD_STRING );
19842: STR
19843: PPUSH
19844: CALL_OW 559
// end ;
19848: END
// export function SOS_MapStart ( ) ; begin
19849: LD_INT 0
19851: PPUSH
// if streamModeActive then
19852: LD_EXP 80
19856: IFFALSE 19865
// DefineStreamItems ( true ) ;
19858: LD_INT 1
19860: PPUSH
19861: CALL 21515 0 1
// UpdateFactoryWaypoints ( ) ;
19865: CALL 35099 0 0
// end ;
19869: LD_VAR 0 1
19873: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19874: LD_INT 0
19876: PPUSH
// if p2 = 100 then
19877: LD_VAR 0 2
19881: PUSH
19882: LD_INT 100
19884: EQUAL
19885: IFFALSE 20888
// begin if not StreamModeActive then
19887: LD_EXP 80
19891: NOT
19892: IFFALSE 19902
// StreamModeActive := true ;
19894: LD_ADDR_EXP 80
19898: PUSH
19899: LD_INT 1
19901: ST_TO_ADDR
// if p3 = 0 then
19902: LD_VAR 0 3
19906: PUSH
19907: LD_INT 0
19909: EQUAL
19910: IFFALSE 19916
// InitStreamMode ;
19912: CALL 21051 0 0
// if p3 = 1 then
19916: LD_VAR 0 3
19920: PUSH
19921: LD_INT 1
19923: EQUAL
19924: IFFALSE 19934
// sRocket := true ;
19926: LD_ADDR_EXP 85
19930: PUSH
19931: LD_INT 1
19933: ST_TO_ADDR
// if p3 = 2 then
19934: LD_VAR 0 3
19938: PUSH
19939: LD_INT 2
19941: EQUAL
19942: IFFALSE 19952
// sSpeed := true ;
19944: LD_ADDR_EXP 84
19948: PUSH
19949: LD_INT 1
19951: ST_TO_ADDR
// if p3 = 3 then
19952: LD_VAR 0 3
19956: PUSH
19957: LD_INT 3
19959: EQUAL
19960: IFFALSE 19970
// sEngine := true ;
19962: LD_ADDR_EXP 86
19966: PUSH
19967: LD_INT 1
19969: ST_TO_ADDR
// if p3 = 4 then
19970: LD_VAR 0 3
19974: PUSH
19975: LD_INT 4
19977: EQUAL
19978: IFFALSE 19988
// sSpec := true ;
19980: LD_ADDR_EXP 83
19984: PUSH
19985: LD_INT 1
19987: ST_TO_ADDR
// if p3 = 5 then
19988: LD_VAR 0 3
19992: PUSH
19993: LD_INT 5
19995: EQUAL
19996: IFFALSE 20006
// sLevel := true ;
19998: LD_ADDR_EXP 87
20002: PUSH
20003: LD_INT 1
20005: ST_TO_ADDR
// if p3 = 6 then
20006: LD_VAR 0 3
20010: PUSH
20011: LD_INT 6
20013: EQUAL
20014: IFFALSE 20024
// sArmoury := true ;
20016: LD_ADDR_EXP 88
20020: PUSH
20021: LD_INT 1
20023: ST_TO_ADDR
// if p3 = 7 then
20024: LD_VAR 0 3
20028: PUSH
20029: LD_INT 7
20031: EQUAL
20032: IFFALSE 20042
// sRadar := true ;
20034: LD_ADDR_EXP 89
20038: PUSH
20039: LD_INT 1
20041: ST_TO_ADDR
// if p3 = 8 then
20042: LD_VAR 0 3
20046: PUSH
20047: LD_INT 8
20049: EQUAL
20050: IFFALSE 20060
// sBunker := true ;
20052: LD_ADDR_EXP 90
20056: PUSH
20057: LD_INT 1
20059: ST_TO_ADDR
// if p3 = 9 then
20060: LD_VAR 0 3
20064: PUSH
20065: LD_INT 9
20067: EQUAL
20068: IFFALSE 20078
// sHack := true ;
20070: LD_ADDR_EXP 91
20074: PUSH
20075: LD_INT 1
20077: ST_TO_ADDR
// if p3 = 10 then
20078: LD_VAR 0 3
20082: PUSH
20083: LD_INT 10
20085: EQUAL
20086: IFFALSE 20096
// sFire := true ;
20088: LD_ADDR_EXP 92
20092: PUSH
20093: LD_INT 1
20095: ST_TO_ADDR
// if p3 = 11 then
20096: LD_VAR 0 3
20100: PUSH
20101: LD_INT 11
20103: EQUAL
20104: IFFALSE 20114
// sRefresh := true ;
20106: LD_ADDR_EXP 93
20110: PUSH
20111: LD_INT 1
20113: ST_TO_ADDR
// if p3 = 12 then
20114: LD_VAR 0 3
20118: PUSH
20119: LD_INT 12
20121: EQUAL
20122: IFFALSE 20132
// sExp := true ;
20124: LD_ADDR_EXP 94
20128: PUSH
20129: LD_INT 1
20131: ST_TO_ADDR
// if p3 = 13 then
20132: LD_VAR 0 3
20136: PUSH
20137: LD_INT 13
20139: EQUAL
20140: IFFALSE 20150
// sDepot := true ;
20142: LD_ADDR_EXP 95
20146: PUSH
20147: LD_INT 1
20149: ST_TO_ADDR
// if p3 = 14 then
20150: LD_VAR 0 3
20154: PUSH
20155: LD_INT 14
20157: EQUAL
20158: IFFALSE 20168
// sFlag := true ;
20160: LD_ADDR_EXP 96
20164: PUSH
20165: LD_INT 1
20167: ST_TO_ADDR
// if p3 = 15 then
20168: LD_VAR 0 3
20172: PUSH
20173: LD_INT 15
20175: EQUAL
20176: IFFALSE 20186
// sKamikadze := true ;
20178: LD_ADDR_EXP 104
20182: PUSH
20183: LD_INT 1
20185: ST_TO_ADDR
// if p3 = 16 then
20186: LD_VAR 0 3
20190: PUSH
20191: LD_INT 16
20193: EQUAL
20194: IFFALSE 20204
// sTroll := true ;
20196: LD_ADDR_EXP 105
20200: PUSH
20201: LD_INT 1
20203: ST_TO_ADDR
// if p3 = 17 then
20204: LD_VAR 0 3
20208: PUSH
20209: LD_INT 17
20211: EQUAL
20212: IFFALSE 20222
// sSlow := true ;
20214: LD_ADDR_EXP 106
20218: PUSH
20219: LD_INT 1
20221: ST_TO_ADDR
// if p3 = 18 then
20222: LD_VAR 0 3
20226: PUSH
20227: LD_INT 18
20229: EQUAL
20230: IFFALSE 20240
// sLack := true ;
20232: LD_ADDR_EXP 107
20236: PUSH
20237: LD_INT 1
20239: ST_TO_ADDR
// if p3 = 19 then
20240: LD_VAR 0 3
20244: PUSH
20245: LD_INT 19
20247: EQUAL
20248: IFFALSE 20258
// sTank := true ;
20250: LD_ADDR_EXP 109
20254: PUSH
20255: LD_INT 1
20257: ST_TO_ADDR
// if p3 = 20 then
20258: LD_VAR 0 3
20262: PUSH
20263: LD_INT 20
20265: EQUAL
20266: IFFALSE 20276
// sRemote := true ;
20268: LD_ADDR_EXP 110
20272: PUSH
20273: LD_INT 1
20275: ST_TO_ADDR
// if p3 = 21 then
20276: LD_VAR 0 3
20280: PUSH
20281: LD_INT 21
20283: EQUAL
20284: IFFALSE 20294
// sPowell := true ;
20286: LD_ADDR_EXP 111
20290: PUSH
20291: LD_INT 1
20293: ST_TO_ADDR
// if p3 = 22 then
20294: LD_VAR 0 3
20298: PUSH
20299: LD_INT 22
20301: EQUAL
20302: IFFALSE 20312
// sTeleport := true ;
20304: LD_ADDR_EXP 114
20308: PUSH
20309: LD_INT 1
20311: ST_TO_ADDR
// if p3 = 23 then
20312: LD_VAR 0 3
20316: PUSH
20317: LD_INT 23
20319: EQUAL
20320: IFFALSE 20330
// sOilTower := true ;
20322: LD_ADDR_EXP 116
20326: PUSH
20327: LD_INT 1
20329: ST_TO_ADDR
// if p3 = 24 then
20330: LD_VAR 0 3
20334: PUSH
20335: LD_INT 24
20337: EQUAL
20338: IFFALSE 20348
// sShovel := true ;
20340: LD_ADDR_EXP 117
20344: PUSH
20345: LD_INT 1
20347: ST_TO_ADDR
// if p3 = 25 then
20348: LD_VAR 0 3
20352: PUSH
20353: LD_INT 25
20355: EQUAL
20356: IFFALSE 20366
// sSheik := true ;
20358: LD_ADDR_EXP 118
20362: PUSH
20363: LD_INT 1
20365: ST_TO_ADDR
// if p3 = 26 then
20366: LD_VAR 0 3
20370: PUSH
20371: LD_INT 26
20373: EQUAL
20374: IFFALSE 20384
// sEarthquake := true ;
20376: LD_ADDR_EXP 120
20380: PUSH
20381: LD_INT 1
20383: ST_TO_ADDR
// if p3 = 27 then
20384: LD_VAR 0 3
20388: PUSH
20389: LD_INT 27
20391: EQUAL
20392: IFFALSE 20402
// sAI := true ;
20394: LD_ADDR_EXP 121
20398: PUSH
20399: LD_INT 1
20401: ST_TO_ADDR
// if p3 = 28 then
20402: LD_VAR 0 3
20406: PUSH
20407: LD_INT 28
20409: EQUAL
20410: IFFALSE 20420
// sCargo := true ;
20412: LD_ADDR_EXP 124
20416: PUSH
20417: LD_INT 1
20419: ST_TO_ADDR
// if p3 = 29 then
20420: LD_VAR 0 3
20424: PUSH
20425: LD_INT 29
20427: EQUAL
20428: IFFALSE 20438
// sDLaser := true ;
20430: LD_ADDR_EXP 125
20434: PUSH
20435: LD_INT 1
20437: ST_TO_ADDR
// if p3 = 30 then
20438: LD_VAR 0 3
20442: PUSH
20443: LD_INT 30
20445: EQUAL
20446: IFFALSE 20456
// sExchange := true ;
20448: LD_ADDR_EXP 126
20452: PUSH
20453: LD_INT 1
20455: ST_TO_ADDR
// if p3 = 31 then
20456: LD_VAR 0 3
20460: PUSH
20461: LD_INT 31
20463: EQUAL
20464: IFFALSE 20474
// sFac := true ;
20466: LD_ADDR_EXP 127
20470: PUSH
20471: LD_INT 1
20473: ST_TO_ADDR
// if p3 = 32 then
20474: LD_VAR 0 3
20478: PUSH
20479: LD_INT 32
20481: EQUAL
20482: IFFALSE 20492
// sPower := true ;
20484: LD_ADDR_EXP 128
20488: PUSH
20489: LD_INT 1
20491: ST_TO_ADDR
// if p3 = 33 then
20492: LD_VAR 0 3
20496: PUSH
20497: LD_INT 33
20499: EQUAL
20500: IFFALSE 20510
// sRandom := true ;
20502: LD_ADDR_EXP 129
20506: PUSH
20507: LD_INT 1
20509: ST_TO_ADDR
// if p3 = 34 then
20510: LD_VAR 0 3
20514: PUSH
20515: LD_INT 34
20517: EQUAL
20518: IFFALSE 20528
// sShield := true ;
20520: LD_ADDR_EXP 130
20524: PUSH
20525: LD_INT 1
20527: ST_TO_ADDR
// if p3 = 35 then
20528: LD_VAR 0 3
20532: PUSH
20533: LD_INT 35
20535: EQUAL
20536: IFFALSE 20546
// sTime := true ;
20538: LD_ADDR_EXP 131
20542: PUSH
20543: LD_INT 1
20545: ST_TO_ADDR
// if p3 = 36 then
20546: LD_VAR 0 3
20550: PUSH
20551: LD_INT 36
20553: EQUAL
20554: IFFALSE 20564
// sTools := true ;
20556: LD_ADDR_EXP 132
20560: PUSH
20561: LD_INT 1
20563: ST_TO_ADDR
// if p3 = 101 then
20564: LD_VAR 0 3
20568: PUSH
20569: LD_INT 101
20571: EQUAL
20572: IFFALSE 20582
// sSold := true ;
20574: LD_ADDR_EXP 97
20578: PUSH
20579: LD_INT 1
20581: ST_TO_ADDR
// if p3 = 102 then
20582: LD_VAR 0 3
20586: PUSH
20587: LD_INT 102
20589: EQUAL
20590: IFFALSE 20600
// sDiff := true ;
20592: LD_ADDR_EXP 98
20596: PUSH
20597: LD_INT 1
20599: ST_TO_ADDR
// if p3 = 103 then
20600: LD_VAR 0 3
20604: PUSH
20605: LD_INT 103
20607: EQUAL
20608: IFFALSE 20618
// sFog := true ;
20610: LD_ADDR_EXP 101
20614: PUSH
20615: LD_INT 1
20617: ST_TO_ADDR
// if p3 = 104 then
20618: LD_VAR 0 3
20622: PUSH
20623: LD_INT 104
20625: EQUAL
20626: IFFALSE 20636
// sReset := true ;
20628: LD_ADDR_EXP 102
20632: PUSH
20633: LD_INT 1
20635: ST_TO_ADDR
// if p3 = 105 then
20636: LD_VAR 0 3
20640: PUSH
20641: LD_INT 105
20643: EQUAL
20644: IFFALSE 20654
// sSun := true ;
20646: LD_ADDR_EXP 103
20650: PUSH
20651: LD_INT 1
20653: ST_TO_ADDR
// if p3 = 106 then
20654: LD_VAR 0 3
20658: PUSH
20659: LD_INT 106
20661: EQUAL
20662: IFFALSE 20672
// sTiger := true ;
20664: LD_ADDR_EXP 99
20668: PUSH
20669: LD_INT 1
20671: ST_TO_ADDR
// if p3 = 107 then
20672: LD_VAR 0 3
20676: PUSH
20677: LD_INT 107
20679: EQUAL
20680: IFFALSE 20690
// sBomb := true ;
20682: LD_ADDR_EXP 100
20686: PUSH
20687: LD_INT 1
20689: ST_TO_ADDR
// if p3 = 108 then
20690: LD_VAR 0 3
20694: PUSH
20695: LD_INT 108
20697: EQUAL
20698: IFFALSE 20708
// sWound := true ;
20700: LD_ADDR_EXP 108
20704: PUSH
20705: LD_INT 1
20707: ST_TO_ADDR
// if p3 = 109 then
20708: LD_VAR 0 3
20712: PUSH
20713: LD_INT 109
20715: EQUAL
20716: IFFALSE 20726
// sBetray := true ;
20718: LD_ADDR_EXP 112
20722: PUSH
20723: LD_INT 1
20725: ST_TO_ADDR
// if p3 = 110 then
20726: LD_VAR 0 3
20730: PUSH
20731: LD_INT 110
20733: EQUAL
20734: IFFALSE 20744
// sContamin := true ;
20736: LD_ADDR_EXP 113
20740: PUSH
20741: LD_INT 1
20743: ST_TO_ADDR
// if p3 = 111 then
20744: LD_VAR 0 3
20748: PUSH
20749: LD_INT 111
20751: EQUAL
20752: IFFALSE 20762
// sOil := true ;
20754: LD_ADDR_EXP 115
20758: PUSH
20759: LD_INT 1
20761: ST_TO_ADDR
// if p3 = 112 then
20762: LD_VAR 0 3
20766: PUSH
20767: LD_INT 112
20769: EQUAL
20770: IFFALSE 20780
// sStu := true ;
20772: LD_ADDR_EXP 119
20776: PUSH
20777: LD_INT 1
20779: ST_TO_ADDR
// if p3 = 113 then
20780: LD_VAR 0 3
20784: PUSH
20785: LD_INT 113
20787: EQUAL
20788: IFFALSE 20798
// sBazooka := true ;
20790: LD_ADDR_EXP 122
20794: PUSH
20795: LD_INT 1
20797: ST_TO_ADDR
// if p3 = 114 then
20798: LD_VAR 0 3
20802: PUSH
20803: LD_INT 114
20805: EQUAL
20806: IFFALSE 20816
// sMortar := true ;
20808: LD_ADDR_EXP 123
20812: PUSH
20813: LD_INT 1
20815: ST_TO_ADDR
// if p3 = 115 then
20816: LD_VAR 0 3
20820: PUSH
20821: LD_INT 115
20823: EQUAL
20824: IFFALSE 20834
// sRanger := true ;
20826: LD_ADDR_EXP 133
20830: PUSH
20831: LD_INT 1
20833: ST_TO_ADDR
// if p3 = 116 then
20834: LD_VAR 0 3
20838: PUSH
20839: LD_INT 116
20841: EQUAL
20842: IFFALSE 20852
// sComputer := true ;
20844: LD_ADDR_EXP 134
20848: PUSH
20849: LD_INT 1
20851: ST_TO_ADDR
// if p3 = 117 then
20852: LD_VAR 0 3
20856: PUSH
20857: LD_INT 117
20859: EQUAL
20860: IFFALSE 20870
// s30 := true ;
20862: LD_ADDR_EXP 135
20866: PUSH
20867: LD_INT 1
20869: ST_TO_ADDR
// if p3 = 118 then
20870: LD_VAR 0 3
20874: PUSH
20875: LD_INT 118
20877: EQUAL
20878: IFFALSE 20888
// s60 := true ;
20880: LD_ADDR_EXP 136
20884: PUSH
20885: LD_INT 1
20887: ST_TO_ADDR
// end ; if p2 = 101 then
20888: LD_VAR 0 2
20892: PUSH
20893: LD_INT 101
20895: EQUAL
20896: IFFALSE 21024
// begin case p3 of 1 :
20898: LD_VAR 0 3
20902: PUSH
20903: LD_INT 1
20905: DOUBLE
20906: EQUAL
20907: IFTRUE 20911
20909: GO 20918
20911: POP
// hHackUnlimitedResources ; 2 :
20912: CALL 33122 0 0
20916: GO 21024
20918: LD_INT 2
20920: DOUBLE
20921: EQUAL
20922: IFTRUE 20926
20924: GO 20933
20926: POP
// hHackSetLevel10 ; 3 :
20927: CALL 33255 0 0
20931: GO 21024
20933: LD_INT 3
20935: DOUBLE
20936: EQUAL
20937: IFTRUE 20941
20939: GO 20948
20941: POP
// hHackSetLevel10YourUnits ; 4 :
20942: CALL 33340 0 0
20946: GO 21024
20948: LD_INT 4
20950: DOUBLE
20951: EQUAL
20952: IFTRUE 20956
20954: GO 20963
20956: POP
// hHackInvincible ; 5 :
20957: CALL 33788 0 0
20961: GO 21024
20963: LD_INT 5
20965: DOUBLE
20966: EQUAL
20967: IFTRUE 20971
20969: GO 20978
20971: POP
// hHackInvisible ; 6 :
20972: CALL 33899 0 0
20976: GO 21024
20978: LD_INT 6
20980: DOUBLE
20981: EQUAL
20982: IFTRUE 20986
20984: GO 20993
20986: POP
// hHackChangeYourSide ; 7 :
20987: CALL 33956 0 0
20991: GO 21024
20993: LD_INT 7
20995: DOUBLE
20996: EQUAL
20997: IFTRUE 21001
20999: GO 21008
21001: POP
// hHackChangeUnitSide ; 8 :
21002: CALL 33998 0 0
21006: GO 21024
21008: LD_INT 8
21010: DOUBLE
21011: EQUAL
21012: IFTRUE 21016
21014: GO 21023
21016: POP
// hHackFog ; end ;
21017: CALL 34099 0 0
21021: GO 21024
21023: POP
// end ; end ;
21024: LD_VAR 0 7
21028: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
21029: GO 21031
21031: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
21032: LD_STRING initStreamRollete();
21034: PPUSH
21035: CALL_OW 559
// InitStreamMode ;
21039: CALL 21051 0 0
// DefineStreamItems ( false ) ;
21043: LD_INT 0
21045: PPUSH
21046: CALL 21515 0 1
// end ;
21050: END
// function InitStreamMode ; begin
21051: LD_INT 0
21053: PPUSH
// streamModeActive := false ;
21054: LD_ADDR_EXP 80
21058: PUSH
21059: LD_INT 0
21061: ST_TO_ADDR
// normalCounter := 36 ;
21062: LD_ADDR_EXP 81
21066: PUSH
21067: LD_INT 36
21069: ST_TO_ADDR
// hardcoreCounter := 18 ;
21070: LD_ADDR_EXP 82
21074: PUSH
21075: LD_INT 18
21077: ST_TO_ADDR
// sRocket := false ;
21078: LD_ADDR_EXP 85
21082: PUSH
21083: LD_INT 0
21085: ST_TO_ADDR
// sSpeed := false ;
21086: LD_ADDR_EXP 84
21090: PUSH
21091: LD_INT 0
21093: ST_TO_ADDR
// sEngine := false ;
21094: LD_ADDR_EXP 86
21098: PUSH
21099: LD_INT 0
21101: ST_TO_ADDR
// sSpec := false ;
21102: LD_ADDR_EXP 83
21106: PUSH
21107: LD_INT 0
21109: ST_TO_ADDR
// sLevel := false ;
21110: LD_ADDR_EXP 87
21114: PUSH
21115: LD_INT 0
21117: ST_TO_ADDR
// sArmoury := false ;
21118: LD_ADDR_EXP 88
21122: PUSH
21123: LD_INT 0
21125: ST_TO_ADDR
// sRadar := false ;
21126: LD_ADDR_EXP 89
21130: PUSH
21131: LD_INT 0
21133: ST_TO_ADDR
// sBunker := false ;
21134: LD_ADDR_EXP 90
21138: PUSH
21139: LD_INT 0
21141: ST_TO_ADDR
// sHack := false ;
21142: LD_ADDR_EXP 91
21146: PUSH
21147: LD_INT 0
21149: ST_TO_ADDR
// sFire := false ;
21150: LD_ADDR_EXP 92
21154: PUSH
21155: LD_INT 0
21157: ST_TO_ADDR
// sRefresh := false ;
21158: LD_ADDR_EXP 93
21162: PUSH
21163: LD_INT 0
21165: ST_TO_ADDR
// sExp := false ;
21166: LD_ADDR_EXP 94
21170: PUSH
21171: LD_INT 0
21173: ST_TO_ADDR
// sDepot := false ;
21174: LD_ADDR_EXP 95
21178: PUSH
21179: LD_INT 0
21181: ST_TO_ADDR
// sFlag := false ;
21182: LD_ADDR_EXP 96
21186: PUSH
21187: LD_INT 0
21189: ST_TO_ADDR
// sKamikadze := false ;
21190: LD_ADDR_EXP 104
21194: PUSH
21195: LD_INT 0
21197: ST_TO_ADDR
// sTroll := false ;
21198: LD_ADDR_EXP 105
21202: PUSH
21203: LD_INT 0
21205: ST_TO_ADDR
// sSlow := false ;
21206: LD_ADDR_EXP 106
21210: PUSH
21211: LD_INT 0
21213: ST_TO_ADDR
// sLack := false ;
21214: LD_ADDR_EXP 107
21218: PUSH
21219: LD_INT 0
21221: ST_TO_ADDR
// sTank := false ;
21222: LD_ADDR_EXP 109
21226: PUSH
21227: LD_INT 0
21229: ST_TO_ADDR
// sRemote := false ;
21230: LD_ADDR_EXP 110
21234: PUSH
21235: LD_INT 0
21237: ST_TO_ADDR
// sPowell := false ;
21238: LD_ADDR_EXP 111
21242: PUSH
21243: LD_INT 0
21245: ST_TO_ADDR
// sTeleport := false ;
21246: LD_ADDR_EXP 114
21250: PUSH
21251: LD_INT 0
21253: ST_TO_ADDR
// sOilTower := false ;
21254: LD_ADDR_EXP 116
21258: PUSH
21259: LD_INT 0
21261: ST_TO_ADDR
// sShovel := false ;
21262: LD_ADDR_EXP 117
21266: PUSH
21267: LD_INT 0
21269: ST_TO_ADDR
// sSheik := false ;
21270: LD_ADDR_EXP 118
21274: PUSH
21275: LD_INT 0
21277: ST_TO_ADDR
// sEarthquake := false ;
21278: LD_ADDR_EXP 120
21282: PUSH
21283: LD_INT 0
21285: ST_TO_ADDR
// sAI := false ;
21286: LD_ADDR_EXP 121
21290: PUSH
21291: LD_INT 0
21293: ST_TO_ADDR
// sCargo := false ;
21294: LD_ADDR_EXP 124
21298: PUSH
21299: LD_INT 0
21301: ST_TO_ADDR
// sDLaser := false ;
21302: LD_ADDR_EXP 125
21306: PUSH
21307: LD_INT 0
21309: ST_TO_ADDR
// sExchange := false ;
21310: LD_ADDR_EXP 126
21314: PUSH
21315: LD_INT 0
21317: ST_TO_ADDR
// sFac := false ;
21318: LD_ADDR_EXP 127
21322: PUSH
21323: LD_INT 0
21325: ST_TO_ADDR
// sPower := false ;
21326: LD_ADDR_EXP 128
21330: PUSH
21331: LD_INT 0
21333: ST_TO_ADDR
// sRandom := false ;
21334: LD_ADDR_EXP 129
21338: PUSH
21339: LD_INT 0
21341: ST_TO_ADDR
// sShield := false ;
21342: LD_ADDR_EXP 130
21346: PUSH
21347: LD_INT 0
21349: ST_TO_ADDR
// sTime := false ;
21350: LD_ADDR_EXP 131
21354: PUSH
21355: LD_INT 0
21357: ST_TO_ADDR
// sTools := false ;
21358: LD_ADDR_EXP 132
21362: PUSH
21363: LD_INT 0
21365: ST_TO_ADDR
// sSold := false ;
21366: LD_ADDR_EXP 97
21370: PUSH
21371: LD_INT 0
21373: ST_TO_ADDR
// sDiff := false ;
21374: LD_ADDR_EXP 98
21378: PUSH
21379: LD_INT 0
21381: ST_TO_ADDR
// sFog := false ;
21382: LD_ADDR_EXP 101
21386: PUSH
21387: LD_INT 0
21389: ST_TO_ADDR
// sReset := false ;
21390: LD_ADDR_EXP 102
21394: PUSH
21395: LD_INT 0
21397: ST_TO_ADDR
// sSun := false ;
21398: LD_ADDR_EXP 103
21402: PUSH
21403: LD_INT 0
21405: ST_TO_ADDR
// sTiger := false ;
21406: LD_ADDR_EXP 99
21410: PUSH
21411: LD_INT 0
21413: ST_TO_ADDR
// sBomb := false ;
21414: LD_ADDR_EXP 100
21418: PUSH
21419: LD_INT 0
21421: ST_TO_ADDR
// sWound := false ;
21422: LD_ADDR_EXP 108
21426: PUSH
21427: LD_INT 0
21429: ST_TO_ADDR
// sBetray := false ;
21430: LD_ADDR_EXP 112
21434: PUSH
21435: LD_INT 0
21437: ST_TO_ADDR
// sContamin := false ;
21438: LD_ADDR_EXP 113
21442: PUSH
21443: LD_INT 0
21445: ST_TO_ADDR
// sOil := false ;
21446: LD_ADDR_EXP 115
21450: PUSH
21451: LD_INT 0
21453: ST_TO_ADDR
// sStu := false ;
21454: LD_ADDR_EXP 119
21458: PUSH
21459: LD_INT 0
21461: ST_TO_ADDR
// sBazooka := false ;
21462: LD_ADDR_EXP 122
21466: PUSH
21467: LD_INT 0
21469: ST_TO_ADDR
// sMortar := false ;
21470: LD_ADDR_EXP 123
21474: PUSH
21475: LD_INT 0
21477: ST_TO_ADDR
// sRanger := false ;
21478: LD_ADDR_EXP 133
21482: PUSH
21483: LD_INT 0
21485: ST_TO_ADDR
// sComputer := false ;
21486: LD_ADDR_EXP 134
21490: PUSH
21491: LD_INT 0
21493: ST_TO_ADDR
// s30 := false ;
21494: LD_ADDR_EXP 135
21498: PUSH
21499: LD_INT 0
21501: ST_TO_ADDR
// s60 := false ;
21502: LD_ADDR_EXP 136
21506: PUSH
21507: LD_INT 0
21509: ST_TO_ADDR
// end ;
21510: LD_VAR 0 1
21514: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21515: LD_INT 0
21517: PPUSH
21518: PPUSH
21519: PPUSH
21520: PPUSH
21521: PPUSH
21522: PPUSH
21523: PPUSH
// result := [ ] ;
21524: LD_ADDR_VAR 0 2
21528: PUSH
21529: EMPTY
21530: ST_TO_ADDR
// if campaign_id = 1 then
21531: LD_OWVAR 69
21535: PUSH
21536: LD_INT 1
21538: EQUAL
21539: IFFALSE 24705
// begin case mission_number of 1 :
21541: LD_OWVAR 70
21545: PUSH
21546: LD_INT 1
21548: DOUBLE
21549: EQUAL
21550: IFTRUE 21554
21552: GO 21630
21554: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21555: LD_ADDR_VAR 0 2
21559: PUSH
21560: LD_INT 2
21562: PUSH
21563: LD_INT 4
21565: PUSH
21566: LD_INT 11
21568: PUSH
21569: LD_INT 12
21571: PUSH
21572: LD_INT 15
21574: PUSH
21575: LD_INT 16
21577: PUSH
21578: LD_INT 22
21580: PUSH
21581: LD_INT 23
21583: PUSH
21584: LD_INT 26
21586: PUSH
21587: EMPTY
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: PUSH
21598: LD_INT 101
21600: PUSH
21601: LD_INT 102
21603: PUSH
21604: LD_INT 106
21606: PUSH
21607: LD_INT 116
21609: PUSH
21610: LD_INT 117
21612: PUSH
21613: LD_INT 118
21615: PUSH
21616: EMPTY
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: PUSH
21624: EMPTY
21625: LIST
21626: LIST
21627: ST_TO_ADDR
21628: GO 24703
21630: LD_INT 2
21632: DOUBLE
21633: EQUAL
21634: IFTRUE 21638
21636: GO 21722
21638: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21639: LD_ADDR_VAR 0 2
21643: PUSH
21644: LD_INT 2
21646: PUSH
21647: LD_INT 4
21649: PUSH
21650: LD_INT 11
21652: PUSH
21653: LD_INT 12
21655: PUSH
21656: LD_INT 15
21658: PUSH
21659: LD_INT 16
21661: PUSH
21662: LD_INT 22
21664: PUSH
21665: LD_INT 23
21667: PUSH
21668: LD_INT 26
21670: PUSH
21671: EMPTY
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: LIST
21681: PUSH
21682: LD_INT 101
21684: PUSH
21685: LD_INT 102
21687: PUSH
21688: LD_INT 105
21690: PUSH
21691: LD_INT 106
21693: PUSH
21694: LD_INT 108
21696: PUSH
21697: LD_INT 116
21699: PUSH
21700: LD_INT 117
21702: PUSH
21703: LD_INT 118
21705: PUSH
21706: EMPTY
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: PUSH
21716: EMPTY
21717: LIST
21718: LIST
21719: ST_TO_ADDR
21720: GO 24703
21722: LD_INT 3
21724: DOUBLE
21725: EQUAL
21726: IFTRUE 21730
21728: GO 21818
21730: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21731: LD_ADDR_VAR 0 2
21735: PUSH
21736: LD_INT 2
21738: PUSH
21739: LD_INT 4
21741: PUSH
21742: LD_INT 5
21744: PUSH
21745: LD_INT 11
21747: PUSH
21748: LD_INT 12
21750: PUSH
21751: LD_INT 15
21753: PUSH
21754: LD_INT 16
21756: PUSH
21757: LD_INT 22
21759: PUSH
21760: LD_INT 26
21762: PUSH
21763: LD_INT 36
21765: PUSH
21766: EMPTY
21767: LIST
21768: LIST
21769: LIST
21770: LIST
21771: LIST
21772: LIST
21773: LIST
21774: LIST
21775: LIST
21776: LIST
21777: PUSH
21778: LD_INT 101
21780: PUSH
21781: LD_INT 102
21783: PUSH
21784: LD_INT 105
21786: PUSH
21787: LD_INT 106
21789: PUSH
21790: LD_INT 108
21792: PUSH
21793: LD_INT 116
21795: PUSH
21796: LD_INT 117
21798: PUSH
21799: LD_INT 118
21801: PUSH
21802: EMPTY
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: PUSH
21812: EMPTY
21813: LIST
21814: LIST
21815: ST_TO_ADDR
21816: GO 24703
21818: LD_INT 4
21820: DOUBLE
21821: EQUAL
21822: IFTRUE 21826
21824: GO 21922
21826: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21827: LD_ADDR_VAR 0 2
21831: PUSH
21832: LD_INT 2
21834: PUSH
21835: LD_INT 4
21837: PUSH
21838: LD_INT 5
21840: PUSH
21841: LD_INT 8
21843: PUSH
21844: LD_INT 11
21846: PUSH
21847: LD_INT 12
21849: PUSH
21850: LD_INT 15
21852: PUSH
21853: LD_INT 16
21855: PUSH
21856: LD_INT 22
21858: PUSH
21859: LD_INT 23
21861: PUSH
21862: LD_INT 26
21864: PUSH
21865: LD_INT 36
21867: PUSH
21868: EMPTY
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: PUSH
21882: LD_INT 101
21884: PUSH
21885: LD_INT 102
21887: PUSH
21888: LD_INT 105
21890: PUSH
21891: LD_INT 106
21893: PUSH
21894: LD_INT 108
21896: PUSH
21897: LD_INT 116
21899: PUSH
21900: LD_INT 117
21902: PUSH
21903: LD_INT 118
21905: PUSH
21906: EMPTY
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: LIST
21914: LIST
21915: PUSH
21916: EMPTY
21917: LIST
21918: LIST
21919: ST_TO_ADDR
21920: GO 24703
21922: LD_INT 5
21924: DOUBLE
21925: EQUAL
21926: IFTRUE 21930
21928: GO 22042
21930: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21931: LD_ADDR_VAR 0 2
21935: PUSH
21936: LD_INT 2
21938: PUSH
21939: LD_INT 4
21941: PUSH
21942: LD_INT 5
21944: PUSH
21945: LD_INT 6
21947: PUSH
21948: LD_INT 8
21950: PUSH
21951: LD_INT 11
21953: PUSH
21954: LD_INT 12
21956: PUSH
21957: LD_INT 15
21959: PUSH
21960: LD_INT 16
21962: PUSH
21963: LD_INT 22
21965: PUSH
21966: LD_INT 23
21968: PUSH
21969: LD_INT 25
21971: PUSH
21972: LD_INT 26
21974: PUSH
21975: LD_INT 36
21977: PUSH
21978: EMPTY
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: LIST
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: PUSH
21994: LD_INT 101
21996: PUSH
21997: LD_INT 102
21999: PUSH
22000: LD_INT 105
22002: PUSH
22003: LD_INT 106
22005: PUSH
22006: LD_INT 108
22008: PUSH
22009: LD_INT 109
22011: PUSH
22012: LD_INT 112
22014: PUSH
22015: LD_INT 116
22017: PUSH
22018: LD_INT 117
22020: PUSH
22021: LD_INT 118
22023: PUSH
22024: EMPTY
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: PUSH
22036: EMPTY
22037: LIST
22038: LIST
22039: ST_TO_ADDR
22040: GO 24703
22042: LD_INT 6
22044: DOUBLE
22045: EQUAL
22046: IFTRUE 22050
22048: GO 22182
22050: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22051: LD_ADDR_VAR 0 2
22055: PUSH
22056: LD_INT 2
22058: PUSH
22059: LD_INT 4
22061: PUSH
22062: LD_INT 5
22064: PUSH
22065: LD_INT 6
22067: PUSH
22068: LD_INT 8
22070: PUSH
22071: LD_INT 11
22073: PUSH
22074: LD_INT 12
22076: PUSH
22077: LD_INT 15
22079: PUSH
22080: LD_INT 16
22082: PUSH
22083: LD_INT 20
22085: PUSH
22086: LD_INT 21
22088: PUSH
22089: LD_INT 22
22091: PUSH
22092: LD_INT 23
22094: PUSH
22095: LD_INT 25
22097: PUSH
22098: LD_INT 26
22100: PUSH
22101: LD_INT 30
22103: PUSH
22104: LD_INT 31
22106: PUSH
22107: LD_INT 32
22109: PUSH
22110: LD_INT 36
22112: PUSH
22113: EMPTY
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: LIST
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: PUSH
22134: LD_INT 101
22136: PUSH
22137: LD_INT 102
22139: PUSH
22140: LD_INT 105
22142: PUSH
22143: LD_INT 106
22145: PUSH
22146: LD_INT 108
22148: PUSH
22149: LD_INT 109
22151: PUSH
22152: LD_INT 112
22154: PUSH
22155: LD_INT 116
22157: PUSH
22158: LD_INT 117
22160: PUSH
22161: LD_INT 118
22163: PUSH
22164: EMPTY
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: PUSH
22176: EMPTY
22177: LIST
22178: LIST
22179: ST_TO_ADDR
22180: GO 24703
22182: LD_INT 7
22184: DOUBLE
22185: EQUAL
22186: IFTRUE 22190
22188: GO 22302
22190: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22191: LD_ADDR_VAR 0 2
22195: PUSH
22196: LD_INT 2
22198: PUSH
22199: LD_INT 4
22201: PUSH
22202: LD_INT 5
22204: PUSH
22205: LD_INT 7
22207: PUSH
22208: LD_INT 11
22210: PUSH
22211: LD_INT 12
22213: PUSH
22214: LD_INT 15
22216: PUSH
22217: LD_INT 16
22219: PUSH
22220: LD_INT 20
22222: PUSH
22223: LD_INT 21
22225: PUSH
22226: LD_INT 22
22228: PUSH
22229: LD_INT 23
22231: PUSH
22232: LD_INT 25
22234: PUSH
22235: LD_INT 26
22237: PUSH
22238: EMPTY
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: PUSH
22254: LD_INT 101
22256: PUSH
22257: LD_INT 102
22259: PUSH
22260: LD_INT 103
22262: PUSH
22263: LD_INT 105
22265: PUSH
22266: LD_INT 106
22268: PUSH
22269: LD_INT 108
22271: PUSH
22272: LD_INT 112
22274: PUSH
22275: LD_INT 116
22277: PUSH
22278: LD_INT 117
22280: PUSH
22281: LD_INT 118
22283: PUSH
22284: EMPTY
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: PUSH
22296: EMPTY
22297: LIST
22298: LIST
22299: ST_TO_ADDR
22300: GO 24703
22302: LD_INT 8
22304: DOUBLE
22305: EQUAL
22306: IFTRUE 22310
22308: GO 22450
22310: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22311: LD_ADDR_VAR 0 2
22315: PUSH
22316: LD_INT 2
22318: PUSH
22319: LD_INT 4
22321: PUSH
22322: LD_INT 5
22324: PUSH
22325: LD_INT 6
22327: PUSH
22328: LD_INT 7
22330: PUSH
22331: LD_INT 8
22333: PUSH
22334: LD_INT 11
22336: PUSH
22337: LD_INT 12
22339: PUSH
22340: LD_INT 15
22342: PUSH
22343: LD_INT 16
22345: PUSH
22346: LD_INT 20
22348: PUSH
22349: LD_INT 21
22351: PUSH
22352: LD_INT 22
22354: PUSH
22355: LD_INT 23
22357: PUSH
22358: LD_INT 25
22360: PUSH
22361: LD_INT 26
22363: PUSH
22364: LD_INT 30
22366: PUSH
22367: LD_INT 31
22369: PUSH
22370: LD_INT 32
22372: PUSH
22373: LD_INT 36
22375: PUSH
22376: EMPTY
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: LIST
22396: LIST
22397: PUSH
22398: LD_INT 101
22400: PUSH
22401: LD_INT 102
22403: PUSH
22404: LD_INT 103
22406: PUSH
22407: LD_INT 105
22409: PUSH
22410: LD_INT 106
22412: PUSH
22413: LD_INT 108
22415: PUSH
22416: LD_INT 109
22418: PUSH
22419: LD_INT 112
22421: PUSH
22422: LD_INT 116
22424: PUSH
22425: LD_INT 117
22427: PUSH
22428: LD_INT 118
22430: PUSH
22431: EMPTY
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: PUSH
22444: EMPTY
22445: LIST
22446: LIST
22447: ST_TO_ADDR
22448: GO 24703
22450: LD_INT 9
22452: DOUBLE
22453: EQUAL
22454: IFTRUE 22458
22456: GO 22606
22458: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22459: LD_ADDR_VAR 0 2
22463: PUSH
22464: LD_INT 2
22466: PUSH
22467: LD_INT 4
22469: PUSH
22470: LD_INT 5
22472: PUSH
22473: LD_INT 6
22475: PUSH
22476: LD_INT 7
22478: PUSH
22479: LD_INT 8
22481: PUSH
22482: LD_INT 11
22484: PUSH
22485: LD_INT 12
22487: PUSH
22488: LD_INT 15
22490: PUSH
22491: LD_INT 16
22493: PUSH
22494: LD_INT 20
22496: PUSH
22497: LD_INT 21
22499: PUSH
22500: LD_INT 22
22502: PUSH
22503: LD_INT 23
22505: PUSH
22506: LD_INT 25
22508: PUSH
22509: LD_INT 26
22511: PUSH
22512: LD_INT 28
22514: PUSH
22515: LD_INT 30
22517: PUSH
22518: LD_INT 31
22520: PUSH
22521: LD_INT 32
22523: PUSH
22524: LD_INT 36
22526: PUSH
22527: EMPTY
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: PUSH
22550: LD_INT 101
22552: PUSH
22553: LD_INT 102
22555: PUSH
22556: LD_INT 103
22558: PUSH
22559: LD_INT 105
22561: PUSH
22562: LD_INT 106
22564: PUSH
22565: LD_INT 108
22567: PUSH
22568: LD_INT 109
22570: PUSH
22571: LD_INT 112
22573: PUSH
22574: LD_INT 114
22576: PUSH
22577: LD_INT 116
22579: PUSH
22580: LD_INT 117
22582: PUSH
22583: LD_INT 118
22585: PUSH
22586: EMPTY
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: ST_TO_ADDR
22604: GO 24703
22606: LD_INT 10
22608: DOUBLE
22609: EQUAL
22610: IFTRUE 22614
22612: GO 22810
22614: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22615: LD_ADDR_VAR 0 2
22619: PUSH
22620: LD_INT 2
22622: PUSH
22623: LD_INT 4
22625: PUSH
22626: LD_INT 5
22628: PUSH
22629: LD_INT 6
22631: PUSH
22632: LD_INT 7
22634: PUSH
22635: LD_INT 8
22637: PUSH
22638: LD_INT 9
22640: PUSH
22641: LD_INT 10
22643: PUSH
22644: LD_INT 11
22646: PUSH
22647: LD_INT 12
22649: PUSH
22650: LD_INT 13
22652: PUSH
22653: LD_INT 14
22655: PUSH
22656: LD_INT 15
22658: PUSH
22659: LD_INT 16
22661: PUSH
22662: LD_INT 17
22664: PUSH
22665: LD_INT 18
22667: PUSH
22668: LD_INT 19
22670: PUSH
22671: LD_INT 20
22673: PUSH
22674: LD_INT 21
22676: PUSH
22677: LD_INT 22
22679: PUSH
22680: LD_INT 23
22682: PUSH
22683: LD_INT 24
22685: PUSH
22686: LD_INT 25
22688: PUSH
22689: LD_INT 26
22691: PUSH
22692: LD_INT 28
22694: PUSH
22695: LD_INT 30
22697: PUSH
22698: LD_INT 31
22700: PUSH
22701: LD_INT 32
22703: PUSH
22704: LD_INT 36
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: PUSH
22738: LD_INT 101
22740: PUSH
22741: LD_INT 102
22743: PUSH
22744: LD_INT 103
22746: PUSH
22747: LD_INT 104
22749: PUSH
22750: LD_INT 105
22752: PUSH
22753: LD_INT 106
22755: PUSH
22756: LD_INT 107
22758: PUSH
22759: LD_INT 108
22761: PUSH
22762: LD_INT 109
22764: PUSH
22765: LD_INT 110
22767: PUSH
22768: LD_INT 111
22770: PUSH
22771: LD_INT 112
22773: PUSH
22774: LD_INT 114
22776: PUSH
22777: LD_INT 116
22779: PUSH
22780: LD_INT 117
22782: PUSH
22783: LD_INT 118
22785: PUSH
22786: EMPTY
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: PUSH
22804: EMPTY
22805: LIST
22806: LIST
22807: ST_TO_ADDR
22808: GO 24703
22810: LD_INT 11
22812: DOUBLE
22813: EQUAL
22814: IFTRUE 22818
22816: GO 23022
22818: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22819: LD_ADDR_VAR 0 2
22823: PUSH
22824: LD_INT 2
22826: PUSH
22827: LD_INT 3
22829: PUSH
22830: LD_INT 4
22832: PUSH
22833: LD_INT 5
22835: PUSH
22836: LD_INT 6
22838: PUSH
22839: LD_INT 7
22841: PUSH
22842: LD_INT 8
22844: PUSH
22845: LD_INT 9
22847: PUSH
22848: LD_INT 10
22850: PUSH
22851: LD_INT 11
22853: PUSH
22854: LD_INT 12
22856: PUSH
22857: LD_INT 13
22859: PUSH
22860: LD_INT 14
22862: PUSH
22863: LD_INT 15
22865: PUSH
22866: LD_INT 16
22868: PUSH
22869: LD_INT 17
22871: PUSH
22872: LD_INT 18
22874: PUSH
22875: LD_INT 19
22877: PUSH
22878: LD_INT 20
22880: PUSH
22881: LD_INT 21
22883: PUSH
22884: LD_INT 22
22886: PUSH
22887: LD_INT 23
22889: PUSH
22890: LD_INT 24
22892: PUSH
22893: LD_INT 25
22895: PUSH
22896: LD_INT 26
22898: PUSH
22899: LD_INT 28
22901: PUSH
22902: LD_INT 30
22904: PUSH
22905: LD_INT 31
22907: PUSH
22908: LD_INT 32
22910: PUSH
22911: LD_INT 34
22913: PUSH
22914: LD_INT 36
22916: PUSH
22917: EMPTY
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: PUSH
22950: LD_INT 101
22952: PUSH
22953: LD_INT 102
22955: PUSH
22956: LD_INT 103
22958: PUSH
22959: LD_INT 104
22961: PUSH
22962: LD_INT 105
22964: PUSH
22965: LD_INT 106
22967: PUSH
22968: LD_INT 107
22970: PUSH
22971: LD_INT 108
22973: PUSH
22974: LD_INT 109
22976: PUSH
22977: LD_INT 110
22979: PUSH
22980: LD_INT 111
22982: PUSH
22983: LD_INT 112
22985: PUSH
22986: LD_INT 114
22988: PUSH
22989: LD_INT 116
22991: PUSH
22992: LD_INT 117
22994: PUSH
22995: LD_INT 118
22997: PUSH
22998: EMPTY
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: PUSH
23016: EMPTY
23017: LIST
23018: LIST
23019: ST_TO_ADDR
23020: GO 24703
23022: LD_INT 12
23024: DOUBLE
23025: EQUAL
23026: IFTRUE 23030
23028: GO 23250
23030: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23031: LD_ADDR_VAR 0 2
23035: PUSH
23036: LD_INT 1
23038: PUSH
23039: LD_INT 2
23041: PUSH
23042: LD_INT 3
23044: PUSH
23045: LD_INT 4
23047: PUSH
23048: LD_INT 5
23050: PUSH
23051: LD_INT 6
23053: PUSH
23054: LD_INT 7
23056: PUSH
23057: LD_INT 8
23059: PUSH
23060: LD_INT 9
23062: PUSH
23063: LD_INT 10
23065: PUSH
23066: LD_INT 11
23068: PUSH
23069: LD_INT 12
23071: PUSH
23072: LD_INT 13
23074: PUSH
23075: LD_INT 14
23077: PUSH
23078: LD_INT 15
23080: PUSH
23081: LD_INT 16
23083: PUSH
23084: LD_INT 17
23086: PUSH
23087: LD_INT 18
23089: PUSH
23090: LD_INT 19
23092: PUSH
23093: LD_INT 20
23095: PUSH
23096: LD_INT 21
23098: PUSH
23099: LD_INT 22
23101: PUSH
23102: LD_INT 23
23104: PUSH
23105: LD_INT 24
23107: PUSH
23108: LD_INT 25
23110: PUSH
23111: LD_INT 26
23113: PUSH
23114: LD_INT 27
23116: PUSH
23117: LD_INT 28
23119: PUSH
23120: LD_INT 30
23122: PUSH
23123: LD_INT 31
23125: PUSH
23126: LD_INT 32
23128: PUSH
23129: LD_INT 33
23131: PUSH
23132: LD_INT 34
23134: PUSH
23135: LD_INT 36
23137: PUSH
23138: EMPTY
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: PUSH
23174: LD_INT 101
23176: PUSH
23177: LD_INT 102
23179: PUSH
23180: LD_INT 103
23182: PUSH
23183: LD_INT 104
23185: PUSH
23186: LD_INT 105
23188: PUSH
23189: LD_INT 106
23191: PUSH
23192: LD_INT 107
23194: PUSH
23195: LD_INT 108
23197: PUSH
23198: LD_INT 109
23200: PUSH
23201: LD_INT 110
23203: PUSH
23204: LD_INT 111
23206: PUSH
23207: LD_INT 112
23209: PUSH
23210: LD_INT 113
23212: PUSH
23213: LD_INT 114
23215: PUSH
23216: LD_INT 116
23218: PUSH
23219: LD_INT 117
23221: PUSH
23222: LD_INT 118
23224: PUSH
23225: EMPTY
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: PUSH
23244: EMPTY
23245: LIST
23246: LIST
23247: ST_TO_ADDR
23248: GO 24703
23250: LD_INT 13
23252: DOUBLE
23253: EQUAL
23254: IFTRUE 23258
23256: GO 23466
23258: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23259: LD_ADDR_VAR 0 2
23263: PUSH
23264: LD_INT 1
23266: PUSH
23267: LD_INT 2
23269: PUSH
23270: LD_INT 3
23272: PUSH
23273: LD_INT 4
23275: PUSH
23276: LD_INT 5
23278: PUSH
23279: LD_INT 8
23281: PUSH
23282: LD_INT 9
23284: PUSH
23285: LD_INT 10
23287: PUSH
23288: LD_INT 11
23290: PUSH
23291: LD_INT 12
23293: PUSH
23294: LD_INT 14
23296: PUSH
23297: LD_INT 15
23299: PUSH
23300: LD_INT 16
23302: PUSH
23303: LD_INT 17
23305: PUSH
23306: LD_INT 18
23308: PUSH
23309: LD_INT 19
23311: PUSH
23312: LD_INT 20
23314: PUSH
23315: LD_INT 21
23317: PUSH
23318: LD_INT 22
23320: PUSH
23321: LD_INT 23
23323: PUSH
23324: LD_INT 24
23326: PUSH
23327: LD_INT 25
23329: PUSH
23330: LD_INT 26
23332: PUSH
23333: LD_INT 27
23335: PUSH
23336: LD_INT 28
23338: PUSH
23339: LD_INT 30
23341: PUSH
23342: LD_INT 31
23344: PUSH
23345: LD_INT 32
23347: PUSH
23348: LD_INT 33
23350: PUSH
23351: LD_INT 34
23353: PUSH
23354: LD_INT 36
23356: PUSH
23357: EMPTY
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: PUSH
23390: LD_INT 101
23392: PUSH
23393: LD_INT 102
23395: PUSH
23396: LD_INT 103
23398: PUSH
23399: LD_INT 104
23401: PUSH
23402: LD_INT 105
23404: PUSH
23405: LD_INT 106
23407: PUSH
23408: LD_INT 107
23410: PUSH
23411: LD_INT 108
23413: PUSH
23414: LD_INT 109
23416: PUSH
23417: LD_INT 110
23419: PUSH
23420: LD_INT 111
23422: PUSH
23423: LD_INT 112
23425: PUSH
23426: LD_INT 113
23428: PUSH
23429: LD_INT 114
23431: PUSH
23432: LD_INT 116
23434: PUSH
23435: LD_INT 117
23437: PUSH
23438: LD_INT 118
23440: PUSH
23441: EMPTY
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: PUSH
23460: EMPTY
23461: LIST
23462: LIST
23463: ST_TO_ADDR
23464: GO 24703
23466: LD_INT 14
23468: DOUBLE
23469: EQUAL
23470: IFTRUE 23474
23472: GO 23698
23474: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23475: LD_ADDR_VAR 0 2
23479: PUSH
23480: LD_INT 1
23482: PUSH
23483: LD_INT 2
23485: PUSH
23486: LD_INT 3
23488: PUSH
23489: LD_INT 4
23491: PUSH
23492: LD_INT 5
23494: PUSH
23495: LD_INT 6
23497: PUSH
23498: LD_INT 7
23500: PUSH
23501: LD_INT 8
23503: PUSH
23504: LD_INT 9
23506: PUSH
23507: LD_INT 10
23509: PUSH
23510: LD_INT 11
23512: PUSH
23513: LD_INT 12
23515: PUSH
23516: LD_INT 13
23518: PUSH
23519: LD_INT 14
23521: PUSH
23522: LD_INT 15
23524: PUSH
23525: LD_INT 16
23527: PUSH
23528: LD_INT 17
23530: PUSH
23531: LD_INT 18
23533: PUSH
23534: LD_INT 19
23536: PUSH
23537: LD_INT 20
23539: PUSH
23540: LD_INT 21
23542: PUSH
23543: LD_INT 22
23545: PUSH
23546: LD_INT 23
23548: PUSH
23549: LD_INT 24
23551: PUSH
23552: LD_INT 25
23554: PUSH
23555: LD_INT 26
23557: PUSH
23558: LD_INT 27
23560: PUSH
23561: LD_INT 28
23563: PUSH
23564: LD_INT 29
23566: PUSH
23567: LD_INT 30
23569: PUSH
23570: LD_INT 31
23572: PUSH
23573: LD_INT 32
23575: PUSH
23576: LD_INT 33
23578: PUSH
23579: LD_INT 34
23581: PUSH
23582: LD_INT 36
23584: PUSH
23585: EMPTY
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: PUSH
23622: LD_INT 101
23624: PUSH
23625: LD_INT 102
23627: PUSH
23628: LD_INT 103
23630: PUSH
23631: LD_INT 104
23633: PUSH
23634: LD_INT 105
23636: PUSH
23637: LD_INT 106
23639: PUSH
23640: LD_INT 107
23642: PUSH
23643: LD_INT 108
23645: PUSH
23646: LD_INT 109
23648: PUSH
23649: LD_INT 110
23651: PUSH
23652: LD_INT 111
23654: PUSH
23655: LD_INT 112
23657: PUSH
23658: LD_INT 113
23660: PUSH
23661: LD_INT 114
23663: PUSH
23664: LD_INT 116
23666: PUSH
23667: LD_INT 117
23669: PUSH
23670: LD_INT 118
23672: PUSH
23673: EMPTY
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: PUSH
23692: EMPTY
23693: LIST
23694: LIST
23695: ST_TO_ADDR
23696: GO 24703
23698: LD_INT 15
23700: DOUBLE
23701: EQUAL
23702: IFTRUE 23706
23704: GO 23930
23706: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23707: LD_ADDR_VAR 0 2
23711: PUSH
23712: LD_INT 1
23714: PUSH
23715: LD_INT 2
23717: PUSH
23718: LD_INT 3
23720: PUSH
23721: LD_INT 4
23723: PUSH
23724: LD_INT 5
23726: PUSH
23727: LD_INT 6
23729: PUSH
23730: LD_INT 7
23732: PUSH
23733: LD_INT 8
23735: PUSH
23736: LD_INT 9
23738: PUSH
23739: LD_INT 10
23741: PUSH
23742: LD_INT 11
23744: PUSH
23745: LD_INT 12
23747: PUSH
23748: LD_INT 13
23750: PUSH
23751: LD_INT 14
23753: PUSH
23754: LD_INT 15
23756: PUSH
23757: LD_INT 16
23759: PUSH
23760: LD_INT 17
23762: PUSH
23763: LD_INT 18
23765: PUSH
23766: LD_INT 19
23768: PUSH
23769: LD_INT 20
23771: PUSH
23772: LD_INT 21
23774: PUSH
23775: LD_INT 22
23777: PUSH
23778: LD_INT 23
23780: PUSH
23781: LD_INT 24
23783: PUSH
23784: LD_INT 25
23786: PUSH
23787: LD_INT 26
23789: PUSH
23790: LD_INT 27
23792: PUSH
23793: LD_INT 28
23795: PUSH
23796: LD_INT 29
23798: PUSH
23799: LD_INT 30
23801: PUSH
23802: LD_INT 31
23804: PUSH
23805: LD_INT 32
23807: PUSH
23808: LD_INT 33
23810: PUSH
23811: LD_INT 34
23813: PUSH
23814: LD_INT 36
23816: PUSH
23817: EMPTY
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: LIST
23834: LIST
23835: LIST
23836: LIST
23837: LIST
23838: LIST
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: PUSH
23854: LD_INT 101
23856: PUSH
23857: LD_INT 102
23859: PUSH
23860: LD_INT 103
23862: PUSH
23863: LD_INT 104
23865: PUSH
23866: LD_INT 105
23868: PUSH
23869: LD_INT 106
23871: PUSH
23872: LD_INT 107
23874: PUSH
23875: LD_INT 108
23877: PUSH
23878: LD_INT 109
23880: PUSH
23881: LD_INT 110
23883: PUSH
23884: LD_INT 111
23886: PUSH
23887: LD_INT 112
23889: PUSH
23890: LD_INT 113
23892: PUSH
23893: LD_INT 114
23895: PUSH
23896: LD_INT 116
23898: PUSH
23899: LD_INT 117
23901: PUSH
23902: LD_INT 118
23904: PUSH
23905: EMPTY
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: ST_TO_ADDR
23928: GO 24703
23930: LD_INT 16
23932: DOUBLE
23933: EQUAL
23934: IFTRUE 23938
23936: GO 24074
23938: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23939: LD_ADDR_VAR 0 2
23943: PUSH
23944: LD_INT 2
23946: PUSH
23947: LD_INT 4
23949: PUSH
23950: LD_INT 5
23952: PUSH
23953: LD_INT 7
23955: PUSH
23956: LD_INT 11
23958: PUSH
23959: LD_INT 12
23961: PUSH
23962: LD_INT 15
23964: PUSH
23965: LD_INT 16
23967: PUSH
23968: LD_INT 20
23970: PUSH
23971: LD_INT 21
23973: PUSH
23974: LD_INT 22
23976: PUSH
23977: LD_INT 23
23979: PUSH
23980: LD_INT 25
23982: PUSH
23983: LD_INT 26
23985: PUSH
23986: LD_INT 30
23988: PUSH
23989: LD_INT 31
23991: PUSH
23992: LD_INT 32
23994: PUSH
23995: LD_INT 33
23997: PUSH
23998: LD_INT 34
24000: PUSH
24001: EMPTY
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: PUSH
24022: LD_INT 101
24024: PUSH
24025: LD_INT 102
24027: PUSH
24028: LD_INT 103
24030: PUSH
24031: LD_INT 106
24033: PUSH
24034: LD_INT 108
24036: PUSH
24037: LD_INT 112
24039: PUSH
24040: LD_INT 113
24042: PUSH
24043: LD_INT 114
24045: PUSH
24046: LD_INT 116
24048: PUSH
24049: LD_INT 117
24051: PUSH
24052: LD_INT 118
24054: PUSH
24055: EMPTY
24056: LIST
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: LIST
24062: LIST
24063: LIST
24064: LIST
24065: LIST
24066: LIST
24067: PUSH
24068: EMPTY
24069: LIST
24070: LIST
24071: ST_TO_ADDR
24072: GO 24703
24074: LD_INT 17
24076: DOUBLE
24077: EQUAL
24078: IFTRUE 24082
24080: GO 24306
24082: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24083: LD_ADDR_VAR 0 2
24087: PUSH
24088: LD_INT 1
24090: PUSH
24091: LD_INT 2
24093: PUSH
24094: LD_INT 3
24096: PUSH
24097: LD_INT 4
24099: PUSH
24100: LD_INT 5
24102: PUSH
24103: LD_INT 6
24105: PUSH
24106: LD_INT 7
24108: PUSH
24109: LD_INT 8
24111: PUSH
24112: LD_INT 9
24114: PUSH
24115: LD_INT 10
24117: PUSH
24118: LD_INT 11
24120: PUSH
24121: LD_INT 12
24123: PUSH
24124: LD_INT 13
24126: PUSH
24127: LD_INT 14
24129: PUSH
24130: LD_INT 15
24132: PUSH
24133: LD_INT 16
24135: PUSH
24136: LD_INT 17
24138: PUSH
24139: LD_INT 18
24141: PUSH
24142: LD_INT 19
24144: PUSH
24145: LD_INT 20
24147: PUSH
24148: LD_INT 21
24150: PUSH
24151: LD_INT 22
24153: PUSH
24154: LD_INT 23
24156: PUSH
24157: LD_INT 24
24159: PUSH
24160: LD_INT 25
24162: PUSH
24163: LD_INT 26
24165: PUSH
24166: LD_INT 27
24168: PUSH
24169: LD_INT 28
24171: PUSH
24172: LD_INT 29
24174: PUSH
24175: LD_INT 30
24177: PUSH
24178: LD_INT 31
24180: PUSH
24181: LD_INT 32
24183: PUSH
24184: LD_INT 33
24186: PUSH
24187: LD_INT 34
24189: PUSH
24190: LD_INT 36
24192: PUSH
24193: EMPTY
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: PUSH
24230: LD_INT 101
24232: PUSH
24233: LD_INT 102
24235: PUSH
24236: LD_INT 103
24238: PUSH
24239: LD_INT 104
24241: PUSH
24242: LD_INT 105
24244: PUSH
24245: LD_INT 106
24247: PUSH
24248: LD_INT 107
24250: PUSH
24251: LD_INT 108
24253: PUSH
24254: LD_INT 109
24256: PUSH
24257: LD_INT 110
24259: PUSH
24260: LD_INT 111
24262: PUSH
24263: LD_INT 112
24265: PUSH
24266: LD_INT 113
24268: PUSH
24269: LD_INT 114
24271: PUSH
24272: LD_INT 116
24274: PUSH
24275: LD_INT 117
24277: PUSH
24278: LD_INT 118
24280: PUSH
24281: EMPTY
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: PUSH
24300: EMPTY
24301: LIST
24302: LIST
24303: ST_TO_ADDR
24304: GO 24703
24306: LD_INT 18
24308: DOUBLE
24309: EQUAL
24310: IFTRUE 24314
24312: GO 24462
24314: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24315: LD_ADDR_VAR 0 2
24319: PUSH
24320: LD_INT 2
24322: PUSH
24323: LD_INT 4
24325: PUSH
24326: LD_INT 5
24328: PUSH
24329: LD_INT 7
24331: PUSH
24332: LD_INT 11
24334: PUSH
24335: LD_INT 12
24337: PUSH
24338: LD_INT 15
24340: PUSH
24341: LD_INT 16
24343: PUSH
24344: LD_INT 20
24346: PUSH
24347: LD_INT 21
24349: PUSH
24350: LD_INT 22
24352: PUSH
24353: LD_INT 23
24355: PUSH
24356: LD_INT 25
24358: PUSH
24359: LD_INT 26
24361: PUSH
24362: LD_INT 30
24364: PUSH
24365: LD_INT 31
24367: PUSH
24368: LD_INT 32
24370: PUSH
24371: LD_INT 33
24373: PUSH
24374: LD_INT 34
24376: PUSH
24377: LD_INT 35
24379: PUSH
24380: LD_INT 36
24382: PUSH
24383: EMPTY
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: LIST
24392: LIST
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: PUSH
24406: LD_INT 101
24408: PUSH
24409: LD_INT 102
24411: PUSH
24412: LD_INT 103
24414: PUSH
24415: LD_INT 106
24417: PUSH
24418: LD_INT 108
24420: PUSH
24421: LD_INT 112
24423: PUSH
24424: LD_INT 113
24426: PUSH
24427: LD_INT 114
24429: PUSH
24430: LD_INT 115
24432: PUSH
24433: LD_INT 116
24435: PUSH
24436: LD_INT 117
24438: PUSH
24439: LD_INT 118
24441: PUSH
24442: EMPTY
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: PUSH
24456: EMPTY
24457: LIST
24458: LIST
24459: ST_TO_ADDR
24460: GO 24703
24462: LD_INT 19
24464: DOUBLE
24465: EQUAL
24466: IFTRUE 24470
24468: GO 24702
24470: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24471: LD_ADDR_VAR 0 2
24475: PUSH
24476: LD_INT 1
24478: PUSH
24479: LD_INT 2
24481: PUSH
24482: LD_INT 3
24484: PUSH
24485: LD_INT 4
24487: PUSH
24488: LD_INT 5
24490: PUSH
24491: LD_INT 6
24493: PUSH
24494: LD_INT 7
24496: PUSH
24497: LD_INT 8
24499: PUSH
24500: LD_INT 9
24502: PUSH
24503: LD_INT 10
24505: PUSH
24506: LD_INT 11
24508: PUSH
24509: LD_INT 12
24511: PUSH
24512: LD_INT 13
24514: PUSH
24515: LD_INT 14
24517: PUSH
24518: LD_INT 15
24520: PUSH
24521: LD_INT 16
24523: PUSH
24524: LD_INT 17
24526: PUSH
24527: LD_INT 18
24529: PUSH
24530: LD_INT 19
24532: PUSH
24533: LD_INT 20
24535: PUSH
24536: LD_INT 21
24538: PUSH
24539: LD_INT 22
24541: PUSH
24542: LD_INT 23
24544: PUSH
24545: LD_INT 24
24547: PUSH
24548: LD_INT 25
24550: PUSH
24551: LD_INT 26
24553: PUSH
24554: LD_INT 27
24556: PUSH
24557: LD_INT 28
24559: PUSH
24560: LD_INT 29
24562: PUSH
24563: LD_INT 30
24565: PUSH
24566: LD_INT 31
24568: PUSH
24569: LD_INT 32
24571: PUSH
24572: LD_INT 33
24574: PUSH
24575: LD_INT 34
24577: PUSH
24578: LD_INT 35
24580: PUSH
24581: LD_INT 36
24583: PUSH
24584: EMPTY
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: LIST
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: LIST
24614: LIST
24615: LIST
24616: LIST
24617: LIST
24618: LIST
24619: LIST
24620: LIST
24621: PUSH
24622: LD_INT 101
24624: PUSH
24625: LD_INT 102
24627: PUSH
24628: LD_INT 103
24630: PUSH
24631: LD_INT 104
24633: PUSH
24634: LD_INT 105
24636: PUSH
24637: LD_INT 106
24639: PUSH
24640: LD_INT 107
24642: PUSH
24643: LD_INT 108
24645: PUSH
24646: LD_INT 109
24648: PUSH
24649: LD_INT 110
24651: PUSH
24652: LD_INT 111
24654: PUSH
24655: LD_INT 112
24657: PUSH
24658: LD_INT 113
24660: PUSH
24661: LD_INT 114
24663: PUSH
24664: LD_INT 115
24666: PUSH
24667: LD_INT 116
24669: PUSH
24670: LD_INT 117
24672: PUSH
24673: LD_INT 118
24675: PUSH
24676: EMPTY
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: PUSH
24696: EMPTY
24697: LIST
24698: LIST
24699: ST_TO_ADDR
24700: GO 24703
24702: POP
// end else
24703: GO 24934
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24705: LD_ADDR_VAR 0 2
24709: PUSH
24710: LD_INT 1
24712: PUSH
24713: LD_INT 2
24715: PUSH
24716: LD_INT 3
24718: PUSH
24719: LD_INT 4
24721: PUSH
24722: LD_INT 5
24724: PUSH
24725: LD_INT 6
24727: PUSH
24728: LD_INT 7
24730: PUSH
24731: LD_INT 8
24733: PUSH
24734: LD_INT 9
24736: PUSH
24737: LD_INT 10
24739: PUSH
24740: LD_INT 11
24742: PUSH
24743: LD_INT 12
24745: PUSH
24746: LD_INT 13
24748: PUSH
24749: LD_INT 14
24751: PUSH
24752: LD_INT 15
24754: PUSH
24755: LD_INT 16
24757: PUSH
24758: LD_INT 17
24760: PUSH
24761: LD_INT 18
24763: PUSH
24764: LD_INT 19
24766: PUSH
24767: LD_INT 20
24769: PUSH
24770: LD_INT 21
24772: PUSH
24773: LD_INT 22
24775: PUSH
24776: LD_INT 23
24778: PUSH
24779: LD_INT 24
24781: PUSH
24782: LD_INT 25
24784: PUSH
24785: LD_INT 26
24787: PUSH
24788: LD_INT 27
24790: PUSH
24791: LD_INT 28
24793: PUSH
24794: LD_INT 29
24796: PUSH
24797: LD_INT 30
24799: PUSH
24800: LD_INT 31
24802: PUSH
24803: LD_INT 32
24805: PUSH
24806: LD_INT 33
24808: PUSH
24809: LD_INT 34
24811: PUSH
24812: LD_INT 35
24814: PUSH
24815: LD_INT 36
24817: PUSH
24818: EMPTY
24819: LIST
24820: LIST
24821: LIST
24822: LIST
24823: LIST
24824: LIST
24825: LIST
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: PUSH
24856: LD_INT 101
24858: PUSH
24859: LD_INT 102
24861: PUSH
24862: LD_INT 103
24864: PUSH
24865: LD_INT 104
24867: PUSH
24868: LD_INT 105
24870: PUSH
24871: LD_INT 106
24873: PUSH
24874: LD_INT 107
24876: PUSH
24877: LD_INT 108
24879: PUSH
24880: LD_INT 109
24882: PUSH
24883: LD_INT 110
24885: PUSH
24886: LD_INT 111
24888: PUSH
24889: LD_INT 112
24891: PUSH
24892: LD_INT 113
24894: PUSH
24895: LD_INT 114
24897: PUSH
24898: LD_INT 115
24900: PUSH
24901: LD_INT 116
24903: PUSH
24904: LD_INT 117
24906: PUSH
24907: LD_INT 118
24909: PUSH
24910: EMPTY
24911: LIST
24912: LIST
24913: LIST
24914: LIST
24915: LIST
24916: LIST
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: LIST
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: PUSH
24930: EMPTY
24931: LIST
24932: LIST
24933: ST_TO_ADDR
// if result then
24934: LD_VAR 0 2
24938: IFFALSE 25724
// begin normal :=  ;
24940: LD_ADDR_VAR 0 5
24944: PUSH
24945: LD_STRING 
24947: ST_TO_ADDR
// hardcore :=  ;
24948: LD_ADDR_VAR 0 6
24952: PUSH
24953: LD_STRING 
24955: ST_TO_ADDR
// active :=  ;
24956: LD_ADDR_VAR 0 7
24960: PUSH
24961: LD_STRING 
24963: ST_TO_ADDR
// for i = 1 to normalCounter do
24964: LD_ADDR_VAR 0 8
24968: PUSH
24969: DOUBLE
24970: LD_INT 1
24972: DEC
24973: ST_TO_ADDR
24974: LD_EXP 81
24978: PUSH
24979: FOR_TO
24980: IFFALSE 25081
// begin tmp := 0 ;
24982: LD_ADDR_VAR 0 3
24986: PUSH
24987: LD_STRING 0
24989: ST_TO_ADDR
// if result [ 1 ] then
24990: LD_VAR 0 2
24994: PUSH
24995: LD_INT 1
24997: ARRAY
24998: IFFALSE 25063
// if result [ 1 ] [ 1 ] = i then
25000: LD_VAR 0 2
25004: PUSH
25005: LD_INT 1
25007: ARRAY
25008: PUSH
25009: LD_INT 1
25011: ARRAY
25012: PUSH
25013: LD_VAR 0 8
25017: EQUAL
25018: IFFALSE 25063
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25020: LD_ADDR_VAR 0 2
25024: PUSH
25025: LD_VAR 0 2
25029: PPUSH
25030: LD_INT 1
25032: PPUSH
25033: LD_VAR 0 2
25037: PUSH
25038: LD_INT 1
25040: ARRAY
25041: PPUSH
25042: LD_INT 1
25044: PPUSH
25045: CALL_OW 3
25049: PPUSH
25050: CALL_OW 1
25054: ST_TO_ADDR
// tmp := 1 ;
25055: LD_ADDR_VAR 0 3
25059: PUSH
25060: LD_STRING 1
25062: ST_TO_ADDR
// end ; normal := normal & tmp ;
25063: LD_ADDR_VAR 0 5
25067: PUSH
25068: LD_VAR 0 5
25072: PUSH
25073: LD_VAR 0 3
25077: STR
25078: ST_TO_ADDR
// end ;
25079: GO 24979
25081: POP
25082: POP
// for i = 1 to hardcoreCounter do
25083: LD_ADDR_VAR 0 8
25087: PUSH
25088: DOUBLE
25089: LD_INT 1
25091: DEC
25092: ST_TO_ADDR
25093: LD_EXP 82
25097: PUSH
25098: FOR_TO
25099: IFFALSE 25204
// begin tmp := 0 ;
25101: LD_ADDR_VAR 0 3
25105: PUSH
25106: LD_STRING 0
25108: ST_TO_ADDR
// if result [ 2 ] then
25109: LD_VAR 0 2
25113: PUSH
25114: LD_INT 2
25116: ARRAY
25117: IFFALSE 25186
// if result [ 2 ] [ 1 ] = 100 + i then
25119: LD_VAR 0 2
25123: PUSH
25124: LD_INT 2
25126: ARRAY
25127: PUSH
25128: LD_INT 1
25130: ARRAY
25131: PUSH
25132: LD_INT 100
25134: PUSH
25135: LD_VAR 0 8
25139: PLUS
25140: EQUAL
25141: IFFALSE 25186
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25143: LD_ADDR_VAR 0 2
25147: PUSH
25148: LD_VAR 0 2
25152: PPUSH
25153: LD_INT 2
25155: PPUSH
25156: LD_VAR 0 2
25160: PUSH
25161: LD_INT 2
25163: ARRAY
25164: PPUSH
25165: LD_INT 1
25167: PPUSH
25168: CALL_OW 3
25172: PPUSH
25173: CALL_OW 1
25177: ST_TO_ADDR
// tmp := 1 ;
25178: LD_ADDR_VAR 0 3
25182: PUSH
25183: LD_STRING 1
25185: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25186: LD_ADDR_VAR 0 6
25190: PUSH
25191: LD_VAR 0 6
25195: PUSH
25196: LD_VAR 0 3
25200: STR
25201: ST_TO_ADDR
// end ;
25202: GO 25098
25204: POP
25205: POP
// if isGameLoad then
25206: LD_VAR 0 1
25210: IFFALSE 25685
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25212: LD_ADDR_VAR 0 4
25216: PUSH
25217: LD_EXP 85
25221: PUSH
25222: LD_EXP 84
25226: PUSH
25227: LD_EXP 86
25231: PUSH
25232: LD_EXP 83
25236: PUSH
25237: LD_EXP 87
25241: PUSH
25242: LD_EXP 88
25246: PUSH
25247: LD_EXP 89
25251: PUSH
25252: LD_EXP 90
25256: PUSH
25257: LD_EXP 91
25261: PUSH
25262: LD_EXP 92
25266: PUSH
25267: LD_EXP 93
25271: PUSH
25272: LD_EXP 94
25276: PUSH
25277: LD_EXP 95
25281: PUSH
25282: LD_EXP 96
25286: PUSH
25287: LD_EXP 104
25291: PUSH
25292: LD_EXP 105
25296: PUSH
25297: LD_EXP 106
25301: PUSH
25302: LD_EXP 107
25306: PUSH
25307: LD_EXP 109
25311: PUSH
25312: LD_EXP 110
25316: PUSH
25317: LD_EXP 111
25321: PUSH
25322: LD_EXP 114
25326: PUSH
25327: LD_EXP 116
25331: PUSH
25332: LD_EXP 117
25336: PUSH
25337: LD_EXP 118
25341: PUSH
25342: LD_EXP 120
25346: PUSH
25347: LD_EXP 121
25351: PUSH
25352: LD_EXP 124
25356: PUSH
25357: LD_EXP 125
25361: PUSH
25362: LD_EXP 126
25366: PUSH
25367: LD_EXP 127
25371: PUSH
25372: LD_EXP 128
25376: PUSH
25377: LD_EXP 129
25381: PUSH
25382: LD_EXP 130
25386: PUSH
25387: LD_EXP 131
25391: PUSH
25392: LD_EXP 132
25396: PUSH
25397: LD_EXP 97
25401: PUSH
25402: LD_EXP 98
25406: PUSH
25407: LD_EXP 101
25411: PUSH
25412: LD_EXP 102
25416: PUSH
25417: LD_EXP 103
25421: PUSH
25422: LD_EXP 99
25426: PUSH
25427: LD_EXP 100
25431: PUSH
25432: LD_EXP 108
25436: PUSH
25437: LD_EXP 112
25441: PUSH
25442: LD_EXP 113
25446: PUSH
25447: LD_EXP 115
25451: PUSH
25452: LD_EXP 119
25456: PUSH
25457: LD_EXP 122
25461: PUSH
25462: LD_EXP 123
25466: PUSH
25467: LD_EXP 133
25471: PUSH
25472: LD_EXP 134
25476: PUSH
25477: LD_EXP 135
25481: PUSH
25482: LD_EXP 136
25486: PUSH
25487: EMPTY
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: LIST
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: LIST
25503: LIST
25504: LIST
25505: LIST
25506: LIST
25507: LIST
25508: LIST
25509: LIST
25510: LIST
25511: LIST
25512: LIST
25513: LIST
25514: LIST
25515: LIST
25516: LIST
25517: LIST
25518: LIST
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: ST_TO_ADDR
// tmp :=  ;
25543: LD_ADDR_VAR 0 3
25547: PUSH
25548: LD_STRING 
25550: ST_TO_ADDR
// for i = 1 to normalCounter do
25551: LD_ADDR_VAR 0 8
25555: PUSH
25556: DOUBLE
25557: LD_INT 1
25559: DEC
25560: ST_TO_ADDR
25561: LD_EXP 81
25565: PUSH
25566: FOR_TO
25567: IFFALSE 25603
// begin if flags [ i ] then
25569: LD_VAR 0 4
25573: PUSH
25574: LD_VAR 0 8
25578: ARRAY
25579: IFFALSE 25601
// tmp := tmp & i & ; ;
25581: LD_ADDR_VAR 0 3
25585: PUSH
25586: LD_VAR 0 3
25590: PUSH
25591: LD_VAR 0 8
25595: STR
25596: PUSH
25597: LD_STRING ;
25599: STR
25600: ST_TO_ADDR
// end ;
25601: GO 25566
25603: POP
25604: POP
// for i = 1 to hardcoreCounter do
25605: LD_ADDR_VAR 0 8
25609: PUSH
25610: DOUBLE
25611: LD_INT 1
25613: DEC
25614: ST_TO_ADDR
25615: LD_EXP 82
25619: PUSH
25620: FOR_TO
25621: IFFALSE 25667
// begin if flags [ normalCounter + i ] then
25623: LD_VAR 0 4
25627: PUSH
25628: LD_EXP 81
25632: PUSH
25633: LD_VAR 0 8
25637: PLUS
25638: ARRAY
25639: IFFALSE 25665
// tmp := tmp & ( 100 + i ) & ; ;
25641: LD_ADDR_VAR 0 3
25645: PUSH
25646: LD_VAR 0 3
25650: PUSH
25651: LD_INT 100
25653: PUSH
25654: LD_VAR 0 8
25658: PLUS
25659: STR
25660: PUSH
25661: LD_STRING ;
25663: STR
25664: ST_TO_ADDR
// end ;
25665: GO 25620
25667: POP
25668: POP
// if tmp then
25669: LD_VAR 0 3
25673: IFFALSE 25685
// active := tmp ;
25675: LD_ADDR_VAR 0 7
25679: PUSH
25680: LD_VAR 0 3
25684: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25685: LD_STRING getStreamItemsFromMission("
25687: PUSH
25688: LD_VAR 0 5
25692: STR
25693: PUSH
25694: LD_STRING ","
25696: STR
25697: PUSH
25698: LD_VAR 0 6
25702: STR
25703: PUSH
25704: LD_STRING ","
25706: STR
25707: PUSH
25708: LD_VAR 0 7
25712: STR
25713: PUSH
25714: LD_STRING ")
25716: STR
25717: PPUSH
25718: CALL_OW 559
// end else
25722: GO 25731
// ToLua ( getStreamItemsFromMission("","","") ) ;
25724: LD_STRING getStreamItemsFromMission("","","")
25726: PPUSH
25727: CALL_OW 559
// end ;
25731: LD_VAR 0 2
25735: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25736: LD_EXP 80
25740: PUSH
25741: LD_EXP 85
25745: AND
25746: IFFALSE 25870
25748: GO 25750
25750: DISABLE
25751: LD_INT 0
25753: PPUSH
25754: PPUSH
// begin enable ;
25755: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25756: LD_ADDR_VAR 0 2
25760: PUSH
25761: LD_INT 22
25763: PUSH
25764: LD_OWVAR 2
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: PUSH
25773: LD_INT 2
25775: PUSH
25776: LD_INT 34
25778: PUSH
25779: LD_INT 7
25781: PUSH
25782: EMPTY
25783: LIST
25784: LIST
25785: PUSH
25786: LD_INT 34
25788: PUSH
25789: LD_INT 45
25791: PUSH
25792: EMPTY
25793: LIST
25794: LIST
25795: PUSH
25796: LD_INT 34
25798: PUSH
25799: LD_INT 28
25801: PUSH
25802: EMPTY
25803: LIST
25804: LIST
25805: PUSH
25806: LD_INT 34
25808: PUSH
25809: LD_INT 47
25811: PUSH
25812: EMPTY
25813: LIST
25814: LIST
25815: PUSH
25816: EMPTY
25817: LIST
25818: LIST
25819: LIST
25820: LIST
25821: LIST
25822: PUSH
25823: EMPTY
25824: LIST
25825: LIST
25826: PPUSH
25827: CALL_OW 69
25831: ST_TO_ADDR
// if not tmp then
25832: LD_VAR 0 2
25836: NOT
25837: IFFALSE 25841
// exit ;
25839: GO 25870
// for i in tmp do
25841: LD_ADDR_VAR 0 1
25845: PUSH
25846: LD_VAR 0 2
25850: PUSH
25851: FOR_IN
25852: IFFALSE 25868
// begin SetLives ( i , 0 ) ;
25854: LD_VAR 0 1
25858: PPUSH
25859: LD_INT 0
25861: PPUSH
25862: CALL_OW 234
// end ;
25866: GO 25851
25868: POP
25869: POP
// end ;
25870: PPOPN 2
25872: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25873: LD_EXP 80
25877: PUSH
25878: LD_EXP 86
25882: AND
25883: IFFALSE 25967
25885: GO 25887
25887: DISABLE
25888: LD_INT 0
25890: PPUSH
25891: PPUSH
// begin enable ;
25892: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25893: LD_ADDR_VAR 0 2
25897: PUSH
25898: LD_INT 22
25900: PUSH
25901: LD_OWVAR 2
25905: PUSH
25906: EMPTY
25907: LIST
25908: LIST
25909: PUSH
25910: LD_INT 32
25912: PUSH
25913: LD_INT 3
25915: PUSH
25916: EMPTY
25917: LIST
25918: LIST
25919: PUSH
25920: EMPTY
25921: LIST
25922: LIST
25923: PPUSH
25924: CALL_OW 69
25928: ST_TO_ADDR
// if not tmp then
25929: LD_VAR 0 2
25933: NOT
25934: IFFALSE 25938
// exit ;
25936: GO 25967
// for i in tmp do
25938: LD_ADDR_VAR 0 1
25942: PUSH
25943: LD_VAR 0 2
25947: PUSH
25948: FOR_IN
25949: IFFALSE 25965
// begin SetLives ( i , 0 ) ;
25951: LD_VAR 0 1
25955: PPUSH
25956: LD_INT 0
25958: PPUSH
25959: CALL_OW 234
// end ;
25963: GO 25948
25965: POP
25966: POP
// end ;
25967: PPOPN 2
25969: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25970: LD_EXP 80
25974: PUSH
25975: LD_EXP 83
25979: AND
25980: IFFALSE 26073
25982: GO 25984
25984: DISABLE
25985: LD_INT 0
25987: PPUSH
// begin enable ;
25988: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25989: LD_ADDR_VAR 0 1
25993: PUSH
25994: LD_INT 22
25996: PUSH
25997: LD_OWVAR 2
26001: PUSH
26002: EMPTY
26003: LIST
26004: LIST
26005: PUSH
26006: LD_INT 2
26008: PUSH
26009: LD_INT 25
26011: PUSH
26012: LD_INT 5
26014: PUSH
26015: EMPTY
26016: LIST
26017: LIST
26018: PUSH
26019: LD_INT 25
26021: PUSH
26022: LD_INT 9
26024: PUSH
26025: EMPTY
26026: LIST
26027: LIST
26028: PUSH
26029: LD_INT 25
26031: PUSH
26032: LD_INT 8
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: PUSH
26039: EMPTY
26040: LIST
26041: LIST
26042: LIST
26043: LIST
26044: PUSH
26045: EMPTY
26046: LIST
26047: LIST
26048: PPUSH
26049: CALL_OW 69
26053: PUSH
26054: FOR_IN
26055: IFFALSE 26071
// begin SetClass ( i , 1 ) ;
26057: LD_VAR 0 1
26061: PPUSH
26062: LD_INT 1
26064: PPUSH
26065: CALL_OW 336
// end ;
26069: GO 26054
26071: POP
26072: POP
// end ;
26073: PPOPN 1
26075: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26076: LD_EXP 80
26080: PUSH
26081: LD_EXP 84
26085: AND
26086: PUSH
26087: LD_OWVAR 65
26091: PUSH
26092: LD_INT 7
26094: LESS
26095: AND
26096: IFFALSE 26110
26098: GO 26100
26100: DISABLE
// begin enable ;
26101: ENABLE
// game_speed := 7 ;
26102: LD_ADDR_OWVAR 65
26106: PUSH
26107: LD_INT 7
26109: ST_TO_ADDR
// end ;
26110: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26111: LD_EXP 80
26115: PUSH
26116: LD_EXP 87
26120: AND
26121: IFFALSE 26323
26123: GO 26125
26125: DISABLE
26126: LD_INT 0
26128: PPUSH
26129: PPUSH
26130: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26131: LD_ADDR_VAR 0 3
26135: PUSH
26136: LD_INT 81
26138: PUSH
26139: LD_OWVAR 2
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: PUSH
26148: LD_INT 21
26150: PUSH
26151: LD_INT 1
26153: PUSH
26154: EMPTY
26155: LIST
26156: LIST
26157: PUSH
26158: EMPTY
26159: LIST
26160: LIST
26161: PPUSH
26162: CALL_OW 69
26166: ST_TO_ADDR
// if not tmp then
26167: LD_VAR 0 3
26171: NOT
26172: IFFALSE 26176
// exit ;
26174: GO 26323
// if tmp > 5 then
26176: LD_VAR 0 3
26180: PUSH
26181: LD_INT 5
26183: GREATER
26184: IFFALSE 26196
// k := 5 else
26186: LD_ADDR_VAR 0 2
26190: PUSH
26191: LD_INT 5
26193: ST_TO_ADDR
26194: GO 26206
// k := tmp ;
26196: LD_ADDR_VAR 0 2
26200: PUSH
26201: LD_VAR 0 3
26205: ST_TO_ADDR
// for i := 1 to k do
26206: LD_ADDR_VAR 0 1
26210: PUSH
26211: DOUBLE
26212: LD_INT 1
26214: DEC
26215: ST_TO_ADDR
26216: LD_VAR 0 2
26220: PUSH
26221: FOR_TO
26222: IFFALSE 26321
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26224: LD_VAR 0 3
26228: PUSH
26229: LD_VAR 0 1
26233: ARRAY
26234: PPUSH
26235: LD_VAR 0 1
26239: PUSH
26240: LD_INT 4
26242: MOD
26243: PUSH
26244: LD_INT 1
26246: PLUS
26247: PPUSH
26248: CALL_OW 259
26252: PUSH
26253: LD_INT 10
26255: LESS
26256: IFFALSE 26319
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26258: LD_VAR 0 3
26262: PUSH
26263: LD_VAR 0 1
26267: ARRAY
26268: PPUSH
26269: LD_VAR 0 1
26273: PUSH
26274: LD_INT 4
26276: MOD
26277: PUSH
26278: LD_INT 1
26280: PLUS
26281: PPUSH
26282: LD_VAR 0 3
26286: PUSH
26287: LD_VAR 0 1
26291: ARRAY
26292: PPUSH
26293: LD_VAR 0 1
26297: PUSH
26298: LD_INT 4
26300: MOD
26301: PUSH
26302: LD_INT 1
26304: PLUS
26305: PPUSH
26306: CALL_OW 259
26310: PUSH
26311: LD_INT 1
26313: PLUS
26314: PPUSH
26315: CALL_OW 237
26319: GO 26221
26321: POP
26322: POP
// end ;
26323: PPOPN 3
26325: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26326: LD_EXP 80
26330: PUSH
26331: LD_EXP 88
26335: AND
26336: IFFALSE 26356
26338: GO 26340
26340: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26341: LD_INT 4
26343: PPUSH
26344: LD_OWVAR 2
26348: PPUSH
26349: LD_INT 0
26351: PPUSH
26352: CALL_OW 324
26356: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26357: LD_EXP 80
26361: PUSH
26362: LD_EXP 117
26366: AND
26367: IFFALSE 26387
26369: GO 26371
26371: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26372: LD_INT 19
26374: PPUSH
26375: LD_OWVAR 2
26379: PPUSH
26380: LD_INT 0
26382: PPUSH
26383: CALL_OW 324
26387: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26388: LD_EXP 80
26392: PUSH
26393: LD_EXP 89
26397: AND
26398: IFFALSE 26500
26400: GO 26402
26402: DISABLE
26403: LD_INT 0
26405: PPUSH
26406: PPUSH
// begin enable ;
26407: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26408: LD_ADDR_VAR 0 2
26412: PUSH
26413: LD_INT 22
26415: PUSH
26416: LD_OWVAR 2
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: PUSH
26425: LD_INT 2
26427: PUSH
26428: LD_INT 34
26430: PUSH
26431: LD_INT 11
26433: PUSH
26434: EMPTY
26435: LIST
26436: LIST
26437: PUSH
26438: LD_INT 34
26440: PUSH
26441: LD_INT 30
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: PUSH
26448: EMPTY
26449: LIST
26450: LIST
26451: LIST
26452: PUSH
26453: EMPTY
26454: LIST
26455: LIST
26456: PPUSH
26457: CALL_OW 69
26461: ST_TO_ADDR
// if not tmp then
26462: LD_VAR 0 2
26466: NOT
26467: IFFALSE 26471
// exit ;
26469: GO 26500
// for i in tmp do
26471: LD_ADDR_VAR 0 1
26475: PUSH
26476: LD_VAR 0 2
26480: PUSH
26481: FOR_IN
26482: IFFALSE 26498
// begin SetLives ( i , 0 ) ;
26484: LD_VAR 0 1
26488: PPUSH
26489: LD_INT 0
26491: PPUSH
26492: CALL_OW 234
// end ;
26496: GO 26481
26498: POP
26499: POP
// end ;
26500: PPOPN 2
26502: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26503: LD_EXP 80
26507: PUSH
26508: LD_EXP 90
26512: AND
26513: IFFALSE 26533
26515: GO 26517
26517: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26518: LD_INT 32
26520: PPUSH
26521: LD_OWVAR 2
26525: PPUSH
26526: LD_INT 0
26528: PPUSH
26529: CALL_OW 324
26533: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26534: LD_EXP 80
26538: PUSH
26539: LD_EXP 91
26543: AND
26544: IFFALSE 26725
26546: GO 26548
26548: DISABLE
26549: LD_INT 0
26551: PPUSH
26552: PPUSH
26553: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26554: LD_ADDR_VAR 0 2
26558: PUSH
26559: LD_INT 22
26561: PUSH
26562: LD_OWVAR 2
26566: PUSH
26567: EMPTY
26568: LIST
26569: LIST
26570: PUSH
26571: LD_INT 33
26573: PUSH
26574: LD_INT 3
26576: PUSH
26577: EMPTY
26578: LIST
26579: LIST
26580: PUSH
26581: EMPTY
26582: LIST
26583: LIST
26584: PPUSH
26585: CALL_OW 69
26589: ST_TO_ADDR
// if not tmp then
26590: LD_VAR 0 2
26594: NOT
26595: IFFALSE 26599
// exit ;
26597: GO 26725
// side := 0 ;
26599: LD_ADDR_VAR 0 3
26603: PUSH
26604: LD_INT 0
26606: ST_TO_ADDR
// for i := 1 to 8 do
26607: LD_ADDR_VAR 0 1
26611: PUSH
26612: DOUBLE
26613: LD_INT 1
26615: DEC
26616: ST_TO_ADDR
26617: LD_INT 8
26619: PUSH
26620: FOR_TO
26621: IFFALSE 26669
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26623: LD_OWVAR 2
26627: PUSH
26628: LD_VAR 0 1
26632: NONEQUAL
26633: PUSH
26634: LD_OWVAR 2
26638: PPUSH
26639: LD_VAR 0 1
26643: PPUSH
26644: CALL_OW 81
26648: PUSH
26649: LD_INT 2
26651: EQUAL
26652: AND
26653: IFFALSE 26667
// begin side := i ;
26655: LD_ADDR_VAR 0 3
26659: PUSH
26660: LD_VAR 0 1
26664: ST_TO_ADDR
// break ;
26665: GO 26669
// end ;
26667: GO 26620
26669: POP
26670: POP
// if not side then
26671: LD_VAR 0 3
26675: NOT
26676: IFFALSE 26680
// exit ;
26678: GO 26725
// for i := 1 to tmp do
26680: LD_ADDR_VAR 0 1
26684: PUSH
26685: DOUBLE
26686: LD_INT 1
26688: DEC
26689: ST_TO_ADDR
26690: LD_VAR 0 2
26694: PUSH
26695: FOR_TO
26696: IFFALSE 26723
// if Prob ( 60 ) then
26698: LD_INT 60
26700: PPUSH
26701: CALL_OW 13
26705: IFFALSE 26721
// SetSide ( i , side ) ;
26707: LD_VAR 0 1
26711: PPUSH
26712: LD_VAR 0 3
26716: PPUSH
26717: CALL_OW 235
26721: GO 26695
26723: POP
26724: POP
// end ;
26725: PPOPN 3
26727: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26728: LD_EXP 80
26732: PUSH
26733: LD_EXP 93
26737: AND
26738: IFFALSE 26857
26740: GO 26742
26742: DISABLE
26743: LD_INT 0
26745: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26746: LD_ADDR_VAR 0 1
26750: PUSH
26751: LD_INT 22
26753: PUSH
26754: LD_OWVAR 2
26758: PUSH
26759: EMPTY
26760: LIST
26761: LIST
26762: PUSH
26763: LD_INT 21
26765: PUSH
26766: LD_INT 1
26768: PUSH
26769: EMPTY
26770: LIST
26771: LIST
26772: PUSH
26773: LD_INT 3
26775: PUSH
26776: LD_INT 23
26778: PUSH
26779: LD_INT 0
26781: PUSH
26782: EMPTY
26783: LIST
26784: LIST
26785: PUSH
26786: EMPTY
26787: LIST
26788: LIST
26789: PUSH
26790: EMPTY
26791: LIST
26792: LIST
26793: LIST
26794: PPUSH
26795: CALL_OW 69
26799: PUSH
26800: FOR_IN
26801: IFFALSE 26855
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26803: LD_VAR 0 1
26807: PPUSH
26808: CALL_OW 257
26812: PUSH
26813: LD_INT 1
26815: PUSH
26816: LD_INT 2
26818: PUSH
26819: LD_INT 3
26821: PUSH
26822: LD_INT 4
26824: PUSH
26825: EMPTY
26826: LIST
26827: LIST
26828: LIST
26829: LIST
26830: IN
26831: IFFALSE 26853
// SetClass ( un , rand ( 1 , 4 ) ) ;
26833: LD_VAR 0 1
26837: PPUSH
26838: LD_INT 1
26840: PPUSH
26841: LD_INT 4
26843: PPUSH
26844: CALL_OW 12
26848: PPUSH
26849: CALL_OW 336
26853: GO 26800
26855: POP
26856: POP
// end ;
26857: PPOPN 1
26859: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26860: LD_EXP 80
26864: PUSH
26865: LD_EXP 92
26869: AND
26870: IFFALSE 26949
26872: GO 26874
26874: DISABLE
26875: LD_INT 0
26877: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26878: LD_ADDR_VAR 0 1
26882: PUSH
26883: LD_INT 22
26885: PUSH
26886: LD_OWVAR 2
26890: PUSH
26891: EMPTY
26892: LIST
26893: LIST
26894: PUSH
26895: LD_INT 21
26897: PUSH
26898: LD_INT 3
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: PUSH
26905: EMPTY
26906: LIST
26907: LIST
26908: PPUSH
26909: CALL_OW 69
26913: ST_TO_ADDR
// if not tmp then
26914: LD_VAR 0 1
26918: NOT
26919: IFFALSE 26923
// exit ;
26921: GO 26949
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26923: LD_VAR 0 1
26927: PUSH
26928: LD_INT 1
26930: PPUSH
26931: LD_VAR 0 1
26935: PPUSH
26936: CALL_OW 12
26940: ARRAY
26941: PPUSH
26942: LD_INT 100
26944: PPUSH
26945: CALL_OW 234
// end ;
26949: PPOPN 1
26951: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26952: LD_EXP 80
26956: PUSH
26957: LD_EXP 94
26961: AND
26962: IFFALSE 27060
26964: GO 26966
26966: DISABLE
26967: LD_INT 0
26969: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26970: LD_ADDR_VAR 0 1
26974: PUSH
26975: LD_INT 22
26977: PUSH
26978: LD_OWVAR 2
26982: PUSH
26983: EMPTY
26984: LIST
26985: LIST
26986: PUSH
26987: LD_INT 21
26989: PUSH
26990: LD_INT 1
26992: PUSH
26993: EMPTY
26994: LIST
26995: LIST
26996: PUSH
26997: EMPTY
26998: LIST
26999: LIST
27000: PPUSH
27001: CALL_OW 69
27005: ST_TO_ADDR
// if not tmp then
27006: LD_VAR 0 1
27010: NOT
27011: IFFALSE 27015
// exit ;
27013: GO 27060
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27015: LD_VAR 0 1
27019: PUSH
27020: LD_INT 1
27022: PPUSH
27023: LD_VAR 0 1
27027: PPUSH
27028: CALL_OW 12
27032: ARRAY
27033: PPUSH
27034: LD_INT 1
27036: PPUSH
27037: LD_INT 4
27039: PPUSH
27040: CALL_OW 12
27044: PPUSH
27045: LD_INT 3000
27047: PPUSH
27048: LD_INT 9000
27050: PPUSH
27051: CALL_OW 12
27055: PPUSH
27056: CALL_OW 492
// end ;
27060: PPOPN 1
27062: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27063: LD_EXP 80
27067: PUSH
27068: LD_EXP 95
27072: AND
27073: IFFALSE 27093
27075: GO 27077
27077: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27078: LD_INT 1
27080: PPUSH
27081: LD_OWVAR 2
27085: PPUSH
27086: LD_INT 0
27088: PPUSH
27089: CALL_OW 324
27093: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27094: LD_EXP 80
27098: PUSH
27099: LD_EXP 96
27103: AND
27104: IFFALSE 27187
27106: GO 27108
27108: DISABLE
27109: LD_INT 0
27111: PPUSH
27112: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27113: LD_ADDR_VAR 0 2
27117: PUSH
27118: LD_INT 22
27120: PUSH
27121: LD_OWVAR 2
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: PUSH
27130: LD_INT 21
27132: PUSH
27133: LD_INT 3
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: PUSH
27140: EMPTY
27141: LIST
27142: LIST
27143: PPUSH
27144: CALL_OW 69
27148: ST_TO_ADDR
// if not tmp then
27149: LD_VAR 0 2
27153: NOT
27154: IFFALSE 27158
// exit ;
27156: GO 27187
// for i in tmp do
27158: LD_ADDR_VAR 0 1
27162: PUSH
27163: LD_VAR 0 2
27167: PUSH
27168: FOR_IN
27169: IFFALSE 27185
// SetBLevel ( i , 10 ) ;
27171: LD_VAR 0 1
27175: PPUSH
27176: LD_INT 10
27178: PPUSH
27179: CALL_OW 241
27183: GO 27168
27185: POP
27186: POP
// end ;
27187: PPOPN 2
27189: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27190: LD_EXP 80
27194: PUSH
27195: LD_EXP 97
27199: AND
27200: IFFALSE 27311
27202: GO 27204
27204: DISABLE
27205: LD_INT 0
27207: PPUSH
27208: PPUSH
27209: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27210: LD_ADDR_VAR 0 3
27214: PUSH
27215: LD_INT 22
27217: PUSH
27218: LD_OWVAR 2
27222: PUSH
27223: EMPTY
27224: LIST
27225: LIST
27226: PUSH
27227: LD_INT 25
27229: PUSH
27230: LD_INT 1
27232: PUSH
27233: EMPTY
27234: LIST
27235: LIST
27236: PUSH
27237: EMPTY
27238: LIST
27239: LIST
27240: PPUSH
27241: CALL_OW 69
27245: ST_TO_ADDR
// if not tmp then
27246: LD_VAR 0 3
27250: NOT
27251: IFFALSE 27255
// exit ;
27253: GO 27311
// un := tmp [ rand ( 1 , tmp ) ] ;
27255: LD_ADDR_VAR 0 2
27259: PUSH
27260: LD_VAR 0 3
27264: PUSH
27265: LD_INT 1
27267: PPUSH
27268: LD_VAR 0 3
27272: PPUSH
27273: CALL_OW 12
27277: ARRAY
27278: ST_TO_ADDR
// if Crawls ( un ) then
27279: LD_VAR 0 2
27283: PPUSH
27284: CALL_OW 318
27288: IFFALSE 27299
// ComWalk ( un ) ;
27290: LD_VAR 0 2
27294: PPUSH
27295: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27299: LD_VAR 0 2
27303: PPUSH
27304: LD_INT 5
27306: PPUSH
27307: CALL_OW 336
// end ;
27311: PPOPN 3
27313: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27314: LD_EXP 80
27318: PUSH
27319: LD_EXP 98
27323: AND
27324: PUSH
27325: LD_OWVAR 67
27329: PUSH
27330: LD_INT 4
27332: LESS
27333: AND
27334: IFFALSE 27353
27336: GO 27338
27338: DISABLE
// begin Difficulty := Difficulty + 1 ;
27339: LD_ADDR_OWVAR 67
27343: PUSH
27344: LD_OWVAR 67
27348: PUSH
27349: LD_INT 1
27351: PLUS
27352: ST_TO_ADDR
// end ;
27353: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27354: LD_EXP 80
27358: PUSH
27359: LD_EXP 99
27363: AND
27364: IFFALSE 27467
27366: GO 27368
27368: DISABLE
27369: LD_INT 0
27371: PPUSH
// begin for i := 1 to 5 do
27372: LD_ADDR_VAR 0 1
27376: PUSH
27377: DOUBLE
27378: LD_INT 1
27380: DEC
27381: ST_TO_ADDR
27382: LD_INT 5
27384: PUSH
27385: FOR_TO
27386: IFFALSE 27465
// begin uc_nation := nation_nature ;
27388: LD_ADDR_OWVAR 21
27392: PUSH
27393: LD_INT 0
27395: ST_TO_ADDR
// uc_side := 0 ;
27396: LD_ADDR_OWVAR 20
27400: PUSH
27401: LD_INT 0
27403: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27404: LD_ADDR_OWVAR 29
27408: PUSH
27409: LD_INT 12
27411: PUSH
27412: LD_INT 12
27414: PUSH
27415: EMPTY
27416: LIST
27417: LIST
27418: ST_TO_ADDR
// hc_agressivity := 20 ;
27419: LD_ADDR_OWVAR 35
27423: PUSH
27424: LD_INT 20
27426: ST_TO_ADDR
// hc_class := class_tiger ;
27427: LD_ADDR_OWVAR 28
27431: PUSH
27432: LD_INT 14
27434: ST_TO_ADDR
// hc_gallery :=  ;
27435: LD_ADDR_OWVAR 33
27439: PUSH
27440: LD_STRING 
27442: ST_TO_ADDR
// hc_name :=  ;
27443: LD_ADDR_OWVAR 26
27447: PUSH
27448: LD_STRING 
27450: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27451: CALL_OW 44
27455: PPUSH
27456: LD_INT 0
27458: PPUSH
27459: CALL_OW 51
// end ;
27463: GO 27385
27465: POP
27466: POP
// end ;
27467: PPOPN 1
27469: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27470: LD_EXP 80
27474: PUSH
27475: LD_EXP 100
27479: AND
27480: IFFALSE 27489
27482: GO 27484
27484: DISABLE
// StreamSibBomb ;
27485: CALL 27490 0 0
27489: END
// export function StreamSibBomb ; var i , x , y ; begin
27490: LD_INT 0
27492: PPUSH
27493: PPUSH
27494: PPUSH
27495: PPUSH
// result := false ;
27496: LD_ADDR_VAR 0 1
27500: PUSH
27501: LD_INT 0
27503: ST_TO_ADDR
// for i := 1 to 16 do
27504: LD_ADDR_VAR 0 2
27508: PUSH
27509: DOUBLE
27510: LD_INT 1
27512: DEC
27513: ST_TO_ADDR
27514: LD_INT 16
27516: PUSH
27517: FOR_TO
27518: IFFALSE 27717
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27520: LD_ADDR_VAR 0 3
27524: PUSH
27525: LD_INT 10
27527: PUSH
27528: LD_INT 20
27530: PUSH
27531: LD_INT 30
27533: PUSH
27534: LD_INT 40
27536: PUSH
27537: LD_INT 50
27539: PUSH
27540: LD_INT 60
27542: PUSH
27543: LD_INT 70
27545: PUSH
27546: LD_INT 80
27548: PUSH
27549: LD_INT 90
27551: PUSH
27552: LD_INT 100
27554: PUSH
27555: LD_INT 110
27557: PUSH
27558: LD_INT 120
27560: PUSH
27561: LD_INT 130
27563: PUSH
27564: LD_INT 140
27566: PUSH
27567: LD_INT 150
27569: PUSH
27570: EMPTY
27571: LIST
27572: LIST
27573: LIST
27574: LIST
27575: LIST
27576: LIST
27577: LIST
27578: LIST
27579: LIST
27580: LIST
27581: LIST
27582: LIST
27583: LIST
27584: LIST
27585: LIST
27586: PUSH
27587: LD_INT 1
27589: PPUSH
27590: LD_INT 15
27592: PPUSH
27593: CALL_OW 12
27597: ARRAY
27598: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27599: LD_ADDR_VAR 0 4
27603: PUSH
27604: LD_INT 10
27606: PUSH
27607: LD_INT 20
27609: PUSH
27610: LD_INT 30
27612: PUSH
27613: LD_INT 40
27615: PUSH
27616: LD_INT 50
27618: PUSH
27619: LD_INT 60
27621: PUSH
27622: LD_INT 70
27624: PUSH
27625: LD_INT 80
27627: PUSH
27628: LD_INT 90
27630: PUSH
27631: LD_INT 100
27633: PUSH
27634: LD_INT 110
27636: PUSH
27637: LD_INT 120
27639: PUSH
27640: LD_INT 130
27642: PUSH
27643: LD_INT 140
27645: PUSH
27646: LD_INT 150
27648: PUSH
27649: EMPTY
27650: LIST
27651: LIST
27652: LIST
27653: LIST
27654: LIST
27655: LIST
27656: LIST
27657: LIST
27658: LIST
27659: LIST
27660: LIST
27661: LIST
27662: LIST
27663: LIST
27664: LIST
27665: PUSH
27666: LD_INT 1
27668: PPUSH
27669: LD_INT 15
27671: PPUSH
27672: CALL_OW 12
27676: ARRAY
27677: ST_TO_ADDR
// if ValidHex ( x , y ) then
27678: LD_VAR 0 3
27682: PPUSH
27683: LD_VAR 0 4
27687: PPUSH
27688: CALL_OW 488
27692: IFFALSE 27715
// begin result := [ x , y ] ;
27694: LD_ADDR_VAR 0 1
27698: PUSH
27699: LD_VAR 0 3
27703: PUSH
27704: LD_VAR 0 4
27708: PUSH
27709: EMPTY
27710: LIST
27711: LIST
27712: ST_TO_ADDR
// break ;
27713: GO 27717
// end ; end ;
27715: GO 27517
27717: POP
27718: POP
// if result then
27719: LD_VAR 0 1
27723: IFFALSE 27783
// begin ToLua ( playSibBomb() ) ;
27725: LD_STRING playSibBomb()
27727: PPUSH
27728: CALL_OW 559
// wait ( 0 0$14 ) ;
27732: LD_INT 490
27734: PPUSH
27735: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27739: LD_VAR 0 1
27743: PUSH
27744: LD_INT 1
27746: ARRAY
27747: PPUSH
27748: LD_VAR 0 1
27752: PUSH
27753: LD_INT 2
27755: ARRAY
27756: PPUSH
27757: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27761: LD_VAR 0 1
27765: PUSH
27766: LD_INT 1
27768: ARRAY
27769: PPUSH
27770: LD_VAR 0 1
27774: PUSH
27775: LD_INT 2
27777: ARRAY
27778: PPUSH
27779: CALL_OW 429
// end ; end ;
27783: LD_VAR 0 1
27787: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27788: LD_EXP 80
27792: PUSH
27793: LD_EXP 102
27797: AND
27798: IFFALSE 27810
27800: GO 27802
27802: DISABLE
// YouLost (  ) ;
27803: LD_STRING 
27805: PPUSH
27806: CALL_OW 104
27810: END
// every 0 0$1 trigger StreamModeActive and sFog do
27811: LD_EXP 80
27815: PUSH
27816: LD_EXP 101
27820: AND
27821: IFFALSE 27835
27823: GO 27825
27825: DISABLE
// FogOff ( your_side ) ;
27826: LD_OWVAR 2
27830: PPUSH
27831: CALL_OW 344
27835: END
// every 0 0$1 trigger StreamModeActive and sSun do
27836: LD_EXP 80
27840: PUSH
27841: LD_EXP 103
27845: AND
27846: IFFALSE 27874
27848: GO 27850
27850: DISABLE
// begin solar_recharge_percent := 0 ;
27851: LD_ADDR_OWVAR 79
27855: PUSH
27856: LD_INT 0
27858: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27859: LD_INT 10500
27861: PPUSH
27862: CALL_OW 67
// solar_recharge_percent := 100 ;
27866: LD_ADDR_OWVAR 79
27870: PUSH
27871: LD_INT 100
27873: ST_TO_ADDR
// end ;
27874: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27875: LD_EXP 80
27879: PUSH
27880: LD_EXP 104
27884: AND
27885: IFFALSE 28124
27887: GO 27889
27889: DISABLE
27890: LD_INT 0
27892: PPUSH
27893: PPUSH
27894: PPUSH
// begin tmp := [ ] ;
27895: LD_ADDR_VAR 0 3
27899: PUSH
27900: EMPTY
27901: ST_TO_ADDR
// for i := 1 to 6 do
27902: LD_ADDR_VAR 0 1
27906: PUSH
27907: DOUBLE
27908: LD_INT 1
27910: DEC
27911: ST_TO_ADDR
27912: LD_INT 6
27914: PUSH
27915: FOR_TO
27916: IFFALSE 28021
// begin uc_nation := nation_nature ;
27918: LD_ADDR_OWVAR 21
27922: PUSH
27923: LD_INT 0
27925: ST_TO_ADDR
// uc_side := 0 ;
27926: LD_ADDR_OWVAR 20
27930: PUSH
27931: LD_INT 0
27933: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27934: LD_ADDR_OWVAR 29
27938: PUSH
27939: LD_INT 12
27941: PUSH
27942: LD_INT 12
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: ST_TO_ADDR
// hc_agressivity := 20 ;
27949: LD_ADDR_OWVAR 35
27953: PUSH
27954: LD_INT 20
27956: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27957: LD_ADDR_OWVAR 28
27961: PUSH
27962: LD_INT 17
27964: ST_TO_ADDR
// hc_gallery :=  ;
27965: LD_ADDR_OWVAR 33
27969: PUSH
27970: LD_STRING 
27972: ST_TO_ADDR
// hc_name :=  ;
27973: LD_ADDR_OWVAR 26
27977: PUSH
27978: LD_STRING 
27980: ST_TO_ADDR
// un := CreateHuman ;
27981: LD_ADDR_VAR 0 2
27985: PUSH
27986: CALL_OW 44
27990: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27991: LD_VAR 0 2
27995: PPUSH
27996: LD_INT 1
27998: PPUSH
27999: CALL_OW 51
// tmp := tmp ^ un ;
28003: LD_ADDR_VAR 0 3
28007: PUSH
28008: LD_VAR 0 3
28012: PUSH
28013: LD_VAR 0 2
28017: ADD
28018: ST_TO_ADDR
// end ;
28019: GO 27915
28021: POP
28022: POP
// repeat wait ( 0 0$1 ) ;
28023: LD_INT 35
28025: PPUSH
28026: CALL_OW 67
// for un in tmp do
28030: LD_ADDR_VAR 0 2
28034: PUSH
28035: LD_VAR 0 3
28039: PUSH
28040: FOR_IN
28041: IFFALSE 28115
// begin if IsDead ( un ) then
28043: LD_VAR 0 2
28047: PPUSH
28048: CALL_OW 301
28052: IFFALSE 28072
// begin tmp := tmp diff un ;
28054: LD_ADDR_VAR 0 3
28058: PUSH
28059: LD_VAR 0 3
28063: PUSH
28064: LD_VAR 0 2
28068: DIFF
28069: ST_TO_ADDR
// continue ;
28070: GO 28040
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28072: LD_VAR 0 2
28076: PPUSH
28077: LD_INT 3
28079: PUSH
28080: LD_INT 22
28082: PUSH
28083: LD_INT 0
28085: PUSH
28086: EMPTY
28087: LIST
28088: LIST
28089: PUSH
28090: EMPTY
28091: LIST
28092: LIST
28093: PPUSH
28094: CALL_OW 69
28098: PPUSH
28099: LD_VAR 0 2
28103: PPUSH
28104: CALL_OW 74
28108: PPUSH
28109: CALL_OW 115
// end ;
28113: GO 28040
28115: POP
28116: POP
// until not tmp ;
28117: LD_VAR 0 3
28121: NOT
28122: IFFALSE 28023
// end ;
28124: PPOPN 3
28126: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28127: LD_EXP 80
28131: PUSH
28132: LD_EXP 105
28136: AND
28137: IFFALSE 28191
28139: GO 28141
28141: DISABLE
// begin ToLua ( displayTroll(); ) ;
28142: LD_STRING displayTroll();
28144: PPUSH
28145: CALL_OW 559
// wait ( 3 3$00 ) ;
28149: LD_INT 6300
28151: PPUSH
28152: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28156: LD_STRING hideTroll();
28158: PPUSH
28159: CALL_OW 559
// wait ( 1 1$00 ) ;
28163: LD_INT 2100
28165: PPUSH
28166: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28170: LD_STRING displayTroll();
28172: PPUSH
28173: CALL_OW 559
// wait ( 1 1$00 ) ;
28177: LD_INT 2100
28179: PPUSH
28180: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28184: LD_STRING hideTroll();
28186: PPUSH
28187: CALL_OW 559
// end ;
28191: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28192: LD_EXP 80
28196: PUSH
28197: LD_EXP 106
28201: AND
28202: IFFALSE 28265
28204: GO 28206
28206: DISABLE
28207: LD_INT 0
28209: PPUSH
// begin p := 0 ;
28210: LD_ADDR_VAR 0 1
28214: PUSH
28215: LD_INT 0
28217: ST_TO_ADDR
// repeat game_speed := 1 ;
28218: LD_ADDR_OWVAR 65
28222: PUSH
28223: LD_INT 1
28225: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28226: LD_INT 35
28228: PPUSH
28229: CALL_OW 67
// p := p + 1 ;
28233: LD_ADDR_VAR 0 1
28237: PUSH
28238: LD_VAR 0 1
28242: PUSH
28243: LD_INT 1
28245: PLUS
28246: ST_TO_ADDR
// until p >= 60 ;
28247: LD_VAR 0 1
28251: PUSH
28252: LD_INT 60
28254: GREATEREQUAL
28255: IFFALSE 28218
// game_speed := 4 ;
28257: LD_ADDR_OWVAR 65
28261: PUSH
28262: LD_INT 4
28264: ST_TO_ADDR
// end ;
28265: PPOPN 1
28267: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28268: LD_EXP 80
28272: PUSH
28273: LD_EXP 107
28277: AND
28278: IFFALSE 28424
28280: GO 28282
28282: DISABLE
28283: LD_INT 0
28285: PPUSH
28286: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28287: LD_ADDR_VAR 0 1
28291: PUSH
28292: LD_INT 22
28294: PUSH
28295: LD_OWVAR 2
28299: PUSH
28300: EMPTY
28301: LIST
28302: LIST
28303: PUSH
28304: LD_INT 2
28306: PUSH
28307: LD_INT 30
28309: PUSH
28310: LD_INT 0
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: PUSH
28317: LD_INT 30
28319: PUSH
28320: LD_INT 1
28322: PUSH
28323: EMPTY
28324: LIST
28325: LIST
28326: PUSH
28327: EMPTY
28328: LIST
28329: LIST
28330: LIST
28331: PUSH
28332: EMPTY
28333: LIST
28334: LIST
28335: PPUSH
28336: CALL_OW 69
28340: ST_TO_ADDR
// if not depot then
28341: LD_VAR 0 1
28345: NOT
28346: IFFALSE 28350
// exit ;
28348: GO 28424
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28350: LD_ADDR_VAR 0 2
28354: PUSH
28355: LD_VAR 0 1
28359: PUSH
28360: LD_INT 1
28362: PPUSH
28363: LD_VAR 0 1
28367: PPUSH
28368: CALL_OW 12
28372: ARRAY
28373: PPUSH
28374: CALL_OW 274
28378: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28379: LD_VAR 0 2
28383: PPUSH
28384: LD_INT 1
28386: PPUSH
28387: LD_INT 0
28389: PPUSH
28390: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28394: LD_VAR 0 2
28398: PPUSH
28399: LD_INT 2
28401: PPUSH
28402: LD_INT 0
28404: PPUSH
28405: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28409: LD_VAR 0 2
28413: PPUSH
28414: LD_INT 3
28416: PPUSH
28417: LD_INT 0
28419: PPUSH
28420: CALL_OW 277
// end ;
28424: PPOPN 2
28426: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28427: LD_EXP 80
28431: PUSH
28432: LD_EXP 108
28436: AND
28437: IFFALSE 28534
28439: GO 28441
28441: DISABLE
28442: LD_INT 0
28444: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28445: LD_ADDR_VAR 0 1
28449: PUSH
28450: LD_INT 22
28452: PUSH
28453: LD_OWVAR 2
28457: PUSH
28458: EMPTY
28459: LIST
28460: LIST
28461: PUSH
28462: LD_INT 21
28464: PUSH
28465: LD_INT 1
28467: PUSH
28468: EMPTY
28469: LIST
28470: LIST
28471: PUSH
28472: LD_INT 3
28474: PUSH
28475: LD_INT 23
28477: PUSH
28478: LD_INT 0
28480: PUSH
28481: EMPTY
28482: LIST
28483: LIST
28484: PUSH
28485: EMPTY
28486: LIST
28487: LIST
28488: PUSH
28489: EMPTY
28490: LIST
28491: LIST
28492: LIST
28493: PPUSH
28494: CALL_OW 69
28498: ST_TO_ADDR
// if not tmp then
28499: LD_VAR 0 1
28503: NOT
28504: IFFALSE 28508
// exit ;
28506: GO 28534
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28508: LD_VAR 0 1
28512: PUSH
28513: LD_INT 1
28515: PPUSH
28516: LD_VAR 0 1
28520: PPUSH
28521: CALL_OW 12
28525: ARRAY
28526: PPUSH
28527: LD_INT 200
28529: PPUSH
28530: CALL_OW 234
// end ;
28534: PPOPN 1
28536: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28537: LD_EXP 80
28541: PUSH
28542: LD_EXP 109
28546: AND
28547: IFFALSE 28626
28549: GO 28551
28551: DISABLE
28552: LD_INT 0
28554: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28555: LD_ADDR_VAR 0 1
28559: PUSH
28560: LD_INT 22
28562: PUSH
28563: LD_OWVAR 2
28567: PUSH
28568: EMPTY
28569: LIST
28570: LIST
28571: PUSH
28572: LD_INT 21
28574: PUSH
28575: LD_INT 2
28577: PUSH
28578: EMPTY
28579: LIST
28580: LIST
28581: PUSH
28582: EMPTY
28583: LIST
28584: LIST
28585: PPUSH
28586: CALL_OW 69
28590: ST_TO_ADDR
// if not tmp then
28591: LD_VAR 0 1
28595: NOT
28596: IFFALSE 28600
// exit ;
28598: GO 28626
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28600: LD_VAR 0 1
28604: PUSH
28605: LD_INT 1
28607: PPUSH
28608: LD_VAR 0 1
28612: PPUSH
28613: CALL_OW 12
28617: ARRAY
28618: PPUSH
28619: LD_INT 60
28621: PPUSH
28622: CALL_OW 234
// end ;
28626: PPOPN 1
28628: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28629: LD_EXP 80
28633: PUSH
28634: LD_EXP 110
28638: AND
28639: IFFALSE 28738
28641: GO 28643
28643: DISABLE
28644: LD_INT 0
28646: PPUSH
28647: PPUSH
// begin enable ;
28648: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28649: LD_ADDR_VAR 0 1
28653: PUSH
28654: LD_INT 22
28656: PUSH
28657: LD_OWVAR 2
28661: PUSH
28662: EMPTY
28663: LIST
28664: LIST
28665: PUSH
28666: LD_INT 61
28668: PUSH
28669: EMPTY
28670: LIST
28671: PUSH
28672: LD_INT 33
28674: PUSH
28675: LD_INT 2
28677: PUSH
28678: EMPTY
28679: LIST
28680: LIST
28681: PUSH
28682: EMPTY
28683: LIST
28684: LIST
28685: LIST
28686: PPUSH
28687: CALL_OW 69
28691: ST_TO_ADDR
// if not tmp then
28692: LD_VAR 0 1
28696: NOT
28697: IFFALSE 28701
// exit ;
28699: GO 28738
// for i in tmp do
28701: LD_ADDR_VAR 0 2
28705: PUSH
28706: LD_VAR 0 1
28710: PUSH
28711: FOR_IN
28712: IFFALSE 28736
// if IsControledBy ( i ) then
28714: LD_VAR 0 2
28718: PPUSH
28719: CALL_OW 312
28723: IFFALSE 28734
// ComUnlink ( i ) ;
28725: LD_VAR 0 2
28729: PPUSH
28730: CALL_OW 136
28734: GO 28711
28736: POP
28737: POP
// end ;
28738: PPOPN 2
28740: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28741: LD_EXP 80
28745: PUSH
28746: LD_EXP 111
28750: AND
28751: IFFALSE 28891
28753: GO 28755
28755: DISABLE
28756: LD_INT 0
28758: PPUSH
28759: PPUSH
// begin ToLua ( displayPowell(); ) ;
28760: LD_STRING displayPowell();
28762: PPUSH
28763: CALL_OW 559
// uc_side := 0 ;
28767: LD_ADDR_OWVAR 20
28771: PUSH
28772: LD_INT 0
28774: ST_TO_ADDR
// uc_nation := 2 ;
28775: LD_ADDR_OWVAR 21
28779: PUSH
28780: LD_INT 2
28782: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28783: LD_ADDR_OWVAR 37
28787: PUSH
28788: LD_INT 14
28790: ST_TO_ADDR
// vc_engine := engine_siberite ;
28791: LD_ADDR_OWVAR 39
28795: PUSH
28796: LD_INT 3
28798: ST_TO_ADDR
// vc_control := control_apeman ;
28799: LD_ADDR_OWVAR 38
28803: PUSH
28804: LD_INT 5
28806: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28807: LD_ADDR_OWVAR 40
28811: PUSH
28812: LD_INT 29
28814: ST_TO_ADDR
// un := CreateVehicle ;
28815: LD_ADDR_VAR 0 2
28819: PUSH
28820: CALL_OW 45
28824: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28825: LD_VAR 0 2
28829: PPUSH
28830: LD_INT 1
28832: PPUSH
28833: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28837: LD_INT 35
28839: PPUSH
28840: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28844: LD_VAR 0 2
28848: PPUSH
28849: LD_INT 22
28851: PUSH
28852: LD_OWVAR 2
28856: PUSH
28857: EMPTY
28858: LIST
28859: LIST
28860: PPUSH
28861: CALL_OW 69
28865: PPUSH
28866: LD_VAR 0 2
28870: PPUSH
28871: CALL_OW 74
28875: PPUSH
28876: CALL_OW 115
// until IsDead ( un ) ;
28880: LD_VAR 0 2
28884: PPUSH
28885: CALL_OW 301
28889: IFFALSE 28837
// end ;
28891: PPOPN 2
28893: END
// every 0 0$1 trigger StreamModeActive and sStu do
28894: LD_EXP 80
28898: PUSH
28899: LD_EXP 119
28903: AND
28904: IFFALSE 28920
28906: GO 28908
28908: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28909: LD_STRING displayStucuk();
28911: PPUSH
28912: CALL_OW 559
// ResetFog ;
28916: CALL_OW 335
// end ;
28920: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28921: LD_EXP 80
28925: PUSH
28926: LD_EXP 112
28930: AND
28931: IFFALSE 29072
28933: GO 28935
28935: DISABLE
28936: LD_INT 0
28938: PPUSH
28939: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28940: LD_ADDR_VAR 0 2
28944: PUSH
28945: LD_INT 22
28947: PUSH
28948: LD_OWVAR 2
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: PUSH
28957: LD_INT 21
28959: PUSH
28960: LD_INT 1
28962: PUSH
28963: EMPTY
28964: LIST
28965: LIST
28966: PUSH
28967: EMPTY
28968: LIST
28969: LIST
28970: PPUSH
28971: CALL_OW 69
28975: ST_TO_ADDR
// if not tmp then
28976: LD_VAR 0 2
28980: NOT
28981: IFFALSE 28985
// exit ;
28983: GO 29072
// un := tmp [ rand ( 1 , tmp ) ] ;
28985: LD_ADDR_VAR 0 1
28989: PUSH
28990: LD_VAR 0 2
28994: PUSH
28995: LD_INT 1
28997: PPUSH
28998: LD_VAR 0 2
29002: PPUSH
29003: CALL_OW 12
29007: ARRAY
29008: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29009: LD_VAR 0 1
29013: PPUSH
29014: LD_INT 0
29016: PPUSH
29017: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29021: LD_VAR 0 1
29025: PPUSH
29026: LD_OWVAR 3
29030: PUSH
29031: LD_VAR 0 1
29035: DIFF
29036: PPUSH
29037: LD_VAR 0 1
29041: PPUSH
29042: CALL_OW 74
29046: PPUSH
29047: CALL_OW 115
// wait ( 0 0$20 ) ;
29051: LD_INT 700
29053: PPUSH
29054: CALL_OW 67
// SetSide ( un , your_side ) ;
29058: LD_VAR 0 1
29062: PPUSH
29063: LD_OWVAR 2
29067: PPUSH
29068: CALL_OW 235
// end ;
29072: PPOPN 2
29074: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29075: LD_EXP 80
29079: PUSH
29080: LD_EXP 113
29084: AND
29085: IFFALSE 29191
29087: GO 29089
29089: DISABLE
29090: LD_INT 0
29092: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29093: LD_ADDR_VAR 0 1
29097: PUSH
29098: LD_INT 22
29100: PUSH
29101: LD_OWVAR 2
29105: PUSH
29106: EMPTY
29107: LIST
29108: LIST
29109: PUSH
29110: LD_INT 2
29112: PUSH
29113: LD_INT 30
29115: PUSH
29116: LD_INT 0
29118: PUSH
29119: EMPTY
29120: LIST
29121: LIST
29122: PUSH
29123: LD_INT 30
29125: PUSH
29126: LD_INT 1
29128: PUSH
29129: EMPTY
29130: LIST
29131: LIST
29132: PUSH
29133: EMPTY
29134: LIST
29135: LIST
29136: LIST
29137: PUSH
29138: EMPTY
29139: LIST
29140: LIST
29141: PPUSH
29142: CALL_OW 69
29146: ST_TO_ADDR
// if not depot then
29147: LD_VAR 0 1
29151: NOT
29152: IFFALSE 29156
// exit ;
29154: GO 29191
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29156: LD_VAR 0 1
29160: PUSH
29161: LD_INT 1
29163: ARRAY
29164: PPUSH
29165: CALL_OW 250
29169: PPUSH
29170: LD_VAR 0 1
29174: PUSH
29175: LD_INT 1
29177: ARRAY
29178: PPUSH
29179: CALL_OW 251
29183: PPUSH
29184: LD_INT 70
29186: PPUSH
29187: CALL_OW 495
// end ;
29191: PPOPN 1
29193: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29194: LD_EXP 80
29198: PUSH
29199: LD_EXP 114
29203: AND
29204: IFFALSE 29415
29206: GO 29208
29208: DISABLE
29209: LD_INT 0
29211: PPUSH
29212: PPUSH
29213: PPUSH
29214: PPUSH
29215: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29216: LD_ADDR_VAR 0 5
29220: PUSH
29221: LD_INT 22
29223: PUSH
29224: LD_OWVAR 2
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: PUSH
29233: LD_INT 21
29235: PUSH
29236: LD_INT 1
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: PPUSH
29247: CALL_OW 69
29251: ST_TO_ADDR
// if not tmp then
29252: LD_VAR 0 5
29256: NOT
29257: IFFALSE 29261
// exit ;
29259: GO 29415
// for i in tmp do
29261: LD_ADDR_VAR 0 1
29265: PUSH
29266: LD_VAR 0 5
29270: PUSH
29271: FOR_IN
29272: IFFALSE 29413
// begin d := rand ( 0 , 5 ) ;
29274: LD_ADDR_VAR 0 4
29278: PUSH
29279: LD_INT 0
29281: PPUSH
29282: LD_INT 5
29284: PPUSH
29285: CALL_OW 12
29289: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29290: LD_ADDR_VAR 0 2
29294: PUSH
29295: LD_VAR 0 1
29299: PPUSH
29300: CALL_OW 250
29304: PPUSH
29305: LD_VAR 0 4
29309: PPUSH
29310: LD_INT 3
29312: PPUSH
29313: LD_INT 12
29315: PPUSH
29316: CALL_OW 12
29320: PPUSH
29321: CALL_OW 272
29325: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29326: LD_ADDR_VAR 0 3
29330: PUSH
29331: LD_VAR 0 1
29335: PPUSH
29336: CALL_OW 251
29340: PPUSH
29341: LD_VAR 0 4
29345: PPUSH
29346: LD_INT 3
29348: PPUSH
29349: LD_INT 12
29351: PPUSH
29352: CALL_OW 12
29356: PPUSH
29357: CALL_OW 273
29361: ST_TO_ADDR
// if ValidHex ( x , y ) then
29362: LD_VAR 0 2
29366: PPUSH
29367: LD_VAR 0 3
29371: PPUSH
29372: CALL_OW 488
29376: IFFALSE 29411
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29378: LD_VAR 0 1
29382: PPUSH
29383: LD_VAR 0 2
29387: PPUSH
29388: LD_VAR 0 3
29392: PPUSH
29393: LD_INT 3
29395: PPUSH
29396: LD_INT 6
29398: PPUSH
29399: CALL_OW 12
29403: PPUSH
29404: LD_INT 1
29406: PPUSH
29407: CALL_OW 483
// end ;
29411: GO 29271
29413: POP
29414: POP
// end ;
29415: PPOPN 5
29417: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29418: LD_EXP 80
29422: PUSH
29423: LD_EXP 115
29427: AND
29428: IFFALSE 29522
29430: GO 29432
29432: DISABLE
29433: LD_INT 0
29435: PPUSH
29436: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29437: LD_ADDR_VAR 0 2
29441: PUSH
29442: LD_INT 22
29444: PUSH
29445: LD_OWVAR 2
29449: PUSH
29450: EMPTY
29451: LIST
29452: LIST
29453: PUSH
29454: LD_INT 32
29456: PUSH
29457: LD_INT 1
29459: PUSH
29460: EMPTY
29461: LIST
29462: LIST
29463: PUSH
29464: LD_INT 21
29466: PUSH
29467: LD_INT 2
29469: PUSH
29470: EMPTY
29471: LIST
29472: LIST
29473: PUSH
29474: EMPTY
29475: LIST
29476: LIST
29477: LIST
29478: PPUSH
29479: CALL_OW 69
29483: ST_TO_ADDR
// if not tmp then
29484: LD_VAR 0 2
29488: NOT
29489: IFFALSE 29493
// exit ;
29491: GO 29522
// for i in tmp do
29493: LD_ADDR_VAR 0 1
29497: PUSH
29498: LD_VAR 0 2
29502: PUSH
29503: FOR_IN
29504: IFFALSE 29520
// SetFuel ( i , 0 ) ;
29506: LD_VAR 0 1
29510: PPUSH
29511: LD_INT 0
29513: PPUSH
29514: CALL_OW 240
29518: GO 29503
29520: POP
29521: POP
// end ;
29522: PPOPN 2
29524: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29525: LD_EXP 80
29529: PUSH
29530: LD_EXP 116
29534: AND
29535: IFFALSE 29601
29537: GO 29539
29539: DISABLE
29540: LD_INT 0
29542: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29543: LD_ADDR_VAR 0 1
29547: PUSH
29548: LD_INT 22
29550: PUSH
29551: LD_OWVAR 2
29555: PUSH
29556: EMPTY
29557: LIST
29558: LIST
29559: PUSH
29560: LD_INT 30
29562: PUSH
29563: LD_INT 29
29565: PUSH
29566: EMPTY
29567: LIST
29568: LIST
29569: PUSH
29570: EMPTY
29571: LIST
29572: LIST
29573: PPUSH
29574: CALL_OW 69
29578: ST_TO_ADDR
// if not tmp then
29579: LD_VAR 0 1
29583: NOT
29584: IFFALSE 29588
// exit ;
29586: GO 29601
// DestroyUnit ( tmp [ 1 ] ) ;
29588: LD_VAR 0 1
29592: PUSH
29593: LD_INT 1
29595: ARRAY
29596: PPUSH
29597: CALL_OW 65
// end ;
29601: PPOPN 1
29603: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29604: LD_EXP 80
29608: PUSH
29609: LD_EXP 118
29613: AND
29614: IFFALSE 29743
29616: GO 29618
29618: DISABLE
29619: LD_INT 0
29621: PPUSH
// begin uc_side := 0 ;
29622: LD_ADDR_OWVAR 20
29626: PUSH
29627: LD_INT 0
29629: ST_TO_ADDR
// uc_nation := nation_arabian ;
29630: LD_ADDR_OWVAR 21
29634: PUSH
29635: LD_INT 2
29637: ST_TO_ADDR
// hc_gallery :=  ;
29638: LD_ADDR_OWVAR 33
29642: PUSH
29643: LD_STRING 
29645: ST_TO_ADDR
// hc_name :=  ;
29646: LD_ADDR_OWVAR 26
29650: PUSH
29651: LD_STRING 
29653: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29654: LD_INT 1
29656: PPUSH
29657: LD_INT 11
29659: PPUSH
29660: LD_INT 10
29662: PPUSH
29663: CALL_OW 380
// un := CreateHuman ;
29667: LD_ADDR_VAR 0 1
29671: PUSH
29672: CALL_OW 44
29676: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29677: LD_VAR 0 1
29681: PPUSH
29682: LD_INT 1
29684: PPUSH
29685: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29689: LD_INT 35
29691: PPUSH
29692: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29696: LD_VAR 0 1
29700: PPUSH
29701: LD_INT 22
29703: PUSH
29704: LD_OWVAR 2
29708: PUSH
29709: EMPTY
29710: LIST
29711: LIST
29712: PPUSH
29713: CALL_OW 69
29717: PPUSH
29718: LD_VAR 0 1
29722: PPUSH
29723: CALL_OW 74
29727: PPUSH
29728: CALL_OW 115
// until IsDead ( un ) ;
29732: LD_VAR 0 1
29736: PPUSH
29737: CALL_OW 301
29741: IFFALSE 29689
// end ;
29743: PPOPN 1
29745: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29746: LD_EXP 80
29750: PUSH
29751: LD_EXP 120
29755: AND
29756: IFFALSE 29768
29758: GO 29760
29760: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29761: LD_STRING earthquake(getX(game), 0, 32)
29763: PPUSH
29764: CALL_OW 559
29768: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29769: LD_EXP 80
29773: PUSH
29774: LD_EXP 121
29778: AND
29779: IFFALSE 29870
29781: GO 29783
29783: DISABLE
29784: LD_INT 0
29786: PPUSH
// begin enable ;
29787: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29788: LD_ADDR_VAR 0 1
29792: PUSH
29793: LD_INT 22
29795: PUSH
29796: LD_OWVAR 2
29800: PUSH
29801: EMPTY
29802: LIST
29803: LIST
29804: PUSH
29805: LD_INT 21
29807: PUSH
29808: LD_INT 2
29810: PUSH
29811: EMPTY
29812: LIST
29813: LIST
29814: PUSH
29815: LD_INT 33
29817: PUSH
29818: LD_INT 3
29820: PUSH
29821: EMPTY
29822: LIST
29823: LIST
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: LIST
29829: PPUSH
29830: CALL_OW 69
29834: ST_TO_ADDR
// if not tmp then
29835: LD_VAR 0 1
29839: NOT
29840: IFFALSE 29844
// exit ;
29842: GO 29870
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29844: LD_VAR 0 1
29848: PUSH
29849: LD_INT 1
29851: PPUSH
29852: LD_VAR 0 1
29856: PPUSH
29857: CALL_OW 12
29861: ARRAY
29862: PPUSH
29863: LD_INT 1
29865: PPUSH
29866: CALL_OW 234
// end ;
29870: PPOPN 1
29872: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29873: LD_EXP 80
29877: PUSH
29878: LD_EXP 122
29882: AND
29883: IFFALSE 30024
29885: GO 29887
29887: DISABLE
29888: LD_INT 0
29890: PPUSH
29891: PPUSH
29892: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29893: LD_ADDR_VAR 0 3
29897: PUSH
29898: LD_INT 22
29900: PUSH
29901: LD_OWVAR 2
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: PUSH
29910: LD_INT 25
29912: PUSH
29913: LD_INT 1
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: PUSH
29920: EMPTY
29921: LIST
29922: LIST
29923: PPUSH
29924: CALL_OW 69
29928: ST_TO_ADDR
// if not tmp then
29929: LD_VAR 0 3
29933: NOT
29934: IFFALSE 29938
// exit ;
29936: GO 30024
// un := tmp [ rand ( 1 , tmp ) ] ;
29938: LD_ADDR_VAR 0 2
29942: PUSH
29943: LD_VAR 0 3
29947: PUSH
29948: LD_INT 1
29950: PPUSH
29951: LD_VAR 0 3
29955: PPUSH
29956: CALL_OW 12
29960: ARRAY
29961: ST_TO_ADDR
// if Crawls ( un ) then
29962: LD_VAR 0 2
29966: PPUSH
29967: CALL_OW 318
29971: IFFALSE 29982
// ComWalk ( un ) ;
29973: LD_VAR 0 2
29977: PPUSH
29978: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29982: LD_VAR 0 2
29986: PPUSH
29987: LD_INT 9
29989: PPUSH
29990: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29994: LD_INT 28
29996: PPUSH
29997: LD_OWVAR 2
30001: PPUSH
30002: LD_INT 2
30004: PPUSH
30005: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30009: LD_INT 29
30011: PPUSH
30012: LD_OWVAR 2
30016: PPUSH
30017: LD_INT 2
30019: PPUSH
30020: CALL_OW 322
// end ;
30024: PPOPN 3
30026: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30027: LD_EXP 80
30031: PUSH
30032: LD_EXP 123
30036: AND
30037: IFFALSE 30148
30039: GO 30041
30041: DISABLE
30042: LD_INT 0
30044: PPUSH
30045: PPUSH
30046: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30047: LD_ADDR_VAR 0 3
30051: PUSH
30052: LD_INT 22
30054: PUSH
30055: LD_OWVAR 2
30059: PUSH
30060: EMPTY
30061: LIST
30062: LIST
30063: PUSH
30064: LD_INT 25
30066: PUSH
30067: LD_INT 1
30069: PUSH
30070: EMPTY
30071: LIST
30072: LIST
30073: PUSH
30074: EMPTY
30075: LIST
30076: LIST
30077: PPUSH
30078: CALL_OW 69
30082: ST_TO_ADDR
// if not tmp then
30083: LD_VAR 0 3
30087: NOT
30088: IFFALSE 30092
// exit ;
30090: GO 30148
// un := tmp [ rand ( 1 , tmp ) ] ;
30092: LD_ADDR_VAR 0 2
30096: PUSH
30097: LD_VAR 0 3
30101: PUSH
30102: LD_INT 1
30104: PPUSH
30105: LD_VAR 0 3
30109: PPUSH
30110: CALL_OW 12
30114: ARRAY
30115: ST_TO_ADDR
// if Crawls ( un ) then
30116: LD_VAR 0 2
30120: PPUSH
30121: CALL_OW 318
30125: IFFALSE 30136
// ComWalk ( un ) ;
30127: LD_VAR 0 2
30131: PPUSH
30132: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30136: LD_VAR 0 2
30140: PPUSH
30141: LD_INT 8
30143: PPUSH
30144: CALL_OW 336
// end ;
30148: PPOPN 3
30150: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30151: LD_EXP 80
30155: PUSH
30156: LD_EXP 124
30160: AND
30161: IFFALSE 30305
30163: GO 30165
30165: DISABLE
30166: LD_INT 0
30168: PPUSH
30169: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30170: LD_ADDR_VAR 0 2
30174: PUSH
30175: LD_INT 22
30177: PUSH
30178: LD_OWVAR 2
30182: PUSH
30183: EMPTY
30184: LIST
30185: LIST
30186: PUSH
30187: LD_INT 21
30189: PUSH
30190: LD_INT 2
30192: PUSH
30193: EMPTY
30194: LIST
30195: LIST
30196: PUSH
30197: LD_INT 2
30199: PUSH
30200: LD_INT 34
30202: PUSH
30203: LD_INT 12
30205: PUSH
30206: EMPTY
30207: LIST
30208: LIST
30209: PUSH
30210: LD_INT 34
30212: PUSH
30213: LD_INT 51
30215: PUSH
30216: EMPTY
30217: LIST
30218: LIST
30219: PUSH
30220: LD_INT 34
30222: PUSH
30223: LD_INT 32
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: PUSH
30230: EMPTY
30231: LIST
30232: LIST
30233: LIST
30234: LIST
30235: PUSH
30236: EMPTY
30237: LIST
30238: LIST
30239: LIST
30240: PPUSH
30241: CALL_OW 69
30245: ST_TO_ADDR
// if not tmp then
30246: LD_VAR 0 2
30250: NOT
30251: IFFALSE 30255
// exit ;
30253: GO 30305
// for i in tmp do
30255: LD_ADDR_VAR 0 1
30259: PUSH
30260: LD_VAR 0 2
30264: PUSH
30265: FOR_IN
30266: IFFALSE 30303
// if GetCargo ( i , mat_artifact ) = 0 then
30268: LD_VAR 0 1
30272: PPUSH
30273: LD_INT 4
30275: PPUSH
30276: CALL_OW 289
30280: PUSH
30281: LD_INT 0
30283: EQUAL
30284: IFFALSE 30301
// SetCargo ( i , mat_siberit , 100 ) ;
30286: LD_VAR 0 1
30290: PPUSH
30291: LD_INT 3
30293: PPUSH
30294: LD_INT 100
30296: PPUSH
30297: CALL_OW 290
30301: GO 30265
30303: POP
30304: POP
// end ;
30305: PPOPN 2
30307: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30308: LD_EXP 80
30312: PUSH
30313: LD_EXP 125
30317: AND
30318: IFFALSE 30501
30320: GO 30322
30322: DISABLE
30323: LD_INT 0
30325: PPUSH
30326: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30327: LD_ADDR_VAR 0 2
30331: PUSH
30332: LD_INT 22
30334: PUSH
30335: LD_OWVAR 2
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: PPUSH
30344: CALL_OW 69
30348: ST_TO_ADDR
// if not tmp then
30349: LD_VAR 0 2
30353: NOT
30354: IFFALSE 30358
// exit ;
30356: GO 30501
// for i := 1 to 2 do
30358: LD_ADDR_VAR 0 1
30362: PUSH
30363: DOUBLE
30364: LD_INT 1
30366: DEC
30367: ST_TO_ADDR
30368: LD_INT 2
30370: PUSH
30371: FOR_TO
30372: IFFALSE 30499
// begin uc_side := your_side ;
30374: LD_ADDR_OWVAR 20
30378: PUSH
30379: LD_OWVAR 2
30383: ST_TO_ADDR
// uc_nation := nation_american ;
30384: LD_ADDR_OWVAR 21
30388: PUSH
30389: LD_INT 1
30391: ST_TO_ADDR
// vc_chassis := us_morphling ;
30392: LD_ADDR_OWVAR 37
30396: PUSH
30397: LD_INT 5
30399: ST_TO_ADDR
// vc_engine := engine_siberite ;
30400: LD_ADDR_OWVAR 39
30404: PUSH
30405: LD_INT 3
30407: ST_TO_ADDR
// vc_control := control_computer ;
30408: LD_ADDR_OWVAR 38
30412: PUSH
30413: LD_INT 3
30415: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30416: LD_ADDR_OWVAR 40
30420: PUSH
30421: LD_INT 10
30423: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30424: LD_VAR 0 2
30428: PUSH
30429: LD_INT 1
30431: ARRAY
30432: PPUSH
30433: CALL_OW 310
30437: NOT
30438: IFFALSE 30485
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30440: CALL_OW 45
30444: PPUSH
30445: LD_VAR 0 2
30449: PUSH
30450: LD_INT 1
30452: ARRAY
30453: PPUSH
30454: CALL_OW 250
30458: PPUSH
30459: LD_VAR 0 2
30463: PUSH
30464: LD_INT 1
30466: ARRAY
30467: PPUSH
30468: CALL_OW 251
30472: PPUSH
30473: LD_INT 12
30475: PPUSH
30476: LD_INT 1
30478: PPUSH
30479: CALL_OW 50
30483: GO 30497
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30485: CALL_OW 45
30489: PPUSH
30490: LD_INT 1
30492: PPUSH
30493: CALL_OW 51
// end ;
30497: GO 30371
30499: POP
30500: POP
// end ;
30501: PPOPN 2
30503: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30504: LD_EXP 80
30508: PUSH
30509: LD_EXP 126
30513: AND
30514: IFFALSE 30736
30516: GO 30518
30518: DISABLE
30519: LD_INT 0
30521: PPUSH
30522: PPUSH
30523: PPUSH
30524: PPUSH
30525: PPUSH
30526: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30527: LD_ADDR_VAR 0 6
30531: PUSH
30532: LD_INT 22
30534: PUSH
30535: LD_OWVAR 2
30539: PUSH
30540: EMPTY
30541: LIST
30542: LIST
30543: PUSH
30544: LD_INT 21
30546: PUSH
30547: LD_INT 1
30549: PUSH
30550: EMPTY
30551: LIST
30552: LIST
30553: PUSH
30554: LD_INT 3
30556: PUSH
30557: LD_INT 23
30559: PUSH
30560: LD_INT 0
30562: PUSH
30563: EMPTY
30564: LIST
30565: LIST
30566: PUSH
30567: EMPTY
30568: LIST
30569: LIST
30570: PUSH
30571: EMPTY
30572: LIST
30573: LIST
30574: LIST
30575: PPUSH
30576: CALL_OW 69
30580: ST_TO_ADDR
// if not tmp then
30581: LD_VAR 0 6
30585: NOT
30586: IFFALSE 30590
// exit ;
30588: GO 30736
// s1 := rand ( 1 , 4 ) ;
30590: LD_ADDR_VAR 0 2
30594: PUSH
30595: LD_INT 1
30597: PPUSH
30598: LD_INT 4
30600: PPUSH
30601: CALL_OW 12
30605: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30606: LD_ADDR_VAR 0 4
30610: PUSH
30611: LD_VAR 0 6
30615: PUSH
30616: LD_INT 1
30618: ARRAY
30619: PPUSH
30620: LD_VAR 0 2
30624: PPUSH
30625: CALL_OW 259
30629: ST_TO_ADDR
// if s1 = 1 then
30630: LD_VAR 0 2
30634: PUSH
30635: LD_INT 1
30637: EQUAL
30638: IFFALSE 30658
// s2 := rand ( 2 , 4 ) else
30640: LD_ADDR_VAR 0 3
30644: PUSH
30645: LD_INT 2
30647: PPUSH
30648: LD_INT 4
30650: PPUSH
30651: CALL_OW 12
30655: ST_TO_ADDR
30656: GO 30666
// s2 := 1 ;
30658: LD_ADDR_VAR 0 3
30662: PUSH
30663: LD_INT 1
30665: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30666: LD_ADDR_VAR 0 5
30670: PUSH
30671: LD_VAR 0 6
30675: PUSH
30676: LD_INT 1
30678: ARRAY
30679: PPUSH
30680: LD_VAR 0 3
30684: PPUSH
30685: CALL_OW 259
30689: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30690: LD_VAR 0 6
30694: PUSH
30695: LD_INT 1
30697: ARRAY
30698: PPUSH
30699: LD_VAR 0 2
30703: PPUSH
30704: LD_VAR 0 5
30708: PPUSH
30709: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30713: LD_VAR 0 6
30717: PUSH
30718: LD_INT 1
30720: ARRAY
30721: PPUSH
30722: LD_VAR 0 3
30726: PPUSH
30727: LD_VAR 0 4
30731: PPUSH
30732: CALL_OW 237
// end ;
30736: PPOPN 6
30738: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30739: LD_EXP 80
30743: PUSH
30744: LD_EXP 127
30748: AND
30749: IFFALSE 30828
30751: GO 30753
30753: DISABLE
30754: LD_INT 0
30756: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30757: LD_ADDR_VAR 0 1
30761: PUSH
30762: LD_INT 22
30764: PUSH
30765: LD_OWVAR 2
30769: PUSH
30770: EMPTY
30771: LIST
30772: LIST
30773: PUSH
30774: LD_INT 30
30776: PUSH
30777: LD_INT 3
30779: PUSH
30780: EMPTY
30781: LIST
30782: LIST
30783: PUSH
30784: EMPTY
30785: LIST
30786: LIST
30787: PPUSH
30788: CALL_OW 69
30792: ST_TO_ADDR
// if not tmp then
30793: LD_VAR 0 1
30797: NOT
30798: IFFALSE 30802
// exit ;
30800: GO 30828
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30802: LD_VAR 0 1
30806: PUSH
30807: LD_INT 1
30809: PPUSH
30810: LD_VAR 0 1
30814: PPUSH
30815: CALL_OW 12
30819: ARRAY
30820: PPUSH
30821: LD_INT 1
30823: PPUSH
30824: CALL_OW 234
// end ;
30828: PPOPN 1
30830: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30831: LD_EXP 80
30835: PUSH
30836: LD_EXP 128
30840: AND
30841: IFFALSE 30953
30843: GO 30845
30845: DISABLE
30846: LD_INT 0
30848: PPUSH
30849: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30850: LD_ADDR_VAR 0 2
30854: PUSH
30855: LD_INT 22
30857: PUSH
30858: LD_OWVAR 2
30862: PUSH
30863: EMPTY
30864: LIST
30865: LIST
30866: PUSH
30867: LD_INT 2
30869: PUSH
30870: LD_INT 30
30872: PUSH
30873: LD_INT 27
30875: PUSH
30876: EMPTY
30877: LIST
30878: LIST
30879: PUSH
30880: LD_INT 30
30882: PUSH
30883: LD_INT 26
30885: PUSH
30886: EMPTY
30887: LIST
30888: LIST
30889: PUSH
30890: LD_INT 30
30892: PUSH
30893: LD_INT 28
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: LIST
30904: LIST
30905: PUSH
30906: EMPTY
30907: LIST
30908: LIST
30909: PPUSH
30910: CALL_OW 69
30914: ST_TO_ADDR
// if not tmp then
30915: LD_VAR 0 2
30919: NOT
30920: IFFALSE 30924
// exit ;
30922: GO 30953
// for i in tmp do
30924: LD_ADDR_VAR 0 1
30928: PUSH
30929: LD_VAR 0 2
30933: PUSH
30934: FOR_IN
30935: IFFALSE 30951
// SetLives ( i , 1 ) ;
30937: LD_VAR 0 1
30941: PPUSH
30942: LD_INT 1
30944: PPUSH
30945: CALL_OW 234
30949: GO 30934
30951: POP
30952: POP
// end ;
30953: PPOPN 2
30955: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30956: LD_EXP 80
30960: PUSH
30961: LD_EXP 129
30965: AND
30966: IFFALSE 31253
30968: GO 30970
30970: DISABLE
30971: LD_INT 0
30973: PPUSH
30974: PPUSH
30975: PPUSH
// begin i := rand ( 1 , 7 ) ;
30976: LD_ADDR_VAR 0 1
30980: PUSH
30981: LD_INT 1
30983: PPUSH
30984: LD_INT 7
30986: PPUSH
30987: CALL_OW 12
30991: ST_TO_ADDR
// case i of 1 :
30992: LD_VAR 0 1
30996: PUSH
30997: LD_INT 1
30999: DOUBLE
31000: EQUAL
31001: IFTRUE 31005
31003: GO 31015
31005: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31006: LD_STRING earthquake(getX(game), 0, 32)
31008: PPUSH
31009: CALL_OW 559
31013: GO 31253
31015: LD_INT 2
31017: DOUBLE
31018: EQUAL
31019: IFTRUE 31023
31021: GO 31037
31023: POP
// begin ToLua ( displayStucuk(); ) ;
31024: LD_STRING displayStucuk();
31026: PPUSH
31027: CALL_OW 559
// ResetFog ;
31031: CALL_OW 335
// end ; 3 :
31035: GO 31253
31037: LD_INT 3
31039: DOUBLE
31040: EQUAL
31041: IFTRUE 31045
31043: GO 31149
31045: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31046: LD_ADDR_VAR 0 2
31050: PUSH
31051: LD_INT 22
31053: PUSH
31054: LD_OWVAR 2
31058: PUSH
31059: EMPTY
31060: LIST
31061: LIST
31062: PUSH
31063: LD_INT 25
31065: PUSH
31066: LD_INT 1
31068: PUSH
31069: EMPTY
31070: LIST
31071: LIST
31072: PUSH
31073: EMPTY
31074: LIST
31075: LIST
31076: PPUSH
31077: CALL_OW 69
31081: ST_TO_ADDR
// if not tmp then
31082: LD_VAR 0 2
31086: NOT
31087: IFFALSE 31091
// exit ;
31089: GO 31253
// un := tmp [ rand ( 1 , tmp ) ] ;
31091: LD_ADDR_VAR 0 3
31095: PUSH
31096: LD_VAR 0 2
31100: PUSH
31101: LD_INT 1
31103: PPUSH
31104: LD_VAR 0 2
31108: PPUSH
31109: CALL_OW 12
31113: ARRAY
31114: ST_TO_ADDR
// if Crawls ( un ) then
31115: LD_VAR 0 3
31119: PPUSH
31120: CALL_OW 318
31124: IFFALSE 31135
// ComWalk ( un ) ;
31126: LD_VAR 0 3
31130: PPUSH
31131: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31135: LD_VAR 0 3
31139: PPUSH
31140: LD_INT 8
31142: PPUSH
31143: CALL_OW 336
// end ; 4 :
31147: GO 31253
31149: LD_INT 4
31151: DOUBLE
31152: EQUAL
31153: IFTRUE 31157
31155: GO 31231
31157: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31158: LD_ADDR_VAR 0 2
31162: PUSH
31163: LD_INT 22
31165: PUSH
31166: LD_OWVAR 2
31170: PUSH
31171: EMPTY
31172: LIST
31173: LIST
31174: PUSH
31175: LD_INT 30
31177: PUSH
31178: LD_INT 29
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: PUSH
31185: EMPTY
31186: LIST
31187: LIST
31188: PPUSH
31189: CALL_OW 69
31193: ST_TO_ADDR
// if not tmp then
31194: LD_VAR 0 2
31198: NOT
31199: IFFALSE 31203
// exit ;
31201: GO 31253
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31203: LD_VAR 0 2
31207: PUSH
31208: LD_INT 1
31210: ARRAY
31211: PPUSH
31212: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31216: LD_VAR 0 2
31220: PUSH
31221: LD_INT 1
31223: ARRAY
31224: PPUSH
31225: CALL_OW 65
// end ; 5 .. 7 :
31229: GO 31253
31231: LD_INT 5
31233: DOUBLE
31234: GREATEREQUAL
31235: IFFALSE 31243
31237: LD_INT 7
31239: DOUBLE
31240: LESSEQUAL
31241: IFTRUE 31245
31243: GO 31252
31245: POP
// StreamSibBomb ; end ;
31246: CALL 27490 0 0
31250: GO 31253
31252: POP
// end ;
31253: PPOPN 3
31255: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31256: LD_EXP 80
31260: PUSH
31261: LD_EXP 130
31265: AND
31266: IFFALSE 31422
31268: GO 31270
31270: DISABLE
31271: LD_INT 0
31273: PPUSH
31274: PPUSH
31275: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31276: LD_ADDR_VAR 0 2
31280: PUSH
31281: LD_INT 81
31283: PUSH
31284: LD_OWVAR 2
31288: PUSH
31289: EMPTY
31290: LIST
31291: LIST
31292: PUSH
31293: LD_INT 2
31295: PUSH
31296: LD_INT 21
31298: PUSH
31299: LD_INT 1
31301: PUSH
31302: EMPTY
31303: LIST
31304: LIST
31305: PUSH
31306: LD_INT 21
31308: PUSH
31309: LD_INT 2
31311: PUSH
31312: EMPTY
31313: LIST
31314: LIST
31315: PUSH
31316: EMPTY
31317: LIST
31318: LIST
31319: LIST
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: PPUSH
31325: CALL_OW 69
31329: ST_TO_ADDR
// if not tmp then
31330: LD_VAR 0 2
31334: NOT
31335: IFFALSE 31339
// exit ;
31337: GO 31422
// p := 0 ;
31339: LD_ADDR_VAR 0 3
31343: PUSH
31344: LD_INT 0
31346: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31347: LD_INT 35
31349: PPUSH
31350: CALL_OW 67
// p := p + 1 ;
31354: LD_ADDR_VAR 0 3
31358: PUSH
31359: LD_VAR 0 3
31363: PUSH
31364: LD_INT 1
31366: PLUS
31367: ST_TO_ADDR
// for i in tmp do
31368: LD_ADDR_VAR 0 1
31372: PUSH
31373: LD_VAR 0 2
31377: PUSH
31378: FOR_IN
31379: IFFALSE 31410
// if GetLives ( i ) < 1000 then
31381: LD_VAR 0 1
31385: PPUSH
31386: CALL_OW 256
31390: PUSH
31391: LD_INT 1000
31393: LESS
31394: IFFALSE 31408
// SetLives ( i , 1000 ) ;
31396: LD_VAR 0 1
31400: PPUSH
31401: LD_INT 1000
31403: PPUSH
31404: CALL_OW 234
31408: GO 31378
31410: POP
31411: POP
// until p > 20 ;
31412: LD_VAR 0 3
31416: PUSH
31417: LD_INT 20
31419: GREATER
31420: IFFALSE 31347
// end ;
31422: PPOPN 3
31424: END
// every 0 0$1 trigger StreamModeActive and sTime do
31425: LD_EXP 80
31429: PUSH
31430: LD_EXP 131
31434: AND
31435: IFFALSE 31470
31437: GO 31439
31439: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31440: LD_INT 28
31442: PPUSH
31443: LD_OWVAR 2
31447: PPUSH
31448: LD_INT 2
31450: PPUSH
31451: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31455: LD_INT 30
31457: PPUSH
31458: LD_OWVAR 2
31462: PPUSH
31463: LD_INT 2
31465: PPUSH
31466: CALL_OW 322
// end ;
31470: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31471: LD_EXP 80
31475: PUSH
31476: LD_EXP 132
31480: AND
31481: IFFALSE 31602
31483: GO 31485
31485: DISABLE
31486: LD_INT 0
31488: PPUSH
31489: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31490: LD_ADDR_VAR 0 2
31494: PUSH
31495: LD_INT 22
31497: PUSH
31498: LD_OWVAR 2
31502: PUSH
31503: EMPTY
31504: LIST
31505: LIST
31506: PUSH
31507: LD_INT 21
31509: PUSH
31510: LD_INT 1
31512: PUSH
31513: EMPTY
31514: LIST
31515: LIST
31516: PUSH
31517: LD_INT 3
31519: PUSH
31520: LD_INT 23
31522: PUSH
31523: LD_INT 0
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: LIST
31538: PPUSH
31539: CALL_OW 69
31543: ST_TO_ADDR
// if not tmp then
31544: LD_VAR 0 2
31548: NOT
31549: IFFALSE 31553
// exit ;
31551: GO 31602
// for i in tmp do
31553: LD_ADDR_VAR 0 1
31557: PUSH
31558: LD_VAR 0 2
31562: PUSH
31563: FOR_IN
31564: IFFALSE 31600
// begin if Crawls ( i ) then
31566: LD_VAR 0 1
31570: PPUSH
31571: CALL_OW 318
31575: IFFALSE 31586
// ComWalk ( i ) ;
31577: LD_VAR 0 1
31581: PPUSH
31582: CALL_OW 138
// SetClass ( i , 2 ) ;
31586: LD_VAR 0 1
31590: PPUSH
31591: LD_INT 2
31593: PPUSH
31594: CALL_OW 336
// end ;
31598: GO 31563
31600: POP
31601: POP
// end ;
31602: PPOPN 2
31604: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31605: LD_EXP 80
31609: PUSH
31610: LD_EXP 133
31614: AND
31615: IFFALSE 31903
31617: GO 31619
31619: DISABLE
31620: LD_INT 0
31622: PPUSH
31623: PPUSH
31624: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31625: LD_OWVAR 2
31629: PPUSH
31630: LD_INT 9
31632: PPUSH
31633: LD_INT 1
31635: PPUSH
31636: LD_INT 1
31638: PPUSH
31639: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31643: LD_INT 9
31645: PPUSH
31646: LD_OWVAR 2
31650: PPUSH
31651: CALL_OW 343
// uc_side := 9 ;
31655: LD_ADDR_OWVAR 20
31659: PUSH
31660: LD_INT 9
31662: ST_TO_ADDR
// uc_nation := 2 ;
31663: LD_ADDR_OWVAR 21
31667: PUSH
31668: LD_INT 2
31670: ST_TO_ADDR
// hc_name := Dark Warrior ;
31671: LD_ADDR_OWVAR 26
31675: PUSH
31676: LD_STRING Dark Warrior
31678: ST_TO_ADDR
// hc_gallery :=  ;
31679: LD_ADDR_OWVAR 33
31683: PUSH
31684: LD_STRING 
31686: ST_TO_ADDR
// hc_noskilllimit := true ;
31687: LD_ADDR_OWVAR 76
31691: PUSH
31692: LD_INT 1
31694: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31695: LD_ADDR_OWVAR 31
31699: PUSH
31700: LD_INT 30
31702: PUSH
31703: LD_INT 30
31705: PUSH
31706: LD_INT 30
31708: PUSH
31709: LD_INT 30
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: LIST
31716: LIST
31717: ST_TO_ADDR
// un := CreateHuman ;
31718: LD_ADDR_VAR 0 3
31722: PUSH
31723: CALL_OW 44
31727: ST_TO_ADDR
// hc_noskilllimit := false ;
31728: LD_ADDR_OWVAR 76
31732: PUSH
31733: LD_INT 0
31735: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31736: LD_VAR 0 3
31740: PPUSH
31741: LD_INT 1
31743: PPUSH
31744: CALL_OW 51
// ToLua ( playRanger() ) ;
31748: LD_STRING playRanger()
31750: PPUSH
31751: CALL_OW 559
// p := 0 ;
31755: LD_ADDR_VAR 0 2
31759: PUSH
31760: LD_INT 0
31762: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31763: LD_INT 35
31765: PPUSH
31766: CALL_OW 67
// p := p + 1 ;
31770: LD_ADDR_VAR 0 2
31774: PUSH
31775: LD_VAR 0 2
31779: PUSH
31780: LD_INT 1
31782: PLUS
31783: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31784: LD_VAR 0 3
31788: PPUSH
31789: CALL_OW 256
31793: PUSH
31794: LD_INT 1000
31796: LESS
31797: IFFALSE 31811
// SetLives ( un , 1000 ) ;
31799: LD_VAR 0 3
31803: PPUSH
31804: LD_INT 1000
31806: PPUSH
31807: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31811: LD_VAR 0 3
31815: PPUSH
31816: LD_INT 81
31818: PUSH
31819: LD_OWVAR 2
31823: PUSH
31824: EMPTY
31825: LIST
31826: LIST
31827: PUSH
31828: LD_INT 91
31830: PUSH
31831: LD_VAR 0 3
31835: PUSH
31836: LD_INT 30
31838: PUSH
31839: EMPTY
31840: LIST
31841: LIST
31842: LIST
31843: PUSH
31844: EMPTY
31845: LIST
31846: LIST
31847: PPUSH
31848: CALL_OW 69
31852: PPUSH
31853: LD_VAR 0 3
31857: PPUSH
31858: CALL_OW 74
31862: PPUSH
31863: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31867: LD_VAR 0 2
31871: PUSH
31872: LD_INT 80
31874: GREATER
31875: PUSH
31876: LD_VAR 0 3
31880: PPUSH
31881: CALL_OW 301
31885: OR
31886: IFFALSE 31763
// if un then
31888: LD_VAR 0 3
31892: IFFALSE 31903
// RemoveUnit ( un ) ;
31894: LD_VAR 0 3
31898: PPUSH
31899: CALL_OW 64
// end ;
31903: PPOPN 3
31905: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31906: LD_EXP 134
31910: IFFALSE 32026
31912: GO 31914
31914: DISABLE
31915: LD_INT 0
31917: PPUSH
31918: PPUSH
31919: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31920: LD_ADDR_VAR 0 2
31924: PUSH
31925: LD_INT 81
31927: PUSH
31928: LD_OWVAR 2
31932: PUSH
31933: EMPTY
31934: LIST
31935: LIST
31936: PUSH
31937: LD_INT 21
31939: PUSH
31940: LD_INT 1
31942: PUSH
31943: EMPTY
31944: LIST
31945: LIST
31946: PUSH
31947: EMPTY
31948: LIST
31949: LIST
31950: PPUSH
31951: CALL_OW 69
31955: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31956: LD_STRING playComputer()
31958: PPUSH
31959: CALL_OW 559
// if not tmp then
31963: LD_VAR 0 2
31967: NOT
31968: IFFALSE 31972
// exit ;
31970: GO 32026
// for i in tmp do
31972: LD_ADDR_VAR 0 1
31976: PUSH
31977: LD_VAR 0 2
31981: PUSH
31982: FOR_IN
31983: IFFALSE 32024
// for j := 1 to 4 do
31985: LD_ADDR_VAR 0 3
31989: PUSH
31990: DOUBLE
31991: LD_INT 1
31993: DEC
31994: ST_TO_ADDR
31995: LD_INT 4
31997: PUSH
31998: FOR_TO
31999: IFFALSE 32020
// SetSkill ( i , j , 10 ) ;
32001: LD_VAR 0 1
32005: PPUSH
32006: LD_VAR 0 3
32010: PPUSH
32011: LD_INT 10
32013: PPUSH
32014: CALL_OW 237
32018: GO 31998
32020: POP
32021: POP
32022: GO 31982
32024: POP
32025: POP
// end ;
32026: PPOPN 3
32028: END
// every 0 0$1 trigger s30 do var i , tmp ;
32029: LD_EXP 135
32033: IFFALSE 32102
32035: GO 32037
32037: DISABLE
32038: LD_INT 0
32040: PPUSH
32041: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32042: LD_ADDR_VAR 0 2
32046: PUSH
32047: LD_INT 22
32049: PUSH
32050: LD_OWVAR 2
32054: PUSH
32055: EMPTY
32056: LIST
32057: LIST
32058: PPUSH
32059: CALL_OW 69
32063: ST_TO_ADDR
// if not tmp then
32064: LD_VAR 0 2
32068: NOT
32069: IFFALSE 32073
// exit ;
32071: GO 32102
// for i in tmp do
32073: LD_ADDR_VAR 0 1
32077: PUSH
32078: LD_VAR 0 2
32082: PUSH
32083: FOR_IN
32084: IFFALSE 32100
// SetLives ( i , 300 ) ;
32086: LD_VAR 0 1
32090: PPUSH
32091: LD_INT 300
32093: PPUSH
32094: CALL_OW 234
32098: GO 32083
32100: POP
32101: POP
// end ;
32102: PPOPN 2
32104: END
// every 0 0$1 trigger s60 do var i , tmp ;
32105: LD_EXP 136
32109: IFFALSE 32178
32111: GO 32113
32113: DISABLE
32114: LD_INT 0
32116: PPUSH
32117: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32118: LD_ADDR_VAR 0 2
32122: PUSH
32123: LD_INT 22
32125: PUSH
32126: LD_OWVAR 2
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: PPUSH
32135: CALL_OW 69
32139: ST_TO_ADDR
// if not tmp then
32140: LD_VAR 0 2
32144: NOT
32145: IFFALSE 32149
// exit ;
32147: GO 32178
// for i in tmp do
32149: LD_ADDR_VAR 0 1
32153: PUSH
32154: LD_VAR 0 2
32158: PUSH
32159: FOR_IN
32160: IFFALSE 32176
// SetLives ( i , 600 ) ;
32162: LD_VAR 0 1
32166: PPUSH
32167: LD_INT 600
32169: PPUSH
32170: CALL_OW 234
32174: GO 32159
32176: POP
32177: POP
// end ;
32178: PPOPN 2
32180: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32181: LD_INT 0
32183: PPUSH
// case cmd of 301 :
32184: LD_VAR 0 1
32188: PUSH
32189: LD_INT 301
32191: DOUBLE
32192: EQUAL
32193: IFTRUE 32197
32195: GO 32229
32197: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32198: LD_VAR 0 6
32202: PPUSH
32203: LD_VAR 0 7
32207: PPUSH
32208: LD_VAR 0 8
32212: PPUSH
32213: LD_VAR 0 4
32217: PPUSH
32218: LD_VAR 0 5
32222: PPUSH
32223: CALL 33430 0 5
32227: GO 32350
32229: LD_INT 302
32231: DOUBLE
32232: EQUAL
32233: IFTRUE 32237
32235: GO 32274
32237: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32238: LD_VAR 0 6
32242: PPUSH
32243: LD_VAR 0 7
32247: PPUSH
32248: LD_VAR 0 8
32252: PPUSH
32253: LD_VAR 0 9
32257: PPUSH
32258: LD_VAR 0 4
32262: PPUSH
32263: LD_VAR 0 5
32267: PPUSH
32268: CALL 33521 0 6
32272: GO 32350
32274: LD_INT 303
32276: DOUBLE
32277: EQUAL
32278: IFTRUE 32282
32280: GO 32319
32282: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32283: LD_VAR 0 6
32287: PPUSH
32288: LD_VAR 0 7
32292: PPUSH
32293: LD_VAR 0 8
32297: PPUSH
32298: LD_VAR 0 9
32302: PPUSH
32303: LD_VAR 0 4
32307: PPUSH
32308: LD_VAR 0 5
32312: PPUSH
32313: CALL 32355 0 6
32317: GO 32350
32319: LD_INT 304
32321: DOUBLE
32322: EQUAL
32323: IFTRUE 32327
32325: GO 32349
32327: POP
// hHackTeleport ( unit , x , y ) ; end ;
32328: LD_VAR 0 2
32332: PPUSH
32333: LD_VAR 0 4
32337: PPUSH
32338: LD_VAR 0 5
32342: PPUSH
32343: CALL 34114 0 3
32347: GO 32350
32349: POP
// end ;
32350: LD_VAR 0 12
32354: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32355: LD_INT 0
32357: PPUSH
32358: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32359: LD_VAR 0 1
32363: PUSH
32364: LD_INT 1
32366: LESS
32367: PUSH
32368: LD_VAR 0 1
32372: PUSH
32373: LD_INT 3
32375: GREATER
32376: OR
32377: PUSH
32378: LD_VAR 0 5
32382: PPUSH
32383: LD_VAR 0 6
32387: PPUSH
32388: CALL_OW 428
32392: OR
32393: IFFALSE 32397
// exit ;
32395: GO 33117
// uc_side := your_side ;
32397: LD_ADDR_OWVAR 20
32401: PUSH
32402: LD_OWVAR 2
32406: ST_TO_ADDR
// uc_nation := nation ;
32407: LD_ADDR_OWVAR 21
32411: PUSH
32412: LD_VAR 0 1
32416: ST_TO_ADDR
// bc_level = 1 ;
32417: LD_ADDR_OWVAR 43
32421: PUSH
32422: LD_INT 1
32424: ST_TO_ADDR
// case btype of 1 :
32425: LD_VAR 0 2
32429: PUSH
32430: LD_INT 1
32432: DOUBLE
32433: EQUAL
32434: IFTRUE 32438
32436: GO 32449
32438: POP
// bc_type := b_depot ; 2 :
32439: LD_ADDR_OWVAR 42
32443: PUSH
32444: LD_INT 0
32446: ST_TO_ADDR
32447: GO 33061
32449: LD_INT 2
32451: DOUBLE
32452: EQUAL
32453: IFTRUE 32457
32455: GO 32468
32457: POP
// bc_type := b_warehouse ; 3 :
32458: LD_ADDR_OWVAR 42
32462: PUSH
32463: LD_INT 1
32465: ST_TO_ADDR
32466: GO 33061
32468: LD_INT 3
32470: DOUBLE
32471: EQUAL
32472: IFTRUE 32476
32474: GO 32487
32476: POP
// bc_type := b_lab ; 4 .. 9 :
32477: LD_ADDR_OWVAR 42
32481: PUSH
32482: LD_INT 6
32484: ST_TO_ADDR
32485: GO 33061
32487: LD_INT 4
32489: DOUBLE
32490: GREATEREQUAL
32491: IFFALSE 32499
32493: LD_INT 9
32495: DOUBLE
32496: LESSEQUAL
32497: IFTRUE 32501
32499: GO 32553
32501: POP
// begin bc_type := b_lab_half ;
32502: LD_ADDR_OWVAR 42
32506: PUSH
32507: LD_INT 7
32509: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32510: LD_ADDR_OWVAR 44
32514: PUSH
32515: LD_INT 10
32517: PUSH
32518: LD_INT 11
32520: PUSH
32521: LD_INT 12
32523: PUSH
32524: LD_INT 15
32526: PUSH
32527: LD_INT 14
32529: PUSH
32530: LD_INT 13
32532: PUSH
32533: EMPTY
32534: LIST
32535: LIST
32536: LIST
32537: LIST
32538: LIST
32539: LIST
32540: PUSH
32541: LD_VAR 0 2
32545: PUSH
32546: LD_INT 3
32548: MINUS
32549: ARRAY
32550: ST_TO_ADDR
// end ; 10 .. 13 :
32551: GO 33061
32553: LD_INT 10
32555: DOUBLE
32556: GREATEREQUAL
32557: IFFALSE 32565
32559: LD_INT 13
32561: DOUBLE
32562: LESSEQUAL
32563: IFTRUE 32567
32565: GO 32644
32567: POP
// begin bc_type := b_lab_full ;
32568: LD_ADDR_OWVAR 42
32572: PUSH
32573: LD_INT 8
32575: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32576: LD_ADDR_OWVAR 44
32580: PUSH
32581: LD_INT 10
32583: PUSH
32584: LD_INT 12
32586: PUSH
32587: LD_INT 14
32589: PUSH
32590: LD_INT 13
32592: PUSH
32593: EMPTY
32594: LIST
32595: LIST
32596: LIST
32597: LIST
32598: PUSH
32599: LD_VAR 0 2
32603: PUSH
32604: LD_INT 9
32606: MINUS
32607: ARRAY
32608: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32609: LD_ADDR_OWVAR 45
32613: PUSH
32614: LD_INT 11
32616: PUSH
32617: LD_INT 15
32619: PUSH
32620: LD_INT 12
32622: PUSH
32623: LD_INT 15
32625: PUSH
32626: EMPTY
32627: LIST
32628: LIST
32629: LIST
32630: LIST
32631: PUSH
32632: LD_VAR 0 2
32636: PUSH
32637: LD_INT 9
32639: MINUS
32640: ARRAY
32641: ST_TO_ADDR
// end ; 14 :
32642: GO 33061
32644: LD_INT 14
32646: DOUBLE
32647: EQUAL
32648: IFTRUE 32652
32650: GO 32663
32652: POP
// bc_type := b_workshop ; 15 :
32653: LD_ADDR_OWVAR 42
32657: PUSH
32658: LD_INT 2
32660: ST_TO_ADDR
32661: GO 33061
32663: LD_INT 15
32665: DOUBLE
32666: EQUAL
32667: IFTRUE 32671
32669: GO 32682
32671: POP
// bc_type := b_factory ; 16 :
32672: LD_ADDR_OWVAR 42
32676: PUSH
32677: LD_INT 3
32679: ST_TO_ADDR
32680: GO 33061
32682: LD_INT 16
32684: DOUBLE
32685: EQUAL
32686: IFTRUE 32690
32688: GO 32701
32690: POP
// bc_type := b_ext_gun ; 17 :
32691: LD_ADDR_OWVAR 42
32695: PUSH
32696: LD_INT 17
32698: ST_TO_ADDR
32699: GO 33061
32701: LD_INT 17
32703: DOUBLE
32704: EQUAL
32705: IFTRUE 32709
32707: GO 32737
32709: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32710: LD_ADDR_OWVAR 42
32714: PUSH
32715: LD_INT 19
32717: PUSH
32718: LD_INT 23
32720: PUSH
32721: LD_INT 19
32723: PUSH
32724: EMPTY
32725: LIST
32726: LIST
32727: LIST
32728: PUSH
32729: LD_VAR 0 1
32733: ARRAY
32734: ST_TO_ADDR
32735: GO 33061
32737: LD_INT 18
32739: DOUBLE
32740: EQUAL
32741: IFTRUE 32745
32743: GO 32756
32745: POP
// bc_type := b_ext_radar ; 19 :
32746: LD_ADDR_OWVAR 42
32750: PUSH
32751: LD_INT 20
32753: ST_TO_ADDR
32754: GO 33061
32756: LD_INT 19
32758: DOUBLE
32759: EQUAL
32760: IFTRUE 32764
32762: GO 32775
32764: POP
// bc_type := b_ext_radio ; 20 :
32765: LD_ADDR_OWVAR 42
32769: PUSH
32770: LD_INT 22
32772: ST_TO_ADDR
32773: GO 33061
32775: LD_INT 20
32777: DOUBLE
32778: EQUAL
32779: IFTRUE 32783
32781: GO 32794
32783: POP
// bc_type := b_ext_siberium ; 21 :
32784: LD_ADDR_OWVAR 42
32788: PUSH
32789: LD_INT 21
32791: ST_TO_ADDR
32792: GO 33061
32794: LD_INT 21
32796: DOUBLE
32797: EQUAL
32798: IFTRUE 32802
32800: GO 32813
32802: POP
// bc_type := b_ext_computer ; 22 :
32803: LD_ADDR_OWVAR 42
32807: PUSH
32808: LD_INT 24
32810: ST_TO_ADDR
32811: GO 33061
32813: LD_INT 22
32815: DOUBLE
32816: EQUAL
32817: IFTRUE 32821
32819: GO 32832
32821: POP
// bc_type := b_ext_track ; 23 :
32822: LD_ADDR_OWVAR 42
32826: PUSH
32827: LD_INT 16
32829: ST_TO_ADDR
32830: GO 33061
32832: LD_INT 23
32834: DOUBLE
32835: EQUAL
32836: IFTRUE 32840
32838: GO 32851
32840: POP
// bc_type := b_ext_laser ; 24 :
32841: LD_ADDR_OWVAR 42
32845: PUSH
32846: LD_INT 25
32848: ST_TO_ADDR
32849: GO 33061
32851: LD_INT 24
32853: DOUBLE
32854: EQUAL
32855: IFTRUE 32859
32857: GO 32870
32859: POP
// bc_type := b_control_tower ; 25 :
32860: LD_ADDR_OWVAR 42
32864: PUSH
32865: LD_INT 36
32867: ST_TO_ADDR
32868: GO 33061
32870: LD_INT 25
32872: DOUBLE
32873: EQUAL
32874: IFTRUE 32878
32876: GO 32889
32878: POP
// bc_type := b_breastwork ; 26 :
32879: LD_ADDR_OWVAR 42
32883: PUSH
32884: LD_INT 31
32886: ST_TO_ADDR
32887: GO 33061
32889: LD_INT 26
32891: DOUBLE
32892: EQUAL
32893: IFTRUE 32897
32895: GO 32908
32897: POP
// bc_type := b_bunker ; 27 :
32898: LD_ADDR_OWVAR 42
32902: PUSH
32903: LD_INT 32
32905: ST_TO_ADDR
32906: GO 33061
32908: LD_INT 27
32910: DOUBLE
32911: EQUAL
32912: IFTRUE 32916
32914: GO 32927
32916: POP
// bc_type := b_turret ; 28 :
32917: LD_ADDR_OWVAR 42
32921: PUSH
32922: LD_INT 33
32924: ST_TO_ADDR
32925: GO 33061
32927: LD_INT 28
32929: DOUBLE
32930: EQUAL
32931: IFTRUE 32935
32933: GO 32946
32935: POP
// bc_type := b_armoury ; 29 :
32936: LD_ADDR_OWVAR 42
32940: PUSH
32941: LD_INT 4
32943: ST_TO_ADDR
32944: GO 33061
32946: LD_INT 29
32948: DOUBLE
32949: EQUAL
32950: IFTRUE 32954
32952: GO 32965
32954: POP
// bc_type := b_barracks ; 30 :
32955: LD_ADDR_OWVAR 42
32959: PUSH
32960: LD_INT 5
32962: ST_TO_ADDR
32963: GO 33061
32965: LD_INT 30
32967: DOUBLE
32968: EQUAL
32969: IFTRUE 32973
32971: GO 32984
32973: POP
// bc_type := b_solar_power ; 31 :
32974: LD_ADDR_OWVAR 42
32978: PUSH
32979: LD_INT 27
32981: ST_TO_ADDR
32982: GO 33061
32984: LD_INT 31
32986: DOUBLE
32987: EQUAL
32988: IFTRUE 32992
32990: GO 33003
32992: POP
// bc_type := b_oil_power ; 32 :
32993: LD_ADDR_OWVAR 42
32997: PUSH
32998: LD_INT 26
33000: ST_TO_ADDR
33001: GO 33061
33003: LD_INT 32
33005: DOUBLE
33006: EQUAL
33007: IFTRUE 33011
33009: GO 33022
33011: POP
// bc_type := b_siberite_power ; 33 :
33012: LD_ADDR_OWVAR 42
33016: PUSH
33017: LD_INT 28
33019: ST_TO_ADDR
33020: GO 33061
33022: LD_INT 33
33024: DOUBLE
33025: EQUAL
33026: IFTRUE 33030
33028: GO 33041
33030: POP
// bc_type := b_oil_mine ; 34 :
33031: LD_ADDR_OWVAR 42
33035: PUSH
33036: LD_INT 29
33038: ST_TO_ADDR
33039: GO 33061
33041: LD_INT 34
33043: DOUBLE
33044: EQUAL
33045: IFTRUE 33049
33047: GO 33060
33049: POP
// bc_type := b_siberite_mine ; end ;
33050: LD_ADDR_OWVAR 42
33054: PUSH
33055: LD_INT 30
33057: ST_TO_ADDR
33058: GO 33061
33060: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33061: LD_ADDR_VAR 0 8
33065: PUSH
33066: LD_VAR 0 5
33070: PPUSH
33071: LD_VAR 0 6
33075: PPUSH
33076: LD_VAR 0 3
33080: PPUSH
33081: CALL_OW 47
33085: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33086: LD_OWVAR 42
33090: PUSH
33091: LD_INT 32
33093: PUSH
33094: LD_INT 33
33096: PUSH
33097: EMPTY
33098: LIST
33099: LIST
33100: IN
33101: IFFALSE 33117
// PlaceWeaponTurret ( b , weapon ) ;
33103: LD_VAR 0 8
33107: PPUSH
33108: LD_VAR 0 4
33112: PPUSH
33113: CALL_OW 431
// end ;
33117: LD_VAR 0 7
33121: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33122: LD_INT 0
33124: PPUSH
33125: PPUSH
33126: PPUSH
33127: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33128: LD_ADDR_VAR 0 4
33132: PUSH
33133: LD_INT 22
33135: PUSH
33136: LD_OWVAR 2
33140: PUSH
33141: EMPTY
33142: LIST
33143: LIST
33144: PUSH
33145: LD_INT 2
33147: PUSH
33148: LD_INT 30
33150: PUSH
33151: LD_INT 0
33153: PUSH
33154: EMPTY
33155: LIST
33156: LIST
33157: PUSH
33158: LD_INT 30
33160: PUSH
33161: LD_INT 1
33163: PUSH
33164: EMPTY
33165: LIST
33166: LIST
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: LIST
33172: PUSH
33173: EMPTY
33174: LIST
33175: LIST
33176: PPUSH
33177: CALL_OW 69
33181: ST_TO_ADDR
// if not tmp then
33182: LD_VAR 0 4
33186: NOT
33187: IFFALSE 33191
// exit ;
33189: GO 33250
// for i in tmp do
33191: LD_ADDR_VAR 0 2
33195: PUSH
33196: LD_VAR 0 4
33200: PUSH
33201: FOR_IN
33202: IFFALSE 33248
// for j = 1 to 3 do
33204: LD_ADDR_VAR 0 3
33208: PUSH
33209: DOUBLE
33210: LD_INT 1
33212: DEC
33213: ST_TO_ADDR
33214: LD_INT 3
33216: PUSH
33217: FOR_TO
33218: IFFALSE 33244
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33220: LD_VAR 0 2
33224: PPUSH
33225: CALL_OW 274
33229: PPUSH
33230: LD_VAR 0 3
33234: PPUSH
33235: LD_INT 99999
33237: PPUSH
33238: CALL_OW 277
33242: GO 33217
33244: POP
33245: POP
33246: GO 33201
33248: POP
33249: POP
// end ;
33250: LD_VAR 0 1
33254: RET
// export function hHackSetLevel10 ; var i , j ; begin
33255: LD_INT 0
33257: PPUSH
33258: PPUSH
33259: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33260: LD_ADDR_VAR 0 2
33264: PUSH
33265: LD_INT 21
33267: PUSH
33268: LD_INT 1
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: PPUSH
33275: CALL_OW 69
33279: PUSH
33280: FOR_IN
33281: IFFALSE 33333
// if IsSelected ( i ) then
33283: LD_VAR 0 2
33287: PPUSH
33288: CALL_OW 306
33292: IFFALSE 33331
// begin for j := 1 to 4 do
33294: LD_ADDR_VAR 0 3
33298: PUSH
33299: DOUBLE
33300: LD_INT 1
33302: DEC
33303: ST_TO_ADDR
33304: LD_INT 4
33306: PUSH
33307: FOR_TO
33308: IFFALSE 33329
// SetSkill ( i , j , 10 ) ;
33310: LD_VAR 0 2
33314: PPUSH
33315: LD_VAR 0 3
33319: PPUSH
33320: LD_INT 10
33322: PPUSH
33323: CALL_OW 237
33327: GO 33307
33329: POP
33330: POP
// end ;
33331: GO 33280
33333: POP
33334: POP
// end ;
33335: LD_VAR 0 1
33339: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33340: LD_INT 0
33342: PPUSH
33343: PPUSH
33344: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33345: LD_ADDR_VAR 0 2
33349: PUSH
33350: LD_INT 22
33352: PUSH
33353: LD_OWVAR 2
33357: PUSH
33358: EMPTY
33359: LIST
33360: LIST
33361: PUSH
33362: LD_INT 21
33364: PUSH
33365: LD_INT 1
33367: PUSH
33368: EMPTY
33369: LIST
33370: LIST
33371: PUSH
33372: EMPTY
33373: LIST
33374: LIST
33375: PPUSH
33376: CALL_OW 69
33380: PUSH
33381: FOR_IN
33382: IFFALSE 33423
// begin for j := 1 to 4 do
33384: LD_ADDR_VAR 0 3
33388: PUSH
33389: DOUBLE
33390: LD_INT 1
33392: DEC
33393: ST_TO_ADDR
33394: LD_INT 4
33396: PUSH
33397: FOR_TO
33398: IFFALSE 33419
// SetSkill ( i , j , 10 ) ;
33400: LD_VAR 0 2
33404: PPUSH
33405: LD_VAR 0 3
33409: PPUSH
33410: LD_INT 10
33412: PPUSH
33413: CALL_OW 237
33417: GO 33397
33419: POP
33420: POP
// end ;
33421: GO 33381
33423: POP
33424: POP
// end ;
33425: LD_VAR 0 1
33429: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33430: LD_INT 0
33432: PPUSH
// uc_side := your_side ;
33433: LD_ADDR_OWVAR 20
33437: PUSH
33438: LD_OWVAR 2
33442: ST_TO_ADDR
// uc_nation := nation ;
33443: LD_ADDR_OWVAR 21
33447: PUSH
33448: LD_VAR 0 1
33452: ST_TO_ADDR
// InitHc ;
33453: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33457: LD_INT 0
33459: PPUSH
33460: LD_VAR 0 2
33464: PPUSH
33465: LD_VAR 0 3
33469: PPUSH
33470: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33474: LD_VAR 0 4
33478: PPUSH
33479: LD_VAR 0 5
33483: PPUSH
33484: CALL_OW 428
33488: PUSH
33489: LD_INT 0
33491: EQUAL
33492: IFFALSE 33516
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33494: CALL_OW 44
33498: PPUSH
33499: LD_VAR 0 4
33503: PPUSH
33504: LD_VAR 0 5
33508: PPUSH
33509: LD_INT 1
33511: PPUSH
33512: CALL_OW 48
// end ;
33516: LD_VAR 0 6
33520: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33521: LD_INT 0
33523: PPUSH
33524: PPUSH
// uc_side := your_side ;
33525: LD_ADDR_OWVAR 20
33529: PUSH
33530: LD_OWVAR 2
33534: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33535: LD_VAR 0 1
33539: PUSH
33540: LD_INT 1
33542: PUSH
33543: LD_INT 2
33545: PUSH
33546: LD_INT 3
33548: PUSH
33549: LD_INT 4
33551: PUSH
33552: LD_INT 5
33554: PUSH
33555: EMPTY
33556: LIST
33557: LIST
33558: LIST
33559: LIST
33560: LIST
33561: IN
33562: IFFALSE 33574
// uc_nation := nation_american else
33564: LD_ADDR_OWVAR 21
33568: PUSH
33569: LD_INT 1
33571: ST_TO_ADDR
33572: GO 33617
// if chassis in [ 11 , 12 , 13 , 14 ] then
33574: LD_VAR 0 1
33578: PUSH
33579: LD_INT 11
33581: PUSH
33582: LD_INT 12
33584: PUSH
33585: LD_INT 13
33587: PUSH
33588: LD_INT 14
33590: PUSH
33591: EMPTY
33592: LIST
33593: LIST
33594: LIST
33595: LIST
33596: IN
33597: IFFALSE 33609
// uc_nation := nation_arabian else
33599: LD_ADDR_OWVAR 21
33603: PUSH
33604: LD_INT 2
33606: ST_TO_ADDR
33607: GO 33617
// uc_nation := nation_russian ;
33609: LD_ADDR_OWVAR 21
33613: PUSH
33614: LD_INT 3
33616: ST_TO_ADDR
// vc_chassis := chassis ;
33617: LD_ADDR_OWVAR 37
33621: PUSH
33622: LD_VAR 0 1
33626: ST_TO_ADDR
// vc_engine := engine ;
33627: LD_ADDR_OWVAR 39
33631: PUSH
33632: LD_VAR 0 2
33636: ST_TO_ADDR
// vc_control := control ;
33637: LD_ADDR_OWVAR 38
33641: PUSH
33642: LD_VAR 0 3
33646: ST_TO_ADDR
// vc_weapon := weapon ;
33647: LD_ADDR_OWVAR 40
33651: PUSH
33652: LD_VAR 0 4
33656: ST_TO_ADDR
// un := CreateVehicle ;
33657: LD_ADDR_VAR 0 8
33661: PUSH
33662: CALL_OW 45
33666: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33667: LD_VAR 0 8
33671: PPUSH
33672: LD_INT 0
33674: PPUSH
33675: LD_INT 5
33677: PPUSH
33678: CALL_OW 12
33682: PPUSH
33683: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33687: LD_VAR 0 8
33691: PPUSH
33692: LD_VAR 0 5
33696: PPUSH
33697: LD_VAR 0 6
33701: PPUSH
33702: LD_INT 1
33704: PPUSH
33705: CALL_OW 48
// end ;
33709: LD_VAR 0 7
33713: RET
// export hInvincible ; every 1 do
33714: GO 33716
33716: DISABLE
// hInvincible := [ ] ;
33717: LD_ADDR_EXP 137
33721: PUSH
33722: EMPTY
33723: ST_TO_ADDR
33724: END
// every 10 do var i ;
33725: GO 33727
33727: DISABLE
33728: LD_INT 0
33730: PPUSH
// begin enable ;
33731: ENABLE
// if not hInvincible then
33732: LD_EXP 137
33736: NOT
33737: IFFALSE 33741
// exit ;
33739: GO 33785
// for i in hInvincible do
33741: LD_ADDR_VAR 0 1
33745: PUSH
33746: LD_EXP 137
33750: PUSH
33751: FOR_IN
33752: IFFALSE 33783
// if GetLives ( i ) < 1000 then
33754: LD_VAR 0 1
33758: PPUSH
33759: CALL_OW 256
33763: PUSH
33764: LD_INT 1000
33766: LESS
33767: IFFALSE 33781
// SetLives ( i , 1000 ) ;
33769: LD_VAR 0 1
33773: PPUSH
33774: LD_INT 1000
33776: PPUSH
33777: CALL_OW 234
33781: GO 33751
33783: POP
33784: POP
// end ;
33785: PPOPN 1
33787: END
// export function hHackInvincible ; var i ; begin
33788: LD_INT 0
33790: PPUSH
33791: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33792: LD_ADDR_VAR 0 2
33796: PUSH
33797: LD_INT 2
33799: PUSH
33800: LD_INT 21
33802: PUSH
33803: LD_INT 1
33805: PUSH
33806: EMPTY
33807: LIST
33808: LIST
33809: PUSH
33810: LD_INT 21
33812: PUSH
33813: LD_INT 2
33815: PUSH
33816: EMPTY
33817: LIST
33818: LIST
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: LIST
33824: PPUSH
33825: CALL_OW 69
33829: PUSH
33830: FOR_IN
33831: IFFALSE 33892
// if IsSelected ( i ) then
33833: LD_VAR 0 2
33837: PPUSH
33838: CALL_OW 306
33842: IFFALSE 33890
// begin if i in hInvincible then
33844: LD_VAR 0 2
33848: PUSH
33849: LD_EXP 137
33853: IN
33854: IFFALSE 33874
// hInvincible := hInvincible diff i else
33856: LD_ADDR_EXP 137
33860: PUSH
33861: LD_EXP 137
33865: PUSH
33866: LD_VAR 0 2
33870: DIFF
33871: ST_TO_ADDR
33872: GO 33890
// hInvincible := hInvincible union i ;
33874: LD_ADDR_EXP 137
33878: PUSH
33879: LD_EXP 137
33883: PUSH
33884: LD_VAR 0 2
33888: UNION
33889: ST_TO_ADDR
// end ;
33890: GO 33830
33892: POP
33893: POP
// end ;
33894: LD_VAR 0 1
33898: RET
// export function hHackInvisible ; var i , j ; begin
33899: LD_INT 0
33901: PPUSH
33902: PPUSH
33903: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33904: LD_ADDR_VAR 0 2
33908: PUSH
33909: LD_INT 21
33911: PUSH
33912: LD_INT 1
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: PPUSH
33919: CALL_OW 69
33923: PUSH
33924: FOR_IN
33925: IFFALSE 33949
// if IsSelected ( i ) then
33927: LD_VAR 0 2
33931: PPUSH
33932: CALL_OW 306
33936: IFFALSE 33947
// ComForceInvisible ( i ) ;
33938: LD_VAR 0 2
33942: PPUSH
33943: CALL_OW 496
33947: GO 33924
33949: POP
33950: POP
// end ;
33951: LD_VAR 0 1
33955: RET
// export function hHackChangeYourSide ; begin
33956: LD_INT 0
33958: PPUSH
// if your_side = 8 then
33959: LD_OWVAR 2
33963: PUSH
33964: LD_INT 8
33966: EQUAL
33967: IFFALSE 33979
// your_side := 0 else
33969: LD_ADDR_OWVAR 2
33973: PUSH
33974: LD_INT 0
33976: ST_TO_ADDR
33977: GO 33993
// your_side := your_side + 1 ;
33979: LD_ADDR_OWVAR 2
33983: PUSH
33984: LD_OWVAR 2
33988: PUSH
33989: LD_INT 1
33991: PLUS
33992: ST_TO_ADDR
// end ;
33993: LD_VAR 0 1
33997: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33998: LD_INT 0
34000: PPUSH
34001: PPUSH
34002: PPUSH
// for i in all_units do
34003: LD_ADDR_VAR 0 2
34007: PUSH
34008: LD_OWVAR 3
34012: PUSH
34013: FOR_IN
34014: IFFALSE 34092
// if IsSelected ( i ) then
34016: LD_VAR 0 2
34020: PPUSH
34021: CALL_OW 306
34025: IFFALSE 34090
// begin j := GetSide ( i ) ;
34027: LD_ADDR_VAR 0 3
34031: PUSH
34032: LD_VAR 0 2
34036: PPUSH
34037: CALL_OW 255
34041: ST_TO_ADDR
// if j = 8 then
34042: LD_VAR 0 3
34046: PUSH
34047: LD_INT 8
34049: EQUAL
34050: IFFALSE 34062
// j := 0 else
34052: LD_ADDR_VAR 0 3
34056: PUSH
34057: LD_INT 0
34059: ST_TO_ADDR
34060: GO 34076
// j := j + 1 ;
34062: LD_ADDR_VAR 0 3
34066: PUSH
34067: LD_VAR 0 3
34071: PUSH
34072: LD_INT 1
34074: PLUS
34075: ST_TO_ADDR
// SetSide ( i , j ) ;
34076: LD_VAR 0 2
34080: PPUSH
34081: LD_VAR 0 3
34085: PPUSH
34086: CALL_OW 235
// end ;
34090: GO 34013
34092: POP
34093: POP
// end ;
34094: LD_VAR 0 1
34098: RET
// export function hHackFog ; begin
34099: LD_INT 0
34101: PPUSH
// FogOff ( true ) ;
34102: LD_INT 1
34104: PPUSH
34105: CALL_OW 344
// end ;
34109: LD_VAR 0 1
34113: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34114: LD_INT 0
34116: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34117: LD_VAR 0 1
34121: PPUSH
34122: LD_VAR 0 2
34126: PPUSH
34127: LD_VAR 0 3
34131: PPUSH
34132: LD_INT 1
34134: PPUSH
34135: LD_INT 1
34137: PPUSH
34138: CALL_OW 483
// CenterOnXY ( x , y ) ;
34142: LD_VAR 0 2
34146: PPUSH
34147: LD_VAR 0 3
34151: PPUSH
34152: CALL_OW 84
// end ; end_of_file
34156: LD_VAR 0 4
34160: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
34161: LD_INT 0
34163: PPUSH
34164: PPUSH
34165: PPUSH
34166: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
34167: LD_VAR 0 1
34171: PPUSH
34172: CALL_OW 264
34176: PUSH
34177: LD_EXP 64
34181: EQUAL
34182: IFFALSE 34254
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
34184: LD_INT 68
34186: PPUSH
34187: LD_VAR 0 1
34191: PPUSH
34192: CALL_OW 255
34196: PPUSH
34197: CALL_OW 321
34201: PUSH
34202: LD_INT 2
34204: EQUAL
34205: IFFALSE 34217
// eff := 70 else
34207: LD_ADDR_VAR 0 4
34211: PUSH
34212: LD_INT 70
34214: ST_TO_ADDR
34215: GO 34225
// eff := 30 ;
34217: LD_ADDR_VAR 0 4
34221: PUSH
34222: LD_INT 30
34224: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
34225: LD_VAR 0 1
34229: PPUSH
34230: CALL_OW 250
34234: PPUSH
34235: LD_VAR 0 1
34239: PPUSH
34240: CALL_OW 251
34244: PPUSH
34245: LD_VAR 0 4
34249: PPUSH
34250: CALL_OW 495
// end ; end ;
34254: LD_VAR 0 2
34258: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
34259: LD_INT 0
34261: PPUSH
// end ;
34262: LD_VAR 0 4
34266: RET
// export function SOS_Command ( cmd ) ; begin
34267: LD_INT 0
34269: PPUSH
// end ;
34270: LD_VAR 0 2
34274: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
34275: LD_INT 0
34277: PPUSH
// end ;
34278: LD_VAR 0 6
34282: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
34283: LD_INT 0
34285: PPUSH
34286: PPUSH
// if not vehicle or not factory then
34287: LD_VAR 0 1
34291: NOT
34292: PUSH
34293: LD_VAR 0 2
34297: NOT
34298: OR
34299: IFFALSE 34303
// exit ;
34301: GO 34534
// if factoryWaypoints >= factory then
34303: LD_EXP 138
34307: PUSH
34308: LD_VAR 0 2
34312: GREATEREQUAL
34313: IFFALSE 34534
// if factoryWaypoints [ factory ] then
34315: LD_EXP 138
34319: PUSH
34320: LD_VAR 0 2
34324: ARRAY
34325: IFFALSE 34534
// begin if GetControl ( vehicle ) = control_manual then
34327: LD_VAR 0 1
34331: PPUSH
34332: CALL_OW 263
34336: PUSH
34337: LD_INT 1
34339: EQUAL
34340: IFFALSE 34421
// begin driver := IsDrivenBy ( vehicle ) ;
34342: LD_ADDR_VAR 0 4
34346: PUSH
34347: LD_VAR 0 1
34351: PPUSH
34352: CALL_OW 311
34356: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34357: LD_VAR 0 4
34361: PPUSH
34362: LD_EXP 138
34366: PUSH
34367: LD_VAR 0 2
34371: ARRAY
34372: PUSH
34373: LD_INT 3
34375: ARRAY
34376: PPUSH
34377: LD_EXP 138
34381: PUSH
34382: LD_VAR 0 2
34386: ARRAY
34387: PUSH
34388: LD_INT 4
34390: ARRAY
34391: PPUSH
34392: CALL_OW 171
// AddComExitVehicle ( driver ) ;
34396: LD_VAR 0 4
34400: PPUSH
34401: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
34405: LD_VAR 0 4
34409: PPUSH
34410: LD_VAR 0 2
34414: PPUSH
34415: CALL_OW 180
// end else
34419: GO 34534
// if GetControl ( vehicle ) = control_remote then
34421: LD_VAR 0 1
34425: PPUSH
34426: CALL_OW 263
34430: PUSH
34431: LD_INT 2
34433: EQUAL
34434: IFFALSE 34495
// begin wait ( 0 0$2 ) ;
34436: LD_INT 70
34438: PPUSH
34439: CALL_OW 67
// if Connect ( vehicle ) then
34443: LD_VAR 0 1
34447: PPUSH
34448: CALL 46758 0 1
34452: IFFALSE 34493
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34454: LD_VAR 0 1
34458: PPUSH
34459: LD_EXP 138
34463: PUSH
34464: LD_VAR 0 2
34468: ARRAY
34469: PUSH
34470: LD_INT 3
34472: ARRAY
34473: PPUSH
34474: LD_EXP 138
34478: PUSH
34479: LD_VAR 0 2
34483: ARRAY
34484: PUSH
34485: LD_INT 4
34487: ARRAY
34488: PPUSH
34489: CALL_OW 171
// end else
34493: GO 34534
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34495: LD_VAR 0 1
34499: PPUSH
34500: LD_EXP 138
34504: PUSH
34505: LD_VAR 0 2
34509: ARRAY
34510: PUSH
34511: LD_INT 3
34513: ARRAY
34514: PPUSH
34515: LD_EXP 138
34519: PUSH
34520: LD_VAR 0 2
34524: ARRAY
34525: PUSH
34526: LD_INT 4
34528: ARRAY
34529: PPUSH
34530: CALL_OW 171
// end ; end ;
34534: LD_VAR 0 3
34538: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
34539: LD_INT 0
34541: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
34542: LD_VAR 0 1
34546: PUSH
34547: LD_INT 250
34549: EQUAL
34550: PUSH
34551: LD_VAR 0 2
34555: PPUSH
34556: CALL_OW 264
34560: PUSH
34561: LD_EXP 67
34565: EQUAL
34566: AND
34567: IFFALSE 34588
// MinerPlaceMine ( unit , x , y ) ;
34569: LD_VAR 0 2
34573: PPUSH
34574: LD_VAR 0 4
34578: PPUSH
34579: LD_VAR 0 5
34583: PPUSH
34584: CALL 37316 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
34588: LD_VAR 0 1
34592: PUSH
34593: LD_INT 251
34595: EQUAL
34596: PUSH
34597: LD_VAR 0 2
34601: PPUSH
34602: CALL_OW 264
34606: PUSH
34607: LD_EXP 67
34611: EQUAL
34612: AND
34613: IFFALSE 34634
// MinerDetonateMine ( unit , x , y ) ;
34615: LD_VAR 0 2
34619: PPUSH
34620: LD_VAR 0 4
34624: PPUSH
34625: LD_VAR 0 5
34629: PPUSH
34630: CALL 37593 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
34634: LD_VAR 0 1
34638: PUSH
34639: LD_INT 252
34641: EQUAL
34642: PUSH
34643: LD_VAR 0 2
34647: PPUSH
34648: CALL_OW 264
34652: PUSH
34653: LD_EXP 67
34657: EQUAL
34658: AND
34659: IFFALSE 34680
// MinerCreateMinefield ( unit , x , y ) ;
34661: LD_VAR 0 2
34665: PPUSH
34666: LD_VAR 0 4
34670: PPUSH
34671: LD_VAR 0 5
34675: PPUSH
34676: CALL 38010 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
34680: LD_VAR 0 1
34684: PUSH
34685: LD_INT 253
34687: EQUAL
34688: PUSH
34689: LD_VAR 0 2
34693: PPUSH
34694: CALL_OW 257
34698: PUSH
34699: LD_INT 5
34701: EQUAL
34702: AND
34703: IFFALSE 34724
// ComBinocular ( unit , x , y ) ;
34705: LD_VAR 0 2
34709: PPUSH
34710: LD_VAR 0 4
34714: PPUSH
34715: LD_VAR 0 5
34719: PPUSH
34720: CALL 38381 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
34724: LD_VAR 0 1
34728: PUSH
34729: LD_INT 254
34731: EQUAL
34732: PUSH
34733: LD_VAR 0 2
34737: PPUSH
34738: CALL_OW 264
34742: PUSH
34743: LD_EXP 62
34747: EQUAL
34748: AND
34749: PUSH
34750: LD_VAR 0 3
34754: PPUSH
34755: CALL_OW 263
34759: PUSH
34760: LD_INT 3
34762: EQUAL
34763: AND
34764: IFFALSE 34780
// HackDestroyVehicle ( unit , selectedUnit ) ;
34766: LD_VAR 0 2
34770: PPUSH
34771: LD_VAR 0 3
34775: PPUSH
34776: CALL 36676 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
34780: LD_VAR 0 1
34784: PUSH
34785: LD_INT 255
34787: EQUAL
34788: PUSH
34789: LD_VAR 0 2
34793: PPUSH
34794: CALL_OW 264
34798: PUSH
34799: LD_INT 14
34801: PUSH
34802: LD_INT 53
34804: PUSH
34805: EMPTY
34806: LIST
34807: LIST
34808: IN
34809: AND
34810: PUSH
34811: LD_VAR 0 4
34815: PPUSH
34816: LD_VAR 0 5
34820: PPUSH
34821: CALL_OW 488
34825: AND
34826: IFFALSE 34850
// CutTreeXYR ( unit , x , y , 12 ) ;
34828: LD_VAR 0 2
34832: PPUSH
34833: LD_VAR 0 4
34837: PPUSH
34838: LD_VAR 0 5
34842: PPUSH
34843: LD_INT 12
34845: PPUSH
34846: CALL 35242 0 4
// if cmd = 256 then
34850: LD_VAR 0 1
34854: PUSH
34855: LD_INT 256
34857: EQUAL
34858: IFFALSE 34879
// SetFactoryWaypoint ( unit , x , y ) ;
34860: LD_VAR 0 2
34864: PPUSH
34865: LD_VAR 0 4
34869: PPUSH
34870: LD_VAR 0 5
34874: PPUSH
34875: CALL 34884 0 3
// end ;
34879: LD_VAR 0 6
34883: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34884: LD_INT 0
34886: PPUSH
34887: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34888: LD_VAR 0 1
34892: NOT
34893: PUSH
34894: LD_VAR 0 2
34898: PPUSH
34899: LD_VAR 0 3
34903: PPUSH
34904: CALL_OW 488
34908: NOT
34909: OR
34910: PUSH
34911: LD_VAR 0 1
34915: PPUSH
34916: CALL_OW 266
34920: PUSH
34921: LD_INT 3
34923: NONEQUAL
34924: PUSH
34925: LD_VAR 0 1
34929: PPUSH
34930: CALL_OW 247
34934: PUSH
34935: LD_INT 1
34937: EQUAL
34938: NOT
34939: AND
34940: OR
34941: IFFALSE 34945
// exit ;
34943: GO 35094
// if GetType ( factory ) = unit_human then
34945: LD_VAR 0 1
34949: PPUSH
34950: CALL_OW 247
34954: PUSH
34955: LD_INT 1
34957: EQUAL
34958: IFFALSE 34975
// factory := IsInUnit ( factory ) ;
34960: LD_ADDR_VAR 0 1
34964: PUSH
34965: LD_VAR 0 1
34969: PPUSH
34970: CALL_OW 310
34974: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34975: LD_VAR 0 1
34979: PPUSH
34980: CALL_OW 266
34984: PUSH
34985: LD_INT 3
34987: NONEQUAL
34988: IFFALSE 34992
// exit ;
34990: GO 35094
// if HexInfo ( x , y ) = factory then
34992: LD_VAR 0 2
34996: PPUSH
34997: LD_VAR 0 3
35001: PPUSH
35002: CALL_OW 428
35006: PUSH
35007: LD_VAR 0 1
35011: EQUAL
35012: IFFALSE 35039
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
35014: LD_ADDR_EXP 138
35018: PUSH
35019: LD_EXP 138
35023: PPUSH
35024: LD_VAR 0 1
35028: PPUSH
35029: LD_INT 0
35031: PPUSH
35032: CALL_OW 1
35036: ST_TO_ADDR
35037: GO 35090
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
35039: LD_ADDR_EXP 138
35043: PUSH
35044: LD_EXP 138
35048: PPUSH
35049: LD_VAR 0 1
35053: PPUSH
35054: LD_VAR 0 1
35058: PPUSH
35059: CALL_OW 255
35063: PUSH
35064: LD_VAR 0 1
35068: PUSH
35069: LD_VAR 0 2
35073: PUSH
35074: LD_VAR 0 3
35078: PUSH
35079: EMPTY
35080: LIST
35081: LIST
35082: LIST
35083: LIST
35084: PPUSH
35085: CALL_OW 1
35089: ST_TO_ADDR
// UpdateFactoryWaypoints ;
35090: CALL 35099 0 0
// end ;
35094: LD_VAR 0 4
35098: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
35099: LD_INT 0
35101: PPUSH
35102: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
35103: LD_STRING resetFactoryWaypoint();
35105: PPUSH
35106: CALL_OW 559
// if factoryWaypoints then
35110: LD_EXP 138
35114: IFFALSE 35237
// begin for i := 1 to factoryWaypoints do
35116: LD_ADDR_VAR 0 2
35120: PUSH
35121: DOUBLE
35122: LD_INT 1
35124: DEC
35125: ST_TO_ADDR
35126: LD_EXP 138
35130: PUSH
35131: FOR_TO
35132: IFFALSE 35235
// if factoryWaypoints [ i ] then
35134: LD_EXP 138
35138: PUSH
35139: LD_VAR 0 2
35143: ARRAY
35144: IFFALSE 35233
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
35146: LD_STRING setFactoryWaypointXY(
35148: PUSH
35149: LD_EXP 138
35153: PUSH
35154: LD_VAR 0 2
35158: ARRAY
35159: PUSH
35160: LD_INT 1
35162: ARRAY
35163: STR
35164: PUSH
35165: LD_STRING ,
35167: STR
35168: PUSH
35169: LD_EXP 138
35173: PUSH
35174: LD_VAR 0 2
35178: ARRAY
35179: PUSH
35180: LD_INT 2
35182: ARRAY
35183: STR
35184: PUSH
35185: LD_STRING ,
35187: STR
35188: PUSH
35189: LD_EXP 138
35193: PUSH
35194: LD_VAR 0 2
35198: ARRAY
35199: PUSH
35200: LD_INT 3
35202: ARRAY
35203: STR
35204: PUSH
35205: LD_STRING ,
35207: STR
35208: PUSH
35209: LD_EXP 138
35213: PUSH
35214: LD_VAR 0 2
35218: ARRAY
35219: PUSH
35220: LD_INT 4
35222: ARRAY
35223: STR
35224: PUSH
35225: LD_STRING )
35227: STR
35228: PPUSH
35229: CALL_OW 559
35233: GO 35131
35235: POP
35236: POP
// end ; end ;
35237: LD_VAR 0 1
35241: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35242: LD_INT 0
35244: PPUSH
35245: PPUSH
35246: PPUSH
35247: PPUSH
35248: PPUSH
35249: PPUSH
35250: PPUSH
35251: PPUSH
35252: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
35253: LD_VAR 0 1
35257: NOT
35258: PUSH
35259: LD_VAR 0 2
35263: PPUSH
35264: LD_VAR 0 3
35268: PPUSH
35269: CALL_OW 488
35273: NOT
35274: OR
35275: PUSH
35276: LD_VAR 0 4
35280: NOT
35281: OR
35282: IFFALSE 35286
// exit ;
35284: GO 35626
// list := [ ] ;
35286: LD_ADDR_VAR 0 13
35290: PUSH
35291: EMPTY
35292: ST_TO_ADDR
// if x - r < 0 then
35293: LD_VAR 0 2
35297: PUSH
35298: LD_VAR 0 4
35302: MINUS
35303: PUSH
35304: LD_INT 0
35306: LESS
35307: IFFALSE 35319
// min_x := 0 else
35309: LD_ADDR_VAR 0 7
35313: PUSH
35314: LD_INT 0
35316: ST_TO_ADDR
35317: GO 35335
// min_x := x - r ;
35319: LD_ADDR_VAR 0 7
35323: PUSH
35324: LD_VAR 0 2
35328: PUSH
35329: LD_VAR 0 4
35333: MINUS
35334: ST_TO_ADDR
// if y - r < 0 then
35335: LD_VAR 0 3
35339: PUSH
35340: LD_VAR 0 4
35344: MINUS
35345: PUSH
35346: LD_INT 0
35348: LESS
35349: IFFALSE 35361
// min_y := 0 else
35351: LD_ADDR_VAR 0 8
35355: PUSH
35356: LD_INT 0
35358: ST_TO_ADDR
35359: GO 35377
// min_y := y - r ;
35361: LD_ADDR_VAR 0 8
35365: PUSH
35366: LD_VAR 0 3
35370: PUSH
35371: LD_VAR 0 4
35375: MINUS
35376: ST_TO_ADDR
// max_x := x + r ;
35377: LD_ADDR_VAR 0 9
35381: PUSH
35382: LD_VAR 0 2
35386: PUSH
35387: LD_VAR 0 4
35391: PLUS
35392: ST_TO_ADDR
// max_y := y + r ;
35393: LD_ADDR_VAR 0 10
35397: PUSH
35398: LD_VAR 0 3
35402: PUSH
35403: LD_VAR 0 4
35407: PLUS
35408: ST_TO_ADDR
// for _x = min_x to max_x do
35409: LD_ADDR_VAR 0 11
35413: PUSH
35414: DOUBLE
35415: LD_VAR 0 7
35419: DEC
35420: ST_TO_ADDR
35421: LD_VAR 0 9
35425: PUSH
35426: FOR_TO
35427: IFFALSE 35544
// for _y = min_y to max_y do
35429: LD_ADDR_VAR 0 12
35433: PUSH
35434: DOUBLE
35435: LD_VAR 0 8
35439: DEC
35440: ST_TO_ADDR
35441: LD_VAR 0 10
35445: PUSH
35446: FOR_TO
35447: IFFALSE 35540
// begin if not ValidHex ( _x , _y ) then
35449: LD_VAR 0 11
35453: PPUSH
35454: LD_VAR 0 12
35458: PPUSH
35459: CALL_OW 488
35463: NOT
35464: IFFALSE 35468
// continue ;
35466: GO 35446
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35468: LD_VAR 0 11
35472: PPUSH
35473: LD_VAR 0 12
35477: PPUSH
35478: CALL_OW 351
35482: PUSH
35483: LD_VAR 0 11
35487: PPUSH
35488: LD_VAR 0 12
35492: PPUSH
35493: CALL_OW 554
35497: AND
35498: IFFALSE 35538
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35500: LD_ADDR_VAR 0 13
35504: PUSH
35505: LD_VAR 0 13
35509: PPUSH
35510: LD_VAR 0 13
35514: PUSH
35515: LD_INT 1
35517: PLUS
35518: PPUSH
35519: LD_VAR 0 11
35523: PUSH
35524: LD_VAR 0 12
35528: PUSH
35529: EMPTY
35530: LIST
35531: LIST
35532: PPUSH
35533: CALL_OW 2
35537: ST_TO_ADDR
// end ;
35538: GO 35446
35540: POP
35541: POP
35542: GO 35426
35544: POP
35545: POP
// if not list then
35546: LD_VAR 0 13
35550: NOT
35551: IFFALSE 35555
// exit ;
35553: GO 35626
// for i in list do
35555: LD_ADDR_VAR 0 6
35559: PUSH
35560: LD_VAR 0 13
35564: PUSH
35565: FOR_IN
35566: IFFALSE 35624
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
35568: LD_VAR 0 1
35572: PPUSH
35573: LD_STRING M
35575: PUSH
35576: LD_VAR 0 6
35580: PUSH
35581: LD_INT 1
35583: ARRAY
35584: PUSH
35585: LD_VAR 0 6
35589: PUSH
35590: LD_INT 2
35592: ARRAY
35593: PUSH
35594: LD_INT 0
35596: PUSH
35597: LD_INT 0
35599: PUSH
35600: LD_INT 0
35602: PUSH
35603: LD_INT 0
35605: PUSH
35606: EMPTY
35607: LIST
35608: LIST
35609: LIST
35610: LIST
35611: LIST
35612: LIST
35613: LIST
35614: PUSH
35615: EMPTY
35616: LIST
35617: PPUSH
35618: CALL_OW 447
35622: GO 35565
35624: POP
35625: POP
// end ;
35626: LD_VAR 0 5
35630: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
35631: LD_EXP 139
35635: NOT
35636: IFFALSE 35686
35638: GO 35640
35640: DISABLE
// begin initHack := true ;
35641: LD_ADDR_EXP 139
35645: PUSH
35646: LD_INT 1
35648: ST_TO_ADDR
// hackTanks := [ ] ;
35649: LD_ADDR_EXP 140
35653: PUSH
35654: EMPTY
35655: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
35656: LD_ADDR_EXP 141
35660: PUSH
35661: EMPTY
35662: ST_TO_ADDR
// hackLimit := 3 ;
35663: LD_ADDR_EXP 142
35667: PUSH
35668: LD_INT 3
35670: ST_TO_ADDR
// hackDist := 12 ;
35671: LD_ADDR_EXP 143
35675: PUSH
35676: LD_INT 12
35678: ST_TO_ADDR
// hackCounter := [ ] ;
35679: LD_ADDR_EXP 144
35683: PUSH
35684: EMPTY
35685: ST_TO_ADDR
// end ;
35686: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
35687: LD_EXP 139
35691: PUSH
35692: LD_INT 34
35694: PUSH
35695: LD_EXP 62
35699: PUSH
35700: EMPTY
35701: LIST
35702: LIST
35703: PPUSH
35704: CALL_OW 69
35708: AND
35709: IFFALSE 35964
35711: GO 35713
35713: DISABLE
35714: LD_INT 0
35716: PPUSH
35717: PPUSH
// begin enable ;
35718: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
35719: LD_ADDR_VAR 0 1
35723: PUSH
35724: LD_INT 34
35726: PUSH
35727: LD_EXP 62
35731: PUSH
35732: EMPTY
35733: LIST
35734: LIST
35735: PPUSH
35736: CALL_OW 69
35740: PUSH
35741: FOR_IN
35742: IFFALSE 35962
// begin if not i in hackTanks then
35744: LD_VAR 0 1
35748: PUSH
35749: LD_EXP 140
35753: IN
35754: NOT
35755: IFFALSE 35838
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
35757: LD_ADDR_EXP 140
35761: PUSH
35762: LD_EXP 140
35766: PPUSH
35767: LD_EXP 140
35771: PUSH
35772: LD_INT 1
35774: PLUS
35775: PPUSH
35776: LD_VAR 0 1
35780: PPUSH
35781: CALL_OW 1
35785: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
35786: LD_ADDR_EXP 141
35790: PUSH
35791: LD_EXP 141
35795: PPUSH
35796: LD_EXP 141
35800: PUSH
35801: LD_INT 1
35803: PLUS
35804: PPUSH
35805: EMPTY
35806: PPUSH
35807: CALL_OW 1
35811: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
35812: LD_ADDR_EXP 144
35816: PUSH
35817: LD_EXP 144
35821: PPUSH
35822: LD_EXP 144
35826: PUSH
35827: LD_INT 1
35829: PLUS
35830: PPUSH
35831: EMPTY
35832: PPUSH
35833: CALL_OW 1
35837: ST_TO_ADDR
// end ; if not IsOk ( i ) then
35838: LD_VAR 0 1
35842: PPUSH
35843: CALL_OW 302
35847: NOT
35848: IFFALSE 35861
// begin HackUnlinkAll ( i ) ;
35850: LD_VAR 0 1
35854: PPUSH
35855: CALL 35967 0 1
// continue ;
35859: GO 35741
// end ; HackCheckCapturedStatus ( i ) ;
35861: LD_VAR 0 1
35865: PPUSH
35866: CALL 36410 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
35870: LD_ADDR_VAR 0 2
35874: PUSH
35875: LD_INT 81
35877: PUSH
35878: LD_VAR 0 1
35882: PPUSH
35883: CALL_OW 255
35887: PUSH
35888: EMPTY
35889: LIST
35890: LIST
35891: PUSH
35892: LD_INT 33
35894: PUSH
35895: LD_INT 3
35897: PUSH
35898: EMPTY
35899: LIST
35900: LIST
35901: PUSH
35902: LD_INT 91
35904: PUSH
35905: LD_VAR 0 1
35909: PUSH
35910: LD_EXP 143
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: LIST
35919: PUSH
35920: LD_INT 50
35922: PUSH
35923: EMPTY
35924: LIST
35925: PUSH
35926: EMPTY
35927: LIST
35928: LIST
35929: LIST
35930: LIST
35931: PPUSH
35932: CALL_OW 69
35936: ST_TO_ADDR
// if not tmp then
35937: LD_VAR 0 2
35941: NOT
35942: IFFALSE 35946
// continue ;
35944: GO 35741
// HackLink ( i , tmp ) ;
35946: LD_VAR 0 1
35950: PPUSH
35951: LD_VAR 0 2
35955: PPUSH
35956: CALL 36103 0 2
// end ;
35960: GO 35741
35962: POP
35963: POP
// end ;
35964: PPOPN 2
35966: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
35967: LD_INT 0
35969: PPUSH
35970: PPUSH
35971: PPUSH
// if not hack in hackTanks then
35972: LD_VAR 0 1
35976: PUSH
35977: LD_EXP 140
35981: IN
35982: NOT
35983: IFFALSE 35987
// exit ;
35985: GO 36098
// index := GetElementIndex ( hackTanks , hack ) ;
35987: LD_ADDR_VAR 0 4
35991: PUSH
35992: LD_EXP 140
35996: PPUSH
35997: LD_VAR 0 1
36001: PPUSH
36002: CALL 43572 0 2
36006: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
36007: LD_EXP 141
36011: PUSH
36012: LD_VAR 0 4
36016: ARRAY
36017: IFFALSE 36098
// begin for i in hackTanksCaptured [ index ] do
36019: LD_ADDR_VAR 0 3
36023: PUSH
36024: LD_EXP 141
36028: PUSH
36029: LD_VAR 0 4
36033: ARRAY
36034: PUSH
36035: FOR_IN
36036: IFFALSE 36062
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
36038: LD_VAR 0 3
36042: PUSH
36043: LD_INT 1
36045: ARRAY
36046: PPUSH
36047: LD_VAR 0 3
36051: PUSH
36052: LD_INT 2
36054: ARRAY
36055: PPUSH
36056: CALL_OW 235
36060: GO 36035
36062: POP
36063: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
36064: LD_ADDR_EXP 141
36068: PUSH
36069: LD_EXP 141
36073: PPUSH
36074: LD_VAR 0 4
36078: PPUSH
36079: EMPTY
36080: PPUSH
36081: CALL_OW 1
36085: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
36086: LD_VAR 0 1
36090: PPUSH
36091: LD_INT 0
36093: PPUSH
36094: CALL_OW 505
// end ; end ;
36098: LD_VAR 0 2
36102: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
36103: LD_INT 0
36105: PPUSH
36106: PPUSH
36107: PPUSH
// if not hack in hackTanks or not vehicles then
36108: LD_VAR 0 1
36112: PUSH
36113: LD_EXP 140
36117: IN
36118: NOT
36119: PUSH
36120: LD_VAR 0 2
36124: NOT
36125: OR
36126: IFFALSE 36130
// exit ;
36128: GO 36405
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
36130: LD_ADDR_VAR 0 2
36134: PUSH
36135: LD_VAR 0 1
36139: PPUSH
36140: LD_VAR 0 2
36144: PPUSH
36145: LD_INT 1
36147: PPUSH
36148: LD_INT 1
36150: PPUSH
36151: CALL 44222 0 4
36155: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
36156: LD_ADDR_VAR 0 5
36160: PUSH
36161: LD_EXP 140
36165: PPUSH
36166: LD_VAR 0 1
36170: PPUSH
36171: CALL 43572 0 2
36175: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
36176: LD_EXP 141
36180: PUSH
36181: LD_VAR 0 5
36185: ARRAY
36186: PUSH
36187: LD_EXP 142
36191: LESS
36192: IFFALSE 36381
// begin for i := 1 to vehicles do
36194: LD_ADDR_VAR 0 4
36198: PUSH
36199: DOUBLE
36200: LD_INT 1
36202: DEC
36203: ST_TO_ADDR
36204: LD_VAR 0 2
36208: PUSH
36209: FOR_TO
36210: IFFALSE 36379
// begin if hackTanksCaptured [ index ] = hackLimit then
36212: LD_EXP 141
36216: PUSH
36217: LD_VAR 0 5
36221: ARRAY
36222: PUSH
36223: LD_EXP 142
36227: EQUAL
36228: IFFALSE 36232
// break ;
36230: GO 36379
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
36232: LD_ADDR_EXP 144
36236: PUSH
36237: LD_EXP 144
36241: PPUSH
36242: LD_VAR 0 5
36246: PPUSH
36247: LD_EXP 144
36251: PUSH
36252: LD_VAR 0 5
36256: ARRAY
36257: PUSH
36258: LD_INT 1
36260: PLUS
36261: PPUSH
36262: CALL_OW 1
36266: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
36267: LD_ADDR_EXP 141
36271: PUSH
36272: LD_EXP 141
36276: PPUSH
36277: LD_VAR 0 5
36281: PUSH
36282: LD_EXP 141
36286: PUSH
36287: LD_VAR 0 5
36291: ARRAY
36292: PUSH
36293: LD_INT 1
36295: PLUS
36296: PUSH
36297: EMPTY
36298: LIST
36299: LIST
36300: PPUSH
36301: LD_VAR 0 2
36305: PUSH
36306: LD_VAR 0 4
36310: ARRAY
36311: PUSH
36312: LD_VAR 0 2
36316: PUSH
36317: LD_VAR 0 4
36321: ARRAY
36322: PPUSH
36323: CALL_OW 255
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: PPUSH
36332: CALL 43787 0 3
36336: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
36337: LD_VAR 0 2
36341: PUSH
36342: LD_VAR 0 4
36346: ARRAY
36347: PPUSH
36348: LD_VAR 0 1
36352: PPUSH
36353: CALL_OW 255
36357: PPUSH
36358: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
36362: LD_VAR 0 2
36366: PUSH
36367: LD_VAR 0 4
36371: ARRAY
36372: PPUSH
36373: CALL_OW 141
// end ;
36377: GO 36209
36379: POP
36380: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36381: LD_VAR 0 1
36385: PPUSH
36386: LD_EXP 141
36390: PUSH
36391: LD_VAR 0 5
36395: ARRAY
36396: PUSH
36397: LD_INT 0
36399: PLUS
36400: PPUSH
36401: CALL_OW 505
// end ;
36405: LD_VAR 0 3
36409: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
36410: LD_INT 0
36412: PPUSH
36413: PPUSH
36414: PPUSH
36415: PPUSH
// if not hack in hackTanks then
36416: LD_VAR 0 1
36420: PUSH
36421: LD_EXP 140
36425: IN
36426: NOT
36427: IFFALSE 36431
// exit ;
36429: GO 36671
// index := GetElementIndex ( hackTanks , hack ) ;
36431: LD_ADDR_VAR 0 4
36435: PUSH
36436: LD_EXP 140
36440: PPUSH
36441: LD_VAR 0 1
36445: PPUSH
36446: CALL 43572 0 2
36450: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
36451: LD_ADDR_VAR 0 3
36455: PUSH
36456: DOUBLE
36457: LD_EXP 141
36461: PUSH
36462: LD_VAR 0 4
36466: ARRAY
36467: INC
36468: ST_TO_ADDR
36469: LD_INT 1
36471: PUSH
36472: FOR_DOWNTO
36473: IFFALSE 36645
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
36475: LD_ADDR_VAR 0 5
36479: PUSH
36480: LD_EXP 141
36484: PUSH
36485: LD_VAR 0 4
36489: ARRAY
36490: PUSH
36491: LD_VAR 0 3
36495: ARRAY
36496: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
36497: LD_VAR 0 5
36501: PUSH
36502: LD_INT 1
36504: ARRAY
36505: PPUSH
36506: CALL_OW 302
36510: NOT
36511: PUSH
36512: LD_VAR 0 5
36516: PUSH
36517: LD_INT 1
36519: ARRAY
36520: PPUSH
36521: CALL_OW 255
36525: PUSH
36526: LD_VAR 0 1
36530: PPUSH
36531: CALL_OW 255
36535: NONEQUAL
36536: OR
36537: IFFALSE 36643
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
36539: LD_VAR 0 5
36543: PUSH
36544: LD_INT 1
36546: ARRAY
36547: PPUSH
36548: CALL_OW 305
36552: PUSH
36553: LD_VAR 0 5
36557: PUSH
36558: LD_INT 1
36560: ARRAY
36561: PPUSH
36562: CALL_OW 255
36566: PUSH
36567: LD_VAR 0 1
36571: PPUSH
36572: CALL_OW 255
36576: EQUAL
36577: AND
36578: IFFALSE 36602
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
36580: LD_VAR 0 5
36584: PUSH
36585: LD_INT 1
36587: ARRAY
36588: PPUSH
36589: LD_VAR 0 5
36593: PUSH
36594: LD_INT 2
36596: ARRAY
36597: PPUSH
36598: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
36602: LD_ADDR_EXP 141
36606: PUSH
36607: LD_EXP 141
36611: PPUSH
36612: LD_VAR 0 4
36616: PPUSH
36617: LD_EXP 141
36621: PUSH
36622: LD_VAR 0 4
36626: ARRAY
36627: PPUSH
36628: LD_VAR 0 3
36632: PPUSH
36633: CALL_OW 3
36637: PPUSH
36638: CALL_OW 1
36642: ST_TO_ADDR
// end ; end ;
36643: GO 36472
36645: POP
36646: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36647: LD_VAR 0 1
36651: PPUSH
36652: LD_EXP 141
36656: PUSH
36657: LD_VAR 0 4
36661: ARRAY
36662: PUSH
36663: LD_INT 0
36665: PLUS
36666: PPUSH
36667: CALL_OW 505
// end ;
36671: LD_VAR 0 2
36675: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
36676: LD_INT 0
36678: PPUSH
36679: PPUSH
36680: PPUSH
36681: PPUSH
// if not hack in hackTanks then
36682: LD_VAR 0 1
36686: PUSH
36687: LD_EXP 140
36691: IN
36692: NOT
36693: IFFALSE 36697
// exit ;
36695: GO 36782
// index := GetElementIndex ( hackTanks , hack ) ;
36697: LD_ADDR_VAR 0 5
36701: PUSH
36702: LD_EXP 140
36706: PPUSH
36707: LD_VAR 0 1
36711: PPUSH
36712: CALL 43572 0 2
36716: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
36717: LD_ADDR_VAR 0 4
36721: PUSH
36722: DOUBLE
36723: LD_INT 1
36725: DEC
36726: ST_TO_ADDR
36727: LD_EXP 141
36731: PUSH
36732: LD_VAR 0 5
36736: ARRAY
36737: PUSH
36738: FOR_TO
36739: IFFALSE 36780
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
36741: LD_EXP 141
36745: PUSH
36746: LD_VAR 0 5
36750: ARRAY
36751: PUSH
36752: LD_VAR 0 4
36756: ARRAY
36757: PUSH
36758: LD_INT 1
36760: ARRAY
36761: PUSH
36762: LD_VAR 0 2
36766: EQUAL
36767: IFFALSE 36778
// KillUnit ( vehicle ) ;
36769: LD_VAR 0 2
36773: PPUSH
36774: CALL_OW 66
36778: GO 36738
36780: POP
36781: POP
// end ;
36782: LD_VAR 0 3
36786: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
36787: LD_EXP 145
36791: NOT
36792: IFFALSE 36827
36794: GO 36796
36796: DISABLE
// begin initMiner := true ;
36797: LD_ADDR_EXP 145
36801: PUSH
36802: LD_INT 1
36804: ST_TO_ADDR
// minersList := [ ] ;
36805: LD_ADDR_EXP 146
36809: PUSH
36810: EMPTY
36811: ST_TO_ADDR
// minerMinesList := [ ] ;
36812: LD_ADDR_EXP 147
36816: PUSH
36817: EMPTY
36818: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
36819: LD_ADDR_EXP 148
36823: PUSH
36824: LD_INT 5
36826: ST_TO_ADDR
// end ;
36827: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
36828: LD_EXP 145
36832: PUSH
36833: LD_INT 34
36835: PUSH
36836: LD_EXP 67
36840: PUSH
36841: EMPTY
36842: LIST
36843: LIST
36844: PPUSH
36845: CALL_OW 69
36849: AND
36850: IFFALSE 37313
36852: GO 36854
36854: DISABLE
36855: LD_INT 0
36857: PPUSH
36858: PPUSH
36859: PPUSH
36860: PPUSH
// begin enable ;
36861: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
36862: LD_ADDR_VAR 0 1
36866: PUSH
36867: LD_INT 34
36869: PUSH
36870: LD_EXP 67
36874: PUSH
36875: EMPTY
36876: LIST
36877: LIST
36878: PPUSH
36879: CALL_OW 69
36883: PUSH
36884: FOR_IN
36885: IFFALSE 36957
// begin if not i in minersList then
36887: LD_VAR 0 1
36891: PUSH
36892: LD_EXP 146
36896: IN
36897: NOT
36898: IFFALSE 36955
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
36900: LD_ADDR_EXP 146
36904: PUSH
36905: LD_EXP 146
36909: PPUSH
36910: LD_EXP 146
36914: PUSH
36915: LD_INT 1
36917: PLUS
36918: PPUSH
36919: LD_VAR 0 1
36923: PPUSH
36924: CALL_OW 1
36928: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
36929: LD_ADDR_EXP 147
36933: PUSH
36934: LD_EXP 147
36938: PPUSH
36939: LD_EXP 147
36943: PUSH
36944: LD_INT 1
36946: PLUS
36947: PPUSH
36948: EMPTY
36949: PPUSH
36950: CALL_OW 1
36954: ST_TO_ADDR
// end end ;
36955: GO 36884
36957: POP
36958: POP
// for i := minerMinesList downto 1 do
36959: LD_ADDR_VAR 0 1
36963: PUSH
36964: DOUBLE
36965: LD_EXP 147
36969: INC
36970: ST_TO_ADDR
36971: LD_INT 1
36973: PUSH
36974: FOR_DOWNTO
36975: IFFALSE 37311
// begin if IsLive ( minersList [ i ] ) then
36977: LD_EXP 146
36981: PUSH
36982: LD_VAR 0 1
36986: ARRAY
36987: PPUSH
36988: CALL_OW 300
36992: IFFALSE 37020
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
36994: LD_EXP 146
36998: PUSH
36999: LD_VAR 0 1
37003: ARRAY
37004: PPUSH
37005: LD_EXP 147
37009: PUSH
37010: LD_VAR 0 1
37014: ARRAY
37015: PPUSH
37016: CALL_OW 505
// if not minerMinesList [ i ] then
37020: LD_EXP 147
37024: PUSH
37025: LD_VAR 0 1
37029: ARRAY
37030: NOT
37031: IFFALSE 37035
// continue ;
37033: GO 36974
// for j := minerMinesList [ i ] downto 1 do
37035: LD_ADDR_VAR 0 2
37039: PUSH
37040: DOUBLE
37041: LD_EXP 147
37045: PUSH
37046: LD_VAR 0 1
37050: ARRAY
37051: INC
37052: ST_TO_ADDR
37053: LD_INT 1
37055: PUSH
37056: FOR_DOWNTO
37057: IFFALSE 37307
// begin side := GetSide ( minersList [ i ] ) ;
37059: LD_ADDR_VAR 0 3
37063: PUSH
37064: LD_EXP 146
37068: PUSH
37069: LD_VAR 0 1
37073: ARRAY
37074: PPUSH
37075: CALL_OW 255
37079: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
37080: LD_ADDR_VAR 0 4
37084: PUSH
37085: LD_EXP 147
37089: PUSH
37090: LD_VAR 0 1
37094: ARRAY
37095: PUSH
37096: LD_VAR 0 2
37100: ARRAY
37101: PUSH
37102: LD_INT 1
37104: ARRAY
37105: PPUSH
37106: LD_EXP 147
37110: PUSH
37111: LD_VAR 0 1
37115: ARRAY
37116: PUSH
37117: LD_VAR 0 2
37121: ARRAY
37122: PUSH
37123: LD_INT 2
37125: ARRAY
37126: PPUSH
37127: CALL_OW 428
37131: ST_TO_ADDR
// if not tmp then
37132: LD_VAR 0 4
37136: NOT
37137: IFFALSE 37141
// continue ;
37139: GO 37056
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
37141: LD_VAR 0 4
37145: PUSH
37146: LD_INT 81
37148: PUSH
37149: LD_VAR 0 3
37153: PUSH
37154: EMPTY
37155: LIST
37156: LIST
37157: PPUSH
37158: CALL_OW 69
37162: IN
37163: PUSH
37164: LD_EXP 147
37168: PUSH
37169: LD_VAR 0 1
37173: ARRAY
37174: PUSH
37175: LD_VAR 0 2
37179: ARRAY
37180: PUSH
37181: LD_INT 1
37183: ARRAY
37184: PPUSH
37185: LD_EXP 147
37189: PUSH
37190: LD_VAR 0 1
37194: ARRAY
37195: PUSH
37196: LD_VAR 0 2
37200: ARRAY
37201: PUSH
37202: LD_INT 2
37204: ARRAY
37205: PPUSH
37206: CALL_OW 458
37210: AND
37211: IFFALSE 37305
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
37213: LD_EXP 147
37217: PUSH
37218: LD_VAR 0 1
37222: ARRAY
37223: PUSH
37224: LD_VAR 0 2
37228: ARRAY
37229: PUSH
37230: LD_INT 1
37232: ARRAY
37233: PPUSH
37234: LD_EXP 147
37238: PUSH
37239: LD_VAR 0 1
37243: ARRAY
37244: PUSH
37245: LD_VAR 0 2
37249: ARRAY
37250: PUSH
37251: LD_INT 2
37253: ARRAY
37254: PPUSH
37255: LD_VAR 0 3
37259: PPUSH
37260: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
37264: LD_ADDR_EXP 147
37268: PUSH
37269: LD_EXP 147
37273: PPUSH
37274: LD_VAR 0 1
37278: PPUSH
37279: LD_EXP 147
37283: PUSH
37284: LD_VAR 0 1
37288: ARRAY
37289: PPUSH
37290: LD_VAR 0 2
37294: PPUSH
37295: CALL_OW 3
37299: PPUSH
37300: CALL_OW 1
37304: ST_TO_ADDR
// end ; end ;
37305: GO 37056
37307: POP
37308: POP
// end ;
37309: GO 36974
37311: POP
37312: POP
// end ;
37313: PPOPN 4
37315: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
37316: LD_INT 0
37318: PPUSH
37319: PPUSH
// result := false ;
37320: LD_ADDR_VAR 0 4
37324: PUSH
37325: LD_INT 0
37327: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
37328: LD_VAR 0 1
37332: PPUSH
37333: CALL_OW 264
37337: PUSH
37338: LD_EXP 67
37342: EQUAL
37343: NOT
37344: IFFALSE 37348
// exit ;
37346: GO 37588
// index := GetElementIndex ( minersList , unit ) ;
37348: LD_ADDR_VAR 0 5
37352: PUSH
37353: LD_EXP 146
37357: PPUSH
37358: LD_VAR 0 1
37362: PPUSH
37363: CALL 43572 0 2
37367: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
37368: LD_EXP 147
37372: PUSH
37373: LD_VAR 0 5
37377: ARRAY
37378: PUSH
37379: LD_EXP 148
37383: GREATEREQUAL
37384: IFFALSE 37388
// exit ;
37386: GO 37588
// ComMoveXY ( unit , x , y ) ;
37388: LD_VAR 0 1
37392: PPUSH
37393: LD_VAR 0 2
37397: PPUSH
37398: LD_VAR 0 3
37402: PPUSH
37403: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37407: LD_INT 35
37409: PPUSH
37410: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
37414: LD_VAR 0 1
37418: PPUSH
37419: LD_VAR 0 2
37423: PPUSH
37424: LD_VAR 0 3
37428: PPUSH
37429: CALL 74291 0 3
37433: NOT
37434: PUSH
37435: LD_VAR 0 1
37439: PPUSH
37440: CALL_OW 314
37444: AND
37445: IFFALSE 37449
// exit ;
37447: GO 37588
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
37449: LD_VAR 0 2
37453: PPUSH
37454: LD_VAR 0 3
37458: PPUSH
37459: CALL_OW 428
37463: PUSH
37464: LD_VAR 0 1
37468: EQUAL
37469: PUSH
37470: LD_VAR 0 1
37474: PPUSH
37475: CALL_OW 314
37479: NOT
37480: AND
37481: IFFALSE 37407
// PlaySoundXY ( x , y , PlantMine ) ;
37483: LD_VAR 0 2
37487: PPUSH
37488: LD_VAR 0 3
37492: PPUSH
37493: LD_STRING PlantMine
37495: PPUSH
37496: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
37500: LD_VAR 0 2
37504: PPUSH
37505: LD_VAR 0 3
37509: PPUSH
37510: LD_VAR 0 1
37514: PPUSH
37515: CALL_OW 255
37519: PPUSH
37520: LD_INT 0
37522: PPUSH
37523: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
37527: LD_ADDR_EXP 147
37531: PUSH
37532: LD_EXP 147
37536: PPUSH
37537: LD_VAR 0 5
37541: PUSH
37542: LD_EXP 147
37546: PUSH
37547: LD_VAR 0 5
37551: ARRAY
37552: PUSH
37553: LD_INT 1
37555: PLUS
37556: PUSH
37557: EMPTY
37558: LIST
37559: LIST
37560: PPUSH
37561: LD_VAR 0 2
37565: PUSH
37566: LD_VAR 0 3
37570: PUSH
37571: EMPTY
37572: LIST
37573: LIST
37574: PPUSH
37575: CALL 43787 0 3
37579: ST_TO_ADDR
// result := true ;
37580: LD_ADDR_VAR 0 4
37584: PUSH
37585: LD_INT 1
37587: ST_TO_ADDR
// end ;
37588: LD_VAR 0 4
37592: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
37593: LD_INT 0
37595: PPUSH
37596: PPUSH
37597: PPUSH
// if not unit in minersList then
37598: LD_VAR 0 1
37602: PUSH
37603: LD_EXP 146
37607: IN
37608: NOT
37609: IFFALSE 37613
// exit ;
37611: GO 38005
// index := GetElementIndex ( minersList , unit ) ;
37613: LD_ADDR_VAR 0 6
37617: PUSH
37618: LD_EXP 146
37622: PPUSH
37623: LD_VAR 0 1
37627: PPUSH
37628: CALL 43572 0 2
37632: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
37633: LD_ADDR_VAR 0 5
37637: PUSH
37638: DOUBLE
37639: LD_EXP 147
37643: PUSH
37644: LD_VAR 0 6
37648: ARRAY
37649: INC
37650: ST_TO_ADDR
37651: LD_INT 1
37653: PUSH
37654: FOR_DOWNTO
37655: IFFALSE 37816
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
37657: LD_EXP 147
37661: PUSH
37662: LD_VAR 0 6
37666: ARRAY
37667: PUSH
37668: LD_VAR 0 5
37672: ARRAY
37673: PUSH
37674: LD_INT 1
37676: ARRAY
37677: PUSH
37678: LD_VAR 0 2
37682: EQUAL
37683: PUSH
37684: LD_EXP 147
37688: PUSH
37689: LD_VAR 0 6
37693: ARRAY
37694: PUSH
37695: LD_VAR 0 5
37699: ARRAY
37700: PUSH
37701: LD_INT 2
37703: ARRAY
37704: PUSH
37705: LD_VAR 0 3
37709: EQUAL
37710: AND
37711: IFFALSE 37814
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37713: LD_EXP 147
37717: PUSH
37718: LD_VAR 0 6
37722: ARRAY
37723: PUSH
37724: LD_VAR 0 5
37728: ARRAY
37729: PUSH
37730: LD_INT 1
37732: ARRAY
37733: PPUSH
37734: LD_EXP 147
37738: PUSH
37739: LD_VAR 0 6
37743: ARRAY
37744: PUSH
37745: LD_VAR 0 5
37749: ARRAY
37750: PUSH
37751: LD_INT 2
37753: ARRAY
37754: PPUSH
37755: LD_VAR 0 1
37759: PPUSH
37760: CALL_OW 255
37764: PPUSH
37765: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37769: LD_ADDR_EXP 147
37773: PUSH
37774: LD_EXP 147
37778: PPUSH
37779: LD_VAR 0 6
37783: PPUSH
37784: LD_EXP 147
37788: PUSH
37789: LD_VAR 0 6
37793: ARRAY
37794: PPUSH
37795: LD_VAR 0 5
37799: PPUSH
37800: CALL_OW 3
37804: PPUSH
37805: CALL_OW 1
37809: ST_TO_ADDR
// exit ;
37810: POP
37811: POP
37812: GO 38005
// end ; end ;
37814: GO 37654
37816: POP
37817: POP
// for i := minerMinesList [ index ] downto 1 do
37818: LD_ADDR_VAR 0 5
37822: PUSH
37823: DOUBLE
37824: LD_EXP 147
37828: PUSH
37829: LD_VAR 0 6
37833: ARRAY
37834: INC
37835: ST_TO_ADDR
37836: LD_INT 1
37838: PUSH
37839: FOR_DOWNTO
37840: IFFALSE 38003
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
37842: LD_EXP 147
37846: PUSH
37847: LD_VAR 0 6
37851: ARRAY
37852: PUSH
37853: LD_VAR 0 5
37857: ARRAY
37858: PUSH
37859: LD_INT 1
37861: ARRAY
37862: PPUSH
37863: LD_EXP 147
37867: PUSH
37868: LD_VAR 0 6
37872: ARRAY
37873: PUSH
37874: LD_VAR 0 5
37878: ARRAY
37879: PUSH
37880: LD_INT 2
37882: ARRAY
37883: PPUSH
37884: LD_VAR 0 2
37888: PPUSH
37889: LD_VAR 0 3
37893: PPUSH
37894: CALL_OW 298
37898: PUSH
37899: LD_INT 6
37901: LESS
37902: IFFALSE 38001
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37904: LD_EXP 147
37908: PUSH
37909: LD_VAR 0 6
37913: ARRAY
37914: PUSH
37915: LD_VAR 0 5
37919: ARRAY
37920: PUSH
37921: LD_INT 1
37923: ARRAY
37924: PPUSH
37925: LD_EXP 147
37929: PUSH
37930: LD_VAR 0 6
37934: ARRAY
37935: PUSH
37936: LD_VAR 0 5
37940: ARRAY
37941: PUSH
37942: LD_INT 2
37944: ARRAY
37945: PPUSH
37946: LD_VAR 0 1
37950: PPUSH
37951: CALL_OW 255
37955: PPUSH
37956: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37960: LD_ADDR_EXP 147
37964: PUSH
37965: LD_EXP 147
37969: PPUSH
37970: LD_VAR 0 6
37974: PPUSH
37975: LD_EXP 147
37979: PUSH
37980: LD_VAR 0 6
37984: ARRAY
37985: PPUSH
37986: LD_VAR 0 5
37990: PPUSH
37991: CALL_OW 3
37995: PPUSH
37996: CALL_OW 1
38000: ST_TO_ADDR
// end ; end ;
38001: GO 37839
38003: POP
38004: POP
// end ;
38005: LD_VAR 0 4
38009: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
38010: LD_INT 0
38012: PPUSH
38013: PPUSH
38014: PPUSH
38015: PPUSH
38016: PPUSH
38017: PPUSH
38018: PPUSH
38019: PPUSH
38020: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
38021: LD_VAR 0 1
38025: PPUSH
38026: CALL_OW 264
38030: PUSH
38031: LD_EXP 67
38035: EQUAL
38036: NOT
38037: PUSH
38038: LD_VAR 0 1
38042: PUSH
38043: LD_EXP 146
38047: IN
38048: NOT
38049: OR
38050: IFFALSE 38054
// exit ;
38052: GO 38376
// index := GetElementIndex ( minersList , unit ) ;
38054: LD_ADDR_VAR 0 6
38058: PUSH
38059: LD_EXP 146
38063: PPUSH
38064: LD_VAR 0 1
38068: PPUSH
38069: CALL 43572 0 2
38073: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
38074: LD_ADDR_VAR 0 8
38078: PUSH
38079: LD_EXP 148
38083: PUSH
38084: LD_EXP 147
38088: PUSH
38089: LD_VAR 0 6
38093: ARRAY
38094: MINUS
38095: ST_TO_ADDR
// if not minesFreeAmount then
38096: LD_VAR 0 8
38100: NOT
38101: IFFALSE 38105
// exit ;
38103: GO 38376
// tmp := [ ] ;
38105: LD_ADDR_VAR 0 7
38109: PUSH
38110: EMPTY
38111: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
38112: LD_ADDR_VAR 0 5
38116: PUSH
38117: DOUBLE
38118: LD_INT 1
38120: DEC
38121: ST_TO_ADDR
38122: LD_VAR 0 8
38126: PUSH
38127: FOR_TO
38128: IFFALSE 38323
// begin _d := rand ( 0 , 5 ) ;
38130: LD_ADDR_VAR 0 11
38134: PUSH
38135: LD_INT 0
38137: PPUSH
38138: LD_INT 5
38140: PPUSH
38141: CALL_OW 12
38145: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
38146: LD_ADDR_VAR 0 12
38150: PUSH
38151: LD_INT 2
38153: PPUSH
38154: LD_INT 6
38156: PPUSH
38157: CALL_OW 12
38161: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
38162: LD_ADDR_VAR 0 9
38166: PUSH
38167: LD_VAR 0 2
38171: PPUSH
38172: LD_VAR 0 11
38176: PPUSH
38177: LD_VAR 0 12
38181: PPUSH
38182: CALL_OW 272
38186: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
38187: LD_ADDR_VAR 0 10
38191: PUSH
38192: LD_VAR 0 3
38196: PPUSH
38197: LD_VAR 0 11
38201: PPUSH
38202: LD_VAR 0 12
38206: PPUSH
38207: CALL_OW 273
38211: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
38212: LD_VAR 0 9
38216: PPUSH
38217: LD_VAR 0 10
38221: PPUSH
38222: CALL_OW 488
38226: PUSH
38227: LD_VAR 0 9
38231: PUSH
38232: LD_VAR 0 10
38236: PUSH
38237: EMPTY
38238: LIST
38239: LIST
38240: PUSH
38241: LD_VAR 0 7
38245: IN
38246: NOT
38247: AND
38248: PUSH
38249: LD_VAR 0 9
38253: PPUSH
38254: LD_VAR 0 10
38258: PPUSH
38259: CALL_OW 458
38263: NOT
38264: AND
38265: IFFALSE 38307
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
38267: LD_ADDR_VAR 0 7
38271: PUSH
38272: LD_VAR 0 7
38276: PPUSH
38277: LD_VAR 0 7
38281: PUSH
38282: LD_INT 1
38284: PLUS
38285: PPUSH
38286: LD_VAR 0 9
38290: PUSH
38291: LD_VAR 0 10
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: PPUSH
38300: CALL_OW 1
38304: ST_TO_ADDR
38305: GO 38321
// i := i - 1 ;
38307: LD_ADDR_VAR 0 5
38311: PUSH
38312: LD_VAR 0 5
38316: PUSH
38317: LD_INT 1
38319: MINUS
38320: ST_TO_ADDR
// end ;
38321: GO 38127
38323: POP
38324: POP
// for i in tmp do
38325: LD_ADDR_VAR 0 5
38329: PUSH
38330: LD_VAR 0 7
38334: PUSH
38335: FOR_IN
38336: IFFALSE 38374
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
38338: LD_VAR 0 1
38342: PPUSH
38343: LD_VAR 0 5
38347: PUSH
38348: LD_INT 1
38350: ARRAY
38351: PPUSH
38352: LD_VAR 0 5
38356: PUSH
38357: LD_INT 2
38359: ARRAY
38360: PPUSH
38361: CALL 37316 0 3
38365: NOT
38366: IFFALSE 38372
// exit ;
38368: POP
38369: POP
38370: GO 38376
38372: GO 38335
38374: POP
38375: POP
// end ;
38376: LD_VAR 0 4
38380: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
38381: LD_INT 0
38383: PPUSH
38384: PPUSH
38385: PPUSH
38386: PPUSH
38387: PPUSH
38388: PPUSH
38389: PPUSH
// if not GetClass ( unit ) = class_sniper then
38390: LD_VAR 0 1
38394: PPUSH
38395: CALL_OW 257
38399: PUSH
38400: LD_INT 5
38402: EQUAL
38403: NOT
38404: IFFALSE 38408
// exit ;
38406: GO 38796
// dist := 8 ;
38408: LD_ADDR_VAR 0 5
38412: PUSH
38413: LD_INT 8
38415: ST_TO_ADDR
// viewRange := 12 ;
38416: LD_ADDR_VAR 0 7
38420: PUSH
38421: LD_INT 12
38423: ST_TO_ADDR
// side := GetSide ( unit ) ;
38424: LD_ADDR_VAR 0 6
38428: PUSH
38429: LD_VAR 0 1
38433: PPUSH
38434: CALL_OW 255
38438: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
38439: LD_INT 61
38441: PPUSH
38442: LD_VAR 0 6
38446: PPUSH
38447: CALL_OW 321
38451: PUSH
38452: LD_INT 2
38454: EQUAL
38455: IFFALSE 38465
// viewRange := 16 ;
38457: LD_ADDR_VAR 0 7
38461: PUSH
38462: LD_INT 16
38464: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
38465: LD_VAR 0 1
38469: PPUSH
38470: LD_VAR 0 2
38474: PPUSH
38475: LD_VAR 0 3
38479: PPUSH
38480: CALL_OW 297
38484: PUSH
38485: LD_VAR 0 5
38489: GREATER
38490: IFFALSE 38569
// begin ComMoveXY ( unit , x , y ) ;
38492: LD_VAR 0 1
38496: PPUSH
38497: LD_VAR 0 2
38501: PPUSH
38502: LD_VAR 0 3
38506: PPUSH
38507: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38511: LD_INT 35
38513: PPUSH
38514: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
38518: LD_VAR 0 1
38522: PPUSH
38523: LD_VAR 0 2
38527: PPUSH
38528: LD_VAR 0 3
38532: PPUSH
38533: CALL 74291 0 3
38537: NOT
38538: IFFALSE 38542
// exit ;
38540: GO 38796
// until GetDistUnitXY ( unit , x , y ) < dist ;
38542: LD_VAR 0 1
38546: PPUSH
38547: LD_VAR 0 2
38551: PPUSH
38552: LD_VAR 0 3
38556: PPUSH
38557: CALL_OW 297
38561: PUSH
38562: LD_VAR 0 5
38566: LESS
38567: IFFALSE 38511
// end ; ComTurnXY ( unit , x , y ) ;
38569: LD_VAR 0 1
38573: PPUSH
38574: LD_VAR 0 2
38578: PPUSH
38579: LD_VAR 0 3
38583: PPUSH
38584: CALL_OW 118
// wait ( 5 ) ;
38588: LD_INT 5
38590: PPUSH
38591: CALL_OW 67
// _d := GetDir ( unit ) ;
38595: LD_ADDR_VAR 0 10
38599: PUSH
38600: LD_VAR 0 1
38604: PPUSH
38605: CALL_OW 254
38609: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
38610: LD_ADDR_VAR 0 8
38614: PUSH
38615: LD_VAR 0 1
38619: PPUSH
38620: CALL_OW 250
38624: PPUSH
38625: LD_VAR 0 10
38629: PPUSH
38630: LD_VAR 0 5
38634: PPUSH
38635: CALL_OW 272
38639: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
38640: LD_ADDR_VAR 0 9
38644: PUSH
38645: LD_VAR 0 1
38649: PPUSH
38650: CALL_OW 251
38654: PPUSH
38655: LD_VAR 0 10
38659: PPUSH
38660: LD_VAR 0 5
38664: PPUSH
38665: CALL_OW 273
38669: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38670: LD_VAR 0 8
38674: PPUSH
38675: LD_VAR 0 9
38679: PPUSH
38680: CALL_OW 488
38684: NOT
38685: IFFALSE 38689
// exit ;
38687: GO 38796
// ComAnimCustom ( unit , 1 ) ;
38689: LD_VAR 0 1
38693: PPUSH
38694: LD_INT 1
38696: PPUSH
38697: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
38701: LD_VAR 0 8
38705: PPUSH
38706: LD_VAR 0 9
38710: PPUSH
38711: LD_VAR 0 6
38715: PPUSH
38716: LD_VAR 0 7
38720: PPUSH
38721: CALL_OW 330
// repeat wait ( 1 ) ;
38725: LD_INT 1
38727: PPUSH
38728: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
38732: LD_VAR 0 1
38736: PPUSH
38737: CALL_OW 316
38741: PUSH
38742: LD_VAR 0 1
38746: PPUSH
38747: CALL_OW 314
38751: OR
38752: PUSH
38753: LD_VAR 0 1
38757: PPUSH
38758: CALL_OW 302
38762: NOT
38763: OR
38764: PUSH
38765: LD_VAR 0 1
38769: PPUSH
38770: CALL_OW 301
38774: OR
38775: IFFALSE 38725
// RemoveSeeing ( _x , _y , side ) ;
38777: LD_VAR 0 8
38781: PPUSH
38782: LD_VAR 0 9
38786: PPUSH
38787: LD_VAR 0 6
38791: PPUSH
38792: CALL_OW 331
// end ; end_of_file
38796: LD_VAR 0 4
38800: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
38801: LD_INT 0
38803: PPUSH
38804: PPUSH
// if exist_mode then
38805: LD_VAR 0 2
38809: IFFALSE 38834
// unit := CreateCharacter ( prefix & ident ) else
38811: LD_ADDR_VAR 0 5
38815: PUSH
38816: LD_VAR 0 3
38820: PUSH
38821: LD_VAR 0 1
38825: STR
38826: PPUSH
38827: CALL_OW 34
38831: ST_TO_ADDR
38832: GO 38849
// unit := NewCharacter ( ident ) ;
38834: LD_ADDR_VAR 0 5
38838: PUSH
38839: LD_VAR 0 1
38843: PPUSH
38844: CALL_OW 25
38848: ST_TO_ADDR
// result := unit ;
38849: LD_ADDR_VAR 0 4
38853: PUSH
38854: LD_VAR 0 5
38858: ST_TO_ADDR
// end ;
38859: LD_VAR 0 4
38863: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
38864: LD_INT 0
38866: PPUSH
38867: PPUSH
// if not side or not nation then
38868: LD_VAR 0 1
38872: NOT
38873: PUSH
38874: LD_VAR 0 2
38878: NOT
38879: OR
38880: IFFALSE 38884
// exit ;
38882: GO 39652
// case nation of nation_american :
38884: LD_VAR 0 2
38888: PUSH
38889: LD_INT 1
38891: DOUBLE
38892: EQUAL
38893: IFTRUE 38897
38895: GO 39111
38897: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
38898: LD_ADDR_VAR 0 4
38902: PUSH
38903: LD_INT 35
38905: PUSH
38906: LD_INT 45
38908: PUSH
38909: LD_INT 46
38911: PUSH
38912: LD_INT 47
38914: PUSH
38915: LD_INT 82
38917: PUSH
38918: LD_INT 83
38920: PUSH
38921: LD_INT 84
38923: PUSH
38924: LD_INT 85
38926: PUSH
38927: LD_INT 86
38929: PUSH
38930: LD_INT 1
38932: PUSH
38933: LD_INT 2
38935: PUSH
38936: LD_INT 6
38938: PUSH
38939: LD_INT 15
38941: PUSH
38942: LD_INT 16
38944: PUSH
38945: LD_INT 7
38947: PUSH
38948: LD_INT 12
38950: PUSH
38951: LD_INT 13
38953: PUSH
38954: LD_INT 10
38956: PUSH
38957: LD_INT 14
38959: PUSH
38960: LD_INT 20
38962: PUSH
38963: LD_INT 21
38965: PUSH
38966: LD_INT 22
38968: PUSH
38969: LD_INT 25
38971: PUSH
38972: LD_INT 32
38974: PUSH
38975: LD_INT 27
38977: PUSH
38978: LD_INT 36
38980: PUSH
38981: LD_INT 69
38983: PUSH
38984: LD_INT 39
38986: PUSH
38987: LD_INT 34
38989: PUSH
38990: LD_INT 40
38992: PUSH
38993: LD_INT 48
38995: PUSH
38996: LD_INT 49
38998: PUSH
38999: LD_INT 50
39001: PUSH
39002: LD_INT 51
39004: PUSH
39005: LD_INT 52
39007: PUSH
39008: LD_INT 53
39010: PUSH
39011: LD_INT 54
39013: PUSH
39014: LD_INT 55
39016: PUSH
39017: LD_INT 56
39019: PUSH
39020: LD_INT 57
39022: PUSH
39023: LD_INT 58
39025: PUSH
39026: LD_INT 59
39028: PUSH
39029: LD_INT 60
39031: PUSH
39032: LD_INT 61
39034: PUSH
39035: LD_INT 62
39037: PUSH
39038: LD_INT 80
39040: PUSH
39041: LD_INT 82
39043: PUSH
39044: LD_INT 83
39046: PUSH
39047: LD_INT 84
39049: PUSH
39050: LD_INT 85
39052: PUSH
39053: LD_INT 86
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: LIST
39060: LIST
39061: LIST
39062: LIST
39063: LIST
39064: LIST
39065: LIST
39066: LIST
39067: LIST
39068: LIST
39069: LIST
39070: LIST
39071: LIST
39072: LIST
39073: LIST
39074: LIST
39075: LIST
39076: LIST
39077: LIST
39078: LIST
39079: LIST
39080: LIST
39081: LIST
39082: LIST
39083: LIST
39084: LIST
39085: LIST
39086: LIST
39087: LIST
39088: LIST
39089: LIST
39090: LIST
39091: LIST
39092: LIST
39093: LIST
39094: LIST
39095: LIST
39096: LIST
39097: LIST
39098: LIST
39099: LIST
39100: LIST
39101: LIST
39102: LIST
39103: LIST
39104: LIST
39105: LIST
39106: LIST
39107: LIST
39108: ST_TO_ADDR
39109: GO 39576
39111: LD_INT 2
39113: DOUBLE
39114: EQUAL
39115: IFTRUE 39119
39117: GO 39345
39119: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
39120: LD_ADDR_VAR 0 4
39124: PUSH
39125: LD_INT 35
39127: PUSH
39128: LD_INT 45
39130: PUSH
39131: LD_INT 46
39133: PUSH
39134: LD_INT 47
39136: PUSH
39137: LD_INT 82
39139: PUSH
39140: LD_INT 83
39142: PUSH
39143: LD_INT 84
39145: PUSH
39146: LD_INT 85
39148: PUSH
39149: LD_INT 87
39151: PUSH
39152: LD_INT 70
39154: PUSH
39155: LD_INT 1
39157: PUSH
39158: LD_INT 11
39160: PUSH
39161: LD_INT 3
39163: PUSH
39164: LD_INT 4
39166: PUSH
39167: LD_INT 5
39169: PUSH
39170: LD_INT 6
39172: PUSH
39173: LD_INT 15
39175: PUSH
39176: LD_INT 18
39178: PUSH
39179: LD_INT 7
39181: PUSH
39182: LD_INT 17
39184: PUSH
39185: LD_INT 8
39187: PUSH
39188: LD_INT 20
39190: PUSH
39191: LD_INT 21
39193: PUSH
39194: LD_INT 22
39196: PUSH
39197: LD_INT 72
39199: PUSH
39200: LD_INT 26
39202: PUSH
39203: LD_INT 69
39205: PUSH
39206: LD_INT 39
39208: PUSH
39209: LD_INT 40
39211: PUSH
39212: LD_INT 41
39214: PUSH
39215: LD_INT 42
39217: PUSH
39218: LD_INT 43
39220: PUSH
39221: LD_INT 48
39223: PUSH
39224: LD_INT 49
39226: PUSH
39227: LD_INT 50
39229: PUSH
39230: LD_INT 51
39232: PUSH
39233: LD_INT 52
39235: PUSH
39236: LD_INT 53
39238: PUSH
39239: LD_INT 54
39241: PUSH
39242: LD_INT 55
39244: PUSH
39245: LD_INT 56
39247: PUSH
39248: LD_INT 60
39250: PUSH
39251: LD_INT 61
39253: PUSH
39254: LD_INT 62
39256: PUSH
39257: LD_INT 66
39259: PUSH
39260: LD_INT 67
39262: PUSH
39263: LD_INT 68
39265: PUSH
39266: LD_INT 81
39268: PUSH
39269: LD_INT 82
39271: PUSH
39272: LD_INT 83
39274: PUSH
39275: LD_INT 84
39277: PUSH
39278: LD_INT 85
39280: PUSH
39281: LD_INT 87
39283: PUSH
39284: LD_INT 88
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: LIST
39291: LIST
39292: LIST
39293: LIST
39294: LIST
39295: LIST
39296: LIST
39297: LIST
39298: LIST
39299: LIST
39300: LIST
39301: LIST
39302: LIST
39303: LIST
39304: LIST
39305: LIST
39306: LIST
39307: LIST
39308: LIST
39309: LIST
39310: LIST
39311: LIST
39312: LIST
39313: LIST
39314: LIST
39315: LIST
39316: LIST
39317: LIST
39318: LIST
39319: LIST
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: LIST
39332: LIST
39333: LIST
39334: LIST
39335: LIST
39336: LIST
39337: LIST
39338: LIST
39339: LIST
39340: LIST
39341: LIST
39342: ST_TO_ADDR
39343: GO 39576
39345: LD_INT 3
39347: DOUBLE
39348: EQUAL
39349: IFTRUE 39353
39351: GO 39575
39353: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
39354: LD_ADDR_VAR 0 4
39358: PUSH
39359: LD_INT 46
39361: PUSH
39362: LD_INT 47
39364: PUSH
39365: LD_INT 1
39367: PUSH
39368: LD_INT 2
39370: PUSH
39371: LD_INT 82
39373: PUSH
39374: LD_INT 83
39376: PUSH
39377: LD_INT 84
39379: PUSH
39380: LD_INT 85
39382: PUSH
39383: LD_INT 86
39385: PUSH
39386: LD_INT 11
39388: PUSH
39389: LD_INT 9
39391: PUSH
39392: LD_INT 20
39394: PUSH
39395: LD_INT 19
39397: PUSH
39398: LD_INT 21
39400: PUSH
39401: LD_INT 24
39403: PUSH
39404: LD_INT 22
39406: PUSH
39407: LD_INT 25
39409: PUSH
39410: LD_INT 28
39412: PUSH
39413: LD_INT 29
39415: PUSH
39416: LD_INT 30
39418: PUSH
39419: LD_INT 31
39421: PUSH
39422: LD_INT 37
39424: PUSH
39425: LD_INT 38
39427: PUSH
39428: LD_INT 32
39430: PUSH
39431: LD_INT 27
39433: PUSH
39434: LD_INT 33
39436: PUSH
39437: LD_INT 69
39439: PUSH
39440: LD_INT 39
39442: PUSH
39443: LD_INT 34
39445: PUSH
39446: LD_INT 40
39448: PUSH
39449: LD_INT 71
39451: PUSH
39452: LD_INT 23
39454: PUSH
39455: LD_INT 44
39457: PUSH
39458: LD_INT 48
39460: PUSH
39461: LD_INT 49
39463: PUSH
39464: LD_INT 50
39466: PUSH
39467: LD_INT 51
39469: PUSH
39470: LD_INT 52
39472: PUSH
39473: LD_INT 53
39475: PUSH
39476: LD_INT 54
39478: PUSH
39479: LD_INT 55
39481: PUSH
39482: LD_INT 56
39484: PUSH
39485: LD_INT 57
39487: PUSH
39488: LD_INT 58
39490: PUSH
39491: LD_INT 59
39493: PUSH
39494: LD_INT 63
39496: PUSH
39497: LD_INT 64
39499: PUSH
39500: LD_INT 65
39502: PUSH
39503: LD_INT 82
39505: PUSH
39506: LD_INT 83
39508: PUSH
39509: LD_INT 84
39511: PUSH
39512: LD_INT 85
39514: PUSH
39515: LD_INT 86
39517: PUSH
39518: EMPTY
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: LIST
39544: LIST
39545: LIST
39546: LIST
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: LIST
39565: LIST
39566: LIST
39567: LIST
39568: LIST
39569: LIST
39570: LIST
39571: LIST
39572: ST_TO_ADDR
39573: GO 39576
39575: POP
// if state > - 1 and state < 3 then
39576: LD_VAR 0 3
39580: PUSH
39581: LD_INT 1
39583: NEG
39584: GREATER
39585: PUSH
39586: LD_VAR 0 3
39590: PUSH
39591: LD_INT 3
39593: LESS
39594: AND
39595: IFFALSE 39652
// for i in result do
39597: LD_ADDR_VAR 0 5
39601: PUSH
39602: LD_VAR 0 4
39606: PUSH
39607: FOR_IN
39608: IFFALSE 39650
// if GetTech ( i , side ) <> state then
39610: LD_VAR 0 5
39614: PPUSH
39615: LD_VAR 0 1
39619: PPUSH
39620: CALL_OW 321
39624: PUSH
39625: LD_VAR 0 3
39629: NONEQUAL
39630: IFFALSE 39648
// result := result diff i ;
39632: LD_ADDR_VAR 0 4
39636: PUSH
39637: LD_VAR 0 4
39641: PUSH
39642: LD_VAR 0 5
39646: DIFF
39647: ST_TO_ADDR
39648: GO 39607
39650: POP
39651: POP
// end ;
39652: LD_VAR 0 4
39656: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
39657: LD_INT 0
39659: PPUSH
39660: PPUSH
39661: PPUSH
// result := true ;
39662: LD_ADDR_VAR 0 3
39666: PUSH
39667: LD_INT 1
39669: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
39670: LD_ADDR_VAR 0 5
39674: PUSH
39675: LD_VAR 0 2
39679: PPUSH
39680: CALL_OW 480
39684: ST_TO_ADDR
// if not tmp then
39685: LD_VAR 0 5
39689: NOT
39690: IFFALSE 39694
// exit ;
39692: GO 39743
// for i in tmp do
39694: LD_ADDR_VAR 0 4
39698: PUSH
39699: LD_VAR 0 5
39703: PUSH
39704: FOR_IN
39705: IFFALSE 39741
// if GetTech ( i , side ) <> state_researched then
39707: LD_VAR 0 4
39711: PPUSH
39712: LD_VAR 0 1
39716: PPUSH
39717: CALL_OW 321
39721: PUSH
39722: LD_INT 2
39724: NONEQUAL
39725: IFFALSE 39739
// begin result := false ;
39727: LD_ADDR_VAR 0 3
39731: PUSH
39732: LD_INT 0
39734: ST_TO_ADDR
// exit ;
39735: POP
39736: POP
39737: GO 39743
// end ;
39739: GO 39704
39741: POP
39742: POP
// end ;
39743: LD_VAR 0 3
39747: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
39748: LD_INT 0
39750: PPUSH
39751: PPUSH
39752: PPUSH
39753: PPUSH
39754: PPUSH
39755: PPUSH
39756: PPUSH
39757: PPUSH
39758: PPUSH
39759: PPUSH
39760: PPUSH
39761: PPUSH
39762: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
39763: LD_VAR 0 1
39767: NOT
39768: PUSH
39769: LD_VAR 0 1
39773: PPUSH
39774: CALL_OW 257
39778: PUSH
39779: LD_INT 9
39781: NONEQUAL
39782: OR
39783: IFFALSE 39787
// exit ;
39785: GO 40360
// side := GetSide ( unit ) ;
39787: LD_ADDR_VAR 0 9
39791: PUSH
39792: LD_VAR 0 1
39796: PPUSH
39797: CALL_OW 255
39801: ST_TO_ADDR
// tech_space := tech_spacanom ;
39802: LD_ADDR_VAR 0 12
39806: PUSH
39807: LD_INT 29
39809: ST_TO_ADDR
// tech_time := tech_taurad ;
39810: LD_ADDR_VAR 0 13
39814: PUSH
39815: LD_INT 28
39817: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
39818: LD_ADDR_VAR 0 11
39822: PUSH
39823: LD_VAR 0 1
39827: PPUSH
39828: CALL_OW 310
39832: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
39833: LD_VAR 0 11
39837: PPUSH
39838: CALL_OW 247
39842: PUSH
39843: LD_INT 2
39845: EQUAL
39846: IFFALSE 39850
// exit ;
39848: GO 40360
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39850: LD_ADDR_VAR 0 8
39854: PUSH
39855: LD_INT 81
39857: PUSH
39858: LD_VAR 0 9
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: PUSH
39867: LD_INT 3
39869: PUSH
39870: LD_INT 21
39872: PUSH
39873: LD_INT 3
39875: PUSH
39876: EMPTY
39877: LIST
39878: LIST
39879: PUSH
39880: EMPTY
39881: LIST
39882: LIST
39883: PUSH
39884: EMPTY
39885: LIST
39886: LIST
39887: PPUSH
39888: CALL_OW 69
39892: ST_TO_ADDR
// if not tmp then
39893: LD_VAR 0 8
39897: NOT
39898: IFFALSE 39902
// exit ;
39900: GO 40360
// if in_unit then
39902: LD_VAR 0 11
39906: IFFALSE 39930
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
39908: LD_ADDR_VAR 0 10
39912: PUSH
39913: LD_VAR 0 8
39917: PPUSH
39918: LD_VAR 0 11
39922: PPUSH
39923: CALL_OW 74
39927: ST_TO_ADDR
39928: GO 39950
// enemy := NearestUnitToUnit ( tmp , unit ) ;
39930: LD_ADDR_VAR 0 10
39934: PUSH
39935: LD_VAR 0 8
39939: PPUSH
39940: LD_VAR 0 1
39944: PPUSH
39945: CALL_OW 74
39949: ST_TO_ADDR
// if not enemy then
39950: LD_VAR 0 10
39954: NOT
39955: IFFALSE 39959
// exit ;
39957: GO 40360
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
39959: LD_VAR 0 11
39963: PUSH
39964: LD_VAR 0 11
39968: PPUSH
39969: LD_VAR 0 10
39973: PPUSH
39974: CALL_OW 296
39978: PUSH
39979: LD_INT 13
39981: GREATER
39982: AND
39983: PUSH
39984: LD_VAR 0 1
39988: PPUSH
39989: LD_VAR 0 10
39993: PPUSH
39994: CALL_OW 296
39998: PUSH
39999: LD_INT 12
40001: GREATER
40002: OR
40003: IFFALSE 40007
// exit ;
40005: GO 40360
// missile := [ 1 ] ;
40007: LD_ADDR_VAR 0 14
40011: PUSH
40012: LD_INT 1
40014: PUSH
40015: EMPTY
40016: LIST
40017: ST_TO_ADDR
// if Researched ( side , tech_space ) then
40018: LD_VAR 0 9
40022: PPUSH
40023: LD_VAR 0 12
40027: PPUSH
40028: CALL_OW 325
40032: IFFALSE 40061
// missile := Replace ( missile , missile + 1 , 2 ) ;
40034: LD_ADDR_VAR 0 14
40038: PUSH
40039: LD_VAR 0 14
40043: PPUSH
40044: LD_VAR 0 14
40048: PUSH
40049: LD_INT 1
40051: PLUS
40052: PPUSH
40053: LD_INT 2
40055: PPUSH
40056: CALL_OW 1
40060: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
40061: LD_VAR 0 9
40065: PPUSH
40066: LD_VAR 0 13
40070: PPUSH
40071: CALL_OW 325
40075: PUSH
40076: LD_VAR 0 10
40080: PPUSH
40081: CALL_OW 255
40085: PPUSH
40086: LD_VAR 0 13
40090: PPUSH
40091: CALL_OW 325
40095: NOT
40096: AND
40097: IFFALSE 40126
// missile := Replace ( missile , missile + 1 , 3 ) ;
40099: LD_ADDR_VAR 0 14
40103: PUSH
40104: LD_VAR 0 14
40108: PPUSH
40109: LD_VAR 0 14
40113: PUSH
40114: LD_INT 1
40116: PLUS
40117: PPUSH
40118: LD_INT 3
40120: PPUSH
40121: CALL_OW 1
40125: ST_TO_ADDR
// if missile < 2 then
40126: LD_VAR 0 14
40130: PUSH
40131: LD_INT 2
40133: LESS
40134: IFFALSE 40138
// exit ;
40136: GO 40360
// x := GetX ( enemy ) ;
40138: LD_ADDR_VAR 0 4
40142: PUSH
40143: LD_VAR 0 10
40147: PPUSH
40148: CALL_OW 250
40152: ST_TO_ADDR
// y := GetY ( enemy ) ;
40153: LD_ADDR_VAR 0 5
40157: PUSH
40158: LD_VAR 0 10
40162: PPUSH
40163: CALL_OW 251
40167: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
40168: LD_ADDR_VAR 0 6
40172: PUSH
40173: LD_VAR 0 4
40177: PUSH
40178: LD_INT 1
40180: NEG
40181: PPUSH
40182: LD_INT 1
40184: PPUSH
40185: CALL_OW 12
40189: PLUS
40190: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
40191: LD_ADDR_VAR 0 7
40195: PUSH
40196: LD_VAR 0 5
40200: PUSH
40201: LD_INT 1
40203: NEG
40204: PPUSH
40205: LD_INT 1
40207: PPUSH
40208: CALL_OW 12
40212: PLUS
40213: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40214: LD_VAR 0 6
40218: PPUSH
40219: LD_VAR 0 7
40223: PPUSH
40224: CALL_OW 488
40228: NOT
40229: IFFALSE 40251
// begin _x := x ;
40231: LD_ADDR_VAR 0 6
40235: PUSH
40236: LD_VAR 0 4
40240: ST_TO_ADDR
// _y := y ;
40241: LD_ADDR_VAR 0 7
40245: PUSH
40246: LD_VAR 0 5
40250: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
40251: LD_ADDR_VAR 0 3
40255: PUSH
40256: LD_INT 1
40258: PPUSH
40259: LD_VAR 0 14
40263: PPUSH
40264: CALL_OW 12
40268: ST_TO_ADDR
// case i of 1 :
40269: LD_VAR 0 3
40273: PUSH
40274: LD_INT 1
40276: DOUBLE
40277: EQUAL
40278: IFTRUE 40282
40280: GO 40299
40282: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
40283: LD_VAR 0 1
40287: PPUSH
40288: LD_VAR 0 10
40292: PPUSH
40293: CALL_OW 115
40297: GO 40360
40299: LD_INT 2
40301: DOUBLE
40302: EQUAL
40303: IFTRUE 40307
40305: GO 40329
40307: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
40308: LD_VAR 0 1
40312: PPUSH
40313: LD_VAR 0 6
40317: PPUSH
40318: LD_VAR 0 7
40322: PPUSH
40323: CALL_OW 153
40327: GO 40360
40329: LD_INT 3
40331: DOUBLE
40332: EQUAL
40333: IFTRUE 40337
40335: GO 40359
40337: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
40338: LD_VAR 0 1
40342: PPUSH
40343: LD_VAR 0 6
40347: PPUSH
40348: LD_VAR 0 7
40352: PPUSH
40353: CALL_OW 154
40357: GO 40360
40359: POP
// end ;
40360: LD_VAR 0 2
40364: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
40365: LD_INT 0
40367: PPUSH
40368: PPUSH
40369: PPUSH
40370: PPUSH
40371: PPUSH
40372: PPUSH
// if not unit or not building then
40373: LD_VAR 0 1
40377: NOT
40378: PUSH
40379: LD_VAR 0 2
40383: NOT
40384: OR
40385: IFFALSE 40389
// exit ;
40387: GO 40547
// x := GetX ( building ) ;
40389: LD_ADDR_VAR 0 5
40393: PUSH
40394: LD_VAR 0 2
40398: PPUSH
40399: CALL_OW 250
40403: ST_TO_ADDR
// y := GetY ( building ) ;
40404: LD_ADDR_VAR 0 6
40408: PUSH
40409: LD_VAR 0 2
40413: PPUSH
40414: CALL_OW 251
40418: ST_TO_ADDR
// for i = 0 to 5 do
40419: LD_ADDR_VAR 0 4
40423: PUSH
40424: DOUBLE
40425: LD_INT 0
40427: DEC
40428: ST_TO_ADDR
40429: LD_INT 5
40431: PUSH
40432: FOR_TO
40433: IFFALSE 40545
// begin _x := ShiftX ( x , i , 3 ) ;
40435: LD_ADDR_VAR 0 7
40439: PUSH
40440: LD_VAR 0 5
40444: PPUSH
40445: LD_VAR 0 4
40449: PPUSH
40450: LD_INT 3
40452: PPUSH
40453: CALL_OW 272
40457: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
40458: LD_ADDR_VAR 0 8
40462: PUSH
40463: LD_VAR 0 6
40467: PPUSH
40468: LD_VAR 0 4
40472: PPUSH
40473: LD_INT 3
40475: PPUSH
40476: CALL_OW 273
40480: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40481: LD_VAR 0 7
40485: PPUSH
40486: LD_VAR 0 8
40490: PPUSH
40491: CALL_OW 488
40495: NOT
40496: IFFALSE 40500
// continue ;
40498: GO 40432
// if HexInfo ( _x , _y ) = 0 then
40500: LD_VAR 0 7
40504: PPUSH
40505: LD_VAR 0 8
40509: PPUSH
40510: CALL_OW 428
40514: PUSH
40515: LD_INT 0
40517: EQUAL
40518: IFFALSE 40543
// begin ComMoveXY ( unit , _x , _y ) ;
40520: LD_VAR 0 1
40524: PPUSH
40525: LD_VAR 0 7
40529: PPUSH
40530: LD_VAR 0 8
40534: PPUSH
40535: CALL_OW 111
// exit ;
40539: POP
40540: POP
40541: GO 40547
// end ; end ;
40543: GO 40432
40545: POP
40546: POP
// end ;
40547: LD_VAR 0 3
40551: RET
// export function ScanBase ( side , base_area ) ; begin
40552: LD_INT 0
40554: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
40555: LD_ADDR_VAR 0 3
40559: PUSH
40560: LD_VAR 0 2
40564: PPUSH
40565: LD_INT 81
40567: PUSH
40568: LD_VAR 0 1
40572: PUSH
40573: EMPTY
40574: LIST
40575: LIST
40576: PPUSH
40577: CALL_OW 70
40581: ST_TO_ADDR
// end ;
40582: LD_VAR 0 3
40586: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
40587: LD_INT 0
40589: PPUSH
40590: PPUSH
40591: PPUSH
40592: PPUSH
// result := false ;
40593: LD_ADDR_VAR 0 2
40597: PUSH
40598: LD_INT 0
40600: ST_TO_ADDR
// side := GetSide ( unit ) ;
40601: LD_ADDR_VAR 0 3
40605: PUSH
40606: LD_VAR 0 1
40610: PPUSH
40611: CALL_OW 255
40615: ST_TO_ADDR
// nat := GetNation ( unit ) ;
40616: LD_ADDR_VAR 0 4
40620: PUSH
40621: LD_VAR 0 1
40625: PPUSH
40626: CALL_OW 248
40630: ST_TO_ADDR
// case nat of 1 :
40631: LD_VAR 0 4
40635: PUSH
40636: LD_INT 1
40638: DOUBLE
40639: EQUAL
40640: IFTRUE 40644
40642: GO 40655
40644: POP
// tech := tech_lassight ; 2 :
40645: LD_ADDR_VAR 0 5
40649: PUSH
40650: LD_INT 12
40652: ST_TO_ADDR
40653: GO 40694
40655: LD_INT 2
40657: DOUBLE
40658: EQUAL
40659: IFTRUE 40663
40661: GO 40674
40663: POP
// tech := tech_mortar ; 3 :
40664: LD_ADDR_VAR 0 5
40668: PUSH
40669: LD_INT 41
40671: ST_TO_ADDR
40672: GO 40694
40674: LD_INT 3
40676: DOUBLE
40677: EQUAL
40678: IFTRUE 40682
40680: GO 40693
40682: POP
// tech := tech_bazooka ; end ;
40683: LD_ADDR_VAR 0 5
40687: PUSH
40688: LD_INT 44
40690: ST_TO_ADDR
40691: GO 40694
40693: POP
// if Researched ( side , tech ) then
40694: LD_VAR 0 3
40698: PPUSH
40699: LD_VAR 0 5
40703: PPUSH
40704: CALL_OW 325
40708: IFFALSE 40735
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
40710: LD_ADDR_VAR 0 2
40714: PUSH
40715: LD_INT 5
40717: PUSH
40718: LD_INT 8
40720: PUSH
40721: LD_INT 9
40723: PUSH
40724: EMPTY
40725: LIST
40726: LIST
40727: LIST
40728: PUSH
40729: LD_VAR 0 4
40733: ARRAY
40734: ST_TO_ADDR
// end ;
40735: LD_VAR 0 2
40739: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
40740: LD_INT 0
40742: PPUSH
40743: PPUSH
40744: PPUSH
// if not mines then
40745: LD_VAR 0 2
40749: NOT
40750: IFFALSE 40754
// exit ;
40752: GO 40898
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40754: LD_ADDR_VAR 0 5
40758: PUSH
40759: LD_INT 81
40761: PUSH
40762: LD_VAR 0 1
40766: PUSH
40767: EMPTY
40768: LIST
40769: LIST
40770: PUSH
40771: LD_INT 3
40773: PUSH
40774: LD_INT 21
40776: PUSH
40777: LD_INT 3
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: PUSH
40784: EMPTY
40785: LIST
40786: LIST
40787: PUSH
40788: EMPTY
40789: LIST
40790: LIST
40791: PPUSH
40792: CALL_OW 69
40796: ST_TO_ADDR
// for i in mines do
40797: LD_ADDR_VAR 0 4
40801: PUSH
40802: LD_VAR 0 2
40806: PUSH
40807: FOR_IN
40808: IFFALSE 40896
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
40810: LD_VAR 0 4
40814: PUSH
40815: LD_INT 1
40817: ARRAY
40818: PPUSH
40819: LD_VAR 0 4
40823: PUSH
40824: LD_INT 2
40826: ARRAY
40827: PPUSH
40828: CALL_OW 458
40832: NOT
40833: IFFALSE 40837
// continue ;
40835: GO 40807
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
40837: LD_VAR 0 4
40841: PUSH
40842: LD_INT 1
40844: ARRAY
40845: PPUSH
40846: LD_VAR 0 4
40850: PUSH
40851: LD_INT 2
40853: ARRAY
40854: PPUSH
40855: CALL_OW 428
40859: PUSH
40860: LD_VAR 0 5
40864: IN
40865: IFFALSE 40894
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
40867: LD_VAR 0 4
40871: PUSH
40872: LD_INT 1
40874: ARRAY
40875: PPUSH
40876: LD_VAR 0 4
40880: PUSH
40881: LD_INT 2
40883: ARRAY
40884: PPUSH
40885: LD_VAR 0 1
40889: PPUSH
40890: CALL_OW 456
// end ;
40894: GO 40807
40896: POP
40897: POP
// end ;
40898: LD_VAR 0 3
40902: RET
// export function Count ( array ) ; var i ; begin
40903: LD_INT 0
40905: PPUSH
40906: PPUSH
// result := 0 ;
40907: LD_ADDR_VAR 0 2
40911: PUSH
40912: LD_INT 0
40914: ST_TO_ADDR
// for i in array do
40915: LD_ADDR_VAR 0 3
40919: PUSH
40920: LD_VAR 0 1
40924: PUSH
40925: FOR_IN
40926: IFFALSE 40950
// if i then
40928: LD_VAR 0 3
40932: IFFALSE 40948
// result := result + 1 ;
40934: LD_ADDR_VAR 0 2
40938: PUSH
40939: LD_VAR 0 2
40943: PUSH
40944: LD_INT 1
40946: PLUS
40947: ST_TO_ADDR
40948: GO 40925
40950: POP
40951: POP
// end ;
40952: LD_VAR 0 2
40956: RET
// export function IsEmpty ( building ) ; begin
40957: LD_INT 0
40959: PPUSH
// if not building then
40960: LD_VAR 0 1
40964: NOT
40965: IFFALSE 40969
// exit ;
40967: GO 41012
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
40969: LD_ADDR_VAR 0 2
40973: PUSH
40974: LD_VAR 0 1
40978: PUSH
40979: LD_INT 22
40981: PUSH
40982: LD_VAR 0 1
40986: PPUSH
40987: CALL_OW 255
40991: PUSH
40992: EMPTY
40993: LIST
40994: LIST
40995: PUSH
40996: LD_INT 58
40998: PUSH
40999: EMPTY
41000: LIST
41001: PUSH
41002: EMPTY
41003: LIST
41004: LIST
41005: PPUSH
41006: CALL_OW 69
41010: IN
41011: ST_TO_ADDR
// end ;
41012: LD_VAR 0 2
41016: RET
// export function IsNotFull ( building ) ; begin
41017: LD_INT 0
41019: PPUSH
// if not building then
41020: LD_VAR 0 1
41024: NOT
41025: IFFALSE 41029
// exit ;
41027: GO 41048
// result := UnitsInside ( building ) < 6 ;
41029: LD_ADDR_VAR 0 2
41033: PUSH
41034: LD_VAR 0 1
41038: PPUSH
41039: CALL_OW 313
41043: PUSH
41044: LD_INT 6
41046: LESS
41047: ST_TO_ADDR
// end ;
41048: LD_VAR 0 2
41052: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
41053: LD_INT 0
41055: PPUSH
41056: PPUSH
41057: PPUSH
41058: PPUSH
// tmp := [ ] ;
41059: LD_ADDR_VAR 0 3
41063: PUSH
41064: EMPTY
41065: ST_TO_ADDR
// list := [ ] ;
41066: LD_ADDR_VAR 0 5
41070: PUSH
41071: EMPTY
41072: ST_TO_ADDR
// for i = 16 to 25 do
41073: LD_ADDR_VAR 0 4
41077: PUSH
41078: DOUBLE
41079: LD_INT 16
41081: DEC
41082: ST_TO_ADDR
41083: LD_INT 25
41085: PUSH
41086: FOR_TO
41087: IFFALSE 41160
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
41089: LD_ADDR_VAR 0 3
41093: PUSH
41094: LD_VAR 0 3
41098: PUSH
41099: LD_INT 22
41101: PUSH
41102: LD_VAR 0 1
41106: PPUSH
41107: CALL_OW 255
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: PUSH
41116: LD_INT 91
41118: PUSH
41119: LD_VAR 0 1
41123: PUSH
41124: LD_INT 6
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: LIST
41131: PUSH
41132: LD_INT 30
41134: PUSH
41135: LD_VAR 0 4
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: PUSH
41144: EMPTY
41145: LIST
41146: LIST
41147: LIST
41148: PUSH
41149: EMPTY
41150: LIST
41151: PPUSH
41152: CALL_OW 69
41156: ADD
41157: ST_TO_ADDR
41158: GO 41086
41160: POP
41161: POP
// for i = 1 to tmp do
41162: LD_ADDR_VAR 0 4
41166: PUSH
41167: DOUBLE
41168: LD_INT 1
41170: DEC
41171: ST_TO_ADDR
41172: LD_VAR 0 3
41176: PUSH
41177: FOR_TO
41178: IFFALSE 41266
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
41180: LD_ADDR_VAR 0 5
41184: PUSH
41185: LD_VAR 0 5
41189: PUSH
41190: LD_VAR 0 3
41194: PUSH
41195: LD_VAR 0 4
41199: ARRAY
41200: PPUSH
41201: CALL_OW 266
41205: PUSH
41206: LD_VAR 0 3
41210: PUSH
41211: LD_VAR 0 4
41215: ARRAY
41216: PPUSH
41217: CALL_OW 250
41221: PUSH
41222: LD_VAR 0 3
41226: PUSH
41227: LD_VAR 0 4
41231: ARRAY
41232: PPUSH
41233: CALL_OW 251
41237: PUSH
41238: LD_VAR 0 3
41242: PUSH
41243: LD_VAR 0 4
41247: ARRAY
41248: PPUSH
41249: CALL_OW 254
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: LIST
41258: LIST
41259: PUSH
41260: EMPTY
41261: LIST
41262: ADD
41263: ST_TO_ADDR
41264: GO 41177
41266: POP
41267: POP
// result := list ;
41268: LD_ADDR_VAR 0 2
41272: PUSH
41273: LD_VAR 0 5
41277: ST_TO_ADDR
// end ;
41278: LD_VAR 0 2
41282: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
41283: LD_INT 0
41285: PPUSH
41286: PPUSH
41287: PPUSH
41288: PPUSH
41289: PPUSH
41290: PPUSH
41291: PPUSH
// if not factory then
41292: LD_VAR 0 1
41296: NOT
41297: IFFALSE 41301
// exit ;
41299: GO 41894
// if control = control_apeman then
41301: LD_VAR 0 4
41305: PUSH
41306: LD_INT 5
41308: EQUAL
41309: IFFALSE 41418
// begin tmp := UnitsInside ( factory ) ;
41311: LD_ADDR_VAR 0 8
41315: PUSH
41316: LD_VAR 0 1
41320: PPUSH
41321: CALL_OW 313
41325: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
41326: LD_VAR 0 8
41330: PPUSH
41331: LD_INT 25
41333: PUSH
41334: LD_INT 12
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: PPUSH
41341: CALL_OW 72
41345: NOT
41346: IFFALSE 41356
// control := control_manual ;
41348: LD_ADDR_VAR 0 4
41352: PUSH
41353: LD_INT 1
41355: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
41356: LD_ADDR_VAR 0 8
41360: PUSH
41361: LD_VAR 0 1
41365: PPUSH
41366: CALL 41053 0 1
41370: ST_TO_ADDR
// if tmp then
41371: LD_VAR 0 8
41375: IFFALSE 41418
// begin for i in tmp do
41377: LD_ADDR_VAR 0 7
41381: PUSH
41382: LD_VAR 0 8
41386: PUSH
41387: FOR_IN
41388: IFFALSE 41416
// if i [ 1 ] = b_ext_radio then
41390: LD_VAR 0 7
41394: PUSH
41395: LD_INT 1
41397: ARRAY
41398: PUSH
41399: LD_INT 22
41401: EQUAL
41402: IFFALSE 41414
// begin control := control_remote ;
41404: LD_ADDR_VAR 0 4
41408: PUSH
41409: LD_INT 2
41411: ST_TO_ADDR
// break ;
41412: GO 41416
// end ;
41414: GO 41387
41416: POP
41417: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41418: LD_VAR 0 1
41422: PPUSH
41423: LD_VAR 0 2
41427: PPUSH
41428: LD_VAR 0 3
41432: PPUSH
41433: LD_VAR 0 4
41437: PPUSH
41438: LD_VAR 0 5
41442: PPUSH
41443: CALL_OW 448
41447: IFFALSE 41482
// begin result := [ chassis , engine , control , weapon ] ;
41449: LD_ADDR_VAR 0 6
41453: PUSH
41454: LD_VAR 0 2
41458: PUSH
41459: LD_VAR 0 3
41463: PUSH
41464: LD_VAR 0 4
41468: PUSH
41469: LD_VAR 0 5
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: LIST
41478: LIST
41479: ST_TO_ADDR
// exit ;
41480: GO 41894
// end ; _chassis := AvailableChassisList ( factory ) ;
41482: LD_ADDR_VAR 0 9
41486: PUSH
41487: LD_VAR 0 1
41491: PPUSH
41492: CALL_OW 475
41496: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
41497: LD_ADDR_VAR 0 11
41501: PUSH
41502: LD_VAR 0 1
41506: PPUSH
41507: CALL_OW 476
41511: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
41512: LD_ADDR_VAR 0 12
41516: PUSH
41517: LD_VAR 0 1
41521: PPUSH
41522: CALL_OW 477
41526: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
41527: LD_ADDR_VAR 0 10
41531: PUSH
41532: LD_VAR 0 1
41536: PPUSH
41537: CALL_OW 478
41541: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
41542: LD_VAR 0 9
41546: NOT
41547: PUSH
41548: LD_VAR 0 11
41552: NOT
41553: OR
41554: PUSH
41555: LD_VAR 0 12
41559: NOT
41560: OR
41561: PUSH
41562: LD_VAR 0 10
41566: NOT
41567: OR
41568: IFFALSE 41603
// begin result := [ chassis , engine , control , weapon ] ;
41570: LD_ADDR_VAR 0 6
41574: PUSH
41575: LD_VAR 0 2
41579: PUSH
41580: LD_VAR 0 3
41584: PUSH
41585: LD_VAR 0 4
41589: PUSH
41590: LD_VAR 0 5
41594: PUSH
41595: EMPTY
41596: LIST
41597: LIST
41598: LIST
41599: LIST
41600: ST_TO_ADDR
// exit ;
41601: GO 41894
// end ; if not chassis in _chassis then
41603: LD_VAR 0 2
41607: PUSH
41608: LD_VAR 0 9
41612: IN
41613: NOT
41614: IFFALSE 41640
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
41616: LD_ADDR_VAR 0 2
41620: PUSH
41621: LD_VAR 0 9
41625: PUSH
41626: LD_INT 1
41628: PPUSH
41629: LD_VAR 0 9
41633: PPUSH
41634: CALL_OW 12
41638: ARRAY
41639: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
41640: LD_VAR 0 2
41644: PPUSH
41645: LD_VAR 0 3
41649: PPUSH
41650: CALL 41899 0 2
41654: NOT
41655: IFFALSE 41714
// repeat engine := _engine [ 1 ] ;
41657: LD_ADDR_VAR 0 3
41661: PUSH
41662: LD_VAR 0 11
41666: PUSH
41667: LD_INT 1
41669: ARRAY
41670: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
41671: LD_ADDR_VAR 0 11
41675: PUSH
41676: LD_VAR 0 11
41680: PPUSH
41681: LD_INT 1
41683: PPUSH
41684: CALL_OW 3
41688: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
41689: LD_VAR 0 2
41693: PPUSH
41694: LD_VAR 0 3
41698: PPUSH
41699: CALL 41899 0 2
41703: PUSH
41704: LD_VAR 0 11
41708: PUSH
41709: EMPTY
41710: EQUAL
41711: OR
41712: IFFALSE 41657
// if not control in _control then
41714: LD_VAR 0 4
41718: PUSH
41719: LD_VAR 0 12
41723: IN
41724: NOT
41725: IFFALSE 41751
// control := _control [ rand ( 1 , _control ) ] ;
41727: LD_ADDR_VAR 0 4
41731: PUSH
41732: LD_VAR 0 12
41736: PUSH
41737: LD_INT 1
41739: PPUSH
41740: LD_VAR 0 12
41744: PPUSH
41745: CALL_OW 12
41749: ARRAY
41750: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
41751: LD_VAR 0 2
41755: PPUSH
41756: LD_VAR 0 5
41760: PPUSH
41761: CALL 42119 0 2
41765: NOT
41766: IFFALSE 41825
// repeat weapon := _weapon [ 1 ] ;
41768: LD_ADDR_VAR 0 5
41772: PUSH
41773: LD_VAR 0 10
41777: PUSH
41778: LD_INT 1
41780: ARRAY
41781: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
41782: LD_ADDR_VAR 0 10
41786: PUSH
41787: LD_VAR 0 10
41791: PPUSH
41792: LD_INT 1
41794: PPUSH
41795: CALL_OW 3
41799: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
41800: LD_VAR 0 2
41804: PPUSH
41805: LD_VAR 0 5
41809: PPUSH
41810: CALL 42119 0 2
41814: PUSH
41815: LD_VAR 0 10
41819: PUSH
41820: EMPTY
41821: EQUAL
41822: OR
41823: IFFALSE 41768
// result := [ ] ;
41825: LD_ADDR_VAR 0 6
41829: PUSH
41830: EMPTY
41831: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41832: LD_VAR 0 1
41836: PPUSH
41837: LD_VAR 0 2
41841: PPUSH
41842: LD_VAR 0 3
41846: PPUSH
41847: LD_VAR 0 4
41851: PPUSH
41852: LD_VAR 0 5
41856: PPUSH
41857: CALL_OW 448
41861: IFFALSE 41894
// result := [ chassis , engine , control , weapon ] ;
41863: LD_ADDR_VAR 0 6
41867: PUSH
41868: LD_VAR 0 2
41872: PUSH
41873: LD_VAR 0 3
41877: PUSH
41878: LD_VAR 0 4
41882: PUSH
41883: LD_VAR 0 5
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: LIST
41892: LIST
41893: ST_TO_ADDR
// end ;
41894: LD_VAR 0 6
41898: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
41899: LD_INT 0
41901: PPUSH
// if not chassis or not engine then
41902: LD_VAR 0 1
41906: NOT
41907: PUSH
41908: LD_VAR 0 2
41912: NOT
41913: OR
41914: IFFALSE 41918
// exit ;
41916: GO 42114
// case engine of engine_solar :
41918: LD_VAR 0 2
41922: PUSH
41923: LD_INT 2
41925: DOUBLE
41926: EQUAL
41927: IFTRUE 41931
41929: GO 41969
41931: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
41932: LD_ADDR_VAR 0 3
41936: PUSH
41937: LD_INT 11
41939: PUSH
41940: LD_INT 12
41942: PUSH
41943: LD_INT 13
41945: PUSH
41946: LD_INT 14
41948: PUSH
41949: LD_INT 1
41951: PUSH
41952: LD_INT 2
41954: PUSH
41955: LD_INT 3
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: LIST
41962: LIST
41963: LIST
41964: LIST
41965: LIST
41966: ST_TO_ADDR
41967: GO 42098
41969: LD_INT 1
41971: DOUBLE
41972: EQUAL
41973: IFTRUE 41977
41975: GO 42039
41977: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
41978: LD_ADDR_VAR 0 3
41982: PUSH
41983: LD_INT 11
41985: PUSH
41986: LD_INT 12
41988: PUSH
41989: LD_INT 13
41991: PUSH
41992: LD_INT 14
41994: PUSH
41995: LD_INT 1
41997: PUSH
41998: LD_INT 2
42000: PUSH
42001: LD_INT 3
42003: PUSH
42004: LD_INT 4
42006: PUSH
42007: LD_INT 5
42009: PUSH
42010: LD_INT 21
42012: PUSH
42013: LD_INT 23
42015: PUSH
42016: LD_INT 22
42018: PUSH
42019: LD_INT 24
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: LIST
42026: LIST
42027: LIST
42028: LIST
42029: LIST
42030: LIST
42031: LIST
42032: LIST
42033: LIST
42034: LIST
42035: LIST
42036: ST_TO_ADDR
42037: GO 42098
42039: LD_INT 3
42041: DOUBLE
42042: EQUAL
42043: IFTRUE 42047
42045: GO 42097
42047: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42048: LD_ADDR_VAR 0 3
42052: PUSH
42053: LD_INT 13
42055: PUSH
42056: LD_INT 14
42058: PUSH
42059: LD_INT 2
42061: PUSH
42062: LD_INT 3
42064: PUSH
42065: LD_INT 4
42067: PUSH
42068: LD_INT 5
42070: PUSH
42071: LD_INT 21
42073: PUSH
42074: LD_INT 22
42076: PUSH
42077: LD_INT 23
42079: PUSH
42080: LD_INT 24
42082: PUSH
42083: EMPTY
42084: LIST
42085: LIST
42086: LIST
42087: LIST
42088: LIST
42089: LIST
42090: LIST
42091: LIST
42092: LIST
42093: LIST
42094: ST_TO_ADDR
42095: GO 42098
42097: POP
// result := ( chassis in result ) ;
42098: LD_ADDR_VAR 0 3
42102: PUSH
42103: LD_VAR 0 1
42107: PUSH
42108: LD_VAR 0 3
42112: IN
42113: ST_TO_ADDR
// end ;
42114: LD_VAR 0 3
42118: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
42119: LD_INT 0
42121: PPUSH
// if not chassis or not weapon then
42122: LD_VAR 0 1
42126: NOT
42127: PUSH
42128: LD_VAR 0 2
42132: NOT
42133: OR
42134: IFFALSE 42138
// exit ;
42136: GO 43200
// case weapon of us_machine_gun :
42138: LD_VAR 0 2
42142: PUSH
42143: LD_INT 2
42145: DOUBLE
42146: EQUAL
42147: IFTRUE 42151
42149: GO 42181
42151: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
42152: LD_ADDR_VAR 0 3
42156: PUSH
42157: LD_INT 1
42159: PUSH
42160: LD_INT 2
42162: PUSH
42163: LD_INT 3
42165: PUSH
42166: LD_INT 4
42168: PUSH
42169: LD_INT 5
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: LIST
42176: LIST
42177: LIST
42178: ST_TO_ADDR
42179: GO 43184
42181: LD_INT 3
42183: DOUBLE
42184: EQUAL
42185: IFTRUE 42189
42187: GO 42219
42189: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
42190: LD_ADDR_VAR 0 3
42194: PUSH
42195: LD_INT 1
42197: PUSH
42198: LD_INT 2
42200: PUSH
42201: LD_INT 3
42203: PUSH
42204: LD_INT 4
42206: PUSH
42207: LD_INT 5
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: ST_TO_ADDR
42217: GO 43184
42219: LD_INT 11
42221: DOUBLE
42222: EQUAL
42223: IFTRUE 42227
42225: GO 42257
42227: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
42228: LD_ADDR_VAR 0 3
42232: PUSH
42233: LD_INT 1
42235: PUSH
42236: LD_INT 2
42238: PUSH
42239: LD_INT 3
42241: PUSH
42242: LD_INT 4
42244: PUSH
42245: LD_INT 5
42247: PUSH
42248: EMPTY
42249: LIST
42250: LIST
42251: LIST
42252: LIST
42253: LIST
42254: ST_TO_ADDR
42255: GO 43184
42257: LD_INT 4
42259: DOUBLE
42260: EQUAL
42261: IFTRUE 42265
42263: GO 42291
42265: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
42266: LD_ADDR_VAR 0 3
42270: PUSH
42271: LD_INT 2
42273: PUSH
42274: LD_INT 3
42276: PUSH
42277: LD_INT 4
42279: PUSH
42280: LD_INT 5
42282: PUSH
42283: EMPTY
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: ST_TO_ADDR
42289: GO 43184
42291: LD_INT 5
42293: DOUBLE
42294: EQUAL
42295: IFTRUE 42299
42297: GO 42325
42299: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
42300: LD_ADDR_VAR 0 3
42304: PUSH
42305: LD_INT 2
42307: PUSH
42308: LD_INT 3
42310: PUSH
42311: LD_INT 4
42313: PUSH
42314: LD_INT 5
42316: PUSH
42317: EMPTY
42318: LIST
42319: LIST
42320: LIST
42321: LIST
42322: ST_TO_ADDR
42323: GO 43184
42325: LD_INT 9
42327: DOUBLE
42328: EQUAL
42329: IFTRUE 42333
42331: GO 42359
42333: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
42334: LD_ADDR_VAR 0 3
42338: PUSH
42339: LD_INT 2
42341: PUSH
42342: LD_INT 3
42344: PUSH
42345: LD_INT 4
42347: PUSH
42348: LD_INT 5
42350: PUSH
42351: EMPTY
42352: LIST
42353: LIST
42354: LIST
42355: LIST
42356: ST_TO_ADDR
42357: GO 43184
42359: LD_INT 7
42361: DOUBLE
42362: EQUAL
42363: IFTRUE 42367
42365: GO 42393
42367: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
42368: LD_ADDR_VAR 0 3
42372: PUSH
42373: LD_INT 2
42375: PUSH
42376: LD_INT 3
42378: PUSH
42379: LD_INT 4
42381: PUSH
42382: LD_INT 5
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: LIST
42389: LIST
42390: ST_TO_ADDR
42391: GO 43184
42393: LD_INT 12
42395: DOUBLE
42396: EQUAL
42397: IFTRUE 42401
42399: GO 42427
42401: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
42402: LD_ADDR_VAR 0 3
42406: PUSH
42407: LD_INT 2
42409: PUSH
42410: LD_INT 3
42412: PUSH
42413: LD_INT 4
42415: PUSH
42416: LD_INT 5
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: LIST
42423: LIST
42424: ST_TO_ADDR
42425: GO 43184
42427: LD_INT 13
42429: DOUBLE
42430: EQUAL
42431: IFTRUE 42435
42433: GO 42461
42435: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
42436: LD_ADDR_VAR 0 3
42440: PUSH
42441: LD_INT 2
42443: PUSH
42444: LD_INT 3
42446: PUSH
42447: LD_INT 4
42449: PUSH
42450: LD_INT 5
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: LIST
42457: LIST
42458: ST_TO_ADDR
42459: GO 43184
42461: LD_INT 14
42463: DOUBLE
42464: EQUAL
42465: IFTRUE 42469
42467: GO 42487
42469: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
42470: LD_ADDR_VAR 0 3
42474: PUSH
42475: LD_INT 4
42477: PUSH
42478: LD_INT 5
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: ST_TO_ADDR
42485: GO 43184
42487: LD_INT 6
42489: DOUBLE
42490: EQUAL
42491: IFTRUE 42495
42493: GO 42513
42495: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
42496: LD_ADDR_VAR 0 3
42500: PUSH
42501: LD_INT 4
42503: PUSH
42504: LD_INT 5
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: ST_TO_ADDR
42511: GO 43184
42513: LD_INT 10
42515: DOUBLE
42516: EQUAL
42517: IFTRUE 42521
42519: GO 42539
42521: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
42522: LD_ADDR_VAR 0 3
42526: PUSH
42527: LD_INT 4
42529: PUSH
42530: LD_INT 5
42532: PUSH
42533: EMPTY
42534: LIST
42535: LIST
42536: ST_TO_ADDR
42537: GO 43184
42539: LD_INT 22
42541: DOUBLE
42542: EQUAL
42543: IFTRUE 42547
42545: GO 42573
42547: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
42548: LD_ADDR_VAR 0 3
42552: PUSH
42553: LD_INT 11
42555: PUSH
42556: LD_INT 12
42558: PUSH
42559: LD_INT 13
42561: PUSH
42562: LD_INT 14
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: ST_TO_ADDR
42571: GO 43184
42573: LD_INT 23
42575: DOUBLE
42576: EQUAL
42577: IFTRUE 42581
42579: GO 42607
42581: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
42582: LD_ADDR_VAR 0 3
42586: PUSH
42587: LD_INT 11
42589: PUSH
42590: LD_INT 12
42592: PUSH
42593: LD_INT 13
42595: PUSH
42596: LD_INT 14
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: LIST
42603: LIST
42604: ST_TO_ADDR
42605: GO 43184
42607: LD_INT 24
42609: DOUBLE
42610: EQUAL
42611: IFTRUE 42615
42613: GO 42641
42615: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
42616: LD_ADDR_VAR 0 3
42620: PUSH
42621: LD_INT 11
42623: PUSH
42624: LD_INT 12
42626: PUSH
42627: LD_INT 13
42629: PUSH
42630: LD_INT 14
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: LIST
42637: LIST
42638: ST_TO_ADDR
42639: GO 43184
42641: LD_INT 30
42643: DOUBLE
42644: EQUAL
42645: IFTRUE 42649
42647: GO 42675
42649: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
42650: LD_ADDR_VAR 0 3
42654: PUSH
42655: LD_INT 11
42657: PUSH
42658: LD_INT 12
42660: PUSH
42661: LD_INT 13
42663: PUSH
42664: LD_INT 14
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: LIST
42671: LIST
42672: ST_TO_ADDR
42673: GO 43184
42675: LD_INT 25
42677: DOUBLE
42678: EQUAL
42679: IFTRUE 42683
42681: GO 42701
42683: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
42684: LD_ADDR_VAR 0 3
42688: PUSH
42689: LD_INT 13
42691: PUSH
42692: LD_INT 14
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: ST_TO_ADDR
42699: GO 43184
42701: LD_INT 27
42703: DOUBLE
42704: EQUAL
42705: IFTRUE 42709
42707: GO 42727
42709: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
42710: LD_ADDR_VAR 0 3
42714: PUSH
42715: LD_INT 13
42717: PUSH
42718: LD_INT 14
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: ST_TO_ADDR
42725: GO 43184
42727: LD_EXP 65
42731: DOUBLE
42732: EQUAL
42733: IFTRUE 42737
42735: GO 42763
42737: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
42738: LD_ADDR_VAR 0 3
42742: PUSH
42743: LD_INT 11
42745: PUSH
42746: LD_INT 12
42748: PUSH
42749: LD_INT 13
42751: PUSH
42752: LD_INT 14
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: LIST
42759: LIST
42760: ST_TO_ADDR
42761: GO 43184
42763: LD_INT 28
42765: DOUBLE
42766: EQUAL
42767: IFTRUE 42771
42769: GO 42789
42771: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
42772: LD_ADDR_VAR 0 3
42776: PUSH
42777: LD_INT 13
42779: PUSH
42780: LD_INT 14
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: ST_TO_ADDR
42787: GO 43184
42789: LD_INT 29
42791: DOUBLE
42792: EQUAL
42793: IFTRUE 42797
42795: GO 42815
42797: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
42798: LD_ADDR_VAR 0 3
42802: PUSH
42803: LD_INT 13
42805: PUSH
42806: LD_INT 14
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: ST_TO_ADDR
42813: GO 43184
42815: LD_INT 31
42817: DOUBLE
42818: EQUAL
42819: IFTRUE 42823
42821: GO 42841
42823: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
42824: LD_ADDR_VAR 0 3
42828: PUSH
42829: LD_INT 13
42831: PUSH
42832: LD_INT 14
42834: PUSH
42835: EMPTY
42836: LIST
42837: LIST
42838: ST_TO_ADDR
42839: GO 43184
42841: LD_INT 26
42843: DOUBLE
42844: EQUAL
42845: IFTRUE 42849
42847: GO 42867
42849: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
42850: LD_ADDR_VAR 0 3
42854: PUSH
42855: LD_INT 13
42857: PUSH
42858: LD_INT 14
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: ST_TO_ADDR
42865: GO 43184
42867: LD_INT 42
42869: DOUBLE
42870: EQUAL
42871: IFTRUE 42875
42873: GO 42901
42875: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
42876: LD_ADDR_VAR 0 3
42880: PUSH
42881: LD_INT 21
42883: PUSH
42884: LD_INT 22
42886: PUSH
42887: LD_INT 23
42889: PUSH
42890: LD_INT 24
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: LIST
42897: LIST
42898: ST_TO_ADDR
42899: GO 43184
42901: LD_INT 43
42903: DOUBLE
42904: EQUAL
42905: IFTRUE 42909
42907: GO 42935
42909: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
42910: LD_ADDR_VAR 0 3
42914: PUSH
42915: LD_INT 21
42917: PUSH
42918: LD_INT 22
42920: PUSH
42921: LD_INT 23
42923: PUSH
42924: LD_INT 24
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: LIST
42931: LIST
42932: ST_TO_ADDR
42933: GO 43184
42935: LD_INT 44
42937: DOUBLE
42938: EQUAL
42939: IFTRUE 42943
42941: GO 42969
42943: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
42944: LD_ADDR_VAR 0 3
42948: PUSH
42949: LD_INT 21
42951: PUSH
42952: LD_INT 22
42954: PUSH
42955: LD_INT 23
42957: PUSH
42958: LD_INT 24
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: LIST
42965: LIST
42966: ST_TO_ADDR
42967: GO 43184
42969: LD_INT 45
42971: DOUBLE
42972: EQUAL
42973: IFTRUE 42977
42975: GO 43003
42977: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
42978: LD_ADDR_VAR 0 3
42982: PUSH
42983: LD_INT 21
42985: PUSH
42986: LD_INT 22
42988: PUSH
42989: LD_INT 23
42991: PUSH
42992: LD_INT 24
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: LIST
42999: LIST
43000: ST_TO_ADDR
43001: GO 43184
43003: LD_INT 49
43005: DOUBLE
43006: EQUAL
43007: IFTRUE 43011
43009: GO 43037
43011: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
43012: LD_ADDR_VAR 0 3
43016: PUSH
43017: LD_INT 21
43019: PUSH
43020: LD_INT 22
43022: PUSH
43023: LD_INT 23
43025: PUSH
43026: LD_INT 24
43028: PUSH
43029: EMPTY
43030: LIST
43031: LIST
43032: LIST
43033: LIST
43034: ST_TO_ADDR
43035: GO 43184
43037: LD_INT 51
43039: DOUBLE
43040: EQUAL
43041: IFTRUE 43045
43043: GO 43071
43045: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
43046: LD_ADDR_VAR 0 3
43050: PUSH
43051: LD_INT 21
43053: PUSH
43054: LD_INT 22
43056: PUSH
43057: LD_INT 23
43059: PUSH
43060: LD_INT 24
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: LIST
43067: LIST
43068: ST_TO_ADDR
43069: GO 43184
43071: LD_INT 52
43073: DOUBLE
43074: EQUAL
43075: IFTRUE 43079
43077: GO 43105
43079: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
43080: LD_ADDR_VAR 0 3
43084: PUSH
43085: LD_INT 21
43087: PUSH
43088: LD_INT 22
43090: PUSH
43091: LD_INT 23
43093: PUSH
43094: LD_INT 24
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: LIST
43101: LIST
43102: ST_TO_ADDR
43103: GO 43184
43105: LD_INT 53
43107: DOUBLE
43108: EQUAL
43109: IFTRUE 43113
43111: GO 43131
43113: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
43114: LD_ADDR_VAR 0 3
43118: PUSH
43119: LD_INT 23
43121: PUSH
43122: LD_INT 24
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: ST_TO_ADDR
43129: GO 43184
43131: LD_INT 46
43133: DOUBLE
43134: EQUAL
43135: IFTRUE 43139
43137: GO 43157
43139: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
43140: LD_ADDR_VAR 0 3
43144: PUSH
43145: LD_INT 23
43147: PUSH
43148: LD_INT 24
43150: PUSH
43151: EMPTY
43152: LIST
43153: LIST
43154: ST_TO_ADDR
43155: GO 43184
43157: LD_INT 47
43159: DOUBLE
43160: EQUAL
43161: IFTRUE 43165
43163: GO 43183
43165: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43166: LD_ADDR_VAR 0 3
43170: PUSH
43171: LD_INT 23
43173: PUSH
43174: LD_INT 24
43176: PUSH
43177: EMPTY
43178: LIST
43179: LIST
43180: ST_TO_ADDR
43181: GO 43184
43183: POP
// result := ( chassis in result ) ;
43184: LD_ADDR_VAR 0 3
43188: PUSH
43189: LD_VAR 0 1
43193: PUSH
43194: LD_VAR 0 3
43198: IN
43199: ST_TO_ADDR
// end ;
43200: LD_VAR 0 3
43204: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
43205: LD_INT 0
43207: PPUSH
43208: PPUSH
43209: PPUSH
43210: PPUSH
43211: PPUSH
43212: PPUSH
43213: PPUSH
// result := array ;
43214: LD_ADDR_VAR 0 5
43218: PUSH
43219: LD_VAR 0 1
43223: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
43224: LD_VAR 0 1
43228: NOT
43229: PUSH
43230: LD_VAR 0 2
43234: NOT
43235: OR
43236: PUSH
43237: LD_VAR 0 3
43241: NOT
43242: OR
43243: PUSH
43244: LD_VAR 0 2
43248: PUSH
43249: LD_VAR 0 1
43253: GREATER
43254: OR
43255: PUSH
43256: LD_VAR 0 3
43260: PUSH
43261: LD_VAR 0 1
43265: GREATER
43266: OR
43267: IFFALSE 43271
// exit ;
43269: GO 43567
// if direction then
43271: LD_VAR 0 4
43275: IFFALSE 43339
// begin d := 1 ;
43277: LD_ADDR_VAR 0 9
43281: PUSH
43282: LD_INT 1
43284: ST_TO_ADDR
// if i_from > i_to then
43285: LD_VAR 0 2
43289: PUSH
43290: LD_VAR 0 3
43294: GREATER
43295: IFFALSE 43321
// length := ( array - i_from ) + i_to else
43297: LD_ADDR_VAR 0 11
43301: PUSH
43302: LD_VAR 0 1
43306: PUSH
43307: LD_VAR 0 2
43311: MINUS
43312: PUSH
43313: LD_VAR 0 3
43317: PLUS
43318: ST_TO_ADDR
43319: GO 43337
// length := i_to - i_from ;
43321: LD_ADDR_VAR 0 11
43325: PUSH
43326: LD_VAR 0 3
43330: PUSH
43331: LD_VAR 0 2
43335: MINUS
43336: ST_TO_ADDR
// end else
43337: GO 43400
// begin d := - 1 ;
43339: LD_ADDR_VAR 0 9
43343: PUSH
43344: LD_INT 1
43346: NEG
43347: ST_TO_ADDR
// if i_from > i_to then
43348: LD_VAR 0 2
43352: PUSH
43353: LD_VAR 0 3
43357: GREATER
43358: IFFALSE 43378
// length := i_from - i_to else
43360: LD_ADDR_VAR 0 11
43364: PUSH
43365: LD_VAR 0 2
43369: PUSH
43370: LD_VAR 0 3
43374: MINUS
43375: ST_TO_ADDR
43376: GO 43400
// length := ( array - i_to ) + i_from ;
43378: LD_ADDR_VAR 0 11
43382: PUSH
43383: LD_VAR 0 1
43387: PUSH
43388: LD_VAR 0 3
43392: MINUS
43393: PUSH
43394: LD_VAR 0 2
43398: PLUS
43399: ST_TO_ADDR
// end ; if not length then
43400: LD_VAR 0 11
43404: NOT
43405: IFFALSE 43409
// exit ;
43407: GO 43567
// tmp := array ;
43409: LD_ADDR_VAR 0 10
43413: PUSH
43414: LD_VAR 0 1
43418: ST_TO_ADDR
// for i = 1 to length do
43419: LD_ADDR_VAR 0 6
43423: PUSH
43424: DOUBLE
43425: LD_INT 1
43427: DEC
43428: ST_TO_ADDR
43429: LD_VAR 0 11
43433: PUSH
43434: FOR_TO
43435: IFFALSE 43555
// begin for j = 1 to array do
43437: LD_ADDR_VAR 0 7
43441: PUSH
43442: DOUBLE
43443: LD_INT 1
43445: DEC
43446: ST_TO_ADDR
43447: LD_VAR 0 1
43451: PUSH
43452: FOR_TO
43453: IFFALSE 43541
// begin k := j + d ;
43455: LD_ADDR_VAR 0 8
43459: PUSH
43460: LD_VAR 0 7
43464: PUSH
43465: LD_VAR 0 9
43469: PLUS
43470: ST_TO_ADDR
// if k > array then
43471: LD_VAR 0 8
43475: PUSH
43476: LD_VAR 0 1
43480: GREATER
43481: IFFALSE 43491
// k := 1 ;
43483: LD_ADDR_VAR 0 8
43487: PUSH
43488: LD_INT 1
43490: ST_TO_ADDR
// if not k then
43491: LD_VAR 0 8
43495: NOT
43496: IFFALSE 43508
// k := array ;
43498: LD_ADDR_VAR 0 8
43502: PUSH
43503: LD_VAR 0 1
43507: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
43508: LD_ADDR_VAR 0 10
43512: PUSH
43513: LD_VAR 0 10
43517: PPUSH
43518: LD_VAR 0 8
43522: PPUSH
43523: LD_VAR 0 1
43527: PUSH
43528: LD_VAR 0 7
43532: ARRAY
43533: PPUSH
43534: CALL_OW 1
43538: ST_TO_ADDR
// end ;
43539: GO 43452
43541: POP
43542: POP
// array := tmp ;
43543: LD_ADDR_VAR 0 1
43547: PUSH
43548: LD_VAR 0 10
43552: ST_TO_ADDR
// end ;
43553: GO 43434
43555: POP
43556: POP
// result := array ;
43557: LD_ADDR_VAR 0 5
43561: PUSH
43562: LD_VAR 0 1
43566: ST_TO_ADDR
// end ;
43567: LD_VAR 0 5
43571: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
43572: LD_INT 0
43574: PPUSH
43575: PPUSH
// result := 0 ;
43576: LD_ADDR_VAR 0 3
43580: PUSH
43581: LD_INT 0
43583: ST_TO_ADDR
// if not array or not value in array then
43584: LD_VAR 0 1
43588: NOT
43589: PUSH
43590: LD_VAR 0 2
43594: PUSH
43595: LD_VAR 0 1
43599: IN
43600: NOT
43601: OR
43602: IFFALSE 43606
// exit ;
43604: GO 43660
// for i = 1 to array do
43606: LD_ADDR_VAR 0 4
43610: PUSH
43611: DOUBLE
43612: LD_INT 1
43614: DEC
43615: ST_TO_ADDR
43616: LD_VAR 0 1
43620: PUSH
43621: FOR_TO
43622: IFFALSE 43658
// if value = array [ i ] then
43624: LD_VAR 0 2
43628: PUSH
43629: LD_VAR 0 1
43633: PUSH
43634: LD_VAR 0 4
43638: ARRAY
43639: EQUAL
43640: IFFALSE 43656
// begin result := i ;
43642: LD_ADDR_VAR 0 3
43646: PUSH
43647: LD_VAR 0 4
43651: ST_TO_ADDR
// exit ;
43652: POP
43653: POP
43654: GO 43660
// end ;
43656: GO 43621
43658: POP
43659: POP
// end ;
43660: LD_VAR 0 3
43664: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
43665: LD_INT 0
43667: PPUSH
// vc_chassis := chassis ;
43668: LD_ADDR_OWVAR 37
43672: PUSH
43673: LD_VAR 0 1
43677: ST_TO_ADDR
// vc_engine := engine ;
43678: LD_ADDR_OWVAR 39
43682: PUSH
43683: LD_VAR 0 2
43687: ST_TO_ADDR
// vc_control := control ;
43688: LD_ADDR_OWVAR 38
43692: PUSH
43693: LD_VAR 0 3
43697: ST_TO_ADDR
// vc_weapon := weapon ;
43698: LD_ADDR_OWVAR 40
43702: PUSH
43703: LD_VAR 0 4
43707: ST_TO_ADDR
// vc_fuel_battery := fuel ;
43708: LD_ADDR_OWVAR 41
43712: PUSH
43713: LD_VAR 0 5
43717: ST_TO_ADDR
// end ;
43718: LD_VAR 0 6
43722: RET
// export function WantPlant ( unit ) ; var task ; begin
43723: LD_INT 0
43725: PPUSH
43726: PPUSH
// result := false ;
43727: LD_ADDR_VAR 0 2
43731: PUSH
43732: LD_INT 0
43734: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
43735: LD_ADDR_VAR 0 3
43739: PUSH
43740: LD_VAR 0 1
43744: PPUSH
43745: CALL_OW 437
43749: ST_TO_ADDR
// if task then
43750: LD_VAR 0 3
43754: IFFALSE 43782
// if task [ 1 ] [ 1 ] = p then
43756: LD_VAR 0 3
43760: PUSH
43761: LD_INT 1
43763: ARRAY
43764: PUSH
43765: LD_INT 1
43767: ARRAY
43768: PUSH
43769: LD_STRING p
43771: EQUAL
43772: IFFALSE 43782
// result := true ;
43774: LD_ADDR_VAR 0 2
43778: PUSH
43779: LD_INT 1
43781: ST_TO_ADDR
// end ;
43782: LD_VAR 0 2
43786: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
43787: LD_INT 0
43789: PPUSH
43790: PPUSH
43791: PPUSH
43792: PPUSH
// if pos < 1 then
43793: LD_VAR 0 2
43797: PUSH
43798: LD_INT 1
43800: LESS
43801: IFFALSE 43805
// exit ;
43803: GO 44108
// if pos = 1 then
43805: LD_VAR 0 2
43809: PUSH
43810: LD_INT 1
43812: EQUAL
43813: IFFALSE 43846
// result := Replace ( arr , pos [ 1 ] , value ) else
43815: LD_ADDR_VAR 0 4
43819: PUSH
43820: LD_VAR 0 1
43824: PPUSH
43825: LD_VAR 0 2
43829: PUSH
43830: LD_INT 1
43832: ARRAY
43833: PPUSH
43834: LD_VAR 0 3
43838: PPUSH
43839: CALL_OW 1
43843: ST_TO_ADDR
43844: GO 44108
// begin tmp := arr ;
43846: LD_ADDR_VAR 0 6
43850: PUSH
43851: LD_VAR 0 1
43855: ST_TO_ADDR
// s_arr := [ tmp ] ;
43856: LD_ADDR_VAR 0 7
43860: PUSH
43861: LD_VAR 0 6
43865: PUSH
43866: EMPTY
43867: LIST
43868: ST_TO_ADDR
// for i = 1 to pos - 1 do
43869: LD_ADDR_VAR 0 5
43873: PUSH
43874: DOUBLE
43875: LD_INT 1
43877: DEC
43878: ST_TO_ADDR
43879: LD_VAR 0 2
43883: PUSH
43884: LD_INT 1
43886: MINUS
43887: PUSH
43888: FOR_TO
43889: IFFALSE 43934
// begin tmp := tmp [ pos [ i ] ] ;
43891: LD_ADDR_VAR 0 6
43895: PUSH
43896: LD_VAR 0 6
43900: PUSH
43901: LD_VAR 0 2
43905: PUSH
43906: LD_VAR 0 5
43910: ARRAY
43911: ARRAY
43912: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
43913: LD_ADDR_VAR 0 7
43917: PUSH
43918: LD_VAR 0 7
43922: PUSH
43923: LD_VAR 0 6
43927: PUSH
43928: EMPTY
43929: LIST
43930: ADD
43931: ST_TO_ADDR
// end ;
43932: GO 43888
43934: POP
43935: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
43936: LD_ADDR_VAR 0 6
43940: PUSH
43941: LD_VAR 0 6
43945: PPUSH
43946: LD_VAR 0 2
43950: PUSH
43951: LD_VAR 0 2
43955: ARRAY
43956: PPUSH
43957: LD_VAR 0 3
43961: PPUSH
43962: CALL_OW 1
43966: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
43967: LD_ADDR_VAR 0 7
43971: PUSH
43972: LD_VAR 0 7
43976: PPUSH
43977: LD_VAR 0 7
43981: PPUSH
43982: LD_VAR 0 6
43986: PPUSH
43987: CALL_OW 1
43991: ST_TO_ADDR
// for i = s_arr downto 2 do
43992: LD_ADDR_VAR 0 5
43996: PUSH
43997: DOUBLE
43998: LD_VAR 0 7
44002: INC
44003: ST_TO_ADDR
44004: LD_INT 2
44006: PUSH
44007: FOR_DOWNTO
44008: IFFALSE 44092
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
44010: LD_ADDR_VAR 0 6
44014: PUSH
44015: LD_VAR 0 7
44019: PUSH
44020: LD_VAR 0 5
44024: PUSH
44025: LD_INT 1
44027: MINUS
44028: ARRAY
44029: PPUSH
44030: LD_VAR 0 2
44034: PUSH
44035: LD_VAR 0 5
44039: PUSH
44040: LD_INT 1
44042: MINUS
44043: ARRAY
44044: PPUSH
44045: LD_VAR 0 7
44049: PUSH
44050: LD_VAR 0 5
44054: ARRAY
44055: PPUSH
44056: CALL_OW 1
44060: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
44061: LD_ADDR_VAR 0 7
44065: PUSH
44066: LD_VAR 0 7
44070: PPUSH
44071: LD_VAR 0 5
44075: PUSH
44076: LD_INT 1
44078: MINUS
44079: PPUSH
44080: LD_VAR 0 6
44084: PPUSH
44085: CALL_OW 1
44089: ST_TO_ADDR
// end ;
44090: GO 44007
44092: POP
44093: POP
// result := s_arr [ 1 ] ;
44094: LD_ADDR_VAR 0 4
44098: PUSH
44099: LD_VAR 0 7
44103: PUSH
44104: LD_INT 1
44106: ARRAY
44107: ST_TO_ADDR
// end ; end ;
44108: LD_VAR 0 4
44112: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
44113: LD_INT 0
44115: PPUSH
44116: PPUSH
// if not list then
44117: LD_VAR 0 1
44121: NOT
44122: IFFALSE 44126
// exit ;
44124: GO 44217
// i := list [ pos1 ] ;
44126: LD_ADDR_VAR 0 5
44130: PUSH
44131: LD_VAR 0 1
44135: PUSH
44136: LD_VAR 0 2
44140: ARRAY
44141: ST_TO_ADDR
// if not i then
44142: LD_VAR 0 5
44146: NOT
44147: IFFALSE 44151
// exit ;
44149: GO 44217
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
44151: LD_ADDR_VAR 0 1
44155: PUSH
44156: LD_VAR 0 1
44160: PPUSH
44161: LD_VAR 0 2
44165: PPUSH
44166: LD_VAR 0 1
44170: PUSH
44171: LD_VAR 0 3
44175: ARRAY
44176: PPUSH
44177: CALL_OW 1
44181: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
44182: LD_ADDR_VAR 0 1
44186: PUSH
44187: LD_VAR 0 1
44191: PPUSH
44192: LD_VAR 0 3
44196: PPUSH
44197: LD_VAR 0 5
44201: PPUSH
44202: CALL_OW 1
44206: ST_TO_ADDR
// result := list ;
44207: LD_ADDR_VAR 0 4
44211: PUSH
44212: LD_VAR 0 1
44216: ST_TO_ADDR
// end ;
44217: LD_VAR 0 4
44221: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
44222: LD_INT 0
44224: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
44225: LD_ADDR_VAR 0 5
44229: PUSH
44230: LD_VAR 0 1
44234: PPUSH
44235: CALL_OW 250
44239: PPUSH
44240: LD_VAR 0 1
44244: PPUSH
44245: CALL_OW 251
44249: PPUSH
44250: LD_VAR 0 2
44254: PPUSH
44255: LD_VAR 0 3
44259: PPUSH
44260: LD_VAR 0 4
44264: PPUSH
44265: CALL 44275 0 5
44269: ST_TO_ADDR
// end ;
44270: LD_VAR 0 5
44274: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
44275: LD_INT 0
44277: PPUSH
44278: PPUSH
44279: PPUSH
44280: PPUSH
// if not list then
44281: LD_VAR 0 3
44285: NOT
44286: IFFALSE 44290
// exit ;
44288: GO 44678
// result := [ ] ;
44290: LD_ADDR_VAR 0 6
44294: PUSH
44295: EMPTY
44296: ST_TO_ADDR
// for i in list do
44297: LD_ADDR_VAR 0 7
44301: PUSH
44302: LD_VAR 0 3
44306: PUSH
44307: FOR_IN
44308: IFFALSE 44510
// begin tmp := GetDistUnitXY ( i , x , y ) ;
44310: LD_ADDR_VAR 0 9
44314: PUSH
44315: LD_VAR 0 7
44319: PPUSH
44320: LD_VAR 0 1
44324: PPUSH
44325: LD_VAR 0 2
44329: PPUSH
44330: CALL_OW 297
44334: ST_TO_ADDR
// if not result then
44335: LD_VAR 0 6
44339: NOT
44340: IFFALSE 44366
// result := [ [ i , tmp ] ] else
44342: LD_ADDR_VAR 0 6
44346: PUSH
44347: LD_VAR 0 7
44351: PUSH
44352: LD_VAR 0 9
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: EMPTY
44362: LIST
44363: ST_TO_ADDR
44364: GO 44508
// begin if result [ result ] [ 2 ] < tmp then
44366: LD_VAR 0 6
44370: PUSH
44371: LD_VAR 0 6
44375: ARRAY
44376: PUSH
44377: LD_INT 2
44379: ARRAY
44380: PUSH
44381: LD_VAR 0 9
44385: LESS
44386: IFFALSE 44428
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
44388: LD_ADDR_VAR 0 6
44392: PUSH
44393: LD_VAR 0 6
44397: PPUSH
44398: LD_VAR 0 6
44402: PUSH
44403: LD_INT 1
44405: PLUS
44406: PPUSH
44407: LD_VAR 0 7
44411: PUSH
44412: LD_VAR 0 9
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: PPUSH
44421: CALL_OW 2
44425: ST_TO_ADDR
44426: GO 44508
// for j = 1 to result do
44428: LD_ADDR_VAR 0 8
44432: PUSH
44433: DOUBLE
44434: LD_INT 1
44436: DEC
44437: ST_TO_ADDR
44438: LD_VAR 0 6
44442: PUSH
44443: FOR_TO
44444: IFFALSE 44506
// begin if tmp < result [ j ] [ 2 ] then
44446: LD_VAR 0 9
44450: PUSH
44451: LD_VAR 0 6
44455: PUSH
44456: LD_VAR 0 8
44460: ARRAY
44461: PUSH
44462: LD_INT 2
44464: ARRAY
44465: LESS
44466: IFFALSE 44504
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44468: LD_ADDR_VAR 0 6
44472: PUSH
44473: LD_VAR 0 6
44477: PPUSH
44478: LD_VAR 0 8
44482: PPUSH
44483: LD_VAR 0 7
44487: PUSH
44488: LD_VAR 0 9
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PPUSH
44497: CALL_OW 2
44501: ST_TO_ADDR
// break ;
44502: GO 44506
// end ; end ;
44504: GO 44443
44506: POP
44507: POP
// end ; end ;
44508: GO 44307
44510: POP
44511: POP
// if result and not asc then
44512: LD_VAR 0 6
44516: PUSH
44517: LD_VAR 0 4
44521: NOT
44522: AND
44523: IFFALSE 44598
// begin tmp := result ;
44525: LD_ADDR_VAR 0 9
44529: PUSH
44530: LD_VAR 0 6
44534: ST_TO_ADDR
// for i = tmp downto 1 do
44535: LD_ADDR_VAR 0 7
44539: PUSH
44540: DOUBLE
44541: LD_VAR 0 9
44545: INC
44546: ST_TO_ADDR
44547: LD_INT 1
44549: PUSH
44550: FOR_DOWNTO
44551: IFFALSE 44596
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
44553: LD_ADDR_VAR 0 6
44557: PUSH
44558: LD_VAR 0 6
44562: PPUSH
44563: LD_VAR 0 9
44567: PUSH
44568: LD_VAR 0 7
44572: MINUS
44573: PUSH
44574: LD_INT 1
44576: PLUS
44577: PPUSH
44578: LD_VAR 0 9
44582: PUSH
44583: LD_VAR 0 7
44587: ARRAY
44588: PPUSH
44589: CALL_OW 1
44593: ST_TO_ADDR
44594: GO 44550
44596: POP
44597: POP
// end ; tmp := [ ] ;
44598: LD_ADDR_VAR 0 9
44602: PUSH
44603: EMPTY
44604: ST_TO_ADDR
// if mode then
44605: LD_VAR 0 5
44609: IFFALSE 44678
// begin for i = 1 to result do
44611: LD_ADDR_VAR 0 7
44615: PUSH
44616: DOUBLE
44617: LD_INT 1
44619: DEC
44620: ST_TO_ADDR
44621: LD_VAR 0 6
44625: PUSH
44626: FOR_TO
44627: IFFALSE 44666
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
44629: LD_ADDR_VAR 0 9
44633: PUSH
44634: LD_VAR 0 9
44638: PPUSH
44639: LD_VAR 0 7
44643: PPUSH
44644: LD_VAR 0 6
44648: PUSH
44649: LD_VAR 0 7
44653: ARRAY
44654: PUSH
44655: LD_INT 1
44657: ARRAY
44658: PPUSH
44659: CALL_OW 1
44663: ST_TO_ADDR
44664: GO 44626
44666: POP
44667: POP
// result := tmp ;
44668: LD_ADDR_VAR 0 6
44672: PUSH
44673: LD_VAR 0 9
44677: ST_TO_ADDR
// end ; end ;
44678: LD_VAR 0 6
44682: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
44683: LD_INT 0
44685: PPUSH
44686: PPUSH
44687: PPUSH
44688: PPUSH
44689: PPUSH
44690: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
44691: LD_ADDR_VAR 0 5
44695: PUSH
44696: LD_INT 0
44698: PUSH
44699: LD_INT 0
44701: PUSH
44702: LD_INT 0
44704: PUSH
44705: EMPTY
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: LIST
44711: LIST
44712: ST_TO_ADDR
// if not x or not y then
44713: LD_VAR 0 2
44717: NOT
44718: PUSH
44719: LD_VAR 0 3
44723: NOT
44724: OR
44725: IFFALSE 44729
// exit ;
44727: GO 46381
// if not range then
44729: LD_VAR 0 4
44733: NOT
44734: IFFALSE 44744
// range := 10 ;
44736: LD_ADDR_VAR 0 4
44740: PUSH
44741: LD_INT 10
44743: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44744: LD_ADDR_VAR 0 8
44748: PUSH
44749: LD_INT 81
44751: PUSH
44752: LD_VAR 0 1
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 92
44763: PUSH
44764: LD_VAR 0 2
44768: PUSH
44769: LD_VAR 0 3
44773: PUSH
44774: LD_VAR 0 4
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: PUSH
44785: LD_INT 3
44787: PUSH
44788: LD_INT 21
44790: PUSH
44791: LD_INT 3
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: EMPTY
44799: LIST
44800: LIST
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: LIST
44806: PPUSH
44807: CALL_OW 69
44811: ST_TO_ADDR
// if not tmp then
44812: LD_VAR 0 8
44816: NOT
44817: IFFALSE 44821
// exit ;
44819: GO 46381
// for i in tmp do
44821: LD_ADDR_VAR 0 6
44825: PUSH
44826: LD_VAR 0 8
44830: PUSH
44831: FOR_IN
44832: IFFALSE 46356
// begin points := [ 0 , 0 , 0 ] ;
44834: LD_ADDR_VAR 0 9
44838: PUSH
44839: LD_INT 0
44841: PUSH
44842: LD_INT 0
44844: PUSH
44845: LD_INT 0
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: LIST
44852: ST_TO_ADDR
// bpoints := 1 ;
44853: LD_ADDR_VAR 0 10
44857: PUSH
44858: LD_INT 1
44860: ST_TO_ADDR
// case GetType ( i ) of unit_human :
44861: LD_VAR 0 6
44865: PPUSH
44866: CALL_OW 247
44870: PUSH
44871: LD_INT 1
44873: DOUBLE
44874: EQUAL
44875: IFTRUE 44879
44877: GO 45457
44879: POP
// begin if GetClass ( i ) = 1 then
44880: LD_VAR 0 6
44884: PPUSH
44885: CALL_OW 257
44889: PUSH
44890: LD_INT 1
44892: EQUAL
44893: IFFALSE 44914
// points := [ 10 , 5 , 3 ] ;
44895: LD_ADDR_VAR 0 9
44899: PUSH
44900: LD_INT 10
44902: PUSH
44903: LD_INT 5
44905: PUSH
44906: LD_INT 3
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: LIST
44913: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
44914: LD_VAR 0 6
44918: PPUSH
44919: CALL_OW 257
44923: PUSH
44924: LD_INT 2
44926: PUSH
44927: LD_INT 3
44929: PUSH
44930: LD_INT 4
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: LIST
44937: IN
44938: IFFALSE 44959
// points := [ 3 , 2 , 1 ] ;
44940: LD_ADDR_VAR 0 9
44944: PUSH
44945: LD_INT 3
44947: PUSH
44948: LD_INT 2
44950: PUSH
44951: LD_INT 1
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: LIST
44958: ST_TO_ADDR
// if GetClass ( i ) = 5 then
44959: LD_VAR 0 6
44963: PPUSH
44964: CALL_OW 257
44968: PUSH
44969: LD_INT 5
44971: EQUAL
44972: IFFALSE 44993
// points := [ 130 , 5 , 2 ] ;
44974: LD_ADDR_VAR 0 9
44978: PUSH
44979: LD_INT 130
44981: PUSH
44982: LD_INT 5
44984: PUSH
44985: LD_INT 2
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: LIST
44992: ST_TO_ADDR
// if GetClass ( i ) = 8 then
44993: LD_VAR 0 6
44997: PPUSH
44998: CALL_OW 257
45002: PUSH
45003: LD_INT 8
45005: EQUAL
45006: IFFALSE 45027
// points := [ 35 , 35 , 30 ] ;
45008: LD_ADDR_VAR 0 9
45012: PUSH
45013: LD_INT 35
45015: PUSH
45016: LD_INT 35
45018: PUSH
45019: LD_INT 30
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: LIST
45026: ST_TO_ADDR
// if GetClass ( i ) = 9 then
45027: LD_VAR 0 6
45031: PPUSH
45032: CALL_OW 257
45036: PUSH
45037: LD_INT 9
45039: EQUAL
45040: IFFALSE 45061
// points := [ 20 , 55 , 40 ] ;
45042: LD_ADDR_VAR 0 9
45046: PUSH
45047: LD_INT 20
45049: PUSH
45050: LD_INT 55
45052: PUSH
45053: LD_INT 40
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: LIST
45060: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
45061: LD_VAR 0 6
45065: PPUSH
45066: CALL_OW 257
45070: PUSH
45071: LD_INT 12
45073: PUSH
45074: LD_INT 16
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: IN
45081: IFFALSE 45102
// points := [ 5 , 3 , 2 ] ;
45083: LD_ADDR_VAR 0 9
45087: PUSH
45088: LD_INT 5
45090: PUSH
45091: LD_INT 3
45093: PUSH
45094: LD_INT 2
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: LIST
45101: ST_TO_ADDR
// if GetClass ( i ) = 17 then
45102: LD_VAR 0 6
45106: PPUSH
45107: CALL_OW 257
45111: PUSH
45112: LD_INT 17
45114: EQUAL
45115: IFFALSE 45136
// points := [ 100 , 50 , 75 ] ;
45117: LD_ADDR_VAR 0 9
45121: PUSH
45122: LD_INT 100
45124: PUSH
45125: LD_INT 50
45127: PUSH
45128: LD_INT 75
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: LIST
45135: ST_TO_ADDR
// if GetClass ( i ) = 15 then
45136: LD_VAR 0 6
45140: PPUSH
45141: CALL_OW 257
45145: PUSH
45146: LD_INT 15
45148: EQUAL
45149: IFFALSE 45170
// points := [ 10 , 5 , 3 ] ;
45151: LD_ADDR_VAR 0 9
45155: PUSH
45156: LD_INT 10
45158: PUSH
45159: LD_INT 5
45161: PUSH
45162: LD_INT 3
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: LIST
45169: ST_TO_ADDR
// if GetClass ( i ) = 14 then
45170: LD_VAR 0 6
45174: PPUSH
45175: CALL_OW 257
45179: PUSH
45180: LD_INT 14
45182: EQUAL
45183: IFFALSE 45204
// points := [ 10 , 0 , 0 ] ;
45185: LD_ADDR_VAR 0 9
45189: PUSH
45190: LD_INT 10
45192: PUSH
45193: LD_INT 0
45195: PUSH
45196: LD_INT 0
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: LIST
45203: ST_TO_ADDR
// if GetClass ( i ) = 11 then
45204: LD_VAR 0 6
45208: PPUSH
45209: CALL_OW 257
45213: PUSH
45214: LD_INT 11
45216: EQUAL
45217: IFFALSE 45238
// points := [ 30 , 10 , 5 ] ;
45219: LD_ADDR_VAR 0 9
45223: PUSH
45224: LD_INT 30
45226: PUSH
45227: LD_INT 10
45229: PUSH
45230: LD_INT 5
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: LIST
45237: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
45238: LD_VAR 0 1
45242: PPUSH
45243: LD_INT 5
45245: PPUSH
45246: CALL_OW 321
45250: PUSH
45251: LD_INT 2
45253: EQUAL
45254: IFFALSE 45271
// bpoints := bpoints * 1.8 ;
45256: LD_ADDR_VAR 0 10
45260: PUSH
45261: LD_VAR 0 10
45265: PUSH
45266: LD_REAL  1.80000000000000E+0000
45269: MUL
45270: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
45271: LD_VAR 0 6
45275: PPUSH
45276: CALL_OW 257
45280: PUSH
45281: LD_INT 1
45283: PUSH
45284: LD_INT 2
45286: PUSH
45287: LD_INT 3
45289: PUSH
45290: LD_INT 4
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: LIST
45297: LIST
45298: IN
45299: PUSH
45300: LD_VAR 0 1
45304: PPUSH
45305: LD_INT 51
45307: PPUSH
45308: CALL_OW 321
45312: PUSH
45313: LD_INT 2
45315: EQUAL
45316: AND
45317: IFFALSE 45334
// bpoints := bpoints * 1.2 ;
45319: LD_ADDR_VAR 0 10
45323: PUSH
45324: LD_VAR 0 10
45328: PUSH
45329: LD_REAL  1.20000000000000E+0000
45332: MUL
45333: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
45334: LD_VAR 0 6
45338: PPUSH
45339: CALL_OW 257
45343: PUSH
45344: LD_INT 5
45346: PUSH
45347: LD_INT 7
45349: PUSH
45350: LD_INT 9
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: LIST
45357: IN
45358: PUSH
45359: LD_VAR 0 1
45363: PPUSH
45364: LD_INT 52
45366: PPUSH
45367: CALL_OW 321
45371: PUSH
45372: LD_INT 2
45374: EQUAL
45375: AND
45376: IFFALSE 45393
// bpoints := bpoints * 1.5 ;
45378: LD_ADDR_VAR 0 10
45382: PUSH
45383: LD_VAR 0 10
45387: PUSH
45388: LD_REAL  1.50000000000000E+0000
45391: MUL
45392: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
45393: LD_VAR 0 1
45397: PPUSH
45398: LD_INT 66
45400: PPUSH
45401: CALL_OW 321
45405: PUSH
45406: LD_INT 2
45408: EQUAL
45409: IFFALSE 45426
// bpoints := bpoints * 1.1 ;
45411: LD_ADDR_VAR 0 10
45415: PUSH
45416: LD_VAR 0 10
45420: PUSH
45421: LD_REAL  1.10000000000000E+0000
45424: MUL
45425: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
45426: LD_ADDR_VAR 0 10
45430: PUSH
45431: LD_VAR 0 10
45435: PUSH
45436: LD_VAR 0 6
45440: PPUSH
45441: LD_INT 1
45443: PPUSH
45444: CALL_OW 259
45448: PUSH
45449: LD_REAL  1.15000000000000E+0000
45452: MUL
45453: MUL
45454: ST_TO_ADDR
// end ; unit_vehicle :
45455: GO 46285
45457: LD_INT 2
45459: DOUBLE
45460: EQUAL
45461: IFTRUE 45465
45463: GO 46273
45465: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
45466: LD_VAR 0 6
45470: PPUSH
45471: CALL_OW 264
45475: PUSH
45476: LD_INT 2
45478: PUSH
45479: LD_INT 42
45481: PUSH
45482: LD_INT 24
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: LIST
45489: IN
45490: IFFALSE 45511
// points := [ 25 , 5 , 3 ] ;
45492: LD_ADDR_VAR 0 9
45496: PUSH
45497: LD_INT 25
45499: PUSH
45500: LD_INT 5
45502: PUSH
45503: LD_INT 3
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: LIST
45510: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
45511: LD_VAR 0 6
45515: PPUSH
45516: CALL_OW 264
45520: PUSH
45521: LD_INT 4
45523: PUSH
45524: LD_INT 43
45526: PUSH
45527: LD_INT 25
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: LIST
45534: IN
45535: IFFALSE 45556
// points := [ 40 , 15 , 5 ] ;
45537: LD_ADDR_VAR 0 9
45541: PUSH
45542: LD_INT 40
45544: PUSH
45545: LD_INT 15
45547: PUSH
45548: LD_INT 5
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: LIST
45555: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
45556: LD_VAR 0 6
45560: PPUSH
45561: CALL_OW 264
45565: PUSH
45566: LD_INT 3
45568: PUSH
45569: LD_INT 23
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: IN
45576: IFFALSE 45597
// points := [ 7 , 25 , 8 ] ;
45578: LD_ADDR_VAR 0 9
45582: PUSH
45583: LD_INT 7
45585: PUSH
45586: LD_INT 25
45588: PUSH
45589: LD_INT 8
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: LIST
45596: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
45597: LD_VAR 0 6
45601: PPUSH
45602: CALL_OW 264
45606: PUSH
45607: LD_INT 5
45609: PUSH
45610: LD_INT 27
45612: PUSH
45613: LD_INT 44
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: LIST
45620: IN
45621: IFFALSE 45642
// points := [ 14 , 50 , 16 ] ;
45623: LD_ADDR_VAR 0 9
45627: PUSH
45628: LD_INT 14
45630: PUSH
45631: LD_INT 50
45633: PUSH
45634: LD_INT 16
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: LIST
45641: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
45642: LD_VAR 0 6
45646: PPUSH
45647: CALL_OW 264
45651: PUSH
45652: LD_INT 6
45654: PUSH
45655: LD_INT 46
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: IN
45662: IFFALSE 45683
// points := [ 32 , 120 , 70 ] ;
45664: LD_ADDR_VAR 0 9
45668: PUSH
45669: LD_INT 32
45671: PUSH
45672: LD_INT 120
45674: PUSH
45675: LD_INT 70
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: LIST
45682: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
45683: LD_VAR 0 6
45687: PPUSH
45688: CALL_OW 264
45692: PUSH
45693: LD_INT 7
45695: PUSH
45696: LD_INT 28
45698: PUSH
45699: LD_INT 45
45701: PUSH
45702: LD_EXP 65
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: LIST
45711: LIST
45712: IN
45713: IFFALSE 45734
// points := [ 35 , 20 , 45 ] ;
45715: LD_ADDR_VAR 0 9
45719: PUSH
45720: LD_INT 35
45722: PUSH
45723: LD_INT 20
45725: PUSH
45726: LD_INT 45
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: LIST
45733: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
45734: LD_VAR 0 6
45738: PPUSH
45739: CALL_OW 264
45743: PUSH
45744: LD_INT 47
45746: PUSH
45747: EMPTY
45748: LIST
45749: IN
45750: IFFALSE 45771
// points := [ 67 , 45 , 75 ] ;
45752: LD_ADDR_VAR 0 9
45756: PUSH
45757: LD_INT 67
45759: PUSH
45760: LD_INT 45
45762: PUSH
45763: LD_INT 75
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: LIST
45770: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
45771: LD_VAR 0 6
45775: PPUSH
45776: CALL_OW 264
45780: PUSH
45781: LD_INT 26
45783: PUSH
45784: EMPTY
45785: LIST
45786: IN
45787: IFFALSE 45808
// points := [ 120 , 30 , 80 ] ;
45789: LD_ADDR_VAR 0 9
45793: PUSH
45794: LD_INT 120
45796: PUSH
45797: LD_INT 30
45799: PUSH
45800: LD_INT 80
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: LIST
45807: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
45808: LD_VAR 0 6
45812: PPUSH
45813: CALL_OW 264
45817: PUSH
45818: LD_INT 22
45820: PUSH
45821: EMPTY
45822: LIST
45823: IN
45824: IFFALSE 45845
// points := [ 40 , 1 , 1 ] ;
45826: LD_ADDR_VAR 0 9
45830: PUSH
45831: LD_INT 40
45833: PUSH
45834: LD_INT 1
45836: PUSH
45837: LD_INT 1
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: LIST
45844: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
45845: LD_VAR 0 6
45849: PPUSH
45850: CALL_OW 264
45854: PUSH
45855: LD_INT 29
45857: PUSH
45858: EMPTY
45859: LIST
45860: IN
45861: IFFALSE 45882
// points := [ 70 , 200 , 400 ] ;
45863: LD_ADDR_VAR 0 9
45867: PUSH
45868: LD_INT 70
45870: PUSH
45871: LD_INT 200
45873: PUSH
45874: LD_INT 400
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: LIST
45881: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
45882: LD_VAR 0 6
45886: PPUSH
45887: CALL_OW 264
45891: PUSH
45892: LD_INT 14
45894: PUSH
45895: LD_INT 53
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: IN
45902: IFFALSE 45923
// points := [ 40 , 10 , 20 ] ;
45904: LD_ADDR_VAR 0 9
45908: PUSH
45909: LD_INT 40
45911: PUSH
45912: LD_INT 10
45914: PUSH
45915: LD_INT 20
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: LIST
45922: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
45923: LD_VAR 0 6
45927: PPUSH
45928: CALL_OW 264
45932: PUSH
45933: LD_INT 9
45935: PUSH
45936: EMPTY
45937: LIST
45938: IN
45939: IFFALSE 45960
// points := [ 5 , 70 , 20 ] ;
45941: LD_ADDR_VAR 0 9
45945: PUSH
45946: LD_INT 5
45948: PUSH
45949: LD_INT 70
45951: PUSH
45952: LD_INT 20
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: LIST
45959: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
45960: LD_VAR 0 6
45964: PPUSH
45965: CALL_OW 264
45969: PUSH
45970: LD_INT 10
45972: PUSH
45973: EMPTY
45974: LIST
45975: IN
45976: IFFALSE 45997
// points := [ 35 , 110 , 70 ] ;
45978: LD_ADDR_VAR 0 9
45982: PUSH
45983: LD_INT 35
45985: PUSH
45986: LD_INT 110
45988: PUSH
45989: LD_INT 70
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: LIST
45996: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
45997: LD_VAR 0 6
46001: PPUSH
46002: CALL_OW 265
46006: PUSH
46007: LD_INT 25
46009: EQUAL
46010: IFFALSE 46031
// points := [ 80 , 65 , 100 ] ;
46012: LD_ADDR_VAR 0 9
46016: PUSH
46017: LD_INT 80
46019: PUSH
46020: LD_INT 65
46022: PUSH
46023: LD_INT 100
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: LIST
46030: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
46031: LD_VAR 0 6
46035: PPUSH
46036: CALL_OW 263
46040: PUSH
46041: LD_INT 1
46043: EQUAL
46044: IFFALSE 46079
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
46046: LD_ADDR_VAR 0 10
46050: PUSH
46051: LD_VAR 0 10
46055: PUSH
46056: LD_VAR 0 6
46060: PPUSH
46061: CALL_OW 311
46065: PPUSH
46066: LD_INT 3
46068: PPUSH
46069: CALL_OW 259
46073: PUSH
46074: LD_INT 4
46076: MUL
46077: MUL
46078: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
46079: LD_VAR 0 6
46083: PPUSH
46084: CALL_OW 263
46088: PUSH
46089: LD_INT 2
46091: EQUAL
46092: IFFALSE 46143
// begin j := IsControledBy ( i ) ;
46094: LD_ADDR_VAR 0 7
46098: PUSH
46099: LD_VAR 0 6
46103: PPUSH
46104: CALL_OW 312
46108: ST_TO_ADDR
// if j then
46109: LD_VAR 0 7
46113: IFFALSE 46143
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
46115: LD_ADDR_VAR 0 10
46119: PUSH
46120: LD_VAR 0 10
46124: PUSH
46125: LD_VAR 0 7
46129: PPUSH
46130: LD_INT 3
46132: PPUSH
46133: CALL_OW 259
46137: PUSH
46138: LD_INT 3
46140: MUL
46141: MUL
46142: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
46143: LD_VAR 0 6
46147: PPUSH
46148: CALL_OW 264
46152: PUSH
46153: LD_INT 5
46155: PUSH
46156: LD_INT 6
46158: PUSH
46159: LD_INT 46
46161: PUSH
46162: LD_INT 44
46164: PUSH
46165: LD_INT 47
46167: PUSH
46168: LD_INT 45
46170: PUSH
46171: LD_INT 28
46173: PUSH
46174: LD_INT 7
46176: PUSH
46177: LD_INT 27
46179: PUSH
46180: LD_INT 29
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: IN
46195: PUSH
46196: LD_VAR 0 1
46200: PPUSH
46201: LD_INT 52
46203: PPUSH
46204: CALL_OW 321
46208: PUSH
46209: LD_INT 2
46211: EQUAL
46212: AND
46213: IFFALSE 46230
// bpoints := bpoints * 1.2 ;
46215: LD_ADDR_VAR 0 10
46219: PUSH
46220: LD_VAR 0 10
46224: PUSH
46225: LD_REAL  1.20000000000000E+0000
46228: MUL
46229: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
46230: LD_VAR 0 6
46234: PPUSH
46235: CALL_OW 264
46239: PUSH
46240: LD_INT 6
46242: PUSH
46243: LD_INT 46
46245: PUSH
46246: LD_INT 47
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: LIST
46253: IN
46254: IFFALSE 46271
// bpoints := bpoints * 1.2 ;
46256: LD_ADDR_VAR 0 10
46260: PUSH
46261: LD_VAR 0 10
46265: PUSH
46266: LD_REAL  1.20000000000000E+0000
46269: MUL
46270: ST_TO_ADDR
// end ; unit_building :
46271: GO 46285
46273: LD_INT 3
46275: DOUBLE
46276: EQUAL
46277: IFTRUE 46281
46279: GO 46284
46281: POP
// ; end ;
46282: GO 46285
46284: POP
// for j = 1 to 3 do
46285: LD_ADDR_VAR 0 7
46289: PUSH
46290: DOUBLE
46291: LD_INT 1
46293: DEC
46294: ST_TO_ADDR
46295: LD_INT 3
46297: PUSH
46298: FOR_TO
46299: IFFALSE 46352
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
46301: LD_ADDR_VAR 0 5
46305: PUSH
46306: LD_VAR 0 5
46310: PPUSH
46311: LD_VAR 0 7
46315: PPUSH
46316: LD_VAR 0 5
46320: PUSH
46321: LD_VAR 0 7
46325: ARRAY
46326: PUSH
46327: LD_VAR 0 9
46331: PUSH
46332: LD_VAR 0 7
46336: ARRAY
46337: PUSH
46338: LD_VAR 0 10
46342: MUL
46343: PLUS
46344: PPUSH
46345: CALL_OW 1
46349: ST_TO_ADDR
46350: GO 46298
46352: POP
46353: POP
// end ;
46354: GO 44831
46356: POP
46357: POP
// result := Replace ( result , 4 , tmp ) ;
46358: LD_ADDR_VAR 0 5
46362: PUSH
46363: LD_VAR 0 5
46367: PPUSH
46368: LD_INT 4
46370: PPUSH
46371: LD_VAR 0 8
46375: PPUSH
46376: CALL_OW 1
46380: ST_TO_ADDR
// end ;
46381: LD_VAR 0 5
46385: RET
// export function DangerAtRange ( unit , range ) ; begin
46386: LD_INT 0
46388: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
46389: LD_ADDR_VAR 0 3
46393: PUSH
46394: LD_VAR 0 1
46398: PPUSH
46399: CALL_OW 255
46403: PPUSH
46404: LD_VAR 0 1
46408: PPUSH
46409: CALL_OW 250
46413: PPUSH
46414: LD_VAR 0 1
46418: PPUSH
46419: CALL_OW 251
46423: PPUSH
46424: LD_VAR 0 2
46428: PPUSH
46429: CALL 44683 0 4
46433: ST_TO_ADDR
// end ;
46434: LD_VAR 0 3
46438: RET
// export function DangerInArea ( side , area ) ; begin
46439: LD_INT 0
46441: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
46442: LD_ADDR_VAR 0 3
46446: PUSH
46447: LD_VAR 0 2
46451: PPUSH
46452: LD_INT 81
46454: PUSH
46455: LD_VAR 0 1
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: PPUSH
46464: CALL_OW 70
46468: ST_TO_ADDR
// end ;
46469: LD_VAR 0 3
46473: RET
// export function IsExtension ( b ) ; begin
46474: LD_INT 0
46476: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
46477: LD_ADDR_VAR 0 2
46481: PUSH
46482: LD_VAR 0 1
46486: PUSH
46487: LD_INT 23
46489: PUSH
46490: LD_INT 20
46492: PUSH
46493: LD_INT 22
46495: PUSH
46496: LD_INT 17
46498: PUSH
46499: LD_INT 24
46501: PUSH
46502: LD_INT 21
46504: PUSH
46505: LD_INT 19
46507: PUSH
46508: LD_INT 16
46510: PUSH
46511: LD_INT 25
46513: PUSH
46514: LD_INT 18
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: IN
46529: ST_TO_ADDR
// end ;
46530: LD_VAR 0 2
46534: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
46535: LD_INT 0
46537: PPUSH
46538: PPUSH
46539: PPUSH
// result := [ ] ;
46540: LD_ADDR_VAR 0 4
46544: PUSH
46545: EMPTY
46546: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
46547: LD_ADDR_VAR 0 5
46551: PUSH
46552: LD_VAR 0 2
46556: PPUSH
46557: LD_INT 21
46559: PUSH
46560: LD_INT 3
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PPUSH
46567: CALL_OW 70
46571: ST_TO_ADDR
// if not tmp then
46572: LD_VAR 0 5
46576: NOT
46577: IFFALSE 46581
// exit ;
46579: GO 46645
// if checkLink then
46581: LD_VAR 0 3
46585: IFFALSE 46635
// begin for i in tmp do
46587: LD_ADDR_VAR 0 6
46591: PUSH
46592: LD_VAR 0 5
46596: PUSH
46597: FOR_IN
46598: IFFALSE 46633
// if GetBase ( i ) <> base then
46600: LD_VAR 0 6
46604: PPUSH
46605: CALL_OW 274
46609: PUSH
46610: LD_VAR 0 1
46614: NONEQUAL
46615: IFFALSE 46631
// ComLinkToBase ( base , i ) ;
46617: LD_VAR 0 1
46621: PPUSH
46622: LD_VAR 0 6
46626: PPUSH
46627: CALL_OW 169
46631: GO 46597
46633: POP
46634: POP
// end ; result := tmp ;
46635: LD_ADDR_VAR 0 4
46639: PUSH
46640: LD_VAR 0 5
46644: ST_TO_ADDR
// end ;
46645: LD_VAR 0 4
46649: RET
// export function ComComplete ( units , b ) ; var i ; begin
46650: LD_INT 0
46652: PPUSH
46653: PPUSH
// if not units then
46654: LD_VAR 0 1
46658: NOT
46659: IFFALSE 46663
// exit ;
46661: GO 46753
// for i in units do
46663: LD_ADDR_VAR 0 4
46667: PUSH
46668: LD_VAR 0 1
46672: PUSH
46673: FOR_IN
46674: IFFALSE 46751
// if BuildingStatus ( b ) = bs_build then
46676: LD_VAR 0 2
46680: PPUSH
46681: CALL_OW 461
46685: PUSH
46686: LD_INT 1
46688: EQUAL
46689: IFFALSE 46749
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
46691: LD_VAR 0 4
46695: PPUSH
46696: LD_STRING h
46698: PUSH
46699: LD_VAR 0 2
46703: PPUSH
46704: CALL_OW 250
46708: PUSH
46709: LD_VAR 0 2
46713: PPUSH
46714: CALL_OW 251
46718: PUSH
46719: LD_VAR 0 2
46723: PUSH
46724: LD_INT 0
46726: PUSH
46727: LD_INT 0
46729: PUSH
46730: LD_INT 0
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: PUSH
46742: EMPTY
46743: LIST
46744: PPUSH
46745: CALL_OW 446
46749: GO 46673
46751: POP
46752: POP
// end ;
46753: LD_VAR 0 3
46757: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
46758: LD_INT 0
46760: PPUSH
46761: PPUSH
46762: PPUSH
46763: PPUSH
46764: PPUSH
46765: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
46766: LD_VAR 0 1
46770: NOT
46771: PUSH
46772: LD_VAR 0 1
46776: PPUSH
46777: CALL_OW 263
46781: PUSH
46782: LD_INT 2
46784: NONEQUAL
46785: OR
46786: IFFALSE 46790
// exit ;
46788: GO 47106
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
46790: LD_ADDR_VAR 0 6
46794: PUSH
46795: LD_INT 22
46797: PUSH
46798: LD_VAR 0 1
46802: PPUSH
46803: CALL_OW 255
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 2
46814: PUSH
46815: LD_INT 30
46817: PUSH
46818: LD_INT 36
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: PUSH
46825: LD_INT 34
46827: PUSH
46828: LD_INT 31
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: LIST
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PPUSH
46844: CALL_OW 69
46848: ST_TO_ADDR
// if not tmp then
46849: LD_VAR 0 6
46853: NOT
46854: IFFALSE 46858
// exit ;
46856: GO 47106
// result := [ ] ;
46858: LD_ADDR_VAR 0 2
46862: PUSH
46863: EMPTY
46864: ST_TO_ADDR
// for i in tmp do
46865: LD_ADDR_VAR 0 3
46869: PUSH
46870: LD_VAR 0 6
46874: PUSH
46875: FOR_IN
46876: IFFALSE 46947
// begin t := UnitsInside ( i ) ;
46878: LD_ADDR_VAR 0 4
46882: PUSH
46883: LD_VAR 0 3
46887: PPUSH
46888: CALL_OW 313
46892: ST_TO_ADDR
// if t then
46893: LD_VAR 0 4
46897: IFFALSE 46945
// for j in t do
46899: LD_ADDR_VAR 0 7
46903: PUSH
46904: LD_VAR 0 4
46908: PUSH
46909: FOR_IN
46910: IFFALSE 46943
// result := Replace ( result , result + 1 , j ) ;
46912: LD_ADDR_VAR 0 2
46916: PUSH
46917: LD_VAR 0 2
46921: PPUSH
46922: LD_VAR 0 2
46926: PUSH
46927: LD_INT 1
46929: PLUS
46930: PPUSH
46931: LD_VAR 0 7
46935: PPUSH
46936: CALL_OW 1
46940: ST_TO_ADDR
46941: GO 46909
46943: POP
46944: POP
// end ;
46945: GO 46875
46947: POP
46948: POP
// if not result then
46949: LD_VAR 0 2
46953: NOT
46954: IFFALSE 46958
// exit ;
46956: GO 47106
// mech := result [ 1 ] ;
46958: LD_ADDR_VAR 0 5
46962: PUSH
46963: LD_VAR 0 2
46967: PUSH
46968: LD_INT 1
46970: ARRAY
46971: ST_TO_ADDR
// if result > 1 then
46972: LD_VAR 0 2
46976: PUSH
46977: LD_INT 1
46979: GREATER
46980: IFFALSE 47092
// begin for i = 2 to result do
46982: LD_ADDR_VAR 0 3
46986: PUSH
46987: DOUBLE
46988: LD_INT 2
46990: DEC
46991: ST_TO_ADDR
46992: LD_VAR 0 2
46996: PUSH
46997: FOR_TO
46998: IFFALSE 47090
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
47000: LD_ADDR_VAR 0 4
47004: PUSH
47005: LD_VAR 0 2
47009: PUSH
47010: LD_VAR 0 3
47014: ARRAY
47015: PPUSH
47016: LD_INT 3
47018: PPUSH
47019: CALL_OW 259
47023: PUSH
47024: LD_VAR 0 2
47028: PUSH
47029: LD_VAR 0 3
47033: ARRAY
47034: PPUSH
47035: CALL_OW 432
47039: MINUS
47040: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
47041: LD_VAR 0 4
47045: PUSH
47046: LD_VAR 0 5
47050: PPUSH
47051: LD_INT 3
47053: PPUSH
47054: CALL_OW 259
47058: PUSH
47059: LD_VAR 0 5
47063: PPUSH
47064: CALL_OW 432
47068: MINUS
47069: GREATEREQUAL
47070: IFFALSE 47088
// mech := result [ i ] ;
47072: LD_ADDR_VAR 0 5
47076: PUSH
47077: LD_VAR 0 2
47081: PUSH
47082: LD_VAR 0 3
47086: ARRAY
47087: ST_TO_ADDR
// end ;
47088: GO 46997
47090: POP
47091: POP
// end ; ComLinkTo ( vehicle , mech ) ;
47092: LD_VAR 0 1
47096: PPUSH
47097: LD_VAR 0 5
47101: PPUSH
47102: CALL_OW 135
// end ;
47106: LD_VAR 0 2
47110: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
47111: LD_INT 0
47113: PPUSH
47114: PPUSH
47115: PPUSH
47116: PPUSH
47117: PPUSH
47118: PPUSH
47119: PPUSH
47120: PPUSH
47121: PPUSH
47122: PPUSH
47123: PPUSH
47124: PPUSH
47125: PPUSH
// result := [ ] ;
47126: LD_ADDR_VAR 0 7
47130: PUSH
47131: EMPTY
47132: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
47133: LD_VAR 0 1
47137: PPUSH
47138: CALL_OW 266
47142: PUSH
47143: LD_INT 0
47145: PUSH
47146: LD_INT 1
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: IN
47153: NOT
47154: IFFALSE 47158
// exit ;
47156: GO 48792
// if name then
47158: LD_VAR 0 3
47162: IFFALSE 47178
// SetBName ( base_dep , name ) ;
47164: LD_VAR 0 1
47168: PPUSH
47169: LD_VAR 0 3
47173: PPUSH
47174: CALL_OW 500
// base := GetBase ( base_dep ) ;
47178: LD_ADDR_VAR 0 15
47182: PUSH
47183: LD_VAR 0 1
47187: PPUSH
47188: CALL_OW 274
47192: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
47193: LD_ADDR_VAR 0 16
47197: PUSH
47198: LD_VAR 0 1
47202: PPUSH
47203: CALL_OW 255
47207: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
47208: LD_ADDR_VAR 0 17
47212: PUSH
47213: LD_VAR 0 1
47217: PPUSH
47218: CALL_OW 248
47222: ST_TO_ADDR
// if sources then
47223: LD_VAR 0 5
47227: IFFALSE 47274
// for i = 1 to 3 do
47229: LD_ADDR_VAR 0 8
47233: PUSH
47234: DOUBLE
47235: LD_INT 1
47237: DEC
47238: ST_TO_ADDR
47239: LD_INT 3
47241: PUSH
47242: FOR_TO
47243: IFFALSE 47272
// AddResourceType ( base , i , sources [ i ] ) ;
47245: LD_VAR 0 15
47249: PPUSH
47250: LD_VAR 0 8
47254: PPUSH
47255: LD_VAR 0 5
47259: PUSH
47260: LD_VAR 0 8
47264: ARRAY
47265: PPUSH
47266: CALL_OW 276
47270: GO 47242
47272: POP
47273: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
47274: LD_ADDR_VAR 0 18
47278: PUSH
47279: LD_VAR 0 15
47283: PPUSH
47284: LD_VAR 0 2
47288: PPUSH
47289: LD_INT 1
47291: PPUSH
47292: CALL 46535 0 3
47296: ST_TO_ADDR
// InitHc ;
47297: CALL_OW 19
// InitUc ;
47301: CALL_OW 18
// uc_side := side ;
47305: LD_ADDR_OWVAR 20
47309: PUSH
47310: LD_VAR 0 16
47314: ST_TO_ADDR
// uc_nation := nation ;
47315: LD_ADDR_OWVAR 21
47319: PUSH
47320: LD_VAR 0 17
47324: ST_TO_ADDR
// if buildings then
47325: LD_VAR 0 18
47329: IFFALSE 48651
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
47331: LD_ADDR_VAR 0 19
47335: PUSH
47336: LD_VAR 0 18
47340: PPUSH
47341: LD_INT 2
47343: PUSH
47344: LD_INT 30
47346: PUSH
47347: LD_INT 29
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 30
47356: PUSH
47357: LD_INT 30
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: LIST
47368: PPUSH
47369: CALL_OW 72
47373: ST_TO_ADDR
// if tmp then
47374: LD_VAR 0 19
47378: IFFALSE 47426
// for i in tmp do
47380: LD_ADDR_VAR 0 8
47384: PUSH
47385: LD_VAR 0 19
47389: PUSH
47390: FOR_IN
47391: IFFALSE 47424
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
47393: LD_VAR 0 8
47397: PPUSH
47398: CALL_OW 250
47402: PPUSH
47403: LD_VAR 0 8
47407: PPUSH
47408: CALL_OW 251
47412: PPUSH
47413: LD_VAR 0 16
47417: PPUSH
47418: CALL_OW 441
47422: GO 47390
47424: POP
47425: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
47426: LD_VAR 0 18
47430: PPUSH
47431: LD_INT 2
47433: PUSH
47434: LD_INT 30
47436: PUSH
47437: LD_INT 32
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 30
47446: PUSH
47447: LD_INT 33
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: LIST
47458: PPUSH
47459: CALL_OW 72
47463: IFFALSE 47551
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
47465: LD_ADDR_VAR 0 8
47469: PUSH
47470: LD_VAR 0 18
47474: PPUSH
47475: LD_INT 2
47477: PUSH
47478: LD_INT 30
47480: PUSH
47481: LD_INT 32
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 30
47490: PUSH
47491: LD_INT 33
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: LIST
47502: PPUSH
47503: CALL_OW 72
47507: PUSH
47508: FOR_IN
47509: IFFALSE 47549
// begin if not GetBWeapon ( i ) then
47511: LD_VAR 0 8
47515: PPUSH
47516: CALL_OW 269
47520: NOT
47521: IFFALSE 47547
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
47523: LD_VAR 0 8
47527: PPUSH
47528: LD_VAR 0 8
47532: PPUSH
47533: LD_VAR 0 2
47537: PPUSH
47538: CALL 48797 0 2
47542: PPUSH
47543: CALL_OW 431
// end ;
47547: GO 47508
47549: POP
47550: POP
// end ; for i = 1 to personel do
47551: LD_ADDR_VAR 0 8
47555: PUSH
47556: DOUBLE
47557: LD_INT 1
47559: DEC
47560: ST_TO_ADDR
47561: LD_VAR 0 6
47565: PUSH
47566: FOR_TO
47567: IFFALSE 48631
// begin if i > 4 then
47569: LD_VAR 0 8
47573: PUSH
47574: LD_INT 4
47576: GREATER
47577: IFFALSE 47581
// break ;
47579: GO 48631
// case i of 1 :
47581: LD_VAR 0 8
47585: PUSH
47586: LD_INT 1
47588: DOUBLE
47589: EQUAL
47590: IFTRUE 47594
47592: GO 47674
47594: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
47595: LD_ADDR_VAR 0 12
47599: PUSH
47600: LD_VAR 0 18
47604: PPUSH
47605: LD_INT 22
47607: PUSH
47608: LD_VAR 0 16
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 58
47619: PUSH
47620: EMPTY
47621: LIST
47622: PUSH
47623: LD_INT 2
47625: PUSH
47626: LD_INT 30
47628: PUSH
47629: LD_INT 32
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: LD_INT 30
47638: PUSH
47639: LD_INT 4
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 30
47648: PUSH
47649: LD_INT 5
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: LIST
47660: LIST
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: LIST
47666: PPUSH
47667: CALL_OW 72
47671: ST_TO_ADDR
47672: GO 47896
47674: LD_INT 2
47676: DOUBLE
47677: EQUAL
47678: IFTRUE 47682
47680: GO 47744
47682: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
47683: LD_ADDR_VAR 0 12
47687: PUSH
47688: LD_VAR 0 18
47692: PPUSH
47693: LD_INT 22
47695: PUSH
47696: LD_VAR 0 16
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: LD_INT 2
47707: PUSH
47708: LD_INT 30
47710: PUSH
47711: LD_INT 0
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: LD_INT 30
47720: PUSH
47721: LD_INT 1
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: LIST
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PPUSH
47737: CALL_OW 72
47741: ST_TO_ADDR
47742: GO 47896
47744: LD_INT 3
47746: DOUBLE
47747: EQUAL
47748: IFTRUE 47752
47750: GO 47814
47752: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
47753: LD_ADDR_VAR 0 12
47757: PUSH
47758: LD_VAR 0 18
47762: PPUSH
47763: LD_INT 22
47765: PUSH
47766: LD_VAR 0 16
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 2
47777: PUSH
47778: LD_INT 30
47780: PUSH
47781: LD_INT 2
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 30
47790: PUSH
47791: LD_INT 3
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: LIST
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PPUSH
47807: CALL_OW 72
47811: ST_TO_ADDR
47812: GO 47896
47814: LD_INT 4
47816: DOUBLE
47817: EQUAL
47818: IFTRUE 47822
47820: GO 47895
47822: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
47823: LD_ADDR_VAR 0 12
47827: PUSH
47828: LD_VAR 0 18
47832: PPUSH
47833: LD_INT 22
47835: PUSH
47836: LD_VAR 0 16
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: PUSH
47845: LD_INT 2
47847: PUSH
47848: LD_INT 30
47850: PUSH
47851: LD_INT 6
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: LD_INT 30
47860: PUSH
47861: LD_INT 7
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: LD_INT 30
47870: PUSH
47871: LD_INT 8
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PPUSH
47888: CALL_OW 72
47892: ST_TO_ADDR
47893: GO 47896
47895: POP
// if i = 1 then
47896: LD_VAR 0 8
47900: PUSH
47901: LD_INT 1
47903: EQUAL
47904: IFFALSE 48015
// begin tmp := [ ] ;
47906: LD_ADDR_VAR 0 19
47910: PUSH
47911: EMPTY
47912: ST_TO_ADDR
// for j in f do
47913: LD_ADDR_VAR 0 9
47917: PUSH
47918: LD_VAR 0 12
47922: PUSH
47923: FOR_IN
47924: IFFALSE 47997
// if GetBType ( j ) = b_bunker then
47926: LD_VAR 0 9
47930: PPUSH
47931: CALL_OW 266
47935: PUSH
47936: LD_INT 32
47938: EQUAL
47939: IFFALSE 47966
// tmp := Insert ( tmp , 1 , j ) else
47941: LD_ADDR_VAR 0 19
47945: PUSH
47946: LD_VAR 0 19
47950: PPUSH
47951: LD_INT 1
47953: PPUSH
47954: LD_VAR 0 9
47958: PPUSH
47959: CALL_OW 2
47963: ST_TO_ADDR
47964: GO 47995
// tmp := Insert ( tmp , tmp + 1 , j ) ;
47966: LD_ADDR_VAR 0 19
47970: PUSH
47971: LD_VAR 0 19
47975: PPUSH
47976: LD_VAR 0 19
47980: PUSH
47981: LD_INT 1
47983: PLUS
47984: PPUSH
47985: LD_VAR 0 9
47989: PPUSH
47990: CALL_OW 2
47994: ST_TO_ADDR
47995: GO 47923
47997: POP
47998: POP
// if tmp then
47999: LD_VAR 0 19
48003: IFFALSE 48015
// f := tmp ;
48005: LD_ADDR_VAR 0 12
48009: PUSH
48010: LD_VAR 0 19
48014: ST_TO_ADDR
// end ; x := personel [ i ] ;
48015: LD_ADDR_VAR 0 13
48019: PUSH
48020: LD_VAR 0 6
48024: PUSH
48025: LD_VAR 0 8
48029: ARRAY
48030: ST_TO_ADDR
// if x = - 1 then
48031: LD_VAR 0 13
48035: PUSH
48036: LD_INT 1
48038: NEG
48039: EQUAL
48040: IFFALSE 48249
// begin for j in f do
48042: LD_ADDR_VAR 0 9
48046: PUSH
48047: LD_VAR 0 12
48051: PUSH
48052: FOR_IN
48053: IFFALSE 48245
// repeat InitHc ;
48055: CALL_OW 19
// if GetBType ( j ) = b_barracks then
48059: LD_VAR 0 9
48063: PPUSH
48064: CALL_OW 266
48068: PUSH
48069: LD_INT 5
48071: EQUAL
48072: IFFALSE 48142
// begin if UnitsInside ( j ) < 3 then
48074: LD_VAR 0 9
48078: PPUSH
48079: CALL_OW 313
48083: PUSH
48084: LD_INT 3
48086: LESS
48087: IFFALSE 48123
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48089: LD_INT 0
48091: PPUSH
48092: LD_INT 5
48094: PUSH
48095: LD_INT 8
48097: PUSH
48098: LD_INT 9
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: LIST
48105: PUSH
48106: LD_VAR 0 17
48110: ARRAY
48111: PPUSH
48112: LD_VAR 0 4
48116: PPUSH
48117: CALL_OW 380
48121: GO 48140
// PrepareHuman ( false , i , skill ) ;
48123: LD_INT 0
48125: PPUSH
48126: LD_VAR 0 8
48130: PPUSH
48131: LD_VAR 0 4
48135: PPUSH
48136: CALL_OW 380
// end else
48140: GO 48159
// PrepareHuman ( false , i , skill ) ;
48142: LD_INT 0
48144: PPUSH
48145: LD_VAR 0 8
48149: PPUSH
48150: LD_VAR 0 4
48154: PPUSH
48155: CALL_OW 380
// un := CreateHuman ;
48159: LD_ADDR_VAR 0 14
48163: PUSH
48164: CALL_OW 44
48168: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48169: LD_ADDR_VAR 0 7
48173: PUSH
48174: LD_VAR 0 7
48178: PPUSH
48179: LD_INT 1
48181: PPUSH
48182: LD_VAR 0 14
48186: PPUSH
48187: CALL_OW 2
48191: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
48192: LD_VAR 0 14
48196: PPUSH
48197: LD_VAR 0 9
48201: PPUSH
48202: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
48206: LD_VAR 0 9
48210: PPUSH
48211: CALL_OW 313
48215: PUSH
48216: LD_INT 6
48218: EQUAL
48219: PUSH
48220: LD_VAR 0 9
48224: PPUSH
48225: CALL_OW 266
48229: PUSH
48230: LD_INT 32
48232: PUSH
48233: LD_INT 31
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: IN
48240: OR
48241: IFFALSE 48055
48243: GO 48052
48245: POP
48246: POP
// end else
48247: GO 48629
// for j = 1 to x do
48249: LD_ADDR_VAR 0 9
48253: PUSH
48254: DOUBLE
48255: LD_INT 1
48257: DEC
48258: ST_TO_ADDR
48259: LD_VAR 0 13
48263: PUSH
48264: FOR_TO
48265: IFFALSE 48627
// begin InitHc ;
48267: CALL_OW 19
// if not f then
48271: LD_VAR 0 12
48275: NOT
48276: IFFALSE 48365
// begin PrepareHuman ( false , i , skill ) ;
48278: LD_INT 0
48280: PPUSH
48281: LD_VAR 0 8
48285: PPUSH
48286: LD_VAR 0 4
48290: PPUSH
48291: CALL_OW 380
// un := CreateHuman ;
48295: LD_ADDR_VAR 0 14
48299: PUSH
48300: CALL_OW 44
48304: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48305: LD_ADDR_VAR 0 7
48309: PUSH
48310: LD_VAR 0 7
48314: PPUSH
48315: LD_INT 1
48317: PPUSH
48318: LD_VAR 0 14
48322: PPUSH
48323: CALL_OW 2
48327: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48328: LD_VAR 0 14
48332: PPUSH
48333: LD_VAR 0 1
48337: PPUSH
48338: CALL_OW 250
48342: PPUSH
48343: LD_VAR 0 1
48347: PPUSH
48348: CALL_OW 251
48352: PPUSH
48353: LD_INT 10
48355: PPUSH
48356: LD_INT 0
48358: PPUSH
48359: CALL_OW 50
// continue ;
48363: GO 48264
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
48365: LD_VAR 0 12
48369: PUSH
48370: LD_INT 1
48372: ARRAY
48373: PPUSH
48374: CALL_OW 313
48378: PUSH
48379: LD_VAR 0 12
48383: PUSH
48384: LD_INT 1
48386: ARRAY
48387: PPUSH
48388: CALL_OW 266
48392: PUSH
48393: LD_INT 32
48395: PUSH
48396: LD_INT 31
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: IN
48403: AND
48404: PUSH
48405: LD_VAR 0 12
48409: PUSH
48410: LD_INT 1
48412: ARRAY
48413: PPUSH
48414: CALL_OW 313
48418: PUSH
48419: LD_INT 6
48421: EQUAL
48422: OR
48423: IFFALSE 48443
// f := Delete ( f , 1 ) ;
48425: LD_ADDR_VAR 0 12
48429: PUSH
48430: LD_VAR 0 12
48434: PPUSH
48435: LD_INT 1
48437: PPUSH
48438: CALL_OW 3
48442: ST_TO_ADDR
// if not f then
48443: LD_VAR 0 12
48447: NOT
48448: IFFALSE 48466
// begin x := x + 2 ;
48450: LD_ADDR_VAR 0 13
48454: PUSH
48455: LD_VAR 0 13
48459: PUSH
48460: LD_INT 2
48462: PLUS
48463: ST_TO_ADDR
// continue ;
48464: GO 48264
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
48466: LD_VAR 0 12
48470: PUSH
48471: LD_INT 1
48473: ARRAY
48474: PPUSH
48475: CALL_OW 266
48479: PUSH
48480: LD_INT 5
48482: EQUAL
48483: IFFALSE 48557
// begin if UnitsInside ( f [ 1 ] ) < 3 then
48485: LD_VAR 0 12
48489: PUSH
48490: LD_INT 1
48492: ARRAY
48493: PPUSH
48494: CALL_OW 313
48498: PUSH
48499: LD_INT 3
48501: LESS
48502: IFFALSE 48538
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48504: LD_INT 0
48506: PPUSH
48507: LD_INT 5
48509: PUSH
48510: LD_INT 8
48512: PUSH
48513: LD_INT 9
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: LIST
48520: PUSH
48521: LD_VAR 0 17
48525: ARRAY
48526: PPUSH
48527: LD_VAR 0 4
48531: PPUSH
48532: CALL_OW 380
48536: GO 48555
// PrepareHuman ( false , i , skill ) ;
48538: LD_INT 0
48540: PPUSH
48541: LD_VAR 0 8
48545: PPUSH
48546: LD_VAR 0 4
48550: PPUSH
48551: CALL_OW 380
// end else
48555: GO 48574
// PrepareHuman ( false , i , skill ) ;
48557: LD_INT 0
48559: PPUSH
48560: LD_VAR 0 8
48564: PPUSH
48565: LD_VAR 0 4
48569: PPUSH
48570: CALL_OW 380
// un := CreateHuman ;
48574: LD_ADDR_VAR 0 14
48578: PUSH
48579: CALL_OW 44
48583: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48584: LD_ADDR_VAR 0 7
48588: PUSH
48589: LD_VAR 0 7
48593: PPUSH
48594: LD_INT 1
48596: PPUSH
48597: LD_VAR 0 14
48601: PPUSH
48602: CALL_OW 2
48606: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
48607: LD_VAR 0 14
48611: PPUSH
48612: LD_VAR 0 12
48616: PUSH
48617: LD_INT 1
48619: ARRAY
48620: PPUSH
48621: CALL_OW 52
// end ;
48625: GO 48264
48627: POP
48628: POP
// end ;
48629: GO 47566
48631: POP
48632: POP
// result := result ^ buildings ;
48633: LD_ADDR_VAR 0 7
48637: PUSH
48638: LD_VAR 0 7
48642: PUSH
48643: LD_VAR 0 18
48647: ADD
48648: ST_TO_ADDR
// end else
48649: GO 48792
// begin for i = 1 to personel do
48651: LD_ADDR_VAR 0 8
48655: PUSH
48656: DOUBLE
48657: LD_INT 1
48659: DEC
48660: ST_TO_ADDR
48661: LD_VAR 0 6
48665: PUSH
48666: FOR_TO
48667: IFFALSE 48790
// begin if i > 4 then
48669: LD_VAR 0 8
48673: PUSH
48674: LD_INT 4
48676: GREATER
48677: IFFALSE 48681
// break ;
48679: GO 48790
// x := personel [ i ] ;
48681: LD_ADDR_VAR 0 13
48685: PUSH
48686: LD_VAR 0 6
48690: PUSH
48691: LD_VAR 0 8
48695: ARRAY
48696: ST_TO_ADDR
// if x = - 1 then
48697: LD_VAR 0 13
48701: PUSH
48702: LD_INT 1
48704: NEG
48705: EQUAL
48706: IFFALSE 48710
// continue ;
48708: GO 48666
// PrepareHuman ( false , i , skill ) ;
48710: LD_INT 0
48712: PPUSH
48713: LD_VAR 0 8
48717: PPUSH
48718: LD_VAR 0 4
48722: PPUSH
48723: CALL_OW 380
// un := CreateHuman ;
48727: LD_ADDR_VAR 0 14
48731: PUSH
48732: CALL_OW 44
48736: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48737: LD_VAR 0 14
48741: PPUSH
48742: LD_VAR 0 1
48746: PPUSH
48747: CALL_OW 250
48751: PPUSH
48752: LD_VAR 0 1
48756: PPUSH
48757: CALL_OW 251
48761: PPUSH
48762: LD_INT 10
48764: PPUSH
48765: LD_INT 0
48767: PPUSH
48768: CALL_OW 50
// result := result ^ un ;
48772: LD_ADDR_VAR 0 7
48776: PUSH
48777: LD_VAR 0 7
48781: PUSH
48782: LD_VAR 0 14
48786: ADD
48787: ST_TO_ADDR
// end ;
48788: GO 48666
48790: POP
48791: POP
// end ; end ;
48792: LD_VAR 0 7
48796: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
48797: LD_INT 0
48799: PPUSH
48800: PPUSH
48801: PPUSH
48802: PPUSH
48803: PPUSH
48804: PPUSH
48805: PPUSH
48806: PPUSH
48807: PPUSH
48808: PPUSH
48809: PPUSH
48810: PPUSH
48811: PPUSH
48812: PPUSH
48813: PPUSH
48814: PPUSH
// result := false ;
48815: LD_ADDR_VAR 0 3
48819: PUSH
48820: LD_INT 0
48822: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
48823: LD_VAR 0 1
48827: NOT
48828: PUSH
48829: LD_VAR 0 1
48833: PPUSH
48834: CALL_OW 266
48838: PUSH
48839: LD_INT 32
48841: PUSH
48842: LD_INT 33
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: IN
48849: NOT
48850: OR
48851: IFFALSE 48855
// exit ;
48853: GO 49964
// nat := GetNation ( tower ) ;
48855: LD_ADDR_VAR 0 12
48859: PUSH
48860: LD_VAR 0 1
48864: PPUSH
48865: CALL_OW 248
48869: ST_TO_ADDR
// side := GetSide ( tower ) ;
48870: LD_ADDR_VAR 0 16
48874: PUSH
48875: LD_VAR 0 1
48879: PPUSH
48880: CALL_OW 255
48884: ST_TO_ADDR
// x := GetX ( tower ) ;
48885: LD_ADDR_VAR 0 10
48889: PUSH
48890: LD_VAR 0 1
48894: PPUSH
48895: CALL_OW 250
48899: ST_TO_ADDR
// y := GetY ( tower ) ;
48900: LD_ADDR_VAR 0 11
48904: PUSH
48905: LD_VAR 0 1
48909: PPUSH
48910: CALL_OW 251
48914: ST_TO_ADDR
// if not x or not y then
48915: LD_VAR 0 10
48919: NOT
48920: PUSH
48921: LD_VAR 0 11
48925: NOT
48926: OR
48927: IFFALSE 48931
// exit ;
48929: GO 49964
// weapon := 0 ;
48931: LD_ADDR_VAR 0 18
48935: PUSH
48936: LD_INT 0
48938: ST_TO_ADDR
// fac_list := [ ] ;
48939: LD_ADDR_VAR 0 17
48943: PUSH
48944: EMPTY
48945: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
48946: LD_ADDR_VAR 0 6
48950: PUSH
48951: LD_VAR 0 1
48955: PPUSH
48956: CALL_OW 274
48960: PPUSH
48961: LD_VAR 0 2
48965: PPUSH
48966: LD_INT 0
48968: PPUSH
48969: CALL 46535 0 3
48973: PPUSH
48974: LD_INT 30
48976: PUSH
48977: LD_INT 3
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PPUSH
48984: CALL_OW 72
48988: ST_TO_ADDR
// if not factories then
48989: LD_VAR 0 6
48993: NOT
48994: IFFALSE 48998
// exit ;
48996: GO 49964
// for i in factories do
48998: LD_ADDR_VAR 0 8
49002: PUSH
49003: LD_VAR 0 6
49007: PUSH
49008: FOR_IN
49009: IFFALSE 49034
// fac_list := fac_list union AvailableWeaponList ( i ) ;
49011: LD_ADDR_VAR 0 17
49015: PUSH
49016: LD_VAR 0 17
49020: PUSH
49021: LD_VAR 0 8
49025: PPUSH
49026: CALL_OW 478
49030: UNION
49031: ST_TO_ADDR
49032: GO 49008
49034: POP
49035: POP
// if not fac_list then
49036: LD_VAR 0 17
49040: NOT
49041: IFFALSE 49045
// exit ;
49043: GO 49964
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
49045: LD_ADDR_VAR 0 5
49049: PUSH
49050: LD_INT 4
49052: PUSH
49053: LD_INT 5
49055: PUSH
49056: LD_INT 9
49058: PUSH
49059: LD_INT 10
49061: PUSH
49062: LD_INT 6
49064: PUSH
49065: LD_INT 7
49067: PUSH
49068: LD_INT 11
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 27
49082: PUSH
49083: LD_INT 28
49085: PUSH
49086: LD_INT 26
49088: PUSH
49089: LD_INT 30
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: LIST
49096: LIST
49097: PUSH
49098: LD_INT 43
49100: PUSH
49101: LD_INT 44
49103: PUSH
49104: LD_INT 46
49106: PUSH
49107: LD_INT 45
49109: PUSH
49110: LD_INT 47
49112: PUSH
49113: LD_INT 49
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: LIST
49128: PUSH
49129: LD_VAR 0 12
49133: ARRAY
49134: ST_TO_ADDR
// list := list isect fac_list ;
49135: LD_ADDR_VAR 0 5
49139: PUSH
49140: LD_VAR 0 5
49144: PUSH
49145: LD_VAR 0 17
49149: ISECT
49150: ST_TO_ADDR
// if not list then
49151: LD_VAR 0 5
49155: NOT
49156: IFFALSE 49160
// exit ;
49158: GO 49964
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
49160: LD_VAR 0 12
49164: PUSH
49165: LD_INT 3
49167: EQUAL
49168: PUSH
49169: LD_INT 49
49171: PUSH
49172: LD_VAR 0 5
49176: IN
49177: AND
49178: PUSH
49179: LD_INT 31
49181: PPUSH
49182: LD_VAR 0 16
49186: PPUSH
49187: CALL_OW 321
49191: PUSH
49192: LD_INT 2
49194: EQUAL
49195: AND
49196: IFFALSE 49256
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
49198: LD_INT 22
49200: PUSH
49201: LD_VAR 0 16
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: LD_INT 35
49212: PUSH
49213: LD_INT 49
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 91
49222: PUSH
49223: LD_VAR 0 1
49227: PUSH
49228: LD_INT 10
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: LIST
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: LIST
49240: PPUSH
49241: CALL_OW 69
49245: NOT
49246: IFFALSE 49256
// weapon := ru_time_lapser ;
49248: LD_ADDR_VAR 0 18
49252: PUSH
49253: LD_INT 49
49255: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
49256: LD_VAR 0 12
49260: PUSH
49261: LD_INT 1
49263: PUSH
49264: LD_INT 2
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: IN
49271: PUSH
49272: LD_INT 11
49274: PUSH
49275: LD_VAR 0 5
49279: IN
49280: PUSH
49281: LD_INT 30
49283: PUSH
49284: LD_VAR 0 5
49288: IN
49289: OR
49290: AND
49291: PUSH
49292: LD_INT 6
49294: PPUSH
49295: LD_VAR 0 16
49299: PPUSH
49300: CALL_OW 321
49304: PUSH
49305: LD_INT 2
49307: EQUAL
49308: AND
49309: IFFALSE 49474
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
49311: LD_INT 22
49313: PUSH
49314: LD_VAR 0 16
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: PUSH
49323: LD_INT 2
49325: PUSH
49326: LD_INT 35
49328: PUSH
49329: LD_INT 11
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 35
49338: PUSH
49339: LD_INT 30
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 91
49353: PUSH
49354: LD_VAR 0 1
49358: PUSH
49359: LD_INT 18
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: LIST
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: LIST
49371: PPUSH
49372: CALL_OW 69
49376: NOT
49377: PUSH
49378: LD_INT 22
49380: PUSH
49381: LD_VAR 0 16
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 2
49392: PUSH
49393: LD_INT 30
49395: PUSH
49396: LD_INT 32
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: LD_INT 30
49405: PUSH
49406: LD_INT 33
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 91
49420: PUSH
49421: LD_VAR 0 1
49425: PUSH
49426: LD_INT 12
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: LIST
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: LIST
49438: PUSH
49439: EMPTY
49440: LIST
49441: PPUSH
49442: CALL_OW 69
49446: PUSH
49447: LD_INT 2
49449: GREATER
49450: AND
49451: IFFALSE 49474
// weapon := [ us_radar , ar_radar ] [ nat ] ;
49453: LD_ADDR_VAR 0 18
49457: PUSH
49458: LD_INT 11
49460: PUSH
49461: LD_INT 30
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_VAR 0 12
49472: ARRAY
49473: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
49474: LD_VAR 0 18
49478: NOT
49479: PUSH
49480: LD_INT 40
49482: PPUSH
49483: LD_VAR 0 16
49487: PPUSH
49488: CALL_OW 321
49492: PUSH
49493: LD_INT 2
49495: EQUAL
49496: AND
49497: PUSH
49498: LD_INT 7
49500: PUSH
49501: LD_VAR 0 5
49505: IN
49506: PUSH
49507: LD_INT 28
49509: PUSH
49510: LD_VAR 0 5
49514: IN
49515: OR
49516: PUSH
49517: LD_INT 45
49519: PUSH
49520: LD_VAR 0 5
49524: IN
49525: OR
49526: AND
49527: IFFALSE 49781
// begin hex := GetHexInfo ( x , y ) ;
49529: LD_ADDR_VAR 0 4
49533: PUSH
49534: LD_VAR 0 10
49538: PPUSH
49539: LD_VAR 0 11
49543: PPUSH
49544: CALL_OW 546
49548: ST_TO_ADDR
// if hex [ 1 ] then
49549: LD_VAR 0 4
49553: PUSH
49554: LD_INT 1
49556: ARRAY
49557: IFFALSE 49561
// exit ;
49559: GO 49964
// height := hex [ 2 ] ;
49561: LD_ADDR_VAR 0 15
49565: PUSH
49566: LD_VAR 0 4
49570: PUSH
49571: LD_INT 2
49573: ARRAY
49574: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
49575: LD_ADDR_VAR 0 14
49579: PUSH
49580: LD_INT 0
49582: PUSH
49583: LD_INT 2
49585: PUSH
49586: LD_INT 3
49588: PUSH
49589: LD_INT 5
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: ST_TO_ADDR
// for i in tmp do
49598: LD_ADDR_VAR 0 8
49602: PUSH
49603: LD_VAR 0 14
49607: PUSH
49608: FOR_IN
49609: IFFALSE 49779
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
49611: LD_ADDR_VAR 0 9
49615: PUSH
49616: LD_VAR 0 10
49620: PPUSH
49621: LD_VAR 0 8
49625: PPUSH
49626: LD_INT 5
49628: PPUSH
49629: CALL_OW 272
49633: PUSH
49634: LD_VAR 0 11
49638: PPUSH
49639: LD_VAR 0 8
49643: PPUSH
49644: LD_INT 5
49646: PPUSH
49647: CALL_OW 273
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
49656: LD_VAR 0 9
49660: PUSH
49661: LD_INT 1
49663: ARRAY
49664: PPUSH
49665: LD_VAR 0 9
49669: PUSH
49670: LD_INT 2
49672: ARRAY
49673: PPUSH
49674: CALL_OW 488
49678: IFFALSE 49777
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
49680: LD_ADDR_VAR 0 4
49684: PUSH
49685: LD_VAR 0 9
49689: PUSH
49690: LD_INT 1
49692: ARRAY
49693: PPUSH
49694: LD_VAR 0 9
49698: PUSH
49699: LD_INT 2
49701: ARRAY
49702: PPUSH
49703: CALL_OW 546
49707: ST_TO_ADDR
// if hex [ 1 ] then
49708: LD_VAR 0 4
49712: PUSH
49713: LD_INT 1
49715: ARRAY
49716: IFFALSE 49720
// continue ;
49718: GO 49608
// h := hex [ 2 ] ;
49720: LD_ADDR_VAR 0 13
49724: PUSH
49725: LD_VAR 0 4
49729: PUSH
49730: LD_INT 2
49732: ARRAY
49733: ST_TO_ADDR
// if h + 7 < height then
49734: LD_VAR 0 13
49738: PUSH
49739: LD_INT 7
49741: PLUS
49742: PUSH
49743: LD_VAR 0 15
49747: LESS
49748: IFFALSE 49777
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
49750: LD_ADDR_VAR 0 18
49754: PUSH
49755: LD_INT 7
49757: PUSH
49758: LD_INT 28
49760: PUSH
49761: LD_INT 45
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: LIST
49768: PUSH
49769: LD_VAR 0 12
49773: ARRAY
49774: ST_TO_ADDR
// break ;
49775: GO 49779
// end ; end ; end ;
49777: GO 49608
49779: POP
49780: POP
// end ; if not weapon then
49781: LD_VAR 0 18
49785: NOT
49786: IFFALSE 49846
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
49788: LD_ADDR_VAR 0 5
49792: PUSH
49793: LD_VAR 0 5
49797: PUSH
49798: LD_INT 11
49800: PUSH
49801: LD_INT 30
49803: PUSH
49804: LD_INT 49
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: LIST
49811: DIFF
49812: ST_TO_ADDR
// if not list then
49813: LD_VAR 0 5
49817: NOT
49818: IFFALSE 49822
// exit ;
49820: GO 49964
// weapon := list [ rand ( 1 , list ) ] ;
49822: LD_ADDR_VAR 0 18
49826: PUSH
49827: LD_VAR 0 5
49831: PUSH
49832: LD_INT 1
49834: PPUSH
49835: LD_VAR 0 5
49839: PPUSH
49840: CALL_OW 12
49844: ARRAY
49845: ST_TO_ADDR
// end ; if weapon then
49846: LD_VAR 0 18
49850: IFFALSE 49964
// begin tmp := CostOfWeapon ( weapon ) ;
49852: LD_ADDR_VAR 0 14
49856: PUSH
49857: LD_VAR 0 18
49861: PPUSH
49862: CALL_OW 451
49866: ST_TO_ADDR
// j := GetBase ( tower ) ;
49867: LD_ADDR_VAR 0 9
49871: PUSH
49872: LD_VAR 0 1
49876: PPUSH
49877: CALL_OW 274
49881: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
49882: LD_VAR 0 9
49886: PPUSH
49887: LD_INT 1
49889: PPUSH
49890: CALL_OW 275
49894: PUSH
49895: LD_VAR 0 14
49899: PUSH
49900: LD_INT 1
49902: ARRAY
49903: GREATEREQUAL
49904: PUSH
49905: LD_VAR 0 9
49909: PPUSH
49910: LD_INT 2
49912: PPUSH
49913: CALL_OW 275
49917: PUSH
49918: LD_VAR 0 14
49922: PUSH
49923: LD_INT 2
49925: ARRAY
49926: GREATEREQUAL
49927: AND
49928: PUSH
49929: LD_VAR 0 9
49933: PPUSH
49934: LD_INT 3
49936: PPUSH
49937: CALL_OW 275
49941: PUSH
49942: LD_VAR 0 14
49946: PUSH
49947: LD_INT 3
49949: ARRAY
49950: GREATEREQUAL
49951: AND
49952: IFFALSE 49964
// result := weapon ;
49954: LD_ADDR_VAR 0 3
49958: PUSH
49959: LD_VAR 0 18
49963: ST_TO_ADDR
// end ; end ;
49964: LD_VAR 0 3
49968: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
49969: LD_INT 0
49971: PPUSH
49972: PPUSH
// result := true ;
49973: LD_ADDR_VAR 0 3
49977: PUSH
49978: LD_INT 1
49980: ST_TO_ADDR
// if array1 = array2 then
49981: LD_VAR 0 1
49985: PUSH
49986: LD_VAR 0 2
49990: EQUAL
49991: IFFALSE 50051
// begin for i = 1 to array1 do
49993: LD_ADDR_VAR 0 4
49997: PUSH
49998: DOUBLE
49999: LD_INT 1
50001: DEC
50002: ST_TO_ADDR
50003: LD_VAR 0 1
50007: PUSH
50008: FOR_TO
50009: IFFALSE 50047
// if array1 [ i ] <> array2 [ i ] then
50011: LD_VAR 0 1
50015: PUSH
50016: LD_VAR 0 4
50020: ARRAY
50021: PUSH
50022: LD_VAR 0 2
50026: PUSH
50027: LD_VAR 0 4
50031: ARRAY
50032: NONEQUAL
50033: IFFALSE 50045
// begin result := false ;
50035: LD_ADDR_VAR 0 3
50039: PUSH
50040: LD_INT 0
50042: ST_TO_ADDR
// break ;
50043: GO 50047
// end ;
50045: GO 50008
50047: POP
50048: POP
// end else
50049: GO 50059
// result := false ;
50051: LD_ADDR_VAR 0 3
50055: PUSH
50056: LD_INT 0
50058: ST_TO_ADDR
// end ;
50059: LD_VAR 0 3
50063: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
50064: LD_INT 0
50066: PPUSH
50067: PPUSH
// if not array1 or not array2 then
50068: LD_VAR 0 1
50072: NOT
50073: PUSH
50074: LD_VAR 0 2
50078: NOT
50079: OR
50080: IFFALSE 50084
// exit ;
50082: GO 50148
// result := true ;
50084: LD_ADDR_VAR 0 3
50088: PUSH
50089: LD_INT 1
50091: ST_TO_ADDR
// for i = 1 to array1 do
50092: LD_ADDR_VAR 0 4
50096: PUSH
50097: DOUBLE
50098: LD_INT 1
50100: DEC
50101: ST_TO_ADDR
50102: LD_VAR 0 1
50106: PUSH
50107: FOR_TO
50108: IFFALSE 50146
// if array1 [ i ] <> array2 [ i ] then
50110: LD_VAR 0 1
50114: PUSH
50115: LD_VAR 0 4
50119: ARRAY
50120: PUSH
50121: LD_VAR 0 2
50125: PUSH
50126: LD_VAR 0 4
50130: ARRAY
50131: NONEQUAL
50132: IFFALSE 50144
// begin result := false ;
50134: LD_ADDR_VAR 0 3
50138: PUSH
50139: LD_INT 0
50141: ST_TO_ADDR
// break ;
50142: GO 50146
// end ;
50144: GO 50107
50146: POP
50147: POP
// end ;
50148: LD_VAR 0 3
50152: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
50153: LD_INT 0
50155: PPUSH
50156: PPUSH
50157: PPUSH
// pom := GetBase ( fac ) ;
50158: LD_ADDR_VAR 0 5
50162: PUSH
50163: LD_VAR 0 1
50167: PPUSH
50168: CALL_OW 274
50172: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
50173: LD_ADDR_VAR 0 4
50177: PUSH
50178: LD_VAR 0 2
50182: PUSH
50183: LD_INT 1
50185: ARRAY
50186: PPUSH
50187: LD_VAR 0 2
50191: PUSH
50192: LD_INT 2
50194: ARRAY
50195: PPUSH
50196: LD_VAR 0 2
50200: PUSH
50201: LD_INT 3
50203: ARRAY
50204: PPUSH
50205: LD_VAR 0 2
50209: PUSH
50210: LD_INT 4
50212: ARRAY
50213: PPUSH
50214: CALL_OW 449
50218: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50219: LD_ADDR_VAR 0 3
50223: PUSH
50224: LD_VAR 0 5
50228: PPUSH
50229: LD_INT 1
50231: PPUSH
50232: CALL_OW 275
50236: PUSH
50237: LD_VAR 0 4
50241: PUSH
50242: LD_INT 1
50244: ARRAY
50245: GREATEREQUAL
50246: PUSH
50247: LD_VAR 0 5
50251: PPUSH
50252: LD_INT 2
50254: PPUSH
50255: CALL_OW 275
50259: PUSH
50260: LD_VAR 0 4
50264: PUSH
50265: LD_INT 2
50267: ARRAY
50268: GREATEREQUAL
50269: AND
50270: PUSH
50271: LD_VAR 0 5
50275: PPUSH
50276: LD_INT 3
50278: PPUSH
50279: CALL_OW 275
50283: PUSH
50284: LD_VAR 0 4
50288: PUSH
50289: LD_INT 3
50291: ARRAY
50292: GREATEREQUAL
50293: AND
50294: ST_TO_ADDR
// end ;
50295: LD_VAR 0 3
50299: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
50300: LD_INT 0
50302: PPUSH
50303: PPUSH
50304: PPUSH
50305: PPUSH
// pom := GetBase ( building ) ;
50306: LD_ADDR_VAR 0 3
50310: PUSH
50311: LD_VAR 0 1
50315: PPUSH
50316: CALL_OW 274
50320: ST_TO_ADDR
// if not pom then
50321: LD_VAR 0 3
50325: NOT
50326: IFFALSE 50330
// exit ;
50328: GO 50500
// btype := GetBType ( building ) ;
50330: LD_ADDR_VAR 0 5
50334: PUSH
50335: LD_VAR 0 1
50339: PPUSH
50340: CALL_OW 266
50344: ST_TO_ADDR
// if btype = b_armoury then
50345: LD_VAR 0 5
50349: PUSH
50350: LD_INT 4
50352: EQUAL
50353: IFFALSE 50363
// btype := b_barracks ;
50355: LD_ADDR_VAR 0 5
50359: PUSH
50360: LD_INT 5
50362: ST_TO_ADDR
// if btype = b_depot then
50363: LD_VAR 0 5
50367: PUSH
50368: LD_INT 0
50370: EQUAL
50371: IFFALSE 50381
// btype := b_warehouse ;
50373: LD_ADDR_VAR 0 5
50377: PUSH
50378: LD_INT 1
50380: ST_TO_ADDR
// if btype = b_workshop then
50381: LD_VAR 0 5
50385: PUSH
50386: LD_INT 2
50388: EQUAL
50389: IFFALSE 50399
// btype := b_factory ;
50391: LD_ADDR_VAR 0 5
50395: PUSH
50396: LD_INT 3
50398: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50399: LD_ADDR_VAR 0 4
50403: PUSH
50404: LD_VAR 0 5
50408: PPUSH
50409: LD_VAR 0 1
50413: PPUSH
50414: CALL_OW 248
50418: PPUSH
50419: CALL_OW 450
50423: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50424: LD_ADDR_VAR 0 2
50428: PUSH
50429: LD_VAR 0 3
50433: PPUSH
50434: LD_INT 1
50436: PPUSH
50437: CALL_OW 275
50441: PUSH
50442: LD_VAR 0 4
50446: PUSH
50447: LD_INT 1
50449: ARRAY
50450: GREATEREQUAL
50451: PUSH
50452: LD_VAR 0 3
50456: PPUSH
50457: LD_INT 2
50459: PPUSH
50460: CALL_OW 275
50464: PUSH
50465: LD_VAR 0 4
50469: PUSH
50470: LD_INT 2
50472: ARRAY
50473: GREATEREQUAL
50474: AND
50475: PUSH
50476: LD_VAR 0 3
50480: PPUSH
50481: LD_INT 3
50483: PPUSH
50484: CALL_OW 275
50488: PUSH
50489: LD_VAR 0 4
50493: PUSH
50494: LD_INT 3
50496: ARRAY
50497: GREATEREQUAL
50498: AND
50499: ST_TO_ADDR
// end ;
50500: LD_VAR 0 2
50504: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
50505: LD_INT 0
50507: PPUSH
50508: PPUSH
50509: PPUSH
// pom := GetBase ( building ) ;
50510: LD_ADDR_VAR 0 4
50514: PUSH
50515: LD_VAR 0 1
50519: PPUSH
50520: CALL_OW 274
50524: ST_TO_ADDR
// if not pom then
50525: LD_VAR 0 4
50529: NOT
50530: IFFALSE 50534
// exit ;
50532: GO 50635
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50534: LD_ADDR_VAR 0 5
50538: PUSH
50539: LD_VAR 0 2
50543: PPUSH
50544: LD_VAR 0 1
50548: PPUSH
50549: CALL_OW 248
50553: PPUSH
50554: CALL_OW 450
50558: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50559: LD_ADDR_VAR 0 3
50563: PUSH
50564: LD_VAR 0 4
50568: PPUSH
50569: LD_INT 1
50571: PPUSH
50572: CALL_OW 275
50576: PUSH
50577: LD_VAR 0 5
50581: PUSH
50582: LD_INT 1
50584: ARRAY
50585: GREATEREQUAL
50586: PUSH
50587: LD_VAR 0 4
50591: PPUSH
50592: LD_INT 2
50594: PPUSH
50595: CALL_OW 275
50599: PUSH
50600: LD_VAR 0 5
50604: PUSH
50605: LD_INT 2
50607: ARRAY
50608: GREATEREQUAL
50609: AND
50610: PUSH
50611: LD_VAR 0 4
50615: PPUSH
50616: LD_INT 3
50618: PPUSH
50619: CALL_OW 275
50623: PUSH
50624: LD_VAR 0 5
50628: PUSH
50629: LD_INT 3
50631: ARRAY
50632: GREATEREQUAL
50633: AND
50634: ST_TO_ADDR
// end ;
50635: LD_VAR 0 3
50639: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
50640: LD_INT 0
50642: PPUSH
50643: PPUSH
50644: PPUSH
50645: PPUSH
50646: PPUSH
50647: PPUSH
50648: PPUSH
50649: PPUSH
50650: PPUSH
50651: PPUSH
50652: PPUSH
// result := false ;
50653: LD_ADDR_VAR 0 8
50657: PUSH
50658: LD_INT 0
50660: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
50661: LD_VAR 0 5
50665: NOT
50666: PUSH
50667: LD_VAR 0 1
50671: NOT
50672: OR
50673: PUSH
50674: LD_VAR 0 2
50678: NOT
50679: OR
50680: PUSH
50681: LD_VAR 0 3
50685: NOT
50686: OR
50687: IFFALSE 50691
// exit ;
50689: GO 51505
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
50691: LD_ADDR_VAR 0 14
50695: PUSH
50696: LD_VAR 0 1
50700: PPUSH
50701: LD_VAR 0 2
50705: PPUSH
50706: LD_VAR 0 3
50710: PPUSH
50711: LD_VAR 0 4
50715: PPUSH
50716: LD_VAR 0 5
50720: PUSH
50721: LD_INT 1
50723: ARRAY
50724: PPUSH
50725: CALL_OW 248
50729: PPUSH
50730: LD_INT 0
50732: PPUSH
50733: CALL 52742 0 6
50737: ST_TO_ADDR
// if not hexes then
50738: LD_VAR 0 14
50742: NOT
50743: IFFALSE 50747
// exit ;
50745: GO 51505
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50747: LD_ADDR_VAR 0 17
50751: PUSH
50752: LD_VAR 0 5
50756: PPUSH
50757: LD_INT 22
50759: PUSH
50760: LD_VAR 0 13
50764: PPUSH
50765: CALL_OW 255
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 2
50776: PUSH
50777: LD_INT 30
50779: PUSH
50780: LD_INT 0
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: LD_INT 30
50789: PUSH
50790: LD_INT 1
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: LIST
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PPUSH
50806: CALL_OW 72
50810: ST_TO_ADDR
// for i = 1 to hexes do
50811: LD_ADDR_VAR 0 9
50815: PUSH
50816: DOUBLE
50817: LD_INT 1
50819: DEC
50820: ST_TO_ADDR
50821: LD_VAR 0 14
50825: PUSH
50826: FOR_TO
50827: IFFALSE 51503
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50829: LD_ADDR_VAR 0 13
50833: PUSH
50834: LD_VAR 0 14
50838: PUSH
50839: LD_VAR 0 9
50843: ARRAY
50844: PUSH
50845: LD_INT 1
50847: ARRAY
50848: PPUSH
50849: LD_VAR 0 14
50853: PUSH
50854: LD_VAR 0 9
50858: ARRAY
50859: PUSH
50860: LD_INT 2
50862: ARRAY
50863: PPUSH
50864: CALL_OW 428
50868: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
50869: LD_VAR 0 14
50873: PUSH
50874: LD_VAR 0 9
50878: ARRAY
50879: PUSH
50880: LD_INT 1
50882: ARRAY
50883: PPUSH
50884: LD_VAR 0 14
50888: PUSH
50889: LD_VAR 0 9
50893: ARRAY
50894: PUSH
50895: LD_INT 2
50897: ARRAY
50898: PPUSH
50899: CALL_OW 351
50903: PUSH
50904: LD_VAR 0 14
50908: PUSH
50909: LD_VAR 0 9
50913: ARRAY
50914: PUSH
50915: LD_INT 1
50917: ARRAY
50918: PPUSH
50919: LD_VAR 0 14
50923: PUSH
50924: LD_VAR 0 9
50928: ARRAY
50929: PUSH
50930: LD_INT 2
50932: ARRAY
50933: PPUSH
50934: CALL_OW 488
50938: NOT
50939: OR
50940: PUSH
50941: LD_VAR 0 13
50945: PPUSH
50946: CALL_OW 247
50950: PUSH
50951: LD_INT 3
50953: EQUAL
50954: OR
50955: IFFALSE 50961
// exit ;
50957: POP
50958: POP
50959: GO 51505
// if not tmp then
50961: LD_VAR 0 13
50965: NOT
50966: IFFALSE 50970
// continue ;
50968: GO 50826
// result := true ;
50970: LD_ADDR_VAR 0 8
50974: PUSH
50975: LD_INT 1
50977: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
50978: LD_VAR 0 6
50982: PUSH
50983: LD_VAR 0 13
50987: PPUSH
50988: CALL_OW 247
50992: PUSH
50993: LD_INT 2
50995: EQUAL
50996: AND
50997: PUSH
50998: LD_VAR 0 13
51002: PPUSH
51003: CALL_OW 263
51007: PUSH
51008: LD_INT 1
51010: EQUAL
51011: AND
51012: IFFALSE 51176
// begin if IsDrivenBy ( tmp ) then
51014: LD_VAR 0 13
51018: PPUSH
51019: CALL_OW 311
51023: IFFALSE 51027
// continue ;
51025: GO 50826
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
51027: LD_VAR 0 6
51031: PPUSH
51032: LD_INT 3
51034: PUSH
51035: LD_INT 60
51037: PUSH
51038: EMPTY
51039: LIST
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 3
51047: PUSH
51048: LD_INT 55
51050: PUSH
51051: EMPTY
51052: LIST
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PPUSH
51062: CALL_OW 72
51066: IFFALSE 51174
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
51068: LD_ADDR_VAR 0 18
51072: PUSH
51073: LD_VAR 0 6
51077: PPUSH
51078: LD_INT 3
51080: PUSH
51081: LD_INT 60
51083: PUSH
51084: EMPTY
51085: LIST
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 3
51093: PUSH
51094: LD_INT 55
51096: PUSH
51097: EMPTY
51098: LIST
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PPUSH
51108: CALL_OW 72
51112: PUSH
51113: LD_INT 1
51115: ARRAY
51116: ST_TO_ADDR
// if IsInUnit ( driver ) then
51117: LD_VAR 0 18
51121: PPUSH
51122: CALL_OW 310
51126: IFFALSE 51137
// ComExit ( driver ) ;
51128: LD_VAR 0 18
51132: PPUSH
51133: CALL 75870 0 1
// AddComEnterUnit ( driver , tmp ) ;
51137: LD_VAR 0 18
51141: PPUSH
51142: LD_VAR 0 13
51146: PPUSH
51147: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
51151: LD_VAR 0 18
51155: PPUSH
51156: LD_VAR 0 7
51160: PPUSH
51161: CALL_OW 173
// AddComExitVehicle ( driver ) ;
51165: LD_VAR 0 18
51169: PPUSH
51170: CALL_OW 181
// end ; continue ;
51174: GO 50826
// end ; if not cleaners or not tmp in cleaners then
51176: LD_VAR 0 6
51180: NOT
51181: PUSH
51182: LD_VAR 0 13
51186: PUSH
51187: LD_VAR 0 6
51191: IN
51192: NOT
51193: OR
51194: IFFALSE 51501
// begin if dep then
51196: LD_VAR 0 17
51200: IFFALSE 51336
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
51202: LD_ADDR_VAR 0 16
51206: PUSH
51207: LD_VAR 0 17
51211: PUSH
51212: LD_INT 1
51214: ARRAY
51215: PPUSH
51216: CALL_OW 250
51220: PPUSH
51221: LD_VAR 0 17
51225: PUSH
51226: LD_INT 1
51228: ARRAY
51229: PPUSH
51230: CALL_OW 254
51234: PPUSH
51235: LD_INT 5
51237: PPUSH
51238: CALL_OW 272
51242: PUSH
51243: LD_VAR 0 17
51247: PUSH
51248: LD_INT 1
51250: ARRAY
51251: PPUSH
51252: CALL_OW 251
51256: PPUSH
51257: LD_VAR 0 17
51261: PUSH
51262: LD_INT 1
51264: ARRAY
51265: PPUSH
51266: CALL_OW 254
51270: PPUSH
51271: LD_INT 5
51273: PPUSH
51274: CALL_OW 273
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
51283: LD_VAR 0 16
51287: PUSH
51288: LD_INT 1
51290: ARRAY
51291: PPUSH
51292: LD_VAR 0 16
51296: PUSH
51297: LD_INT 2
51299: ARRAY
51300: PPUSH
51301: CALL_OW 488
51305: IFFALSE 51336
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
51307: LD_VAR 0 13
51311: PPUSH
51312: LD_VAR 0 16
51316: PUSH
51317: LD_INT 1
51319: ARRAY
51320: PPUSH
51321: LD_VAR 0 16
51325: PUSH
51326: LD_INT 2
51328: ARRAY
51329: PPUSH
51330: CALL_OW 111
// continue ;
51334: GO 50826
// end ; end ; r := GetDir ( tmp ) ;
51336: LD_ADDR_VAR 0 15
51340: PUSH
51341: LD_VAR 0 13
51345: PPUSH
51346: CALL_OW 254
51350: ST_TO_ADDR
// if r = 5 then
51351: LD_VAR 0 15
51355: PUSH
51356: LD_INT 5
51358: EQUAL
51359: IFFALSE 51369
// r := 0 ;
51361: LD_ADDR_VAR 0 15
51365: PUSH
51366: LD_INT 0
51368: ST_TO_ADDR
// for j = r to 5 do
51369: LD_ADDR_VAR 0 10
51373: PUSH
51374: DOUBLE
51375: LD_VAR 0 15
51379: DEC
51380: ST_TO_ADDR
51381: LD_INT 5
51383: PUSH
51384: FOR_TO
51385: IFFALSE 51499
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
51387: LD_ADDR_VAR 0 11
51391: PUSH
51392: LD_VAR 0 13
51396: PPUSH
51397: CALL_OW 250
51401: PPUSH
51402: LD_VAR 0 10
51406: PPUSH
51407: LD_INT 2
51409: PPUSH
51410: CALL_OW 272
51414: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
51415: LD_ADDR_VAR 0 12
51419: PUSH
51420: LD_VAR 0 13
51424: PPUSH
51425: CALL_OW 251
51429: PPUSH
51430: LD_VAR 0 10
51434: PPUSH
51435: LD_INT 2
51437: PPUSH
51438: CALL_OW 273
51442: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
51443: LD_VAR 0 11
51447: PPUSH
51448: LD_VAR 0 12
51452: PPUSH
51453: CALL_OW 488
51457: PUSH
51458: LD_VAR 0 11
51462: PPUSH
51463: LD_VAR 0 12
51467: PPUSH
51468: CALL_OW 428
51472: NOT
51473: AND
51474: IFFALSE 51497
// begin ComMoveXY ( tmp , _x , _y ) ;
51476: LD_VAR 0 13
51480: PPUSH
51481: LD_VAR 0 11
51485: PPUSH
51486: LD_VAR 0 12
51490: PPUSH
51491: CALL_OW 111
// break ;
51495: GO 51499
// end ; end ;
51497: GO 51384
51499: POP
51500: POP
// end ; end ;
51501: GO 50826
51503: POP
51504: POP
// end ;
51505: LD_VAR 0 8
51509: RET
// export function BuildingTechInvented ( side , btype ) ; begin
51510: LD_INT 0
51512: PPUSH
// result := true ;
51513: LD_ADDR_VAR 0 3
51517: PUSH
51518: LD_INT 1
51520: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
51521: LD_VAR 0 2
51525: PUSH
51526: LD_INT 24
51528: DOUBLE
51529: EQUAL
51530: IFTRUE 51540
51532: LD_INT 33
51534: DOUBLE
51535: EQUAL
51536: IFTRUE 51540
51538: GO 51565
51540: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
51541: LD_ADDR_VAR 0 3
51545: PUSH
51546: LD_INT 32
51548: PPUSH
51549: LD_VAR 0 1
51553: PPUSH
51554: CALL_OW 321
51558: PUSH
51559: LD_INT 2
51561: EQUAL
51562: ST_TO_ADDR
51563: GO 51885
51565: LD_INT 20
51567: DOUBLE
51568: EQUAL
51569: IFTRUE 51573
51571: GO 51598
51573: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
51574: LD_ADDR_VAR 0 3
51578: PUSH
51579: LD_INT 6
51581: PPUSH
51582: LD_VAR 0 1
51586: PPUSH
51587: CALL_OW 321
51591: PUSH
51592: LD_INT 2
51594: EQUAL
51595: ST_TO_ADDR
51596: GO 51885
51598: LD_INT 22
51600: DOUBLE
51601: EQUAL
51602: IFTRUE 51612
51604: LD_INT 36
51606: DOUBLE
51607: EQUAL
51608: IFTRUE 51612
51610: GO 51637
51612: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
51613: LD_ADDR_VAR 0 3
51617: PUSH
51618: LD_INT 15
51620: PPUSH
51621: LD_VAR 0 1
51625: PPUSH
51626: CALL_OW 321
51630: PUSH
51631: LD_INT 2
51633: EQUAL
51634: ST_TO_ADDR
51635: GO 51885
51637: LD_INT 30
51639: DOUBLE
51640: EQUAL
51641: IFTRUE 51645
51643: GO 51670
51645: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
51646: LD_ADDR_VAR 0 3
51650: PUSH
51651: LD_INT 20
51653: PPUSH
51654: LD_VAR 0 1
51658: PPUSH
51659: CALL_OW 321
51663: PUSH
51664: LD_INT 2
51666: EQUAL
51667: ST_TO_ADDR
51668: GO 51885
51670: LD_INT 28
51672: DOUBLE
51673: EQUAL
51674: IFTRUE 51684
51676: LD_INT 21
51678: DOUBLE
51679: EQUAL
51680: IFTRUE 51684
51682: GO 51709
51684: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
51685: LD_ADDR_VAR 0 3
51689: PUSH
51690: LD_INT 21
51692: PPUSH
51693: LD_VAR 0 1
51697: PPUSH
51698: CALL_OW 321
51702: PUSH
51703: LD_INT 2
51705: EQUAL
51706: ST_TO_ADDR
51707: GO 51885
51709: LD_INT 16
51711: DOUBLE
51712: EQUAL
51713: IFTRUE 51717
51715: GO 51744
51717: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
51718: LD_ADDR_VAR 0 3
51722: PUSH
51723: LD_EXP 73
51727: PPUSH
51728: LD_VAR 0 1
51732: PPUSH
51733: CALL_OW 321
51737: PUSH
51738: LD_INT 2
51740: EQUAL
51741: ST_TO_ADDR
51742: GO 51885
51744: LD_INT 19
51746: DOUBLE
51747: EQUAL
51748: IFTRUE 51758
51750: LD_INT 23
51752: DOUBLE
51753: EQUAL
51754: IFTRUE 51758
51756: GO 51785
51758: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
51759: LD_ADDR_VAR 0 3
51763: PUSH
51764: LD_EXP 72
51768: PPUSH
51769: LD_VAR 0 1
51773: PPUSH
51774: CALL_OW 321
51778: PUSH
51779: LD_INT 2
51781: EQUAL
51782: ST_TO_ADDR
51783: GO 51885
51785: LD_INT 17
51787: DOUBLE
51788: EQUAL
51789: IFTRUE 51793
51791: GO 51818
51793: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
51794: LD_ADDR_VAR 0 3
51798: PUSH
51799: LD_INT 39
51801: PPUSH
51802: LD_VAR 0 1
51806: PPUSH
51807: CALL_OW 321
51811: PUSH
51812: LD_INT 2
51814: EQUAL
51815: ST_TO_ADDR
51816: GO 51885
51818: LD_INT 18
51820: DOUBLE
51821: EQUAL
51822: IFTRUE 51826
51824: GO 51851
51826: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
51827: LD_ADDR_VAR 0 3
51831: PUSH
51832: LD_INT 40
51834: PPUSH
51835: LD_VAR 0 1
51839: PPUSH
51840: CALL_OW 321
51844: PUSH
51845: LD_INT 2
51847: EQUAL
51848: ST_TO_ADDR
51849: GO 51885
51851: LD_INT 27
51853: DOUBLE
51854: EQUAL
51855: IFTRUE 51859
51857: GO 51884
51859: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
51860: LD_ADDR_VAR 0 3
51864: PUSH
51865: LD_INT 35
51867: PPUSH
51868: LD_VAR 0 1
51872: PPUSH
51873: CALL_OW 321
51877: PUSH
51878: LD_INT 2
51880: EQUAL
51881: ST_TO_ADDR
51882: GO 51885
51884: POP
// end ;
51885: LD_VAR 0 3
51889: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
51890: LD_INT 0
51892: PPUSH
51893: PPUSH
51894: PPUSH
51895: PPUSH
51896: PPUSH
51897: PPUSH
51898: PPUSH
51899: PPUSH
51900: PPUSH
51901: PPUSH
51902: PPUSH
// result := false ;
51903: LD_ADDR_VAR 0 6
51907: PUSH
51908: LD_INT 0
51910: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
51911: LD_VAR 0 1
51915: NOT
51916: PUSH
51917: LD_VAR 0 1
51921: PPUSH
51922: CALL_OW 266
51926: PUSH
51927: LD_INT 0
51929: PUSH
51930: LD_INT 1
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: IN
51937: NOT
51938: OR
51939: PUSH
51940: LD_VAR 0 2
51944: NOT
51945: OR
51946: PUSH
51947: LD_VAR 0 5
51951: PUSH
51952: LD_INT 0
51954: PUSH
51955: LD_INT 1
51957: PUSH
51958: LD_INT 2
51960: PUSH
51961: LD_INT 3
51963: PUSH
51964: LD_INT 4
51966: PUSH
51967: LD_INT 5
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: IN
51978: NOT
51979: OR
51980: PUSH
51981: LD_VAR 0 3
51985: PPUSH
51986: LD_VAR 0 4
51990: PPUSH
51991: CALL_OW 488
51995: NOT
51996: OR
51997: IFFALSE 52001
// exit ;
51999: GO 52737
// side := GetSide ( depot ) ;
52001: LD_ADDR_VAR 0 9
52005: PUSH
52006: LD_VAR 0 1
52010: PPUSH
52011: CALL_OW 255
52015: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
52016: LD_VAR 0 9
52020: PPUSH
52021: LD_VAR 0 2
52025: PPUSH
52026: CALL 51510 0 2
52030: NOT
52031: IFFALSE 52035
// exit ;
52033: GO 52737
// pom := GetBase ( depot ) ;
52035: LD_ADDR_VAR 0 10
52039: PUSH
52040: LD_VAR 0 1
52044: PPUSH
52045: CALL_OW 274
52049: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52050: LD_ADDR_VAR 0 11
52054: PUSH
52055: LD_VAR 0 2
52059: PPUSH
52060: LD_VAR 0 1
52064: PPUSH
52065: CALL_OW 248
52069: PPUSH
52070: CALL_OW 450
52074: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
52075: LD_VAR 0 10
52079: PPUSH
52080: LD_INT 1
52082: PPUSH
52083: CALL_OW 275
52087: PUSH
52088: LD_VAR 0 11
52092: PUSH
52093: LD_INT 1
52095: ARRAY
52096: GREATEREQUAL
52097: PUSH
52098: LD_VAR 0 10
52102: PPUSH
52103: LD_INT 2
52105: PPUSH
52106: CALL_OW 275
52110: PUSH
52111: LD_VAR 0 11
52115: PUSH
52116: LD_INT 2
52118: ARRAY
52119: GREATEREQUAL
52120: AND
52121: PUSH
52122: LD_VAR 0 10
52126: PPUSH
52127: LD_INT 3
52129: PPUSH
52130: CALL_OW 275
52134: PUSH
52135: LD_VAR 0 11
52139: PUSH
52140: LD_INT 3
52142: ARRAY
52143: GREATEREQUAL
52144: AND
52145: NOT
52146: IFFALSE 52150
// exit ;
52148: GO 52737
// if GetBType ( depot ) = b_depot then
52150: LD_VAR 0 1
52154: PPUSH
52155: CALL_OW 266
52159: PUSH
52160: LD_INT 0
52162: EQUAL
52163: IFFALSE 52175
// dist := 28 else
52165: LD_ADDR_VAR 0 14
52169: PUSH
52170: LD_INT 28
52172: ST_TO_ADDR
52173: GO 52183
// dist := 36 ;
52175: LD_ADDR_VAR 0 14
52179: PUSH
52180: LD_INT 36
52182: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
52183: LD_VAR 0 1
52187: PPUSH
52188: LD_VAR 0 3
52192: PPUSH
52193: LD_VAR 0 4
52197: PPUSH
52198: CALL_OW 297
52202: PUSH
52203: LD_VAR 0 14
52207: GREATER
52208: IFFALSE 52212
// exit ;
52210: GO 52737
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
52212: LD_ADDR_VAR 0 12
52216: PUSH
52217: LD_VAR 0 2
52221: PPUSH
52222: LD_VAR 0 3
52226: PPUSH
52227: LD_VAR 0 4
52231: PPUSH
52232: LD_VAR 0 5
52236: PPUSH
52237: LD_VAR 0 1
52241: PPUSH
52242: CALL_OW 248
52246: PPUSH
52247: LD_INT 0
52249: PPUSH
52250: CALL 52742 0 6
52254: ST_TO_ADDR
// if not hexes then
52255: LD_VAR 0 12
52259: NOT
52260: IFFALSE 52264
// exit ;
52262: GO 52737
// hex := GetHexInfo ( x , y ) ;
52264: LD_ADDR_VAR 0 15
52268: PUSH
52269: LD_VAR 0 3
52273: PPUSH
52274: LD_VAR 0 4
52278: PPUSH
52279: CALL_OW 546
52283: ST_TO_ADDR
// if hex [ 1 ] then
52284: LD_VAR 0 15
52288: PUSH
52289: LD_INT 1
52291: ARRAY
52292: IFFALSE 52296
// exit ;
52294: GO 52737
// height := hex [ 2 ] ;
52296: LD_ADDR_VAR 0 13
52300: PUSH
52301: LD_VAR 0 15
52305: PUSH
52306: LD_INT 2
52308: ARRAY
52309: ST_TO_ADDR
// for i = 1 to hexes do
52310: LD_ADDR_VAR 0 7
52314: PUSH
52315: DOUBLE
52316: LD_INT 1
52318: DEC
52319: ST_TO_ADDR
52320: LD_VAR 0 12
52324: PUSH
52325: FOR_TO
52326: IFFALSE 52656
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
52328: LD_VAR 0 12
52332: PUSH
52333: LD_VAR 0 7
52337: ARRAY
52338: PUSH
52339: LD_INT 1
52341: ARRAY
52342: PPUSH
52343: LD_VAR 0 12
52347: PUSH
52348: LD_VAR 0 7
52352: ARRAY
52353: PUSH
52354: LD_INT 2
52356: ARRAY
52357: PPUSH
52358: CALL_OW 488
52362: NOT
52363: PUSH
52364: LD_VAR 0 12
52368: PUSH
52369: LD_VAR 0 7
52373: ARRAY
52374: PUSH
52375: LD_INT 1
52377: ARRAY
52378: PPUSH
52379: LD_VAR 0 12
52383: PUSH
52384: LD_VAR 0 7
52388: ARRAY
52389: PUSH
52390: LD_INT 2
52392: ARRAY
52393: PPUSH
52394: CALL_OW 428
52398: PUSH
52399: LD_INT 0
52401: GREATER
52402: OR
52403: PUSH
52404: LD_VAR 0 12
52408: PUSH
52409: LD_VAR 0 7
52413: ARRAY
52414: PUSH
52415: LD_INT 1
52417: ARRAY
52418: PPUSH
52419: LD_VAR 0 12
52423: PUSH
52424: LD_VAR 0 7
52428: ARRAY
52429: PUSH
52430: LD_INT 2
52432: ARRAY
52433: PPUSH
52434: CALL_OW 351
52438: OR
52439: IFFALSE 52445
// exit ;
52441: POP
52442: POP
52443: GO 52737
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52445: LD_ADDR_VAR 0 8
52449: PUSH
52450: LD_VAR 0 12
52454: PUSH
52455: LD_VAR 0 7
52459: ARRAY
52460: PUSH
52461: LD_INT 1
52463: ARRAY
52464: PPUSH
52465: LD_VAR 0 12
52469: PUSH
52470: LD_VAR 0 7
52474: ARRAY
52475: PUSH
52476: LD_INT 2
52478: ARRAY
52479: PPUSH
52480: CALL_OW 546
52484: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
52485: LD_VAR 0 8
52489: PUSH
52490: LD_INT 1
52492: ARRAY
52493: PUSH
52494: LD_VAR 0 8
52498: PUSH
52499: LD_INT 2
52501: ARRAY
52502: PUSH
52503: LD_VAR 0 13
52507: PUSH
52508: LD_INT 2
52510: PLUS
52511: GREATER
52512: OR
52513: PUSH
52514: LD_VAR 0 8
52518: PUSH
52519: LD_INT 2
52521: ARRAY
52522: PUSH
52523: LD_VAR 0 13
52527: PUSH
52528: LD_INT 2
52530: MINUS
52531: LESS
52532: OR
52533: PUSH
52534: LD_VAR 0 8
52538: PUSH
52539: LD_INT 3
52541: ARRAY
52542: PUSH
52543: LD_INT 0
52545: PUSH
52546: LD_INT 8
52548: PUSH
52549: LD_INT 9
52551: PUSH
52552: LD_INT 10
52554: PUSH
52555: LD_INT 11
52557: PUSH
52558: LD_INT 12
52560: PUSH
52561: LD_INT 13
52563: PUSH
52564: LD_INT 16
52566: PUSH
52567: LD_INT 17
52569: PUSH
52570: LD_INT 18
52572: PUSH
52573: LD_INT 19
52575: PUSH
52576: LD_INT 20
52578: PUSH
52579: LD_INT 21
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: LIST
52596: IN
52597: NOT
52598: OR
52599: PUSH
52600: LD_VAR 0 8
52604: PUSH
52605: LD_INT 5
52607: ARRAY
52608: NOT
52609: OR
52610: PUSH
52611: LD_VAR 0 8
52615: PUSH
52616: LD_INT 6
52618: ARRAY
52619: PUSH
52620: LD_INT 1
52622: PUSH
52623: LD_INT 2
52625: PUSH
52626: LD_INT 7
52628: PUSH
52629: LD_INT 9
52631: PUSH
52632: LD_INT 10
52634: PUSH
52635: LD_INT 11
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: IN
52646: NOT
52647: OR
52648: IFFALSE 52654
// exit ;
52650: POP
52651: POP
52652: GO 52737
// end ;
52654: GO 52325
52656: POP
52657: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
52658: LD_VAR 0 9
52662: PPUSH
52663: LD_VAR 0 3
52667: PPUSH
52668: LD_VAR 0 4
52672: PPUSH
52673: LD_INT 20
52675: PPUSH
52676: CALL 44683 0 4
52680: PUSH
52681: LD_INT 4
52683: ARRAY
52684: IFFALSE 52688
// exit ;
52686: GO 52737
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
52688: LD_VAR 0 2
52692: PUSH
52693: LD_INT 29
52695: PUSH
52696: LD_INT 30
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: IN
52703: PUSH
52704: LD_VAR 0 3
52708: PPUSH
52709: LD_VAR 0 4
52713: PPUSH
52714: LD_VAR 0 9
52718: PPUSH
52719: CALL_OW 440
52723: NOT
52724: AND
52725: IFFALSE 52729
// exit ;
52727: GO 52737
// result := true ;
52729: LD_ADDR_VAR 0 6
52733: PUSH
52734: LD_INT 1
52736: ST_TO_ADDR
// end ;
52737: LD_VAR 0 6
52741: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
52742: LD_INT 0
52744: PPUSH
52745: PPUSH
52746: PPUSH
52747: PPUSH
52748: PPUSH
52749: PPUSH
52750: PPUSH
52751: PPUSH
52752: PPUSH
52753: PPUSH
52754: PPUSH
52755: PPUSH
52756: PPUSH
52757: PPUSH
52758: PPUSH
52759: PPUSH
52760: PPUSH
52761: PPUSH
52762: PPUSH
52763: PPUSH
52764: PPUSH
52765: PPUSH
52766: PPUSH
52767: PPUSH
52768: PPUSH
52769: PPUSH
52770: PPUSH
52771: PPUSH
52772: PPUSH
52773: PPUSH
52774: PPUSH
52775: PPUSH
52776: PPUSH
52777: PPUSH
52778: PPUSH
52779: PPUSH
52780: PPUSH
52781: PPUSH
52782: PPUSH
52783: PPUSH
52784: PPUSH
52785: PPUSH
52786: PPUSH
52787: PPUSH
52788: PPUSH
52789: PPUSH
52790: PPUSH
52791: PPUSH
52792: PPUSH
52793: PPUSH
52794: PPUSH
52795: PPUSH
52796: PPUSH
52797: PPUSH
52798: PPUSH
52799: PPUSH
52800: PPUSH
52801: PPUSH
// result = [ ] ;
52802: LD_ADDR_VAR 0 7
52806: PUSH
52807: EMPTY
52808: ST_TO_ADDR
// temp_list = [ ] ;
52809: LD_ADDR_VAR 0 9
52813: PUSH
52814: EMPTY
52815: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
52816: LD_VAR 0 4
52820: PUSH
52821: LD_INT 0
52823: PUSH
52824: LD_INT 1
52826: PUSH
52827: LD_INT 2
52829: PUSH
52830: LD_INT 3
52832: PUSH
52833: LD_INT 4
52835: PUSH
52836: LD_INT 5
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: IN
52847: NOT
52848: PUSH
52849: LD_VAR 0 1
52853: PUSH
52854: LD_INT 0
52856: PUSH
52857: LD_INT 1
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: IN
52864: PUSH
52865: LD_VAR 0 5
52869: PUSH
52870: LD_INT 1
52872: PUSH
52873: LD_INT 2
52875: PUSH
52876: LD_INT 3
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: LIST
52883: IN
52884: NOT
52885: AND
52886: OR
52887: IFFALSE 52891
// exit ;
52889: GO 71282
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
52891: LD_VAR 0 1
52895: PUSH
52896: LD_INT 6
52898: PUSH
52899: LD_INT 7
52901: PUSH
52902: LD_INT 8
52904: PUSH
52905: LD_INT 13
52907: PUSH
52908: LD_INT 12
52910: PUSH
52911: LD_INT 15
52913: PUSH
52914: LD_INT 11
52916: PUSH
52917: LD_INT 14
52919: PUSH
52920: LD_INT 10
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: LIST
52931: LIST
52932: LIST
52933: IN
52934: IFFALSE 52944
// btype = b_lab ;
52936: LD_ADDR_VAR 0 1
52940: PUSH
52941: LD_INT 6
52943: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
52944: LD_VAR 0 6
52948: PUSH
52949: LD_INT 0
52951: PUSH
52952: LD_INT 1
52954: PUSH
52955: LD_INT 2
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: LIST
52962: IN
52963: NOT
52964: PUSH
52965: LD_VAR 0 1
52969: PUSH
52970: LD_INT 0
52972: PUSH
52973: LD_INT 1
52975: PUSH
52976: LD_INT 2
52978: PUSH
52979: LD_INT 3
52981: PUSH
52982: LD_INT 6
52984: PUSH
52985: LD_INT 36
52987: PUSH
52988: LD_INT 4
52990: PUSH
52991: LD_INT 5
52993: PUSH
52994: LD_INT 31
52996: PUSH
52997: LD_INT 32
52999: PUSH
53000: LD_INT 33
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: LIST
53009: LIST
53010: LIST
53011: LIST
53012: LIST
53013: LIST
53014: LIST
53015: IN
53016: NOT
53017: PUSH
53018: LD_VAR 0 6
53022: PUSH
53023: LD_INT 1
53025: EQUAL
53026: AND
53027: OR
53028: PUSH
53029: LD_VAR 0 1
53033: PUSH
53034: LD_INT 2
53036: PUSH
53037: LD_INT 3
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: IN
53044: NOT
53045: PUSH
53046: LD_VAR 0 6
53050: PUSH
53051: LD_INT 2
53053: EQUAL
53054: AND
53055: OR
53056: IFFALSE 53066
// mode = 0 ;
53058: LD_ADDR_VAR 0 6
53062: PUSH
53063: LD_INT 0
53065: ST_TO_ADDR
// case mode of 0 :
53066: LD_VAR 0 6
53070: PUSH
53071: LD_INT 0
53073: DOUBLE
53074: EQUAL
53075: IFTRUE 53079
53077: GO 64532
53079: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53080: LD_ADDR_VAR 0 11
53084: PUSH
53085: LD_INT 0
53087: PUSH
53088: LD_INT 0
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: LD_INT 0
53097: PUSH
53098: LD_INT 1
53100: NEG
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: LD_INT 1
53108: PUSH
53109: LD_INT 0
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: PUSH
53116: LD_INT 1
53118: PUSH
53119: LD_INT 1
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 0
53128: PUSH
53129: LD_INT 1
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 1
53138: NEG
53139: PUSH
53140: LD_INT 0
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PUSH
53147: LD_INT 1
53149: NEG
53150: PUSH
53151: LD_INT 1
53153: NEG
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 1
53161: NEG
53162: PUSH
53163: LD_INT 2
53165: NEG
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: PUSH
53171: LD_INT 0
53173: PUSH
53174: LD_INT 2
53176: NEG
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: PUSH
53182: LD_INT 1
53184: PUSH
53185: LD_INT 1
53187: NEG
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 1
53195: PUSH
53196: LD_INT 2
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 0
53205: PUSH
53206: LD_INT 2
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: LD_INT 1
53215: NEG
53216: PUSH
53217: LD_INT 1
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 1
53226: PUSH
53227: LD_INT 3
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 0
53236: PUSH
53237: LD_INT 3
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 1
53246: NEG
53247: PUSH
53248: LD_INT 2
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53273: LD_ADDR_VAR 0 12
53277: PUSH
53278: LD_INT 0
53280: PUSH
53281: LD_INT 0
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: LD_INT 0
53290: PUSH
53291: LD_INT 1
53293: NEG
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: LD_INT 1
53301: PUSH
53302: LD_INT 0
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 1
53311: PUSH
53312: LD_INT 1
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: PUSH
53319: LD_INT 0
53321: PUSH
53322: LD_INT 1
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: PUSH
53329: LD_INT 1
53331: NEG
53332: PUSH
53333: LD_INT 0
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: PUSH
53340: LD_INT 1
53342: NEG
53343: PUSH
53344: LD_INT 1
53346: NEG
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: LD_INT 1
53354: PUSH
53355: LD_INT 1
53357: NEG
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 2
53365: PUSH
53366: LD_INT 0
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 2
53375: PUSH
53376: LD_INT 1
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 1
53385: NEG
53386: PUSH
53387: LD_INT 1
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 2
53396: NEG
53397: PUSH
53398: LD_INT 0
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: LD_INT 2
53407: NEG
53408: PUSH
53409: LD_INT 1
53411: NEG
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: LD_INT 2
53419: NEG
53420: PUSH
53421: LD_INT 1
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 3
53430: NEG
53431: PUSH
53432: LD_INT 0
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 3
53441: NEG
53442: PUSH
53443: LD_INT 1
53445: NEG
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53469: LD_ADDR_VAR 0 13
53473: PUSH
53474: LD_INT 0
53476: PUSH
53477: LD_INT 0
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: LD_INT 0
53486: PUSH
53487: LD_INT 1
53489: NEG
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 1
53497: PUSH
53498: LD_INT 0
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 1
53507: PUSH
53508: LD_INT 1
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 0
53517: PUSH
53518: LD_INT 1
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 1
53527: NEG
53528: PUSH
53529: LD_INT 0
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 1
53538: NEG
53539: PUSH
53540: LD_INT 1
53542: NEG
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 1
53550: NEG
53551: PUSH
53552: LD_INT 2
53554: NEG
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 2
53562: PUSH
53563: LD_INT 1
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 2
53572: PUSH
53573: LD_INT 2
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 1
53582: PUSH
53583: LD_INT 2
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 2
53592: NEG
53593: PUSH
53594: LD_INT 1
53596: NEG
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 2
53604: NEG
53605: PUSH
53606: LD_INT 2
53608: NEG
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 2
53616: NEG
53617: PUSH
53618: LD_INT 3
53620: NEG
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 3
53628: NEG
53629: PUSH
53630: LD_INT 2
53632: NEG
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: LD_INT 3
53640: NEG
53641: PUSH
53642: LD_INT 3
53644: NEG
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53668: LD_ADDR_VAR 0 14
53672: PUSH
53673: LD_INT 0
53675: PUSH
53676: LD_INT 0
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: PUSH
53683: LD_INT 0
53685: PUSH
53686: LD_INT 1
53688: NEG
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 1
53696: PUSH
53697: LD_INT 0
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 1
53706: PUSH
53707: LD_INT 1
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: LD_INT 0
53716: PUSH
53717: LD_INT 1
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: LD_INT 1
53726: NEG
53727: PUSH
53728: LD_INT 0
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 1
53737: NEG
53738: PUSH
53739: LD_INT 1
53741: NEG
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: PUSH
53747: LD_INT 1
53749: NEG
53750: PUSH
53751: LD_INT 2
53753: NEG
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 0
53761: PUSH
53762: LD_INT 2
53764: NEG
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 1
53772: PUSH
53773: LD_INT 1
53775: NEG
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 1
53783: PUSH
53784: LD_INT 2
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 0
53793: PUSH
53794: LD_INT 2
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 1
53803: NEG
53804: PUSH
53805: LD_INT 1
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 1
53814: NEG
53815: PUSH
53816: LD_INT 3
53818: NEG
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 0
53826: PUSH
53827: LD_INT 3
53829: NEG
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 1
53837: PUSH
53838: LD_INT 2
53840: NEG
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53864: LD_ADDR_VAR 0 15
53868: PUSH
53869: LD_INT 0
53871: PUSH
53872: LD_INT 0
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 0
53881: PUSH
53882: LD_INT 1
53884: NEG
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 1
53892: PUSH
53893: LD_INT 0
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 1
53902: PUSH
53903: LD_INT 1
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: LD_INT 0
53912: PUSH
53913: LD_INT 1
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PUSH
53920: LD_INT 1
53922: NEG
53923: PUSH
53924: LD_INT 0
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: LD_INT 1
53933: NEG
53934: PUSH
53935: LD_INT 1
53937: NEG
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 1
53945: PUSH
53946: LD_INT 1
53948: NEG
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: LD_INT 2
53956: PUSH
53957: LD_INT 0
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 2
53966: PUSH
53967: LD_INT 1
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 1
53976: NEG
53977: PUSH
53978: LD_INT 1
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 2
53987: NEG
53988: PUSH
53989: LD_INT 0
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 2
53998: NEG
53999: PUSH
54000: LD_INT 1
54002: NEG
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 2
54010: PUSH
54011: LD_INT 1
54013: NEG
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 3
54021: PUSH
54022: LD_INT 0
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 3
54031: PUSH
54032: LD_INT 1
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54057: LD_ADDR_VAR 0 16
54061: PUSH
54062: LD_INT 0
54064: PUSH
54065: LD_INT 0
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 0
54074: PUSH
54075: LD_INT 1
54077: NEG
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: LD_INT 1
54085: PUSH
54086: LD_INT 0
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: PUSH
54093: LD_INT 1
54095: PUSH
54096: LD_INT 1
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 0
54105: PUSH
54106: LD_INT 1
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 1
54115: NEG
54116: PUSH
54117: LD_INT 0
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: LD_INT 1
54126: NEG
54127: PUSH
54128: LD_INT 1
54130: NEG
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 1
54138: NEG
54139: PUSH
54140: LD_INT 2
54142: NEG
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 2
54150: PUSH
54151: LD_INT 1
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 2
54160: PUSH
54161: LD_INT 2
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 1
54170: PUSH
54171: LD_INT 2
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 2
54180: NEG
54181: PUSH
54182: LD_INT 1
54184: NEG
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 2
54192: NEG
54193: PUSH
54194: LD_INT 2
54196: NEG
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 3
54204: PUSH
54205: LD_INT 2
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 3
54214: PUSH
54215: LD_INT 3
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 2
54224: PUSH
54225: LD_INT 3
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: LIST
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54250: LD_ADDR_VAR 0 17
54254: PUSH
54255: LD_INT 0
54257: PUSH
54258: LD_INT 0
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 0
54267: PUSH
54268: LD_INT 1
54270: NEG
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 1
54278: PUSH
54279: LD_INT 0
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 1
54288: PUSH
54289: LD_INT 1
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 0
54298: PUSH
54299: LD_INT 1
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 1
54308: NEG
54309: PUSH
54310: LD_INT 0
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 1
54319: NEG
54320: PUSH
54321: LD_INT 1
54323: NEG
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 1
54331: NEG
54332: PUSH
54333: LD_INT 2
54335: NEG
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 0
54343: PUSH
54344: LD_INT 2
54346: NEG
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: PUSH
54352: LD_INT 1
54354: PUSH
54355: LD_INT 1
54357: NEG
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 2
54365: PUSH
54366: LD_INT 0
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: LD_INT 2
54375: PUSH
54376: LD_INT 1
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PUSH
54383: LD_INT 2
54385: PUSH
54386: LD_INT 2
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 1
54395: PUSH
54396: LD_INT 2
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 0
54405: PUSH
54406: LD_INT 2
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: LD_INT 1
54415: NEG
54416: PUSH
54417: LD_INT 1
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 2
54426: NEG
54427: PUSH
54428: LD_INT 0
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 2
54437: NEG
54438: PUSH
54439: LD_INT 1
54441: NEG
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 2
54449: NEG
54450: PUSH
54451: LD_INT 2
54453: NEG
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: LIST
54463: LIST
54464: LIST
54465: LIST
54466: LIST
54467: LIST
54468: LIST
54469: LIST
54470: LIST
54471: LIST
54472: LIST
54473: LIST
54474: LIST
54475: LIST
54476: LIST
54477: LIST
54478: LIST
54479: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54480: LD_ADDR_VAR 0 18
54484: PUSH
54485: LD_INT 0
54487: PUSH
54488: LD_INT 0
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 0
54497: PUSH
54498: LD_INT 1
54500: NEG
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 1
54508: PUSH
54509: LD_INT 0
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 1
54518: PUSH
54519: LD_INT 1
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 0
54528: PUSH
54529: LD_INT 1
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: LD_INT 1
54538: NEG
54539: PUSH
54540: LD_INT 0
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 1
54549: NEG
54550: PUSH
54551: LD_INT 1
54553: NEG
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 1
54561: NEG
54562: PUSH
54563: LD_INT 2
54565: NEG
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 0
54573: PUSH
54574: LD_INT 2
54576: NEG
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 1
54584: PUSH
54585: LD_INT 1
54587: NEG
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 2
54595: PUSH
54596: LD_INT 0
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 2
54605: PUSH
54606: LD_INT 1
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 2
54615: PUSH
54616: LD_INT 2
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 1
54625: PUSH
54626: LD_INT 2
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 0
54635: PUSH
54636: LD_INT 2
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 1
54645: NEG
54646: PUSH
54647: LD_INT 1
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 2
54656: NEG
54657: PUSH
54658: LD_INT 0
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 2
54667: NEG
54668: PUSH
54669: LD_INT 1
54671: NEG
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: LD_INT 2
54679: NEG
54680: PUSH
54681: LD_INT 2
54683: NEG
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: LIST
54709: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54710: LD_ADDR_VAR 0 19
54714: PUSH
54715: LD_INT 0
54717: PUSH
54718: LD_INT 0
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: LD_INT 0
54727: PUSH
54728: LD_INT 1
54730: NEG
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: LD_INT 1
54738: PUSH
54739: LD_INT 0
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: PUSH
54746: LD_INT 1
54748: PUSH
54749: LD_INT 1
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: LD_INT 0
54758: PUSH
54759: LD_INT 1
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 1
54768: NEG
54769: PUSH
54770: LD_INT 0
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 1
54779: NEG
54780: PUSH
54781: LD_INT 1
54783: NEG
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 1
54791: NEG
54792: PUSH
54793: LD_INT 2
54795: NEG
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: LD_INT 0
54803: PUSH
54804: LD_INT 2
54806: NEG
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: LD_INT 1
54814: PUSH
54815: LD_INT 1
54817: NEG
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 2
54825: PUSH
54826: LD_INT 0
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 2
54835: PUSH
54836: LD_INT 1
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 2
54845: PUSH
54846: LD_INT 2
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 1
54855: PUSH
54856: LD_INT 2
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 0
54865: PUSH
54866: LD_INT 2
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 1
54875: NEG
54876: PUSH
54877: LD_INT 1
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 2
54886: NEG
54887: PUSH
54888: LD_INT 0
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: LD_INT 2
54897: NEG
54898: PUSH
54899: LD_INT 1
54901: NEG
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 2
54909: NEG
54910: PUSH
54911: LD_INT 2
54913: NEG
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: LIST
54932: LIST
54933: LIST
54934: LIST
54935: LIST
54936: LIST
54937: LIST
54938: LIST
54939: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54940: LD_ADDR_VAR 0 20
54944: PUSH
54945: LD_INT 0
54947: PUSH
54948: LD_INT 0
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 0
54957: PUSH
54958: LD_INT 1
54960: NEG
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PUSH
54966: LD_INT 1
54968: PUSH
54969: LD_INT 0
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 1
54978: PUSH
54979: LD_INT 1
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 0
54988: PUSH
54989: LD_INT 1
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 1
54998: NEG
54999: PUSH
55000: LD_INT 0
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 1
55009: NEG
55010: PUSH
55011: LD_INT 1
55013: NEG
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 1
55021: NEG
55022: PUSH
55023: LD_INT 2
55025: NEG
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 0
55033: PUSH
55034: LD_INT 2
55036: NEG
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: LD_INT 1
55044: PUSH
55045: LD_INT 1
55047: NEG
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 2
55055: PUSH
55056: LD_INT 0
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 2
55065: PUSH
55066: LD_INT 1
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 2
55075: PUSH
55076: LD_INT 2
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 1
55085: PUSH
55086: LD_INT 2
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 0
55095: PUSH
55096: LD_INT 2
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 1
55105: NEG
55106: PUSH
55107: LD_INT 1
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: LD_INT 2
55116: NEG
55117: PUSH
55118: LD_INT 0
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: LD_INT 2
55127: NEG
55128: PUSH
55129: LD_INT 1
55131: NEG
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 2
55139: NEG
55140: PUSH
55141: LD_INT 2
55143: NEG
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: LIST
55165: LIST
55166: LIST
55167: LIST
55168: LIST
55169: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55170: LD_ADDR_VAR 0 21
55174: PUSH
55175: LD_INT 0
55177: PUSH
55178: LD_INT 0
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 0
55187: PUSH
55188: LD_INT 1
55190: NEG
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 1
55198: PUSH
55199: LD_INT 0
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 1
55208: PUSH
55209: LD_INT 1
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 0
55218: PUSH
55219: LD_INT 1
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 1
55228: NEG
55229: PUSH
55230: LD_INT 0
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 1
55239: NEG
55240: PUSH
55241: LD_INT 1
55243: NEG
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 1
55251: NEG
55252: PUSH
55253: LD_INT 2
55255: NEG
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: LD_INT 0
55263: PUSH
55264: LD_INT 2
55266: NEG
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: PUSH
55272: LD_INT 1
55274: PUSH
55275: LD_INT 1
55277: NEG
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 2
55285: PUSH
55286: LD_INT 0
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 2
55295: PUSH
55296: LD_INT 1
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 2
55305: PUSH
55306: LD_INT 2
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 1
55315: PUSH
55316: LD_INT 2
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 0
55325: PUSH
55326: LD_INT 2
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: LD_INT 1
55335: NEG
55336: PUSH
55337: LD_INT 1
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: LD_INT 2
55346: NEG
55347: PUSH
55348: LD_INT 0
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 2
55357: NEG
55358: PUSH
55359: LD_INT 1
55361: NEG
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 2
55369: NEG
55370: PUSH
55371: LD_INT 2
55373: NEG
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55400: LD_ADDR_VAR 0 22
55404: PUSH
55405: LD_INT 0
55407: PUSH
55408: LD_INT 0
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: LD_INT 0
55417: PUSH
55418: LD_INT 1
55420: NEG
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: PUSH
55426: LD_INT 1
55428: PUSH
55429: LD_INT 0
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: PUSH
55436: LD_INT 1
55438: PUSH
55439: LD_INT 1
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 0
55448: PUSH
55449: LD_INT 1
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: PUSH
55456: LD_INT 1
55458: NEG
55459: PUSH
55460: LD_INT 0
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 1
55469: NEG
55470: PUSH
55471: LD_INT 1
55473: NEG
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 1
55481: NEG
55482: PUSH
55483: LD_INT 2
55485: NEG
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 0
55493: PUSH
55494: LD_INT 2
55496: NEG
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 1
55504: PUSH
55505: LD_INT 1
55507: NEG
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 2
55515: PUSH
55516: LD_INT 0
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_INT 2
55525: PUSH
55526: LD_INT 1
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 2
55535: PUSH
55536: LD_INT 2
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 1
55545: PUSH
55546: LD_INT 2
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 0
55555: PUSH
55556: LD_INT 2
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 1
55565: NEG
55566: PUSH
55567: LD_INT 1
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 2
55576: NEG
55577: PUSH
55578: LD_INT 0
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: LD_INT 2
55587: NEG
55588: PUSH
55589: LD_INT 1
55591: NEG
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 2
55599: NEG
55600: PUSH
55601: LD_INT 2
55603: NEG
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: LIST
55623: LIST
55624: LIST
55625: LIST
55626: LIST
55627: LIST
55628: LIST
55629: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55630: LD_ADDR_VAR 0 23
55634: PUSH
55635: LD_INT 0
55637: PUSH
55638: LD_INT 0
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 0
55647: PUSH
55648: LD_INT 1
55650: NEG
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 1
55658: PUSH
55659: LD_INT 0
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 1
55668: PUSH
55669: LD_INT 1
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 0
55678: PUSH
55679: LD_INT 1
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 1
55688: NEG
55689: PUSH
55690: LD_INT 0
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_INT 1
55699: NEG
55700: PUSH
55701: LD_INT 1
55703: NEG
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: LD_INT 1
55711: NEG
55712: PUSH
55713: LD_INT 2
55715: NEG
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 0
55723: PUSH
55724: LD_INT 2
55726: NEG
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: LD_INT 1
55734: PUSH
55735: LD_INT 1
55737: NEG
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: LD_INT 2
55745: PUSH
55746: LD_INT 0
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: LD_INT 2
55755: PUSH
55756: LD_INT 1
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 2
55765: PUSH
55766: LD_INT 2
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 1
55775: PUSH
55776: LD_INT 2
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: LD_INT 0
55785: PUSH
55786: LD_INT 2
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PUSH
55793: LD_INT 1
55795: NEG
55796: PUSH
55797: LD_INT 1
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: PUSH
55804: LD_INT 2
55806: NEG
55807: PUSH
55808: LD_INT 0
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: PUSH
55815: LD_INT 2
55817: NEG
55818: PUSH
55819: LD_INT 1
55821: NEG
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 2
55829: NEG
55830: PUSH
55831: LD_INT 2
55833: NEG
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 2
55841: NEG
55842: PUSH
55843: LD_INT 3
55845: NEG
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 1
55853: NEG
55854: PUSH
55855: LD_INT 3
55857: NEG
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: LD_INT 1
55865: PUSH
55866: LD_INT 2
55868: NEG
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 2
55876: PUSH
55877: LD_INT 1
55879: NEG
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: LIST
55908: LIST
55909: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
55910: LD_ADDR_VAR 0 24
55914: PUSH
55915: LD_INT 0
55917: PUSH
55918: LD_INT 0
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: LD_INT 0
55927: PUSH
55928: LD_INT 1
55930: NEG
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 1
55938: PUSH
55939: LD_INT 0
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 1
55948: PUSH
55949: LD_INT 1
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 0
55958: PUSH
55959: LD_INT 1
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: LD_INT 1
55968: NEG
55969: PUSH
55970: LD_INT 0
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 1
55979: NEG
55980: PUSH
55981: LD_INT 1
55983: NEG
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 1
55991: NEG
55992: PUSH
55993: LD_INT 2
55995: NEG
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 0
56003: PUSH
56004: LD_INT 2
56006: NEG
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 1
56014: PUSH
56015: LD_INT 1
56017: NEG
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 2
56025: PUSH
56026: LD_INT 0
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 2
56035: PUSH
56036: LD_INT 1
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 2
56045: PUSH
56046: LD_INT 2
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 1
56055: PUSH
56056: LD_INT 2
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 0
56065: PUSH
56066: LD_INT 2
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 1
56075: NEG
56076: PUSH
56077: LD_INT 1
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PUSH
56084: LD_INT 2
56086: NEG
56087: PUSH
56088: LD_INT 0
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: LD_INT 2
56097: NEG
56098: PUSH
56099: LD_INT 1
56101: NEG
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 2
56109: NEG
56110: PUSH
56111: LD_INT 2
56113: NEG
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 1
56121: PUSH
56122: LD_INT 2
56124: NEG
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 2
56132: PUSH
56133: LD_INT 1
56135: NEG
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 3
56143: PUSH
56144: LD_INT 1
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: LD_INT 3
56153: PUSH
56154: LD_INT 2
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: LIST
56182: LIST
56183: LIST
56184: LIST
56185: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
56186: LD_ADDR_VAR 0 25
56190: PUSH
56191: LD_INT 0
56193: PUSH
56194: LD_INT 0
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: LD_INT 0
56203: PUSH
56204: LD_INT 1
56206: NEG
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 1
56214: PUSH
56215: LD_INT 0
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 1
56224: PUSH
56225: LD_INT 1
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 0
56234: PUSH
56235: LD_INT 1
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 1
56244: NEG
56245: PUSH
56246: LD_INT 0
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 1
56255: NEG
56256: PUSH
56257: LD_INT 1
56259: NEG
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 1
56267: NEG
56268: PUSH
56269: LD_INT 2
56271: NEG
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: LD_INT 0
56279: PUSH
56280: LD_INT 2
56282: NEG
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: LD_INT 1
56290: PUSH
56291: LD_INT 1
56293: NEG
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 2
56301: PUSH
56302: LD_INT 0
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 2
56311: PUSH
56312: LD_INT 1
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 2
56321: PUSH
56322: LD_INT 2
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 1
56331: PUSH
56332: LD_INT 2
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: LD_INT 0
56341: PUSH
56342: LD_INT 2
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 1
56351: NEG
56352: PUSH
56353: LD_INT 1
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 2
56362: NEG
56363: PUSH
56364: LD_INT 0
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 2
56373: NEG
56374: PUSH
56375: LD_INT 1
56377: NEG
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 2
56385: NEG
56386: PUSH
56387: LD_INT 2
56389: NEG
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 3
56397: PUSH
56398: LD_INT 1
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: LD_INT 3
56407: PUSH
56408: LD_INT 2
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: LD_INT 2
56417: PUSH
56418: LD_INT 3
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: LD_INT 1
56427: PUSH
56428: LD_INT 3
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: LIST
56452: LIST
56453: LIST
56454: LIST
56455: LIST
56456: LIST
56457: LIST
56458: LIST
56459: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56460: LD_ADDR_VAR 0 26
56464: PUSH
56465: LD_INT 0
56467: PUSH
56468: LD_INT 0
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: LD_INT 0
56477: PUSH
56478: LD_INT 1
56480: NEG
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 1
56488: PUSH
56489: LD_INT 0
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 1
56498: PUSH
56499: LD_INT 1
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 0
56508: PUSH
56509: LD_INT 1
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 1
56518: NEG
56519: PUSH
56520: LD_INT 0
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 1
56529: NEG
56530: PUSH
56531: LD_INT 1
56533: NEG
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: LD_INT 1
56541: NEG
56542: PUSH
56543: LD_INT 2
56545: NEG
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: PUSH
56551: LD_INT 0
56553: PUSH
56554: LD_INT 2
56556: NEG
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: PUSH
56562: LD_INT 1
56564: PUSH
56565: LD_INT 1
56567: NEG
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: PUSH
56573: LD_INT 2
56575: PUSH
56576: LD_INT 0
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 2
56585: PUSH
56586: LD_INT 1
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: PUSH
56593: LD_INT 2
56595: PUSH
56596: LD_INT 2
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: LD_INT 1
56605: PUSH
56606: LD_INT 2
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: PUSH
56613: LD_INT 0
56615: PUSH
56616: LD_INT 2
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: PUSH
56623: LD_INT 1
56625: NEG
56626: PUSH
56627: LD_INT 1
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: LD_INT 2
56636: NEG
56637: PUSH
56638: LD_INT 0
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 2
56647: NEG
56648: PUSH
56649: LD_INT 1
56651: NEG
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 2
56659: NEG
56660: PUSH
56661: LD_INT 2
56663: NEG
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: LD_INT 2
56671: PUSH
56672: LD_INT 3
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 1
56681: PUSH
56682: LD_INT 3
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 1
56691: NEG
56692: PUSH
56693: LD_INT 2
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 2
56702: NEG
56703: PUSH
56704: LD_INT 1
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: LIST
56715: LIST
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: LIST
56726: LIST
56727: LIST
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56736: LD_ADDR_VAR 0 27
56740: PUSH
56741: LD_INT 0
56743: PUSH
56744: LD_INT 0
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PUSH
56751: LD_INT 0
56753: PUSH
56754: LD_INT 1
56756: NEG
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: PUSH
56762: LD_INT 1
56764: PUSH
56765: LD_INT 0
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 1
56774: PUSH
56775: LD_INT 1
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 0
56784: PUSH
56785: LD_INT 1
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: LD_INT 1
56794: NEG
56795: PUSH
56796: LD_INT 0
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: PUSH
56803: LD_INT 1
56805: NEG
56806: PUSH
56807: LD_INT 1
56809: NEG
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 1
56817: NEG
56818: PUSH
56819: LD_INT 2
56821: NEG
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 0
56829: PUSH
56830: LD_INT 2
56832: NEG
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 1
56840: PUSH
56841: LD_INT 1
56843: NEG
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 2
56851: PUSH
56852: LD_INT 0
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_INT 2
56861: PUSH
56862: LD_INT 1
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 2
56871: PUSH
56872: LD_INT 2
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: LD_INT 1
56881: PUSH
56882: LD_INT 2
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: LD_INT 0
56891: PUSH
56892: LD_INT 2
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: PUSH
56899: LD_INT 1
56901: NEG
56902: PUSH
56903: LD_INT 1
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: LD_INT 2
56912: NEG
56913: PUSH
56914: LD_INT 0
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 2
56923: NEG
56924: PUSH
56925: LD_INT 1
56927: NEG
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 2
56935: NEG
56936: PUSH
56937: LD_INT 2
56939: NEG
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: LD_INT 1
56947: NEG
56948: PUSH
56949: LD_INT 2
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: PUSH
56956: LD_INT 2
56958: NEG
56959: PUSH
56960: LD_INT 1
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: LD_INT 3
56969: NEG
56970: PUSH
56971: LD_INT 1
56973: NEG
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: PUSH
56979: LD_INT 3
56981: NEG
56982: PUSH
56983: LD_INT 2
56985: NEG
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57016: LD_ADDR_VAR 0 28
57020: PUSH
57021: LD_INT 0
57023: PUSH
57024: LD_INT 0
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: LD_INT 0
57033: PUSH
57034: LD_INT 1
57036: NEG
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: LD_INT 1
57044: PUSH
57045: LD_INT 0
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: LD_INT 1
57054: PUSH
57055: LD_INT 1
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: LD_INT 0
57064: PUSH
57065: LD_INT 1
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: LD_INT 1
57074: NEG
57075: PUSH
57076: LD_INT 0
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: LD_INT 1
57085: NEG
57086: PUSH
57087: LD_INT 1
57089: NEG
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 1
57097: NEG
57098: PUSH
57099: LD_INT 2
57101: NEG
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PUSH
57107: LD_INT 0
57109: PUSH
57110: LD_INT 2
57112: NEG
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 1
57120: PUSH
57121: LD_INT 1
57123: NEG
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 2
57131: PUSH
57132: LD_INT 0
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 2
57141: PUSH
57142: LD_INT 1
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 2
57151: PUSH
57152: LD_INT 2
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 1
57161: PUSH
57162: LD_INT 2
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 0
57171: PUSH
57172: LD_INT 2
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: LD_INT 1
57181: NEG
57182: PUSH
57183: LD_INT 1
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PUSH
57190: LD_INT 2
57192: NEG
57193: PUSH
57194: LD_INT 0
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 2
57203: NEG
57204: PUSH
57205: LD_INT 1
57207: NEG
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 2
57215: NEG
57216: PUSH
57217: LD_INT 2
57219: NEG
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: PUSH
57225: LD_INT 2
57227: NEG
57228: PUSH
57229: LD_INT 3
57231: NEG
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: LD_INT 1
57239: NEG
57240: PUSH
57241: LD_INT 3
57243: NEG
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 3
57251: NEG
57252: PUSH
57253: LD_INT 1
57255: NEG
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 3
57263: NEG
57264: PUSH
57265: LD_INT 2
57267: NEG
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: LIST
57277: LIST
57278: LIST
57279: LIST
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: LIST
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: LIST
57295: LIST
57296: LIST
57297: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57298: LD_ADDR_VAR 0 29
57302: PUSH
57303: LD_INT 0
57305: PUSH
57306: LD_INT 0
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: PUSH
57313: LD_INT 0
57315: PUSH
57316: LD_INT 1
57318: NEG
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: LD_INT 1
57326: PUSH
57327: LD_INT 0
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 1
57336: PUSH
57337: LD_INT 1
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: LD_INT 0
57346: PUSH
57347: LD_INT 1
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 1
57356: NEG
57357: PUSH
57358: LD_INT 0
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: LD_INT 1
57367: NEG
57368: PUSH
57369: LD_INT 1
57371: NEG
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: PUSH
57377: LD_INT 1
57379: NEG
57380: PUSH
57381: LD_INT 2
57383: NEG
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: LD_INT 0
57391: PUSH
57392: LD_INT 2
57394: NEG
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 1
57402: PUSH
57403: LD_INT 1
57405: NEG
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 2
57413: PUSH
57414: LD_INT 0
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 2
57423: PUSH
57424: LD_INT 1
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: PUSH
57431: LD_INT 1
57433: PUSH
57434: LD_INT 2
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: LD_INT 0
57443: PUSH
57444: LD_INT 2
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 1
57453: NEG
57454: PUSH
57455: LD_INT 1
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 2
57464: NEG
57465: PUSH
57466: LD_INT 1
57468: NEG
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PUSH
57474: LD_INT 2
57476: NEG
57477: PUSH
57478: LD_INT 2
57480: NEG
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: PUSH
57486: LD_INT 2
57488: NEG
57489: PUSH
57490: LD_INT 3
57492: NEG
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: PUSH
57498: LD_INT 2
57500: PUSH
57501: LD_INT 1
57503: NEG
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 3
57511: PUSH
57512: LD_INT 1
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: LD_INT 1
57521: PUSH
57522: LD_INT 3
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: LD_INT 1
57531: NEG
57532: PUSH
57533: LD_INT 2
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: PUSH
57540: LD_INT 3
57542: NEG
57543: PUSH
57544: LD_INT 2
57546: NEG
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: LIST
57556: LIST
57557: LIST
57558: LIST
57559: LIST
57560: LIST
57561: LIST
57562: LIST
57563: LIST
57564: LIST
57565: LIST
57566: LIST
57567: LIST
57568: LIST
57569: LIST
57570: LIST
57571: LIST
57572: LIST
57573: LIST
57574: LIST
57575: LIST
57576: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57577: LD_ADDR_VAR 0 30
57581: PUSH
57582: LD_INT 0
57584: PUSH
57585: LD_INT 0
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: PUSH
57592: LD_INT 0
57594: PUSH
57595: LD_INT 1
57597: NEG
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: LD_INT 1
57605: PUSH
57606: LD_INT 0
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 1
57615: PUSH
57616: LD_INT 1
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 0
57625: PUSH
57626: LD_INT 1
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 1
57635: NEG
57636: PUSH
57637: LD_INT 0
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 1
57646: NEG
57647: PUSH
57648: LD_INT 1
57650: NEG
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 1
57658: NEG
57659: PUSH
57660: LD_INT 2
57662: NEG
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 0
57670: PUSH
57671: LD_INT 2
57673: NEG
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: LD_INT 1
57681: PUSH
57682: LD_INT 1
57684: NEG
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 2
57692: PUSH
57693: LD_INT 0
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 2
57702: PUSH
57703: LD_INT 1
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 2
57712: PUSH
57713: LD_INT 2
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 1
57722: PUSH
57723: LD_INT 2
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 1
57732: NEG
57733: PUSH
57734: LD_INT 1
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: LD_INT 2
57743: NEG
57744: PUSH
57745: LD_INT 0
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: LD_INT 2
57754: NEG
57755: PUSH
57756: LD_INT 1
57758: NEG
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 1
57766: NEG
57767: PUSH
57768: LD_INT 3
57770: NEG
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: LD_INT 1
57778: PUSH
57779: LD_INT 2
57781: NEG
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 3
57789: PUSH
57790: LD_INT 2
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: PUSH
57797: LD_INT 2
57799: PUSH
57800: LD_INT 3
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: PUSH
57807: LD_INT 2
57809: NEG
57810: PUSH
57811: LD_INT 1
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: LD_INT 3
57820: NEG
57821: PUSH
57822: LD_INT 1
57824: NEG
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: LIST
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: LIST
57849: LIST
57850: LIST
57851: LIST
57852: LIST
57853: LIST
57854: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57855: LD_ADDR_VAR 0 31
57859: PUSH
57860: LD_INT 0
57862: PUSH
57863: LD_INT 0
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 0
57872: PUSH
57873: LD_INT 1
57875: NEG
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 1
57883: PUSH
57884: LD_INT 0
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: LD_INT 1
57893: PUSH
57894: LD_INT 1
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: PUSH
57901: LD_INT 0
57903: PUSH
57904: LD_INT 1
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 1
57913: NEG
57914: PUSH
57915: LD_INT 0
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 1
57924: NEG
57925: PUSH
57926: LD_INT 1
57928: NEG
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: LD_INT 1
57936: NEG
57937: PUSH
57938: LD_INT 2
57940: NEG
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: LD_INT 1
57948: PUSH
57949: LD_INT 1
57951: NEG
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 2
57959: PUSH
57960: LD_INT 0
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: PUSH
57967: LD_INT 2
57969: PUSH
57970: LD_INT 1
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: LD_INT 2
57979: PUSH
57980: LD_INT 2
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 1
57989: PUSH
57990: LD_INT 2
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: LD_INT 0
57999: PUSH
58000: LD_INT 2
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 1
58009: NEG
58010: PUSH
58011: LD_INT 1
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 2
58020: NEG
58021: PUSH
58022: LD_INT 1
58024: NEG
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 2
58032: NEG
58033: PUSH
58034: LD_INT 2
58036: NEG
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 2
58044: NEG
58045: PUSH
58046: LD_INT 3
58048: NEG
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: LD_INT 2
58056: PUSH
58057: LD_INT 1
58059: NEG
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 3
58067: PUSH
58068: LD_INT 1
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 1
58077: PUSH
58078: LD_INT 3
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: LD_INT 1
58087: NEG
58088: PUSH
58089: LD_INT 2
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: LD_INT 3
58098: NEG
58099: PUSH
58100: LD_INT 2
58102: NEG
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: LIST
58115: LIST
58116: LIST
58117: LIST
58118: LIST
58119: LIST
58120: LIST
58121: LIST
58122: LIST
58123: LIST
58124: LIST
58125: LIST
58126: LIST
58127: LIST
58128: LIST
58129: LIST
58130: LIST
58131: LIST
58132: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58133: LD_ADDR_VAR 0 32
58137: PUSH
58138: LD_INT 0
58140: PUSH
58141: LD_INT 0
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 0
58150: PUSH
58151: LD_INT 1
58153: NEG
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 1
58161: PUSH
58162: LD_INT 0
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 1
58171: PUSH
58172: LD_INT 1
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 0
58181: PUSH
58182: LD_INT 1
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 1
58191: NEG
58192: PUSH
58193: LD_INT 0
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 1
58202: NEG
58203: PUSH
58204: LD_INT 1
58206: NEG
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 1
58214: NEG
58215: PUSH
58216: LD_INT 2
58218: NEG
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 0
58226: PUSH
58227: LD_INT 2
58229: NEG
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: LD_INT 1
58237: PUSH
58238: LD_INT 1
58240: NEG
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 2
58248: PUSH
58249: LD_INT 1
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 2
58258: PUSH
58259: LD_INT 2
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 1
58268: PUSH
58269: LD_INT 2
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 0
58278: PUSH
58279: LD_INT 2
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 1
58288: NEG
58289: PUSH
58290: LD_INT 1
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 2
58299: NEG
58300: PUSH
58301: LD_INT 0
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 2
58310: NEG
58311: PUSH
58312: LD_INT 1
58314: NEG
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 1
58322: NEG
58323: PUSH
58324: LD_INT 3
58326: NEG
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 1
58334: PUSH
58335: LD_INT 2
58337: NEG
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: LD_INT 3
58345: PUSH
58346: LD_INT 2
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 2
58355: PUSH
58356: LD_INT 3
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 2
58365: NEG
58366: PUSH
58367: LD_INT 1
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 3
58376: NEG
58377: PUSH
58378: LD_INT 1
58380: NEG
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: LIST
58390: LIST
58391: LIST
58392: LIST
58393: LIST
58394: LIST
58395: LIST
58396: LIST
58397: LIST
58398: LIST
58399: LIST
58400: LIST
58401: LIST
58402: LIST
58403: LIST
58404: LIST
58405: LIST
58406: LIST
58407: LIST
58408: LIST
58409: LIST
58410: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58411: LD_ADDR_VAR 0 33
58415: PUSH
58416: LD_INT 0
58418: PUSH
58419: LD_INT 0
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 0
58428: PUSH
58429: LD_INT 1
58431: NEG
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 1
58439: PUSH
58440: LD_INT 0
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 1
58449: PUSH
58450: LD_INT 1
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: LD_INT 0
58459: PUSH
58460: LD_INT 1
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PUSH
58467: LD_INT 1
58469: NEG
58470: PUSH
58471: LD_INT 0
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_INT 1
58480: NEG
58481: PUSH
58482: LD_INT 1
58484: NEG
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_INT 1
58492: NEG
58493: PUSH
58494: LD_INT 2
58496: NEG
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 1
58504: PUSH
58505: LD_INT 1
58507: NEG
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 2
58515: PUSH
58516: LD_INT 0
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PUSH
58523: LD_INT 2
58525: PUSH
58526: LD_INT 1
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: LD_INT 1
58535: PUSH
58536: LD_INT 2
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 0
58545: PUSH
58546: LD_INT 2
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 1
58555: NEG
58556: PUSH
58557: LD_INT 1
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 2
58566: NEG
58567: PUSH
58568: LD_INT 0
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: PUSH
58575: LD_INT 2
58577: NEG
58578: PUSH
58579: LD_INT 1
58581: NEG
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: PUSH
58587: LD_INT 2
58589: NEG
58590: PUSH
58591: LD_INT 2
58593: NEG
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: PUSH
58599: LD_INT 2
58601: NEG
58602: PUSH
58603: LD_INT 3
58605: NEG
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: PUSH
58611: LD_INT 2
58613: PUSH
58614: LD_INT 1
58616: NEG
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 3
58624: PUSH
58625: LD_INT 1
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: LD_INT 1
58634: PUSH
58635: LD_INT 3
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 1
58644: NEG
58645: PUSH
58646: LD_INT 2
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: LD_INT 3
58655: NEG
58656: PUSH
58657: LD_INT 2
58659: NEG
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: LIST
58669: LIST
58670: LIST
58671: LIST
58672: LIST
58673: LIST
58674: LIST
58675: LIST
58676: LIST
58677: LIST
58678: LIST
58679: LIST
58680: LIST
58681: LIST
58682: LIST
58683: LIST
58684: LIST
58685: LIST
58686: LIST
58687: LIST
58688: LIST
58689: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58690: LD_ADDR_VAR 0 34
58694: PUSH
58695: LD_INT 0
58697: PUSH
58698: LD_INT 0
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: LD_INT 0
58707: PUSH
58708: LD_INT 1
58710: NEG
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 1
58718: PUSH
58719: LD_INT 0
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PUSH
58726: LD_INT 1
58728: PUSH
58729: LD_INT 1
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: LD_INT 0
58738: PUSH
58739: LD_INT 1
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 1
58748: NEG
58749: PUSH
58750: LD_INT 0
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: LD_INT 1
58759: NEG
58760: PUSH
58761: LD_INT 1
58763: NEG
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 1
58771: NEG
58772: PUSH
58773: LD_INT 2
58775: NEG
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: LD_INT 0
58783: PUSH
58784: LD_INT 2
58786: NEG
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 1
58794: PUSH
58795: LD_INT 1
58797: NEG
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 2
58805: PUSH
58806: LD_INT 1
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: LD_INT 2
58815: PUSH
58816: LD_INT 2
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PUSH
58823: LD_INT 1
58825: PUSH
58826: LD_INT 2
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_INT 1
58835: NEG
58836: PUSH
58837: LD_INT 1
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: PUSH
58844: LD_INT 2
58846: NEG
58847: PUSH
58848: LD_INT 0
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 2
58857: NEG
58858: PUSH
58859: LD_INT 1
58861: NEG
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 2
58869: NEG
58870: PUSH
58871: LD_INT 2
58873: NEG
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 1
58881: NEG
58882: PUSH
58883: LD_INT 3
58885: NEG
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: PUSH
58891: LD_INT 1
58893: PUSH
58894: LD_INT 2
58896: NEG
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 3
58904: PUSH
58905: LD_INT 2
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: LD_INT 2
58914: PUSH
58915: LD_INT 3
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 2
58924: NEG
58925: PUSH
58926: LD_INT 1
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: LD_INT 3
58935: NEG
58936: PUSH
58937: LD_INT 1
58939: NEG
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: LIST
58957: LIST
58958: LIST
58959: LIST
58960: LIST
58961: LIST
58962: LIST
58963: LIST
58964: LIST
58965: LIST
58966: LIST
58967: LIST
58968: LIST
58969: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58970: LD_ADDR_VAR 0 35
58974: PUSH
58975: LD_INT 0
58977: PUSH
58978: LD_INT 0
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: PUSH
58985: LD_INT 0
58987: PUSH
58988: LD_INT 1
58990: NEG
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: PUSH
58996: LD_INT 1
58998: PUSH
58999: LD_INT 0
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: LD_INT 1
59008: PUSH
59009: LD_INT 1
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_INT 0
59018: PUSH
59019: LD_INT 1
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 1
59028: NEG
59029: PUSH
59030: LD_INT 0
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: LD_INT 1
59039: NEG
59040: PUSH
59041: LD_INT 1
59043: NEG
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: PUSH
59049: LD_INT 2
59051: PUSH
59052: LD_INT 1
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: PUSH
59059: LD_INT 2
59061: NEG
59062: PUSH
59063: LD_INT 1
59065: NEG
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: LIST
59075: LIST
59076: LIST
59077: LIST
59078: LIST
59079: LIST
59080: LIST
59081: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59082: LD_ADDR_VAR 0 36
59086: PUSH
59087: LD_INT 0
59089: PUSH
59090: LD_INT 0
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: PUSH
59097: LD_INT 0
59099: PUSH
59100: LD_INT 1
59102: NEG
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: LD_INT 1
59110: PUSH
59111: LD_INT 0
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: PUSH
59118: LD_INT 1
59120: PUSH
59121: LD_INT 1
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: PUSH
59128: LD_INT 0
59130: PUSH
59131: LD_INT 1
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_INT 1
59140: NEG
59141: PUSH
59142: LD_INT 0
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: LD_INT 1
59151: NEG
59152: PUSH
59153: LD_INT 1
59155: NEG
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: LD_INT 1
59163: NEG
59164: PUSH
59165: LD_INT 2
59167: NEG
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PUSH
59173: LD_INT 1
59175: PUSH
59176: LD_INT 2
59178: PUSH
59179: EMPTY
59180: LIST
59181: LIST
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: LIST
59187: LIST
59188: LIST
59189: LIST
59190: LIST
59191: LIST
59192: LIST
59193: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59194: LD_ADDR_VAR 0 37
59198: PUSH
59199: LD_INT 0
59201: PUSH
59202: LD_INT 0
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PUSH
59209: LD_INT 0
59211: PUSH
59212: LD_INT 1
59214: NEG
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 1
59222: PUSH
59223: LD_INT 0
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 1
59232: PUSH
59233: LD_INT 1
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 0
59242: PUSH
59243: LD_INT 1
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 1
59252: NEG
59253: PUSH
59254: LD_INT 0
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: PUSH
59261: LD_INT 1
59263: NEG
59264: PUSH
59265: LD_INT 1
59267: NEG
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 1
59275: PUSH
59276: LD_INT 1
59278: NEG
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 1
59286: NEG
59287: PUSH
59288: LD_INT 1
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: LIST
59299: LIST
59300: LIST
59301: LIST
59302: LIST
59303: LIST
59304: LIST
59305: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59306: LD_ADDR_VAR 0 38
59310: PUSH
59311: LD_INT 0
59313: PUSH
59314: LD_INT 0
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: LD_INT 0
59323: PUSH
59324: LD_INT 1
59326: NEG
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 1
59334: PUSH
59335: LD_INT 0
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 1
59344: PUSH
59345: LD_INT 1
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: PUSH
59352: LD_INT 0
59354: PUSH
59355: LD_INT 1
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: PUSH
59362: LD_INT 1
59364: NEG
59365: PUSH
59366: LD_INT 0
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: PUSH
59373: LD_INT 1
59375: NEG
59376: PUSH
59377: LD_INT 1
59379: NEG
59380: PUSH
59381: EMPTY
59382: LIST
59383: LIST
59384: PUSH
59385: LD_INT 2
59387: PUSH
59388: LD_INT 1
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: PUSH
59395: LD_INT 2
59397: NEG
59398: PUSH
59399: LD_INT 1
59401: NEG
59402: PUSH
59403: EMPTY
59404: LIST
59405: LIST
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: LIST
59413: LIST
59414: LIST
59415: LIST
59416: LIST
59417: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59418: LD_ADDR_VAR 0 39
59422: PUSH
59423: LD_INT 0
59425: PUSH
59426: LD_INT 0
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: LD_INT 0
59435: PUSH
59436: LD_INT 1
59438: NEG
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: PUSH
59444: LD_INT 1
59446: PUSH
59447: LD_INT 0
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: PUSH
59454: LD_INT 1
59456: PUSH
59457: LD_INT 1
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 0
59466: PUSH
59467: LD_INT 1
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PUSH
59474: LD_INT 1
59476: NEG
59477: PUSH
59478: LD_INT 0
59480: PUSH
59481: EMPTY
59482: LIST
59483: LIST
59484: PUSH
59485: LD_INT 1
59487: NEG
59488: PUSH
59489: LD_INT 1
59491: NEG
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: PUSH
59497: LD_INT 1
59499: NEG
59500: PUSH
59501: LD_INT 2
59503: NEG
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: LD_INT 1
59511: PUSH
59512: LD_INT 2
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: LIST
59523: LIST
59524: LIST
59525: LIST
59526: LIST
59527: LIST
59528: LIST
59529: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59530: LD_ADDR_VAR 0 40
59534: PUSH
59535: LD_INT 0
59537: PUSH
59538: LD_INT 0
59540: PUSH
59541: EMPTY
59542: LIST
59543: LIST
59544: PUSH
59545: LD_INT 0
59547: PUSH
59548: LD_INT 1
59550: NEG
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: LD_INT 1
59558: PUSH
59559: LD_INT 0
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: LD_INT 1
59568: PUSH
59569: LD_INT 1
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: LD_INT 0
59578: PUSH
59579: LD_INT 1
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: PUSH
59586: LD_INT 1
59588: NEG
59589: PUSH
59590: LD_INT 0
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: LD_INT 1
59599: NEG
59600: PUSH
59601: LD_INT 1
59603: NEG
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 1
59611: PUSH
59612: LD_INT 1
59614: NEG
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: LD_INT 1
59622: NEG
59623: PUSH
59624: LD_INT 1
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: LIST
59635: LIST
59636: LIST
59637: LIST
59638: LIST
59639: LIST
59640: LIST
59641: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59642: LD_ADDR_VAR 0 41
59646: PUSH
59647: LD_INT 0
59649: PUSH
59650: LD_INT 0
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: PUSH
59657: LD_INT 0
59659: PUSH
59660: LD_INT 1
59662: NEG
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: LD_INT 1
59670: PUSH
59671: LD_INT 0
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: PUSH
59678: LD_INT 1
59680: PUSH
59681: LD_INT 1
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: PUSH
59688: LD_INT 0
59690: PUSH
59691: LD_INT 1
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: PUSH
59698: LD_INT 1
59700: NEG
59701: PUSH
59702: LD_INT 0
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: PUSH
59709: LD_INT 1
59711: NEG
59712: PUSH
59713: LD_INT 1
59715: NEG
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: PUSH
59721: LD_INT 1
59723: NEG
59724: PUSH
59725: LD_INT 2
59727: NEG
59728: PUSH
59729: EMPTY
59730: LIST
59731: LIST
59732: PUSH
59733: LD_INT 1
59735: PUSH
59736: LD_INT 1
59738: NEG
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: PUSH
59744: LD_INT 2
59746: PUSH
59747: LD_INT 0
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: PUSH
59754: LD_INT 2
59756: PUSH
59757: LD_INT 1
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: PUSH
59764: LD_INT 2
59766: PUSH
59767: LD_INT 2
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 1
59776: PUSH
59777: LD_INT 2
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: PUSH
59784: LD_INT 1
59786: NEG
59787: PUSH
59788: LD_INT 1
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: PUSH
59795: LD_INT 2
59797: NEG
59798: PUSH
59799: LD_INT 0
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: PUSH
59806: LD_INT 2
59808: NEG
59809: PUSH
59810: LD_INT 1
59812: NEG
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: LD_INT 2
59820: NEG
59821: PUSH
59822: LD_INT 2
59824: NEG
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: PUSH
59830: LD_INT 2
59832: NEG
59833: PUSH
59834: LD_INT 3
59836: NEG
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: PUSH
59842: LD_INT 2
59844: PUSH
59845: LD_INT 1
59847: NEG
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: PUSH
59853: LD_INT 3
59855: PUSH
59856: LD_INT 0
59858: PUSH
59859: EMPTY
59860: LIST
59861: LIST
59862: PUSH
59863: LD_INT 3
59865: PUSH
59866: LD_INT 1
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: PUSH
59873: LD_INT 3
59875: PUSH
59876: LD_INT 2
59878: PUSH
59879: EMPTY
59880: LIST
59881: LIST
59882: PUSH
59883: LD_INT 3
59885: PUSH
59886: LD_INT 3
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: PUSH
59893: LD_INT 2
59895: PUSH
59896: LD_INT 3
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: LD_INT 2
59905: NEG
59906: PUSH
59907: LD_INT 1
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: LD_INT 3
59916: NEG
59917: PUSH
59918: LD_INT 0
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: PUSH
59925: LD_INT 3
59927: NEG
59928: PUSH
59929: LD_INT 1
59931: NEG
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: PUSH
59937: LD_INT 3
59939: NEG
59940: PUSH
59941: LD_INT 2
59943: NEG
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PUSH
59949: LD_INT 3
59951: NEG
59952: PUSH
59953: LD_INT 3
59955: NEG
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: LIST
59969: LIST
59970: LIST
59971: LIST
59972: LIST
59973: LIST
59974: LIST
59975: LIST
59976: LIST
59977: LIST
59978: LIST
59979: LIST
59980: LIST
59981: LIST
59982: LIST
59983: LIST
59984: LIST
59985: LIST
59986: LIST
59987: LIST
59988: LIST
59989: LIST
59990: LIST
59991: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59992: LD_ADDR_VAR 0 42
59996: PUSH
59997: LD_INT 0
59999: PUSH
60000: LD_INT 0
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: LD_INT 0
60009: PUSH
60010: LD_INT 1
60012: NEG
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: LD_INT 1
60020: PUSH
60021: LD_INT 0
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: PUSH
60028: LD_INT 1
60030: PUSH
60031: LD_INT 1
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: PUSH
60038: LD_INT 0
60040: PUSH
60041: LD_INT 1
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: PUSH
60048: LD_INT 1
60050: NEG
60051: PUSH
60052: LD_INT 0
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: PUSH
60059: LD_INT 1
60061: NEG
60062: PUSH
60063: LD_INT 1
60065: NEG
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: PUSH
60071: LD_INT 1
60073: NEG
60074: PUSH
60075: LD_INT 2
60077: NEG
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: PUSH
60083: LD_INT 0
60085: PUSH
60086: LD_INT 2
60088: NEG
60089: PUSH
60090: EMPTY
60091: LIST
60092: LIST
60093: PUSH
60094: LD_INT 1
60096: PUSH
60097: LD_INT 1
60099: NEG
60100: PUSH
60101: EMPTY
60102: LIST
60103: LIST
60104: PUSH
60105: LD_INT 2
60107: PUSH
60108: LD_INT 1
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: PUSH
60115: LD_INT 2
60117: PUSH
60118: LD_INT 2
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: LD_INT 1
60127: PUSH
60128: LD_INT 2
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: PUSH
60135: LD_INT 0
60137: PUSH
60138: LD_INT 2
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: PUSH
60145: LD_INT 1
60147: NEG
60148: PUSH
60149: LD_INT 1
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: LD_INT 2
60158: NEG
60159: PUSH
60160: LD_INT 1
60162: NEG
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: PUSH
60168: LD_INT 2
60170: NEG
60171: PUSH
60172: LD_INT 2
60174: NEG
60175: PUSH
60176: EMPTY
60177: LIST
60178: LIST
60179: PUSH
60180: LD_INT 2
60182: NEG
60183: PUSH
60184: LD_INT 3
60186: NEG
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: PUSH
60192: LD_INT 1
60194: NEG
60195: PUSH
60196: LD_INT 3
60198: NEG
60199: PUSH
60200: EMPTY
60201: LIST
60202: LIST
60203: PUSH
60204: LD_INT 0
60206: PUSH
60207: LD_INT 3
60209: NEG
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: LD_INT 1
60217: PUSH
60218: LD_INT 2
60220: NEG
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: LD_INT 3
60228: PUSH
60229: LD_INT 2
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: PUSH
60236: LD_INT 3
60238: PUSH
60239: LD_INT 3
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: LD_INT 2
60248: PUSH
60249: LD_INT 3
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: PUSH
60256: LD_INT 1
60258: PUSH
60259: LD_INT 3
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: PUSH
60266: LD_INT 0
60268: PUSH
60269: LD_INT 3
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: PUSH
60276: LD_INT 1
60278: NEG
60279: PUSH
60280: LD_INT 2
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: PUSH
60287: LD_INT 3
60289: NEG
60290: PUSH
60291: LD_INT 2
60293: NEG
60294: PUSH
60295: EMPTY
60296: LIST
60297: LIST
60298: PUSH
60299: LD_INT 3
60301: NEG
60302: PUSH
60303: LD_INT 3
60305: NEG
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: LIST
60315: LIST
60316: LIST
60317: LIST
60318: LIST
60319: LIST
60320: LIST
60321: LIST
60322: LIST
60323: LIST
60324: LIST
60325: LIST
60326: LIST
60327: LIST
60328: LIST
60329: LIST
60330: LIST
60331: LIST
60332: LIST
60333: LIST
60334: LIST
60335: LIST
60336: LIST
60337: LIST
60338: LIST
60339: LIST
60340: LIST
60341: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60342: LD_ADDR_VAR 0 43
60346: PUSH
60347: LD_INT 0
60349: PUSH
60350: LD_INT 0
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 0
60359: PUSH
60360: LD_INT 1
60362: NEG
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: LD_INT 1
60370: PUSH
60371: LD_INT 0
60373: PUSH
60374: EMPTY
60375: LIST
60376: LIST
60377: PUSH
60378: LD_INT 1
60380: PUSH
60381: LD_INT 1
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: PUSH
60388: LD_INT 0
60390: PUSH
60391: LD_INT 1
60393: PUSH
60394: EMPTY
60395: LIST
60396: LIST
60397: PUSH
60398: LD_INT 1
60400: NEG
60401: PUSH
60402: LD_INT 0
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: PUSH
60409: LD_INT 1
60411: NEG
60412: PUSH
60413: LD_INT 1
60415: NEG
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: LD_INT 1
60423: NEG
60424: PUSH
60425: LD_INT 2
60427: NEG
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: LD_INT 0
60435: PUSH
60436: LD_INT 2
60438: NEG
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: LD_INT 1
60446: PUSH
60447: LD_INT 1
60449: NEG
60450: PUSH
60451: EMPTY
60452: LIST
60453: LIST
60454: PUSH
60455: LD_INT 2
60457: PUSH
60458: LD_INT 0
60460: PUSH
60461: EMPTY
60462: LIST
60463: LIST
60464: PUSH
60465: LD_INT 2
60467: PUSH
60468: LD_INT 1
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: PUSH
60475: LD_INT 1
60477: PUSH
60478: LD_INT 2
60480: PUSH
60481: EMPTY
60482: LIST
60483: LIST
60484: PUSH
60485: LD_INT 0
60487: PUSH
60488: LD_INT 2
60490: PUSH
60491: EMPTY
60492: LIST
60493: LIST
60494: PUSH
60495: LD_INT 1
60497: NEG
60498: PUSH
60499: LD_INT 1
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: PUSH
60506: LD_INT 2
60508: NEG
60509: PUSH
60510: LD_INT 0
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: PUSH
60517: LD_INT 2
60519: NEG
60520: PUSH
60521: LD_INT 1
60523: NEG
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 1
60531: NEG
60532: PUSH
60533: LD_INT 3
60535: NEG
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PUSH
60541: LD_INT 0
60543: PUSH
60544: LD_INT 3
60546: NEG
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PUSH
60552: LD_INT 1
60554: PUSH
60555: LD_INT 2
60557: NEG
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: PUSH
60563: LD_INT 2
60565: PUSH
60566: LD_INT 1
60568: NEG
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: PUSH
60574: LD_INT 3
60576: PUSH
60577: LD_INT 0
60579: PUSH
60580: EMPTY
60581: LIST
60582: LIST
60583: PUSH
60584: LD_INT 3
60586: PUSH
60587: LD_INT 1
60589: PUSH
60590: EMPTY
60591: LIST
60592: LIST
60593: PUSH
60594: LD_INT 1
60596: PUSH
60597: LD_INT 3
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: PUSH
60604: LD_INT 0
60606: PUSH
60607: LD_INT 3
60609: PUSH
60610: EMPTY
60611: LIST
60612: LIST
60613: PUSH
60614: LD_INT 1
60616: NEG
60617: PUSH
60618: LD_INT 2
60620: PUSH
60621: EMPTY
60622: LIST
60623: LIST
60624: PUSH
60625: LD_INT 2
60627: NEG
60628: PUSH
60629: LD_INT 1
60631: PUSH
60632: EMPTY
60633: LIST
60634: LIST
60635: PUSH
60636: LD_INT 3
60638: NEG
60639: PUSH
60640: LD_INT 0
60642: PUSH
60643: EMPTY
60644: LIST
60645: LIST
60646: PUSH
60647: LD_INT 3
60649: NEG
60650: PUSH
60651: LD_INT 1
60653: NEG
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: LIST
60663: LIST
60664: LIST
60665: LIST
60666: LIST
60667: LIST
60668: LIST
60669: LIST
60670: LIST
60671: LIST
60672: LIST
60673: LIST
60674: LIST
60675: LIST
60676: LIST
60677: LIST
60678: LIST
60679: LIST
60680: LIST
60681: LIST
60682: LIST
60683: LIST
60684: LIST
60685: LIST
60686: LIST
60687: LIST
60688: LIST
60689: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60690: LD_ADDR_VAR 0 44
60694: PUSH
60695: LD_INT 0
60697: PUSH
60698: LD_INT 0
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: LD_INT 0
60707: PUSH
60708: LD_INT 1
60710: NEG
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: PUSH
60716: LD_INT 1
60718: PUSH
60719: LD_INT 0
60721: PUSH
60722: EMPTY
60723: LIST
60724: LIST
60725: PUSH
60726: LD_INT 1
60728: PUSH
60729: LD_INT 1
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PUSH
60736: LD_INT 0
60738: PUSH
60739: LD_INT 1
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: PUSH
60746: LD_INT 1
60748: NEG
60749: PUSH
60750: LD_INT 0
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: LD_INT 1
60759: NEG
60760: PUSH
60761: LD_INT 1
60763: NEG
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: PUSH
60769: LD_INT 1
60771: NEG
60772: PUSH
60773: LD_INT 2
60775: NEG
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: PUSH
60781: LD_INT 1
60783: PUSH
60784: LD_INT 1
60786: NEG
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: PUSH
60792: LD_INT 2
60794: PUSH
60795: LD_INT 0
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: PUSH
60802: LD_INT 2
60804: PUSH
60805: LD_INT 1
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: PUSH
60812: LD_INT 2
60814: PUSH
60815: LD_INT 2
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: LD_INT 1
60824: PUSH
60825: LD_INT 2
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PUSH
60832: LD_INT 1
60834: NEG
60835: PUSH
60836: LD_INT 1
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PUSH
60843: LD_INT 2
60845: NEG
60846: PUSH
60847: LD_INT 0
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 2
60856: NEG
60857: PUSH
60858: LD_INT 1
60860: NEG
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: PUSH
60866: LD_INT 2
60868: NEG
60869: PUSH
60870: LD_INT 2
60872: NEG
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: PUSH
60878: LD_INT 2
60880: NEG
60881: PUSH
60882: LD_INT 3
60884: NEG
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: PUSH
60890: LD_INT 2
60892: PUSH
60893: LD_INT 1
60895: NEG
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: PUSH
60901: LD_INT 3
60903: PUSH
60904: LD_INT 0
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: PUSH
60911: LD_INT 3
60913: PUSH
60914: LD_INT 1
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 3
60923: PUSH
60924: LD_INT 2
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PUSH
60931: LD_INT 3
60933: PUSH
60934: LD_INT 3
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: LD_INT 2
60943: PUSH
60944: LD_INT 3
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: LD_INT 2
60953: NEG
60954: PUSH
60955: LD_INT 1
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: PUSH
60962: LD_INT 3
60964: NEG
60965: PUSH
60966: LD_INT 0
60968: PUSH
60969: EMPTY
60970: LIST
60971: LIST
60972: PUSH
60973: LD_INT 3
60975: NEG
60976: PUSH
60977: LD_INT 1
60979: NEG
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: LD_INT 3
60987: NEG
60988: PUSH
60989: LD_INT 2
60991: NEG
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: PUSH
60997: LD_INT 3
60999: NEG
61000: PUSH
61001: LD_INT 3
61003: NEG
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: PUSH
61009: EMPTY
61010: LIST
61011: LIST
61012: LIST
61013: LIST
61014: LIST
61015: LIST
61016: LIST
61017: LIST
61018: LIST
61019: LIST
61020: LIST
61021: LIST
61022: LIST
61023: LIST
61024: LIST
61025: LIST
61026: LIST
61027: LIST
61028: LIST
61029: LIST
61030: LIST
61031: LIST
61032: LIST
61033: LIST
61034: LIST
61035: LIST
61036: LIST
61037: LIST
61038: LIST
61039: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61040: LD_ADDR_VAR 0 45
61044: PUSH
61045: LD_INT 0
61047: PUSH
61048: LD_INT 0
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: PUSH
61055: LD_INT 0
61057: PUSH
61058: LD_INT 1
61060: NEG
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: PUSH
61066: LD_INT 1
61068: PUSH
61069: LD_INT 0
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: PUSH
61076: LD_INT 1
61078: PUSH
61079: LD_INT 1
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: PUSH
61086: LD_INT 0
61088: PUSH
61089: LD_INT 1
61091: PUSH
61092: EMPTY
61093: LIST
61094: LIST
61095: PUSH
61096: LD_INT 1
61098: NEG
61099: PUSH
61100: LD_INT 0
61102: PUSH
61103: EMPTY
61104: LIST
61105: LIST
61106: PUSH
61107: LD_INT 1
61109: NEG
61110: PUSH
61111: LD_INT 1
61113: NEG
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: PUSH
61119: LD_INT 1
61121: NEG
61122: PUSH
61123: LD_INT 2
61125: NEG
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: PUSH
61131: LD_INT 0
61133: PUSH
61134: LD_INT 2
61136: NEG
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: PUSH
61142: LD_INT 1
61144: PUSH
61145: LD_INT 1
61147: NEG
61148: PUSH
61149: EMPTY
61150: LIST
61151: LIST
61152: PUSH
61153: LD_INT 2
61155: PUSH
61156: LD_INT 1
61158: PUSH
61159: EMPTY
61160: LIST
61161: LIST
61162: PUSH
61163: LD_INT 2
61165: PUSH
61166: LD_INT 2
61168: PUSH
61169: EMPTY
61170: LIST
61171: LIST
61172: PUSH
61173: LD_INT 1
61175: PUSH
61176: LD_INT 2
61178: PUSH
61179: EMPTY
61180: LIST
61181: LIST
61182: PUSH
61183: LD_INT 0
61185: PUSH
61186: LD_INT 2
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: PUSH
61193: LD_INT 1
61195: NEG
61196: PUSH
61197: LD_INT 1
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: PUSH
61204: LD_INT 2
61206: NEG
61207: PUSH
61208: LD_INT 1
61210: NEG
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: PUSH
61216: LD_INT 2
61218: NEG
61219: PUSH
61220: LD_INT 2
61222: NEG
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: PUSH
61228: LD_INT 2
61230: NEG
61231: PUSH
61232: LD_INT 3
61234: NEG
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: PUSH
61240: LD_INT 1
61242: NEG
61243: PUSH
61244: LD_INT 3
61246: NEG
61247: PUSH
61248: EMPTY
61249: LIST
61250: LIST
61251: PUSH
61252: LD_INT 0
61254: PUSH
61255: LD_INT 3
61257: NEG
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: LD_INT 1
61265: PUSH
61266: LD_INT 2
61268: NEG
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 3
61276: PUSH
61277: LD_INT 2
61279: PUSH
61280: EMPTY
61281: LIST
61282: LIST
61283: PUSH
61284: LD_INT 3
61286: PUSH
61287: LD_INT 3
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: LD_INT 2
61296: PUSH
61297: LD_INT 3
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: PUSH
61304: LD_INT 1
61306: PUSH
61307: LD_INT 3
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: LD_INT 0
61316: PUSH
61317: LD_INT 3
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PUSH
61324: LD_INT 1
61326: NEG
61327: PUSH
61328: LD_INT 2
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: PUSH
61335: LD_INT 3
61337: NEG
61338: PUSH
61339: LD_INT 2
61341: NEG
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: LD_INT 3
61349: NEG
61350: PUSH
61351: LD_INT 3
61353: NEG
61354: PUSH
61355: EMPTY
61356: LIST
61357: LIST
61358: PUSH
61359: EMPTY
61360: LIST
61361: LIST
61362: LIST
61363: LIST
61364: LIST
61365: LIST
61366: LIST
61367: LIST
61368: LIST
61369: LIST
61370: LIST
61371: LIST
61372: LIST
61373: LIST
61374: LIST
61375: LIST
61376: LIST
61377: LIST
61378: LIST
61379: LIST
61380: LIST
61381: LIST
61382: LIST
61383: LIST
61384: LIST
61385: LIST
61386: LIST
61387: LIST
61388: LIST
61389: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61390: LD_ADDR_VAR 0 46
61394: PUSH
61395: LD_INT 0
61397: PUSH
61398: LD_INT 0
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: LD_INT 0
61407: PUSH
61408: LD_INT 1
61410: NEG
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: PUSH
61416: LD_INT 1
61418: PUSH
61419: LD_INT 0
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: PUSH
61426: LD_INT 1
61428: PUSH
61429: LD_INT 1
61431: PUSH
61432: EMPTY
61433: LIST
61434: LIST
61435: PUSH
61436: LD_INT 0
61438: PUSH
61439: LD_INT 1
61441: PUSH
61442: EMPTY
61443: LIST
61444: LIST
61445: PUSH
61446: LD_INT 1
61448: NEG
61449: PUSH
61450: LD_INT 0
61452: PUSH
61453: EMPTY
61454: LIST
61455: LIST
61456: PUSH
61457: LD_INT 1
61459: NEG
61460: PUSH
61461: LD_INT 1
61463: NEG
61464: PUSH
61465: EMPTY
61466: LIST
61467: LIST
61468: PUSH
61469: LD_INT 1
61471: NEG
61472: PUSH
61473: LD_INT 2
61475: NEG
61476: PUSH
61477: EMPTY
61478: LIST
61479: LIST
61480: PUSH
61481: LD_INT 0
61483: PUSH
61484: LD_INT 2
61486: NEG
61487: PUSH
61488: EMPTY
61489: LIST
61490: LIST
61491: PUSH
61492: LD_INT 1
61494: PUSH
61495: LD_INT 1
61497: NEG
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: PUSH
61503: LD_INT 2
61505: PUSH
61506: LD_INT 0
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: PUSH
61513: LD_INT 2
61515: PUSH
61516: LD_INT 1
61518: PUSH
61519: EMPTY
61520: LIST
61521: LIST
61522: PUSH
61523: LD_INT 1
61525: PUSH
61526: LD_INT 2
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: PUSH
61533: LD_INT 0
61535: PUSH
61536: LD_INT 2
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: PUSH
61543: LD_INT 1
61545: NEG
61546: PUSH
61547: LD_INT 1
61549: PUSH
61550: EMPTY
61551: LIST
61552: LIST
61553: PUSH
61554: LD_INT 2
61556: NEG
61557: PUSH
61558: LD_INT 0
61560: PUSH
61561: EMPTY
61562: LIST
61563: LIST
61564: PUSH
61565: LD_INT 2
61567: NEG
61568: PUSH
61569: LD_INT 1
61571: NEG
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: PUSH
61577: LD_INT 1
61579: NEG
61580: PUSH
61581: LD_INT 3
61583: NEG
61584: PUSH
61585: EMPTY
61586: LIST
61587: LIST
61588: PUSH
61589: LD_INT 0
61591: PUSH
61592: LD_INT 3
61594: NEG
61595: PUSH
61596: EMPTY
61597: LIST
61598: LIST
61599: PUSH
61600: LD_INT 1
61602: PUSH
61603: LD_INT 2
61605: NEG
61606: PUSH
61607: EMPTY
61608: LIST
61609: LIST
61610: PUSH
61611: LD_INT 2
61613: PUSH
61614: LD_INT 1
61616: NEG
61617: PUSH
61618: EMPTY
61619: LIST
61620: LIST
61621: PUSH
61622: LD_INT 3
61624: PUSH
61625: LD_INT 0
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PUSH
61632: LD_INT 3
61634: PUSH
61635: LD_INT 1
61637: PUSH
61638: EMPTY
61639: LIST
61640: LIST
61641: PUSH
61642: LD_INT 1
61644: PUSH
61645: LD_INT 3
61647: PUSH
61648: EMPTY
61649: LIST
61650: LIST
61651: PUSH
61652: LD_INT 0
61654: PUSH
61655: LD_INT 3
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: PUSH
61662: LD_INT 1
61664: NEG
61665: PUSH
61666: LD_INT 2
61668: PUSH
61669: EMPTY
61670: LIST
61671: LIST
61672: PUSH
61673: LD_INT 2
61675: NEG
61676: PUSH
61677: LD_INT 1
61679: PUSH
61680: EMPTY
61681: LIST
61682: LIST
61683: PUSH
61684: LD_INT 3
61686: NEG
61687: PUSH
61688: LD_INT 0
61690: PUSH
61691: EMPTY
61692: LIST
61693: LIST
61694: PUSH
61695: LD_INT 3
61697: NEG
61698: PUSH
61699: LD_INT 1
61701: NEG
61702: PUSH
61703: EMPTY
61704: LIST
61705: LIST
61706: PUSH
61707: EMPTY
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: LIST
61719: LIST
61720: LIST
61721: LIST
61722: LIST
61723: LIST
61724: LIST
61725: LIST
61726: LIST
61727: LIST
61728: LIST
61729: LIST
61730: LIST
61731: LIST
61732: LIST
61733: LIST
61734: LIST
61735: LIST
61736: LIST
61737: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61738: LD_ADDR_VAR 0 47
61742: PUSH
61743: LD_INT 0
61745: PUSH
61746: LD_INT 0
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: PUSH
61753: LD_INT 0
61755: PUSH
61756: LD_INT 1
61758: NEG
61759: PUSH
61760: EMPTY
61761: LIST
61762: LIST
61763: PUSH
61764: LD_INT 1
61766: PUSH
61767: LD_INT 0
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: PUSH
61774: LD_INT 1
61776: PUSH
61777: LD_INT 1
61779: PUSH
61780: EMPTY
61781: LIST
61782: LIST
61783: PUSH
61784: LD_INT 0
61786: PUSH
61787: LD_INT 1
61789: PUSH
61790: EMPTY
61791: LIST
61792: LIST
61793: PUSH
61794: LD_INT 1
61796: NEG
61797: PUSH
61798: LD_INT 0
61800: PUSH
61801: EMPTY
61802: LIST
61803: LIST
61804: PUSH
61805: LD_INT 1
61807: NEG
61808: PUSH
61809: LD_INT 1
61811: NEG
61812: PUSH
61813: EMPTY
61814: LIST
61815: LIST
61816: PUSH
61817: LD_INT 1
61819: NEG
61820: PUSH
61821: LD_INT 2
61823: NEG
61824: PUSH
61825: EMPTY
61826: LIST
61827: LIST
61828: PUSH
61829: LD_INT 0
61831: PUSH
61832: LD_INT 2
61834: NEG
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: PUSH
61840: LD_INT 1
61842: PUSH
61843: LD_INT 1
61845: NEG
61846: PUSH
61847: EMPTY
61848: LIST
61849: LIST
61850: PUSH
61851: LD_INT 2
61853: NEG
61854: PUSH
61855: LD_INT 1
61857: NEG
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: PUSH
61863: LD_INT 2
61865: NEG
61866: PUSH
61867: LD_INT 2
61869: NEG
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: LIST
61879: LIST
61880: LIST
61881: LIST
61882: LIST
61883: LIST
61884: LIST
61885: LIST
61886: LIST
61887: LIST
61888: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61889: LD_ADDR_VAR 0 48
61893: PUSH
61894: LD_INT 0
61896: PUSH
61897: LD_INT 0
61899: PUSH
61900: EMPTY
61901: LIST
61902: LIST
61903: PUSH
61904: LD_INT 0
61906: PUSH
61907: LD_INT 1
61909: NEG
61910: PUSH
61911: EMPTY
61912: LIST
61913: LIST
61914: PUSH
61915: LD_INT 1
61917: PUSH
61918: LD_INT 0
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: PUSH
61925: LD_INT 1
61927: PUSH
61928: LD_INT 1
61930: PUSH
61931: EMPTY
61932: LIST
61933: LIST
61934: PUSH
61935: LD_INT 0
61937: PUSH
61938: LD_INT 1
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: LD_INT 1
61947: NEG
61948: PUSH
61949: LD_INT 0
61951: PUSH
61952: EMPTY
61953: LIST
61954: LIST
61955: PUSH
61956: LD_INT 1
61958: NEG
61959: PUSH
61960: LD_INT 1
61962: NEG
61963: PUSH
61964: EMPTY
61965: LIST
61966: LIST
61967: PUSH
61968: LD_INT 1
61970: NEG
61971: PUSH
61972: LD_INT 2
61974: NEG
61975: PUSH
61976: EMPTY
61977: LIST
61978: LIST
61979: PUSH
61980: LD_INT 0
61982: PUSH
61983: LD_INT 2
61985: NEG
61986: PUSH
61987: EMPTY
61988: LIST
61989: LIST
61990: PUSH
61991: LD_INT 1
61993: PUSH
61994: LD_INT 1
61996: NEG
61997: PUSH
61998: EMPTY
61999: LIST
62000: LIST
62001: PUSH
62002: LD_INT 2
62004: PUSH
62005: LD_INT 0
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: PUSH
62012: LD_INT 2
62014: PUSH
62015: LD_INT 1
62017: PUSH
62018: EMPTY
62019: LIST
62020: LIST
62021: PUSH
62022: EMPTY
62023: LIST
62024: LIST
62025: LIST
62026: LIST
62027: LIST
62028: LIST
62029: LIST
62030: LIST
62031: LIST
62032: LIST
62033: LIST
62034: LIST
62035: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62036: LD_ADDR_VAR 0 49
62040: PUSH
62041: LD_INT 0
62043: PUSH
62044: LD_INT 0
62046: PUSH
62047: EMPTY
62048: LIST
62049: LIST
62050: PUSH
62051: LD_INT 0
62053: PUSH
62054: LD_INT 1
62056: NEG
62057: PUSH
62058: EMPTY
62059: LIST
62060: LIST
62061: PUSH
62062: LD_INT 1
62064: PUSH
62065: LD_INT 0
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: PUSH
62072: LD_INT 1
62074: PUSH
62075: LD_INT 1
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: PUSH
62082: LD_INT 0
62084: PUSH
62085: LD_INT 1
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: PUSH
62092: LD_INT 1
62094: NEG
62095: PUSH
62096: LD_INT 0
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: PUSH
62103: LD_INT 1
62105: NEG
62106: PUSH
62107: LD_INT 1
62109: NEG
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: PUSH
62115: LD_INT 1
62117: PUSH
62118: LD_INT 1
62120: NEG
62121: PUSH
62122: EMPTY
62123: LIST
62124: LIST
62125: PUSH
62126: LD_INT 2
62128: PUSH
62129: LD_INT 0
62131: PUSH
62132: EMPTY
62133: LIST
62134: LIST
62135: PUSH
62136: LD_INT 2
62138: PUSH
62139: LD_INT 1
62141: PUSH
62142: EMPTY
62143: LIST
62144: LIST
62145: PUSH
62146: LD_INT 2
62148: PUSH
62149: LD_INT 2
62151: PUSH
62152: EMPTY
62153: LIST
62154: LIST
62155: PUSH
62156: LD_INT 1
62158: PUSH
62159: LD_INT 2
62161: PUSH
62162: EMPTY
62163: LIST
62164: LIST
62165: PUSH
62166: EMPTY
62167: LIST
62168: LIST
62169: LIST
62170: LIST
62171: LIST
62172: LIST
62173: LIST
62174: LIST
62175: LIST
62176: LIST
62177: LIST
62178: LIST
62179: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62180: LD_ADDR_VAR 0 50
62184: PUSH
62185: LD_INT 0
62187: PUSH
62188: LD_INT 0
62190: PUSH
62191: EMPTY
62192: LIST
62193: LIST
62194: PUSH
62195: LD_INT 0
62197: PUSH
62198: LD_INT 1
62200: NEG
62201: PUSH
62202: EMPTY
62203: LIST
62204: LIST
62205: PUSH
62206: LD_INT 1
62208: PUSH
62209: LD_INT 0
62211: PUSH
62212: EMPTY
62213: LIST
62214: LIST
62215: PUSH
62216: LD_INT 1
62218: PUSH
62219: LD_INT 1
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: PUSH
62226: LD_INT 0
62228: PUSH
62229: LD_INT 1
62231: PUSH
62232: EMPTY
62233: LIST
62234: LIST
62235: PUSH
62236: LD_INT 1
62238: NEG
62239: PUSH
62240: LD_INT 0
62242: PUSH
62243: EMPTY
62244: LIST
62245: LIST
62246: PUSH
62247: LD_INT 1
62249: NEG
62250: PUSH
62251: LD_INT 1
62253: NEG
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: PUSH
62259: LD_INT 2
62261: PUSH
62262: LD_INT 1
62264: PUSH
62265: EMPTY
62266: LIST
62267: LIST
62268: PUSH
62269: LD_INT 2
62271: PUSH
62272: LD_INT 2
62274: PUSH
62275: EMPTY
62276: LIST
62277: LIST
62278: PUSH
62279: LD_INT 1
62281: PUSH
62282: LD_INT 2
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: LD_INT 0
62291: PUSH
62292: LD_INT 2
62294: PUSH
62295: EMPTY
62296: LIST
62297: LIST
62298: PUSH
62299: LD_INT 1
62301: NEG
62302: PUSH
62303: LD_INT 1
62305: PUSH
62306: EMPTY
62307: LIST
62308: LIST
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: LIST
62314: LIST
62315: LIST
62316: LIST
62317: LIST
62318: LIST
62319: LIST
62320: LIST
62321: LIST
62322: LIST
62323: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62324: LD_ADDR_VAR 0 51
62328: PUSH
62329: LD_INT 0
62331: PUSH
62332: LD_INT 0
62334: PUSH
62335: EMPTY
62336: LIST
62337: LIST
62338: PUSH
62339: LD_INT 0
62341: PUSH
62342: LD_INT 1
62344: NEG
62345: PUSH
62346: EMPTY
62347: LIST
62348: LIST
62349: PUSH
62350: LD_INT 1
62352: PUSH
62353: LD_INT 0
62355: PUSH
62356: EMPTY
62357: LIST
62358: LIST
62359: PUSH
62360: LD_INT 1
62362: PUSH
62363: LD_INT 1
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: PUSH
62370: LD_INT 0
62372: PUSH
62373: LD_INT 1
62375: PUSH
62376: EMPTY
62377: LIST
62378: LIST
62379: PUSH
62380: LD_INT 1
62382: NEG
62383: PUSH
62384: LD_INT 0
62386: PUSH
62387: EMPTY
62388: LIST
62389: LIST
62390: PUSH
62391: LD_INT 1
62393: NEG
62394: PUSH
62395: LD_INT 1
62397: NEG
62398: PUSH
62399: EMPTY
62400: LIST
62401: LIST
62402: PUSH
62403: LD_INT 1
62405: PUSH
62406: LD_INT 2
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PUSH
62413: LD_INT 0
62415: PUSH
62416: LD_INT 2
62418: PUSH
62419: EMPTY
62420: LIST
62421: LIST
62422: PUSH
62423: LD_INT 1
62425: NEG
62426: PUSH
62427: LD_INT 1
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: PUSH
62434: LD_INT 2
62436: NEG
62437: PUSH
62438: LD_INT 0
62440: PUSH
62441: EMPTY
62442: LIST
62443: LIST
62444: PUSH
62445: LD_INT 2
62447: NEG
62448: PUSH
62449: LD_INT 1
62451: NEG
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: PUSH
62457: EMPTY
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: LIST
62467: LIST
62468: LIST
62469: LIST
62470: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62471: LD_ADDR_VAR 0 52
62475: PUSH
62476: LD_INT 0
62478: PUSH
62479: LD_INT 0
62481: PUSH
62482: EMPTY
62483: LIST
62484: LIST
62485: PUSH
62486: LD_INT 0
62488: PUSH
62489: LD_INT 1
62491: NEG
62492: PUSH
62493: EMPTY
62494: LIST
62495: LIST
62496: PUSH
62497: LD_INT 1
62499: PUSH
62500: LD_INT 0
62502: PUSH
62503: EMPTY
62504: LIST
62505: LIST
62506: PUSH
62507: LD_INT 1
62509: PUSH
62510: LD_INT 1
62512: PUSH
62513: EMPTY
62514: LIST
62515: LIST
62516: PUSH
62517: LD_INT 0
62519: PUSH
62520: LD_INT 1
62522: PUSH
62523: EMPTY
62524: LIST
62525: LIST
62526: PUSH
62527: LD_INT 1
62529: NEG
62530: PUSH
62531: LD_INT 0
62533: PUSH
62534: EMPTY
62535: LIST
62536: LIST
62537: PUSH
62538: LD_INT 1
62540: NEG
62541: PUSH
62542: LD_INT 1
62544: NEG
62545: PUSH
62546: EMPTY
62547: LIST
62548: LIST
62549: PUSH
62550: LD_INT 1
62552: NEG
62553: PUSH
62554: LD_INT 2
62556: NEG
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: PUSH
62562: LD_INT 1
62564: NEG
62565: PUSH
62566: LD_INT 1
62568: PUSH
62569: EMPTY
62570: LIST
62571: LIST
62572: PUSH
62573: LD_INT 2
62575: NEG
62576: PUSH
62577: LD_INT 0
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: PUSH
62584: LD_INT 2
62586: NEG
62587: PUSH
62588: LD_INT 1
62590: NEG
62591: PUSH
62592: EMPTY
62593: LIST
62594: LIST
62595: PUSH
62596: LD_INT 2
62598: NEG
62599: PUSH
62600: LD_INT 2
62602: NEG
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: LIST
62612: LIST
62613: LIST
62614: LIST
62615: LIST
62616: LIST
62617: LIST
62618: LIST
62619: LIST
62620: LIST
62621: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62622: LD_ADDR_VAR 0 53
62626: PUSH
62627: LD_INT 0
62629: PUSH
62630: LD_INT 0
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: PUSH
62637: LD_INT 0
62639: PUSH
62640: LD_INT 1
62642: NEG
62643: PUSH
62644: EMPTY
62645: LIST
62646: LIST
62647: PUSH
62648: LD_INT 1
62650: PUSH
62651: LD_INT 0
62653: PUSH
62654: EMPTY
62655: LIST
62656: LIST
62657: PUSH
62658: LD_INT 1
62660: PUSH
62661: LD_INT 1
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: PUSH
62668: LD_INT 0
62670: PUSH
62671: LD_INT 1
62673: PUSH
62674: EMPTY
62675: LIST
62676: LIST
62677: PUSH
62678: LD_INT 1
62680: NEG
62681: PUSH
62682: LD_INT 0
62684: PUSH
62685: EMPTY
62686: LIST
62687: LIST
62688: PUSH
62689: LD_INT 1
62691: NEG
62692: PUSH
62693: LD_INT 1
62695: NEG
62696: PUSH
62697: EMPTY
62698: LIST
62699: LIST
62700: PUSH
62701: LD_INT 1
62703: NEG
62704: PUSH
62705: LD_INT 2
62707: NEG
62708: PUSH
62709: EMPTY
62710: LIST
62711: LIST
62712: PUSH
62713: LD_INT 0
62715: PUSH
62716: LD_INT 2
62718: NEG
62719: PUSH
62720: EMPTY
62721: LIST
62722: LIST
62723: PUSH
62724: LD_INT 1
62726: PUSH
62727: LD_INT 1
62729: NEG
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: PUSH
62735: LD_INT 2
62737: PUSH
62738: LD_INT 0
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: PUSH
62745: LD_INT 2
62747: PUSH
62748: LD_INT 1
62750: PUSH
62751: EMPTY
62752: LIST
62753: LIST
62754: PUSH
62755: LD_INT 2
62757: PUSH
62758: LD_INT 2
62760: PUSH
62761: EMPTY
62762: LIST
62763: LIST
62764: PUSH
62765: LD_INT 1
62767: PUSH
62768: LD_INT 2
62770: PUSH
62771: EMPTY
62772: LIST
62773: LIST
62774: PUSH
62775: LD_INT 0
62777: PUSH
62778: LD_INT 2
62780: PUSH
62781: EMPTY
62782: LIST
62783: LIST
62784: PUSH
62785: LD_INT 1
62787: NEG
62788: PUSH
62789: LD_INT 1
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: PUSH
62796: LD_INT 2
62798: NEG
62799: PUSH
62800: LD_INT 0
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: PUSH
62807: LD_INT 2
62809: NEG
62810: PUSH
62811: LD_INT 1
62813: NEG
62814: PUSH
62815: EMPTY
62816: LIST
62817: LIST
62818: PUSH
62819: LD_INT 2
62821: NEG
62822: PUSH
62823: LD_INT 2
62825: NEG
62826: PUSH
62827: EMPTY
62828: LIST
62829: LIST
62830: PUSH
62831: EMPTY
62832: LIST
62833: LIST
62834: LIST
62835: LIST
62836: LIST
62837: LIST
62838: LIST
62839: LIST
62840: LIST
62841: LIST
62842: LIST
62843: LIST
62844: LIST
62845: LIST
62846: LIST
62847: LIST
62848: LIST
62849: LIST
62850: LIST
62851: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62852: LD_ADDR_VAR 0 54
62856: PUSH
62857: LD_INT 0
62859: PUSH
62860: LD_INT 0
62862: PUSH
62863: EMPTY
62864: LIST
62865: LIST
62866: PUSH
62867: LD_INT 0
62869: PUSH
62870: LD_INT 1
62872: NEG
62873: PUSH
62874: EMPTY
62875: LIST
62876: LIST
62877: PUSH
62878: LD_INT 1
62880: PUSH
62881: LD_INT 0
62883: PUSH
62884: EMPTY
62885: LIST
62886: LIST
62887: PUSH
62888: LD_INT 1
62890: PUSH
62891: LD_INT 1
62893: PUSH
62894: EMPTY
62895: LIST
62896: LIST
62897: PUSH
62898: LD_INT 0
62900: PUSH
62901: LD_INT 1
62903: PUSH
62904: EMPTY
62905: LIST
62906: LIST
62907: PUSH
62908: LD_INT 1
62910: NEG
62911: PUSH
62912: LD_INT 0
62914: PUSH
62915: EMPTY
62916: LIST
62917: LIST
62918: PUSH
62919: LD_INT 1
62921: NEG
62922: PUSH
62923: LD_INT 1
62925: NEG
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: PUSH
62931: LD_INT 1
62933: NEG
62934: PUSH
62935: LD_INT 2
62937: NEG
62938: PUSH
62939: EMPTY
62940: LIST
62941: LIST
62942: PUSH
62943: LD_INT 0
62945: PUSH
62946: LD_INT 2
62948: NEG
62949: PUSH
62950: EMPTY
62951: LIST
62952: LIST
62953: PUSH
62954: LD_INT 1
62956: PUSH
62957: LD_INT 1
62959: NEG
62960: PUSH
62961: EMPTY
62962: LIST
62963: LIST
62964: PUSH
62965: LD_INT 2
62967: PUSH
62968: LD_INT 0
62970: PUSH
62971: EMPTY
62972: LIST
62973: LIST
62974: PUSH
62975: LD_INT 2
62977: PUSH
62978: LD_INT 1
62980: PUSH
62981: EMPTY
62982: LIST
62983: LIST
62984: PUSH
62985: LD_INT 2
62987: PUSH
62988: LD_INT 2
62990: PUSH
62991: EMPTY
62992: LIST
62993: LIST
62994: PUSH
62995: LD_INT 1
62997: PUSH
62998: LD_INT 2
63000: PUSH
63001: EMPTY
63002: LIST
63003: LIST
63004: PUSH
63005: LD_INT 0
63007: PUSH
63008: LD_INT 2
63010: PUSH
63011: EMPTY
63012: LIST
63013: LIST
63014: PUSH
63015: LD_INT 1
63017: NEG
63018: PUSH
63019: LD_INT 1
63021: PUSH
63022: EMPTY
63023: LIST
63024: LIST
63025: PUSH
63026: LD_INT 2
63028: NEG
63029: PUSH
63030: LD_INT 0
63032: PUSH
63033: EMPTY
63034: LIST
63035: LIST
63036: PUSH
63037: LD_INT 2
63039: NEG
63040: PUSH
63041: LD_INT 1
63043: NEG
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: PUSH
63049: LD_INT 2
63051: NEG
63052: PUSH
63053: LD_INT 2
63055: NEG
63056: PUSH
63057: EMPTY
63058: LIST
63059: LIST
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: LIST
63065: LIST
63066: LIST
63067: LIST
63068: LIST
63069: LIST
63070: LIST
63071: LIST
63072: LIST
63073: LIST
63074: LIST
63075: LIST
63076: LIST
63077: LIST
63078: LIST
63079: LIST
63080: LIST
63081: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63082: LD_ADDR_VAR 0 55
63086: PUSH
63087: LD_INT 0
63089: PUSH
63090: LD_INT 0
63092: PUSH
63093: EMPTY
63094: LIST
63095: LIST
63096: PUSH
63097: LD_INT 0
63099: PUSH
63100: LD_INT 1
63102: NEG
63103: PUSH
63104: EMPTY
63105: LIST
63106: LIST
63107: PUSH
63108: LD_INT 1
63110: PUSH
63111: LD_INT 0
63113: PUSH
63114: EMPTY
63115: LIST
63116: LIST
63117: PUSH
63118: LD_INT 1
63120: PUSH
63121: LD_INT 1
63123: PUSH
63124: EMPTY
63125: LIST
63126: LIST
63127: PUSH
63128: LD_INT 0
63130: PUSH
63131: LD_INT 1
63133: PUSH
63134: EMPTY
63135: LIST
63136: LIST
63137: PUSH
63138: LD_INT 1
63140: NEG
63141: PUSH
63142: LD_INT 0
63144: PUSH
63145: EMPTY
63146: LIST
63147: LIST
63148: PUSH
63149: LD_INT 1
63151: NEG
63152: PUSH
63153: LD_INT 1
63155: NEG
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: PUSH
63161: LD_INT 1
63163: NEG
63164: PUSH
63165: LD_INT 2
63167: NEG
63168: PUSH
63169: EMPTY
63170: LIST
63171: LIST
63172: PUSH
63173: LD_INT 0
63175: PUSH
63176: LD_INT 2
63178: NEG
63179: PUSH
63180: EMPTY
63181: LIST
63182: LIST
63183: PUSH
63184: LD_INT 1
63186: PUSH
63187: LD_INT 1
63189: NEG
63190: PUSH
63191: EMPTY
63192: LIST
63193: LIST
63194: PUSH
63195: LD_INT 2
63197: PUSH
63198: LD_INT 0
63200: PUSH
63201: EMPTY
63202: LIST
63203: LIST
63204: PUSH
63205: LD_INT 2
63207: PUSH
63208: LD_INT 1
63210: PUSH
63211: EMPTY
63212: LIST
63213: LIST
63214: PUSH
63215: LD_INT 2
63217: PUSH
63218: LD_INT 2
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: PUSH
63225: LD_INT 1
63227: PUSH
63228: LD_INT 2
63230: PUSH
63231: EMPTY
63232: LIST
63233: LIST
63234: PUSH
63235: LD_INT 0
63237: PUSH
63238: LD_INT 2
63240: PUSH
63241: EMPTY
63242: LIST
63243: LIST
63244: PUSH
63245: LD_INT 1
63247: NEG
63248: PUSH
63249: LD_INT 1
63251: PUSH
63252: EMPTY
63253: LIST
63254: LIST
63255: PUSH
63256: LD_INT 2
63258: NEG
63259: PUSH
63260: LD_INT 0
63262: PUSH
63263: EMPTY
63264: LIST
63265: LIST
63266: PUSH
63267: LD_INT 2
63269: NEG
63270: PUSH
63271: LD_INT 1
63273: NEG
63274: PUSH
63275: EMPTY
63276: LIST
63277: LIST
63278: PUSH
63279: LD_INT 2
63281: NEG
63282: PUSH
63283: LD_INT 2
63285: NEG
63286: PUSH
63287: EMPTY
63288: LIST
63289: LIST
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: LIST
63295: LIST
63296: LIST
63297: LIST
63298: LIST
63299: LIST
63300: LIST
63301: LIST
63302: LIST
63303: LIST
63304: LIST
63305: LIST
63306: LIST
63307: LIST
63308: LIST
63309: LIST
63310: LIST
63311: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63312: LD_ADDR_VAR 0 56
63316: PUSH
63317: LD_INT 0
63319: PUSH
63320: LD_INT 0
63322: PUSH
63323: EMPTY
63324: LIST
63325: LIST
63326: PUSH
63327: LD_INT 0
63329: PUSH
63330: LD_INT 1
63332: NEG
63333: PUSH
63334: EMPTY
63335: LIST
63336: LIST
63337: PUSH
63338: LD_INT 1
63340: PUSH
63341: LD_INT 0
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: PUSH
63348: LD_INT 1
63350: PUSH
63351: LD_INT 1
63353: PUSH
63354: EMPTY
63355: LIST
63356: LIST
63357: PUSH
63358: LD_INT 0
63360: PUSH
63361: LD_INT 1
63363: PUSH
63364: EMPTY
63365: LIST
63366: LIST
63367: PUSH
63368: LD_INT 1
63370: NEG
63371: PUSH
63372: LD_INT 0
63374: PUSH
63375: EMPTY
63376: LIST
63377: LIST
63378: PUSH
63379: LD_INT 1
63381: NEG
63382: PUSH
63383: LD_INT 1
63385: NEG
63386: PUSH
63387: EMPTY
63388: LIST
63389: LIST
63390: PUSH
63391: LD_INT 1
63393: NEG
63394: PUSH
63395: LD_INT 2
63397: NEG
63398: PUSH
63399: EMPTY
63400: LIST
63401: LIST
63402: PUSH
63403: LD_INT 0
63405: PUSH
63406: LD_INT 2
63408: NEG
63409: PUSH
63410: EMPTY
63411: LIST
63412: LIST
63413: PUSH
63414: LD_INT 1
63416: PUSH
63417: LD_INT 1
63419: NEG
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: PUSH
63425: LD_INT 2
63427: PUSH
63428: LD_INT 0
63430: PUSH
63431: EMPTY
63432: LIST
63433: LIST
63434: PUSH
63435: LD_INT 2
63437: PUSH
63438: LD_INT 1
63440: PUSH
63441: EMPTY
63442: LIST
63443: LIST
63444: PUSH
63445: LD_INT 2
63447: PUSH
63448: LD_INT 2
63450: PUSH
63451: EMPTY
63452: LIST
63453: LIST
63454: PUSH
63455: LD_INT 1
63457: PUSH
63458: LD_INT 2
63460: PUSH
63461: EMPTY
63462: LIST
63463: LIST
63464: PUSH
63465: LD_INT 0
63467: PUSH
63468: LD_INT 2
63470: PUSH
63471: EMPTY
63472: LIST
63473: LIST
63474: PUSH
63475: LD_INT 1
63477: NEG
63478: PUSH
63479: LD_INT 1
63481: PUSH
63482: EMPTY
63483: LIST
63484: LIST
63485: PUSH
63486: LD_INT 2
63488: NEG
63489: PUSH
63490: LD_INT 0
63492: PUSH
63493: EMPTY
63494: LIST
63495: LIST
63496: PUSH
63497: LD_INT 2
63499: NEG
63500: PUSH
63501: LD_INT 1
63503: NEG
63504: PUSH
63505: EMPTY
63506: LIST
63507: LIST
63508: PUSH
63509: LD_INT 2
63511: NEG
63512: PUSH
63513: LD_INT 2
63515: NEG
63516: PUSH
63517: EMPTY
63518: LIST
63519: LIST
63520: PUSH
63521: EMPTY
63522: LIST
63523: LIST
63524: LIST
63525: LIST
63526: LIST
63527: LIST
63528: LIST
63529: LIST
63530: LIST
63531: LIST
63532: LIST
63533: LIST
63534: LIST
63535: LIST
63536: LIST
63537: LIST
63538: LIST
63539: LIST
63540: LIST
63541: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63542: LD_ADDR_VAR 0 57
63546: PUSH
63547: LD_INT 0
63549: PUSH
63550: LD_INT 0
63552: PUSH
63553: EMPTY
63554: LIST
63555: LIST
63556: PUSH
63557: LD_INT 0
63559: PUSH
63560: LD_INT 1
63562: NEG
63563: PUSH
63564: EMPTY
63565: LIST
63566: LIST
63567: PUSH
63568: LD_INT 1
63570: PUSH
63571: LD_INT 0
63573: PUSH
63574: EMPTY
63575: LIST
63576: LIST
63577: PUSH
63578: LD_INT 1
63580: PUSH
63581: LD_INT 1
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: PUSH
63588: LD_INT 0
63590: PUSH
63591: LD_INT 1
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: PUSH
63598: LD_INT 1
63600: NEG
63601: PUSH
63602: LD_INT 0
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: PUSH
63609: LD_INT 1
63611: NEG
63612: PUSH
63613: LD_INT 1
63615: NEG
63616: PUSH
63617: EMPTY
63618: LIST
63619: LIST
63620: PUSH
63621: LD_INT 1
63623: NEG
63624: PUSH
63625: LD_INT 2
63627: NEG
63628: PUSH
63629: EMPTY
63630: LIST
63631: LIST
63632: PUSH
63633: LD_INT 0
63635: PUSH
63636: LD_INT 2
63638: NEG
63639: PUSH
63640: EMPTY
63641: LIST
63642: LIST
63643: PUSH
63644: LD_INT 1
63646: PUSH
63647: LD_INT 1
63649: NEG
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: PUSH
63655: LD_INT 2
63657: PUSH
63658: LD_INT 0
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: PUSH
63665: LD_INT 2
63667: PUSH
63668: LD_INT 1
63670: PUSH
63671: EMPTY
63672: LIST
63673: LIST
63674: PUSH
63675: LD_INT 2
63677: PUSH
63678: LD_INT 2
63680: PUSH
63681: EMPTY
63682: LIST
63683: LIST
63684: PUSH
63685: LD_INT 1
63687: PUSH
63688: LD_INT 2
63690: PUSH
63691: EMPTY
63692: LIST
63693: LIST
63694: PUSH
63695: LD_INT 0
63697: PUSH
63698: LD_INT 2
63700: PUSH
63701: EMPTY
63702: LIST
63703: LIST
63704: PUSH
63705: LD_INT 1
63707: NEG
63708: PUSH
63709: LD_INT 1
63711: PUSH
63712: EMPTY
63713: LIST
63714: LIST
63715: PUSH
63716: LD_INT 2
63718: NEG
63719: PUSH
63720: LD_INT 0
63722: PUSH
63723: EMPTY
63724: LIST
63725: LIST
63726: PUSH
63727: LD_INT 2
63729: NEG
63730: PUSH
63731: LD_INT 1
63733: NEG
63734: PUSH
63735: EMPTY
63736: LIST
63737: LIST
63738: PUSH
63739: LD_INT 2
63741: NEG
63742: PUSH
63743: LD_INT 2
63745: NEG
63746: PUSH
63747: EMPTY
63748: LIST
63749: LIST
63750: PUSH
63751: EMPTY
63752: LIST
63753: LIST
63754: LIST
63755: LIST
63756: LIST
63757: LIST
63758: LIST
63759: LIST
63760: LIST
63761: LIST
63762: LIST
63763: LIST
63764: LIST
63765: LIST
63766: LIST
63767: LIST
63768: LIST
63769: LIST
63770: LIST
63771: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63772: LD_ADDR_VAR 0 58
63776: PUSH
63777: LD_INT 0
63779: PUSH
63780: LD_INT 0
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: PUSH
63787: LD_INT 0
63789: PUSH
63790: LD_INT 1
63792: NEG
63793: PUSH
63794: EMPTY
63795: LIST
63796: LIST
63797: PUSH
63798: LD_INT 1
63800: PUSH
63801: LD_INT 0
63803: PUSH
63804: EMPTY
63805: LIST
63806: LIST
63807: PUSH
63808: LD_INT 1
63810: PUSH
63811: LD_INT 1
63813: PUSH
63814: EMPTY
63815: LIST
63816: LIST
63817: PUSH
63818: LD_INT 0
63820: PUSH
63821: LD_INT 1
63823: PUSH
63824: EMPTY
63825: LIST
63826: LIST
63827: PUSH
63828: LD_INT 1
63830: NEG
63831: PUSH
63832: LD_INT 0
63834: PUSH
63835: EMPTY
63836: LIST
63837: LIST
63838: PUSH
63839: LD_INT 1
63841: NEG
63842: PUSH
63843: LD_INT 1
63845: NEG
63846: PUSH
63847: EMPTY
63848: LIST
63849: LIST
63850: PUSH
63851: LD_INT 1
63853: NEG
63854: PUSH
63855: LD_INT 2
63857: NEG
63858: PUSH
63859: EMPTY
63860: LIST
63861: LIST
63862: PUSH
63863: LD_INT 0
63865: PUSH
63866: LD_INT 2
63868: NEG
63869: PUSH
63870: EMPTY
63871: LIST
63872: LIST
63873: PUSH
63874: LD_INT 1
63876: PUSH
63877: LD_INT 1
63879: NEG
63880: PUSH
63881: EMPTY
63882: LIST
63883: LIST
63884: PUSH
63885: LD_INT 2
63887: PUSH
63888: LD_INT 0
63890: PUSH
63891: EMPTY
63892: LIST
63893: LIST
63894: PUSH
63895: LD_INT 2
63897: PUSH
63898: LD_INT 1
63900: PUSH
63901: EMPTY
63902: LIST
63903: LIST
63904: PUSH
63905: LD_INT 2
63907: PUSH
63908: LD_INT 2
63910: PUSH
63911: EMPTY
63912: LIST
63913: LIST
63914: PUSH
63915: LD_INT 1
63917: PUSH
63918: LD_INT 2
63920: PUSH
63921: EMPTY
63922: LIST
63923: LIST
63924: PUSH
63925: LD_INT 0
63927: PUSH
63928: LD_INT 2
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: PUSH
63935: LD_INT 1
63937: NEG
63938: PUSH
63939: LD_INT 1
63941: PUSH
63942: EMPTY
63943: LIST
63944: LIST
63945: PUSH
63946: LD_INT 2
63948: NEG
63949: PUSH
63950: LD_INT 0
63952: PUSH
63953: EMPTY
63954: LIST
63955: LIST
63956: PUSH
63957: LD_INT 2
63959: NEG
63960: PUSH
63961: LD_INT 1
63963: NEG
63964: PUSH
63965: EMPTY
63966: LIST
63967: LIST
63968: PUSH
63969: LD_INT 2
63971: NEG
63972: PUSH
63973: LD_INT 2
63975: NEG
63976: PUSH
63977: EMPTY
63978: LIST
63979: LIST
63980: PUSH
63981: EMPTY
63982: LIST
63983: LIST
63984: LIST
63985: LIST
63986: LIST
63987: LIST
63988: LIST
63989: LIST
63990: LIST
63991: LIST
63992: LIST
63993: LIST
63994: LIST
63995: LIST
63996: LIST
63997: LIST
63998: LIST
63999: LIST
64000: LIST
64001: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64002: LD_ADDR_VAR 0 59
64006: PUSH
64007: LD_INT 0
64009: PUSH
64010: LD_INT 0
64012: PUSH
64013: EMPTY
64014: LIST
64015: LIST
64016: PUSH
64017: LD_INT 0
64019: PUSH
64020: LD_INT 1
64022: NEG
64023: PUSH
64024: EMPTY
64025: LIST
64026: LIST
64027: PUSH
64028: LD_INT 1
64030: PUSH
64031: LD_INT 0
64033: PUSH
64034: EMPTY
64035: LIST
64036: LIST
64037: PUSH
64038: LD_INT 1
64040: PUSH
64041: LD_INT 1
64043: PUSH
64044: EMPTY
64045: LIST
64046: LIST
64047: PUSH
64048: LD_INT 0
64050: PUSH
64051: LD_INT 1
64053: PUSH
64054: EMPTY
64055: LIST
64056: LIST
64057: PUSH
64058: LD_INT 1
64060: NEG
64061: PUSH
64062: LD_INT 0
64064: PUSH
64065: EMPTY
64066: LIST
64067: LIST
64068: PUSH
64069: LD_INT 1
64071: NEG
64072: PUSH
64073: LD_INT 1
64075: NEG
64076: PUSH
64077: EMPTY
64078: LIST
64079: LIST
64080: PUSH
64081: EMPTY
64082: LIST
64083: LIST
64084: LIST
64085: LIST
64086: LIST
64087: LIST
64088: LIST
64089: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64090: LD_ADDR_VAR 0 60
64094: PUSH
64095: LD_INT 0
64097: PUSH
64098: LD_INT 0
64100: PUSH
64101: EMPTY
64102: LIST
64103: LIST
64104: PUSH
64105: LD_INT 0
64107: PUSH
64108: LD_INT 1
64110: NEG
64111: PUSH
64112: EMPTY
64113: LIST
64114: LIST
64115: PUSH
64116: LD_INT 1
64118: PUSH
64119: LD_INT 0
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: PUSH
64126: LD_INT 1
64128: PUSH
64129: LD_INT 1
64131: PUSH
64132: EMPTY
64133: LIST
64134: LIST
64135: PUSH
64136: LD_INT 0
64138: PUSH
64139: LD_INT 1
64141: PUSH
64142: EMPTY
64143: LIST
64144: LIST
64145: PUSH
64146: LD_INT 1
64148: NEG
64149: PUSH
64150: LD_INT 0
64152: PUSH
64153: EMPTY
64154: LIST
64155: LIST
64156: PUSH
64157: LD_INT 1
64159: NEG
64160: PUSH
64161: LD_INT 1
64163: NEG
64164: PUSH
64165: EMPTY
64166: LIST
64167: LIST
64168: PUSH
64169: EMPTY
64170: LIST
64171: LIST
64172: LIST
64173: LIST
64174: LIST
64175: LIST
64176: LIST
64177: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64178: LD_ADDR_VAR 0 61
64182: PUSH
64183: LD_INT 0
64185: PUSH
64186: LD_INT 0
64188: PUSH
64189: EMPTY
64190: LIST
64191: LIST
64192: PUSH
64193: LD_INT 0
64195: PUSH
64196: LD_INT 1
64198: NEG
64199: PUSH
64200: EMPTY
64201: LIST
64202: LIST
64203: PUSH
64204: LD_INT 1
64206: PUSH
64207: LD_INT 0
64209: PUSH
64210: EMPTY
64211: LIST
64212: LIST
64213: PUSH
64214: LD_INT 1
64216: PUSH
64217: LD_INT 1
64219: PUSH
64220: EMPTY
64221: LIST
64222: LIST
64223: PUSH
64224: LD_INT 0
64226: PUSH
64227: LD_INT 1
64229: PUSH
64230: EMPTY
64231: LIST
64232: LIST
64233: PUSH
64234: LD_INT 1
64236: NEG
64237: PUSH
64238: LD_INT 0
64240: PUSH
64241: EMPTY
64242: LIST
64243: LIST
64244: PUSH
64245: LD_INT 1
64247: NEG
64248: PUSH
64249: LD_INT 1
64251: NEG
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: PUSH
64257: EMPTY
64258: LIST
64259: LIST
64260: LIST
64261: LIST
64262: LIST
64263: LIST
64264: LIST
64265: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64266: LD_ADDR_VAR 0 62
64270: PUSH
64271: LD_INT 0
64273: PUSH
64274: LD_INT 0
64276: PUSH
64277: EMPTY
64278: LIST
64279: LIST
64280: PUSH
64281: LD_INT 0
64283: PUSH
64284: LD_INT 1
64286: NEG
64287: PUSH
64288: EMPTY
64289: LIST
64290: LIST
64291: PUSH
64292: LD_INT 1
64294: PUSH
64295: LD_INT 0
64297: PUSH
64298: EMPTY
64299: LIST
64300: LIST
64301: PUSH
64302: LD_INT 1
64304: PUSH
64305: LD_INT 1
64307: PUSH
64308: EMPTY
64309: LIST
64310: LIST
64311: PUSH
64312: LD_INT 0
64314: PUSH
64315: LD_INT 1
64317: PUSH
64318: EMPTY
64319: LIST
64320: LIST
64321: PUSH
64322: LD_INT 1
64324: NEG
64325: PUSH
64326: LD_INT 0
64328: PUSH
64329: EMPTY
64330: LIST
64331: LIST
64332: PUSH
64333: LD_INT 1
64335: NEG
64336: PUSH
64337: LD_INT 1
64339: NEG
64340: PUSH
64341: EMPTY
64342: LIST
64343: LIST
64344: PUSH
64345: EMPTY
64346: LIST
64347: LIST
64348: LIST
64349: LIST
64350: LIST
64351: LIST
64352: LIST
64353: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64354: LD_ADDR_VAR 0 63
64358: PUSH
64359: LD_INT 0
64361: PUSH
64362: LD_INT 0
64364: PUSH
64365: EMPTY
64366: LIST
64367: LIST
64368: PUSH
64369: LD_INT 0
64371: PUSH
64372: LD_INT 1
64374: NEG
64375: PUSH
64376: EMPTY
64377: LIST
64378: LIST
64379: PUSH
64380: LD_INT 1
64382: PUSH
64383: LD_INT 0
64385: PUSH
64386: EMPTY
64387: LIST
64388: LIST
64389: PUSH
64390: LD_INT 1
64392: PUSH
64393: LD_INT 1
64395: PUSH
64396: EMPTY
64397: LIST
64398: LIST
64399: PUSH
64400: LD_INT 0
64402: PUSH
64403: LD_INT 1
64405: PUSH
64406: EMPTY
64407: LIST
64408: LIST
64409: PUSH
64410: LD_INT 1
64412: NEG
64413: PUSH
64414: LD_INT 0
64416: PUSH
64417: EMPTY
64418: LIST
64419: LIST
64420: PUSH
64421: LD_INT 1
64423: NEG
64424: PUSH
64425: LD_INT 1
64427: NEG
64428: PUSH
64429: EMPTY
64430: LIST
64431: LIST
64432: PUSH
64433: EMPTY
64434: LIST
64435: LIST
64436: LIST
64437: LIST
64438: LIST
64439: LIST
64440: LIST
64441: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64442: LD_ADDR_VAR 0 64
64446: PUSH
64447: LD_INT 0
64449: PUSH
64450: LD_INT 0
64452: PUSH
64453: EMPTY
64454: LIST
64455: LIST
64456: PUSH
64457: LD_INT 0
64459: PUSH
64460: LD_INT 1
64462: NEG
64463: PUSH
64464: EMPTY
64465: LIST
64466: LIST
64467: PUSH
64468: LD_INT 1
64470: PUSH
64471: LD_INT 0
64473: PUSH
64474: EMPTY
64475: LIST
64476: LIST
64477: PUSH
64478: LD_INT 1
64480: PUSH
64481: LD_INT 1
64483: PUSH
64484: EMPTY
64485: LIST
64486: LIST
64487: PUSH
64488: LD_INT 0
64490: PUSH
64491: LD_INT 1
64493: PUSH
64494: EMPTY
64495: LIST
64496: LIST
64497: PUSH
64498: LD_INT 1
64500: NEG
64501: PUSH
64502: LD_INT 0
64504: PUSH
64505: EMPTY
64506: LIST
64507: LIST
64508: PUSH
64509: LD_INT 1
64511: NEG
64512: PUSH
64513: LD_INT 1
64515: NEG
64516: PUSH
64517: EMPTY
64518: LIST
64519: LIST
64520: PUSH
64521: EMPTY
64522: LIST
64523: LIST
64524: LIST
64525: LIST
64526: LIST
64527: LIST
64528: LIST
64529: ST_TO_ADDR
// end ; 1 :
64530: GO 70427
64532: LD_INT 1
64534: DOUBLE
64535: EQUAL
64536: IFTRUE 64540
64538: GO 67163
64540: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64541: LD_ADDR_VAR 0 11
64545: PUSH
64546: LD_INT 1
64548: NEG
64549: PUSH
64550: LD_INT 3
64552: NEG
64553: PUSH
64554: EMPTY
64555: LIST
64556: LIST
64557: PUSH
64558: LD_INT 0
64560: PUSH
64561: LD_INT 3
64563: NEG
64564: PUSH
64565: EMPTY
64566: LIST
64567: LIST
64568: PUSH
64569: LD_INT 1
64571: PUSH
64572: LD_INT 2
64574: NEG
64575: PUSH
64576: EMPTY
64577: LIST
64578: LIST
64579: PUSH
64580: EMPTY
64581: LIST
64582: LIST
64583: LIST
64584: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64585: LD_ADDR_VAR 0 12
64589: PUSH
64590: LD_INT 2
64592: PUSH
64593: LD_INT 1
64595: NEG
64596: PUSH
64597: EMPTY
64598: LIST
64599: LIST
64600: PUSH
64601: LD_INT 3
64603: PUSH
64604: LD_INT 0
64606: PUSH
64607: EMPTY
64608: LIST
64609: LIST
64610: PUSH
64611: LD_INT 3
64613: PUSH
64614: LD_INT 1
64616: PUSH
64617: EMPTY
64618: LIST
64619: LIST
64620: PUSH
64621: EMPTY
64622: LIST
64623: LIST
64624: LIST
64625: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64626: LD_ADDR_VAR 0 13
64630: PUSH
64631: LD_INT 3
64633: PUSH
64634: LD_INT 2
64636: PUSH
64637: EMPTY
64638: LIST
64639: LIST
64640: PUSH
64641: LD_INT 3
64643: PUSH
64644: LD_INT 3
64646: PUSH
64647: EMPTY
64648: LIST
64649: LIST
64650: PUSH
64651: LD_INT 2
64653: PUSH
64654: LD_INT 3
64656: PUSH
64657: EMPTY
64658: LIST
64659: LIST
64660: PUSH
64661: EMPTY
64662: LIST
64663: LIST
64664: LIST
64665: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64666: LD_ADDR_VAR 0 14
64670: PUSH
64671: LD_INT 1
64673: PUSH
64674: LD_INT 3
64676: PUSH
64677: EMPTY
64678: LIST
64679: LIST
64680: PUSH
64681: LD_INT 0
64683: PUSH
64684: LD_INT 3
64686: PUSH
64687: EMPTY
64688: LIST
64689: LIST
64690: PUSH
64691: LD_INT 1
64693: NEG
64694: PUSH
64695: LD_INT 2
64697: PUSH
64698: EMPTY
64699: LIST
64700: LIST
64701: PUSH
64702: EMPTY
64703: LIST
64704: LIST
64705: LIST
64706: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64707: LD_ADDR_VAR 0 15
64711: PUSH
64712: LD_INT 2
64714: NEG
64715: PUSH
64716: LD_INT 1
64718: PUSH
64719: EMPTY
64720: LIST
64721: LIST
64722: PUSH
64723: LD_INT 3
64725: NEG
64726: PUSH
64727: LD_INT 0
64729: PUSH
64730: EMPTY
64731: LIST
64732: LIST
64733: PUSH
64734: LD_INT 3
64736: NEG
64737: PUSH
64738: LD_INT 1
64740: NEG
64741: PUSH
64742: EMPTY
64743: LIST
64744: LIST
64745: PUSH
64746: EMPTY
64747: LIST
64748: LIST
64749: LIST
64750: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64751: LD_ADDR_VAR 0 16
64755: PUSH
64756: LD_INT 2
64758: NEG
64759: PUSH
64760: LD_INT 3
64762: NEG
64763: PUSH
64764: EMPTY
64765: LIST
64766: LIST
64767: PUSH
64768: LD_INT 3
64770: NEG
64771: PUSH
64772: LD_INT 2
64774: NEG
64775: PUSH
64776: EMPTY
64777: LIST
64778: LIST
64779: PUSH
64780: LD_INT 3
64782: NEG
64783: PUSH
64784: LD_INT 3
64786: NEG
64787: PUSH
64788: EMPTY
64789: LIST
64790: LIST
64791: PUSH
64792: EMPTY
64793: LIST
64794: LIST
64795: LIST
64796: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64797: LD_ADDR_VAR 0 17
64801: PUSH
64802: LD_INT 1
64804: NEG
64805: PUSH
64806: LD_INT 3
64808: NEG
64809: PUSH
64810: EMPTY
64811: LIST
64812: LIST
64813: PUSH
64814: LD_INT 0
64816: PUSH
64817: LD_INT 3
64819: NEG
64820: PUSH
64821: EMPTY
64822: LIST
64823: LIST
64824: PUSH
64825: LD_INT 1
64827: PUSH
64828: LD_INT 2
64830: NEG
64831: PUSH
64832: EMPTY
64833: LIST
64834: LIST
64835: PUSH
64836: EMPTY
64837: LIST
64838: LIST
64839: LIST
64840: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64841: LD_ADDR_VAR 0 18
64845: PUSH
64846: LD_INT 2
64848: PUSH
64849: LD_INT 1
64851: NEG
64852: PUSH
64853: EMPTY
64854: LIST
64855: LIST
64856: PUSH
64857: LD_INT 3
64859: PUSH
64860: LD_INT 0
64862: PUSH
64863: EMPTY
64864: LIST
64865: LIST
64866: PUSH
64867: LD_INT 3
64869: PUSH
64870: LD_INT 1
64872: PUSH
64873: EMPTY
64874: LIST
64875: LIST
64876: PUSH
64877: EMPTY
64878: LIST
64879: LIST
64880: LIST
64881: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64882: LD_ADDR_VAR 0 19
64886: PUSH
64887: LD_INT 3
64889: PUSH
64890: LD_INT 2
64892: PUSH
64893: EMPTY
64894: LIST
64895: LIST
64896: PUSH
64897: LD_INT 3
64899: PUSH
64900: LD_INT 3
64902: PUSH
64903: EMPTY
64904: LIST
64905: LIST
64906: PUSH
64907: LD_INT 2
64909: PUSH
64910: LD_INT 3
64912: PUSH
64913: EMPTY
64914: LIST
64915: LIST
64916: PUSH
64917: EMPTY
64918: LIST
64919: LIST
64920: LIST
64921: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64922: LD_ADDR_VAR 0 20
64926: PUSH
64927: LD_INT 1
64929: PUSH
64930: LD_INT 3
64932: PUSH
64933: EMPTY
64934: LIST
64935: LIST
64936: PUSH
64937: LD_INT 0
64939: PUSH
64940: LD_INT 3
64942: PUSH
64943: EMPTY
64944: LIST
64945: LIST
64946: PUSH
64947: LD_INT 1
64949: NEG
64950: PUSH
64951: LD_INT 2
64953: PUSH
64954: EMPTY
64955: LIST
64956: LIST
64957: PUSH
64958: EMPTY
64959: LIST
64960: LIST
64961: LIST
64962: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64963: LD_ADDR_VAR 0 21
64967: PUSH
64968: LD_INT 2
64970: NEG
64971: PUSH
64972: LD_INT 1
64974: PUSH
64975: EMPTY
64976: LIST
64977: LIST
64978: PUSH
64979: LD_INT 3
64981: NEG
64982: PUSH
64983: LD_INT 0
64985: PUSH
64986: EMPTY
64987: LIST
64988: LIST
64989: PUSH
64990: LD_INT 3
64992: NEG
64993: PUSH
64994: LD_INT 1
64996: NEG
64997: PUSH
64998: EMPTY
64999: LIST
65000: LIST
65001: PUSH
65002: EMPTY
65003: LIST
65004: LIST
65005: LIST
65006: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65007: LD_ADDR_VAR 0 22
65011: PUSH
65012: LD_INT 2
65014: NEG
65015: PUSH
65016: LD_INT 3
65018: NEG
65019: PUSH
65020: EMPTY
65021: LIST
65022: LIST
65023: PUSH
65024: LD_INT 3
65026: NEG
65027: PUSH
65028: LD_INT 2
65030: NEG
65031: PUSH
65032: EMPTY
65033: LIST
65034: LIST
65035: PUSH
65036: LD_INT 3
65038: NEG
65039: PUSH
65040: LD_INT 3
65042: NEG
65043: PUSH
65044: EMPTY
65045: LIST
65046: LIST
65047: PUSH
65048: EMPTY
65049: LIST
65050: LIST
65051: LIST
65052: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
65053: LD_ADDR_VAR 0 23
65057: PUSH
65058: LD_INT 0
65060: PUSH
65061: LD_INT 3
65063: NEG
65064: PUSH
65065: EMPTY
65066: LIST
65067: LIST
65068: PUSH
65069: LD_INT 1
65071: NEG
65072: PUSH
65073: LD_INT 4
65075: NEG
65076: PUSH
65077: EMPTY
65078: LIST
65079: LIST
65080: PUSH
65081: LD_INT 1
65083: PUSH
65084: LD_INT 3
65086: NEG
65087: PUSH
65088: EMPTY
65089: LIST
65090: LIST
65091: PUSH
65092: EMPTY
65093: LIST
65094: LIST
65095: LIST
65096: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
65097: LD_ADDR_VAR 0 24
65101: PUSH
65102: LD_INT 3
65104: PUSH
65105: LD_INT 0
65107: PUSH
65108: EMPTY
65109: LIST
65110: LIST
65111: PUSH
65112: LD_INT 3
65114: PUSH
65115: LD_INT 1
65117: NEG
65118: PUSH
65119: EMPTY
65120: LIST
65121: LIST
65122: PUSH
65123: LD_INT 4
65125: PUSH
65126: LD_INT 1
65128: PUSH
65129: EMPTY
65130: LIST
65131: LIST
65132: PUSH
65133: EMPTY
65134: LIST
65135: LIST
65136: LIST
65137: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
65138: LD_ADDR_VAR 0 25
65142: PUSH
65143: LD_INT 3
65145: PUSH
65146: LD_INT 3
65148: PUSH
65149: EMPTY
65150: LIST
65151: LIST
65152: PUSH
65153: LD_INT 4
65155: PUSH
65156: LD_INT 3
65158: PUSH
65159: EMPTY
65160: LIST
65161: LIST
65162: PUSH
65163: LD_INT 3
65165: PUSH
65166: LD_INT 4
65168: PUSH
65169: EMPTY
65170: LIST
65171: LIST
65172: PUSH
65173: EMPTY
65174: LIST
65175: LIST
65176: LIST
65177: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
65178: LD_ADDR_VAR 0 26
65182: PUSH
65183: LD_INT 0
65185: PUSH
65186: LD_INT 3
65188: PUSH
65189: EMPTY
65190: LIST
65191: LIST
65192: PUSH
65193: LD_INT 1
65195: PUSH
65196: LD_INT 4
65198: PUSH
65199: EMPTY
65200: LIST
65201: LIST
65202: PUSH
65203: LD_INT 1
65205: NEG
65206: PUSH
65207: LD_INT 3
65209: PUSH
65210: EMPTY
65211: LIST
65212: LIST
65213: PUSH
65214: EMPTY
65215: LIST
65216: LIST
65217: LIST
65218: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
65219: LD_ADDR_VAR 0 27
65223: PUSH
65224: LD_INT 3
65226: NEG
65227: PUSH
65228: LD_INT 0
65230: PUSH
65231: EMPTY
65232: LIST
65233: LIST
65234: PUSH
65235: LD_INT 3
65237: NEG
65238: PUSH
65239: LD_INT 1
65241: PUSH
65242: EMPTY
65243: LIST
65244: LIST
65245: PUSH
65246: LD_INT 4
65248: NEG
65249: PUSH
65250: LD_INT 1
65252: NEG
65253: PUSH
65254: EMPTY
65255: LIST
65256: LIST
65257: PUSH
65258: EMPTY
65259: LIST
65260: LIST
65261: LIST
65262: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
65263: LD_ADDR_VAR 0 28
65267: PUSH
65268: LD_INT 3
65270: NEG
65271: PUSH
65272: LD_INT 3
65274: NEG
65275: PUSH
65276: EMPTY
65277: LIST
65278: LIST
65279: PUSH
65280: LD_INT 3
65282: NEG
65283: PUSH
65284: LD_INT 4
65286: NEG
65287: PUSH
65288: EMPTY
65289: LIST
65290: LIST
65291: PUSH
65292: LD_INT 4
65294: NEG
65295: PUSH
65296: LD_INT 3
65298: NEG
65299: PUSH
65300: EMPTY
65301: LIST
65302: LIST
65303: PUSH
65304: EMPTY
65305: LIST
65306: LIST
65307: LIST
65308: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
65309: LD_ADDR_VAR 0 29
65313: PUSH
65314: LD_INT 1
65316: NEG
65317: PUSH
65318: LD_INT 3
65320: NEG
65321: PUSH
65322: EMPTY
65323: LIST
65324: LIST
65325: PUSH
65326: LD_INT 0
65328: PUSH
65329: LD_INT 3
65331: NEG
65332: PUSH
65333: EMPTY
65334: LIST
65335: LIST
65336: PUSH
65337: LD_INT 1
65339: PUSH
65340: LD_INT 2
65342: NEG
65343: PUSH
65344: EMPTY
65345: LIST
65346: LIST
65347: PUSH
65348: LD_INT 1
65350: NEG
65351: PUSH
65352: LD_INT 4
65354: NEG
65355: PUSH
65356: EMPTY
65357: LIST
65358: LIST
65359: PUSH
65360: LD_INT 0
65362: PUSH
65363: LD_INT 4
65365: NEG
65366: PUSH
65367: EMPTY
65368: LIST
65369: LIST
65370: PUSH
65371: LD_INT 1
65373: PUSH
65374: LD_INT 3
65376: NEG
65377: PUSH
65378: EMPTY
65379: LIST
65380: LIST
65381: PUSH
65382: LD_INT 1
65384: NEG
65385: PUSH
65386: LD_INT 5
65388: NEG
65389: PUSH
65390: EMPTY
65391: LIST
65392: LIST
65393: PUSH
65394: LD_INT 0
65396: PUSH
65397: LD_INT 5
65399: NEG
65400: PUSH
65401: EMPTY
65402: LIST
65403: LIST
65404: PUSH
65405: LD_INT 1
65407: PUSH
65408: LD_INT 4
65410: NEG
65411: PUSH
65412: EMPTY
65413: LIST
65414: LIST
65415: PUSH
65416: LD_INT 1
65418: NEG
65419: PUSH
65420: LD_INT 6
65422: NEG
65423: PUSH
65424: EMPTY
65425: LIST
65426: LIST
65427: PUSH
65428: LD_INT 0
65430: PUSH
65431: LD_INT 6
65433: NEG
65434: PUSH
65435: EMPTY
65436: LIST
65437: LIST
65438: PUSH
65439: LD_INT 1
65441: PUSH
65442: LD_INT 5
65444: NEG
65445: PUSH
65446: EMPTY
65447: LIST
65448: LIST
65449: PUSH
65450: EMPTY
65451: LIST
65452: LIST
65453: LIST
65454: LIST
65455: LIST
65456: LIST
65457: LIST
65458: LIST
65459: LIST
65460: LIST
65461: LIST
65462: LIST
65463: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
65464: LD_ADDR_VAR 0 30
65468: PUSH
65469: LD_INT 2
65471: PUSH
65472: LD_INT 1
65474: NEG
65475: PUSH
65476: EMPTY
65477: LIST
65478: LIST
65479: PUSH
65480: LD_INT 3
65482: PUSH
65483: LD_INT 0
65485: PUSH
65486: EMPTY
65487: LIST
65488: LIST
65489: PUSH
65490: LD_INT 3
65492: PUSH
65493: LD_INT 1
65495: PUSH
65496: EMPTY
65497: LIST
65498: LIST
65499: PUSH
65500: LD_INT 3
65502: PUSH
65503: LD_INT 1
65505: NEG
65506: PUSH
65507: EMPTY
65508: LIST
65509: LIST
65510: PUSH
65511: LD_INT 4
65513: PUSH
65514: LD_INT 0
65516: PUSH
65517: EMPTY
65518: LIST
65519: LIST
65520: PUSH
65521: LD_INT 4
65523: PUSH
65524: LD_INT 1
65526: PUSH
65527: EMPTY
65528: LIST
65529: LIST
65530: PUSH
65531: LD_INT 4
65533: PUSH
65534: LD_INT 1
65536: NEG
65537: PUSH
65538: EMPTY
65539: LIST
65540: LIST
65541: PUSH
65542: LD_INT 5
65544: PUSH
65545: LD_INT 0
65547: PUSH
65548: EMPTY
65549: LIST
65550: LIST
65551: PUSH
65552: LD_INT 5
65554: PUSH
65555: LD_INT 1
65557: PUSH
65558: EMPTY
65559: LIST
65560: LIST
65561: PUSH
65562: LD_INT 5
65564: PUSH
65565: LD_INT 1
65567: NEG
65568: PUSH
65569: EMPTY
65570: LIST
65571: LIST
65572: PUSH
65573: LD_INT 6
65575: PUSH
65576: LD_INT 0
65578: PUSH
65579: EMPTY
65580: LIST
65581: LIST
65582: PUSH
65583: LD_INT 6
65585: PUSH
65586: LD_INT 1
65588: PUSH
65589: EMPTY
65590: LIST
65591: LIST
65592: PUSH
65593: EMPTY
65594: LIST
65595: LIST
65596: LIST
65597: LIST
65598: LIST
65599: LIST
65600: LIST
65601: LIST
65602: LIST
65603: LIST
65604: LIST
65605: LIST
65606: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
65607: LD_ADDR_VAR 0 31
65611: PUSH
65612: LD_INT 3
65614: PUSH
65615: LD_INT 2
65617: PUSH
65618: EMPTY
65619: LIST
65620: LIST
65621: PUSH
65622: LD_INT 3
65624: PUSH
65625: LD_INT 3
65627: PUSH
65628: EMPTY
65629: LIST
65630: LIST
65631: PUSH
65632: LD_INT 2
65634: PUSH
65635: LD_INT 3
65637: PUSH
65638: EMPTY
65639: LIST
65640: LIST
65641: PUSH
65642: LD_INT 4
65644: PUSH
65645: LD_INT 3
65647: PUSH
65648: EMPTY
65649: LIST
65650: LIST
65651: PUSH
65652: LD_INT 4
65654: PUSH
65655: LD_INT 4
65657: PUSH
65658: EMPTY
65659: LIST
65660: LIST
65661: PUSH
65662: LD_INT 3
65664: PUSH
65665: LD_INT 4
65667: PUSH
65668: EMPTY
65669: LIST
65670: LIST
65671: PUSH
65672: LD_INT 5
65674: PUSH
65675: LD_INT 4
65677: PUSH
65678: EMPTY
65679: LIST
65680: LIST
65681: PUSH
65682: LD_INT 5
65684: PUSH
65685: LD_INT 5
65687: PUSH
65688: EMPTY
65689: LIST
65690: LIST
65691: PUSH
65692: LD_INT 4
65694: PUSH
65695: LD_INT 5
65697: PUSH
65698: EMPTY
65699: LIST
65700: LIST
65701: PUSH
65702: LD_INT 6
65704: PUSH
65705: LD_INT 5
65707: PUSH
65708: EMPTY
65709: LIST
65710: LIST
65711: PUSH
65712: LD_INT 6
65714: PUSH
65715: LD_INT 6
65717: PUSH
65718: EMPTY
65719: LIST
65720: LIST
65721: PUSH
65722: LD_INT 5
65724: PUSH
65725: LD_INT 6
65727: PUSH
65728: EMPTY
65729: LIST
65730: LIST
65731: PUSH
65732: EMPTY
65733: LIST
65734: LIST
65735: LIST
65736: LIST
65737: LIST
65738: LIST
65739: LIST
65740: LIST
65741: LIST
65742: LIST
65743: LIST
65744: LIST
65745: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
65746: LD_ADDR_VAR 0 32
65750: PUSH
65751: LD_INT 1
65753: PUSH
65754: LD_INT 3
65756: PUSH
65757: EMPTY
65758: LIST
65759: LIST
65760: PUSH
65761: LD_INT 0
65763: PUSH
65764: LD_INT 3
65766: PUSH
65767: EMPTY
65768: LIST
65769: LIST
65770: PUSH
65771: LD_INT 1
65773: NEG
65774: PUSH
65775: LD_INT 2
65777: PUSH
65778: EMPTY
65779: LIST
65780: LIST
65781: PUSH
65782: LD_INT 1
65784: PUSH
65785: LD_INT 4
65787: PUSH
65788: EMPTY
65789: LIST
65790: LIST
65791: PUSH
65792: LD_INT 0
65794: PUSH
65795: LD_INT 4
65797: PUSH
65798: EMPTY
65799: LIST
65800: LIST
65801: PUSH
65802: LD_INT 1
65804: NEG
65805: PUSH
65806: LD_INT 3
65808: PUSH
65809: EMPTY
65810: LIST
65811: LIST
65812: PUSH
65813: LD_INT 1
65815: PUSH
65816: LD_INT 5
65818: PUSH
65819: EMPTY
65820: LIST
65821: LIST
65822: PUSH
65823: LD_INT 0
65825: PUSH
65826: LD_INT 5
65828: PUSH
65829: EMPTY
65830: LIST
65831: LIST
65832: PUSH
65833: LD_INT 1
65835: NEG
65836: PUSH
65837: LD_INT 4
65839: PUSH
65840: EMPTY
65841: LIST
65842: LIST
65843: PUSH
65844: LD_INT 1
65846: PUSH
65847: LD_INT 6
65849: PUSH
65850: EMPTY
65851: LIST
65852: LIST
65853: PUSH
65854: LD_INT 0
65856: PUSH
65857: LD_INT 6
65859: PUSH
65860: EMPTY
65861: LIST
65862: LIST
65863: PUSH
65864: LD_INT 1
65866: NEG
65867: PUSH
65868: LD_INT 5
65870: PUSH
65871: EMPTY
65872: LIST
65873: LIST
65874: PUSH
65875: EMPTY
65876: LIST
65877: LIST
65878: LIST
65879: LIST
65880: LIST
65881: LIST
65882: LIST
65883: LIST
65884: LIST
65885: LIST
65886: LIST
65887: LIST
65888: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
65889: LD_ADDR_VAR 0 33
65893: PUSH
65894: LD_INT 2
65896: NEG
65897: PUSH
65898: LD_INT 1
65900: PUSH
65901: EMPTY
65902: LIST
65903: LIST
65904: PUSH
65905: LD_INT 3
65907: NEG
65908: PUSH
65909: LD_INT 0
65911: PUSH
65912: EMPTY
65913: LIST
65914: LIST
65915: PUSH
65916: LD_INT 3
65918: NEG
65919: PUSH
65920: LD_INT 1
65922: NEG
65923: PUSH
65924: EMPTY
65925: LIST
65926: LIST
65927: PUSH
65928: LD_INT 3
65930: NEG
65931: PUSH
65932: LD_INT 1
65934: PUSH
65935: EMPTY
65936: LIST
65937: LIST
65938: PUSH
65939: LD_INT 4
65941: NEG
65942: PUSH
65943: LD_INT 0
65945: PUSH
65946: EMPTY
65947: LIST
65948: LIST
65949: PUSH
65950: LD_INT 4
65952: NEG
65953: PUSH
65954: LD_INT 1
65956: NEG
65957: PUSH
65958: EMPTY
65959: LIST
65960: LIST
65961: PUSH
65962: LD_INT 4
65964: NEG
65965: PUSH
65966: LD_INT 1
65968: PUSH
65969: EMPTY
65970: LIST
65971: LIST
65972: PUSH
65973: LD_INT 5
65975: NEG
65976: PUSH
65977: LD_INT 0
65979: PUSH
65980: EMPTY
65981: LIST
65982: LIST
65983: PUSH
65984: LD_INT 5
65986: NEG
65987: PUSH
65988: LD_INT 1
65990: NEG
65991: PUSH
65992: EMPTY
65993: LIST
65994: LIST
65995: PUSH
65996: LD_INT 5
65998: NEG
65999: PUSH
66000: LD_INT 1
66002: PUSH
66003: EMPTY
66004: LIST
66005: LIST
66006: PUSH
66007: LD_INT 6
66009: NEG
66010: PUSH
66011: LD_INT 0
66013: PUSH
66014: EMPTY
66015: LIST
66016: LIST
66017: PUSH
66018: LD_INT 6
66020: NEG
66021: PUSH
66022: LD_INT 1
66024: NEG
66025: PUSH
66026: EMPTY
66027: LIST
66028: LIST
66029: PUSH
66030: EMPTY
66031: LIST
66032: LIST
66033: LIST
66034: LIST
66035: LIST
66036: LIST
66037: LIST
66038: LIST
66039: LIST
66040: LIST
66041: LIST
66042: LIST
66043: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
66044: LD_ADDR_VAR 0 34
66048: PUSH
66049: LD_INT 2
66051: NEG
66052: PUSH
66053: LD_INT 3
66055: NEG
66056: PUSH
66057: EMPTY
66058: LIST
66059: LIST
66060: PUSH
66061: LD_INT 3
66063: NEG
66064: PUSH
66065: LD_INT 2
66067: NEG
66068: PUSH
66069: EMPTY
66070: LIST
66071: LIST
66072: PUSH
66073: LD_INT 3
66075: NEG
66076: PUSH
66077: LD_INT 3
66079: NEG
66080: PUSH
66081: EMPTY
66082: LIST
66083: LIST
66084: PUSH
66085: LD_INT 3
66087: NEG
66088: PUSH
66089: LD_INT 4
66091: NEG
66092: PUSH
66093: EMPTY
66094: LIST
66095: LIST
66096: PUSH
66097: LD_INT 4
66099: NEG
66100: PUSH
66101: LD_INT 3
66103: NEG
66104: PUSH
66105: EMPTY
66106: LIST
66107: LIST
66108: PUSH
66109: LD_INT 4
66111: NEG
66112: PUSH
66113: LD_INT 4
66115: NEG
66116: PUSH
66117: EMPTY
66118: LIST
66119: LIST
66120: PUSH
66121: LD_INT 4
66123: NEG
66124: PUSH
66125: LD_INT 5
66127: NEG
66128: PUSH
66129: EMPTY
66130: LIST
66131: LIST
66132: PUSH
66133: LD_INT 5
66135: NEG
66136: PUSH
66137: LD_INT 4
66139: NEG
66140: PUSH
66141: EMPTY
66142: LIST
66143: LIST
66144: PUSH
66145: LD_INT 5
66147: NEG
66148: PUSH
66149: LD_INT 5
66151: NEG
66152: PUSH
66153: EMPTY
66154: LIST
66155: LIST
66156: PUSH
66157: LD_INT 5
66159: NEG
66160: PUSH
66161: LD_INT 6
66163: NEG
66164: PUSH
66165: EMPTY
66166: LIST
66167: LIST
66168: PUSH
66169: LD_INT 6
66171: NEG
66172: PUSH
66173: LD_INT 5
66175: NEG
66176: PUSH
66177: EMPTY
66178: LIST
66179: LIST
66180: PUSH
66181: LD_INT 6
66183: NEG
66184: PUSH
66185: LD_INT 6
66187: NEG
66188: PUSH
66189: EMPTY
66190: LIST
66191: LIST
66192: PUSH
66193: EMPTY
66194: LIST
66195: LIST
66196: LIST
66197: LIST
66198: LIST
66199: LIST
66200: LIST
66201: LIST
66202: LIST
66203: LIST
66204: LIST
66205: LIST
66206: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
66207: LD_ADDR_VAR 0 41
66211: PUSH
66212: LD_INT 0
66214: PUSH
66215: LD_INT 2
66217: NEG
66218: PUSH
66219: EMPTY
66220: LIST
66221: LIST
66222: PUSH
66223: LD_INT 1
66225: NEG
66226: PUSH
66227: LD_INT 3
66229: NEG
66230: PUSH
66231: EMPTY
66232: LIST
66233: LIST
66234: PUSH
66235: LD_INT 1
66237: PUSH
66238: LD_INT 2
66240: NEG
66241: PUSH
66242: EMPTY
66243: LIST
66244: LIST
66245: PUSH
66246: EMPTY
66247: LIST
66248: LIST
66249: LIST
66250: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
66251: LD_ADDR_VAR 0 42
66255: PUSH
66256: LD_INT 2
66258: PUSH
66259: LD_INT 0
66261: PUSH
66262: EMPTY
66263: LIST
66264: LIST
66265: PUSH
66266: LD_INT 2
66268: PUSH
66269: LD_INT 1
66271: NEG
66272: PUSH
66273: EMPTY
66274: LIST
66275: LIST
66276: PUSH
66277: LD_INT 3
66279: PUSH
66280: LD_INT 1
66282: PUSH
66283: EMPTY
66284: LIST
66285: LIST
66286: PUSH
66287: EMPTY
66288: LIST
66289: LIST
66290: LIST
66291: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
66292: LD_ADDR_VAR 0 43
66296: PUSH
66297: LD_INT 2
66299: PUSH
66300: LD_INT 2
66302: PUSH
66303: EMPTY
66304: LIST
66305: LIST
66306: PUSH
66307: LD_INT 3
66309: PUSH
66310: LD_INT 2
66312: PUSH
66313: EMPTY
66314: LIST
66315: LIST
66316: PUSH
66317: LD_INT 2
66319: PUSH
66320: LD_INT 3
66322: PUSH
66323: EMPTY
66324: LIST
66325: LIST
66326: PUSH
66327: EMPTY
66328: LIST
66329: LIST
66330: LIST
66331: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
66332: LD_ADDR_VAR 0 44
66336: PUSH
66337: LD_INT 0
66339: PUSH
66340: LD_INT 2
66342: PUSH
66343: EMPTY
66344: LIST
66345: LIST
66346: PUSH
66347: LD_INT 1
66349: PUSH
66350: LD_INT 3
66352: PUSH
66353: EMPTY
66354: LIST
66355: LIST
66356: PUSH
66357: LD_INT 1
66359: NEG
66360: PUSH
66361: LD_INT 2
66363: PUSH
66364: EMPTY
66365: LIST
66366: LIST
66367: PUSH
66368: EMPTY
66369: LIST
66370: LIST
66371: LIST
66372: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66373: LD_ADDR_VAR 0 45
66377: PUSH
66378: LD_INT 2
66380: NEG
66381: PUSH
66382: LD_INT 0
66384: PUSH
66385: EMPTY
66386: LIST
66387: LIST
66388: PUSH
66389: LD_INT 2
66391: NEG
66392: PUSH
66393: LD_INT 1
66395: PUSH
66396: EMPTY
66397: LIST
66398: LIST
66399: PUSH
66400: LD_INT 3
66402: NEG
66403: PUSH
66404: LD_INT 1
66406: NEG
66407: PUSH
66408: EMPTY
66409: LIST
66410: LIST
66411: PUSH
66412: EMPTY
66413: LIST
66414: LIST
66415: LIST
66416: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
66417: LD_ADDR_VAR 0 46
66421: PUSH
66422: LD_INT 2
66424: NEG
66425: PUSH
66426: LD_INT 2
66428: NEG
66429: PUSH
66430: EMPTY
66431: LIST
66432: LIST
66433: PUSH
66434: LD_INT 2
66436: NEG
66437: PUSH
66438: LD_INT 3
66440: NEG
66441: PUSH
66442: EMPTY
66443: LIST
66444: LIST
66445: PUSH
66446: LD_INT 3
66448: NEG
66449: PUSH
66450: LD_INT 2
66452: NEG
66453: PUSH
66454: EMPTY
66455: LIST
66456: LIST
66457: PUSH
66458: EMPTY
66459: LIST
66460: LIST
66461: LIST
66462: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
66463: LD_ADDR_VAR 0 47
66467: PUSH
66468: LD_INT 2
66470: NEG
66471: PUSH
66472: LD_INT 3
66474: NEG
66475: PUSH
66476: EMPTY
66477: LIST
66478: LIST
66479: PUSH
66480: LD_INT 1
66482: NEG
66483: PUSH
66484: LD_INT 3
66486: NEG
66487: PUSH
66488: EMPTY
66489: LIST
66490: LIST
66491: PUSH
66492: EMPTY
66493: LIST
66494: LIST
66495: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66496: LD_ADDR_VAR 0 48
66500: PUSH
66501: LD_INT 1
66503: PUSH
66504: LD_INT 2
66506: NEG
66507: PUSH
66508: EMPTY
66509: LIST
66510: LIST
66511: PUSH
66512: LD_INT 2
66514: PUSH
66515: LD_INT 1
66517: NEG
66518: PUSH
66519: EMPTY
66520: LIST
66521: LIST
66522: PUSH
66523: EMPTY
66524: LIST
66525: LIST
66526: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
66527: LD_ADDR_VAR 0 49
66531: PUSH
66532: LD_INT 3
66534: PUSH
66535: LD_INT 1
66537: PUSH
66538: EMPTY
66539: LIST
66540: LIST
66541: PUSH
66542: LD_INT 3
66544: PUSH
66545: LD_INT 2
66547: PUSH
66548: EMPTY
66549: LIST
66550: LIST
66551: PUSH
66552: EMPTY
66553: LIST
66554: LIST
66555: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
66556: LD_ADDR_VAR 0 50
66560: PUSH
66561: LD_INT 2
66563: PUSH
66564: LD_INT 3
66566: PUSH
66567: EMPTY
66568: LIST
66569: LIST
66570: PUSH
66571: LD_INT 1
66573: PUSH
66574: LD_INT 3
66576: PUSH
66577: EMPTY
66578: LIST
66579: LIST
66580: PUSH
66581: EMPTY
66582: LIST
66583: LIST
66584: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
66585: LD_ADDR_VAR 0 51
66589: PUSH
66590: LD_INT 1
66592: NEG
66593: PUSH
66594: LD_INT 2
66596: PUSH
66597: EMPTY
66598: LIST
66599: LIST
66600: PUSH
66601: LD_INT 2
66603: NEG
66604: PUSH
66605: LD_INT 1
66607: PUSH
66608: EMPTY
66609: LIST
66610: LIST
66611: PUSH
66612: EMPTY
66613: LIST
66614: LIST
66615: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
66616: LD_ADDR_VAR 0 52
66620: PUSH
66621: LD_INT 3
66623: NEG
66624: PUSH
66625: LD_INT 1
66627: NEG
66628: PUSH
66629: EMPTY
66630: LIST
66631: LIST
66632: PUSH
66633: LD_INT 3
66635: NEG
66636: PUSH
66637: LD_INT 2
66639: NEG
66640: PUSH
66641: EMPTY
66642: LIST
66643: LIST
66644: PUSH
66645: EMPTY
66646: LIST
66647: LIST
66648: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66649: LD_ADDR_VAR 0 53
66653: PUSH
66654: LD_INT 1
66656: NEG
66657: PUSH
66658: LD_INT 3
66660: NEG
66661: PUSH
66662: EMPTY
66663: LIST
66664: LIST
66665: PUSH
66666: LD_INT 0
66668: PUSH
66669: LD_INT 3
66671: NEG
66672: PUSH
66673: EMPTY
66674: LIST
66675: LIST
66676: PUSH
66677: LD_INT 1
66679: PUSH
66680: LD_INT 2
66682: NEG
66683: PUSH
66684: EMPTY
66685: LIST
66686: LIST
66687: PUSH
66688: EMPTY
66689: LIST
66690: LIST
66691: LIST
66692: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66693: LD_ADDR_VAR 0 54
66697: PUSH
66698: LD_INT 2
66700: PUSH
66701: LD_INT 1
66703: NEG
66704: PUSH
66705: EMPTY
66706: LIST
66707: LIST
66708: PUSH
66709: LD_INT 3
66711: PUSH
66712: LD_INT 0
66714: PUSH
66715: EMPTY
66716: LIST
66717: LIST
66718: PUSH
66719: LD_INT 3
66721: PUSH
66722: LD_INT 1
66724: PUSH
66725: EMPTY
66726: LIST
66727: LIST
66728: PUSH
66729: EMPTY
66730: LIST
66731: LIST
66732: LIST
66733: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66734: LD_ADDR_VAR 0 55
66738: PUSH
66739: LD_INT 3
66741: PUSH
66742: LD_INT 2
66744: PUSH
66745: EMPTY
66746: LIST
66747: LIST
66748: PUSH
66749: LD_INT 3
66751: PUSH
66752: LD_INT 3
66754: PUSH
66755: EMPTY
66756: LIST
66757: LIST
66758: PUSH
66759: LD_INT 2
66761: PUSH
66762: LD_INT 3
66764: PUSH
66765: EMPTY
66766: LIST
66767: LIST
66768: PUSH
66769: EMPTY
66770: LIST
66771: LIST
66772: LIST
66773: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66774: LD_ADDR_VAR 0 56
66778: PUSH
66779: LD_INT 1
66781: PUSH
66782: LD_INT 3
66784: PUSH
66785: EMPTY
66786: LIST
66787: LIST
66788: PUSH
66789: LD_INT 0
66791: PUSH
66792: LD_INT 3
66794: PUSH
66795: EMPTY
66796: LIST
66797: LIST
66798: PUSH
66799: LD_INT 1
66801: NEG
66802: PUSH
66803: LD_INT 2
66805: PUSH
66806: EMPTY
66807: LIST
66808: LIST
66809: PUSH
66810: EMPTY
66811: LIST
66812: LIST
66813: LIST
66814: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66815: LD_ADDR_VAR 0 57
66819: PUSH
66820: LD_INT 2
66822: NEG
66823: PUSH
66824: LD_INT 1
66826: PUSH
66827: EMPTY
66828: LIST
66829: LIST
66830: PUSH
66831: LD_INT 3
66833: NEG
66834: PUSH
66835: LD_INT 0
66837: PUSH
66838: EMPTY
66839: LIST
66840: LIST
66841: PUSH
66842: LD_INT 3
66844: NEG
66845: PUSH
66846: LD_INT 1
66848: NEG
66849: PUSH
66850: EMPTY
66851: LIST
66852: LIST
66853: PUSH
66854: EMPTY
66855: LIST
66856: LIST
66857: LIST
66858: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66859: LD_ADDR_VAR 0 58
66863: PUSH
66864: LD_INT 2
66866: NEG
66867: PUSH
66868: LD_INT 3
66870: NEG
66871: PUSH
66872: EMPTY
66873: LIST
66874: LIST
66875: PUSH
66876: LD_INT 3
66878: NEG
66879: PUSH
66880: LD_INT 2
66882: NEG
66883: PUSH
66884: EMPTY
66885: LIST
66886: LIST
66887: PUSH
66888: LD_INT 3
66890: NEG
66891: PUSH
66892: LD_INT 3
66894: NEG
66895: PUSH
66896: EMPTY
66897: LIST
66898: LIST
66899: PUSH
66900: EMPTY
66901: LIST
66902: LIST
66903: LIST
66904: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
66905: LD_ADDR_VAR 0 59
66909: PUSH
66910: LD_INT 1
66912: NEG
66913: PUSH
66914: LD_INT 2
66916: NEG
66917: PUSH
66918: EMPTY
66919: LIST
66920: LIST
66921: PUSH
66922: LD_INT 0
66924: PUSH
66925: LD_INT 2
66927: NEG
66928: PUSH
66929: EMPTY
66930: LIST
66931: LIST
66932: PUSH
66933: LD_INT 1
66935: PUSH
66936: LD_INT 1
66938: NEG
66939: PUSH
66940: EMPTY
66941: LIST
66942: LIST
66943: PUSH
66944: EMPTY
66945: LIST
66946: LIST
66947: LIST
66948: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66949: LD_ADDR_VAR 0 60
66953: PUSH
66954: LD_INT 1
66956: PUSH
66957: LD_INT 1
66959: NEG
66960: PUSH
66961: EMPTY
66962: LIST
66963: LIST
66964: PUSH
66965: LD_INT 2
66967: PUSH
66968: LD_INT 0
66970: PUSH
66971: EMPTY
66972: LIST
66973: LIST
66974: PUSH
66975: LD_INT 2
66977: PUSH
66978: LD_INT 1
66980: PUSH
66981: EMPTY
66982: LIST
66983: LIST
66984: PUSH
66985: EMPTY
66986: LIST
66987: LIST
66988: LIST
66989: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66990: LD_ADDR_VAR 0 61
66994: PUSH
66995: LD_INT 2
66997: PUSH
66998: LD_INT 1
67000: PUSH
67001: EMPTY
67002: LIST
67003: LIST
67004: PUSH
67005: LD_INT 2
67007: PUSH
67008: LD_INT 2
67010: PUSH
67011: EMPTY
67012: LIST
67013: LIST
67014: PUSH
67015: LD_INT 1
67017: PUSH
67018: LD_INT 2
67020: PUSH
67021: EMPTY
67022: LIST
67023: LIST
67024: PUSH
67025: EMPTY
67026: LIST
67027: LIST
67028: LIST
67029: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67030: LD_ADDR_VAR 0 62
67034: PUSH
67035: LD_INT 1
67037: PUSH
67038: LD_INT 2
67040: PUSH
67041: EMPTY
67042: LIST
67043: LIST
67044: PUSH
67045: LD_INT 0
67047: PUSH
67048: LD_INT 2
67050: PUSH
67051: EMPTY
67052: LIST
67053: LIST
67054: PUSH
67055: LD_INT 1
67057: NEG
67058: PUSH
67059: LD_INT 1
67061: PUSH
67062: EMPTY
67063: LIST
67064: LIST
67065: PUSH
67066: EMPTY
67067: LIST
67068: LIST
67069: LIST
67070: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67071: LD_ADDR_VAR 0 63
67075: PUSH
67076: LD_INT 1
67078: NEG
67079: PUSH
67080: LD_INT 1
67082: PUSH
67083: EMPTY
67084: LIST
67085: LIST
67086: PUSH
67087: LD_INT 2
67089: NEG
67090: PUSH
67091: LD_INT 0
67093: PUSH
67094: EMPTY
67095: LIST
67096: LIST
67097: PUSH
67098: LD_INT 2
67100: NEG
67101: PUSH
67102: LD_INT 1
67104: NEG
67105: PUSH
67106: EMPTY
67107: LIST
67108: LIST
67109: PUSH
67110: EMPTY
67111: LIST
67112: LIST
67113: LIST
67114: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67115: LD_ADDR_VAR 0 64
67119: PUSH
67120: LD_INT 1
67122: NEG
67123: PUSH
67124: LD_INT 2
67126: NEG
67127: PUSH
67128: EMPTY
67129: LIST
67130: LIST
67131: PUSH
67132: LD_INT 2
67134: NEG
67135: PUSH
67136: LD_INT 1
67138: NEG
67139: PUSH
67140: EMPTY
67141: LIST
67142: LIST
67143: PUSH
67144: LD_INT 2
67146: NEG
67147: PUSH
67148: LD_INT 2
67150: NEG
67151: PUSH
67152: EMPTY
67153: LIST
67154: LIST
67155: PUSH
67156: EMPTY
67157: LIST
67158: LIST
67159: LIST
67160: ST_TO_ADDR
// end ; 2 :
67161: GO 70427
67163: LD_INT 2
67165: DOUBLE
67166: EQUAL
67167: IFTRUE 67171
67169: GO 70426
67171: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
67172: LD_ADDR_VAR 0 29
67176: PUSH
67177: LD_INT 4
67179: PUSH
67180: LD_INT 0
67182: PUSH
67183: EMPTY
67184: LIST
67185: LIST
67186: PUSH
67187: LD_INT 4
67189: PUSH
67190: LD_INT 1
67192: NEG
67193: PUSH
67194: EMPTY
67195: LIST
67196: LIST
67197: PUSH
67198: LD_INT 5
67200: PUSH
67201: LD_INT 0
67203: PUSH
67204: EMPTY
67205: LIST
67206: LIST
67207: PUSH
67208: LD_INT 5
67210: PUSH
67211: LD_INT 1
67213: PUSH
67214: EMPTY
67215: LIST
67216: LIST
67217: PUSH
67218: LD_INT 4
67220: PUSH
67221: LD_INT 1
67223: PUSH
67224: EMPTY
67225: LIST
67226: LIST
67227: PUSH
67228: LD_INT 3
67230: PUSH
67231: LD_INT 0
67233: PUSH
67234: EMPTY
67235: LIST
67236: LIST
67237: PUSH
67238: LD_INT 3
67240: PUSH
67241: LD_INT 1
67243: NEG
67244: PUSH
67245: EMPTY
67246: LIST
67247: LIST
67248: PUSH
67249: LD_INT 3
67251: PUSH
67252: LD_INT 2
67254: NEG
67255: PUSH
67256: EMPTY
67257: LIST
67258: LIST
67259: PUSH
67260: LD_INT 5
67262: PUSH
67263: LD_INT 2
67265: PUSH
67266: EMPTY
67267: LIST
67268: LIST
67269: PUSH
67270: LD_INT 3
67272: PUSH
67273: LD_INT 3
67275: PUSH
67276: EMPTY
67277: LIST
67278: LIST
67279: PUSH
67280: LD_INT 3
67282: PUSH
67283: LD_INT 2
67285: PUSH
67286: EMPTY
67287: LIST
67288: LIST
67289: PUSH
67290: LD_INT 4
67292: PUSH
67293: LD_INT 3
67295: PUSH
67296: EMPTY
67297: LIST
67298: LIST
67299: PUSH
67300: LD_INT 4
67302: PUSH
67303: LD_INT 4
67305: PUSH
67306: EMPTY
67307: LIST
67308: LIST
67309: PUSH
67310: LD_INT 3
67312: PUSH
67313: LD_INT 4
67315: PUSH
67316: EMPTY
67317: LIST
67318: LIST
67319: PUSH
67320: LD_INT 2
67322: PUSH
67323: LD_INT 3
67325: PUSH
67326: EMPTY
67327: LIST
67328: LIST
67329: PUSH
67330: LD_INT 2
67332: PUSH
67333: LD_INT 2
67335: PUSH
67336: EMPTY
67337: LIST
67338: LIST
67339: PUSH
67340: LD_INT 4
67342: PUSH
67343: LD_INT 2
67345: PUSH
67346: EMPTY
67347: LIST
67348: LIST
67349: PUSH
67350: LD_INT 2
67352: PUSH
67353: LD_INT 4
67355: PUSH
67356: EMPTY
67357: LIST
67358: LIST
67359: PUSH
67360: LD_INT 0
67362: PUSH
67363: LD_INT 4
67365: PUSH
67366: EMPTY
67367: LIST
67368: LIST
67369: PUSH
67370: LD_INT 0
67372: PUSH
67373: LD_INT 3
67375: PUSH
67376: EMPTY
67377: LIST
67378: LIST
67379: PUSH
67380: LD_INT 1
67382: PUSH
67383: LD_INT 4
67385: PUSH
67386: EMPTY
67387: LIST
67388: LIST
67389: PUSH
67390: LD_INT 1
67392: PUSH
67393: LD_INT 5
67395: PUSH
67396: EMPTY
67397: LIST
67398: LIST
67399: PUSH
67400: LD_INT 0
67402: PUSH
67403: LD_INT 5
67405: PUSH
67406: EMPTY
67407: LIST
67408: LIST
67409: PUSH
67410: LD_INT 1
67412: NEG
67413: PUSH
67414: LD_INT 4
67416: PUSH
67417: EMPTY
67418: LIST
67419: LIST
67420: PUSH
67421: LD_INT 1
67423: NEG
67424: PUSH
67425: LD_INT 3
67427: PUSH
67428: EMPTY
67429: LIST
67430: LIST
67431: PUSH
67432: LD_INT 2
67434: PUSH
67435: LD_INT 5
67437: PUSH
67438: EMPTY
67439: LIST
67440: LIST
67441: PUSH
67442: LD_INT 2
67444: NEG
67445: PUSH
67446: LD_INT 3
67448: PUSH
67449: EMPTY
67450: LIST
67451: LIST
67452: PUSH
67453: LD_INT 3
67455: NEG
67456: PUSH
67457: LD_INT 0
67459: PUSH
67460: EMPTY
67461: LIST
67462: LIST
67463: PUSH
67464: LD_INT 3
67466: NEG
67467: PUSH
67468: LD_INT 1
67470: NEG
67471: PUSH
67472: EMPTY
67473: LIST
67474: LIST
67475: PUSH
67476: LD_INT 2
67478: NEG
67479: PUSH
67480: LD_INT 0
67482: PUSH
67483: EMPTY
67484: LIST
67485: LIST
67486: PUSH
67487: LD_INT 2
67489: NEG
67490: PUSH
67491: LD_INT 1
67493: PUSH
67494: EMPTY
67495: LIST
67496: LIST
67497: PUSH
67498: LD_INT 3
67500: NEG
67501: PUSH
67502: LD_INT 1
67504: PUSH
67505: EMPTY
67506: LIST
67507: LIST
67508: PUSH
67509: LD_INT 4
67511: NEG
67512: PUSH
67513: LD_INT 0
67515: PUSH
67516: EMPTY
67517: LIST
67518: LIST
67519: PUSH
67520: LD_INT 4
67522: NEG
67523: PUSH
67524: LD_INT 1
67526: NEG
67527: PUSH
67528: EMPTY
67529: LIST
67530: LIST
67531: PUSH
67532: LD_INT 4
67534: NEG
67535: PUSH
67536: LD_INT 2
67538: NEG
67539: PUSH
67540: EMPTY
67541: LIST
67542: LIST
67543: PUSH
67544: LD_INT 2
67546: NEG
67547: PUSH
67548: LD_INT 2
67550: PUSH
67551: EMPTY
67552: LIST
67553: LIST
67554: PUSH
67555: LD_INT 4
67557: NEG
67558: PUSH
67559: LD_INT 4
67561: NEG
67562: PUSH
67563: EMPTY
67564: LIST
67565: LIST
67566: PUSH
67567: LD_INT 4
67569: NEG
67570: PUSH
67571: LD_INT 5
67573: NEG
67574: PUSH
67575: EMPTY
67576: LIST
67577: LIST
67578: PUSH
67579: LD_INT 3
67581: NEG
67582: PUSH
67583: LD_INT 4
67585: NEG
67586: PUSH
67587: EMPTY
67588: LIST
67589: LIST
67590: PUSH
67591: LD_INT 3
67593: NEG
67594: PUSH
67595: LD_INT 3
67597: NEG
67598: PUSH
67599: EMPTY
67600: LIST
67601: LIST
67602: PUSH
67603: LD_INT 4
67605: NEG
67606: PUSH
67607: LD_INT 3
67609: NEG
67610: PUSH
67611: EMPTY
67612: LIST
67613: LIST
67614: PUSH
67615: LD_INT 5
67617: NEG
67618: PUSH
67619: LD_INT 4
67621: NEG
67622: PUSH
67623: EMPTY
67624: LIST
67625: LIST
67626: PUSH
67627: LD_INT 5
67629: NEG
67630: PUSH
67631: LD_INT 5
67633: NEG
67634: PUSH
67635: EMPTY
67636: LIST
67637: LIST
67638: PUSH
67639: LD_INT 3
67641: NEG
67642: PUSH
67643: LD_INT 5
67645: NEG
67646: PUSH
67647: EMPTY
67648: LIST
67649: LIST
67650: PUSH
67651: LD_INT 5
67653: NEG
67654: PUSH
67655: LD_INT 3
67657: NEG
67658: PUSH
67659: EMPTY
67660: LIST
67661: LIST
67662: PUSH
67663: EMPTY
67664: LIST
67665: LIST
67666: LIST
67667: LIST
67668: LIST
67669: LIST
67670: LIST
67671: LIST
67672: LIST
67673: LIST
67674: LIST
67675: LIST
67676: LIST
67677: LIST
67678: LIST
67679: LIST
67680: LIST
67681: LIST
67682: LIST
67683: LIST
67684: LIST
67685: LIST
67686: LIST
67687: LIST
67688: LIST
67689: LIST
67690: LIST
67691: LIST
67692: LIST
67693: LIST
67694: LIST
67695: LIST
67696: LIST
67697: LIST
67698: LIST
67699: LIST
67700: LIST
67701: LIST
67702: LIST
67703: LIST
67704: LIST
67705: LIST
67706: LIST
67707: LIST
67708: LIST
67709: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
67710: LD_ADDR_VAR 0 30
67714: PUSH
67715: LD_INT 4
67717: PUSH
67718: LD_INT 4
67720: PUSH
67721: EMPTY
67722: LIST
67723: LIST
67724: PUSH
67725: LD_INT 4
67727: PUSH
67728: LD_INT 3
67730: PUSH
67731: EMPTY
67732: LIST
67733: LIST
67734: PUSH
67735: LD_INT 5
67737: PUSH
67738: LD_INT 4
67740: PUSH
67741: EMPTY
67742: LIST
67743: LIST
67744: PUSH
67745: LD_INT 5
67747: PUSH
67748: LD_INT 5
67750: PUSH
67751: EMPTY
67752: LIST
67753: LIST
67754: PUSH
67755: LD_INT 4
67757: PUSH
67758: LD_INT 5
67760: PUSH
67761: EMPTY
67762: LIST
67763: LIST
67764: PUSH
67765: LD_INT 3
67767: PUSH
67768: LD_INT 4
67770: PUSH
67771: EMPTY
67772: LIST
67773: LIST
67774: PUSH
67775: LD_INT 3
67777: PUSH
67778: LD_INT 3
67780: PUSH
67781: EMPTY
67782: LIST
67783: LIST
67784: PUSH
67785: LD_INT 5
67787: PUSH
67788: LD_INT 3
67790: PUSH
67791: EMPTY
67792: LIST
67793: LIST
67794: PUSH
67795: LD_INT 3
67797: PUSH
67798: LD_INT 5
67800: PUSH
67801: EMPTY
67802: LIST
67803: LIST
67804: PUSH
67805: LD_INT 0
67807: PUSH
67808: LD_INT 3
67810: PUSH
67811: EMPTY
67812: LIST
67813: LIST
67814: PUSH
67815: LD_INT 0
67817: PUSH
67818: LD_INT 2
67820: PUSH
67821: EMPTY
67822: LIST
67823: LIST
67824: PUSH
67825: LD_INT 1
67827: PUSH
67828: LD_INT 3
67830: PUSH
67831: EMPTY
67832: LIST
67833: LIST
67834: PUSH
67835: LD_INT 1
67837: PUSH
67838: LD_INT 4
67840: PUSH
67841: EMPTY
67842: LIST
67843: LIST
67844: PUSH
67845: LD_INT 0
67847: PUSH
67848: LD_INT 4
67850: PUSH
67851: EMPTY
67852: LIST
67853: LIST
67854: PUSH
67855: LD_INT 1
67857: NEG
67858: PUSH
67859: LD_INT 3
67861: PUSH
67862: EMPTY
67863: LIST
67864: LIST
67865: PUSH
67866: LD_INT 1
67868: NEG
67869: PUSH
67870: LD_INT 2
67872: PUSH
67873: EMPTY
67874: LIST
67875: LIST
67876: PUSH
67877: LD_INT 2
67879: PUSH
67880: LD_INT 4
67882: PUSH
67883: EMPTY
67884: LIST
67885: LIST
67886: PUSH
67887: LD_INT 2
67889: NEG
67890: PUSH
67891: LD_INT 2
67893: PUSH
67894: EMPTY
67895: LIST
67896: LIST
67897: PUSH
67898: LD_INT 4
67900: NEG
67901: PUSH
67902: LD_INT 0
67904: PUSH
67905: EMPTY
67906: LIST
67907: LIST
67908: PUSH
67909: LD_INT 4
67911: NEG
67912: PUSH
67913: LD_INT 1
67915: NEG
67916: PUSH
67917: EMPTY
67918: LIST
67919: LIST
67920: PUSH
67921: LD_INT 3
67923: NEG
67924: PUSH
67925: LD_INT 0
67927: PUSH
67928: EMPTY
67929: LIST
67930: LIST
67931: PUSH
67932: LD_INT 3
67934: NEG
67935: PUSH
67936: LD_INT 1
67938: PUSH
67939: EMPTY
67940: LIST
67941: LIST
67942: PUSH
67943: LD_INT 4
67945: NEG
67946: PUSH
67947: LD_INT 1
67949: PUSH
67950: EMPTY
67951: LIST
67952: LIST
67953: PUSH
67954: LD_INT 5
67956: NEG
67957: PUSH
67958: LD_INT 0
67960: PUSH
67961: EMPTY
67962: LIST
67963: LIST
67964: PUSH
67965: LD_INT 5
67967: NEG
67968: PUSH
67969: LD_INT 1
67971: NEG
67972: PUSH
67973: EMPTY
67974: LIST
67975: LIST
67976: PUSH
67977: LD_INT 5
67979: NEG
67980: PUSH
67981: LD_INT 2
67983: NEG
67984: PUSH
67985: EMPTY
67986: LIST
67987: LIST
67988: PUSH
67989: LD_INT 3
67991: NEG
67992: PUSH
67993: LD_INT 2
67995: PUSH
67996: EMPTY
67997: LIST
67998: LIST
67999: PUSH
68000: LD_INT 3
68002: NEG
68003: PUSH
68004: LD_INT 3
68006: NEG
68007: PUSH
68008: EMPTY
68009: LIST
68010: LIST
68011: PUSH
68012: LD_INT 3
68014: NEG
68015: PUSH
68016: LD_INT 4
68018: NEG
68019: PUSH
68020: EMPTY
68021: LIST
68022: LIST
68023: PUSH
68024: LD_INT 2
68026: NEG
68027: PUSH
68028: LD_INT 3
68030: NEG
68031: PUSH
68032: EMPTY
68033: LIST
68034: LIST
68035: PUSH
68036: LD_INT 2
68038: NEG
68039: PUSH
68040: LD_INT 2
68042: NEG
68043: PUSH
68044: EMPTY
68045: LIST
68046: LIST
68047: PUSH
68048: LD_INT 3
68050: NEG
68051: PUSH
68052: LD_INT 2
68054: NEG
68055: PUSH
68056: EMPTY
68057: LIST
68058: LIST
68059: PUSH
68060: LD_INT 4
68062: NEG
68063: PUSH
68064: LD_INT 3
68066: NEG
68067: PUSH
68068: EMPTY
68069: LIST
68070: LIST
68071: PUSH
68072: LD_INT 4
68074: NEG
68075: PUSH
68076: LD_INT 4
68078: NEG
68079: PUSH
68080: EMPTY
68081: LIST
68082: LIST
68083: PUSH
68084: LD_INT 2
68086: NEG
68087: PUSH
68088: LD_INT 4
68090: NEG
68091: PUSH
68092: EMPTY
68093: LIST
68094: LIST
68095: PUSH
68096: LD_INT 4
68098: NEG
68099: PUSH
68100: LD_INT 2
68102: NEG
68103: PUSH
68104: EMPTY
68105: LIST
68106: LIST
68107: PUSH
68108: LD_INT 0
68110: PUSH
68111: LD_INT 4
68113: NEG
68114: PUSH
68115: EMPTY
68116: LIST
68117: LIST
68118: PUSH
68119: LD_INT 0
68121: PUSH
68122: LD_INT 5
68124: NEG
68125: PUSH
68126: EMPTY
68127: LIST
68128: LIST
68129: PUSH
68130: LD_INT 1
68132: PUSH
68133: LD_INT 4
68135: NEG
68136: PUSH
68137: EMPTY
68138: LIST
68139: LIST
68140: PUSH
68141: LD_INT 1
68143: PUSH
68144: LD_INT 3
68146: NEG
68147: PUSH
68148: EMPTY
68149: LIST
68150: LIST
68151: PUSH
68152: LD_INT 0
68154: PUSH
68155: LD_INT 3
68157: NEG
68158: PUSH
68159: EMPTY
68160: LIST
68161: LIST
68162: PUSH
68163: LD_INT 1
68165: NEG
68166: PUSH
68167: LD_INT 4
68169: NEG
68170: PUSH
68171: EMPTY
68172: LIST
68173: LIST
68174: PUSH
68175: LD_INT 1
68177: NEG
68178: PUSH
68179: LD_INT 5
68181: NEG
68182: PUSH
68183: EMPTY
68184: LIST
68185: LIST
68186: PUSH
68187: LD_INT 2
68189: PUSH
68190: LD_INT 3
68192: NEG
68193: PUSH
68194: EMPTY
68195: LIST
68196: LIST
68197: PUSH
68198: LD_INT 2
68200: NEG
68201: PUSH
68202: LD_INT 5
68204: NEG
68205: PUSH
68206: EMPTY
68207: LIST
68208: LIST
68209: PUSH
68210: EMPTY
68211: LIST
68212: LIST
68213: LIST
68214: LIST
68215: LIST
68216: LIST
68217: LIST
68218: LIST
68219: LIST
68220: LIST
68221: LIST
68222: LIST
68223: LIST
68224: LIST
68225: LIST
68226: LIST
68227: LIST
68228: LIST
68229: LIST
68230: LIST
68231: LIST
68232: LIST
68233: LIST
68234: LIST
68235: LIST
68236: LIST
68237: LIST
68238: LIST
68239: LIST
68240: LIST
68241: LIST
68242: LIST
68243: LIST
68244: LIST
68245: LIST
68246: LIST
68247: LIST
68248: LIST
68249: LIST
68250: LIST
68251: LIST
68252: LIST
68253: LIST
68254: LIST
68255: LIST
68256: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
68257: LD_ADDR_VAR 0 31
68261: PUSH
68262: LD_INT 0
68264: PUSH
68265: LD_INT 4
68267: PUSH
68268: EMPTY
68269: LIST
68270: LIST
68271: PUSH
68272: LD_INT 0
68274: PUSH
68275: LD_INT 3
68277: PUSH
68278: EMPTY
68279: LIST
68280: LIST
68281: PUSH
68282: LD_INT 1
68284: PUSH
68285: LD_INT 4
68287: PUSH
68288: EMPTY
68289: LIST
68290: LIST
68291: PUSH
68292: LD_INT 1
68294: PUSH
68295: LD_INT 5
68297: PUSH
68298: EMPTY
68299: LIST
68300: LIST
68301: PUSH
68302: LD_INT 0
68304: PUSH
68305: LD_INT 5
68307: PUSH
68308: EMPTY
68309: LIST
68310: LIST
68311: PUSH
68312: LD_INT 1
68314: NEG
68315: PUSH
68316: LD_INT 4
68318: PUSH
68319: EMPTY
68320: LIST
68321: LIST
68322: PUSH
68323: LD_INT 1
68325: NEG
68326: PUSH
68327: LD_INT 3
68329: PUSH
68330: EMPTY
68331: LIST
68332: LIST
68333: PUSH
68334: LD_INT 2
68336: PUSH
68337: LD_INT 5
68339: PUSH
68340: EMPTY
68341: LIST
68342: LIST
68343: PUSH
68344: LD_INT 2
68346: NEG
68347: PUSH
68348: LD_INT 3
68350: PUSH
68351: EMPTY
68352: LIST
68353: LIST
68354: PUSH
68355: LD_INT 3
68357: NEG
68358: PUSH
68359: LD_INT 0
68361: PUSH
68362: EMPTY
68363: LIST
68364: LIST
68365: PUSH
68366: LD_INT 3
68368: NEG
68369: PUSH
68370: LD_INT 1
68372: NEG
68373: PUSH
68374: EMPTY
68375: LIST
68376: LIST
68377: PUSH
68378: LD_INT 2
68380: NEG
68381: PUSH
68382: LD_INT 0
68384: PUSH
68385: EMPTY
68386: LIST
68387: LIST
68388: PUSH
68389: LD_INT 2
68391: NEG
68392: PUSH
68393: LD_INT 1
68395: PUSH
68396: EMPTY
68397: LIST
68398: LIST
68399: PUSH
68400: LD_INT 3
68402: NEG
68403: PUSH
68404: LD_INT 1
68406: PUSH
68407: EMPTY
68408: LIST
68409: LIST
68410: PUSH
68411: LD_INT 4
68413: NEG
68414: PUSH
68415: LD_INT 0
68417: PUSH
68418: EMPTY
68419: LIST
68420: LIST
68421: PUSH
68422: LD_INT 4
68424: NEG
68425: PUSH
68426: LD_INT 1
68428: NEG
68429: PUSH
68430: EMPTY
68431: LIST
68432: LIST
68433: PUSH
68434: LD_INT 4
68436: NEG
68437: PUSH
68438: LD_INT 2
68440: NEG
68441: PUSH
68442: EMPTY
68443: LIST
68444: LIST
68445: PUSH
68446: LD_INT 2
68448: NEG
68449: PUSH
68450: LD_INT 2
68452: PUSH
68453: EMPTY
68454: LIST
68455: LIST
68456: PUSH
68457: LD_INT 4
68459: NEG
68460: PUSH
68461: LD_INT 4
68463: NEG
68464: PUSH
68465: EMPTY
68466: LIST
68467: LIST
68468: PUSH
68469: LD_INT 4
68471: NEG
68472: PUSH
68473: LD_INT 5
68475: NEG
68476: PUSH
68477: EMPTY
68478: LIST
68479: LIST
68480: PUSH
68481: LD_INT 3
68483: NEG
68484: PUSH
68485: LD_INT 4
68487: NEG
68488: PUSH
68489: EMPTY
68490: LIST
68491: LIST
68492: PUSH
68493: LD_INT 3
68495: NEG
68496: PUSH
68497: LD_INT 3
68499: NEG
68500: PUSH
68501: EMPTY
68502: LIST
68503: LIST
68504: PUSH
68505: LD_INT 4
68507: NEG
68508: PUSH
68509: LD_INT 3
68511: NEG
68512: PUSH
68513: EMPTY
68514: LIST
68515: LIST
68516: PUSH
68517: LD_INT 5
68519: NEG
68520: PUSH
68521: LD_INT 4
68523: NEG
68524: PUSH
68525: EMPTY
68526: LIST
68527: LIST
68528: PUSH
68529: LD_INT 5
68531: NEG
68532: PUSH
68533: LD_INT 5
68535: NEG
68536: PUSH
68537: EMPTY
68538: LIST
68539: LIST
68540: PUSH
68541: LD_INT 3
68543: NEG
68544: PUSH
68545: LD_INT 5
68547: NEG
68548: PUSH
68549: EMPTY
68550: LIST
68551: LIST
68552: PUSH
68553: LD_INT 5
68555: NEG
68556: PUSH
68557: LD_INT 3
68559: NEG
68560: PUSH
68561: EMPTY
68562: LIST
68563: LIST
68564: PUSH
68565: LD_INT 0
68567: PUSH
68568: LD_INT 3
68570: NEG
68571: PUSH
68572: EMPTY
68573: LIST
68574: LIST
68575: PUSH
68576: LD_INT 0
68578: PUSH
68579: LD_INT 4
68581: NEG
68582: PUSH
68583: EMPTY
68584: LIST
68585: LIST
68586: PUSH
68587: LD_INT 1
68589: PUSH
68590: LD_INT 3
68592: NEG
68593: PUSH
68594: EMPTY
68595: LIST
68596: LIST
68597: PUSH
68598: LD_INT 1
68600: PUSH
68601: LD_INT 2
68603: NEG
68604: PUSH
68605: EMPTY
68606: LIST
68607: LIST
68608: PUSH
68609: LD_INT 0
68611: PUSH
68612: LD_INT 2
68614: NEG
68615: PUSH
68616: EMPTY
68617: LIST
68618: LIST
68619: PUSH
68620: LD_INT 1
68622: NEG
68623: PUSH
68624: LD_INT 3
68626: NEG
68627: PUSH
68628: EMPTY
68629: LIST
68630: LIST
68631: PUSH
68632: LD_INT 1
68634: NEG
68635: PUSH
68636: LD_INT 4
68638: NEG
68639: PUSH
68640: EMPTY
68641: LIST
68642: LIST
68643: PUSH
68644: LD_INT 2
68646: PUSH
68647: LD_INT 2
68649: NEG
68650: PUSH
68651: EMPTY
68652: LIST
68653: LIST
68654: PUSH
68655: LD_INT 2
68657: NEG
68658: PUSH
68659: LD_INT 4
68661: NEG
68662: PUSH
68663: EMPTY
68664: LIST
68665: LIST
68666: PUSH
68667: LD_INT 4
68669: PUSH
68670: LD_INT 0
68672: PUSH
68673: EMPTY
68674: LIST
68675: LIST
68676: PUSH
68677: LD_INT 4
68679: PUSH
68680: LD_INT 1
68682: NEG
68683: PUSH
68684: EMPTY
68685: LIST
68686: LIST
68687: PUSH
68688: LD_INT 5
68690: PUSH
68691: LD_INT 0
68693: PUSH
68694: EMPTY
68695: LIST
68696: LIST
68697: PUSH
68698: LD_INT 5
68700: PUSH
68701: LD_INT 1
68703: PUSH
68704: EMPTY
68705: LIST
68706: LIST
68707: PUSH
68708: LD_INT 4
68710: PUSH
68711: LD_INT 1
68713: PUSH
68714: EMPTY
68715: LIST
68716: LIST
68717: PUSH
68718: LD_INT 3
68720: PUSH
68721: LD_INT 0
68723: PUSH
68724: EMPTY
68725: LIST
68726: LIST
68727: PUSH
68728: LD_INT 3
68730: PUSH
68731: LD_INT 1
68733: NEG
68734: PUSH
68735: EMPTY
68736: LIST
68737: LIST
68738: PUSH
68739: LD_INT 3
68741: PUSH
68742: LD_INT 2
68744: NEG
68745: PUSH
68746: EMPTY
68747: LIST
68748: LIST
68749: PUSH
68750: LD_INT 5
68752: PUSH
68753: LD_INT 2
68755: PUSH
68756: EMPTY
68757: LIST
68758: LIST
68759: PUSH
68760: EMPTY
68761: LIST
68762: LIST
68763: LIST
68764: LIST
68765: LIST
68766: LIST
68767: LIST
68768: LIST
68769: LIST
68770: LIST
68771: LIST
68772: LIST
68773: LIST
68774: LIST
68775: LIST
68776: LIST
68777: LIST
68778: LIST
68779: LIST
68780: LIST
68781: LIST
68782: LIST
68783: LIST
68784: LIST
68785: LIST
68786: LIST
68787: LIST
68788: LIST
68789: LIST
68790: LIST
68791: LIST
68792: LIST
68793: LIST
68794: LIST
68795: LIST
68796: LIST
68797: LIST
68798: LIST
68799: LIST
68800: LIST
68801: LIST
68802: LIST
68803: LIST
68804: LIST
68805: LIST
68806: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
68807: LD_ADDR_VAR 0 32
68811: PUSH
68812: LD_INT 4
68814: NEG
68815: PUSH
68816: LD_INT 0
68818: PUSH
68819: EMPTY
68820: LIST
68821: LIST
68822: PUSH
68823: LD_INT 4
68825: NEG
68826: PUSH
68827: LD_INT 1
68829: NEG
68830: PUSH
68831: EMPTY
68832: LIST
68833: LIST
68834: PUSH
68835: LD_INT 3
68837: NEG
68838: PUSH
68839: LD_INT 0
68841: PUSH
68842: EMPTY
68843: LIST
68844: LIST
68845: PUSH
68846: LD_INT 3
68848: NEG
68849: PUSH
68850: LD_INT 1
68852: PUSH
68853: EMPTY
68854: LIST
68855: LIST
68856: PUSH
68857: LD_INT 4
68859: NEG
68860: PUSH
68861: LD_INT 1
68863: PUSH
68864: EMPTY
68865: LIST
68866: LIST
68867: PUSH
68868: LD_INT 5
68870: NEG
68871: PUSH
68872: LD_INT 0
68874: PUSH
68875: EMPTY
68876: LIST
68877: LIST
68878: PUSH
68879: LD_INT 5
68881: NEG
68882: PUSH
68883: LD_INT 1
68885: NEG
68886: PUSH
68887: EMPTY
68888: LIST
68889: LIST
68890: PUSH
68891: LD_INT 5
68893: NEG
68894: PUSH
68895: LD_INT 2
68897: NEG
68898: PUSH
68899: EMPTY
68900: LIST
68901: LIST
68902: PUSH
68903: LD_INT 3
68905: NEG
68906: PUSH
68907: LD_INT 2
68909: PUSH
68910: EMPTY
68911: LIST
68912: LIST
68913: PUSH
68914: LD_INT 3
68916: NEG
68917: PUSH
68918: LD_INT 3
68920: NEG
68921: PUSH
68922: EMPTY
68923: LIST
68924: LIST
68925: PUSH
68926: LD_INT 3
68928: NEG
68929: PUSH
68930: LD_INT 4
68932: NEG
68933: PUSH
68934: EMPTY
68935: LIST
68936: LIST
68937: PUSH
68938: LD_INT 2
68940: NEG
68941: PUSH
68942: LD_INT 3
68944: NEG
68945: PUSH
68946: EMPTY
68947: LIST
68948: LIST
68949: PUSH
68950: LD_INT 2
68952: NEG
68953: PUSH
68954: LD_INT 2
68956: NEG
68957: PUSH
68958: EMPTY
68959: LIST
68960: LIST
68961: PUSH
68962: LD_INT 3
68964: NEG
68965: PUSH
68966: LD_INT 2
68968: NEG
68969: PUSH
68970: EMPTY
68971: LIST
68972: LIST
68973: PUSH
68974: LD_INT 4
68976: NEG
68977: PUSH
68978: LD_INT 3
68980: NEG
68981: PUSH
68982: EMPTY
68983: LIST
68984: LIST
68985: PUSH
68986: LD_INT 4
68988: NEG
68989: PUSH
68990: LD_INT 4
68992: NEG
68993: PUSH
68994: EMPTY
68995: LIST
68996: LIST
68997: PUSH
68998: LD_INT 2
69000: NEG
69001: PUSH
69002: LD_INT 4
69004: NEG
69005: PUSH
69006: EMPTY
69007: LIST
69008: LIST
69009: PUSH
69010: LD_INT 4
69012: NEG
69013: PUSH
69014: LD_INT 2
69016: NEG
69017: PUSH
69018: EMPTY
69019: LIST
69020: LIST
69021: PUSH
69022: LD_INT 0
69024: PUSH
69025: LD_INT 4
69027: NEG
69028: PUSH
69029: EMPTY
69030: LIST
69031: LIST
69032: PUSH
69033: LD_INT 0
69035: PUSH
69036: LD_INT 5
69038: NEG
69039: PUSH
69040: EMPTY
69041: LIST
69042: LIST
69043: PUSH
69044: LD_INT 1
69046: PUSH
69047: LD_INT 4
69049: NEG
69050: PUSH
69051: EMPTY
69052: LIST
69053: LIST
69054: PUSH
69055: LD_INT 1
69057: PUSH
69058: LD_INT 3
69060: NEG
69061: PUSH
69062: EMPTY
69063: LIST
69064: LIST
69065: PUSH
69066: LD_INT 0
69068: PUSH
69069: LD_INT 3
69071: NEG
69072: PUSH
69073: EMPTY
69074: LIST
69075: LIST
69076: PUSH
69077: LD_INT 1
69079: NEG
69080: PUSH
69081: LD_INT 4
69083: NEG
69084: PUSH
69085: EMPTY
69086: LIST
69087: LIST
69088: PUSH
69089: LD_INT 1
69091: NEG
69092: PUSH
69093: LD_INT 5
69095: NEG
69096: PUSH
69097: EMPTY
69098: LIST
69099: LIST
69100: PUSH
69101: LD_INT 2
69103: PUSH
69104: LD_INT 3
69106: NEG
69107: PUSH
69108: EMPTY
69109: LIST
69110: LIST
69111: PUSH
69112: LD_INT 2
69114: NEG
69115: PUSH
69116: LD_INT 5
69118: NEG
69119: PUSH
69120: EMPTY
69121: LIST
69122: LIST
69123: PUSH
69124: LD_INT 3
69126: PUSH
69127: LD_INT 0
69129: PUSH
69130: EMPTY
69131: LIST
69132: LIST
69133: PUSH
69134: LD_INT 3
69136: PUSH
69137: LD_INT 1
69139: NEG
69140: PUSH
69141: EMPTY
69142: LIST
69143: LIST
69144: PUSH
69145: LD_INT 4
69147: PUSH
69148: LD_INT 0
69150: PUSH
69151: EMPTY
69152: LIST
69153: LIST
69154: PUSH
69155: LD_INT 4
69157: PUSH
69158: LD_INT 1
69160: PUSH
69161: EMPTY
69162: LIST
69163: LIST
69164: PUSH
69165: LD_INT 3
69167: PUSH
69168: LD_INT 1
69170: PUSH
69171: EMPTY
69172: LIST
69173: LIST
69174: PUSH
69175: LD_INT 2
69177: PUSH
69178: LD_INT 0
69180: PUSH
69181: EMPTY
69182: LIST
69183: LIST
69184: PUSH
69185: LD_INT 2
69187: PUSH
69188: LD_INT 1
69190: NEG
69191: PUSH
69192: EMPTY
69193: LIST
69194: LIST
69195: PUSH
69196: LD_INT 2
69198: PUSH
69199: LD_INT 2
69201: NEG
69202: PUSH
69203: EMPTY
69204: LIST
69205: LIST
69206: PUSH
69207: LD_INT 4
69209: PUSH
69210: LD_INT 2
69212: PUSH
69213: EMPTY
69214: LIST
69215: LIST
69216: PUSH
69217: LD_INT 4
69219: PUSH
69220: LD_INT 4
69222: PUSH
69223: EMPTY
69224: LIST
69225: LIST
69226: PUSH
69227: LD_INT 4
69229: PUSH
69230: LD_INT 3
69232: PUSH
69233: EMPTY
69234: LIST
69235: LIST
69236: PUSH
69237: LD_INT 5
69239: PUSH
69240: LD_INT 4
69242: PUSH
69243: EMPTY
69244: LIST
69245: LIST
69246: PUSH
69247: LD_INT 5
69249: PUSH
69250: LD_INT 5
69252: PUSH
69253: EMPTY
69254: LIST
69255: LIST
69256: PUSH
69257: LD_INT 4
69259: PUSH
69260: LD_INT 5
69262: PUSH
69263: EMPTY
69264: LIST
69265: LIST
69266: PUSH
69267: LD_INT 3
69269: PUSH
69270: LD_INT 4
69272: PUSH
69273: EMPTY
69274: LIST
69275: LIST
69276: PUSH
69277: LD_INT 3
69279: PUSH
69280: LD_INT 3
69282: PUSH
69283: EMPTY
69284: LIST
69285: LIST
69286: PUSH
69287: LD_INT 5
69289: PUSH
69290: LD_INT 3
69292: PUSH
69293: EMPTY
69294: LIST
69295: LIST
69296: PUSH
69297: LD_INT 3
69299: PUSH
69300: LD_INT 5
69302: PUSH
69303: EMPTY
69304: LIST
69305: LIST
69306: PUSH
69307: EMPTY
69308: LIST
69309: LIST
69310: LIST
69311: LIST
69312: LIST
69313: LIST
69314: LIST
69315: LIST
69316: LIST
69317: LIST
69318: LIST
69319: LIST
69320: LIST
69321: LIST
69322: LIST
69323: LIST
69324: LIST
69325: LIST
69326: LIST
69327: LIST
69328: LIST
69329: LIST
69330: LIST
69331: LIST
69332: LIST
69333: LIST
69334: LIST
69335: LIST
69336: LIST
69337: LIST
69338: LIST
69339: LIST
69340: LIST
69341: LIST
69342: LIST
69343: LIST
69344: LIST
69345: LIST
69346: LIST
69347: LIST
69348: LIST
69349: LIST
69350: LIST
69351: LIST
69352: LIST
69353: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
69354: LD_ADDR_VAR 0 33
69358: PUSH
69359: LD_INT 4
69361: NEG
69362: PUSH
69363: LD_INT 4
69365: NEG
69366: PUSH
69367: EMPTY
69368: LIST
69369: LIST
69370: PUSH
69371: LD_INT 4
69373: NEG
69374: PUSH
69375: LD_INT 5
69377: NEG
69378: PUSH
69379: EMPTY
69380: LIST
69381: LIST
69382: PUSH
69383: LD_INT 3
69385: NEG
69386: PUSH
69387: LD_INT 4
69389: NEG
69390: PUSH
69391: EMPTY
69392: LIST
69393: LIST
69394: PUSH
69395: LD_INT 3
69397: NEG
69398: PUSH
69399: LD_INT 3
69401: NEG
69402: PUSH
69403: EMPTY
69404: LIST
69405: LIST
69406: PUSH
69407: LD_INT 4
69409: NEG
69410: PUSH
69411: LD_INT 3
69413: NEG
69414: PUSH
69415: EMPTY
69416: LIST
69417: LIST
69418: PUSH
69419: LD_INT 5
69421: NEG
69422: PUSH
69423: LD_INT 4
69425: NEG
69426: PUSH
69427: EMPTY
69428: LIST
69429: LIST
69430: PUSH
69431: LD_INT 5
69433: NEG
69434: PUSH
69435: LD_INT 5
69437: NEG
69438: PUSH
69439: EMPTY
69440: LIST
69441: LIST
69442: PUSH
69443: LD_INT 3
69445: NEG
69446: PUSH
69447: LD_INT 5
69449: NEG
69450: PUSH
69451: EMPTY
69452: LIST
69453: LIST
69454: PUSH
69455: LD_INT 5
69457: NEG
69458: PUSH
69459: LD_INT 3
69461: NEG
69462: PUSH
69463: EMPTY
69464: LIST
69465: LIST
69466: PUSH
69467: LD_INT 0
69469: PUSH
69470: LD_INT 3
69472: NEG
69473: PUSH
69474: EMPTY
69475: LIST
69476: LIST
69477: PUSH
69478: LD_INT 0
69480: PUSH
69481: LD_INT 4
69483: NEG
69484: PUSH
69485: EMPTY
69486: LIST
69487: LIST
69488: PUSH
69489: LD_INT 1
69491: PUSH
69492: LD_INT 3
69494: NEG
69495: PUSH
69496: EMPTY
69497: LIST
69498: LIST
69499: PUSH
69500: LD_INT 1
69502: PUSH
69503: LD_INT 2
69505: NEG
69506: PUSH
69507: EMPTY
69508: LIST
69509: LIST
69510: PUSH
69511: LD_INT 0
69513: PUSH
69514: LD_INT 2
69516: NEG
69517: PUSH
69518: EMPTY
69519: LIST
69520: LIST
69521: PUSH
69522: LD_INT 1
69524: NEG
69525: PUSH
69526: LD_INT 3
69528: NEG
69529: PUSH
69530: EMPTY
69531: LIST
69532: LIST
69533: PUSH
69534: LD_INT 1
69536: NEG
69537: PUSH
69538: LD_INT 4
69540: NEG
69541: PUSH
69542: EMPTY
69543: LIST
69544: LIST
69545: PUSH
69546: LD_INT 2
69548: PUSH
69549: LD_INT 2
69551: NEG
69552: PUSH
69553: EMPTY
69554: LIST
69555: LIST
69556: PUSH
69557: LD_INT 2
69559: NEG
69560: PUSH
69561: LD_INT 4
69563: NEG
69564: PUSH
69565: EMPTY
69566: LIST
69567: LIST
69568: PUSH
69569: LD_INT 4
69571: PUSH
69572: LD_INT 0
69574: PUSH
69575: EMPTY
69576: LIST
69577: LIST
69578: PUSH
69579: LD_INT 4
69581: PUSH
69582: LD_INT 1
69584: NEG
69585: PUSH
69586: EMPTY
69587: LIST
69588: LIST
69589: PUSH
69590: LD_INT 5
69592: PUSH
69593: LD_INT 0
69595: PUSH
69596: EMPTY
69597: LIST
69598: LIST
69599: PUSH
69600: LD_INT 5
69602: PUSH
69603: LD_INT 1
69605: PUSH
69606: EMPTY
69607: LIST
69608: LIST
69609: PUSH
69610: LD_INT 4
69612: PUSH
69613: LD_INT 1
69615: PUSH
69616: EMPTY
69617: LIST
69618: LIST
69619: PUSH
69620: LD_INT 3
69622: PUSH
69623: LD_INT 0
69625: PUSH
69626: EMPTY
69627: LIST
69628: LIST
69629: PUSH
69630: LD_INT 3
69632: PUSH
69633: LD_INT 1
69635: NEG
69636: PUSH
69637: EMPTY
69638: LIST
69639: LIST
69640: PUSH
69641: LD_INT 3
69643: PUSH
69644: LD_INT 2
69646: NEG
69647: PUSH
69648: EMPTY
69649: LIST
69650: LIST
69651: PUSH
69652: LD_INT 5
69654: PUSH
69655: LD_INT 2
69657: PUSH
69658: EMPTY
69659: LIST
69660: LIST
69661: PUSH
69662: LD_INT 3
69664: PUSH
69665: LD_INT 3
69667: PUSH
69668: EMPTY
69669: LIST
69670: LIST
69671: PUSH
69672: LD_INT 3
69674: PUSH
69675: LD_INT 2
69677: PUSH
69678: EMPTY
69679: LIST
69680: LIST
69681: PUSH
69682: LD_INT 4
69684: PUSH
69685: LD_INT 3
69687: PUSH
69688: EMPTY
69689: LIST
69690: LIST
69691: PUSH
69692: LD_INT 4
69694: PUSH
69695: LD_INT 4
69697: PUSH
69698: EMPTY
69699: LIST
69700: LIST
69701: PUSH
69702: LD_INT 3
69704: PUSH
69705: LD_INT 4
69707: PUSH
69708: EMPTY
69709: LIST
69710: LIST
69711: PUSH
69712: LD_INT 2
69714: PUSH
69715: LD_INT 3
69717: PUSH
69718: EMPTY
69719: LIST
69720: LIST
69721: PUSH
69722: LD_INT 2
69724: PUSH
69725: LD_INT 2
69727: PUSH
69728: EMPTY
69729: LIST
69730: LIST
69731: PUSH
69732: LD_INT 4
69734: PUSH
69735: LD_INT 2
69737: PUSH
69738: EMPTY
69739: LIST
69740: LIST
69741: PUSH
69742: LD_INT 2
69744: PUSH
69745: LD_INT 4
69747: PUSH
69748: EMPTY
69749: LIST
69750: LIST
69751: PUSH
69752: LD_INT 0
69754: PUSH
69755: LD_INT 4
69757: PUSH
69758: EMPTY
69759: LIST
69760: LIST
69761: PUSH
69762: LD_INT 0
69764: PUSH
69765: LD_INT 3
69767: PUSH
69768: EMPTY
69769: LIST
69770: LIST
69771: PUSH
69772: LD_INT 1
69774: PUSH
69775: LD_INT 4
69777: PUSH
69778: EMPTY
69779: LIST
69780: LIST
69781: PUSH
69782: LD_INT 1
69784: PUSH
69785: LD_INT 5
69787: PUSH
69788: EMPTY
69789: LIST
69790: LIST
69791: PUSH
69792: LD_INT 0
69794: PUSH
69795: LD_INT 5
69797: PUSH
69798: EMPTY
69799: LIST
69800: LIST
69801: PUSH
69802: LD_INT 1
69804: NEG
69805: PUSH
69806: LD_INT 4
69808: PUSH
69809: EMPTY
69810: LIST
69811: LIST
69812: PUSH
69813: LD_INT 1
69815: NEG
69816: PUSH
69817: LD_INT 3
69819: PUSH
69820: EMPTY
69821: LIST
69822: LIST
69823: PUSH
69824: LD_INT 2
69826: PUSH
69827: LD_INT 5
69829: PUSH
69830: EMPTY
69831: LIST
69832: LIST
69833: PUSH
69834: LD_INT 2
69836: NEG
69837: PUSH
69838: LD_INT 3
69840: PUSH
69841: EMPTY
69842: LIST
69843: LIST
69844: PUSH
69845: EMPTY
69846: LIST
69847: LIST
69848: LIST
69849: LIST
69850: LIST
69851: LIST
69852: LIST
69853: LIST
69854: LIST
69855: LIST
69856: LIST
69857: LIST
69858: LIST
69859: LIST
69860: LIST
69861: LIST
69862: LIST
69863: LIST
69864: LIST
69865: LIST
69866: LIST
69867: LIST
69868: LIST
69869: LIST
69870: LIST
69871: LIST
69872: LIST
69873: LIST
69874: LIST
69875: LIST
69876: LIST
69877: LIST
69878: LIST
69879: LIST
69880: LIST
69881: LIST
69882: LIST
69883: LIST
69884: LIST
69885: LIST
69886: LIST
69887: LIST
69888: LIST
69889: LIST
69890: LIST
69891: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
69892: LD_ADDR_VAR 0 34
69896: PUSH
69897: LD_INT 0
69899: PUSH
69900: LD_INT 4
69902: NEG
69903: PUSH
69904: EMPTY
69905: LIST
69906: LIST
69907: PUSH
69908: LD_INT 0
69910: PUSH
69911: LD_INT 5
69913: NEG
69914: PUSH
69915: EMPTY
69916: LIST
69917: LIST
69918: PUSH
69919: LD_INT 1
69921: PUSH
69922: LD_INT 4
69924: NEG
69925: PUSH
69926: EMPTY
69927: LIST
69928: LIST
69929: PUSH
69930: LD_INT 1
69932: PUSH
69933: LD_INT 3
69935: NEG
69936: PUSH
69937: EMPTY
69938: LIST
69939: LIST
69940: PUSH
69941: LD_INT 0
69943: PUSH
69944: LD_INT 3
69946: NEG
69947: PUSH
69948: EMPTY
69949: LIST
69950: LIST
69951: PUSH
69952: LD_INT 1
69954: NEG
69955: PUSH
69956: LD_INT 4
69958: NEG
69959: PUSH
69960: EMPTY
69961: LIST
69962: LIST
69963: PUSH
69964: LD_INT 1
69966: NEG
69967: PUSH
69968: LD_INT 5
69970: NEG
69971: PUSH
69972: EMPTY
69973: LIST
69974: LIST
69975: PUSH
69976: LD_INT 2
69978: PUSH
69979: LD_INT 3
69981: NEG
69982: PUSH
69983: EMPTY
69984: LIST
69985: LIST
69986: PUSH
69987: LD_INT 2
69989: NEG
69990: PUSH
69991: LD_INT 5
69993: NEG
69994: PUSH
69995: EMPTY
69996: LIST
69997: LIST
69998: PUSH
69999: LD_INT 3
70001: PUSH
70002: LD_INT 0
70004: PUSH
70005: EMPTY
70006: LIST
70007: LIST
70008: PUSH
70009: LD_INT 3
70011: PUSH
70012: LD_INT 1
70014: NEG
70015: PUSH
70016: EMPTY
70017: LIST
70018: LIST
70019: PUSH
70020: LD_INT 4
70022: PUSH
70023: LD_INT 0
70025: PUSH
70026: EMPTY
70027: LIST
70028: LIST
70029: PUSH
70030: LD_INT 4
70032: PUSH
70033: LD_INT 1
70035: PUSH
70036: EMPTY
70037: LIST
70038: LIST
70039: PUSH
70040: LD_INT 3
70042: PUSH
70043: LD_INT 1
70045: PUSH
70046: EMPTY
70047: LIST
70048: LIST
70049: PUSH
70050: LD_INT 2
70052: PUSH
70053: LD_INT 0
70055: PUSH
70056: EMPTY
70057: LIST
70058: LIST
70059: PUSH
70060: LD_INT 2
70062: PUSH
70063: LD_INT 1
70065: NEG
70066: PUSH
70067: EMPTY
70068: LIST
70069: LIST
70070: PUSH
70071: LD_INT 2
70073: PUSH
70074: LD_INT 2
70076: NEG
70077: PUSH
70078: EMPTY
70079: LIST
70080: LIST
70081: PUSH
70082: LD_INT 4
70084: PUSH
70085: LD_INT 2
70087: PUSH
70088: EMPTY
70089: LIST
70090: LIST
70091: PUSH
70092: LD_INT 4
70094: PUSH
70095: LD_INT 4
70097: PUSH
70098: EMPTY
70099: LIST
70100: LIST
70101: PUSH
70102: LD_INT 4
70104: PUSH
70105: LD_INT 3
70107: PUSH
70108: EMPTY
70109: LIST
70110: LIST
70111: PUSH
70112: LD_INT 5
70114: PUSH
70115: LD_INT 4
70117: PUSH
70118: EMPTY
70119: LIST
70120: LIST
70121: PUSH
70122: LD_INT 5
70124: PUSH
70125: LD_INT 5
70127: PUSH
70128: EMPTY
70129: LIST
70130: LIST
70131: PUSH
70132: LD_INT 4
70134: PUSH
70135: LD_INT 5
70137: PUSH
70138: EMPTY
70139: LIST
70140: LIST
70141: PUSH
70142: LD_INT 3
70144: PUSH
70145: LD_INT 4
70147: PUSH
70148: EMPTY
70149: LIST
70150: LIST
70151: PUSH
70152: LD_INT 3
70154: PUSH
70155: LD_INT 3
70157: PUSH
70158: EMPTY
70159: LIST
70160: LIST
70161: PUSH
70162: LD_INT 5
70164: PUSH
70165: LD_INT 3
70167: PUSH
70168: EMPTY
70169: LIST
70170: LIST
70171: PUSH
70172: LD_INT 3
70174: PUSH
70175: LD_INT 5
70177: PUSH
70178: EMPTY
70179: LIST
70180: LIST
70181: PUSH
70182: LD_INT 0
70184: PUSH
70185: LD_INT 3
70187: PUSH
70188: EMPTY
70189: LIST
70190: LIST
70191: PUSH
70192: LD_INT 0
70194: PUSH
70195: LD_INT 2
70197: PUSH
70198: EMPTY
70199: LIST
70200: LIST
70201: PUSH
70202: LD_INT 1
70204: PUSH
70205: LD_INT 3
70207: PUSH
70208: EMPTY
70209: LIST
70210: LIST
70211: PUSH
70212: LD_INT 1
70214: PUSH
70215: LD_INT 4
70217: PUSH
70218: EMPTY
70219: LIST
70220: LIST
70221: PUSH
70222: LD_INT 0
70224: PUSH
70225: LD_INT 4
70227: PUSH
70228: EMPTY
70229: LIST
70230: LIST
70231: PUSH
70232: LD_INT 1
70234: NEG
70235: PUSH
70236: LD_INT 3
70238: PUSH
70239: EMPTY
70240: LIST
70241: LIST
70242: PUSH
70243: LD_INT 1
70245: NEG
70246: PUSH
70247: LD_INT 2
70249: PUSH
70250: EMPTY
70251: LIST
70252: LIST
70253: PUSH
70254: LD_INT 2
70256: PUSH
70257: LD_INT 4
70259: PUSH
70260: EMPTY
70261: LIST
70262: LIST
70263: PUSH
70264: LD_INT 2
70266: NEG
70267: PUSH
70268: LD_INT 2
70270: PUSH
70271: EMPTY
70272: LIST
70273: LIST
70274: PUSH
70275: LD_INT 4
70277: NEG
70278: PUSH
70279: LD_INT 0
70281: PUSH
70282: EMPTY
70283: LIST
70284: LIST
70285: PUSH
70286: LD_INT 4
70288: NEG
70289: PUSH
70290: LD_INT 1
70292: NEG
70293: PUSH
70294: EMPTY
70295: LIST
70296: LIST
70297: PUSH
70298: LD_INT 3
70300: NEG
70301: PUSH
70302: LD_INT 0
70304: PUSH
70305: EMPTY
70306: LIST
70307: LIST
70308: PUSH
70309: LD_INT 3
70311: NEG
70312: PUSH
70313: LD_INT 1
70315: PUSH
70316: EMPTY
70317: LIST
70318: LIST
70319: PUSH
70320: LD_INT 4
70322: NEG
70323: PUSH
70324: LD_INT 1
70326: PUSH
70327: EMPTY
70328: LIST
70329: LIST
70330: PUSH
70331: LD_INT 5
70333: NEG
70334: PUSH
70335: LD_INT 0
70337: PUSH
70338: EMPTY
70339: LIST
70340: LIST
70341: PUSH
70342: LD_INT 5
70344: NEG
70345: PUSH
70346: LD_INT 1
70348: NEG
70349: PUSH
70350: EMPTY
70351: LIST
70352: LIST
70353: PUSH
70354: LD_INT 5
70356: NEG
70357: PUSH
70358: LD_INT 2
70360: NEG
70361: PUSH
70362: EMPTY
70363: LIST
70364: LIST
70365: PUSH
70366: LD_INT 3
70368: NEG
70369: PUSH
70370: LD_INT 2
70372: PUSH
70373: EMPTY
70374: LIST
70375: LIST
70376: PUSH
70377: EMPTY
70378: LIST
70379: LIST
70380: LIST
70381: LIST
70382: LIST
70383: LIST
70384: LIST
70385: LIST
70386: LIST
70387: LIST
70388: LIST
70389: LIST
70390: LIST
70391: LIST
70392: LIST
70393: LIST
70394: LIST
70395: LIST
70396: LIST
70397: LIST
70398: LIST
70399: LIST
70400: LIST
70401: LIST
70402: LIST
70403: LIST
70404: LIST
70405: LIST
70406: LIST
70407: LIST
70408: LIST
70409: LIST
70410: LIST
70411: LIST
70412: LIST
70413: LIST
70414: LIST
70415: LIST
70416: LIST
70417: LIST
70418: LIST
70419: LIST
70420: LIST
70421: LIST
70422: LIST
70423: ST_TO_ADDR
// end ; end ;
70424: GO 70427
70426: POP
// case btype of b_depot , b_warehouse :
70427: LD_VAR 0 1
70431: PUSH
70432: LD_INT 0
70434: DOUBLE
70435: EQUAL
70436: IFTRUE 70446
70438: LD_INT 1
70440: DOUBLE
70441: EQUAL
70442: IFTRUE 70446
70444: GO 70647
70446: POP
// case nation of nation_american :
70447: LD_VAR 0 5
70451: PUSH
70452: LD_INT 1
70454: DOUBLE
70455: EQUAL
70456: IFTRUE 70460
70458: GO 70516
70460: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
70461: LD_ADDR_VAR 0 9
70465: PUSH
70466: LD_VAR 0 11
70470: PUSH
70471: LD_VAR 0 12
70475: PUSH
70476: LD_VAR 0 13
70480: PUSH
70481: LD_VAR 0 14
70485: PUSH
70486: LD_VAR 0 15
70490: PUSH
70491: LD_VAR 0 16
70495: PUSH
70496: EMPTY
70497: LIST
70498: LIST
70499: LIST
70500: LIST
70501: LIST
70502: LIST
70503: PUSH
70504: LD_VAR 0 4
70508: PUSH
70509: LD_INT 1
70511: PLUS
70512: ARRAY
70513: ST_TO_ADDR
70514: GO 70645
70516: LD_INT 2
70518: DOUBLE
70519: EQUAL
70520: IFTRUE 70524
70522: GO 70580
70524: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
70525: LD_ADDR_VAR 0 9
70529: PUSH
70530: LD_VAR 0 17
70534: PUSH
70535: LD_VAR 0 18
70539: PUSH
70540: LD_VAR 0 19
70544: PUSH
70545: LD_VAR 0 20
70549: PUSH
70550: LD_VAR 0 21
70554: PUSH
70555: LD_VAR 0 22
70559: PUSH
70560: EMPTY
70561: LIST
70562: LIST
70563: LIST
70564: LIST
70565: LIST
70566: LIST
70567: PUSH
70568: LD_VAR 0 4
70572: PUSH
70573: LD_INT 1
70575: PLUS
70576: ARRAY
70577: ST_TO_ADDR
70578: GO 70645
70580: LD_INT 3
70582: DOUBLE
70583: EQUAL
70584: IFTRUE 70588
70586: GO 70644
70588: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
70589: LD_ADDR_VAR 0 9
70593: PUSH
70594: LD_VAR 0 23
70598: PUSH
70599: LD_VAR 0 24
70603: PUSH
70604: LD_VAR 0 25
70608: PUSH
70609: LD_VAR 0 26
70613: PUSH
70614: LD_VAR 0 27
70618: PUSH
70619: LD_VAR 0 28
70623: PUSH
70624: EMPTY
70625: LIST
70626: LIST
70627: LIST
70628: LIST
70629: LIST
70630: LIST
70631: PUSH
70632: LD_VAR 0 4
70636: PUSH
70637: LD_INT 1
70639: PLUS
70640: ARRAY
70641: ST_TO_ADDR
70642: GO 70645
70644: POP
70645: GO 71200
70647: LD_INT 2
70649: DOUBLE
70650: EQUAL
70651: IFTRUE 70661
70653: LD_INT 3
70655: DOUBLE
70656: EQUAL
70657: IFTRUE 70661
70659: GO 70717
70661: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
70662: LD_ADDR_VAR 0 9
70666: PUSH
70667: LD_VAR 0 29
70671: PUSH
70672: LD_VAR 0 30
70676: PUSH
70677: LD_VAR 0 31
70681: PUSH
70682: LD_VAR 0 32
70686: PUSH
70687: LD_VAR 0 33
70691: PUSH
70692: LD_VAR 0 34
70696: PUSH
70697: EMPTY
70698: LIST
70699: LIST
70700: LIST
70701: LIST
70702: LIST
70703: LIST
70704: PUSH
70705: LD_VAR 0 4
70709: PUSH
70710: LD_INT 1
70712: PLUS
70713: ARRAY
70714: ST_TO_ADDR
70715: GO 71200
70717: LD_INT 16
70719: DOUBLE
70720: EQUAL
70721: IFTRUE 70779
70723: LD_INT 17
70725: DOUBLE
70726: EQUAL
70727: IFTRUE 70779
70729: LD_INT 18
70731: DOUBLE
70732: EQUAL
70733: IFTRUE 70779
70735: LD_INT 19
70737: DOUBLE
70738: EQUAL
70739: IFTRUE 70779
70741: LD_INT 22
70743: DOUBLE
70744: EQUAL
70745: IFTRUE 70779
70747: LD_INT 20
70749: DOUBLE
70750: EQUAL
70751: IFTRUE 70779
70753: LD_INT 21
70755: DOUBLE
70756: EQUAL
70757: IFTRUE 70779
70759: LD_INT 23
70761: DOUBLE
70762: EQUAL
70763: IFTRUE 70779
70765: LD_INT 24
70767: DOUBLE
70768: EQUAL
70769: IFTRUE 70779
70771: LD_INT 25
70773: DOUBLE
70774: EQUAL
70775: IFTRUE 70779
70777: GO 70835
70779: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
70780: LD_ADDR_VAR 0 9
70784: PUSH
70785: LD_VAR 0 35
70789: PUSH
70790: LD_VAR 0 36
70794: PUSH
70795: LD_VAR 0 37
70799: PUSH
70800: LD_VAR 0 38
70804: PUSH
70805: LD_VAR 0 39
70809: PUSH
70810: LD_VAR 0 40
70814: PUSH
70815: EMPTY
70816: LIST
70817: LIST
70818: LIST
70819: LIST
70820: LIST
70821: LIST
70822: PUSH
70823: LD_VAR 0 4
70827: PUSH
70828: LD_INT 1
70830: PLUS
70831: ARRAY
70832: ST_TO_ADDR
70833: GO 71200
70835: LD_INT 6
70837: DOUBLE
70838: EQUAL
70839: IFTRUE 70891
70841: LD_INT 7
70843: DOUBLE
70844: EQUAL
70845: IFTRUE 70891
70847: LD_INT 8
70849: DOUBLE
70850: EQUAL
70851: IFTRUE 70891
70853: LD_INT 13
70855: DOUBLE
70856: EQUAL
70857: IFTRUE 70891
70859: LD_INT 12
70861: DOUBLE
70862: EQUAL
70863: IFTRUE 70891
70865: LD_INT 15
70867: DOUBLE
70868: EQUAL
70869: IFTRUE 70891
70871: LD_INT 11
70873: DOUBLE
70874: EQUAL
70875: IFTRUE 70891
70877: LD_INT 14
70879: DOUBLE
70880: EQUAL
70881: IFTRUE 70891
70883: LD_INT 10
70885: DOUBLE
70886: EQUAL
70887: IFTRUE 70891
70889: GO 70947
70891: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
70892: LD_ADDR_VAR 0 9
70896: PUSH
70897: LD_VAR 0 41
70901: PUSH
70902: LD_VAR 0 42
70906: PUSH
70907: LD_VAR 0 43
70911: PUSH
70912: LD_VAR 0 44
70916: PUSH
70917: LD_VAR 0 45
70921: PUSH
70922: LD_VAR 0 46
70926: PUSH
70927: EMPTY
70928: LIST
70929: LIST
70930: LIST
70931: LIST
70932: LIST
70933: LIST
70934: PUSH
70935: LD_VAR 0 4
70939: PUSH
70940: LD_INT 1
70942: PLUS
70943: ARRAY
70944: ST_TO_ADDR
70945: GO 71200
70947: LD_INT 36
70949: DOUBLE
70950: EQUAL
70951: IFTRUE 70955
70953: GO 71011
70955: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
70956: LD_ADDR_VAR 0 9
70960: PUSH
70961: LD_VAR 0 47
70965: PUSH
70966: LD_VAR 0 48
70970: PUSH
70971: LD_VAR 0 49
70975: PUSH
70976: LD_VAR 0 50
70980: PUSH
70981: LD_VAR 0 51
70985: PUSH
70986: LD_VAR 0 52
70990: PUSH
70991: EMPTY
70992: LIST
70993: LIST
70994: LIST
70995: LIST
70996: LIST
70997: LIST
70998: PUSH
70999: LD_VAR 0 4
71003: PUSH
71004: LD_INT 1
71006: PLUS
71007: ARRAY
71008: ST_TO_ADDR
71009: GO 71200
71011: LD_INT 4
71013: DOUBLE
71014: EQUAL
71015: IFTRUE 71037
71017: LD_INT 5
71019: DOUBLE
71020: EQUAL
71021: IFTRUE 71037
71023: LD_INT 34
71025: DOUBLE
71026: EQUAL
71027: IFTRUE 71037
71029: LD_INT 37
71031: DOUBLE
71032: EQUAL
71033: IFTRUE 71037
71035: GO 71093
71037: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
71038: LD_ADDR_VAR 0 9
71042: PUSH
71043: LD_VAR 0 53
71047: PUSH
71048: LD_VAR 0 54
71052: PUSH
71053: LD_VAR 0 55
71057: PUSH
71058: LD_VAR 0 56
71062: PUSH
71063: LD_VAR 0 57
71067: PUSH
71068: LD_VAR 0 58
71072: PUSH
71073: EMPTY
71074: LIST
71075: LIST
71076: LIST
71077: LIST
71078: LIST
71079: LIST
71080: PUSH
71081: LD_VAR 0 4
71085: PUSH
71086: LD_INT 1
71088: PLUS
71089: ARRAY
71090: ST_TO_ADDR
71091: GO 71200
71093: LD_INT 31
71095: DOUBLE
71096: EQUAL
71097: IFTRUE 71143
71099: LD_INT 32
71101: DOUBLE
71102: EQUAL
71103: IFTRUE 71143
71105: LD_INT 33
71107: DOUBLE
71108: EQUAL
71109: IFTRUE 71143
71111: LD_INT 27
71113: DOUBLE
71114: EQUAL
71115: IFTRUE 71143
71117: LD_INT 26
71119: DOUBLE
71120: EQUAL
71121: IFTRUE 71143
71123: LD_INT 28
71125: DOUBLE
71126: EQUAL
71127: IFTRUE 71143
71129: LD_INT 29
71131: DOUBLE
71132: EQUAL
71133: IFTRUE 71143
71135: LD_INT 30
71137: DOUBLE
71138: EQUAL
71139: IFTRUE 71143
71141: GO 71199
71143: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
71144: LD_ADDR_VAR 0 9
71148: PUSH
71149: LD_VAR 0 59
71153: PUSH
71154: LD_VAR 0 60
71158: PUSH
71159: LD_VAR 0 61
71163: PUSH
71164: LD_VAR 0 62
71168: PUSH
71169: LD_VAR 0 63
71173: PUSH
71174: LD_VAR 0 64
71178: PUSH
71179: EMPTY
71180: LIST
71181: LIST
71182: LIST
71183: LIST
71184: LIST
71185: LIST
71186: PUSH
71187: LD_VAR 0 4
71191: PUSH
71192: LD_INT 1
71194: PLUS
71195: ARRAY
71196: ST_TO_ADDR
71197: GO 71200
71199: POP
// temp_list2 = [ ] ;
71200: LD_ADDR_VAR 0 10
71204: PUSH
71205: EMPTY
71206: ST_TO_ADDR
// for i in temp_list do
71207: LD_ADDR_VAR 0 8
71211: PUSH
71212: LD_VAR 0 9
71216: PUSH
71217: FOR_IN
71218: IFFALSE 71270
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
71220: LD_ADDR_VAR 0 10
71224: PUSH
71225: LD_VAR 0 10
71229: PUSH
71230: LD_VAR 0 8
71234: PUSH
71235: LD_INT 1
71237: ARRAY
71238: PUSH
71239: LD_VAR 0 2
71243: PLUS
71244: PUSH
71245: LD_VAR 0 8
71249: PUSH
71250: LD_INT 2
71252: ARRAY
71253: PUSH
71254: LD_VAR 0 3
71258: PLUS
71259: PUSH
71260: EMPTY
71261: LIST
71262: LIST
71263: PUSH
71264: EMPTY
71265: LIST
71266: ADD
71267: ST_TO_ADDR
71268: GO 71217
71270: POP
71271: POP
// result = temp_list2 ;
71272: LD_ADDR_VAR 0 7
71276: PUSH
71277: LD_VAR 0 10
71281: ST_TO_ADDR
// end ;
71282: LD_VAR 0 7
71286: RET
// export function EnemyInRange ( unit , dist ) ; begin
71287: LD_INT 0
71289: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
71290: LD_ADDR_VAR 0 3
71294: PUSH
71295: LD_VAR 0 1
71299: PPUSH
71300: CALL_OW 255
71304: PPUSH
71305: LD_VAR 0 1
71309: PPUSH
71310: CALL_OW 250
71314: PPUSH
71315: LD_VAR 0 1
71319: PPUSH
71320: CALL_OW 251
71324: PPUSH
71325: LD_VAR 0 2
71329: PPUSH
71330: CALL 44683 0 4
71334: PUSH
71335: LD_INT 4
71337: ARRAY
71338: ST_TO_ADDR
// end ;
71339: LD_VAR 0 3
71343: RET
// export function PlayerSeeMe ( unit ) ; begin
71344: LD_INT 0
71346: PPUSH
// result := See ( your_side , unit ) ;
71347: LD_ADDR_VAR 0 2
71351: PUSH
71352: LD_OWVAR 2
71356: PPUSH
71357: LD_VAR 0 1
71361: PPUSH
71362: CALL_OW 292
71366: ST_TO_ADDR
// end ;
71367: LD_VAR 0 2
71371: RET
// export function ReverseDir ( unit ) ; begin
71372: LD_INT 0
71374: PPUSH
// if not unit then
71375: LD_VAR 0 1
71379: NOT
71380: IFFALSE 71384
// exit ;
71382: GO 71407
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
71384: LD_ADDR_VAR 0 2
71388: PUSH
71389: LD_VAR 0 1
71393: PPUSH
71394: CALL_OW 254
71398: PUSH
71399: LD_INT 3
71401: PLUS
71402: PUSH
71403: LD_INT 6
71405: MOD
71406: ST_TO_ADDR
// end ;
71407: LD_VAR 0 2
71411: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
71412: LD_INT 0
71414: PPUSH
71415: PPUSH
71416: PPUSH
71417: PPUSH
71418: PPUSH
// if not hexes then
71419: LD_VAR 0 2
71423: NOT
71424: IFFALSE 71428
// exit ;
71426: GO 71576
// dist := 9999 ;
71428: LD_ADDR_VAR 0 5
71432: PUSH
71433: LD_INT 9999
71435: ST_TO_ADDR
// for i = 1 to hexes do
71436: LD_ADDR_VAR 0 4
71440: PUSH
71441: DOUBLE
71442: LD_INT 1
71444: DEC
71445: ST_TO_ADDR
71446: LD_VAR 0 2
71450: PUSH
71451: FOR_TO
71452: IFFALSE 71564
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
71454: LD_VAR 0 1
71458: PPUSH
71459: LD_VAR 0 2
71463: PUSH
71464: LD_VAR 0 4
71468: ARRAY
71469: PUSH
71470: LD_INT 1
71472: ARRAY
71473: PPUSH
71474: LD_VAR 0 2
71478: PUSH
71479: LD_VAR 0 4
71483: ARRAY
71484: PUSH
71485: LD_INT 2
71487: ARRAY
71488: PPUSH
71489: CALL_OW 297
71493: PUSH
71494: LD_VAR 0 5
71498: LESS
71499: IFFALSE 71562
// begin hex := hexes [ i ] ;
71501: LD_ADDR_VAR 0 7
71505: PUSH
71506: LD_VAR 0 2
71510: PUSH
71511: LD_VAR 0 4
71515: ARRAY
71516: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
71517: LD_ADDR_VAR 0 5
71521: PUSH
71522: LD_VAR 0 1
71526: PPUSH
71527: LD_VAR 0 2
71531: PUSH
71532: LD_VAR 0 4
71536: ARRAY
71537: PUSH
71538: LD_INT 1
71540: ARRAY
71541: PPUSH
71542: LD_VAR 0 2
71546: PUSH
71547: LD_VAR 0 4
71551: ARRAY
71552: PUSH
71553: LD_INT 2
71555: ARRAY
71556: PPUSH
71557: CALL_OW 297
71561: ST_TO_ADDR
// end ; end ;
71562: GO 71451
71564: POP
71565: POP
// result := hex ;
71566: LD_ADDR_VAR 0 3
71570: PUSH
71571: LD_VAR 0 7
71575: ST_TO_ADDR
// end ;
71576: LD_VAR 0 3
71580: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
71581: LD_INT 0
71583: PPUSH
71584: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
71585: LD_VAR 0 1
71589: NOT
71590: PUSH
71591: LD_VAR 0 1
71595: PUSH
71596: LD_INT 21
71598: PUSH
71599: LD_INT 2
71601: PUSH
71602: EMPTY
71603: LIST
71604: LIST
71605: PUSH
71606: LD_INT 23
71608: PUSH
71609: LD_INT 2
71611: PUSH
71612: EMPTY
71613: LIST
71614: LIST
71615: PUSH
71616: EMPTY
71617: LIST
71618: LIST
71619: PPUSH
71620: CALL_OW 69
71624: IN
71625: NOT
71626: OR
71627: IFFALSE 71631
// exit ;
71629: GO 71678
// for i = 1 to 3 do
71631: LD_ADDR_VAR 0 3
71635: PUSH
71636: DOUBLE
71637: LD_INT 1
71639: DEC
71640: ST_TO_ADDR
71641: LD_INT 3
71643: PUSH
71644: FOR_TO
71645: IFFALSE 71676
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
71647: LD_VAR 0 1
71651: PPUSH
71652: CALL_OW 250
71656: PPUSH
71657: LD_VAR 0 1
71661: PPUSH
71662: CALL_OW 251
71666: PPUSH
71667: LD_INT 1
71669: PPUSH
71670: CALL_OW 453
71674: GO 71644
71676: POP
71677: POP
// end ;
71678: LD_VAR 0 2
71682: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
71683: LD_INT 0
71685: PPUSH
71686: PPUSH
71687: PPUSH
71688: PPUSH
71689: PPUSH
71690: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
71691: LD_VAR 0 1
71695: NOT
71696: PUSH
71697: LD_VAR 0 2
71701: NOT
71702: OR
71703: PUSH
71704: LD_VAR 0 1
71708: PPUSH
71709: CALL_OW 314
71713: OR
71714: IFFALSE 71718
// exit ;
71716: GO 72159
// x := GetX ( enemy_unit ) ;
71718: LD_ADDR_VAR 0 7
71722: PUSH
71723: LD_VAR 0 2
71727: PPUSH
71728: CALL_OW 250
71732: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
71733: LD_ADDR_VAR 0 8
71737: PUSH
71738: LD_VAR 0 2
71742: PPUSH
71743: CALL_OW 251
71747: ST_TO_ADDR
// if not x or not y then
71748: LD_VAR 0 7
71752: NOT
71753: PUSH
71754: LD_VAR 0 8
71758: NOT
71759: OR
71760: IFFALSE 71764
// exit ;
71762: GO 72159
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
71764: LD_ADDR_VAR 0 6
71768: PUSH
71769: LD_VAR 0 7
71773: PPUSH
71774: LD_INT 0
71776: PPUSH
71777: LD_INT 4
71779: PPUSH
71780: CALL_OW 272
71784: PUSH
71785: LD_VAR 0 8
71789: PPUSH
71790: LD_INT 0
71792: PPUSH
71793: LD_INT 4
71795: PPUSH
71796: CALL_OW 273
71800: PUSH
71801: EMPTY
71802: LIST
71803: LIST
71804: PUSH
71805: LD_VAR 0 7
71809: PPUSH
71810: LD_INT 1
71812: PPUSH
71813: LD_INT 4
71815: PPUSH
71816: CALL_OW 272
71820: PUSH
71821: LD_VAR 0 8
71825: PPUSH
71826: LD_INT 1
71828: PPUSH
71829: LD_INT 4
71831: PPUSH
71832: CALL_OW 273
71836: PUSH
71837: EMPTY
71838: LIST
71839: LIST
71840: PUSH
71841: LD_VAR 0 7
71845: PPUSH
71846: LD_INT 2
71848: PPUSH
71849: LD_INT 4
71851: PPUSH
71852: CALL_OW 272
71856: PUSH
71857: LD_VAR 0 8
71861: PPUSH
71862: LD_INT 2
71864: PPUSH
71865: LD_INT 4
71867: PPUSH
71868: CALL_OW 273
71872: PUSH
71873: EMPTY
71874: LIST
71875: LIST
71876: PUSH
71877: LD_VAR 0 7
71881: PPUSH
71882: LD_INT 3
71884: PPUSH
71885: LD_INT 4
71887: PPUSH
71888: CALL_OW 272
71892: PUSH
71893: LD_VAR 0 8
71897: PPUSH
71898: LD_INT 3
71900: PPUSH
71901: LD_INT 4
71903: PPUSH
71904: CALL_OW 273
71908: PUSH
71909: EMPTY
71910: LIST
71911: LIST
71912: PUSH
71913: LD_VAR 0 7
71917: PPUSH
71918: LD_INT 4
71920: PPUSH
71921: LD_INT 4
71923: PPUSH
71924: CALL_OW 272
71928: PUSH
71929: LD_VAR 0 8
71933: PPUSH
71934: LD_INT 4
71936: PPUSH
71937: LD_INT 4
71939: PPUSH
71940: CALL_OW 273
71944: PUSH
71945: EMPTY
71946: LIST
71947: LIST
71948: PUSH
71949: LD_VAR 0 7
71953: PPUSH
71954: LD_INT 5
71956: PPUSH
71957: LD_INT 4
71959: PPUSH
71960: CALL_OW 272
71964: PUSH
71965: LD_VAR 0 8
71969: PPUSH
71970: LD_INT 5
71972: PPUSH
71973: LD_INT 4
71975: PPUSH
71976: CALL_OW 273
71980: PUSH
71981: EMPTY
71982: LIST
71983: LIST
71984: PUSH
71985: EMPTY
71986: LIST
71987: LIST
71988: LIST
71989: LIST
71990: LIST
71991: LIST
71992: ST_TO_ADDR
// for i = tmp downto 1 do
71993: LD_ADDR_VAR 0 4
71997: PUSH
71998: DOUBLE
71999: LD_VAR 0 6
72003: INC
72004: ST_TO_ADDR
72005: LD_INT 1
72007: PUSH
72008: FOR_DOWNTO
72009: IFFALSE 72110
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
72011: LD_VAR 0 6
72015: PUSH
72016: LD_VAR 0 4
72020: ARRAY
72021: PUSH
72022: LD_INT 1
72024: ARRAY
72025: PPUSH
72026: LD_VAR 0 6
72030: PUSH
72031: LD_VAR 0 4
72035: ARRAY
72036: PUSH
72037: LD_INT 2
72039: ARRAY
72040: PPUSH
72041: CALL_OW 488
72045: NOT
72046: PUSH
72047: LD_VAR 0 6
72051: PUSH
72052: LD_VAR 0 4
72056: ARRAY
72057: PUSH
72058: LD_INT 1
72060: ARRAY
72061: PPUSH
72062: LD_VAR 0 6
72066: PUSH
72067: LD_VAR 0 4
72071: ARRAY
72072: PUSH
72073: LD_INT 2
72075: ARRAY
72076: PPUSH
72077: CALL_OW 428
72081: PUSH
72082: LD_INT 0
72084: NONEQUAL
72085: OR
72086: IFFALSE 72108
// tmp := Delete ( tmp , i ) ;
72088: LD_ADDR_VAR 0 6
72092: PUSH
72093: LD_VAR 0 6
72097: PPUSH
72098: LD_VAR 0 4
72102: PPUSH
72103: CALL_OW 3
72107: ST_TO_ADDR
72108: GO 72008
72110: POP
72111: POP
// j := GetClosestHex ( unit , tmp ) ;
72112: LD_ADDR_VAR 0 5
72116: PUSH
72117: LD_VAR 0 1
72121: PPUSH
72122: LD_VAR 0 6
72126: PPUSH
72127: CALL 71412 0 2
72131: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
72132: LD_VAR 0 1
72136: PPUSH
72137: LD_VAR 0 5
72141: PUSH
72142: LD_INT 1
72144: ARRAY
72145: PPUSH
72146: LD_VAR 0 5
72150: PUSH
72151: LD_INT 2
72153: ARRAY
72154: PPUSH
72155: CALL_OW 111
// end ;
72159: LD_VAR 0 3
72163: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
72164: LD_INT 0
72166: PPUSH
72167: PPUSH
72168: PPUSH
// uc_side = 0 ;
72169: LD_ADDR_OWVAR 20
72173: PUSH
72174: LD_INT 0
72176: ST_TO_ADDR
// uc_nation = 0 ;
72177: LD_ADDR_OWVAR 21
72181: PUSH
72182: LD_INT 0
72184: ST_TO_ADDR
// InitHc_All ( ) ;
72185: CALL_OW 584
// InitVc ;
72189: CALL_OW 20
// if mastodonts then
72193: LD_VAR 0 6
72197: IFFALSE 72264
// for i = 1 to mastodonts do
72199: LD_ADDR_VAR 0 11
72203: PUSH
72204: DOUBLE
72205: LD_INT 1
72207: DEC
72208: ST_TO_ADDR
72209: LD_VAR 0 6
72213: PUSH
72214: FOR_TO
72215: IFFALSE 72262
// begin vc_chassis := 31 ;
72217: LD_ADDR_OWVAR 37
72221: PUSH
72222: LD_INT 31
72224: ST_TO_ADDR
// vc_control := control_rider ;
72225: LD_ADDR_OWVAR 38
72229: PUSH
72230: LD_INT 4
72232: ST_TO_ADDR
// animal := CreateVehicle ;
72233: LD_ADDR_VAR 0 12
72237: PUSH
72238: CALL_OW 45
72242: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72243: LD_VAR 0 12
72247: PPUSH
72248: LD_VAR 0 8
72252: PPUSH
72253: LD_INT 0
72255: PPUSH
72256: CALL 74399 0 3
// end ;
72260: GO 72214
72262: POP
72263: POP
// if horses then
72264: LD_VAR 0 5
72268: IFFALSE 72335
// for i = 1 to horses do
72270: LD_ADDR_VAR 0 11
72274: PUSH
72275: DOUBLE
72276: LD_INT 1
72278: DEC
72279: ST_TO_ADDR
72280: LD_VAR 0 5
72284: PUSH
72285: FOR_TO
72286: IFFALSE 72333
// begin hc_class := 21 ;
72288: LD_ADDR_OWVAR 28
72292: PUSH
72293: LD_INT 21
72295: ST_TO_ADDR
// hc_gallery :=  ;
72296: LD_ADDR_OWVAR 33
72300: PUSH
72301: LD_STRING 
72303: ST_TO_ADDR
// animal := CreateHuman ;
72304: LD_ADDR_VAR 0 12
72308: PUSH
72309: CALL_OW 44
72313: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72314: LD_VAR 0 12
72318: PPUSH
72319: LD_VAR 0 8
72323: PPUSH
72324: LD_INT 0
72326: PPUSH
72327: CALL 74399 0 3
// end ;
72331: GO 72285
72333: POP
72334: POP
// if birds then
72335: LD_VAR 0 1
72339: IFFALSE 72406
// for i = 1 to birds do
72341: LD_ADDR_VAR 0 11
72345: PUSH
72346: DOUBLE
72347: LD_INT 1
72349: DEC
72350: ST_TO_ADDR
72351: LD_VAR 0 1
72355: PUSH
72356: FOR_TO
72357: IFFALSE 72404
// begin hc_class = 18 ;
72359: LD_ADDR_OWVAR 28
72363: PUSH
72364: LD_INT 18
72366: ST_TO_ADDR
// hc_gallery =  ;
72367: LD_ADDR_OWVAR 33
72371: PUSH
72372: LD_STRING 
72374: ST_TO_ADDR
// animal := CreateHuman ;
72375: LD_ADDR_VAR 0 12
72379: PUSH
72380: CALL_OW 44
72384: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72385: LD_VAR 0 12
72389: PPUSH
72390: LD_VAR 0 8
72394: PPUSH
72395: LD_INT 0
72397: PPUSH
72398: CALL 74399 0 3
// end ;
72402: GO 72356
72404: POP
72405: POP
// if tigers then
72406: LD_VAR 0 2
72410: IFFALSE 72494
// for i = 1 to tigers do
72412: LD_ADDR_VAR 0 11
72416: PUSH
72417: DOUBLE
72418: LD_INT 1
72420: DEC
72421: ST_TO_ADDR
72422: LD_VAR 0 2
72426: PUSH
72427: FOR_TO
72428: IFFALSE 72492
// begin hc_class = class_tiger ;
72430: LD_ADDR_OWVAR 28
72434: PUSH
72435: LD_INT 14
72437: ST_TO_ADDR
// hc_gallery =  ;
72438: LD_ADDR_OWVAR 33
72442: PUSH
72443: LD_STRING 
72445: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
72446: LD_ADDR_OWVAR 35
72450: PUSH
72451: LD_INT 7
72453: NEG
72454: PPUSH
72455: LD_INT 7
72457: PPUSH
72458: CALL_OW 12
72462: ST_TO_ADDR
// animal := CreateHuman ;
72463: LD_ADDR_VAR 0 12
72467: PUSH
72468: CALL_OW 44
72472: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72473: LD_VAR 0 12
72477: PPUSH
72478: LD_VAR 0 8
72482: PPUSH
72483: LD_INT 0
72485: PPUSH
72486: CALL 74399 0 3
// end ;
72490: GO 72427
72492: POP
72493: POP
// if apemans then
72494: LD_VAR 0 3
72498: IFFALSE 72621
// for i = 1 to apemans do
72500: LD_ADDR_VAR 0 11
72504: PUSH
72505: DOUBLE
72506: LD_INT 1
72508: DEC
72509: ST_TO_ADDR
72510: LD_VAR 0 3
72514: PUSH
72515: FOR_TO
72516: IFFALSE 72619
// begin hc_class = class_apeman ;
72518: LD_ADDR_OWVAR 28
72522: PUSH
72523: LD_INT 12
72525: ST_TO_ADDR
// hc_gallery =  ;
72526: LD_ADDR_OWVAR 33
72530: PUSH
72531: LD_STRING 
72533: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
72534: LD_ADDR_OWVAR 35
72538: PUSH
72539: LD_INT 2
72541: NEG
72542: PPUSH
72543: LD_INT 2
72545: PPUSH
72546: CALL_OW 12
72550: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
72551: LD_ADDR_OWVAR 31
72555: PUSH
72556: LD_INT 1
72558: PPUSH
72559: LD_INT 3
72561: PPUSH
72562: CALL_OW 12
72566: PUSH
72567: LD_INT 1
72569: PPUSH
72570: LD_INT 3
72572: PPUSH
72573: CALL_OW 12
72577: PUSH
72578: LD_INT 0
72580: PUSH
72581: LD_INT 0
72583: PUSH
72584: EMPTY
72585: LIST
72586: LIST
72587: LIST
72588: LIST
72589: ST_TO_ADDR
// animal := CreateHuman ;
72590: LD_ADDR_VAR 0 12
72594: PUSH
72595: CALL_OW 44
72599: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72600: LD_VAR 0 12
72604: PPUSH
72605: LD_VAR 0 8
72609: PPUSH
72610: LD_INT 0
72612: PPUSH
72613: CALL 74399 0 3
// end ;
72617: GO 72515
72619: POP
72620: POP
// if enchidnas then
72621: LD_VAR 0 4
72625: IFFALSE 72692
// for i = 1 to enchidnas do
72627: LD_ADDR_VAR 0 11
72631: PUSH
72632: DOUBLE
72633: LD_INT 1
72635: DEC
72636: ST_TO_ADDR
72637: LD_VAR 0 4
72641: PUSH
72642: FOR_TO
72643: IFFALSE 72690
// begin hc_class = 13 ;
72645: LD_ADDR_OWVAR 28
72649: PUSH
72650: LD_INT 13
72652: ST_TO_ADDR
// hc_gallery =  ;
72653: LD_ADDR_OWVAR 33
72657: PUSH
72658: LD_STRING 
72660: ST_TO_ADDR
// animal := CreateHuman ;
72661: LD_ADDR_VAR 0 12
72665: PUSH
72666: CALL_OW 44
72670: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72671: LD_VAR 0 12
72675: PPUSH
72676: LD_VAR 0 8
72680: PPUSH
72681: LD_INT 0
72683: PPUSH
72684: CALL 74399 0 3
// end ;
72688: GO 72642
72690: POP
72691: POP
// if fishes then
72692: LD_VAR 0 7
72696: IFFALSE 72763
// for i = 1 to fishes do
72698: LD_ADDR_VAR 0 11
72702: PUSH
72703: DOUBLE
72704: LD_INT 1
72706: DEC
72707: ST_TO_ADDR
72708: LD_VAR 0 7
72712: PUSH
72713: FOR_TO
72714: IFFALSE 72761
// begin hc_class = 20 ;
72716: LD_ADDR_OWVAR 28
72720: PUSH
72721: LD_INT 20
72723: ST_TO_ADDR
// hc_gallery =  ;
72724: LD_ADDR_OWVAR 33
72728: PUSH
72729: LD_STRING 
72731: ST_TO_ADDR
// animal := CreateHuman ;
72732: LD_ADDR_VAR 0 12
72736: PUSH
72737: CALL_OW 44
72741: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
72742: LD_VAR 0 12
72746: PPUSH
72747: LD_VAR 0 9
72751: PPUSH
72752: LD_INT 0
72754: PPUSH
72755: CALL 74399 0 3
// end ;
72759: GO 72713
72761: POP
72762: POP
// end ;
72763: LD_VAR 0 10
72767: RET
// export function WantHeal ( sci , unit ) ; begin
72768: LD_INT 0
72770: PPUSH
// if GetTaskList ( sci ) > 0 then
72771: LD_VAR 0 1
72775: PPUSH
72776: CALL_OW 437
72780: PUSH
72781: LD_INT 0
72783: GREATER
72784: IFFALSE 72854
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
72786: LD_VAR 0 1
72790: PPUSH
72791: CALL_OW 437
72795: PUSH
72796: LD_INT 1
72798: ARRAY
72799: PUSH
72800: LD_INT 1
72802: ARRAY
72803: PUSH
72804: LD_STRING l
72806: EQUAL
72807: PUSH
72808: LD_VAR 0 1
72812: PPUSH
72813: CALL_OW 437
72817: PUSH
72818: LD_INT 1
72820: ARRAY
72821: PUSH
72822: LD_INT 4
72824: ARRAY
72825: PUSH
72826: LD_VAR 0 2
72830: EQUAL
72831: AND
72832: IFFALSE 72844
// result := true else
72834: LD_ADDR_VAR 0 3
72838: PUSH
72839: LD_INT 1
72841: ST_TO_ADDR
72842: GO 72852
// result := false ;
72844: LD_ADDR_VAR 0 3
72848: PUSH
72849: LD_INT 0
72851: ST_TO_ADDR
// end else
72852: GO 72862
// result := false ;
72854: LD_ADDR_VAR 0 3
72858: PUSH
72859: LD_INT 0
72861: ST_TO_ADDR
// end ;
72862: LD_VAR 0 3
72866: RET
// export function HealTarget ( sci ) ; begin
72867: LD_INT 0
72869: PPUSH
// if not sci then
72870: LD_VAR 0 1
72874: NOT
72875: IFFALSE 72879
// exit ;
72877: GO 72944
// result := 0 ;
72879: LD_ADDR_VAR 0 2
72883: PUSH
72884: LD_INT 0
72886: ST_TO_ADDR
// if GetTaskList ( sci ) then
72887: LD_VAR 0 1
72891: PPUSH
72892: CALL_OW 437
72896: IFFALSE 72944
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
72898: LD_VAR 0 1
72902: PPUSH
72903: CALL_OW 437
72907: PUSH
72908: LD_INT 1
72910: ARRAY
72911: PUSH
72912: LD_INT 1
72914: ARRAY
72915: PUSH
72916: LD_STRING l
72918: EQUAL
72919: IFFALSE 72944
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
72921: LD_ADDR_VAR 0 2
72925: PUSH
72926: LD_VAR 0 1
72930: PPUSH
72931: CALL_OW 437
72935: PUSH
72936: LD_INT 1
72938: ARRAY
72939: PUSH
72940: LD_INT 4
72942: ARRAY
72943: ST_TO_ADDR
// end ;
72944: LD_VAR 0 2
72948: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
72949: LD_INT 0
72951: PPUSH
72952: PPUSH
72953: PPUSH
72954: PPUSH
// if not base_units then
72955: LD_VAR 0 1
72959: NOT
72960: IFFALSE 72964
// exit ;
72962: GO 73051
// result := false ;
72964: LD_ADDR_VAR 0 2
72968: PUSH
72969: LD_INT 0
72971: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
72972: LD_ADDR_VAR 0 5
72976: PUSH
72977: LD_VAR 0 1
72981: PPUSH
72982: LD_INT 21
72984: PUSH
72985: LD_INT 3
72987: PUSH
72988: EMPTY
72989: LIST
72990: LIST
72991: PPUSH
72992: CALL_OW 72
72996: ST_TO_ADDR
// if not tmp then
72997: LD_VAR 0 5
73001: NOT
73002: IFFALSE 73006
// exit ;
73004: GO 73051
// for i in tmp do
73006: LD_ADDR_VAR 0 3
73010: PUSH
73011: LD_VAR 0 5
73015: PUSH
73016: FOR_IN
73017: IFFALSE 73049
// begin result := EnemyInRange ( i , 22 ) ;
73019: LD_ADDR_VAR 0 2
73023: PUSH
73024: LD_VAR 0 3
73028: PPUSH
73029: LD_INT 22
73031: PPUSH
73032: CALL 71287 0 2
73036: ST_TO_ADDR
// if result then
73037: LD_VAR 0 2
73041: IFFALSE 73047
// exit ;
73043: POP
73044: POP
73045: GO 73051
// end ;
73047: GO 73016
73049: POP
73050: POP
// end ;
73051: LD_VAR 0 2
73055: RET
// export function FilterByTag ( units , tag ) ; begin
73056: LD_INT 0
73058: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
73059: LD_ADDR_VAR 0 3
73063: PUSH
73064: LD_VAR 0 1
73068: PPUSH
73069: LD_INT 120
73071: PUSH
73072: LD_VAR 0 2
73076: PUSH
73077: EMPTY
73078: LIST
73079: LIST
73080: PPUSH
73081: CALL_OW 72
73085: ST_TO_ADDR
// end ;
73086: LD_VAR 0 3
73090: RET
// export function IsDriver ( un ) ; begin
73091: LD_INT 0
73093: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
73094: LD_ADDR_VAR 0 2
73098: PUSH
73099: LD_VAR 0 1
73103: PUSH
73104: LD_INT 55
73106: PUSH
73107: EMPTY
73108: LIST
73109: PPUSH
73110: CALL_OW 69
73114: IN
73115: ST_TO_ADDR
// end ;
73116: LD_VAR 0 2
73120: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
73121: LD_INT 0
73123: PPUSH
73124: PPUSH
// list := [ ] ;
73125: LD_ADDR_VAR 0 5
73129: PUSH
73130: EMPTY
73131: ST_TO_ADDR
// case d of 0 :
73132: LD_VAR 0 3
73136: PUSH
73137: LD_INT 0
73139: DOUBLE
73140: EQUAL
73141: IFTRUE 73145
73143: GO 73278
73145: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
73146: LD_ADDR_VAR 0 5
73150: PUSH
73151: LD_VAR 0 1
73155: PUSH
73156: LD_INT 4
73158: MINUS
73159: PUSH
73160: LD_VAR 0 2
73164: PUSH
73165: LD_INT 4
73167: MINUS
73168: PUSH
73169: LD_INT 2
73171: PUSH
73172: EMPTY
73173: LIST
73174: LIST
73175: LIST
73176: PUSH
73177: LD_VAR 0 1
73181: PUSH
73182: LD_INT 3
73184: MINUS
73185: PUSH
73186: LD_VAR 0 2
73190: PUSH
73191: LD_INT 1
73193: PUSH
73194: EMPTY
73195: LIST
73196: LIST
73197: LIST
73198: PUSH
73199: LD_VAR 0 1
73203: PUSH
73204: LD_INT 4
73206: PLUS
73207: PUSH
73208: LD_VAR 0 2
73212: PUSH
73213: LD_INT 4
73215: PUSH
73216: EMPTY
73217: LIST
73218: LIST
73219: LIST
73220: PUSH
73221: LD_VAR 0 1
73225: PUSH
73226: LD_INT 3
73228: PLUS
73229: PUSH
73230: LD_VAR 0 2
73234: PUSH
73235: LD_INT 3
73237: PLUS
73238: PUSH
73239: LD_INT 5
73241: PUSH
73242: EMPTY
73243: LIST
73244: LIST
73245: LIST
73246: PUSH
73247: LD_VAR 0 1
73251: PUSH
73252: LD_VAR 0 2
73256: PUSH
73257: LD_INT 4
73259: PLUS
73260: PUSH
73261: LD_INT 0
73263: PUSH
73264: EMPTY
73265: LIST
73266: LIST
73267: LIST
73268: PUSH
73269: EMPTY
73270: LIST
73271: LIST
73272: LIST
73273: LIST
73274: LIST
73275: ST_TO_ADDR
// end ; 1 :
73276: GO 73976
73278: LD_INT 1
73280: DOUBLE
73281: EQUAL
73282: IFTRUE 73286
73284: GO 73419
73286: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
73287: LD_ADDR_VAR 0 5
73291: PUSH
73292: LD_VAR 0 1
73296: PUSH
73297: LD_VAR 0 2
73301: PUSH
73302: LD_INT 4
73304: MINUS
73305: PUSH
73306: LD_INT 3
73308: PUSH
73309: EMPTY
73310: LIST
73311: LIST
73312: LIST
73313: PUSH
73314: LD_VAR 0 1
73318: PUSH
73319: LD_INT 3
73321: MINUS
73322: PUSH
73323: LD_VAR 0 2
73327: PUSH
73328: LD_INT 3
73330: MINUS
73331: PUSH
73332: LD_INT 2
73334: PUSH
73335: EMPTY
73336: LIST
73337: LIST
73338: LIST
73339: PUSH
73340: LD_VAR 0 1
73344: PUSH
73345: LD_INT 4
73347: MINUS
73348: PUSH
73349: LD_VAR 0 2
73353: PUSH
73354: LD_INT 1
73356: PUSH
73357: EMPTY
73358: LIST
73359: LIST
73360: LIST
73361: PUSH
73362: LD_VAR 0 1
73366: PUSH
73367: LD_VAR 0 2
73371: PUSH
73372: LD_INT 3
73374: PLUS
73375: PUSH
73376: LD_INT 0
73378: PUSH
73379: EMPTY
73380: LIST
73381: LIST
73382: LIST
73383: PUSH
73384: LD_VAR 0 1
73388: PUSH
73389: LD_INT 4
73391: PLUS
73392: PUSH
73393: LD_VAR 0 2
73397: PUSH
73398: LD_INT 4
73400: PLUS
73401: PUSH
73402: LD_INT 5
73404: PUSH
73405: EMPTY
73406: LIST
73407: LIST
73408: LIST
73409: PUSH
73410: EMPTY
73411: LIST
73412: LIST
73413: LIST
73414: LIST
73415: LIST
73416: ST_TO_ADDR
// end ; 2 :
73417: GO 73976
73419: LD_INT 2
73421: DOUBLE
73422: EQUAL
73423: IFTRUE 73427
73425: GO 73556
73427: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
73428: LD_ADDR_VAR 0 5
73432: PUSH
73433: LD_VAR 0 1
73437: PUSH
73438: LD_VAR 0 2
73442: PUSH
73443: LD_INT 3
73445: MINUS
73446: PUSH
73447: LD_INT 3
73449: PUSH
73450: EMPTY
73451: LIST
73452: LIST
73453: LIST
73454: PUSH
73455: LD_VAR 0 1
73459: PUSH
73460: LD_INT 4
73462: PLUS
73463: PUSH
73464: LD_VAR 0 2
73468: PUSH
73469: LD_INT 4
73471: PUSH
73472: EMPTY
73473: LIST
73474: LIST
73475: LIST
73476: PUSH
73477: LD_VAR 0 1
73481: PUSH
73482: LD_VAR 0 2
73486: PUSH
73487: LD_INT 4
73489: PLUS
73490: PUSH
73491: LD_INT 0
73493: PUSH
73494: EMPTY
73495: LIST
73496: LIST
73497: LIST
73498: PUSH
73499: LD_VAR 0 1
73503: PUSH
73504: LD_INT 3
73506: MINUS
73507: PUSH
73508: LD_VAR 0 2
73512: PUSH
73513: LD_INT 1
73515: PUSH
73516: EMPTY
73517: LIST
73518: LIST
73519: LIST
73520: PUSH
73521: LD_VAR 0 1
73525: PUSH
73526: LD_INT 4
73528: MINUS
73529: PUSH
73530: LD_VAR 0 2
73534: PUSH
73535: LD_INT 4
73537: MINUS
73538: PUSH
73539: LD_INT 2
73541: PUSH
73542: EMPTY
73543: LIST
73544: LIST
73545: LIST
73546: PUSH
73547: EMPTY
73548: LIST
73549: LIST
73550: LIST
73551: LIST
73552: LIST
73553: ST_TO_ADDR
// end ; 3 :
73554: GO 73976
73556: LD_INT 3
73558: DOUBLE
73559: EQUAL
73560: IFTRUE 73564
73562: GO 73697
73564: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
73565: LD_ADDR_VAR 0 5
73569: PUSH
73570: LD_VAR 0 1
73574: PUSH
73575: LD_INT 3
73577: PLUS
73578: PUSH
73579: LD_VAR 0 2
73583: PUSH
73584: LD_INT 4
73586: PUSH
73587: EMPTY
73588: LIST
73589: LIST
73590: LIST
73591: PUSH
73592: LD_VAR 0 1
73596: PUSH
73597: LD_INT 4
73599: PLUS
73600: PUSH
73601: LD_VAR 0 2
73605: PUSH
73606: LD_INT 4
73608: PLUS
73609: PUSH
73610: LD_INT 5
73612: PUSH
73613: EMPTY
73614: LIST
73615: LIST
73616: LIST
73617: PUSH
73618: LD_VAR 0 1
73622: PUSH
73623: LD_INT 4
73625: MINUS
73626: PUSH
73627: LD_VAR 0 2
73631: PUSH
73632: LD_INT 1
73634: PUSH
73635: EMPTY
73636: LIST
73637: LIST
73638: LIST
73639: PUSH
73640: LD_VAR 0 1
73644: PUSH
73645: LD_VAR 0 2
73649: PUSH
73650: LD_INT 4
73652: MINUS
73653: PUSH
73654: LD_INT 3
73656: PUSH
73657: EMPTY
73658: LIST
73659: LIST
73660: LIST
73661: PUSH
73662: LD_VAR 0 1
73666: PUSH
73667: LD_INT 3
73669: MINUS
73670: PUSH
73671: LD_VAR 0 2
73675: PUSH
73676: LD_INT 3
73678: MINUS
73679: PUSH
73680: LD_INT 2
73682: PUSH
73683: EMPTY
73684: LIST
73685: LIST
73686: LIST
73687: PUSH
73688: EMPTY
73689: LIST
73690: LIST
73691: LIST
73692: LIST
73693: LIST
73694: ST_TO_ADDR
// end ; 4 :
73695: GO 73976
73697: LD_INT 4
73699: DOUBLE
73700: EQUAL
73701: IFTRUE 73705
73703: GO 73838
73705: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
73706: LD_ADDR_VAR 0 5
73710: PUSH
73711: LD_VAR 0 1
73715: PUSH
73716: LD_VAR 0 2
73720: PUSH
73721: LD_INT 4
73723: PLUS
73724: PUSH
73725: LD_INT 0
73727: PUSH
73728: EMPTY
73729: LIST
73730: LIST
73731: LIST
73732: PUSH
73733: LD_VAR 0 1
73737: PUSH
73738: LD_INT 3
73740: PLUS
73741: PUSH
73742: LD_VAR 0 2
73746: PUSH
73747: LD_INT 3
73749: PLUS
73750: PUSH
73751: LD_INT 5
73753: PUSH
73754: EMPTY
73755: LIST
73756: LIST
73757: LIST
73758: PUSH
73759: LD_VAR 0 1
73763: PUSH
73764: LD_INT 4
73766: PLUS
73767: PUSH
73768: LD_VAR 0 2
73772: PUSH
73773: LD_INT 4
73775: PUSH
73776: EMPTY
73777: LIST
73778: LIST
73779: LIST
73780: PUSH
73781: LD_VAR 0 1
73785: PUSH
73786: LD_VAR 0 2
73790: PUSH
73791: LD_INT 3
73793: MINUS
73794: PUSH
73795: LD_INT 3
73797: PUSH
73798: EMPTY
73799: LIST
73800: LIST
73801: LIST
73802: PUSH
73803: LD_VAR 0 1
73807: PUSH
73808: LD_INT 4
73810: MINUS
73811: PUSH
73812: LD_VAR 0 2
73816: PUSH
73817: LD_INT 4
73819: MINUS
73820: PUSH
73821: LD_INT 2
73823: PUSH
73824: EMPTY
73825: LIST
73826: LIST
73827: LIST
73828: PUSH
73829: EMPTY
73830: LIST
73831: LIST
73832: LIST
73833: LIST
73834: LIST
73835: ST_TO_ADDR
// end ; 5 :
73836: GO 73976
73838: LD_INT 5
73840: DOUBLE
73841: EQUAL
73842: IFTRUE 73846
73844: GO 73975
73846: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
73847: LD_ADDR_VAR 0 5
73851: PUSH
73852: LD_VAR 0 1
73856: PUSH
73857: LD_INT 4
73859: MINUS
73860: PUSH
73861: LD_VAR 0 2
73865: PUSH
73866: LD_INT 1
73868: PUSH
73869: EMPTY
73870: LIST
73871: LIST
73872: LIST
73873: PUSH
73874: LD_VAR 0 1
73878: PUSH
73879: LD_VAR 0 2
73883: PUSH
73884: LD_INT 4
73886: MINUS
73887: PUSH
73888: LD_INT 3
73890: PUSH
73891: EMPTY
73892: LIST
73893: LIST
73894: LIST
73895: PUSH
73896: LD_VAR 0 1
73900: PUSH
73901: LD_INT 4
73903: PLUS
73904: PUSH
73905: LD_VAR 0 2
73909: PUSH
73910: LD_INT 4
73912: PLUS
73913: PUSH
73914: LD_INT 5
73916: PUSH
73917: EMPTY
73918: LIST
73919: LIST
73920: LIST
73921: PUSH
73922: LD_VAR 0 1
73926: PUSH
73927: LD_INT 3
73929: PLUS
73930: PUSH
73931: LD_VAR 0 2
73935: PUSH
73936: LD_INT 4
73938: PUSH
73939: EMPTY
73940: LIST
73941: LIST
73942: LIST
73943: PUSH
73944: LD_VAR 0 1
73948: PUSH
73949: LD_VAR 0 2
73953: PUSH
73954: LD_INT 3
73956: PLUS
73957: PUSH
73958: LD_INT 0
73960: PUSH
73961: EMPTY
73962: LIST
73963: LIST
73964: LIST
73965: PUSH
73966: EMPTY
73967: LIST
73968: LIST
73969: LIST
73970: LIST
73971: LIST
73972: ST_TO_ADDR
// end ; end ;
73973: GO 73976
73975: POP
// result := list ;
73976: LD_ADDR_VAR 0 4
73980: PUSH
73981: LD_VAR 0 5
73985: ST_TO_ADDR
// end ;
73986: LD_VAR 0 4
73990: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
73991: LD_INT 0
73993: PPUSH
73994: PPUSH
73995: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
73996: LD_VAR 0 1
74000: NOT
74001: PUSH
74002: LD_VAR 0 2
74006: PUSH
74007: LD_INT 1
74009: PUSH
74010: LD_INT 2
74012: PUSH
74013: LD_INT 3
74015: PUSH
74016: LD_INT 4
74018: PUSH
74019: EMPTY
74020: LIST
74021: LIST
74022: LIST
74023: LIST
74024: IN
74025: NOT
74026: OR
74027: IFFALSE 74031
// exit ;
74029: GO 74123
// tmp := [ ] ;
74031: LD_ADDR_VAR 0 5
74035: PUSH
74036: EMPTY
74037: ST_TO_ADDR
// for i in units do
74038: LD_ADDR_VAR 0 4
74042: PUSH
74043: LD_VAR 0 1
74047: PUSH
74048: FOR_IN
74049: IFFALSE 74092
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
74051: LD_ADDR_VAR 0 5
74055: PUSH
74056: LD_VAR 0 5
74060: PPUSH
74061: LD_VAR 0 5
74065: PUSH
74066: LD_INT 1
74068: PLUS
74069: PPUSH
74070: LD_VAR 0 4
74074: PPUSH
74075: LD_VAR 0 2
74079: PPUSH
74080: CALL_OW 259
74084: PPUSH
74085: CALL_OW 2
74089: ST_TO_ADDR
74090: GO 74048
74092: POP
74093: POP
// if not tmp then
74094: LD_VAR 0 5
74098: NOT
74099: IFFALSE 74103
// exit ;
74101: GO 74123
// result := SortListByListDesc ( units , tmp ) ;
74103: LD_ADDR_VAR 0 3
74107: PUSH
74108: LD_VAR 0 1
74112: PPUSH
74113: LD_VAR 0 5
74117: PPUSH
74118: CALL_OW 77
74122: ST_TO_ADDR
// end ;
74123: LD_VAR 0 3
74127: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
74128: LD_INT 0
74130: PPUSH
74131: PPUSH
74132: PPUSH
// result := false ;
74133: LD_ADDR_VAR 0 3
74137: PUSH
74138: LD_INT 0
74140: ST_TO_ADDR
// x := GetX ( building ) ;
74141: LD_ADDR_VAR 0 4
74145: PUSH
74146: LD_VAR 0 2
74150: PPUSH
74151: CALL_OW 250
74155: ST_TO_ADDR
// y := GetY ( building ) ;
74156: LD_ADDR_VAR 0 5
74160: PUSH
74161: LD_VAR 0 2
74165: PPUSH
74166: CALL_OW 251
74170: ST_TO_ADDR
// if not building or not x or not y then
74171: LD_VAR 0 2
74175: NOT
74176: PUSH
74177: LD_VAR 0 4
74181: NOT
74182: OR
74183: PUSH
74184: LD_VAR 0 5
74188: NOT
74189: OR
74190: IFFALSE 74194
// exit ;
74192: GO 74286
// if GetTaskList ( unit ) then
74194: LD_VAR 0 1
74198: PPUSH
74199: CALL_OW 437
74203: IFFALSE 74286
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74205: LD_STRING e
74207: PUSH
74208: LD_VAR 0 1
74212: PPUSH
74213: CALL_OW 437
74217: PUSH
74218: LD_INT 1
74220: ARRAY
74221: PUSH
74222: LD_INT 1
74224: ARRAY
74225: EQUAL
74226: PUSH
74227: LD_VAR 0 4
74231: PUSH
74232: LD_VAR 0 1
74236: PPUSH
74237: CALL_OW 437
74241: PUSH
74242: LD_INT 1
74244: ARRAY
74245: PUSH
74246: LD_INT 2
74248: ARRAY
74249: EQUAL
74250: AND
74251: PUSH
74252: LD_VAR 0 5
74256: PUSH
74257: LD_VAR 0 1
74261: PPUSH
74262: CALL_OW 437
74266: PUSH
74267: LD_INT 1
74269: ARRAY
74270: PUSH
74271: LD_INT 3
74273: ARRAY
74274: EQUAL
74275: AND
74276: IFFALSE 74286
// result := true end ;
74278: LD_ADDR_VAR 0 3
74282: PUSH
74283: LD_INT 1
74285: ST_TO_ADDR
// end ;
74286: LD_VAR 0 3
74290: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
74291: LD_INT 0
74293: PPUSH
// result := false ;
74294: LD_ADDR_VAR 0 4
74298: PUSH
74299: LD_INT 0
74301: ST_TO_ADDR
// if GetTaskList ( unit ) then
74302: LD_VAR 0 1
74306: PPUSH
74307: CALL_OW 437
74311: IFFALSE 74394
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74313: LD_STRING M
74315: PUSH
74316: LD_VAR 0 1
74320: PPUSH
74321: CALL_OW 437
74325: PUSH
74326: LD_INT 1
74328: ARRAY
74329: PUSH
74330: LD_INT 1
74332: ARRAY
74333: EQUAL
74334: PUSH
74335: LD_VAR 0 2
74339: PUSH
74340: LD_VAR 0 1
74344: PPUSH
74345: CALL_OW 437
74349: PUSH
74350: LD_INT 1
74352: ARRAY
74353: PUSH
74354: LD_INT 2
74356: ARRAY
74357: EQUAL
74358: AND
74359: PUSH
74360: LD_VAR 0 3
74364: PUSH
74365: LD_VAR 0 1
74369: PPUSH
74370: CALL_OW 437
74374: PUSH
74375: LD_INT 1
74377: ARRAY
74378: PUSH
74379: LD_INT 3
74381: ARRAY
74382: EQUAL
74383: AND
74384: IFFALSE 74394
// result := true ;
74386: LD_ADDR_VAR 0 4
74390: PUSH
74391: LD_INT 1
74393: ST_TO_ADDR
// end ; end ;
74394: LD_VAR 0 4
74398: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
74399: LD_INT 0
74401: PPUSH
74402: PPUSH
74403: PPUSH
74404: PPUSH
// if not unit or not area then
74405: LD_VAR 0 1
74409: NOT
74410: PUSH
74411: LD_VAR 0 2
74415: NOT
74416: OR
74417: IFFALSE 74421
// exit ;
74419: GO 74585
// tmp := AreaToList ( area , i ) ;
74421: LD_ADDR_VAR 0 6
74425: PUSH
74426: LD_VAR 0 2
74430: PPUSH
74431: LD_VAR 0 5
74435: PPUSH
74436: CALL_OW 517
74440: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
74441: LD_ADDR_VAR 0 5
74445: PUSH
74446: DOUBLE
74447: LD_INT 1
74449: DEC
74450: ST_TO_ADDR
74451: LD_VAR 0 6
74455: PUSH
74456: LD_INT 1
74458: ARRAY
74459: PUSH
74460: FOR_TO
74461: IFFALSE 74583
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
74463: LD_ADDR_VAR 0 7
74467: PUSH
74468: LD_VAR 0 6
74472: PUSH
74473: LD_INT 1
74475: ARRAY
74476: PUSH
74477: LD_VAR 0 5
74481: ARRAY
74482: PUSH
74483: LD_VAR 0 6
74487: PUSH
74488: LD_INT 2
74490: ARRAY
74491: PUSH
74492: LD_VAR 0 5
74496: ARRAY
74497: PUSH
74498: EMPTY
74499: LIST
74500: LIST
74501: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
74502: LD_VAR 0 7
74506: PUSH
74507: LD_INT 1
74509: ARRAY
74510: PPUSH
74511: LD_VAR 0 7
74515: PUSH
74516: LD_INT 2
74518: ARRAY
74519: PPUSH
74520: CALL_OW 428
74524: PUSH
74525: LD_INT 0
74527: EQUAL
74528: IFFALSE 74581
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
74530: LD_VAR 0 1
74534: PPUSH
74535: LD_VAR 0 7
74539: PUSH
74540: LD_INT 1
74542: ARRAY
74543: PPUSH
74544: LD_VAR 0 7
74548: PUSH
74549: LD_INT 2
74551: ARRAY
74552: PPUSH
74553: LD_VAR 0 3
74557: PPUSH
74558: CALL_OW 48
// result := IsPlaced ( unit ) ;
74562: LD_ADDR_VAR 0 4
74566: PUSH
74567: LD_VAR 0 1
74571: PPUSH
74572: CALL_OW 305
74576: ST_TO_ADDR
// exit ;
74577: POP
74578: POP
74579: GO 74585
// end ; end ;
74581: GO 74460
74583: POP
74584: POP
// end ;
74585: LD_VAR 0 4
74589: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
74590: LD_INT 0
74592: PPUSH
74593: PPUSH
74594: PPUSH
// if not side or side > 8 then
74595: LD_VAR 0 1
74599: NOT
74600: PUSH
74601: LD_VAR 0 1
74605: PUSH
74606: LD_INT 8
74608: GREATER
74609: OR
74610: IFFALSE 74614
// exit ;
74612: GO 74801
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
74614: LD_ADDR_VAR 0 4
74618: PUSH
74619: LD_INT 22
74621: PUSH
74622: LD_VAR 0 1
74626: PUSH
74627: EMPTY
74628: LIST
74629: LIST
74630: PUSH
74631: LD_INT 21
74633: PUSH
74634: LD_INT 3
74636: PUSH
74637: EMPTY
74638: LIST
74639: LIST
74640: PUSH
74641: EMPTY
74642: LIST
74643: LIST
74644: PPUSH
74645: CALL_OW 69
74649: ST_TO_ADDR
// if not tmp then
74650: LD_VAR 0 4
74654: NOT
74655: IFFALSE 74659
// exit ;
74657: GO 74801
// enable_addtolog := true ;
74659: LD_ADDR_OWVAR 81
74663: PUSH
74664: LD_INT 1
74666: ST_TO_ADDR
// AddToLog ( [ ) ;
74667: LD_STRING [
74669: PPUSH
74670: CALL_OW 561
// for i in tmp do
74674: LD_ADDR_VAR 0 3
74678: PUSH
74679: LD_VAR 0 4
74683: PUSH
74684: FOR_IN
74685: IFFALSE 74792
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
74687: LD_STRING [
74689: PUSH
74690: LD_VAR 0 3
74694: PPUSH
74695: CALL_OW 266
74699: STR
74700: PUSH
74701: LD_STRING , 
74703: STR
74704: PUSH
74705: LD_VAR 0 3
74709: PPUSH
74710: CALL_OW 250
74714: STR
74715: PUSH
74716: LD_STRING , 
74718: STR
74719: PUSH
74720: LD_VAR 0 3
74724: PPUSH
74725: CALL_OW 251
74729: STR
74730: PUSH
74731: LD_STRING , 
74733: STR
74734: PUSH
74735: LD_VAR 0 3
74739: PPUSH
74740: CALL_OW 254
74744: STR
74745: PUSH
74746: LD_STRING , 
74748: STR
74749: PUSH
74750: LD_VAR 0 3
74754: PPUSH
74755: LD_INT 1
74757: PPUSH
74758: CALL_OW 268
74762: STR
74763: PUSH
74764: LD_STRING , 
74766: STR
74767: PUSH
74768: LD_VAR 0 3
74772: PPUSH
74773: LD_INT 2
74775: PPUSH
74776: CALL_OW 268
74780: STR
74781: PUSH
74782: LD_STRING ],
74784: STR
74785: PPUSH
74786: CALL_OW 561
// end ;
74790: GO 74684
74792: POP
74793: POP
// AddToLog ( ]; ) ;
74794: LD_STRING ];
74796: PPUSH
74797: CALL_OW 561
// end ;
74801: LD_VAR 0 2
74805: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
74806: LD_INT 0
74808: PPUSH
74809: PPUSH
74810: PPUSH
74811: PPUSH
74812: PPUSH
// if not area or not rate or not max then
74813: LD_VAR 0 1
74817: NOT
74818: PUSH
74819: LD_VAR 0 2
74823: NOT
74824: OR
74825: PUSH
74826: LD_VAR 0 4
74830: NOT
74831: OR
74832: IFFALSE 74836
// exit ;
74834: GO 75025
// while 1 do
74836: LD_INT 1
74838: IFFALSE 75025
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
74840: LD_ADDR_VAR 0 9
74844: PUSH
74845: LD_VAR 0 1
74849: PPUSH
74850: LD_INT 1
74852: PPUSH
74853: CALL_OW 287
74857: PUSH
74858: LD_INT 10
74860: MUL
74861: ST_TO_ADDR
// r := rate / 10 ;
74862: LD_ADDR_VAR 0 7
74866: PUSH
74867: LD_VAR 0 2
74871: PUSH
74872: LD_INT 10
74874: DIVREAL
74875: ST_TO_ADDR
// time := 1 1$00 ;
74876: LD_ADDR_VAR 0 8
74880: PUSH
74881: LD_INT 2100
74883: ST_TO_ADDR
// if amount < min then
74884: LD_VAR 0 9
74888: PUSH
74889: LD_VAR 0 3
74893: LESS
74894: IFFALSE 74912
// r := r * 2 else
74896: LD_ADDR_VAR 0 7
74900: PUSH
74901: LD_VAR 0 7
74905: PUSH
74906: LD_INT 2
74908: MUL
74909: ST_TO_ADDR
74910: GO 74938
// if amount > max then
74912: LD_VAR 0 9
74916: PUSH
74917: LD_VAR 0 4
74921: GREATER
74922: IFFALSE 74938
// r := r / 2 ;
74924: LD_ADDR_VAR 0 7
74928: PUSH
74929: LD_VAR 0 7
74933: PUSH
74934: LD_INT 2
74936: DIVREAL
74937: ST_TO_ADDR
// time := time / r ;
74938: LD_ADDR_VAR 0 8
74942: PUSH
74943: LD_VAR 0 8
74947: PUSH
74948: LD_VAR 0 7
74952: DIVREAL
74953: ST_TO_ADDR
// if time < 0 then
74954: LD_VAR 0 8
74958: PUSH
74959: LD_INT 0
74961: LESS
74962: IFFALSE 74979
// time := time * - 1 ;
74964: LD_ADDR_VAR 0 8
74968: PUSH
74969: LD_VAR 0 8
74973: PUSH
74974: LD_INT 1
74976: NEG
74977: MUL
74978: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
74979: LD_VAR 0 8
74983: PUSH
74984: LD_INT 35
74986: PPUSH
74987: LD_INT 875
74989: PPUSH
74990: CALL_OW 12
74994: PLUS
74995: PPUSH
74996: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
75000: LD_INT 1
75002: PPUSH
75003: LD_INT 5
75005: PPUSH
75006: CALL_OW 12
75010: PPUSH
75011: LD_VAR 0 1
75015: PPUSH
75016: LD_INT 1
75018: PPUSH
75019: CALL_OW 55
// end ;
75023: GO 74836
// end ;
75025: LD_VAR 0 5
75029: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
75030: LD_INT 0
75032: PPUSH
75033: PPUSH
75034: PPUSH
75035: PPUSH
75036: PPUSH
75037: PPUSH
75038: PPUSH
75039: PPUSH
// if not turrets or not factories then
75040: LD_VAR 0 1
75044: NOT
75045: PUSH
75046: LD_VAR 0 2
75050: NOT
75051: OR
75052: IFFALSE 75056
// exit ;
75054: GO 75363
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
75056: LD_ADDR_VAR 0 10
75060: PUSH
75061: LD_INT 5
75063: PUSH
75064: LD_INT 6
75066: PUSH
75067: EMPTY
75068: LIST
75069: LIST
75070: PUSH
75071: LD_INT 2
75073: PUSH
75074: LD_INT 4
75076: PUSH
75077: EMPTY
75078: LIST
75079: LIST
75080: PUSH
75081: LD_INT 3
75083: PUSH
75084: LD_INT 5
75086: PUSH
75087: EMPTY
75088: LIST
75089: LIST
75090: PUSH
75091: EMPTY
75092: LIST
75093: LIST
75094: LIST
75095: PUSH
75096: LD_INT 24
75098: PUSH
75099: LD_INT 25
75101: PUSH
75102: EMPTY
75103: LIST
75104: LIST
75105: PUSH
75106: LD_INT 23
75108: PUSH
75109: LD_INT 27
75111: PUSH
75112: EMPTY
75113: LIST
75114: LIST
75115: PUSH
75116: EMPTY
75117: LIST
75118: LIST
75119: PUSH
75120: LD_INT 42
75122: PUSH
75123: LD_INT 43
75125: PUSH
75126: EMPTY
75127: LIST
75128: LIST
75129: PUSH
75130: LD_INT 44
75132: PUSH
75133: LD_INT 46
75135: PUSH
75136: EMPTY
75137: LIST
75138: LIST
75139: PUSH
75140: LD_INT 45
75142: PUSH
75143: LD_INT 47
75145: PUSH
75146: EMPTY
75147: LIST
75148: LIST
75149: PUSH
75150: EMPTY
75151: LIST
75152: LIST
75153: LIST
75154: PUSH
75155: EMPTY
75156: LIST
75157: LIST
75158: LIST
75159: ST_TO_ADDR
// result := [ ] ;
75160: LD_ADDR_VAR 0 3
75164: PUSH
75165: EMPTY
75166: ST_TO_ADDR
// for i in turrets do
75167: LD_ADDR_VAR 0 4
75171: PUSH
75172: LD_VAR 0 1
75176: PUSH
75177: FOR_IN
75178: IFFALSE 75361
// begin nat := GetNation ( i ) ;
75180: LD_ADDR_VAR 0 7
75184: PUSH
75185: LD_VAR 0 4
75189: PPUSH
75190: CALL_OW 248
75194: ST_TO_ADDR
// weapon := 0 ;
75195: LD_ADDR_VAR 0 8
75199: PUSH
75200: LD_INT 0
75202: ST_TO_ADDR
// if not nat then
75203: LD_VAR 0 7
75207: NOT
75208: IFFALSE 75212
// continue ;
75210: GO 75177
// for j in list [ nat ] do
75212: LD_ADDR_VAR 0 5
75216: PUSH
75217: LD_VAR 0 10
75221: PUSH
75222: LD_VAR 0 7
75226: ARRAY
75227: PUSH
75228: FOR_IN
75229: IFFALSE 75270
// if GetBWeapon ( i ) = j [ 1 ] then
75231: LD_VAR 0 4
75235: PPUSH
75236: CALL_OW 269
75240: PUSH
75241: LD_VAR 0 5
75245: PUSH
75246: LD_INT 1
75248: ARRAY
75249: EQUAL
75250: IFFALSE 75268
// begin weapon := j [ 2 ] ;
75252: LD_ADDR_VAR 0 8
75256: PUSH
75257: LD_VAR 0 5
75261: PUSH
75262: LD_INT 2
75264: ARRAY
75265: ST_TO_ADDR
// break ;
75266: GO 75270
// end ;
75268: GO 75228
75270: POP
75271: POP
// if not weapon then
75272: LD_VAR 0 8
75276: NOT
75277: IFFALSE 75281
// continue ;
75279: GO 75177
// for k in factories do
75281: LD_ADDR_VAR 0 6
75285: PUSH
75286: LD_VAR 0 2
75290: PUSH
75291: FOR_IN
75292: IFFALSE 75357
// begin weapons := AvailableWeaponList ( k ) ;
75294: LD_ADDR_VAR 0 9
75298: PUSH
75299: LD_VAR 0 6
75303: PPUSH
75304: CALL_OW 478
75308: ST_TO_ADDR
// if not weapons then
75309: LD_VAR 0 9
75313: NOT
75314: IFFALSE 75318
// continue ;
75316: GO 75291
// if weapon in weapons then
75318: LD_VAR 0 8
75322: PUSH
75323: LD_VAR 0 9
75327: IN
75328: IFFALSE 75355
// begin result := [ i , weapon ] ;
75330: LD_ADDR_VAR 0 3
75334: PUSH
75335: LD_VAR 0 4
75339: PUSH
75340: LD_VAR 0 8
75344: PUSH
75345: EMPTY
75346: LIST
75347: LIST
75348: ST_TO_ADDR
// exit ;
75349: POP
75350: POP
75351: POP
75352: POP
75353: GO 75363
// end ; end ;
75355: GO 75291
75357: POP
75358: POP
// end ;
75359: GO 75177
75361: POP
75362: POP
// end ;
75363: LD_VAR 0 3
75367: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
75368: LD_INT 0
75370: PPUSH
// if not side or side > 8 then
75371: LD_VAR 0 3
75375: NOT
75376: PUSH
75377: LD_VAR 0 3
75381: PUSH
75382: LD_INT 8
75384: GREATER
75385: OR
75386: IFFALSE 75390
// exit ;
75388: GO 75449
// if not range then
75390: LD_VAR 0 4
75394: NOT
75395: IFFALSE 75406
// range := - 12 ;
75397: LD_ADDR_VAR 0 4
75401: PUSH
75402: LD_INT 12
75404: NEG
75405: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
75406: LD_VAR 0 1
75410: PPUSH
75411: LD_VAR 0 2
75415: PPUSH
75416: LD_VAR 0 3
75420: PPUSH
75421: LD_VAR 0 4
75425: PPUSH
75426: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
75430: LD_VAR 0 1
75434: PPUSH
75435: LD_VAR 0 2
75439: PPUSH
75440: LD_VAR 0 3
75444: PPUSH
75445: CALL_OW 331
// end ;
75449: LD_VAR 0 5
75453: RET
// export function Video ( mode ) ; begin
75454: LD_INT 0
75456: PPUSH
// ingame_video = mode ;
75457: LD_ADDR_OWVAR 52
75461: PUSH
75462: LD_VAR 0 1
75466: ST_TO_ADDR
// interface_hidden = mode ;
75467: LD_ADDR_OWVAR 54
75471: PUSH
75472: LD_VAR 0 1
75476: ST_TO_ADDR
// end ;
75477: LD_VAR 0 2
75481: RET
// export function Join ( array , element ) ; begin
75482: LD_INT 0
75484: PPUSH
// result := Replace ( array , array + 1 , element ) ;
75485: LD_ADDR_VAR 0 3
75489: PUSH
75490: LD_VAR 0 1
75494: PPUSH
75495: LD_VAR 0 1
75499: PUSH
75500: LD_INT 1
75502: PLUS
75503: PPUSH
75504: LD_VAR 0 2
75508: PPUSH
75509: CALL_OW 1
75513: ST_TO_ADDR
// end ;
75514: LD_VAR 0 3
75518: RET
// export function JoinUnion ( array , element ) ; begin
75519: LD_INT 0
75521: PPUSH
// result := array union element ;
75522: LD_ADDR_VAR 0 3
75526: PUSH
75527: LD_VAR 0 1
75531: PUSH
75532: LD_VAR 0 2
75536: UNION
75537: ST_TO_ADDR
// end ;
75538: LD_VAR 0 3
75542: RET
// export function GetBehemoths ( side ) ; begin
75543: LD_INT 0
75545: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
75546: LD_ADDR_VAR 0 2
75550: PUSH
75551: LD_INT 22
75553: PUSH
75554: LD_VAR 0 1
75558: PUSH
75559: EMPTY
75560: LIST
75561: LIST
75562: PUSH
75563: LD_INT 31
75565: PUSH
75566: LD_INT 25
75568: PUSH
75569: EMPTY
75570: LIST
75571: LIST
75572: PUSH
75573: EMPTY
75574: LIST
75575: LIST
75576: PPUSH
75577: CALL_OW 69
75581: ST_TO_ADDR
// end ;
75582: LD_VAR 0 2
75586: RET
// export function Shuffle ( array ) ; var i , index ; begin
75587: LD_INT 0
75589: PPUSH
75590: PPUSH
75591: PPUSH
// result := [ ] ;
75592: LD_ADDR_VAR 0 2
75596: PUSH
75597: EMPTY
75598: ST_TO_ADDR
// if not array then
75599: LD_VAR 0 1
75603: NOT
75604: IFFALSE 75608
// exit ;
75606: GO 75707
// Randomize ;
75608: CALL_OW 10
// for i = array downto 1 do
75612: LD_ADDR_VAR 0 3
75616: PUSH
75617: DOUBLE
75618: LD_VAR 0 1
75622: INC
75623: ST_TO_ADDR
75624: LD_INT 1
75626: PUSH
75627: FOR_DOWNTO
75628: IFFALSE 75705
// begin index := rand ( 1 , array ) ;
75630: LD_ADDR_VAR 0 4
75634: PUSH
75635: LD_INT 1
75637: PPUSH
75638: LD_VAR 0 1
75642: PPUSH
75643: CALL_OW 12
75647: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
75648: LD_ADDR_VAR 0 2
75652: PUSH
75653: LD_VAR 0 2
75657: PPUSH
75658: LD_VAR 0 2
75662: PUSH
75663: LD_INT 1
75665: PLUS
75666: PPUSH
75667: LD_VAR 0 1
75671: PUSH
75672: LD_VAR 0 4
75676: ARRAY
75677: PPUSH
75678: CALL_OW 2
75682: ST_TO_ADDR
// array := Delete ( array , index ) ;
75683: LD_ADDR_VAR 0 1
75687: PUSH
75688: LD_VAR 0 1
75692: PPUSH
75693: LD_VAR 0 4
75697: PPUSH
75698: CALL_OW 3
75702: ST_TO_ADDR
// end ;
75703: GO 75627
75705: POP
75706: POP
// end ;
75707: LD_VAR 0 2
75711: RET
// export function GetBaseMaterials ( base ) ; begin
75712: LD_INT 0
75714: PPUSH
// result := [ 0 , 0 , 0 ] ;
75715: LD_ADDR_VAR 0 2
75719: PUSH
75720: LD_INT 0
75722: PUSH
75723: LD_INT 0
75725: PUSH
75726: LD_INT 0
75728: PUSH
75729: EMPTY
75730: LIST
75731: LIST
75732: LIST
75733: ST_TO_ADDR
// if not base then
75734: LD_VAR 0 1
75738: NOT
75739: IFFALSE 75743
// exit ;
75741: GO 75792
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
75743: LD_ADDR_VAR 0 2
75747: PUSH
75748: LD_VAR 0 1
75752: PPUSH
75753: LD_INT 1
75755: PPUSH
75756: CALL_OW 275
75760: PUSH
75761: LD_VAR 0 1
75765: PPUSH
75766: LD_INT 2
75768: PPUSH
75769: CALL_OW 275
75773: PUSH
75774: LD_VAR 0 1
75778: PPUSH
75779: LD_INT 3
75781: PPUSH
75782: CALL_OW 275
75786: PUSH
75787: EMPTY
75788: LIST
75789: LIST
75790: LIST
75791: ST_TO_ADDR
// end ;
75792: LD_VAR 0 2
75796: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
75797: LD_INT 0
75799: PPUSH
75800: PPUSH
// result := array ;
75801: LD_ADDR_VAR 0 3
75805: PUSH
75806: LD_VAR 0 1
75810: ST_TO_ADDR
// if size > 0 then
75811: LD_VAR 0 2
75815: PUSH
75816: LD_INT 0
75818: GREATER
75819: IFFALSE 75865
// for i := array downto size do
75821: LD_ADDR_VAR 0 4
75825: PUSH
75826: DOUBLE
75827: LD_VAR 0 1
75831: INC
75832: ST_TO_ADDR
75833: LD_VAR 0 2
75837: PUSH
75838: FOR_DOWNTO
75839: IFFALSE 75863
// result := Delete ( result , result ) ;
75841: LD_ADDR_VAR 0 3
75845: PUSH
75846: LD_VAR 0 3
75850: PPUSH
75851: LD_VAR 0 3
75855: PPUSH
75856: CALL_OW 3
75860: ST_TO_ADDR
75861: GO 75838
75863: POP
75864: POP
// end ;
75865: LD_VAR 0 3
75869: RET
// export function ComExit ( unit ) ; var tmp ; begin
75870: LD_INT 0
75872: PPUSH
75873: PPUSH
// if not IsInUnit ( unit ) then
75874: LD_VAR 0 1
75878: PPUSH
75879: CALL_OW 310
75883: NOT
75884: IFFALSE 75888
// exit ;
75886: GO 75948
// tmp := IsInUnit ( unit ) ;
75888: LD_ADDR_VAR 0 3
75892: PUSH
75893: LD_VAR 0 1
75897: PPUSH
75898: CALL_OW 310
75902: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
75903: LD_VAR 0 3
75907: PPUSH
75908: CALL_OW 247
75912: PUSH
75913: LD_INT 2
75915: EQUAL
75916: IFFALSE 75929
// ComExitVehicle ( unit ) else
75918: LD_VAR 0 1
75922: PPUSH
75923: CALL_OW 121
75927: GO 75938
// ComExitBuilding ( unit ) ;
75929: LD_VAR 0 1
75933: PPUSH
75934: CALL_OW 122
// result := tmp ;
75938: LD_ADDR_VAR 0 2
75942: PUSH
75943: LD_VAR 0 3
75947: ST_TO_ADDR
// end ;
75948: LD_VAR 0 2
75952: RET
// export function ComExitAll ( units ) ; var i ; begin
75953: LD_INT 0
75955: PPUSH
75956: PPUSH
// if not units then
75957: LD_VAR 0 1
75961: NOT
75962: IFFALSE 75966
// exit ;
75964: GO 75992
// for i in units do
75966: LD_ADDR_VAR 0 3
75970: PUSH
75971: LD_VAR 0 1
75975: PUSH
75976: FOR_IN
75977: IFFALSE 75990
// ComExit ( i ) ;
75979: LD_VAR 0 3
75983: PPUSH
75984: CALL 75870 0 1
75988: GO 75976
75990: POP
75991: POP
// end ;
75992: LD_VAR 0 2
75996: RET
// export function ResetHc ; begin
75997: LD_INT 0
75999: PPUSH
// InitHc ;
76000: CALL_OW 19
// hc_importance := 0 ;
76004: LD_ADDR_OWVAR 32
76008: PUSH
76009: LD_INT 0
76011: ST_TO_ADDR
// end ;
76012: LD_VAR 0 1
76016: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
76017: LD_INT 0
76019: PPUSH
76020: PPUSH
76021: PPUSH
// _x := ( x1 + x2 ) div 2 ;
76022: LD_ADDR_VAR 0 6
76026: PUSH
76027: LD_VAR 0 1
76031: PUSH
76032: LD_VAR 0 3
76036: PLUS
76037: PUSH
76038: LD_INT 2
76040: DIV
76041: ST_TO_ADDR
// if _x < 0 then
76042: LD_VAR 0 6
76046: PUSH
76047: LD_INT 0
76049: LESS
76050: IFFALSE 76067
// _x := _x * - 1 ;
76052: LD_ADDR_VAR 0 6
76056: PUSH
76057: LD_VAR 0 6
76061: PUSH
76062: LD_INT 1
76064: NEG
76065: MUL
76066: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
76067: LD_ADDR_VAR 0 7
76071: PUSH
76072: LD_VAR 0 2
76076: PUSH
76077: LD_VAR 0 4
76081: PLUS
76082: PUSH
76083: LD_INT 2
76085: DIV
76086: ST_TO_ADDR
// if _y < 0 then
76087: LD_VAR 0 7
76091: PUSH
76092: LD_INT 0
76094: LESS
76095: IFFALSE 76112
// _y := _y * - 1 ;
76097: LD_ADDR_VAR 0 7
76101: PUSH
76102: LD_VAR 0 7
76106: PUSH
76107: LD_INT 1
76109: NEG
76110: MUL
76111: ST_TO_ADDR
// result := [ _x , _y ] ;
76112: LD_ADDR_VAR 0 5
76116: PUSH
76117: LD_VAR 0 6
76121: PUSH
76122: LD_VAR 0 7
76126: PUSH
76127: EMPTY
76128: LIST
76129: LIST
76130: ST_TO_ADDR
// end ;
76131: LD_VAR 0 5
76135: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
76136: LD_INT 0
76138: PPUSH
76139: PPUSH
76140: PPUSH
76141: PPUSH
// task := GetTaskList ( unit ) ;
76142: LD_ADDR_VAR 0 7
76146: PUSH
76147: LD_VAR 0 1
76151: PPUSH
76152: CALL_OW 437
76156: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
76157: LD_VAR 0 7
76161: NOT
76162: PUSH
76163: LD_VAR 0 1
76167: PPUSH
76168: LD_VAR 0 2
76172: PPUSH
76173: CALL_OW 308
76177: NOT
76178: AND
76179: IFFALSE 76183
// exit ;
76181: GO 76301
// if IsInArea ( unit , area ) then
76183: LD_VAR 0 1
76187: PPUSH
76188: LD_VAR 0 2
76192: PPUSH
76193: CALL_OW 308
76197: IFFALSE 76215
// begin ComMoveToArea ( unit , goAway ) ;
76199: LD_VAR 0 1
76203: PPUSH
76204: LD_VAR 0 3
76208: PPUSH
76209: CALL_OW 113
// exit ;
76213: GO 76301
// end ; if task [ 1 ] [ 1 ] <> M then
76215: LD_VAR 0 7
76219: PUSH
76220: LD_INT 1
76222: ARRAY
76223: PUSH
76224: LD_INT 1
76226: ARRAY
76227: PUSH
76228: LD_STRING M
76230: NONEQUAL
76231: IFFALSE 76235
// exit ;
76233: GO 76301
// x := task [ 1 ] [ 2 ] ;
76235: LD_ADDR_VAR 0 5
76239: PUSH
76240: LD_VAR 0 7
76244: PUSH
76245: LD_INT 1
76247: ARRAY
76248: PUSH
76249: LD_INT 2
76251: ARRAY
76252: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
76253: LD_ADDR_VAR 0 6
76257: PUSH
76258: LD_VAR 0 7
76262: PUSH
76263: LD_INT 1
76265: ARRAY
76266: PUSH
76267: LD_INT 3
76269: ARRAY
76270: ST_TO_ADDR
// if InArea ( x , y , area ) then
76271: LD_VAR 0 5
76275: PPUSH
76276: LD_VAR 0 6
76280: PPUSH
76281: LD_VAR 0 2
76285: PPUSH
76286: CALL_OW 309
76290: IFFALSE 76301
// ComStop ( unit ) ;
76292: LD_VAR 0 1
76296: PPUSH
76297: CALL_OW 141
// end ;
76301: LD_VAR 0 4
76305: RET
// export function Abs ( value ) ; begin
76306: LD_INT 0
76308: PPUSH
// result := value ;
76309: LD_ADDR_VAR 0 2
76313: PUSH
76314: LD_VAR 0 1
76318: ST_TO_ADDR
// if value < 0 then
76319: LD_VAR 0 1
76323: PUSH
76324: LD_INT 0
76326: LESS
76327: IFFALSE 76344
// result := value * - 1 ;
76329: LD_ADDR_VAR 0 2
76333: PUSH
76334: LD_VAR 0 1
76338: PUSH
76339: LD_INT 1
76341: NEG
76342: MUL
76343: ST_TO_ADDR
// end ;
76344: LD_VAR 0 2
76348: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
76349: LD_INT 0
76351: PPUSH
76352: PPUSH
76353: PPUSH
76354: PPUSH
76355: PPUSH
76356: PPUSH
76357: PPUSH
76358: PPUSH
// if not unit or not building then
76359: LD_VAR 0 1
76363: NOT
76364: PUSH
76365: LD_VAR 0 2
76369: NOT
76370: OR
76371: IFFALSE 76375
// exit ;
76373: GO 76601
// x := GetX ( building ) ;
76375: LD_ADDR_VAR 0 4
76379: PUSH
76380: LD_VAR 0 2
76384: PPUSH
76385: CALL_OW 250
76389: ST_TO_ADDR
// y := GetY ( building ) ;
76390: LD_ADDR_VAR 0 6
76394: PUSH
76395: LD_VAR 0 2
76399: PPUSH
76400: CALL_OW 251
76404: ST_TO_ADDR
// d := GetDir ( building ) ;
76405: LD_ADDR_VAR 0 8
76409: PUSH
76410: LD_VAR 0 2
76414: PPUSH
76415: CALL_OW 254
76419: ST_TO_ADDR
// r := 4 ;
76420: LD_ADDR_VAR 0 9
76424: PUSH
76425: LD_INT 4
76427: ST_TO_ADDR
// for i := 1 to 5 do
76428: LD_ADDR_VAR 0 10
76432: PUSH
76433: DOUBLE
76434: LD_INT 1
76436: DEC
76437: ST_TO_ADDR
76438: LD_INT 5
76440: PUSH
76441: FOR_TO
76442: IFFALSE 76599
// begin _x := ShiftX ( x , d , r + i ) ;
76444: LD_ADDR_VAR 0 5
76448: PUSH
76449: LD_VAR 0 4
76453: PPUSH
76454: LD_VAR 0 8
76458: PPUSH
76459: LD_VAR 0 9
76463: PUSH
76464: LD_VAR 0 10
76468: PLUS
76469: PPUSH
76470: CALL_OW 272
76474: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
76475: LD_ADDR_VAR 0 7
76479: PUSH
76480: LD_VAR 0 6
76484: PPUSH
76485: LD_VAR 0 8
76489: PPUSH
76490: LD_VAR 0 9
76494: PUSH
76495: LD_VAR 0 10
76499: PLUS
76500: PPUSH
76501: CALL_OW 273
76505: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
76506: LD_VAR 0 5
76510: PPUSH
76511: LD_VAR 0 7
76515: PPUSH
76516: CALL_OW 488
76520: PUSH
76521: LD_VAR 0 5
76525: PPUSH
76526: LD_VAR 0 7
76530: PPUSH
76531: CALL_OW 428
76535: PPUSH
76536: CALL_OW 247
76540: PUSH
76541: LD_INT 3
76543: PUSH
76544: LD_INT 2
76546: PUSH
76547: EMPTY
76548: LIST
76549: LIST
76550: IN
76551: NOT
76552: AND
76553: IFFALSE 76597
// begin ComMoveXY ( unit , _x , _y ) ;
76555: LD_VAR 0 1
76559: PPUSH
76560: LD_VAR 0 5
76564: PPUSH
76565: LD_VAR 0 7
76569: PPUSH
76570: CALL_OW 111
// result := [ _x , _y ] ;
76574: LD_ADDR_VAR 0 3
76578: PUSH
76579: LD_VAR 0 5
76583: PUSH
76584: LD_VAR 0 7
76588: PUSH
76589: EMPTY
76590: LIST
76591: LIST
76592: ST_TO_ADDR
// exit ;
76593: POP
76594: POP
76595: GO 76601
// end ; end ;
76597: GO 76441
76599: POP
76600: POP
// end ;
76601: LD_VAR 0 3
76605: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
76606: LD_INT 0
76608: PPUSH
76609: PPUSH
76610: PPUSH
// result := 0 ;
76611: LD_ADDR_VAR 0 3
76615: PUSH
76616: LD_INT 0
76618: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
76619: LD_VAR 0 1
76623: PUSH
76624: LD_INT 0
76626: LESS
76627: PUSH
76628: LD_VAR 0 1
76632: PUSH
76633: LD_INT 8
76635: GREATER
76636: OR
76637: PUSH
76638: LD_VAR 0 2
76642: PUSH
76643: LD_INT 0
76645: LESS
76646: OR
76647: PUSH
76648: LD_VAR 0 2
76652: PUSH
76653: LD_INT 8
76655: GREATER
76656: OR
76657: IFFALSE 76661
// exit ;
76659: GO 76736
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
76661: LD_ADDR_VAR 0 4
76665: PUSH
76666: LD_INT 22
76668: PUSH
76669: LD_VAR 0 2
76673: PUSH
76674: EMPTY
76675: LIST
76676: LIST
76677: PPUSH
76678: CALL_OW 69
76682: PUSH
76683: FOR_IN
76684: IFFALSE 76734
// begin un := UnitShoot ( i ) ;
76686: LD_ADDR_VAR 0 5
76690: PUSH
76691: LD_VAR 0 4
76695: PPUSH
76696: CALL_OW 504
76700: ST_TO_ADDR
// if GetSide ( un ) = side1 then
76701: LD_VAR 0 5
76705: PPUSH
76706: CALL_OW 255
76710: PUSH
76711: LD_VAR 0 1
76715: EQUAL
76716: IFFALSE 76732
// begin result := un ;
76718: LD_ADDR_VAR 0 3
76722: PUSH
76723: LD_VAR 0 5
76727: ST_TO_ADDR
// exit ;
76728: POP
76729: POP
76730: GO 76736
// end ; end ;
76732: GO 76683
76734: POP
76735: POP
// end ;
76736: LD_VAR 0 3
76740: RET
// export function GetCargoBay ( units ) ; begin
76741: LD_INT 0
76743: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
76744: LD_ADDR_VAR 0 2
76748: PUSH
76749: LD_VAR 0 1
76753: PPUSH
76754: LD_INT 2
76756: PUSH
76757: LD_INT 34
76759: PUSH
76760: LD_INT 12
76762: PUSH
76763: EMPTY
76764: LIST
76765: LIST
76766: PUSH
76767: LD_INT 34
76769: PUSH
76770: LD_INT 51
76772: PUSH
76773: EMPTY
76774: LIST
76775: LIST
76776: PUSH
76777: LD_INT 34
76779: PUSH
76780: LD_INT 32
76782: PUSH
76783: EMPTY
76784: LIST
76785: LIST
76786: PUSH
76787: LD_INT 34
76789: PUSH
76790: LD_EXP 61
76794: PUSH
76795: EMPTY
76796: LIST
76797: LIST
76798: PUSH
76799: EMPTY
76800: LIST
76801: LIST
76802: LIST
76803: LIST
76804: LIST
76805: PPUSH
76806: CALL_OW 72
76810: ST_TO_ADDR
// end ;
76811: LD_VAR 0 2
76815: RET
// export function Negate ( value ) ; begin
76816: LD_INT 0
76818: PPUSH
// result := not value ;
76819: LD_ADDR_VAR 0 2
76823: PUSH
76824: LD_VAR 0 1
76828: NOT
76829: ST_TO_ADDR
// end ;
76830: LD_VAR 0 2
76834: RET
// export function Inc ( value ) ; begin
76835: LD_INT 0
76837: PPUSH
// result := value + 1 ;
76838: LD_ADDR_VAR 0 2
76842: PUSH
76843: LD_VAR 0 1
76847: PUSH
76848: LD_INT 1
76850: PLUS
76851: ST_TO_ADDR
// end ;
76852: LD_VAR 0 2
76856: RET
// export function Dec ( value ) ; begin
76857: LD_INT 0
76859: PPUSH
// result := value - 1 ;
76860: LD_ADDR_VAR 0 2
76864: PUSH
76865: LD_VAR 0 1
76869: PUSH
76870: LD_INT 1
76872: MINUS
76873: ST_TO_ADDR
// end ;
76874: LD_VAR 0 2
76878: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
76879: LD_INT 0
76881: PPUSH
76882: PPUSH
76883: PPUSH
76884: PPUSH
76885: PPUSH
76886: PPUSH
76887: PPUSH
76888: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
76889: LD_VAR 0 1
76893: PPUSH
76894: LD_VAR 0 2
76898: PPUSH
76899: CALL_OW 488
76903: NOT
76904: PUSH
76905: LD_VAR 0 3
76909: PPUSH
76910: LD_VAR 0 4
76914: PPUSH
76915: CALL_OW 488
76919: NOT
76920: OR
76921: IFFALSE 76934
// begin result := - 1 ;
76923: LD_ADDR_VAR 0 5
76927: PUSH
76928: LD_INT 1
76930: NEG
76931: ST_TO_ADDR
// exit ;
76932: GO 77169
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
76934: LD_ADDR_VAR 0 12
76938: PUSH
76939: LD_VAR 0 1
76943: PPUSH
76944: LD_VAR 0 2
76948: PPUSH
76949: LD_VAR 0 3
76953: PPUSH
76954: LD_VAR 0 4
76958: PPUSH
76959: CALL 76017 0 4
76963: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
76964: LD_ADDR_VAR 0 11
76968: PUSH
76969: LD_VAR 0 1
76973: PPUSH
76974: LD_VAR 0 2
76978: PPUSH
76979: LD_VAR 0 12
76983: PUSH
76984: LD_INT 1
76986: ARRAY
76987: PPUSH
76988: LD_VAR 0 12
76992: PUSH
76993: LD_INT 2
76995: ARRAY
76996: PPUSH
76997: CALL_OW 298
77001: ST_TO_ADDR
// distance := 9999 ;
77002: LD_ADDR_VAR 0 10
77006: PUSH
77007: LD_INT 9999
77009: ST_TO_ADDR
// for i := 0 to 5 do
77010: LD_ADDR_VAR 0 6
77014: PUSH
77015: DOUBLE
77016: LD_INT 0
77018: DEC
77019: ST_TO_ADDR
77020: LD_INT 5
77022: PUSH
77023: FOR_TO
77024: IFFALSE 77167
// begin _x := ShiftX ( x1 , i , centerDist ) ;
77026: LD_ADDR_VAR 0 7
77030: PUSH
77031: LD_VAR 0 1
77035: PPUSH
77036: LD_VAR 0 6
77040: PPUSH
77041: LD_VAR 0 11
77045: PPUSH
77046: CALL_OW 272
77050: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
77051: LD_ADDR_VAR 0 8
77055: PUSH
77056: LD_VAR 0 2
77060: PPUSH
77061: LD_VAR 0 6
77065: PPUSH
77066: LD_VAR 0 11
77070: PPUSH
77071: CALL_OW 273
77075: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
77076: LD_VAR 0 7
77080: PPUSH
77081: LD_VAR 0 8
77085: PPUSH
77086: CALL_OW 488
77090: NOT
77091: IFFALSE 77095
// continue ;
77093: GO 77023
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
77095: LD_ADDR_VAR 0 9
77099: PUSH
77100: LD_VAR 0 12
77104: PUSH
77105: LD_INT 1
77107: ARRAY
77108: PPUSH
77109: LD_VAR 0 12
77113: PUSH
77114: LD_INT 2
77116: ARRAY
77117: PPUSH
77118: LD_VAR 0 7
77122: PPUSH
77123: LD_VAR 0 8
77127: PPUSH
77128: CALL_OW 298
77132: ST_TO_ADDR
// if tmp < distance then
77133: LD_VAR 0 9
77137: PUSH
77138: LD_VAR 0 10
77142: LESS
77143: IFFALSE 77165
// begin result := i ;
77145: LD_ADDR_VAR 0 5
77149: PUSH
77150: LD_VAR 0 6
77154: ST_TO_ADDR
// distance := tmp ;
77155: LD_ADDR_VAR 0 10
77159: PUSH
77160: LD_VAR 0 9
77164: ST_TO_ADDR
// end ; end ;
77165: GO 77023
77167: POP
77168: POP
// end ;
77169: LD_VAR 0 5
77173: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77174: LD_INT 0
77176: PPUSH
77177: PPUSH
// if not driver or not IsInUnit ( driver ) then
77178: LD_VAR 0 1
77182: NOT
77183: PUSH
77184: LD_VAR 0 1
77188: PPUSH
77189: CALL_OW 310
77193: NOT
77194: OR
77195: IFFALSE 77199
// exit ;
77197: GO 77289
// vehicle := IsInUnit ( driver ) ;
77199: LD_ADDR_VAR 0 3
77203: PUSH
77204: LD_VAR 0 1
77208: PPUSH
77209: CALL_OW 310
77213: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77214: LD_VAR 0 1
77218: PPUSH
77219: LD_STRING \
77221: PUSH
77222: LD_INT 0
77224: PUSH
77225: LD_INT 0
77227: PUSH
77228: LD_INT 0
77230: PUSH
77231: LD_INT 0
77233: PUSH
77234: LD_INT 0
77236: PUSH
77237: LD_INT 0
77239: PUSH
77240: EMPTY
77241: LIST
77242: LIST
77243: LIST
77244: LIST
77245: LIST
77246: LIST
77247: LIST
77248: PUSH
77249: LD_STRING E
77251: PUSH
77252: LD_INT 0
77254: PUSH
77255: LD_INT 0
77257: PUSH
77258: LD_VAR 0 3
77262: PUSH
77263: LD_INT 0
77265: PUSH
77266: LD_INT 0
77268: PUSH
77269: LD_INT 0
77271: PUSH
77272: EMPTY
77273: LIST
77274: LIST
77275: LIST
77276: LIST
77277: LIST
77278: LIST
77279: LIST
77280: PUSH
77281: EMPTY
77282: LIST
77283: LIST
77284: PPUSH
77285: CALL_OW 446
// end ;
77289: LD_VAR 0 2
77293: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77294: LD_INT 0
77296: PPUSH
77297: PPUSH
// if not driver or not IsInUnit ( driver ) then
77298: LD_VAR 0 1
77302: NOT
77303: PUSH
77304: LD_VAR 0 1
77308: PPUSH
77309: CALL_OW 310
77313: NOT
77314: OR
77315: IFFALSE 77319
// exit ;
77317: GO 77409
// vehicle := IsInUnit ( driver ) ;
77319: LD_ADDR_VAR 0 3
77323: PUSH
77324: LD_VAR 0 1
77328: PPUSH
77329: CALL_OW 310
77333: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77334: LD_VAR 0 1
77338: PPUSH
77339: LD_STRING \
77341: PUSH
77342: LD_INT 0
77344: PUSH
77345: LD_INT 0
77347: PUSH
77348: LD_INT 0
77350: PUSH
77351: LD_INT 0
77353: PUSH
77354: LD_INT 0
77356: PUSH
77357: LD_INT 0
77359: PUSH
77360: EMPTY
77361: LIST
77362: LIST
77363: LIST
77364: LIST
77365: LIST
77366: LIST
77367: LIST
77368: PUSH
77369: LD_STRING E
77371: PUSH
77372: LD_INT 0
77374: PUSH
77375: LD_INT 0
77377: PUSH
77378: LD_VAR 0 3
77382: PUSH
77383: LD_INT 0
77385: PUSH
77386: LD_INT 0
77388: PUSH
77389: LD_INT 0
77391: PUSH
77392: EMPTY
77393: LIST
77394: LIST
77395: LIST
77396: LIST
77397: LIST
77398: LIST
77399: LIST
77400: PUSH
77401: EMPTY
77402: LIST
77403: LIST
77404: PPUSH
77405: CALL_OW 447
// end ;
77409: LD_VAR 0 2
77413: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
77414: LD_INT 0
77416: PPUSH
77417: PPUSH
77418: PPUSH
// tmp := [ ] ;
77419: LD_ADDR_VAR 0 5
77423: PUSH
77424: EMPTY
77425: ST_TO_ADDR
// for i in units do
77426: LD_ADDR_VAR 0 4
77430: PUSH
77431: LD_VAR 0 1
77435: PUSH
77436: FOR_IN
77437: IFFALSE 77475
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
77439: LD_ADDR_VAR 0 5
77443: PUSH
77444: LD_VAR 0 5
77448: PPUSH
77449: LD_VAR 0 5
77453: PUSH
77454: LD_INT 1
77456: PLUS
77457: PPUSH
77458: LD_VAR 0 4
77462: PPUSH
77463: CALL_OW 256
77467: PPUSH
77468: CALL_OW 2
77472: ST_TO_ADDR
77473: GO 77436
77475: POP
77476: POP
// if not tmp then
77477: LD_VAR 0 5
77481: NOT
77482: IFFALSE 77486
// exit ;
77484: GO 77534
// if asc then
77486: LD_VAR 0 2
77490: IFFALSE 77514
// result := SortListByListAsc ( units , tmp ) else
77492: LD_ADDR_VAR 0 3
77496: PUSH
77497: LD_VAR 0 1
77501: PPUSH
77502: LD_VAR 0 5
77506: PPUSH
77507: CALL_OW 76
77511: ST_TO_ADDR
77512: GO 77534
// result := SortListByListDesc ( units , tmp ) ;
77514: LD_ADDR_VAR 0 3
77518: PUSH
77519: LD_VAR 0 1
77523: PPUSH
77524: LD_VAR 0 5
77528: PPUSH
77529: CALL_OW 77
77533: ST_TO_ADDR
// end ;
77534: LD_VAR 0 3
77538: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
77539: LD_INT 0
77541: PPUSH
77542: PPUSH
// task := GetTaskList ( mech ) ;
77543: LD_ADDR_VAR 0 4
77547: PUSH
77548: LD_VAR 0 1
77552: PPUSH
77553: CALL_OW 437
77557: ST_TO_ADDR
// if not task then
77558: LD_VAR 0 4
77562: NOT
77563: IFFALSE 77567
// exit ;
77565: GO 77609
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
77567: LD_ADDR_VAR 0 3
77571: PUSH
77572: LD_VAR 0 4
77576: PUSH
77577: LD_INT 1
77579: ARRAY
77580: PUSH
77581: LD_INT 1
77583: ARRAY
77584: PUSH
77585: LD_STRING r
77587: EQUAL
77588: PUSH
77589: LD_VAR 0 4
77593: PUSH
77594: LD_INT 1
77596: ARRAY
77597: PUSH
77598: LD_INT 4
77600: ARRAY
77601: PUSH
77602: LD_VAR 0 2
77606: EQUAL
77607: AND
77608: ST_TO_ADDR
// end ;
77609: LD_VAR 0 3
77613: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
77614: LD_INT 0
77616: PPUSH
// SetDir ( unit , d ) ;
77617: LD_VAR 0 1
77621: PPUSH
77622: LD_VAR 0 4
77626: PPUSH
77627: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
77631: LD_VAR 0 1
77635: PPUSH
77636: LD_VAR 0 2
77640: PPUSH
77641: LD_VAR 0 3
77645: PPUSH
77646: LD_VAR 0 5
77650: PPUSH
77651: CALL_OW 48
// end ;
77655: LD_VAR 0 6
77659: RET
// export function ToNaturalNumber ( number ) ; begin
77660: LD_INT 0
77662: PPUSH
// result := number div 1 ;
77663: LD_ADDR_VAR 0 2
77667: PUSH
77668: LD_VAR 0 1
77672: PUSH
77673: LD_INT 1
77675: DIV
77676: ST_TO_ADDR
// if number < 0 then
77677: LD_VAR 0 1
77681: PUSH
77682: LD_INT 0
77684: LESS
77685: IFFALSE 77695
// result := 0 ;
77687: LD_ADDR_VAR 0 2
77691: PUSH
77692: LD_INT 0
77694: ST_TO_ADDR
// end ;
77695: LD_VAR 0 2
77699: RET
// export function SortByClass ( units , class ) ; var un ; begin
77700: LD_INT 0
77702: PPUSH
77703: PPUSH
// if not units or not class then
77704: LD_VAR 0 1
77708: NOT
77709: PUSH
77710: LD_VAR 0 2
77714: NOT
77715: OR
77716: IFFALSE 77720
// exit ;
77718: GO 77815
// result := [ ] ;
77720: LD_ADDR_VAR 0 3
77724: PUSH
77725: EMPTY
77726: ST_TO_ADDR
// for un in units do
77727: LD_ADDR_VAR 0 4
77731: PUSH
77732: LD_VAR 0 1
77736: PUSH
77737: FOR_IN
77738: IFFALSE 77813
// if GetClass ( un ) = class then
77740: LD_VAR 0 4
77744: PPUSH
77745: CALL_OW 257
77749: PUSH
77750: LD_VAR 0 2
77754: EQUAL
77755: IFFALSE 77782
// result := Insert ( result , 1 , un ) else
77757: LD_ADDR_VAR 0 3
77761: PUSH
77762: LD_VAR 0 3
77766: PPUSH
77767: LD_INT 1
77769: PPUSH
77770: LD_VAR 0 4
77774: PPUSH
77775: CALL_OW 2
77779: ST_TO_ADDR
77780: GO 77811
// result := Replace ( result , result + 1 , un ) ;
77782: LD_ADDR_VAR 0 3
77786: PUSH
77787: LD_VAR 0 3
77791: PPUSH
77792: LD_VAR 0 3
77796: PUSH
77797: LD_INT 1
77799: PLUS
77800: PPUSH
77801: LD_VAR 0 4
77805: PPUSH
77806: CALL_OW 1
77810: ST_TO_ADDR
77811: GO 77737
77813: POP
77814: POP
// end ;
77815: LD_VAR 0 3
77819: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
77820: LD_INT 0
77822: PPUSH
77823: PPUSH
77824: PPUSH
77825: PPUSH
77826: PPUSH
77827: PPUSH
77828: PPUSH
// result := [ ] ;
77829: LD_ADDR_VAR 0 4
77833: PUSH
77834: EMPTY
77835: ST_TO_ADDR
// if x - r < 0 then
77836: LD_VAR 0 1
77840: PUSH
77841: LD_VAR 0 3
77845: MINUS
77846: PUSH
77847: LD_INT 0
77849: LESS
77850: IFFALSE 77862
// min_x := 0 else
77852: LD_ADDR_VAR 0 8
77856: PUSH
77857: LD_INT 0
77859: ST_TO_ADDR
77860: GO 77878
// min_x := x - r ;
77862: LD_ADDR_VAR 0 8
77866: PUSH
77867: LD_VAR 0 1
77871: PUSH
77872: LD_VAR 0 3
77876: MINUS
77877: ST_TO_ADDR
// if y - r < 0 then
77878: LD_VAR 0 2
77882: PUSH
77883: LD_VAR 0 3
77887: MINUS
77888: PUSH
77889: LD_INT 0
77891: LESS
77892: IFFALSE 77904
// min_y := 0 else
77894: LD_ADDR_VAR 0 7
77898: PUSH
77899: LD_INT 0
77901: ST_TO_ADDR
77902: GO 77920
// min_y := y - r ;
77904: LD_ADDR_VAR 0 7
77908: PUSH
77909: LD_VAR 0 2
77913: PUSH
77914: LD_VAR 0 3
77918: MINUS
77919: ST_TO_ADDR
// max_x := x + r ;
77920: LD_ADDR_VAR 0 9
77924: PUSH
77925: LD_VAR 0 1
77929: PUSH
77930: LD_VAR 0 3
77934: PLUS
77935: ST_TO_ADDR
// max_y := y + r ;
77936: LD_ADDR_VAR 0 10
77940: PUSH
77941: LD_VAR 0 2
77945: PUSH
77946: LD_VAR 0 3
77950: PLUS
77951: ST_TO_ADDR
// for _x = min_x to max_x do
77952: LD_ADDR_VAR 0 5
77956: PUSH
77957: DOUBLE
77958: LD_VAR 0 8
77962: DEC
77963: ST_TO_ADDR
77964: LD_VAR 0 9
77968: PUSH
77969: FOR_TO
77970: IFFALSE 78071
// for _y = min_y to max_y do
77972: LD_ADDR_VAR 0 6
77976: PUSH
77977: DOUBLE
77978: LD_VAR 0 7
77982: DEC
77983: ST_TO_ADDR
77984: LD_VAR 0 10
77988: PUSH
77989: FOR_TO
77990: IFFALSE 78067
// begin if not ValidHex ( _x , _y ) then
77992: LD_VAR 0 5
77996: PPUSH
77997: LD_VAR 0 6
78001: PPUSH
78002: CALL_OW 488
78006: NOT
78007: IFFALSE 78011
// continue ;
78009: GO 77989
// if GetResourceTypeXY ( _x , _y ) then
78011: LD_VAR 0 5
78015: PPUSH
78016: LD_VAR 0 6
78020: PPUSH
78021: CALL_OW 283
78025: IFFALSE 78065
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
78027: LD_ADDR_VAR 0 4
78031: PUSH
78032: LD_VAR 0 4
78036: PPUSH
78037: LD_VAR 0 4
78041: PUSH
78042: LD_INT 1
78044: PLUS
78045: PPUSH
78046: LD_VAR 0 5
78050: PUSH
78051: LD_VAR 0 6
78055: PUSH
78056: EMPTY
78057: LIST
78058: LIST
78059: PPUSH
78060: CALL_OW 1
78064: ST_TO_ADDR
// end ;
78065: GO 77989
78067: POP
78068: POP
78069: GO 77969
78071: POP
78072: POP
// end ;
78073: LD_VAR 0 4
78077: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
78078: LD_INT 0
78080: PPUSH
78081: PPUSH
78082: PPUSH
78083: PPUSH
78084: PPUSH
78085: PPUSH
78086: PPUSH
78087: PPUSH
// if not units then
78088: LD_VAR 0 1
78092: NOT
78093: IFFALSE 78097
// exit ;
78095: GO 78522
// result := UnitFilter ( units , [ f_ok ] ) ;
78097: LD_ADDR_VAR 0 3
78101: PUSH
78102: LD_VAR 0 1
78106: PPUSH
78107: LD_INT 50
78109: PUSH
78110: EMPTY
78111: LIST
78112: PPUSH
78113: CALL_OW 72
78117: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
78118: LD_ADDR_VAR 0 8
78122: PUSH
78123: LD_VAR 0 1
78127: PUSH
78128: LD_INT 1
78130: ARRAY
78131: PPUSH
78132: CALL_OW 255
78136: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
78137: LD_ADDR_VAR 0 10
78141: PUSH
78142: LD_INT 29
78144: PUSH
78145: LD_EXP 64
78149: PUSH
78150: EMPTY
78151: LIST
78152: LIST
78153: ST_TO_ADDR
// if not result then
78154: LD_VAR 0 3
78158: NOT
78159: IFFALSE 78163
// exit ;
78161: GO 78522
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
78163: LD_ADDR_VAR 0 5
78167: PUSH
78168: LD_INT 81
78170: PUSH
78171: LD_VAR 0 8
78175: PUSH
78176: EMPTY
78177: LIST
78178: LIST
78179: PPUSH
78180: CALL_OW 69
78184: ST_TO_ADDR
// for i in result do
78185: LD_ADDR_VAR 0 4
78189: PUSH
78190: LD_VAR 0 3
78194: PUSH
78195: FOR_IN
78196: IFFALSE 78520
// begin tag := GetTag ( i ) + 1 ;
78198: LD_ADDR_VAR 0 9
78202: PUSH
78203: LD_VAR 0 4
78207: PPUSH
78208: CALL_OW 110
78212: PUSH
78213: LD_INT 1
78215: PLUS
78216: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
78217: LD_ADDR_VAR 0 7
78221: PUSH
78222: LD_VAR 0 4
78226: PPUSH
78227: CALL_OW 250
78231: PPUSH
78232: LD_VAR 0 4
78236: PPUSH
78237: CALL_OW 251
78241: PPUSH
78242: LD_INT 6
78244: PPUSH
78245: CALL 77820 0 3
78249: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
78250: LD_VAR 0 7
78254: PUSH
78255: LD_VAR 0 4
78259: PPUSH
78260: CALL_OW 264
78264: PUSH
78265: LD_VAR 0 10
78269: IN
78270: NOT
78271: AND
78272: IFFALSE 78311
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
78274: LD_VAR 0 4
78278: PPUSH
78279: LD_VAR 0 7
78283: PUSH
78284: LD_INT 1
78286: ARRAY
78287: PUSH
78288: LD_INT 1
78290: ARRAY
78291: PPUSH
78292: LD_VAR 0 7
78296: PUSH
78297: LD_INT 1
78299: ARRAY
78300: PUSH
78301: LD_INT 2
78303: ARRAY
78304: PPUSH
78305: CALL_OW 116
78309: GO 78518
// if path > tag then
78311: LD_VAR 0 2
78315: PUSH
78316: LD_VAR 0 9
78320: GREATER
78321: IFFALSE 78488
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
78323: LD_ADDR_VAR 0 6
78327: PUSH
78328: LD_VAR 0 5
78332: PPUSH
78333: LD_INT 91
78335: PUSH
78336: LD_VAR 0 4
78340: PUSH
78341: LD_INT 12
78343: PUSH
78344: EMPTY
78345: LIST
78346: LIST
78347: LIST
78348: PPUSH
78349: CALL_OW 72
78353: ST_TO_ADDR
// if nearEnemy then
78354: LD_VAR 0 6
78358: IFFALSE 78386
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
78360: LD_VAR 0 4
78364: PPUSH
78365: LD_VAR 0 6
78369: PPUSH
78370: LD_VAR 0 4
78374: PPUSH
78375: CALL_OW 74
78379: PPUSH
78380: CALL_OW 115
78384: GO 78486
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
78386: LD_VAR 0 4
78390: PPUSH
78391: LD_VAR 0 2
78395: PUSH
78396: LD_VAR 0 9
78400: ARRAY
78401: PUSH
78402: LD_INT 1
78404: ARRAY
78405: PPUSH
78406: LD_VAR 0 2
78410: PUSH
78411: LD_VAR 0 9
78415: ARRAY
78416: PUSH
78417: LD_INT 2
78419: ARRAY
78420: PPUSH
78421: CALL_OW 297
78425: PUSH
78426: LD_INT 6
78428: GREATER
78429: IFFALSE 78472
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
78431: LD_VAR 0 4
78435: PPUSH
78436: LD_VAR 0 2
78440: PUSH
78441: LD_VAR 0 9
78445: ARRAY
78446: PUSH
78447: LD_INT 1
78449: ARRAY
78450: PPUSH
78451: LD_VAR 0 2
78455: PUSH
78456: LD_VAR 0 9
78460: ARRAY
78461: PUSH
78462: LD_INT 2
78464: ARRAY
78465: PPUSH
78466: CALL_OW 114
78470: GO 78486
// SetTag ( i , tag ) ;
78472: LD_VAR 0 4
78476: PPUSH
78477: LD_VAR 0 9
78481: PPUSH
78482: CALL_OW 109
// end else
78486: GO 78518
// if enemy then
78488: LD_VAR 0 5
78492: IFFALSE 78518
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
78494: LD_VAR 0 4
78498: PPUSH
78499: LD_VAR 0 5
78503: PPUSH
78504: LD_VAR 0 4
78508: PPUSH
78509: CALL_OW 74
78513: PPUSH
78514: CALL_OW 115
// end ;
78518: GO 78195
78520: POP
78521: POP
// end ;
78522: LD_VAR 0 3
78526: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
78527: LD_INT 0
78529: PPUSH
78530: PPUSH
78531: PPUSH
// if not unit or IsInUnit ( unit ) then
78532: LD_VAR 0 1
78536: NOT
78537: PUSH
78538: LD_VAR 0 1
78542: PPUSH
78543: CALL_OW 310
78547: OR
78548: IFFALSE 78552
// exit ;
78550: GO 78643
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
78552: LD_ADDR_VAR 0 4
78556: PUSH
78557: LD_VAR 0 1
78561: PPUSH
78562: CALL_OW 250
78566: PPUSH
78567: LD_VAR 0 2
78571: PPUSH
78572: LD_INT 1
78574: PPUSH
78575: CALL_OW 272
78579: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
78580: LD_ADDR_VAR 0 5
78584: PUSH
78585: LD_VAR 0 1
78589: PPUSH
78590: CALL_OW 251
78594: PPUSH
78595: LD_VAR 0 2
78599: PPUSH
78600: LD_INT 1
78602: PPUSH
78603: CALL_OW 273
78607: ST_TO_ADDR
// if ValidHex ( x , y ) then
78608: LD_VAR 0 4
78612: PPUSH
78613: LD_VAR 0 5
78617: PPUSH
78618: CALL_OW 488
78622: IFFALSE 78643
// ComTurnXY ( unit , x , y ) ;
78624: LD_VAR 0 1
78628: PPUSH
78629: LD_VAR 0 4
78633: PPUSH
78634: LD_VAR 0 5
78638: PPUSH
78639: CALL_OW 118
// end ;
78643: LD_VAR 0 3
78647: RET
// export function SeeUnits ( side , units ) ; var i ; begin
78648: LD_INT 0
78650: PPUSH
78651: PPUSH
// result := false ;
78652: LD_ADDR_VAR 0 3
78656: PUSH
78657: LD_INT 0
78659: ST_TO_ADDR
// if not units then
78660: LD_VAR 0 2
78664: NOT
78665: IFFALSE 78669
// exit ;
78667: GO 78714
// for i in units do
78669: LD_ADDR_VAR 0 4
78673: PUSH
78674: LD_VAR 0 2
78678: PUSH
78679: FOR_IN
78680: IFFALSE 78712
// if See ( side , i ) then
78682: LD_VAR 0 1
78686: PPUSH
78687: LD_VAR 0 4
78691: PPUSH
78692: CALL_OW 292
78696: IFFALSE 78710
// begin result := true ;
78698: LD_ADDR_VAR 0 3
78702: PUSH
78703: LD_INT 1
78705: ST_TO_ADDR
// exit ;
78706: POP
78707: POP
78708: GO 78714
// end ;
78710: GO 78679
78712: POP
78713: POP
// end ;
78714: LD_VAR 0 3
78718: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
78719: LD_INT 0
78721: PPUSH
78722: PPUSH
78723: PPUSH
78724: PPUSH
// if not unit or not points then
78725: LD_VAR 0 1
78729: NOT
78730: PUSH
78731: LD_VAR 0 2
78735: NOT
78736: OR
78737: IFFALSE 78741
// exit ;
78739: GO 78831
// dist := 99999 ;
78741: LD_ADDR_VAR 0 5
78745: PUSH
78746: LD_INT 99999
78748: ST_TO_ADDR
// for i in points do
78749: LD_ADDR_VAR 0 4
78753: PUSH
78754: LD_VAR 0 2
78758: PUSH
78759: FOR_IN
78760: IFFALSE 78829
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
78762: LD_ADDR_VAR 0 6
78766: PUSH
78767: LD_VAR 0 1
78771: PPUSH
78772: LD_VAR 0 4
78776: PUSH
78777: LD_INT 1
78779: ARRAY
78780: PPUSH
78781: LD_VAR 0 4
78785: PUSH
78786: LD_INT 2
78788: ARRAY
78789: PPUSH
78790: CALL_OW 297
78794: ST_TO_ADDR
// if tmpDist < dist then
78795: LD_VAR 0 6
78799: PUSH
78800: LD_VAR 0 5
78804: LESS
78805: IFFALSE 78827
// begin result := i ;
78807: LD_ADDR_VAR 0 3
78811: PUSH
78812: LD_VAR 0 4
78816: ST_TO_ADDR
// dist := tmpDist ;
78817: LD_ADDR_VAR 0 5
78821: PUSH
78822: LD_VAR 0 6
78826: ST_TO_ADDR
// end ; end ;
78827: GO 78759
78829: POP
78830: POP
// end ;
78831: LD_VAR 0 3
78835: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
78836: LD_INT 0
78838: PPUSH
// uc_side := side ;
78839: LD_ADDR_OWVAR 20
78843: PUSH
78844: LD_VAR 0 1
78848: ST_TO_ADDR
// uc_nation := 3 ;
78849: LD_ADDR_OWVAR 21
78853: PUSH
78854: LD_INT 3
78856: ST_TO_ADDR
// vc_chassis := 25 ;
78857: LD_ADDR_OWVAR 37
78861: PUSH
78862: LD_INT 25
78864: ST_TO_ADDR
// vc_engine := engine_siberite ;
78865: LD_ADDR_OWVAR 39
78869: PUSH
78870: LD_INT 3
78872: ST_TO_ADDR
// vc_control := control_computer ;
78873: LD_ADDR_OWVAR 38
78877: PUSH
78878: LD_INT 3
78880: ST_TO_ADDR
// vc_weapon := 59 ;
78881: LD_ADDR_OWVAR 40
78885: PUSH
78886: LD_INT 59
78888: ST_TO_ADDR
// result := CreateVehicle ;
78889: LD_ADDR_VAR 0 5
78893: PUSH
78894: CALL_OW 45
78898: ST_TO_ADDR
// SetDir ( result , d ) ;
78899: LD_VAR 0 5
78903: PPUSH
78904: LD_VAR 0 4
78908: PPUSH
78909: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
78913: LD_VAR 0 5
78917: PPUSH
78918: LD_VAR 0 2
78922: PPUSH
78923: LD_VAR 0 3
78927: PPUSH
78928: LD_INT 0
78930: PPUSH
78931: CALL_OW 48
// end ;
78935: LD_VAR 0 5
78939: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
78940: LD_INT 0
78942: PPUSH
78943: PPUSH
78944: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
78945: LD_ADDR_VAR 0 2
78949: PUSH
78950: LD_INT 0
78952: PUSH
78953: LD_INT 0
78955: PUSH
78956: LD_INT 0
78958: PUSH
78959: LD_INT 0
78961: PUSH
78962: EMPTY
78963: LIST
78964: LIST
78965: LIST
78966: LIST
78967: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
78968: LD_VAR 0 1
78972: NOT
78973: PUSH
78974: LD_VAR 0 1
78978: PPUSH
78979: CALL_OW 264
78983: PUSH
78984: LD_INT 12
78986: PUSH
78987: LD_INT 51
78989: PUSH
78990: LD_INT 32
78992: PUSH
78993: LD_EXP 61
78997: PUSH
78998: EMPTY
78999: LIST
79000: LIST
79001: LIST
79002: LIST
79003: IN
79004: NOT
79005: OR
79006: IFFALSE 79010
// exit ;
79008: GO 79108
// for i := 1 to 3 do
79010: LD_ADDR_VAR 0 3
79014: PUSH
79015: DOUBLE
79016: LD_INT 1
79018: DEC
79019: ST_TO_ADDR
79020: LD_INT 3
79022: PUSH
79023: FOR_TO
79024: IFFALSE 79106
// begin tmp := GetCargo ( cargo , i ) ;
79026: LD_ADDR_VAR 0 4
79030: PUSH
79031: LD_VAR 0 1
79035: PPUSH
79036: LD_VAR 0 3
79040: PPUSH
79041: CALL_OW 289
79045: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
79046: LD_ADDR_VAR 0 2
79050: PUSH
79051: LD_VAR 0 2
79055: PPUSH
79056: LD_VAR 0 3
79060: PPUSH
79061: LD_VAR 0 4
79065: PPUSH
79066: CALL_OW 1
79070: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
79071: LD_ADDR_VAR 0 2
79075: PUSH
79076: LD_VAR 0 2
79080: PPUSH
79081: LD_INT 4
79083: PPUSH
79084: LD_VAR 0 2
79088: PUSH
79089: LD_INT 4
79091: ARRAY
79092: PUSH
79093: LD_VAR 0 4
79097: PLUS
79098: PPUSH
79099: CALL_OW 1
79103: ST_TO_ADDR
// end ;
79104: GO 79023
79106: POP
79107: POP
// end ; end_of_file
79108: LD_VAR 0 2
79112: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
79113: LD_VAR 0 1
79117: PUSH
79118: LD_INT 200
79120: DOUBLE
79121: GREATEREQUAL
79122: IFFALSE 79130
79124: LD_INT 299
79126: DOUBLE
79127: LESSEQUAL
79128: IFTRUE 79132
79130: GO 79164
79132: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
79133: LD_VAR 0 1
79137: PPUSH
79138: LD_VAR 0 2
79142: PPUSH
79143: LD_VAR 0 3
79147: PPUSH
79148: LD_VAR 0 4
79152: PPUSH
79153: LD_VAR 0 5
79157: PPUSH
79158: CALL 34539 0 5
79162: GO 79241
79164: LD_INT 300
79166: DOUBLE
79167: GREATEREQUAL
79168: IFFALSE 79176
79170: LD_INT 399
79172: DOUBLE
79173: LESSEQUAL
79174: IFTRUE 79178
79176: GO 79240
79178: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
79179: LD_VAR 0 1
79183: PPUSH
79184: LD_VAR 0 2
79188: PPUSH
79189: LD_VAR 0 3
79193: PPUSH
79194: LD_VAR 0 4
79198: PPUSH
79199: LD_VAR 0 5
79203: PPUSH
79204: LD_VAR 0 6
79208: PPUSH
79209: LD_VAR 0 7
79213: PPUSH
79214: LD_VAR 0 8
79218: PPUSH
79219: LD_VAR 0 9
79223: PPUSH
79224: LD_VAR 0 10
79228: PPUSH
79229: LD_VAR 0 11
79233: PPUSH
79234: CALL 32181 0 11
79238: GO 79241
79240: POP
// end ;
79241: PPOPN 11
79243: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
79244: LD_VAR 0 1
79248: PPUSH
79249: LD_VAR 0 2
79253: PPUSH
79254: LD_VAR 0 3
79258: PPUSH
79259: LD_VAR 0 4
79263: PPUSH
79264: LD_VAR 0 5
79268: PPUSH
79269: CALL 34275 0 5
// end ; end_of_file
79273: PPOPN 5
79275: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
79276: LD_VAR 0 1
79280: PPUSH
79281: LD_VAR 0 2
79285: PPUSH
79286: LD_VAR 0 3
79290: PPUSH
79291: LD_VAR 0 4
79295: PPUSH
79296: LD_VAR 0 5
79300: PPUSH
79301: LD_VAR 0 6
79305: PPUSH
79306: CALL 19874 0 6
// end ;
79310: PPOPN 6
79312: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
79313: CALL 19849 0 0
// end ;
79317: PPOPN 1
79319: END
