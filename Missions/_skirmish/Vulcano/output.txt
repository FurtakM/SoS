// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// PrepareTrigger ;
  15: CALL 40 0 0
// PrepareVulcanoBase ;
  19: CALL 1142 0 0
// PrepareRussian ;
  23: CALL 3838 0 0
// PrepareLegion ;
  27: CALL 8157 0 0
// Action ;
  31: CALL 11688 0 0
// InitArt ;
  35: CALL 241 0 0
// end ;
  39: END
// export base_captured , russian_prepared , ru_can_attack , ru_sib_bomb , chance_to_bomb , player_res_art , artifact_progress , player_artifact_ready , art_icon , time_res_art , player_commander , time_to_reuse , mine_vulc , medal_enabled , debug , dead_counter , kill_counter , veh_counter , tech_counter , sib_contamin_counter , event_legion_attack , event_russian_attack , event_alliance_attack ; function PrepareTrigger ; begin
  40: LD_INT 0
  42: PPUSH
// debug := false ;
  43: LD_ADDR_EXP 15
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// base_captured := false ;
  51: LD_ADDR_EXP 1
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// russian_prepared := false ;
  59: LD_ADDR_EXP 2
  63: PUSH
  64: LD_INT 0
  66: ST_TO_ADDR
// ru_can_attack := false ;
  67: LD_ADDR_EXP 3
  71: PUSH
  72: LD_INT 0
  74: ST_TO_ADDR
// ru_sib_bomb := false ;
  75: LD_ADDR_EXP 4
  79: PUSH
  80: LD_INT 0
  82: ST_TO_ADDR
// chance_to_bomb := [ 5 , 10 , 25 ] [ Difficulty ] ;
  83: LD_ADDR_EXP 5
  87: PUSH
  88: LD_INT 5
  90: PUSH
  91: LD_INT 10
  93: PUSH
  94: LD_INT 25
  96: PUSH
  97: EMPTY
  98: LIST
  99: LIST
 100: LIST
 101: PUSH
 102: LD_OWVAR 67
 106: ARRAY
 107: ST_TO_ADDR
// player_res_art := false ;
 108: LD_ADDR_EXP 6
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// player_artifact_ready := false ;
 116: LD_ADDR_EXP 8
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// art_icon := art_use_atom ;
 124: LD_ADDR_EXP 9
 128: PUSH
 129: LD_INT 7
 131: ST_TO_ADDR
// time_res_art := 600 ;
 132: LD_ADDR_EXP 10
 136: PUSH
 137: LD_INT 600
 139: ST_TO_ADDR
// time_to_reuse := 10 10$00 ;
 140: LD_ADDR_EXP 12
 144: PUSH
 145: LD_INT 21000
 147: ST_TO_ADDR
// mine_vulc := false ;
 148: LD_ADDR_EXP 13
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// medal_enabled := false ;
 156: LD_ADDR_EXP 14
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// dead_counter := 0 ;
 164: LD_ADDR_EXP 16
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// kill_counter := 0 ;
 172: LD_ADDR_EXP 17
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// veh_counter := 0 ;
 180: LD_ADDR_EXP 18
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// tech_counter := 0 ;
 188: LD_ADDR_EXP 19
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// sib_contamin_counter := 0 ;
 196: LD_ADDR_EXP 20
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// artifact_progress := 0 ;
 204: LD_ADDR_EXP 7
 208: PUSH
 209: LD_INT 0
 211: ST_TO_ADDR
// event_legion_attack := 1 ;
 212: LD_ADDR_EXP 21
 216: PUSH
 217: LD_INT 1
 219: ST_TO_ADDR
// event_russian_attack := 2 ;
 220: LD_ADDR_EXP 22
 224: PUSH
 225: LD_INT 2
 227: ST_TO_ADDR
// event_alliance_attack := 3 ;
 228: LD_ADDR_EXP 23
 232: PUSH
 233: LD_INT 3
 235: ST_TO_ADDR
// end ;
 236: LD_VAR 0 1
 240: RET
// function InitArt ; begin
 241: LD_INT 0
 243: PPUSH
// SetArtifactRes ( your_side , true ) ;
 244: LD_OWVAR 2
 248: PPUSH
 249: LD_INT 1
 251: PPUSH
 252: CALL_OW 467
// end ; end_of_file
 256: LD_VAR 0 1
 260: RET
// export us_commander , us_force , us_skill , us_guy ; export function PrepareAmerican ; var i , filter , un , team ; begin
 261: LD_INT 0
 263: PPUSH
 264: PPUSH
 265: PPUSH
 266: PPUSH
 267: PPUSH
// us_skill := [ 7 , 6 , 5 ] [ Difficulty ] ;
 268: LD_ADDR_EXP 26
 272: PUSH
 273: LD_INT 7
 275: PUSH
 276: LD_INT 6
 278: PUSH
 279: LD_INT 5
 281: PUSH
 282: EMPTY
 283: LIST
 284: LIST
 285: LIST
 286: PUSH
 287: LD_OWVAR 67
 291: ARRAY
 292: ST_TO_ADDR
// us_force := [ ] ;
 293: LD_ADDR_EXP 25
 297: PUSH
 298: EMPTY
 299: ST_TO_ADDR
// RemoveEnvironmentArea ( evn ) ;
 300: LD_INT 17
 302: PPUSH
 303: CALL_OW 355
// PrepareAllianceAI ( ) ;
 307: CALL 17088 0 0
// uc_side := 1 ;
 311: LD_ADDR_OWVAR 20
 315: PUSH
 316: LD_INT 1
 318: ST_TO_ADDR
// uc_nation := nation_american ;
 319: LD_ADDR_OWVAR 21
 323: PUSH
 324: LD_INT 1
 326: ST_TO_ADDR
// hc_gallery :=  ;
 327: LD_ADDR_OWVAR 33
 331: PUSH
 332: LD_STRING 
 334: ST_TO_ADDR
// hc_name :=  ;
 335: LD_ADDR_OWVAR 26
 339: PUSH
 340: LD_STRING 
 342: ST_TO_ADDR
// hc_importance := 0 ;
 343: LD_ADDR_OWVAR 32
 347: PUSH
 348: LD_INT 0
 350: ST_TO_ADDR
// for i = 1 to 11 do
 351: LD_ADDR_VAR 0 2
 355: PUSH
 356: DOUBLE
 357: LD_INT 1
 359: DEC
 360: ST_TO_ADDR
 361: LD_INT 11
 363: PUSH
 364: FOR_TO
 365: IFFALSE 418
// begin PrepareHuman ( false , Rand ( 1 , 4 ) , us_skill ) ;
 367: LD_INT 0
 369: PPUSH
 370: LD_INT 1
 372: PPUSH
 373: LD_INT 4
 375: PPUSH
 376: CALL_OW 12
 380: PPUSH
 381: LD_EXP 26
 385: PPUSH
 386: CALL_OW 380
// un := CreateHuman ;
 390: LD_ADDR_VAR 0 4
 394: PUSH
 395: CALL_OW 44
 399: ST_TO_ADDR
// us_force := us_force ^ un ;
 400: LD_ADDR_EXP 25
 404: PUSH
 405: LD_EXP 25
 409: PUSH
 410: LD_VAR 0 4
 414: ADD
 415: ST_TO_ADDR
// end ;
 416: GO 364
 418: POP
 419: POP
// hc_importance := 100 ;
 420: LD_ADDR_OWVAR 32
 424: PUSH
 425: LD_INT 100
 427: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , us_skill ) ;
 428: LD_INT 1
 430: PPUSH
 431: LD_INT 1
 433: PPUSH
 434: LD_EXP 26
 438: PPUSH
 439: CALL_OW 380
// hc_gallery := skirmish ;
 443: LD_ADDR_OWVAR 33
 447: PUSH
 448: LD_STRING skirmish
 450: ST_TO_ADDR
// hc_face_number := 10 ;
 451: LD_ADDR_OWVAR 34
 455: PUSH
 456: LD_INT 10
 458: ST_TO_ADDR
// hc_name := Michael Anderson ;
 459: LD_ADDR_OWVAR 26
 463: PUSH
 464: LD_STRING Michael Anderson
 466: ST_TO_ADDR
// us_commander := CreateHuman ;
 467: LD_ADDR_EXP 24
 471: PUSH
 472: CALL_OW 44
 476: ST_TO_ADDR
// player_commander := us_commander ;
 477: LD_ADDR_EXP 11
 481: PUSH
 482: LD_EXP 24
 486: ST_TO_ADDR
// hc_importance := 0 ;
 487: LD_ADDR_OWVAR 32
 491: PUSH
 492: LD_INT 0
 494: ST_TO_ADDR
// hc_gallery :=  ;
 495: LD_ADDR_OWVAR 33
 499: PUSH
 500: LD_STRING 
 502: ST_TO_ADDR
// team := CharacterSelection ( text , [ 7 , 6 , 5 ] [ Difficulty ] , [ 7 , 6 , 5 ] [ Difficulty ] , [ sel_change_class , us_commander , sel_changeable , sel_not_hired ] ^ us_force , [ class_soldier , [ class_mechanic , 1 ] , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , [ 5 , 5 , - 1 ] [ Difficulty ] ] ) ;
 503: LD_ADDR_VAR 0 5
 507: PUSH
 508: LD_STRING text
 510: PPUSH
 511: LD_INT 7
 513: PUSH
 514: LD_INT 6
 516: PUSH
 517: LD_INT 5
 519: PUSH
 520: EMPTY
 521: LIST
 522: LIST
 523: LIST
 524: PUSH
 525: LD_OWVAR 67
 529: ARRAY
 530: PPUSH
 531: LD_INT 7
 533: PUSH
 534: LD_INT 6
 536: PUSH
 537: LD_INT 5
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: LIST
 544: PUSH
 545: LD_OWVAR 67
 549: ARRAY
 550: PPUSH
 551: LD_INT -5
 553: PUSH
 554: LD_EXP 24
 558: PUSH
 559: LD_INT -3
 561: PUSH
 562: LD_INT -2
 564: PUSH
 565: EMPTY
 566: LIST
 567: LIST
 568: LIST
 569: LIST
 570: PUSH
 571: LD_EXP 25
 575: ADD
 576: PPUSH
 577: LD_INT 1
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 1
 585: PUSH
 586: EMPTY
 587: LIST
 588: LIST
 589: PUSH
 590: LD_INT 2
 592: PUSH
 593: LD_INT 1
 595: PUSH
 596: EMPTY
 597: LIST
 598: LIST
 599: PUSH
 600: LD_INT 4
 602: PUSH
 603: LD_INT 1
 605: PUSH
 606: EMPTY
 607: LIST
 608: LIST
 609: PUSH
 610: LD_INT 5
 612: PUSH
 613: LD_INT 5
 615: PUSH
 616: LD_INT 1
 618: NEG
 619: PUSH
 620: EMPTY
 621: LIST
 622: LIST
 623: LIST
 624: PUSH
 625: LD_OWVAR 67
 629: ARRAY
 630: PUSH
 631: EMPTY
 632: LIST
 633: LIST
 634: LIST
 635: LIST
 636: LIST
 637: PPUSH
 638: CALL_OW 42
 642: ST_TO_ADDR
// team := team ^ us_commander ;
 643: LD_ADDR_VAR 0 5
 647: PUSH
 648: LD_VAR 0 5
 652: PUSH
 653: LD_EXP 24
 657: ADD
 658: ST_TO_ADDR
// for i = 1 to team do
 659: LD_ADDR_VAR 0 2
 663: PUSH
 664: DOUBLE
 665: LD_INT 1
 667: DEC
 668: ST_TO_ADDR
 669: LD_VAR 0 5
 673: PUSH
 674: FOR_TO
 675: IFFALSE 875
// begin if GetClass ( team [ i ] ) = class_mechanic then
 677: LD_VAR 0 5
 681: PUSH
 682: LD_VAR 0 2
 686: ARRAY
 687: PPUSH
 688: CALL_OW 257
 692: PUSH
 693: LD_INT 3
 695: EQUAL
 696: IFFALSE 837
// begin vc_chassis := [ us_medium_tracked , us_heavy_tracked , us_morphling ] [ i mod 3 + 1 ] ;
 698: LD_ADDR_OWVAR 37
 702: PUSH
 703: LD_INT 3
 705: PUSH
 706: LD_INT 4
 708: PUSH
 709: LD_INT 5
 711: PUSH
 712: EMPTY
 713: LIST
 714: LIST
 715: LIST
 716: PUSH
 717: LD_VAR 0 2
 721: PUSH
 722: LD_INT 3
 724: MOD
 725: PUSH
 726: LD_INT 1
 728: PLUS
 729: ARRAY
 730: ST_TO_ADDR
// vc_engine := engine_siberite ;
 731: LD_ADDR_OWVAR 39
 735: PUSH
 736: LD_INT 3
 738: ST_TO_ADDR
// vc_control := control_manual ;
 739: LD_ADDR_OWVAR 38
 743: PUSH
 744: LD_INT 1
 746: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_laser ] [ rand ( 1 , 3 ) ] ;
 747: LD_ADDR_OWVAR 40
 751: PUSH
 752: LD_INT 4
 754: PUSH
 755: LD_INT 5
 757: PUSH
 758: LD_INT 9
 760: PUSH
 761: EMPTY
 762: LIST
 763: LIST
 764: LIST
 765: PUSH
 766: LD_INT 1
 768: PPUSH
 769: LD_INT 3
 771: PPUSH
 772: CALL_OW 12
 776: ARRAY
 777: ST_TO_ADDR
// un := CreateVehicle ;
 778: LD_ADDR_VAR 0 4
 782: PUSH
 783: CALL_OW 45
 787: ST_TO_ADDR
// SetDir ( un , 2 ) ;
 788: LD_VAR 0 4
 792: PPUSH
 793: LD_INT 2
 795: PPUSH
 796: CALL_OW 233
// PlaceUnitArea ( un , start_north , false ) ;
 800: LD_VAR 0 4
 804: PPUSH
 805: LD_INT 1
 807: PPUSH
 808: LD_INT 0
 810: PPUSH
 811: CALL_OW 49
// PlaceHumanInUnit ( team [ i ] , un ) ;
 815: LD_VAR 0 5
 819: PUSH
 820: LD_VAR 0 2
 824: ARRAY
 825: PPUSH
 826: LD_VAR 0 4
 830: PPUSH
 831: CALL_OW 52
// end else
 835: GO 873
// begin PlaceUnitArea ( team [ i ] , start_north , false ) ;
 837: LD_VAR 0 5
 841: PUSH
 842: LD_VAR 0 2
 846: ARRAY
 847: PPUSH
 848: LD_INT 1
 850: PPUSH
 851: LD_INT 0
 853: PPUSH
 854: CALL_OW 49
// ComHold ( team [ i ] ) ;
 858: LD_VAR 0 5
 862: PUSH
 863: LD_VAR 0 2
 867: ARRAY
 868: PPUSH
 869: CALL_OW 140
// end ; end ;
 873: GO 674
 875: POP
 876: POP
// end ;
 877: LD_VAR 0 1
 881: RET
// every 0 0$38 + 2 2$30 trigger tick < 73500 do
 882: LD_OWVAR 1
 886: PUSH
 887: LD_INT 73500
 889: LESS
 890: IFFALSE 917
 892: GO 894
 894: DISABLE
// begin enable ;
 895: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , extra_crates , true ) ;
 896: LD_INT 1
 898: PPUSH
 899: LD_INT 5
 901: PPUSH
 902: CALL_OW 12
 906: PPUSH
 907: LD_INT 23
 909: PPUSH
 910: LD_INT 1
 912: PPUSH
 913: CALL_OW 55
// end ;
 917: END
// every 1 1$10 do var time , p , l ;
 918: GO 920
 920: DISABLE
 921: LD_INT 0
 923: PPUSH
 924: PPUSH
 925: PPUSH
// begin time := 0 0$44 ;
 926: LD_ADDR_VAR 0 1
 930: PUSH
 931: LD_INT 1540
 933: ST_TO_ADDR
// l := 0 ;
 934: LD_ADDR_VAR 0 3
 938: PUSH
 939: LD_INT 0
 941: ST_TO_ADDR
// repeat begin Wait ( time ) ;
 942: LD_VAR 0 1
 946: PPUSH
 947: CALL_OW 67
// l := l + 1 ;
 951: LD_ADDR_VAR 0 3
 955: PUSH
 956: LD_VAR 0 3
 960: PUSH
 961: LD_INT 1
 963: PLUS
 964: ST_TO_ADDR
// if GetListOfCratesInArea ( us_crates ) < 20 then
 965: LD_INT 12
 967: PPUSH
 968: CALL_OW 435
 972: PUSH
 973: LD_INT 20
 975: LESS
 976: IFFALSE 1035
// begin CreateCratesArea ( Rand ( 1 , 5 ) , us_crates , true ) ;
 978: LD_INT 1
 980: PPUSH
 981: LD_INT 5
 983: PPUSH
 984: CALL_OW 12
 988: PPUSH
 989: LD_INT 12
 991: PPUSH
 992: LD_INT 1
 994: PPUSH
 995: CALL_OW 55
// Wait ( Rand ( 0 0$39 , 0 0$48 ) ) ;
 999: LD_INT 1365
1001: PPUSH
1002: LD_INT 1680
1004: PPUSH
1005: CALL_OW 12
1009: PPUSH
1010: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 5 ) , us_crates , true ) ;
1014: LD_INT 1
1016: PPUSH
1017: LD_INT 5
1019: PPUSH
1020: CALL_OW 12
1024: PPUSH
1025: LD_INT 12
1027: PPUSH
1028: LD_INT 1
1030: PPUSH
1031: CALL_OW 55
// end ; p := Rand ( 0 , 1 ) ;
1035: LD_ADDR_VAR 0 2
1039: PUSH
1040: LD_INT 0
1042: PPUSH
1043: LD_INT 1
1045: PPUSH
1046: CALL_OW 12
1050: ST_TO_ADDR
// if p then
1051: LD_VAR 0 2
1055: IFFALSE 1090
// begin Wait ( Rand ( 0 0$09 , 0 0$20 ) ) ;
1057: LD_INT 315
1059: PPUSH
1060: LD_INT 700
1062: PPUSH
1063: CALL_OW 12
1067: PPUSH
1068: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 4 ) , true ) ;
1072: LD_INT 1
1074: PPUSH
1075: LD_INT 4
1077: PPUSH
1078: CALL_OW 12
1082: PPUSH
1083: LD_INT 1
1085: PPUSH
1086: CALL_OW 57
// end ; if l mod [ 15 , 13 , 11 ] [ Difficulty ] = 0 then
1090: LD_VAR 0 3
1094: PUSH
1095: LD_INT 15
1097: PUSH
1098: LD_INT 13
1100: PUSH
1101: LD_INT 11
1103: PUSH
1104: EMPTY
1105: LIST
1106: LIST
1107: LIST
1108: PUSH
1109: LD_OWVAR 67
1113: ARRAY
1114: MOD
1115: PUSH
1116: LD_INT 0
1118: EQUAL
1119: IFFALSE 1135
// time := time + 2 2$00 ;
1121: LD_ADDR_VAR 0 1
1125: PUSH
1126: LD_VAR 0 1
1130: PUSH
1131: LD_INT 4200
1133: PLUS
1134: ST_TO_ADDR
// end until false ;
1135: LD_INT 0
1137: IFFALSE 942
// end ; end_of_file
1139: PPOPN 3
1141: END
// export russians_in_base ; export function PrepareVulcanoBase ; var i , filter , hp , un , area ; begin
1142: LD_INT 0
1144: PPUSH
1145: PPUSH
1146: PPUSH
1147: PPUSH
1148: PPUSH
1149: PPUSH
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) ;
1150: LD_ADDR_VAR 0 3
1154: PUSH
1155: LD_INT 22
1157: PUSH
1158: LD_INT 4
1160: PUSH
1161: EMPTY
1162: LIST
1163: LIST
1164: PUSH
1165: LD_INT 21
1167: PUSH
1168: LD_INT 3
1170: PUSH
1171: EMPTY
1172: LIST
1173: LIST
1174: PUSH
1175: EMPTY
1176: LIST
1177: LIST
1178: PPUSH
1179: CALL_OW 69
1183: ST_TO_ADDR
// hp := [ 470 , 370 , 290 ] [ Difficulty ] ;
1184: LD_ADDR_VAR 0 4
1188: PUSH
1189: LD_INT 470
1191: PUSH
1192: LD_INT 370
1194: PUSH
1195: LD_INT 290
1197: PUSH
1198: EMPTY
1199: LIST
1200: LIST
1201: LIST
1202: PUSH
1203: LD_OWVAR 67
1207: ARRAY
1208: ST_TO_ADDR
// case Difficulty of 2 :
1209: LD_OWVAR 67
1213: PUSH
1214: LD_INT 2
1216: DOUBLE
1217: EQUAL
1218: IFTRUE 1222
1220: GO 1253
1222: POP
// begin DestroyUnit ( UnitFilter ( filter , [ f_btype , b_bunker ] ) [ 1 ] ) ;
1223: LD_VAR 0 3
1227: PPUSH
1228: LD_INT 30
1230: PUSH
1231: LD_INT 32
1233: PUSH
1234: EMPTY
1235: LIST
1236: LIST
1237: PPUSH
1238: CALL_OW 72
1242: PUSH
1243: LD_INT 1
1245: ARRAY
1246: PPUSH
1247: CALL_OW 65
// end ; 3 :
1251: GO 1329
1253: LD_INT 3
1255: DOUBLE
1256: EQUAL
1257: IFTRUE 1261
1259: GO 1328
1261: POP
// begin DestroyUnit ( UnitFilter ( filter , [ f_btype , b_bunker ] ) [ 1 ] ) ;
1262: LD_VAR 0 3
1266: PPUSH
1267: LD_INT 30
1269: PUSH
1270: LD_INT 32
1272: PUSH
1273: EMPTY
1274: LIST
1275: LIST
1276: PPUSH
1277: CALL_OW 72
1281: PUSH
1282: LD_INT 1
1284: ARRAY
1285: PPUSH
1286: CALL_OW 65
// DestroyUnit ( UnitFilter ( filter , [ f_btype , b_solar_power ] ) [ Rand ( 1 , 3 ) ] ) ;
1290: LD_VAR 0 3
1294: PPUSH
1295: LD_INT 30
1297: PUSH
1298: LD_INT 27
1300: PUSH
1301: EMPTY
1302: LIST
1303: LIST
1304: PPUSH
1305: CALL_OW 72
1309: PUSH
1310: LD_INT 1
1312: PPUSH
1313: LD_INT 3
1315: PPUSH
1316: CALL_OW 12
1320: ARRAY
1321: PPUSH
1322: CALL_OW 65
// end ; end ;
1326: GO 1329
1328: POP
// for i = 1 to filter do
1329: LD_ADDR_VAR 0 2
1333: PUSH
1334: DOUBLE
1335: LD_INT 1
1337: DEC
1338: ST_TO_ADDR
1339: LD_VAR 0 3
1343: PUSH
1344: FOR_TO
1345: IFFALSE 1382
// SetLives ( filter [ i ] , hp + Rand ( - 29 , 29 ) ) ;
1347: LD_VAR 0 3
1351: PUSH
1352: LD_VAR 0 2
1356: ARRAY
1357: PPUSH
1358: LD_VAR 0 4
1362: PUSH
1363: LD_INT 29
1365: NEG
1366: PPUSH
1367: LD_INT 29
1369: PPUSH
1370: CALL_OW 12
1374: PLUS
1375: PPUSH
1376: CALL_OW 234
1380: GO 1344
1382: POP
1383: POP
// SetBName ( us_depot , vulcano ) ;
1384: LD_INT 50
1386: PPUSH
1387: LD_STRING vulcano
1389: PPUSH
1390: CALL_OW 500
// hc_importance := 0 ;
1394: LD_ADDR_OWVAR 32
1398: PUSH
1399: LD_INT 0
1401: ST_TO_ADDR
// uc_side := 3 ;
1402: LD_ADDR_OWVAR 20
1406: PUSH
1407: LD_INT 3
1409: ST_TO_ADDR
// uc_nation := nation_russian ;
1410: LD_ADDR_OWVAR 21
1414: PUSH
1415: LD_INT 3
1417: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
1418: LD_ADDR_OWVAR 37
1422: PUSH
1423: LD_INT 22
1425: ST_TO_ADDR
// vc_engine := engine_combustion ;
1426: LD_ADDR_OWVAR 39
1430: PUSH
1431: LD_INT 1
1433: ST_TO_ADDR
// vc_control := control_manual ;
1434: LD_ADDR_OWVAR 38
1438: PUSH
1439: LD_INT 1
1441: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1442: LD_ADDR_OWVAR 40
1446: PUSH
1447: LD_INT 51
1449: ST_TO_ADDR
// un := CreateVehicle ;
1450: LD_ADDR_VAR 0 5
1454: PUSH
1455: CALL_OW 45
1459: ST_TO_ADDR
// PlaceUnitXY ( un , 97 , 138 , false ) ;
1460: LD_VAR 0 5
1464: PPUSH
1465: LD_INT 97
1467: PPUSH
1468: LD_INT 138
1470: PPUSH
1471: LD_INT 0
1473: PPUSH
1474: CALL_OW 48
// SetCargo ( un , mat_cans , 100 ) ;
1478: LD_VAR 0 5
1482: PPUSH
1483: LD_INT 1
1485: PPUSH
1486: LD_INT 100
1488: PPUSH
1489: CALL_OW 290
// SetFuel ( un , 45 ) ;
1493: LD_VAR 0 5
1497: PPUSH
1498: LD_INT 45
1500: PPUSH
1501: CALL_OW 240
// un := CreateVehicle ;
1505: LD_ADDR_VAR 0 5
1509: PUSH
1510: CALL_OW 45
1514: ST_TO_ADDR
// PlaceUnitXY ( un , 109 , 154 , false ) ;
1515: LD_VAR 0 5
1519: PPUSH
1520: LD_INT 109
1522: PPUSH
1523: LD_INT 154
1525: PPUSH
1526: LD_INT 0
1528: PPUSH
1529: CALL_OW 48
// SetCargo ( un , mat_cans , 100 ) ;
1533: LD_VAR 0 5
1537: PPUSH
1538: LD_INT 1
1540: PPUSH
1541: LD_INT 100
1543: PPUSH
1544: CALL_OW 290
// SetDir ( un , 1 ) ;
1548: LD_VAR 0 5
1552: PPUSH
1553: LD_INT 1
1555: PPUSH
1556: CALL_OW 233
// SetFuel ( un , 50 ) ;
1560: LD_VAR 0 5
1564: PPUSH
1565: LD_INT 50
1567: PPUSH
1568: CALL_OW 240
// russians_in_base := [ ] ;
1572: LD_ADDR_EXP 28
1576: PUSH
1577: EMPTY
1578: ST_TO_ADDR
// for i = 1 to [ 6 , 6 , 7 ] [ Difficulty ] do
1579: LD_ADDR_VAR 0 2
1583: PUSH
1584: DOUBLE
1585: LD_INT 1
1587: DEC
1588: ST_TO_ADDR
1589: LD_INT 6
1591: PUSH
1592: LD_INT 6
1594: PUSH
1595: LD_INT 7
1597: PUSH
1598: EMPTY
1599: LIST
1600: LIST
1601: LIST
1602: PUSH
1603: LD_OWVAR 67
1607: ARRAY
1608: PUSH
1609: FOR_TO
1610: IFFALSE 1691
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
1612: LD_INT 0
1614: PPUSH
1615: LD_INT 1
1617: PPUSH
1618: LD_INT 4
1620: PUSH
1621: LD_INT 5
1623: PUSH
1624: LD_INT 6
1626: PUSH
1627: EMPTY
1628: LIST
1629: LIST
1630: LIST
1631: PUSH
1632: LD_OWVAR 67
1636: ARRAY
1637: PPUSH
1638: CALL_OW 380
// un := CreateHuman ;
1642: LD_ADDR_VAR 0 5
1646: PUSH
1647: CALL_OW 44
1651: ST_TO_ADDR
// russians_in_base := russians_in_base ^ un ;
1652: LD_ADDR_EXP 28
1656: PUSH
1657: LD_EXP 28
1661: PUSH
1662: LD_VAR 0 5
1666: ADD
1667: ST_TO_ADDR
// PlaceUnitXYR ( un , 94 , 145 , 10 , false ) ;
1668: LD_VAR 0 5
1672: PPUSH
1673: LD_INT 94
1675: PPUSH
1676: LD_INT 145
1678: PPUSH
1679: LD_INT 10
1681: PPUSH
1682: LD_INT 0
1684: PPUSH
1685: CALL_OW 50
// end ;
1689: GO 1609
1691: POP
1692: POP
// end ;
1693: LD_VAR 0 1
1697: RET
// every 0 0$2 trigger UnitFilter ( russians_in_base , [ f_see , 1 ] ) do var enemy ;
1698: LD_EXP 28
1702: PPUSH
1703: LD_INT 101
1705: PUSH
1706: LD_INT 1
1708: PUSH
1709: EMPTY
1710: LIST
1711: LIST
1712: PPUSH
1713: CALL_OW 72
1717: IFFALSE 1783
1719: GO 1721
1721: DISABLE
1722: LD_INT 0
1724: PPUSH
// begin enemy := UnitFilter ( russians_in_base , [ f_see , 1 ] ) [ 1 ] ;
1725: LD_ADDR_VAR 0 1
1729: PUSH
1730: LD_EXP 28
1734: PPUSH
1735: LD_INT 101
1737: PUSH
1738: LD_INT 1
1740: PUSH
1741: EMPTY
1742: LIST
1743: LIST
1744: PPUSH
1745: CALL_OW 72
1749: PUSH
1750: LD_INT 1
1752: ARRAY
1753: ST_TO_ADDR
// ComAgressiveMove ( russians_in_base , GetX ( enemy ) , GetY ( enemy ) ) ;
1754: LD_EXP 28
1758: PPUSH
1759: LD_VAR 0 1
1763: PPUSH
1764: CALL_OW 250
1768: PPUSH
1769: LD_VAR 0 1
1773: PPUSH
1774: CALL_OW 251
1778: PPUSH
1779: CALL_OW 114
// end ;
1783: PPOPN 1
1785: END
// every 0 0$01 trigger GetDistUnitToSide ( us_depot , 1 ) < 40 do var i , un ;
1786: LD_INT 50
1788: PPUSH
1789: LD_INT 1
1791: PPUSH
1792: CALL 2162 0 2
1796: PUSH
1797: LD_INT 40
1799: LESS
1800: IFFALSE 1997
1802: GO 1804
1804: DISABLE
1805: LD_INT 0
1807: PPUSH
1808: PPUSH
// begin uc_side := 4 ;
1809: LD_ADDR_OWVAR 20
1813: PUSH
1814: LD_INT 4
1816: ST_TO_ADDR
// uc_nation := nation_american ;
1817: LD_ADDR_OWVAR 21
1821: PUSH
1822: LD_INT 1
1824: ST_TO_ADDR
// hc_importance := 0 ;
1825: LD_ADDR_OWVAR 32
1829: PUSH
1830: LD_INT 0
1832: ST_TO_ADDR
// for i = 1 to 7 do
1833: LD_ADDR_VAR 0 1
1837: PUSH
1838: DOUBLE
1839: LD_INT 1
1841: DEC
1842: ST_TO_ADDR
1843: LD_INT 7
1845: PUSH
1846: FOR_TO
1847: IFFALSE 1911
// begin PrepareHuman ( false , Rand ( 1 , 3 ) , us_skill ) ;
1849: LD_INT 0
1851: PPUSH
1852: LD_INT 1
1854: PPUSH
1855: LD_INT 3
1857: PPUSH
1858: CALL_OW 12
1862: PPUSH
1863: LD_EXP 26
1867: PPUSH
1868: CALL_OW 380
// un := CreateHuman ;
1872: LD_ADDR_VAR 0 2
1876: PUSH
1877: CALL_OW 44
1881: ST_TO_ADDR
// PlaceUnitArea ( un , base_resp , false ) ;
1882: LD_VAR 0 2
1886: PPUSH
1887: LD_INT 7
1889: PPUSH
1890: LD_INT 0
1892: PPUSH
1893: CALL_OW 49
// SetLives ( un , 10 ) ;
1897: LD_VAR 0 2
1901: PPUSH
1902: LD_INT 10
1904: PPUSH
1905: CALL_OW 234
// end ;
1909: GO 1846
1911: POP
1912: POP
// for i = 1 to 5 do
1913: LD_ADDR_VAR 0 1
1917: PUSH
1918: DOUBLE
1919: LD_INT 1
1921: DEC
1922: ST_TO_ADDR
1923: LD_INT 5
1925: PUSH
1926: FOR_TO
1927: IFFALSE 1995
// begin PrepareHuman ( false , 4 , us_skill ) ;
1929: LD_INT 0
1931: PPUSH
1932: LD_INT 4
1934: PPUSH
1935: LD_EXP 26
1939: PPUSH
1940: CALL_OW 380
// SetDir ( un , 1 ) ;
1944: LD_VAR 0 2
1948: PPUSH
1949: LD_INT 1
1951: PPUSH
1952: CALL_OW 233
// un := CreateHuman ;
1956: LD_ADDR_VAR 0 2
1960: PUSH
1961: CALL_OW 44
1965: ST_TO_ADDR
// PlaceUnitArea ( un , rekt , false ) ;
1966: LD_VAR 0 2
1970: PPUSH
1971: LD_INT 22
1973: PPUSH
1974: LD_INT 0
1976: PPUSH
1977: CALL_OW 49
// SetLives ( un , 10 ) ;
1981: LD_VAR 0 2
1985: PPUSH
1986: LD_INT 10
1988: PPUSH
1989: CALL_OW 234
// end ;
1993: GO 1926
1995: POP
1996: POP
// end ; end_of_file
1997: PPOPN 2
1999: END
// export function PrepareApeman2 ( n ) ; var un , i ; begin
2000: LD_INT 0
2002: PPUSH
2003: PPUSH
2004: PPUSH
// for i = 1 to n do
2005: LD_ADDR_VAR 0 4
2009: PUSH
2010: DOUBLE
2011: LD_INT 1
2013: DEC
2014: ST_TO_ADDR
2015: LD_VAR 0 1
2019: PUSH
2020: FOR_TO
2021: IFFALSE 2155
// begin uc_side := 0 ;
2023: LD_ADDR_OWVAR 20
2027: PUSH
2028: LD_INT 0
2030: ST_TO_ADDR
// uc_nation := 0 ;
2031: LD_ADDR_OWVAR 21
2035: PUSH
2036: LD_INT 0
2038: ST_TO_ADDR
// hc_class := class_apeman ;
2039: LD_ADDR_OWVAR 28
2043: PUSH
2044: LD_INT 12
2046: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
2047: LD_ADDR_OWVAR 31
2051: PUSH
2052: LD_INT 0
2054: PUSH
2055: LD_INT 0
2057: PUSH
2058: LD_INT 0
2060: PUSH
2061: LD_INT 0
2063: PUSH
2064: EMPTY
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: ST_TO_ADDR
// hc_name :=  ;
2070: LD_ADDR_OWVAR 26
2074: PUSH
2075: LD_STRING 
2077: ST_TO_ADDR
// hc_gallery :=  ;
2078: LD_ADDR_OWVAR 33
2082: PUSH
2083: LD_STRING 
2085: ST_TO_ADDR
// hc_importance := 0 ;
2086: LD_ADDR_OWVAR 32
2090: PUSH
2091: LD_INT 0
2093: ST_TO_ADDR
// un := CreateHuman ;
2094: LD_ADDR_VAR 0 3
2098: PUSH
2099: CALL_OW 44
2103: ST_TO_ADDR
// PlaceUnitArea ( un , [ ape1 , ape2 ] [ Rand ( 1 , 2 ) ] , false ) ;
2104: LD_VAR 0 3
2108: PPUSH
2109: LD_INT 19
2111: PUSH
2112: LD_INT 20
2114: PUSH
2115: EMPTY
2116: LIST
2117: LIST
2118: PUSH
2119: LD_INT 1
2121: PPUSH
2122: LD_INT 2
2124: PPUSH
2125: CALL_OW 12
2129: ARRAY
2130: PPUSH
2131: LD_INT 0
2133: PPUSH
2134: CALL_OW 49
// Wait ( Rand ( 0 0$33 , 2 2$33 ) ) ;
2138: LD_INT 1155
2140: PPUSH
2141: LD_INT 5355
2143: PPUSH
2144: CALL_OW 12
2148: PPUSH
2149: CALL_OW 67
// end ;
2153: GO 2020
2155: POP
2156: POP
// end ;
2157: LD_VAR 0 2
2161: RET
// export function GetDistUnitToSide ( unit , side ) ; var tmp , dist ; begin
2162: LD_INT 0
2164: PPUSH
2165: PPUSH
2166: PPUSH
// tmp := NearestUnitToUnit ( FilterAllUnits ( [ f_side , side ] ) , unit ) ;
2167: LD_ADDR_VAR 0 4
2171: PUSH
2172: LD_INT 22
2174: PUSH
2175: LD_VAR 0 2
2179: PUSH
2180: EMPTY
2181: LIST
2182: LIST
2183: PPUSH
2184: CALL_OW 69
2188: PPUSH
2189: LD_VAR 0 1
2193: PPUSH
2194: CALL_OW 74
2198: ST_TO_ADDR
// dist := GetDistUnits ( unit , tmp ) ;
2199: LD_ADDR_VAR 0 5
2203: PUSH
2204: LD_VAR 0 1
2208: PPUSH
2209: LD_VAR 0 4
2213: PPUSH
2214: CALL_OW 296
2218: ST_TO_ADDR
// if dist >= 9999 then
2219: LD_VAR 0 5
2223: PUSH
2224: LD_INT 9999
2226: GREATEREQUAL
2227: IFFALSE 2240
// result := - 1 else
2229: LD_ADDR_VAR 0 3
2233: PUSH
2234: LD_INT 1
2236: NEG
2237: ST_TO_ADDR
2238: GO 2250
// result := dist ;
2240: LD_ADDR_VAR 0 3
2244: PUSH
2245: LD_VAR 0 5
2249: ST_TO_ADDR
// end ;
2250: LD_VAR 0 3
2254: RET
// export function NearestUnitToSide ( plist , side ) ; var i , tmp , unit ; begin
2255: LD_INT 0
2257: PPUSH
2258: PPUSH
2259: PPUSH
2260: PPUSH
// tmp := 9999 ;
2261: LD_ADDR_VAR 0 5
2265: PUSH
2266: LD_INT 9999
2268: ST_TO_ADDR
// for i = 1 to plist do
2269: LD_ADDR_VAR 0 4
2273: PUSH
2274: DOUBLE
2275: LD_INT 1
2277: DEC
2278: ST_TO_ADDR
2279: LD_VAR 0 1
2283: PUSH
2284: FOR_TO
2285: IFFALSE 2359
// if GetDistUnitToSide ( plist [ i ] , side ) < tmp then
2287: LD_VAR 0 1
2291: PUSH
2292: LD_VAR 0 4
2296: ARRAY
2297: PPUSH
2298: LD_VAR 0 2
2302: PPUSH
2303: CALL 2162 0 2
2307: PUSH
2308: LD_VAR 0 5
2312: LESS
2313: IFFALSE 2357
// begin tmp := GetDistUnitToSide ( plist [ i ] , side ) ;
2315: LD_ADDR_VAR 0 5
2319: PUSH
2320: LD_VAR 0 1
2324: PUSH
2325: LD_VAR 0 4
2329: ARRAY
2330: PPUSH
2331: LD_VAR 0 2
2335: PPUSH
2336: CALL 2162 0 2
2340: ST_TO_ADDR
// unit := plist [ i ] ;
2341: LD_ADDR_VAR 0 6
2345: PUSH
2346: LD_VAR 0 1
2350: PUSH
2351: LD_VAR 0 4
2355: ARRAY
2356: ST_TO_ADDR
// end ;
2357: GO 2284
2359: POP
2360: POP
// result := unit ;
2361: LD_ADDR_VAR 0 3
2365: PUSH
2366: LD_VAR 0 6
2370: ST_TO_ADDR
// end ;
2371: LD_VAR 0 3
2375: RET
// export function CalculateCommanderPoints ; var points , crates_collected , sib_collected , i ; begin
2376: LD_INT 0
2378: PPUSH
2379: PPUSH
2380: PPUSH
2381: PPUSH
2382: PPUSH
// points := [ 1000 , 2500 , 5000 ] [ Difficulty ] ;
2383: LD_ADDR_VAR 0 2
2387: PUSH
2388: LD_INT 1000
2390: PUSH
2391: LD_INT 2500
2393: PUSH
2394: LD_INT 5000
2396: PUSH
2397: EMPTY
2398: LIST
2399: LIST
2400: LIST
2401: PUSH
2402: LD_OWVAR 67
2406: ARRAY
2407: ST_TO_ADDR
// points := points + ( - 1 * FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) * 30 ) ;
2408: LD_ADDR_VAR 0 2
2412: PUSH
2413: LD_VAR 0 2
2417: PUSH
2418: LD_INT 1
2420: NEG
2421: PUSH
2422: LD_INT 22
2424: PUSH
2425: LD_OWVAR 2
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: PUSH
2434: LD_INT 21
2436: PUSH
2437: LD_INT 3
2439: PUSH
2440: EMPTY
2441: LIST
2442: LIST
2443: PUSH
2444: EMPTY
2445: LIST
2446: LIST
2447: PPUSH
2448: CALL_OW 69
2452: MUL
2453: PUSH
2454: LD_INT 30
2456: MUL
2457: PLUS
2458: ST_TO_ADDR
// points := points + ( kill_counter * 10 ) ;
2459: LD_ADDR_VAR 0 2
2463: PUSH
2464: LD_VAR 0 2
2468: PUSH
2469: LD_EXP 17
2473: PUSH
2474: LD_INT 10
2476: MUL
2477: PLUS
2478: ST_TO_ADDR
// points := points + ( - 1 * kill_counter * 20 ) ;
2479: LD_ADDR_VAR 0 2
2483: PUSH
2484: LD_VAR 0 2
2488: PUSH
2489: LD_INT 1
2491: NEG
2492: PUSH
2493: LD_EXP 17
2497: MUL
2498: PUSH
2499: LD_INT 20
2501: MUL
2502: PLUS
2503: ST_TO_ADDR
// points := points + ( - 1 * ( ( tick / 35 ) / 60 ) * 25 ) ;
2504: LD_ADDR_VAR 0 2
2508: PUSH
2509: LD_VAR 0 2
2513: PUSH
2514: LD_INT 1
2516: NEG
2517: PUSH
2518: LD_OWVAR 1
2522: PUSH
2523: LD_INT 35
2525: DIVREAL
2526: PUSH
2527: LD_INT 60
2529: DIVREAL
2530: MUL
2531: PUSH
2532: LD_INT 25
2534: MUL
2535: PLUS
2536: ST_TO_ADDR
// points := points + ( tech_counter * 15 ) ;
2537: LD_ADDR_VAR 0 2
2541: PUSH
2542: LD_VAR 0 2
2546: PUSH
2547: LD_EXP 19
2551: PUSH
2552: LD_INT 15
2554: MUL
2555: PLUS
2556: ST_TO_ADDR
// points := points + ( - 1 * sib_contamin_counter ) * 1000 ;
2557: LD_ADDR_VAR 0 2
2561: PUSH
2562: LD_VAR 0 2
2566: PUSH
2567: LD_INT 1
2569: NEG
2570: PUSH
2571: LD_EXP 20
2575: MUL
2576: PUSH
2577: LD_INT 1000
2579: MUL
2580: PLUS
2581: ST_TO_ADDR
// points := points + ( veh_counter * 5 ) ;
2582: LD_ADDR_VAR 0 2
2586: PUSH
2587: LD_VAR 0 2
2591: PUSH
2592: LD_EXP 18
2596: PUSH
2597: LD_INT 5
2599: MUL
2600: PLUS
2601: ST_TO_ADDR
// result := points ;
2602: LD_ADDR_VAR 0 1
2606: PUSH
2607: LD_VAR 0 2
2611: ST_TO_ADDR
// end ; end_of_file
2612: LD_VAR 0 1
2616: RET
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2617: LD_VAR 0 1
2621: PPUSH
2622: CALL 35915 0 1
// if un = ru_cargo then
2626: LD_VAR 0 1
2630: PUSH
2631: LD_EXP 31
2635: EQUAL
2636: IFFALSE 2646
// ru_cargo := 0 ;
2638: LD_ADDR_EXP 31
2642: PUSH
2643: LD_INT 0
2645: ST_TO_ADDR
// if GetSide ( un ) = your_side then
2646: LD_VAR 0 1
2650: PPUSH
2651: CALL_OW 255
2655: PUSH
2656: LD_OWVAR 2
2660: EQUAL
2661: IFFALSE 2677
// dead_counter := dead_counter + 1 ;
2663: LD_ADDR_EXP 16
2667: PUSH
2668: LD_EXP 16
2672: PUSH
2673: LD_INT 1
2675: PLUS
2676: ST_TO_ADDR
// if GetSide ( un ) in FilterAllUnits ( [ f_enemy , your_side ] ) then
2677: LD_VAR 0 1
2681: PPUSH
2682: CALL_OW 255
2686: PUSH
2687: LD_INT 81
2689: PUSH
2690: LD_OWVAR 2
2694: PUSH
2695: EMPTY
2696: LIST
2697: LIST
2698: PPUSH
2699: CALL_OW 69
2703: IN
2704: IFFALSE 2720
// kill_counter := kill_counter + 1 ;
2706: LD_ADDR_EXP 17
2710: PUSH
2711: LD_EXP 17
2715: PUSH
2716: LD_INT 1
2718: PLUS
2719: ST_TO_ADDR
// if un = player_commander then
2720: LD_VAR 0 1
2724: PUSH
2725: LD_EXP 11
2729: EQUAL
2730: IFFALSE 2739
// YouLost ( vulcano-lost ) ;
2732: LD_STRING vulcano-lost
2734: PPUSH
2735: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) then
2739: LD_VAR 0 1
2743: PUSH
2744: LD_INT 22
2746: PUSH
2747: LD_INT 3
2749: PUSH
2750: EMPTY
2751: LIST
2752: LIST
2753: PUSH
2754: LD_INT 21
2756: PUSH
2757: LD_INT 3
2759: PUSH
2760: EMPTY
2761: LIST
2762: LIST
2763: PUSH
2764: EMPTY
2765: LIST
2766: LIST
2767: PPUSH
2768: CALL_OW 69
2772: IN
2773: IFFALSE 2891
// begin if GetBType ( un ) = b_turret or GetBType ( un ) = b_siberite_power then
2775: LD_VAR 0 1
2779: PPUSH
2780: CALL_OW 266
2784: PUSH
2785: LD_INT 33
2787: EQUAL
2788: IFTRUE 2805
2790: PUSH
2791: LD_VAR 0 1
2795: PPUSH
2796: CALL_OW 266
2800: PUSH
2801: LD_INT 28
2803: EQUAL
2804: OR
2805: IFFALSE 2891
// begin ru_blist := ru_blist ^ GetBType ( un ) ;
2807: LD_ADDR_EXP 32
2811: PUSH
2812: LD_EXP 32
2816: PUSH
2817: LD_VAR 0 1
2821: PPUSH
2822: CALL_OW 266
2826: ADD
2827: ST_TO_ADDR
// ru_blist := ru_blist ^ GetX ( un ) ;
2828: LD_ADDR_EXP 32
2832: PUSH
2833: LD_EXP 32
2837: PUSH
2838: LD_VAR 0 1
2842: PPUSH
2843: CALL_OW 250
2847: ADD
2848: ST_TO_ADDR
// ru_blist := ru_blist ^ GetY ( un ) ;
2849: LD_ADDR_EXP 32
2853: PUSH
2854: LD_EXP 32
2858: PUSH
2859: LD_VAR 0 1
2863: PPUSH
2864: CALL_OW 251
2868: ADD
2869: ST_TO_ADDR
// ru_blist := ru_blist ^ GetDir ( un ) ;
2870: LD_ADDR_EXP 32
2874: PUSH
2875: LD_EXP 32
2879: PUSH
2880: LD_VAR 0 1
2884: PPUSH
2885: CALL_OW 254
2889: ADD
2890: ST_TO_ADDR
// end ; end ; if un in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) then
2891: LD_VAR 0 1
2895: PUSH
2896: LD_INT 22
2898: PUSH
2899: LD_INT 8
2901: PUSH
2902: EMPTY
2903: LIST
2904: LIST
2905: PUSH
2906: LD_INT 21
2908: PUSH
2909: LD_INT 3
2911: PUSH
2912: EMPTY
2913: LIST
2914: LIST
2915: PUSH
2916: EMPTY
2917: LIST
2918: LIST
2919: PPUSH
2920: CALL_OW 69
2924: IN
2925: IFFALSE 3069
// begin if GetBType ( un ) = b_barracks then
2927: LD_VAR 0 1
2931: PPUSH
2932: CALL_OW 266
2936: PUSH
2937: LD_INT 5
2939: EQUAL
2940: IFFALSE 2958
// legion_blist := legion_blist ^ b_armoury else
2942: LD_ADDR_EXP 40
2946: PUSH
2947: LD_EXP 40
2951: PUSH
2952: LD_INT 4
2954: ADD
2955: ST_TO_ADDR
2956: GO 3006
// if not GetBType ( un ) in [ b_warehouse , b_lab , b_lab_full ] then
2958: LD_VAR 0 1
2962: PPUSH
2963: CALL_OW 266
2967: PUSH
2968: LD_INT 1
2970: PUSH
2971: LD_INT 6
2973: PUSH
2974: LD_INT 8
2976: PUSH
2977: EMPTY
2978: LIST
2979: LIST
2980: LIST
2981: IN
2982: NOT
2983: IFFALSE 3006
// legion_blist := legion_blist ^ GetBType ( un ) ;
2985: LD_ADDR_EXP 40
2989: PUSH
2990: LD_EXP 40
2994: PUSH
2995: LD_VAR 0 1
2999: PPUSH
3000: CALL_OW 266
3004: ADD
3005: ST_TO_ADDR
// legion_blist := legion_blist ^ GetX ( un ) ;
3006: LD_ADDR_EXP 40
3010: PUSH
3011: LD_EXP 40
3015: PUSH
3016: LD_VAR 0 1
3020: PPUSH
3021: CALL_OW 250
3025: ADD
3026: ST_TO_ADDR
// legion_blist := legion_blist ^ GetY ( un ) ;
3027: LD_ADDR_EXP 40
3031: PUSH
3032: LD_EXP 40
3036: PUSH
3037: LD_VAR 0 1
3041: PPUSH
3042: CALL_OW 251
3046: ADD
3047: ST_TO_ADDR
// legion_blist := legion_blist ^ GetDir ( un ) ;
3048: LD_ADDR_EXP 40
3052: PUSH
3053: LD_EXP 40
3057: PUSH
3058: LD_VAR 0 1
3062: PPUSH
3063: CALL_OW 254
3067: ADD
3068: ST_TO_ADDR
// end ; if un in legion_force then
3069: LD_VAR 0 1
3073: PUSH
3074: LD_EXP 37
3078: IN
3079: IFFALSE 3097
// legion_force := legion_force diff un ;
3081: LD_ADDR_EXP 37
3085: PUSH
3086: LD_EXP 37
3090: PUSH
3091: LD_VAR 0 1
3095: DIFF
3096: ST_TO_ADDR
// if un in ru_force then
3097: LD_VAR 0 1
3101: PUSH
3102: LD_EXP 29
3106: IN
3107: IFFALSE 3125
// ru_force := ru_force diff un ;
3109: LD_ADDR_EXP 29
3113: PUSH
3114: LD_EXP 29
3118: PUSH
3119: LD_VAR 0 1
3123: DIFF
3124: ST_TO_ADDR
// if un in al_force then
3125: LD_VAR 0 1
3129: PUSH
3130: LD_EXP 44
3134: IN
3135: IFFALSE 3153
// al_force := al_force diff un ;
3137: LD_ADDR_EXP 44
3141: PUSH
3142: LD_EXP 44
3146: PUSH
3147: LD_VAR 0 1
3151: DIFF
3152: ST_TO_ADDR
// end ;
3153: PPOPN 1
3155: END
// on BuildingComplete ( b ) do var i ;
3156: LD_INT 0
3158: PPUSH
// begin if GetSide ( b ) = 8 then
3159: LD_VAR 0 1
3163: PPUSH
3164: CALL_OW 255
3168: PUSH
3169: LD_INT 8
3171: EQUAL
3172: IFFALSE 3212
// for i = 1 to 4 do
3174: LD_ADDR_VAR 0 2
3178: PUSH
3179: DOUBLE
3180: LD_INT 1
3182: DEC
3183: ST_TO_ADDR
3184: LD_INT 4
3186: PUSH
3187: FOR_TO
3188: IFFALSE 3210
// legion_blist := Delete ( legion_blist , 1 ) ;
3190: LD_ADDR_EXP 40
3194: PUSH
3195: LD_EXP 40
3199: PPUSH
3200: LD_INT 1
3202: PPUSH
3203: CALL_OW 3
3207: ST_TO_ADDR
3208: GO 3187
3210: POP
3211: POP
// if GetSide ( b ) = 3 then
3212: LD_VAR 0 1
3216: PPUSH
3217: CALL_OW 255
3221: PUSH
3222: LD_INT 3
3224: EQUAL
3225: IFFALSE 3265
// for i = 1 to 4 do
3227: LD_ADDR_VAR 0 2
3231: PUSH
3232: DOUBLE
3233: LD_INT 1
3235: DEC
3236: ST_TO_ADDR
3237: LD_INT 4
3239: PUSH
3240: FOR_TO
3241: IFFALSE 3263
// ru_blist := Delete ( ru_blist , 1 ) ;
3243: LD_ADDR_EXP 32
3247: PUSH
3248: LD_EXP 32
3252: PPUSH
3253: LD_INT 1
3255: PPUSH
3256: CALL_OW 3
3260: ST_TO_ADDR
3261: GO 3240
3263: POP
3264: POP
// end ;
3265: PPOPN 2
3267: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
3268: LD_VAR 0 1
3272: PPUSH
3273: LD_VAR 0 2
3277: PPUSH
3278: CALL 35973 0 2
// if not GetWeapon ( veh ) in [ ru_cargo_bay , ru_siberium_rocket ] then
3282: LD_VAR 0 1
3286: PPUSH
3287: CALL_OW 264
3291: PUSH
3292: LD_INT 51
3294: PUSH
3295: LD_INT 48
3297: PUSH
3298: EMPTY
3299: LIST
3300: LIST
3301: IN
3302: NOT
3303: IFFALSE 3351
// begin if GetSide ( veh ) = 3 then
3305: LD_VAR 0 1
3309: PPUSH
3310: CALL_OW 255
3314: PUSH
3315: LD_INT 3
3317: EQUAL
3318: IFFALSE 3351
// begin ComMoveXY ( veh , 149 , 8 ) ;
3320: LD_VAR 0 1
3324: PPUSH
3325: LD_INT 149
3327: PPUSH
3328: LD_INT 8
3330: PPUSH
3331: CALL_OW 111
// ru_force := ru_force ^ veh ;
3335: LD_ADDR_EXP 29
3339: PUSH
3340: LD_EXP 29
3344: PUSH
3345: LD_VAR 0 1
3349: ADD
3350: ST_TO_ADDR
// end ; end ; if not GetWeapon ( veh ) in [ ar_cargo_bay , ar_control_tower ] then
3351: LD_VAR 0 1
3355: PPUSH
3356: CALL_OW 264
3360: PUSH
3361: LD_INT 32
3363: PUSH
3364: LD_INT 31
3366: PUSH
3367: EMPTY
3368: LIST
3369: LIST
3370: IN
3371: NOT
3372: IFFALSE 3405
// begin if GetSide ( veh ) = 8 then
3374: LD_VAR 0 1
3378: PPUSH
3379: CALL_OW 255
3383: PUSH
3384: LD_INT 8
3386: EQUAL
3387: IFFALSE 3405
// legion_force := legion_force ^ veh ;
3389: LD_ADDR_EXP 37
3393: PUSH
3394: LD_EXP 37
3398: PUSH
3399: LD_VAR 0 1
3403: ADD
3404: ST_TO_ADDR
// end ; if GetSide ( veh ) = 3 and not ru_cargo and GetWeapon ( veh ) = ru_cargo_bay then
3405: LD_VAR 0 1
3409: PPUSH
3410: CALL_OW 255
3414: PUSH
3415: LD_INT 3
3417: EQUAL
3418: IFFALSE 3427
3420: PUSH
3421: LD_EXP 31
3425: NOT
3426: AND
3427: IFFALSE 3444
3429: PUSH
3430: LD_VAR 0 1
3434: PPUSH
3435: CALL_OW 264
3439: PUSH
3440: LD_INT 51
3442: EQUAL
3443: AND
3444: IFFALSE 3456
// ru_cargo := veh ;
3446: LD_ADDR_EXP 31
3450: PUSH
3451: LD_VAR 0 1
3455: ST_TO_ADDR
// if GetSide ( veh ) = 7 and your_side <> 7 then
3456: LD_VAR 0 1
3460: PPUSH
3461: CALL_OW 255
3465: PUSH
3466: LD_INT 7
3468: EQUAL
3469: IFFALSE 3481
3471: PUSH
3472: LD_OWVAR 2
3476: PUSH
3477: LD_INT 7
3479: NONEQUAL
3480: AND
3481: IFFALSE 3499
// al_force := al_force ^ veh ;
3483: LD_ADDR_EXP 44
3487: PUSH
3488: LD_EXP 44
3492: PUSH
3493: LD_VAR 0 1
3497: ADD
3498: ST_TO_ADDR
// if GetSide ( veh ) = your_side then
3499: LD_VAR 0 1
3503: PPUSH
3504: CALL_OW 255
3508: PUSH
3509: LD_OWVAR 2
3513: EQUAL
3514: IFFALSE 3530
// veh_counter := veh_counter + 1 ;
3516: LD_ADDR_EXP 18
3520: PUSH
3521: LD_EXP 18
3525: PUSH
3526: LD_INT 1
3528: PLUS
3529: ST_TO_ADDR
// end ;
3530: PPOPN 2
3532: END
// on SibDepositContaminated ( contaminating_scientist , x_of_deposit , y_of_deposit ) do begin if GetSide ( contaminating_scientist ) <> your_side then
3533: LD_VAR 0 1
3537: PPUSH
3538: CALL_OW 255
3542: PUSH
3543: LD_OWVAR 2
3547: NONEQUAL
3548: IFFALSE 3564
// sib_contamin_counter := sib_contamin_counter + 1 ;
3550: LD_ADDR_EXP 20
3554: PUSH
3555: LD_EXP 20
3559: PUSH
3560: LD_INT 1
3562: PLUS
3563: ST_TO_ADDR
// end ;
3564: PPOPN 3
3566: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = your_side then
3567: LD_VAR 0 2
3571: PPUSH
3572: CALL_OW 255
3576: PUSH
3577: LD_OWVAR 2
3581: EQUAL
3582: IFFALSE 3598
// tech_counter := tech_counter + 1 ;
3584: LD_ADDR_EXP 19
3588: PUSH
3589: LD_EXP 19
3593: PUSH
3594: LD_INT 1
3596: PLUS
3597: ST_TO_ADDR
// if tech = 53 and your_side = 1 then
3598: LD_VAR 0 1
3602: PUSH
3603: LD_INT 53
3605: EQUAL
3606: IFFALSE 3618
3608: PUSH
3609: LD_OWVAR 2
3613: PUSH
3614: LD_INT 1
3616: EQUAL
3617: AND
3618: IFFALSE 3633
// SetTech ( 80 , 1 , state_researched ) ;
3620: LD_INT 80
3622: PPUSH
3623: LD_INT 1
3625: PPUSH
3626: LD_INT 2
3628: PPUSH
3629: CALL_OW 322
// end ;
3633: PPOPN 2
3635: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 8 and GetControl ( un ) = control_remote then
3636: LD_VAR 0 1
3640: PPUSH
3641: CALL_OW 255
3645: PUSH
3646: LD_INT 8
3648: EQUAL
3649: IFFALSE 3666
3651: PUSH
3652: LD_VAR 0 1
3656: PPUSH
3657: CALL_OW 263
3661: PUSH
3662: LD_INT 2
3664: EQUAL
3665: AND
3666: IFFALSE 3677
// ComAutodestruct ( un ) ;
3668: LD_VAR 0 1
3672: PPUSH
3673: CALL 75896 0 1
// end ;
3677: PPOPN 1
3679: END
// on SailEvent ( event ) do begin case event of event_legion_attack :
3680: LD_VAR 0 1
3684: PUSH
3685: LD_EXP 21
3689: DOUBLE
3690: EQUAL
3691: IFTRUE 3695
3693: GO 3702
3695: POP
// LegionAttack ( ) ; event_alliance_attack :
3696: CALL 11467 0 0
3700: GO 3737
3702: LD_EXP 23
3706: DOUBLE
3707: EQUAL
3708: IFTRUE 3712
3710: GO 3719
3712: POP
// AllianceAttack ( ) ; event_russian_attack :
3713: CALL 19000 0 0
3717: GO 3737
3719: LD_EXP 22
3723: DOUBLE
3724: EQUAL
3725: IFTRUE 3729
3727: GO 3736
3729: POP
// RussianAttack ( ) ; end ;
3730: CALL 7679 0 0
3734: GO 3737
3736: POP
// end ;
3737: PPOPN 1
3739: END
// every 9 9$30 trigger FilterAllUnits ( [ f_class , class_apeman ] ) < 9 and tick < 50 50$00 do
3740: LD_INT 25
3742: PUSH
3743: LD_INT 12
3745: PUSH
3746: EMPTY
3747: LIST
3748: LIST
3749: PPUSH
3750: CALL_OW 69
3754: PUSH
3755: LD_INT 9
3757: LESS
3758: IFFALSE 3770
3760: PUSH
3761: LD_OWVAR 1
3765: PUSH
3766: LD_INT 105000
3768: LESS
3769: AND
3770: IFFALSE 3803
3772: GO 3774
3774: DISABLE
// begin enable ;
3775: ENABLE
// PrepareApeman2 ( 8 - ( FilterAllUnits ( [ f_class , class_apeman ] ) + 0 ) ) ;
3776: LD_INT 8
3778: PUSH
3779: LD_INT 25
3781: PUSH
3782: LD_INT 12
3784: PUSH
3785: EMPTY
3786: LIST
3787: LIST
3788: PPUSH
3789: CALL_OW 69
3793: PUSH
3794: LD_INT 0
3796: PLUS
3797: MINUS
3798: PPUSH
3799: CALL 2000 0 1
// end ;
3803: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
3804: LD_VAR 0 1
3808: PPUSH
3809: LD_VAR 0 2
3813: PPUSH
3814: LD_VAR 0 3
3818: PPUSH
3819: CALL 35949 0 3
// end ;
3823: PPOPN 3
3825: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
3826: LD_VAR 0 1
3830: PPUSH
3831: CALL 35957 0 1
// end ; end_of_file
3835: PPOPN 1
3837: END
// export ru_force , ru_skill , ru_cargo , ru_blist , ru_vlist , ru_amount , ru_time , ru_teleport_exit ; export function PrepareRussian ; var i , un , ru_depot , ru_factory , ru_teleport , ru_barracks , ru_bunkers , ru_buildings , ru_vehicles , ru_humans ; begin
3838: LD_INT 0
3840: PPUSH
3841: PPUSH
3842: PPUSH
3843: PPUSH
3844: PPUSH
3845: PPUSH
3846: PPUSH
3847: PPUSH
3848: PPUSH
3849: PPUSH
3850: PPUSH
// uc_side := 3 ;
3851: LD_ADDR_OWVAR 20
3855: PUSH
3856: LD_INT 3
3858: ST_TO_ADDR
// uc_nation := nation_russian ;
3859: LD_ADDR_OWVAR 21
3863: PUSH
3864: LD_INT 3
3866: ST_TO_ADDR
// ru_depot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
3867: LD_ADDR_VAR 0 4
3871: PUSH
3872: LD_INT 22
3874: PUSH
3875: LD_INT 3
3877: PUSH
3878: EMPTY
3879: LIST
3880: LIST
3881: PUSH
3882: LD_INT 30
3884: PUSH
3885: LD_INT 1
3887: PUSH
3888: EMPTY
3889: LIST
3890: LIST
3891: PUSH
3892: EMPTY
3893: LIST
3894: LIST
3895: PPUSH
3896: CALL_OW 69
3900: PUSH
3901: LD_INT 1
3903: ARRAY
3904: ST_TO_ADDR
// ru_factory := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3905: LD_ADDR_VAR 0 5
3909: PUSH
3910: LD_INT 22
3912: PUSH
3913: LD_INT 3
3915: PUSH
3916: EMPTY
3917: LIST
3918: LIST
3919: PUSH
3920: LD_INT 30
3922: PUSH
3923: LD_INT 3
3925: PUSH
3926: EMPTY
3927: LIST
3928: LIST
3929: PUSH
3930: EMPTY
3931: LIST
3932: LIST
3933: PPUSH
3934: CALL_OW 69
3938: PUSH
3939: LD_INT 1
3941: ARRAY
3942: ST_TO_ADDR
// ru_teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] ;
3943: LD_ADDR_VAR 0 6
3947: PUSH
3948: LD_INT 22
3950: PUSH
3951: LD_INT 3
3953: PUSH
3954: EMPTY
3955: LIST
3956: LIST
3957: PUSH
3958: LD_INT 30
3960: PUSH
3961: LD_INT 34
3963: PUSH
3964: EMPTY
3965: LIST
3966: LIST
3967: PUSH
3968: EMPTY
3969: LIST
3970: LIST
3971: PPUSH
3972: CALL_OW 69
3976: PUSH
3977: LD_INT 1
3979: ARRAY
3980: ST_TO_ADDR
// ru_bunkers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
3981: LD_ADDR_VAR 0 8
3985: PUSH
3986: LD_INT 22
3988: PUSH
3989: LD_INT 3
3991: PUSH
3992: EMPTY
3993: LIST
3994: LIST
3995: PUSH
3996: LD_INT 30
3998: PUSH
3999: LD_INT 33
4001: PUSH
4002: EMPTY
4003: LIST
4004: LIST
4005: PUSH
4006: EMPTY
4007: LIST
4008: LIST
4009: PPUSH
4010: CALL_OW 69
4014: ST_TO_ADDR
// ru_barracks := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
4015: LD_ADDR_VAR 0 7
4019: PUSH
4020: LD_INT 22
4022: PUSH
4023: LD_INT 3
4025: PUSH
4026: EMPTY
4027: LIST
4028: LIST
4029: PUSH
4030: LD_INT 30
4032: PUSH
4033: LD_INT 5
4035: PUSH
4036: EMPTY
4037: LIST
4038: LIST
4039: PUSH
4040: EMPTY
4041: LIST
4042: LIST
4043: PPUSH
4044: CALL_OW 69
4048: PUSH
4049: LD_INT 1
4051: ARRAY
4052: ST_TO_ADDR
// ru_blist := [ ] ;
4053: LD_ADDR_EXP 32
4057: PUSH
4058: EMPTY
4059: ST_TO_ADDR
// ru_vlist := [ ] ;
4060: LD_ADDR_EXP 33
4064: PUSH
4065: EMPTY
4066: ST_TO_ADDR
// ru_teleport_exit := [ 183 , 62 , 147 , 44 ] ;
4067: LD_ADDR_EXP 36
4071: PUSH
4072: LD_INT 183
4074: PUSH
4075: LD_INT 62
4077: PUSH
4078: LD_INT 147
4080: PUSH
4081: LD_INT 44
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: LIST
4088: LIST
4089: ST_TO_ADDR
// TeleportExit ( FilterAllUnits ( [ f_btype , b_teleport ] ) [ 1 ] , ru_teleport_exit [ 1 ] , ru_teleport_exit [ 2 ] ) ;
4090: LD_INT 30
4092: PUSH
4093: LD_INT 34
4095: PUSH
4096: EMPTY
4097: LIST
4098: LIST
4099: PPUSH
4100: CALL_OW 69
4104: PUSH
4105: LD_INT 1
4107: ARRAY
4108: PPUSH
4109: LD_EXP 36
4113: PUSH
4114: LD_INT 1
4116: ARRAY
4117: PPUSH
4118: LD_EXP 36
4122: PUSH
4123: LD_INT 2
4125: ARRAY
4126: PPUSH
4127: CALL_OW 243
// ru_amount := [ 4 , 5 , 6 ] [ Difficulty ] ;
4131: LD_ADDR_EXP 34
4135: PUSH
4136: LD_INT 4
4138: PUSH
4139: LD_INT 5
4141: PUSH
4142: LD_INT 6
4144: PUSH
4145: EMPTY
4146: LIST
4147: LIST
4148: LIST
4149: PUSH
4150: LD_OWVAR 67
4154: ARRAY
4155: ST_TO_ADDR
// SetResourceType ( GetBase ( ru_depot ) , mat_cans , 3000 ) ;
4156: LD_VAR 0 4
4160: PPUSH
4161: CALL_OW 274
4165: PPUSH
4166: LD_INT 1
4168: PPUSH
4169: LD_INT 3000
4171: PPUSH
4172: CALL_OW 277
// SetResourceType ( GetBase ( ru_depot ) , mat_oil , 300 ) ;
4176: LD_VAR 0 4
4180: PPUSH
4181: CALL_OW 274
4185: PPUSH
4186: LD_INT 2
4188: PPUSH
4189: LD_INT 300
4191: PPUSH
4192: CALL_OW 277
// hc_gallery :=  ;
4196: LD_ADDR_OWVAR 33
4200: PUSH
4201: LD_STRING 
4203: ST_TO_ADDR
// hc_name :=  ;
4204: LD_ADDR_OWVAR 26
4208: PUSH
4209: LD_STRING 
4211: ST_TO_ADDR
// hc_importance := 0 ;
4212: LD_ADDR_OWVAR 32
4216: PUSH
4217: LD_INT 0
4219: ST_TO_ADDR
// ru_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
4220: LD_ADDR_EXP 30
4224: PUSH
4225: LD_INT 5
4227: PUSH
4228: LD_INT 6
4230: PUSH
4231: LD_INT 7
4233: PUSH
4234: EMPTY
4235: LIST
4236: LIST
4237: LIST
4238: PUSH
4239: LD_OWVAR 67
4243: ARRAY
4244: ST_TO_ADDR
// for i = 1 to 6 do
4245: LD_ADDR_VAR 0 2
4249: PUSH
4250: DOUBLE
4251: LD_INT 1
4253: DEC
4254: ST_TO_ADDR
4255: LD_INT 6
4257: PUSH
4258: FOR_TO
4259: IFFALSE 4417
// begin PrepareHuman ( false , class_bazooker , ru_skill ) ;
4261: LD_INT 0
4263: PPUSH
4264: LD_INT 9
4266: PPUSH
4267: LD_EXP 30
4271: PPUSH
4272: CALL_OW 380
// un := CreateHuman ;
4276: LD_ADDR_VAR 0 3
4280: PUSH
4281: CALL_OW 44
4285: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_barracks ) ;
4286: LD_VAR 0 3
4290: PPUSH
4291: LD_VAR 0 7
4295: PPUSH
4296: CALL_OW 52
// PrepareHuman ( false , 4 , ru_skill ) ;
4300: LD_INT 0
4302: PPUSH
4303: LD_INT 4
4305: PPUSH
4306: LD_EXP 30
4310: PPUSH
4311: CALL_OW 380
// un := CreateHuman ;
4315: LD_ADDR_VAR 0 3
4319: PUSH
4320: CALL_OW 44
4324: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
4325: LD_VAR 0 3
4329: PPUSH
4330: LD_INT 24
4332: PPUSH
4333: CALL_OW 52
// PrepareHuman ( false , 3 , ru_skill ) ;
4337: LD_INT 0
4339: PPUSH
4340: LD_INT 3
4342: PPUSH
4343: LD_EXP 30
4347: PPUSH
4348: CALL_OW 380
// un := CreateHuman ;
4352: LD_ADDR_VAR 0 3
4356: PUSH
4357: CALL_OW 44
4361: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_factory ) ;
4362: LD_VAR 0 3
4366: PPUSH
4367: LD_VAR 0 5
4371: PPUSH
4372: CALL_OW 52
// PrepareHuman ( false , 2 , ru_skill ) ;
4376: LD_INT 0
4378: PPUSH
4379: LD_INT 2
4381: PPUSH
4382: LD_EXP 30
4386: PPUSH
4387: CALL_OW 380
// un := CreateHuman ;
4391: LD_ADDR_VAR 0 3
4395: PUSH
4396: CALL_OW 44
4400: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_depot ) ;
4401: LD_VAR 0 3
4405: PPUSH
4406: LD_VAR 0 4
4410: PPUSH
4411: CALL_OW 52
// end ;
4415: GO 4258
4417: POP
4418: POP
// if Difficulty > 1 then
4419: LD_OWVAR 67
4423: PUSH
4424: LD_INT 1
4426: GREATER
4427: IFFALSE 4460
// begin un := CreateBehemoth ( 3 , 160 , 36 , 3 ) ;
4429: LD_ADDR_VAR 0 3
4433: PUSH
4434: LD_INT 3
4436: PPUSH
4437: LD_INT 160
4439: PPUSH
4440: LD_INT 36
4442: PPUSH
4443: LD_INT 3
4445: PPUSH
4446: CALL 84224 0 4
4450: ST_TO_ADDR
// ComHold ( un ) ;
4451: LD_VAR 0 3
4455: PPUSH
4456: CALL_OW 140
// end ; russian_prepared := true ;
4460: LD_ADDR_EXP 2
4464: PUSH
4465: LD_INT 1
4467: ST_TO_ADDR
// ComConstruct ( ru_factory , ru_medium_wheeled , 3 , control_computer , ru_cargo_bay ) ;
4468: LD_VAR 0 5
4472: PPUSH
4473: LD_INT 21
4475: PPUSH
4476: LD_INT 3
4478: PPUSH
4479: LD_INT 3
4481: PPUSH
4482: LD_INT 51
4484: PPUSH
4485: CALL_OW 125
// end ;
4489: LD_VAR 0 1
4493: RET
// every 0 0$02 trigger FilterAllUnits ( [ f_side , 3 ] ) > 0 and russian_prepared do var ru_depot , ru_factory , ru_teleport , ru_bunkers , ru_buildings , ru_vehicles , ru_humans , ru_barracks , ru_engs , ru_mech , ru_sci , i , tmp , filter , cr , sib_bomb ;
4494: LD_INT 22
4496: PUSH
4497: LD_INT 3
4499: PUSH
4500: EMPTY
4501: LIST
4502: LIST
4503: PPUSH
4504: CALL_OW 69
4508: PUSH
4509: LD_INT 0
4511: GREATER
4512: IFFALSE 4520
4514: PUSH
4515: LD_EXP 2
4519: AND
4520: IFFALSE 6698
4522: GO 4524
4524: DISABLE
4525: LD_INT 0
4527: PPUSH
4528: PPUSH
4529: PPUSH
4530: PPUSH
4531: PPUSH
4532: PPUSH
4533: PPUSH
4534: PPUSH
4535: PPUSH
4536: PPUSH
4537: PPUSH
4538: PPUSH
4539: PPUSH
4540: PPUSH
4541: PPUSH
4542: PPUSH
// begin enable ;
4543: ENABLE
// ru_depot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
4544: LD_ADDR_VAR 0 1
4548: PUSH
4549: LD_INT 22
4551: PUSH
4552: LD_INT 3
4554: PUSH
4555: EMPTY
4556: LIST
4557: LIST
4558: PUSH
4559: LD_INT 30
4561: PUSH
4562: LD_INT 1
4564: PUSH
4565: EMPTY
4566: LIST
4567: LIST
4568: PUSH
4569: EMPTY
4570: LIST
4571: LIST
4572: PPUSH
4573: CALL_OW 69
4577: PUSH
4578: LD_INT 1
4580: ARRAY
4581: ST_TO_ADDR
// ru_factory := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
4582: LD_ADDR_VAR 0 2
4586: PUSH
4587: LD_INT 22
4589: PUSH
4590: LD_INT 3
4592: PUSH
4593: EMPTY
4594: LIST
4595: LIST
4596: PUSH
4597: LD_INT 30
4599: PUSH
4600: LD_INT 3
4602: PUSH
4603: EMPTY
4604: LIST
4605: LIST
4606: PUSH
4607: EMPTY
4608: LIST
4609: LIST
4610: PPUSH
4611: CALL_OW 69
4615: PUSH
4616: LD_INT 1
4618: ARRAY
4619: ST_TO_ADDR
// ru_teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] ;
4620: LD_ADDR_VAR 0 3
4624: PUSH
4625: LD_INT 22
4627: PUSH
4628: LD_INT 3
4630: PUSH
4631: EMPTY
4632: LIST
4633: LIST
4634: PUSH
4635: LD_INT 30
4637: PUSH
4638: LD_INT 34
4640: PUSH
4641: EMPTY
4642: LIST
4643: LIST
4644: PUSH
4645: EMPTY
4646: LIST
4647: LIST
4648: PPUSH
4649: CALL_OW 69
4653: PUSH
4654: LD_INT 1
4656: ARRAY
4657: ST_TO_ADDR
// ru_bunkers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
4658: LD_ADDR_VAR 0 4
4662: PUSH
4663: LD_INT 22
4665: PUSH
4666: LD_INT 3
4668: PUSH
4669: EMPTY
4670: LIST
4671: LIST
4672: PUSH
4673: LD_INT 30
4675: PUSH
4676: LD_INT 33
4678: PUSH
4679: EMPTY
4680: LIST
4681: LIST
4682: PUSH
4683: EMPTY
4684: LIST
4685: LIST
4686: PPUSH
4687: CALL_OW 69
4691: ST_TO_ADDR
// ru_barracks := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
4692: LD_ADDR_VAR 0 8
4696: PUSH
4697: LD_INT 22
4699: PUSH
4700: LD_INT 3
4702: PUSH
4703: EMPTY
4704: LIST
4705: LIST
4706: PUSH
4707: LD_INT 30
4709: PUSH
4710: LD_INT 5
4712: PUSH
4713: EMPTY
4714: LIST
4715: LIST
4716: PUSH
4717: EMPTY
4718: LIST
4719: LIST
4720: PPUSH
4721: CALL_OW 69
4725: PUSH
4726: LD_INT 1
4728: ARRAY
4729: ST_TO_ADDR
// ru_buildings := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
4730: LD_ADDR_VAR 0 5
4734: PUSH
4735: LD_INT 22
4737: PUSH
4738: LD_INT 3
4740: PUSH
4741: EMPTY
4742: LIST
4743: LIST
4744: PUSH
4745: LD_INT 21
4747: PUSH
4748: LD_INT 3
4750: PUSH
4751: EMPTY
4752: LIST
4753: LIST
4754: PUSH
4755: EMPTY
4756: LIST
4757: LIST
4758: PPUSH
4759: CALL_OW 69
4763: ST_TO_ADDR
// ru_vehicles := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
4764: LD_ADDR_VAR 0 6
4768: PUSH
4769: LD_INT 22
4771: PUSH
4772: LD_INT 3
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: PUSH
4779: LD_INT 21
4781: PUSH
4782: LD_INT 2
4784: PUSH
4785: EMPTY
4786: LIST
4787: LIST
4788: PUSH
4789: EMPTY
4790: LIST
4791: LIST
4792: PPUSH
4793: CALL_OW 69
4797: ST_TO_ADDR
// ru_humans := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
4798: LD_ADDR_VAR 0 7
4802: PUSH
4803: LD_INT 22
4805: PUSH
4806: LD_INT 3
4808: PUSH
4809: EMPTY
4810: LIST
4811: LIST
4812: PUSH
4813: LD_INT 21
4815: PUSH
4816: LD_INT 1
4818: PUSH
4819: EMPTY
4820: LIST
4821: LIST
4822: PUSH
4823: EMPTY
4824: LIST
4825: LIST
4826: PPUSH
4827: CALL_OW 69
4831: ST_TO_ADDR
// ru_engs := UnitFilter ( ru_humans , [ f_class , 2 ] ) ;
4832: LD_ADDR_VAR 0 9
4836: PUSH
4837: LD_VAR 0 7
4841: PPUSH
4842: LD_INT 25
4844: PUSH
4845: LD_INT 2
4847: PUSH
4848: EMPTY
4849: LIST
4850: LIST
4851: PPUSH
4852: CALL_OW 72
4856: ST_TO_ADDR
// ru_mech := UnitFilter ( ru_humans , [ f_class , 3 ] ) ;
4857: LD_ADDR_VAR 0 10
4861: PUSH
4862: LD_VAR 0 7
4866: PPUSH
4867: LD_INT 25
4869: PUSH
4870: LD_INT 3
4872: PUSH
4873: EMPTY
4874: LIST
4875: LIST
4876: PPUSH
4877: CALL_OW 72
4881: ST_TO_ADDR
// ru_sci := UnitFilter ( ru_humans , [ f_class , 4 ] ) ;
4882: LD_ADDR_VAR 0 11
4886: PUSH
4887: LD_VAR 0 7
4891: PPUSH
4892: LD_INT 25
4894: PUSH
4895: LD_INT 4
4897: PUSH
4898: EMPTY
4899: LIST
4900: LIST
4901: PPUSH
4902: CALL_OW 72
4906: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) > 0 and ru_cargo = false then
4907: LD_INT 22
4909: PUSH
4910: LD_INT 3
4912: PUSH
4913: EMPTY
4914: LIST
4915: LIST
4916: PUSH
4917: LD_INT 34
4919: PUSH
4920: LD_INT 51
4922: PUSH
4923: EMPTY
4924: LIST
4925: LIST
4926: PUSH
4927: EMPTY
4928: LIST
4929: LIST
4930: PPUSH
4931: CALL_OW 69
4935: PUSH
4936: LD_INT 0
4938: GREATER
4939: IFFALSE 4951
4941: PUSH
4942: LD_EXP 31
4946: PUSH
4947: LD_INT 0
4949: EQUAL
4950: AND
4951: IFFALSE 4991
// ru_cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
4953: LD_ADDR_EXP 31
4957: PUSH
4958: LD_INT 22
4960: PUSH
4961: LD_INT 3
4963: PUSH
4964: EMPTY
4965: LIST
4966: LIST
4967: PUSH
4968: LD_INT 34
4970: PUSH
4971: LD_INT 51
4973: PUSH
4974: EMPTY
4975: LIST
4976: LIST
4977: PUSH
4978: EMPTY
4979: LIST
4980: LIST
4981: PPUSH
4982: CALL_OW 69
4986: PUSH
4987: LD_INT 1
4989: ARRAY
4990: ST_TO_ADDR
// if ru_cargo then
4991: LD_EXP 31
4995: IFFALSE 5347
// begin if IsInArea ( ru_cargo , ru_base ) then
4997: LD_EXP 31
5001: PPUSH
5002: LD_INT 9
5004: PPUSH
5005: CALL_OW 308
5009: IFFALSE 5088
// begin if GetCargo ( ru_cargo , mat_cans ) = 0 then
5011: LD_EXP 31
5015: PPUSH
5016: LD_INT 1
5018: PPUSH
5019: CALL_OW 289
5023: PUSH
5024: LD_INT 0
5026: EQUAL
5027: IFFALSE 5045
// ComEnterUnit ( ru_cargo , ru_teleport ) else
5029: LD_EXP 31
5033: PPUSH
5034: LD_VAR 0 3
5038: PPUSH
5039: CALL_OW 120
5043: GO 5086
// if not HasTask ( ru_cargo ) then
5045: LD_EXP 31
5049: PPUSH
5050: CALL_OW 314
5054: NOT
5055: IFFALSE 5086
// ComMoveXY ( ru_cargo , GetX ( ru_depot ) , GetY ( ru_depot ) ) ;
5057: LD_EXP 31
5061: PPUSH
5062: LD_VAR 0 1
5066: PPUSH
5067: CALL_OW 250
5071: PPUSH
5072: LD_VAR 0 1
5076: PPUSH
5077: CALL_OW 251
5081: PPUSH
5082: CALL_OW 111
// end else
5086: GO 5347
// begin if not HasTask ( ru_cargo ) and GetCargo ( ru_cargo , mat_cans ) < 100 and not IsInArea ( ru_cargo , cargoa ) then
5088: LD_EXP 31
5092: PPUSH
5093: CALL_OW 314
5097: NOT
5098: IFFALSE 5118
5100: PUSH
5101: LD_EXP 31
5105: PPUSH
5106: LD_INT 1
5108: PPUSH
5109: CALL_OW 289
5113: PUSH
5114: LD_INT 100
5116: LESS
5117: AND
5118: IFFALSE 5135
5120: PUSH
5121: LD_EXP 31
5125: PPUSH
5126: LD_INT 10
5128: PPUSH
5129: CALL_OW 308
5133: NOT
5134: AND
5135: IFFALSE 5212
// begin cr := GetListOfCratesInArea ( ru_crates ) ;
5137: LD_ADDR_VAR 0 15
5141: PUSH
5142: LD_INT 11
5144: PPUSH
5145: CALL_OW 435
5149: ST_TO_ADDR
// if cr then
5150: LD_VAR 0 15
5154: IFFALSE 5185
// ComCollect ( ru_cargo , cr [ 1 ] , cr [ 2 ] ) else
5156: LD_EXP 31
5160: PPUSH
5161: LD_VAR 0 15
5165: PUSH
5166: LD_INT 1
5168: ARRAY
5169: PPUSH
5170: LD_VAR 0 15
5174: PUSH
5175: LD_INT 2
5177: ARRAY
5178: PPUSH
5179: CALL_OW 117
5183: GO 5212
// if not IsInArea ( ru_cargo , ru_crates ) then
5185: LD_EXP 31
5189: PPUSH
5190: LD_INT 11
5192: PPUSH
5193: CALL_OW 308
5197: NOT
5198: IFFALSE 5212
// ComMoveToArea ( ru_cargo , ru_crates ) ;
5200: LD_EXP 31
5204: PPUSH
5205: LD_INT 11
5207: PPUSH
5208: CALL_OW 113
// end ; if not HasTask ( ru_cargo ) and not IsInArea ( ru_cargo , cargoa ) and ( GetCargo ( ru_cargo , mat_cans ) = 100 or See ( your_side , ru_cargo ) ) then
5212: LD_EXP 31
5216: PPUSH
5217: CALL_OW 314
5221: NOT
5222: IFFALSE 5239
5224: PUSH
5225: LD_EXP 31
5229: PPUSH
5230: LD_INT 10
5232: PPUSH
5233: CALL_OW 308
5237: NOT
5238: AND
5239: IFFALSE 5277
5241: PUSH
5242: LD_EXP 31
5246: PPUSH
5247: LD_INT 1
5249: PPUSH
5250: CALL_OW 289
5254: PUSH
5255: LD_INT 100
5257: EQUAL
5258: IFTRUE 5276
5260: PUSH
5261: LD_OWVAR 2
5265: PPUSH
5266: LD_EXP 31
5270: PPUSH
5271: CALL_OW 292
5275: OR
5276: AND
5277: IFFALSE 5291
// ComMoveToArea ( ru_cargo , cargoa ) ;
5279: LD_EXP 31
5283: PPUSH
5284: LD_INT 10
5286: PPUSH
5287: CALL_OW 113
// if IsInArea ( ru_cargo , cargoa ) and ru_barracks then
5291: LD_EXP 31
5295: PPUSH
5296: LD_INT 10
5298: PPUSH
5299: CALL_OW 308
5303: IFFALSE 5311
5305: PUSH
5306: LD_VAR 0 8
5310: AND
5311: IFFALSE 5347
// ComSpaceShift ( UnitFilter ( ru_humans , [ f_class , class_bazooker ] ) [ 1 ] , 139 , 24 ) ;
5313: LD_VAR 0 7
5317: PPUSH
5318: LD_INT 25
5320: PUSH
5321: LD_INT 9
5323: PUSH
5324: EMPTY
5325: LIST
5326: LIST
5327: PPUSH
5328: CALL_OW 72
5332: PUSH
5333: LD_INT 1
5335: ARRAY
5336: PPUSH
5337: LD_INT 139
5339: PPUSH
5340: LD_INT 24
5342: PPUSH
5343: CALL_OW 153
// end ; end ; if ru_cargo = 0 and ru_factory and BuildingStatus ( ru_factory ) = bs_idle then
5347: LD_EXP 31
5351: PUSH
5352: LD_INT 0
5354: EQUAL
5355: IFFALSE 5363
5357: PUSH
5358: LD_VAR 0 2
5362: AND
5363: IFFALSE 5380
5365: PUSH
5366: LD_VAR 0 2
5370: PPUSH
5371: CALL_OW 461
5375: PUSH
5376: LD_INT 2
5378: EQUAL
5379: AND
5380: IFFALSE 5403
// ComConstruct ( ru_factory , ru_medium_wheeled , 3 , control_computer , ru_cargo_bay ) ;
5382: LD_VAR 0 2
5386: PPUSH
5387: LD_INT 21
5389: PPUSH
5390: LD_INT 3
5392: PPUSH
5393: LD_INT 3
5395: PPUSH
5396: LD_INT 51
5398: PPUSH
5399: CALL_OW 125
// if ru_factory and ru_vlist > 0 then
5403: LD_VAR 0 2
5407: IFFALSE 5419
5409: PUSH
5410: LD_EXP 33
5414: PUSH
5415: LD_INT 0
5417: GREATER
5418: AND
5419: IFFALSE 5519
// begin if BuildingStatus ( ru_factory ) = bs_idle then
5421: LD_VAR 0 2
5425: PPUSH
5426: CALL_OW 461
5430: PUSH
5431: LD_INT 2
5433: EQUAL
5434: IFFALSE 5519
// begin ComConstruct ( ru_factory , ru_vlist [ 1 ] , ru_vlist [ 2 ] , ru_vlist [ 3 ] , ru_vlist [ 4 ] ) ;
5436: LD_VAR 0 2
5440: PPUSH
5441: LD_EXP 33
5445: PUSH
5446: LD_INT 1
5448: ARRAY
5449: PPUSH
5450: LD_EXP 33
5454: PUSH
5455: LD_INT 2
5457: ARRAY
5458: PPUSH
5459: LD_EXP 33
5463: PUSH
5464: LD_INT 3
5466: ARRAY
5467: PPUSH
5468: LD_EXP 33
5472: PUSH
5473: LD_INT 4
5475: ARRAY
5476: PPUSH
5477: CALL_OW 125
// for i = 1 to 4 do
5481: LD_ADDR_VAR 0 12
5485: PUSH
5486: DOUBLE
5487: LD_INT 1
5489: DEC
5490: ST_TO_ADDR
5491: LD_INT 4
5493: PUSH
5494: FOR_TO
5495: IFFALSE 5517
// ru_vlist := Delete ( ru_vlist , 1 ) ;
5497: LD_ADDR_EXP 33
5501: PUSH
5502: LD_EXP 33
5506: PPUSH
5507: LD_INT 1
5509: PPUSH
5510: CALL_OW 3
5514: ST_TO_ADDR
5515: GO 5494
5517: POP
5518: POP
// end ; end ; if BuildingStatus ( ru_lab ) = bs_idle and ru_sib_bomb then
5519: LD_INT 24
5521: PPUSH
5522: CALL_OW 461
5526: PUSH
5527: LD_INT 2
5529: EQUAL
5530: IFFALSE 5538
5532: PUSH
5533: LD_EXP 4
5537: AND
5538: IFFALSE 5566
// if GetTech ( tech_sibfiss , 3 ) = state_enabled then
5540: LD_INT 25
5542: PPUSH
5543: LD_INT 3
5545: PPUSH
5546: CALL_OW 321
5550: PUSH
5551: LD_INT 1
5553: EQUAL
5554: IFFALSE 5566
// ComResearch ( ru_lab , tech_sibfiss ) ;
5556: LD_INT 24
5558: PPUSH
5559: LD_INT 25
5561: PPUSH
5562: CALL_OW 124
// if GetTech ( tech_sibfiss , 3 ) = state_researched and tick mod 5 5$00 = 0 then
5566: LD_INT 25
5568: PPUSH
5569: LD_INT 3
5571: PPUSH
5572: CALL_OW 321
5576: PUSH
5577: LD_INT 2
5579: EQUAL
5580: IFFALSE 5596
5582: PUSH
5583: LD_OWVAR 1
5587: PUSH
5588: LD_INT 10500
5590: MOD
5591: PUSH
5592: LD_INT 0
5594: EQUAL
5595: AND
5596: IFFALSE 5634
// if BuildingStatus ( ru_factory ) = bs_idle then
5598: LD_VAR 0 2
5602: PPUSH
5603: CALL_OW 461
5607: PUSH
5608: LD_INT 2
5610: EQUAL
5611: IFFALSE 5634
// ComConstruct ( ru_factory , ru_heavy_wheeled , 3 , control_computer , ru_siberium_rocket ) ;
5613: LD_VAR 0 2
5617: PPUSH
5618: LD_INT 23
5620: PPUSH
5621: LD_INT 3
5623: PPUSH
5624: LD_INT 3
5626: PPUSH
5627: LD_INT 48
5629: PPUSH
5630: CALL_OW 125
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) > 0 then
5634: LD_INT 22
5636: PUSH
5637: LD_INT 3
5639: PUSH
5640: EMPTY
5641: LIST
5642: LIST
5643: PUSH
5644: LD_INT 34
5646: PUSH
5647: LD_INT 48
5649: PUSH
5650: EMPTY
5651: LIST
5652: LIST
5653: PUSH
5654: EMPTY
5655: LIST
5656: LIST
5657: PPUSH
5658: CALL_OW 69
5662: PUSH
5663: LD_INT 0
5665: GREATER
5666: IFFALSE 6040
// begin sib_bomb := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) [ 1 ] ;
5668: LD_ADDR_VAR 0 16
5672: PUSH
5673: LD_INT 22
5675: PUSH
5676: LD_INT 3
5678: PUSH
5679: EMPTY
5680: LIST
5681: LIST
5682: PUSH
5683: LD_INT 34
5685: PUSH
5686: LD_INT 48
5688: PUSH
5689: EMPTY
5690: LIST
5691: LIST
5692: PUSH
5693: EMPTY
5694: LIST
5695: LIST
5696: PPUSH
5697: CALL_OW 69
5701: PUSH
5702: LD_INT 1
5704: ARRAY
5705: ST_TO_ADDR
// if IsInArea ( sib_bomb , ru_base ) then
5706: LD_VAR 0 16
5710: PPUSH
5711: LD_INT 9
5713: PPUSH
5714: CALL_OW 308
5718: IFFALSE 5736
// ComEnterUnit ( sib_bomb , ru_teleport ) else
5720: LD_VAR 0 16
5724: PPUSH
5725: LD_VAR 0 3
5729: PPUSH
5730: CALL_OW 120
5734: GO 6040
// if not HasTask ( sib_bomb ) then
5736: LD_VAR 0 16
5740: PPUSH
5741: CALL_OW 314
5745: NOT
5746: IFFALSE 6040
// if GetLives ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) > 250 then
5748: LD_INT 22
5750: PUSH
5751: LD_OWVAR 2
5755: PUSH
5756: EMPTY
5757: LIST
5758: LIST
5759: PUSH
5760: LD_INT 30
5762: PUSH
5763: LD_INT 1
5765: PUSH
5766: EMPTY
5767: LIST
5768: LIST
5769: PUSH
5770: EMPTY
5771: LIST
5772: LIST
5773: PPUSH
5774: CALL_OW 69
5778: PUSH
5779: LD_INT 1
5781: ARRAY
5782: PPUSH
5783: CALL_OW 256
5787: PUSH
5788: LD_INT 250
5790: GREATER
5791: IFFALSE 5884
// ComAttackPlace ( sib_bomb , GetX ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) , GetY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ) else
5793: LD_VAR 0 16
5797: PPUSH
5798: LD_INT 22
5800: PUSH
5801: LD_OWVAR 2
5805: PUSH
5806: EMPTY
5807: LIST
5808: LIST
5809: PUSH
5810: LD_INT 30
5812: PUSH
5813: LD_INT 1
5815: PUSH
5816: EMPTY
5817: LIST
5818: LIST
5819: PUSH
5820: EMPTY
5821: LIST
5822: LIST
5823: PPUSH
5824: CALL_OW 69
5828: PUSH
5829: LD_INT 1
5831: ARRAY
5832: PPUSH
5833: CALL_OW 250
5837: PPUSH
5838: LD_INT 22
5840: PUSH
5841: LD_OWVAR 2
5845: PUSH
5846: EMPTY
5847: LIST
5848: LIST
5849: PUSH
5850: LD_INT 30
5852: PUSH
5853: LD_INT 1
5855: PUSH
5856: EMPTY
5857: LIST
5858: LIST
5859: PUSH
5860: EMPTY
5861: LIST
5862: LIST
5863: PPUSH
5864: CALL_OW 69
5868: PUSH
5869: LD_INT 1
5871: ARRAY
5872: PPUSH
5873: CALL_OW 251
5877: PPUSH
5878: CALL_OW 116
5882: GO 6040
// if FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) > 0 then
5884: LD_INT 22
5886: PUSH
5887: LD_OWVAR 2
5891: PUSH
5892: EMPTY
5893: LIST
5894: LIST
5895: PUSH
5896: LD_INT 21
5898: PUSH
5899: LD_INT 3
5901: PUSH
5902: EMPTY
5903: LIST
5904: LIST
5905: PUSH
5906: EMPTY
5907: LIST
5908: LIST
5909: PPUSH
5910: CALL_OW 69
5914: PUSH
5915: LD_INT 0
5917: GREATER
5918: IFFALSE 6011
// ComAttackPlace ( sib_bomb , GetX ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) [ 1 ] ) , GetY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) [ 1 ] ) ) else
5920: LD_VAR 0 16
5924: PPUSH
5925: LD_INT 22
5927: PUSH
5928: LD_OWVAR 2
5932: PUSH
5933: EMPTY
5934: LIST
5935: LIST
5936: PUSH
5937: LD_INT 21
5939: PUSH
5940: LD_INT 3
5942: PUSH
5943: EMPTY
5944: LIST
5945: LIST
5946: PUSH
5947: EMPTY
5948: LIST
5949: LIST
5950: PPUSH
5951: CALL_OW 69
5955: PUSH
5956: LD_INT 1
5958: ARRAY
5959: PPUSH
5960: CALL_OW 250
5964: PPUSH
5965: LD_INT 22
5967: PUSH
5968: LD_OWVAR 2
5972: PUSH
5973: EMPTY
5974: LIST
5975: LIST
5976: PUSH
5977: LD_INT 21
5979: PUSH
5980: LD_INT 3
5982: PUSH
5983: EMPTY
5984: LIST
5985: LIST
5986: PUSH
5987: EMPTY
5988: LIST
5989: LIST
5990: PPUSH
5991: CALL_OW 69
5995: PUSH
5996: LD_INT 1
5998: ARRAY
5999: PPUSH
6000: CALL_OW 251
6004: PPUSH
6005: CALL_OW 116
6009: GO 6040
// ComAttackPlace ( sib_bomb , GetX ( player_commander ) , GetY ( player_commander ) ) ;
6011: LD_VAR 0 16
6015: PPUSH
6016: LD_EXP 11
6020: PPUSH
6021: CALL_OW 250
6025: PPUSH
6026: LD_EXP 11
6030: PPUSH
6031: CALL_OW 251
6035: PPUSH
6036: CALL_OW 116
// end ; if ru_can_attack then
6040: LD_EXP 3
6044: IFFALSE 6192
// if ru_time > 0 0$00 then
6046: LD_EXP 35
6050: PUSH
6051: LD_INT 0
6053: GREATER
6054: IFFALSE 6072
// ru_time := ru_time - 0 0$03 else
6056: LD_ADDR_EXP 35
6060: PUSH
6061: LD_EXP 35
6065: PUSH
6066: LD_INT 105
6068: MINUS
6069: ST_TO_ADDR
6070: GO 6192
// begin ru_time := Rand ( 9 9$39 , 14 14$39 ) ;
6072: LD_ADDR_EXP 35
6076: PUSH
6077: LD_INT 20265
6079: PPUSH
6080: LD_INT 30765
6082: PPUSH
6083: CALL_OW 12
6087: ST_TO_ADDR
// for i = 1 to ru_amount do
6088: LD_ADDR_VAR 0 12
6092: PUSH
6093: DOUBLE
6094: LD_INT 1
6096: DEC
6097: ST_TO_ADDR
6098: LD_EXP 34
6102: PUSH
6103: FOR_TO
6104: IFFALSE 6190
// begin ru_vlist := ru_vlist ^ ru_heavy_wheeled ;
6106: LD_ADDR_EXP 33
6110: PUSH
6111: LD_EXP 33
6115: PUSH
6116: LD_INT 23
6118: ADD
6119: ST_TO_ADDR
// ru_vlist := ru_vlist ^ engine_siberite ;
6120: LD_ADDR_EXP 33
6124: PUSH
6125: LD_EXP 33
6129: PUSH
6130: LD_INT 3
6132: ADD
6133: ST_TO_ADDR
// ru_vlist := ru_vlist ^ control_computer ;
6134: LD_ADDR_EXP 33
6138: PUSH
6139: LD_EXP 33
6143: PUSH
6144: LD_INT 3
6146: ADD
6147: ST_TO_ADDR
// ru_vlist := ru_vlist ^ [ ru_heavy_gun , ru_rocket_launcher , ru_rocket ] [ MultiRand ( 1 , 2 , 3 ) ] ;
6148: LD_ADDR_EXP 33
6152: PUSH
6153: LD_EXP 33
6157: PUSH
6158: LD_INT 46
6160: PUSH
6161: LD_INT 45
6163: PUSH
6164: LD_INT 47
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: LIST
6171: PUSH
6172: LD_INT 1
6174: PPUSH
6175: LD_INT 2
6177: PPUSH
6178: LD_INT 3
6180: PPUSH
6181: CALL_OW 14
6185: ARRAY
6186: ADD
6187: ST_TO_ADDR
// end ;
6188: GO 6103
6190: POP
6191: POP
// end ; if UnitFilter ( ru_bunkers , [ f_bweapon , 0 ] ) > 0 then
6192: LD_VAR 0 4
6196: PPUSH
6197: LD_INT 35
6199: PUSH
6200: LD_INT 0
6202: PUSH
6203: EMPTY
6204: LIST
6205: LIST
6206: PPUSH
6207: CALL_OW 72
6211: PUSH
6212: LD_INT 0
6214: GREATER
6215: IFFALSE 6263
// if BuildingStatus ( ru_factory ) = bs_idle then
6217: LD_VAR 0 2
6221: PPUSH
6222: CALL_OW 461
6226: PUSH
6227: LD_INT 2
6229: EQUAL
6230: IFFALSE 6263
// ComPlaceWeapon ( UnitFilter ( ru_bunkers , [ f_bweapon , 0 ] ) [ 1 ] , ru_rocket ) ;
6232: LD_VAR 0 4
6236: PPUSH
6237: LD_INT 35
6239: PUSH
6240: LD_INT 0
6242: PUSH
6243: EMPTY
6244: LIST
6245: LIST
6246: PPUSH
6247: CALL_OW 72
6251: PUSH
6252: LD_INT 1
6254: ARRAY
6255: PPUSH
6256: LD_INT 47
6258: PPUSH
6259: CALL_OW 148
// if ru_force >= ru_amount then
6263: LD_EXP 29
6267: PUSH
6268: LD_EXP 34
6272: GREATEREQUAL
6273: IFFALSE 6284
// RaiseSailEvent ( event_russian_attack ) ;
6275: LD_EXP 22
6279: PPUSH
6280: CALL_OW 427
// if ru_engs > 0 then
6284: LD_VAR 0 9
6288: PUSH
6289: LD_INT 0
6291: GREATER
6292: IFFALSE 6698
// begin if UnitFilter ( ru_buildings , [ f_not , [ f_lives , 1000 ] ] ) > 0 then
6294: LD_VAR 0 5
6298: PPUSH
6299: LD_INT 3
6301: PUSH
6302: LD_INT 24
6304: PUSH
6305: LD_INT 1000
6307: PUSH
6308: EMPTY
6309: LIST
6310: LIST
6311: PUSH
6312: EMPTY
6313: LIST
6314: LIST
6315: PPUSH
6316: CALL_OW 72
6320: PUSH
6321: LD_INT 0
6323: GREATER
6324: IFFALSE 6481
// begin filter := UnitFilter ( ru_buildings , [ f_not , [ f_lives , 1000 ] ] ) ;
6326: LD_ADDR_VAR 0 14
6330: PUSH
6331: LD_VAR 0 5
6335: PPUSH
6336: LD_INT 3
6338: PUSH
6339: LD_INT 24
6341: PUSH
6342: LD_INT 1000
6344: PUSH
6345: EMPTY
6346: LIST
6347: LIST
6348: PUSH
6349: EMPTY
6350: LIST
6351: LIST
6352: PPUSH
6353: CALL_OW 72
6357: ST_TO_ADDR
// for i = 1 to ru_engs do
6358: LD_ADDR_VAR 0 12
6362: PUSH
6363: DOUBLE
6364: LD_INT 1
6366: DEC
6367: ST_TO_ADDR
6368: LD_VAR 0 9
6372: PUSH
6373: FOR_TO
6374: IFFALSE 6477
// begin if IsInUnit ( ru_engs [ i ] ) then
6376: LD_VAR 0 9
6380: PUSH
6381: LD_VAR 0 12
6385: ARRAY
6386: PPUSH
6387: CALL_OW 310
6391: IFFALSE 6410
// ComExitBuilding ( ru_engs [ i ] ) else
6393: LD_VAR 0 9
6397: PUSH
6398: LD_VAR 0 12
6402: ARRAY
6403: PPUSH
6404: CALL_OW 122
6408: GO 6475
// if not HasTask ( ru_engs [ i ] ) and GetLives ( ru_engs [ i ] ) > 600 then
6410: LD_VAR 0 9
6414: PUSH
6415: LD_VAR 0 12
6419: ARRAY
6420: PPUSH
6421: CALL_OW 314
6425: NOT
6426: IFFALSE 6449
6428: PUSH
6429: LD_VAR 0 9
6433: PUSH
6434: LD_VAR 0 12
6438: ARRAY
6439: PPUSH
6440: CALL_OW 256
6444: PUSH
6445: LD_INT 600
6447: GREATER
6448: AND
6449: IFFALSE 6475
// ComRepairBuilding ( ru_engs [ i ] , filter [ 1 ] ) ;
6451: LD_VAR 0 9
6455: PUSH
6456: LD_VAR 0 12
6460: ARRAY
6461: PPUSH
6462: LD_VAR 0 14
6466: PUSH
6467: LD_INT 1
6469: ARRAY
6470: PPUSH
6471: CALL_OW 130
// end ;
6475: GO 6373
6477: POP
6478: POP
// end else
6479: GO 6698
// begin if ru_blist = 0 then
6481: LD_EXP 32
6485: PUSH
6486: LD_INT 0
6488: EQUAL
6489: IFFALSE 6573
// begin for i = 1 to ru_engs do
6491: LD_ADDR_VAR 0 12
6495: PUSH
6496: DOUBLE
6497: LD_INT 1
6499: DEC
6500: ST_TO_ADDR
6501: LD_VAR 0 9
6505: PUSH
6506: FOR_TO
6507: IFFALSE 6569
// if not HasTask ( ru_engs [ i ] ) and not IsInUnit ( ru_engs [ i ] ) then
6509: LD_VAR 0 9
6513: PUSH
6514: LD_VAR 0 12
6518: ARRAY
6519: PPUSH
6520: CALL_OW 314
6524: NOT
6525: IFFALSE 6545
6527: PUSH
6528: LD_VAR 0 9
6532: PUSH
6533: LD_VAR 0 12
6537: ARRAY
6538: PPUSH
6539: CALL_OW 310
6543: NOT
6544: AND
6545: IFFALSE 6567
// ComEnterUnit ( ru_engs [ i ] , ru_depot ) ;
6547: LD_VAR 0 9
6551: PUSH
6552: LD_VAR 0 12
6556: ARRAY
6557: PPUSH
6558: LD_VAR 0 1
6562: PPUSH
6563: CALL_OW 120
6567: GO 6506
6569: POP
6570: POP
// end else
6571: GO 6698
// begin for i = 1 to ru_engs do
6573: LD_ADDR_VAR 0 12
6577: PUSH
6578: DOUBLE
6579: LD_INT 1
6581: DEC
6582: ST_TO_ADDR
6583: LD_VAR 0 9
6587: PUSH
6588: FOR_TO
6589: IFFALSE 6696
// begin if IsInUnit ( ru_engs [ i ] ) then
6591: LD_VAR 0 9
6595: PUSH
6596: LD_VAR 0 12
6600: ARRAY
6601: PPUSH
6602: CALL_OW 310
6606: IFFALSE 6625
// ComExitBuilding ( ru_engs [ i ] ) else
6608: LD_VAR 0 9
6612: PUSH
6613: LD_VAR 0 12
6617: ARRAY
6618: PPUSH
6619: CALL_OW 122
6623: GO 6694
// if not HasTask ( ru_engs [ i ] ) then
6625: LD_VAR 0 9
6629: PUSH
6630: LD_VAR 0 12
6634: ARRAY
6635: PPUSH
6636: CALL_OW 314
6640: NOT
6641: IFFALSE 6694
// ComBuild ( ru_engs [ i ] , ru_blist [ 1 ] , ru_blist [ 2 ] , ru_blist [ 3 ] , ru_blist [ 4 ] ) ;
6643: LD_VAR 0 9
6647: PUSH
6648: LD_VAR 0 12
6652: ARRAY
6653: PPUSH
6654: LD_EXP 32
6658: PUSH
6659: LD_INT 1
6661: ARRAY
6662: PPUSH
6663: LD_EXP 32
6667: PUSH
6668: LD_INT 2
6670: ARRAY
6671: PPUSH
6672: LD_EXP 32
6676: PUSH
6677: LD_INT 3
6679: ARRAY
6680: PPUSH
6681: LD_EXP 32
6685: PUSH
6686: LD_INT 4
6688: ARRAY
6689: PPUSH
6690: CALL_OW 145
// end ;
6694: GO 6588
6696: POP
6697: POP
// end ; end ; end ; end ;
6698: PPOPN 16
6700: END
// every 3 3$40 + 0 0$45 trigger russian_prepared and GetListOfCratesInArea ( ru_crates ) < 10 do
6701: LD_EXP 2
6705: IFFALSE 6720
6707: PUSH
6708: LD_INT 11
6710: PPUSH
6711: CALL_OW 435
6715: PUSH
6716: LD_INT 10
6718: LESS
6719: AND
6720: IFFALSE 6783
6722: GO 6724
6724: DISABLE
// begin enable ;
6725: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , ru_crates , true ) ;
6726: LD_INT 1
6728: PPUSH
6729: LD_INT 5
6731: PPUSH
6732: CALL_OW 12
6736: PPUSH
6737: LD_INT 11
6739: PPUSH
6740: LD_INT 1
6742: PPUSH
6743: CALL_OW 55
// Wait ( Rand ( 0 0$43 , 1 1$00 ) ) ;
6747: LD_INT 1505
6749: PPUSH
6750: LD_INT 2100
6752: PPUSH
6753: CALL_OW 12
6757: PPUSH
6758: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 5 ) , ru_crates , true ) ;
6762: LD_INT 1
6764: PPUSH
6765: LD_INT 5
6767: PPUSH
6768: CALL_OW 12
6772: PPUSH
6773: LD_INT 11
6775: PPUSH
6776: LD_INT 1
6778: PPUSH
6779: CALL_OW 55
// end ;
6783: END
// every 15 15$00 + 25 25$00 trigger not ru_sib_bomb do var i , tmp ;
6784: LD_EXP 4
6788: NOT
6789: IFFALSE 6904
6791: GO 6793
6793: DISABLE
6794: LD_INT 0
6796: PPUSH
6797: PPUSH
// begin enable ;
6798: ENABLE
// i := Rand ( 0 , 100 ) ;
6799: LD_ADDR_VAR 0 1
6803: PUSH
6804: LD_INT 0
6806: PPUSH
6807: LD_INT 100
6809: PPUSH
6810: CALL_OW 12
6814: ST_TO_ADDR
// case your_side of 1 :
6815: LD_OWVAR 2
6819: PUSH
6820: LD_INT 1
6822: DOUBLE
6823: EQUAL
6824: IFTRUE 6828
6826: GO 6839
6828: POP
// tmp := 10 ; 2 :
6829: LD_ADDR_VAR 0 2
6833: PUSH
6834: LD_INT 10
6836: ST_TO_ADDR
6837: GO 6878
6839: LD_INT 2
6841: DOUBLE
6842: EQUAL
6843: IFTRUE 6847
6845: GO 6858
6847: POP
// tmp := 0 ; 7 :
6848: LD_ADDR_VAR 0 2
6852: PUSH
6853: LD_INT 0
6855: ST_TO_ADDR
6856: GO 6878
6858: LD_INT 7
6860: DOUBLE
6861: EQUAL
6862: IFTRUE 6866
6864: GO 6877
6866: POP
// tmp := 15 ; end ;
6867: LD_ADDR_VAR 0 2
6871: PUSH
6872: LD_INT 15
6874: ST_TO_ADDR
6875: GO 6878
6877: POP
// if i < chance_to_bomb + tmp then
6878: LD_VAR 0 1
6882: PUSH
6883: LD_EXP 5
6887: PUSH
6888: LD_VAR 0 2
6892: PLUS
6893: LESS
6894: IFFALSE 6904
// ru_sib_bomb := true ;
6896: LD_ADDR_EXP 4
6900: PUSH
6901: LD_INT 1
6903: ST_TO_ADDR
// end ;
6904: PPOPN 2
6906: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_weapon , us_siberium_rocket ] ] ) do
6907: LD_INT 22
6909: PUSH
6910: LD_OWVAR 2
6914: PUSH
6915: EMPTY
6916: LIST
6917: LIST
6918: PUSH
6919: LD_INT 34
6921: PUSH
6922: LD_INT 8
6924: PUSH
6925: EMPTY
6926: LIST
6927: LIST
6928: PUSH
6929: EMPTY
6930: LIST
6931: LIST
6932: PPUSH
6933: CALL_OW 69
6937: IFFALSE 6950
6939: GO 6941
6941: DISABLE
// begin ru_sib_bomb := true ;
6942: LD_ADDR_EXP 4
6946: PUSH
6947: LD_INT 1
6949: ST_TO_ADDR
// end ;
6950: END
// every 10 10$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) do var i ;
6951: LD_INT 22
6953: PUSH
6954: LD_INT 3
6956: PUSH
6957: EMPTY
6958: LIST
6959: LIST
6960: PUSH
6961: LD_INT 30
6963: PUSH
6964: LD_INT 34
6966: PUSH
6967: EMPTY
6968: LIST
6969: LIST
6970: PUSH
6971: EMPTY
6972: LIST
6973: LIST
6974: PPUSH
6975: CALL_OW 69
6979: IFFALSE 7078
6981: GO 6983
6983: DISABLE
6984: LD_INT 0
6986: PPUSH
// begin enable ;
6987: ENABLE
// i := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
6988: LD_ADDR_VAR 0 1
6992: PUSH
6993: LD_INT 1
6995: PUSH
6996: LD_INT 3
6998: PUSH
6999: EMPTY
7000: LIST
7001: LIST
7002: PUSH
7003: LD_INT 1
7005: PPUSH
7006: LD_INT 2
7008: PPUSH
7009: CALL_OW 12
7013: ARRAY
7014: ST_TO_ADDR
// TeleportExit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] , ru_teleport_exit [ i ] , ru_teleport_exit [ i + 1 ] ) ;
7015: LD_INT 22
7017: PUSH
7018: LD_INT 3
7020: PUSH
7021: EMPTY
7022: LIST
7023: LIST
7024: PUSH
7025: LD_INT 30
7027: PUSH
7028: LD_INT 34
7030: PUSH
7031: EMPTY
7032: LIST
7033: LIST
7034: PUSH
7035: EMPTY
7036: LIST
7037: LIST
7038: PPUSH
7039: CALL_OW 69
7043: PUSH
7044: LD_INT 1
7046: ARRAY
7047: PPUSH
7048: LD_EXP 36
7052: PUSH
7053: LD_VAR 0 1
7057: ARRAY
7058: PPUSH
7059: LD_EXP 36
7063: PUSH
7064: LD_VAR 0 1
7068: PUSH
7069: LD_INT 1
7071: PLUS
7072: ARRAY
7073: PPUSH
7074: CALL_OW 243
// end ;
7078: PPOPN 1
7080: END
// every 12 12$00 trigger tick >= [ 28 28$00 , 25 25$00 ] [ Difficulty - 1 ] and Difficulty > 1 and FilterAllUnits ( [ f_side , 3 ] ) do var i , un , tmp , p , path ;
7081: LD_OWVAR 1
7085: PUSH
7086: LD_INT 58800
7088: PUSH
7089: LD_INT 52500
7091: PUSH
7092: EMPTY
7093: LIST
7094: LIST
7095: PUSH
7096: LD_OWVAR 67
7100: PUSH
7101: LD_INT 1
7103: MINUS
7104: ARRAY
7105: GREATEREQUAL
7106: IFFALSE 7118
7108: PUSH
7109: LD_OWVAR 67
7113: PUSH
7114: LD_INT 1
7116: GREATER
7117: AND
7118: IFFALSE 7136
7120: PUSH
7121: LD_INT 22
7123: PUSH
7124: LD_INT 3
7126: PUSH
7127: EMPTY
7128: LIST
7129: LIST
7130: PPUSH
7131: CALL_OW 69
7135: AND
7136: IFFALSE 7558
7138: GO 7140
7140: DISABLE
7141: LD_INT 0
7143: PPUSH
7144: PPUSH
7145: PPUSH
7146: PPUSH
7147: PPUSH
// begin enable ;
7148: ENABLE
// if tick > 60 60$00 then
7149: LD_OWVAR 1
7153: PUSH
7154: LD_INT 126000
7156: GREATER
7157: IFFALSE 7160
// disable ;
7159: DISABLE
// tmp := [ ] ;
7160: LD_ADDR_VAR 0 3
7164: PUSH
7165: EMPTY
7166: ST_TO_ADDR
// for i := 1 to 8 do
7167: LD_ADDR_VAR 0 1
7171: PUSH
7172: DOUBLE
7173: LD_INT 1
7175: DEC
7176: ST_TO_ADDR
7177: LD_INT 8
7179: PUSH
7180: FOR_TO
7181: IFFALSE 7340
// begin uc_side := 6 ;
7183: LD_ADDR_OWVAR 20
7187: PUSH
7188: LD_INT 6
7190: ST_TO_ADDR
// uc_nation := 3 ;
7191: LD_ADDR_OWVAR 21
7195: PUSH
7196: LD_INT 3
7198: ST_TO_ADDR
// vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod 3 + 1 ] ;
7199: LD_ADDR_OWVAR 37
7203: PUSH
7204: LD_INT 21
7206: PUSH
7207: LD_INT 23
7209: PUSH
7210: LD_INT 24
7212: PUSH
7213: EMPTY
7214: LIST
7215: LIST
7216: LIST
7217: PUSH
7218: LD_VAR 0 1
7222: PUSH
7223: LD_INT 3
7225: MOD
7226: PUSH
7227: LD_INT 1
7229: PLUS
7230: ARRAY
7231: ST_TO_ADDR
// vc_engine := engine_siberite ;
7232: LD_ADDR_OWVAR 39
7236: PUSH
7237: LD_INT 3
7239: ST_TO_ADDR
// vc_control := control_computer ;
7240: LD_ADDR_OWVAR 38
7244: PUSH
7245: LD_INT 3
7247: ST_TO_ADDR
// vc_weapon := [ ru_rocket_launcher , ru_flamethrower , ru_rocket ] [ i mod 3 + 1 ] ;
7248: LD_ADDR_OWVAR 40
7252: PUSH
7253: LD_INT 45
7255: PUSH
7256: LD_INT 93
7258: PUSH
7259: LD_INT 47
7261: PUSH
7262: EMPTY
7263: LIST
7264: LIST
7265: LIST
7266: PUSH
7267: LD_VAR 0 1
7271: PUSH
7272: LD_INT 3
7274: MOD
7275: PUSH
7276: LD_INT 1
7278: PLUS
7279: ARRAY
7280: ST_TO_ADDR
// un := CreateVehicle ;
7281: LD_ADDR_VAR 0 2
7285: PUSH
7286: CALL_OW 45
7290: ST_TO_ADDR
// SetDir ( un , 2 ) ;
7291: LD_VAR 0 2
7295: PPUSH
7296: LD_INT 2
7298: PPUSH
7299: CALL_OW 233
// PlaceUnitArea ( un , start_north , false ) ;
7303: LD_VAR 0 2
7307: PPUSH
7308: LD_INT 1
7310: PPUSH
7311: LD_INT 0
7313: PPUSH
7314: CALL_OW 49
// tmp := Join ( tmp , un ) ;
7318: LD_ADDR_VAR 0 3
7322: PUSH
7323: LD_VAR 0 3
7327: PPUSH
7328: LD_VAR 0 2
7332: PPUSH
7333: CALL 80589 0 2
7337: ST_TO_ADDR
// end ;
7338: GO 7180
7340: POP
7341: POP
// if FilterAllUnits ( [ [ f_side , your_side ] , [ f_distxy , 58 , 15 , 18 ] ] ) > 1 then
7342: LD_INT 22
7344: PUSH
7345: LD_OWVAR 2
7349: PUSH
7350: EMPTY
7351: LIST
7352: LIST
7353: PUSH
7354: LD_INT 92
7356: PUSH
7357: LD_INT 58
7359: PUSH
7360: LD_INT 15
7362: PUSH
7363: LD_INT 18
7365: PUSH
7366: EMPTY
7367: LIST
7368: LIST
7369: LIST
7370: LIST
7371: PUSH
7372: EMPTY
7373: LIST
7374: LIST
7375: PPUSH
7376: CALL_OW 69
7380: PUSH
7381: LD_INT 1
7383: GREATER
7384: IFFALSE 7396
// p := 2 else
7386: LD_ADDR_VAR 0 4
7390: PUSH
7391: LD_INT 2
7393: ST_TO_ADDR
7394: GO 7404
// p := 1 ;
7396: LD_ADDR_VAR 0 4
7400: PUSH
7401: LD_INT 1
7403: ST_TO_ADDR
// case p of 1 :
7404: LD_VAR 0 4
7408: PUSH
7409: LD_INT 1
7411: DOUBLE
7412: EQUAL
7413: IFTRUE 7417
7415: GO 7482
7417: POP
// path := [ [ 29 , 29 ] , [ 49 , 70 ] , [ 49 , 70 ] , [ 61 , 110 ] , [ 74 , 129 ] ] ; 2 :
7418: LD_ADDR_VAR 0 5
7422: PUSH
7423: LD_INT 29
7425: PUSH
7426: LD_INT 29
7428: PUSH
7429: EMPTY
7430: LIST
7431: LIST
7432: PUSH
7433: LD_INT 49
7435: PUSH
7436: LD_INT 70
7438: PUSH
7439: EMPTY
7440: LIST
7441: LIST
7442: PUSH
7443: LD_INT 49
7445: PUSH
7446: LD_INT 70
7448: PUSH
7449: EMPTY
7450: LIST
7451: LIST
7452: PUSH
7453: LD_INT 61
7455: PUSH
7456: LD_INT 110
7458: PUSH
7459: EMPTY
7460: LIST
7461: LIST
7462: PUSH
7463: LD_INT 74
7465: PUSH
7466: LD_INT 129
7468: PUSH
7469: EMPTY
7470: LIST
7471: LIST
7472: PUSH
7473: EMPTY
7474: LIST
7475: LIST
7476: LIST
7477: LIST
7478: LIST
7479: ST_TO_ADDR
7480: GO 7534
7482: LD_INT 2
7484: DOUBLE
7485: EQUAL
7486: IFTRUE 7490
7488: GO 7533
7490: POP
// path := [ [ 24 , 23 ] , [ 49 , 39 ] , [ 52 , 27 ] ] ; end ;
7491: LD_ADDR_VAR 0 5
7495: PUSH
7496: LD_INT 24
7498: PUSH
7499: LD_INT 23
7501: PUSH
7502: EMPTY
7503: LIST
7504: LIST
7505: PUSH
7506: LD_INT 49
7508: PUSH
7509: LD_INT 39
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: PUSH
7516: LD_INT 52
7518: PUSH
7519: LD_INT 27
7521: PUSH
7522: EMPTY
7523: LIST
7524: LIST
7525: PUSH
7526: EMPTY
7527: LIST
7528: LIST
7529: LIST
7530: ST_TO_ADDR
7531: GO 7534
7533: POP
// repeat wait ( 0 0$1 ) ;
7534: LD_INT 35
7536: PPUSH
7537: CALL_OW 67
// until not AgressiveMove ( tmp , path ) ;
7541: LD_VAR 0 3
7545: PPUSH
7546: LD_VAR 0 5
7550: PPUSH
7551: CALL 83355 0 2
7555: NOT
7556: IFFALSE 7534
// end ;
7558: PPOPN 5
7560: END
// every 20 20$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) do var ru_depot ;
7561: LD_INT 22
7563: PUSH
7564: LD_INT 3
7566: PUSH
7567: EMPTY
7568: LIST
7569: LIST
7570: PUSH
7571: LD_INT 30
7573: PUSH
7574: LD_INT 1
7576: PUSH
7577: EMPTY
7578: LIST
7579: LIST
7580: PUSH
7581: EMPTY
7582: LIST
7583: LIST
7584: PPUSH
7585: CALL_OW 69
7589: IFFALSE 7676
7591: GO 7593
7593: DISABLE
7594: LD_INT 0
7596: PPUSH
// begin enable ;
7597: ENABLE
// ru_depot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
7598: LD_ADDR_VAR 0 1
7602: PUSH
7603: LD_INT 22
7605: PUSH
7606: LD_INT 3
7608: PUSH
7609: EMPTY
7610: LIST
7611: LIST
7612: PUSH
7613: LD_INT 30
7615: PUSH
7616: LD_INT 1
7618: PUSH
7619: EMPTY
7620: LIST
7621: LIST
7622: PUSH
7623: EMPTY
7624: LIST
7625: LIST
7626: PPUSH
7627: CALL_OW 69
7631: PUSH
7632: LD_INT 1
7634: ARRAY
7635: ST_TO_ADDR
// AddResourceType ( GetBase ( ru_depot ) , mat_cans , 6000 ) ;
7636: LD_VAR 0 1
7640: PPUSH
7641: CALL_OW 274
7645: PPUSH
7646: LD_INT 1
7648: PPUSH
7649: LD_INT 6000
7651: PPUSH
7652: CALL_OW 276
// AddResourceType ( GetBase ( ru_depot ) , mat_oil , 600 ) ;
7656: LD_VAR 0 1
7660: PPUSH
7661: CALL_OW 274
7665: PPUSH
7666: LD_INT 2
7668: PPUSH
7669: LD_INT 600
7671: PPUSH
7672: CALL_OW 276
// end ;
7676: PPOPN 1
7678: END
// export function RussianAttack ( ) ; var path , units , p , i , teleport ; begin
7679: LD_INT 0
7681: PPUSH
7682: PPUSH
7683: PPUSH
7684: PPUSH
7685: PPUSH
7686: PPUSH
// units := ru_force ;
7687: LD_ADDR_VAR 0 3
7691: PUSH
7692: LD_EXP 29
7696: ST_TO_ADDR
// teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) ;
7697: LD_ADDR_VAR 0 6
7701: PUSH
7702: LD_INT 22
7704: PUSH
7705: LD_INT 3
7707: PUSH
7708: EMPTY
7709: LIST
7710: LIST
7711: PUSH
7712: LD_INT 30
7714: PUSH
7715: LD_INT 34
7717: PUSH
7718: EMPTY
7719: LIST
7720: LIST
7721: PUSH
7722: EMPTY
7723: LIST
7724: LIST
7725: PPUSH
7726: CALL_OW 69
7730: ST_TO_ADDR
// ru_force := [ ] ;
7731: LD_ADDR_EXP 29
7735: PUSH
7736: EMPTY
7737: ST_TO_ADDR
// if not teleport then
7738: LD_VAR 0 6
7742: NOT
7743: IFFALSE 7785
// begin for i in units do
7745: LD_ADDR_VAR 0 5
7749: PUSH
7750: LD_VAR 0 3
7754: PUSH
7755: FOR_IN
7756: IFFALSE 7781
// TeleportUnit ( i , 150 , 65 , 12 , true ) ;
7758: LD_VAR 0 5
7762: PPUSH
7763: LD_INT 150
7765: PPUSH
7766: LD_INT 65
7768: PPUSH
7769: LD_INT 12
7771: PPUSH
7772: LD_INT 1
7774: PPUSH
7775: CALL_OW 483
7779: GO 7755
7781: POP
7782: POP
// end else
7783: GO 7880
// begin repeat for i = 1 to units do
7785: LD_ADDR_VAR 0 5
7789: PUSH
7790: DOUBLE
7791: LD_INT 1
7793: DEC
7794: ST_TO_ADDR
7795: LD_VAR 0 3
7799: PUSH
7800: FOR_TO
7801: IFFALSE 7849
// if IsInArea ( units [ i ] , ru_base ) then
7803: LD_VAR 0 3
7807: PUSH
7808: LD_VAR 0 5
7812: ARRAY
7813: PPUSH
7814: LD_INT 9
7816: PPUSH
7817: CALL_OW 308
7821: IFFALSE 7847
// ComEnterUnit ( units [ i ] , teleport [ 1 ] ) ;
7823: LD_VAR 0 3
7827: PUSH
7828: LD_VAR 0 5
7832: ARRAY
7833: PPUSH
7834: LD_VAR 0 6
7838: PUSH
7839: LD_INT 1
7841: ARRAY
7842: PPUSH
7843: CALL_OW 120
7847: GO 7800
7849: POP
7850: POP
// wait ( 0 0$10 ) ;
7851: LD_INT 350
7853: PPUSH
7854: CALL_OW 67
// until not UnitFilter ( units , [ f_inarea , ru_base ] ) ;
7858: LD_VAR 0 3
7862: PPUSH
7863: LD_INT 95
7865: PUSH
7866: LD_INT 9
7868: PUSH
7869: EMPTY
7870: LIST
7871: LIST
7872: PPUSH
7873: CALL_OW 72
7877: NOT
7878: IFFALSE 7785
// end ; p := rand ( 1 , 2 ) ;
7880: LD_ADDR_VAR 0 4
7884: PUSH
7885: LD_INT 1
7887: PPUSH
7888: LD_INT 2
7890: PPUSH
7891: CALL_OW 12
7895: ST_TO_ADDR
// case p of 1 :
7896: LD_VAR 0 4
7900: PUSH
7901: LD_INT 1
7903: DOUBLE
7904: EQUAL
7905: IFTRUE 7909
7907: GO 7963
7909: POP
// path := [ [ 159 , 71 ] , [ 152 , 99 ] , [ 107 , 119 ] , [ 104 , 127 ] ] ; 2 :
7910: LD_ADDR_VAR 0 2
7914: PUSH
7915: LD_INT 159
7917: PUSH
7918: LD_INT 71
7920: PUSH
7921: EMPTY
7922: LIST
7923: LIST
7924: PUSH
7925: LD_INT 152
7927: PUSH
7928: LD_INT 99
7930: PUSH
7931: EMPTY
7932: LIST
7933: LIST
7934: PUSH
7935: LD_INT 107
7937: PUSH
7938: LD_INT 119
7940: PUSH
7941: EMPTY
7942: LIST
7943: LIST
7944: PUSH
7945: LD_INT 104
7947: PUSH
7948: LD_INT 127
7950: PUSH
7951: EMPTY
7952: LIST
7953: LIST
7954: PUSH
7955: EMPTY
7956: LIST
7957: LIST
7958: LIST
7959: LIST
7960: ST_TO_ADDR
7961: GO 8026
7963: LD_INT 2
7965: DOUBLE
7966: EQUAL
7967: IFTRUE 7971
7969: GO 8025
7971: POP
// path := [ [ 116 , 36 ] , [ 91 , 52 ] , [ 53 , 67 ] , [ 58 , 107 ] ] ; end ;
7972: LD_ADDR_VAR 0 2
7976: PUSH
7977: LD_INT 116
7979: PUSH
7980: LD_INT 36
7982: PUSH
7983: EMPTY
7984: LIST
7985: LIST
7986: PUSH
7987: LD_INT 91
7989: PUSH
7990: LD_INT 52
7992: PUSH
7993: EMPTY
7994: LIST
7995: LIST
7996: PUSH
7997: LD_INT 53
7999: PUSH
8000: LD_INT 67
8002: PUSH
8003: EMPTY
8004: LIST
8005: LIST
8006: PUSH
8007: LD_INT 58
8009: PUSH
8010: LD_INT 107
8012: PUSH
8013: EMPTY
8014: LIST
8015: LIST
8016: PUSH
8017: EMPTY
8018: LIST
8019: LIST
8020: LIST
8021: LIST
8022: ST_TO_ADDR
8023: GO 8026
8025: POP
// if FilterAllUnits ( [ f_side , 7 ] ) and p > 1 then
8026: LD_INT 22
8028: PUSH
8029: LD_INT 7
8031: PUSH
8032: EMPTY
8033: LIST
8034: LIST
8035: PPUSH
8036: CALL_OW 69
8040: IFFALSE 8052
8042: PUSH
8043: LD_VAR 0 4
8047: PUSH
8048: LD_INT 1
8050: GREATER
8051: AND
8052: IFFALSE 8083
// path := [ [ 116 , 36 ] , [ 91 , 52 ] ] ;
8054: LD_ADDR_VAR 0 2
8058: PUSH
8059: LD_INT 116
8061: PUSH
8062: LD_INT 36
8064: PUSH
8065: EMPTY
8066: LIST
8067: LIST
8068: PUSH
8069: LD_INT 91
8071: PUSH
8072: LD_INT 52
8074: PUSH
8075: EMPTY
8076: LIST
8077: LIST
8078: PUSH
8079: EMPTY
8080: LIST
8081: LIST
8082: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8083: LD_INT 35
8085: PPUSH
8086: CALL_OW 67
// until not AgressiveMove ( units , path ) ;
8090: LD_VAR 0 3
8094: PPUSH
8095: LD_VAR 0 2
8099: PPUSH
8100: CALL 83355 0 2
8104: NOT
8105: IFFALSE 8083
// end ; end_of_file
8107: LD_VAR 0 1
8111: RET
// export function RemoveLegion ; var i ; begin
8112: LD_INT 0
8114: PPUSH
8115: PPUSH
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
8116: LD_ADDR_VAR 0 2
8120: PUSH
8121: LD_INT 22
8123: PUSH
8124: LD_INT 8
8126: PUSH
8127: EMPTY
8128: LIST
8129: LIST
8130: PPUSH
8131: CALL_OW 69
8135: PUSH
8136: FOR_IN
8137: IFFALSE 8150
// RemoveUnit ( i ) ;
8139: LD_VAR 0 2
8143: PPUSH
8144: CALL_OW 64
8148: GO 8136
8150: POP
8151: POP
// end ;
8152: LD_VAR 0 1
8156: RET
// export legion_force , legion_skill , legion_mines , legion_blist , legion_vlist , legion_enemy ; export function PrepareLegion ; var un , i , tmp , veh , l_depot , p , l_factory , l_lab , l_towers ; begin
8157: LD_INT 0
8159: PPUSH
8160: PPUSH
8161: PPUSH
8162: PPUSH
8163: PPUSH
8164: PPUSH
8165: PPUSH
8166: PPUSH
8167: PPUSH
8168: PPUSH
// l_depot := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
8169: LD_ADDR_VAR 0 6
8173: PUSH
8174: LD_INT 22
8176: PUSH
8177: LD_INT 8
8179: PUSH
8180: EMPTY
8181: LIST
8182: LIST
8183: PUSH
8184: LD_INT 30
8186: PUSH
8187: LD_INT 1
8189: PUSH
8190: EMPTY
8191: LIST
8192: LIST
8193: PUSH
8194: EMPTY
8195: LIST
8196: LIST
8197: PPUSH
8198: CALL_OW 69
8202: PUSH
8203: LD_INT 1
8205: ARRAY
8206: ST_TO_ADDR
// l_factory := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
8207: LD_ADDR_VAR 0 8
8211: PUSH
8212: LD_INT 22
8214: PUSH
8215: LD_INT 8
8217: PUSH
8218: EMPTY
8219: LIST
8220: LIST
8221: PUSH
8222: LD_INT 30
8224: PUSH
8225: LD_INT 3
8227: PUSH
8228: EMPTY
8229: LIST
8230: LIST
8231: PUSH
8232: EMPTY
8233: LIST
8234: LIST
8235: PPUSH
8236: CALL_OW 69
8240: PUSH
8241: LD_INT 1
8243: ARRAY
8244: ST_TO_ADDR
// l_lab := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ;
8245: LD_ADDR_VAR 0 9
8249: PUSH
8250: LD_INT 22
8252: PUSH
8253: LD_INT 8
8255: PUSH
8256: EMPTY
8257: LIST
8258: LIST
8259: PUSH
8260: LD_INT 2
8262: PUSH
8263: LD_INT 30
8265: PUSH
8266: LD_INT 6
8268: PUSH
8269: EMPTY
8270: LIST
8271: LIST
8272: PUSH
8273: LD_INT 30
8275: PUSH
8276: LD_INT 8
8278: PUSH
8279: EMPTY
8280: LIST
8281: LIST
8282: PUSH
8283: EMPTY
8284: LIST
8285: LIST
8286: LIST
8287: PUSH
8288: EMPTY
8289: LIST
8290: LIST
8291: PPUSH
8292: CALL_OW 69
8296: PUSH
8297: LD_INT 1
8299: ARRAY
8300: ST_TO_ADDR
// l_towers := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) ;
8301: LD_ADDR_VAR 0 10
8305: PUSH
8306: LD_INT 22
8308: PUSH
8309: LD_INT 8
8311: PUSH
8312: EMPTY
8313: LIST
8314: LIST
8315: PUSH
8316: LD_INT 30
8318: PUSH
8319: LD_INT 32
8321: PUSH
8322: EMPTY
8323: LIST
8324: LIST
8325: PUSH
8326: EMPTY
8327: LIST
8328: LIST
8329: PPUSH
8330: CALL_OW 69
8334: ST_TO_ADDR
// uc_side := 8 ;
8335: LD_ADDR_OWVAR 20
8339: PUSH
8340: LD_INT 8
8342: ST_TO_ADDR
// uc_nation := nation_arabian ;
8343: LD_ADDR_OWVAR 21
8347: PUSH
8348: LD_INT 2
8350: ST_TO_ADDR
// legion_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
8351: LD_ADDR_EXP 38
8355: PUSH
8356: LD_INT 5
8358: PUSH
8359: LD_INT 6
8361: PUSH
8362: LD_INT 7
8364: PUSH
8365: EMPTY
8366: LIST
8367: LIST
8368: LIST
8369: PUSH
8370: LD_OWVAR 67
8374: ARRAY
8375: ST_TO_ADDR
// legion_blist := [ ] ;
8376: LD_ADDR_EXP 40
8380: PUSH
8381: EMPTY
8382: ST_TO_ADDR
// legion_vlist := [ ] ;
8383: LD_ADDR_EXP 41
8387: PUSH
8388: EMPTY
8389: ST_TO_ADDR
// legion_force := [ ] ;
8390: LD_ADDR_EXP 37
8394: PUSH
8395: EMPTY
8396: ST_TO_ADDR
// legion_enemy := - 1 ;
8397: LD_ADDR_EXP 42
8401: PUSH
8402: LD_INT 1
8404: NEG
8405: ST_TO_ADDR
// SetResourceType ( GetBase ( l_depot ) , mat_cans , 10000 ) ;
8406: LD_VAR 0 6
8410: PPUSH
8411: CALL_OW 274
8415: PPUSH
8416: LD_INT 1
8418: PPUSH
8419: LD_INT 10000
8421: PPUSH
8422: CALL_OW 277
// SetResourceType ( GetBase ( l_depot ) , 3 , 1000 ) ;
8426: LD_VAR 0 6
8430: PPUSH
8431: CALL_OW 274
8435: PPUSH
8436: LD_INT 3
8438: PPUSH
8439: LD_INT 1000
8441: PPUSH
8442: CALL_OW 277
// for i = 1 to l_towers do
8446: LD_ADDR_VAR 0 3
8450: PUSH
8451: DOUBLE
8452: LD_INT 1
8454: DEC
8455: ST_TO_ADDR
8456: LD_VAR 0 10
8460: PUSH
8461: FOR_TO
8462: IFFALSE 8511
// begin PrepareHuman ( false , 1 , legion_skill ) ;
8464: LD_INT 0
8466: PPUSH
8467: LD_INT 1
8469: PPUSH
8470: LD_EXP 38
8474: PPUSH
8475: CALL_OW 380
// un := CreateHuman ;
8479: LD_ADDR_VAR 0 2
8483: PUSH
8484: CALL_OW 44
8488: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_towers [ i ] ) ;
8489: LD_VAR 0 2
8493: PPUSH
8494: LD_VAR 0 10
8498: PUSH
8499: LD_VAR 0 3
8503: ARRAY
8504: PPUSH
8505: CALL_OW 52
// end ;
8509: GO 8461
8511: POP
8512: POP
// for i = 1 to 4 do
8513: LD_ADDR_VAR 0 3
8517: PUSH
8518: DOUBLE
8519: LD_INT 1
8521: DEC
8522: ST_TO_ADDR
8523: LD_INT 4
8525: PUSH
8526: FOR_TO
8527: IFFALSE 8620
// for p = 1 to 2 do
8529: LD_ADDR_VAR 0 7
8533: PUSH
8534: DOUBLE
8535: LD_INT 1
8537: DEC
8538: ST_TO_ADDR
8539: LD_INT 2
8541: PUSH
8542: FOR_TO
8543: IFFALSE 8616
// begin PrepareHuman ( false , class_mortar , legion_skill ) ;
8545: LD_INT 0
8547: PPUSH
8548: LD_INT 8
8550: PPUSH
8551: LD_EXP 38
8555: PPUSH
8556: CALL_OW 380
// un := CreateHuman ;
8560: LD_ADDR_VAR 0 2
8564: PUSH
8565: CALL_OW 44
8569: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_barracks ] ] ) [ p ] ) ;
8570: LD_VAR 0 2
8574: PPUSH
8575: LD_INT 22
8577: PUSH
8578: LD_INT 8
8580: PUSH
8581: EMPTY
8582: LIST
8583: LIST
8584: PUSH
8585: LD_INT 30
8587: PUSH
8588: LD_INT 5
8590: PUSH
8591: EMPTY
8592: LIST
8593: LIST
8594: PUSH
8595: EMPTY
8596: LIST
8597: LIST
8598: PPUSH
8599: CALL_OW 69
8603: PUSH
8604: LD_VAR 0 7
8608: ARRAY
8609: PPUSH
8610: CALL_OW 52
// end ;
8614: GO 8542
8616: POP
8617: POP
8618: GO 8526
8620: POP
8621: POP
// for i = 1 to 4 do
8622: LD_ADDR_VAR 0 3
8626: PUSH
8627: DOUBLE
8628: LD_INT 1
8630: DEC
8631: ST_TO_ADDR
8632: LD_INT 4
8634: PUSH
8635: FOR_TO
8636: IFFALSE 8679
// begin PrepareHuman ( false , 4 , legion_skill ) ;
8638: LD_INT 0
8640: PPUSH
8641: LD_INT 4
8643: PPUSH
8644: LD_EXP 38
8648: PPUSH
8649: CALL_OW 380
// un := CreateHuman ;
8653: LD_ADDR_VAR 0 2
8657: PUSH
8658: CALL_OW 44
8662: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_lab ) ;
8663: LD_VAR 0 2
8667: PPUSH
8668: LD_VAR 0 9
8672: PPUSH
8673: CALL_OW 52
// end ;
8677: GO 8635
8679: POP
8680: POP
// for i = 1 to 4 do
8681: LD_ADDR_VAR 0 3
8685: PUSH
8686: DOUBLE
8687: LD_INT 1
8689: DEC
8690: ST_TO_ADDR
8691: LD_INT 4
8693: PUSH
8694: FOR_TO
8695: IFFALSE 8738
// begin PrepareHuman ( false , 3 , legion_skill ) ;
8697: LD_INT 0
8699: PPUSH
8700: LD_INT 3
8702: PPUSH
8703: LD_EXP 38
8707: PPUSH
8708: CALL_OW 380
// un := CreateHuman ;
8712: LD_ADDR_VAR 0 2
8716: PUSH
8717: CALL_OW 44
8721: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_factory ) ;
8722: LD_VAR 0 2
8726: PPUSH
8727: LD_VAR 0 8
8731: PPUSH
8732: CALL_OW 52
// end ;
8736: GO 8694
8738: POP
8739: POP
// for i = 1 to 3 do
8740: LD_ADDR_VAR 0 3
8744: PUSH
8745: DOUBLE
8746: LD_INT 1
8748: DEC
8749: ST_TO_ADDR
8750: LD_INT 3
8752: PUSH
8753: FOR_TO
8754: IFFALSE 8797
// begin PrepareHuman ( false , 2 , legion_skill ) ;
8756: LD_INT 0
8758: PPUSH
8759: LD_INT 2
8761: PPUSH
8762: LD_EXP 38
8766: PPUSH
8767: CALL_OW 380
// un := CreateHuman ;
8771: LD_ADDR_VAR 0 2
8775: PUSH
8776: CALL_OW 44
8780: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_depot ) ;
8781: LD_VAR 0 2
8785: PPUSH
8786: LD_VAR 0 6
8790: PPUSH
8791: CALL_OW 52
// end ;
8795: GO 8753
8797: POP
8798: POP
// for i = 1 to 3 do
8799: LD_ADDR_VAR 0 3
8803: PUSH
8804: DOUBLE
8805: LD_INT 1
8807: DEC
8808: ST_TO_ADDR
8809: LD_INT 3
8811: PUSH
8812: FOR_TO
8813: IFFALSE 8923
// begin vc_chassis := ar_half_tracked ;
8815: LD_ADDR_OWVAR 37
8819: PUSH
8820: LD_INT 14
8822: ST_TO_ADDR
// vc_engine := engine_siberite ;
8823: LD_ADDR_OWVAR 39
8827: PUSH
8828: LD_INT 3
8830: ST_TO_ADDR
// vc_control := control_manual ;
8831: LD_ADDR_OWVAR 38
8835: PUSH
8836: LD_INT 1
8838: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
8839: LD_ADDR_OWVAR 40
8843: PUSH
8844: LD_INT 31
8846: ST_TO_ADDR
// veh := CreateVehicle ;
8847: LD_ADDR_VAR 0 5
8851: PUSH
8852: CALL_OW 45
8856: ST_TO_ADDR
// PlaceUnitXYR ( veh , 212 , 135 , 5 , false ) ;
8857: LD_VAR 0 5
8861: PPUSH
8862: LD_INT 212
8864: PPUSH
8865: LD_INT 135
8867: PPUSH
8868: LD_INT 5
8870: PPUSH
8871: LD_INT 0
8873: PPUSH
8874: CALL_OW 50
// PrepareHuman ( false , 3 , legion_skill + 1 ) ;
8878: LD_INT 0
8880: PPUSH
8881: LD_INT 3
8883: PPUSH
8884: LD_EXP 38
8888: PUSH
8889: LD_INT 1
8891: PLUS
8892: PPUSH
8893: CALL_OW 380
// un := CreateHuman ;
8897: LD_ADDR_VAR 0 2
8901: PUSH
8902: CALL_OW 44
8906: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8907: LD_VAR 0 2
8911: PPUSH
8912: LD_VAR 0 5
8916: PPUSH
8917: CALL_OW 52
// end ;
8921: GO 8812
8923: POP
8924: POP
// PrepareSoldier ( false , 8 ) ;
8925: LD_INT 0
8927: PPUSH
8928: LD_INT 8
8930: PPUSH
8931: CALL_OW 381
// hc_class := class_sniper ;
8935: LD_ADDR_OWVAR 28
8939: PUSH
8940: LD_INT 5
8942: ST_TO_ADDR
// un := CreateHuman ;
8943: LD_ADDR_VAR 0 2
8947: PUSH
8948: CALL_OW 44
8952: ST_TO_ADDR
// SetDir ( un , 4 ) ;
8953: LD_VAR 0 2
8957: PPUSH
8958: LD_INT 4
8960: PPUSH
8961: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( 136 , 92 ) ) ;
8965: LD_VAR 0 2
8969: PPUSH
8970: LD_INT 136
8972: PPUSH
8973: LD_INT 92
8975: PPUSH
8976: CALL_OW 428
8980: PPUSH
8981: CALL_OW 52
// PlaceSeeing ( 198 , 94 , 8 , 10 ) ;
8985: LD_INT 198
8987: PPUSH
8988: LD_INT 94
8990: PPUSH
8991: LD_INT 8
8993: PPUSH
8994: LD_INT 10
8996: PPUSH
8997: CALL_OW 330
// PlaceSeeing ( 167 , 130 , 8 , 10 ) ;
9001: LD_INT 167
9003: PPUSH
9004: LD_INT 130
9006: PPUSH
9007: LD_INT 8
9009: PPUSH
9010: LD_INT 10
9012: PPUSH
9013: CALL_OW 330
// tmp := AreaToList ( legion_mines_area , 0 ) ;
9017: LD_ADDR_VAR 0 4
9021: PUSH
9022: LD_INT 24
9024: PPUSH
9025: LD_INT 0
9027: PPUSH
9028: CALL_OW 517
9032: ST_TO_ADDR
// legion_mines := [ ] ;
9033: LD_ADDR_EXP 39
9037: PUSH
9038: EMPTY
9039: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
9040: LD_ADDR_VAR 0 3
9044: PUSH
9045: DOUBLE
9046: LD_INT 1
9048: DEC
9049: ST_TO_ADDR
9050: LD_VAR 0 4
9054: PUSH
9055: LD_INT 1
9057: ARRAY
9058: PUSH
9059: FOR_TO
9060: IFFALSE 9162
// begin PlaceMine ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 8 , 0 ) ;
9062: LD_VAR 0 4
9066: PUSH
9067: LD_INT 1
9069: ARRAY
9070: PUSH
9071: LD_VAR 0 3
9075: ARRAY
9076: PPUSH
9077: LD_VAR 0 4
9081: PUSH
9082: LD_INT 2
9084: ARRAY
9085: PUSH
9086: LD_VAR 0 3
9090: ARRAY
9091: PPUSH
9092: LD_INT 8
9094: PPUSH
9095: LD_INT 0
9097: PPUSH
9098: CALL_OW 454
// legion_mines := Replace ( legion_mines , legion_mines + 1 , [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ) ;
9102: LD_ADDR_EXP 39
9106: PUSH
9107: LD_EXP 39
9111: PPUSH
9112: LD_EXP 39
9116: PUSH
9117: LD_INT 1
9119: PLUS
9120: PPUSH
9121: LD_VAR 0 4
9125: PUSH
9126: LD_INT 1
9128: ARRAY
9129: PUSH
9130: LD_VAR 0 3
9134: ARRAY
9135: PUSH
9136: LD_VAR 0 4
9140: PUSH
9141: LD_INT 2
9143: ARRAY
9144: PUSH
9145: LD_VAR 0 3
9149: ARRAY
9150: PUSH
9151: EMPTY
9152: LIST
9153: LIST
9154: PPUSH
9155: CALL_OW 1
9159: ST_TO_ADDR
// end ;
9160: GO 9059
9162: POP
9163: POP
// legion_vlist := [ ar_medium_trike , 3 , control_remote , ar_cargo_bay ] ;
9164: LD_ADDR_EXP 41
9168: PUSH
9169: LD_INT 13
9171: PUSH
9172: LD_INT 3
9174: PUSH
9175: LD_INT 2
9177: PUSH
9178: LD_INT 32
9180: PUSH
9181: EMPTY
9182: LIST
9183: LIST
9184: LIST
9185: LIST
9186: ST_TO_ADDR
// end ;
9187: LD_VAR 0 1
9191: RET
// every 0 0$1 trigger legion_mines and FilterUnitsInArea ( legion_mines_area , [ f_side , your_side ] ) do var i , un ;
9192: LD_EXP 39
9196: IFFALSE 9219
9198: PUSH
9199: LD_INT 24
9201: PPUSH
9202: LD_INT 22
9204: PUSH
9205: LD_OWVAR 2
9209: PUSH
9210: EMPTY
9211: LIST
9212: LIST
9213: PPUSH
9214: CALL_OW 70
9218: AND
9219: IFFALSE 9386
9221: GO 9223
9223: DISABLE
9224: LD_INT 0
9226: PPUSH
9227: PPUSH
// begin enable ;
9228: ENABLE
// for i := legion_mines downto 1 do
9229: LD_ADDR_VAR 0 1
9233: PUSH
9234: DOUBLE
9235: LD_EXP 39
9239: INC
9240: ST_TO_ADDR
9241: LD_INT 1
9243: PUSH
9244: FOR_DOWNTO
9245: IFFALSE 9384
// begin un := HexInfo ( legion_mines [ i ] [ 1 ] , legion_mines [ i ] [ 2 ] ) ;
9247: LD_ADDR_VAR 0 2
9251: PUSH
9252: LD_EXP 39
9256: PUSH
9257: LD_VAR 0 1
9261: ARRAY
9262: PUSH
9263: LD_INT 1
9265: ARRAY
9266: PPUSH
9267: LD_EXP 39
9271: PUSH
9272: LD_VAR 0 1
9276: ARRAY
9277: PUSH
9278: LD_INT 2
9280: ARRAY
9281: PPUSH
9282: CALL_OW 428
9286: ST_TO_ADDR
// if un then
9287: LD_VAR 0 2
9291: IFFALSE 9382
// if GetSide ( un ) = legion_enemy then
9293: LD_VAR 0 2
9297: PPUSH
9298: CALL_OW 255
9302: PUSH
9303: LD_EXP 42
9307: EQUAL
9308: IFFALSE 9382
// begin LaunchMineAtPos ( legion_mines [ i ] [ 1 ] , legion_mines [ i ] [ 2 ] , 8 ) ;
9310: LD_EXP 39
9314: PUSH
9315: LD_VAR 0 1
9319: ARRAY
9320: PUSH
9321: LD_INT 1
9323: ARRAY
9324: PPUSH
9325: LD_EXP 39
9329: PUSH
9330: LD_VAR 0 1
9334: ARRAY
9335: PUSH
9336: LD_INT 2
9338: ARRAY
9339: PPUSH
9340: LD_INT 8
9342: PPUSH
9343: CALL_OW 456
// legion_mines := Delete ( legion_mines , i ) ;
9347: LD_ADDR_EXP 39
9351: PUSH
9352: LD_EXP 39
9356: PPUSH
9357: LD_VAR 0 1
9361: PPUSH
9362: CALL_OW 3
9366: ST_TO_ADDR
// if not mine_vulc then
9367: LD_EXP 13
9371: NOT
9372: IFFALSE 9382
// mine_vulc := true ;
9374: LD_ADDR_EXP 13
9378: PUSH
9379: LD_INT 1
9381: ST_TO_ADDR
// end ; end ;
9382: GO 9244
9384: POP
9385: POP
// end ;
9386: PPOPN 2
9388: END
// every 0 0$1 trigger tick >= [ 25 25$00 , 22 22$00 , 20 20$00 ] [ Difficulty ] do var artifact , un ;
9389: LD_OWVAR 1
9393: PUSH
9394: LD_INT 52500
9396: PUSH
9397: LD_INT 46200
9399: PUSH
9400: LD_INT 42000
9402: PUSH
9403: EMPTY
9404: LIST
9405: LIST
9406: LIST
9407: PUSH
9408: LD_OWVAR 67
9412: ARRAY
9413: GREATEREQUAL
9414: IFFALSE 9594
9416: GO 9418
9418: DISABLE
9419: LD_INT 0
9421: PPUSH
9422: PPUSH
// begin artifact := FindArtifact ( 1 ) ;
9423: LD_ADDR_VAR 0 1
9427: PUSH
9428: LD_INT 1
9430: PPUSH
9431: CALL_OW 469
9435: ST_TO_ADDR
// if artifact [ 1 ] = 112 and artifact [ 2 ] = 67 then
9436: LD_VAR 0 1
9440: PUSH
9441: LD_INT 1
9443: ARRAY
9444: PUSH
9445: LD_INT 112
9447: EQUAL
9448: IFFALSE 9464
9450: PUSH
9451: LD_VAR 0 1
9455: PUSH
9456: LD_INT 2
9458: ARRAY
9459: PUSH
9460: LD_INT 67
9462: EQUAL
9463: AND
9464: IFFALSE 9594
// begin un := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 2 ] ] ) ;
9466: LD_ADDR_VAR 0 2
9470: PUSH
9471: LD_INT 22
9473: PUSH
9474: LD_INT 8
9476: PUSH
9477: EMPTY
9478: LIST
9479: LIST
9480: PUSH
9481: LD_INT 25
9483: PUSH
9484: LD_INT 2
9486: PUSH
9487: EMPTY
9488: LIST
9489: LIST
9490: PUSH
9491: EMPTY
9492: LIST
9493: LIST
9494: PPUSH
9495: CALL_OW 69
9499: ST_TO_ADDR
// if not un then
9500: LD_VAR 0 2
9504: NOT
9505: IFFALSE 9509
// exit ;
9507: GO 9594
// un := un [ 1 ] ;
9509: LD_ADDR_VAR 0 2
9513: PUSH
9514: LD_VAR 0 2
9518: PUSH
9519: LD_INT 1
9521: ARRAY
9522: ST_TO_ADDR
// if IsInUnit ( un ) then
9523: LD_VAR 0 2
9527: PPUSH
9528: CALL_OW 310
9532: IFFALSE 9543
// ComExitBuilding ( un ) ;
9534: LD_VAR 0 2
9538: PPUSH
9539: CALL_OW 122
// AddComCollect ( un , artifact [ 1 ] , artifact [ 2 ] ) ;
9543: LD_VAR 0 2
9547: PPUSH
9548: LD_VAR 0 1
9552: PUSH
9553: LD_INT 1
9555: ARRAY
9556: PPUSH
9557: LD_VAR 0 1
9561: PUSH
9562: LD_INT 2
9564: ARRAY
9565: PPUSH
9566: CALL_OW 177
// AddComMoveXY ( un , 207 , 123 ) ;
9570: LD_VAR 0 2
9574: PPUSH
9575: LD_INT 207
9577: PPUSH
9578: LD_INT 123
9580: PPUSH
9581: CALL_OW 171
// AddComUnload ( un ) ;
9585: LD_VAR 0 2
9589: PPUSH
9590: CALL_OW 219
// end ; end ;
9594: PPOPN 2
9596: END
// every 0 0$02 trigger FilterAllUnits ( [ f_side , 8 ] ) > 0 do var un , i , tmp , veh , b , p , cr , l_depot , l_factory , l_lab , l_towers , l_sib , l_sci , l_mech , l_sold , l_eng , l_cargo ;
9597: LD_INT 22
9599: PUSH
9600: LD_INT 8
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: PPUSH
9607: CALL_OW 69
9611: PUSH
9612: LD_INT 0
9614: GREATER
9615: IFFALSE 11209
9617: GO 9619
9619: DISABLE
9620: LD_INT 0
9622: PPUSH
9623: PPUSH
9624: PPUSH
9625: PPUSH
9626: PPUSH
9627: PPUSH
9628: PPUSH
9629: PPUSH
9630: PPUSH
9631: PPUSH
9632: PPUSH
9633: PPUSH
9634: PPUSH
9635: PPUSH
9636: PPUSH
9637: PPUSH
9638: PPUSH
// begin enable ;
9639: ENABLE
// l_depot := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
9640: LD_ADDR_VAR 0 8
9644: PUSH
9645: LD_INT 22
9647: PUSH
9648: LD_INT 8
9650: PUSH
9651: EMPTY
9652: LIST
9653: LIST
9654: PUSH
9655: LD_INT 30
9657: PUSH
9658: LD_INT 1
9660: PUSH
9661: EMPTY
9662: LIST
9663: LIST
9664: PUSH
9665: EMPTY
9666: LIST
9667: LIST
9668: PPUSH
9669: CALL_OW 69
9673: PUSH
9674: LD_INT 1
9676: ARRAY
9677: ST_TO_ADDR
// l_factory := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
9678: LD_ADDR_VAR 0 9
9682: PUSH
9683: LD_INT 22
9685: PUSH
9686: LD_INT 8
9688: PUSH
9689: EMPTY
9690: LIST
9691: LIST
9692: PUSH
9693: LD_INT 30
9695: PUSH
9696: LD_INT 3
9698: PUSH
9699: EMPTY
9700: LIST
9701: LIST
9702: PUSH
9703: EMPTY
9704: LIST
9705: LIST
9706: PPUSH
9707: CALL_OW 69
9711: PUSH
9712: LD_INT 1
9714: ARRAY
9715: ST_TO_ADDR
// l_lab := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ;
9716: LD_ADDR_VAR 0 10
9720: PUSH
9721: LD_INT 22
9723: PUSH
9724: LD_INT 8
9726: PUSH
9727: EMPTY
9728: LIST
9729: LIST
9730: PUSH
9731: LD_INT 2
9733: PUSH
9734: LD_INT 30
9736: PUSH
9737: LD_INT 6
9739: PUSH
9740: EMPTY
9741: LIST
9742: LIST
9743: PUSH
9744: LD_INT 30
9746: PUSH
9747: LD_INT 8
9749: PUSH
9750: EMPTY
9751: LIST
9752: LIST
9753: PUSH
9754: EMPTY
9755: LIST
9756: LIST
9757: LIST
9758: PUSH
9759: EMPTY
9760: LIST
9761: LIST
9762: PPUSH
9763: CALL_OW 69
9767: PUSH
9768: LD_INT 1
9770: ARRAY
9771: ST_TO_ADDR
// l_towers := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) ;
9772: LD_ADDR_VAR 0 11
9776: PUSH
9777: LD_INT 22
9779: PUSH
9780: LD_INT 8
9782: PUSH
9783: EMPTY
9784: LIST
9785: LIST
9786: PUSH
9787: LD_INT 30
9789: PUSH
9790: LD_INT 32
9792: PUSH
9793: EMPTY
9794: LIST
9795: LIST
9796: PUSH
9797: EMPTY
9798: LIST
9799: LIST
9800: PPUSH
9801: CALL_OW 69
9805: ST_TO_ADDR
// l_eng := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 2 ] ] ) ;
9806: LD_ADDR_VAR 0 16
9810: PUSH
9811: LD_INT 22
9813: PUSH
9814: LD_INT 8
9816: PUSH
9817: EMPTY
9818: LIST
9819: LIST
9820: PUSH
9821: LD_INT 25
9823: PUSH
9824: LD_INT 2
9826: PUSH
9827: EMPTY
9828: LIST
9829: LIST
9830: PUSH
9831: EMPTY
9832: LIST
9833: LIST
9834: PPUSH
9835: CALL_OW 69
9839: ST_TO_ADDR
// l_sold := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 1 ] ] ) ;
9840: LD_ADDR_VAR 0 15
9844: PUSH
9845: LD_INT 22
9847: PUSH
9848: LD_INT 8
9850: PUSH
9851: EMPTY
9852: LIST
9853: LIST
9854: PUSH
9855: LD_INT 25
9857: PUSH
9858: LD_INT 1
9860: PUSH
9861: EMPTY
9862: LIST
9863: LIST
9864: PUSH
9865: EMPTY
9866: LIST
9867: LIST
9868: PPUSH
9869: CALL_OW 69
9873: ST_TO_ADDR
// l_mech := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 3 ] ] ) ;
9874: LD_ADDR_VAR 0 14
9878: PUSH
9879: LD_INT 22
9881: PUSH
9882: LD_INT 8
9884: PUSH
9885: EMPTY
9886: LIST
9887: LIST
9888: PUSH
9889: LD_INT 25
9891: PUSH
9892: LD_INT 3
9894: PUSH
9895: EMPTY
9896: LIST
9897: LIST
9898: PUSH
9899: EMPTY
9900: LIST
9901: LIST
9902: PPUSH
9903: CALL_OW 69
9907: ST_TO_ADDR
// l_sci := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 4 ] ] ) ;
9908: LD_ADDR_VAR 0 13
9912: PUSH
9913: LD_INT 22
9915: PUSH
9916: LD_INT 8
9918: PUSH
9919: EMPTY
9920: LIST
9921: LIST
9922: PUSH
9923: LD_INT 25
9925: PUSH
9926: LD_INT 4
9928: PUSH
9929: EMPTY
9930: LIST
9931: LIST
9932: PUSH
9933: EMPTY
9934: LIST
9935: LIST
9936: PPUSH
9937: CALL_OW 69
9941: ST_TO_ADDR
// if l_eng then
9942: LD_VAR 0 16
9946: IFFALSE 10366
// begin b := FilterUnitsInArea ( legion_base_area , [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) ;
9948: LD_ADDR_VAR 0 5
9952: PUSH
9953: LD_INT 25
9955: PPUSH
9956: LD_INT 22
9958: PUSH
9959: LD_INT 8
9961: PUSH
9962: EMPTY
9963: LIST
9964: LIST
9965: PUSH
9966: LD_INT 21
9968: PUSH
9969: LD_INT 3
9971: PUSH
9972: EMPTY
9973: LIST
9974: LIST
9975: PUSH
9976: EMPTY
9977: LIST
9978: LIST
9979: PPUSH
9980: CALL_OW 70
9984: ST_TO_ADDR
// if UnitFilter ( b , [ f_not , [ f_lives , 1000 ] ] ) > 0 then
9985: LD_VAR 0 5
9989: PPUSH
9990: LD_INT 3
9992: PUSH
9993: LD_INT 24
9995: PUSH
9996: LD_INT 1000
9998: PUSH
9999: EMPTY
10000: LIST
10001: LIST
10002: PUSH
10003: EMPTY
10004: LIST
10005: LIST
10006: PPUSH
10007: CALL_OW 72
10011: PUSH
10012: LD_INT 0
10014: GREATER
10015: IFFALSE 10149
// begin tmp := UnitFilter ( b , [ f_not , [ f_lives , 1000 ] ] ) ;
10017: LD_ADDR_VAR 0 3
10021: PUSH
10022: LD_VAR 0 5
10026: PPUSH
10027: LD_INT 3
10029: PUSH
10030: LD_INT 24
10032: PUSH
10033: LD_INT 1000
10035: PUSH
10036: EMPTY
10037: LIST
10038: LIST
10039: PUSH
10040: EMPTY
10041: LIST
10042: LIST
10043: PPUSH
10044: CALL_OW 72
10048: ST_TO_ADDR
// for i = 1 to l_eng do
10049: LD_ADDR_VAR 0 2
10053: PUSH
10054: DOUBLE
10055: LD_INT 1
10057: DEC
10058: ST_TO_ADDR
10059: LD_VAR 0 16
10063: PUSH
10064: FOR_TO
10065: IFFALSE 10145
// if IsInUnit ( l_eng [ i ] ) then
10067: LD_VAR 0 16
10071: PUSH
10072: LD_VAR 0 2
10076: ARRAY
10077: PPUSH
10078: CALL_OW 310
10082: IFFALSE 10101
// ComExitBuilding ( l_eng [ i ] ) else
10084: LD_VAR 0 16
10088: PUSH
10089: LD_VAR 0 2
10093: ARRAY
10094: PPUSH
10095: CALL_OW 122
10099: GO 10143
// if not HasTask ( l_eng [ i ] ) then
10101: LD_VAR 0 16
10105: PUSH
10106: LD_VAR 0 2
10110: ARRAY
10111: PPUSH
10112: CALL_OW 314
10116: NOT
10117: IFFALSE 10143
// ComRepairBuilding ( l_eng [ i ] , tmp [ 1 ] ) ;
10119: LD_VAR 0 16
10123: PUSH
10124: LD_VAR 0 2
10128: ARRAY
10129: PPUSH
10130: LD_VAR 0 3
10134: PUSH
10135: LD_INT 1
10137: ARRAY
10138: PPUSH
10139: CALL_OW 130
10143: GO 10064
10145: POP
10146: POP
// end else
10147: GO 10366
// begin if legion_blist > 0 then
10149: LD_EXP 40
10153: PUSH
10154: LD_INT 0
10156: GREATER
10157: IFFALSE 10286
// begin for i = 1 to l_eng do
10159: LD_ADDR_VAR 0 2
10163: PUSH
10164: DOUBLE
10165: LD_INT 1
10167: DEC
10168: ST_TO_ADDR
10169: LD_VAR 0 16
10173: PUSH
10174: FOR_TO
10175: IFFALSE 10282
// if IsInUnit ( l_eng [ i ] ) then
10177: LD_VAR 0 16
10181: PUSH
10182: LD_VAR 0 2
10186: ARRAY
10187: PPUSH
10188: CALL_OW 310
10192: IFFALSE 10211
// ComExitBuilding ( l_eng [ i ] ) else
10194: LD_VAR 0 16
10198: PUSH
10199: LD_VAR 0 2
10203: ARRAY
10204: PPUSH
10205: CALL_OW 122
10209: GO 10280
// if not HasTask ( l_eng [ i ] ) then
10211: LD_VAR 0 16
10215: PUSH
10216: LD_VAR 0 2
10220: ARRAY
10221: PPUSH
10222: CALL_OW 314
10226: NOT
10227: IFFALSE 10280
// ComBuild ( l_eng [ i ] , legion_blist [ 1 ] , legion_blist [ 2 ] , legion_blist [ 3 ] , legion_blist [ 4 ] ) ;
10229: LD_VAR 0 16
10233: PUSH
10234: LD_VAR 0 2
10238: ARRAY
10239: PPUSH
10240: LD_EXP 40
10244: PUSH
10245: LD_INT 1
10247: ARRAY
10248: PPUSH
10249: LD_EXP 40
10253: PUSH
10254: LD_INT 2
10256: ARRAY
10257: PPUSH
10258: LD_EXP 40
10262: PUSH
10263: LD_INT 3
10265: ARRAY
10266: PPUSH
10267: LD_EXP 40
10271: PUSH
10272: LD_INT 4
10274: ARRAY
10275: PPUSH
10276: CALL_OW 145
10280: GO 10174
10282: POP
10283: POP
// end else
10284: GO 10366
// for i = 1 to l_eng do
10286: LD_ADDR_VAR 0 2
10290: PUSH
10291: DOUBLE
10292: LD_INT 1
10294: DEC
10295: ST_TO_ADDR
10296: LD_VAR 0 16
10300: PUSH
10301: FOR_TO
10302: IFFALSE 10364
// if not IsInUnit ( l_eng [ i ] ) and not HasTask ( l_eng [ i ] ) then
10304: LD_VAR 0 16
10308: PUSH
10309: LD_VAR 0 2
10313: ARRAY
10314: PPUSH
10315: CALL_OW 310
10319: NOT
10320: IFFALSE 10340
10322: PUSH
10323: LD_VAR 0 16
10327: PUSH
10328: LD_VAR 0 2
10332: ARRAY
10333: PPUSH
10334: CALL_OW 314
10338: NOT
10339: AND
10340: IFFALSE 10362
// ComEnterUnit ( l_eng [ i ] , l_depot ) ;
10342: LD_VAR 0 16
10346: PUSH
10347: LD_VAR 0 2
10351: ARRAY
10352: PPUSH
10353: LD_VAR 0 8
10357: PPUSH
10358: CALL_OW 120
10362: GO 10301
10364: POP
10365: POP
// end ; end ; if l_factory then
10366: LD_VAR 0 9
10370: IFFALSE 10776
// begin if FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) > 0 then
10372: LD_INT 22
10374: PUSH
10375: LD_INT 8
10377: PUSH
10378: EMPTY
10379: LIST
10380: LIST
10381: PUSH
10382: LD_INT 33
10384: PUSH
10385: LD_INT 2
10387: PUSH
10388: EMPTY
10389: LIST
10390: LIST
10391: PUSH
10392: LD_INT 3
10394: PUSH
10395: LD_INT 61
10397: PUSH
10398: EMPTY
10399: LIST
10400: PUSH
10401: EMPTY
10402: LIST
10403: LIST
10404: PUSH
10405: EMPTY
10406: LIST
10407: LIST
10408: LIST
10409: PPUSH
10410: CALL_OW 69
10414: PUSH
10415: LD_INT 0
10417: GREATER
10418: IFFALSE 10454
10420: PUSH
10421: LD_INT 22
10423: PUSH
10424: LD_INT 8
10426: PUSH
10427: EMPTY
10428: LIST
10429: LIST
10430: PUSH
10431: LD_INT 34
10433: PUSH
10434: LD_INT 31
10436: PUSH
10437: EMPTY
10438: LIST
10439: LIST
10440: PUSH
10441: EMPTY
10442: LIST
10443: LIST
10444: PPUSH
10445: CALL_OW 69
10449: PUSH
10450: LD_INT 0
10452: GREATER
10453: AND
10454: IFFALSE 10574
// ComLinkTo ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) [ 1 ] , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) [ Rand ( 1 , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) ) ] ) ;
10456: LD_INT 22
10458: PUSH
10459: LD_INT 8
10461: PUSH
10462: EMPTY
10463: LIST
10464: LIST
10465: PUSH
10466: LD_INT 33
10468: PUSH
10469: LD_INT 2
10471: PUSH
10472: EMPTY
10473: LIST
10474: LIST
10475: PUSH
10476: LD_INT 3
10478: PUSH
10479: LD_INT 61
10481: PUSH
10482: EMPTY
10483: LIST
10484: PUSH
10485: EMPTY
10486: LIST
10487: LIST
10488: PUSH
10489: EMPTY
10490: LIST
10491: LIST
10492: LIST
10493: PPUSH
10494: CALL_OW 69
10498: PUSH
10499: LD_INT 1
10501: ARRAY
10502: PPUSH
10503: LD_INT 22
10505: PUSH
10506: LD_INT 8
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: PUSH
10513: LD_INT 34
10515: PUSH
10516: LD_INT 31
10518: PUSH
10519: EMPTY
10520: LIST
10521: LIST
10522: PUSH
10523: EMPTY
10524: LIST
10525: LIST
10526: PPUSH
10527: CALL_OW 69
10531: PUSH
10532: LD_INT 1
10534: PPUSH
10535: LD_INT 22
10537: PUSH
10538: LD_INT 8
10540: PUSH
10541: EMPTY
10542: LIST
10543: LIST
10544: PUSH
10545: LD_INT 34
10547: PUSH
10548: LD_INT 31
10550: PUSH
10551: EMPTY
10552: LIST
10553: LIST
10554: PUSH
10555: EMPTY
10556: LIST
10557: LIST
10558: PPUSH
10559: CALL_OW 69
10563: PPUSH
10564: CALL_OW 12
10568: ARRAY
10569: PPUSH
10570: CALL_OW 135
// if legion_vlist > 0 and BuildingStatus ( l_factory ) = bs_idle then
10574: LD_EXP 41
10578: PUSH
10579: LD_INT 0
10581: GREATER
10582: IFFALSE 10599
10584: PUSH
10585: LD_VAR 0 9
10589: PPUSH
10590: CALL_OW 461
10594: PUSH
10595: LD_INT 2
10597: EQUAL
10598: AND
10599: IFFALSE 10684
// begin ComConstruct ( l_factory , legion_vlist [ 1 ] , legion_vlist [ 2 ] , legion_vlist [ 3 ] , legion_vlist [ 4 ] ) ;
10601: LD_VAR 0 9
10605: PPUSH
10606: LD_EXP 41
10610: PUSH
10611: LD_INT 1
10613: ARRAY
10614: PPUSH
10615: LD_EXP 41
10619: PUSH
10620: LD_INT 2
10622: ARRAY
10623: PPUSH
10624: LD_EXP 41
10628: PUSH
10629: LD_INT 3
10631: ARRAY
10632: PPUSH
10633: LD_EXP 41
10637: PUSH
10638: LD_INT 4
10640: ARRAY
10641: PPUSH
10642: CALL_OW 125
// for i = 1 to 4 do
10646: LD_ADDR_VAR 0 2
10650: PUSH
10651: DOUBLE
10652: LD_INT 1
10654: DEC
10655: ST_TO_ADDR
10656: LD_INT 4
10658: PUSH
10659: FOR_TO
10660: IFFALSE 10682
// legion_vlist := Delete ( legion_vlist , 1 ) ;
10662: LD_ADDR_EXP 41
10666: PUSH
10667: LD_EXP 41
10671: PPUSH
10672: LD_INT 1
10674: PPUSH
10675: CALL_OW 3
10679: ST_TO_ADDR
10680: GO 10659
10682: POP
10683: POP
// end ; if UnitFilter ( l_towers , [ f_bweapon , 0 ] ) > 0 and BuildingStatus ( l_factory ) = bs_idle then
10684: LD_VAR 0 11
10688: PPUSH
10689: LD_INT 35
10691: PUSH
10692: LD_INT 0
10694: PUSH
10695: EMPTY
10696: LIST
10697: LIST
10698: PPUSH
10699: CALL_OW 72
10703: PUSH
10704: LD_INT 0
10706: GREATER
10707: IFFALSE 10724
10709: PUSH
10710: LD_VAR 0 9
10714: PPUSH
10715: CALL_OW 461
10719: PUSH
10720: LD_INT 2
10722: EQUAL
10723: AND
10724: IFFALSE 10776
// ComPlaceWeapon ( UnitFilter ( l_towers , [ f_bweapon , 0 ] ) [ 1 ] , [ ar_rocket_launcher , ar_gun ] [ Rand ( 1 , 2 ) ] ) ;
10726: LD_VAR 0 11
10730: PPUSH
10731: LD_INT 35
10733: PUSH
10734: LD_INT 0
10736: PUSH
10737: EMPTY
10738: LIST
10739: LIST
10740: PPUSH
10741: CALL_OW 72
10745: PUSH
10746: LD_INT 1
10748: ARRAY
10749: PPUSH
10750: LD_INT 28
10752: PUSH
10753: LD_INT 27
10755: PUSH
10756: EMPTY
10757: LIST
10758: LIST
10759: PUSH
10760: LD_INT 1
10762: PPUSH
10763: LD_INT 2
10765: PPUSH
10766: CALL_OW 12
10770: ARRAY
10771: PPUSH
10772: CALL_OW 148
// end ; if legion_enemy > 0 then
10776: LD_EXP 42
10780: PUSH
10781: LD_INT 0
10783: GREATER
10784: IFFALSE 11067
// begin if tick mod 11 11$00 = 0 then
10786: LD_OWVAR 1
10790: PUSH
10791: LD_INT 23100
10793: MOD
10794: PUSH
10795: LD_INT 0
10797: EQUAL
10798: IFFALSE 11048
// begin legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
10800: LD_ADDR_EXP 41
10804: PUSH
10805: LD_EXP 41
10809: PUSH
10810: LD_INT 13
10812: PUSH
10813: LD_INT 1
10815: PUSH
10816: LD_INT 2
10818: PUSH
10819: EMPTY
10820: LIST
10821: LIST
10822: LIST
10823: ADD
10824: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
10825: LD_ADDR_EXP 41
10829: PUSH
10830: LD_EXP 41
10834: PUSH
10835: LD_INT 28
10837: PUSH
10838: LD_INT 27
10840: PUSH
10841: LD_INT 29
10843: PUSH
10844: EMPTY
10845: LIST
10846: LIST
10847: LIST
10848: PUSH
10849: LD_INT 1
10851: PPUSH
10852: LD_INT 3
10854: PPUSH
10855: CALL_OW 12
10859: ARRAY
10860: ADD
10861: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
10862: LD_ADDR_EXP 41
10866: PUSH
10867: LD_EXP 41
10871: PUSH
10872: LD_INT 13
10874: PUSH
10875: LD_INT 1
10877: PUSH
10878: LD_INT 2
10880: PUSH
10881: EMPTY
10882: LIST
10883: LIST
10884: LIST
10885: ADD
10886: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
10887: LD_ADDR_EXP 41
10891: PUSH
10892: LD_EXP 41
10896: PUSH
10897: LD_INT 28
10899: PUSH
10900: LD_INT 27
10902: PUSH
10903: LD_INT 29
10905: PUSH
10906: EMPTY
10907: LIST
10908: LIST
10909: LIST
10910: PUSH
10911: LD_INT 1
10913: PPUSH
10914: LD_INT 3
10916: PPUSH
10917: CALL_OW 12
10921: ARRAY
10922: ADD
10923: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
10924: LD_ADDR_EXP 41
10928: PUSH
10929: LD_EXP 41
10933: PUSH
10934: LD_INT 13
10936: PUSH
10937: LD_INT 1
10939: PUSH
10940: LD_INT 2
10942: PUSH
10943: EMPTY
10944: LIST
10945: LIST
10946: LIST
10947: ADD
10948: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_mortar , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
10949: LD_ADDR_EXP 41
10953: PUSH
10954: LD_EXP 41
10958: PUSH
10959: LD_INT 28
10961: PUSH
10962: LD_INT 92
10964: PUSH
10965: LD_INT 29
10967: PUSH
10968: EMPTY
10969: LIST
10970: LIST
10971: LIST
10972: PUSH
10973: LD_INT 1
10975: PPUSH
10976: LD_INT 3
10978: PPUSH
10979: CALL_OW 12
10983: ARRAY
10984: ADD
10985: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
10986: LD_ADDR_EXP 41
10990: PUSH
10991: LD_EXP 41
10995: PUSH
10996: LD_INT 13
10998: PUSH
10999: LD_INT 1
11001: PUSH
11002: LD_INT 2
11004: PUSH
11005: EMPTY
11006: LIST
11007: LIST
11008: LIST
11009: ADD
11010: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
11011: LD_ADDR_EXP 41
11015: PUSH
11016: LD_EXP 41
11020: PUSH
11021: LD_INT 28
11023: PUSH
11024: LD_INT 27
11026: PUSH
11027: LD_INT 29
11029: PUSH
11030: EMPTY
11031: LIST
11032: LIST
11033: LIST
11034: PUSH
11035: LD_INT 1
11037: PPUSH
11038: LD_INT 3
11040: PPUSH
11041: CALL_OW 12
11045: ARRAY
11046: ADD
11047: ST_TO_ADDR
// end ; if legion_force >= 8 then
11048: LD_EXP 37
11052: PUSH
11053: LD_INT 8
11055: GREATEREQUAL
11056: IFFALSE 11067
// RaiseSailEvent ( event_legion_attack ) ;
11058: LD_EXP 21
11062: PPUSH
11063: CALL_OW 427
// end ; if FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_cargo_bay ] ] ) then
11067: LD_INT 22
11069: PUSH
11070: LD_INT 8
11072: PUSH
11073: EMPTY
11074: LIST
11075: LIST
11076: PUSH
11077: LD_INT 34
11079: PUSH
11080: LD_INT 32
11082: PUSH
11083: EMPTY
11084: LIST
11085: LIST
11086: PUSH
11087: EMPTY
11088: LIST
11089: LIST
11090: PPUSH
11091: CALL_OW 69
11095: IFFALSE 11209
// begin if l_cargo = false then
11097: LD_VAR 0 17
11101: PUSH
11102: LD_INT 0
11104: EQUAL
11105: IFFALSE 11141
// l_cargo := FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_cargo_bay ] ] ) ;
11107: LD_ADDR_VAR 0 17
11111: PUSH
11112: LD_INT 22
11114: PUSH
11115: LD_INT 8
11117: PUSH
11118: EMPTY
11119: LIST
11120: LIST
11121: PUSH
11122: LD_INT 34
11124: PUSH
11125: LD_INT 32
11127: PUSH
11128: EMPTY
11129: LIST
11130: LIST
11131: PUSH
11132: EMPTY
11133: LIST
11134: LIST
11135: PPUSH
11136: CALL_OW 69
11140: ST_TO_ADDR
// if l_cargo then
11141: LD_VAR 0 17
11145: IFFALSE 11209
// begin cr := GetListOfCratesInArea ( legion_crates ) ;
11147: LD_ADDR_VAR 0 7
11151: PUSH
11152: LD_INT 14
11154: PPUSH
11155: CALL_OW 435
11159: ST_TO_ADDR
// if cr > 0 then
11160: LD_VAR 0 7
11164: PUSH
11165: LD_INT 0
11167: GREATER
11168: IFFALSE 11209
// if not HasTask ( l_cargo ) then
11170: LD_VAR 0 17
11174: PPUSH
11175: CALL_OW 314
11179: NOT
11180: IFFALSE 11209
// ComCollect ( l_cargo , cr [ 1 ] , cr [ 2 ] ) ;
11182: LD_VAR 0 17
11186: PPUSH
11187: LD_VAR 0 7
11191: PUSH
11192: LD_INT 1
11194: ARRAY
11195: PPUSH
11196: LD_VAR 0 7
11200: PUSH
11201: LD_INT 2
11203: ARRAY
11204: PPUSH
11205: CALL_OW 117
// end ; end ; end ;
11209: PPOPN 17
11211: END
// every 9 9$00 trigger difficulty > 1 do var i , sci , sib , p ;
11212: LD_OWVAR 67
11216: PUSH
11217: LD_INT 1
11219: GREATER
11220: IFFALSE 11425
11222: GO 11224
11224: DISABLE
11225: LD_INT 0
11227: PPUSH
11228: PPUSH
11229: PPUSH
11230: PPUSH
// begin Wait ( Rand ( 0 0$01 , 6 6$01 ) ) ;
11231: LD_INT 35
11233: PPUSH
11234: LD_INT 12635
11236: PPUSH
11237: CALL_OW 12
11241: PPUSH
11242: CALL_OW 67
// sci := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 4 ] ] ) ;
11246: LD_ADDR_VAR 0 2
11250: PUSH
11251: LD_INT 22
11253: PUSH
11254: LD_INT 8
11256: PUSH
11257: EMPTY
11258: LIST
11259: LIST
11260: PUSH
11261: LD_INT 25
11263: PUSH
11264: LD_INT 4
11266: PUSH
11267: EMPTY
11268: LIST
11269: LIST
11270: PUSH
11271: EMPTY
11272: LIST
11273: LIST
11274: PPUSH
11275: CALL_OW 69
11279: ST_TO_ADDR
// p := 1 ;
11280: LD_ADDR_VAR 0 4
11284: PUSH
11285: LD_INT 1
11287: ST_TO_ADDR
// sib := [ 116 , 139 , 69 , 13 ] ;
11288: LD_ADDR_VAR 0 3
11292: PUSH
11293: LD_INT 116
11295: PUSH
11296: LD_INT 139
11298: PUSH
11299: LD_INT 69
11301: PUSH
11302: LD_INT 13
11304: PUSH
11305: EMPTY
11306: LIST
11307: LIST
11308: LIST
11309: LIST
11310: ST_TO_ADDR
// for i = 1 to 2 do
11311: LD_ADDR_VAR 0 1
11315: PUSH
11316: DOUBLE
11317: LD_INT 1
11319: DEC
11320: ST_TO_ADDR
11321: LD_INT 2
11323: PUSH
11324: FOR_TO
11325: IFFALSE 11423
// begin if IsInUnit ( sci [ i ] ) then
11327: LD_VAR 0 2
11331: PUSH
11332: LD_VAR 0 1
11336: ARRAY
11337: PPUSH
11338: CALL_OW 310
11342: IFFALSE 11359
// ComExitBuilding ( sci [ i ] ) ;
11344: LD_VAR 0 2
11348: PUSH
11349: LD_VAR 0 1
11353: ARRAY
11354: PPUSH
11355: CALL_OW 122
// Wait ( 0 0$03 ) ;
11359: LD_INT 105
11361: PPUSH
11362: CALL_OW 67
// ComContaminate ( sci [ i ] , sib [ p ] , sib [ p + 1 ] ) ;
11366: LD_VAR 0 2
11370: PUSH
11371: LD_VAR 0 1
11375: ARRAY
11376: PPUSH
11377: LD_VAR 0 3
11381: PUSH
11382: LD_VAR 0 4
11386: ARRAY
11387: PPUSH
11388: LD_VAR 0 3
11392: PUSH
11393: LD_VAR 0 4
11397: PUSH
11398: LD_INT 1
11400: PLUS
11401: ARRAY
11402: PPUSH
11403: CALL_OW 158
// p := p + 2 ;
11407: LD_ADDR_VAR 0 4
11411: PUSH
11412: LD_VAR 0 4
11416: PUSH
11417: LD_INT 2
11419: PLUS
11420: ST_TO_ADDR
// end ;
11421: GO 11324
11423: POP
11424: POP
// end ;
11425: PPOPN 4
11427: END
// every 3 3$30 trigger GetListOfCratesInArea ( legion_crates ) < 20 do
11428: LD_INT 14
11430: PPUSH
11431: CALL_OW 435
11435: PUSH
11436: LD_INT 20
11438: LESS
11439: IFFALSE 11466
11441: GO 11443
11443: DISABLE
// begin enable ;
11444: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , legion_crates , true ) ;
11445: LD_INT 1
11447: PPUSH
11448: LD_INT 5
11450: PPUSH
11451: CALL_OW 12
11455: PPUSH
11456: LD_INT 14
11458: PPUSH
11459: LD_INT 1
11461: PPUSH
11462: CALL_OW 55
// end ;
11466: END
// export function LegionAttack ( ) ; var path , units ; begin
11467: LD_INT 0
11469: PPUSH
11470: PPUSH
11471: PPUSH
// units := legion_force ;
11472: LD_ADDR_VAR 0 3
11476: PUSH
11477: LD_EXP 37
11481: ST_TO_ADDR
// legion_force := [ ] ;
11482: LD_ADDR_EXP 37
11486: PUSH
11487: EMPTY
11488: ST_TO_ADDR
// case legion_enemy of 1 :
11489: LD_EXP 42
11493: PUSH
11494: LD_INT 1
11496: DOUBLE
11497: EQUAL
11498: IFTRUE 11502
11500: GO 11545
11502: POP
// path := [ [ 174 , 135 ] , [ 153 , 146 ] , [ 118 , 122 ] ] ; 2 :
11503: LD_ADDR_VAR 0 2
11507: PUSH
11508: LD_INT 174
11510: PUSH
11511: LD_INT 135
11513: PUSH
11514: EMPTY
11515: LIST
11516: LIST
11517: PUSH
11518: LD_INT 153
11520: PUSH
11521: LD_INT 146
11523: PUSH
11524: EMPTY
11525: LIST
11526: LIST
11527: PUSH
11528: LD_INT 118
11530: PUSH
11531: LD_INT 122
11533: PUSH
11534: EMPTY
11535: LIST
11536: LIST
11537: PUSH
11538: EMPTY
11539: LIST
11540: LIST
11541: LIST
11542: ST_TO_ADDR
11543: GO 11659
11545: LD_INT 2
11547: DOUBLE
11548: EQUAL
11549: IFTRUE 11553
11551: GO 11596
11553: POP
// path := [ [ 164 , 73 ] , [ 130 , 48 ] , [ 96 , 48 ] ] ; 7 :
11554: LD_ADDR_VAR 0 2
11558: PUSH
11559: LD_INT 164
11561: PUSH
11562: LD_INT 73
11564: PUSH
11565: EMPTY
11566: LIST
11567: LIST
11568: PUSH
11569: LD_INT 130
11571: PUSH
11572: LD_INT 48
11574: PUSH
11575: EMPTY
11576: LIST
11577: LIST
11578: PUSH
11579: LD_INT 96
11581: PUSH
11582: LD_INT 48
11584: PUSH
11585: EMPTY
11586: LIST
11587: LIST
11588: PUSH
11589: EMPTY
11590: LIST
11591: LIST
11592: LIST
11593: ST_TO_ADDR
11594: GO 11659
11596: LD_INT 7
11598: DOUBLE
11599: EQUAL
11600: IFTRUE 11604
11602: GO 11658
11604: POP
// path := [ [ 174 , 135 ] , [ 153 , 146 ] , [ 118 , 122 ] , [ 107 , 126 ] ] ; end ;
11605: LD_ADDR_VAR 0 2
11609: PUSH
11610: LD_INT 174
11612: PUSH
11613: LD_INT 135
11615: PUSH
11616: EMPTY
11617: LIST
11618: LIST
11619: PUSH
11620: LD_INT 153
11622: PUSH
11623: LD_INT 146
11625: PUSH
11626: EMPTY
11627: LIST
11628: LIST
11629: PUSH
11630: LD_INT 118
11632: PUSH
11633: LD_INT 122
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: PUSH
11640: LD_INT 107
11642: PUSH
11643: LD_INT 126
11645: PUSH
11646: EMPTY
11647: LIST
11648: LIST
11649: PUSH
11650: EMPTY
11651: LIST
11652: LIST
11653: LIST
11654: LIST
11655: ST_TO_ADDR
11656: GO 11659
11658: POP
// repeat wait ( 0 0$1 ) ;
11659: LD_INT 35
11661: PPUSH
11662: CALL_OW 67
// until not AgressiveMove ( units , path ) ;
11666: LD_VAR 0 3
11670: PPUSH
11671: LD_VAR 0 2
11675: PPUSH
11676: CALL 83355 0 2
11680: NOT
11681: IFFALSE 11659
// end ; end_of_file
11683: LD_VAR 0 1
11687: RET
// export function Action ; var un , gamemode , speaker ; begin
11688: LD_INT 0
11690: PPUSH
11691: PPUSH
11692: PPUSH
11693: PPUSH
// if debug then
11694: LD_EXP 15
11698: IFFALSE 11725
// begin Difficulty := 2 ;
11700: LD_ADDR_OWVAR 67
11704: PUSH
11705: LD_INT 2
11707: ST_TO_ADDR
// gamemode := 3 ;
11708: LD_ADDR_VAR 0 3
11712: PUSH
11713: LD_INT 3
11715: ST_TO_ADDR
// FogOff ( 7 ) ;
11716: LD_INT 7
11718: PPUSH
11719: CALL_OW 344
// end else
11723: GO 11751
// begin Difficulty := GetMultiplayerSetting ( 0 ) ;
11725: LD_ADDR_OWVAR 67
11729: PUSH
11730: LD_INT 0
11732: PPUSH
11733: CALL_OW 426
11737: ST_TO_ADDR
// gamemode := GetMultiplayerSetting ( 1 ) ;
11738: LD_ADDR_VAR 0 3
11742: PUSH
11743: LD_INT 1
11745: PPUSH
11746: CALL_OW 426
11750: ST_TO_ADDR
// end ; if gamemode = 1 then
11751: LD_VAR 0 3
11755: PUSH
11756: LD_INT 1
11758: EQUAL
11759: IFFALSE 11783
// begin your_side := 1 ;
11761: LD_ADDR_OWVAR 2
11765: PUSH
11766: LD_INT 1
11768: ST_TO_ADDR
// legion_enemy := 1 ;
11769: LD_ADDR_EXP 42
11773: PUSH
11774: LD_INT 1
11776: ST_TO_ADDR
// PrepareAmerican ;
11777: CALL 261 0 0
// end else
11781: GO 11835
// if gamemode = 2 then
11783: LD_VAR 0 3
11787: PUSH
11788: LD_INT 2
11790: EQUAL
11791: IFFALSE 11815
// begin your_side := 2 ;
11793: LD_ADDR_OWVAR 2
11797: PUSH
11798: LD_INT 2
11800: ST_TO_ADDR
// legion_enemy := 2 ;
11801: LD_ADDR_EXP 42
11805: PUSH
11806: LD_INT 2
11808: ST_TO_ADDR
// PrepareArabian ;
11809: CALL 19134 0 0
// end else
11813: GO 11835
// begin your_side := 7 ;
11815: LD_ADDR_OWVAR 2
11819: PUSH
11820: LD_INT 7
11822: ST_TO_ADDR
// legion_enemy := 7 ;
11823: LD_ADDR_EXP 42
11827: PUSH
11828: LD_INT 7
11830: ST_TO_ADDR
// PrepareAlliance ;
11831: CALL 16274 0 0
// end ; if your_side = 1 then
11835: LD_OWVAR 2
11839: PUSH
11840: LD_INT 1
11842: EQUAL
11843: IFFALSE 12431
// begin Query ( QVul4 ) ;
11845: LD_STRING QVul4
11847: PPUSH
11848: CALL_OW 97
// InGameOn ;
11852: CALL_OW 8
// PlaceSeeing ( 8 , 5 , 1 , 12 ) ;
11856: LD_INT 8
11858: PPUSH
11859: LD_INT 5
11861: PPUSH
11862: LD_INT 1
11864: PPUSH
11865: LD_INT 12
11867: PPUSH
11868: CALL_OW 330
// RemoveSeeing ( 8 , 5 , 1 ) ;
11872: LD_INT 8
11874: PPUSH
11875: LD_INT 5
11877: PPUSH
11878: LD_INT 1
11880: PPUSH
11881: CALL_OW 331
// PlaceSeeing ( 98 , 148 , 1 , 2 ) ;
11885: LD_INT 98
11887: PPUSH
11888: LD_INT 148
11890: PPUSH
11891: LD_INT 1
11893: PPUSH
11894: LD_INT 2
11896: PPUSH
11897: CALL_OW 330
// RemoveSeeing ( 98 , 148 , 1 ) ;
11901: LD_INT 98
11903: PPUSH
11904: LD_INT 148
11906: PPUSH
11907: LD_INT 1
11909: PPUSH
11910: CALL_OW 331
// CenterNowOnXY ( 8 , 5 ) ;
11914: LD_INT 8
11916: PPUSH
11917: LD_INT 5
11919: PPUSH
11920: CALL_OW 86
// uc_side := 4 ;
11924: LD_ADDR_OWVAR 20
11928: PUSH
11929: LD_INT 4
11931: ST_TO_ADDR
// uc_nation := 1 ;
11932: LD_ADDR_OWVAR 21
11936: PUSH
11937: LD_INT 1
11939: ST_TO_ADDR
// hc_importance := 0 ;
11940: LD_ADDR_OWVAR 32
11944: PUSH
11945: LD_INT 0
11947: ST_TO_ADDR
// hc_name :=  ;
11948: LD_ADDR_OWVAR 26
11952: PUSH
11953: LD_STRING 
11955: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , us_skill ) ;
11956: LD_INT 1
11958: PPUSH
11959: LD_INT 3
11961: PPUSH
11962: LD_EXP 26
11966: PPUSH
11967: CALL_OW 380
// un := CreateHuman ;
11971: LD_ADDR_VAR 0 2
11975: PUSH
11976: CALL_OW 44
11980: ST_TO_ADDR
// PlaceUnitXY ( un , 19 , 23 , false ) ;
11981: LD_VAR 0 2
11985: PPUSH
11986: LD_INT 19
11988: PPUSH
11989: LD_INT 23
11991: PPUSH
11992: LD_INT 0
11994: PPUSH
11995: CALL_OW 48
// hc_name := Stuart Carey ;
11999: LD_ADDR_OWVAR 26
12003: PUSH
12004: LD_STRING Stuart Carey
12006: ST_TO_ADDR
// hc_class := 1 ;
12007: LD_ADDR_OWVAR 28
12011: PUSH
12012: LD_INT 1
12014: ST_TO_ADDR
// hc_gallery := vulcano ;
12015: LD_ADDR_OWVAR 33
12019: PUSH
12020: LD_STRING vulcano
12022: ST_TO_ADDR
// hc_face_number := 1 ;
12023: LD_ADDR_OWVAR 34
12027: PUSH
12028: LD_INT 1
12030: ST_TO_ADDR
// us_guy := CreateHuman ;
12031: LD_ADDR_EXP 27
12035: PUSH
12036: CALL_OW 44
12040: ST_TO_ADDR
// InitHc ;
12041: CALL_OW 19
// if rand ( 0 , 1 ) then
12045: LD_INT 0
12047: PPUSH
12048: LD_INT 1
12050: PPUSH
12051: CALL_OW 12
12055: IFFALSE 12072
// PrepareHuman ( sex_male , 3 , 6 ) else
12057: LD_INT 1
12059: PPUSH
12060: LD_INT 3
12062: PPUSH
12063: LD_INT 6
12065: PPUSH
12066: CALL_OW 380
12070: GO 12085
// PrepareHuman ( sex_female , 4 , 8 ) ;
12072: LD_INT 2
12074: PPUSH
12075: LD_INT 4
12077: PPUSH
12078: LD_INT 8
12080: PPUSH
12081: CALL_OW 380
// ComMoveXY ( un , 12 , 10 ) ;
12085: LD_VAR 0 2
12089: PPUSH
12090: LD_INT 12
12092: PPUSH
12093: LD_INT 10
12095: PPUSH
12096: CALL_OW 111
// ComTurnUnit ( us_commander , un ) ;
12100: LD_EXP 24
12104: PPUSH
12105: LD_VAR 0 2
12109: PPUSH
12110: CALL_OW 119
// repeat wait ( 0 0$3 ) ;
12114: LD_INT 105
12116: PPUSH
12117: CALL_OW 67
// until See ( 4 , us_commander ) or IsAt ( un , 12 , 10 ) ;
12121: LD_INT 4
12123: PPUSH
12124: LD_EXP 24
12128: PPUSH
12129: CALL_OW 292
12133: IFTRUE 12152
12135: PUSH
12136: LD_VAR 0 2
12140: PPUSH
12141: LD_INT 12
12143: PPUSH
12144: LD_INT 10
12146: PPUSH
12147: CALL_OW 307
12151: OR
12152: IFFALSE 12114
// ComTurnUnit ( un , us_commander ) ;
12154: LD_VAR 0 2
12158: PPUSH
12159: LD_EXP 24
12163: PPUSH
12164: CALL_OW 119
// if GetSex ( un ) = sex_male then
12168: LD_VAR 0 2
12172: PPUSH
12173: CALL_OW 258
12177: PUSH
12178: LD_INT 1
12180: EQUAL
12181: IFFALSE 12264
// begin Say ( un , VD-un1 ) ;
12183: LD_VAR 0 2
12187: PPUSH
12188: LD_STRING VD-un1
12190: PPUSH
12191: CALL_OW 88
// Say ( us_commander , VDc-1 ) ;
12195: LD_EXP 24
12199: PPUSH
12200: LD_STRING VDc-1
12202: PPUSH
12203: CALL_OW 88
// Say ( un , VD-un2 ) ;
12207: LD_VAR 0 2
12211: PPUSH
12212: LD_STRING VD-un2
12214: PPUSH
12215: CALL_OW 88
// Say ( us_commander , VDc-2 ) ;
12219: LD_EXP 24
12223: PPUSH
12224: LD_STRING VDc-2
12226: PPUSH
12227: CALL_OW 88
// Say ( un , VD-un3 ) ;
12231: LD_VAR 0 2
12235: PPUSH
12236: LD_STRING VD-un3
12238: PPUSH
12239: CALL_OW 88
// wait ( 0 0$0.2 ) ;
12243: LD_INT 7
12245: PPUSH
12246: CALL_OW 67
// Say ( un , VD-un4 ) ;
12250: LD_VAR 0 2
12254: PPUSH
12255: LD_STRING VD-un4
12257: PPUSH
12258: CALL_OW 88
// end else
12262: GO 12343
// begin Say ( un , VD-unf1 ) ;
12264: LD_VAR 0 2
12268: PPUSH
12269: LD_STRING VD-unf1
12271: PPUSH
12272: CALL_OW 88
// Say ( us_commander , VDc-1 ) ;
12276: LD_EXP 24
12280: PPUSH
12281: LD_STRING VDc-1
12283: PPUSH
12284: CALL_OW 88
// Say ( un , VD-unf2 ) ;
12288: LD_VAR 0 2
12292: PPUSH
12293: LD_STRING VD-unf2
12295: PPUSH
12296: CALL_OW 88
// Say ( us_commander , VDc-2 ) ;
12300: LD_EXP 24
12304: PPUSH
12305: LD_STRING VDc-2
12307: PPUSH
12308: CALL_OW 88
// Say ( un , VD-unf3 ) ;
12312: LD_VAR 0 2
12316: PPUSH
12317: LD_STRING VD-unf3
12319: PPUSH
12320: CALL_OW 88
// wait ( 0 0$0.2 ) ;
12324: LD_INT 7
12326: PPUSH
12327: CALL_OW 67
// Say ( un , VD-unf4 ) ;
12331: LD_VAR 0 2
12335: PPUSH
12336: LD_STRING VD-unf4
12338: PPUSH
12339: CALL_OW 88
// end ; ComMoveXY ( un , 2 , 2 ) ;
12343: LD_VAR 0 2
12347: PPUSH
12348: LD_INT 2
12350: PPUSH
12351: LD_INT 2
12353: PPUSH
12354: CALL_OW 111
// Say ( us_commander , VDc-3 ) ;
12358: LD_EXP 24
12362: PPUSH
12363: LD_STRING VDc-3
12365: PPUSH
12366: CALL_OW 88
// InGameOff ;
12370: CALL_OW 9
// ChangeMissionObjectives ( CVulc1 ) ;
12374: LD_STRING CVulc1
12376: PPUSH
12377: CALL_OW 337
// repeat Wait ( 0 0$01 ) ;
12381: LD_INT 35
12383: PPUSH
12384: CALL_OW 67
// until GetX ( un ) = 2 and GetY ( un ) = 2 ;
12388: LD_VAR 0 2
12392: PPUSH
12393: CALL_OW 250
12397: PUSH
12398: LD_INT 2
12400: EQUAL
12401: IFFALSE 12418
12403: PUSH
12404: LD_VAR 0 2
12408: PPUSH
12409: CALL_OW 251
12413: PUSH
12414: LD_INT 2
12416: EQUAL
12417: AND
12418: IFFALSE 12381
// RemoveUnit ( un ) ;
12420: LD_VAR 0 2
12424: PPUSH
12425: CALL_OW 64
// end else
12429: GO 12808
// if your_side = 2 then
12431: LD_OWVAR 2
12435: PUSH
12436: LD_INT 2
12438: EQUAL
12439: IFFALSE 12655
// begin CenterNowOnUnits ( player_commander ) ;
12441: LD_EXP 11
12445: PPUSH
12446: CALL_OW 87
// speaker := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff ar_commander ;
12450: LD_ADDR_VAR 0 4
12454: PUSH
12455: LD_INT 22
12457: PUSH
12458: LD_INT 2
12460: PUSH
12461: EMPTY
12462: LIST
12463: LIST
12464: PUSH
12465: LD_INT 21
12467: PUSH
12468: LD_INT 1
12470: PUSH
12471: EMPTY
12472: LIST
12473: LIST
12474: PUSH
12475: EMPTY
12476: LIST
12477: LIST
12478: PPUSH
12479: CALL_OW 69
12483: PUSH
12484: LD_EXP 57
12488: DIFF
12489: ST_TO_ADDR
// if speaker then
12490: LD_VAR 0 4
12494: IFFALSE 12646
// begin InGameOn ;
12496: CALL_OW 8
// Say ( ar_commander , VSd-1 ) ;
12500: LD_EXP 57
12504: PPUSH
12505: LD_STRING VSd-1
12507: PPUSH
12508: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
12512: LD_VAR 0 4
12516: PUSH
12517: LD_INT 1
12519: ARRAY
12520: PPUSH
12521: CALL_OW 258
12525: PUSH
12526: LD_INT 1
12528: EQUAL
12529: IFFALSE 12549
// Say ( speaker [ 1 ] , VAd-1 ) else
12531: LD_VAR 0 4
12535: PUSH
12536: LD_INT 1
12538: ARRAY
12539: PPUSH
12540: LD_STRING VAd-1
12542: PPUSH
12543: CALL_OW 88
12547: GO 12565
// Say ( speaker [ 1 ] , VAfd-1 ) ;
12549: LD_VAR 0 4
12553: PUSH
12554: LD_INT 1
12556: ARRAY
12557: PPUSH
12558: LD_STRING VAfd-1
12560: PPUSH
12561: CALL_OW 88
// Say ( ar_commander , VSd-2 ) ;
12565: LD_EXP 57
12569: PPUSH
12570: LD_STRING VSd-2
12572: PPUSH
12573: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
12577: LD_VAR 0 4
12581: PUSH
12582: LD_INT 1
12584: ARRAY
12585: PPUSH
12586: CALL_OW 258
12590: PUSH
12591: LD_INT 1
12593: EQUAL
12594: IFFALSE 12614
// Say ( speaker [ 1 ] , VAd-2 ) else
12596: LD_VAR 0 4
12600: PUSH
12601: LD_INT 1
12603: ARRAY
12604: PPUSH
12605: LD_STRING VAd-2
12607: PPUSH
12608: CALL_OW 88
12612: GO 12630
// Say ( speaker [ 1 ] , VAfd-2 ) ;
12614: LD_VAR 0 4
12618: PUSH
12619: LD_INT 1
12621: ARRAY
12622: PPUSH
12623: LD_STRING VAfd-2
12625: PPUSH
12626: CALL_OW 88
// Say ( ar_commander , VSd-3 ) ;
12630: LD_EXP 57
12634: PPUSH
12635: LD_STRING VSd-3
12637: PPUSH
12638: CALL_OW 88
// InGameOff ;
12642: CALL_OW 9
// end ; ChangeMissionObjectives ( CVulc5 ) ;
12646: LD_STRING CVulc5
12648: PPUSH
12649: CALL_OW 337
// end else
12653: GO 12808
// if your_side = 7 then
12655: LD_OWVAR 2
12659: PUSH
12660: LD_INT 7
12662: EQUAL
12663: IFFALSE 12808
// begin speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) diff al_commander ;
12665: LD_ADDR_VAR 0 4
12669: PUSH
12670: LD_INT 22
12672: PUSH
12673: LD_INT 7
12675: PUSH
12676: EMPTY
12677: LIST
12678: LIST
12679: PUSH
12680: LD_INT 21
12682: PUSH
12683: LD_INT 1
12685: PUSH
12686: EMPTY
12687: LIST
12688: LIST
12689: PUSH
12690: EMPTY
12691: LIST
12692: LIST
12693: PPUSH
12694: CALL_OW 69
12698: PUSH
12699: LD_EXP 43
12703: DIFF
12704: ST_TO_ADDR
// if speaker then
12705: LD_VAR 0 4
12709: IFFALSE 12801
// begin CenterNowOnUnits ( al_commander ) ;
12711: LD_EXP 43
12715: PPUSH
12716: CALL_OW 87
// InGameOn ;
12720: CALL_OW 8
// Say ( al_commander , VPd-1 ) ;
12724: LD_EXP 43
12728: PPUSH
12729: LD_STRING VPd-1
12731: PPUSH
12732: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) then
12736: LD_VAR 0 4
12740: PUSH
12741: LD_INT 1
12743: ARRAY
12744: PPUSH
12745: CALL_OW 258
12749: IFFALSE 12769
// Say ( speaker [ 1 ] , VPpd-1 ) else
12751: LD_VAR 0 4
12755: PUSH
12756: LD_INT 1
12758: ARRAY
12759: PPUSH
12760: LD_STRING VPpd-1
12762: PPUSH
12763: CALL_OW 88
12767: GO 12785
// Say ( speaker [ 1 ] , VPpdf-1 ) ;
12769: LD_VAR 0 4
12773: PUSH
12774: LD_INT 1
12776: ARRAY
12777: PPUSH
12778: LD_STRING VPpdf-1
12780: PPUSH
12781: CALL_OW 88
// Say ( al_commander , VPd-2 ) ;
12785: LD_EXP 43
12789: PPUSH
12790: LD_STRING VPd-2
12792: PPUSH
12793: CALL_OW 88
// InGameOff ;
12797: CALL_OW 9
// end ; ChangeMissionObjectives ( CVulc7 ) ;
12801: LD_STRING CVulc7
12803: PPUSH
12804: CALL_OW 337
// end ; SaveForQuickRestart ;
12808: CALL_OW 22
// end ;
12812: LD_VAR 0 1
12816: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) do
12817: LD_INT 22
12819: PUSH
12820: LD_INT 2
12822: PUSH
12823: EMPTY
12824: LIST
12825: LIST
12826: PUSH
12827: LD_INT 30
12829: PUSH
12830: LD_INT 3
12832: PUSH
12833: EMPTY
12834: LIST
12835: LIST
12836: PUSH
12837: EMPTY
12838: LIST
12839: LIST
12840: PPUSH
12841: CALL_OW 69
12845: IFFALSE 12889
12847: GO 12849
12849: DISABLE
// begin ChangeMissionObjectives ( CVulc6 ) ;
12850: LD_STRING CVulc6
12852: PPUSH
12853: CALL_OW 337
// Wait ( [ 25 25$00 , 22 22$30 , 20 20$00 ] [ Difficulty ] ) ;
12857: LD_INT 52500
12859: PUSH
12860: LD_INT 47250
12862: PUSH
12863: LD_INT 42000
12865: PUSH
12866: EMPTY
12867: LIST
12868: LIST
12869: LIST
12870: PUSH
12871: LD_OWVAR 67
12875: ARRAY
12876: PPUSH
12877: CALL_OW 67
// ru_can_attack := true ;
12881: LD_ADDR_EXP 3
12885: PUSH
12886: LD_INT 1
12888: ST_TO_ADDR
// end ;
12889: END
// every 0 0$01 trigger GetSide ( us_depot ) = 1 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_warehouse ] ] ] ) do var speaker ;
12890: LD_INT 50
12892: PPUSH
12893: CALL_OW 255
12897: PUSH
12898: LD_INT 1
12900: EQUAL
12901: IFTRUE 12951
12903: PUSH
12904: LD_INT 22
12906: PUSH
12907: LD_INT 1
12909: PUSH
12910: EMPTY
12911: LIST
12912: LIST
12913: PUSH
12914: LD_INT 2
12916: PUSH
12917: LD_INT 30
12919: PUSH
12920: LD_INT 3
12922: PUSH
12923: EMPTY
12924: LIST
12925: LIST
12926: PUSH
12927: LD_INT 30
12929: PUSH
12930: LD_INT 1
12932: PUSH
12933: EMPTY
12934: LIST
12935: LIST
12936: PUSH
12937: EMPTY
12938: LIST
12939: LIST
12940: LIST
12941: PUSH
12942: EMPTY
12943: LIST
12944: LIST
12945: PPUSH
12946: CALL_OW 69
12950: OR
12951: IFFALSE 13185
12953: GO 12955
12955: DISABLE
12956: LD_INT 0
12958: PPUSH
// begin ChangeMissionObjectives ( CVulc2 ) ;
12959: LD_STRING CVulc2
12961: PPUSH
12962: CALL_OW 337
// speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) diff us_commander ;
12966: LD_ADDR_VAR 0 1
12970: PUSH
12971: LD_INT 22
12973: PUSH
12974: LD_INT 1
12976: PUSH
12977: EMPTY
12978: LIST
12979: LIST
12980: PUSH
12981: LD_INT 25
12983: PUSH
12984: LD_INT 2
12986: PUSH
12987: EMPTY
12988: LIST
12989: LIST
12990: PUSH
12991: EMPTY
12992: LIST
12993: LIST
12994: PPUSH
12995: CALL_OW 69
12999: PUSH
13000: LD_EXP 24
13004: DIFF
13005: ST_TO_ADDR
// DialogueOn ;
13006: CALL_OW 6
// DWait ( 0 0$0.3 ) ;
13010: LD_INT 10
13012: PPUSH
13013: CALL_OW 68
// if GetSex ( speaker [ 1 ] ) = sex_male then
13017: LD_VAR 0 1
13021: PUSH
13022: LD_INT 1
13024: ARRAY
13025: PPUSH
13026: CALL_OW 258
13030: PUSH
13031: LD_INT 1
13033: EQUAL
13034: IFFALSE 13054
// Say ( speaker [ 1 ] , VDb-1 ) else
13036: LD_VAR 0 1
13040: PUSH
13041: LD_INT 1
13043: ARRAY
13044: PPUSH
13045: LD_STRING VDb-1
13047: PPUSH
13048: CALL_OW 88
13052: GO 13070
// Say ( speaker [ 1 ] , VDbf-1 ) ;
13054: LD_VAR 0 1
13058: PUSH
13059: LD_INT 1
13061: ARRAY
13062: PPUSH
13063: LD_STRING VDbf-1
13065: PPUSH
13066: CALL_OW 88
// DWait ( 0 0$0.3 ) ;
13070: LD_INT 10
13072: PPUSH
13073: CALL_OW 68
// if GetSex ( speaker [ 1 ] ) = sex_male then
13077: LD_VAR 0 1
13081: PUSH
13082: LD_INT 1
13084: ARRAY
13085: PPUSH
13086: CALL_OW 258
13090: PUSH
13091: LD_INT 1
13093: EQUAL
13094: IFFALSE 13114
// Say ( speaker [ 1 ] , VDb-2 ) else
13096: LD_VAR 0 1
13100: PUSH
13101: LD_INT 1
13103: ARRAY
13104: PPUSH
13105: LD_STRING VDb-2
13107: PPUSH
13108: CALL_OW 88
13112: GO 13130
// Say ( speaker [ 1 ] , VDbf-2 ) ;
13114: LD_VAR 0 1
13118: PUSH
13119: LD_INT 1
13121: ARRAY
13122: PPUSH
13123: LD_STRING VDbf-2
13125: PPUSH
13126: CALL_OW 88
// DWait ( 0 0$01 ) ;
13130: LD_INT 35
13132: PPUSH
13133: CALL_OW 68
// Say ( us_commander , VDb-com1 ) ;
13137: LD_EXP 24
13141: PPUSH
13142: LD_STRING VDb-com1
13144: PPUSH
13145: CALL_OW 88
// DialogueOff ;
13149: CALL_OW 7
// Wait ( [ 21 21$00 , 17 17$30 , 15 15$00 ] [ Difficulty ] ) ;
13153: LD_INT 44100
13155: PUSH
13156: LD_INT 36750
13158: PUSH
13159: LD_INT 31500
13161: PUSH
13162: EMPTY
13163: LIST
13164: LIST
13165: LIST
13166: PUSH
13167: LD_OWVAR 67
13171: ARRAY
13172: PPUSH
13173: CALL_OW 67
// ru_can_attack := true ;
13177: LD_ADDR_EXP 3
13181: PUSH
13182: LD_INT 1
13184: ST_TO_ADDR
// end ;
13185: PPOPN 1
13187: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) do
13188: LD_INT 22
13190: PUSH
13191: LD_INT 7
13193: PUSH
13194: EMPTY
13195: LIST
13196: LIST
13197: PUSH
13198: LD_INT 30
13200: PUSH
13201: LD_INT 3
13203: PUSH
13204: EMPTY
13205: LIST
13206: LIST
13207: PUSH
13208: EMPTY
13209: LIST
13210: LIST
13211: PPUSH
13212: CALL_OW 69
13216: IFFALSE 13253
13218: GO 13220
13220: DISABLE
// begin Wait ( [ 20 20$00 , 16 16$30 , 14 14$00 ] [ Difficulty ] ) ;
13221: LD_INT 42000
13223: PUSH
13224: LD_INT 34650
13226: PUSH
13227: LD_INT 29400
13229: PUSH
13230: EMPTY
13231: LIST
13232: LIST
13233: LIST
13234: PUSH
13235: LD_OWVAR 67
13239: ARRAY
13240: PPUSH
13241: CALL_OW 67
// ru_can_attack := true ;
13245: LD_ADDR_EXP 3
13249: PUSH
13250: LD_INT 1
13252: ST_TO_ADDR
// end ;
13253: END
// every 0 0$01 trigger GetSide ( us_lab ) = 1 do var speaker ;
13254: LD_INT 58
13256: PPUSH
13257: CALL_OW 255
13261: PUSH
13262: LD_INT 1
13264: EQUAL
13265: IFFALSE 13459
13267: GO 13269
13269: DISABLE
13270: LD_INT 0
13272: PPUSH
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
13273: LD_ADDR_VAR 0 1
13277: PUSH
13278: LD_INT 22
13280: PUSH
13281: LD_INT 1
13283: PUSH
13284: EMPTY
13285: LIST
13286: LIST
13287: PUSH
13288: LD_INT 25
13290: PUSH
13291: LD_INT 2
13293: PUSH
13294: EMPTY
13295: LIST
13296: LIST
13297: PUSH
13298: EMPTY
13299: LIST
13300: LIST
13301: PPUSH
13302: CALL_OW 69
13306: ST_TO_ADDR
// DialogueOn ;
13307: CALL_OW 6
// if speaker then
13311: LD_VAR 0 1
13315: IFFALSE 13370
// if GetSex ( speaker [ 1 ] ) = sex_male then
13317: LD_VAR 0 1
13321: PUSH
13322: LD_INT 1
13324: ARRAY
13325: PPUSH
13326: CALL_OW 258
13330: PUSH
13331: LD_INT 1
13333: EQUAL
13334: IFFALSE 13354
// Say ( speaker [ 1 ] , VDe-1 ) else
13336: LD_VAR 0 1
13340: PUSH
13341: LD_INT 1
13343: ARRAY
13344: PPUSH
13345: LD_STRING VDe-1
13347: PPUSH
13348: CALL_OW 88
13352: GO 13370
// Say ( speaker [ 1 ] , VDef-1 ) ;
13354: LD_VAR 0 1
13358: PUSH
13359: LD_INT 1
13361: ARRAY
13362: PPUSH
13363: LD_STRING VDef-1
13365: PPUSH
13366: CALL_OW 88
// Query ( SibNote ) ;
13370: LD_STRING SibNote
13372: PPUSH
13373: CALL_OW 97
// if speaker then
13377: LD_VAR 0 1
13381: IFFALSE 13436
// if GetSex ( speaker [ 1 ] ) = sex_male then
13383: LD_VAR 0 1
13387: PUSH
13388: LD_INT 1
13390: ARRAY
13391: PPUSH
13392: CALL_OW 258
13396: PUSH
13397: LD_INT 1
13399: EQUAL
13400: IFFALSE 13420
// Say ( speaker [ 1 ] , VDe-2 ) else
13402: LD_VAR 0 1
13406: PUSH
13407: LD_INT 1
13409: ARRAY
13410: PPUSH
13411: LD_STRING VDe-2
13413: PPUSH
13414: CALL_OW 88
13418: GO 13436
// Say ( speaker [ 1 ] , VDef-2 ) ;
13420: LD_VAR 0 1
13424: PUSH
13425: LD_INT 1
13427: ARRAY
13428: PPUSH
13429: LD_STRING VDef-2
13431: PPUSH
13432: CALL_OW 88
// Say ( us_commander , VDc-4 ) ;
13436: LD_EXP 24
13440: PPUSH
13441: LD_STRING VDc-4
13443: PPUSH
13444: CALL_OW 88
// DialogueOff ;
13448: CALL_OW 7
// ChangeMissionObjectives ( CVulc3 ) ;
13452: LD_STRING CVulc3
13454: PPUSH
13455: CALL_OW 337
// end ;
13459: PPOPN 1
13461: END
// every 0 0$01 trigger your_side = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) > 0 do var i , un , veh ;
13462: LD_OWVAR 2
13466: PUSH
13467: LD_INT 1
13469: EQUAL
13470: IFFALSE 13506
13472: PUSH
13473: LD_INT 22
13475: PUSH
13476: LD_INT 1
13478: PUSH
13479: EMPTY
13480: LIST
13481: LIST
13482: PUSH
13483: LD_INT 30
13485: PUSH
13486: LD_INT 3
13488: PUSH
13489: EMPTY
13490: LIST
13491: LIST
13492: PUSH
13493: EMPTY
13494: LIST
13495: LIST
13496: PPUSH
13497: CALL_OW 69
13501: PUSH
13502: LD_INT 0
13504: GREATER
13505: AND
13506: IFFALSE 13952
13508: GO 13510
13510: DISABLE
13511: LD_INT 0
13513: PPUSH
13514: PPUSH
13515: PPUSH
// begin Wait ( Rand ( 0 0$07 , 0 0$37 ) ) ;
13516: LD_INT 245
13518: PPUSH
13519: LD_INT 1295
13521: PPUSH
13522: CALL_OW 12
13526: PPUSH
13527: CALL_OW 67
// DialogueOn ;
13531: CALL_OW 6
// SayRadio ( us_guy , VDG-1 ) ;
13535: LD_EXP 27
13539: PPUSH
13540: LD_STRING VDG-1
13542: PPUSH
13543: CALL_OW 94
// Say ( us_commander , VDc-5 ) ;
13547: LD_EXP 24
13551: PPUSH
13552: LD_STRING VDc-5
13554: PPUSH
13555: CALL_OW 88
// SayRadio ( us_guy , VDG-2 ) ;
13559: LD_EXP 27
13563: PPUSH
13564: LD_STRING VDG-2
13566: PPUSH
13567: CALL_OW 94
// Say ( us_commander , VDc-6 ) ;
13571: LD_EXP 24
13575: PPUSH
13576: LD_STRING VDc-6
13578: PPUSH
13579: CALL_OW 88
// Say ( us_commander , VDc-6a ) ;
13583: LD_EXP 24
13587: PPUSH
13588: LD_STRING VDc-6a
13590: PPUSH
13591: CALL_OW 88
// SayRadio ( us_guy , VDG-3 ) ;
13595: LD_EXP 27
13599: PPUSH
13600: LD_STRING VDG-3
13602: PPUSH
13603: CALL_OW 94
// Say ( us_commander , VDc-7 ) ;
13607: LD_EXP 24
13611: PPUSH
13612: LD_STRING VDc-7
13614: PPUSH
13615: CALL_OW 88
// SayRadio ( us_guy , VDG-4 ) ;
13619: LD_EXP 27
13623: PPUSH
13624: LD_STRING VDG-4
13626: PPUSH
13627: CALL_OW 94
// DialogueOff ;
13631: CALL_OW 7
// ChangeMissionObjectives ( CVulc4 ) ;
13635: LD_STRING CVulc4
13637: PPUSH
13638: CALL_OW 337
// Wait ( [ 9 9$00 , 10 10$00 , 11 11$00 ] [ Difficulty ] ) ;
13642: LD_INT 18900
13644: PUSH
13645: LD_INT 21000
13647: PUSH
13648: LD_INT 23100
13650: PUSH
13651: EMPTY
13652: LIST
13653: LIST
13654: LIST
13655: PUSH
13656: LD_OWVAR 67
13660: ARRAY
13661: PPUSH
13662: CALL_OW 67
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
13666: LD_ADDR_VAR 0 1
13670: PUSH
13671: DOUBLE
13672: LD_INT 1
13674: DEC
13675: ST_TO_ADDR
13676: LD_INT 4
13678: PUSH
13679: LD_INT 5
13681: PUSH
13682: LD_INT 6
13684: PUSH
13685: EMPTY
13686: LIST
13687: LIST
13688: LIST
13689: PUSH
13690: LD_OWVAR 67
13694: ARRAY
13695: PUSH
13696: FOR_TO
13697: IFFALSE 13941
// begin uc_side := 1 ;
13699: LD_ADDR_OWVAR 20
13703: PUSH
13704: LD_INT 1
13706: ST_TO_ADDR
// uc_nation := 1 ;
13707: LD_ADDR_OWVAR 21
13711: PUSH
13712: LD_INT 1
13714: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , us_skill ) ;
13715: LD_INT 0
13717: PPUSH
13718: LD_INT 1
13720: PPUSH
13721: LD_INT 4
13723: PPUSH
13724: CALL_OW 12
13728: PPUSH
13729: LD_EXP 26
13733: PPUSH
13734: CALL_OW 380
// un := CreateHuman ;
13738: LD_ADDR_VAR 0 2
13742: PUSH
13743: CALL_OW 44
13747: ST_TO_ADDR
// SetDir ( un , 2 ) ;
13748: LD_VAR 0 2
13752: PPUSH
13753: LD_INT 2
13755: PPUSH
13756: CALL_OW 233
// if GetClass ( un ) = 3 then
13760: LD_VAR 0 2
13764: PPUSH
13765: CALL_OW 257
13769: PUSH
13770: LD_INT 3
13772: EQUAL
13773: IFFALSE 13924
// begin vc_chassis := [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 ] ;
13775: LD_ADDR_OWVAR 37
13779: PUSH
13780: LD_INT 2
13782: PUSH
13783: LD_INT 3
13785: PUSH
13786: EMPTY
13787: LIST
13788: LIST
13789: PUSH
13790: LD_VAR 0 1
13794: PUSH
13795: LD_INT 2
13797: MOD
13798: ARRAY
13799: ST_TO_ADDR
// vc_engine := engine_combustion ;
13800: LD_ADDR_OWVAR 39
13804: PUSH
13805: LD_INT 1
13807: ST_TO_ADDR
// vc_control := control_manual ;
13808: LD_ADDR_OWVAR 38
13812: PUSH
13813: LD_INT 1
13815: ST_TO_ADDR
// vc_weapon := [ us_laser , us_laser , us_double_gun , us_radar ] [ rand ( 1 , 4 ) ] ;
13816: LD_ADDR_OWVAR 40
13820: PUSH
13821: LD_INT 9
13823: PUSH
13824: LD_INT 9
13826: PUSH
13827: LD_INT 5
13829: PUSH
13830: LD_INT 11
13832: PUSH
13833: EMPTY
13834: LIST
13835: LIST
13836: LIST
13837: LIST
13838: PUSH
13839: LD_INT 1
13841: PPUSH
13842: LD_INT 4
13844: PPUSH
13845: CALL_OW 12
13849: ARRAY
13850: ST_TO_ADDR
// veh := CreateVehicle ;
13851: LD_ADDR_VAR 0 3
13855: PUSH
13856: CALL_OW 45
13860: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
13861: LD_VAR 0 3
13865: PPUSH
13866: LD_INT 2
13868: PPUSH
13869: CALL_OW 233
// SetFuel ( veh , Rand ( 77 , 88 ) ) ;
13873: LD_VAR 0 3
13877: PPUSH
13878: LD_INT 77
13880: PPUSH
13881: LD_INT 88
13883: PPUSH
13884: CALL_OW 12
13888: PPUSH
13889: CALL_OW 240
// PlaceUnitArea ( veh , start_north , false ) ;
13893: LD_VAR 0 3
13897: PPUSH
13898: LD_INT 1
13900: PPUSH
13901: LD_INT 0
13903: PPUSH
13904: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
13908: LD_VAR 0 2
13912: PPUSH
13913: LD_VAR 0 3
13917: PPUSH
13918: CALL_OW 52
// end else
13922: GO 13939
// PlaceUnitArea ( un , start_north , false ) ;
13924: LD_VAR 0 2
13928: PPUSH
13929: LD_INT 1
13931: PPUSH
13932: LD_INT 0
13934: PPUSH
13935: CALL_OW 49
// end ;
13939: GO 13696
13941: POP
13942: POP
// CenterNowOnUnits ( un ) ;
13943: LD_VAR 0 2
13947: PPUSH
13948: CALL_OW 87
// end ;
13952: PPOPN 3
13954: END
// every 0 0$01 trigger FilterUnitsInArea ( vulc_artifact , [ f_side , your_side ] ) do var un , filter ;
13955: LD_INT 21
13957: PPUSH
13958: LD_INT 22
13960: PUSH
13961: LD_OWVAR 2
13965: PUSH
13966: EMPTY
13967: LIST
13968: LIST
13969: PPUSH
13970: CALL_OW 70
13974: IFFALSE 14295
13976: GO 13978
13978: DISABLE
13979: LD_INT 0
13981: PPUSH
13982: PPUSH
// begin filter := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff player_commander ;
13983: LD_ADDR_VAR 0 2
13987: PUSH
13988: LD_INT 22
13990: PUSH
13991: LD_OWVAR 2
13995: PUSH
13996: EMPTY
13997: LIST
13998: LIST
13999: PUSH
14000: LD_INT 2
14002: PUSH
14003: LD_INT 25
14005: PUSH
14006: LD_INT 1
14008: PUSH
14009: EMPTY
14010: LIST
14011: LIST
14012: PUSH
14013: LD_INT 25
14015: PUSH
14016: LD_INT 2
14018: PUSH
14019: EMPTY
14020: LIST
14021: LIST
14022: PUSH
14023: LD_INT 25
14025: PUSH
14026: LD_INT 3
14028: PUSH
14029: EMPTY
14030: LIST
14031: LIST
14032: PUSH
14033: LD_INT 25
14035: PUSH
14036: LD_INT 4
14038: PUSH
14039: EMPTY
14040: LIST
14041: LIST
14042: PUSH
14043: EMPTY
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: LIST
14049: PUSH
14050: EMPTY
14051: LIST
14052: LIST
14053: PPUSH
14054: CALL_OW 69
14058: PUSH
14059: LD_EXP 11
14063: DIFF
14064: ST_TO_ADDR
// un := NearestUnitToXY ( filter , 112 , 67 ) ;
14065: LD_ADDR_VAR 0 1
14069: PUSH
14070: LD_VAR 0 2
14074: PPUSH
14075: LD_INT 112
14077: PPUSH
14078: LD_INT 67
14080: PPUSH
14081: CALL_OW 73
14085: ST_TO_ADDR
// if GetSide ( un ) = 7 then
14086: LD_VAR 0 1
14090: PPUSH
14091: CALL_OW 255
14095: PUSH
14096: LD_INT 7
14098: EQUAL
14099: IFFALSE 14142
// if GetSex ( un ) = sex_male then
14101: LD_VAR 0 1
14105: PPUSH
14106: CALL_OW 258
14110: PUSH
14111: LD_INT 1
14113: EQUAL
14114: IFFALSE 14130
// Say ( un , VD-find-al ) else
14116: LD_VAR 0 1
14120: PPUSH
14121: LD_STRING VD-find-al
14123: PPUSH
14124: CALL_OW 88
14128: GO 14142
// Say ( un , VD-find-al-f ) ;
14130: LD_VAR 0 1
14134: PPUSH
14135: LD_STRING VD-find-al-f
14137: PPUSH
14138: CALL_OW 88
// if GetSide ( un ) = 2 then
14142: LD_VAR 0 1
14146: PPUSH
14147: CALL_OW 255
14151: PUSH
14152: LD_INT 2
14154: EQUAL
14155: IFFALSE 14198
// if GetSex ( un ) = sex_male then
14157: LD_VAR 0 1
14161: PPUSH
14162: CALL_OW 258
14166: PUSH
14167: LD_INT 1
14169: EQUAL
14170: IFFALSE 14186
// Say ( un , VD-find-ar ) else
14172: LD_VAR 0 1
14176: PPUSH
14177: LD_STRING VD-find-ar
14179: PPUSH
14180: CALL_OW 88
14184: GO 14198
// Say ( un , VD-find-ar-f ) ;
14186: LD_VAR 0 1
14190: PPUSH
14191: LD_STRING VD-find-ar-f
14193: PPUSH
14194: CALL_OW 88
// if GetSide ( un ) = 1 then
14198: LD_VAR 0 1
14202: PPUSH
14203: CALL_OW 255
14207: PUSH
14208: LD_INT 1
14210: EQUAL
14211: IFFALSE 14278
// begin if GetSex ( un ) = sex_male then
14213: LD_VAR 0 1
14217: PPUSH
14218: CALL_OW 258
14222: PUSH
14223: LD_INT 1
14225: EQUAL
14226: IFFALSE 14254
// begin Say ( un , VD-find-us ) ;
14228: LD_VAR 0 1
14232: PPUSH
14233: LD_STRING VD-find-us
14235: PPUSH
14236: CALL_OW 88
// Say ( un , VD-find-us2 ) ;
14240: LD_VAR 0 1
14244: PPUSH
14245: LD_STRING VD-find-us2
14247: PPUSH
14248: CALL_OW 88
// end else
14252: GO 14278
// begin Say ( un , VD-find-us-f ) ;
14254: LD_VAR 0 1
14258: PPUSH
14259: LD_STRING VD-find-us-f
14261: PPUSH
14262: CALL_OW 88
// Say ( un , VD-find-us2-f ) ;
14266: LD_VAR 0 1
14270: PPUSH
14271: LD_STRING VD-find-us2-f
14273: PPUSH
14274: CALL_OW 88
// end ; end ; Wait ( 0 0$0.3 ) ;
14278: LD_INT 10
14280: PPUSH
14281: CALL_OW 67
// CenterNowOnXY ( 112 , 67 ) ;
14285: LD_INT 112
14287: PPUSH
14288: LD_INT 67
14290: PPUSH
14291: CALL_OW 86
// end ;
14295: PPOPN 2
14297: END
// every 0 0$01 trigger player_artifact_ready do var speaker ;
14298: LD_EXP 8
14302: IFFALSE 14804
14304: GO 14306
14306: DISABLE
14307: LD_INT 0
14309: PPUSH
// begin if your_side = 1 then
14310: LD_OWVAR 2
14314: PUSH
14315: LD_INT 1
14317: EQUAL
14318: IFFALSE 14499
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) diff us_commander ;
14320: LD_ADDR_VAR 0 1
14324: PUSH
14325: LD_INT 22
14327: PUSH
14328: LD_INT 1
14330: PUSH
14331: EMPTY
14332: LIST
14333: LIST
14334: PUSH
14335: LD_INT 25
14337: PUSH
14338: LD_INT 4
14340: PUSH
14341: EMPTY
14342: LIST
14343: LIST
14344: PUSH
14345: EMPTY
14346: LIST
14347: LIST
14348: PPUSH
14349: CALL_OW 69
14353: PUSH
14354: LD_EXP 24
14358: DIFF
14359: ST_TO_ADDR
// if not speaker then
14360: LD_VAR 0 1
14364: NOT
14365: IFFALSE 14369
// exit ;
14367: GO 14804
// if GetSex ( speaker [ 1 ] ) = sex_male then
14369: LD_VAR 0 1
14373: PUSH
14374: LD_INT 1
14376: ARRAY
14377: PPUSH
14378: CALL_OW 258
14382: PUSH
14383: LD_INT 1
14385: EQUAL
14386: IFFALSE 14406
// Say ( speaker [ 1 ] , VD-us-sci-art-1 ) else
14388: LD_VAR 0 1
14392: PUSH
14393: LD_INT 1
14395: ARRAY
14396: PPUSH
14397: LD_STRING VD-us-sci-art-1
14399: PPUSH
14400: CALL_OW 88
14404: GO 14422
// Say ( speaker [ 1 ] , VD-us-fsci-art-1 ) ;
14406: LD_VAR 0 1
14410: PUSH
14411: LD_INT 1
14413: ARRAY
14414: PPUSH
14415: LD_STRING VD-us-fsci-art-1
14417: PPUSH
14418: CALL_OW 88
// Say ( us_commander , VDc-art1 ) ;
14422: LD_EXP 24
14426: PPUSH
14427: LD_STRING VDc-art1
14429: PPUSH
14430: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
14434: LD_VAR 0 1
14438: PUSH
14439: LD_INT 1
14441: ARRAY
14442: PPUSH
14443: CALL_OW 258
14447: PUSH
14448: LD_INT 1
14450: EQUAL
14451: IFFALSE 14471
// Say ( speaker [ 1 ] , VD-us-sci-art-2 ) else
14453: LD_VAR 0 1
14457: PUSH
14458: LD_INT 1
14460: ARRAY
14461: PPUSH
14462: LD_STRING VD-us-sci-art-2
14464: PPUSH
14465: CALL_OW 88
14469: GO 14487
// Say ( speaker [ 1 ] , VD-us-fsci-art-2 ) ;
14471: LD_VAR 0 1
14475: PUSH
14476: LD_INT 1
14478: ARRAY
14479: PPUSH
14480: LD_STRING VD-us-fsci-art-2
14482: PPUSH
14483: CALL_OW 88
// Say ( us_commander , VDc-art2 ) ;
14487: LD_EXP 24
14491: PPUSH
14492: LD_STRING VDc-art2
14494: PPUSH
14495: CALL_OW 88
// end ; if your_side = 2 then
14499: LD_OWVAR 2
14503: PUSH
14504: LD_INT 2
14506: EQUAL
14507: IFFALSE 14611
// begin speaker := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) diff ar_commander ;
14509: LD_ADDR_VAR 0 1
14513: PUSH
14514: LD_INT 22
14516: PUSH
14517: LD_INT 2
14519: PUSH
14520: EMPTY
14521: LIST
14522: LIST
14523: PUSH
14524: LD_INT 25
14526: PUSH
14527: LD_INT 4
14529: PUSH
14530: EMPTY
14531: LIST
14532: LIST
14533: PUSH
14534: EMPTY
14535: LIST
14536: LIST
14537: PPUSH
14538: CALL_OW 69
14542: PUSH
14543: LD_EXP 57
14547: DIFF
14548: ST_TO_ADDR
// if not speaker then
14549: LD_VAR 0 1
14553: NOT
14554: IFFALSE 14558
// exit ;
14556: GO 14804
// if GetSex ( speaker [ 1 ] ) = sex_male then
14558: LD_VAR 0 1
14562: PUSH
14563: LD_INT 1
14565: ARRAY
14566: PPUSH
14567: CALL_OW 258
14571: PUSH
14572: LD_INT 1
14574: EQUAL
14575: IFFALSE 14595
// Say ( speaker [ 1 ] , VD-ar-sci-art-1 ) else
14577: LD_VAR 0 1
14581: PUSH
14582: LD_INT 1
14584: ARRAY
14585: PPUSH
14586: LD_STRING VD-ar-sci-art-1
14588: PPUSH
14589: CALL_OW 88
14593: GO 14611
// Say ( speaker [ 1 ] , VD-ar-fsci-art-1 ) ;
14595: LD_VAR 0 1
14599: PUSH
14600: LD_INT 1
14602: ARRAY
14603: PPUSH
14604: LD_STRING VD-ar-fsci-art-1
14606: PPUSH
14607: CALL_OW 88
// end ; if your_side = 7 then
14611: LD_OWVAR 2
14615: PUSH
14616: LD_INT 7
14618: EQUAL
14619: IFFALSE 14804
// begin speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 4 ] ] ) diff al_commander ;
14621: LD_ADDR_VAR 0 1
14625: PUSH
14626: LD_INT 22
14628: PUSH
14629: LD_INT 7
14631: PUSH
14632: EMPTY
14633: LIST
14634: LIST
14635: PUSH
14636: LD_INT 25
14638: PUSH
14639: LD_INT 4
14641: PUSH
14642: EMPTY
14643: LIST
14644: LIST
14645: PUSH
14646: EMPTY
14647: LIST
14648: LIST
14649: PPUSH
14650: CALL_OW 69
14654: PUSH
14655: LD_EXP 43
14659: DIFF
14660: ST_TO_ADDR
// if speaker then
14661: LD_VAR 0 1
14665: IFFALSE 14797
// begin if GetSex ( speaker [ 1 ] ) = sex_male then
14667: LD_VAR 0 1
14671: PUSH
14672: LD_INT 1
14674: ARRAY
14675: PPUSH
14676: CALL_OW 258
14680: PUSH
14681: LD_INT 1
14683: EQUAL
14684: IFFALSE 14704
// Say ( speaker [ 1 ] , VD-al-sci-art-1 ) else
14686: LD_VAR 0 1
14690: PUSH
14691: LD_INT 1
14693: ARRAY
14694: PPUSH
14695: LD_STRING VD-al-sci-art-1
14697: PPUSH
14698: CALL_OW 88
14702: GO 14720
// Say ( speaker [ 1 ] , VD-al-fsci-art-1 ) ;
14704: LD_VAR 0 1
14708: PUSH
14709: LD_INT 1
14711: ARRAY
14712: PPUSH
14713: LD_STRING VD-al-fsci-art-1
14715: PPUSH
14716: CALL_OW 88
// Say ( al_commander , VPd-art-1 ) ;
14720: LD_EXP 43
14724: PPUSH
14725: LD_STRING VPd-art-1
14727: PPUSH
14728: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
14732: LD_VAR 0 1
14736: PUSH
14737: LD_INT 1
14739: ARRAY
14740: PPUSH
14741: CALL_OW 258
14745: PUSH
14746: LD_INT 1
14748: EQUAL
14749: IFFALSE 14769
// Say ( speaker [ 1 ] , VD-al-sci-art-2 ) else
14751: LD_VAR 0 1
14755: PUSH
14756: LD_INT 1
14758: ARRAY
14759: PPUSH
14760: LD_STRING VD-al-sci-art-2
14762: PPUSH
14763: CALL_OW 88
14767: GO 14785
// Say ( speaker [ 1 ] , VD-al-fsci-art-2 ) ;
14769: LD_VAR 0 1
14773: PUSH
14774: LD_INT 1
14776: ARRAY
14777: PPUSH
14778: LD_STRING VD-al-fsci-art-2
14780: PPUSH
14781: CALL_OW 88
// Say ( al_commander , VPd-art-2 ) ;
14785: LD_EXP 43
14789: PPUSH
14790: LD_STRING VPd-art-2
14792: PPUSH
14793: CALL_OW 88
// end ; ChangeMissionObjectives ( CVulc7out ) ;
14797: LD_STRING CVulc7out
14799: PPUSH
14800: CALL_OW 337
// end ; end ;
14804: PPOPN 1
14806: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_see , 8 ] ] ) do var speaker ;
14807: LD_INT 22
14809: PUSH
14810: LD_OWVAR 2
14814: PUSH
14815: EMPTY
14816: LIST
14817: LIST
14818: PUSH
14819: LD_INT 101
14821: PUSH
14822: LD_INT 8
14824: PUSH
14825: EMPTY
14826: LIST
14827: LIST
14828: PUSH
14829: EMPTY
14830: LIST
14831: LIST
14832: PPUSH
14833: CALL_OW 69
14837: IFFALSE 14980
14839: GO 14841
14841: DISABLE
14842: LD_INT 0
14844: PPUSH
// begin if your_side = 1 then
14845: LD_OWVAR 2
14849: PUSH
14850: LD_INT 1
14852: EQUAL
14853: IFFALSE 14936
// begin speaker := FilterAllUnits ( [ f_side , 1 ] ) diff us_commander ;
14855: LD_ADDR_VAR 0 1
14859: PUSH
14860: LD_INT 22
14862: PUSH
14863: LD_INT 1
14865: PUSH
14866: EMPTY
14867: LIST
14868: LIST
14869: PPUSH
14870: CALL_OW 69
14874: PUSH
14875: LD_EXP 24
14879: DIFF
14880: ST_TO_ADDR
// if speaker then
14881: LD_VAR 0 1
14885: IFFALSE 14936
// if GetSex ( speaker [ 1 ] ) then
14887: LD_VAR 0 1
14891: PUSH
14892: LD_INT 1
14894: ARRAY
14895: PPUSH
14896: CALL_OW 258
14900: IFFALSE 14920
// Say ( speaker [ 1 ] , VD-legion-us ) else
14902: LD_VAR 0 1
14906: PUSH
14907: LD_INT 1
14909: ARRAY
14910: PPUSH
14911: LD_STRING VD-legion-us
14913: PPUSH
14914: CALL_OW 88
14918: GO 14936
// Say ( speaker [ 1 ] , VD-legion-us-f ) ;
14920: LD_VAR 0 1
14924: PUSH
14925: LD_INT 1
14927: ARRAY
14928: PPUSH
14929: LD_STRING VD-legion-us-f
14931: PPUSH
14932: CALL_OW 88
// end ; if your_side = 2 then
14936: LD_OWVAR 2
14940: PUSH
14941: LD_INT 2
14943: EQUAL
14944: IFFALSE 14958
// Say ( ar_commander , VD-legion-ar ) ;
14946: LD_EXP 57
14950: PPUSH
14951: LD_STRING VD-legion-ar
14953: PPUSH
14954: CALL_OW 88
// if your_side = 7 then
14958: LD_OWVAR 2
14962: PUSH
14963: LD_INT 7
14965: EQUAL
14966: IFFALSE 14980
// Say ( al_commander , VD-legion-al ) ;
14968: LD_EXP 43
14972: PPUSH
14973: LD_STRING VD-legion-al
14975: PPUSH
14976: CALL_OW 88
// end ;
14980: PPOPN 1
14982: END
// every 0 0$01 trigger mine_vulc do
14983: LD_EXP 13
14987: IFFALSE 15004
14989: GO 14991
14991: DISABLE
// begin Say ( player_commander , VD-vulc-mines ) ;
14992: LD_EXP 11
14996: PPUSH
14997: LD_STRING VD-vulc-mines
14999: PPUSH
15000: CALL_OW 88
// end ;
15004: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and your_side <> 2 do
15005: LD_INT 22
15007: PUSH
15008: LD_INT 3
15010: PUSH
15011: EMPTY
15012: LIST
15013: LIST
15014: PUSH
15015: LD_INT 21
15017: PUSH
15018: LD_INT 1
15020: PUSH
15021: EMPTY
15022: LIST
15023: LIST
15024: PUSH
15025: EMPTY
15026: LIST
15027: LIST
15028: PPUSH
15029: CALL_OW 69
15033: PUSH
15034: LD_INT 0
15036: EQUAL
15037: IFFALSE 15049
15039: PUSH
15040: LD_OWVAR 2
15044: PUSH
15045: LD_INT 2
15047: NONEQUAL
15048: AND
15049: IFFALSE 15058
15051: GO 15053
15053: DISABLE
// Win ;
15054: CALL 15131 0 0
15058: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_or , [ f_side , 8 ] , [ f_side , 3 ] ] , [ f_type , unit_human ] ] ) = 0 and your_side = 2 do
15059: LD_INT 2
15061: PUSH
15062: LD_INT 22
15064: PUSH
15065: LD_INT 8
15067: PUSH
15068: EMPTY
15069: LIST
15070: LIST
15071: PUSH
15072: LD_INT 22
15074: PUSH
15075: LD_INT 3
15077: PUSH
15078: EMPTY
15079: LIST
15080: LIST
15081: PUSH
15082: EMPTY
15083: LIST
15084: LIST
15085: LIST
15086: PUSH
15087: LD_INT 21
15089: PUSH
15090: LD_INT 1
15092: PUSH
15093: EMPTY
15094: LIST
15095: LIST
15096: PUSH
15097: EMPTY
15098: LIST
15099: LIST
15100: PPUSH
15101: CALL_OW 69
15105: PUSH
15106: LD_INT 0
15108: EQUAL
15109: IFFALSE 15121
15111: PUSH
15112: LD_OWVAR 2
15116: PUSH
15117: LD_INT 2
15119: EQUAL
15120: AND
15121: IFFALSE 15130
15123: GO 15125
15125: DISABLE
// Win ;
15126: CALL 15131 0 0
15130: END
// function Win ; var points ; begin
15131: LD_INT 0
15133: PPUSH
15134: PPUSH
// Query ( VulcWin ) ;
15135: LD_STRING VulcWin
15137: PPUSH
15138: CALL_OW 97
// if medal_enabled then
15142: LD_EXP 14
15146: IFFALSE 15160
// AddMedal ( vulc_1 , 1 ) else
15148: LD_STRING vulc_1
15150: PPUSH
15151: LD_INT 1
15153: PPUSH
15154: CALL_OW 101
15158: GO 15171
// AddMedal ( vulc_1 , - 1 ) ;
15160: LD_STRING vulc_1
15162: PPUSH
15163: LD_INT 1
15165: NEG
15166: PPUSH
15167: CALL_OW 101
// if FilterAllUnits ( [ f_side , 8 ] ) = 0 then
15171: LD_INT 22
15173: PUSH
15174: LD_INT 8
15176: PUSH
15177: EMPTY
15178: LIST
15179: LIST
15180: PPUSH
15181: CALL_OW 69
15185: PUSH
15186: LD_INT 0
15188: EQUAL
15189: IFFALSE 15203
// AddMedal ( vulc_2 , 1 ) else
15191: LD_STRING vulc_2
15193: PPUSH
15194: LD_INT 1
15196: PPUSH
15197: CALL_OW 101
15201: GO 15214
// AddMedal ( vulc_2 , - 1 ) ;
15203: LD_STRING vulc_2
15205: PPUSH
15206: LD_INT 1
15208: NEG
15209: PPUSH
15210: CALL_OW 101
// points := CalculateCommanderPoints ;
15214: LD_ADDR_VAR 0 2
15218: PUSH
15219: CALL 2376 0 0
15223: ST_TO_ADDR
// if points >= 2000 then
15224: LD_VAR 0 2
15228: PUSH
15229: LD_INT 2000
15231: GREATEREQUAL
15232: IFFALSE 15246
// AddMedal ( vulc_3 , 2 ) else
15234: LD_STRING vulc_3
15236: PPUSH
15237: LD_INT 2
15239: PPUSH
15240: CALL_OW 101
15244: GO 15279
// if points >= 0 then
15246: LD_VAR 0 2
15250: PUSH
15251: LD_INT 0
15253: GREATEREQUAL
15254: IFFALSE 15268
// AddMedal ( vulc_3 , 1 ) else
15256: LD_STRING vulc_3
15258: PPUSH
15259: LD_INT 1
15261: PPUSH
15262: CALL_OW 101
15266: GO 15279
// AddMedal ( vulc_3 , - 1 ) ;
15268: LD_STRING vulc_3
15270: PPUSH
15271: LD_INT 1
15273: NEG
15274: PPUSH
15275: CALL_OW 101
// GiveMedals ( MAIN ) ;
15279: LD_STRING MAIN
15281: PPUSH
15282: CALL_OW 102
// YouWin ;
15286: CALL_OW 103
// end ; end_of_file
15290: LD_VAR 0 1
15294: RET
// every 0 0$01 trigger FilterUnitsInArea ( vulcano_area , [ f_type , unit_human ] ) do var i , un ;
15295: LD_INT 13
15297: PPUSH
15298: LD_INT 21
15300: PUSH
15301: LD_INT 1
15303: PUSH
15304: EMPTY
15305: LIST
15306: LIST
15307: PPUSH
15308: CALL_OW 70
15312: IFFALSE 15372
15314: GO 15316
15316: DISABLE
15317: LD_INT 0
15319: PPUSH
15320: PPUSH
// begin enable ;
15321: ENABLE
// for i in FilterUnitsInArea ( vulcano_area , [ f_type , unit_human ] ) do
15322: LD_ADDR_VAR 0 1
15326: PUSH
15327: LD_INT 13
15329: PPUSH
15330: LD_INT 21
15332: PUSH
15333: LD_INT 1
15335: PUSH
15336: EMPTY
15337: LIST
15338: LIST
15339: PPUSH
15340: CALL_OW 70
15344: PUSH
15345: FOR_IN
15346: IFFALSE 15370
// if GetLives ( i ) then
15348: LD_VAR 0 1
15352: PPUSH
15353: CALL_OW 256
15357: IFFALSE 15368
// KillUnit ( i ) ;
15359: LD_VAR 0 1
15363: PPUSH
15364: CALL_OW 66
15368: GO 15345
15370: POP
15371: POP
// end ;
15372: PPOPN 2
15374: END
// on ArtifactResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
15375: LD_VAR 0 1
15379: PPUSH
15380: CALL_OW 255
15384: PUSH
15385: LD_OWVAR 2
15389: EQUAL
15390: IFFALSE 15400
// player_res_art := true ;
15392: LD_ADDR_EXP 6
15396: PUSH
15397: LD_INT 1
15399: ST_TO_ADDR
// end ;
15400: PPOPN 1
15402: END
// every 0 0$03 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) and player_res_art do var xy , lab ;
15403: LD_INT 22
15405: PUSH
15406: LD_OWVAR 2
15410: PUSH
15411: EMPTY
15412: LIST
15413: LIST
15414: PUSH
15415: LD_INT 2
15417: PUSH
15418: LD_INT 30
15420: PUSH
15421: LD_INT 7
15423: PUSH
15424: EMPTY
15425: LIST
15426: LIST
15427: PUSH
15428: LD_INT 30
15430: PUSH
15431: LD_INT 8
15433: PUSH
15434: EMPTY
15435: LIST
15436: LIST
15437: PUSH
15438: LD_INT 30
15440: PUSH
15441: LD_INT 11
15443: PUSH
15444: EMPTY
15445: LIST
15446: LIST
15447: PUSH
15448: EMPTY
15449: LIST
15450: LIST
15451: LIST
15452: LIST
15453: PUSH
15454: EMPTY
15455: LIST
15456: LIST
15457: PPUSH
15458: CALL_OW 69
15462: IFFALSE 15470
15464: PUSH
15465: LD_EXP 6
15469: AND
15470: IFFALSE 15798
15472: GO 15474
15474: DISABLE
15475: LD_INT 0
15477: PPUSH
15478: PPUSH
// begin enable ;
15479: ENABLE
// xy := FindArtifact ( 1 ) ;
15480: LD_ADDR_VAR 0 1
15484: PUSH
15485: LD_INT 1
15487: PPUSH
15488: CALL_OW 469
15492: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_lab , b_lab_siberium ] ] ) , xy [ 1 ] , xy [ 2 ] ) ;
15493: LD_ADDR_VAR 0 2
15497: PUSH
15498: LD_INT 22
15500: PUSH
15501: LD_OWVAR 2
15505: PUSH
15506: EMPTY
15507: LIST
15508: LIST
15509: PUSH
15510: LD_INT 63
15512: PUSH
15513: LD_INT 11
15515: PUSH
15516: EMPTY
15517: LIST
15518: LIST
15519: PUSH
15520: EMPTY
15521: LIST
15522: LIST
15523: PPUSH
15524: CALL_OW 69
15528: PPUSH
15529: LD_VAR 0 1
15533: PUSH
15534: LD_INT 1
15536: ARRAY
15537: PPUSH
15538: LD_VAR 0 1
15542: PUSH
15543: LD_INT 2
15545: ARRAY
15546: PPUSH
15547: CALL_OW 73
15551: ST_TO_ADDR
// if player_artifact_ready = false then
15552: LD_EXP 8
15556: PUSH
15557: LD_INT 0
15559: EQUAL
15560: IFFALSE 15674
// if GetDistUnitXY ( lab , xy [ 1 ] , xy [ 2 ] ) < 6 then
15562: LD_VAR 0 2
15566: PPUSH
15567: LD_VAR 0 1
15571: PUSH
15572: LD_INT 1
15574: ARRAY
15575: PPUSH
15576: LD_VAR 0 1
15580: PUSH
15581: LD_INT 2
15583: ARRAY
15584: PPUSH
15585: CALL_OW 297
15589: PUSH
15590: LD_INT 6
15592: LESS
15593: IFFALSE 15654
// begin if BuildingStatus ( lab ) = bs_idle then
15595: LD_VAR 0 2
15599: PPUSH
15600: CALL_OW 461
15604: PUSH
15605: LD_INT 2
15607: EQUAL
15608: IFFALSE 15632
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) else
15610: LD_OWVAR 2
15614: PPUSH
15615: LD_INT 1
15617: PPUSH
15618: LD_INT 2
15620: PPUSH
15621: LD_VAR 0 2
15625: PPUSH
15626: CALL_OW 468
15630: GO 15652
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
15632: LD_OWVAR 2
15636: PPUSH
15637: LD_INT 1
15639: PPUSH
15640: LD_INT 1
15642: PPUSH
15643: LD_VAR 0 2
15647: PPUSH
15648: CALL_OW 468
// end else
15652: GO 15674
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
15654: LD_OWVAR 2
15658: PPUSH
15659: LD_INT 1
15661: PPUSH
15662: LD_INT 1
15664: PPUSH
15665: LD_VAR 0 2
15669: PPUSH
15670: CALL_OW 468
// if player_artifact_ready then
15674: LD_EXP 8
15678: IFFALSE 15798
// if GetDistUnitXY ( lab , xy [ 1 ] , xy [ 2 ] ) < 6 then
15680: LD_VAR 0 2
15684: PPUSH
15685: LD_VAR 0 1
15689: PUSH
15690: LD_INT 1
15692: ARRAY
15693: PPUSH
15694: LD_VAR 0 1
15698: PUSH
15699: LD_INT 2
15701: ARRAY
15702: PPUSH
15703: CALL_OW 297
15707: PUSH
15708: LD_INT 6
15710: LESS
15711: IFFALSE 15776
// begin if BuildingStatus ( lab ) = bs_idle then
15713: LD_VAR 0 2
15717: PPUSH
15718: CALL_OW 461
15722: PUSH
15723: LD_INT 2
15725: EQUAL
15726: IFFALSE 15752
// SetArtifactUse ( your_side , art_icon , art_unit , lab ) else
15728: LD_OWVAR 2
15732: PPUSH
15733: LD_EXP 9
15737: PPUSH
15738: LD_INT 4
15740: PPUSH
15741: LD_VAR 0 2
15745: PPUSH
15746: CALL_OW 468
15750: GO 15774
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
15752: LD_OWVAR 2
15756: PPUSH
15757: LD_EXP 9
15761: PPUSH
15762: LD_INT 1
15764: PPUSH
15765: LD_VAR 0 2
15769: PPUSH
15770: CALL_OW 468
// end else
15774: GO 15798
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
15776: LD_OWVAR 2
15780: PPUSH
15781: LD_EXP 9
15785: PPUSH
15786: LD_INT 1
15788: PPUSH
15789: LD_VAR 0 2
15793: PPUSH
15794: CALL_OW 468
// end ;
15798: PPOPN 2
15800: END
// on ArtifactUsed ( s , icon , cr1 , cr2 ) do var xy , i , lab , side ;
15801: LD_INT 0
15803: PPUSH
15804: PPUSH
15805: PPUSH
15806: PPUSH
// begin xy := FindArtifact ( 1 ) ;
15807: LD_ADDR_VAR 0 5
15811: PUSH
15812: LD_INT 1
15814: PPUSH
15815: CALL_OW 469
15819: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_lab , b_lab_siberium ] ] ) , xy [ 1 ] , xy [ 2 ] ) ;
15820: LD_ADDR_VAR 0 7
15824: PUSH
15825: LD_INT 22
15827: PUSH
15828: LD_OWVAR 2
15832: PUSH
15833: EMPTY
15834: LIST
15835: LIST
15836: PUSH
15837: LD_INT 63
15839: PUSH
15840: LD_INT 11
15842: PUSH
15843: EMPTY
15844: LIST
15845: LIST
15846: PUSH
15847: EMPTY
15848: LIST
15849: LIST
15850: PPUSH
15851: CALL_OW 69
15855: PPUSH
15856: LD_VAR 0 5
15860: PUSH
15861: LD_INT 1
15863: ARRAY
15864: PPUSH
15865: LD_VAR 0 5
15869: PUSH
15870: LD_INT 2
15872: ARRAY
15873: PPUSH
15874: CALL_OW 73
15878: ST_TO_ADDR
// if icon = art_exp_left then
15879: LD_VAR 0 2
15883: PUSH
15884: LD_INT 1
15886: EQUAL
15887: IFFALSE 15940
// begin SetSpecResearch ( lab , time_res_art , true ) ;
15889: LD_VAR 0 7
15893: PPUSH
15894: LD_EXP 10
15898: PPUSH
15899: LD_INT 1
15901: PPUSH
15902: CALL_OW 486
// SetWorkingProgress ( lab , artifact_progress ) ;
15906: LD_VAR 0 7
15910: PPUSH
15911: LD_EXP 7
15915: PPUSH
15916: CALL_OW 329
// SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
15920: LD_OWVAR 2
15924: PPUSH
15925: LD_INT 1
15927: PPUSH
15928: LD_INT 0
15930: PPUSH
15931: LD_VAR 0 7
15935: PPUSH
15936: CALL_OW 468
// end ; if icon = art_icon then
15940: LD_VAR 0 2
15944: PUSH
15945: LD_EXP 9
15949: EQUAL
15950: IFFALSE 16183
// begin if cr1 in FilterAllUnits ( [ f_type , unit_building ] ) then
15952: LD_VAR 0 3
15956: PUSH
15957: LD_INT 21
15959: PUSH
15960: LD_INT 3
15962: PUSH
15963: EMPTY
15964: LIST
15965: LIST
15966: PPUSH
15967: CALL_OW 69
15971: IN
15972: IFFALSE 16183
// begin side := GetSide ( cr1 ) ;
15974: LD_ADDR_VAR 0 8
15978: PUSH
15979: LD_VAR 0 3
15983: PPUSH
15984: CALL_OW 255
15988: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_siberite_power ] ] ) > 0 then
15989: LD_INT 22
15991: PUSH
15992: LD_VAR 0 8
15996: PUSH
15997: EMPTY
15998: LIST
15999: LIST
16000: PUSH
16001: LD_INT 30
16003: PUSH
16004: LD_INT 28
16006: PUSH
16007: EMPTY
16008: LIST
16009: LIST
16010: PUSH
16011: EMPTY
16012: LIST
16013: LIST
16014: PPUSH
16015: CALL_OW 69
16019: PUSH
16020: LD_INT 0
16022: GREATER
16023: IFFALSE 16183
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_solar_power ] , [ f_btype , b_siberite_power ] ] ] ) do
16025: LD_ADDR_VAR 0 6
16029: PUSH
16030: LD_INT 22
16032: PUSH
16033: LD_VAR 0 8
16037: PUSH
16038: EMPTY
16039: LIST
16040: LIST
16041: PUSH
16042: LD_INT 2
16044: PUSH
16045: LD_INT 30
16047: PUSH
16048: LD_INT 26
16050: PUSH
16051: EMPTY
16052: LIST
16053: LIST
16054: PUSH
16055: LD_INT 30
16057: PUSH
16058: LD_INT 27
16060: PUSH
16061: EMPTY
16062: LIST
16063: LIST
16064: PUSH
16065: LD_INT 30
16067: PUSH
16068: LD_INT 28
16070: PUSH
16071: EMPTY
16072: LIST
16073: LIST
16074: PUSH
16075: EMPTY
16076: LIST
16077: LIST
16078: LIST
16079: LIST
16080: PUSH
16081: EMPTY
16082: LIST
16083: LIST
16084: PPUSH
16085: CALL_OW 69
16089: PUSH
16090: FOR_IN
16091: IFFALSE 16104
// KillUnit ( i ) ;
16093: LD_VAR 0 6
16097: PPUSH
16098: CALL_OW 66
16102: GO 16090
16104: POP
16105: POP
// medal_enabled := true ;
16106: LD_ADDR_EXP 14
16110: PUSH
16111: LD_INT 1
16113: ST_TO_ADDR
// player_res_art := false ;
16114: LD_ADDR_EXP 6
16118: PUSH
16119: LD_INT 0
16121: ST_TO_ADDR
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
16122: LD_OWVAR 2
16126: PPUSH
16127: LD_EXP 9
16131: PPUSH
16132: LD_INT 1
16134: PPUSH
16135: LD_VAR 0 7
16139: PPUSH
16140: CALL_OW 468
// wait ( time_to_reuse ) ;
16144: LD_EXP 12
16148: PPUSH
16149: CALL_OW 67
// SetArtifactUse ( your_side , art_icon , art_unit , lab ) ;
16153: LD_OWVAR 2
16157: PPUSH
16158: LD_EXP 9
16162: PPUSH
16163: LD_INT 4
16165: PPUSH
16166: LD_VAR 0 7
16170: PPUSH
16171: CALL_OW 468
// player_res_art := true ;
16175: LD_ADDR_EXP 6
16179: PUSH
16180: LD_INT 1
16182: ST_TO_ADDR
// end ; end ; end ; end ;
16183: PPOPN 8
16185: END
// on SpecResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
16186: LD_VAR 0 1
16190: PPUSH
16191: CALL_OW 255
16195: PUSH
16196: LD_OWVAR 2
16200: EQUAL
16201: IFFALSE 16238
// begin SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
16203: LD_OWVAR 2
16207: PPUSH
16208: LD_INT 1
16210: PPUSH
16211: LD_INT 0
16213: PPUSH
16214: LD_VAR 0 1
16218: PPUSH
16219: CALL_OW 468
// player_artifact_ready := true ;
16223: LD_ADDR_EXP 8
16227: PUSH
16228: LD_INT 1
16230: ST_TO_ADDR
// Hint ( ArtVulcano ) ;
16231: LD_STRING ArtVulcano
16233: PPUSH
16234: CALL_OW 339
// end ; end ;
16238: PPOPN 1
16240: END
// on SpecResearchCancel ( lab , progress ) do begin artifact_progress := progress ;
16241: LD_ADDR_EXP 7
16245: PUSH
16246: LD_VAR 0 2
16250: ST_TO_ADDR
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) ;
16251: LD_OWVAR 2
16255: PPUSH
16256: LD_INT 1
16258: PPUSH
16259: LD_INT 2
16261: PPUSH
16262: LD_VAR 0 1
16266: PPUSH
16267: CALL_OW 468
// end ; end_of_file end_of_file
16271: PPOPN 2
16273: END
// export al_commander , al_force , al_skill ; export function PrepareAlliance ; var i , filter , un , team ; begin
16274: LD_INT 0
16276: PPUSH
16277: PPUSH
16278: PPUSH
16279: PPUSH
16280: PPUSH
// al_skill := [ 7 , 6 , 5 ] [ Difficulty ] ;
16281: LD_ADDR_EXP 45
16285: PUSH
16286: LD_INT 7
16288: PUSH
16289: LD_INT 6
16291: PUSH
16292: LD_INT 5
16294: PUSH
16295: EMPTY
16296: LIST
16297: LIST
16298: LIST
16299: PUSH
16300: LD_OWVAR 67
16304: ARRAY
16305: ST_TO_ADDR
// al_force := [ ] ;
16306: LD_ADDR_EXP 44
16310: PUSH
16311: EMPTY
16312: ST_TO_ADDR
// RemoveAlliance ;
16313: CALL 17006 0 0
// ResetFog ;
16317: CALL_OW 335
// your_side := 7 ;
16321: LD_ADDR_OWVAR 2
16325: PUSH
16326: LD_INT 7
16328: ST_TO_ADDR
// uc_side := 7 ;
16329: LD_ADDR_OWVAR 20
16333: PUSH
16334: LD_INT 7
16336: ST_TO_ADDR
// hc_gallery :=  ;
16337: LD_ADDR_OWVAR 33
16341: PUSH
16342: LD_STRING 
16344: ST_TO_ADDR
// hc_name :=  ;
16345: LD_ADDR_OWVAR 26
16349: PUSH
16350: LD_STRING 
16352: ST_TO_ADDR
// hc_importance := 0 ;
16353: LD_ADDR_OWVAR 32
16357: PUSH
16358: LD_INT 0
16360: ST_TO_ADDR
// for i = 1 to 17 do
16361: LD_ADDR_VAR 0 2
16365: PUSH
16366: DOUBLE
16367: LD_INT 1
16369: DEC
16370: ST_TO_ADDR
16371: LD_INT 17
16373: PUSH
16374: FOR_TO
16375: IFFALSE 16455
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
16377: LD_ADDR_OWVAR 21
16381: PUSH
16382: LD_INT 1
16384: PUSH
16385: LD_INT 3
16387: PUSH
16388: EMPTY
16389: LIST
16390: LIST
16391: PUSH
16392: LD_INT 1
16394: PPUSH
16395: LD_INT 2
16397: PPUSH
16398: CALL_OW 12
16402: ARRAY
16403: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , al_skill ) ;
16404: LD_INT 0
16406: PPUSH
16407: LD_INT 1
16409: PPUSH
16410: LD_INT 4
16412: PPUSH
16413: CALL_OW 12
16417: PPUSH
16418: LD_EXP 45
16422: PPUSH
16423: CALL_OW 380
// un := CreateHuman ;
16427: LD_ADDR_VAR 0 4
16431: PUSH
16432: CALL_OW 44
16436: ST_TO_ADDR
// al_force := al_force ^ un ;
16437: LD_ADDR_EXP 44
16441: PUSH
16442: LD_EXP 44
16446: PUSH
16447: LD_VAR 0 4
16451: ADD
16452: ST_TO_ADDR
// end ;
16453: GO 16374
16455: POP
16456: POP
// hc_importance := 100 ;
16457: LD_ADDR_OWVAR 32
16461: PUSH
16462: LD_INT 100
16464: ST_TO_ADDR
// uc_nation := 3 ;
16465: LD_ADDR_OWVAR 21
16469: PUSH
16470: LD_INT 3
16472: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , al_skill ) ;
16473: LD_INT 1
16475: PPUSH
16476: LD_INT 1
16478: PPUSH
16479: LD_EXP 45
16483: PPUSH
16484: CALL_OW 380
// hc_gallery := skirmish ;
16488: LD_ADDR_OWVAR 33
16492: PUSH
16493: LD_STRING skirmish
16495: ST_TO_ADDR
// hc_face_number := 8 ;
16496: LD_ADDR_OWVAR 34
16500: PUSH
16501: LD_INT 8
16503: ST_TO_ADDR
// hc_name := Trofim Petya ;
16504: LD_ADDR_OWVAR 26
16508: PUSH
16509: LD_STRING Trofim Petya
16511: ST_TO_ADDR
// al_commander := CreateHuman ;
16512: LD_ADDR_EXP 43
16516: PUSH
16517: CALL_OW 44
16521: ST_TO_ADDR
// player_commander := al_commander ;
16522: LD_ADDR_EXP 11
16526: PUSH
16527: LD_EXP 43
16531: ST_TO_ADDR
// hc_importance := 0 ;
16532: LD_ADDR_OWVAR 32
16536: PUSH
16537: LD_INT 0
16539: ST_TO_ADDR
// hc_gallery :=  ;
16540: LD_ADDR_OWVAR 33
16544: PUSH
16545: LD_STRING 
16547: ST_TO_ADDR
// team := CharacterSelection ( text , [ 9 , 9 , 8 ] [ Difficulty ] , [ 9 , 9 , 8 ] [ Difficulty ] , [ sel_change_class , al_commander , sel_changeable , sel_not_hired ] ^ al_force , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , class_bazooker , class_sniper ] ) ;
16548: LD_ADDR_VAR 0 5
16552: PUSH
16553: LD_STRING text
16555: PPUSH
16556: LD_INT 9
16558: PUSH
16559: LD_INT 9
16561: PUSH
16562: LD_INT 8
16564: PUSH
16565: EMPTY
16566: LIST
16567: LIST
16568: LIST
16569: PUSH
16570: LD_OWVAR 67
16574: ARRAY
16575: PPUSH
16576: LD_INT 9
16578: PUSH
16579: LD_INT 9
16581: PUSH
16582: LD_INT 8
16584: PUSH
16585: EMPTY
16586: LIST
16587: LIST
16588: LIST
16589: PUSH
16590: LD_OWVAR 67
16594: ARRAY
16595: PPUSH
16596: LD_INT -5
16598: PUSH
16599: LD_EXP 43
16603: PUSH
16604: LD_INT -3
16606: PUSH
16607: LD_INT -2
16609: PUSH
16610: EMPTY
16611: LIST
16612: LIST
16613: LIST
16614: LIST
16615: PUSH
16616: LD_EXP 44
16620: ADD
16621: PPUSH
16622: LD_INT 1
16624: PUSH
16625: LD_INT 3
16627: PUSH
16628: LD_INT 2
16630: PUSH
16631: LD_INT 1
16633: PUSH
16634: EMPTY
16635: LIST
16636: LIST
16637: PUSH
16638: LD_INT 4
16640: PUSH
16641: LD_INT 1
16643: PUSH
16644: EMPTY
16645: LIST
16646: LIST
16647: PUSH
16648: LD_INT 9
16650: PUSH
16651: LD_INT 5
16653: PUSH
16654: EMPTY
16655: LIST
16656: LIST
16657: LIST
16658: LIST
16659: LIST
16660: LIST
16661: PPUSH
16662: CALL_OW 42
16666: ST_TO_ADDR
// team := team ^ al_commander ;
16667: LD_ADDR_VAR 0 5
16671: PUSH
16672: LD_VAR 0 5
16676: PUSH
16677: LD_EXP 43
16681: ADD
16682: ST_TO_ADDR
// for i = 1 to team do
16683: LD_ADDR_VAR 0 2
16687: PUSH
16688: DOUBLE
16689: LD_INT 1
16691: DEC
16692: ST_TO_ADDR
16693: LD_VAR 0 5
16697: PUSH
16698: FOR_TO
16699: IFFALSE 16999
// begin if GetClass ( team [ i ] ) = class_mechanic then
16701: LD_VAR 0 5
16705: PUSH
16706: LD_VAR 0 2
16710: ARRAY
16711: PPUSH
16712: CALL_OW 257
16716: PUSH
16717: LD_INT 3
16719: EQUAL
16720: IFFALSE 16976
// begin uc_nation := [ 1 , 3 ] [ rand ( 1 , 2 ) ] ;
16722: LD_ADDR_OWVAR 21
16726: PUSH
16727: LD_INT 1
16729: PUSH
16730: LD_INT 3
16732: PUSH
16733: EMPTY
16734: LIST
16735: LIST
16736: PUSH
16737: LD_INT 1
16739: PPUSH
16740: LD_INT 2
16742: PPUSH
16743: CALL_OW 12
16747: ARRAY
16748: ST_TO_ADDR
// if uc_nation = 1 then
16749: LD_OWVAR 21
16753: PUSH
16754: LD_INT 1
16756: EQUAL
16757: IFFALSE 16841
// begin vc_chassis := [ us_medium_tracked , us_heavy_tracked , us_morphling ] [ i mod 3 + 1 ] ;
16759: LD_ADDR_OWVAR 37
16763: PUSH
16764: LD_INT 3
16766: PUSH
16767: LD_INT 4
16769: PUSH
16770: LD_INT 5
16772: PUSH
16773: EMPTY
16774: LIST
16775: LIST
16776: LIST
16777: PUSH
16778: LD_VAR 0 2
16782: PUSH
16783: LD_INT 3
16785: MOD
16786: PUSH
16787: LD_INT 1
16789: PLUS
16790: ARRAY
16791: ST_TO_ADDR
// vc_engine := engine_siberite ;
16792: LD_ADDR_OWVAR 39
16796: PUSH
16797: LD_INT 3
16799: ST_TO_ADDR
// vc_control := control_manual ;
16800: LD_ADDR_OWVAR 38
16804: PUSH
16805: LD_INT 1
16807: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_laser ] [ rand ( 1 , 3 ) ] ;
16808: LD_ADDR_OWVAR 40
16812: PUSH
16813: LD_INT 4
16815: PUSH
16816: LD_INT 5
16818: PUSH
16819: LD_INT 9
16821: PUSH
16822: EMPTY
16823: LIST
16824: LIST
16825: LIST
16826: PUSH
16827: LD_INT 1
16829: PPUSH
16830: LD_INT 3
16832: PPUSH
16833: CALL_OW 12
16837: ARRAY
16838: ST_TO_ADDR
// end else
16839: GO 16917
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] ;
16841: LD_ADDR_OWVAR 37
16845: PUSH
16846: LD_INT 21
16848: PUSH
16849: LD_INT 23
16851: PUSH
16852: EMPTY
16853: LIST
16854: LIST
16855: PUSH
16856: LD_VAR 0 2
16860: PUSH
16861: LD_INT 2
16863: MOD
16864: PUSH
16865: LD_INT 1
16867: PLUS
16868: ARRAY
16869: ST_TO_ADDR
// vc_engine := engine_siberite ;
16870: LD_ADDR_OWVAR 39
16874: PUSH
16875: LD_INT 3
16877: ST_TO_ADDR
// vc_control := control_manual ;
16878: LD_ADDR_OWVAR 38
16882: PUSH
16883: LD_INT 1
16885: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_rocket_launcher , ru_gatling_gun ] [ rand ( 1 , 3 ) ] ;
16886: LD_ADDR_OWVAR 40
16890: PUSH
16891: LD_INT 44
16893: PUSH
16894: LD_INT 45
16896: PUSH
16897: LD_INT 43
16899: PUSH
16900: EMPTY
16901: LIST
16902: LIST
16903: LIST
16904: PUSH
16905: LD_INT 1
16907: PPUSH
16908: LD_INT 3
16910: PPUSH
16911: CALL_OW 12
16915: ARRAY
16916: ST_TO_ADDR
// end ; un := CreateVehicle ;
16917: LD_ADDR_VAR 0 4
16921: PUSH
16922: CALL_OW 45
16926: ST_TO_ADDR
// SetDir ( un , 5 ) ;
16927: LD_VAR 0 4
16931: PPUSH
16932: LD_INT 5
16934: PPUSH
16935: CALL_OW 233
// PlaceUnitArea ( un , south_resp , false ) ;
16939: LD_VAR 0 4
16943: PPUSH
16944: LD_INT 15
16946: PPUSH
16947: LD_INT 0
16949: PPUSH
16950: CALL_OW 49
// PlaceHumanInUnit ( team [ i ] , un ) ;
16954: LD_VAR 0 5
16958: PUSH
16959: LD_VAR 0 2
16963: ARRAY
16964: PPUSH
16965: LD_VAR 0 4
16969: PPUSH
16970: CALL_OW 52
// end else
16974: GO 16997
// PlaceUnitArea ( team [ i ] , south_resp , false ) ;
16976: LD_VAR 0 5
16980: PUSH
16981: LD_VAR 0 2
16985: ARRAY
16986: PPUSH
16987: LD_INT 15
16989: PPUSH
16990: LD_INT 0
16992: PPUSH
16993: CALL_OW 49
// end ;
16997: GO 16698
16999: POP
17000: POP
// end ;
17001: LD_VAR 0 1
17005: RET
// export function RemoveAlliance ; var i ; begin
17006: LD_INT 0
17008: PPUSH
17009: PPUSH
// DestroyUnit ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
17010: LD_INT 22
17012: PUSH
17013: LD_INT 7
17015: PUSH
17016: EMPTY
17017: LIST
17018: LIST
17019: PUSH
17020: LD_INT 30
17022: PUSH
17023: LD_INT 1
17025: PUSH
17026: EMPTY
17027: LIST
17028: LIST
17029: PUSH
17030: EMPTY
17031: LIST
17032: LIST
17033: PPUSH
17034: CALL_OW 69
17038: PUSH
17039: LD_INT 1
17041: ARRAY
17042: PPUSH
17043: CALL_OW 65
// for i in FilterAllUnits ( [ f_side , 7 ] ) do
17047: LD_ADDR_VAR 0 2
17051: PUSH
17052: LD_INT 22
17054: PUSH
17055: LD_INT 7
17057: PUSH
17058: EMPTY
17059: LIST
17060: LIST
17061: PPUSH
17062: CALL_OW 69
17066: PUSH
17067: FOR_IN
17068: IFFALSE 17081
// RemoveUnit ( i ) ;
17070: LD_VAR 0 2
17074: PPUSH
17075: CALL_OW 64
17079: GO 17067
17081: POP
17082: POP
// end ;
17083: LD_VAR 0 1
17087: RET
// export function PrepareAllianceAI ; var i , un , b ; begin
17088: LD_INT 0
17090: PPUSH
17091: PPUSH
17092: PPUSH
17093: PPUSH
// SetTech ( tech_lapser , 7 , state_researched ) ;
17094: LD_INT 31
17096: PPUSH
17097: LD_INT 7
17099: PPUSH
17100: LD_INT 2
17102: PPUSH
17103: CALL_OW 322
// SetTech ( tech_ai , 7 , state_researched ) ;
17107: LD_INT 32
17109: PPUSH
17110: LD_INT 7
17112: PPUSH
17113: LD_INT 2
17115: PPUSH
17116: CALL_OW 322
// SetTech ( tech_comp3 , 7 , state_researched ) ;
17120: LD_INT 59
17122: PPUSH
17123: LD_INT 7
17125: PPUSH
17126: LD_INT 2
17128: PPUSH
17129: CALL_OW 322
// al_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
17133: LD_ADDR_EXP 45
17137: PUSH
17138: LD_INT 5
17140: PUSH
17141: LD_INT 6
17143: PUSH
17144: LD_INT 7
17146: PUSH
17147: EMPTY
17148: LIST
17149: LIST
17150: LIST
17151: PUSH
17152: LD_OWVAR 67
17156: ARRAY
17157: ST_TO_ADDR
// al_force := [ ] ;
17158: LD_ADDR_EXP 44
17162: PUSH
17163: EMPTY
17164: ST_TO_ADDR
// al_vehs := [ ] ;
17165: LD_ADDR_EXP 50
17169: PUSH
17170: EMPTY
17171: ST_TO_ADDR
// uc_side := 7 ;
17172: LD_ADDR_OWVAR 20
17176: PUSH
17177: LD_INT 7
17179: ST_TO_ADDR
// uc_nation := 1 ;
17180: LD_ADDR_OWVAR 21
17184: PUSH
17185: LD_INT 1
17187: ST_TO_ADDR
// bc_type := b_oil_mine ;
17188: LD_ADDR_OWVAR 42
17192: PUSH
17193: LD_INT 29
17195: ST_TO_ADDR
// b := CreateBuilding ;
17196: LD_ADDR_VAR 0 4
17200: PUSH
17201: CALL_OW 46
17205: ST_TO_ADDR
// PlaceUnitXYR ( b , 61 , 7 , 0 , false ) ;
17206: LD_VAR 0 4
17210: PPUSH
17211: LD_INT 61
17213: PPUSH
17214: LD_INT 7
17216: PPUSH
17217: LD_INT 0
17219: PPUSH
17220: LD_INT 0
17222: PPUSH
17223: CALL_OW 50
// bc_type := b_siberite_mine ;
17227: LD_ADDR_OWVAR 42
17231: PUSH
17232: LD_INT 30
17234: ST_TO_ADDR
// b := CreateBuilding ;
17235: LD_ADDR_VAR 0 4
17239: PUSH
17240: CALL_OW 46
17244: ST_TO_ADDR
// PlaceUnitXYR ( b , 69 , 13 , 0 , false ) ;
17245: LD_VAR 0 4
17249: PPUSH
17250: LD_INT 69
17252: PPUSH
17253: LD_INT 13
17255: PPUSH
17256: LD_INT 0
17258: PPUSH
17259: LD_INT 0
17261: PPUSH
17262: CALL_OW 50
// hc_gallery :=  ;
17266: LD_ADDR_OWVAR 33
17270: PUSH
17271: LD_STRING 
17273: ST_TO_ADDR
// hc_name :=  ;
17274: LD_ADDR_OWVAR 26
17278: PUSH
17279: LD_STRING 
17281: ST_TO_ADDR
// hc_importance := 0 ;
17282: LD_ADDR_OWVAR 32
17286: PUSH
17287: LD_INT 0
17289: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_bunker ] ] ) do
17290: LD_ADDR_VAR 0 2
17294: PUSH
17295: LD_INT 22
17297: PUSH
17298: LD_INT 7
17300: PUSH
17301: EMPTY
17302: LIST
17303: LIST
17304: PUSH
17305: LD_INT 30
17307: PUSH
17308: LD_INT 32
17310: PUSH
17311: EMPTY
17312: LIST
17313: LIST
17314: PUSH
17315: EMPTY
17316: LIST
17317: LIST
17318: PPUSH
17319: CALL_OW 69
17323: PUSH
17324: FOR_IN
17325: IFFALSE 17395
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17327: LD_ADDR_OWVAR 21
17331: PUSH
17332: LD_INT 1
17334: PUSH
17335: LD_INT 3
17337: PUSH
17338: EMPTY
17339: LIST
17340: LIST
17341: PUSH
17342: LD_INT 1
17344: PPUSH
17345: LD_INT 2
17347: PPUSH
17348: CALL_OW 12
17352: ARRAY
17353: ST_TO_ADDR
// PrepareHuman ( false , 1 , al_skill ) ;
17354: LD_INT 0
17356: PPUSH
17357: LD_INT 1
17359: PPUSH
17360: LD_EXP 45
17364: PPUSH
17365: CALL_OW 380
// un := CreateHuman ;
17369: LD_ADDR_VAR 0 3
17373: PUSH
17374: CALL_OW 44
17378: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
17379: LD_VAR 0 3
17383: PPUSH
17384: LD_VAR 0 2
17388: PPUSH
17389: CALL_OW 52
// end ;
17393: GO 17324
17395: POP
17396: POP
// for i = 1 to 3 do
17397: LD_ADDR_VAR 0 2
17401: PUSH
17402: DOUBLE
17403: LD_INT 1
17405: DEC
17406: ST_TO_ADDR
17407: LD_INT 3
17409: PUSH
17410: FOR_TO
17411: IFFALSE 17479
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17413: LD_ADDR_OWVAR 21
17417: PUSH
17418: LD_INT 1
17420: PUSH
17421: LD_INT 3
17423: PUSH
17424: EMPTY
17425: LIST
17426: LIST
17427: PUSH
17428: LD_INT 1
17430: PPUSH
17431: LD_INT 2
17433: PPUSH
17434: CALL_OW 12
17438: ARRAY
17439: ST_TO_ADDR
// PrepareHuman ( false , 4 , al_skill ) ;
17440: LD_INT 0
17442: PPUSH
17443: LD_INT 4
17445: PPUSH
17446: LD_EXP 45
17450: PPUSH
17451: CALL_OW 380
// un := CreateHuman ;
17455: LD_ADDR_VAR 0 3
17459: PUSH
17460: CALL_OW 44
17464: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_lab1 ) ;
17465: LD_VAR 0 3
17469: PPUSH
17470: LD_INT 164
17472: PPUSH
17473: CALL_OW 52
// end ;
17477: GO 17410
17479: POP
17480: POP
// for i = 1 to 4 do
17481: LD_ADDR_VAR 0 2
17485: PUSH
17486: DOUBLE
17487: LD_INT 1
17489: DEC
17490: ST_TO_ADDR
17491: LD_INT 4
17493: PUSH
17494: FOR_TO
17495: IFFALSE 17586
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17497: LD_ADDR_OWVAR 21
17501: PUSH
17502: LD_INT 1
17504: PUSH
17505: LD_INT 3
17507: PUSH
17508: EMPTY
17509: LIST
17510: LIST
17511: PUSH
17512: LD_INT 1
17514: PPUSH
17515: LD_INT 2
17517: PPUSH
17518: CALL_OW 12
17522: ARRAY
17523: ST_TO_ADDR
// PrepareHuman ( false , [ class_sniper , class_bazooker , class_bazooker ] [ Rand ( 1 , 3 ) ] , al_skill ) ;
17524: LD_INT 0
17526: PPUSH
17527: LD_INT 5
17529: PUSH
17530: LD_INT 9
17532: PUSH
17533: LD_INT 9
17535: PUSH
17536: EMPTY
17537: LIST
17538: LIST
17539: LIST
17540: PUSH
17541: LD_INT 1
17543: PPUSH
17544: LD_INT 3
17546: PPUSH
17547: CALL_OW 12
17551: ARRAY
17552: PPUSH
17553: LD_EXP 45
17557: PPUSH
17558: CALL_OW 380
// un := CreateHuman ;
17562: LD_ADDR_VAR 0 3
17566: PUSH
17567: CALL_OW 44
17571: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_bar ) ;
17572: LD_VAR 0 3
17576: PPUSH
17577: LD_INT 173
17579: PPUSH
17580: CALL_OW 52
// end ;
17584: GO 17494
17586: POP
17587: POP
// for i = 1 to 4 do
17588: LD_ADDR_VAR 0 2
17592: PUSH
17593: DOUBLE
17594: LD_INT 1
17596: DEC
17597: ST_TO_ADDR
17598: LD_INT 4
17600: PUSH
17601: FOR_TO
17602: IFFALSE 17700
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17604: LD_ADDR_OWVAR 21
17608: PUSH
17609: LD_INT 1
17611: PUSH
17612: LD_INT 3
17614: PUSH
17615: EMPTY
17616: LIST
17617: LIST
17618: PUSH
17619: LD_INT 1
17621: PPUSH
17622: LD_INT 2
17624: PPUSH
17625: CALL_OW 12
17629: ARRAY
17630: ST_TO_ADDR
// PrepareHuman ( false , 3 , al_skill ) ;
17631: LD_INT 0
17633: PPUSH
17634: LD_INT 3
17636: PPUSH
17637: LD_EXP 45
17641: PPUSH
17642: CALL_OW 380
// un := CreateHuman ;
17646: LD_ADDR_VAR 0 3
17650: PUSH
17651: CALL_OW 44
17655: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
17656: LD_VAR 0 3
17660: PPUSH
17661: LD_INT 22
17663: PUSH
17664: LD_INT 7
17666: PUSH
17667: EMPTY
17668: LIST
17669: LIST
17670: PUSH
17671: LD_INT 30
17673: PUSH
17674: LD_INT 3
17676: PUSH
17677: EMPTY
17678: LIST
17679: LIST
17680: PUSH
17681: EMPTY
17682: LIST
17683: LIST
17684: PPUSH
17685: CALL_OW 69
17689: PUSH
17690: LD_INT 1
17692: ARRAY
17693: PPUSH
17694: CALL_OW 52
// end ;
17698: GO 17601
17700: POP
17701: POP
// for i = 1 to 4 do
17702: LD_ADDR_VAR 0 2
17706: PUSH
17707: DOUBLE
17708: LD_INT 1
17710: DEC
17711: ST_TO_ADDR
17712: LD_INT 4
17714: PUSH
17715: FOR_TO
17716: IFFALSE 17784
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17718: LD_ADDR_OWVAR 21
17722: PUSH
17723: LD_INT 1
17725: PUSH
17726: LD_INT 3
17728: PUSH
17729: EMPTY
17730: LIST
17731: LIST
17732: PUSH
17733: LD_INT 1
17735: PPUSH
17736: LD_INT 2
17738: PPUSH
17739: CALL_OW 12
17743: ARRAY
17744: ST_TO_ADDR
// PrepareHuman ( false , 2 , al_skill ) ;
17745: LD_INT 0
17747: PPUSH
17748: LD_INT 2
17750: PPUSH
17751: LD_EXP 45
17755: PPUSH
17756: CALL_OW 380
// un := CreateHuman ;
17760: LD_ADDR_VAR 0 3
17764: PUSH
17765: CALL_OW 44
17769: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_depot ) ;
17770: LD_VAR 0 3
17774: PPUSH
17775: LD_INT 162
17777: PPUSH
17778: CALL_OW 52
// end ;
17782: GO 17715
17784: POP
17785: POP
// uc_nation := 3 ;
17786: LD_ADDR_OWVAR 21
17790: PUSH
17791: LD_INT 3
17793: ST_TO_ADDR
// vc_chassis := ru_medium_wheeled ;
17794: LD_ADDR_OWVAR 37
17798: PUSH
17799: LD_INT 21
17801: ST_TO_ADDR
// vc_engine := engine_siberite ;
17802: LD_ADDR_OWVAR 39
17806: PUSH
17807: LD_INT 3
17809: ST_TO_ADDR
// vc_control := control_computer ;
17810: LD_ADDR_OWVAR 38
17814: PUSH
17815: LD_INT 3
17817: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
17818: LD_ADDR_OWVAR 40
17822: PUSH
17823: LD_INT 51
17825: ST_TO_ADDR
// PlaceUnitXY ( CreateVehicle , 49 , 13 , false ) ;
17826: CALL_OW 45
17830: PPUSH
17831: LD_INT 49
17833: PPUSH
17834: LD_INT 13
17836: PPUSH
17837: LD_INT 0
17839: PPUSH
17840: CALL_OW 48
// al_turrets := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_turret ] ] ) ;
17844: LD_ADDR_EXP 52
17848: PUSH
17849: LD_INT 22
17851: PUSH
17852: LD_INT 7
17854: PUSH
17855: EMPTY
17856: LIST
17857: LIST
17858: PUSH
17859: LD_INT 30
17861: PUSH
17862: LD_INT 33
17864: PUSH
17865: EMPTY
17866: LIST
17867: LIST
17868: PUSH
17869: EMPTY
17870: LIST
17871: LIST
17872: PPUSH
17873: CALL_OW 69
17877: ST_TO_ADDR
// for i = 1 to FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_btype , b_turret ] , [ f_bweapon , 0 ] ] ] ) do
17878: LD_ADDR_VAR 0 2
17882: PUSH
17883: DOUBLE
17884: LD_INT 1
17886: DEC
17887: ST_TO_ADDR
17888: LD_INT 22
17890: PUSH
17891: LD_INT 7
17893: PUSH
17894: EMPTY
17895: LIST
17896: LIST
17897: PUSH
17898: LD_INT 30
17900: PUSH
17901: LD_INT 33
17903: PUSH
17904: EMPTY
17905: LIST
17906: LIST
17907: PUSH
17908: LD_INT 35
17910: PUSH
17911: LD_INT 0
17913: PUSH
17914: EMPTY
17915: LIST
17916: LIST
17917: PUSH
17918: EMPTY
17919: LIST
17920: LIST
17921: LIST
17922: PUSH
17923: EMPTY
17924: LIST
17925: PPUSH
17926: CALL_OW 69
17930: PUSH
17931: FOR_TO
17932: IFFALSE 17992
// AddComPlaceWeapon ( FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_btype , b_turret ] , [ f_bweapon , 0 ] ] ] ) [ i ] , ru_time_lapser ) ;
17934: LD_INT 22
17936: PUSH
17937: LD_INT 7
17939: PUSH
17940: EMPTY
17941: LIST
17942: LIST
17943: PUSH
17944: LD_INT 30
17946: PUSH
17947: LD_INT 33
17949: PUSH
17950: EMPTY
17951: LIST
17952: LIST
17953: PUSH
17954: LD_INT 35
17956: PUSH
17957: LD_INT 0
17959: PUSH
17960: EMPTY
17961: LIST
17962: LIST
17963: PUSH
17964: EMPTY
17965: LIST
17966: LIST
17967: LIST
17968: PUSH
17969: EMPTY
17970: LIST
17971: PPUSH
17972: CALL_OW 69
17976: PUSH
17977: LD_VAR 0 2
17981: ARRAY
17982: PPUSH
17983: LD_INT 49
17985: PPUSH
17986: CALL_OW 208
17990: GO 17931
17992: POP
17993: POP
// end ;
17994: LD_VAR 0 1
17998: RET
// export al_eng , al_sold , al_mech , al_sci ; export al_vehs , al_cargo , al_turrets ; export al_dep , al_lab , al_fac ; export al_bul ; every 0 0$02 trigger your_side = 1 do var i , un , veh , cr ;
17999: LD_OWVAR 2
18003: PUSH
18004: LD_INT 1
18006: EQUAL
18007: IFFALSE 18997
18009: GO 18011
18011: DISABLE
18012: LD_INT 0
18014: PPUSH
18015: PPUSH
18016: PPUSH
18017: PPUSH
// begin enable ;
18018: ENABLE
// al_bul := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] ] ) ;
18019: LD_ADDR_EXP 56
18023: PUSH
18024: LD_INT 22
18026: PUSH
18027: LD_INT 7
18029: PUSH
18030: EMPTY
18031: LIST
18032: LIST
18033: PUSH
18034: LD_INT 21
18036: PUSH
18037: LD_INT 3
18039: PUSH
18040: EMPTY
18041: LIST
18042: LIST
18043: PUSH
18044: EMPTY
18045: LIST
18046: LIST
18047: PPUSH
18048: CALL_OW 69
18052: ST_TO_ADDR
// al_lab := [ al_lab1 , al_lab2 ] ;
18053: LD_ADDR_EXP 54
18057: PUSH
18058: LD_INT 164
18060: PUSH
18061: LD_INT 197
18063: PUSH
18064: EMPTY
18065: LIST
18066: LIST
18067: ST_TO_ADDR
// al_dep := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
18068: LD_ADDR_EXP 53
18072: PUSH
18073: LD_INT 22
18075: PUSH
18076: LD_INT 7
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: PUSH
18083: LD_INT 30
18085: PUSH
18086: LD_INT 1
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: PUSH
18093: EMPTY
18094: LIST
18095: LIST
18096: PPUSH
18097: CALL_OW 69
18101: PUSH
18102: LD_INT 1
18104: ARRAY
18105: ST_TO_ADDR
// al_fac := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
18106: LD_ADDR_EXP 55
18110: PUSH
18111: LD_INT 22
18113: PUSH
18114: LD_INT 7
18116: PUSH
18117: EMPTY
18118: LIST
18119: LIST
18120: PUSH
18121: LD_INT 30
18123: PUSH
18124: LD_INT 3
18126: PUSH
18127: EMPTY
18128: LIST
18129: LIST
18130: PUSH
18131: EMPTY
18132: LIST
18133: LIST
18134: PPUSH
18135: CALL_OW 69
18139: PUSH
18140: LD_INT 1
18142: ARRAY
18143: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) then
18144: LD_INT 22
18146: PUSH
18147: LD_INT 7
18149: PUSH
18150: EMPTY
18151: LIST
18152: LIST
18153: PUSH
18154: LD_INT 34
18156: PUSH
18157: LD_INT 51
18159: PUSH
18160: EMPTY
18161: LIST
18162: LIST
18163: PUSH
18164: EMPTY
18165: LIST
18166: LIST
18167: PPUSH
18168: CALL_OW 69
18172: IFFALSE 18212
// al_cargo := FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
18174: LD_ADDR_EXP 51
18178: PUSH
18179: LD_INT 22
18181: PUSH
18182: LD_INT 7
18184: PUSH
18185: EMPTY
18186: LIST
18187: LIST
18188: PUSH
18189: LD_INT 34
18191: PUSH
18192: LD_INT 51
18194: PUSH
18195: EMPTY
18196: LIST
18197: LIST
18198: PUSH
18199: EMPTY
18200: LIST
18201: LIST
18202: PPUSH
18203: CALL_OW 69
18207: PUSH
18208: LD_INT 1
18210: ARRAY
18211: ST_TO_ADDR
// al_sold := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , class_bazooker ] ] ) ;
18212: LD_ADDR_EXP 47
18216: PUSH
18217: LD_INT 22
18219: PUSH
18220: LD_INT 7
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: PUSH
18227: LD_INT 25
18229: PUSH
18230: LD_INT 9
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: PUSH
18237: EMPTY
18238: LIST
18239: LIST
18240: PPUSH
18241: CALL_OW 69
18245: ST_TO_ADDR
// al_eng := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 2 ] ] ) ;
18246: LD_ADDR_EXP 46
18250: PUSH
18251: LD_INT 22
18253: PUSH
18254: LD_INT 7
18256: PUSH
18257: EMPTY
18258: LIST
18259: LIST
18260: PUSH
18261: LD_INT 25
18263: PUSH
18264: LD_INT 2
18266: PUSH
18267: EMPTY
18268: LIST
18269: LIST
18270: PUSH
18271: EMPTY
18272: LIST
18273: LIST
18274: PPUSH
18275: CALL_OW 69
18279: ST_TO_ADDR
// al_mech := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 3 ] ] ) ;
18280: LD_ADDR_EXP 48
18284: PUSH
18285: LD_INT 22
18287: PUSH
18288: LD_INT 7
18290: PUSH
18291: EMPTY
18292: LIST
18293: LIST
18294: PUSH
18295: LD_INT 25
18297: PUSH
18298: LD_INT 3
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: PUSH
18305: EMPTY
18306: LIST
18307: LIST
18308: PPUSH
18309: CALL_OW 69
18313: ST_TO_ADDR
// al_sci := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 4 ] ] ) ;
18314: LD_ADDR_EXP 49
18318: PUSH
18319: LD_INT 22
18321: PUSH
18322: LD_INT 7
18324: PUSH
18325: EMPTY
18326: LIST
18327: LIST
18328: PUSH
18329: LD_INT 25
18331: PUSH
18332: LD_INT 4
18334: PUSH
18335: EMPTY
18336: LIST
18337: LIST
18338: PUSH
18339: EMPTY
18340: LIST
18341: LIST
18342: PPUSH
18343: CALL_OW 69
18347: ST_TO_ADDR
// if not HasTask ( al_cargo ) and GetCargo ( al_cargo , mat_cans ) < 100 then
18348: LD_EXP 51
18352: PPUSH
18353: CALL_OW 314
18357: NOT
18358: IFFALSE 18378
18360: PUSH
18361: LD_EXP 51
18365: PPUSH
18366: LD_INT 1
18368: PPUSH
18369: CALL_OW 289
18373: PUSH
18374: LD_INT 100
18376: LESS
18377: AND
18378: IFFALSE 18426
// begin cr := GetListOfCratesInArea ( us_crates ) ;
18380: LD_ADDR_VAR 0 4
18384: PUSH
18385: LD_INT 12
18387: PPUSH
18388: CALL_OW 435
18392: ST_TO_ADDR
// if cr then
18393: LD_VAR 0 4
18397: IFFALSE 18426
// ComCollect ( al_cargo , cr [ 1 ] , cr [ 2 ] ) ;
18399: LD_EXP 51
18403: PPUSH
18404: LD_VAR 0 4
18408: PUSH
18409: LD_INT 1
18411: ARRAY
18412: PPUSH
18413: LD_VAR 0 4
18417: PUSH
18418: LD_INT 2
18420: ARRAY
18421: PPUSH
18422: CALL_OW 117
// end ; if UnitFilter ( al_bul , [ f_not , [ f_lives , 1000 ] ] ) then
18426: LD_EXP 56
18430: PPUSH
18431: LD_INT 3
18433: PUSH
18434: LD_INT 24
18436: PUSH
18437: LD_INT 1000
18439: PUSH
18440: EMPTY
18441: LIST
18442: LIST
18443: PUSH
18444: EMPTY
18445: LIST
18446: LIST
18447: PPUSH
18448: CALL_OW 72
18452: IFFALSE 18582
// begin if al_eng then
18454: LD_EXP 46
18458: IFFALSE 18580
// for i = 1 to al_eng do
18460: LD_ADDR_VAR 0 1
18464: PUSH
18465: DOUBLE
18466: LD_INT 1
18468: DEC
18469: ST_TO_ADDR
18470: LD_EXP 46
18474: PUSH
18475: FOR_TO
18476: IFFALSE 18578
// if IsInUnit ( al_eng [ i ] ) then
18478: LD_EXP 46
18482: PUSH
18483: LD_VAR 0 1
18487: ARRAY
18488: PPUSH
18489: CALL_OW 310
18493: IFFALSE 18512
// ComExitBuilding ( al_eng [ i ] ) else
18495: LD_EXP 46
18499: PUSH
18500: LD_VAR 0 1
18504: ARRAY
18505: PPUSH
18506: CALL_OW 122
18510: GO 18576
// if not HasTask ( al_eng [ i ] ) then
18512: LD_EXP 46
18516: PUSH
18517: LD_VAR 0 1
18521: ARRAY
18522: PPUSH
18523: CALL_OW 314
18527: NOT
18528: IFFALSE 18576
// ComRepairBuilding ( al_eng [ i ] , UnitFilter ( al_bul , [ f_not , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
18530: LD_EXP 46
18534: PUSH
18535: LD_VAR 0 1
18539: ARRAY
18540: PPUSH
18541: LD_EXP 56
18545: PPUSH
18546: LD_INT 3
18548: PUSH
18549: LD_INT 24
18551: PUSH
18552: LD_INT 1000
18554: PUSH
18555: EMPTY
18556: LIST
18557: LIST
18558: PUSH
18559: EMPTY
18560: LIST
18561: LIST
18562: PPUSH
18563: CALL_OW 72
18567: PUSH
18568: LD_INT 1
18570: ARRAY
18571: PPUSH
18572: CALL_OW 130
18576: GO 18475
18578: POP
18579: POP
// end else
18580: GO 18664
// if al_eng then
18582: LD_EXP 46
18586: IFFALSE 18664
// if not IsInUnit ( al_eng [ 1 ] ) then
18588: LD_EXP 46
18592: PUSH
18593: LD_INT 1
18595: ARRAY
18596: PPUSH
18597: CALL_OW 310
18601: NOT
18602: IFFALSE 18664
// for i = 1 to al_eng do
18604: LD_ADDR_VAR 0 1
18608: PUSH
18609: DOUBLE
18610: LD_INT 1
18612: DEC
18613: ST_TO_ADDR
18614: LD_EXP 46
18618: PUSH
18619: FOR_TO
18620: IFFALSE 18662
// if not IsInUnit ( al_eng [ i ] ) then
18622: LD_EXP 46
18626: PUSH
18627: LD_VAR 0 1
18631: ARRAY
18632: PPUSH
18633: CALL_OW 310
18637: NOT
18638: IFFALSE 18660
// ComEnterUnit ( al_eng [ i ] , al_dep ) ;
18640: LD_EXP 46
18644: PUSH
18645: LD_VAR 0 1
18649: ARRAY
18650: PPUSH
18651: LD_EXP 53
18655: PPUSH
18656: CALL_OW 120
18660: GO 18619
18662: POP
18663: POP
// if al_vehs then
18664: LD_EXP 50
18668: IFFALSE 18768
// if BuildingStatus ( al_fac ) = bs_idle then
18670: LD_EXP 55
18674: PPUSH
18675: CALL_OW 461
18679: PUSH
18680: LD_INT 2
18682: EQUAL
18683: IFFALSE 18768
// begin ComConstruct ( al_fac , al_vehs [ 1 ] , al_vehs [ 2 ] , al_vehs [ 3 ] , al_vehs [ 4 ] ) ;
18685: LD_EXP 55
18689: PPUSH
18690: LD_EXP 50
18694: PUSH
18695: LD_INT 1
18697: ARRAY
18698: PPUSH
18699: LD_EXP 50
18703: PUSH
18704: LD_INT 2
18706: ARRAY
18707: PPUSH
18708: LD_EXP 50
18712: PUSH
18713: LD_INT 3
18715: ARRAY
18716: PPUSH
18717: LD_EXP 50
18721: PUSH
18722: LD_INT 4
18724: ARRAY
18725: PPUSH
18726: CALL_OW 125
// for i = 1 to 4 do
18730: LD_ADDR_VAR 0 1
18734: PUSH
18735: DOUBLE
18736: LD_INT 1
18738: DEC
18739: ST_TO_ADDR
18740: LD_INT 4
18742: PUSH
18743: FOR_TO
18744: IFFALSE 18766
// al_vehs := Delete ( al_vehs , 1 ) ;
18746: LD_ADDR_EXP 50
18750: PUSH
18751: LD_EXP 50
18755: PPUSH
18756: LD_INT 1
18758: PPUSH
18759: CALL_OW 3
18763: ST_TO_ADDR
18764: GO 18743
18766: POP
18767: POP
// end ; if al_force = 0 and tick mod 23100 = 0 then
18768: LD_EXP 44
18772: PUSH
18773: LD_INT 0
18775: EQUAL
18776: IFFALSE 18792
18778: PUSH
18779: LD_OWVAR 1
18783: PUSH
18784: LD_INT 23100
18786: MOD
18787: PUSH
18788: LD_INT 0
18790: EQUAL
18791: AND
18792: IFFALSE 18906
// begin for i = 1 to [ 6 , 7 , 8 ] [ Difficulty ] do
18794: LD_ADDR_VAR 0 1
18798: PUSH
18799: DOUBLE
18800: LD_INT 1
18802: DEC
18803: ST_TO_ADDR
18804: LD_INT 6
18806: PUSH
18807: LD_INT 7
18809: PUSH
18810: LD_INT 8
18812: PUSH
18813: EMPTY
18814: LIST
18815: LIST
18816: LIST
18817: PUSH
18818: LD_OWVAR 67
18822: ARRAY
18823: PUSH
18824: FOR_TO
18825: IFFALSE 18904
// begin al_vehs := al_vehs ^ ru_heavy_wheeled ;
18827: LD_ADDR_EXP 50
18831: PUSH
18832: LD_EXP 50
18836: PUSH
18837: LD_INT 23
18839: ADD
18840: ST_TO_ADDR
// al_vehs := al_vehs ^ engine_combustion ;
18841: LD_ADDR_EXP 50
18845: PUSH
18846: LD_EXP 50
18850: PUSH
18851: LD_INT 1
18853: ADD
18854: ST_TO_ADDR
// al_vehs := al_vehs ^ control_computer ;
18855: LD_ADDR_EXP 50
18859: PUSH
18860: LD_EXP 50
18864: PUSH
18865: LD_INT 3
18867: ADD
18868: ST_TO_ADDR
// al_vehs := al_vehs ^ [ ru_heavy_gun , ru_rocket ] [ Rand ( 1 , 2 ) ] ;
18869: LD_ADDR_EXP 50
18873: PUSH
18874: LD_EXP 50
18878: PUSH
18879: LD_INT 46
18881: PUSH
18882: LD_INT 47
18884: PUSH
18885: EMPTY
18886: LIST
18887: LIST
18888: PUSH
18889: LD_INT 1
18891: PPUSH
18892: LD_INT 2
18894: PPUSH
18895: CALL_OW 12
18899: ARRAY
18900: ADD
18901: ST_TO_ADDR
// end ;
18902: GO 18824
18904: POP
18905: POP
// end ; if FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 then
18906: LD_INT 22
18908: PUSH
18909: LD_INT 7
18911: PUSH
18912: EMPTY
18913: LIST
18914: LIST
18915: PUSH
18916: LD_INT 34
18918: PUSH
18919: LD_INT 51
18921: PUSH
18922: EMPTY
18923: LIST
18924: LIST
18925: PUSH
18926: EMPTY
18927: LIST
18928: LIST
18929: PPUSH
18930: CALL_OW 69
18934: PUSH
18935: LD_INT 0
18937: EQUAL
18938: IFFALSE 18961
// ComConstruct ( al_fac , ru_medium_wheeled , engine_combustion , control_computer , ru_cargo_bay ) ;
18940: LD_EXP 55
18944: PPUSH
18945: LD_INT 21
18947: PPUSH
18948: LD_INT 1
18950: PPUSH
18951: LD_INT 3
18953: PPUSH
18954: LD_INT 51
18956: PPUSH
18957: CALL_OW 125
// if al_force >= [ 6 , 7 , 8 ] [ Difficulty ] then
18961: LD_EXP 44
18965: PUSH
18966: LD_INT 6
18968: PUSH
18969: LD_INT 7
18971: PUSH
18972: LD_INT 8
18974: PUSH
18975: EMPTY
18976: LIST
18977: LIST
18978: LIST
18979: PUSH
18980: LD_OWVAR 67
18984: ARRAY
18985: GREATEREQUAL
18986: IFFALSE 18997
// RaiseSailEvent ( event_alliance_attack ) ;
18988: LD_EXP 23
18992: PPUSH
18993: CALL_OW 427
// end ;
18997: PPOPN 4
18999: END
// export function AllianceAttack ( ) ; var path , units ; begin
19000: LD_INT 0
19002: PPUSH
19003: PPUSH
19004: PPUSH
// units := al_force ;
19005: LD_ADDR_VAR 0 3
19009: PUSH
19010: LD_EXP 44
19014: ST_TO_ADDR
// al_force := [ ] ;
19015: LD_ADDR_EXP 44
19019: PUSH
19020: EMPTY
19021: ST_TO_ADDR
// if rand ( 0 , 1 ) then
19022: LD_INT 0
19024: PPUSH
19025: LD_INT 1
19027: PPUSH
19028: CALL_OW 12
19032: IFFALSE 19076
// path := [ [ 49 , 53 ] , [ 52 , 90 ] , [ 63 , 114 ] ] else
19034: LD_ADDR_VAR 0 2
19038: PUSH
19039: LD_INT 49
19041: PUSH
19042: LD_INT 53
19044: PUSH
19045: EMPTY
19046: LIST
19047: LIST
19048: PUSH
19049: LD_INT 52
19051: PUSH
19052: LD_INT 90
19054: PUSH
19055: EMPTY
19056: LIST
19057: LIST
19058: PUSH
19059: LD_INT 63
19061: PUSH
19062: LD_INT 114
19064: PUSH
19065: EMPTY
19066: LIST
19067: LIST
19068: PUSH
19069: EMPTY
19070: LIST
19071: LIST
19072: LIST
19073: ST_TO_ADDR
19074: GO 19105
// path := [ [ 89 , 52 ] , [ 143 , 50 ] ] ;
19076: LD_ADDR_VAR 0 2
19080: PUSH
19081: LD_INT 89
19083: PUSH
19084: LD_INT 52
19086: PUSH
19087: EMPTY
19088: LIST
19089: LIST
19090: PUSH
19091: LD_INT 143
19093: PUSH
19094: LD_INT 50
19096: PUSH
19097: EMPTY
19098: LIST
19099: LIST
19100: PUSH
19101: EMPTY
19102: LIST
19103: LIST
19104: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19105: LD_INT 35
19107: PPUSH
19108: CALL_OW 67
// until not AgressiveMove ( units , path ) ;
19112: LD_VAR 0 3
19116: PPUSH
19117: LD_VAR 0 2
19121: PPUSH
19122: CALL 83355 0 2
19126: NOT
19127: IFFALSE 19105
// end ; end_of_file
19129: LD_VAR 0 1
19133: RET
// export ar_commander , ar_force , ar_skill ; export function PrepareArabian ; var i , filter , un , team ; begin
19134: LD_INT 0
19136: PPUSH
19137: PPUSH
19138: PPUSH
19139: PPUSH
19140: PPUSH
// ar_skill := [ 9 , 8 , 7 ] [ Difficulty ] ;
19141: LD_ADDR_EXP 59
19145: PUSH
19146: LD_INT 9
19148: PUSH
19149: LD_INT 8
19151: PUSH
19152: LD_INT 7
19154: PUSH
19155: EMPTY
19156: LIST
19157: LIST
19158: LIST
19159: PUSH
19160: LD_OWVAR 67
19164: ARRAY
19165: ST_TO_ADDR
// ar_force := [ ] ;
19166: LD_ADDR_EXP 58
19170: PUSH
19171: EMPTY
19172: ST_TO_ADDR
// RemoveAlliance ;
19173: CALL 17006 0 0
// RemoveEnvironmentArea ( evn ) ;
19177: LD_INT 17
19179: PPUSH
19180: CALL_OW 355
// your_side := 2 ;
19184: LD_ADDR_OWVAR 2
19188: PUSH
19189: LD_INT 2
19191: ST_TO_ADDR
// uc_side := 2 ;
19192: LD_ADDR_OWVAR 20
19196: PUSH
19197: LD_INT 2
19199: ST_TO_ADDR
// uc_nation := nation_arabian ;
19200: LD_ADDR_OWVAR 21
19204: PUSH
19205: LD_INT 2
19207: ST_TO_ADDR
// hc_gallery :=  ;
19208: LD_ADDR_OWVAR 33
19212: PUSH
19213: LD_STRING 
19215: ST_TO_ADDR
// hc_name :=  ;
19216: LD_ADDR_OWVAR 26
19220: PUSH
19221: LD_STRING 
19223: ST_TO_ADDR
// hc_importance := 0 ;
19224: LD_ADDR_OWVAR 32
19228: PUSH
19229: LD_INT 0
19231: ST_TO_ADDR
// for i = 1 to 20 do
19232: LD_ADDR_VAR 0 2
19236: PUSH
19237: DOUBLE
19238: LD_INT 1
19240: DEC
19241: ST_TO_ADDR
19242: LD_INT 20
19244: PUSH
19245: FOR_TO
19246: IFFALSE 19311
// begin PrepareHuman ( false , Rand ( 1 , 4 ) , ar_skill ) ;
19248: LD_INT 0
19250: PPUSH
19251: LD_INT 1
19253: PPUSH
19254: LD_INT 4
19256: PPUSH
19257: CALL_OW 12
19261: PPUSH
19262: LD_EXP 59
19266: PPUSH
19267: CALL_OW 380
// un := CreateHuman ;
19271: LD_ADDR_VAR 0 4
19275: PUSH
19276: CALL_OW 44
19280: ST_TO_ADDR
// SetDir ( un , 2 ) ;
19281: LD_VAR 0 4
19285: PPUSH
19286: LD_INT 2
19288: PPUSH
19289: CALL_OW 233
// ar_force := ar_force ^ un ;
19293: LD_ADDR_EXP 58
19297: PUSH
19298: LD_EXP 58
19302: PUSH
19303: LD_VAR 0 4
19307: ADD
19308: ST_TO_ADDR
// end ;
19309: GO 19245
19311: POP
19312: POP
// hc_importance := 100 ;
19313: LD_ADDR_OWVAR 32
19317: PUSH
19318: LD_INT 100
19320: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , ar_skill ) ;
19321: LD_INT 1
19323: PPUSH
19324: LD_INT 11
19326: PPUSH
19327: LD_EXP 59
19331: PPUSH
19332: CALL_OW 380
// hc_gallery := skirmish ;
19336: LD_ADDR_OWVAR 33
19340: PUSH
19341: LD_STRING skirmish
19343: ST_TO_ADDR
// hc_face_number := 9 ;
19344: LD_ADDR_OWVAR 34
19348: PUSH
19349: LD_INT 9
19351: ST_TO_ADDR
// hc_name := Muhammad Mustaffi ;
19352: LD_ADDR_OWVAR 26
19356: PUSH
19357: LD_STRING Muhammad Mustaffi
19359: ST_TO_ADDR
// ar_commander := CreateHuman ;
19360: LD_ADDR_EXP 57
19364: PUSH
19365: CALL_OW 44
19369: ST_TO_ADDR
// SetDir ( ar_commander , 2 ) ;
19370: LD_EXP 57
19374: PPUSH
19375: LD_INT 2
19377: PPUSH
19378: CALL_OW 233
// player_commander := ar_commander ;
19382: LD_ADDR_EXP 11
19386: PUSH
19387: LD_EXP 57
19391: ST_TO_ADDR
// hc_importance := 0 ;
19392: LD_ADDR_OWVAR 32
19396: PUSH
19397: LD_INT 0
19399: ST_TO_ADDR
// hc_gallery :=  ;
19400: LD_ADDR_OWVAR 33
19404: PUSH
19405: LD_STRING 
19407: ST_TO_ADDR
// team := CharacterSelection ( text , [ 14 , 13 , 12 ] [ Difficulty ] , [ 14 , 13 , 12 ] [ Difficulty ] , [ sel_dont_change_class , ar_commander , sel_not_hired , sel_changeable , sel_change_class ] ^ ar_force , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , class_mortar ] ) ;
19408: LD_ADDR_VAR 0 5
19412: PUSH
19413: LD_STRING text
19415: PPUSH
19416: LD_INT 14
19418: PUSH
19419: LD_INT 13
19421: PUSH
19422: LD_INT 12
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: LIST
19429: PUSH
19430: LD_OWVAR 67
19434: ARRAY
19435: PPUSH
19436: LD_INT 14
19438: PUSH
19439: LD_INT 13
19441: PUSH
19442: LD_INT 12
19444: PUSH
19445: EMPTY
19446: LIST
19447: LIST
19448: LIST
19449: PUSH
19450: LD_OWVAR 67
19454: ARRAY
19455: PPUSH
19456: LD_INT -6
19458: PUSH
19459: LD_EXP 57
19463: PUSH
19464: LD_INT -2
19466: PUSH
19467: LD_INT -3
19469: PUSH
19470: LD_INT -5
19472: PUSH
19473: EMPTY
19474: LIST
19475: LIST
19476: LIST
19477: LIST
19478: LIST
19479: PUSH
19480: LD_EXP 58
19484: ADD
19485: PPUSH
19486: LD_INT 1
19488: PUSH
19489: LD_INT 3
19491: PUSH
19492: LD_INT 2
19494: PUSH
19495: LD_INT 1
19497: PUSH
19498: EMPTY
19499: LIST
19500: LIST
19501: PUSH
19502: LD_INT 4
19504: PUSH
19505: LD_INT 1
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: PUSH
19512: LD_INT 8
19514: PUSH
19515: EMPTY
19516: LIST
19517: LIST
19518: LIST
19519: LIST
19520: LIST
19521: PPUSH
19522: CALL_OW 42
19526: ST_TO_ADDR
// team := team ^ ar_commander ;
19527: LD_ADDR_VAR 0 5
19531: PUSH
19532: LD_VAR 0 5
19536: PUSH
19537: LD_EXP 57
19541: ADD
19542: ST_TO_ADDR
// for i = 1 to 4 do
19543: LD_ADDR_VAR 0 2
19547: PUSH
19548: DOUBLE
19549: LD_INT 1
19551: DEC
19552: ST_TO_ADDR
19553: LD_INT 4
19555: PUSH
19556: FOR_TO
19557: IFFALSE 19657
// begin vc_chassis := ar_medium_trike ;
19559: LD_ADDR_OWVAR 37
19563: PUSH
19564: LD_INT 13
19566: ST_TO_ADDR
// vc_engine := engine_siberite ;
19567: LD_ADDR_OWVAR 39
19571: PUSH
19572: LD_INT 3
19574: ST_TO_ADDR
// vc_control := control_manual ;
19575: LD_ADDR_OWVAR 38
19579: PUSH
19580: LD_INT 1
19582: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_cargo_bay , ar_crane , ar_gun ] [ i ] ;
19583: LD_ADDR_OWVAR 40
19587: PUSH
19588: LD_INT 27
19590: PUSH
19591: LD_INT 32
19593: PUSH
19594: LD_INT 88
19596: PUSH
19597: LD_INT 27
19599: PUSH
19600: EMPTY
19601: LIST
19602: LIST
19603: LIST
19604: LIST
19605: PUSH
19606: LD_VAR 0 2
19610: ARRAY
19611: ST_TO_ADDR
// un := CreateVehicle ;
19612: LD_ADDR_VAR 0 4
19616: PUSH
19617: CALL_OW 45
19621: ST_TO_ADDR
// SetDir ( un , 2 ) ;
19622: LD_VAR 0 4
19626: PPUSH
19627: LD_INT 2
19629: PPUSH
19630: CALL_OW 233
// PlaceUnitXYR ( un , 54 , 15 , 6 , false ) ;
19634: LD_VAR 0 4
19638: PPUSH
19639: LD_INT 54
19641: PPUSH
19642: LD_INT 15
19644: PPUSH
19645: LD_INT 6
19647: PPUSH
19648: LD_INT 0
19650: PPUSH
19651: CALL_OW 50
// end ;
19655: GO 19556
19657: POP
19658: POP
// for i = 1 to team do
19659: LD_ADDR_VAR 0 2
19663: PUSH
19664: DOUBLE
19665: LD_INT 1
19667: DEC
19668: ST_TO_ADDR
19669: LD_VAR 0 5
19673: PUSH
19674: FOR_TO
19675: IFFALSE 19772
// begin if FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) then
19677: LD_INT 22
19679: PUSH
19680: LD_INT 2
19682: PUSH
19683: EMPTY
19684: LIST
19685: LIST
19686: PUSH
19687: LD_INT 58
19689: PUSH
19690: EMPTY
19691: LIST
19692: PUSH
19693: EMPTY
19694: LIST
19695: LIST
19696: PPUSH
19697: CALL_OW 69
19701: IFFALSE 19749
// PlaceHumanInUnit ( team [ i ] , FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) [ 1 ] ) else
19703: LD_VAR 0 5
19707: PUSH
19708: LD_VAR 0 2
19712: ARRAY
19713: PPUSH
19714: LD_INT 22
19716: PUSH
19717: LD_INT 2
19719: PUSH
19720: EMPTY
19721: LIST
19722: LIST
19723: PUSH
19724: LD_INT 58
19726: PUSH
19727: EMPTY
19728: LIST
19729: PUSH
19730: EMPTY
19731: LIST
19732: LIST
19733: PPUSH
19734: CALL_OW 69
19738: PUSH
19739: LD_INT 1
19741: ARRAY
19742: PPUSH
19743: CALL_OW 52
19747: GO 19770
// PlaceUnitArea ( team [ i ] , center_resp , false ) ;
19749: LD_VAR 0 5
19753: PUSH
19754: LD_VAR 0 2
19758: ARRAY
19759: PPUSH
19760: LD_INT 16
19762: PPUSH
19763: LD_INT 0
19765: PPUSH
19766: CALL_OW 49
// end ;
19770: GO 19674
19772: POP
19773: POP
// uc_side := 0 ;
19774: LD_ADDR_OWVAR 20
19778: PUSH
19779: LD_INT 0
19781: ST_TO_ADDR
// uc_nation := 0 ;
19782: LD_ADDR_OWVAR 21
19786: PUSH
19787: LD_INT 0
19789: ST_TO_ADDR
// vc_chassis := 31 ;
19790: LD_ADDR_OWVAR 37
19794: PUSH
19795: LD_INT 31
19797: ST_TO_ADDR
// vc_control := control_rider ;
19798: LD_ADDR_OWVAR 38
19802: PUSH
19803: LD_INT 4
19805: ST_TO_ADDR
// PlaceUnitXY ( CreateVehicle , 96 , 20 , false ) ;
19806: CALL_OW 45
19810: PPUSH
19811: LD_INT 96
19813: PPUSH
19814: LD_INT 20
19816: PPUSH
19817: LD_INT 0
19819: PPUSH
19820: CALL_OW 48
// end ; end_of_file end_of_file
19824: LD_VAR 0 1
19828: RET
// export globalGameSaveCounter ; every 0 0$1 do
19829: GO 19831
19831: DISABLE
// begin enable ;
19832: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19833: LD_STRING updateTimer(
19835: PUSH
19836: LD_OWVAR 1
19840: STR
19841: PUSH
19842: LD_STRING );
19844: STR
19845: PPUSH
19846: CALL_OW 559
// end ;
19850: END
// every 0 0$1 do
19851: GO 19853
19853: DISABLE
// begin globalGameSaveCounter := 0 ;
19854: LD_ADDR_EXP 60
19858: PUSH
19859: LD_INT 0
19861: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
19862: LD_STRING setGameSaveCounter(0)
19864: PPUSH
19865: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
19869: LD_STRING initStreamRollete();
19871: PPUSH
19872: CALL_OW 559
// InitStreamMode ;
19876: CALL 21228 0 0
// DefineStreamItems ( false ) ;
19880: LD_INT 0
19882: PPUSH
19883: CALL 21692 0 1
// end ;
19887: END
// export function SOS_MapStart ( ) ; begin
19888: LD_INT 0
19890: PPUSH
// if streamModeActive then
19891: LD_EXP 61
19895: IFFALSE 19904
// DefineStreamItems ( true ) ;
19897: LD_INT 1
19899: PPUSH
19900: CALL 21692 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
19904: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
19906: PPUSH
19907: CALL_OW 559
// UpdateLuaVariables ( ) ;
19911: CALL 19928 0 0
// UpdateFactoryWaypoints ( ) ;
19915: CALL 34814 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19919: CALL 35066 0 0
// end ;
19923: LD_VAR 0 1
19927: RET
// function UpdateLuaVariables ( ) ; begin
19928: LD_INT 0
19930: PPUSH
// if globalGameSaveCounter then
19931: LD_EXP 60
19935: IFFALSE 19969
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
19937: LD_ADDR_EXP 60
19941: PUSH
19942: LD_EXP 60
19946: PPUSH
19947: CALL 81962 0 1
19951: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19952: LD_STRING setGameSaveCounter(
19954: PUSH
19955: LD_EXP 60
19959: STR
19960: PUSH
19961: LD_STRING )
19963: STR
19964: PPUSH
19965: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
19969: LD_STRING setGameDifficulty(
19971: PUSH
19972: LD_OWVAR 67
19976: STR
19977: PUSH
19978: LD_STRING )
19980: STR
19981: PPUSH
19982: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
19986: LD_STRING displayDifficulty(
19988: PUSH
19989: LD_OWVAR 67
19993: STR
19994: PUSH
19995: LD_STRING )
19997: STR
19998: PPUSH
19999: CALL_OW 559
// end ;
20003: LD_VAR 0 1
20007: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20008: LD_INT 0
20010: PPUSH
// if p2 = stream_mode then
20011: LD_VAR 0 2
20015: PUSH
20016: LD_INT 100
20018: EQUAL
20019: IFFALSE 21022
// begin if not StreamModeActive then
20021: LD_EXP 61
20025: NOT
20026: IFFALSE 20036
// StreamModeActive := true ;
20028: LD_ADDR_EXP 61
20032: PUSH
20033: LD_INT 1
20035: ST_TO_ADDR
// if p3 = 0 then
20036: LD_VAR 0 3
20040: PUSH
20041: LD_INT 0
20043: EQUAL
20044: IFFALSE 20050
// InitStreamMode ;
20046: CALL 21228 0 0
// if p3 = 1 then
20050: LD_VAR 0 3
20054: PUSH
20055: LD_INT 1
20057: EQUAL
20058: IFFALSE 20068
// sRocket := true ;
20060: LD_ADDR_EXP 66
20064: PUSH
20065: LD_INT 1
20067: ST_TO_ADDR
// if p3 = 2 then
20068: LD_VAR 0 3
20072: PUSH
20073: LD_INT 2
20075: EQUAL
20076: IFFALSE 20086
// sSpeed := true ;
20078: LD_ADDR_EXP 65
20082: PUSH
20083: LD_INT 1
20085: ST_TO_ADDR
// if p3 = 3 then
20086: LD_VAR 0 3
20090: PUSH
20091: LD_INT 3
20093: EQUAL
20094: IFFALSE 20104
// sEngine := true ;
20096: LD_ADDR_EXP 67
20100: PUSH
20101: LD_INT 1
20103: ST_TO_ADDR
// if p3 = 4 then
20104: LD_VAR 0 3
20108: PUSH
20109: LD_INT 4
20111: EQUAL
20112: IFFALSE 20122
// sSpec := true ;
20114: LD_ADDR_EXP 64
20118: PUSH
20119: LD_INT 1
20121: ST_TO_ADDR
// if p3 = 5 then
20122: LD_VAR 0 3
20126: PUSH
20127: LD_INT 5
20129: EQUAL
20130: IFFALSE 20140
// sLevel := true ;
20132: LD_ADDR_EXP 68
20136: PUSH
20137: LD_INT 1
20139: ST_TO_ADDR
// if p3 = 6 then
20140: LD_VAR 0 3
20144: PUSH
20145: LD_INT 6
20147: EQUAL
20148: IFFALSE 20158
// sArmoury := true ;
20150: LD_ADDR_EXP 69
20154: PUSH
20155: LD_INT 1
20157: ST_TO_ADDR
// if p3 = 7 then
20158: LD_VAR 0 3
20162: PUSH
20163: LD_INT 7
20165: EQUAL
20166: IFFALSE 20176
// sRadar := true ;
20168: LD_ADDR_EXP 70
20172: PUSH
20173: LD_INT 1
20175: ST_TO_ADDR
// if p3 = 8 then
20176: LD_VAR 0 3
20180: PUSH
20181: LD_INT 8
20183: EQUAL
20184: IFFALSE 20194
// sBunker := true ;
20186: LD_ADDR_EXP 71
20190: PUSH
20191: LD_INT 1
20193: ST_TO_ADDR
// if p3 = 9 then
20194: LD_VAR 0 3
20198: PUSH
20199: LD_INT 9
20201: EQUAL
20202: IFFALSE 20212
// sHack := true ;
20204: LD_ADDR_EXP 72
20208: PUSH
20209: LD_INT 1
20211: ST_TO_ADDR
// if p3 = 10 then
20212: LD_VAR 0 3
20216: PUSH
20217: LD_INT 10
20219: EQUAL
20220: IFFALSE 20230
// sFire := true ;
20222: LD_ADDR_EXP 73
20226: PUSH
20227: LD_INT 1
20229: ST_TO_ADDR
// if p3 = 11 then
20230: LD_VAR 0 3
20234: PUSH
20235: LD_INT 11
20237: EQUAL
20238: IFFALSE 20248
// sRefresh := true ;
20240: LD_ADDR_EXP 74
20244: PUSH
20245: LD_INT 1
20247: ST_TO_ADDR
// if p3 = 12 then
20248: LD_VAR 0 3
20252: PUSH
20253: LD_INT 12
20255: EQUAL
20256: IFFALSE 20266
// sExp := true ;
20258: LD_ADDR_EXP 75
20262: PUSH
20263: LD_INT 1
20265: ST_TO_ADDR
// if p3 = 13 then
20266: LD_VAR 0 3
20270: PUSH
20271: LD_INT 13
20273: EQUAL
20274: IFFALSE 20284
// sDepot := true ;
20276: LD_ADDR_EXP 76
20280: PUSH
20281: LD_INT 1
20283: ST_TO_ADDR
// if p3 = 14 then
20284: LD_VAR 0 3
20288: PUSH
20289: LD_INT 14
20291: EQUAL
20292: IFFALSE 20302
// sFlag := true ;
20294: LD_ADDR_EXP 77
20298: PUSH
20299: LD_INT 1
20301: ST_TO_ADDR
// if p3 = 15 then
20302: LD_VAR 0 3
20306: PUSH
20307: LD_INT 15
20309: EQUAL
20310: IFFALSE 20320
// sKamikadze := true ;
20312: LD_ADDR_EXP 85
20316: PUSH
20317: LD_INT 1
20319: ST_TO_ADDR
// if p3 = 16 then
20320: LD_VAR 0 3
20324: PUSH
20325: LD_INT 16
20327: EQUAL
20328: IFFALSE 20338
// sTroll := true ;
20330: LD_ADDR_EXP 86
20334: PUSH
20335: LD_INT 1
20337: ST_TO_ADDR
// if p3 = 17 then
20338: LD_VAR 0 3
20342: PUSH
20343: LD_INT 17
20345: EQUAL
20346: IFFALSE 20356
// sSlow := true ;
20348: LD_ADDR_EXP 87
20352: PUSH
20353: LD_INT 1
20355: ST_TO_ADDR
// if p3 = 18 then
20356: LD_VAR 0 3
20360: PUSH
20361: LD_INT 18
20363: EQUAL
20364: IFFALSE 20374
// sLack := true ;
20366: LD_ADDR_EXP 88
20370: PUSH
20371: LD_INT 1
20373: ST_TO_ADDR
// if p3 = 19 then
20374: LD_VAR 0 3
20378: PUSH
20379: LD_INT 19
20381: EQUAL
20382: IFFALSE 20392
// sTank := true ;
20384: LD_ADDR_EXP 90
20388: PUSH
20389: LD_INT 1
20391: ST_TO_ADDR
// if p3 = 20 then
20392: LD_VAR 0 3
20396: PUSH
20397: LD_INT 20
20399: EQUAL
20400: IFFALSE 20410
// sRemote := true ;
20402: LD_ADDR_EXP 91
20406: PUSH
20407: LD_INT 1
20409: ST_TO_ADDR
// if p3 = 21 then
20410: LD_VAR 0 3
20414: PUSH
20415: LD_INT 21
20417: EQUAL
20418: IFFALSE 20428
// sPowell := true ;
20420: LD_ADDR_EXP 92
20424: PUSH
20425: LD_INT 1
20427: ST_TO_ADDR
// if p3 = 22 then
20428: LD_VAR 0 3
20432: PUSH
20433: LD_INT 22
20435: EQUAL
20436: IFFALSE 20446
// sTeleport := true ;
20438: LD_ADDR_EXP 95
20442: PUSH
20443: LD_INT 1
20445: ST_TO_ADDR
// if p3 = 23 then
20446: LD_VAR 0 3
20450: PUSH
20451: LD_INT 23
20453: EQUAL
20454: IFFALSE 20464
// sOilTower := true ;
20456: LD_ADDR_EXP 97
20460: PUSH
20461: LD_INT 1
20463: ST_TO_ADDR
// if p3 = 24 then
20464: LD_VAR 0 3
20468: PUSH
20469: LD_INT 24
20471: EQUAL
20472: IFFALSE 20482
// sShovel := true ;
20474: LD_ADDR_EXP 98
20478: PUSH
20479: LD_INT 1
20481: ST_TO_ADDR
// if p3 = 25 then
20482: LD_VAR 0 3
20486: PUSH
20487: LD_INT 25
20489: EQUAL
20490: IFFALSE 20500
// sSheik := true ;
20492: LD_ADDR_EXP 99
20496: PUSH
20497: LD_INT 1
20499: ST_TO_ADDR
// if p3 = 26 then
20500: LD_VAR 0 3
20504: PUSH
20505: LD_INT 26
20507: EQUAL
20508: IFFALSE 20518
// sEarthquake := true ;
20510: LD_ADDR_EXP 101
20514: PUSH
20515: LD_INT 1
20517: ST_TO_ADDR
// if p3 = 27 then
20518: LD_VAR 0 3
20522: PUSH
20523: LD_INT 27
20525: EQUAL
20526: IFFALSE 20536
// sAI := true ;
20528: LD_ADDR_EXP 102
20532: PUSH
20533: LD_INT 1
20535: ST_TO_ADDR
// if p3 = 28 then
20536: LD_VAR 0 3
20540: PUSH
20541: LD_INT 28
20543: EQUAL
20544: IFFALSE 20554
// sCargo := true ;
20546: LD_ADDR_EXP 105
20550: PUSH
20551: LD_INT 1
20553: ST_TO_ADDR
// if p3 = 29 then
20554: LD_VAR 0 3
20558: PUSH
20559: LD_INT 29
20561: EQUAL
20562: IFFALSE 20572
// sDLaser := true ;
20564: LD_ADDR_EXP 106
20568: PUSH
20569: LD_INT 1
20571: ST_TO_ADDR
// if p3 = 30 then
20572: LD_VAR 0 3
20576: PUSH
20577: LD_INT 30
20579: EQUAL
20580: IFFALSE 20590
// sExchange := true ;
20582: LD_ADDR_EXP 107
20586: PUSH
20587: LD_INT 1
20589: ST_TO_ADDR
// if p3 = 31 then
20590: LD_VAR 0 3
20594: PUSH
20595: LD_INT 31
20597: EQUAL
20598: IFFALSE 20608
// sFac := true ;
20600: LD_ADDR_EXP 108
20604: PUSH
20605: LD_INT 1
20607: ST_TO_ADDR
// if p3 = 32 then
20608: LD_VAR 0 3
20612: PUSH
20613: LD_INT 32
20615: EQUAL
20616: IFFALSE 20626
// sPower := true ;
20618: LD_ADDR_EXP 109
20622: PUSH
20623: LD_INT 1
20625: ST_TO_ADDR
// if p3 = 33 then
20626: LD_VAR 0 3
20630: PUSH
20631: LD_INT 33
20633: EQUAL
20634: IFFALSE 20644
// sRandom := true ;
20636: LD_ADDR_EXP 110
20640: PUSH
20641: LD_INT 1
20643: ST_TO_ADDR
// if p3 = 34 then
20644: LD_VAR 0 3
20648: PUSH
20649: LD_INT 34
20651: EQUAL
20652: IFFALSE 20662
// sShield := true ;
20654: LD_ADDR_EXP 111
20658: PUSH
20659: LD_INT 1
20661: ST_TO_ADDR
// if p3 = 35 then
20662: LD_VAR 0 3
20666: PUSH
20667: LD_INT 35
20669: EQUAL
20670: IFFALSE 20680
// sTime := true ;
20672: LD_ADDR_EXP 112
20676: PUSH
20677: LD_INT 1
20679: ST_TO_ADDR
// if p3 = 36 then
20680: LD_VAR 0 3
20684: PUSH
20685: LD_INT 36
20687: EQUAL
20688: IFFALSE 20698
// sTools := true ;
20690: LD_ADDR_EXP 113
20694: PUSH
20695: LD_INT 1
20697: ST_TO_ADDR
// if p3 = 101 then
20698: LD_VAR 0 3
20702: PUSH
20703: LD_INT 101
20705: EQUAL
20706: IFFALSE 20716
// sSold := true ;
20708: LD_ADDR_EXP 78
20712: PUSH
20713: LD_INT 1
20715: ST_TO_ADDR
// if p3 = 102 then
20716: LD_VAR 0 3
20720: PUSH
20721: LD_INT 102
20723: EQUAL
20724: IFFALSE 20734
// sDiff := true ;
20726: LD_ADDR_EXP 79
20730: PUSH
20731: LD_INT 1
20733: ST_TO_ADDR
// if p3 = 103 then
20734: LD_VAR 0 3
20738: PUSH
20739: LD_INT 103
20741: EQUAL
20742: IFFALSE 20752
// sFog := true ;
20744: LD_ADDR_EXP 82
20748: PUSH
20749: LD_INT 1
20751: ST_TO_ADDR
// if p3 = 104 then
20752: LD_VAR 0 3
20756: PUSH
20757: LD_INT 104
20759: EQUAL
20760: IFFALSE 20770
// sReset := true ;
20762: LD_ADDR_EXP 83
20766: PUSH
20767: LD_INT 1
20769: ST_TO_ADDR
// if p3 = 105 then
20770: LD_VAR 0 3
20774: PUSH
20775: LD_INT 105
20777: EQUAL
20778: IFFALSE 20788
// sSun := true ;
20780: LD_ADDR_EXP 84
20784: PUSH
20785: LD_INT 1
20787: ST_TO_ADDR
// if p3 = 106 then
20788: LD_VAR 0 3
20792: PUSH
20793: LD_INT 106
20795: EQUAL
20796: IFFALSE 20806
// sTiger := true ;
20798: LD_ADDR_EXP 80
20802: PUSH
20803: LD_INT 1
20805: ST_TO_ADDR
// if p3 = 107 then
20806: LD_VAR 0 3
20810: PUSH
20811: LD_INT 107
20813: EQUAL
20814: IFFALSE 20824
// sBomb := true ;
20816: LD_ADDR_EXP 81
20820: PUSH
20821: LD_INT 1
20823: ST_TO_ADDR
// if p3 = 108 then
20824: LD_VAR 0 3
20828: PUSH
20829: LD_INT 108
20831: EQUAL
20832: IFFALSE 20842
// sWound := true ;
20834: LD_ADDR_EXP 89
20838: PUSH
20839: LD_INT 1
20841: ST_TO_ADDR
// if p3 = 109 then
20842: LD_VAR 0 3
20846: PUSH
20847: LD_INT 109
20849: EQUAL
20850: IFFALSE 20860
// sBetray := true ;
20852: LD_ADDR_EXP 93
20856: PUSH
20857: LD_INT 1
20859: ST_TO_ADDR
// if p3 = 110 then
20860: LD_VAR 0 3
20864: PUSH
20865: LD_INT 110
20867: EQUAL
20868: IFFALSE 20878
// sContamin := true ;
20870: LD_ADDR_EXP 94
20874: PUSH
20875: LD_INT 1
20877: ST_TO_ADDR
// if p3 = 111 then
20878: LD_VAR 0 3
20882: PUSH
20883: LD_INT 111
20885: EQUAL
20886: IFFALSE 20896
// sOil := true ;
20888: LD_ADDR_EXP 96
20892: PUSH
20893: LD_INT 1
20895: ST_TO_ADDR
// if p3 = 112 then
20896: LD_VAR 0 3
20900: PUSH
20901: LD_INT 112
20903: EQUAL
20904: IFFALSE 20914
// sStu := true ;
20906: LD_ADDR_EXP 100
20910: PUSH
20911: LD_INT 1
20913: ST_TO_ADDR
// if p3 = 113 then
20914: LD_VAR 0 3
20918: PUSH
20919: LD_INT 113
20921: EQUAL
20922: IFFALSE 20932
// sBazooka := true ;
20924: LD_ADDR_EXP 103
20928: PUSH
20929: LD_INT 1
20931: ST_TO_ADDR
// if p3 = 114 then
20932: LD_VAR 0 3
20936: PUSH
20937: LD_INT 114
20939: EQUAL
20940: IFFALSE 20950
// sMortar := true ;
20942: LD_ADDR_EXP 104
20946: PUSH
20947: LD_INT 1
20949: ST_TO_ADDR
// if p3 = 115 then
20950: LD_VAR 0 3
20954: PUSH
20955: LD_INT 115
20957: EQUAL
20958: IFFALSE 20968
// sRanger := true ;
20960: LD_ADDR_EXP 114
20964: PUSH
20965: LD_INT 1
20967: ST_TO_ADDR
// if p3 = 116 then
20968: LD_VAR 0 3
20972: PUSH
20973: LD_INT 116
20975: EQUAL
20976: IFFALSE 20986
// sComputer := true ;
20978: LD_ADDR_EXP 115
20982: PUSH
20983: LD_INT 1
20985: ST_TO_ADDR
// if p3 = 117 then
20986: LD_VAR 0 3
20990: PUSH
20991: LD_INT 117
20993: EQUAL
20994: IFFALSE 21004
// s30 := true ;
20996: LD_ADDR_EXP 116
21000: PUSH
21001: LD_INT 1
21003: ST_TO_ADDR
// if p3 = 118 then
21004: LD_VAR 0 3
21008: PUSH
21009: LD_INT 118
21011: EQUAL
21012: IFFALSE 21022
// s60 := true ;
21014: LD_ADDR_EXP 117
21018: PUSH
21019: LD_INT 1
21021: ST_TO_ADDR
// end ; if p2 = hack_mode then
21022: LD_VAR 0 2
21026: PUSH
21027: LD_INT 101
21029: EQUAL
21030: IFFALSE 21158
// begin case p3 of 1 :
21032: LD_VAR 0 3
21036: PUSH
21037: LD_INT 1
21039: DOUBLE
21040: EQUAL
21041: IFTRUE 21045
21043: GO 21052
21045: POP
// hHackUnlimitedResources ; 2 :
21046: CALL 33421 0 0
21050: GO 21158
21052: LD_INT 2
21054: DOUBLE
21055: EQUAL
21056: IFTRUE 21060
21058: GO 21067
21060: POP
// hHackSetLevel10 ; 3 :
21061: CALL 33554 0 0
21065: GO 21158
21067: LD_INT 3
21069: DOUBLE
21070: EQUAL
21071: IFTRUE 21075
21073: GO 21082
21075: POP
// hHackSetLevel10YourUnits ; 4 :
21076: CALL 33639 0 0
21080: GO 21158
21082: LD_INT 4
21084: DOUBLE
21085: EQUAL
21086: IFTRUE 21090
21088: GO 21097
21090: POP
// hHackInvincible ; 5 :
21091: CALL 34087 0 0
21095: GO 21158
21097: LD_INT 5
21099: DOUBLE
21100: EQUAL
21101: IFTRUE 21105
21103: GO 21112
21105: POP
// hHackInvisible ; 6 :
21106: CALL 34198 0 0
21110: GO 21158
21112: LD_INT 6
21114: DOUBLE
21115: EQUAL
21116: IFTRUE 21120
21118: GO 21127
21120: POP
// hHackChangeYourSide ; 7 :
21121: CALL 34255 0 0
21125: GO 21158
21127: LD_INT 7
21129: DOUBLE
21130: EQUAL
21131: IFTRUE 21135
21133: GO 21142
21135: POP
// hHackChangeUnitSide ; 8 :
21136: CALL 34297 0 0
21140: GO 21158
21142: LD_INT 8
21144: DOUBLE
21145: EQUAL
21146: IFTRUE 21150
21148: GO 21157
21150: POP
// hHackFog ; end ;
21151: CALL 34398 0 0
21155: GO 21158
21157: POP
// end ; if p2 = game_save_mode then
21158: LD_VAR 0 2
21162: PUSH
21163: LD_INT 102
21165: EQUAL
21166: IFFALSE 21223
// begin if p3 = 1 then
21168: LD_VAR 0 3
21172: PUSH
21173: LD_INT 1
21175: EQUAL
21176: IFFALSE 21188
// globalGameSaveCounter := p4 ;
21178: LD_ADDR_EXP 60
21182: PUSH
21183: LD_VAR 0 4
21187: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
21188: LD_VAR 0 3
21192: PUSH
21193: LD_INT 2
21195: EQUAL
21196: IFFALSE 21204
21198: PUSH
21199: LD_EXP 60
21203: AND
21204: IFFALSE 21223
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21206: LD_STRING setGameSaveCounter(
21208: PUSH
21209: LD_EXP 60
21213: STR
21214: PUSH
21215: LD_STRING )
21217: STR
21218: PPUSH
21219: CALL_OW 559
// end ; end ;
21223: LD_VAR 0 7
21227: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
21228: LD_INT 0
21230: PPUSH
// streamModeActive := false ;
21231: LD_ADDR_EXP 61
21235: PUSH
21236: LD_INT 0
21238: ST_TO_ADDR
// normalCounter := 36 ;
21239: LD_ADDR_EXP 62
21243: PUSH
21244: LD_INT 36
21246: ST_TO_ADDR
// hardcoreCounter := 18 ;
21247: LD_ADDR_EXP 63
21251: PUSH
21252: LD_INT 18
21254: ST_TO_ADDR
// sRocket := false ;
21255: LD_ADDR_EXP 66
21259: PUSH
21260: LD_INT 0
21262: ST_TO_ADDR
// sSpeed := false ;
21263: LD_ADDR_EXP 65
21267: PUSH
21268: LD_INT 0
21270: ST_TO_ADDR
// sEngine := false ;
21271: LD_ADDR_EXP 67
21275: PUSH
21276: LD_INT 0
21278: ST_TO_ADDR
// sSpec := false ;
21279: LD_ADDR_EXP 64
21283: PUSH
21284: LD_INT 0
21286: ST_TO_ADDR
// sLevel := false ;
21287: LD_ADDR_EXP 68
21291: PUSH
21292: LD_INT 0
21294: ST_TO_ADDR
// sArmoury := false ;
21295: LD_ADDR_EXP 69
21299: PUSH
21300: LD_INT 0
21302: ST_TO_ADDR
// sRadar := false ;
21303: LD_ADDR_EXP 70
21307: PUSH
21308: LD_INT 0
21310: ST_TO_ADDR
// sBunker := false ;
21311: LD_ADDR_EXP 71
21315: PUSH
21316: LD_INT 0
21318: ST_TO_ADDR
// sHack := false ;
21319: LD_ADDR_EXP 72
21323: PUSH
21324: LD_INT 0
21326: ST_TO_ADDR
// sFire := false ;
21327: LD_ADDR_EXP 73
21331: PUSH
21332: LD_INT 0
21334: ST_TO_ADDR
// sRefresh := false ;
21335: LD_ADDR_EXP 74
21339: PUSH
21340: LD_INT 0
21342: ST_TO_ADDR
// sExp := false ;
21343: LD_ADDR_EXP 75
21347: PUSH
21348: LD_INT 0
21350: ST_TO_ADDR
// sDepot := false ;
21351: LD_ADDR_EXP 76
21355: PUSH
21356: LD_INT 0
21358: ST_TO_ADDR
// sFlag := false ;
21359: LD_ADDR_EXP 77
21363: PUSH
21364: LD_INT 0
21366: ST_TO_ADDR
// sKamikadze := false ;
21367: LD_ADDR_EXP 85
21371: PUSH
21372: LD_INT 0
21374: ST_TO_ADDR
// sTroll := false ;
21375: LD_ADDR_EXP 86
21379: PUSH
21380: LD_INT 0
21382: ST_TO_ADDR
// sSlow := false ;
21383: LD_ADDR_EXP 87
21387: PUSH
21388: LD_INT 0
21390: ST_TO_ADDR
// sLack := false ;
21391: LD_ADDR_EXP 88
21395: PUSH
21396: LD_INT 0
21398: ST_TO_ADDR
// sTank := false ;
21399: LD_ADDR_EXP 90
21403: PUSH
21404: LD_INT 0
21406: ST_TO_ADDR
// sRemote := false ;
21407: LD_ADDR_EXP 91
21411: PUSH
21412: LD_INT 0
21414: ST_TO_ADDR
// sPowell := false ;
21415: LD_ADDR_EXP 92
21419: PUSH
21420: LD_INT 0
21422: ST_TO_ADDR
// sTeleport := false ;
21423: LD_ADDR_EXP 95
21427: PUSH
21428: LD_INT 0
21430: ST_TO_ADDR
// sOilTower := false ;
21431: LD_ADDR_EXP 97
21435: PUSH
21436: LD_INT 0
21438: ST_TO_ADDR
// sShovel := false ;
21439: LD_ADDR_EXP 98
21443: PUSH
21444: LD_INT 0
21446: ST_TO_ADDR
// sSheik := false ;
21447: LD_ADDR_EXP 99
21451: PUSH
21452: LD_INT 0
21454: ST_TO_ADDR
// sEarthquake := false ;
21455: LD_ADDR_EXP 101
21459: PUSH
21460: LD_INT 0
21462: ST_TO_ADDR
// sAI := false ;
21463: LD_ADDR_EXP 102
21467: PUSH
21468: LD_INT 0
21470: ST_TO_ADDR
// sCargo := false ;
21471: LD_ADDR_EXP 105
21475: PUSH
21476: LD_INT 0
21478: ST_TO_ADDR
// sDLaser := false ;
21479: LD_ADDR_EXP 106
21483: PUSH
21484: LD_INT 0
21486: ST_TO_ADDR
// sExchange := false ;
21487: LD_ADDR_EXP 107
21491: PUSH
21492: LD_INT 0
21494: ST_TO_ADDR
// sFac := false ;
21495: LD_ADDR_EXP 108
21499: PUSH
21500: LD_INT 0
21502: ST_TO_ADDR
// sPower := false ;
21503: LD_ADDR_EXP 109
21507: PUSH
21508: LD_INT 0
21510: ST_TO_ADDR
// sRandom := false ;
21511: LD_ADDR_EXP 110
21515: PUSH
21516: LD_INT 0
21518: ST_TO_ADDR
// sShield := false ;
21519: LD_ADDR_EXP 111
21523: PUSH
21524: LD_INT 0
21526: ST_TO_ADDR
// sTime := false ;
21527: LD_ADDR_EXP 112
21531: PUSH
21532: LD_INT 0
21534: ST_TO_ADDR
// sTools := false ;
21535: LD_ADDR_EXP 113
21539: PUSH
21540: LD_INT 0
21542: ST_TO_ADDR
// sSold := false ;
21543: LD_ADDR_EXP 78
21547: PUSH
21548: LD_INT 0
21550: ST_TO_ADDR
// sDiff := false ;
21551: LD_ADDR_EXP 79
21555: PUSH
21556: LD_INT 0
21558: ST_TO_ADDR
// sFog := false ;
21559: LD_ADDR_EXP 82
21563: PUSH
21564: LD_INT 0
21566: ST_TO_ADDR
// sReset := false ;
21567: LD_ADDR_EXP 83
21571: PUSH
21572: LD_INT 0
21574: ST_TO_ADDR
// sSun := false ;
21575: LD_ADDR_EXP 84
21579: PUSH
21580: LD_INT 0
21582: ST_TO_ADDR
// sTiger := false ;
21583: LD_ADDR_EXP 80
21587: PUSH
21588: LD_INT 0
21590: ST_TO_ADDR
// sBomb := false ;
21591: LD_ADDR_EXP 81
21595: PUSH
21596: LD_INT 0
21598: ST_TO_ADDR
// sWound := false ;
21599: LD_ADDR_EXP 89
21603: PUSH
21604: LD_INT 0
21606: ST_TO_ADDR
// sBetray := false ;
21607: LD_ADDR_EXP 93
21611: PUSH
21612: LD_INT 0
21614: ST_TO_ADDR
// sContamin := false ;
21615: LD_ADDR_EXP 94
21619: PUSH
21620: LD_INT 0
21622: ST_TO_ADDR
// sOil := false ;
21623: LD_ADDR_EXP 96
21627: PUSH
21628: LD_INT 0
21630: ST_TO_ADDR
// sStu := false ;
21631: LD_ADDR_EXP 100
21635: PUSH
21636: LD_INT 0
21638: ST_TO_ADDR
// sBazooka := false ;
21639: LD_ADDR_EXP 103
21643: PUSH
21644: LD_INT 0
21646: ST_TO_ADDR
// sMortar := false ;
21647: LD_ADDR_EXP 104
21651: PUSH
21652: LD_INT 0
21654: ST_TO_ADDR
// sRanger := false ;
21655: LD_ADDR_EXP 114
21659: PUSH
21660: LD_INT 0
21662: ST_TO_ADDR
// sComputer := false ;
21663: LD_ADDR_EXP 115
21667: PUSH
21668: LD_INT 0
21670: ST_TO_ADDR
// s30 := false ;
21671: LD_ADDR_EXP 116
21675: PUSH
21676: LD_INT 0
21678: ST_TO_ADDR
// s60 := false ;
21679: LD_ADDR_EXP 117
21683: PUSH
21684: LD_INT 0
21686: ST_TO_ADDR
// end ;
21687: LD_VAR 0 1
21691: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21692: LD_INT 0
21694: PPUSH
21695: PPUSH
21696: PPUSH
21697: PPUSH
21698: PPUSH
21699: PPUSH
21700: PPUSH
// result := [ ] ;
21701: LD_ADDR_VAR 0 2
21705: PUSH
21706: EMPTY
21707: ST_TO_ADDR
// if campaign_id = 1 then
21708: LD_OWVAR 69
21712: PUSH
21713: LD_INT 1
21715: EQUAL
21716: IFFALSE 24882
// begin case mission_number of 1 :
21718: LD_OWVAR 70
21722: PUSH
21723: LD_INT 1
21725: DOUBLE
21726: EQUAL
21727: IFTRUE 21731
21729: GO 21807
21731: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21732: LD_ADDR_VAR 0 2
21736: PUSH
21737: LD_INT 2
21739: PUSH
21740: LD_INT 4
21742: PUSH
21743: LD_INT 11
21745: PUSH
21746: LD_INT 12
21748: PUSH
21749: LD_INT 15
21751: PUSH
21752: LD_INT 16
21754: PUSH
21755: LD_INT 22
21757: PUSH
21758: LD_INT 23
21760: PUSH
21761: LD_INT 26
21763: PUSH
21764: EMPTY
21765: LIST
21766: LIST
21767: LIST
21768: LIST
21769: LIST
21770: LIST
21771: LIST
21772: LIST
21773: LIST
21774: PUSH
21775: LD_INT 101
21777: PUSH
21778: LD_INT 102
21780: PUSH
21781: LD_INT 106
21783: PUSH
21784: LD_INT 116
21786: PUSH
21787: LD_INT 117
21789: PUSH
21790: LD_INT 118
21792: PUSH
21793: EMPTY
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: PUSH
21801: EMPTY
21802: LIST
21803: LIST
21804: ST_TO_ADDR
21805: GO 24880
21807: LD_INT 2
21809: DOUBLE
21810: EQUAL
21811: IFTRUE 21815
21813: GO 21899
21815: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21816: LD_ADDR_VAR 0 2
21820: PUSH
21821: LD_INT 2
21823: PUSH
21824: LD_INT 4
21826: PUSH
21827: LD_INT 11
21829: PUSH
21830: LD_INT 12
21832: PUSH
21833: LD_INT 15
21835: PUSH
21836: LD_INT 16
21838: PUSH
21839: LD_INT 22
21841: PUSH
21842: LD_INT 23
21844: PUSH
21845: LD_INT 26
21847: PUSH
21848: EMPTY
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: PUSH
21859: LD_INT 101
21861: PUSH
21862: LD_INT 102
21864: PUSH
21865: LD_INT 105
21867: PUSH
21868: LD_INT 106
21870: PUSH
21871: LD_INT 108
21873: PUSH
21874: LD_INT 116
21876: PUSH
21877: LD_INT 117
21879: PUSH
21880: LD_INT 118
21882: PUSH
21883: EMPTY
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: PUSH
21893: EMPTY
21894: LIST
21895: LIST
21896: ST_TO_ADDR
21897: GO 24880
21899: LD_INT 3
21901: DOUBLE
21902: EQUAL
21903: IFTRUE 21907
21905: GO 21995
21907: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21908: LD_ADDR_VAR 0 2
21912: PUSH
21913: LD_INT 2
21915: PUSH
21916: LD_INT 4
21918: PUSH
21919: LD_INT 5
21921: PUSH
21922: LD_INT 11
21924: PUSH
21925: LD_INT 12
21927: PUSH
21928: LD_INT 15
21930: PUSH
21931: LD_INT 16
21933: PUSH
21934: LD_INT 22
21936: PUSH
21937: LD_INT 26
21939: PUSH
21940: LD_INT 36
21942: PUSH
21943: EMPTY
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: PUSH
21955: LD_INT 101
21957: PUSH
21958: LD_INT 102
21960: PUSH
21961: LD_INT 105
21963: PUSH
21964: LD_INT 106
21966: PUSH
21967: LD_INT 108
21969: PUSH
21970: LD_INT 116
21972: PUSH
21973: LD_INT 117
21975: PUSH
21976: LD_INT 118
21978: PUSH
21979: EMPTY
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: LIST
21985: LIST
21986: LIST
21987: LIST
21988: PUSH
21989: EMPTY
21990: LIST
21991: LIST
21992: ST_TO_ADDR
21993: GO 24880
21995: LD_INT 4
21997: DOUBLE
21998: EQUAL
21999: IFTRUE 22003
22001: GO 22099
22003: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
22004: LD_ADDR_VAR 0 2
22008: PUSH
22009: LD_INT 2
22011: PUSH
22012: LD_INT 4
22014: PUSH
22015: LD_INT 5
22017: PUSH
22018: LD_INT 8
22020: PUSH
22021: LD_INT 11
22023: PUSH
22024: LD_INT 12
22026: PUSH
22027: LD_INT 15
22029: PUSH
22030: LD_INT 16
22032: PUSH
22033: LD_INT 22
22035: PUSH
22036: LD_INT 23
22038: PUSH
22039: LD_INT 26
22041: PUSH
22042: LD_INT 36
22044: PUSH
22045: EMPTY
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: PUSH
22059: LD_INT 101
22061: PUSH
22062: LD_INT 102
22064: PUSH
22065: LD_INT 105
22067: PUSH
22068: LD_INT 106
22070: PUSH
22071: LD_INT 108
22073: PUSH
22074: LD_INT 116
22076: PUSH
22077: LD_INT 117
22079: PUSH
22080: LD_INT 118
22082: PUSH
22083: EMPTY
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: PUSH
22093: EMPTY
22094: LIST
22095: LIST
22096: ST_TO_ADDR
22097: GO 24880
22099: LD_INT 5
22101: DOUBLE
22102: EQUAL
22103: IFTRUE 22107
22105: GO 22219
22107: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
22108: LD_ADDR_VAR 0 2
22112: PUSH
22113: LD_INT 2
22115: PUSH
22116: LD_INT 4
22118: PUSH
22119: LD_INT 5
22121: PUSH
22122: LD_INT 6
22124: PUSH
22125: LD_INT 8
22127: PUSH
22128: LD_INT 11
22130: PUSH
22131: LD_INT 12
22133: PUSH
22134: LD_INT 15
22136: PUSH
22137: LD_INT 16
22139: PUSH
22140: LD_INT 22
22142: PUSH
22143: LD_INT 23
22145: PUSH
22146: LD_INT 25
22148: PUSH
22149: LD_INT 26
22151: PUSH
22152: LD_INT 36
22154: PUSH
22155: EMPTY
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: PUSH
22171: LD_INT 101
22173: PUSH
22174: LD_INT 102
22176: PUSH
22177: LD_INT 105
22179: PUSH
22180: LD_INT 106
22182: PUSH
22183: LD_INT 108
22185: PUSH
22186: LD_INT 109
22188: PUSH
22189: LD_INT 112
22191: PUSH
22192: LD_INT 116
22194: PUSH
22195: LD_INT 117
22197: PUSH
22198: LD_INT 118
22200: PUSH
22201: EMPTY
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: PUSH
22213: EMPTY
22214: LIST
22215: LIST
22216: ST_TO_ADDR
22217: GO 24880
22219: LD_INT 6
22221: DOUBLE
22222: EQUAL
22223: IFTRUE 22227
22225: GO 22359
22227: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22228: LD_ADDR_VAR 0 2
22232: PUSH
22233: LD_INT 2
22235: PUSH
22236: LD_INT 4
22238: PUSH
22239: LD_INT 5
22241: PUSH
22242: LD_INT 6
22244: PUSH
22245: LD_INT 8
22247: PUSH
22248: LD_INT 11
22250: PUSH
22251: LD_INT 12
22253: PUSH
22254: LD_INT 15
22256: PUSH
22257: LD_INT 16
22259: PUSH
22260: LD_INT 20
22262: PUSH
22263: LD_INT 21
22265: PUSH
22266: LD_INT 22
22268: PUSH
22269: LD_INT 23
22271: PUSH
22272: LD_INT 25
22274: PUSH
22275: LD_INT 26
22277: PUSH
22278: LD_INT 30
22280: PUSH
22281: LD_INT 31
22283: PUSH
22284: LD_INT 32
22286: PUSH
22287: LD_INT 36
22289: PUSH
22290: EMPTY
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: PUSH
22311: LD_INT 101
22313: PUSH
22314: LD_INT 102
22316: PUSH
22317: LD_INT 105
22319: PUSH
22320: LD_INT 106
22322: PUSH
22323: LD_INT 108
22325: PUSH
22326: LD_INT 109
22328: PUSH
22329: LD_INT 112
22331: PUSH
22332: LD_INT 116
22334: PUSH
22335: LD_INT 117
22337: PUSH
22338: LD_INT 118
22340: PUSH
22341: EMPTY
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: PUSH
22353: EMPTY
22354: LIST
22355: LIST
22356: ST_TO_ADDR
22357: GO 24880
22359: LD_INT 7
22361: DOUBLE
22362: EQUAL
22363: IFTRUE 22367
22365: GO 22479
22367: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22368: LD_ADDR_VAR 0 2
22372: PUSH
22373: LD_INT 2
22375: PUSH
22376: LD_INT 4
22378: PUSH
22379: LD_INT 5
22381: PUSH
22382: LD_INT 7
22384: PUSH
22385: LD_INT 11
22387: PUSH
22388: LD_INT 12
22390: PUSH
22391: LD_INT 15
22393: PUSH
22394: LD_INT 16
22396: PUSH
22397: LD_INT 20
22399: PUSH
22400: LD_INT 21
22402: PUSH
22403: LD_INT 22
22405: PUSH
22406: LD_INT 23
22408: PUSH
22409: LD_INT 25
22411: PUSH
22412: LD_INT 26
22414: PUSH
22415: EMPTY
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: PUSH
22431: LD_INT 101
22433: PUSH
22434: LD_INT 102
22436: PUSH
22437: LD_INT 103
22439: PUSH
22440: LD_INT 105
22442: PUSH
22443: LD_INT 106
22445: PUSH
22446: LD_INT 108
22448: PUSH
22449: LD_INT 112
22451: PUSH
22452: LD_INT 116
22454: PUSH
22455: LD_INT 117
22457: PUSH
22458: LD_INT 118
22460: PUSH
22461: EMPTY
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: PUSH
22473: EMPTY
22474: LIST
22475: LIST
22476: ST_TO_ADDR
22477: GO 24880
22479: LD_INT 8
22481: DOUBLE
22482: EQUAL
22483: IFTRUE 22487
22485: GO 22627
22487: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22488: LD_ADDR_VAR 0 2
22492: PUSH
22493: LD_INT 2
22495: PUSH
22496: LD_INT 4
22498: PUSH
22499: LD_INT 5
22501: PUSH
22502: LD_INT 6
22504: PUSH
22505: LD_INT 7
22507: PUSH
22508: LD_INT 8
22510: PUSH
22511: LD_INT 11
22513: PUSH
22514: LD_INT 12
22516: PUSH
22517: LD_INT 15
22519: PUSH
22520: LD_INT 16
22522: PUSH
22523: LD_INT 20
22525: PUSH
22526: LD_INT 21
22528: PUSH
22529: LD_INT 22
22531: PUSH
22532: LD_INT 23
22534: PUSH
22535: LD_INT 25
22537: PUSH
22538: LD_INT 26
22540: PUSH
22541: LD_INT 30
22543: PUSH
22544: LD_INT 31
22546: PUSH
22547: LD_INT 32
22549: PUSH
22550: LD_INT 36
22552: PUSH
22553: EMPTY
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: PUSH
22575: LD_INT 101
22577: PUSH
22578: LD_INT 102
22580: PUSH
22581: LD_INT 103
22583: PUSH
22584: LD_INT 105
22586: PUSH
22587: LD_INT 106
22589: PUSH
22590: LD_INT 108
22592: PUSH
22593: LD_INT 109
22595: PUSH
22596: LD_INT 112
22598: PUSH
22599: LD_INT 116
22601: PUSH
22602: LD_INT 117
22604: PUSH
22605: LD_INT 118
22607: PUSH
22608: EMPTY
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: PUSH
22621: EMPTY
22622: LIST
22623: LIST
22624: ST_TO_ADDR
22625: GO 24880
22627: LD_INT 9
22629: DOUBLE
22630: EQUAL
22631: IFTRUE 22635
22633: GO 22783
22635: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22636: LD_ADDR_VAR 0 2
22640: PUSH
22641: LD_INT 2
22643: PUSH
22644: LD_INT 4
22646: PUSH
22647: LD_INT 5
22649: PUSH
22650: LD_INT 6
22652: PUSH
22653: LD_INT 7
22655: PUSH
22656: LD_INT 8
22658: PUSH
22659: LD_INT 11
22661: PUSH
22662: LD_INT 12
22664: PUSH
22665: LD_INT 15
22667: PUSH
22668: LD_INT 16
22670: PUSH
22671: LD_INT 20
22673: PUSH
22674: LD_INT 21
22676: PUSH
22677: LD_INT 22
22679: PUSH
22680: LD_INT 23
22682: PUSH
22683: LD_INT 25
22685: PUSH
22686: LD_INT 26
22688: PUSH
22689: LD_INT 28
22691: PUSH
22692: LD_INT 30
22694: PUSH
22695: LD_INT 31
22697: PUSH
22698: LD_INT 32
22700: PUSH
22701: LD_INT 36
22703: PUSH
22704: EMPTY
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: PUSH
22727: LD_INT 101
22729: PUSH
22730: LD_INT 102
22732: PUSH
22733: LD_INT 103
22735: PUSH
22736: LD_INT 105
22738: PUSH
22739: LD_INT 106
22741: PUSH
22742: LD_INT 108
22744: PUSH
22745: LD_INT 109
22747: PUSH
22748: LD_INT 112
22750: PUSH
22751: LD_INT 114
22753: PUSH
22754: LD_INT 116
22756: PUSH
22757: LD_INT 117
22759: PUSH
22760: LD_INT 118
22762: PUSH
22763: EMPTY
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: PUSH
22777: EMPTY
22778: LIST
22779: LIST
22780: ST_TO_ADDR
22781: GO 24880
22783: LD_INT 10
22785: DOUBLE
22786: EQUAL
22787: IFTRUE 22791
22789: GO 22987
22791: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22792: LD_ADDR_VAR 0 2
22796: PUSH
22797: LD_INT 2
22799: PUSH
22800: LD_INT 4
22802: PUSH
22803: LD_INT 5
22805: PUSH
22806: LD_INT 6
22808: PUSH
22809: LD_INT 7
22811: PUSH
22812: LD_INT 8
22814: PUSH
22815: LD_INT 9
22817: PUSH
22818: LD_INT 10
22820: PUSH
22821: LD_INT 11
22823: PUSH
22824: LD_INT 12
22826: PUSH
22827: LD_INT 13
22829: PUSH
22830: LD_INT 14
22832: PUSH
22833: LD_INT 15
22835: PUSH
22836: LD_INT 16
22838: PUSH
22839: LD_INT 17
22841: PUSH
22842: LD_INT 18
22844: PUSH
22845: LD_INT 19
22847: PUSH
22848: LD_INT 20
22850: PUSH
22851: LD_INT 21
22853: PUSH
22854: LD_INT 22
22856: PUSH
22857: LD_INT 23
22859: PUSH
22860: LD_INT 24
22862: PUSH
22863: LD_INT 25
22865: PUSH
22866: LD_INT 26
22868: PUSH
22869: LD_INT 28
22871: PUSH
22872: LD_INT 30
22874: PUSH
22875: LD_INT 31
22877: PUSH
22878: LD_INT 32
22880: PUSH
22881: LD_INT 36
22883: PUSH
22884: EMPTY
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: PUSH
22915: LD_INT 101
22917: PUSH
22918: LD_INT 102
22920: PUSH
22921: LD_INT 103
22923: PUSH
22924: LD_INT 104
22926: PUSH
22927: LD_INT 105
22929: PUSH
22930: LD_INT 106
22932: PUSH
22933: LD_INT 107
22935: PUSH
22936: LD_INT 108
22938: PUSH
22939: LD_INT 109
22941: PUSH
22942: LD_INT 110
22944: PUSH
22945: LD_INT 111
22947: PUSH
22948: LD_INT 112
22950: PUSH
22951: LD_INT 114
22953: PUSH
22954: LD_INT 116
22956: PUSH
22957: LD_INT 117
22959: PUSH
22960: LD_INT 118
22962: PUSH
22963: EMPTY
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: PUSH
22981: EMPTY
22982: LIST
22983: LIST
22984: ST_TO_ADDR
22985: GO 24880
22987: LD_INT 11
22989: DOUBLE
22990: EQUAL
22991: IFTRUE 22995
22993: GO 23199
22995: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22996: LD_ADDR_VAR 0 2
23000: PUSH
23001: LD_INT 2
23003: PUSH
23004: LD_INT 3
23006: PUSH
23007: LD_INT 4
23009: PUSH
23010: LD_INT 5
23012: PUSH
23013: LD_INT 6
23015: PUSH
23016: LD_INT 7
23018: PUSH
23019: LD_INT 8
23021: PUSH
23022: LD_INT 9
23024: PUSH
23025: LD_INT 10
23027: PUSH
23028: LD_INT 11
23030: PUSH
23031: LD_INT 12
23033: PUSH
23034: LD_INT 13
23036: PUSH
23037: LD_INT 14
23039: PUSH
23040: LD_INT 15
23042: PUSH
23043: LD_INT 16
23045: PUSH
23046: LD_INT 17
23048: PUSH
23049: LD_INT 18
23051: PUSH
23052: LD_INT 19
23054: PUSH
23055: LD_INT 20
23057: PUSH
23058: LD_INT 21
23060: PUSH
23061: LD_INT 22
23063: PUSH
23064: LD_INT 23
23066: PUSH
23067: LD_INT 24
23069: PUSH
23070: LD_INT 25
23072: PUSH
23073: LD_INT 26
23075: PUSH
23076: LD_INT 28
23078: PUSH
23079: LD_INT 30
23081: PUSH
23082: LD_INT 31
23084: PUSH
23085: LD_INT 32
23087: PUSH
23088: LD_INT 34
23090: PUSH
23091: LD_INT 36
23093: PUSH
23094: EMPTY
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: LIST
23112: LIST
23113: LIST
23114: LIST
23115: LIST
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: PUSH
23127: LD_INT 101
23129: PUSH
23130: LD_INT 102
23132: PUSH
23133: LD_INT 103
23135: PUSH
23136: LD_INT 104
23138: PUSH
23139: LD_INT 105
23141: PUSH
23142: LD_INT 106
23144: PUSH
23145: LD_INT 107
23147: PUSH
23148: LD_INT 108
23150: PUSH
23151: LD_INT 109
23153: PUSH
23154: LD_INT 110
23156: PUSH
23157: LD_INT 111
23159: PUSH
23160: LD_INT 112
23162: PUSH
23163: LD_INT 114
23165: PUSH
23166: LD_INT 116
23168: PUSH
23169: LD_INT 117
23171: PUSH
23172: LD_INT 118
23174: PUSH
23175: EMPTY
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: PUSH
23193: EMPTY
23194: LIST
23195: LIST
23196: ST_TO_ADDR
23197: GO 24880
23199: LD_INT 12
23201: DOUBLE
23202: EQUAL
23203: IFTRUE 23207
23205: GO 23427
23207: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23208: LD_ADDR_VAR 0 2
23212: PUSH
23213: LD_INT 1
23215: PUSH
23216: LD_INT 2
23218: PUSH
23219: LD_INT 3
23221: PUSH
23222: LD_INT 4
23224: PUSH
23225: LD_INT 5
23227: PUSH
23228: LD_INT 6
23230: PUSH
23231: LD_INT 7
23233: PUSH
23234: LD_INT 8
23236: PUSH
23237: LD_INT 9
23239: PUSH
23240: LD_INT 10
23242: PUSH
23243: LD_INT 11
23245: PUSH
23246: LD_INT 12
23248: PUSH
23249: LD_INT 13
23251: PUSH
23252: LD_INT 14
23254: PUSH
23255: LD_INT 15
23257: PUSH
23258: LD_INT 16
23260: PUSH
23261: LD_INT 17
23263: PUSH
23264: LD_INT 18
23266: PUSH
23267: LD_INT 19
23269: PUSH
23270: LD_INT 20
23272: PUSH
23273: LD_INT 21
23275: PUSH
23276: LD_INT 22
23278: PUSH
23279: LD_INT 23
23281: PUSH
23282: LD_INT 24
23284: PUSH
23285: LD_INT 25
23287: PUSH
23288: LD_INT 26
23290: PUSH
23291: LD_INT 27
23293: PUSH
23294: LD_INT 28
23296: PUSH
23297: LD_INT 30
23299: PUSH
23300: LD_INT 31
23302: PUSH
23303: LD_INT 32
23305: PUSH
23306: LD_INT 33
23308: PUSH
23309: LD_INT 34
23311: PUSH
23312: LD_INT 36
23314: PUSH
23315: EMPTY
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: PUSH
23351: LD_INT 101
23353: PUSH
23354: LD_INT 102
23356: PUSH
23357: LD_INT 103
23359: PUSH
23360: LD_INT 104
23362: PUSH
23363: LD_INT 105
23365: PUSH
23366: LD_INT 106
23368: PUSH
23369: LD_INT 107
23371: PUSH
23372: LD_INT 108
23374: PUSH
23375: LD_INT 109
23377: PUSH
23378: LD_INT 110
23380: PUSH
23381: LD_INT 111
23383: PUSH
23384: LD_INT 112
23386: PUSH
23387: LD_INT 113
23389: PUSH
23390: LD_INT 114
23392: PUSH
23393: LD_INT 116
23395: PUSH
23396: LD_INT 117
23398: PUSH
23399: LD_INT 118
23401: PUSH
23402: EMPTY
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: PUSH
23421: EMPTY
23422: LIST
23423: LIST
23424: ST_TO_ADDR
23425: GO 24880
23427: LD_INT 13
23429: DOUBLE
23430: EQUAL
23431: IFTRUE 23435
23433: GO 23643
23435: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23436: LD_ADDR_VAR 0 2
23440: PUSH
23441: LD_INT 1
23443: PUSH
23444: LD_INT 2
23446: PUSH
23447: LD_INT 3
23449: PUSH
23450: LD_INT 4
23452: PUSH
23453: LD_INT 5
23455: PUSH
23456: LD_INT 8
23458: PUSH
23459: LD_INT 9
23461: PUSH
23462: LD_INT 10
23464: PUSH
23465: LD_INT 11
23467: PUSH
23468: LD_INT 12
23470: PUSH
23471: LD_INT 14
23473: PUSH
23474: LD_INT 15
23476: PUSH
23477: LD_INT 16
23479: PUSH
23480: LD_INT 17
23482: PUSH
23483: LD_INT 18
23485: PUSH
23486: LD_INT 19
23488: PUSH
23489: LD_INT 20
23491: PUSH
23492: LD_INT 21
23494: PUSH
23495: LD_INT 22
23497: PUSH
23498: LD_INT 23
23500: PUSH
23501: LD_INT 24
23503: PUSH
23504: LD_INT 25
23506: PUSH
23507: LD_INT 26
23509: PUSH
23510: LD_INT 27
23512: PUSH
23513: LD_INT 28
23515: PUSH
23516: LD_INT 30
23518: PUSH
23519: LD_INT 31
23521: PUSH
23522: LD_INT 32
23524: PUSH
23525: LD_INT 33
23527: PUSH
23528: LD_INT 34
23530: PUSH
23531: LD_INT 36
23533: PUSH
23534: EMPTY
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: PUSH
23567: LD_INT 101
23569: PUSH
23570: LD_INT 102
23572: PUSH
23573: LD_INT 103
23575: PUSH
23576: LD_INT 104
23578: PUSH
23579: LD_INT 105
23581: PUSH
23582: LD_INT 106
23584: PUSH
23585: LD_INT 107
23587: PUSH
23588: LD_INT 108
23590: PUSH
23591: LD_INT 109
23593: PUSH
23594: LD_INT 110
23596: PUSH
23597: LD_INT 111
23599: PUSH
23600: LD_INT 112
23602: PUSH
23603: LD_INT 113
23605: PUSH
23606: LD_INT 114
23608: PUSH
23609: LD_INT 116
23611: PUSH
23612: LD_INT 117
23614: PUSH
23615: LD_INT 118
23617: PUSH
23618: EMPTY
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: PUSH
23637: EMPTY
23638: LIST
23639: LIST
23640: ST_TO_ADDR
23641: GO 24880
23643: LD_INT 14
23645: DOUBLE
23646: EQUAL
23647: IFTRUE 23651
23649: GO 23875
23651: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23652: LD_ADDR_VAR 0 2
23656: PUSH
23657: LD_INT 1
23659: PUSH
23660: LD_INT 2
23662: PUSH
23663: LD_INT 3
23665: PUSH
23666: LD_INT 4
23668: PUSH
23669: LD_INT 5
23671: PUSH
23672: LD_INT 6
23674: PUSH
23675: LD_INT 7
23677: PUSH
23678: LD_INT 8
23680: PUSH
23681: LD_INT 9
23683: PUSH
23684: LD_INT 10
23686: PUSH
23687: LD_INT 11
23689: PUSH
23690: LD_INT 12
23692: PUSH
23693: LD_INT 13
23695: PUSH
23696: LD_INT 14
23698: PUSH
23699: LD_INT 15
23701: PUSH
23702: LD_INT 16
23704: PUSH
23705: LD_INT 17
23707: PUSH
23708: LD_INT 18
23710: PUSH
23711: LD_INT 19
23713: PUSH
23714: LD_INT 20
23716: PUSH
23717: LD_INT 21
23719: PUSH
23720: LD_INT 22
23722: PUSH
23723: LD_INT 23
23725: PUSH
23726: LD_INT 24
23728: PUSH
23729: LD_INT 25
23731: PUSH
23732: LD_INT 26
23734: PUSH
23735: LD_INT 27
23737: PUSH
23738: LD_INT 28
23740: PUSH
23741: LD_INT 29
23743: PUSH
23744: LD_INT 30
23746: PUSH
23747: LD_INT 31
23749: PUSH
23750: LD_INT 32
23752: PUSH
23753: LD_INT 33
23755: PUSH
23756: LD_INT 34
23758: PUSH
23759: LD_INT 36
23761: PUSH
23762: EMPTY
23763: LIST
23764: LIST
23765: LIST
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: PUSH
23799: LD_INT 101
23801: PUSH
23802: LD_INT 102
23804: PUSH
23805: LD_INT 103
23807: PUSH
23808: LD_INT 104
23810: PUSH
23811: LD_INT 105
23813: PUSH
23814: LD_INT 106
23816: PUSH
23817: LD_INT 107
23819: PUSH
23820: LD_INT 108
23822: PUSH
23823: LD_INT 109
23825: PUSH
23826: LD_INT 110
23828: PUSH
23829: LD_INT 111
23831: PUSH
23832: LD_INT 112
23834: PUSH
23835: LD_INT 113
23837: PUSH
23838: LD_INT 114
23840: PUSH
23841: LD_INT 116
23843: PUSH
23844: LD_INT 117
23846: PUSH
23847: LD_INT 118
23849: PUSH
23850: EMPTY
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: PUSH
23869: EMPTY
23870: LIST
23871: LIST
23872: ST_TO_ADDR
23873: GO 24880
23875: LD_INT 15
23877: DOUBLE
23878: EQUAL
23879: IFTRUE 23883
23881: GO 24107
23883: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23884: LD_ADDR_VAR 0 2
23888: PUSH
23889: LD_INT 1
23891: PUSH
23892: LD_INT 2
23894: PUSH
23895: LD_INT 3
23897: PUSH
23898: LD_INT 4
23900: PUSH
23901: LD_INT 5
23903: PUSH
23904: LD_INT 6
23906: PUSH
23907: LD_INT 7
23909: PUSH
23910: LD_INT 8
23912: PUSH
23913: LD_INT 9
23915: PUSH
23916: LD_INT 10
23918: PUSH
23919: LD_INT 11
23921: PUSH
23922: LD_INT 12
23924: PUSH
23925: LD_INT 13
23927: PUSH
23928: LD_INT 14
23930: PUSH
23931: LD_INT 15
23933: PUSH
23934: LD_INT 16
23936: PUSH
23937: LD_INT 17
23939: PUSH
23940: LD_INT 18
23942: PUSH
23943: LD_INT 19
23945: PUSH
23946: LD_INT 20
23948: PUSH
23949: LD_INT 21
23951: PUSH
23952: LD_INT 22
23954: PUSH
23955: LD_INT 23
23957: PUSH
23958: LD_INT 24
23960: PUSH
23961: LD_INT 25
23963: PUSH
23964: LD_INT 26
23966: PUSH
23967: LD_INT 27
23969: PUSH
23970: LD_INT 28
23972: PUSH
23973: LD_INT 29
23975: PUSH
23976: LD_INT 30
23978: PUSH
23979: LD_INT 31
23981: PUSH
23982: LD_INT 32
23984: PUSH
23985: LD_INT 33
23987: PUSH
23988: LD_INT 34
23990: PUSH
23991: LD_INT 36
23993: PUSH
23994: EMPTY
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: PUSH
24031: LD_INT 101
24033: PUSH
24034: LD_INT 102
24036: PUSH
24037: LD_INT 103
24039: PUSH
24040: LD_INT 104
24042: PUSH
24043: LD_INT 105
24045: PUSH
24046: LD_INT 106
24048: PUSH
24049: LD_INT 107
24051: PUSH
24052: LD_INT 108
24054: PUSH
24055: LD_INT 109
24057: PUSH
24058: LD_INT 110
24060: PUSH
24061: LD_INT 111
24063: PUSH
24064: LD_INT 112
24066: PUSH
24067: LD_INT 113
24069: PUSH
24070: LD_INT 114
24072: PUSH
24073: LD_INT 116
24075: PUSH
24076: LD_INT 117
24078: PUSH
24079: LD_INT 118
24081: PUSH
24082: EMPTY
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: PUSH
24101: EMPTY
24102: LIST
24103: LIST
24104: ST_TO_ADDR
24105: GO 24880
24107: LD_INT 16
24109: DOUBLE
24110: EQUAL
24111: IFTRUE 24115
24113: GO 24251
24115: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
24116: LD_ADDR_VAR 0 2
24120: PUSH
24121: LD_INT 2
24123: PUSH
24124: LD_INT 4
24126: PUSH
24127: LD_INT 5
24129: PUSH
24130: LD_INT 7
24132: PUSH
24133: LD_INT 11
24135: PUSH
24136: LD_INT 12
24138: PUSH
24139: LD_INT 15
24141: PUSH
24142: LD_INT 16
24144: PUSH
24145: LD_INT 20
24147: PUSH
24148: LD_INT 21
24150: PUSH
24151: LD_INT 22
24153: PUSH
24154: LD_INT 23
24156: PUSH
24157: LD_INT 25
24159: PUSH
24160: LD_INT 26
24162: PUSH
24163: LD_INT 30
24165: PUSH
24166: LD_INT 31
24168: PUSH
24169: LD_INT 32
24171: PUSH
24172: LD_INT 33
24174: PUSH
24175: LD_INT 34
24177: PUSH
24178: EMPTY
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: PUSH
24199: LD_INT 101
24201: PUSH
24202: LD_INT 102
24204: PUSH
24205: LD_INT 103
24207: PUSH
24208: LD_INT 106
24210: PUSH
24211: LD_INT 108
24213: PUSH
24214: LD_INT 112
24216: PUSH
24217: LD_INT 113
24219: PUSH
24220: LD_INT 114
24222: PUSH
24223: LD_INT 116
24225: PUSH
24226: LD_INT 117
24228: PUSH
24229: LD_INT 118
24231: PUSH
24232: EMPTY
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: LIST
24244: PUSH
24245: EMPTY
24246: LIST
24247: LIST
24248: ST_TO_ADDR
24249: GO 24880
24251: LD_INT 17
24253: DOUBLE
24254: EQUAL
24255: IFTRUE 24259
24257: GO 24483
24259: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24260: LD_ADDR_VAR 0 2
24264: PUSH
24265: LD_INT 1
24267: PUSH
24268: LD_INT 2
24270: PUSH
24271: LD_INT 3
24273: PUSH
24274: LD_INT 4
24276: PUSH
24277: LD_INT 5
24279: PUSH
24280: LD_INT 6
24282: PUSH
24283: LD_INT 7
24285: PUSH
24286: LD_INT 8
24288: PUSH
24289: LD_INT 9
24291: PUSH
24292: LD_INT 10
24294: PUSH
24295: LD_INT 11
24297: PUSH
24298: LD_INT 12
24300: PUSH
24301: LD_INT 13
24303: PUSH
24304: LD_INT 14
24306: PUSH
24307: LD_INT 15
24309: PUSH
24310: LD_INT 16
24312: PUSH
24313: LD_INT 17
24315: PUSH
24316: LD_INT 18
24318: PUSH
24319: LD_INT 19
24321: PUSH
24322: LD_INT 20
24324: PUSH
24325: LD_INT 21
24327: PUSH
24328: LD_INT 22
24330: PUSH
24331: LD_INT 23
24333: PUSH
24334: LD_INT 24
24336: PUSH
24337: LD_INT 25
24339: PUSH
24340: LD_INT 26
24342: PUSH
24343: LD_INT 27
24345: PUSH
24346: LD_INT 28
24348: PUSH
24349: LD_INT 29
24351: PUSH
24352: LD_INT 30
24354: PUSH
24355: LD_INT 31
24357: PUSH
24358: LD_INT 32
24360: PUSH
24361: LD_INT 33
24363: PUSH
24364: LD_INT 34
24366: PUSH
24367: LD_INT 36
24369: PUSH
24370: EMPTY
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: LIST
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: LIST
24392: LIST
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: PUSH
24407: LD_INT 101
24409: PUSH
24410: LD_INT 102
24412: PUSH
24413: LD_INT 103
24415: PUSH
24416: LD_INT 104
24418: PUSH
24419: LD_INT 105
24421: PUSH
24422: LD_INT 106
24424: PUSH
24425: LD_INT 107
24427: PUSH
24428: LD_INT 108
24430: PUSH
24431: LD_INT 109
24433: PUSH
24434: LD_INT 110
24436: PUSH
24437: LD_INT 111
24439: PUSH
24440: LD_INT 112
24442: PUSH
24443: LD_INT 113
24445: PUSH
24446: LD_INT 114
24448: PUSH
24449: LD_INT 116
24451: PUSH
24452: LD_INT 117
24454: PUSH
24455: LD_INT 118
24457: PUSH
24458: EMPTY
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: LIST
24474: LIST
24475: LIST
24476: PUSH
24477: EMPTY
24478: LIST
24479: LIST
24480: ST_TO_ADDR
24481: GO 24880
24483: LD_INT 18
24485: DOUBLE
24486: EQUAL
24487: IFTRUE 24491
24489: GO 24639
24491: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24492: LD_ADDR_VAR 0 2
24496: PUSH
24497: LD_INT 2
24499: PUSH
24500: LD_INT 4
24502: PUSH
24503: LD_INT 5
24505: PUSH
24506: LD_INT 7
24508: PUSH
24509: LD_INT 11
24511: PUSH
24512: LD_INT 12
24514: PUSH
24515: LD_INT 15
24517: PUSH
24518: LD_INT 16
24520: PUSH
24521: LD_INT 20
24523: PUSH
24524: LD_INT 21
24526: PUSH
24527: LD_INT 22
24529: PUSH
24530: LD_INT 23
24532: PUSH
24533: LD_INT 25
24535: PUSH
24536: LD_INT 26
24538: PUSH
24539: LD_INT 30
24541: PUSH
24542: LD_INT 31
24544: PUSH
24545: LD_INT 32
24547: PUSH
24548: LD_INT 33
24550: PUSH
24551: LD_INT 34
24553: PUSH
24554: LD_INT 35
24556: PUSH
24557: LD_INT 36
24559: PUSH
24560: EMPTY
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: PUSH
24583: LD_INT 101
24585: PUSH
24586: LD_INT 102
24588: PUSH
24589: LD_INT 103
24591: PUSH
24592: LD_INT 106
24594: PUSH
24595: LD_INT 108
24597: PUSH
24598: LD_INT 112
24600: PUSH
24601: LD_INT 113
24603: PUSH
24604: LD_INT 114
24606: PUSH
24607: LD_INT 115
24609: PUSH
24610: LD_INT 116
24612: PUSH
24613: LD_INT 117
24615: PUSH
24616: LD_INT 118
24618: PUSH
24619: EMPTY
24620: LIST
24621: LIST
24622: LIST
24623: LIST
24624: LIST
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: LIST
24630: LIST
24631: LIST
24632: PUSH
24633: EMPTY
24634: LIST
24635: LIST
24636: ST_TO_ADDR
24637: GO 24880
24639: LD_INT 19
24641: DOUBLE
24642: EQUAL
24643: IFTRUE 24647
24645: GO 24879
24647: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24648: LD_ADDR_VAR 0 2
24652: PUSH
24653: LD_INT 1
24655: PUSH
24656: LD_INT 2
24658: PUSH
24659: LD_INT 3
24661: PUSH
24662: LD_INT 4
24664: PUSH
24665: LD_INT 5
24667: PUSH
24668: LD_INT 6
24670: PUSH
24671: LD_INT 7
24673: PUSH
24674: LD_INT 8
24676: PUSH
24677: LD_INT 9
24679: PUSH
24680: LD_INT 10
24682: PUSH
24683: LD_INT 11
24685: PUSH
24686: LD_INT 12
24688: PUSH
24689: LD_INT 13
24691: PUSH
24692: LD_INT 14
24694: PUSH
24695: LD_INT 15
24697: PUSH
24698: LD_INT 16
24700: PUSH
24701: LD_INT 17
24703: PUSH
24704: LD_INT 18
24706: PUSH
24707: LD_INT 19
24709: PUSH
24710: LD_INT 20
24712: PUSH
24713: LD_INT 21
24715: PUSH
24716: LD_INT 22
24718: PUSH
24719: LD_INT 23
24721: PUSH
24722: LD_INT 24
24724: PUSH
24725: LD_INT 25
24727: PUSH
24728: LD_INT 26
24730: PUSH
24731: LD_INT 27
24733: PUSH
24734: LD_INT 28
24736: PUSH
24737: LD_INT 29
24739: PUSH
24740: LD_INT 30
24742: PUSH
24743: LD_INT 31
24745: PUSH
24746: LD_INT 32
24748: PUSH
24749: LD_INT 33
24751: PUSH
24752: LD_INT 34
24754: PUSH
24755: LD_INT 35
24757: PUSH
24758: LD_INT 36
24760: PUSH
24761: EMPTY
24762: LIST
24763: LIST
24764: LIST
24765: LIST
24766: LIST
24767: LIST
24768: LIST
24769: LIST
24770: LIST
24771: LIST
24772: LIST
24773: LIST
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: PUSH
24799: LD_INT 101
24801: PUSH
24802: LD_INT 102
24804: PUSH
24805: LD_INT 103
24807: PUSH
24808: LD_INT 104
24810: PUSH
24811: LD_INT 105
24813: PUSH
24814: LD_INT 106
24816: PUSH
24817: LD_INT 107
24819: PUSH
24820: LD_INT 108
24822: PUSH
24823: LD_INT 109
24825: PUSH
24826: LD_INT 110
24828: PUSH
24829: LD_INT 111
24831: PUSH
24832: LD_INT 112
24834: PUSH
24835: LD_INT 113
24837: PUSH
24838: LD_INT 114
24840: PUSH
24841: LD_INT 115
24843: PUSH
24844: LD_INT 116
24846: PUSH
24847: LD_INT 117
24849: PUSH
24850: LD_INT 118
24852: PUSH
24853: EMPTY
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: PUSH
24873: EMPTY
24874: LIST
24875: LIST
24876: ST_TO_ADDR
24877: GO 24880
24879: POP
// end else
24880: GO 25111
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24882: LD_ADDR_VAR 0 2
24886: PUSH
24887: LD_INT 1
24889: PUSH
24890: LD_INT 2
24892: PUSH
24893: LD_INT 3
24895: PUSH
24896: LD_INT 4
24898: PUSH
24899: LD_INT 5
24901: PUSH
24902: LD_INT 6
24904: PUSH
24905: LD_INT 7
24907: PUSH
24908: LD_INT 8
24910: PUSH
24911: LD_INT 9
24913: PUSH
24914: LD_INT 10
24916: PUSH
24917: LD_INT 11
24919: PUSH
24920: LD_INT 12
24922: PUSH
24923: LD_INT 13
24925: PUSH
24926: LD_INT 14
24928: PUSH
24929: LD_INT 15
24931: PUSH
24932: LD_INT 16
24934: PUSH
24935: LD_INT 17
24937: PUSH
24938: LD_INT 18
24940: PUSH
24941: LD_INT 19
24943: PUSH
24944: LD_INT 20
24946: PUSH
24947: LD_INT 21
24949: PUSH
24950: LD_INT 22
24952: PUSH
24953: LD_INT 23
24955: PUSH
24956: LD_INT 24
24958: PUSH
24959: LD_INT 25
24961: PUSH
24962: LD_INT 26
24964: PUSH
24965: LD_INT 27
24967: PUSH
24968: LD_INT 28
24970: PUSH
24971: LD_INT 29
24973: PUSH
24974: LD_INT 30
24976: PUSH
24977: LD_INT 31
24979: PUSH
24980: LD_INT 32
24982: PUSH
24983: LD_INT 33
24985: PUSH
24986: LD_INT 34
24988: PUSH
24989: LD_INT 35
24991: PUSH
24992: LD_INT 36
24994: PUSH
24995: EMPTY
24996: LIST
24997: LIST
24998: LIST
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: PUSH
25033: LD_INT 101
25035: PUSH
25036: LD_INT 102
25038: PUSH
25039: LD_INT 103
25041: PUSH
25042: LD_INT 104
25044: PUSH
25045: LD_INT 105
25047: PUSH
25048: LD_INT 106
25050: PUSH
25051: LD_INT 107
25053: PUSH
25054: LD_INT 108
25056: PUSH
25057: LD_INT 109
25059: PUSH
25060: LD_INT 110
25062: PUSH
25063: LD_INT 111
25065: PUSH
25066: LD_INT 112
25068: PUSH
25069: LD_INT 113
25071: PUSH
25072: LD_INT 114
25074: PUSH
25075: LD_INT 115
25077: PUSH
25078: LD_INT 116
25080: PUSH
25081: LD_INT 117
25083: PUSH
25084: LD_INT 118
25086: PUSH
25087: EMPTY
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: PUSH
25107: EMPTY
25108: LIST
25109: LIST
25110: ST_TO_ADDR
// if result then
25111: LD_VAR 0 2
25115: IFFALSE 25901
// begin normal :=  ;
25117: LD_ADDR_VAR 0 5
25121: PUSH
25122: LD_STRING 
25124: ST_TO_ADDR
// hardcore :=  ;
25125: LD_ADDR_VAR 0 6
25129: PUSH
25130: LD_STRING 
25132: ST_TO_ADDR
// active :=  ;
25133: LD_ADDR_VAR 0 7
25137: PUSH
25138: LD_STRING 
25140: ST_TO_ADDR
// for i = 1 to normalCounter do
25141: LD_ADDR_VAR 0 8
25145: PUSH
25146: DOUBLE
25147: LD_INT 1
25149: DEC
25150: ST_TO_ADDR
25151: LD_EXP 62
25155: PUSH
25156: FOR_TO
25157: IFFALSE 25258
// begin tmp := 0 ;
25159: LD_ADDR_VAR 0 3
25163: PUSH
25164: LD_STRING 0
25166: ST_TO_ADDR
// if result [ 1 ] then
25167: LD_VAR 0 2
25171: PUSH
25172: LD_INT 1
25174: ARRAY
25175: IFFALSE 25240
// if result [ 1 ] [ 1 ] = i then
25177: LD_VAR 0 2
25181: PUSH
25182: LD_INT 1
25184: ARRAY
25185: PUSH
25186: LD_INT 1
25188: ARRAY
25189: PUSH
25190: LD_VAR 0 8
25194: EQUAL
25195: IFFALSE 25240
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25197: LD_ADDR_VAR 0 2
25201: PUSH
25202: LD_VAR 0 2
25206: PPUSH
25207: LD_INT 1
25209: PPUSH
25210: LD_VAR 0 2
25214: PUSH
25215: LD_INT 1
25217: ARRAY
25218: PPUSH
25219: LD_INT 1
25221: PPUSH
25222: CALL_OW 3
25226: PPUSH
25227: CALL_OW 1
25231: ST_TO_ADDR
// tmp := 1 ;
25232: LD_ADDR_VAR 0 3
25236: PUSH
25237: LD_STRING 1
25239: ST_TO_ADDR
// end ; normal := normal & tmp ;
25240: LD_ADDR_VAR 0 5
25244: PUSH
25245: LD_VAR 0 5
25249: PUSH
25250: LD_VAR 0 3
25254: STR
25255: ST_TO_ADDR
// end ;
25256: GO 25156
25258: POP
25259: POP
// for i = 1 to hardcoreCounter do
25260: LD_ADDR_VAR 0 8
25264: PUSH
25265: DOUBLE
25266: LD_INT 1
25268: DEC
25269: ST_TO_ADDR
25270: LD_EXP 63
25274: PUSH
25275: FOR_TO
25276: IFFALSE 25381
// begin tmp := 0 ;
25278: LD_ADDR_VAR 0 3
25282: PUSH
25283: LD_STRING 0
25285: ST_TO_ADDR
// if result [ 2 ] then
25286: LD_VAR 0 2
25290: PUSH
25291: LD_INT 2
25293: ARRAY
25294: IFFALSE 25363
// if result [ 2 ] [ 1 ] = 100 + i then
25296: LD_VAR 0 2
25300: PUSH
25301: LD_INT 2
25303: ARRAY
25304: PUSH
25305: LD_INT 1
25307: ARRAY
25308: PUSH
25309: LD_INT 100
25311: PUSH
25312: LD_VAR 0 8
25316: PLUS
25317: EQUAL
25318: IFFALSE 25363
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25320: LD_ADDR_VAR 0 2
25324: PUSH
25325: LD_VAR 0 2
25329: PPUSH
25330: LD_INT 2
25332: PPUSH
25333: LD_VAR 0 2
25337: PUSH
25338: LD_INT 2
25340: ARRAY
25341: PPUSH
25342: LD_INT 1
25344: PPUSH
25345: CALL_OW 3
25349: PPUSH
25350: CALL_OW 1
25354: ST_TO_ADDR
// tmp := 1 ;
25355: LD_ADDR_VAR 0 3
25359: PUSH
25360: LD_STRING 1
25362: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25363: LD_ADDR_VAR 0 6
25367: PUSH
25368: LD_VAR 0 6
25372: PUSH
25373: LD_VAR 0 3
25377: STR
25378: ST_TO_ADDR
// end ;
25379: GO 25275
25381: POP
25382: POP
// if isGameLoad then
25383: LD_VAR 0 1
25387: IFFALSE 25862
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25389: LD_ADDR_VAR 0 4
25393: PUSH
25394: LD_EXP 66
25398: PUSH
25399: LD_EXP 65
25403: PUSH
25404: LD_EXP 67
25408: PUSH
25409: LD_EXP 64
25413: PUSH
25414: LD_EXP 68
25418: PUSH
25419: LD_EXP 69
25423: PUSH
25424: LD_EXP 70
25428: PUSH
25429: LD_EXP 71
25433: PUSH
25434: LD_EXP 72
25438: PUSH
25439: LD_EXP 73
25443: PUSH
25444: LD_EXP 74
25448: PUSH
25449: LD_EXP 75
25453: PUSH
25454: LD_EXP 76
25458: PUSH
25459: LD_EXP 77
25463: PUSH
25464: LD_EXP 85
25468: PUSH
25469: LD_EXP 86
25473: PUSH
25474: LD_EXP 87
25478: PUSH
25479: LD_EXP 88
25483: PUSH
25484: LD_EXP 90
25488: PUSH
25489: LD_EXP 91
25493: PUSH
25494: LD_EXP 92
25498: PUSH
25499: LD_EXP 95
25503: PUSH
25504: LD_EXP 97
25508: PUSH
25509: LD_EXP 98
25513: PUSH
25514: LD_EXP 99
25518: PUSH
25519: LD_EXP 101
25523: PUSH
25524: LD_EXP 102
25528: PUSH
25529: LD_EXP 105
25533: PUSH
25534: LD_EXP 106
25538: PUSH
25539: LD_EXP 107
25543: PUSH
25544: LD_EXP 108
25548: PUSH
25549: LD_EXP 109
25553: PUSH
25554: LD_EXP 110
25558: PUSH
25559: LD_EXP 111
25563: PUSH
25564: LD_EXP 112
25568: PUSH
25569: LD_EXP 113
25573: PUSH
25574: LD_EXP 78
25578: PUSH
25579: LD_EXP 79
25583: PUSH
25584: LD_EXP 82
25588: PUSH
25589: LD_EXP 83
25593: PUSH
25594: LD_EXP 84
25598: PUSH
25599: LD_EXP 80
25603: PUSH
25604: LD_EXP 81
25608: PUSH
25609: LD_EXP 89
25613: PUSH
25614: LD_EXP 93
25618: PUSH
25619: LD_EXP 94
25623: PUSH
25624: LD_EXP 96
25628: PUSH
25629: LD_EXP 100
25633: PUSH
25634: LD_EXP 103
25638: PUSH
25639: LD_EXP 104
25643: PUSH
25644: LD_EXP 114
25648: PUSH
25649: LD_EXP 115
25653: PUSH
25654: LD_EXP 116
25658: PUSH
25659: LD_EXP 117
25663: PUSH
25664: EMPTY
25665: LIST
25666: LIST
25667: LIST
25668: LIST
25669: LIST
25670: LIST
25671: LIST
25672: LIST
25673: LIST
25674: LIST
25675: LIST
25676: LIST
25677: LIST
25678: LIST
25679: LIST
25680: LIST
25681: LIST
25682: LIST
25683: LIST
25684: LIST
25685: LIST
25686: LIST
25687: LIST
25688: LIST
25689: LIST
25690: LIST
25691: LIST
25692: LIST
25693: LIST
25694: LIST
25695: LIST
25696: LIST
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: LIST
25704: LIST
25705: LIST
25706: LIST
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: LIST
25713: LIST
25714: LIST
25715: LIST
25716: LIST
25717: LIST
25718: LIST
25719: ST_TO_ADDR
// tmp :=  ;
25720: LD_ADDR_VAR 0 3
25724: PUSH
25725: LD_STRING 
25727: ST_TO_ADDR
// for i = 1 to normalCounter do
25728: LD_ADDR_VAR 0 8
25732: PUSH
25733: DOUBLE
25734: LD_INT 1
25736: DEC
25737: ST_TO_ADDR
25738: LD_EXP 62
25742: PUSH
25743: FOR_TO
25744: IFFALSE 25780
// begin if flags [ i ] then
25746: LD_VAR 0 4
25750: PUSH
25751: LD_VAR 0 8
25755: ARRAY
25756: IFFALSE 25778
// tmp := tmp & i & ; ;
25758: LD_ADDR_VAR 0 3
25762: PUSH
25763: LD_VAR 0 3
25767: PUSH
25768: LD_VAR 0 8
25772: STR
25773: PUSH
25774: LD_STRING ;
25776: STR
25777: ST_TO_ADDR
// end ;
25778: GO 25743
25780: POP
25781: POP
// for i = 1 to hardcoreCounter do
25782: LD_ADDR_VAR 0 8
25786: PUSH
25787: DOUBLE
25788: LD_INT 1
25790: DEC
25791: ST_TO_ADDR
25792: LD_EXP 63
25796: PUSH
25797: FOR_TO
25798: IFFALSE 25844
// begin if flags [ normalCounter + i ] then
25800: LD_VAR 0 4
25804: PUSH
25805: LD_EXP 62
25809: PUSH
25810: LD_VAR 0 8
25814: PLUS
25815: ARRAY
25816: IFFALSE 25842
// tmp := tmp & ( 100 + i ) & ; ;
25818: LD_ADDR_VAR 0 3
25822: PUSH
25823: LD_VAR 0 3
25827: PUSH
25828: LD_INT 100
25830: PUSH
25831: LD_VAR 0 8
25835: PLUS
25836: STR
25837: PUSH
25838: LD_STRING ;
25840: STR
25841: ST_TO_ADDR
// end ;
25842: GO 25797
25844: POP
25845: POP
// if tmp then
25846: LD_VAR 0 3
25850: IFFALSE 25862
// active := tmp ;
25852: LD_ADDR_VAR 0 7
25856: PUSH
25857: LD_VAR 0 3
25861: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25862: LD_STRING getStreamItemsFromMission("
25864: PUSH
25865: LD_VAR 0 5
25869: STR
25870: PUSH
25871: LD_STRING ","
25873: STR
25874: PUSH
25875: LD_VAR 0 6
25879: STR
25880: PUSH
25881: LD_STRING ","
25883: STR
25884: PUSH
25885: LD_VAR 0 7
25889: STR
25890: PUSH
25891: LD_STRING ")
25893: STR
25894: PPUSH
25895: CALL_OW 559
// end else
25899: GO 25908
// ToLua ( getStreamItemsFromMission("","","") ) ;
25901: LD_STRING getStreamItemsFromMission("","","")
25903: PPUSH
25904: CALL_OW 559
// end ;
25908: LD_VAR 0 2
25912: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25913: LD_EXP 61
25917: IFFALSE 25925
25919: PUSH
25920: LD_EXP 66
25924: AND
25925: IFFALSE 26049
25927: GO 25929
25929: DISABLE
25930: LD_INT 0
25932: PPUSH
25933: PPUSH
// begin enable ;
25934: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25935: LD_ADDR_VAR 0 2
25939: PUSH
25940: LD_INT 22
25942: PUSH
25943: LD_OWVAR 2
25947: PUSH
25948: EMPTY
25949: LIST
25950: LIST
25951: PUSH
25952: LD_INT 2
25954: PUSH
25955: LD_INT 34
25957: PUSH
25958: LD_INT 7
25960: PUSH
25961: EMPTY
25962: LIST
25963: LIST
25964: PUSH
25965: LD_INT 34
25967: PUSH
25968: LD_INT 45
25970: PUSH
25971: EMPTY
25972: LIST
25973: LIST
25974: PUSH
25975: LD_INT 34
25977: PUSH
25978: LD_INT 28
25980: PUSH
25981: EMPTY
25982: LIST
25983: LIST
25984: PUSH
25985: LD_INT 34
25987: PUSH
25988: LD_INT 47
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: PUSH
25995: EMPTY
25996: LIST
25997: LIST
25998: LIST
25999: LIST
26000: LIST
26001: PUSH
26002: EMPTY
26003: LIST
26004: LIST
26005: PPUSH
26006: CALL_OW 69
26010: ST_TO_ADDR
// if not tmp then
26011: LD_VAR 0 2
26015: NOT
26016: IFFALSE 26020
// exit ;
26018: GO 26049
// for i in tmp do
26020: LD_ADDR_VAR 0 1
26024: PUSH
26025: LD_VAR 0 2
26029: PUSH
26030: FOR_IN
26031: IFFALSE 26047
// begin SetLives ( i , 0 ) ;
26033: LD_VAR 0 1
26037: PPUSH
26038: LD_INT 0
26040: PPUSH
26041: CALL_OW 234
// end ;
26045: GO 26030
26047: POP
26048: POP
// end ;
26049: PPOPN 2
26051: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
26052: LD_EXP 61
26056: IFFALSE 26064
26058: PUSH
26059: LD_EXP 67
26063: AND
26064: IFFALSE 26148
26066: GO 26068
26068: DISABLE
26069: LD_INT 0
26071: PPUSH
26072: PPUSH
// begin enable ;
26073: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
26074: LD_ADDR_VAR 0 2
26078: PUSH
26079: LD_INT 22
26081: PUSH
26082: LD_OWVAR 2
26086: PUSH
26087: EMPTY
26088: LIST
26089: LIST
26090: PUSH
26091: LD_INT 32
26093: PUSH
26094: LD_INT 3
26096: PUSH
26097: EMPTY
26098: LIST
26099: LIST
26100: PUSH
26101: EMPTY
26102: LIST
26103: LIST
26104: PPUSH
26105: CALL_OW 69
26109: ST_TO_ADDR
// if not tmp then
26110: LD_VAR 0 2
26114: NOT
26115: IFFALSE 26119
// exit ;
26117: GO 26148
// for i in tmp do
26119: LD_ADDR_VAR 0 1
26123: PUSH
26124: LD_VAR 0 2
26128: PUSH
26129: FOR_IN
26130: IFFALSE 26146
// begin SetLives ( i , 0 ) ;
26132: LD_VAR 0 1
26136: PPUSH
26137: LD_INT 0
26139: PPUSH
26140: CALL_OW 234
// end ;
26144: GO 26129
26146: POP
26147: POP
// end ;
26148: PPOPN 2
26150: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26151: LD_EXP 61
26155: IFFALSE 26163
26157: PUSH
26158: LD_EXP 64
26162: AND
26163: IFFALSE 26256
26165: GO 26167
26167: DISABLE
26168: LD_INT 0
26170: PPUSH
// begin enable ;
26171: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26172: LD_ADDR_VAR 0 1
26176: PUSH
26177: LD_INT 22
26179: PUSH
26180: LD_OWVAR 2
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: PUSH
26189: LD_INT 2
26191: PUSH
26192: LD_INT 25
26194: PUSH
26195: LD_INT 5
26197: PUSH
26198: EMPTY
26199: LIST
26200: LIST
26201: PUSH
26202: LD_INT 25
26204: PUSH
26205: LD_INT 9
26207: PUSH
26208: EMPTY
26209: LIST
26210: LIST
26211: PUSH
26212: LD_INT 25
26214: PUSH
26215: LD_INT 8
26217: PUSH
26218: EMPTY
26219: LIST
26220: LIST
26221: PUSH
26222: EMPTY
26223: LIST
26224: LIST
26225: LIST
26226: LIST
26227: PUSH
26228: EMPTY
26229: LIST
26230: LIST
26231: PPUSH
26232: CALL_OW 69
26236: PUSH
26237: FOR_IN
26238: IFFALSE 26254
// begin SetClass ( i , 1 ) ;
26240: LD_VAR 0 1
26244: PPUSH
26245: LD_INT 1
26247: PPUSH
26248: CALL_OW 336
// end ;
26252: GO 26237
26254: POP
26255: POP
// end ;
26256: PPOPN 1
26258: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26259: LD_EXP 61
26263: IFFALSE 26271
26265: PUSH
26266: LD_EXP 65
26270: AND
26271: IFFALSE 26283
26273: PUSH
26274: LD_OWVAR 65
26278: PUSH
26279: LD_INT 7
26281: LESS
26282: AND
26283: IFFALSE 26297
26285: GO 26287
26287: DISABLE
// begin enable ;
26288: ENABLE
// game_speed := 7 ;
26289: LD_ADDR_OWVAR 65
26293: PUSH
26294: LD_INT 7
26296: ST_TO_ADDR
// end ;
26297: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26298: LD_EXP 61
26302: IFFALSE 26310
26304: PUSH
26305: LD_EXP 68
26309: AND
26310: IFFALSE 26512
26312: GO 26314
26314: DISABLE
26315: LD_INT 0
26317: PPUSH
26318: PPUSH
26319: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26320: LD_ADDR_VAR 0 3
26324: PUSH
26325: LD_INT 81
26327: PUSH
26328: LD_OWVAR 2
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: PUSH
26337: LD_INT 21
26339: PUSH
26340: LD_INT 1
26342: PUSH
26343: EMPTY
26344: LIST
26345: LIST
26346: PUSH
26347: EMPTY
26348: LIST
26349: LIST
26350: PPUSH
26351: CALL_OW 69
26355: ST_TO_ADDR
// if not tmp then
26356: LD_VAR 0 3
26360: NOT
26361: IFFALSE 26365
// exit ;
26363: GO 26512
// if tmp > 5 then
26365: LD_VAR 0 3
26369: PUSH
26370: LD_INT 5
26372: GREATER
26373: IFFALSE 26385
// k := 5 else
26375: LD_ADDR_VAR 0 2
26379: PUSH
26380: LD_INT 5
26382: ST_TO_ADDR
26383: GO 26395
// k := tmp ;
26385: LD_ADDR_VAR 0 2
26389: PUSH
26390: LD_VAR 0 3
26394: ST_TO_ADDR
// for i := 1 to k do
26395: LD_ADDR_VAR 0 1
26399: PUSH
26400: DOUBLE
26401: LD_INT 1
26403: DEC
26404: ST_TO_ADDR
26405: LD_VAR 0 2
26409: PUSH
26410: FOR_TO
26411: IFFALSE 26510
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26413: LD_VAR 0 3
26417: PUSH
26418: LD_VAR 0 1
26422: ARRAY
26423: PPUSH
26424: LD_VAR 0 1
26428: PUSH
26429: LD_INT 4
26431: MOD
26432: PUSH
26433: LD_INT 1
26435: PLUS
26436: PPUSH
26437: CALL_OW 259
26441: PUSH
26442: LD_INT 10
26444: LESS
26445: IFFALSE 26508
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26447: LD_VAR 0 3
26451: PUSH
26452: LD_VAR 0 1
26456: ARRAY
26457: PPUSH
26458: LD_VAR 0 1
26462: PUSH
26463: LD_INT 4
26465: MOD
26466: PUSH
26467: LD_INT 1
26469: PLUS
26470: PPUSH
26471: LD_VAR 0 3
26475: PUSH
26476: LD_VAR 0 1
26480: ARRAY
26481: PPUSH
26482: LD_VAR 0 1
26486: PUSH
26487: LD_INT 4
26489: MOD
26490: PUSH
26491: LD_INT 1
26493: PLUS
26494: PPUSH
26495: CALL_OW 259
26499: PUSH
26500: LD_INT 1
26502: PLUS
26503: PPUSH
26504: CALL_OW 237
26508: GO 26410
26510: POP
26511: POP
// end ;
26512: PPOPN 3
26514: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26515: LD_EXP 61
26519: IFFALSE 26527
26521: PUSH
26522: LD_EXP 69
26526: AND
26527: IFFALSE 26547
26529: GO 26531
26531: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26532: LD_INT 4
26534: PPUSH
26535: LD_OWVAR 2
26539: PPUSH
26540: LD_INT 0
26542: PPUSH
26543: CALL_OW 324
26547: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26548: LD_EXP 61
26552: IFFALSE 26560
26554: PUSH
26555: LD_EXP 98
26559: AND
26560: IFFALSE 26580
26562: GO 26564
26564: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26565: LD_INT 19
26567: PPUSH
26568: LD_OWVAR 2
26572: PPUSH
26573: LD_INT 0
26575: PPUSH
26576: CALL_OW 324
26580: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26581: LD_EXP 61
26585: IFFALSE 26593
26587: PUSH
26588: LD_EXP 70
26592: AND
26593: IFFALSE 26695
26595: GO 26597
26597: DISABLE
26598: LD_INT 0
26600: PPUSH
26601: PPUSH
// begin enable ;
26602: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26603: LD_ADDR_VAR 0 2
26607: PUSH
26608: LD_INT 22
26610: PUSH
26611: LD_OWVAR 2
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: PUSH
26620: LD_INT 2
26622: PUSH
26623: LD_INT 34
26625: PUSH
26626: LD_INT 11
26628: PUSH
26629: EMPTY
26630: LIST
26631: LIST
26632: PUSH
26633: LD_INT 34
26635: PUSH
26636: LD_INT 30
26638: PUSH
26639: EMPTY
26640: LIST
26641: LIST
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: LIST
26647: PUSH
26648: EMPTY
26649: LIST
26650: LIST
26651: PPUSH
26652: CALL_OW 69
26656: ST_TO_ADDR
// if not tmp then
26657: LD_VAR 0 2
26661: NOT
26662: IFFALSE 26666
// exit ;
26664: GO 26695
// for i in tmp do
26666: LD_ADDR_VAR 0 1
26670: PUSH
26671: LD_VAR 0 2
26675: PUSH
26676: FOR_IN
26677: IFFALSE 26693
// begin SetLives ( i , 0 ) ;
26679: LD_VAR 0 1
26683: PPUSH
26684: LD_INT 0
26686: PPUSH
26687: CALL_OW 234
// end ;
26691: GO 26676
26693: POP
26694: POP
// end ;
26695: PPOPN 2
26697: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26698: LD_EXP 61
26702: IFFALSE 26710
26704: PUSH
26705: LD_EXP 71
26709: AND
26710: IFFALSE 26730
26712: GO 26714
26714: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26715: LD_INT 32
26717: PPUSH
26718: LD_OWVAR 2
26722: PPUSH
26723: LD_INT 0
26725: PPUSH
26726: CALL_OW 324
26730: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26731: LD_EXP 61
26735: IFFALSE 26743
26737: PUSH
26738: LD_EXP 72
26742: AND
26743: IFFALSE 26926
26745: GO 26747
26747: DISABLE
26748: LD_INT 0
26750: PPUSH
26751: PPUSH
26752: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26753: LD_ADDR_VAR 0 2
26757: PUSH
26758: LD_INT 22
26760: PUSH
26761: LD_OWVAR 2
26765: PUSH
26766: EMPTY
26767: LIST
26768: LIST
26769: PUSH
26770: LD_INT 33
26772: PUSH
26773: LD_INT 3
26775: PUSH
26776: EMPTY
26777: LIST
26778: LIST
26779: PUSH
26780: EMPTY
26781: LIST
26782: LIST
26783: PPUSH
26784: CALL_OW 69
26788: ST_TO_ADDR
// if not tmp then
26789: LD_VAR 0 2
26793: NOT
26794: IFFALSE 26798
// exit ;
26796: GO 26926
// side := 0 ;
26798: LD_ADDR_VAR 0 3
26802: PUSH
26803: LD_INT 0
26805: ST_TO_ADDR
// for i := 1 to 8 do
26806: LD_ADDR_VAR 0 1
26810: PUSH
26811: DOUBLE
26812: LD_INT 1
26814: DEC
26815: ST_TO_ADDR
26816: LD_INT 8
26818: PUSH
26819: FOR_TO
26820: IFFALSE 26870
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26822: LD_OWVAR 2
26826: PUSH
26827: LD_VAR 0 1
26831: NONEQUAL
26832: IFFALSE 26854
26834: PUSH
26835: LD_OWVAR 2
26839: PPUSH
26840: LD_VAR 0 1
26844: PPUSH
26845: CALL_OW 81
26849: PUSH
26850: LD_INT 2
26852: EQUAL
26853: AND
26854: IFFALSE 26868
// begin side := i ;
26856: LD_ADDR_VAR 0 3
26860: PUSH
26861: LD_VAR 0 1
26865: ST_TO_ADDR
// break ;
26866: GO 26870
// end ;
26868: GO 26819
26870: POP
26871: POP
// if not side then
26872: LD_VAR 0 3
26876: NOT
26877: IFFALSE 26881
// exit ;
26879: GO 26926
// for i := 1 to tmp do
26881: LD_ADDR_VAR 0 1
26885: PUSH
26886: DOUBLE
26887: LD_INT 1
26889: DEC
26890: ST_TO_ADDR
26891: LD_VAR 0 2
26895: PUSH
26896: FOR_TO
26897: IFFALSE 26924
// if Prob ( 60 ) then
26899: LD_INT 60
26901: PPUSH
26902: CALL_OW 13
26906: IFFALSE 26922
// SetSide ( i , side ) ;
26908: LD_VAR 0 1
26912: PPUSH
26913: LD_VAR 0 3
26917: PPUSH
26918: CALL_OW 235
26922: GO 26896
26924: POP
26925: POP
// end ;
26926: PPOPN 3
26928: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26929: LD_EXP 61
26933: IFFALSE 26941
26935: PUSH
26936: LD_EXP 74
26940: AND
26941: IFFALSE 27060
26943: GO 26945
26945: DISABLE
26946: LD_INT 0
26948: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26949: LD_ADDR_VAR 0 1
26953: PUSH
26954: LD_INT 22
26956: PUSH
26957: LD_OWVAR 2
26961: PUSH
26962: EMPTY
26963: LIST
26964: LIST
26965: PUSH
26966: LD_INT 21
26968: PUSH
26969: LD_INT 1
26971: PUSH
26972: EMPTY
26973: LIST
26974: LIST
26975: PUSH
26976: LD_INT 3
26978: PUSH
26979: LD_INT 23
26981: PUSH
26982: LD_INT 0
26984: PUSH
26985: EMPTY
26986: LIST
26987: LIST
26988: PUSH
26989: EMPTY
26990: LIST
26991: LIST
26992: PUSH
26993: EMPTY
26994: LIST
26995: LIST
26996: LIST
26997: PPUSH
26998: CALL_OW 69
27002: PUSH
27003: FOR_IN
27004: IFFALSE 27058
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
27006: LD_VAR 0 1
27010: PPUSH
27011: CALL_OW 257
27015: PUSH
27016: LD_INT 1
27018: PUSH
27019: LD_INT 2
27021: PUSH
27022: LD_INT 3
27024: PUSH
27025: LD_INT 4
27027: PUSH
27028: EMPTY
27029: LIST
27030: LIST
27031: LIST
27032: LIST
27033: IN
27034: IFFALSE 27056
// SetClass ( un , rand ( 1 , 4 ) ) ;
27036: LD_VAR 0 1
27040: PPUSH
27041: LD_INT 1
27043: PPUSH
27044: LD_INT 4
27046: PPUSH
27047: CALL_OW 12
27051: PPUSH
27052: CALL_OW 336
27056: GO 27003
27058: POP
27059: POP
// end ;
27060: PPOPN 1
27062: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
27063: LD_EXP 61
27067: IFFALSE 27075
27069: PUSH
27070: LD_EXP 73
27074: AND
27075: IFFALSE 27154
27077: GO 27079
27079: DISABLE
27080: LD_INT 0
27082: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27083: LD_ADDR_VAR 0 1
27087: PUSH
27088: LD_INT 22
27090: PUSH
27091: LD_OWVAR 2
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: PUSH
27100: LD_INT 21
27102: PUSH
27103: LD_INT 3
27105: PUSH
27106: EMPTY
27107: LIST
27108: LIST
27109: PUSH
27110: EMPTY
27111: LIST
27112: LIST
27113: PPUSH
27114: CALL_OW 69
27118: ST_TO_ADDR
// if not tmp then
27119: LD_VAR 0 1
27123: NOT
27124: IFFALSE 27128
// exit ;
27126: GO 27154
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
27128: LD_VAR 0 1
27132: PUSH
27133: LD_INT 1
27135: PPUSH
27136: LD_VAR 0 1
27140: PPUSH
27141: CALL_OW 12
27145: ARRAY
27146: PPUSH
27147: LD_INT 100
27149: PPUSH
27150: CALL_OW 234
// end ;
27154: PPOPN 1
27156: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27157: LD_EXP 61
27161: IFFALSE 27169
27163: PUSH
27164: LD_EXP 75
27168: AND
27169: IFFALSE 27267
27171: GO 27173
27173: DISABLE
27174: LD_INT 0
27176: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27177: LD_ADDR_VAR 0 1
27181: PUSH
27182: LD_INT 22
27184: PUSH
27185: LD_OWVAR 2
27189: PUSH
27190: EMPTY
27191: LIST
27192: LIST
27193: PUSH
27194: LD_INT 21
27196: PUSH
27197: LD_INT 1
27199: PUSH
27200: EMPTY
27201: LIST
27202: LIST
27203: PUSH
27204: EMPTY
27205: LIST
27206: LIST
27207: PPUSH
27208: CALL_OW 69
27212: ST_TO_ADDR
// if not tmp then
27213: LD_VAR 0 1
27217: NOT
27218: IFFALSE 27222
// exit ;
27220: GO 27267
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27222: LD_VAR 0 1
27226: PUSH
27227: LD_INT 1
27229: PPUSH
27230: LD_VAR 0 1
27234: PPUSH
27235: CALL_OW 12
27239: ARRAY
27240: PPUSH
27241: LD_INT 1
27243: PPUSH
27244: LD_INT 4
27246: PPUSH
27247: CALL_OW 12
27251: PPUSH
27252: LD_INT 3000
27254: PPUSH
27255: LD_INT 9000
27257: PPUSH
27258: CALL_OW 12
27262: PPUSH
27263: CALL_OW 492
// end ;
27267: PPOPN 1
27269: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27270: LD_EXP 61
27274: IFFALSE 27282
27276: PUSH
27277: LD_EXP 76
27281: AND
27282: IFFALSE 27302
27284: GO 27286
27286: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27287: LD_INT 1
27289: PPUSH
27290: LD_OWVAR 2
27294: PPUSH
27295: LD_INT 0
27297: PPUSH
27298: CALL_OW 324
27302: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27303: LD_EXP 61
27307: IFFALSE 27315
27309: PUSH
27310: LD_EXP 77
27314: AND
27315: IFFALSE 27398
27317: GO 27319
27319: DISABLE
27320: LD_INT 0
27322: PPUSH
27323: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27324: LD_ADDR_VAR 0 2
27328: PUSH
27329: LD_INT 22
27331: PUSH
27332: LD_OWVAR 2
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: PUSH
27341: LD_INT 21
27343: PUSH
27344: LD_INT 3
27346: PUSH
27347: EMPTY
27348: LIST
27349: LIST
27350: PUSH
27351: EMPTY
27352: LIST
27353: LIST
27354: PPUSH
27355: CALL_OW 69
27359: ST_TO_ADDR
// if not tmp then
27360: LD_VAR 0 2
27364: NOT
27365: IFFALSE 27369
// exit ;
27367: GO 27398
// for i in tmp do
27369: LD_ADDR_VAR 0 1
27373: PUSH
27374: LD_VAR 0 2
27378: PUSH
27379: FOR_IN
27380: IFFALSE 27396
// SetBLevel ( i , 10 ) ;
27382: LD_VAR 0 1
27386: PPUSH
27387: LD_INT 10
27389: PPUSH
27390: CALL_OW 241
27394: GO 27379
27396: POP
27397: POP
// end ;
27398: PPOPN 2
27400: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27401: LD_EXP 61
27405: IFFALSE 27413
27407: PUSH
27408: LD_EXP 78
27412: AND
27413: IFFALSE 27524
27415: GO 27417
27417: DISABLE
27418: LD_INT 0
27420: PPUSH
27421: PPUSH
27422: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27423: LD_ADDR_VAR 0 3
27427: PUSH
27428: LD_INT 22
27430: PUSH
27431: LD_OWVAR 2
27435: PUSH
27436: EMPTY
27437: LIST
27438: LIST
27439: PUSH
27440: LD_INT 25
27442: PUSH
27443: LD_INT 1
27445: PUSH
27446: EMPTY
27447: LIST
27448: LIST
27449: PUSH
27450: EMPTY
27451: LIST
27452: LIST
27453: PPUSH
27454: CALL_OW 69
27458: ST_TO_ADDR
// if not tmp then
27459: LD_VAR 0 3
27463: NOT
27464: IFFALSE 27468
// exit ;
27466: GO 27524
// un := tmp [ rand ( 1 , tmp ) ] ;
27468: LD_ADDR_VAR 0 2
27472: PUSH
27473: LD_VAR 0 3
27477: PUSH
27478: LD_INT 1
27480: PPUSH
27481: LD_VAR 0 3
27485: PPUSH
27486: CALL_OW 12
27490: ARRAY
27491: ST_TO_ADDR
// if Crawls ( un ) then
27492: LD_VAR 0 2
27496: PPUSH
27497: CALL_OW 318
27501: IFFALSE 27512
// ComWalk ( un ) ;
27503: LD_VAR 0 2
27507: PPUSH
27508: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27512: LD_VAR 0 2
27516: PPUSH
27517: LD_INT 5
27519: PPUSH
27520: CALL_OW 336
// end ;
27524: PPOPN 3
27526: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27527: LD_EXP 61
27531: IFFALSE 27539
27533: PUSH
27534: LD_EXP 79
27538: AND
27539: IFFALSE 27551
27541: PUSH
27542: LD_OWVAR 67
27546: PUSH
27547: LD_INT 4
27549: LESS
27550: AND
27551: IFFALSE 27570
27553: GO 27555
27555: DISABLE
// begin Difficulty := Difficulty + 1 ;
27556: LD_ADDR_OWVAR 67
27560: PUSH
27561: LD_OWVAR 67
27565: PUSH
27566: LD_INT 1
27568: PLUS
27569: ST_TO_ADDR
// end ;
27570: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27571: LD_EXP 61
27575: IFFALSE 27583
27577: PUSH
27578: LD_EXP 80
27582: AND
27583: IFFALSE 27686
27585: GO 27587
27587: DISABLE
27588: LD_INT 0
27590: PPUSH
// begin for i := 1 to 5 do
27591: LD_ADDR_VAR 0 1
27595: PUSH
27596: DOUBLE
27597: LD_INT 1
27599: DEC
27600: ST_TO_ADDR
27601: LD_INT 5
27603: PUSH
27604: FOR_TO
27605: IFFALSE 27684
// begin uc_nation := nation_nature ;
27607: LD_ADDR_OWVAR 21
27611: PUSH
27612: LD_INT 0
27614: ST_TO_ADDR
// uc_side := 0 ;
27615: LD_ADDR_OWVAR 20
27619: PUSH
27620: LD_INT 0
27622: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27623: LD_ADDR_OWVAR 29
27627: PUSH
27628: LD_INT 12
27630: PUSH
27631: LD_INT 12
27633: PUSH
27634: EMPTY
27635: LIST
27636: LIST
27637: ST_TO_ADDR
// hc_agressivity := 20 ;
27638: LD_ADDR_OWVAR 35
27642: PUSH
27643: LD_INT 20
27645: ST_TO_ADDR
// hc_class := class_tiger ;
27646: LD_ADDR_OWVAR 28
27650: PUSH
27651: LD_INT 14
27653: ST_TO_ADDR
// hc_gallery :=  ;
27654: LD_ADDR_OWVAR 33
27658: PUSH
27659: LD_STRING 
27661: ST_TO_ADDR
// hc_name :=  ;
27662: LD_ADDR_OWVAR 26
27666: PUSH
27667: LD_STRING 
27669: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27670: CALL_OW 44
27674: PPUSH
27675: LD_INT 0
27677: PPUSH
27678: CALL_OW 51
// end ;
27682: GO 27604
27684: POP
27685: POP
// end ;
27686: PPOPN 1
27688: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27689: LD_EXP 61
27693: IFFALSE 27701
27695: PUSH
27696: LD_EXP 81
27700: AND
27701: IFFALSE 27710
27703: GO 27705
27705: DISABLE
// StreamSibBomb ;
27706: CALL 27711 0 0
27710: END
// export function StreamSibBomb ; var i , x , y ; begin
27711: LD_INT 0
27713: PPUSH
27714: PPUSH
27715: PPUSH
27716: PPUSH
// result := false ;
27717: LD_ADDR_VAR 0 1
27721: PUSH
27722: LD_INT 0
27724: ST_TO_ADDR
// for i := 1 to 16 do
27725: LD_ADDR_VAR 0 2
27729: PUSH
27730: DOUBLE
27731: LD_INT 1
27733: DEC
27734: ST_TO_ADDR
27735: LD_INT 16
27737: PUSH
27738: FOR_TO
27739: IFFALSE 27938
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27741: LD_ADDR_VAR 0 3
27745: PUSH
27746: LD_INT 10
27748: PUSH
27749: LD_INT 20
27751: PUSH
27752: LD_INT 30
27754: PUSH
27755: LD_INT 40
27757: PUSH
27758: LD_INT 50
27760: PUSH
27761: LD_INT 60
27763: PUSH
27764: LD_INT 70
27766: PUSH
27767: LD_INT 80
27769: PUSH
27770: LD_INT 90
27772: PUSH
27773: LD_INT 100
27775: PUSH
27776: LD_INT 110
27778: PUSH
27779: LD_INT 120
27781: PUSH
27782: LD_INT 130
27784: PUSH
27785: LD_INT 140
27787: PUSH
27788: LD_INT 150
27790: PUSH
27791: EMPTY
27792: LIST
27793: LIST
27794: LIST
27795: LIST
27796: LIST
27797: LIST
27798: LIST
27799: LIST
27800: LIST
27801: LIST
27802: LIST
27803: LIST
27804: LIST
27805: LIST
27806: LIST
27807: PUSH
27808: LD_INT 1
27810: PPUSH
27811: LD_INT 15
27813: PPUSH
27814: CALL_OW 12
27818: ARRAY
27819: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27820: LD_ADDR_VAR 0 4
27824: PUSH
27825: LD_INT 10
27827: PUSH
27828: LD_INT 20
27830: PUSH
27831: LD_INT 30
27833: PUSH
27834: LD_INT 40
27836: PUSH
27837: LD_INT 50
27839: PUSH
27840: LD_INT 60
27842: PUSH
27843: LD_INT 70
27845: PUSH
27846: LD_INT 80
27848: PUSH
27849: LD_INT 90
27851: PUSH
27852: LD_INT 100
27854: PUSH
27855: LD_INT 110
27857: PUSH
27858: LD_INT 120
27860: PUSH
27861: LD_INT 130
27863: PUSH
27864: LD_INT 140
27866: PUSH
27867: LD_INT 150
27869: PUSH
27870: EMPTY
27871: LIST
27872: LIST
27873: LIST
27874: LIST
27875: LIST
27876: LIST
27877: LIST
27878: LIST
27879: LIST
27880: LIST
27881: LIST
27882: LIST
27883: LIST
27884: LIST
27885: LIST
27886: PUSH
27887: LD_INT 1
27889: PPUSH
27890: LD_INT 15
27892: PPUSH
27893: CALL_OW 12
27897: ARRAY
27898: ST_TO_ADDR
// if ValidHex ( x , y ) then
27899: LD_VAR 0 3
27903: PPUSH
27904: LD_VAR 0 4
27908: PPUSH
27909: CALL_OW 488
27913: IFFALSE 27936
// begin result := [ x , y ] ;
27915: LD_ADDR_VAR 0 1
27919: PUSH
27920: LD_VAR 0 3
27924: PUSH
27925: LD_VAR 0 4
27929: PUSH
27930: EMPTY
27931: LIST
27932: LIST
27933: ST_TO_ADDR
// break ;
27934: GO 27938
// end ; end ;
27936: GO 27738
27938: POP
27939: POP
// if result then
27940: LD_VAR 0 1
27944: IFFALSE 28004
// begin ToLua ( playSibBomb() ) ;
27946: LD_STRING playSibBomb()
27948: PPUSH
27949: CALL_OW 559
// wait ( 0 0$14 ) ;
27953: LD_INT 490
27955: PPUSH
27956: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27960: LD_VAR 0 1
27964: PUSH
27965: LD_INT 1
27967: ARRAY
27968: PPUSH
27969: LD_VAR 0 1
27973: PUSH
27974: LD_INT 2
27976: ARRAY
27977: PPUSH
27978: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27982: LD_VAR 0 1
27986: PUSH
27987: LD_INT 1
27989: ARRAY
27990: PPUSH
27991: LD_VAR 0 1
27995: PUSH
27996: LD_INT 2
27998: ARRAY
27999: PPUSH
28000: CALL_OW 429
// end ; end ;
28004: LD_VAR 0 1
28008: RET
// every 0 0$1 trigger StreamModeActive and sReset do
28009: LD_EXP 61
28013: IFFALSE 28021
28015: PUSH
28016: LD_EXP 83
28020: AND
28021: IFFALSE 28033
28023: GO 28025
28025: DISABLE
// YouLost (  ) ;
28026: LD_STRING 
28028: PPUSH
28029: CALL_OW 104
28033: END
// every 0 0$1 trigger StreamModeActive and sFog do
28034: LD_EXP 61
28038: IFFALSE 28046
28040: PUSH
28041: LD_EXP 82
28045: AND
28046: IFFALSE 28060
28048: GO 28050
28050: DISABLE
// FogOff ( your_side ) ;
28051: LD_OWVAR 2
28055: PPUSH
28056: CALL_OW 344
28060: END
// every 0 0$1 trigger StreamModeActive and sSun do
28061: LD_EXP 61
28065: IFFALSE 28073
28067: PUSH
28068: LD_EXP 84
28072: AND
28073: IFFALSE 28101
28075: GO 28077
28077: DISABLE
// begin solar_recharge_percent := 0 ;
28078: LD_ADDR_OWVAR 79
28082: PUSH
28083: LD_INT 0
28085: ST_TO_ADDR
// wait ( 5 5$00 ) ;
28086: LD_INT 10500
28088: PPUSH
28089: CALL_OW 67
// solar_recharge_percent := 100 ;
28093: LD_ADDR_OWVAR 79
28097: PUSH
28098: LD_INT 100
28100: ST_TO_ADDR
// end ;
28101: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
28102: LD_EXP 61
28106: IFFALSE 28114
28108: PUSH
28109: LD_EXP 85
28113: AND
28114: IFFALSE 28353
28116: GO 28118
28118: DISABLE
28119: LD_INT 0
28121: PPUSH
28122: PPUSH
28123: PPUSH
// begin tmp := [ ] ;
28124: LD_ADDR_VAR 0 3
28128: PUSH
28129: EMPTY
28130: ST_TO_ADDR
// for i := 1 to 6 do
28131: LD_ADDR_VAR 0 1
28135: PUSH
28136: DOUBLE
28137: LD_INT 1
28139: DEC
28140: ST_TO_ADDR
28141: LD_INT 6
28143: PUSH
28144: FOR_TO
28145: IFFALSE 28250
// begin uc_nation := nation_nature ;
28147: LD_ADDR_OWVAR 21
28151: PUSH
28152: LD_INT 0
28154: ST_TO_ADDR
// uc_side := 0 ;
28155: LD_ADDR_OWVAR 20
28159: PUSH
28160: LD_INT 0
28162: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28163: LD_ADDR_OWVAR 29
28167: PUSH
28168: LD_INT 12
28170: PUSH
28171: LD_INT 12
28173: PUSH
28174: EMPTY
28175: LIST
28176: LIST
28177: ST_TO_ADDR
// hc_agressivity := 20 ;
28178: LD_ADDR_OWVAR 35
28182: PUSH
28183: LD_INT 20
28185: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28186: LD_ADDR_OWVAR 28
28190: PUSH
28191: LD_INT 17
28193: ST_TO_ADDR
// hc_gallery :=  ;
28194: LD_ADDR_OWVAR 33
28198: PUSH
28199: LD_STRING 
28201: ST_TO_ADDR
// hc_name :=  ;
28202: LD_ADDR_OWVAR 26
28206: PUSH
28207: LD_STRING 
28209: ST_TO_ADDR
// un := CreateHuman ;
28210: LD_ADDR_VAR 0 2
28214: PUSH
28215: CALL_OW 44
28219: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28220: LD_VAR 0 2
28224: PPUSH
28225: LD_INT 1
28227: PPUSH
28228: CALL_OW 51
// tmp := tmp ^ un ;
28232: LD_ADDR_VAR 0 3
28236: PUSH
28237: LD_VAR 0 3
28241: PUSH
28242: LD_VAR 0 2
28246: ADD
28247: ST_TO_ADDR
// end ;
28248: GO 28144
28250: POP
28251: POP
// repeat wait ( 0 0$1 ) ;
28252: LD_INT 35
28254: PPUSH
28255: CALL_OW 67
// for un in tmp do
28259: LD_ADDR_VAR 0 2
28263: PUSH
28264: LD_VAR 0 3
28268: PUSH
28269: FOR_IN
28270: IFFALSE 28344
// begin if IsDead ( un ) then
28272: LD_VAR 0 2
28276: PPUSH
28277: CALL_OW 301
28281: IFFALSE 28301
// begin tmp := tmp diff un ;
28283: LD_ADDR_VAR 0 3
28287: PUSH
28288: LD_VAR 0 3
28292: PUSH
28293: LD_VAR 0 2
28297: DIFF
28298: ST_TO_ADDR
// continue ;
28299: GO 28269
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28301: LD_VAR 0 2
28305: PPUSH
28306: LD_INT 3
28308: PUSH
28309: LD_INT 22
28311: PUSH
28312: LD_INT 0
28314: PUSH
28315: EMPTY
28316: LIST
28317: LIST
28318: PUSH
28319: EMPTY
28320: LIST
28321: LIST
28322: PPUSH
28323: CALL_OW 69
28327: PPUSH
28328: LD_VAR 0 2
28332: PPUSH
28333: CALL_OW 74
28337: PPUSH
28338: CALL_OW 115
// end ;
28342: GO 28269
28344: POP
28345: POP
// until not tmp ;
28346: LD_VAR 0 3
28350: NOT
28351: IFFALSE 28252
// end ;
28353: PPOPN 3
28355: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28356: LD_EXP 61
28360: IFFALSE 28368
28362: PUSH
28363: LD_EXP 86
28367: AND
28368: IFFALSE 28422
28370: GO 28372
28372: DISABLE
// begin ToLua ( displayTroll(); ) ;
28373: LD_STRING displayTroll();
28375: PPUSH
28376: CALL_OW 559
// wait ( 3 3$00 ) ;
28380: LD_INT 6300
28382: PPUSH
28383: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28387: LD_STRING hideTroll();
28389: PPUSH
28390: CALL_OW 559
// wait ( 1 1$00 ) ;
28394: LD_INT 2100
28396: PPUSH
28397: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28401: LD_STRING displayTroll();
28403: PPUSH
28404: CALL_OW 559
// wait ( 1 1$00 ) ;
28408: LD_INT 2100
28410: PPUSH
28411: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28415: LD_STRING hideTroll();
28417: PPUSH
28418: CALL_OW 559
// end ;
28422: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28423: LD_EXP 61
28427: IFFALSE 28435
28429: PUSH
28430: LD_EXP 87
28434: AND
28435: IFFALSE 28498
28437: GO 28439
28439: DISABLE
28440: LD_INT 0
28442: PPUSH
// begin p := 0 ;
28443: LD_ADDR_VAR 0 1
28447: PUSH
28448: LD_INT 0
28450: ST_TO_ADDR
// repeat game_speed := 1 ;
28451: LD_ADDR_OWVAR 65
28455: PUSH
28456: LD_INT 1
28458: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28459: LD_INT 35
28461: PPUSH
28462: CALL_OW 67
// p := p + 1 ;
28466: LD_ADDR_VAR 0 1
28470: PUSH
28471: LD_VAR 0 1
28475: PUSH
28476: LD_INT 1
28478: PLUS
28479: ST_TO_ADDR
// until p >= 60 ;
28480: LD_VAR 0 1
28484: PUSH
28485: LD_INT 60
28487: GREATEREQUAL
28488: IFFALSE 28451
// game_speed := 4 ;
28490: LD_ADDR_OWVAR 65
28494: PUSH
28495: LD_INT 4
28497: ST_TO_ADDR
// end ;
28498: PPOPN 1
28500: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28501: LD_EXP 61
28505: IFFALSE 28513
28507: PUSH
28508: LD_EXP 88
28512: AND
28513: IFFALSE 28659
28515: GO 28517
28517: DISABLE
28518: LD_INT 0
28520: PPUSH
28521: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28522: LD_ADDR_VAR 0 1
28526: PUSH
28527: LD_INT 22
28529: PUSH
28530: LD_OWVAR 2
28534: PUSH
28535: EMPTY
28536: LIST
28537: LIST
28538: PUSH
28539: LD_INT 2
28541: PUSH
28542: LD_INT 30
28544: PUSH
28545: LD_INT 0
28547: PUSH
28548: EMPTY
28549: LIST
28550: LIST
28551: PUSH
28552: LD_INT 30
28554: PUSH
28555: LD_INT 1
28557: PUSH
28558: EMPTY
28559: LIST
28560: LIST
28561: PUSH
28562: EMPTY
28563: LIST
28564: LIST
28565: LIST
28566: PUSH
28567: EMPTY
28568: LIST
28569: LIST
28570: PPUSH
28571: CALL_OW 69
28575: ST_TO_ADDR
// if not depot then
28576: LD_VAR 0 1
28580: NOT
28581: IFFALSE 28585
// exit ;
28583: GO 28659
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28585: LD_ADDR_VAR 0 2
28589: PUSH
28590: LD_VAR 0 1
28594: PUSH
28595: LD_INT 1
28597: PPUSH
28598: LD_VAR 0 1
28602: PPUSH
28603: CALL_OW 12
28607: ARRAY
28608: PPUSH
28609: CALL_OW 274
28613: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28614: LD_VAR 0 2
28618: PPUSH
28619: LD_INT 1
28621: PPUSH
28622: LD_INT 0
28624: PPUSH
28625: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28629: LD_VAR 0 2
28633: PPUSH
28634: LD_INT 2
28636: PPUSH
28637: LD_INT 0
28639: PPUSH
28640: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28644: LD_VAR 0 2
28648: PPUSH
28649: LD_INT 3
28651: PPUSH
28652: LD_INT 0
28654: PPUSH
28655: CALL_OW 277
// end ;
28659: PPOPN 2
28661: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28662: LD_EXP 61
28666: IFFALSE 28674
28668: PUSH
28669: LD_EXP 89
28673: AND
28674: IFFALSE 28771
28676: GO 28678
28678: DISABLE
28679: LD_INT 0
28681: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28682: LD_ADDR_VAR 0 1
28686: PUSH
28687: LD_INT 22
28689: PUSH
28690: LD_OWVAR 2
28694: PUSH
28695: EMPTY
28696: LIST
28697: LIST
28698: PUSH
28699: LD_INT 21
28701: PUSH
28702: LD_INT 1
28704: PUSH
28705: EMPTY
28706: LIST
28707: LIST
28708: PUSH
28709: LD_INT 3
28711: PUSH
28712: LD_INT 23
28714: PUSH
28715: LD_INT 0
28717: PUSH
28718: EMPTY
28719: LIST
28720: LIST
28721: PUSH
28722: EMPTY
28723: LIST
28724: LIST
28725: PUSH
28726: EMPTY
28727: LIST
28728: LIST
28729: LIST
28730: PPUSH
28731: CALL_OW 69
28735: ST_TO_ADDR
// if not tmp then
28736: LD_VAR 0 1
28740: NOT
28741: IFFALSE 28745
// exit ;
28743: GO 28771
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28745: LD_VAR 0 1
28749: PUSH
28750: LD_INT 1
28752: PPUSH
28753: LD_VAR 0 1
28757: PPUSH
28758: CALL_OW 12
28762: ARRAY
28763: PPUSH
28764: LD_INT 200
28766: PPUSH
28767: CALL_OW 234
// end ;
28771: PPOPN 1
28773: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28774: LD_EXP 61
28778: IFFALSE 28786
28780: PUSH
28781: LD_EXP 90
28785: AND
28786: IFFALSE 28865
28788: GO 28790
28790: DISABLE
28791: LD_INT 0
28793: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28794: LD_ADDR_VAR 0 1
28798: PUSH
28799: LD_INT 22
28801: PUSH
28802: LD_OWVAR 2
28806: PUSH
28807: EMPTY
28808: LIST
28809: LIST
28810: PUSH
28811: LD_INT 21
28813: PUSH
28814: LD_INT 2
28816: PUSH
28817: EMPTY
28818: LIST
28819: LIST
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: PPUSH
28825: CALL_OW 69
28829: ST_TO_ADDR
// if not tmp then
28830: LD_VAR 0 1
28834: NOT
28835: IFFALSE 28839
// exit ;
28837: GO 28865
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28839: LD_VAR 0 1
28843: PUSH
28844: LD_INT 1
28846: PPUSH
28847: LD_VAR 0 1
28851: PPUSH
28852: CALL_OW 12
28856: ARRAY
28857: PPUSH
28858: LD_INT 60
28860: PPUSH
28861: CALL_OW 234
// end ;
28865: PPOPN 1
28867: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28868: LD_EXP 61
28872: IFFALSE 28880
28874: PUSH
28875: LD_EXP 91
28879: AND
28880: IFFALSE 28979
28882: GO 28884
28884: DISABLE
28885: LD_INT 0
28887: PPUSH
28888: PPUSH
// begin enable ;
28889: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28890: LD_ADDR_VAR 0 1
28894: PUSH
28895: LD_INT 22
28897: PUSH
28898: LD_OWVAR 2
28902: PUSH
28903: EMPTY
28904: LIST
28905: LIST
28906: PUSH
28907: LD_INT 61
28909: PUSH
28910: EMPTY
28911: LIST
28912: PUSH
28913: LD_INT 33
28915: PUSH
28916: LD_INT 2
28918: PUSH
28919: EMPTY
28920: LIST
28921: LIST
28922: PUSH
28923: EMPTY
28924: LIST
28925: LIST
28926: LIST
28927: PPUSH
28928: CALL_OW 69
28932: ST_TO_ADDR
// if not tmp then
28933: LD_VAR 0 1
28937: NOT
28938: IFFALSE 28942
// exit ;
28940: GO 28979
// for i in tmp do
28942: LD_ADDR_VAR 0 2
28946: PUSH
28947: LD_VAR 0 1
28951: PUSH
28952: FOR_IN
28953: IFFALSE 28977
// if IsControledBy ( i ) then
28955: LD_VAR 0 2
28959: PPUSH
28960: CALL_OW 312
28964: IFFALSE 28975
// ComUnlink ( i ) ;
28966: LD_VAR 0 2
28970: PPUSH
28971: CALL_OW 136
28975: GO 28952
28977: POP
28978: POP
// end ;
28979: PPOPN 2
28981: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28982: LD_EXP 61
28986: IFFALSE 28994
28988: PUSH
28989: LD_EXP 92
28993: AND
28994: IFFALSE 29134
28996: GO 28998
28998: DISABLE
28999: LD_INT 0
29001: PPUSH
29002: PPUSH
// begin ToLua ( displayPowell(); ) ;
29003: LD_STRING displayPowell();
29005: PPUSH
29006: CALL_OW 559
// uc_side := 0 ;
29010: LD_ADDR_OWVAR 20
29014: PUSH
29015: LD_INT 0
29017: ST_TO_ADDR
// uc_nation := 2 ;
29018: LD_ADDR_OWVAR 21
29022: PUSH
29023: LD_INT 2
29025: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
29026: LD_ADDR_OWVAR 37
29030: PUSH
29031: LD_INT 14
29033: ST_TO_ADDR
// vc_engine := engine_siberite ;
29034: LD_ADDR_OWVAR 39
29038: PUSH
29039: LD_INT 3
29041: ST_TO_ADDR
// vc_control := control_apeman ;
29042: LD_ADDR_OWVAR 38
29046: PUSH
29047: LD_INT 5
29049: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
29050: LD_ADDR_OWVAR 40
29054: PUSH
29055: LD_INT 29
29057: ST_TO_ADDR
// un := CreateVehicle ;
29058: LD_ADDR_VAR 0 2
29062: PUSH
29063: CALL_OW 45
29067: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29068: LD_VAR 0 2
29072: PPUSH
29073: LD_INT 1
29075: PPUSH
29076: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29080: LD_INT 35
29082: PPUSH
29083: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29087: LD_VAR 0 2
29091: PPUSH
29092: LD_INT 22
29094: PUSH
29095: LD_OWVAR 2
29099: PUSH
29100: EMPTY
29101: LIST
29102: LIST
29103: PPUSH
29104: CALL_OW 69
29108: PPUSH
29109: LD_VAR 0 2
29113: PPUSH
29114: CALL_OW 74
29118: PPUSH
29119: CALL_OW 115
// until IsDead ( un ) ;
29123: LD_VAR 0 2
29127: PPUSH
29128: CALL_OW 301
29132: IFFALSE 29080
// end ;
29134: PPOPN 2
29136: END
// every 0 0$1 trigger StreamModeActive and sStu do
29137: LD_EXP 61
29141: IFFALSE 29149
29143: PUSH
29144: LD_EXP 100
29148: AND
29149: IFFALSE 29165
29151: GO 29153
29153: DISABLE
// begin ToLua ( displayStucuk(); ) ;
29154: LD_STRING displayStucuk();
29156: PPUSH
29157: CALL_OW 559
// ResetFog ;
29161: CALL_OW 335
// end ;
29165: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29166: LD_EXP 61
29170: IFFALSE 29178
29172: PUSH
29173: LD_EXP 93
29177: AND
29178: IFFALSE 29319
29180: GO 29182
29182: DISABLE
29183: LD_INT 0
29185: PPUSH
29186: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29187: LD_ADDR_VAR 0 2
29191: PUSH
29192: LD_INT 22
29194: PUSH
29195: LD_OWVAR 2
29199: PUSH
29200: EMPTY
29201: LIST
29202: LIST
29203: PUSH
29204: LD_INT 21
29206: PUSH
29207: LD_INT 1
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: PUSH
29214: EMPTY
29215: LIST
29216: LIST
29217: PPUSH
29218: CALL_OW 69
29222: ST_TO_ADDR
// if not tmp then
29223: LD_VAR 0 2
29227: NOT
29228: IFFALSE 29232
// exit ;
29230: GO 29319
// un := tmp [ rand ( 1 , tmp ) ] ;
29232: LD_ADDR_VAR 0 1
29236: PUSH
29237: LD_VAR 0 2
29241: PUSH
29242: LD_INT 1
29244: PPUSH
29245: LD_VAR 0 2
29249: PPUSH
29250: CALL_OW 12
29254: ARRAY
29255: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29256: LD_VAR 0 1
29260: PPUSH
29261: LD_INT 0
29263: PPUSH
29264: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29268: LD_VAR 0 1
29272: PPUSH
29273: LD_OWVAR 3
29277: PUSH
29278: LD_VAR 0 1
29282: DIFF
29283: PPUSH
29284: LD_VAR 0 1
29288: PPUSH
29289: CALL_OW 74
29293: PPUSH
29294: CALL_OW 115
// wait ( 0 0$20 ) ;
29298: LD_INT 700
29300: PPUSH
29301: CALL_OW 67
// SetSide ( un , your_side ) ;
29305: LD_VAR 0 1
29309: PPUSH
29310: LD_OWVAR 2
29314: PPUSH
29315: CALL_OW 235
// end ;
29319: PPOPN 2
29321: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29322: LD_EXP 61
29326: IFFALSE 29334
29328: PUSH
29329: LD_EXP 94
29333: AND
29334: IFFALSE 29440
29336: GO 29338
29338: DISABLE
29339: LD_INT 0
29341: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29342: LD_ADDR_VAR 0 1
29346: PUSH
29347: LD_INT 22
29349: PUSH
29350: LD_OWVAR 2
29354: PUSH
29355: EMPTY
29356: LIST
29357: LIST
29358: PUSH
29359: LD_INT 2
29361: PUSH
29362: LD_INT 30
29364: PUSH
29365: LD_INT 0
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: PUSH
29372: LD_INT 30
29374: PUSH
29375: LD_INT 1
29377: PUSH
29378: EMPTY
29379: LIST
29380: LIST
29381: PUSH
29382: EMPTY
29383: LIST
29384: LIST
29385: LIST
29386: PUSH
29387: EMPTY
29388: LIST
29389: LIST
29390: PPUSH
29391: CALL_OW 69
29395: ST_TO_ADDR
// if not depot then
29396: LD_VAR 0 1
29400: NOT
29401: IFFALSE 29405
// exit ;
29403: GO 29440
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29405: LD_VAR 0 1
29409: PUSH
29410: LD_INT 1
29412: ARRAY
29413: PPUSH
29414: CALL_OW 250
29418: PPUSH
29419: LD_VAR 0 1
29423: PUSH
29424: LD_INT 1
29426: ARRAY
29427: PPUSH
29428: CALL_OW 251
29432: PPUSH
29433: LD_INT 70
29435: PPUSH
29436: CALL_OW 495
// end ;
29440: PPOPN 1
29442: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29443: LD_EXP 61
29447: IFFALSE 29455
29449: PUSH
29450: LD_EXP 95
29454: AND
29455: IFFALSE 29666
29457: GO 29459
29459: DISABLE
29460: LD_INT 0
29462: PPUSH
29463: PPUSH
29464: PPUSH
29465: PPUSH
29466: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29467: LD_ADDR_VAR 0 5
29471: PUSH
29472: LD_INT 22
29474: PUSH
29475: LD_OWVAR 2
29479: PUSH
29480: EMPTY
29481: LIST
29482: LIST
29483: PUSH
29484: LD_INT 21
29486: PUSH
29487: LD_INT 1
29489: PUSH
29490: EMPTY
29491: LIST
29492: LIST
29493: PUSH
29494: EMPTY
29495: LIST
29496: LIST
29497: PPUSH
29498: CALL_OW 69
29502: ST_TO_ADDR
// if not tmp then
29503: LD_VAR 0 5
29507: NOT
29508: IFFALSE 29512
// exit ;
29510: GO 29666
// for i in tmp do
29512: LD_ADDR_VAR 0 1
29516: PUSH
29517: LD_VAR 0 5
29521: PUSH
29522: FOR_IN
29523: IFFALSE 29664
// begin d := rand ( 0 , 5 ) ;
29525: LD_ADDR_VAR 0 4
29529: PUSH
29530: LD_INT 0
29532: PPUSH
29533: LD_INT 5
29535: PPUSH
29536: CALL_OW 12
29540: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29541: LD_ADDR_VAR 0 2
29545: PUSH
29546: LD_VAR 0 1
29550: PPUSH
29551: CALL_OW 250
29555: PPUSH
29556: LD_VAR 0 4
29560: PPUSH
29561: LD_INT 3
29563: PPUSH
29564: LD_INT 12
29566: PPUSH
29567: CALL_OW 12
29571: PPUSH
29572: CALL_OW 272
29576: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29577: LD_ADDR_VAR 0 3
29581: PUSH
29582: LD_VAR 0 1
29586: PPUSH
29587: CALL_OW 251
29591: PPUSH
29592: LD_VAR 0 4
29596: PPUSH
29597: LD_INT 3
29599: PPUSH
29600: LD_INT 12
29602: PPUSH
29603: CALL_OW 12
29607: PPUSH
29608: CALL_OW 273
29612: ST_TO_ADDR
// if ValidHex ( x , y ) then
29613: LD_VAR 0 2
29617: PPUSH
29618: LD_VAR 0 3
29622: PPUSH
29623: CALL_OW 488
29627: IFFALSE 29662
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29629: LD_VAR 0 1
29633: PPUSH
29634: LD_VAR 0 2
29638: PPUSH
29639: LD_VAR 0 3
29643: PPUSH
29644: LD_INT 3
29646: PPUSH
29647: LD_INT 6
29649: PPUSH
29650: CALL_OW 12
29654: PPUSH
29655: LD_INT 1
29657: PPUSH
29658: CALL_OW 483
// end ;
29662: GO 29522
29664: POP
29665: POP
// end ;
29666: PPOPN 5
29668: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29669: LD_EXP 61
29673: IFFALSE 29681
29675: PUSH
29676: LD_EXP 96
29680: AND
29681: IFFALSE 29775
29683: GO 29685
29685: DISABLE
29686: LD_INT 0
29688: PPUSH
29689: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29690: LD_ADDR_VAR 0 2
29694: PUSH
29695: LD_INT 22
29697: PUSH
29698: LD_OWVAR 2
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: PUSH
29707: LD_INT 32
29709: PUSH
29710: LD_INT 1
29712: PUSH
29713: EMPTY
29714: LIST
29715: LIST
29716: PUSH
29717: LD_INT 21
29719: PUSH
29720: LD_INT 2
29722: PUSH
29723: EMPTY
29724: LIST
29725: LIST
29726: PUSH
29727: EMPTY
29728: LIST
29729: LIST
29730: LIST
29731: PPUSH
29732: CALL_OW 69
29736: ST_TO_ADDR
// if not tmp then
29737: LD_VAR 0 2
29741: NOT
29742: IFFALSE 29746
// exit ;
29744: GO 29775
// for i in tmp do
29746: LD_ADDR_VAR 0 1
29750: PUSH
29751: LD_VAR 0 2
29755: PUSH
29756: FOR_IN
29757: IFFALSE 29773
// SetFuel ( i , 0 ) ;
29759: LD_VAR 0 1
29763: PPUSH
29764: LD_INT 0
29766: PPUSH
29767: CALL_OW 240
29771: GO 29756
29773: POP
29774: POP
// end ;
29775: PPOPN 2
29777: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29778: LD_EXP 61
29782: IFFALSE 29790
29784: PUSH
29785: LD_EXP 97
29789: AND
29790: IFFALSE 29856
29792: GO 29794
29794: DISABLE
29795: LD_INT 0
29797: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29798: LD_ADDR_VAR 0 1
29802: PUSH
29803: LD_INT 22
29805: PUSH
29806: LD_OWVAR 2
29810: PUSH
29811: EMPTY
29812: LIST
29813: LIST
29814: PUSH
29815: LD_INT 30
29817: PUSH
29818: LD_INT 29
29820: PUSH
29821: EMPTY
29822: LIST
29823: LIST
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: PPUSH
29829: CALL_OW 69
29833: ST_TO_ADDR
// if not tmp then
29834: LD_VAR 0 1
29838: NOT
29839: IFFALSE 29843
// exit ;
29841: GO 29856
// DestroyUnit ( tmp [ 1 ] ) ;
29843: LD_VAR 0 1
29847: PUSH
29848: LD_INT 1
29850: ARRAY
29851: PPUSH
29852: CALL_OW 65
// end ;
29856: PPOPN 1
29858: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29859: LD_EXP 61
29863: IFFALSE 29871
29865: PUSH
29866: LD_EXP 99
29870: AND
29871: IFFALSE 30000
29873: GO 29875
29875: DISABLE
29876: LD_INT 0
29878: PPUSH
// begin uc_side := 0 ;
29879: LD_ADDR_OWVAR 20
29883: PUSH
29884: LD_INT 0
29886: ST_TO_ADDR
// uc_nation := nation_arabian ;
29887: LD_ADDR_OWVAR 21
29891: PUSH
29892: LD_INT 2
29894: ST_TO_ADDR
// hc_gallery :=  ;
29895: LD_ADDR_OWVAR 33
29899: PUSH
29900: LD_STRING 
29902: ST_TO_ADDR
// hc_name :=  ;
29903: LD_ADDR_OWVAR 26
29907: PUSH
29908: LD_STRING 
29910: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29911: LD_INT 1
29913: PPUSH
29914: LD_INT 11
29916: PPUSH
29917: LD_INT 10
29919: PPUSH
29920: CALL_OW 380
// un := CreateHuman ;
29924: LD_ADDR_VAR 0 1
29928: PUSH
29929: CALL_OW 44
29933: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29934: LD_VAR 0 1
29938: PPUSH
29939: LD_INT 1
29941: PPUSH
29942: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29946: LD_INT 35
29948: PPUSH
29949: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29953: LD_VAR 0 1
29957: PPUSH
29958: LD_INT 22
29960: PUSH
29961: LD_OWVAR 2
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: PPUSH
29970: CALL_OW 69
29974: PPUSH
29975: LD_VAR 0 1
29979: PPUSH
29980: CALL_OW 74
29984: PPUSH
29985: CALL_OW 115
// until IsDead ( un ) ;
29989: LD_VAR 0 1
29993: PPUSH
29994: CALL_OW 301
29998: IFFALSE 29946
// end ;
30000: PPOPN 1
30002: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
30003: LD_EXP 61
30007: IFFALSE 30015
30009: PUSH
30010: LD_EXP 101
30014: AND
30015: IFFALSE 30027
30017: GO 30019
30019: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
30020: LD_STRING earthquake(getX(game), 0, 32)
30022: PPUSH
30023: CALL_OW 559
30027: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
30028: LD_EXP 61
30032: IFFALSE 30040
30034: PUSH
30035: LD_EXP 102
30039: AND
30040: IFFALSE 30131
30042: GO 30044
30044: DISABLE
30045: LD_INT 0
30047: PPUSH
// begin enable ;
30048: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
30049: LD_ADDR_VAR 0 1
30053: PUSH
30054: LD_INT 22
30056: PUSH
30057: LD_OWVAR 2
30061: PUSH
30062: EMPTY
30063: LIST
30064: LIST
30065: PUSH
30066: LD_INT 21
30068: PUSH
30069: LD_INT 2
30071: PUSH
30072: EMPTY
30073: LIST
30074: LIST
30075: PUSH
30076: LD_INT 33
30078: PUSH
30079: LD_INT 3
30081: PUSH
30082: EMPTY
30083: LIST
30084: LIST
30085: PUSH
30086: EMPTY
30087: LIST
30088: LIST
30089: LIST
30090: PPUSH
30091: CALL_OW 69
30095: ST_TO_ADDR
// if not tmp then
30096: LD_VAR 0 1
30100: NOT
30101: IFFALSE 30105
// exit ;
30103: GO 30131
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30105: LD_VAR 0 1
30109: PUSH
30110: LD_INT 1
30112: PPUSH
30113: LD_VAR 0 1
30117: PPUSH
30118: CALL_OW 12
30122: ARRAY
30123: PPUSH
30124: LD_INT 1
30126: PPUSH
30127: CALL_OW 234
// end ;
30131: PPOPN 1
30133: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
30134: LD_EXP 61
30138: IFFALSE 30146
30140: PUSH
30141: LD_EXP 103
30145: AND
30146: IFFALSE 30287
30148: GO 30150
30150: DISABLE
30151: LD_INT 0
30153: PPUSH
30154: PPUSH
30155: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30156: LD_ADDR_VAR 0 3
30160: PUSH
30161: LD_INT 22
30163: PUSH
30164: LD_OWVAR 2
30168: PUSH
30169: EMPTY
30170: LIST
30171: LIST
30172: PUSH
30173: LD_INT 25
30175: PUSH
30176: LD_INT 1
30178: PUSH
30179: EMPTY
30180: LIST
30181: LIST
30182: PUSH
30183: EMPTY
30184: LIST
30185: LIST
30186: PPUSH
30187: CALL_OW 69
30191: ST_TO_ADDR
// if not tmp then
30192: LD_VAR 0 3
30196: NOT
30197: IFFALSE 30201
// exit ;
30199: GO 30287
// un := tmp [ rand ( 1 , tmp ) ] ;
30201: LD_ADDR_VAR 0 2
30205: PUSH
30206: LD_VAR 0 3
30210: PUSH
30211: LD_INT 1
30213: PPUSH
30214: LD_VAR 0 3
30218: PPUSH
30219: CALL_OW 12
30223: ARRAY
30224: ST_TO_ADDR
// if Crawls ( un ) then
30225: LD_VAR 0 2
30229: PPUSH
30230: CALL_OW 318
30234: IFFALSE 30245
// ComWalk ( un ) ;
30236: LD_VAR 0 2
30240: PPUSH
30241: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30245: LD_VAR 0 2
30249: PPUSH
30250: LD_INT 9
30252: PPUSH
30253: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30257: LD_INT 28
30259: PPUSH
30260: LD_OWVAR 2
30264: PPUSH
30265: LD_INT 2
30267: PPUSH
30268: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30272: LD_INT 29
30274: PPUSH
30275: LD_OWVAR 2
30279: PPUSH
30280: LD_INT 2
30282: PPUSH
30283: CALL_OW 322
// end ;
30287: PPOPN 3
30289: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30290: LD_EXP 61
30294: IFFALSE 30302
30296: PUSH
30297: LD_EXP 104
30301: AND
30302: IFFALSE 30413
30304: GO 30306
30306: DISABLE
30307: LD_INT 0
30309: PPUSH
30310: PPUSH
30311: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30312: LD_ADDR_VAR 0 3
30316: PUSH
30317: LD_INT 22
30319: PUSH
30320: LD_OWVAR 2
30324: PUSH
30325: EMPTY
30326: LIST
30327: LIST
30328: PUSH
30329: LD_INT 25
30331: PUSH
30332: LD_INT 1
30334: PUSH
30335: EMPTY
30336: LIST
30337: LIST
30338: PUSH
30339: EMPTY
30340: LIST
30341: LIST
30342: PPUSH
30343: CALL_OW 69
30347: ST_TO_ADDR
// if not tmp then
30348: LD_VAR 0 3
30352: NOT
30353: IFFALSE 30357
// exit ;
30355: GO 30413
// un := tmp [ rand ( 1 , tmp ) ] ;
30357: LD_ADDR_VAR 0 2
30361: PUSH
30362: LD_VAR 0 3
30366: PUSH
30367: LD_INT 1
30369: PPUSH
30370: LD_VAR 0 3
30374: PPUSH
30375: CALL_OW 12
30379: ARRAY
30380: ST_TO_ADDR
// if Crawls ( un ) then
30381: LD_VAR 0 2
30385: PPUSH
30386: CALL_OW 318
30390: IFFALSE 30401
// ComWalk ( un ) ;
30392: LD_VAR 0 2
30396: PPUSH
30397: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30401: LD_VAR 0 2
30405: PPUSH
30406: LD_INT 8
30408: PPUSH
30409: CALL_OW 336
// end ;
30413: PPOPN 3
30415: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30416: LD_EXP 61
30420: IFFALSE 30428
30422: PUSH
30423: LD_EXP 105
30427: AND
30428: IFFALSE 30572
30430: GO 30432
30432: DISABLE
30433: LD_INT 0
30435: PPUSH
30436: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30437: LD_ADDR_VAR 0 2
30441: PUSH
30442: LD_INT 22
30444: PUSH
30445: LD_OWVAR 2
30449: PUSH
30450: EMPTY
30451: LIST
30452: LIST
30453: PUSH
30454: LD_INT 21
30456: PUSH
30457: LD_INT 2
30459: PUSH
30460: EMPTY
30461: LIST
30462: LIST
30463: PUSH
30464: LD_INT 2
30466: PUSH
30467: LD_INT 34
30469: PUSH
30470: LD_INT 12
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: PUSH
30477: LD_INT 34
30479: PUSH
30480: LD_INT 51
30482: PUSH
30483: EMPTY
30484: LIST
30485: LIST
30486: PUSH
30487: LD_INT 34
30489: PUSH
30490: LD_INT 32
30492: PUSH
30493: EMPTY
30494: LIST
30495: LIST
30496: PUSH
30497: EMPTY
30498: LIST
30499: LIST
30500: LIST
30501: LIST
30502: PUSH
30503: EMPTY
30504: LIST
30505: LIST
30506: LIST
30507: PPUSH
30508: CALL_OW 69
30512: ST_TO_ADDR
// if not tmp then
30513: LD_VAR 0 2
30517: NOT
30518: IFFALSE 30522
// exit ;
30520: GO 30572
// for i in tmp do
30522: LD_ADDR_VAR 0 1
30526: PUSH
30527: LD_VAR 0 2
30531: PUSH
30532: FOR_IN
30533: IFFALSE 30570
// if GetCargo ( i , mat_artifact ) = 0 then
30535: LD_VAR 0 1
30539: PPUSH
30540: LD_INT 4
30542: PPUSH
30543: CALL_OW 289
30547: PUSH
30548: LD_INT 0
30550: EQUAL
30551: IFFALSE 30568
// SetCargo ( i , mat_siberit , 100 ) ;
30553: LD_VAR 0 1
30557: PPUSH
30558: LD_INT 3
30560: PPUSH
30561: LD_INT 100
30563: PPUSH
30564: CALL_OW 290
30568: GO 30532
30570: POP
30571: POP
// end ;
30572: PPOPN 2
30574: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30575: LD_EXP 61
30579: IFFALSE 30587
30581: PUSH
30582: LD_EXP 106
30586: AND
30587: IFFALSE 30770
30589: GO 30591
30591: DISABLE
30592: LD_INT 0
30594: PPUSH
30595: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30596: LD_ADDR_VAR 0 2
30600: PUSH
30601: LD_INT 22
30603: PUSH
30604: LD_OWVAR 2
30608: PUSH
30609: EMPTY
30610: LIST
30611: LIST
30612: PPUSH
30613: CALL_OW 69
30617: ST_TO_ADDR
// if not tmp then
30618: LD_VAR 0 2
30622: NOT
30623: IFFALSE 30627
// exit ;
30625: GO 30770
// for i := 1 to 2 do
30627: LD_ADDR_VAR 0 1
30631: PUSH
30632: DOUBLE
30633: LD_INT 1
30635: DEC
30636: ST_TO_ADDR
30637: LD_INT 2
30639: PUSH
30640: FOR_TO
30641: IFFALSE 30768
// begin uc_side := your_side ;
30643: LD_ADDR_OWVAR 20
30647: PUSH
30648: LD_OWVAR 2
30652: ST_TO_ADDR
// uc_nation := nation_american ;
30653: LD_ADDR_OWVAR 21
30657: PUSH
30658: LD_INT 1
30660: ST_TO_ADDR
// vc_chassis := us_morphling ;
30661: LD_ADDR_OWVAR 37
30665: PUSH
30666: LD_INT 5
30668: ST_TO_ADDR
// vc_engine := engine_siberite ;
30669: LD_ADDR_OWVAR 39
30673: PUSH
30674: LD_INT 3
30676: ST_TO_ADDR
// vc_control := control_computer ;
30677: LD_ADDR_OWVAR 38
30681: PUSH
30682: LD_INT 3
30684: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30685: LD_ADDR_OWVAR 40
30689: PUSH
30690: LD_INT 10
30692: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30693: LD_VAR 0 2
30697: PUSH
30698: LD_INT 1
30700: ARRAY
30701: PPUSH
30702: CALL_OW 310
30706: NOT
30707: IFFALSE 30754
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30709: CALL_OW 45
30713: PPUSH
30714: LD_VAR 0 2
30718: PUSH
30719: LD_INT 1
30721: ARRAY
30722: PPUSH
30723: CALL_OW 250
30727: PPUSH
30728: LD_VAR 0 2
30732: PUSH
30733: LD_INT 1
30735: ARRAY
30736: PPUSH
30737: CALL_OW 251
30741: PPUSH
30742: LD_INT 12
30744: PPUSH
30745: LD_INT 1
30747: PPUSH
30748: CALL_OW 50
30752: GO 30766
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30754: CALL_OW 45
30758: PPUSH
30759: LD_INT 1
30761: PPUSH
30762: CALL_OW 51
// end ;
30766: GO 30640
30768: POP
30769: POP
// end ;
30770: PPOPN 2
30772: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30773: LD_EXP 61
30777: IFFALSE 30785
30779: PUSH
30780: LD_EXP 107
30784: AND
30785: IFFALSE 31007
30787: GO 30789
30789: DISABLE
30790: LD_INT 0
30792: PPUSH
30793: PPUSH
30794: PPUSH
30795: PPUSH
30796: PPUSH
30797: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30798: LD_ADDR_VAR 0 6
30802: PUSH
30803: LD_INT 22
30805: PUSH
30806: LD_OWVAR 2
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: PUSH
30815: LD_INT 21
30817: PUSH
30818: LD_INT 1
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: PUSH
30825: LD_INT 3
30827: PUSH
30828: LD_INT 23
30830: PUSH
30831: LD_INT 0
30833: PUSH
30834: EMPTY
30835: LIST
30836: LIST
30837: PUSH
30838: EMPTY
30839: LIST
30840: LIST
30841: PUSH
30842: EMPTY
30843: LIST
30844: LIST
30845: LIST
30846: PPUSH
30847: CALL_OW 69
30851: ST_TO_ADDR
// if not tmp then
30852: LD_VAR 0 6
30856: NOT
30857: IFFALSE 30861
// exit ;
30859: GO 31007
// s1 := rand ( 1 , 4 ) ;
30861: LD_ADDR_VAR 0 2
30865: PUSH
30866: LD_INT 1
30868: PPUSH
30869: LD_INT 4
30871: PPUSH
30872: CALL_OW 12
30876: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30877: LD_ADDR_VAR 0 4
30881: PUSH
30882: LD_VAR 0 6
30886: PUSH
30887: LD_INT 1
30889: ARRAY
30890: PPUSH
30891: LD_VAR 0 2
30895: PPUSH
30896: CALL_OW 259
30900: ST_TO_ADDR
// if s1 = 1 then
30901: LD_VAR 0 2
30905: PUSH
30906: LD_INT 1
30908: EQUAL
30909: IFFALSE 30929
// s2 := rand ( 2 , 4 ) else
30911: LD_ADDR_VAR 0 3
30915: PUSH
30916: LD_INT 2
30918: PPUSH
30919: LD_INT 4
30921: PPUSH
30922: CALL_OW 12
30926: ST_TO_ADDR
30927: GO 30937
// s2 := 1 ;
30929: LD_ADDR_VAR 0 3
30933: PUSH
30934: LD_INT 1
30936: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30937: LD_ADDR_VAR 0 5
30941: PUSH
30942: LD_VAR 0 6
30946: PUSH
30947: LD_INT 1
30949: ARRAY
30950: PPUSH
30951: LD_VAR 0 3
30955: PPUSH
30956: CALL_OW 259
30960: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30961: LD_VAR 0 6
30965: PUSH
30966: LD_INT 1
30968: ARRAY
30969: PPUSH
30970: LD_VAR 0 2
30974: PPUSH
30975: LD_VAR 0 5
30979: PPUSH
30980: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30984: LD_VAR 0 6
30988: PUSH
30989: LD_INT 1
30991: ARRAY
30992: PPUSH
30993: LD_VAR 0 3
30997: PPUSH
30998: LD_VAR 0 4
31002: PPUSH
31003: CALL_OW 237
// end ;
31007: PPOPN 6
31009: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
31010: LD_EXP 61
31014: IFFALSE 31022
31016: PUSH
31017: LD_EXP 108
31021: AND
31022: IFFALSE 31101
31024: GO 31026
31026: DISABLE
31027: LD_INT 0
31029: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
31030: LD_ADDR_VAR 0 1
31034: PUSH
31035: LD_INT 22
31037: PUSH
31038: LD_OWVAR 2
31042: PUSH
31043: EMPTY
31044: LIST
31045: LIST
31046: PUSH
31047: LD_INT 30
31049: PUSH
31050: LD_INT 3
31052: PUSH
31053: EMPTY
31054: LIST
31055: LIST
31056: PUSH
31057: EMPTY
31058: LIST
31059: LIST
31060: PPUSH
31061: CALL_OW 69
31065: ST_TO_ADDR
// if not tmp then
31066: LD_VAR 0 1
31070: NOT
31071: IFFALSE 31075
// exit ;
31073: GO 31101
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31075: LD_VAR 0 1
31079: PUSH
31080: LD_INT 1
31082: PPUSH
31083: LD_VAR 0 1
31087: PPUSH
31088: CALL_OW 12
31092: ARRAY
31093: PPUSH
31094: LD_INT 1
31096: PPUSH
31097: CALL_OW 234
// end ;
31101: PPOPN 1
31103: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
31104: LD_EXP 61
31108: IFFALSE 31116
31110: PUSH
31111: LD_EXP 109
31115: AND
31116: IFFALSE 31228
31118: GO 31120
31120: DISABLE
31121: LD_INT 0
31123: PPUSH
31124: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
31125: LD_ADDR_VAR 0 2
31129: PUSH
31130: LD_INT 22
31132: PUSH
31133: LD_OWVAR 2
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: PUSH
31142: LD_INT 2
31144: PUSH
31145: LD_INT 30
31147: PUSH
31148: LD_INT 27
31150: PUSH
31151: EMPTY
31152: LIST
31153: LIST
31154: PUSH
31155: LD_INT 30
31157: PUSH
31158: LD_INT 26
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: PUSH
31165: LD_INT 30
31167: PUSH
31168: LD_INT 28
31170: PUSH
31171: EMPTY
31172: LIST
31173: LIST
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: LIST
31179: LIST
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: PPUSH
31185: CALL_OW 69
31189: ST_TO_ADDR
// if not tmp then
31190: LD_VAR 0 2
31194: NOT
31195: IFFALSE 31199
// exit ;
31197: GO 31228
// for i in tmp do
31199: LD_ADDR_VAR 0 1
31203: PUSH
31204: LD_VAR 0 2
31208: PUSH
31209: FOR_IN
31210: IFFALSE 31226
// SetLives ( i , 1 ) ;
31212: LD_VAR 0 1
31216: PPUSH
31217: LD_INT 1
31219: PPUSH
31220: CALL_OW 234
31224: GO 31209
31226: POP
31227: POP
// end ;
31228: PPOPN 2
31230: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31231: LD_EXP 61
31235: IFFALSE 31243
31237: PUSH
31238: LD_EXP 110
31242: AND
31243: IFFALSE 31530
31245: GO 31247
31247: DISABLE
31248: LD_INT 0
31250: PPUSH
31251: PPUSH
31252: PPUSH
// begin i := rand ( 1 , 7 ) ;
31253: LD_ADDR_VAR 0 1
31257: PUSH
31258: LD_INT 1
31260: PPUSH
31261: LD_INT 7
31263: PPUSH
31264: CALL_OW 12
31268: ST_TO_ADDR
// case i of 1 :
31269: LD_VAR 0 1
31273: PUSH
31274: LD_INT 1
31276: DOUBLE
31277: EQUAL
31278: IFTRUE 31282
31280: GO 31292
31282: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31283: LD_STRING earthquake(getX(game), 0, 32)
31285: PPUSH
31286: CALL_OW 559
31290: GO 31530
31292: LD_INT 2
31294: DOUBLE
31295: EQUAL
31296: IFTRUE 31300
31298: GO 31314
31300: POP
// begin ToLua ( displayStucuk(); ) ;
31301: LD_STRING displayStucuk();
31303: PPUSH
31304: CALL_OW 559
// ResetFog ;
31308: CALL_OW 335
// end ; 3 :
31312: GO 31530
31314: LD_INT 3
31316: DOUBLE
31317: EQUAL
31318: IFTRUE 31322
31320: GO 31426
31322: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31323: LD_ADDR_VAR 0 2
31327: PUSH
31328: LD_INT 22
31330: PUSH
31331: LD_OWVAR 2
31335: PUSH
31336: EMPTY
31337: LIST
31338: LIST
31339: PUSH
31340: LD_INT 25
31342: PUSH
31343: LD_INT 1
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: PUSH
31350: EMPTY
31351: LIST
31352: LIST
31353: PPUSH
31354: CALL_OW 69
31358: ST_TO_ADDR
// if not tmp then
31359: LD_VAR 0 2
31363: NOT
31364: IFFALSE 31368
// exit ;
31366: GO 31530
// un := tmp [ rand ( 1 , tmp ) ] ;
31368: LD_ADDR_VAR 0 3
31372: PUSH
31373: LD_VAR 0 2
31377: PUSH
31378: LD_INT 1
31380: PPUSH
31381: LD_VAR 0 2
31385: PPUSH
31386: CALL_OW 12
31390: ARRAY
31391: ST_TO_ADDR
// if Crawls ( un ) then
31392: LD_VAR 0 3
31396: PPUSH
31397: CALL_OW 318
31401: IFFALSE 31412
// ComWalk ( un ) ;
31403: LD_VAR 0 3
31407: PPUSH
31408: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31412: LD_VAR 0 3
31416: PPUSH
31417: LD_INT 8
31419: PPUSH
31420: CALL_OW 336
// end ; 4 :
31424: GO 31530
31426: LD_INT 4
31428: DOUBLE
31429: EQUAL
31430: IFTRUE 31434
31432: GO 31508
31434: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31435: LD_ADDR_VAR 0 2
31439: PUSH
31440: LD_INT 22
31442: PUSH
31443: LD_OWVAR 2
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: PUSH
31452: LD_INT 30
31454: PUSH
31455: LD_INT 29
31457: PUSH
31458: EMPTY
31459: LIST
31460: LIST
31461: PUSH
31462: EMPTY
31463: LIST
31464: LIST
31465: PPUSH
31466: CALL_OW 69
31470: ST_TO_ADDR
// if not tmp then
31471: LD_VAR 0 2
31475: NOT
31476: IFFALSE 31480
// exit ;
31478: GO 31530
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31480: LD_VAR 0 2
31484: PUSH
31485: LD_INT 1
31487: ARRAY
31488: PPUSH
31489: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31493: LD_VAR 0 2
31497: PUSH
31498: LD_INT 1
31500: ARRAY
31501: PPUSH
31502: CALL_OW 65
// end ; 5 .. 7 :
31506: GO 31530
31508: LD_INT 5
31510: DOUBLE
31511: GREATEREQUAL
31512: IFFALSE 31520
31514: LD_INT 7
31516: DOUBLE
31517: LESSEQUAL
31518: IFTRUE 31522
31520: GO 31529
31522: POP
// StreamSibBomb ; end ;
31523: CALL 27711 0 0
31527: GO 31530
31529: POP
// end ;
31530: PPOPN 3
31532: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31533: LD_EXP 61
31537: IFFALSE 31545
31539: PUSH
31540: LD_EXP 111
31544: AND
31545: IFFALSE 31701
31547: GO 31549
31549: DISABLE
31550: LD_INT 0
31552: PPUSH
31553: PPUSH
31554: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31555: LD_ADDR_VAR 0 2
31559: PUSH
31560: LD_INT 81
31562: PUSH
31563: LD_OWVAR 2
31567: PUSH
31568: EMPTY
31569: LIST
31570: LIST
31571: PUSH
31572: LD_INT 2
31574: PUSH
31575: LD_INT 21
31577: PUSH
31578: LD_INT 1
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: PUSH
31585: LD_INT 21
31587: PUSH
31588: LD_INT 2
31590: PUSH
31591: EMPTY
31592: LIST
31593: LIST
31594: PUSH
31595: EMPTY
31596: LIST
31597: LIST
31598: LIST
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: PPUSH
31604: CALL_OW 69
31608: ST_TO_ADDR
// if not tmp then
31609: LD_VAR 0 2
31613: NOT
31614: IFFALSE 31618
// exit ;
31616: GO 31701
// p := 0 ;
31618: LD_ADDR_VAR 0 3
31622: PUSH
31623: LD_INT 0
31625: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31626: LD_INT 35
31628: PPUSH
31629: CALL_OW 67
// p := p + 1 ;
31633: LD_ADDR_VAR 0 3
31637: PUSH
31638: LD_VAR 0 3
31642: PUSH
31643: LD_INT 1
31645: PLUS
31646: ST_TO_ADDR
// for i in tmp do
31647: LD_ADDR_VAR 0 1
31651: PUSH
31652: LD_VAR 0 2
31656: PUSH
31657: FOR_IN
31658: IFFALSE 31689
// if GetLives ( i ) < 1000 then
31660: LD_VAR 0 1
31664: PPUSH
31665: CALL_OW 256
31669: PUSH
31670: LD_INT 1000
31672: LESS
31673: IFFALSE 31687
// SetLives ( i , 1000 ) ;
31675: LD_VAR 0 1
31679: PPUSH
31680: LD_INT 1000
31682: PPUSH
31683: CALL_OW 234
31687: GO 31657
31689: POP
31690: POP
// until p > 20 ;
31691: LD_VAR 0 3
31695: PUSH
31696: LD_INT 20
31698: GREATER
31699: IFFALSE 31626
// end ;
31701: PPOPN 3
31703: END
// every 0 0$1 trigger StreamModeActive and sTime do
31704: LD_EXP 61
31708: IFFALSE 31716
31710: PUSH
31711: LD_EXP 112
31715: AND
31716: IFFALSE 31751
31718: GO 31720
31720: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31721: LD_INT 28
31723: PPUSH
31724: LD_OWVAR 2
31728: PPUSH
31729: LD_INT 2
31731: PPUSH
31732: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31736: LD_INT 30
31738: PPUSH
31739: LD_OWVAR 2
31743: PPUSH
31744: LD_INT 2
31746: PPUSH
31747: CALL_OW 322
// end ;
31751: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31752: LD_EXP 61
31756: IFFALSE 31764
31758: PUSH
31759: LD_EXP 113
31763: AND
31764: IFFALSE 31885
31766: GO 31768
31768: DISABLE
31769: LD_INT 0
31771: PPUSH
31772: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31773: LD_ADDR_VAR 0 2
31777: PUSH
31778: LD_INT 22
31780: PUSH
31781: LD_OWVAR 2
31785: PUSH
31786: EMPTY
31787: LIST
31788: LIST
31789: PUSH
31790: LD_INT 21
31792: PUSH
31793: LD_INT 1
31795: PUSH
31796: EMPTY
31797: LIST
31798: LIST
31799: PUSH
31800: LD_INT 3
31802: PUSH
31803: LD_INT 23
31805: PUSH
31806: LD_INT 0
31808: PUSH
31809: EMPTY
31810: LIST
31811: LIST
31812: PUSH
31813: EMPTY
31814: LIST
31815: LIST
31816: PUSH
31817: EMPTY
31818: LIST
31819: LIST
31820: LIST
31821: PPUSH
31822: CALL_OW 69
31826: ST_TO_ADDR
// if not tmp then
31827: LD_VAR 0 2
31831: NOT
31832: IFFALSE 31836
// exit ;
31834: GO 31885
// for i in tmp do
31836: LD_ADDR_VAR 0 1
31840: PUSH
31841: LD_VAR 0 2
31845: PUSH
31846: FOR_IN
31847: IFFALSE 31883
// begin if Crawls ( i ) then
31849: LD_VAR 0 1
31853: PPUSH
31854: CALL_OW 318
31858: IFFALSE 31869
// ComWalk ( i ) ;
31860: LD_VAR 0 1
31864: PPUSH
31865: CALL_OW 138
// SetClass ( i , 2 ) ;
31869: LD_VAR 0 1
31873: PPUSH
31874: LD_INT 2
31876: PPUSH
31877: CALL_OW 336
// end ;
31881: GO 31846
31883: POP
31884: POP
// end ;
31885: PPOPN 2
31887: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31888: LD_EXP 61
31892: IFFALSE 31900
31894: PUSH
31895: LD_EXP 114
31899: AND
31900: IFFALSE 32190
31902: GO 31904
31904: DISABLE
31905: LD_INT 0
31907: PPUSH
31908: PPUSH
31909: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31910: LD_OWVAR 2
31914: PPUSH
31915: LD_INT 9
31917: PPUSH
31918: LD_INT 1
31920: PPUSH
31921: LD_INT 1
31923: PPUSH
31924: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31928: LD_INT 9
31930: PPUSH
31931: LD_OWVAR 2
31935: PPUSH
31936: CALL_OW 343
// uc_side := 9 ;
31940: LD_ADDR_OWVAR 20
31944: PUSH
31945: LD_INT 9
31947: ST_TO_ADDR
// uc_nation := 2 ;
31948: LD_ADDR_OWVAR 21
31952: PUSH
31953: LD_INT 2
31955: ST_TO_ADDR
// hc_name := Dark Warrior ;
31956: LD_ADDR_OWVAR 26
31960: PUSH
31961: LD_STRING Dark Warrior
31963: ST_TO_ADDR
// hc_gallery :=  ;
31964: LD_ADDR_OWVAR 33
31968: PUSH
31969: LD_STRING 
31971: ST_TO_ADDR
// hc_noskilllimit := true ;
31972: LD_ADDR_OWVAR 76
31976: PUSH
31977: LD_INT 1
31979: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31980: LD_ADDR_OWVAR 31
31984: PUSH
31985: LD_INT 30
31987: PUSH
31988: LD_INT 30
31990: PUSH
31991: LD_INT 30
31993: PUSH
31994: LD_INT 30
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: LIST
32001: LIST
32002: ST_TO_ADDR
// un := CreateHuman ;
32003: LD_ADDR_VAR 0 3
32007: PUSH
32008: CALL_OW 44
32012: ST_TO_ADDR
// hc_noskilllimit := false ;
32013: LD_ADDR_OWVAR 76
32017: PUSH
32018: LD_INT 0
32020: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32021: LD_VAR 0 3
32025: PPUSH
32026: LD_INT 1
32028: PPUSH
32029: CALL_OW 51
// ToLua ( playRanger() ) ;
32033: LD_STRING playRanger()
32035: PPUSH
32036: CALL_OW 559
// p := 0 ;
32040: LD_ADDR_VAR 0 2
32044: PUSH
32045: LD_INT 0
32047: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32048: LD_INT 35
32050: PPUSH
32051: CALL_OW 67
// p := p + 1 ;
32055: LD_ADDR_VAR 0 2
32059: PUSH
32060: LD_VAR 0 2
32064: PUSH
32065: LD_INT 1
32067: PLUS
32068: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
32069: LD_VAR 0 3
32073: PPUSH
32074: CALL_OW 256
32078: PUSH
32079: LD_INT 1000
32081: LESS
32082: IFFALSE 32096
// SetLives ( un , 1000 ) ;
32084: LD_VAR 0 3
32088: PPUSH
32089: LD_INT 1000
32091: PPUSH
32092: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
32096: LD_VAR 0 3
32100: PPUSH
32101: LD_INT 81
32103: PUSH
32104: LD_OWVAR 2
32108: PUSH
32109: EMPTY
32110: LIST
32111: LIST
32112: PUSH
32113: LD_INT 91
32115: PUSH
32116: LD_VAR 0 3
32120: PUSH
32121: LD_INT 30
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: LIST
32128: PUSH
32129: EMPTY
32130: LIST
32131: LIST
32132: PPUSH
32133: CALL_OW 69
32137: PPUSH
32138: LD_VAR 0 3
32142: PPUSH
32143: CALL_OW 74
32147: PPUSH
32148: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
32152: LD_VAR 0 2
32156: PUSH
32157: LD_INT 80
32159: GREATER
32160: IFTRUE 32173
32162: PUSH
32163: LD_VAR 0 3
32167: PPUSH
32168: CALL_OW 301
32172: OR
32173: IFFALSE 32048
// if un then
32175: LD_VAR 0 3
32179: IFFALSE 32190
// RemoveUnit ( un ) ;
32181: LD_VAR 0 3
32185: PPUSH
32186: CALL_OW 64
// end ;
32190: PPOPN 3
32192: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
32193: LD_EXP 115
32197: IFFALSE 32313
32199: GO 32201
32201: DISABLE
32202: LD_INT 0
32204: PPUSH
32205: PPUSH
32206: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32207: LD_ADDR_VAR 0 2
32211: PUSH
32212: LD_INT 81
32214: PUSH
32215: LD_OWVAR 2
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: PUSH
32224: LD_INT 21
32226: PUSH
32227: LD_INT 1
32229: PUSH
32230: EMPTY
32231: LIST
32232: LIST
32233: PUSH
32234: EMPTY
32235: LIST
32236: LIST
32237: PPUSH
32238: CALL_OW 69
32242: ST_TO_ADDR
// ToLua ( playComputer() ) ;
32243: LD_STRING playComputer()
32245: PPUSH
32246: CALL_OW 559
// if not tmp then
32250: LD_VAR 0 2
32254: NOT
32255: IFFALSE 32259
// exit ;
32257: GO 32313
// for i in tmp do
32259: LD_ADDR_VAR 0 1
32263: PUSH
32264: LD_VAR 0 2
32268: PUSH
32269: FOR_IN
32270: IFFALSE 32311
// for j := 1 to 4 do
32272: LD_ADDR_VAR 0 3
32276: PUSH
32277: DOUBLE
32278: LD_INT 1
32280: DEC
32281: ST_TO_ADDR
32282: LD_INT 4
32284: PUSH
32285: FOR_TO
32286: IFFALSE 32307
// SetSkill ( i , j , 10 ) ;
32288: LD_VAR 0 1
32292: PPUSH
32293: LD_VAR 0 3
32297: PPUSH
32298: LD_INT 10
32300: PPUSH
32301: CALL_OW 237
32305: GO 32285
32307: POP
32308: POP
32309: GO 32269
32311: POP
32312: POP
// end ;
32313: PPOPN 3
32315: END
// every 0 0$1 trigger s30 do var i , tmp ;
32316: LD_EXP 116
32320: IFFALSE 32389
32322: GO 32324
32324: DISABLE
32325: LD_INT 0
32327: PPUSH
32328: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32329: LD_ADDR_VAR 0 2
32333: PUSH
32334: LD_INT 22
32336: PUSH
32337: LD_OWVAR 2
32341: PUSH
32342: EMPTY
32343: LIST
32344: LIST
32345: PPUSH
32346: CALL_OW 69
32350: ST_TO_ADDR
// if not tmp then
32351: LD_VAR 0 2
32355: NOT
32356: IFFALSE 32360
// exit ;
32358: GO 32389
// for i in tmp do
32360: LD_ADDR_VAR 0 1
32364: PUSH
32365: LD_VAR 0 2
32369: PUSH
32370: FOR_IN
32371: IFFALSE 32387
// SetLives ( i , 300 ) ;
32373: LD_VAR 0 1
32377: PPUSH
32378: LD_INT 300
32380: PPUSH
32381: CALL_OW 234
32385: GO 32370
32387: POP
32388: POP
// end ;
32389: PPOPN 2
32391: END
// every 0 0$1 trigger s60 do var i , tmp ;
32392: LD_EXP 117
32396: IFFALSE 32465
32398: GO 32400
32400: DISABLE
32401: LD_INT 0
32403: PPUSH
32404: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32405: LD_ADDR_VAR 0 2
32409: PUSH
32410: LD_INT 22
32412: PUSH
32413: LD_OWVAR 2
32417: PUSH
32418: EMPTY
32419: LIST
32420: LIST
32421: PPUSH
32422: CALL_OW 69
32426: ST_TO_ADDR
// if not tmp then
32427: LD_VAR 0 2
32431: NOT
32432: IFFALSE 32436
// exit ;
32434: GO 32465
// for i in tmp do
32436: LD_ADDR_VAR 0 1
32440: PUSH
32441: LD_VAR 0 2
32445: PUSH
32446: FOR_IN
32447: IFFALSE 32463
// SetLives ( i , 600 ) ;
32449: LD_VAR 0 1
32453: PPUSH
32454: LD_INT 600
32456: PPUSH
32457: CALL_OW 234
32461: GO 32446
32463: POP
32464: POP
// end ;
32465: PPOPN 2
32467: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32468: LD_INT 0
32470: PPUSH
// case cmd of 301 :
32471: LD_VAR 0 1
32475: PUSH
32476: LD_INT 301
32478: DOUBLE
32479: EQUAL
32480: IFTRUE 32484
32482: GO 32516
32484: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32485: LD_VAR 0 6
32489: PPUSH
32490: LD_VAR 0 7
32494: PPUSH
32495: LD_VAR 0 8
32499: PPUSH
32500: LD_VAR 0 4
32504: PPUSH
32505: LD_VAR 0 5
32509: PPUSH
32510: CALL 33729 0 5
32514: GO 32637
32516: LD_INT 302
32518: DOUBLE
32519: EQUAL
32520: IFTRUE 32524
32522: GO 32561
32524: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32525: LD_VAR 0 6
32529: PPUSH
32530: LD_VAR 0 7
32534: PPUSH
32535: LD_VAR 0 8
32539: PPUSH
32540: LD_VAR 0 9
32544: PPUSH
32545: LD_VAR 0 4
32549: PPUSH
32550: LD_VAR 0 5
32554: PPUSH
32555: CALL 33820 0 6
32559: GO 32637
32561: LD_INT 303
32563: DOUBLE
32564: EQUAL
32565: IFTRUE 32569
32567: GO 32606
32569: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32570: LD_VAR 0 6
32574: PPUSH
32575: LD_VAR 0 7
32579: PPUSH
32580: LD_VAR 0 8
32584: PPUSH
32585: LD_VAR 0 9
32589: PPUSH
32590: LD_VAR 0 4
32594: PPUSH
32595: LD_VAR 0 5
32599: PPUSH
32600: CALL 32642 0 6
32604: GO 32637
32606: LD_INT 304
32608: DOUBLE
32609: EQUAL
32610: IFTRUE 32614
32612: GO 32636
32614: POP
// hHackTeleport ( unit , x , y ) ; end ;
32615: LD_VAR 0 2
32619: PPUSH
32620: LD_VAR 0 4
32624: PPUSH
32625: LD_VAR 0 5
32629: PPUSH
32630: CALL 34413 0 3
32634: GO 32637
32636: POP
// end ;
32637: LD_VAR 0 12
32641: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32642: LD_INT 0
32644: PPUSH
32645: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32646: LD_VAR 0 1
32650: PUSH
32651: LD_INT 1
32653: LESS
32654: IFTRUE 32666
32656: PUSH
32657: LD_VAR 0 1
32661: PUSH
32662: LD_INT 3
32664: GREATER
32665: OR
32666: IFTRUE 32684
32668: PUSH
32669: LD_VAR 0 5
32673: PPUSH
32674: LD_VAR 0 6
32678: PPUSH
32679: CALL_OW 428
32683: OR
32684: IFFALSE 32688
// exit ;
32686: GO 33416
// uc_side := your_side ;
32688: LD_ADDR_OWVAR 20
32692: PUSH
32693: LD_OWVAR 2
32697: ST_TO_ADDR
// uc_nation := nation ;
32698: LD_ADDR_OWVAR 21
32702: PUSH
32703: LD_VAR 0 1
32707: ST_TO_ADDR
// bc_level = 1 ;
32708: LD_ADDR_OWVAR 43
32712: PUSH
32713: LD_INT 1
32715: ST_TO_ADDR
// case btype of 1 :
32716: LD_VAR 0 2
32720: PUSH
32721: LD_INT 1
32723: DOUBLE
32724: EQUAL
32725: IFTRUE 32729
32727: GO 32740
32729: POP
// bc_type := b_depot ; 2 :
32730: LD_ADDR_OWVAR 42
32734: PUSH
32735: LD_INT 0
32737: ST_TO_ADDR
32738: GO 33360
32740: LD_INT 2
32742: DOUBLE
32743: EQUAL
32744: IFTRUE 32748
32746: GO 32759
32748: POP
// bc_type := b_warehouse ; 3 :
32749: LD_ADDR_OWVAR 42
32753: PUSH
32754: LD_INT 1
32756: ST_TO_ADDR
32757: GO 33360
32759: LD_INT 3
32761: DOUBLE
32762: EQUAL
32763: IFTRUE 32767
32765: GO 32778
32767: POP
// bc_type := b_lab ; 4 .. 9 :
32768: LD_ADDR_OWVAR 42
32772: PUSH
32773: LD_INT 6
32775: ST_TO_ADDR
32776: GO 33360
32778: LD_INT 4
32780: DOUBLE
32781: GREATEREQUAL
32782: IFFALSE 32790
32784: LD_INT 9
32786: DOUBLE
32787: LESSEQUAL
32788: IFTRUE 32792
32790: GO 32852
32792: POP
// begin bc_type := b_lab_half ;
32793: LD_ADDR_OWVAR 42
32797: PUSH
32798: LD_INT 7
32800: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32801: LD_ADDR_OWVAR 44
32805: PUSH
32806: LD_INT 10
32808: PUSH
32809: LD_INT 11
32811: PUSH
32812: LD_INT 12
32814: PUSH
32815: LD_INT 15
32817: PUSH
32818: LD_INT 14
32820: PUSH
32821: LD_INT 13
32823: PUSH
32824: EMPTY
32825: LIST
32826: LIST
32827: LIST
32828: LIST
32829: LIST
32830: LIST
32831: PUSH
32832: LD_VAR 0 2
32836: PUSH
32837: LD_INT 3
32839: MINUS
32840: ARRAY
32841: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
32842: LD_ADDR_OWVAR 45
32846: PUSH
32847: LD_INT 9
32849: ST_TO_ADDR
// end ; 10 .. 13 :
32850: GO 33360
32852: LD_INT 10
32854: DOUBLE
32855: GREATEREQUAL
32856: IFFALSE 32864
32858: LD_INT 13
32860: DOUBLE
32861: LESSEQUAL
32862: IFTRUE 32866
32864: GO 32943
32866: POP
// begin bc_type := b_lab_full ;
32867: LD_ADDR_OWVAR 42
32871: PUSH
32872: LD_INT 8
32874: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32875: LD_ADDR_OWVAR 44
32879: PUSH
32880: LD_INT 10
32882: PUSH
32883: LD_INT 12
32885: PUSH
32886: LD_INT 14
32888: PUSH
32889: LD_INT 13
32891: PUSH
32892: EMPTY
32893: LIST
32894: LIST
32895: LIST
32896: LIST
32897: PUSH
32898: LD_VAR 0 2
32902: PUSH
32903: LD_INT 9
32905: MINUS
32906: ARRAY
32907: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32908: LD_ADDR_OWVAR 45
32912: PUSH
32913: LD_INT 11
32915: PUSH
32916: LD_INT 15
32918: PUSH
32919: LD_INT 12
32921: PUSH
32922: LD_INT 15
32924: PUSH
32925: EMPTY
32926: LIST
32927: LIST
32928: LIST
32929: LIST
32930: PUSH
32931: LD_VAR 0 2
32935: PUSH
32936: LD_INT 9
32938: MINUS
32939: ARRAY
32940: ST_TO_ADDR
// end ; 14 :
32941: GO 33360
32943: LD_INT 14
32945: DOUBLE
32946: EQUAL
32947: IFTRUE 32951
32949: GO 32962
32951: POP
// bc_type := b_workshop ; 15 :
32952: LD_ADDR_OWVAR 42
32956: PUSH
32957: LD_INT 2
32959: ST_TO_ADDR
32960: GO 33360
32962: LD_INT 15
32964: DOUBLE
32965: EQUAL
32966: IFTRUE 32970
32968: GO 32981
32970: POP
// bc_type := b_factory ; 16 :
32971: LD_ADDR_OWVAR 42
32975: PUSH
32976: LD_INT 3
32978: ST_TO_ADDR
32979: GO 33360
32981: LD_INT 16
32983: DOUBLE
32984: EQUAL
32985: IFTRUE 32989
32987: GO 33000
32989: POP
// bc_type := b_ext_gun ; 17 :
32990: LD_ADDR_OWVAR 42
32994: PUSH
32995: LD_INT 17
32997: ST_TO_ADDR
32998: GO 33360
33000: LD_INT 17
33002: DOUBLE
33003: EQUAL
33004: IFTRUE 33008
33006: GO 33036
33008: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
33009: LD_ADDR_OWVAR 42
33013: PUSH
33014: LD_INT 19
33016: PUSH
33017: LD_INT 23
33019: PUSH
33020: LD_INT 19
33022: PUSH
33023: EMPTY
33024: LIST
33025: LIST
33026: LIST
33027: PUSH
33028: LD_VAR 0 1
33032: ARRAY
33033: ST_TO_ADDR
33034: GO 33360
33036: LD_INT 18
33038: DOUBLE
33039: EQUAL
33040: IFTRUE 33044
33042: GO 33055
33044: POP
// bc_type := b_ext_radar ; 19 :
33045: LD_ADDR_OWVAR 42
33049: PUSH
33050: LD_INT 20
33052: ST_TO_ADDR
33053: GO 33360
33055: LD_INT 19
33057: DOUBLE
33058: EQUAL
33059: IFTRUE 33063
33061: GO 33074
33063: POP
// bc_type := b_ext_radio ; 20 :
33064: LD_ADDR_OWVAR 42
33068: PUSH
33069: LD_INT 22
33071: ST_TO_ADDR
33072: GO 33360
33074: LD_INT 20
33076: DOUBLE
33077: EQUAL
33078: IFTRUE 33082
33080: GO 33093
33082: POP
// bc_type := b_ext_siberium ; 21 :
33083: LD_ADDR_OWVAR 42
33087: PUSH
33088: LD_INT 21
33090: ST_TO_ADDR
33091: GO 33360
33093: LD_INT 21
33095: DOUBLE
33096: EQUAL
33097: IFTRUE 33101
33099: GO 33112
33101: POP
// bc_type := b_ext_computer ; 22 :
33102: LD_ADDR_OWVAR 42
33106: PUSH
33107: LD_INT 24
33109: ST_TO_ADDR
33110: GO 33360
33112: LD_INT 22
33114: DOUBLE
33115: EQUAL
33116: IFTRUE 33120
33118: GO 33131
33120: POP
// bc_type := b_ext_track ; 23 :
33121: LD_ADDR_OWVAR 42
33125: PUSH
33126: LD_INT 16
33128: ST_TO_ADDR
33129: GO 33360
33131: LD_INT 23
33133: DOUBLE
33134: EQUAL
33135: IFTRUE 33139
33137: GO 33150
33139: POP
// bc_type := b_ext_laser ; 24 :
33140: LD_ADDR_OWVAR 42
33144: PUSH
33145: LD_INT 25
33147: ST_TO_ADDR
33148: GO 33360
33150: LD_INT 24
33152: DOUBLE
33153: EQUAL
33154: IFTRUE 33158
33156: GO 33169
33158: POP
// bc_type := b_control_tower ; 25 :
33159: LD_ADDR_OWVAR 42
33163: PUSH
33164: LD_INT 36
33166: ST_TO_ADDR
33167: GO 33360
33169: LD_INT 25
33171: DOUBLE
33172: EQUAL
33173: IFTRUE 33177
33175: GO 33188
33177: POP
// bc_type := b_breastwork ; 26 :
33178: LD_ADDR_OWVAR 42
33182: PUSH
33183: LD_INT 31
33185: ST_TO_ADDR
33186: GO 33360
33188: LD_INT 26
33190: DOUBLE
33191: EQUAL
33192: IFTRUE 33196
33194: GO 33207
33196: POP
// bc_type := b_bunker ; 27 :
33197: LD_ADDR_OWVAR 42
33201: PUSH
33202: LD_INT 32
33204: ST_TO_ADDR
33205: GO 33360
33207: LD_INT 27
33209: DOUBLE
33210: EQUAL
33211: IFTRUE 33215
33213: GO 33226
33215: POP
// bc_type := b_turret ; 28 :
33216: LD_ADDR_OWVAR 42
33220: PUSH
33221: LD_INT 33
33223: ST_TO_ADDR
33224: GO 33360
33226: LD_INT 28
33228: DOUBLE
33229: EQUAL
33230: IFTRUE 33234
33232: GO 33245
33234: POP
// bc_type := b_armoury ; 29 :
33235: LD_ADDR_OWVAR 42
33239: PUSH
33240: LD_INT 4
33242: ST_TO_ADDR
33243: GO 33360
33245: LD_INT 29
33247: DOUBLE
33248: EQUAL
33249: IFTRUE 33253
33251: GO 33264
33253: POP
// bc_type := b_barracks ; 30 :
33254: LD_ADDR_OWVAR 42
33258: PUSH
33259: LD_INT 5
33261: ST_TO_ADDR
33262: GO 33360
33264: LD_INT 30
33266: DOUBLE
33267: EQUAL
33268: IFTRUE 33272
33270: GO 33283
33272: POP
// bc_type := b_solar_power ; 31 :
33273: LD_ADDR_OWVAR 42
33277: PUSH
33278: LD_INT 27
33280: ST_TO_ADDR
33281: GO 33360
33283: LD_INT 31
33285: DOUBLE
33286: EQUAL
33287: IFTRUE 33291
33289: GO 33302
33291: POP
// bc_type := b_oil_power ; 32 :
33292: LD_ADDR_OWVAR 42
33296: PUSH
33297: LD_INT 26
33299: ST_TO_ADDR
33300: GO 33360
33302: LD_INT 32
33304: DOUBLE
33305: EQUAL
33306: IFTRUE 33310
33308: GO 33321
33310: POP
// bc_type := b_siberite_power ; 33 :
33311: LD_ADDR_OWVAR 42
33315: PUSH
33316: LD_INT 28
33318: ST_TO_ADDR
33319: GO 33360
33321: LD_INT 33
33323: DOUBLE
33324: EQUAL
33325: IFTRUE 33329
33327: GO 33340
33329: POP
// bc_type := b_oil_mine ; 34 :
33330: LD_ADDR_OWVAR 42
33334: PUSH
33335: LD_INT 29
33337: ST_TO_ADDR
33338: GO 33360
33340: LD_INT 34
33342: DOUBLE
33343: EQUAL
33344: IFTRUE 33348
33346: GO 33359
33348: POP
// bc_type := b_siberite_mine ; end ;
33349: LD_ADDR_OWVAR 42
33353: PUSH
33354: LD_INT 30
33356: ST_TO_ADDR
33357: GO 33360
33359: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33360: LD_ADDR_VAR 0 8
33364: PUSH
33365: LD_VAR 0 5
33369: PPUSH
33370: LD_VAR 0 6
33374: PPUSH
33375: LD_VAR 0 3
33379: PPUSH
33380: CALL_OW 47
33384: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33385: LD_OWVAR 42
33389: PUSH
33390: LD_INT 32
33392: PUSH
33393: LD_INT 33
33395: PUSH
33396: EMPTY
33397: LIST
33398: LIST
33399: IN
33400: IFFALSE 33416
// PlaceWeaponTurret ( b , weapon ) ;
33402: LD_VAR 0 8
33406: PPUSH
33407: LD_VAR 0 4
33411: PPUSH
33412: CALL_OW 431
// end ;
33416: LD_VAR 0 7
33420: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33421: LD_INT 0
33423: PPUSH
33424: PPUSH
33425: PPUSH
33426: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33427: LD_ADDR_VAR 0 4
33431: PUSH
33432: LD_INT 22
33434: PUSH
33435: LD_OWVAR 2
33439: PUSH
33440: EMPTY
33441: LIST
33442: LIST
33443: PUSH
33444: LD_INT 2
33446: PUSH
33447: LD_INT 30
33449: PUSH
33450: LD_INT 0
33452: PUSH
33453: EMPTY
33454: LIST
33455: LIST
33456: PUSH
33457: LD_INT 30
33459: PUSH
33460: LD_INT 1
33462: PUSH
33463: EMPTY
33464: LIST
33465: LIST
33466: PUSH
33467: EMPTY
33468: LIST
33469: LIST
33470: LIST
33471: PUSH
33472: EMPTY
33473: LIST
33474: LIST
33475: PPUSH
33476: CALL_OW 69
33480: ST_TO_ADDR
// if not tmp then
33481: LD_VAR 0 4
33485: NOT
33486: IFFALSE 33490
// exit ;
33488: GO 33549
// for i in tmp do
33490: LD_ADDR_VAR 0 2
33494: PUSH
33495: LD_VAR 0 4
33499: PUSH
33500: FOR_IN
33501: IFFALSE 33547
// for j = 1 to 3 do
33503: LD_ADDR_VAR 0 3
33507: PUSH
33508: DOUBLE
33509: LD_INT 1
33511: DEC
33512: ST_TO_ADDR
33513: LD_INT 3
33515: PUSH
33516: FOR_TO
33517: IFFALSE 33543
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33519: LD_VAR 0 2
33523: PPUSH
33524: CALL_OW 274
33528: PPUSH
33529: LD_VAR 0 3
33533: PPUSH
33534: LD_INT 99999
33536: PPUSH
33537: CALL_OW 277
33541: GO 33516
33543: POP
33544: POP
33545: GO 33500
33547: POP
33548: POP
// end ;
33549: LD_VAR 0 1
33553: RET
// export function hHackSetLevel10 ; var i , j ; begin
33554: LD_INT 0
33556: PPUSH
33557: PPUSH
33558: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33559: LD_ADDR_VAR 0 2
33563: PUSH
33564: LD_INT 21
33566: PUSH
33567: LD_INT 1
33569: PUSH
33570: EMPTY
33571: LIST
33572: LIST
33573: PPUSH
33574: CALL_OW 69
33578: PUSH
33579: FOR_IN
33580: IFFALSE 33632
// if IsSelected ( i ) then
33582: LD_VAR 0 2
33586: PPUSH
33587: CALL_OW 306
33591: IFFALSE 33630
// begin for j := 1 to 4 do
33593: LD_ADDR_VAR 0 3
33597: PUSH
33598: DOUBLE
33599: LD_INT 1
33601: DEC
33602: ST_TO_ADDR
33603: LD_INT 4
33605: PUSH
33606: FOR_TO
33607: IFFALSE 33628
// SetSkill ( i , j , 10 ) ;
33609: LD_VAR 0 2
33613: PPUSH
33614: LD_VAR 0 3
33618: PPUSH
33619: LD_INT 10
33621: PPUSH
33622: CALL_OW 237
33626: GO 33606
33628: POP
33629: POP
// end ;
33630: GO 33579
33632: POP
33633: POP
// end ;
33634: LD_VAR 0 1
33638: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33639: LD_INT 0
33641: PPUSH
33642: PPUSH
33643: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33644: LD_ADDR_VAR 0 2
33648: PUSH
33649: LD_INT 22
33651: PUSH
33652: LD_OWVAR 2
33656: PUSH
33657: EMPTY
33658: LIST
33659: LIST
33660: PUSH
33661: LD_INT 21
33663: PUSH
33664: LD_INT 1
33666: PUSH
33667: EMPTY
33668: LIST
33669: LIST
33670: PUSH
33671: EMPTY
33672: LIST
33673: LIST
33674: PPUSH
33675: CALL_OW 69
33679: PUSH
33680: FOR_IN
33681: IFFALSE 33722
// begin for j := 1 to 4 do
33683: LD_ADDR_VAR 0 3
33687: PUSH
33688: DOUBLE
33689: LD_INT 1
33691: DEC
33692: ST_TO_ADDR
33693: LD_INT 4
33695: PUSH
33696: FOR_TO
33697: IFFALSE 33718
// SetSkill ( i , j , 10 ) ;
33699: LD_VAR 0 2
33703: PPUSH
33704: LD_VAR 0 3
33708: PPUSH
33709: LD_INT 10
33711: PPUSH
33712: CALL_OW 237
33716: GO 33696
33718: POP
33719: POP
// end ;
33720: GO 33680
33722: POP
33723: POP
// end ;
33724: LD_VAR 0 1
33728: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33729: LD_INT 0
33731: PPUSH
// uc_side := your_side ;
33732: LD_ADDR_OWVAR 20
33736: PUSH
33737: LD_OWVAR 2
33741: ST_TO_ADDR
// uc_nation := nation ;
33742: LD_ADDR_OWVAR 21
33746: PUSH
33747: LD_VAR 0 1
33751: ST_TO_ADDR
// InitHc ;
33752: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33756: LD_INT 0
33758: PPUSH
33759: LD_VAR 0 2
33763: PPUSH
33764: LD_VAR 0 3
33768: PPUSH
33769: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33773: LD_VAR 0 4
33777: PPUSH
33778: LD_VAR 0 5
33782: PPUSH
33783: CALL_OW 428
33787: PUSH
33788: LD_INT 0
33790: EQUAL
33791: IFFALSE 33815
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33793: CALL_OW 44
33797: PPUSH
33798: LD_VAR 0 4
33802: PPUSH
33803: LD_VAR 0 5
33807: PPUSH
33808: LD_INT 1
33810: PPUSH
33811: CALL_OW 48
// end ;
33815: LD_VAR 0 6
33819: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33820: LD_INT 0
33822: PPUSH
33823: PPUSH
// uc_side := your_side ;
33824: LD_ADDR_OWVAR 20
33828: PUSH
33829: LD_OWVAR 2
33833: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33834: LD_VAR 0 1
33838: PUSH
33839: LD_INT 1
33841: PUSH
33842: LD_INT 2
33844: PUSH
33845: LD_INT 3
33847: PUSH
33848: LD_INT 4
33850: PUSH
33851: LD_INT 5
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: LIST
33858: LIST
33859: LIST
33860: IN
33861: IFFALSE 33873
// uc_nation := nation_american else
33863: LD_ADDR_OWVAR 21
33867: PUSH
33868: LD_INT 1
33870: ST_TO_ADDR
33871: GO 33916
// if chassis in [ 11 , 12 , 13 , 14 ] then
33873: LD_VAR 0 1
33877: PUSH
33878: LD_INT 11
33880: PUSH
33881: LD_INT 12
33883: PUSH
33884: LD_INT 13
33886: PUSH
33887: LD_INT 14
33889: PUSH
33890: EMPTY
33891: LIST
33892: LIST
33893: LIST
33894: LIST
33895: IN
33896: IFFALSE 33908
// uc_nation := nation_arabian else
33898: LD_ADDR_OWVAR 21
33902: PUSH
33903: LD_INT 2
33905: ST_TO_ADDR
33906: GO 33916
// uc_nation := nation_russian ;
33908: LD_ADDR_OWVAR 21
33912: PUSH
33913: LD_INT 3
33915: ST_TO_ADDR
// vc_chassis := chassis ;
33916: LD_ADDR_OWVAR 37
33920: PUSH
33921: LD_VAR 0 1
33925: ST_TO_ADDR
// vc_engine := engine ;
33926: LD_ADDR_OWVAR 39
33930: PUSH
33931: LD_VAR 0 2
33935: ST_TO_ADDR
// vc_control := control ;
33936: LD_ADDR_OWVAR 38
33940: PUSH
33941: LD_VAR 0 3
33945: ST_TO_ADDR
// vc_weapon := weapon ;
33946: LD_ADDR_OWVAR 40
33950: PUSH
33951: LD_VAR 0 4
33955: ST_TO_ADDR
// un := CreateVehicle ;
33956: LD_ADDR_VAR 0 8
33960: PUSH
33961: CALL_OW 45
33965: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33966: LD_VAR 0 8
33970: PPUSH
33971: LD_INT 0
33973: PPUSH
33974: LD_INT 5
33976: PPUSH
33977: CALL_OW 12
33981: PPUSH
33982: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33986: LD_VAR 0 8
33990: PPUSH
33991: LD_VAR 0 5
33995: PPUSH
33996: LD_VAR 0 6
34000: PPUSH
34001: LD_INT 1
34003: PPUSH
34004: CALL_OW 48
// end ;
34008: LD_VAR 0 7
34012: RET
// export hInvincible ; every 1 do
34013: GO 34015
34015: DISABLE
// hInvincible := [ ] ;
34016: LD_ADDR_EXP 118
34020: PUSH
34021: EMPTY
34022: ST_TO_ADDR
34023: END
// every 10 do var i ;
34024: GO 34026
34026: DISABLE
34027: LD_INT 0
34029: PPUSH
// begin enable ;
34030: ENABLE
// if not hInvincible then
34031: LD_EXP 118
34035: NOT
34036: IFFALSE 34040
// exit ;
34038: GO 34084
// for i in hInvincible do
34040: LD_ADDR_VAR 0 1
34044: PUSH
34045: LD_EXP 118
34049: PUSH
34050: FOR_IN
34051: IFFALSE 34082
// if GetLives ( i ) < 1000 then
34053: LD_VAR 0 1
34057: PPUSH
34058: CALL_OW 256
34062: PUSH
34063: LD_INT 1000
34065: LESS
34066: IFFALSE 34080
// SetLives ( i , 1000 ) ;
34068: LD_VAR 0 1
34072: PPUSH
34073: LD_INT 1000
34075: PPUSH
34076: CALL_OW 234
34080: GO 34050
34082: POP
34083: POP
// end ;
34084: PPOPN 1
34086: END
// export function hHackInvincible ; var i ; begin
34087: LD_INT 0
34089: PPUSH
34090: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
34091: LD_ADDR_VAR 0 2
34095: PUSH
34096: LD_INT 2
34098: PUSH
34099: LD_INT 21
34101: PUSH
34102: LD_INT 1
34104: PUSH
34105: EMPTY
34106: LIST
34107: LIST
34108: PUSH
34109: LD_INT 21
34111: PUSH
34112: LD_INT 2
34114: PUSH
34115: EMPTY
34116: LIST
34117: LIST
34118: PUSH
34119: EMPTY
34120: LIST
34121: LIST
34122: LIST
34123: PPUSH
34124: CALL_OW 69
34128: PUSH
34129: FOR_IN
34130: IFFALSE 34191
// if IsSelected ( i ) then
34132: LD_VAR 0 2
34136: PPUSH
34137: CALL_OW 306
34141: IFFALSE 34189
// begin if i in hInvincible then
34143: LD_VAR 0 2
34147: PUSH
34148: LD_EXP 118
34152: IN
34153: IFFALSE 34173
// hInvincible := hInvincible diff i else
34155: LD_ADDR_EXP 118
34159: PUSH
34160: LD_EXP 118
34164: PUSH
34165: LD_VAR 0 2
34169: DIFF
34170: ST_TO_ADDR
34171: GO 34189
// hInvincible := hInvincible union i ;
34173: LD_ADDR_EXP 118
34177: PUSH
34178: LD_EXP 118
34182: PUSH
34183: LD_VAR 0 2
34187: UNION
34188: ST_TO_ADDR
// end ;
34189: GO 34129
34191: POP
34192: POP
// end ;
34193: LD_VAR 0 1
34197: RET
// export function hHackInvisible ; var i , j ; begin
34198: LD_INT 0
34200: PPUSH
34201: PPUSH
34202: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34203: LD_ADDR_VAR 0 2
34207: PUSH
34208: LD_INT 21
34210: PUSH
34211: LD_INT 1
34213: PUSH
34214: EMPTY
34215: LIST
34216: LIST
34217: PPUSH
34218: CALL_OW 69
34222: PUSH
34223: FOR_IN
34224: IFFALSE 34248
// if IsSelected ( i ) then
34226: LD_VAR 0 2
34230: PPUSH
34231: CALL_OW 306
34235: IFFALSE 34246
// ComForceInvisible ( i ) ;
34237: LD_VAR 0 2
34241: PPUSH
34242: CALL_OW 496
34246: GO 34223
34248: POP
34249: POP
// end ;
34250: LD_VAR 0 1
34254: RET
// export function hHackChangeYourSide ; begin
34255: LD_INT 0
34257: PPUSH
// if your_side = 8 then
34258: LD_OWVAR 2
34262: PUSH
34263: LD_INT 8
34265: EQUAL
34266: IFFALSE 34278
// your_side := 0 else
34268: LD_ADDR_OWVAR 2
34272: PUSH
34273: LD_INT 0
34275: ST_TO_ADDR
34276: GO 34292
// your_side := your_side + 1 ;
34278: LD_ADDR_OWVAR 2
34282: PUSH
34283: LD_OWVAR 2
34287: PUSH
34288: LD_INT 1
34290: PLUS
34291: ST_TO_ADDR
// end ;
34292: LD_VAR 0 1
34296: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34297: LD_INT 0
34299: PPUSH
34300: PPUSH
34301: PPUSH
// for i in all_units do
34302: LD_ADDR_VAR 0 2
34306: PUSH
34307: LD_OWVAR 3
34311: PUSH
34312: FOR_IN
34313: IFFALSE 34391
// if IsSelected ( i ) then
34315: LD_VAR 0 2
34319: PPUSH
34320: CALL_OW 306
34324: IFFALSE 34389
// begin j := GetSide ( i ) ;
34326: LD_ADDR_VAR 0 3
34330: PUSH
34331: LD_VAR 0 2
34335: PPUSH
34336: CALL_OW 255
34340: ST_TO_ADDR
// if j = 8 then
34341: LD_VAR 0 3
34345: PUSH
34346: LD_INT 8
34348: EQUAL
34349: IFFALSE 34361
// j := 0 else
34351: LD_ADDR_VAR 0 3
34355: PUSH
34356: LD_INT 0
34358: ST_TO_ADDR
34359: GO 34375
// j := j + 1 ;
34361: LD_ADDR_VAR 0 3
34365: PUSH
34366: LD_VAR 0 3
34370: PUSH
34371: LD_INT 1
34373: PLUS
34374: ST_TO_ADDR
// SetSide ( i , j ) ;
34375: LD_VAR 0 2
34379: PPUSH
34380: LD_VAR 0 3
34384: PPUSH
34385: CALL_OW 235
// end ;
34389: GO 34312
34391: POP
34392: POP
// end ;
34393: LD_VAR 0 1
34397: RET
// export function hHackFog ; begin
34398: LD_INT 0
34400: PPUSH
// FogOff ( true ) ;
34401: LD_INT 1
34403: PPUSH
34404: CALL_OW 344
// end ;
34408: LD_VAR 0 1
34412: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34413: LD_INT 0
34415: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34416: LD_VAR 0 1
34420: PPUSH
34421: LD_VAR 0 2
34425: PPUSH
34426: LD_VAR 0 3
34430: PPUSH
34431: LD_INT 1
34433: PPUSH
34434: LD_INT 1
34436: PPUSH
34437: CALL_OW 483
// CenterOnXY ( x , y ) ;
34441: LD_VAR 0 2
34445: PPUSH
34446: LD_VAR 0 3
34450: PPUSH
34451: CALL_OW 84
// end ;
34455: LD_VAR 0 4
34459: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34460: LD_INT 0
34462: PPUSH
34463: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34464: LD_VAR 0 1
34468: NOT
34469: IFTRUE 34488
34471: PUSH
34472: LD_VAR 0 2
34476: PPUSH
34477: LD_VAR 0 3
34481: PPUSH
34482: CALL_OW 488
34486: NOT
34487: OR
34488: IFTRUE 34523
34490: PUSH
34491: LD_VAR 0 1
34495: PPUSH
34496: CALL_OW 266
34500: PUSH
34501: LD_INT 3
34503: NONEQUAL
34504: IFFALSE 34522
34506: PUSH
34507: LD_VAR 0 1
34511: PPUSH
34512: CALL_OW 247
34516: PUSH
34517: LD_INT 1
34519: EQUAL
34520: NOT
34521: AND
34522: OR
34523: IFFALSE 34527
// exit ;
34525: GO 34809
// if GetType ( factory ) = unit_human then
34527: LD_VAR 0 1
34531: PPUSH
34532: CALL_OW 247
34536: PUSH
34537: LD_INT 1
34539: EQUAL
34540: IFFALSE 34557
// factory := IsInUnit ( factory ) ;
34542: LD_ADDR_VAR 0 1
34546: PUSH
34547: LD_VAR 0 1
34551: PPUSH
34552: CALL_OW 310
34556: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34557: LD_VAR 0 1
34561: PPUSH
34562: CALL_OW 266
34566: PUSH
34567: LD_INT 3
34569: NONEQUAL
34570: IFFALSE 34574
// exit ;
34572: GO 34809
// for i := 1 to Count ( factoryWaypoints ) do
34574: LD_ADDR_VAR 0 5
34578: PUSH
34579: DOUBLE
34580: LD_INT 1
34582: DEC
34583: ST_TO_ADDR
34584: LD_EXP 119
34588: PPUSH
34589: CALL 44613 0 1
34593: PUSH
34594: FOR_TO
34595: IFFALSE 34757
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
34597: LD_VAR 0 2
34601: PPUSH
34602: LD_VAR 0 3
34606: PPUSH
34607: CALL_OW 428
34611: PUSH
34612: LD_EXP 119
34616: PUSH
34617: LD_VAR 0 5
34621: ARRAY
34622: PUSH
34623: LD_INT 2
34625: ARRAY
34626: EQUAL
34627: IFFALSE 34659
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
34629: LD_ADDR_EXP 119
34633: PUSH
34634: LD_EXP 119
34638: PPUSH
34639: LD_VAR 0 5
34643: PPUSH
34644: CALL_OW 3
34648: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34649: CALL 34814 0 0
// exit ;
34653: POP
34654: POP
34655: GO 34809
// end else
34657: GO 34755
// if factory = factoryWaypoints [ i ] [ 2 ] then
34659: LD_VAR 0 1
34663: PUSH
34664: LD_EXP 119
34668: PUSH
34669: LD_VAR 0 5
34673: ARRAY
34674: PUSH
34675: LD_INT 2
34677: ARRAY
34678: EQUAL
34679: IFFALSE 34755
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
34681: LD_ADDR_EXP 119
34685: PUSH
34686: LD_EXP 119
34690: PPUSH
34691: LD_VAR 0 5
34695: PPUSH
34696: CALL_OW 3
34700: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
34701: LD_ADDR_EXP 119
34705: PUSH
34706: LD_EXP 119
34710: PPUSH
34711: LD_VAR 0 1
34715: PPUSH
34716: CALL_OW 255
34720: PUSH
34721: LD_VAR 0 1
34725: PUSH
34726: LD_VAR 0 2
34730: PUSH
34731: LD_VAR 0 3
34735: PUSH
34736: EMPTY
34737: LIST
34738: LIST
34739: LIST
34740: LIST
34741: PPUSH
34742: CALL 80589 0 2
34746: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34747: CALL 34814 0 0
// exit ;
34751: POP
34752: POP
34753: GO 34809
// end ; end ;
34755: GO 34594
34757: POP
34758: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
34759: LD_ADDR_EXP 119
34763: PUSH
34764: LD_EXP 119
34768: PPUSH
34769: LD_VAR 0 1
34773: PPUSH
34774: CALL_OW 255
34778: PUSH
34779: LD_VAR 0 1
34783: PUSH
34784: LD_VAR 0 2
34788: PUSH
34789: LD_VAR 0 3
34793: PUSH
34794: EMPTY
34795: LIST
34796: LIST
34797: LIST
34798: LIST
34799: PPUSH
34800: CALL 80589 0 2
34804: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34805: CALL 34814 0 0
// end ;
34809: LD_VAR 0 4
34813: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34814: LD_INT 0
34816: PPUSH
34817: PPUSH
34818: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34819: LD_STRING resetFactoryWaypoint();
34821: PPUSH
34822: CALL_OW 559
// if factoryWaypoints then
34826: LD_EXP 119
34830: IFFALSE 34951
// begin list := factoryWaypoints ;
34832: LD_ADDR_VAR 0 3
34836: PUSH
34837: LD_EXP 119
34841: ST_TO_ADDR
// for i := 1 to list do
34842: LD_ADDR_VAR 0 2
34846: PUSH
34847: DOUBLE
34848: LD_INT 1
34850: DEC
34851: ST_TO_ADDR
34852: LD_VAR 0 3
34856: PUSH
34857: FOR_TO
34858: IFFALSE 34949
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34860: LD_STRING setFactoryWaypointXY(
34862: PUSH
34863: LD_VAR 0 3
34867: PUSH
34868: LD_VAR 0 2
34872: ARRAY
34873: PUSH
34874: LD_INT 1
34876: ARRAY
34877: STR
34878: PUSH
34879: LD_STRING ,
34881: STR
34882: PUSH
34883: LD_VAR 0 3
34887: PUSH
34888: LD_VAR 0 2
34892: ARRAY
34893: PUSH
34894: LD_INT 2
34896: ARRAY
34897: STR
34898: PUSH
34899: LD_STRING ,
34901: STR
34902: PUSH
34903: LD_VAR 0 3
34907: PUSH
34908: LD_VAR 0 2
34912: ARRAY
34913: PUSH
34914: LD_INT 3
34916: ARRAY
34917: STR
34918: PUSH
34919: LD_STRING ,
34921: STR
34922: PUSH
34923: LD_VAR 0 3
34927: PUSH
34928: LD_VAR 0 2
34932: ARRAY
34933: PUSH
34934: LD_INT 4
34936: ARRAY
34937: STR
34938: PUSH
34939: LD_STRING )
34941: STR
34942: PPUSH
34943: CALL_OW 559
34947: GO 34857
34949: POP
34950: POP
// end ; end ;
34951: LD_VAR 0 1
34955: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34956: LD_INT 0
34958: PPUSH
// if HexInfo ( x , y ) = warehouse then
34959: LD_VAR 0 2
34963: PPUSH
34964: LD_VAR 0 3
34968: PPUSH
34969: CALL_OW 428
34973: PUSH
34974: LD_VAR 0 1
34978: EQUAL
34979: IFFALSE 35006
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34981: LD_ADDR_EXP 121
34985: PUSH
34986: LD_EXP 121
34990: PPUSH
34991: LD_VAR 0 1
34995: PPUSH
34996: LD_INT 0
34998: PPUSH
34999: CALL_OW 1
35003: ST_TO_ADDR
35004: GO 35057
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
35006: LD_ADDR_EXP 121
35010: PUSH
35011: LD_EXP 121
35015: PPUSH
35016: LD_VAR 0 1
35020: PPUSH
35021: LD_VAR 0 1
35025: PPUSH
35026: CALL_OW 255
35030: PUSH
35031: LD_VAR 0 1
35035: PUSH
35036: LD_VAR 0 2
35040: PUSH
35041: LD_VAR 0 3
35045: PUSH
35046: EMPTY
35047: LIST
35048: LIST
35049: LIST
35050: LIST
35051: PPUSH
35052: CALL_OW 1
35056: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
35057: CALL 35066 0 0
// end ;
35061: LD_VAR 0 4
35065: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
35066: LD_INT 0
35068: PPUSH
35069: PPUSH
35070: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
35071: LD_STRING resetWarehouseGatheringPoints();
35073: PPUSH
35074: CALL_OW 559
// if warehouseGatheringPoints then
35078: LD_EXP 121
35082: IFFALSE 35208
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
35084: LD_ADDR_VAR 0 3
35088: PUSH
35089: LD_EXP 121
35093: PPUSH
35094: CALL 84523 0 1
35098: ST_TO_ADDR
// for i := 1 to list do
35099: LD_ADDR_VAR 0 2
35103: PUSH
35104: DOUBLE
35105: LD_INT 1
35107: DEC
35108: ST_TO_ADDR
35109: LD_VAR 0 3
35113: PUSH
35114: FOR_TO
35115: IFFALSE 35206
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35117: LD_STRING setWarehouseGatheringPointXY(
35119: PUSH
35120: LD_VAR 0 3
35124: PUSH
35125: LD_VAR 0 2
35129: ARRAY
35130: PUSH
35131: LD_INT 1
35133: ARRAY
35134: STR
35135: PUSH
35136: LD_STRING ,
35138: STR
35139: PUSH
35140: LD_VAR 0 3
35144: PUSH
35145: LD_VAR 0 2
35149: ARRAY
35150: PUSH
35151: LD_INT 2
35153: ARRAY
35154: STR
35155: PUSH
35156: LD_STRING ,
35158: STR
35159: PUSH
35160: LD_VAR 0 3
35164: PUSH
35165: LD_VAR 0 2
35169: ARRAY
35170: PUSH
35171: LD_INT 3
35173: ARRAY
35174: STR
35175: PUSH
35176: LD_STRING ,
35178: STR
35179: PUSH
35180: LD_VAR 0 3
35184: PUSH
35185: LD_VAR 0 2
35189: ARRAY
35190: PUSH
35191: LD_INT 4
35193: ARRAY
35194: STR
35195: PUSH
35196: LD_STRING )
35198: STR
35199: PPUSH
35200: CALL_OW 559
35204: GO 35114
35206: POP
35207: POP
// end ; end ;
35208: LD_VAR 0 1
35212: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
35213: LD_EXP 121
35217: IFFALSE 35912
35219: GO 35221
35221: DISABLE
35222: LD_INT 0
35224: PPUSH
35225: PPUSH
35226: PPUSH
35227: PPUSH
35228: PPUSH
35229: PPUSH
35230: PPUSH
35231: PPUSH
35232: PPUSH
// begin enable ;
35233: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
35234: LD_ADDR_VAR 0 3
35238: PUSH
35239: LD_EXP 121
35243: PPUSH
35244: CALL 84523 0 1
35248: ST_TO_ADDR
// if not list then
35249: LD_VAR 0 3
35253: NOT
35254: IFFALSE 35258
// exit ;
35256: GO 35912
// for i := 1 to list do
35258: LD_ADDR_VAR 0 1
35262: PUSH
35263: DOUBLE
35264: LD_INT 1
35266: DEC
35267: ST_TO_ADDR
35268: LD_VAR 0 3
35272: PUSH
35273: FOR_TO
35274: IFFALSE 35910
// begin depot := list [ i ] [ 2 ] ;
35276: LD_ADDR_VAR 0 8
35280: PUSH
35281: LD_VAR 0 3
35285: PUSH
35286: LD_VAR 0 1
35290: ARRAY
35291: PUSH
35292: LD_INT 2
35294: ARRAY
35295: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
35296: LD_ADDR_VAR 0 5
35300: PUSH
35301: LD_VAR 0 3
35305: PUSH
35306: LD_VAR 0 1
35310: ARRAY
35311: PUSH
35312: LD_INT 1
35314: ARRAY
35315: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
35316: LD_VAR 0 8
35320: PPUSH
35321: CALL_OW 301
35325: IFTRUE 35344
35327: PUSH
35328: LD_VAR 0 5
35332: PUSH
35333: LD_VAR 0 8
35337: PPUSH
35338: CALL_OW 255
35342: NONEQUAL
35343: OR
35344: IFFALSE 35373
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
35346: LD_ADDR_EXP 121
35350: PUSH
35351: LD_EXP 121
35355: PPUSH
35356: LD_VAR 0 8
35360: PPUSH
35361: LD_INT 0
35363: PPUSH
35364: CALL_OW 1
35368: ST_TO_ADDR
// exit ;
35369: POP
35370: POP
35371: GO 35912
// end ; x := list [ i ] [ 3 ] ;
35373: LD_ADDR_VAR 0 6
35377: PUSH
35378: LD_VAR 0 3
35382: PUSH
35383: LD_VAR 0 1
35387: ARRAY
35388: PUSH
35389: LD_INT 3
35391: ARRAY
35392: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
35393: LD_ADDR_VAR 0 7
35397: PUSH
35398: LD_VAR 0 3
35402: PUSH
35403: LD_VAR 0 1
35407: ARRAY
35408: PUSH
35409: LD_INT 4
35411: ARRAY
35412: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
35413: LD_ADDR_VAR 0 9
35417: PUSH
35418: LD_VAR 0 6
35422: PPUSH
35423: LD_VAR 0 7
35427: PPUSH
35428: LD_INT 16
35430: PPUSH
35431: CALL 83097 0 3
35435: ST_TO_ADDR
// if not cratesNearbyPoint then
35436: LD_VAR 0 9
35440: NOT
35441: IFFALSE 35447
// exit ;
35443: POP
35444: POP
35445: GO 35912
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35447: LD_ADDR_VAR 0 4
35451: PUSH
35452: LD_INT 22
35454: PUSH
35455: LD_VAR 0 5
35459: PUSH
35460: EMPTY
35461: LIST
35462: LIST
35463: PUSH
35464: LD_INT 3
35466: PUSH
35467: LD_INT 60
35469: PUSH
35470: EMPTY
35471: LIST
35472: PUSH
35473: EMPTY
35474: LIST
35475: LIST
35476: PUSH
35477: LD_INT 91
35479: PUSH
35480: LD_VAR 0 8
35484: PUSH
35485: LD_INT 6
35487: PUSH
35488: EMPTY
35489: LIST
35490: LIST
35491: LIST
35492: PUSH
35493: LD_INT 2
35495: PUSH
35496: LD_INT 25
35498: PUSH
35499: LD_INT 2
35501: PUSH
35502: EMPTY
35503: LIST
35504: LIST
35505: PUSH
35506: LD_INT 25
35508: PUSH
35509: LD_INT 16
35511: PUSH
35512: EMPTY
35513: LIST
35514: LIST
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: LIST
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: LIST
35525: LIST
35526: PPUSH
35527: CALL_OW 69
35531: PUSH
35532: LD_VAR 0 8
35536: PPUSH
35537: CALL_OW 313
35541: PPUSH
35542: LD_INT 3
35544: PUSH
35545: LD_INT 60
35547: PUSH
35548: EMPTY
35549: LIST
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: PUSH
35555: LD_INT 2
35557: PUSH
35558: LD_INT 25
35560: PUSH
35561: LD_INT 2
35563: PUSH
35564: EMPTY
35565: LIST
35566: LIST
35567: PUSH
35568: LD_INT 25
35570: PUSH
35571: LD_INT 16
35573: PUSH
35574: EMPTY
35575: LIST
35576: LIST
35577: PUSH
35578: EMPTY
35579: LIST
35580: LIST
35581: LIST
35582: PUSH
35583: EMPTY
35584: LIST
35585: LIST
35586: PPUSH
35587: CALL_OW 72
35591: UNION
35592: ST_TO_ADDR
// if tmp then
35593: LD_VAR 0 4
35597: IFFALSE 35677
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35599: LD_ADDR_VAR 0 4
35603: PUSH
35604: LD_VAR 0 4
35608: PPUSH
35609: LD_INT 3
35611: PPUSH
35612: CALL 80904 0 2
35616: ST_TO_ADDR
// for j in tmp do
35617: LD_ADDR_VAR 0 2
35621: PUSH
35622: LD_VAR 0 4
35626: PUSH
35627: FOR_IN
35628: IFFALSE 35671
// begin if IsInUnit ( j ) then
35630: LD_VAR 0 2
35634: PPUSH
35635: CALL_OW 310
35639: IFFALSE 35650
// ComExit ( j ) ;
35641: LD_VAR 0 2
35645: PPUSH
35646: CALL 80987 0 1
// AddComCollect ( j , x , y ) ;
35650: LD_VAR 0 2
35654: PPUSH
35655: LD_VAR 0 6
35659: PPUSH
35660: LD_VAR 0 7
35664: PPUSH
35665: CALL_OW 177
// end ;
35669: GO 35627
35671: POP
35672: POP
// exit ;
35673: POP
35674: POP
35675: GO 35912
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35677: LD_ADDR_VAR 0 4
35681: PUSH
35682: LD_INT 22
35684: PUSH
35685: LD_VAR 0 5
35689: PUSH
35690: EMPTY
35691: LIST
35692: LIST
35693: PUSH
35694: LD_INT 91
35696: PUSH
35697: LD_VAR 0 8
35701: PUSH
35702: LD_INT 8
35704: PUSH
35705: EMPTY
35706: LIST
35707: LIST
35708: LIST
35709: PUSH
35710: LD_INT 2
35712: PUSH
35713: LD_INT 34
35715: PUSH
35716: LD_INT 12
35718: PUSH
35719: EMPTY
35720: LIST
35721: LIST
35722: PUSH
35723: LD_INT 34
35725: PUSH
35726: LD_INT 51
35728: PUSH
35729: EMPTY
35730: LIST
35731: LIST
35732: PUSH
35733: LD_INT 34
35735: PUSH
35736: LD_INT 32
35738: PUSH
35739: EMPTY
35740: LIST
35741: LIST
35742: PUSH
35743: LD_INT 34
35745: PUSH
35746: LD_INT 89
35748: PUSH
35749: EMPTY
35750: LIST
35751: LIST
35752: PUSH
35753: EMPTY
35754: LIST
35755: LIST
35756: LIST
35757: LIST
35758: LIST
35759: PUSH
35760: EMPTY
35761: LIST
35762: LIST
35763: LIST
35764: PPUSH
35765: CALL_OW 69
35769: ST_TO_ADDR
// if tmp then
35770: LD_VAR 0 4
35774: IFFALSE 35908
// begin for j in tmp do
35776: LD_ADDR_VAR 0 2
35780: PUSH
35781: LD_VAR 0 4
35785: PUSH
35786: FOR_IN
35787: IFFALSE 35906
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35789: LD_VAR 0 2
35793: PPUSH
35794: CALL_OW 262
35798: PUSH
35799: LD_INT 3
35801: EQUAL
35802: IFTRUE 35819
35804: PUSH
35805: LD_VAR 0 2
35809: PPUSH
35810: CALL_OW 261
35814: PUSH
35815: LD_INT 20
35817: GREATER
35818: OR
35819: IFFALSE 35833
35821: PUSH
35822: LD_VAR 0 2
35826: PPUSH
35827: CALL_OW 314
35831: NOT
35832: AND
35833: IFFALSE 35863
35835: PUSH
35836: LD_VAR 0 2
35840: PPUSH
35841: CALL_OW 263
35845: PUSH
35846: LD_INT 1
35848: NONEQUAL
35849: IFTRUE 35862
35851: PUSH
35852: LD_VAR 0 2
35856: PPUSH
35857: CALL_OW 311
35861: OR
35862: AND
35863: IFFALSE 35904
// begin ComCollect ( j , x , y ) ;
35865: LD_VAR 0 2
35869: PPUSH
35870: LD_VAR 0 6
35874: PPUSH
35875: LD_VAR 0 7
35879: PPUSH
35880: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35884: LD_VAR 0 2
35888: PPUSH
35889: LD_VAR 0 8
35893: PPUSH
35894: CALL_OW 172
// exit ;
35898: POP
35899: POP
35900: POP
35901: POP
35902: GO 35912
// end ;
35904: GO 35786
35906: POP
35907: POP
// end ; end ;
35908: GO 35273
35910: POP
35911: POP
// end ; end_of_file
35912: PPOPN 9
35914: END
// export function SOS_UnitDestroyed ( un ) ; begin
35915: LD_INT 0
35917: PPUSH
// ComRadiation ( un ) ;
35918: LD_VAR 0 1
35922: PPUSH
35923: CALL 37085 0 1
// end ;
35927: LD_VAR 0 2
35931: RET
// export function SOS_UnitKamikazed ( un ) ; begin
35932: LD_INT 0
35934: PPUSH
// ComRadiation ( un ) ;
35935: LD_VAR 0 1
35939: PPUSH
35940: CALL 37085 0 1
// end ;
35944: LD_VAR 0 2
35948: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35949: LD_INT 0
35951: PPUSH
// end ;
35952: LD_VAR 0 4
35956: RET
// export function SOS_Command ( cmd ) ; begin
35957: LD_INT 0
35959: PPUSH
// end ;
35960: LD_VAR 0 2
35964: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35965: LD_INT 0
35967: PPUSH
// end ;
35968: LD_VAR 0 6
35972: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
35973: LD_INT 0
35975: PPUSH
35976: PPUSH
35977: PPUSH
35978: PPUSH
35979: PPUSH
// if not vehicle or not factory then
35980: LD_VAR 0 1
35984: NOT
35985: IFTRUE 35994
35987: PUSH
35988: LD_VAR 0 2
35992: NOT
35993: OR
35994: IFFALSE 35998
// exit ;
35996: GO 36660
// weapon := GetWeapon ( vehicle ) ;
35998: LD_ADDR_VAR 0 7
36002: PUSH
36003: LD_VAR 0 1
36007: PPUSH
36008: CALL_OW 264
36012: ST_TO_ADDR
// if weapon = ar_miner then
36013: LD_VAR 0 7
36017: PUSH
36018: LD_INT 81
36020: EQUAL
36021: IFFALSE 36078
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
36023: LD_ADDR_EXP 130
36027: PUSH
36028: LD_EXP 130
36032: PPUSH
36033: LD_EXP 130
36037: PUSH
36038: LD_INT 1
36040: PLUS
36041: PPUSH
36042: LD_VAR 0 1
36046: PPUSH
36047: CALL_OW 1
36051: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
36052: LD_ADDR_EXP 131
36056: PUSH
36057: LD_EXP 131
36061: PPUSH
36062: LD_EXP 131
36066: PUSH
36067: LD_INT 1
36069: PLUS
36070: PPUSH
36071: EMPTY
36072: PPUSH
36073: CALL_OW 1
36077: ST_TO_ADDR
// end ; if not factoryWaypoints then
36078: LD_EXP 119
36082: NOT
36083: IFFALSE 36087
// exit ;
36085: GO 36660
// for i := 1 to Count ( factoryWaypoints ) do
36087: LD_ADDR_VAR 0 4
36091: PUSH
36092: DOUBLE
36093: LD_INT 1
36095: DEC
36096: ST_TO_ADDR
36097: LD_EXP 119
36101: PPUSH
36102: CALL 44613 0 1
36106: PUSH
36107: FOR_TO
36108: IFFALSE 36658
// if factoryWaypoints [ i ] [ 2 ] = factory then
36110: LD_EXP 119
36114: PUSH
36115: LD_VAR 0 4
36119: ARRAY
36120: PUSH
36121: LD_INT 2
36123: ARRAY
36124: PUSH
36125: LD_VAR 0 2
36129: EQUAL
36130: IFFALSE 36656
// begin if GetControl ( vehicle ) = control_manual then
36132: LD_VAR 0 1
36136: PPUSH
36137: CALL_OW 263
36141: PUSH
36142: LD_INT 1
36144: EQUAL
36145: IFFALSE 36509
// begin driver := IsDrivenBy ( vehicle ) ;
36147: LD_ADDR_VAR 0 5
36151: PUSH
36152: LD_VAR 0 1
36156: PPUSH
36157: CALL_OW 311
36161: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
36162: LD_VAR 0 5
36166: PUSH
36167: LD_EXP 120
36171: IN
36172: IFTRUE 36186
36174: PUSH
36175: LD_VAR 0 1
36179: PUSH
36180: LD_EXP 120
36184: IN
36185: OR
36186: IFFALSE 36192
// exit ;
36188: POP
36189: POP
36190: GO 36660
// if not HasTask ( driver ) then
36192: LD_VAR 0 5
36196: PPUSH
36197: CALL_OW 314
36201: NOT
36202: IFFALSE 36507
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
36204: LD_ADDR_EXP 120
36208: PUSH
36209: LD_EXP 120
36213: PPUSH
36214: LD_VAR 0 5
36218: PPUSH
36219: CALL 80589 0 2
36223: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
36224: LD_ADDR_EXP 120
36228: PUSH
36229: LD_EXP 120
36233: PPUSH
36234: LD_VAR 0 1
36238: PPUSH
36239: CALL 80589 0 2
36243: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36244: LD_ADDR_VAR 0 6
36248: PUSH
36249: LD_EXP 119
36253: PUSH
36254: LD_VAR 0 4
36258: ARRAY
36259: PUSH
36260: LD_INT 3
36262: ARRAY
36263: PPUSH
36264: LD_EXP 119
36268: PUSH
36269: LD_VAR 0 4
36273: ARRAY
36274: PUSH
36275: LD_INT 4
36277: ARRAY
36278: PPUSH
36279: CALL_OW 428
36283: ST_TO_ADDR
// if hex then
36284: LD_VAR 0 6
36288: IFFALSE 36306
// ComMoveUnit ( driver , hex ) else
36290: LD_VAR 0 5
36294: PPUSH
36295: LD_VAR 0 6
36299: PPUSH
36300: CALL_OW 112
36304: GO 36390
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
36306: LD_VAR 0 1
36310: PPUSH
36311: LD_EXP 119
36315: PUSH
36316: LD_VAR 0 4
36320: ARRAY
36321: PUSH
36322: LD_INT 3
36324: ARRAY
36325: PPUSH
36326: LD_EXP 119
36330: PUSH
36331: LD_VAR 0 4
36335: ARRAY
36336: PUSH
36337: LD_INT 4
36339: ARRAY
36340: PPUSH
36341: CALL_OW 297
36345: PUSH
36346: LD_INT 0
36348: GREATER
36349: IFFALSE 36390
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36351: LD_VAR 0 5
36355: PPUSH
36356: LD_EXP 119
36360: PUSH
36361: LD_VAR 0 4
36365: ARRAY
36366: PUSH
36367: LD_INT 3
36369: ARRAY
36370: PPUSH
36371: LD_EXP 119
36375: PUSH
36376: LD_VAR 0 4
36380: ARRAY
36381: PUSH
36382: LD_INT 4
36384: ARRAY
36385: PPUSH
36386: CALL_OW 111
// AddComExitVehicle ( driver ) ;
36390: LD_VAR 0 5
36394: PPUSH
36395: CALL_OW 181
// if Multiplayer then
36399: LD_OWVAR 4
36403: IFFALSE 36452
// begin repeat wait ( 10 ) ;
36405: LD_INT 10
36407: PPUSH
36408: CALL_OW 67
// until not IsInUnit ( driver ) ;
36412: LD_VAR 0 5
36416: PPUSH
36417: CALL_OW 310
36421: NOT
36422: IFFALSE 36405
// if not HasTask ( driver ) then
36424: LD_VAR 0 5
36428: PPUSH
36429: CALL_OW 314
36433: NOT
36434: IFFALSE 36450
// ComEnterUnit ( driver , factory ) ;
36436: LD_VAR 0 5
36440: PPUSH
36441: LD_VAR 0 2
36445: PPUSH
36446: CALL_OW 120
// end else
36450: GO 36466
// AddComEnterUnit ( driver , factory ) ;
36452: LD_VAR 0 5
36456: PPUSH
36457: LD_VAR 0 2
36461: PPUSH
36462: CALL_OW 180
// wait ( 0 0$1 ) ;
36466: LD_INT 35
36468: PPUSH
36469: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
36473: LD_ADDR_EXP 120
36477: PUSH
36478: LD_EXP 120
36482: PUSH
36483: LD_VAR 0 5
36487: DIFF
36488: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
36489: LD_ADDR_EXP 120
36493: PUSH
36494: LD_EXP 120
36498: PUSH
36499: LD_VAR 0 1
36503: DIFF
36504: ST_TO_ADDR
// break ;
36505: GO 36658
// end ; end else
36507: GO 36656
// if GetControl ( vehicle ) = control_remote then
36509: LD_VAR 0 1
36513: PPUSH
36514: CALL_OW 263
36518: PUSH
36519: LD_INT 2
36521: EQUAL
36522: IFFALSE 36608
// begin wait ( 0 0$2 ) ;
36524: LD_INT 70
36526: PPUSH
36527: CALL_OW 67
// repeat wait ( 10 ) ;
36531: LD_INT 10
36533: PPUSH
36534: CALL_OW 67
// Connect ( vehicle ) ;
36538: LD_VAR 0 1
36542: PPUSH
36543: CALL 50891 0 1
// until IsControledBy ( vehicle ) ;
36547: LD_VAR 0 1
36551: PPUSH
36552: CALL_OW 312
36556: IFFALSE 36531
// wait ( 10 ) ;
36558: LD_INT 10
36560: PPUSH
36561: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36565: LD_VAR 0 1
36569: PPUSH
36570: LD_EXP 119
36574: PUSH
36575: LD_VAR 0 4
36579: ARRAY
36580: PUSH
36581: LD_INT 3
36583: ARRAY
36584: PPUSH
36585: LD_EXP 119
36589: PUSH
36590: LD_VAR 0 4
36594: ARRAY
36595: PUSH
36596: LD_INT 4
36598: ARRAY
36599: PPUSH
36600: CALL_OW 111
// break ;
36604: GO 36658
// end else
36606: GO 36656
// begin wait ( 0 0$3 ) ;
36608: LD_INT 105
36610: PPUSH
36611: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36615: LD_VAR 0 1
36619: PPUSH
36620: LD_EXP 119
36624: PUSH
36625: LD_VAR 0 4
36629: ARRAY
36630: PUSH
36631: LD_INT 3
36633: ARRAY
36634: PPUSH
36635: LD_EXP 119
36639: PUSH
36640: LD_VAR 0 4
36644: ARRAY
36645: PUSH
36646: LD_INT 4
36648: ARRAY
36649: PPUSH
36650: CALL_OW 111
// break ;
36654: GO 36658
// end ; end ;
36656: GO 36107
36658: POP
36659: POP
// end ;
36660: LD_VAR 0 3
36664: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
36665: LD_INT 0
36667: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
36668: LD_VAR 0 1
36672: PUSH
36673: LD_INT 250
36675: EQUAL
36676: IFFALSE 36693
36678: PUSH
36679: LD_VAR 0 2
36683: PPUSH
36684: CALL_OW 264
36688: PUSH
36689: LD_INT 81
36691: EQUAL
36692: AND
36693: IFFALSE 36714
// MinerPlaceMine ( unit , x , y ) ;
36695: LD_VAR 0 2
36699: PPUSH
36700: LD_VAR 0 4
36704: PPUSH
36705: LD_VAR 0 5
36709: PPUSH
36710: CALL 40060 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
36714: LD_VAR 0 1
36718: PUSH
36719: LD_INT 251
36721: EQUAL
36722: IFFALSE 36739
36724: PUSH
36725: LD_VAR 0 2
36729: PPUSH
36730: CALL_OW 264
36734: PUSH
36735: LD_INT 81
36737: EQUAL
36738: AND
36739: IFFALSE 36760
// MinerDetonateMine ( unit , x , y ) ;
36741: LD_VAR 0 2
36745: PPUSH
36746: LD_VAR 0 4
36750: PPUSH
36751: LD_VAR 0 5
36755: PPUSH
36756: CALL 40467 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
36760: LD_VAR 0 1
36764: PUSH
36765: LD_INT 252
36767: EQUAL
36768: IFFALSE 36785
36770: PUSH
36771: LD_VAR 0 2
36775: PPUSH
36776: CALL_OW 264
36780: PUSH
36781: LD_INT 81
36783: EQUAL
36784: AND
36785: IFFALSE 36806
// MinerCreateMinefield ( unit , x , y ) ;
36787: LD_VAR 0 2
36791: PPUSH
36792: LD_VAR 0 4
36796: PPUSH
36797: LD_VAR 0 5
36801: PPUSH
36802: CALL 40699 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
36806: LD_VAR 0 1
36810: PUSH
36811: LD_INT 253
36813: EQUAL
36814: IFFALSE 36831
36816: PUSH
36817: LD_VAR 0 2
36821: PPUSH
36822: CALL_OW 257
36826: PUSH
36827: LD_INT 5
36829: EQUAL
36830: AND
36831: IFFALSE 36852
// ComBinocular ( unit , x , y ) ;
36833: LD_VAR 0 2
36837: PPUSH
36838: LD_VAR 0 4
36842: PPUSH
36843: LD_VAR 0 5
36847: PPUSH
36848: CALL 41074 0 3
// if selectedUnit then
36852: LD_VAR 0 3
36856: IFFALSE 36916
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36858: LD_VAR 0 1
36862: PUSH
36863: LD_INT 254
36865: EQUAL
36866: IFFALSE 36883
36868: PUSH
36869: LD_VAR 0 2
36873: PPUSH
36874: CALL_OW 264
36878: PUSH
36879: LD_INT 99
36881: EQUAL
36882: AND
36883: IFFALSE 36900
36885: PUSH
36886: LD_VAR 0 3
36890: PPUSH
36891: CALL_OW 263
36895: PUSH
36896: LD_INT 3
36898: EQUAL
36899: AND
36900: IFFALSE 36916
// HackDestroyVehicle ( unit , selectedUnit ) ;
36902: LD_VAR 0 2
36906: PPUSH
36907: LD_VAR 0 3
36911: PPUSH
36912: CALL 39250 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36916: LD_VAR 0 1
36920: PUSH
36921: LD_INT 255
36923: EQUAL
36924: IFFALSE 36948
36926: PUSH
36927: LD_VAR 0 2
36931: PPUSH
36932: CALL_OW 264
36936: PUSH
36937: LD_INT 14
36939: PUSH
36940: LD_INT 53
36942: PUSH
36943: EMPTY
36944: LIST
36945: LIST
36946: IN
36947: AND
36948: IFFALSE 36966
36950: PUSH
36951: LD_VAR 0 4
36955: PPUSH
36956: LD_VAR 0 5
36960: PPUSH
36961: CALL_OW 488
36965: AND
36966: IFFALSE 36990
// CutTreeXYR ( unit , x , y , 12 ) ;
36968: LD_VAR 0 2
36972: PPUSH
36973: LD_VAR 0 4
36977: PPUSH
36978: LD_VAR 0 5
36982: PPUSH
36983: LD_INT 12
36985: PPUSH
36986: CALL 37181 0 4
// if cmd = 256 then
36990: LD_VAR 0 1
36994: PUSH
36995: LD_INT 256
36997: EQUAL
36998: IFFALSE 37019
// SetFactoryWaypoint ( unit , x , y ) ;
37000: LD_VAR 0 2
37004: PPUSH
37005: LD_VAR 0 4
37009: PPUSH
37010: LD_VAR 0 5
37014: PPUSH
37015: CALL 34460 0 3
// if cmd = 257 then
37019: LD_VAR 0 1
37023: PUSH
37024: LD_INT 257
37026: EQUAL
37027: IFFALSE 37048
// SetWarehouseGatheringPoint ( unit , x , y ) ;
37029: LD_VAR 0 2
37033: PPUSH
37034: LD_VAR 0 4
37038: PPUSH
37039: LD_VAR 0 5
37043: PPUSH
37044: CALL 34956 0 3
// if cmd = 258 then
37048: LD_VAR 0 1
37052: PUSH
37053: LD_INT 258
37055: EQUAL
37056: IFFALSE 37080
// BurnTreeXYR ( unit , x , y , 8 ) ;
37058: LD_VAR 0 2
37062: PPUSH
37063: LD_VAR 0 4
37067: PPUSH
37068: LD_VAR 0 5
37072: PPUSH
37073: LD_INT 8
37075: PPUSH
37076: CALL 37603 0 4
// end ;
37080: LD_VAR 0 6
37084: RET
// export function ComRadiation ( un ) ; var eff ; begin
37085: LD_INT 0
37087: PPUSH
37088: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
37089: LD_VAR 0 1
37093: PPUSH
37094: CALL_OW 264
37098: PUSH
37099: LD_INT 91
37101: NONEQUAL
37102: IFFALSE 37106
// exit ;
37104: GO 37176
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
37106: LD_INT 68
37108: PPUSH
37109: LD_VAR 0 1
37113: PPUSH
37114: CALL_OW 255
37118: PPUSH
37119: CALL_OW 321
37123: PUSH
37124: LD_INT 2
37126: EQUAL
37127: IFFALSE 37139
// eff := 50 else
37129: LD_ADDR_VAR 0 3
37133: PUSH
37134: LD_INT 50
37136: ST_TO_ADDR
37137: GO 37147
// eff := 25 ;
37139: LD_ADDR_VAR 0 3
37143: PUSH
37144: LD_INT 25
37146: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
37147: LD_VAR 0 1
37151: PPUSH
37152: CALL_OW 250
37156: PPUSH
37157: LD_VAR 0 1
37161: PPUSH
37162: CALL_OW 251
37166: PPUSH
37167: LD_VAR 0 3
37171: PPUSH
37172: CALL_OW 495
// end ;
37176: LD_VAR 0 2
37180: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
37181: LD_INT 0
37183: PPUSH
37184: PPUSH
37185: PPUSH
37186: PPUSH
37187: PPUSH
37188: PPUSH
37189: PPUSH
37190: PPUSH
37191: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
37192: LD_VAR 0 1
37196: PPUSH
37197: CALL_OW 302
37201: NOT
37202: IFTRUE 37221
37204: PUSH
37205: LD_VAR 0 2
37209: PPUSH
37210: LD_VAR 0 3
37214: PPUSH
37215: CALL_OW 488
37219: NOT
37220: OR
37221: IFTRUE 37230
37223: PUSH
37224: LD_VAR 0 4
37228: NOT
37229: OR
37230: IFFALSE 37234
// exit ;
37232: GO 37598
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
37234: LD_VAR 0 1
37238: PPUSH
37239: CALL_OW 437
37243: PPUSH
37244: CALL 44613 0 1
37248: PUSH
37249: LD_INT 10
37251: GREATER
37252: IFFALSE 37256
// exit ;
37254: GO 37598
// list := [ ] ;
37256: LD_ADDR_VAR 0 13
37260: PUSH
37261: EMPTY
37262: ST_TO_ADDR
// if x - r < 0 then
37263: LD_VAR 0 2
37267: PUSH
37268: LD_VAR 0 4
37272: MINUS
37273: PUSH
37274: LD_INT 0
37276: LESS
37277: IFFALSE 37289
// min_x := 0 else
37279: LD_ADDR_VAR 0 7
37283: PUSH
37284: LD_INT 0
37286: ST_TO_ADDR
37287: GO 37305
// min_x := x - r ;
37289: LD_ADDR_VAR 0 7
37293: PUSH
37294: LD_VAR 0 2
37298: PUSH
37299: LD_VAR 0 4
37303: MINUS
37304: ST_TO_ADDR
// if y - r < 0 then
37305: LD_VAR 0 3
37309: PUSH
37310: LD_VAR 0 4
37314: MINUS
37315: PUSH
37316: LD_INT 0
37318: LESS
37319: IFFALSE 37331
// min_y := 0 else
37321: LD_ADDR_VAR 0 8
37325: PUSH
37326: LD_INT 0
37328: ST_TO_ADDR
37329: GO 37347
// min_y := y - r ;
37331: LD_ADDR_VAR 0 8
37335: PUSH
37336: LD_VAR 0 3
37340: PUSH
37341: LD_VAR 0 4
37345: MINUS
37346: ST_TO_ADDR
// max_x := x + r ;
37347: LD_ADDR_VAR 0 9
37351: PUSH
37352: LD_VAR 0 2
37356: PUSH
37357: LD_VAR 0 4
37361: PLUS
37362: ST_TO_ADDR
// max_y := y + r ;
37363: LD_ADDR_VAR 0 10
37367: PUSH
37368: LD_VAR 0 3
37372: PUSH
37373: LD_VAR 0 4
37377: PLUS
37378: ST_TO_ADDR
// for _x = min_x to max_x do
37379: LD_ADDR_VAR 0 11
37383: PUSH
37384: DOUBLE
37385: LD_VAR 0 7
37389: DEC
37390: ST_TO_ADDR
37391: LD_VAR 0 9
37395: PUSH
37396: FOR_TO
37397: IFFALSE 37516
// for _y = min_y to max_y do
37399: LD_ADDR_VAR 0 12
37403: PUSH
37404: DOUBLE
37405: LD_VAR 0 8
37409: DEC
37410: ST_TO_ADDR
37411: LD_VAR 0 10
37415: PUSH
37416: FOR_TO
37417: IFFALSE 37512
// begin if not ValidHex ( _x , _y ) then
37419: LD_VAR 0 11
37423: PPUSH
37424: LD_VAR 0 12
37428: PPUSH
37429: CALL_OW 488
37433: NOT
37434: IFFALSE 37438
// continue ;
37436: GO 37416
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37438: LD_VAR 0 11
37442: PPUSH
37443: LD_VAR 0 12
37447: PPUSH
37448: CALL_OW 351
37452: IFFALSE 37470
37454: PUSH
37455: LD_VAR 0 11
37459: PPUSH
37460: LD_VAR 0 12
37464: PPUSH
37465: CALL_OW 554
37469: AND
37470: IFFALSE 37510
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37472: LD_ADDR_VAR 0 13
37476: PUSH
37477: LD_VAR 0 13
37481: PPUSH
37482: LD_VAR 0 13
37486: PUSH
37487: LD_INT 1
37489: PLUS
37490: PPUSH
37491: LD_VAR 0 11
37495: PUSH
37496: LD_VAR 0 12
37500: PUSH
37501: EMPTY
37502: LIST
37503: LIST
37504: PPUSH
37505: CALL_OW 2
37509: ST_TO_ADDR
// end ;
37510: GO 37416
37512: POP
37513: POP
37514: GO 37396
37516: POP
37517: POP
// if not list then
37518: LD_VAR 0 13
37522: NOT
37523: IFFALSE 37527
// exit ;
37525: GO 37598
// for i in list do
37527: LD_ADDR_VAR 0 6
37531: PUSH
37532: LD_VAR 0 13
37536: PUSH
37537: FOR_IN
37538: IFFALSE 37596
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
37540: LD_VAR 0 1
37544: PPUSH
37545: LD_STRING M
37547: PUSH
37548: LD_VAR 0 6
37552: PUSH
37553: LD_INT 1
37555: ARRAY
37556: PUSH
37557: LD_VAR 0 6
37561: PUSH
37562: LD_INT 2
37564: ARRAY
37565: PUSH
37566: LD_INT 0
37568: PUSH
37569: LD_INT 0
37571: PUSH
37572: LD_INT 0
37574: PUSH
37575: LD_INT 0
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: LIST
37582: LIST
37583: LIST
37584: LIST
37585: LIST
37586: PUSH
37587: EMPTY
37588: LIST
37589: PPUSH
37590: CALL_OW 447
37594: GO 37537
37596: POP
37597: POP
// end ;
37598: LD_VAR 0 5
37602: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
37603: LD_INT 0
37605: PPUSH
37606: PPUSH
37607: PPUSH
37608: PPUSH
37609: PPUSH
37610: PPUSH
37611: PPUSH
37612: PPUSH
37613: PPUSH
37614: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
37615: LD_VAR 0 1
37619: PPUSH
37620: CALL_OW 302
37624: NOT
37625: IFTRUE 37644
37627: PUSH
37628: LD_VAR 0 2
37632: PPUSH
37633: LD_VAR 0 3
37637: PPUSH
37638: CALL_OW 488
37642: NOT
37643: OR
37644: IFTRUE 37653
37646: PUSH
37647: LD_VAR 0 4
37651: NOT
37652: OR
37653: IFFALSE 37657
// exit ;
37655: GO 38196
// if Count ( GetTaskList ( flame ) ) > 10 then
37657: LD_VAR 0 1
37661: PPUSH
37662: CALL_OW 437
37666: PPUSH
37667: CALL 44613 0 1
37671: PUSH
37672: LD_INT 10
37674: GREATER
37675: IFFALSE 37679
// exit ;
37677: GO 38196
// list := [ ] ;
37679: LD_ADDR_VAR 0 13
37683: PUSH
37684: EMPTY
37685: ST_TO_ADDR
// if x - r < 0 then
37686: LD_VAR 0 2
37690: PUSH
37691: LD_VAR 0 4
37695: MINUS
37696: PUSH
37697: LD_INT 0
37699: LESS
37700: IFFALSE 37712
// min_x := 0 else
37702: LD_ADDR_VAR 0 7
37706: PUSH
37707: LD_INT 0
37709: ST_TO_ADDR
37710: GO 37728
// min_x := x - r ;
37712: LD_ADDR_VAR 0 7
37716: PUSH
37717: LD_VAR 0 2
37721: PUSH
37722: LD_VAR 0 4
37726: MINUS
37727: ST_TO_ADDR
// if y - r < 0 then
37728: LD_VAR 0 3
37732: PUSH
37733: LD_VAR 0 4
37737: MINUS
37738: PUSH
37739: LD_INT 0
37741: LESS
37742: IFFALSE 37754
// min_y := 0 else
37744: LD_ADDR_VAR 0 8
37748: PUSH
37749: LD_INT 0
37751: ST_TO_ADDR
37752: GO 37770
// min_y := y - r ;
37754: LD_ADDR_VAR 0 8
37758: PUSH
37759: LD_VAR 0 3
37763: PUSH
37764: LD_VAR 0 4
37768: MINUS
37769: ST_TO_ADDR
// max_x := x + r ;
37770: LD_ADDR_VAR 0 9
37774: PUSH
37775: LD_VAR 0 2
37779: PUSH
37780: LD_VAR 0 4
37784: PLUS
37785: ST_TO_ADDR
// max_y := y + r ;
37786: LD_ADDR_VAR 0 10
37790: PUSH
37791: LD_VAR 0 3
37795: PUSH
37796: LD_VAR 0 4
37800: PLUS
37801: ST_TO_ADDR
// for _x = min_x to max_x do
37802: LD_ADDR_VAR 0 11
37806: PUSH
37807: DOUBLE
37808: LD_VAR 0 7
37812: DEC
37813: ST_TO_ADDR
37814: LD_VAR 0 9
37818: PUSH
37819: FOR_TO
37820: IFFALSE 37939
// for _y = min_y to max_y do
37822: LD_ADDR_VAR 0 12
37826: PUSH
37827: DOUBLE
37828: LD_VAR 0 8
37832: DEC
37833: ST_TO_ADDR
37834: LD_VAR 0 10
37838: PUSH
37839: FOR_TO
37840: IFFALSE 37935
// begin if not ValidHex ( _x , _y ) then
37842: LD_VAR 0 11
37846: PPUSH
37847: LD_VAR 0 12
37851: PPUSH
37852: CALL_OW 488
37856: NOT
37857: IFFALSE 37861
// continue ;
37859: GO 37839
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37861: LD_VAR 0 11
37865: PPUSH
37866: LD_VAR 0 12
37870: PPUSH
37871: CALL_OW 351
37875: IFFALSE 37893
37877: PUSH
37878: LD_VAR 0 11
37882: PPUSH
37883: LD_VAR 0 12
37887: PPUSH
37888: CALL_OW 554
37892: AND
37893: IFFALSE 37933
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37895: LD_ADDR_VAR 0 13
37899: PUSH
37900: LD_VAR 0 13
37904: PPUSH
37905: LD_VAR 0 13
37909: PUSH
37910: LD_INT 1
37912: PLUS
37913: PPUSH
37914: LD_VAR 0 11
37918: PUSH
37919: LD_VAR 0 12
37923: PUSH
37924: EMPTY
37925: LIST
37926: LIST
37927: PPUSH
37928: CALL_OW 2
37932: ST_TO_ADDR
// end ;
37933: GO 37839
37935: POP
37936: POP
37937: GO 37819
37939: POP
37940: POP
// if not list then
37941: LD_VAR 0 13
37945: NOT
37946: IFFALSE 37950
// exit ;
37948: GO 38196
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
37950: LD_ADDR_VAR 0 13
37954: PUSH
37955: LD_VAR 0 1
37959: PPUSH
37960: LD_VAR 0 13
37964: PPUSH
37965: LD_INT 1
37967: PPUSH
37968: LD_INT 1
37970: PPUSH
37971: CALL 48019 0 4
37975: ST_TO_ADDR
// ComStop ( flame ) ;
37976: LD_VAR 0 1
37980: PPUSH
37981: CALL_OW 141
// for i in list do
37985: LD_ADDR_VAR 0 6
37989: PUSH
37990: LD_VAR 0 13
37994: PUSH
37995: FOR_IN
37996: IFFALSE 38027
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
37998: LD_VAR 0 1
38002: PPUSH
38003: LD_VAR 0 6
38007: PUSH
38008: LD_INT 1
38010: ARRAY
38011: PPUSH
38012: LD_VAR 0 6
38016: PUSH
38017: LD_INT 2
38019: ARRAY
38020: PPUSH
38021: CALL_OW 176
38025: GO 37995
38027: POP
38028: POP
// repeat wait ( 0 0$1 ) ;
38029: LD_INT 35
38031: PPUSH
38032: CALL_OW 67
// task := GetTaskList ( flame ) ;
38036: LD_ADDR_VAR 0 14
38040: PUSH
38041: LD_VAR 0 1
38045: PPUSH
38046: CALL_OW 437
38050: ST_TO_ADDR
// if not task then
38051: LD_VAR 0 14
38055: NOT
38056: IFFALSE 38060
// exit ;
38058: GO 38196
// if task [ 1 ] [ 1 ] <> | then
38060: LD_VAR 0 14
38064: PUSH
38065: LD_INT 1
38067: ARRAY
38068: PUSH
38069: LD_INT 1
38071: ARRAY
38072: PUSH
38073: LD_STRING |
38075: NONEQUAL
38076: IFFALSE 38080
// exit ;
38078: GO 38196
// _x := task [ 1 ] [ 2 ] ;
38080: LD_ADDR_VAR 0 11
38084: PUSH
38085: LD_VAR 0 14
38089: PUSH
38090: LD_INT 1
38092: ARRAY
38093: PUSH
38094: LD_INT 2
38096: ARRAY
38097: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
38098: LD_ADDR_VAR 0 12
38102: PUSH
38103: LD_VAR 0 14
38107: PUSH
38108: LD_INT 1
38110: ARRAY
38111: PUSH
38112: LD_INT 3
38114: ARRAY
38115: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
38116: LD_VAR 0 11
38120: PPUSH
38121: LD_VAR 0 12
38125: PPUSH
38126: CALL_OW 351
38130: NOT
38131: IFTRUE 38150
38133: PUSH
38134: LD_VAR 0 11
38138: PPUSH
38139: LD_VAR 0 12
38143: PPUSH
38144: CALL_OW 554
38148: NOT
38149: OR
38150: IFFALSE 38184
// begin task := Delete ( task , 1 ) ;
38152: LD_ADDR_VAR 0 14
38156: PUSH
38157: LD_VAR 0 14
38161: PPUSH
38162: LD_INT 1
38164: PPUSH
38165: CALL_OW 3
38169: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
38170: LD_VAR 0 1
38174: PPUSH
38175: LD_VAR 0 14
38179: PPUSH
38180: CALL_OW 446
// end ; until not HasTask ( flame ) ;
38184: LD_VAR 0 1
38188: PPUSH
38189: CALL_OW 314
38193: NOT
38194: IFFALSE 38029
// end ;
38196: LD_VAR 0 5
38200: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
38201: LD_EXP 123
38205: NOT
38206: IFFALSE 38256
38208: GO 38210
38210: DISABLE
// begin initHack := true ;
38211: LD_ADDR_EXP 123
38215: PUSH
38216: LD_INT 1
38218: ST_TO_ADDR
// hackTanks := [ ] ;
38219: LD_ADDR_EXP 124
38223: PUSH
38224: EMPTY
38225: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
38226: LD_ADDR_EXP 125
38230: PUSH
38231: EMPTY
38232: ST_TO_ADDR
// hackLimit := 3 ;
38233: LD_ADDR_EXP 126
38237: PUSH
38238: LD_INT 3
38240: ST_TO_ADDR
// hackDist := 12 ;
38241: LD_ADDR_EXP 127
38245: PUSH
38246: LD_INT 12
38248: ST_TO_ADDR
// hackCounter := [ ] ;
38249: LD_ADDR_EXP 128
38253: PUSH
38254: EMPTY
38255: ST_TO_ADDR
// end ;
38256: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
38257: LD_EXP 123
38261: IFFALSE 38279
38263: PUSH
38264: LD_INT 34
38266: PUSH
38267: LD_INT 99
38269: PUSH
38270: EMPTY
38271: LIST
38272: LIST
38273: PPUSH
38274: CALL_OW 69
38278: AND
38279: IFFALSE 38532
38281: GO 38283
38283: DISABLE
38284: LD_INT 0
38286: PPUSH
38287: PPUSH
// begin enable ;
38288: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
38289: LD_ADDR_VAR 0 1
38293: PUSH
38294: LD_INT 34
38296: PUSH
38297: LD_INT 99
38299: PUSH
38300: EMPTY
38301: LIST
38302: LIST
38303: PPUSH
38304: CALL_OW 69
38308: PUSH
38309: FOR_IN
38310: IFFALSE 38530
// begin if not i in hackTanks then
38312: LD_VAR 0 1
38316: PUSH
38317: LD_EXP 124
38321: IN
38322: NOT
38323: IFFALSE 38406
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
38325: LD_ADDR_EXP 124
38329: PUSH
38330: LD_EXP 124
38334: PPUSH
38335: LD_EXP 124
38339: PUSH
38340: LD_INT 1
38342: PLUS
38343: PPUSH
38344: LD_VAR 0 1
38348: PPUSH
38349: CALL_OW 1
38353: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
38354: LD_ADDR_EXP 125
38358: PUSH
38359: LD_EXP 125
38363: PPUSH
38364: LD_EXP 125
38368: PUSH
38369: LD_INT 1
38371: PLUS
38372: PPUSH
38373: EMPTY
38374: PPUSH
38375: CALL_OW 1
38379: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
38380: LD_ADDR_EXP 128
38384: PUSH
38385: LD_EXP 128
38389: PPUSH
38390: LD_EXP 128
38394: PUSH
38395: LD_INT 1
38397: PLUS
38398: PPUSH
38399: EMPTY
38400: PPUSH
38401: CALL_OW 1
38405: ST_TO_ADDR
// end ; if not IsOk ( i ) then
38406: LD_VAR 0 1
38410: PPUSH
38411: CALL_OW 302
38415: NOT
38416: IFFALSE 38429
// begin HackUnlinkAll ( i ) ;
38418: LD_VAR 0 1
38422: PPUSH
38423: CALL 38535 0 1
// continue ;
38427: GO 38309
// end ; HackCheckCapturedStatus ( i ) ;
38429: LD_VAR 0 1
38433: PPUSH
38434: CALL 38980 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
38438: LD_ADDR_VAR 0 2
38442: PUSH
38443: LD_INT 81
38445: PUSH
38446: LD_VAR 0 1
38450: PPUSH
38451: CALL_OW 255
38455: PUSH
38456: EMPTY
38457: LIST
38458: LIST
38459: PUSH
38460: LD_INT 33
38462: PUSH
38463: LD_INT 3
38465: PUSH
38466: EMPTY
38467: LIST
38468: LIST
38469: PUSH
38470: LD_INT 91
38472: PUSH
38473: LD_VAR 0 1
38477: PUSH
38478: LD_EXP 127
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: LIST
38487: PUSH
38488: LD_INT 50
38490: PUSH
38491: EMPTY
38492: LIST
38493: PUSH
38494: EMPTY
38495: LIST
38496: LIST
38497: LIST
38498: LIST
38499: PPUSH
38500: CALL_OW 69
38504: ST_TO_ADDR
// if not tmp then
38505: LD_VAR 0 2
38509: NOT
38510: IFFALSE 38514
// continue ;
38512: GO 38309
// HackLink ( i , tmp ) ;
38514: LD_VAR 0 1
38518: PPUSH
38519: LD_VAR 0 2
38523: PPUSH
38524: CALL 38671 0 2
// end ;
38528: GO 38309
38530: POP
38531: POP
// end ;
38532: PPOPN 2
38534: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
38535: LD_INT 0
38537: PPUSH
38538: PPUSH
38539: PPUSH
// if not hack in hackTanks then
38540: LD_VAR 0 1
38544: PUSH
38545: LD_EXP 124
38549: IN
38550: NOT
38551: IFFALSE 38555
// exit ;
38553: GO 38666
// index := GetElementIndex ( hackTanks , hack ) ;
38555: LD_ADDR_VAR 0 4
38559: PUSH
38560: LD_EXP 124
38564: PPUSH
38565: LD_VAR 0 1
38569: PPUSH
38570: CALL 47314 0 2
38574: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
38575: LD_EXP 125
38579: PUSH
38580: LD_VAR 0 4
38584: ARRAY
38585: IFFALSE 38666
// begin for i in hackTanksCaptured [ index ] do
38587: LD_ADDR_VAR 0 3
38591: PUSH
38592: LD_EXP 125
38596: PUSH
38597: LD_VAR 0 4
38601: ARRAY
38602: PUSH
38603: FOR_IN
38604: IFFALSE 38630
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
38606: LD_VAR 0 3
38610: PUSH
38611: LD_INT 1
38613: ARRAY
38614: PPUSH
38615: LD_VAR 0 3
38619: PUSH
38620: LD_INT 2
38622: ARRAY
38623: PPUSH
38624: CALL_OW 235
38628: GO 38603
38630: POP
38631: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
38632: LD_ADDR_EXP 125
38636: PUSH
38637: LD_EXP 125
38641: PPUSH
38642: LD_VAR 0 4
38646: PPUSH
38647: EMPTY
38648: PPUSH
38649: CALL_OW 1
38653: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
38654: LD_VAR 0 1
38658: PPUSH
38659: LD_INT 0
38661: PPUSH
38662: CALL_OW 505
// end ; end ;
38666: LD_VAR 0 2
38670: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
38671: LD_INT 0
38673: PPUSH
38674: PPUSH
38675: PPUSH
// if not hack in hackTanks or not vehicles then
38676: LD_VAR 0 1
38680: PUSH
38681: LD_EXP 124
38685: IN
38686: NOT
38687: IFTRUE 38696
38689: PUSH
38690: LD_VAR 0 2
38694: NOT
38695: OR
38696: IFFALSE 38700
// exit ;
38698: GO 38975
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
38700: LD_ADDR_VAR 0 2
38704: PUSH
38705: LD_VAR 0 1
38709: PPUSH
38710: LD_VAR 0 2
38714: PPUSH
38715: LD_INT 1
38717: PPUSH
38718: LD_INT 1
38720: PPUSH
38721: CALL 47966 0 4
38725: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
38726: LD_ADDR_VAR 0 5
38730: PUSH
38731: LD_EXP 124
38735: PPUSH
38736: LD_VAR 0 1
38740: PPUSH
38741: CALL 47314 0 2
38745: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
38746: LD_EXP 125
38750: PUSH
38751: LD_VAR 0 5
38755: ARRAY
38756: PUSH
38757: LD_EXP 126
38761: LESS
38762: IFFALSE 38951
// begin for i := 1 to vehicles do
38764: LD_ADDR_VAR 0 4
38768: PUSH
38769: DOUBLE
38770: LD_INT 1
38772: DEC
38773: ST_TO_ADDR
38774: LD_VAR 0 2
38778: PUSH
38779: FOR_TO
38780: IFFALSE 38949
// begin if hackTanksCaptured [ index ] = hackLimit then
38782: LD_EXP 125
38786: PUSH
38787: LD_VAR 0 5
38791: ARRAY
38792: PUSH
38793: LD_EXP 126
38797: EQUAL
38798: IFFALSE 38802
// break ;
38800: GO 38949
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
38802: LD_ADDR_EXP 128
38806: PUSH
38807: LD_EXP 128
38811: PPUSH
38812: LD_VAR 0 5
38816: PPUSH
38817: LD_EXP 128
38821: PUSH
38822: LD_VAR 0 5
38826: ARRAY
38827: PUSH
38828: LD_INT 1
38830: PLUS
38831: PPUSH
38832: CALL_OW 1
38836: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
38837: LD_ADDR_EXP 125
38841: PUSH
38842: LD_EXP 125
38846: PPUSH
38847: LD_VAR 0 5
38851: PUSH
38852: LD_EXP 125
38856: PUSH
38857: LD_VAR 0 5
38861: ARRAY
38862: PUSH
38863: LD_INT 1
38865: PLUS
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: PPUSH
38871: LD_VAR 0 2
38875: PUSH
38876: LD_VAR 0 4
38880: ARRAY
38881: PUSH
38882: LD_VAR 0 2
38886: PUSH
38887: LD_VAR 0 4
38891: ARRAY
38892: PPUSH
38893: CALL_OW 255
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: PPUSH
38902: CALL 47531 0 3
38906: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
38907: LD_VAR 0 2
38911: PUSH
38912: LD_VAR 0 4
38916: ARRAY
38917: PPUSH
38918: LD_VAR 0 1
38922: PPUSH
38923: CALL_OW 255
38927: PPUSH
38928: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
38932: LD_VAR 0 2
38936: PUSH
38937: LD_VAR 0 4
38941: ARRAY
38942: PPUSH
38943: CALL_OW 141
// end ;
38947: GO 38779
38949: POP
38950: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38951: LD_VAR 0 1
38955: PPUSH
38956: LD_EXP 125
38960: PUSH
38961: LD_VAR 0 5
38965: ARRAY
38966: PUSH
38967: LD_INT 0
38969: PLUS
38970: PPUSH
38971: CALL_OW 505
// end ;
38975: LD_VAR 0 3
38979: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
38980: LD_INT 0
38982: PPUSH
38983: PPUSH
38984: PPUSH
38985: PPUSH
// if not hack in hackTanks then
38986: LD_VAR 0 1
38990: PUSH
38991: LD_EXP 124
38995: IN
38996: NOT
38997: IFFALSE 39001
// exit ;
38999: GO 39245
// index := GetElementIndex ( hackTanks , hack ) ;
39001: LD_ADDR_VAR 0 4
39005: PUSH
39006: LD_EXP 124
39010: PPUSH
39011: LD_VAR 0 1
39015: PPUSH
39016: CALL 47314 0 2
39020: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
39021: LD_ADDR_VAR 0 3
39025: PUSH
39026: DOUBLE
39027: LD_EXP 125
39031: PUSH
39032: LD_VAR 0 4
39036: ARRAY
39037: INC
39038: ST_TO_ADDR
39039: LD_INT 1
39041: PUSH
39042: FOR_DOWNTO
39043: IFFALSE 39219
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
39045: LD_ADDR_VAR 0 5
39049: PUSH
39050: LD_EXP 125
39054: PUSH
39055: LD_VAR 0 4
39059: ARRAY
39060: PUSH
39061: LD_VAR 0 3
39065: ARRAY
39066: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
39067: LD_VAR 0 5
39071: PUSH
39072: LD_INT 1
39074: ARRAY
39075: PPUSH
39076: CALL_OW 302
39080: NOT
39081: IFTRUE 39109
39083: PUSH
39084: LD_VAR 0 5
39088: PUSH
39089: LD_INT 1
39091: ARRAY
39092: PPUSH
39093: CALL_OW 255
39097: PUSH
39098: LD_VAR 0 1
39102: PPUSH
39103: CALL_OW 255
39107: NONEQUAL
39108: OR
39109: IFFALSE 39217
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
39111: LD_VAR 0 5
39115: PUSH
39116: LD_INT 1
39118: ARRAY
39119: PPUSH
39120: CALL_OW 305
39124: IFFALSE 39152
39126: PUSH
39127: LD_VAR 0 5
39131: PUSH
39132: LD_INT 1
39134: ARRAY
39135: PPUSH
39136: CALL_OW 255
39140: PUSH
39141: LD_VAR 0 1
39145: PPUSH
39146: CALL_OW 255
39150: EQUAL
39151: AND
39152: IFFALSE 39176
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
39154: LD_VAR 0 5
39158: PUSH
39159: LD_INT 1
39161: ARRAY
39162: PPUSH
39163: LD_VAR 0 5
39167: PUSH
39168: LD_INT 2
39170: ARRAY
39171: PPUSH
39172: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
39176: LD_ADDR_EXP 125
39180: PUSH
39181: LD_EXP 125
39185: PPUSH
39186: LD_VAR 0 4
39190: PPUSH
39191: LD_EXP 125
39195: PUSH
39196: LD_VAR 0 4
39200: ARRAY
39201: PPUSH
39202: LD_VAR 0 3
39206: PPUSH
39207: CALL_OW 3
39211: PPUSH
39212: CALL_OW 1
39216: ST_TO_ADDR
// end ; end ;
39217: GO 39042
39219: POP
39220: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
39221: LD_VAR 0 1
39225: PPUSH
39226: LD_EXP 125
39230: PUSH
39231: LD_VAR 0 4
39235: ARRAY
39236: PUSH
39237: LD_INT 0
39239: PLUS
39240: PPUSH
39241: CALL_OW 505
// end ;
39245: LD_VAR 0 2
39249: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
39250: LD_INT 0
39252: PPUSH
39253: PPUSH
39254: PPUSH
39255: PPUSH
// if not hack in hackTanks then
39256: LD_VAR 0 1
39260: PUSH
39261: LD_EXP 124
39265: IN
39266: NOT
39267: IFFALSE 39271
// exit ;
39269: GO 39356
// index := GetElementIndex ( hackTanks , hack ) ;
39271: LD_ADDR_VAR 0 5
39275: PUSH
39276: LD_EXP 124
39280: PPUSH
39281: LD_VAR 0 1
39285: PPUSH
39286: CALL 47314 0 2
39290: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
39291: LD_ADDR_VAR 0 4
39295: PUSH
39296: DOUBLE
39297: LD_INT 1
39299: DEC
39300: ST_TO_ADDR
39301: LD_EXP 125
39305: PUSH
39306: LD_VAR 0 5
39310: ARRAY
39311: PUSH
39312: FOR_TO
39313: IFFALSE 39354
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
39315: LD_EXP 125
39319: PUSH
39320: LD_VAR 0 5
39324: ARRAY
39325: PUSH
39326: LD_VAR 0 4
39330: ARRAY
39331: PUSH
39332: LD_INT 1
39334: ARRAY
39335: PUSH
39336: LD_VAR 0 2
39340: EQUAL
39341: IFFALSE 39352
// KillUnit ( vehicle ) ;
39343: LD_VAR 0 2
39347: PPUSH
39348: CALL_OW 66
39352: GO 39312
39354: POP
39355: POP
// end ;
39356: LD_VAR 0 3
39360: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
39361: LD_EXP 129
39365: NOT
39366: IFFALSE 39499
39368: GO 39370
39370: DISABLE
39371: LD_INT 0
39373: PPUSH
// begin initMiner := true ;
39374: LD_ADDR_EXP 129
39378: PUSH
39379: LD_INT 1
39381: ST_TO_ADDR
// minersList := [ ] ;
39382: LD_ADDR_EXP 130
39386: PUSH
39387: EMPTY
39388: ST_TO_ADDR
// minerMinesList := [ ] ;
39389: LD_ADDR_EXP 131
39393: PUSH
39394: EMPTY
39395: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
39396: LD_ADDR_EXP 132
39400: PUSH
39401: LD_INT 10
39403: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
39404: LD_ADDR_VAR 0 1
39408: PUSH
39409: LD_INT 34
39411: PUSH
39412: LD_INT 81
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: PPUSH
39419: CALL_OW 69
39423: PUSH
39424: FOR_IN
39425: IFFALSE 39497
// begin if not i in minersList then
39427: LD_VAR 0 1
39431: PUSH
39432: LD_EXP 130
39436: IN
39437: NOT
39438: IFFALSE 39495
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
39440: LD_ADDR_EXP 130
39444: PUSH
39445: LD_EXP 130
39449: PPUSH
39450: LD_EXP 130
39454: PUSH
39455: LD_INT 1
39457: PLUS
39458: PPUSH
39459: LD_VAR 0 1
39463: PPUSH
39464: CALL_OW 1
39468: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
39469: LD_ADDR_EXP 131
39473: PUSH
39474: LD_EXP 131
39478: PPUSH
39479: LD_EXP 131
39483: PUSH
39484: LD_INT 1
39486: PLUS
39487: PPUSH
39488: EMPTY
39489: PPUSH
39490: CALL_OW 1
39494: ST_TO_ADDR
// end end ;
39495: GO 39424
39497: POP
39498: POP
// end ;
39499: PPOPN 1
39501: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
39502: LD_EXP 129
39506: IFFALSE 39537
39508: PUSH
39509: LD_EXP 131
39513: PPUSH
39514: CALL 44613 0 1
39518: IFTRUE 39536
39520: PUSH
39521: LD_INT 34
39523: PUSH
39524: LD_INT 81
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: PPUSH
39531: CALL_OW 69
39535: OR
39536: AND
39537: IFFALSE 40057
39539: GO 39541
39541: DISABLE
39542: LD_INT 0
39544: PPUSH
39545: PPUSH
39546: PPUSH
39547: PPUSH
// begin enable ;
39548: ENABLE
// for i := minerMinesList downto 1 do
39549: LD_ADDR_VAR 0 1
39553: PUSH
39554: DOUBLE
39555: LD_EXP 131
39559: INC
39560: ST_TO_ADDR
39561: LD_INT 1
39563: PUSH
39564: FOR_DOWNTO
39565: IFFALSE 40055
// begin side := GetSide ( minersList [ i ] ) ;
39567: LD_ADDR_VAR 0 3
39571: PUSH
39572: LD_EXP 130
39576: PUSH
39577: LD_VAR 0 1
39581: ARRAY
39582: PPUSH
39583: CALL_OW 255
39587: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
39588: LD_EXP 130
39592: PUSH
39593: LD_VAR 0 1
39597: ARRAY
39598: PPUSH
39599: CALL_OW 300
39603: IFFALSE 39624
39605: PUSH
39606: LD_VAR 0 3
39610: PUSH
39611: LD_OWVAR 2
39615: PUSH
39616: LD_INT 9
39618: PUSH
39619: EMPTY
39620: LIST
39621: LIST
39622: IN
39623: AND
39624: IFFALSE 39657
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
39626: LD_EXP 130
39630: PUSH
39631: LD_VAR 0 1
39635: ARRAY
39636: PPUSH
39637: LD_EXP 131
39641: PUSH
39642: LD_VAR 0 1
39646: ARRAY
39647: PPUSH
39648: CALL 44613 0 1
39652: PPUSH
39653: CALL_OW 505
// if not minerMinesList [ i ] then
39657: LD_EXP 131
39661: PUSH
39662: LD_VAR 0 1
39666: ARRAY
39667: NOT
39668: IFFALSE 39672
// continue ;
39670: GO 39564
// for j := minerMinesList [ i ] downto 1 do
39672: LD_ADDR_VAR 0 2
39676: PUSH
39677: DOUBLE
39678: LD_EXP 131
39682: PUSH
39683: LD_VAR 0 1
39687: ARRAY
39688: INC
39689: ST_TO_ADDR
39690: LD_INT 1
39692: PUSH
39693: FOR_DOWNTO
39694: IFFALSE 40051
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
39696: LD_EXP 130
39700: PUSH
39701: LD_VAR 0 1
39705: ARRAY
39706: PPUSH
39707: CALL_OW 301
39711: IFTRUE 39731
39713: PUSH
39714: LD_EXP 130
39718: PUSH
39719: LD_VAR 0 1
39723: ARRAY
39724: PPUSH
39725: CALL_OW 305
39729: NOT
39730: OR
39731: IFFALSE 39822
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
39733: LD_EXP 131
39737: PUSH
39738: LD_VAR 0 1
39742: ARRAY
39743: PUSH
39744: LD_VAR 0 2
39748: ARRAY
39749: PUSH
39750: LD_INT 1
39752: ARRAY
39753: PPUSH
39754: LD_EXP 131
39758: PUSH
39759: LD_VAR 0 1
39763: ARRAY
39764: PUSH
39765: LD_VAR 0 2
39769: ARRAY
39770: PUSH
39771: LD_INT 2
39773: ARRAY
39774: PPUSH
39775: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
39779: LD_ADDR_EXP 131
39783: PUSH
39784: LD_EXP 131
39788: PPUSH
39789: LD_VAR 0 1
39793: PPUSH
39794: LD_EXP 131
39798: PUSH
39799: LD_VAR 0 1
39803: ARRAY
39804: PPUSH
39805: LD_VAR 0 2
39809: PPUSH
39810: CALL_OW 3
39814: PPUSH
39815: CALL_OW 1
39819: ST_TO_ADDR
// continue ;
39820: GO 39693
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
39822: LD_ADDR_VAR 0 4
39826: PUSH
39827: LD_EXP 131
39831: PUSH
39832: LD_VAR 0 1
39836: ARRAY
39837: PUSH
39838: LD_VAR 0 2
39842: ARRAY
39843: PUSH
39844: LD_INT 1
39846: ARRAY
39847: PPUSH
39848: LD_EXP 131
39852: PUSH
39853: LD_VAR 0 1
39857: ARRAY
39858: PUSH
39859: LD_VAR 0 2
39863: ARRAY
39864: PUSH
39865: LD_INT 2
39867: ARRAY
39868: PPUSH
39869: CALL_OW 428
39873: ST_TO_ADDR
// if not tmp then
39874: LD_VAR 0 4
39878: NOT
39879: IFFALSE 39883
// continue ;
39881: GO 39693
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
39883: LD_VAR 0 4
39887: PUSH
39888: LD_INT 81
39890: PUSH
39891: LD_VAR 0 3
39895: PUSH
39896: EMPTY
39897: LIST
39898: LIST
39899: PPUSH
39900: CALL_OW 69
39904: IN
39905: IFFALSE 39955
39907: PUSH
39908: LD_EXP 131
39912: PUSH
39913: LD_VAR 0 1
39917: ARRAY
39918: PUSH
39919: LD_VAR 0 2
39923: ARRAY
39924: PUSH
39925: LD_INT 1
39927: ARRAY
39928: PPUSH
39929: LD_EXP 131
39933: PUSH
39934: LD_VAR 0 1
39938: ARRAY
39939: PUSH
39940: LD_VAR 0 2
39944: ARRAY
39945: PUSH
39946: LD_INT 2
39948: ARRAY
39949: PPUSH
39950: CALL_OW 458
39954: AND
39955: IFFALSE 40049
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
39957: LD_EXP 131
39961: PUSH
39962: LD_VAR 0 1
39966: ARRAY
39967: PUSH
39968: LD_VAR 0 2
39972: ARRAY
39973: PUSH
39974: LD_INT 1
39976: ARRAY
39977: PPUSH
39978: LD_EXP 131
39982: PUSH
39983: LD_VAR 0 1
39987: ARRAY
39988: PUSH
39989: LD_VAR 0 2
39993: ARRAY
39994: PUSH
39995: LD_INT 2
39997: ARRAY
39998: PPUSH
39999: LD_VAR 0 3
40003: PPUSH
40004: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
40008: LD_ADDR_EXP 131
40012: PUSH
40013: LD_EXP 131
40017: PPUSH
40018: LD_VAR 0 1
40022: PPUSH
40023: LD_EXP 131
40027: PUSH
40028: LD_VAR 0 1
40032: ARRAY
40033: PPUSH
40034: LD_VAR 0 2
40038: PPUSH
40039: CALL_OW 3
40043: PPUSH
40044: CALL_OW 1
40048: ST_TO_ADDR
// end ; end ;
40049: GO 39693
40051: POP
40052: POP
// end ;
40053: GO 39564
40055: POP
40056: POP
// end ;
40057: PPOPN 4
40059: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
40060: LD_INT 0
40062: PPUSH
40063: PPUSH
40064: PPUSH
40065: PPUSH
// result := false ;
40066: LD_ADDR_VAR 0 4
40070: PUSH
40071: LD_INT 0
40073: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
40074: LD_VAR 0 1
40078: PPUSH
40079: CALL_OW 264
40083: PUSH
40084: LD_INT 81
40086: EQUAL
40087: NOT
40088: IFFALSE 40092
// exit ;
40090: GO 40462
// side := GetSide ( unit ) ;
40092: LD_ADDR_VAR 0 6
40096: PUSH
40097: LD_VAR 0 1
40101: PPUSH
40102: CALL_OW 255
40106: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
40107: LD_ADDR_VAR 0 5
40111: PUSH
40112: LD_EXP 130
40116: PPUSH
40117: LD_VAR 0 1
40121: PPUSH
40122: CALL 47314 0 2
40126: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
40127: LD_EXP 131
40131: PUSH
40132: LD_VAR 0 5
40136: ARRAY
40137: PUSH
40138: LD_EXP 132
40142: GREATEREQUAL
40143: IFFALSE 40147
// exit ;
40145: GO 40462
// ComMoveXY ( unit , x , y ) ;
40147: LD_VAR 0 1
40151: PPUSH
40152: LD_VAR 0 2
40156: PPUSH
40157: LD_VAR 0 3
40161: PPUSH
40162: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40166: LD_INT 35
40168: PPUSH
40169: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
40173: LD_VAR 0 1
40177: PPUSH
40178: LD_VAR 0 2
40182: PPUSH
40183: LD_VAR 0 3
40187: PPUSH
40188: CALL 79370 0 3
40192: NOT
40193: IFFALSE 40206
40195: PUSH
40196: LD_VAR 0 1
40200: PPUSH
40201: CALL_OW 314
40205: AND
40206: IFFALSE 40210
// exit ;
40208: GO 40462
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
40210: LD_VAR 0 2
40214: PPUSH
40215: LD_VAR 0 3
40219: PPUSH
40220: CALL_OW 428
40224: PUSH
40225: LD_VAR 0 1
40229: EQUAL
40230: IFFALSE 40244
40232: PUSH
40233: LD_VAR 0 1
40237: PPUSH
40238: CALL_OW 314
40242: NOT
40243: AND
40244: IFFALSE 40166
// if MineAtPos ( x , y ) then
40246: LD_VAR 0 2
40250: PPUSH
40251: LD_VAR 0 3
40255: PPUSH
40256: CALL_OW 458
40260: IFFALSE 40264
// exit ;
40262: GO 40462
// if your_side = side then
40264: LD_OWVAR 2
40268: PUSH
40269: LD_VAR 0 6
40273: EQUAL
40274: IFFALSE 40293
// PlaySoundXY ( x , y , PlantMine ) ;
40276: LD_VAR 0 2
40280: PPUSH
40281: LD_VAR 0 3
40285: PPUSH
40286: LD_STRING PlantMine
40288: PPUSH
40289: CALL_OW 366
// repeat wait ( 1 ) ;
40293: LD_INT 1
40295: PPUSH
40296: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
40300: LD_VAR 0 2
40304: PPUSH
40305: LD_VAR 0 3
40309: PPUSH
40310: LD_VAR 0 6
40314: PPUSH
40315: LD_INT 0
40317: PPUSH
40318: CALL_OW 454
40322: IFFALSE 40293
// if MineAtPos ( x , y ) then
40324: LD_VAR 0 2
40328: PPUSH
40329: LD_VAR 0 3
40333: PPUSH
40334: CALL_OW 458
40338: IFFALSE 40454
// begin for i in minerMinesList [ index ] do
40340: LD_ADDR_VAR 0 7
40344: PUSH
40345: LD_EXP 131
40349: PUSH
40350: LD_VAR 0 5
40354: ARRAY
40355: PUSH
40356: FOR_IN
40357: IFFALSE 40399
// if i [ 1 ] = x and i [ 2 ] = y then
40359: LD_VAR 0 7
40363: PUSH
40364: LD_INT 1
40366: ARRAY
40367: PUSH
40368: LD_VAR 0 2
40372: EQUAL
40373: IFFALSE 40391
40375: PUSH
40376: LD_VAR 0 7
40380: PUSH
40381: LD_INT 2
40383: ARRAY
40384: PUSH
40385: LD_VAR 0 3
40389: EQUAL
40390: AND
40391: IFFALSE 40397
// exit ;
40393: POP
40394: POP
40395: GO 40462
40397: GO 40356
40399: POP
40400: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
40401: LD_ADDR_EXP 131
40405: PUSH
40406: LD_EXP 131
40410: PPUSH
40411: LD_VAR 0 5
40415: PUSH
40416: LD_EXP 131
40420: PUSH
40421: LD_VAR 0 5
40425: ARRAY
40426: PUSH
40427: LD_INT 1
40429: PLUS
40430: PUSH
40431: EMPTY
40432: LIST
40433: LIST
40434: PPUSH
40435: LD_VAR 0 2
40439: PUSH
40440: LD_VAR 0 3
40444: PUSH
40445: EMPTY
40446: LIST
40447: LIST
40448: PPUSH
40449: CALL 47531 0 3
40453: ST_TO_ADDR
// end ; result := true ;
40454: LD_ADDR_VAR 0 4
40458: PUSH
40459: LD_INT 1
40461: ST_TO_ADDR
// end ;
40462: LD_VAR 0 4
40466: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
40467: LD_INT 0
40469: PPUSH
40470: PPUSH
40471: PPUSH
// if not unit in minersList then
40472: LD_VAR 0 1
40476: PUSH
40477: LD_EXP 130
40481: IN
40482: NOT
40483: IFFALSE 40487
// exit ;
40485: GO 40694
// index := GetElementIndex ( minersList , unit ) ;
40487: LD_ADDR_VAR 0 6
40491: PUSH
40492: LD_EXP 130
40496: PPUSH
40497: LD_VAR 0 1
40501: PPUSH
40502: CALL 47314 0 2
40506: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
40507: LD_ADDR_VAR 0 5
40511: PUSH
40512: DOUBLE
40513: LD_EXP 131
40517: PUSH
40518: LD_VAR 0 6
40522: ARRAY
40523: INC
40524: ST_TO_ADDR
40525: LD_INT 1
40527: PUSH
40528: FOR_DOWNTO
40529: IFFALSE 40692
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
40531: LD_EXP 131
40535: PUSH
40536: LD_VAR 0 6
40540: ARRAY
40541: PUSH
40542: LD_VAR 0 5
40546: ARRAY
40547: PUSH
40548: LD_INT 1
40550: ARRAY
40551: PPUSH
40552: LD_EXP 131
40556: PUSH
40557: LD_VAR 0 6
40561: ARRAY
40562: PUSH
40563: LD_VAR 0 5
40567: ARRAY
40568: PUSH
40569: LD_INT 2
40571: ARRAY
40572: PPUSH
40573: LD_VAR 0 2
40577: PPUSH
40578: LD_VAR 0 3
40582: PPUSH
40583: CALL_OW 298
40587: PUSH
40588: LD_INT 6
40590: LESS
40591: IFFALSE 40690
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40593: LD_EXP 131
40597: PUSH
40598: LD_VAR 0 6
40602: ARRAY
40603: PUSH
40604: LD_VAR 0 5
40608: ARRAY
40609: PUSH
40610: LD_INT 1
40612: ARRAY
40613: PPUSH
40614: LD_EXP 131
40618: PUSH
40619: LD_VAR 0 6
40623: ARRAY
40624: PUSH
40625: LD_VAR 0 5
40629: ARRAY
40630: PUSH
40631: LD_INT 2
40633: ARRAY
40634: PPUSH
40635: LD_VAR 0 1
40639: PPUSH
40640: CALL_OW 255
40644: PPUSH
40645: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40649: LD_ADDR_EXP 131
40653: PUSH
40654: LD_EXP 131
40658: PPUSH
40659: LD_VAR 0 6
40663: PPUSH
40664: LD_EXP 131
40668: PUSH
40669: LD_VAR 0 6
40673: ARRAY
40674: PPUSH
40675: LD_VAR 0 5
40679: PPUSH
40680: CALL_OW 3
40684: PPUSH
40685: CALL_OW 1
40689: ST_TO_ADDR
// end ; end ;
40690: GO 40528
40692: POP
40693: POP
// end ;
40694: LD_VAR 0 4
40698: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
40699: LD_INT 0
40701: PPUSH
40702: PPUSH
40703: PPUSH
40704: PPUSH
40705: PPUSH
40706: PPUSH
40707: PPUSH
40708: PPUSH
40709: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
40710: LD_VAR 0 1
40714: PPUSH
40715: CALL_OW 264
40719: PUSH
40720: LD_INT 81
40722: EQUAL
40723: NOT
40724: IFTRUE 40739
40726: PUSH
40727: LD_VAR 0 1
40731: PUSH
40732: LD_EXP 130
40736: IN
40737: NOT
40738: OR
40739: IFFALSE 40743
// exit ;
40741: GO 41069
// index := GetElementIndex ( minersList , unit ) ;
40743: LD_ADDR_VAR 0 6
40747: PUSH
40748: LD_EXP 130
40752: PPUSH
40753: LD_VAR 0 1
40757: PPUSH
40758: CALL 47314 0 2
40762: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
40763: LD_ADDR_VAR 0 8
40767: PUSH
40768: LD_EXP 132
40772: PUSH
40773: LD_EXP 131
40777: PUSH
40778: LD_VAR 0 6
40782: ARRAY
40783: MINUS
40784: ST_TO_ADDR
// if not minesFreeAmount then
40785: LD_VAR 0 8
40789: NOT
40790: IFFALSE 40794
// exit ;
40792: GO 41069
// tmp := [ ] ;
40794: LD_ADDR_VAR 0 7
40798: PUSH
40799: EMPTY
40800: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
40801: LD_ADDR_VAR 0 5
40805: PUSH
40806: DOUBLE
40807: LD_INT 1
40809: DEC
40810: ST_TO_ADDR
40811: LD_VAR 0 8
40815: PUSH
40816: FOR_TO
40817: IFFALSE 41016
// begin _d := rand ( 0 , 5 ) ;
40819: LD_ADDR_VAR 0 11
40823: PUSH
40824: LD_INT 0
40826: PPUSH
40827: LD_INT 5
40829: PPUSH
40830: CALL_OW 12
40834: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
40835: LD_ADDR_VAR 0 12
40839: PUSH
40840: LD_INT 2
40842: PPUSH
40843: LD_INT 6
40845: PPUSH
40846: CALL_OW 12
40850: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
40851: LD_ADDR_VAR 0 9
40855: PUSH
40856: LD_VAR 0 2
40860: PPUSH
40861: LD_VAR 0 11
40865: PPUSH
40866: LD_VAR 0 12
40870: PPUSH
40871: CALL_OW 272
40875: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
40876: LD_ADDR_VAR 0 10
40880: PUSH
40881: LD_VAR 0 3
40885: PPUSH
40886: LD_VAR 0 11
40890: PPUSH
40891: LD_VAR 0 12
40895: PPUSH
40896: CALL_OW 273
40900: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
40901: LD_VAR 0 9
40905: PPUSH
40906: LD_VAR 0 10
40910: PPUSH
40911: CALL_OW 488
40915: IFFALSE 40939
40917: PUSH
40918: LD_VAR 0 9
40922: PUSH
40923: LD_VAR 0 10
40927: PUSH
40928: EMPTY
40929: LIST
40930: LIST
40931: PUSH
40932: LD_VAR 0 7
40936: IN
40937: NOT
40938: AND
40939: IFFALSE 40958
40941: PUSH
40942: LD_VAR 0 9
40946: PPUSH
40947: LD_VAR 0 10
40951: PPUSH
40952: CALL_OW 458
40956: NOT
40957: AND
40958: IFFALSE 41000
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
40960: LD_ADDR_VAR 0 7
40964: PUSH
40965: LD_VAR 0 7
40969: PPUSH
40970: LD_VAR 0 7
40974: PUSH
40975: LD_INT 1
40977: PLUS
40978: PPUSH
40979: LD_VAR 0 9
40983: PUSH
40984: LD_VAR 0 10
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PPUSH
40993: CALL_OW 1
40997: ST_TO_ADDR
40998: GO 41014
// i := i - 1 ;
41000: LD_ADDR_VAR 0 5
41004: PUSH
41005: LD_VAR 0 5
41009: PUSH
41010: LD_INT 1
41012: MINUS
41013: ST_TO_ADDR
// end ;
41014: GO 40816
41016: POP
41017: POP
// for i in tmp do
41018: LD_ADDR_VAR 0 5
41022: PUSH
41023: LD_VAR 0 7
41027: PUSH
41028: FOR_IN
41029: IFFALSE 41067
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
41031: LD_VAR 0 1
41035: PPUSH
41036: LD_VAR 0 5
41040: PUSH
41041: LD_INT 1
41043: ARRAY
41044: PPUSH
41045: LD_VAR 0 5
41049: PUSH
41050: LD_INT 2
41052: ARRAY
41053: PPUSH
41054: CALL 40060 0 3
41058: NOT
41059: IFFALSE 41065
// exit ;
41061: POP
41062: POP
41063: GO 41069
41065: GO 41028
41067: POP
41068: POP
// end ;
41069: LD_VAR 0 4
41073: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
41074: LD_INT 0
41076: PPUSH
41077: PPUSH
41078: PPUSH
41079: PPUSH
41080: PPUSH
41081: PPUSH
41082: PPUSH
41083: PPUSH
41084: PPUSH
// if GetClass ( unit ) <> class_sniper then
41085: LD_VAR 0 1
41089: PPUSH
41090: CALL_OW 257
41094: PUSH
41095: LD_INT 5
41097: NONEQUAL
41098: IFFALSE 41102
// exit ;
41100: GO 41572
// dist := 8 ;
41102: LD_ADDR_VAR 0 5
41106: PUSH
41107: LD_INT 8
41109: ST_TO_ADDR
// viewRange := 12 ;
41110: LD_ADDR_VAR 0 8
41114: PUSH
41115: LD_INT 12
41117: ST_TO_ADDR
// side := GetSide ( unit ) ;
41118: LD_ADDR_VAR 0 6
41122: PUSH
41123: LD_VAR 0 1
41127: PPUSH
41128: CALL_OW 255
41132: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
41133: LD_INT 61
41135: PPUSH
41136: LD_VAR 0 6
41140: PPUSH
41141: CALL_OW 321
41145: PUSH
41146: LD_INT 2
41148: EQUAL
41149: IFFALSE 41159
// viewRange := 16 ;
41151: LD_ADDR_VAR 0 8
41155: PUSH
41156: LD_INT 16
41158: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
41159: LD_VAR 0 1
41163: PPUSH
41164: LD_VAR 0 2
41168: PPUSH
41169: LD_VAR 0 3
41173: PPUSH
41174: CALL_OW 297
41178: PUSH
41179: LD_VAR 0 5
41183: GREATER
41184: IFFALSE 41263
// begin ComMoveXY ( unit , x , y ) ;
41186: LD_VAR 0 1
41190: PPUSH
41191: LD_VAR 0 2
41195: PPUSH
41196: LD_VAR 0 3
41200: PPUSH
41201: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
41205: LD_INT 35
41207: PPUSH
41208: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
41212: LD_VAR 0 1
41216: PPUSH
41217: LD_VAR 0 2
41221: PPUSH
41222: LD_VAR 0 3
41226: PPUSH
41227: CALL 79370 0 3
41231: NOT
41232: IFFALSE 41236
// exit ;
41234: GO 41572
// until GetDistUnitXY ( unit , x , y ) < dist ;
41236: LD_VAR 0 1
41240: PPUSH
41241: LD_VAR 0 2
41245: PPUSH
41246: LD_VAR 0 3
41250: PPUSH
41251: CALL_OW 297
41255: PUSH
41256: LD_VAR 0 5
41260: LESS
41261: IFFALSE 41205
// end ; ComTurnXY ( unit , x , y ) ;
41263: LD_VAR 0 1
41267: PPUSH
41268: LD_VAR 0 2
41272: PPUSH
41273: LD_VAR 0 3
41277: PPUSH
41278: CALL_OW 118
// repeat if Multiplayer then
41282: LD_OWVAR 4
41286: IFFALSE 41297
// wait ( 35 ) else
41288: LD_INT 35
41290: PPUSH
41291: CALL_OW 67
41295: GO 41304
// wait ( 5 ) ;
41297: LD_INT 5
41299: PPUSH
41300: CALL_OW 67
// _d := GetDir ( unit ) ;
41304: LD_ADDR_VAR 0 11
41308: PUSH
41309: LD_VAR 0 1
41313: PPUSH
41314: CALL_OW 254
41318: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
41319: LD_ADDR_VAR 0 7
41323: PUSH
41324: LD_VAR 0 1
41328: PPUSH
41329: CALL_OW 250
41333: PPUSH
41334: LD_VAR 0 1
41338: PPUSH
41339: CALL_OW 251
41343: PPUSH
41344: LD_VAR 0 2
41348: PPUSH
41349: LD_VAR 0 3
41353: PPUSH
41354: CALL 82006 0 4
41358: ST_TO_ADDR
// until dir = _d ;
41359: LD_VAR 0 7
41363: PUSH
41364: LD_VAR 0 11
41368: EQUAL
41369: IFFALSE 41282
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
41371: LD_ADDR_VAR 0 9
41375: PUSH
41376: LD_VAR 0 1
41380: PPUSH
41381: CALL_OW 250
41385: PPUSH
41386: LD_VAR 0 7
41390: PPUSH
41391: LD_VAR 0 5
41395: PPUSH
41396: CALL_OW 272
41400: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
41401: LD_ADDR_VAR 0 10
41405: PUSH
41406: LD_VAR 0 1
41410: PPUSH
41411: CALL_OW 251
41415: PPUSH
41416: LD_VAR 0 7
41420: PPUSH
41421: LD_VAR 0 5
41425: PPUSH
41426: CALL_OW 273
41430: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41431: LD_VAR 0 9
41435: PPUSH
41436: LD_VAR 0 10
41440: PPUSH
41441: CALL_OW 488
41445: NOT
41446: IFFALSE 41450
// exit ;
41448: GO 41572
// ComAnimCustom ( unit , 1 ) ;
41450: LD_VAR 0 1
41454: PPUSH
41455: LD_INT 1
41457: PPUSH
41458: CALL_OW 592
// p := 0 ;
41462: LD_ADDR_VAR 0 12
41466: PUSH
41467: LD_INT 0
41469: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
41470: LD_VAR 0 9
41474: PPUSH
41475: LD_VAR 0 10
41479: PPUSH
41480: LD_VAR 0 6
41484: PPUSH
41485: LD_VAR 0 8
41489: PPUSH
41490: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
41494: LD_INT 35
41496: PPUSH
41497: CALL_OW 67
// p := Inc ( p ) ;
41501: LD_ADDR_VAR 0 12
41505: PUSH
41506: LD_VAR 0 12
41510: PPUSH
41511: CALL 81962 0 1
41515: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
41516: LD_VAR 0 12
41520: PUSH
41521: LD_INT 3
41523: EQUAL
41524: IFTRUE 41538
41526: PUSH
41527: LD_VAR 0 1
41531: PPUSH
41532: CALL_OW 302
41536: NOT
41537: OR
41538: IFTRUE 41551
41540: PUSH
41541: LD_VAR 0 1
41545: PPUSH
41546: CALL_OW 301
41550: OR
41551: IFFALSE 41494
// RemoveSeeing ( _x , _y , side ) ;
41553: LD_VAR 0 9
41557: PPUSH
41558: LD_VAR 0 10
41562: PPUSH
41563: LD_VAR 0 6
41567: PPUSH
41568: CALL_OW 331
// end ;
41572: LD_VAR 0 4
41576: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
41577: LD_INT 0
41579: PPUSH
41580: PPUSH
41581: PPUSH
41582: PPUSH
41583: PPUSH
41584: PPUSH
41585: PPUSH
41586: PPUSH
41587: PPUSH
41588: PPUSH
41589: PPUSH
// if not unit then
41590: LD_VAR 0 1
41594: NOT
41595: IFFALSE 41599
// exit ;
41597: GO 41870
// side := GetSide ( unit ) ;
41599: LD_ADDR_VAR 0 3
41603: PUSH
41604: LD_VAR 0 1
41608: PPUSH
41609: CALL_OW 255
41613: ST_TO_ADDR
// x := GetX ( unit ) ;
41614: LD_ADDR_VAR 0 5
41618: PUSH
41619: LD_VAR 0 1
41623: PPUSH
41624: CALL_OW 250
41628: ST_TO_ADDR
// y := GetY ( unit ) ;
41629: LD_ADDR_VAR 0 6
41633: PUSH
41634: LD_VAR 0 1
41638: PPUSH
41639: CALL_OW 251
41643: ST_TO_ADDR
// r := 8 ;
41644: LD_ADDR_VAR 0 4
41648: PUSH
41649: LD_INT 8
41651: ST_TO_ADDR
// if x - r < 0 then
41652: LD_VAR 0 5
41656: PUSH
41657: LD_VAR 0 4
41661: MINUS
41662: PUSH
41663: LD_INT 0
41665: LESS
41666: IFFALSE 41678
// min_x := 0 else
41668: LD_ADDR_VAR 0 7
41672: PUSH
41673: LD_INT 0
41675: ST_TO_ADDR
41676: GO 41694
// min_x := x - r ;
41678: LD_ADDR_VAR 0 7
41682: PUSH
41683: LD_VAR 0 5
41687: PUSH
41688: LD_VAR 0 4
41692: MINUS
41693: ST_TO_ADDR
// if y - r < 0 then
41694: LD_VAR 0 6
41698: PUSH
41699: LD_VAR 0 4
41703: MINUS
41704: PUSH
41705: LD_INT 0
41707: LESS
41708: IFFALSE 41720
// min_y := 0 else
41710: LD_ADDR_VAR 0 8
41714: PUSH
41715: LD_INT 0
41717: ST_TO_ADDR
41718: GO 41736
// min_y := y - r ;
41720: LD_ADDR_VAR 0 8
41724: PUSH
41725: LD_VAR 0 6
41729: PUSH
41730: LD_VAR 0 4
41734: MINUS
41735: ST_TO_ADDR
// max_x := x + r ;
41736: LD_ADDR_VAR 0 9
41740: PUSH
41741: LD_VAR 0 5
41745: PUSH
41746: LD_VAR 0 4
41750: PLUS
41751: ST_TO_ADDR
// max_y := y + r ;
41752: LD_ADDR_VAR 0 10
41756: PUSH
41757: LD_VAR 0 6
41761: PUSH
41762: LD_VAR 0 4
41766: PLUS
41767: ST_TO_ADDR
// for _x = min_x to max_x do
41768: LD_ADDR_VAR 0 11
41772: PUSH
41773: DOUBLE
41774: LD_VAR 0 7
41778: DEC
41779: ST_TO_ADDR
41780: LD_VAR 0 9
41784: PUSH
41785: FOR_TO
41786: IFFALSE 41868
// for _y = min_y to max_y do
41788: LD_ADDR_VAR 0 12
41792: PUSH
41793: DOUBLE
41794: LD_VAR 0 8
41798: DEC
41799: ST_TO_ADDR
41800: LD_VAR 0 10
41804: PUSH
41805: FOR_TO
41806: IFFALSE 41864
// begin if not ValidHex ( _x , _y ) then
41808: LD_VAR 0 11
41812: PPUSH
41813: LD_VAR 0 12
41817: PPUSH
41818: CALL_OW 488
41822: NOT
41823: IFFALSE 41827
// continue ;
41825: GO 41805
// if MineAtPos ( _x , _y ) then
41827: LD_VAR 0 11
41831: PPUSH
41832: LD_VAR 0 12
41836: PPUSH
41837: CALL_OW 458
41841: IFFALSE 41862
// ViewMineAtPos ( _x , _y , side ) ;
41843: LD_VAR 0 11
41847: PPUSH
41848: LD_VAR 0 12
41852: PPUSH
41853: LD_VAR 0 3
41857: PPUSH
41858: CALL_OW 457
// end ;
41862: GO 41805
41864: POP
41865: POP
41866: GO 41785
41868: POP
41869: POP
// end ;
41870: LD_VAR 0 2
41874: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
41875: LD_INT 0
41877: PPUSH
41878: PPUSH
41879: PPUSH
41880: PPUSH
41881: PPUSH
41882: PPUSH
41883: PPUSH
// if not units then
41884: LD_VAR 0 1
41888: NOT
41889: IFFALSE 41893
// exit ;
41891: GO 42357
// scaners := [ ] ;
41893: LD_ADDR_VAR 0 6
41897: PUSH
41898: EMPTY
41899: ST_TO_ADDR
// for i in units do
41900: LD_ADDR_VAR 0 3
41904: PUSH
41905: LD_VAR 0 1
41909: PUSH
41910: FOR_IN
41911: IFFALSE 42068
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
41913: LD_VAR 0 3
41917: PPUSH
41918: CALL_OW 264
41922: PUSH
41923: LD_INT 11
41925: NONEQUAL
41926: IFTRUE 41940
41928: PUSH
41929: LD_VAR 0 3
41933: PPUSH
41934: CALL_OW 302
41938: NOT
41939: OR
41940: IFTRUE 41957
41942: PUSH
41943: LD_VAR 0 3
41947: PPUSH
41948: CALL_OW 110
41952: PUSH
41953: LD_INT 502
41955: EQUAL
41956: OR
41957: IFFALSE 41961
// continue ;
41959: GO 41910
// ComStop ( i ) ;
41961: LD_VAR 0 3
41965: PPUSH
41966: CALL_OW 141
// x := GetX ( i ) ;
41970: LD_ADDR_VAR 0 4
41974: PUSH
41975: LD_VAR 0 3
41979: PPUSH
41980: CALL_OW 250
41984: ST_TO_ADDR
// y := GetY ( i ) ;
41985: LD_ADDR_VAR 0 5
41989: PUSH
41990: LD_VAR 0 3
41994: PPUSH
41995: CALL_OW 251
41999: ST_TO_ADDR
// if GetSide ( i ) = your_side then
42000: LD_VAR 0 3
42004: PPUSH
42005: CALL_OW 255
42009: PUSH
42010: LD_OWVAR 2
42014: EQUAL
42015: IFFALSE 42034
// PlaySoundXY ( x , y , mineDetector ) ;
42017: LD_VAR 0 4
42021: PPUSH
42022: LD_VAR 0 5
42026: PPUSH
42027: LD_STRING mineDetector
42029: PPUSH
42030: CALL_OW 366
// scaners := Join ( scaners , i ) ;
42034: LD_ADDR_VAR 0 6
42038: PUSH
42039: LD_VAR 0 6
42043: PPUSH
42044: LD_VAR 0 3
42048: PPUSH
42049: CALL 80589 0 2
42053: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
42054: LD_VAR 0 3
42058: PPUSH
42059: LD_INT 502
42061: PPUSH
42062: CALL_OW 109
// end ;
42066: GO 41910
42068: POP
42069: POP
// if not scaners then
42070: LD_VAR 0 6
42074: NOT
42075: IFFALSE 42079
// exit ;
42077: GO 42357
// wait ( 3 ) ;
42079: LD_INT 3
42081: PPUSH
42082: CALL_OW 67
// timer := 6 ;
42086: LD_ADDR_VAR 0 7
42090: PUSH
42091: LD_INT 6
42093: ST_TO_ADDR
// repeat for i in scaners do
42094: LD_ADDR_VAR 0 3
42098: PUSH
42099: LD_VAR 0 6
42103: PUSH
42104: FOR_IN
42105: IFFALSE 42255
// begin side := GetSide ( i ) ;
42107: LD_ADDR_VAR 0 8
42111: PUSH
42112: LD_VAR 0 3
42116: PPUSH
42117: CALL_OW 255
42121: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
42122: LD_VAR 0 3
42126: PPUSH
42127: CALL_OW 302
42131: NOT
42132: IFTRUE 42145
42134: PUSH
42135: LD_VAR 0 3
42139: PPUSH
42140: CALL_OW 314
42144: OR
42145: IFTRUE 42176
42147: PUSH
42148: LD_VAR 0 3
42152: PPUSH
42153: CALL_OW 263
42157: PUSH
42158: LD_INT 1
42160: EQUAL
42161: IFFALSE 42175
42163: PUSH
42164: LD_VAR 0 3
42168: PPUSH
42169: CALL_OW 311
42173: NOT
42174: AND
42175: OR
42176: IFFALSE 42220
// begin SetUnitDisplayNumber ( i , 0 ) ;
42178: LD_VAR 0 3
42182: PPUSH
42183: LD_INT 0
42185: PPUSH
42186: CALL_OW 505
// SetTag ( i , 0 ) ;
42190: LD_VAR 0 3
42194: PPUSH
42195: LD_INT 0
42197: PPUSH
42198: CALL_OW 109
// scaners := scaners diff i ;
42202: LD_ADDR_VAR 0 6
42206: PUSH
42207: LD_VAR 0 6
42211: PUSH
42212: LD_VAR 0 3
42216: DIFF
42217: ST_TO_ADDR
// continue ;
42218: GO 42104
// end ; if side in [ your_side , 9 ] then
42220: LD_VAR 0 8
42224: PUSH
42225: LD_OWVAR 2
42229: PUSH
42230: LD_INT 9
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: IN
42237: IFFALSE 42253
// SetUnitDisplayNumber ( i , timer ) ;
42239: LD_VAR 0 3
42243: PPUSH
42244: LD_VAR 0 7
42248: PPUSH
42249: CALL_OW 505
// end ;
42253: GO 42104
42255: POP
42256: POP
// if not scaners then
42257: LD_VAR 0 6
42261: NOT
42262: IFFALSE 42266
// exit ;
42264: GO 42357
// timer := Dec ( timer ) ;
42266: LD_ADDR_VAR 0 7
42270: PUSH
42271: LD_VAR 0 7
42275: PPUSH
42276: CALL 81984 0 1
42280: ST_TO_ADDR
// wait ( 0 0$1 ) ;
42281: LD_INT 35
42283: PPUSH
42284: CALL_OW 67
// until timer = 0 ;
42288: LD_VAR 0 7
42292: PUSH
42293: LD_INT 0
42295: EQUAL
42296: IFFALSE 42094
// if not scaners then
42298: LD_VAR 0 6
42302: NOT
42303: IFFALSE 42307
// exit ;
42305: GO 42357
// for i in scaners do
42307: LD_ADDR_VAR 0 3
42311: PUSH
42312: LD_VAR 0 6
42316: PUSH
42317: FOR_IN
42318: IFFALSE 42355
// begin SetUnitDisplayNumber ( i , 0 ) ;
42320: LD_VAR 0 3
42324: PPUSH
42325: LD_INT 0
42327: PPUSH
42328: CALL_OW 505
// SetTag ( i , 0 ) ;
42332: LD_VAR 0 3
42336: PPUSH
42337: LD_INT 0
42339: PPUSH
42340: CALL_OW 109
// RevealDetectorMine ( i ) ;
42344: LD_VAR 0 3
42348: PPUSH
42349: CALL 41577 0 1
// end ;
42353: GO 42317
42355: POP
42356: POP
// end ;
42357: LD_VAR 0 2
42361: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
42362: LD_INT 0
42364: PPUSH
// if p1 = mine_detector_mode then
42365: LD_VAR 0 2
42369: PUSH
42370: LD_INT 103
42372: EQUAL
42373: IFFALSE 42384
// DetectMine ( units ) ;
42375: LD_VAR 0 1
42379: PPUSH
42380: CALL 41875 0 1
// end ; end_of_file
42384: LD_VAR 0 7
42388: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
42389: LD_INT 0
42391: PPUSH
42392: PPUSH
// if exist_mode then
42393: LD_VAR 0 2
42397: IFFALSE 42443
// begin unit := CreateCharacter ( prefix & ident ) ;
42399: LD_ADDR_VAR 0 5
42403: PUSH
42404: LD_VAR 0 3
42408: PUSH
42409: LD_VAR 0 1
42413: STR
42414: PPUSH
42415: CALL_OW 34
42419: ST_TO_ADDR
// if unit then
42420: LD_VAR 0 5
42424: IFFALSE 42441
// DeleteCharacters ( prefix & ident ) ;
42426: LD_VAR 0 3
42430: PUSH
42431: LD_VAR 0 1
42435: STR
42436: PPUSH
42437: CALL_OW 40
// end else
42441: GO 42458
// unit := NewCharacter ( ident ) ;
42443: LD_ADDR_VAR 0 5
42447: PUSH
42448: LD_VAR 0 1
42452: PPUSH
42453: CALL_OW 25
42457: ST_TO_ADDR
// result := unit ;
42458: LD_ADDR_VAR 0 4
42462: PUSH
42463: LD_VAR 0 5
42467: ST_TO_ADDR
// end ;
42468: LD_VAR 0 4
42472: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
42473: LD_INT 0
42475: PPUSH
42476: PPUSH
// if exist_mode then
42477: LD_VAR 0 2
42481: IFFALSE 42506
// unit := CreateCharacter ( prefix & ident ) else
42483: LD_ADDR_VAR 0 5
42487: PUSH
42488: LD_VAR 0 3
42492: PUSH
42493: LD_VAR 0 1
42497: STR
42498: PPUSH
42499: CALL_OW 34
42503: ST_TO_ADDR
42504: GO 42521
// unit := NewCharacter ( ident ) ;
42506: LD_ADDR_VAR 0 5
42510: PUSH
42511: LD_VAR 0 1
42515: PPUSH
42516: CALL_OW 25
42520: ST_TO_ADDR
// result := unit ;
42521: LD_ADDR_VAR 0 4
42525: PUSH
42526: LD_VAR 0 5
42530: ST_TO_ADDR
// end ;
42531: LD_VAR 0 4
42535: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
42536: LD_INT 0
42538: PPUSH
42539: PPUSH
// if not side or not nation then
42540: LD_VAR 0 1
42544: NOT
42545: IFTRUE 42554
42547: PUSH
42548: LD_VAR 0 2
42552: NOT
42553: OR
42554: IFFALSE 42558
// exit ;
42556: GO 43352
// case nation of nation_american :
42558: LD_VAR 0 2
42562: PUSH
42563: LD_INT 1
42565: DOUBLE
42566: EQUAL
42567: IFTRUE 42571
42569: GO 42793
42571: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
42572: LD_ADDR_VAR 0 4
42576: PUSH
42577: LD_INT 35
42579: PUSH
42580: LD_INT 45
42582: PUSH
42583: LD_INT 46
42585: PUSH
42586: LD_INT 47
42588: PUSH
42589: LD_INT 82
42591: PUSH
42592: LD_INT 83
42594: PUSH
42595: LD_INT 84
42597: PUSH
42598: LD_INT 85
42600: PUSH
42601: LD_INT 86
42603: PUSH
42604: LD_INT 1
42606: PUSH
42607: LD_INT 2
42609: PUSH
42610: LD_INT 6
42612: PUSH
42613: LD_INT 15
42615: PUSH
42616: LD_INT 16
42618: PUSH
42619: LD_INT 7
42621: PUSH
42622: LD_INT 12
42624: PUSH
42625: LD_INT 13
42627: PUSH
42628: LD_INT 10
42630: PUSH
42631: LD_INT 14
42633: PUSH
42634: LD_INT 20
42636: PUSH
42637: LD_INT 21
42639: PUSH
42640: LD_INT 22
42642: PUSH
42643: LD_INT 25
42645: PUSH
42646: LD_INT 32
42648: PUSH
42649: LD_INT 27
42651: PUSH
42652: LD_INT 36
42654: PUSH
42655: LD_INT 69
42657: PUSH
42658: LD_INT 39
42660: PUSH
42661: LD_INT 34
42663: PUSH
42664: LD_INT 40
42666: PUSH
42667: LD_INT 48
42669: PUSH
42670: LD_INT 49
42672: PUSH
42673: LD_INT 50
42675: PUSH
42676: LD_INT 51
42678: PUSH
42679: LD_INT 52
42681: PUSH
42682: LD_INT 53
42684: PUSH
42685: LD_INT 54
42687: PUSH
42688: LD_INT 55
42690: PUSH
42691: LD_INT 56
42693: PUSH
42694: LD_INT 57
42696: PUSH
42697: LD_INT 58
42699: PUSH
42700: LD_INT 59
42702: PUSH
42703: LD_INT 60
42705: PUSH
42706: LD_INT 61
42708: PUSH
42709: LD_INT 62
42711: PUSH
42712: LD_INT 80
42714: PUSH
42715: LD_INT 82
42717: PUSH
42718: LD_INT 83
42720: PUSH
42721: LD_INT 84
42723: PUSH
42724: LD_INT 85
42726: PUSH
42727: LD_INT 86
42729: PUSH
42730: LD_INT 90
42732: PUSH
42733: LD_INT 93
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: LIST
42740: LIST
42741: LIST
42742: LIST
42743: LIST
42744: LIST
42745: LIST
42746: LIST
42747: LIST
42748: LIST
42749: LIST
42750: LIST
42751: LIST
42752: LIST
42753: LIST
42754: LIST
42755: LIST
42756: LIST
42757: LIST
42758: LIST
42759: LIST
42760: LIST
42761: LIST
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: LIST
42776: LIST
42777: LIST
42778: LIST
42779: LIST
42780: LIST
42781: LIST
42782: LIST
42783: LIST
42784: LIST
42785: LIST
42786: LIST
42787: LIST
42788: LIST
42789: LIST
42790: ST_TO_ADDR
42791: GO 43274
42793: LD_INT 2
42795: DOUBLE
42796: EQUAL
42797: IFTRUE 42801
42799: GO 43035
42801: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
42802: LD_ADDR_VAR 0 4
42806: PUSH
42807: LD_INT 35
42809: PUSH
42810: LD_INT 45
42812: PUSH
42813: LD_INT 46
42815: PUSH
42816: LD_INT 47
42818: PUSH
42819: LD_INT 82
42821: PUSH
42822: LD_INT 83
42824: PUSH
42825: LD_INT 84
42827: PUSH
42828: LD_INT 85
42830: PUSH
42831: LD_INT 87
42833: PUSH
42834: LD_INT 70
42836: PUSH
42837: LD_INT 1
42839: PUSH
42840: LD_INT 11
42842: PUSH
42843: LD_INT 3
42845: PUSH
42846: LD_INT 4
42848: PUSH
42849: LD_INT 5
42851: PUSH
42852: LD_INT 6
42854: PUSH
42855: LD_INT 15
42857: PUSH
42858: LD_INT 18
42860: PUSH
42861: LD_INT 7
42863: PUSH
42864: LD_INT 17
42866: PUSH
42867: LD_INT 8
42869: PUSH
42870: LD_INT 20
42872: PUSH
42873: LD_INT 21
42875: PUSH
42876: LD_INT 22
42878: PUSH
42879: LD_INT 72
42881: PUSH
42882: LD_INT 26
42884: PUSH
42885: LD_INT 69
42887: PUSH
42888: LD_INT 39
42890: PUSH
42891: LD_INT 40
42893: PUSH
42894: LD_INT 41
42896: PUSH
42897: LD_INT 42
42899: PUSH
42900: LD_INT 43
42902: PUSH
42903: LD_INT 48
42905: PUSH
42906: LD_INT 49
42908: PUSH
42909: LD_INT 50
42911: PUSH
42912: LD_INT 51
42914: PUSH
42915: LD_INT 52
42917: PUSH
42918: LD_INT 53
42920: PUSH
42921: LD_INT 54
42923: PUSH
42924: LD_INT 55
42926: PUSH
42927: LD_INT 56
42929: PUSH
42930: LD_INT 60
42932: PUSH
42933: LD_INT 61
42935: PUSH
42936: LD_INT 62
42938: PUSH
42939: LD_INT 66
42941: PUSH
42942: LD_INT 67
42944: PUSH
42945: LD_INT 68
42947: PUSH
42948: LD_INT 81
42950: PUSH
42951: LD_INT 82
42953: PUSH
42954: LD_INT 83
42956: PUSH
42957: LD_INT 84
42959: PUSH
42960: LD_INT 85
42962: PUSH
42963: LD_INT 87
42965: PUSH
42966: LD_INT 88
42968: PUSH
42969: LD_INT 92
42971: PUSH
42972: LD_INT 94
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: LIST
42979: LIST
42980: LIST
42981: LIST
42982: LIST
42983: LIST
42984: LIST
42985: LIST
42986: LIST
42987: LIST
42988: LIST
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: LIST
42995: LIST
42996: LIST
42997: LIST
42998: LIST
42999: LIST
43000: LIST
43001: LIST
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: LIST
43007: LIST
43008: LIST
43009: LIST
43010: LIST
43011: LIST
43012: LIST
43013: LIST
43014: LIST
43015: LIST
43016: LIST
43017: LIST
43018: LIST
43019: LIST
43020: LIST
43021: LIST
43022: LIST
43023: LIST
43024: LIST
43025: LIST
43026: LIST
43027: LIST
43028: LIST
43029: LIST
43030: LIST
43031: LIST
43032: ST_TO_ADDR
43033: GO 43274
43035: LD_INT 3
43037: DOUBLE
43038: EQUAL
43039: IFTRUE 43043
43041: GO 43273
43043: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
43044: LD_ADDR_VAR 0 4
43048: PUSH
43049: LD_INT 46
43051: PUSH
43052: LD_INT 47
43054: PUSH
43055: LD_INT 1
43057: PUSH
43058: LD_INT 2
43060: PUSH
43061: LD_INT 82
43063: PUSH
43064: LD_INT 83
43066: PUSH
43067: LD_INT 84
43069: PUSH
43070: LD_INT 85
43072: PUSH
43073: LD_INT 86
43075: PUSH
43076: LD_INT 11
43078: PUSH
43079: LD_INT 9
43081: PUSH
43082: LD_INT 20
43084: PUSH
43085: LD_INT 19
43087: PUSH
43088: LD_INT 21
43090: PUSH
43091: LD_INT 24
43093: PUSH
43094: LD_INT 22
43096: PUSH
43097: LD_INT 25
43099: PUSH
43100: LD_INT 28
43102: PUSH
43103: LD_INT 29
43105: PUSH
43106: LD_INT 30
43108: PUSH
43109: LD_INT 31
43111: PUSH
43112: LD_INT 37
43114: PUSH
43115: LD_INT 38
43117: PUSH
43118: LD_INT 32
43120: PUSH
43121: LD_INT 27
43123: PUSH
43124: LD_INT 33
43126: PUSH
43127: LD_INT 69
43129: PUSH
43130: LD_INT 39
43132: PUSH
43133: LD_INT 34
43135: PUSH
43136: LD_INT 40
43138: PUSH
43139: LD_INT 71
43141: PUSH
43142: LD_INT 23
43144: PUSH
43145: LD_INT 44
43147: PUSH
43148: LD_INT 48
43150: PUSH
43151: LD_INT 49
43153: PUSH
43154: LD_INT 50
43156: PUSH
43157: LD_INT 51
43159: PUSH
43160: LD_INT 52
43162: PUSH
43163: LD_INT 53
43165: PUSH
43166: LD_INT 54
43168: PUSH
43169: LD_INT 55
43171: PUSH
43172: LD_INT 56
43174: PUSH
43175: LD_INT 57
43177: PUSH
43178: LD_INT 58
43180: PUSH
43181: LD_INT 59
43183: PUSH
43184: LD_INT 63
43186: PUSH
43187: LD_INT 64
43189: PUSH
43190: LD_INT 65
43192: PUSH
43193: LD_INT 82
43195: PUSH
43196: LD_INT 83
43198: PUSH
43199: LD_INT 84
43201: PUSH
43202: LD_INT 85
43204: PUSH
43205: LD_INT 86
43207: PUSH
43208: LD_INT 89
43210: PUSH
43211: LD_INT 91
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: LIST
43218: LIST
43219: LIST
43220: LIST
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: LIST
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: LIST
43241: LIST
43242: LIST
43243: LIST
43244: LIST
43245: LIST
43246: LIST
43247: LIST
43248: LIST
43249: LIST
43250: LIST
43251: LIST
43252: LIST
43253: LIST
43254: LIST
43255: LIST
43256: LIST
43257: LIST
43258: LIST
43259: LIST
43260: LIST
43261: LIST
43262: LIST
43263: LIST
43264: LIST
43265: LIST
43266: LIST
43267: LIST
43268: LIST
43269: LIST
43270: ST_TO_ADDR
43271: GO 43274
43273: POP
// if state > - 1 and state < 3 then
43274: LD_VAR 0 3
43278: PUSH
43279: LD_INT 1
43281: NEG
43282: GREATER
43283: IFFALSE 43295
43285: PUSH
43286: LD_VAR 0 3
43290: PUSH
43291: LD_INT 3
43293: LESS
43294: AND
43295: IFFALSE 43352
// for i in result do
43297: LD_ADDR_VAR 0 5
43301: PUSH
43302: LD_VAR 0 4
43306: PUSH
43307: FOR_IN
43308: IFFALSE 43350
// if GetTech ( i , side ) <> state then
43310: LD_VAR 0 5
43314: PPUSH
43315: LD_VAR 0 1
43319: PPUSH
43320: CALL_OW 321
43324: PUSH
43325: LD_VAR 0 3
43329: NONEQUAL
43330: IFFALSE 43348
// result := result diff i ;
43332: LD_ADDR_VAR 0 4
43336: PUSH
43337: LD_VAR 0 4
43341: PUSH
43342: LD_VAR 0 5
43346: DIFF
43347: ST_TO_ADDR
43348: GO 43307
43350: POP
43351: POP
// end ;
43352: LD_VAR 0 4
43356: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
43357: LD_INT 0
43359: PPUSH
43360: PPUSH
43361: PPUSH
// result := true ;
43362: LD_ADDR_VAR 0 3
43366: PUSH
43367: LD_INT 1
43369: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
43370: LD_ADDR_VAR 0 5
43374: PUSH
43375: LD_VAR 0 2
43379: PPUSH
43380: CALL_OW 480
43384: ST_TO_ADDR
// if not tmp then
43385: LD_VAR 0 5
43389: NOT
43390: IFFALSE 43394
// exit ;
43392: GO 43443
// for i in tmp do
43394: LD_ADDR_VAR 0 4
43398: PUSH
43399: LD_VAR 0 5
43403: PUSH
43404: FOR_IN
43405: IFFALSE 43441
// if GetTech ( i , side ) <> state_researched then
43407: LD_VAR 0 4
43411: PPUSH
43412: LD_VAR 0 1
43416: PPUSH
43417: CALL_OW 321
43421: PUSH
43422: LD_INT 2
43424: NONEQUAL
43425: IFFALSE 43439
// begin result := false ;
43427: LD_ADDR_VAR 0 3
43431: PUSH
43432: LD_INT 0
43434: ST_TO_ADDR
// exit ;
43435: POP
43436: POP
43437: GO 43443
// end ;
43439: GO 43404
43441: POP
43442: POP
// end ;
43443: LD_VAR 0 3
43447: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
43448: LD_INT 0
43450: PPUSH
43451: PPUSH
43452: PPUSH
43453: PPUSH
43454: PPUSH
43455: PPUSH
43456: PPUSH
43457: PPUSH
43458: PPUSH
43459: PPUSH
43460: PPUSH
43461: PPUSH
43462: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
43463: LD_VAR 0 1
43467: NOT
43468: IFTRUE 43485
43470: PUSH
43471: LD_VAR 0 1
43475: PPUSH
43476: CALL_OW 257
43480: PUSH
43481: LD_INT 9
43483: NONEQUAL
43484: OR
43485: IFFALSE 43489
// exit ;
43487: GO 44068
// side := GetSide ( unit ) ;
43489: LD_ADDR_VAR 0 9
43493: PUSH
43494: LD_VAR 0 1
43498: PPUSH
43499: CALL_OW 255
43503: ST_TO_ADDR
// tech_space := tech_spacanom ;
43504: LD_ADDR_VAR 0 12
43508: PUSH
43509: LD_INT 29
43511: ST_TO_ADDR
// tech_time := tech_taurad ;
43512: LD_ADDR_VAR 0 13
43516: PUSH
43517: LD_INT 28
43519: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
43520: LD_ADDR_VAR 0 11
43524: PUSH
43525: LD_VAR 0 1
43529: PPUSH
43530: CALL_OW 310
43534: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
43535: LD_VAR 0 11
43539: PPUSH
43540: CALL_OW 247
43544: PUSH
43545: LD_INT 2
43547: EQUAL
43548: IFFALSE 43552
// exit ;
43550: GO 44068
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43552: LD_ADDR_VAR 0 8
43556: PUSH
43557: LD_INT 81
43559: PUSH
43560: LD_VAR 0 9
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: PUSH
43569: LD_INT 3
43571: PUSH
43572: LD_INT 21
43574: PUSH
43575: LD_INT 3
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: PUSH
43586: EMPTY
43587: LIST
43588: LIST
43589: PPUSH
43590: CALL_OW 69
43594: ST_TO_ADDR
// if not tmp then
43595: LD_VAR 0 8
43599: NOT
43600: IFFALSE 43604
// exit ;
43602: GO 44068
// if in_unit then
43604: LD_VAR 0 11
43608: IFFALSE 43632
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
43610: LD_ADDR_VAR 0 10
43614: PUSH
43615: LD_VAR 0 8
43619: PPUSH
43620: LD_VAR 0 11
43624: PPUSH
43625: CALL_OW 74
43629: ST_TO_ADDR
43630: GO 43652
// enemy := NearestUnitToUnit ( tmp , unit ) ;
43632: LD_ADDR_VAR 0 10
43636: PUSH
43637: LD_VAR 0 8
43641: PPUSH
43642: LD_VAR 0 1
43646: PPUSH
43647: CALL_OW 74
43651: ST_TO_ADDR
// if not enemy then
43652: LD_VAR 0 10
43656: NOT
43657: IFFALSE 43661
// exit ;
43659: GO 44068
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
43661: LD_VAR 0 11
43665: IFFALSE 43687
43667: PUSH
43668: LD_VAR 0 11
43672: PPUSH
43673: LD_VAR 0 10
43677: PPUSH
43678: CALL_OW 296
43682: PUSH
43683: LD_INT 13
43685: GREATER
43686: AND
43687: IFTRUE 43709
43689: PUSH
43690: LD_VAR 0 1
43694: PPUSH
43695: LD_VAR 0 10
43699: PPUSH
43700: CALL_OW 296
43704: PUSH
43705: LD_INT 12
43707: GREATER
43708: OR
43709: IFFALSE 43713
// exit ;
43711: GO 44068
// missile := [ 1 ] ;
43713: LD_ADDR_VAR 0 14
43717: PUSH
43718: LD_INT 1
43720: PUSH
43721: EMPTY
43722: LIST
43723: ST_TO_ADDR
// if Researched ( side , tech_space ) then
43724: LD_VAR 0 9
43728: PPUSH
43729: LD_VAR 0 12
43733: PPUSH
43734: CALL_OW 325
43738: IFFALSE 43767
// missile := Replace ( missile , missile + 1 , 2 ) ;
43740: LD_ADDR_VAR 0 14
43744: PUSH
43745: LD_VAR 0 14
43749: PPUSH
43750: LD_VAR 0 14
43754: PUSH
43755: LD_INT 1
43757: PLUS
43758: PPUSH
43759: LD_INT 2
43761: PPUSH
43762: CALL_OW 1
43766: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
43767: LD_VAR 0 9
43771: PPUSH
43772: LD_VAR 0 13
43776: PPUSH
43777: CALL_OW 325
43781: IFFALSE 43805
43783: PUSH
43784: LD_VAR 0 10
43788: PPUSH
43789: CALL_OW 255
43793: PPUSH
43794: LD_VAR 0 13
43798: PPUSH
43799: CALL_OW 325
43803: NOT
43804: AND
43805: IFFALSE 43834
// missile := Replace ( missile , missile + 1 , 3 ) ;
43807: LD_ADDR_VAR 0 14
43811: PUSH
43812: LD_VAR 0 14
43816: PPUSH
43817: LD_VAR 0 14
43821: PUSH
43822: LD_INT 1
43824: PLUS
43825: PPUSH
43826: LD_INT 3
43828: PPUSH
43829: CALL_OW 1
43833: ST_TO_ADDR
// if missile < 2 then
43834: LD_VAR 0 14
43838: PUSH
43839: LD_INT 2
43841: LESS
43842: IFFALSE 43846
// exit ;
43844: GO 44068
// x := GetX ( enemy ) ;
43846: LD_ADDR_VAR 0 4
43850: PUSH
43851: LD_VAR 0 10
43855: PPUSH
43856: CALL_OW 250
43860: ST_TO_ADDR
// y := GetY ( enemy ) ;
43861: LD_ADDR_VAR 0 5
43865: PUSH
43866: LD_VAR 0 10
43870: PPUSH
43871: CALL_OW 251
43875: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
43876: LD_ADDR_VAR 0 6
43880: PUSH
43881: LD_VAR 0 4
43885: PUSH
43886: LD_INT 1
43888: NEG
43889: PPUSH
43890: LD_INT 1
43892: PPUSH
43893: CALL_OW 12
43897: PLUS
43898: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
43899: LD_ADDR_VAR 0 7
43903: PUSH
43904: LD_VAR 0 5
43908: PUSH
43909: LD_INT 1
43911: NEG
43912: PPUSH
43913: LD_INT 1
43915: PPUSH
43916: CALL_OW 12
43920: PLUS
43921: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43922: LD_VAR 0 6
43926: PPUSH
43927: LD_VAR 0 7
43931: PPUSH
43932: CALL_OW 488
43936: NOT
43937: IFFALSE 43959
// begin _x := x ;
43939: LD_ADDR_VAR 0 6
43943: PUSH
43944: LD_VAR 0 4
43948: ST_TO_ADDR
// _y := y ;
43949: LD_ADDR_VAR 0 7
43953: PUSH
43954: LD_VAR 0 5
43958: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
43959: LD_ADDR_VAR 0 3
43963: PUSH
43964: LD_INT 1
43966: PPUSH
43967: LD_VAR 0 14
43971: PPUSH
43972: CALL_OW 12
43976: ST_TO_ADDR
// case i of 1 :
43977: LD_VAR 0 3
43981: PUSH
43982: LD_INT 1
43984: DOUBLE
43985: EQUAL
43986: IFTRUE 43990
43988: GO 44007
43990: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
43991: LD_VAR 0 1
43995: PPUSH
43996: LD_VAR 0 10
44000: PPUSH
44001: CALL_OW 115
44005: GO 44068
44007: LD_INT 2
44009: DOUBLE
44010: EQUAL
44011: IFTRUE 44015
44013: GO 44037
44015: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
44016: LD_VAR 0 1
44020: PPUSH
44021: LD_VAR 0 6
44025: PPUSH
44026: LD_VAR 0 7
44030: PPUSH
44031: CALL_OW 153
44035: GO 44068
44037: LD_INT 3
44039: DOUBLE
44040: EQUAL
44041: IFTRUE 44045
44043: GO 44067
44045: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
44046: LD_VAR 0 1
44050: PPUSH
44051: LD_VAR 0 6
44055: PPUSH
44056: LD_VAR 0 7
44060: PPUSH
44061: CALL_OW 154
44065: GO 44068
44067: POP
// end ;
44068: LD_VAR 0 2
44072: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
44073: LD_INT 0
44075: PPUSH
44076: PPUSH
44077: PPUSH
44078: PPUSH
44079: PPUSH
44080: PPUSH
// if not unit or not building then
44081: LD_VAR 0 1
44085: NOT
44086: IFTRUE 44095
44088: PUSH
44089: LD_VAR 0 2
44093: NOT
44094: OR
44095: IFFALSE 44099
// exit ;
44097: GO 44257
// x := GetX ( building ) ;
44099: LD_ADDR_VAR 0 5
44103: PUSH
44104: LD_VAR 0 2
44108: PPUSH
44109: CALL_OW 250
44113: ST_TO_ADDR
// y := GetY ( building ) ;
44114: LD_ADDR_VAR 0 6
44118: PUSH
44119: LD_VAR 0 2
44123: PPUSH
44124: CALL_OW 251
44128: ST_TO_ADDR
// for i := 0 to 5 do
44129: LD_ADDR_VAR 0 4
44133: PUSH
44134: DOUBLE
44135: LD_INT 0
44137: DEC
44138: ST_TO_ADDR
44139: LD_INT 5
44141: PUSH
44142: FOR_TO
44143: IFFALSE 44255
// begin _x := ShiftX ( x , i , 3 ) ;
44145: LD_ADDR_VAR 0 7
44149: PUSH
44150: LD_VAR 0 5
44154: PPUSH
44155: LD_VAR 0 4
44159: PPUSH
44160: LD_INT 3
44162: PPUSH
44163: CALL_OW 272
44167: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
44168: LD_ADDR_VAR 0 8
44172: PUSH
44173: LD_VAR 0 6
44177: PPUSH
44178: LD_VAR 0 4
44182: PPUSH
44183: LD_INT 3
44185: PPUSH
44186: CALL_OW 273
44190: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
44191: LD_VAR 0 7
44195: PPUSH
44196: LD_VAR 0 8
44200: PPUSH
44201: CALL_OW 488
44205: NOT
44206: IFFALSE 44210
// continue ;
44208: GO 44142
// if HexInfo ( _x , _y ) = 0 then
44210: LD_VAR 0 7
44214: PPUSH
44215: LD_VAR 0 8
44219: PPUSH
44220: CALL_OW 428
44224: PUSH
44225: LD_INT 0
44227: EQUAL
44228: IFFALSE 44253
// begin ComMoveXY ( unit , _x , _y ) ;
44230: LD_VAR 0 1
44234: PPUSH
44235: LD_VAR 0 7
44239: PPUSH
44240: LD_VAR 0 8
44244: PPUSH
44245: CALL_OW 111
// exit ;
44249: POP
44250: POP
44251: GO 44257
// end ; end ;
44253: GO 44142
44255: POP
44256: POP
// end ;
44257: LD_VAR 0 3
44261: RET
// export function ScanBase ( side , base_area ) ; begin
44262: LD_INT 0
44264: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
44265: LD_ADDR_VAR 0 3
44269: PUSH
44270: LD_VAR 0 2
44274: PPUSH
44275: LD_INT 81
44277: PUSH
44278: LD_VAR 0 1
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PPUSH
44287: CALL_OW 70
44291: ST_TO_ADDR
// end ;
44292: LD_VAR 0 3
44296: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
44297: LD_INT 0
44299: PPUSH
44300: PPUSH
44301: PPUSH
44302: PPUSH
// result := false ;
44303: LD_ADDR_VAR 0 2
44307: PUSH
44308: LD_INT 0
44310: ST_TO_ADDR
// side := GetSide ( unit ) ;
44311: LD_ADDR_VAR 0 3
44315: PUSH
44316: LD_VAR 0 1
44320: PPUSH
44321: CALL_OW 255
44325: ST_TO_ADDR
// nat := GetNation ( unit ) ;
44326: LD_ADDR_VAR 0 4
44330: PUSH
44331: LD_VAR 0 1
44335: PPUSH
44336: CALL_OW 248
44340: ST_TO_ADDR
// case nat of 1 :
44341: LD_VAR 0 4
44345: PUSH
44346: LD_INT 1
44348: DOUBLE
44349: EQUAL
44350: IFTRUE 44354
44352: GO 44365
44354: POP
// tech := tech_lassight ; 2 :
44355: LD_ADDR_VAR 0 5
44359: PUSH
44360: LD_INT 12
44362: ST_TO_ADDR
44363: GO 44404
44365: LD_INT 2
44367: DOUBLE
44368: EQUAL
44369: IFTRUE 44373
44371: GO 44384
44373: POP
// tech := tech_mortar ; 3 :
44374: LD_ADDR_VAR 0 5
44378: PUSH
44379: LD_INT 41
44381: ST_TO_ADDR
44382: GO 44404
44384: LD_INT 3
44386: DOUBLE
44387: EQUAL
44388: IFTRUE 44392
44390: GO 44403
44392: POP
// tech := tech_bazooka ; end ;
44393: LD_ADDR_VAR 0 5
44397: PUSH
44398: LD_INT 44
44400: ST_TO_ADDR
44401: GO 44404
44403: POP
// if Researched ( side , tech ) then
44404: LD_VAR 0 3
44408: PPUSH
44409: LD_VAR 0 5
44413: PPUSH
44414: CALL_OW 325
44418: IFFALSE 44445
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
44420: LD_ADDR_VAR 0 2
44424: PUSH
44425: LD_INT 5
44427: PUSH
44428: LD_INT 8
44430: PUSH
44431: LD_INT 9
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: LIST
44438: PUSH
44439: LD_VAR 0 4
44443: ARRAY
44444: ST_TO_ADDR
// end ;
44445: LD_VAR 0 2
44449: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
44450: LD_INT 0
44452: PPUSH
44453: PPUSH
44454: PPUSH
// if not mines then
44455: LD_VAR 0 2
44459: NOT
44460: IFFALSE 44464
// exit ;
44462: GO 44608
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44464: LD_ADDR_VAR 0 5
44468: PUSH
44469: LD_INT 81
44471: PUSH
44472: LD_VAR 0 1
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: LD_INT 3
44483: PUSH
44484: LD_INT 21
44486: PUSH
44487: LD_INT 3
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PPUSH
44502: CALL_OW 69
44506: ST_TO_ADDR
// for i in mines do
44507: LD_ADDR_VAR 0 4
44511: PUSH
44512: LD_VAR 0 2
44516: PUSH
44517: FOR_IN
44518: IFFALSE 44606
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
44520: LD_VAR 0 4
44524: PUSH
44525: LD_INT 1
44527: ARRAY
44528: PPUSH
44529: LD_VAR 0 4
44533: PUSH
44534: LD_INT 2
44536: ARRAY
44537: PPUSH
44538: CALL_OW 458
44542: NOT
44543: IFFALSE 44547
// continue ;
44545: GO 44517
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
44547: LD_VAR 0 4
44551: PUSH
44552: LD_INT 1
44554: ARRAY
44555: PPUSH
44556: LD_VAR 0 4
44560: PUSH
44561: LD_INT 2
44563: ARRAY
44564: PPUSH
44565: CALL_OW 428
44569: PUSH
44570: LD_VAR 0 5
44574: IN
44575: IFFALSE 44604
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
44577: LD_VAR 0 4
44581: PUSH
44582: LD_INT 1
44584: ARRAY
44585: PPUSH
44586: LD_VAR 0 4
44590: PUSH
44591: LD_INT 2
44593: ARRAY
44594: PPUSH
44595: LD_VAR 0 1
44599: PPUSH
44600: CALL_OW 456
// end ;
44604: GO 44517
44606: POP
44607: POP
// end ;
44608: LD_VAR 0 3
44612: RET
// export function Count ( array ) ; begin
44613: LD_INT 0
44615: PPUSH
// result := array + 0 ;
44616: LD_ADDR_VAR 0 2
44620: PUSH
44621: LD_VAR 0 1
44625: PUSH
44626: LD_INT 0
44628: PLUS
44629: ST_TO_ADDR
// end ;
44630: LD_VAR 0 2
44634: RET
// export function IsEmpty ( building ) ; begin
44635: LD_INT 0
44637: PPUSH
// if not building then
44638: LD_VAR 0 1
44642: NOT
44643: IFFALSE 44647
// exit ;
44645: GO 44690
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
44647: LD_ADDR_VAR 0 2
44651: PUSH
44652: LD_VAR 0 1
44656: PUSH
44657: LD_INT 22
44659: PUSH
44660: LD_VAR 0 1
44664: PPUSH
44665: CALL_OW 255
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: PUSH
44674: LD_INT 58
44676: PUSH
44677: EMPTY
44678: LIST
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PPUSH
44684: CALL_OW 69
44688: IN
44689: ST_TO_ADDR
// end ;
44690: LD_VAR 0 2
44694: RET
// export function IsNotFull ( building ) ; var places ; begin
44695: LD_INT 0
44697: PPUSH
44698: PPUSH
// if not building then
44699: LD_VAR 0 1
44703: NOT
44704: IFFALSE 44708
// exit ;
44706: GO 44736
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
44708: LD_ADDR_VAR 0 2
44712: PUSH
44713: LD_VAR 0 1
44717: PPUSH
44718: LD_INT 3
44720: PUSH
44721: LD_INT 62
44723: PUSH
44724: EMPTY
44725: LIST
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PPUSH
44731: CALL_OW 72
44735: ST_TO_ADDR
// end ;
44736: LD_VAR 0 2
44740: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
44741: LD_INT 0
44743: PPUSH
44744: PPUSH
44745: PPUSH
44746: PPUSH
// tmp := [ ] ;
44747: LD_ADDR_VAR 0 3
44751: PUSH
44752: EMPTY
44753: ST_TO_ADDR
// list := [ ] ;
44754: LD_ADDR_VAR 0 5
44758: PUSH
44759: EMPTY
44760: ST_TO_ADDR
// for i = 16 to 25 do
44761: LD_ADDR_VAR 0 4
44765: PUSH
44766: DOUBLE
44767: LD_INT 16
44769: DEC
44770: ST_TO_ADDR
44771: LD_INT 25
44773: PUSH
44774: FOR_TO
44775: IFFALSE 44848
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
44777: LD_ADDR_VAR 0 3
44781: PUSH
44782: LD_VAR 0 3
44786: PUSH
44787: LD_INT 22
44789: PUSH
44790: LD_VAR 0 1
44794: PPUSH
44795: CALL_OW 255
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: PUSH
44804: LD_INT 91
44806: PUSH
44807: LD_VAR 0 1
44811: PUSH
44812: LD_INT 6
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: LIST
44819: PUSH
44820: LD_INT 30
44822: PUSH
44823: LD_VAR 0 4
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: LIST
44836: PUSH
44837: EMPTY
44838: LIST
44839: PPUSH
44840: CALL_OW 69
44844: ADD
44845: ST_TO_ADDR
44846: GO 44774
44848: POP
44849: POP
// for i = 1 to tmp do
44850: LD_ADDR_VAR 0 4
44854: PUSH
44855: DOUBLE
44856: LD_INT 1
44858: DEC
44859: ST_TO_ADDR
44860: LD_VAR 0 3
44864: PUSH
44865: FOR_TO
44866: IFFALSE 44954
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
44868: LD_ADDR_VAR 0 5
44872: PUSH
44873: LD_VAR 0 5
44877: PUSH
44878: LD_VAR 0 3
44882: PUSH
44883: LD_VAR 0 4
44887: ARRAY
44888: PPUSH
44889: CALL_OW 266
44893: PUSH
44894: LD_VAR 0 3
44898: PUSH
44899: LD_VAR 0 4
44903: ARRAY
44904: PPUSH
44905: CALL_OW 250
44909: PUSH
44910: LD_VAR 0 3
44914: PUSH
44915: LD_VAR 0 4
44919: ARRAY
44920: PPUSH
44921: CALL_OW 251
44925: PUSH
44926: LD_VAR 0 3
44930: PUSH
44931: LD_VAR 0 4
44935: ARRAY
44936: PPUSH
44937: CALL_OW 254
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: LIST
44946: LIST
44947: PUSH
44948: EMPTY
44949: LIST
44950: ADD
44951: ST_TO_ADDR
44952: GO 44865
44954: POP
44955: POP
// result := list ;
44956: LD_ADDR_VAR 0 2
44960: PUSH
44961: LD_VAR 0 5
44965: ST_TO_ADDR
// end ;
44966: LD_VAR 0 2
44970: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
44971: LD_INT 0
44973: PPUSH
44974: PPUSH
44975: PPUSH
44976: PPUSH
44977: PPUSH
44978: PPUSH
44979: PPUSH
// if not factory then
44980: LD_VAR 0 1
44984: NOT
44985: IFFALSE 44989
// exit ;
44987: GO 45592
// if control = control_apeman then
44989: LD_VAR 0 4
44993: PUSH
44994: LD_INT 5
44996: EQUAL
44997: IFFALSE 45106
// begin tmp := UnitsInside ( factory ) ;
44999: LD_ADDR_VAR 0 8
45003: PUSH
45004: LD_VAR 0 1
45008: PPUSH
45009: CALL_OW 313
45013: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
45014: LD_VAR 0 8
45018: PPUSH
45019: LD_INT 25
45021: PUSH
45022: LD_INT 12
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PPUSH
45029: CALL_OW 72
45033: NOT
45034: IFFALSE 45044
// control := control_manual ;
45036: LD_ADDR_VAR 0 4
45040: PUSH
45041: LD_INT 1
45043: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
45044: LD_ADDR_VAR 0 8
45048: PUSH
45049: LD_VAR 0 1
45053: PPUSH
45054: CALL 44741 0 1
45058: ST_TO_ADDR
// if tmp then
45059: LD_VAR 0 8
45063: IFFALSE 45106
// begin for i in tmp do
45065: LD_ADDR_VAR 0 7
45069: PUSH
45070: LD_VAR 0 8
45074: PUSH
45075: FOR_IN
45076: IFFALSE 45104
// if i [ 1 ] = b_ext_radio then
45078: LD_VAR 0 7
45082: PUSH
45083: LD_INT 1
45085: ARRAY
45086: PUSH
45087: LD_INT 22
45089: EQUAL
45090: IFFALSE 45102
// begin control := control_remote ;
45092: LD_ADDR_VAR 0 4
45096: PUSH
45097: LD_INT 2
45099: ST_TO_ADDR
// break ;
45100: GO 45104
// end ;
45102: GO 45075
45104: POP
45105: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
45106: LD_VAR 0 1
45110: PPUSH
45111: LD_VAR 0 2
45115: PPUSH
45116: LD_VAR 0 3
45120: PPUSH
45121: LD_VAR 0 4
45125: PPUSH
45126: LD_VAR 0 5
45130: PPUSH
45131: CALL_OW 448
45135: IFFALSE 45170
// begin result := [ chassis , engine , control , weapon ] ;
45137: LD_ADDR_VAR 0 6
45141: PUSH
45142: LD_VAR 0 2
45146: PUSH
45147: LD_VAR 0 3
45151: PUSH
45152: LD_VAR 0 4
45156: PUSH
45157: LD_VAR 0 5
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: LIST
45166: LIST
45167: ST_TO_ADDR
// exit ;
45168: GO 45592
// end ; _chassis := AvailableChassisList ( factory ) ;
45170: LD_ADDR_VAR 0 9
45174: PUSH
45175: LD_VAR 0 1
45179: PPUSH
45180: CALL_OW 475
45184: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
45185: LD_ADDR_VAR 0 11
45189: PUSH
45190: LD_VAR 0 1
45194: PPUSH
45195: CALL_OW 476
45199: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
45200: LD_ADDR_VAR 0 12
45204: PUSH
45205: LD_VAR 0 1
45209: PPUSH
45210: CALL_OW 477
45214: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
45215: LD_ADDR_VAR 0 10
45219: PUSH
45220: LD_VAR 0 1
45224: PPUSH
45225: CALL_OW 478
45229: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
45230: LD_VAR 0 9
45234: NOT
45235: IFTRUE 45244
45237: PUSH
45238: LD_VAR 0 11
45242: NOT
45243: OR
45244: IFTRUE 45253
45246: PUSH
45247: LD_VAR 0 12
45251: NOT
45252: OR
45253: IFTRUE 45262
45255: PUSH
45256: LD_VAR 0 10
45260: NOT
45261: OR
45262: IFFALSE 45297
// begin result := [ chassis , engine , control , weapon ] ;
45264: LD_ADDR_VAR 0 6
45268: PUSH
45269: LD_VAR 0 2
45273: PUSH
45274: LD_VAR 0 3
45278: PUSH
45279: LD_VAR 0 4
45283: PUSH
45284: LD_VAR 0 5
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: LIST
45293: LIST
45294: ST_TO_ADDR
// exit ;
45295: GO 45592
// end ; if not chassis in _chassis then
45297: LD_VAR 0 2
45301: PUSH
45302: LD_VAR 0 9
45306: IN
45307: NOT
45308: IFFALSE 45334
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
45310: LD_ADDR_VAR 0 2
45314: PUSH
45315: LD_VAR 0 9
45319: PUSH
45320: LD_INT 1
45322: PPUSH
45323: LD_VAR 0 9
45327: PPUSH
45328: CALL_OW 12
45332: ARRAY
45333: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
45334: LD_VAR 0 2
45338: PPUSH
45339: LD_VAR 0 3
45343: PPUSH
45344: CALL 45597 0 2
45348: NOT
45349: IFFALSE 45410
// repeat engine := _engine [ 1 ] ;
45351: LD_ADDR_VAR 0 3
45355: PUSH
45356: LD_VAR 0 11
45360: PUSH
45361: LD_INT 1
45363: ARRAY
45364: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
45365: LD_ADDR_VAR 0 11
45369: PUSH
45370: LD_VAR 0 11
45374: PPUSH
45375: LD_INT 1
45377: PPUSH
45378: CALL_OW 3
45382: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
45383: LD_VAR 0 2
45387: PPUSH
45388: LD_VAR 0 3
45392: PPUSH
45393: CALL 45597 0 2
45397: IFTRUE 45408
45399: PUSH
45400: LD_VAR 0 11
45404: PUSH
45405: EMPTY
45406: EQUAL
45407: OR
45408: IFFALSE 45351
// if not control in _control then
45410: LD_VAR 0 4
45414: PUSH
45415: LD_VAR 0 12
45419: IN
45420: NOT
45421: IFFALSE 45447
// control := _control [ rand ( 1 , _control ) ] ;
45423: LD_ADDR_VAR 0 4
45427: PUSH
45428: LD_VAR 0 12
45432: PUSH
45433: LD_INT 1
45435: PPUSH
45436: LD_VAR 0 12
45440: PPUSH
45441: CALL_OW 12
45445: ARRAY
45446: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
45447: LD_VAR 0 2
45451: PPUSH
45452: LD_VAR 0 5
45456: PPUSH
45457: CALL 45819 0 2
45461: NOT
45462: IFFALSE 45523
// repeat weapon := _weapon [ 1 ] ;
45464: LD_ADDR_VAR 0 5
45468: PUSH
45469: LD_VAR 0 10
45473: PUSH
45474: LD_INT 1
45476: ARRAY
45477: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
45478: LD_ADDR_VAR 0 10
45482: PUSH
45483: LD_VAR 0 10
45487: PPUSH
45488: LD_INT 1
45490: PPUSH
45491: CALL_OW 3
45495: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
45496: LD_VAR 0 2
45500: PPUSH
45501: LD_VAR 0 5
45505: PPUSH
45506: CALL 45819 0 2
45510: IFTRUE 45521
45512: PUSH
45513: LD_VAR 0 10
45517: PUSH
45518: EMPTY
45519: EQUAL
45520: OR
45521: IFFALSE 45464
// result := [ ] ;
45523: LD_ADDR_VAR 0 6
45527: PUSH
45528: EMPTY
45529: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
45530: LD_VAR 0 1
45534: PPUSH
45535: LD_VAR 0 2
45539: PPUSH
45540: LD_VAR 0 3
45544: PPUSH
45545: LD_VAR 0 4
45549: PPUSH
45550: LD_VAR 0 5
45554: PPUSH
45555: CALL_OW 448
45559: IFFALSE 45592
// result := [ chassis , engine , control , weapon ] ;
45561: LD_ADDR_VAR 0 6
45565: PUSH
45566: LD_VAR 0 2
45570: PUSH
45571: LD_VAR 0 3
45575: PUSH
45576: LD_VAR 0 4
45580: PUSH
45581: LD_VAR 0 5
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: LIST
45590: LIST
45591: ST_TO_ADDR
// end ;
45592: LD_VAR 0 6
45596: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
45597: LD_INT 0
45599: PPUSH
// if not chassis or not engine then
45600: LD_VAR 0 1
45604: NOT
45605: IFTRUE 45614
45607: PUSH
45608: LD_VAR 0 2
45612: NOT
45613: OR
45614: IFFALSE 45618
// exit ;
45616: GO 45814
// case engine of engine_solar :
45618: LD_VAR 0 2
45622: PUSH
45623: LD_INT 2
45625: DOUBLE
45626: EQUAL
45627: IFTRUE 45631
45629: GO 45669
45631: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
45632: LD_ADDR_VAR 0 3
45636: PUSH
45637: LD_INT 11
45639: PUSH
45640: LD_INT 12
45642: PUSH
45643: LD_INT 13
45645: PUSH
45646: LD_INT 14
45648: PUSH
45649: LD_INT 1
45651: PUSH
45652: LD_INT 2
45654: PUSH
45655: LD_INT 3
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: LIST
45662: LIST
45663: LIST
45664: LIST
45665: LIST
45666: ST_TO_ADDR
45667: GO 45798
45669: LD_INT 1
45671: DOUBLE
45672: EQUAL
45673: IFTRUE 45677
45675: GO 45739
45677: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
45678: LD_ADDR_VAR 0 3
45682: PUSH
45683: LD_INT 11
45685: PUSH
45686: LD_INT 12
45688: PUSH
45689: LD_INT 13
45691: PUSH
45692: LD_INT 14
45694: PUSH
45695: LD_INT 1
45697: PUSH
45698: LD_INT 2
45700: PUSH
45701: LD_INT 3
45703: PUSH
45704: LD_INT 4
45706: PUSH
45707: LD_INT 5
45709: PUSH
45710: LD_INT 21
45712: PUSH
45713: LD_INT 23
45715: PUSH
45716: LD_INT 22
45718: PUSH
45719: LD_INT 24
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: ST_TO_ADDR
45737: GO 45798
45739: LD_INT 3
45741: DOUBLE
45742: EQUAL
45743: IFTRUE 45747
45745: GO 45797
45747: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45748: LD_ADDR_VAR 0 3
45752: PUSH
45753: LD_INT 13
45755: PUSH
45756: LD_INT 14
45758: PUSH
45759: LD_INT 2
45761: PUSH
45762: LD_INT 3
45764: PUSH
45765: LD_INT 4
45767: PUSH
45768: LD_INT 5
45770: PUSH
45771: LD_INT 21
45773: PUSH
45774: LD_INT 22
45776: PUSH
45777: LD_INT 23
45779: PUSH
45780: LD_INT 24
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: ST_TO_ADDR
45795: GO 45798
45797: POP
// result := ( chassis in result ) ;
45798: LD_ADDR_VAR 0 3
45802: PUSH
45803: LD_VAR 0 1
45807: PUSH
45808: LD_VAR 0 3
45812: IN
45813: ST_TO_ADDR
// end ;
45814: LD_VAR 0 3
45818: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
45819: LD_INT 0
45821: PPUSH
// if not chassis or not weapon then
45822: LD_VAR 0 1
45826: NOT
45827: IFTRUE 45836
45829: PUSH
45830: LD_VAR 0 2
45834: NOT
45835: OR
45836: IFFALSE 45840
// exit ;
45838: GO 46934
// case weapon of us_machine_gun :
45840: LD_VAR 0 2
45844: PUSH
45845: LD_INT 2
45847: DOUBLE
45848: EQUAL
45849: IFTRUE 45853
45851: GO 45883
45853: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
45854: LD_ADDR_VAR 0 3
45858: PUSH
45859: LD_INT 1
45861: PUSH
45862: LD_INT 2
45864: PUSH
45865: LD_INT 3
45867: PUSH
45868: LD_INT 4
45870: PUSH
45871: LD_INT 5
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: LIST
45878: LIST
45879: LIST
45880: ST_TO_ADDR
45881: GO 46918
45883: LD_INT 3
45885: DOUBLE
45886: EQUAL
45887: IFTRUE 45891
45889: GO 45921
45891: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
45892: LD_ADDR_VAR 0 3
45896: PUSH
45897: LD_INT 1
45899: PUSH
45900: LD_INT 2
45902: PUSH
45903: LD_INT 3
45905: PUSH
45906: LD_INT 4
45908: PUSH
45909: LD_INT 5
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: ST_TO_ADDR
45919: GO 46918
45921: LD_INT 11
45923: DOUBLE
45924: EQUAL
45925: IFTRUE 45929
45927: GO 45959
45929: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
45930: LD_ADDR_VAR 0 3
45934: PUSH
45935: LD_INT 1
45937: PUSH
45938: LD_INT 2
45940: PUSH
45941: LD_INT 3
45943: PUSH
45944: LD_INT 4
45946: PUSH
45947: LD_INT 5
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: ST_TO_ADDR
45957: GO 46918
45959: LD_INT 4
45961: DOUBLE
45962: EQUAL
45963: IFTRUE 45967
45965: GO 45993
45967: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
45968: LD_ADDR_VAR 0 3
45972: PUSH
45973: LD_INT 2
45975: PUSH
45976: LD_INT 3
45978: PUSH
45979: LD_INT 4
45981: PUSH
45982: LD_INT 5
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: LIST
45989: LIST
45990: ST_TO_ADDR
45991: GO 46918
45993: LD_INT 5
45995: DOUBLE
45996: EQUAL
45997: IFTRUE 46001
45999: GO 46027
46001: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
46002: LD_ADDR_VAR 0 3
46006: PUSH
46007: LD_INT 2
46009: PUSH
46010: LD_INT 3
46012: PUSH
46013: LD_INT 4
46015: PUSH
46016: LD_INT 5
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: LIST
46023: LIST
46024: ST_TO_ADDR
46025: GO 46918
46027: LD_INT 9
46029: DOUBLE
46030: EQUAL
46031: IFTRUE 46035
46033: GO 46061
46035: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
46036: LD_ADDR_VAR 0 3
46040: PUSH
46041: LD_INT 2
46043: PUSH
46044: LD_INT 3
46046: PUSH
46047: LD_INT 4
46049: PUSH
46050: LD_INT 5
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: LIST
46057: LIST
46058: ST_TO_ADDR
46059: GO 46918
46061: LD_INT 7
46063: DOUBLE
46064: EQUAL
46065: IFTRUE 46069
46067: GO 46095
46069: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
46070: LD_ADDR_VAR 0 3
46074: PUSH
46075: LD_INT 2
46077: PUSH
46078: LD_INT 3
46080: PUSH
46081: LD_INT 4
46083: PUSH
46084: LD_INT 5
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: LIST
46091: LIST
46092: ST_TO_ADDR
46093: GO 46918
46095: LD_INT 12
46097: DOUBLE
46098: EQUAL
46099: IFTRUE 46103
46101: GO 46129
46103: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
46104: LD_ADDR_VAR 0 3
46108: PUSH
46109: LD_INT 2
46111: PUSH
46112: LD_INT 3
46114: PUSH
46115: LD_INT 4
46117: PUSH
46118: LD_INT 5
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: LIST
46125: LIST
46126: ST_TO_ADDR
46127: GO 46918
46129: LD_INT 13
46131: DOUBLE
46132: EQUAL
46133: IFTRUE 46137
46135: GO 46163
46137: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
46138: LD_ADDR_VAR 0 3
46142: PUSH
46143: LD_INT 2
46145: PUSH
46146: LD_INT 3
46148: PUSH
46149: LD_INT 4
46151: PUSH
46152: LD_INT 5
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: ST_TO_ADDR
46161: GO 46918
46163: LD_INT 14
46165: DOUBLE
46166: EQUAL
46167: IFTRUE 46171
46169: GO 46189
46171: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
46172: LD_ADDR_VAR 0 3
46176: PUSH
46177: LD_INT 4
46179: PUSH
46180: LD_INT 5
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: ST_TO_ADDR
46187: GO 46918
46189: LD_INT 6
46191: DOUBLE
46192: EQUAL
46193: IFTRUE 46197
46195: GO 46215
46197: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
46198: LD_ADDR_VAR 0 3
46202: PUSH
46203: LD_INT 4
46205: PUSH
46206: LD_INT 5
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: ST_TO_ADDR
46213: GO 46918
46215: LD_INT 10
46217: DOUBLE
46218: EQUAL
46219: IFTRUE 46223
46221: GO 46241
46223: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
46224: LD_ADDR_VAR 0 3
46228: PUSH
46229: LD_INT 4
46231: PUSH
46232: LD_INT 5
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: ST_TO_ADDR
46239: GO 46918
46241: LD_INT 22
46243: DOUBLE
46244: EQUAL
46245: IFTRUE 46249
46247: GO 46275
46249: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
46250: LD_ADDR_VAR 0 3
46254: PUSH
46255: LD_INT 11
46257: PUSH
46258: LD_INT 12
46260: PUSH
46261: LD_INT 13
46263: PUSH
46264: LD_INT 14
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: LIST
46271: LIST
46272: ST_TO_ADDR
46273: GO 46918
46275: LD_INT 23
46277: DOUBLE
46278: EQUAL
46279: IFTRUE 46283
46281: GO 46309
46283: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
46284: LD_ADDR_VAR 0 3
46288: PUSH
46289: LD_INT 11
46291: PUSH
46292: LD_INT 12
46294: PUSH
46295: LD_INT 13
46297: PUSH
46298: LD_INT 14
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: LIST
46305: LIST
46306: ST_TO_ADDR
46307: GO 46918
46309: LD_INT 24
46311: DOUBLE
46312: EQUAL
46313: IFTRUE 46317
46315: GO 46343
46317: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
46318: LD_ADDR_VAR 0 3
46322: PUSH
46323: LD_INT 11
46325: PUSH
46326: LD_INT 12
46328: PUSH
46329: LD_INT 13
46331: PUSH
46332: LD_INT 14
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: ST_TO_ADDR
46341: GO 46918
46343: LD_INT 30
46345: DOUBLE
46346: EQUAL
46347: IFTRUE 46351
46349: GO 46377
46351: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
46352: LD_ADDR_VAR 0 3
46356: PUSH
46357: LD_INT 11
46359: PUSH
46360: LD_INT 12
46362: PUSH
46363: LD_INT 13
46365: PUSH
46366: LD_INT 14
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: ST_TO_ADDR
46375: GO 46918
46377: LD_INT 25
46379: DOUBLE
46380: EQUAL
46381: IFTRUE 46385
46383: GO 46403
46385: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
46386: LD_ADDR_VAR 0 3
46390: PUSH
46391: LD_INT 13
46393: PUSH
46394: LD_INT 14
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: ST_TO_ADDR
46401: GO 46918
46403: LD_INT 27
46405: DOUBLE
46406: EQUAL
46407: IFTRUE 46411
46409: GO 46429
46411: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
46412: LD_ADDR_VAR 0 3
46416: PUSH
46417: LD_INT 13
46419: PUSH
46420: LD_INT 14
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: ST_TO_ADDR
46427: GO 46918
46429: LD_INT 92
46431: DOUBLE
46432: EQUAL
46433: IFTRUE 46437
46435: GO 46463
46437: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
46438: LD_ADDR_VAR 0 3
46442: PUSH
46443: LD_INT 11
46445: PUSH
46446: LD_INT 12
46448: PUSH
46449: LD_INT 13
46451: PUSH
46452: LD_INT 14
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: ST_TO_ADDR
46461: GO 46918
46463: LD_INT 28
46465: DOUBLE
46466: EQUAL
46467: IFTRUE 46471
46469: GO 46489
46471: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
46472: LD_ADDR_VAR 0 3
46476: PUSH
46477: LD_INT 13
46479: PUSH
46480: LD_INT 14
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: ST_TO_ADDR
46487: GO 46918
46489: LD_INT 29
46491: DOUBLE
46492: EQUAL
46493: IFTRUE 46497
46495: GO 46515
46497: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
46498: LD_ADDR_VAR 0 3
46502: PUSH
46503: LD_INT 13
46505: PUSH
46506: LD_INT 14
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: ST_TO_ADDR
46513: GO 46918
46515: LD_INT 31
46517: DOUBLE
46518: EQUAL
46519: IFTRUE 46523
46521: GO 46541
46523: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
46524: LD_ADDR_VAR 0 3
46528: PUSH
46529: LD_INT 13
46531: PUSH
46532: LD_INT 14
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: ST_TO_ADDR
46539: GO 46918
46541: LD_INT 26
46543: DOUBLE
46544: EQUAL
46545: IFTRUE 46549
46547: GO 46567
46549: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
46550: LD_ADDR_VAR 0 3
46554: PUSH
46555: LD_INT 13
46557: PUSH
46558: LD_INT 14
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: ST_TO_ADDR
46565: GO 46918
46567: LD_INT 42
46569: DOUBLE
46570: EQUAL
46571: IFTRUE 46575
46573: GO 46601
46575: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
46576: LD_ADDR_VAR 0 3
46580: PUSH
46581: LD_INT 21
46583: PUSH
46584: LD_INT 22
46586: PUSH
46587: LD_INT 23
46589: PUSH
46590: LD_INT 24
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: LIST
46597: LIST
46598: ST_TO_ADDR
46599: GO 46918
46601: LD_INT 43
46603: DOUBLE
46604: EQUAL
46605: IFTRUE 46609
46607: GO 46635
46609: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
46610: LD_ADDR_VAR 0 3
46614: PUSH
46615: LD_INT 21
46617: PUSH
46618: LD_INT 22
46620: PUSH
46621: LD_INT 23
46623: PUSH
46624: LD_INT 24
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: LIST
46631: LIST
46632: ST_TO_ADDR
46633: GO 46918
46635: LD_INT 44
46637: DOUBLE
46638: EQUAL
46639: IFTRUE 46643
46641: GO 46669
46643: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
46644: LD_ADDR_VAR 0 3
46648: PUSH
46649: LD_INT 21
46651: PUSH
46652: LD_INT 22
46654: PUSH
46655: LD_INT 23
46657: PUSH
46658: LD_INT 24
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: LIST
46665: LIST
46666: ST_TO_ADDR
46667: GO 46918
46669: LD_INT 45
46671: DOUBLE
46672: EQUAL
46673: IFTRUE 46677
46675: GO 46703
46677: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
46678: LD_ADDR_VAR 0 3
46682: PUSH
46683: LD_INT 21
46685: PUSH
46686: LD_INT 22
46688: PUSH
46689: LD_INT 23
46691: PUSH
46692: LD_INT 24
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: LIST
46699: LIST
46700: ST_TO_ADDR
46701: GO 46918
46703: LD_INT 49
46705: DOUBLE
46706: EQUAL
46707: IFTRUE 46711
46709: GO 46737
46711: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
46712: LD_ADDR_VAR 0 3
46716: PUSH
46717: LD_INT 21
46719: PUSH
46720: LD_INT 22
46722: PUSH
46723: LD_INT 23
46725: PUSH
46726: LD_INT 24
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: ST_TO_ADDR
46735: GO 46918
46737: LD_INT 51
46739: DOUBLE
46740: EQUAL
46741: IFTRUE 46745
46743: GO 46771
46745: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
46746: LD_ADDR_VAR 0 3
46750: PUSH
46751: LD_INT 21
46753: PUSH
46754: LD_INT 22
46756: PUSH
46757: LD_INT 23
46759: PUSH
46760: LD_INT 24
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: ST_TO_ADDR
46769: GO 46918
46771: LD_INT 52
46773: DOUBLE
46774: EQUAL
46775: IFTRUE 46779
46777: GO 46805
46779: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
46780: LD_ADDR_VAR 0 3
46784: PUSH
46785: LD_INT 21
46787: PUSH
46788: LD_INT 22
46790: PUSH
46791: LD_INT 23
46793: PUSH
46794: LD_INT 24
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: LIST
46801: LIST
46802: ST_TO_ADDR
46803: GO 46918
46805: LD_INT 53
46807: DOUBLE
46808: EQUAL
46809: IFTRUE 46813
46811: GO 46831
46813: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
46814: LD_ADDR_VAR 0 3
46818: PUSH
46819: LD_INT 23
46821: PUSH
46822: LD_INT 24
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: ST_TO_ADDR
46829: GO 46918
46831: LD_INT 46
46833: DOUBLE
46834: EQUAL
46835: IFTRUE 46839
46837: GO 46857
46839: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
46840: LD_ADDR_VAR 0 3
46844: PUSH
46845: LD_INT 23
46847: PUSH
46848: LD_INT 24
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: ST_TO_ADDR
46855: GO 46918
46857: LD_INT 47
46859: DOUBLE
46860: EQUAL
46861: IFTRUE 46865
46863: GO 46883
46865: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
46866: LD_ADDR_VAR 0 3
46870: PUSH
46871: LD_INT 23
46873: PUSH
46874: LD_INT 24
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: ST_TO_ADDR
46881: GO 46918
46883: LD_INT 98
46885: DOUBLE
46886: EQUAL
46887: IFTRUE 46891
46889: GO 46917
46891: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
46892: LD_ADDR_VAR 0 3
46896: PUSH
46897: LD_INT 21
46899: PUSH
46900: LD_INT 22
46902: PUSH
46903: LD_INT 23
46905: PUSH
46906: LD_INT 24
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: ST_TO_ADDR
46915: GO 46918
46917: POP
// result := ( chassis in result ) ;
46918: LD_ADDR_VAR 0 3
46922: PUSH
46923: LD_VAR 0 1
46927: PUSH
46928: LD_VAR 0 3
46932: IN
46933: ST_TO_ADDR
// end ;
46934: LD_VAR 0 3
46938: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
46939: LD_INT 0
46941: PPUSH
46942: PPUSH
46943: PPUSH
46944: PPUSH
46945: PPUSH
46946: PPUSH
46947: PPUSH
// result := array ;
46948: LD_ADDR_VAR 0 5
46952: PUSH
46953: LD_VAR 0 1
46957: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
46958: LD_VAR 0 1
46962: NOT
46963: IFTRUE 46972
46965: PUSH
46966: LD_VAR 0 2
46970: NOT
46971: OR
46972: IFTRUE 46981
46974: PUSH
46975: LD_VAR 0 3
46979: NOT
46980: OR
46981: IFTRUE 46995
46983: PUSH
46984: LD_VAR 0 2
46988: PUSH
46989: LD_VAR 0 1
46993: GREATER
46994: OR
46995: IFTRUE 47009
46997: PUSH
46998: LD_VAR 0 3
47002: PUSH
47003: LD_VAR 0 1
47007: GREATER
47008: OR
47009: IFFALSE 47013
// exit ;
47011: GO 47309
// if direction then
47013: LD_VAR 0 4
47017: IFFALSE 47081
// begin d := 1 ;
47019: LD_ADDR_VAR 0 9
47023: PUSH
47024: LD_INT 1
47026: ST_TO_ADDR
// if i_from > i_to then
47027: LD_VAR 0 2
47031: PUSH
47032: LD_VAR 0 3
47036: GREATER
47037: IFFALSE 47063
// length := ( array - i_from ) + i_to else
47039: LD_ADDR_VAR 0 11
47043: PUSH
47044: LD_VAR 0 1
47048: PUSH
47049: LD_VAR 0 2
47053: MINUS
47054: PUSH
47055: LD_VAR 0 3
47059: PLUS
47060: ST_TO_ADDR
47061: GO 47079
// length := i_to - i_from ;
47063: LD_ADDR_VAR 0 11
47067: PUSH
47068: LD_VAR 0 3
47072: PUSH
47073: LD_VAR 0 2
47077: MINUS
47078: ST_TO_ADDR
// end else
47079: GO 47142
// begin d := - 1 ;
47081: LD_ADDR_VAR 0 9
47085: PUSH
47086: LD_INT 1
47088: NEG
47089: ST_TO_ADDR
// if i_from > i_to then
47090: LD_VAR 0 2
47094: PUSH
47095: LD_VAR 0 3
47099: GREATER
47100: IFFALSE 47120
// length := i_from - i_to else
47102: LD_ADDR_VAR 0 11
47106: PUSH
47107: LD_VAR 0 2
47111: PUSH
47112: LD_VAR 0 3
47116: MINUS
47117: ST_TO_ADDR
47118: GO 47142
// length := ( array - i_to ) + i_from ;
47120: LD_ADDR_VAR 0 11
47124: PUSH
47125: LD_VAR 0 1
47129: PUSH
47130: LD_VAR 0 3
47134: MINUS
47135: PUSH
47136: LD_VAR 0 2
47140: PLUS
47141: ST_TO_ADDR
// end ; if not length then
47142: LD_VAR 0 11
47146: NOT
47147: IFFALSE 47151
// exit ;
47149: GO 47309
// tmp := array ;
47151: LD_ADDR_VAR 0 10
47155: PUSH
47156: LD_VAR 0 1
47160: ST_TO_ADDR
// for i = 1 to length do
47161: LD_ADDR_VAR 0 6
47165: PUSH
47166: DOUBLE
47167: LD_INT 1
47169: DEC
47170: ST_TO_ADDR
47171: LD_VAR 0 11
47175: PUSH
47176: FOR_TO
47177: IFFALSE 47297
// begin for j = 1 to array do
47179: LD_ADDR_VAR 0 7
47183: PUSH
47184: DOUBLE
47185: LD_INT 1
47187: DEC
47188: ST_TO_ADDR
47189: LD_VAR 0 1
47193: PUSH
47194: FOR_TO
47195: IFFALSE 47283
// begin k := j + d ;
47197: LD_ADDR_VAR 0 8
47201: PUSH
47202: LD_VAR 0 7
47206: PUSH
47207: LD_VAR 0 9
47211: PLUS
47212: ST_TO_ADDR
// if k > array then
47213: LD_VAR 0 8
47217: PUSH
47218: LD_VAR 0 1
47222: GREATER
47223: IFFALSE 47233
// k := 1 ;
47225: LD_ADDR_VAR 0 8
47229: PUSH
47230: LD_INT 1
47232: ST_TO_ADDR
// if not k then
47233: LD_VAR 0 8
47237: NOT
47238: IFFALSE 47250
// k := array ;
47240: LD_ADDR_VAR 0 8
47244: PUSH
47245: LD_VAR 0 1
47249: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
47250: LD_ADDR_VAR 0 10
47254: PUSH
47255: LD_VAR 0 10
47259: PPUSH
47260: LD_VAR 0 8
47264: PPUSH
47265: LD_VAR 0 1
47269: PUSH
47270: LD_VAR 0 7
47274: ARRAY
47275: PPUSH
47276: CALL_OW 1
47280: ST_TO_ADDR
// end ;
47281: GO 47194
47283: POP
47284: POP
// array := tmp ;
47285: LD_ADDR_VAR 0 1
47289: PUSH
47290: LD_VAR 0 10
47294: ST_TO_ADDR
// end ;
47295: GO 47176
47297: POP
47298: POP
// result := array ;
47299: LD_ADDR_VAR 0 5
47303: PUSH
47304: LD_VAR 0 1
47308: ST_TO_ADDR
// end ;
47309: LD_VAR 0 5
47313: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
47314: LD_INT 0
47316: PPUSH
47317: PPUSH
// result := 0 ;
47318: LD_ADDR_VAR 0 3
47322: PUSH
47323: LD_INT 0
47325: ST_TO_ADDR
// if not array or not value in array then
47326: LD_VAR 0 1
47330: NOT
47331: IFTRUE 47346
47333: PUSH
47334: LD_VAR 0 2
47338: PUSH
47339: LD_VAR 0 1
47343: IN
47344: NOT
47345: OR
47346: IFFALSE 47350
// exit ;
47348: GO 47404
// for i = 1 to array do
47350: LD_ADDR_VAR 0 4
47354: PUSH
47355: DOUBLE
47356: LD_INT 1
47358: DEC
47359: ST_TO_ADDR
47360: LD_VAR 0 1
47364: PUSH
47365: FOR_TO
47366: IFFALSE 47402
// if value = array [ i ] then
47368: LD_VAR 0 2
47372: PUSH
47373: LD_VAR 0 1
47377: PUSH
47378: LD_VAR 0 4
47382: ARRAY
47383: EQUAL
47384: IFFALSE 47400
// begin result := i ;
47386: LD_ADDR_VAR 0 3
47390: PUSH
47391: LD_VAR 0 4
47395: ST_TO_ADDR
// exit ;
47396: POP
47397: POP
47398: GO 47404
// end ;
47400: GO 47365
47402: POP
47403: POP
// end ;
47404: LD_VAR 0 3
47408: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
47409: LD_INT 0
47411: PPUSH
// vc_chassis := chassis ;
47412: LD_ADDR_OWVAR 37
47416: PUSH
47417: LD_VAR 0 1
47421: ST_TO_ADDR
// vc_engine := engine ;
47422: LD_ADDR_OWVAR 39
47426: PUSH
47427: LD_VAR 0 2
47431: ST_TO_ADDR
// vc_control := control ;
47432: LD_ADDR_OWVAR 38
47436: PUSH
47437: LD_VAR 0 3
47441: ST_TO_ADDR
// vc_weapon := weapon ;
47442: LD_ADDR_OWVAR 40
47446: PUSH
47447: LD_VAR 0 4
47451: ST_TO_ADDR
// vc_fuel_battery := fuel ;
47452: LD_ADDR_OWVAR 41
47456: PUSH
47457: LD_VAR 0 5
47461: ST_TO_ADDR
// end ;
47462: LD_VAR 0 6
47466: RET
// export function WantPlant ( unit ) ; var task ; begin
47467: LD_INT 0
47469: PPUSH
47470: PPUSH
// result := false ;
47471: LD_ADDR_VAR 0 2
47475: PUSH
47476: LD_INT 0
47478: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
47479: LD_ADDR_VAR 0 3
47483: PUSH
47484: LD_VAR 0 1
47488: PPUSH
47489: CALL_OW 437
47493: ST_TO_ADDR
// if task then
47494: LD_VAR 0 3
47498: IFFALSE 47526
// if task [ 1 ] [ 1 ] = p then
47500: LD_VAR 0 3
47504: PUSH
47505: LD_INT 1
47507: ARRAY
47508: PUSH
47509: LD_INT 1
47511: ARRAY
47512: PUSH
47513: LD_STRING p
47515: EQUAL
47516: IFFALSE 47526
// result := true ;
47518: LD_ADDR_VAR 0 2
47522: PUSH
47523: LD_INT 1
47525: ST_TO_ADDR
// end ;
47526: LD_VAR 0 2
47530: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
47531: LD_INT 0
47533: PPUSH
47534: PPUSH
47535: PPUSH
47536: PPUSH
// if pos < 1 then
47537: LD_VAR 0 2
47541: PUSH
47542: LD_INT 1
47544: LESS
47545: IFFALSE 47549
// exit ;
47547: GO 47852
// if pos = 1 then
47549: LD_VAR 0 2
47553: PUSH
47554: LD_INT 1
47556: EQUAL
47557: IFFALSE 47590
// result := Replace ( arr , pos [ 1 ] , value ) else
47559: LD_ADDR_VAR 0 4
47563: PUSH
47564: LD_VAR 0 1
47568: PPUSH
47569: LD_VAR 0 2
47573: PUSH
47574: LD_INT 1
47576: ARRAY
47577: PPUSH
47578: LD_VAR 0 3
47582: PPUSH
47583: CALL_OW 1
47587: ST_TO_ADDR
47588: GO 47852
// begin tmp := arr ;
47590: LD_ADDR_VAR 0 6
47594: PUSH
47595: LD_VAR 0 1
47599: ST_TO_ADDR
// s_arr := [ tmp ] ;
47600: LD_ADDR_VAR 0 7
47604: PUSH
47605: LD_VAR 0 6
47609: PUSH
47610: EMPTY
47611: LIST
47612: ST_TO_ADDR
// for i = 1 to pos - 1 do
47613: LD_ADDR_VAR 0 5
47617: PUSH
47618: DOUBLE
47619: LD_INT 1
47621: DEC
47622: ST_TO_ADDR
47623: LD_VAR 0 2
47627: PUSH
47628: LD_INT 1
47630: MINUS
47631: PUSH
47632: FOR_TO
47633: IFFALSE 47678
// begin tmp := tmp [ pos [ i ] ] ;
47635: LD_ADDR_VAR 0 6
47639: PUSH
47640: LD_VAR 0 6
47644: PUSH
47645: LD_VAR 0 2
47649: PUSH
47650: LD_VAR 0 5
47654: ARRAY
47655: ARRAY
47656: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
47657: LD_ADDR_VAR 0 7
47661: PUSH
47662: LD_VAR 0 7
47666: PUSH
47667: LD_VAR 0 6
47671: PUSH
47672: EMPTY
47673: LIST
47674: ADD
47675: ST_TO_ADDR
// end ;
47676: GO 47632
47678: POP
47679: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
47680: LD_ADDR_VAR 0 6
47684: PUSH
47685: LD_VAR 0 6
47689: PPUSH
47690: LD_VAR 0 2
47694: PUSH
47695: LD_VAR 0 2
47699: ARRAY
47700: PPUSH
47701: LD_VAR 0 3
47705: PPUSH
47706: CALL_OW 1
47710: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
47711: LD_ADDR_VAR 0 7
47715: PUSH
47716: LD_VAR 0 7
47720: PPUSH
47721: LD_VAR 0 7
47725: PPUSH
47726: LD_VAR 0 6
47730: PPUSH
47731: CALL_OW 1
47735: ST_TO_ADDR
// for i = s_arr downto 2 do
47736: LD_ADDR_VAR 0 5
47740: PUSH
47741: DOUBLE
47742: LD_VAR 0 7
47746: INC
47747: ST_TO_ADDR
47748: LD_INT 2
47750: PUSH
47751: FOR_DOWNTO
47752: IFFALSE 47836
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
47754: LD_ADDR_VAR 0 6
47758: PUSH
47759: LD_VAR 0 7
47763: PUSH
47764: LD_VAR 0 5
47768: PUSH
47769: LD_INT 1
47771: MINUS
47772: ARRAY
47773: PPUSH
47774: LD_VAR 0 2
47778: PUSH
47779: LD_VAR 0 5
47783: PUSH
47784: LD_INT 1
47786: MINUS
47787: ARRAY
47788: PPUSH
47789: LD_VAR 0 7
47793: PUSH
47794: LD_VAR 0 5
47798: ARRAY
47799: PPUSH
47800: CALL_OW 1
47804: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
47805: LD_ADDR_VAR 0 7
47809: PUSH
47810: LD_VAR 0 7
47814: PPUSH
47815: LD_VAR 0 5
47819: PUSH
47820: LD_INT 1
47822: MINUS
47823: PPUSH
47824: LD_VAR 0 6
47828: PPUSH
47829: CALL_OW 1
47833: ST_TO_ADDR
// end ;
47834: GO 47751
47836: POP
47837: POP
// result := s_arr [ 1 ] ;
47838: LD_ADDR_VAR 0 4
47842: PUSH
47843: LD_VAR 0 7
47847: PUSH
47848: LD_INT 1
47850: ARRAY
47851: ST_TO_ADDR
// end ; end ;
47852: LD_VAR 0 4
47856: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
47857: LD_INT 0
47859: PPUSH
47860: PPUSH
// if not list then
47861: LD_VAR 0 1
47865: NOT
47866: IFFALSE 47870
// exit ;
47868: GO 47961
// i := list [ pos1 ] ;
47870: LD_ADDR_VAR 0 5
47874: PUSH
47875: LD_VAR 0 1
47879: PUSH
47880: LD_VAR 0 2
47884: ARRAY
47885: ST_TO_ADDR
// if not i then
47886: LD_VAR 0 5
47890: NOT
47891: IFFALSE 47895
// exit ;
47893: GO 47961
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
47895: LD_ADDR_VAR 0 1
47899: PUSH
47900: LD_VAR 0 1
47904: PPUSH
47905: LD_VAR 0 2
47909: PPUSH
47910: LD_VAR 0 1
47914: PUSH
47915: LD_VAR 0 3
47919: ARRAY
47920: PPUSH
47921: CALL_OW 1
47925: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
47926: LD_ADDR_VAR 0 1
47930: PUSH
47931: LD_VAR 0 1
47935: PPUSH
47936: LD_VAR 0 3
47940: PPUSH
47941: LD_VAR 0 5
47945: PPUSH
47946: CALL_OW 1
47950: ST_TO_ADDR
// result := list ;
47951: LD_ADDR_VAR 0 4
47955: PUSH
47956: LD_VAR 0 1
47960: ST_TO_ADDR
// end ;
47961: LD_VAR 0 4
47965: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
47966: LD_INT 0
47968: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
47969: LD_ADDR_VAR 0 5
47973: PUSH
47974: LD_VAR 0 1
47978: PPUSH
47979: CALL_OW 250
47983: PPUSH
47984: LD_VAR 0 1
47988: PPUSH
47989: CALL_OW 251
47993: PPUSH
47994: LD_VAR 0 2
47998: PPUSH
47999: LD_VAR 0 3
48003: PPUSH
48004: LD_VAR 0 4
48008: PPUSH
48009: CALL 48391 0 5
48013: ST_TO_ADDR
// end ;
48014: LD_VAR 0 5
48018: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
48019: LD_INT 0
48021: PPUSH
48022: PPUSH
48023: PPUSH
48024: PPUSH
// if not list or not unit then
48025: LD_VAR 0 2
48029: NOT
48030: IFTRUE 48039
48032: PUSH
48033: LD_VAR 0 1
48037: NOT
48038: OR
48039: IFFALSE 48043
// exit ;
48041: GO 48386
// result := [ ] ;
48043: LD_ADDR_VAR 0 5
48047: PUSH
48048: EMPTY
48049: ST_TO_ADDR
// for i in list do
48050: LD_ADDR_VAR 0 6
48054: PUSH
48055: LD_VAR 0 2
48059: PUSH
48060: FOR_IN
48061: IFFALSE 48279
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
48063: LD_ADDR_VAR 0 8
48067: PUSH
48068: LD_VAR 0 1
48072: PPUSH
48073: LD_VAR 0 6
48077: PUSH
48078: LD_INT 1
48080: ARRAY
48081: PPUSH
48082: LD_VAR 0 6
48086: PUSH
48087: LD_INT 2
48089: ARRAY
48090: PPUSH
48091: CALL_OW 297
48095: ST_TO_ADDR
// if not Count ( result ) then
48096: LD_VAR 0 5
48100: PPUSH
48101: CALL 44613 0 1
48105: NOT
48106: IFFALSE 48139
// begin result := Join ( result , [ i , tmp ] ) ;
48108: LD_ADDR_VAR 0 5
48112: PUSH
48113: LD_VAR 0 5
48117: PPUSH
48118: LD_VAR 0 6
48122: PUSH
48123: LD_VAR 0 8
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PPUSH
48132: CALL 80589 0 2
48136: ST_TO_ADDR
// continue ;
48137: GO 48060
// end ; if result [ result ] [ 2 ] <= tmp then
48139: LD_VAR 0 5
48143: PUSH
48144: LD_VAR 0 5
48148: ARRAY
48149: PUSH
48150: LD_INT 2
48152: ARRAY
48153: PUSH
48154: LD_VAR 0 8
48158: LESSEQUAL
48159: IFFALSE 48192
// result := Join ( result , [ i , tmp ] ) else
48161: LD_ADDR_VAR 0 5
48165: PUSH
48166: LD_VAR 0 5
48170: PPUSH
48171: LD_VAR 0 6
48175: PUSH
48176: LD_VAR 0 8
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: PPUSH
48185: CALL 80589 0 2
48189: ST_TO_ADDR
48190: GO 48277
// begin for j := 1 to Count ( result ) do
48192: LD_ADDR_VAR 0 7
48196: PUSH
48197: DOUBLE
48198: LD_INT 1
48200: DEC
48201: ST_TO_ADDR
48202: LD_VAR 0 5
48206: PPUSH
48207: CALL 44613 0 1
48211: PUSH
48212: FOR_TO
48213: IFFALSE 48275
// begin if tmp < result [ j ] [ 2 ] then
48215: LD_VAR 0 8
48219: PUSH
48220: LD_VAR 0 5
48224: PUSH
48225: LD_VAR 0 7
48229: ARRAY
48230: PUSH
48231: LD_INT 2
48233: ARRAY
48234: LESS
48235: IFFALSE 48273
// begin result := Insert ( result , j , [ i , tmp ] ) ;
48237: LD_ADDR_VAR 0 5
48241: PUSH
48242: LD_VAR 0 5
48246: PPUSH
48247: LD_VAR 0 7
48251: PPUSH
48252: LD_VAR 0 6
48256: PUSH
48257: LD_VAR 0 8
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PPUSH
48266: CALL_OW 2
48270: ST_TO_ADDR
// break ;
48271: GO 48275
// end ; end ;
48273: GO 48212
48275: POP
48276: POP
// end ; end ;
48277: GO 48060
48279: POP
48280: POP
// if result and not asc then
48281: LD_VAR 0 5
48285: IFFALSE 48294
48287: PUSH
48288: LD_VAR 0 3
48292: NOT
48293: AND
48294: IFFALSE 48311
// result := ReverseArray ( result ) ;
48296: LD_ADDR_VAR 0 5
48300: PUSH
48301: LD_VAR 0 5
48305: PPUSH
48306: CALL 75669 0 1
48310: ST_TO_ADDR
// tmp := [ ] ;
48311: LD_ADDR_VAR 0 8
48315: PUSH
48316: EMPTY
48317: ST_TO_ADDR
// if mode then
48318: LD_VAR 0 4
48322: IFFALSE 48386
// begin for i := 1 to result do
48324: LD_ADDR_VAR 0 6
48328: PUSH
48329: DOUBLE
48330: LD_INT 1
48332: DEC
48333: ST_TO_ADDR
48334: LD_VAR 0 5
48338: PUSH
48339: FOR_TO
48340: IFFALSE 48374
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
48342: LD_ADDR_VAR 0 8
48346: PUSH
48347: LD_VAR 0 8
48351: PPUSH
48352: LD_VAR 0 5
48356: PUSH
48357: LD_VAR 0 6
48361: ARRAY
48362: PUSH
48363: LD_INT 1
48365: ARRAY
48366: PPUSH
48367: CALL 80589 0 2
48371: ST_TO_ADDR
48372: GO 48339
48374: POP
48375: POP
// result := tmp ;
48376: LD_ADDR_VAR 0 5
48380: PUSH
48381: LD_VAR 0 8
48385: ST_TO_ADDR
// end ; end ;
48386: LD_VAR 0 5
48390: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
48391: LD_INT 0
48393: PPUSH
48394: PPUSH
48395: PPUSH
48396: PPUSH
// if not list then
48397: LD_VAR 0 3
48401: NOT
48402: IFFALSE 48406
// exit ;
48404: GO 48796
// result := [ ] ;
48406: LD_ADDR_VAR 0 6
48410: PUSH
48411: EMPTY
48412: ST_TO_ADDR
// for i in list do
48413: LD_ADDR_VAR 0 7
48417: PUSH
48418: LD_VAR 0 3
48422: PUSH
48423: FOR_IN
48424: IFFALSE 48626
// begin tmp := GetDistUnitXY ( i , x , y ) ;
48426: LD_ADDR_VAR 0 9
48430: PUSH
48431: LD_VAR 0 7
48435: PPUSH
48436: LD_VAR 0 1
48440: PPUSH
48441: LD_VAR 0 2
48445: PPUSH
48446: CALL_OW 297
48450: ST_TO_ADDR
// if not result then
48451: LD_VAR 0 6
48455: NOT
48456: IFFALSE 48482
// result := [ [ i , tmp ] ] else
48458: LD_ADDR_VAR 0 6
48462: PUSH
48463: LD_VAR 0 7
48467: PUSH
48468: LD_VAR 0 9
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: EMPTY
48478: LIST
48479: ST_TO_ADDR
48480: GO 48624
// begin if result [ result ] [ 2 ] <= tmp then
48482: LD_VAR 0 6
48486: PUSH
48487: LD_VAR 0 6
48491: ARRAY
48492: PUSH
48493: LD_INT 2
48495: ARRAY
48496: PUSH
48497: LD_VAR 0 9
48501: LESSEQUAL
48502: IFFALSE 48544
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
48504: LD_ADDR_VAR 0 6
48508: PUSH
48509: LD_VAR 0 6
48513: PPUSH
48514: LD_VAR 0 6
48518: PUSH
48519: LD_INT 1
48521: PLUS
48522: PPUSH
48523: LD_VAR 0 7
48527: PUSH
48528: LD_VAR 0 9
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: PPUSH
48537: CALL_OW 2
48541: ST_TO_ADDR
48542: GO 48624
// for j := 1 to result do
48544: LD_ADDR_VAR 0 8
48548: PUSH
48549: DOUBLE
48550: LD_INT 1
48552: DEC
48553: ST_TO_ADDR
48554: LD_VAR 0 6
48558: PUSH
48559: FOR_TO
48560: IFFALSE 48622
// begin if tmp < result [ j ] [ 2 ] then
48562: LD_VAR 0 9
48566: PUSH
48567: LD_VAR 0 6
48571: PUSH
48572: LD_VAR 0 8
48576: ARRAY
48577: PUSH
48578: LD_INT 2
48580: ARRAY
48581: LESS
48582: IFFALSE 48620
// begin result := Insert ( result , j , [ i , tmp ] ) ;
48584: LD_ADDR_VAR 0 6
48588: PUSH
48589: LD_VAR 0 6
48593: PPUSH
48594: LD_VAR 0 8
48598: PPUSH
48599: LD_VAR 0 7
48603: PUSH
48604: LD_VAR 0 9
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PPUSH
48613: CALL_OW 2
48617: ST_TO_ADDR
// break ;
48618: GO 48622
// end ; end ;
48620: GO 48559
48622: POP
48623: POP
// end ; end ;
48624: GO 48423
48626: POP
48627: POP
// if result and not asc then
48628: LD_VAR 0 6
48632: IFFALSE 48641
48634: PUSH
48635: LD_VAR 0 4
48639: NOT
48640: AND
48641: IFFALSE 48716
// begin tmp := result ;
48643: LD_ADDR_VAR 0 9
48647: PUSH
48648: LD_VAR 0 6
48652: ST_TO_ADDR
// for i = tmp downto 1 do
48653: LD_ADDR_VAR 0 7
48657: PUSH
48658: DOUBLE
48659: LD_VAR 0 9
48663: INC
48664: ST_TO_ADDR
48665: LD_INT 1
48667: PUSH
48668: FOR_DOWNTO
48669: IFFALSE 48714
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
48671: LD_ADDR_VAR 0 6
48675: PUSH
48676: LD_VAR 0 6
48680: PPUSH
48681: LD_VAR 0 9
48685: PUSH
48686: LD_VAR 0 7
48690: MINUS
48691: PUSH
48692: LD_INT 1
48694: PLUS
48695: PPUSH
48696: LD_VAR 0 9
48700: PUSH
48701: LD_VAR 0 7
48705: ARRAY
48706: PPUSH
48707: CALL_OW 1
48711: ST_TO_ADDR
48712: GO 48668
48714: POP
48715: POP
// end ; tmp := [ ] ;
48716: LD_ADDR_VAR 0 9
48720: PUSH
48721: EMPTY
48722: ST_TO_ADDR
// if mode then
48723: LD_VAR 0 5
48727: IFFALSE 48796
// begin for i = 1 to result do
48729: LD_ADDR_VAR 0 7
48733: PUSH
48734: DOUBLE
48735: LD_INT 1
48737: DEC
48738: ST_TO_ADDR
48739: LD_VAR 0 6
48743: PUSH
48744: FOR_TO
48745: IFFALSE 48784
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
48747: LD_ADDR_VAR 0 9
48751: PUSH
48752: LD_VAR 0 9
48756: PPUSH
48757: LD_VAR 0 7
48761: PPUSH
48762: LD_VAR 0 6
48766: PUSH
48767: LD_VAR 0 7
48771: ARRAY
48772: PUSH
48773: LD_INT 1
48775: ARRAY
48776: PPUSH
48777: CALL_OW 1
48781: ST_TO_ADDR
48782: GO 48744
48784: POP
48785: POP
// result := tmp ;
48786: LD_ADDR_VAR 0 6
48790: PUSH
48791: LD_VAR 0 9
48795: ST_TO_ADDR
// end ; end ;
48796: LD_VAR 0 6
48800: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
48801: LD_INT 0
48803: PPUSH
48804: PPUSH
48805: PPUSH
48806: PPUSH
48807: PPUSH
48808: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
48809: LD_ADDR_VAR 0 5
48813: PUSH
48814: LD_INT 0
48816: PUSH
48817: LD_INT 0
48819: PUSH
48820: LD_INT 0
48822: PUSH
48823: EMPTY
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: ST_TO_ADDR
// if not x or not y then
48831: LD_VAR 0 2
48835: NOT
48836: IFTRUE 48845
48838: PUSH
48839: LD_VAR 0 3
48843: NOT
48844: OR
48845: IFFALSE 48849
// exit ;
48847: GO 50505
// if not range then
48849: LD_VAR 0 4
48853: NOT
48854: IFFALSE 48864
// range := 10 ;
48856: LD_ADDR_VAR 0 4
48860: PUSH
48861: LD_INT 10
48863: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
48864: LD_ADDR_VAR 0 8
48868: PUSH
48869: LD_INT 81
48871: PUSH
48872: LD_VAR 0 1
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: PUSH
48881: LD_INT 92
48883: PUSH
48884: LD_VAR 0 2
48888: PUSH
48889: LD_VAR 0 3
48893: PUSH
48894: LD_VAR 0 4
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: PUSH
48905: LD_INT 3
48907: PUSH
48908: LD_INT 21
48910: PUSH
48911: LD_INT 3
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: LIST
48926: PPUSH
48927: CALL_OW 69
48931: ST_TO_ADDR
// if not tmp then
48932: LD_VAR 0 8
48936: NOT
48937: IFFALSE 48941
// exit ;
48939: GO 50505
// for i in tmp do
48941: LD_ADDR_VAR 0 6
48945: PUSH
48946: LD_VAR 0 8
48950: PUSH
48951: FOR_IN
48952: IFFALSE 50480
// begin points := [ 0 , 0 , 0 ] ;
48954: LD_ADDR_VAR 0 9
48958: PUSH
48959: LD_INT 0
48961: PUSH
48962: LD_INT 0
48964: PUSH
48965: LD_INT 0
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: LIST
48972: ST_TO_ADDR
// bpoints := 1 ;
48973: LD_ADDR_VAR 0 10
48977: PUSH
48978: LD_INT 1
48980: ST_TO_ADDR
// case GetType ( i ) of unit_human :
48981: LD_VAR 0 6
48985: PPUSH
48986: CALL_OW 247
48990: PUSH
48991: LD_INT 1
48993: DOUBLE
48994: EQUAL
48995: IFTRUE 48999
48997: GO 49581
48999: POP
// begin if GetClass ( i ) = 1 then
49000: LD_VAR 0 6
49004: PPUSH
49005: CALL_OW 257
49009: PUSH
49010: LD_INT 1
49012: EQUAL
49013: IFFALSE 49034
// points := [ 10 , 5 , 3 ] ;
49015: LD_ADDR_VAR 0 9
49019: PUSH
49020: LD_INT 10
49022: PUSH
49023: LD_INT 5
49025: PUSH
49026: LD_INT 3
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: LIST
49033: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
49034: LD_VAR 0 6
49038: PPUSH
49039: CALL_OW 257
49043: PUSH
49044: LD_INT 2
49046: PUSH
49047: LD_INT 3
49049: PUSH
49050: LD_INT 4
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: LIST
49057: IN
49058: IFFALSE 49079
// points := [ 3 , 2 , 1 ] ;
49060: LD_ADDR_VAR 0 9
49064: PUSH
49065: LD_INT 3
49067: PUSH
49068: LD_INT 2
49070: PUSH
49071: LD_INT 1
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: LIST
49078: ST_TO_ADDR
// if GetClass ( i ) = 5 then
49079: LD_VAR 0 6
49083: PPUSH
49084: CALL_OW 257
49088: PUSH
49089: LD_INT 5
49091: EQUAL
49092: IFFALSE 49113
// points := [ 130 , 5 , 2 ] ;
49094: LD_ADDR_VAR 0 9
49098: PUSH
49099: LD_INT 130
49101: PUSH
49102: LD_INT 5
49104: PUSH
49105: LD_INT 2
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: LIST
49112: ST_TO_ADDR
// if GetClass ( i ) = 8 then
49113: LD_VAR 0 6
49117: PPUSH
49118: CALL_OW 257
49122: PUSH
49123: LD_INT 8
49125: EQUAL
49126: IFFALSE 49147
// points := [ 35 , 35 , 30 ] ;
49128: LD_ADDR_VAR 0 9
49132: PUSH
49133: LD_INT 35
49135: PUSH
49136: LD_INT 35
49138: PUSH
49139: LD_INT 30
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: LIST
49146: ST_TO_ADDR
// if GetClass ( i ) = 9 then
49147: LD_VAR 0 6
49151: PPUSH
49152: CALL_OW 257
49156: PUSH
49157: LD_INT 9
49159: EQUAL
49160: IFFALSE 49181
// points := [ 20 , 55 , 40 ] ;
49162: LD_ADDR_VAR 0 9
49166: PUSH
49167: LD_INT 20
49169: PUSH
49170: LD_INT 55
49172: PUSH
49173: LD_INT 40
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: LIST
49180: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
49181: LD_VAR 0 6
49185: PPUSH
49186: CALL_OW 257
49190: PUSH
49191: LD_INT 12
49193: PUSH
49194: LD_INT 16
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: IN
49201: IFFALSE 49222
// points := [ 5 , 3 , 2 ] ;
49203: LD_ADDR_VAR 0 9
49207: PUSH
49208: LD_INT 5
49210: PUSH
49211: LD_INT 3
49213: PUSH
49214: LD_INT 2
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: LIST
49221: ST_TO_ADDR
// if GetClass ( i ) = 17 then
49222: LD_VAR 0 6
49226: PPUSH
49227: CALL_OW 257
49231: PUSH
49232: LD_INT 17
49234: EQUAL
49235: IFFALSE 49256
// points := [ 100 , 50 , 75 ] ;
49237: LD_ADDR_VAR 0 9
49241: PUSH
49242: LD_INT 100
49244: PUSH
49245: LD_INT 50
49247: PUSH
49248: LD_INT 75
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: LIST
49255: ST_TO_ADDR
// if GetClass ( i ) = 15 then
49256: LD_VAR 0 6
49260: PPUSH
49261: CALL_OW 257
49265: PUSH
49266: LD_INT 15
49268: EQUAL
49269: IFFALSE 49290
// points := [ 10 , 5 , 3 ] ;
49271: LD_ADDR_VAR 0 9
49275: PUSH
49276: LD_INT 10
49278: PUSH
49279: LD_INT 5
49281: PUSH
49282: LD_INT 3
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: LIST
49289: ST_TO_ADDR
// if GetClass ( i ) = 14 then
49290: LD_VAR 0 6
49294: PPUSH
49295: CALL_OW 257
49299: PUSH
49300: LD_INT 14
49302: EQUAL
49303: IFFALSE 49324
// points := [ 10 , 0 , 0 ] ;
49305: LD_ADDR_VAR 0 9
49309: PUSH
49310: LD_INT 10
49312: PUSH
49313: LD_INT 0
49315: PUSH
49316: LD_INT 0
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: LIST
49323: ST_TO_ADDR
// if GetClass ( i ) = 11 then
49324: LD_VAR 0 6
49328: PPUSH
49329: CALL_OW 257
49333: PUSH
49334: LD_INT 11
49336: EQUAL
49337: IFFALSE 49358
// points := [ 30 , 10 , 5 ] ;
49339: LD_ADDR_VAR 0 9
49343: PUSH
49344: LD_INT 30
49346: PUSH
49347: LD_INT 10
49349: PUSH
49350: LD_INT 5
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: LIST
49357: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
49358: LD_VAR 0 1
49362: PPUSH
49363: LD_INT 5
49365: PPUSH
49366: CALL_OW 321
49370: PUSH
49371: LD_INT 2
49373: EQUAL
49374: IFFALSE 49391
// bpoints := bpoints * 1.8 ;
49376: LD_ADDR_VAR 0 10
49380: PUSH
49381: LD_VAR 0 10
49385: PUSH
49386: LD_REAL  1.80000000000000E+0000
49389: MUL
49390: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
49391: LD_VAR 0 6
49395: PPUSH
49396: CALL_OW 257
49400: PUSH
49401: LD_INT 1
49403: PUSH
49404: LD_INT 2
49406: PUSH
49407: LD_INT 3
49409: PUSH
49410: LD_INT 4
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: LIST
49417: LIST
49418: IN
49419: IFFALSE 49439
49421: PUSH
49422: LD_VAR 0 1
49426: PPUSH
49427: LD_INT 51
49429: PPUSH
49430: CALL_OW 321
49434: PUSH
49435: LD_INT 2
49437: EQUAL
49438: AND
49439: IFFALSE 49456
// bpoints := bpoints * 1.2 ;
49441: LD_ADDR_VAR 0 10
49445: PUSH
49446: LD_VAR 0 10
49450: PUSH
49451: LD_REAL  1.20000000000000E+0000
49454: MUL
49455: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
49456: LD_VAR 0 6
49460: PPUSH
49461: CALL_OW 257
49465: PUSH
49466: LD_INT 5
49468: PUSH
49469: LD_INT 7
49471: PUSH
49472: LD_INT 9
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: LIST
49479: IN
49480: IFFALSE 49500
49482: PUSH
49483: LD_VAR 0 1
49487: PPUSH
49488: LD_INT 52
49490: PPUSH
49491: CALL_OW 321
49495: PUSH
49496: LD_INT 2
49498: EQUAL
49499: AND
49500: IFFALSE 49517
// bpoints := bpoints * 1.5 ;
49502: LD_ADDR_VAR 0 10
49506: PUSH
49507: LD_VAR 0 10
49511: PUSH
49512: LD_REAL  1.50000000000000E+0000
49515: MUL
49516: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
49517: LD_VAR 0 1
49521: PPUSH
49522: LD_INT 66
49524: PPUSH
49525: CALL_OW 321
49529: PUSH
49530: LD_INT 2
49532: EQUAL
49533: IFFALSE 49550
// bpoints := bpoints * 1.1 ;
49535: LD_ADDR_VAR 0 10
49539: PUSH
49540: LD_VAR 0 10
49544: PUSH
49545: LD_REAL  1.10000000000000E+0000
49548: MUL
49549: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
49550: LD_ADDR_VAR 0 10
49554: PUSH
49555: LD_VAR 0 10
49559: PUSH
49560: LD_VAR 0 6
49564: PPUSH
49565: LD_INT 1
49567: PPUSH
49568: CALL_OW 259
49572: PUSH
49573: LD_REAL  1.15000000000000E+0000
49576: MUL
49577: MUL
49578: ST_TO_ADDR
// end ; unit_vehicle :
49579: GO 50409
49581: LD_INT 2
49583: DOUBLE
49584: EQUAL
49585: IFTRUE 49589
49587: GO 50397
49589: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
49590: LD_VAR 0 6
49594: PPUSH
49595: CALL_OW 264
49599: PUSH
49600: LD_INT 2
49602: PUSH
49603: LD_INT 42
49605: PUSH
49606: LD_INT 24
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: LIST
49613: IN
49614: IFFALSE 49635
// points := [ 25 , 5 , 3 ] ;
49616: LD_ADDR_VAR 0 9
49620: PUSH
49621: LD_INT 25
49623: PUSH
49624: LD_INT 5
49626: PUSH
49627: LD_INT 3
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: LIST
49634: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
49635: LD_VAR 0 6
49639: PPUSH
49640: CALL_OW 264
49644: PUSH
49645: LD_INT 4
49647: PUSH
49648: LD_INT 43
49650: PUSH
49651: LD_INT 25
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: LIST
49658: IN
49659: IFFALSE 49680
// points := [ 40 , 15 , 5 ] ;
49661: LD_ADDR_VAR 0 9
49665: PUSH
49666: LD_INT 40
49668: PUSH
49669: LD_INT 15
49671: PUSH
49672: LD_INT 5
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: LIST
49679: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
49680: LD_VAR 0 6
49684: PPUSH
49685: CALL_OW 264
49689: PUSH
49690: LD_INT 3
49692: PUSH
49693: LD_INT 23
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: IN
49700: IFFALSE 49721
// points := [ 7 , 25 , 8 ] ;
49702: LD_ADDR_VAR 0 9
49706: PUSH
49707: LD_INT 7
49709: PUSH
49710: LD_INT 25
49712: PUSH
49713: LD_INT 8
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: LIST
49720: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
49721: LD_VAR 0 6
49725: PPUSH
49726: CALL_OW 264
49730: PUSH
49731: LD_INT 5
49733: PUSH
49734: LD_INT 27
49736: PUSH
49737: LD_INT 44
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: LIST
49744: IN
49745: IFFALSE 49766
// points := [ 14 , 50 , 16 ] ;
49747: LD_ADDR_VAR 0 9
49751: PUSH
49752: LD_INT 14
49754: PUSH
49755: LD_INT 50
49757: PUSH
49758: LD_INT 16
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: LIST
49765: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
49766: LD_VAR 0 6
49770: PPUSH
49771: CALL_OW 264
49775: PUSH
49776: LD_INT 6
49778: PUSH
49779: LD_INT 46
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: IN
49786: IFFALSE 49807
// points := [ 32 , 120 , 70 ] ;
49788: LD_ADDR_VAR 0 9
49792: PUSH
49793: LD_INT 32
49795: PUSH
49796: LD_INT 120
49798: PUSH
49799: LD_INT 70
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: LIST
49806: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
49807: LD_VAR 0 6
49811: PPUSH
49812: CALL_OW 264
49816: PUSH
49817: LD_INT 7
49819: PUSH
49820: LD_INT 28
49822: PUSH
49823: LD_INT 45
49825: PUSH
49826: LD_INT 92
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: LIST
49833: LIST
49834: IN
49835: IFFALSE 49856
// points := [ 35 , 20 , 45 ] ;
49837: LD_ADDR_VAR 0 9
49841: PUSH
49842: LD_INT 35
49844: PUSH
49845: LD_INT 20
49847: PUSH
49848: LD_INT 45
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: LIST
49855: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
49856: LD_VAR 0 6
49860: PPUSH
49861: CALL_OW 264
49865: PUSH
49866: LD_INT 47
49868: PUSH
49869: EMPTY
49870: LIST
49871: IN
49872: IFFALSE 49893
// points := [ 67 , 45 , 75 ] ;
49874: LD_ADDR_VAR 0 9
49878: PUSH
49879: LD_INT 67
49881: PUSH
49882: LD_INT 45
49884: PUSH
49885: LD_INT 75
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: LIST
49892: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
49893: LD_VAR 0 6
49897: PPUSH
49898: CALL_OW 264
49902: PUSH
49903: LD_INT 26
49905: PUSH
49906: EMPTY
49907: LIST
49908: IN
49909: IFFALSE 49930
// points := [ 120 , 30 , 80 ] ;
49911: LD_ADDR_VAR 0 9
49915: PUSH
49916: LD_INT 120
49918: PUSH
49919: LD_INT 30
49921: PUSH
49922: LD_INT 80
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: LIST
49929: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
49930: LD_VAR 0 6
49934: PPUSH
49935: CALL_OW 264
49939: PUSH
49940: LD_INT 22
49942: PUSH
49943: EMPTY
49944: LIST
49945: IN
49946: IFFALSE 49967
// points := [ 40 , 1 , 1 ] ;
49948: LD_ADDR_VAR 0 9
49952: PUSH
49953: LD_INT 40
49955: PUSH
49956: LD_INT 1
49958: PUSH
49959: LD_INT 1
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: LIST
49966: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
49967: LD_VAR 0 6
49971: PPUSH
49972: CALL_OW 264
49976: PUSH
49977: LD_INT 29
49979: PUSH
49980: EMPTY
49981: LIST
49982: IN
49983: IFFALSE 50004
// points := [ 70 , 200 , 400 ] ;
49985: LD_ADDR_VAR 0 9
49989: PUSH
49990: LD_INT 70
49992: PUSH
49993: LD_INT 200
49995: PUSH
49996: LD_INT 400
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: LIST
50003: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
50004: LD_VAR 0 6
50008: PPUSH
50009: CALL_OW 264
50013: PUSH
50014: LD_INT 14
50016: PUSH
50017: LD_INT 53
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: IN
50024: IFFALSE 50045
// points := [ 40 , 10 , 20 ] ;
50026: LD_ADDR_VAR 0 9
50030: PUSH
50031: LD_INT 40
50033: PUSH
50034: LD_INT 10
50036: PUSH
50037: LD_INT 20
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: LIST
50044: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
50045: LD_VAR 0 6
50049: PPUSH
50050: CALL_OW 264
50054: PUSH
50055: LD_INT 9
50057: PUSH
50058: EMPTY
50059: LIST
50060: IN
50061: IFFALSE 50082
// points := [ 5 , 70 , 20 ] ;
50063: LD_ADDR_VAR 0 9
50067: PUSH
50068: LD_INT 5
50070: PUSH
50071: LD_INT 70
50073: PUSH
50074: LD_INT 20
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: LIST
50081: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
50082: LD_VAR 0 6
50086: PPUSH
50087: CALL_OW 264
50091: PUSH
50092: LD_INT 10
50094: PUSH
50095: EMPTY
50096: LIST
50097: IN
50098: IFFALSE 50119
// points := [ 35 , 110 , 70 ] ;
50100: LD_ADDR_VAR 0 9
50104: PUSH
50105: LD_INT 35
50107: PUSH
50108: LD_INT 110
50110: PUSH
50111: LD_INT 70
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: LIST
50118: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
50119: LD_VAR 0 6
50123: PPUSH
50124: CALL_OW 265
50128: PUSH
50129: LD_INT 25
50131: EQUAL
50132: IFFALSE 50153
// points := [ 80 , 65 , 100 ] ;
50134: LD_ADDR_VAR 0 9
50138: PUSH
50139: LD_INT 80
50141: PUSH
50142: LD_INT 65
50144: PUSH
50145: LD_INT 100
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: LIST
50152: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
50153: LD_VAR 0 6
50157: PPUSH
50158: CALL_OW 263
50162: PUSH
50163: LD_INT 1
50165: EQUAL
50166: IFFALSE 50201
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
50168: LD_ADDR_VAR 0 10
50172: PUSH
50173: LD_VAR 0 10
50177: PUSH
50178: LD_VAR 0 6
50182: PPUSH
50183: CALL_OW 311
50187: PPUSH
50188: LD_INT 3
50190: PPUSH
50191: CALL_OW 259
50195: PUSH
50196: LD_INT 4
50198: MUL
50199: MUL
50200: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
50201: LD_VAR 0 6
50205: PPUSH
50206: CALL_OW 263
50210: PUSH
50211: LD_INT 2
50213: EQUAL
50214: IFFALSE 50265
// begin j := IsControledBy ( i ) ;
50216: LD_ADDR_VAR 0 7
50220: PUSH
50221: LD_VAR 0 6
50225: PPUSH
50226: CALL_OW 312
50230: ST_TO_ADDR
// if j then
50231: LD_VAR 0 7
50235: IFFALSE 50265
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
50237: LD_ADDR_VAR 0 10
50241: PUSH
50242: LD_VAR 0 10
50246: PUSH
50247: LD_VAR 0 7
50251: PPUSH
50252: LD_INT 3
50254: PPUSH
50255: CALL_OW 259
50259: PUSH
50260: LD_INT 3
50262: MUL
50263: MUL
50264: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
50265: LD_VAR 0 6
50269: PPUSH
50270: CALL_OW 264
50274: PUSH
50275: LD_INT 5
50277: PUSH
50278: LD_INT 6
50280: PUSH
50281: LD_INT 46
50283: PUSH
50284: LD_INT 44
50286: PUSH
50287: LD_INT 47
50289: PUSH
50290: LD_INT 45
50292: PUSH
50293: LD_INT 28
50295: PUSH
50296: LD_INT 7
50298: PUSH
50299: LD_INT 27
50301: PUSH
50302: LD_INT 29
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: IN
50317: IFFALSE 50337
50319: PUSH
50320: LD_VAR 0 1
50324: PPUSH
50325: LD_INT 52
50327: PPUSH
50328: CALL_OW 321
50332: PUSH
50333: LD_INT 2
50335: EQUAL
50336: AND
50337: IFFALSE 50354
// bpoints := bpoints * 1.2 ;
50339: LD_ADDR_VAR 0 10
50343: PUSH
50344: LD_VAR 0 10
50348: PUSH
50349: LD_REAL  1.20000000000000E+0000
50352: MUL
50353: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
50354: LD_VAR 0 6
50358: PPUSH
50359: CALL_OW 264
50363: PUSH
50364: LD_INT 6
50366: PUSH
50367: LD_INT 46
50369: PUSH
50370: LD_INT 47
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: LIST
50377: IN
50378: IFFALSE 50395
// bpoints := bpoints * 1.2 ;
50380: LD_ADDR_VAR 0 10
50384: PUSH
50385: LD_VAR 0 10
50389: PUSH
50390: LD_REAL  1.20000000000000E+0000
50393: MUL
50394: ST_TO_ADDR
// end ; unit_building :
50395: GO 50409
50397: LD_INT 3
50399: DOUBLE
50400: EQUAL
50401: IFTRUE 50405
50403: GO 50408
50405: POP
// ; end ;
50406: GO 50409
50408: POP
// for j = 1 to 3 do
50409: LD_ADDR_VAR 0 7
50413: PUSH
50414: DOUBLE
50415: LD_INT 1
50417: DEC
50418: ST_TO_ADDR
50419: LD_INT 3
50421: PUSH
50422: FOR_TO
50423: IFFALSE 50476
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
50425: LD_ADDR_VAR 0 5
50429: PUSH
50430: LD_VAR 0 5
50434: PPUSH
50435: LD_VAR 0 7
50439: PPUSH
50440: LD_VAR 0 5
50444: PUSH
50445: LD_VAR 0 7
50449: ARRAY
50450: PUSH
50451: LD_VAR 0 9
50455: PUSH
50456: LD_VAR 0 7
50460: ARRAY
50461: PUSH
50462: LD_VAR 0 10
50466: MUL
50467: PLUS
50468: PPUSH
50469: CALL_OW 1
50473: ST_TO_ADDR
50474: GO 50422
50476: POP
50477: POP
// end ;
50478: GO 48951
50480: POP
50481: POP
// result := Replace ( result , 4 , tmp ) ;
50482: LD_ADDR_VAR 0 5
50486: PUSH
50487: LD_VAR 0 5
50491: PPUSH
50492: LD_INT 4
50494: PPUSH
50495: LD_VAR 0 8
50499: PPUSH
50500: CALL_OW 1
50504: ST_TO_ADDR
// end ;
50505: LD_VAR 0 5
50509: RET
// export function DangerAtRange ( unit , range ) ; begin
50510: LD_INT 0
50512: PPUSH
// if not unit then
50513: LD_VAR 0 1
50517: NOT
50518: IFFALSE 50522
// exit ;
50520: GO 50567
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
50522: LD_ADDR_VAR 0 3
50526: PUSH
50527: LD_VAR 0 1
50531: PPUSH
50532: CALL_OW 255
50536: PPUSH
50537: LD_VAR 0 1
50541: PPUSH
50542: CALL_OW 250
50546: PPUSH
50547: LD_VAR 0 1
50551: PPUSH
50552: CALL_OW 251
50556: PPUSH
50557: LD_VAR 0 2
50561: PPUSH
50562: CALL 48801 0 4
50566: ST_TO_ADDR
// end ;
50567: LD_VAR 0 3
50571: RET
// export function DangerInArea ( side , area ) ; begin
50572: LD_INT 0
50574: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
50575: LD_ADDR_VAR 0 3
50579: PUSH
50580: LD_VAR 0 2
50584: PPUSH
50585: LD_INT 81
50587: PUSH
50588: LD_VAR 0 1
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: PPUSH
50597: CALL_OW 70
50601: ST_TO_ADDR
// end ;
50602: LD_VAR 0 3
50606: RET
// export function IsExtension ( b ) ; begin
50607: LD_INT 0
50609: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
50610: LD_ADDR_VAR 0 2
50614: PUSH
50615: LD_VAR 0 1
50619: PUSH
50620: LD_INT 23
50622: PUSH
50623: LD_INT 20
50625: PUSH
50626: LD_INT 22
50628: PUSH
50629: LD_INT 17
50631: PUSH
50632: LD_INT 24
50634: PUSH
50635: LD_INT 21
50637: PUSH
50638: LD_INT 19
50640: PUSH
50641: LD_INT 16
50643: PUSH
50644: LD_INT 25
50646: PUSH
50647: LD_INT 18
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: IN
50662: ST_TO_ADDR
// end ;
50663: LD_VAR 0 2
50667: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
50668: LD_INT 0
50670: PPUSH
50671: PPUSH
50672: PPUSH
// result := [ ] ;
50673: LD_ADDR_VAR 0 4
50677: PUSH
50678: EMPTY
50679: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
50680: LD_ADDR_VAR 0 5
50684: PUSH
50685: LD_VAR 0 2
50689: PPUSH
50690: LD_INT 21
50692: PUSH
50693: LD_INT 3
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PPUSH
50700: CALL_OW 70
50704: ST_TO_ADDR
// if not tmp then
50705: LD_VAR 0 5
50709: NOT
50710: IFFALSE 50714
// exit ;
50712: GO 50778
// if checkLink then
50714: LD_VAR 0 3
50718: IFFALSE 50768
// begin for i in tmp do
50720: LD_ADDR_VAR 0 6
50724: PUSH
50725: LD_VAR 0 5
50729: PUSH
50730: FOR_IN
50731: IFFALSE 50766
// if GetBase ( i ) <> base then
50733: LD_VAR 0 6
50737: PPUSH
50738: CALL_OW 274
50742: PUSH
50743: LD_VAR 0 1
50747: NONEQUAL
50748: IFFALSE 50764
// ComLinkToBase ( base , i ) ;
50750: LD_VAR 0 1
50754: PPUSH
50755: LD_VAR 0 6
50759: PPUSH
50760: CALL_OW 169
50764: GO 50730
50766: POP
50767: POP
// end ; result := tmp ;
50768: LD_ADDR_VAR 0 4
50772: PUSH
50773: LD_VAR 0 5
50777: ST_TO_ADDR
// end ;
50778: LD_VAR 0 4
50782: RET
// export function ComComplete ( units , b ) ; var i ; begin
50783: LD_INT 0
50785: PPUSH
50786: PPUSH
// if not units then
50787: LD_VAR 0 1
50791: NOT
50792: IFFALSE 50796
// exit ;
50794: GO 50886
// for i in units do
50796: LD_ADDR_VAR 0 4
50800: PUSH
50801: LD_VAR 0 1
50805: PUSH
50806: FOR_IN
50807: IFFALSE 50884
// if BuildingStatus ( b ) = bs_build then
50809: LD_VAR 0 2
50813: PPUSH
50814: CALL_OW 461
50818: PUSH
50819: LD_INT 1
50821: EQUAL
50822: IFFALSE 50882
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
50824: LD_VAR 0 4
50828: PPUSH
50829: LD_STRING h
50831: PUSH
50832: LD_VAR 0 2
50836: PPUSH
50837: CALL_OW 250
50841: PUSH
50842: LD_VAR 0 2
50846: PPUSH
50847: CALL_OW 251
50851: PUSH
50852: LD_VAR 0 2
50856: PUSH
50857: LD_INT 0
50859: PUSH
50860: LD_INT 0
50862: PUSH
50863: LD_INT 0
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: LIST
50874: PUSH
50875: EMPTY
50876: LIST
50877: PPUSH
50878: CALL_OW 446
50882: GO 50806
50884: POP
50885: POP
// end ;
50886: LD_VAR 0 3
50890: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
50891: LD_INT 0
50893: PPUSH
50894: PPUSH
50895: PPUSH
50896: PPUSH
50897: PPUSH
50898: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
50899: LD_VAR 0 1
50903: NOT
50904: IFTRUE 50921
50906: PUSH
50907: LD_VAR 0 1
50911: PPUSH
50912: CALL_OW 263
50916: PUSH
50917: LD_INT 2
50919: NONEQUAL
50920: OR
50921: IFFALSE 50925
// exit ;
50923: GO 51241
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
50925: LD_ADDR_VAR 0 6
50929: PUSH
50930: LD_INT 22
50932: PUSH
50933: LD_VAR 0 1
50937: PPUSH
50938: CALL_OW 255
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: PUSH
50947: LD_INT 2
50949: PUSH
50950: LD_INT 30
50952: PUSH
50953: LD_INT 36
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 34
50962: PUSH
50963: LD_INT 31
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: LIST
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PPUSH
50979: CALL_OW 69
50983: ST_TO_ADDR
// if not tmp then
50984: LD_VAR 0 6
50988: NOT
50989: IFFALSE 50993
// exit ;
50991: GO 51241
// result := [ ] ;
50993: LD_ADDR_VAR 0 2
50997: PUSH
50998: EMPTY
50999: ST_TO_ADDR
// for i in tmp do
51000: LD_ADDR_VAR 0 3
51004: PUSH
51005: LD_VAR 0 6
51009: PUSH
51010: FOR_IN
51011: IFFALSE 51082
// begin t := UnitsInside ( i ) ;
51013: LD_ADDR_VAR 0 4
51017: PUSH
51018: LD_VAR 0 3
51022: PPUSH
51023: CALL_OW 313
51027: ST_TO_ADDR
// if t then
51028: LD_VAR 0 4
51032: IFFALSE 51080
// for j in t do
51034: LD_ADDR_VAR 0 7
51038: PUSH
51039: LD_VAR 0 4
51043: PUSH
51044: FOR_IN
51045: IFFALSE 51078
// result := Replace ( result , result + 1 , j ) ;
51047: LD_ADDR_VAR 0 2
51051: PUSH
51052: LD_VAR 0 2
51056: PPUSH
51057: LD_VAR 0 2
51061: PUSH
51062: LD_INT 1
51064: PLUS
51065: PPUSH
51066: LD_VAR 0 7
51070: PPUSH
51071: CALL_OW 1
51075: ST_TO_ADDR
51076: GO 51044
51078: POP
51079: POP
// end ;
51080: GO 51010
51082: POP
51083: POP
// if not result then
51084: LD_VAR 0 2
51088: NOT
51089: IFFALSE 51093
// exit ;
51091: GO 51241
// mech := result [ 1 ] ;
51093: LD_ADDR_VAR 0 5
51097: PUSH
51098: LD_VAR 0 2
51102: PUSH
51103: LD_INT 1
51105: ARRAY
51106: ST_TO_ADDR
// if result > 1 then
51107: LD_VAR 0 2
51111: PUSH
51112: LD_INT 1
51114: GREATER
51115: IFFALSE 51227
// begin for i = 2 to result do
51117: LD_ADDR_VAR 0 3
51121: PUSH
51122: DOUBLE
51123: LD_INT 2
51125: DEC
51126: ST_TO_ADDR
51127: LD_VAR 0 2
51131: PUSH
51132: FOR_TO
51133: IFFALSE 51225
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
51135: LD_ADDR_VAR 0 4
51139: PUSH
51140: LD_VAR 0 2
51144: PUSH
51145: LD_VAR 0 3
51149: ARRAY
51150: PPUSH
51151: LD_INT 3
51153: PPUSH
51154: CALL_OW 259
51158: PUSH
51159: LD_VAR 0 2
51163: PUSH
51164: LD_VAR 0 3
51168: ARRAY
51169: PPUSH
51170: CALL_OW 432
51174: MINUS
51175: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
51176: LD_VAR 0 4
51180: PUSH
51181: LD_VAR 0 5
51185: PPUSH
51186: LD_INT 3
51188: PPUSH
51189: CALL_OW 259
51193: PUSH
51194: LD_VAR 0 5
51198: PPUSH
51199: CALL_OW 432
51203: MINUS
51204: GREATEREQUAL
51205: IFFALSE 51223
// mech := result [ i ] ;
51207: LD_ADDR_VAR 0 5
51211: PUSH
51212: LD_VAR 0 2
51216: PUSH
51217: LD_VAR 0 3
51221: ARRAY
51222: ST_TO_ADDR
// end ;
51223: GO 51132
51225: POP
51226: POP
// end ; ComLinkTo ( vehicle , mech ) ;
51227: LD_VAR 0 1
51231: PPUSH
51232: LD_VAR 0 5
51236: PPUSH
51237: CALL_OW 135
// end ;
51241: LD_VAR 0 2
51245: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
51246: LD_INT 0
51248: PPUSH
51249: PPUSH
51250: PPUSH
51251: PPUSH
51252: PPUSH
51253: PPUSH
51254: PPUSH
51255: PPUSH
51256: PPUSH
51257: PPUSH
51258: PPUSH
51259: PPUSH
51260: PPUSH
// result := [ ] ;
51261: LD_ADDR_VAR 0 7
51265: PUSH
51266: EMPTY
51267: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
51268: LD_VAR 0 1
51272: PPUSH
51273: CALL_OW 266
51277: PUSH
51278: LD_INT 0
51280: PUSH
51281: LD_INT 1
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: IN
51288: NOT
51289: IFFALSE 51293
// exit ;
51291: GO 52933
// if name then
51293: LD_VAR 0 3
51297: IFFALSE 51313
// SetBName ( base_dep , name ) ;
51299: LD_VAR 0 1
51303: PPUSH
51304: LD_VAR 0 3
51308: PPUSH
51309: CALL_OW 500
// base := GetBase ( base_dep ) ;
51313: LD_ADDR_VAR 0 15
51317: PUSH
51318: LD_VAR 0 1
51322: PPUSH
51323: CALL_OW 274
51327: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
51328: LD_ADDR_VAR 0 16
51332: PUSH
51333: LD_VAR 0 1
51337: PPUSH
51338: CALL_OW 255
51342: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
51343: LD_ADDR_VAR 0 17
51347: PUSH
51348: LD_VAR 0 1
51352: PPUSH
51353: CALL_OW 248
51357: ST_TO_ADDR
// if sources then
51358: LD_VAR 0 5
51362: IFFALSE 51409
// for i = 1 to 3 do
51364: LD_ADDR_VAR 0 8
51368: PUSH
51369: DOUBLE
51370: LD_INT 1
51372: DEC
51373: ST_TO_ADDR
51374: LD_INT 3
51376: PUSH
51377: FOR_TO
51378: IFFALSE 51407
// AddResourceType ( base , i , sources [ i ] ) ;
51380: LD_VAR 0 15
51384: PPUSH
51385: LD_VAR 0 8
51389: PPUSH
51390: LD_VAR 0 5
51394: PUSH
51395: LD_VAR 0 8
51399: ARRAY
51400: PPUSH
51401: CALL_OW 276
51405: GO 51377
51407: POP
51408: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
51409: LD_ADDR_VAR 0 18
51413: PUSH
51414: LD_VAR 0 15
51418: PPUSH
51419: LD_VAR 0 2
51423: PPUSH
51424: LD_INT 1
51426: PPUSH
51427: CALL 50668 0 3
51431: ST_TO_ADDR
// InitHc ;
51432: CALL_OW 19
// InitUc ;
51436: CALL_OW 18
// uc_side := side ;
51440: LD_ADDR_OWVAR 20
51444: PUSH
51445: LD_VAR 0 16
51449: ST_TO_ADDR
// uc_nation := nation ;
51450: LD_ADDR_OWVAR 21
51454: PUSH
51455: LD_VAR 0 17
51459: ST_TO_ADDR
// if buildings then
51460: LD_VAR 0 18
51464: IFFALSE 52792
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
51466: LD_ADDR_VAR 0 19
51470: PUSH
51471: LD_VAR 0 18
51475: PPUSH
51476: LD_INT 2
51478: PUSH
51479: LD_INT 30
51481: PUSH
51482: LD_INT 29
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: LD_INT 30
51491: PUSH
51492: LD_INT 30
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: LIST
51503: PPUSH
51504: CALL_OW 72
51508: ST_TO_ADDR
// if tmp then
51509: LD_VAR 0 19
51513: IFFALSE 51561
// for i in tmp do
51515: LD_ADDR_VAR 0 8
51519: PUSH
51520: LD_VAR 0 19
51524: PUSH
51525: FOR_IN
51526: IFFALSE 51559
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
51528: LD_VAR 0 8
51532: PPUSH
51533: CALL_OW 250
51537: PPUSH
51538: LD_VAR 0 8
51542: PPUSH
51543: CALL_OW 251
51547: PPUSH
51548: LD_VAR 0 16
51552: PPUSH
51553: CALL_OW 441
51557: GO 51525
51559: POP
51560: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
51561: LD_VAR 0 18
51565: PPUSH
51566: LD_INT 2
51568: PUSH
51569: LD_INT 30
51571: PUSH
51572: LD_INT 32
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 30
51581: PUSH
51582: LD_INT 33
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: LIST
51593: PPUSH
51594: CALL_OW 72
51598: IFFALSE 51686
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
51600: LD_ADDR_VAR 0 8
51604: PUSH
51605: LD_VAR 0 18
51609: PPUSH
51610: LD_INT 2
51612: PUSH
51613: LD_INT 30
51615: PUSH
51616: LD_INT 32
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 30
51625: PUSH
51626: LD_INT 33
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: LIST
51637: PPUSH
51638: CALL_OW 72
51642: PUSH
51643: FOR_IN
51644: IFFALSE 51684
// begin if not GetBWeapon ( i ) then
51646: LD_VAR 0 8
51650: PPUSH
51651: CALL_OW 269
51655: NOT
51656: IFFALSE 51682
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
51658: LD_VAR 0 8
51662: PPUSH
51663: LD_VAR 0 8
51667: PPUSH
51668: LD_VAR 0 2
51672: PPUSH
51673: CALL 52938 0 2
51677: PPUSH
51678: CALL_OW 431
// end ;
51682: GO 51643
51684: POP
51685: POP
// end ; for i = 1 to personel do
51686: LD_ADDR_VAR 0 8
51690: PUSH
51691: DOUBLE
51692: LD_INT 1
51694: DEC
51695: ST_TO_ADDR
51696: LD_VAR 0 6
51700: PUSH
51701: FOR_TO
51702: IFFALSE 52772
// begin if i > 4 then
51704: LD_VAR 0 8
51708: PUSH
51709: LD_INT 4
51711: GREATER
51712: IFFALSE 51716
// break ;
51714: GO 52772
// case i of 1 :
51716: LD_VAR 0 8
51720: PUSH
51721: LD_INT 1
51723: DOUBLE
51724: EQUAL
51725: IFTRUE 51729
51727: GO 51809
51729: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
51730: LD_ADDR_VAR 0 12
51734: PUSH
51735: LD_VAR 0 18
51739: PPUSH
51740: LD_INT 22
51742: PUSH
51743: LD_VAR 0 16
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: PUSH
51752: LD_INT 58
51754: PUSH
51755: EMPTY
51756: LIST
51757: PUSH
51758: LD_INT 2
51760: PUSH
51761: LD_INT 30
51763: PUSH
51764: LD_INT 32
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 30
51773: PUSH
51774: LD_INT 4
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 30
51783: PUSH
51784: LD_INT 5
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: LIST
51801: PPUSH
51802: CALL_OW 72
51806: ST_TO_ADDR
51807: GO 52031
51809: LD_INT 2
51811: DOUBLE
51812: EQUAL
51813: IFTRUE 51817
51815: GO 51879
51817: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
51818: LD_ADDR_VAR 0 12
51822: PUSH
51823: LD_VAR 0 18
51827: PPUSH
51828: LD_INT 22
51830: PUSH
51831: LD_VAR 0 16
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 2
51842: PUSH
51843: LD_INT 30
51845: PUSH
51846: LD_INT 0
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: LD_INT 30
51855: PUSH
51856: LD_INT 1
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: LIST
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PPUSH
51872: CALL_OW 72
51876: ST_TO_ADDR
51877: GO 52031
51879: LD_INT 3
51881: DOUBLE
51882: EQUAL
51883: IFTRUE 51887
51885: GO 51949
51887: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
51888: LD_ADDR_VAR 0 12
51892: PUSH
51893: LD_VAR 0 18
51897: PPUSH
51898: LD_INT 22
51900: PUSH
51901: LD_VAR 0 16
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 2
51912: PUSH
51913: LD_INT 30
51915: PUSH
51916: LD_INT 2
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 30
51925: PUSH
51926: LD_INT 3
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: LIST
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PPUSH
51942: CALL_OW 72
51946: ST_TO_ADDR
51947: GO 52031
51949: LD_INT 4
51951: DOUBLE
51952: EQUAL
51953: IFTRUE 51957
51955: GO 52030
51957: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
51958: LD_ADDR_VAR 0 12
51962: PUSH
51963: LD_VAR 0 18
51967: PPUSH
51968: LD_INT 22
51970: PUSH
51971: LD_VAR 0 16
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 2
51982: PUSH
51983: LD_INT 30
51985: PUSH
51986: LD_INT 6
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 30
51995: PUSH
51996: LD_INT 7
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 30
52005: PUSH
52006: LD_INT 8
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PPUSH
52023: CALL_OW 72
52027: ST_TO_ADDR
52028: GO 52031
52030: POP
// if i = 1 then
52031: LD_VAR 0 8
52035: PUSH
52036: LD_INT 1
52038: EQUAL
52039: IFFALSE 52150
// begin tmp := [ ] ;
52041: LD_ADDR_VAR 0 19
52045: PUSH
52046: EMPTY
52047: ST_TO_ADDR
// for j in f do
52048: LD_ADDR_VAR 0 9
52052: PUSH
52053: LD_VAR 0 12
52057: PUSH
52058: FOR_IN
52059: IFFALSE 52132
// if GetBType ( j ) = b_bunker then
52061: LD_VAR 0 9
52065: PPUSH
52066: CALL_OW 266
52070: PUSH
52071: LD_INT 32
52073: EQUAL
52074: IFFALSE 52101
// tmp := Insert ( tmp , 1 , j ) else
52076: LD_ADDR_VAR 0 19
52080: PUSH
52081: LD_VAR 0 19
52085: PPUSH
52086: LD_INT 1
52088: PPUSH
52089: LD_VAR 0 9
52093: PPUSH
52094: CALL_OW 2
52098: ST_TO_ADDR
52099: GO 52130
// tmp := Insert ( tmp , tmp + 1 , j ) ;
52101: LD_ADDR_VAR 0 19
52105: PUSH
52106: LD_VAR 0 19
52110: PPUSH
52111: LD_VAR 0 19
52115: PUSH
52116: LD_INT 1
52118: PLUS
52119: PPUSH
52120: LD_VAR 0 9
52124: PPUSH
52125: CALL_OW 2
52129: ST_TO_ADDR
52130: GO 52058
52132: POP
52133: POP
// if tmp then
52134: LD_VAR 0 19
52138: IFFALSE 52150
// f := tmp ;
52140: LD_ADDR_VAR 0 12
52144: PUSH
52145: LD_VAR 0 19
52149: ST_TO_ADDR
// end ; x := personel [ i ] ;
52150: LD_ADDR_VAR 0 13
52154: PUSH
52155: LD_VAR 0 6
52159: PUSH
52160: LD_VAR 0 8
52164: ARRAY
52165: ST_TO_ADDR
// if x = - 1 then
52166: LD_VAR 0 13
52170: PUSH
52171: LD_INT 1
52173: NEG
52174: EQUAL
52175: IFFALSE 52386
// begin for j in f do
52177: LD_ADDR_VAR 0 9
52181: PUSH
52182: LD_VAR 0 12
52186: PUSH
52187: FOR_IN
52188: IFFALSE 52382
// repeat InitHc ;
52190: CALL_OW 19
// if GetBType ( j ) = b_barracks then
52194: LD_VAR 0 9
52198: PPUSH
52199: CALL_OW 266
52203: PUSH
52204: LD_INT 5
52206: EQUAL
52207: IFFALSE 52277
// begin if UnitsInside ( j ) < 3 then
52209: LD_VAR 0 9
52213: PPUSH
52214: CALL_OW 313
52218: PUSH
52219: LD_INT 3
52221: LESS
52222: IFFALSE 52258
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
52224: LD_INT 0
52226: PPUSH
52227: LD_INT 5
52229: PUSH
52230: LD_INT 8
52232: PUSH
52233: LD_INT 9
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: LIST
52240: PUSH
52241: LD_VAR 0 17
52245: ARRAY
52246: PPUSH
52247: LD_VAR 0 4
52251: PPUSH
52252: CALL_OW 380
52256: GO 52275
// PrepareHuman ( false , i , skill ) ;
52258: LD_INT 0
52260: PPUSH
52261: LD_VAR 0 8
52265: PPUSH
52266: LD_VAR 0 4
52270: PPUSH
52271: CALL_OW 380
// end else
52275: GO 52294
// PrepareHuman ( false , i , skill ) ;
52277: LD_INT 0
52279: PPUSH
52280: LD_VAR 0 8
52284: PPUSH
52285: LD_VAR 0 4
52289: PPUSH
52290: CALL_OW 380
// un := CreateHuman ;
52294: LD_ADDR_VAR 0 14
52298: PUSH
52299: CALL_OW 44
52303: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
52304: LD_ADDR_VAR 0 7
52308: PUSH
52309: LD_VAR 0 7
52313: PPUSH
52314: LD_INT 1
52316: PPUSH
52317: LD_VAR 0 14
52321: PPUSH
52322: CALL_OW 2
52326: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
52327: LD_VAR 0 14
52331: PPUSH
52332: LD_VAR 0 9
52336: PPUSH
52337: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
52341: LD_VAR 0 9
52345: PPUSH
52346: CALL_OW 313
52350: PUSH
52351: LD_INT 6
52353: EQUAL
52354: IFTRUE 52378
52356: PUSH
52357: LD_VAR 0 9
52361: PPUSH
52362: CALL_OW 266
52366: PUSH
52367: LD_INT 32
52369: PUSH
52370: LD_INT 31
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: IN
52377: OR
52378: IFFALSE 52190
52380: GO 52187
52382: POP
52383: POP
// end else
52384: GO 52770
// for j = 1 to x do
52386: LD_ADDR_VAR 0 9
52390: PUSH
52391: DOUBLE
52392: LD_INT 1
52394: DEC
52395: ST_TO_ADDR
52396: LD_VAR 0 13
52400: PUSH
52401: FOR_TO
52402: IFFALSE 52768
// begin InitHc ;
52404: CALL_OW 19
// if not f then
52408: LD_VAR 0 12
52412: NOT
52413: IFFALSE 52502
// begin PrepareHuman ( false , i , skill ) ;
52415: LD_INT 0
52417: PPUSH
52418: LD_VAR 0 8
52422: PPUSH
52423: LD_VAR 0 4
52427: PPUSH
52428: CALL_OW 380
// un := CreateHuman ;
52432: LD_ADDR_VAR 0 14
52436: PUSH
52437: CALL_OW 44
52441: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
52442: LD_ADDR_VAR 0 7
52446: PUSH
52447: LD_VAR 0 7
52451: PPUSH
52452: LD_INT 1
52454: PPUSH
52455: LD_VAR 0 14
52459: PPUSH
52460: CALL_OW 2
52464: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
52465: LD_VAR 0 14
52469: PPUSH
52470: LD_VAR 0 1
52474: PPUSH
52475: CALL_OW 250
52479: PPUSH
52480: LD_VAR 0 1
52484: PPUSH
52485: CALL_OW 251
52489: PPUSH
52490: LD_INT 10
52492: PPUSH
52493: LD_INT 0
52495: PPUSH
52496: CALL_OW 50
// continue ;
52500: GO 52401
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
52502: LD_VAR 0 12
52506: PUSH
52507: LD_INT 1
52509: ARRAY
52510: PPUSH
52511: CALL_OW 313
52515: IFFALSE 52543
52517: PUSH
52518: LD_VAR 0 12
52522: PUSH
52523: LD_INT 1
52525: ARRAY
52526: PPUSH
52527: CALL_OW 266
52531: PUSH
52532: LD_INT 32
52534: PUSH
52535: LD_INT 31
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: IN
52542: AND
52543: IFTRUE 52564
52545: PUSH
52546: LD_VAR 0 12
52550: PUSH
52551: LD_INT 1
52553: ARRAY
52554: PPUSH
52555: CALL_OW 313
52559: PUSH
52560: LD_INT 6
52562: EQUAL
52563: OR
52564: IFFALSE 52584
// f := Delete ( f , 1 ) ;
52566: LD_ADDR_VAR 0 12
52570: PUSH
52571: LD_VAR 0 12
52575: PPUSH
52576: LD_INT 1
52578: PPUSH
52579: CALL_OW 3
52583: ST_TO_ADDR
// if not f then
52584: LD_VAR 0 12
52588: NOT
52589: IFFALSE 52607
// begin x := x + 2 ;
52591: LD_ADDR_VAR 0 13
52595: PUSH
52596: LD_VAR 0 13
52600: PUSH
52601: LD_INT 2
52603: PLUS
52604: ST_TO_ADDR
// continue ;
52605: GO 52401
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
52607: LD_VAR 0 12
52611: PUSH
52612: LD_INT 1
52614: ARRAY
52615: PPUSH
52616: CALL_OW 266
52620: PUSH
52621: LD_INT 5
52623: EQUAL
52624: IFFALSE 52698
// begin if UnitsInside ( f [ 1 ] ) < 3 then
52626: LD_VAR 0 12
52630: PUSH
52631: LD_INT 1
52633: ARRAY
52634: PPUSH
52635: CALL_OW 313
52639: PUSH
52640: LD_INT 3
52642: LESS
52643: IFFALSE 52679
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
52645: LD_INT 0
52647: PPUSH
52648: LD_INT 5
52650: PUSH
52651: LD_INT 8
52653: PUSH
52654: LD_INT 9
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: LIST
52661: PUSH
52662: LD_VAR 0 17
52666: ARRAY
52667: PPUSH
52668: LD_VAR 0 4
52672: PPUSH
52673: CALL_OW 380
52677: GO 52696
// PrepareHuman ( false , i , skill ) ;
52679: LD_INT 0
52681: PPUSH
52682: LD_VAR 0 8
52686: PPUSH
52687: LD_VAR 0 4
52691: PPUSH
52692: CALL_OW 380
// end else
52696: GO 52715
// PrepareHuman ( false , i , skill ) ;
52698: LD_INT 0
52700: PPUSH
52701: LD_VAR 0 8
52705: PPUSH
52706: LD_VAR 0 4
52710: PPUSH
52711: CALL_OW 380
// un := CreateHuman ;
52715: LD_ADDR_VAR 0 14
52719: PUSH
52720: CALL_OW 44
52724: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
52725: LD_ADDR_VAR 0 7
52729: PUSH
52730: LD_VAR 0 7
52734: PPUSH
52735: LD_INT 1
52737: PPUSH
52738: LD_VAR 0 14
52742: PPUSH
52743: CALL_OW 2
52747: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
52748: LD_VAR 0 14
52752: PPUSH
52753: LD_VAR 0 12
52757: PUSH
52758: LD_INT 1
52760: ARRAY
52761: PPUSH
52762: CALL_OW 52
// end ;
52766: GO 52401
52768: POP
52769: POP
// end ;
52770: GO 51701
52772: POP
52773: POP
// result := result ^ buildings ;
52774: LD_ADDR_VAR 0 7
52778: PUSH
52779: LD_VAR 0 7
52783: PUSH
52784: LD_VAR 0 18
52788: ADD
52789: ST_TO_ADDR
// end else
52790: GO 52933
// begin for i = 1 to personel do
52792: LD_ADDR_VAR 0 8
52796: PUSH
52797: DOUBLE
52798: LD_INT 1
52800: DEC
52801: ST_TO_ADDR
52802: LD_VAR 0 6
52806: PUSH
52807: FOR_TO
52808: IFFALSE 52931
// begin if i > 4 then
52810: LD_VAR 0 8
52814: PUSH
52815: LD_INT 4
52817: GREATER
52818: IFFALSE 52822
// break ;
52820: GO 52931
// x := personel [ i ] ;
52822: LD_ADDR_VAR 0 13
52826: PUSH
52827: LD_VAR 0 6
52831: PUSH
52832: LD_VAR 0 8
52836: ARRAY
52837: ST_TO_ADDR
// if x = - 1 then
52838: LD_VAR 0 13
52842: PUSH
52843: LD_INT 1
52845: NEG
52846: EQUAL
52847: IFFALSE 52851
// continue ;
52849: GO 52807
// PrepareHuman ( false , i , skill ) ;
52851: LD_INT 0
52853: PPUSH
52854: LD_VAR 0 8
52858: PPUSH
52859: LD_VAR 0 4
52863: PPUSH
52864: CALL_OW 380
// un := CreateHuman ;
52868: LD_ADDR_VAR 0 14
52872: PUSH
52873: CALL_OW 44
52877: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
52878: LD_VAR 0 14
52882: PPUSH
52883: LD_VAR 0 1
52887: PPUSH
52888: CALL_OW 250
52892: PPUSH
52893: LD_VAR 0 1
52897: PPUSH
52898: CALL_OW 251
52902: PPUSH
52903: LD_INT 10
52905: PPUSH
52906: LD_INT 0
52908: PPUSH
52909: CALL_OW 50
// result := result ^ un ;
52913: LD_ADDR_VAR 0 7
52917: PUSH
52918: LD_VAR 0 7
52922: PUSH
52923: LD_VAR 0 14
52927: ADD
52928: ST_TO_ADDR
// end ;
52929: GO 52807
52931: POP
52932: POP
// end ; end ;
52933: LD_VAR 0 7
52937: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
52938: LD_INT 0
52940: PPUSH
52941: PPUSH
52942: PPUSH
52943: PPUSH
52944: PPUSH
52945: PPUSH
52946: PPUSH
52947: PPUSH
52948: PPUSH
52949: PPUSH
52950: PPUSH
52951: PPUSH
52952: PPUSH
52953: PPUSH
52954: PPUSH
52955: PPUSH
// result := false ;
52956: LD_ADDR_VAR 0 3
52960: PUSH
52961: LD_INT 0
52963: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
52964: LD_VAR 0 1
52968: NOT
52969: IFTRUE 52994
52971: PUSH
52972: LD_VAR 0 1
52976: PPUSH
52977: CALL_OW 266
52981: PUSH
52982: LD_INT 32
52984: PUSH
52985: LD_INT 33
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: IN
52992: NOT
52993: OR
52994: IFFALSE 52998
// exit ;
52996: GO 54133
// nat := GetNation ( tower ) ;
52998: LD_ADDR_VAR 0 12
53002: PUSH
53003: LD_VAR 0 1
53007: PPUSH
53008: CALL_OW 248
53012: ST_TO_ADDR
// side := GetSide ( tower ) ;
53013: LD_ADDR_VAR 0 16
53017: PUSH
53018: LD_VAR 0 1
53022: PPUSH
53023: CALL_OW 255
53027: ST_TO_ADDR
// x := GetX ( tower ) ;
53028: LD_ADDR_VAR 0 10
53032: PUSH
53033: LD_VAR 0 1
53037: PPUSH
53038: CALL_OW 250
53042: ST_TO_ADDR
// y := GetY ( tower ) ;
53043: LD_ADDR_VAR 0 11
53047: PUSH
53048: LD_VAR 0 1
53052: PPUSH
53053: CALL_OW 251
53057: ST_TO_ADDR
// if not x or not y then
53058: LD_VAR 0 10
53062: NOT
53063: IFTRUE 53072
53065: PUSH
53066: LD_VAR 0 11
53070: NOT
53071: OR
53072: IFFALSE 53076
// exit ;
53074: GO 54133
// weapon := 0 ;
53076: LD_ADDR_VAR 0 18
53080: PUSH
53081: LD_INT 0
53083: ST_TO_ADDR
// fac_list := [ ] ;
53084: LD_ADDR_VAR 0 17
53088: PUSH
53089: EMPTY
53090: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
53091: LD_ADDR_VAR 0 6
53095: PUSH
53096: LD_VAR 0 1
53100: PPUSH
53101: CALL_OW 274
53105: PPUSH
53106: LD_VAR 0 2
53110: PPUSH
53111: LD_INT 0
53113: PPUSH
53114: CALL 50668 0 3
53118: PPUSH
53119: LD_INT 30
53121: PUSH
53122: LD_INT 3
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PPUSH
53129: CALL_OW 72
53133: ST_TO_ADDR
// if not factories then
53134: LD_VAR 0 6
53138: NOT
53139: IFFALSE 53143
// exit ;
53141: GO 54133
// for i in factories do
53143: LD_ADDR_VAR 0 8
53147: PUSH
53148: LD_VAR 0 6
53152: PUSH
53153: FOR_IN
53154: IFFALSE 53179
// fac_list := fac_list union AvailableWeaponList ( i ) ;
53156: LD_ADDR_VAR 0 17
53160: PUSH
53161: LD_VAR 0 17
53165: PUSH
53166: LD_VAR 0 8
53170: PPUSH
53171: CALL_OW 478
53175: UNION
53176: ST_TO_ADDR
53177: GO 53153
53179: POP
53180: POP
// if not fac_list then
53181: LD_VAR 0 17
53185: NOT
53186: IFFALSE 53190
// exit ;
53188: GO 54133
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
53190: LD_ADDR_VAR 0 5
53194: PUSH
53195: LD_INT 4
53197: PUSH
53198: LD_INT 5
53200: PUSH
53201: LD_INT 9
53203: PUSH
53204: LD_INT 10
53206: PUSH
53207: LD_INT 6
53209: PUSH
53210: LD_INT 7
53212: PUSH
53213: LD_INT 11
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: PUSH
53225: LD_INT 27
53227: PUSH
53228: LD_INT 28
53230: PUSH
53231: LD_INT 26
53233: PUSH
53234: LD_INT 30
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 43
53245: PUSH
53246: LD_INT 44
53248: PUSH
53249: LD_INT 46
53251: PUSH
53252: LD_INT 45
53254: PUSH
53255: LD_INT 47
53257: PUSH
53258: LD_INT 49
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: LIST
53273: PUSH
53274: LD_VAR 0 12
53278: ARRAY
53279: ST_TO_ADDR
// list := list isect fac_list ;
53280: LD_ADDR_VAR 0 5
53284: PUSH
53285: LD_VAR 0 5
53289: PUSH
53290: LD_VAR 0 17
53294: ISECT
53295: ST_TO_ADDR
// if not list then
53296: LD_VAR 0 5
53300: NOT
53301: IFFALSE 53305
// exit ;
53303: GO 54133
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
53305: LD_VAR 0 12
53309: PUSH
53310: LD_INT 3
53312: EQUAL
53313: IFFALSE 53325
53315: PUSH
53316: LD_INT 49
53318: PUSH
53319: LD_VAR 0 5
53323: IN
53324: AND
53325: IFFALSE 53345
53327: PUSH
53328: LD_INT 31
53330: PPUSH
53331: LD_VAR 0 16
53335: PPUSH
53336: CALL_OW 321
53340: PUSH
53341: LD_INT 2
53343: EQUAL
53344: AND
53345: IFFALSE 53405
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
53347: LD_INT 22
53349: PUSH
53350: LD_VAR 0 16
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 35
53361: PUSH
53362: LD_INT 49
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 91
53371: PUSH
53372: LD_VAR 0 1
53376: PUSH
53377: LD_INT 10
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: LIST
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: LIST
53389: PPUSH
53390: CALL_OW 69
53394: NOT
53395: IFFALSE 53405
// weapon := ru_time_lapser ;
53397: LD_ADDR_VAR 0 18
53401: PUSH
53402: LD_INT 49
53404: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
53405: LD_VAR 0 12
53409: PUSH
53410: LD_INT 1
53412: PUSH
53413: LD_INT 2
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: IN
53420: IFFALSE 53444
53422: PUSH
53423: LD_INT 11
53425: PUSH
53426: LD_VAR 0 5
53430: IN
53431: IFTRUE 53443
53433: PUSH
53434: LD_INT 30
53436: PUSH
53437: LD_VAR 0 5
53441: IN
53442: OR
53443: AND
53444: IFFALSE 53464
53446: PUSH
53447: LD_INT 6
53449: PPUSH
53450: LD_VAR 0 16
53454: PPUSH
53455: CALL_OW 321
53459: PUSH
53460: LD_INT 2
53462: EQUAL
53463: AND
53464: IFFALSE 53631
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
53466: LD_INT 22
53468: PUSH
53469: LD_VAR 0 16
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: LD_INT 2
53480: PUSH
53481: LD_INT 35
53483: PUSH
53484: LD_INT 11
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 35
53493: PUSH
53494: LD_INT 30
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 91
53508: PUSH
53509: LD_VAR 0 1
53513: PUSH
53514: LD_INT 18
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: LIST
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: LIST
53526: PPUSH
53527: CALL_OW 69
53531: NOT
53532: IFFALSE 53608
53534: PUSH
53535: LD_INT 22
53537: PUSH
53538: LD_VAR 0 16
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 2
53549: PUSH
53550: LD_INT 30
53552: PUSH
53553: LD_INT 32
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 30
53562: PUSH
53563: LD_INT 33
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 91
53577: PUSH
53578: LD_VAR 0 1
53582: PUSH
53583: LD_INT 12
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: LIST
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: LIST
53595: PUSH
53596: EMPTY
53597: LIST
53598: PPUSH
53599: CALL_OW 69
53603: PUSH
53604: LD_INT 2
53606: GREATER
53607: AND
53608: IFFALSE 53631
// weapon := [ us_radar , ar_radar ] [ nat ] ;
53610: LD_ADDR_VAR 0 18
53614: PUSH
53615: LD_INT 11
53617: PUSH
53618: LD_INT 30
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_VAR 0 12
53629: ARRAY
53630: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
53631: LD_VAR 0 18
53635: NOT
53636: IFFALSE 53656
53638: PUSH
53639: LD_INT 40
53641: PPUSH
53642: LD_VAR 0 16
53646: PPUSH
53647: CALL_OW 321
53651: PUSH
53652: LD_INT 2
53654: EQUAL
53655: AND
53656: IFFALSE 53692
53658: PUSH
53659: LD_INT 7
53661: PUSH
53662: LD_VAR 0 5
53666: IN
53667: IFTRUE 53679
53669: PUSH
53670: LD_INT 28
53672: PUSH
53673: LD_VAR 0 5
53677: IN
53678: OR
53679: IFTRUE 53691
53681: PUSH
53682: LD_INT 45
53684: PUSH
53685: LD_VAR 0 5
53689: IN
53690: OR
53691: AND
53692: IFFALSE 53946
// begin hex := GetHexInfo ( x , y ) ;
53694: LD_ADDR_VAR 0 4
53698: PUSH
53699: LD_VAR 0 10
53703: PPUSH
53704: LD_VAR 0 11
53708: PPUSH
53709: CALL_OW 546
53713: ST_TO_ADDR
// if hex [ 1 ] then
53714: LD_VAR 0 4
53718: PUSH
53719: LD_INT 1
53721: ARRAY
53722: IFFALSE 53726
// exit ;
53724: GO 54133
// height := hex [ 2 ] ;
53726: LD_ADDR_VAR 0 15
53730: PUSH
53731: LD_VAR 0 4
53735: PUSH
53736: LD_INT 2
53738: ARRAY
53739: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
53740: LD_ADDR_VAR 0 14
53744: PUSH
53745: LD_INT 0
53747: PUSH
53748: LD_INT 2
53750: PUSH
53751: LD_INT 3
53753: PUSH
53754: LD_INT 5
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: ST_TO_ADDR
// for i in tmp do
53763: LD_ADDR_VAR 0 8
53767: PUSH
53768: LD_VAR 0 14
53772: PUSH
53773: FOR_IN
53774: IFFALSE 53944
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
53776: LD_ADDR_VAR 0 9
53780: PUSH
53781: LD_VAR 0 10
53785: PPUSH
53786: LD_VAR 0 8
53790: PPUSH
53791: LD_INT 5
53793: PPUSH
53794: CALL_OW 272
53798: PUSH
53799: LD_VAR 0 11
53803: PPUSH
53804: LD_VAR 0 8
53808: PPUSH
53809: LD_INT 5
53811: PPUSH
53812: CALL_OW 273
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
53821: LD_VAR 0 9
53825: PUSH
53826: LD_INT 1
53828: ARRAY
53829: PPUSH
53830: LD_VAR 0 9
53834: PUSH
53835: LD_INT 2
53837: ARRAY
53838: PPUSH
53839: CALL_OW 488
53843: IFFALSE 53942
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
53845: LD_ADDR_VAR 0 4
53849: PUSH
53850: LD_VAR 0 9
53854: PUSH
53855: LD_INT 1
53857: ARRAY
53858: PPUSH
53859: LD_VAR 0 9
53863: PUSH
53864: LD_INT 2
53866: ARRAY
53867: PPUSH
53868: CALL_OW 546
53872: ST_TO_ADDR
// if hex [ 1 ] then
53873: LD_VAR 0 4
53877: PUSH
53878: LD_INT 1
53880: ARRAY
53881: IFFALSE 53885
// continue ;
53883: GO 53773
// h := hex [ 2 ] ;
53885: LD_ADDR_VAR 0 13
53889: PUSH
53890: LD_VAR 0 4
53894: PUSH
53895: LD_INT 2
53897: ARRAY
53898: ST_TO_ADDR
// if h + 7 < height then
53899: LD_VAR 0 13
53903: PUSH
53904: LD_INT 7
53906: PLUS
53907: PUSH
53908: LD_VAR 0 15
53912: LESS
53913: IFFALSE 53942
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
53915: LD_ADDR_VAR 0 18
53919: PUSH
53920: LD_INT 7
53922: PUSH
53923: LD_INT 28
53925: PUSH
53926: LD_INT 45
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: LIST
53933: PUSH
53934: LD_VAR 0 12
53938: ARRAY
53939: ST_TO_ADDR
// break ;
53940: GO 53944
// end ; end ; end ;
53942: GO 53773
53944: POP
53945: POP
// end ; if not weapon then
53946: LD_VAR 0 18
53950: NOT
53951: IFFALSE 54011
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
53953: LD_ADDR_VAR 0 5
53957: PUSH
53958: LD_VAR 0 5
53962: PUSH
53963: LD_INT 11
53965: PUSH
53966: LD_INT 30
53968: PUSH
53969: LD_INT 49
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: LIST
53976: DIFF
53977: ST_TO_ADDR
// if not list then
53978: LD_VAR 0 5
53982: NOT
53983: IFFALSE 53987
// exit ;
53985: GO 54133
// weapon := list [ rand ( 1 , list ) ] ;
53987: LD_ADDR_VAR 0 18
53991: PUSH
53992: LD_VAR 0 5
53996: PUSH
53997: LD_INT 1
53999: PPUSH
54000: LD_VAR 0 5
54004: PPUSH
54005: CALL_OW 12
54009: ARRAY
54010: ST_TO_ADDR
// end ; if weapon then
54011: LD_VAR 0 18
54015: IFFALSE 54133
// begin tmp := CostOfWeapon ( weapon ) ;
54017: LD_ADDR_VAR 0 14
54021: PUSH
54022: LD_VAR 0 18
54026: PPUSH
54027: CALL_OW 451
54031: ST_TO_ADDR
// j := GetBase ( tower ) ;
54032: LD_ADDR_VAR 0 9
54036: PUSH
54037: LD_VAR 0 1
54041: PPUSH
54042: CALL_OW 274
54046: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
54047: LD_VAR 0 9
54051: PPUSH
54052: LD_INT 1
54054: PPUSH
54055: CALL_OW 275
54059: PUSH
54060: LD_VAR 0 14
54064: PUSH
54065: LD_INT 1
54067: ARRAY
54068: GREATEREQUAL
54069: IFFALSE 54095
54071: PUSH
54072: LD_VAR 0 9
54076: PPUSH
54077: LD_INT 2
54079: PPUSH
54080: CALL_OW 275
54084: PUSH
54085: LD_VAR 0 14
54089: PUSH
54090: LD_INT 2
54092: ARRAY
54093: GREATEREQUAL
54094: AND
54095: IFFALSE 54121
54097: PUSH
54098: LD_VAR 0 9
54102: PPUSH
54103: LD_INT 3
54105: PPUSH
54106: CALL_OW 275
54110: PUSH
54111: LD_VAR 0 14
54115: PUSH
54116: LD_INT 3
54118: ARRAY
54119: GREATEREQUAL
54120: AND
54121: IFFALSE 54133
// result := weapon ;
54123: LD_ADDR_VAR 0 3
54127: PUSH
54128: LD_VAR 0 18
54132: ST_TO_ADDR
// end ; end ;
54133: LD_VAR 0 3
54137: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
54138: LD_INT 0
54140: PPUSH
54141: PPUSH
// result := true ;
54142: LD_ADDR_VAR 0 3
54146: PUSH
54147: LD_INT 1
54149: ST_TO_ADDR
// if array1 = array2 then
54150: LD_VAR 0 1
54154: PUSH
54155: LD_VAR 0 2
54159: EQUAL
54160: IFFALSE 54220
// begin for i = 1 to array1 do
54162: LD_ADDR_VAR 0 4
54166: PUSH
54167: DOUBLE
54168: LD_INT 1
54170: DEC
54171: ST_TO_ADDR
54172: LD_VAR 0 1
54176: PUSH
54177: FOR_TO
54178: IFFALSE 54216
// if array1 [ i ] <> array2 [ i ] then
54180: LD_VAR 0 1
54184: PUSH
54185: LD_VAR 0 4
54189: ARRAY
54190: PUSH
54191: LD_VAR 0 2
54195: PUSH
54196: LD_VAR 0 4
54200: ARRAY
54201: NONEQUAL
54202: IFFALSE 54214
// begin result := false ;
54204: LD_ADDR_VAR 0 3
54208: PUSH
54209: LD_INT 0
54211: ST_TO_ADDR
// break ;
54212: GO 54216
// end ;
54214: GO 54177
54216: POP
54217: POP
// end else
54218: GO 54228
// result := false ;
54220: LD_ADDR_VAR 0 3
54224: PUSH
54225: LD_INT 0
54227: ST_TO_ADDR
// end ;
54228: LD_VAR 0 3
54232: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
54233: LD_INT 0
54235: PPUSH
54236: PPUSH
// if not array1 or not array2 then
54237: LD_VAR 0 1
54241: NOT
54242: IFTRUE 54251
54244: PUSH
54245: LD_VAR 0 2
54249: NOT
54250: OR
54251: IFFALSE 54255
// exit ;
54253: GO 54319
// result := true ;
54255: LD_ADDR_VAR 0 3
54259: PUSH
54260: LD_INT 1
54262: ST_TO_ADDR
// for i = 1 to array1 do
54263: LD_ADDR_VAR 0 4
54267: PUSH
54268: DOUBLE
54269: LD_INT 1
54271: DEC
54272: ST_TO_ADDR
54273: LD_VAR 0 1
54277: PUSH
54278: FOR_TO
54279: IFFALSE 54317
// if array1 [ i ] <> array2 [ i ] then
54281: LD_VAR 0 1
54285: PUSH
54286: LD_VAR 0 4
54290: ARRAY
54291: PUSH
54292: LD_VAR 0 2
54296: PUSH
54297: LD_VAR 0 4
54301: ARRAY
54302: NONEQUAL
54303: IFFALSE 54315
// begin result := false ;
54305: LD_ADDR_VAR 0 3
54309: PUSH
54310: LD_INT 0
54312: ST_TO_ADDR
// break ;
54313: GO 54317
// end ;
54315: GO 54278
54317: POP
54318: POP
// end ;
54319: LD_VAR 0 3
54323: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
54324: LD_INT 0
54326: PPUSH
54327: PPUSH
54328: PPUSH
// pom := GetBase ( fac ) ;
54329: LD_ADDR_VAR 0 5
54333: PUSH
54334: LD_VAR 0 1
54338: PPUSH
54339: CALL_OW 274
54343: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
54344: LD_ADDR_VAR 0 4
54348: PUSH
54349: LD_VAR 0 2
54353: PUSH
54354: LD_INT 1
54356: ARRAY
54357: PPUSH
54358: LD_VAR 0 2
54362: PUSH
54363: LD_INT 2
54365: ARRAY
54366: PPUSH
54367: LD_VAR 0 2
54371: PUSH
54372: LD_INT 3
54374: ARRAY
54375: PPUSH
54376: LD_VAR 0 2
54380: PUSH
54381: LD_INT 4
54383: ARRAY
54384: PPUSH
54385: CALL_OW 449
54389: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
54390: LD_ADDR_VAR 0 3
54394: PUSH
54395: LD_VAR 0 5
54399: PPUSH
54400: LD_INT 1
54402: PPUSH
54403: CALL_OW 275
54407: PUSH
54408: LD_VAR 0 4
54412: PUSH
54413: LD_INT 1
54415: ARRAY
54416: GREATEREQUAL
54417: IFFALSE 54443
54419: PUSH
54420: LD_VAR 0 5
54424: PPUSH
54425: LD_INT 2
54427: PPUSH
54428: CALL_OW 275
54432: PUSH
54433: LD_VAR 0 4
54437: PUSH
54438: LD_INT 2
54440: ARRAY
54441: GREATEREQUAL
54442: AND
54443: IFFALSE 54469
54445: PUSH
54446: LD_VAR 0 5
54450: PPUSH
54451: LD_INT 3
54453: PPUSH
54454: CALL_OW 275
54458: PUSH
54459: LD_VAR 0 4
54463: PUSH
54464: LD_INT 3
54466: ARRAY
54467: GREATEREQUAL
54468: AND
54469: ST_TO_ADDR
// end ;
54470: LD_VAR 0 3
54474: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
54475: LD_INT 0
54477: PPUSH
54478: PPUSH
54479: PPUSH
54480: PPUSH
// pom := GetBase ( building ) ;
54481: LD_ADDR_VAR 0 3
54485: PUSH
54486: LD_VAR 0 1
54490: PPUSH
54491: CALL_OW 274
54495: ST_TO_ADDR
// if not pom then
54496: LD_VAR 0 3
54500: NOT
54501: IFFALSE 54505
// exit ;
54503: GO 54679
// btype := GetBType ( building ) ;
54505: LD_ADDR_VAR 0 5
54509: PUSH
54510: LD_VAR 0 1
54514: PPUSH
54515: CALL_OW 266
54519: ST_TO_ADDR
// if btype = b_armoury then
54520: LD_VAR 0 5
54524: PUSH
54525: LD_INT 4
54527: EQUAL
54528: IFFALSE 54538
// btype := b_barracks ;
54530: LD_ADDR_VAR 0 5
54534: PUSH
54535: LD_INT 5
54537: ST_TO_ADDR
// if btype = b_depot then
54538: LD_VAR 0 5
54542: PUSH
54543: LD_INT 0
54545: EQUAL
54546: IFFALSE 54556
// btype := b_warehouse ;
54548: LD_ADDR_VAR 0 5
54552: PUSH
54553: LD_INT 1
54555: ST_TO_ADDR
// if btype = b_workshop then
54556: LD_VAR 0 5
54560: PUSH
54561: LD_INT 2
54563: EQUAL
54564: IFFALSE 54574
// btype := b_factory ;
54566: LD_ADDR_VAR 0 5
54570: PUSH
54571: LD_INT 3
54573: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
54574: LD_ADDR_VAR 0 4
54578: PUSH
54579: LD_VAR 0 5
54583: PPUSH
54584: LD_VAR 0 1
54588: PPUSH
54589: CALL_OW 248
54593: PPUSH
54594: CALL_OW 450
54598: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
54599: LD_ADDR_VAR 0 2
54603: PUSH
54604: LD_VAR 0 3
54608: PPUSH
54609: LD_INT 1
54611: PPUSH
54612: CALL_OW 275
54616: PUSH
54617: LD_VAR 0 4
54621: PUSH
54622: LD_INT 1
54624: ARRAY
54625: GREATEREQUAL
54626: IFFALSE 54652
54628: PUSH
54629: LD_VAR 0 3
54633: PPUSH
54634: LD_INT 2
54636: PPUSH
54637: CALL_OW 275
54641: PUSH
54642: LD_VAR 0 4
54646: PUSH
54647: LD_INT 2
54649: ARRAY
54650: GREATEREQUAL
54651: AND
54652: IFFALSE 54678
54654: PUSH
54655: LD_VAR 0 3
54659: PPUSH
54660: LD_INT 3
54662: PPUSH
54663: CALL_OW 275
54667: PUSH
54668: LD_VAR 0 4
54672: PUSH
54673: LD_INT 3
54675: ARRAY
54676: GREATEREQUAL
54677: AND
54678: ST_TO_ADDR
// end ;
54679: LD_VAR 0 2
54683: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
54684: LD_INT 0
54686: PPUSH
54687: PPUSH
54688: PPUSH
// pom := GetBase ( building ) ;
54689: LD_ADDR_VAR 0 4
54693: PUSH
54694: LD_VAR 0 1
54698: PPUSH
54699: CALL_OW 274
54703: ST_TO_ADDR
// if not pom then
54704: LD_VAR 0 4
54708: NOT
54709: IFFALSE 54713
// exit ;
54711: GO 54818
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
54713: LD_ADDR_VAR 0 5
54717: PUSH
54718: LD_VAR 0 2
54722: PPUSH
54723: LD_VAR 0 1
54727: PPUSH
54728: CALL_OW 248
54732: PPUSH
54733: CALL_OW 450
54737: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
54738: LD_ADDR_VAR 0 3
54742: PUSH
54743: LD_VAR 0 4
54747: PPUSH
54748: LD_INT 1
54750: PPUSH
54751: CALL_OW 275
54755: PUSH
54756: LD_VAR 0 5
54760: PUSH
54761: LD_INT 1
54763: ARRAY
54764: GREATEREQUAL
54765: IFFALSE 54791
54767: PUSH
54768: LD_VAR 0 4
54772: PPUSH
54773: LD_INT 2
54775: PPUSH
54776: CALL_OW 275
54780: PUSH
54781: LD_VAR 0 5
54785: PUSH
54786: LD_INT 2
54788: ARRAY
54789: GREATEREQUAL
54790: AND
54791: IFFALSE 54817
54793: PUSH
54794: LD_VAR 0 4
54798: PPUSH
54799: LD_INT 3
54801: PPUSH
54802: CALL_OW 275
54806: PUSH
54807: LD_VAR 0 5
54811: PUSH
54812: LD_INT 3
54814: ARRAY
54815: GREATEREQUAL
54816: AND
54817: ST_TO_ADDR
// end ;
54818: LD_VAR 0 3
54822: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
54823: LD_INT 0
54825: PPUSH
54826: PPUSH
54827: PPUSH
54828: PPUSH
54829: PPUSH
54830: PPUSH
54831: PPUSH
54832: PPUSH
54833: PPUSH
54834: PPUSH
54835: PPUSH
// result := false ;
54836: LD_ADDR_VAR 0 8
54840: PUSH
54841: LD_INT 0
54843: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
54844: LD_VAR 0 5
54848: NOT
54849: IFTRUE 54858
54851: PUSH
54852: LD_VAR 0 1
54856: NOT
54857: OR
54858: IFTRUE 54867
54860: PUSH
54861: LD_VAR 0 2
54865: NOT
54866: OR
54867: IFTRUE 54876
54869: PUSH
54870: LD_VAR 0 3
54874: NOT
54875: OR
54876: IFFALSE 54880
// exit ;
54878: GO 55706
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
54880: LD_ADDR_VAR 0 14
54884: PUSH
54885: LD_VAR 0 1
54889: PPUSH
54890: LD_VAR 0 2
54894: PPUSH
54895: LD_VAR 0 3
54899: PPUSH
54900: LD_VAR 0 4
54904: PPUSH
54905: LD_VAR 0 5
54909: PUSH
54910: LD_INT 1
54912: ARRAY
54913: PPUSH
54914: CALL_OW 248
54918: PPUSH
54919: LD_INT 0
54921: PPUSH
54922: CALL 56987 0 6
54926: ST_TO_ADDR
// if not hexes then
54927: LD_VAR 0 14
54931: NOT
54932: IFFALSE 54936
// exit ;
54934: GO 55706
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
54936: LD_ADDR_VAR 0 17
54940: PUSH
54941: LD_VAR 0 5
54945: PPUSH
54946: LD_INT 22
54948: PUSH
54949: LD_VAR 0 13
54953: PPUSH
54954: CALL_OW 255
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 2
54965: PUSH
54966: LD_INT 30
54968: PUSH
54969: LD_INT 0
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 30
54978: PUSH
54979: LD_INT 1
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: LIST
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PPUSH
54995: CALL_OW 72
54999: ST_TO_ADDR
// for i = 1 to hexes do
55000: LD_ADDR_VAR 0 9
55004: PUSH
55005: DOUBLE
55006: LD_INT 1
55008: DEC
55009: ST_TO_ADDR
55010: LD_VAR 0 14
55014: PUSH
55015: FOR_TO
55016: IFFALSE 55704
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55018: LD_ADDR_VAR 0 13
55022: PUSH
55023: LD_VAR 0 14
55027: PUSH
55028: LD_VAR 0 9
55032: ARRAY
55033: PUSH
55034: LD_INT 1
55036: ARRAY
55037: PPUSH
55038: LD_VAR 0 14
55042: PUSH
55043: LD_VAR 0 9
55047: ARRAY
55048: PUSH
55049: LD_INT 2
55051: ARRAY
55052: PPUSH
55053: CALL_OW 428
55057: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
55058: LD_VAR 0 14
55062: PUSH
55063: LD_VAR 0 9
55067: ARRAY
55068: PUSH
55069: LD_INT 1
55071: ARRAY
55072: PPUSH
55073: LD_VAR 0 14
55077: PUSH
55078: LD_VAR 0 9
55082: ARRAY
55083: PUSH
55084: LD_INT 2
55086: ARRAY
55087: PPUSH
55088: CALL_OW 351
55092: IFTRUE 55131
55094: PUSH
55095: LD_VAR 0 14
55099: PUSH
55100: LD_VAR 0 9
55104: ARRAY
55105: PUSH
55106: LD_INT 1
55108: ARRAY
55109: PPUSH
55110: LD_VAR 0 14
55114: PUSH
55115: LD_VAR 0 9
55119: ARRAY
55120: PUSH
55121: LD_INT 2
55123: ARRAY
55124: PPUSH
55125: CALL_OW 488
55129: NOT
55130: OR
55131: IFTRUE 55148
55133: PUSH
55134: LD_VAR 0 13
55138: PPUSH
55139: CALL_OW 247
55143: PUSH
55144: LD_INT 3
55146: EQUAL
55147: OR
55148: IFFALSE 55154
// exit ;
55150: POP
55151: POP
55152: GO 55706
// if not tmp then
55154: LD_VAR 0 13
55158: NOT
55159: IFFALSE 55163
// continue ;
55161: GO 55015
// result := true ;
55163: LD_ADDR_VAR 0 8
55167: PUSH
55168: LD_INT 1
55170: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
55171: LD_VAR 0 6
55175: IFFALSE 55192
55177: PUSH
55178: LD_VAR 0 13
55182: PPUSH
55183: CALL_OW 247
55187: PUSH
55188: LD_INT 2
55190: EQUAL
55191: AND
55192: IFFALSE 55209
55194: PUSH
55195: LD_VAR 0 13
55199: PPUSH
55200: CALL_OW 263
55204: PUSH
55205: LD_INT 1
55207: EQUAL
55208: AND
55209: IFFALSE 55373
// begin if IsDrivenBy ( tmp ) then
55211: LD_VAR 0 13
55215: PPUSH
55216: CALL_OW 311
55220: IFFALSE 55224
// continue ;
55222: GO 55015
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
55224: LD_VAR 0 6
55228: PPUSH
55229: LD_INT 3
55231: PUSH
55232: LD_INT 60
55234: PUSH
55235: EMPTY
55236: LIST
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: LD_INT 3
55244: PUSH
55245: LD_INT 55
55247: PUSH
55248: EMPTY
55249: LIST
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PPUSH
55259: CALL_OW 72
55263: IFFALSE 55371
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
55265: LD_ADDR_VAR 0 18
55269: PUSH
55270: LD_VAR 0 6
55274: PPUSH
55275: LD_INT 3
55277: PUSH
55278: LD_INT 60
55280: PUSH
55281: EMPTY
55282: LIST
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PUSH
55288: LD_INT 3
55290: PUSH
55291: LD_INT 55
55293: PUSH
55294: EMPTY
55295: LIST
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PPUSH
55305: CALL_OW 72
55309: PUSH
55310: LD_INT 1
55312: ARRAY
55313: ST_TO_ADDR
// if IsInUnit ( driver ) then
55314: LD_VAR 0 18
55318: PPUSH
55319: CALL_OW 310
55323: IFFALSE 55334
// ComExit ( driver ) ;
55325: LD_VAR 0 18
55329: PPUSH
55330: CALL 80987 0 1
// AddComEnterUnit ( driver , tmp ) ;
55334: LD_VAR 0 18
55338: PPUSH
55339: LD_VAR 0 13
55343: PPUSH
55344: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
55348: LD_VAR 0 18
55352: PPUSH
55353: LD_VAR 0 7
55357: PPUSH
55358: CALL_OW 173
// AddComExitVehicle ( driver ) ;
55362: LD_VAR 0 18
55366: PPUSH
55367: CALL_OW 181
// end ; continue ;
55371: GO 55015
// end ; if not cleaners or not tmp in cleaners then
55373: LD_VAR 0 6
55377: NOT
55378: IFTRUE 55393
55380: PUSH
55381: LD_VAR 0 13
55385: PUSH
55386: LD_VAR 0 6
55390: IN
55391: NOT
55392: OR
55393: IFFALSE 55702
// begin if dep then
55395: LD_VAR 0 17
55399: IFFALSE 55535
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
55401: LD_ADDR_VAR 0 16
55405: PUSH
55406: LD_VAR 0 17
55410: PUSH
55411: LD_INT 1
55413: ARRAY
55414: PPUSH
55415: CALL_OW 250
55419: PPUSH
55420: LD_VAR 0 17
55424: PUSH
55425: LD_INT 1
55427: ARRAY
55428: PPUSH
55429: CALL_OW 254
55433: PPUSH
55434: LD_INT 5
55436: PPUSH
55437: CALL_OW 272
55441: PUSH
55442: LD_VAR 0 17
55446: PUSH
55447: LD_INT 1
55449: ARRAY
55450: PPUSH
55451: CALL_OW 251
55455: PPUSH
55456: LD_VAR 0 17
55460: PUSH
55461: LD_INT 1
55463: ARRAY
55464: PPUSH
55465: CALL_OW 254
55469: PPUSH
55470: LD_INT 5
55472: PPUSH
55473: CALL_OW 273
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
55482: LD_VAR 0 16
55486: PUSH
55487: LD_INT 1
55489: ARRAY
55490: PPUSH
55491: LD_VAR 0 16
55495: PUSH
55496: LD_INT 2
55498: ARRAY
55499: PPUSH
55500: CALL_OW 488
55504: IFFALSE 55535
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
55506: LD_VAR 0 13
55510: PPUSH
55511: LD_VAR 0 16
55515: PUSH
55516: LD_INT 1
55518: ARRAY
55519: PPUSH
55520: LD_VAR 0 16
55524: PUSH
55525: LD_INT 2
55527: ARRAY
55528: PPUSH
55529: CALL_OW 111
// continue ;
55533: GO 55015
// end ; end ; r := GetDir ( tmp ) ;
55535: LD_ADDR_VAR 0 15
55539: PUSH
55540: LD_VAR 0 13
55544: PPUSH
55545: CALL_OW 254
55549: ST_TO_ADDR
// if r = 5 then
55550: LD_VAR 0 15
55554: PUSH
55555: LD_INT 5
55557: EQUAL
55558: IFFALSE 55568
// r := 0 ;
55560: LD_ADDR_VAR 0 15
55564: PUSH
55565: LD_INT 0
55567: ST_TO_ADDR
// for j = r to 5 do
55568: LD_ADDR_VAR 0 10
55572: PUSH
55573: DOUBLE
55574: LD_VAR 0 15
55578: DEC
55579: ST_TO_ADDR
55580: LD_INT 5
55582: PUSH
55583: FOR_TO
55584: IFFALSE 55700
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
55586: LD_ADDR_VAR 0 11
55590: PUSH
55591: LD_VAR 0 13
55595: PPUSH
55596: CALL_OW 250
55600: PPUSH
55601: LD_VAR 0 10
55605: PPUSH
55606: LD_INT 2
55608: PPUSH
55609: CALL_OW 272
55613: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
55614: LD_ADDR_VAR 0 12
55618: PUSH
55619: LD_VAR 0 13
55623: PPUSH
55624: CALL_OW 251
55628: PPUSH
55629: LD_VAR 0 10
55633: PPUSH
55634: LD_INT 2
55636: PPUSH
55637: CALL_OW 273
55641: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
55642: LD_VAR 0 11
55646: PPUSH
55647: LD_VAR 0 12
55651: PPUSH
55652: CALL_OW 488
55656: IFFALSE 55675
55658: PUSH
55659: LD_VAR 0 11
55663: PPUSH
55664: LD_VAR 0 12
55668: PPUSH
55669: CALL_OW 428
55673: NOT
55674: AND
55675: IFFALSE 55698
// begin ComMoveXY ( tmp , _x , _y ) ;
55677: LD_VAR 0 13
55681: PPUSH
55682: LD_VAR 0 11
55686: PPUSH
55687: LD_VAR 0 12
55691: PPUSH
55692: CALL_OW 111
// break ;
55696: GO 55700
// end ; end ;
55698: GO 55583
55700: POP
55701: POP
// end ; end ;
55702: GO 55015
55704: POP
55705: POP
// end ;
55706: LD_VAR 0 8
55710: RET
// export function BuildingTechInvented ( side , btype ) ; begin
55711: LD_INT 0
55713: PPUSH
// result := true ;
55714: LD_ADDR_VAR 0 3
55718: PUSH
55719: LD_INT 1
55721: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
55722: LD_VAR 0 2
55726: PUSH
55727: LD_INT 24
55729: DOUBLE
55730: EQUAL
55731: IFTRUE 55741
55733: LD_INT 33
55735: DOUBLE
55736: EQUAL
55737: IFTRUE 55741
55739: GO 55766
55741: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
55742: LD_ADDR_VAR 0 3
55746: PUSH
55747: LD_INT 32
55749: PPUSH
55750: LD_VAR 0 1
55754: PPUSH
55755: CALL_OW 321
55759: PUSH
55760: LD_INT 2
55762: EQUAL
55763: ST_TO_ADDR
55764: GO 56082
55766: LD_INT 20
55768: DOUBLE
55769: EQUAL
55770: IFTRUE 55774
55772: GO 55799
55774: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
55775: LD_ADDR_VAR 0 3
55779: PUSH
55780: LD_INT 6
55782: PPUSH
55783: LD_VAR 0 1
55787: PPUSH
55788: CALL_OW 321
55792: PUSH
55793: LD_INT 2
55795: EQUAL
55796: ST_TO_ADDR
55797: GO 56082
55799: LD_INT 22
55801: DOUBLE
55802: EQUAL
55803: IFTRUE 55813
55805: LD_INT 36
55807: DOUBLE
55808: EQUAL
55809: IFTRUE 55813
55811: GO 55838
55813: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
55814: LD_ADDR_VAR 0 3
55818: PUSH
55819: LD_INT 15
55821: PPUSH
55822: LD_VAR 0 1
55826: PPUSH
55827: CALL_OW 321
55831: PUSH
55832: LD_INT 2
55834: EQUAL
55835: ST_TO_ADDR
55836: GO 56082
55838: LD_INT 30
55840: DOUBLE
55841: EQUAL
55842: IFTRUE 55846
55844: GO 55871
55846: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
55847: LD_ADDR_VAR 0 3
55851: PUSH
55852: LD_INT 20
55854: PPUSH
55855: LD_VAR 0 1
55859: PPUSH
55860: CALL_OW 321
55864: PUSH
55865: LD_INT 2
55867: EQUAL
55868: ST_TO_ADDR
55869: GO 56082
55871: LD_INT 28
55873: DOUBLE
55874: EQUAL
55875: IFTRUE 55885
55877: LD_INT 21
55879: DOUBLE
55880: EQUAL
55881: IFTRUE 55885
55883: GO 55910
55885: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
55886: LD_ADDR_VAR 0 3
55890: PUSH
55891: LD_INT 21
55893: PPUSH
55894: LD_VAR 0 1
55898: PPUSH
55899: CALL_OW 321
55903: PUSH
55904: LD_INT 2
55906: EQUAL
55907: ST_TO_ADDR
55908: GO 56082
55910: LD_INT 16
55912: DOUBLE
55913: EQUAL
55914: IFTRUE 55918
55916: GO 55943
55918: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
55919: LD_ADDR_VAR 0 3
55923: PUSH
55924: LD_INT 84
55926: PPUSH
55927: LD_VAR 0 1
55931: PPUSH
55932: CALL_OW 321
55936: PUSH
55937: LD_INT 2
55939: EQUAL
55940: ST_TO_ADDR
55941: GO 56082
55943: LD_INT 19
55945: DOUBLE
55946: EQUAL
55947: IFTRUE 55957
55949: LD_INT 23
55951: DOUBLE
55952: EQUAL
55953: IFTRUE 55957
55955: GO 55982
55957: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
55958: LD_ADDR_VAR 0 3
55962: PUSH
55963: LD_INT 83
55965: PPUSH
55966: LD_VAR 0 1
55970: PPUSH
55971: CALL_OW 321
55975: PUSH
55976: LD_INT 2
55978: EQUAL
55979: ST_TO_ADDR
55980: GO 56082
55982: LD_INT 17
55984: DOUBLE
55985: EQUAL
55986: IFTRUE 55990
55988: GO 56015
55990: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
55991: LD_ADDR_VAR 0 3
55995: PUSH
55996: LD_INT 39
55998: PPUSH
55999: LD_VAR 0 1
56003: PPUSH
56004: CALL_OW 321
56008: PUSH
56009: LD_INT 2
56011: EQUAL
56012: ST_TO_ADDR
56013: GO 56082
56015: LD_INT 18
56017: DOUBLE
56018: EQUAL
56019: IFTRUE 56023
56021: GO 56048
56023: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
56024: LD_ADDR_VAR 0 3
56028: PUSH
56029: LD_INT 40
56031: PPUSH
56032: LD_VAR 0 1
56036: PPUSH
56037: CALL_OW 321
56041: PUSH
56042: LD_INT 2
56044: EQUAL
56045: ST_TO_ADDR
56046: GO 56082
56048: LD_INT 27
56050: DOUBLE
56051: EQUAL
56052: IFTRUE 56056
56054: GO 56081
56056: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
56057: LD_ADDR_VAR 0 3
56061: PUSH
56062: LD_INT 35
56064: PPUSH
56065: LD_VAR 0 1
56069: PPUSH
56070: CALL_OW 321
56074: PUSH
56075: LD_INT 2
56077: EQUAL
56078: ST_TO_ADDR
56079: GO 56082
56081: POP
// end ;
56082: LD_VAR 0 3
56086: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
56087: LD_INT 0
56089: PPUSH
56090: PPUSH
56091: PPUSH
56092: PPUSH
56093: PPUSH
56094: PPUSH
56095: PPUSH
56096: PPUSH
56097: PPUSH
56098: PPUSH
56099: PPUSH
// result := false ;
56100: LD_ADDR_VAR 0 6
56104: PUSH
56105: LD_INT 0
56107: ST_TO_ADDR
// if btype = b_depot then
56108: LD_VAR 0 2
56112: PUSH
56113: LD_INT 0
56115: EQUAL
56116: IFFALSE 56128
// begin result := true ;
56118: LD_ADDR_VAR 0 6
56122: PUSH
56123: LD_INT 1
56125: ST_TO_ADDR
// exit ;
56126: GO 56982
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
56128: LD_VAR 0 1
56132: NOT
56133: IFTRUE 56158
56135: PUSH
56136: LD_VAR 0 1
56140: PPUSH
56141: CALL_OW 266
56145: PUSH
56146: LD_INT 0
56148: PUSH
56149: LD_INT 1
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: IN
56156: NOT
56157: OR
56158: IFTRUE 56167
56160: PUSH
56161: LD_VAR 0 2
56165: NOT
56166: OR
56167: IFTRUE 56203
56169: PUSH
56170: LD_VAR 0 5
56174: PUSH
56175: LD_INT 0
56177: PUSH
56178: LD_INT 1
56180: PUSH
56181: LD_INT 2
56183: PUSH
56184: LD_INT 3
56186: PUSH
56187: LD_INT 4
56189: PUSH
56190: LD_INT 5
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: LIST
56197: LIST
56198: LIST
56199: LIST
56200: IN
56201: NOT
56202: OR
56203: IFTRUE 56222
56205: PUSH
56206: LD_VAR 0 3
56210: PPUSH
56211: LD_VAR 0 4
56215: PPUSH
56216: CALL_OW 488
56220: NOT
56221: OR
56222: IFFALSE 56226
// exit ;
56224: GO 56982
// side := GetSide ( depot ) ;
56226: LD_ADDR_VAR 0 9
56230: PUSH
56231: LD_VAR 0 1
56235: PPUSH
56236: CALL_OW 255
56240: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
56241: LD_VAR 0 9
56245: PPUSH
56246: LD_VAR 0 2
56250: PPUSH
56251: CALL 55711 0 2
56255: NOT
56256: IFFALSE 56260
// exit ;
56258: GO 56982
// pom := GetBase ( depot ) ;
56260: LD_ADDR_VAR 0 10
56264: PUSH
56265: LD_VAR 0 1
56269: PPUSH
56270: CALL_OW 274
56274: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
56275: LD_ADDR_VAR 0 11
56279: PUSH
56280: LD_VAR 0 2
56284: PPUSH
56285: LD_VAR 0 1
56289: PPUSH
56290: CALL_OW 248
56294: PPUSH
56295: CALL_OW 450
56299: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
56300: LD_VAR 0 10
56304: PPUSH
56305: LD_INT 1
56307: PPUSH
56308: CALL_OW 275
56312: PUSH
56313: LD_VAR 0 11
56317: PUSH
56318: LD_INT 1
56320: ARRAY
56321: GREATEREQUAL
56322: IFFALSE 56348
56324: PUSH
56325: LD_VAR 0 10
56329: PPUSH
56330: LD_INT 2
56332: PPUSH
56333: CALL_OW 275
56337: PUSH
56338: LD_VAR 0 11
56342: PUSH
56343: LD_INT 2
56345: ARRAY
56346: GREATEREQUAL
56347: AND
56348: IFFALSE 56374
56350: PUSH
56351: LD_VAR 0 10
56355: PPUSH
56356: LD_INT 3
56358: PPUSH
56359: CALL_OW 275
56363: PUSH
56364: LD_VAR 0 11
56368: PUSH
56369: LD_INT 3
56371: ARRAY
56372: GREATEREQUAL
56373: AND
56374: NOT
56375: IFFALSE 56379
// exit ;
56377: GO 56982
// if GetBType ( depot ) = b_depot then
56379: LD_VAR 0 1
56383: PPUSH
56384: CALL_OW 266
56388: PUSH
56389: LD_INT 0
56391: EQUAL
56392: IFFALSE 56404
// dist := 28 else
56394: LD_ADDR_VAR 0 14
56398: PUSH
56399: LD_INT 28
56401: ST_TO_ADDR
56402: GO 56412
// dist := 36 ;
56404: LD_ADDR_VAR 0 14
56408: PUSH
56409: LD_INT 36
56411: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
56412: LD_VAR 0 1
56416: PPUSH
56417: LD_VAR 0 3
56421: PPUSH
56422: LD_VAR 0 4
56426: PPUSH
56427: CALL_OW 297
56431: PUSH
56432: LD_VAR 0 14
56436: GREATER
56437: IFFALSE 56441
// exit ;
56439: GO 56982
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
56441: LD_ADDR_VAR 0 12
56445: PUSH
56446: LD_VAR 0 2
56450: PPUSH
56451: LD_VAR 0 3
56455: PPUSH
56456: LD_VAR 0 4
56460: PPUSH
56461: LD_VAR 0 5
56465: PPUSH
56466: LD_VAR 0 1
56470: PPUSH
56471: CALL_OW 248
56475: PPUSH
56476: LD_INT 0
56478: PPUSH
56479: CALL 56987 0 6
56483: ST_TO_ADDR
// if not hexes then
56484: LD_VAR 0 12
56488: NOT
56489: IFFALSE 56493
// exit ;
56491: GO 56982
// hex := GetHexInfo ( x , y ) ;
56493: LD_ADDR_VAR 0 15
56497: PUSH
56498: LD_VAR 0 3
56502: PPUSH
56503: LD_VAR 0 4
56507: PPUSH
56508: CALL_OW 546
56512: ST_TO_ADDR
// if hex [ 1 ] then
56513: LD_VAR 0 15
56517: PUSH
56518: LD_INT 1
56520: ARRAY
56521: IFFALSE 56525
// exit ;
56523: GO 56982
// height := hex [ 2 ] ;
56525: LD_ADDR_VAR 0 13
56529: PUSH
56530: LD_VAR 0 15
56534: PUSH
56535: LD_INT 2
56537: ARRAY
56538: ST_TO_ADDR
// for i = 1 to hexes do
56539: LD_ADDR_VAR 0 7
56543: PUSH
56544: DOUBLE
56545: LD_INT 1
56547: DEC
56548: ST_TO_ADDR
56549: LD_VAR 0 12
56553: PUSH
56554: FOR_TO
56555: IFFALSE 56899
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
56557: LD_VAR 0 12
56561: PUSH
56562: LD_VAR 0 7
56566: ARRAY
56567: PUSH
56568: LD_INT 1
56570: ARRAY
56571: PPUSH
56572: LD_VAR 0 12
56576: PUSH
56577: LD_VAR 0 7
56581: ARRAY
56582: PUSH
56583: LD_INT 2
56585: ARRAY
56586: PPUSH
56587: CALL_OW 488
56591: NOT
56592: IFTRUE 56634
56594: PUSH
56595: LD_VAR 0 12
56599: PUSH
56600: LD_VAR 0 7
56604: ARRAY
56605: PUSH
56606: LD_INT 1
56608: ARRAY
56609: PPUSH
56610: LD_VAR 0 12
56614: PUSH
56615: LD_VAR 0 7
56619: ARRAY
56620: PUSH
56621: LD_INT 2
56623: ARRAY
56624: PPUSH
56625: CALL_OW 428
56629: PUSH
56630: LD_INT 0
56632: GREATER
56633: OR
56634: IFTRUE 56672
56636: PUSH
56637: LD_VAR 0 12
56641: PUSH
56642: LD_VAR 0 7
56646: ARRAY
56647: PUSH
56648: LD_INT 1
56650: ARRAY
56651: PPUSH
56652: LD_VAR 0 12
56656: PUSH
56657: LD_VAR 0 7
56661: ARRAY
56662: PUSH
56663: LD_INT 2
56665: ARRAY
56666: PPUSH
56667: CALL_OW 351
56671: OR
56672: IFFALSE 56678
// exit ;
56674: POP
56675: POP
56676: GO 56982
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56678: LD_ADDR_VAR 0 8
56682: PUSH
56683: LD_VAR 0 12
56687: PUSH
56688: LD_VAR 0 7
56692: ARRAY
56693: PUSH
56694: LD_INT 1
56696: ARRAY
56697: PPUSH
56698: LD_VAR 0 12
56702: PUSH
56703: LD_VAR 0 7
56707: ARRAY
56708: PUSH
56709: LD_INT 2
56711: ARRAY
56712: PPUSH
56713: CALL_OW 546
56717: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
56718: LD_VAR 0 8
56722: PUSH
56723: LD_INT 1
56725: ARRAY
56726: IFTRUE 56748
56728: PUSH
56729: LD_VAR 0 8
56733: PUSH
56734: LD_INT 2
56736: ARRAY
56737: PUSH
56738: LD_VAR 0 13
56742: PUSH
56743: LD_INT 2
56745: PLUS
56746: GREATER
56747: OR
56748: IFTRUE 56770
56750: PUSH
56751: LD_VAR 0 8
56755: PUSH
56756: LD_INT 2
56758: ARRAY
56759: PUSH
56760: LD_VAR 0 13
56764: PUSH
56765: LD_INT 2
56767: MINUS
56768: LESS
56769: OR
56770: IFTRUE 56838
56772: PUSH
56773: LD_VAR 0 8
56777: PUSH
56778: LD_INT 3
56780: ARRAY
56781: PUSH
56782: LD_INT 0
56784: PUSH
56785: LD_INT 8
56787: PUSH
56788: LD_INT 9
56790: PUSH
56791: LD_INT 10
56793: PUSH
56794: LD_INT 11
56796: PUSH
56797: LD_INT 12
56799: PUSH
56800: LD_INT 13
56802: PUSH
56803: LD_INT 16
56805: PUSH
56806: LD_INT 17
56808: PUSH
56809: LD_INT 18
56811: PUSH
56812: LD_INT 19
56814: PUSH
56815: LD_INT 20
56817: PUSH
56818: LD_INT 21
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: LIST
56835: IN
56836: NOT
56837: OR
56838: IFTRUE 56851
56840: PUSH
56841: LD_VAR 0 8
56845: PUSH
56846: LD_INT 5
56848: ARRAY
56849: NOT
56850: OR
56851: IFTRUE 56891
56853: PUSH
56854: LD_VAR 0 8
56858: PUSH
56859: LD_INT 6
56861: ARRAY
56862: PUSH
56863: LD_INT 1
56865: PUSH
56866: LD_INT 2
56868: PUSH
56869: LD_INT 7
56871: PUSH
56872: LD_INT 9
56874: PUSH
56875: LD_INT 10
56877: PUSH
56878: LD_INT 11
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: LIST
56885: LIST
56886: LIST
56887: LIST
56888: IN
56889: NOT
56890: OR
56891: IFFALSE 56897
// exit ;
56893: POP
56894: POP
56895: GO 56982
// end ;
56897: GO 56554
56899: POP
56900: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
56901: LD_VAR 0 9
56905: PPUSH
56906: LD_VAR 0 3
56910: PPUSH
56911: LD_VAR 0 4
56915: PPUSH
56916: LD_INT 20
56918: PPUSH
56919: CALL 48801 0 4
56923: PUSH
56924: LD_INT 4
56926: ARRAY
56927: IFFALSE 56931
// exit ;
56929: GO 56982
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
56931: LD_VAR 0 2
56935: PUSH
56936: LD_INT 29
56938: PUSH
56939: LD_INT 30
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: IN
56946: IFFALSE 56970
56948: PUSH
56949: LD_VAR 0 3
56953: PPUSH
56954: LD_VAR 0 4
56958: PPUSH
56959: LD_VAR 0 9
56963: PPUSH
56964: CALL_OW 440
56968: NOT
56969: AND
56970: IFFALSE 56974
// exit ;
56972: GO 56982
// result := true ;
56974: LD_ADDR_VAR 0 6
56978: PUSH
56979: LD_INT 1
56981: ST_TO_ADDR
// end ;
56982: LD_VAR 0 6
56986: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
56987: LD_INT 0
56989: PPUSH
56990: PPUSH
56991: PPUSH
56992: PPUSH
56993: PPUSH
56994: PPUSH
56995: PPUSH
56996: PPUSH
56997: PPUSH
56998: PPUSH
56999: PPUSH
57000: PPUSH
57001: PPUSH
57002: PPUSH
57003: PPUSH
57004: PPUSH
57005: PPUSH
57006: PPUSH
57007: PPUSH
57008: PPUSH
57009: PPUSH
57010: PPUSH
57011: PPUSH
57012: PPUSH
57013: PPUSH
57014: PPUSH
57015: PPUSH
57016: PPUSH
57017: PPUSH
57018: PPUSH
57019: PPUSH
57020: PPUSH
57021: PPUSH
57022: PPUSH
57023: PPUSH
57024: PPUSH
57025: PPUSH
57026: PPUSH
57027: PPUSH
57028: PPUSH
57029: PPUSH
57030: PPUSH
57031: PPUSH
57032: PPUSH
57033: PPUSH
57034: PPUSH
57035: PPUSH
57036: PPUSH
57037: PPUSH
57038: PPUSH
57039: PPUSH
57040: PPUSH
57041: PPUSH
57042: PPUSH
57043: PPUSH
57044: PPUSH
57045: PPUSH
57046: PPUSH
// result = [ ] ;
57047: LD_ADDR_VAR 0 7
57051: PUSH
57052: EMPTY
57053: ST_TO_ADDR
// temp_list = [ ] ;
57054: LD_ADDR_VAR 0 9
57058: PUSH
57059: EMPTY
57060: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
57061: LD_VAR 0 4
57065: PUSH
57066: LD_INT 0
57068: PUSH
57069: LD_INT 1
57071: PUSH
57072: LD_INT 2
57074: PUSH
57075: LD_INT 3
57077: PUSH
57078: LD_INT 4
57080: PUSH
57081: LD_INT 5
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: IN
57092: NOT
57093: IFTRUE 57136
57095: PUSH
57096: LD_VAR 0 1
57100: PUSH
57101: LD_INT 0
57103: PUSH
57104: LD_INT 1
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: IN
57111: IFFALSE 57135
57113: PUSH
57114: LD_VAR 0 5
57118: PUSH
57119: LD_INT 1
57121: PUSH
57122: LD_INT 2
57124: PUSH
57125: LD_INT 3
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: LIST
57132: IN
57133: NOT
57134: AND
57135: OR
57136: IFFALSE 57140
// exit ;
57138: GO 75539
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
57140: LD_VAR 0 1
57144: PUSH
57145: LD_INT 6
57147: PUSH
57148: LD_INT 7
57150: PUSH
57151: LD_INT 8
57153: PUSH
57154: LD_INT 13
57156: PUSH
57157: LD_INT 12
57159: PUSH
57160: LD_INT 15
57162: PUSH
57163: LD_INT 11
57165: PUSH
57166: LD_INT 14
57168: PUSH
57169: LD_INT 10
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: LIST
57176: LIST
57177: LIST
57178: LIST
57179: LIST
57180: LIST
57181: LIST
57182: IN
57183: IFFALSE 57193
// btype = b_lab ;
57185: LD_ADDR_VAR 0 1
57189: PUSH
57190: LD_INT 6
57192: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
57193: LD_VAR 0 6
57197: PUSH
57198: LD_INT 0
57200: PUSH
57201: LD_INT 1
57203: PUSH
57204: LD_INT 2
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: LIST
57211: IN
57212: NOT
57213: IFTRUE 57281
57215: PUSH
57216: LD_VAR 0 1
57220: PUSH
57221: LD_INT 0
57223: PUSH
57224: LD_INT 1
57226: PUSH
57227: LD_INT 2
57229: PUSH
57230: LD_INT 3
57232: PUSH
57233: LD_INT 6
57235: PUSH
57236: LD_INT 36
57238: PUSH
57239: LD_INT 4
57241: PUSH
57242: LD_INT 5
57244: PUSH
57245: LD_INT 31
57247: PUSH
57248: LD_INT 32
57250: PUSH
57251: LD_INT 33
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: LIST
57258: LIST
57259: LIST
57260: LIST
57261: LIST
57262: LIST
57263: LIST
57264: LIST
57265: LIST
57266: IN
57267: NOT
57268: IFFALSE 57280
57270: PUSH
57271: LD_VAR 0 6
57275: PUSH
57276: LD_INT 1
57278: EQUAL
57279: AND
57280: OR
57281: IFTRUE 57313
57283: PUSH
57284: LD_VAR 0 1
57288: PUSH
57289: LD_INT 2
57291: PUSH
57292: LD_INT 3
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: IN
57299: NOT
57300: IFFALSE 57312
57302: PUSH
57303: LD_VAR 0 6
57307: PUSH
57308: LD_INT 2
57310: EQUAL
57311: AND
57312: OR
57313: IFFALSE 57323
// mode = 0 ;
57315: LD_ADDR_VAR 0 6
57319: PUSH
57320: LD_INT 0
57322: ST_TO_ADDR
// case mode of 0 :
57323: LD_VAR 0 6
57327: PUSH
57328: LD_INT 0
57330: DOUBLE
57331: EQUAL
57332: IFTRUE 57336
57334: GO 68789
57336: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57337: LD_ADDR_VAR 0 11
57341: PUSH
57342: LD_INT 0
57344: PUSH
57345: LD_INT 0
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 0
57354: PUSH
57355: LD_INT 1
57357: NEG
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 1
57365: PUSH
57366: LD_INT 0
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 1
57375: PUSH
57376: LD_INT 1
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 0
57385: PUSH
57386: LD_INT 1
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_INT 1
57395: NEG
57396: PUSH
57397: LD_INT 0
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_INT 1
57406: NEG
57407: PUSH
57408: LD_INT 1
57410: NEG
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: PUSH
57416: LD_INT 1
57418: NEG
57419: PUSH
57420: LD_INT 2
57422: NEG
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 0
57430: PUSH
57431: LD_INT 2
57433: NEG
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 1
57441: PUSH
57442: LD_INT 1
57444: NEG
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PUSH
57450: LD_INT 1
57452: PUSH
57453: LD_INT 2
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 0
57462: PUSH
57463: LD_INT 2
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 1
57472: NEG
57473: PUSH
57474: LD_INT 1
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 1
57483: PUSH
57484: LD_INT 3
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: LD_INT 0
57493: PUSH
57494: LD_INT 3
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 1
57503: NEG
57504: PUSH
57505: LD_INT 2
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: LIST
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57530: LD_ADDR_VAR 0 12
57534: PUSH
57535: LD_INT 0
57537: PUSH
57538: LD_INT 0
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 0
57547: PUSH
57548: LD_INT 1
57550: NEG
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 1
57558: PUSH
57559: LD_INT 0
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 1
57568: PUSH
57569: LD_INT 1
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: LD_INT 0
57578: PUSH
57579: LD_INT 1
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 1
57588: NEG
57589: PUSH
57590: LD_INT 0
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 1
57599: NEG
57600: PUSH
57601: LD_INT 1
57603: NEG
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: LD_INT 1
57611: PUSH
57612: LD_INT 1
57614: NEG
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: LD_INT 2
57622: PUSH
57623: LD_INT 0
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 2
57632: PUSH
57633: LD_INT 1
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: LD_INT 1
57642: NEG
57643: PUSH
57644: LD_INT 1
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: LD_INT 2
57653: NEG
57654: PUSH
57655: LD_INT 0
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: LD_INT 2
57664: NEG
57665: PUSH
57666: LD_INT 1
57668: NEG
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: LD_INT 2
57676: NEG
57677: PUSH
57678: LD_INT 1
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: PUSH
57685: LD_INT 3
57687: NEG
57688: PUSH
57689: LD_INT 0
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: PUSH
57696: LD_INT 3
57698: NEG
57699: PUSH
57700: LD_INT 1
57702: NEG
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: LIST
57712: LIST
57713: LIST
57714: LIST
57715: LIST
57716: LIST
57717: LIST
57718: LIST
57719: LIST
57720: LIST
57721: LIST
57722: LIST
57723: LIST
57724: LIST
57725: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57726: LD_ADDR_VAR 0 13
57730: PUSH
57731: LD_INT 0
57733: PUSH
57734: LD_INT 0
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: LD_INT 0
57743: PUSH
57744: LD_INT 1
57746: NEG
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: LD_INT 1
57754: PUSH
57755: LD_INT 0
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 1
57764: PUSH
57765: LD_INT 1
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 0
57774: PUSH
57775: LD_INT 1
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: LD_INT 1
57784: NEG
57785: PUSH
57786: LD_INT 0
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: PUSH
57793: LD_INT 1
57795: NEG
57796: PUSH
57797: LD_INT 1
57799: NEG
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 1
57807: NEG
57808: PUSH
57809: LD_INT 2
57811: NEG
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: LD_INT 2
57819: PUSH
57820: LD_INT 1
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 2
57829: PUSH
57830: LD_INT 2
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 1
57839: PUSH
57840: LD_INT 2
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: PUSH
57847: LD_INT 2
57849: NEG
57850: PUSH
57851: LD_INT 1
57853: NEG
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: LD_INT 2
57861: NEG
57862: PUSH
57863: LD_INT 2
57865: NEG
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: LD_INT 2
57873: NEG
57874: PUSH
57875: LD_INT 3
57877: NEG
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: PUSH
57883: LD_INT 3
57885: NEG
57886: PUSH
57887: LD_INT 2
57889: NEG
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: PUSH
57895: LD_INT 3
57897: NEG
57898: PUSH
57899: LD_INT 3
57901: NEG
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: LIST
57911: LIST
57912: LIST
57913: LIST
57914: LIST
57915: LIST
57916: LIST
57917: LIST
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: LIST
57923: LIST
57924: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57925: LD_ADDR_VAR 0 14
57929: PUSH
57930: LD_INT 0
57932: PUSH
57933: LD_INT 0
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: LD_INT 0
57942: PUSH
57943: LD_INT 1
57945: NEG
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: LD_INT 1
57953: PUSH
57954: LD_INT 0
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: LD_INT 1
57963: PUSH
57964: LD_INT 1
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: PUSH
57971: LD_INT 0
57973: PUSH
57974: LD_INT 1
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: PUSH
57981: LD_INT 1
57983: NEG
57984: PUSH
57985: LD_INT 0
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: LD_INT 1
57994: NEG
57995: PUSH
57996: LD_INT 1
57998: NEG
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 1
58006: NEG
58007: PUSH
58008: LD_INT 2
58010: NEG
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: LD_INT 0
58018: PUSH
58019: LD_INT 2
58021: NEG
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: LD_INT 1
58029: PUSH
58030: LD_INT 1
58032: NEG
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: LD_INT 1
58040: PUSH
58041: LD_INT 2
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: LD_INT 0
58050: PUSH
58051: LD_INT 2
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: PUSH
58058: LD_INT 1
58060: NEG
58061: PUSH
58062: LD_INT 1
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: LD_INT 1
58071: NEG
58072: PUSH
58073: LD_INT 3
58075: NEG
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 0
58083: PUSH
58084: LD_INT 3
58086: NEG
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 1
58094: PUSH
58095: LD_INT 2
58097: NEG
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: LIST
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: LIST
58115: LIST
58116: LIST
58117: LIST
58118: LIST
58119: LIST
58120: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58121: LD_ADDR_VAR 0 15
58125: PUSH
58126: LD_INT 0
58128: PUSH
58129: LD_INT 0
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 0
58138: PUSH
58139: LD_INT 1
58141: NEG
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 1
58149: PUSH
58150: LD_INT 0
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 1
58159: PUSH
58160: LD_INT 1
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 0
58169: PUSH
58170: LD_INT 1
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 1
58179: NEG
58180: PUSH
58181: LD_INT 0
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: LD_INT 1
58190: NEG
58191: PUSH
58192: LD_INT 1
58194: NEG
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 1
58202: PUSH
58203: LD_INT 1
58205: NEG
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PUSH
58211: LD_INT 2
58213: PUSH
58214: LD_INT 0
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: LD_INT 2
58223: PUSH
58224: LD_INT 1
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 1
58233: NEG
58234: PUSH
58235: LD_INT 1
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: LD_INT 2
58244: NEG
58245: PUSH
58246: LD_INT 0
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: LD_INT 2
58255: NEG
58256: PUSH
58257: LD_INT 1
58259: NEG
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: LD_INT 2
58267: PUSH
58268: LD_INT 1
58270: NEG
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 3
58278: PUSH
58279: LD_INT 0
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 3
58288: PUSH
58289: LD_INT 1
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: LIST
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58314: LD_ADDR_VAR 0 16
58318: PUSH
58319: LD_INT 0
58321: PUSH
58322: LD_INT 0
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: LD_INT 0
58331: PUSH
58332: LD_INT 1
58334: NEG
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 1
58342: PUSH
58343: LD_INT 0
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: LD_INT 1
58352: PUSH
58353: LD_INT 1
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 0
58362: PUSH
58363: LD_INT 1
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: PUSH
58370: LD_INT 1
58372: NEG
58373: PUSH
58374: LD_INT 0
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 1
58383: NEG
58384: PUSH
58385: LD_INT 1
58387: NEG
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 1
58395: NEG
58396: PUSH
58397: LD_INT 2
58399: NEG
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 2
58407: PUSH
58408: LD_INT 1
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 2
58417: PUSH
58418: LD_INT 2
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: PUSH
58425: LD_INT 1
58427: PUSH
58428: LD_INT 2
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: LD_INT 2
58437: NEG
58438: PUSH
58439: LD_INT 1
58441: NEG
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 2
58449: NEG
58450: PUSH
58451: LD_INT 2
58453: NEG
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 3
58461: PUSH
58462: LD_INT 2
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: LD_INT 3
58471: PUSH
58472: LD_INT 3
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 2
58481: PUSH
58482: LD_INT 3
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: LIST
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: LIST
58500: LIST
58501: LIST
58502: LIST
58503: LIST
58504: LIST
58505: LIST
58506: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58507: LD_ADDR_VAR 0 17
58511: PUSH
58512: LD_INT 0
58514: PUSH
58515: LD_INT 0
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 0
58524: PUSH
58525: LD_INT 1
58527: NEG
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: LD_INT 1
58535: PUSH
58536: LD_INT 0
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 1
58545: PUSH
58546: LD_INT 1
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 0
58555: PUSH
58556: LD_INT 1
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: PUSH
58563: LD_INT 1
58565: NEG
58566: PUSH
58567: LD_INT 0
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 1
58576: NEG
58577: PUSH
58578: LD_INT 1
58580: NEG
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 1
58588: NEG
58589: PUSH
58590: LD_INT 2
58592: NEG
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 0
58600: PUSH
58601: LD_INT 2
58603: NEG
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 1
58611: PUSH
58612: LD_INT 1
58614: NEG
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: LD_INT 2
58622: PUSH
58623: LD_INT 0
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: PUSH
58630: LD_INT 2
58632: PUSH
58633: LD_INT 1
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: PUSH
58640: LD_INT 2
58642: PUSH
58643: LD_INT 2
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: PUSH
58650: LD_INT 1
58652: PUSH
58653: LD_INT 2
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: LD_INT 0
58662: PUSH
58663: LD_INT 2
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_INT 1
58672: NEG
58673: PUSH
58674: LD_INT 1
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: LD_INT 2
58683: NEG
58684: PUSH
58685: LD_INT 0
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 2
58694: NEG
58695: PUSH
58696: LD_INT 1
58698: NEG
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 2
58706: NEG
58707: PUSH
58708: LD_INT 2
58710: NEG
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: LIST
58720: LIST
58721: LIST
58722: LIST
58723: LIST
58724: LIST
58725: LIST
58726: LIST
58727: LIST
58728: LIST
58729: LIST
58730: LIST
58731: LIST
58732: LIST
58733: LIST
58734: LIST
58735: LIST
58736: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58737: LD_ADDR_VAR 0 18
58741: PUSH
58742: LD_INT 0
58744: PUSH
58745: LD_INT 0
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: LD_INT 0
58754: PUSH
58755: LD_INT 1
58757: NEG
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: LD_INT 1
58765: PUSH
58766: LD_INT 0
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: LD_INT 1
58775: PUSH
58776: LD_INT 1
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 0
58785: PUSH
58786: LD_INT 1
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 1
58795: NEG
58796: PUSH
58797: LD_INT 0
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: LD_INT 1
58806: NEG
58807: PUSH
58808: LD_INT 1
58810: NEG
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: LD_INT 1
58818: NEG
58819: PUSH
58820: LD_INT 2
58822: NEG
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 0
58830: PUSH
58831: LD_INT 2
58833: NEG
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: LD_INT 1
58841: PUSH
58842: LD_INT 1
58844: NEG
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 2
58852: PUSH
58853: LD_INT 0
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 2
58862: PUSH
58863: LD_INT 1
58865: PUSH
58866: EMPTY
58867: LIST
58868: LIST
58869: PUSH
58870: LD_INT 2
58872: PUSH
58873: LD_INT 2
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PUSH
58880: LD_INT 1
58882: PUSH
58883: LD_INT 2
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: LD_INT 0
58892: PUSH
58893: LD_INT 2
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: PUSH
58900: LD_INT 1
58902: NEG
58903: PUSH
58904: LD_INT 1
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: PUSH
58911: LD_INT 2
58913: NEG
58914: PUSH
58915: LD_INT 0
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 2
58924: NEG
58925: PUSH
58926: LD_INT 1
58928: NEG
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: LD_INT 2
58936: NEG
58937: PUSH
58938: LD_INT 2
58940: NEG
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: LIST
58957: LIST
58958: LIST
58959: LIST
58960: LIST
58961: LIST
58962: LIST
58963: LIST
58964: LIST
58965: LIST
58966: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58967: LD_ADDR_VAR 0 19
58971: PUSH
58972: LD_INT 0
58974: PUSH
58975: LD_INT 0
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: PUSH
58982: LD_INT 0
58984: PUSH
58985: LD_INT 1
58987: NEG
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 1
58995: PUSH
58996: LD_INT 0
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 1
59005: PUSH
59006: LD_INT 1
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: LD_INT 0
59015: PUSH
59016: LD_INT 1
59018: PUSH
59019: EMPTY
59020: LIST
59021: LIST
59022: PUSH
59023: LD_INT 1
59025: NEG
59026: PUSH
59027: LD_INT 0
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: PUSH
59034: LD_INT 1
59036: NEG
59037: PUSH
59038: LD_INT 1
59040: NEG
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PUSH
59046: LD_INT 1
59048: NEG
59049: PUSH
59050: LD_INT 2
59052: NEG
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 0
59060: PUSH
59061: LD_INT 2
59063: NEG
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: PUSH
59069: LD_INT 1
59071: PUSH
59072: LD_INT 1
59074: NEG
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 2
59082: PUSH
59083: LD_INT 0
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: PUSH
59090: LD_INT 2
59092: PUSH
59093: LD_INT 1
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: PUSH
59100: LD_INT 2
59102: PUSH
59103: LD_INT 2
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: PUSH
59110: LD_INT 1
59112: PUSH
59113: LD_INT 2
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: LD_INT 0
59122: PUSH
59123: LD_INT 2
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: PUSH
59130: LD_INT 1
59132: NEG
59133: PUSH
59134: LD_INT 1
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: LD_INT 2
59143: NEG
59144: PUSH
59145: LD_INT 0
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: PUSH
59152: LD_INT 2
59154: NEG
59155: PUSH
59156: LD_INT 1
59158: NEG
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: LD_INT 2
59166: NEG
59167: PUSH
59168: LD_INT 2
59170: NEG
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: LIST
59185: LIST
59186: LIST
59187: LIST
59188: LIST
59189: LIST
59190: LIST
59191: LIST
59192: LIST
59193: LIST
59194: LIST
59195: LIST
59196: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59197: LD_ADDR_VAR 0 20
59201: PUSH
59202: LD_INT 0
59204: PUSH
59205: LD_INT 0
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: LD_INT 0
59214: PUSH
59215: LD_INT 1
59217: NEG
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: PUSH
59223: LD_INT 1
59225: PUSH
59226: LD_INT 0
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PUSH
59233: LD_INT 1
59235: PUSH
59236: LD_INT 1
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: PUSH
59243: LD_INT 0
59245: PUSH
59246: LD_INT 1
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: PUSH
59253: LD_INT 1
59255: NEG
59256: PUSH
59257: LD_INT 0
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: LD_INT 1
59266: NEG
59267: PUSH
59268: LD_INT 1
59270: NEG
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PUSH
59276: LD_INT 1
59278: NEG
59279: PUSH
59280: LD_INT 2
59282: NEG
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 0
59290: PUSH
59291: LD_INT 2
59293: NEG
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: LD_INT 1
59301: PUSH
59302: LD_INT 1
59304: NEG
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 2
59312: PUSH
59313: LD_INT 0
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 2
59322: PUSH
59323: LD_INT 1
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: PUSH
59330: LD_INT 2
59332: PUSH
59333: LD_INT 2
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 1
59342: PUSH
59343: LD_INT 2
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: LD_INT 0
59352: PUSH
59353: LD_INT 2
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: LD_INT 1
59362: NEG
59363: PUSH
59364: LD_INT 1
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: PUSH
59371: LD_INT 2
59373: NEG
59374: PUSH
59375: LD_INT 0
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: PUSH
59382: LD_INT 2
59384: NEG
59385: PUSH
59386: LD_INT 1
59388: NEG
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: PUSH
59394: LD_INT 2
59396: NEG
59397: PUSH
59398: LD_INT 2
59400: NEG
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: LIST
59413: LIST
59414: LIST
59415: LIST
59416: LIST
59417: LIST
59418: LIST
59419: LIST
59420: LIST
59421: LIST
59422: LIST
59423: LIST
59424: LIST
59425: LIST
59426: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59427: LD_ADDR_VAR 0 21
59431: PUSH
59432: LD_INT 0
59434: PUSH
59435: LD_INT 0
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: LD_INT 0
59444: PUSH
59445: LD_INT 1
59447: NEG
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 1
59455: PUSH
59456: LD_INT 0
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: PUSH
59463: LD_INT 1
59465: PUSH
59466: LD_INT 1
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 0
59475: PUSH
59476: LD_INT 1
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: LD_INT 1
59485: NEG
59486: PUSH
59487: LD_INT 0
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 1
59496: NEG
59497: PUSH
59498: LD_INT 1
59500: NEG
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 1
59508: NEG
59509: PUSH
59510: LD_INT 2
59512: NEG
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: LD_INT 0
59520: PUSH
59521: LD_INT 2
59523: NEG
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: LD_INT 1
59531: PUSH
59532: LD_INT 1
59534: NEG
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 2
59542: PUSH
59543: LD_INT 0
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 2
59552: PUSH
59553: LD_INT 1
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: PUSH
59560: LD_INT 2
59562: PUSH
59563: LD_INT 2
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: PUSH
59570: LD_INT 1
59572: PUSH
59573: LD_INT 2
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PUSH
59580: LD_INT 0
59582: PUSH
59583: LD_INT 2
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: PUSH
59590: LD_INT 1
59592: NEG
59593: PUSH
59594: LD_INT 1
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: PUSH
59601: LD_INT 2
59603: NEG
59604: PUSH
59605: LD_INT 0
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: LD_INT 2
59614: NEG
59615: PUSH
59616: LD_INT 1
59618: NEG
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: PUSH
59624: LD_INT 2
59626: NEG
59627: PUSH
59628: LD_INT 2
59630: NEG
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: LIST
59640: LIST
59641: LIST
59642: LIST
59643: LIST
59644: LIST
59645: LIST
59646: LIST
59647: LIST
59648: LIST
59649: LIST
59650: LIST
59651: LIST
59652: LIST
59653: LIST
59654: LIST
59655: LIST
59656: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59657: LD_ADDR_VAR 0 22
59661: PUSH
59662: LD_INT 0
59664: PUSH
59665: LD_INT 0
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: PUSH
59672: LD_INT 0
59674: PUSH
59675: LD_INT 1
59677: NEG
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: PUSH
59683: LD_INT 1
59685: PUSH
59686: LD_INT 0
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: PUSH
59693: LD_INT 1
59695: PUSH
59696: LD_INT 1
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: LD_INT 0
59705: PUSH
59706: LD_INT 1
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: PUSH
59713: LD_INT 1
59715: NEG
59716: PUSH
59717: LD_INT 0
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: PUSH
59724: LD_INT 1
59726: NEG
59727: PUSH
59728: LD_INT 1
59730: NEG
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: PUSH
59736: LD_INT 1
59738: NEG
59739: PUSH
59740: LD_INT 2
59742: NEG
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: PUSH
59748: LD_INT 0
59750: PUSH
59751: LD_INT 2
59753: NEG
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: LD_INT 1
59761: PUSH
59762: LD_INT 1
59764: NEG
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: PUSH
59770: LD_INT 2
59772: PUSH
59773: LD_INT 0
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 2
59782: PUSH
59783: LD_INT 1
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: LD_INT 2
59792: PUSH
59793: LD_INT 2
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PUSH
59800: LD_INT 1
59802: PUSH
59803: LD_INT 2
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: LD_INT 0
59812: PUSH
59813: LD_INT 2
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: LD_INT 1
59822: NEG
59823: PUSH
59824: LD_INT 1
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 2
59833: NEG
59834: PUSH
59835: LD_INT 0
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: PUSH
59842: LD_INT 2
59844: NEG
59845: PUSH
59846: LD_INT 1
59848: NEG
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: PUSH
59854: LD_INT 2
59856: NEG
59857: PUSH
59858: LD_INT 2
59860: NEG
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: LIST
59870: LIST
59871: LIST
59872: LIST
59873: LIST
59874: LIST
59875: LIST
59876: LIST
59877: LIST
59878: LIST
59879: LIST
59880: LIST
59881: LIST
59882: LIST
59883: LIST
59884: LIST
59885: LIST
59886: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59887: LD_ADDR_VAR 0 23
59891: PUSH
59892: LD_INT 0
59894: PUSH
59895: LD_INT 0
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PUSH
59902: LD_INT 0
59904: PUSH
59905: LD_INT 1
59907: NEG
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: PUSH
59913: LD_INT 1
59915: PUSH
59916: LD_INT 0
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: PUSH
59923: LD_INT 1
59925: PUSH
59926: LD_INT 1
59928: PUSH
59929: EMPTY
59930: LIST
59931: LIST
59932: PUSH
59933: LD_INT 0
59935: PUSH
59936: LD_INT 1
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PUSH
59943: LD_INT 1
59945: NEG
59946: PUSH
59947: LD_INT 0
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: PUSH
59954: LD_INT 1
59956: NEG
59957: PUSH
59958: LD_INT 1
59960: NEG
59961: PUSH
59962: EMPTY
59963: LIST
59964: LIST
59965: PUSH
59966: LD_INT 1
59968: NEG
59969: PUSH
59970: LD_INT 2
59972: NEG
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: LD_INT 0
59980: PUSH
59981: LD_INT 2
59983: NEG
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 1
59991: PUSH
59992: LD_INT 1
59994: NEG
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_INT 2
60002: PUSH
60003: LD_INT 0
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: PUSH
60010: LD_INT 2
60012: PUSH
60013: LD_INT 1
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: PUSH
60020: LD_INT 2
60022: PUSH
60023: LD_INT 2
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PUSH
60030: LD_INT 1
60032: PUSH
60033: LD_INT 2
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: PUSH
60040: LD_INT 0
60042: PUSH
60043: LD_INT 2
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: PUSH
60050: LD_INT 1
60052: NEG
60053: PUSH
60054: LD_INT 1
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: LD_INT 2
60063: NEG
60064: PUSH
60065: LD_INT 0
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: LD_INT 2
60074: NEG
60075: PUSH
60076: LD_INT 1
60078: NEG
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: LD_INT 2
60086: NEG
60087: PUSH
60088: LD_INT 2
60090: NEG
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 2
60098: NEG
60099: PUSH
60100: LD_INT 3
60102: NEG
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 1
60110: NEG
60111: PUSH
60112: LD_INT 3
60114: NEG
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 1
60122: PUSH
60123: LD_INT 2
60125: NEG
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 2
60133: PUSH
60134: LD_INT 1
60136: NEG
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: LIST
60146: LIST
60147: LIST
60148: LIST
60149: LIST
60150: LIST
60151: LIST
60152: LIST
60153: LIST
60154: LIST
60155: LIST
60156: LIST
60157: LIST
60158: LIST
60159: LIST
60160: LIST
60161: LIST
60162: LIST
60163: LIST
60164: LIST
60165: LIST
60166: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
60167: LD_ADDR_VAR 0 24
60171: PUSH
60172: LD_INT 0
60174: PUSH
60175: LD_INT 0
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 0
60184: PUSH
60185: LD_INT 1
60187: NEG
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: PUSH
60193: LD_INT 1
60195: PUSH
60196: LD_INT 0
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: PUSH
60203: LD_INT 1
60205: PUSH
60206: LD_INT 1
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: PUSH
60213: LD_INT 0
60215: PUSH
60216: LD_INT 1
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: LD_INT 1
60225: NEG
60226: PUSH
60227: LD_INT 0
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: LD_INT 1
60236: NEG
60237: PUSH
60238: LD_INT 1
60240: NEG
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: LD_INT 1
60248: NEG
60249: PUSH
60250: LD_INT 2
60252: NEG
60253: PUSH
60254: EMPTY
60255: LIST
60256: LIST
60257: PUSH
60258: LD_INT 0
60260: PUSH
60261: LD_INT 2
60263: NEG
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: PUSH
60269: LD_INT 1
60271: PUSH
60272: LD_INT 1
60274: NEG
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: PUSH
60280: LD_INT 2
60282: PUSH
60283: LD_INT 0
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 2
60292: PUSH
60293: LD_INT 1
60295: PUSH
60296: EMPTY
60297: LIST
60298: LIST
60299: PUSH
60300: LD_INT 2
60302: PUSH
60303: LD_INT 2
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: PUSH
60310: LD_INT 1
60312: PUSH
60313: LD_INT 2
60315: PUSH
60316: EMPTY
60317: LIST
60318: LIST
60319: PUSH
60320: LD_INT 0
60322: PUSH
60323: LD_INT 2
60325: PUSH
60326: EMPTY
60327: LIST
60328: LIST
60329: PUSH
60330: LD_INT 1
60332: NEG
60333: PUSH
60334: LD_INT 1
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PUSH
60341: LD_INT 2
60343: NEG
60344: PUSH
60345: LD_INT 0
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: PUSH
60352: LD_INT 2
60354: NEG
60355: PUSH
60356: LD_INT 1
60358: NEG
60359: PUSH
60360: EMPTY
60361: LIST
60362: LIST
60363: PUSH
60364: LD_INT 2
60366: NEG
60367: PUSH
60368: LD_INT 2
60370: NEG
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: LD_INT 1
60378: PUSH
60379: LD_INT 2
60381: NEG
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: PUSH
60387: LD_INT 2
60389: PUSH
60390: LD_INT 1
60392: NEG
60393: PUSH
60394: EMPTY
60395: LIST
60396: LIST
60397: PUSH
60398: LD_INT 3
60400: PUSH
60401: LD_INT 1
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: PUSH
60408: LD_INT 3
60410: PUSH
60411: LD_INT 2
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: PUSH
60418: EMPTY
60419: LIST
60420: LIST
60421: LIST
60422: LIST
60423: LIST
60424: LIST
60425: LIST
60426: LIST
60427: LIST
60428: LIST
60429: LIST
60430: LIST
60431: LIST
60432: LIST
60433: LIST
60434: LIST
60435: LIST
60436: LIST
60437: LIST
60438: LIST
60439: LIST
60440: LIST
60441: LIST
60442: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
60443: LD_ADDR_VAR 0 25
60447: PUSH
60448: LD_INT 0
60450: PUSH
60451: LD_INT 0
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: PUSH
60458: LD_INT 0
60460: PUSH
60461: LD_INT 1
60463: NEG
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PUSH
60469: LD_INT 1
60471: PUSH
60472: LD_INT 0
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PUSH
60479: LD_INT 1
60481: PUSH
60482: LD_INT 1
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: LD_INT 0
60491: PUSH
60492: LD_INT 1
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 1
60501: NEG
60502: PUSH
60503: LD_INT 0
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: PUSH
60510: LD_INT 1
60512: NEG
60513: PUSH
60514: LD_INT 1
60516: NEG
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: PUSH
60522: LD_INT 1
60524: NEG
60525: PUSH
60526: LD_INT 2
60528: NEG
60529: PUSH
60530: EMPTY
60531: LIST
60532: LIST
60533: PUSH
60534: LD_INT 0
60536: PUSH
60537: LD_INT 2
60539: NEG
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 1
60547: PUSH
60548: LD_INT 1
60550: NEG
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: LD_INT 2
60558: PUSH
60559: LD_INT 0
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: LD_INT 2
60568: PUSH
60569: LD_INT 1
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 2
60578: PUSH
60579: LD_INT 2
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PUSH
60586: LD_INT 1
60588: PUSH
60589: LD_INT 2
60591: PUSH
60592: EMPTY
60593: LIST
60594: LIST
60595: PUSH
60596: LD_INT 0
60598: PUSH
60599: LD_INT 2
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: PUSH
60606: LD_INT 1
60608: NEG
60609: PUSH
60610: LD_INT 1
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: LD_INT 2
60619: NEG
60620: PUSH
60621: LD_INT 0
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: PUSH
60628: LD_INT 2
60630: NEG
60631: PUSH
60632: LD_INT 1
60634: NEG
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: PUSH
60640: LD_INT 2
60642: NEG
60643: PUSH
60644: LD_INT 2
60646: NEG
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 3
60654: PUSH
60655: LD_INT 1
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: PUSH
60662: LD_INT 3
60664: PUSH
60665: LD_INT 2
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PUSH
60672: LD_INT 2
60674: PUSH
60675: LD_INT 3
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: LD_INT 1
60684: PUSH
60685: LD_INT 3
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: LIST
60696: LIST
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: LIST
60706: LIST
60707: LIST
60708: LIST
60709: LIST
60710: LIST
60711: LIST
60712: LIST
60713: LIST
60714: LIST
60715: LIST
60716: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60717: LD_ADDR_VAR 0 26
60721: PUSH
60722: LD_INT 0
60724: PUSH
60725: LD_INT 0
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: PUSH
60732: LD_INT 0
60734: PUSH
60735: LD_INT 1
60737: NEG
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: PUSH
60743: LD_INT 1
60745: PUSH
60746: LD_INT 0
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: PUSH
60753: LD_INT 1
60755: PUSH
60756: LD_INT 1
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: PUSH
60763: LD_INT 0
60765: PUSH
60766: LD_INT 1
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: LD_INT 1
60775: NEG
60776: PUSH
60777: LD_INT 0
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: PUSH
60784: LD_INT 1
60786: NEG
60787: PUSH
60788: LD_INT 1
60790: NEG
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: LD_INT 1
60798: NEG
60799: PUSH
60800: LD_INT 2
60802: NEG
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: PUSH
60808: LD_INT 0
60810: PUSH
60811: LD_INT 2
60813: NEG
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 1
60821: PUSH
60822: LD_INT 1
60824: NEG
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: PUSH
60830: LD_INT 2
60832: PUSH
60833: LD_INT 0
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: PUSH
60840: LD_INT 2
60842: PUSH
60843: LD_INT 1
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: PUSH
60850: LD_INT 2
60852: PUSH
60853: LD_INT 2
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: LD_INT 1
60862: PUSH
60863: LD_INT 2
60865: PUSH
60866: EMPTY
60867: LIST
60868: LIST
60869: PUSH
60870: LD_INT 0
60872: PUSH
60873: LD_INT 2
60875: PUSH
60876: EMPTY
60877: LIST
60878: LIST
60879: PUSH
60880: LD_INT 1
60882: NEG
60883: PUSH
60884: LD_INT 1
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: PUSH
60891: LD_INT 2
60893: NEG
60894: PUSH
60895: LD_INT 0
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: PUSH
60902: LD_INT 2
60904: NEG
60905: PUSH
60906: LD_INT 1
60908: NEG
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: PUSH
60914: LD_INT 2
60916: NEG
60917: PUSH
60918: LD_INT 2
60920: NEG
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: PUSH
60926: LD_INT 2
60928: PUSH
60929: LD_INT 3
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: LD_INT 1
60938: PUSH
60939: LD_INT 3
60941: PUSH
60942: EMPTY
60943: LIST
60944: LIST
60945: PUSH
60946: LD_INT 1
60948: NEG
60949: PUSH
60950: LD_INT 2
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: PUSH
60957: LD_INT 2
60959: NEG
60960: PUSH
60961: LD_INT 1
60963: PUSH
60964: EMPTY
60965: LIST
60966: LIST
60967: PUSH
60968: EMPTY
60969: LIST
60970: LIST
60971: LIST
60972: LIST
60973: LIST
60974: LIST
60975: LIST
60976: LIST
60977: LIST
60978: LIST
60979: LIST
60980: LIST
60981: LIST
60982: LIST
60983: LIST
60984: LIST
60985: LIST
60986: LIST
60987: LIST
60988: LIST
60989: LIST
60990: LIST
60991: LIST
60992: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60993: LD_ADDR_VAR 0 27
60997: PUSH
60998: LD_INT 0
61000: PUSH
61001: LD_INT 0
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: PUSH
61008: LD_INT 0
61010: PUSH
61011: LD_INT 1
61013: NEG
61014: PUSH
61015: EMPTY
61016: LIST
61017: LIST
61018: PUSH
61019: LD_INT 1
61021: PUSH
61022: LD_INT 0
61024: PUSH
61025: EMPTY
61026: LIST
61027: LIST
61028: PUSH
61029: LD_INT 1
61031: PUSH
61032: LD_INT 1
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: PUSH
61039: LD_INT 0
61041: PUSH
61042: LD_INT 1
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: PUSH
61049: LD_INT 1
61051: NEG
61052: PUSH
61053: LD_INT 0
61055: PUSH
61056: EMPTY
61057: LIST
61058: LIST
61059: PUSH
61060: LD_INT 1
61062: NEG
61063: PUSH
61064: LD_INT 1
61066: NEG
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: PUSH
61072: LD_INT 1
61074: NEG
61075: PUSH
61076: LD_INT 2
61078: NEG
61079: PUSH
61080: EMPTY
61081: LIST
61082: LIST
61083: PUSH
61084: LD_INT 0
61086: PUSH
61087: LD_INT 2
61089: NEG
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: PUSH
61095: LD_INT 1
61097: PUSH
61098: LD_INT 1
61100: NEG
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: PUSH
61106: LD_INT 2
61108: PUSH
61109: LD_INT 0
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: PUSH
61116: LD_INT 2
61118: PUSH
61119: LD_INT 1
61121: PUSH
61122: EMPTY
61123: LIST
61124: LIST
61125: PUSH
61126: LD_INT 2
61128: PUSH
61129: LD_INT 2
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: PUSH
61136: LD_INT 1
61138: PUSH
61139: LD_INT 2
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 0
61148: PUSH
61149: LD_INT 2
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: LD_INT 1
61158: NEG
61159: PUSH
61160: LD_INT 1
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: PUSH
61167: LD_INT 2
61169: NEG
61170: PUSH
61171: LD_INT 0
61173: PUSH
61174: EMPTY
61175: LIST
61176: LIST
61177: PUSH
61178: LD_INT 2
61180: NEG
61181: PUSH
61182: LD_INT 1
61184: NEG
61185: PUSH
61186: EMPTY
61187: LIST
61188: LIST
61189: PUSH
61190: LD_INT 2
61192: NEG
61193: PUSH
61194: LD_INT 2
61196: NEG
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: PUSH
61202: LD_INT 1
61204: NEG
61205: PUSH
61206: LD_INT 2
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: PUSH
61213: LD_INT 2
61215: NEG
61216: PUSH
61217: LD_INT 1
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: PUSH
61224: LD_INT 3
61226: NEG
61227: PUSH
61228: LD_INT 1
61230: NEG
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: PUSH
61236: LD_INT 3
61238: NEG
61239: PUSH
61240: LD_INT 2
61242: NEG
61243: PUSH
61244: EMPTY
61245: LIST
61246: LIST
61247: PUSH
61248: EMPTY
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: LIST
61258: LIST
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: LIST
61271: LIST
61272: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61273: LD_ADDR_VAR 0 28
61277: PUSH
61278: LD_INT 0
61280: PUSH
61281: LD_INT 0
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: PUSH
61288: LD_INT 0
61290: PUSH
61291: LD_INT 1
61293: NEG
61294: PUSH
61295: EMPTY
61296: LIST
61297: LIST
61298: PUSH
61299: LD_INT 1
61301: PUSH
61302: LD_INT 0
61304: PUSH
61305: EMPTY
61306: LIST
61307: LIST
61308: PUSH
61309: LD_INT 1
61311: PUSH
61312: LD_INT 1
61314: PUSH
61315: EMPTY
61316: LIST
61317: LIST
61318: PUSH
61319: LD_INT 0
61321: PUSH
61322: LD_INT 1
61324: PUSH
61325: EMPTY
61326: LIST
61327: LIST
61328: PUSH
61329: LD_INT 1
61331: NEG
61332: PUSH
61333: LD_INT 0
61335: PUSH
61336: EMPTY
61337: LIST
61338: LIST
61339: PUSH
61340: LD_INT 1
61342: NEG
61343: PUSH
61344: LD_INT 1
61346: NEG
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: PUSH
61352: LD_INT 1
61354: NEG
61355: PUSH
61356: LD_INT 2
61358: NEG
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: PUSH
61364: LD_INT 0
61366: PUSH
61367: LD_INT 2
61369: NEG
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: LD_INT 1
61377: PUSH
61378: LD_INT 1
61380: NEG
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: LD_INT 2
61388: PUSH
61389: LD_INT 0
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: PUSH
61396: LD_INT 2
61398: PUSH
61399: LD_INT 1
61401: PUSH
61402: EMPTY
61403: LIST
61404: LIST
61405: PUSH
61406: LD_INT 2
61408: PUSH
61409: LD_INT 2
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: PUSH
61416: LD_INT 1
61418: PUSH
61419: LD_INT 2
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: PUSH
61426: LD_INT 0
61428: PUSH
61429: LD_INT 2
61431: PUSH
61432: EMPTY
61433: LIST
61434: LIST
61435: PUSH
61436: LD_INT 1
61438: NEG
61439: PUSH
61440: LD_INT 1
61442: PUSH
61443: EMPTY
61444: LIST
61445: LIST
61446: PUSH
61447: LD_INT 2
61449: NEG
61450: PUSH
61451: LD_INT 0
61453: PUSH
61454: EMPTY
61455: LIST
61456: LIST
61457: PUSH
61458: LD_INT 2
61460: NEG
61461: PUSH
61462: LD_INT 1
61464: NEG
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: PUSH
61470: LD_INT 2
61472: NEG
61473: PUSH
61474: LD_INT 2
61476: NEG
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: PUSH
61482: LD_INT 2
61484: NEG
61485: PUSH
61486: LD_INT 3
61488: NEG
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: LD_INT 1
61496: NEG
61497: PUSH
61498: LD_INT 3
61500: NEG
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: PUSH
61506: LD_INT 3
61508: NEG
61509: PUSH
61510: LD_INT 1
61512: NEG
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 3
61520: NEG
61521: PUSH
61522: LD_INT 2
61524: NEG
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: EMPTY
61531: LIST
61532: LIST
61533: LIST
61534: LIST
61535: LIST
61536: LIST
61537: LIST
61538: LIST
61539: LIST
61540: LIST
61541: LIST
61542: LIST
61543: LIST
61544: LIST
61545: LIST
61546: LIST
61547: LIST
61548: LIST
61549: LIST
61550: LIST
61551: LIST
61552: LIST
61553: LIST
61554: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61555: LD_ADDR_VAR 0 29
61559: PUSH
61560: LD_INT 0
61562: PUSH
61563: LD_INT 0
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: PUSH
61570: LD_INT 0
61572: PUSH
61573: LD_INT 1
61575: NEG
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: PUSH
61581: LD_INT 1
61583: PUSH
61584: LD_INT 0
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: PUSH
61591: LD_INT 1
61593: PUSH
61594: LD_INT 1
61596: PUSH
61597: EMPTY
61598: LIST
61599: LIST
61600: PUSH
61601: LD_INT 0
61603: PUSH
61604: LD_INT 1
61606: PUSH
61607: EMPTY
61608: LIST
61609: LIST
61610: PUSH
61611: LD_INT 1
61613: NEG
61614: PUSH
61615: LD_INT 0
61617: PUSH
61618: EMPTY
61619: LIST
61620: LIST
61621: PUSH
61622: LD_INT 1
61624: NEG
61625: PUSH
61626: LD_INT 1
61628: NEG
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: LD_INT 1
61636: NEG
61637: PUSH
61638: LD_INT 2
61640: NEG
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: PUSH
61646: LD_INT 0
61648: PUSH
61649: LD_INT 2
61651: NEG
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: PUSH
61657: LD_INT 1
61659: PUSH
61660: LD_INT 1
61662: NEG
61663: PUSH
61664: EMPTY
61665: LIST
61666: LIST
61667: PUSH
61668: LD_INT 2
61670: PUSH
61671: LD_INT 0
61673: PUSH
61674: EMPTY
61675: LIST
61676: LIST
61677: PUSH
61678: LD_INT 2
61680: PUSH
61681: LD_INT 1
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: PUSH
61688: LD_INT 1
61690: PUSH
61691: LD_INT 2
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: PUSH
61698: LD_INT 0
61700: PUSH
61701: LD_INT 2
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: PUSH
61708: LD_INT 1
61710: NEG
61711: PUSH
61712: LD_INT 1
61714: PUSH
61715: EMPTY
61716: LIST
61717: LIST
61718: PUSH
61719: LD_INT 2
61721: NEG
61722: PUSH
61723: LD_INT 1
61725: NEG
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: PUSH
61731: LD_INT 2
61733: NEG
61734: PUSH
61735: LD_INT 2
61737: NEG
61738: PUSH
61739: EMPTY
61740: LIST
61741: LIST
61742: PUSH
61743: LD_INT 2
61745: NEG
61746: PUSH
61747: LD_INT 3
61749: NEG
61750: PUSH
61751: EMPTY
61752: LIST
61753: LIST
61754: PUSH
61755: LD_INT 2
61757: PUSH
61758: LD_INT 1
61760: NEG
61761: PUSH
61762: EMPTY
61763: LIST
61764: LIST
61765: PUSH
61766: LD_INT 3
61768: PUSH
61769: LD_INT 1
61771: PUSH
61772: EMPTY
61773: LIST
61774: LIST
61775: PUSH
61776: LD_INT 1
61778: PUSH
61779: LD_INT 3
61781: PUSH
61782: EMPTY
61783: LIST
61784: LIST
61785: PUSH
61786: LD_INT 1
61788: NEG
61789: PUSH
61790: LD_INT 2
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: LD_INT 3
61799: NEG
61800: PUSH
61801: LD_INT 2
61803: NEG
61804: PUSH
61805: EMPTY
61806: LIST
61807: LIST
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: LIST
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: LIST
61831: LIST
61832: LIST
61833: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61834: LD_ADDR_VAR 0 30
61838: PUSH
61839: LD_INT 0
61841: PUSH
61842: LD_INT 0
61844: PUSH
61845: EMPTY
61846: LIST
61847: LIST
61848: PUSH
61849: LD_INT 0
61851: PUSH
61852: LD_INT 1
61854: NEG
61855: PUSH
61856: EMPTY
61857: LIST
61858: LIST
61859: PUSH
61860: LD_INT 1
61862: PUSH
61863: LD_INT 0
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: PUSH
61870: LD_INT 1
61872: PUSH
61873: LD_INT 1
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: LD_INT 0
61882: PUSH
61883: LD_INT 1
61885: PUSH
61886: EMPTY
61887: LIST
61888: LIST
61889: PUSH
61890: LD_INT 1
61892: NEG
61893: PUSH
61894: LD_INT 0
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: PUSH
61901: LD_INT 1
61903: NEG
61904: PUSH
61905: LD_INT 1
61907: NEG
61908: PUSH
61909: EMPTY
61910: LIST
61911: LIST
61912: PUSH
61913: LD_INT 1
61915: NEG
61916: PUSH
61917: LD_INT 2
61919: NEG
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: PUSH
61925: LD_INT 0
61927: PUSH
61928: LD_INT 2
61930: NEG
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: PUSH
61936: LD_INT 1
61938: PUSH
61939: LD_INT 1
61941: NEG
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PUSH
61947: LD_INT 2
61949: PUSH
61950: LD_INT 0
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: PUSH
61957: LD_INT 2
61959: PUSH
61960: LD_INT 1
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: PUSH
61967: LD_INT 2
61969: PUSH
61970: LD_INT 2
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: PUSH
61977: LD_INT 1
61979: PUSH
61980: LD_INT 2
61982: PUSH
61983: EMPTY
61984: LIST
61985: LIST
61986: PUSH
61987: LD_INT 1
61989: NEG
61990: PUSH
61991: LD_INT 1
61993: PUSH
61994: EMPTY
61995: LIST
61996: LIST
61997: PUSH
61998: LD_INT 2
62000: NEG
62001: PUSH
62002: LD_INT 0
62004: PUSH
62005: EMPTY
62006: LIST
62007: LIST
62008: PUSH
62009: LD_INT 2
62011: NEG
62012: PUSH
62013: LD_INT 1
62015: NEG
62016: PUSH
62017: EMPTY
62018: LIST
62019: LIST
62020: PUSH
62021: LD_INT 1
62023: NEG
62024: PUSH
62025: LD_INT 3
62027: NEG
62028: PUSH
62029: EMPTY
62030: LIST
62031: LIST
62032: PUSH
62033: LD_INT 1
62035: PUSH
62036: LD_INT 2
62038: NEG
62039: PUSH
62040: EMPTY
62041: LIST
62042: LIST
62043: PUSH
62044: LD_INT 3
62046: PUSH
62047: LD_INT 2
62049: PUSH
62050: EMPTY
62051: LIST
62052: LIST
62053: PUSH
62054: LD_INT 2
62056: PUSH
62057: LD_INT 3
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: PUSH
62064: LD_INT 2
62066: NEG
62067: PUSH
62068: LD_INT 1
62070: PUSH
62071: EMPTY
62072: LIST
62073: LIST
62074: PUSH
62075: LD_INT 3
62077: NEG
62078: PUSH
62079: LD_INT 1
62081: NEG
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: LIST
62091: LIST
62092: LIST
62093: LIST
62094: LIST
62095: LIST
62096: LIST
62097: LIST
62098: LIST
62099: LIST
62100: LIST
62101: LIST
62102: LIST
62103: LIST
62104: LIST
62105: LIST
62106: LIST
62107: LIST
62108: LIST
62109: LIST
62110: LIST
62111: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
62112: LD_ADDR_VAR 0 31
62116: PUSH
62117: LD_INT 0
62119: PUSH
62120: LD_INT 0
62122: PUSH
62123: EMPTY
62124: LIST
62125: LIST
62126: PUSH
62127: LD_INT 0
62129: PUSH
62130: LD_INT 1
62132: NEG
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: PUSH
62138: LD_INT 1
62140: PUSH
62141: LD_INT 0
62143: PUSH
62144: EMPTY
62145: LIST
62146: LIST
62147: PUSH
62148: LD_INT 1
62150: PUSH
62151: LD_INT 1
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: PUSH
62158: LD_INT 0
62160: PUSH
62161: LD_INT 1
62163: PUSH
62164: EMPTY
62165: LIST
62166: LIST
62167: PUSH
62168: LD_INT 1
62170: NEG
62171: PUSH
62172: LD_INT 0
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: PUSH
62179: LD_INT 1
62181: NEG
62182: PUSH
62183: LD_INT 1
62185: NEG
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: PUSH
62191: LD_INT 1
62193: NEG
62194: PUSH
62195: LD_INT 2
62197: NEG
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: PUSH
62203: LD_INT 1
62205: PUSH
62206: LD_INT 1
62208: NEG
62209: PUSH
62210: EMPTY
62211: LIST
62212: LIST
62213: PUSH
62214: LD_INT 2
62216: PUSH
62217: LD_INT 0
62219: PUSH
62220: EMPTY
62221: LIST
62222: LIST
62223: PUSH
62224: LD_INT 2
62226: PUSH
62227: LD_INT 1
62229: PUSH
62230: EMPTY
62231: LIST
62232: LIST
62233: PUSH
62234: LD_INT 2
62236: PUSH
62237: LD_INT 2
62239: PUSH
62240: EMPTY
62241: LIST
62242: LIST
62243: PUSH
62244: LD_INT 1
62246: PUSH
62247: LD_INT 2
62249: PUSH
62250: EMPTY
62251: LIST
62252: LIST
62253: PUSH
62254: LD_INT 0
62256: PUSH
62257: LD_INT 2
62259: PUSH
62260: EMPTY
62261: LIST
62262: LIST
62263: PUSH
62264: LD_INT 1
62266: NEG
62267: PUSH
62268: LD_INT 1
62270: PUSH
62271: EMPTY
62272: LIST
62273: LIST
62274: PUSH
62275: LD_INT 2
62277: NEG
62278: PUSH
62279: LD_INT 1
62281: NEG
62282: PUSH
62283: EMPTY
62284: LIST
62285: LIST
62286: PUSH
62287: LD_INT 2
62289: NEG
62290: PUSH
62291: LD_INT 2
62293: NEG
62294: PUSH
62295: EMPTY
62296: LIST
62297: LIST
62298: PUSH
62299: LD_INT 2
62301: NEG
62302: PUSH
62303: LD_INT 3
62305: NEG
62306: PUSH
62307: EMPTY
62308: LIST
62309: LIST
62310: PUSH
62311: LD_INT 2
62313: PUSH
62314: LD_INT 1
62316: NEG
62317: PUSH
62318: EMPTY
62319: LIST
62320: LIST
62321: PUSH
62322: LD_INT 3
62324: PUSH
62325: LD_INT 1
62327: PUSH
62328: EMPTY
62329: LIST
62330: LIST
62331: PUSH
62332: LD_INT 1
62334: PUSH
62335: LD_INT 3
62337: PUSH
62338: EMPTY
62339: LIST
62340: LIST
62341: PUSH
62342: LD_INT 1
62344: NEG
62345: PUSH
62346: LD_INT 2
62348: PUSH
62349: EMPTY
62350: LIST
62351: LIST
62352: PUSH
62353: LD_INT 3
62355: NEG
62356: PUSH
62357: LD_INT 2
62359: NEG
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: LIST
62369: LIST
62370: LIST
62371: LIST
62372: LIST
62373: LIST
62374: LIST
62375: LIST
62376: LIST
62377: LIST
62378: LIST
62379: LIST
62380: LIST
62381: LIST
62382: LIST
62383: LIST
62384: LIST
62385: LIST
62386: LIST
62387: LIST
62388: LIST
62389: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62390: LD_ADDR_VAR 0 32
62394: PUSH
62395: LD_INT 0
62397: PUSH
62398: LD_INT 0
62400: PUSH
62401: EMPTY
62402: LIST
62403: LIST
62404: PUSH
62405: LD_INT 0
62407: PUSH
62408: LD_INT 1
62410: NEG
62411: PUSH
62412: EMPTY
62413: LIST
62414: LIST
62415: PUSH
62416: LD_INT 1
62418: PUSH
62419: LD_INT 0
62421: PUSH
62422: EMPTY
62423: LIST
62424: LIST
62425: PUSH
62426: LD_INT 1
62428: PUSH
62429: LD_INT 1
62431: PUSH
62432: EMPTY
62433: LIST
62434: LIST
62435: PUSH
62436: LD_INT 0
62438: PUSH
62439: LD_INT 1
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: PUSH
62446: LD_INT 1
62448: NEG
62449: PUSH
62450: LD_INT 0
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: PUSH
62457: LD_INT 1
62459: NEG
62460: PUSH
62461: LD_INT 1
62463: NEG
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: LD_INT 1
62471: NEG
62472: PUSH
62473: LD_INT 2
62475: NEG
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: PUSH
62481: LD_INT 0
62483: PUSH
62484: LD_INT 2
62486: NEG
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: PUSH
62492: LD_INT 1
62494: PUSH
62495: LD_INT 1
62497: NEG
62498: PUSH
62499: EMPTY
62500: LIST
62501: LIST
62502: PUSH
62503: LD_INT 2
62505: PUSH
62506: LD_INT 1
62508: PUSH
62509: EMPTY
62510: LIST
62511: LIST
62512: PUSH
62513: LD_INT 2
62515: PUSH
62516: LD_INT 2
62518: PUSH
62519: EMPTY
62520: LIST
62521: LIST
62522: PUSH
62523: LD_INT 1
62525: PUSH
62526: LD_INT 2
62528: PUSH
62529: EMPTY
62530: LIST
62531: LIST
62532: PUSH
62533: LD_INT 0
62535: PUSH
62536: LD_INT 2
62538: PUSH
62539: EMPTY
62540: LIST
62541: LIST
62542: PUSH
62543: LD_INT 1
62545: NEG
62546: PUSH
62547: LD_INT 1
62549: PUSH
62550: EMPTY
62551: LIST
62552: LIST
62553: PUSH
62554: LD_INT 2
62556: NEG
62557: PUSH
62558: LD_INT 0
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: PUSH
62565: LD_INT 2
62567: NEG
62568: PUSH
62569: LD_INT 1
62571: NEG
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: LD_INT 1
62579: NEG
62580: PUSH
62581: LD_INT 3
62583: NEG
62584: PUSH
62585: EMPTY
62586: LIST
62587: LIST
62588: PUSH
62589: LD_INT 1
62591: PUSH
62592: LD_INT 2
62594: NEG
62595: PUSH
62596: EMPTY
62597: LIST
62598: LIST
62599: PUSH
62600: LD_INT 3
62602: PUSH
62603: LD_INT 2
62605: PUSH
62606: EMPTY
62607: LIST
62608: LIST
62609: PUSH
62610: LD_INT 2
62612: PUSH
62613: LD_INT 3
62615: PUSH
62616: EMPTY
62617: LIST
62618: LIST
62619: PUSH
62620: LD_INT 2
62622: NEG
62623: PUSH
62624: LD_INT 1
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: PUSH
62631: LD_INT 3
62633: NEG
62634: PUSH
62635: LD_INT 1
62637: NEG
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: PUSH
62643: EMPTY
62644: LIST
62645: LIST
62646: LIST
62647: LIST
62648: LIST
62649: LIST
62650: LIST
62651: LIST
62652: LIST
62653: LIST
62654: LIST
62655: LIST
62656: LIST
62657: LIST
62658: LIST
62659: LIST
62660: LIST
62661: LIST
62662: LIST
62663: LIST
62664: LIST
62665: LIST
62666: LIST
62667: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
62668: LD_ADDR_VAR 0 33
62672: PUSH
62673: LD_INT 0
62675: PUSH
62676: LD_INT 0
62678: PUSH
62679: EMPTY
62680: LIST
62681: LIST
62682: PUSH
62683: LD_INT 0
62685: PUSH
62686: LD_INT 1
62688: NEG
62689: PUSH
62690: EMPTY
62691: LIST
62692: LIST
62693: PUSH
62694: LD_INT 1
62696: PUSH
62697: LD_INT 0
62699: PUSH
62700: EMPTY
62701: LIST
62702: LIST
62703: PUSH
62704: LD_INT 1
62706: PUSH
62707: LD_INT 1
62709: PUSH
62710: EMPTY
62711: LIST
62712: LIST
62713: PUSH
62714: LD_INT 0
62716: PUSH
62717: LD_INT 1
62719: PUSH
62720: EMPTY
62721: LIST
62722: LIST
62723: PUSH
62724: LD_INT 1
62726: NEG
62727: PUSH
62728: LD_INT 0
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: PUSH
62735: LD_INT 1
62737: NEG
62738: PUSH
62739: LD_INT 1
62741: NEG
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: PUSH
62747: LD_INT 1
62749: NEG
62750: PUSH
62751: LD_INT 2
62753: NEG
62754: PUSH
62755: EMPTY
62756: LIST
62757: LIST
62758: PUSH
62759: LD_INT 1
62761: PUSH
62762: LD_INT 1
62764: NEG
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: PUSH
62770: LD_INT 2
62772: PUSH
62773: LD_INT 0
62775: PUSH
62776: EMPTY
62777: LIST
62778: LIST
62779: PUSH
62780: LD_INT 2
62782: PUSH
62783: LD_INT 1
62785: PUSH
62786: EMPTY
62787: LIST
62788: LIST
62789: PUSH
62790: LD_INT 1
62792: PUSH
62793: LD_INT 2
62795: PUSH
62796: EMPTY
62797: LIST
62798: LIST
62799: PUSH
62800: LD_INT 0
62802: PUSH
62803: LD_INT 2
62805: PUSH
62806: EMPTY
62807: LIST
62808: LIST
62809: PUSH
62810: LD_INT 1
62812: NEG
62813: PUSH
62814: LD_INT 1
62816: PUSH
62817: EMPTY
62818: LIST
62819: LIST
62820: PUSH
62821: LD_INT 2
62823: NEG
62824: PUSH
62825: LD_INT 0
62827: PUSH
62828: EMPTY
62829: LIST
62830: LIST
62831: PUSH
62832: LD_INT 2
62834: NEG
62835: PUSH
62836: LD_INT 1
62838: NEG
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: PUSH
62844: LD_INT 2
62846: NEG
62847: PUSH
62848: LD_INT 2
62850: NEG
62851: PUSH
62852: EMPTY
62853: LIST
62854: LIST
62855: PUSH
62856: LD_INT 2
62858: NEG
62859: PUSH
62860: LD_INT 3
62862: NEG
62863: PUSH
62864: EMPTY
62865: LIST
62866: LIST
62867: PUSH
62868: LD_INT 2
62870: PUSH
62871: LD_INT 1
62873: NEG
62874: PUSH
62875: EMPTY
62876: LIST
62877: LIST
62878: PUSH
62879: LD_INT 3
62881: PUSH
62882: LD_INT 1
62884: PUSH
62885: EMPTY
62886: LIST
62887: LIST
62888: PUSH
62889: LD_INT 1
62891: PUSH
62892: LD_INT 3
62894: PUSH
62895: EMPTY
62896: LIST
62897: LIST
62898: PUSH
62899: LD_INT 1
62901: NEG
62902: PUSH
62903: LD_INT 2
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: PUSH
62910: LD_INT 3
62912: NEG
62913: PUSH
62914: LD_INT 2
62916: NEG
62917: PUSH
62918: EMPTY
62919: LIST
62920: LIST
62921: PUSH
62922: EMPTY
62923: LIST
62924: LIST
62925: LIST
62926: LIST
62927: LIST
62928: LIST
62929: LIST
62930: LIST
62931: LIST
62932: LIST
62933: LIST
62934: LIST
62935: LIST
62936: LIST
62937: LIST
62938: LIST
62939: LIST
62940: LIST
62941: LIST
62942: LIST
62943: LIST
62944: LIST
62945: LIST
62946: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62947: LD_ADDR_VAR 0 34
62951: PUSH
62952: LD_INT 0
62954: PUSH
62955: LD_INT 0
62957: PUSH
62958: EMPTY
62959: LIST
62960: LIST
62961: PUSH
62962: LD_INT 0
62964: PUSH
62965: LD_INT 1
62967: NEG
62968: PUSH
62969: EMPTY
62970: LIST
62971: LIST
62972: PUSH
62973: LD_INT 1
62975: PUSH
62976: LD_INT 0
62978: PUSH
62979: EMPTY
62980: LIST
62981: LIST
62982: PUSH
62983: LD_INT 1
62985: PUSH
62986: LD_INT 1
62988: PUSH
62989: EMPTY
62990: LIST
62991: LIST
62992: PUSH
62993: LD_INT 0
62995: PUSH
62996: LD_INT 1
62998: PUSH
62999: EMPTY
63000: LIST
63001: LIST
63002: PUSH
63003: LD_INT 1
63005: NEG
63006: PUSH
63007: LD_INT 0
63009: PUSH
63010: EMPTY
63011: LIST
63012: LIST
63013: PUSH
63014: LD_INT 1
63016: NEG
63017: PUSH
63018: LD_INT 1
63020: NEG
63021: PUSH
63022: EMPTY
63023: LIST
63024: LIST
63025: PUSH
63026: LD_INT 1
63028: NEG
63029: PUSH
63030: LD_INT 2
63032: NEG
63033: PUSH
63034: EMPTY
63035: LIST
63036: LIST
63037: PUSH
63038: LD_INT 0
63040: PUSH
63041: LD_INT 2
63043: NEG
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: PUSH
63049: LD_INT 1
63051: PUSH
63052: LD_INT 1
63054: NEG
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: PUSH
63060: LD_INT 2
63062: PUSH
63063: LD_INT 1
63065: PUSH
63066: EMPTY
63067: LIST
63068: LIST
63069: PUSH
63070: LD_INT 2
63072: PUSH
63073: LD_INT 2
63075: PUSH
63076: EMPTY
63077: LIST
63078: LIST
63079: PUSH
63080: LD_INT 1
63082: PUSH
63083: LD_INT 2
63085: PUSH
63086: EMPTY
63087: LIST
63088: LIST
63089: PUSH
63090: LD_INT 1
63092: NEG
63093: PUSH
63094: LD_INT 1
63096: PUSH
63097: EMPTY
63098: LIST
63099: LIST
63100: PUSH
63101: LD_INT 2
63103: NEG
63104: PUSH
63105: LD_INT 0
63107: PUSH
63108: EMPTY
63109: LIST
63110: LIST
63111: PUSH
63112: LD_INT 2
63114: NEG
63115: PUSH
63116: LD_INT 1
63118: NEG
63119: PUSH
63120: EMPTY
63121: LIST
63122: LIST
63123: PUSH
63124: LD_INT 2
63126: NEG
63127: PUSH
63128: LD_INT 2
63130: NEG
63131: PUSH
63132: EMPTY
63133: LIST
63134: LIST
63135: PUSH
63136: LD_INT 1
63138: NEG
63139: PUSH
63140: LD_INT 3
63142: NEG
63143: PUSH
63144: EMPTY
63145: LIST
63146: LIST
63147: PUSH
63148: LD_INT 1
63150: PUSH
63151: LD_INT 2
63153: NEG
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: PUSH
63159: LD_INT 3
63161: PUSH
63162: LD_INT 2
63164: PUSH
63165: EMPTY
63166: LIST
63167: LIST
63168: PUSH
63169: LD_INT 2
63171: PUSH
63172: LD_INT 3
63174: PUSH
63175: EMPTY
63176: LIST
63177: LIST
63178: PUSH
63179: LD_INT 2
63181: NEG
63182: PUSH
63183: LD_INT 1
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PUSH
63190: LD_INT 3
63192: NEG
63193: PUSH
63194: LD_INT 1
63196: NEG
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: PUSH
63202: EMPTY
63203: LIST
63204: LIST
63205: LIST
63206: LIST
63207: LIST
63208: LIST
63209: LIST
63210: LIST
63211: LIST
63212: LIST
63213: LIST
63214: LIST
63215: LIST
63216: LIST
63217: LIST
63218: LIST
63219: LIST
63220: LIST
63221: LIST
63222: LIST
63223: LIST
63224: LIST
63225: LIST
63226: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
63227: LD_ADDR_VAR 0 35
63231: PUSH
63232: LD_INT 0
63234: PUSH
63235: LD_INT 0
63237: PUSH
63238: EMPTY
63239: LIST
63240: LIST
63241: PUSH
63242: LD_INT 0
63244: PUSH
63245: LD_INT 1
63247: NEG
63248: PUSH
63249: EMPTY
63250: LIST
63251: LIST
63252: PUSH
63253: LD_INT 1
63255: PUSH
63256: LD_INT 0
63258: PUSH
63259: EMPTY
63260: LIST
63261: LIST
63262: PUSH
63263: LD_INT 1
63265: PUSH
63266: LD_INT 1
63268: PUSH
63269: EMPTY
63270: LIST
63271: LIST
63272: PUSH
63273: LD_INT 0
63275: PUSH
63276: LD_INT 1
63278: PUSH
63279: EMPTY
63280: LIST
63281: LIST
63282: PUSH
63283: LD_INT 1
63285: NEG
63286: PUSH
63287: LD_INT 0
63289: PUSH
63290: EMPTY
63291: LIST
63292: LIST
63293: PUSH
63294: LD_INT 1
63296: NEG
63297: PUSH
63298: LD_INT 1
63300: NEG
63301: PUSH
63302: EMPTY
63303: LIST
63304: LIST
63305: PUSH
63306: LD_INT 2
63308: PUSH
63309: LD_INT 1
63311: PUSH
63312: EMPTY
63313: LIST
63314: LIST
63315: PUSH
63316: LD_INT 2
63318: NEG
63319: PUSH
63320: LD_INT 1
63322: NEG
63323: PUSH
63324: EMPTY
63325: LIST
63326: LIST
63327: PUSH
63328: EMPTY
63329: LIST
63330: LIST
63331: LIST
63332: LIST
63333: LIST
63334: LIST
63335: LIST
63336: LIST
63337: LIST
63338: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
63339: LD_ADDR_VAR 0 36
63343: PUSH
63344: LD_INT 0
63346: PUSH
63347: LD_INT 0
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: PUSH
63354: LD_INT 0
63356: PUSH
63357: LD_INT 1
63359: NEG
63360: PUSH
63361: EMPTY
63362: LIST
63363: LIST
63364: PUSH
63365: LD_INT 1
63367: PUSH
63368: LD_INT 0
63370: PUSH
63371: EMPTY
63372: LIST
63373: LIST
63374: PUSH
63375: LD_INT 1
63377: PUSH
63378: LD_INT 1
63380: PUSH
63381: EMPTY
63382: LIST
63383: LIST
63384: PUSH
63385: LD_INT 0
63387: PUSH
63388: LD_INT 1
63390: PUSH
63391: EMPTY
63392: LIST
63393: LIST
63394: PUSH
63395: LD_INT 1
63397: NEG
63398: PUSH
63399: LD_INT 0
63401: PUSH
63402: EMPTY
63403: LIST
63404: LIST
63405: PUSH
63406: LD_INT 1
63408: NEG
63409: PUSH
63410: LD_INT 1
63412: NEG
63413: PUSH
63414: EMPTY
63415: LIST
63416: LIST
63417: PUSH
63418: LD_INT 1
63420: NEG
63421: PUSH
63422: LD_INT 2
63424: NEG
63425: PUSH
63426: EMPTY
63427: LIST
63428: LIST
63429: PUSH
63430: LD_INT 1
63432: PUSH
63433: LD_INT 2
63435: PUSH
63436: EMPTY
63437: LIST
63438: LIST
63439: PUSH
63440: EMPTY
63441: LIST
63442: LIST
63443: LIST
63444: LIST
63445: LIST
63446: LIST
63447: LIST
63448: LIST
63449: LIST
63450: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
63451: LD_ADDR_VAR 0 37
63455: PUSH
63456: LD_INT 0
63458: PUSH
63459: LD_INT 0
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: PUSH
63466: LD_INT 0
63468: PUSH
63469: LD_INT 1
63471: NEG
63472: PUSH
63473: EMPTY
63474: LIST
63475: LIST
63476: PUSH
63477: LD_INT 1
63479: PUSH
63480: LD_INT 0
63482: PUSH
63483: EMPTY
63484: LIST
63485: LIST
63486: PUSH
63487: LD_INT 1
63489: PUSH
63490: LD_INT 1
63492: PUSH
63493: EMPTY
63494: LIST
63495: LIST
63496: PUSH
63497: LD_INT 0
63499: PUSH
63500: LD_INT 1
63502: PUSH
63503: EMPTY
63504: LIST
63505: LIST
63506: PUSH
63507: LD_INT 1
63509: NEG
63510: PUSH
63511: LD_INT 0
63513: PUSH
63514: EMPTY
63515: LIST
63516: LIST
63517: PUSH
63518: LD_INT 1
63520: NEG
63521: PUSH
63522: LD_INT 1
63524: NEG
63525: PUSH
63526: EMPTY
63527: LIST
63528: LIST
63529: PUSH
63530: LD_INT 1
63532: PUSH
63533: LD_INT 1
63535: NEG
63536: PUSH
63537: EMPTY
63538: LIST
63539: LIST
63540: PUSH
63541: LD_INT 1
63543: NEG
63544: PUSH
63545: LD_INT 1
63547: PUSH
63548: EMPTY
63549: LIST
63550: LIST
63551: PUSH
63552: EMPTY
63553: LIST
63554: LIST
63555: LIST
63556: LIST
63557: LIST
63558: LIST
63559: LIST
63560: LIST
63561: LIST
63562: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
63563: LD_ADDR_VAR 0 38
63567: PUSH
63568: LD_INT 0
63570: PUSH
63571: LD_INT 0
63573: PUSH
63574: EMPTY
63575: LIST
63576: LIST
63577: PUSH
63578: LD_INT 0
63580: PUSH
63581: LD_INT 1
63583: NEG
63584: PUSH
63585: EMPTY
63586: LIST
63587: LIST
63588: PUSH
63589: LD_INT 1
63591: PUSH
63592: LD_INT 0
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: PUSH
63599: LD_INT 1
63601: PUSH
63602: LD_INT 1
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: PUSH
63609: LD_INT 0
63611: PUSH
63612: LD_INT 1
63614: PUSH
63615: EMPTY
63616: LIST
63617: LIST
63618: PUSH
63619: LD_INT 1
63621: NEG
63622: PUSH
63623: LD_INT 0
63625: PUSH
63626: EMPTY
63627: LIST
63628: LIST
63629: PUSH
63630: LD_INT 1
63632: NEG
63633: PUSH
63634: LD_INT 1
63636: NEG
63637: PUSH
63638: EMPTY
63639: LIST
63640: LIST
63641: PUSH
63642: LD_INT 2
63644: PUSH
63645: LD_INT 1
63647: PUSH
63648: EMPTY
63649: LIST
63650: LIST
63651: PUSH
63652: LD_INT 2
63654: NEG
63655: PUSH
63656: LD_INT 1
63658: NEG
63659: PUSH
63660: EMPTY
63661: LIST
63662: LIST
63663: PUSH
63664: EMPTY
63665: LIST
63666: LIST
63667: LIST
63668: LIST
63669: LIST
63670: LIST
63671: LIST
63672: LIST
63673: LIST
63674: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
63675: LD_ADDR_VAR 0 39
63679: PUSH
63680: LD_INT 0
63682: PUSH
63683: LD_INT 0
63685: PUSH
63686: EMPTY
63687: LIST
63688: LIST
63689: PUSH
63690: LD_INT 0
63692: PUSH
63693: LD_INT 1
63695: NEG
63696: PUSH
63697: EMPTY
63698: LIST
63699: LIST
63700: PUSH
63701: LD_INT 1
63703: PUSH
63704: LD_INT 0
63706: PUSH
63707: EMPTY
63708: LIST
63709: LIST
63710: PUSH
63711: LD_INT 1
63713: PUSH
63714: LD_INT 1
63716: PUSH
63717: EMPTY
63718: LIST
63719: LIST
63720: PUSH
63721: LD_INT 0
63723: PUSH
63724: LD_INT 1
63726: PUSH
63727: EMPTY
63728: LIST
63729: LIST
63730: PUSH
63731: LD_INT 1
63733: NEG
63734: PUSH
63735: LD_INT 0
63737: PUSH
63738: EMPTY
63739: LIST
63740: LIST
63741: PUSH
63742: LD_INT 1
63744: NEG
63745: PUSH
63746: LD_INT 1
63748: NEG
63749: PUSH
63750: EMPTY
63751: LIST
63752: LIST
63753: PUSH
63754: LD_INT 1
63756: NEG
63757: PUSH
63758: LD_INT 2
63760: NEG
63761: PUSH
63762: EMPTY
63763: LIST
63764: LIST
63765: PUSH
63766: LD_INT 1
63768: PUSH
63769: LD_INT 2
63771: PUSH
63772: EMPTY
63773: LIST
63774: LIST
63775: PUSH
63776: EMPTY
63777: LIST
63778: LIST
63779: LIST
63780: LIST
63781: LIST
63782: LIST
63783: LIST
63784: LIST
63785: LIST
63786: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
63787: LD_ADDR_VAR 0 40
63791: PUSH
63792: LD_INT 0
63794: PUSH
63795: LD_INT 0
63797: PUSH
63798: EMPTY
63799: LIST
63800: LIST
63801: PUSH
63802: LD_INT 0
63804: PUSH
63805: LD_INT 1
63807: NEG
63808: PUSH
63809: EMPTY
63810: LIST
63811: LIST
63812: PUSH
63813: LD_INT 1
63815: PUSH
63816: LD_INT 0
63818: PUSH
63819: EMPTY
63820: LIST
63821: LIST
63822: PUSH
63823: LD_INT 1
63825: PUSH
63826: LD_INT 1
63828: PUSH
63829: EMPTY
63830: LIST
63831: LIST
63832: PUSH
63833: LD_INT 0
63835: PUSH
63836: LD_INT 1
63838: PUSH
63839: EMPTY
63840: LIST
63841: LIST
63842: PUSH
63843: LD_INT 1
63845: NEG
63846: PUSH
63847: LD_INT 0
63849: PUSH
63850: EMPTY
63851: LIST
63852: LIST
63853: PUSH
63854: LD_INT 1
63856: NEG
63857: PUSH
63858: LD_INT 1
63860: NEG
63861: PUSH
63862: EMPTY
63863: LIST
63864: LIST
63865: PUSH
63866: LD_INT 1
63868: PUSH
63869: LD_INT 1
63871: NEG
63872: PUSH
63873: EMPTY
63874: LIST
63875: LIST
63876: PUSH
63877: LD_INT 1
63879: NEG
63880: PUSH
63881: LD_INT 1
63883: PUSH
63884: EMPTY
63885: LIST
63886: LIST
63887: PUSH
63888: EMPTY
63889: LIST
63890: LIST
63891: LIST
63892: LIST
63893: LIST
63894: LIST
63895: LIST
63896: LIST
63897: LIST
63898: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63899: LD_ADDR_VAR 0 41
63903: PUSH
63904: LD_INT 0
63906: PUSH
63907: LD_INT 0
63909: PUSH
63910: EMPTY
63911: LIST
63912: LIST
63913: PUSH
63914: LD_INT 0
63916: PUSH
63917: LD_INT 1
63919: NEG
63920: PUSH
63921: EMPTY
63922: LIST
63923: LIST
63924: PUSH
63925: LD_INT 1
63927: PUSH
63928: LD_INT 0
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: PUSH
63935: LD_INT 1
63937: PUSH
63938: LD_INT 1
63940: PUSH
63941: EMPTY
63942: LIST
63943: LIST
63944: PUSH
63945: LD_INT 0
63947: PUSH
63948: LD_INT 1
63950: PUSH
63951: EMPTY
63952: LIST
63953: LIST
63954: PUSH
63955: LD_INT 1
63957: NEG
63958: PUSH
63959: LD_INT 0
63961: PUSH
63962: EMPTY
63963: LIST
63964: LIST
63965: PUSH
63966: LD_INT 1
63968: NEG
63969: PUSH
63970: LD_INT 1
63972: NEG
63973: PUSH
63974: EMPTY
63975: LIST
63976: LIST
63977: PUSH
63978: LD_INT 1
63980: NEG
63981: PUSH
63982: LD_INT 2
63984: NEG
63985: PUSH
63986: EMPTY
63987: LIST
63988: LIST
63989: PUSH
63990: LD_INT 1
63992: PUSH
63993: LD_INT 1
63995: NEG
63996: PUSH
63997: EMPTY
63998: LIST
63999: LIST
64000: PUSH
64001: LD_INT 2
64003: PUSH
64004: LD_INT 0
64006: PUSH
64007: EMPTY
64008: LIST
64009: LIST
64010: PUSH
64011: LD_INT 2
64013: PUSH
64014: LD_INT 1
64016: PUSH
64017: EMPTY
64018: LIST
64019: LIST
64020: PUSH
64021: LD_INT 2
64023: PUSH
64024: LD_INT 2
64026: PUSH
64027: EMPTY
64028: LIST
64029: LIST
64030: PUSH
64031: LD_INT 1
64033: PUSH
64034: LD_INT 2
64036: PUSH
64037: EMPTY
64038: LIST
64039: LIST
64040: PUSH
64041: LD_INT 1
64043: NEG
64044: PUSH
64045: LD_INT 1
64047: PUSH
64048: EMPTY
64049: LIST
64050: LIST
64051: PUSH
64052: LD_INT 2
64054: NEG
64055: PUSH
64056: LD_INT 0
64058: PUSH
64059: EMPTY
64060: LIST
64061: LIST
64062: PUSH
64063: LD_INT 2
64065: NEG
64066: PUSH
64067: LD_INT 1
64069: NEG
64070: PUSH
64071: EMPTY
64072: LIST
64073: LIST
64074: PUSH
64075: LD_INT 2
64077: NEG
64078: PUSH
64079: LD_INT 2
64081: NEG
64082: PUSH
64083: EMPTY
64084: LIST
64085: LIST
64086: PUSH
64087: LD_INT 2
64089: NEG
64090: PUSH
64091: LD_INT 3
64093: NEG
64094: PUSH
64095: EMPTY
64096: LIST
64097: LIST
64098: PUSH
64099: LD_INT 2
64101: PUSH
64102: LD_INT 1
64104: NEG
64105: PUSH
64106: EMPTY
64107: LIST
64108: LIST
64109: PUSH
64110: LD_INT 3
64112: PUSH
64113: LD_INT 0
64115: PUSH
64116: EMPTY
64117: LIST
64118: LIST
64119: PUSH
64120: LD_INT 3
64122: PUSH
64123: LD_INT 1
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: PUSH
64130: LD_INT 3
64132: PUSH
64133: LD_INT 2
64135: PUSH
64136: EMPTY
64137: LIST
64138: LIST
64139: PUSH
64140: LD_INT 3
64142: PUSH
64143: LD_INT 3
64145: PUSH
64146: EMPTY
64147: LIST
64148: LIST
64149: PUSH
64150: LD_INT 2
64152: PUSH
64153: LD_INT 3
64155: PUSH
64156: EMPTY
64157: LIST
64158: LIST
64159: PUSH
64160: LD_INT 2
64162: NEG
64163: PUSH
64164: LD_INT 1
64166: PUSH
64167: EMPTY
64168: LIST
64169: LIST
64170: PUSH
64171: LD_INT 3
64173: NEG
64174: PUSH
64175: LD_INT 0
64177: PUSH
64178: EMPTY
64179: LIST
64180: LIST
64181: PUSH
64182: LD_INT 3
64184: NEG
64185: PUSH
64186: LD_INT 1
64188: NEG
64189: PUSH
64190: EMPTY
64191: LIST
64192: LIST
64193: PUSH
64194: LD_INT 3
64196: NEG
64197: PUSH
64198: LD_INT 2
64200: NEG
64201: PUSH
64202: EMPTY
64203: LIST
64204: LIST
64205: PUSH
64206: LD_INT 3
64208: NEG
64209: PUSH
64210: LD_INT 3
64212: NEG
64213: PUSH
64214: EMPTY
64215: LIST
64216: LIST
64217: PUSH
64218: EMPTY
64219: LIST
64220: LIST
64221: LIST
64222: LIST
64223: LIST
64224: LIST
64225: LIST
64226: LIST
64227: LIST
64228: LIST
64229: LIST
64230: LIST
64231: LIST
64232: LIST
64233: LIST
64234: LIST
64235: LIST
64236: LIST
64237: LIST
64238: LIST
64239: LIST
64240: LIST
64241: LIST
64242: LIST
64243: LIST
64244: LIST
64245: LIST
64246: LIST
64247: LIST
64248: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64249: LD_ADDR_VAR 0 42
64253: PUSH
64254: LD_INT 0
64256: PUSH
64257: LD_INT 0
64259: PUSH
64260: EMPTY
64261: LIST
64262: LIST
64263: PUSH
64264: LD_INT 0
64266: PUSH
64267: LD_INT 1
64269: NEG
64270: PUSH
64271: EMPTY
64272: LIST
64273: LIST
64274: PUSH
64275: LD_INT 1
64277: PUSH
64278: LD_INT 0
64280: PUSH
64281: EMPTY
64282: LIST
64283: LIST
64284: PUSH
64285: LD_INT 1
64287: PUSH
64288: LD_INT 1
64290: PUSH
64291: EMPTY
64292: LIST
64293: LIST
64294: PUSH
64295: LD_INT 0
64297: PUSH
64298: LD_INT 1
64300: PUSH
64301: EMPTY
64302: LIST
64303: LIST
64304: PUSH
64305: LD_INT 1
64307: NEG
64308: PUSH
64309: LD_INT 0
64311: PUSH
64312: EMPTY
64313: LIST
64314: LIST
64315: PUSH
64316: LD_INT 1
64318: NEG
64319: PUSH
64320: LD_INT 1
64322: NEG
64323: PUSH
64324: EMPTY
64325: LIST
64326: LIST
64327: PUSH
64328: LD_INT 1
64330: NEG
64331: PUSH
64332: LD_INT 2
64334: NEG
64335: PUSH
64336: EMPTY
64337: LIST
64338: LIST
64339: PUSH
64340: LD_INT 0
64342: PUSH
64343: LD_INT 2
64345: NEG
64346: PUSH
64347: EMPTY
64348: LIST
64349: LIST
64350: PUSH
64351: LD_INT 1
64353: PUSH
64354: LD_INT 1
64356: NEG
64357: PUSH
64358: EMPTY
64359: LIST
64360: LIST
64361: PUSH
64362: LD_INT 2
64364: PUSH
64365: LD_INT 1
64367: PUSH
64368: EMPTY
64369: LIST
64370: LIST
64371: PUSH
64372: LD_INT 2
64374: PUSH
64375: LD_INT 2
64377: PUSH
64378: EMPTY
64379: LIST
64380: LIST
64381: PUSH
64382: LD_INT 1
64384: PUSH
64385: LD_INT 2
64387: PUSH
64388: EMPTY
64389: LIST
64390: LIST
64391: PUSH
64392: LD_INT 0
64394: PUSH
64395: LD_INT 2
64397: PUSH
64398: EMPTY
64399: LIST
64400: LIST
64401: PUSH
64402: LD_INT 1
64404: NEG
64405: PUSH
64406: LD_INT 1
64408: PUSH
64409: EMPTY
64410: LIST
64411: LIST
64412: PUSH
64413: LD_INT 2
64415: NEG
64416: PUSH
64417: LD_INT 1
64419: NEG
64420: PUSH
64421: EMPTY
64422: LIST
64423: LIST
64424: PUSH
64425: LD_INT 2
64427: NEG
64428: PUSH
64429: LD_INT 2
64431: NEG
64432: PUSH
64433: EMPTY
64434: LIST
64435: LIST
64436: PUSH
64437: LD_INT 2
64439: NEG
64440: PUSH
64441: LD_INT 3
64443: NEG
64444: PUSH
64445: EMPTY
64446: LIST
64447: LIST
64448: PUSH
64449: LD_INT 1
64451: NEG
64452: PUSH
64453: LD_INT 3
64455: NEG
64456: PUSH
64457: EMPTY
64458: LIST
64459: LIST
64460: PUSH
64461: LD_INT 0
64463: PUSH
64464: LD_INT 3
64466: NEG
64467: PUSH
64468: EMPTY
64469: LIST
64470: LIST
64471: PUSH
64472: LD_INT 1
64474: PUSH
64475: LD_INT 2
64477: NEG
64478: PUSH
64479: EMPTY
64480: LIST
64481: LIST
64482: PUSH
64483: LD_INT 3
64485: PUSH
64486: LD_INT 2
64488: PUSH
64489: EMPTY
64490: LIST
64491: LIST
64492: PUSH
64493: LD_INT 3
64495: PUSH
64496: LD_INT 3
64498: PUSH
64499: EMPTY
64500: LIST
64501: LIST
64502: PUSH
64503: LD_INT 2
64505: PUSH
64506: LD_INT 3
64508: PUSH
64509: EMPTY
64510: LIST
64511: LIST
64512: PUSH
64513: LD_INT 1
64515: PUSH
64516: LD_INT 3
64518: PUSH
64519: EMPTY
64520: LIST
64521: LIST
64522: PUSH
64523: LD_INT 0
64525: PUSH
64526: LD_INT 3
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: PUSH
64533: LD_INT 1
64535: NEG
64536: PUSH
64537: LD_INT 2
64539: PUSH
64540: EMPTY
64541: LIST
64542: LIST
64543: PUSH
64544: LD_INT 3
64546: NEG
64547: PUSH
64548: LD_INT 2
64550: NEG
64551: PUSH
64552: EMPTY
64553: LIST
64554: LIST
64555: PUSH
64556: LD_INT 3
64558: NEG
64559: PUSH
64560: LD_INT 3
64562: NEG
64563: PUSH
64564: EMPTY
64565: LIST
64566: LIST
64567: PUSH
64568: EMPTY
64569: LIST
64570: LIST
64571: LIST
64572: LIST
64573: LIST
64574: LIST
64575: LIST
64576: LIST
64577: LIST
64578: LIST
64579: LIST
64580: LIST
64581: LIST
64582: LIST
64583: LIST
64584: LIST
64585: LIST
64586: LIST
64587: LIST
64588: LIST
64589: LIST
64590: LIST
64591: LIST
64592: LIST
64593: LIST
64594: LIST
64595: LIST
64596: LIST
64597: LIST
64598: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64599: LD_ADDR_VAR 0 43
64603: PUSH
64604: LD_INT 0
64606: PUSH
64607: LD_INT 0
64609: PUSH
64610: EMPTY
64611: LIST
64612: LIST
64613: PUSH
64614: LD_INT 0
64616: PUSH
64617: LD_INT 1
64619: NEG
64620: PUSH
64621: EMPTY
64622: LIST
64623: LIST
64624: PUSH
64625: LD_INT 1
64627: PUSH
64628: LD_INT 0
64630: PUSH
64631: EMPTY
64632: LIST
64633: LIST
64634: PUSH
64635: LD_INT 1
64637: PUSH
64638: LD_INT 1
64640: PUSH
64641: EMPTY
64642: LIST
64643: LIST
64644: PUSH
64645: LD_INT 0
64647: PUSH
64648: LD_INT 1
64650: PUSH
64651: EMPTY
64652: LIST
64653: LIST
64654: PUSH
64655: LD_INT 1
64657: NEG
64658: PUSH
64659: LD_INT 0
64661: PUSH
64662: EMPTY
64663: LIST
64664: LIST
64665: PUSH
64666: LD_INT 1
64668: NEG
64669: PUSH
64670: LD_INT 1
64672: NEG
64673: PUSH
64674: EMPTY
64675: LIST
64676: LIST
64677: PUSH
64678: LD_INT 1
64680: NEG
64681: PUSH
64682: LD_INT 2
64684: NEG
64685: PUSH
64686: EMPTY
64687: LIST
64688: LIST
64689: PUSH
64690: LD_INT 0
64692: PUSH
64693: LD_INT 2
64695: NEG
64696: PUSH
64697: EMPTY
64698: LIST
64699: LIST
64700: PUSH
64701: LD_INT 1
64703: PUSH
64704: LD_INT 1
64706: NEG
64707: PUSH
64708: EMPTY
64709: LIST
64710: LIST
64711: PUSH
64712: LD_INT 2
64714: PUSH
64715: LD_INT 0
64717: PUSH
64718: EMPTY
64719: LIST
64720: LIST
64721: PUSH
64722: LD_INT 2
64724: PUSH
64725: LD_INT 1
64727: PUSH
64728: EMPTY
64729: LIST
64730: LIST
64731: PUSH
64732: LD_INT 1
64734: PUSH
64735: LD_INT 2
64737: PUSH
64738: EMPTY
64739: LIST
64740: LIST
64741: PUSH
64742: LD_INT 0
64744: PUSH
64745: LD_INT 2
64747: PUSH
64748: EMPTY
64749: LIST
64750: LIST
64751: PUSH
64752: LD_INT 1
64754: NEG
64755: PUSH
64756: LD_INT 1
64758: PUSH
64759: EMPTY
64760: LIST
64761: LIST
64762: PUSH
64763: LD_INT 2
64765: NEG
64766: PUSH
64767: LD_INT 0
64769: PUSH
64770: EMPTY
64771: LIST
64772: LIST
64773: PUSH
64774: LD_INT 2
64776: NEG
64777: PUSH
64778: LD_INT 1
64780: NEG
64781: PUSH
64782: EMPTY
64783: LIST
64784: LIST
64785: PUSH
64786: LD_INT 1
64788: NEG
64789: PUSH
64790: LD_INT 3
64792: NEG
64793: PUSH
64794: EMPTY
64795: LIST
64796: LIST
64797: PUSH
64798: LD_INT 0
64800: PUSH
64801: LD_INT 3
64803: NEG
64804: PUSH
64805: EMPTY
64806: LIST
64807: LIST
64808: PUSH
64809: LD_INT 1
64811: PUSH
64812: LD_INT 2
64814: NEG
64815: PUSH
64816: EMPTY
64817: LIST
64818: LIST
64819: PUSH
64820: LD_INT 2
64822: PUSH
64823: LD_INT 1
64825: NEG
64826: PUSH
64827: EMPTY
64828: LIST
64829: LIST
64830: PUSH
64831: LD_INT 3
64833: PUSH
64834: LD_INT 0
64836: PUSH
64837: EMPTY
64838: LIST
64839: LIST
64840: PUSH
64841: LD_INT 3
64843: PUSH
64844: LD_INT 1
64846: PUSH
64847: EMPTY
64848: LIST
64849: LIST
64850: PUSH
64851: LD_INT 1
64853: PUSH
64854: LD_INT 3
64856: PUSH
64857: EMPTY
64858: LIST
64859: LIST
64860: PUSH
64861: LD_INT 0
64863: PUSH
64864: LD_INT 3
64866: PUSH
64867: EMPTY
64868: LIST
64869: LIST
64870: PUSH
64871: LD_INT 1
64873: NEG
64874: PUSH
64875: LD_INT 2
64877: PUSH
64878: EMPTY
64879: LIST
64880: LIST
64881: PUSH
64882: LD_INT 2
64884: NEG
64885: PUSH
64886: LD_INT 1
64888: PUSH
64889: EMPTY
64890: LIST
64891: LIST
64892: PUSH
64893: LD_INT 3
64895: NEG
64896: PUSH
64897: LD_INT 0
64899: PUSH
64900: EMPTY
64901: LIST
64902: LIST
64903: PUSH
64904: LD_INT 3
64906: NEG
64907: PUSH
64908: LD_INT 1
64910: NEG
64911: PUSH
64912: EMPTY
64913: LIST
64914: LIST
64915: PUSH
64916: EMPTY
64917: LIST
64918: LIST
64919: LIST
64920: LIST
64921: LIST
64922: LIST
64923: LIST
64924: LIST
64925: LIST
64926: LIST
64927: LIST
64928: LIST
64929: LIST
64930: LIST
64931: LIST
64932: LIST
64933: LIST
64934: LIST
64935: LIST
64936: LIST
64937: LIST
64938: LIST
64939: LIST
64940: LIST
64941: LIST
64942: LIST
64943: LIST
64944: LIST
64945: LIST
64946: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64947: LD_ADDR_VAR 0 44
64951: PUSH
64952: LD_INT 0
64954: PUSH
64955: LD_INT 0
64957: PUSH
64958: EMPTY
64959: LIST
64960: LIST
64961: PUSH
64962: LD_INT 0
64964: PUSH
64965: LD_INT 1
64967: NEG
64968: PUSH
64969: EMPTY
64970: LIST
64971: LIST
64972: PUSH
64973: LD_INT 1
64975: PUSH
64976: LD_INT 0
64978: PUSH
64979: EMPTY
64980: LIST
64981: LIST
64982: PUSH
64983: LD_INT 1
64985: PUSH
64986: LD_INT 1
64988: PUSH
64989: EMPTY
64990: LIST
64991: LIST
64992: PUSH
64993: LD_INT 0
64995: PUSH
64996: LD_INT 1
64998: PUSH
64999: EMPTY
65000: LIST
65001: LIST
65002: PUSH
65003: LD_INT 1
65005: NEG
65006: PUSH
65007: LD_INT 0
65009: PUSH
65010: EMPTY
65011: LIST
65012: LIST
65013: PUSH
65014: LD_INT 1
65016: NEG
65017: PUSH
65018: LD_INT 1
65020: NEG
65021: PUSH
65022: EMPTY
65023: LIST
65024: LIST
65025: PUSH
65026: LD_INT 1
65028: NEG
65029: PUSH
65030: LD_INT 2
65032: NEG
65033: PUSH
65034: EMPTY
65035: LIST
65036: LIST
65037: PUSH
65038: LD_INT 1
65040: PUSH
65041: LD_INT 1
65043: NEG
65044: PUSH
65045: EMPTY
65046: LIST
65047: LIST
65048: PUSH
65049: LD_INT 2
65051: PUSH
65052: LD_INT 0
65054: PUSH
65055: EMPTY
65056: LIST
65057: LIST
65058: PUSH
65059: LD_INT 2
65061: PUSH
65062: LD_INT 1
65064: PUSH
65065: EMPTY
65066: LIST
65067: LIST
65068: PUSH
65069: LD_INT 2
65071: PUSH
65072: LD_INT 2
65074: PUSH
65075: EMPTY
65076: LIST
65077: LIST
65078: PUSH
65079: LD_INT 1
65081: PUSH
65082: LD_INT 2
65084: PUSH
65085: EMPTY
65086: LIST
65087: LIST
65088: PUSH
65089: LD_INT 1
65091: NEG
65092: PUSH
65093: LD_INT 1
65095: PUSH
65096: EMPTY
65097: LIST
65098: LIST
65099: PUSH
65100: LD_INT 2
65102: NEG
65103: PUSH
65104: LD_INT 0
65106: PUSH
65107: EMPTY
65108: LIST
65109: LIST
65110: PUSH
65111: LD_INT 2
65113: NEG
65114: PUSH
65115: LD_INT 1
65117: NEG
65118: PUSH
65119: EMPTY
65120: LIST
65121: LIST
65122: PUSH
65123: LD_INT 2
65125: NEG
65126: PUSH
65127: LD_INT 2
65129: NEG
65130: PUSH
65131: EMPTY
65132: LIST
65133: LIST
65134: PUSH
65135: LD_INT 2
65137: NEG
65138: PUSH
65139: LD_INT 3
65141: NEG
65142: PUSH
65143: EMPTY
65144: LIST
65145: LIST
65146: PUSH
65147: LD_INT 2
65149: PUSH
65150: LD_INT 1
65152: NEG
65153: PUSH
65154: EMPTY
65155: LIST
65156: LIST
65157: PUSH
65158: LD_INT 3
65160: PUSH
65161: LD_INT 0
65163: PUSH
65164: EMPTY
65165: LIST
65166: LIST
65167: PUSH
65168: LD_INT 3
65170: PUSH
65171: LD_INT 1
65173: PUSH
65174: EMPTY
65175: LIST
65176: LIST
65177: PUSH
65178: LD_INT 3
65180: PUSH
65181: LD_INT 2
65183: PUSH
65184: EMPTY
65185: LIST
65186: LIST
65187: PUSH
65188: LD_INT 3
65190: PUSH
65191: LD_INT 3
65193: PUSH
65194: EMPTY
65195: LIST
65196: LIST
65197: PUSH
65198: LD_INT 2
65200: PUSH
65201: LD_INT 3
65203: PUSH
65204: EMPTY
65205: LIST
65206: LIST
65207: PUSH
65208: LD_INT 2
65210: NEG
65211: PUSH
65212: LD_INT 1
65214: PUSH
65215: EMPTY
65216: LIST
65217: LIST
65218: PUSH
65219: LD_INT 3
65221: NEG
65222: PUSH
65223: LD_INT 0
65225: PUSH
65226: EMPTY
65227: LIST
65228: LIST
65229: PUSH
65230: LD_INT 3
65232: NEG
65233: PUSH
65234: LD_INT 1
65236: NEG
65237: PUSH
65238: EMPTY
65239: LIST
65240: LIST
65241: PUSH
65242: LD_INT 3
65244: NEG
65245: PUSH
65246: LD_INT 2
65248: NEG
65249: PUSH
65250: EMPTY
65251: LIST
65252: LIST
65253: PUSH
65254: LD_INT 3
65256: NEG
65257: PUSH
65258: LD_INT 3
65260: NEG
65261: PUSH
65262: EMPTY
65263: LIST
65264: LIST
65265: PUSH
65266: EMPTY
65267: LIST
65268: LIST
65269: LIST
65270: LIST
65271: LIST
65272: LIST
65273: LIST
65274: LIST
65275: LIST
65276: LIST
65277: LIST
65278: LIST
65279: LIST
65280: LIST
65281: LIST
65282: LIST
65283: LIST
65284: LIST
65285: LIST
65286: LIST
65287: LIST
65288: LIST
65289: LIST
65290: LIST
65291: LIST
65292: LIST
65293: LIST
65294: LIST
65295: LIST
65296: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65297: LD_ADDR_VAR 0 45
65301: PUSH
65302: LD_INT 0
65304: PUSH
65305: LD_INT 0
65307: PUSH
65308: EMPTY
65309: LIST
65310: LIST
65311: PUSH
65312: LD_INT 0
65314: PUSH
65315: LD_INT 1
65317: NEG
65318: PUSH
65319: EMPTY
65320: LIST
65321: LIST
65322: PUSH
65323: LD_INT 1
65325: PUSH
65326: LD_INT 0
65328: PUSH
65329: EMPTY
65330: LIST
65331: LIST
65332: PUSH
65333: LD_INT 1
65335: PUSH
65336: LD_INT 1
65338: PUSH
65339: EMPTY
65340: LIST
65341: LIST
65342: PUSH
65343: LD_INT 0
65345: PUSH
65346: LD_INT 1
65348: PUSH
65349: EMPTY
65350: LIST
65351: LIST
65352: PUSH
65353: LD_INT 1
65355: NEG
65356: PUSH
65357: LD_INT 0
65359: PUSH
65360: EMPTY
65361: LIST
65362: LIST
65363: PUSH
65364: LD_INT 1
65366: NEG
65367: PUSH
65368: LD_INT 1
65370: NEG
65371: PUSH
65372: EMPTY
65373: LIST
65374: LIST
65375: PUSH
65376: LD_INT 1
65378: NEG
65379: PUSH
65380: LD_INT 2
65382: NEG
65383: PUSH
65384: EMPTY
65385: LIST
65386: LIST
65387: PUSH
65388: LD_INT 0
65390: PUSH
65391: LD_INT 2
65393: NEG
65394: PUSH
65395: EMPTY
65396: LIST
65397: LIST
65398: PUSH
65399: LD_INT 1
65401: PUSH
65402: LD_INT 1
65404: NEG
65405: PUSH
65406: EMPTY
65407: LIST
65408: LIST
65409: PUSH
65410: LD_INT 2
65412: PUSH
65413: LD_INT 1
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: PUSH
65420: LD_INT 2
65422: PUSH
65423: LD_INT 2
65425: PUSH
65426: EMPTY
65427: LIST
65428: LIST
65429: PUSH
65430: LD_INT 1
65432: PUSH
65433: LD_INT 2
65435: PUSH
65436: EMPTY
65437: LIST
65438: LIST
65439: PUSH
65440: LD_INT 0
65442: PUSH
65443: LD_INT 2
65445: PUSH
65446: EMPTY
65447: LIST
65448: LIST
65449: PUSH
65450: LD_INT 1
65452: NEG
65453: PUSH
65454: LD_INT 1
65456: PUSH
65457: EMPTY
65458: LIST
65459: LIST
65460: PUSH
65461: LD_INT 2
65463: NEG
65464: PUSH
65465: LD_INT 1
65467: NEG
65468: PUSH
65469: EMPTY
65470: LIST
65471: LIST
65472: PUSH
65473: LD_INT 2
65475: NEG
65476: PUSH
65477: LD_INT 2
65479: NEG
65480: PUSH
65481: EMPTY
65482: LIST
65483: LIST
65484: PUSH
65485: LD_INT 2
65487: NEG
65488: PUSH
65489: LD_INT 3
65491: NEG
65492: PUSH
65493: EMPTY
65494: LIST
65495: LIST
65496: PUSH
65497: LD_INT 1
65499: NEG
65500: PUSH
65501: LD_INT 3
65503: NEG
65504: PUSH
65505: EMPTY
65506: LIST
65507: LIST
65508: PUSH
65509: LD_INT 0
65511: PUSH
65512: LD_INT 3
65514: NEG
65515: PUSH
65516: EMPTY
65517: LIST
65518: LIST
65519: PUSH
65520: LD_INT 1
65522: PUSH
65523: LD_INT 2
65525: NEG
65526: PUSH
65527: EMPTY
65528: LIST
65529: LIST
65530: PUSH
65531: LD_INT 3
65533: PUSH
65534: LD_INT 2
65536: PUSH
65537: EMPTY
65538: LIST
65539: LIST
65540: PUSH
65541: LD_INT 3
65543: PUSH
65544: LD_INT 3
65546: PUSH
65547: EMPTY
65548: LIST
65549: LIST
65550: PUSH
65551: LD_INT 2
65553: PUSH
65554: LD_INT 3
65556: PUSH
65557: EMPTY
65558: LIST
65559: LIST
65560: PUSH
65561: LD_INT 1
65563: PUSH
65564: LD_INT 3
65566: PUSH
65567: EMPTY
65568: LIST
65569: LIST
65570: PUSH
65571: LD_INT 0
65573: PUSH
65574: LD_INT 3
65576: PUSH
65577: EMPTY
65578: LIST
65579: LIST
65580: PUSH
65581: LD_INT 1
65583: NEG
65584: PUSH
65585: LD_INT 2
65587: PUSH
65588: EMPTY
65589: LIST
65590: LIST
65591: PUSH
65592: LD_INT 3
65594: NEG
65595: PUSH
65596: LD_INT 2
65598: NEG
65599: PUSH
65600: EMPTY
65601: LIST
65602: LIST
65603: PUSH
65604: LD_INT 3
65606: NEG
65607: PUSH
65608: LD_INT 3
65610: NEG
65611: PUSH
65612: EMPTY
65613: LIST
65614: LIST
65615: PUSH
65616: EMPTY
65617: LIST
65618: LIST
65619: LIST
65620: LIST
65621: LIST
65622: LIST
65623: LIST
65624: LIST
65625: LIST
65626: LIST
65627: LIST
65628: LIST
65629: LIST
65630: LIST
65631: LIST
65632: LIST
65633: LIST
65634: LIST
65635: LIST
65636: LIST
65637: LIST
65638: LIST
65639: LIST
65640: LIST
65641: LIST
65642: LIST
65643: LIST
65644: LIST
65645: LIST
65646: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65647: LD_ADDR_VAR 0 46
65651: PUSH
65652: LD_INT 0
65654: PUSH
65655: LD_INT 0
65657: PUSH
65658: EMPTY
65659: LIST
65660: LIST
65661: PUSH
65662: LD_INT 0
65664: PUSH
65665: LD_INT 1
65667: NEG
65668: PUSH
65669: EMPTY
65670: LIST
65671: LIST
65672: PUSH
65673: LD_INT 1
65675: PUSH
65676: LD_INT 0
65678: PUSH
65679: EMPTY
65680: LIST
65681: LIST
65682: PUSH
65683: LD_INT 1
65685: PUSH
65686: LD_INT 1
65688: PUSH
65689: EMPTY
65690: LIST
65691: LIST
65692: PUSH
65693: LD_INT 0
65695: PUSH
65696: LD_INT 1
65698: PUSH
65699: EMPTY
65700: LIST
65701: LIST
65702: PUSH
65703: LD_INT 1
65705: NEG
65706: PUSH
65707: LD_INT 0
65709: PUSH
65710: EMPTY
65711: LIST
65712: LIST
65713: PUSH
65714: LD_INT 1
65716: NEG
65717: PUSH
65718: LD_INT 1
65720: NEG
65721: PUSH
65722: EMPTY
65723: LIST
65724: LIST
65725: PUSH
65726: LD_INT 1
65728: NEG
65729: PUSH
65730: LD_INT 2
65732: NEG
65733: PUSH
65734: EMPTY
65735: LIST
65736: LIST
65737: PUSH
65738: LD_INT 0
65740: PUSH
65741: LD_INT 2
65743: NEG
65744: PUSH
65745: EMPTY
65746: LIST
65747: LIST
65748: PUSH
65749: LD_INT 1
65751: PUSH
65752: LD_INT 1
65754: NEG
65755: PUSH
65756: EMPTY
65757: LIST
65758: LIST
65759: PUSH
65760: LD_INT 2
65762: PUSH
65763: LD_INT 0
65765: PUSH
65766: EMPTY
65767: LIST
65768: LIST
65769: PUSH
65770: LD_INT 2
65772: PUSH
65773: LD_INT 1
65775: PUSH
65776: EMPTY
65777: LIST
65778: LIST
65779: PUSH
65780: LD_INT 1
65782: PUSH
65783: LD_INT 2
65785: PUSH
65786: EMPTY
65787: LIST
65788: LIST
65789: PUSH
65790: LD_INT 0
65792: PUSH
65793: LD_INT 2
65795: PUSH
65796: EMPTY
65797: LIST
65798: LIST
65799: PUSH
65800: LD_INT 1
65802: NEG
65803: PUSH
65804: LD_INT 1
65806: PUSH
65807: EMPTY
65808: LIST
65809: LIST
65810: PUSH
65811: LD_INT 2
65813: NEG
65814: PUSH
65815: LD_INT 0
65817: PUSH
65818: EMPTY
65819: LIST
65820: LIST
65821: PUSH
65822: LD_INT 2
65824: NEG
65825: PUSH
65826: LD_INT 1
65828: NEG
65829: PUSH
65830: EMPTY
65831: LIST
65832: LIST
65833: PUSH
65834: LD_INT 1
65836: NEG
65837: PUSH
65838: LD_INT 3
65840: NEG
65841: PUSH
65842: EMPTY
65843: LIST
65844: LIST
65845: PUSH
65846: LD_INT 0
65848: PUSH
65849: LD_INT 3
65851: NEG
65852: PUSH
65853: EMPTY
65854: LIST
65855: LIST
65856: PUSH
65857: LD_INT 1
65859: PUSH
65860: LD_INT 2
65862: NEG
65863: PUSH
65864: EMPTY
65865: LIST
65866: LIST
65867: PUSH
65868: LD_INT 2
65870: PUSH
65871: LD_INT 1
65873: NEG
65874: PUSH
65875: EMPTY
65876: LIST
65877: LIST
65878: PUSH
65879: LD_INT 3
65881: PUSH
65882: LD_INT 0
65884: PUSH
65885: EMPTY
65886: LIST
65887: LIST
65888: PUSH
65889: LD_INT 3
65891: PUSH
65892: LD_INT 1
65894: PUSH
65895: EMPTY
65896: LIST
65897: LIST
65898: PUSH
65899: LD_INT 1
65901: PUSH
65902: LD_INT 3
65904: PUSH
65905: EMPTY
65906: LIST
65907: LIST
65908: PUSH
65909: LD_INT 0
65911: PUSH
65912: LD_INT 3
65914: PUSH
65915: EMPTY
65916: LIST
65917: LIST
65918: PUSH
65919: LD_INT 1
65921: NEG
65922: PUSH
65923: LD_INT 2
65925: PUSH
65926: EMPTY
65927: LIST
65928: LIST
65929: PUSH
65930: LD_INT 2
65932: NEG
65933: PUSH
65934: LD_INT 1
65936: PUSH
65937: EMPTY
65938: LIST
65939: LIST
65940: PUSH
65941: LD_INT 3
65943: NEG
65944: PUSH
65945: LD_INT 0
65947: PUSH
65948: EMPTY
65949: LIST
65950: LIST
65951: PUSH
65952: LD_INT 3
65954: NEG
65955: PUSH
65956: LD_INT 1
65958: NEG
65959: PUSH
65960: EMPTY
65961: LIST
65962: LIST
65963: PUSH
65964: EMPTY
65965: LIST
65966: LIST
65967: LIST
65968: LIST
65969: LIST
65970: LIST
65971: LIST
65972: LIST
65973: LIST
65974: LIST
65975: LIST
65976: LIST
65977: LIST
65978: LIST
65979: LIST
65980: LIST
65981: LIST
65982: LIST
65983: LIST
65984: LIST
65985: LIST
65986: LIST
65987: LIST
65988: LIST
65989: LIST
65990: LIST
65991: LIST
65992: LIST
65993: LIST
65994: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65995: LD_ADDR_VAR 0 47
65999: PUSH
66000: LD_INT 0
66002: PUSH
66003: LD_INT 0
66005: PUSH
66006: EMPTY
66007: LIST
66008: LIST
66009: PUSH
66010: LD_INT 0
66012: PUSH
66013: LD_INT 1
66015: NEG
66016: PUSH
66017: EMPTY
66018: LIST
66019: LIST
66020: PUSH
66021: LD_INT 1
66023: PUSH
66024: LD_INT 0
66026: PUSH
66027: EMPTY
66028: LIST
66029: LIST
66030: PUSH
66031: LD_INT 1
66033: PUSH
66034: LD_INT 1
66036: PUSH
66037: EMPTY
66038: LIST
66039: LIST
66040: PUSH
66041: LD_INT 0
66043: PUSH
66044: LD_INT 1
66046: PUSH
66047: EMPTY
66048: LIST
66049: LIST
66050: PUSH
66051: LD_INT 1
66053: NEG
66054: PUSH
66055: LD_INT 0
66057: PUSH
66058: EMPTY
66059: LIST
66060: LIST
66061: PUSH
66062: LD_INT 1
66064: NEG
66065: PUSH
66066: LD_INT 1
66068: NEG
66069: PUSH
66070: EMPTY
66071: LIST
66072: LIST
66073: PUSH
66074: LD_INT 1
66076: NEG
66077: PUSH
66078: LD_INT 2
66080: NEG
66081: PUSH
66082: EMPTY
66083: LIST
66084: LIST
66085: PUSH
66086: LD_INT 0
66088: PUSH
66089: LD_INT 2
66091: NEG
66092: PUSH
66093: EMPTY
66094: LIST
66095: LIST
66096: PUSH
66097: LD_INT 1
66099: PUSH
66100: LD_INT 1
66102: NEG
66103: PUSH
66104: EMPTY
66105: LIST
66106: LIST
66107: PUSH
66108: LD_INT 2
66110: NEG
66111: PUSH
66112: LD_INT 1
66114: NEG
66115: PUSH
66116: EMPTY
66117: LIST
66118: LIST
66119: PUSH
66120: LD_INT 2
66122: NEG
66123: PUSH
66124: LD_INT 2
66126: NEG
66127: PUSH
66128: EMPTY
66129: LIST
66130: LIST
66131: PUSH
66132: EMPTY
66133: LIST
66134: LIST
66135: LIST
66136: LIST
66137: LIST
66138: LIST
66139: LIST
66140: LIST
66141: LIST
66142: LIST
66143: LIST
66144: LIST
66145: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66146: LD_ADDR_VAR 0 48
66150: PUSH
66151: LD_INT 0
66153: PUSH
66154: LD_INT 0
66156: PUSH
66157: EMPTY
66158: LIST
66159: LIST
66160: PUSH
66161: LD_INT 0
66163: PUSH
66164: LD_INT 1
66166: NEG
66167: PUSH
66168: EMPTY
66169: LIST
66170: LIST
66171: PUSH
66172: LD_INT 1
66174: PUSH
66175: LD_INT 0
66177: PUSH
66178: EMPTY
66179: LIST
66180: LIST
66181: PUSH
66182: LD_INT 1
66184: PUSH
66185: LD_INT 1
66187: PUSH
66188: EMPTY
66189: LIST
66190: LIST
66191: PUSH
66192: LD_INT 0
66194: PUSH
66195: LD_INT 1
66197: PUSH
66198: EMPTY
66199: LIST
66200: LIST
66201: PUSH
66202: LD_INT 1
66204: NEG
66205: PUSH
66206: LD_INT 0
66208: PUSH
66209: EMPTY
66210: LIST
66211: LIST
66212: PUSH
66213: LD_INT 1
66215: NEG
66216: PUSH
66217: LD_INT 1
66219: NEG
66220: PUSH
66221: EMPTY
66222: LIST
66223: LIST
66224: PUSH
66225: LD_INT 1
66227: NEG
66228: PUSH
66229: LD_INT 2
66231: NEG
66232: PUSH
66233: EMPTY
66234: LIST
66235: LIST
66236: PUSH
66237: LD_INT 0
66239: PUSH
66240: LD_INT 2
66242: NEG
66243: PUSH
66244: EMPTY
66245: LIST
66246: LIST
66247: PUSH
66248: LD_INT 1
66250: PUSH
66251: LD_INT 1
66253: NEG
66254: PUSH
66255: EMPTY
66256: LIST
66257: LIST
66258: PUSH
66259: LD_INT 2
66261: PUSH
66262: LD_INT 0
66264: PUSH
66265: EMPTY
66266: LIST
66267: LIST
66268: PUSH
66269: LD_INT 2
66271: PUSH
66272: LD_INT 1
66274: PUSH
66275: EMPTY
66276: LIST
66277: LIST
66278: PUSH
66279: EMPTY
66280: LIST
66281: LIST
66282: LIST
66283: LIST
66284: LIST
66285: LIST
66286: LIST
66287: LIST
66288: LIST
66289: LIST
66290: LIST
66291: LIST
66292: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66293: LD_ADDR_VAR 0 49
66297: PUSH
66298: LD_INT 0
66300: PUSH
66301: LD_INT 0
66303: PUSH
66304: EMPTY
66305: LIST
66306: LIST
66307: PUSH
66308: LD_INT 0
66310: PUSH
66311: LD_INT 1
66313: NEG
66314: PUSH
66315: EMPTY
66316: LIST
66317: LIST
66318: PUSH
66319: LD_INT 1
66321: PUSH
66322: LD_INT 0
66324: PUSH
66325: EMPTY
66326: LIST
66327: LIST
66328: PUSH
66329: LD_INT 1
66331: PUSH
66332: LD_INT 1
66334: PUSH
66335: EMPTY
66336: LIST
66337: LIST
66338: PUSH
66339: LD_INT 0
66341: PUSH
66342: LD_INT 1
66344: PUSH
66345: EMPTY
66346: LIST
66347: LIST
66348: PUSH
66349: LD_INT 1
66351: NEG
66352: PUSH
66353: LD_INT 0
66355: PUSH
66356: EMPTY
66357: LIST
66358: LIST
66359: PUSH
66360: LD_INT 1
66362: NEG
66363: PUSH
66364: LD_INT 1
66366: NEG
66367: PUSH
66368: EMPTY
66369: LIST
66370: LIST
66371: PUSH
66372: LD_INT 1
66374: PUSH
66375: LD_INT 1
66377: NEG
66378: PUSH
66379: EMPTY
66380: LIST
66381: LIST
66382: PUSH
66383: LD_INT 2
66385: PUSH
66386: LD_INT 0
66388: PUSH
66389: EMPTY
66390: LIST
66391: LIST
66392: PUSH
66393: LD_INT 2
66395: PUSH
66396: LD_INT 1
66398: PUSH
66399: EMPTY
66400: LIST
66401: LIST
66402: PUSH
66403: LD_INT 2
66405: PUSH
66406: LD_INT 2
66408: PUSH
66409: EMPTY
66410: LIST
66411: LIST
66412: PUSH
66413: LD_INT 1
66415: PUSH
66416: LD_INT 2
66418: PUSH
66419: EMPTY
66420: LIST
66421: LIST
66422: PUSH
66423: EMPTY
66424: LIST
66425: LIST
66426: LIST
66427: LIST
66428: LIST
66429: LIST
66430: LIST
66431: LIST
66432: LIST
66433: LIST
66434: LIST
66435: LIST
66436: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
66437: LD_ADDR_VAR 0 50
66441: PUSH
66442: LD_INT 0
66444: PUSH
66445: LD_INT 0
66447: PUSH
66448: EMPTY
66449: LIST
66450: LIST
66451: PUSH
66452: LD_INT 0
66454: PUSH
66455: LD_INT 1
66457: NEG
66458: PUSH
66459: EMPTY
66460: LIST
66461: LIST
66462: PUSH
66463: LD_INT 1
66465: PUSH
66466: LD_INT 0
66468: PUSH
66469: EMPTY
66470: LIST
66471: LIST
66472: PUSH
66473: LD_INT 1
66475: PUSH
66476: LD_INT 1
66478: PUSH
66479: EMPTY
66480: LIST
66481: LIST
66482: PUSH
66483: LD_INT 0
66485: PUSH
66486: LD_INT 1
66488: PUSH
66489: EMPTY
66490: LIST
66491: LIST
66492: PUSH
66493: LD_INT 1
66495: NEG
66496: PUSH
66497: LD_INT 0
66499: PUSH
66500: EMPTY
66501: LIST
66502: LIST
66503: PUSH
66504: LD_INT 1
66506: NEG
66507: PUSH
66508: LD_INT 1
66510: NEG
66511: PUSH
66512: EMPTY
66513: LIST
66514: LIST
66515: PUSH
66516: LD_INT 2
66518: PUSH
66519: LD_INT 1
66521: PUSH
66522: EMPTY
66523: LIST
66524: LIST
66525: PUSH
66526: LD_INT 2
66528: PUSH
66529: LD_INT 2
66531: PUSH
66532: EMPTY
66533: LIST
66534: LIST
66535: PUSH
66536: LD_INT 1
66538: PUSH
66539: LD_INT 2
66541: PUSH
66542: EMPTY
66543: LIST
66544: LIST
66545: PUSH
66546: LD_INT 0
66548: PUSH
66549: LD_INT 2
66551: PUSH
66552: EMPTY
66553: LIST
66554: LIST
66555: PUSH
66556: LD_INT 1
66558: NEG
66559: PUSH
66560: LD_INT 1
66562: PUSH
66563: EMPTY
66564: LIST
66565: LIST
66566: PUSH
66567: EMPTY
66568: LIST
66569: LIST
66570: LIST
66571: LIST
66572: LIST
66573: LIST
66574: LIST
66575: LIST
66576: LIST
66577: LIST
66578: LIST
66579: LIST
66580: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
66581: LD_ADDR_VAR 0 51
66585: PUSH
66586: LD_INT 0
66588: PUSH
66589: LD_INT 0
66591: PUSH
66592: EMPTY
66593: LIST
66594: LIST
66595: PUSH
66596: LD_INT 0
66598: PUSH
66599: LD_INT 1
66601: NEG
66602: PUSH
66603: EMPTY
66604: LIST
66605: LIST
66606: PUSH
66607: LD_INT 1
66609: PUSH
66610: LD_INT 0
66612: PUSH
66613: EMPTY
66614: LIST
66615: LIST
66616: PUSH
66617: LD_INT 1
66619: PUSH
66620: LD_INT 1
66622: PUSH
66623: EMPTY
66624: LIST
66625: LIST
66626: PUSH
66627: LD_INT 0
66629: PUSH
66630: LD_INT 1
66632: PUSH
66633: EMPTY
66634: LIST
66635: LIST
66636: PUSH
66637: LD_INT 1
66639: NEG
66640: PUSH
66641: LD_INT 0
66643: PUSH
66644: EMPTY
66645: LIST
66646: LIST
66647: PUSH
66648: LD_INT 1
66650: NEG
66651: PUSH
66652: LD_INT 1
66654: NEG
66655: PUSH
66656: EMPTY
66657: LIST
66658: LIST
66659: PUSH
66660: LD_INT 1
66662: PUSH
66663: LD_INT 2
66665: PUSH
66666: EMPTY
66667: LIST
66668: LIST
66669: PUSH
66670: LD_INT 0
66672: PUSH
66673: LD_INT 2
66675: PUSH
66676: EMPTY
66677: LIST
66678: LIST
66679: PUSH
66680: LD_INT 1
66682: NEG
66683: PUSH
66684: LD_INT 1
66686: PUSH
66687: EMPTY
66688: LIST
66689: LIST
66690: PUSH
66691: LD_INT 2
66693: NEG
66694: PUSH
66695: LD_INT 0
66697: PUSH
66698: EMPTY
66699: LIST
66700: LIST
66701: PUSH
66702: LD_INT 2
66704: NEG
66705: PUSH
66706: LD_INT 1
66708: NEG
66709: PUSH
66710: EMPTY
66711: LIST
66712: LIST
66713: PUSH
66714: EMPTY
66715: LIST
66716: LIST
66717: LIST
66718: LIST
66719: LIST
66720: LIST
66721: LIST
66722: LIST
66723: LIST
66724: LIST
66725: LIST
66726: LIST
66727: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66728: LD_ADDR_VAR 0 52
66732: PUSH
66733: LD_INT 0
66735: PUSH
66736: LD_INT 0
66738: PUSH
66739: EMPTY
66740: LIST
66741: LIST
66742: PUSH
66743: LD_INT 0
66745: PUSH
66746: LD_INT 1
66748: NEG
66749: PUSH
66750: EMPTY
66751: LIST
66752: LIST
66753: PUSH
66754: LD_INT 1
66756: PUSH
66757: LD_INT 0
66759: PUSH
66760: EMPTY
66761: LIST
66762: LIST
66763: PUSH
66764: LD_INT 1
66766: PUSH
66767: LD_INT 1
66769: PUSH
66770: EMPTY
66771: LIST
66772: LIST
66773: PUSH
66774: LD_INT 0
66776: PUSH
66777: LD_INT 1
66779: PUSH
66780: EMPTY
66781: LIST
66782: LIST
66783: PUSH
66784: LD_INT 1
66786: NEG
66787: PUSH
66788: LD_INT 0
66790: PUSH
66791: EMPTY
66792: LIST
66793: LIST
66794: PUSH
66795: LD_INT 1
66797: NEG
66798: PUSH
66799: LD_INT 1
66801: NEG
66802: PUSH
66803: EMPTY
66804: LIST
66805: LIST
66806: PUSH
66807: LD_INT 1
66809: NEG
66810: PUSH
66811: LD_INT 2
66813: NEG
66814: PUSH
66815: EMPTY
66816: LIST
66817: LIST
66818: PUSH
66819: LD_INT 1
66821: NEG
66822: PUSH
66823: LD_INT 1
66825: PUSH
66826: EMPTY
66827: LIST
66828: LIST
66829: PUSH
66830: LD_INT 2
66832: NEG
66833: PUSH
66834: LD_INT 0
66836: PUSH
66837: EMPTY
66838: LIST
66839: LIST
66840: PUSH
66841: LD_INT 2
66843: NEG
66844: PUSH
66845: LD_INT 1
66847: NEG
66848: PUSH
66849: EMPTY
66850: LIST
66851: LIST
66852: PUSH
66853: LD_INT 2
66855: NEG
66856: PUSH
66857: LD_INT 2
66859: NEG
66860: PUSH
66861: EMPTY
66862: LIST
66863: LIST
66864: PUSH
66865: EMPTY
66866: LIST
66867: LIST
66868: LIST
66869: LIST
66870: LIST
66871: LIST
66872: LIST
66873: LIST
66874: LIST
66875: LIST
66876: LIST
66877: LIST
66878: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66879: LD_ADDR_VAR 0 53
66883: PUSH
66884: LD_INT 0
66886: PUSH
66887: LD_INT 0
66889: PUSH
66890: EMPTY
66891: LIST
66892: LIST
66893: PUSH
66894: LD_INT 0
66896: PUSH
66897: LD_INT 1
66899: NEG
66900: PUSH
66901: EMPTY
66902: LIST
66903: LIST
66904: PUSH
66905: LD_INT 1
66907: PUSH
66908: LD_INT 0
66910: PUSH
66911: EMPTY
66912: LIST
66913: LIST
66914: PUSH
66915: LD_INT 1
66917: PUSH
66918: LD_INT 1
66920: PUSH
66921: EMPTY
66922: LIST
66923: LIST
66924: PUSH
66925: LD_INT 0
66927: PUSH
66928: LD_INT 1
66930: PUSH
66931: EMPTY
66932: LIST
66933: LIST
66934: PUSH
66935: LD_INT 1
66937: NEG
66938: PUSH
66939: LD_INT 0
66941: PUSH
66942: EMPTY
66943: LIST
66944: LIST
66945: PUSH
66946: LD_INT 1
66948: NEG
66949: PUSH
66950: LD_INT 1
66952: NEG
66953: PUSH
66954: EMPTY
66955: LIST
66956: LIST
66957: PUSH
66958: LD_INT 1
66960: NEG
66961: PUSH
66962: LD_INT 2
66964: NEG
66965: PUSH
66966: EMPTY
66967: LIST
66968: LIST
66969: PUSH
66970: LD_INT 0
66972: PUSH
66973: LD_INT 2
66975: NEG
66976: PUSH
66977: EMPTY
66978: LIST
66979: LIST
66980: PUSH
66981: LD_INT 1
66983: PUSH
66984: LD_INT 1
66986: NEG
66987: PUSH
66988: EMPTY
66989: LIST
66990: LIST
66991: PUSH
66992: LD_INT 2
66994: PUSH
66995: LD_INT 0
66997: PUSH
66998: EMPTY
66999: LIST
67000: LIST
67001: PUSH
67002: LD_INT 2
67004: PUSH
67005: LD_INT 1
67007: PUSH
67008: EMPTY
67009: LIST
67010: LIST
67011: PUSH
67012: LD_INT 2
67014: PUSH
67015: LD_INT 2
67017: PUSH
67018: EMPTY
67019: LIST
67020: LIST
67021: PUSH
67022: LD_INT 1
67024: PUSH
67025: LD_INT 2
67027: PUSH
67028: EMPTY
67029: LIST
67030: LIST
67031: PUSH
67032: LD_INT 0
67034: PUSH
67035: LD_INT 2
67037: PUSH
67038: EMPTY
67039: LIST
67040: LIST
67041: PUSH
67042: LD_INT 1
67044: NEG
67045: PUSH
67046: LD_INT 1
67048: PUSH
67049: EMPTY
67050: LIST
67051: LIST
67052: PUSH
67053: LD_INT 2
67055: NEG
67056: PUSH
67057: LD_INT 0
67059: PUSH
67060: EMPTY
67061: LIST
67062: LIST
67063: PUSH
67064: LD_INT 2
67066: NEG
67067: PUSH
67068: LD_INT 1
67070: NEG
67071: PUSH
67072: EMPTY
67073: LIST
67074: LIST
67075: PUSH
67076: LD_INT 2
67078: NEG
67079: PUSH
67080: LD_INT 2
67082: NEG
67083: PUSH
67084: EMPTY
67085: LIST
67086: LIST
67087: PUSH
67088: EMPTY
67089: LIST
67090: LIST
67091: LIST
67092: LIST
67093: LIST
67094: LIST
67095: LIST
67096: LIST
67097: LIST
67098: LIST
67099: LIST
67100: LIST
67101: LIST
67102: LIST
67103: LIST
67104: LIST
67105: LIST
67106: LIST
67107: LIST
67108: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67109: LD_ADDR_VAR 0 54
67113: PUSH
67114: LD_INT 0
67116: PUSH
67117: LD_INT 0
67119: PUSH
67120: EMPTY
67121: LIST
67122: LIST
67123: PUSH
67124: LD_INT 0
67126: PUSH
67127: LD_INT 1
67129: NEG
67130: PUSH
67131: EMPTY
67132: LIST
67133: LIST
67134: PUSH
67135: LD_INT 1
67137: PUSH
67138: LD_INT 0
67140: PUSH
67141: EMPTY
67142: LIST
67143: LIST
67144: PUSH
67145: LD_INT 1
67147: PUSH
67148: LD_INT 1
67150: PUSH
67151: EMPTY
67152: LIST
67153: LIST
67154: PUSH
67155: LD_INT 0
67157: PUSH
67158: LD_INT 1
67160: PUSH
67161: EMPTY
67162: LIST
67163: LIST
67164: PUSH
67165: LD_INT 1
67167: NEG
67168: PUSH
67169: LD_INT 0
67171: PUSH
67172: EMPTY
67173: LIST
67174: LIST
67175: PUSH
67176: LD_INT 1
67178: NEG
67179: PUSH
67180: LD_INT 1
67182: NEG
67183: PUSH
67184: EMPTY
67185: LIST
67186: LIST
67187: PUSH
67188: LD_INT 1
67190: NEG
67191: PUSH
67192: LD_INT 2
67194: NEG
67195: PUSH
67196: EMPTY
67197: LIST
67198: LIST
67199: PUSH
67200: LD_INT 0
67202: PUSH
67203: LD_INT 2
67205: NEG
67206: PUSH
67207: EMPTY
67208: LIST
67209: LIST
67210: PUSH
67211: LD_INT 1
67213: PUSH
67214: LD_INT 1
67216: NEG
67217: PUSH
67218: EMPTY
67219: LIST
67220: LIST
67221: PUSH
67222: LD_INT 2
67224: PUSH
67225: LD_INT 0
67227: PUSH
67228: EMPTY
67229: LIST
67230: LIST
67231: PUSH
67232: LD_INT 2
67234: PUSH
67235: LD_INT 1
67237: PUSH
67238: EMPTY
67239: LIST
67240: LIST
67241: PUSH
67242: LD_INT 2
67244: PUSH
67245: LD_INT 2
67247: PUSH
67248: EMPTY
67249: LIST
67250: LIST
67251: PUSH
67252: LD_INT 1
67254: PUSH
67255: LD_INT 2
67257: PUSH
67258: EMPTY
67259: LIST
67260: LIST
67261: PUSH
67262: LD_INT 0
67264: PUSH
67265: LD_INT 2
67267: PUSH
67268: EMPTY
67269: LIST
67270: LIST
67271: PUSH
67272: LD_INT 1
67274: NEG
67275: PUSH
67276: LD_INT 1
67278: PUSH
67279: EMPTY
67280: LIST
67281: LIST
67282: PUSH
67283: LD_INT 2
67285: NEG
67286: PUSH
67287: LD_INT 0
67289: PUSH
67290: EMPTY
67291: LIST
67292: LIST
67293: PUSH
67294: LD_INT 2
67296: NEG
67297: PUSH
67298: LD_INT 1
67300: NEG
67301: PUSH
67302: EMPTY
67303: LIST
67304: LIST
67305: PUSH
67306: LD_INT 2
67308: NEG
67309: PUSH
67310: LD_INT 2
67312: NEG
67313: PUSH
67314: EMPTY
67315: LIST
67316: LIST
67317: PUSH
67318: EMPTY
67319: LIST
67320: LIST
67321: LIST
67322: LIST
67323: LIST
67324: LIST
67325: LIST
67326: LIST
67327: LIST
67328: LIST
67329: LIST
67330: LIST
67331: LIST
67332: LIST
67333: LIST
67334: LIST
67335: LIST
67336: LIST
67337: LIST
67338: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67339: LD_ADDR_VAR 0 55
67343: PUSH
67344: LD_INT 0
67346: PUSH
67347: LD_INT 0
67349: PUSH
67350: EMPTY
67351: LIST
67352: LIST
67353: PUSH
67354: LD_INT 0
67356: PUSH
67357: LD_INT 1
67359: NEG
67360: PUSH
67361: EMPTY
67362: LIST
67363: LIST
67364: PUSH
67365: LD_INT 1
67367: PUSH
67368: LD_INT 0
67370: PUSH
67371: EMPTY
67372: LIST
67373: LIST
67374: PUSH
67375: LD_INT 1
67377: PUSH
67378: LD_INT 1
67380: PUSH
67381: EMPTY
67382: LIST
67383: LIST
67384: PUSH
67385: LD_INT 0
67387: PUSH
67388: LD_INT 1
67390: PUSH
67391: EMPTY
67392: LIST
67393: LIST
67394: PUSH
67395: LD_INT 1
67397: NEG
67398: PUSH
67399: LD_INT 0
67401: PUSH
67402: EMPTY
67403: LIST
67404: LIST
67405: PUSH
67406: LD_INT 1
67408: NEG
67409: PUSH
67410: LD_INT 1
67412: NEG
67413: PUSH
67414: EMPTY
67415: LIST
67416: LIST
67417: PUSH
67418: LD_INT 1
67420: NEG
67421: PUSH
67422: LD_INT 2
67424: NEG
67425: PUSH
67426: EMPTY
67427: LIST
67428: LIST
67429: PUSH
67430: LD_INT 0
67432: PUSH
67433: LD_INT 2
67435: NEG
67436: PUSH
67437: EMPTY
67438: LIST
67439: LIST
67440: PUSH
67441: LD_INT 1
67443: PUSH
67444: LD_INT 1
67446: NEG
67447: PUSH
67448: EMPTY
67449: LIST
67450: LIST
67451: PUSH
67452: LD_INT 2
67454: PUSH
67455: LD_INT 0
67457: PUSH
67458: EMPTY
67459: LIST
67460: LIST
67461: PUSH
67462: LD_INT 2
67464: PUSH
67465: LD_INT 1
67467: PUSH
67468: EMPTY
67469: LIST
67470: LIST
67471: PUSH
67472: LD_INT 2
67474: PUSH
67475: LD_INT 2
67477: PUSH
67478: EMPTY
67479: LIST
67480: LIST
67481: PUSH
67482: LD_INT 1
67484: PUSH
67485: LD_INT 2
67487: PUSH
67488: EMPTY
67489: LIST
67490: LIST
67491: PUSH
67492: LD_INT 0
67494: PUSH
67495: LD_INT 2
67497: PUSH
67498: EMPTY
67499: LIST
67500: LIST
67501: PUSH
67502: LD_INT 1
67504: NEG
67505: PUSH
67506: LD_INT 1
67508: PUSH
67509: EMPTY
67510: LIST
67511: LIST
67512: PUSH
67513: LD_INT 2
67515: NEG
67516: PUSH
67517: LD_INT 0
67519: PUSH
67520: EMPTY
67521: LIST
67522: LIST
67523: PUSH
67524: LD_INT 2
67526: NEG
67527: PUSH
67528: LD_INT 1
67530: NEG
67531: PUSH
67532: EMPTY
67533: LIST
67534: LIST
67535: PUSH
67536: LD_INT 2
67538: NEG
67539: PUSH
67540: LD_INT 2
67542: NEG
67543: PUSH
67544: EMPTY
67545: LIST
67546: LIST
67547: PUSH
67548: EMPTY
67549: LIST
67550: LIST
67551: LIST
67552: LIST
67553: LIST
67554: LIST
67555: LIST
67556: LIST
67557: LIST
67558: LIST
67559: LIST
67560: LIST
67561: LIST
67562: LIST
67563: LIST
67564: LIST
67565: LIST
67566: LIST
67567: LIST
67568: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67569: LD_ADDR_VAR 0 56
67573: PUSH
67574: LD_INT 0
67576: PUSH
67577: LD_INT 0
67579: PUSH
67580: EMPTY
67581: LIST
67582: LIST
67583: PUSH
67584: LD_INT 0
67586: PUSH
67587: LD_INT 1
67589: NEG
67590: PUSH
67591: EMPTY
67592: LIST
67593: LIST
67594: PUSH
67595: LD_INT 1
67597: PUSH
67598: LD_INT 0
67600: PUSH
67601: EMPTY
67602: LIST
67603: LIST
67604: PUSH
67605: LD_INT 1
67607: PUSH
67608: LD_INT 1
67610: PUSH
67611: EMPTY
67612: LIST
67613: LIST
67614: PUSH
67615: LD_INT 0
67617: PUSH
67618: LD_INT 1
67620: PUSH
67621: EMPTY
67622: LIST
67623: LIST
67624: PUSH
67625: LD_INT 1
67627: NEG
67628: PUSH
67629: LD_INT 0
67631: PUSH
67632: EMPTY
67633: LIST
67634: LIST
67635: PUSH
67636: LD_INT 1
67638: NEG
67639: PUSH
67640: LD_INT 1
67642: NEG
67643: PUSH
67644: EMPTY
67645: LIST
67646: LIST
67647: PUSH
67648: LD_INT 1
67650: NEG
67651: PUSH
67652: LD_INT 2
67654: NEG
67655: PUSH
67656: EMPTY
67657: LIST
67658: LIST
67659: PUSH
67660: LD_INT 0
67662: PUSH
67663: LD_INT 2
67665: NEG
67666: PUSH
67667: EMPTY
67668: LIST
67669: LIST
67670: PUSH
67671: LD_INT 1
67673: PUSH
67674: LD_INT 1
67676: NEG
67677: PUSH
67678: EMPTY
67679: LIST
67680: LIST
67681: PUSH
67682: LD_INT 2
67684: PUSH
67685: LD_INT 0
67687: PUSH
67688: EMPTY
67689: LIST
67690: LIST
67691: PUSH
67692: LD_INT 2
67694: PUSH
67695: LD_INT 1
67697: PUSH
67698: EMPTY
67699: LIST
67700: LIST
67701: PUSH
67702: LD_INT 2
67704: PUSH
67705: LD_INT 2
67707: PUSH
67708: EMPTY
67709: LIST
67710: LIST
67711: PUSH
67712: LD_INT 1
67714: PUSH
67715: LD_INT 2
67717: PUSH
67718: EMPTY
67719: LIST
67720: LIST
67721: PUSH
67722: LD_INT 0
67724: PUSH
67725: LD_INT 2
67727: PUSH
67728: EMPTY
67729: LIST
67730: LIST
67731: PUSH
67732: LD_INT 1
67734: NEG
67735: PUSH
67736: LD_INT 1
67738: PUSH
67739: EMPTY
67740: LIST
67741: LIST
67742: PUSH
67743: LD_INT 2
67745: NEG
67746: PUSH
67747: LD_INT 0
67749: PUSH
67750: EMPTY
67751: LIST
67752: LIST
67753: PUSH
67754: LD_INT 2
67756: NEG
67757: PUSH
67758: LD_INT 1
67760: NEG
67761: PUSH
67762: EMPTY
67763: LIST
67764: LIST
67765: PUSH
67766: LD_INT 2
67768: NEG
67769: PUSH
67770: LD_INT 2
67772: NEG
67773: PUSH
67774: EMPTY
67775: LIST
67776: LIST
67777: PUSH
67778: EMPTY
67779: LIST
67780: LIST
67781: LIST
67782: LIST
67783: LIST
67784: LIST
67785: LIST
67786: LIST
67787: LIST
67788: LIST
67789: LIST
67790: LIST
67791: LIST
67792: LIST
67793: LIST
67794: LIST
67795: LIST
67796: LIST
67797: LIST
67798: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67799: LD_ADDR_VAR 0 57
67803: PUSH
67804: LD_INT 0
67806: PUSH
67807: LD_INT 0
67809: PUSH
67810: EMPTY
67811: LIST
67812: LIST
67813: PUSH
67814: LD_INT 0
67816: PUSH
67817: LD_INT 1
67819: NEG
67820: PUSH
67821: EMPTY
67822: LIST
67823: LIST
67824: PUSH
67825: LD_INT 1
67827: PUSH
67828: LD_INT 0
67830: PUSH
67831: EMPTY
67832: LIST
67833: LIST
67834: PUSH
67835: LD_INT 1
67837: PUSH
67838: LD_INT 1
67840: PUSH
67841: EMPTY
67842: LIST
67843: LIST
67844: PUSH
67845: LD_INT 0
67847: PUSH
67848: LD_INT 1
67850: PUSH
67851: EMPTY
67852: LIST
67853: LIST
67854: PUSH
67855: LD_INT 1
67857: NEG
67858: PUSH
67859: LD_INT 0
67861: PUSH
67862: EMPTY
67863: LIST
67864: LIST
67865: PUSH
67866: LD_INT 1
67868: NEG
67869: PUSH
67870: LD_INT 1
67872: NEG
67873: PUSH
67874: EMPTY
67875: LIST
67876: LIST
67877: PUSH
67878: LD_INT 1
67880: NEG
67881: PUSH
67882: LD_INT 2
67884: NEG
67885: PUSH
67886: EMPTY
67887: LIST
67888: LIST
67889: PUSH
67890: LD_INT 0
67892: PUSH
67893: LD_INT 2
67895: NEG
67896: PUSH
67897: EMPTY
67898: LIST
67899: LIST
67900: PUSH
67901: LD_INT 1
67903: PUSH
67904: LD_INT 1
67906: NEG
67907: PUSH
67908: EMPTY
67909: LIST
67910: LIST
67911: PUSH
67912: LD_INT 2
67914: PUSH
67915: LD_INT 0
67917: PUSH
67918: EMPTY
67919: LIST
67920: LIST
67921: PUSH
67922: LD_INT 2
67924: PUSH
67925: LD_INT 1
67927: PUSH
67928: EMPTY
67929: LIST
67930: LIST
67931: PUSH
67932: LD_INT 2
67934: PUSH
67935: LD_INT 2
67937: PUSH
67938: EMPTY
67939: LIST
67940: LIST
67941: PUSH
67942: LD_INT 1
67944: PUSH
67945: LD_INT 2
67947: PUSH
67948: EMPTY
67949: LIST
67950: LIST
67951: PUSH
67952: LD_INT 0
67954: PUSH
67955: LD_INT 2
67957: PUSH
67958: EMPTY
67959: LIST
67960: LIST
67961: PUSH
67962: LD_INT 1
67964: NEG
67965: PUSH
67966: LD_INT 1
67968: PUSH
67969: EMPTY
67970: LIST
67971: LIST
67972: PUSH
67973: LD_INT 2
67975: NEG
67976: PUSH
67977: LD_INT 0
67979: PUSH
67980: EMPTY
67981: LIST
67982: LIST
67983: PUSH
67984: LD_INT 2
67986: NEG
67987: PUSH
67988: LD_INT 1
67990: NEG
67991: PUSH
67992: EMPTY
67993: LIST
67994: LIST
67995: PUSH
67996: LD_INT 2
67998: NEG
67999: PUSH
68000: LD_INT 2
68002: NEG
68003: PUSH
68004: EMPTY
68005: LIST
68006: LIST
68007: PUSH
68008: EMPTY
68009: LIST
68010: LIST
68011: LIST
68012: LIST
68013: LIST
68014: LIST
68015: LIST
68016: LIST
68017: LIST
68018: LIST
68019: LIST
68020: LIST
68021: LIST
68022: LIST
68023: LIST
68024: LIST
68025: LIST
68026: LIST
68027: LIST
68028: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68029: LD_ADDR_VAR 0 58
68033: PUSH
68034: LD_INT 0
68036: PUSH
68037: LD_INT 0
68039: PUSH
68040: EMPTY
68041: LIST
68042: LIST
68043: PUSH
68044: LD_INT 0
68046: PUSH
68047: LD_INT 1
68049: NEG
68050: PUSH
68051: EMPTY
68052: LIST
68053: LIST
68054: PUSH
68055: LD_INT 1
68057: PUSH
68058: LD_INT 0
68060: PUSH
68061: EMPTY
68062: LIST
68063: LIST
68064: PUSH
68065: LD_INT 1
68067: PUSH
68068: LD_INT 1
68070: PUSH
68071: EMPTY
68072: LIST
68073: LIST
68074: PUSH
68075: LD_INT 0
68077: PUSH
68078: LD_INT 1
68080: PUSH
68081: EMPTY
68082: LIST
68083: LIST
68084: PUSH
68085: LD_INT 1
68087: NEG
68088: PUSH
68089: LD_INT 0
68091: PUSH
68092: EMPTY
68093: LIST
68094: LIST
68095: PUSH
68096: LD_INT 1
68098: NEG
68099: PUSH
68100: LD_INT 1
68102: NEG
68103: PUSH
68104: EMPTY
68105: LIST
68106: LIST
68107: PUSH
68108: LD_INT 1
68110: NEG
68111: PUSH
68112: LD_INT 2
68114: NEG
68115: PUSH
68116: EMPTY
68117: LIST
68118: LIST
68119: PUSH
68120: LD_INT 0
68122: PUSH
68123: LD_INT 2
68125: NEG
68126: PUSH
68127: EMPTY
68128: LIST
68129: LIST
68130: PUSH
68131: LD_INT 1
68133: PUSH
68134: LD_INT 1
68136: NEG
68137: PUSH
68138: EMPTY
68139: LIST
68140: LIST
68141: PUSH
68142: LD_INT 2
68144: PUSH
68145: LD_INT 0
68147: PUSH
68148: EMPTY
68149: LIST
68150: LIST
68151: PUSH
68152: LD_INT 2
68154: PUSH
68155: LD_INT 1
68157: PUSH
68158: EMPTY
68159: LIST
68160: LIST
68161: PUSH
68162: LD_INT 2
68164: PUSH
68165: LD_INT 2
68167: PUSH
68168: EMPTY
68169: LIST
68170: LIST
68171: PUSH
68172: LD_INT 1
68174: PUSH
68175: LD_INT 2
68177: PUSH
68178: EMPTY
68179: LIST
68180: LIST
68181: PUSH
68182: LD_INT 0
68184: PUSH
68185: LD_INT 2
68187: PUSH
68188: EMPTY
68189: LIST
68190: LIST
68191: PUSH
68192: LD_INT 1
68194: NEG
68195: PUSH
68196: LD_INT 1
68198: PUSH
68199: EMPTY
68200: LIST
68201: LIST
68202: PUSH
68203: LD_INT 2
68205: NEG
68206: PUSH
68207: LD_INT 0
68209: PUSH
68210: EMPTY
68211: LIST
68212: LIST
68213: PUSH
68214: LD_INT 2
68216: NEG
68217: PUSH
68218: LD_INT 1
68220: NEG
68221: PUSH
68222: EMPTY
68223: LIST
68224: LIST
68225: PUSH
68226: LD_INT 2
68228: NEG
68229: PUSH
68230: LD_INT 2
68232: NEG
68233: PUSH
68234: EMPTY
68235: LIST
68236: LIST
68237: PUSH
68238: EMPTY
68239: LIST
68240: LIST
68241: LIST
68242: LIST
68243: LIST
68244: LIST
68245: LIST
68246: LIST
68247: LIST
68248: LIST
68249: LIST
68250: LIST
68251: LIST
68252: LIST
68253: LIST
68254: LIST
68255: LIST
68256: LIST
68257: LIST
68258: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68259: LD_ADDR_VAR 0 59
68263: PUSH
68264: LD_INT 0
68266: PUSH
68267: LD_INT 0
68269: PUSH
68270: EMPTY
68271: LIST
68272: LIST
68273: PUSH
68274: LD_INT 0
68276: PUSH
68277: LD_INT 1
68279: NEG
68280: PUSH
68281: EMPTY
68282: LIST
68283: LIST
68284: PUSH
68285: LD_INT 1
68287: PUSH
68288: LD_INT 0
68290: PUSH
68291: EMPTY
68292: LIST
68293: LIST
68294: PUSH
68295: LD_INT 1
68297: PUSH
68298: LD_INT 1
68300: PUSH
68301: EMPTY
68302: LIST
68303: LIST
68304: PUSH
68305: LD_INT 0
68307: PUSH
68308: LD_INT 1
68310: PUSH
68311: EMPTY
68312: LIST
68313: LIST
68314: PUSH
68315: LD_INT 1
68317: NEG
68318: PUSH
68319: LD_INT 0
68321: PUSH
68322: EMPTY
68323: LIST
68324: LIST
68325: PUSH
68326: LD_INT 1
68328: NEG
68329: PUSH
68330: LD_INT 1
68332: NEG
68333: PUSH
68334: EMPTY
68335: LIST
68336: LIST
68337: PUSH
68338: EMPTY
68339: LIST
68340: LIST
68341: LIST
68342: LIST
68343: LIST
68344: LIST
68345: LIST
68346: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68347: LD_ADDR_VAR 0 60
68351: PUSH
68352: LD_INT 0
68354: PUSH
68355: LD_INT 0
68357: PUSH
68358: EMPTY
68359: LIST
68360: LIST
68361: PUSH
68362: LD_INT 0
68364: PUSH
68365: LD_INT 1
68367: NEG
68368: PUSH
68369: EMPTY
68370: LIST
68371: LIST
68372: PUSH
68373: LD_INT 1
68375: PUSH
68376: LD_INT 0
68378: PUSH
68379: EMPTY
68380: LIST
68381: LIST
68382: PUSH
68383: LD_INT 1
68385: PUSH
68386: LD_INT 1
68388: PUSH
68389: EMPTY
68390: LIST
68391: LIST
68392: PUSH
68393: LD_INT 0
68395: PUSH
68396: LD_INT 1
68398: PUSH
68399: EMPTY
68400: LIST
68401: LIST
68402: PUSH
68403: LD_INT 1
68405: NEG
68406: PUSH
68407: LD_INT 0
68409: PUSH
68410: EMPTY
68411: LIST
68412: LIST
68413: PUSH
68414: LD_INT 1
68416: NEG
68417: PUSH
68418: LD_INT 1
68420: NEG
68421: PUSH
68422: EMPTY
68423: LIST
68424: LIST
68425: PUSH
68426: EMPTY
68427: LIST
68428: LIST
68429: LIST
68430: LIST
68431: LIST
68432: LIST
68433: LIST
68434: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68435: LD_ADDR_VAR 0 61
68439: PUSH
68440: LD_INT 0
68442: PUSH
68443: LD_INT 0
68445: PUSH
68446: EMPTY
68447: LIST
68448: LIST
68449: PUSH
68450: LD_INT 0
68452: PUSH
68453: LD_INT 1
68455: NEG
68456: PUSH
68457: EMPTY
68458: LIST
68459: LIST
68460: PUSH
68461: LD_INT 1
68463: PUSH
68464: LD_INT 0
68466: PUSH
68467: EMPTY
68468: LIST
68469: LIST
68470: PUSH
68471: LD_INT 1
68473: PUSH
68474: LD_INT 1
68476: PUSH
68477: EMPTY
68478: LIST
68479: LIST
68480: PUSH
68481: LD_INT 0
68483: PUSH
68484: LD_INT 1
68486: PUSH
68487: EMPTY
68488: LIST
68489: LIST
68490: PUSH
68491: LD_INT 1
68493: NEG
68494: PUSH
68495: LD_INT 0
68497: PUSH
68498: EMPTY
68499: LIST
68500: LIST
68501: PUSH
68502: LD_INT 1
68504: NEG
68505: PUSH
68506: LD_INT 1
68508: NEG
68509: PUSH
68510: EMPTY
68511: LIST
68512: LIST
68513: PUSH
68514: EMPTY
68515: LIST
68516: LIST
68517: LIST
68518: LIST
68519: LIST
68520: LIST
68521: LIST
68522: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68523: LD_ADDR_VAR 0 62
68527: PUSH
68528: LD_INT 0
68530: PUSH
68531: LD_INT 0
68533: PUSH
68534: EMPTY
68535: LIST
68536: LIST
68537: PUSH
68538: LD_INT 0
68540: PUSH
68541: LD_INT 1
68543: NEG
68544: PUSH
68545: EMPTY
68546: LIST
68547: LIST
68548: PUSH
68549: LD_INT 1
68551: PUSH
68552: LD_INT 0
68554: PUSH
68555: EMPTY
68556: LIST
68557: LIST
68558: PUSH
68559: LD_INT 1
68561: PUSH
68562: LD_INT 1
68564: PUSH
68565: EMPTY
68566: LIST
68567: LIST
68568: PUSH
68569: LD_INT 0
68571: PUSH
68572: LD_INT 1
68574: PUSH
68575: EMPTY
68576: LIST
68577: LIST
68578: PUSH
68579: LD_INT 1
68581: NEG
68582: PUSH
68583: LD_INT 0
68585: PUSH
68586: EMPTY
68587: LIST
68588: LIST
68589: PUSH
68590: LD_INT 1
68592: NEG
68593: PUSH
68594: LD_INT 1
68596: NEG
68597: PUSH
68598: EMPTY
68599: LIST
68600: LIST
68601: PUSH
68602: EMPTY
68603: LIST
68604: LIST
68605: LIST
68606: LIST
68607: LIST
68608: LIST
68609: LIST
68610: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68611: LD_ADDR_VAR 0 63
68615: PUSH
68616: LD_INT 0
68618: PUSH
68619: LD_INT 0
68621: PUSH
68622: EMPTY
68623: LIST
68624: LIST
68625: PUSH
68626: LD_INT 0
68628: PUSH
68629: LD_INT 1
68631: NEG
68632: PUSH
68633: EMPTY
68634: LIST
68635: LIST
68636: PUSH
68637: LD_INT 1
68639: PUSH
68640: LD_INT 0
68642: PUSH
68643: EMPTY
68644: LIST
68645: LIST
68646: PUSH
68647: LD_INT 1
68649: PUSH
68650: LD_INT 1
68652: PUSH
68653: EMPTY
68654: LIST
68655: LIST
68656: PUSH
68657: LD_INT 0
68659: PUSH
68660: LD_INT 1
68662: PUSH
68663: EMPTY
68664: LIST
68665: LIST
68666: PUSH
68667: LD_INT 1
68669: NEG
68670: PUSH
68671: LD_INT 0
68673: PUSH
68674: EMPTY
68675: LIST
68676: LIST
68677: PUSH
68678: LD_INT 1
68680: NEG
68681: PUSH
68682: LD_INT 1
68684: NEG
68685: PUSH
68686: EMPTY
68687: LIST
68688: LIST
68689: PUSH
68690: EMPTY
68691: LIST
68692: LIST
68693: LIST
68694: LIST
68695: LIST
68696: LIST
68697: LIST
68698: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68699: LD_ADDR_VAR 0 64
68703: PUSH
68704: LD_INT 0
68706: PUSH
68707: LD_INT 0
68709: PUSH
68710: EMPTY
68711: LIST
68712: LIST
68713: PUSH
68714: LD_INT 0
68716: PUSH
68717: LD_INT 1
68719: NEG
68720: PUSH
68721: EMPTY
68722: LIST
68723: LIST
68724: PUSH
68725: LD_INT 1
68727: PUSH
68728: LD_INT 0
68730: PUSH
68731: EMPTY
68732: LIST
68733: LIST
68734: PUSH
68735: LD_INT 1
68737: PUSH
68738: LD_INT 1
68740: PUSH
68741: EMPTY
68742: LIST
68743: LIST
68744: PUSH
68745: LD_INT 0
68747: PUSH
68748: LD_INT 1
68750: PUSH
68751: EMPTY
68752: LIST
68753: LIST
68754: PUSH
68755: LD_INT 1
68757: NEG
68758: PUSH
68759: LD_INT 0
68761: PUSH
68762: EMPTY
68763: LIST
68764: LIST
68765: PUSH
68766: LD_INT 1
68768: NEG
68769: PUSH
68770: LD_INT 1
68772: NEG
68773: PUSH
68774: EMPTY
68775: LIST
68776: LIST
68777: PUSH
68778: EMPTY
68779: LIST
68780: LIST
68781: LIST
68782: LIST
68783: LIST
68784: LIST
68785: LIST
68786: ST_TO_ADDR
// end ; 1 :
68787: GO 74684
68789: LD_INT 1
68791: DOUBLE
68792: EQUAL
68793: IFTRUE 68797
68795: GO 71420
68797: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68798: LD_ADDR_VAR 0 11
68802: PUSH
68803: LD_INT 1
68805: NEG
68806: PUSH
68807: LD_INT 3
68809: NEG
68810: PUSH
68811: EMPTY
68812: LIST
68813: LIST
68814: PUSH
68815: LD_INT 0
68817: PUSH
68818: LD_INT 3
68820: NEG
68821: PUSH
68822: EMPTY
68823: LIST
68824: LIST
68825: PUSH
68826: LD_INT 1
68828: PUSH
68829: LD_INT 2
68831: NEG
68832: PUSH
68833: EMPTY
68834: LIST
68835: LIST
68836: PUSH
68837: EMPTY
68838: LIST
68839: LIST
68840: LIST
68841: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68842: LD_ADDR_VAR 0 12
68846: PUSH
68847: LD_INT 2
68849: PUSH
68850: LD_INT 1
68852: NEG
68853: PUSH
68854: EMPTY
68855: LIST
68856: LIST
68857: PUSH
68858: LD_INT 3
68860: PUSH
68861: LD_INT 0
68863: PUSH
68864: EMPTY
68865: LIST
68866: LIST
68867: PUSH
68868: LD_INT 3
68870: PUSH
68871: LD_INT 1
68873: PUSH
68874: EMPTY
68875: LIST
68876: LIST
68877: PUSH
68878: EMPTY
68879: LIST
68880: LIST
68881: LIST
68882: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68883: LD_ADDR_VAR 0 13
68887: PUSH
68888: LD_INT 3
68890: PUSH
68891: LD_INT 2
68893: PUSH
68894: EMPTY
68895: LIST
68896: LIST
68897: PUSH
68898: LD_INT 3
68900: PUSH
68901: LD_INT 3
68903: PUSH
68904: EMPTY
68905: LIST
68906: LIST
68907: PUSH
68908: LD_INT 2
68910: PUSH
68911: LD_INT 3
68913: PUSH
68914: EMPTY
68915: LIST
68916: LIST
68917: PUSH
68918: EMPTY
68919: LIST
68920: LIST
68921: LIST
68922: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68923: LD_ADDR_VAR 0 14
68927: PUSH
68928: LD_INT 1
68930: PUSH
68931: LD_INT 3
68933: PUSH
68934: EMPTY
68935: LIST
68936: LIST
68937: PUSH
68938: LD_INT 0
68940: PUSH
68941: LD_INT 3
68943: PUSH
68944: EMPTY
68945: LIST
68946: LIST
68947: PUSH
68948: LD_INT 1
68950: NEG
68951: PUSH
68952: LD_INT 2
68954: PUSH
68955: EMPTY
68956: LIST
68957: LIST
68958: PUSH
68959: EMPTY
68960: LIST
68961: LIST
68962: LIST
68963: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68964: LD_ADDR_VAR 0 15
68968: PUSH
68969: LD_INT 2
68971: NEG
68972: PUSH
68973: LD_INT 1
68975: PUSH
68976: EMPTY
68977: LIST
68978: LIST
68979: PUSH
68980: LD_INT 3
68982: NEG
68983: PUSH
68984: LD_INT 0
68986: PUSH
68987: EMPTY
68988: LIST
68989: LIST
68990: PUSH
68991: LD_INT 3
68993: NEG
68994: PUSH
68995: LD_INT 1
68997: NEG
68998: PUSH
68999: EMPTY
69000: LIST
69001: LIST
69002: PUSH
69003: EMPTY
69004: LIST
69005: LIST
69006: LIST
69007: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69008: LD_ADDR_VAR 0 16
69012: PUSH
69013: LD_INT 2
69015: NEG
69016: PUSH
69017: LD_INT 3
69019: NEG
69020: PUSH
69021: EMPTY
69022: LIST
69023: LIST
69024: PUSH
69025: LD_INT 3
69027: NEG
69028: PUSH
69029: LD_INT 2
69031: NEG
69032: PUSH
69033: EMPTY
69034: LIST
69035: LIST
69036: PUSH
69037: LD_INT 3
69039: NEG
69040: PUSH
69041: LD_INT 3
69043: NEG
69044: PUSH
69045: EMPTY
69046: LIST
69047: LIST
69048: PUSH
69049: EMPTY
69050: LIST
69051: LIST
69052: LIST
69053: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69054: LD_ADDR_VAR 0 17
69058: PUSH
69059: LD_INT 1
69061: NEG
69062: PUSH
69063: LD_INT 3
69065: NEG
69066: PUSH
69067: EMPTY
69068: LIST
69069: LIST
69070: PUSH
69071: LD_INT 0
69073: PUSH
69074: LD_INT 3
69076: NEG
69077: PUSH
69078: EMPTY
69079: LIST
69080: LIST
69081: PUSH
69082: LD_INT 1
69084: PUSH
69085: LD_INT 2
69087: NEG
69088: PUSH
69089: EMPTY
69090: LIST
69091: LIST
69092: PUSH
69093: EMPTY
69094: LIST
69095: LIST
69096: LIST
69097: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69098: LD_ADDR_VAR 0 18
69102: PUSH
69103: LD_INT 2
69105: PUSH
69106: LD_INT 1
69108: NEG
69109: PUSH
69110: EMPTY
69111: LIST
69112: LIST
69113: PUSH
69114: LD_INT 3
69116: PUSH
69117: LD_INT 0
69119: PUSH
69120: EMPTY
69121: LIST
69122: LIST
69123: PUSH
69124: LD_INT 3
69126: PUSH
69127: LD_INT 1
69129: PUSH
69130: EMPTY
69131: LIST
69132: LIST
69133: PUSH
69134: EMPTY
69135: LIST
69136: LIST
69137: LIST
69138: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69139: LD_ADDR_VAR 0 19
69143: PUSH
69144: LD_INT 3
69146: PUSH
69147: LD_INT 2
69149: PUSH
69150: EMPTY
69151: LIST
69152: LIST
69153: PUSH
69154: LD_INT 3
69156: PUSH
69157: LD_INT 3
69159: PUSH
69160: EMPTY
69161: LIST
69162: LIST
69163: PUSH
69164: LD_INT 2
69166: PUSH
69167: LD_INT 3
69169: PUSH
69170: EMPTY
69171: LIST
69172: LIST
69173: PUSH
69174: EMPTY
69175: LIST
69176: LIST
69177: LIST
69178: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69179: LD_ADDR_VAR 0 20
69183: PUSH
69184: LD_INT 1
69186: PUSH
69187: LD_INT 3
69189: PUSH
69190: EMPTY
69191: LIST
69192: LIST
69193: PUSH
69194: LD_INT 0
69196: PUSH
69197: LD_INT 3
69199: PUSH
69200: EMPTY
69201: LIST
69202: LIST
69203: PUSH
69204: LD_INT 1
69206: NEG
69207: PUSH
69208: LD_INT 2
69210: PUSH
69211: EMPTY
69212: LIST
69213: LIST
69214: PUSH
69215: EMPTY
69216: LIST
69217: LIST
69218: LIST
69219: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69220: LD_ADDR_VAR 0 21
69224: PUSH
69225: LD_INT 2
69227: NEG
69228: PUSH
69229: LD_INT 1
69231: PUSH
69232: EMPTY
69233: LIST
69234: LIST
69235: PUSH
69236: LD_INT 3
69238: NEG
69239: PUSH
69240: LD_INT 0
69242: PUSH
69243: EMPTY
69244: LIST
69245: LIST
69246: PUSH
69247: LD_INT 3
69249: NEG
69250: PUSH
69251: LD_INT 1
69253: NEG
69254: PUSH
69255: EMPTY
69256: LIST
69257: LIST
69258: PUSH
69259: EMPTY
69260: LIST
69261: LIST
69262: LIST
69263: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69264: LD_ADDR_VAR 0 22
69268: PUSH
69269: LD_INT 2
69271: NEG
69272: PUSH
69273: LD_INT 3
69275: NEG
69276: PUSH
69277: EMPTY
69278: LIST
69279: LIST
69280: PUSH
69281: LD_INT 3
69283: NEG
69284: PUSH
69285: LD_INT 2
69287: NEG
69288: PUSH
69289: EMPTY
69290: LIST
69291: LIST
69292: PUSH
69293: LD_INT 3
69295: NEG
69296: PUSH
69297: LD_INT 3
69299: NEG
69300: PUSH
69301: EMPTY
69302: LIST
69303: LIST
69304: PUSH
69305: EMPTY
69306: LIST
69307: LIST
69308: LIST
69309: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
69310: LD_ADDR_VAR 0 23
69314: PUSH
69315: LD_INT 0
69317: PUSH
69318: LD_INT 3
69320: NEG
69321: PUSH
69322: EMPTY
69323: LIST
69324: LIST
69325: PUSH
69326: LD_INT 1
69328: NEG
69329: PUSH
69330: LD_INT 4
69332: NEG
69333: PUSH
69334: EMPTY
69335: LIST
69336: LIST
69337: PUSH
69338: LD_INT 1
69340: PUSH
69341: LD_INT 3
69343: NEG
69344: PUSH
69345: EMPTY
69346: LIST
69347: LIST
69348: PUSH
69349: EMPTY
69350: LIST
69351: LIST
69352: LIST
69353: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
69354: LD_ADDR_VAR 0 24
69358: PUSH
69359: LD_INT 3
69361: PUSH
69362: LD_INT 0
69364: PUSH
69365: EMPTY
69366: LIST
69367: LIST
69368: PUSH
69369: LD_INT 3
69371: PUSH
69372: LD_INT 1
69374: NEG
69375: PUSH
69376: EMPTY
69377: LIST
69378: LIST
69379: PUSH
69380: LD_INT 4
69382: PUSH
69383: LD_INT 1
69385: PUSH
69386: EMPTY
69387: LIST
69388: LIST
69389: PUSH
69390: EMPTY
69391: LIST
69392: LIST
69393: LIST
69394: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
69395: LD_ADDR_VAR 0 25
69399: PUSH
69400: LD_INT 3
69402: PUSH
69403: LD_INT 3
69405: PUSH
69406: EMPTY
69407: LIST
69408: LIST
69409: PUSH
69410: LD_INT 4
69412: PUSH
69413: LD_INT 3
69415: PUSH
69416: EMPTY
69417: LIST
69418: LIST
69419: PUSH
69420: LD_INT 3
69422: PUSH
69423: LD_INT 4
69425: PUSH
69426: EMPTY
69427: LIST
69428: LIST
69429: PUSH
69430: EMPTY
69431: LIST
69432: LIST
69433: LIST
69434: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
69435: LD_ADDR_VAR 0 26
69439: PUSH
69440: LD_INT 0
69442: PUSH
69443: LD_INT 3
69445: PUSH
69446: EMPTY
69447: LIST
69448: LIST
69449: PUSH
69450: LD_INT 1
69452: PUSH
69453: LD_INT 4
69455: PUSH
69456: EMPTY
69457: LIST
69458: LIST
69459: PUSH
69460: LD_INT 1
69462: NEG
69463: PUSH
69464: LD_INT 3
69466: PUSH
69467: EMPTY
69468: LIST
69469: LIST
69470: PUSH
69471: EMPTY
69472: LIST
69473: LIST
69474: LIST
69475: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
69476: LD_ADDR_VAR 0 27
69480: PUSH
69481: LD_INT 3
69483: NEG
69484: PUSH
69485: LD_INT 0
69487: PUSH
69488: EMPTY
69489: LIST
69490: LIST
69491: PUSH
69492: LD_INT 3
69494: NEG
69495: PUSH
69496: LD_INT 1
69498: PUSH
69499: EMPTY
69500: LIST
69501: LIST
69502: PUSH
69503: LD_INT 4
69505: NEG
69506: PUSH
69507: LD_INT 1
69509: NEG
69510: PUSH
69511: EMPTY
69512: LIST
69513: LIST
69514: PUSH
69515: EMPTY
69516: LIST
69517: LIST
69518: LIST
69519: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
69520: LD_ADDR_VAR 0 28
69524: PUSH
69525: LD_INT 3
69527: NEG
69528: PUSH
69529: LD_INT 3
69531: NEG
69532: PUSH
69533: EMPTY
69534: LIST
69535: LIST
69536: PUSH
69537: LD_INT 3
69539: NEG
69540: PUSH
69541: LD_INT 4
69543: NEG
69544: PUSH
69545: EMPTY
69546: LIST
69547: LIST
69548: PUSH
69549: LD_INT 4
69551: NEG
69552: PUSH
69553: LD_INT 3
69555: NEG
69556: PUSH
69557: EMPTY
69558: LIST
69559: LIST
69560: PUSH
69561: EMPTY
69562: LIST
69563: LIST
69564: LIST
69565: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
69566: LD_ADDR_VAR 0 29
69570: PUSH
69571: LD_INT 1
69573: NEG
69574: PUSH
69575: LD_INT 3
69577: NEG
69578: PUSH
69579: EMPTY
69580: LIST
69581: LIST
69582: PUSH
69583: LD_INT 0
69585: PUSH
69586: LD_INT 3
69588: NEG
69589: PUSH
69590: EMPTY
69591: LIST
69592: LIST
69593: PUSH
69594: LD_INT 1
69596: PUSH
69597: LD_INT 2
69599: NEG
69600: PUSH
69601: EMPTY
69602: LIST
69603: LIST
69604: PUSH
69605: LD_INT 1
69607: NEG
69608: PUSH
69609: LD_INT 4
69611: NEG
69612: PUSH
69613: EMPTY
69614: LIST
69615: LIST
69616: PUSH
69617: LD_INT 0
69619: PUSH
69620: LD_INT 4
69622: NEG
69623: PUSH
69624: EMPTY
69625: LIST
69626: LIST
69627: PUSH
69628: LD_INT 1
69630: PUSH
69631: LD_INT 3
69633: NEG
69634: PUSH
69635: EMPTY
69636: LIST
69637: LIST
69638: PUSH
69639: LD_INT 1
69641: NEG
69642: PUSH
69643: LD_INT 5
69645: NEG
69646: PUSH
69647: EMPTY
69648: LIST
69649: LIST
69650: PUSH
69651: LD_INT 0
69653: PUSH
69654: LD_INT 5
69656: NEG
69657: PUSH
69658: EMPTY
69659: LIST
69660: LIST
69661: PUSH
69662: LD_INT 1
69664: PUSH
69665: LD_INT 4
69667: NEG
69668: PUSH
69669: EMPTY
69670: LIST
69671: LIST
69672: PUSH
69673: LD_INT 1
69675: NEG
69676: PUSH
69677: LD_INT 6
69679: NEG
69680: PUSH
69681: EMPTY
69682: LIST
69683: LIST
69684: PUSH
69685: LD_INT 0
69687: PUSH
69688: LD_INT 6
69690: NEG
69691: PUSH
69692: EMPTY
69693: LIST
69694: LIST
69695: PUSH
69696: LD_INT 1
69698: PUSH
69699: LD_INT 5
69701: NEG
69702: PUSH
69703: EMPTY
69704: LIST
69705: LIST
69706: PUSH
69707: EMPTY
69708: LIST
69709: LIST
69710: LIST
69711: LIST
69712: LIST
69713: LIST
69714: LIST
69715: LIST
69716: LIST
69717: LIST
69718: LIST
69719: LIST
69720: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
69721: LD_ADDR_VAR 0 30
69725: PUSH
69726: LD_INT 2
69728: PUSH
69729: LD_INT 1
69731: NEG
69732: PUSH
69733: EMPTY
69734: LIST
69735: LIST
69736: PUSH
69737: LD_INT 3
69739: PUSH
69740: LD_INT 0
69742: PUSH
69743: EMPTY
69744: LIST
69745: LIST
69746: PUSH
69747: LD_INT 3
69749: PUSH
69750: LD_INT 1
69752: PUSH
69753: EMPTY
69754: LIST
69755: LIST
69756: PUSH
69757: LD_INT 3
69759: PUSH
69760: LD_INT 1
69762: NEG
69763: PUSH
69764: EMPTY
69765: LIST
69766: LIST
69767: PUSH
69768: LD_INT 4
69770: PUSH
69771: LD_INT 0
69773: PUSH
69774: EMPTY
69775: LIST
69776: LIST
69777: PUSH
69778: LD_INT 4
69780: PUSH
69781: LD_INT 1
69783: PUSH
69784: EMPTY
69785: LIST
69786: LIST
69787: PUSH
69788: LD_INT 4
69790: PUSH
69791: LD_INT 1
69793: NEG
69794: PUSH
69795: EMPTY
69796: LIST
69797: LIST
69798: PUSH
69799: LD_INT 5
69801: PUSH
69802: LD_INT 0
69804: PUSH
69805: EMPTY
69806: LIST
69807: LIST
69808: PUSH
69809: LD_INT 5
69811: PUSH
69812: LD_INT 1
69814: PUSH
69815: EMPTY
69816: LIST
69817: LIST
69818: PUSH
69819: LD_INT 5
69821: PUSH
69822: LD_INT 1
69824: NEG
69825: PUSH
69826: EMPTY
69827: LIST
69828: LIST
69829: PUSH
69830: LD_INT 6
69832: PUSH
69833: LD_INT 0
69835: PUSH
69836: EMPTY
69837: LIST
69838: LIST
69839: PUSH
69840: LD_INT 6
69842: PUSH
69843: LD_INT 1
69845: PUSH
69846: EMPTY
69847: LIST
69848: LIST
69849: PUSH
69850: EMPTY
69851: LIST
69852: LIST
69853: LIST
69854: LIST
69855: LIST
69856: LIST
69857: LIST
69858: LIST
69859: LIST
69860: LIST
69861: LIST
69862: LIST
69863: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
69864: LD_ADDR_VAR 0 31
69868: PUSH
69869: LD_INT 3
69871: PUSH
69872: LD_INT 2
69874: PUSH
69875: EMPTY
69876: LIST
69877: LIST
69878: PUSH
69879: LD_INT 3
69881: PUSH
69882: LD_INT 3
69884: PUSH
69885: EMPTY
69886: LIST
69887: LIST
69888: PUSH
69889: LD_INT 2
69891: PUSH
69892: LD_INT 3
69894: PUSH
69895: EMPTY
69896: LIST
69897: LIST
69898: PUSH
69899: LD_INT 4
69901: PUSH
69902: LD_INT 3
69904: PUSH
69905: EMPTY
69906: LIST
69907: LIST
69908: PUSH
69909: LD_INT 4
69911: PUSH
69912: LD_INT 4
69914: PUSH
69915: EMPTY
69916: LIST
69917: LIST
69918: PUSH
69919: LD_INT 3
69921: PUSH
69922: LD_INT 4
69924: PUSH
69925: EMPTY
69926: LIST
69927: LIST
69928: PUSH
69929: LD_INT 5
69931: PUSH
69932: LD_INT 4
69934: PUSH
69935: EMPTY
69936: LIST
69937: LIST
69938: PUSH
69939: LD_INT 5
69941: PUSH
69942: LD_INT 5
69944: PUSH
69945: EMPTY
69946: LIST
69947: LIST
69948: PUSH
69949: LD_INT 4
69951: PUSH
69952: LD_INT 5
69954: PUSH
69955: EMPTY
69956: LIST
69957: LIST
69958: PUSH
69959: LD_INT 6
69961: PUSH
69962: LD_INT 5
69964: PUSH
69965: EMPTY
69966: LIST
69967: LIST
69968: PUSH
69969: LD_INT 6
69971: PUSH
69972: LD_INT 6
69974: PUSH
69975: EMPTY
69976: LIST
69977: LIST
69978: PUSH
69979: LD_INT 5
69981: PUSH
69982: LD_INT 6
69984: PUSH
69985: EMPTY
69986: LIST
69987: LIST
69988: PUSH
69989: EMPTY
69990: LIST
69991: LIST
69992: LIST
69993: LIST
69994: LIST
69995: LIST
69996: LIST
69997: LIST
69998: LIST
69999: LIST
70000: LIST
70001: LIST
70002: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
70003: LD_ADDR_VAR 0 32
70007: PUSH
70008: LD_INT 1
70010: PUSH
70011: LD_INT 3
70013: PUSH
70014: EMPTY
70015: LIST
70016: LIST
70017: PUSH
70018: LD_INT 0
70020: PUSH
70021: LD_INT 3
70023: PUSH
70024: EMPTY
70025: LIST
70026: LIST
70027: PUSH
70028: LD_INT 1
70030: NEG
70031: PUSH
70032: LD_INT 2
70034: PUSH
70035: EMPTY
70036: LIST
70037: LIST
70038: PUSH
70039: LD_INT 1
70041: PUSH
70042: LD_INT 4
70044: PUSH
70045: EMPTY
70046: LIST
70047: LIST
70048: PUSH
70049: LD_INT 0
70051: PUSH
70052: LD_INT 4
70054: PUSH
70055: EMPTY
70056: LIST
70057: LIST
70058: PUSH
70059: LD_INT 1
70061: NEG
70062: PUSH
70063: LD_INT 3
70065: PUSH
70066: EMPTY
70067: LIST
70068: LIST
70069: PUSH
70070: LD_INT 1
70072: PUSH
70073: LD_INT 5
70075: PUSH
70076: EMPTY
70077: LIST
70078: LIST
70079: PUSH
70080: LD_INT 0
70082: PUSH
70083: LD_INT 5
70085: PUSH
70086: EMPTY
70087: LIST
70088: LIST
70089: PUSH
70090: LD_INT 1
70092: NEG
70093: PUSH
70094: LD_INT 4
70096: PUSH
70097: EMPTY
70098: LIST
70099: LIST
70100: PUSH
70101: LD_INT 1
70103: PUSH
70104: LD_INT 6
70106: PUSH
70107: EMPTY
70108: LIST
70109: LIST
70110: PUSH
70111: LD_INT 0
70113: PUSH
70114: LD_INT 6
70116: PUSH
70117: EMPTY
70118: LIST
70119: LIST
70120: PUSH
70121: LD_INT 1
70123: NEG
70124: PUSH
70125: LD_INT 5
70127: PUSH
70128: EMPTY
70129: LIST
70130: LIST
70131: PUSH
70132: EMPTY
70133: LIST
70134: LIST
70135: LIST
70136: LIST
70137: LIST
70138: LIST
70139: LIST
70140: LIST
70141: LIST
70142: LIST
70143: LIST
70144: LIST
70145: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
70146: LD_ADDR_VAR 0 33
70150: PUSH
70151: LD_INT 2
70153: NEG
70154: PUSH
70155: LD_INT 1
70157: PUSH
70158: EMPTY
70159: LIST
70160: LIST
70161: PUSH
70162: LD_INT 3
70164: NEG
70165: PUSH
70166: LD_INT 0
70168: PUSH
70169: EMPTY
70170: LIST
70171: LIST
70172: PUSH
70173: LD_INT 3
70175: NEG
70176: PUSH
70177: LD_INT 1
70179: NEG
70180: PUSH
70181: EMPTY
70182: LIST
70183: LIST
70184: PUSH
70185: LD_INT 3
70187: NEG
70188: PUSH
70189: LD_INT 1
70191: PUSH
70192: EMPTY
70193: LIST
70194: LIST
70195: PUSH
70196: LD_INT 4
70198: NEG
70199: PUSH
70200: LD_INT 0
70202: PUSH
70203: EMPTY
70204: LIST
70205: LIST
70206: PUSH
70207: LD_INT 4
70209: NEG
70210: PUSH
70211: LD_INT 1
70213: NEG
70214: PUSH
70215: EMPTY
70216: LIST
70217: LIST
70218: PUSH
70219: LD_INT 4
70221: NEG
70222: PUSH
70223: LD_INT 1
70225: PUSH
70226: EMPTY
70227: LIST
70228: LIST
70229: PUSH
70230: LD_INT 5
70232: NEG
70233: PUSH
70234: LD_INT 0
70236: PUSH
70237: EMPTY
70238: LIST
70239: LIST
70240: PUSH
70241: LD_INT 5
70243: NEG
70244: PUSH
70245: LD_INT 1
70247: NEG
70248: PUSH
70249: EMPTY
70250: LIST
70251: LIST
70252: PUSH
70253: LD_INT 5
70255: NEG
70256: PUSH
70257: LD_INT 1
70259: PUSH
70260: EMPTY
70261: LIST
70262: LIST
70263: PUSH
70264: LD_INT 6
70266: NEG
70267: PUSH
70268: LD_INT 0
70270: PUSH
70271: EMPTY
70272: LIST
70273: LIST
70274: PUSH
70275: LD_INT 6
70277: NEG
70278: PUSH
70279: LD_INT 1
70281: NEG
70282: PUSH
70283: EMPTY
70284: LIST
70285: LIST
70286: PUSH
70287: EMPTY
70288: LIST
70289: LIST
70290: LIST
70291: LIST
70292: LIST
70293: LIST
70294: LIST
70295: LIST
70296: LIST
70297: LIST
70298: LIST
70299: LIST
70300: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
70301: LD_ADDR_VAR 0 34
70305: PUSH
70306: LD_INT 2
70308: NEG
70309: PUSH
70310: LD_INT 3
70312: NEG
70313: PUSH
70314: EMPTY
70315: LIST
70316: LIST
70317: PUSH
70318: LD_INT 3
70320: NEG
70321: PUSH
70322: LD_INT 2
70324: NEG
70325: PUSH
70326: EMPTY
70327: LIST
70328: LIST
70329: PUSH
70330: LD_INT 3
70332: NEG
70333: PUSH
70334: LD_INT 3
70336: NEG
70337: PUSH
70338: EMPTY
70339: LIST
70340: LIST
70341: PUSH
70342: LD_INT 3
70344: NEG
70345: PUSH
70346: LD_INT 4
70348: NEG
70349: PUSH
70350: EMPTY
70351: LIST
70352: LIST
70353: PUSH
70354: LD_INT 4
70356: NEG
70357: PUSH
70358: LD_INT 3
70360: NEG
70361: PUSH
70362: EMPTY
70363: LIST
70364: LIST
70365: PUSH
70366: LD_INT 4
70368: NEG
70369: PUSH
70370: LD_INT 4
70372: NEG
70373: PUSH
70374: EMPTY
70375: LIST
70376: LIST
70377: PUSH
70378: LD_INT 4
70380: NEG
70381: PUSH
70382: LD_INT 5
70384: NEG
70385: PUSH
70386: EMPTY
70387: LIST
70388: LIST
70389: PUSH
70390: LD_INT 5
70392: NEG
70393: PUSH
70394: LD_INT 4
70396: NEG
70397: PUSH
70398: EMPTY
70399: LIST
70400: LIST
70401: PUSH
70402: LD_INT 5
70404: NEG
70405: PUSH
70406: LD_INT 5
70408: NEG
70409: PUSH
70410: EMPTY
70411: LIST
70412: LIST
70413: PUSH
70414: LD_INT 5
70416: NEG
70417: PUSH
70418: LD_INT 6
70420: NEG
70421: PUSH
70422: EMPTY
70423: LIST
70424: LIST
70425: PUSH
70426: LD_INT 6
70428: NEG
70429: PUSH
70430: LD_INT 5
70432: NEG
70433: PUSH
70434: EMPTY
70435: LIST
70436: LIST
70437: PUSH
70438: LD_INT 6
70440: NEG
70441: PUSH
70442: LD_INT 6
70444: NEG
70445: PUSH
70446: EMPTY
70447: LIST
70448: LIST
70449: PUSH
70450: EMPTY
70451: LIST
70452: LIST
70453: LIST
70454: LIST
70455: LIST
70456: LIST
70457: LIST
70458: LIST
70459: LIST
70460: LIST
70461: LIST
70462: LIST
70463: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
70464: LD_ADDR_VAR 0 41
70468: PUSH
70469: LD_INT 0
70471: PUSH
70472: LD_INT 2
70474: NEG
70475: PUSH
70476: EMPTY
70477: LIST
70478: LIST
70479: PUSH
70480: LD_INT 1
70482: NEG
70483: PUSH
70484: LD_INT 3
70486: NEG
70487: PUSH
70488: EMPTY
70489: LIST
70490: LIST
70491: PUSH
70492: LD_INT 1
70494: PUSH
70495: LD_INT 2
70497: NEG
70498: PUSH
70499: EMPTY
70500: LIST
70501: LIST
70502: PUSH
70503: EMPTY
70504: LIST
70505: LIST
70506: LIST
70507: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
70508: LD_ADDR_VAR 0 42
70512: PUSH
70513: LD_INT 2
70515: PUSH
70516: LD_INT 0
70518: PUSH
70519: EMPTY
70520: LIST
70521: LIST
70522: PUSH
70523: LD_INT 2
70525: PUSH
70526: LD_INT 1
70528: NEG
70529: PUSH
70530: EMPTY
70531: LIST
70532: LIST
70533: PUSH
70534: LD_INT 3
70536: PUSH
70537: LD_INT 1
70539: PUSH
70540: EMPTY
70541: LIST
70542: LIST
70543: PUSH
70544: EMPTY
70545: LIST
70546: LIST
70547: LIST
70548: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
70549: LD_ADDR_VAR 0 43
70553: PUSH
70554: LD_INT 2
70556: PUSH
70557: LD_INT 2
70559: PUSH
70560: EMPTY
70561: LIST
70562: LIST
70563: PUSH
70564: LD_INT 3
70566: PUSH
70567: LD_INT 2
70569: PUSH
70570: EMPTY
70571: LIST
70572: LIST
70573: PUSH
70574: LD_INT 2
70576: PUSH
70577: LD_INT 3
70579: PUSH
70580: EMPTY
70581: LIST
70582: LIST
70583: PUSH
70584: EMPTY
70585: LIST
70586: LIST
70587: LIST
70588: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
70589: LD_ADDR_VAR 0 44
70593: PUSH
70594: LD_INT 0
70596: PUSH
70597: LD_INT 2
70599: PUSH
70600: EMPTY
70601: LIST
70602: LIST
70603: PUSH
70604: LD_INT 1
70606: PUSH
70607: LD_INT 3
70609: PUSH
70610: EMPTY
70611: LIST
70612: LIST
70613: PUSH
70614: LD_INT 1
70616: NEG
70617: PUSH
70618: LD_INT 2
70620: PUSH
70621: EMPTY
70622: LIST
70623: LIST
70624: PUSH
70625: EMPTY
70626: LIST
70627: LIST
70628: LIST
70629: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
70630: LD_ADDR_VAR 0 45
70634: PUSH
70635: LD_INT 2
70637: NEG
70638: PUSH
70639: LD_INT 0
70641: PUSH
70642: EMPTY
70643: LIST
70644: LIST
70645: PUSH
70646: LD_INT 2
70648: NEG
70649: PUSH
70650: LD_INT 1
70652: PUSH
70653: EMPTY
70654: LIST
70655: LIST
70656: PUSH
70657: LD_INT 3
70659: NEG
70660: PUSH
70661: LD_INT 1
70663: NEG
70664: PUSH
70665: EMPTY
70666: LIST
70667: LIST
70668: PUSH
70669: EMPTY
70670: LIST
70671: LIST
70672: LIST
70673: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
70674: LD_ADDR_VAR 0 46
70678: PUSH
70679: LD_INT 2
70681: NEG
70682: PUSH
70683: LD_INT 2
70685: NEG
70686: PUSH
70687: EMPTY
70688: LIST
70689: LIST
70690: PUSH
70691: LD_INT 2
70693: NEG
70694: PUSH
70695: LD_INT 3
70697: NEG
70698: PUSH
70699: EMPTY
70700: LIST
70701: LIST
70702: PUSH
70703: LD_INT 3
70705: NEG
70706: PUSH
70707: LD_INT 2
70709: NEG
70710: PUSH
70711: EMPTY
70712: LIST
70713: LIST
70714: PUSH
70715: EMPTY
70716: LIST
70717: LIST
70718: LIST
70719: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
70720: LD_ADDR_VAR 0 47
70724: PUSH
70725: LD_INT 2
70727: NEG
70728: PUSH
70729: LD_INT 3
70731: NEG
70732: PUSH
70733: EMPTY
70734: LIST
70735: LIST
70736: PUSH
70737: LD_INT 1
70739: NEG
70740: PUSH
70741: LD_INT 3
70743: NEG
70744: PUSH
70745: EMPTY
70746: LIST
70747: LIST
70748: PUSH
70749: EMPTY
70750: LIST
70751: LIST
70752: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
70753: LD_ADDR_VAR 0 48
70757: PUSH
70758: LD_INT 1
70760: PUSH
70761: LD_INT 2
70763: NEG
70764: PUSH
70765: EMPTY
70766: LIST
70767: LIST
70768: PUSH
70769: LD_INT 2
70771: PUSH
70772: LD_INT 1
70774: NEG
70775: PUSH
70776: EMPTY
70777: LIST
70778: LIST
70779: PUSH
70780: EMPTY
70781: LIST
70782: LIST
70783: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
70784: LD_ADDR_VAR 0 49
70788: PUSH
70789: LD_INT 3
70791: PUSH
70792: LD_INT 1
70794: PUSH
70795: EMPTY
70796: LIST
70797: LIST
70798: PUSH
70799: LD_INT 3
70801: PUSH
70802: LD_INT 2
70804: PUSH
70805: EMPTY
70806: LIST
70807: LIST
70808: PUSH
70809: EMPTY
70810: LIST
70811: LIST
70812: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
70813: LD_ADDR_VAR 0 50
70817: PUSH
70818: LD_INT 2
70820: PUSH
70821: LD_INT 3
70823: PUSH
70824: EMPTY
70825: LIST
70826: LIST
70827: PUSH
70828: LD_INT 1
70830: PUSH
70831: LD_INT 3
70833: PUSH
70834: EMPTY
70835: LIST
70836: LIST
70837: PUSH
70838: EMPTY
70839: LIST
70840: LIST
70841: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
70842: LD_ADDR_VAR 0 51
70846: PUSH
70847: LD_INT 1
70849: NEG
70850: PUSH
70851: LD_INT 2
70853: PUSH
70854: EMPTY
70855: LIST
70856: LIST
70857: PUSH
70858: LD_INT 2
70860: NEG
70861: PUSH
70862: LD_INT 1
70864: PUSH
70865: EMPTY
70866: LIST
70867: LIST
70868: PUSH
70869: EMPTY
70870: LIST
70871: LIST
70872: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
70873: LD_ADDR_VAR 0 52
70877: PUSH
70878: LD_INT 3
70880: NEG
70881: PUSH
70882: LD_INT 1
70884: NEG
70885: PUSH
70886: EMPTY
70887: LIST
70888: LIST
70889: PUSH
70890: LD_INT 3
70892: NEG
70893: PUSH
70894: LD_INT 2
70896: NEG
70897: PUSH
70898: EMPTY
70899: LIST
70900: LIST
70901: PUSH
70902: EMPTY
70903: LIST
70904: LIST
70905: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
70906: LD_ADDR_VAR 0 53
70910: PUSH
70911: LD_INT 1
70913: NEG
70914: PUSH
70915: LD_INT 3
70917: NEG
70918: PUSH
70919: EMPTY
70920: LIST
70921: LIST
70922: PUSH
70923: LD_INT 0
70925: PUSH
70926: LD_INT 3
70928: NEG
70929: PUSH
70930: EMPTY
70931: LIST
70932: LIST
70933: PUSH
70934: LD_INT 1
70936: PUSH
70937: LD_INT 2
70939: NEG
70940: PUSH
70941: EMPTY
70942: LIST
70943: LIST
70944: PUSH
70945: EMPTY
70946: LIST
70947: LIST
70948: LIST
70949: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
70950: LD_ADDR_VAR 0 54
70954: PUSH
70955: LD_INT 2
70957: PUSH
70958: LD_INT 1
70960: NEG
70961: PUSH
70962: EMPTY
70963: LIST
70964: LIST
70965: PUSH
70966: LD_INT 3
70968: PUSH
70969: LD_INT 0
70971: PUSH
70972: EMPTY
70973: LIST
70974: LIST
70975: PUSH
70976: LD_INT 3
70978: PUSH
70979: LD_INT 1
70981: PUSH
70982: EMPTY
70983: LIST
70984: LIST
70985: PUSH
70986: EMPTY
70987: LIST
70988: LIST
70989: LIST
70990: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
70991: LD_ADDR_VAR 0 55
70995: PUSH
70996: LD_INT 3
70998: PUSH
70999: LD_INT 2
71001: PUSH
71002: EMPTY
71003: LIST
71004: LIST
71005: PUSH
71006: LD_INT 3
71008: PUSH
71009: LD_INT 3
71011: PUSH
71012: EMPTY
71013: LIST
71014: LIST
71015: PUSH
71016: LD_INT 2
71018: PUSH
71019: LD_INT 3
71021: PUSH
71022: EMPTY
71023: LIST
71024: LIST
71025: PUSH
71026: EMPTY
71027: LIST
71028: LIST
71029: LIST
71030: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
71031: LD_ADDR_VAR 0 56
71035: PUSH
71036: LD_INT 1
71038: PUSH
71039: LD_INT 3
71041: PUSH
71042: EMPTY
71043: LIST
71044: LIST
71045: PUSH
71046: LD_INT 0
71048: PUSH
71049: LD_INT 3
71051: PUSH
71052: EMPTY
71053: LIST
71054: LIST
71055: PUSH
71056: LD_INT 1
71058: NEG
71059: PUSH
71060: LD_INT 2
71062: PUSH
71063: EMPTY
71064: LIST
71065: LIST
71066: PUSH
71067: EMPTY
71068: LIST
71069: LIST
71070: LIST
71071: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
71072: LD_ADDR_VAR 0 57
71076: PUSH
71077: LD_INT 2
71079: NEG
71080: PUSH
71081: LD_INT 1
71083: PUSH
71084: EMPTY
71085: LIST
71086: LIST
71087: PUSH
71088: LD_INT 3
71090: NEG
71091: PUSH
71092: LD_INT 0
71094: PUSH
71095: EMPTY
71096: LIST
71097: LIST
71098: PUSH
71099: LD_INT 3
71101: NEG
71102: PUSH
71103: LD_INT 1
71105: NEG
71106: PUSH
71107: EMPTY
71108: LIST
71109: LIST
71110: PUSH
71111: EMPTY
71112: LIST
71113: LIST
71114: LIST
71115: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71116: LD_ADDR_VAR 0 58
71120: PUSH
71121: LD_INT 2
71123: NEG
71124: PUSH
71125: LD_INT 3
71127: NEG
71128: PUSH
71129: EMPTY
71130: LIST
71131: LIST
71132: PUSH
71133: LD_INT 3
71135: NEG
71136: PUSH
71137: LD_INT 2
71139: NEG
71140: PUSH
71141: EMPTY
71142: LIST
71143: LIST
71144: PUSH
71145: LD_INT 3
71147: NEG
71148: PUSH
71149: LD_INT 3
71151: NEG
71152: PUSH
71153: EMPTY
71154: LIST
71155: LIST
71156: PUSH
71157: EMPTY
71158: LIST
71159: LIST
71160: LIST
71161: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
71162: LD_ADDR_VAR 0 59
71166: PUSH
71167: LD_INT 1
71169: NEG
71170: PUSH
71171: LD_INT 2
71173: NEG
71174: PUSH
71175: EMPTY
71176: LIST
71177: LIST
71178: PUSH
71179: LD_INT 0
71181: PUSH
71182: LD_INT 2
71184: NEG
71185: PUSH
71186: EMPTY
71187: LIST
71188: LIST
71189: PUSH
71190: LD_INT 1
71192: PUSH
71193: LD_INT 1
71195: NEG
71196: PUSH
71197: EMPTY
71198: LIST
71199: LIST
71200: PUSH
71201: EMPTY
71202: LIST
71203: LIST
71204: LIST
71205: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
71206: LD_ADDR_VAR 0 60
71210: PUSH
71211: LD_INT 1
71213: PUSH
71214: LD_INT 1
71216: NEG
71217: PUSH
71218: EMPTY
71219: LIST
71220: LIST
71221: PUSH
71222: LD_INT 2
71224: PUSH
71225: LD_INT 0
71227: PUSH
71228: EMPTY
71229: LIST
71230: LIST
71231: PUSH
71232: LD_INT 2
71234: PUSH
71235: LD_INT 1
71237: PUSH
71238: EMPTY
71239: LIST
71240: LIST
71241: PUSH
71242: EMPTY
71243: LIST
71244: LIST
71245: LIST
71246: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
71247: LD_ADDR_VAR 0 61
71251: PUSH
71252: LD_INT 2
71254: PUSH
71255: LD_INT 1
71257: PUSH
71258: EMPTY
71259: LIST
71260: LIST
71261: PUSH
71262: LD_INT 2
71264: PUSH
71265: LD_INT 2
71267: PUSH
71268: EMPTY
71269: LIST
71270: LIST
71271: PUSH
71272: LD_INT 1
71274: PUSH
71275: LD_INT 2
71277: PUSH
71278: EMPTY
71279: LIST
71280: LIST
71281: PUSH
71282: EMPTY
71283: LIST
71284: LIST
71285: LIST
71286: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
71287: LD_ADDR_VAR 0 62
71291: PUSH
71292: LD_INT 1
71294: PUSH
71295: LD_INT 2
71297: PUSH
71298: EMPTY
71299: LIST
71300: LIST
71301: PUSH
71302: LD_INT 0
71304: PUSH
71305: LD_INT 2
71307: PUSH
71308: EMPTY
71309: LIST
71310: LIST
71311: PUSH
71312: LD_INT 1
71314: NEG
71315: PUSH
71316: LD_INT 1
71318: PUSH
71319: EMPTY
71320: LIST
71321: LIST
71322: PUSH
71323: EMPTY
71324: LIST
71325: LIST
71326: LIST
71327: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
71328: LD_ADDR_VAR 0 63
71332: PUSH
71333: LD_INT 1
71335: NEG
71336: PUSH
71337: LD_INT 1
71339: PUSH
71340: EMPTY
71341: LIST
71342: LIST
71343: PUSH
71344: LD_INT 2
71346: NEG
71347: PUSH
71348: LD_INT 0
71350: PUSH
71351: EMPTY
71352: LIST
71353: LIST
71354: PUSH
71355: LD_INT 2
71357: NEG
71358: PUSH
71359: LD_INT 1
71361: NEG
71362: PUSH
71363: EMPTY
71364: LIST
71365: LIST
71366: PUSH
71367: EMPTY
71368: LIST
71369: LIST
71370: LIST
71371: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71372: LD_ADDR_VAR 0 64
71376: PUSH
71377: LD_INT 1
71379: NEG
71380: PUSH
71381: LD_INT 2
71383: NEG
71384: PUSH
71385: EMPTY
71386: LIST
71387: LIST
71388: PUSH
71389: LD_INT 2
71391: NEG
71392: PUSH
71393: LD_INT 1
71395: NEG
71396: PUSH
71397: EMPTY
71398: LIST
71399: LIST
71400: PUSH
71401: LD_INT 2
71403: NEG
71404: PUSH
71405: LD_INT 2
71407: NEG
71408: PUSH
71409: EMPTY
71410: LIST
71411: LIST
71412: PUSH
71413: EMPTY
71414: LIST
71415: LIST
71416: LIST
71417: ST_TO_ADDR
// end ; 2 :
71418: GO 74684
71420: LD_INT 2
71422: DOUBLE
71423: EQUAL
71424: IFTRUE 71428
71426: GO 74683
71428: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
71429: LD_ADDR_VAR 0 29
71433: PUSH
71434: LD_INT 4
71436: PUSH
71437: LD_INT 0
71439: PUSH
71440: EMPTY
71441: LIST
71442: LIST
71443: PUSH
71444: LD_INT 4
71446: PUSH
71447: LD_INT 1
71449: NEG
71450: PUSH
71451: EMPTY
71452: LIST
71453: LIST
71454: PUSH
71455: LD_INT 5
71457: PUSH
71458: LD_INT 0
71460: PUSH
71461: EMPTY
71462: LIST
71463: LIST
71464: PUSH
71465: LD_INT 5
71467: PUSH
71468: LD_INT 1
71470: PUSH
71471: EMPTY
71472: LIST
71473: LIST
71474: PUSH
71475: LD_INT 4
71477: PUSH
71478: LD_INT 1
71480: PUSH
71481: EMPTY
71482: LIST
71483: LIST
71484: PUSH
71485: LD_INT 3
71487: PUSH
71488: LD_INT 0
71490: PUSH
71491: EMPTY
71492: LIST
71493: LIST
71494: PUSH
71495: LD_INT 3
71497: PUSH
71498: LD_INT 1
71500: NEG
71501: PUSH
71502: EMPTY
71503: LIST
71504: LIST
71505: PUSH
71506: LD_INT 3
71508: PUSH
71509: LD_INT 2
71511: NEG
71512: PUSH
71513: EMPTY
71514: LIST
71515: LIST
71516: PUSH
71517: LD_INT 5
71519: PUSH
71520: LD_INT 2
71522: PUSH
71523: EMPTY
71524: LIST
71525: LIST
71526: PUSH
71527: LD_INT 3
71529: PUSH
71530: LD_INT 3
71532: PUSH
71533: EMPTY
71534: LIST
71535: LIST
71536: PUSH
71537: LD_INT 3
71539: PUSH
71540: LD_INT 2
71542: PUSH
71543: EMPTY
71544: LIST
71545: LIST
71546: PUSH
71547: LD_INT 4
71549: PUSH
71550: LD_INT 3
71552: PUSH
71553: EMPTY
71554: LIST
71555: LIST
71556: PUSH
71557: LD_INT 4
71559: PUSH
71560: LD_INT 4
71562: PUSH
71563: EMPTY
71564: LIST
71565: LIST
71566: PUSH
71567: LD_INT 3
71569: PUSH
71570: LD_INT 4
71572: PUSH
71573: EMPTY
71574: LIST
71575: LIST
71576: PUSH
71577: LD_INT 2
71579: PUSH
71580: LD_INT 3
71582: PUSH
71583: EMPTY
71584: LIST
71585: LIST
71586: PUSH
71587: LD_INT 2
71589: PUSH
71590: LD_INT 2
71592: PUSH
71593: EMPTY
71594: LIST
71595: LIST
71596: PUSH
71597: LD_INT 4
71599: PUSH
71600: LD_INT 2
71602: PUSH
71603: EMPTY
71604: LIST
71605: LIST
71606: PUSH
71607: LD_INT 2
71609: PUSH
71610: LD_INT 4
71612: PUSH
71613: EMPTY
71614: LIST
71615: LIST
71616: PUSH
71617: LD_INT 0
71619: PUSH
71620: LD_INT 4
71622: PUSH
71623: EMPTY
71624: LIST
71625: LIST
71626: PUSH
71627: LD_INT 0
71629: PUSH
71630: LD_INT 3
71632: PUSH
71633: EMPTY
71634: LIST
71635: LIST
71636: PUSH
71637: LD_INT 1
71639: PUSH
71640: LD_INT 4
71642: PUSH
71643: EMPTY
71644: LIST
71645: LIST
71646: PUSH
71647: LD_INT 1
71649: PUSH
71650: LD_INT 5
71652: PUSH
71653: EMPTY
71654: LIST
71655: LIST
71656: PUSH
71657: LD_INT 0
71659: PUSH
71660: LD_INT 5
71662: PUSH
71663: EMPTY
71664: LIST
71665: LIST
71666: PUSH
71667: LD_INT 1
71669: NEG
71670: PUSH
71671: LD_INT 4
71673: PUSH
71674: EMPTY
71675: LIST
71676: LIST
71677: PUSH
71678: LD_INT 1
71680: NEG
71681: PUSH
71682: LD_INT 3
71684: PUSH
71685: EMPTY
71686: LIST
71687: LIST
71688: PUSH
71689: LD_INT 2
71691: PUSH
71692: LD_INT 5
71694: PUSH
71695: EMPTY
71696: LIST
71697: LIST
71698: PUSH
71699: LD_INT 2
71701: NEG
71702: PUSH
71703: LD_INT 3
71705: PUSH
71706: EMPTY
71707: LIST
71708: LIST
71709: PUSH
71710: LD_INT 3
71712: NEG
71713: PUSH
71714: LD_INT 0
71716: PUSH
71717: EMPTY
71718: LIST
71719: LIST
71720: PUSH
71721: LD_INT 3
71723: NEG
71724: PUSH
71725: LD_INT 1
71727: NEG
71728: PUSH
71729: EMPTY
71730: LIST
71731: LIST
71732: PUSH
71733: LD_INT 2
71735: NEG
71736: PUSH
71737: LD_INT 0
71739: PUSH
71740: EMPTY
71741: LIST
71742: LIST
71743: PUSH
71744: LD_INT 2
71746: NEG
71747: PUSH
71748: LD_INT 1
71750: PUSH
71751: EMPTY
71752: LIST
71753: LIST
71754: PUSH
71755: LD_INT 3
71757: NEG
71758: PUSH
71759: LD_INT 1
71761: PUSH
71762: EMPTY
71763: LIST
71764: LIST
71765: PUSH
71766: LD_INT 4
71768: NEG
71769: PUSH
71770: LD_INT 0
71772: PUSH
71773: EMPTY
71774: LIST
71775: LIST
71776: PUSH
71777: LD_INT 4
71779: NEG
71780: PUSH
71781: LD_INT 1
71783: NEG
71784: PUSH
71785: EMPTY
71786: LIST
71787: LIST
71788: PUSH
71789: LD_INT 4
71791: NEG
71792: PUSH
71793: LD_INT 2
71795: NEG
71796: PUSH
71797: EMPTY
71798: LIST
71799: LIST
71800: PUSH
71801: LD_INT 2
71803: NEG
71804: PUSH
71805: LD_INT 2
71807: PUSH
71808: EMPTY
71809: LIST
71810: LIST
71811: PUSH
71812: LD_INT 4
71814: NEG
71815: PUSH
71816: LD_INT 4
71818: NEG
71819: PUSH
71820: EMPTY
71821: LIST
71822: LIST
71823: PUSH
71824: LD_INT 4
71826: NEG
71827: PUSH
71828: LD_INT 5
71830: NEG
71831: PUSH
71832: EMPTY
71833: LIST
71834: LIST
71835: PUSH
71836: LD_INT 3
71838: NEG
71839: PUSH
71840: LD_INT 4
71842: NEG
71843: PUSH
71844: EMPTY
71845: LIST
71846: LIST
71847: PUSH
71848: LD_INT 3
71850: NEG
71851: PUSH
71852: LD_INT 3
71854: NEG
71855: PUSH
71856: EMPTY
71857: LIST
71858: LIST
71859: PUSH
71860: LD_INT 4
71862: NEG
71863: PUSH
71864: LD_INT 3
71866: NEG
71867: PUSH
71868: EMPTY
71869: LIST
71870: LIST
71871: PUSH
71872: LD_INT 5
71874: NEG
71875: PUSH
71876: LD_INT 4
71878: NEG
71879: PUSH
71880: EMPTY
71881: LIST
71882: LIST
71883: PUSH
71884: LD_INT 5
71886: NEG
71887: PUSH
71888: LD_INT 5
71890: NEG
71891: PUSH
71892: EMPTY
71893: LIST
71894: LIST
71895: PUSH
71896: LD_INT 3
71898: NEG
71899: PUSH
71900: LD_INT 5
71902: NEG
71903: PUSH
71904: EMPTY
71905: LIST
71906: LIST
71907: PUSH
71908: LD_INT 5
71910: NEG
71911: PUSH
71912: LD_INT 3
71914: NEG
71915: PUSH
71916: EMPTY
71917: LIST
71918: LIST
71919: PUSH
71920: EMPTY
71921: LIST
71922: LIST
71923: LIST
71924: LIST
71925: LIST
71926: LIST
71927: LIST
71928: LIST
71929: LIST
71930: LIST
71931: LIST
71932: LIST
71933: LIST
71934: LIST
71935: LIST
71936: LIST
71937: LIST
71938: LIST
71939: LIST
71940: LIST
71941: LIST
71942: LIST
71943: LIST
71944: LIST
71945: LIST
71946: LIST
71947: LIST
71948: LIST
71949: LIST
71950: LIST
71951: LIST
71952: LIST
71953: LIST
71954: LIST
71955: LIST
71956: LIST
71957: LIST
71958: LIST
71959: LIST
71960: LIST
71961: LIST
71962: LIST
71963: LIST
71964: LIST
71965: LIST
71966: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
71967: LD_ADDR_VAR 0 30
71971: PUSH
71972: LD_INT 4
71974: PUSH
71975: LD_INT 4
71977: PUSH
71978: EMPTY
71979: LIST
71980: LIST
71981: PUSH
71982: LD_INT 4
71984: PUSH
71985: LD_INT 3
71987: PUSH
71988: EMPTY
71989: LIST
71990: LIST
71991: PUSH
71992: LD_INT 5
71994: PUSH
71995: LD_INT 4
71997: PUSH
71998: EMPTY
71999: LIST
72000: LIST
72001: PUSH
72002: LD_INT 5
72004: PUSH
72005: LD_INT 5
72007: PUSH
72008: EMPTY
72009: LIST
72010: LIST
72011: PUSH
72012: LD_INT 4
72014: PUSH
72015: LD_INT 5
72017: PUSH
72018: EMPTY
72019: LIST
72020: LIST
72021: PUSH
72022: LD_INT 3
72024: PUSH
72025: LD_INT 4
72027: PUSH
72028: EMPTY
72029: LIST
72030: LIST
72031: PUSH
72032: LD_INT 3
72034: PUSH
72035: LD_INT 3
72037: PUSH
72038: EMPTY
72039: LIST
72040: LIST
72041: PUSH
72042: LD_INT 5
72044: PUSH
72045: LD_INT 3
72047: PUSH
72048: EMPTY
72049: LIST
72050: LIST
72051: PUSH
72052: LD_INT 3
72054: PUSH
72055: LD_INT 5
72057: PUSH
72058: EMPTY
72059: LIST
72060: LIST
72061: PUSH
72062: LD_INT 0
72064: PUSH
72065: LD_INT 3
72067: PUSH
72068: EMPTY
72069: LIST
72070: LIST
72071: PUSH
72072: LD_INT 0
72074: PUSH
72075: LD_INT 2
72077: PUSH
72078: EMPTY
72079: LIST
72080: LIST
72081: PUSH
72082: LD_INT 1
72084: PUSH
72085: LD_INT 3
72087: PUSH
72088: EMPTY
72089: LIST
72090: LIST
72091: PUSH
72092: LD_INT 1
72094: PUSH
72095: LD_INT 4
72097: PUSH
72098: EMPTY
72099: LIST
72100: LIST
72101: PUSH
72102: LD_INT 0
72104: PUSH
72105: LD_INT 4
72107: PUSH
72108: EMPTY
72109: LIST
72110: LIST
72111: PUSH
72112: LD_INT 1
72114: NEG
72115: PUSH
72116: LD_INT 3
72118: PUSH
72119: EMPTY
72120: LIST
72121: LIST
72122: PUSH
72123: LD_INT 1
72125: NEG
72126: PUSH
72127: LD_INT 2
72129: PUSH
72130: EMPTY
72131: LIST
72132: LIST
72133: PUSH
72134: LD_INT 2
72136: PUSH
72137: LD_INT 4
72139: PUSH
72140: EMPTY
72141: LIST
72142: LIST
72143: PUSH
72144: LD_INT 2
72146: NEG
72147: PUSH
72148: LD_INT 2
72150: PUSH
72151: EMPTY
72152: LIST
72153: LIST
72154: PUSH
72155: LD_INT 4
72157: NEG
72158: PUSH
72159: LD_INT 0
72161: PUSH
72162: EMPTY
72163: LIST
72164: LIST
72165: PUSH
72166: LD_INT 4
72168: NEG
72169: PUSH
72170: LD_INT 1
72172: NEG
72173: PUSH
72174: EMPTY
72175: LIST
72176: LIST
72177: PUSH
72178: LD_INT 3
72180: NEG
72181: PUSH
72182: LD_INT 0
72184: PUSH
72185: EMPTY
72186: LIST
72187: LIST
72188: PUSH
72189: LD_INT 3
72191: NEG
72192: PUSH
72193: LD_INT 1
72195: PUSH
72196: EMPTY
72197: LIST
72198: LIST
72199: PUSH
72200: LD_INT 4
72202: NEG
72203: PUSH
72204: LD_INT 1
72206: PUSH
72207: EMPTY
72208: LIST
72209: LIST
72210: PUSH
72211: LD_INT 5
72213: NEG
72214: PUSH
72215: LD_INT 0
72217: PUSH
72218: EMPTY
72219: LIST
72220: LIST
72221: PUSH
72222: LD_INT 5
72224: NEG
72225: PUSH
72226: LD_INT 1
72228: NEG
72229: PUSH
72230: EMPTY
72231: LIST
72232: LIST
72233: PUSH
72234: LD_INT 5
72236: NEG
72237: PUSH
72238: LD_INT 2
72240: NEG
72241: PUSH
72242: EMPTY
72243: LIST
72244: LIST
72245: PUSH
72246: LD_INT 3
72248: NEG
72249: PUSH
72250: LD_INT 2
72252: PUSH
72253: EMPTY
72254: LIST
72255: LIST
72256: PUSH
72257: LD_INT 3
72259: NEG
72260: PUSH
72261: LD_INT 3
72263: NEG
72264: PUSH
72265: EMPTY
72266: LIST
72267: LIST
72268: PUSH
72269: LD_INT 3
72271: NEG
72272: PUSH
72273: LD_INT 4
72275: NEG
72276: PUSH
72277: EMPTY
72278: LIST
72279: LIST
72280: PUSH
72281: LD_INT 2
72283: NEG
72284: PUSH
72285: LD_INT 3
72287: NEG
72288: PUSH
72289: EMPTY
72290: LIST
72291: LIST
72292: PUSH
72293: LD_INT 2
72295: NEG
72296: PUSH
72297: LD_INT 2
72299: NEG
72300: PUSH
72301: EMPTY
72302: LIST
72303: LIST
72304: PUSH
72305: LD_INT 3
72307: NEG
72308: PUSH
72309: LD_INT 2
72311: NEG
72312: PUSH
72313: EMPTY
72314: LIST
72315: LIST
72316: PUSH
72317: LD_INT 4
72319: NEG
72320: PUSH
72321: LD_INT 3
72323: NEG
72324: PUSH
72325: EMPTY
72326: LIST
72327: LIST
72328: PUSH
72329: LD_INT 4
72331: NEG
72332: PUSH
72333: LD_INT 4
72335: NEG
72336: PUSH
72337: EMPTY
72338: LIST
72339: LIST
72340: PUSH
72341: LD_INT 2
72343: NEG
72344: PUSH
72345: LD_INT 4
72347: NEG
72348: PUSH
72349: EMPTY
72350: LIST
72351: LIST
72352: PUSH
72353: LD_INT 4
72355: NEG
72356: PUSH
72357: LD_INT 2
72359: NEG
72360: PUSH
72361: EMPTY
72362: LIST
72363: LIST
72364: PUSH
72365: LD_INT 0
72367: PUSH
72368: LD_INT 4
72370: NEG
72371: PUSH
72372: EMPTY
72373: LIST
72374: LIST
72375: PUSH
72376: LD_INT 0
72378: PUSH
72379: LD_INT 5
72381: NEG
72382: PUSH
72383: EMPTY
72384: LIST
72385: LIST
72386: PUSH
72387: LD_INT 1
72389: PUSH
72390: LD_INT 4
72392: NEG
72393: PUSH
72394: EMPTY
72395: LIST
72396: LIST
72397: PUSH
72398: LD_INT 1
72400: PUSH
72401: LD_INT 3
72403: NEG
72404: PUSH
72405: EMPTY
72406: LIST
72407: LIST
72408: PUSH
72409: LD_INT 0
72411: PUSH
72412: LD_INT 3
72414: NEG
72415: PUSH
72416: EMPTY
72417: LIST
72418: LIST
72419: PUSH
72420: LD_INT 1
72422: NEG
72423: PUSH
72424: LD_INT 4
72426: NEG
72427: PUSH
72428: EMPTY
72429: LIST
72430: LIST
72431: PUSH
72432: LD_INT 1
72434: NEG
72435: PUSH
72436: LD_INT 5
72438: NEG
72439: PUSH
72440: EMPTY
72441: LIST
72442: LIST
72443: PUSH
72444: LD_INT 2
72446: PUSH
72447: LD_INT 3
72449: NEG
72450: PUSH
72451: EMPTY
72452: LIST
72453: LIST
72454: PUSH
72455: LD_INT 2
72457: NEG
72458: PUSH
72459: LD_INT 5
72461: NEG
72462: PUSH
72463: EMPTY
72464: LIST
72465: LIST
72466: PUSH
72467: EMPTY
72468: LIST
72469: LIST
72470: LIST
72471: LIST
72472: LIST
72473: LIST
72474: LIST
72475: LIST
72476: LIST
72477: LIST
72478: LIST
72479: LIST
72480: LIST
72481: LIST
72482: LIST
72483: LIST
72484: LIST
72485: LIST
72486: LIST
72487: LIST
72488: LIST
72489: LIST
72490: LIST
72491: LIST
72492: LIST
72493: LIST
72494: LIST
72495: LIST
72496: LIST
72497: LIST
72498: LIST
72499: LIST
72500: LIST
72501: LIST
72502: LIST
72503: LIST
72504: LIST
72505: LIST
72506: LIST
72507: LIST
72508: LIST
72509: LIST
72510: LIST
72511: LIST
72512: LIST
72513: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
72514: LD_ADDR_VAR 0 31
72518: PUSH
72519: LD_INT 0
72521: PUSH
72522: LD_INT 4
72524: PUSH
72525: EMPTY
72526: LIST
72527: LIST
72528: PUSH
72529: LD_INT 0
72531: PUSH
72532: LD_INT 3
72534: PUSH
72535: EMPTY
72536: LIST
72537: LIST
72538: PUSH
72539: LD_INT 1
72541: PUSH
72542: LD_INT 4
72544: PUSH
72545: EMPTY
72546: LIST
72547: LIST
72548: PUSH
72549: LD_INT 1
72551: PUSH
72552: LD_INT 5
72554: PUSH
72555: EMPTY
72556: LIST
72557: LIST
72558: PUSH
72559: LD_INT 0
72561: PUSH
72562: LD_INT 5
72564: PUSH
72565: EMPTY
72566: LIST
72567: LIST
72568: PUSH
72569: LD_INT 1
72571: NEG
72572: PUSH
72573: LD_INT 4
72575: PUSH
72576: EMPTY
72577: LIST
72578: LIST
72579: PUSH
72580: LD_INT 1
72582: NEG
72583: PUSH
72584: LD_INT 3
72586: PUSH
72587: EMPTY
72588: LIST
72589: LIST
72590: PUSH
72591: LD_INT 2
72593: PUSH
72594: LD_INT 5
72596: PUSH
72597: EMPTY
72598: LIST
72599: LIST
72600: PUSH
72601: LD_INT 2
72603: NEG
72604: PUSH
72605: LD_INT 3
72607: PUSH
72608: EMPTY
72609: LIST
72610: LIST
72611: PUSH
72612: LD_INT 3
72614: NEG
72615: PUSH
72616: LD_INT 0
72618: PUSH
72619: EMPTY
72620: LIST
72621: LIST
72622: PUSH
72623: LD_INT 3
72625: NEG
72626: PUSH
72627: LD_INT 1
72629: NEG
72630: PUSH
72631: EMPTY
72632: LIST
72633: LIST
72634: PUSH
72635: LD_INT 2
72637: NEG
72638: PUSH
72639: LD_INT 0
72641: PUSH
72642: EMPTY
72643: LIST
72644: LIST
72645: PUSH
72646: LD_INT 2
72648: NEG
72649: PUSH
72650: LD_INT 1
72652: PUSH
72653: EMPTY
72654: LIST
72655: LIST
72656: PUSH
72657: LD_INT 3
72659: NEG
72660: PUSH
72661: LD_INT 1
72663: PUSH
72664: EMPTY
72665: LIST
72666: LIST
72667: PUSH
72668: LD_INT 4
72670: NEG
72671: PUSH
72672: LD_INT 0
72674: PUSH
72675: EMPTY
72676: LIST
72677: LIST
72678: PUSH
72679: LD_INT 4
72681: NEG
72682: PUSH
72683: LD_INT 1
72685: NEG
72686: PUSH
72687: EMPTY
72688: LIST
72689: LIST
72690: PUSH
72691: LD_INT 4
72693: NEG
72694: PUSH
72695: LD_INT 2
72697: NEG
72698: PUSH
72699: EMPTY
72700: LIST
72701: LIST
72702: PUSH
72703: LD_INT 2
72705: NEG
72706: PUSH
72707: LD_INT 2
72709: PUSH
72710: EMPTY
72711: LIST
72712: LIST
72713: PUSH
72714: LD_INT 4
72716: NEG
72717: PUSH
72718: LD_INT 4
72720: NEG
72721: PUSH
72722: EMPTY
72723: LIST
72724: LIST
72725: PUSH
72726: LD_INT 4
72728: NEG
72729: PUSH
72730: LD_INT 5
72732: NEG
72733: PUSH
72734: EMPTY
72735: LIST
72736: LIST
72737: PUSH
72738: LD_INT 3
72740: NEG
72741: PUSH
72742: LD_INT 4
72744: NEG
72745: PUSH
72746: EMPTY
72747: LIST
72748: LIST
72749: PUSH
72750: LD_INT 3
72752: NEG
72753: PUSH
72754: LD_INT 3
72756: NEG
72757: PUSH
72758: EMPTY
72759: LIST
72760: LIST
72761: PUSH
72762: LD_INT 4
72764: NEG
72765: PUSH
72766: LD_INT 3
72768: NEG
72769: PUSH
72770: EMPTY
72771: LIST
72772: LIST
72773: PUSH
72774: LD_INT 5
72776: NEG
72777: PUSH
72778: LD_INT 4
72780: NEG
72781: PUSH
72782: EMPTY
72783: LIST
72784: LIST
72785: PUSH
72786: LD_INT 5
72788: NEG
72789: PUSH
72790: LD_INT 5
72792: NEG
72793: PUSH
72794: EMPTY
72795: LIST
72796: LIST
72797: PUSH
72798: LD_INT 3
72800: NEG
72801: PUSH
72802: LD_INT 5
72804: NEG
72805: PUSH
72806: EMPTY
72807: LIST
72808: LIST
72809: PUSH
72810: LD_INT 5
72812: NEG
72813: PUSH
72814: LD_INT 3
72816: NEG
72817: PUSH
72818: EMPTY
72819: LIST
72820: LIST
72821: PUSH
72822: LD_INT 0
72824: PUSH
72825: LD_INT 3
72827: NEG
72828: PUSH
72829: EMPTY
72830: LIST
72831: LIST
72832: PUSH
72833: LD_INT 0
72835: PUSH
72836: LD_INT 4
72838: NEG
72839: PUSH
72840: EMPTY
72841: LIST
72842: LIST
72843: PUSH
72844: LD_INT 1
72846: PUSH
72847: LD_INT 3
72849: NEG
72850: PUSH
72851: EMPTY
72852: LIST
72853: LIST
72854: PUSH
72855: LD_INT 1
72857: PUSH
72858: LD_INT 2
72860: NEG
72861: PUSH
72862: EMPTY
72863: LIST
72864: LIST
72865: PUSH
72866: LD_INT 0
72868: PUSH
72869: LD_INT 2
72871: NEG
72872: PUSH
72873: EMPTY
72874: LIST
72875: LIST
72876: PUSH
72877: LD_INT 1
72879: NEG
72880: PUSH
72881: LD_INT 3
72883: NEG
72884: PUSH
72885: EMPTY
72886: LIST
72887: LIST
72888: PUSH
72889: LD_INT 1
72891: NEG
72892: PUSH
72893: LD_INT 4
72895: NEG
72896: PUSH
72897: EMPTY
72898: LIST
72899: LIST
72900: PUSH
72901: LD_INT 2
72903: PUSH
72904: LD_INT 2
72906: NEG
72907: PUSH
72908: EMPTY
72909: LIST
72910: LIST
72911: PUSH
72912: LD_INT 2
72914: NEG
72915: PUSH
72916: LD_INT 4
72918: NEG
72919: PUSH
72920: EMPTY
72921: LIST
72922: LIST
72923: PUSH
72924: LD_INT 4
72926: PUSH
72927: LD_INT 0
72929: PUSH
72930: EMPTY
72931: LIST
72932: LIST
72933: PUSH
72934: LD_INT 4
72936: PUSH
72937: LD_INT 1
72939: NEG
72940: PUSH
72941: EMPTY
72942: LIST
72943: LIST
72944: PUSH
72945: LD_INT 5
72947: PUSH
72948: LD_INT 0
72950: PUSH
72951: EMPTY
72952: LIST
72953: LIST
72954: PUSH
72955: LD_INT 5
72957: PUSH
72958: LD_INT 1
72960: PUSH
72961: EMPTY
72962: LIST
72963: LIST
72964: PUSH
72965: LD_INT 4
72967: PUSH
72968: LD_INT 1
72970: PUSH
72971: EMPTY
72972: LIST
72973: LIST
72974: PUSH
72975: LD_INT 3
72977: PUSH
72978: LD_INT 0
72980: PUSH
72981: EMPTY
72982: LIST
72983: LIST
72984: PUSH
72985: LD_INT 3
72987: PUSH
72988: LD_INT 1
72990: NEG
72991: PUSH
72992: EMPTY
72993: LIST
72994: LIST
72995: PUSH
72996: LD_INT 3
72998: PUSH
72999: LD_INT 2
73001: NEG
73002: PUSH
73003: EMPTY
73004: LIST
73005: LIST
73006: PUSH
73007: LD_INT 5
73009: PUSH
73010: LD_INT 2
73012: PUSH
73013: EMPTY
73014: LIST
73015: LIST
73016: PUSH
73017: EMPTY
73018: LIST
73019: LIST
73020: LIST
73021: LIST
73022: LIST
73023: LIST
73024: LIST
73025: LIST
73026: LIST
73027: LIST
73028: LIST
73029: LIST
73030: LIST
73031: LIST
73032: LIST
73033: LIST
73034: LIST
73035: LIST
73036: LIST
73037: LIST
73038: LIST
73039: LIST
73040: LIST
73041: LIST
73042: LIST
73043: LIST
73044: LIST
73045: LIST
73046: LIST
73047: LIST
73048: LIST
73049: LIST
73050: LIST
73051: LIST
73052: LIST
73053: LIST
73054: LIST
73055: LIST
73056: LIST
73057: LIST
73058: LIST
73059: LIST
73060: LIST
73061: LIST
73062: LIST
73063: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
73064: LD_ADDR_VAR 0 32
73068: PUSH
73069: LD_INT 4
73071: NEG
73072: PUSH
73073: LD_INT 0
73075: PUSH
73076: EMPTY
73077: LIST
73078: LIST
73079: PUSH
73080: LD_INT 4
73082: NEG
73083: PUSH
73084: LD_INT 1
73086: NEG
73087: PUSH
73088: EMPTY
73089: LIST
73090: LIST
73091: PUSH
73092: LD_INT 3
73094: NEG
73095: PUSH
73096: LD_INT 0
73098: PUSH
73099: EMPTY
73100: LIST
73101: LIST
73102: PUSH
73103: LD_INT 3
73105: NEG
73106: PUSH
73107: LD_INT 1
73109: PUSH
73110: EMPTY
73111: LIST
73112: LIST
73113: PUSH
73114: LD_INT 4
73116: NEG
73117: PUSH
73118: LD_INT 1
73120: PUSH
73121: EMPTY
73122: LIST
73123: LIST
73124: PUSH
73125: LD_INT 5
73127: NEG
73128: PUSH
73129: LD_INT 0
73131: PUSH
73132: EMPTY
73133: LIST
73134: LIST
73135: PUSH
73136: LD_INT 5
73138: NEG
73139: PUSH
73140: LD_INT 1
73142: NEG
73143: PUSH
73144: EMPTY
73145: LIST
73146: LIST
73147: PUSH
73148: LD_INT 5
73150: NEG
73151: PUSH
73152: LD_INT 2
73154: NEG
73155: PUSH
73156: EMPTY
73157: LIST
73158: LIST
73159: PUSH
73160: LD_INT 3
73162: NEG
73163: PUSH
73164: LD_INT 2
73166: PUSH
73167: EMPTY
73168: LIST
73169: LIST
73170: PUSH
73171: LD_INT 3
73173: NEG
73174: PUSH
73175: LD_INT 3
73177: NEG
73178: PUSH
73179: EMPTY
73180: LIST
73181: LIST
73182: PUSH
73183: LD_INT 3
73185: NEG
73186: PUSH
73187: LD_INT 4
73189: NEG
73190: PUSH
73191: EMPTY
73192: LIST
73193: LIST
73194: PUSH
73195: LD_INT 2
73197: NEG
73198: PUSH
73199: LD_INT 3
73201: NEG
73202: PUSH
73203: EMPTY
73204: LIST
73205: LIST
73206: PUSH
73207: LD_INT 2
73209: NEG
73210: PUSH
73211: LD_INT 2
73213: NEG
73214: PUSH
73215: EMPTY
73216: LIST
73217: LIST
73218: PUSH
73219: LD_INT 3
73221: NEG
73222: PUSH
73223: LD_INT 2
73225: NEG
73226: PUSH
73227: EMPTY
73228: LIST
73229: LIST
73230: PUSH
73231: LD_INT 4
73233: NEG
73234: PUSH
73235: LD_INT 3
73237: NEG
73238: PUSH
73239: EMPTY
73240: LIST
73241: LIST
73242: PUSH
73243: LD_INT 4
73245: NEG
73246: PUSH
73247: LD_INT 4
73249: NEG
73250: PUSH
73251: EMPTY
73252: LIST
73253: LIST
73254: PUSH
73255: LD_INT 2
73257: NEG
73258: PUSH
73259: LD_INT 4
73261: NEG
73262: PUSH
73263: EMPTY
73264: LIST
73265: LIST
73266: PUSH
73267: LD_INT 4
73269: NEG
73270: PUSH
73271: LD_INT 2
73273: NEG
73274: PUSH
73275: EMPTY
73276: LIST
73277: LIST
73278: PUSH
73279: LD_INT 0
73281: PUSH
73282: LD_INT 4
73284: NEG
73285: PUSH
73286: EMPTY
73287: LIST
73288: LIST
73289: PUSH
73290: LD_INT 0
73292: PUSH
73293: LD_INT 5
73295: NEG
73296: PUSH
73297: EMPTY
73298: LIST
73299: LIST
73300: PUSH
73301: LD_INT 1
73303: PUSH
73304: LD_INT 4
73306: NEG
73307: PUSH
73308: EMPTY
73309: LIST
73310: LIST
73311: PUSH
73312: LD_INT 1
73314: PUSH
73315: LD_INT 3
73317: NEG
73318: PUSH
73319: EMPTY
73320: LIST
73321: LIST
73322: PUSH
73323: LD_INT 0
73325: PUSH
73326: LD_INT 3
73328: NEG
73329: PUSH
73330: EMPTY
73331: LIST
73332: LIST
73333: PUSH
73334: LD_INT 1
73336: NEG
73337: PUSH
73338: LD_INT 4
73340: NEG
73341: PUSH
73342: EMPTY
73343: LIST
73344: LIST
73345: PUSH
73346: LD_INT 1
73348: NEG
73349: PUSH
73350: LD_INT 5
73352: NEG
73353: PUSH
73354: EMPTY
73355: LIST
73356: LIST
73357: PUSH
73358: LD_INT 2
73360: PUSH
73361: LD_INT 3
73363: NEG
73364: PUSH
73365: EMPTY
73366: LIST
73367: LIST
73368: PUSH
73369: LD_INT 2
73371: NEG
73372: PUSH
73373: LD_INT 5
73375: NEG
73376: PUSH
73377: EMPTY
73378: LIST
73379: LIST
73380: PUSH
73381: LD_INT 3
73383: PUSH
73384: LD_INT 0
73386: PUSH
73387: EMPTY
73388: LIST
73389: LIST
73390: PUSH
73391: LD_INT 3
73393: PUSH
73394: LD_INT 1
73396: NEG
73397: PUSH
73398: EMPTY
73399: LIST
73400: LIST
73401: PUSH
73402: LD_INT 4
73404: PUSH
73405: LD_INT 0
73407: PUSH
73408: EMPTY
73409: LIST
73410: LIST
73411: PUSH
73412: LD_INT 4
73414: PUSH
73415: LD_INT 1
73417: PUSH
73418: EMPTY
73419: LIST
73420: LIST
73421: PUSH
73422: LD_INT 3
73424: PUSH
73425: LD_INT 1
73427: PUSH
73428: EMPTY
73429: LIST
73430: LIST
73431: PUSH
73432: LD_INT 2
73434: PUSH
73435: LD_INT 0
73437: PUSH
73438: EMPTY
73439: LIST
73440: LIST
73441: PUSH
73442: LD_INT 2
73444: PUSH
73445: LD_INT 1
73447: NEG
73448: PUSH
73449: EMPTY
73450: LIST
73451: LIST
73452: PUSH
73453: LD_INT 2
73455: PUSH
73456: LD_INT 2
73458: NEG
73459: PUSH
73460: EMPTY
73461: LIST
73462: LIST
73463: PUSH
73464: LD_INT 4
73466: PUSH
73467: LD_INT 2
73469: PUSH
73470: EMPTY
73471: LIST
73472: LIST
73473: PUSH
73474: LD_INT 4
73476: PUSH
73477: LD_INT 4
73479: PUSH
73480: EMPTY
73481: LIST
73482: LIST
73483: PUSH
73484: LD_INT 4
73486: PUSH
73487: LD_INT 3
73489: PUSH
73490: EMPTY
73491: LIST
73492: LIST
73493: PUSH
73494: LD_INT 5
73496: PUSH
73497: LD_INT 4
73499: PUSH
73500: EMPTY
73501: LIST
73502: LIST
73503: PUSH
73504: LD_INT 5
73506: PUSH
73507: LD_INT 5
73509: PUSH
73510: EMPTY
73511: LIST
73512: LIST
73513: PUSH
73514: LD_INT 4
73516: PUSH
73517: LD_INT 5
73519: PUSH
73520: EMPTY
73521: LIST
73522: LIST
73523: PUSH
73524: LD_INT 3
73526: PUSH
73527: LD_INT 4
73529: PUSH
73530: EMPTY
73531: LIST
73532: LIST
73533: PUSH
73534: LD_INT 3
73536: PUSH
73537: LD_INT 3
73539: PUSH
73540: EMPTY
73541: LIST
73542: LIST
73543: PUSH
73544: LD_INT 5
73546: PUSH
73547: LD_INT 3
73549: PUSH
73550: EMPTY
73551: LIST
73552: LIST
73553: PUSH
73554: LD_INT 3
73556: PUSH
73557: LD_INT 5
73559: PUSH
73560: EMPTY
73561: LIST
73562: LIST
73563: PUSH
73564: EMPTY
73565: LIST
73566: LIST
73567: LIST
73568: LIST
73569: LIST
73570: LIST
73571: LIST
73572: LIST
73573: LIST
73574: LIST
73575: LIST
73576: LIST
73577: LIST
73578: LIST
73579: LIST
73580: LIST
73581: LIST
73582: LIST
73583: LIST
73584: LIST
73585: LIST
73586: LIST
73587: LIST
73588: LIST
73589: LIST
73590: LIST
73591: LIST
73592: LIST
73593: LIST
73594: LIST
73595: LIST
73596: LIST
73597: LIST
73598: LIST
73599: LIST
73600: LIST
73601: LIST
73602: LIST
73603: LIST
73604: LIST
73605: LIST
73606: LIST
73607: LIST
73608: LIST
73609: LIST
73610: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
73611: LD_ADDR_VAR 0 33
73615: PUSH
73616: LD_INT 4
73618: NEG
73619: PUSH
73620: LD_INT 4
73622: NEG
73623: PUSH
73624: EMPTY
73625: LIST
73626: LIST
73627: PUSH
73628: LD_INT 4
73630: NEG
73631: PUSH
73632: LD_INT 5
73634: NEG
73635: PUSH
73636: EMPTY
73637: LIST
73638: LIST
73639: PUSH
73640: LD_INT 3
73642: NEG
73643: PUSH
73644: LD_INT 4
73646: NEG
73647: PUSH
73648: EMPTY
73649: LIST
73650: LIST
73651: PUSH
73652: LD_INT 3
73654: NEG
73655: PUSH
73656: LD_INT 3
73658: NEG
73659: PUSH
73660: EMPTY
73661: LIST
73662: LIST
73663: PUSH
73664: LD_INT 4
73666: NEG
73667: PUSH
73668: LD_INT 3
73670: NEG
73671: PUSH
73672: EMPTY
73673: LIST
73674: LIST
73675: PUSH
73676: LD_INT 5
73678: NEG
73679: PUSH
73680: LD_INT 4
73682: NEG
73683: PUSH
73684: EMPTY
73685: LIST
73686: LIST
73687: PUSH
73688: LD_INT 5
73690: NEG
73691: PUSH
73692: LD_INT 5
73694: NEG
73695: PUSH
73696: EMPTY
73697: LIST
73698: LIST
73699: PUSH
73700: LD_INT 3
73702: NEG
73703: PUSH
73704: LD_INT 5
73706: NEG
73707: PUSH
73708: EMPTY
73709: LIST
73710: LIST
73711: PUSH
73712: LD_INT 5
73714: NEG
73715: PUSH
73716: LD_INT 3
73718: NEG
73719: PUSH
73720: EMPTY
73721: LIST
73722: LIST
73723: PUSH
73724: LD_INT 0
73726: PUSH
73727: LD_INT 3
73729: NEG
73730: PUSH
73731: EMPTY
73732: LIST
73733: LIST
73734: PUSH
73735: LD_INT 0
73737: PUSH
73738: LD_INT 4
73740: NEG
73741: PUSH
73742: EMPTY
73743: LIST
73744: LIST
73745: PUSH
73746: LD_INT 1
73748: PUSH
73749: LD_INT 3
73751: NEG
73752: PUSH
73753: EMPTY
73754: LIST
73755: LIST
73756: PUSH
73757: LD_INT 1
73759: PUSH
73760: LD_INT 2
73762: NEG
73763: PUSH
73764: EMPTY
73765: LIST
73766: LIST
73767: PUSH
73768: LD_INT 0
73770: PUSH
73771: LD_INT 2
73773: NEG
73774: PUSH
73775: EMPTY
73776: LIST
73777: LIST
73778: PUSH
73779: LD_INT 1
73781: NEG
73782: PUSH
73783: LD_INT 3
73785: NEG
73786: PUSH
73787: EMPTY
73788: LIST
73789: LIST
73790: PUSH
73791: LD_INT 1
73793: NEG
73794: PUSH
73795: LD_INT 4
73797: NEG
73798: PUSH
73799: EMPTY
73800: LIST
73801: LIST
73802: PUSH
73803: LD_INT 2
73805: PUSH
73806: LD_INT 2
73808: NEG
73809: PUSH
73810: EMPTY
73811: LIST
73812: LIST
73813: PUSH
73814: LD_INT 2
73816: NEG
73817: PUSH
73818: LD_INT 4
73820: NEG
73821: PUSH
73822: EMPTY
73823: LIST
73824: LIST
73825: PUSH
73826: LD_INT 4
73828: PUSH
73829: LD_INT 0
73831: PUSH
73832: EMPTY
73833: LIST
73834: LIST
73835: PUSH
73836: LD_INT 4
73838: PUSH
73839: LD_INT 1
73841: NEG
73842: PUSH
73843: EMPTY
73844: LIST
73845: LIST
73846: PUSH
73847: LD_INT 5
73849: PUSH
73850: LD_INT 0
73852: PUSH
73853: EMPTY
73854: LIST
73855: LIST
73856: PUSH
73857: LD_INT 5
73859: PUSH
73860: LD_INT 1
73862: PUSH
73863: EMPTY
73864: LIST
73865: LIST
73866: PUSH
73867: LD_INT 4
73869: PUSH
73870: LD_INT 1
73872: PUSH
73873: EMPTY
73874: LIST
73875: LIST
73876: PUSH
73877: LD_INT 3
73879: PUSH
73880: LD_INT 0
73882: PUSH
73883: EMPTY
73884: LIST
73885: LIST
73886: PUSH
73887: LD_INT 3
73889: PUSH
73890: LD_INT 1
73892: NEG
73893: PUSH
73894: EMPTY
73895: LIST
73896: LIST
73897: PUSH
73898: LD_INT 3
73900: PUSH
73901: LD_INT 2
73903: NEG
73904: PUSH
73905: EMPTY
73906: LIST
73907: LIST
73908: PUSH
73909: LD_INT 5
73911: PUSH
73912: LD_INT 2
73914: PUSH
73915: EMPTY
73916: LIST
73917: LIST
73918: PUSH
73919: LD_INT 3
73921: PUSH
73922: LD_INT 3
73924: PUSH
73925: EMPTY
73926: LIST
73927: LIST
73928: PUSH
73929: LD_INT 3
73931: PUSH
73932: LD_INT 2
73934: PUSH
73935: EMPTY
73936: LIST
73937: LIST
73938: PUSH
73939: LD_INT 4
73941: PUSH
73942: LD_INT 3
73944: PUSH
73945: EMPTY
73946: LIST
73947: LIST
73948: PUSH
73949: LD_INT 4
73951: PUSH
73952: LD_INT 4
73954: PUSH
73955: EMPTY
73956: LIST
73957: LIST
73958: PUSH
73959: LD_INT 3
73961: PUSH
73962: LD_INT 4
73964: PUSH
73965: EMPTY
73966: LIST
73967: LIST
73968: PUSH
73969: LD_INT 2
73971: PUSH
73972: LD_INT 3
73974: PUSH
73975: EMPTY
73976: LIST
73977: LIST
73978: PUSH
73979: LD_INT 2
73981: PUSH
73982: LD_INT 2
73984: PUSH
73985: EMPTY
73986: LIST
73987: LIST
73988: PUSH
73989: LD_INT 4
73991: PUSH
73992: LD_INT 2
73994: PUSH
73995: EMPTY
73996: LIST
73997: LIST
73998: PUSH
73999: LD_INT 2
74001: PUSH
74002: LD_INT 4
74004: PUSH
74005: EMPTY
74006: LIST
74007: LIST
74008: PUSH
74009: LD_INT 0
74011: PUSH
74012: LD_INT 4
74014: PUSH
74015: EMPTY
74016: LIST
74017: LIST
74018: PUSH
74019: LD_INT 0
74021: PUSH
74022: LD_INT 3
74024: PUSH
74025: EMPTY
74026: LIST
74027: LIST
74028: PUSH
74029: LD_INT 1
74031: PUSH
74032: LD_INT 4
74034: PUSH
74035: EMPTY
74036: LIST
74037: LIST
74038: PUSH
74039: LD_INT 1
74041: PUSH
74042: LD_INT 5
74044: PUSH
74045: EMPTY
74046: LIST
74047: LIST
74048: PUSH
74049: LD_INT 0
74051: PUSH
74052: LD_INT 5
74054: PUSH
74055: EMPTY
74056: LIST
74057: LIST
74058: PUSH
74059: LD_INT 1
74061: NEG
74062: PUSH
74063: LD_INT 4
74065: PUSH
74066: EMPTY
74067: LIST
74068: LIST
74069: PUSH
74070: LD_INT 1
74072: NEG
74073: PUSH
74074: LD_INT 3
74076: PUSH
74077: EMPTY
74078: LIST
74079: LIST
74080: PUSH
74081: LD_INT 2
74083: PUSH
74084: LD_INT 5
74086: PUSH
74087: EMPTY
74088: LIST
74089: LIST
74090: PUSH
74091: LD_INT 2
74093: NEG
74094: PUSH
74095: LD_INT 3
74097: PUSH
74098: EMPTY
74099: LIST
74100: LIST
74101: PUSH
74102: EMPTY
74103: LIST
74104: LIST
74105: LIST
74106: LIST
74107: LIST
74108: LIST
74109: LIST
74110: LIST
74111: LIST
74112: LIST
74113: LIST
74114: LIST
74115: LIST
74116: LIST
74117: LIST
74118: LIST
74119: LIST
74120: LIST
74121: LIST
74122: LIST
74123: LIST
74124: LIST
74125: LIST
74126: LIST
74127: LIST
74128: LIST
74129: LIST
74130: LIST
74131: LIST
74132: LIST
74133: LIST
74134: LIST
74135: LIST
74136: LIST
74137: LIST
74138: LIST
74139: LIST
74140: LIST
74141: LIST
74142: LIST
74143: LIST
74144: LIST
74145: LIST
74146: LIST
74147: LIST
74148: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
74149: LD_ADDR_VAR 0 34
74153: PUSH
74154: LD_INT 0
74156: PUSH
74157: LD_INT 4
74159: NEG
74160: PUSH
74161: EMPTY
74162: LIST
74163: LIST
74164: PUSH
74165: LD_INT 0
74167: PUSH
74168: LD_INT 5
74170: NEG
74171: PUSH
74172: EMPTY
74173: LIST
74174: LIST
74175: PUSH
74176: LD_INT 1
74178: PUSH
74179: LD_INT 4
74181: NEG
74182: PUSH
74183: EMPTY
74184: LIST
74185: LIST
74186: PUSH
74187: LD_INT 1
74189: PUSH
74190: LD_INT 3
74192: NEG
74193: PUSH
74194: EMPTY
74195: LIST
74196: LIST
74197: PUSH
74198: LD_INT 0
74200: PUSH
74201: LD_INT 3
74203: NEG
74204: PUSH
74205: EMPTY
74206: LIST
74207: LIST
74208: PUSH
74209: LD_INT 1
74211: NEG
74212: PUSH
74213: LD_INT 4
74215: NEG
74216: PUSH
74217: EMPTY
74218: LIST
74219: LIST
74220: PUSH
74221: LD_INT 1
74223: NEG
74224: PUSH
74225: LD_INT 5
74227: NEG
74228: PUSH
74229: EMPTY
74230: LIST
74231: LIST
74232: PUSH
74233: LD_INT 2
74235: PUSH
74236: LD_INT 3
74238: NEG
74239: PUSH
74240: EMPTY
74241: LIST
74242: LIST
74243: PUSH
74244: LD_INT 2
74246: NEG
74247: PUSH
74248: LD_INT 5
74250: NEG
74251: PUSH
74252: EMPTY
74253: LIST
74254: LIST
74255: PUSH
74256: LD_INT 3
74258: PUSH
74259: LD_INT 0
74261: PUSH
74262: EMPTY
74263: LIST
74264: LIST
74265: PUSH
74266: LD_INT 3
74268: PUSH
74269: LD_INT 1
74271: NEG
74272: PUSH
74273: EMPTY
74274: LIST
74275: LIST
74276: PUSH
74277: LD_INT 4
74279: PUSH
74280: LD_INT 0
74282: PUSH
74283: EMPTY
74284: LIST
74285: LIST
74286: PUSH
74287: LD_INT 4
74289: PUSH
74290: LD_INT 1
74292: PUSH
74293: EMPTY
74294: LIST
74295: LIST
74296: PUSH
74297: LD_INT 3
74299: PUSH
74300: LD_INT 1
74302: PUSH
74303: EMPTY
74304: LIST
74305: LIST
74306: PUSH
74307: LD_INT 2
74309: PUSH
74310: LD_INT 0
74312: PUSH
74313: EMPTY
74314: LIST
74315: LIST
74316: PUSH
74317: LD_INT 2
74319: PUSH
74320: LD_INT 1
74322: NEG
74323: PUSH
74324: EMPTY
74325: LIST
74326: LIST
74327: PUSH
74328: LD_INT 2
74330: PUSH
74331: LD_INT 2
74333: NEG
74334: PUSH
74335: EMPTY
74336: LIST
74337: LIST
74338: PUSH
74339: LD_INT 4
74341: PUSH
74342: LD_INT 2
74344: PUSH
74345: EMPTY
74346: LIST
74347: LIST
74348: PUSH
74349: LD_INT 4
74351: PUSH
74352: LD_INT 4
74354: PUSH
74355: EMPTY
74356: LIST
74357: LIST
74358: PUSH
74359: LD_INT 4
74361: PUSH
74362: LD_INT 3
74364: PUSH
74365: EMPTY
74366: LIST
74367: LIST
74368: PUSH
74369: LD_INT 5
74371: PUSH
74372: LD_INT 4
74374: PUSH
74375: EMPTY
74376: LIST
74377: LIST
74378: PUSH
74379: LD_INT 5
74381: PUSH
74382: LD_INT 5
74384: PUSH
74385: EMPTY
74386: LIST
74387: LIST
74388: PUSH
74389: LD_INT 4
74391: PUSH
74392: LD_INT 5
74394: PUSH
74395: EMPTY
74396: LIST
74397: LIST
74398: PUSH
74399: LD_INT 3
74401: PUSH
74402: LD_INT 4
74404: PUSH
74405: EMPTY
74406: LIST
74407: LIST
74408: PUSH
74409: LD_INT 3
74411: PUSH
74412: LD_INT 3
74414: PUSH
74415: EMPTY
74416: LIST
74417: LIST
74418: PUSH
74419: LD_INT 5
74421: PUSH
74422: LD_INT 3
74424: PUSH
74425: EMPTY
74426: LIST
74427: LIST
74428: PUSH
74429: LD_INT 3
74431: PUSH
74432: LD_INT 5
74434: PUSH
74435: EMPTY
74436: LIST
74437: LIST
74438: PUSH
74439: LD_INT 0
74441: PUSH
74442: LD_INT 3
74444: PUSH
74445: EMPTY
74446: LIST
74447: LIST
74448: PUSH
74449: LD_INT 0
74451: PUSH
74452: LD_INT 2
74454: PUSH
74455: EMPTY
74456: LIST
74457: LIST
74458: PUSH
74459: LD_INT 1
74461: PUSH
74462: LD_INT 3
74464: PUSH
74465: EMPTY
74466: LIST
74467: LIST
74468: PUSH
74469: LD_INT 1
74471: PUSH
74472: LD_INT 4
74474: PUSH
74475: EMPTY
74476: LIST
74477: LIST
74478: PUSH
74479: LD_INT 0
74481: PUSH
74482: LD_INT 4
74484: PUSH
74485: EMPTY
74486: LIST
74487: LIST
74488: PUSH
74489: LD_INT 1
74491: NEG
74492: PUSH
74493: LD_INT 3
74495: PUSH
74496: EMPTY
74497: LIST
74498: LIST
74499: PUSH
74500: LD_INT 1
74502: NEG
74503: PUSH
74504: LD_INT 2
74506: PUSH
74507: EMPTY
74508: LIST
74509: LIST
74510: PUSH
74511: LD_INT 2
74513: PUSH
74514: LD_INT 4
74516: PUSH
74517: EMPTY
74518: LIST
74519: LIST
74520: PUSH
74521: LD_INT 2
74523: NEG
74524: PUSH
74525: LD_INT 2
74527: PUSH
74528: EMPTY
74529: LIST
74530: LIST
74531: PUSH
74532: LD_INT 4
74534: NEG
74535: PUSH
74536: LD_INT 0
74538: PUSH
74539: EMPTY
74540: LIST
74541: LIST
74542: PUSH
74543: LD_INT 4
74545: NEG
74546: PUSH
74547: LD_INT 1
74549: NEG
74550: PUSH
74551: EMPTY
74552: LIST
74553: LIST
74554: PUSH
74555: LD_INT 3
74557: NEG
74558: PUSH
74559: LD_INT 0
74561: PUSH
74562: EMPTY
74563: LIST
74564: LIST
74565: PUSH
74566: LD_INT 3
74568: NEG
74569: PUSH
74570: LD_INT 1
74572: PUSH
74573: EMPTY
74574: LIST
74575: LIST
74576: PUSH
74577: LD_INT 4
74579: NEG
74580: PUSH
74581: LD_INT 1
74583: PUSH
74584: EMPTY
74585: LIST
74586: LIST
74587: PUSH
74588: LD_INT 5
74590: NEG
74591: PUSH
74592: LD_INT 0
74594: PUSH
74595: EMPTY
74596: LIST
74597: LIST
74598: PUSH
74599: LD_INT 5
74601: NEG
74602: PUSH
74603: LD_INT 1
74605: NEG
74606: PUSH
74607: EMPTY
74608: LIST
74609: LIST
74610: PUSH
74611: LD_INT 5
74613: NEG
74614: PUSH
74615: LD_INT 2
74617: NEG
74618: PUSH
74619: EMPTY
74620: LIST
74621: LIST
74622: PUSH
74623: LD_INT 3
74625: NEG
74626: PUSH
74627: LD_INT 2
74629: PUSH
74630: EMPTY
74631: LIST
74632: LIST
74633: PUSH
74634: EMPTY
74635: LIST
74636: LIST
74637: LIST
74638: LIST
74639: LIST
74640: LIST
74641: LIST
74642: LIST
74643: LIST
74644: LIST
74645: LIST
74646: LIST
74647: LIST
74648: LIST
74649: LIST
74650: LIST
74651: LIST
74652: LIST
74653: LIST
74654: LIST
74655: LIST
74656: LIST
74657: LIST
74658: LIST
74659: LIST
74660: LIST
74661: LIST
74662: LIST
74663: LIST
74664: LIST
74665: LIST
74666: LIST
74667: LIST
74668: LIST
74669: LIST
74670: LIST
74671: LIST
74672: LIST
74673: LIST
74674: LIST
74675: LIST
74676: LIST
74677: LIST
74678: LIST
74679: LIST
74680: ST_TO_ADDR
// end ; end ;
74681: GO 74684
74683: POP
// case btype of b_depot , b_warehouse :
74684: LD_VAR 0 1
74688: PUSH
74689: LD_INT 0
74691: DOUBLE
74692: EQUAL
74693: IFTRUE 74703
74695: LD_INT 1
74697: DOUBLE
74698: EQUAL
74699: IFTRUE 74703
74701: GO 74904
74703: POP
// case nation of nation_american :
74704: LD_VAR 0 5
74708: PUSH
74709: LD_INT 1
74711: DOUBLE
74712: EQUAL
74713: IFTRUE 74717
74715: GO 74773
74717: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
74718: LD_ADDR_VAR 0 9
74722: PUSH
74723: LD_VAR 0 11
74727: PUSH
74728: LD_VAR 0 12
74732: PUSH
74733: LD_VAR 0 13
74737: PUSH
74738: LD_VAR 0 14
74742: PUSH
74743: LD_VAR 0 15
74747: PUSH
74748: LD_VAR 0 16
74752: PUSH
74753: EMPTY
74754: LIST
74755: LIST
74756: LIST
74757: LIST
74758: LIST
74759: LIST
74760: PUSH
74761: LD_VAR 0 4
74765: PUSH
74766: LD_INT 1
74768: PLUS
74769: ARRAY
74770: ST_TO_ADDR
74771: GO 74902
74773: LD_INT 2
74775: DOUBLE
74776: EQUAL
74777: IFTRUE 74781
74779: GO 74837
74781: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
74782: LD_ADDR_VAR 0 9
74786: PUSH
74787: LD_VAR 0 17
74791: PUSH
74792: LD_VAR 0 18
74796: PUSH
74797: LD_VAR 0 19
74801: PUSH
74802: LD_VAR 0 20
74806: PUSH
74807: LD_VAR 0 21
74811: PUSH
74812: LD_VAR 0 22
74816: PUSH
74817: EMPTY
74818: LIST
74819: LIST
74820: LIST
74821: LIST
74822: LIST
74823: LIST
74824: PUSH
74825: LD_VAR 0 4
74829: PUSH
74830: LD_INT 1
74832: PLUS
74833: ARRAY
74834: ST_TO_ADDR
74835: GO 74902
74837: LD_INT 3
74839: DOUBLE
74840: EQUAL
74841: IFTRUE 74845
74843: GO 74901
74845: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
74846: LD_ADDR_VAR 0 9
74850: PUSH
74851: LD_VAR 0 23
74855: PUSH
74856: LD_VAR 0 24
74860: PUSH
74861: LD_VAR 0 25
74865: PUSH
74866: LD_VAR 0 26
74870: PUSH
74871: LD_VAR 0 27
74875: PUSH
74876: LD_VAR 0 28
74880: PUSH
74881: EMPTY
74882: LIST
74883: LIST
74884: LIST
74885: LIST
74886: LIST
74887: LIST
74888: PUSH
74889: LD_VAR 0 4
74893: PUSH
74894: LD_INT 1
74896: PLUS
74897: ARRAY
74898: ST_TO_ADDR
74899: GO 74902
74901: POP
74902: GO 75457
74904: LD_INT 2
74906: DOUBLE
74907: EQUAL
74908: IFTRUE 74918
74910: LD_INT 3
74912: DOUBLE
74913: EQUAL
74914: IFTRUE 74918
74916: GO 74974
74918: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
74919: LD_ADDR_VAR 0 9
74923: PUSH
74924: LD_VAR 0 29
74928: PUSH
74929: LD_VAR 0 30
74933: PUSH
74934: LD_VAR 0 31
74938: PUSH
74939: LD_VAR 0 32
74943: PUSH
74944: LD_VAR 0 33
74948: PUSH
74949: LD_VAR 0 34
74953: PUSH
74954: EMPTY
74955: LIST
74956: LIST
74957: LIST
74958: LIST
74959: LIST
74960: LIST
74961: PUSH
74962: LD_VAR 0 4
74966: PUSH
74967: LD_INT 1
74969: PLUS
74970: ARRAY
74971: ST_TO_ADDR
74972: GO 75457
74974: LD_INT 16
74976: DOUBLE
74977: EQUAL
74978: IFTRUE 75036
74980: LD_INT 17
74982: DOUBLE
74983: EQUAL
74984: IFTRUE 75036
74986: LD_INT 18
74988: DOUBLE
74989: EQUAL
74990: IFTRUE 75036
74992: LD_INT 19
74994: DOUBLE
74995: EQUAL
74996: IFTRUE 75036
74998: LD_INT 22
75000: DOUBLE
75001: EQUAL
75002: IFTRUE 75036
75004: LD_INT 20
75006: DOUBLE
75007: EQUAL
75008: IFTRUE 75036
75010: LD_INT 21
75012: DOUBLE
75013: EQUAL
75014: IFTRUE 75036
75016: LD_INT 23
75018: DOUBLE
75019: EQUAL
75020: IFTRUE 75036
75022: LD_INT 24
75024: DOUBLE
75025: EQUAL
75026: IFTRUE 75036
75028: LD_INT 25
75030: DOUBLE
75031: EQUAL
75032: IFTRUE 75036
75034: GO 75092
75036: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
75037: LD_ADDR_VAR 0 9
75041: PUSH
75042: LD_VAR 0 35
75046: PUSH
75047: LD_VAR 0 36
75051: PUSH
75052: LD_VAR 0 37
75056: PUSH
75057: LD_VAR 0 38
75061: PUSH
75062: LD_VAR 0 39
75066: PUSH
75067: LD_VAR 0 40
75071: PUSH
75072: EMPTY
75073: LIST
75074: LIST
75075: LIST
75076: LIST
75077: LIST
75078: LIST
75079: PUSH
75080: LD_VAR 0 4
75084: PUSH
75085: LD_INT 1
75087: PLUS
75088: ARRAY
75089: ST_TO_ADDR
75090: GO 75457
75092: LD_INT 6
75094: DOUBLE
75095: EQUAL
75096: IFTRUE 75148
75098: LD_INT 7
75100: DOUBLE
75101: EQUAL
75102: IFTRUE 75148
75104: LD_INT 8
75106: DOUBLE
75107: EQUAL
75108: IFTRUE 75148
75110: LD_INT 13
75112: DOUBLE
75113: EQUAL
75114: IFTRUE 75148
75116: LD_INT 12
75118: DOUBLE
75119: EQUAL
75120: IFTRUE 75148
75122: LD_INT 15
75124: DOUBLE
75125: EQUAL
75126: IFTRUE 75148
75128: LD_INT 11
75130: DOUBLE
75131: EQUAL
75132: IFTRUE 75148
75134: LD_INT 14
75136: DOUBLE
75137: EQUAL
75138: IFTRUE 75148
75140: LD_INT 10
75142: DOUBLE
75143: EQUAL
75144: IFTRUE 75148
75146: GO 75204
75148: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
75149: LD_ADDR_VAR 0 9
75153: PUSH
75154: LD_VAR 0 41
75158: PUSH
75159: LD_VAR 0 42
75163: PUSH
75164: LD_VAR 0 43
75168: PUSH
75169: LD_VAR 0 44
75173: PUSH
75174: LD_VAR 0 45
75178: PUSH
75179: LD_VAR 0 46
75183: PUSH
75184: EMPTY
75185: LIST
75186: LIST
75187: LIST
75188: LIST
75189: LIST
75190: LIST
75191: PUSH
75192: LD_VAR 0 4
75196: PUSH
75197: LD_INT 1
75199: PLUS
75200: ARRAY
75201: ST_TO_ADDR
75202: GO 75457
75204: LD_INT 36
75206: DOUBLE
75207: EQUAL
75208: IFTRUE 75212
75210: GO 75268
75212: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
75213: LD_ADDR_VAR 0 9
75217: PUSH
75218: LD_VAR 0 47
75222: PUSH
75223: LD_VAR 0 48
75227: PUSH
75228: LD_VAR 0 49
75232: PUSH
75233: LD_VAR 0 50
75237: PUSH
75238: LD_VAR 0 51
75242: PUSH
75243: LD_VAR 0 52
75247: PUSH
75248: EMPTY
75249: LIST
75250: LIST
75251: LIST
75252: LIST
75253: LIST
75254: LIST
75255: PUSH
75256: LD_VAR 0 4
75260: PUSH
75261: LD_INT 1
75263: PLUS
75264: ARRAY
75265: ST_TO_ADDR
75266: GO 75457
75268: LD_INT 4
75270: DOUBLE
75271: EQUAL
75272: IFTRUE 75294
75274: LD_INT 5
75276: DOUBLE
75277: EQUAL
75278: IFTRUE 75294
75280: LD_INT 34
75282: DOUBLE
75283: EQUAL
75284: IFTRUE 75294
75286: LD_INT 37
75288: DOUBLE
75289: EQUAL
75290: IFTRUE 75294
75292: GO 75350
75294: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
75295: LD_ADDR_VAR 0 9
75299: PUSH
75300: LD_VAR 0 53
75304: PUSH
75305: LD_VAR 0 54
75309: PUSH
75310: LD_VAR 0 55
75314: PUSH
75315: LD_VAR 0 56
75319: PUSH
75320: LD_VAR 0 57
75324: PUSH
75325: LD_VAR 0 58
75329: PUSH
75330: EMPTY
75331: LIST
75332: LIST
75333: LIST
75334: LIST
75335: LIST
75336: LIST
75337: PUSH
75338: LD_VAR 0 4
75342: PUSH
75343: LD_INT 1
75345: PLUS
75346: ARRAY
75347: ST_TO_ADDR
75348: GO 75457
75350: LD_INT 31
75352: DOUBLE
75353: EQUAL
75354: IFTRUE 75400
75356: LD_INT 32
75358: DOUBLE
75359: EQUAL
75360: IFTRUE 75400
75362: LD_INT 33
75364: DOUBLE
75365: EQUAL
75366: IFTRUE 75400
75368: LD_INT 27
75370: DOUBLE
75371: EQUAL
75372: IFTRUE 75400
75374: LD_INT 26
75376: DOUBLE
75377: EQUAL
75378: IFTRUE 75400
75380: LD_INT 28
75382: DOUBLE
75383: EQUAL
75384: IFTRUE 75400
75386: LD_INT 29
75388: DOUBLE
75389: EQUAL
75390: IFTRUE 75400
75392: LD_INT 30
75394: DOUBLE
75395: EQUAL
75396: IFTRUE 75400
75398: GO 75456
75400: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
75401: LD_ADDR_VAR 0 9
75405: PUSH
75406: LD_VAR 0 59
75410: PUSH
75411: LD_VAR 0 60
75415: PUSH
75416: LD_VAR 0 61
75420: PUSH
75421: LD_VAR 0 62
75425: PUSH
75426: LD_VAR 0 63
75430: PUSH
75431: LD_VAR 0 64
75435: PUSH
75436: EMPTY
75437: LIST
75438: LIST
75439: LIST
75440: LIST
75441: LIST
75442: LIST
75443: PUSH
75444: LD_VAR 0 4
75448: PUSH
75449: LD_INT 1
75451: PLUS
75452: ARRAY
75453: ST_TO_ADDR
75454: GO 75457
75456: POP
// temp_list2 = [ ] ;
75457: LD_ADDR_VAR 0 10
75461: PUSH
75462: EMPTY
75463: ST_TO_ADDR
// for i in temp_list do
75464: LD_ADDR_VAR 0 8
75468: PUSH
75469: LD_VAR 0 9
75473: PUSH
75474: FOR_IN
75475: IFFALSE 75527
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
75477: LD_ADDR_VAR 0 10
75481: PUSH
75482: LD_VAR 0 10
75486: PUSH
75487: LD_VAR 0 8
75491: PUSH
75492: LD_INT 1
75494: ARRAY
75495: PUSH
75496: LD_VAR 0 2
75500: PLUS
75501: PUSH
75502: LD_VAR 0 8
75506: PUSH
75507: LD_INT 2
75509: ARRAY
75510: PUSH
75511: LD_VAR 0 3
75515: PLUS
75516: PUSH
75517: EMPTY
75518: LIST
75519: LIST
75520: PUSH
75521: EMPTY
75522: LIST
75523: ADD
75524: ST_TO_ADDR
75525: GO 75474
75527: POP
75528: POP
// result = temp_list2 ;
75529: LD_ADDR_VAR 0 7
75533: PUSH
75534: LD_VAR 0 10
75538: ST_TO_ADDR
// end ;
75539: LD_VAR 0 7
75543: RET
// export function EnemyInRange ( unit , dist ) ; begin
75544: LD_INT 0
75546: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
75547: LD_ADDR_VAR 0 3
75551: PUSH
75552: LD_VAR 0 1
75556: PPUSH
75557: CALL_OW 255
75561: PPUSH
75562: LD_VAR 0 1
75566: PPUSH
75567: CALL_OW 250
75571: PPUSH
75572: LD_VAR 0 1
75576: PPUSH
75577: CALL_OW 251
75581: PPUSH
75582: LD_VAR 0 2
75586: PPUSH
75587: CALL 48801 0 4
75591: PUSH
75592: LD_INT 4
75594: ARRAY
75595: ST_TO_ADDR
// end ;
75596: LD_VAR 0 3
75600: RET
// export function PlayerSeeMe ( unit ) ; begin
75601: LD_INT 0
75603: PPUSH
// result := See ( your_side , unit ) ;
75604: LD_ADDR_VAR 0 2
75608: PUSH
75609: LD_OWVAR 2
75613: PPUSH
75614: LD_VAR 0 1
75618: PPUSH
75619: CALL_OW 292
75623: ST_TO_ADDR
// end ;
75624: LD_VAR 0 2
75628: RET
// export function ReverseDir ( unit ) ; begin
75629: LD_INT 0
75631: PPUSH
// if not unit then
75632: LD_VAR 0 1
75636: NOT
75637: IFFALSE 75641
// exit ;
75639: GO 75664
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
75641: LD_ADDR_VAR 0 2
75645: PUSH
75646: LD_VAR 0 1
75650: PPUSH
75651: CALL_OW 254
75655: PUSH
75656: LD_INT 3
75658: PLUS
75659: PUSH
75660: LD_INT 6
75662: MOD
75663: ST_TO_ADDR
// end ;
75664: LD_VAR 0 2
75668: RET
// export function ReverseArray ( array ) ; var i ; begin
75669: LD_INT 0
75671: PPUSH
75672: PPUSH
// if not array then
75673: LD_VAR 0 1
75677: NOT
75678: IFFALSE 75682
// exit ;
75680: GO 75737
// result := [ ] ;
75682: LD_ADDR_VAR 0 2
75686: PUSH
75687: EMPTY
75688: ST_TO_ADDR
// for i := array downto 1 do
75689: LD_ADDR_VAR 0 3
75693: PUSH
75694: DOUBLE
75695: LD_VAR 0 1
75699: INC
75700: ST_TO_ADDR
75701: LD_INT 1
75703: PUSH
75704: FOR_DOWNTO
75705: IFFALSE 75735
// result := Join ( result , array [ i ] ) ;
75707: LD_ADDR_VAR 0 2
75711: PUSH
75712: LD_VAR 0 2
75716: PPUSH
75717: LD_VAR 0 1
75721: PUSH
75722: LD_VAR 0 3
75726: ARRAY
75727: PPUSH
75728: CALL 80589 0 2
75732: ST_TO_ADDR
75733: GO 75704
75735: POP
75736: POP
// end ;
75737: LD_VAR 0 2
75741: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
75742: LD_INT 0
75744: PPUSH
75745: PPUSH
75746: PPUSH
75747: PPUSH
75748: PPUSH
75749: PPUSH
// if not unit or not hexes then
75750: LD_VAR 0 1
75754: NOT
75755: IFTRUE 75764
75757: PUSH
75758: LD_VAR 0 2
75762: NOT
75763: OR
75764: IFFALSE 75768
// exit ;
75766: GO 75891
// dist := 9999 ;
75768: LD_ADDR_VAR 0 5
75772: PUSH
75773: LD_INT 9999
75775: ST_TO_ADDR
// for i = 1 to hexes do
75776: LD_ADDR_VAR 0 4
75780: PUSH
75781: DOUBLE
75782: LD_INT 1
75784: DEC
75785: ST_TO_ADDR
75786: LD_VAR 0 2
75790: PUSH
75791: FOR_TO
75792: IFFALSE 75879
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
75794: LD_ADDR_VAR 0 6
75798: PUSH
75799: LD_VAR 0 1
75803: PPUSH
75804: LD_VAR 0 2
75808: PUSH
75809: LD_VAR 0 4
75813: ARRAY
75814: PUSH
75815: LD_INT 1
75817: ARRAY
75818: PPUSH
75819: LD_VAR 0 2
75823: PUSH
75824: LD_VAR 0 4
75828: ARRAY
75829: PUSH
75830: LD_INT 2
75832: ARRAY
75833: PPUSH
75834: CALL_OW 297
75838: ST_TO_ADDR
// if tdist < dist then
75839: LD_VAR 0 6
75843: PUSH
75844: LD_VAR 0 5
75848: LESS
75849: IFFALSE 75877
// begin hex := hexes [ i ] ;
75851: LD_ADDR_VAR 0 8
75855: PUSH
75856: LD_VAR 0 2
75860: PUSH
75861: LD_VAR 0 4
75865: ARRAY
75866: ST_TO_ADDR
// dist := tdist ;
75867: LD_ADDR_VAR 0 5
75871: PUSH
75872: LD_VAR 0 6
75876: ST_TO_ADDR
// end ; end ;
75877: GO 75791
75879: POP
75880: POP
// result := hex ;
75881: LD_ADDR_VAR 0 3
75885: PUSH
75886: LD_VAR 0 8
75890: ST_TO_ADDR
// end ;
75891: LD_VAR 0 3
75895: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
75896: LD_INT 0
75898: PPUSH
75899: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
75900: LD_VAR 0 1
75904: NOT
75905: IFTRUE 75944
75907: PUSH
75908: LD_VAR 0 1
75912: PUSH
75913: LD_INT 21
75915: PUSH
75916: LD_INT 2
75918: PUSH
75919: EMPTY
75920: LIST
75921: LIST
75922: PUSH
75923: LD_INT 23
75925: PUSH
75926: LD_INT 2
75928: PUSH
75929: EMPTY
75930: LIST
75931: LIST
75932: PUSH
75933: EMPTY
75934: LIST
75935: LIST
75936: PPUSH
75937: CALL_OW 69
75941: IN
75942: NOT
75943: OR
75944: IFFALSE 75948
// exit ;
75946: GO 75995
// for i = 1 to 3 do
75948: LD_ADDR_VAR 0 3
75952: PUSH
75953: DOUBLE
75954: LD_INT 1
75956: DEC
75957: ST_TO_ADDR
75958: LD_INT 3
75960: PUSH
75961: FOR_TO
75962: IFFALSE 75993
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
75964: LD_VAR 0 1
75968: PPUSH
75969: CALL_OW 250
75973: PPUSH
75974: LD_VAR 0 1
75978: PPUSH
75979: CALL_OW 251
75983: PPUSH
75984: LD_INT 1
75986: PPUSH
75987: CALL_OW 453
75991: GO 75961
75993: POP
75994: POP
// end ;
75995: LD_VAR 0 2
75999: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
76000: LD_INT 0
76002: PPUSH
76003: PPUSH
76004: PPUSH
76005: PPUSH
76006: PPUSH
76007: PPUSH
// if not unit or not enemy_unit then
76008: LD_VAR 0 1
76012: NOT
76013: IFTRUE 76022
76015: PUSH
76016: LD_VAR 0 2
76020: NOT
76021: OR
76022: IFFALSE 76026
// exit ;
76024: GO 76507
// if GetLives ( i ) < 250 then
76026: LD_VAR 0 4
76030: PPUSH
76031: CALL_OW 256
76035: PUSH
76036: LD_INT 250
76038: LESS
76039: IFFALSE 76052
// begin ComAutodestruct ( i ) ;
76041: LD_VAR 0 4
76045: PPUSH
76046: CALL 75896 0 1
// exit ;
76050: GO 76507
// end ; x := GetX ( enemy_unit ) ;
76052: LD_ADDR_VAR 0 7
76056: PUSH
76057: LD_VAR 0 2
76061: PPUSH
76062: CALL_OW 250
76066: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
76067: LD_ADDR_VAR 0 8
76071: PUSH
76072: LD_VAR 0 2
76076: PPUSH
76077: CALL_OW 251
76081: ST_TO_ADDR
// if not x or not y then
76082: LD_VAR 0 7
76086: NOT
76087: IFTRUE 76096
76089: PUSH
76090: LD_VAR 0 8
76094: NOT
76095: OR
76096: IFFALSE 76100
// exit ;
76098: GO 76507
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
76100: LD_ADDR_VAR 0 6
76104: PUSH
76105: LD_VAR 0 7
76109: PPUSH
76110: LD_INT 0
76112: PPUSH
76113: LD_INT 4
76115: PPUSH
76116: CALL_OW 272
76120: PUSH
76121: LD_VAR 0 8
76125: PPUSH
76126: LD_INT 0
76128: PPUSH
76129: LD_INT 4
76131: PPUSH
76132: CALL_OW 273
76136: PUSH
76137: EMPTY
76138: LIST
76139: LIST
76140: PUSH
76141: LD_VAR 0 7
76145: PPUSH
76146: LD_INT 1
76148: PPUSH
76149: LD_INT 4
76151: PPUSH
76152: CALL_OW 272
76156: PUSH
76157: LD_VAR 0 8
76161: PPUSH
76162: LD_INT 1
76164: PPUSH
76165: LD_INT 4
76167: PPUSH
76168: CALL_OW 273
76172: PUSH
76173: EMPTY
76174: LIST
76175: LIST
76176: PUSH
76177: LD_VAR 0 7
76181: PPUSH
76182: LD_INT 2
76184: PPUSH
76185: LD_INT 4
76187: PPUSH
76188: CALL_OW 272
76192: PUSH
76193: LD_VAR 0 8
76197: PPUSH
76198: LD_INT 2
76200: PPUSH
76201: LD_INT 4
76203: PPUSH
76204: CALL_OW 273
76208: PUSH
76209: EMPTY
76210: LIST
76211: LIST
76212: PUSH
76213: LD_VAR 0 7
76217: PPUSH
76218: LD_INT 3
76220: PPUSH
76221: LD_INT 4
76223: PPUSH
76224: CALL_OW 272
76228: PUSH
76229: LD_VAR 0 8
76233: PPUSH
76234: LD_INT 3
76236: PPUSH
76237: LD_INT 4
76239: PPUSH
76240: CALL_OW 273
76244: PUSH
76245: EMPTY
76246: LIST
76247: LIST
76248: PUSH
76249: LD_VAR 0 7
76253: PPUSH
76254: LD_INT 4
76256: PPUSH
76257: LD_INT 4
76259: PPUSH
76260: CALL_OW 272
76264: PUSH
76265: LD_VAR 0 8
76269: PPUSH
76270: LD_INT 4
76272: PPUSH
76273: LD_INT 4
76275: PPUSH
76276: CALL_OW 273
76280: PUSH
76281: EMPTY
76282: LIST
76283: LIST
76284: PUSH
76285: LD_VAR 0 7
76289: PPUSH
76290: LD_INT 5
76292: PPUSH
76293: LD_INT 4
76295: PPUSH
76296: CALL_OW 272
76300: PUSH
76301: LD_VAR 0 8
76305: PPUSH
76306: LD_INT 5
76308: PPUSH
76309: LD_INT 4
76311: PPUSH
76312: CALL_OW 273
76316: PUSH
76317: EMPTY
76318: LIST
76319: LIST
76320: PUSH
76321: EMPTY
76322: LIST
76323: LIST
76324: LIST
76325: LIST
76326: LIST
76327: LIST
76328: ST_TO_ADDR
// for i = tmp downto 1 do
76329: LD_ADDR_VAR 0 4
76333: PUSH
76334: DOUBLE
76335: LD_VAR 0 6
76339: INC
76340: ST_TO_ADDR
76341: LD_INT 1
76343: PUSH
76344: FOR_DOWNTO
76345: IFFALSE 76448
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
76347: LD_VAR 0 6
76351: PUSH
76352: LD_VAR 0 4
76356: ARRAY
76357: PUSH
76358: LD_INT 1
76360: ARRAY
76361: PPUSH
76362: LD_VAR 0 6
76366: PUSH
76367: LD_VAR 0 4
76371: ARRAY
76372: PUSH
76373: LD_INT 2
76375: ARRAY
76376: PPUSH
76377: CALL_OW 488
76381: NOT
76382: IFTRUE 76424
76384: PUSH
76385: LD_VAR 0 6
76389: PUSH
76390: LD_VAR 0 4
76394: ARRAY
76395: PUSH
76396: LD_INT 1
76398: ARRAY
76399: PPUSH
76400: LD_VAR 0 6
76404: PUSH
76405: LD_VAR 0 4
76409: ARRAY
76410: PUSH
76411: LD_INT 2
76413: ARRAY
76414: PPUSH
76415: CALL_OW 428
76419: PUSH
76420: LD_INT 0
76422: NONEQUAL
76423: OR
76424: IFFALSE 76446
// tmp := Delete ( tmp , i ) ;
76426: LD_ADDR_VAR 0 6
76430: PUSH
76431: LD_VAR 0 6
76435: PPUSH
76436: LD_VAR 0 4
76440: PPUSH
76441: CALL_OW 3
76445: ST_TO_ADDR
76446: GO 76344
76448: POP
76449: POP
// j := GetClosestHex ( unit , tmp ) ;
76450: LD_ADDR_VAR 0 5
76454: PUSH
76455: LD_VAR 0 1
76459: PPUSH
76460: LD_VAR 0 6
76464: PPUSH
76465: CALL 75742 0 2
76469: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
76470: LD_VAR 0 1
76474: PPUSH
76475: LD_VAR 0 5
76479: PUSH
76480: LD_INT 1
76482: ARRAY
76483: PPUSH
76484: LD_VAR 0 5
76488: PUSH
76489: LD_INT 2
76491: ARRAY
76492: PPUSH
76493: CALL_OW 111
// result := j ;
76497: LD_ADDR_VAR 0 3
76501: PUSH
76502: LD_VAR 0 5
76506: ST_TO_ADDR
// end ;
76507: LD_VAR 0 3
76511: RET
// export function PrepareApemanSoldier ( ) ; begin
76512: LD_INT 0
76514: PPUSH
// uc_nation := 0 ;
76515: LD_ADDR_OWVAR 21
76519: PUSH
76520: LD_INT 0
76522: ST_TO_ADDR
// hc_sex := sex_male ;
76523: LD_ADDR_OWVAR 27
76527: PUSH
76528: LD_INT 1
76530: ST_TO_ADDR
// hc_name :=  ;
76531: LD_ADDR_OWVAR 26
76535: PUSH
76536: LD_STRING 
76538: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
76539: LD_ADDR_OWVAR 28
76543: PUSH
76544: LD_INT 15
76546: ST_TO_ADDR
// hc_gallery :=  ;
76547: LD_ADDR_OWVAR 33
76551: PUSH
76552: LD_STRING 
76554: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
76555: LD_ADDR_OWVAR 31
76559: PUSH
76560: LD_INT 0
76562: PPUSH
76563: LD_INT 3
76565: PPUSH
76566: CALL_OW 12
76570: PUSH
76571: LD_INT 0
76573: PPUSH
76574: LD_INT 3
76576: PPUSH
76577: CALL_OW 12
76581: PUSH
76582: LD_INT 0
76584: PUSH
76585: LD_INT 0
76587: PUSH
76588: EMPTY
76589: LIST
76590: LIST
76591: LIST
76592: LIST
76593: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
76594: LD_ADDR_OWVAR 29
76598: PUSH
76599: LD_INT 10
76601: PUSH
76602: LD_INT 12
76604: PUSH
76605: EMPTY
76606: LIST
76607: LIST
76608: ST_TO_ADDR
// end ;
76609: LD_VAR 0 1
76613: RET
// export function PrepareApemanEngineer ( ) ; begin
76614: LD_INT 0
76616: PPUSH
// uc_nation := 0 ;
76617: LD_ADDR_OWVAR 21
76621: PUSH
76622: LD_INT 0
76624: ST_TO_ADDR
// hc_sex := sex_male ;
76625: LD_ADDR_OWVAR 27
76629: PUSH
76630: LD_INT 1
76632: ST_TO_ADDR
// hc_name :=  ;
76633: LD_ADDR_OWVAR 26
76637: PUSH
76638: LD_STRING 
76640: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
76641: LD_ADDR_OWVAR 28
76645: PUSH
76646: LD_INT 16
76648: ST_TO_ADDR
// hc_gallery :=  ;
76649: LD_ADDR_OWVAR 33
76653: PUSH
76654: LD_STRING 
76656: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
76657: LD_ADDR_OWVAR 31
76661: PUSH
76662: LD_INT 0
76664: PPUSH
76665: LD_INT 3
76667: PPUSH
76668: CALL_OW 12
76672: PUSH
76673: LD_INT 0
76675: PPUSH
76676: LD_INT 3
76678: PPUSH
76679: CALL_OW 12
76683: PUSH
76684: LD_INT 0
76686: PUSH
76687: LD_INT 0
76689: PUSH
76690: EMPTY
76691: LIST
76692: LIST
76693: LIST
76694: LIST
76695: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
76696: LD_ADDR_OWVAR 29
76700: PUSH
76701: LD_INT 10
76703: PUSH
76704: LD_INT 12
76706: PUSH
76707: EMPTY
76708: LIST
76709: LIST
76710: ST_TO_ADDR
// end ;
76711: LD_VAR 0 1
76715: RET
// export function PrepareApeman ( agressivity ) ; begin
76716: LD_INT 0
76718: PPUSH
// uc_side := 0 ;
76719: LD_ADDR_OWVAR 20
76723: PUSH
76724: LD_INT 0
76726: ST_TO_ADDR
// uc_nation := 0 ;
76727: LD_ADDR_OWVAR 21
76731: PUSH
76732: LD_INT 0
76734: ST_TO_ADDR
// hc_sex := sex_male ;
76735: LD_ADDR_OWVAR 27
76739: PUSH
76740: LD_INT 1
76742: ST_TO_ADDR
// hc_class := class_apeman ;
76743: LD_ADDR_OWVAR 28
76747: PUSH
76748: LD_INT 12
76750: ST_TO_ADDR
// hc_gallery :=  ;
76751: LD_ADDR_OWVAR 33
76755: PUSH
76756: LD_STRING 
76758: ST_TO_ADDR
// hc_name :=  ;
76759: LD_ADDR_OWVAR 26
76763: PUSH
76764: LD_STRING 
76766: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
76767: LD_ADDR_OWVAR 29
76771: PUSH
76772: LD_INT 10
76774: PUSH
76775: LD_INT 12
76777: PUSH
76778: EMPTY
76779: LIST
76780: LIST
76781: ST_TO_ADDR
// if agressivity = 0 then
76782: LD_VAR 0 1
76786: PUSH
76787: LD_INT 0
76789: EQUAL
76790: IFFALSE 76802
// hc_agressivity := 0 else
76792: LD_ADDR_OWVAR 35
76796: PUSH
76797: LD_INT 0
76799: ST_TO_ADDR
76800: GO 76823
// hc_agressivity := rand ( - agressivity , agressivity ) ;
76802: LD_ADDR_OWVAR 35
76806: PUSH
76807: LD_VAR 0 1
76811: NEG
76812: PPUSH
76813: LD_VAR 0 1
76817: PPUSH
76818: CALL_OW 12
76822: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
76823: LD_ADDR_OWVAR 31
76827: PUSH
76828: LD_INT 0
76830: PPUSH
76831: LD_INT 3
76833: PPUSH
76834: CALL_OW 12
76838: PUSH
76839: LD_INT 0
76841: PPUSH
76842: LD_INT 3
76844: PPUSH
76845: CALL_OW 12
76849: PUSH
76850: LD_INT 0
76852: PUSH
76853: LD_INT 0
76855: PUSH
76856: EMPTY
76857: LIST
76858: LIST
76859: LIST
76860: LIST
76861: ST_TO_ADDR
// end ;
76862: LD_VAR 0 2
76866: RET
// export function PrepareTiger ( agressivity ) ; begin
76867: LD_INT 0
76869: PPUSH
// uc_side := 0 ;
76870: LD_ADDR_OWVAR 20
76874: PUSH
76875: LD_INT 0
76877: ST_TO_ADDR
// uc_nation := 0 ;
76878: LD_ADDR_OWVAR 21
76882: PUSH
76883: LD_INT 0
76885: ST_TO_ADDR
// InitHc ;
76886: CALL_OW 19
// hc_class := class_tiger ;
76890: LD_ADDR_OWVAR 28
76894: PUSH
76895: LD_INT 14
76897: ST_TO_ADDR
// hc_gallery :=  ;
76898: LD_ADDR_OWVAR 33
76902: PUSH
76903: LD_STRING 
76905: ST_TO_ADDR
// hc_name :=  ;
76906: LD_ADDR_OWVAR 26
76910: PUSH
76911: LD_STRING 
76913: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
76914: LD_ADDR_OWVAR 35
76918: PUSH
76919: LD_VAR 0 1
76923: NEG
76924: PPUSH
76925: LD_VAR 0 1
76929: PPUSH
76930: CALL_OW 12
76934: ST_TO_ADDR
// end ;
76935: LD_VAR 0 2
76939: RET
// export function PrepareEnchidna ( ) ; begin
76940: LD_INT 0
76942: PPUSH
// uc_side := 0 ;
76943: LD_ADDR_OWVAR 20
76947: PUSH
76948: LD_INT 0
76950: ST_TO_ADDR
// uc_nation := 0 ;
76951: LD_ADDR_OWVAR 21
76955: PUSH
76956: LD_INT 0
76958: ST_TO_ADDR
// InitHc ;
76959: CALL_OW 19
// hc_class := class_baggie ;
76963: LD_ADDR_OWVAR 28
76967: PUSH
76968: LD_INT 13
76970: ST_TO_ADDR
// hc_gallery :=  ;
76971: LD_ADDR_OWVAR 33
76975: PUSH
76976: LD_STRING 
76978: ST_TO_ADDR
// hc_name :=  ;
76979: LD_ADDR_OWVAR 26
76983: PUSH
76984: LD_STRING 
76986: ST_TO_ADDR
// end ;
76987: LD_VAR 0 1
76991: RET
// export function PrepareFrog ( ) ; begin
76992: LD_INT 0
76994: PPUSH
// uc_side := 0 ;
76995: LD_ADDR_OWVAR 20
76999: PUSH
77000: LD_INT 0
77002: ST_TO_ADDR
// uc_nation := 0 ;
77003: LD_ADDR_OWVAR 21
77007: PUSH
77008: LD_INT 0
77010: ST_TO_ADDR
// InitHc ;
77011: CALL_OW 19
// hc_class := class_frog ;
77015: LD_ADDR_OWVAR 28
77019: PUSH
77020: LD_INT 19
77022: ST_TO_ADDR
// hc_gallery :=  ;
77023: LD_ADDR_OWVAR 33
77027: PUSH
77028: LD_STRING 
77030: ST_TO_ADDR
// hc_name :=  ;
77031: LD_ADDR_OWVAR 26
77035: PUSH
77036: LD_STRING 
77038: ST_TO_ADDR
// end ;
77039: LD_VAR 0 1
77043: RET
// export function PrepareFish ( ) ; begin
77044: LD_INT 0
77046: PPUSH
// uc_side := 0 ;
77047: LD_ADDR_OWVAR 20
77051: PUSH
77052: LD_INT 0
77054: ST_TO_ADDR
// uc_nation := 0 ;
77055: LD_ADDR_OWVAR 21
77059: PUSH
77060: LD_INT 0
77062: ST_TO_ADDR
// InitHc ;
77063: CALL_OW 19
// hc_class := class_fish ;
77067: LD_ADDR_OWVAR 28
77071: PUSH
77072: LD_INT 20
77074: ST_TO_ADDR
// hc_gallery :=  ;
77075: LD_ADDR_OWVAR 33
77079: PUSH
77080: LD_STRING 
77082: ST_TO_ADDR
// hc_name :=  ;
77083: LD_ADDR_OWVAR 26
77087: PUSH
77088: LD_STRING 
77090: ST_TO_ADDR
// end ;
77091: LD_VAR 0 1
77095: RET
// export function PrepareBird ( ) ; begin
77096: LD_INT 0
77098: PPUSH
// uc_side := 0 ;
77099: LD_ADDR_OWVAR 20
77103: PUSH
77104: LD_INT 0
77106: ST_TO_ADDR
// uc_nation := 0 ;
77107: LD_ADDR_OWVAR 21
77111: PUSH
77112: LD_INT 0
77114: ST_TO_ADDR
// InitHc ;
77115: CALL_OW 19
// hc_class := class_phororhacos ;
77119: LD_ADDR_OWVAR 28
77123: PUSH
77124: LD_INT 18
77126: ST_TO_ADDR
// hc_gallery :=  ;
77127: LD_ADDR_OWVAR 33
77131: PUSH
77132: LD_STRING 
77134: ST_TO_ADDR
// hc_name :=  ;
77135: LD_ADDR_OWVAR 26
77139: PUSH
77140: LD_STRING 
77142: ST_TO_ADDR
// end ;
77143: LD_VAR 0 1
77147: RET
// export function PrepareHorse ( ) ; begin
77148: LD_INT 0
77150: PPUSH
// uc_side := 0 ;
77151: LD_ADDR_OWVAR 20
77155: PUSH
77156: LD_INT 0
77158: ST_TO_ADDR
// uc_nation := 0 ;
77159: LD_ADDR_OWVAR 21
77163: PUSH
77164: LD_INT 0
77166: ST_TO_ADDR
// InitHc ;
77167: CALL_OW 19
// hc_class := class_horse ;
77171: LD_ADDR_OWVAR 28
77175: PUSH
77176: LD_INT 21
77178: ST_TO_ADDR
// hc_gallery :=  ;
77179: LD_ADDR_OWVAR 33
77183: PUSH
77184: LD_STRING 
77186: ST_TO_ADDR
// hc_name :=  ;
77187: LD_ADDR_OWVAR 26
77191: PUSH
77192: LD_STRING 
77194: ST_TO_ADDR
// end ;
77195: LD_VAR 0 1
77199: RET
// export function PrepareMastodont ( ) ; begin
77200: LD_INT 0
77202: PPUSH
// uc_side := 0 ;
77203: LD_ADDR_OWVAR 20
77207: PUSH
77208: LD_INT 0
77210: ST_TO_ADDR
// uc_nation := 0 ;
77211: LD_ADDR_OWVAR 21
77215: PUSH
77216: LD_INT 0
77218: ST_TO_ADDR
// vc_chassis := class_mastodont ;
77219: LD_ADDR_OWVAR 37
77223: PUSH
77224: LD_INT 31
77226: ST_TO_ADDR
// vc_control := control_rider ;
77227: LD_ADDR_OWVAR 38
77231: PUSH
77232: LD_INT 4
77234: ST_TO_ADDR
// end ;
77235: LD_VAR 0 1
77239: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
77240: LD_INT 0
77242: PPUSH
77243: PPUSH
77244: PPUSH
// uc_side = 0 ;
77245: LD_ADDR_OWVAR 20
77249: PUSH
77250: LD_INT 0
77252: ST_TO_ADDR
// uc_nation = 0 ;
77253: LD_ADDR_OWVAR 21
77257: PUSH
77258: LD_INT 0
77260: ST_TO_ADDR
// InitHc_All ( ) ;
77261: CALL_OW 584
// InitVc ;
77265: CALL_OW 20
// if mastodonts then
77269: LD_VAR 0 6
77273: IFFALSE 77340
// for i = 1 to mastodonts do
77275: LD_ADDR_VAR 0 11
77279: PUSH
77280: DOUBLE
77281: LD_INT 1
77283: DEC
77284: ST_TO_ADDR
77285: LD_VAR 0 6
77289: PUSH
77290: FOR_TO
77291: IFFALSE 77338
// begin vc_chassis := 31 ;
77293: LD_ADDR_OWVAR 37
77297: PUSH
77298: LD_INT 31
77300: ST_TO_ADDR
// vc_control := control_rider ;
77301: LD_ADDR_OWVAR 38
77305: PUSH
77306: LD_INT 4
77308: ST_TO_ADDR
// animal := CreateVehicle ;
77309: LD_ADDR_VAR 0 12
77313: PUSH
77314: CALL_OW 45
77318: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77319: LD_VAR 0 12
77323: PPUSH
77324: LD_VAR 0 8
77328: PPUSH
77329: LD_INT 0
77331: PPUSH
77332: CALL 79482 0 3
// end ;
77336: GO 77290
77338: POP
77339: POP
// if horses then
77340: LD_VAR 0 5
77344: IFFALSE 77411
// for i = 1 to horses do
77346: LD_ADDR_VAR 0 11
77350: PUSH
77351: DOUBLE
77352: LD_INT 1
77354: DEC
77355: ST_TO_ADDR
77356: LD_VAR 0 5
77360: PUSH
77361: FOR_TO
77362: IFFALSE 77409
// begin hc_class := 21 ;
77364: LD_ADDR_OWVAR 28
77368: PUSH
77369: LD_INT 21
77371: ST_TO_ADDR
// hc_gallery :=  ;
77372: LD_ADDR_OWVAR 33
77376: PUSH
77377: LD_STRING 
77379: ST_TO_ADDR
// animal := CreateHuman ;
77380: LD_ADDR_VAR 0 12
77384: PUSH
77385: CALL_OW 44
77389: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77390: LD_VAR 0 12
77394: PPUSH
77395: LD_VAR 0 8
77399: PPUSH
77400: LD_INT 0
77402: PPUSH
77403: CALL 79482 0 3
// end ;
77407: GO 77361
77409: POP
77410: POP
// if birds then
77411: LD_VAR 0 1
77415: IFFALSE 77482
// for i = 1 to birds do
77417: LD_ADDR_VAR 0 11
77421: PUSH
77422: DOUBLE
77423: LD_INT 1
77425: DEC
77426: ST_TO_ADDR
77427: LD_VAR 0 1
77431: PUSH
77432: FOR_TO
77433: IFFALSE 77480
// begin hc_class := 18 ;
77435: LD_ADDR_OWVAR 28
77439: PUSH
77440: LD_INT 18
77442: ST_TO_ADDR
// hc_gallery =  ;
77443: LD_ADDR_OWVAR 33
77447: PUSH
77448: LD_STRING 
77450: ST_TO_ADDR
// animal := CreateHuman ;
77451: LD_ADDR_VAR 0 12
77455: PUSH
77456: CALL_OW 44
77460: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77461: LD_VAR 0 12
77465: PPUSH
77466: LD_VAR 0 8
77470: PPUSH
77471: LD_INT 0
77473: PPUSH
77474: CALL 79482 0 3
// end ;
77478: GO 77432
77480: POP
77481: POP
// if tigers then
77482: LD_VAR 0 2
77486: IFFALSE 77570
// for i = 1 to tigers do
77488: LD_ADDR_VAR 0 11
77492: PUSH
77493: DOUBLE
77494: LD_INT 1
77496: DEC
77497: ST_TO_ADDR
77498: LD_VAR 0 2
77502: PUSH
77503: FOR_TO
77504: IFFALSE 77568
// begin hc_class = class_tiger ;
77506: LD_ADDR_OWVAR 28
77510: PUSH
77511: LD_INT 14
77513: ST_TO_ADDR
// hc_gallery =  ;
77514: LD_ADDR_OWVAR 33
77518: PUSH
77519: LD_STRING 
77521: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
77522: LD_ADDR_OWVAR 35
77526: PUSH
77527: LD_INT 7
77529: NEG
77530: PPUSH
77531: LD_INT 7
77533: PPUSH
77534: CALL_OW 12
77538: ST_TO_ADDR
// animal := CreateHuman ;
77539: LD_ADDR_VAR 0 12
77543: PUSH
77544: CALL_OW 44
77548: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77549: LD_VAR 0 12
77553: PPUSH
77554: LD_VAR 0 8
77558: PPUSH
77559: LD_INT 0
77561: PPUSH
77562: CALL 79482 0 3
// end ;
77566: GO 77503
77568: POP
77569: POP
// if apemans then
77570: LD_VAR 0 3
77574: IFFALSE 77697
// for i = 1 to apemans do
77576: LD_ADDR_VAR 0 11
77580: PUSH
77581: DOUBLE
77582: LD_INT 1
77584: DEC
77585: ST_TO_ADDR
77586: LD_VAR 0 3
77590: PUSH
77591: FOR_TO
77592: IFFALSE 77695
// begin hc_class = class_apeman ;
77594: LD_ADDR_OWVAR 28
77598: PUSH
77599: LD_INT 12
77601: ST_TO_ADDR
// hc_gallery =  ;
77602: LD_ADDR_OWVAR 33
77606: PUSH
77607: LD_STRING 
77609: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
77610: LD_ADDR_OWVAR 35
77614: PUSH
77615: LD_INT 2
77617: NEG
77618: PPUSH
77619: LD_INT 2
77621: PPUSH
77622: CALL_OW 12
77626: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
77627: LD_ADDR_OWVAR 31
77631: PUSH
77632: LD_INT 1
77634: PPUSH
77635: LD_INT 3
77637: PPUSH
77638: CALL_OW 12
77642: PUSH
77643: LD_INT 1
77645: PPUSH
77646: LD_INT 3
77648: PPUSH
77649: CALL_OW 12
77653: PUSH
77654: LD_INT 0
77656: PUSH
77657: LD_INT 0
77659: PUSH
77660: EMPTY
77661: LIST
77662: LIST
77663: LIST
77664: LIST
77665: ST_TO_ADDR
// animal := CreateHuman ;
77666: LD_ADDR_VAR 0 12
77670: PUSH
77671: CALL_OW 44
77675: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77676: LD_VAR 0 12
77680: PPUSH
77681: LD_VAR 0 8
77685: PPUSH
77686: LD_INT 0
77688: PPUSH
77689: CALL 79482 0 3
// end ;
77693: GO 77591
77695: POP
77696: POP
// if enchidnas then
77697: LD_VAR 0 4
77701: IFFALSE 77768
// for i = 1 to enchidnas do
77703: LD_ADDR_VAR 0 11
77707: PUSH
77708: DOUBLE
77709: LD_INT 1
77711: DEC
77712: ST_TO_ADDR
77713: LD_VAR 0 4
77717: PUSH
77718: FOR_TO
77719: IFFALSE 77766
// begin hc_class = 13 ;
77721: LD_ADDR_OWVAR 28
77725: PUSH
77726: LD_INT 13
77728: ST_TO_ADDR
// hc_gallery =  ;
77729: LD_ADDR_OWVAR 33
77733: PUSH
77734: LD_STRING 
77736: ST_TO_ADDR
// animal := CreateHuman ;
77737: LD_ADDR_VAR 0 12
77741: PUSH
77742: CALL_OW 44
77746: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77747: LD_VAR 0 12
77751: PPUSH
77752: LD_VAR 0 8
77756: PPUSH
77757: LD_INT 0
77759: PPUSH
77760: CALL 79482 0 3
// end ;
77764: GO 77718
77766: POP
77767: POP
// if fishes then
77768: LD_VAR 0 7
77772: IFFALSE 77839
// for i = 1 to fishes do
77774: LD_ADDR_VAR 0 11
77778: PUSH
77779: DOUBLE
77780: LD_INT 1
77782: DEC
77783: ST_TO_ADDR
77784: LD_VAR 0 7
77788: PUSH
77789: FOR_TO
77790: IFFALSE 77837
// begin hc_class = 20 ;
77792: LD_ADDR_OWVAR 28
77796: PUSH
77797: LD_INT 20
77799: ST_TO_ADDR
// hc_gallery =  ;
77800: LD_ADDR_OWVAR 33
77804: PUSH
77805: LD_STRING 
77807: ST_TO_ADDR
// animal := CreateHuman ;
77808: LD_ADDR_VAR 0 12
77812: PUSH
77813: CALL_OW 44
77817: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
77818: LD_VAR 0 12
77822: PPUSH
77823: LD_VAR 0 9
77827: PPUSH
77828: LD_INT 0
77830: PPUSH
77831: CALL 79482 0 3
// end ;
77835: GO 77789
77837: POP
77838: POP
// end ;
77839: LD_VAR 0 10
77843: RET
// export function WantHeal ( sci , unit ) ; begin
77844: LD_INT 0
77846: PPUSH
// if GetTaskList ( sci ) > 0 then
77847: LD_VAR 0 1
77851: PPUSH
77852: CALL_OW 437
77856: PUSH
77857: LD_INT 0
77859: GREATER
77860: IFFALSE 77932
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
77862: LD_VAR 0 1
77866: PPUSH
77867: CALL_OW 437
77871: PUSH
77872: LD_INT 1
77874: ARRAY
77875: PUSH
77876: LD_INT 1
77878: ARRAY
77879: PUSH
77880: LD_STRING l
77882: EQUAL
77883: IFFALSE 77910
77885: PUSH
77886: LD_VAR 0 1
77890: PPUSH
77891: CALL_OW 437
77895: PUSH
77896: LD_INT 1
77898: ARRAY
77899: PUSH
77900: LD_INT 4
77902: ARRAY
77903: PUSH
77904: LD_VAR 0 2
77908: EQUAL
77909: AND
77910: IFFALSE 77922
// result := true else
77912: LD_ADDR_VAR 0 3
77916: PUSH
77917: LD_INT 1
77919: ST_TO_ADDR
77920: GO 77930
// result := false ;
77922: LD_ADDR_VAR 0 3
77926: PUSH
77927: LD_INT 0
77929: ST_TO_ADDR
// end else
77930: GO 77940
// result := false ;
77932: LD_ADDR_VAR 0 3
77936: PUSH
77937: LD_INT 0
77939: ST_TO_ADDR
// end ;
77940: LD_VAR 0 3
77944: RET
// export function HealTarget ( sci ) ; begin
77945: LD_INT 0
77947: PPUSH
// if not sci then
77948: LD_VAR 0 1
77952: NOT
77953: IFFALSE 77957
// exit ;
77955: GO 78022
// result := 0 ;
77957: LD_ADDR_VAR 0 2
77961: PUSH
77962: LD_INT 0
77964: ST_TO_ADDR
// if GetTaskList ( sci ) then
77965: LD_VAR 0 1
77969: PPUSH
77970: CALL_OW 437
77974: IFFALSE 78022
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
77976: LD_VAR 0 1
77980: PPUSH
77981: CALL_OW 437
77985: PUSH
77986: LD_INT 1
77988: ARRAY
77989: PUSH
77990: LD_INT 1
77992: ARRAY
77993: PUSH
77994: LD_STRING l
77996: EQUAL
77997: IFFALSE 78022
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
77999: LD_ADDR_VAR 0 2
78003: PUSH
78004: LD_VAR 0 1
78008: PPUSH
78009: CALL_OW 437
78013: PUSH
78014: LD_INT 1
78016: ARRAY
78017: PUSH
78018: LD_INT 4
78020: ARRAY
78021: ST_TO_ADDR
// end ;
78022: LD_VAR 0 2
78026: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
78027: LD_INT 0
78029: PPUSH
78030: PPUSH
78031: PPUSH
78032: PPUSH
// if not base_units then
78033: LD_VAR 0 1
78037: NOT
78038: IFFALSE 78042
// exit ;
78040: GO 78129
// result := false ;
78042: LD_ADDR_VAR 0 2
78046: PUSH
78047: LD_INT 0
78049: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
78050: LD_ADDR_VAR 0 5
78054: PUSH
78055: LD_VAR 0 1
78059: PPUSH
78060: LD_INT 21
78062: PUSH
78063: LD_INT 3
78065: PUSH
78066: EMPTY
78067: LIST
78068: LIST
78069: PPUSH
78070: CALL_OW 72
78074: ST_TO_ADDR
// if not tmp then
78075: LD_VAR 0 5
78079: NOT
78080: IFFALSE 78084
// exit ;
78082: GO 78129
// for i in tmp do
78084: LD_ADDR_VAR 0 3
78088: PUSH
78089: LD_VAR 0 5
78093: PUSH
78094: FOR_IN
78095: IFFALSE 78127
// begin result := EnemyInRange ( i , 22 ) ;
78097: LD_ADDR_VAR 0 2
78101: PUSH
78102: LD_VAR 0 3
78106: PPUSH
78107: LD_INT 22
78109: PPUSH
78110: CALL 75544 0 2
78114: ST_TO_ADDR
// if result then
78115: LD_VAR 0 2
78119: IFFALSE 78125
// exit ;
78121: POP
78122: POP
78123: GO 78129
// end ;
78125: GO 78094
78127: POP
78128: POP
// end ;
78129: LD_VAR 0 2
78133: RET
// export function FilterByTag ( units , tag ) ; begin
78134: LD_INT 0
78136: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
78137: LD_ADDR_VAR 0 3
78141: PUSH
78142: LD_VAR 0 1
78146: PPUSH
78147: LD_INT 120
78149: PUSH
78150: LD_VAR 0 2
78154: PUSH
78155: EMPTY
78156: LIST
78157: LIST
78158: PPUSH
78159: CALL_OW 72
78163: ST_TO_ADDR
// end ;
78164: LD_VAR 0 3
78168: RET
// export function IsDriver ( un ) ; begin
78169: LD_INT 0
78171: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
78172: LD_ADDR_VAR 0 2
78176: PUSH
78177: LD_VAR 0 1
78181: PUSH
78182: LD_INT 55
78184: PUSH
78185: EMPTY
78186: LIST
78187: PPUSH
78188: CALL_OW 69
78192: IN
78193: ST_TO_ADDR
// end ;
78194: LD_VAR 0 2
78198: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
78199: LD_INT 0
78201: PPUSH
78202: PPUSH
// list := [ ] ;
78203: LD_ADDR_VAR 0 5
78207: PUSH
78208: EMPTY
78209: ST_TO_ADDR
// case d of 0 :
78210: LD_VAR 0 3
78214: PUSH
78215: LD_INT 0
78217: DOUBLE
78218: EQUAL
78219: IFTRUE 78223
78221: GO 78356
78223: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
78224: LD_ADDR_VAR 0 5
78228: PUSH
78229: LD_VAR 0 1
78233: PUSH
78234: LD_INT 4
78236: MINUS
78237: PUSH
78238: LD_VAR 0 2
78242: PUSH
78243: LD_INT 4
78245: MINUS
78246: PUSH
78247: LD_INT 2
78249: PUSH
78250: EMPTY
78251: LIST
78252: LIST
78253: LIST
78254: PUSH
78255: LD_VAR 0 1
78259: PUSH
78260: LD_INT 3
78262: MINUS
78263: PUSH
78264: LD_VAR 0 2
78268: PUSH
78269: LD_INT 1
78271: PUSH
78272: EMPTY
78273: LIST
78274: LIST
78275: LIST
78276: PUSH
78277: LD_VAR 0 1
78281: PUSH
78282: LD_INT 4
78284: PLUS
78285: PUSH
78286: LD_VAR 0 2
78290: PUSH
78291: LD_INT 4
78293: PUSH
78294: EMPTY
78295: LIST
78296: LIST
78297: LIST
78298: PUSH
78299: LD_VAR 0 1
78303: PUSH
78304: LD_INT 3
78306: PLUS
78307: PUSH
78308: LD_VAR 0 2
78312: PUSH
78313: LD_INT 3
78315: PLUS
78316: PUSH
78317: LD_INT 5
78319: PUSH
78320: EMPTY
78321: LIST
78322: LIST
78323: LIST
78324: PUSH
78325: LD_VAR 0 1
78329: PUSH
78330: LD_VAR 0 2
78334: PUSH
78335: LD_INT 4
78337: PLUS
78338: PUSH
78339: LD_INT 0
78341: PUSH
78342: EMPTY
78343: LIST
78344: LIST
78345: LIST
78346: PUSH
78347: EMPTY
78348: LIST
78349: LIST
78350: LIST
78351: LIST
78352: LIST
78353: ST_TO_ADDR
// end ; 1 :
78354: GO 79054
78356: LD_INT 1
78358: DOUBLE
78359: EQUAL
78360: IFTRUE 78364
78362: GO 78497
78364: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
78365: LD_ADDR_VAR 0 5
78369: PUSH
78370: LD_VAR 0 1
78374: PUSH
78375: LD_VAR 0 2
78379: PUSH
78380: LD_INT 4
78382: MINUS
78383: PUSH
78384: LD_INT 3
78386: PUSH
78387: EMPTY
78388: LIST
78389: LIST
78390: LIST
78391: PUSH
78392: LD_VAR 0 1
78396: PUSH
78397: LD_INT 3
78399: MINUS
78400: PUSH
78401: LD_VAR 0 2
78405: PUSH
78406: LD_INT 3
78408: MINUS
78409: PUSH
78410: LD_INT 2
78412: PUSH
78413: EMPTY
78414: LIST
78415: LIST
78416: LIST
78417: PUSH
78418: LD_VAR 0 1
78422: PUSH
78423: LD_INT 4
78425: MINUS
78426: PUSH
78427: LD_VAR 0 2
78431: PUSH
78432: LD_INT 1
78434: PUSH
78435: EMPTY
78436: LIST
78437: LIST
78438: LIST
78439: PUSH
78440: LD_VAR 0 1
78444: PUSH
78445: LD_VAR 0 2
78449: PUSH
78450: LD_INT 3
78452: PLUS
78453: PUSH
78454: LD_INT 0
78456: PUSH
78457: EMPTY
78458: LIST
78459: LIST
78460: LIST
78461: PUSH
78462: LD_VAR 0 1
78466: PUSH
78467: LD_INT 4
78469: PLUS
78470: PUSH
78471: LD_VAR 0 2
78475: PUSH
78476: LD_INT 4
78478: PLUS
78479: PUSH
78480: LD_INT 5
78482: PUSH
78483: EMPTY
78484: LIST
78485: LIST
78486: LIST
78487: PUSH
78488: EMPTY
78489: LIST
78490: LIST
78491: LIST
78492: LIST
78493: LIST
78494: ST_TO_ADDR
// end ; 2 :
78495: GO 79054
78497: LD_INT 2
78499: DOUBLE
78500: EQUAL
78501: IFTRUE 78505
78503: GO 78634
78505: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
78506: LD_ADDR_VAR 0 5
78510: PUSH
78511: LD_VAR 0 1
78515: PUSH
78516: LD_VAR 0 2
78520: PUSH
78521: LD_INT 3
78523: MINUS
78524: PUSH
78525: LD_INT 3
78527: PUSH
78528: EMPTY
78529: LIST
78530: LIST
78531: LIST
78532: PUSH
78533: LD_VAR 0 1
78537: PUSH
78538: LD_INT 4
78540: PLUS
78541: PUSH
78542: LD_VAR 0 2
78546: PUSH
78547: LD_INT 4
78549: PUSH
78550: EMPTY
78551: LIST
78552: LIST
78553: LIST
78554: PUSH
78555: LD_VAR 0 1
78559: PUSH
78560: LD_VAR 0 2
78564: PUSH
78565: LD_INT 4
78567: PLUS
78568: PUSH
78569: LD_INT 0
78571: PUSH
78572: EMPTY
78573: LIST
78574: LIST
78575: LIST
78576: PUSH
78577: LD_VAR 0 1
78581: PUSH
78582: LD_INT 3
78584: MINUS
78585: PUSH
78586: LD_VAR 0 2
78590: PUSH
78591: LD_INT 1
78593: PUSH
78594: EMPTY
78595: LIST
78596: LIST
78597: LIST
78598: PUSH
78599: LD_VAR 0 1
78603: PUSH
78604: LD_INT 4
78606: MINUS
78607: PUSH
78608: LD_VAR 0 2
78612: PUSH
78613: LD_INT 4
78615: MINUS
78616: PUSH
78617: LD_INT 2
78619: PUSH
78620: EMPTY
78621: LIST
78622: LIST
78623: LIST
78624: PUSH
78625: EMPTY
78626: LIST
78627: LIST
78628: LIST
78629: LIST
78630: LIST
78631: ST_TO_ADDR
// end ; 3 :
78632: GO 79054
78634: LD_INT 3
78636: DOUBLE
78637: EQUAL
78638: IFTRUE 78642
78640: GO 78775
78642: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
78643: LD_ADDR_VAR 0 5
78647: PUSH
78648: LD_VAR 0 1
78652: PUSH
78653: LD_INT 3
78655: PLUS
78656: PUSH
78657: LD_VAR 0 2
78661: PUSH
78662: LD_INT 4
78664: PUSH
78665: EMPTY
78666: LIST
78667: LIST
78668: LIST
78669: PUSH
78670: LD_VAR 0 1
78674: PUSH
78675: LD_INT 4
78677: PLUS
78678: PUSH
78679: LD_VAR 0 2
78683: PUSH
78684: LD_INT 4
78686: PLUS
78687: PUSH
78688: LD_INT 5
78690: PUSH
78691: EMPTY
78692: LIST
78693: LIST
78694: LIST
78695: PUSH
78696: LD_VAR 0 1
78700: PUSH
78701: LD_INT 4
78703: MINUS
78704: PUSH
78705: LD_VAR 0 2
78709: PUSH
78710: LD_INT 1
78712: PUSH
78713: EMPTY
78714: LIST
78715: LIST
78716: LIST
78717: PUSH
78718: LD_VAR 0 1
78722: PUSH
78723: LD_VAR 0 2
78727: PUSH
78728: LD_INT 4
78730: MINUS
78731: PUSH
78732: LD_INT 3
78734: PUSH
78735: EMPTY
78736: LIST
78737: LIST
78738: LIST
78739: PUSH
78740: LD_VAR 0 1
78744: PUSH
78745: LD_INT 3
78747: MINUS
78748: PUSH
78749: LD_VAR 0 2
78753: PUSH
78754: LD_INT 3
78756: MINUS
78757: PUSH
78758: LD_INT 2
78760: PUSH
78761: EMPTY
78762: LIST
78763: LIST
78764: LIST
78765: PUSH
78766: EMPTY
78767: LIST
78768: LIST
78769: LIST
78770: LIST
78771: LIST
78772: ST_TO_ADDR
// end ; 4 :
78773: GO 79054
78775: LD_INT 4
78777: DOUBLE
78778: EQUAL
78779: IFTRUE 78783
78781: GO 78916
78783: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
78784: LD_ADDR_VAR 0 5
78788: PUSH
78789: LD_VAR 0 1
78793: PUSH
78794: LD_VAR 0 2
78798: PUSH
78799: LD_INT 4
78801: PLUS
78802: PUSH
78803: LD_INT 0
78805: PUSH
78806: EMPTY
78807: LIST
78808: LIST
78809: LIST
78810: PUSH
78811: LD_VAR 0 1
78815: PUSH
78816: LD_INT 3
78818: PLUS
78819: PUSH
78820: LD_VAR 0 2
78824: PUSH
78825: LD_INT 3
78827: PLUS
78828: PUSH
78829: LD_INT 5
78831: PUSH
78832: EMPTY
78833: LIST
78834: LIST
78835: LIST
78836: PUSH
78837: LD_VAR 0 1
78841: PUSH
78842: LD_INT 4
78844: PLUS
78845: PUSH
78846: LD_VAR 0 2
78850: PUSH
78851: LD_INT 4
78853: PUSH
78854: EMPTY
78855: LIST
78856: LIST
78857: LIST
78858: PUSH
78859: LD_VAR 0 1
78863: PUSH
78864: LD_VAR 0 2
78868: PUSH
78869: LD_INT 3
78871: MINUS
78872: PUSH
78873: LD_INT 3
78875: PUSH
78876: EMPTY
78877: LIST
78878: LIST
78879: LIST
78880: PUSH
78881: LD_VAR 0 1
78885: PUSH
78886: LD_INT 4
78888: MINUS
78889: PUSH
78890: LD_VAR 0 2
78894: PUSH
78895: LD_INT 4
78897: MINUS
78898: PUSH
78899: LD_INT 2
78901: PUSH
78902: EMPTY
78903: LIST
78904: LIST
78905: LIST
78906: PUSH
78907: EMPTY
78908: LIST
78909: LIST
78910: LIST
78911: LIST
78912: LIST
78913: ST_TO_ADDR
// end ; 5 :
78914: GO 79054
78916: LD_INT 5
78918: DOUBLE
78919: EQUAL
78920: IFTRUE 78924
78922: GO 79053
78924: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
78925: LD_ADDR_VAR 0 5
78929: PUSH
78930: LD_VAR 0 1
78934: PUSH
78935: LD_INT 4
78937: MINUS
78938: PUSH
78939: LD_VAR 0 2
78943: PUSH
78944: LD_INT 1
78946: PUSH
78947: EMPTY
78948: LIST
78949: LIST
78950: LIST
78951: PUSH
78952: LD_VAR 0 1
78956: PUSH
78957: LD_VAR 0 2
78961: PUSH
78962: LD_INT 4
78964: MINUS
78965: PUSH
78966: LD_INT 3
78968: PUSH
78969: EMPTY
78970: LIST
78971: LIST
78972: LIST
78973: PUSH
78974: LD_VAR 0 1
78978: PUSH
78979: LD_INT 4
78981: PLUS
78982: PUSH
78983: LD_VAR 0 2
78987: PUSH
78988: LD_INT 4
78990: PLUS
78991: PUSH
78992: LD_INT 5
78994: PUSH
78995: EMPTY
78996: LIST
78997: LIST
78998: LIST
78999: PUSH
79000: LD_VAR 0 1
79004: PUSH
79005: LD_INT 3
79007: PLUS
79008: PUSH
79009: LD_VAR 0 2
79013: PUSH
79014: LD_INT 4
79016: PUSH
79017: EMPTY
79018: LIST
79019: LIST
79020: LIST
79021: PUSH
79022: LD_VAR 0 1
79026: PUSH
79027: LD_VAR 0 2
79031: PUSH
79032: LD_INT 3
79034: PLUS
79035: PUSH
79036: LD_INT 0
79038: PUSH
79039: EMPTY
79040: LIST
79041: LIST
79042: LIST
79043: PUSH
79044: EMPTY
79045: LIST
79046: LIST
79047: LIST
79048: LIST
79049: LIST
79050: ST_TO_ADDR
// end ; end ;
79051: GO 79054
79053: POP
// result := list ;
79054: LD_ADDR_VAR 0 4
79058: PUSH
79059: LD_VAR 0 5
79063: ST_TO_ADDR
// end ;
79064: LD_VAR 0 4
79068: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
79069: LD_INT 0
79071: PPUSH
79072: PPUSH
79073: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
79074: LD_VAR 0 1
79078: NOT
79079: IFTRUE 79107
79081: PUSH
79082: LD_VAR 0 2
79086: PUSH
79087: LD_INT 1
79089: PUSH
79090: LD_INT 2
79092: PUSH
79093: LD_INT 3
79095: PUSH
79096: LD_INT 4
79098: PUSH
79099: EMPTY
79100: LIST
79101: LIST
79102: LIST
79103: LIST
79104: IN
79105: NOT
79106: OR
79107: IFFALSE 79111
// exit ;
79109: GO 79194
// tmp := [ ] ;
79111: LD_ADDR_VAR 0 5
79115: PUSH
79116: EMPTY
79117: ST_TO_ADDR
// for i in units do
79118: LD_ADDR_VAR 0 4
79122: PUSH
79123: LD_VAR 0 1
79127: PUSH
79128: FOR_IN
79129: IFFALSE 79163
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
79131: LD_ADDR_VAR 0 5
79135: PUSH
79136: LD_VAR 0 5
79140: PPUSH
79141: LD_VAR 0 4
79145: PPUSH
79146: LD_VAR 0 2
79150: PPUSH
79151: CALL_OW 259
79155: PPUSH
79156: CALL 80589 0 2
79160: ST_TO_ADDR
79161: GO 79128
79163: POP
79164: POP
// if not tmp then
79165: LD_VAR 0 5
79169: NOT
79170: IFFALSE 79174
// exit ;
79172: GO 79194
// result := SortListByListDesc ( units , tmp ) ;
79174: LD_ADDR_VAR 0 3
79178: PUSH
79179: LD_VAR 0 1
79183: PPUSH
79184: LD_VAR 0 5
79188: PPUSH
79189: CALL_OW 77
79193: ST_TO_ADDR
// end ;
79194: LD_VAR 0 3
79198: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
79199: LD_INT 0
79201: PPUSH
79202: PPUSH
79203: PPUSH
// result := false ;
79204: LD_ADDR_VAR 0 3
79208: PUSH
79209: LD_INT 0
79211: ST_TO_ADDR
// if not building then
79212: LD_VAR 0 2
79216: NOT
79217: IFFALSE 79221
// exit ;
79219: GO 79365
// x := GetX ( building ) ;
79221: LD_ADDR_VAR 0 4
79225: PUSH
79226: LD_VAR 0 2
79230: PPUSH
79231: CALL_OW 250
79235: ST_TO_ADDR
// y := GetY ( building ) ;
79236: LD_ADDR_VAR 0 5
79240: PUSH
79241: LD_VAR 0 2
79245: PPUSH
79246: CALL_OW 251
79250: ST_TO_ADDR
// if not x or not y then
79251: LD_VAR 0 4
79255: NOT
79256: IFTRUE 79265
79258: PUSH
79259: LD_VAR 0 5
79263: NOT
79264: OR
79265: IFFALSE 79269
// exit ;
79267: GO 79365
// if GetTaskList ( unit ) then
79269: LD_VAR 0 1
79273: PPUSH
79274: CALL_OW 437
79278: IFFALSE 79365
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
79280: LD_STRING e
79282: PUSH
79283: LD_VAR 0 1
79287: PPUSH
79288: CALL_OW 437
79292: PUSH
79293: LD_INT 1
79295: ARRAY
79296: PUSH
79297: LD_INT 1
79299: ARRAY
79300: EQUAL
79301: IFFALSE 79328
79303: PUSH
79304: LD_VAR 0 4
79308: PUSH
79309: LD_VAR 0 1
79313: PPUSH
79314: CALL_OW 437
79318: PUSH
79319: LD_INT 1
79321: ARRAY
79322: PUSH
79323: LD_INT 2
79325: ARRAY
79326: EQUAL
79327: AND
79328: IFFALSE 79355
79330: PUSH
79331: LD_VAR 0 5
79335: PUSH
79336: LD_VAR 0 1
79340: PPUSH
79341: CALL_OW 437
79345: PUSH
79346: LD_INT 1
79348: ARRAY
79349: PUSH
79350: LD_INT 3
79352: ARRAY
79353: EQUAL
79354: AND
79355: IFFALSE 79365
// result := true end ;
79357: LD_ADDR_VAR 0 3
79361: PUSH
79362: LD_INT 1
79364: ST_TO_ADDR
// end ;
79365: LD_VAR 0 3
79369: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
79370: LD_INT 0
79372: PPUSH
// result := false ;
79373: LD_ADDR_VAR 0 4
79377: PUSH
79378: LD_INT 0
79380: ST_TO_ADDR
// if GetTaskList ( unit ) then
79381: LD_VAR 0 1
79385: PPUSH
79386: CALL_OW 437
79390: IFFALSE 79477
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
79392: LD_STRING M
79394: PUSH
79395: LD_VAR 0 1
79399: PPUSH
79400: CALL_OW 437
79404: PUSH
79405: LD_INT 1
79407: ARRAY
79408: PUSH
79409: LD_INT 1
79411: ARRAY
79412: EQUAL
79413: IFFALSE 79440
79415: PUSH
79416: LD_VAR 0 2
79420: PUSH
79421: LD_VAR 0 1
79425: PPUSH
79426: CALL_OW 437
79430: PUSH
79431: LD_INT 1
79433: ARRAY
79434: PUSH
79435: LD_INT 2
79437: ARRAY
79438: EQUAL
79439: AND
79440: IFFALSE 79467
79442: PUSH
79443: LD_VAR 0 3
79447: PUSH
79448: LD_VAR 0 1
79452: PPUSH
79453: CALL_OW 437
79457: PUSH
79458: LD_INT 1
79460: ARRAY
79461: PUSH
79462: LD_INT 3
79464: ARRAY
79465: EQUAL
79466: AND
79467: IFFALSE 79477
// result := true ;
79469: LD_ADDR_VAR 0 4
79473: PUSH
79474: LD_INT 1
79476: ST_TO_ADDR
// end ; end ;
79477: LD_VAR 0 4
79481: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
79482: LD_INT 0
79484: PPUSH
79485: PPUSH
79486: PPUSH
79487: PPUSH
// if not unit or not area then
79488: LD_VAR 0 1
79492: NOT
79493: IFTRUE 79502
79495: PUSH
79496: LD_VAR 0 2
79500: NOT
79501: OR
79502: IFFALSE 79506
// exit ;
79504: GO 79682
// tmp := AreaToList ( area , i ) ;
79506: LD_ADDR_VAR 0 6
79510: PUSH
79511: LD_VAR 0 2
79515: PPUSH
79516: LD_VAR 0 5
79520: PPUSH
79521: CALL_OW 517
79525: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
79526: LD_ADDR_VAR 0 5
79530: PUSH
79531: DOUBLE
79532: LD_INT 1
79534: DEC
79535: ST_TO_ADDR
79536: LD_VAR 0 6
79540: PUSH
79541: LD_INT 1
79543: ARRAY
79544: PUSH
79545: FOR_TO
79546: IFFALSE 79680
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
79548: LD_ADDR_VAR 0 7
79552: PUSH
79553: LD_VAR 0 6
79557: PUSH
79558: LD_INT 1
79560: ARRAY
79561: PUSH
79562: LD_VAR 0 5
79566: ARRAY
79567: PUSH
79568: LD_VAR 0 6
79572: PUSH
79573: LD_INT 2
79575: ARRAY
79576: PUSH
79577: LD_VAR 0 5
79581: ARRAY
79582: PUSH
79583: EMPTY
79584: LIST
79585: LIST
79586: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
79587: LD_INT 92
79589: PUSH
79590: LD_VAR 0 7
79594: PUSH
79595: LD_INT 1
79597: ARRAY
79598: PUSH
79599: LD_VAR 0 7
79603: PUSH
79604: LD_INT 2
79606: ARRAY
79607: PUSH
79608: LD_INT 2
79610: PUSH
79611: EMPTY
79612: LIST
79613: LIST
79614: LIST
79615: LIST
79616: PPUSH
79617: CALL_OW 69
79621: PUSH
79622: LD_INT 0
79624: EQUAL
79625: IFFALSE 79678
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
79627: LD_VAR 0 1
79631: PPUSH
79632: LD_VAR 0 7
79636: PUSH
79637: LD_INT 1
79639: ARRAY
79640: PPUSH
79641: LD_VAR 0 7
79645: PUSH
79646: LD_INT 2
79648: ARRAY
79649: PPUSH
79650: LD_VAR 0 3
79654: PPUSH
79655: CALL_OW 48
// result := IsPlaced ( unit ) ;
79659: LD_ADDR_VAR 0 4
79663: PUSH
79664: LD_VAR 0 1
79668: PPUSH
79669: CALL_OW 305
79673: ST_TO_ADDR
// exit ;
79674: POP
79675: POP
79676: GO 79682
// end ; end ;
79678: GO 79545
79680: POP
79681: POP
// end ;
79682: LD_VAR 0 4
79686: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
79687: LD_INT 0
79689: PPUSH
79690: PPUSH
79691: PPUSH
// if not side or side > 8 then
79692: LD_VAR 0 1
79696: NOT
79697: IFTRUE 79709
79699: PUSH
79700: LD_VAR 0 1
79704: PUSH
79705: LD_INT 8
79707: GREATER
79708: OR
79709: IFFALSE 79713
// exit ;
79711: GO 79900
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
79713: LD_ADDR_VAR 0 4
79717: PUSH
79718: LD_INT 22
79720: PUSH
79721: LD_VAR 0 1
79725: PUSH
79726: EMPTY
79727: LIST
79728: LIST
79729: PUSH
79730: LD_INT 21
79732: PUSH
79733: LD_INT 3
79735: PUSH
79736: EMPTY
79737: LIST
79738: LIST
79739: PUSH
79740: EMPTY
79741: LIST
79742: LIST
79743: PPUSH
79744: CALL_OW 69
79748: ST_TO_ADDR
// if not tmp then
79749: LD_VAR 0 4
79753: NOT
79754: IFFALSE 79758
// exit ;
79756: GO 79900
// enable_addtolog := true ;
79758: LD_ADDR_OWVAR 81
79762: PUSH
79763: LD_INT 1
79765: ST_TO_ADDR
// AddToLog ( [ ) ;
79766: LD_STRING [
79768: PPUSH
79769: CALL_OW 561
// for i in tmp do
79773: LD_ADDR_VAR 0 3
79777: PUSH
79778: LD_VAR 0 4
79782: PUSH
79783: FOR_IN
79784: IFFALSE 79891
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
79786: LD_STRING [
79788: PUSH
79789: LD_VAR 0 3
79793: PPUSH
79794: CALL_OW 266
79798: STR
79799: PUSH
79800: LD_STRING , 
79802: STR
79803: PUSH
79804: LD_VAR 0 3
79808: PPUSH
79809: CALL_OW 250
79813: STR
79814: PUSH
79815: LD_STRING , 
79817: STR
79818: PUSH
79819: LD_VAR 0 3
79823: PPUSH
79824: CALL_OW 251
79828: STR
79829: PUSH
79830: LD_STRING , 
79832: STR
79833: PUSH
79834: LD_VAR 0 3
79838: PPUSH
79839: CALL_OW 254
79843: STR
79844: PUSH
79845: LD_STRING , 
79847: STR
79848: PUSH
79849: LD_VAR 0 3
79853: PPUSH
79854: LD_INT 1
79856: PPUSH
79857: CALL_OW 268
79861: STR
79862: PUSH
79863: LD_STRING , 
79865: STR
79866: PUSH
79867: LD_VAR 0 3
79871: PPUSH
79872: LD_INT 2
79874: PPUSH
79875: CALL_OW 268
79879: STR
79880: PUSH
79881: LD_STRING ],
79883: STR
79884: PPUSH
79885: CALL_OW 561
// end ;
79889: GO 79783
79891: POP
79892: POP
// AddToLog ( ]; ) ;
79893: LD_STRING ];
79895: PPUSH
79896: CALL_OW 561
// end ;
79900: LD_VAR 0 2
79904: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
79905: LD_INT 0
79907: PPUSH
79908: PPUSH
79909: PPUSH
79910: PPUSH
79911: PPUSH
// if not area or not rate or not max then
79912: LD_VAR 0 1
79916: NOT
79917: IFTRUE 79926
79919: PUSH
79920: LD_VAR 0 2
79924: NOT
79925: OR
79926: IFTRUE 79935
79928: PUSH
79929: LD_VAR 0 4
79933: NOT
79934: OR
79935: IFFALSE 79939
// exit ;
79937: GO 80128
// while 1 do
79939: LD_INT 1
79941: IFFALSE 80128
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
79943: LD_ADDR_VAR 0 9
79947: PUSH
79948: LD_VAR 0 1
79952: PPUSH
79953: LD_INT 1
79955: PPUSH
79956: CALL_OW 287
79960: PUSH
79961: LD_INT 10
79963: MUL
79964: ST_TO_ADDR
// r := rate / 10 ;
79965: LD_ADDR_VAR 0 7
79969: PUSH
79970: LD_VAR 0 2
79974: PUSH
79975: LD_INT 10
79977: DIVREAL
79978: ST_TO_ADDR
// time := 1 1$00 ;
79979: LD_ADDR_VAR 0 8
79983: PUSH
79984: LD_INT 2100
79986: ST_TO_ADDR
// if amount < min then
79987: LD_VAR 0 9
79991: PUSH
79992: LD_VAR 0 3
79996: LESS
79997: IFFALSE 80015
// r := r * 2 else
79999: LD_ADDR_VAR 0 7
80003: PUSH
80004: LD_VAR 0 7
80008: PUSH
80009: LD_INT 2
80011: MUL
80012: ST_TO_ADDR
80013: GO 80041
// if amount > max then
80015: LD_VAR 0 9
80019: PUSH
80020: LD_VAR 0 4
80024: GREATER
80025: IFFALSE 80041
// r := r / 2 ;
80027: LD_ADDR_VAR 0 7
80031: PUSH
80032: LD_VAR 0 7
80036: PUSH
80037: LD_INT 2
80039: DIVREAL
80040: ST_TO_ADDR
// time := time / r ;
80041: LD_ADDR_VAR 0 8
80045: PUSH
80046: LD_VAR 0 8
80050: PUSH
80051: LD_VAR 0 7
80055: DIVREAL
80056: ST_TO_ADDR
// if time < 0 then
80057: LD_VAR 0 8
80061: PUSH
80062: LD_INT 0
80064: LESS
80065: IFFALSE 80082
// time := time * - 1 ;
80067: LD_ADDR_VAR 0 8
80071: PUSH
80072: LD_VAR 0 8
80076: PUSH
80077: LD_INT 1
80079: NEG
80080: MUL
80081: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
80082: LD_VAR 0 8
80086: PUSH
80087: LD_INT 35
80089: PPUSH
80090: LD_INT 875
80092: PPUSH
80093: CALL_OW 12
80097: PLUS
80098: PPUSH
80099: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
80103: LD_INT 1
80105: PPUSH
80106: LD_INT 5
80108: PPUSH
80109: CALL_OW 12
80113: PPUSH
80114: LD_VAR 0 1
80118: PPUSH
80119: LD_INT 1
80121: PPUSH
80122: CALL_OW 55
// end ;
80126: GO 79939
// end ;
80128: LD_VAR 0 5
80132: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
80133: LD_INT 0
80135: PPUSH
80136: PPUSH
80137: PPUSH
80138: PPUSH
80139: PPUSH
80140: PPUSH
80141: PPUSH
80142: PPUSH
// if not turrets or not factories then
80143: LD_VAR 0 1
80147: NOT
80148: IFTRUE 80157
80150: PUSH
80151: LD_VAR 0 2
80155: NOT
80156: OR
80157: IFFALSE 80161
// exit ;
80159: GO 80468
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
80161: LD_ADDR_VAR 0 10
80165: PUSH
80166: LD_INT 5
80168: PUSH
80169: LD_INT 6
80171: PUSH
80172: EMPTY
80173: LIST
80174: LIST
80175: PUSH
80176: LD_INT 2
80178: PUSH
80179: LD_INT 4
80181: PUSH
80182: EMPTY
80183: LIST
80184: LIST
80185: PUSH
80186: LD_INT 3
80188: PUSH
80189: LD_INT 5
80191: PUSH
80192: EMPTY
80193: LIST
80194: LIST
80195: PUSH
80196: EMPTY
80197: LIST
80198: LIST
80199: LIST
80200: PUSH
80201: LD_INT 24
80203: PUSH
80204: LD_INT 25
80206: PUSH
80207: EMPTY
80208: LIST
80209: LIST
80210: PUSH
80211: LD_INT 23
80213: PUSH
80214: LD_INT 27
80216: PUSH
80217: EMPTY
80218: LIST
80219: LIST
80220: PUSH
80221: EMPTY
80222: LIST
80223: LIST
80224: PUSH
80225: LD_INT 42
80227: PUSH
80228: LD_INT 43
80230: PUSH
80231: EMPTY
80232: LIST
80233: LIST
80234: PUSH
80235: LD_INT 44
80237: PUSH
80238: LD_INT 46
80240: PUSH
80241: EMPTY
80242: LIST
80243: LIST
80244: PUSH
80245: LD_INT 45
80247: PUSH
80248: LD_INT 47
80250: PUSH
80251: EMPTY
80252: LIST
80253: LIST
80254: PUSH
80255: EMPTY
80256: LIST
80257: LIST
80258: LIST
80259: PUSH
80260: EMPTY
80261: LIST
80262: LIST
80263: LIST
80264: ST_TO_ADDR
// result := [ ] ;
80265: LD_ADDR_VAR 0 3
80269: PUSH
80270: EMPTY
80271: ST_TO_ADDR
// for i in turrets do
80272: LD_ADDR_VAR 0 4
80276: PUSH
80277: LD_VAR 0 1
80281: PUSH
80282: FOR_IN
80283: IFFALSE 80466
// begin nat := GetNation ( i ) ;
80285: LD_ADDR_VAR 0 7
80289: PUSH
80290: LD_VAR 0 4
80294: PPUSH
80295: CALL_OW 248
80299: ST_TO_ADDR
// weapon := 0 ;
80300: LD_ADDR_VAR 0 8
80304: PUSH
80305: LD_INT 0
80307: ST_TO_ADDR
// if not nat then
80308: LD_VAR 0 7
80312: NOT
80313: IFFALSE 80317
// continue ;
80315: GO 80282
// for j in list [ nat ] do
80317: LD_ADDR_VAR 0 5
80321: PUSH
80322: LD_VAR 0 10
80326: PUSH
80327: LD_VAR 0 7
80331: ARRAY
80332: PUSH
80333: FOR_IN
80334: IFFALSE 80375
// if GetBWeapon ( i ) = j [ 1 ] then
80336: LD_VAR 0 4
80340: PPUSH
80341: CALL_OW 269
80345: PUSH
80346: LD_VAR 0 5
80350: PUSH
80351: LD_INT 1
80353: ARRAY
80354: EQUAL
80355: IFFALSE 80373
// begin weapon := j [ 2 ] ;
80357: LD_ADDR_VAR 0 8
80361: PUSH
80362: LD_VAR 0 5
80366: PUSH
80367: LD_INT 2
80369: ARRAY
80370: ST_TO_ADDR
// break ;
80371: GO 80375
// end ;
80373: GO 80333
80375: POP
80376: POP
// if not weapon then
80377: LD_VAR 0 8
80381: NOT
80382: IFFALSE 80386
// continue ;
80384: GO 80282
// for k in factories do
80386: LD_ADDR_VAR 0 6
80390: PUSH
80391: LD_VAR 0 2
80395: PUSH
80396: FOR_IN
80397: IFFALSE 80462
// begin weapons := AvailableWeaponList ( k ) ;
80399: LD_ADDR_VAR 0 9
80403: PUSH
80404: LD_VAR 0 6
80408: PPUSH
80409: CALL_OW 478
80413: ST_TO_ADDR
// if not weapons then
80414: LD_VAR 0 9
80418: NOT
80419: IFFALSE 80423
// continue ;
80421: GO 80396
// if weapon in weapons then
80423: LD_VAR 0 8
80427: PUSH
80428: LD_VAR 0 9
80432: IN
80433: IFFALSE 80460
// begin result := [ i , weapon ] ;
80435: LD_ADDR_VAR 0 3
80439: PUSH
80440: LD_VAR 0 4
80444: PUSH
80445: LD_VAR 0 8
80449: PUSH
80450: EMPTY
80451: LIST
80452: LIST
80453: ST_TO_ADDR
// exit ;
80454: POP
80455: POP
80456: POP
80457: POP
80458: GO 80468
// end ; end ;
80460: GO 80396
80462: POP
80463: POP
// end ;
80464: GO 80282
80466: POP
80467: POP
// end ;
80468: LD_VAR 0 3
80472: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
80473: LD_INT 0
80475: PPUSH
// if not side or side > 8 then
80476: LD_VAR 0 3
80480: NOT
80481: IFTRUE 80493
80483: PUSH
80484: LD_VAR 0 3
80488: PUSH
80489: LD_INT 8
80491: GREATER
80492: OR
80493: IFFALSE 80497
// exit ;
80495: GO 80556
// if not range then
80497: LD_VAR 0 4
80501: NOT
80502: IFFALSE 80513
// range := - 12 ;
80504: LD_ADDR_VAR 0 4
80508: PUSH
80509: LD_INT 12
80511: NEG
80512: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
80513: LD_VAR 0 1
80517: PPUSH
80518: LD_VAR 0 2
80522: PPUSH
80523: LD_VAR 0 3
80527: PPUSH
80528: LD_VAR 0 4
80532: PPUSH
80533: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
80537: LD_VAR 0 1
80541: PPUSH
80542: LD_VAR 0 2
80546: PPUSH
80547: LD_VAR 0 3
80551: PPUSH
80552: CALL_OW 331
// end ;
80556: LD_VAR 0 5
80560: RET
// export function Video ( mode ) ; begin
80561: LD_INT 0
80563: PPUSH
// ingame_video = mode ;
80564: LD_ADDR_OWVAR 52
80568: PUSH
80569: LD_VAR 0 1
80573: ST_TO_ADDR
// interface_hidden = mode ;
80574: LD_ADDR_OWVAR 54
80578: PUSH
80579: LD_VAR 0 1
80583: ST_TO_ADDR
// end ;
80584: LD_VAR 0 2
80588: RET
// export function Join ( array , element ) ; begin
80589: LD_INT 0
80591: PPUSH
// result := Replace ( array , array + 1 , element ) ;
80592: LD_ADDR_VAR 0 3
80596: PUSH
80597: LD_VAR 0 1
80601: PPUSH
80602: LD_VAR 0 1
80606: PUSH
80607: LD_INT 1
80609: PLUS
80610: PPUSH
80611: LD_VAR 0 2
80615: PPUSH
80616: CALL_OW 1
80620: ST_TO_ADDR
// end ;
80621: LD_VAR 0 3
80625: RET
// export function JoinUnion ( array , element ) ; begin
80626: LD_INT 0
80628: PPUSH
// result := array union element ;
80629: LD_ADDR_VAR 0 3
80633: PUSH
80634: LD_VAR 0 1
80638: PUSH
80639: LD_VAR 0 2
80643: UNION
80644: ST_TO_ADDR
// end ;
80645: LD_VAR 0 3
80649: RET
// export function GetBehemoths ( side ) ; begin
80650: LD_INT 0
80652: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
80653: LD_ADDR_VAR 0 2
80657: PUSH
80658: LD_INT 22
80660: PUSH
80661: LD_VAR 0 1
80665: PUSH
80666: EMPTY
80667: LIST
80668: LIST
80669: PUSH
80670: LD_INT 31
80672: PUSH
80673: LD_INT 25
80675: PUSH
80676: EMPTY
80677: LIST
80678: LIST
80679: PUSH
80680: EMPTY
80681: LIST
80682: LIST
80683: PPUSH
80684: CALL_OW 69
80688: ST_TO_ADDR
// end ;
80689: LD_VAR 0 2
80693: RET
// export function Shuffle ( array ) ; var i , index ; begin
80694: LD_INT 0
80696: PPUSH
80697: PPUSH
80698: PPUSH
// result := [ ] ;
80699: LD_ADDR_VAR 0 2
80703: PUSH
80704: EMPTY
80705: ST_TO_ADDR
// if not array then
80706: LD_VAR 0 1
80710: NOT
80711: IFFALSE 80715
// exit ;
80713: GO 80814
// Randomize ;
80715: CALL_OW 10
// for i = array downto 1 do
80719: LD_ADDR_VAR 0 3
80723: PUSH
80724: DOUBLE
80725: LD_VAR 0 1
80729: INC
80730: ST_TO_ADDR
80731: LD_INT 1
80733: PUSH
80734: FOR_DOWNTO
80735: IFFALSE 80812
// begin index := rand ( 1 , array ) ;
80737: LD_ADDR_VAR 0 4
80741: PUSH
80742: LD_INT 1
80744: PPUSH
80745: LD_VAR 0 1
80749: PPUSH
80750: CALL_OW 12
80754: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
80755: LD_ADDR_VAR 0 2
80759: PUSH
80760: LD_VAR 0 2
80764: PPUSH
80765: LD_VAR 0 2
80769: PUSH
80770: LD_INT 1
80772: PLUS
80773: PPUSH
80774: LD_VAR 0 1
80778: PUSH
80779: LD_VAR 0 4
80783: ARRAY
80784: PPUSH
80785: CALL_OW 2
80789: ST_TO_ADDR
// array := Delete ( array , index ) ;
80790: LD_ADDR_VAR 0 1
80794: PUSH
80795: LD_VAR 0 1
80799: PPUSH
80800: LD_VAR 0 4
80804: PPUSH
80805: CALL_OW 3
80809: ST_TO_ADDR
// end ;
80810: GO 80734
80812: POP
80813: POP
// end ;
80814: LD_VAR 0 2
80818: RET
// export function GetBaseMaterials ( base ) ; begin
80819: LD_INT 0
80821: PPUSH
// result := [ 0 , 0 , 0 ] ;
80822: LD_ADDR_VAR 0 2
80826: PUSH
80827: LD_INT 0
80829: PUSH
80830: LD_INT 0
80832: PUSH
80833: LD_INT 0
80835: PUSH
80836: EMPTY
80837: LIST
80838: LIST
80839: LIST
80840: ST_TO_ADDR
// if not base then
80841: LD_VAR 0 1
80845: NOT
80846: IFFALSE 80850
// exit ;
80848: GO 80899
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
80850: LD_ADDR_VAR 0 2
80854: PUSH
80855: LD_VAR 0 1
80859: PPUSH
80860: LD_INT 1
80862: PPUSH
80863: CALL_OW 275
80867: PUSH
80868: LD_VAR 0 1
80872: PPUSH
80873: LD_INT 2
80875: PPUSH
80876: CALL_OW 275
80880: PUSH
80881: LD_VAR 0 1
80885: PPUSH
80886: LD_INT 3
80888: PPUSH
80889: CALL_OW 275
80893: PUSH
80894: EMPTY
80895: LIST
80896: LIST
80897: LIST
80898: ST_TO_ADDR
// end ;
80899: LD_VAR 0 2
80903: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
80904: LD_INT 0
80906: PPUSH
80907: PPUSH
// result := array ;
80908: LD_ADDR_VAR 0 3
80912: PUSH
80913: LD_VAR 0 1
80917: ST_TO_ADDR
// if size >= result then
80918: LD_VAR 0 2
80922: PUSH
80923: LD_VAR 0 3
80927: GREATEREQUAL
80928: IFFALSE 80932
// exit ;
80930: GO 80982
// if size then
80932: LD_VAR 0 2
80936: IFFALSE 80982
// for i := array downto size do
80938: LD_ADDR_VAR 0 4
80942: PUSH
80943: DOUBLE
80944: LD_VAR 0 1
80948: INC
80949: ST_TO_ADDR
80950: LD_VAR 0 2
80954: PUSH
80955: FOR_DOWNTO
80956: IFFALSE 80980
// result := Delete ( result , result ) ;
80958: LD_ADDR_VAR 0 3
80962: PUSH
80963: LD_VAR 0 3
80967: PPUSH
80968: LD_VAR 0 3
80972: PPUSH
80973: CALL_OW 3
80977: ST_TO_ADDR
80978: GO 80955
80980: POP
80981: POP
// end ;
80982: LD_VAR 0 3
80986: RET
// export function ComExit ( unit ) ; var tmp ; begin
80987: LD_INT 0
80989: PPUSH
80990: PPUSH
// if not IsInUnit ( unit ) then
80991: LD_VAR 0 1
80995: PPUSH
80996: CALL_OW 310
81000: NOT
81001: IFFALSE 81005
// exit ;
81003: GO 81065
// tmp := IsInUnit ( unit ) ;
81005: LD_ADDR_VAR 0 3
81009: PUSH
81010: LD_VAR 0 1
81014: PPUSH
81015: CALL_OW 310
81019: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
81020: LD_VAR 0 3
81024: PPUSH
81025: CALL_OW 247
81029: PUSH
81030: LD_INT 2
81032: EQUAL
81033: IFFALSE 81046
// ComExitVehicle ( unit ) else
81035: LD_VAR 0 1
81039: PPUSH
81040: CALL_OW 121
81044: GO 81055
// ComExitBuilding ( unit ) ;
81046: LD_VAR 0 1
81050: PPUSH
81051: CALL_OW 122
// result := tmp ;
81055: LD_ADDR_VAR 0 2
81059: PUSH
81060: LD_VAR 0 3
81064: ST_TO_ADDR
// end ;
81065: LD_VAR 0 2
81069: RET
// export function ComExitAll ( units ) ; var i ; begin
81070: LD_INT 0
81072: PPUSH
81073: PPUSH
// if not units then
81074: LD_VAR 0 1
81078: NOT
81079: IFFALSE 81083
// exit ;
81081: GO 81109
// for i in units do
81083: LD_ADDR_VAR 0 3
81087: PUSH
81088: LD_VAR 0 1
81092: PUSH
81093: FOR_IN
81094: IFFALSE 81107
// ComExit ( i ) ;
81096: LD_VAR 0 3
81100: PPUSH
81101: CALL 80987 0 1
81105: GO 81093
81107: POP
81108: POP
// end ;
81109: LD_VAR 0 2
81113: RET
// export function ResetHc ; begin
81114: LD_INT 0
81116: PPUSH
// InitHc ;
81117: CALL_OW 19
// hc_importance := 0 ;
81121: LD_ADDR_OWVAR 32
81125: PUSH
81126: LD_INT 0
81128: ST_TO_ADDR
// end ;
81129: LD_VAR 0 1
81133: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
81134: LD_INT 0
81136: PPUSH
81137: PPUSH
81138: PPUSH
// _x := ( x1 + x2 ) div 2 ;
81139: LD_ADDR_VAR 0 6
81143: PUSH
81144: LD_VAR 0 1
81148: PUSH
81149: LD_VAR 0 3
81153: PLUS
81154: PUSH
81155: LD_INT 2
81157: DIV
81158: ST_TO_ADDR
// if _x < 0 then
81159: LD_VAR 0 6
81163: PUSH
81164: LD_INT 0
81166: LESS
81167: IFFALSE 81184
// _x := _x * - 1 ;
81169: LD_ADDR_VAR 0 6
81173: PUSH
81174: LD_VAR 0 6
81178: PUSH
81179: LD_INT 1
81181: NEG
81182: MUL
81183: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
81184: LD_ADDR_VAR 0 7
81188: PUSH
81189: LD_VAR 0 2
81193: PUSH
81194: LD_VAR 0 4
81198: PLUS
81199: PUSH
81200: LD_INT 2
81202: DIV
81203: ST_TO_ADDR
// if _y < 0 then
81204: LD_VAR 0 7
81208: PUSH
81209: LD_INT 0
81211: LESS
81212: IFFALSE 81229
// _y := _y * - 1 ;
81214: LD_ADDR_VAR 0 7
81218: PUSH
81219: LD_VAR 0 7
81223: PUSH
81224: LD_INT 1
81226: NEG
81227: MUL
81228: ST_TO_ADDR
// result := [ _x , _y ] ;
81229: LD_ADDR_VAR 0 5
81233: PUSH
81234: LD_VAR 0 6
81238: PUSH
81239: LD_VAR 0 7
81243: PUSH
81244: EMPTY
81245: LIST
81246: LIST
81247: ST_TO_ADDR
// end ;
81248: LD_VAR 0 5
81252: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
81253: LD_INT 0
81255: PPUSH
81256: PPUSH
81257: PPUSH
81258: PPUSH
// task := GetTaskList ( unit ) ;
81259: LD_ADDR_VAR 0 7
81263: PUSH
81264: LD_VAR 0 1
81268: PPUSH
81269: CALL_OW 437
81273: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
81274: LD_VAR 0 7
81278: NOT
81279: IFFALSE 81298
81281: PUSH
81282: LD_VAR 0 1
81286: PPUSH
81287: LD_VAR 0 2
81291: PPUSH
81292: CALL_OW 308
81296: NOT
81297: AND
81298: IFFALSE 81302
// exit ;
81300: GO 81420
// if IsInArea ( unit , area ) then
81302: LD_VAR 0 1
81306: PPUSH
81307: LD_VAR 0 2
81311: PPUSH
81312: CALL_OW 308
81316: IFFALSE 81334
// begin ComMoveToArea ( unit , goAway ) ;
81318: LD_VAR 0 1
81322: PPUSH
81323: LD_VAR 0 3
81327: PPUSH
81328: CALL_OW 113
// exit ;
81332: GO 81420
// end ; if task [ 1 ] [ 1 ] <> M then
81334: LD_VAR 0 7
81338: PUSH
81339: LD_INT 1
81341: ARRAY
81342: PUSH
81343: LD_INT 1
81345: ARRAY
81346: PUSH
81347: LD_STRING M
81349: NONEQUAL
81350: IFFALSE 81354
// exit ;
81352: GO 81420
// x := task [ 1 ] [ 2 ] ;
81354: LD_ADDR_VAR 0 5
81358: PUSH
81359: LD_VAR 0 7
81363: PUSH
81364: LD_INT 1
81366: ARRAY
81367: PUSH
81368: LD_INT 2
81370: ARRAY
81371: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
81372: LD_ADDR_VAR 0 6
81376: PUSH
81377: LD_VAR 0 7
81381: PUSH
81382: LD_INT 1
81384: ARRAY
81385: PUSH
81386: LD_INT 3
81388: ARRAY
81389: ST_TO_ADDR
// if InArea ( x , y , area ) then
81390: LD_VAR 0 5
81394: PPUSH
81395: LD_VAR 0 6
81399: PPUSH
81400: LD_VAR 0 2
81404: PPUSH
81405: CALL_OW 309
81409: IFFALSE 81420
// ComStop ( unit ) ;
81411: LD_VAR 0 1
81415: PPUSH
81416: CALL_OW 141
// end ;
81420: LD_VAR 0 4
81424: RET
// export function Abs ( value ) ; begin
81425: LD_INT 0
81427: PPUSH
// result := value ;
81428: LD_ADDR_VAR 0 2
81432: PUSH
81433: LD_VAR 0 1
81437: ST_TO_ADDR
// if value < 0 then
81438: LD_VAR 0 1
81442: PUSH
81443: LD_INT 0
81445: LESS
81446: IFFALSE 81463
// result := value * - 1 ;
81448: LD_ADDR_VAR 0 2
81452: PUSH
81453: LD_VAR 0 1
81457: PUSH
81458: LD_INT 1
81460: NEG
81461: MUL
81462: ST_TO_ADDR
// end ;
81463: LD_VAR 0 2
81467: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
81468: LD_INT 0
81470: PPUSH
81471: PPUSH
81472: PPUSH
81473: PPUSH
81474: PPUSH
81475: PPUSH
81476: PPUSH
81477: PPUSH
// if not unit or not building then
81478: LD_VAR 0 1
81482: NOT
81483: IFTRUE 81492
81485: PUSH
81486: LD_VAR 0 2
81490: NOT
81491: OR
81492: IFFALSE 81496
// exit ;
81494: GO 81724
// x := GetX ( building ) ;
81496: LD_ADDR_VAR 0 4
81500: PUSH
81501: LD_VAR 0 2
81505: PPUSH
81506: CALL_OW 250
81510: ST_TO_ADDR
// y := GetY ( building ) ;
81511: LD_ADDR_VAR 0 6
81515: PUSH
81516: LD_VAR 0 2
81520: PPUSH
81521: CALL_OW 251
81525: ST_TO_ADDR
// d := GetDir ( building ) ;
81526: LD_ADDR_VAR 0 8
81530: PUSH
81531: LD_VAR 0 2
81535: PPUSH
81536: CALL_OW 254
81540: ST_TO_ADDR
// r := 4 ;
81541: LD_ADDR_VAR 0 9
81545: PUSH
81546: LD_INT 4
81548: ST_TO_ADDR
// for i := 1 to 5 do
81549: LD_ADDR_VAR 0 10
81553: PUSH
81554: DOUBLE
81555: LD_INT 1
81557: DEC
81558: ST_TO_ADDR
81559: LD_INT 5
81561: PUSH
81562: FOR_TO
81563: IFFALSE 81722
// begin _x := ShiftX ( x , d , r + i ) ;
81565: LD_ADDR_VAR 0 5
81569: PUSH
81570: LD_VAR 0 4
81574: PPUSH
81575: LD_VAR 0 8
81579: PPUSH
81580: LD_VAR 0 9
81584: PUSH
81585: LD_VAR 0 10
81589: PLUS
81590: PPUSH
81591: CALL_OW 272
81595: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
81596: LD_ADDR_VAR 0 7
81600: PUSH
81601: LD_VAR 0 6
81605: PPUSH
81606: LD_VAR 0 8
81610: PPUSH
81611: LD_VAR 0 9
81615: PUSH
81616: LD_VAR 0 10
81620: PLUS
81621: PPUSH
81622: CALL_OW 273
81626: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
81627: LD_VAR 0 5
81631: PPUSH
81632: LD_VAR 0 7
81636: PPUSH
81637: CALL_OW 488
81641: IFFALSE 81676
81643: PUSH
81644: LD_VAR 0 5
81648: PPUSH
81649: LD_VAR 0 7
81653: PPUSH
81654: CALL_OW 428
81658: PPUSH
81659: CALL_OW 247
81663: PUSH
81664: LD_INT 3
81666: PUSH
81667: LD_INT 2
81669: PUSH
81670: EMPTY
81671: LIST
81672: LIST
81673: IN
81674: NOT
81675: AND
81676: IFFALSE 81720
// begin ComMoveXY ( unit , _x , _y ) ;
81678: LD_VAR 0 1
81682: PPUSH
81683: LD_VAR 0 5
81687: PPUSH
81688: LD_VAR 0 7
81692: PPUSH
81693: CALL_OW 111
// result := [ _x , _y ] ;
81697: LD_ADDR_VAR 0 3
81701: PUSH
81702: LD_VAR 0 5
81706: PUSH
81707: LD_VAR 0 7
81711: PUSH
81712: EMPTY
81713: LIST
81714: LIST
81715: ST_TO_ADDR
// exit ;
81716: POP
81717: POP
81718: GO 81724
// end ; end ;
81720: GO 81562
81722: POP
81723: POP
// end ;
81724: LD_VAR 0 3
81728: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
81729: LD_INT 0
81731: PPUSH
81732: PPUSH
81733: PPUSH
// result := 0 ;
81734: LD_ADDR_VAR 0 3
81738: PUSH
81739: LD_INT 0
81741: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
81742: LD_VAR 0 1
81746: PUSH
81747: LD_INT 0
81749: LESS
81750: IFTRUE 81762
81752: PUSH
81753: LD_VAR 0 1
81757: PUSH
81758: LD_INT 8
81760: GREATER
81761: OR
81762: IFTRUE 81774
81764: PUSH
81765: LD_VAR 0 2
81769: PUSH
81770: LD_INT 0
81772: LESS
81773: OR
81774: IFTRUE 81786
81776: PUSH
81777: LD_VAR 0 2
81781: PUSH
81782: LD_INT 8
81784: GREATER
81785: OR
81786: IFFALSE 81790
// exit ;
81788: GO 81865
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
81790: LD_ADDR_VAR 0 4
81794: PUSH
81795: LD_INT 22
81797: PUSH
81798: LD_VAR 0 2
81802: PUSH
81803: EMPTY
81804: LIST
81805: LIST
81806: PPUSH
81807: CALL_OW 69
81811: PUSH
81812: FOR_IN
81813: IFFALSE 81863
// begin un := UnitShoot ( i ) ;
81815: LD_ADDR_VAR 0 5
81819: PUSH
81820: LD_VAR 0 4
81824: PPUSH
81825: CALL_OW 504
81829: ST_TO_ADDR
// if GetSide ( un ) = side1 then
81830: LD_VAR 0 5
81834: PPUSH
81835: CALL_OW 255
81839: PUSH
81840: LD_VAR 0 1
81844: EQUAL
81845: IFFALSE 81861
// begin result := un ;
81847: LD_ADDR_VAR 0 3
81851: PUSH
81852: LD_VAR 0 5
81856: ST_TO_ADDR
// exit ;
81857: POP
81858: POP
81859: GO 81865
// end ; end ;
81861: GO 81812
81863: POP
81864: POP
// end ;
81865: LD_VAR 0 3
81869: RET
// export function GetCargoBay ( units ) ; begin
81870: LD_INT 0
81872: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
81873: LD_ADDR_VAR 0 2
81877: PUSH
81878: LD_VAR 0 1
81882: PPUSH
81883: LD_INT 2
81885: PUSH
81886: LD_INT 34
81888: PUSH
81889: LD_INT 12
81891: PUSH
81892: EMPTY
81893: LIST
81894: LIST
81895: PUSH
81896: LD_INT 34
81898: PUSH
81899: LD_INT 51
81901: PUSH
81902: EMPTY
81903: LIST
81904: LIST
81905: PUSH
81906: LD_INT 34
81908: PUSH
81909: LD_INT 32
81911: PUSH
81912: EMPTY
81913: LIST
81914: LIST
81915: PUSH
81916: LD_INT 34
81918: PUSH
81919: LD_INT 89
81921: PUSH
81922: EMPTY
81923: LIST
81924: LIST
81925: PUSH
81926: EMPTY
81927: LIST
81928: LIST
81929: LIST
81930: LIST
81931: LIST
81932: PPUSH
81933: CALL_OW 72
81937: ST_TO_ADDR
// end ;
81938: LD_VAR 0 2
81942: RET
// export function Negate ( value ) ; begin
81943: LD_INT 0
81945: PPUSH
// result := not value ;
81946: LD_ADDR_VAR 0 2
81950: PUSH
81951: LD_VAR 0 1
81955: NOT
81956: ST_TO_ADDR
// end ;
81957: LD_VAR 0 2
81961: RET
// export function Inc ( value ) ; begin
81962: LD_INT 0
81964: PPUSH
// result := value + 1 ;
81965: LD_ADDR_VAR 0 2
81969: PUSH
81970: LD_VAR 0 1
81974: PUSH
81975: LD_INT 1
81977: PLUS
81978: ST_TO_ADDR
// end ;
81979: LD_VAR 0 2
81983: RET
// export function Dec ( value ) ; begin
81984: LD_INT 0
81986: PPUSH
// result := value - 1 ;
81987: LD_ADDR_VAR 0 2
81991: PUSH
81992: LD_VAR 0 1
81996: PUSH
81997: LD_INT 1
81999: MINUS
82000: ST_TO_ADDR
// end ;
82001: LD_VAR 0 2
82005: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
82006: LD_INT 0
82008: PPUSH
82009: PPUSH
82010: PPUSH
82011: PPUSH
82012: PPUSH
82013: PPUSH
82014: PPUSH
82015: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
82016: LD_VAR 0 1
82020: PPUSH
82021: LD_VAR 0 2
82025: PPUSH
82026: CALL_OW 488
82030: NOT
82031: IFTRUE 82050
82033: PUSH
82034: LD_VAR 0 3
82038: PPUSH
82039: LD_VAR 0 4
82043: PPUSH
82044: CALL_OW 488
82048: NOT
82049: OR
82050: IFFALSE 82063
// begin result := - 1 ;
82052: LD_ADDR_VAR 0 5
82056: PUSH
82057: LD_INT 1
82059: NEG
82060: ST_TO_ADDR
// exit ;
82061: GO 82298
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
82063: LD_ADDR_VAR 0 12
82067: PUSH
82068: LD_VAR 0 1
82072: PPUSH
82073: LD_VAR 0 2
82077: PPUSH
82078: LD_VAR 0 3
82082: PPUSH
82083: LD_VAR 0 4
82087: PPUSH
82088: CALL 81134 0 4
82092: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
82093: LD_ADDR_VAR 0 11
82097: PUSH
82098: LD_VAR 0 1
82102: PPUSH
82103: LD_VAR 0 2
82107: PPUSH
82108: LD_VAR 0 12
82112: PUSH
82113: LD_INT 1
82115: ARRAY
82116: PPUSH
82117: LD_VAR 0 12
82121: PUSH
82122: LD_INT 2
82124: ARRAY
82125: PPUSH
82126: CALL_OW 298
82130: ST_TO_ADDR
// distance := 9999 ;
82131: LD_ADDR_VAR 0 10
82135: PUSH
82136: LD_INT 9999
82138: ST_TO_ADDR
// for i := 0 to 5 do
82139: LD_ADDR_VAR 0 6
82143: PUSH
82144: DOUBLE
82145: LD_INT 0
82147: DEC
82148: ST_TO_ADDR
82149: LD_INT 5
82151: PUSH
82152: FOR_TO
82153: IFFALSE 82296
// begin _x := ShiftX ( x1 , i , centerDist ) ;
82155: LD_ADDR_VAR 0 7
82159: PUSH
82160: LD_VAR 0 1
82164: PPUSH
82165: LD_VAR 0 6
82169: PPUSH
82170: LD_VAR 0 11
82174: PPUSH
82175: CALL_OW 272
82179: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
82180: LD_ADDR_VAR 0 8
82184: PUSH
82185: LD_VAR 0 2
82189: PPUSH
82190: LD_VAR 0 6
82194: PPUSH
82195: LD_VAR 0 11
82199: PPUSH
82200: CALL_OW 273
82204: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
82205: LD_VAR 0 7
82209: PPUSH
82210: LD_VAR 0 8
82214: PPUSH
82215: CALL_OW 488
82219: NOT
82220: IFFALSE 82224
// continue ;
82222: GO 82152
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
82224: LD_ADDR_VAR 0 9
82228: PUSH
82229: LD_VAR 0 12
82233: PUSH
82234: LD_INT 1
82236: ARRAY
82237: PPUSH
82238: LD_VAR 0 12
82242: PUSH
82243: LD_INT 2
82245: ARRAY
82246: PPUSH
82247: LD_VAR 0 7
82251: PPUSH
82252: LD_VAR 0 8
82256: PPUSH
82257: CALL_OW 298
82261: ST_TO_ADDR
// if tmp < distance then
82262: LD_VAR 0 9
82266: PUSH
82267: LD_VAR 0 10
82271: LESS
82272: IFFALSE 82294
// begin result := i ;
82274: LD_ADDR_VAR 0 5
82278: PUSH
82279: LD_VAR 0 6
82283: ST_TO_ADDR
// distance := tmp ;
82284: LD_ADDR_VAR 0 10
82288: PUSH
82289: LD_VAR 0 9
82293: ST_TO_ADDR
// end ; end ;
82294: GO 82152
82296: POP
82297: POP
// end ;
82298: LD_VAR 0 5
82302: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
82303: LD_INT 0
82305: PPUSH
82306: PPUSH
// if not driver or not IsInUnit ( driver ) then
82307: LD_VAR 0 1
82311: NOT
82312: IFTRUE 82326
82314: PUSH
82315: LD_VAR 0 1
82319: PPUSH
82320: CALL_OW 310
82324: NOT
82325: OR
82326: IFFALSE 82330
// exit ;
82328: GO 82420
// vehicle := IsInUnit ( driver ) ;
82330: LD_ADDR_VAR 0 3
82334: PUSH
82335: LD_VAR 0 1
82339: PPUSH
82340: CALL_OW 310
82344: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
82345: LD_VAR 0 1
82349: PPUSH
82350: LD_STRING \
82352: PUSH
82353: LD_INT 0
82355: PUSH
82356: LD_INT 0
82358: PUSH
82359: LD_INT 0
82361: PUSH
82362: LD_INT 0
82364: PUSH
82365: LD_INT 0
82367: PUSH
82368: LD_INT 0
82370: PUSH
82371: EMPTY
82372: LIST
82373: LIST
82374: LIST
82375: LIST
82376: LIST
82377: LIST
82378: LIST
82379: PUSH
82380: LD_STRING E
82382: PUSH
82383: LD_INT 0
82385: PUSH
82386: LD_INT 0
82388: PUSH
82389: LD_VAR 0 3
82393: PUSH
82394: LD_INT 0
82396: PUSH
82397: LD_INT 0
82399: PUSH
82400: LD_INT 0
82402: PUSH
82403: EMPTY
82404: LIST
82405: LIST
82406: LIST
82407: LIST
82408: LIST
82409: LIST
82410: LIST
82411: PUSH
82412: EMPTY
82413: LIST
82414: LIST
82415: PPUSH
82416: CALL_OW 446
// end ;
82420: LD_VAR 0 2
82424: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
82425: LD_INT 0
82427: PPUSH
82428: PPUSH
// if not driver or not IsInUnit ( driver ) then
82429: LD_VAR 0 1
82433: NOT
82434: IFTRUE 82448
82436: PUSH
82437: LD_VAR 0 1
82441: PPUSH
82442: CALL_OW 310
82446: NOT
82447: OR
82448: IFFALSE 82452
// exit ;
82450: GO 82542
// vehicle := IsInUnit ( driver ) ;
82452: LD_ADDR_VAR 0 3
82456: PUSH
82457: LD_VAR 0 1
82461: PPUSH
82462: CALL_OW 310
82466: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
82467: LD_VAR 0 1
82471: PPUSH
82472: LD_STRING \
82474: PUSH
82475: LD_INT 0
82477: PUSH
82478: LD_INT 0
82480: PUSH
82481: LD_INT 0
82483: PUSH
82484: LD_INT 0
82486: PUSH
82487: LD_INT 0
82489: PUSH
82490: LD_INT 0
82492: PUSH
82493: EMPTY
82494: LIST
82495: LIST
82496: LIST
82497: LIST
82498: LIST
82499: LIST
82500: LIST
82501: PUSH
82502: LD_STRING E
82504: PUSH
82505: LD_INT 0
82507: PUSH
82508: LD_INT 0
82510: PUSH
82511: LD_VAR 0 3
82515: PUSH
82516: LD_INT 0
82518: PUSH
82519: LD_INT 0
82521: PUSH
82522: LD_INT 0
82524: PUSH
82525: EMPTY
82526: LIST
82527: LIST
82528: LIST
82529: LIST
82530: LIST
82531: LIST
82532: LIST
82533: PUSH
82534: EMPTY
82535: LIST
82536: LIST
82537: PPUSH
82538: CALL_OW 447
// end ;
82542: LD_VAR 0 2
82546: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
82547: LD_INT 0
82549: PPUSH
82550: PPUSH
82551: PPUSH
// tmp := [ ] ;
82552: LD_ADDR_VAR 0 5
82556: PUSH
82557: EMPTY
82558: ST_TO_ADDR
// for i in units do
82559: LD_ADDR_VAR 0 4
82563: PUSH
82564: LD_VAR 0 1
82568: PUSH
82569: FOR_IN
82570: IFFALSE 82608
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
82572: LD_ADDR_VAR 0 5
82576: PUSH
82577: LD_VAR 0 5
82581: PPUSH
82582: LD_VAR 0 5
82586: PUSH
82587: LD_INT 1
82589: PLUS
82590: PPUSH
82591: LD_VAR 0 4
82595: PPUSH
82596: CALL_OW 256
82600: PPUSH
82601: CALL_OW 2
82605: ST_TO_ADDR
82606: GO 82569
82608: POP
82609: POP
// if not tmp then
82610: LD_VAR 0 5
82614: NOT
82615: IFFALSE 82619
// exit ;
82617: GO 82667
// if asc then
82619: LD_VAR 0 2
82623: IFFALSE 82647
// result := SortListByListAsc ( units , tmp ) else
82625: LD_ADDR_VAR 0 3
82629: PUSH
82630: LD_VAR 0 1
82634: PPUSH
82635: LD_VAR 0 5
82639: PPUSH
82640: CALL_OW 76
82644: ST_TO_ADDR
82645: GO 82667
// result := SortListByListDesc ( units , tmp ) ;
82647: LD_ADDR_VAR 0 3
82651: PUSH
82652: LD_VAR 0 1
82656: PPUSH
82657: LD_VAR 0 5
82661: PPUSH
82662: CALL_OW 77
82666: ST_TO_ADDR
// end ;
82667: LD_VAR 0 3
82671: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
82672: LD_INT 0
82674: PPUSH
82675: PPUSH
// task := GetTaskList ( mech ) ;
82676: LD_ADDR_VAR 0 4
82680: PUSH
82681: LD_VAR 0 1
82685: PPUSH
82686: CALL_OW 437
82690: ST_TO_ADDR
// if not task then
82691: LD_VAR 0 4
82695: NOT
82696: IFFALSE 82700
// exit ;
82698: GO 82744
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
82700: LD_ADDR_VAR 0 3
82704: PUSH
82705: LD_VAR 0 4
82709: PUSH
82710: LD_INT 1
82712: ARRAY
82713: PUSH
82714: LD_INT 1
82716: ARRAY
82717: PUSH
82718: LD_STRING r
82720: EQUAL
82721: IFFALSE 82743
82723: PUSH
82724: LD_VAR 0 4
82728: PUSH
82729: LD_INT 1
82731: ARRAY
82732: PUSH
82733: LD_INT 4
82735: ARRAY
82736: PUSH
82737: LD_VAR 0 2
82741: EQUAL
82742: AND
82743: ST_TO_ADDR
// end ;
82744: LD_VAR 0 3
82748: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
82749: LD_INT 0
82751: PPUSH
// SetDir ( unit , d ) ;
82752: LD_VAR 0 1
82756: PPUSH
82757: LD_VAR 0 4
82761: PPUSH
82762: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
82766: LD_ADDR_VAR 0 6
82770: PUSH
82771: LD_VAR 0 1
82775: PPUSH
82776: LD_VAR 0 2
82780: PPUSH
82781: LD_VAR 0 3
82785: PPUSH
82786: LD_VAR 0 5
82790: PPUSH
82791: CALL_OW 48
82795: ST_TO_ADDR
// end ;
82796: LD_VAR 0 6
82800: RET
// export function ToNaturalNumber ( number ) ; begin
82801: LD_INT 0
82803: PPUSH
// result := number div 1 ;
82804: LD_ADDR_VAR 0 2
82808: PUSH
82809: LD_VAR 0 1
82813: PUSH
82814: LD_INT 1
82816: DIV
82817: ST_TO_ADDR
// if number < 0 then
82818: LD_VAR 0 1
82822: PUSH
82823: LD_INT 0
82825: LESS
82826: IFFALSE 82836
// result := 0 ;
82828: LD_ADDR_VAR 0 2
82832: PUSH
82833: LD_INT 0
82835: ST_TO_ADDR
// end ;
82836: LD_VAR 0 2
82840: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
82841: LD_INT 0
82843: PPUSH
82844: PPUSH
82845: PPUSH
// if not buildings then
82846: LD_VAR 0 1
82850: NOT
82851: IFFALSE 82855
// exit ;
82853: GO 82970
// tmp := [ ] ;
82855: LD_ADDR_VAR 0 5
82859: PUSH
82860: EMPTY
82861: ST_TO_ADDR
// for b in buildings do
82862: LD_ADDR_VAR 0 4
82866: PUSH
82867: LD_VAR 0 1
82871: PUSH
82872: FOR_IN
82873: IFFALSE 82911
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
82875: LD_ADDR_VAR 0 5
82879: PUSH
82880: LD_VAR 0 5
82884: PPUSH
82885: LD_VAR 0 5
82889: PUSH
82890: LD_INT 1
82892: PLUS
82893: PPUSH
82894: LD_VAR 0 4
82898: PPUSH
82899: CALL_OW 266
82903: PPUSH
82904: CALL_OW 1
82908: ST_TO_ADDR
82909: GO 82872
82911: POP
82912: POP
// if not tmp then
82913: LD_VAR 0 5
82917: NOT
82918: IFFALSE 82922
// exit ;
82920: GO 82970
// if asc then
82922: LD_VAR 0 2
82926: IFFALSE 82950
// result := SortListByListAsc ( buildings , tmp ) else
82928: LD_ADDR_VAR 0 3
82932: PUSH
82933: LD_VAR 0 1
82937: PPUSH
82938: LD_VAR 0 5
82942: PPUSH
82943: CALL_OW 76
82947: ST_TO_ADDR
82948: GO 82970
// result := SortListByListDesc ( buildings , tmp ) ;
82950: LD_ADDR_VAR 0 3
82954: PUSH
82955: LD_VAR 0 1
82959: PPUSH
82960: LD_VAR 0 5
82964: PPUSH
82965: CALL_OW 77
82969: ST_TO_ADDR
// end ;
82970: LD_VAR 0 3
82974: RET
// export function SortByClass ( units , class ) ; var un ; begin
82975: LD_INT 0
82977: PPUSH
82978: PPUSH
// if not units or not class then
82979: LD_VAR 0 1
82983: NOT
82984: IFTRUE 82993
82986: PUSH
82987: LD_VAR 0 2
82991: NOT
82992: OR
82993: IFFALSE 82997
// exit ;
82995: GO 83092
// result := [ ] ;
82997: LD_ADDR_VAR 0 3
83001: PUSH
83002: EMPTY
83003: ST_TO_ADDR
// for un in units do
83004: LD_ADDR_VAR 0 4
83008: PUSH
83009: LD_VAR 0 1
83013: PUSH
83014: FOR_IN
83015: IFFALSE 83090
// if GetClass ( un ) = class then
83017: LD_VAR 0 4
83021: PPUSH
83022: CALL_OW 257
83026: PUSH
83027: LD_VAR 0 2
83031: EQUAL
83032: IFFALSE 83059
// result := Insert ( result , 1 , un ) else
83034: LD_ADDR_VAR 0 3
83038: PUSH
83039: LD_VAR 0 3
83043: PPUSH
83044: LD_INT 1
83046: PPUSH
83047: LD_VAR 0 4
83051: PPUSH
83052: CALL_OW 2
83056: ST_TO_ADDR
83057: GO 83088
// result := Replace ( result , result + 1 , un ) ;
83059: LD_ADDR_VAR 0 3
83063: PUSH
83064: LD_VAR 0 3
83068: PPUSH
83069: LD_VAR 0 3
83073: PUSH
83074: LD_INT 1
83076: PLUS
83077: PPUSH
83078: LD_VAR 0 4
83082: PPUSH
83083: CALL_OW 1
83087: ST_TO_ADDR
83088: GO 83014
83090: POP
83091: POP
// end ;
83092: LD_VAR 0 3
83096: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
83097: LD_INT 0
83099: PPUSH
83100: PPUSH
83101: PPUSH
83102: PPUSH
83103: PPUSH
83104: PPUSH
83105: PPUSH
// result := [ ] ;
83106: LD_ADDR_VAR 0 4
83110: PUSH
83111: EMPTY
83112: ST_TO_ADDR
// if x - r < 0 then
83113: LD_VAR 0 1
83117: PUSH
83118: LD_VAR 0 3
83122: MINUS
83123: PUSH
83124: LD_INT 0
83126: LESS
83127: IFFALSE 83139
// min_x := 0 else
83129: LD_ADDR_VAR 0 8
83133: PUSH
83134: LD_INT 0
83136: ST_TO_ADDR
83137: GO 83155
// min_x := x - r ;
83139: LD_ADDR_VAR 0 8
83143: PUSH
83144: LD_VAR 0 1
83148: PUSH
83149: LD_VAR 0 3
83153: MINUS
83154: ST_TO_ADDR
// if y - r < 0 then
83155: LD_VAR 0 2
83159: PUSH
83160: LD_VAR 0 3
83164: MINUS
83165: PUSH
83166: LD_INT 0
83168: LESS
83169: IFFALSE 83181
// min_y := 0 else
83171: LD_ADDR_VAR 0 7
83175: PUSH
83176: LD_INT 0
83178: ST_TO_ADDR
83179: GO 83197
// min_y := y - r ;
83181: LD_ADDR_VAR 0 7
83185: PUSH
83186: LD_VAR 0 2
83190: PUSH
83191: LD_VAR 0 3
83195: MINUS
83196: ST_TO_ADDR
// max_x := x + r ;
83197: LD_ADDR_VAR 0 9
83201: PUSH
83202: LD_VAR 0 1
83206: PUSH
83207: LD_VAR 0 3
83211: PLUS
83212: ST_TO_ADDR
// max_y := y + r ;
83213: LD_ADDR_VAR 0 10
83217: PUSH
83218: LD_VAR 0 2
83222: PUSH
83223: LD_VAR 0 3
83227: PLUS
83228: ST_TO_ADDR
// for _x = min_x to max_x do
83229: LD_ADDR_VAR 0 5
83233: PUSH
83234: DOUBLE
83235: LD_VAR 0 8
83239: DEC
83240: ST_TO_ADDR
83241: LD_VAR 0 9
83245: PUSH
83246: FOR_TO
83247: IFFALSE 83348
// for _y = min_y to max_y do
83249: LD_ADDR_VAR 0 6
83253: PUSH
83254: DOUBLE
83255: LD_VAR 0 7
83259: DEC
83260: ST_TO_ADDR
83261: LD_VAR 0 10
83265: PUSH
83266: FOR_TO
83267: IFFALSE 83344
// begin if not ValidHex ( _x , _y ) then
83269: LD_VAR 0 5
83273: PPUSH
83274: LD_VAR 0 6
83278: PPUSH
83279: CALL_OW 488
83283: NOT
83284: IFFALSE 83288
// continue ;
83286: GO 83266
// if GetResourceTypeXY ( _x , _y ) then
83288: LD_VAR 0 5
83292: PPUSH
83293: LD_VAR 0 6
83297: PPUSH
83298: CALL_OW 283
83302: IFFALSE 83342
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
83304: LD_ADDR_VAR 0 4
83308: PUSH
83309: LD_VAR 0 4
83313: PPUSH
83314: LD_VAR 0 4
83318: PUSH
83319: LD_INT 1
83321: PLUS
83322: PPUSH
83323: LD_VAR 0 5
83327: PUSH
83328: LD_VAR 0 6
83332: PUSH
83333: EMPTY
83334: LIST
83335: LIST
83336: PPUSH
83337: CALL_OW 1
83341: ST_TO_ADDR
// end ;
83342: GO 83266
83344: POP
83345: POP
83346: GO 83246
83348: POP
83349: POP
// end ;
83350: LD_VAR 0 4
83354: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
83355: LD_INT 0
83357: PPUSH
83358: PPUSH
83359: PPUSH
83360: PPUSH
83361: PPUSH
83362: PPUSH
83363: PPUSH
83364: PPUSH
// if not units then
83365: LD_VAR 0 1
83369: NOT
83370: IFFALSE 83374
// exit ;
83372: GO 83906
// result := UnitFilter ( units , [ f_ok ] ) ;
83374: LD_ADDR_VAR 0 3
83378: PUSH
83379: LD_VAR 0 1
83383: PPUSH
83384: LD_INT 50
83386: PUSH
83387: EMPTY
83388: LIST
83389: PPUSH
83390: CALL_OW 72
83394: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
83395: LD_ADDR_VAR 0 8
83399: PUSH
83400: LD_VAR 0 1
83404: PUSH
83405: LD_INT 1
83407: ARRAY
83408: PPUSH
83409: CALL_OW 255
83413: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
83414: LD_ADDR_VAR 0 10
83418: PUSH
83419: LD_INT 29
83421: PUSH
83422: LD_INT 91
83424: PUSH
83425: LD_INT 49
83427: PUSH
83428: EMPTY
83429: LIST
83430: LIST
83431: LIST
83432: ST_TO_ADDR
// if not result then
83433: LD_VAR 0 3
83437: NOT
83438: IFFALSE 83442
// exit ;
83440: GO 83906
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
83442: LD_ADDR_VAR 0 5
83446: PUSH
83447: LD_INT 81
83449: PUSH
83450: LD_VAR 0 8
83454: PUSH
83455: EMPTY
83456: LIST
83457: LIST
83458: PPUSH
83459: CALL_OW 69
83463: ST_TO_ADDR
// for i in result do
83464: LD_ADDR_VAR 0 4
83468: PUSH
83469: LD_VAR 0 3
83473: PUSH
83474: FOR_IN
83475: IFFALSE 83904
// begin tag := GetTag ( i ) + 1 ;
83477: LD_ADDR_VAR 0 9
83481: PUSH
83482: LD_VAR 0 4
83486: PPUSH
83487: CALL_OW 110
83491: PUSH
83492: LD_INT 1
83494: PLUS
83495: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
83496: LD_ADDR_VAR 0 7
83500: PUSH
83501: LD_VAR 0 4
83505: PPUSH
83506: CALL_OW 250
83510: PPUSH
83511: LD_VAR 0 4
83515: PPUSH
83516: CALL_OW 251
83520: PPUSH
83521: LD_INT 4
83523: PPUSH
83524: CALL 83097 0 3
83528: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
83529: LD_VAR 0 4
83533: PPUSH
83534: CALL_OW 247
83538: PUSH
83539: LD_INT 2
83541: EQUAL
83542: IFFALSE 83554
83544: PUSH
83545: LD_VAR 0 7
83549: PUSH
83550: LD_INT 2
83552: GREATER
83553: AND
83554: IFFALSE 83574
83556: PUSH
83557: LD_VAR 0 4
83561: PPUSH
83562: CALL_OW 264
83566: PUSH
83567: LD_VAR 0 10
83571: IN
83572: NOT
83573: AND
83574: IFFALSE 83613
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
83576: LD_VAR 0 4
83580: PPUSH
83581: LD_VAR 0 7
83585: PUSH
83586: LD_INT 1
83588: ARRAY
83589: PUSH
83590: LD_INT 1
83592: ARRAY
83593: PPUSH
83594: LD_VAR 0 7
83598: PUSH
83599: LD_INT 1
83601: ARRAY
83602: PUSH
83603: LD_INT 2
83605: ARRAY
83606: PPUSH
83607: CALL_OW 116
83611: GO 83902
// if path > tag then
83613: LD_VAR 0 2
83617: PUSH
83618: LD_VAR 0 9
83622: GREATER
83623: IFFALSE 83831
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
83625: LD_ADDR_VAR 0 6
83629: PUSH
83630: LD_VAR 0 5
83634: PPUSH
83635: LD_INT 91
83637: PUSH
83638: LD_VAR 0 4
83642: PUSH
83643: LD_INT 8
83645: PUSH
83646: EMPTY
83647: LIST
83648: LIST
83649: LIST
83650: PPUSH
83651: CALL_OW 72
83655: ST_TO_ADDR
// if nearEnemy then
83656: LD_VAR 0 6
83660: IFFALSE 83729
// begin if GetWeapon ( i ) = ru_time_lapser then
83662: LD_VAR 0 4
83666: PPUSH
83667: CALL_OW 264
83671: PUSH
83672: LD_INT 49
83674: EQUAL
83675: IFFALSE 83703
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
83677: LD_VAR 0 4
83681: PPUSH
83682: LD_VAR 0 6
83686: PPUSH
83687: LD_VAR 0 4
83691: PPUSH
83692: CALL_OW 74
83696: PPUSH
83697: CALL_OW 112
83701: GO 83727
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
83703: LD_VAR 0 4
83707: PPUSH
83708: LD_VAR 0 6
83712: PPUSH
83713: LD_VAR 0 4
83717: PPUSH
83718: CALL_OW 74
83722: PPUSH
83723: CALL 84987 0 2
// end else
83727: GO 83829
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
83729: LD_VAR 0 4
83733: PPUSH
83734: LD_VAR 0 2
83738: PUSH
83739: LD_VAR 0 9
83743: ARRAY
83744: PUSH
83745: LD_INT 1
83747: ARRAY
83748: PPUSH
83749: LD_VAR 0 2
83753: PUSH
83754: LD_VAR 0 9
83758: ARRAY
83759: PUSH
83760: LD_INT 2
83762: ARRAY
83763: PPUSH
83764: CALL_OW 297
83768: PUSH
83769: LD_INT 6
83771: GREATER
83772: IFFALSE 83815
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
83774: LD_VAR 0 4
83778: PPUSH
83779: LD_VAR 0 2
83783: PUSH
83784: LD_VAR 0 9
83788: ARRAY
83789: PUSH
83790: LD_INT 1
83792: ARRAY
83793: PPUSH
83794: LD_VAR 0 2
83798: PUSH
83799: LD_VAR 0 9
83803: ARRAY
83804: PUSH
83805: LD_INT 2
83807: ARRAY
83808: PPUSH
83809: CALL_OW 114
83813: GO 83829
// SetTag ( i , tag ) ;
83815: LD_VAR 0 4
83819: PPUSH
83820: LD_VAR 0 9
83824: PPUSH
83825: CALL_OW 109
// end else
83829: GO 83902
// if enemy then
83831: LD_VAR 0 5
83835: IFFALSE 83902
// begin if GetWeapon ( i ) = ru_time_lapser then
83837: LD_VAR 0 4
83841: PPUSH
83842: CALL_OW 264
83846: PUSH
83847: LD_INT 49
83849: EQUAL
83850: IFFALSE 83878
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
83852: LD_VAR 0 4
83856: PPUSH
83857: LD_VAR 0 5
83861: PPUSH
83862: LD_VAR 0 4
83866: PPUSH
83867: CALL_OW 74
83871: PPUSH
83872: CALL_OW 112
83876: GO 83902
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
83878: LD_VAR 0 4
83882: PPUSH
83883: LD_VAR 0 5
83887: PPUSH
83888: LD_VAR 0 4
83892: PPUSH
83893: CALL_OW 74
83897: PPUSH
83898: CALL 84987 0 2
// end ; end ;
83902: GO 83474
83904: POP
83905: POP
// end ;
83906: LD_VAR 0 3
83910: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
83911: LD_INT 0
83913: PPUSH
83914: PPUSH
83915: PPUSH
// if not unit or IsInUnit ( unit ) then
83916: LD_VAR 0 1
83920: NOT
83921: IFTRUE 83934
83923: PUSH
83924: LD_VAR 0 1
83928: PPUSH
83929: CALL_OW 310
83933: OR
83934: IFFALSE 83938
// exit ;
83936: GO 84029
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
83938: LD_ADDR_VAR 0 4
83942: PUSH
83943: LD_VAR 0 1
83947: PPUSH
83948: CALL_OW 250
83952: PPUSH
83953: LD_VAR 0 2
83957: PPUSH
83958: LD_INT 1
83960: PPUSH
83961: CALL_OW 272
83965: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
83966: LD_ADDR_VAR 0 5
83970: PUSH
83971: LD_VAR 0 1
83975: PPUSH
83976: CALL_OW 251
83980: PPUSH
83981: LD_VAR 0 2
83985: PPUSH
83986: LD_INT 1
83988: PPUSH
83989: CALL_OW 273
83993: ST_TO_ADDR
// if ValidHex ( x , y ) then
83994: LD_VAR 0 4
83998: PPUSH
83999: LD_VAR 0 5
84003: PPUSH
84004: CALL_OW 488
84008: IFFALSE 84029
// ComTurnXY ( unit , x , y ) ;
84010: LD_VAR 0 1
84014: PPUSH
84015: LD_VAR 0 4
84019: PPUSH
84020: LD_VAR 0 5
84024: PPUSH
84025: CALL_OW 118
// end ;
84029: LD_VAR 0 3
84033: RET
// export function SeeUnits ( side , units ) ; var i ; begin
84034: LD_INT 0
84036: PPUSH
84037: PPUSH
// result := false ;
84038: LD_ADDR_VAR 0 3
84042: PUSH
84043: LD_INT 0
84045: ST_TO_ADDR
// if not units then
84046: LD_VAR 0 2
84050: NOT
84051: IFFALSE 84055
// exit ;
84053: GO 84100
// for i in units do
84055: LD_ADDR_VAR 0 4
84059: PUSH
84060: LD_VAR 0 2
84064: PUSH
84065: FOR_IN
84066: IFFALSE 84098
// if See ( side , i ) then
84068: LD_VAR 0 1
84072: PPUSH
84073: LD_VAR 0 4
84077: PPUSH
84078: CALL_OW 292
84082: IFFALSE 84096
// begin result := true ;
84084: LD_ADDR_VAR 0 3
84088: PUSH
84089: LD_INT 1
84091: ST_TO_ADDR
// exit ;
84092: POP
84093: POP
84094: GO 84100
// end ;
84096: GO 84065
84098: POP
84099: POP
// end ;
84100: LD_VAR 0 3
84104: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
84105: LD_INT 0
84107: PPUSH
84108: PPUSH
84109: PPUSH
84110: PPUSH
// if not unit or not points then
84111: LD_VAR 0 1
84115: NOT
84116: IFTRUE 84125
84118: PUSH
84119: LD_VAR 0 2
84123: NOT
84124: OR
84125: IFFALSE 84129
// exit ;
84127: GO 84219
// dist := 99999 ;
84129: LD_ADDR_VAR 0 5
84133: PUSH
84134: LD_INT 99999
84136: ST_TO_ADDR
// for i in points do
84137: LD_ADDR_VAR 0 4
84141: PUSH
84142: LD_VAR 0 2
84146: PUSH
84147: FOR_IN
84148: IFFALSE 84217
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
84150: LD_ADDR_VAR 0 6
84154: PUSH
84155: LD_VAR 0 1
84159: PPUSH
84160: LD_VAR 0 4
84164: PUSH
84165: LD_INT 1
84167: ARRAY
84168: PPUSH
84169: LD_VAR 0 4
84173: PUSH
84174: LD_INT 2
84176: ARRAY
84177: PPUSH
84178: CALL_OW 297
84182: ST_TO_ADDR
// if tmpDist < dist then
84183: LD_VAR 0 6
84187: PUSH
84188: LD_VAR 0 5
84192: LESS
84193: IFFALSE 84215
// begin result := i ;
84195: LD_ADDR_VAR 0 3
84199: PUSH
84200: LD_VAR 0 4
84204: ST_TO_ADDR
// dist := tmpDist ;
84205: LD_ADDR_VAR 0 5
84209: PUSH
84210: LD_VAR 0 6
84214: ST_TO_ADDR
// end ; end ;
84215: GO 84147
84217: POP
84218: POP
// end ;
84219: LD_VAR 0 3
84223: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
84224: LD_INT 0
84226: PPUSH
// uc_side := side ;
84227: LD_ADDR_OWVAR 20
84231: PUSH
84232: LD_VAR 0 1
84236: ST_TO_ADDR
// uc_nation := 3 ;
84237: LD_ADDR_OWVAR 21
84241: PUSH
84242: LD_INT 3
84244: ST_TO_ADDR
// vc_chassis := 25 ;
84245: LD_ADDR_OWVAR 37
84249: PUSH
84250: LD_INT 25
84252: ST_TO_ADDR
// vc_engine := engine_siberite ;
84253: LD_ADDR_OWVAR 39
84257: PUSH
84258: LD_INT 3
84260: ST_TO_ADDR
// vc_control := control_computer ;
84261: LD_ADDR_OWVAR 38
84265: PUSH
84266: LD_INT 3
84268: ST_TO_ADDR
// vc_weapon := 59 ;
84269: LD_ADDR_OWVAR 40
84273: PUSH
84274: LD_INT 59
84276: ST_TO_ADDR
// result := CreateVehicle ;
84277: LD_ADDR_VAR 0 5
84281: PUSH
84282: CALL_OW 45
84286: ST_TO_ADDR
// SetDir ( result , d ) ;
84287: LD_VAR 0 5
84291: PPUSH
84292: LD_VAR 0 4
84296: PPUSH
84297: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
84301: LD_VAR 0 5
84305: PPUSH
84306: LD_VAR 0 2
84310: PPUSH
84311: LD_VAR 0 3
84315: PPUSH
84316: LD_INT 0
84318: PPUSH
84319: CALL_OW 48
// end ;
84323: LD_VAR 0 5
84327: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
84328: LD_INT 0
84330: PPUSH
84331: PPUSH
84332: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
84333: LD_ADDR_VAR 0 2
84337: PUSH
84338: LD_INT 0
84340: PUSH
84341: LD_INT 0
84343: PUSH
84344: LD_INT 0
84346: PUSH
84347: LD_INT 0
84349: PUSH
84350: EMPTY
84351: LIST
84352: LIST
84353: LIST
84354: LIST
84355: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
84356: LD_VAR 0 1
84360: NOT
84361: IFTRUE 84394
84363: PUSH
84364: LD_VAR 0 1
84368: PPUSH
84369: CALL_OW 264
84373: PUSH
84374: LD_INT 12
84376: PUSH
84377: LD_INT 51
84379: PUSH
84380: LD_INT 32
84382: PUSH
84383: LD_INT 89
84385: PUSH
84386: EMPTY
84387: LIST
84388: LIST
84389: LIST
84390: LIST
84391: IN
84392: NOT
84393: OR
84394: IFFALSE 84398
// exit ;
84396: GO 84496
// for i := 1 to 3 do
84398: LD_ADDR_VAR 0 3
84402: PUSH
84403: DOUBLE
84404: LD_INT 1
84406: DEC
84407: ST_TO_ADDR
84408: LD_INT 3
84410: PUSH
84411: FOR_TO
84412: IFFALSE 84494
// begin tmp := GetCargo ( cargo , i ) ;
84414: LD_ADDR_VAR 0 4
84418: PUSH
84419: LD_VAR 0 1
84423: PPUSH
84424: LD_VAR 0 3
84428: PPUSH
84429: CALL_OW 289
84433: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
84434: LD_ADDR_VAR 0 2
84438: PUSH
84439: LD_VAR 0 2
84443: PPUSH
84444: LD_VAR 0 3
84448: PPUSH
84449: LD_VAR 0 4
84453: PPUSH
84454: CALL_OW 1
84458: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
84459: LD_ADDR_VAR 0 2
84463: PUSH
84464: LD_VAR 0 2
84468: PPUSH
84469: LD_INT 4
84471: PPUSH
84472: LD_VAR 0 2
84476: PUSH
84477: LD_INT 4
84479: ARRAY
84480: PUSH
84481: LD_VAR 0 4
84485: PLUS
84486: PPUSH
84487: CALL_OW 1
84491: ST_TO_ADDR
// end ;
84492: GO 84411
84494: POP
84495: POP
// end ;
84496: LD_VAR 0 2
84500: RET
// export function Length ( array ) ; begin
84501: LD_INT 0
84503: PPUSH
// result := array + 0 ;
84504: LD_ADDR_VAR 0 2
84508: PUSH
84509: LD_VAR 0 1
84513: PUSH
84514: LD_INT 0
84516: PLUS
84517: ST_TO_ADDR
// end ;
84518: LD_VAR 0 2
84522: RET
// export function PrepareArray ( array ) ; begin
84523: LD_INT 0
84525: PPUSH
// result := array diff 0 ;
84526: LD_ADDR_VAR 0 2
84530: PUSH
84531: LD_VAR 0 1
84535: PUSH
84536: LD_INT 0
84538: DIFF
84539: ST_TO_ADDR
// if not result [ 1 ] then
84540: LD_VAR 0 2
84544: PUSH
84545: LD_INT 1
84547: ARRAY
84548: NOT
84549: IFFALSE 84569
// result := Delete ( result , 1 ) ;
84551: LD_ADDR_VAR 0 2
84555: PUSH
84556: LD_VAR 0 2
84560: PPUSH
84561: LD_INT 1
84563: PPUSH
84564: CALL_OW 3
84568: ST_TO_ADDR
// end ;
84569: LD_VAR 0 2
84573: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
84574: LD_INT 0
84576: PPUSH
84577: PPUSH
84578: PPUSH
84579: PPUSH
// sibRocketRange := 25 ;
84580: LD_ADDR_VAR 0 6
84584: PUSH
84585: LD_INT 25
84587: ST_TO_ADDR
// result := false ;
84588: LD_ADDR_VAR 0 4
84592: PUSH
84593: LD_INT 0
84595: ST_TO_ADDR
// for i := 0 to 5 do
84596: LD_ADDR_VAR 0 5
84600: PUSH
84601: DOUBLE
84602: LD_INT 0
84604: DEC
84605: ST_TO_ADDR
84606: LD_INT 5
84608: PUSH
84609: FOR_TO
84610: IFFALSE 84677
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
84612: LD_VAR 0 1
84616: PPUSH
84617: LD_VAR 0 5
84621: PPUSH
84622: LD_VAR 0 6
84626: PPUSH
84627: CALL_OW 272
84631: PPUSH
84632: LD_VAR 0 2
84636: PPUSH
84637: LD_VAR 0 5
84641: PPUSH
84642: LD_VAR 0 6
84646: PPUSH
84647: CALL_OW 273
84651: PPUSH
84652: LD_VAR 0 3
84656: PPUSH
84657: CALL_OW 309
84661: IFFALSE 84675
// begin result := true ;
84663: LD_ADDR_VAR 0 4
84667: PUSH
84668: LD_INT 1
84670: ST_TO_ADDR
// exit ;
84671: POP
84672: POP
84673: GO 84679
// end ;
84675: GO 84609
84677: POP
84678: POP
// end ;
84679: LD_VAR 0 4
84683: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
84684: LD_INT 0
84686: PPUSH
84687: PPUSH
84688: PPUSH
// if btype = b_depot then
84689: LD_VAR 0 2
84693: PUSH
84694: LD_INT 0
84696: EQUAL
84697: IFFALSE 84709
// begin result := true ;
84699: LD_ADDR_VAR 0 3
84703: PUSH
84704: LD_INT 1
84706: ST_TO_ADDR
// exit ;
84707: GO 84829
// end ; pom := GetBase ( depot ) ;
84709: LD_ADDR_VAR 0 4
84713: PUSH
84714: LD_VAR 0 1
84718: PPUSH
84719: CALL_OW 274
84723: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
84724: LD_ADDR_VAR 0 5
84728: PUSH
84729: LD_VAR 0 2
84733: PPUSH
84734: LD_VAR 0 1
84738: PPUSH
84739: CALL_OW 248
84743: PPUSH
84744: CALL_OW 450
84748: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
84749: LD_ADDR_VAR 0 3
84753: PUSH
84754: LD_VAR 0 4
84758: PPUSH
84759: LD_INT 1
84761: PPUSH
84762: CALL_OW 275
84766: PUSH
84767: LD_VAR 0 5
84771: PUSH
84772: LD_INT 1
84774: ARRAY
84775: GREATEREQUAL
84776: IFFALSE 84802
84778: PUSH
84779: LD_VAR 0 4
84783: PPUSH
84784: LD_INT 2
84786: PPUSH
84787: CALL_OW 275
84791: PUSH
84792: LD_VAR 0 5
84796: PUSH
84797: LD_INT 2
84799: ARRAY
84800: GREATEREQUAL
84801: AND
84802: IFFALSE 84828
84804: PUSH
84805: LD_VAR 0 4
84809: PPUSH
84810: LD_INT 3
84812: PPUSH
84813: CALL_OW 275
84817: PUSH
84818: LD_VAR 0 5
84822: PUSH
84823: LD_INT 3
84825: ARRAY
84826: GREATEREQUAL
84827: AND
84828: ST_TO_ADDR
// end ;
84829: LD_VAR 0 3
84833: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
84834: LD_INT 0
84836: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
84837: LD_VAR 0 1
84841: PPUSH
84842: LD_VAR 0 2
84846: PPUSH
84847: LD_INT 0
84849: PPUSH
84850: LD_INT 0
84852: PPUSH
84853: LD_INT 1
84855: PPUSH
84856: LD_INT 0
84858: PPUSH
84859: CALL_OW 587
// end ;
84863: LD_VAR 0 3
84867: RET
// export function CenterOnNow ( unit ) ; begin
84868: LD_INT 0
84870: PPUSH
// result := IsInUnit ( unit ) ;
84871: LD_ADDR_VAR 0 2
84875: PUSH
84876: LD_VAR 0 1
84880: PPUSH
84881: CALL_OW 310
84885: ST_TO_ADDR
// if not result then
84886: LD_VAR 0 2
84890: NOT
84891: IFFALSE 84903
// result := unit ;
84893: LD_ADDR_VAR 0 2
84897: PUSH
84898: LD_VAR 0 1
84902: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
84903: LD_VAR 0 1
84907: PPUSH
84908: CALL_OW 87
// end ;
84912: LD_VAR 0 2
84916: RET
// export function ComMoveHex ( unit , hex ) ; begin
84917: LD_INT 0
84919: PPUSH
// if not hex then
84920: LD_VAR 0 2
84924: NOT
84925: IFFALSE 84929
// exit ;
84927: GO 84982
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
84929: LD_VAR 0 2
84933: PUSH
84934: LD_INT 1
84936: ARRAY
84937: PPUSH
84938: LD_VAR 0 2
84942: PUSH
84943: LD_INT 2
84945: ARRAY
84946: PPUSH
84947: CALL_OW 428
84951: IFFALSE 84955
// exit ;
84953: GO 84982
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
84955: LD_VAR 0 1
84959: PPUSH
84960: LD_VAR 0 2
84964: PUSH
84965: LD_INT 1
84967: ARRAY
84968: PPUSH
84969: LD_VAR 0 2
84973: PUSH
84974: LD_INT 2
84976: ARRAY
84977: PPUSH
84978: CALL_OW 111
// end ;
84982: LD_VAR 0 3
84986: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
84987: LD_INT 0
84989: PPUSH
84990: PPUSH
84991: PPUSH
// if not unit or not enemy then
84992: LD_VAR 0 1
84996: NOT
84997: IFTRUE 85006
84999: PUSH
85000: LD_VAR 0 2
85004: NOT
85005: OR
85006: IFFALSE 85010
// exit ;
85008: GO 85136
// x := GetX ( enemy ) ;
85010: LD_ADDR_VAR 0 4
85014: PUSH
85015: LD_VAR 0 2
85019: PPUSH
85020: CALL_OW 250
85024: ST_TO_ADDR
// y := GetY ( enemy ) ;
85025: LD_ADDR_VAR 0 5
85029: PUSH
85030: LD_VAR 0 2
85034: PPUSH
85035: CALL_OW 251
85039: ST_TO_ADDR
// if ValidHex ( x , y ) then
85040: LD_VAR 0 4
85044: PPUSH
85045: LD_VAR 0 5
85049: PPUSH
85050: CALL_OW 488
85054: IFFALSE 85136
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
85056: LD_VAR 0 2
85060: PPUSH
85061: CALL_OW 247
85065: PUSH
85066: LD_INT 3
85068: PUSH
85069: LD_INT 2
85071: PUSH
85072: EMPTY
85073: LIST
85074: LIST
85075: IN
85076: IFTRUE 85099
85078: PUSH
85079: LD_VAR 0 1
85083: PPUSH
85084: CALL_OW 255
85088: PPUSH
85089: LD_VAR 0 2
85093: PPUSH
85094: CALL_OW 292
85098: OR
85099: IFFALSE 85117
// ComAttackUnit ( unit , enemy ) else
85101: LD_VAR 0 1
85105: PPUSH
85106: LD_VAR 0 2
85110: PPUSH
85111: CALL_OW 115
85115: GO 85136
// ComAgressiveMove ( unit , x , y ) ;
85117: LD_VAR 0 1
85121: PPUSH
85122: LD_VAR 0 4
85126: PPUSH
85127: LD_VAR 0 5
85131: PPUSH
85132: CALL_OW 114
// end ;
85136: LD_VAR 0 3
85140: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
85141: LD_INT 0
85143: PPUSH
85144: PPUSH
85145: PPUSH
// list := AreaToList ( area , 0 ) ;
85146: LD_ADDR_VAR 0 5
85150: PUSH
85151: LD_VAR 0 1
85155: PPUSH
85156: LD_INT 0
85158: PPUSH
85159: CALL_OW 517
85163: ST_TO_ADDR
// if not list then
85164: LD_VAR 0 5
85168: NOT
85169: IFFALSE 85173
// exit ;
85171: GO 85303
// if all then
85173: LD_VAR 0 2
85177: IFFALSE 85265
// begin for i := 1 to list [ 1 ] do
85179: LD_ADDR_VAR 0 4
85183: PUSH
85184: DOUBLE
85185: LD_INT 1
85187: DEC
85188: ST_TO_ADDR
85189: LD_VAR 0 5
85193: PUSH
85194: LD_INT 1
85196: ARRAY
85197: PUSH
85198: FOR_TO
85199: IFFALSE 85261
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
85201: LD_ADDR_VAR 0 3
85205: PUSH
85206: LD_VAR 0 3
85210: PPUSH
85211: LD_VAR 0 3
85215: PUSH
85216: LD_INT 1
85218: PLUS
85219: PPUSH
85220: LD_VAR 0 5
85224: PUSH
85225: LD_INT 1
85227: ARRAY
85228: PUSH
85229: LD_VAR 0 4
85233: ARRAY
85234: PUSH
85235: LD_VAR 0 5
85239: PUSH
85240: LD_INT 2
85242: ARRAY
85243: PUSH
85244: LD_VAR 0 4
85248: ARRAY
85249: PUSH
85250: EMPTY
85251: LIST
85252: LIST
85253: PPUSH
85254: CALL_OW 1
85258: ST_TO_ADDR
85259: GO 85198
85261: POP
85262: POP
// exit ;
85263: GO 85303
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
85265: LD_ADDR_VAR 0 3
85269: PUSH
85270: LD_VAR 0 5
85274: PUSH
85275: LD_INT 1
85277: ARRAY
85278: PUSH
85279: LD_INT 1
85281: ARRAY
85282: PUSH
85283: LD_VAR 0 5
85287: PUSH
85288: LD_INT 2
85290: ARRAY
85291: PUSH
85292: LD_INT 1
85294: ARRAY
85295: PUSH
85296: EMPTY
85297: LIST
85298: LIST
85299: PUSH
85300: EMPTY
85301: LIST
85302: ST_TO_ADDR
// end ;
85303: LD_VAR 0 3
85307: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
85308: LD_INT 0
85310: PPUSH
85311: PPUSH
// list := AreaToList ( area , 0 ) ;
85312: LD_ADDR_VAR 0 4
85316: PUSH
85317: LD_VAR 0 1
85321: PPUSH
85322: LD_INT 0
85324: PPUSH
85325: CALL_OW 517
85329: ST_TO_ADDR
// if not list then
85330: LD_VAR 0 4
85334: NOT
85335: IFFALSE 85339
// exit ;
85337: GO 85380
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
85339: LD_ADDR_VAR 0 3
85343: PUSH
85344: LD_VAR 0 4
85348: PUSH
85349: LD_INT 1
85351: ARRAY
85352: PUSH
85353: LD_INT 1
85355: ARRAY
85356: PUSH
85357: LD_VAR 0 4
85361: PUSH
85362: LD_INT 2
85364: ARRAY
85365: PUSH
85366: LD_INT 1
85368: ARRAY
85369: PUSH
85370: LD_VAR 0 2
85374: PUSH
85375: EMPTY
85376: LIST
85377: LIST
85378: LIST
85379: ST_TO_ADDR
// end ;
85380: LD_VAR 0 3
85384: RET
// export function First ( array ) ; begin
85385: LD_INT 0
85387: PPUSH
// if not array then
85388: LD_VAR 0 1
85392: NOT
85393: IFFALSE 85397
// exit ;
85395: GO 85411
// result := array [ 1 ] ;
85397: LD_ADDR_VAR 0 2
85401: PUSH
85402: LD_VAR 0 1
85406: PUSH
85407: LD_INT 1
85409: ARRAY
85410: ST_TO_ADDR
// end ;
85411: LD_VAR 0 2
85415: RET
// export function Last ( array ) ; begin
85416: LD_INT 0
85418: PPUSH
// if not array then
85419: LD_VAR 0 1
85423: NOT
85424: IFFALSE 85428
// exit ;
85426: GO 85444
// result := array [ array ] ;
85428: LD_ADDR_VAR 0 2
85432: PUSH
85433: LD_VAR 0 1
85437: PUSH
85438: LD_VAR 0 1
85442: ARRAY
85443: ST_TO_ADDR
// end ;
85444: LD_VAR 0 2
85448: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
85449: LD_INT 0
85451: PPUSH
85452: PPUSH
// result := [ ] ;
85453: LD_ADDR_VAR 0 5
85457: PUSH
85458: EMPTY
85459: ST_TO_ADDR
// if not array then
85460: LD_VAR 0 1
85464: NOT
85465: IFFALSE 85469
// exit ;
85467: GO 85581
// for i := 1 to array do
85469: LD_ADDR_VAR 0 6
85473: PUSH
85474: DOUBLE
85475: LD_INT 1
85477: DEC
85478: ST_TO_ADDR
85479: LD_VAR 0 1
85483: PUSH
85484: FOR_TO
85485: IFFALSE 85579
// if array [ i ] [ index ] = value then
85487: LD_VAR 0 1
85491: PUSH
85492: LD_VAR 0 6
85496: ARRAY
85497: PUSH
85498: LD_VAR 0 2
85502: ARRAY
85503: PUSH
85504: LD_VAR 0 3
85508: EQUAL
85509: IFFALSE 85577
// begin if indexColumn then
85511: LD_VAR 0 4
85515: IFFALSE 85551
// result := Join ( result , array [ i ] [ indexColumn ] ) else
85517: LD_ADDR_VAR 0 5
85521: PUSH
85522: LD_VAR 0 5
85526: PPUSH
85527: LD_VAR 0 1
85531: PUSH
85532: LD_VAR 0 6
85536: ARRAY
85537: PUSH
85538: LD_VAR 0 4
85542: ARRAY
85543: PPUSH
85544: CALL 80589 0 2
85548: ST_TO_ADDR
85549: GO 85577
// result := Join ( result , array [ i ] ) ;
85551: LD_ADDR_VAR 0 5
85555: PUSH
85556: LD_VAR 0 5
85560: PPUSH
85561: LD_VAR 0 1
85565: PUSH
85566: LD_VAR 0 6
85570: ARRAY
85571: PPUSH
85572: CALL 80589 0 2
85576: ST_TO_ADDR
// end ;
85577: GO 85484
85579: POP
85580: POP
// end ;
85581: LD_VAR 0 5
85585: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
85586: LD_INT 0
85588: PPUSH
// if not vehicles or not parkingPoint then
85589: LD_VAR 0 1
85593: NOT
85594: IFTRUE 85603
85596: PUSH
85597: LD_VAR 0 2
85601: NOT
85602: OR
85603: IFFALSE 85607
// exit ;
85605: GO 85705
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
85607: LD_ADDR_VAR 0 1
85611: PUSH
85612: LD_VAR 0 1
85616: PPUSH
85617: LD_INT 50
85619: PUSH
85620: EMPTY
85621: LIST
85622: PUSH
85623: LD_INT 3
85625: PUSH
85626: LD_INT 92
85628: PUSH
85629: LD_VAR 0 2
85633: PUSH
85634: LD_INT 1
85636: ARRAY
85637: PUSH
85638: LD_VAR 0 2
85642: PUSH
85643: LD_INT 2
85645: ARRAY
85646: PUSH
85647: LD_INT 8
85649: PUSH
85650: EMPTY
85651: LIST
85652: LIST
85653: LIST
85654: LIST
85655: PUSH
85656: EMPTY
85657: LIST
85658: LIST
85659: PUSH
85660: EMPTY
85661: LIST
85662: LIST
85663: PPUSH
85664: CALL_OW 72
85668: ST_TO_ADDR
// if not vehicles then
85669: LD_VAR 0 1
85673: NOT
85674: IFFALSE 85678
// exit ;
85676: GO 85705
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
85678: LD_VAR 0 1
85682: PPUSH
85683: LD_VAR 0 2
85687: PUSH
85688: LD_INT 1
85690: ARRAY
85691: PPUSH
85692: LD_VAR 0 2
85696: PUSH
85697: LD_INT 2
85699: ARRAY
85700: PPUSH
85701: CALL_OW 111
// end ;
85705: LD_VAR 0 3
85709: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
85710: LD_INT 0
85712: PPUSH
85713: PPUSH
85714: PPUSH
// if not side or not area then
85715: LD_VAR 0 1
85719: NOT
85720: IFTRUE 85729
85722: PUSH
85723: LD_VAR 0 2
85727: NOT
85728: OR
85729: IFFALSE 85733
// exit ;
85731: GO 85852
// tmp := AreaToList ( area , 0 ) ;
85733: LD_ADDR_VAR 0 5
85737: PUSH
85738: LD_VAR 0 2
85742: PPUSH
85743: LD_INT 0
85745: PPUSH
85746: CALL_OW 517
85750: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
85751: LD_ADDR_VAR 0 4
85755: PUSH
85756: DOUBLE
85757: LD_INT 1
85759: DEC
85760: ST_TO_ADDR
85761: LD_VAR 0 5
85765: PUSH
85766: LD_INT 1
85768: ARRAY
85769: PUSH
85770: FOR_TO
85771: IFFALSE 85850
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
85773: LD_VAR 0 5
85777: PUSH
85778: LD_INT 1
85780: ARRAY
85781: PUSH
85782: LD_VAR 0 4
85786: ARRAY
85787: PPUSH
85788: LD_VAR 0 5
85792: PUSH
85793: LD_INT 2
85795: ARRAY
85796: PUSH
85797: LD_VAR 0 4
85801: ARRAY
85802: PPUSH
85803: CALL_OW 351
85807: IFFALSE 85848
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
85809: LD_VAR 0 5
85813: PUSH
85814: LD_INT 1
85816: ARRAY
85817: PUSH
85818: LD_VAR 0 4
85822: ARRAY
85823: PPUSH
85824: LD_VAR 0 5
85828: PUSH
85829: LD_INT 2
85831: ARRAY
85832: PUSH
85833: LD_VAR 0 4
85837: ARRAY
85838: PPUSH
85839: LD_VAR 0 1
85843: PPUSH
85844: CALL_OW 244
// end ;
85848: GO 85770
85850: POP
85851: POP
// end ;
85852: LD_VAR 0 3
85856: RET
// export function UniqueArray ( array ) ; var i ; begin
85857: LD_INT 0
85859: PPUSH
85860: PPUSH
// result := [ ] ;
85861: LD_ADDR_VAR 0 2
85865: PUSH
85866: EMPTY
85867: ST_TO_ADDR
// if not array then
85868: LD_VAR 0 1
85872: NOT
85873: IFFALSE 85877
// exit ;
85875: GO 85938
// for i := 1 to array do
85877: LD_ADDR_VAR 0 3
85881: PUSH
85882: DOUBLE
85883: LD_INT 1
85885: DEC
85886: ST_TO_ADDR
85887: LD_VAR 0 1
85891: PUSH
85892: FOR_TO
85893: IFFALSE 85936
// if not array [ i ] in result then
85895: LD_VAR 0 1
85899: PUSH
85900: LD_VAR 0 3
85904: ARRAY
85905: PUSH
85906: LD_VAR 0 2
85910: IN
85911: NOT
85912: IFFALSE 85934
// result := Join ( result , i ) ;
85914: LD_ADDR_VAR 0 2
85918: PUSH
85919: LD_VAR 0 2
85923: PPUSH
85924: LD_VAR 0 3
85928: PPUSH
85929: CALL 80589 0 2
85933: ST_TO_ADDR
85934: GO 85892
85936: POP
85937: POP
// end ; end_of_file
85938: LD_VAR 0 2
85942: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
85943: LD_VAR 0 1
85947: PUSH
85948: LD_INT 200
85950: DOUBLE
85951: GREATEREQUAL
85952: IFFALSE 85960
85954: LD_INT 299
85956: DOUBLE
85957: LESSEQUAL
85958: IFTRUE 85962
85960: GO 85994
85962: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
85963: LD_VAR 0 1
85967: PPUSH
85968: LD_VAR 0 2
85972: PPUSH
85973: LD_VAR 0 3
85977: PPUSH
85978: LD_VAR 0 4
85982: PPUSH
85983: LD_VAR 0 5
85987: PPUSH
85988: CALL 36665 0 5
85992: GO 86071
85994: LD_INT 300
85996: DOUBLE
85997: GREATEREQUAL
85998: IFFALSE 86006
86000: LD_INT 399
86002: DOUBLE
86003: LESSEQUAL
86004: IFTRUE 86008
86006: GO 86070
86008: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
86009: LD_VAR 0 1
86013: PPUSH
86014: LD_VAR 0 2
86018: PPUSH
86019: LD_VAR 0 3
86023: PPUSH
86024: LD_VAR 0 4
86028: PPUSH
86029: LD_VAR 0 5
86033: PPUSH
86034: LD_VAR 0 6
86038: PPUSH
86039: LD_VAR 0 7
86043: PPUSH
86044: LD_VAR 0 8
86048: PPUSH
86049: LD_VAR 0 9
86053: PPUSH
86054: LD_VAR 0 10
86058: PPUSH
86059: LD_VAR 0 11
86063: PPUSH
86064: CALL 32468 0 11
86068: GO 86071
86070: POP
// end ;
86071: PPOPN 11
86073: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
86074: LD_VAR 0 1
86078: PPUSH
86079: LD_VAR 0 2
86083: PPUSH
86084: LD_VAR 0 3
86088: PPUSH
86089: LD_VAR 0 4
86093: PPUSH
86094: LD_VAR 0 5
86098: PPUSH
86099: CALL 35965 0 5
// end ; end_of_file
86103: PPOPN 5
86105: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
86106: LD_VAR 0 1
86110: PPUSH
86111: LD_VAR 0 2
86115: PPUSH
86116: LD_VAR 0 3
86120: PPUSH
86121: LD_VAR 0 4
86125: PPUSH
86126: LD_VAR 0 5
86130: PPUSH
86131: LD_VAR 0 6
86135: PPUSH
86136: CALL 20008 0 6
// end ;
86140: PPOPN 6
86142: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
86143: LD_INT 0
86145: PPUSH
// begin if not units then
86146: LD_VAR 0 1
86150: NOT
86151: IFFALSE 86155
// exit ;
86153: GO 86189
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
86155: LD_VAR 0 1
86159: PPUSH
86160: LD_VAR 0 2
86164: PPUSH
86165: LD_VAR 0 3
86169: PPUSH
86170: LD_VAR 0 4
86174: PPUSH
86175: LD_VAR 0 5
86179: PPUSH
86180: LD_VAR 0 6
86184: PPUSH
86185: CALL 42362 0 6
// end ;
86189: PPOPN 7
86191: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
86192: CALL 19888 0 0
// end ;
86196: PPOPN 1
86198: END
