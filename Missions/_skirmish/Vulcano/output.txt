// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// PrepareTrigger ;
  15: CALL 40 0 0
// PrepareVulcanoBase ;
  19: CALL 1102 0 0
// PrepareRussian ;
  23: CALL 3784 0 0
// PrepareLegion ;
  27: CALL 8065 0 0
// Action ;
  31: CALL 11573 0 0
// InitArt ;
  35: CALL 241 0 0
// end ;
  39: END
// export base_captured , russian_prepared , ru_can_attack , ru_sib_bomb , chance_to_bomb , player_res_art , artifact_progress , player_artifact_ready , art_icon , time_res_art , player_commander , time_to_reuse , mine_vulc , medal_enabled , debug , dead_counter , kill_counter , veh_counter , tech_counter , sib_contamin_counter , event_legion_attack , event_russian_attack , event_alliance_attack ; function PrepareTrigger ; begin
  40: LD_INT 0
  42: PPUSH
// debug := false ;
  43: LD_ADDR_EXP 15
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// base_captured := false ;
  51: LD_ADDR_EXP 1
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// russian_prepared := false ;
  59: LD_ADDR_EXP 2
  63: PUSH
  64: LD_INT 0
  66: ST_TO_ADDR
// ru_can_attack := false ;
  67: LD_ADDR_EXP 3
  71: PUSH
  72: LD_INT 0
  74: ST_TO_ADDR
// ru_sib_bomb := false ;
  75: LD_ADDR_EXP 4
  79: PUSH
  80: LD_INT 0
  82: ST_TO_ADDR
// chance_to_bomb := [ 5 , 10 , 25 ] [ Difficulty ] ;
  83: LD_ADDR_EXP 5
  87: PUSH
  88: LD_INT 5
  90: PUSH
  91: LD_INT 10
  93: PUSH
  94: LD_INT 25
  96: PUSH
  97: EMPTY
  98: LIST
  99: LIST
 100: LIST
 101: PUSH
 102: LD_OWVAR 67
 106: ARRAY
 107: ST_TO_ADDR
// player_res_art := false ;
 108: LD_ADDR_EXP 6
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// player_artifact_ready := false ;
 116: LD_ADDR_EXP 8
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// art_icon := art_use_atom ;
 124: LD_ADDR_EXP 9
 128: PUSH
 129: LD_INT 7
 131: ST_TO_ADDR
// time_res_art := 600 ;
 132: LD_ADDR_EXP 10
 136: PUSH
 137: LD_INT 600
 139: ST_TO_ADDR
// time_to_reuse := 10 10$00 ;
 140: LD_ADDR_EXP 12
 144: PUSH
 145: LD_INT 21000
 147: ST_TO_ADDR
// mine_vulc := false ;
 148: LD_ADDR_EXP 13
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// medal_enabled := false ;
 156: LD_ADDR_EXP 14
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// dead_counter := 0 ;
 164: LD_ADDR_EXP 16
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// kill_counter := 0 ;
 172: LD_ADDR_EXP 17
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// veh_counter := 0 ;
 180: LD_ADDR_EXP 18
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// tech_counter := 0 ;
 188: LD_ADDR_EXP 19
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// sib_contamin_counter := 0 ;
 196: LD_ADDR_EXP 20
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// artifact_progress := 0 ;
 204: LD_ADDR_EXP 7
 208: PUSH
 209: LD_INT 0
 211: ST_TO_ADDR
// event_legion_attack := 1 ;
 212: LD_ADDR_EXP 21
 216: PUSH
 217: LD_INT 1
 219: ST_TO_ADDR
// event_russian_attack := 2 ;
 220: LD_ADDR_EXP 22
 224: PUSH
 225: LD_INT 2
 227: ST_TO_ADDR
// event_alliance_attack := 3 ;
 228: LD_ADDR_EXP 23
 232: PUSH
 233: LD_INT 3
 235: ST_TO_ADDR
// end ;
 236: LD_VAR 0 1
 240: RET
// function InitArt ; begin
 241: LD_INT 0
 243: PPUSH
// SetArtifactRes ( your_side , true ) ;
 244: LD_OWVAR 2
 248: PPUSH
 249: LD_INT 1
 251: PPUSH
 252: CALL_OW 467
// end ; end_of_file
 256: LD_VAR 0 1
 260: RET
// export us_commander , us_force , us_skill , us_guy ; export function PrepareAmerican ; var i , filter , un , team ; begin
 261: LD_INT 0
 263: PPUSH
 264: PPUSH
 265: PPUSH
 266: PPUSH
 267: PPUSH
// us_skill := [ 7 , 6 , 5 ] [ Difficulty ] ;
 268: LD_ADDR_EXP 26
 272: PUSH
 273: LD_INT 7
 275: PUSH
 276: LD_INT 6
 278: PUSH
 279: LD_INT 5
 281: PUSH
 282: EMPTY
 283: LIST
 284: LIST
 285: LIST
 286: PUSH
 287: LD_OWVAR 67
 291: ARRAY
 292: ST_TO_ADDR
// us_force := [ ] ;
 293: LD_ADDR_EXP 25
 297: PUSH
 298: EMPTY
 299: ST_TO_ADDR
// RemoveEnvironmentArea ( evn ) ;
 300: LD_INT 17
 302: PPUSH
 303: CALL_OW 355
// PrepareAllianceAI ( ) ;
 307: CALL 16944 0 0
// uc_side := 1 ;
 311: LD_ADDR_OWVAR 20
 315: PUSH
 316: LD_INT 1
 318: ST_TO_ADDR
// uc_nation := nation_american ;
 319: LD_ADDR_OWVAR 21
 323: PUSH
 324: LD_INT 1
 326: ST_TO_ADDR
// hc_gallery :=  ;
 327: LD_ADDR_OWVAR 33
 331: PUSH
 332: LD_STRING 
 334: ST_TO_ADDR
// hc_name :=  ;
 335: LD_ADDR_OWVAR 26
 339: PUSH
 340: LD_STRING 
 342: ST_TO_ADDR
// hc_importance := 0 ;
 343: LD_ADDR_OWVAR 32
 347: PUSH
 348: LD_INT 0
 350: ST_TO_ADDR
// for i = 1 to 11 do
 351: LD_ADDR_VAR 0 2
 355: PUSH
 356: DOUBLE
 357: LD_INT 1
 359: DEC
 360: ST_TO_ADDR
 361: LD_INT 11
 363: PUSH
 364: FOR_TO
 365: IFFALSE 418
// begin PrepareHuman ( false , Rand ( 1 , 4 ) , us_skill ) ;
 367: LD_INT 0
 369: PPUSH
 370: LD_INT 1
 372: PPUSH
 373: LD_INT 4
 375: PPUSH
 376: CALL_OW 12
 380: PPUSH
 381: LD_EXP 26
 385: PPUSH
 386: CALL_OW 380
// un := CreateHuman ;
 390: LD_ADDR_VAR 0 4
 394: PUSH
 395: CALL_OW 44
 399: ST_TO_ADDR
// us_force := us_force ^ un ;
 400: LD_ADDR_EXP 25
 404: PUSH
 405: LD_EXP 25
 409: PUSH
 410: LD_VAR 0 4
 414: ADD
 415: ST_TO_ADDR
// end ;
 416: GO 364
 418: POP
 419: POP
// hc_importance := 100 ;
 420: LD_ADDR_OWVAR 32
 424: PUSH
 425: LD_INT 100
 427: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , us_skill ) ;
 428: LD_INT 1
 430: PPUSH
 431: LD_INT 1
 433: PPUSH
 434: LD_EXP 26
 438: PPUSH
 439: CALL_OW 380
// us_commander := CreateHuman ;
 443: LD_ADDR_EXP 24
 447: PUSH
 448: CALL_OW 44
 452: ST_TO_ADDR
// player_commander := us_commander ;
 453: LD_ADDR_EXP 11
 457: PUSH
 458: LD_EXP 24
 462: ST_TO_ADDR
// team := CharacterSelection ( text , [ 7 , 6 , 5 ] [ Difficulty ] , [ 7 , 6 , 5 ] [ Difficulty ] , [ sel_change_class , us_commander , sel_changeable , sel_not_hired ] ^ us_force , [ class_soldier , [ class_mechanic , 1 ] , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , [ 5 , 5 , - 1 ] [ Difficulty ] ] ) ;
 463: LD_ADDR_VAR 0 5
 467: PUSH
 468: LD_STRING text
 470: PPUSH
 471: LD_INT 7
 473: PUSH
 474: LD_INT 6
 476: PUSH
 477: LD_INT 5
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: LIST
 484: PUSH
 485: LD_OWVAR 67
 489: ARRAY
 490: PPUSH
 491: LD_INT 7
 493: PUSH
 494: LD_INT 6
 496: PUSH
 497: LD_INT 5
 499: PUSH
 500: EMPTY
 501: LIST
 502: LIST
 503: LIST
 504: PUSH
 505: LD_OWVAR 67
 509: ARRAY
 510: PPUSH
 511: LD_INT -5
 513: PUSH
 514: LD_EXP 24
 518: PUSH
 519: LD_INT -3
 521: PUSH
 522: LD_INT -2
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: LIST
 529: LIST
 530: PUSH
 531: LD_EXP 25
 535: ADD
 536: PPUSH
 537: LD_INT 1
 539: PUSH
 540: LD_INT 3
 542: PUSH
 543: LD_INT 1
 545: PUSH
 546: EMPTY
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 2
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: EMPTY
 557: LIST
 558: LIST
 559: PUSH
 560: LD_INT 4
 562: PUSH
 563: LD_INT 1
 565: PUSH
 566: EMPTY
 567: LIST
 568: LIST
 569: PUSH
 570: LD_INT 5
 572: PUSH
 573: LD_INT 5
 575: PUSH
 576: LD_INT 1
 578: NEG
 579: PUSH
 580: EMPTY
 581: LIST
 582: LIST
 583: LIST
 584: PUSH
 585: LD_OWVAR 67
 589: ARRAY
 590: PUSH
 591: EMPTY
 592: LIST
 593: LIST
 594: LIST
 595: LIST
 596: LIST
 597: PPUSH
 598: CALL_OW 42
 602: ST_TO_ADDR
// team := team ^ us_commander ;
 603: LD_ADDR_VAR 0 5
 607: PUSH
 608: LD_VAR 0 5
 612: PUSH
 613: LD_EXP 24
 617: ADD
 618: ST_TO_ADDR
// for i = 1 to team do
 619: LD_ADDR_VAR 0 2
 623: PUSH
 624: DOUBLE
 625: LD_INT 1
 627: DEC
 628: ST_TO_ADDR
 629: LD_VAR 0 5
 633: PUSH
 634: FOR_TO
 635: IFFALSE 835
// begin if GetClass ( team [ i ] ) = class_mechanic then
 637: LD_VAR 0 5
 641: PUSH
 642: LD_VAR 0 2
 646: ARRAY
 647: PPUSH
 648: CALL_OW 257
 652: PUSH
 653: LD_INT 3
 655: EQUAL
 656: IFFALSE 797
// begin vc_chassis := [ us_medium_tracked , us_heavy_tracked , us_morphling ] [ i mod 3 + 1 ] ;
 658: LD_ADDR_OWVAR 37
 662: PUSH
 663: LD_INT 3
 665: PUSH
 666: LD_INT 4
 668: PUSH
 669: LD_INT 5
 671: PUSH
 672: EMPTY
 673: LIST
 674: LIST
 675: LIST
 676: PUSH
 677: LD_VAR 0 2
 681: PUSH
 682: LD_INT 3
 684: MOD
 685: PUSH
 686: LD_INT 1
 688: PLUS
 689: ARRAY
 690: ST_TO_ADDR
// vc_engine := engine_siberite ;
 691: LD_ADDR_OWVAR 39
 695: PUSH
 696: LD_INT 3
 698: ST_TO_ADDR
// vc_control := control_manual ;
 699: LD_ADDR_OWVAR 38
 703: PUSH
 704: LD_INT 1
 706: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_laser ] [ rand ( 1 , 3 ) ] ;
 707: LD_ADDR_OWVAR 40
 711: PUSH
 712: LD_INT 4
 714: PUSH
 715: LD_INT 5
 717: PUSH
 718: LD_INT 9
 720: PUSH
 721: EMPTY
 722: LIST
 723: LIST
 724: LIST
 725: PUSH
 726: LD_INT 1
 728: PPUSH
 729: LD_INT 3
 731: PPUSH
 732: CALL_OW 12
 736: ARRAY
 737: ST_TO_ADDR
// un := CreateVehicle ;
 738: LD_ADDR_VAR 0 4
 742: PUSH
 743: CALL_OW 45
 747: ST_TO_ADDR
// SetDir ( un , 2 ) ;
 748: LD_VAR 0 4
 752: PPUSH
 753: LD_INT 2
 755: PPUSH
 756: CALL_OW 233
// PlaceUnitArea ( un , start_north , false ) ;
 760: LD_VAR 0 4
 764: PPUSH
 765: LD_INT 1
 767: PPUSH
 768: LD_INT 0
 770: PPUSH
 771: CALL_OW 49
// PlaceHumanInUnit ( team [ i ] , un ) ;
 775: LD_VAR 0 5
 779: PUSH
 780: LD_VAR 0 2
 784: ARRAY
 785: PPUSH
 786: LD_VAR 0 4
 790: PPUSH
 791: CALL_OW 52
// end else
 795: GO 833
// begin PlaceUnitArea ( team [ i ] , start_north , false ) ;
 797: LD_VAR 0 5
 801: PUSH
 802: LD_VAR 0 2
 806: ARRAY
 807: PPUSH
 808: LD_INT 1
 810: PPUSH
 811: LD_INT 0
 813: PPUSH
 814: CALL_OW 49
// ComHold ( team [ i ] ) ;
 818: LD_VAR 0 5
 822: PUSH
 823: LD_VAR 0 2
 827: ARRAY
 828: PPUSH
 829: CALL_OW 140
// end ; end ;
 833: GO 634
 835: POP
 836: POP
// end ;
 837: LD_VAR 0 1
 841: RET
// every 0 0$38 + 2 2$30 trigger tick < 73500 do
 842: LD_OWVAR 1
 846: PUSH
 847: LD_INT 73500
 849: LESS
 850: IFFALSE 877
 852: GO 854
 854: DISABLE
// begin enable ;
 855: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , extra_crates , true ) ;
 856: LD_INT 1
 858: PPUSH
 859: LD_INT 5
 861: PPUSH
 862: CALL_OW 12
 866: PPUSH
 867: LD_INT 23
 869: PPUSH
 870: LD_INT 1
 872: PPUSH
 873: CALL_OW 55
// end ;
 877: END
// every 1 1$10 do var time , p , l ;
 878: GO 880
 880: DISABLE
 881: LD_INT 0
 883: PPUSH
 884: PPUSH
 885: PPUSH
// begin time := 0 0$44 ;
 886: LD_ADDR_VAR 0 1
 890: PUSH
 891: LD_INT 1540
 893: ST_TO_ADDR
// l := 0 ;
 894: LD_ADDR_VAR 0 3
 898: PUSH
 899: LD_INT 0
 901: ST_TO_ADDR
// repeat begin Wait ( time ) ;
 902: LD_VAR 0 1
 906: PPUSH
 907: CALL_OW 67
// l := l + 1 ;
 911: LD_ADDR_VAR 0 3
 915: PUSH
 916: LD_VAR 0 3
 920: PUSH
 921: LD_INT 1
 923: PLUS
 924: ST_TO_ADDR
// if GetListOfCratesInArea ( us_crates ) < 20 then
 925: LD_INT 12
 927: PPUSH
 928: CALL_OW 435
 932: PUSH
 933: LD_INT 20
 935: LESS
 936: IFFALSE 995
// begin CreateCratesArea ( Rand ( 1 , 5 ) , us_crates , true ) ;
 938: LD_INT 1
 940: PPUSH
 941: LD_INT 5
 943: PPUSH
 944: CALL_OW 12
 948: PPUSH
 949: LD_INT 12
 951: PPUSH
 952: LD_INT 1
 954: PPUSH
 955: CALL_OW 55
// Wait ( Rand ( 0 0$39 , 0 0$48 ) ) ;
 959: LD_INT 1365
 961: PPUSH
 962: LD_INT 1680
 964: PPUSH
 965: CALL_OW 12
 969: PPUSH
 970: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 5 ) , us_crates , true ) ;
 974: LD_INT 1
 976: PPUSH
 977: LD_INT 5
 979: PPUSH
 980: CALL_OW 12
 984: PPUSH
 985: LD_INT 12
 987: PPUSH
 988: LD_INT 1
 990: PPUSH
 991: CALL_OW 55
// end ; p := Rand ( 0 , 1 ) ;
 995: LD_ADDR_VAR 0 2
 999: PUSH
1000: LD_INT 0
1002: PPUSH
1003: LD_INT 1
1005: PPUSH
1006: CALL_OW 12
1010: ST_TO_ADDR
// if p then
1011: LD_VAR 0 2
1015: IFFALSE 1050
// begin Wait ( Rand ( 0 0$09 , 0 0$20 ) ) ;
1017: LD_INT 315
1019: PPUSH
1020: LD_INT 700
1022: PPUSH
1023: CALL_OW 12
1027: PPUSH
1028: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 4 ) , true ) ;
1032: LD_INT 1
1034: PPUSH
1035: LD_INT 4
1037: PPUSH
1038: CALL_OW 12
1042: PPUSH
1043: LD_INT 1
1045: PPUSH
1046: CALL_OW 57
// end ; if l mod [ 15 , 13 , 11 ] [ Difficulty ] = 0 then
1050: LD_VAR 0 3
1054: PUSH
1055: LD_INT 15
1057: PUSH
1058: LD_INT 13
1060: PUSH
1061: LD_INT 11
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: LIST
1068: PUSH
1069: LD_OWVAR 67
1073: ARRAY
1074: MOD
1075: PUSH
1076: LD_INT 0
1078: EQUAL
1079: IFFALSE 1095
// time := time + 2 2$00 ;
1081: LD_ADDR_VAR 0 1
1085: PUSH
1086: LD_VAR 0 1
1090: PUSH
1091: LD_INT 4200
1093: PLUS
1094: ST_TO_ADDR
// end until false ;
1095: LD_INT 0
1097: IFFALSE 902
// end ; end_of_file
1099: PPOPN 3
1101: END
// export russians_in_base ; export function PrepareVulcanoBase ; var i , filter , hp , un , area ; begin
1102: LD_INT 0
1104: PPUSH
1105: PPUSH
1106: PPUSH
1107: PPUSH
1108: PPUSH
1109: PPUSH
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) ;
1110: LD_ADDR_VAR 0 3
1114: PUSH
1115: LD_INT 22
1117: PUSH
1118: LD_INT 4
1120: PUSH
1121: EMPTY
1122: LIST
1123: LIST
1124: PUSH
1125: LD_INT 21
1127: PUSH
1128: LD_INT 3
1130: PUSH
1131: EMPTY
1132: LIST
1133: LIST
1134: PUSH
1135: EMPTY
1136: LIST
1137: LIST
1138: PPUSH
1139: CALL_OW 69
1143: ST_TO_ADDR
// hp := [ 470 , 370 , 290 ] [ Difficulty ] ;
1144: LD_ADDR_VAR 0 4
1148: PUSH
1149: LD_INT 470
1151: PUSH
1152: LD_INT 370
1154: PUSH
1155: LD_INT 290
1157: PUSH
1158: EMPTY
1159: LIST
1160: LIST
1161: LIST
1162: PUSH
1163: LD_OWVAR 67
1167: ARRAY
1168: ST_TO_ADDR
// case Difficulty of 2 :
1169: LD_OWVAR 67
1173: PUSH
1174: LD_INT 2
1176: DOUBLE
1177: EQUAL
1178: IFTRUE 1182
1180: GO 1213
1182: POP
// begin DestroyUnit ( UnitFilter ( filter , [ f_btype , b_bunker ] ) [ 1 ] ) ;
1183: LD_VAR 0 3
1187: PPUSH
1188: LD_INT 30
1190: PUSH
1191: LD_INT 32
1193: PUSH
1194: EMPTY
1195: LIST
1196: LIST
1197: PPUSH
1198: CALL_OW 72
1202: PUSH
1203: LD_INT 1
1205: ARRAY
1206: PPUSH
1207: CALL_OW 65
// end ; 3 :
1211: GO 1289
1213: LD_INT 3
1215: DOUBLE
1216: EQUAL
1217: IFTRUE 1221
1219: GO 1288
1221: POP
// begin DestroyUnit ( UnitFilter ( filter , [ f_btype , b_bunker ] ) [ 1 ] ) ;
1222: LD_VAR 0 3
1226: PPUSH
1227: LD_INT 30
1229: PUSH
1230: LD_INT 32
1232: PUSH
1233: EMPTY
1234: LIST
1235: LIST
1236: PPUSH
1237: CALL_OW 72
1241: PUSH
1242: LD_INT 1
1244: ARRAY
1245: PPUSH
1246: CALL_OW 65
// DestroyUnit ( UnitFilter ( filter , [ f_btype , b_solar_power ] ) [ Rand ( 1 , 3 ) ] ) ;
1250: LD_VAR 0 3
1254: PPUSH
1255: LD_INT 30
1257: PUSH
1258: LD_INT 27
1260: PUSH
1261: EMPTY
1262: LIST
1263: LIST
1264: PPUSH
1265: CALL_OW 72
1269: PUSH
1270: LD_INT 1
1272: PPUSH
1273: LD_INT 3
1275: PPUSH
1276: CALL_OW 12
1280: ARRAY
1281: PPUSH
1282: CALL_OW 65
// end ; end ;
1286: GO 1289
1288: POP
// for i = 1 to filter do
1289: LD_ADDR_VAR 0 2
1293: PUSH
1294: DOUBLE
1295: LD_INT 1
1297: DEC
1298: ST_TO_ADDR
1299: LD_VAR 0 3
1303: PUSH
1304: FOR_TO
1305: IFFALSE 1342
// SetLives ( filter [ i ] , hp + Rand ( - 29 , 29 ) ) ;
1307: LD_VAR 0 3
1311: PUSH
1312: LD_VAR 0 2
1316: ARRAY
1317: PPUSH
1318: LD_VAR 0 4
1322: PUSH
1323: LD_INT 29
1325: NEG
1326: PPUSH
1327: LD_INT 29
1329: PPUSH
1330: CALL_OW 12
1334: PLUS
1335: PPUSH
1336: CALL_OW 234
1340: GO 1304
1342: POP
1343: POP
// SetBName ( us_depot , Vulcano1 ) ;
1344: LD_INT 50
1346: PPUSH
1347: LD_STRING Vulcano1
1349: PPUSH
1350: CALL_OW 500
// hc_importance := 0 ;
1354: LD_ADDR_OWVAR 32
1358: PUSH
1359: LD_INT 0
1361: ST_TO_ADDR
// uc_side := 3 ;
1362: LD_ADDR_OWVAR 20
1366: PUSH
1367: LD_INT 3
1369: ST_TO_ADDR
// uc_nation := nation_russian ;
1370: LD_ADDR_OWVAR 21
1374: PUSH
1375: LD_INT 3
1377: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
1378: LD_ADDR_OWVAR 37
1382: PUSH
1383: LD_INT 22
1385: ST_TO_ADDR
// vc_engine := engine_combustion ;
1386: LD_ADDR_OWVAR 39
1390: PUSH
1391: LD_INT 1
1393: ST_TO_ADDR
// vc_control := control_manual ;
1394: LD_ADDR_OWVAR 38
1398: PUSH
1399: LD_INT 1
1401: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1402: LD_ADDR_OWVAR 40
1406: PUSH
1407: LD_INT 51
1409: ST_TO_ADDR
// un := CreateVehicle ;
1410: LD_ADDR_VAR 0 5
1414: PUSH
1415: CALL_OW 45
1419: ST_TO_ADDR
// PlaceUnitXY ( un , 97 , 138 , false ) ;
1420: LD_VAR 0 5
1424: PPUSH
1425: LD_INT 97
1427: PPUSH
1428: LD_INT 138
1430: PPUSH
1431: LD_INT 0
1433: PPUSH
1434: CALL_OW 48
// SetCargo ( un , mat_cans , 100 ) ;
1438: LD_VAR 0 5
1442: PPUSH
1443: LD_INT 1
1445: PPUSH
1446: LD_INT 100
1448: PPUSH
1449: CALL_OW 290
// SetFuel ( un , 45 ) ;
1453: LD_VAR 0 5
1457: PPUSH
1458: LD_INT 45
1460: PPUSH
1461: CALL_OW 240
// un := CreateVehicle ;
1465: LD_ADDR_VAR 0 5
1469: PUSH
1470: CALL_OW 45
1474: ST_TO_ADDR
// PlaceUnitXY ( un , 109 , 154 , false ) ;
1475: LD_VAR 0 5
1479: PPUSH
1480: LD_INT 109
1482: PPUSH
1483: LD_INT 154
1485: PPUSH
1486: LD_INT 0
1488: PPUSH
1489: CALL_OW 48
// SetCargo ( un , mat_cans , 100 ) ;
1493: LD_VAR 0 5
1497: PPUSH
1498: LD_INT 1
1500: PPUSH
1501: LD_INT 100
1503: PPUSH
1504: CALL_OW 290
// SetDir ( un , 1 ) ;
1508: LD_VAR 0 5
1512: PPUSH
1513: LD_INT 1
1515: PPUSH
1516: CALL_OW 233
// SetFuel ( un , 50 ) ;
1520: LD_VAR 0 5
1524: PPUSH
1525: LD_INT 50
1527: PPUSH
1528: CALL_OW 240
// russians_in_base := [ ] ;
1532: LD_ADDR_EXP 28
1536: PUSH
1537: EMPTY
1538: ST_TO_ADDR
// for i = 1 to [ 6 , 6 , 7 ] [ Difficulty ] do
1539: LD_ADDR_VAR 0 2
1543: PUSH
1544: DOUBLE
1545: LD_INT 1
1547: DEC
1548: ST_TO_ADDR
1549: LD_INT 6
1551: PUSH
1552: LD_INT 6
1554: PUSH
1555: LD_INT 7
1557: PUSH
1558: EMPTY
1559: LIST
1560: LIST
1561: LIST
1562: PUSH
1563: LD_OWVAR 67
1567: ARRAY
1568: PUSH
1569: FOR_TO
1570: IFFALSE 1651
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
1572: LD_INT 0
1574: PPUSH
1575: LD_INT 1
1577: PPUSH
1578: LD_INT 4
1580: PUSH
1581: LD_INT 5
1583: PUSH
1584: LD_INT 6
1586: PUSH
1587: EMPTY
1588: LIST
1589: LIST
1590: LIST
1591: PUSH
1592: LD_OWVAR 67
1596: ARRAY
1597: PPUSH
1598: CALL_OW 380
// un := CreateHuman ;
1602: LD_ADDR_VAR 0 5
1606: PUSH
1607: CALL_OW 44
1611: ST_TO_ADDR
// russians_in_base := russians_in_base ^ un ;
1612: LD_ADDR_EXP 28
1616: PUSH
1617: LD_EXP 28
1621: PUSH
1622: LD_VAR 0 5
1626: ADD
1627: ST_TO_ADDR
// PlaceUnitXYR ( un , 94 , 145 , 10 , false ) ;
1628: LD_VAR 0 5
1632: PPUSH
1633: LD_INT 94
1635: PPUSH
1636: LD_INT 145
1638: PPUSH
1639: LD_INT 10
1641: PPUSH
1642: LD_INT 0
1644: PPUSH
1645: CALL_OW 50
// end ;
1649: GO 1569
1651: POP
1652: POP
// end ;
1653: LD_VAR 0 1
1657: RET
// every 0 0$2 trigger UnitFilter ( russians_in_base , [ f_see , 1 ] ) do var enemy ;
1658: LD_EXP 28
1662: PPUSH
1663: LD_INT 101
1665: PUSH
1666: LD_INT 1
1668: PUSH
1669: EMPTY
1670: LIST
1671: LIST
1672: PPUSH
1673: CALL_OW 72
1677: IFFALSE 1743
1679: GO 1681
1681: DISABLE
1682: LD_INT 0
1684: PPUSH
// begin enemy := UnitFilter ( russians_in_base , [ f_see , 1 ] ) [ 1 ] ;
1685: LD_ADDR_VAR 0 1
1689: PUSH
1690: LD_EXP 28
1694: PPUSH
1695: LD_INT 101
1697: PUSH
1698: LD_INT 1
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: PPUSH
1705: CALL_OW 72
1709: PUSH
1710: LD_INT 1
1712: ARRAY
1713: ST_TO_ADDR
// ComAgressiveMove ( russians_in_base , GetX ( enemy ) , GetY ( enemy ) ) ;
1714: LD_EXP 28
1718: PPUSH
1719: LD_VAR 0 1
1723: PPUSH
1724: CALL_OW 250
1728: PPUSH
1729: LD_VAR 0 1
1733: PPUSH
1734: CALL_OW 251
1738: PPUSH
1739: CALL_OW 114
// end ;
1743: PPOPN 1
1745: END
// every 0 0$01 trigger GetDistUnitToSide ( us_depot , 1 ) < 40 do var i , un ;
1746: LD_INT 50
1748: PPUSH
1749: LD_INT 1
1751: PPUSH
1752: CALL 2122 0 2
1756: PUSH
1757: LD_INT 40
1759: LESS
1760: IFFALSE 1957
1762: GO 1764
1764: DISABLE
1765: LD_INT 0
1767: PPUSH
1768: PPUSH
// begin uc_side := 4 ;
1769: LD_ADDR_OWVAR 20
1773: PUSH
1774: LD_INT 4
1776: ST_TO_ADDR
// uc_nation := nation_american ;
1777: LD_ADDR_OWVAR 21
1781: PUSH
1782: LD_INT 1
1784: ST_TO_ADDR
// hc_importance := 0 ;
1785: LD_ADDR_OWVAR 32
1789: PUSH
1790: LD_INT 0
1792: ST_TO_ADDR
// for i = 1 to 7 do
1793: LD_ADDR_VAR 0 1
1797: PUSH
1798: DOUBLE
1799: LD_INT 1
1801: DEC
1802: ST_TO_ADDR
1803: LD_INT 7
1805: PUSH
1806: FOR_TO
1807: IFFALSE 1871
// begin PrepareHuman ( false , Rand ( 1 , 3 ) , us_skill ) ;
1809: LD_INT 0
1811: PPUSH
1812: LD_INT 1
1814: PPUSH
1815: LD_INT 3
1817: PPUSH
1818: CALL_OW 12
1822: PPUSH
1823: LD_EXP 26
1827: PPUSH
1828: CALL_OW 380
// un := CreateHuman ;
1832: LD_ADDR_VAR 0 2
1836: PUSH
1837: CALL_OW 44
1841: ST_TO_ADDR
// PlaceUnitArea ( un , base_resp , false ) ;
1842: LD_VAR 0 2
1846: PPUSH
1847: LD_INT 7
1849: PPUSH
1850: LD_INT 0
1852: PPUSH
1853: CALL_OW 49
// SetLives ( un , 10 ) ;
1857: LD_VAR 0 2
1861: PPUSH
1862: LD_INT 10
1864: PPUSH
1865: CALL_OW 234
// end ;
1869: GO 1806
1871: POP
1872: POP
// for i = 1 to 5 do
1873: LD_ADDR_VAR 0 1
1877: PUSH
1878: DOUBLE
1879: LD_INT 1
1881: DEC
1882: ST_TO_ADDR
1883: LD_INT 5
1885: PUSH
1886: FOR_TO
1887: IFFALSE 1955
// begin PrepareHuman ( false , 4 , us_skill ) ;
1889: LD_INT 0
1891: PPUSH
1892: LD_INT 4
1894: PPUSH
1895: LD_EXP 26
1899: PPUSH
1900: CALL_OW 380
// SetDir ( un , 1 ) ;
1904: LD_VAR 0 2
1908: PPUSH
1909: LD_INT 1
1911: PPUSH
1912: CALL_OW 233
// un := CreateHuman ;
1916: LD_ADDR_VAR 0 2
1920: PUSH
1921: CALL_OW 44
1925: ST_TO_ADDR
// PlaceUnitArea ( un , rekt , false ) ;
1926: LD_VAR 0 2
1930: PPUSH
1931: LD_INT 22
1933: PPUSH
1934: LD_INT 0
1936: PPUSH
1937: CALL_OW 49
// SetLives ( un , 10 ) ;
1941: LD_VAR 0 2
1945: PPUSH
1946: LD_INT 10
1948: PPUSH
1949: CALL_OW 234
// end ;
1953: GO 1886
1955: POP
1956: POP
// end ; end_of_file
1957: PPOPN 2
1959: END
// export function PrepareApeman2 ( n ) ; var un , i ; begin
1960: LD_INT 0
1962: PPUSH
1963: PPUSH
1964: PPUSH
// for i = 1 to n do
1965: LD_ADDR_VAR 0 4
1969: PUSH
1970: DOUBLE
1971: LD_INT 1
1973: DEC
1974: ST_TO_ADDR
1975: LD_VAR 0 1
1979: PUSH
1980: FOR_TO
1981: IFFALSE 2115
// begin uc_side := 0 ;
1983: LD_ADDR_OWVAR 20
1987: PUSH
1988: LD_INT 0
1990: ST_TO_ADDR
// uc_nation := 0 ;
1991: LD_ADDR_OWVAR 21
1995: PUSH
1996: LD_INT 0
1998: ST_TO_ADDR
// hc_class := class_apeman ;
1999: LD_ADDR_OWVAR 28
2003: PUSH
2004: LD_INT 12
2006: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
2007: LD_ADDR_OWVAR 31
2011: PUSH
2012: LD_INT 0
2014: PUSH
2015: LD_INT 0
2017: PUSH
2018: LD_INT 0
2020: PUSH
2021: LD_INT 0
2023: PUSH
2024: EMPTY
2025: LIST
2026: LIST
2027: LIST
2028: LIST
2029: ST_TO_ADDR
// hc_name :=  ;
2030: LD_ADDR_OWVAR 26
2034: PUSH
2035: LD_STRING 
2037: ST_TO_ADDR
// hc_gallery :=  ;
2038: LD_ADDR_OWVAR 33
2042: PUSH
2043: LD_STRING 
2045: ST_TO_ADDR
// hc_importance := 0 ;
2046: LD_ADDR_OWVAR 32
2050: PUSH
2051: LD_INT 0
2053: ST_TO_ADDR
// un := CreateHuman ;
2054: LD_ADDR_VAR 0 3
2058: PUSH
2059: CALL_OW 44
2063: ST_TO_ADDR
// PlaceUnitArea ( un , [ ape1 , ape2 ] [ Rand ( 1 , 2 ) ] , false ) ;
2064: LD_VAR 0 3
2068: PPUSH
2069: LD_INT 19
2071: PUSH
2072: LD_INT 20
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: PUSH
2079: LD_INT 1
2081: PPUSH
2082: LD_INT 2
2084: PPUSH
2085: CALL_OW 12
2089: ARRAY
2090: PPUSH
2091: LD_INT 0
2093: PPUSH
2094: CALL_OW 49
// Wait ( Rand ( 0 0$33 , 2 2$33 ) ) ;
2098: LD_INT 1155
2100: PPUSH
2101: LD_INT 5355
2103: PPUSH
2104: CALL_OW 12
2108: PPUSH
2109: CALL_OW 67
// end ;
2113: GO 1980
2115: POP
2116: POP
// end ;
2117: LD_VAR 0 2
2121: RET
// export function GetDistUnitToSide ( unit , side ) ; var tmp , dist ; begin
2122: LD_INT 0
2124: PPUSH
2125: PPUSH
2126: PPUSH
// tmp := NearestUnitToUnit ( FilterAllUnits ( [ f_side , side ] ) , unit ) ;
2127: LD_ADDR_VAR 0 4
2131: PUSH
2132: LD_INT 22
2134: PUSH
2135: LD_VAR 0 2
2139: PUSH
2140: EMPTY
2141: LIST
2142: LIST
2143: PPUSH
2144: CALL_OW 69
2148: PPUSH
2149: LD_VAR 0 1
2153: PPUSH
2154: CALL_OW 74
2158: ST_TO_ADDR
// dist := GetDistUnits ( unit , tmp ) ;
2159: LD_ADDR_VAR 0 5
2163: PUSH
2164: LD_VAR 0 1
2168: PPUSH
2169: LD_VAR 0 4
2173: PPUSH
2174: CALL_OW 296
2178: ST_TO_ADDR
// if dist >= 9999 then
2179: LD_VAR 0 5
2183: PUSH
2184: LD_INT 9999
2186: GREATEREQUAL
2187: IFFALSE 2200
// result := - 1 else
2189: LD_ADDR_VAR 0 3
2193: PUSH
2194: LD_INT 1
2196: NEG
2197: ST_TO_ADDR
2198: GO 2210
// result := dist ;
2200: LD_ADDR_VAR 0 3
2204: PUSH
2205: LD_VAR 0 5
2209: ST_TO_ADDR
// end ;
2210: LD_VAR 0 3
2214: RET
// export function NearestUnitToSide ( plist , side ) ; var i , tmp , unit ; begin
2215: LD_INT 0
2217: PPUSH
2218: PPUSH
2219: PPUSH
2220: PPUSH
// tmp := 9999 ;
2221: LD_ADDR_VAR 0 5
2225: PUSH
2226: LD_INT 9999
2228: ST_TO_ADDR
// for i = 1 to plist do
2229: LD_ADDR_VAR 0 4
2233: PUSH
2234: DOUBLE
2235: LD_INT 1
2237: DEC
2238: ST_TO_ADDR
2239: LD_VAR 0 1
2243: PUSH
2244: FOR_TO
2245: IFFALSE 2319
// if GetDistUnitToSide ( plist [ i ] , side ) < tmp then
2247: LD_VAR 0 1
2251: PUSH
2252: LD_VAR 0 4
2256: ARRAY
2257: PPUSH
2258: LD_VAR 0 2
2262: PPUSH
2263: CALL 2122 0 2
2267: PUSH
2268: LD_VAR 0 5
2272: LESS
2273: IFFALSE 2317
// begin tmp := GetDistUnitToSide ( plist [ i ] , side ) ;
2275: LD_ADDR_VAR 0 5
2279: PUSH
2280: LD_VAR 0 1
2284: PUSH
2285: LD_VAR 0 4
2289: ARRAY
2290: PPUSH
2291: LD_VAR 0 2
2295: PPUSH
2296: CALL 2122 0 2
2300: ST_TO_ADDR
// unit := plist [ i ] ;
2301: LD_ADDR_VAR 0 6
2305: PUSH
2306: LD_VAR 0 1
2310: PUSH
2311: LD_VAR 0 4
2315: ARRAY
2316: ST_TO_ADDR
// end ;
2317: GO 2244
2319: POP
2320: POP
// result := unit ;
2321: LD_ADDR_VAR 0 3
2325: PUSH
2326: LD_VAR 0 6
2330: ST_TO_ADDR
// end ;
2331: LD_VAR 0 3
2335: RET
// export function CalculateCommanderPoints ; var points , crates_collected , sib_collected , i ; begin
2336: LD_INT 0
2338: PPUSH
2339: PPUSH
2340: PPUSH
2341: PPUSH
2342: PPUSH
// points := [ 1000 , 2500 , 5000 ] [ Difficulty ] ;
2343: LD_ADDR_VAR 0 2
2347: PUSH
2348: LD_INT 1000
2350: PUSH
2351: LD_INT 2500
2353: PUSH
2354: LD_INT 5000
2356: PUSH
2357: EMPTY
2358: LIST
2359: LIST
2360: LIST
2361: PUSH
2362: LD_OWVAR 67
2366: ARRAY
2367: ST_TO_ADDR
// points := points + ( - 1 * FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) * 30 ) ;
2368: LD_ADDR_VAR 0 2
2372: PUSH
2373: LD_VAR 0 2
2377: PUSH
2378: LD_INT 1
2380: NEG
2381: PUSH
2382: LD_INT 22
2384: PUSH
2385: LD_OWVAR 2
2389: PUSH
2390: EMPTY
2391: LIST
2392: LIST
2393: PUSH
2394: LD_INT 21
2396: PUSH
2397: LD_INT 3
2399: PUSH
2400: EMPTY
2401: LIST
2402: LIST
2403: PUSH
2404: EMPTY
2405: LIST
2406: LIST
2407: PPUSH
2408: CALL_OW 69
2412: MUL
2413: PUSH
2414: LD_INT 30
2416: MUL
2417: PLUS
2418: ST_TO_ADDR
// points := points + ( kill_counter * 10 ) ;
2419: LD_ADDR_VAR 0 2
2423: PUSH
2424: LD_VAR 0 2
2428: PUSH
2429: LD_EXP 17
2433: PUSH
2434: LD_INT 10
2436: MUL
2437: PLUS
2438: ST_TO_ADDR
// points := points + ( - 1 * kill_counter * 20 ) ;
2439: LD_ADDR_VAR 0 2
2443: PUSH
2444: LD_VAR 0 2
2448: PUSH
2449: LD_INT 1
2451: NEG
2452: PUSH
2453: LD_EXP 17
2457: MUL
2458: PUSH
2459: LD_INT 20
2461: MUL
2462: PLUS
2463: ST_TO_ADDR
// points := points + ( - 1 * ( ( tick / 35 ) / 60 ) * 25 ) ;
2464: LD_ADDR_VAR 0 2
2468: PUSH
2469: LD_VAR 0 2
2473: PUSH
2474: LD_INT 1
2476: NEG
2477: PUSH
2478: LD_OWVAR 1
2482: PUSH
2483: LD_INT 35
2485: DIVREAL
2486: PUSH
2487: LD_INT 60
2489: DIVREAL
2490: MUL
2491: PUSH
2492: LD_INT 25
2494: MUL
2495: PLUS
2496: ST_TO_ADDR
// points := points + ( tech_counter * 15 ) ;
2497: LD_ADDR_VAR 0 2
2501: PUSH
2502: LD_VAR 0 2
2506: PUSH
2507: LD_EXP 19
2511: PUSH
2512: LD_INT 15
2514: MUL
2515: PLUS
2516: ST_TO_ADDR
// points := points + ( - 1 * sib_contamin_counter ) * 1000 ;
2517: LD_ADDR_VAR 0 2
2521: PUSH
2522: LD_VAR 0 2
2526: PUSH
2527: LD_INT 1
2529: NEG
2530: PUSH
2531: LD_EXP 20
2535: MUL
2536: PUSH
2537: LD_INT 1000
2539: MUL
2540: PLUS
2541: ST_TO_ADDR
// points := points + ( veh_counter * 5 ) ;
2542: LD_ADDR_VAR 0 2
2546: PUSH
2547: LD_VAR 0 2
2551: PUSH
2552: LD_EXP 18
2556: PUSH
2557: LD_INT 5
2559: MUL
2560: PLUS
2561: ST_TO_ADDR
// result := points ;
2562: LD_ADDR_VAR 0 1
2566: PUSH
2567: LD_VAR 0 2
2571: ST_TO_ADDR
// end ; end_of_file
2572: LD_VAR 0 1
2576: RET
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2577: LD_VAR 0 1
2581: PPUSH
2582: CALL 35290 0 1
// if un = ru_cargo then
2586: LD_VAR 0 1
2590: PUSH
2591: LD_EXP 31
2595: EQUAL
2596: IFFALSE 2606
// ru_cargo := 0 ;
2598: LD_ADDR_EXP 31
2602: PUSH
2603: LD_INT 0
2605: ST_TO_ADDR
// if GetSide ( un ) = your_side then
2606: LD_VAR 0 1
2610: PPUSH
2611: CALL_OW 255
2615: PUSH
2616: LD_OWVAR 2
2620: EQUAL
2621: IFFALSE 2637
// dead_counter := dead_counter + 1 ;
2623: LD_ADDR_EXP 16
2627: PUSH
2628: LD_EXP 16
2632: PUSH
2633: LD_INT 1
2635: PLUS
2636: ST_TO_ADDR
// if GetSide ( un ) in FilterAllUnits ( [ f_enemy , your_side ] ) then
2637: LD_VAR 0 1
2641: PPUSH
2642: CALL_OW 255
2646: PUSH
2647: LD_INT 81
2649: PUSH
2650: LD_OWVAR 2
2654: PUSH
2655: EMPTY
2656: LIST
2657: LIST
2658: PPUSH
2659: CALL_OW 69
2663: IN
2664: IFFALSE 2680
// kill_counter := kill_counter + 1 ;
2666: LD_ADDR_EXP 17
2670: PUSH
2671: LD_EXP 17
2675: PUSH
2676: LD_INT 1
2678: PLUS
2679: ST_TO_ADDR
// if un = player_commander then
2680: LD_VAR 0 1
2684: PUSH
2685: LD_EXP 11
2689: EQUAL
2690: IFFALSE 2699
// YouLost ( vulcano-lost ) ;
2692: LD_STRING vulcano-lost
2694: PPUSH
2695: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) then
2699: LD_VAR 0 1
2703: PUSH
2704: LD_INT 22
2706: PUSH
2707: LD_INT 3
2709: PUSH
2710: EMPTY
2711: LIST
2712: LIST
2713: PUSH
2714: LD_INT 21
2716: PUSH
2717: LD_INT 3
2719: PUSH
2720: EMPTY
2721: LIST
2722: LIST
2723: PUSH
2724: EMPTY
2725: LIST
2726: LIST
2727: PPUSH
2728: CALL_OW 69
2732: IN
2733: IFFALSE 2849
// begin if GetBType ( un ) = b_turret or GetBType ( un ) = b_siberite_power then
2735: LD_VAR 0 1
2739: PPUSH
2740: CALL_OW 266
2744: PUSH
2745: LD_INT 33
2747: EQUAL
2748: PUSH
2749: LD_VAR 0 1
2753: PPUSH
2754: CALL_OW 266
2758: PUSH
2759: LD_INT 28
2761: EQUAL
2762: OR
2763: IFFALSE 2849
// begin ru_blist := ru_blist ^ GetBType ( un ) ;
2765: LD_ADDR_EXP 32
2769: PUSH
2770: LD_EXP 32
2774: PUSH
2775: LD_VAR 0 1
2779: PPUSH
2780: CALL_OW 266
2784: ADD
2785: ST_TO_ADDR
// ru_blist := ru_blist ^ GetX ( un ) ;
2786: LD_ADDR_EXP 32
2790: PUSH
2791: LD_EXP 32
2795: PUSH
2796: LD_VAR 0 1
2800: PPUSH
2801: CALL_OW 250
2805: ADD
2806: ST_TO_ADDR
// ru_blist := ru_blist ^ GetY ( un ) ;
2807: LD_ADDR_EXP 32
2811: PUSH
2812: LD_EXP 32
2816: PUSH
2817: LD_VAR 0 1
2821: PPUSH
2822: CALL_OW 251
2826: ADD
2827: ST_TO_ADDR
// ru_blist := ru_blist ^ GetDir ( un ) ;
2828: LD_ADDR_EXP 32
2832: PUSH
2833: LD_EXP 32
2837: PUSH
2838: LD_VAR 0 1
2842: PPUSH
2843: CALL_OW 254
2847: ADD
2848: ST_TO_ADDR
// end ; end ; if un in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) then
2849: LD_VAR 0 1
2853: PUSH
2854: LD_INT 22
2856: PUSH
2857: LD_INT 8
2859: PUSH
2860: EMPTY
2861: LIST
2862: LIST
2863: PUSH
2864: LD_INT 21
2866: PUSH
2867: LD_INT 3
2869: PUSH
2870: EMPTY
2871: LIST
2872: LIST
2873: PUSH
2874: EMPTY
2875: LIST
2876: LIST
2877: PPUSH
2878: CALL_OW 69
2882: IN
2883: IFFALSE 3027
// begin if GetBType ( un ) = b_barracks then
2885: LD_VAR 0 1
2889: PPUSH
2890: CALL_OW 266
2894: PUSH
2895: LD_INT 5
2897: EQUAL
2898: IFFALSE 2916
// legion_blist := legion_blist ^ b_armoury else
2900: LD_ADDR_EXP 40
2904: PUSH
2905: LD_EXP 40
2909: PUSH
2910: LD_INT 4
2912: ADD
2913: ST_TO_ADDR
2914: GO 2964
// if not GetBType ( un ) in [ b_warehouse , b_lab , b_lab_full ] then
2916: LD_VAR 0 1
2920: PPUSH
2921: CALL_OW 266
2925: PUSH
2926: LD_INT 1
2928: PUSH
2929: LD_INT 6
2931: PUSH
2932: LD_INT 8
2934: PUSH
2935: EMPTY
2936: LIST
2937: LIST
2938: LIST
2939: IN
2940: NOT
2941: IFFALSE 2964
// legion_blist := legion_blist ^ GetBType ( un ) ;
2943: LD_ADDR_EXP 40
2947: PUSH
2948: LD_EXP 40
2952: PUSH
2953: LD_VAR 0 1
2957: PPUSH
2958: CALL_OW 266
2962: ADD
2963: ST_TO_ADDR
// legion_blist := legion_blist ^ GetX ( un ) ;
2964: LD_ADDR_EXP 40
2968: PUSH
2969: LD_EXP 40
2973: PUSH
2974: LD_VAR 0 1
2978: PPUSH
2979: CALL_OW 250
2983: ADD
2984: ST_TO_ADDR
// legion_blist := legion_blist ^ GetY ( un ) ;
2985: LD_ADDR_EXP 40
2989: PUSH
2990: LD_EXP 40
2994: PUSH
2995: LD_VAR 0 1
2999: PPUSH
3000: CALL_OW 251
3004: ADD
3005: ST_TO_ADDR
// legion_blist := legion_blist ^ GetDir ( un ) ;
3006: LD_ADDR_EXP 40
3010: PUSH
3011: LD_EXP 40
3015: PUSH
3016: LD_VAR 0 1
3020: PPUSH
3021: CALL_OW 254
3025: ADD
3026: ST_TO_ADDR
// end ; if un in legion_force then
3027: LD_VAR 0 1
3031: PUSH
3032: LD_EXP 37
3036: IN
3037: IFFALSE 3055
// legion_force := legion_force diff un ;
3039: LD_ADDR_EXP 37
3043: PUSH
3044: LD_EXP 37
3048: PUSH
3049: LD_VAR 0 1
3053: DIFF
3054: ST_TO_ADDR
// if un in ru_force then
3055: LD_VAR 0 1
3059: PUSH
3060: LD_EXP 29
3064: IN
3065: IFFALSE 3083
// ru_force := ru_force diff un ;
3067: LD_ADDR_EXP 29
3071: PUSH
3072: LD_EXP 29
3076: PUSH
3077: LD_VAR 0 1
3081: DIFF
3082: ST_TO_ADDR
// if un in al_force then
3083: LD_VAR 0 1
3087: PUSH
3088: LD_EXP 44
3092: IN
3093: IFFALSE 3111
// al_force := al_force diff un ;
3095: LD_ADDR_EXP 44
3099: PUSH
3100: LD_EXP 44
3104: PUSH
3105: LD_VAR 0 1
3109: DIFF
3110: ST_TO_ADDR
// end ;
3111: PPOPN 1
3113: END
// on BuildingComplete ( b ) do var i ;
3114: LD_INT 0
3116: PPUSH
// begin if GetSide ( b ) = 8 then
3117: LD_VAR 0 1
3121: PPUSH
3122: CALL_OW 255
3126: PUSH
3127: LD_INT 8
3129: EQUAL
3130: IFFALSE 3170
// for i = 1 to 4 do
3132: LD_ADDR_VAR 0 2
3136: PUSH
3137: DOUBLE
3138: LD_INT 1
3140: DEC
3141: ST_TO_ADDR
3142: LD_INT 4
3144: PUSH
3145: FOR_TO
3146: IFFALSE 3168
// legion_blist := Delete ( legion_blist , 1 ) ;
3148: LD_ADDR_EXP 40
3152: PUSH
3153: LD_EXP 40
3157: PPUSH
3158: LD_INT 1
3160: PPUSH
3161: CALL_OW 3
3165: ST_TO_ADDR
3166: GO 3145
3168: POP
3169: POP
// if GetSide ( b ) = 3 then
3170: LD_VAR 0 1
3174: PPUSH
3175: CALL_OW 255
3179: PUSH
3180: LD_INT 3
3182: EQUAL
3183: IFFALSE 3223
// for i = 1 to 4 do
3185: LD_ADDR_VAR 0 2
3189: PUSH
3190: DOUBLE
3191: LD_INT 1
3193: DEC
3194: ST_TO_ADDR
3195: LD_INT 4
3197: PUSH
3198: FOR_TO
3199: IFFALSE 3221
// ru_blist := Delete ( ru_blist , 1 ) ;
3201: LD_ADDR_EXP 32
3205: PUSH
3206: LD_EXP 32
3210: PPUSH
3211: LD_INT 1
3213: PPUSH
3214: CALL_OW 3
3218: ST_TO_ADDR
3219: GO 3198
3221: POP
3222: POP
// end ;
3223: PPOPN 2
3225: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
3226: LD_VAR 0 1
3230: PPUSH
3231: LD_VAR 0 2
3235: PPUSH
3236: CALL 35410 0 2
// if not GetWeapon ( veh ) in [ ru_cargo_bay , ru_siberium_rocket ] then
3240: LD_VAR 0 1
3244: PPUSH
3245: CALL_OW 264
3249: PUSH
3250: LD_INT 51
3252: PUSH
3253: LD_INT 48
3255: PUSH
3256: EMPTY
3257: LIST
3258: LIST
3259: IN
3260: NOT
3261: IFFALSE 3309
// begin if GetSide ( veh ) = 3 then
3263: LD_VAR 0 1
3267: PPUSH
3268: CALL_OW 255
3272: PUSH
3273: LD_INT 3
3275: EQUAL
3276: IFFALSE 3309
// begin ComMoveXY ( veh , 149 , 8 ) ;
3278: LD_VAR 0 1
3282: PPUSH
3283: LD_INT 149
3285: PPUSH
3286: LD_INT 8
3288: PPUSH
3289: CALL_OW 111
// ru_force := ru_force ^ veh ;
3293: LD_ADDR_EXP 29
3297: PUSH
3298: LD_EXP 29
3302: PUSH
3303: LD_VAR 0 1
3307: ADD
3308: ST_TO_ADDR
// end ; end ; if not GetWeapon ( veh ) in [ ar_cargo_bay , ar_control_tower ] then
3309: LD_VAR 0 1
3313: PPUSH
3314: CALL_OW 264
3318: PUSH
3319: LD_INT 32
3321: PUSH
3322: LD_INT 31
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: IN
3329: NOT
3330: IFFALSE 3363
// begin if GetSide ( veh ) = 8 then
3332: LD_VAR 0 1
3336: PPUSH
3337: CALL_OW 255
3341: PUSH
3342: LD_INT 8
3344: EQUAL
3345: IFFALSE 3363
// legion_force := legion_force ^ veh ;
3347: LD_ADDR_EXP 37
3351: PUSH
3352: LD_EXP 37
3356: PUSH
3357: LD_VAR 0 1
3361: ADD
3362: ST_TO_ADDR
// end ; if GetSide ( veh ) = 3 and not ru_cargo and GetWeapon ( veh ) = ru_cargo_bay then
3363: LD_VAR 0 1
3367: PPUSH
3368: CALL_OW 255
3372: PUSH
3373: LD_INT 3
3375: EQUAL
3376: PUSH
3377: LD_EXP 31
3381: NOT
3382: AND
3383: PUSH
3384: LD_VAR 0 1
3388: PPUSH
3389: CALL_OW 264
3393: PUSH
3394: LD_INT 51
3396: EQUAL
3397: AND
3398: IFFALSE 3410
// ru_cargo := veh ;
3400: LD_ADDR_EXP 31
3404: PUSH
3405: LD_VAR 0 1
3409: ST_TO_ADDR
// if GetSide ( veh ) = 7 and your_side <> 7 then
3410: LD_VAR 0 1
3414: PPUSH
3415: CALL_OW 255
3419: PUSH
3420: LD_INT 7
3422: EQUAL
3423: PUSH
3424: LD_OWVAR 2
3428: PUSH
3429: LD_INT 7
3431: NONEQUAL
3432: AND
3433: IFFALSE 3451
// al_force := al_force ^ veh ;
3435: LD_ADDR_EXP 44
3439: PUSH
3440: LD_EXP 44
3444: PUSH
3445: LD_VAR 0 1
3449: ADD
3450: ST_TO_ADDR
// if GetSide ( veh ) = your_side then
3451: LD_VAR 0 1
3455: PPUSH
3456: CALL_OW 255
3460: PUSH
3461: LD_OWVAR 2
3465: EQUAL
3466: IFFALSE 3482
// veh_counter := veh_counter + 1 ;
3468: LD_ADDR_EXP 18
3472: PUSH
3473: LD_EXP 18
3477: PUSH
3478: LD_INT 1
3480: PLUS
3481: ST_TO_ADDR
// end ;
3482: PPOPN 2
3484: END
// on SibDepositContaminated ( contaminating_scientist , x_of_deposit , y_of_deposit ) do begin if GetSide ( contaminating_scientist ) <> your_side then
3485: LD_VAR 0 1
3489: PPUSH
3490: CALL_OW 255
3494: PUSH
3495: LD_OWVAR 2
3499: NONEQUAL
3500: IFFALSE 3516
// sib_contamin_counter := sib_contamin_counter + 1 ;
3502: LD_ADDR_EXP 20
3506: PUSH
3507: LD_EXP 20
3511: PUSH
3512: LD_INT 1
3514: PLUS
3515: ST_TO_ADDR
// end ;
3516: PPOPN 3
3518: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = your_side then
3519: LD_VAR 0 2
3523: PPUSH
3524: CALL_OW 255
3528: PUSH
3529: LD_OWVAR 2
3533: EQUAL
3534: IFFALSE 3550
// tech_counter := tech_counter + 1 ;
3536: LD_ADDR_EXP 19
3540: PUSH
3541: LD_EXP 19
3545: PUSH
3546: LD_INT 1
3548: PLUS
3549: ST_TO_ADDR
// if tech = 53 and your_side = 1 then
3550: LD_VAR 0 1
3554: PUSH
3555: LD_INT 53
3557: EQUAL
3558: PUSH
3559: LD_OWVAR 2
3563: PUSH
3564: LD_INT 1
3566: EQUAL
3567: AND
3568: IFFALSE 3583
// SetTech ( 80 , 1 , state_researched ) ;
3570: LD_INT 80
3572: PPUSH
3573: LD_INT 1
3575: PPUSH
3576: LD_INT 2
3578: PPUSH
3579: CALL_OW 322
// end ;
3583: PPOPN 2
3585: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 8 and GetControl ( un ) = control_remote then
3586: LD_VAR 0 1
3590: PPUSH
3591: CALL_OW 255
3595: PUSH
3596: LD_INT 8
3598: EQUAL
3599: PUSH
3600: LD_VAR 0 1
3604: PPUSH
3605: CALL_OW 263
3609: PUSH
3610: LD_INT 2
3612: EQUAL
3613: AND
3614: IFFALSE 3625
// ComAutodestruct ( un ) ;
3616: LD_VAR 0 1
3620: PPUSH
3621: CALL 72487 0 1
// end ;
3625: PPOPN 1
3627: END
// on SailEvent ( event ) do begin case event of event_legion_attack :
3628: LD_VAR 0 1
3632: PUSH
3633: LD_EXP 21
3637: DOUBLE
3638: EQUAL
3639: IFTRUE 3643
3641: GO 3650
3643: POP
// LegionAttack ( ) ; event_alliance_attack :
3644: CALL 11363 0 0
3648: GO 3685
3650: LD_EXP 23
3654: DOUBLE
3655: EQUAL
3656: IFTRUE 3660
3658: GO 3667
3660: POP
// AllianceAttack ( ) ; event_russian_attack :
3661: CALL 18852 0 0
3665: GO 3685
3667: LD_EXP 22
3671: DOUBLE
3672: EQUAL
3673: IFTRUE 3677
3675: GO 3684
3677: POP
// RussianAttack ( ) ; end ;
3678: CALL 7589 0 0
3682: GO 3685
3684: POP
// end ;
3685: PPOPN 1
3687: END
// every 9 9$30 trigger FilterAllUnits ( [ f_class , class_apeman ] ) < 9 and tick < 50 50$00 do
3688: LD_INT 25
3690: PUSH
3691: LD_INT 12
3693: PUSH
3694: EMPTY
3695: LIST
3696: LIST
3697: PPUSH
3698: CALL_OW 69
3702: PUSH
3703: LD_INT 9
3705: LESS
3706: PUSH
3707: LD_OWVAR 1
3711: PUSH
3712: LD_INT 105000
3714: LESS
3715: AND
3716: IFFALSE 3749
3718: GO 3720
3720: DISABLE
// begin enable ;
3721: ENABLE
// PrepareApeman2 ( 8 - ( FilterAllUnits ( [ f_class , class_apeman ] ) + 0 ) ) ;
3722: LD_INT 8
3724: PUSH
3725: LD_INT 25
3727: PUSH
3728: LD_INT 12
3730: PUSH
3731: EMPTY
3732: LIST
3733: LIST
3734: PPUSH
3735: CALL_OW 69
3739: PUSH
3740: LD_INT 0
3742: PLUS
3743: MINUS
3744: PPUSH
3745: CALL 1960 0 1
// end ;
3749: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
3750: LD_VAR 0 1
3754: PPUSH
3755: LD_VAR 0 2
3759: PPUSH
3760: LD_VAR 0 3
3764: PPUSH
3765: CALL 35386 0 3
// end ;
3769: PPOPN 3
3771: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
3772: LD_VAR 0 1
3776: PPUSH
3777: CALL 35394 0 1
// end ; end_of_file
3781: PPOPN 1
3783: END
// export ru_force , ru_skill , ru_cargo , ru_blist , ru_vlist , ru_amount , ru_time , ru_teleport_exit ; export function PrepareRussian ; var i , un , ru_depot , ru_factory , ru_teleport , ru_barracks , ru_bunkers , ru_buildings , ru_vehicles , ru_humans ; begin
3784: LD_INT 0
3786: PPUSH
3787: PPUSH
3788: PPUSH
3789: PPUSH
3790: PPUSH
3791: PPUSH
3792: PPUSH
3793: PPUSH
3794: PPUSH
3795: PPUSH
3796: PPUSH
// uc_side := 3 ;
3797: LD_ADDR_OWVAR 20
3801: PUSH
3802: LD_INT 3
3804: ST_TO_ADDR
// uc_nation := nation_russian ;
3805: LD_ADDR_OWVAR 21
3809: PUSH
3810: LD_INT 3
3812: ST_TO_ADDR
// ru_depot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
3813: LD_ADDR_VAR 0 4
3817: PUSH
3818: LD_INT 22
3820: PUSH
3821: LD_INT 3
3823: PUSH
3824: EMPTY
3825: LIST
3826: LIST
3827: PUSH
3828: LD_INT 30
3830: PUSH
3831: LD_INT 1
3833: PUSH
3834: EMPTY
3835: LIST
3836: LIST
3837: PUSH
3838: EMPTY
3839: LIST
3840: LIST
3841: PPUSH
3842: CALL_OW 69
3846: PUSH
3847: LD_INT 1
3849: ARRAY
3850: ST_TO_ADDR
// ru_factory := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3851: LD_ADDR_VAR 0 5
3855: PUSH
3856: LD_INT 22
3858: PUSH
3859: LD_INT 3
3861: PUSH
3862: EMPTY
3863: LIST
3864: LIST
3865: PUSH
3866: LD_INT 30
3868: PUSH
3869: LD_INT 3
3871: PUSH
3872: EMPTY
3873: LIST
3874: LIST
3875: PUSH
3876: EMPTY
3877: LIST
3878: LIST
3879: PPUSH
3880: CALL_OW 69
3884: PUSH
3885: LD_INT 1
3887: ARRAY
3888: ST_TO_ADDR
// ru_teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] ;
3889: LD_ADDR_VAR 0 6
3893: PUSH
3894: LD_INT 22
3896: PUSH
3897: LD_INT 3
3899: PUSH
3900: EMPTY
3901: LIST
3902: LIST
3903: PUSH
3904: LD_INT 30
3906: PUSH
3907: LD_INT 34
3909: PUSH
3910: EMPTY
3911: LIST
3912: LIST
3913: PUSH
3914: EMPTY
3915: LIST
3916: LIST
3917: PPUSH
3918: CALL_OW 69
3922: PUSH
3923: LD_INT 1
3925: ARRAY
3926: ST_TO_ADDR
// ru_bunkers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
3927: LD_ADDR_VAR 0 8
3931: PUSH
3932: LD_INT 22
3934: PUSH
3935: LD_INT 3
3937: PUSH
3938: EMPTY
3939: LIST
3940: LIST
3941: PUSH
3942: LD_INT 30
3944: PUSH
3945: LD_INT 33
3947: PUSH
3948: EMPTY
3949: LIST
3950: LIST
3951: PUSH
3952: EMPTY
3953: LIST
3954: LIST
3955: PPUSH
3956: CALL_OW 69
3960: ST_TO_ADDR
// ru_barracks := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
3961: LD_ADDR_VAR 0 7
3965: PUSH
3966: LD_INT 22
3968: PUSH
3969: LD_INT 3
3971: PUSH
3972: EMPTY
3973: LIST
3974: LIST
3975: PUSH
3976: LD_INT 30
3978: PUSH
3979: LD_INT 5
3981: PUSH
3982: EMPTY
3983: LIST
3984: LIST
3985: PUSH
3986: EMPTY
3987: LIST
3988: LIST
3989: PPUSH
3990: CALL_OW 69
3994: PUSH
3995: LD_INT 1
3997: ARRAY
3998: ST_TO_ADDR
// ru_blist := [ ] ;
3999: LD_ADDR_EXP 32
4003: PUSH
4004: EMPTY
4005: ST_TO_ADDR
// ru_vlist := [ ] ;
4006: LD_ADDR_EXP 33
4010: PUSH
4011: EMPTY
4012: ST_TO_ADDR
// ru_teleport_exit := [ 183 , 62 , 147 , 44 ] ;
4013: LD_ADDR_EXP 36
4017: PUSH
4018: LD_INT 183
4020: PUSH
4021: LD_INT 62
4023: PUSH
4024: LD_INT 147
4026: PUSH
4027: LD_INT 44
4029: PUSH
4030: EMPTY
4031: LIST
4032: LIST
4033: LIST
4034: LIST
4035: ST_TO_ADDR
// TeleportExit ( FilterAllUnits ( [ f_btype , b_teleport ] ) [ 1 ] , ru_teleport_exit [ 1 ] , ru_teleport_exit [ 2 ] ) ;
4036: LD_INT 30
4038: PUSH
4039: LD_INT 34
4041: PUSH
4042: EMPTY
4043: LIST
4044: LIST
4045: PPUSH
4046: CALL_OW 69
4050: PUSH
4051: LD_INT 1
4053: ARRAY
4054: PPUSH
4055: LD_EXP 36
4059: PUSH
4060: LD_INT 1
4062: ARRAY
4063: PPUSH
4064: LD_EXP 36
4068: PUSH
4069: LD_INT 2
4071: ARRAY
4072: PPUSH
4073: CALL_OW 243
// ru_amount := [ 4 , 5 , 6 ] [ Difficulty ] ;
4077: LD_ADDR_EXP 34
4081: PUSH
4082: LD_INT 4
4084: PUSH
4085: LD_INT 5
4087: PUSH
4088: LD_INT 6
4090: PUSH
4091: EMPTY
4092: LIST
4093: LIST
4094: LIST
4095: PUSH
4096: LD_OWVAR 67
4100: ARRAY
4101: ST_TO_ADDR
// SetResourceType ( GetBase ( ru_depot ) , mat_cans , 3000 ) ;
4102: LD_VAR 0 4
4106: PPUSH
4107: CALL_OW 274
4111: PPUSH
4112: LD_INT 1
4114: PPUSH
4115: LD_INT 3000
4117: PPUSH
4118: CALL_OW 277
// SetResourceType ( GetBase ( ru_depot ) , mat_oil , 300 ) ;
4122: LD_VAR 0 4
4126: PPUSH
4127: CALL_OW 274
4131: PPUSH
4132: LD_INT 2
4134: PPUSH
4135: LD_INT 300
4137: PPUSH
4138: CALL_OW 277
// hc_gallery :=  ;
4142: LD_ADDR_OWVAR 33
4146: PUSH
4147: LD_STRING 
4149: ST_TO_ADDR
// hc_name :=  ;
4150: LD_ADDR_OWVAR 26
4154: PUSH
4155: LD_STRING 
4157: ST_TO_ADDR
// hc_importance := 0 ;
4158: LD_ADDR_OWVAR 32
4162: PUSH
4163: LD_INT 0
4165: ST_TO_ADDR
// ru_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
4166: LD_ADDR_EXP 30
4170: PUSH
4171: LD_INT 5
4173: PUSH
4174: LD_INT 6
4176: PUSH
4177: LD_INT 7
4179: PUSH
4180: EMPTY
4181: LIST
4182: LIST
4183: LIST
4184: PUSH
4185: LD_OWVAR 67
4189: ARRAY
4190: ST_TO_ADDR
// for i = 1 to 6 do
4191: LD_ADDR_VAR 0 2
4195: PUSH
4196: DOUBLE
4197: LD_INT 1
4199: DEC
4200: ST_TO_ADDR
4201: LD_INT 6
4203: PUSH
4204: FOR_TO
4205: IFFALSE 4363
// begin PrepareHuman ( false , class_bazooker , ru_skill ) ;
4207: LD_INT 0
4209: PPUSH
4210: LD_INT 9
4212: PPUSH
4213: LD_EXP 30
4217: PPUSH
4218: CALL_OW 380
// un := CreateHuman ;
4222: LD_ADDR_VAR 0 3
4226: PUSH
4227: CALL_OW 44
4231: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_barracks ) ;
4232: LD_VAR 0 3
4236: PPUSH
4237: LD_VAR 0 7
4241: PPUSH
4242: CALL_OW 52
// PrepareHuman ( false , 4 , ru_skill ) ;
4246: LD_INT 0
4248: PPUSH
4249: LD_INT 4
4251: PPUSH
4252: LD_EXP 30
4256: PPUSH
4257: CALL_OW 380
// un := CreateHuman ;
4261: LD_ADDR_VAR 0 3
4265: PUSH
4266: CALL_OW 44
4270: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
4271: LD_VAR 0 3
4275: PPUSH
4276: LD_INT 24
4278: PPUSH
4279: CALL_OW 52
// PrepareHuman ( false , 3 , ru_skill ) ;
4283: LD_INT 0
4285: PPUSH
4286: LD_INT 3
4288: PPUSH
4289: LD_EXP 30
4293: PPUSH
4294: CALL_OW 380
// un := CreateHuman ;
4298: LD_ADDR_VAR 0 3
4302: PUSH
4303: CALL_OW 44
4307: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_factory ) ;
4308: LD_VAR 0 3
4312: PPUSH
4313: LD_VAR 0 5
4317: PPUSH
4318: CALL_OW 52
// PrepareHuman ( false , 2 , ru_skill ) ;
4322: LD_INT 0
4324: PPUSH
4325: LD_INT 2
4327: PPUSH
4328: LD_EXP 30
4332: PPUSH
4333: CALL_OW 380
// un := CreateHuman ;
4337: LD_ADDR_VAR 0 3
4341: PUSH
4342: CALL_OW 44
4346: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_depot ) ;
4347: LD_VAR 0 3
4351: PPUSH
4352: LD_VAR 0 4
4356: PPUSH
4357: CALL_OW 52
// end ;
4361: GO 4204
4363: POP
4364: POP
// if Difficulty > 1 then
4365: LD_OWVAR 67
4369: PUSH
4370: LD_INT 1
4372: GREATER
4373: IFFALSE 4406
// begin un := CreateBehemoth ( 3 , 160 , 36 , 3 ) ;
4375: LD_ADDR_VAR 0 3
4379: PUSH
4380: LD_INT 3
4382: PPUSH
4383: LD_INT 160
4385: PPUSH
4386: LD_INT 36
4388: PPUSH
4389: LD_INT 3
4391: PPUSH
4392: CALL 80416 0 4
4396: ST_TO_ADDR
// ComHold ( un ) ;
4397: LD_VAR 0 3
4401: PPUSH
4402: CALL_OW 140
// end ; russian_prepared := true ;
4406: LD_ADDR_EXP 2
4410: PUSH
4411: LD_INT 1
4413: ST_TO_ADDR
// ComConstruct ( ru_factory , ru_medium_wheeled , 3 , control_computer , ru_cargo_bay ) ;
4414: LD_VAR 0 5
4418: PPUSH
4419: LD_INT 21
4421: PPUSH
4422: LD_INT 3
4424: PPUSH
4425: LD_INT 3
4427: PPUSH
4428: LD_INT 51
4430: PPUSH
4431: CALL_OW 125
// end ;
4435: LD_VAR 0 1
4439: RET
// every 0 0$02 trigger FilterAllUnits ( [ f_side , 3 ] ) > 0 and russian_prepared do var ru_depot , ru_factory , ru_teleport , ru_bunkers , ru_buildings , ru_vehicles , ru_humans , ru_barracks , ru_engs , ru_mech , ru_sci , i , tmp , filter , cr , sib_bomb ;
4440: LD_INT 22
4442: PUSH
4443: LD_INT 3
4445: PUSH
4446: EMPTY
4447: LIST
4448: LIST
4449: PPUSH
4450: CALL_OW 69
4454: PUSH
4455: LD_INT 0
4457: GREATER
4458: PUSH
4459: LD_EXP 2
4463: AND
4464: IFFALSE 6614
4466: GO 4468
4468: DISABLE
4469: LD_INT 0
4471: PPUSH
4472: PPUSH
4473: PPUSH
4474: PPUSH
4475: PPUSH
4476: PPUSH
4477: PPUSH
4478: PPUSH
4479: PPUSH
4480: PPUSH
4481: PPUSH
4482: PPUSH
4483: PPUSH
4484: PPUSH
4485: PPUSH
4486: PPUSH
// begin enable ;
4487: ENABLE
// ru_depot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
4488: LD_ADDR_VAR 0 1
4492: PUSH
4493: LD_INT 22
4495: PUSH
4496: LD_INT 3
4498: PUSH
4499: EMPTY
4500: LIST
4501: LIST
4502: PUSH
4503: LD_INT 30
4505: PUSH
4506: LD_INT 1
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: PPUSH
4517: CALL_OW 69
4521: PUSH
4522: LD_INT 1
4524: ARRAY
4525: ST_TO_ADDR
// ru_factory := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
4526: LD_ADDR_VAR 0 2
4530: PUSH
4531: LD_INT 22
4533: PUSH
4534: LD_INT 3
4536: PUSH
4537: EMPTY
4538: LIST
4539: LIST
4540: PUSH
4541: LD_INT 30
4543: PUSH
4544: LD_INT 3
4546: PUSH
4547: EMPTY
4548: LIST
4549: LIST
4550: PUSH
4551: EMPTY
4552: LIST
4553: LIST
4554: PPUSH
4555: CALL_OW 69
4559: PUSH
4560: LD_INT 1
4562: ARRAY
4563: ST_TO_ADDR
// ru_teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] ;
4564: LD_ADDR_VAR 0 3
4568: PUSH
4569: LD_INT 22
4571: PUSH
4572: LD_INT 3
4574: PUSH
4575: EMPTY
4576: LIST
4577: LIST
4578: PUSH
4579: LD_INT 30
4581: PUSH
4582: LD_INT 34
4584: PUSH
4585: EMPTY
4586: LIST
4587: LIST
4588: PUSH
4589: EMPTY
4590: LIST
4591: LIST
4592: PPUSH
4593: CALL_OW 69
4597: PUSH
4598: LD_INT 1
4600: ARRAY
4601: ST_TO_ADDR
// ru_bunkers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
4602: LD_ADDR_VAR 0 4
4606: PUSH
4607: LD_INT 22
4609: PUSH
4610: LD_INT 3
4612: PUSH
4613: EMPTY
4614: LIST
4615: LIST
4616: PUSH
4617: LD_INT 30
4619: PUSH
4620: LD_INT 33
4622: PUSH
4623: EMPTY
4624: LIST
4625: LIST
4626: PUSH
4627: EMPTY
4628: LIST
4629: LIST
4630: PPUSH
4631: CALL_OW 69
4635: ST_TO_ADDR
// ru_barracks := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
4636: LD_ADDR_VAR 0 8
4640: PUSH
4641: LD_INT 22
4643: PUSH
4644: LD_INT 3
4646: PUSH
4647: EMPTY
4648: LIST
4649: LIST
4650: PUSH
4651: LD_INT 30
4653: PUSH
4654: LD_INT 5
4656: PUSH
4657: EMPTY
4658: LIST
4659: LIST
4660: PUSH
4661: EMPTY
4662: LIST
4663: LIST
4664: PPUSH
4665: CALL_OW 69
4669: PUSH
4670: LD_INT 1
4672: ARRAY
4673: ST_TO_ADDR
// ru_buildings := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
4674: LD_ADDR_VAR 0 5
4678: PUSH
4679: LD_INT 22
4681: PUSH
4682: LD_INT 3
4684: PUSH
4685: EMPTY
4686: LIST
4687: LIST
4688: PUSH
4689: LD_INT 21
4691: PUSH
4692: LD_INT 3
4694: PUSH
4695: EMPTY
4696: LIST
4697: LIST
4698: PUSH
4699: EMPTY
4700: LIST
4701: LIST
4702: PPUSH
4703: CALL_OW 69
4707: ST_TO_ADDR
// ru_vehicles := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
4708: LD_ADDR_VAR 0 6
4712: PUSH
4713: LD_INT 22
4715: PUSH
4716: LD_INT 3
4718: PUSH
4719: EMPTY
4720: LIST
4721: LIST
4722: PUSH
4723: LD_INT 21
4725: PUSH
4726: LD_INT 2
4728: PUSH
4729: EMPTY
4730: LIST
4731: LIST
4732: PUSH
4733: EMPTY
4734: LIST
4735: LIST
4736: PPUSH
4737: CALL_OW 69
4741: ST_TO_ADDR
// ru_humans := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
4742: LD_ADDR_VAR 0 7
4746: PUSH
4747: LD_INT 22
4749: PUSH
4750: LD_INT 3
4752: PUSH
4753: EMPTY
4754: LIST
4755: LIST
4756: PUSH
4757: LD_INT 21
4759: PUSH
4760: LD_INT 1
4762: PUSH
4763: EMPTY
4764: LIST
4765: LIST
4766: PUSH
4767: EMPTY
4768: LIST
4769: LIST
4770: PPUSH
4771: CALL_OW 69
4775: ST_TO_ADDR
// ru_engs := UnitFilter ( ru_humans , [ f_class , 2 ] ) ;
4776: LD_ADDR_VAR 0 9
4780: PUSH
4781: LD_VAR 0 7
4785: PPUSH
4786: LD_INT 25
4788: PUSH
4789: LD_INT 2
4791: PUSH
4792: EMPTY
4793: LIST
4794: LIST
4795: PPUSH
4796: CALL_OW 72
4800: ST_TO_ADDR
// ru_mech := UnitFilter ( ru_humans , [ f_class , 3 ] ) ;
4801: LD_ADDR_VAR 0 10
4805: PUSH
4806: LD_VAR 0 7
4810: PPUSH
4811: LD_INT 25
4813: PUSH
4814: LD_INT 3
4816: PUSH
4817: EMPTY
4818: LIST
4819: LIST
4820: PPUSH
4821: CALL_OW 72
4825: ST_TO_ADDR
// ru_sci := UnitFilter ( ru_humans , [ f_class , 4 ] ) ;
4826: LD_ADDR_VAR 0 11
4830: PUSH
4831: LD_VAR 0 7
4835: PPUSH
4836: LD_INT 25
4838: PUSH
4839: LD_INT 4
4841: PUSH
4842: EMPTY
4843: LIST
4844: LIST
4845: PPUSH
4846: CALL_OW 72
4850: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) > 0 and ru_cargo = false then
4851: LD_INT 22
4853: PUSH
4854: LD_INT 3
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: PUSH
4861: LD_INT 34
4863: PUSH
4864: LD_INT 51
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: PUSH
4871: EMPTY
4872: LIST
4873: LIST
4874: PPUSH
4875: CALL_OW 69
4879: PUSH
4880: LD_INT 0
4882: GREATER
4883: PUSH
4884: LD_EXP 31
4888: PUSH
4889: LD_INT 0
4891: EQUAL
4892: AND
4893: IFFALSE 4933
// ru_cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
4895: LD_ADDR_EXP 31
4899: PUSH
4900: LD_INT 22
4902: PUSH
4903: LD_INT 3
4905: PUSH
4906: EMPTY
4907: LIST
4908: LIST
4909: PUSH
4910: LD_INT 34
4912: PUSH
4913: LD_INT 51
4915: PUSH
4916: EMPTY
4917: LIST
4918: LIST
4919: PUSH
4920: EMPTY
4921: LIST
4922: LIST
4923: PPUSH
4924: CALL_OW 69
4928: PUSH
4929: LD_INT 1
4931: ARRAY
4932: ST_TO_ADDR
// if ru_cargo then
4933: LD_EXP 31
4937: IFFALSE 5277
// begin if IsInArea ( ru_cargo , ru_base ) then
4939: LD_EXP 31
4943: PPUSH
4944: LD_INT 9
4946: PPUSH
4947: CALL_OW 308
4951: IFFALSE 5030
// begin if GetCargo ( ru_cargo , mat_cans ) = 0 then
4953: LD_EXP 31
4957: PPUSH
4958: LD_INT 1
4960: PPUSH
4961: CALL_OW 289
4965: PUSH
4966: LD_INT 0
4968: EQUAL
4969: IFFALSE 4987
// ComEnterUnit ( ru_cargo , ru_teleport ) else
4971: LD_EXP 31
4975: PPUSH
4976: LD_VAR 0 3
4980: PPUSH
4981: CALL_OW 120
4985: GO 5028
// if not HasTask ( ru_cargo ) then
4987: LD_EXP 31
4991: PPUSH
4992: CALL_OW 314
4996: NOT
4997: IFFALSE 5028
// ComMoveXY ( ru_cargo , GetX ( ru_depot ) , GetY ( ru_depot ) ) ;
4999: LD_EXP 31
5003: PPUSH
5004: LD_VAR 0 1
5008: PPUSH
5009: CALL_OW 250
5013: PPUSH
5014: LD_VAR 0 1
5018: PPUSH
5019: CALL_OW 251
5023: PPUSH
5024: CALL_OW 111
// end else
5028: GO 5277
// begin if not HasTask ( ru_cargo ) and GetCargo ( ru_cargo , mat_cans ) < 100 and not IsInArea ( ru_cargo , cargoa ) then
5030: LD_EXP 31
5034: PPUSH
5035: CALL_OW 314
5039: NOT
5040: PUSH
5041: LD_EXP 31
5045: PPUSH
5046: LD_INT 1
5048: PPUSH
5049: CALL_OW 289
5053: PUSH
5054: LD_INT 100
5056: LESS
5057: AND
5058: PUSH
5059: LD_EXP 31
5063: PPUSH
5064: LD_INT 10
5066: PPUSH
5067: CALL_OW 308
5071: NOT
5072: AND
5073: IFFALSE 5150
// begin cr := GetListOfCratesInArea ( ru_crates ) ;
5075: LD_ADDR_VAR 0 15
5079: PUSH
5080: LD_INT 11
5082: PPUSH
5083: CALL_OW 435
5087: ST_TO_ADDR
// if cr then
5088: LD_VAR 0 15
5092: IFFALSE 5123
// ComCollect ( ru_cargo , cr [ 1 ] , cr [ 2 ] ) else
5094: LD_EXP 31
5098: PPUSH
5099: LD_VAR 0 15
5103: PUSH
5104: LD_INT 1
5106: ARRAY
5107: PPUSH
5108: LD_VAR 0 15
5112: PUSH
5113: LD_INT 2
5115: ARRAY
5116: PPUSH
5117: CALL_OW 117
5121: GO 5150
// if not IsInArea ( ru_cargo , ru_crates ) then
5123: LD_EXP 31
5127: PPUSH
5128: LD_INT 11
5130: PPUSH
5131: CALL_OW 308
5135: NOT
5136: IFFALSE 5150
// ComMoveToArea ( ru_cargo , ru_crates ) ;
5138: LD_EXP 31
5142: PPUSH
5143: LD_INT 11
5145: PPUSH
5146: CALL_OW 113
// end ; if not HasTask ( ru_cargo ) and not IsInArea ( ru_cargo , cargoa ) and ( GetCargo ( ru_cargo , mat_cans ) = 100 or See ( your_side , ru_cargo ) ) then
5150: LD_EXP 31
5154: PPUSH
5155: CALL_OW 314
5159: NOT
5160: PUSH
5161: LD_EXP 31
5165: PPUSH
5166: LD_INT 10
5168: PPUSH
5169: CALL_OW 308
5173: NOT
5174: AND
5175: PUSH
5176: LD_EXP 31
5180: PPUSH
5181: LD_INT 1
5183: PPUSH
5184: CALL_OW 289
5188: PUSH
5189: LD_INT 100
5191: EQUAL
5192: PUSH
5193: LD_OWVAR 2
5197: PPUSH
5198: LD_EXP 31
5202: PPUSH
5203: CALL_OW 292
5207: OR
5208: AND
5209: IFFALSE 5223
// ComMoveToArea ( ru_cargo , cargoa ) ;
5211: LD_EXP 31
5215: PPUSH
5216: LD_INT 10
5218: PPUSH
5219: CALL_OW 113
// if IsInArea ( ru_cargo , cargoa ) and ru_barracks then
5223: LD_EXP 31
5227: PPUSH
5228: LD_INT 10
5230: PPUSH
5231: CALL_OW 308
5235: PUSH
5236: LD_VAR 0 8
5240: AND
5241: IFFALSE 5277
// ComSpaceShift ( UnitFilter ( ru_humans , [ f_class , class_bazooker ] ) [ 1 ] , 139 , 24 ) ;
5243: LD_VAR 0 7
5247: PPUSH
5248: LD_INT 25
5250: PUSH
5251: LD_INT 9
5253: PUSH
5254: EMPTY
5255: LIST
5256: LIST
5257: PPUSH
5258: CALL_OW 72
5262: PUSH
5263: LD_INT 1
5265: ARRAY
5266: PPUSH
5267: LD_INT 139
5269: PPUSH
5270: LD_INT 24
5272: PPUSH
5273: CALL_OW 153
// end ; end ; if ru_cargo = 0 and ru_factory and BuildingStatus ( ru_factory ) = bs_idle then
5277: LD_EXP 31
5281: PUSH
5282: LD_INT 0
5284: EQUAL
5285: PUSH
5286: LD_VAR 0 2
5290: AND
5291: PUSH
5292: LD_VAR 0 2
5296: PPUSH
5297: CALL_OW 461
5301: PUSH
5302: LD_INT 2
5304: EQUAL
5305: AND
5306: IFFALSE 5329
// ComConstruct ( ru_factory , ru_medium_wheeled , 3 , control_computer , ru_cargo_bay ) ;
5308: LD_VAR 0 2
5312: PPUSH
5313: LD_INT 21
5315: PPUSH
5316: LD_INT 3
5318: PPUSH
5319: LD_INT 3
5321: PPUSH
5322: LD_INT 51
5324: PPUSH
5325: CALL_OW 125
// if ru_factory and ru_vlist > 0 then
5329: LD_VAR 0 2
5333: PUSH
5334: LD_EXP 33
5338: PUSH
5339: LD_INT 0
5341: GREATER
5342: AND
5343: IFFALSE 5443
// begin if BuildingStatus ( ru_factory ) = bs_idle then
5345: LD_VAR 0 2
5349: PPUSH
5350: CALL_OW 461
5354: PUSH
5355: LD_INT 2
5357: EQUAL
5358: IFFALSE 5443
// begin ComConstruct ( ru_factory , ru_vlist [ 1 ] , ru_vlist [ 2 ] , ru_vlist [ 3 ] , ru_vlist [ 4 ] ) ;
5360: LD_VAR 0 2
5364: PPUSH
5365: LD_EXP 33
5369: PUSH
5370: LD_INT 1
5372: ARRAY
5373: PPUSH
5374: LD_EXP 33
5378: PUSH
5379: LD_INT 2
5381: ARRAY
5382: PPUSH
5383: LD_EXP 33
5387: PUSH
5388: LD_INT 3
5390: ARRAY
5391: PPUSH
5392: LD_EXP 33
5396: PUSH
5397: LD_INT 4
5399: ARRAY
5400: PPUSH
5401: CALL_OW 125
// for i = 1 to 4 do
5405: LD_ADDR_VAR 0 12
5409: PUSH
5410: DOUBLE
5411: LD_INT 1
5413: DEC
5414: ST_TO_ADDR
5415: LD_INT 4
5417: PUSH
5418: FOR_TO
5419: IFFALSE 5441
// ru_vlist := Delete ( ru_vlist , 1 ) ;
5421: LD_ADDR_EXP 33
5425: PUSH
5426: LD_EXP 33
5430: PPUSH
5431: LD_INT 1
5433: PPUSH
5434: CALL_OW 3
5438: ST_TO_ADDR
5439: GO 5418
5441: POP
5442: POP
// end ; end ; if BuildingStatus ( ru_lab ) = bs_idle and ru_sib_bomb then
5443: LD_INT 24
5445: PPUSH
5446: CALL_OW 461
5450: PUSH
5451: LD_INT 2
5453: EQUAL
5454: PUSH
5455: LD_EXP 4
5459: AND
5460: IFFALSE 5488
// if GetTech ( tech_sibfiss , 3 ) = state_enabled then
5462: LD_INT 25
5464: PPUSH
5465: LD_INT 3
5467: PPUSH
5468: CALL_OW 321
5472: PUSH
5473: LD_INT 1
5475: EQUAL
5476: IFFALSE 5488
// ComResearch ( ru_lab , tech_sibfiss ) ;
5478: LD_INT 24
5480: PPUSH
5481: LD_INT 25
5483: PPUSH
5484: CALL_OW 124
// if GetTech ( tech_sibfiss , 3 ) = state_researched and tick mod 5 5$00 = 0 then
5488: LD_INT 25
5490: PPUSH
5491: LD_INT 3
5493: PPUSH
5494: CALL_OW 321
5498: PUSH
5499: LD_INT 2
5501: EQUAL
5502: PUSH
5503: LD_OWVAR 1
5507: PUSH
5508: LD_INT 10500
5510: MOD
5511: PUSH
5512: LD_INT 0
5514: EQUAL
5515: AND
5516: IFFALSE 5554
// if BuildingStatus ( ru_factory ) = bs_idle then
5518: LD_VAR 0 2
5522: PPUSH
5523: CALL_OW 461
5527: PUSH
5528: LD_INT 2
5530: EQUAL
5531: IFFALSE 5554
// ComConstruct ( ru_factory , ru_heavy_wheeled , 3 , control_computer , ru_siberium_rocket ) ;
5533: LD_VAR 0 2
5537: PPUSH
5538: LD_INT 23
5540: PPUSH
5541: LD_INT 3
5543: PPUSH
5544: LD_INT 3
5546: PPUSH
5547: LD_INT 48
5549: PPUSH
5550: CALL_OW 125
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) > 0 then
5554: LD_INT 22
5556: PUSH
5557: LD_INT 3
5559: PUSH
5560: EMPTY
5561: LIST
5562: LIST
5563: PUSH
5564: LD_INT 34
5566: PUSH
5567: LD_INT 48
5569: PUSH
5570: EMPTY
5571: LIST
5572: LIST
5573: PUSH
5574: EMPTY
5575: LIST
5576: LIST
5577: PPUSH
5578: CALL_OW 69
5582: PUSH
5583: LD_INT 0
5585: GREATER
5586: IFFALSE 5960
// begin sib_bomb := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) [ 1 ] ;
5588: LD_ADDR_VAR 0 16
5592: PUSH
5593: LD_INT 22
5595: PUSH
5596: LD_INT 3
5598: PUSH
5599: EMPTY
5600: LIST
5601: LIST
5602: PUSH
5603: LD_INT 34
5605: PUSH
5606: LD_INT 48
5608: PUSH
5609: EMPTY
5610: LIST
5611: LIST
5612: PUSH
5613: EMPTY
5614: LIST
5615: LIST
5616: PPUSH
5617: CALL_OW 69
5621: PUSH
5622: LD_INT 1
5624: ARRAY
5625: ST_TO_ADDR
// if IsInArea ( sib_bomb , ru_base ) then
5626: LD_VAR 0 16
5630: PPUSH
5631: LD_INT 9
5633: PPUSH
5634: CALL_OW 308
5638: IFFALSE 5656
// ComEnterUnit ( sib_bomb , ru_teleport ) else
5640: LD_VAR 0 16
5644: PPUSH
5645: LD_VAR 0 3
5649: PPUSH
5650: CALL_OW 120
5654: GO 5960
// if not HasTask ( sib_bomb ) then
5656: LD_VAR 0 16
5660: PPUSH
5661: CALL_OW 314
5665: NOT
5666: IFFALSE 5960
// if GetLives ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) > 250 then
5668: LD_INT 22
5670: PUSH
5671: LD_OWVAR 2
5675: PUSH
5676: EMPTY
5677: LIST
5678: LIST
5679: PUSH
5680: LD_INT 30
5682: PUSH
5683: LD_INT 1
5685: PUSH
5686: EMPTY
5687: LIST
5688: LIST
5689: PUSH
5690: EMPTY
5691: LIST
5692: LIST
5693: PPUSH
5694: CALL_OW 69
5698: PUSH
5699: LD_INT 1
5701: ARRAY
5702: PPUSH
5703: CALL_OW 256
5707: PUSH
5708: LD_INT 250
5710: GREATER
5711: IFFALSE 5804
// ComAttackPlace ( sib_bomb , GetX ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) , GetY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ) else
5713: LD_VAR 0 16
5717: PPUSH
5718: LD_INT 22
5720: PUSH
5721: LD_OWVAR 2
5725: PUSH
5726: EMPTY
5727: LIST
5728: LIST
5729: PUSH
5730: LD_INT 30
5732: PUSH
5733: LD_INT 1
5735: PUSH
5736: EMPTY
5737: LIST
5738: LIST
5739: PUSH
5740: EMPTY
5741: LIST
5742: LIST
5743: PPUSH
5744: CALL_OW 69
5748: PUSH
5749: LD_INT 1
5751: ARRAY
5752: PPUSH
5753: CALL_OW 250
5757: PPUSH
5758: LD_INT 22
5760: PUSH
5761: LD_OWVAR 2
5765: PUSH
5766: EMPTY
5767: LIST
5768: LIST
5769: PUSH
5770: LD_INT 30
5772: PUSH
5773: LD_INT 1
5775: PUSH
5776: EMPTY
5777: LIST
5778: LIST
5779: PUSH
5780: EMPTY
5781: LIST
5782: LIST
5783: PPUSH
5784: CALL_OW 69
5788: PUSH
5789: LD_INT 1
5791: ARRAY
5792: PPUSH
5793: CALL_OW 251
5797: PPUSH
5798: CALL_OW 116
5802: GO 5960
// if FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) > 0 then
5804: LD_INT 22
5806: PUSH
5807: LD_OWVAR 2
5811: PUSH
5812: EMPTY
5813: LIST
5814: LIST
5815: PUSH
5816: LD_INT 21
5818: PUSH
5819: LD_INT 3
5821: PUSH
5822: EMPTY
5823: LIST
5824: LIST
5825: PUSH
5826: EMPTY
5827: LIST
5828: LIST
5829: PPUSH
5830: CALL_OW 69
5834: PUSH
5835: LD_INT 0
5837: GREATER
5838: IFFALSE 5931
// ComAttackPlace ( sib_bomb , GetX ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) [ 1 ] ) , GetY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) [ 1 ] ) ) else
5840: LD_VAR 0 16
5844: PPUSH
5845: LD_INT 22
5847: PUSH
5848: LD_OWVAR 2
5852: PUSH
5853: EMPTY
5854: LIST
5855: LIST
5856: PUSH
5857: LD_INT 21
5859: PUSH
5860: LD_INT 3
5862: PUSH
5863: EMPTY
5864: LIST
5865: LIST
5866: PUSH
5867: EMPTY
5868: LIST
5869: LIST
5870: PPUSH
5871: CALL_OW 69
5875: PUSH
5876: LD_INT 1
5878: ARRAY
5879: PPUSH
5880: CALL_OW 250
5884: PPUSH
5885: LD_INT 22
5887: PUSH
5888: LD_OWVAR 2
5892: PUSH
5893: EMPTY
5894: LIST
5895: LIST
5896: PUSH
5897: LD_INT 21
5899: PUSH
5900: LD_INT 3
5902: PUSH
5903: EMPTY
5904: LIST
5905: LIST
5906: PUSH
5907: EMPTY
5908: LIST
5909: LIST
5910: PPUSH
5911: CALL_OW 69
5915: PUSH
5916: LD_INT 1
5918: ARRAY
5919: PPUSH
5920: CALL_OW 251
5924: PPUSH
5925: CALL_OW 116
5929: GO 5960
// ComAttackPlace ( sib_bomb , GetX ( player_commander ) , GetY ( player_commander ) ) ;
5931: LD_VAR 0 16
5935: PPUSH
5936: LD_EXP 11
5940: PPUSH
5941: CALL_OW 250
5945: PPUSH
5946: LD_EXP 11
5950: PPUSH
5951: CALL_OW 251
5955: PPUSH
5956: CALL_OW 116
// end ; if ru_can_attack then
5960: LD_EXP 3
5964: IFFALSE 6112
// if ru_time > 0 0$00 then
5966: LD_EXP 35
5970: PUSH
5971: LD_INT 0
5973: GREATER
5974: IFFALSE 5992
// ru_time := ru_time - 0 0$03 else
5976: LD_ADDR_EXP 35
5980: PUSH
5981: LD_EXP 35
5985: PUSH
5986: LD_INT 105
5988: MINUS
5989: ST_TO_ADDR
5990: GO 6112
// begin ru_time := Rand ( 9 9$39 , 14 14$39 ) ;
5992: LD_ADDR_EXP 35
5996: PUSH
5997: LD_INT 20265
5999: PPUSH
6000: LD_INT 30765
6002: PPUSH
6003: CALL_OW 12
6007: ST_TO_ADDR
// for i = 1 to ru_amount do
6008: LD_ADDR_VAR 0 12
6012: PUSH
6013: DOUBLE
6014: LD_INT 1
6016: DEC
6017: ST_TO_ADDR
6018: LD_EXP 34
6022: PUSH
6023: FOR_TO
6024: IFFALSE 6110
// begin ru_vlist := ru_vlist ^ ru_heavy_wheeled ;
6026: LD_ADDR_EXP 33
6030: PUSH
6031: LD_EXP 33
6035: PUSH
6036: LD_INT 23
6038: ADD
6039: ST_TO_ADDR
// ru_vlist := ru_vlist ^ engine_siberite ;
6040: LD_ADDR_EXP 33
6044: PUSH
6045: LD_EXP 33
6049: PUSH
6050: LD_INT 3
6052: ADD
6053: ST_TO_ADDR
// ru_vlist := ru_vlist ^ control_computer ;
6054: LD_ADDR_EXP 33
6058: PUSH
6059: LD_EXP 33
6063: PUSH
6064: LD_INT 3
6066: ADD
6067: ST_TO_ADDR
// ru_vlist := ru_vlist ^ [ ru_heavy_gun , ru_rocket_launcher , ru_rocket ] [ MultiRand ( 1 , 2 , 3 ) ] ;
6068: LD_ADDR_EXP 33
6072: PUSH
6073: LD_EXP 33
6077: PUSH
6078: LD_INT 46
6080: PUSH
6081: LD_INT 45
6083: PUSH
6084: LD_INT 47
6086: PUSH
6087: EMPTY
6088: LIST
6089: LIST
6090: LIST
6091: PUSH
6092: LD_INT 1
6094: PPUSH
6095: LD_INT 2
6097: PPUSH
6098: LD_INT 3
6100: PPUSH
6101: CALL_OW 14
6105: ARRAY
6106: ADD
6107: ST_TO_ADDR
// end ;
6108: GO 6023
6110: POP
6111: POP
// end ; if UnitFilter ( ru_bunkers , [ f_bweapon , 0 ] ) > 0 then
6112: LD_VAR 0 4
6116: PPUSH
6117: LD_INT 35
6119: PUSH
6120: LD_INT 0
6122: PUSH
6123: EMPTY
6124: LIST
6125: LIST
6126: PPUSH
6127: CALL_OW 72
6131: PUSH
6132: LD_INT 0
6134: GREATER
6135: IFFALSE 6183
// if BuildingStatus ( ru_factory ) = bs_idle then
6137: LD_VAR 0 2
6141: PPUSH
6142: CALL_OW 461
6146: PUSH
6147: LD_INT 2
6149: EQUAL
6150: IFFALSE 6183
// ComPlaceWeapon ( UnitFilter ( ru_bunkers , [ f_bweapon , 0 ] ) [ 1 ] , ru_rocket ) ;
6152: LD_VAR 0 4
6156: PPUSH
6157: LD_INT 35
6159: PUSH
6160: LD_INT 0
6162: PUSH
6163: EMPTY
6164: LIST
6165: LIST
6166: PPUSH
6167: CALL_OW 72
6171: PUSH
6172: LD_INT 1
6174: ARRAY
6175: PPUSH
6176: LD_INT 47
6178: PPUSH
6179: CALL_OW 148
// if ru_force >= ru_amount then
6183: LD_EXP 29
6187: PUSH
6188: LD_EXP 34
6192: GREATEREQUAL
6193: IFFALSE 6204
// RaiseSailEvent ( event_russian_attack ) ;
6195: LD_EXP 22
6199: PPUSH
6200: CALL_OW 427
// if ru_engs > 0 then
6204: LD_VAR 0 9
6208: PUSH
6209: LD_INT 0
6211: GREATER
6212: IFFALSE 6614
// begin if UnitFilter ( ru_buildings , [ f_not , [ f_lives , 1000 ] ] ) > 0 then
6214: LD_VAR 0 5
6218: PPUSH
6219: LD_INT 3
6221: PUSH
6222: LD_INT 24
6224: PUSH
6225: LD_INT 1000
6227: PUSH
6228: EMPTY
6229: LIST
6230: LIST
6231: PUSH
6232: EMPTY
6233: LIST
6234: LIST
6235: PPUSH
6236: CALL_OW 72
6240: PUSH
6241: LD_INT 0
6243: GREATER
6244: IFFALSE 6399
// begin filter := UnitFilter ( ru_buildings , [ f_not , [ f_lives , 1000 ] ] ) ;
6246: LD_ADDR_VAR 0 14
6250: PUSH
6251: LD_VAR 0 5
6255: PPUSH
6256: LD_INT 3
6258: PUSH
6259: LD_INT 24
6261: PUSH
6262: LD_INT 1000
6264: PUSH
6265: EMPTY
6266: LIST
6267: LIST
6268: PUSH
6269: EMPTY
6270: LIST
6271: LIST
6272: PPUSH
6273: CALL_OW 72
6277: ST_TO_ADDR
// for i = 1 to ru_engs do
6278: LD_ADDR_VAR 0 12
6282: PUSH
6283: DOUBLE
6284: LD_INT 1
6286: DEC
6287: ST_TO_ADDR
6288: LD_VAR 0 9
6292: PUSH
6293: FOR_TO
6294: IFFALSE 6395
// begin if IsInUnit ( ru_engs [ i ] ) then
6296: LD_VAR 0 9
6300: PUSH
6301: LD_VAR 0 12
6305: ARRAY
6306: PPUSH
6307: CALL_OW 310
6311: IFFALSE 6330
// ComExitBuilding ( ru_engs [ i ] ) else
6313: LD_VAR 0 9
6317: PUSH
6318: LD_VAR 0 12
6322: ARRAY
6323: PPUSH
6324: CALL_OW 122
6328: GO 6393
// if not HasTask ( ru_engs [ i ] ) and GetLives ( ru_engs [ i ] ) > 600 then
6330: LD_VAR 0 9
6334: PUSH
6335: LD_VAR 0 12
6339: ARRAY
6340: PPUSH
6341: CALL_OW 314
6345: NOT
6346: PUSH
6347: LD_VAR 0 9
6351: PUSH
6352: LD_VAR 0 12
6356: ARRAY
6357: PPUSH
6358: CALL_OW 256
6362: PUSH
6363: LD_INT 600
6365: GREATER
6366: AND
6367: IFFALSE 6393
// ComRepairBuilding ( ru_engs [ i ] , filter [ 1 ] ) ;
6369: LD_VAR 0 9
6373: PUSH
6374: LD_VAR 0 12
6378: ARRAY
6379: PPUSH
6380: LD_VAR 0 14
6384: PUSH
6385: LD_INT 1
6387: ARRAY
6388: PPUSH
6389: CALL_OW 130
// end ;
6393: GO 6293
6395: POP
6396: POP
// end else
6397: GO 6614
// begin if ru_blist = 0 then
6399: LD_EXP 32
6403: PUSH
6404: LD_INT 0
6406: EQUAL
6407: IFFALSE 6489
// begin for i = 1 to ru_engs do
6409: LD_ADDR_VAR 0 12
6413: PUSH
6414: DOUBLE
6415: LD_INT 1
6417: DEC
6418: ST_TO_ADDR
6419: LD_VAR 0 9
6423: PUSH
6424: FOR_TO
6425: IFFALSE 6485
// if not HasTask ( ru_engs [ i ] ) and not IsInUnit ( ru_engs [ i ] ) then
6427: LD_VAR 0 9
6431: PUSH
6432: LD_VAR 0 12
6436: ARRAY
6437: PPUSH
6438: CALL_OW 314
6442: NOT
6443: PUSH
6444: LD_VAR 0 9
6448: PUSH
6449: LD_VAR 0 12
6453: ARRAY
6454: PPUSH
6455: CALL_OW 310
6459: NOT
6460: AND
6461: IFFALSE 6483
// ComEnterUnit ( ru_engs [ i ] , ru_depot ) ;
6463: LD_VAR 0 9
6467: PUSH
6468: LD_VAR 0 12
6472: ARRAY
6473: PPUSH
6474: LD_VAR 0 1
6478: PPUSH
6479: CALL_OW 120
6483: GO 6424
6485: POP
6486: POP
// end else
6487: GO 6614
// begin for i = 1 to ru_engs do
6489: LD_ADDR_VAR 0 12
6493: PUSH
6494: DOUBLE
6495: LD_INT 1
6497: DEC
6498: ST_TO_ADDR
6499: LD_VAR 0 9
6503: PUSH
6504: FOR_TO
6505: IFFALSE 6612
// begin if IsInUnit ( ru_engs [ i ] ) then
6507: LD_VAR 0 9
6511: PUSH
6512: LD_VAR 0 12
6516: ARRAY
6517: PPUSH
6518: CALL_OW 310
6522: IFFALSE 6541
// ComExitBuilding ( ru_engs [ i ] ) else
6524: LD_VAR 0 9
6528: PUSH
6529: LD_VAR 0 12
6533: ARRAY
6534: PPUSH
6535: CALL_OW 122
6539: GO 6610
// if not HasTask ( ru_engs [ i ] ) then
6541: LD_VAR 0 9
6545: PUSH
6546: LD_VAR 0 12
6550: ARRAY
6551: PPUSH
6552: CALL_OW 314
6556: NOT
6557: IFFALSE 6610
// ComBuild ( ru_engs [ i ] , ru_blist [ 1 ] , ru_blist [ 2 ] , ru_blist [ 3 ] , ru_blist [ 4 ] ) ;
6559: LD_VAR 0 9
6563: PUSH
6564: LD_VAR 0 12
6568: ARRAY
6569: PPUSH
6570: LD_EXP 32
6574: PUSH
6575: LD_INT 1
6577: ARRAY
6578: PPUSH
6579: LD_EXP 32
6583: PUSH
6584: LD_INT 2
6586: ARRAY
6587: PPUSH
6588: LD_EXP 32
6592: PUSH
6593: LD_INT 3
6595: ARRAY
6596: PPUSH
6597: LD_EXP 32
6601: PUSH
6602: LD_INT 4
6604: ARRAY
6605: PPUSH
6606: CALL_OW 145
// end ;
6610: GO 6504
6612: POP
6613: POP
// end ; end ; end ; end ;
6614: PPOPN 16
6616: END
// every 3 3$40 + 0 0$45 trigger russian_prepared and GetListOfCratesInArea ( ru_crates ) < 10 do
6617: LD_EXP 2
6621: PUSH
6622: LD_INT 11
6624: PPUSH
6625: CALL_OW 435
6629: PUSH
6630: LD_INT 10
6632: LESS
6633: AND
6634: IFFALSE 6697
6636: GO 6638
6638: DISABLE
// begin enable ;
6639: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , ru_crates , true ) ;
6640: LD_INT 1
6642: PPUSH
6643: LD_INT 5
6645: PPUSH
6646: CALL_OW 12
6650: PPUSH
6651: LD_INT 11
6653: PPUSH
6654: LD_INT 1
6656: PPUSH
6657: CALL_OW 55
// Wait ( Rand ( 0 0$43 , 1 1$00 ) ) ;
6661: LD_INT 1505
6663: PPUSH
6664: LD_INT 2100
6666: PPUSH
6667: CALL_OW 12
6671: PPUSH
6672: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 5 ) , ru_crates , true ) ;
6676: LD_INT 1
6678: PPUSH
6679: LD_INT 5
6681: PPUSH
6682: CALL_OW 12
6686: PPUSH
6687: LD_INT 11
6689: PPUSH
6690: LD_INT 1
6692: PPUSH
6693: CALL_OW 55
// end ;
6697: END
// every 15 15$00 + 25 25$00 trigger not ru_sib_bomb do var i , tmp ;
6698: LD_EXP 4
6702: NOT
6703: IFFALSE 6818
6705: GO 6707
6707: DISABLE
6708: LD_INT 0
6710: PPUSH
6711: PPUSH
// begin enable ;
6712: ENABLE
// i := Rand ( 0 , 100 ) ;
6713: LD_ADDR_VAR 0 1
6717: PUSH
6718: LD_INT 0
6720: PPUSH
6721: LD_INT 100
6723: PPUSH
6724: CALL_OW 12
6728: ST_TO_ADDR
// case your_side of 1 :
6729: LD_OWVAR 2
6733: PUSH
6734: LD_INT 1
6736: DOUBLE
6737: EQUAL
6738: IFTRUE 6742
6740: GO 6753
6742: POP
// tmp := 10 ; 2 :
6743: LD_ADDR_VAR 0 2
6747: PUSH
6748: LD_INT 10
6750: ST_TO_ADDR
6751: GO 6792
6753: LD_INT 2
6755: DOUBLE
6756: EQUAL
6757: IFTRUE 6761
6759: GO 6772
6761: POP
// tmp := 0 ; 7 :
6762: LD_ADDR_VAR 0 2
6766: PUSH
6767: LD_INT 0
6769: ST_TO_ADDR
6770: GO 6792
6772: LD_INT 7
6774: DOUBLE
6775: EQUAL
6776: IFTRUE 6780
6778: GO 6791
6780: POP
// tmp := 15 ; end ;
6781: LD_ADDR_VAR 0 2
6785: PUSH
6786: LD_INT 15
6788: ST_TO_ADDR
6789: GO 6792
6791: POP
// if i < chance_to_bomb + tmp then
6792: LD_VAR 0 1
6796: PUSH
6797: LD_EXP 5
6801: PUSH
6802: LD_VAR 0 2
6806: PLUS
6807: LESS
6808: IFFALSE 6818
// ru_sib_bomb := true ;
6810: LD_ADDR_EXP 4
6814: PUSH
6815: LD_INT 1
6817: ST_TO_ADDR
// end ;
6818: PPOPN 2
6820: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_weapon , us_siberium_rocket ] ] ) do
6821: LD_INT 22
6823: PUSH
6824: LD_OWVAR 2
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: PUSH
6833: LD_INT 34
6835: PUSH
6836: LD_INT 8
6838: PUSH
6839: EMPTY
6840: LIST
6841: LIST
6842: PUSH
6843: EMPTY
6844: LIST
6845: LIST
6846: PPUSH
6847: CALL_OW 69
6851: IFFALSE 6864
6853: GO 6855
6855: DISABLE
// begin ru_sib_bomb := true ;
6856: LD_ADDR_EXP 4
6860: PUSH
6861: LD_INT 1
6863: ST_TO_ADDR
// end ;
6864: END
// every 10 10$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) do var i ;
6865: LD_INT 22
6867: PUSH
6868: LD_INT 3
6870: PUSH
6871: EMPTY
6872: LIST
6873: LIST
6874: PUSH
6875: LD_INT 30
6877: PUSH
6878: LD_INT 34
6880: PUSH
6881: EMPTY
6882: LIST
6883: LIST
6884: PUSH
6885: EMPTY
6886: LIST
6887: LIST
6888: PPUSH
6889: CALL_OW 69
6893: IFFALSE 6992
6895: GO 6897
6897: DISABLE
6898: LD_INT 0
6900: PPUSH
// begin enable ;
6901: ENABLE
// i := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
6902: LD_ADDR_VAR 0 1
6906: PUSH
6907: LD_INT 1
6909: PUSH
6910: LD_INT 3
6912: PUSH
6913: EMPTY
6914: LIST
6915: LIST
6916: PUSH
6917: LD_INT 1
6919: PPUSH
6920: LD_INT 2
6922: PPUSH
6923: CALL_OW 12
6927: ARRAY
6928: ST_TO_ADDR
// TeleportExit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] , ru_teleport_exit [ i ] , ru_teleport_exit [ i + 1 ] ) ;
6929: LD_INT 22
6931: PUSH
6932: LD_INT 3
6934: PUSH
6935: EMPTY
6936: LIST
6937: LIST
6938: PUSH
6939: LD_INT 30
6941: PUSH
6942: LD_INT 34
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: PUSH
6949: EMPTY
6950: LIST
6951: LIST
6952: PPUSH
6953: CALL_OW 69
6957: PUSH
6958: LD_INT 1
6960: ARRAY
6961: PPUSH
6962: LD_EXP 36
6966: PUSH
6967: LD_VAR 0 1
6971: ARRAY
6972: PPUSH
6973: LD_EXP 36
6977: PUSH
6978: LD_VAR 0 1
6982: PUSH
6983: LD_INT 1
6985: PLUS
6986: ARRAY
6987: PPUSH
6988: CALL_OW 243
// end ;
6992: PPOPN 1
6994: END
// every 12 12$00 trigger tick >= [ 28 28$00 , 25 25$00 ] [ Difficulty - 1 ] and Difficulty > 1 and FilterAllUnits ( [ f_side , 3 ] ) do var i , un , tmp , p , path ;
6995: LD_OWVAR 1
6999: PUSH
7000: LD_INT 58800
7002: PUSH
7003: LD_INT 52500
7005: PUSH
7006: EMPTY
7007: LIST
7008: LIST
7009: PUSH
7010: LD_OWVAR 67
7014: PUSH
7015: LD_INT 1
7017: MINUS
7018: ARRAY
7019: GREATEREQUAL
7020: PUSH
7021: LD_OWVAR 67
7025: PUSH
7026: LD_INT 1
7028: GREATER
7029: AND
7030: PUSH
7031: LD_INT 22
7033: PUSH
7034: LD_INT 3
7036: PUSH
7037: EMPTY
7038: LIST
7039: LIST
7040: PPUSH
7041: CALL_OW 69
7045: AND
7046: IFFALSE 7468
7048: GO 7050
7050: DISABLE
7051: LD_INT 0
7053: PPUSH
7054: PPUSH
7055: PPUSH
7056: PPUSH
7057: PPUSH
// begin enable ;
7058: ENABLE
// if tick > 60 60$00 then
7059: LD_OWVAR 1
7063: PUSH
7064: LD_INT 126000
7066: GREATER
7067: IFFALSE 7070
// disable ;
7069: DISABLE
// tmp := [ ] ;
7070: LD_ADDR_VAR 0 3
7074: PUSH
7075: EMPTY
7076: ST_TO_ADDR
// for i := 1 to 8 do
7077: LD_ADDR_VAR 0 1
7081: PUSH
7082: DOUBLE
7083: LD_INT 1
7085: DEC
7086: ST_TO_ADDR
7087: LD_INT 8
7089: PUSH
7090: FOR_TO
7091: IFFALSE 7250
// begin uc_side := 6 ;
7093: LD_ADDR_OWVAR 20
7097: PUSH
7098: LD_INT 6
7100: ST_TO_ADDR
// uc_nation := 3 ;
7101: LD_ADDR_OWVAR 21
7105: PUSH
7106: LD_INT 3
7108: ST_TO_ADDR
// vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod 3 + 1 ] ;
7109: LD_ADDR_OWVAR 37
7113: PUSH
7114: LD_INT 21
7116: PUSH
7117: LD_INT 23
7119: PUSH
7120: LD_INT 24
7122: PUSH
7123: EMPTY
7124: LIST
7125: LIST
7126: LIST
7127: PUSH
7128: LD_VAR 0 1
7132: PUSH
7133: LD_INT 3
7135: MOD
7136: PUSH
7137: LD_INT 1
7139: PLUS
7140: ARRAY
7141: ST_TO_ADDR
// vc_engine := engine_siberite ;
7142: LD_ADDR_OWVAR 39
7146: PUSH
7147: LD_INT 3
7149: ST_TO_ADDR
// vc_control := control_computer ;
7150: LD_ADDR_OWVAR 38
7154: PUSH
7155: LD_INT 3
7157: ST_TO_ADDR
// vc_weapon := [ ru_rocket_launcher , ru_flamethrower , ru_rocket ] [ i mod 3 + 1 ] ;
7158: LD_ADDR_OWVAR 40
7162: PUSH
7163: LD_INT 45
7165: PUSH
7166: LD_INT 93
7168: PUSH
7169: LD_INT 47
7171: PUSH
7172: EMPTY
7173: LIST
7174: LIST
7175: LIST
7176: PUSH
7177: LD_VAR 0 1
7181: PUSH
7182: LD_INT 3
7184: MOD
7185: PUSH
7186: LD_INT 1
7188: PLUS
7189: ARRAY
7190: ST_TO_ADDR
// un := CreateVehicle ;
7191: LD_ADDR_VAR 0 2
7195: PUSH
7196: CALL_OW 45
7200: ST_TO_ADDR
// SetDir ( un , 2 ) ;
7201: LD_VAR 0 2
7205: PPUSH
7206: LD_INT 2
7208: PPUSH
7209: CALL_OW 233
// PlaceUnitArea ( un , start_north , false ) ;
7213: LD_VAR 0 2
7217: PPUSH
7218: LD_INT 1
7220: PPUSH
7221: LD_INT 0
7223: PPUSH
7224: CALL_OW 49
// tmp := Join ( tmp , un ) ;
7228: LD_ADDR_VAR 0 3
7232: PUSH
7233: LD_VAR 0 3
7237: PPUSH
7238: LD_VAR 0 2
7242: PPUSH
7243: CALL 76955 0 2
7247: ST_TO_ADDR
// end ;
7248: GO 7090
7250: POP
7251: POP
// if FilterAllUnits ( [ [ f_side , your_side ] , [ f_distxy , 58 , 15 , 18 ] ] ) > 1 then
7252: LD_INT 22
7254: PUSH
7255: LD_OWVAR 2
7259: PUSH
7260: EMPTY
7261: LIST
7262: LIST
7263: PUSH
7264: LD_INT 92
7266: PUSH
7267: LD_INT 58
7269: PUSH
7270: LD_INT 15
7272: PUSH
7273: LD_INT 18
7275: PUSH
7276: EMPTY
7277: LIST
7278: LIST
7279: LIST
7280: LIST
7281: PUSH
7282: EMPTY
7283: LIST
7284: LIST
7285: PPUSH
7286: CALL_OW 69
7290: PUSH
7291: LD_INT 1
7293: GREATER
7294: IFFALSE 7306
// p := 2 else
7296: LD_ADDR_VAR 0 4
7300: PUSH
7301: LD_INT 2
7303: ST_TO_ADDR
7304: GO 7314
// p := 1 ;
7306: LD_ADDR_VAR 0 4
7310: PUSH
7311: LD_INT 1
7313: ST_TO_ADDR
// case p of 1 :
7314: LD_VAR 0 4
7318: PUSH
7319: LD_INT 1
7321: DOUBLE
7322: EQUAL
7323: IFTRUE 7327
7325: GO 7392
7327: POP
// path := [ [ 29 , 29 ] , [ 49 , 70 ] , [ 49 , 70 ] , [ 61 , 110 ] , [ 74 , 129 ] ] ; 2 :
7328: LD_ADDR_VAR 0 5
7332: PUSH
7333: LD_INT 29
7335: PUSH
7336: LD_INT 29
7338: PUSH
7339: EMPTY
7340: LIST
7341: LIST
7342: PUSH
7343: LD_INT 49
7345: PUSH
7346: LD_INT 70
7348: PUSH
7349: EMPTY
7350: LIST
7351: LIST
7352: PUSH
7353: LD_INT 49
7355: PUSH
7356: LD_INT 70
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: PUSH
7363: LD_INT 61
7365: PUSH
7366: LD_INT 110
7368: PUSH
7369: EMPTY
7370: LIST
7371: LIST
7372: PUSH
7373: LD_INT 74
7375: PUSH
7376: LD_INT 129
7378: PUSH
7379: EMPTY
7380: LIST
7381: LIST
7382: PUSH
7383: EMPTY
7384: LIST
7385: LIST
7386: LIST
7387: LIST
7388: LIST
7389: ST_TO_ADDR
7390: GO 7444
7392: LD_INT 2
7394: DOUBLE
7395: EQUAL
7396: IFTRUE 7400
7398: GO 7443
7400: POP
// path := [ [ 24 , 23 ] , [ 49 , 39 ] , [ 52 , 27 ] ] ; end ;
7401: LD_ADDR_VAR 0 5
7405: PUSH
7406: LD_INT 24
7408: PUSH
7409: LD_INT 23
7411: PUSH
7412: EMPTY
7413: LIST
7414: LIST
7415: PUSH
7416: LD_INT 49
7418: PUSH
7419: LD_INT 39
7421: PUSH
7422: EMPTY
7423: LIST
7424: LIST
7425: PUSH
7426: LD_INT 52
7428: PUSH
7429: LD_INT 27
7431: PUSH
7432: EMPTY
7433: LIST
7434: LIST
7435: PUSH
7436: EMPTY
7437: LIST
7438: LIST
7439: LIST
7440: ST_TO_ADDR
7441: GO 7444
7443: POP
// repeat wait ( 0 0$1 ) ;
7444: LD_INT 35
7446: PPUSH
7447: CALL_OW 67
// until not AgressiveMove ( tmp , path ) ;
7451: LD_VAR 0 3
7455: PPUSH
7456: LD_VAR 0 5
7460: PPUSH
7461: CALL 79559 0 2
7465: NOT
7466: IFFALSE 7444
// end ;
7468: PPOPN 5
7470: END
// every 30 30$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) do var ru_depot ;
7471: LD_INT 22
7473: PUSH
7474: LD_INT 3
7476: PUSH
7477: EMPTY
7478: LIST
7479: LIST
7480: PUSH
7481: LD_INT 30
7483: PUSH
7484: LD_INT 1
7486: PUSH
7487: EMPTY
7488: LIST
7489: LIST
7490: PUSH
7491: EMPTY
7492: LIST
7493: LIST
7494: PPUSH
7495: CALL_OW 69
7499: IFFALSE 7586
7501: GO 7503
7503: DISABLE
7504: LD_INT 0
7506: PPUSH
// begin enable ;
7507: ENABLE
// ru_depot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
7508: LD_ADDR_VAR 0 1
7512: PUSH
7513: LD_INT 22
7515: PUSH
7516: LD_INT 3
7518: PUSH
7519: EMPTY
7520: LIST
7521: LIST
7522: PUSH
7523: LD_INT 30
7525: PUSH
7526: LD_INT 1
7528: PUSH
7529: EMPTY
7530: LIST
7531: LIST
7532: PUSH
7533: EMPTY
7534: LIST
7535: LIST
7536: PPUSH
7537: CALL_OW 69
7541: PUSH
7542: LD_INT 1
7544: ARRAY
7545: ST_TO_ADDR
// AddResourceType ( GetBase ( ru_depot ) , mat_cans , 6000 ) ;
7546: LD_VAR 0 1
7550: PPUSH
7551: CALL_OW 274
7555: PPUSH
7556: LD_INT 1
7558: PPUSH
7559: LD_INT 6000
7561: PPUSH
7562: CALL_OW 276
// AddResourceType ( GetBase ( ru_depot ) , mat_oil , 600 ) ;
7566: LD_VAR 0 1
7570: PPUSH
7571: CALL_OW 274
7575: PPUSH
7576: LD_INT 2
7578: PPUSH
7579: LD_INT 600
7581: PPUSH
7582: CALL_OW 276
// end ;
7586: PPOPN 1
7588: END
// export function RussianAttack ( ) ; var path , units , p , i , teleport ; begin
7589: LD_INT 0
7591: PPUSH
7592: PPUSH
7593: PPUSH
7594: PPUSH
7595: PPUSH
7596: PPUSH
// units := ru_force ;
7597: LD_ADDR_VAR 0 3
7601: PUSH
7602: LD_EXP 29
7606: ST_TO_ADDR
// teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) ;
7607: LD_ADDR_VAR 0 6
7611: PUSH
7612: LD_INT 22
7614: PUSH
7615: LD_INT 3
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: PUSH
7622: LD_INT 30
7624: PUSH
7625: LD_INT 34
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: PUSH
7632: EMPTY
7633: LIST
7634: LIST
7635: PPUSH
7636: CALL_OW 69
7640: ST_TO_ADDR
// ru_force := [ ] ;
7641: LD_ADDR_EXP 29
7645: PUSH
7646: EMPTY
7647: ST_TO_ADDR
// if not teleport then
7648: LD_VAR 0 6
7652: NOT
7653: IFFALSE 7695
// begin for i in units do
7655: LD_ADDR_VAR 0 5
7659: PUSH
7660: LD_VAR 0 3
7664: PUSH
7665: FOR_IN
7666: IFFALSE 7691
// TeleportUnit ( i , 150 , 65 , 12 , true ) ;
7668: LD_VAR 0 5
7672: PPUSH
7673: LD_INT 150
7675: PPUSH
7676: LD_INT 65
7678: PPUSH
7679: LD_INT 12
7681: PPUSH
7682: LD_INT 1
7684: PPUSH
7685: CALL_OW 483
7689: GO 7665
7691: POP
7692: POP
// end else
7693: GO 7790
// begin repeat for i = 1 to units do
7695: LD_ADDR_VAR 0 5
7699: PUSH
7700: DOUBLE
7701: LD_INT 1
7703: DEC
7704: ST_TO_ADDR
7705: LD_VAR 0 3
7709: PUSH
7710: FOR_TO
7711: IFFALSE 7759
// if IsInArea ( units [ i ] , ru_base ) then
7713: LD_VAR 0 3
7717: PUSH
7718: LD_VAR 0 5
7722: ARRAY
7723: PPUSH
7724: LD_INT 9
7726: PPUSH
7727: CALL_OW 308
7731: IFFALSE 7757
// ComEnterUnit ( units [ i ] , teleport [ 1 ] ) ;
7733: LD_VAR 0 3
7737: PUSH
7738: LD_VAR 0 5
7742: ARRAY
7743: PPUSH
7744: LD_VAR 0 6
7748: PUSH
7749: LD_INT 1
7751: ARRAY
7752: PPUSH
7753: CALL_OW 120
7757: GO 7710
7759: POP
7760: POP
// wait ( 0 0$10 ) ;
7761: LD_INT 350
7763: PPUSH
7764: CALL_OW 67
// until not UnitFilter ( units , [ f_inarea , ru_base ] ) ;
7768: LD_VAR 0 3
7772: PPUSH
7773: LD_INT 95
7775: PUSH
7776: LD_INT 9
7778: PUSH
7779: EMPTY
7780: LIST
7781: LIST
7782: PPUSH
7783: CALL_OW 72
7787: NOT
7788: IFFALSE 7695
// end ; p := rand ( 1 , 2 ) ;
7790: LD_ADDR_VAR 0 4
7794: PUSH
7795: LD_INT 1
7797: PPUSH
7798: LD_INT 2
7800: PPUSH
7801: CALL_OW 12
7805: ST_TO_ADDR
// case p of 1 :
7806: LD_VAR 0 4
7810: PUSH
7811: LD_INT 1
7813: DOUBLE
7814: EQUAL
7815: IFTRUE 7819
7817: GO 7873
7819: POP
// path := [ [ 159 , 71 ] , [ 152 , 99 ] , [ 107 , 119 ] , [ 104 , 127 ] ] ; 2 :
7820: LD_ADDR_VAR 0 2
7824: PUSH
7825: LD_INT 159
7827: PUSH
7828: LD_INT 71
7830: PUSH
7831: EMPTY
7832: LIST
7833: LIST
7834: PUSH
7835: LD_INT 152
7837: PUSH
7838: LD_INT 99
7840: PUSH
7841: EMPTY
7842: LIST
7843: LIST
7844: PUSH
7845: LD_INT 107
7847: PUSH
7848: LD_INT 119
7850: PUSH
7851: EMPTY
7852: LIST
7853: LIST
7854: PUSH
7855: LD_INT 104
7857: PUSH
7858: LD_INT 127
7860: PUSH
7861: EMPTY
7862: LIST
7863: LIST
7864: PUSH
7865: EMPTY
7866: LIST
7867: LIST
7868: LIST
7869: LIST
7870: ST_TO_ADDR
7871: GO 7936
7873: LD_INT 2
7875: DOUBLE
7876: EQUAL
7877: IFTRUE 7881
7879: GO 7935
7881: POP
// path := [ [ 116 , 36 ] , [ 91 , 52 ] , [ 53 , 67 ] , [ 58 , 107 ] ] ; end ;
7882: LD_ADDR_VAR 0 2
7886: PUSH
7887: LD_INT 116
7889: PUSH
7890: LD_INT 36
7892: PUSH
7893: EMPTY
7894: LIST
7895: LIST
7896: PUSH
7897: LD_INT 91
7899: PUSH
7900: LD_INT 52
7902: PUSH
7903: EMPTY
7904: LIST
7905: LIST
7906: PUSH
7907: LD_INT 53
7909: PUSH
7910: LD_INT 67
7912: PUSH
7913: EMPTY
7914: LIST
7915: LIST
7916: PUSH
7917: LD_INT 58
7919: PUSH
7920: LD_INT 107
7922: PUSH
7923: EMPTY
7924: LIST
7925: LIST
7926: PUSH
7927: EMPTY
7928: LIST
7929: LIST
7930: LIST
7931: LIST
7932: ST_TO_ADDR
7933: GO 7936
7935: POP
// if FilterAllUnits ( [ f_side , 7 ] ) and p > 1 then
7936: LD_INT 22
7938: PUSH
7939: LD_INT 7
7941: PUSH
7942: EMPTY
7943: LIST
7944: LIST
7945: PPUSH
7946: CALL_OW 69
7950: PUSH
7951: LD_VAR 0 4
7955: PUSH
7956: LD_INT 1
7958: GREATER
7959: AND
7960: IFFALSE 7991
// path := [ [ 116 , 36 ] , [ 91 , 52 ] ] ;
7962: LD_ADDR_VAR 0 2
7966: PUSH
7967: LD_INT 116
7969: PUSH
7970: LD_INT 36
7972: PUSH
7973: EMPTY
7974: LIST
7975: LIST
7976: PUSH
7977: LD_INT 91
7979: PUSH
7980: LD_INT 52
7982: PUSH
7983: EMPTY
7984: LIST
7985: LIST
7986: PUSH
7987: EMPTY
7988: LIST
7989: LIST
7990: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7991: LD_INT 35
7993: PPUSH
7994: CALL_OW 67
// until not AgressiveMove ( units , path ) ;
7998: LD_VAR 0 3
8002: PPUSH
8003: LD_VAR 0 2
8007: PPUSH
8008: CALL 79559 0 2
8012: NOT
8013: IFFALSE 7991
// end ; end_of_file
8015: LD_VAR 0 1
8019: RET
// export function RemoveLegion ; var i ; begin
8020: LD_INT 0
8022: PPUSH
8023: PPUSH
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
8024: LD_ADDR_VAR 0 2
8028: PUSH
8029: LD_INT 22
8031: PUSH
8032: LD_INT 8
8034: PUSH
8035: EMPTY
8036: LIST
8037: LIST
8038: PPUSH
8039: CALL_OW 69
8043: PUSH
8044: FOR_IN
8045: IFFALSE 8058
// RemoveUnit ( i ) ;
8047: LD_VAR 0 2
8051: PPUSH
8052: CALL_OW 64
8056: GO 8044
8058: POP
8059: POP
// end ;
8060: LD_VAR 0 1
8064: RET
// export legion_force , legion_skill , legion_mines , legion_blist , legion_vlist , legion_enemy ; export function PrepareLegion ; var un , i , tmp , veh , l_depot , p , l_factory , l_lab , l_towers ; begin
8065: LD_INT 0
8067: PPUSH
8068: PPUSH
8069: PPUSH
8070: PPUSH
8071: PPUSH
8072: PPUSH
8073: PPUSH
8074: PPUSH
8075: PPUSH
8076: PPUSH
// l_depot := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
8077: LD_ADDR_VAR 0 6
8081: PUSH
8082: LD_INT 22
8084: PUSH
8085: LD_INT 8
8087: PUSH
8088: EMPTY
8089: LIST
8090: LIST
8091: PUSH
8092: LD_INT 30
8094: PUSH
8095: LD_INT 1
8097: PUSH
8098: EMPTY
8099: LIST
8100: LIST
8101: PUSH
8102: EMPTY
8103: LIST
8104: LIST
8105: PPUSH
8106: CALL_OW 69
8110: PUSH
8111: LD_INT 1
8113: ARRAY
8114: ST_TO_ADDR
// l_factory := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
8115: LD_ADDR_VAR 0 8
8119: PUSH
8120: LD_INT 22
8122: PUSH
8123: LD_INT 8
8125: PUSH
8126: EMPTY
8127: LIST
8128: LIST
8129: PUSH
8130: LD_INT 30
8132: PUSH
8133: LD_INT 3
8135: PUSH
8136: EMPTY
8137: LIST
8138: LIST
8139: PUSH
8140: EMPTY
8141: LIST
8142: LIST
8143: PPUSH
8144: CALL_OW 69
8148: PUSH
8149: LD_INT 1
8151: ARRAY
8152: ST_TO_ADDR
// l_lab := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ;
8153: LD_ADDR_VAR 0 9
8157: PUSH
8158: LD_INT 22
8160: PUSH
8161: LD_INT 8
8163: PUSH
8164: EMPTY
8165: LIST
8166: LIST
8167: PUSH
8168: LD_INT 2
8170: PUSH
8171: LD_INT 30
8173: PUSH
8174: LD_INT 6
8176: PUSH
8177: EMPTY
8178: LIST
8179: LIST
8180: PUSH
8181: LD_INT 30
8183: PUSH
8184: LD_INT 8
8186: PUSH
8187: EMPTY
8188: LIST
8189: LIST
8190: PUSH
8191: EMPTY
8192: LIST
8193: LIST
8194: LIST
8195: PUSH
8196: EMPTY
8197: LIST
8198: LIST
8199: PPUSH
8200: CALL_OW 69
8204: PUSH
8205: LD_INT 1
8207: ARRAY
8208: ST_TO_ADDR
// l_towers := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) ;
8209: LD_ADDR_VAR 0 10
8213: PUSH
8214: LD_INT 22
8216: PUSH
8217: LD_INT 8
8219: PUSH
8220: EMPTY
8221: LIST
8222: LIST
8223: PUSH
8224: LD_INT 30
8226: PUSH
8227: LD_INT 32
8229: PUSH
8230: EMPTY
8231: LIST
8232: LIST
8233: PUSH
8234: EMPTY
8235: LIST
8236: LIST
8237: PPUSH
8238: CALL_OW 69
8242: ST_TO_ADDR
// uc_side := 8 ;
8243: LD_ADDR_OWVAR 20
8247: PUSH
8248: LD_INT 8
8250: ST_TO_ADDR
// uc_nation := nation_arabian ;
8251: LD_ADDR_OWVAR 21
8255: PUSH
8256: LD_INT 2
8258: ST_TO_ADDR
// legion_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
8259: LD_ADDR_EXP 38
8263: PUSH
8264: LD_INT 5
8266: PUSH
8267: LD_INT 6
8269: PUSH
8270: LD_INT 7
8272: PUSH
8273: EMPTY
8274: LIST
8275: LIST
8276: LIST
8277: PUSH
8278: LD_OWVAR 67
8282: ARRAY
8283: ST_TO_ADDR
// legion_blist := [ ] ;
8284: LD_ADDR_EXP 40
8288: PUSH
8289: EMPTY
8290: ST_TO_ADDR
// legion_vlist := [ ] ;
8291: LD_ADDR_EXP 41
8295: PUSH
8296: EMPTY
8297: ST_TO_ADDR
// legion_force := [ ] ;
8298: LD_ADDR_EXP 37
8302: PUSH
8303: EMPTY
8304: ST_TO_ADDR
// legion_enemy := - 1 ;
8305: LD_ADDR_EXP 42
8309: PUSH
8310: LD_INT 1
8312: NEG
8313: ST_TO_ADDR
// SetResourceType ( GetBase ( l_depot ) , mat_cans , 10000 ) ;
8314: LD_VAR 0 6
8318: PPUSH
8319: CALL_OW 274
8323: PPUSH
8324: LD_INT 1
8326: PPUSH
8327: LD_INT 10000
8329: PPUSH
8330: CALL_OW 277
// SetResourceType ( GetBase ( l_depot ) , 3 , 1000 ) ;
8334: LD_VAR 0 6
8338: PPUSH
8339: CALL_OW 274
8343: PPUSH
8344: LD_INT 3
8346: PPUSH
8347: LD_INT 1000
8349: PPUSH
8350: CALL_OW 277
// for i = 1 to l_towers do
8354: LD_ADDR_VAR 0 3
8358: PUSH
8359: DOUBLE
8360: LD_INT 1
8362: DEC
8363: ST_TO_ADDR
8364: LD_VAR 0 10
8368: PUSH
8369: FOR_TO
8370: IFFALSE 8419
// begin PrepareHuman ( false , 1 , legion_skill ) ;
8372: LD_INT 0
8374: PPUSH
8375: LD_INT 1
8377: PPUSH
8378: LD_EXP 38
8382: PPUSH
8383: CALL_OW 380
// un := CreateHuman ;
8387: LD_ADDR_VAR 0 2
8391: PUSH
8392: CALL_OW 44
8396: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_towers [ i ] ) ;
8397: LD_VAR 0 2
8401: PPUSH
8402: LD_VAR 0 10
8406: PUSH
8407: LD_VAR 0 3
8411: ARRAY
8412: PPUSH
8413: CALL_OW 52
// end ;
8417: GO 8369
8419: POP
8420: POP
// for i = 1 to 4 do
8421: LD_ADDR_VAR 0 3
8425: PUSH
8426: DOUBLE
8427: LD_INT 1
8429: DEC
8430: ST_TO_ADDR
8431: LD_INT 4
8433: PUSH
8434: FOR_TO
8435: IFFALSE 8528
// for p = 1 to 2 do
8437: LD_ADDR_VAR 0 7
8441: PUSH
8442: DOUBLE
8443: LD_INT 1
8445: DEC
8446: ST_TO_ADDR
8447: LD_INT 2
8449: PUSH
8450: FOR_TO
8451: IFFALSE 8524
// begin PrepareHuman ( false , class_mortar , legion_skill ) ;
8453: LD_INT 0
8455: PPUSH
8456: LD_INT 8
8458: PPUSH
8459: LD_EXP 38
8463: PPUSH
8464: CALL_OW 380
// un := CreateHuman ;
8468: LD_ADDR_VAR 0 2
8472: PUSH
8473: CALL_OW 44
8477: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_barracks ] ] ) [ p ] ) ;
8478: LD_VAR 0 2
8482: PPUSH
8483: LD_INT 22
8485: PUSH
8486: LD_INT 8
8488: PUSH
8489: EMPTY
8490: LIST
8491: LIST
8492: PUSH
8493: LD_INT 30
8495: PUSH
8496: LD_INT 5
8498: PUSH
8499: EMPTY
8500: LIST
8501: LIST
8502: PUSH
8503: EMPTY
8504: LIST
8505: LIST
8506: PPUSH
8507: CALL_OW 69
8511: PUSH
8512: LD_VAR 0 7
8516: ARRAY
8517: PPUSH
8518: CALL_OW 52
// end ;
8522: GO 8450
8524: POP
8525: POP
8526: GO 8434
8528: POP
8529: POP
// for i = 1 to 4 do
8530: LD_ADDR_VAR 0 3
8534: PUSH
8535: DOUBLE
8536: LD_INT 1
8538: DEC
8539: ST_TO_ADDR
8540: LD_INT 4
8542: PUSH
8543: FOR_TO
8544: IFFALSE 8587
// begin PrepareHuman ( false , 4 , legion_skill ) ;
8546: LD_INT 0
8548: PPUSH
8549: LD_INT 4
8551: PPUSH
8552: LD_EXP 38
8556: PPUSH
8557: CALL_OW 380
// un := CreateHuman ;
8561: LD_ADDR_VAR 0 2
8565: PUSH
8566: CALL_OW 44
8570: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_lab ) ;
8571: LD_VAR 0 2
8575: PPUSH
8576: LD_VAR 0 9
8580: PPUSH
8581: CALL_OW 52
// end ;
8585: GO 8543
8587: POP
8588: POP
// for i = 1 to 4 do
8589: LD_ADDR_VAR 0 3
8593: PUSH
8594: DOUBLE
8595: LD_INT 1
8597: DEC
8598: ST_TO_ADDR
8599: LD_INT 4
8601: PUSH
8602: FOR_TO
8603: IFFALSE 8646
// begin PrepareHuman ( false , 3 , legion_skill ) ;
8605: LD_INT 0
8607: PPUSH
8608: LD_INT 3
8610: PPUSH
8611: LD_EXP 38
8615: PPUSH
8616: CALL_OW 380
// un := CreateHuman ;
8620: LD_ADDR_VAR 0 2
8624: PUSH
8625: CALL_OW 44
8629: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_factory ) ;
8630: LD_VAR 0 2
8634: PPUSH
8635: LD_VAR 0 8
8639: PPUSH
8640: CALL_OW 52
// end ;
8644: GO 8602
8646: POP
8647: POP
// for i = 1 to 3 do
8648: LD_ADDR_VAR 0 3
8652: PUSH
8653: DOUBLE
8654: LD_INT 1
8656: DEC
8657: ST_TO_ADDR
8658: LD_INT 3
8660: PUSH
8661: FOR_TO
8662: IFFALSE 8705
// begin PrepareHuman ( false , 2 , legion_skill ) ;
8664: LD_INT 0
8666: PPUSH
8667: LD_INT 2
8669: PPUSH
8670: LD_EXP 38
8674: PPUSH
8675: CALL_OW 380
// un := CreateHuman ;
8679: LD_ADDR_VAR 0 2
8683: PUSH
8684: CALL_OW 44
8688: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_depot ) ;
8689: LD_VAR 0 2
8693: PPUSH
8694: LD_VAR 0 6
8698: PPUSH
8699: CALL_OW 52
// end ;
8703: GO 8661
8705: POP
8706: POP
// for i = 1 to 3 do
8707: LD_ADDR_VAR 0 3
8711: PUSH
8712: DOUBLE
8713: LD_INT 1
8715: DEC
8716: ST_TO_ADDR
8717: LD_INT 3
8719: PUSH
8720: FOR_TO
8721: IFFALSE 8831
// begin vc_chassis := ar_half_tracked ;
8723: LD_ADDR_OWVAR 37
8727: PUSH
8728: LD_INT 14
8730: ST_TO_ADDR
// vc_engine := engine_siberite ;
8731: LD_ADDR_OWVAR 39
8735: PUSH
8736: LD_INT 3
8738: ST_TO_ADDR
// vc_control := control_manual ;
8739: LD_ADDR_OWVAR 38
8743: PUSH
8744: LD_INT 1
8746: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
8747: LD_ADDR_OWVAR 40
8751: PUSH
8752: LD_INT 31
8754: ST_TO_ADDR
// veh := CreateVehicle ;
8755: LD_ADDR_VAR 0 5
8759: PUSH
8760: CALL_OW 45
8764: ST_TO_ADDR
// PlaceUnitXYR ( veh , 212 , 135 , 5 , false ) ;
8765: LD_VAR 0 5
8769: PPUSH
8770: LD_INT 212
8772: PPUSH
8773: LD_INT 135
8775: PPUSH
8776: LD_INT 5
8778: PPUSH
8779: LD_INT 0
8781: PPUSH
8782: CALL_OW 50
// PrepareHuman ( false , 3 , legion_skill + 1 ) ;
8786: LD_INT 0
8788: PPUSH
8789: LD_INT 3
8791: PPUSH
8792: LD_EXP 38
8796: PUSH
8797: LD_INT 1
8799: PLUS
8800: PPUSH
8801: CALL_OW 380
// un := CreateHuman ;
8805: LD_ADDR_VAR 0 2
8809: PUSH
8810: CALL_OW 44
8814: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8815: LD_VAR 0 2
8819: PPUSH
8820: LD_VAR 0 5
8824: PPUSH
8825: CALL_OW 52
// end ;
8829: GO 8720
8831: POP
8832: POP
// PrepareSoldier ( false , 8 ) ;
8833: LD_INT 0
8835: PPUSH
8836: LD_INT 8
8838: PPUSH
8839: CALL_OW 381
// hc_class := class_sniper ;
8843: LD_ADDR_OWVAR 28
8847: PUSH
8848: LD_INT 5
8850: ST_TO_ADDR
// un := CreateHuman ;
8851: LD_ADDR_VAR 0 2
8855: PUSH
8856: CALL_OW 44
8860: ST_TO_ADDR
// SetDir ( un , 4 ) ;
8861: LD_VAR 0 2
8865: PPUSH
8866: LD_INT 4
8868: PPUSH
8869: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( 136 , 92 ) ) ;
8873: LD_VAR 0 2
8877: PPUSH
8878: LD_INT 136
8880: PPUSH
8881: LD_INT 92
8883: PPUSH
8884: CALL_OW 428
8888: PPUSH
8889: CALL_OW 52
// PlaceSeeing ( 198 , 94 , 8 , 10 ) ;
8893: LD_INT 198
8895: PPUSH
8896: LD_INT 94
8898: PPUSH
8899: LD_INT 8
8901: PPUSH
8902: LD_INT 10
8904: PPUSH
8905: CALL_OW 330
// PlaceSeeing ( 167 , 130 , 8 , 10 ) ;
8909: LD_INT 167
8911: PPUSH
8912: LD_INT 130
8914: PPUSH
8915: LD_INT 8
8917: PPUSH
8918: LD_INT 10
8920: PPUSH
8921: CALL_OW 330
// tmp := AreaToList ( legion_mines_area , 0 ) ;
8925: LD_ADDR_VAR 0 4
8929: PUSH
8930: LD_INT 24
8932: PPUSH
8933: LD_INT 0
8935: PPUSH
8936: CALL_OW 517
8940: ST_TO_ADDR
// legion_mines := [ ] ;
8941: LD_ADDR_EXP 39
8945: PUSH
8946: EMPTY
8947: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
8948: LD_ADDR_VAR 0 3
8952: PUSH
8953: DOUBLE
8954: LD_INT 1
8956: DEC
8957: ST_TO_ADDR
8958: LD_VAR 0 4
8962: PUSH
8963: LD_INT 1
8965: ARRAY
8966: PUSH
8967: FOR_TO
8968: IFFALSE 9070
// begin PlaceMine ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 8 , 0 ) ;
8970: LD_VAR 0 4
8974: PUSH
8975: LD_INT 1
8977: ARRAY
8978: PUSH
8979: LD_VAR 0 3
8983: ARRAY
8984: PPUSH
8985: LD_VAR 0 4
8989: PUSH
8990: LD_INT 2
8992: ARRAY
8993: PUSH
8994: LD_VAR 0 3
8998: ARRAY
8999: PPUSH
9000: LD_INT 8
9002: PPUSH
9003: LD_INT 0
9005: PPUSH
9006: CALL_OW 454
// legion_mines := Replace ( legion_mines , legion_mines + 1 , [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ) ;
9010: LD_ADDR_EXP 39
9014: PUSH
9015: LD_EXP 39
9019: PPUSH
9020: LD_EXP 39
9024: PUSH
9025: LD_INT 1
9027: PLUS
9028: PPUSH
9029: LD_VAR 0 4
9033: PUSH
9034: LD_INT 1
9036: ARRAY
9037: PUSH
9038: LD_VAR 0 3
9042: ARRAY
9043: PUSH
9044: LD_VAR 0 4
9048: PUSH
9049: LD_INT 2
9051: ARRAY
9052: PUSH
9053: LD_VAR 0 3
9057: ARRAY
9058: PUSH
9059: EMPTY
9060: LIST
9061: LIST
9062: PPUSH
9063: CALL_OW 1
9067: ST_TO_ADDR
// end ;
9068: GO 8967
9070: POP
9071: POP
// legion_vlist := [ ar_medium_trike , 3 , control_remote , ar_cargo_bay ] ;
9072: LD_ADDR_EXP 41
9076: PUSH
9077: LD_INT 13
9079: PUSH
9080: LD_INT 3
9082: PUSH
9083: LD_INT 2
9085: PUSH
9086: LD_INT 32
9088: PUSH
9089: EMPTY
9090: LIST
9091: LIST
9092: LIST
9093: LIST
9094: ST_TO_ADDR
// end ;
9095: LD_VAR 0 1
9099: RET
// every 0 0$1 trigger legion_mines and FilterUnitsInArea ( legion_mines_area , [ f_side , your_side ] ) do var i , un ;
9100: LD_EXP 39
9104: PUSH
9105: LD_INT 24
9107: PPUSH
9108: LD_INT 22
9110: PUSH
9111: LD_OWVAR 2
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: PPUSH
9120: CALL_OW 70
9124: AND
9125: IFFALSE 9292
9127: GO 9129
9129: DISABLE
9130: LD_INT 0
9132: PPUSH
9133: PPUSH
// begin enable ;
9134: ENABLE
// for i := legion_mines downto 1 do
9135: LD_ADDR_VAR 0 1
9139: PUSH
9140: DOUBLE
9141: LD_EXP 39
9145: INC
9146: ST_TO_ADDR
9147: LD_INT 1
9149: PUSH
9150: FOR_DOWNTO
9151: IFFALSE 9290
// begin un := HexInfo ( legion_mines [ i ] [ 1 ] , legion_mines [ i ] [ 2 ] ) ;
9153: LD_ADDR_VAR 0 2
9157: PUSH
9158: LD_EXP 39
9162: PUSH
9163: LD_VAR 0 1
9167: ARRAY
9168: PUSH
9169: LD_INT 1
9171: ARRAY
9172: PPUSH
9173: LD_EXP 39
9177: PUSH
9178: LD_VAR 0 1
9182: ARRAY
9183: PUSH
9184: LD_INT 2
9186: ARRAY
9187: PPUSH
9188: CALL_OW 428
9192: ST_TO_ADDR
// if un then
9193: LD_VAR 0 2
9197: IFFALSE 9288
// if GetSide ( un ) = legion_enemy then
9199: LD_VAR 0 2
9203: PPUSH
9204: CALL_OW 255
9208: PUSH
9209: LD_EXP 42
9213: EQUAL
9214: IFFALSE 9288
// begin LaunchMineAtPos ( legion_mines [ i ] [ 1 ] , legion_mines [ i ] [ 2 ] , 8 ) ;
9216: LD_EXP 39
9220: PUSH
9221: LD_VAR 0 1
9225: ARRAY
9226: PUSH
9227: LD_INT 1
9229: ARRAY
9230: PPUSH
9231: LD_EXP 39
9235: PUSH
9236: LD_VAR 0 1
9240: ARRAY
9241: PUSH
9242: LD_INT 2
9244: ARRAY
9245: PPUSH
9246: LD_INT 8
9248: PPUSH
9249: CALL_OW 456
// legion_mines := Delete ( legion_mines , i ) ;
9253: LD_ADDR_EXP 39
9257: PUSH
9258: LD_EXP 39
9262: PPUSH
9263: LD_VAR 0 1
9267: PPUSH
9268: CALL_OW 3
9272: ST_TO_ADDR
// if not mine_vulc then
9273: LD_EXP 13
9277: NOT
9278: IFFALSE 9288
// mine_vulc := true ;
9280: LD_ADDR_EXP 13
9284: PUSH
9285: LD_INT 1
9287: ST_TO_ADDR
// end ; end ;
9288: GO 9150
9290: POP
9291: POP
// end ;
9292: PPOPN 2
9294: END
// every 0 0$1 trigger tick >= [ 25 25$00 , 22 22$00 , 20 20$00 ] [ Difficulty ] do var artifact , un ;
9295: LD_OWVAR 1
9299: PUSH
9300: LD_INT 52500
9302: PUSH
9303: LD_INT 46200
9305: PUSH
9306: LD_INT 42000
9308: PUSH
9309: EMPTY
9310: LIST
9311: LIST
9312: LIST
9313: PUSH
9314: LD_OWVAR 67
9318: ARRAY
9319: GREATEREQUAL
9320: IFFALSE 9498
9322: GO 9324
9324: DISABLE
9325: LD_INT 0
9327: PPUSH
9328: PPUSH
// begin artifact := FindArtifact ( 1 ) ;
9329: LD_ADDR_VAR 0 1
9333: PUSH
9334: LD_INT 1
9336: PPUSH
9337: CALL_OW 469
9341: ST_TO_ADDR
// if artifact [ 1 ] = 112 and artifact [ 2 ] = 67 then
9342: LD_VAR 0 1
9346: PUSH
9347: LD_INT 1
9349: ARRAY
9350: PUSH
9351: LD_INT 112
9353: EQUAL
9354: PUSH
9355: LD_VAR 0 1
9359: PUSH
9360: LD_INT 2
9362: ARRAY
9363: PUSH
9364: LD_INT 67
9366: EQUAL
9367: AND
9368: IFFALSE 9498
// begin un := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 2 ] ] ) ;
9370: LD_ADDR_VAR 0 2
9374: PUSH
9375: LD_INT 22
9377: PUSH
9378: LD_INT 8
9380: PUSH
9381: EMPTY
9382: LIST
9383: LIST
9384: PUSH
9385: LD_INT 25
9387: PUSH
9388: LD_INT 2
9390: PUSH
9391: EMPTY
9392: LIST
9393: LIST
9394: PUSH
9395: EMPTY
9396: LIST
9397: LIST
9398: PPUSH
9399: CALL_OW 69
9403: ST_TO_ADDR
// if not un then
9404: LD_VAR 0 2
9408: NOT
9409: IFFALSE 9413
// exit ;
9411: GO 9498
// un := un [ 1 ] ;
9413: LD_ADDR_VAR 0 2
9417: PUSH
9418: LD_VAR 0 2
9422: PUSH
9423: LD_INT 1
9425: ARRAY
9426: ST_TO_ADDR
// if IsInUnit ( un ) then
9427: LD_VAR 0 2
9431: PPUSH
9432: CALL_OW 310
9436: IFFALSE 9447
// ComExitBuilding ( un ) ;
9438: LD_VAR 0 2
9442: PPUSH
9443: CALL_OW 122
// AddComCollect ( un , artifact [ 1 ] , artifact [ 2 ] ) ;
9447: LD_VAR 0 2
9451: PPUSH
9452: LD_VAR 0 1
9456: PUSH
9457: LD_INT 1
9459: ARRAY
9460: PPUSH
9461: LD_VAR 0 1
9465: PUSH
9466: LD_INT 2
9468: ARRAY
9469: PPUSH
9470: CALL_OW 177
// AddComMoveXY ( un , 207 , 123 ) ;
9474: LD_VAR 0 2
9478: PPUSH
9479: LD_INT 207
9481: PPUSH
9482: LD_INT 123
9484: PPUSH
9485: CALL_OW 171
// AddComUnload ( un ) ;
9489: LD_VAR 0 2
9493: PPUSH
9494: CALL_OW 219
// end ; end ;
9498: PPOPN 2
9500: END
// every 0 0$02 trigger FilterAllUnits ( [ f_side , 8 ] ) > 0 do var un , i , tmp , veh , b , p , cr , l_depot , l_factory , l_lab , l_towers , l_sib , l_sci , l_mech , l_sold , l_eng , l_cargo ;
9501: LD_INT 22
9503: PUSH
9504: LD_INT 8
9506: PUSH
9507: EMPTY
9508: LIST
9509: LIST
9510: PPUSH
9511: CALL_OW 69
9515: PUSH
9516: LD_INT 0
9518: GREATER
9519: IFFALSE 11105
9521: GO 9523
9523: DISABLE
9524: LD_INT 0
9526: PPUSH
9527: PPUSH
9528: PPUSH
9529: PPUSH
9530: PPUSH
9531: PPUSH
9532: PPUSH
9533: PPUSH
9534: PPUSH
9535: PPUSH
9536: PPUSH
9537: PPUSH
9538: PPUSH
9539: PPUSH
9540: PPUSH
9541: PPUSH
9542: PPUSH
// begin enable ;
9543: ENABLE
// l_depot := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
9544: LD_ADDR_VAR 0 8
9548: PUSH
9549: LD_INT 22
9551: PUSH
9552: LD_INT 8
9554: PUSH
9555: EMPTY
9556: LIST
9557: LIST
9558: PUSH
9559: LD_INT 30
9561: PUSH
9562: LD_INT 1
9564: PUSH
9565: EMPTY
9566: LIST
9567: LIST
9568: PUSH
9569: EMPTY
9570: LIST
9571: LIST
9572: PPUSH
9573: CALL_OW 69
9577: PUSH
9578: LD_INT 1
9580: ARRAY
9581: ST_TO_ADDR
// l_factory := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
9582: LD_ADDR_VAR 0 9
9586: PUSH
9587: LD_INT 22
9589: PUSH
9590: LD_INT 8
9592: PUSH
9593: EMPTY
9594: LIST
9595: LIST
9596: PUSH
9597: LD_INT 30
9599: PUSH
9600: LD_INT 3
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: PUSH
9607: EMPTY
9608: LIST
9609: LIST
9610: PPUSH
9611: CALL_OW 69
9615: PUSH
9616: LD_INT 1
9618: ARRAY
9619: ST_TO_ADDR
// l_lab := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ;
9620: LD_ADDR_VAR 0 10
9624: PUSH
9625: LD_INT 22
9627: PUSH
9628: LD_INT 8
9630: PUSH
9631: EMPTY
9632: LIST
9633: LIST
9634: PUSH
9635: LD_INT 2
9637: PUSH
9638: LD_INT 30
9640: PUSH
9641: LD_INT 6
9643: PUSH
9644: EMPTY
9645: LIST
9646: LIST
9647: PUSH
9648: LD_INT 30
9650: PUSH
9651: LD_INT 8
9653: PUSH
9654: EMPTY
9655: LIST
9656: LIST
9657: PUSH
9658: EMPTY
9659: LIST
9660: LIST
9661: LIST
9662: PUSH
9663: EMPTY
9664: LIST
9665: LIST
9666: PPUSH
9667: CALL_OW 69
9671: PUSH
9672: LD_INT 1
9674: ARRAY
9675: ST_TO_ADDR
// l_towers := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) ;
9676: LD_ADDR_VAR 0 11
9680: PUSH
9681: LD_INT 22
9683: PUSH
9684: LD_INT 8
9686: PUSH
9687: EMPTY
9688: LIST
9689: LIST
9690: PUSH
9691: LD_INT 30
9693: PUSH
9694: LD_INT 32
9696: PUSH
9697: EMPTY
9698: LIST
9699: LIST
9700: PUSH
9701: EMPTY
9702: LIST
9703: LIST
9704: PPUSH
9705: CALL_OW 69
9709: ST_TO_ADDR
// l_eng := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 2 ] ] ) ;
9710: LD_ADDR_VAR 0 16
9714: PUSH
9715: LD_INT 22
9717: PUSH
9718: LD_INT 8
9720: PUSH
9721: EMPTY
9722: LIST
9723: LIST
9724: PUSH
9725: LD_INT 25
9727: PUSH
9728: LD_INT 2
9730: PUSH
9731: EMPTY
9732: LIST
9733: LIST
9734: PUSH
9735: EMPTY
9736: LIST
9737: LIST
9738: PPUSH
9739: CALL_OW 69
9743: ST_TO_ADDR
// l_sold := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 1 ] ] ) ;
9744: LD_ADDR_VAR 0 15
9748: PUSH
9749: LD_INT 22
9751: PUSH
9752: LD_INT 8
9754: PUSH
9755: EMPTY
9756: LIST
9757: LIST
9758: PUSH
9759: LD_INT 25
9761: PUSH
9762: LD_INT 1
9764: PUSH
9765: EMPTY
9766: LIST
9767: LIST
9768: PUSH
9769: EMPTY
9770: LIST
9771: LIST
9772: PPUSH
9773: CALL_OW 69
9777: ST_TO_ADDR
// l_mech := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 3 ] ] ) ;
9778: LD_ADDR_VAR 0 14
9782: PUSH
9783: LD_INT 22
9785: PUSH
9786: LD_INT 8
9788: PUSH
9789: EMPTY
9790: LIST
9791: LIST
9792: PUSH
9793: LD_INT 25
9795: PUSH
9796: LD_INT 3
9798: PUSH
9799: EMPTY
9800: LIST
9801: LIST
9802: PUSH
9803: EMPTY
9804: LIST
9805: LIST
9806: PPUSH
9807: CALL_OW 69
9811: ST_TO_ADDR
// l_sci := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 4 ] ] ) ;
9812: LD_ADDR_VAR 0 13
9816: PUSH
9817: LD_INT 22
9819: PUSH
9820: LD_INT 8
9822: PUSH
9823: EMPTY
9824: LIST
9825: LIST
9826: PUSH
9827: LD_INT 25
9829: PUSH
9830: LD_INT 4
9832: PUSH
9833: EMPTY
9834: LIST
9835: LIST
9836: PUSH
9837: EMPTY
9838: LIST
9839: LIST
9840: PPUSH
9841: CALL_OW 69
9845: ST_TO_ADDR
// if l_eng then
9846: LD_VAR 0 16
9850: IFFALSE 10268
// begin b := FilterUnitsInArea ( legion_base_area , [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) ;
9852: LD_ADDR_VAR 0 5
9856: PUSH
9857: LD_INT 25
9859: PPUSH
9860: LD_INT 22
9862: PUSH
9863: LD_INT 8
9865: PUSH
9866: EMPTY
9867: LIST
9868: LIST
9869: PUSH
9870: LD_INT 21
9872: PUSH
9873: LD_INT 3
9875: PUSH
9876: EMPTY
9877: LIST
9878: LIST
9879: PUSH
9880: EMPTY
9881: LIST
9882: LIST
9883: PPUSH
9884: CALL_OW 70
9888: ST_TO_ADDR
// if UnitFilter ( b , [ f_not , [ f_lives , 1000 ] ] ) > 0 then
9889: LD_VAR 0 5
9893: PPUSH
9894: LD_INT 3
9896: PUSH
9897: LD_INT 24
9899: PUSH
9900: LD_INT 1000
9902: PUSH
9903: EMPTY
9904: LIST
9905: LIST
9906: PUSH
9907: EMPTY
9908: LIST
9909: LIST
9910: PPUSH
9911: CALL_OW 72
9915: PUSH
9916: LD_INT 0
9918: GREATER
9919: IFFALSE 10053
// begin tmp := UnitFilter ( b , [ f_not , [ f_lives , 1000 ] ] ) ;
9921: LD_ADDR_VAR 0 3
9925: PUSH
9926: LD_VAR 0 5
9930: PPUSH
9931: LD_INT 3
9933: PUSH
9934: LD_INT 24
9936: PUSH
9937: LD_INT 1000
9939: PUSH
9940: EMPTY
9941: LIST
9942: LIST
9943: PUSH
9944: EMPTY
9945: LIST
9946: LIST
9947: PPUSH
9948: CALL_OW 72
9952: ST_TO_ADDR
// for i = 1 to l_eng do
9953: LD_ADDR_VAR 0 2
9957: PUSH
9958: DOUBLE
9959: LD_INT 1
9961: DEC
9962: ST_TO_ADDR
9963: LD_VAR 0 16
9967: PUSH
9968: FOR_TO
9969: IFFALSE 10049
// if IsInUnit ( l_eng [ i ] ) then
9971: LD_VAR 0 16
9975: PUSH
9976: LD_VAR 0 2
9980: ARRAY
9981: PPUSH
9982: CALL_OW 310
9986: IFFALSE 10005
// ComExitBuilding ( l_eng [ i ] ) else
9988: LD_VAR 0 16
9992: PUSH
9993: LD_VAR 0 2
9997: ARRAY
9998: PPUSH
9999: CALL_OW 122
10003: GO 10047
// if not HasTask ( l_eng [ i ] ) then
10005: LD_VAR 0 16
10009: PUSH
10010: LD_VAR 0 2
10014: ARRAY
10015: PPUSH
10016: CALL_OW 314
10020: NOT
10021: IFFALSE 10047
// ComRepairBuilding ( l_eng [ i ] , tmp [ 1 ] ) ;
10023: LD_VAR 0 16
10027: PUSH
10028: LD_VAR 0 2
10032: ARRAY
10033: PPUSH
10034: LD_VAR 0 3
10038: PUSH
10039: LD_INT 1
10041: ARRAY
10042: PPUSH
10043: CALL_OW 130
10047: GO 9968
10049: POP
10050: POP
// end else
10051: GO 10268
// begin if legion_blist > 0 then
10053: LD_EXP 40
10057: PUSH
10058: LD_INT 0
10060: GREATER
10061: IFFALSE 10190
// begin for i = 1 to l_eng do
10063: LD_ADDR_VAR 0 2
10067: PUSH
10068: DOUBLE
10069: LD_INT 1
10071: DEC
10072: ST_TO_ADDR
10073: LD_VAR 0 16
10077: PUSH
10078: FOR_TO
10079: IFFALSE 10186
// if IsInUnit ( l_eng [ i ] ) then
10081: LD_VAR 0 16
10085: PUSH
10086: LD_VAR 0 2
10090: ARRAY
10091: PPUSH
10092: CALL_OW 310
10096: IFFALSE 10115
// ComExitBuilding ( l_eng [ i ] ) else
10098: LD_VAR 0 16
10102: PUSH
10103: LD_VAR 0 2
10107: ARRAY
10108: PPUSH
10109: CALL_OW 122
10113: GO 10184
// if not HasTask ( l_eng [ i ] ) then
10115: LD_VAR 0 16
10119: PUSH
10120: LD_VAR 0 2
10124: ARRAY
10125: PPUSH
10126: CALL_OW 314
10130: NOT
10131: IFFALSE 10184
// ComBuild ( l_eng [ i ] , legion_blist [ 1 ] , legion_blist [ 2 ] , legion_blist [ 3 ] , legion_blist [ 4 ] ) ;
10133: LD_VAR 0 16
10137: PUSH
10138: LD_VAR 0 2
10142: ARRAY
10143: PPUSH
10144: LD_EXP 40
10148: PUSH
10149: LD_INT 1
10151: ARRAY
10152: PPUSH
10153: LD_EXP 40
10157: PUSH
10158: LD_INT 2
10160: ARRAY
10161: PPUSH
10162: LD_EXP 40
10166: PUSH
10167: LD_INT 3
10169: ARRAY
10170: PPUSH
10171: LD_EXP 40
10175: PUSH
10176: LD_INT 4
10178: ARRAY
10179: PPUSH
10180: CALL_OW 145
10184: GO 10078
10186: POP
10187: POP
// end else
10188: GO 10268
// for i = 1 to l_eng do
10190: LD_ADDR_VAR 0 2
10194: PUSH
10195: DOUBLE
10196: LD_INT 1
10198: DEC
10199: ST_TO_ADDR
10200: LD_VAR 0 16
10204: PUSH
10205: FOR_TO
10206: IFFALSE 10266
// if not IsInUnit ( l_eng [ i ] ) and not HasTask ( l_eng [ i ] ) then
10208: LD_VAR 0 16
10212: PUSH
10213: LD_VAR 0 2
10217: ARRAY
10218: PPUSH
10219: CALL_OW 310
10223: NOT
10224: PUSH
10225: LD_VAR 0 16
10229: PUSH
10230: LD_VAR 0 2
10234: ARRAY
10235: PPUSH
10236: CALL_OW 314
10240: NOT
10241: AND
10242: IFFALSE 10264
// ComEnterUnit ( l_eng [ i ] , l_depot ) ;
10244: LD_VAR 0 16
10248: PUSH
10249: LD_VAR 0 2
10253: ARRAY
10254: PPUSH
10255: LD_VAR 0 8
10259: PPUSH
10260: CALL_OW 120
10264: GO 10205
10266: POP
10267: POP
// end ; end ; if l_factory then
10268: LD_VAR 0 9
10272: IFFALSE 10672
// begin if FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) > 0 then
10274: LD_INT 22
10276: PUSH
10277: LD_INT 8
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: PUSH
10284: LD_INT 33
10286: PUSH
10287: LD_INT 2
10289: PUSH
10290: EMPTY
10291: LIST
10292: LIST
10293: PUSH
10294: LD_INT 3
10296: PUSH
10297: LD_INT 61
10299: PUSH
10300: EMPTY
10301: LIST
10302: PUSH
10303: EMPTY
10304: LIST
10305: LIST
10306: PUSH
10307: EMPTY
10308: LIST
10309: LIST
10310: LIST
10311: PPUSH
10312: CALL_OW 69
10316: PUSH
10317: LD_INT 0
10319: GREATER
10320: PUSH
10321: LD_INT 22
10323: PUSH
10324: LD_INT 8
10326: PUSH
10327: EMPTY
10328: LIST
10329: LIST
10330: PUSH
10331: LD_INT 34
10333: PUSH
10334: LD_INT 31
10336: PUSH
10337: EMPTY
10338: LIST
10339: LIST
10340: PUSH
10341: EMPTY
10342: LIST
10343: LIST
10344: PPUSH
10345: CALL_OW 69
10349: PUSH
10350: LD_INT 0
10352: GREATER
10353: AND
10354: IFFALSE 10474
// ComLinkTo ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) [ 1 ] , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) [ Rand ( 1 , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) ) ] ) ;
10356: LD_INT 22
10358: PUSH
10359: LD_INT 8
10361: PUSH
10362: EMPTY
10363: LIST
10364: LIST
10365: PUSH
10366: LD_INT 33
10368: PUSH
10369: LD_INT 2
10371: PUSH
10372: EMPTY
10373: LIST
10374: LIST
10375: PUSH
10376: LD_INT 3
10378: PUSH
10379: LD_INT 61
10381: PUSH
10382: EMPTY
10383: LIST
10384: PUSH
10385: EMPTY
10386: LIST
10387: LIST
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: LIST
10393: PPUSH
10394: CALL_OW 69
10398: PUSH
10399: LD_INT 1
10401: ARRAY
10402: PPUSH
10403: LD_INT 22
10405: PUSH
10406: LD_INT 8
10408: PUSH
10409: EMPTY
10410: LIST
10411: LIST
10412: PUSH
10413: LD_INT 34
10415: PUSH
10416: LD_INT 31
10418: PUSH
10419: EMPTY
10420: LIST
10421: LIST
10422: PUSH
10423: EMPTY
10424: LIST
10425: LIST
10426: PPUSH
10427: CALL_OW 69
10431: PUSH
10432: LD_INT 1
10434: PPUSH
10435: LD_INT 22
10437: PUSH
10438: LD_INT 8
10440: PUSH
10441: EMPTY
10442: LIST
10443: LIST
10444: PUSH
10445: LD_INT 34
10447: PUSH
10448: LD_INT 31
10450: PUSH
10451: EMPTY
10452: LIST
10453: LIST
10454: PUSH
10455: EMPTY
10456: LIST
10457: LIST
10458: PPUSH
10459: CALL_OW 69
10463: PPUSH
10464: CALL_OW 12
10468: ARRAY
10469: PPUSH
10470: CALL_OW 135
// if legion_vlist > 0 and BuildingStatus ( l_factory ) = bs_idle then
10474: LD_EXP 41
10478: PUSH
10479: LD_INT 0
10481: GREATER
10482: PUSH
10483: LD_VAR 0 9
10487: PPUSH
10488: CALL_OW 461
10492: PUSH
10493: LD_INT 2
10495: EQUAL
10496: AND
10497: IFFALSE 10582
// begin ComConstruct ( l_factory , legion_vlist [ 1 ] , legion_vlist [ 2 ] , legion_vlist [ 3 ] , legion_vlist [ 4 ] ) ;
10499: LD_VAR 0 9
10503: PPUSH
10504: LD_EXP 41
10508: PUSH
10509: LD_INT 1
10511: ARRAY
10512: PPUSH
10513: LD_EXP 41
10517: PUSH
10518: LD_INT 2
10520: ARRAY
10521: PPUSH
10522: LD_EXP 41
10526: PUSH
10527: LD_INT 3
10529: ARRAY
10530: PPUSH
10531: LD_EXP 41
10535: PUSH
10536: LD_INT 4
10538: ARRAY
10539: PPUSH
10540: CALL_OW 125
// for i = 1 to 4 do
10544: LD_ADDR_VAR 0 2
10548: PUSH
10549: DOUBLE
10550: LD_INT 1
10552: DEC
10553: ST_TO_ADDR
10554: LD_INT 4
10556: PUSH
10557: FOR_TO
10558: IFFALSE 10580
// legion_vlist := Delete ( legion_vlist , 1 ) ;
10560: LD_ADDR_EXP 41
10564: PUSH
10565: LD_EXP 41
10569: PPUSH
10570: LD_INT 1
10572: PPUSH
10573: CALL_OW 3
10577: ST_TO_ADDR
10578: GO 10557
10580: POP
10581: POP
// end ; if UnitFilter ( l_towers , [ f_bweapon , 0 ] ) > 0 and BuildingStatus ( l_factory ) = bs_idle then
10582: LD_VAR 0 11
10586: PPUSH
10587: LD_INT 35
10589: PUSH
10590: LD_INT 0
10592: PUSH
10593: EMPTY
10594: LIST
10595: LIST
10596: PPUSH
10597: CALL_OW 72
10601: PUSH
10602: LD_INT 0
10604: GREATER
10605: PUSH
10606: LD_VAR 0 9
10610: PPUSH
10611: CALL_OW 461
10615: PUSH
10616: LD_INT 2
10618: EQUAL
10619: AND
10620: IFFALSE 10672
// ComPlaceWeapon ( UnitFilter ( l_towers , [ f_bweapon , 0 ] ) [ 1 ] , [ ar_rocket_launcher , ar_gun ] [ Rand ( 1 , 2 ) ] ) ;
10622: LD_VAR 0 11
10626: PPUSH
10627: LD_INT 35
10629: PUSH
10630: LD_INT 0
10632: PUSH
10633: EMPTY
10634: LIST
10635: LIST
10636: PPUSH
10637: CALL_OW 72
10641: PUSH
10642: LD_INT 1
10644: ARRAY
10645: PPUSH
10646: LD_INT 28
10648: PUSH
10649: LD_INT 27
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: PUSH
10656: LD_INT 1
10658: PPUSH
10659: LD_INT 2
10661: PPUSH
10662: CALL_OW 12
10666: ARRAY
10667: PPUSH
10668: CALL_OW 148
// end ; if legion_enemy > 0 then
10672: LD_EXP 42
10676: PUSH
10677: LD_INT 0
10679: GREATER
10680: IFFALSE 10963
// begin if tick mod 11 11$00 = 0 then
10682: LD_OWVAR 1
10686: PUSH
10687: LD_INT 23100
10689: MOD
10690: PUSH
10691: LD_INT 0
10693: EQUAL
10694: IFFALSE 10944
// begin legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
10696: LD_ADDR_EXP 41
10700: PUSH
10701: LD_EXP 41
10705: PUSH
10706: LD_INT 13
10708: PUSH
10709: LD_INT 1
10711: PUSH
10712: LD_INT 2
10714: PUSH
10715: EMPTY
10716: LIST
10717: LIST
10718: LIST
10719: ADD
10720: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
10721: LD_ADDR_EXP 41
10725: PUSH
10726: LD_EXP 41
10730: PUSH
10731: LD_INT 28
10733: PUSH
10734: LD_INT 27
10736: PUSH
10737: LD_INT 29
10739: PUSH
10740: EMPTY
10741: LIST
10742: LIST
10743: LIST
10744: PUSH
10745: LD_INT 1
10747: PPUSH
10748: LD_INT 3
10750: PPUSH
10751: CALL_OW 12
10755: ARRAY
10756: ADD
10757: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
10758: LD_ADDR_EXP 41
10762: PUSH
10763: LD_EXP 41
10767: PUSH
10768: LD_INT 13
10770: PUSH
10771: LD_INT 1
10773: PUSH
10774: LD_INT 2
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: LIST
10781: ADD
10782: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
10783: LD_ADDR_EXP 41
10787: PUSH
10788: LD_EXP 41
10792: PUSH
10793: LD_INT 28
10795: PUSH
10796: LD_INT 27
10798: PUSH
10799: LD_INT 29
10801: PUSH
10802: EMPTY
10803: LIST
10804: LIST
10805: LIST
10806: PUSH
10807: LD_INT 1
10809: PPUSH
10810: LD_INT 3
10812: PPUSH
10813: CALL_OW 12
10817: ARRAY
10818: ADD
10819: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
10820: LD_ADDR_EXP 41
10824: PUSH
10825: LD_EXP 41
10829: PUSH
10830: LD_INT 13
10832: PUSH
10833: LD_INT 1
10835: PUSH
10836: LD_INT 2
10838: PUSH
10839: EMPTY
10840: LIST
10841: LIST
10842: LIST
10843: ADD
10844: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_mortar , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
10845: LD_ADDR_EXP 41
10849: PUSH
10850: LD_EXP 41
10854: PUSH
10855: LD_INT 28
10857: PUSH
10858: LD_INT 92
10860: PUSH
10861: LD_INT 29
10863: PUSH
10864: EMPTY
10865: LIST
10866: LIST
10867: LIST
10868: PUSH
10869: LD_INT 1
10871: PPUSH
10872: LD_INT 3
10874: PPUSH
10875: CALL_OW 12
10879: ARRAY
10880: ADD
10881: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
10882: LD_ADDR_EXP 41
10886: PUSH
10887: LD_EXP 41
10891: PUSH
10892: LD_INT 13
10894: PUSH
10895: LD_INT 1
10897: PUSH
10898: LD_INT 2
10900: PUSH
10901: EMPTY
10902: LIST
10903: LIST
10904: LIST
10905: ADD
10906: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
10907: LD_ADDR_EXP 41
10911: PUSH
10912: LD_EXP 41
10916: PUSH
10917: LD_INT 28
10919: PUSH
10920: LD_INT 27
10922: PUSH
10923: LD_INT 29
10925: PUSH
10926: EMPTY
10927: LIST
10928: LIST
10929: LIST
10930: PUSH
10931: LD_INT 1
10933: PPUSH
10934: LD_INT 3
10936: PPUSH
10937: CALL_OW 12
10941: ARRAY
10942: ADD
10943: ST_TO_ADDR
// end ; if legion_force >= 8 then
10944: LD_EXP 37
10948: PUSH
10949: LD_INT 8
10951: GREATEREQUAL
10952: IFFALSE 10963
// RaiseSailEvent ( event_legion_attack ) ;
10954: LD_EXP 21
10958: PPUSH
10959: CALL_OW 427
// end ; if FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_cargo_bay ] ] ) then
10963: LD_INT 22
10965: PUSH
10966: LD_INT 8
10968: PUSH
10969: EMPTY
10970: LIST
10971: LIST
10972: PUSH
10973: LD_INT 34
10975: PUSH
10976: LD_INT 32
10978: PUSH
10979: EMPTY
10980: LIST
10981: LIST
10982: PUSH
10983: EMPTY
10984: LIST
10985: LIST
10986: PPUSH
10987: CALL_OW 69
10991: IFFALSE 11105
// begin if l_cargo = false then
10993: LD_VAR 0 17
10997: PUSH
10998: LD_INT 0
11000: EQUAL
11001: IFFALSE 11037
// l_cargo := FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_cargo_bay ] ] ) ;
11003: LD_ADDR_VAR 0 17
11007: PUSH
11008: LD_INT 22
11010: PUSH
11011: LD_INT 8
11013: PUSH
11014: EMPTY
11015: LIST
11016: LIST
11017: PUSH
11018: LD_INT 34
11020: PUSH
11021: LD_INT 32
11023: PUSH
11024: EMPTY
11025: LIST
11026: LIST
11027: PUSH
11028: EMPTY
11029: LIST
11030: LIST
11031: PPUSH
11032: CALL_OW 69
11036: ST_TO_ADDR
// if l_cargo then
11037: LD_VAR 0 17
11041: IFFALSE 11105
// begin cr := GetListOfCratesInArea ( legion_crates ) ;
11043: LD_ADDR_VAR 0 7
11047: PUSH
11048: LD_INT 14
11050: PPUSH
11051: CALL_OW 435
11055: ST_TO_ADDR
// if cr > 0 then
11056: LD_VAR 0 7
11060: PUSH
11061: LD_INT 0
11063: GREATER
11064: IFFALSE 11105
// if not HasTask ( l_cargo ) then
11066: LD_VAR 0 17
11070: PPUSH
11071: CALL_OW 314
11075: NOT
11076: IFFALSE 11105
// ComCollect ( l_cargo , cr [ 1 ] , cr [ 2 ] ) ;
11078: LD_VAR 0 17
11082: PPUSH
11083: LD_VAR 0 7
11087: PUSH
11088: LD_INT 1
11090: ARRAY
11091: PPUSH
11092: LD_VAR 0 7
11096: PUSH
11097: LD_INT 2
11099: ARRAY
11100: PPUSH
11101: CALL_OW 117
// end ; end ; end ;
11105: PPOPN 17
11107: END
// every 9 9$00 trigger difficulty > 1 do var i , sci , sib , p ;
11108: LD_OWVAR 67
11112: PUSH
11113: LD_INT 1
11115: GREATER
11116: IFFALSE 11321
11118: GO 11120
11120: DISABLE
11121: LD_INT 0
11123: PPUSH
11124: PPUSH
11125: PPUSH
11126: PPUSH
// begin Wait ( Rand ( 0 0$01 , 6 6$01 ) ) ;
11127: LD_INT 35
11129: PPUSH
11130: LD_INT 12635
11132: PPUSH
11133: CALL_OW 12
11137: PPUSH
11138: CALL_OW 67
// sci := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 4 ] ] ) ;
11142: LD_ADDR_VAR 0 2
11146: PUSH
11147: LD_INT 22
11149: PUSH
11150: LD_INT 8
11152: PUSH
11153: EMPTY
11154: LIST
11155: LIST
11156: PUSH
11157: LD_INT 25
11159: PUSH
11160: LD_INT 4
11162: PUSH
11163: EMPTY
11164: LIST
11165: LIST
11166: PUSH
11167: EMPTY
11168: LIST
11169: LIST
11170: PPUSH
11171: CALL_OW 69
11175: ST_TO_ADDR
// p := 1 ;
11176: LD_ADDR_VAR 0 4
11180: PUSH
11181: LD_INT 1
11183: ST_TO_ADDR
// sib := [ 116 , 139 , 69 , 13 ] ;
11184: LD_ADDR_VAR 0 3
11188: PUSH
11189: LD_INT 116
11191: PUSH
11192: LD_INT 139
11194: PUSH
11195: LD_INT 69
11197: PUSH
11198: LD_INT 13
11200: PUSH
11201: EMPTY
11202: LIST
11203: LIST
11204: LIST
11205: LIST
11206: ST_TO_ADDR
// for i = 1 to 2 do
11207: LD_ADDR_VAR 0 1
11211: PUSH
11212: DOUBLE
11213: LD_INT 1
11215: DEC
11216: ST_TO_ADDR
11217: LD_INT 2
11219: PUSH
11220: FOR_TO
11221: IFFALSE 11319
// begin if IsInUnit ( sci [ i ] ) then
11223: LD_VAR 0 2
11227: PUSH
11228: LD_VAR 0 1
11232: ARRAY
11233: PPUSH
11234: CALL_OW 310
11238: IFFALSE 11255
// ComExitBuilding ( sci [ i ] ) ;
11240: LD_VAR 0 2
11244: PUSH
11245: LD_VAR 0 1
11249: ARRAY
11250: PPUSH
11251: CALL_OW 122
// Wait ( 0 0$03 ) ;
11255: LD_INT 105
11257: PPUSH
11258: CALL_OW 67
// ComContaminate ( sci [ i ] , sib [ p ] , sib [ p + 1 ] ) ;
11262: LD_VAR 0 2
11266: PUSH
11267: LD_VAR 0 1
11271: ARRAY
11272: PPUSH
11273: LD_VAR 0 3
11277: PUSH
11278: LD_VAR 0 4
11282: ARRAY
11283: PPUSH
11284: LD_VAR 0 3
11288: PUSH
11289: LD_VAR 0 4
11293: PUSH
11294: LD_INT 1
11296: PLUS
11297: ARRAY
11298: PPUSH
11299: CALL_OW 158
// p := p + 2 ;
11303: LD_ADDR_VAR 0 4
11307: PUSH
11308: LD_VAR 0 4
11312: PUSH
11313: LD_INT 2
11315: PLUS
11316: ST_TO_ADDR
// end ;
11317: GO 11220
11319: POP
11320: POP
// end ;
11321: PPOPN 4
11323: END
// every 3 3$30 trigger GetListOfCratesInArea ( legion_crates ) < 20 do
11324: LD_INT 14
11326: PPUSH
11327: CALL_OW 435
11331: PUSH
11332: LD_INT 20
11334: LESS
11335: IFFALSE 11362
11337: GO 11339
11339: DISABLE
// begin enable ;
11340: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , legion_crates , true ) ;
11341: LD_INT 1
11343: PPUSH
11344: LD_INT 5
11346: PPUSH
11347: CALL_OW 12
11351: PPUSH
11352: LD_INT 14
11354: PPUSH
11355: LD_INT 1
11357: PPUSH
11358: CALL_OW 55
// end ;
11362: END
// export function LegionAttack ( ) ; var path , units ; begin
11363: LD_INT 0
11365: PPUSH
11366: PPUSH
11367: PPUSH
// units := legion_force ;
11368: LD_ADDR_VAR 0 3
11372: PUSH
11373: LD_EXP 37
11377: ST_TO_ADDR
// legion_force := [ ] ;
11378: LD_ADDR_EXP 37
11382: PUSH
11383: EMPTY
11384: ST_TO_ADDR
// case legion_enemy of 1 :
11385: LD_EXP 42
11389: PUSH
11390: LD_INT 1
11392: DOUBLE
11393: EQUAL
11394: IFTRUE 11398
11396: GO 11441
11398: POP
// path := [ [ 174 , 135 ] , [ 153 , 146 ] , [ 118 , 122 ] ] ; 2 :
11399: LD_ADDR_VAR 0 2
11403: PUSH
11404: LD_INT 174
11406: PUSH
11407: LD_INT 135
11409: PUSH
11410: EMPTY
11411: LIST
11412: LIST
11413: PUSH
11414: LD_INT 153
11416: PUSH
11417: LD_INT 146
11419: PUSH
11420: EMPTY
11421: LIST
11422: LIST
11423: PUSH
11424: LD_INT 118
11426: PUSH
11427: LD_INT 122
11429: PUSH
11430: EMPTY
11431: LIST
11432: LIST
11433: PUSH
11434: EMPTY
11435: LIST
11436: LIST
11437: LIST
11438: ST_TO_ADDR
11439: GO 11544
11441: LD_INT 2
11443: DOUBLE
11444: EQUAL
11445: IFTRUE 11449
11447: GO 11492
11449: POP
// path := [ [ 164 , 73 ] , [ 130 , 48 ] , [ 96 , 48 ] ] ; 7 :
11450: LD_ADDR_VAR 0 2
11454: PUSH
11455: LD_INT 164
11457: PUSH
11458: LD_INT 73
11460: PUSH
11461: EMPTY
11462: LIST
11463: LIST
11464: PUSH
11465: LD_INT 130
11467: PUSH
11468: LD_INT 48
11470: PUSH
11471: EMPTY
11472: LIST
11473: LIST
11474: PUSH
11475: LD_INT 96
11477: PUSH
11478: LD_INT 48
11480: PUSH
11481: EMPTY
11482: LIST
11483: LIST
11484: PUSH
11485: EMPTY
11486: LIST
11487: LIST
11488: LIST
11489: ST_TO_ADDR
11490: GO 11544
11492: LD_INT 7
11494: DOUBLE
11495: EQUAL
11496: IFTRUE 11500
11498: GO 11543
11500: POP
// path := [ [ 174 , 135 ] , [ 153 , 146 ] , [ 118 , 122 ] ] ; end ;
11501: LD_ADDR_VAR 0 2
11505: PUSH
11506: LD_INT 174
11508: PUSH
11509: LD_INT 135
11511: PUSH
11512: EMPTY
11513: LIST
11514: LIST
11515: PUSH
11516: LD_INT 153
11518: PUSH
11519: LD_INT 146
11521: PUSH
11522: EMPTY
11523: LIST
11524: LIST
11525: PUSH
11526: LD_INT 118
11528: PUSH
11529: LD_INT 122
11531: PUSH
11532: EMPTY
11533: LIST
11534: LIST
11535: PUSH
11536: EMPTY
11537: LIST
11538: LIST
11539: LIST
11540: ST_TO_ADDR
11541: GO 11544
11543: POP
// repeat wait ( 0 0$1 ) ;
11544: LD_INT 35
11546: PPUSH
11547: CALL_OW 67
// until not AgressiveMove ( units , path ) ;
11551: LD_VAR 0 3
11555: PPUSH
11556: LD_VAR 0 2
11560: PPUSH
11561: CALL 79559 0 2
11565: NOT
11566: IFFALSE 11544
// end ; end_of_file
11568: LD_VAR 0 1
11572: RET
// export function Action ; var un , gamemode , speaker ; begin
11573: LD_INT 0
11575: PPUSH
11576: PPUSH
11577: PPUSH
11578: PPUSH
// if debug then
11579: LD_EXP 15
11583: IFFALSE 11610
// begin Difficulty := 2 ;
11585: LD_ADDR_OWVAR 67
11589: PUSH
11590: LD_INT 2
11592: ST_TO_ADDR
// gamemode := 3 ;
11593: LD_ADDR_VAR 0 3
11597: PUSH
11598: LD_INT 3
11600: ST_TO_ADDR
// FogOff ( 7 ) ;
11601: LD_INT 7
11603: PPUSH
11604: CALL_OW 344
// end else
11608: GO 11636
// begin Difficulty := GetMultiplayerSetting ( 0 ) ;
11610: LD_ADDR_OWVAR 67
11614: PUSH
11615: LD_INT 0
11617: PPUSH
11618: CALL_OW 426
11622: ST_TO_ADDR
// gamemode := GetMultiplayerSetting ( 1 ) ;
11623: LD_ADDR_VAR 0 3
11627: PUSH
11628: LD_INT 1
11630: PPUSH
11631: CALL_OW 426
11635: ST_TO_ADDR
// end ; if gamemode = 1 then
11636: LD_VAR 0 3
11640: PUSH
11641: LD_INT 1
11643: EQUAL
11644: IFFALSE 11668
// begin your_side := 1 ;
11646: LD_ADDR_OWVAR 2
11650: PUSH
11651: LD_INT 1
11653: ST_TO_ADDR
// legion_enemy := 1 ;
11654: LD_ADDR_EXP 42
11658: PUSH
11659: LD_INT 1
11661: ST_TO_ADDR
// PrepareAmerican ;
11662: CALL 261 0 0
// end else
11666: GO 11720
// if gamemode = 2 then
11668: LD_VAR 0 3
11672: PUSH
11673: LD_INT 2
11675: EQUAL
11676: IFFALSE 11700
// begin your_side := 2 ;
11678: LD_ADDR_OWVAR 2
11682: PUSH
11683: LD_INT 2
11685: ST_TO_ADDR
// legion_enemy := 2 ;
11686: LD_ADDR_EXP 42
11690: PUSH
11691: LD_INT 2
11693: ST_TO_ADDR
// PrepareArabian ;
11694: CALL 18986 0 0
// end else
11698: GO 11720
// begin your_side := 7 ;
11700: LD_ADDR_OWVAR 2
11704: PUSH
11705: LD_INT 7
11707: ST_TO_ADDR
// legion_enemy := 7 ;
11708: LD_ADDR_EXP 42
11712: PUSH
11713: LD_INT 7
11715: ST_TO_ADDR
// PrepareAlliance ;
11716: CALL 16170 0 0
// end ; if your_side = 1 then
11720: LD_OWVAR 2
11724: PUSH
11725: LD_INT 1
11727: EQUAL
11728: IFFALSE 12304
// begin Query ( QVul4 ) ;
11730: LD_STRING QVul4
11732: PPUSH
11733: CALL_OW 97
// InGameOn ;
11737: CALL_OW 8
// PlaceSeeing ( 8 , 5 , 1 , 12 ) ;
11741: LD_INT 8
11743: PPUSH
11744: LD_INT 5
11746: PPUSH
11747: LD_INT 1
11749: PPUSH
11750: LD_INT 12
11752: PPUSH
11753: CALL_OW 330
// RemoveSeeing ( 8 , 5 , 1 ) ;
11757: LD_INT 8
11759: PPUSH
11760: LD_INT 5
11762: PPUSH
11763: LD_INT 1
11765: PPUSH
11766: CALL_OW 331
// PlaceSeeing ( 98 , 148 , 1 , 2 ) ;
11770: LD_INT 98
11772: PPUSH
11773: LD_INT 148
11775: PPUSH
11776: LD_INT 1
11778: PPUSH
11779: LD_INT 2
11781: PPUSH
11782: CALL_OW 330
// RemoveSeeing ( 98 , 148 , 1 ) ;
11786: LD_INT 98
11788: PPUSH
11789: LD_INT 148
11791: PPUSH
11792: LD_INT 1
11794: PPUSH
11795: CALL_OW 331
// CenterNowOnXY ( 8 , 5 ) ;
11799: LD_INT 8
11801: PPUSH
11802: LD_INT 5
11804: PPUSH
11805: CALL_OW 86
// uc_side := 4 ;
11809: LD_ADDR_OWVAR 20
11813: PUSH
11814: LD_INT 4
11816: ST_TO_ADDR
// uc_nation := 1 ;
11817: LD_ADDR_OWVAR 21
11821: PUSH
11822: LD_INT 1
11824: ST_TO_ADDR
// hc_importance := 0 ;
11825: LD_ADDR_OWVAR 32
11829: PUSH
11830: LD_INT 0
11832: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , us_skill ) ;
11833: LD_INT 1
11835: PPUSH
11836: LD_INT 3
11838: PPUSH
11839: LD_EXP 26
11843: PPUSH
11844: CALL_OW 380
// un := CreateHuman ;
11848: LD_ADDR_VAR 0 2
11852: PUSH
11853: CALL_OW 44
11857: ST_TO_ADDR
// PlaceUnitXY ( un , 19 , 23 , false ) ;
11858: LD_VAR 0 2
11862: PPUSH
11863: LD_INT 19
11865: PPUSH
11866: LD_INT 23
11868: PPUSH
11869: LD_INT 0
11871: PPUSH
11872: CALL_OW 48
// hc_name := Stuart Carey ;
11876: LD_ADDR_OWVAR 26
11880: PUSH
11881: LD_STRING Stuart Carey
11883: ST_TO_ADDR
// hc_class := 1 ;
11884: LD_ADDR_OWVAR 28
11888: PUSH
11889: LD_INT 1
11891: ST_TO_ADDR
// hc_gallery := vulcano ;
11892: LD_ADDR_OWVAR 33
11896: PUSH
11897: LD_STRING vulcano
11899: ST_TO_ADDR
// hc_face_number := 1 ;
11900: LD_ADDR_OWVAR 34
11904: PUSH
11905: LD_INT 1
11907: ST_TO_ADDR
// us_guy := CreateHuman ;
11908: LD_ADDR_EXP 27
11912: PUSH
11913: CALL_OW 44
11917: ST_TO_ADDR
// InitHc ;
11918: CALL_OW 19
// if rand ( 0 , 1 ) then
11922: LD_INT 0
11924: PPUSH
11925: LD_INT 1
11927: PPUSH
11928: CALL_OW 12
11932: IFFALSE 11949
// PrepareHuman ( sex_male , 3 , 6 ) else
11934: LD_INT 1
11936: PPUSH
11937: LD_INT 3
11939: PPUSH
11940: LD_INT 6
11942: PPUSH
11943: CALL_OW 380
11947: GO 11962
// PrepareHuman ( sex_female , 4 , 8 ) ;
11949: LD_INT 2
11951: PPUSH
11952: LD_INT 4
11954: PPUSH
11955: LD_INT 8
11957: PPUSH
11958: CALL_OW 380
// ComMoveXY ( un , 12 , 10 ) ;
11962: LD_VAR 0 2
11966: PPUSH
11967: LD_INT 12
11969: PPUSH
11970: LD_INT 10
11972: PPUSH
11973: CALL_OW 111
// ComTurnUnit ( us_commander , un ) ;
11977: LD_EXP 24
11981: PPUSH
11982: LD_VAR 0 2
11986: PPUSH
11987: CALL_OW 119
// repeat wait ( 0 0$3 ) ;
11991: LD_INT 105
11993: PPUSH
11994: CALL_OW 67
// until See ( 4 , us_commander ) or IsAt ( un , 12 , 10 ) ;
11998: LD_INT 4
12000: PPUSH
12001: LD_EXP 24
12005: PPUSH
12006: CALL_OW 292
12010: PUSH
12011: LD_VAR 0 2
12015: PPUSH
12016: LD_INT 12
12018: PPUSH
12019: LD_INT 10
12021: PPUSH
12022: CALL_OW 307
12026: OR
12027: IFFALSE 11991
// ComTurnUnit ( un , us_commander ) ;
12029: LD_VAR 0 2
12033: PPUSH
12034: LD_EXP 24
12038: PPUSH
12039: CALL_OW 119
// if GetSex ( un ) = sex_male then
12043: LD_VAR 0 2
12047: PPUSH
12048: CALL_OW 258
12052: PUSH
12053: LD_INT 1
12055: EQUAL
12056: IFFALSE 12139
// begin Say ( un , VD-un1 ) ;
12058: LD_VAR 0 2
12062: PPUSH
12063: LD_STRING VD-un1
12065: PPUSH
12066: CALL_OW 88
// Say ( us_commander , VDc-1 ) ;
12070: LD_EXP 24
12074: PPUSH
12075: LD_STRING VDc-1
12077: PPUSH
12078: CALL_OW 88
// Say ( un , VD-un2 ) ;
12082: LD_VAR 0 2
12086: PPUSH
12087: LD_STRING VD-un2
12089: PPUSH
12090: CALL_OW 88
// Say ( us_commander , VDc-2 ) ;
12094: LD_EXP 24
12098: PPUSH
12099: LD_STRING VDc-2
12101: PPUSH
12102: CALL_OW 88
// Say ( un , VD-un3 ) ;
12106: LD_VAR 0 2
12110: PPUSH
12111: LD_STRING VD-un3
12113: PPUSH
12114: CALL_OW 88
// wait ( 0 0$0.2 ) ;
12118: LD_INT 7
12120: PPUSH
12121: CALL_OW 67
// Say ( un , VD-un4 ) ;
12125: LD_VAR 0 2
12129: PPUSH
12130: LD_STRING VD-un4
12132: PPUSH
12133: CALL_OW 88
// end else
12137: GO 12218
// begin Say ( un , VD-unf1 ) ;
12139: LD_VAR 0 2
12143: PPUSH
12144: LD_STRING VD-unf1
12146: PPUSH
12147: CALL_OW 88
// Say ( us_commander , VDc-1 ) ;
12151: LD_EXP 24
12155: PPUSH
12156: LD_STRING VDc-1
12158: PPUSH
12159: CALL_OW 88
// Say ( un , VD-unf2 ) ;
12163: LD_VAR 0 2
12167: PPUSH
12168: LD_STRING VD-unf2
12170: PPUSH
12171: CALL_OW 88
// Say ( us_commander , VDc-2 ) ;
12175: LD_EXP 24
12179: PPUSH
12180: LD_STRING VDc-2
12182: PPUSH
12183: CALL_OW 88
// Say ( un , VD-unf3 ) ;
12187: LD_VAR 0 2
12191: PPUSH
12192: LD_STRING VD-unf3
12194: PPUSH
12195: CALL_OW 88
// wait ( 0 0$0.2 ) ;
12199: LD_INT 7
12201: PPUSH
12202: CALL_OW 67
// Say ( un , VD-unf4 ) ;
12206: LD_VAR 0 2
12210: PPUSH
12211: LD_STRING VD-unf4
12213: PPUSH
12214: CALL_OW 88
// end ; ComMoveXY ( un , 2 , 2 ) ;
12218: LD_VAR 0 2
12222: PPUSH
12223: LD_INT 2
12225: PPUSH
12226: LD_INT 2
12228: PPUSH
12229: CALL_OW 111
// Say ( us_commander , VDc-3 ) ;
12233: LD_EXP 24
12237: PPUSH
12238: LD_STRING VDc-3
12240: PPUSH
12241: CALL_OW 88
// InGameOff ;
12245: CALL_OW 9
// ChangeMissionObjectives ( CVulc1 ) ;
12249: LD_STRING CVulc1
12251: PPUSH
12252: CALL_OW 337
// repeat Wait ( 0 0$01 ) ;
12256: LD_INT 35
12258: PPUSH
12259: CALL_OW 67
// until GetX ( un ) = 2 and GetY ( un ) = 2 ;
12263: LD_VAR 0 2
12267: PPUSH
12268: CALL_OW 250
12272: PUSH
12273: LD_INT 2
12275: EQUAL
12276: PUSH
12277: LD_VAR 0 2
12281: PPUSH
12282: CALL_OW 251
12286: PUSH
12287: LD_INT 2
12289: EQUAL
12290: AND
12291: IFFALSE 12256
// RemoveUnit ( un ) ;
12293: LD_VAR 0 2
12297: PPUSH
12298: CALL_OW 64
// end else
12302: GO 12681
// if your_side = 2 then
12304: LD_OWVAR 2
12308: PUSH
12309: LD_INT 2
12311: EQUAL
12312: IFFALSE 12528
// begin CenterNowOnUnits ( player_commander ) ;
12314: LD_EXP 11
12318: PPUSH
12319: CALL_OW 87
// speaker := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff ar_commander ;
12323: LD_ADDR_VAR 0 4
12327: PUSH
12328: LD_INT 22
12330: PUSH
12331: LD_INT 2
12333: PUSH
12334: EMPTY
12335: LIST
12336: LIST
12337: PUSH
12338: LD_INT 21
12340: PUSH
12341: LD_INT 1
12343: PUSH
12344: EMPTY
12345: LIST
12346: LIST
12347: PUSH
12348: EMPTY
12349: LIST
12350: LIST
12351: PPUSH
12352: CALL_OW 69
12356: PUSH
12357: LD_EXP 57
12361: DIFF
12362: ST_TO_ADDR
// if speaker then
12363: LD_VAR 0 4
12367: IFFALSE 12519
// begin InGameOn ;
12369: CALL_OW 8
// Say ( ar_commander , VSd-1 ) ;
12373: LD_EXP 57
12377: PPUSH
12378: LD_STRING VSd-1
12380: PPUSH
12381: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
12385: LD_VAR 0 4
12389: PUSH
12390: LD_INT 1
12392: ARRAY
12393: PPUSH
12394: CALL_OW 258
12398: PUSH
12399: LD_INT 1
12401: EQUAL
12402: IFFALSE 12422
// Say ( speaker [ 1 ] , VAd-1 ) else
12404: LD_VAR 0 4
12408: PUSH
12409: LD_INT 1
12411: ARRAY
12412: PPUSH
12413: LD_STRING VAd-1
12415: PPUSH
12416: CALL_OW 88
12420: GO 12438
// Say ( speaker [ 1 ] , VAfd-1 ) ;
12422: LD_VAR 0 4
12426: PUSH
12427: LD_INT 1
12429: ARRAY
12430: PPUSH
12431: LD_STRING VAfd-1
12433: PPUSH
12434: CALL_OW 88
// Say ( ar_commander , VSd-2 ) ;
12438: LD_EXP 57
12442: PPUSH
12443: LD_STRING VSd-2
12445: PPUSH
12446: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
12450: LD_VAR 0 4
12454: PUSH
12455: LD_INT 1
12457: ARRAY
12458: PPUSH
12459: CALL_OW 258
12463: PUSH
12464: LD_INT 1
12466: EQUAL
12467: IFFALSE 12487
// Say ( speaker [ 1 ] , VAd-2 ) else
12469: LD_VAR 0 4
12473: PUSH
12474: LD_INT 1
12476: ARRAY
12477: PPUSH
12478: LD_STRING VAd-2
12480: PPUSH
12481: CALL_OW 88
12485: GO 12503
// Say ( speaker [ 1 ] , VAfd-2 ) ;
12487: LD_VAR 0 4
12491: PUSH
12492: LD_INT 1
12494: ARRAY
12495: PPUSH
12496: LD_STRING VAfd-2
12498: PPUSH
12499: CALL_OW 88
// Say ( ar_commander , VSd-3 ) ;
12503: LD_EXP 57
12507: PPUSH
12508: LD_STRING VSd-3
12510: PPUSH
12511: CALL_OW 88
// InGameOff ;
12515: CALL_OW 9
// end ; ChangeMissionObjectives ( CVulc5 ) ;
12519: LD_STRING CVulc5
12521: PPUSH
12522: CALL_OW 337
// end else
12526: GO 12681
// if your_side = 7 then
12528: LD_OWVAR 2
12532: PUSH
12533: LD_INT 7
12535: EQUAL
12536: IFFALSE 12681
// begin speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) diff al_commander ;
12538: LD_ADDR_VAR 0 4
12542: PUSH
12543: LD_INT 22
12545: PUSH
12546: LD_INT 7
12548: PUSH
12549: EMPTY
12550: LIST
12551: LIST
12552: PUSH
12553: LD_INT 21
12555: PUSH
12556: LD_INT 1
12558: PUSH
12559: EMPTY
12560: LIST
12561: LIST
12562: PUSH
12563: EMPTY
12564: LIST
12565: LIST
12566: PPUSH
12567: CALL_OW 69
12571: PUSH
12572: LD_EXP 43
12576: DIFF
12577: ST_TO_ADDR
// if speaker then
12578: LD_VAR 0 4
12582: IFFALSE 12674
// begin CenterNowOnUnits ( al_commander ) ;
12584: LD_EXP 43
12588: PPUSH
12589: CALL_OW 87
// InGameOn ;
12593: CALL_OW 8
// Say ( al_commander , VPd-1 ) ;
12597: LD_EXP 43
12601: PPUSH
12602: LD_STRING VPd-1
12604: PPUSH
12605: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) then
12609: LD_VAR 0 4
12613: PUSH
12614: LD_INT 1
12616: ARRAY
12617: PPUSH
12618: CALL_OW 258
12622: IFFALSE 12642
// Say ( speaker [ 1 ] , VPpd-1 ) else
12624: LD_VAR 0 4
12628: PUSH
12629: LD_INT 1
12631: ARRAY
12632: PPUSH
12633: LD_STRING VPpd-1
12635: PPUSH
12636: CALL_OW 88
12640: GO 12658
// Say ( speaker [ 1 ] , VPpdf-1 ) ;
12642: LD_VAR 0 4
12646: PUSH
12647: LD_INT 1
12649: ARRAY
12650: PPUSH
12651: LD_STRING VPpdf-1
12653: PPUSH
12654: CALL_OW 88
// Say ( al_commander , VPd-2 ) ;
12658: LD_EXP 43
12662: PPUSH
12663: LD_STRING VPd-2
12665: PPUSH
12666: CALL_OW 88
// InGameOff ;
12670: CALL_OW 9
// end ; ChangeMissionObjectives ( CVulc7 ) ;
12674: LD_STRING CVulc7
12676: PPUSH
12677: CALL_OW 337
// end ; SaveForQuickRestart ;
12681: CALL_OW 22
// end ;
12685: LD_VAR 0 1
12689: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) do
12690: LD_INT 22
12692: PUSH
12693: LD_INT 2
12695: PUSH
12696: EMPTY
12697: LIST
12698: LIST
12699: PUSH
12700: LD_INT 30
12702: PUSH
12703: LD_INT 3
12705: PUSH
12706: EMPTY
12707: LIST
12708: LIST
12709: PUSH
12710: EMPTY
12711: LIST
12712: LIST
12713: PPUSH
12714: CALL_OW 69
12718: IFFALSE 12762
12720: GO 12722
12722: DISABLE
// begin ChangeMissionObjectives ( CVulc6 ) ;
12723: LD_STRING CVulc6
12725: PPUSH
12726: CALL_OW 337
// Wait ( [ 25 25$00 , 22 22$30 , 20 20$00 ] [ Difficulty ] ) ;
12730: LD_INT 52500
12732: PUSH
12733: LD_INT 47250
12735: PUSH
12736: LD_INT 42000
12738: PUSH
12739: EMPTY
12740: LIST
12741: LIST
12742: LIST
12743: PUSH
12744: LD_OWVAR 67
12748: ARRAY
12749: PPUSH
12750: CALL_OW 67
// ru_can_attack := true ;
12754: LD_ADDR_EXP 3
12758: PUSH
12759: LD_INT 1
12761: ST_TO_ADDR
// end ;
12762: END
// every 0 0$01 trigger GetSide ( us_depot ) = 1 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_warehouse ] ] ] ) do var speaker ;
12763: LD_INT 50
12765: PPUSH
12766: CALL_OW 255
12770: PUSH
12771: LD_INT 1
12773: EQUAL
12774: PUSH
12775: LD_INT 22
12777: PUSH
12778: LD_INT 1
12780: PUSH
12781: EMPTY
12782: LIST
12783: LIST
12784: PUSH
12785: LD_INT 2
12787: PUSH
12788: LD_INT 30
12790: PUSH
12791: LD_INT 3
12793: PUSH
12794: EMPTY
12795: LIST
12796: LIST
12797: PUSH
12798: LD_INT 30
12800: PUSH
12801: LD_INT 1
12803: PUSH
12804: EMPTY
12805: LIST
12806: LIST
12807: PUSH
12808: EMPTY
12809: LIST
12810: LIST
12811: LIST
12812: PUSH
12813: EMPTY
12814: LIST
12815: LIST
12816: PPUSH
12817: CALL_OW 69
12821: OR
12822: IFFALSE 13056
12824: GO 12826
12826: DISABLE
12827: LD_INT 0
12829: PPUSH
// begin ChangeMissionObjectives ( CVulc2 ) ;
12830: LD_STRING CVulc2
12832: PPUSH
12833: CALL_OW 337
// speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) diff us_commander ;
12837: LD_ADDR_VAR 0 1
12841: PUSH
12842: LD_INT 22
12844: PUSH
12845: LD_INT 1
12847: PUSH
12848: EMPTY
12849: LIST
12850: LIST
12851: PUSH
12852: LD_INT 25
12854: PUSH
12855: LD_INT 2
12857: PUSH
12858: EMPTY
12859: LIST
12860: LIST
12861: PUSH
12862: EMPTY
12863: LIST
12864: LIST
12865: PPUSH
12866: CALL_OW 69
12870: PUSH
12871: LD_EXP 24
12875: DIFF
12876: ST_TO_ADDR
// DialogueOn ;
12877: CALL_OW 6
// DWait ( 0 0$0.3 ) ;
12881: LD_INT 10
12883: PPUSH
12884: CALL_OW 68
// if GetSex ( speaker [ 1 ] ) = sex_male then
12888: LD_VAR 0 1
12892: PUSH
12893: LD_INT 1
12895: ARRAY
12896: PPUSH
12897: CALL_OW 258
12901: PUSH
12902: LD_INT 1
12904: EQUAL
12905: IFFALSE 12925
// Say ( speaker [ 1 ] , VDb-1 ) else
12907: LD_VAR 0 1
12911: PUSH
12912: LD_INT 1
12914: ARRAY
12915: PPUSH
12916: LD_STRING VDb-1
12918: PPUSH
12919: CALL_OW 88
12923: GO 12941
// Say ( speaker [ 1 ] , VDbf-1 ) ;
12925: LD_VAR 0 1
12929: PUSH
12930: LD_INT 1
12932: ARRAY
12933: PPUSH
12934: LD_STRING VDbf-1
12936: PPUSH
12937: CALL_OW 88
// DWait ( 0 0$0.3 ) ;
12941: LD_INT 10
12943: PPUSH
12944: CALL_OW 68
// if GetSex ( speaker [ 1 ] ) = sex_male then
12948: LD_VAR 0 1
12952: PUSH
12953: LD_INT 1
12955: ARRAY
12956: PPUSH
12957: CALL_OW 258
12961: PUSH
12962: LD_INT 1
12964: EQUAL
12965: IFFALSE 12985
// Say ( speaker [ 1 ] , VDb-2 ) else
12967: LD_VAR 0 1
12971: PUSH
12972: LD_INT 1
12974: ARRAY
12975: PPUSH
12976: LD_STRING VDb-2
12978: PPUSH
12979: CALL_OW 88
12983: GO 13001
// Say ( speaker [ 1 ] , VDbf-2 ) ;
12985: LD_VAR 0 1
12989: PUSH
12990: LD_INT 1
12992: ARRAY
12993: PPUSH
12994: LD_STRING VDbf-2
12996: PPUSH
12997: CALL_OW 88
// DWait ( 0 0$01 ) ;
13001: LD_INT 35
13003: PPUSH
13004: CALL_OW 68
// Say ( us_commander , VDb-com1 ) ;
13008: LD_EXP 24
13012: PPUSH
13013: LD_STRING VDb-com1
13015: PPUSH
13016: CALL_OW 88
// DialogueOff ;
13020: CALL_OW 7
// Wait ( [ 21 21$00 , 17 17$30 , 15 15$00 ] [ Difficulty ] ) ;
13024: LD_INT 44100
13026: PUSH
13027: LD_INT 36750
13029: PUSH
13030: LD_INT 31500
13032: PUSH
13033: EMPTY
13034: LIST
13035: LIST
13036: LIST
13037: PUSH
13038: LD_OWVAR 67
13042: ARRAY
13043: PPUSH
13044: CALL_OW 67
// ru_can_attack := true ;
13048: LD_ADDR_EXP 3
13052: PUSH
13053: LD_INT 1
13055: ST_TO_ADDR
// end ;
13056: PPOPN 1
13058: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) do
13059: LD_INT 22
13061: PUSH
13062: LD_INT 7
13064: PUSH
13065: EMPTY
13066: LIST
13067: LIST
13068: PUSH
13069: LD_INT 30
13071: PUSH
13072: LD_INT 3
13074: PUSH
13075: EMPTY
13076: LIST
13077: LIST
13078: PUSH
13079: EMPTY
13080: LIST
13081: LIST
13082: PPUSH
13083: CALL_OW 69
13087: IFFALSE 13124
13089: GO 13091
13091: DISABLE
// begin Wait ( [ 20 20$00 , 16 16$30 , 14 14$00 ] [ Difficulty ] ) ;
13092: LD_INT 42000
13094: PUSH
13095: LD_INT 34650
13097: PUSH
13098: LD_INT 29400
13100: PUSH
13101: EMPTY
13102: LIST
13103: LIST
13104: LIST
13105: PUSH
13106: LD_OWVAR 67
13110: ARRAY
13111: PPUSH
13112: CALL_OW 67
// ru_can_attack := true ;
13116: LD_ADDR_EXP 3
13120: PUSH
13121: LD_INT 1
13123: ST_TO_ADDR
// end ;
13124: END
// every 0 0$01 trigger GetSide ( us_lab ) = 1 do var speaker ;
13125: LD_INT 58
13127: PPUSH
13128: CALL_OW 255
13132: PUSH
13133: LD_INT 1
13135: EQUAL
13136: IFFALSE 13343
13138: GO 13140
13140: DISABLE
13141: LD_INT 0
13143: PPUSH
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
13144: LD_ADDR_VAR 0 1
13148: PUSH
13149: LD_INT 22
13151: PUSH
13152: LD_INT 1
13154: PUSH
13155: EMPTY
13156: LIST
13157: LIST
13158: PUSH
13159: LD_INT 25
13161: PUSH
13162: LD_INT 2
13164: PUSH
13165: EMPTY
13166: LIST
13167: LIST
13168: PUSH
13169: EMPTY
13170: LIST
13171: LIST
13172: PPUSH
13173: CALL_OW 69
13177: ST_TO_ADDR
// DialogueOn ;
13178: CALL_OW 6
// if speaker then
13182: LD_VAR 0 1
13186: IFFALSE 13241
// if GetSex ( speaker [ 1 ] ) = sex_male then
13188: LD_VAR 0 1
13192: PUSH
13193: LD_INT 1
13195: ARRAY
13196: PPUSH
13197: CALL_OW 258
13201: PUSH
13202: LD_INT 1
13204: EQUAL
13205: IFFALSE 13225
// Say ( speaker [ 1 ] , VDe-1 ) else
13207: LD_VAR 0 1
13211: PUSH
13212: LD_INT 1
13214: ARRAY
13215: PPUSH
13216: LD_STRING VDe-1
13218: PPUSH
13219: CALL_OW 88
13223: GO 13241
// Say ( speaker [ 1 ] , VDef-1 ) ;
13225: LD_VAR 0 1
13229: PUSH
13230: LD_INT 1
13232: ARRAY
13233: PPUSH
13234: LD_STRING VDef-1
13236: PPUSH
13237: CALL_OW 88
// case Query ( SibNote ) of 1 :
13241: LD_STRING SibNote
13243: PPUSH
13244: CALL_OW 97
13248: PUSH
13249: LD_INT 1
13251: DOUBLE
13252: EQUAL
13253: IFTRUE 13257
13255: GO 13260
13257: POP
// ; end ;
13258: GO 13261
13260: POP
// if speaker then
13261: LD_VAR 0 1
13265: IFFALSE 13320
// if GetSex ( speaker [ 1 ] ) = sex_male then
13267: LD_VAR 0 1
13271: PUSH
13272: LD_INT 1
13274: ARRAY
13275: PPUSH
13276: CALL_OW 258
13280: PUSH
13281: LD_INT 1
13283: EQUAL
13284: IFFALSE 13304
// Say ( speaker [ 1 ] , VDe-2 ) else
13286: LD_VAR 0 1
13290: PUSH
13291: LD_INT 1
13293: ARRAY
13294: PPUSH
13295: LD_STRING VDe-2
13297: PPUSH
13298: CALL_OW 88
13302: GO 13320
// Say ( speaker [ 1 ] , VDef-2 ) ;
13304: LD_VAR 0 1
13308: PUSH
13309: LD_INT 1
13311: ARRAY
13312: PPUSH
13313: LD_STRING VDef-2
13315: PPUSH
13316: CALL_OW 88
// Say ( us_commander , VDc-4 ) ;
13320: LD_EXP 24
13324: PPUSH
13325: LD_STRING VDc-4
13327: PPUSH
13328: CALL_OW 88
// DialogueOff ;
13332: CALL_OW 7
// ChangeMissionObjectives ( CVulc3 ) ;
13336: LD_STRING CVulc3
13338: PPUSH
13339: CALL_OW 337
// end ;
13343: PPOPN 1
13345: END
// every 0 0$01 trigger your_side = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) > 0 do var i , un , veh ;
13346: LD_OWVAR 2
13350: PUSH
13351: LD_INT 1
13353: EQUAL
13354: PUSH
13355: LD_INT 22
13357: PUSH
13358: LD_INT 1
13360: PUSH
13361: EMPTY
13362: LIST
13363: LIST
13364: PUSH
13365: LD_INT 30
13367: PUSH
13368: LD_INT 3
13370: PUSH
13371: EMPTY
13372: LIST
13373: LIST
13374: PUSH
13375: EMPTY
13376: LIST
13377: LIST
13378: PPUSH
13379: CALL_OW 69
13383: PUSH
13384: LD_INT 0
13386: GREATER
13387: AND
13388: IFFALSE 13822
13390: GO 13392
13392: DISABLE
13393: LD_INT 0
13395: PPUSH
13396: PPUSH
13397: PPUSH
// begin Wait ( Rand ( 0 0$07 , 0 0$37 ) ) ;
13398: LD_INT 245
13400: PPUSH
13401: LD_INT 1295
13403: PPUSH
13404: CALL_OW 12
13408: PPUSH
13409: CALL_OW 67
// DialogueOn ;
13413: CALL_OW 6
// SayRadio ( us_guy , VDG-1 ) ;
13417: LD_EXP 27
13421: PPUSH
13422: LD_STRING VDG-1
13424: PPUSH
13425: CALL_OW 94
// Say ( us_commander , VDc-5 ) ;
13429: LD_EXP 24
13433: PPUSH
13434: LD_STRING VDc-5
13436: PPUSH
13437: CALL_OW 88
// SayRadio ( us_guy , VDG-2 ) ;
13441: LD_EXP 27
13445: PPUSH
13446: LD_STRING VDG-2
13448: PPUSH
13449: CALL_OW 94
// Say ( us_commander , VDc-6 ) ;
13453: LD_EXP 24
13457: PPUSH
13458: LD_STRING VDc-6
13460: PPUSH
13461: CALL_OW 88
// SayRadio ( us_guy , VDG-3 ) ;
13465: LD_EXP 27
13469: PPUSH
13470: LD_STRING VDG-3
13472: PPUSH
13473: CALL_OW 94
// Say ( us_commander , VDc-7 ) ;
13477: LD_EXP 24
13481: PPUSH
13482: LD_STRING VDc-7
13484: PPUSH
13485: CALL_OW 88
// SayRadio ( us_guy , VDG-4 ) ;
13489: LD_EXP 27
13493: PPUSH
13494: LD_STRING VDG-4
13496: PPUSH
13497: CALL_OW 94
// DialogueOff ;
13501: CALL_OW 7
// ChangeMissionObjectives ( CVulc4 ) ;
13505: LD_STRING CVulc4
13507: PPUSH
13508: CALL_OW 337
// Wait ( [ 9 9$00 , 10 10$00 , 11 11$00 ] [ Difficulty ] ) ;
13512: LD_INT 18900
13514: PUSH
13515: LD_INT 21000
13517: PUSH
13518: LD_INT 23100
13520: PUSH
13521: EMPTY
13522: LIST
13523: LIST
13524: LIST
13525: PUSH
13526: LD_OWVAR 67
13530: ARRAY
13531: PPUSH
13532: CALL_OW 67
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
13536: LD_ADDR_VAR 0 1
13540: PUSH
13541: DOUBLE
13542: LD_INT 1
13544: DEC
13545: ST_TO_ADDR
13546: LD_INT 4
13548: PUSH
13549: LD_INT 5
13551: PUSH
13552: LD_INT 6
13554: PUSH
13555: EMPTY
13556: LIST
13557: LIST
13558: LIST
13559: PUSH
13560: LD_OWVAR 67
13564: ARRAY
13565: PUSH
13566: FOR_TO
13567: IFFALSE 13811
// begin uc_side := 1 ;
13569: LD_ADDR_OWVAR 20
13573: PUSH
13574: LD_INT 1
13576: ST_TO_ADDR
// uc_nation := 1 ;
13577: LD_ADDR_OWVAR 21
13581: PUSH
13582: LD_INT 1
13584: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , us_skill ) ;
13585: LD_INT 0
13587: PPUSH
13588: LD_INT 1
13590: PPUSH
13591: LD_INT 4
13593: PPUSH
13594: CALL_OW 12
13598: PPUSH
13599: LD_EXP 26
13603: PPUSH
13604: CALL_OW 380
// un := CreateHuman ;
13608: LD_ADDR_VAR 0 2
13612: PUSH
13613: CALL_OW 44
13617: ST_TO_ADDR
// SetDir ( un , 2 ) ;
13618: LD_VAR 0 2
13622: PPUSH
13623: LD_INT 2
13625: PPUSH
13626: CALL_OW 233
// if GetClass ( un ) = 3 then
13630: LD_VAR 0 2
13634: PPUSH
13635: CALL_OW 257
13639: PUSH
13640: LD_INT 3
13642: EQUAL
13643: IFFALSE 13794
// begin vc_chassis := [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 ] ;
13645: LD_ADDR_OWVAR 37
13649: PUSH
13650: LD_INT 2
13652: PUSH
13653: LD_INT 3
13655: PUSH
13656: EMPTY
13657: LIST
13658: LIST
13659: PUSH
13660: LD_VAR 0 1
13664: PUSH
13665: LD_INT 2
13667: MOD
13668: ARRAY
13669: ST_TO_ADDR
// vc_engine := engine_combustion ;
13670: LD_ADDR_OWVAR 39
13674: PUSH
13675: LD_INT 1
13677: ST_TO_ADDR
// vc_control := control_manual ;
13678: LD_ADDR_OWVAR 38
13682: PUSH
13683: LD_INT 1
13685: ST_TO_ADDR
// vc_weapon := [ us_laser , us_laser , us_double_gun , us_radar ] [ rand ( 1 , 4 ) ] ;
13686: LD_ADDR_OWVAR 40
13690: PUSH
13691: LD_INT 9
13693: PUSH
13694: LD_INT 9
13696: PUSH
13697: LD_INT 5
13699: PUSH
13700: LD_INT 11
13702: PUSH
13703: EMPTY
13704: LIST
13705: LIST
13706: LIST
13707: LIST
13708: PUSH
13709: LD_INT 1
13711: PPUSH
13712: LD_INT 4
13714: PPUSH
13715: CALL_OW 12
13719: ARRAY
13720: ST_TO_ADDR
// veh := CreateVehicle ;
13721: LD_ADDR_VAR 0 3
13725: PUSH
13726: CALL_OW 45
13730: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
13731: LD_VAR 0 3
13735: PPUSH
13736: LD_INT 2
13738: PPUSH
13739: CALL_OW 233
// SetFuel ( veh , Rand ( 77 , 88 ) ) ;
13743: LD_VAR 0 3
13747: PPUSH
13748: LD_INT 77
13750: PPUSH
13751: LD_INT 88
13753: PPUSH
13754: CALL_OW 12
13758: PPUSH
13759: CALL_OW 240
// PlaceUnitArea ( veh , start_north , false ) ;
13763: LD_VAR 0 3
13767: PPUSH
13768: LD_INT 1
13770: PPUSH
13771: LD_INT 0
13773: PPUSH
13774: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
13778: LD_VAR 0 2
13782: PPUSH
13783: LD_VAR 0 3
13787: PPUSH
13788: CALL_OW 52
// end else
13792: GO 13809
// PlaceUnitArea ( un , start_north , false ) ;
13794: LD_VAR 0 2
13798: PPUSH
13799: LD_INT 1
13801: PPUSH
13802: LD_INT 0
13804: PPUSH
13805: CALL_OW 49
// end ;
13809: GO 13566
13811: POP
13812: POP
// CenterNowOnUnits ( un ) ;
13813: LD_VAR 0 2
13817: PPUSH
13818: CALL_OW 87
// end ;
13822: PPOPN 3
13824: END
// every 0 0$01 trigger FilterUnitsInArea ( vulc_artifact , [ f_side , your_side ] ) do var un , filter ;
13825: LD_INT 21
13827: PPUSH
13828: LD_INT 22
13830: PUSH
13831: LD_OWVAR 2
13835: PUSH
13836: EMPTY
13837: LIST
13838: LIST
13839: PPUSH
13840: CALL_OW 70
13844: IFFALSE 14165
13846: GO 13848
13848: DISABLE
13849: LD_INT 0
13851: PPUSH
13852: PPUSH
// begin filter := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff player_commander ;
13853: LD_ADDR_VAR 0 2
13857: PUSH
13858: LD_INT 22
13860: PUSH
13861: LD_OWVAR 2
13865: PUSH
13866: EMPTY
13867: LIST
13868: LIST
13869: PUSH
13870: LD_INT 2
13872: PUSH
13873: LD_INT 25
13875: PUSH
13876: LD_INT 1
13878: PUSH
13879: EMPTY
13880: LIST
13881: LIST
13882: PUSH
13883: LD_INT 25
13885: PUSH
13886: LD_INT 2
13888: PUSH
13889: EMPTY
13890: LIST
13891: LIST
13892: PUSH
13893: LD_INT 25
13895: PUSH
13896: LD_INT 3
13898: PUSH
13899: EMPTY
13900: LIST
13901: LIST
13902: PUSH
13903: LD_INT 25
13905: PUSH
13906: LD_INT 4
13908: PUSH
13909: EMPTY
13910: LIST
13911: LIST
13912: PUSH
13913: EMPTY
13914: LIST
13915: LIST
13916: LIST
13917: LIST
13918: LIST
13919: PUSH
13920: EMPTY
13921: LIST
13922: LIST
13923: PPUSH
13924: CALL_OW 69
13928: PUSH
13929: LD_EXP 11
13933: DIFF
13934: ST_TO_ADDR
// un := NearestUnitToXY ( filter , 112 , 67 ) ;
13935: LD_ADDR_VAR 0 1
13939: PUSH
13940: LD_VAR 0 2
13944: PPUSH
13945: LD_INT 112
13947: PPUSH
13948: LD_INT 67
13950: PPUSH
13951: CALL_OW 73
13955: ST_TO_ADDR
// if GetSide ( un ) = 7 then
13956: LD_VAR 0 1
13960: PPUSH
13961: CALL_OW 255
13965: PUSH
13966: LD_INT 7
13968: EQUAL
13969: IFFALSE 14012
// if GetSex ( un ) = sex_male then
13971: LD_VAR 0 1
13975: PPUSH
13976: CALL_OW 258
13980: PUSH
13981: LD_INT 1
13983: EQUAL
13984: IFFALSE 14000
// Say ( un , VD-find-al ) else
13986: LD_VAR 0 1
13990: PPUSH
13991: LD_STRING VD-find-al
13993: PPUSH
13994: CALL_OW 88
13998: GO 14012
// Say ( un , VD-find-al-f ) ;
14000: LD_VAR 0 1
14004: PPUSH
14005: LD_STRING VD-find-al-f
14007: PPUSH
14008: CALL_OW 88
// if GetSide ( un ) = 2 then
14012: LD_VAR 0 1
14016: PPUSH
14017: CALL_OW 255
14021: PUSH
14022: LD_INT 2
14024: EQUAL
14025: IFFALSE 14068
// if GetSex ( un ) = sex_male then
14027: LD_VAR 0 1
14031: PPUSH
14032: CALL_OW 258
14036: PUSH
14037: LD_INT 1
14039: EQUAL
14040: IFFALSE 14056
// Say ( un , VD-find-ar ) else
14042: LD_VAR 0 1
14046: PPUSH
14047: LD_STRING VD-find-ar
14049: PPUSH
14050: CALL_OW 88
14054: GO 14068
// Say ( un , VD-find-ar-f ) ;
14056: LD_VAR 0 1
14060: PPUSH
14061: LD_STRING VD-find-ar-f
14063: PPUSH
14064: CALL_OW 88
// if GetSide ( un ) = 1 then
14068: LD_VAR 0 1
14072: PPUSH
14073: CALL_OW 255
14077: PUSH
14078: LD_INT 1
14080: EQUAL
14081: IFFALSE 14148
// begin if GetSex ( un ) = sex_male then
14083: LD_VAR 0 1
14087: PPUSH
14088: CALL_OW 258
14092: PUSH
14093: LD_INT 1
14095: EQUAL
14096: IFFALSE 14124
// begin Say ( un , VD-find-us ) ;
14098: LD_VAR 0 1
14102: PPUSH
14103: LD_STRING VD-find-us
14105: PPUSH
14106: CALL_OW 88
// Say ( un , VD-find-us2 ) ;
14110: LD_VAR 0 1
14114: PPUSH
14115: LD_STRING VD-find-us2
14117: PPUSH
14118: CALL_OW 88
// end else
14122: GO 14148
// begin Say ( un , VD-find-us-f ) ;
14124: LD_VAR 0 1
14128: PPUSH
14129: LD_STRING VD-find-us-f
14131: PPUSH
14132: CALL_OW 88
// Say ( un , VD-find-us2-f ) ;
14136: LD_VAR 0 1
14140: PPUSH
14141: LD_STRING VD-find-us2-f
14143: PPUSH
14144: CALL_OW 88
// end ; end ; Wait ( 0 0$0.3 ) ;
14148: LD_INT 10
14150: PPUSH
14151: CALL_OW 67
// CenterNowOnXY ( 112 , 67 ) ;
14155: LD_INT 112
14157: PPUSH
14158: LD_INT 67
14160: PPUSH
14161: CALL_OW 86
// end ;
14165: PPOPN 2
14167: END
// every 0 0$01 trigger player_artifact_ready do var speaker ;
14168: LD_EXP 8
14172: IFFALSE 14674
14174: GO 14176
14176: DISABLE
14177: LD_INT 0
14179: PPUSH
// begin if your_side = 1 then
14180: LD_OWVAR 2
14184: PUSH
14185: LD_INT 1
14187: EQUAL
14188: IFFALSE 14369
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) diff us_commander ;
14190: LD_ADDR_VAR 0 1
14194: PUSH
14195: LD_INT 22
14197: PUSH
14198: LD_INT 1
14200: PUSH
14201: EMPTY
14202: LIST
14203: LIST
14204: PUSH
14205: LD_INT 25
14207: PUSH
14208: LD_INT 4
14210: PUSH
14211: EMPTY
14212: LIST
14213: LIST
14214: PUSH
14215: EMPTY
14216: LIST
14217: LIST
14218: PPUSH
14219: CALL_OW 69
14223: PUSH
14224: LD_EXP 24
14228: DIFF
14229: ST_TO_ADDR
// if not speaker then
14230: LD_VAR 0 1
14234: NOT
14235: IFFALSE 14239
// exit ;
14237: GO 14674
// if GetSex ( speaker [ 1 ] ) = sex_male then
14239: LD_VAR 0 1
14243: PUSH
14244: LD_INT 1
14246: ARRAY
14247: PPUSH
14248: CALL_OW 258
14252: PUSH
14253: LD_INT 1
14255: EQUAL
14256: IFFALSE 14276
// Say ( speaker [ 1 ] , VD-us-sci-art-1 ) else
14258: LD_VAR 0 1
14262: PUSH
14263: LD_INT 1
14265: ARRAY
14266: PPUSH
14267: LD_STRING VD-us-sci-art-1
14269: PPUSH
14270: CALL_OW 88
14274: GO 14292
// Say ( speaker [ 1 ] , VD-us-fsci-art-1 ) ;
14276: LD_VAR 0 1
14280: PUSH
14281: LD_INT 1
14283: ARRAY
14284: PPUSH
14285: LD_STRING VD-us-fsci-art-1
14287: PPUSH
14288: CALL_OW 88
// Say ( us_commander , VDc-art1 ) ;
14292: LD_EXP 24
14296: PPUSH
14297: LD_STRING VDc-art1
14299: PPUSH
14300: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
14304: LD_VAR 0 1
14308: PUSH
14309: LD_INT 1
14311: ARRAY
14312: PPUSH
14313: CALL_OW 258
14317: PUSH
14318: LD_INT 1
14320: EQUAL
14321: IFFALSE 14341
// Say ( speaker [ 1 ] , VD-us-sci-art-2 ) else
14323: LD_VAR 0 1
14327: PUSH
14328: LD_INT 1
14330: ARRAY
14331: PPUSH
14332: LD_STRING VD-us-sci-art-2
14334: PPUSH
14335: CALL_OW 88
14339: GO 14357
// Say ( speaker [ 1 ] , VD-us-fsci-art-2 ) ;
14341: LD_VAR 0 1
14345: PUSH
14346: LD_INT 1
14348: ARRAY
14349: PPUSH
14350: LD_STRING VD-us-fsci-art-2
14352: PPUSH
14353: CALL_OW 88
// Say ( us_commander , VDc-art2 ) ;
14357: LD_EXP 24
14361: PPUSH
14362: LD_STRING VDc-art2
14364: PPUSH
14365: CALL_OW 88
// end ; if your_side = 2 then
14369: LD_OWVAR 2
14373: PUSH
14374: LD_INT 2
14376: EQUAL
14377: IFFALSE 14481
// begin speaker := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) diff ar_commander ;
14379: LD_ADDR_VAR 0 1
14383: PUSH
14384: LD_INT 22
14386: PUSH
14387: LD_INT 2
14389: PUSH
14390: EMPTY
14391: LIST
14392: LIST
14393: PUSH
14394: LD_INT 25
14396: PUSH
14397: LD_INT 4
14399: PUSH
14400: EMPTY
14401: LIST
14402: LIST
14403: PUSH
14404: EMPTY
14405: LIST
14406: LIST
14407: PPUSH
14408: CALL_OW 69
14412: PUSH
14413: LD_EXP 57
14417: DIFF
14418: ST_TO_ADDR
// if not speaker then
14419: LD_VAR 0 1
14423: NOT
14424: IFFALSE 14428
// exit ;
14426: GO 14674
// if GetSex ( speaker [ 1 ] ) = sex_male then
14428: LD_VAR 0 1
14432: PUSH
14433: LD_INT 1
14435: ARRAY
14436: PPUSH
14437: CALL_OW 258
14441: PUSH
14442: LD_INT 1
14444: EQUAL
14445: IFFALSE 14465
// Say ( speaker [ 1 ] , VD-ar-sci-art-1 ) else
14447: LD_VAR 0 1
14451: PUSH
14452: LD_INT 1
14454: ARRAY
14455: PPUSH
14456: LD_STRING VD-ar-sci-art-1
14458: PPUSH
14459: CALL_OW 88
14463: GO 14481
// Say ( speaker [ 1 ] , VD-ar-fsci-art-1 ) ;
14465: LD_VAR 0 1
14469: PUSH
14470: LD_INT 1
14472: ARRAY
14473: PPUSH
14474: LD_STRING VD-ar-fsci-art-1
14476: PPUSH
14477: CALL_OW 88
// end ; if your_side = 7 then
14481: LD_OWVAR 2
14485: PUSH
14486: LD_INT 7
14488: EQUAL
14489: IFFALSE 14674
// begin speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 4 ] ] ) diff al_commander ;
14491: LD_ADDR_VAR 0 1
14495: PUSH
14496: LD_INT 22
14498: PUSH
14499: LD_INT 7
14501: PUSH
14502: EMPTY
14503: LIST
14504: LIST
14505: PUSH
14506: LD_INT 25
14508: PUSH
14509: LD_INT 4
14511: PUSH
14512: EMPTY
14513: LIST
14514: LIST
14515: PUSH
14516: EMPTY
14517: LIST
14518: LIST
14519: PPUSH
14520: CALL_OW 69
14524: PUSH
14525: LD_EXP 43
14529: DIFF
14530: ST_TO_ADDR
// if speaker then
14531: LD_VAR 0 1
14535: IFFALSE 14667
// begin if GetSex ( speaker [ 1 ] ) = sex_male then
14537: LD_VAR 0 1
14541: PUSH
14542: LD_INT 1
14544: ARRAY
14545: PPUSH
14546: CALL_OW 258
14550: PUSH
14551: LD_INT 1
14553: EQUAL
14554: IFFALSE 14574
// Say ( speaker [ 1 ] , VD-al-sci-art-1 ) else
14556: LD_VAR 0 1
14560: PUSH
14561: LD_INT 1
14563: ARRAY
14564: PPUSH
14565: LD_STRING VD-al-sci-art-1
14567: PPUSH
14568: CALL_OW 88
14572: GO 14590
// Say ( speaker [ 1 ] , VD-al-fsci-art-1 ) ;
14574: LD_VAR 0 1
14578: PUSH
14579: LD_INT 1
14581: ARRAY
14582: PPUSH
14583: LD_STRING VD-al-fsci-art-1
14585: PPUSH
14586: CALL_OW 88
// Say ( al_commander , VPd-art-1 ) ;
14590: LD_EXP 43
14594: PPUSH
14595: LD_STRING VPd-art-1
14597: PPUSH
14598: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
14602: LD_VAR 0 1
14606: PUSH
14607: LD_INT 1
14609: ARRAY
14610: PPUSH
14611: CALL_OW 258
14615: PUSH
14616: LD_INT 1
14618: EQUAL
14619: IFFALSE 14639
// Say ( speaker [ 1 ] , VD-al-sci-art-2 ) else
14621: LD_VAR 0 1
14625: PUSH
14626: LD_INT 1
14628: ARRAY
14629: PPUSH
14630: LD_STRING VD-al-sci-art-2
14632: PPUSH
14633: CALL_OW 88
14637: GO 14655
// Say ( speaker [ 1 ] , VD-al-fsci-art-2 ) ;
14639: LD_VAR 0 1
14643: PUSH
14644: LD_INT 1
14646: ARRAY
14647: PPUSH
14648: LD_STRING VD-al-fsci-art-2
14650: PPUSH
14651: CALL_OW 88
// Say ( al_commander , VPd-art-2 ) ;
14655: LD_EXP 43
14659: PPUSH
14660: LD_STRING VPd-art-2
14662: PPUSH
14663: CALL_OW 88
// end ; ChangeMissionObjectives ( CVulc7out ) ;
14667: LD_STRING CVulc7out
14669: PPUSH
14670: CALL_OW 337
// end ; end ;
14674: PPOPN 1
14676: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_see , 8 ] ] ) do var speaker ;
14677: LD_INT 22
14679: PUSH
14680: LD_OWVAR 2
14684: PUSH
14685: EMPTY
14686: LIST
14687: LIST
14688: PUSH
14689: LD_INT 101
14691: PUSH
14692: LD_INT 8
14694: PUSH
14695: EMPTY
14696: LIST
14697: LIST
14698: PUSH
14699: EMPTY
14700: LIST
14701: LIST
14702: PPUSH
14703: CALL_OW 69
14707: IFFALSE 14850
14709: GO 14711
14711: DISABLE
14712: LD_INT 0
14714: PPUSH
// begin if your_side = 1 then
14715: LD_OWVAR 2
14719: PUSH
14720: LD_INT 1
14722: EQUAL
14723: IFFALSE 14806
// begin speaker := FilterAllUnits ( [ f_side , 1 ] ) diff us_commander ;
14725: LD_ADDR_VAR 0 1
14729: PUSH
14730: LD_INT 22
14732: PUSH
14733: LD_INT 1
14735: PUSH
14736: EMPTY
14737: LIST
14738: LIST
14739: PPUSH
14740: CALL_OW 69
14744: PUSH
14745: LD_EXP 24
14749: DIFF
14750: ST_TO_ADDR
// if speaker then
14751: LD_VAR 0 1
14755: IFFALSE 14806
// if GetSex ( speaker [ 1 ] ) then
14757: LD_VAR 0 1
14761: PUSH
14762: LD_INT 1
14764: ARRAY
14765: PPUSH
14766: CALL_OW 258
14770: IFFALSE 14790
// Say ( speaker [ 1 ] , VD-legion-us ) else
14772: LD_VAR 0 1
14776: PUSH
14777: LD_INT 1
14779: ARRAY
14780: PPUSH
14781: LD_STRING VD-legion-us
14783: PPUSH
14784: CALL_OW 88
14788: GO 14806
// Say ( speaker [ 1 ] , VD-legion-us-f ) ;
14790: LD_VAR 0 1
14794: PUSH
14795: LD_INT 1
14797: ARRAY
14798: PPUSH
14799: LD_STRING VD-legion-us-f
14801: PPUSH
14802: CALL_OW 88
// end ; if your_side = 2 then
14806: LD_OWVAR 2
14810: PUSH
14811: LD_INT 2
14813: EQUAL
14814: IFFALSE 14828
// Say ( ar_commander , VD-legion-ar ) ;
14816: LD_EXP 57
14820: PPUSH
14821: LD_STRING VD-legion-ar
14823: PPUSH
14824: CALL_OW 88
// if your_side = 7 then
14828: LD_OWVAR 2
14832: PUSH
14833: LD_INT 7
14835: EQUAL
14836: IFFALSE 14850
// Say ( al_commander , VD-legion-al ) ;
14838: LD_EXP 43
14842: PPUSH
14843: LD_STRING VD-legion-al
14845: PPUSH
14846: CALL_OW 88
// end ;
14850: PPOPN 1
14852: END
// every 0 0$01 trigger mine_vulc do
14853: LD_EXP 13
14857: IFFALSE 14874
14859: GO 14861
14861: DISABLE
// begin Say ( player_commander , VD-vulc-mines ) ;
14862: LD_EXP 11
14866: PPUSH
14867: LD_STRING VD-vulc-mines
14869: PPUSH
14870: CALL_OW 88
// end ;
14874: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 3 ] ) = 0 and your_side <> 2 do
14875: LD_INT 22
14877: PUSH
14878: LD_INT 3
14880: PUSH
14881: EMPTY
14882: LIST
14883: LIST
14884: PPUSH
14885: CALL_OW 69
14889: PUSH
14890: LD_INT 0
14892: EQUAL
14893: PUSH
14894: LD_OWVAR 2
14898: PUSH
14899: LD_INT 2
14901: NONEQUAL
14902: AND
14903: IFFALSE 14912
14905: GO 14907
14907: DISABLE
// Win ;
14908: CALL 14969 0 0
14912: END
// every 0 0$01 trigger FilterAllUnits ( [ f_or , [ f_side , 8 ] , [ f_side , 3 ] ] ) = 0 and your_side = 2 do
14913: LD_INT 2
14915: PUSH
14916: LD_INT 22
14918: PUSH
14919: LD_INT 8
14921: PUSH
14922: EMPTY
14923: LIST
14924: LIST
14925: PUSH
14926: LD_INT 22
14928: PUSH
14929: LD_INT 3
14931: PUSH
14932: EMPTY
14933: LIST
14934: LIST
14935: PUSH
14936: EMPTY
14937: LIST
14938: LIST
14939: LIST
14940: PPUSH
14941: CALL_OW 69
14945: PUSH
14946: LD_INT 0
14948: EQUAL
14949: PUSH
14950: LD_OWVAR 2
14954: PUSH
14955: LD_INT 2
14957: EQUAL
14958: AND
14959: IFFALSE 14968
14961: GO 14963
14963: DISABLE
// Win ;
14964: CALL 14969 0 0
14968: END
// function Win ; var points ; begin
14969: LD_INT 0
14971: PPUSH
14972: PPUSH
// case Query ( VulcWin ) of 1 :
14973: LD_STRING VulcWin
14975: PPUSH
14976: CALL_OW 97
14980: PUSH
14981: LD_INT 1
14983: DOUBLE
14984: EQUAL
14985: IFTRUE 14989
14987: GO 14992
14989: POP
// ; end ;
14990: GO 14993
14992: POP
// if medal_enabled then
14993: LD_EXP 14
14997: IFFALSE 15011
// AddMedal ( vulc_1 , 1 ) else
14999: LD_STRING vulc_1
15001: PPUSH
15002: LD_INT 1
15004: PPUSH
15005: CALL_OW 101
15009: GO 15022
// AddMedal ( vulc_1 , - 1 ) ;
15011: LD_STRING vulc_1
15013: PPUSH
15014: LD_INT 1
15016: NEG
15017: PPUSH
15018: CALL_OW 101
// if FilterAllUnits ( [ f_side , 8 ] ) = 0 then
15022: LD_INT 22
15024: PUSH
15025: LD_INT 8
15027: PUSH
15028: EMPTY
15029: LIST
15030: LIST
15031: PPUSH
15032: CALL_OW 69
15036: PUSH
15037: LD_INT 0
15039: EQUAL
15040: IFFALSE 15054
// AddMedal ( vulc_2 , 1 ) else
15042: LD_STRING vulc_2
15044: PPUSH
15045: LD_INT 1
15047: PPUSH
15048: CALL_OW 101
15052: GO 15065
// AddMedal ( vulc_2 , - 1 ) ;
15054: LD_STRING vulc_2
15056: PPUSH
15057: LD_INT 1
15059: NEG
15060: PPUSH
15061: CALL_OW 101
// points := CalculateCommanderPoints ;
15065: LD_ADDR_VAR 0 2
15069: PUSH
15070: CALL 2336 0 0
15074: ST_TO_ADDR
// if points >= 2000 then
15075: LD_VAR 0 2
15079: PUSH
15080: LD_INT 2000
15082: GREATEREQUAL
15083: IFFALSE 15097
// AddMedal ( vulc_3 , 2 ) else
15085: LD_STRING vulc_3
15087: PPUSH
15088: LD_INT 2
15090: PPUSH
15091: CALL_OW 101
15095: GO 15130
// if points >= 0 then
15097: LD_VAR 0 2
15101: PUSH
15102: LD_INT 0
15104: GREATEREQUAL
15105: IFFALSE 15119
// AddMedal ( vulc_3 , 1 ) else
15107: LD_STRING vulc_3
15109: PPUSH
15110: LD_INT 1
15112: PPUSH
15113: CALL_OW 101
15117: GO 15130
// AddMedal ( vulc_3 , - 1 ) ;
15119: LD_STRING vulc_3
15121: PPUSH
15122: LD_INT 1
15124: NEG
15125: PPUSH
15126: CALL_OW 101
// GiveMedals ( MAIN ) ;
15130: LD_STRING MAIN
15132: PPUSH
15133: CALL_OW 102
// YouWin ;
15137: CALL_OW 103
// end ; end_of_file
15141: LD_VAR 0 1
15145: RET
// every 0 0$01 trigger FilterUnitsInArea ( vulcano_area , [ f_type , unit_human ] ) do var i , un ;
15146: LD_INT 13
15148: PPUSH
15149: LD_INT 21
15151: PUSH
15152: LD_INT 1
15154: PUSH
15155: EMPTY
15156: LIST
15157: LIST
15158: PPUSH
15159: CALL_OW 70
15163: IFFALSE 15223
15165: GO 15167
15167: DISABLE
15168: LD_INT 0
15170: PPUSH
15171: PPUSH
// begin enable ;
15172: ENABLE
// for i in FilterUnitsInArea ( vulcano_area , [ f_type , unit_human ] ) do
15173: LD_ADDR_VAR 0 1
15177: PUSH
15178: LD_INT 13
15180: PPUSH
15181: LD_INT 21
15183: PUSH
15184: LD_INT 1
15186: PUSH
15187: EMPTY
15188: LIST
15189: LIST
15190: PPUSH
15191: CALL_OW 70
15195: PUSH
15196: FOR_IN
15197: IFFALSE 15221
// if GetLives ( i ) then
15199: LD_VAR 0 1
15203: PPUSH
15204: CALL_OW 256
15208: IFFALSE 15219
// KillUnit ( i ) ;
15210: LD_VAR 0 1
15214: PPUSH
15215: CALL_OW 66
15219: GO 15196
15221: POP
15222: POP
// end ;
15223: PPOPN 2
15225: END
// on ArtifactResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
15226: LD_VAR 0 1
15230: PPUSH
15231: CALL_OW 255
15235: PUSH
15236: LD_OWVAR 2
15240: EQUAL
15241: IFFALSE 15251
// player_res_art := true ;
15243: LD_ADDR_EXP 6
15247: PUSH
15248: LD_INT 1
15250: ST_TO_ADDR
// end ;
15251: PPOPN 1
15253: END
// every 0 0$03 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) and player_res_art do var xy , lab ;
15254: LD_INT 22
15256: PUSH
15257: LD_OWVAR 2
15261: PUSH
15262: EMPTY
15263: LIST
15264: LIST
15265: PUSH
15266: LD_INT 2
15268: PUSH
15269: LD_INT 30
15271: PUSH
15272: LD_INT 7
15274: PUSH
15275: EMPTY
15276: LIST
15277: LIST
15278: PUSH
15279: LD_INT 30
15281: PUSH
15282: LD_INT 8
15284: PUSH
15285: EMPTY
15286: LIST
15287: LIST
15288: PUSH
15289: LD_INT 30
15291: PUSH
15292: LD_INT 11
15294: PUSH
15295: EMPTY
15296: LIST
15297: LIST
15298: PUSH
15299: EMPTY
15300: LIST
15301: LIST
15302: LIST
15303: LIST
15304: PUSH
15305: EMPTY
15306: LIST
15307: LIST
15308: PPUSH
15309: CALL_OW 69
15313: PUSH
15314: LD_EXP 6
15318: AND
15319: IFFALSE 15676
15321: GO 15323
15323: DISABLE
15324: LD_INT 0
15326: PPUSH
15327: PPUSH
// begin enable ;
15328: ENABLE
// xy := FindArtifact ( 1 ) ;
15329: LD_ADDR_VAR 0 1
15333: PUSH
15334: LD_INT 1
15336: PPUSH
15337: CALL_OW 469
15341: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_siberium ] ] ] ) , xy [ 1 ] , xy [ 2 ] ) ;
15342: LD_ADDR_VAR 0 2
15346: PUSH
15347: LD_INT 22
15349: PUSH
15350: LD_OWVAR 2
15354: PUSH
15355: EMPTY
15356: LIST
15357: LIST
15358: PUSH
15359: LD_INT 2
15361: PUSH
15362: LD_INT 30
15364: PUSH
15365: LD_INT 8
15367: PUSH
15368: EMPTY
15369: LIST
15370: LIST
15371: PUSH
15372: LD_INT 30
15374: PUSH
15375: LD_INT 7
15377: PUSH
15378: EMPTY
15379: LIST
15380: LIST
15381: PUSH
15382: LD_INT 30
15384: PUSH
15385: LD_INT 11
15387: PUSH
15388: EMPTY
15389: LIST
15390: LIST
15391: PUSH
15392: EMPTY
15393: LIST
15394: LIST
15395: LIST
15396: LIST
15397: PUSH
15398: EMPTY
15399: LIST
15400: LIST
15401: PPUSH
15402: CALL_OW 69
15406: PPUSH
15407: LD_VAR 0 1
15411: PUSH
15412: LD_INT 1
15414: ARRAY
15415: PPUSH
15416: LD_VAR 0 1
15420: PUSH
15421: LD_INT 2
15423: ARRAY
15424: PPUSH
15425: CALL_OW 73
15429: ST_TO_ADDR
// if player_artifact_ready = false then
15430: LD_EXP 8
15434: PUSH
15435: LD_INT 0
15437: EQUAL
15438: IFFALSE 15552
// if GetDistUnitXY ( lab , xy [ 1 ] , xy [ 2 ] ) < 6 then
15440: LD_VAR 0 2
15444: PPUSH
15445: LD_VAR 0 1
15449: PUSH
15450: LD_INT 1
15452: ARRAY
15453: PPUSH
15454: LD_VAR 0 1
15458: PUSH
15459: LD_INT 2
15461: ARRAY
15462: PPUSH
15463: CALL_OW 297
15467: PUSH
15468: LD_INT 6
15470: LESS
15471: IFFALSE 15532
// begin if BuildingStatus ( lab ) = bs_idle then
15473: LD_VAR 0 2
15477: PPUSH
15478: CALL_OW 461
15482: PUSH
15483: LD_INT 2
15485: EQUAL
15486: IFFALSE 15510
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) else
15488: LD_OWVAR 2
15492: PPUSH
15493: LD_INT 1
15495: PPUSH
15496: LD_INT 2
15498: PPUSH
15499: LD_VAR 0 2
15503: PPUSH
15504: CALL_OW 468
15508: GO 15530
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
15510: LD_OWVAR 2
15514: PPUSH
15515: LD_INT 1
15517: PPUSH
15518: LD_INT 1
15520: PPUSH
15521: LD_VAR 0 2
15525: PPUSH
15526: CALL_OW 468
// end else
15530: GO 15552
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
15532: LD_OWVAR 2
15536: PPUSH
15537: LD_INT 1
15539: PPUSH
15540: LD_INT 1
15542: PPUSH
15543: LD_VAR 0 2
15547: PPUSH
15548: CALL_OW 468
// if player_artifact_ready then
15552: LD_EXP 8
15556: IFFALSE 15676
// if GetDistUnitXY ( lab , xy [ 1 ] , xy [ 2 ] ) < 6 then
15558: LD_VAR 0 2
15562: PPUSH
15563: LD_VAR 0 1
15567: PUSH
15568: LD_INT 1
15570: ARRAY
15571: PPUSH
15572: LD_VAR 0 1
15576: PUSH
15577: LD_INT 2
15579: ARRAY
15580: PPUSH
15581: CALL_OW 297
15585: PUSH
15586: LD_INT 6
15588: LESS
15589: IFFALSE 15654
// begin if BuildingStatus ( lab ) = bs_idle then
15591: LD_VAR 0 2
15595: PPUSH
15596: CALL_OW 461
15600: PUSH
15601: LD_INT 2
15603: EQUAL
15604: IFFALSE 15630
// SetArtifactUse ( your_side , art_icon , art_unit , lab ) else
15606: LD_OWVAR 2
15610: PPUSH
15611: LD_EXP 9
15615: PPUSH
15616: LD_INT 4
15618: PPUSH
15619: LD_VAR 0 2
15623: PPUSH
15624: CALL_OW 468
15628: GO 15652
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
15630: LD_OWVAR 2
15634: PPUSH
15635: LD_EXP 9
15639: PPUSH
15640: LD_INT 1
15642: PPUSH
15643: LD_VAR 0 2
15647: PPUSH
15648: CALL_OW 468
// end else
15652: GO 15676
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
15654: LD_OWVAR 2
15658: PPUSH
15659: LD_EXP 9
15663: PPUSH
15664: LD_INT 1
15666: PPUSH
15667: LD_VAR 0 2
15671: PPUSH
15672: CALL_OW 468
// end ;
15676: PPOPN 2
15678: END
// on ArtifactUsed ( s , icon , cr1 , cr2 ) do var xy , i , lab , side ;
15679: LD_INT 0
15681: PPUSH
15682: PPUSH
15683: PPUSH
15684: PPUSH
// begin xy := FindArtifact ( 1 ) ;
15685: LD_ADDR_VAR 0 5
15689: PUSH
15690: LD_INT 1
15692: PPUSH
15693: CALL_OW 469
15697: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , xy [ 1 ] , xy [ 2 ] ) ;
15698: LD_ADDR_VAR 0 7
15702: PUSH
15703: LD_INT 22
15705: PUSH
15706: LD_OWVAR 2
15710: PUSH
15711: EMPTY
15712: LIST
15713: LIST
15714: PUSH
15715: LD_INT 2
15717: PUSH
15718: LD_INT 30
15720: PUSH
15721: LD_INT 8
15723: PUSH
15724: EMPTY
15725: LIST
15726: LIST
15727: PUSH
15728: LD_INT 30
15730: PUSH
15731: LD_INT 11
15733: PUSH
15734: EMPTY
15735: LIST
15736: LIST
15737: PUSH
15738: EMPTY
15739: LIST
15740: LIST
15741: LIST
15742: PUSH
15743: EMPTY
15744: LIST
15745: LIST
15746: PPUSH
15747: CALL_OW 69
15751: PPUSH
15752: LD_VAR 0 5
15756: PUSH
15757: LD_INT 1
15759: ARRAY
15760: PPUSH
15761: LD_VAR 0 5
15765: PUSH
15766: LD_INT 2
15768: ARRAY
15769: PPUSH
15770: CALL_OW 73
15774: ST_TO_ADDR
// if icon = art_exp_left then
15775: LD_VAR 0 2
15779: PUSH
15780: LD_INT 1
15782: EQUAL
15783: IFFALSE 15836
// begin SetSpecResearch ( lab , time_res_art , true ) ;
15785: LD_VAR 0 7
15789: PPUSH
15790: LD_EXP 10
15794: PPUSH
15795: LD_INT 1
15797: PPUSH
15798: CALL_OW 486
// SetWorkingProgress ( lab , artifact_progress ) ;
15802: LD_VAR 0 7
15806: PPUSH
15807: LD_EXP 7
15811: PPUSH
15812: CALL_OW 329
// SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
15816: LD_OWVAR 2
15820: PPUSH
15821: LD_INT 1
15823: PPUSH
15824: LD_INT 0
15826: PPUSH
15827: LD_VAR 0 7
15831: PPUSH
15832: CALL_OW 468
// end ; if icon = art_icon then
15836: LD_VAR 0 2
15840: PUSH
15841: LD_EXP 9
15845: EQUAL
15846: IFFALSE 16079
// begin if cr1 in FilterAllUnits ( [ f_type , unit_building ] ) then
15848: LD_VAR 0 3
15852: PUSH
15853: LD_INT 21
15855: PUSH
15856: LD_INT 3
15858: PUSH
15859: EMPTY
15860: LIST
15861: LIST
15862: PPUSH
15863: CALL_OW 69
15867: IN
15868: IFFALSE 16079
// begin side := GetSide ( cr1 ) ;
15870: LD_ADDR_VAR 0 8
15874: PUSH
15875: LD_VAR 0 3
15879: PPUSH
15880: CALL_OW 255
15884: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_siberite_power ] ] ) > 0 then
15885: LD_INT 22
15887: PUSH
15888: LD_VAR 0 8
15892: PUSH
15893: EMPTY
15894: LIST
15895: LIST
15896: PUSH
15897: LD_INT 30
15899: PUSH
15900: LD_INT 28
15902: PUSH
15903: EMPTY
15904: LIST
15905: LIST
15906: PUSH
15907: EMPTY
15908: LIST
15909: LIST
15910: PPUSH
15911: CALL_OW 69
15915: PUSH
15916: LD_INT 0
15918: GREATER
15919: IFFALSE 16079
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_solar_power ] , [ f_btype , b_siberite_power ] ] ] ) do
15921: LD_ADDR_VAR 0 6
15925: PUSH
15926: LD_INT 22
15928: PUSH
15929: LD_VAR 0 8
15933: PUSH
15934: EMPTY
15935: LIST
15936: LIST
15937: PUSH
15938: LD_INT 2
15940: PUSH
15941: LD_INT 30
15943: PUSH
15944: LD_INT 26
15946: PUSH
15947: EMPTY
15948: LIST
15949: LIST
15950: PUSH
15951: LD_INT 30
15953: PUSH
15954: LD_INT 27
15956: PUSH
15957: EMPTY
15958: LIST
15959: LIST
15960: PUSH
15961: LD_INT 30
15963: PUSH
15964: LD_INT 28
15966: PUSH
15967: EMPTY
15968: LIST
15969: LIST
15970: PUSH
15971: EMPTY
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: PUSH
15977: EMPTY
15978: LIST
15979: LIST
15980: PPUSH
15981: CALL_OW 69
15985: PUSH
15986: FOR_IN
15987: IFFALSE 16000
// KillUnit ( i ) ;
15989: LD_VAR 0 6
15993: PPUSH
15994: CALL_OW 66
15998: GO 15986
16000: POP
16001: POP
// medal_enabled := true ;
16002: LD_ADDR_EXP 14
16006: PUSH
16007: LD_INT 1
16009: ST_TO_ADDR
// player_res_art := false ;
16010: LD_ADDR_EXP 6
16014: PUSH
16015: LD_INT 0
16017: ST_TO_ADDR
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
16018: LD_OWVAR 2
16022: PPUSH
16023: LD_EXP 9
16027: PPUSH
16028: LD_INT 1
16030: PPUSH
16031: LD_VAR 0 7
16035: PPUSH
16036: CALL_OW 468
// wait ( time_to_reuse ) ;
16040: LD_EXP 12
16044: PPUSH
16045: CALL_OW 67
// SetArtifactUse ( your_side , art_icon , art_unit , lab ) ;
16049: LD_OWVAR 2
16053: PPUSH
16054: LD_EXP 9
16058: PPUSH
16059: LD_INT 4
16061: PPUSH
16062: LD_VAR 0 7
16066: PPUSH
16067: CALL_OW 468
// player_res_art := true ;
16071: LD_ADDR_EXP 6
16075: PUSH
16076: LD_INT 1
16078: ST_TO_ADDR
// end ; end ; end ; end ;
16079: PPOPN 8
16081: END
// on SpecResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
16082: LD_VAR 0 1
16086: PPUSH
16087: CALL_OW 255
16091: PUSH
16092: LD_OWVAR 2
16096: EQUAL
16097: IFFALSE 16134
// begin SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
16099: LD_OWVAR 2
16103: PPUSH
16104: LD_INT 1
16106: PPUSH
16107: LD_INT 0
16109: PPUSH
16110: LD_VAR 0 1
16114: PPUSH
16115: CALL_OW 468
// player_artifact_ready := true ;
16119: LD_ADDR_EXP 8
16123: PUSH
16124: LD_INT 1
16126: ST_TO_ADDR
// Hint ( ArtVulcano ) ;
16127: LD_STRING ArtVulcano
16129: PPUSH
16130: CALL_OW 339
// end ; end ;
16134: PPOPN 1
16136: END
// on SpecResearchCancel ( lab , progress ) do begin artifact_progress := progress ;
16137: LD_ADDR_EXP 7
16141: PUSH
16142: LD_VAR 0 2
16146: ST_TO_ADDR
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) ;
16147: LD_OWVAR 2
16151: PPUSH
16152: LD_INT 1
16154: PPUSH
16155: LD_INT 2
16157: PPUSH
16158: LD_VAR 0 1
16162: PPUSH
16163: CALL_OW 468
// end ; end_of_file end_of_file
16167: PPOPN 2
16169: END
// export al_commander , al_force , al_skill ; export function PrepareAlliance ; var i , filter , un , team ; begin
16170: LD_INT 0
16172: PPUSH
16173: PPUSH
16174: PPUSH
16175: PPUSH
16176: PPUSH
// al_skill := [ 7 , 6 , 5 ] [ Difficulty ] ;
16177: LD_ADDR_EXP 45
16181: PUSH
16182: LD_INT 7
16184: PUSH
16185: LD_INT 6
16187: PUSH
16188: LD_INT 5
16190: PUSH
16191: EMPTY
16192: LIST
16193: LIST
16194: LIST
16195: PUSH
16196: LD_OWVAR 67
16200: ARRAY
16201: ST_TO_ADDR
// al_force := [ ] ;
16202: LD_ADDR_EXP 44
16206: PUSH
16207: EMPTY
16208: ST_TO_ADDR
// RemoveAlliance ;
16209: CALL 16862 0 0
// ResetFog ;
16213: CALL_OW 335
// your_side := 7 ;
16217: LD_ADDR_OWVAR 2
16221: PUSH
16222: LD_INT 7
16224: ST_TO_ADDR
// uc_side := 7 ;
16225: LD_ADDR_OWVAR 20
16229: PUSH
16230: LD_INT 7
16232: ST_TO_ADDR
// hc_gallery :=  ;
16233: LD_ADDR_OWVAR 33
16237: PUSH
16238: LD_STRING 
16240: ST_TO_ADDR
// hc_name :=  ;
16241: LD_ADDR_OWVAR 26
16245: PUSH
16246: LD_STRING 
16248: ST_TO_ADDR
// hc_importance := 0 ;
16249: LD_ADDR_OWVAR 32
16253: PUSH
16254: LD_INT 0
16256: ST_TO_ADDR
// for i = 1 to 17 do
16257: LD_ADDR_VAR 0 2
16261: PUSH
16262: DOUBLE
16263: LD_INT 1
16265: DEC
16266: ST_TO_ADDR
16267: LD_INT 17
16269: PUSH
16270: FOR_TO
16271: IFFALSE 16351
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
16273: LD_ADDR_OWVAR 21
16277: PUSH
16278: LD_INT 1
16280: PUSH
16281: LD_INT 3
16283: PUSH
16284: EMPTY
16285: LIST
16286: LIST
16287: PUSH
16288: LD_INT 1
16290: PPUSH
16291: LD_INT 2
16293: PPUSH
16294: CALL_OW 12
16298: ARRAY
16299: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , al_skill ) ;
16300: LD_INT 0
16302: PPUSH
16303: LD_INT 1
16305: PPUSH
16306: LD_INT 4
16308: PPUSH
16309: CALL_OW 12
16313: PPUSH
16314: LD_EXP 45
16318: PPUSH
16319: CALL_OW 380
// un := CreateHuman ;
16323: LD_ADDR_VAR 0 4
16327: PUSH
16328: CALL_OW 44
16332: ST_TO_ADDR
// al_force := al_force ^ un ;
16333: LD_ADDR_EXP 44
16337: PUSH
16338: LD_EXP 44
16342: PUSH
16343: LD_VAR 0 4
16347: ADD
16348: ST_TO_ADDR
// end ;
16349: GO 16270
16351: POP
16352: POP
// hc_importance := 100 ;
16353: LD_ADDR_OWVAR 32
16357: PUSH
16358: LD_INT 100
16360: ST_TO_ADDR
// uc_nation := 1 ;
16361: LD_ADDR_OWVAR 21
16365: PUSH
16366: LD_INT 1
16368: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , al_skill ) ;
16369: LD_INT 1
16371: PPUSH
16372: LD_INT 1
16374: PPUSH
16375: LD_EXP 45
16379: PPUSH
16380: CALL_OW 380
// al_commander := CreateHuman ;
16384: LD_ADDR_EXP 43
16388: PUSH
16389: CALL_OW 44
16393: ST_TO_ADDR
// player_commander := al_commander ;
16394: LD_ADDR_EXP 11
16398: PUSH
16399: LD_EXP 43
16403: ST_TO_ADDR
// team := CharacterSelection ( text , [ 9 , 9 , 8 ] [ Difficulty ] , [ 9 , 9 , 8 ] [ Difficulty ] , [ sel_change_class , al_commander , sel_changeable , sel_not_hired ] ^ al_force , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , class_bazooker , class_sniper ] ) ;
16404: LD_ADDR_VAR 0 5
16408: PUSH
16409: LD_STRING text
16411: PPUSH
16412: LD_INT 9
16414: PUSH
16415: LD_INT 9
16417: PUSH
16418: LD_INT 8
16420: PUSH
16421: EMPTY
16422: LIST
16423: LIST
16424: LIST
16425: PUSH
16426: LD_OWVAR 67
16430: ARRAY
16431: PPUSH
16432: LD_INT 9
16434: PUSH
16435: LD_INT 9
16437: PUSH
16438: LD_INT 8
16440: PUSH
16441: EMPTY
16442: LIST
16443: LIST
16444: LIST
16445: PUSH
16446: LD_OWVAR 67
16450: ARRAY
16451: PPUSH
16452: LD_INT -5
16454: PUSH
16455: LD_EXP 43
16459: PUSH
16460: LD_INT -3
16462: PUSH
16463: LD_INT -2
16465: PUSH
16466: EMPTY
16467: LIST
16468: LIST
16469: LIST
16470: LIST
16471: PUSH
16472: LD_EXP 44
16476: ADD
16477: PPUSH
16478: LD_INT 1
16480: PUSH
16481: LD_INT 3
16483: PUSH
16484: LD_INT 2
16486: PUSH
16487: LD_INT 1
16489: PUSH
16490: EMPTY
16491: LIST
16492: LIST
16493: PUSH
16494: LD_INT 4
16496: PUSH
16497: LD_INT 1
16499: PUSH
16500: EMPTY
16501: LIST
16502: LIST
16503: PUSH
16504: LD_INT 9
16506: PUSH
16507: LD_INT 5
16509: PUSH
16510: EMPTY
16511: LIST
16512: LIST
16513: LIST
16514: LIST
16515: LIST
16516: LIST
16517: PPUSH
16518: CALL_OW 42
16522: ST_TO_ADDR
// team := team ^ al_commander ;
16523: LD_ADDR_VAR 0 5
16527: PUSH
16528: LD_VAR 0 5
16532: PUSH
16533: LD_EXP 43
16537: ADD
16538: ST_TO_ADDR
// for i = 1 to team do
16539: LD_ADDR_VAR 0 2
16543: PUSH
16544: DOUBLE
16545: LD_INT 1
16547: DEC
16548: ST_TO_ADDR
16549: LD_VAR 0 5
16553: PUSH
16554: FOR_TO
16555: IFFALSE 16855
// begin if GetClass ( team [ i ] ) = class_mechanic then
16557: LD_VAR 0 5
16561: PUSH
16562: LD_VAR 0 2
16566: ARRAY
16567: PPUSH
16568: CALL_OW 257
16572: PUSH
16573: LD_INT 3
16575: EQUAL
16576: IFFALSE 16832
// begin uc_nation := [ 1 , 3 ] [ rand ( 1 , 2 ) ] ;
16578: LD_ADDR_OWVAR 21
16582: PUSH
16583: LD_INT 1
16585: PUSH
16586: LD_INT 3
16588: PUSH
16589: EMPTY
16590: LIST
16591: LIST
16592: PUSH
16593: LD_INT 1
16595: PPUSH
16596: LD_INT 2
16598: PPUSH
16599: CALL_OW 12
16603: ARRAY
16604: ST_TO_ADDR
// if uc_nation = 1 then
16605: LD_OWVAR 21
16609: PUSH
16610: LD_INT 1
16612: EQUAL
16613: IFFALSE 16697
// begin vc_chassis := [ us_medium_tracked , us_heavy_tracked , us_morphling ] [ i mod 3 + 1 ] ;
16615: LD_ADDR_OWVAR 37
16619: PUSH
16620: LD_INT 3
16622: PUSH
16623: LD_INT 4
16625: PUSH
16626: LD_INT 5
16628: PUSH
16629: EMPTY
16630: LIST
16631: LIST
16632: LIST
16633: PUSH
16634: LD_VAR 0 2
16638: PUSH
16639: LD_INT 3
16641: MOD
16642: PUSH
16643: LD_INT 1
16645: PLUS
16646: ARRAY
16647: ST_TO_ADDR
// vc_engine := engine_siberite ;
16648: LD_ADDR_OWVAR 39
16652: PUSH
16653: LD_INT 3
16655: ST_TO_ADDR
// vc_control := control_manual ;
16656: LD_ADDR_OWVAR 38
16660: PUSH
16661: LD_INT 1
16663: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_laser ] [ rand ( 1 , 3 ) ] ;
16664: LD_ADDR_OWVAR 40
16668: PUSH
16669: LD_INT 4
16671: PUSH
16672: LD_INT 5
16674: PUSH
16675: LD_INT 9
16677: PUSH
16678: EMPTY
16679: LIST
16680: LIST
16681: LIST
16682: PUSH
16683: LD_INT 1
16685: PPUSH
16686: LD_INT 3
16688: PPUSH
16689: CALL_OW 12
16693: ARRAY
16694: ST_TO_ADDR
// end else
16695: GO 16773
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] ;
16697: LD_ADDR_OWVAR 37
16701: PUSH
16702: LD_INT 21
16704: PUSH
16705: LD_INT 23
16707: PUSH
16708: EMPTY
16709: LIST
16710: LIST
16711: PUSH
16712: LD_VAR 0 2
16716: PUSH
16717: LD_INT 2
16719: MOD
16720: PUSH
16721: LD_INT 1
16723: PLUS
16724: ARRAY
16725: ST_TO_ADDR
// vc_engine := engine_siberite ;
16726: LD_ADDR_OWVAR 39
16730: PUSH
16731: LD_INT 3
16733: ST_TO_ADDR
// vc_control := control_manual ;
16734: LD_ADDR_OWVAR 38
16738: PUSH
16739: LD_INT 1
16741: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_rocket_launcher , ru_gatling_gun ] [ rand ( 1 , 3 ) ] ;
16742: LD_ADDR_OWVAR 40
16746: PUSH
16747: LD_INT 44
16749: PUSH
16750: LD_INT 45
16752: PUSH
16753: LD_INT 43
16755: PUSH
16756: EMPTY
16757: LIST
16758: LIST
16759: LIST
16760: PUSH
16761: LD_INT 1
16763: PPUSH
16764: LD_INT 3
16766: PPUSH
16767: CALL_OW 12
16771: ARRAY
16772: ST_TO_ADDR
// end ; un := CreateVehicle ;
16773: LD_ADDR_VAR 0 4
16777: PUSH
16778: CALL_OW 45
16782: ST_TO_ADDR
// SetDir ( un , 5 ) ;
16783: LD_VAR 0 4
16787: PPUSH
16788: LD_INT 5
16790: PPUSH
16791: CALL_OW 233
// PlaceUnitArea ( un , south_resp , false ) ;
16795: LD_VAR 0 4
16799: PPUSH
16800: LD_INT 15
16802: PPUSH
16803: LD_INT 0
16805: PPUSH
16806: CALL_OW 49
// PlaceHumanInUnit ( team [ i ] , un ) ;
16810: LD_VAR 0 5
16814: PUSH
16815: LD_VAR 0 2
16819: ARRAY
16820: PPUSH
16821: LD_VAR 0 4
16825: PPUSH
16826: CALL_OW 52
// end else
16830: GO 16853
// PlaceUnitArea ( team [ i ] , south_resp , false ) ;
16832: LD_VAR 0 5
16836: PUSH
16837: LD_VAR 0 2
16841: ARRAY
16842: PPUSH
16843: LD_INT 15
16845: PPUSH
16846: LD_INT 0
16848: PPUSH
16849: CALL_OW 49
// end ;
16853: GO 16554
16855: POP
16856: POP
// end ;
16857: LD_VAR 0 1
16861: RET
// export function RemoveAlliance ; var i ; begin
16862: LD_INT 0
16864: PPUSH
16865: PPUSH
// DestroyUnit ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
16866: LD_INT 22
16868: PUSH
16869: LD_INT 7
16871: PUSH
16872: EMPTY
16873: LIST
16874: LIST
16875: PUSH
16876: LD_INT 30
16878: PUSH
16879: LD_INT 1
16881: PUSH
16882: EMPTY
16883: LIST
16884: LIST
16885: PUSH
16886: EMPTY
16887: LIST
16888: LIST
16889: PPUSH
16890: CALL_OW 69
16894: PUSH
16895: LD_INT 1
16897: ARRAY
16898: PPUSH
16899: CALL_OW 65
// for i in FilterAllUnits ( [ f_side , 7 ] ) do
16903: LD_ADDR_VAR 0 2
16907: PUSH
16908: LD_INT 22
16910: PUSH
16911: LD_INT 7
16913: PUSH
16914: EMPTY
16915: LIST
16916: LIST
16917: PPUSH
16918: CALL_OW 69
16922: PUSH
16923: FOR_IN
16924: IFFALSE 16937
// RemoveUnit ( i ) ;
16926: LD_VAR 0 2
16930: PPUSH
16931: CALL_OW 64
16935: GO 16923
16937: POP
16938: POP
// end ;
16939: LD_VAR 0 1
16943: RET
// export function PrepareAllianceAI ; var i , un , b ; begin
16944: LD_INT 0
16946: PPUSH
16947: PPUSH
16948: PPUSH
16949: PPUSH
// SetTech ( tech_lapser , 7 , state_researched ) ;
16950: LD_INT 31
16952: PPUSH
16953: LD_INT 7
16955: PPUSH
16956: LD_INT 2
16958: PPUSH
16959: CALL_OW 322
// SetTech ( tech_ai , 7 , state_researched ) ;
16963: LD_INT 32
16965: PPUSH
16966: LD_INT 7
16968: PPUSH
16969: LD_INT 2
16971: PPUSH
16972: CALL_OW 322
// SetTech ( tech_comp3 , 7 , state_researched ) ;
16976: LD_INT 59
16978: PPUSH
16979: LD_INT 7
16981: PPUSH
16982: LD_INT 2
16984: PPUSH
16985: CALL_OW 322
// al_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
16989: LD_ADDR_EXP 45
16993: PUSH
16994: LD_INT 5
16996: PUSH
16997: LD_INT 6
16999: PUSH
17000: LD_INT 7
17002: PUSH
17003: EMPTY
17004: LIST
17005: LIST
17006: LIST
17007: PUSH
17008: LD_OWVAR 67
17012: ARRAY
17013: ST_TO_ADDR
// al_force := [ ] ;
17014: LD_ADDR_EXP 44
17018: PUSH
17019: EMPTY
17020: ST_TO_ADDR
// al_vehs := [ ] ;
17021: LD_ADDR_EXP 50
17025: PUSH
17026: EMPTY
17027: ST_TO_ADDR
// uc_side := 7 ;
17028: LD_ADDR_OWVAR 20
17032: PUSH
17033: LD_INT 7
17035: ST_TO_ADDR
// uc_nation := 1 ;
17036: LD_ADDR_OWVAR 21
17040: PUSH
17041: LD_INT 1
17043: ST_TO_ADDR
// bc_type := b_oil_mine ;
17044: LD_ADDR_OWVAR 42
17048: PUSH
17049: LD_INT 29
17051: ST_TO_ADDR
// b := CreateBuilding ;
17052: LD_ADDR_VAR 0 4
17056: PUSH
17057: CALL_OW 46
17061: ST_TO_ADDR
// PlaceUnitXYR ( b , 61 , 7 , 0 , false ) ;
17062: LD_VAR 0 4
17066: PPUSH
17067: LD_INT 61
17069: PPUSH
17070: LD_INT 7
17072: PPUSH
17073: LD_INT 0
17075: PPUSH
17076: LD_INT 0
17078: PPUSH
17079: CALL_OW 50
// bc_type := b_siberite_mine ;
17083: LD_ADDR_OWVAR 42
17087: PUSH
17088: LD_INT 30
17090: ST_TO_ADDR
// b := CreateBuilding ;
17091: LD_ADDR_VAR 0 4
17095: PUSH
17096: CALL_OW 46
17100: ST_TO_ADDR
// PlaceUnitXYR ( b , 69 , 13 , 0 , false ) ;
17101: LD_VAR 0 4
17105: PPUSH
17106: LD_INT 69
17108: PPUSH
17109: LD_INT 13
17111: PPUSH
17112: LD_INT 0
17114: PPUSH
17115: LD_INT 0
17117: PPUSH
17118: CALL_OW 50
// hc_gallery :=  ;
17122: LD_ADDR_OWVAR 33
17126: PUSH
17127: LD_STRING 
17129: ST_TO_ADDR
// hc_name :=  ;
17130: LD_ADDR_OWVAR 26
17134: PUSH
17135: LD_STRING 
17137: ST_TO_ADDR
// hc_importance := 0 ;
17138: LD_ADDR_OWVAR 32
17142: PUSH
17143: LD_INT 0
17145: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_bunker ] ] ) do
17146: LD_ADDR_VAR 0 2
17150: PUSH
17151: LD_INT 22
17153: PUSH
17154: LD_INT 7
17156: PUSH
17157: EMPTY
17158: LIST
17159: LIST
17160: PUSH
17161: LD_INT 30
17163: PUSH
17164: LD_INT 32
17166: PUSH
17167: EMPTY
17168: LIST
17169: LIST
17170: PUSH
17171: EMPTY
17172: LIST
17173: LIST
17174: PPUSH
17175: CALL_OW 69
17179: PUSH
17180: FOR_IN
17181: IFFALSE 17251
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17183: LD_ADDR_OWVAR 21
17187: PUSH
17188: LD_INT 1
17190: PUSH
17191: LD_INT 3
17193: PUSH
17194: EMPTY
17195: LIST
17196: LIST
17197: PUSH
17198: LD_INT 1
17200: PPUSH
17201: LD_INT 2
17203: PPUSH
17204: CALL_OW 12
17208: ARRAY
17209: ST_TO_ADDR
// PrepareHuman ( false , 1 , al_skill ) ;
17210: LD_INT 0
17212: PPUSH
17213: LD_INT 1
17215: PPUSH
17216: LD_EXP 45
17220: PPUSH
17221: CALL_OW 380
// un := CreateHuman ;
17225: LD_ADDR_VAR 0 3
17229: PUSH
17230: CALL_OW 44
17234: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
17235: LD_VAR 0 3
17239: PPUSH
17240: LD_VAR 0 2
17244: PPUSH
17245: CALL_OW 52
// end ;
17249: GO 17180
17251: POP
17252: POP
// for i = 1 to 3 do
17253: LD_ADDR_VAR 0 2
17257: PUSH
17258: DOUBLE
17259: LD_INT 1
17261: DEC
17262: ST_TO_ADDR
17263: LD_INT 3
17265: PUSH
17266: FOR_TO
17267: IFFALSE 17335
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17269: LD_ADDR_OWVAR 21
17273: PUSH
17274: LD_INT 1
17276: PUSH
17277: LD_INT 3
17279: PUSH
17280: EMPTY
17281: LIST
17282: LIST
17283: PUSH
17284: LD_INT 1
17286: PPUSH
17287: LD_INT 2
17289: PPUSH
17290: CALL_OW 12
17294: ARRAY
17295: ST_TO_ADDR
// PrepareHuman ( false , 4 , al_skill ) ;
17296: LD_INT 0
17298: PPUSH
17299: LD_INT 4
17301: PPUSH
17302: LD_EXP 45
17306: PPUSH
17307: CALL_OW 380
// un := CreateHuman ;
17311: LD_ADDR_VAR 0 3
17315: PUSH
17316: CALL_OW 44
17320: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_lab1 ) ;
17321: LD_VAR 0 3
17325: PPUSH
17326: LD_INT 164
17328: PPUSH
17329: CALL_OW 52
// end ;
17333: GO 17266
17335: POP
17336: POP
// for i = 1 to 4 do
17337: LD_ADDR_VAR 0 2
17341: PUSH
17342: DOUBLE
17343: LD_INT 1
17345: DEC
17346: ST_TO_ADDR
17347: LD_INT 4
17349: PUSH
17350: FOR_TO
17351: IFFALSE 17442
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17353: LD_ADDR_OWVAR 21
17357: PUSH
17358: LD_INT 1
17360: PUSH
17361: LD_INT 3
17363: PUSH
17364: EMPTY
17365: LIST
17366: LIST
17367: PUSH
17368: LD_INT 1
17370: PPUSH
17371: LD_INT 2
17373: PPUSH
17374: CALL_OW 12
17378: ARRAY
17379: ST_TO_ADDR
// PrepareHuman ( false , [ class_sniper , class_bazooker , class_bazooker ] [ Rand ( 1 , 3 ) ] , al_skill ) ;
17380: LD_INT 0
17382: PPUSH
17383: LD_INT 5
17385: PUSH
17386: LD_INT 9
17388: PUSH
17389: LD_INT 9
17391: PUSH
17392: EMPTY
17393: LIST
17394: LIST
17395: LIST
17396: PUSH
17397: LD_INT 1
17399: PPUSH
17400: LD_INT 3
17402: PPUSH
17403: CALL_OW 12
17407: ARRAY
17408: PPUSH
17409: LD_EXP 45
17413: PPUSH
17414: CALL_OW 380
// un := CreateHuman ;
17418: LD_ADDR_VAR 0 3
17422: PUSH
17423: CALL_OW 44
17427: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_bar ) ;
17428: LD_VAR 0 3
17432: PPUSH
17433: LD_INT 173
17435: PPUSH
17436: CALL_OW 52
// end ;
17440: GO 17350
17442: POP
17443: POP
// for i = 1 to 4 do
17444: LD_ADDR_VAR 0 2
17448: PUSH
17449: DOUBLE
17450: LD_INT 1
17452: DEC
17453: ST_TO_ADDR
17454: LD_INT 4
17456: PUSH
17457: FOR_TO
17458: IFFALSE 17556
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17460: LD_ADDR_OWVAR 21
17464: PUSH
17465: LD_INT 1
17467: PUSH
17468: LD_INT 3
17470: PUSH
17471: EMPTY
17472: LIST
17473: LIST
17474: PUSH
17475: LD_INT 1
17477: PPUSH
17478: LD_INT 2
17480: PPUSH
17481: CALL_OW 12
17485: ARRAY
17486: ST_TO_ADDR
// PrepareHuman ( false , 3 , al_skill ) ;
17487: LD_INT 0
17489: PPUSH
17490: LD_INT 3
17492: PPUSH
17493: LD_EXP 45
17497: PPUSH
17498: CALL_OW 380
// un := CreateHuman ;
17502: LD_ADDR_VAR 0 3
17506: PUSH
17507: CALL_OW 44
17511: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
17512: LD_VAR 0 3
17516: PPUSH
17517: LD_INT 22
17519: PUSH
17520: LD_INT 7
17522: PUSH
17523: EMPTY
17524: LIST
17525: LIST
17526: PUSH
17527: LD_INT 30
17529: PUSH
17530: LD_INT 3
17532: PUSH
17533: EMPTY
17534: LIST
17535: LIST
17536: PUSH
17537: EMPTY
17538: LIST
17539: LIST
17540: PPUSH
17541: CALL_OW 69
17545: PUSH
17546: LD_INT 1
17548: ARRAY
17549: PPUSH
17550: CALL_OW 52
// end ;
17554: GO 17457
17556: POP
17557: POP
// for i = 1 to 4 do
17558: LD_ADDR_VAR 0 2
17562: PUSH
17563: DOUBLE
17564: LD_INT 1
17566: DEC
17567: ST_TO_ADDR
17568: LD_INT 4
17570: PUSH
17571: FOR_TO
17572: IFFALSE 17640
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17574: LD_ADDR_OWVAR 21
17578: PUSH
17579: LD_INT 1
17581: PUSH
17582: LD_INT 3
17584: PUSH
17585: EMPTY
17586: LIST
17587: LIST
17588: PUSH
17589: LD_INT 1
17591: PPUSH
17592: LD_INT 2
17594: PPUSH
17595: CALL_OW 12
17599: ARRAY
17600: ST_TO_ADDR
// PrepareHuman ( false , 2 , al_skill ) ;
17601: LD_INT 0
17603: PPUSH
17604: LD_INT 2
17606: PPUSH
17607: LD_EXP 45
17611: PPUSH
17612: CALL_OW 380
// un := CreateHuman ;
17616: LD_ADDR_VAR 0 3
17620: PUSH
17621: CALL_OW 44
17625: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_depot ) ;
17626: LD_VAR 0 3
17630: PPUSH
17631: LD_INT 162
17633: PPUSH
17634: CALL_OW 52
// end ;
17638: GO 17571
17640: POP
17641: POP
// uc_nation := 3 ;
17642: LD_ADDR_OWVAR 21
17646: PUSH
17647: LD_INT 3
17649: ST_TO_ADDR
// vc_chassis := ru_medium_wheeled ;
17650: LD_ADDR_OWVAR 37
17654: PUSH
17655: LD_INT 21
17657: ST_TO_ADDR
// vc_engine := engine_siberite ;
17658: LD_ADDR_OWVAR 39
17662: PUSH
17663: LD_INT 3
17665: ST_TO_ADDR
// vc_control := control_computer ;
17666: LD_ADDR_OWVAR 38
17670: PUSH
17671: LD_INT 3
17673: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
17674: LD_ADDR_OWVAR 40
17678: PUSH
17679: LD_INT 51
17681: ST_TO_ADDR
// PlaceUnitXY ( CreateVehicle , 49 , 13 , false ) ;
17682: CALL_OW 45
17686: PPUSH
17687: LD_INT 49
17689: PPUSH
17690: LD_INT 13
17692: PPUSH
17693: LD_INT 0
17695: PPUSH
17696: CALL_OW 48
// al_turrets := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_turret ] ] ) ;
17700: LD_ADDR_EXP 52
17704: PUSH
17705: LD_INT 22
17707: PUSH
17708: LD_INT 7
17710: PUSH
17711: EMPTY
17712: LIST
17713: LIST
17714: PUSH
17715: LD_INT 30
17717: PUSH
17718: LD_INT 33
17720: PUSH
17721: EMPTY
17722: LIST
17723: LIST
17724: PUSH
17725: EMPTY
17726: LIST
17727: LIST
17728: PPUSH
17729: CALL_OW 69
17733: ST_TO_ADDR
// for i = 1 to FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_btype , b_turret ] , [ f_bweapon , 0 ] ] ] ) do
17734: LD_ADDR_VAR 0 2
17738: PUSH
17739: DOUBLE
17740: LD_INT 1
17742: DEC
17743: ST_TO_ADDR
17744: LD_INT 22
17746: PUSH
17747: LD_INT 7
17749: PUSH
17750: EMPTY
17751: LIST
17752: LIST
17753: PUSH
17754: LD_INT 30
17756: PUSH
17757: LD_INT 33
17759: PUSH
17760: EMPTY
17761: LIST
17762: LIST
17763: PUSH
17764: LD_INT 35
17766: PUSH
17767: LD_INT 0
17769: PUSH
17770: EMPTY
17771: LIST
17772: LIST
17773: PUSH
17774: EMPTY
17775: LIST
17776: LIST
17777: LIST
17778: PUSH
17779: EMPTY
17780: LIST
17781: PPUSH
17782: CALL_OW 69
17786: PUSH
17787: FOR_TO
17788: IFFALSE 17848
// AddComPlaceWeapon ( FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_btype , b_turret ] , [ f_bweapon , 0 ] ] ] ) [ i ] , ru_time_lapser ) ;
17790: LD_INT 22
17792: PUSH
17793: LD_INT 7
17795: PUSH
17796: EMPTY
17797: LIST
17798: LIST
17799: PUSH
17800: LD_INT 30
17802: PUSH
17803: LD_INT 33
17805: PUSH
17806: EMPTY
17807: LIST
17808: LIST
17809: PUSH
17810: LD_INT 35
17812: PUSH
17813: LD_INT 0
17815: PUSH
17816: EMPTY
17817: LIST
17818: LIST
17819: PUSH
17820: EMPTY
17821: LIST
17822: LIST
17823: LIST
17824: PUSH
17825: EMPTY
17826: LIST
17827: PPUSH
17828: CALL_OW 69
17832: PUSH
17833: LD_VAR 0 2
17837: ARRAY
17838: PPUSH
17839: LD_INT 49
17841: PPUSH
17842: CALL_OW 208
17846: GO 17787
17848: POP
17849: POP
// end ;
17850: LD_VAR 0 1
17854: RET
// export al_eng , al_sold , al_mech , al_sci ; export al_vehs , al_cargo , al_turrets ; export al_dep , al_lab , al_fac ; export al_bul ; every 0 0$02 trigger your_side = 1 do var i , un , veh , cr ;
17855: LD_OWVAR 2
17859: PUSH
17860: LD_INT 1
17862: EQUAL
17863: IFFALSE 18849
17865: GO 17867
17867: DISABLE
17868: LD_INT 0
17870: PPUSH
17871: PPUSH
17872: PPUSH
17873: PPUSH
// begin enable ;
17874: ENABLE
// al_bul := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] ] ) ;
17875: LD_ADDR_EXP 56
17879: PUSH
17880: LD_INT 22
17882: PUSH
17883: LD_INT 7
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: PUSH
17890: LD_INT 21
17892: PUSH
17893: LD_INT 3
17895: PUSH
17896: EMPTY
17897: LIST
17898: LIST
17899: PUSH
17900: EMPTY
17901: LIST
17902: LIST
17903: PPUSH
17904: CALL_OW 69
17908: ST_TO_ADDR
// al_lab := [ al_lab1 , al_lab2 ] ;
17909: LD_ADDR_EXP 54
17913: PUSH
17914: LD_INT 164
17916: PUSH
17917: LD_INT 197
17919: PUSH
17920: EMPTY
17921: LIST
17922: LIST
17923: ST_TO_ADDR
// al_dep := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
17924: LD_ADDR_EXP 53
17928: PUSH
17929: LD_INT 22
17931: PUSH
17932: LD_INT 7
17934: PUSH
17935: EMPTY
17936: LIST
17937: LIST
17938: PUSH
17939: LD_INT 30
17941: PUSH
17942: LD_INT 1
17944: PUSH
17945: EMPTY
17946: LIST
17947: LIST
17948: PUSH
17949: EMPTY
17950: LIST
17951: LIST
17952: PPUSH
17953: CALL_OW 69
17957: PUSH
17958: LD_INT 1
17960: ARRAY
17961: ST_TO_ADDR
// al_fac := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
17962: LD_ADDR_EXP 55
17966: PUSH
17967: LD_INT 22
17969: PUSH
17970: LD_INT 7
17972: PUSH
17973: EMPTY
17974: LIST
17975: LIST
17976: PUSH
17977: LD_INT 30
17979: PUSH
17980: LD_INT 3
17982: PUSH
17983: EMPTY
17984: LIST
17985: LIST
17986: PUSH
17987: EMPTY
17988: LIST
17989: LIST
17990: PPUSH
17991: CALL_OW 69
17995: PUSH
17996: LD_INT 1
17998: ARRAY
17999: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) then
18000: LD_INT 22
18002: PUSH
18003: LD_INT 7
18005: PUSH
18006: EMPTY
18007: LIST
18008: LIST
18009: PUSH
18010: LD_INT 34
18012: PUSH
18013: LD_INT 51
18015: PUSH
18016: EMPTY
18017: LIST
18018: LIST
18019: PUSH
18020: EMPTY
18021: LIST
18022: LIST
18023: PPUSH
18024: CALL_OW 69
18028: IFFALSE 18068
// al_cargo := FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
18030: LD_ADDR_EXP 51
18034: PUSH
18035: LD_INT 22
18037: PUSH
18038: LD_INT 7
18040: PUSH
18041: EMPTY
18042: LIST
18043: LIST
18044: PUSH
18045: LD_INT 34
18047: PUSH
18048: LD_INT 51
18050: PUSH
18051: EMPTY
18052: LIST
18053: LIST
18054: PUSH
18055: EMPTY
18056: LIST
18057: LIST
18058: PPUSH
18059: CALL_OW 69
18063: PUSH
18064: LD_INT 1
18066: ARRAY
18067: ST_TO_ADDR
// al_sold := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , class_bazooker ] ] ) ;
18068: LD_ADDR_EXP 47
18072: PUSH
18073: LD_INT 22
18075: PUSH
18076: LD_INT 7
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: PUSH
18083: LD_INT 25
18085: PUSH
18086: LD_INT 9
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: PUSH
18093: EMPTY
18094: LIST
18095: LIST
18096: PPUSH
18097: CALL_OW 69
18101: ST_TO_ADDR
// al_eng := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 2 ] ] ) ;
18102: LD_ADDR_EXP 46
18106: PUSH
18107: LD_INT 22
18109: PUSH
18110: LD_INT 7
18112: PUSH
18113: EMPTY
18114: LIST
18115: LIST
18116: PUSH
18117: LD_INT 25
18119: PUSH
18120: LD_INT 2
18122: PUSH
18123: EMPTY
18124: LIST
18125: LIST
18126: PUSH
18127: EMPTY
18128: LIST
18129: LIST
18130: PPUSH
18131: CALL_OW 69
18135: ST_TO_ADDR
// al_mech := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 3 ] ] ) ;
18136: LD_ADDR_EXP 48
18140: PUSH
18141: LD_INT 22
18143: PUSH
18144: LD_INT 7
18146: PUSH
18147: EMPTY
18148: LIST
18149: LIST
18150: PUSH
18151: LD_INT 25
18153: PUSH
18154: LD_INT 3
18156: PUSH
18157: EMPTY
18158: LIST
18159: LIST
18160: PUSH
18161: EMPTY
18162: LIST
18163: LIST
18164: PPUSH
18165: CALL_OW 69
18169: ST_TO_ADDR
// al_sci := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 4 ] ] ) ;
18170: LD_ADDR_EXP 49
18174: PUSH
18175: LD_INT 22
18177: PUSH
18178: LD_INT 7
18180: PUSH
18181: EMPTY
18182: LIST
18183: LIST
18184: PUSH
18185: LD_INT 25
18187: PUSH
18188: LD_INT 4
18190: PUSH
18191: EMPTY
18192: LIST
18193: LIST
18194: PUSH
18195: EMPTY
18196: LIST
18197: LIST
18198: PPUSH
18199: CALL_OW 69
18203: ST_TO_ADDR
// if not HasTask ( al_cargo ) and GetCargo ( al_cargo , mat_cans ) < 100 then
18204: LD_EXP 51
18208: PPUSH
18209: CALL_OW 314
18213: NOT
18214: PUSH
18215: LD_EXP 51
18219: PPUSH
18220: LD_INT 1
18222: PPUSH
18223: CALL_OW 289
18227: PUSH
18228: LD_INT 100
18230: LESS
18231: AND
18232: IFFALSE 18280
// begin cr := GetListOfCratesInArea ( us_crates ) ;
18234: LD_ADDR_VAR 0 4
18238: PUSH
18239: LD_INT 12
18241: PPUSH
18242: CALL_OW 435
18246: ST_TO_ADDR
// if cr then
18247: LD_VAR 0 4
18251: IFFALSE 18280
// ComCollect ( al_cargo , cr [ 1 ] , cr [ 2 ] ) ;
18253: LD_EXP 51
18257: PPUSH
18258: LD_VAR 0 4
18262: PUSH
18263: LD_INT 1
18265: ARRAY
18266: PPUSH
18267: LD_VAR 0 4
18271: PUSH
18272: LD_INT 2
18274: ARRAY
18275: PPUSH
18276: CALL_OW 117
// end ; if UnitFilter ( al_bul , [ f_not , [ f_lives , 1000 ] ] ) then
18280: LD_EXP 56
18284: PPUSH
18285: LD_INT 3
18287: PUSH
18288: LD_INT 24
18290: PUSH
18291: LD_INT 1000
18293: PUSH
18294: EMPTY
18295: LIST
18296: LIST
18297: PUSH
18298: EMPTY
18299: LIST
18300: LIST
18301: PPUSH
18302: CALL_OW 72
18306: IFFALSE 18436
// begin if al_eng then
18308: LD_EXP 46
18312: IFFALSE 18434
// for i = 1 to al_eng do
18314: LD_ADDR_VAR 0 1
18318: PUSH
18319: DOUBLE
18320: LD_INT 1
18322: DEC
18323: ST_TO_ADDR
18324: LD_EXP 46
18328: PUSH
18329: FOR_TO
18330: IFFALSE 18432
// if IsInUnit ( al_eng [ i ] ) then
18332: LD_EXP 46
18336: PUSH
18337: LD_VAR 0 1
18341: ARRAY
18342: PPUSH
18343: CALL_OW 310
18347: IFFALSE 18366
// ComExitBuilding ( al_eng [ i ] ) else
18349: LD_EXP 46
18353: PUSH
18354: LD_VAR 0 1
18358: ARRAY
18359: PPUSH
18360: CALL_OW 122
18364: GO 18430
// if not HasTask ( al_eng [ i ] ) then
18366: LD_EXP 46
18370: PUSH
18371: LD_VAR 0 1
18375: ARRAY
18376: PPUSH
18377: CALL_OW 314
18381: NOT
18382: IFFALSE 18430
// ComRepairBuilding ( al_eng [ i ] , UnitFilter ( al_bul , [ f_not , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
18384: LD_EXP 46
18388: PUSH
18389: LD_VAR 0 1
18393: ARRAY
18394: PPUSH
18395: LD_EXP 56
18399: PPUSH
18400: LD_INT 3
18402: PUSH
18403: LD_INT 24
18405: PUSH
18406: LD_INT 1000
18408: PUSH
18409: EMPTY
18410: LIST
18411: LIST
18412: PUSH
18413: EMPTY
18414: LIST
18415: LIST
18416: PPUSH
18417: CALL_OW 72
18421: PUSH
18422: LD_INT 1
18424: ARRAY
18425: PPUSH
18426: CALL_OW 130
18430: GO 18329
18432: POP
18433: POP
// end else
18434: GO 18518
// if al_eng then
18436: LD_EXP 46
18440: IFFALSE 18518
// if not IsInUnit ( al_eng [ 1 ] ) then
18442: LD_EXP 46
18446: PUSH
18447: LD_INT 1
18449: ARRAY
18450: PPUSH
18451: CALL_OW 310
18455: NOT
18456: IFFALSE 18518
// for i = 1 to al_eng do
18458: LD_ADDR_VAR 0 1
18462: PUSH
18463: DOUBLE
18464: LD_INT 1
18466: DEC
18467: ST_TO_ADDR
18468: LD_EXP 46
18472: PUSH
18473: FOR_TO
18474: IFFALSE 18516
// if not IsInUnit ( al_eng [ i ] ) then
18476: LD_EXP 46
18480: PUSH
18481: LD_VAR 0 1
18485: ARRAY
18486: PPUSH
18487: CALL_OW 310
18491: NOT
18492: IFFALSE 18514
// ComEnterUnit ( al_eng [ i ] , al_dep ) ;
18494: LD_EXP 46
18498: PUSH
18499: LD_VAR 0 1
18503: ARRAY
18504: PPUSH
18505: LD_EXP 53
18509: PPUSH
18510: CALL_OW 120
18514: GO 18473
18516: POP
18517: POP
// if al_vehs then
18518: LD_EXP 50
18522: IFFALSE 18622
// if BuildingStatus ( al_fac ) = bs_idle then
18524: LD_EXP 55
18528: PPUSH
18529: CALL_OW 461
18533: PUSH
18534: LD_INT 2
18536: EQUAL
18537: IFFALSE 18622
// begin ComConstruct ( al_fac , al_vehs [ 1 ] , al_vehs [ 2 ] , al_vehs [ 3 ] , al_vehs [ 4 ] ) ;
18539: LD_EXP 55
18543: PPUSH
18544: LD_EXP 50
18548: PUSH
18549: LD_INT 1
18551: ARRAY
18552: PPUSH
18553: LD_EXP 50
18557: PUSH
18558: LD_INT 2
18560: ARRAY
18561: PPUSH
18562: LD_EXP 50
18566: PUSH
18567: LD_INT 3
18569: ARRAY
18570: PPUSH
18571: LD_EXP 50
18575: PUSH
18576: LD_INT 4
18578: ARRAY
18579: PPUSH
18580: CALL_OW 125
// for i = 1 to 4 do
18584: LD_ADDR_VAR 0 1
18588: PUSH
18589: DOUBLE
18590: LD_INT 1
18592: DEC
18593: ST_TO_ADDR
18594: LD_INT 4
18596: PUSH
18597: FOR_TO
18598: IFFALSE 18620
// al_vehs := Delete ( al_vehs , 1 ) ;
18600: LD_ADDR_EXP 50
18604: PUSH
18605: LD_EXP 50
18609: PPUSH
18610: LD_INT 1
18612: PPUSH
18613: CALL_OW 3
18617: ST_TO_ADDR
18618: GO 18597
18620: POP
18621: POP
// end ; if al_force = 0 and tick mod 23100 = 0 then
18622: LD_EXP 44
18626: PUSH
18627: LD_INT 0
18629: EQUAL
18630: PUSH
18631: LD_OWVAR 1
18635: PUSH
18636: LD_INT 23100
18638: MOD
18639: PUSH
18640: LD_INT 0
18642: EQUAL
18643: AND
18644: IFFALSE 18758
// begin for i = 1 to [ 6 , 7 , 8 ] [ Difficulty ] do
18646: LD_ADDR_VAR 0 1
18650: PUSH
18651: DOUBLE
18652: LD_INT 1
18654: DEC
18655: ST_TO_ADDR
18656: LD_INT 6
18658: PUSH
18659: LD_INT 7
18661: PUSH
18662: LD_INT 8
18664: PUSH
18665: EMPTY
18666: LIST
18667: LIST
18668: LIST
18669: PUSH
18670: LD_OWVAR 67
18674: ARRAY
18675: PUSH
18676: FOR_TO
18677: IFFALSE 18756
// begin al_vehs := al_vehs ^ ru_heavy_wheeled ;
18679: LD_ADDR_EXP 50
18683: PUSH
18684: LD_EXP 50
18688: PUSH
18689: LD_INT 23
18691: ADD
18692: ST_TO_ADDR
// al_vehs := al_vehs ^ engine_combustion ;
18693: LD_ADDR_EXP 50
18697: PUSH
18698: LD_EXP 50
18702: PUSH
18703: LD_INT 1
18705: ADD
18706: ST_TO_ADDR
// al_vehs := al_vehs ^ control_computer ;
18707: LD_ADDR_EXP 50
18711: PUSH
18712: LD_EXP 50
18716: PUSH
18717: LD_INT 3
18719: ADD
18720: ST_TO_ADDR
// al_vehs := al_vehs ^ [ ru_heavy_gun , ru_rocket ] [ Rand ( 1 , 2 ) ] ;
18721: LD_ADDR_EXP 50
18725: PUSH
18726: LD_EXP 50
18730: PUSH
18731: LD_INT 46
18733: PUSH
18734: LD_INT 47
18736: PUSH
18737: EMPTY
18738: LIST
18739: LIST
18740: PUSH
18741: LD_INT 1
18743: PPUSH
18744: LD_INT 2
18746: PPUSH
18747: CALL_OW 12
18751: ARRAY
18752: ADD
18753: ST_TO_ADDR
// end ;
18754: GO 18676
18756: POP
18757: POP
// end ; if FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 then
18758: LD_INT 22
18760: PUSH
18761: LD_INT 7
18763: PUSH
18764: EMPTY
18765: LIST
18766: LIST
18767: PUSH
18768: LD_INT 34
18770: PUSH
18771: LD_INT 51
18773: PUSH
18774: EMPTY
18775: LIST
18776: LIST
18777: PUSH
18778: EMPTY
18779: LIST
18780: LIST
18781: PPUSH
18782: CALL_OW 69
18786: PUSH
18787: LD_INT 0
18789: EQUAL
18790: IFFALSE 18813
// ComConstruct ( al_fac , ru_medium_wheeled , engine_combustion , control_computer , ru_cargo_bay ) ;
18792: LD_EXP 55
18796: PPUSH
18797: LD_INT 21
18799: PPUSH
18800: LD_INT 1
18802: PPUSH
18803: LD_INT 3
18805: PPUSH
18806: LD_INT 51
18808: PPUSH
18809: CALL_OW 125
// if al_force >= [ 6 , 7 , 8 ] [ Difficulty ] then
18813: LD_EXP 44
18817: PUSH
18818: LD_INT 6
18820: PUSH
18821: LD_INT 7
18823: PUSH
18824: LD_INT 8
18826: PUSH
18827: EMPTY
18828: LIST
18829: LIST
18830: LIST
18831: PUSH
18832: LD_OWVAR 67
18836: ARRAY
18837: GREATEREQUAL
18838: IFFALSE 18849
// RaiseSailEvent ( event_alliance_attack ) ;
18840: LD_EXP 23
18844: PPUSH
18845: CALL_OW 427
// end ;
18849: PPOPN 4
18851: END
// export function AllianceAttack ( ) ; var path , units ; begin
18852: LD_INT 0
18854: PPUSH
18855: PPUSH
18856: PPUSH
// units := al_force ;
18857: LD_ADDR_VAR 0 3
18861: PUSH
18862: LD_EXP 44
18866: ST_TO_ADDR
// al_force := [ ] ;
18867: LD_ADDR_EXP 44
18871: PUSH
18872: EMPTY
18873: ST_TO_ADDR
// if rand ( 0 , 1 ) then
18874: LD_INT 0
18876: PPUSH
18877: LD_INT 1
18879: PPUSH
18880: CALL_OW 12
18884: IFFALSE 18928
// path := [ [ 49 , 53 ] , [ 52 , 90 ] , [ 63 , 114 ] ] else
18886: LD_ADDR_VAR 0 2
18890: PUSH
18891: LD_INT 49
18893: PUSH
18894: LD_INT 53
18896: PUSH
18897: EMPTY
18898: LIST
18899: LIST
18900: PUSH
18901: LD_INT 52
18903: PUSH
18904: LD_INT 90
18906: PUSH
18907: EMPTY
18908: LIST
18909: LIST
18910: PUSH
18911: LD_INT 63
18913: PUSH
18914: LD_INT 114
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: PUSH
18921: EMPTY
18922: LIST
18923: LIST
18924: LIST
18925: ST_TO_ADDR
18926: GO 18957
// path := [ [ 89 , 52 ] , [ 143 , 50 ] ] ;
18928: LD_ADDR_VAR 0 2
18932: PUSH
18933: LD_INT 89
18935: PUSH
18936: LD_INT 52
18938: PUSH
18939: EMPTY
18940: LIST
18941: LIST
18942: PUSH
18943: LD_INT 143
18945: PUSH
18946: LD_INT 50
18948: PUSH
18949: EMPTY
18950: LIST
18951: LIST
18952: PUSH
18953: EMPTY
18954: LIST
18955: LIST
18956: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18957: LD_INT 35
18959: PPUSH
18960: CALL_OW 67
// until not AgressiveMove ( units , path ) ;
18964: LD_VAR 0 3
18968: PPUSH
18969: LD_VAR 0 2
18973: PPUSH
18974: CALL 79559 0 2
18978: NOT
18979: IFFALSE 18957
// end ; end_of_file
18981: LD_VAR 0 1
18985: RET
// export ar_commander , ar_force , ar_skill ; export function PrepareArabian ; var i , filter , un , team ; begin
18986: LD_INT 0
18988: PPUSH
18989: PPUSH
18990: PPUSH
18991: PPUSH
18992: PPUSH
// ar_skill := [ 9 , 8 , 7 ] [ Difficulty ] ;
18993: LD_ADDR_EXP 59
18997: PUSH
18998: LD_INT 9
19000: PUSH
19001: LD_INT 8
19003: PUSH
19004: LD_INT 7
19006: PUSH
19007: EMPTY
19008: LIST
19009: LIST
19010: LIST
19011: PUSH
19012: LD_OWVAR 67
19016: ARRAY
19017: ST_TO_ADDR
// ar_force := [ ] ;
19018: LD_ADDR_EXP 58
19022: PUSH
19023: EMPTY
19024: ST_TO_ADDR
// RemoveAlliance ;
19025: CALL 16862 0 0
// RemoveEnvironmentArea ( evn ) ;
19029: LD_INT 17
19031: PPUSH
19032: CALL_OW 355
// your_side := 2 ;
19036: LD_ADDR_OWVAR 2
19040: PUSH
19041: LD_INT 2
19043: ST_TO_ADDR
// uc_side := 2 ;
19044: LD_ADDR_OWVAR 20
19048: PUSH
19049: LD_INT 2
19051: ST_TO_ADDR
// uc_nation := nation_arabian ;
19052: LD_ADDR_OWVAR 21
19056: PUSH
19057: LD_INT 2
19059: ST_TO_ADDR
// hc_gallery :=  ;
19060: LD_ADDR_OWVAR 33
19064: PUSH
19065: LD_STRING 
19067: ST_TO_ADDR
// hc_name :=  ;
19068: LD_ADDR_OWVAR 26
19072: PUSH
19073: LD_STRING 
19075: ST_TO_ADDR
// hc_importance := 0 ;
19076: LD_ADDR_OWVAR 32
19080: PUSH
19081: LD_INT 0
19083: ST_TO_ADDR
// for i = 1 to 20 do
19084: LD_ADDR_VAR 0 2
19088: PUSH
19089: DOUBLE
19090: LD_INT 1
19092: DEC
19093: ST_TO_ADDR
19094: LD_INT 20
19096: PUSH
19097: FOR_TO
19098: IFFALSE 19163
// begin PrepareHuman ( false , Rand ( 1 , 4 ) , ar_skill ) ;
19100: LD_INT 0
19102: PPUSH
19103: LD_INT 1
19105: PPUSH
19106: LD_INT 4
19108: PPUSH
19109: CALL_OW 12
19113: PPUSH
19114: LD_EXP 59
19118: PPUSH
19119: CALL_OW 380
// un := CreateHuman ;
19123: LD_ADDR_VAR 0 4
19127: PUSH
19128: CALL_OW 44
19132: ST_TO_ADDR
// SetDir ( un , 2 ) ;
19133: LD_VAR 0 4
19137: PPUSH
19138: LD_INT 2
19140: PPUSH
19141: CALL_OW 233
// ar_force := ar_force ^ un ;
19145: LD_ADDR_EXP 58
19149: PUSH
19150: LD_EXP 58
19154: PUSH
19155: LD_VAR 0 4
19159: ADD
19160: ST_TO_ADDR
// end ;
19161: GO 19097
19163: POP
19164: POP
// hc_importance := 100 ;
19165: LD_ADDR_OWVAR 32
19169: PUSH
19170: LD_INT 100
19172: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , ar_skill ) ;
19173: LD_INT 1
19175: PPUSH
19176: LD_INT 11
19178: PPUSH
19179: LD_EXP 59
19183: PPUSH
19184: CALL_OW 380
// ar_commander := CreateHuman ;
19188: LD_ADDR_EXP 57
19192: PUSH
19193: CALL_OW 44
19197: ST_TO_ADDR
// SetDir ( ar_commander , 2 ) ;
19198: LD_EXP 57
19202: PPUSH
19203: LD_INT 2
19205: PPUSH
19206: CALL_OW 233
// player_commander := ar_commander ;
19210: LD_ADDR_EXP 11
19214: PUSH
19215: LD_EXP 57
19219: ST_TO_ADDR
// team := CharacterSelection ( text , [ 14 , 13 , 12 ] [ Difficulty ] , [ 14 , 13 , 12 ] [ Difficulty ] , [ sel_dont_change_class , ar_commander , sel_not_hired , sel_changeable , sel_change_class ] ^ ar_force , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , class_mortar ] ) ;
19220: LD_ADDR_VAR 0 5
19224: PUSH
19225: LD_STRING text
19227: PPUSH
19228: LD_INT 14
19230: PUSH
19231: LD_INT 13
19233: PUSH
19234: LD_INT 12
19236: PUSH
19237: EMPTY
19238: LIST
19239: LIST
19240: LIST
19241: PUSH
19242: LD_OWVAR 67
19246: ARRAY
19247: PPUSH
19248: LD_INT 14
19250: PUSH
19251: LD_INT 13
19253: PUSH
19254: LD_INT 12
19256: PUSH
19257: EMPTY
19258: LIST
19259: LIST
19260: LIST
19261: PUSH
19262: LD_OWVAR 67
19266: ARRAY
19267: PPUSH
19268: LD_INT -6
19270: PUSH
19271: LD_EXP 57
19275: PUSH
19276: LD_INT -2
19278: PUSH
19279: LD_INT -3
19281: PUSH
19282: LD_INT -5
19284: PUSH
19285: EMPTY
19286: LIST
19287: LIST
19288: LIST
19289: LIST
19290: LIST
19291: PUSH
19292: LD_EXP 58
19296: ADD
19297: PPUSH
19298: LD_INT 1
19300: PUSH
19301: LD_INT 3
19303: PUSH
19304: LD_INT 2
19306: PUSH
19307: LD_INT 1
19309: PUSH
19310: EMPTY
19311: LIST
19312: LIST
19313: PUSH
19314: LD_INT 4
19316: PUSH
19317: LD_INT 1
19319: PUSH
19320: EMPTY
19321: LIST
19322: LIST
19323: PUSH
19324: LD_INT 8
19326: PUSH
19327: EMPTY
19328: LIST
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: PPUSH
19334: CALL_OW 42
19338: ST_TO_ADDR
// team := team ^ ar_commander ;
19339: LD_ADDR_VAR 0 5
19343: PUSH
19344: LD_VAR 0 5
19348: PUSH
19349: LD_EXP 57
19353: ADD
19354: ST_TO_ADDR
// for i = 1 to 4 do
19355: LD_ADDR_VAR 0 2
19359: PUSH
19360: DOUBLE
19361: LD_INT 1
19363: DEC
19364: ST_TO_ADDR
19365: LD_INT 4
19367: PUSH
19368: FOR_TO
19369: IFFALSE 19469
// begin vc_chassis := ar_medium_trike ;
19371: LD_ADDR_OWVAR 37
19375: PUSH
19376: LD_INT 13
19378: ST_TO_ADDR
// vc_engine := engine_siberite ;
19379: LD_ADDR_OWVAR 39
19383: PUSH
19384: LD_INT 3
19386: ST_TO_ADDR
// vc_control := control_manual ;
19387: LD_ADDR_OWVAR 38
19391: PUSH
19392: LD_INT 1
19394: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_cargo_bay , ar_crane , ar_gun ] [ i ] ;
19395: LD_ADDR_OWVAR 40
19399: PUSH
19400: LD_INT 27
19402: PUSH
19403: LD_INT 32
19405: PUSH
19406: LD_INT 88
19408: PUSH
19409: LD_INT 27
19411: PUSH
19412: EMPTY
19413: LIST
19414: LIST
19415: LIST
19416: LIST
19417: PUSH
19418: LD_VAR 0 2
19422: ARRAY
19423: ST_TO_ADDR
// un := CreateVehicle ;
19424: LD_ADDR_VAR 0 4
19428: PUSH
19429: CALL_OW 45
19433: ST_TO_ADDR
// SetDir ( un , 2 ) ;
19434: LD_VAR 0 4
19438: PPUSH
19439: LD_INT 2
19441: PPUSH
19442: CALL_OW 233
// PlaceUnitXYR ( un , 54 , 15 , 6 , false ) ;
19446: LD_VAR 0 4
19450: PPUSH
19451: LD_INT 54
19453: PPUSH
19454: LD_INT 15
19456: PPUSH
19457: LD_INT 6
19459: PPUSH
19460: LD_INT 0
19462: PPUSH
19463: CALL_OW 50
// end ;
19467: GO 19368
19469: POP
19470: POP
// for i = 1 to team do
19471: LD_ADDR_VAR 0 2
19475: PUSH
19476: DOUBLE
19477: LD_INT 1
19479: DEC
19480: ST_TO_ADDR
19481: LD_VAR 0 5
19485: PUSH
19486: FOR_TO
19487: IFFALSE 19584
// begin if FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) then
19489: LD_INT 22
19491: PUSH
19492: LD_INT 2
19494: PUSH
19495: EMPTY
19496: LIST
19497: LIST
19498: PUSH
19499: LD_INT 58
19501: PUSH
19502: EMPTY
19503: LIST
19504: PUSH
19505: EMPTY
19506: LIST
19507: LIST
19508: PPUSH
19509: CALL_OW 69
19513: IFFALSE 19561
// PlaceHumanInUnit ( team [ i ] , FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) [ 1 ] ) else
19515: LD_VAR 0 5
19519: PUSH
19520: LD_VAR 0 2
19524: ARRAY
19525: PPUSH
19526: LD_INT 22
19528: PUSH
19529: LD_INT 2
19531: PUSH
19532: EMPTY
19533: LIST
19534: LIST
19535: PUSH
19536: LD_INT 58
19538: PUSH
19539: EMPTY
19540: LIST
19541: PUSH
19542: EMPTY
19543: LIST
19544: LIST
19545: PPUSH
19546: CALL_OW 69
19550: PUSH
19551: LD_INT 1
19553: ARRAY
19554: PPUSH
19555: CALL_OW 52
19559: GO 19582
// PlaceUnitArea ( team [ i ] , center_resp , false ) ;
19561: LD_VAR 0 5
19565: PUSH
19566: LD_VAR 0 2
19570: ARRAY
19571: PPUSH
19572: LD_INT 16
19574: PPUSH
19575: LD_INT 0
19577: PPUSH
19578: CALL_OW 49
// end ;
19582: GO 19486
19584: POP
19585: POP
// uc_side := 0 ;
19586: LD_ADDR_OWVAR 20
19590: PUSH
19591: LD_INT 0
19593: ST_TO_ADDR
// uc_nation := 0 ;
19594: LD_ADDR_OWVAR 21
19598: PUSH
19599: LD_INT 0
19601: ST_TO_ADDR
// vc_chassis := 31 ;
19602: LD_ADDR_OWVAR 37
19606: PUSH
19607: LD_INT 31
19609: ST_TO_ADDR
// vc_control := control_rider ;
19610: LD_ADDR_OWVAR 38
19614: PUSH
19615: LD_INT 4
19617: ST_TO_ADDR
// PlaceUnitXY ( CreateVehicle , 96 , 20 , false ) ;
19618: CALL_OW 45
19622: PPUSH
19623: LD_INT 96
19625: PPUSH
19626: LD_INT 20
19628: PPUSH
19629: LD_INT 0
19631: PPUSH
19632: CALL_OW 48
// end ; end_of_file end_of_file
19636: LD_VAR 0 1
19640: RET
// every 0 0$1 do
19641: GO 19643
19643: DISABLE
// begin enable ;
19644: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19645: LD_STRING updateTimer(
19647: PUSH
19648: LD_OWVAR 1
19652: STR
19653: PUSH
19654: LD_STRING );
19656: STR
19657: PPUSH
19658: CALL_OW 559
// end ;
19662: END
// export function SOS_MapStart ( ) ; begin
19663: LD_INT 0
19665: PPUSH
// if streamModeActive then
19666: LD_EXP 60
19670: IFFALSE 19679
// DefineStreamItems ( true ) ;
19672: LD_INT 1
19674: PPUSH
19675: CALL 21333 0 1
// UpdateFactoryWaypoints ( ) ;
19679: CALL 34194 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19683: CALL 34451 0 0
// end ;
19687: LD_VAR 0 1
19691: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19692: LD_INT 0
19694: PPUSH
// if p2 = 100 then
19695: LD_VAR 0 2
19699: PUSH
19700: LD_INT 100
19702: EQUAL
19703: IFFALSE 20706
// begin if not StreamModeActive then
19705: LD_EXP 60
19709: NOT
19710: IFFALSE 19720
// StreamModeActive := true ;
19712: LD_ADDR_EXP 60
19716: PUSH
19717: LD_INT 1
19719: ST_TO_ADDR
// if p3 = 0 then
19720: LD_VAR 0 3
19724: PUSH
19725: LD_INT 0
19727: EQUAL
19728: IFFALSE 19734
// InitStreamMode ;
19730: CALL 20869 0 0
// if p3 = 1 then
19734: LD_VAR 0 3
19738: PUSH
19739: LD_INT 1
19741: EQUAL
19742: IFFALSE 19752
// sRocket := true ;
19744: LD_ADDR_EXP 65
19748: PUSH
19749: LD_INT 1
19751: ST_TO_ADDR
// if p3 = 2 then
19752: LD_VAR 0 3
19756: PUSH
19757: LD_INT 2
19759: EQUAL
19760: IFFALSE 19770
// sSpeed := true ;
19762: LD_ADDR_EXP 64
19766: PUSH
19767: LD_INT 1
19769: ST_TO_ADDR
// if p3 = 3 then
19770: LD_VAR 0 3
19774: PUSH
19775: LD_INT 3
19777: EQUAL
19778: IFFALSE 19788
// sEngine := true ;
19780: LD_ADDR_EXP 66
19784: PUSH
19785: LD_INT 1
19787: ST_TO_ADDR
// if p3 = 4 then
19788: LD_VAR 0 3
19792: PUSH
19793: LD_INT 4
19795: EQUAL
19796: IFFALSE 19806
// sSpec := true ;
19798: LD_ADDR_EXP 63
19802: PUSH
19803: LD_INT 1
19805: ST_TO_ADDR
// if p3 = 5 then
19806: LD_VAR 0 3
19810: PUSH
19811: LD_INT 5
19813: EQUAL
19814: IFFALSE 19824
// sLevel := true ;
19816: LD_ADDR_EXP 67
19820: PUSH
19821: LD_INT 1
19823: ST_TO_ADDR
// if p3 = 6 then
19824: LD_VAR 0 3
19828: PUSH
19829: LD_INT 6
19831: EQUAL
19832: IFFALSE 19842
// sArmoury := true ;
19834: LD_ADDR_EXP 68
19838: PUSH
19839: LD_INT 1
19841: ST_TO_ADDR
// if p3 = 7 then
19842: LD_VAR 0 3
19846: PUSH
19847: LD_INT 7
19849: EQUAL
19850: IFFALSE 19860
// sRadar := true ;
19852: LD_ADDR_EXP 69
19856: PUSH
19857: LD_INT 1
19859: ST_TO_ADDR
// if p3 = 8 then
19860: LD_VAR 0 3
19864: PUSH
19865: LD_INT 8
19867: EQUAL
19868: IFFALSE 19878
// sBunker := true ;
19870: LD_ADDR_EXP 70
19874: PUSH
19875: LD_INT 1
19877: ST_TO_ADDR
// if p3 = 9 then
19878: LD_VAR 0 3
19882: PUSH
19883: LD_INT 9
19885: EQUAL
19886: IFFALSE 19896
// sHack := true ;
19888: LD_ADDR_EXP 71
19892: PUSH
19893: LD_INT 1
19895: ST_TO_ADDR
// if p3 = 10 then
19896: LD_VAR 0 3
19900: PUSH
19901: LD_INT 10
19903: EQUAL
19904: IFFALSE 19914
// sFire := true ;
19906: LD_ADDR_EXP 72
19910: PUSH
19911: LD_INT 1
19913: ST_TO_ADDR
// if p3 = 11 then
19914: LD_VAR 0 3
19918: PUSH
19919: LD_INT 11
19921: EQUAL
19922: IFFALSE 19932
// sRefresh := true ;
19924: LD_ADDR_EXP 73
19928: PUSH
19929: LD_INT 1
19931: ST_TO_ADDR
// if p3 = 12 then
19932: LD_VAR 0 3
19936: PUSH
19937: LD_INT 12
19939: EQUAL
19940: IFFALSE 19950
// sExp := true ;
19942: LD_ADDR_EXP 74
19946: PUSH
19947: LD_INT 1
19949: ST_TO_ADDR
// if p3 = 13 then
19950: LD_VAR 0 3
19954: PUSH
19955: LD_INT 13
19957: EQUAL
19958: IFFALSE 19968
// sDepot := true ;
19960: LD_ADDR_EXP 75
19964: PUSH
19965: LD_INT 1
19967: ST_TO_ADDR
// if p3 = 14 then
19968: LD_VAR 0 3
19972: PUSH
19973: LD_INT 14
19975: EQUAL
19976: IFFALSE 19986
// sFlag := true ;
19978: LD_ADDR_EXP 76
19982: PUSH
19983: LD_INT 1
19985: ST_TO_ADDR
// if p3 = 15 then
19986: LD_VAR 0 3
19990: PUSH
19991: LD_INT 15
19993: EQUAL
19994: IFFALSE 20004
// sKamikadze := true ;
19996: LD_ADDR_EXP 84
20000: PUSH
20001: LD_INT 1
20003: ST_TO_ADDR
// if p3 = 16 then
20004: LD_VAR 0 3
20008: PUSH
20009: LD_INT 16
20011: EQUAL
20012: IFFALSE 20022
// sTroll := true ;
20014: LD_ADDR_EXP 85
20018: PUSH
20019: LD_INT 1
20021: ST_TO_ADDR
// if p3 = 17 then
20022: LD_VAR 0 3
20026: PUSH
20027: LD_INT 17
20029: EQUAL
20030: IFFALSE 20040
// sSlow := true ;
20032: LD_ADDR_EXP 86
20036: PUSH
20037: LD_INT 1
20039: ST_TO_ADDR
// if p3 = 18 then
20040: LD_VAR 0 3
20044: PUSH
20045: LD_INT 18
20047: EQUAL
20048: IFFALSE 20058
// sLack := true ;
20050: LD_ADDR_EXP 87
20054: PUSH
20055: LD_INT 1
20057: ST_TO_ADDR
// if p3 = 19 then
20058: LD_VAR 0 3
20062: PUSH
20063: LD_INT 19
20065: EQUAL
20066: IFFALSE 20076
// sTank := true ;
20068: LD_ADDR_EXP 89
20072: PUSH
20073: LD_INT 1
20075: ST_TO_ADDR
// if p3 = 20 then
20076: LD_VAR 0 3
20080: PUSH
20081: LD_INT 20
20083: EQUAL
20084: IFFALSE 20094
// sRemote := true ;
20086: LD_ADDR_EXP 90
20090: PUSH
20091: LD_INT 1
20093: ST_TO_ADDR
// if p3 = 21 then
20094: LD_VAR 0 3
20098: PUSH
20099: LD_INT 21
20101: EQUAL
20102: IFFALSE 20112
// sPowell := true ;
20104: LD_ADDR_EXP 91
20108: PUSH
20109: LD_INT 1
20111: ST_TO_ADDR
// if p3 = 22 then
20112: LD_VAR 0 3
20116: PUSH
20117: LD_INT 22
20119: EQUAL
20120: IFFALSE 20130
// sTeleport := true ;
20122: LD_ADDR_EXP 94
20126: PUSH
20127: LD_INT 1
20129: ST_TO_ADDR
// if p3 = 23 then
20130: LD_VAR 0 3
20134: PUSH
20135: LD_INT 23
20137: EQUAL
20138: IFFALSE 20148
// sOilTower := true ;
20140: LD_ADDR_EXP 96
20144: PUSH
20145: LD_INT 1
20147: ST_TO_ADDR
// if p3 = 24 then
20148: LD_VAR 0 3
20152: PUSH
20153: LD_INT 24
20155: EQUAL
20156: IFFALSE 20166
// sShovel := true ;
20158: LD_ADDR_EXP 97
20162: PUSH
20163: LD_INT 1
20165: ST_TO_ADDR
// if p3 = 25 then
20166: LD_VAR 0 3
20170: PUSH
20171: LD_INT 25
20173: EQUAL
20174: IFFALSE 20184
// sSheik := true ;
20176: LD_ADDR_EXP 98
20180: PUSH
20181: LD_INT 1
20183: ST_TO_ADDR
// if p3 = 26 then
20184: LD_VAR 0 3
20188: PUSH
20189: LD_INT 26
20191: EQUAL
20192: IFFALSE 20202
// sEarthquake := true ;
20194: LD_ADDR_EXP 100
20198: PUSH
20199: LD_INT 1
20201: ST_TO_ADDR
// if p3 = 27 then
20202: LD_VAR 0 3
20206: PUSH
20207: LD_INT 27
20209: EQUAL
20210: IFFALSE 20220
// sAI := true ;
20212: LD_ADDR_EXP 101
20216: PUSH
20217: LD_INT 1
20219: ST_TO_ADDR
// if p3 = 28 then
20220: LD_VAR 0 3
20224: PUSH
20225: LD_INT 28
20227: EQUAL
20228: IFFALSE 20238
// sCargo := true ;
20230: LD_ADDR_EXP 104
20234: PUSH
20235: LD_INT 1
20237: ST_TO_ADDR
// if p3 = 29 then
20238: LD_VAR 0 3
20242: PUSH
20243: LD_INT 29
20245: EQUAL
20246: IFFALSE 20256
// sDLaser := true ;
20248: LD_ADDR_EXP 105
20252: PUSH
20253: LD_INT 1
20255: ST_TO_ADDR
// if p3 = 30 then
20256: LD_VAR 0 3
20260: PUSH
20261: LD_INT 30
20263: EQUAL
20264: IFFALSE 20274
// sExchange := true ;
20266: LD_ADDR_EXP 106
20270: PUSH
20271: LD_INT 1
20273: ST_TO_ADDR
// if p3 = 31 then
20274: LD_VAR 0 3
20278: PUSH
20279: LD_INT 31
20281: EQUAL
20282: IFFALSE 20292
// sFac := true ;
20284: LD_ADDR_EXP 107
20288: PUSH
20289: LD_INT 1
20291: ST_TO_ADDR
// if p3 = 32 then
20292: LD_VAR 0 3
20296: PUSH
20297: LD_INT 32
20299: EQUAL
20300: IFFALSE 20310
// sPower := true ;
20302: LD_ADDR_EXP 108
20306: PUSH
20307: LD_INT 1
20309: ST_TO_ADDR
// if p3 = 33 then
20310: LD_VAR 0 3
20314: PUSH
20315: LD_INT 33
20317: EQUAL
20318: IFFALSE 20328
// sRandom := true ;
20320: LD_ADDR_EXP 109
20324: PUSH
20325: LD_INT 1
20327: ST_TO_ADDR
// if p3 = 34 then
20328: LD_VAR 0 3
20332: PUSH
20333: LD_INT 34
20335: EQUAL
20336: IFFALSE 20346
// sShield := true ;
20338: LD_ADDR_EXP 110
20342: PUSH
20343: LD_INT 1
20345: ST_TO_ADDR
// if p3 = 35 then
20346: LD_VAR 0 3
20350: PUSH
20351: LD_INT 35
20353: EQUAL
20354: IFFALSE 20364
// sTime := true ;
20356: LD_ADDR_EXP 111
20360: PUSH
20361: LD_INT 1
20363: ST_TO_ADDR
// if p3 = 36 then
20364: LD_VAR 0 3
20368: PUSH
20369: LD_INT 36
20371: EQUAL
20372: IFFALSE 20382
// sTools := true ;
20374: LD_ADDR_EXP 112
20378: PUSH
20379: LD_INT 1
20381: ST_TO_ADDR
// if p3 = 101 then
20382: LD_VAR 0 3
20386: PUSH
20387: LD_INT 101
20389: EQUAL
20390: IFFALSE 20400
// sSold := true ;
20392: LD_ADDR_EXP 77
20396: PUSH
20397: LD_INT 1
20399: ST_TO_ADDR
// if p3 = 102 then
20400: LD_VAR 0 3
20404: PUSH
20405: LD_INT 102
20407: EQUAL
20408: IFFALSE 20418
// sDiff := true ;
20410: LD_ADDR_EXP 78
20414: PUSH
20415: LD_INT 1
20417: ST_TO_ADDR
// if p3 = 103 then
20418: LD_VAR 0 3
20422: PUSH
20423: LD_INT 103
20425: EQUAL
20426: IFFALSE 20436
// sFog := true ;
20428: LD_ADDR_EXP 81
20432: PUSH
20433: LD_INT 1
20435: ST_TO_ADDR
// if p3 = 104 then
20436: LD_VAR 0 3
20440: PUSH
20441: LD_INT 104
20443: EQUAL
20444: IFFALSE 20454
// sReset := true ;
20446: LD_ADDR_EXP 82
20450: PUSH
20451: LD_INT 1
20453: ST_TO_ADDR
// if p3 = 105 then
20454: LD_VAR 0 3
20458: PUSH
20459: LD_INT 105
20461: EQUAL
20462: IFFALSE 20472
// sSun := true ;
20464: LD_ADDR_EXP 83
20468: PUSH
20469: LD_INT 1
20471: ST_TO_ADDR
// if p3 = 106 then
20472: LD_VAR 0 3
20476: PUSH
20477: LD_INT 106
20479: EQUAL
20480: IFFALSE 20490
// sTiger := true ;
20482: LD_ADDR_EXP 79
20486: PUSH
20487: LD_INT 1
20489: ST_TO_ADDR
// if p3 = 107 then
20490: LD_VAR 0 3
20494: PUSH
20495: LD_INT 107
20497: EQUAL
20498: IFFALSE 20508
// sBomb := true ;
20500: LD_ADDR_EXP 80
20504: PUSH
20505: LD_INT 1
20507: ST_TO_ADDR
// if p3 = 108 then
20508: LD_VAR 0 3
20512: PUSH
20513: LD_INT 108
20515: EQUAL
20516: IFFALSE 20526
// sWound := true ;
20518: LD_ADDR_EXP 88
20522: PUSH
20523: LD_INT 1
20525: ST_TO_ADDR
// if p3 = 109 then
20526: LD_VAR 0 3
20530: PUSH
20531: LD_INT 109
20533: EQUAL
20534: IFFALSE 20544
// sBetray := true ;
20536: LD_ADDR_EXP 92
20540: PUSH
20541: LD_INT 1
20543: ST_TO_ADDR
// if p3 = 110 then
20544: LD_VAR 0 3
20548: PUSH
20549: LD_INT 110
20551: EQUAL
20552: IFFALSE 20562
// sContamin := true ;
20554: LD_ADDR_EXP 93
20558: PUSH
20559: LD_INT 1
20561: ST_TO_ADDR
// if p3 = 111 then
20562: LD_VAR 0 3
20566: PUSH
20567: LD_INT 111
20569: EQUAL
20570: IFFALSE 20580
// sOil := true ;
20572: LD_ADDR_EXP 95
20576: PUSH
20577: LD_INT 1
20579: ST_TO_ADDR
// if p3 = 112 then
20580: LD_VAR 0 3
20584: PUSH
20585: LD_INT 112
20587: EQUAL
20588: IFFALSE 20598
// sStu := true ;
20590: LD_ADDR_EXP 99
20594: PUSH
20595: LD_INT 1
20597: ST_TO_ADDR
// if p3 = 113 then
20598: LD_VAR 0 3
20602: PUSH
20603: LD_INT 113
20605: EQUAL
20606: IFFALSE 20616
// sBazooka := true ;
20608: LD_ADDR_EXP 102
20612: PUSH
20613: LD_INT 1
20615: ST_TO_ADDR
// if p3 = 114 then
20616: LD_VAR 0 3
20620: PUSH
20621: LD_INT 114
20623: EQUAL
20624: IFFALSE 20634
// sMortar := true ;
20626: LD_ADDR_EXP 103
20630: PUSH
20631: LD_INT 1
20633: ST_TO_ADDR
// if p3 = 115 then
20634: LD_VAR 0 3
20638: PUSH
20639: LD_INT 115
20641: EQUAL
20642: IFFALSE 20652
// sRanger := true ;
20644: LD_ADDR_EXP 113
20648: PUSH
20649: LD_INT 1
20651: ST_TO_ADDR
// if p3 = 116 then
20652: LD_VAR 0 3
20656: PUSH
20657: LD_INT 116
20659: EQUAL
20660: IFFALSE 20670
// sComputer := true ;
20662: LD_ADDR_EXP 114
20666: PUSH
20667: LD_INT 1
20669: ST_TO_ADDR
// if p3 = 117 then
20670: LD_VAR 0 3
20674: PUSH
20675: LD_INT 117
20677: EQUAL
20678: IFFALSE 20688
// s30 := true ;
20680: LD_ADDR_EXP 115
20684: PUSH
20685: LD_INT 1
20687: ST_TO_ADDR
// if p3 = 118 then
20688: LD_VAR 0 3
20692: PUSH
20693: LD_INT 118
20695: EQUAL
20696: IFFALSE 20706
// s60 := true ;
20698: LD_ADDR_EXP 116
20702: PUSH
20703: LD_INT 1
20705: ST_TO_ADDR
// end ; if p2 = 101 then
20706: LD_VAR 0 2
20710: PUSH
20711: LD_INT 101
20713: EQUAL
20714: IFFALSE 20842
// begin case p3 of 1 :
20716: LD_VAR 0 3
20720: PUSH
20721: LD_INT 1
20723: DOUBLE
20724: EQUAL
20725: IFTRUE 20729
20727: GO 20736
20729: POP
// hHackUnlimitedResources ; 2 :
20730: CALL 32940 0 0
20734: GO 20842
20736: LD_INT 2
20738: DOUBLE
20739: EQUAL
20740: IFTRUE 20744
20742: GO 20751
20744: POP
// hHackSetLevel10 ; 3 :
20745: CALL 33073 0 0
20749: GO 20842
20751: LD_INT 3
20753: DOUBLE
20754: EQUAL
20755: IFTRUE 20759
20757: GO 20766
20759: POP
// hHackSetLevel10YourUnits ; 4 :
20760: CALL 33158 0 0
20764: GO 20842
20766: LD_INT 4
20768: DOUBLE
20769: EQUAL
20770: IFTRUE 20774
20772: GO 20781
20774: POP
// hHackInvincible ; 5 :
20775: CALL 33606 0 0
20779: GO 20842
20781: LD_INT 5
20783: DOUBLE
20784: EQUAL
20785: IFTRUE 20789
20787: GO 20796
20789: POP
// hHackInvisible ; 6 :
20790: CALL 33717 0 0
20794: GO 20842
20796: LD_INT 6
20798: DOUBLE
20799: EQUAL
20800: IFTRUE 20804
20802: GO 20811
20804: POP
// hHackChangeYourSide ; 7 :
20805: CALL 33774 0 0
20809: GO 20842
20811: LD_INT 7
20813: DOUBLE
20814: EQUAL
20815: IFTRUE 20819
20817: GO 20826
20819: POP
// hHackChangeUnitSide ; 8 :
20820: CALL 33816 0 0
20824: GO 20842
20826: LD_INT 8
20828: DOUBLE
20829: EQUAL
20830: IFTRUE 20834
20832: GO 20841
20834: POP
// hHackFog ; end ;
20835: CALL 33917 0 0
20839: GO 20842
20841: POP
// end ; end ;
20842: LD_VAR 0 7
20846: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
20847: GO 20849
20849: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20850: LD_STRING initStreamRollete();
20852: PPUSH
20853: CALL_OW 559
// InitStreamMode ;
20857: CALL 20869 0 0
// DefineStreamItems ( false ) ;
20861: LD_INT 0
20863: PPUSH
20864: CALL 21333 0 1
// end ;
20868: END
// function InitStreamMode ; begin
20869: LD_INT 0
20871: PPUSH
// streamModeActive := false ;
20872: LD_ADDR_EXP 60
20876: PUSH
20877: LD_INT 0
20879: ST_TO_ADDR
// normalCounter := 36 ;
20880: LD_ADDR_EXP 61
20884: PUSH
20885: LD_INT 36
20887: ST_TO_ADDR
// hardcoreCounter := 18 ;
20888: LD_ADDR_EXP 62
20892: PUSH
20893: LD_INT 18
20895: ST_TO_ADDR
// sRocket := false ;
20896: LD_ADDR_EXP 65
20900: PUSH
20901: LD_INT 0
20903: ST_TO_ADDR
// sSpeed := false ;
20904: LD_ADDR_EXP 64
20908: PUSH
20909: LD_INT 0
20911: ST_TO_ADDR
// sEngine := false ;
20912: LD_ADDR_EXP 66
20916: PUSH
20917: LD_INT 0
20919: ST_TO_ADDR
// sSpec := false ;
20920: LD_ADDR_EXP 63
20924: PUSH
20925: LD_INT 0
20927: ST_TO_ADDR
// sLevel := false ;
20928: LD_ADDR_EXP 67
20932: PUSH
20933: LD_INT 0
20935: ST_TO_ADDR
// sArmoury := false ;
20936: LD_ADDR_EXP 68
20940: PUSH
20941: LD_INT 0
20943: ST_TO_ADDR
// sRadar := false ;
20944: LD_ADDR_EXP 69
20948: PUSH
20949: LD_INT 0
20951: ST_TO_ADDR
// sBunker := false ;
20952: LD_ADDR_EXP 70
20956: PUSH
20957: LD_INT 0
20959: ST_TO_ADDR
// sHack := false ;
20960: LD_ADDR_EXP 71
20964: PUSH
20965: LD_INT 0
20967: ST_TO_ADDR
// sFire := false ;
20968: LD_ADDR_EXP 72
20972: PUSH
20973: LD_INT 0
20975: ST_TO_ADDR
// sRefresh := false ;
20976: LD_ADDR_EXP 73
20980: PUSH
20981: LD_INT 0
20983: ST_TO_ADDR
// sExp := false ;
20984: LD_ADDR_EXP 74
20988: PUSH
20989: LD_INT 0
20991: ST_TO_ADDR
// sDepot := false ;
20992: LD_ADDR_EXP 75
20996: PUSH
20997: LD_INT 0
20999: ST_TO_ADDR
// sFlag := false ;
21000: LD_ADDR_EXP 76
21004: PUSH
21005: LD_INT 0
21007: ST_TO_ADDR
// sKamikadze := false ;
21008: LD_ADDR_EXP 84
21012: PUSH
21013: LD_INT 0
21015: ST_TO_ADDR
// sTroll := false ;
21016: LD_ADDR_EXP 85
21020: PUSH
21021: LD_INT 0
21023: ST_TO_ADDR
// sSlow := false ;
21024: LD_ADDR_EXP 86
21028: PUSH
21029: LD_INT 0
21031: ST_TO_ADDR
// sLack := false ;
21032: LD_ADDR_EXP 87
21036: PUSH
21037: LD_INT 0
21039: ST_TO_ADDR
// sTank := false ;
21040: LD_ADDR_EXP 89
21044: PUSH
21045: LD_INT 0
21047: ST_TO_ADDR
// sRemote := false ;
21048: LD_ADDR_EXP 90
21052: PUSH
21053: LD_INT 0
21055: ST_TO_ADDR
// sPowell := false ;
21056: LD_ADDR_EXP 91
21060: PUSH
21061: LD_INT 0
21063: ST_TO_ADDR
// sTeleport := false ;
21064: LD_ADDR_EXP 94
21068: PUSH
21069: LD_INT 0
21071: ST_TO_ADDR
// sOilTower := false ;
21072: LD_ADDR_EXP 96
21076: PUSH
21077: LD_INT 0
21079: ST_TO_ADDR
// sShovel := false ;
21080: LD_ADDR_EXP 97
21084: PUSH
21085: LD_INT 0
21087: ST_TO_ADDR
// sSheik := false ;
21088: LD_ADDR_EXP 98
21092: PUSH
21093: LD_INT 0
21095: ST_TO_ADDR
// sEarthquake := false ;
21096: LD_ADDR_EXP 100
21100: PUSH
21101: LD_INT 0
21103: ST_TO_ADDR
// sAI := false ;
21104: LD_ADDR_EXP 101
21108: PUSH
21109: LD_INT 0
21111: ST_TO_ADDR
// sCargo := false ;
21112: LD_ADDR_EXP 104
21116: PUSH
21117: LD_INT 0
21119: ST_TO_ADDR
// sDLaser := false ;
21120: LD_ADDR_EXP 105
21124: PUSH
21125: LD_INT 0
21127: ST_TO_ADDR
// sExchange := false ;
21128: LD_ADDR_EXP 106
21132: PUSH
21133: LD_INT 0
21135: ST_TO_ADDR
// sFac := false ;
21136: LD_ADDR_EXP 107
21140: PUSH
21141: LD_INT 0
21143: ST_TO_ADDR
// sPower := false ;
21144: LD_ADDR_EXP 108
21148: PUSH
21149: LD_INT 0
21151: ST_TO_ADDR
// sRandom := false ;
21152: LD_ADDR_EXP 109
21156: PUSH
21157: LD_INT 0
21159: ST_TO_ADDR
// sShield := false ;
21160: LD_ADDR_EXP 110
21164: PUSH
21165: LD_INT 0
21167: ST_TO_ADDR
// sTime := false ;
21168: LD_ADDR_EXP 111
21172: PUSH
21173: LD_INT 0
21175: ST_TO_ADDR
// sTools := false ;
21176: LD_ADDR_EXP 112
21180: PUSH
21181: LD_INT 0
21183: ST_TO_ADDR
// sSold := false ;
21184: LD_ADDR_EXP 77
21188: PUSH
21189: LD_INT 0
21191: ST_TO_ADDR
// sDiff := false ;
21192: LD_ADDR_EXP 78
21196: PUSH
21197: LD_INT 0
21199: ST_TO_ADDR
// sFog := false ;
21200: LD_ADDR_EXP 81
21204: PUSH
21205: LD_INT 0
21207: ST_TO_ADDR
// sReset := false ;
21208: LD_ADDR_EXP 82
21212: PUSH
21213: LD_INT 0
21215: ST_TO_ADDR
// sSun := false ;
21216: LD_ADDR_EXP 83
21220: PUSH
21221: LD_INT 0
21223: ST_TO_ADDR
// sTiger := false ;
21224: LD_ADDR_EXP 79
21228: PUSH
21229: LD_INT 0
21231: ST_TO_ADDR
// sBomb := false ;
21232: LD_ADDR_EXP 80
21236: PUSH
21237: LD_INT 0
21239: ST_TO_ADDR
// sWound := false ;
21240: LD_ADDR_EXP 88
21244: PUSH
21245: LD_INT 0
21247: ST_TO_ADDR
// sBetray := false ;
21248: LD_ADDR_EXP 92
21252: PUSH
21253: LD_INT 0
21255: ST_TO_ADDR
// sContamin := false ;
21256: LD_ADDR_EXP 93
21260: PUSH
21261: LD_INT 0
21263: ST_TO_ADDR
// sOil := false ;
21264: LD_ADDR_EXP 95
21268: PUSH
21269: LD_INT 0
21271: ST_TO_ADDR
// sStu := false ;
21272: LD_ADDR_EXP 99
21276: PUSH
21277: LD_INT 0
21279: ST_TO_ADDR
// sBazooka := false ;
21280: LD_ADDR_EXP 102
21284: PUSH
21285: LD_INT 0
21287: ST_TO_ADDR
// sMortar := false ;
21288: LD_ADDR_EXP 103
21292: PUSH
21293: LD_INT 0
21295: ST_TO_ADDR
// sRanger := false ;
21296: LD_ADDR_EXP 113
21300: PUSH
21301: LD_INT 0
21303: ST_TO_ADDR
// sComputer := false ;
21304: LD_ADDR_EXP 114
21308: PUSH
21309: LD_INT 0
21311: ST_TO_ADDR
// s30 := false ;
21312: LD_ADDR_EXP 115
21316: PUSH
21317: LD_INT 0
21319: ST_TO_ADDR
// s60 := false ;
21320: LD_ADDR_EXP 116
21324: PUSH
21325: LD_INT 0
21327: ST_TO_ADDR
// end ;
21328: LD_VAR 0 1
21332: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21333: LD_INT 0
21335: PPUSH
21336: PPUSH
21337: PPUSH
21338: PPUSH
21339: PPUSH
21340: PPUSH
21341: PPUSH
// result := [ ] ;
21342: LD_ADDR_VAR 0 2
21346: PUSH
21347: EMPTY
21348: ST_TO_ADDR
// if campaign_id = 1 then
21349: LD_OWVAR 69
21353: PUSH
21354: LD_INT 1
21356: EQUAL
21357: IFFALSE 24523
// begin case mission_number of 1 :
21359: LD_OWVAR 70
21363: PUSH
21364: LD_INT 1
21366: DOUBLE
21367: EQUAL
21368: IFTRUE 21372
21370: GO 21448
21372: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21373: LD_ADDR_VAR 0 2
21377: PUSH
21378: LD_INT 2
21380: PUSH
21381: LD_INT 4
21383: PUSH
21384: LD_INT 11
21386: PUSH
21387: LD_INT 12
21389: PUSH
21390: LD_INT 15
21392: PUSH
21393: LD_INT 16
21395: PUSH
21396: LD_INT 22
21398: PUSH
21399: LD_INT 23
21401: PUSH
21402: LD_INT 26
21404: PUSH
21405: EMPTY
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: PUSH
21416: LD_INT 101
21418: PUSH
21419: LD_INT 102
21421: PUSH
21422: LD_INT 106
21424: PUSH
21425: LD_INT 116
21427: PUSH
21428: LD_INT 117
21430: PUSH
21431: LD_INT 118
21433: PUSH
21434: EMPTY
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: LIST
21440: LIST
21441: PUSH
21442: EMPTY
21443: LIST
21444: LIST
21445: ST_TO_ADDR
21446: GO 24521
21448: LD_INT 2
21450: DOUBLE
21451: EQUAL
21452: IFTRUE 21456
21454: GO 21540
21456: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21457: LD_ADDR_VAR 0 2
21461: PUSH
21462: LD_INT 2
21464: PUSH
21465: LD_INT 4
21467: PUSH
21468: LD_INT 11
21470: PUSH
21471: LD_INT 12
21473: PUSH
21474: LD_INT 15
21476: PUSH
21477: LD_INT 16
21479: PUSH
21480: LD_INT 22
21482: PUSH
21483: LD_INT 23
21485: PUSH
21486: LD_INT 26
21488: PUSH
21489: EMPTY
21490: LIST
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: PUSH
21500: LD_INT 101
21502: PUSH
21503: LD_INT 102
21505: PUSH
21506: LD_INT 105
21508: PUSH
21509: LD_INT 106
21511: PUSH
21512: LD_INT 108
21514: PUSH
21515: LD_INT 116
21517: PUSH
21518: LD_INT 117
21520: PUSH
21521: LD_INT 118
21523: PUSH
21524: EMPTY
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: PUSH
21534: EMPTY
21535: LIST
21536: LIST
21537: ST_TO_ADDR
21538: GO 24521
21540: LD_INT 3
21542: DOUBLE
21543: EQUAL
21544: IFTRUE 21548
21546: GO 21636
21548: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21549: LD_ADDR_VAR 0 2
21553: PUSH
21554: LD_INT 2
21556: PUSH
21557: LD_INT 4
21559: PUSH
21560: LD_INT 5
21562: PUSH
21563: LD_INT 11
21565: PUSH
21566: LD_INT 12
21568: PUSH
21569: LD_INT 15
21571: PUSH
21572: LD_INT 16
21574: PUSH
21575: LD_INT 22
21577: PUSH
21578: LD_INT 26
21580: PUSH
21581: LD_INT 36
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: PUSH
21596: LD_INT 101
21598: PUSH
21599: LD_INT 102
21601: PUSH
21602: LD_INT 105
21604: PUSH
21605: LD_INT 106
21607: PUSH
21608: LD_INT 108
21610: PUSH
21611: LD_INT 116
21613: PUSH
21614: LD_INT 117
21616: PUSH
21617: LD_INT 118
21619: PUSH
21620: EMPTY
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: PUSH
21630: EMPTY
21631: LIST
21632: LIST
21633: ST_TO_ADDR
21634: GO 24521
21636: LD_INT 4
21638: DOUBLE
21639: EQUAL
21640: IFTRUE 21644
21642: GO 21740
21644: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21645: LD_ADDR_VAR 0 2
21649: PUSH
21650: LD_INT 2
21652: PUSH
21653: LD_INT 4
21655: PUSH
21656: LD_INT 5
21658: PUSH
21659: LD_INT 8
21661: PUSH
21662: LD_INT 11
21664: PUSH
21665: LD_INT 12
21667: PUSH
21668: LD_INT 15
21670: PUSH
21671: LD_INT 16
21673: PUSH
21674: LD_INT 22
21676: PUSH
21677: LD_INT 23
21679: PUSH
21680: LD_INT 26
21682: PUSH
21683: LD_INT 36
21685: PUSH
21686: EMPTY
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: PUSH
21700: LD_INT 101
21702: PUSH
21703: LD_INT 102
21705: PUSH
21706: LD_INT 105
21708: PUSH
21709: LD_INT 106
21711: PUSH
21712: LD_INT 108
21714: PUSH
21715: LD_INT 116
21717: PUSH
21718: LD_INT 117
21720: PUSH
21721: LD_INT 118
21723: PUSH
21724: EMPTY
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: PUSH
21734: EMPTY
21735: LIST
21736: LIST
21737: ST_TO_ADDR
21738: GO 24521
21740: LD_INT 5
21742: DOUBLE
21743: EQUAL
21744: IFTRUE 21748
21746: GO 21860
21748: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21749: LD_ADDR_VAR 0 2
21753: PUSH
21754: LD_INT 2
21756: PUSH
21757: LD_INT 4
21759: PUSH
21760: LD_INT 5
21762: PUSH
21763: LD_INT 6
21765: PUSH
21766: LD_INT 8
21768: PUSH
21769: LD_INT 11
21771: PUSH
21772: LD_INT 12
21774: PUSH
21775: LD_INT 15
21777: PUSH
21778: LD_INT 16
21780: PUSH
21781: LD_INT 22
21783: PUSH
21784: LD_INT 23
21786: PUSH
21787: LD_INT 25
21789: PUSH
21790: LD_INT 26
21792: PUSH
21793: LD_INT 36
21795: PUSH
21796: EMPTY
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: PUSH
21812: LD_INT 101
21814: PUSH
21815: LD_INT 102
21817: PUSH
21818: LD_INT 105
21820: PUSH
21821: LD_INT 106
21823: PUSH
21824: LD_INT 108
21826: PUSH
21827: LD_INT 109
21829: PUSH
21830: LD_INT 112
21832: PUSH
21833: LD_INT 116
21835: PUSH
21836: LD_INT 117
21838: PUSH
21839: LD_INT 118
21841: PUSH
21842: EMPTY
21843: LIST
21844: LIST
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: PUSH
21854: EMPTY
21855: LIST
21856: LIST
21857: ST_TO_ADDR
21858: GO 24521
21860: LD_INT 6
21862: DOUBLE
21863: EQUAL
21864: IFTRUE 21868
21866: GO 22000
21868: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21869: LD_ADDR_VAR 0 2
21873: PUSH
21874: LD_INT 2
21876: PUSH
21877: LD_INT 4
21879: PUSH
21880: LD_INT 5
21882: PUSH
21883: LD_INT 6
21885: PUSH
21886: LD_INT 8
21888: PUSH
21889: LD_INT 11
21891: PUSH
21892: LD_INT 12
21894: PUSH
21895: LD_INT 15
21897: PUSH
21898: LD_INT 16
21900: PUSH
21901: LD_INT 20
21903: PUSH
21904: LD_INT 21
21906: PUSH
21907: LD_INT 22
21909: PUSH
21910: LD_INT 23
21912: PUSH
21913: LD_INT 25
21915: PUSH
21916: LD_INT 26
21918: PUSH
21919: LD_INT 30
21921: PUSH
21922: LD_INT 31
21924: PUSH
21925: LD_INT 32
21927: PUSH
21928: LD_INT 36
21930: PUSH
21931: EMPTY
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: LIST
21950: LIST
21951: PUSH
21952: LD_INT 101
21954: PUSH
21955: LD_INT 102
21957: PUSH
21958: LD_INT 105
21960: PUSH
21961: LD_INT 106
21963: PUSH
21964: LD_INT 108
21966: PUSH
21967: LD_INT 109
21969: PUSH
21970: LD_INT 112
21972: PUSH
21973: LD_INT 116
21975: PUSH
21976: LD_INT 117
21978: PUSH
21979: LD_INT 118
21981: PUSH
21982: EMPTY
21983: LIST
21984: LIST
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: PUSH
21994: EMPTY
21995: LIST
21996: LIST
21997: ST_TO_ADDR
21998: GO 24521
22000: LD_INT 7
22002: DOUBLE
22003: EQUAL
22004: IFTRUE 22008
22006: GO 22120
22008: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22009: LD_ADDR_VAR 0 2
22013: PUSH
22014: LD_INT 2
22016: PUSH
22017: LD_INT 4
22019: PUSH
22020: LD_INT 5
22022: PUSH
22023: LD_INT 7
22025: PUSH
22026: LD_INT 11
22028: PUSH
22029: LD_INT 12
22031: PUSH
22032: LD_INT 15
22034: PUSH
22035: LD_INT 16
22037: PUSH
22038: LD_INT 20
22040: PUSH
22041: LD_INT 21
22043: PUSH
22044: LD_INT 22
22046: PUSH
22047: LD_INT 23
22049: PUSH
22050: LD_INT 25
22052: PUSH
22053: LD_INT 26
22055: PUSH
22056: EMPTY
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: PUSH
22072: LD_INT 101
22074: PUSH
22075: LD_INT 102
22077: PUSH
22078: LD_INT 103
22080: PUSH
22081: LD_INT 105
22083: PUSH
22084: LD_INT 106
22086: PUSH
22087: LD_INT 108
22089: PUSH
22090: LD_INT 112
22092: PUSH
22093: LD_INT 116
22095: PUSH
22096: LD_INT 117
22098: PUSH
22099: LD_INT 118
22101: PUSH
22102: EMPTY
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: PUSH
22114: EMPTY
22115: LIST
22116: LIST
22117: ST_TO_ADDR
22118: GO 24521
22120: LD_INT 8
22122: DOUBLE
22123: EQUAL
22124: IFTRUE 22128
22126: GO 22268
22128: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22129: LD_ADDR_VAR 0 2
22133: PUSH
22134: LD_INT 2
22136: PUSH
22137: LD_INT 4
22139: PUSH
22140: LD_INT 5
22142: PUSH
22143: LD_INT 6
22145: PUSH
22146: LD_INT 7
22148: PUSH
22149: LD_INT 8
22151: PUSH
22152: LD_INT 11
22154: PUSH
22155: LD_INT 12
22157: PUSH
22158: LD_INT 15
22160: PUSH
22161: LD_INT 16
22163: PUSH
22164: LD_INT 20
22166: PUSH
22167: LD_INT 21
22169: PUSH
22170: LD_INT 22
22172: PUSH
22173: LD_INT 23
22175: PUSH
22176: LD_INT 25
22178: PUSH
22179: LD_INT 26
22181: PUSH
22182: LD_INT 30
22184: PUSH
22185: LD_INT 31
22187: PUSH
22188: LD_INT 32
22190: PUSH
22191: LD_INT 36
22193: PUSH
22194: EMPTY
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: PUSH
22216: LD_INT 101
22218: PUSH
22219: LD_INT 102
22221: PUSH
22222: LD_INT 103
22224: PUSH
22225: LD_INT 105
22227: PUSH
22228: LD_INT 106
22230: PUSH
22231: LD_INT 108
22233: PUSH
22234: LD_INT 109
22236: PUSH
22237: LD_INT 112
22239: PUSH
22240: LD_INT 116
22242: PUSH
22243: LD_INT 117
22245: PUSH
22246: LD_INT 118
22248: PUSH
22249: EMPTY
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: PUSH
22262: EMPTY
22263: LIST
22264: LIST
22265: ST_TO_ADDR
22266: GO 24521
22268: LD_INT 9
22270: DOUBLE
22271: EQUAL
22272: IFTRUE 22276
22274: GO 22424
22276: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22277: LD_ADDR_VAR 0 2
22281: PUSH
22282: LD_INT 2
22284: PUSH
22285: LD_INT 4
22287: PUSH
22288: LD_INT 5
22290: PUSH
22291: LD_INT 6
22293: PUSH
22294: LD_INT 7
22296: PUSH
22297: LD_INT 8
22299: PUSH
22300: LD_INT 11
22302: PUSH
22303: LD_INT 12
22305: PUSH
22306: LD_INT 15
22308: PUSH
22309: LD_INT 16
22311: PUSH
22312: LD_INT 20
22314: PUSH
22315: LD_INT 21
22317: PUSH
22318: LD_INT 22
22320: PUSH
22321: LD_INT 23
22323: PUSH
22324: LD_INT 25
22326: PUSH
22327: LD_INT 26
22329: PUSH
22330: LD_INT 28
22332: PUSH
22333: LD_INT 30
22335: PUSH
22336: LD_INT 31
22338: PUSH
22339: LD_INT 32
22341: PUSH
22342: LD_INT 36
22344: PUSH
22345: EMPTY
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: LIST
22358: LIST
22359: LIST
22360: LIST
22361: LIST
22362: LIST
22363: LIST
22364: LIST
22365: LIST
22366: LIST
22367: PUSH
22368: LD_INT 101
22370: PUSH
22371: LD_INT 102
22373: PUSH
22374: LD_INT 103
22376: PUSH
22377: LD_INT 105
22379: PUSH
22380: LD_INT 106
22382: PUSH
22383: LD_INT 108
22385: PUSH
22386: LD_INT 109
22388: PUSH
22389: LD_INT 112
22391: PUSH
22392: LD_INT 114
22394: PUSH
22395: LD_INT 116
22397: PUSH
22398: LD_INT 117
22400: PUSH
22401: LD_INT 118
22403: PUSH
22404: EMPTY
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: PUSH
22418: EMPTY
22419: LIST
22420: LIST
22421: ST_TO_ADDR
22422: GO 24521
22424: LD_INT 10
22426: DOUBLE
22427: EQUAL
22428: IFTRUE 22432
22430: GO 22628
22432: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22433: LD_ADDR_VAR 0 2
22437: PUSH
22438: LD_INT 2
22440: PUSH
22441: LD_INT 4
22443: PUSH
22444: LD_INT 5
22446: PUSH
22447: LD_INT 6
22449: PUSH
22450: LD_INT 7
22452: PUSH
22453: LD_INT 8
22455: PUSH
22456: LD_INT 9
22458: PUSH
22459: LD_INT 10
22461: PUSH
22462: LD_INT 11
22464: PUSH
22465: LD_INT 12
22467: PUSH
22468: LD_INT 13
22470: PUSH
22471: LD_INT 14
22473: PUSH
22474: LD_INT 15
22476: PUSH
22477: LD_INT 16
22479: PUSH
22480: LD_INT 17
22482: PUSH
22483: LD_INT 18
22485: PUSH
22486: LD_INT 19
22488: PUSH
22489: LD_INT 20
22491: PUSH
22492: LD_INT 21
22494: PUSH
22495: LD_INT 22
22497: PUSH
22498: LD_INT 23
22500: PUSH
22501: LD_INT 24
22503: PUSH
22504: LD_INT 25
22506: PUSH
22507: LD_INT 26
22509: PUSH
22510: LD_INT 28
22512: PUSH
22513: LD_INT 30
22515: PUSH
22516: LD_INT 31
22518: PUSH
22519: LD_INT 32
22521: PUSH
22522: LD_INT 36
22524: PUSH
22525: EMPTY
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: PUSH
22556: LD_INT 101
22558: PUSH
22559: LD_INT 102
22561: PUSH
22562: LD_INT 103
22564: PUSH
22565: LD_INT 104
22567: PUSH
22568: LD_INT 105
22570: PUSH
22571: LD_INT 106
22573: PUSH
22574: LD_INT 107
22576: PUSH
22577: LD_INT 108
22579: PUSH
22580: LD_INT 109
22582: PUSH
22583: LD_INT 110
22585: PUSH
22586: LD_INT 111
22588: PUSH
22589: LD_INT 112
22591: PUSH
22592: LD_INT 114
22594: PUSH
22595: LD_INT 116
22597: PUSH
22598: LD_INT 117
22600: PUSH
22601: LD_INT 118
22603: PUSH
22604: EMPTY
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: PUSH
22622: EMPTY
22623: LIST
22624: LIST
22625: ST_TO_ADDR
22626: GO 24521
22628: LD_INT 11
22630: DOUBLE
22631: EQUAL
22632: IFTRUE 22636
22634: GO 22840
22636: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22637: LD_ADDR_VAR 0 2
22641: PUSH
22642: LD_INT 2
22644: PUSH
22645: LD_INT 3
22647: PUSH
22648: LD_INT 4
22650: PUSH
22651: LD_INT 5
22653: PUSH
22654: LD_INT 6
22656: PUSH
22657: LD_INT 7
22659: PUSH
22660: LD_INT 8
22662: PUSH
22663: LD_INT 9
22665: PUSH
22666: LD_INT 10
22668: PUSH
22669: LD_INT 11
22671: PUSH
22672: LD_INT 12
22674: PUSH
22675: LD_INT 13
22677: PUSH
22678: LD_INT 14
22680: PUSH
22681: LD_INT 15
22683: PUSH
22684: LD_INT 16
22686: PUSH
22687: LD_INT 17
22689: PUSH
22690: LD_INT 18
22692: PUSH
22693: LD_INT 19
22695: PUSH
22696: LD_INT 20
22698: PUSH
22699: LD_INT 21
22701: PUSH
22702: LD_INT 22
22704: PUSH
22705: LD_INT 23
22707: PUSH
22708: LD_INT 24
22710: PUSH
22711: LD_INT 25
22713: PUSH
22714: LD_INT 26
22716: PUSH
22717: LD_INT 28
22719: PUSH
22720: LD_INT 30
22722: PUSH
22723: LD_INT 31
22725: PUSH
22726: LD_INT 32
22728: PUSH
22729: LD_INT 34
22731: PUSH
22732: LD_INT 36
22734: PUSH
22735: EMPTY
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: PUSH
22768: LD_INT 101
22770: PUSH
22771: LD_INT 102
22773: PUSH
22774: LD_INT 103
22776: PUSH
22777: LD_INT 104
22779: PUSH
22780: LD_INT 105
22782: PUSH
22783: LD_INT 106
22785: PUSH
22786: LD_INT 107
22788: PUSH
22789: LD_INT 108
22791: PUSH
22792: LD_INT 109
22794: PUSH
22795: LD_INT 110
22797: PUSH
22798: LD_INT 111
22800: PUSH
22801: LD_INT 112
22803: PUSH
22804: LD_INT 114
22806: PUSH
22807: LD_INT 116
22809: PUSH
22810: LD_INT 117
22812: PUSH
22813: LD_INT 118
22815: PUSH
22816: EMPTY
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: PUSH
22834: EMPTY
22835: LIST
22836: LIST
22837: ST_TO_ADDR
22838: GO 24521
22840: LD_INT 12
22842: DOUBLE
22843: EQUAL
22844: IFTRUE 22848
22846: GO 23068
22848: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22849: LD_ADDR_VAR 0 2
22853: PUSH
22854: LD_INT 1
22856: PUSH
22857: LD_INT 2
22859: PUSH
22860: LD_INT 3
22862: PUSH
22863: LD_INT 4
22865: PUSH
22866: LD_INT 5
22868: PUSH
22869: LD_INT 6
22871: PUSH
22872: LD_INT 7
22874: PUSH
22875: LD_INT 8
22877: PUSH
22878: LD_INT 9
22880: PUSH
22881: LD_INT 10
22883: PUSH
22884: LD_INT 11
22886: PUSH
22887: LD_INT 12
22889: PUSH
22890: LD_INT 13
22892: PUSH
22893: LD_INT 14
22895: PUSH
22896: LD_INT 15
22898: PUSH
22899: LD_INT 16
22901: PUSH
22902: LD_INT 17
22904: PUSH
22905: LD_INT 18
22907: PUSH
22908: LD_INT 19
22910: PUSH
22911: LD_INT 20
22913: PUSH
22914: LD_INT 21
22916: PUSH
22917: LD_INT 22
22919: PUSH
22920: LD_INT 23
22922: PUSH
22923: LD_INT 24
22925: PUSH
22926: LD_INT 25
22928: PUSH
22929: LD_INT 26
22931: PUSH
22932: LD_INT 27
22934: PUSH
22935: LD_INT 28
22937: PUSH
22938: LD_INT 30
22940: PUSH
22941: LD_INT 31
22943: PUSH
22944: LD_INT 32
22946: PUSH
22947: LD_INT 33
22949: PUSH
22950: LD_INT 34
22952: PUSH
22953: LD_INT 36
22955: PUSH
22956: EMPTY
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: PUSH
22992: LD_INT 101
22994: PUSH
22995: LD_INT 102
22997: PUSH
22998: LD_INT 103
23000: PUSH
23001: LD_INT 104
23003: PUSH
23004: LD_INT 105
23006: PUSH
23007: LD_INT 106
23009: PUSH
23010: LD_INT 107
23012: PUSH
23013: LD_INT 108
23015: PUSH
23016: LD_INT 109
23018: PUSH
23019: LD_INT 110
23021: PUSH
23022: LD_INT 111
23024: PUSH
23025: LD_INT 112
23027: PUSH
23028: LD_INT 113
23030: PUSH
23031: LD_INT 114
23033: PUSH
23034: LD_INT 116
23036: PUSH
23037: LD_INT 117
23039: PUSH
23040: LD_INT 118
23042: PUSH
23043: EMPTY
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: PUSH
23062: EMPTY
23063: LIST
23064: LIST
23065: ST_TO_ADDR
23066: GO 24521
23068: LD_INT 13
23070: DOUBLE
23071: EQUAL
23072: IFTRUE 23076
23074: GO 23284
23076: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23077: LD_ADDR_VAR 0 2
23081: PUSH
23082: LD_INT 1
23084: PUSH
23085: LD_INT 2
23087: PUSH
23088: LD_INT 3
23090: PUSH
23091: LD_INT 4
23093: PUSH
23094: LD_INT 5
23096: PUSH
23097: LD_INT 8
23099: PUSH
23100: LD_INT 9
23102: PUSH
23103: LD_INT 10
23105: PUSH
23106: LD_INT 11
23108: PUSH
23109: LD_INT 12
23111: PUSH
23112: LD_INT 14
23114: PUSH
23115: LD_INT 15
23117: PUSH
23118: LD_INT 16
23120: PUSH
23121: LD_INT 17
23123: PUSH
23124: LD_INT 18
23126: PUSH
23127: LD_INT 19
23129: PUSH
23130: LD_INT 20
23132: PUSH
23133: LD_INT 21
23135: PUSH
23136: LD_INT 22
23138: PUSH
23139: LD_INT 23
23141: PUSH
23142: LD_INT 24
23144: PUSH
23145: LD_INT 25
23147: PUSH
23148: LD_INT 26
23150: PUSH
23151: LD_INT 27
23153: PUSH
23154: LD_INT 28
23156: PUSH
23157: LD_INT 30
23159: PUSH
23160: LD_INT 31
23162: PUSH
23163: LD_INT 32
23165: PUSH
23166: LD_INT 33
23168: PUSH
23169: LD_INT 34
23171: PUSH
23172: LD_INT 36
23174: PUSH
23175: EMPTY
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: PUSH
23208: LD_INT 101
23210: PUSH
23211: LD_INT 102
23213: PUSH
23214: LD_INT 103
23216: PUSH
23217: LD_INT 104
23219: PUSH
23220: LD_INT 105
23222: PUSH
23223: LD_INT 106
23225: PUSH
23226: LD_INT 107
23228: PUSH
23229: LD_INT 108
23231: PUSH
23232: LD_INT 109
23234: PUSH
23235: LD_INT 110
23237: PUSH
23238: LD_INT 111
23240: PUSH
23241: LD_INT 112
23243: PUSH
23244: LD_INT 113
23246: PUSH
23247: LD_INT 114
23249: PUSH
23250: LD_INT 116
23252: PUSH
23253: LD_INT 117
23255: PUSH
23256: LD_INT 118
23258: PUSH
23259: EMPTY
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: PUSH
23278: EMPTY
23279: LIST
23280: LIST
23281: ST_TO_ADDR
23282: GO 24521
23284: LD_INT 14
23286: DOUBLE
23287: EQUAL
23288: IFTRUE 23292
23290: GO 23516
23292: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23293: LD_ADDR_VAR 0 2
23297: PUSH
23298: LD_INT 1
23300: PUSH
23301: LD_INT 2
23303: PUSH
23304: LD_INT 3
23306: PUSH
23307: LD_INT 4
23309: PUSH
23310: LD_INT 5
23312: PUSH
23313: LD_INT 6
23315: PUSH
23316: LD_INT 7
23318: PUSH
23319: LD_INT 8
23321: PUSH
23322: LD_INT 9
23324: PUSH
23325: LD_INT 10
23327: PUSH
23328: LD_INT 11
23330: PUSH
23331: LD_INT 12
23333: PUSH
23334: LD_INT 13
23336: PUSH
23337: LD_INT 14
23339: PUSH
23340: LD_INT 15
23342: PUSH
23343: LD_INT 16
23345: PUSH
23346: LD_INT 17
23348: PUSH
23349: LD_INT 18
23351: PUSH
23352: LD_INT 19
23354: PUSH
23355: LD_INT 20
23357: PUSH
23358: LD_INT 21
23360: PUSH
23361: LD_INT 22
23363: PUSH
23364: LD_INT 23
23366: PUSH
23367: LD_INT 24
23369: PUSH
23370: LD_INT 25
23372: PUSH
23373: LD_INT 26
23375: PUSH
23376: LD_INT 27
23378: PUSH
23379: LD_INT 28
23381: PUSH
23382: LD_INT 29
23384: PUSH
23385: LD_INT 30
23387: PUSH
23388: LD_INT 31
23390: PUSH
23391: LD_INT 32
23393: PUSH
23394: LD_INT 33
23396: PUSH
23397: LD_INT 34
23399: PUSH
23400: LD_INT 36
23402: PUSH
23403: EMPTY
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: PUSH
23440: LD_INT 101
23442: PUSH
23443: LD_INT 102
23445: PUSH
23446: LD_INT 103
23448: PUSH
23449: LD_INT 104
23451: PUSH
23452: LD_INT 105
23454: PUSH
23455: LD_INT 106
23457: PUSH
23458: LD_INT 107
23460: PUSH
23461: LD_INT 108
23463: PUSH
23464: LD_INT 109
23466: PUSH
23467: LD_INT 110
23469: PUSH
23470: LD_INT 111
23472: PUSH
23473: LD_INT 112
23475: PUSH
23476: LD_INT 113
23478: PUSH
23479: LD_INT 114
23481: PUSH
23482: LD_INT 116
23484: PUSH
23485: LD_INT 117
23487: PUSH
23488: LD_INT 118
23490: PUSH
23491: EMPTY
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: PUSH
23510: EMPTY
23511: LIST
23512: LIST
23513: ST_TO_ADDR
23514: GO 24521
23516: LD_INT 15
23518: DOUBLE
23519: EQUAL
23520: IFTRUE 23524
23522: GO 23748
23524: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23525: LD_ADDR_VAR 0 2
23529: PUSH
23530: LD_INT 1
23532: PUSH
23533: LD_INT 2
23535: PUSH
23536: LD_INT 3
23538: PUSH
23539: LD_INT 4
23541: PUSH
23542: LD_INT 5
23544: PUSH
23545: LD_INT 6
23547: PUSH
23548: LD_INT 7
23550: PUSH
23551: LD_INT 8
23553: PUSH
23554: LD_INT 9
23556: PUSH
23557: LD_INT 10
23559: PUSH
23560: LD_INT 11
23562: PUSH
23563: LD_INT 12
23565: PUSH
23566: LD_INT 13
23568: PUSH
23569: LD_INT 14
23571: PUSH
23572: LD_INT 15
23574: PUSH
23575: LD_INT 16
23577: PUSH
23578: LD_INT 17
23580: PUSH
23581: LD_INT 18
23583: PUSH
23584: LD_INT 19
23586: PUSH
23587: LD_INT 20
23589: PUSH
23590: LD_INT 21
23592: PUSH
23593: LD_INT 22
23595: PUSH
23596: LD_INT 23
23598: PUSH
23599: LD_INT 24
23601: PUSH
23602: LD_INT 25
23604: PUSH
23605: LD_INT 26
23607: PUSH
23608: LD_INT 27
23610: PUSH
23611: LD_INT 28
23613: PUSH
23614: LD_INT 29
23616: PUSH
23617: LD_INT 30
23619: PUSH
23620: LD_INT 31
23622: PUSH
23623: LD_INT 32
23625: PUSH
23626: LD_INT 33
23628: PUSH
23629: LD_INT 34
23631: PUSH
23632: LD_INT 36
23634: PUSH
23635: EMPTY
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: PUSH
23672: LD_INT 101
23674: PUSH
23675: LD_INT 102
23677: PUSH
23678: LD_INT 103
23680: PUSH
23681: LD_INT 104
23683: PUSH
23684: LD_INT 105
23686: PUSH
23687: LD_INT 106
23689: PUSH
23690: LD_INT 107
23692: PUSH
23693: LD_INT 108
23695: PUSH
23696: LD_INT 109
23698: PUSH
23699: LD_INT 110
23701: PUSH
23702: LD_INT 111
23704: PUSH
23705: LD_INT 112
23707: PUSH
23708: LD_INT 113
23710: PUSH
23711: LD_INT 114
23713: PUSH
23714: LD_INT 116
23716: PUSH
23717: LD_INT 117
23719: PUSH
23720: LD_INT 118
23722: PUSH
23723: EMPTY
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: PUSH
23742: EMPTY
23743: LIST
23744: LIST
23745: ST_TO_ADDR
23746: GO 24521
23748: LD_INT 16
23750: DOUBLE
23751: EQUAL
23752: IFTRUE 23756
23754: GO 23892
23756: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23757: LD_ADDR_VAR 0 2
23761: PUSH
23762: LD_INT 2
23764: PUSH
23765: LD_INT 4
23767: PUSH
23768: LD_INT 5
23770: PUSH
23771: LD_INT 7
23773: PUSH
23774: LD_INT 11
23776: PUSH
23777: LD_INT 12
23779: PUSH
23780: LD_INT 15
23782: PUSH
23783: LD_INT 16
23785: PUSH
23786: LD_INT 20
23788: PUSH
23789: LD_INT 21
23791: PUSH
23792: LD_INT 22
23794: PUSH
23795: LD_INT 23
23797: PUSH
23798: LD_INT 25
23800: PUSH
23801: LD_INT 26
23803: PUSH
23804: LD_INT 30
23806: PUSH
23807: LD_INT 31
23809: PUSH
23810: LD_INT 32
23812: PUSH
23813: LD_INT 33
23815: PUSH
23816: LD_INT 34
23818: PUSH
23819: EMPTY
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: LIST
23834: LIST
23835: LIST
23836: LIST
23837: LIST
23838: LIST
23839: PUSH
23840: LD_INT 101
23842: PUSH
23843: LD_INT 102
23845: PUSH
23846: LD_INT 103
23848: PUSH
23849: LD_INT 106
23851: PUSH
23852: LD_INT 108
23854: PUSH
23855: LD_INT 112
23857: PUSH
23858: LD_INT 113
23860: PUSH
23861: LD_INT 114
23863: PUSH
23864: LD_INT 116
23866: PUSH
23867: LD_INT 117
23869: PUSH
23870: LD_INT 118
23872: PUSH
23873: EMPTY
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: ST_TO_ADDR
23890: GO 24521
23892: LD_INT 17
23894: DOUBLE
23895: EQUAL
23896: IFTRUE 23900
23898: GO 24124
23900: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23901: LD_ADDR_VAR 0 2
23905: PUSH
23906: LD_INT 1
23908: PUSH
23909: LD_INT 2
23911: PUSH
23912: LD_INT 3
23914: PUSH
23915: LD_INT 4
23917: PUSH
23918: LD_INT 5
23920: PUSH
23921: LD_INT 6
23923: PUSH
23924: LD_INT 7
23926: PUSH
23927: LD_INT 8
23929: PUSH
23930: LD_INT 9
23932: PUSH
23933: LD_INT 10
23935: PUSH
23936: LD_INT 11
23938: PUSH
23939: LD_INT 12
23941: PUSH
23942: LD_INT 13
23944: PUSH
23945: LD_INT 14
23947: PUSH
23948: LD_INT 15
23950: PUSH
23951: LD_INT 16
23953: PUSH
23954: LD_INT 17
23956: PUSH
23957: LD_INT 18
23959: PUSH
23960: LD_INT 19
23962: PUSH
23963: LD_INT 20
23965: PUSH
23966: LD_INT 21
23968: PUSH
23969: LD_INT 22
23971: PUSH
23972: LD_INT 23
23974: PUSH
23975: LD_INT 24
23977: PUSH
23978: LD_INT 25
23980: PUSH
23981: LD_INT 26
23983: PUSH
23984: LD_INT 27
23986: PUSH
23987: LD_INT 28
23989: PUSH
23990: LD_INT 29
23992: PUSH
23993: LD_INT 30
23995: PUSH
23996: LD_INT 31
23998: PUSH
23999: LD_INT 32
24001: PUSH
24002: LD_INT 33
24004: PUSH
24005: LD_INT 34
24007: PUSH
24008: LD_INT 36
24010: PUSH
24011: EMPTY
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: PUSH
24048: LD_INT 101
24050: PUSH
24051: LD_INT 102
24053: PUSH
24054: LD_INT 103
24056: PUSH
24057: LD_INT 104
24059: PUSH
24060: LD_INT 105
24062: PUSH
24063: LD_INT 106
24065: PUSH
24066: LD_INT 107
24068: PUSH
24069: LD_INT 108
24071: PUSH
24072: LD_INT 109
24074: PUSH
24075: LD_INT 110
24077: PUSH
24078: LD_INT 111
24080: PUSH
24081: LD_INT 112
24083: PUSH
24084: LD_INT 113
24086: PUSH
24087: LD_INT 114
24089: PUSH
24090: LD_INT 116
24092: PUSH
24093: LD_INT 117
24095: PUSH
24096: LD_INT 118
24098: PUSH
24099: EMPTY
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: PUSH
24118: EMPTY
24119: LIST
24120: LIST
24121: ST_TO_ADDR
24122: GO 24521
24124: LD_INT 18
24126: DOUBLE
24127: EQUAL
24128: IFTRUE 24132
24130: GO 24280
24132: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24133: LD_ADDR_VAR 0 2
24137: PUSH
24138: LD_INT 2
24140: PUSH
24141: LD_INT 4
24143: PUSH
24144: LD_INT 5
24146: PUSH
24147: LD_INT 7
24149: PUSH
24150: LD_INT 11
24152: PUSH
24153: LD_INT 12
24155: PUSH
24156: LD_INT 15
24158: PUSH
24159: LD_INT 16
24161: PUSH
24162: LD_INT 20
24164: PUSH
24165: LD_INT 21
24167: PUSH
24168: LD_INT 22
24170: PUSH
24171: LD_INT 23
24173: PUSH
24174: LD_INT 25
24176: PUSH
24177: LD_INT 26
24179: PUSH
24180: LD_INT 30
24182: PUSH
24183: LD_INT 31
24185: PUSH
24186: LD_INT 32
24188: PUSH
24189: LD_INT 33
24191: PUSH
24192: LD_INT 34
24194: PUSH
24195: LD_INT 35
24197: PUSH
24198: LD_INT 36
24200: PUSH
24201: EMPTY
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: PUSH
24224: LD_INT 101
24226: PUSH
24227: LD_INT 102
24229: PUSH
24230: LD_INT 103
24232: PUSH
24233: LD_INT 106
24235: PUSH
24236: LD_INT 108
24238: PUSH
24239: LD_INT 112
24241: PUSH
24242: LD_INT 113
24244: PUSH
24245: LD_INT 114
24247: PUSH
24248: LD_INT 115
24250: PUSH
24251: LD_INT 116
24253: PUSH
24254: LD_INT 117
24256: PUSH
24257: LD_INT 118
24259: PUSH
24260: EMPTY
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: PUSH
24274: EMPTY
24275: LIST
24276: LIST
24277: ST_TO_ADDR
24278: GO 24521
24280: LD_INT 19
24282: DOUBLE
24283: EQUAL
24284: IFTRUE 24288
24286: GO 24520
24288: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24289: LD_ADDR_VAR 0 2
24293: PUSH
24294: LD_INT 1
24296: PUSH
24297: LD_INT 2
24299: PUSH
24300: LD_INT 3
24302: PUSH
24303: LD_INT 4
24305: PUSH
24306: LD_INT 5
24308: PUSH
24309: LD_INT 6
24311: PUSH
24312: LD_INT 7
24314: PUSH
24315: LD_INT 8
24317: PUSH
24318: LD_INT 9
24320: PUSH
24321: LD_INT 10
24323: PUSH
24324: LD_INT 11
24326: PUSH
24327: LD_INT 12
24329: PUSH
24330: LD_INT 13
24332: PUSH
24333: LD_INT 14
24335: PUSH
24336: LD_INT 15
24338: PUSH
24339: LD_INT 16
24341: PUSH
24342: LD_INT 17
24344: PUSH
24345: LD_INT 18
24347: PUSH
24348: LD_INT 19
24350: PUSH
24351: LD_INT 20
24353: PUSH
24354: LD_INT 21
24356: PUSH
24357: LD_INT 22
24359: PUSH
24360: LD_INT 23
24362: PUSH
24363: LD_INT 24
24365: PUSH
24366: LD_INT 25
24368: PUSH
24369: LD_INT 26
24371: PUSH
24372: LD_INT 27
24374: PUSH
24375: LD_INT 28
24377: PUSH
24378: LD_INT 29
24380: PUSH
24381: LD_INT 30
24383: PUSH
24384: LD_INT 31
24386: PUSH
24387: LD_INT 32
24389: PUSH
24390: LD_INT 33
24392: PUSH
24393: LD_INT 34
24395: PUSH
24396: LD_INT 35
24398: PUSH
24399: LD_INT 36
24401: PUSH
24402: EMPTY
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: PUSH
24440: LD_INT 101
24442: PUSH
24443: LD_INT 102
24445: PUSH
24446: LD_INT 103
24448: PUSH
24449: LD_INT 104
24451: PUSH
24452: LD_INT 105
24454: PUSH
24455: LD_INT 106
24457: PUSH
24458: LD_INT 107
24460: PUSH
24461: LD_INT 108
24463: PUSH
24464: LD_INT 109
24466: PUSH
24467: LD_INT 110
24469: PUSH
24470: LD_INT 111
24472: PUSH
24473: LD_INT 112
24475: PUSH
24476: LD_INT 113
24478: PUSH
24479: LD_INT 114
24481: PUSH
24482: LD_INT 115
24484: PUSH
24485: LD_INT 116
24487: PUSH
24488: LD_INT 117
24490: PUSH
24491: LD_INT 118
24493: PUSH
24494: EMPTY
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: PUSH
24514: EMPTY
24515: LIST
24516: LIST
24517: ST_TO_ADDR
24518: GO 24521
24520: POP
// end else
24521: GO 24752
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24523: LD_ADDR_VAR 0 2
24527: PUSH
24528: LD_INT 1
24530: PUSH
24531: LD_INT 2
24533: PUSH
24534: LD_INT 3
24536: PUSH
24537: LD_INT 4
24539: PUSH
24540: LD_INT 5
24542: PUSH
24543: LD_INT 6
24545: PUSH
24546: LD_INT 7
24548: PUSH
24549: LD_INT 8
24551: PUSH
24552: LD_INT 9
24554: PUSH
24555: LD_INT 10
24557: PUSH
24558: LD_INT 11
24560: PUSH
24561: LD_INT 12
24563: PUSH
24564: LD_INT 13
24566: PUSH
24567: LD_INT 14
24569: PUSH
24570: LD_INT 15
24572: PUSH
24573: LD_INT 16
24575: PUSH
24576: LD_INT 17
24578: PUSH
24579: LD_INT 18
24581: PUSH
24582: LD_INT 19
24584: PUSH
24585: LD_INT 20
24587: PUSH
24588: LD_INT 21
24590: PUSH
24591: LD_INT 22
24593: PUSH
24594: LD_INT 23
24596: PUSH
24597: LD_INT 24
24599: PUSH
24600: LD_INT 25
24602: PUSH
24603: LD_INT 26
24605: PUSH
24606: LD_INT 27
24608: PUSH
24609: LD_INT 28
24611: PUSH
24612: LD_INT 29
24614: PUSH
24615: LD_INT 30
24617: PUSH
24618: LD_INT 31
24620: PUSH
24621: LD_INT 32
24623: PUSH
24624: LD_INT 33
24626: PUSH
24627: LD_INT 34
24629: PUSH
24630: LD_INT 35
24632: PUSH
24633: LD_INT 36
24635: PUSH
24636: EMPTY
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: LIST
24642: LIST
24643: LIST
24644: LIST
24645: LIST
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: PUSH
24674: LD_INT 101
24676: PUSH
24677: LD_INT 102
24679: PUSH
24680: LD_INT 103
24682: PUSH
24683: LD_INT 104
24685: PUSH
24686: LD_INT 105
24688: PUSH
24689: LD_INT 106
24691: PUSH
24692: LD_INT 107
24694: PUSH
24695: LD_INT 108
24697: PUSH
24698: LD_INT 109
24700: PUSH
24701: LD_INT 110
24703: PUSH
24704: LD_INT 111
24706: PUSH
24707: LD_INT 112
24709: PUSH
24710: LD_INT 113
24712: PUSH
24713: LD_INT 114
24715: PUSH
24716: LD_INT 115
24718: PUSH
24719: LD_INT 116
24721: PUSH
24722: LD_INT 117
24724: PUSH
24725: LD_INT 118
24727: PUSH
24728: EMPTY
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: PUSH
24748: EMPTY
24749: LIST
24750: LIST
24751: ST_TO_ADDR
// if result then
24752: LD_VAR 0 2
24756: IFFALSE 25542
// begin normal :=  ;
24758: LD_ADDR_VAR 0 5
24762: PUSH
24763: LD_STRING 
24765: ST_TO_ADDR
// hardcore :=  ;
24766: LD_ADDR_VAR 0 6
24770: PUSH
24771: LD_STRING 
24773: ST_TO_ADDR
// active :=  ;
24774: LD_ADDR_VAR 0 7
24778: PUSH
24779: LD_STRING 
24781: ST_TO_ADDR
// for i = 1 to normalCounter do
24782: LD_ADDR_VAR 0 8
24786: PUSH
24787: DOUBLE
24788: LD_INT 1
24790: DEC
24791: ST_TO_ADDR
24792: LD_EXP 61
24796: PUSH
24797: FOR_TO
24798: IFFALSE 24899
// begin tmp := 0 ;
24800: LD_ADDR_VAR 0 3
24804: PUSH
24805: LD_STRING 0
24807: ST_TO_ADDR
// if result [ 1 ] then
24808: LD_VAR 0 2
24812: PUSH
24813: LD_INT 1
24815: ARRAY
24816: IFFALSE 24881
// if result [ 1 ] [ 1 ] = i then
24818: LD_VAR 0 2
24822: PUSH
24823: LD_INT 1
24825: ARRAY
24826: PUSH
24827: LD_INT 1
24829: ARRAY
24830: PUSH
24831: LD_VAR 0 8
24835: EQUAL
24836: IFFALSE 24881
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24838: LD_ADDR_VAR 0 2
24842: PUSH
24843: LD_VAR 0 2
24847: PPUSH
24848: LD_INT 1
24850: PPUSH
24851: LD_VAR 0 2
24855: PUSH
24856: LD_INT 1
24858: ARRAY
24859: PPUSH
24860: LD_INT 1
24862: PPUSH
24863: CALL_OW 3
24867: PPUSH
24868: CALL_OW 1
24872: ST_TO_ADDR
// tmp := 1 ;
24873: LD_ADDR_VAR 0 3
24877: PUSH
24878: LD_STRING 1
24880: ST_TO_ADDR
// end ; normal := normal & tmp ;
24881: LD_ADDR_VAR 0 5
24885: PUSH
24886: LD_VAR 0 5
24890: PUSH
24891: LD_VAR 0 3
24895: STR
24896: ST_TO_ADDR
// end ;
24897: GO 24797
24899: POP
24900: POP
// for i = 1 to hardcoreCounter do
24901: LD_ADDR_VAR 0 8
24905: PUSH
24906: DOUBLE
24907: LD_INT 1
24909: DEC
24910: ST_TO_ADDR
24911: LD_EXP 62
24915: PUSH
24916: FOR_TO
24917: IFFALSE 25022
// begin tmp := 0 ;
24919: LD_ADDR_VAR 0 3
24923: PUSH
24924: LD_STRING 0
24926: ST_TO_ADDR
// if result [ 2 ] then
24927: LD_VAR 0 2
24931: PUSH
24932: LD_INT 2
24934: ARRAY
24935: IFFALSE 25004
// if result [ 2 ] [ 1 ] = 100 + i then
24937: LD_VAR 0 2
24941: PUSH
24942: LD_INT 2
24944: ARRAY
24945: PUSH
24946: LD_INT 1
24948: ARRAY
24949: PUSH
24950: LD_INT 100
24952: PUSH
24953: LD_VAR 0 8
24957: PLUS
24958: EQUAL
24959: IFFALSE 25004
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24961: LD_ADDR_VAR 0 2
24965: PUSH
24966: LD_VAR 0 2
24970: PPUSH
24971: LD_INT 2
24973: PPUSH
24974: LD_VAR 0 2
24978: PUSH
24979: LD_INT 2
24981: ARRAY
24982: PPUSH
24983: LD_INT 1
24985: PPUSH
24986: CALL_OW 3
24990: PPUSH
24991: CALL_OW 1
24995: ST_TO_ADDR
// tmp := 1 ;
24996: LD_ADDR_VAR 0 3
25000: PUSH
25001: LD_STRING 1
25003: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25004: LD_ADDR_VAR 0 6
25008: PUSH
25009: LD_VAR 0 6
25013: PUSH
25014: LD_VAR 0 3
25018: STR
25019: ST_TO_ADDR
// end ;
25020: GO 24916
25022: POP
25023: POP
// if isGameLoad then
25024: LD_VAR 0 1
25028: IFFALSE 25503
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25030: LD_ADDR_VAR 0 4
25034: PUSH
25035: LD_EXP 65
25039: PUSH
25040: LD_EXP 64
25044: PUSH
25045: LD_EXP 66
25049: PUSH
25050: LD_EXP 63
25054: PUSH
25055: LD_EXP 67
25059: PUSH
25060: LD_EXP 68
25064: PUSH
25065: LD_EXP 69
25069: PUSH
25070: LD_EXP 70
25074: PUSH
25075: LD_EXP 71
25079: PUSH
25080: LD_EXP 72
25084: PUSH
25085: LD_EXP 73
25089: PUSH
25090: LD_EXP 74
25094: PUSH
25095: LD_EXP 75
25099: PUSH
25100: LD_EXP 76
25104: PUSH
25105: LD_EXP 84
25109: PUSH
25110: LD_EXP 85
25114: PUSH
25115: LD_EXP 86
25119: PUSH
25120: LD_EXP 87
25124: PUSH
25125: LD_EXP 89
25129: PUSH
25130: LD_EXP 90
25134: PUSH
25135: LD_EXP 91
25139: PUSH
25140: LD_EXP 94
25144: PUSH
25145: LD_EXP 96
25149: PUSH
25150: LD_EXP 97
25154: PUSH
25155: LD_EXP 98
25159: PUSH
25160: LD_EXP 100
25164: PUSH
25165: LD_EXP 101
25169: PUSH
25170: LD_EXP 104
25174: PUSH
25175: LD_EXP 105
25179: PUSH
25180: LD_EXP 106
25184: PUSH
25185: LD_EXP 107
25189: PUSH
25190: LD_EXP 108
25194: PUSH
25195: LD_EXP 109
25199: PUSH
25200: LD_EXP 110
25204: PUSH
25205: LD_EXP 111
25209: PUSH
25210: LD_EXP 112
25214: PUSH
25215: LD_EXP 77
25219: PUSH
25220: LD_EXP 78
25224: PUSH
25225: LD_EXP 81
25229: PUSH
25230: LD_EXP 82
25234: PUSH
25235: LD_EXP 83
25239: PUSH
25240: LD_EXP 79
25244: PUSH
25245: LD_EXP 80
25249: PUSH
25250: LD_EXP 88
25254: PUSH
25255: LD_EXP 92
25259: PUSH
25260: LD_EXP 93
25264: PUSH
25265: LD_EXP 95
25269: PUSH
25270: LD_EXP 99
25274: PUSH
25275: LD_EXP 102
25279: PUSH
25280: LD_EXP 103
25284: PUSH
25285: LD_EXP 113
25289: PUSH
25290: LD_EXP 114
25294: PUSH
25295: LD_EXP 115
25299: PUSH
25300: LD_EXP 116
25304: PUSH
25305: EMPTY
25306: LIST
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: LIST
25312: LIST
25313: LIST
25314: LIST
25315: LIST
25316: LIST
25317: LIST
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: LIST
25331: LIST
25332: LIST
25333: LIST
25334: LIST
25335: LIST
25336: LIST
25337: LIST
25338: LIST
25339: LIST
25340: LIST
25341: LIST
25342: LIST
25343: LIST
25344: LIST
25345: LIST
25346: LIST
25347: LIST
25348: LIST
25349: LIST
25350: LIST
25351: LIST
25352: LIST
25353: LIST
25354: LIST
25355: LIST
25356: LIST
25357: LIST
25358: LIST
25359: LIST
25360: ST_TO_ADDR
// tmp :=  ;
25361: LD_ADDR_VAR 0 3
25365: PUSH
25366: LD_STRING 
25368: ST_TO_ADDR
// for i = 1 to normalCounter do
25369: LD_ADDR_VAR 0 8
25373: PUSH
25374: DOUBLE
25375: LD_INT 1
25377: DEC
25378: ST_TO_ADDR
25379: LD_EXP 61
25383: PUSH
25384: FOR_TO
25385: IFFALSE 25421
// begin if flags [ i ] then
25387: LD_VAR 0 4
25391: PUSH
25392: LD_VAR 0 8
25396: ARRAY
25397: IFFALSE 25419
// tmp := tmp & i & ; ;
25399: LD_ADDR_VAR 0 3
25403: PUSH
25404: LD_VAR 0 3
25408: PUSH
25409: LD_VAR 0 8
25413: STR
25414: PUSH
25415: LD_STRING ;
25417: STR
25418: ST_TO_ADDR
// end ;
25419: GO 25384
25421: POP
25422: POP
// for i = 1 to hardcoreCounter do
25423: LD_ADDR_VAR 0 8
25427: PUSH
25428: DOUBLE
25429: LD_INT 1
25431: DEC
25432: ST_TO_ADDR
25433: LD_EXP 62
25437: PUSH
25438: FOR_TO
25439: IFFALSE 25485
// begin if flags [ normalCounter + i ] then
25441: LD_VAR 0 4
25445: PUSH
25446: LD_EXP 61
25450: PUSH
25451: LD_VAR 0 8
25455: PLUS
25456: ARRAY
25457: IFFALSE 25483
// tmp := tmp & ( 100 + i ) & ; ;
25459: LD_ADDR_VAR 0 3
25463: PUSH
25464: LD_VAR 0 3
25468: PUSH
25469: LD_INT 100
25471: PUSH
25472: LD_VAR 0 8
25476: PLUS
25477: STR
25478: PUSH
25479: LD_STRING ;
25481: STR
25482: ST_TO_ADDR
// end ;
25483: GO 25438
25485: POP
25486: POP
// if tmp then
25487: LD_VAR 0 3
25491: IFFALSE 25503
// active := tmp ;
25493: LD_ADDR_VAR 0 7
25497: PUSH
25498: LD_VAR 0 3
25502: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25503: LD_STRING getStreamItemsFromMission("
25505: PUSH
25506: LD_VAR 0 5
25510: STR
25511: PUSH
25512: LD_STRING ","
25514: STR
25515: PUSH
25516: LD_VAR 0 6
25520: STR
25521: PUSH
25522: LD_STRING ","
25524: STR
25525: PUSH
25526: LD_VAR 0 7
25530: STR
25531: PUSH
25532: LD_STRING ")
25534: STR
25535: PPUSH
25536: CALL_OW 559
// end else
25540: GO 25549
// ToLua ( getStreamItemsFromMission("","","") ) ;
25542: LD_STRING getStreamItemsFromMission("","","")
25544: PPUSH
25545: CALL_OW 559
// end ;
25549: LD_VAR 0 2
25553: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25554: LD_EXP 60
25558: PUSH
25559: LD_EXP 65
25563: AND
25564: IFFALSE 25688
25566: GO 25568
25568: DISABLE
25569: LD_INT 0
25571: PPUSH
25572: PPUSH
// begin enable ;
25573: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25574: LD_ADDR_VAR 0 2
25578: PUSH
25579: LD_INT 22
25581: PUSH
25582: LD_OWVAR 2
25586: PUSH
25587: EMPTY
25588: LIST
25589: LIST
25590: PUSH
25591: LD_INT 2
25593: PUSH
25594: LD_INT 34
25596: PUSH
25597: LD_INT 7
25599: PUSH
25600: EMPTY
25601: LIST
25602: LIST
25603: PUSH
25604: LD_INT 34
25606: PUSH
25607: LD_INT 45
25609: PUSH
25610: EMPTY
25611: LIST
25612: LIST
25613: PUSH
25614: LD_INT 34
25616: PUSH
25617: LD_INT 28
25619: PUSH
25620: EMPTY
25621: LIST
25622: LIST
25623: PUSH
25624: LD_INT 34
25626: PUSH
25627: LD_INT 47
25629: PUSH
25630: EMPTY
25631: LIST
25632: LIST
25633: PUSH
25634: EMPTY
25635: LIST
25636: LIST
25637: LIST
25638: LIST
25639: LIST
25640: PUSH
25641: EMPTY
25642: LIST
25643: LIST
25644: PPUSH
25645: CALL_OW 69
25649: ST_TO_ADDR
// if not tmp then
25650: LD_VAR 0 2
25654: NOT
25655: IFFALSE 25659
// exit ;
25657: GO 25688
// for i in tmp do
25659: LD_ADDR_VAR 0 1
25663: PUSH
25664: LD_VAR 0 2
25668: PUSH
25669: FOR_IN
25670: IFFALSE 25686
// begin SetLives ( i , 0 ) ;
25672: LD_VAR 0 1
25676: PPUSH
25677: LD_INT 0
25679: PPUSH
25680: CALL_OW 234
// end ;
25684: GO 25669
25686: POP
25687: POP
// end ;
25688: PPOPN 2
25690: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25691: LD_EXP 60
25695: PUSH
25696: LD_EXP 66
25700: AND
25701: IFFALSE 25785
25703: GO 25705
25705: DISABLE
25706: LD_INT 0
25708: PPUSH
25709: PPUSH
// begin enable ;
25710: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25711: LD_ADDR_VAR 0 2
25715: PUSH
25716: LD_INT 22
25718: PUSH
25719: LD_OWVAR 2
25723: PUSH
25724: EMPTY
25725: LIST
25726: LIST
25727: PUSH
25728: LD_INT 32
25730: PUSH
25731: LD_INT 3
25733: PUSH
25734: EMPTY
25735: LIST
25736: LIST
25737: PUSH
25738: EMPTY
25739: LIST
25740: LIST
25741: PPUSH
25742: CALL_OW 69
25746: ST_TO_ADDR
// if not tmp then
25747: LD_VAR 0 2
25751: NOT
25752: IFFALSE 25756
// exit ;
25754: GO 25785
// for i in tmp do
25756: LD_ADDR_VAR 0 1
25760: PUSH
25761: LD_VAR 0 2
25765: PUSH
25766: FOR_IN
25767: IFFALSE 25783
// begin SetLives ( i , 0 ) ;
25769: LD_VAR 0 1
25773: PPUSH
25774: LD_INT 0
25776: PPUSH
25777: CALL_OW 234
// end ;
25781: GO 25766
25783: POP
25784: POP
// end ;
25785: PPOPN 2
25787: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25788: LD_EXP 60
25792: PUSH
25793: LD_EXP 63
25797: AND
25798: IFFALSE 25891
25800: GO 25802
25802: DISABLE
25803: LD_INT 0
25805: PPUSH
// begin enable ;
25806: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25807: LD_ADDR_VAR 0 1
25811: PUSH
25812: LD_INT 22
25814: PUSH
25815: LD_OWVAR 2
25819: PUSH
25820: EMPTY
25821: LIST
25822: LIST
25823: PUSH
25824: LD_INT 2
25826: PUSH
25827: LD_INT 25
25829: PUSH
25830: LD_INT 5
25832: PUSH
25833: EMPTY
25834: LIST
25835: LIST
25836: PUSH
25837: LD_INT 25
25839: PUSH
25840: LD_INT 9
25842: PUSH
25843: EMPTY
25844: LIST
25845: LIST
25846: PUSH
25847: LD_INT 25
25849: PUSH
25850: LD_INT 8
25852: PUSH
25853: EMPTY
25854: LIST
25855: LIST
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: LIST
25861: LIST
25862: PUSH
25863: EMPTY
25864: LIST
25865: LIST
25866: PPUSH
25867: CALL_OW 69
25871: PUSH
25872: FOR_IN
25873: IFFALSE 25889
// begin SetClass ( i , 1 ) ;
25875: LD_VAR 0 1
25879: PPUSH
25880: LD_INT 1
25882: PPUSH
25883: CALL_OW 336
// end ;
25887: GO 25872
25889: POP
25890: POP
// end ;
25891: PPOPN 1
25893: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25894: LD_EXP 60
25898: PUSH
25899: LD_EXP 64
25903: AND
25904: PUSH
25905: LD_OWVAR 65
25909: PUSH
25910: LD_INT 7
25912: LESS
25913: AND
25914: IFFALSE 25928
25916: GO 25918
25918: DISABLE
// begin enable ;
25919: ENABLE
// game_speed := 7 ;
25920: LD_ADDR_OWVAR 65
25924: PUSH
25925: LD_INT 7
25927: ST_TO_ADDR
// end ;
25928: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25929: LD_EXP 60
25933: PUSH
25934: LD_EXP 67
25938: AND
25939: IFFALSE 26141
25941: GO 25943
25943: DISABLE
25944: LD_INT 0
25946: PPUSH
25947: PPUSH
25948: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25949: LD_ADDR_VAR 0 3
25953: PUSH
25954: LD_INT 81
25956: PUSH
25957: LD_OWVAR 2
25961: PUSH
25962: EMPTY
25963: LIST
25964: LIST
25965: PUSH
25966: LD_INT 21
25968: PUSH
25969: LD_INT 1
25971: PUSH
25972: EMPTY
25973: LIST
25974: LIST
25975: PUSH
25976: EMPTY
25977: LIST
25978: LIST
25979: PPUSH
25980: CALL_OW 69
25984: ST_TO_ADDR
// if not tmp then
25985: LD_VAR 0 3
25989: NOT
25990: IFFALSE 25994
// exit ;
25992: GO 26141
// if tmp > 5 then
25994: LD_VAR 0 3
25998: PUSH
25999: LD_INT 5
26001: GREATER
26002: IFFALSE 26014
// k := 5 else
26004: LD_ADDR_VAR 0 2
26008: PUSH
26009: LD_INT 5
26011: ST_TO_ADDR
26012: GO 26024
// k := tmp ;
26014: LD_ADDR_VAR 0 2
26018: PUSH
26019: LD_VAR 0 3
26023: ST_TO_ADDR
// for i := 1 to k do
26024: LD_ADDR_VAR 0 1
26028: PUSH
26029: DOUBLE
26030: LD_INT 1
26032: DEC
26033: ST_TO_ADDR
26034: LD_VAR 0 2
26038: PUSH
26039: FOR_TO
26040: IFFALSE 26139
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26042: LD_VAR 0 3
26046: PUSH
26047: LD_VAR 0 1
26051: ARRAY
26052: PPUSH
26053: LD_VAR 0 1
26057: PUSH
26058: LD_INT 4
26060: MOD
26061: PUSH
26062: LD_INT 1
26064: PLUS
26065: PPUSH
26066: CALL_OW 259
26070: PUSH
26071: LD_INT 10
26073: LESS
26074: IFFALSE 26137
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26076: LD_VAR 0 3
26080: PUSH
26081: LD_VAR 0 1
26085: ARRAY
26086: PPUSH
26087: LD_VAR 0 1
26091: PUSH
26092: LD_INT 4
26094: MOD
26095: PUSH
26096: LD_INT 1
26098: PLUS
26099: PPUSH
26100: LD_VAR 0 3
26104: PUSH
26105: LD_VAR 0 1
26109: ARRAY
26110: PPUSH
26111: LD_VAR 0 1
26115: PUSH
26116: LD_INT 4
26118: MOD
26119: PUSH
26120: LD_INT 1
26122: PLUS
26123: PPUSH
26124: CALL_OW 259
26128: PUSH
26129: LD_INT 1
26131: PLUS
26132: PPUSH
26133: CALL_OW 237
26137: GO 26039
26139: POP
26140: POP
// end ;
26141: PPOPN 3
26143: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26144: LD_EXP 60
26148: PUSH
26149: LD_EXP 68
26153: AND
26154: IFFALSE 26174
26156: GO 26158
26158: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26159: LD_INT 4
26161: PPUSH
26162: LD_OWVAR 2
26166: PPUSH
26167: LD_INT 0
26169: PPUSH
26170: CALL_OW 324
26174: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26175: LD_EXP 60
26179: PUSH
26180: LD_EXP 97
26184: AND
26185: IFFALSE 26205
26187: GO 26189
26189: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26190: LD_INT 19
26192: PPUSH
26193: LD_OWVAR 2
26197: PPUSH
26198: LD_INT 0
26200: PPUSH
26201: CALL_OW 324
26205: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26206: LD_EXP 60
26210: PUSH
26211: LD_EXP 69
26215: AND
26216: IFFALSE 26318
26218: GO 26220
26220: DISABLE
26221: LD_INT 0
26223: PPUSH
26224: PPUSH
// begin enable ;
26225: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26226: LD_ADDR_VAR 0 2
26230: PUSH
26231: LD_INT 22
26233: PUSH
26234: LD_OWVAR 2
26238: PUSH
26239: EMPTY
26240: LIST
26241: LIST
26242: PUSH
26243: LD_INT 2
26245: PUSH
26246: LD_INT 34
26248: PUSH
26249: LD_INT 11
26251: PUSH
26252: EMPTY
26253: LIST
26254: LIST
26255: PUSH
26256: LD_INT 34
26258: PUSH
26259: LD_INT 30
26261: PUSH
26262: EMPTY
26263: LIST
26264: LIST
26265: PUSH
26266: EMPTY
26267: LIST
26268: LIST
26269: LIST
26270: PUSH
26271: EMPTY
26272: LIST
26273: LIST
26274: PPUSH
26275: CALL_OW 69
26279: ST_TO_ADDR
// if not tmp then
26280: LD_VAR 0 2
26284: NOT
26285: IFFALSE 26289
// exit ;
26287: GO 26318
// for i in tmp do
26289: LD_ADDR_VAR 0 1
26293: PUSH
26294: LD_VAR 0 2
26298: PUSH
26299: FOR_IN
26300: IFFALSE 26316
// begin SetLives ( i , 0 ) ;
26302: LD_VAR 0 1
26306: PPUSH
26307: LD_INT 0
26309: PPUSH
26310: CALL_OW 234
// end ;
26314: GO 26299
26316: POP
26317: POP
// end ;
26318: PPOPN 2
26320: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26321: LD_EXP 60
26325: PUSH
26326: LD_EXP 70
26330: AND
26331: IFFALSE 26351
26333: GO 26335
26335: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26336: LD_INT 32
26338: PPUSH
26339: LD_OWVAR 2
26343: PPUSH
26344: LD_INT 0
26346: PPUSH
26347: CALL_OW 324
26351: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26352: LD_EXP 60
26356: PUSH
26357: LD_EXP 71
26361: AND
26362: IFFALSE 26543
26364: GO 26366
26366: DISABLE
26367: LD_INT 0
26369: PPUSH
26370: PPUSH
26371: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26372: LD_ADDR_VAR 0 2
26376: PUSH
26377: LD_INT 22
26379: PUSH
26380: LD_OWVAR 2
26384: PUSH
26385: EMPTY
26386: LIST
26387: LIST
26388: PUSH
26389: LD_INT 33
26391: PUSH
26392: LD_INT 3
26394: PUSH
26395: EMPTY
26396: LIST
26397: LIST
26398: PUSH
26399: EMPTY
26400: LIST
26401: LIST
26402: PPUSH
26403: CALL_OW 69
26407: ST_TO_ADDR
// if not tmp then
26408: LD_VAR 0 2
26412: NOT
26413: IFFALSE 26417
// exit ;
26415: GO 26543
// side := 0 ;
26417: LD_ADDR_VAR 0 3
26421: PUSH
26422: LD_INT 0
26424: ST_TO_ADDR
// for i := 1 to 8 do
26425: LD_ADDR_VAR 0 1
26429: PUSH
26430: DOUBLE
26431: LD_INT 1
26433: DEC
26434: ST_TO_ADDR
26435: LD_INT 8
26437: PUSH
26438: FOR_TO
26439: IFFALSE 26487
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26441: LD_OWVAR 2
26445: PUSH
26446: LD_VAR 0 1
26450: NONEQUAL
26451: PUSH
26452: LD_OWVAR 2
26456: PPUSH
26457: LD_VAR 0 1
26461: PPUSH
26462: CALL_OW 81
26466: PUSH
26467: LD_INT 2
26469: EQUAL
26470: AND
26471: IFFALSE 26485
// begin side := i ;
26473: LD_ADDR_VAR 0 3
26477: PUSH
26478: LD_VAR 0 1
26482: ST_TO_ADDR
// break ;
26483: GO 26487
// end ;
26485: GO 26438
26487: POP
26488: POP
// if not side then
26489: LD_VAR 0 3
26493: NOT
26494: IFFALSE 26498
// exit ;
26496: GO 26543
// for i := 1 to tmp do
26498: LD_ADDR_VAR 0 1
26502: PUSH
26503: DOUBLE
26504: LD_INT 1
26506: DEC
26507: ST_TO_ADDR
26508: LD_VAR 0 2
26512: PUSH
26513: FOR_TO
26514: IFFALSE 26541
// if Prob ( 60 ) then
26516: LD_INT 60
26518: PPUSH
26519: CALL_OW 13
26523: IFFALSE 26539
// SetSide ( i , side ) ;
26525: LD_VAR 0 1
26529: PPUSH
26530: LD_VAR 0 3
26534: PPUSH
26535: CALL_OW 235
26539: GO 26513
26541: POP
26542: POP
// end ;
26543: PPOPN 3
26545: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26546: LD_EXP 60
26550: PUSH
26551: LD_EXP 73
26555: AND
26556: IFFALSE 26675
26558: GO 26560
26560: DISABLE
26561: LD_INT 0
26563: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26564: LD_ADDR_VAR 0 1
26568: PUSH
26569: LD_INT 22
26571: PUSH
26572: LD_OWVAR 2
26576: PUSH
26577: EMPTY
26578: LIST
26579: LIST
26580: PUSH
26581: LD_INT 21
26583: PUSH
26584: LD_INT 1
26586: PUSH
26587: EMPTY
26588: LIST
26589: LIST
26590: PUSH
26591: LD_INT 3
26593: PUSH
26594: LD_INT 23
26596: PUSH
26597: LD_INT 0
26599: PUSH
26600: EMPTY
26601: LIST
26602: LIST
26603: PUSH
26604: EMPTY
26605: LIST
26606: LIST
26607: PUSH
26608: EMPTY
26609: LIST
26610: LIST
26611: LIST
26612: PPUSH
26613: CALL_OW 69
26617: PUSH
26618: FOR_IN
26619: IFFALSE 26673
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26621: LD_VAR 0 1
26625: PPUSH
26626: CALL_OW 257
26630: PUSH
26631: LD_INT 1
26633: PUSH
26634: LD_INT 2
26636: PUSH
26637: LD_INT 3
26639: PUSH
26640: LD_INT 4
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: LIST
26647: LIST
26648: IN
26649: IFFALSE 26671
// SetClass ( un , rand ( 1 , 4 ) ) ;
26651: LD_VAR 0 1
26655: PPUSH
26656: LD_INT 1
26658: PPUSH
26659: LD_INT 4
26661: PPUSH
26662: CALL_OW 12
26666: PPUSH
26667: CALL_OW 336
26671: GO 26618
26673: POP
26674: POP
// end ;
26675: PPOPN 1
26677: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26678: LD_EXP 60
26682: PUSH
26683: LD_EXP 72
26687: AND
26688: IFFALSE 26767
26690: GO 26692
26692: DISABLE
26693: LD_INT 0
26695: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26696: LD_ADDR_VAR 0 1
26700: PUSH
26701: LD_INT 22
26703: PUSH
26704: LD_OWVAR 2
26708: PUSH
26709: EMPTY
26710: LIST
26711: LIST
26712: PUSH
26713: LD_INT 21
26715: PUSH
26716: LD_INT 3
26718: PUSH
26719: EMPTY
26720: LIST
26721: LIST
26722: PUSH
26723: EMPTY
26724: LIST
26725: LIST
26726: PPUSH
26727: CALL_OW 69
26731: ST_TO_ADDR
// if not tmp then
26732: LD_VAR 0 1
26736: NOT
26737: IFFALSE 26741
// exit ;
26739: GO 26767
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26741: LD_VAR 0 1
26745: PUSH
26746: LD_INT 1
26748: PPUSH
26749: LD_VAR 0 1
26753: PPUSH
26754: CALL_OW 12
26758: ARRAY
26759: PPUSH
26760: LD_INT 100
26762: PPUSH
26763: CALL_OW 234
// end ;
26767: PPOPN 1
26769: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26770: LD_EXP 60
26774: PUSH
26775: LD_EXP 74
26779: AND
26780: IFFALSE 26878
26782: GO 26784
26784: DISABLE
26785: LD_INT 0
26787: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26788: LD_ADDR_VAR 0 1
26792: PUSH
26793: LD_INT 22
26795: PUSH
26796: LD_OWVAR 2
26800: PUSH
26801: EMPTY
26802: LIST
26803: LIST
26804: PUSH
26805: LD_INT 21
26807: PUSH
26808: LD_INT 1
26810: PUSH
26811: EMPTY
26812: LIST
26813: LIST
26814: PUSH
26815: EMPTY
26816: LIST
26817: LIST
26818: PPUSH
26819: CALL_OW 69
26823: ST_TO_ADDR
// if not tmp then
26824: LD_VAR 0 1
26828: NOT
26829: IFFALSE 26833
// exit ;
26831: GO 26878
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26833: LD_VAR 0 1
26837: PUSH
26838: LD_INT 1
26840: PPUSH
26841: LD_VAR 0 1
26845: PPUSH
26846: CALL_OW 12
26850: ARRAY
26851: PPUSH
26852: LD_INT 1
26854: PPUSH
26855: LD_INT 4
26857: PPUSH
26858: CALL_OW 12
26862: PPUSH
26863: LD_INT 3000
26865: PPUSH
26866: LD_INT 9000
26868: PPUSH
26869: CALL_OW 12
26873: PPUSH
26874: CALL_OW 492
// end ;
26878: PPOPN 1
26880: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26881: LD_EXP 60
26885: PUSH
26886: LD_EXP 75
26890: AND
26891: IFFALSE 26911
26893: GO 26895
26895: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26896: LD_INT 1
26898: PPUSH
26899: LD_OWVAR 2
26903: PPUSH
26904: LD_INT 0
26906: PPUSH
26907: CALL_OW 324
26911: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26912: LD_EXP 60
26916: PUSH
26917: LD_EXP 76
26921: AND
26922: IFFALSE 27005
26924: GO 26926
26926: DISABLE
26927: LD_INT 0
26929: PPUSH
26930: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26931: LD_ADDR_VAR 0 2
26935: PUSH
26936: LD_INT 22
26938: PUSH
26939: LD_OWVAR 2
26943: PUSH
26944: EMPTY
26945: LIST
26946: LIST
26947: PUSH
26948: LD_INT 21
26950: PUSH
26951: LD_INT 3
26953: PUSH
26954: EMPTY
26955: LIST
26956: LIST
26957: PUSH
26958: EMPTY
26959: LIST
26960: LIST
26961: PPUSH
26962: CALL_OW 69
26966: ST_TO_ADDR
// if not tmp then
26967: LD_VAR 0 2
26971: NOT
26972: IFFALSE 26976
// exit ;
26974: GO 27005
// for i in tmp do
26976: LD_ADDR_VAR 0 1
26980: PUSH
26981: LD_VAR 0 2
26985: PUSH
26986: FOR_IN
26987: IFFALSE 27003
// SetBLevel ( i , 10 ) ;
26989: LD_VAR 0 1
26993: PPUSH
26994: LD_INT 10
26996: PPUSH
26997: CALL_OW 241
27001: GO 26986
27003: POP
27004: POP
// end ;
27005: PPOPN 2
27007: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27008: LD_EXP 60
27012: PUSH
27013: LD_EXP 77
27017: AND
27018: IFFALSE 27129
27020: GO 27022
27022: DISABLE
27023: LD_INT 0
27025: PPUSH
27026: PPUSH
27027: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27028: LD_ADDR_VAR 0 3
27032: PUSH
27033: LD_INT 22
27035: PUSH
27036: LD_OWVAR 2
27040: PUSH
27041: EMPTY
27042: LIST
27043: LIST
27044: PUSH
27045: LD_INT 25
27047: PUSH
27048: LD_INT 1
27050: PUSH
27051: EMPTY
27052: LIST
27053: LIST
27054: PUSH
27055: EMPTY
27056: LIST
27057: LIST
27058: PPUSH
27059: CALL_OW 69
27063: ST_TO_ADDR
// if not tmp then
27064: LD_VAR 0 3
27068: NOT
27069: IFFALSE 27073
// exit ;
27071: GO 27129
// un := tmp [ rand ( 1 , tmp ) ] ;
27073: LD_ADDR_VAR 0 2
27077: PUSH
27078: LD_VAR 0 3
27082: PUSH
27083: LD_INT 1
27085: PPUSH
27086: LD_VAR 0 3
27090: PPUSH
27091: CALL_OW 12
27095: ARRAY
27096: ST_TO_ADDR
// if Crawls ( un ) then
27097: LD_VAR 0 2
27101: PPUSH
27102: CALL_OW 318
27106: IFFALSE 27117
// ComWalk ( un ) ;
27108: LD_VAR 0 2
27112: PPUSH
27113: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27117: LD_VAR 0 2
27121: PPUSH
27122: LD_INT 5
27124: PPUSH
27125: CALL_OW 336
// end ;
27129: PPOPN 3
27131: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27132: LD_EXP 60
27136: PUSH
27137: LD_EXP 78
27141: AND
27142: PUSH
27143: LD_OWVAR 67
27147: PUSH
27148: LD_INT 4
27150: LESS
27151: AND
27152: IFFALSE 27171
27154: GO 27156
27156: DISABLE
// begin Difficulty := Difficulty + 1 ;
27157: LD_ADDR_OWVAR 67
27161: PUSH
27162: LD_OWVAR 67
27166: PUSH
27167: LD_INT 1
27169: PLUS
27170: ST_TO_ADDR
// end ;
27171: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27172: LD_EXP 60
27176: PUSH
27177: LD_EXP 79
27181: AND
27182: IFFALSE 27285
27184: GO 27186
27186: DISABLE
27187: LD_INT 0
27189: PPUSH
// begin for i := 1 to 5 do
27190: LD_ADDR_VAR 0 1
27194: PUSH
27195: DOUBLE
27196: LD_INT 1
27198: DEC
27199: ST_TO_ADDR
27200: LD_INT 5
27202: PUSH
27203: FOR_TO
27204: IFFALSE 27283
// begin uc_nation := nation_nature ;
27206: LD_ADDR_OWVAR 21
27210: PUSH
27211: LD_INT 0
27213: ST_TO_ADDR
// uc_side := 0 ;
27214: LD_ADDR_OWVAR 20
27218: PUSH
27219: LD_INT 0
27221: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27222: LD_ADDR_OWVAR 29
27226: PUSH
27227: LD_INT 12
27229: PUSH
27230: LD_INT 12
27232: PUSH
27233: EMPTY
27234: LIST
27235: LIST
27236: ST_TO_ADDR
// hc_agressivity := 20 ;
27237: LD_ADDR_OWVAR 35
27241: PUSH
27242: LD_INT 20
27244: ST_TO_ADDR
// hc_class := class_tiger ;
27245: LD_ADDR_OWVAR 28
27249: PUSH
27250: LD_INT 14
27252: ST_TO_ADDR
// hc_gallery :=  ;
27253: LD_ADDR_OWVAR 33
27257: PUSH
27258: LD_STRING 
27260: ST_TO_ADDR
// hc_name :=  ;
27261: LD_ADDR_OWVAR 26
27265: PUSH
27266: LD_STRING 
27268: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27269: CALL_OW 44
27273: PPUSH
27274: LD_INT 0
27276: PPUSH
27277: CALL_OW 51
// end ;
27281: GO 27203
27283: POP
27284: POP
// end ;
27285: PPOPN 1
27287: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27288: LD_EXP 60
27292: PUSH
27293: LD_EXP 80
27297: AND
27298: IFFALSE 27307
27300: GO 27302
27302: DISABLE
// StreamSibBomb ;
27303: CALL 27308 0 0
27307: END
// export function StreamSibBomb ; var i , x , y ; begin
27308: LD_INT 0
27310: PPUSH
27311: PPUSH
27312: PPUSH
27313: PPUSH
// result := false ;
27314: LD_ADDR_VAR 0 1
27318: PUSH
27319: LD_INT 0
27321: ST_TO_ADDR
// for i := 1 to 16 do
27322: LD_ADDR_VAR 0 2
27326: PUSH
27327: DOUBLE
27328: LD_INT 1
27330: DEC
27331: ST_TO_ADDR
27332: LD_INT 16
27334: PUSH
27335: FOR_TO
27336: IFFALSE 27535
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27338: LD_ADDR_VAR 0 3
27342: PUSH
27343: LD_INT 10
27345: PUSH
27346: LD_INT 20
27348: PUSH
27349: LD_INT 30
27351: PUSH
27352: LD_INT 40
27354: PUSH
27355: LD_INT 50
27357: PUSH
27358: LD_INT 60
27360: PUSH
27361: LD_INT 70
27363: PUSH
27364: LD_INT 80
27366: PUSH
27367: LD_INT 90
27369: PUSH
27370: LD_INT 100
27372: PUSH
27373: LD_INT 110
27375: PUSH
27376: LD_INT 120
27378: PUSH
27379: LD_INT 130
27381: PUSH
27382: LD_INT 140
27384: PUSH
27385: LD_INT 150
27387: PUSH
27388: EMPTY
27389: LIST
27390: LIST
27391: LIST
27392: LIST
27393: LIST
27394: LIST
27395: LIST
27396: LIST
27397: LIST
27398: LIST
27399: LIST
27400: LIST
27401: LIST
27402: LIST
27403: LIST
27404: PUSH
27405: LD_INT 1
27407: PPUSH
27408: LD_INT 15
27410: PPUSH
27411: CALL_OW 12
27415: ARRAY
27416: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27417: LD_ADDR_VAR 0 4
27421: PUSH
27422: LD_INT 10
27424: PUSH
27425: LD_INT 20
27427: PUSH
27428: LD_INT 30
27430: PUSH
27431: LD_INT 40
27433: PUSH
27434: LD_INT 50
27436: PUSH
27437: LD_INT 60
27439: PUSH
27440: LD_INT 70
27442: PUSH
27443: LD_INT 80
27445: PUSH
27446: LD_INT 90
27448: PUSH
27449: LD_INT 100
27451: PUSH
27452: LD_INT 110
27454: PUSH
27455: LD_INT 120
27457: PUSH
27458: LD_INT 130
27460: PUSH
27461: LD_INT 140
27463: PUSH
27464: LD_INT 150
27466: PUSH
27467: EMPTY
27468: LIST
27469: LIST
27470: LIST
27471: LIST
27472: LIST
27473: LIST
27474: LIST
27475: LIST
27476: LIST
27477: LIST
27478: LIST
27479: LIST
27480: LIST
27481: LIST
27482: LIST
27483: PUSH
27484: LD_INT 1
27486: PPUSH
27487: LD_INT 15
27489: PPUSH
27490: CALL_OW 12
27494: ARRAY
27495: ST_TO_ADDR
// if ValidHex ( x , y ) then
27496: LD_VAR 0 3
27500: PPUSH
27501: LD_VAR 0 4
27505: PPUSH
27506: CALL_OW 488
27510: IFFALSE 27533
// begin result := [ x , y ] ;
27512: LD_ADDR_VAR 0 1
27516: PUSH
27517: LD_VAR 0 3
27521: PUSH
27522: LD_VAR 0 4
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: ST_TO_ADDR
// break ;
27531: GO 27535
// end ; end ;
27533: GO 27335
27535: POP
27536: POP
// if result then
27537: LD_VAR 0 1
27541: IFFALSE 27601
// begin ToLua ( playSibBomb() ) ;
27543: LD_STRING playSibBomb()
27545: PPUSH
27546: CALL_OW 559
// wait ( 0 0$14 ) ;
27550: LD_INT 490
27552: PPUSH
27553: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27557: LD_VAR 0 1
27561: PUSH
27562: LD_INT 1
27564: ARRAY
27565: PPUSH
27566: LD_VAR 0 1
27570: PUSH
27571: LD_INT 2
27573: ARRAY
27574: PPUSH
27575: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27579: LD_VAR 0 1
27583: PUSH
27584: LD_INT 1
27586: ARRAY
27587: PPUSH
27588: LD_VAR 0 1
27592: PUSH
27593: LD_INT 2
27595: ARRAY
27596: PPUSH
27597: CALL_OW 429
// end ; end ;
27601: LD_VAR 0 1
27605: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27606: LD_EXP 60
27610: PUSH
27611: LD_EXP 82
27615: AND
27616: IFFALSE 27628
27618: GO 27620
27620: DISABLE
// YouLost (  ) ;
27621: LD_STRING 
27623: PPUSH
27624: CALL_OW 104
27628: END
// every 0 0$1 trigger StreamModeActive and sFog do
27629: LD_EXP 60
27633: PUSH
27634: LD_EXP 81
27638: AND
27639: IFFALSE 27653
27641: GO 27643
27643: DISABLE
// FogOff ( your_side ) ;
27644: LD_OWVAR 2
27648: PPUSH
27649: CALL_OW 344
27653: END
// every 0 0$1 trigger StreamModeActive and sSun do
27654: LD_EXP 60
27658: PUSH
27659: LD_EXP 83
27663: AND
27664: IFFALSE 27692
27666: GO 27668
27668: DISABLE
// begin solar_recharge_percent := 0 ;
27669: LD_ADDR_OWVAR 79
27673: PUSH
27674: LD_INT 0
27676: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27677: LD_INT 10500
27679: PPUSH
27680: CALL_OW 67
// solar_recharge_percent := 100 ;
27684: LD_ADDR_OWVAR 79
27688: PUSH
27689: LD_INT 100
27691: ST_TO_ADDR
// end ;
27692: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27693: LD_EXP 60
27697: PUSH
27698: LD_EXP 84
27702: AND
27703: IFFALSE 27942
27705: GO 27707
27707: DISABLE
27708: LD_INT 0
27710: PPUSH
27711: PPUSH
27712: PPUSH
// begin tmp := [ ] ;
27713: LD_ADDR_VAR 0 3
27717: PUSH
27718: EMPTY
27719: ST_TO_ADDR
// for i := 1 to 6 do
27720: LD_ADDR_VAR 0 1
27724: PUSH
27725: DOUBLE
27726: LD_INT 1
27728: DEC
27729: ST_TO_ADDR
27730: LD_INT 6
27732: PUSH
27733: FOR_TO
27734: IFFALSE 27839
// begin uc_nation := nation_nature ;
27736: LD_ADDR_OWVAR 21
27740: PUSH
27741: LD_INT 0
27743: ST_TO_ADDR
// uc_side := 0 ;
27744: LD_ADDR_OWVAR 20
27748: PUSH
27749: LD_INT 0
27751: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27752: LD_ADDR_OWVAR 29
27756: PUSH
27757: LD_INT 12
27759: PUSH
27760: LD_INT 12
27762: PUSH
27763: EMPTY
27764: LIST
27765: LIST
27766: ST_TO_ADDR
// hc_agressivity := 20 ;
27767: LD_ADDR_OWVAR 35
27771: PUSH
27772: LD_INT 20
27774: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27775: LD_ADDR_OWVAR 28
27779: PUSH
27780: LD_INT 17
27782: ST_TO_ADDR
// hc_gallery :=  ;
27783: LD_ADDR_OWVAR 33
27787: PUSH
27788: LD_STRING 
27790: ST_TO_ADDR
// hc_name :=  ;
27791: LD_ADDR_OWVAR 26
27795: PUSH
27796: LD_STRING 
27798: ST_TO_ADDR
// un := CreateHuman ;
27799: LD_ADDR_VAR 0 2
27803: PUSH
27804: CALL_OW 44
27808: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27809: LD_VAR 0 2
27813: PPUSH
27814: LD_INT 1
27816: PPUSH
27817: CALL_OW 51
// tmp := tmp ^ un ;
27821: LD_ADDR_VAR 0 3
27825: PUSH
27826: LD_VAR 0 3
27830: PUSH
27831: LD_VAR 0 2
27835: ADD
27836: ST_TO_ADDR
// end ;
27837: GO 27733
27839: POP
27840: POP
// repeat wait ( 0 0$1 ) ;
27841: LD_INT 35
27843: PPUSH
27844: CALL_OW 67
// for un in tmp do
27848: LD_ADDR_VAR 0 2
27852: PUSH
27853: LD_VAR 0 3
27857: PUSH
27858: FOR_IN
27859: IFFALSE 27933
// begin if IsDead ( un ) then
27861: LD_VAR 0 2
27865: PPUSH
27866: CALL_OW 301
27870: IFFALSE 27890
// begin tmp := tmp diff un ;
27872: LD_ADDR_VAR 0 3
27876: PUSH
27877: LD_VAR 0 3
27881: PUSH
27882: LD_VAR 0 2
27886: DIFF
27887: ST_TO_ADDR
// continue ;
27888: GO 27858
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27890: LD_VAR 0 2
27894: PPUSH
27895: LD_INT 3
27897: PUSH
27898: LD_INT 22
27900: PUSH
27901: LD_INT 0
27903: PUSH
27904: EMPTY
27905: LIST
27906: LIST
27907: PUSH
27908: EMPTY
27909: LIST
27910: LIST
27911: PPUSH
27912: CALL_OW 69
27916: PPUSH
27917: LD_VAR 0 2
27921: PPUSH
27922: CALL_OW 74
27926: PPUSH
27927: CALL_OW 115
// end ;
27931: GO 27858
27933: POP
27934: POP
// until not tmp ;
27935: LD_VAR 0 3
27939: NOT
27940: IFFALSE 27841
// end ;
27942: PPOPN 3
27944: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27945: LD_EXP 60
27949: PUSH
27950: LD_EXP 85
27954: AND
27955: IFFALSE 28009
27957: GO 27959
27959: DISABLE
// begin ToLua ( displayTroll(); ) ;
27960: LD_STRING displayTroll();
27962: PPUSH
27963: CALL_OW 559
// wait ( 3 3$00 ) ;
27967: LD_INT 6300
27969: PPUSH
27970: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27974: LD_STRING hideTroll();
27976: PPUSH
27977: CALL_OW 559
// wait ( 1 1$00 ) ;
27981: LD_INT 2100
27983: PPUSH
27984: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27988: LD_STRING displayTroll();
27990: PPUSH
27991: CALL_OW 559
// wait ( 1 1$00 ) ;
27995: LD_INT 2100
27997: PPUSH
27998: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28002: LD_STRING hideTroll();
28004: PPUSH
28005: CALL_OW 559
// end ;
28009: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28010: LD_EXP 60
28014: PUSH
28015: LD_EXP 86
28019: AND
28020: IFFALSE 28083
28022: GO 28024
28024: DISABLE
28025: LD_INT 0
28027: PPUSH
// begin p := 0 ;
28028: LD_ADDR_VAR 0 1
28032: PUSH
28033: LD_INT 0
28035: ST_TO_ADDR
// repeat game_speed := 1 ;
28036: LD_ADDR_OWVAR 65
28040: PUSH
28041: LD_INT 1
28043: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28044: LD_INT 35
28046: PPUSH
28047: CALL_OW 67
// p := p + 1 ;
28051: LD_ADDR_VAR 0 1
28055: PUSH
28056: LD_VAR 0 1
28060: PUSH
28061: LD_INT 1
28063: PLUS
28064: ST_TO_ADDR
// until p >= 60 ;
28065: LD_VAR 0 1
28069: PUSH
28070: LD_INT 60
28072: GREATEREQUAL
28073: IFFALSE 28036
// game_speed := 4 ;
28075: LD_ADDR_OWVAR 65
28079: PUSH
28080: LD_INT 4
28082: ST_TO_ADDR
// end ;
28083: PPOPN 1
28085: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28086: LD_EXP 60
28090: PUSH
28091: LD_EXP 87
28095: AND
28096: IFFALSE 28242
28098: GO 28100
28100: DISABLE
28101: LD_INT 0
28103: PPUSH
28104: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28105: LD_ADDR_VAR 0 1
28109: PUSH
28110: LD_INT 22
28112: PUSH
28113: LD_OWVAR 2
28117: PUSH
28118: EMPTY
28119: LIST
28120: LIST
28121: PUSH
28122: LD_INT 2
28124: PUSH
28125: LD_INT 30
28127: PUSH
28128: LD_INT 0
28130: PUSH
28131: EMPTY
28132: LIST
28133: LIST
28134: PUSH
28135: LD_INT 30
28137: PUSH
28138: LD_INT 1
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: PUSH
28145: EMPTY
28146: LIST
28147: LIST
28148: LIST
28149: PUSH
28150: EMPTY
28151: LIST
28152: LIST
28153: PPUSH
28154: CALL_OW 69
28158: ST_TO_ADDR
// if not depot then
28159: LD_VAR 0 1
28163: NOT
28164: IFFALSE 28168
// exit ;
28166: GO 28242
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28168: LD_ADDR_VAR 0 2
28172: PUSH
28173: LD_VAR 0 1
28177: PUSH
28178: LD_INT 1
28180: PPUSH
28181: LD_VAR 0 1
28185: PPUSH
28186: CALL_OW 12
28190: ARRAY
28191: PPUSH
28192: CALL_OW 274
28196: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28197: LD_VAR 0 2
28201: PPUSH
28202: LD_INT 1
28204: PPUSH
28205: LD_INT 0
28207: PPUSH
28208: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28212: LD_VAR 0 2
28216: PPUSH
28217: LD_INT 2
28219: PPUSH
28220: LD_INT 0
28222: PPUSH
28223: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28227: LD_VAR 0 2
28231: PPUSH
28232: LD_INT 3
28234: PPUSH
28235: LD_INT 0
28237: PPUSH
28238: CALL_OW 277
// end ;
28242: PPOPN 2
28244: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28245: LD_EXP 60
28249: PUSH
28250: LD_EXP 88
28254: AND
28255: IFFALSE 28352
28257: GO 28259
28259: DISABLE
28260: LD_INT 0
28262: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28263: LD_ADDR_VAR 0 1
28267: PUSH
28268: LD_INT 22
28270: PUSH
28271: LD_OWVAR 2
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: PUSH
28280: LD_INT 21
28282: PUSH
28283: LD_INT 1
28285: PUSH
28286: EMPTY
28287: LIST
28288: LIST
28289: PUSH
28290: LD_INT 3
28292: PUSH
28293: LD_INT 23
28295: PUSH
28296: LD_INT 0
28298: PUSH
28299: EMPTY
28300: LIST
28301: LIST
28302: PUSH
28303: EMPTY
28304: LIST
28305: LIST
28306: PUSH
28307: EMPTY
28308: LIST
28309: LIST
28310: LIST
28311: PPUSH
28312: CALL_OW 69
28316: ST_TO_ADDR
// if not tmp then
28317: LD_VAR 0 1
28321: NOT
28322: IFFALSE 28326
// exit ;
28324: GO 28352
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28326: LD_VAR 0 1
28330: PUSH
28331: LD_INT 1
28333: PPUSH
28334: LD_VAR 0 1
28338: PPUSH
28339: CALL_OW 12
28343: ARRAY
28344: PPUSH
28345: LD_INT 200
28347: PPUSH
28348: CALL_OW 234
// end ;
28352: PPOPN 1
28354: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28355: LD_EXP 60
28359: PUSH
28360: LD_EXP 89
28364: AND
28365: IFFALSE 28444
28367: GO 28369
28369: DISABLE
28370: LD_INT 0
28372: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28373: LD_ADDR_VAR 0 1
28377: PUSH
28378: LD_INT 22
28380: PUSH
28381: LD_OWVAR 2
28385: PUSH
28386: EMPTY
28387: LIST
28388: LIST
28389: PUSH
28390: LD_INT 21
28392: PUSH
28393: LD_INT 2
28395: PUSH
28396: EMPTY
28397: LIST
28398: LIST
28399: PUSH
28400: EMPTY
28401: LIST
28402: LIST
28403: PPUSH
28404: CALL_OW 69
28408: ST_TO_ADDR
// if not tmp then
28409: LD_VAR 0 1
28413: NOT
28414: IFFALSE 28418
// exit ;
28416: GO 28444
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28418: LD_VAR 0 1
28422: PUSH
28423: LD_INT 1
28425: PPUSH
28426: LD_VAR 0 1
28430: PPUSH
28431: CALL_OW 12
28435: ARRAY
28436: PPUSH
28437: LD_INT 60
28439: PPUSH
28440: CALL_OW 234
// end ;
28444: PPOPN 1
28446: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28447: LD_EXP 60
28451: PUSH
28452: LD_EXP 90
28456: AND
28457: IFFALSE 28556
28459: GO 28461
28461: DISABLE
28462: LD_INT 0
28464: PPUSH
28465: PPUSH
// begin enable ;
28466: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28467: LD_ADDR_VAR 0 1
28471: PUSH
28472: LD_INT 22
28474: PUSH
28475: LD_OWVAR 2
28479: PUSH
28480: EMPTY
28481: LIST
28482: LIST
28483: PUSH
28484: LD_INT 61
28486: PUSH
28487: EMPTY
28488: LIST
28489: PUSH
28490: LD_INT 33
28492: PUSH
28493: LD_INT 2
28495: PUSH
28496: EMPTY
28497: LIST
28498: LIST
28499: PUSH
28500: EMPTY
28501: LIST
28502: LIST
28503: LIST
28504: PPUSH
28505: CALL_OW 69
28509: ST_TO_ADDR
// if not tmp then
28510: LD_VAR 0 1
28514: NOT
28515: IFFALSE 28519
// exit ;
28517: GO 28556
// for i in tmp do
28519: LD_ADDR_VAR 0 2
28523: PUSH
28524: LD_VAR 0 1
28528: PUSH
28529: FOR_IN
28530: IFFALSE 28554
// if IsControledBy ( i ) then
28532: LD_VAR 0 2
28536: PPUSH
28537: CALL_OW 312
28541: IFFALSE 28552
// ComUnlink ( i ) ;
28543: LD_VAR 0 2
28547: PPUSH
28548: CALL_OW 136
28552: GO 28529
28554: POP
28555: POP
// end ;
28556: PPOPN 2
28558: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28559: LD_EXP 60
28563: PUSH
28564: LD_EXP 91
28568: AND
28569: IFFALSE 28709
28571: GO 28573
28573: DISABLE
28574: LD_INT 0
28576: PPUSH
28577: PPUSH
// begin ToLua ( displayPowell(); ) ;
28578: LD_STRING displayPowell();
28580: PPUSH
28581: CALL_OW 559
// uc_side := 0 ;
28585: LD_ADDR_OWVAR 20
28589: PUSH
28590: LD_INT 0
28592: ST_TO_ADDR
// uc_nation := 2 ;
28593: LD_ADDR_OWVAR 21
28597: PUSH
28598: LD_INT 2
28600: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28601: LD_ADDR_OWVAR 37
28605: PUSH
28606: LD_INT 14
28608: ST_TO_ADDR
// vc_engine := engine_siberite ;
28609: LD_ADDR_OWVAR 39
28613: PUSH
28614: LD_INT 3
28616: ST_TO_ADDR
// vc_control := control_apeman ;
28617: LD_ADDR_OWVAR 38
28621: PUSH
28622: LD_INT 5
28624: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28625: LD_ADDR_OWVAR 40
28629: PUSH
28630: LD_INT 29
28632: ST_TO_ADDR
// un := CreateVehicle ;
28633: LD_ADDR_VAR 0 2
28637: PUSH
28638: CALL_OW 45
28642: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28643: LD_VAR 0 2
28647: PPUSH
28648: LD_INT 1
28650: PPUSH
28651: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28655: LD_INT 35
28657: PPUSH
28658: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28662: LD_VAR 0 2
28666: PPUSH
28667: LD_INT 22
28669: PUSH
28670: LD_OWVAR 2
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: PPUSH
28679: CALL_OW 69
28683: PPUSH
28684: LD_VAR 0 2
28688: PPUSH
28689: CALL_OW 74
28693: PPUSH
28694: CALL_OW 115
// until IsDead ( un ) ;
28698: LD_VAR 0 2
28702: PPUSH
28703: CALL_OW 301
28707: IFFALSE 28655
// end ;
28709: PPOPN 2
28711: END
// every 0 0$1 trigger StreamModeActive and sStu do
28712: LD_EXP 60
28716: PUSH
28717: LD_EXP 99
28721: AND
28722: IFFALSE 28738
28724: GO 28726
28726: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28727: LD_STRING displayStucuk();
28729: PPUSH
28730: CALL_OW 559
// ResetFog ;
28734: CALL_OW 335
// end ;
28738: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28739: LD_EXP 60
28743: PUSH
28744: LD_EXP 92
28748: AND
28749: IFFALSE 28890
28751: GO 28753
28753: DISABLE
28754: LD_INT 0
28756: PPUSH
28757: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28758: LD_ADDR_VAR 0 2
28762: PUSH
28763: LD_INT 22
28765: PUSH
28766: LD_OWVAR 2
28770: PUSH
28771: EMPTY
28772: LIST
28773: LIST
28774: PUSH
28775: LD_INT 21
28777: PUSH
28778: LD_INT 1
28780: PUSH
28781: EMPTY
28782: LIST
28783: LIST
28784: PUSH
28785: EMPTY
28786: LIST
28787: LIST
28788: PPUSH
28789: CALL_OW 69
28793: ST_TO_ADDR
// if not tmp then
28794: LD_VAR 0 2
28798: NOT
28799: IFFALSE 28803
// exit ;
28801: GO 28890
// un := tmp [ rand ( 1 , tmp ) ] ;
28803: LD_ADDR_VAR 0 1
28807: PUSH
28808: LD_VAR 0 2
28812: PUSH
28813: LD_INT 1
28815: PPUSH
28816: LD_VAR 0 2
28820: PPUSH
28821: CALL_OW 12
28825: ARRAY
28826: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28827: LD_VAR 0 1
28831: PPUSH
28832: LD_INT 0
28834: PPUSH
28835: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28839: LD_VAR 0 1
28843: PPUSH
28844: LD_OWVAR 3
28848: PUSH
28849: LD_VAR 0 1
28853: DIFF
28854: PPUSH
28855: LD_VAR 0 1
28859: PPUSH
28860: CALL_OW 74
28864: PPUSH
28865: CALL_OW 115
// wait ( 0 0$20 ) ;
28869: LD_INT 700
28871: PPUSH
28872: CALL_OW 67
// SetSide ( un , your_side ) ;
28876: LD_VAR 0 1
28880: PPUSH
28881: LD_OWVAR 2
28885: PPUSH
28886: CALL_OW 235
// end ;
28890: PPOPN 2
28892: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28893: LD_EXP 60
28897: PUSH
28898: LD_EXP 93
28902: AND
28903: IFFALSE 29009
28905: GO 28907
28907: DISABLE
28908: LD_INT 0
28910: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28911: LD_ADDR_VAR 0 1
28915: PUSH
28916: LD_INT 22
28918: PUSH
28919: LD_OWVAR 2
28923: PUSH
28924: EMPTY
28925: LIST
28926: LIST
28927: PUSH
28928: LD_INT 2
28930: PUSH
28931: LD_INT 30
28933: PUSH
28934: LD_INT 0
28936: PUSH
28937: EMPTY
28938: LIST
28939: LIST
28940: PUSH
28941: LD_INT 30
28943: PUSH
28944: LD_INT 1
28946: PUSH
28947: EMPTY
28948: LIST
28949: LIST
28950: PUSH
28951: EMPTY
28952: LIST
28953: LIST
28954: LIST
28955: PUSH
28956: EMPTY
28957: LIST
28958: LIST
28959: PPUSH
28960: CALL_OW 69
28964: ST_TO_ADDR
// if not depot then
28965: LD_VAR 0 1
28969: NOT
28970: IFFALSE 28974
// exit ;
28972: GO 29009
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28974: LD_VAR 0 1
28978: PUSH
28979: LD_INT 1
28981: ARRAY
28982: PPUSH
28983: CALL_OW 250
28987: PPUSH
28988: LD_VAR 0 1
28992: PUSH
28993: LD_INT 1
28995: ARRAY
28996: PPUSH
28997: CALL_OW 251
29001: PPUSH
29002: LD_INT 70
29004: PPUSH
29005: CALL_OW 495
// end ;
29009: PPOPN 1
29011: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29012: LD_EXP 60
29016: PUSH
29017: LD_EXP 94
29021: AND
29022: IFFALSE 29233
29024: GO 29026
29026: DISABLE
29027: LD_INT 0
29029: PPUSH
29030: PPUSH
29031: PPUSH
29032: PPUSH
29033: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29034: LD_ADDR_VAR 0 5
29038: PUSH
29039: LD_INT 22
29041: PUSH
29042: LD_OWVAR 2
29046: PUSH
29047: EMPTY
29048: LIST
29049: LIST
29050: PUSH
29051: LD_INT 21
29053: PUSH
29054: LD_INT 1
29056: PUSH
29057: EMPTY
29058: LIST
29059: LIST
29060: PUSH
29061: EMPTY
29062: LIST
29063: LIST
29064: PPUSH
29065: CALL_OW 69
29069: ST_TO_ADDR
// if not tmp then
29070: LD_VAR 0 5
29074: NOT
29075: IFFALSE 29079
// exit ;
29077: GO 29233
// for i in tmp do
29079: LD_ADDR_VAR 0 1
29083: PUSH
29084: LD_VAR 0 5
29088: PUSH
29089: FOR_IN
29090: IFFALSE 29231
// begin d := rand ( 0 , 5 ) ;
29092: LD_ADDR_VAR 0 4
29096: PUSH
29097: LD_INT 0
29099: PPUSH
29100: LD_INT 5
29102: PPUSH
29103: CALL_OW 12
29107: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29108: LD_ADDR_VAR 0 2
29112: PUSH
29113: LD_VAR 0 1
29117: PPUSH
29118: CALL_OW 250
29122: PPUSH
29123: LD_VAR 0 4
29127: PPUSH
29128: LD_INT 3
29130: PPUSH
29131: LD_INT 12
29133: PPUSH
29134: CALL_OW 12
29138: PPUSH
29139: CALL_OW 272
29143: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29144: LD_ADDR_VAR 0 3
29148: PUSH
29149: LD_VAR 0 1
29153: PPUSH
29154: CALL_OW 251
29158: PPUSH
29159: LD_VAR 0 4
29163: PPUSH
29164: LD_INT 3
29166: PPUSH
29167: LD_INT 12
29169: PPUSH
29170: CALL_OW 12
29174: PPUSH
29175: CALL_OW 273
29179: ST_TO_ADDR
// if ValidHex ( x , y ) then
29180: LD_VAR 0 2
29184: PPUSH
29185: LD_VAR 0 3
29189: PPUSH
29190: CALL_OW 488
29194: IFFALSE 29229
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29196: LD_VAR 0 1
29200: PPUSH
29201: LD_VAR 0 2
29205: PPUSH
29206: LD_VAR 0 3
29210: PPUSH
29211: LD_INT 3
29213: PPUSH
29214: LD_INT 6
29216: PPUSH
29217: CALL_OW 12
29221: PPUSH
29222: LD_INT 1
29224: PPUSH
29225: CALL_OW 483
// end ;
29229: GO 29089
29231: POP
29232: POP
// end ;
29233: PPOPN 5
29235: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29236: LD_EXP 60
29240: PUSH
29241: LD_EXP 95
29245: AND
29246: IFFALSE 29340
29248: GO 29250
29250: DISABLE
29251: LD_INT 0
29253: PPUSH
29254: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29255: LD_ADDR_VAR 0 2
29259: PUSH
29260: LD_INT 22
29262: PUSH
29263: LD_OWVAR 2
29267: PUSH
29268: EMPTY
29269: LIST
29270: LIST
29271: PUSH
29272: LD_INT 32
29274: PUSH
29275: LD_INT 1
29277: PUSH
29278: EMPTY
29279: LIST
29280: LIST
29281: PUSH
29282: LD_INT 21
29284: PUSH
29285: LD_INT 2
29287: PUSH
29288: EMPTY
29289: LIST
29290: LIST
29291: PUSH
29292: EMPTY
29293: LIST
29294: LIST
29295: LIST
29296: PPUSH
29297: CALL_OW 69
29301: ST_TO_ADDR
// if not tmp then
29302: LD_VAR 0 2
29306: NOT
29307: IFFALSE 29311
// exit ;
29309: GO 29340
// for i in tmp do
29311: LD_ADDR_VAR 0 1
29315: PUSH
29316: LD_VAR 0 2
29320: PUSH
29321: FOR_IN
29322: IFFALSE 29338
// SetFuel ( i , 0 ) ;
29324: LD_VAR 0 1
29328: PPUSH
29329: LD_INT 0
29331: PPUSH
29332: CALL_OW 240
29336: GO 29321
29338: POP
29339: POP
// end ;
29340: PPOPN 2
29342: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29343: LD_EXP 60
29347: PUSH
29348: LD_EXP 96
29352: AND
29353: IFFALSE 29419
29355: GO 29357
29357: DISABLE
29358: LD_INT 0
29360: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29361: LD_ADDR_VAR 0 1
29365: PUSH
29366: LD_INT 22
29368: PUSH
29369: LD_OWVAR 2
29373: PUSH
29374: EMPTY
29375: LIST
29376: LIST
29377: PUSH
29378: LD_INT 30
29380: PUSH
29381: LD_INT 29
29383: PUSH
29384: EMPTY
29385: LIST
29386: LIST
29387: PUSH
29388: EMPTY
29389: LIST
29390: LIST
29391: PPUSH
29392: CALL_OW 69
29396: ST_TO_ADDR
// if not tmp then
29397: LD_VAR 0 1
29401: NOT
29402: IFFALSE 29406
// exit ;
29404: GO 29419
// DestroyUnit ( tmp [ 1 ] ) ;
29406: LD_VAR 0 1
29410: PUSH
29411: LD_INT 1
29413: ARRAY
29414: PPUSH
29415: CALL_OW 65
// end ;
29419: PPOPN 1
29421: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29422: LD_EXP 60
29426: PUSH
29427: LD_EXP 98
29431: AND
29432: IFFALSE 29561
29434: GO 29436
29436: DISABLE
29437: LD_INT 0
29439: PPUSH
// begin uc_side := 0 ;
29440: LD_ADDR_OWVAR 20
29444: PUSH
29445: LD_INT 0
29447: ST_TO_ADDR
// uc_nation := nation_arabian ;
29448: LD_ADDR_OWVAR 21
29452: PUSH
29453: LD_INT 2
29455: ST_TO_ADDR
// hc_gallery :=  ;
29456: LD_ADDR_OWVAR 33
29460: PUSH
29461: LD_STRING 
29463: ST_TO_ADDR
// hc_name :=  ;
29464: LD_ADDR_OWVAR 26
29468: PUSH
29469: LD_STRING 
29471: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29472: LD_INT 1
29474: PPUSH
29475: LD_INT 11
29477: PPUSH
29478: LD_INT 10
29480: PPUSH
29481: CALL_OW 380
// un := CreateHuman ;
29485: LD_ADDR_VAR 0 1
29489: PUSH
29490: CALL_OW 44
29494: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29495: LD_VAR 0 1
29499: PPUSH
29500: LD_INT 1
29502: PPUSH
29503: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29507: LD_INT 35
29509: PPUSH
29510: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29514: LD_VAR 0 1
29518: PPUSH
29519: LD_INT 22
29521: PUSH
29522: LD_OWVAR 2
29526: PUSH
29527: EMPTY
29528: LIST
29529: LIST
29530: PPUSH
29531: CALL_OW 69
29535: PPUSH
29536: LD_VAR 0 1
29540: PPUSH
29541: CALL_OW 74
29545: PPUSH
29546: CALL_OW 115
// until IsDead ( un ) ;
29550: LD_VAR 0 1
29554: PPUSH
29555: CALL_OW 301
29559: IFFALSE 29507
// end ;
29561: PPOPN 1
29563: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29564: LD_EXP 60
29568: PUSH
29569: LD_EXP 100
29573: AND
29574: IFFALSE 29586
29576: GO 29578
29578: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29579: LD_STRING earthquake(getX(game), 0, 32)
29581: PPUSH
29582: CALL_OW 559
29586: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29587: LD_EXP 60
29591: PUSH
29592: LD_EXP 101
29596: AND
29597: IFFALSE 29688
29599: GO 29601
29601: DISABLE
29602: LD_INT 0
29604: PPUSH
// begin enable ;
29605: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29606: LD_ADDR_VAR 0 1
29610: PUSH
29611: LD_INT 22
29613: PUSH
29614: LD_OWVAR 2
29618: PUSH
29619: EMPTY
29620: LIST
29621: LIST
29622: PUSH
29623: LD_INT 21
29625: PUSH
29626: LD_INT 2
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: PUSH
29633: LD_INT 33
29635: PUSH
29636: LD_INT 3
29638: PUSH
29639: EMPTY
29640: LIST
29641: LIST
29642: PUSH
29643: EMPTY
29644: LIST
29645: LIST
29646: LIST
29647: PPUSH
29648: CALL_OW 69
29652: ST_TO_ADDR
// if not tmp then
29653: LD_VAR 0 1
29657: NOT
29658: IFFALSE 29662
// exit ;
29660: GO 29688
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29662: LD_VAR 0 1
29666: PUSH
29667: LD_INT 1
29669: PPUSH
29670: LD_VAR 0 1
29674: PPUSH
29675: CALL_OW 12
29679: ARRAY
29680: PPUSH
29681: LD_INT 1
29683: PPUSH
29684: CALL_OW 234
// end ;
29688: PPOPN 1
29690: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29691: LD_EXP 60
29695: PUSH
29696: LD_EXP 102
29700: AND
29701: IFFALSE 29842
29703: GO 29705
29705: DISABLE
29706: LD_INT 0
29708: PPUSH
29709: PPUSH
29710: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29711: LD_ADDR_VAR 0 3
29715: PUSH
29716: LD_INT 22
29718: PUSH
29719: LD_OWVAR 2
29723: PUSH
29724: EMPTY
29725: LIST
29726: LIST
29727: PUSH
29728: LD_INT 25
29730: PUSH
29731: LD_INT 1
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: PUSH
29738: EMPTY
29739: LIST
29740: LIST
29741: PPUSH
29742: CALL_OW 69
29746: ST_TO_ADDR
// if not tmp then
29747: LD_VAR 0 3
29751: NOT
29752: IFFALSE 29756
// exit ;
29754: GO 29842
// un := tmp [ rand ( 1 , tmp ) ] ;
29756: LD_ADDR_VAR 0 2
29760: PUSH
29761: LD_VAR 0 3
29765: PUSH
29766: LD_INT 1
29768: PPUSH
29769: LD_VAR 0 3
29773: PPUSH
29774: CALL_OW 12
29778: ARRAY
29779: ST_TO_ADDR
// if Crawls ( un ) then
29780: LD_VAR 0 2
29784: PPUSH
29785: CALL_OW 318
29789: IFFALSE 29800
// ComWalk ( un ) ;
29791: LD_VAR 0 2
29795: PPUSH
29796: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29800: LD_VAR 0 2
29804: PPUSH
29805: LD_INT 9
29807: PPUSH
29808: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29812: LD_INT 28
29814: PPUSH
29815: LD_OWVAR 2
29819: PPUSH
29820: LD_INT 2
29822: PPUSH
29823: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29827: LD_INT 29
29829: PPUSH
29830: LD_OWVAR 2
29834: PPUSH
29835: LD_INT 2
29837: PPUSH
29838: CALL_OW 322
// end ;
29842: PPOPN 3
29844: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29845: LD_EXP 60
29849: PUSH
29850: LD_EXP 103
29854: AND
29855: IFFALSE 29966
29857: GO 29859
29859: DISABLE
29860: LD_INT 0
29862: PPUSH
29863: PPUSH
29864: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29865: LD_ADDR_VAR 0 3
29869: PUSH
29870: LD_INT 22
29872: PUSH
29873: LD_OWVAR 2
29877: PUSH
29878: EMPTY
29879: LIST
29880: LIST
29881: PUSH
29882: LD_INT 25
29884: PUSH
29885: LD_INT 1
29887: PUSH
29888: EMPTY
29889: LIST
29890: LIST
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: PPUSH
29896: CALL_OW 69
29900: ST_TO_ADDR
// if not tmp then
29901: LD_VAR 0 3
29905: NOT
29906: IFFALSE 29910
// exit ;
29908: GO 29966
// un := tmp [ rand ( 1 , tmp ) ] ;
29910: LD_ADDR_VAR 0 2
29914: PUSH
29915: LD_VAR 0 3
29919: PUSH
29920: LD_INT 1
29922: PPUSH
29923: LD_VAR 0 3
29927: PPUSH
29928: CALL_OW 12
29932: ARRAY
29933: ST_TO_ADDR
// if Crawls ( un ) then
29934: LD_VAR 0 2
29938: PPUSH
29939: CALL_OW 318
29943: IFFALSE 29954
// ComWalk ( un ) ;
29945: LD_VAR 0 2
29949: PPUSH
29950: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29954: LD_VAR 0 2
29958: PPUSH
29959: LD_INT 8
29961: PPUSH
29962: CALL_OW 336
// end ;
29966: PPOPN 3
29968: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29969: LD_EXP 60
29973: PUSH
29974: LD_EXP 104
29978: AND
29979: IFFALSE 30123
29981: GO 29983
29983: DISABLE
29984: LD_INT 0
29986: PPUSH
29987: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29988: LD_ADDR_VAR 0 2
29992: PUSH
29993: LD_INT 22
29995: PUSH
29996: LD_OWVAR 2
30000: PUSH
30001: EMPTY
30002: LIST
30003: LIST
30004: PUSH
30005: LD_INT 21
30007: PUSH
30008: LD_INT 2
30010: PUSH
30011: EMPTY
30012: LIST
30013: LIST
30014: PUSH
30015: LD_INT 2
30017: PUSH
30018: LD_INT 34
30020: PUSH
30021: LD_INT 12
30023: PUSH
30024: EMPTY
30025: LIST
30026: LIST
30027: PUSH
30028: LD_INT 34
30030: PUSH
30031: LD_INT 51
30033: PUSH
30034: EMPTY
30035: LIST
30036: LIST
30037: PUSH
30038: LD_INT 34
30040: PUSH
30041: LD_INT 32
30043: PUSH
30044: EMPTY
30045: LIST
30046: LIST
30047: PUSH
30048: EMPTY
30049: LIST
30050: LIST
30051: LIST
30052: LIST
30053: PUSH
30054: EMPTY
30055: LIST
30056: LIST
30057: LIST
30058: PPUSH
30059: CALL_OW 69
30063: ST_TO_ADDR
// if not tmp then
30064: LD_VAR 0 2
30068: NOT
30069: IFFALSE 30073
// exit ;
30071: GO 30123
// for i in tmp do
30073: LD_ADDR_VAR 0 1
30077: PUSH
30078: LD_VAR 0 2
30082: PUSH
30083: FOR_IN
30084: IFFALSE 30121
// if GetCargo ( i , mat_artifact ) = 0 then
30086: LD_VAR 0 1
30090: PPUSH
30091: LD_INT 4
30093: PPUSH
30094: CALL_OW 289
30098: PUSH
30099: LD_INT 0
30101: EQUAL
30102: IFFALSE 30119
// SetCargo ( i , mat_siberit , 100 ) ;
30104: LD_VAR 0 1
30108: PPUSH
30109: LD_INT 3
30111: PPUSH
30112: LD_INT 100
30114: PPUSH
30115: CALL_OW 290
30119: GO 30083
30121: POP
30122: POP
// end ;
30123: PPOPN 2
30125: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30126: LD_EXP 60
30130: PUSH
30131: LD_EXP 105
30135: AND
30136: IFFALSE 30319
30138: GO 30140
30140: DISABLE
30141: LD_INT 0
30143: PPUSH
30144: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30145: LD_ADDR_VAR 0 2
30149: PUSH
30150: LD_INT 22
30152: PUSH
30153: LD_OWVAR 2
30157: PUSH
30158: EMPTY
30159: LIST
30160: LIST
30161: PPUSH
30162: CALL_OW 69
30166: ST_TO_ADDR
// if not tmp then
30167: LD_VAR 0 2
30171: NOT
30172: IFFALSE 30176
// exit ;
30174: GO 30319
// for i := 1 to 2 do
30176: LD_ADDR_VAR 0 1
30180: PUSH
30181: DOUBLE
30182: LD_INT 1
30184: DEC
30185: ST_TO_ADDR
30186: LD_INT 2
30188: PUSH
30189: FOR_TO
30190: IFFALSE 30317
// begin uc_side := your_side ;
30192: LD_ADDR_OWVAR 20
30196: PUSH
30197: LD_OWVAR 2
30201: ST_TO_ADDR
// uc_nation := nation_american ;
30202: LD_ADDR_OWVAR 21
30206: PUSH
30207: LD_INT 1
30209: ST_TO_ADDR
// vc_chassis := us_morphling ;
30210: LD_ADDR_OWVAR 37
30214: PUSH
30215: LD_INT 5
30217: ST_TO_ADDR
// vc_engine := engine_siberite ;
30218: LD_ADDR_OWVAR 39
30222: PUSH
30223: LD_INT 3
30225: ST_TO_ADDR
// vc_control := control_computer ;
30226: LD_ADDR_OWVAR 38
30230: PUSH
30231: LD_INT 3
30233: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30234: LD_ADDR_OWVAR 40
30238: PUSH
30239: LD_INT 10
30241: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30242: LD_VAR 0 2
30246: PUSH
30247: LD_INT 1
30249: ARRAY
30250: PPUSH
30251: CALL_OW 310
30255: NOT
30256: IFFALSE 30303
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30258: CALL_OW 45
30262: PPUSH
30263: LD_VAR 0 2
30267: PUSH
30268: LD_INT 1
30270: ARRAY
30271: PPUSH
30272: CALL_OW 250
30276: PPUSH
30277: LD_VAR 0 2
30281: PUSH
30282: LD_INT 1
30284: ARRAY
30285: PPUSH
30286: CALL_OW 251
30290: PPUSH
30291: LD_INT 12
30293: PPUSH
30294: LD_INT 1
30296: PPUSH
30297: CALL_OW 50
30301: GO 30315
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30303: CALL_OW 45
30307: PPUSH
30308: LD_INT 1
30310: PPUSH
30311: CALL_OW 51
// end ;
30315: GO 30189
30317: POP
30318: POP
// end ;
30319: PPOPN 2
30321: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30322: LD_EXP 60
30326: PUSH
30327: LD_EXP 106
30331: AND
30332: IFFALSE 30554
30334: GO 30336
30336: DISABLE
30337: LD_INT 0
30339: PPUSH
30340: PPUSH
30341: PPUSH
30342: PPUSH
30343: PPUSH
30344: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30345: LD_ADDR_VAR 0 6
30349: PUSH
30350: LD_INT 22
30352: PUSH
30353: LD_OWVAR 2
30357: PUSH
30358: EMPTY
30359: LIST
30360: LIST
30361: PUSH
30362: LD_INT 21
30364: PUSH
30365: LD_INT 1
30367: PUSH
30368: EMPTY
30369: LIST
30370: LIST
30371: PUSH
30372: LD_INT 3
30374: PUSH
30375: LD_INT 23
30377: PUSH
30378: LD_INT 0
30380: PUSH
30381: EMPTY
30382: LIST
30383: LIST
30384: PUSH
30385: EMPTY
30386: LIST
30387: LIST
30388: PUSH
30389: EMPTY
30390: LIST
30391: LIST
30392: LIST
30393: PPUSH
30394: CALL_OW 69
30398: ST_TO_ADDR
// if not tmp then
30399: LD_VAR 0 6
30403: NOT
30404: IFFALSE 30408
// exit ;
30406: GO 30554
// s1 := rand ( 1 , 4 ) ;
30408: LD_ADDR_VAR 0 2
30412: PUSH
30413: LD_INT 1
30415: PPUSH
30416: LD_INT 4
30418: PPUSH
30419: CALL_OW 12
30423: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30424: LD_ADDR_VAR 0 4
30428: PUSH
30429: LD_VAR 0 6
30433: PUSH
30434: LD_INT 1
30436: ARRAY
30437: PPUSH
30438: LD_VAR 0 2
30442: PPUSH
30443: CALL_OW 259
30447: ST_TO_ADDR
// if s1 = 1 then
30448: LD_VAR 0 2
30452: PUSH
30453: LD_INT 1
30455: EQUAL
30456: IFFALSE 30476
// s2 := rand ( 2 , 4 ) else
30458: LD_ADDR_VAR 0 3
30462: PUSH
30463: LD_INT 2
30465: PPUSH
30466: LD_INT 4
30468: PPUSH
30469: CALL_OW 12
30473: ST_TO_ADDR
30474: GO 30484
// s2 := 1 ;
30476: LD_ADDR_VAR 0 3
30480: PUSH
30481: LD_INT 1
30483: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30484: LD_ADDR_VAR 0 5
30488: PUSH
30489: LD_VAR 0 6
30493: PUSH
30494: LD_INT 1
30496: ARRAY
30497: PPUSH
30498: LD_VAR 0 3
30502: PPUSH
30503: CALL_OW 259
30507: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30508: LD_VAR 0 6
30512: PUSH
30513: LD_INT 1
30515: ARRAY
30516: PPUSH
30517: LD_VAR 0 2
30521: PPUSH
30522: LD_VAR 0 5
30526: PPUSH
30527: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30531: LD_VAR 0 6
30535: PUSH
30536: LD_INT 1
30538: ARRAY
30539: PPUSH
30540: LD_VAR 0 3
30544: PPUSH
30545: LD_VAR 0 4
30549: PPUSH
30550: CALL_OW 237
// end ;
30554: PPOPN 6
30556: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30557: LD_EXP 60
30561: PUSH
30562: LD_EXP 107
30566: AND
30567: IFFALSE 30646
30569: GO 30571
30571: DISABLE
30572: LD_INT 0
30574: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30575: LD_ADDR_VAR 0 1
30579: PUSH
30580: LD_INT 22
30582: PUSH
30583: LD_OWVAR 2
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: PUSH
30592: LD_INT 30
30594: PUSH
30595: LD_INT 3
30597: PUSH
30598: EMPTY
30599: LIST
30600: LIST
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PPUSH
30606: CALL_OW 69
30610: ST_TO_ADDR
// if not tmp then
30611: LD_VAR 0 1
30615: NOT
30616: IFFALSE 30620
// exit ;
30618: GO 30646
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30620: LD_VAR 0 1
30624: PUSH
30625: LD_INT 1
30627: PPUSH
30628: LD_VAR 0 1
30632: PPUSH
30633: CALL_OW 12
30637: ARRAY
30638: PPUSH
30639: LD_INT 1
30641: PPUSH
30642: CALL_OW 234
// end ;
30646: PPOPN 1
30648: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30649: LD_EXP 60
30653: PUSH
30654: LD_EXP 108
30658: AND
30659: IFFALSE 30771
30661: GO 30663
30663: DISABLE
30664: LD_INT 0
30666: PPUSH
30667: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30668: LD_ADDR_VAR 0 2
30672: PUSH
30673: LD_INT 22
30675: PUSH
30676: LD_OWVAR 2
30680: PUSH
30681: EMPTY
30682: LIST
30683: LIST
30684: PUSH
30685: LD_INT 2
30687: PUSH
30688: LD_INT 30
30690: PUSH
30691: LD_INT 27
30693: PUSH
30694: EMPTY
30695: LIST
30696: LIST
30697: PUSH
30698: LD_INT 30
30700: PUSH
30701: LD_INT 26
30703: PUSH
30704: EMPTY
30705: LIST
30706: LIST
30707: PUSH
30708: LD_INT 30
30710: PUSH
30711: LD_INT 28
30713: PUSH
30714: EMPTY
30715: LIST
30716: LIST
30717: PUSH
30718: EMPTY
30719: LIST
30720: LIST
30721: LIST
30722: LIST
30723: PUSH
30724: EMPTY
30725: LIST
30726: LIST
30727: PPUSH
30728: CALL_OW 69
30732: ST_TO_ADDR
// if not tmp then
30733: LD_VAR 0 2
30737: NOT
30738: IFFALSE 30742
// exit ;
30740: GO 30771
// for i in tmp do
30742: LD_ADDR_VAR 0 1
30746: PUSH
30747: LD_VAR 0 2
30751: PUSH
30752: FOR_IN
30753: IFFALSE 30769
// SetLives ( i , 1 ) ;
30755: LD_VAR 0 1
30759: PPUSH
30760: LD_INT 1
30762: PPUSH
30763: CALL_OW 234
30767: GO 30752
30769: POP
30770: POP
// end ;
30771: PPOPN 2
30773: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30774: LD_EXP 60
30778: PUSH
30779: LD_EXP 109
30783: AND
30784: IFFALSE 31071
30786: GO 30788
30788: DISABLE
30789: LD_INT 0
30791: PPUSH
30792: PPUSH
30793: PPUSH
// begin i := rand ( 1 , 7 ) ;
30794: LD_ADDR_VAR 0 1
30798: PUSH
30799: LD_INT 1
30801: PPUSH
30802: LD_INT 7
30804: PPUSH
30805: CALL_OW 12
30809: ST_TO_ADDR
// case i of 1 :
30810: LD_VAR 0 1
30814: PUSH
30815: LD_INT 1
30817: DOUBLE
30818: EQUAL
30819: IFTRUE 30823
30821: GO 30833
30823: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30824: LD_STRING earthquake(getX(game), 0, 32)
30826: PPUSH
30827: CALL_OW 559
30831: GO 31071
30833: LD_INT 2
30835: DOUBLE
30836: EQUAL
30837: IFTRUE 30841
30839: GO 30855
30841: POP
// begin ToLua ( displayStucuk(); ) ;
30842: LD_STRING displayStucuk();
30844: PPUSH
30845: CALL_OW 559
// ResetFog ;
30849: CALL_OW 335
// end ; 3 :
30853: GO 31071
30855: LD_INT 3
30857: DOUBLE
30858: EQUAL
30859: IFTRUE 30863
30861: GO 30967
30863: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30864: LD_ADDR_VAR 0 2
30868: PUSH
30869: LD_INT 22
30871: PUSH
30872: LD_OWVAR 2
30876: PUSH
30877: EMPTY
30878: LIST
30879: LIST
30880: PUSH
30881: LD_INT 25
30883: PUSH
30884: LD_INT 1
30886: PUSH
30887: EMPTY
30888: LIST
30889: LIST
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PPUSH
30895: CALL_OW 69
30899: ST_TO_ADDR
// if not tmp then
30900: LD_VAR 0 2
30904: NOT
30905: IFFALSE 30909
// exit ;
30907: GO 31071
// un := tmp [ rand ( 1 , tmp ) ] ;
30909: LD_ADDR_VAR 0 3
30913: PUSH
30914: LD_VAR 0 2
30918: PUSH
30919: LD_INT 1
30921: PPUSH
30922: LD_VAR 0 2
30926: PPUSH
30927: CALL_OW 12
30931: ARRAY
30932: ST_TO_ADDR
// if Crawls ( un ) then
30933: LD_VAR 0 3
30937: PPUSH
30938: CALL_OW 318
30942: IFFALSE 30953
// ComWalk ( un ) ;
30944: LD_VAR 0 3
30948: PPUSH
30949: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30953: LD_VAR 0 3
30957: PPUSH
30958: LD_INT 8
30960: PPUSH
30961: CALL_OW 336
// end ; 4 :
30965: GO 31071
30967: LD_INT 4
30969: DOUBLE
30970: EQUAL
30971: IFTRUE 30975
30973: GO 31049
30975: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30976: LD_ADDR_VAR 0 2
30980: PUSH
30981: LD_INT 22
30983: PUSH
30984: LD_OWVAR 2
30988: PUSH
30989: EMPTY
30990: LIST
30991: LIST
30992: PUSH
30993: LD_INT 30
30995: PUSH
30996: LD_INT 29
30998: PUSH
30999: EMPTY
31000: LIST
31001: LIST
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: PPUSH
31007: CALL_OW 69
31011: ST_TO_ADDR
// if not tmp then
31012: LD_VAR 0 2
31016: NOT
31017: IFFALSE 31021
// exit ;
31019: GO 31071
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31021: LD_VAR 0 2
31025: PUSH
31026: LD_INT 1
31028: ARRAY
31029: PPUSH
31030: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31034: LD_VAR 0 2
31038: PUSH
31039: LD_INT 1
31041: ARRAY
31042: PPUSH
31043: CALL_OW 65
// end ; 5 .. 7 :
31047: GO 31071
31049: LD_INT 5
31051: DOUBLE
31052: GREATEREQUAL
31053: IFFALSE 31061
31055: LD_INT 7
31057: DOUBLE
31058: LESSEQUAL
31059: IFTRUE 31063
31061: GO 31070
31063: POP
// StreamSibBomb ; end ;
31064: CALL 27308 0 0
31068: GO 31071
31070: POP
// end ;
31071: PPOPN 3
31073: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31074: LD_EXP 60
31078: PUSH
31079: LD_EXP 110
31083: AND
31084: IFFALSE 31240
31086: GO 31088
31088: DISABLE
31089: LD_INT 0
31091: PPUSH
31092: PPUSH
31093: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31094: LD_ADDR_VAR 0 2
31098: PUSH
31099: LD_INT 81
31101: PUSH
31102: LD_OWVAR 2
31106: PUSH
31107: EMPTY
31108: LIST
31109: LIST
31110: PUSH
31111: LD_INT 2
31113: PUSH
31114: LD_INT 21
31116: PUSH
31117: LD_INT 1
31119: PUSH
31120: EMPTY
31121: LIST
31122: LIST
31123: PUSH
31124: LD_INT 21
31126: PUSH
31127: LD_INT 2
31129: PUSH
31130: EMPTY
31131: LIST
31132: LIST
31133: PUSH
31134: EMPTY
31135: LIST
31136: LIST
31137: LIST
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: PPUSH
31143: CALL_OW 69
31147: ST_TO_ADDR
// if not tmp then
31148: LD_VAR 0 2
31152: NOT
31153: IFFALSE 31157
// exit ;
31155: GO 31240
// p := 0 ;
31157: LD_ADDR_VAR 0 3
31161: PUSH
31162: LD_INT 0
31164: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31165: LD_INT 35
31167: PPUSH
31168: CALL_OW 67
// p := p + 1 ;
31172: LD_ADDR_VAR 0 3
31176: PUSH
31177: LD_VAR 0 3
31181: PUSH
31182: LD_INT 1
31184: PLUS
31185: ST_TO_ADDR
// for i in tmp do
31186: LD_ADDR_VAR 0 1
31190: PUSH
31191: LD_VAR 0 2
31195: PUSH
31196: FOR_IN
31197: IFFALSE 31228
// if GetLives ( i ) < 1000 then
31199: LD_VAR 0 1
31203: PPUSH
31204: CALL_OW 256
31208: PUSH
31209: LD_INT 1000
31211: LESS
31212: IFFALSE 31226
// SetLives ( i , 1000 ) ;
31214: LD_VAR 0 1
31218: PPUSH
31219: LD_INT 1000
31221: PPUSH
31222: CALL_OW 234
31226: GO 31196
31228: POP
31229: POP
// until p > 20 ;
31230: LD_VAR 0 3
31234: PUSH
31235: LD_INT 20
31237: GREATER
31238: IFFALSE 31165
// end ;
31240: PPOPN 3
31242: END
// every 0 0$1 trigger StreamModeActive and sTime do
31243: LD_EXP 60
31247: PUSH
31248: LD_EXP 111
31252: AND
31253: IFFALSE 31288
31255: GO 31257
31257: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31258: LD_INT 28
31260: PPUSH
31261: LD_OWVAR 2
31265: PPUSH
31266: LD_INT 2
31268: PPUSH
31269: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31273: LD_INT 30
31275: PPUSH
31276: LD_OWVAR 2
31280: PPUSH
31281: LD_INT 2
31283: PPUSH
31284: CALL_OW 322
// end ;
31288: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31289: LD_EXP 60
31293: PUSH
31294: LD_EXP 112
31298: AND
31299: IFFALSE 31420
31301: GO 31303
31303: DISABLE
31304: LD_INT 0
31306: PPUSH
31307: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31308: LD_ADDR_VAR 0 2
31312: PUSH
31313: LD_INT 22
31315: PUSH
31316: LD_OWVAR 2
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: PUSH
31325: LD_INT 21
31327: PUSH
31328: LD_INT 1
31330: PUSH
31331: EMPTY
31332: LIST
31333: LIST
31334: PUSH
31335: LD_INT 3
31337: PUSH
31338: LD_INT 23
31340: PUSH
31341: LD_INT 0
31343: PUSH
31344: EMPTY
31345: LIST
31346: LIST
31347: PUSH
31348: EMPTY
31349: LIST
31350: LIST
31351: PUSH
31352: EMPTY
31353: LIST
31354: LIST
31355: LIST
31356: PPUSH
31357: CALL_OW 69
31361: ST_TO_ADDR
// if not tmp then
31362: LD_VAR 0 2
31366: NOT
31367: IFFALSE 31371
// exit ;
31369: GO 31420
// for i in tmp do
31371: LD_ADDR_VAR 0 1
31375: PUSH
31376: LD_VAR 0 2
31380: PUSH
31381: FOR_IN
31382: IFFALSE 31418
// begin if Crawls ( i ) then
31384: LD_VAR 0 1
31388: PPUSH
31389: CALL_OW 318
31393: IFFALSE 31404
// ComWalk ( i ) ;
31395: LD_VAR 0 1
31399: PPUSH
31400: CALL_OW 138
// SetClass ( i , 2 ) ;
31404: LD_VAR 0 1
31408: PPUSH
31409: LD_INT 2
31411: PPUSH
31412: CALL_OW 336
// end ;
31416: GO 31381
31418: POP
31419: POP
// end ;
31420: PPOPN 2
31422: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31423: LD_EXP 60
31427: PUSH
31428: LD_EXP 113
31432: AND
31433: IFFALSE 31721
31435: GO 31437
31437: DISABLE
31438: LD_INT 0
31440: PPUSH
31441: PPUSH
31442: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31443: LD_OWVAR 2
31447: PPUSH
31448: LD_INT 9
31450: PPUSH
31451: LD_INT 1
31453: PPUSH
31454: LD_INT 1
31456: PPUSH
31457: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31461: LD_INT 9
31463: PPUSH
31464: LD_OWVAR 2
31468: PPUSH
31469: CALL_OW 343
// uc_side := 9 ;
31473: LD_ADDR_OWVAR 20
31477: PUSH
31478: LD_INT 9
31480: ST_TO_ADDR
// uc_nation := 2 ;
31481: LD_ADDR_OWVAR 21
31485: PUSH
31486: LD_INT 2
31488: ST_TO_ADDR
// hc_name := Dark Warrior ;
31489: LD_ADDR_OWVAR 26
31493: PUSH
31494: LD_STRING Dark Warrior
31496: ST_TO_ADDR
// hc_gallery :=  ;
31497: LD_ADDR_OWVAR 33
31501: PUSH
31502: LD_STRING 
31504: ST_TO_ADDR
// hc_noskilllimit := true ;
31505: LD_ADDR_OWVAR 76
31509: PUSH
31510: LD_INT 1
31512: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31513: LD_ADDR_OWVAR 31
31517: PUSH
31518: LD_INT 30
31520: PUSH
31521: LD_INT 30
31523: PUSH
31524: LD_INT 30
31526: PUSH
31527: LD_INT 30
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: LIST
31534: LIST
31535: ST_TO_ADDR
// un := CreateHuman ;
31536: LD_ADDR_VAR 0 3
31540: PUSH
31541: CALL_OW 44
31545: ST_TO_ADDR
// hc_noskilllimit := false ;
31546: LD_ADDR_OWVAR 76
31550: PUSH
31551: LD_INT 0
31553: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31554: LD_VAR 0 3
31558: PPUSH
31559: LD_INT 1
31561: PPUSH
31562: CALL_OW 51
// ToLua ( playRanger() ) ;
31566: LD_STRING playRanger()
31568: PPUSH
31569: CALL_OW 559
// p := 0 ;
31573: LD_ADDR_VAR 0 2
31577: PUSH
31578: LD_INT 0
31580: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31581: LD_INT 35
31583: PPUSH
31584: CALL_OW 67
// p := p + 1 ;
31588: LD_ADDR_VAR 0 2
31592: PUSH
31593: LD_VAR 0 2
31597: PUSH
31598: LD_INT 1
31600: PLUS
31601: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31602: LD_VAR 0 3
31606: PPUSH
31607: CALL_OW 256
31611: PUSH
31612: LD_INT 1000
31614: LESS
31615: IFFALSE 31629
// SetLives ( un , 1000 ) ;
31617: LD_VAR 0 3
31621: PPUSH
31622: LD_INT 1000
31624: PPUSH
31625: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31629: LD_VAR 0 3
31633: PPUSH
31634: LD_INT 81
31636: PUSH
31637: LD_OWVAR 2
31641: PUSH
31642: EMPTY
31643: LIST
31644: LIST
31645: PUSH
31646: LD_INT 91
31648: PUSH
31649: LD_VAR 0 3
31653: PUSH
31654: LD_INT 30
31656: PUSH
31657: EMPTY
31658: LIST
31659: LIST
31660: LIST
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: PPUSH
31666: CALL_OW 69
31670: PPUSH
31671: LD_VAR 0 3
31675: PPUSH
31676: CALL_OW 74
31680: PPUSH
31681: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31685: LD_VAR 0 2
31689: PUSH
31690: LD_INT 80
31692: GREATER
31693: PUSH
31694: LD_VAR 0 3
31698: PPUSH
31699: CALL_OW 301
31703: OR
31704: IFFALSE 31581
// if un then
31706: LD_VAR 0 3
31710: IFFALSE 31721
// RemoveUnit ( un ) ;
31712: LD_VAR 0 3
31716: PPUSH
31717: CALL_OW 64
// end ;
31721: PPOPN 3
31723: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31724: LD_EXP 114
31728: IFFALSE 31844
31730: GO 31732
31732: DISABLE
31733: LD_INT 0
31735: PPUSH
31736: PPUSH
31737: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31738: LD_ADDR_VAR 0 2
31742: PUSH
31743: LD_INT 81
31745: PUSH
31746: LD_OWVAR 2
31750: PUSH
31751: EMPTY
31752: LIST
31753: LIST
31754: PUSH
31755: LD_INT 21
31757: PUSH
31758: LD_INT 1
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: PUSH
31765: EMPTY
31766: LIST
31767: LIST
31768: PPUSH
31769: CALL_OW 69
31773: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31774: LD_STRING playComputer()
31776: PPUSH
31777: CALL_OW 559
// if not tmp then
31781: LD_VAR 0 2
31785: NOT
31786: IFFALSE 31790
// exit ;
31788: GO 31844
// for i in tmp do
31790: LD_ADDR_VAR 0 1
31794: PUSH
31795: LD_VAR 0 2
31799: PUSH
31800: FOR_IN
31801: IFFALSE 31842
// for j := 1 to 4 do
31803: LD_ADDR_VAR 0 3
31807: PUSH
31808: DOUBLE
31809: LD_INT 1
31811: DEC
31812: ST_TO_ADDR
31813: LD_INT 4
31815: PUSH
31816: FOR_TO
31817: IFFALSE 31838
// SetSkill ( i , j , 10 ) ;
31819: LD_VAR 0 1
31823: PPUSH
31824: LD_VAR 0 3
31828: PPUSH
31829: LD_INT 10
31831: PPUSH
31832: CALL_OW 237
31836: GO 31816
31838: POP
31839: POP
31840: GO 31800
31842: POP
31843: POP
// end ;
31844: PPOPN 3
31846: END
// every 0 0$1 trigger s30 do var i , tmp ;
31847: LD_EXP 115
31851: IFFALSE 31920
31853: GO 31855
31855: DISABLE
31856: LD_INT 0
31858: PPUSH
31859: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31860: LD_ADDR_VAR 0 2
31864: PUSH
31865: LD_INT 22
31867: PUSH
31868: LD_OWVAR 2
31872: PUSH
31873: EMPTY
31874: LIST
31875: LIST
31876: PPUSH
31877: CALL_OW 69
31881: ST_TO_ADDR
// if not tmp then
31882: LD_VAR 0 2
31886: NOT
31887: IFFALSE 31891
// exit ;
31889: GO 31920
// for i in tmp do
31891: LD_ADDR_VAR 0 1
31895: PUSH
31896: LD_VAR 0 2
31900: PUSH
31901: FOR_IN
31902: IFFALSE 31918
// SetLives ( i , 300 ) ;
31904: LD_VAR 0 1
31908: PPUSH
31909: LD_INT 300
31911: PPUSH
31912: CALL_OW 234
31916: GO 31901
31918: POP
31919: POP
// end ;
31920: PPOPN 2
31922: END
// every 0 0$1 trigger s60 do var i , tmp ;
31923: LD_EXP 116
31927: IFFALSE 31996
31929: GO 31931
31931: DISABLE
31932: LD_INT 0
31934: PPUSH
31935: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31936: LD_ADDR_VAR 0 2
31940: PUSH
31941: LD_INT 22
31943: PUSH
31944: LD_OWVAR 2
31948: PUSH
31949: EMPTY
31950: LIST
31951: LIST
31952: PPUSH
31953: CALL_OW 69
31957: ST_TO_ADDR
// if not tmp then
31958: LD_VAR 0 2
31962: NOT
31963: IFFALSE 31967
// exit ;
31965: GO 31996
// for i in tmp do
31967: LD_ADDR_VAR 0 1
31971: PUSH
31972: LD_VAR 0 2
31976: PUSH
31977: FOR_IN
31978: IFFALSE 31994
// SetLives ( i , 600 ) ;
31980: LD_VAR 0 1
31984: PPUSH
31985: LD_INT 600
31987: PPUSH
31988: CALL_OW 234
31992: GO 31977
31994: POP
31995: POP
// end ;
31996: PPOPN 2
31998: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31999: LD_INT 0
32001: PPUSH
// case cmd of 301 :
32002: LD_VAR 0 1
32006: PUSH
32007: LD_INT 301
32009: DOUBLE
32010: EQUAL
32011: IFTRUE 32015
32013: GO 32047
32015: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32016: LD_VAR 0 6
32020: PPUSH
32021: LD_VAR 0 7
32025: PPUSH
32026: LD_VAR 0 8
32030: PPUSH
32031: LD_VAR 0 4
32035: PPUSH
32036: LD_VAR 0 5
32040: PPUSH
32041: CALL 33248 0 5
32045: GO 32168
32047: LD_INT 302
32049: DOUBLE
32050: EQUAL
32051: IFTRUE 32055
32053: GO 32092
32055: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32056: LD_VAR 0 6
32060: PPUSH
32061: LD_VAR 0 7
32065: PPUSH
32066: LD_VAR 0 8
32070: PPUSH
32071: LD_VAR 0 9
32075: PPUSH
32076: LD_VAR 0 4
32080: PPUSH
32081: LD_VAR 0 5
32085: PPUSH
32086: CALL 33339 0 6
32090: GO 32168
32092: LD_INT 303
32094: DOUBLE
32095: EQUAL
32096: IFTRUE 32100
32098: GO 32137
32100: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32101: LD_VAR 0 6
32105: PPUSH
32106: LD_VAR 0 7
32110: PPUSH
32111: LD_VAR 0 8
32115: PPUSH
32116: LD_VAR 0 9
32120: PPUSH
32121: LD_VAR 0 4
32125: PPUSH
32126: LD_VAR 0 5
32130: PPUSH
32131: CALL 32173 0 6
32135: GO 32168
32137: LD_INT 304
32139: DOUBLE
32140: EQUAL
32141: IFTRUE 32145
32143: GO 32167
32145: POP
// hHackTeleport ( unit , x , y ) ; end ;
32146: LD_VAR 0 2
32150: PPUSH
32151: LD_VAR 0 4
32155: PPUSH
32156: LD_VAR 0 5
32160: PPUSH
32161: CALL 33932 0 3
32165: GO 32168
32167: POP
// end ;
32168: LD_VAR 0 12
32172: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32173: LD_INT 0
32175: PPUSH
32176: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32177: LD_VAR 0 1
32181: PUSH
32182: LD_INT 1
32184: LESS
32185: PUSH
32186: LD_VAR 0 1
32190: PUSH
32191: LD_INT 3
32193: GREATER
32194: OR
32195: PUSH
32196: LD_VAR 0 5
32200: PPUSH
32201: LD_VAR 0 6
32205: PPUSH
32206: CALL_OW 428
32210: OR
32211: IFFALSE 32215
// exit ;
32213: GO 32935
// uc_side := your_side ;
32215: LD_ADDR_OWVAR 20
32219: PUSH
32220: LD_OWVAR 2
32224: ST_TO_ADDR
// uc_nation := nation ;
32225: LD_ADDR_OWVAR 21
32229: PUSH
32230: LD_VAR 0 1
32234: ST_TO_ADDR
// bc_level = 1 ;
32235: LD_ADDR_OWVAR 43
32239: PUSH
32240: LD_INT 1
32242: ST_TO_ADDR
// case btype of 1 :
32243: LD_VAR 0 2
32247: PUSH
32248: LD_INT 1
32250: DOUBLE
32251: EQUAL
32252: IFTRUE 32256
32254: GO 32267
32256: POP
// bc_type := b_depot ; 2 :
32257: LD_ADDR_OWVAR 42
32261: PUSH
32262: LD_INT 0
32264: ST_TO_ADDR
32265: GO 32879
32267: LD_INT 2
32269: DOUBLE
32270: EQUAL
32271: IFTRUE 32275
32273: GO 32286
32275: POP
// bc_type := b_warehouse ; 3 :
32276: LD_ADDR_OWVAR 42
32280: PUSH
32281: LD_INT 1
32283: ST_TO_ADDR
32284: GO 32879
32286: LD_INT 3
32288: DOUBLE
32289: EQUAL
32290: IFTRUE 32294
32292: GO 32305
32294: POP
// bc_type := b_lab ; 4 .. 9 :
32295: LD_ADDR_OWVAR 42
32299: PUSH
32300: LD_INT 6
32302: ST_TO_ADDR
32303: GO 32879
32305: LD_INT 4
32307: DOUBLE
32308: GREATEREQUAL
32309: IFFALSE 32317
32311: LD_INT 9
32313: DOUBLE
32314: LESSEQUAL
32315: IFTRUE 32319
32317: GO 32371
32319: POP
// begin bc_type := b_lab_half ;
32320: LD_ADDR_OWVAR 42
32324: PUSH
32325: LD_INT 7
32327: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32328: LD_ADDR_OWVAR 44
32332: PUSH
32333: LD_INT 10
32335: PUSH
32336: LD_INT 11
32338: PUSH
32339: LD_INT 12
32341: PUSH
32342: LD_INT 15
32344: PUSH
32345: LD_INT 14
32347: PUSH
32348: LD_INT 13
32350: PUSH
32351: EMPTY
32352: LIST
32353: LIST
32354: LIST
32355: LIST
32356: LIST
32357: LIST
32358: PUSH
32359: LD_VAR 0 2
32363: PUSH
32364: LD_INT 3
32366: MINUS
32367: ARRAY
32368: ST_TO_ADDR
// end ; 10 .. 13 :
32369: GO 32879
32371: LD_INT 10
32373: DOUBLE
32374: GREATEREQUAL
32375: IFFALSE 32383
32377: LD_INT 13
32379: DOUBLE
32380: LESSEQUAL
32381: IFTRUE 32385
32383: GO 32462
32385: POP
// begin bc_type := b_lab_full ;
32386: LD_ADDR_OWVAR 42
32390: PUSH
32391: LD_INT 8
32393: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32394: LD_ADDR_OWVAR 44
32398: PUSH
32399: LD_INT 10
32401: PUSH
32402: LD_INT 12
32404: PUSH
32405: LD_INT 14
32407: PUSH
32408: LD_INT 13
32410: PUSH
32411: EMPTY
32412: LIST
32413: LIST
32414: LIST
32415: LIST
32416: PUSH
32417: LD_VAR 0 2
32421: PUSH
32422: LD_INT 9
32424: MINUS
32425: ARRAY
32426: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32427: LD_ADDR_OWVAR 45
32431: PUSH
32432: LD_INT 11
32434: PUSH
32435: LD_INT 15
32437: PUSH
32438: LD_INT 12
32440: PUSH
32441: LD_INT 15
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: LIST
32448: LIST
32449: PUSH
32450: LD_VAR 0 2
32454: PUSH
32455: LD_INT 9
32457: MINUS
32458: ARRAY
32459: ST_TO_ADDR
// end ; 14 :
32460: GO 32879
32462: LD_INT 14
32464: DOUBLE
32465: EQUAL
32466: IFTRUE 32470
32468: GO 32481
32470: POP
// bc_type := b_workshop ; 15 :
32471: LD_ADDR_OWVAR 42
32475: PUSH
32476: LD_INT 2
32478: ST_TO_ADDR
32479: GO 32879
32481: LD_INT 15
32483: DOUBLE
32484: EQUAL
32485: IFTRUE 32489
32487: GO 32500
32489: POP
// bc_type := b_factory ; 16 :
32490: LD_ADDR_OWVAR 42
32494: PUSH
32495: LD_INT 3
32497: ST_TO_ADDR
32498: GO 32879
32500: LD_INT 16
32502: DOUBLE
32503: EQUAL
32504: IFTRUE 32508
32506: GO 32519
32508: POP
// bc_type := b_ext_gun ; 17 :
32509: LD_ADDR_OWVAR 42
32513: PUSH
32514: LD_INT 17
32516: ST_TO_ADDR
32517: GO 32879
32519: LD_INT 17
32521: DOUBLE
32522: EQUAL
32523: IFTRUE 32527
32525: GO 32555
32527: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32528: LD_ADDR_OWVAR 42
32532: PUSH
32533: LD_INT 19
32535: PUSH
32536: LD_INT 23
32538: PUSH
32539: LD_INT 19
32541: PUSH
32542: EMPTY
32543: LIST
32544: LIST
32545: LIST
32546: PUSH
32547: LD_VAR 0 1
32551: ARRAY
32552: ST_TO_ADDR
32553: GO 32879
32555: LD_INT 18
32557: DOUBLE
32558: EQUAL
32559: IFTRUE 32563
32561: GO 32574
32563: POP
// bc_type := b_ext_radar ; 19 :
32564: LD_ADDR_OWVAR 42
32568: PUSH
32569: LD_INT 20
32571: ST_TO_ADDR
32572: GO 32879
32574: LD_INT 19
32576: DOUBLE
32577: EQUAL
32578: IFTRUE 32582
32580: GO 32593
32582: POP
// bc_type := b_ext_radio ; 20 :
32583: LD_ADDR_OWVAR 42
32587: PUSH
32588: LD_INT 22
32590: ST_TO_ADDR
32591: GO 32879
32593: LD_INT 20
32595: DOUBLE
32596: EQUAL
32597: IFTRUE 32601
32599: GO 32612
32601: POP
// bc_type := b_ext_siberium ; 21 :
32602: LD_ADDR_OWVAR 42
32606: PUSH
32607: LD_INT 21
32609: ST_TO_ADDR
32610: GO 32879
32612: LD_INT 21
32614: DOUBLE
32615: EQUAL
32616: IFTRUE 32620
32618: GO 32631
32620: POP
// bc_type := b_ext_computer ; 22 :
32621: LD_ADDR_OWVAR 42
32625: PUSH
32626: LD_INT 24
32628: ST_TO_ADDR
32629: GO 32879
32631: LD_INT 22
32633: DOUBLE
32634: EQUAL
32635: IFTRUE 32639
32637: GO 32650
32639: POP
// bc_type := b_ext_track ; 23 :
32640: LD_ADDR_OWVAR 42
32644: PUSH
32645: LD_INT 16
32647: ST_TO_ADDR
32648: GO 32879
32650: LD_INT 23
32652: DOUBLE
32653: EQUAL
32654: IFTRUE 32658
32656: GO 32669
32658: POP
// bc_type := b_ext_laser ; 24 :
32659: LD_ADDR_OWVAR 42
32663: PUSH
32664: LD_INT 25
32666: ST_TO_ADDR
32667: GO 32879
32669: LD_INT 24
32671: DOUBLE
32672: EQUAL
32673: IFTRUE 32677
32675: GO 32688
32677: POP
// bc_type := b_control_tower ; 25 :
32678: LD_ADDR_OWVAR 42
32682: PUSH
32683: LD_INT 36
32685: ST_TO_ADDR
32686: GO 32879
32688: LD_INT 25
32690: DOUBLE
32691: EQUAL
32692: IFTRUE 32696
32694: GO 32707
32696: POP
// bc_type := b_breastwork ; 26 :
32697: LD_ADDR_OWVAR 42
32701: PUSH
32702: LD_INT 31
32704: ST_TO_ADDR
32705: GO 32879
32707: LD_INT 26
32709: DOUBLE
32710: EQUAL
32711: IFTRUE 32715
32713: GO 32726
32715: POP
// bc_type := b_bunker ; 27 :
32716: LD_ADDR_OWVAR 42
32720: PUSH
32721: LD_INT 32
32723: ST_TO_ADDR
32724: GO 32879
32726: LD_INT 27
32728: DOUBLE
32729: EQUAL
32730: IFTRUE 32734
32732: GO 32745
32734: POP
// bc_type := b_turret ; 28 :
32735: LD_ADDR_OWVAR 42
32739: PUSH
32740: LD_INT 33
32742: ST_TO_ADDR
32743: GO 32879
32745: LD_INT 28
32747: DOUBLE
32748: EQUAL
32749: IFTRUE 32753
32751: GO 32764
32753: POP
// bc_type := b_armoury ; 29 :
32754: LD_ADDR_OWVAR 42
32758: PUSH
32759: LD_INT 4
32761: ST_TO_ADDR
32762: GO 32879
32764: LD_INT 29
32766: DOUBLE
32767: EQUAL
32768: IFTRUE 32772
32770: GO 32783
32772: POP
// bc_type := b_barracks ; 30 :
32773: LD_ADDR_OWVAR 42
32777: PUSH
32778: LD_INT 5
32780: ST_TO_ADDR
32781: GO 32879
32783: LD_INT 30
32785: DOUBLE
32786: EQUAL
32787: IFTRUE 32791
32789: GO 32802
32791: POP
// bc_type := b_solar_power ; 31 :
32792: LD_ADDR_OWVAR 42
32796: PUSH
32797: LD_INT 27
32799: ST_TO_ADDR
32800: GO 32879
32802: LD_INT 31
32804: DOUBLE
32805: EQUAL
32806: IFTRUE 32810
32808: GO 32821
32810: POP
// bc_type := b_oil_power ; 32 :
32811: LD_ADDR_OWVAR 42
32815: PUSH
32816: LD_INT 26
32818: ST_TO_ADDR
32819: GO 32879
32821: LD_INT 32
32823: DOUBLE
32824: EQUAL
32825: IFTRUE 32829
32827: GO 32840
32829: POP
// bc_type := b_siberite_power ; 33 :
32830: LD_ADDR_OWVAR 42
32834: PUSH
32835: LD_INT 28
32837: ST_TO_ADDR
32838: GO 32879
32840: LD_INT 33
32842: DOUBLE
32843: EQUAL
32844: IFTRUE 32848
32846: GO 32859
32848: POP
// bc_type := b_oil_mine ; 34 :
32849: LD_ADDR_OWVAR 42
32853: PUSH
32854: LD_INT 29
32856: ST_TO_ADDR
32857: GO 32879
32859: LD_INT 34
32861: DOUBLE
32862: EQUAL
32863: IFTRUE 32867
32865: GO 32878
32867: POP
// bc_type := b_siberite_mine ; end ;
32868: LD_ADDR_OWVAR 42
32872: PUSH
32873: LD_INT 30
32875: ST_TO_ADDR
32876: GO 32879
32878: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32879: LD_ADDR_VAR 0 8
32883: PUSH
32884: LD_VAR 0 5
32888: PPUSH
32889: LD_VAR 0 6
32893: PPUSH
32894: LD_VAR 0 3
32898: PPUSH
32899: CALL_OW 47
32903: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32904: LD_OWVAR 42
32908: PUSH
32909: LD_INT 32
32911: PUSH
32912: LD_INT 33
32914: PUSH
32915: EMPTY
32916: LIST
32917: LIST
32918: IN
32919: IFFALSE 32935
// PlaceWeaponTurret ( b , weapon ) ;
32921: LD_VAR 0 8
32925: PPUSH
32926: LD_VAR 0 4
32930: PPUSH
32931: CALL_OW 431
// end ;
32935: LD_VAR 0 7
32939: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32940: LD_INT 0
32942: PPUSH
32943: PPUSH
32944: PPUSH
32945: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32946: LD_ADDR_VAR 0 4
32950: PUSH
32951: LD_INT 22
32953: PUSH
32954: LD_OWVAR 2
32958: PUSH
32959: EMPTY
32960: LIST
32961: LIST
32962: PUSH
32963: LD_INT 2
32965: PUSH
32966: LD_INT 30
32968: PUSH
32969: LD_INT 0
32971: PUSH
32972: EMPTY
32973: LIST
32974: LIST
32975: PUSH
32976: LD_INT 30
32978: PUSH
32979: LD_INT 1
32981: PUSH
32982: EMPTY
32983: LIST
32984: LIST
32985: PUSH
32986: EMPTY
32987: LIST
32988: LIST
32989: LIST
32990: PUSH
32991: EMPTY
32992: LIST
32993: LIST
32994: PPUSH
32995: CALL_OW 69
32999: ST_TO_ADDR
// if not tmp then
33000: LD_VAR 0 4
33004: NOT
33005: IFFALSE 33009
// exit ;
33007: GO 33068
// for i in tmp do
33009: LD_ADDR_VAR 0 2
33013: PUSH
33014: LD_VAR 0 4
33018: PUSH
33019: FOR_IN
33020: IFFALSE 33066
// for j = 1 to 3 do
33022: LD_ADDR_VAR 0 3
33026: PUSH
33027: DOUBLE
33028: LD_INT 1
33030: DEC
33031: ST_TO_ADDR
33032: LD_INT 3
33034: PUSH
33035: FOR_TO
33036: IFFALSE 33062
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33038: LD_VAR 0 2
33042: PPUSH
33043: CALL_OW 274
33047: PPUSH
33048: LD_VAR 0 3
33052: PPUSH
33053: LD_INT 99999
33055: PPUSH
33056: CALL_OW 277
33060: GO 33035
33062: POP
33063: POP
33064: GO 33019
33066: POP
33067: POP
// end ;
33068: LD_VAR 0 1
33072: RET
// export function hHackSetLevel10 ; var i , j ; begin
33073: LD_INT 0
33075: PPUSH
33076: PPUSH
33077: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33078: LD_ADDR_VAR 0 2
33082: PUSH
33083: LD_INT 21
33085: PUSH
33086: LD_INT 1
33088: PUSH
33089: EMPTY
33090: LIST
33091: LIST
33092: PPUSH
33093: CALL_OW 69
33097: PUSH
33098: FOR_IN
33099: IFFALSE 33151
// if IsSelected ( i ) then
33101: LD_VAR 0 2
33105: PPUSH
33106: CALL_OW 306
33110: IFFALSE 33149
// begin for j := 1 to 4 do
33112: LD_ADDR_VAR 0 3
33116: PUSH
33117: DOUBLE
33118: LD_INT 1
33120: DEC
33121: ST_TO_ADDR
33122: LD_INT 4
33124: PUSH
33125: FOR_TO
33126: IFFALSE 33147
// SetSkill ( i , j , 10 ) ;
33128: LD_VAR 0 2
33132: PPUSH
33133: LD_VAR 0 3
33137: PPUSH
33138: LD_INT 10
33140: PPUSH
33141: CALL_OW 237
33145: GO 33125
33147: POP
33148: POP
// end ;
33149: GO 33098
33151: POP
33152: POP
// end ;
33153: LD_VAR 0 1
33157: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33158: LD_INT 0
33160: PPUSH
33161: PPUSH
33162: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33163: LD_ADDR_VAR 0 2
33167: PUSH
33168: LD_INT 22
33170: PUSH
33171: LD_OWVAR 2
33175: PUSH
33176: EMPTY
33177: LIST
33178: LIST
33179: PUSH
33180: LD_INT 21
33182: PUSH
33183: LD_INT 1
33185: PUSH
33186: EMPTY
33187: LIST
33188: LIST
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: PPUSH
33194: CALL_OW 69
33198: PUSH
33199: FOR_IN
33200: IFFALSE 33241
// begin for j := 1 to 4 do
33202: LD_ADDR_VAR 0 3
33206: PUSH
33207: DOUBLE
33208: LD_INT 1
33210: DEC
33211: ST_TO_ADDR
33212: LD_INT 4
33214: PUSH
33215: FOR_TO
33216: IFFALSE 33237
// SetSkill ( i , j , 10 ) ;
33218: LD_VAR 0 2
33222: PPUSH
33223: LD_VAR 0 3
33227: PPUSH
33228: LD_INT 10
33230: PPUSH
33231: CALL_OW 237
33235: GO 33215
33237: POP
33238: POP
// end ;
33239: GO 33199
33241: POP
33242: POP
// end ;
33243: LD_VAR 0 1
33247: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33248: LD_INT 0
33250: PPUSH
// uc_side := your_side ;
33251: LD_ADDR_OWVAR 20
33255: PUSH
33256: LD_OWVAR 2
33260: ST_TO_ADDR
// uc_nation := nation ;
33261: LD_ADDR_OWVAR 21
33265: PUSH
33266: LD_VAR 0 1
33270: ST_TO_ADDR
// InitHc ;
33271: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33275: LD_INT 0
33277: PPUSH
33278: LD_VAR 0 2
33282: PPUSH
33283: LD_VAR 0 3
33287: PPUSH
33288: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33292: LD_VAR 0 4
33296: PPUSH
33297: LD_VAR 0 5
33301: PPUSH
33302: CALL_OW 428
33306: PUSH
33307: LD_INT 0
33309: EQUAL
33310: IFFALSE 33334
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33312: CALL_OW 44
33316: PPUSH
33317: LD_VAR 0 4
33321: PPUSH
33322: LD_VAR 0 5
33326: PPUSH
33327: LD_INT 1
33329: PPUSH
33330: CALL_OW 48
// end ;
33334: LD_VAR 0 6
33338: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33339: LD_INT 0
33341: PPUSH
33342: PPUSH
// uc_side := your_side ;
33343: LD_ADDR_OWVAR 20
33347: PUSH
33348: LD_OWVAR 2
33352: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33353: LD_VAR 0 1
33357: PUSH
33358: LD_INT 1
33360: PUSH
33361: LD_INT 2
33363: PUSH
33364: LD_INT 3
33366: PUSH
33367: LD_INT 4
33369: PUSH
33370: LD_INT 5
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: LIST
33377: LIST
33378: LIST
33379: IN
33380: IFFALSE 33392
// uc_nation := nation_american else
33382: LD_ADDR_OWVAR 21
33386: PUSH
33387: LD_INT 1
33389: ST_TO_ADDR
33390: GO 33435
// if chassis in [ 11 , 12 , 13 , 14 ] then
33392: LD_VAR 0 1
33396: PUSH
33397: LD_INT 11
33399: PUSH
33400: LD_INT 12
33402: PUSH
33403: LD_INT 13
33405: PUSH
33406: LD_INT 14
33408: PUSH
33409: EMPTY
33410: LIST
33411: LIST
33412: LIST
33413: LIST
33414: IN
33415: IFFALSE 33427
// uc_nation := nation_arabian else
33417: LD_ADDR_OWVAR 21
33421: PUSH
33422: LD_INT 2
33424: ST_TO_ADDR
33425: GO 33435
// uc_nation := nation_russian ;
33427: LD_ADDR_OWVAR 21
33431: PUSH
33432: LD_INT 3
33434: ST_TO_ADDR
// vc_chassis := chassis ;
33435: LD_ADDR_OWVAR 37
33439: PUSH
33440: LD_VAR 0 1
33444: ST_TO_ADDR
// vc_engine := engine ;
33445: LD_ADDR_OWVAR 39
33449: PUSH
33450: LD_VAR 0 2
33454: ST_TO_ADDR
// vc_control := control ;
33455: LD_ADDR_OWVAR 38
33459: PUSH
33460: LD_VAR 0 3
33464: ST_TO_ADDR
// vc_weapon := weapon ;
33465: LD_ADDR_OWVAR 40
33469: PUSH
33470: LD_VAR 0 4
33474: ST_TO_ADDR
// un := CreateVehicle ;
33475: LD_ADDR_VAR 0 8
33479: PUSH
33480: CALL_OW 45
33484: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33485: LD_VAR 0 8
33489: PPUSH
33490: LD_INT 0
33492: PPUSH
33493: LD_INT 5
33495: PPUSH
33496: CALL_OW 12
33500: PPUSH
33501: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33505: LD_VAR 0 8
33509: PPUSH
33510: LD_VAR 0 5
33514: PPUSH
33515: LD_VAR 0 6
33519: PPUSH
33520: LD_INT 1
33522: PPUSH
33523: CALL_OW 48
// end ;
33527: LD_VAR 0 7
33531: RET
// export hInvincible ; every 1 do
33532: GO 33534
33534: DISABLE
// hInvincible := [ ] ;
33535: LD_ADDR_EXP 117
33539: PUSH
33540: EMPTY
33541: ST_TO_ADDR
33542: END
// every 10 do var i ;
33543: GO 33545
33545: DISABLE
33546: LD_INT 0
33548: PPUSH
// begin enable ;
33549: ENABLE
// if not hInvincible then
33550: LD_EXP 117
33554: NOT
33555: IFFALSE 33559
// exit ;
33557: GO 33603
// for i in hInvincible do
33559: LD_ADDR_VAR 0 1
33563: PUSH
33564: LD_EXP 117
33568: PUSH
33569: FOR_IN
33570: IFFALSE 33601
// if GetLives ( i ) < 1000 then
33572: LD_VAR 0 1
33576: PPUSH
33577: CALL_OW 256
33581: PUSH
33582: LD_INT 1000
33584: LESS
33585: IFFALSE 33599
// SetLives ( i , 1000 ) ;
33587: LD_VAR 0 1
33591: PPUSH
33592: LD_INT 1000
33594: PPUSH
33595: CALL_OW 234
33599: GO 33569
33601: POP
33602: POP
// end ;
33603: PPOPN 1
33605: END
// export function hHackInvincible ; var i ; begin
33606: LD_INT 0
33608: PPUSH
33609: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33610: LD_ADDR_VAR 0 2
33614: PUSH
33615: LD_INT 2
33617: PUSH
33618: LD_INT 21
33620: PUSH
33621: LD_INT 1
33623: PUSH
33624: EMPTY
33625: LIST
33626: LIST
33627: PUSH
33628: LD_INT 21
33630: PUSH
33631: LD_INT 2
33633: PUSH
33634: EMPTY
33635: LIST
33636: LIST
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: LIST
33642: PPUSH
33643: CALL_OW 69
33647: PUSH
33648: FOR_IN
33649: IFFALSE 33710
// if IsSelected ( i ) then
33651: LD_VAR 0 2
33655: PPUSH
33656: CALL_OW 306
33660: IFFALSE 33708
// begin if i in hInvincible then
33662: LD_VAR 0 2
33666: PUSH
33667: LD_EXP 117
33671: IN
33672: IFFALSE 33692
// hInvincible := hInvincible diff i else
33674: LD_ADDR_EXP 117
33678: PUSH
33679: LD_EXP 117
33683: PUSH
33684: LD_VAR 0 2
33688: DIFF
33689: ST_TO_ADDR
33690: GO 33708
// hInvincible := hInvincible union i ;
33692: LD_ADDR_EXP 117
33696: PUSH
33697: LD_EXP 117
33701: PUSH
33702: LD_VAR 0 2
33706: UNION
33707: ST_TO_ADDR
// end ;
33708: GO 33648
33710: POP
33711: POP
// end ;
33712: LD_VAR 0 1
33716: RET
// export function hHackInvisible ; var i , j ; begin
33717: LD_INT 0
33719: PPUSH
33720: PPUSH
33721: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33722: LD_ADDR_VAR 0 2
33726: PUSH
33727: LD_INT 21
33729: PUSH
33730: LD_INT 1
33732: PUSH
33733: EMPTY
33734: LIST
33735: LIST
33736: PPUSH
33737: CALL_OW 69
33741: PUSH
33742: FOR_IN
33743: IFFALSE 33767
// if IsSelected ( i ) then
33745: LD_VAR 0 2
33749: PPUSH
33750: CALL_OW 306
33754: IFFALSE 33765
// ComForceInvisible ( i ) ;
33756: LD_VAR 0 2
33760: PPUSH
33761: CALL_OW 496
33765: GO 33742
33767: POP
33768: POP
// end ;
33769: LD_VAR 0 1
33773: RET
// export function hHackChangeYourSide ; begin
33774: LD_INT 0
33776: PPUSH
// if your_side = 8 then
33777: LD_OWVAR 2
33781: PUSH
33782: LD_INT 8
33784: EQUAL
33785: IFFALSE 33797
// your_side := 0 else
33787: LD_ADDR_OWVAR 2
33791: PUSH
33792: LD_INT 0
33794: ST_TO_ADDR
33795: GO 33811
// your_side := your_side + 1 ;
33797: LD_ADDR_OWVAR 2
33801: PUSH
33802: LD_OWVAR 2
33806: PUSH
33807: LD_INT 1
33809: PLUS
33810: ST_TO_ADDR
// end ;
33811: LD_VAR 0 1
33815: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33816: LD_INT 0
33818: PPUSH
33819: PPUSH
33820: PPUSH
// for i in all_units do
33821: LD_ADDR_VAR 0 2
33825: PUSH
33826: LD_OWVAR 3
33830: PUSH
33831: FOR_IN
33832: IFFALSE 33910
// if IsSelected ( i ) then
33834: LD_VAR 0 2
33838: PPUSH
33839: CALL_OW 306
33843: IFFALSE 33908
// begin j := GetSide ( i ) ;
33845: LD_ADDR_VAR 0 3
33849: PUSH
33850: LD_VAR 0 2
33854: PPUSH
33855: CALL_OW 255
33859: ST_TO_ADDR
// if j = 8 then
33860: LD_VAR 0 3
33864: PUSH
33865: LD_INT 8
33867: EQUAL
33868: IFFALSE 33880
// j := 0 else
33870: LD_ADDR_VAR 0 3
33874: PUSH
33875: LD_INT 0
33877: ST_TO_ADDR
33878: GO 33894
// j := j + 1 ;
33880: LD_ADDR_VAR 0 3
33884: PUSH
33885: LD_VAR 0 3
33889: PUSH
33890: LD_INT 1
33892: PLUS
33893: ST_TO_ADDR
// SetSide ( i , j ) ;
33894: LD_VAR 0 2
33898: PPUSH
33899: LD_VAR 0 3
33903: PPUSH
33904: CALL_OW 235
// end ;
33908: GO 33831
33910: POP
33911: POP
// end ;
33912: LD_VAR 0 1
33916: RET
// export function hHackFog ; begin
33917: LD_INT 0
33919: PPUSH
// FogOff ( true ) ;
33920: LD_INT 1
33922: PPUSH
33923: CALL_OW 344
// end ;
33927: LD_VAR 0 1
33931: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33932: LD_INT 0
33934: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33935: LD_VAR 0 1
33939: PPUSH
33940: LD_VAR 0 2
33944: PPUSH
33945: LD_VAR 0 3
33949: PPUSH
33950: LD_INT 1
33952: PPUSH
33953: LD_INT 1
33955: PPUSH
33956: CALL_OW 483
// CenterOnXY ( x , y ) ;
33960: LD_VAR 0 2
33964: PPUSH
33965: LD_VAR 0 3
33969: PPUSH
33970: CALL_OW 84
// end ;
33974: LD_VAR 0 4
33978: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
33979: LD_INT 0
33981: PPUSH
33982: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
33983: LD_VAR 0 1
33987: NOT
33988: PUSH
33989: LD_VAR 0 2
33993: PPUSH
33994: LD_VAR 0 3
33998: PPUSH
33999: CALL_OW 488
34003: NOT
34004: OR
34005: PUSH
34006: LD_VAR 0 1
34010: PPUSH
34011: CALL_OW 266
34015: PUSH
34016: LD_INT 3
34018: NONEQUAL
34019: PUSH
34020: LD_VAR 0 1
34024: PPUSH
34025: CALL_OW 247
34029: PUSH
34030: LD_INT 1
34032: EQUAL
34033: NOT
34034: AND
34035: OR
34036: IFFALSE 34040
// exit ;
34038: GO 34189
// if GetType ( factory ) = unit_human then
34040: LD_VAR 0 1
34044: PPUSH
34045: CALL_OW 247
34049: PUSH
34050: LD_INT 1
34052: EQUAL
34053: IFFALSE 34070
// factory := IsInUnit ( factory ) ;
34055: LD_ADDR_VAR 0 1
34059: PUSH
34060: LD_VAR 0 1
34064: PPUSH
34065: CALL_OW 310
34069: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34070: LD_VAR 0 1
34074: PPUSH
34075: CALL_OW 266
34079: PUSH
34080: LD_INT 3
34082: NONEQUAL
34083: IFFALSE 34087
// exit ;
34085: GO 34189
// if HexInfo ( x , y ) = factory then
34087: LD_VAR 0 2
34091: PPUSH
34092: LD_VAR 0 3
34096: PPUSH
34097: CALL_OW 428
34101: PUSH
34102: LD_VAR 0 1
34106: EQUAL
34107: IFFALSE 34134
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
34109: LD_ADDR_EXP 118
34113: PUSH
34114: LD_EXP 118
34118: PPUSH
34119: LD_VAR 0 1
34123: PPUSH
34124: LD_INT 0
34126: PPUSH
34127: CALL_OW 1
34131: ST_TO_ADDR
34132: GO 34185
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
34134: LD_ADDR_EXP 118
34138: PUSH
34139: LD_EXP 118
34143: PPUSH
34144: LD_VAR 0 1
34148: PPUSH
34149: LD_VAR 0 1
34153: PPUSH
34154: CALL_OW 255
34158: PUSH
34159: LD_VAR 0 1
34163: PUSH
34164: LD_VAR 0 2
34168: PUSH
34169: LD_VAR 0 3
34173: PUSH
34174: EMPTY
34175: LIST
34176: LIST
34177: LIST
34178: LIST
34179: PPUSH
34180: CALL_OW 1
34184: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34185: CALL 34194 0 0
// end ;
34189: LD_VAR 0 4
34193: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34194: LD_INT 0
34196: PPUSH
34197: PPUSH
34198: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34199: LD_STRING resetFactoryWaypoint();
34201: PPUSH
34202: CALL_OW 559
// if factoryWaypoints then
34206: LD_EXP 118
34210: IFFALSE 34336
// begin list := PrepareArray ( factoryWaypoints ) ;
34212: LD_ADDR_VAR 0 3
34216: PUSH
34217: LD_EXP 118
34221: PPUSH
34222: CALL 80713 0 1
34226: ST_TO_ADDR
// for i := 1 to list do
34227: LD_ADDR_VAR 0 2
34231: PUSH
34232: DOUBLE
34233: LD_INT 1
34235: DEC
34236: ST_TO_ADDR
34237: LD_VAR 0 3
34241: PUSH
34242: FOR_TO
34243: IFFALSE 34334
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34245: LD_STRING setFactoryWaypointXY(
34247: PUSH
34248: LD_VAR 0 3
34252: PUSH
34253: LD_VAR 0 2
34257: ARRAY
34258: PUSH
34259: LD_INT 1
34261: ARRAY
34262: STR
34263: PUSH
34264: LD_STRING ,
34266: STR
34267: PUSH
34268: LD_VAR 0 3
34272: PUSH
34273: LD_VAR 0 2
34277: ARRAY
34278: PUSH
34279: LD_INT 2
34281: ARRAY
34282: STR
34283: PUSH
34284: LD_STRING ,
34286: STR
34287: PUSH
34288: LD_VAR 0 3
34292: PUSH
34293: LD_VAR 0 2
34297: ARRAY
34298: PUSH
34299: LD_INT 3
34301: ARRAY
34302: STR
34303: PUSH
34304: LD_STRING ,
34306: STR
34307: PUSH
34308: LD_VAR 0 3
34312: PUSH
34313: LD_VAR 0 2
34317: ARRAY
34318: PUSH
34319: LD_INT 4
34321: ARRAY
34322: STR
34323: PUSH
34324: LD_STRING )
34326: STR
34327: PPUSH
34328: CALL_OW 559
34332: GO 34242
34334: POP
34335: POP
// end ; end ;
34336: LD_VAR 0 1
34340: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34341: LD_INT 0
34343: PPUSH
// if HexInfo ( x , y ) = warehouse then
34344: LD_VAR 0 2
34348: PPUSH
34349: LD_VAR 0 3
34353: PPUSH
34354: CALL_OW 428
34358: PUSH
34359: LD_VAR 0 1
34363: EQUAL
34364: IFFALSE 34391
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34366: LD_ADDR_EXP 119
34370: PUSH
34371: LD_EXP 119
34375: PPUSH
34376: LD_VAR 0 1
34380: PPUSH
34381: LD_INT 0
34383: PPUSH
34384: CALL_OW 1
34388: ST_TO_ADDR
34389: GO 34442
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34391: LD_ADDR_EXP 119
34395: PUSH
34396: LD_EXP 119
34400: PPUSH
34401: LD_VAR 0 1
34405: PPUSH
34406: LD_VAR 0 1
34410: PPUSH
34411: CALL_OW 255
34415: PUSH
34416: LD_VAR 0 1
34420: PUSH
34421: LD_VAR 0 2
34425: PUSH
34426: LD_VAR 0 3
34430: PUSH
34431: EMPTY
34432: LIST
34433: LIST
34434: LIST
34435: LIST
34436: PPUSH
34437: CALL_OW 1
34441: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
34442: CALL 34451 0 0
// end ;
34446: LD_VAR 0 4
34450: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
34451: LD_INT 0
34453: PPUSH
34454: PPUSH
34455: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
34456: LD_STRING resetWarehouseGatheringPoints();
34458: PPUSH
34459: CALL_OW 559
// if warehouseGatheringPoints then
34463: LD_EXP 119
34467: IFFALSE 34593
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
34469: LD_ADDR_VAR 0 3
34473: PUSH
34474: LD_EXP 119
34478: PPUSH
34479: CALL 80713 0 1
34483: ST_TO_ADDR
// for i := 1 to list do
34484: LD_ADDR_VAR 0 2
34488: PUSH
34489: DOUBLE
34490: LD_INT 1
34492: DEC
34493: ST_TO_ADDR
34494: LD_VAR 0 3
34498: PUSH
34499: FOR_TO
34500: IFFALSE 34591
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34502: LD_STRING setWarehouseGatheringPointXY(
34504: PUSH
34505: LD_VAR 0 3
34509: PUSH
34510: LD_VAR 0 2
34514: ARRAY
34515: PUSH
34516: LD_INT 1
34518: ARRAY
34519: STR
34520: PUSH
34521: LD_STRING ,
34523: STR
34524: PUSH
34525: LD_VAR 0 3
34529: PUSH
34530: LD_VAR 0 2
34534: ARRAY
34535: PUSH
34536: LD_INT 2
34538: ARRAY
34539: STR
34540: PUSH
34541: LD_STRING ,
34543: STR
34544: PUSH
34545: LD_VAR 0 3
34549: PUSH
34550: LD_VAR 0 2
34554: ARRAY
34555: PUSH
34556: LD_INT 3
34558: ARRAY
34559: STR
34560: PUSH
34561: LD_STRING ,
34563: STR
34564: PUSH
34565: LD_VAR 0 3
34569: PUSH
34570: LD_VAR 0 2
34574: ARRAY
34575: PUSH
34576: LD_INT 4
34578: ARRAY
34579: STR
34580: PUSH
34581: LD_STRING )
34583: STR
34584: PPUSH
34585: CALL_OW 559
34589: GO 34499
34591: POP
34592: POP
// end ; end ;
34593: LD_VAR 0 1
34597: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
34598: LD_EXP 119
34602: IFFALSE 35287
34604: GO 34606
34606: DISABLE
34607: LD_INT 0
34609: PPUSH
34610: PPUSH
34611: PPUSH
34612: PPUSH
34613: PPUSH
34614: PPUSH
34615: PPUSH
34616: PPUSH
34617: PPUSH
// begin enable ;
34618: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
34619: LD_ADDR_VAR 0 3
34623: PUSH
34624: LD_EXP 119
34628: PPUSH
34629: CALL 80713 0 1
34633: ST_TO_ADDR
// if not list then
34634: LD_VAR 0 3
34638: NOT
34639: IFFALSE 34643
// exit ;
34641: GO 35287
// for i := 1 to list do
34643: LD_ADDR_VAR 0 1
34647: PUSH
34648: DOUBLE
34649: LD_INT 1
34651: DEC
34652: ST_TO_ADDR
34653: LD_VAR 0 3
34657: PUSH
34658: FOR_TO
34659: IFFALSE 35285
// begin depot := list [ i ] [ 2 ] ;
34661: LD_ADDR_VAR 0 8
34665: PUSH
34666: LD_VAR 0 3
34670: PUSH
34671: LD_VAR 0 1
34675: ARRAY
34676: PUSH
34677: LD_INT 2
34679: ARRAY
34680: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
34681: LD_ADDR_VAR 0 5
34685: PUSH
34686: LD_VAR 0 3
34690: PUSH
34691: LD_VAR 0 1
34695: ARRAY
34696: PUSH
34697: LD_INT 1
34699: ARRAY
34700: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
34701: LD_VAR 0 8
34705: PPUSH
34706: CALL_OW 301
34710: PUSH
34711: LD_VAR 0 5
34715: PUSH
34716: LD_VAR 0 8
34720: PPUSH
34721: CALL_OW 255
34725: NONEQUAL
34726: OR
34727: IFFALSE 34756
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
34729: LD_ADDR_EXP 119
34733: PUSH
34734: LD_EXP 119
34738: PPUSH
34739: LD_VAR 0 8
34743: PPUSH
34744: LD_INT 0
34746: PPUSH
34747: CALL_OW 1
34751: ST_TO_ADDR
// exit ;
34752: POP
34753: POP
34754: GO 35287
// end ; x := list [ i ] [ 3 ] ;
34756: LD_ADDR_VAR 0 6
34760: PUSH
34761: LD_VAR 0 3
34765: PUSH
34766: LD_VAR 0 1
34770: ARRAY
34771: PUSH
34772: LD_INT 3
34774: ARRAY
34775: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
34776: LD_ADDR_VAR 0 7
34780: PUSH
34781: LD_VAR 0 3
34785: PUSH
34786: LD_VAR 0 1
34790: ARRAY
34791: PUSH
34792: LD_INT 4
34794: ARRAY
34795: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
34796: LD_ADDR_VAR 0 9
34800: PUSH
34801: LD_VAR 0 6
34805: PPUSH
34806: LD_VAR 0 7
34810: PPUSH
34811: LD_INT 16
34813: PPUSH
34814: CALL 79301 0 3
34818: ST_TO_ADDR
// if not cratesNearbyPoint then
34819: LD_VAR 0 9
34823: NOT
34824: IFFALSE 34830
// exit ;
34826: POP
34827: POP
34828: GO 35287
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
34830: LD_ADDR_VAR 0 4
34834: PUSH
34835: LD_INT 22
34837: PUSH
34838: LD_VAR 0 5
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: PUSH
34847: LD_INT 3
34849: PUSH
34850: LD_INT 60
34852: PUSH
34853: EMPTY
34854: LIST
34855: PUSH
34856: EMPTY
34857: LIST
34858: LIST
34859: PUSH
34860: LD_INT 91
34862: PUSH
34863: LD_VAR 0 8
34867: PUSH
34868: LD_INT 6
34870: PUSH
34871: EMPTY
34872: LIST
34873: LIST
34874: LIST
34875: PUSH
34876: LD_INT 2
34878: PUSH
34879: LD_INT 25
34881: PUSH
34882: LD_INT 2
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: PUSH
34889: LD_INT 25
34891: PUSH
34892: LD_INT 16
34894: PUSH
34895: EMPTY
34896: LIST
34897: LIST
34898: PUSH
34899: EMPTY
34900: LIST
34901: LIST
34902: LIST
34903: PUSH
34904: EMPTY
34905: LIST
34906: LIST
34907: LIST
34908: LIST
34909: PPUSH
34910: CALL_OW 69
34914: PUSH
34915: LD_VAR 0 8
34919: PPUSH
34920: CALL_OW 313
34924: PPUSH
34925: LD_INT 3
34927: PUSH
34928: LD_INT 60
34930: PUSH
34931: EMPTY
34932: LIST
34933: PUSH
34934: EMPTY
34935: LIST
34936: LIST
34937: PUSH
34938: LD_INT 2
34940: PUSH
34941: LD_INT 25
34943: PUSH
34944: LD_INT 2
34946: PUSH
34947: EMPTY
34948: LIST
34949: LIST
34950: PUSH
34951: LD_INT 25
34953: PUSH
34954: LD_INT 16
34956: PUSH
34957: EMPTY
34958: LIST
34959: LIST
34960: PUSH
34961: EMPTY
34962: LIST
34963: LIST
34964: LIST
34965: PUSH
34966: EMPTY
34967: LIST
34968: LIST
34969: PPUSH
34970: CALL_OW 72
34974: UNION
34975: ST_TO_ADDR
// if tmp then
34976: LD_VAR 0 4
34980: IFFALSE 35060
// begin tmp := ShrinkArray ( tmp , 3 ) ;
34982: LD_ADDR_VAR 0 4
34986: PUSH
34987: LD_VAR 0 4
34991: PPUSH
34992: LD_INT 3
34994: PPUSH
34995: CALL 77270 0 2
34999: ST_TO_ADDR
// for j in tmp do
35000: LD_ADDR_VAR 0 2
35004: PUSH
35005: LD_VAR 0 4
35009: PUSH
35010: FOR_IN
35011: IFFALSE 35054
// begin if IsInUnit ( j ) then
35013: LD_VAR 0 2
35017: PPUSH
35018: CALL_OW 310
35022: IFFALSE 35033
// ComExit ( j ) ;
35024: LD_VAR 0 2
35028: PPUSH
35029: CALL 77353 0 1
// AddComCollect ( j , x , y ) ;
35033: LD_VAR 0 2
35037: PPUSH
35038: LD_VAR 0 6
35042: PPUSH
35043: LD_VAR 0 7
35047: PPUSH
35048: CALL_OW 177
// end ;
35052: GO 35010
35054: POP
35055: POP
// exit ;
35056: POP
35057: POP
35058: GO 35287
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35060: LD_ADDR_VAR 0 4
35064: PUSH
35065: LD_INT 22
35067: PUSH
35068: LD_VAR 0 5
35072: PUSH
35073: EMPTY
35074: LIST
35075: LIST
35076: PUSH
35077: LD_INT 91
35079: PUSH
35080: LD_VAR 0 8
35084: PUSH
35085: LD_INT 8
35087: PUSH
35088: EMPTY
35089: LIST
35090: LIST
35091: LIST
35092: PUSH
35093: LD_INT 2
35095: PUSH
35096: LD_INT 34
35098: PUSH
35099: LD_INT 12
35101: PUSH
35102: EMPTY
35103: LIST
35104: LIST
35105: PUSH
35106: LD_INT 34
35108: PUSH
35109: LD_INT 51
35111: PUSH
35112: EMPTY
35113: LIST
35114: LIST
35115: PUSH
35116: LD_INT 34
35118: PUSH
35119: LD_INT 32
35121: PUSH
35122: EMPTY
35123: LIST
35124: LIST
35125: PUSH
35126: LD_INT 34
35128: PUSH
35129: LD_INT 89
35131: PUSH
35132: EMPTY
35133: LIST
35134: LIST
35135: PUSH
35136: EMPTY
35137: LIST
35138: LIST
35139: LIST
35140: LIST
35141: LIST
35142: PUSH
35143: EMPTY
35144: LIST
35145: LIST
35146: LIST
35147: PPUSH
35148: CALL_OW 69
35152: ST_TO_ADDR
// if tmp then
35153: LD_VAR 0 4
35157: IFFALSE 35283
// begin for j in tmp do
35159: LD_ADDR_VAR 0 2
35163: PUSH
35164: LD_VAR 0 4
35168: PUSH
35169: FOR_IN
35170: IFFALSE 35281
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35172: LD_VAR 0 2
35176: PPUSH
35177: CALL_OW 262
35181: PUSH
35182: LD_INT 3
35184: EQUAL
35185: PUSH
35186: LD_VAR 0 2
35190: PPUSH
35191: CALL_OW 261
35195: PUSH
35196: LD_INT 20
35198: GREATER
35199: OR
35200: PUSH
35201: LD_VAR 0 2
35205: PPUSH
35206: CALL_OW 314
35210: NOT
35211: AND
35212: PUSH
35213: LD_VAR 0 2
35217: PPUSH
35218: CALL_OW 263
35222: PUSH
35223: LD_INT 1
35225: NONEQUAL
35226: PUSH
35227: LD_VAR 0 2
35231: PPUSH
35232: CALL_OW 311
35236: OR
35237: AND
35238: IFFALSE 35279
// begin ComCollect ( j , x , y ) ;
35240: LD_VAR 0 2
35244: PPUSH
35245: LD_VAR 0 6
35249: PPUSH
35250: LD_VAR 0 7
35254: PPUSH
35255: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35259: LD_VAR 0 2
35263: PPUSH
35264: LD_VAR 0 8
35268: PPUSH
35269: CALL_OW 172
// exit ;
35273: POP
35274: POP
35275: POP
35276: POP
35277: GO 35287
// end ;
35279: GO 35169
35281: POP
35282: POP
// end ; end ;
35283: GO 34658
35285: POP
35286: POP
// end ; end_of_file
35287: PPOPN 9
35289: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
35290: LD_INT 0
35292: PPUSH
35293: PPUSH
35294: PPUSH
35295: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
35296: LD_VAR 0 1
35300: PPUSH
35301: CALL_OW 264
35305: PUSH
35306: LD_INT 91
35308: EQUAL
35309: IFFALSE 35381
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
35311: LD_INT 68
35313: PPUSH
35314: LD_VAR 0 1
35318: PPUSH
35319: CALL_OW 255
35323: PPUSH
35324: CALL_OW 321
35328: PUSH
35329: LD_INT 2
35331: EQUAL
35332: IFFALSE 35344
// eff := 70 else
35334: LD_ADDR_VAR 0 4
35338: PUSH
35339: LD_INT 70
35341: ST_TO_ADDR
35342: GO 35352
// eff := 30 ;
35344: LD_ADDR_VAR 0 4
35348: PUSH
35349: LD_INT 30
35351: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35352: LD_VAR 0 1
35356: PPUSH
35357: CALL_OW 250
35361: PPUSH
35362: LD_VAR 0 1
35366: PPUSH
35367: CALL_OW 251
35371: PPUSH
35372: LD_VAR 0 4
35376: PPUSH
35377: CALL_OW 495
// end ; end ;
35381: LD_VAR 0 2
35385: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35386: LD_INT 0
35388: PPUSH
// end ;
35389: LD_VAR 0 4
35393: RET
// export function SOS_Command ( cmd ) ; begin
35394: LD_INT 0
35396: PPUSH
// end ;
35397: LD_VAR 0 2
35401: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35402: LD_INT 0
35404: PPUSH
// end ;
35405: LD_VAR 0 6
35409: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
35410: LD_INT 0
35412: PPUSH
35413: PPUSH
// if not vehicle or not factory then
35414: LD_VAR 0 1
35418: NOT
35419: PUSH
35420: LD_VAR 0 2
35424: NOT
35425: OR
35426: IFFALSE 35430
// exit ;
35428: GO 35661
// if factoryWaypoints >= factory then
35430: LD_EXP 118
35434: PUSH
35435: LD_VAR 0 2
35439: GREATEREQUAL
35440: IFFALSE 35661
// if factoryWaypoints [ factory ] then
35442: LD_EXP 118
35446: PUSH
35447: LD_VAR 0 2
35451: ARRAY
35452: IFFALSE 35661
// begin if GetControl ( vehicle ) = control_manual then
35454: LD_VAR 0 1
35458: PPUSH
35459: CALL_OW 263
35463: PUSH
35464: LD_INT 1
35466: EQUAL
35467: IFFALSE 35548
// begin driver := IsDrivenBy ( vehicle ) ;
35469: LD_ADDR_VAR 0 4
35473: PUSH
35474: LD_VAR 0 1
35478: PPUSH
35479: CALL_OW 311
35483: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35484: LD_VAR 0 4
35488: PPUSH
35489: LD_EXP 118
35493: PUSH
35494: LD_VAR 0 2
35498: ARRAY
35499: PUSH
35500: LD_INT 3
35502: ARRAY
35503: PPUSH
35504: LD_EXP 118
35508: PUSH
35509: LD_VAR 0 2
35513: ARRAY
35514: PUSH
35515: LD_INT 4
35517: ARRAY
35518: PPUSH
35519: CALL_OW 171
// AddComExitVehicle ( driver ) ;
35523: LD_VAR 0 4
35527: PPUSH
35528: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
35532: LD_VAR 0 4
35536: PPUSH
35537: LD_VAR 0 2
35541: PPUSH
35542: CALL_OW 180
// end else
35546: GO 35661
// if GetControl ( vehicle ) = control_remote then
35548: LD_VAR 0 1
35552: PPUSH
35553: CALL_OW 263
35557: PUSH
35558: LD_INT 2
35560: EQUAL
35561: IFFALSE 35622
// begin wait ( 0 0$2 ) ;
35563: LD_INT 70
35565: PPUSH
35566: CALL_OW 67
// if Connect ( vehicle ) then
35570: LD_VAR 0 1
35574: PPUSH
35575: CALL 47685 0 1
35579: IFFALSE 35620
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35581: LD_VAR 0 1
35585: PPUSH
35586: LD_EXP 118
35590: PUSH
35591: LD_VAR 0 2
35595: ARRAY
35596: PUSH
35597: LD_INT 3
35599: ARRAY
35600: PPUSH
35601: LD_EXP 118
35605: PUSH
35606: LD_VAR 0 2
35610: ARRAY
35611: PUSH
35612: LD_INT 4
35614: ARRAY
35615: PPUSH
35616: CALL_OW 171
// end else
35620: GO 35661
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35622: LD_VAR 0 1
35626: PPUSH
35627: LD_EXP 118
35631: PUSH
35632: LD_VAR 0 2
35636: ARRAY
35637: PUSH
35638: LD_INT 3
35640: ARRAY
35641: PPUSH
35642: LD_EXP 118
35646: PUSH
35647: LD_VAR 0 2
35651: ARRAY
35652: PUSH
35653: LD_INT 4
35655: ARRAY
35656: PPUSH
35657: CALL_OW 171
// end ; end ;
35661: LD_VAR 0 3
35665: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
35666: LD_INT 0
35668: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
35669: LD_VAR 0 1
35673: PUSH
35674: LD_INT 250
35676: EQUAL
35677: PUSH
35678: LD_VAR 0 2
35682: PPUSH
35683: CALL_OW 264
35687: PUSH
35688: LD_INT 81
35690: EQUAL
35691: AND
35692: IFFALSE 35713
// MinerPlaceMine ( unit , x , y ) ;
35694: LD_VAR 0 2
35698: PPUSH
35699: LD_VAR 0 4
35703: PPUSH
35704: LD_VAR 0 5
35708: PPUSH
35709: CALL 38098 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
35713: LD_VAR 0 1
35717: PUSH
35718: LD_INT 251
35720: EQUAL
35721: PUSH
35722: LD_VAR 0 2
35726: PPUSH
35727: CALL_OW 264
35731: PUSH
35732: LD_INT 81
35734: EQUAL
35735: AND
35736: IFFALSE 35757
// MinerDetonateMine ( unit , x , y ) ;
35738: LD_VAR 0 2
35742: PPUSH
35743: LD_VAR 0 4
35747: PPUSH
35748: LD_VAR 0 5
35752: PPUSH
35753: CALL 38373 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
35757: LD_VAR 0 1
35761: PUSH
35762: LD_INT 252
35764: EQUAL
35765: PUSH
35766: LD_VAR 0 2
35770: PPUSH
35771: CALL_OW 264
35775: PUSH
35776: LD_INT 81
35778: EQUAL
35779: AND
35780: IFFALSE 35801
// MinerCreateMinefield ( unit , x , y ) ;
35782: LD_VAR 0 2
35786: PPUSH
35787: LD_VAR 0 4
35791: PPUSH
35792: LD_VAR 0 5
35796: PPUSH
35797: CALL 38790 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
35801: LD_VAR 0 1
35805: PUSH
35806: LD_INT 253
35808: EQUAL
35809: PUSH
35810: LD_VAR 0 2
35814: PPUSH
35815: CALL_OW 257
35819: PUSH
35820: LD_INT 5
35822: EQUAL
35823: AND
35824: IFFALSE 35845
// ComBinocular ( unit , x , y ) ;
35826: LD_VAR 0 2
35830: PPUSH
35831: LD_VAR 0 4
35835: PPUSH
35836: LD_VAR 0 5
35840: PPUSH
35841: CALL 39159 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
35845: LD_VAR 0 1
35849: PUSH
35850: LD_INT 254
35852: EQUAL
35853: PUSH
35854: LD_VAR 0 2
35858: PPUSH
35859: CALL_OW 264
35863: PUSH
35864: LD_INT 99
35866: EQUAL
35867: AND
35868: PUSH
35869: LD_VAR 0 3
35873: PPUSH
35874: CALL_OW 263
35878: PUSH
35879: LD_INT 3
35881: EQUAL
35882: AND
35883: IFFALSE 35899
// HackDestroyVehicle ( unit , selectedUnit ) ;
35885: LD_VAR 0 2
35889: PPUSH
35890: LD_VAR 0 3
35894: PPUSH
35895: CALL 37462 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
35899: LD_VAR 0 1
35903: PUSH
35904: LD_INT 255
35906: EQUAL
35907: PUSH
35908: LD_VAR 0 2
35912: PPUSH
35913: CALL_OW 264
35917: PUSH
35918: LD_INT 14
35920: PUSH
35921: LD_INT 53
35923: PUSH
35924: EMPTY
35925: LIST
35926: LIST
35927: IN
35928: AND
35929: PUSH
35930: LD_VAR 0 4
35934: PPUSH
35935: LD_VAR 0 5
35939: PPUSH
35940: CALL_OW 488
35944: AND
35945: IFFALSE 35969
// CutTreeXYR ( unit , x , y , 12 ) ;
35947: LD_VAR 0 2
35951: PPUSH
35952: LD_VAR 0 4
35956: PPUSH
35957: LD_VAR 0 5
35961: PPUSH
35962: LD_INT 12
35964: PPUSH
35965: CALL 36032 0 4
// if cmd = 256 then
35969: LD_VAR 0 1
35973: PUSH
35974: LD_INT 256
35976: EQUAL
35977: IFFALSE 35998
// SetFactoryWaypoint ( unit , x , y ) ;
35979: LD_VAR 0 2
35983: PPUSH
35984: LD_VAR 0 4
35988: PPUSH
35989: LD_VAR 0 5
35993: PPUSH
35994: CALL 33979 0 3
// if cmd = 257 then
35998: LD_VAR 0 1
36002: PUSH
36003: LD_INT 257
36005: EQUAL
36006: IFFALSE 36027
// SetWarehouseGatheringPoint ( unit , x , y ) ;
36008: LD_VAR 0 2
36012: PPUSH
36013: LD_VAR 0 4
36017: PPUSH
36018: LD_VAR 0 5
36022: PPUSH
36023: CALL 34341 0 3
// end ;
36027: LD_VAR 0 6
36031: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36032: LD_INT 0
36034: PPUSH
36035: PPUSH
36036: PPUSH
36037: PPUSH
36038: PPUSH
36039: PPUSH
36040: PPUSH
36041: PPUSH
36042: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
36043: LD_VAR 0 1
36047: NOT
36048: PUSH
36049: LD_VAR 0 2
36053: PPUSH
36054: LD_VAR 0 3
36058: PPUSH
36059: CALL_OW 488
36063: NOT
36064: OR
36065: PUSH
36066: LD_VAR 0 4
36070: NOT
36071: OR
36072: IFFALSE 36076
// exit ;
36074: GO 36416
// list := [ ] ;
36076: LD_ADDR_VAR 0 13
36080: PUSH
36081: EMPTY
36082: ST_TO_ADDR
// if x - r < 0 then
36083: LD_VAR 0 2
36087: PUSH
36088: LD_VAR 0 4
36092: MINUS
36093: PUSH
36094: LD_INT 0
36096: LESS
36097: IFFALSE 36109
// min_x := 0 else
36099: LD_ADDR_VAR 0 7
36103: PUSH
36104: LD_INT 0
36106: ST_TO_ADDR
36107: GO 36125
// min_x := x - r ;
36109: LD_ADDR_VAR 0 7
36113: PUSH
36114: LD_VAR 0 2
36118: PUSH
36119: LD_VAR 0 4
36123: MINUS
36124: ST_TO_ADDR
// if y - r < 0 then
36125: LD_VAR 0 3
36129: PUSH
36130: LD_VAR 0 4
36134: MINUS
36135: PUSH
36136: LD_INT 0
36138: LESS
36139: IFFALSE 36151
// min_y := 0 else
36141: LD_ADDR_VAR 0 8
36145: PUSH
36146: LD_INT 0
36148: ST_TO_ADDR
36149: GO 36167
// min_y := y - r ;
36151: LD_ADDR_VAR 0 8
36155: PUSH
36156: LD_VAR 0 3
36160: PUSH
36161: LD_VAR 0 4
36165: MINUS
36166: ST_TO_ADDR
// max_x := x + r ;
36167: LD_ADDR_VAR 0 9
36171: PUSH
36172: LD_VAR 0 2
36176: PUSH
36177: LD_VAR 0 4
36181: PLUS
36182: ST_TO_ADDR
// max_y := y + r ;
36183: LD_ADDR_VAR 0 10
36187: PUSH
36188: LD_VAR 0 3
36192: PUSH
36193: LD_VAR 0 4
36197: PLUS
36198: ST_TO_ADDR
// for _x = min_x to max_x do
36199: LD_ADDR_VAR 0 11
36203: PUSH
36204: DOUBLE
36205: LD_VAR 0 7
36209: DEC
36210: ST_TO_ADDR
36211: LD_VAR 0 9
36215: PUSH
36216: FOR_TO
36217: IFFALSE 36334
// for _y = min_y to max_y do
36219: LD_ADDR_VAR 0 12
36223: PUSH
36224: DOUBLE
36225: LD_VAR 0 8
36229: DEC
36230: ST_TO_ADDR
36231: LD_VAR 0 10
36235: PUSH
36236: FOR_TO
36237: IFFALSE 36330
// begin if not ValidHex ( _x , _y ) then
36239: LD_VAR 0 11
36243: PPUSH
36244: LD_VAR 0 12
36248: PPUSH
36249: CALL_OW 488
36253: NOT
36254: IFFALSE 36258
// continue ;
36256: GO 36236
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36258: LD_VAR 0 11
36262: PPUSH
36263: LD_VAR 0 12
36267: PPUSH
36268: CALL_OW 351
36272: PUSH
36273: LD_VAR 0 11
36277: PPUSH
36278: LD_VAR 0 12
36282: PPUSH
36283: CALL_OW 554
36287: AND
36288: IFFALSE 36328
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36290: LD_ADDR_VAR 0 13
36294: PUSH
36295: LD_VAR 0 13
36299: PPUSH
36300: LD_VAR 0 13
36304: PUSH
36305: LD_INT 1
36307: PLUS
36308: PPUSH
36309: LD_VAR 0 11
36313: PUSH
36314: LD_VAR 0 12
36318: PUSH
36319: EMPTY
36320: LIST
36321: LIST
36322: PPUSH
36323: CALL_OW 2
36327: ST_TO_ADDR
// end ;
36328: GO 36236
36330: POP
36331: POP
36332: GO 36216
36334: POP
36335: POP
// if not list then
36336: LD_VAR 0 13
36340: NOT
36341: IFFALSE 36345
// exit ;
36343: GO 36416
// for i in list do
36345: LD_ADDR_VAR 0 6
36349: PUSH
36350: LD_VAR 0 13
36354: PUSH
36355: FOR_IN
36356: IFFALSE 36414
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
36358: LD_VAR 0 1
36362: PPUSH
36363: LD_STRING M
36365: PUSH
36366: LD_VAR 0 6
36370: PUSH
36371: LD_INT 1
36373: ARRAY
36374: PUSH
36375: LD_VAR 0 6
36379: PUSH
36380: LD_INT 2
36382: ARRAY
36383: PUSH
36384: LD_INT 0
36386: PUSH
36387: LD_INT 0
36389: PUSH
36390: LD_INT 0
36392: PUSH
36393: LD_INT 0
36395: PUSH
36396: EMPTY
36397: LIST
36398: LIST
36399: LIST
36400: LIST
36401: LIST
36402: LIST
36403: LIST
36404: PUSH
36405: EMPTY
36406: LIST
36407: PPUSH
36408: CALL_OW 447
36412: GO 36355
36414: POP
36415: POP
// end ;
36416: LD_VAR 0 5
36420: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
36421: LD_EXP 121
36425: NOT
36426: IFFALSE 36476
36428: GO 36430
36430: DISABLE
// begin initHack := true ;
36431: LD_ADDR_EXP 121
36435: PUSH
36436: LD_INT 1
36438: ST_TO_ADDR
// hackTanks := [ ] ;
36439: LD_ADDR_EXP 122
36443: PUSH
36444: EMPTY
36445: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
36446: LD_ADDR_EXP 123
36450: PUSH
36451: EMPTY
36452: ST_TO_ADDR
// hackLimit := 3 ;
36453: LD_ADDR_EXP 124
36457: PUSH
36458: LD_INT 3
36460: ST_TO_ADDR
// hackDist := 12 ;
36461: LD_ADDR_EXP 125
36465: PUSH
36466: LD_INT 12
36468: ST_TO_ADDR
// hackCounter := [ ] ;
36469: LD_ADDR_EXP 126
36473: PUSH
36474: EMPTY
36475: ST_TO_ADDR
// end ;
36476: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
36477: LD_EXP 121
36481: PUSH
36482: LD_INT 34
36484: PUSH
36485: LD_INT 99
36487: PUSH
36488: EMPTY
36489: LIST
36490: LIST
36491: PPUSH
36492: CALL_OW 69
36496: AND
36497: IFFALSE 36750
36499: GO 36501
36501: DISABLE
36502: LD_INT 0
36504: PPUSH
36505: PPUSH
// begin enable ;
36506: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
36507: LD_ADDR_VAR 0 1
36511: PUSH
36512: LD_INT 34
36514: PUSH
36515: LD_INT 99
36517: PUSH
36518: EMPTY
36519: LIST
36520: LIST
36521: PPUSH
36522: CALL_OW 69
36526: PUSH
36527: FOR_IN
36528: IFFALSE 36748
// begin if not i in hackTanks then
36530: LD_VAR 0 1
36534: PUSH
36535: LD_EXP 122
36539: IN
36540: NOT
36541: IFFALSE 36624
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
36543: LD_ADDR_EXP 122
36547: PUSH
36548: LD_EXP 122
36552: PPUSH
36553: LD_EXP 122
36557: PUSH
36558: LD_INT 1
36560: PLUS
36561: PPUSH
36562: LD_VAR 0 1
36566: PPUSH
36567: CALL_OW 1
36571: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
36572: LD_ADDR_EXP 123
36576: PUSH
36577: LD_EXP 123
36581: PPUSH
36582: LD_EXP 123
36586: PUSH
36587: LD_INT 1
36589: PLUS
36590: PPUSH
36591: EMPTY
36592: PPUSH
36593: CALL_OW 1
36597: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
36598: LD_ADDR_EXP 126
36602: PUSH
36603: LD_EXP 126
36607: PPUSH
36608: LD_EXP 126
36612: PUSH
36613: LD_INT 1
36615: PLUS
36616: PPUSH
36617: EMPTY
36618: PPUSH
36619: CALL_OW 1
36623: ST_TO_ADDR
// end ; if not IsOk ( i ) then
36624: LD_VAR 0 1
36628: PPUSH
36629: CALL_OW 302
36633: NOT
36634: IFFALSE 36647
// begin HackUnlinkAll ( i ) ;
36636: LD_VAR 0 1
36640: PPUSH
36641: CALL 36753 0 1
// continue ;
36645: GO 36527
// end ; HackCheckCapturedStatus ( i ) ;
36647: LD_VAR 0 1
36651: PPUSH
36652: CALL 37196 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
36656: LD_ADDR_VAR 0 2
36660: PUSH
36661: LD_INT 81
36663: PUSH
36664: LD_VAR 0 1
36668: PPUSH
36669: CALL_OW 255
36673: PUSH
36674: EMPTY
36675: LIST
36676: LIST
36677: PUSH
36678: LD_INT 33
36680: PUSH
36681: LD_INT 3
36683: PUSH
36684: EMPTY
36685: LIST
36686: LIST
36687: PUSH
36688: LD_INT 91
36690: PUSH
36691: LD_VAR 0 1
36695: PUSH
36696: LD_EXP 125
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: LIST
36705: PUSH
36706: LD_INT 50
36708: PUSH
36709: EMPTY
36710: LIST
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: LIST
36716: LIST
36717: PPUSH
36718: CALL_OW 69
36722: ST_TO_ADDR
// if not tmp then
36723: LD_VAR 0 2
36727: NOT
36728: IFFALSE 36732
// continue ;
36730: GO 36527
// HackLink ( i , tmp ) ;
36732: LD_VAR 0 1
36736: PPUSH
36737: LD_VAR 0 2
36741: PPUSH
36742: CALL 36889 0 2
// end ;
36746: GO 36527
36748: POP
36749: POP
// end ;
36750: PPOPN 2
36752: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36753: LD_INT 0
36755: PPUSH
36756: PPUSH
36757: PPUSH
// if not hack in hackTanks then
36758: LD_VAR 0 1
36762: PUSH
36763: LD_EXP 122
36767: IN
36768: NOT
36769: IFFALSE 36773
// exit ;
36771: GO 36884
// index := GetElementIndex ( hackTanks , hack ) ;
36773: LD_ADDR_VAR 0 4
36777: PUSH
36778: LD_EXP 122
36782: PPUSH
36783: LD_VAR 0 1
36787: PPUSH
36788: CALL 44501 0 2
36792: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
36793: LD_EXP 123
36797: PUSH
36798: LD_VAR 0 4
36802: ARRAY
36803: IFFALSE 36884
// begin for i in hackTanksCaptured [ index ] do
36805: LD_ADDR_VAR 0 3
36809: PUSH
36810: LD_EXP 123
36814: PUSH
36815: LD_VAR 0 4
36819: ARRAY
36820: PUSH
36821: FOR_IN
36822: IFFALSE 36848
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
36824: LD_VAR 0 3
36828: PUSH
36829: LD_INT 1
36831: ARRAY
36832: PPUSH
36833: LD_VAR 0 3
36837: PUSH
36838: LD_INT 2
36840: ARRAY
36841: PPUSH
36842: CALL_OW 235
36846: GO 36821
36848: POP
36849: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
36850: LD_ADDR_EXP 123
36854: PUSH
36855: LD_EXP 123
36859: PPUSH
36860: LD_VAR 0 4
36864: PPUSH
36865: EMPTY
36866: PPUSH
36867: CALL_OW 1
36871: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
36872: LD_VAR 0 1
36876: PPUSH
36877: LD_INT 0
36879: PPUSH
36880: CALL_OW 505
// end ; end ;
36884: LD_VAR 0 2
36888: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
36889: LD_INT 0
36891: PPUSH
36892: PPUSH
36893: PPUSH
// if not hack in hackTanks or not vehicles then
36894: LD_VAR 0 1
36898: PUSH
36899: LD_EXP 122
36903: IN
36904: NOT
36905: PUSH
36906: LD_VAR 0 2
36910: NOT
36911: OR
36912: IFFALSE 36916
// exit ;
36914: GO 37191
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
36916: LD_ADDR_VAR 0 2
36920: PUSH
36921: LD_VAR 0 1
36925: PPUSH
36926: LD_VAR 0 2
36930: PPUSH
36931: LD_INT 1
36933: PPUSH
36934: LD_INT 1
36936: PPUSH
36937: CALL 45151 0 4
36941: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
36942: LD_ADDR_VAR 0 5
36946: PUSH
36947: LD_EXP 122
36951: PPUSH
36952: LD_VAR 0 1
36956: PPUSH
36957: CALL 44501 0 2
36961: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
36962: LD_EXP 123
36966: PUSH
36967: LD_VAR 0 5
36971: ARRAY
36972: PUSH
36973: LD_EXP 124
36977: LESS
36978: IFFALSE 37167
// begin for i := 1 to vehicles do
36980: LD_ADDR_VAR 0 4
36984: PUSH
36985: DOUBLE
36986: LD_INT 1
36988: DEC
36989: ST_TO_ADDR
36990: LD_VAR 0 2
36994: PUSH
36995: FOR_TO
36996: IFFALSE 37165
// begin if hackTanksCaptured [ index ] = hackLimit then
36998: LD_EXP 123
37002: PUSH
37003: LD_VAR 0 5
37007: ARRAY
37008: PUSH
37009: LD_EXP 124
37013: EQUAL
37014: IFFALSE 37018
// break ;
37016: GO 37165
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
37018: LD_ADDR_EXP 126
37022: PUSH
37023: LD_EXP 126
37027: PPUSH
37028: LD_VAR 0 5
37032: PPUSH
37033: LD_EXP 126
37037: PUSH
37038: LD_VAR 0 5
37042: ARRAY
37043: PUSH
37044: LD_INT 1
37046: PLUS
37047: PPUSH
37048: CALL_OW 1
37052: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
37053: LD_ADDR_EXP 123
37057: PUSH
37058: LD_EXP 123
37062: PPUSH
37063: LD_VAR 0 5
37067: PUSH
37068: LD_EXP 123
37072: PUSH
37073: LD_VAR 0 5
37077: ARRAY
37078: PUSH
37079: LD_INT 1
37081: PLUS
37082: PUSH
37083: EMPTY
37084: LIST
37085: LIST
37086: PPUSH
37087: LD_VAR 0 2
37091: PUSH
37092: LD_VAR 0 4
37096: ARRAY
37097: PUSH
37098: LD_VAR 0 2
37102: PUSH
37103: LD_VAR 0 4
37107: ARRAY
37108: PPUSH
37109: CALL_OW 255
37113: PUSH
37114: EMPTY
37115: LIST
37116: LIST
37117: PPUSH
37118: CALL 44716 0 3
37122: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
37123: LD_VAR 0 2
37127: PUSH
37128: LD_VAR 0 4
37132: ARRAY
37133: PPUSH
37134: LD_VAR 0 1
37138: PPUSH
37139: CALL_OW 255
37143: PPUSH
37144: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
37148: LD_VAR 0 2
37152: PUSH
37153: LD_VAR 0 4
37157: ARRAY
37158: PPUSH
37159: CALL_OW 141
// end ;
37163: GO 36995
37165: POP
37166: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37167: LD_VAR 0 1
37171: PPUSH
37172: LD_EXP 123
37176: PUSH
37177: LD_VAR 0 5
37181: ARRAY
37182: PUSH
37183: LD_INT 0
37185: PLUS
37186: PPUSH
37187: CALL_OW 505
// end ;
37191: LD_VAR 0 3
37195: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
37196: LD_INT 0
37198: PPUSH
37199: PPUSH
37200: PPUSH
37201: PPUSH
// if not hack in hackTanks then
37202: LD_VAR 0 1
37206: PUSH
37207: LD_EXP 122
37211: IN
37212: NOT
37213: IFFALSE 37217
// exit ;
37215: GO 37457
// index := GetElementIndex ( hackTanks , hack ) ;
37217: LD_ADDR_VAR 0 4
37221: PUSH
37222: LD_EXP 122
37226: PPUSH
37227: LD_VAR 0 1
37231: PPUSH
37232: CALL 44501 0 2
37236: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
37237: LD_ADDR_VAR 0 3
37241: PUSH
37242: DOUBLE
37243: LD_EXP 123
37247: PUSH
37248: LD_VAR 0 4
37252: ARRAY
37253: INC
37254: ST_TO_ADDR
37255: LD_INT 1
37257: PUSH
37258: FOR_DOWNTO
37259: IFFALSE 37431
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
37261: LD_ADDR_VAR 0 5
37265: PUSH
37266: LD_EXP 123
37270: PUSH
37271: LD_VAR 0 4
37275: ARRAY
37276: PUSH
37277: LD_VAR 0 3
37281: ARRAY
37282: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
37283: LD_VAR 0 5
37287: PUSH
37288: LD_INT 1
37290: ARRAY
37291: PPUSH
37292: CALL_OW 302
37296: NOT
37297: PUSH
37298: LD_VAR 0 5
37302: PUSH
37303: LD_INT 1
37305: ARRAY
37306: PPUSH
37307: CALL_OW 255
37311: PUSH
37312: LD_VAR 0 1
37316: PPUSH
37317: CALL_OW 255
37321: NONEQUAL
37322: OR
37323: IFFALSE 37429
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
37325: LD_VAR 0 5
37329: PUSH
37330: LD_INT 1
37332: ARRAY
37333: PPUSH
37334: CALL_OW 305
37338: PUSH
37339: LD_VAR 0 5
37343: PUSH
37344: LD_INT 1
37346: ARRAY
37347: PPUSH
37348: CALL_OW 255
37352: PUSH
37353: LD_VAR 0 1
37357: PPUSH
37358: CALL_OW 255
37362: EQUAL
37363: AND
37364: IFFALSE 37388
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
37366: LD_VAR 0 5
37370: PUSH
37371: LD_INT 1
37373: ARRAY
37374: PPUSH
37375: LD_VAR 0 5
37379: PUSH
37380: LD_INT 2
37382: ARRAY
37383: PPUSH
37384: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
37388: LD_ADDR_EXP 123
37392: PUSH
37393: LD_EXP 123
37397: PPUSH
37398: LD_VAR 0 4
37402: PPUSH
37403: LD_EXP 123
37407: PUSH
37408: LD_VAR 0 4
37412: ARRAY
37413: PPUSH
37414: LD_VAR 0 3
37418: PPUSH
37419: CALL_OW 3
37423: PPUSH
37424: CALL_OW 1
37428: ST_TO_ADDR
// end ; end ;
37429: GO 37258
37431: POP
37432: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37433: LD_VAR 0 1
37437: PPUSH
37438: LD_EXP 123
37442: PUSH
37443: LD_VAR 0 4
37447: ARRAY
37448: PUSH
37449: LD_INT 0
37451: PLUS
37452: PPUSH
37453: CALL_OW 505
// end ;
37457: LD_VAR 0 2
37461: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
37462: LD_INT 0
37464: PPUSH
37465: PPUSH
37466: PPUSH
37467: PPUSH
// if not hack in hackTanks then
37468: LD_VAR 0 1
37472: PUSH
37473: LD_EXP 122
37477: IN
37478: NOT
37479: IFFALSE 37483
// exit ;
37481: GO 37568
// index := GetElementIndex ( hackTanks , hack ) ;
37483: LD_ADDR_VAR 0 5
37487: PUSH
37488: LD_EXP 122
37492: PPUSH
37493: LD_VAR 0 1
37497: PPUSH
37498: CALL 44501 0 2
37502: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
37503: LD_ADDR_VAR 0 4
37507: PUSH
37508: DOUBLE
37509: LD_INT 1
37511: DEC
37512: ST_TO_ADDR
37513: LD_EXP 123
37517: PUSH
37518: LD_VAR 0 5
37522: ARRAY
37523: PUSH
37524: FOR_TO
37525: IFFALSE 37566
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
37527: LD_EXP 123
37531: PUSH
37532: LD_VAR 0 5
37536: ARRAY
37537: PUSH
37538: LD_VAR 0 4
37542: ARRAY
37543: PUSH
37544: LD_INT 1
37546: ARRAY
37547: PUSH
37548: LD_VAR 0 2
37552: EQUAL
37553: IFFALSE 37564
// KillUnit ( vehicle ) ;
37555: LD_VAR 0 2
37559: PPUSH
37560: CALL_OW 66
37564: GO 37524
37566: POP
37567: POP
// end ;
37568: LD_VAR 0 3
37572: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
37573: LD_EXP 127
37577: NOT
37578: IFFALSE 37613
37580: GO 37582
37582: DISABLE
// begin initMiner := true ;
37583: LD_ADDR_EXP 127
37587: PUSH
37588: LD_INT 1
37590: ST_TO_ADDR
// minersList := [ ] ;
37591: LD_ADDR_EXP 128
37595: PUSH
37596: EMPTY
37597: ST_TO_ADDR
// minerMinesList := [ ] ;
37598: LD_ADDR_EXP 129
37602: PUSH
37603: EMPTY
37604: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
37605: LD_ADDR_EXP 130
37609: PUSH
37610: LD_INT 5
37612: ST_TO_ADDR
// end ;
37613: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
37614: LD_EXP 127
37618: PUSH
37619: LD_INT 34
37621: PUSH
37622: LD_INT 81
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: PPUSH
37629: CALL_OW 69
37633: AND
37634: IFFALSE 38095
37636: GO 37638
37638: DISABLE
37639: LD_INT 0
37641: PPUSH
37642: PPUSH
37643: PPUSH
37644: PPUSH
// begin enable ;
37645: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
37646: LD_ADDR_VAR 0 1
37650: PUSH
37651: LD_INT 34
37653: PUSH
37654: LD_INT 81
37656: PUSH
37657: EMPTY
37658: LIST
37659: LIST
37660: PPUSH
37661: CALL_OW 69
37665: PUSH
37666: FOR_IN
37667: IFFALSE 37739
// begin if not i in minersList then
37669: LD_VAR 0 1
37673: PUSH
37674: LD_EXP 128
37678: IN
37679: NOT
37680: IFFALSE 37737
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
37682: LD_ADDR_EXP 128
37686: PUSH
37687: LD_EXP 128
37691: PPUSH
37692: LD_EXP 128
37696: PUSH
37697: LD_INT 1
37699: PLUS
37700: PPUSH
37701: LD_VAR 0 1
37705: PPUSH
37706: CALL_OW 1
37710: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
37711: LD_ADDR_EXP 129
37715: PUSH
37716: LD_EXP 129
37720: PPUSH
37721: LD_EXP 129
37725: PUSH
37726: LD_INT 1
37728: PLUS
37729: PPUSH
37730: EMPTY
37731: PPUSH
37732: CALL_OW 1
37736: ST_TO_ADDR
// end end ;
37737: GO 37666
37739: POP
37740: POP
// for i := minerMinesList downto 1 do
37741: LD_ADDR_VAR 0 1
37745: PUSH
37746: DOUBLE
37747: LD_EXP 129
37751: INC
37752: ST_TO_ADDR
37753: LD_INT 1
37755: PUSH
37756: FOR_DOWNTO
37757: IFFALSE 38093
// begin if IsLive ( minersList [ i ] ) then
37759: LD_EXP 128
37763: PUSH
37764: LD_VAR 0 1
37768: ARRAY
37769: PPUSH
37770: CALL_OW 300
37774: IFFALSE 37802
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
37776: LD_EXP 128
37780: PUSH
37781: LD_VAR 0 1
37785: ARRAY
37786: PPUSH
37787: LD_EXP 129
37791: PUSH
37792: LD_VAR 0 1
37796: ARRAY
37797: PPUSH
37798: CALL_OW 505
// if not minerMinesList [ i ] then
37802: LD_EXP 129
37806: PUSH
37807: LD_VAR 0 1
37811: ARRAY
37812: NOT
37813: IFFALSE 37817
// continue ;
37815: GO 37756
// for j := minerMinesList [ i ] downto 1 do
37817: LD_ADDR_VAR 0 2
37821: PUSH
37822: DOUBLE
37823: LD_EXP 129
37827: PUSH
37828: LD_VAR 0 1
37832: ARRAY
37833: INC
37834: ST_TO_ADDR
37835: LD_INT 1
37837: PUSH
37838: FOR_DOWNTO
37839: IFFALSE 38089
// begin side := GetSide ( minersList [ i ] ) ;
37841: LD_ADDR_VAR 0 3
37845: PUSH
37846: LD_EXP 128
37850: PUSH
37851: LD_VAR 0 1
37855: ARRAY
37856: PPUSH
37857: CALL_OW 255
37861: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
37862: LD_ADDR_VAR 0 4
37866: PUSH
37867: LD_EXP 129
37871: PUSH
37872: LD_VAR 0 1
37876: ARRAY
37877: PUSH
37878: LD_VAR 0 2
37882: ARRAY
37883: PUSH
37884: LD_INT 1
37886: ARRAY
37887: PPUSH
37888: LD_EXP 129
37892: PUSH
37893: LD_VAR 0 1
37897: ARRAY
37898: PUSH
37899: LD_VAR 0 2
37903: ARRAY
37904: PUSH
37905: LD_INT 2
37907: ARRAY
37908: PPUSH
37909: CALL_OW 428
37913: ST_TO_ADDR
// if not tmp then
37914: LD_VAR 0 4
37918: NOT
37919: IFFALSE 37923
// continue ;
37921: GO 37838
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
37923: LD_VAR 0 4
37927: PUSH
37928: LD_INT 81
37930: PUSH
37931: LD_VAR 0 3
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: PPUSH
37940: CALL_OW 69
37944: IN
37945: PUSH
37946: LD_EXP 129
37950: PUSH
37951: LD_VAR 0 1
37955: ARRAY
37956: PUSH
37957: LD_VAR 0 2
37961: ARRAY
37962: PUSH
37963: LD_INT 1
37965: ARRAY
37966: PPUSH
37967: LD_EXP 129
37971: PUSH
37972: LD_VAR 0 1
37976: ARRAY
37977: PUSH
37978: LD_VAR 0 2
37982: ARRAY
37983: PUSH
37984: LD_INT 2
37986: ARRAY
37987: PPUSH
37988: CALL_OW 458
37992: AND
37993: IFFALSE 38087
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
37995: LD_EXP 129
37999: PUSH
38000: LD_VAR 0 1
38004: ARRAY
38005: PUSH
38006: LD_VAR 0 2
38010: ARRAY
38011: PUSH
38012: LD_INT 1
38014: ARRAY
38015: PPUSH
38016: LD_EXP 129
38020: PUSH
38021: LD_VAR 0 1
38025: ARRAY
38026: PUSH
38027: LD_VAR 0 2
38031: ARRAY
38032: PUSH
38033: LD_INT 2
38035: ARRAY
38036: PPUSH
38037: LD_VAR 0 3
38041: PPUSH
38042: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
38046: LD_ADDR_EXP 129
38050: PUSH
38051: LD_EXP 129
38055: PPUSH
38056: LD_VAR 0 1
38060: PPUSH
38061: LD_EXP 129
38065: PUSH
38066: LD_VAR 0 1
38070: ARRAY
38071: PPUSH
38072: LD_VAR 0 2
38076: PPUSH
38077: CALL_OW 3
38081: PPUSH
38082: CALL_OW 1
38086: ST_TO_ADDR
// end ; end ;
38087: GO 37838
38089: POP
38090: POP
// end ;
38091: GO 37756
38093: POP
38094: POP
// end ;
38095: PPOPN 4
38097: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
38098: LD_INT 0
38100: PPUSH
38101: PPUSH
// result := false ;
38102: LD_ADDR_VAR 0 4
38106: PUSH
38107: LD_INT 0
38109: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
38110: LD_VAR 0 1
38114: PPUSH
38115: CALL_OW 264
38119: PUSH
38120: LD_INT 81
38122: EQUAL
38123: NOT
38124: IFFALSE 38128
// exit ;
38126: GO 38368
// index := GetElementIndex ( minersList , unit ) ;
38128: LD_ADDR_VAR 0 5
38132: PUSH
38133: LD_EXP 128
38137: PPUSH
38138: LD_VAR 0 1
38142: PPUSH
38143: CALL 44501 0 2
38147: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
38148: LD_EXP 129
38152: PUSH
38153: LD_VAR 0 5
38157: ARRAY
38158: PUSH
38159: LD_EXP 130
38163: GREATEREQUAL
38164: IFFALSE 38168
// exit ;
38166: GO 38368
// ComMoveXY ( unit , x , y ) ;
38168: LD_VAR 0 1
38172: PPUSH
38173: LD_VAR 0 2
38177: PPUSH
38178: LD_VAR 0 3
38182: PPUSH
38183: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38187: LD_INT 35
38189: PPUSH
38190: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
38194: LD_VAR 0 1
38198: PPUSH
38199: LD_VAR 0 2
38203: PPUSH
38204: LD_VAR 0 3
38208: PPUSH
38209: CALL 75764 0 3
38213: NOT
38214: PUSH
38215: LD_VAR 0 1
38219: PPUSH
38220: CALL_OW 314
38224: AND
38225: IFFALSE 38229
// exit ;
38227: GO 38368
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
38229: LD_VAR 0 2
38233: PPUSH
38234: LD_VAR 0 3
38238: PPUSH
38239: CALL_OW 428
38243: PUSH
38244: LD_VAR 0 1
38248: EQUAL
38249: PUSH
38250: LD_VAR 0 1
38254: PPUSH
38255: CALL_OW 314
38259: NOT
38260: AND
38261: IFFALSE 38187
// PlaySoundXY ( x , y , PlantMine ) ;
38263: LD_VAR 0 2
38267: PPUSH
38268: LD_VAR 0 3
38272: PPUSH
38273: LD_STRING PlantMine
38275: PPUSH
38276: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
38280: LD_VAR 0 2
38284: PPUSH
38285: LD_VAR 0 3
38289: PPUSH
38290: LD_VAR 0 1
38294: PPUSH
38295: CALL_OW 255
38299: PPUSH
38300: LD_INT 0
38302: PPUSH
38303: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
38307: LD_ADDR_EXP 129
38311: PUSH
38312: LD_EXP 129
38316: PPUSH
38317: LD_VAR 0 5
38321: PUSH
38322: LD_EXP 129
38326: PUSH
38327: LD_VAR 0 5
38331: ARRAY
38332: PUSH
38333: LD_INT 1
38335: PLUS
38336: PUSH
38337: EMPTY
38338: LIST
38339: LIST
38340: PPUSH
38341: LD_VAR 0 2
38345: PUSH
38346: LD_VAR 0 3
38350: PUSH
38351: EMPTY
38352: LIST
38353: LIST
38354: PPUSH
38355: CALL 44716 0 3
38359: ST_TO_ADDR
// result := true ;
38360: LD_ADDR_VAR 0 4
38364: PUSH
38365: LD_INT 1
38367: ST_TO_ADDR
// end ;
38368: LD_VAR 0 4
38372: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
38373: LD_INT 0
38375: PPUSH
38376: PPUSH
38377: PPUSH
// if not unit in minersList then
38378: LD_VAR 0 1
38382: PUSH
38383: LD_EXP 128
38387: IN
38388: NOT
38389: IFFALSE 38393
// exit ;
38391: GO 38785
// index := GetElementIndex ( minersList , unit ) ;
38393: LD_ADDR_VAR 0 6
38397: PUSH
38398: LD_EXP 128
38402: PPUSH
38403: LD_VAR 0 1
38407: PPUSH
38408: CALL 44501 0 2
38412: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
38413: LD_ADDR_VAR 0 5
38417: PUSH
38418: DOUBLE
38419: LD_EXP 129
38423: PUSH
38424: LD_VAR 0 6
38428: ARRAY
38429: INC
38430: ST_TO_ADDR
38431: LD_INT 1
38433: PUSH
38434: FOR_DOWNTO
38435: IFFALSE 38596
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
38437: LD_EXP 129
38441: PUSH
38442: LD_VAR 0 6
38446: ARRAY
38447: PUSH
38448: LD_VAR 0 5
38452: ARRAY
38453: PUSH
38454: LD_INT 1
38456: ARRAY
38457: PUSH
38458: LD_VAR 0 2
38462: EQUAL
38463: PUSH
38464: LD_EXP 129
38468: PUSH
38469: LD_VAR 0 6
38473: ARRAY
38474: PUSH
38475: LD_VAR 0 5
38479: ARRAY
38480: PUSH
38481: LD_INT 2
38483: ARRAY
38484: PUSH
38485: LD_VAR 0 3
38489: EQUAL
38490: AND
38491: IFFALSE 38594
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38493: LD_EXP 129
38497: PUSH
38498: LD_VAR 0 6
38502: ARRAY
38503: PUSH
38504: LD_VAR 0 5
38508: ARRAY
38509: PUSH
38510: LD_INT 1
38512: ARRAY
38513: PPUSH
38514: LD_EXP 129
38518: PUSH
38519: LD_VAR 0 6
38523: ARRAY
38524: PUSH
38525: LD_VAR 0 5
38529: ARRAY
38530: PUSH
38531: LD_INT 2
38533: ARRAY
38534: PPUSH
38535: LD_VAR 0 1
38539: PPUSH
38540: CALL_OW 255
38544: PPUSH
38545: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38549: LD_ADDR_EXP 129
38553: PUSH
38554: LD_EXP 129
38558: PPUSH
38559: LD_VAR 0 6
38563: PPUSH
38564: LD_EXP 129
38568: PUSH
38569: LD_VAR 0 6
38573: ARRAY
38574: PPUSH
38575: LD_VAR 0 5
38579: PPUSH
38580: CALL_OW 3
38584: PPUSH
38585: CALL_OW 1
38589: ST_TO_ADDR
// exit ;
38590: POP
38591: POP
38592: GO 38785
// end ; end ;
38594: GO 38434
38596: POP
38597: POP
// for i := minerMinesList [ index ] downto 1 do
38598: LD_ADDR_VAR 0 5
38602: PUSH
38603: DOUBLE
38604: LD_EXP 129
38608: PUSH
38609: LD_VAR 0 6
38613: ARRAY
38614: INC
38615: ST_TO_ADDR
38616: LD_INT 1
38618: PUSH
38619: FOR_DOWNTO
38620: IFFALSE 38783
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
38622: LD_EXP 129
38626: PUSH
38627: LD_VAR 0 6
38631: ARRAY
38632: PUSH
38633: LD_VAR 0 5
38637: ARRAY
38638: PUSH
38639: LD_INT 1
38641: ARRAY
38642: PPUSH
38643: LD_EXP 129
38647: PUSH
38648: LD_VAR 0 6
38652: ARRAY
38653: PUSH
38654: LD_VAR 0 5
38658: ARRAY
38659: PUSH
38660: LD_INT 2
38662: ARRAY
38663: PPUSH
38664: LD_VAR 0 2
38668: PPUSH
38669: LD_VAR 0 3
38673: PPUSH
38674: CALL_OW 298
38678: PUSH
38679: LD_INT 6
38681: LESS
38682: IFFALSE 38781
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38684: LD_EXP 129
38688: PUSH
38689: LD_VAR 0 6
38693: ARRAY
38694: PUSH
38695: LD_VAR 0 5
38699: ARRAY
38700: PUSH
38701: LD_INT 1
38703: ARRAY
38704: PPUSH
38705: LD_EXP 129
38709: PUSH
38710: LD_VAR 0 6
38714: ARRAY
38715: PUSH
38716: LD_VAR 0 5
38720: ARRAY
38721: PUSH
38722: LD_INT 2
38724: ARRAY
38725: PPUSH
38726: LD_VAR 0 1
38730: PPUSH
38731: CALL_OW 255
38735: PPUSH
38736: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38740: LD_ADDR_EXP 129
38744: PUSH
38745: LD_EXP 129
38749: PPUSH
38750: LD_VAR 0 6
38754: PPUSH
38755: LD_EXP 129
38759: PUSH
38760: LD_VAR 0 6
38764: ARRAY
38765: PPUSH
38766: LD_VAR 0 5
38770: PPUSH
38771: CALL_OW 3
38775: PPUSH
38776: CALL_OW 1
38780: ST_TO_ADDR
// end ; end ;
38781: GO 38619
38783: POP
38784: POP
// end ;
38785: LD_VAR 0 4
38789: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
38790: LD_INT 0
38792: PPUSH
38793: PPUSH
38794: PPUSH
38795: PPUSH
38796: PPUSH
38797: PPUSH
38798: PPUSH
38799: PPUSH
38800: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
38801: LD_VAR 0 1
38805: PPUSH
38806: CALL_OW 264
38810: PUSH
38811: LD_INT 81
38813: EQUAL
38814: NOT
38815: PUSH
38816: LD_VAR 0 1
38820: PUSH
38821: LD_EXP 128
38825: IN
38826: NOT
38827: OR
38828: IFFALSE 38832
// exit ;
38830: GO 39154
// index := GetElementIndex ( minersList , unit ) ;
38832: LD_ADDR_VAR 0 6
38836: PUSH
38837: LD_EXP 128
38841: PPUSH
38842: LD_VAR 0 1
38846: PPUSH
38847: CALL 44501 0 2
38851: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
38852: LD_ADDR_VAR 0 8
38856: PUSH
38857: LD_EXP 130
38861: PUSH
38862: LD_EXP 129
38866: PUSH
38867: LD_VAR 0 6
38871: ARRAY
38872: MINUS
38873: ST_TO_ADDR
// if not minesFreeAmount then
38874: LD_VAR 0 8
38878: NOT
38879: IFFALSE 38883
// exit ;
38881: GO 39154
// tmp := [ ] ;
38883: LD_ADDR_VAR 0 7
38887: PUSH
38888: EMPTY
38889: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
38890: LD_ADDR_VAR 0 5
38894: PUSH
38895: DOUBLE
38896: LD_INT 1
38898: DEC
38899: ST_TO_ADDR
38900: LD_VAR 0 8
38904: PUSH
38905: FOR_TO
38906: IFFALSE 39101
// begin _d := rand ( 0 , 5 ) ;
38908: LD_ADDR_VAR 0 11
38912: PUSH
38913: LD_INT 0
38915: PPUSH
38916: LD_INT 5
38918: PPUSH
38919: CALL_OW 12
38923: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
38924: LD_ADDR_VAR 0 12
38928: PUSH
38929: LD_INT 2
38931: PPUSH
38932: LD_INT 6
38934: PPUSH
38935: CALL_OW 12
38939: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
38940: LD_ADDR_VAR 0 9
38944: PUSH
38945: LD_VAR 0 2
38949: PPUSH
38950: LD_VAR 0 11
38954: PPUSH
38955: LD_VAR 0 12
38959: PPUSH
38960: CALL_OW 272
38964: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
38965: LD_ADDR_VAR 0 10
38969: PUSH
38970: LD_VAR 0 3
38974: PPUSH
38975: LD_VAR 0 11
38979: PPUSH
38980: LD_VAR 0 12
38984: PPUSH
38985: CALL_OW 273
38989: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
38990: LD_VAR 0 9
38994: PPUSH
38995: LD_VAR 0 10
38999: PPUSH
39000: CALL_OW 488
39004: PUSH
39005: LD_VAR 0 9
39009: PUSH
39010: LD_VAR 0 10
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PUSH
39019: LD_VAR 0 7
39023: IN
39024: NOT
39025: AND
39026: PUSH
39027: LD_VAR 0 9
39031: PPUSH
39032: LD_VAR 0 10
39036: PPUSH
39037: CALL_OW 458
39041: NOT
39042: AND
39043: IFFALSE 39085
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
39045: LD_ADDR_VAR 0 7
39049: PUSH
39050: LD_VAR 0 7
39054: PPUSH
39055: LD_VAR 0 7
39059: PUSH
39060: LD_INT 1
39062: PLUS
39063: PPUSH
39064: LD_VAR 0 9
39068: PUSH
39069: LD_VAR 0 10
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: PPUSH
39078: CALL_OW 1
39082: ST_TO_ADDR
39083: GO 39099
// i := i - 1 ;
39085: LD_ADDR_VAR 0 5
39089: PUSH
39090: LD_VAR 0 5
39094: PUSH
39095: LD_INT 1
39097: MINUS
39098: ST_TO_ADDR
// end ;
39099: GO 38905
39101: POP
39102: POP
// for i in tmp do
39103: LD_ADDR_VAR 0 5
39107: PUSH
39108: LD_VAR 0 7
39112: PUSH
39113: FOR_IN
39114: IFFALSE 39152
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
39116: LD_VAR 0 1
39120: PPUSH
39121: LD_VAR 0 5
39125: PUSH
39126: LD_INT 1
39128: ARRAY
39129: PPUSH
39130: LD_VAR 0 5
39134: PUSH
39135: LD_INT 2
39137: ARRAY
39138: PPUSH
39139: CALL 38098 0 3
39143: NOT
39144: IFFALSE 39150
// exit ;
39146: POP
39147: POP
39148: GO 39154
39150: GO 39113
39152: POP
39153: POP
// end ;
39154: LD_VAR 0 4
39158: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
39159: LD_INT 0
39161: PPUSH
39162: PPUSH
39163: PPUSH
39164: PPUSH
39165: PPUSH
39166: PPUSH
39167: PPUSH
// if not GetClass ( unit ) = class_sniper then
39168: LD_VAR 0 1
39172: PPUSH
39173: CALL_OW 257
39177: PUSH
39178: LD_INT 5
39180: EQUAL
39181: NOT
39182: IFFALSE 39186
// exit ;
39184: GO 39574
// dist := 8 ;
39186: LD_ADDR_VAR 0 5
39190: PUSH
39191: LD_INT 8
39193: ST_TO_ADDR
// viewRange := 12 ;
39194: LD_ADDR_VAR 0 7
39198: PUSH
39199: LD_INT 12
39201: ST_TO_ADDR
// side := GetSide ( unit ) ;
39202: LD_ADDR_VAR 0 6
39206: PUSH
39207: LD_VAR 0 1
39211: PPUSH
39212: CALL_OW 255
39216: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
39217: LD_INT 61
39219: PPUSH
39220: LD_VAR 0 6
39224: PPUSH
39225: CALL_OW 321
39229: PUSH
39230: LD_INT 2
39232: EQUAL
39233: IFFALSE 39243
// viewRange := 16 ;
39235: LD_ADDR_VAR 0 7
39239: PUSH
39240: LD_INT 16
39242: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
39243: LD_VAR 0 1
39247: PPUSH
39248: LD_VAR 0 2
39252: PPUSH
39253: LD_VAR 0 3
39257: PPUSH
39258: CALL_OW 297
39262: PUSH
39263: LD_VAR 0 5
39267: GREATER
39268: IFFALSE 39347
// begin ComMoveXY ( unit , x , y ) ;
39270: LD_VAR 0 1
39274: PPUSH
39275: LD_VAR 0 2
39279: PPUSH
39280: LD_VAR 0 3
39284: PPUSH
39285: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39289: LD_INT 35
39291: PPUSH
39292: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
39296: LD_VAR 0 1
39300: PPUSH
39301: LD_VAR 0 2
39305: PPUSH
39306: LD_VAR 0 3
39310: PPUSH
39311: CALL 75764 0 3
39315: NOT
39316: IFFALSE 39320
// exit ;
39318: GO 39574
// until GetDistUnitXY ( unit , x , y ) < dist ;
39320: LD_VAR 0 1
39324: PPUSH
39325: LD_VAR 0 2
39329: PPUSH
39330: LD_VAR 0 3
39334: PPUSH
39335: CALL_OW 297
39339: PUSH
39340: LD_VAR 0 5
39344: LESS
39345: IFFALSE 39289
// end ; ComTurnXY ( unit , x , y ) ;
39347: LD_VAR 0 1
39351: PPUSH
39352: LD_VAR 0 2
39356: PPUSH
39357: LD_VAR 0 3
39361: PPUSH
39362: CALL_OW 118
// wait ( 5 ) ;
39366: LD_INT 5
39368: PPUSH
39369: CALL_OW 67
// _d := GetDir ( unit ) ;
39373: LD_ADDR_VAR 0 10
39377: PUSH
39378: LD_VAR 0 1
39382: PPUSH
39383: CALL_OW 254
39387: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
39388: LD_ADDR_VAR 0 8
39392: PUSH
39393: LD_VAR 0 1
39397: PPUSH
39398: CALL_OW 250
39402: PPUSH
39403: LD_VAR 0 10
39407: PPUSH
39408: LD_VAR 0 5
39412: PPUSH
39413: CALL_OW 272
39417: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
39418: LD_ADDR_VAR 0 9
39422: PUSH
39423: LD_VAR 0 1
39427: PPUSH
39428: CALL_OW 251
39432: PPUSH
39433: LD_VAR 0 10
39437: PPUSH
39438: LD_VAR 0 5
39442: PPUSH
39443: CALL_OW 273
39447: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39448: LD_VAR 0 8
39452: PPUSH
39453: LD_VAR 0 9
39457: PPUSH
39458: CALL_OW 488
39462: NOT
39463: IFFALSE 39467
// exit ;
39465: GO 39574
// ComAnimCustom ( unit , 1 ) ;
39467: LD_VAR 0 1
39471: PPUSH
39472: LD_INT 1
39474: PPUSH
39475: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
39479: LD_VAR 0 8
39483: PPUSH
39484: LD_VAR 0 9
39488: PPUSH
39489: LD_VAR 0 6
39493: PPUSH
39494: LD_VAR 0 7
39498: PPUSH
39499: CALL_OW 330
// repeat wait ( 1 ) ;
39503: LD_INT 1
39505: PPUSH
39506: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
39510: LD_VAR 0 1
39514: PPUSH
39515: CALL_OW 316
39519: PUSH
39520: LD_VAR 0 1
39524: PPUSH
39525: CALL_OW 314
39529: OR
39530: PUSH
39531: LD_VAR 0 1
39535: PPUSH
39536: CALL_OW 302
39540: NOT
39541: OR
39542: PUSH
39543: LD_VAR 0 1
39547: PPUSH
39548: CALL_OW 301
39552: OR
39553: IFFALSE 39503
// RemoveSeeing ( _x , _y , side ) ;
39555: LD_VAR 0 8
39559: PPUSH
39560: LD_VAR 0 9
39564: PPUSH
39565: LD_VAR 0 6
39569: PPUSH
39570: CALL_OW 331
// end ; end_of_file
39574: LD_VAR 0 4
39578: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
39579: LD_INT 0
39581: PPUSH
39582: PPUSH
// if exist_mode then
39583: LD_VAR 0 2
39587: IFFALSE 39612
// unit := CreateCharacter ( prefix & ident ) else
39589: LD_ADDR_VAR 0 5
39593: PUSH
39594: LD_VAR 0 3
39598: PUSH
39599: LD_VAR 0 1
39603: STR
39604: PPUSH
39605: CALL_OW 34
39609: ST_TO_ADDR
39610: GO 39627
// unit := NewCharacter ( ident ) ;
39612: LD_ADDR_VAR 0 5
39616: PUSH
39617: LD_VAR 0 1
39621: PPUSH
39622: CALL_OW 25
39626: ST_TO_ADDR
// result := unit ;
39627: LD_ADDR_VAR 0 4
39631: PUSH
39632: LD_VAR 0 5
39636: ST_TO_ADDR
// end ;
39637: LD_VAR 0 4
39641: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
39642: LD_INT 0
39644: PPUSH
39645: PPUSH
// if not side or not nation then
39646: LD_VAR 0 1
39650: NOT
39651: PUSH
39652: LD_VAR 0 2
39656: NOT
39657: OR
39658: IFFALSE 39662
// exit ;
39660: GO 40430
// case nation of nation_american :
39662: LD_VAR 0 2
39666: PUSH
39667: LD_INT 1
39669: DOUBLE
39670: EQUAL
39671: IFTRUE 39675
39673: GO 39889
39675: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
39676: LD_ADDR_VAR 0 4
39680: PUSH
39681: LD_INT 35
39683: PUSH
39684: LD_INT 45
39686: PUSH
39687: LD_INT 46
39689: PUSH
39690: LD_INT 47
39692: PUSH
39693: LD_INT 82
39695: PUSH
39696: LD_INT 83
39698: PUSH
39699: LD_INT 84
39701: PUSH
39702: LD_INT 85
39704: PUSH
39705: LD_INT 86
39707: PUSH
39708: LD_INT 1
39710: PUSH
39711: LD_INT 2
39713: PUSH
39714: LD_INT 6
39716: PUSH
39717: LD_INT 15
39719: PUSH
39720: LD_INT 16
39722: PUSH
39723: LD_INT 7
39725: PUSH
39726: LD_INT 12
39728: PUSH
39729: LD_INT 13
39731: PUSH
39732: LD_INT 10
39734: PUSH
39735: LD_INT 14
39737: PUSH
39738: LD_INT 20
39740: PUSH
39741: LD_INT 21
39743: PUSH
39744: LD_INT 22
39746: PUSH
39747: LD_INT 25
39749: PUSH
39750: LD_INT 32
39752: PUSH
39753: LD_INT 27
39755: PUSH
39756: LD_INT 36
39758: PUSH
39759: LD_INT 69
39761: PUSH
39762: LD_INT 39
39764: PUSH
39765: LD_INT 34
39767: PUSH
39768: LD_INT 40
39770: PUSH
39771: LD_INT 48
39773: PUSH
39774: LD_INT 49
39776: PUSH
39777: LD_INT 50
39779: PUSH
39780: LD_INT 51
39782: PUSH
39783: LD_INT 52
39785: PUSH
39786: LD_INT 53
39788: PUSH
39789: LD_INT 54
39791: PUSH
39792: LD_INT 55
39794: PUSH
39795: LD_INT 56
39797: PUSH
39798: LD_INT 57
39800: PUSH
39801: LD_INT 58
39803: PUSH
39804: LD_INT 59
39806: PUSH
39807: LD_INT 60
39809: PUSH
39810: LD_INT 61
39812: PUSH
39813: LD_INT 62
39815: PUSH
39816: LD_INT 80
39818: PUSH
39819: LD_INT 82
39821: PUSH
39822: LD_INT 83
39824: PUSH
39825: LD_INT 84
39827: PUSH
39828: LD_INT 85
39830: PUSH
39831: LD_INT 86
39833: PUSH
39834: EMPTY
39835: LIST
39836: LIST
39837: LIST
39838: LIST
39839: LIST
39840: LIST
39841: LIST
39842: LIST
39843: LIST
39844: LIST
39845: LIST
39846: LIST
39847: LIST
39848: LIST
39849: LIST
39850: LIST
39851: LIST
39852: LIST
39853: LIST
39854: LIST
39855: LIST
39856: LIST
39857: LIST
39858: LIST
39859: LIST
39860: LIST
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: LIST
39868: LIST
39869: LIST
39870: LIST
39871: LIST
39872: LIST
39873: LIST
39874: LIST
39875: LIST
39876: LIST
39877: LIST
39878: LIST
39879: LIST
39880: LIST
39881: LIST
39882: LIST
39883: LIST
39884: LIST
39885: LIST
39886: ST_TO_ADDR
39887: GO 40354
39889: LD_INT 2
39891: DOUBLE
39892: EQUAL
39893: IFTRUE 39897
39895: GO 40123
39897: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
39898: LD_ADDR_VAR 0 4
39902: PUSH
39903: LD_INT 35
39905: PUSH
39906: LD_INT 45
39908: PUSH
39909: LD_INT 46
39911: PUSH
39912: LD_INT 47
39914: PUSH
39915: LD_INT 82
39917: PUSH
39918: LD_INT 83
39920: PUSH
39921: LD_INT 84
39923: PUSH
39924: LD_INT 85
39926: PUSH
39927: LD_INT 87
39929: PUSH
39930: LD_INT 70
39932: PUSH
39933: LD_INT 1
39935: PUSH
39936: LD_INT 11
39938: PUSH
39939: LD_INT 3
39941: PUSH
39942: LD_INT 4
39944: PUSH
39945: LD_INT 5
39947: PUSH
39948: LD_INT 6
39950: PUSH
39951: LD_INT 15
39953: PUSH
39954: LD_INT 18
39956: PUSH
39957: LD_INT 7
39959: PUSH
39960: LD_INT 17
39962: PUSH
39963: LD_INT 8
39965: PUSH
39966: LD_INT 20
39968: PUSH
39969: LD_INT 21
39971: PUSH
39972: LD_INT 22
39974: PUSH
39975: LD_INT 72
39977: PUSH
39978: LD_INT 26
39980: PUSH
39981: LD_INT 69
39983: PUSH
39984: LD_INT 39
39986: PUSH
39987: LD_INT 40
39989: PUSH
39990: LD_INT 41
39992: PUSH
39993: LD_INT 42
39995: PUSH
39996: LD_INT 43
39998: PUSH
39999: LD_INT 48
40001: PUSH
40002: LD_INT 49
40004: PUSH
40005: LD_INT 50
40007: PUSH
40008: LD_INT 51
40010: PUSH
40011: LD_INT 52
40013: PUSH
40014: LD_INT 53
40016: PUSH
40017: LD_INT 54
40019: PUSH
40020: LD_INT 55
40022: PUSH
40023: LD_INT 56
40025: PUSH
40026: LD_INT 60
40028: PUSH
40029: LD_INT 61
40031: PUSH
40032: LD_INT 62
40034: PUSH
40035: LD_INT 66
40037: PUSH
40038: LD_INT 67
40040: PUSH
40041: LD_INT 68
40043: PUSH
40044: LD_INT 81
40046: PUSH
40047: LD_INT 82
40049: PUSH
40050: LD_INT 83
40052: PUSH
40053: LD_INT 84
40055: PUSH
40056: LD_INT 85
40058: PUSH
40059: LD_INT 87
40061: PUSH
40062: LD_INT 88
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: LIST
40086: LIST
40087: LIST
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: LIST
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: LIST
40102: LIST
40103: LIST
40104: LIST
40105: LIST
40106: LIST
40107: LIST
40108: LIST
40109: LIST
40110: LIST
40111: LIST
40112: LIST
40113: LIST
40114: LIST
40115: LIST
40116: LIST
40117: LIST
40118: LIST
40119: LIST
40120: ST_TO_ADDR
40121: GO 40354
40123: LD_INT 3
40125: DOUBLE
40126: EQUAL
40127: IFTRUE 40131
40129: GO 40353
40131: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
40132: LD_ADDR_VAR 0 4
40136: PUSH
40137: LD_INT 46
40139: PUSH
40140: LD_INT 47
40142: PUSH
40143: LD_INT 1
40145: PUSH
40146: LD_INT 2
40148: PUSH
40149: LD_INT 82
40151: PUSH
40152: LD_INT 83
40154: PUSH
40155: LD_INT 84
40157: PUSH
40158: LD_INT 85
40160: PUSH
40161: LD_INT 86
40163: PUSH
40164: LD_INT 11
40166: PUSH
40167: LD_INT 9
40169: PUSH
40170: LD_INT 20
40172: PUSH
40173: LD_INT 19
40175: PUSH
40176: LD_INT 21
40178: PUSH
40179: LD_INT 24
40181: PUSH
40182: LD_INT 22
40184: PUSH
40185: LD_INT 25
40187: PUSH
40188: LD_INT 28
40190: PUSH
40191: LD_INT 29
40193: PUSH
40194: LD_INT 30
40196: PUSH
40197: LD_INT 31
40199: PUSH
40200: LD_INT 37
40202: PUSH
40203: LD_INT 38
40205: PUSH
40206: LD_INT 32
40208: PUSH
40209: LD_INT 27
40211: PUSH
40212: LD_INT 33
40214: PUSH
40215: LD_INT 69
40217: PUSH
40218: LD_INT 39
40220: PUSH
40221: LD_INT 34
40223: PUSH
40224: LD_INT 40
40226: PUSH
40227: LD_INT 71
40229: PUSH
40230: LD_INT 23
40232: PUSH
40233: LD_INT 44
40235: PUSH
40236: LD_INT 48
40238: PUSH
40239: LD_INT 49
40241: PUSH
40242: LD_INT 50
40244: PUSH
40245: LD_INT 51
40247: PUSH
40248: LD_INT 52
40250: PUSH
40251: LD_INT 53
40253: PUSH
40254: LD_INT 54
40256: PUSH
40257: LD_INT 55
40259: PUSH
40260: LD_INT 56
40262: PUSH
40263: LD_INT 57
40265: PUSH
40266: LD_INT 58
40268: PUSH
40269: LD_INT 59
40271: PUSH
40272: LD_INT 63
40274: PUSH
40275: LD_INT 64
40277: PUSH
40278: LD_INT 65
40280: PUSH
40281: LD_INT 82
40283: PUSH
40284: LD_INT 83
40286: PUSH
40287: LD_INT 84
40289: PUSH
40290: LD_INT 85
40292: PUSH
40293: LD_INT 86
40295: PUSH
40296: EMPTY
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: LIST
40302: LIST
40303: LIST
40304: LIST
40305: LIST
40306: LIST
40307: LIST
40308: LIST
40309: LIST
40310: LIST
40311: LIST
40312: LIST
40313: LIST
40314: LIST
40315: LIST
40316: LIST
40317: LIST
40318: LIST
40319: LIST
40320: LIST
40321: LIST
40322: LIST
40323: LIST
40324: LIST
40325: LIST
40326: LIST
40327: LIST
40328: LIST
40329: LIST
40330: LIST
40331: LIST
40332: LIST
40333: LIST
40334: LIST
40335: LIST
40336: LIST
40337: LIST
40338: LIST
40339: LIST
40340: LIST
40341: LIST
40342: LIST
40343: LIST
40344: LIST
40345: LIST
40346: LIST
40347: LIST
40348: LIST
40349: LIST
40350: ST_TO_ADDR
40351: GO 40354
40353: POP
// if state > - 1 and state < 3 then
40354: LD_VAR 0 3
40358: PUSH
40359: LD_INT 1
40361: NEG
40362: GREATER
40363: PUSH
40364: LD_VAR 0 3
40368: PUSH
40369: LD_INT 3
40371: LESS
40372: AND
40373: IFFALSE 40430
// for i in result do
40375: LD_ADDR_VAR 0 5
40379: PUSH
40380: LD_VAR 0 4
40384: PUSH
40385: FOR_IN
40386: IFFALSE 40428
// if GetTech ( i , side ) <> state then
40388: LD_VAR 0 5
40392: PPUSH
40393: LD_VAR 0 1
40397: PPUSH
40398: CALL_OW 321
40402: PUSH
40403: LD_VAR 0 3
40407: NONEQUAL
40408: IFFALSE 40426
// result := result diff i ;
40410: LD_ADDR_VAR 0 4
40414: PUSH
40415: LD_VAR 0 4
40419: PUSH
40420: LD_VAR 0 5
40424: DIFF
40425: ST_TO_ADDR
40426: GO 40385
40428: POP
40429: POP
// end ;
40430: LD_VAR 0 4
40434: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
40435: LD_INT 0
40437: PPUSH
40438: PPUSH
40439: PPUSH
// result := true ;
40440: LD_ADDR_VAR 0 3
40444: PUSH
40445: LD_INT 1
40447: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
40448: LD_ADDR_VAR 0 5
40452: PUSH
40453: LD_VAR 0 2
40457: PPUSH
40458: CALL_OW 480
40462: ST_TO_ADDR
// if not tmp then
40463: LD_VAR 0 5
40467: NOT
40468: IFFALSE 40472
// exit ;
40470: GO 40521
// for i in tmp do
40472: LD_ADDR_VAR 0 4
40476: PUSH
40477: LD_VAR 0 5
40481: PUSH
40482: FOR_IN
40483: IFFALSE 40519
// if GetTech ( i , side ) <> state_researched then
40485: LD_VAR 0 4
40489: PPUSH
40490: LD_VAR 0 1
40494: PPUSH
40495: CALL_OW 321
40499: PUSH
40500: LD_INT 2
40502: NONEQUAL
40503: IFFALSE 40517
// begin result := false ;
40505: LD_ADDR_VAR 0 3
40509: PUSH
40510: LD_INT 0
40512: ST_TO_ADDR
// exit ;
40513: POP
40514: POP
40515: GO 40521
// end ;
40517: GO 40482
40519: POP
40520: POP
// end ;
40521: LD_VAR 0 3
40525: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
40526: LD_INT 0
40528: PPUSH
40529: PPUSH
40530: PPUSH
40531: PPUSH
40532: PPUSH
40533: PPUSH
40534: PPUSH
40535: PPUSH
40536: PPUSH
40537: PPUSH
40538: PPUSH
40539: PPUSH
40540: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
40541: LD_VAR 0 1
40545: NOT
40546: PUSH
40547: LD_VAR 0 1
40551: PPUSH
40552: CALL_OW 257
40556: PUSH
40557: LD_INT 9
40559: NONEQUAL
40560: OR
40561: IFFALSE 40565
// exit ;
40563: GO 41138
// side := GetSide ( unit ) ;
40565: LD_ADDR_VAR 0 9
40569: PUSH
40570: LD_VAR 0 1
40574: PPUSH
40575: CALL_OW 255
40579: ST_TO_ADDR
// tech_space := tech_spacanom ;
40580: LD_ADDR_VAR 0 12
40584: PUSH
40585: LD_INT 29
40587: ST_TO_ADDR
// tech_time := tech_taurad ;
40588: LD_ADDR_VAR 0 13
40592: PUSH
40593: LD_INT 28
40595: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
40596: LD_ADDR_VAR 0 11
40600: PUSH
40601: LD_VAR 0 1
40605: PPUSH
40606: CALL_OW 310
40610: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
40611: LD_VAR 0 11
40615: PPUSH
40616: CALL_OW 247
40620: PUSH
40621: LD_INT 2
40623: EQUAL
40624: IFFALSE 40628
// exit ;
40626: GO 41138
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40628: LD_ADDR_VAR 0 8
40632: PUSH
40633: LD_INT 81
40635: PUSH
40636: LD_VAR 0 9
40640: PUSH
40641: EMPTY
40642: LIST
40643: LIST
40644: PUSH
40645: LD_INT 3
40647: PUSH
40648: LD_INT 21
40650: PUSH
40651: LD_INT 3
40653: PUSH
40654: EMPTY
40655: LIST
40656: LIST
40657: PUSH
40658: EMPTY
40659: LIST
40660: LIST
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: PPUSH
40666: CALL_OW 69
40670: ST_TO_ADDR
// if not tmp then
40671: LD_VAR 0 8
40675: NOT
40676: IFFALSE 40680
// exit ;
40678: GO 41138
// if in_unit then
40680: LD_VAR 0 11
40684: IFFALSE 40708
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
40686: LD_ADDR_VAR 0 10
40690: PUSH
40691: LD_VAR 0 8
40695: PPUSH
40696: LD_VAR 0 11
40700: PPUSH
40701: CALL_OW 74
40705: ST_TO_ADDR
40706: GO 40728
// enemy := NearestUnitToUnit ( tmp , unit ) ;
40708: LD_ADDR_VAR 0 10
40712: PUSH
40713: LD_VAR 0 8
40717: PPUSH
40718: LD_VAR 0 1
40722: PPUSH
40723: CALL_OW 74
40727: ST_TO_ADDR
// if not enemy then
40728: LD_VAR 0 10
40732: NOT
40733: IFFALSE 40737
// exit ;
40735: GO 41138
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
40737: LD_VAR 0 11
40741: PUSH
40742: LD_VAR 0 11
40746: PPUSH
40747: LD_VAR 0 10
40751: PPUSH
40752: CALL_OW 296
40756: PUSH
40757: LD_INT 13
40759: GREATER
40760: AND
40761: PUSH
40762: LD_VAR 0 1
40766: PPUSH
40767: LD_VAR 0 10
40771: PPUSH
40772: CALL_OW 296
40776: PUSH
40777: LD_INT 12
40779: GREATER
40780: OR
40781: IFFALSE 40785
// exit ;
40783: GO 41138
// missile := [ 1 ] ;
40785: LD_ADDR_VAR 0 14
40789: PUSH
40790: LD_INT 1
40792: PUSH
40793: EMPTY
40794: LIST
40795: ST_TO_ADDR
// if Researched ( side , tech_space ) then
40796: LD_VAR 0 9
40800: PPUSH
40801: LD_VAR 0 12
40805: PPUSH
40806: CALL_OW 325
40810: IFFALSE 40839
// missile := Replace ( missile , missile + 1 , 2 ) ;
40812: LD_ADDR_VAR 0 14
40816: PUSH
40817: LD_VAR 0 14
40821: PPUSH
40822: LD_VAR 0 14
40826: PUSH
40827: LD_INT 1
40829: PLUS
40830: PPUSH
40831: LD_INT 2
40833: PPUSH
40834: CALL_OW 1
40838: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
40839: LD_VAR 0 9
40843: PPUSH
40844: LD_VAR 0 13
40848: PPUSH
40849: CALL_OW 325
40853: PUSH
40854: LD_VAR 0 10
40858: PPUSH
40859: CALL_OW 255
40863: PPUSH
40864: LD_VAR 0 13
40868: PPUSH
40869: CALL_OW 325
40873: NOT
40874: AND
40875: IFFALSE 40904
// missile := Replace ( missile , missile + 1 , 3 ) ;
40877: LD_ADDR_VAR 0 14
40881: PUSH
40882: LD_VAR 0 14
40886: PPUSH
40887: LD_VAR 0 14
40891: PUSH
40892: LD_INT 1
40894: PLUS
40895: PPUSH
40896: LD_INT 3
40898: PPUSH
40899: CALL_OW 1
40903: ST_TO_ADDR
// if missile < 2 then
40904: LD_VAR 0 14
40908: PUSH
40909: LD_INT 2
40911: LESS
40912: IFFALSE 40916
// exit ;
40914: GO 41138
// x := GetX ( enemy ) ;
40916: LD_ADDR_VAR 0 4
40920: PUSH
40921: LD_VAR 0 10
40925: PPUSH
40926: CALL_OW 250
40930: ST_TO_ADDR
// y := GetY ( enemy ) ;
40931: LD_ADDR_VAR 0 5
40935: PUSH
40936: LD_VAR 0 10
40940: PPUSH
40941: CALL_OW 251
40945: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
40946: LD_ADDR_VAR 0 6
40950: PUSH
40951: LD_VAR 0 4
40955: PUSH
40956: LD_INT 1
40958: NEG
40959: PPUSH
40960: LD_INT 1
40962: PPUSH
40963: CALL_OW 12
40967: PLUS
40968: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
40969: LD_ADDR_VAR 0 7
40973: PUSH
40974: LD_VAR 0 5
40978: PUSH
40979: LD_INT 1
40981: NEG
40982: PPUSH
40983: LD_INT 1
40985: PPUSH
40986: CALL_OW 12
40990: PLUS
40991: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40992: LD_VAR 0 6
40996: PPUSH
40997: LD_VAR 0 7
41001: PPUSH
41002: CALL_OW 488
41006: NOT
41007: IFFALSE 41029
// begin _x := x ;
41009: LD_ADDR_VAR 0 6
41013: PUSH
41014: LD_VAR 0 4
41018: ST_TO_ADDR
// _y := y ;
41019: LD_ADDR_VAR 0 7
41023: PUSH
41024: LD_VAR 0 5
41028: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
41029: LD_ADDR_VAR 0 3
41033: PUSH
41034: LD_INT 1
41036: PPUSH
41037: LD_VAR 0 14
41041: PPUSH
41042: CALL_OW 12
41046: ST_TO_ADDR
// case i of 1 :
41047: LD_VAR 0 3
41051: PUSH
41052: LD_INT 1
41054: DOUBLE
41055: EQUAL
41056: IFTRUE 41060
41058: GO 41077
41060: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
41061: LD_VAR 0 1
41065: PPUSH
41066: LD_VAR 0 10
41070: PPUSH
41071: CALL_OW 115
41075: GO 41138
41077: LD_INT 2
41079: DOUBLE
41080: EQUAL
41081: IFTRUE 41085
41083: GO 41107
41085: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
41086: LD_VAR 0 1
41090: PPUSH
41091: LD_VAR 0 6
41095: PPUSH
41096: LD_VAR 0 7
41100: PPUSH
41101: CALL_OW 153
41105: GO 41138
41107: LD_INT 3
41109: DOUBLE
41110: EQUAL
41111: IFTRUE 41115
41113: GO 41137
41115: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
41116: LD_VAR 0 1
41120: PPUSH
41121: LD_VAR 0 6
41125: PPUSH
41126: LD_VAR 0 7
41130: PPUSH
41131: CALL_OW 154
41135: GO 41138
41137: POP
// end ;
41138: LD_VAR 0 2
41142: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
41143: LD_INT 0
41145: PPUSH
41146: PPUSH
41147: PPUSH
41148: PPUSH
41149: PPUSH
41150: PPUSH
// if not unit or not building then
41151: LD_VAR 0 1
41155: NOT
41156: PUSH
41157: LD_VAR 0 2
41161: NOT
41162: OR
41163: IFFALSE 41167
// exit ;
41165: GO 41325
// x := GetX ( building ) ;
41167: LD_ADDR_VAR 0 5
41171: PUSH
41172: LD_VAR 0 2
41176: PPUSH
41177: CALL_OW 250
41181: ST_TO_ADDR
// y := GetY ( building ) ;
41182: LD_ADDR_VAR 0 6
41186: PUSH
41187: LD_VAR 0 2
41191: PPUSH
41192: CALL_OW 251
41196: ST_TO_ADDR
// for i = 0 to 5 do
41197: LD_ADDR_VAR 0 4
41201: PUSH
41202: DOUBLE
41203: LD_INT 0
41205: DEC
41206: ST_TO_ADDR
41207: LD_INT 5
41209: PUSH
41210: FOR_TO
41211: IFFALSE 41323
// begin _x := ShiftX ( x , i , 3 ) ;
41213: LD_ADDR_VAR 0 7
41217: PUSH
41218: LD_VAR 0 5
41222: PPUSH
41223: LD_VAR 0 4
41227: PPUSH
41228: LD_INT 3
41230: PPUSH
41231: CALL_OW 272
41235: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
41236: LD_ADDR_VAR 0 8
41240: PUSH
41241: LD_VAR 0 6
41245: PPUSH
41246: LD_VAR 0 4
41250: PPUSH
41251: LD_INT 3
41253: PPUSH
41254: CALL_OW 273
41258: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41259: LD_VAR 0 7
41263: PPUSH
41264: LD_VAR 0 8
41268: PPUSH
41269: CALL_OW 488
41273: NOT
41274: IFFALSE 41278
// continue ;
41276: GO 41210
// if HexInfo ( _x , _y ) = 0 then
41278: LD_VAR 0 7
41282: PPUSH
41283: LD_VAR 0 8
41287: PPUSH
41288: CALL_OW 428
41292: PUSH
41293: LD_INT 0
41295: EQUAL
41296: IFFALSE 41321
// begin ComMoveXY ( unit , _x , _y ) ;
41298: LD_VAR 0 1
41302: PPUSH
41303: LD_VAR 0 7
41307: PPUSH
41308: LD_VAR 0 8
41312: PPUSH
41313: CALL_OW 111
// exit ;
41317: POP
41318: POP
41319: GO 41325
// end ; end ;
41321: GO 41210
41323: POP
41324: POP
// end ;
41325: LD_VAR 0 3
41329: RET
// export function ScanBase ( side , base_area ) ; begin
41330: LD_INT 0
41332: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
41333: LD_ADDR_VAR 0 3
41337: PUSH
41338: LD_VAR 0 2
41342: PPUSH
41343: LD_INT 81
41345: PUSH
41346: LD_VAR 0 1
41350: PUSH
41351: EMPTY
41352: LIST
41353: LIST
41354: PPUSH
41355: CALL_OW 70
41359: ST_TO_ADDR
// end ;
41360: LD_VAR 0 3
41364: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
41365: LD_INT 0
41367: PPUSH
41368: PPUSH
41369: PPUSH
41370: PPUSH
// result := false ;
41371: LD_ADDR_VAR 0 2
41375: PUSH
41376: LD_INT 0
41378: ST_TO_ADDR
// side := GetSide ( unit ) ;
41379: LD_ADDR_VAR 0 3
41383: PUSH
41384: LD_VAR 0 1
41388: PPUSH
41389: CALL_OW 255
41393: ST_TO_ADDR
// nat := GetNation ( unit ) ;
41394: LD_ADDR_VAR 0 4
41398: PUSH
41399: LD_VAR 0 1
41403: PPUSH
41404: CALL_OW 248
41408: ST_TO_ADDR
// case nat of 1 :
41409: LD_VAR 0 4
41413: PUSH
41414: LD_INT 1
41416: DOUBLE
41417: EQUAL
41418: IFTRUE 41422
41420: GO 41433
41422: POP
// tech := tech_lassight ; 2 :
41423: LD_ADDR_VAR 0 5
41427: PUSH
41428: LD_INT 12
41430: ST_TO_ADDR
41431: GO 41472
41433: LD_INT 2
41435: DOUBLE
41436: EQUAL
41437: IFTRUE 41441
41439: GO 41452
41441: POP
// tech := tech_mortar ; 3 :
41442: LD_ADDR_VAR 0 5
41446: PUSH
41447: LD_INT 41
41449: ST_TO_ADDR
41450: GO 41472
41452: LD_INT 3
41454: DOUBLE
41455: EQUAL
41456: IFTRUE 41460
41458: GO 41471
41460: POP
// tech := tech_bazooka ; end ;
41461: LD_ADDR_VAR 0 5
41465: PUSH
41466: LD_INT 44
41468: ST_TO_ADDR
41469: GO 41472
41471: POP
// if Researched ( side , tech ) then
41472: LD_VAR 0 3
41476: PPUSH
41477: LD_VAR 0 5
41481: PPUSH
41482: CALL_OW 325
41486: IFFALSE 41513
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
41488: LD_ADDR_VAR 0 2
41492: PUSH
41493: LD_INT 5
41495: PUSH
41496: LD_INT 8
41498: PUSH
41499: LD_INT 9
41501: PUSH
41502: EMPTY
41503: LIST
41504: LIST
41505: LIST
41506: PUSH
41507: LD_VAR 0 4
41511: ARRAY
41512: ST_TO_ADDR
// end ;
41513: LD_VAR 0 2
41517: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
41518: LD_INT 0
41520: PPUSH
41521: PPUSH
41522: PPUSH
// if not mines then
41523: LD_VAR 0 2
41527: NOT
41528: IFFALSE 41532
// exit ;
41530: GO 41676
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41532: LD_ADDR_VAR 0 5
41536: PUSH
41537: LD_INT 81
41539: PUSH
41540: LD_VAR 0 1
41544: PUSH
41545: EMPTY
41546: LIST
41547: LIST
41548: PUSH
41549: LD_INT 3
41551: PUSH
41552: LD_INT 21
41554: PUSH
41555: LD_INT 3
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PPUSH
41570: CALL_OW 69
41574: ST_TO_ADDR
// for i in mines do
41575: LD_ADDR_VAR 0 4
41579: PUSH
41580: LD_VAR 0 2
41584: PUSH
41585: FOR_IN
41586: IFFALSE 41674
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
41588: LD_VAR 0 4
41592: PUSH
41593: LD_INT 1
41595: ARRAY
41596: PPUSH
41597: LD_VAR 0 4
41601: PUSH
41602: LD_INT 2
41604: ARRAY
41605: PPUSH
41606: CALL_OW 458
41610: NOT
41611: IFFALSE 41615
// continue ;
41613: GO 41585
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
41615: LD_VAR 0 4
41619: PUSH
41620: LD_INT 1
41622: ARRAY
41623: PPUSH
41624: LD_VAR 0 4
41628: PUSH
41629: LD_INT 2
41631: ARRAY
41632: PPUSH
41633: CALL_OW 428
41637: PUSH
41638: LD_VAR 0 5
41642: IN
41643: IFFALSE 41672
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
41645: LD_VAR 0 4
41649: PUSH
41650: LD_INT 1
41652: ARRAY
41653: PPUSH
41654: LD_VAR 0 4
41658: PUSH
41659: LD_INT 2
41661: ARRAY
41662: PPUSH
41663: LD_VAR 0 1
41667: PPUSH
41668: CALL_OW 456
// end ;
41672: GO 41585
41674: POP
41675: POP
// end ;
41676: LD_VAR 0 3
41680: RET
// export function Count ( array ) ; var i ; begin
41681: LD_INT 0
41683: PPUSH
41684: PPUSH
// result := 0 ;
41685: LD_ADDR_VAR 0 2
41689: PUSH
41690: LD_INT 0
41692: ST_TO_ADDR
// for i in array do
41693: LD_ADDR_VAR 0 3
41697: PUSH
41698: LD_VAR 0 1
41702: PUSH
41703: FOR_IN
41704: IFFALSE 41728
// if i then
41706: LD_VAR 0 3
41710: IFFALSE 41726
// result := result + 1 ;
41712: LD_ADDR_VAR 0 2
41716: PUSH
41717: LD_VAR 0 2
41721: PUSH
41722: LD_INT 1
41724: PLUS
41725: ST_TO_ADDR
41726: GO 41703
41728: POP
41729: POP
// end ;
41730: LD_VAR 0 2
41734: RET
// export function IsEmpty ( building ) ; begin
41735: LD_INT 0
41737: PPUSH
// if not building then
41738: LD_VAR 0 1
41742: NOT
41743: IFFALSE 41747
// exit ;
41745: GO 41790
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
41747: LD_ADDR_VAR 0 2
41751: PUSH
41752: LD_VAR 0 1
41756: PUSH
41757: LD_INT 22
41759: PUSH
41760: LD_VAR 0 1
41764: PPUSH
41765: CALL_OW 255
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: PUSH
41774: LD_INT 58
41776: PUSH
41777: EMPTY
41778: LIST
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: PPUSH
41784: CALL_OW 69
41788: IN
41789: ST_TO_ADDR
// end ;
41790: LD_VAR 0 2
41794: RET
// export function IsNotFull ( building ) ; var places ; begin
41795: LD_INT 0
41797: PPUSH
41798: PPUSH
// if not building then
41799: LD_VAR 0 1
41803: NOT
41804: IFFALSE 41808
// exit ;
41806: GO 41979
// result := false ;
41808: LD_ADDR_VAR 0 2
41812: PUSH
41813: LD_INT 0
41815: ST_TO_ADDR
// places := 0 ;
41816: LD_ADDR_VAR 0 3
41820: PUSH
41821: LD_INT 0
41823: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
41824: LD_VAR 0 1
41828: PPUSH
41829: CALL_OW 266
41833: PUSH
41834: LD_INT 0
41836: DOUBLE
41837: EQUAL
41838: IFTRUE 41896
41840: LD_INT 1
41842: DOUBLE
41843: EQUAL
41844: IFTRUE 41896
41846: LD_INT 6
41848: DOUBLE
41849: EQUAL
41850: IFTRUE 41896
41852: LD_INT 7
41854: DOUBLE
41855: EQUAL
41856: IFTRUE 41896
41858: LD_INT 8
41860: DOUBLE
41861: EQUAL
41862: IFTRUE 41896
41864: LD_INT 4
41866: DOUBLE
41867: EQUAL
41868: IFTRUE 41896
41870: LD_INT 5
41872: DOUBLE
41873: EQUAL
41874: IFTRUE 41896
41876: LD_INT 2
41878: DOUBLE
41879: EQUAL
41880: IFTRUE 41896
41882: LD_INT 3
41884: DOUBLE
41885: EQUAL
41886: IFTRUE 41896
41888: LD_INT 35
41890: DOUBLE
41891: EQUAL
41892: IFTRUE 41896
41894: GO 41907
41896: POP
// places := 6 ; b_bunker , b_breastwork :
41897: LD_ADDR_VAR 0 3
41901: PUSH
41902: LD_INT 6
41904: ST_TO_ADDR
41905: GO 41952
41907: LD_INT 32
41909: DOUBLE
41910: EQUAL
41911: IFTRUE 41921
41913: LD_INT 31
41915: DOUBLE
41916: EQUAL
41917: IFTRUE 41921
41919: GO 41932
41921: POP
// places := 1 ; b_control_tower :
41922: LD_ADDR_VAR 0 3
41926: PUSH
41927: LD_INT 1
41929: ST_TO_ADDR
41930: GO 41952
41932: LD_INT 36
41934: DOUBLE
41935: EQUAL
41936: IFTRUE 41940
41938: GO 41951
41940: POP
// places := 3 ; end ;
41941: LD_ADDR_VAR 0 3
41945: PUSH
41946: LD_INT 3
41948: ST_TO_ADDR
41949: GO 41952
41951: POP
// if places then
41952: LD_VAR 0 3
41956: IFFALSE 41979
// result := UnitsInside ( building ) < places ;
41958: LD_ADDR_VAR 0 2
41962: PUSH
41963: LD_VAR 0 1
41967: PPUSH
41968: CALL_OW 313
41972: PUSH
41973: LD_VAR 0 3
41977: LESS
41978: ST_TO_ADDR
// end ;
41979: LD_VAR 0 2
41983: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
41984: LD_INT 0
41986: PPUSH
41987: PPUSH
41988: PPUSH
41989: PPUSH
// tmp := [ ] ;
41990: LD_ADDR_VAR 0 3
41994: PUSH
41995: EMPTY
41996: ST_TO_ADDR
// list := [ ] ;
41997: LD_ADDR_VAR 0 5
42001: PUSH
42002: EMPTY
42003: ST_TO_ADDR
// for i = 16 to 25 do
42004: LD_ADDR_VAR 0 4
42008: PUSH
42009: DOUBLE
42010: LD_INT 16
42012: DEC
42013: ST_TO_ADDR
42014: LD_INT 25
42016: PUSH
42017: FOR_TO
42018: IFFALSE 42091
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
42020: LD_ADDR_VAR 0 3
42024: PUSH
42025: LD_VAR 0 3
42029: PUSH
42030: LD_INT 22
42032: PUSH
42033: LD_VAR 0 1
42037: PPUSH
42038: CALL_OW 255
42042: PUSH
42043: EMPTY
42044: LIST
42045: LIST
42046: PUSH
42047: LD_INT 91
42049: PUSH
42050: LD_VAR 0 1
42054: PUSH
42055: LD_INT 6
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: LIST
42062: PUSH
42063: LD_INT 30
42065: PUSH
42066: LD_VAR 0 4
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: LIST
42079: PUSH
42080: EMPTY
42081: LIST
42082: PPUSH
42083: CALL_OW 69
42087: ADD
42088: ST_TO_ADDR
42089: GO 42017
42091: POP
42092: POP
// for i = 1 to tmp do
42093: LD_ADDR_VAR 0 4
42097: PUSH
42098: DOUBLE
42099: LD_INT 1
42101: DEC
42102: ST_TO_ADDR
42103: LD_VAR 0 3
42107: PUSH
42108: FOR_TO
42109: IFFALSE 42197
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
42111: LD_ADDR_VAR 0 5
42115: PUSH
42116: LD_VAR 0 5
42120: PUSH
42121: LD_VAR 0 3
42125: PUSH
42126: LD_VAR 0 4
42130: ARRAY
42131: PPUSH
42132: CALL_OW 266
42136: PUSH
42137: LD_VAR 0 3
42141: PUSH
42142: LD_VAR 0 4
42146: ARRAY
42147: PPUSH
42148: CALL_OW 250
42152: PUSH
42153: LD_VAR 0 3
42157: PUSH
42158: LD_VAR 0 4
42162: ARRAY
42163: PPUSH
42164: CALL_OW 251
42168: PUSH
42169: LD_VAR 0 3
42173: PUSH
42174: LD_VAR 0 4
42178: ARRAY
42179: PPUSH
42180: CALL_OW 254
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: LIST
42189: LIST
42190: PUSH
42191: EMPTY
42192: LIST
42193: ADD
42194: ST_TO_ADDR
42195: GO 42108
42197: POP
42198: POP
// result := list ;
42199: LD_ADDR_VAR 0 2
42203: PUSH
42204: LD_VAR 0 5
42208: ST_TO_ADDR
// end ;
42209: LD_VAR 0 2
42213: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
42214: LD_INT 0
42216: PPUSH
42217: PPUSH
42218: PPUSH
42219: PPUSH
42220: PPUSH
42221: PPUSH
42222: PPUSH
// if not factory then
42223: LD_VAR 0 1
42227: NOT
42228: IFFALSE 42232
// exit ;
42230: GO 42825
// if control = control_apeman then
42232: LD_VAR 0 4
42236: PUSH
42237: LD_INT 5
42239: EQUAL
42240: IFFALSE 42349
// begin tmp := UnitsInside ( factory ) ;
42242: LD_ADDR_VAR 0 8
42246: PUSH
42247: LD_VAR 0 1
42251: PPUSH
42252: CALL_OW 313
42256: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
42257: LD_VAR 0 8
42261: PPUSH
42262: LD_INT 25
42264: PUSH
42265: LD_INT 12
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PPUSH
42272: CALL_OW 72
42276: NOT
42277: IFFALSE 42287
// control := control_manual ;
42279: LD_ADDR_VAR 0 4
42283: PUSH
42284: LD_INT 1
42286: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
42287: LD_ADDR_VAR 0 8
42291: PUSH
42292: LD_VAR 0 1
42296: PPUSH
42297: CALL 41984 0 1
42301: ST_TO_ADDR
// if tmp then
42302: LD_VAR 0 8
42306: IFFALSE 42349
// begin for i in tmp do
42308: LD_ADDR_VAR 0 7
42312: PUSH
42313: LD_VAR 0 8
42317: PUSH
42318: FOR_IN
42319: IFFALSE 42347
// if i [ 1 ] = b_ext_radio then
42321: LD_VAR 0 7
42325: PUSH
42326: LD_INT 1
42328: ARRAY
42329: PUSH
42330: LD_INT 22
42332: EQUAL
42333: IFFALSE 42345
// begin control := control_remote ;
42335: LD_ADDR_VAR 0 4
42339: PUSH
42340: LD_INT 2
42342: ST_TO_ADDR
// break ;
42343: GO 42347
// end ;
42345: GO 42318
42347: POP
42348: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42349: LD_VAR 0 1
42353: PPUSH
42354: LD_VAR 0 2
42358: PPUSH
42359: LD_VAR 0 3
42363: PPUSH
42364: LD_VAR 0 4
42368: PPUSH
42369: LD_VAR 0 5
42373: PPUSH
42374: CALL_OW 448
42378: IFFALSE 42413
// begin result := [ chassis , engine , control , weapon ] ;
42380: LD_ADDR_VAR 0 6
42384: PUSH
42385: LD_VAR 0 2
42389: PUSH
42390: LD_VAR 0 3
42394: PUSH
42395: LD_VAR 0 4
42399: PUSH
42400: LD_VAR 0 5
42404: PUSH
42405: EMPTY
42406: LIST
42407: LIST
42408: LIST
42409: LIST
42410: ST_TO_ADDR
// exit ;
42411: GO 42825
// end ; _chassis := AvailableChassisList ( factory ) ;
42413: LD_ADDR_VAR 0 9
42417: PUSH
42418: LD_VAR 0 1
42422: PPUSH
42423: CALL_OW 475
42427: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
42428: LD_ADDR_VAR 0 11
42432: PUSH
42433: LD_VAR 0 1
42437: PPUSH
42438: CALL_OW 476
42442: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
42443: LD_ADDR_VAR 0 12
42447: PUSH
42448: LD_VAR 0 1
42452: PPUSH
42453: CALL_OW 477
42457: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
42458: LD_ADDR_VAR 0 10
42462: PUSH
42463: LD_VAR 0 1
42467: PPUSH
42468: CALL_OW 478
42472: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
42473: LD_VAR 0 9
42477: NOT
42478: PUSH
42479: LD_VAR 0 11
42483: NOT
42484: OR
42485: PUSH
42486: LD_VAR 0 12
42490: NOT
42491: OR
42492: PUSH
42493: LD_VAR 0 10
42497: NOT
42498: OR
42499: IFFALSE 42534
// begin result := [ chassis , engine , control , weapon ] ;
42501: LD_ADDR_VAR 0 6
42505: PUSH
42506: LD_VAR 0 2
42510: PUSH
42511: LD_VAR 0 3
42515: PUSH
42516: LD_VAR 0 4
42520: PUSH
42521: LD_VAR 0 5
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: LIST
42530: LIST
42531: ST_TO_ADDR
// exit ;
42532: GO 42825
// end ; if not chassis in _chassis then
42534: LD_VAR 0 2
42538: PUSH
42539: LD_VAR 0 9
42543: IN
42544: NOT
42545: IFFALSE 42571
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
42547: LD_ADDR_VAR 0 2
42551: PUSH
42552: LD_VAR 0 9
42556: PUSH
42557: LD_INT 1
42559: PPUSH
42560: LD_VAR 0 9
42564: PPUSH
42565: CALL_OW 12
42569: ARRAY
42570: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
42571: LD_VAR 0 2
42575: PPUSH
42576: LD_VAR 0 3
42580: PPUSH
42581: CALL 42830 0 2
42585: NOT
42586: IFFALSE 42645
// repeat engine := _engine [ 1 ] ;
42588: LD_ADDR_VAR 0 3
42592: PUSH
42593: LD_VAR 0 11
42597: PUSH
42598: LD_INT 1
42600: ARRAY
42601: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
42602: LD_ADDR_VAR 0 11
42606: PUSH
42607: LD_VAR 0 11
42611: PPUSH
42612: LD_INT 1
42614: PPUSH
42615: CALL_OW 3
42619: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
42620: LD_VAR 0 2
42624: PPUSH
42625: LD_VAR 0 3
42629: PPUSH
42630: CALL 42830 0 2
42634: PUSH
42635: LD_VAR 0 11
42639: PUSH
42640: EMPTY
42641: EQUAL
42642: OR
42643: IFFALSE 42588
// if not control in _control then
42645: LD_VAR 0 4
42649: PUSH
42650: LD_VAR 0 12
42654: IN
42655: NOT
42656: IFFALSE 42682
// control := _control [ rand ( 1 , _control ) ] ;
42658: LD_ADDR_VAR 0 4
42662: PUSH
42663: LD_VAR 0 12
42667: PUSH
42668: LD_INT 1
42670: PPUSH
42671: LD_VAR 0 12
42675: PPUSH
42676: CALL_OW 12
42680: ARRAY
42681: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
42682: LD_VAR 0 2
42686: PPUSH
42687: LD_VAR 0 5
42691: PPUSH
42692: CALL 43050 0 2
42696: NOT
42697: IFFALSE 42756
// repeat weapon := _weapon [ 1 ] ;
42699: LD_ADDR_VAR 0 5
42703: PUSH
42704: LD_VAR 0 10
42708: PUSH
42709: LD_INT 1
42711: ARRAY
42712: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
42713: LD_ADDR_VAR 0 10
42717: PUSH
42718: LD_VAR 0 10
42722: PPUSH
42723: LD_INT 1
42725: PPUSH
42726: CALL_OW 3
42730: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
42731: LD_VAR 0 2
42735: PPUSH
42736: LD_VAR 0 5
42740: PPUSH
42741: CALL 43050 0 2
42745: PUSH
42746: LD_VAR 0 10
42750: PUSH
42751: EMPTY
42752: EQUAL
42753: OR
42754: IFFALSE 42699
// result := [ ] ;
42756: LD_ADDR_VAR 0 6
42760: PUSH
42761: EMPTY
42762: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42763: LD_VAR 0 1
42767: PPUSH
42768: LD_VAR 0 2
42772: PPUSH
42773: LD_VAR 0 3
42777: PPUSH
42778: LD_VAR 0 4
42782: PPUSH
42783: LD_VAR 0 5
42787: PPUSH
42788: CALL_OW 448
42792: IFFALSE 42825
// result := [ chassis , engine , control , weapon ] ;
42794: LD_ADDR_VAR 0 6
42798: PUSH
42799: LD_VAR 0 2
42803: PUSH
42804: LD_VAR 0 3
42808: PUSH
42809: LD_VAR 0 4
42813: PUSH
42814: LD_VAR 0 5
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: LIST
42823: LIST
42824: ST_TO_ADDR
// end ;
42825: LD_VAR 0 6
42829: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
42830: LD_INT 0
42832: PPUSH
// if not chassis or not engine then
42833: LD_VAR 0 1
42837: NOT
42838: PUSH
42839: LD_VAR 0 2
42843: NOT
42844: OR
42845: IFFALSE 42849
// exit ;
42847: GO 43045
// case engine of engine_solar :
42849: LD_VAR 0 2
42853: PUSH
42854: LD_INT 2
42856: DOUBLE
42857: EQUAL
42858: IFTRUE 42862
42860: GO 42900
42862: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
42863: LD_ADDR_VAR 0 3
42867: PUSH
42868: LD_INT 11
42870: PUSH
42871: LD_INT 12
42873: PUSH
42874: LD_INT 13
42876: PUSH
42877: LD_INT 14
42879: PUSH
42880: LD_INT 1
42882: PUSH
42883: LD_INT 2
42885: PUSH
42886: LD_INT 3
42888: PUSH
42889: EMPTY
42890: LIST
42891: LIST
42892: LIST
42893: LIST
42894: LIST
42895: LIST
42896: LIST
42897: ST_TO_ADDR
42898: GO 43029
42900: LD_INT 1
42902: DOUBLE
42903: EQUAL
42904: IFTRUE 42908
42906: GO 42970
42908: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
42909: LD_ADDR_VAR 0 3
42913: PUSH
42914: LD_INT 11
42916: PUSH
42917: LD_INT 12
42919: PUSH
42920: LD_INT 13
42922: PUSH
42923: LD_INT 14
42925: PUSH
42926: LD_INT 1
42928: PUSH
42929: LD_INT 2
42931: PUSH
42932: LD_INT 3
42934: PUSH
42935: LD_INT 4
42937: PUSH
42938: LD_INT 5
42940: PUSH
42941: LD_INT 21
42943: PUSH
42944: LD_INT 23
42946: PUSH
42947: LD_INT 22
42949: PUSH
42950: LD_INT 24
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: LIST
42957: LIST
42958: LIST
42959: LIST
42960: LIST
42961: LIST
42962: LIST
42963: LIST
42964: LIST
42965: LIST
42966: LIST
42967: ST_TO_ADDR
42968: GO 43029
42970: LD_INT 3
42972: DOUBLE
42973: EQUAL
42974: IFTRUE 42978
42976: GO 43028
42978: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42979: LD_ADDR_VAR 0 3
42983: PUSH
42984: LD_INT 13
42986: PUSH
42987: LD_INT 14
42989: PUSH
42990: LD_INT 2
42992: PUSH
42993: LD_INT 3
42995: PUSH
42996: LD_INT 4
42998: PUSH
42999: LD_INT 5
43001: PUSH
43002: LD_INT 21
43004: PUSH
43005: LD_INT 22
43007: PUSH
43008: LD_INT 23
43010: PUSH
43011: LD_INT 24
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: LIST
43018: LIST
43019: LIST
43020: LIST
43021: LIST
43022: LIST
43023: LIST
43024: LIST
43025: ST_TO_ADDR
43026: GO 43029
43028: POP
// result := ( chassis in result ) ;
43029: LD_ADDR_VAR 0 3
43033: PUSH
43034: LD_VAR 0 1
43038: PUSH
43039: LD_VAR 0 3
43043: IN
43044: ST_TO_ADDR
// end ;
43045: LD_VAR 0 3
43049: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
43050: LD_INT 0
43052: PPUSH
// if not chassis or not weapon then
43053: LD_VAR 0 1
43057: NOT
43058: PUSH
43059: LD_VAR 0 2
43063: NOT
43064: OR
43065: IFFALSE 43069
// exit ;
43067: GO 44129
// case weapon of us_machine_gun :
43069: LD_VAR 0 2
43073: PUSH
43074: LD_INT 2
43076: DOUBLE
43077: EQUAL
43078: IFTRUE 43082
43080: GO 43112
43082: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
43083: LD_ADDR_VAR 0 3
43087: PUSH
43088: LD_INT 1
43090: PUSH
43091: LD_INT 2
43093: PUSH
43094: LD_INT 3
43096: PUSH
43097: LD_INT 4
43099: PUSH
43100: LD_INT 5
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: ST_TO_ADDR
43110: GO 44113
43112: LD_INT 3
43114: DOUBLE
43115: EQUAL
43116: IFTRUE 43120
43118: GO 43150
43120: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
43121: LD_ADDR_VAR 0 3
43125: PUSH
43126: LD_INT 1
43128: PUSH
43129: LD_INT 2
43131: PUSH
43132: LD_INT 3
43134: PUSH
43135: LD_INT 4
43137: PUSH
43138: LD_INT 5
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: LIST
43145: LIST
43146: LIST
43147: ST_TO_ADDR
43148: GO 44113
43150: LD_INT 11
43152: DOUBLE
43153: EQUAL
43154: IFTRUE 43158
43156: GO 43188
43158: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
43159: LD_ADDR_VAR 0 3
43163: PUSH
43164: LD_INT 1
43166: PUSH
43167: LD_INT 2
43169: PUSH
43170: LD_INT 3
43172: PUSH
43173: LD_INT 4
43175: PUSH
43176: LD_INT 5
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: LIST
43183: LIST
43184: LIST
43185: ST_TO_ADDR
43186: GO 44113
43188: LD_INT 4
43190: DOUBLE
43191: EQUAL
43192: IFTRUE 43196
43194: GO 43222
43196: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
43197: LD_ADDR_VAR 0 3
43201: PUSH
43202: LD_INT 2
43204: PUSH
43205: LD_INT 3
43207: PUSH
43208: LD_INT 4
43210: PUSH
43211: LD_INT 5
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: LIST
43218: LIST
43219: ST_TO_ADDR
43220: GO 44113
43222: LD_INT 5
43224: DOUBLE
43225: EQUAL
43226: IFTRUE 43230
43228: GO 43256
43230: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
43231: LD_ADDR_VAR 0 3
43235: PUSH
43236: LD_INT 2
43238: PUSH
43239: LD_INT 3
43241: PUSH
43242: LD_INT 4
43244: PUSH
43245: LD_INT 5
43247: PUSH
43248: EMPTY
43249: LIST
43250: LIST
43251: LIST
43252: LIST
43253: ST_TO_ADDR
43254: GO 44113
43256: LD_INT 9
43258: DOUBLE
43259: EQUAL
43260: IFTRUE 43264
43262: GO 43290
43264: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
43265: LD_ADDR_VAR 0 3
43269: PUSH
43270: LD_INT 2
43272: PUSH
43273: LD_INT 3
43275: PUSH
43276: LD_INT 4
43278: PUSH
43279: LD_INT 5
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: LIST
43286: LIST
43287: ST_TO_ADDR
43288: GO 44113
43290: LD_INT 7
43292: DOUBLE
43293: EQUAL
43294: IFTRUE 43298
43296: GO 43324
43298: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
43299: LD_ADDR_VAR 0 3
43303: PUSH
43304: LD_INT 2
43306: PUSH
43307: LD_INT 3
43309: PUSH
43310: LD_INT 4
43312: PUSH
43313: LD_INT 5
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: LIST
43320: LIST
43321: ST_TO_ADDR
43322: GO 44113
43324: LD_INT 12
43326: DOUBLE
43327: EQUAL
43328: IFTRUE 43332
43330: GO 43358
43332: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
43333: LD_ADDR_VAR 0 3
43337: PUSH
43338: LD_INT 2
43340: PUSH
43341: LD_INT 3
43343: PUSH
43344: LD_INT 4
43346: PUSH
43347: LD_INT 5
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: LIST
43354: LIST
43355: ST_TO_ADDR
43356: GO 44113
43358: LD_INT 13
43360: DOUBLE
43361: EQUAL
43362: IFTRUE 43366
43364: GO 43392
43366: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
43367: LD_ADDR_VAR 0 3
43371: PUSH
43372: LD_INT 2
43374: PUSH
43375: LD_INT 3
43377: PUSH
43378: LD_INT 4
43380: PUSH
43381: LD_INT 5
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: ST_TO_ADDR
43390: GO 44113
43392: LD_INT 14
43394: DOUBLE
43395: EQUAL
43396: IFTRUE 43400
43398: GO 43418
43400: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
43401: LD_ADDR_VAR 0 3
43405: PUSH
43406: LD_INT 4
43408: PUSH
43409: LD_INT 5
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: ST_TO_ADDR
43416: GO 44113
43418: LD_INT 6
43420: DOUBLE
43421: EQUAL
43422: IFTRUE 43426
43424: GO 43444
43426: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
43427: LD_ADDR_VAR 0 3
43431: PUSH
43432: LD_INT 4
43434: PUSH
43435: LD_INT 5
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: ST_TO_ADDR
43442: GO 44113
43444: LD_INT 10
43446: DOUBLE
43447: EQUAL
43448: IFTRUE 43452
43450: GO 43470
43452: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
43453: LD_ADDR_VAR 0 3
43457: PUSH
43458: LD_INT 4
43460: PUSH
43461: LD_INT 5
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: ST_TO_ADDR
43468: GO 44113
43470: LD_INT 22
43472: DOUBLE
43473: EQUAL
43474: IFTRUE 43478
43476: GO 43504
43478: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
43479: LD_ADDR_VAR 0 3
43483: PUSH
43484: LD_INT 11
43486: PUSH
43487: LD_INT 12
43489: PUSH
43490: LD_INT 13
43492: PUSH
43493: LD_INT 14
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: LIST
43500: LIST
43501: ST_TO_ADDR
43502: GO 44113
43504: LD_INT 23
43506: DOUBLE
43507: EQUAL
43508: IFTRUE 43512
43510: GO 43538
43512: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
43513: LD_ADDR_VAR 0 3
43517: PUSH
43518: LD_INT 11
43520: PUSH
43521: LD_INT 12
43523: PUSH
43524: LD_INT 13
43526: PUSH
43527: LD_INT 14
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: LIST
43534: LIST
43535: ST_TO_ADDR
43536: GO 44113
43538: LD_INT 24
43540: DOUBLE
43541: EQUAL
43542: IFTRUE 43546
43544: GO 43572
43546: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
43547: LD_ADDR_VAR 0 3
43551: PUSH
43552: LD_INT 11
43554: PUSH
43555: LD_INT 12
43557: PUSH
43558: LD_INT 13
43560: PUSH
43561: LD_INT 14
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: LIST
43568: LIST
43569: ST_TO_ADDR
43570: GO 44113
43572: LD_INT 30
43574: DOUBLE
43575: EQUAL
43576: IFTRUE 43580
43578: GO 43606
43580: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
43581: LD_ADDR_VAR 0 3
43585: PUSH
43586: LD_INT 11
43588: PUSH
43589: LD_INT 12
43591: PUSH
43592: LD_INT 13
43594: PUSH
43595: LD_INT 14
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: LIST
43602: LIST
43603: ST_TO_ADDR
43604: GO 44113
43606: LD_INT 25
43608: DOUBLE
43609: EQUAL
43610: IFTRUE 43614
43612: GO 43632
43614: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
43615: LD_ADDR_VAR 0 3
43619: PUSH
43620: LD_INT 13
43622: PUSH
43623: LD_INT 14
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: ST_TO_ADDR
43630: GO 44113
43632: LD_INT 27
43634: DOUBLE
43635: EQUAL
43636: IFTRUE 43640
43638: GO 43658
43640: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
43641: LD_ADDR_VAR 0 3
43645: PUSH
43646: LD_INT 13
43648: PUSH
43649: LD_INT 14
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: ST_TO_ADDR
43656: GO 44113
43658: LD_INT 92
43660: DOUBLE
43661: EQUAL
43662: IFTRUE 43666
43664: GO 43692
43666: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
43667: LD_ADDR_VAR 0 3
43671: PUSH
43672: LD_INT 11
43674: PUSH
43675: LD_INT 12
43677: PUSH
43678: LD_INT 13
43680: PUSH
43681: LD_INT 14
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: LIST
43688: LIST
43689: ST_TO_ADDR
43690: GO 44113
43692: LD_INT 28
43694: DOUBLE
43695: EQUAL
43696: IFTRUE 43700
43698: GO 43718
43700: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
43701: LD_ADDR_VAR 0 3
43705: PUSH
43706: LD_INT 13
43708: PUSH
43709: LD_INT 14
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: ST_TO_ADDR
43716: GO 44113
43718: LD_INT 29
43720: DOUBLE
43721: EQUAL
43722: IFTRUE 43726
43724: GO 43744
43726: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
43727: LD_ADDR_VAR 0 3
43731: PUSH
43732: LD_INT 13
43734: PUSH
43735: LD_INT 14
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: ST_TO_ADDR
43742: GO 44113
43744: LD_INT 31
43746: DOUBLE
43747: EQUAL
43748: IFTRUE 43752
43750: GO 43770
43752: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43753: LD_ADDR_VAR 0 3
43757: PUSH
43758: LD_INT 13
43760: PUSH
43761: LD_INT 14
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: ST_TO_ADDR
43768: GO 44113
43770: LD_INT 26
43772: DOUBLE
43773: EQUAL
43774: IFTRUE 43778
43776: GO 43796
43778: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
43779: LD_ADDR_VAR 0 3
43783: PUSH
43784: LD_INT 13
43786: PUSH
43787: LD_INT 14
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: ST_TO_ADDR
43794: GO 44113
43796: LD_INT 42
43798: DOUBLE
43799: EQUAL
43800: IFTRUE 43804
43802: GO 43830
43804: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
43805: LD_ADDR_VAR 0 3
43809: PUSH
43810: LD_INT 21
43812: PUSH
43813: LD_INT 22
43815: PUSH
43816: LD_INT 23
43818: PUSH
43819: LD_INT 24
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: LIST
43826: LIST
43827: ST_TO_ADDR
43828: GO 44113
43830: LD_INT 43
43832: DOUBLE
43833: EQUAL
43834: IFTRUE 43838
43836: GO 43864
43838: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
43839: LD_ADDR_VAR 0 3
43843: PUSH
43844: LD_INT 21
43846: PUSH
43847: LD_INT 22
43849: PUSH
43850: LD_INT 23
43852: PUSH
43853: LD_INT 24
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: LIST
43860: LIST
43861: ST_TO_ADDR
43862: GO 44113
43864: LD_INT 44
43866: DOUBLE
43867: EQUAL
43868: IFTRUE 43872
43870: GO 43898
43872: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
43873: LD_ADDR_VAR 0 3
43877: PUSH
43878: LD_INT 21
43880: PUSH
43881: LD_INT 22
43883: PUSH
43884: LD_INT 23
43886: PUSH
43887: LD_INT 24
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: LIST
43894: LIST
43895: ST_TO_ADDR
43896: GO 44113
43898: LD_INT 45
43900: DOUBLE
43901: EQUAL
43902: IFTRUE 43906
43904: GO 43932
43906: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
43907: LD_ADDR_VAR 0 3
43911: PUSH
43912: LD_INT 21
43914: PUSH
43915: LD_INT 22
43917: PUSH
43918: LD_INT 23
43920: PUSH
43921: LD_INT 24
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: LIST
43928: LIST
43929: ST_TO_ADDR
43930: GO 44113
43932: LD_INT 49
43934: DOUBLE
43935: EQUAL
43936: IFTRUE 43940
43938: GO 43966
43940: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
43941: LD_ADDR_VAR 0 3
43945: PUSH
43946: LD_INT 21
43948: PUSH
43949: LD_INT 22
43951: PUSH
43952: LD_INT 23
43954: PUSH
43955: LD_INT 24
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: ST_TO_ADDR
43964: GO 44113
43966: LD_INT 51
43968: DOUBLE
43969: EQUAL
43970: IFTRUE 43974
43972: GO 44000
43974: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
43975: LD_ADDR_VAR 0 3
43979: PUSH
43980: LD_INT 21
43982: PUSH
43983: LD_INT 22
43985: PUSH
43986: LD_INT 23
43988: PUSH
43989: LD_INT 24
43991: PUSH
43992: EMPTY
43993: LIST
43994: LIST
43995: LIST
43996: LIST
43997: ST_TO_ADDR
43998: GO 44113
44000: LD_INT 52
44002: DOUBLE
44003: EQUAL
44004: IFTRUE 44008
44006: GO 44034
44008: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
44009: LD_ADDR_VAR 0 3
44013: PUSH
44014: LD_INT 21
44016: PUSH
44017: LD_INT 22
44019: PUSH
44020: LD_INT 23
44022: PUSH
44023: LD_INT 24
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: LIST
44030: LIST
44031: ST_TO_ADDR
44032: GO 44113
44034: LD_INT 53
44036: DOUBLE
44037: EQUAL
44038: IFTRUE 44042
44040: GO 44060
44042: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
44043: LD_ADDR_VAR 0 3
44047: PUSH
44048: LD_INT 23
44050: PUSH
44051: LD_INT 24
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: ST_TO_ADDR
44058: GO 44113
44060: LD_INT 46
44062: DOUBLE
44063: EQUAL
44064: IFTRUE 44068
44066: GO 44086
44068: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
44069: LD_ADDR_VAR 0 3
44073: PUSH
44074: LD_INT 23
44076: PUSH
44077: LD_INT 24
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: ST_TO_ADDR
44084: GO 44113
44086: LD_INT 47
44088: DOUBLE
44089: EQUAL
44090: IFTRUE 44094
44092: GO 44112
44094: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44095: LD_ADDR_VAR 0 3
44099: PUSH
44100: LD_INT 23
44102: PUSH
44103: LD_INT 24
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: ST_TO_ADDR
44110: GO 44113
44112: POP
// result := ( chassis in result ) ;
44113: LD_ADDR_VAR 0 3
44117: PUSH
44118: LD_VAR 0 1
44122: PUSH
44123: LD_VAR 0 3
44127: IN
44128: ST_TO_ADDR
// end ;
44129: LD_VAR 0 3
44133: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
44134: LD_INT 0
44136: PPUSH
44137: PPUSH
44138: PPUSH
44139: PPUSH
44140: PPUSH
44141: PPUSH
44142: PPUSH
// result := array ;
44143: LD_ADDR_VAR 0 5
44147: PUSH
44148: LD_VAR 0 1
44152: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
44153: LD_VAR 0 1
44157: NOT
44158: PUSH
44159: LD_VAR 0 2
44163: NOT
44164: OR
44165: PUSH
44166: LD_VAR 0 3
44170: NOT
44171: OR
44172: PUSH
44173: LD_VAR 0 2
44177: PUSH
44178: LD_VAR 0 1
44182: GREATER
44183: OR
44184: PUSH
44185: LD_VAR 0 3
44189: PUSH
44190: LD_VAR 0 1
44194: GREATER
44195: OR
44196: IFFALSE 44200
// exit ;
44198: GO 44496
// if direction then
44200: LD_VAR 0 4
44204: IFFALSE 44268
// begin d := 1 ;
44206: LD_ADDR_VAR 0 9
44210: PUSH
44211: LD_INT 1
44213: ST_TO_ADDR
// if i_from > i_to then
44214: LD_VAR 0 2
44218: PUSH
44219: LD_VAR 0 3
44223: GREATER
44224: IFFALSE 44250
// length := ( array - i_from ) + i_to else
44226: LD_ADDR_VAR 0 11
44230: PUSH
44231: LD_VAR 0 1
44235: PUSH
44236: LD_VAR 0 2
44240: MINUS
44241: PUSH
44242: LD_VAR 0 3
44246: PLUS
44247: ST_TO_ADDR
44248: GO 44266
// length := i_to - i_from ;
44250: LD_ADDR_VAR 0 11
44254: PUSH
44255: LD_VAR 0 3
44259: PUSH
44260: LD_VAR 0 2
44264: MINUS
44265: ST_TO_ADDR
// end else
44266: GO 44329
// begin d := - 1 ;
44268: LD_ADDR_VAR 0 9
44272: PUSH
44273: LD_INT 1
44275: NEG
44276: ST_TO_ADDR
// if i_from > i_to then
44277: LD_VAR 0 2
44281: PUSH
44282: LD_VAR 0 3
44286: GREATER
44287: IFFALSE 44307
// length := i_from - i_to else
44289: LD_ADDR_VAR 0 11
44293: PUSH
44294: LD_VAR 0 2
44298: PUSH
44299: LD_VAR 0 3
44303: MINUS
44304: ST_TO_ADDR
44305: GO 44329
// length := ( array - i_to ) + i_from ;
44307: LD_ADDR_VAR 0 11
44311: PUSH
44312: LD_VAR 0 1
44316: PUSH
44317: LD_VAR 0 3
44321: MINUS
44322: PUSH
44323: LD_VAR 0 2
44327: PLUS
44328: ST_TO_ADDR
// end ; if not length then
44329: LD_VAR 0 11
44333: NOT
44334: IFFALSE 44338
// exit ;
44336: GO 44496
// tmp := array ;
44338: LD_ADDR_VAR 0 10
44342: PUSH
44343: LD_VAR 0 1
44347: ST_TO_ADDR
// for i = 1 to length do
44348: LD_ADDR_VAR 0 6
44352: PUSH
44353: DOUBLE
44354: LD_INT 1
44356: DEC
44357: ST_TO_ADDR
44358: LD_VAR 0 11
44362: PUSH
44363: FOR_TO
44364: IFFALSE 44484
// begin for j = 1 to array do
44366: LD_ADDR_VAR 0 7
44370: PUSH
44371: DOUBLE
44372: LD_INT 1
44374: DEC
44375: ST_TO_ADDR
44376: LD_VAR 0 1
44380: PUSH
44381: FOR_TO
44382: IFFALSE 44470
// begin k := j + d ;
44384: LD_ADDR_VAR 0 8
44388: PUSH
44389: LD_VAR 0 7
44393: PUSH
44394: LD_VAR 0 9
44398: PLUS
44399: ST_TO_ADDR
// if k > array then
44400: LD_VAR 0 8
44404: PUSH
44405: LD_VAR 0 1
44409: GREATER
44410: IFFALSE 44420
// k := 1 ;
44412: LD_ADDR_VAR 0 8
44416: PUSH
44417: LD_INT 1
44419: ST_TO_ADDR
// if not k then
44420: LD_VAR 0 8
44424: NOT
44425: IFFALSE 44437
// k := array ;
44427: LD_ADDR_VAR 0 8
44431: PUSH
44432: LD_VAR 0 1
44436: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
44437: LD_ADDR_VAR 0 10
44441: PUSH
44442: LD_VAR 0 10
44446: PPUSH
44447: LD_VAR 0 8
44451: PPUSH
44452: LD_VAR 0 1
44456: PUSH
44457: LD_VAR 0 7
44461: ARRAY
44462: PPUSH
44463: CALL_OW 1
44467: ST_TO_ADDR
// end ;
44468: GO 44381
44470: POP
44471: POP
// array := tmp ;
44472: LD_ADDR_VAR 0 1
44476: PUSH
44477: LD_VAR 0 10
44481: ST_TO_ADDR
// end ;
44482: GO 44363
44484: POP
44485: POP
// result := array ;
44486: LD_ADDR_VAR 0 5
44490: PUSH
44491: LD_VAR 0 1
44495: ST_TO_ADDR
// end ;
44496: LD_VAR 0 5
44500: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
44501: LD_INT 0
44503: PPUSH
44504: PPUSH
// result := 0 ;
44505: LD_ADDR_VAR 0 3
44509: PUSH
44510: LD_INT 0
44512: ST_TO_ADDR
// if not array or not value in array then
44513: LD_VAR 0 1
44517: NOT
44518: PUSH
44519: LD_VAR 0 2
44523: PUSH
44524: LD_VAR 0 1
44528: IN
44529: NOT
44530: OR
44531: IFFALSE 44535
// exit ;
44533: GO 44589
// for i = 1 to array do
44535: LD_ADDR_VAR 0 4
44539: PUSH
44540: DOUBLE
44541: LD_INT 1
44543: DEC
44544: ST_TO_ADDR
44545: LD_VAR 0 1
44549: PUSH
44550: FOR_TO
44551: IFFALSE 44587
// if value = array [ i ] then
44553: LD_VAR 0 2
44557: PUSH
44558: LD_VAR 0 1
44562: PUSH
44563: LD_VAR 0 4
44567: ARRAY
44568: EQUAL
44569: IFFALSE 44585
// begin result := i ;
44571: LD_ADDR_VAR 0 3
44575: PUSH
44576: LD_VAR 0 4
44580: ST_TO_ADDR
// exit ;
44581: POP
44582: POP
44583: GO 44589
// end ;
44585: GO 44550
44587: POP
44588: POP
// end ;
44589: LD_VAR 0 3
44593: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
44594: LD_INT 0
44596: PPUSH
// vc_chassis := chassis ;
44597: LD_ADDR_OWVAR 37
44601: PUSH
44602: LD_VAR 0 1
44606: ST_TO_ADDR
// vc_engine := engine ;
44607: LD_ADDR_OWVAR 39
44611: PUSH
44612: LD_VAR 0 2
44616: ST_TO_ADDR
// vc_control := control ;
44617: LD_ADDR_OWVAR 38
44621: PUSH
44622: LD_VAR 0 3
44626: ST_TO_ADDR
// vc_weapon := weapon ;
44627: LD_ADDR_OWVAR 40
44631: PUSH
44632: LD_VAR 0 4
44636: ST_TO_ADDR
// vc_fuel_battery := fuel ;
44637: LD_ADDR_OWVAR 41
44641: PUSH
44642: LD_VAR 0 5
44646: ST_TO_ADDR
// end ;
44647: LD_VAR 0 6
44651: RET
// export function WantPlant ( unit ) ; var task ; begin
44652: LD_INT 0
44654: PPUSH
44655: PPUSH
// result := false ;
44656: LD_ADDR_VAR 0 2
44660: PUSH
44661: LD_INT 0
44663: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
44664: LD_ADDR_VAR 0 3
44668: PUSH
44669: LD_VAR 0 1
44673: PPUSH
44674: CALL_OW 437
44678: ST_TO_ADDR
// if task then
44679: LD_VAR 0 3
44683: IFFALSE 44711
// if task [ 1 ] [ 1 ] = p then
44685: LD_VAR 0 3
44689: PUSH
44690: LD_INT 1
44692: ARRAY
44693: PUSH
44694: LD_INT 1
44696: ARRAY
44697: PUSH
44698: LD_STRING p
44700: EQUAL
44701: IFFALSE 44711
// result := true ;
44703: LD_ADDR_VAR 0 2
44707: PUSH
44708: LD_INT 1
44710: ST_TO_ADDR
// end ;
44711: LD_VAR 0 2
44715: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
44716: LD_INT 0
44718: PPUSH
44719: PPUSH
44720: PPUSH
44721: PPUSH
// if pos < 1 then
44722: LD_VAR 0 2
44726: PUSH
44727: LD_INT 1
44729: LESS
44730: IFFALSE 44734
// exit ;
44732: GO 45037
// if pos = 1 then
44734: LD_VAR 0 2
44738: PUSH
44739: LD_INT 1
44741: EQUAL
44742: IFFALSE 44775
// result := Replace ( arr , pos [ 1 ] , value ) else
44744: LD_ADDR_VAR 0 4
44748: PUSH
44749: LD_VAR 0 1
44753: PPUSH
44754: LD_VAR 0 2
44758: PUSH
44759: LD_INT 1
44761: ARRAY
44762: PPUSH
44763: LD_VAR 0 3
44767: PPUSH
44768: CALL_OW 1
44772: ST_TO_ADDR
44773: GO 45037
// begin tmp := arr ;
44775: LD_ADDR_VAR 0 6
44779: PUSH
44780: LD_VAR 0 1
44784: ST_TO_ADDR
// s_arr := [ tmp ] ;
44785: LD_ADDR_VAR 0 7
44789: PUSH
44790: LD_VAR 0 6
44794: PUSH
44795: EMPTY
44796: LIST
44797: ST_TO_ADDR
// for i = 1 to pos - 1 do
44798: LD_ADDR_VAR 0 5
44802: PUSH
44803: DOUBLE
44804: LD_INT 1
44806: DEC
44807: ST_TO_ADDR
44808: LD_VAR 0 2
44812: PUSH
44813: LD_INT 1
44815: MINUS
44816: PUSH
44817: FOR_TO
44818: IFFALSE 44863
// begin tmp := tmp [ pos [ i ] ] ;
44820: LD_ADDR_VAR 0 6
44824: PUSH
44825: LD_VAR 0 6
44829: PUSH
44830: LD_VAR 0 2
44834: PUSH
44835: LD_VAR 0 5
44839: ARRAY
44840: ARRAY
44841: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
44842: LD_ADDR_VAR 0 7
44846: PUSH
44847: LD_VAR 0 7
44851: PUSH
44852: LD_VAR 0 6
44856: PUSH
44857: EMPTY
44858: LIST
44859: ADD
44860: ST_TO_ADDR
// end ;
44861: GO 44817
44863: POP
44864: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
44865: LD_ADDR_VAR 0 6
44869: PUSH
44870: LD_VAR 0 6
44874: PPUSH
44875: LD_VAR 0 2
44879: PUSH
44880: LD_VAR 0 2
44884: ARRAY
44885: PPUSH
44886: LD_VAR 0 3
44890: PPUSH
44891: CALL_OW 1
44895: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
44896: LD_ADDR_VAR 0 7
44900: PUSH
44901: LD_VAR 0 7
44905: PPUSH
44906: LD_VAR 0 7
44910: PPUSH
44911: LD_VAR 0 6
44915: PPUSH
44916: CALL_OW 1
44920: ST_TO_ADDR
// for i = s_arr downto 2 do
44921: LD_ADDR_VAR 0 5
44925: PUSH
44926: DOUBLE
44927: LD_VAR 0 7
44931: INC
44932: ST_TO_ADDR
44933: LD_INT 2
44935: PUSH
44936: FOR_DOWNTO
44937: IFFALSE 45021
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
44939: LD_ADDR_VAR 0 6
44943: PUSH
44944: LD_VAR 0 7
44948: PUSH
44949: LD_VAR 0 5
44953: PUSH
44954: LD_INT 1
44956: MINUS
44957: ARRAY
44958: PPUSH
44959: LD_VAR 0 2
44963: PUSH
44964: LD_VAR 0 5
44968: PUSH
44969: LD_INT 1
44971: MINUS
44972: ARRAY
44973: PPUSH
44974: LD_VAR 0 7
44978: PUSH
44979: LD_VAR 0 5
44983: ARRAY
44984: PPUSH
44985: CALL_OW 1
44989: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
44990: LD_ADDR_VAR 0 7
44994: PUSH
44995: LD_VAR 0 7
44999: PPUSH
45000: LD_VAR 0 5
45004: PUSH
45005: LD_INT 1
45007: MINUS
45008: PPUSH
45009: LD_VAR 0 6
45013: PPUSH
45014: CALL_OW 1
45018: ST_TO_ADDR
// end ;
45019: GO 44936
45021: POP
45022: POP
// result := s_arr [ 1 ] ;
45023: LD_ADDR_VAR 0 4
45027: PUSH
45028: LD_VAR 0 7
45032: PUSH
45033: LD_INT 1
45035: ARRAY
45036: ST_TO_ADDR
// end ; end ;
45037: LD_VAR 0 4
45041: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
45042: LD_INT 0
45044: PPUSH
45045: PPUSH
// if not list then
45046: LD_VAR 0 1
45050: NOT
45051: IFFALSE 45055
// exit ;
45053: GO 45146
// i := list [ pos1 ] ;
45055: LD_ADDR_VAR 0 5
45059: PUSH
45060: LD_VAR 0 1
45064: PUSH
45065: LD_VAR 0 2
45069: ARRAY
45070: ST_TO_ADDR
// if not i then
45071: LD_VAR 0 5
45075: NOT
45076: IFFALSE 45080
// exit ;
45078: GO 45146
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
45080: LD_ADDR_VAR 0 1
45084: PUSH
45085: LD_VAR 0 1
45089: PPUSH
45090: LD_VAR 0 2
45094: PPUSH
45095: LD_VAR 0 1
45099: PUSH
45100: LD_VAR 0 3
45104: ARRAY
45105: PPUSH
45106: CALL_OW 1
45110: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
45111: LD_ADDR_VAR 0 1
45115: PUSH
45116: LD_VAR 0 1
45120: PPUSH
45121: LD_VAR 0 3
45125: PPUSH
45126: LD_VAR 0 5
45130: PPUSH
45131: CALL_OW 1
45135: ST_TO_ADDR
// result := list ;
45136: LD_ADDR_VAR 0 4
45140: PUSH
45141: LD_VAR 0 1
45145: ST_TO_ADDR
// end ;
45146: LD_VAR 0 4
45150: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
45151: LD_INT 0
45153: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
45154: LD_ADDR_VAR 0 5
45158: PUSH
45159: LD_VAR 0 1
45163: PPUSH
45164: CALL_OW 250
45168: PPUSH
45169: LD_VAR 0 1
45173: PPUSH
45174: CALL_OW 251
45178: PPUSH
45179: LD_VAR 0 2
45183: PPUSH
45184: LD_VAR 0 3
45188: PPUSH
45189: LD_VAR 0 4
45193: PPUSH
45194: CALL 45204 0 5
45198: ST_TO_ADDR
// end ;
45199: LD_VAR 0 5
45203: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
45204: LD_INT 0
45206: PPUSH
45207: PPUSH
45208: PPUSH
45209: PPUSH
// if not list then
45210: LD_VAR 0 3
45214: NOT
45215: IFFALSE 45219
// exit ;
45217: GO 45607
// result := [ ] ;
45219: LD_ADDR_VAR 0 6
45223: PUSH
45224: EMPTY
45225: ST_TO_ADDR
// for i in list do
45226: LD_ADDR_VAR 0 7
45230: PUSH
45231: LD_VAR 0 3
45235: PUSH
45236: FOR_IN
45237: IFFALSE 45439
// begin tmp := GetDistUnitXY ( i , x , y ) ;
45239: LD_ADDR_VAR 0 9
45243: PUSH
45244: LD_VAR 0 7
45248: PPUSH
45249: LD_VAR 0 1
45253: PPUSH
45254: LD_VAR 0 2
45258: PPUSH
45259: CALL_OW 297
45263: ST_TO_ADDR
// if not result then
45264: LD_VAR 0 6
45268: NOT
45269: IFFALSE 45295
// result := [ [ i , tmp ] ] else
45271: LD_ADDR_VAR 0 6
45275: PUSH
45276: LD_VAR 0 7
45280: PUSH
45281: LD_VAR 0 9
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: EMPTY
45291: LIST
45292: ST_TO_ADDR
45293: GO 45437
// begin if result [ result ] [ 2 ] < tmp then
45295: LD_VAR 0 6
45299: PUSH
45300: LD_VAR 0 6
45304: ARRAY
45305: PUSH
45306: LD_INT 2
45308: ARRAY
45309: PUSH
45310: LD_VAR 0 9
45314: LESS
45315: IFFALSE 45357
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
45317: LD_ADDR_VAR 0 6
45321: PUSH
45322: LD_VAR 0 6
45326: PPUSH
45327: LD_VAR 0 6
45331: PUSH
45332: LD_INT 1
45334: PLUS
45335: PPUSH
45336: LD_VAR 0 7
45340: PUSH
45341: LD_VAR 0 9
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: PPUSH
45350: CALL_OW 2
45354: ST_TO_ADDR
45355: GO 45437
// for j = 1 to result do
45357: LD_ADDR_VAR 0 8
45361: PUSH
45362: DOUBLE
45363: LD_INT 1
45365: DEC
45366: ST_TO_ADDR
45367: LD_VAR 0 6
45371: PUSH
45372: FOR_TO
45373: IFFALSE 45435
// begin if tmp < result [ j ] [ 2 ] then
45375: LD_VAR 0 9
45379: PUSH
45380: LD_VAR 0 6
45384: PUSH
45385: LD_VAR 0 8
45389: ARRAY
45390: PUSH
45391: LD_INT 2
45393: ARRAY
45394: LESS
45395: IFFALSE 45433
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45397: LD_ADDR_VAR 0 6
45401: PUSH
45402: LD_VAR 0 6
45406: PPUSH
45407: LD_VAR 0 8
45411: PPUSH
45412: LD_VAR 0 7
45416: PUSH
45417: LD_VAR 0 9
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PPUSH
45426: CALL_OW 2
45430: ST_TO_ADDR
// break ;
45431: GO 45435
// end ; end ;
45433: GO 45372
45435: POP
45436: POP
// end ; end ;
45437: GO 45236
45439: POP
45440: POP
// if result and not asc then
45441: LD_VAR 0 6
45445: PUSH
45446: LD_VAR 0 4
45450: NOT
45451: AND
45452: IFFALSE 45527
// begin tmp := result ;
45454: LD_ADDR_VAR 0 9
45458: PUSH
45459: LD_VAR 0 6
45463: ST_TO_ADDR
// for i = tmp downto 1 do
45464: LD_ADDR_VAR 0 7
45468: PUSH
45469: DOUBLE
45470: LD_VAR 0 9
45474: INC
45475: ST_TO_ADDR
45476: LD_INT 1
45478: PUSH
45479: FOR_DOWNTO
45480: IFFALSE 45525
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
45482: LD_ADDR_VAR 0 6
45486: PUSH
45487: LD_VAR 0 6
45491: PPUSH
45492: LD_VAR 0 9
45496: PUSH
45497: LD_VAR 0 7
45501: MINUS
45502: PUSH
45503: LD_INT 1
45505: PLUS
45506: PPUSH
45507: LD_VAR 0 9
45511: PUSH
45512: LD_VAR 0 7
45516: ARRAY
45517: PPUSH
45518: CALL_OW 1
45522: ST_TO_ADDR
45523: GO 45479
45525: POP
45526: POP
// end ; tmp := [ ] ;
45527: LD_ADDR_VAR 0 9
45531: PUSH
45532: EMPTY
45533: ST_TO_ADDR
// if mode then
45534: LD_VAR 0 5
45538: IFFALSE 45607
// begin for i = 1 to result do
45540: LD_ADDR_VAR 0 7
45544: PUSH
45545: DOUBLE
45546: LD_INT 1
45548: DEC
45549: ST_TO_ADDR
45550: LD_VAR 0 6
45554: PUSH
45555: FOR_TO
45556: IFFALSE 45595
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
45558: LD_ADDR_VAR 0 9
45562: PUSH
45563: LD_VAR 0 9
45567: PPUSH
45568: LD_VAR 0 7
45572: PPUSH
45573: LD_VAR 0 6
45577: PUSH
45578: LD_VAR 0 7
45582: ARRAY
45583: PUSH
45584: LD_INT 1
45586: ARRAY
45587: PPUSH
45588: CALL_OW 1
45592: ST_TO_ADDR
45593: GO 45555
45595: POP
45596: POP
// result := tmp ;
45597: LD_ADDR_VAR 0 6
45601: PUSH
45602: LD_VAR 0 9
45606: ST_TO_ADDR
// end ; end ;
45607: LD_VAR 0 6
45611: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
45612: LD_INT 0
45614: PPUSH
45615: PPUSH
45616: PPUSH
45617: PPUSH
45618: PPUSH
45619: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
45620: LD_ADDR_VAR 0 5
45624: PUSH
45625: LD_INT 0
45627: PUSH
45628: LD_INT 0
45630: PUSH
45631: LD_INT 0
45633: PUSH
45634: EMPTY
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: LIST
45640: LIST
45641: ST_TO_ADDR
// if not x or not y then
45642: LD_VAR 0 2
45646: NOT
45647: PUSH
45648: LD_VAR 0 3
45652: NOT
45653: OR
45654: IFFALSE 45658
// exit ;
45656: GO 47308
// if not range then
45658: LD_VAR 0 4
45662: NOT
45663: IFFALSE 45673
// range := 10 ;
45665: LD_ADDR_VAR 0 4
45669: PUSH
45670: LD_INT 10
45672: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45673: LD_ADDR_VAR 0 8
45677: PUSH
45678: LD_INT 81
45680: PUSH
45681: LD_VAR 0 1
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: PUSH
45690: LD_INT 92
45692: PUSH
45693: LD_VAR 0 2
45697: PUSH
45698: LD_VAR 0 3
45702: PUSH
45703: LD_VAR 0 4
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: PUSH
45714: LD_INT 3
45716: PUSH
45717: LD_INT 21
45719: PUSH
45720: LD_INT 3
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: LIST
45735: PPUSH
45736: CALL_OW 69
45740: ST_TO_ADDR
// if not tmp then
45741: LD_VAR 0 8
45745: NOT
45746: IFFALSE 45750
// exit ;
45748: GO 47308
// for i in tmp do
45750: LD_ADDR_VAR 0 6
45754: PUSH
45755: LD_VAR 0 8
45759: PUSH
45760: FOR_IN
45761: IFFALSE 47283
// begin points := [ 0 , 0 , 0 ] ;
45763: LD_ADDR_VAR 0 9
45767: PUSH
45768: LD_INT 0
45770: PUSH
45771: LD_INT 0
45773: PUSH
45774: LD_INT 0
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: LIST
45781: ST_TO_ADDR
// bpoints := 1 ;
45782: LD_ADDR_VAR 0 10
45786: PUSH
45787: LD_INT 1
45789: ST_TO_ADDR
// case GetType ( i ) of unit_human :
45790: LD_VAR 0 6
45794: PPUSH
45795: CALL_OW 247
45799: PUSH
45800: LD_INT 1
45802: DOUBLE
45803: EQUAL
45804: IFTRUE 45808
45806: GO 46386
45808: POP
// begin if GetClass ( i ) = 1 then
45809: LD_VAR 0 6
45813: PPUSH
45814: CALL_OW 257
45818: PUSH
45819: LD_INT 1
45821: EQUAL
45822: IFFALSE 45843
// points := [ 10 , 5 , 3 ] ;
45824: LD_ADDR_VAR 0 9
45828: PUSH
45829: LD_INT 10
45831: PUSH
45832: LD_INT 5
45834: PUSH
45835: LD_INT 3
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: LIST
45842: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
45843: LD_VAR 0 6
45847: PPUSH
45848: CALL_OW 257
45852: PUSH
45853: LD_INT 2
45855: PUSH
45856: LD_INT 3
45858: PUSH
45859: LD_INT 4
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: LIST
45866: IN
45867: IFFALSE 45888
// points := [ 3 , 2 , 1 ] ;
45869: LD_ADDR_VAR 0 9
45873: PUSH
45874: LD_INT 3
45876: PUSH
45877: LD_INT 2
45879: PUSH
45880: LD_INT 1
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: LIST
45887: ST_TO_ADDR
// if GetClass ( i ) = 5 then
45888: LD_VAR 0 6
45892: PPUSH
45893: CALL_OW 257
45897: PUSH
45898: LD_INT 5
45900: EQUAL
45901: IFFALSE 45922
// points := [ 130 , 5 , 2 ] ;
45903: LD_ADDR_VAR 0 9
45907: PUSH
45908: LD_INT 130
45910: PUSH
45911: LD_INT 5
45913: PUSH
45914: LD_INT 2
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: LIST
45921: ST_TO_ADDR
// if GetClass ( i ) = 8 then
45922: LD_VAR 0 6
45926: PPUSH
45927: CALL_OW 257
45931: PUSH
45932: LD_INT 8
45934: EQUAL
45935: IFFALSE 45956
// points := [ 35 , 35 , 30 ] ;
45937: LD_ADDR_VAR 0 9
45941: PUSH
45942: LD_INT 35
45944: PUSH
45945: LD_INT 35
45947: PUSH
45948: LD_INT 30
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: LIST
45955: ST_TO_ADDR
// if GetClass ( i ) = 9 then
45956: LD_VAR 0 6
45960: PPUSH
45961: CALL_OW 257
45965: PUSH
45966: LD_INT 9
45968: EQUAL
45969: IFFALSE 45990
// points := [ 20 , 55 , 40 ] ;
45971: LD_ADDR_VAR 0 9
45975: PUSH
45976: LD_INT 20
45978: PUSH
45979: LD_INT 55
45981: PUSH
45982: LD_INT 40
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: LIST
45989: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
45990: LD_VAR 0 6
45994: PPUSH
45995: CALL_OW 257
45999: PUSH
46000: LD_INT 12
46002: PUSH
46003: LD_INT 16
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: IN
46010: IFFALSE 46031
// points := [ 5 , 3 , 2 ] ;
46012: LD_ADDR_VAR 0 9
46016: PUSH
46017: LD_INT 5
46019: PUSH
46020: LD_INT 3
46022: PUSH
46023: LD_INT 2
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: LIST
46030: ST_TO_ADDR
// if GetClass ( i ) = 17 then
46031: LD_VAR 0 6
46035: PPUSH
46036: CALL_OW 257
46040: PUSH
46041: LD_INT 17
46043: EQUAL
46044: IFFALSE 46065
// points := [ 100 , 50 , 75 ] ;
46046: LD_ADDR_VAR 0 9
46050: PUSH
46051: LD_INT 100
46053: PUSH
46054: LD_INT 50
46056: PUSH
46057: LD_INT 75
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: LIST
46064: ST_TO_ADDR
// if GetClass ( i ) = 15 then
46065: LD_VAR 0 6
46069: PPUSH
46070: CALL_OW 257
46074: PUSH
46075: LD_INT 15
46077: EQUAL
46078: IFFALSE 46099
// points := [ 10 , 5 , 3 ] ;
46080: LD_ADDR_VAR 0 9
46084: PUSH
46085: LD_INT 10
46087: PUSH
46088: LD_INT 5
46090: PUSH
46091: LD_INT 3
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: LIST
46098: ST_TO_ADDR
// if GetClass ( i ) = 14 then
46099: LD_VAR 0 6
46103: PPUSH
46104: CALL_OW 257
46108: PUSH
46109: LD_INT 14
46111: EQUAL
46112: IFFALSE 46133
// points := [ 10 , 0 , 0 ] ;
46114: LD_ADDR_VAR 0 9
46118: PUSH
46119: LD_INT 10
46121: PUSH
46122: LD_INT 0
46124: PUSH
46125: LD_INT 0
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: LIST
46132: ST_TO_ADDR
// if GetClass ( i ) = 11 then
46133: LD_VAR 0 6
46137: PPUSH
46138: CALL_OW 257
46142: PUSH
46143: LD_INT 11
46145: EQUAL
46146: IFFALSE 46167
// points := [ 30 , 10 , 5 ] ;
46148: LD_ADDR_VAR 0 9
46152: PUSH
46153: LD_INT 30
46155: PUSH
46156: LD_INT 10
46158: PUSH
46159: LD_INT 5
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: LIST
46166: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
46167: LD_VAR 0 1
46171: PPUSH
46172: LD_INT 5
46174: PPUSH
46175: CALL_OW 321
46179: PUSH
46180: LD_INT 2
46182: EQUAL
46183: IFFALSE 46200
// bpoints := bpoints * 1.8 ;
46185: LD_ADDR_VAR 0 10
46189: PUSH
46190: LD_VAR 0 10
46194: PUSH
46195: LD_REAL  1.80000000000000E+0000
46198: MUL
46199: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
46200: LD_VAR 0 6
46204: PPUSH
46205: CALL_OW 257
46209: PUSH
46210: LD_INT 1
46212: PUSH
46213: LD_INT 2
46215: PUSH
46216: LD_INT 3
46218: PUSH
46219: LD_INT 4
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: LIST
46226: LIST
46227: IN
46228: PUSH
46229: LD_VAR 0 1
46233: PPUSH
46234: LD_INT 51
46236: PPUSH
46237: CALL_OW 321
46241: PUSH
46242: LD_INT 2
46244: EQUAL
46245: AND
46246: IFFALSE 46263
// bpoints := bpoints * 1.2 ;
46248: LD_ADDR_VAR 0 10
46252: PUSH
46253: LD_VAR 0 10
46257: PUSH
46258: LD_REAL  1.20000000000000E+0000
46261: MUL
46262: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
46263: LD_VAR 0 6
46267: PPUSH
46268: CALL_OW 257
46272: PUSH
46273: LD_INT 5
46275: PUSH
46276: LD_INT 7
46278: PUSH
46279: LD_INT 9
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: LIST
46286: IN
46287: PUSH
46288: LD_VAR 0 1
46292: PPUSH
46293: LD_INT 52
46295: PPUSH
46296: CALL_OW 321
46300: PUSH
46301: LD_INT 2
46303: EQUAL
46304: AND
46305: IFFALSE 46322
// bpoints := bpoints * 1.5 ;
46307: LD_ADDR_VAR 0 10
46311: PUSH
46312: LD_VAR 0 10
46316: PUSH
46317: LD_REAL  1.50000000000000E+0000
46320: MUL
46321: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
46322: LD_VAR 0 1
46326: PPUSH
46327: LD_INT 66
46329: PPUSH
46330: CALL_OW 321
46334: PUSH
46335: LD_INT 2
46337: EQUAL
46338: IFFALSE 46355
// bpoints := bpoints * 1.1 ;
46340: LD_ADDR_VAR 0 10
46344: PUSH
46345: LD_VAR 0 10
46349: PUSH
46350: LD_REAL  1.10000000000000E+0000
46353: MUL
46354: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
46355: LD_ADDR_VAR 0 10
46359: PUSH
46360: LD_VAR 0 10
46364: PUSH
46365: LD_VAR 0 6
46369: PPUSH
46370: LD_INT 1
46372: PPUSH
46373: CALL_OW 259
46377: PUSH
46378: LD_REAL  1.15000000000000E+0000
46381: MUL
46382: MUL
46383: ST_TO_ADDR
// end ; unit_vehicle :
46384: GO 47212
46386: LD_INT 2
46388: DOUBLE
46389: EQUAL
46390: IFTRUE 46394
46392: GO 47200
46394: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
46395: LD_VAR 0 6
46399: PPUSH
46400: CALL_OW 264
46404: PUSH
46405: LD_INT 2
46407: PUSH
46408: LD_INT 42
46410: PUSH
46411: LD_INT 24
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: LIST
46418: IN
46419: IFFALSE 46440
// points := [ 25 , 5 , 3 ] ;
46421: LD_ADDR_VAR 0 9
46425: PUSH
46426: LD_INT 25
46428: PUSH
46429: LD_INT 5
46431: PUSH
46432: LD_INT 3
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: LIST
46439: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
46440: LD_VAR 0 6
46444: PPUSH
46445: CALL_OW 264
46449: PUSH
46450: LD_INT 4
46452: PUSH
46453: LD_INT 43
46455: PUSH
46456: LD_INT 25
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: LIST
46463: IN
46464: IFFALSE 46485
// points := [ 40 , 15 , 5 ] ;
46466: LD_ADDR_VAR 0 9
46470: PUSH
46471: LD_INT 40
46473: PUSH
46474: LD_INT 15
46476: PUSH
46477: LD_INT 5
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: LIST
46484: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
46485: LD_VAR 0 6
46489: PPUSH
46490: CALL_OW 264
46494: PUSH
46495: LD_INT 3
46497: PUSH
46498: LD_INT 23
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: IN
46505: IFFALSE 46526
// points := [ 7 , 25 , 8 ] ;
46507: LD_ADDR_VAR 0 9
46511: PUSH
46512: LD_INT 7
46514: PUSH
46515: LD_INT 25
46517: PUSH
46518: LD_INT 8
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: LIST
46525: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
46526: LD_VAR 0 6
46530: PPUSH
46531: CALL_OW 264
46535: PUSH
46536: LD_INT 5
46538: PUSH
46539: LD_INT 27
46541: PUSH
46542: LD_INT 44
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: LIST
46549: IN
46550: IFFALSE 46571
// points := [ 14 , 50 , 16 ] ;
46552: LD_ADDR_VAR 0 9
46556: PUSH
46557: LD_INT 14
46559: PUSH
46560: LD_INT 50
46562: PUSH
46563: LD_INT 16
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: LIST
46570: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
46571: LD_VAR 0 6
46575: PPUSH
46576: CALL_OW 264
46580: PUSH
46581: LD_INT 6
46583: PUSH
46584: LD_INT 46
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: IN
46591: IFFALSE 46612
// points := [ 32 , 120 , 70 ] ;
46593: LD_ADDR_VAR 0 9
46597: PUSH
46598: LD_INT 32
46600: PUSH
46601: LD_INT 120
46603: PUSH
46604: LD_INT 70
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: LIST
46611: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
46612: LD_VAR 0 6
46616: PPUSH
46617: CALL_OW 264
46621: PUSH
46622: LD_INT 7
46624: PUSH
46625: LD_INT 28
46627: PUSH
46628: LD_INT 45
46630: PUSH
46631: LD_INT 92
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: LIST
46638: LIST
46639: IN
46640: IFFALSE 46661
// points := [ 35 , 20 , 45 ] ;
46642: LD_ADDR_VAR 0 9
46646: PUSH
46647: LD_INT 35
46649: PUSH
46650: LD_INT 20
46652: PUSH
46653: LD_INT 45
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: LIST
46660: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
46661: LD_VAR 0 6
46665: PPUSH
46666: CALL_OW 264
46670: PUSH
46671: LD_INT 47
46673: PUSH
46674: EMPTY
46675: LIST
46676: IN
46677: IFFALSE 46698
// points := [ 67 , 45 , 75 ] ;
46679: LD_ADDR_VAR 0 9
46683: PUSH
46684: LD_INT 67
46686: PUSH
46687: LD_INT 45
46689: PUSH
46690: LD_INT 75
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: LIST
46697: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
46698: LD_VAR 0 6
46702: PPUSH
46703: CALL_OW 264
46707: PUSH
46708: LD_INT 26
46710: PUSH
46711: EMPTY
46712: LIST
46713: IN
46714: IFFALSE 46735
// points := [ 120 , 30 , 80 ] ;
46716: LD_ADDR_VAR 0 9
46720: PUSH
46721: LD_INT 120
46723: PUSH
46724: LD_INT 30
46726: PUSH
46727: LD_INT 80
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: LIST
46734: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
46735: LD_VAR 0 6
46739: PPUSH
46740: CALL_OW 264
46744: PUSH
46745: LD_INT 22
46747: PUSH
46748: EMPTY
46749: LIST
46750: IN
46751: IFFALSE 46772
// points := [ 40 , 1 , 1 ] ;
46753: LD_ADDR_VAR 0 9
46757: PUSH
46758: LD_INT 40
46760: PUSH
46761: LD_INT 1
46763: PUSH
46764: LD_INT 1
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: LIST
46771: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
46772: LD_VAR 0 6
46776: PPUSH
46777: CALL_OW 264
46781: PUSH
46782: LD_INT 29
46784: PUSH
46785: EMPTY
46786: LIST
46787: IN
46788: IFFALSE 46809
// points := [ 70 , 200 , 400 ] ;
46790: LD_ADDR_VAR 0 9
46794: PUSH
46795: LD_INT 70
46797: PUSH
46798: LD_INT 200
46800: PUSH
46801: LD_INT 400
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: LIST
46808: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
46809: LD_VAR 0 6
46813: PPUSH
46814: CALL_OW 264
46818: PUSH
46819: LD_INT 14
46821: PUSH
46822: LD_INT 53
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: IN
46829: IFFALSE 46850
// points := [ 40 , 10 , 20 ] ;
46831: LD_ADDR_VAR 0 9
46835: PUSH
46836: LD_INT 40
46838: PUSH
46839: LD_INT 10
46841: PUSH
46842: LD_INT 20
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: LIST
46849: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
46850: LD_VAR 0 6
46854: PPUSH
46855: CALL_OW 264
46859: PUSH
46860: LD_INT 9
46862: PUSH
46863: EMPTY
46864: LIST
46865: IN
46866: IFFALSE 46887
// points := [ 5 , 70 , 20 ] ;
46868: LD_ADDR_VAR 0 9
46872: PUSH
46873: LD_INT 5
46875: PUSH
46876: LD_INT 70
46878: PUSH
46879: LD_INT 20
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: LIST
46886: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
46887: LD_VAR 0 6
46891: PPUSH
46892: CALL_OW 264
46896: PUSH
46897: LD_INT 10
46899: PUSH
46900: EMPTY
46901: LIST
46902: IN
46903: IFFALSE 46924
// points := [ 35 , 110 , 70 ] ;
46905: LD_ADDR_VAR 0 9
46909: PUSH
46910: LD_INT 35
46912: PUSH
46913: LD_INT 110
46915: PUSH
46916: LD_INT 70
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: LIST
46923: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
46924: LD_VAR 0 6
46928: PPUSH
46929: CALL_OW 265
46933: PUSH
46934: LD_INT 25
46936: EQUAL
46937: IFFALSE 46958
// points := [ 80 , 65 , 100 ] ;
46939: LD_ADDR_VAR 0 9
46943: PUSH
46944: LD_INT 80
46946: PUSH
46947: LD_INT 65
46949: PUSH
46950: LD_INT 100
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: LIST
46957: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
46958: LD_VAR 0 6
46962: PPUSH
46963: CALL_OW 263
46967: PUSH
46968: LD_INT 1
46970: EQUAL
46971: IFFALSE 47006
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
46973: LD_ADDR_VAR 0 10
46977: PUSH
46978: LD_VAR 0 10
46982: PUSH
46983: LD_VAR 0 6
46987: PPUSH
46988: CALL_OW 311
46992: PPUSH
46993: LD_INT 3
46995: PPUSH
46996: CALL_OW 259
47000: PUSH
47001: LD_INT 4
47003: MUL
47004: MUL
47005: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
47006: LD_VAR 0 6
47010: PPUSH
47011: CALL_OW 263
47015: PUSH
47016: LD_INT 2
47018: EQUAL
47019: IFFALSE 47070
// begin j := IsControledBy ( i ) ;
47021: LD_ADDR_VAR 0 7
47025: PUSH
47026: LD_VAR 0 6
47030: PPUSH
47031: CALL_OW 312
47035: ST_TO_ADDR
// if j then
47036: LD_VAR 0 7
47040: IFFALSE 47070
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
47042: LD_ADDR_VAR 0 10
47046: PUSH
47047: LD_VAR 0 10
47051: PUSH
47052: LD_VAR 0 7
47056: PPUSH
47057: LD_INT 3
47059: PPUSH
47060: CALL_OW 259
47064: PUSH
47065: LD_INT 3
47067: MUL
47068: MUL
47069: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
47070: LD_VAR 0 6
47074: PPUSH
47075: CALL_OW 264
47079: PUSH
47080: LD_INT 5
47082: PUSH
47083: LD_INT 6
47085: PUSH
47086: LD_INT 46
47088: PUSH
47089: LD_INT 44
47091: PUSH
47092: LD_INT 47
47094: PUSH
47095: LD_INT 45
47097: PUSH
47098: LD_INT 28
47100: PUSH
47101: LD_INT 7
47103: PUSH
47104: LD_INT 27
47106: PUSH
47107: LD_INT 29
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: LIST
47114: LIST
47115: LIST
47116: LIST
47117: LIST
47118: LIST
47119: LIST
47120: LIST
47121: IN
47122: PUSH
47123: LD_VAR 0 1
47127: PPUSH
47128: LD_INT 52
47130: PPUSH
47131: CALL_OW 321
47135: PUSH
47136: LD_INT 2
47138: EQUAL
47139: AND
47140: IFFALSE 47157
// bpoints := bpoints * 1.2 ;
47142: LD_ADDR_VAR 0 10
47146: PUSH
47147: LD_VAR 0 10
47151: PUSH
47152: LD_REAL  1.20000000000000E+0000
47155: MUL
47156: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
47157: LD_VAR 0 6
47161: PPUSH
47162: CALL_OW 264
47166: PUSH
47167: LD_INT 6
47169: PUSH
47170: LD_INT 46
47172: PUSH
47173: LD_INT 47
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: LIST
47180: IN
47181: IFFALSE 47198
// bpoints := bpoints * 1.2 ;
47183: LD_ADDR_VAR 0 10
47187: PUSH
47188: LD_VAR 0 10
47192: PUSH
47193: LD_REAL  1.20000000000000E+0000
47196: MUL
47197: ST_TO_ADDR
// end ; unit_building :
47198: GO 47212
47200: LD_INT 3
47202: DOUBLE
47203: EQUAL
47204: IFTRUE 47208
47206: GO 47211
47208: POP
// ; end ;
47209: GO 47212
47211: POP
// for j = 1 to 3 do
47212: LD_ADDR_VAR 0 7
47216: PUSH
47217: DOUBLE
47218: LD_INT 1
47220: DEC
47221: ST_TO_ADDR
47222: LD_INT 3
47224: PUSH
47225: FOR_TO
47226: IFFALSE 47279
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
47228: LD_ADDR_VAR 0 5
47232: PUSH
47233: LD_VAR 0 5
47237: PPUSH
47238: LD_VAR 0 7
47242: PPUSH
47243: LD_VAR 0 5
47247: PUSH
47248: LD_VAR 0 7
47252: ARRAY
47253: PUSH
47254: LD_VAR 0 9
47258: PUSH
47259: LD_VAR 0 7
47263: ARRAY
47264: PUSH
47265: LD_VAR 0 10
47269: MUL
47270: PLUS
47271: PPUSH
47272: CALL_OW 1
47276: ST_TO_ADDR
47277: GO 47225
47279: POP
47280: POP
// end ;
47281: GO 45760
47283: POP
47284: POP
// result := Replace ( result , 4 , tmp ) ;
47285: LD_ADDR_VAR 0 5
47289: PUSH
47290: LD_VAR 0 5
47294: PPUSH
47295: LD_INT 4
47297: PPUSH
47298: LD_VAR 0 8
47302: PPUSH
47303: CALL_OW 1
47307: ST_TO_ADDR
// end ;
47308: LD_VAR 0 5
47312: RET
// export function DangerAtRange ( unit , range ) ; begin
47313: LD_INT 0
47315: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
47316: LD_ADDR_VAR 0 3
47320: PUSH
47321: LD_VAR 0 1
47325: PPUSH
47326: CALL_OW 255
47330: PPUSH
47331: LD_VAR 0 1
47335: PPUSH
47336: CALL_OW 250
47340: PPUSH
47341: LD_VAR 0 1
47345: PPUSH
47346: CALL_OW 251
47350: PPUSH
47351: LD_VAR 0 2
47355: PPUSH
47356: CALL 45612 0 4
47360: ST_TO_ADDR
// end ;
47361: LD_VAR 0 3
47365: RET
// export function DangerInArea ( side , area ) ; begin
47366: LD_INT 0
47368: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
47369: LD_ADDR_VAR 0 3
47373: PUSH
47374: LD_VAR 0 2
47378: PPUSH
47379: LD_INT 81
47381: PUSH
47382: LD_VAR 0 1
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PPUSH
47391: CALL_OW 70
47395: ST_TO_ADDR
// end ;
47396: LD_VAR 0 3
47400: RET
// export function IsExtension ( b ) ; begin
47401: LD_INT 0
47403: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
47404: LD_ADDR_VAR 0 2
47408: PUSH
47409: LD_VAR 0 1
47413: PUSH
47414: LD_INT 23
47416: PUSH
47417: LD_INT 20
47419: PUSH
47420: LD_INT 22
47422: PUSH
47423: LD_INT 17
47425: PUSH
47426: LD_INT 24
47428: PUSH
47429: LD_INT 21
47431: PUSH
47432: LD_INT 19
47434: PUSH
47435: LD_INT 16
47437: PUSH
47438: LD_INT 25
47440: PUSH
47441: LD_INT 18
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: IN
47456: ST_TO_ADDR
// end ;
47457: LD_VAR 0 2
47461: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
47462: LD_INT 0
47464: PPUSH
47465: PPUSH
47466: PPUSH
// result := [ ] ;
47467: LD_ADDR_VAR 0 4
47471: PUSH
47472: EMPTY
47473: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
47474: LD_ADDR_VAR 0 5
47478: PUSH
47479: LD_VAR 0 2
47483: PPUSH
47484: LD_INT 21
47486: PUSH
47487: LD_INT 3
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PPUSH
47494: CALL_OW 70
47498: ST_TO_ADDR
// if not tmp then
47499: LD_VAR 0 5
47503: NOT
47504: IFFALSE 47508
// exit ;
47506: GO 47572
// if checkLink then
47508: LD_VAR 0 3
47512: IFFALSE 47562
// begin for i in tmp do
47514: LD_ADDR_VAR 0 6
47518: PUSH
47519: LD_VAR 0 5
47523: PUSH
47524: FOR_IN
47525: IFFALSE 47560
// if GetBase ( i ) <> base then
47527: LD_VAR 0 6
47531: PPUSH
47532: CALL_OW 274
47536: PUSH
47537: LD_VAR 0 1
47541: NONEQUAL
47542: IFFALSE 47558
// ComLinkToBase ( base , i ) ;
47544: LD_VAR 0 1
47548: PPUSH
47549: LD_VAR 0 6
47553: PPUSH
47554: CALL_OW 169
47558: GO 47524
47560: POP
47561: POP
// end ; result := tmp ;
47562: LD_ADDR_VAR 0 4
47566: PUSH
47567: LD_VAR 0 5
47571: ST_TO_ADDR
// end ;
47572: LD_VAR 0 4
47576: RET
// export function ComComplete ( units , b ) ; var i ; begin
47577: LD_INT 0
47579: PPUSH
47580: PPUSH
// if not units then
47581: LD_VAR 0 1
47585: NOT
47586: IFFALSE 47590
// exit ;
47588: GO 47680
// for i in units do
47590: LD_ADDR_VAR 0 4
47594: PUSH
47595: LD_VAR 0 1
47599: PUSH
47600: FOR_IN
47601: IFFALSE 47678
// if BuildingStatus ( b ) = bs_build then
47603: LD_VAR 0 2
47607: PPUSH
47608: CALL_OW 461
47612: PUSH
47613: LD_INT 1
47615: EQUAL
47616: IFFALSE 47676
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
47618: LD_VAR 0 4
47622: PPUSH
47623: LD_STRING h
47625: PUSH
47626: LD_VAR 0 2
47630: PPUSH
47631: CALL_OW 250
47635: PUSH
47636: LD_VAR 0 2
47640: PPUSH
47641: CALL_OW 251
47645: PUSH
47646: LD_VAR 0 2
47650: PUSH
47651: LD_INT 0
47653: PUSH
47654: LD_INT 0
47656: PUSH
47657: LD_INT 0
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: LIST
47664: LIST
47665: LIST
47666: LIST
47667: LIST
47668: PUSH
47669: EMPTY
47670: LIST
47671: PPUSH
47672: CALL_OW 446
47676: GO 47600
47678: POP
47679: POP
// end ;
47680: LD_VAR 0 3
47684: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
47685: LD_INT 0
47687: PPUSH
47688: PPUSH
47689: PPUSH
47690: PPUSH
47691: PPUSH
47692: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
47693: LD_VAR 0 1
47697: NOT
47698: PUSH
47699: LD_VAR 0 1
47703: PPUSH
47704: CALL_OW 263
47708: PUSH
47709: LD_INT 2
47711: NONEQUAL
47712: OR
47713: IFFALSE 47717
// exit ;
47715: GO 48033
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
47717: LD_ADDR_VAR 0 6
47721: PUSH
47722: LD_INT 22
47724: PUSH
47725: LD_VAR 0 1
47729: PPUSH
47730: CALL_OW 255
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: LD_INT 2
47741: PUSH
47742: LD_INT 30
47744: PUSH
47745: LD_INT 36
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: PUSH
47752: LD_INT 34
47754: PUSH
47755: LD_INT 31
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: LIST
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PPUSH
47771: CALL_OW 69
47775: ST_TO_ADDR
// if not tmp then
47776: LD_VAR 0 6
47780: NOT
47781: IFFALSE 47785
// exit ;
47783: GO 48033
// result := [ ] ;
47785: LD_ADDR_VAR 0 2
47789: PUSH
47790: EMPTY
47791: ST_TO_ADDR
// for i in tmp do
47792: LD_ADDR_VAR 0 3
47796: PUSH
47797: LD_VAR 0 6
47801: PUSH
47802: FOR_IN
47803: IFFALSE 47874
// begin t := UnitsInside ( i ) ;
47805: LD_ADDR_VAR 0 4
47809: PUSH
47810: LD_VAR 0 3
47814: PPUSH
47815: CALL_OW 313
47819: ST_TO_ADDR
// if t then
47820: LD_VAR 0 4
47824: IFFALSE 47872
// for j in t do
47826: LD_ADDR_VAR 0 7
47830: PUSH
47831: LD_VAR 0 4
47835: PUSH
47836: FOR_IN
47837: IFFALSE 47870
// result := Replace ( result , result + 1 , j ) ;
47839: LD_ADDR_VAR 0 2
47843: PUSH
47844: LD_VAR 0 2
47848: PPUSH
47849: LD_VAR 0 2
47853: PUSH
47854: LD_INT 1
47856: PLUS
47857: PPUSH
47858: LD_VAR 0 7
47862: PPUSH
47863: CALL_OW 1
47867: ST_TO_ADDR
47868: GO 47836
47870: POP
47871: POP
// end ;
47872: GO 47802
47874: POP
47875: POP
// if not result then
47876: LD_VAR 0 2
47880: NOT
47881: IFFALSE 47885
// exit ;
47883: GO 48033
// mech := result [ 1 ] ;
47885: LD_ADDR_VAR 0 5
47889: PUSH
47890: LD_VAR 0 2
47894: PUSH
47895: LD_INT 1
47897: ARRAY
47898: ST_TO_ADDR
// if result > 1 then
47899: LD_VAR 0 2
47903: PUSH
47904: LD_INT 1
47906: GREATER
47907: IFFALSE 48019
// begin for i = 2 to result do
47909: LD_ADDR_VAR 0 3
47913: PUSH
47914: DOUBLE
47915: LD_INT 2
47917: DEC
47918: ST_TO_ADDR
47919: LD_VAR 0 2
47923: PUSH
47924: FOR_TO
47925: IFFALSE 48017
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
47927: LD_ADDR_VAR 0 4
47931: PUSH
47932: LD_VAR 0 2
47936: PUSH
47937: LD_VAR 0 3
47941: ARRAY
47942: PPUSH
47943: LD_INT 3
47945: PPUSH
47946: CALL_OW 259
47950: PUSH
47951: LD_VAR 0 2
47955: PUSH
47956: LD_VAR 0 3
47960: ARRAY
47961: PPUSH
47962: CALL_OW 432
47966: MINUS
47967: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
47968: LD_VAR 0 4
47972: PUSH
47973: LD_VAR 0 5
47977: PPUSH
47978: LD_INT 3
47980: PPUSH
47981: CALL_OW 259
47985: PUSH
47986: LD_VAR 0 5
47990: PPUSH
47991: CALL_OW 432
47995: MINUS
47996: GREATEREQUAL
47997: IFFALSE 48015
// mech := result [ i ] ;
47999: LD_ADDR_VAR 0 5
48003: PUSH
48004: LD_VAR 0 2
48008: PUSH
48009: LD_VAR 0 3
48013: ARRAY
48014: ST_TO_ADDR
// end ;
48015: GO 47924
48017: POP
48018: POP
// end ; ComLinkTo ( vehicle , mech ) ;
48019: LD_VAR 0 1
48023: PPUSH
48024: LD_VAR 0 5
48028: PPUSH
48029: CALL_OW 135
// end ;
48033: LD_VAR 0 2
48037: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
48038: LD_INT 0
48040: PPUSH
48041: PPUSH
48042: PPUSH
48043: PPUSH
48044: PPUSH
48045: PPUSH
48046: PPUSH
48047: PPUSH
48048: PPUSH
48049: PPUSH
48050: PPUSH
48051: PPUSH
48052: PPUSH
// result := [ ] ;
48053: LD_ADDR_VAR 0 7
48057: PUSH
48058: EMPTY
48059: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
48060: LD_VAR 0 1
48064: PPUSH
48065: CALL_OW 266
48069: PUSH
48070: LD_INT 0
48072: PUSH
48073: LD_INT 1
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: IN
48080: NOT
48081: IFFALSE 48085
// exit ;
48083: GO 49719
// if name then
48085: LD_VAR 0 3
48089: IFFALSE 48105
// SetBName ( base_dep , name ) ;
48091: LD_VAR 0 1
48095: PPUSH
48096: LD_VAR 0 3
48100: PPUSH
48101: CALL_OW 500
// base := GetBase ( base_dep ) ;
48105: LD_ADDR_VAR 0 15
48109: PUSH
48110: LD_VAR 0 1
48114: PPUSH
48115: CALL_OW 274
48119: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
48120: LD_ADDR_VAR 0 16
48124: PUSH
48125: LD_VAR 0 1
48129: PPUSH
48130: CALL_OW 255
48134: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
48135: LD_ADDR_VAR 0 17
48139: PUSH
48140: LD_VAR 0 1
48144: PPUSH
48145: CALL_OW 248
48149: ST_TO_ADDR
// if sources then
48150: LD_VAR 0 5
48154: IFFALSE 48201
// for i = 1 to 3 do
48156: LD_ADDR_VAR 0 8
48160: PUSH
48161: DOUBLE
48162: LD_INT 1
48164: DEC
48165: ST_TO_ADDR
48166: LD_INT 3
48168: PUSH
48169: FOR_TO
48170: IFFALSE 48199
// AddResourceType ( base , i , sources [ i ] ) ;
48172: LD_VAR 0 15
48176: PPUSH
48177: LD_VAR 0 8
48181: PPUSH
48182: LD_VAR 0 5
48186: PUSH
48187: LD_VAR 0 8
48191: ARRAY
48192: PPUSH
48193: CALL_OW 276
48197: GO 48169
48199: POP
48200: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
48201: LD_ADDR_VAR 0 18
48205: PUSH
48206: LD_VAR 0 15
48210: PPUSH
48211: LD_VAR 0 2
48215: PPUSH
48216: LD_INT 1
48218: PPUSH
48219: CALL 47462 0 3
48223: ST_TO_ADDR
// InitHc ;
48224: CALL_OW 19
// InitUc ;
48228: CALL_OW 18
// uc_side := side ;
48232: LD_ADDR_OWVAR 20
48236: PUSH
48237: LD_VAR 0 16
48241: ST_TO_ADDR
// uc_nation := nation ;
48242: LD_ADDR_OWVAR 21
48246: PUSH
48247: LD_VAR 0 17
48251: ST_TO_ADDR
// if buildings then
48252: LD_VAR 0 18
48256: IFFALSE 49578
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
48258: LD_ADDR_VAR 0 19
48262: PUSH
48263: LD_VAR 0 18
48267: PPUSH
48268: LD_INT 2
48270: PUSH
48271: LD_INT 30
48273: PUSH
48274: LD_INT 29
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 30
48283: PUSH
48284: LD_INT 30
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: LIST
48295: PPUSH
48296: CALL_OW 72
48300: ST_TO_ADDR
// if tmp then
48301: LD_VAR 0 19
48305: IFFALSE 48353
// for i in tmp do
48307: LD_ADDR_VAR 0 8
48311: PUSH
48312: LD_VAR 0 19
48316: PUSH
48317: FOR_IN
48318: IFFALSE 48351
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
48320: LD_VAR 0 8
48324: PPUSH
48325: CALL_OW 250
48329: PPUSH
48330: LD_VAR 0 8
48334: PPUSH
48335: CALL_OW 251
48339: PPUSH
48340: LD_VAR 0 16
48344: PPUSH
48345: CALL_OW 441
48349: GO 48317
48351: POP
48352: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
48353: LD_VAR 0 18
48357: PPUSH
48358: LD_INT 2
48360: PUSH
48361: LD_INT 30
48363: PUSH
48364: LD_INT 32
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 30
48373: PUSH
48374: LD_INT 33
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: LIST
48385: PPUSH
48386: CALL_OW 72
48390: IFFALSE 48478
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
48392: LD_ADDR_VAR 0 8
48396: PUSH
48397: LD_VAR 0 18
48401: PPUSH
48402: LD_INT 2
48404: PUSH
48405: LD_INT 30
48407: PUSH
48408: LD_INT 32
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 30
48417: PUSH
48418: LD_INT 33
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: LIST
48429: PPUSH
48430: CALL_OW 72
48434: PUSH
48435: FOR_IN
48436: IFFALSE 48476
// begin if not GetBWeapon ( i ) then
48438: LD_VAR 0 8
48442: PPUSH
48443: CALL_OW 269
48447: NOT
48448: IFFALSE 48474
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
48450: LD_VAR 0 8
48454: PPUSH
48455: LD_VAR 0 8
48459: PPUSH
48460: LD_VAR 0 2
48464: PPUSH
48465: CALL 49724 0 2
48469: PPUSH
48470: CALL_OW 431
// end ;
48474: GO 48435
48476: POP
48477: POP
// end ; for i = 1 to personel do
48478: LD_ADDR_VAR 0 8
48482: PUSH
48483: DOUBLE
48484: LD_INT 1
48486: DEC
48487: ST_TO_ADDR
48488: LD_VAR 0 6
48492: PUSH
48493: FOR_TO
48494: IFFALSE 49558
// begin if i > 4 then
48496: LD_VAR 0 8
48500: PUSH
48501: LD_INT 4
48503: GREATER
48504: IFFALSE 48508
// break ;
48506: GO 49558
// case i of 1 :
48508: LD_VAR 0 8
48512: PUSH
48513: LD_INT 1
48515: DOUBLE
48516: EQUAL
48517: IFTRUE 48521
48519: GO 48601
48521: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
48522: LD_ADDR_VAR 0 12
48526: PUSH
48527: LD_VAR 0 18
48531: PPUSH
48532: LD_INT 22
48534: PUSH
48535: LD_VAR 0 16
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PUSH
48544: LD_INT 58
48546: PUSH
48547: EMPTY
48548: LIST
48549: PUSH
48550: LD_INT 2
48552: PUSH
48553: LD_INT 30
48555: PUSH
48556: LD_INT 32
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 30
48565: PUSH
48566: LD_INT 4
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 30
48575: PUSH
48576: LD_INT 5
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: LIST
48587: LIST
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: LIST
48593: PPUSH
48594: CALL_OW 72
48598: ST_TO_ADDR
48599: GO 48823
48601: LD_INT 2
48603: DOUBLE
48604: EQUAL
48605: IFTRUE 48609
48607: GO 48671
48609: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
48610: LD_ADDR_VAR 0 12
48614: PUSH
48615: LD_VAR 0 18
48619: PPUSH
48620: LD_INT 22
48622: PUSH
48623: LD_VAR 0 16
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: PUSH
48632: LD_INT 2
48634: PUSH
48635: LD_INT 30
48637: PUSH
48638: LD_INT 0
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: LD_INT 30
48647: PUSH
48648: LD_INT 1
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: LIST
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PPUSH
48664: CALL_OW 72
48668: ST_TO_ADDR
48669: GO 48823
48671: LD_INT 3
48673: DOUBLE
48674: EQUAL
48675: IFTRUE 48679
48677: GO 48741
48679: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
48680: LD_ADDR_VAR 0 12
48684: PUSH
48685: LD_VAR 0 18
48689: PPUSH
48690: LD_INT 22
48692: PUSH
48693: LD_VAR 0 16
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 2
48704: PUSH
48705: LD_INT 30
48707: PUSH
48708: LD_INT 2
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: PUSH
48715: LD_INT 30
48717: PUSH
48718: LD_INT 3
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: LIST
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PPUSH
48734: CALL_OW 72
48738: ST_TO_ADDR
48739: GO 48823
48741: LD_INT 4
48743: DOUBLE
48744: EQUAL
48745: IFTRUE 48749
48747: GO 48822
48749: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
48750: LD_ADDR_VAR 0 12
48754: PUSH
48755: LD_VAR 0 18
48759: PPUSH
48760: LD_INT 22
48762: PUSH
48763: LD_VAR 0 16
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 2
48774: PUSH
48775: LD_INT 30
48777: PUSH
48778: LD_INT 6
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: LD_INT 30
48787: PUSH
48788: LD_INT 7
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: LD_INT 30
48797: PUSH
48798: LD_INT 8
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PPUSH
48815: CALL_OW 72
48819: ST_TO_ADDR
48820: GO 48823
48822: POP
// if i = 1 then
48823: LD_VAR 0 8
48827: PUSH
48828: LD_INT 1
48830: EQUAL
48831: IFFALSE 48942
// begin tmp := [ ] ;
48833: LD_ADDR_VAR 0 19
48837: PUSH
48838: EMPTY
48839: ST_TO_ADDR
// for j in f do
48840: LD_ADDR_VAR 0 9
48844: PUSH
48845: LD_VAR 0 12
48849: PUSH
48850: FOR_IN
48851: IFFALSE 48924
// if GetBType ( j ) = b_bunker then
48853: LD_VAR 0 9
48857: PPUSH
48858: CALL_OW 266
48862: PUSH
48863: LD_INT 32
48865: EQUAL
48866: IFFALSE 48893
// tmp := Insert ( tmp , 1 , j ) else
48868: LD_ADDR_VAR 0 19
48872: PUSH
48873: LD_VAR 0 19
48877: PPUSH
48878: LD_INT 1
48880: PPUSH
48881: LD_VAR 0 9
48885: PPUSH
48886: CALL_OW 2
48890: ST_TO_ADDR
48891: GO 48922
// tmp := Insert ( tmp , tmp + 1 , j ) ;
48893: LD_ADDR_VAR 0 19
48897: PUSH
48898: LD_VAR 0 19
48902: PPUSH
48903: LD_VAR 0 19
48907: PUSH
48908: LD_INT 1
48910: PLUS
48911: PPUSH
48912: LD_VAR 0 9
48916: PPUSH
48917: CALL_OW 2
48921: ST_TO_ADDR
48922: GO 48850
48924: POP
48925: POP
// if tmp then
48926: LD_VAR 0 19
48930: IFFALSE 48942
// f := tmp ;
48932: LD_ADDR_VAR 0 12
48936: PUSH
48937: LD_VAR 0 19
48941: ST_TO_ADDR
// end ; x := personel [ i ] ;
48942: LD_ADDR_VAR 0 13
48946: PUSH
48947: LD_VAR 0 6
48951: PUSH
48952: LD_VAR 0 8
48956: ARRAY
48957: ST_TO_ADDR
// if x = - 1 then
48958: LD_VAR 0 13
48962: PUSH
48963: LD_INT 1
48965: NEG
48966: EQUAL
48967: IFFALSE 49176
// begin for j in f do
48969: LD_ADDR_VAR 0 9
48973: PUSH
48974: LD_VAR 0 12
48978: PUSH
48979: FOR_IN
48980: IFFALSE 49172
// repeat InitHc ;
48982: CALL_OW 19
// if GetBType ( j ) = b_barracks then
48986: LD_VAR 0 9
48990: PPUSH
48991: CALL_OW 266
48995: PUSH
48996: LD_INT 5
48998: EQUAL
48999: IFFALSE 49069
// begin if UnitsInside ( j ) < 3 then
49001: LD_VAR 0 9
49005: PPUSH
49006: CALL_OW 313
49010: PUSH
49011: LD_INT 3
49013: LESS
49014: IFFALSE 49050
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49016: LD_INT 0
49018: PPUSH
49019: LD_INT 5
49021: PUSH
49022: LD_INT 8
49024: PUSH
49025: LD_INT 9
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: LIST
49032: PUSH
49033: LD_VAR 0 17
49037: ARRAY
49038: PPUSH
49039: LD_VAR 0 4
49043: PPUSH
49044: CALL_OW 380
49048: GO 49067
// PrepareHuman ( false , i , skill ) ;
49050: LD_INT 0
49052: PPUSH
49053: LD_VAR 0 8
49057: PPUSH
49058: LD_VAR 0 4
49062: PPUSH
49063: CALL_OW 380
// end else
49067: GO 49086
// PrepareHuman ( false , i , skill ) ;
49069: LD_INT 0
49071: PPUSH
49072: LD_VAR 0 8
49076: PPUSH
49077: LD_VAR 0 4
49081: PPUSH
49082: CALL_OW 380
// un := CreateHuman ;
49086: LD_ADDR_VAR 0 14
49090: PUSH
49091: CALL_OW 44
49095: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49096: LD_ADDR_VAR 0 7
49100: PUSH
49101: LD_VAR 0 7
49105: PPUSH
49106: LD_INT 1
49108: PPUSH
49109: LD_VAR 0 14
49113: PPUSH
49114: CALL_OW 2
49118: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
49119: LD_VAR 0 14
49123: PPUSH
49124: LD_VAR 0 9
49128: PPUSH
49129: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
49133: LD_VAR 0 9
49137: PPUSH
49138: CALL_OW 313
49142: PUSH
49143: LD_INT 6
49145: EQUAL
49146: PUSH
49147: LD_VAR 0 9
49151: PPUSH
49152: CALL_OW 266
49156: PUSH
49157: LD_INT 32
49159: PUSH
49160: LD_INT 31
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: IN
49167: OR
49168: IFFALSE 48982
49170: GO 48979
49172: POP
49173: POP
// end else
49174: GO 49556
// for j = 1 to x do
49176: LD_ADDR_VAR 0 9
49180: PUSH
49181: DOUBLE
49182: LD_INT 1
49184: DEC
49185: ST_TO_ADDR
49186: LD_VAR 0 13
49190: PUSH
49191: FOR_TO
49192: IFFALSE 49554
// begin InitHc ;
49194: CALL_OW 19
// if not f then
49198: LD_VAR 0 12
49202: NOT
49203: IFFALSE 49292
// begin PrepareHuman ( false , i , skill ) ;
49205: LD_INT 0
49207: PPUSH
49208: LD_VAR 0 8
49212: PPUSH
49213: LD_VAR 0 4
49217: PPUSH
49218: CALL_OW 380
// un := CreateHuman ;
49222: LD_ADDR_VAR 0 14
49226: PUSH
49227: CALL_OW 44
49231: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49232: LD_ADDR_VAR 0 7
49236: PUSH
49237: LD_VAR 0 7
49241: PPUSH
49242: LD_INT 1
49244: PPUSH
49245: LD_VAR 0 14
49249: PPUSH
49250: CALL_OW 2
49254: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49255: LD_VAR 0 14
49259: PPUSH
49260: LD_VAR 0 1
49264: PPUSH
49265: CALL_OW 250
49269: PPUSH
49270: LD_VAR 0 1
49274: PPUSH
49275: CALL_OW 251
49279: PPUSH
49280: LD_INT 10
49282: PPUSH
49283: LD_INT 0
49285: PPUSH
49286: CALL_OW 50
// continue ;
49290: GO 49191
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
49292: LD_VAR 0 12
49296: PUSH
49297: LD_INT 1
49299: ARRAY
49300: PPUSH
49301: CALL_OW 313
49305: PUSH
49306: LD_VAR 0 12
49310: PUSH
49311: LD_INT 1
49313: ARRAY
49314: PPUSH
49315: CALL_OW 266
49319: PUSH
49320: LD_INT 32
49322: PUSH
49323: LD_INT 31
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: IN
49330: AND
49331: PUSH
49332: LD_VAR 0 12
49336: PUSH
49337: LD_INT 1
49339: ARRAY
49340: PPUSH
49341: CALL_OW 313
49345: PUSH
49346: LD_INT 6
49348: EQUAL
49349: OR
49350: IFFALSE 49370
// f := Delete ( f , 1 ) ;
49352: LD_ADDR_VAR 0 12
49356: PUSH
49357: LD_VAR 0 12
49361: PPUSH
49362: LD_INT 1
49364: PPUSH
49365: CALL_OW 3
49369: ST_TO_ADDR
// if not f then
49370: LD_VAR 0 12
49374: NOT
49375: IFFALSE 49393
// begin x := x + 2 ;
49377: LD_ADDR_VAR 0 13
49381: PUSH
49382: LD_VAR 0 13
49386: PUSH
49387: LD_INT 2
49389: PLUS
49390: ST_TO_ADDR
// continue ;
49391: GO 49191
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
49393: LD_VAR 0 12
49397: PUSH
49398: LD_INT 1
49400: ARRAY
49401: PPUSH
49402: CALL_OW 266
49406: PUSH
49407: LD_INT 5
49409: EQUAL
49410: IFFALSE 49484
// begin if UnitsInside ( f [ 1 ] ) < 3 then
49412: LD_VAR 0 12
49416: PUSH
49417: LD_INT 1
49419: ARRAY
49420: PPUSH
49421: CALL_OW 313
49425: PUSH
49426: LD_INT 3
49428: LESS
49429: IFFALSE 49465
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49431: LD_INT 0
49433: PPUSH
49434: LD_INT 5
49436: PUSH
49437: LD_INT 8
49439: PUSH
49440: LD_INT 9
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: LIST
49447: PUSH
49448: LD_VAR 0 17
49452: ARRAY
49453: PPUSH
49454: LD_VAR 0 4
49458: PPUSH
49459: CALL_OW 380
49463: GO 49482
// PrepareHuman ( false , i , skill ) ;
49465: LD_INT 0
49467: PPUSH
49468: LD_VAR 0 8
49472: PPUSH
49473: LD_VAR 0 4
49477: PPUSH
49478: CALL_OW 380
// end else
49482: GO 49501
// PrepareHuman ( false , i , skill ) ;
49484: LD_INT 0
49486: PPUSH
49487: LD_VAR 0 8
49491: PPUSH
49492: LD_VAR 0 4
49496: PPUSH
49497: CALL_OW 380
// un := CreateHuman ;
49501: LD_ADDR_VAR 0 14
49505: PUSH
49506: CALL_OW 44
49510: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49511: LD_ADDR_VAR 0 7
49515: PUSH
49516: LD_VAR 0 7
49520: PPUSH
49521: LD_INT 1
49523: PPUSH
49524: LD_VAR 0 14
49528: PPUSH
49529: CALL_OW 2
49533: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
49534: LD_VAR 0 14
49538: PPUSH
49539: LD_VAR 0 12
49543: PUSH
49544: LD_INT 1
49546: ARRAY
49547: PPUSH
49548: CALL_OW 52
// end ;
49552: GO 49191
49554: POP
49555: POP
// end ;
49556: GO 48493
49558: POP
49559: POP
// result := result ^ buildings ;
49560: LD_ADDR_VAR 0 7
49564: PUSH
49565: LD_VAR 0 7
49569: PUSH
49570: LD_VAR 0 18
49574: ADD
49575: ST_TO_ADDR
// end else
49576: GO 49719
// begin for i = 1 to personel do
49578: LD_ADDR_VAR 0 8
49582: PUSH
49583: DOUBLE
49584: LD_INT 1
49586: DEC
49587: ST_TO_ADDR
49588: LD_VAR 0 6
49592: PUSH
49593: FOR_TO
49594: IFFALSE 49717
// begin if i > 4 then
49596: LD_VAR 0 8
49600: PUSH
49601: LD_INT 4
49603: GREATER
49604: IFFALSE 49608
// break ;
49606: GO 49717
// x := personel [ i ] ;
49608: LD_ADDR_VAR 0 13
49612: PUSH
49613: LD_VAR 0 6
49617: PUSH
49618: LD_VAR 0 8
49622: ARRAY
49623: ST_TO_ADDR
// if x = - 1 then
49624: LD_VAR 0 13
49628: PUSH
49629: LD_INT 1
49631: NEG
49632: EQUAL
49633: IFFALSE 49637
// continue ;
49635: GO 49593
// PrepareHuman ( false , i , skill ) ;
49637: LD_INT 0
49639: PPUSH
49640: LD_VAR 0 8
49644: PPUSH
49645: LD_VAR 0 4
49649: PPUSH
49650: CALL_OW 380
// un := CreateHuman ;
49654: LD_ADDR_VAR 0 14
49658: PUSH
49659: CALL_OW 44
49663: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49664: LD_VAR 0 14
49668: PPUSH
49669: LD_VAR 0 1
49673: PPUSH
49674: CALL_OW 250
49678: PPUSH
49679: LD_VAR 0 1
49683: PPUSH
49684: CALL_OW 251
49688: PPUSH
49689: LD_INT 10
49691: PPUSH
49692: LD_INT 0
49694: PPUSH
49695: CALL_OW 50
// result := result ^ un ;
49699: LD_ADDR_VAR 0 7
49703: PUSH
49704: LD_VAR 0 7
49708: PUSH
49709: LD_VAR 0 14
49713: ADD
49714: ST_TO_ADDR
// end ;
49715: GO 49593
49717: POP
49718: POP
// end ; end ;
49719: LD_VAR 0 7
49723: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
49724: LD_INT 0
49726: PPUSH
49727: PPUSH
49728: PPUSH
49729: PPUSH
49730: PPUSH
49731: PPUSH
49732: PPUSH
49733: PPUSH
49734: PPUSH
49735: PPUSH
49736: PPUSH
49737: PPUSH
49738: PPUSH
49739: PPUSH
49740: PPUSH
49741: PPUSH
// result := false ;
49742: LD_ADDR_VAR 0 3
49746: PUSH
49747: LD_INT 0
49749: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
49750: LD_VAR 0 1
49754: NOT
49755: PUSH
49756: LD_VAR 0 1
49760: PPUSH
49761: CALL_OW 266
49765: PUSH
49766: LD_INT 32
49768: PUSH
49769: LD_INT 33
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: IN
49776: NOT
49777: OR
49778: IFFALSE 49782
// exit ;
49780: GO 50891
// nat := GetNation ( tower ) ;
49782: LD_ADDR_VAR 0 12
49786: PUSH
49787: LD_VAR 0 1
49791: PPUSH
49792: CALL_OW 248
49796: ST_TO_ADDR
// side := GetSide ( tower ) ;
49797: LD_ADDR_VAR 0 16
49801: PUSH
49802: LD_VAR 0 1
49806: PPUSH
49807: CALL_OW 255
49811: ST_TO_ADDR
// x := GetX ( tower ) ;
49812: LD_ADDR_VAR 0 10
49816: PUSH
49817: LD_VAR 0 1
49821: PPUSH
49822: CALL_OW 250
49826: ST_TO_ADDR
// y := GetY ( tower ) ;
49827: LD_ADDR_VAR 0 11
49831: PUSH
49832: LD_VAR 0 1
49836: PPUSH
49837: CALL_OW 251
49841: ST_TO_ADDR
// if not x or not y then
49842: LD_VAR 0 10
49846: NOT
49847: PUSH
49848: LD_VAR 0 11
49852: NOT
49853: OR
49854: IFFALSE 49858
// exit ;
49856: GO 50891
// weapon := 0 ;
49858: LD_ADDR_VAR 0 18
49862: PUSH
49863: LD_INT 0
49865: ST_TO_ADDR
// fac_list := [ ] ;
49866: LD_ADDR_VAR 0 17
49870: PUSH
49871: EMPTY
49872: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
49873: LD_ADDR_VAR 0 6
49877: PUSH
49878: LD_VAR 0 1
49882: PPUSH
49883: CALL_OW 274
49887: PPUSH
49888: LD_VAR 0 2
49892: PPUSH
49893: LD_INT 0
49895: PPUSH
49896: CALL 47462 0 3
49900: PPUSH
49901: LD_INT 30
49903: PUSH
49904: LD_INT 3
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PPUSH
49911: CALL_OW 72
49915: ST_TO_ADDR
// if not factories then
49916: LD_VAR 0 6
49920: NOT
49921: IFFALSE 49925
// exit ;
49923: GO 50891
// for i in factories do
49925: LD_ADDR_VAR 0 8
49929: PUSH
49930: LD_VAR 0 6
49934: PUSH
49935: FOR_IN
49936: IFFALSE 49961
// fac_list := fac_list union AvailableWeaponList ( i ) ;
49938: LD_ADDR_VAR 0 17
49942: PUSH
49943: LD_VAR 0 17
49947: PUSH
49948: LD_VAR 0 8
49952: PPUSH
49953: CALL_OW 478
49957: UNION
49958: ST_TO_ADDR
49959: GO 49935
49961: POP
49962: POP
// if not fac_list then
49963: LD_VAR 0 17
49967: NOT
49968: IFFALSE 49972
// exit ;
49970: GO 50891
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
49972: LD_ADDR_VAR 0 5
49976: PUSH
49977: LD_INT 4
49979: PUSH
49980: LD_INT 5
49982: PUSH
49983: LD_INT 9
49985: PUSH
49986: LD_INT 10
49988: PUSH
49989: LD_INT 6
49991: PUSH
49992: LD_INT 7
49994: PUSH
49995: LD_INT 11
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 27
50009: PUSH
50010: LD_INT 28
50012: PUSH
50013: LD_INT 26
50015: PUSH
50016: LD_INT 30
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: LIST
50023: LIST
50024: PUSH
50025: LD_INT 43
50027: PUSH
50028: LD_INT 44
50030: PUSH
50031: LD_INT 46
50033: PUSH
50034: LD_INT 45
50036: PUSH
50037: LD_INT 47
50039: PUSH
50040: LD_INT 49
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: LIST
50055: PUSH
50056: LD_VAR 0 12
50060: ARRAY
50061: ST_TO_ADDR
// list := list isect fac_list ;
50062: LD_ADDR_VAR 0 5
50066: PUSH
50067: LD_VAR 0 5
50071: PUSH
50072: LD_VAR 0 17
50076: ISECT
50077: ST_TO_ADDR
// if not list then
50078: LD_VAR 0 5
50082: NOT
50083: IFFALSE 50087
// exit ;
50085: GO 50891
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
50087: LD_VAR 0 12
50091: PUSH
50092: LD_INT 3
50094: EQUAL
50095: PUSH
50096: LD_INT 49
50098: PUSH
50099: LD_VAR 0 5
50103: IN
50104: AND
50105: PUSH
50106: LD_INT 31
50108: PPUSH
50109: LD_VAR 0 16
50113: PPUSH
50114: CALL_OW 321
50118: PUSH
50119: LD_INT 2
50121: EQUAL
50122: AND
50123: IFFALSE 50183
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
50125: LD_INT 22
50127: PUSH
50128: LD_VAR 0 16
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_INT 35
50139: PUSH
50140: LD_INT 49
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 91
50149: PUSH
50150: LD_VAR 0 1
50154: PUSH
50155: LD_INT 10
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: LIST
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: LIST
50167: PPUSH
50168: CALL_OW 69
50172: NOT
50173: IFFALSE 50183
// weapon := ru_time_lapser ;
50175: LD_ADDR_VAR 0 18
50179: PUSH
50180: LD_INT 49
50182: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
50183: LD_VAR 0 12
50187: PUSH
50188: LD_INT 1
50190: PUSH
50191: LD_INT 2
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: IN
50198: PUSH
50199: LD_INT 11
50201: PUSH
50202: LD_VAR 0 5
50206: IN
50207: PUSH
50208: LD_INT 30
50210: PUSH
50211: LD_VAR 0 5
50215: IN
50216: OR
50217: AND
50218: PUSH
50219: LD_INT 6
50221: PPUSH
50222: LD_VAR 0 16
50226: PPUSH
50227: CALL_OW 321
50231: PUSH
50232: LD_INT 2
50234: EQUAL
50235: AND
50236: IFFALSE 50401
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
50238: LD_INT 22
50240: PUSH
50241: LD_VAR 0 16
50245: PUSH
50246: EMPTY
50247: LIST
50248: LIST
50249: PUSH
50250: LD_INT 2
50252: PUSH
50253: LD_INT 35
50255: PUSH
50256: LD_INT 11
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: LD_INT 35
50265: PUSH
50266: LD_INT 30
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 91
50280: PUSH
50281: LD_VAR 0 1
50285: PUSH
50286: LD_INT 18
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: LIST
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: LIST
50298: PPUSH
50299: CALL_OW 69
50303: NOT
50304: PUSH
50305: LD_INT 22
50307: PUSH
50308: LD_VAR 0 16
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 2
50319: PUSH
50320: LD_INT 30
50322: PUSH
50323: LD_INT 32
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: LD_INT 30
50332: PUSH
50333: LD_INT 33
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 91
50347: PUSH
50348: LD_VAR 0 1
50352: PUSH
50353: LD_INT 12
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: LIST
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: LIST
50365: PUSH
50366: EMPTY
50367: LIST
50368: PPUSH
50369: CALL_OW 69
50373: PUSH
50374: LD_INT 2
50376: GREATER
50377: AND
50378: IFFALSE 50401
// weapon := [ us_radar , ar_radar ] [ nat ] ;
50380: LD_ADDR_VAR 0 18
50384: PUSH
50385: LD_INT 11
50387: PUSH
50388: LD_INT 30
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_VAR 0 12
50399: ARRAY
50400: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
50401: LD_VAR 0 18
50405: NOT
50406: PUSH
50407: LD_INT 40
50409: PPUSH
50410: LD_VAR 0 16
50414: PPUSH
50415: CALL_OW 321
50419: PUSH
50420: LD_INT 2
50422: EQUAL
50423: AND
50424: PUSH
50425: LD_INT 7
50427: PUSH
50428: LD_VAR 0 5
50432: IN
50433: PUSH
50434: LD_INT 28
50436: PUSH
50437: LD_VAR 0 5
50441: IN
50442: OR
50443: PUSH
50444: LD_INT 45
50446: PUSH
50447: LD_VAR 0 5
50451: IN
50452: OR
50453: AND
50454: IFFALSE 50708
// begin hex := GetHexInfo ( x , y ) ;
50456: LD_ADDR_VAR 0 4
50460: PUSH
50461: LD_VAR 0 10
50465: PPUSH
50466: LD_VAR 0 11
50470: PPUSH
50471: CALL_OW 546
50475: ST_TO_ADDR
// if hex [ 1 ] then
50476: LD_VAR 0 4
50480: PUSH
50481: LD_INT 1
50483: ARRAY
50484: IFFALSE 50488
// exit ;
50486: GO 50891
// height := hex [ 2 ] ;
50488: LD_ADDR_VAR 0 15
50492: PUSH
50493: LD_VAR 0 4
50497: PUSH
50498: LD_INT 2
50500: ARRAY
50501: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
50502: LD_ADDR_VAR 0 14
50506: PUSH
50507: LD_INT 0
50509: PUSH
50510: LD_INT 2
50512: PUSH
50513: LD_INT 3
50515: PUSH
50516: LD_INT 5
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: LIST
50523: LIST
50524: ST_TO_ADDR
// for i in tmp do
50525: LD_ADDR_VAR 0 8
50529: PUSH
50530: LD_VAR 0 14
50534: PUSH
50535: FOR_IN
50536: IFFALSE 50706
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
50538: LD_ADDR_VAR 0 9
50542: PUSH
50543: LD_VAR 0 10
50547: PPUSH
50548: LD_VAR 0 8
50552: PPUSH
50553: LD_INT 5
50555: PPUSH
50556: CALL_OW 272
50560: PUSH
50561: LD_VAR 0 11
50565: PPUSH
50566: LD_VAR 0 8
50570: PPUSH
50571: LD_INT 5
50573: PPUSH
50574: CALL_OW 273
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
50583: LD_VAR 0 9
50587: PUSH
50588: LD_INT 1
50590: ARRAY
50591: PPUSH
50592: LD_VAR 0 9
50596: PUSH
50597: LD_INT 2
50599: ARRAY
50600: PPUSH
50601: CALL_OW 488
50605: IFFALSE 50704
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
50607: LD_ADDR_VAR 0 4
50611: PUSH
50612: LD_VAR 0 9
50616: PUSH
50617: LD_INT 1
50619: ARRAY
50620: PPUSH
50621: LD_VAR 0 9
50625: PUSH
50626: LD_INT 2
50628: ARRAY
50629: PPUSH
50630: CALL_OW 546
50634: ST_TO_ADDR
// if hex [ 1 ] then
50635: LD_VAR 0 4
50639: PUSH
50640: LD_INT 1
50642: ARRAY
50643: IFFALSE 50647
// continue ;
50645: GO 50535
// h := hex [ 2 ] ;
50647: LD_ADDR_VAR 0 13
50651: PUSH
50652: LD_VAR 0 4
50656: PUSH
50657: LD_INT 2
50659: ARRAY
50660: ST_TO_ADDR
// if h + 7 < height then
50661: LD_VAR 0 13
50665: PUSH
50666: LD_INT 7
50668: PLUS
50669: PUSH
50670: LD_VAR 0 15
50674: LESS
50675: IFFALSE 50704
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
50677: LD_ADDR_VAR 0 18
50681: PUSH
50682: LD_INT 7
50684: PUSH
50685: LD_INT 28
50687: PUSH
50688: LD_INT 45
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: LIST
50695: PUSH
50696: LD_VAR 0 12
50700: ARRAY
50701: ST_TO_ADDR
// break ;
50702: GO 50706
// end ; end ; end ;
50704: GO 50535
50706: POP
50707: POP
// end ; if not weapon then
50708: LD_VAR 0 18
50712: NOT
50713: IFFALSE 50773
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
50715: LD_ADDR_VAR 0 5
50719: PUSH
50720: LD_VAR 0 5
50724: PUSH
50725: LD_INT 11
50727: PUSH
50728: LD_INT 30
50730: PUSH
50731: LD_INT 49
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: LIST
50738: DIFF
50739: ST_TO_ADDR
// if not list then
50740: LD_VAR 0 5
50744: NOT
50745: IFFALSE 50749
// exit ;
50747: GO 50891
// weapon := list [ rand ( 1 , list ) ] ;
50749: LD_ADDR_VAR 0 18
50753: PUSH
50754: LD_VAR 0 5
50758: PUSH
50759: LD_INT 1
50761: PPUSH
50762: LD_VAR 0 5
50766: PPUSH
50767: CALL_OW 12
50771: ARRAY
50772: ST_TO_ADDR
// end ; if weapon then
50773: LD_VAR 0 18
50777: IFFALSE 50891
// begin tmp := CostOfWeapon ( weapon ) ;
50779: LD_ADDR_VAR 0 14
50783: PUSH
50784: LD_VAR 0 18
50788: PPUSH
50789: CALL_OW 451
50793: ST_TO_ADDR
// j := GetBase ( tower ) ;
50794: LD_ADDR_VAR 0 9
50798: PUSH
50799: LD_VAR 0 1
50803: PPUSH
50804: CALL_OW 274
50808: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
50809: LD_VAR 0 9
50813: PPUSH
50814: LD_INT 1
50816: PPUSH
50817: CALL_OW 275
50821: PUSH
50822: LD_VAR 0 14
50826: PUSH
50827: LD_INT 1
50829: ARRAY
50830: GREATEREQUAL
50831: PUSH
50832: LD_VAR 0 9
50836: PPUSH
50837: LD_INT 2
50839: PPUSH
50840: CALL_OW 275
50844: PUSH
50845: LD_VAR 0 14
50849: PUSH
50850: LD_INT 2
50852: ARRAY
50853: GREATEREQUAL
50854: AND
50855: PUSH
50856: LD_VAR 0 9
50860: PPUSH
50861: LD_INT 3
50863: PPUSH
50864: CALL_OW 275
50868: PUSH
50869: LD_VAR 0 14
50873: PUSH
50874: LD_INT 3
50876: ARRAY
50877: GREATEREQUAL
50878: AND
50879: IFFALSE 50891
// result := weapon ;
50881: LD_ADDR_VAR 0 3
50885: PUSH
50886: LD_VAR 0 18
50890: ST_TO_ADDR
// end ; end ;
50891: LD_VAR 0 3
50895: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
50896: LD_INT 0
50898: PPUSH
50899: PPUSH
// result := true ;
50900: LD_ADDR_VAR 0 3
50904: PUSH
50905: LD_INT 1
50907: ST_TO_ADDR
// if array1 = array2 then
50908: LD_VAR 0 1
50912: PUSH
50913: LD_VAR 0 2
50917: EQUAL
50918: IFFALSE 50978
// begin for i = 1 to array1 do
50920: LD_ADDR_VAR 0 4
50924: PUSH
50925: DOUBLE
50926: LD_INT 1
50928: DEC
50929: ST_TO_ADDR
50930: LD_VAR 0 1
50934: PUSH
50935: FOR_TO
50936: IFFALSE 50974
// if array1 [ i ] <> array2 [ i ] then
50938: LD_VAR 0 1
50942: PUSH
50943: LD_VAR 0 4
50947: ARRAY
50948: PUSH
50949: LD_VAR 0 2
50953: PUSH
50954: LD_VAR 0 4
50958: ARRAY
50959: NONEQUAL
50960: IFFALSE 50972
// begin result := false ;
50962: LD_ADDR_VAR 0 3
50966: PUSH
50967: LD_INT 0
50969: ST_TO_ADDR
// break ;
50970: GO 50974
// end ;
50972: GO 50935
50974: POP
50975: POP
// end else
50976: GO 50986
// result := false ;
50978: LD_ADDR_VAR 0 3
50982: PUSH
50983: LD_INT 0
50985: ST_TO_ADDR
// end ;
50986: LD_VAR 0 3
50990: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
50991: LD_INT 0
50993: PPUSH
50994: PPUSH
// if not array1 or not array2 then
50995: LD_VAR 0 1
50999: NOT
51000: PUSH
51001: LD_VAR 0 2
51005: NOT
51006: OR
51007: IFFALSE 51011
// exit ;
51009: GO 51075
// result := true ;
51011: LD_ADDR_VAR 0 3
51015: PUSH
51016: LD_INT 1
51018: ST_TO_ADDR
// for i = 1 to array1 do
51019: LD_ADDR_VAR 0 4
51023: PUSH
51024: DOUBLE
51025: LD_INT 1
51027: DEC
51028: ST_TO_ADDR
51029: LD_VAR 0 1
51033: PUSH
51034: FOR_TO
51035: IFFALSE 51073
// if array1 [ i ] <> array2 [ i ] then
51037: LD_VAR 0 1
51041: PUSH
51042: LD_VAR 0 4
51046: ARRAY
51047: PUSH
51048: LD_VAR 0 2
51052: PUSH
51053: LD_VAR 0 4
51057: ARRAY
51058: NONEQUAL
51059: IFFALSE 51071
// begin result := false ;
51061: LD_ADDR_VAR 0 3
51065: PUSH
51066: LD_INT 0
51068: ST_TO_ADDR
// break ;
51069: GO 51073
// end ;
51071: GO 51034
51073: POP
51074: POP
// end ;
51075: LD_VAR 0 3
51079: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
51080: LD_INT 0
51082: PPUSH
51083: PPUSH
51084: PPUSH
// pom := GetBase ( fac ) ;
51085: LD_ADDR_VAR 0 5
51089: PUSH
51090: LD_VAR 0 1
51094: PPUSH
51095: CALL_OW 274
51099: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
51100: LD_ADDR_VAR 0 4
51104: PUSH
51105: LD_VAR 0 2
51109: PUSH
51110: LD_INT 1
51112: ARRAY
51113: PPUSH
51114: LD_VAR 0 2
51118: PUSH
51119: LD_INT 2
51121: ARRAY
51122: PPUSH
51123: LD_VAR 0 2
51127: PUSH
51128: LD_INT 3
51130: ARRAY
51131: PPUSH
51132: LD_VAR 0 2
51136: PUSH
51137: LD_INT 4
51139: ARRAY
51140: PPUSH
51141: CALL_OW 449
51145: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51146: LD_ADDR_VAR 0 3
51150: PUSH
51151: LD_VAR 0 5
51155: PPUSH
51156: LD_INT 1
51158: PPUSH
51159: CALL_OW 275
51163: PUSH
51164: LD_VAR 0 4
51168: PUSH
51169: LD_INT 1
51171: ARRAY
51172: GREATEREQUAL
51173: PUSH
51174: LD_VAR 0 5
51178: PPUSH
51179: LD_INT 2
51181: PPUSH
51182: CALL_OW 275
51186: PUSH
51187: LD_VAR 0 4
51191: PUSH
51192: LD_INT 2
51194: ARRAY
51195: GREATEREQUAL
51196: AND
51197: PUSH
51198: LD_VAR 0 5
51202: PPUSH
51203: LD_INT 3
51205: PPUSH
51206: CALL_OW 275
51210: PUSH
51211: LD_VAR 0 4
51215: PUSH
51216: LD_INT 3
51218: ARRAY
51219: GREATEREQUAL
51220: AND
51221: ST_TO_ADDR
// end ;
51222: LD_VAR 0 3
51226: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
51227: LD_INT 0
51229: PPUSH
51230: PPUSH
51231: PPUSH
51232: PPUSH
// pom := GetBase ( building ) ;
51233: LD_ADDR_VAR 0 3
51237: PUSH
51238: LD_VAR 0 1
51242: PPUSH
51243: CALL_OW 274
51247: ST_TO_ADDR
// if not pom then
51248: LD_VAR 0 3
51252: NOT
51253: IFFALSE 51257
// exit ;
51255: GO 51427
// btype := GetBType ( building ) ;
51257: LD_ADDR_VAR 0 5
51261: PUSH
51262: LD_VAR 0 1
51266: PPUSH
51267: CALL_OW 266
51271: ST_TO_ADDR
// if btype = b_armoury then
51272: LD_VAR 0 5
51276: PUSH
51277: LD_INT 4
51279: EQUAL
51280: IFFALSE 51290
// btype := b_barracks ;
51282: LD_ADDR_VAR 0 5
51286: PUSH
51287: LD_INT 5
51289: ST_TO_ADDR
// if btype = b_depot then
51290: LD_VAR 0 5
51294: PUSH
51295: LD_INT 0
51297: EQUAL
51298: IFFALSE 51308
// btype := b_warehouse ;
51300: LD_ADDR_VAR 0 5
51304: PUSH
51305: LD_INT 1
51307: ST_TO_ADDR
// if btype = b_workshop then
51308: LD_VAR 0 5
51312: PUSH
51313: LD_INT 2
51315: EQUAL
51316: IFFALSE 51326
// btype := b_factory ;
51318: LD_ADDR_VAR 0 5
51322: PUSH
51323: LD_INT 3
51325: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51326: LD_ADDR_VAR 0 4
51330: PUSH
51331: LD_VAR 0 5
51335: PPUSH
51336: LD_VAR 0 1
51340: PPUSH
51341: CALL_OW 248
51345: PPUSH
51346: CALL_OW 450
51350: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51351: LD_ADDR_VAR 0 2
51355: PUSH
51356: LD_VAR 0 3
51360: PPUSH
51361: LD_INT 1
51363: PPUSH
51364: CALL_OW 275
51368: PUSH
51369: LD_VAR 0 4
51373: PUSH
51374: LD_INT 1
51376: ARRAY
51377: GREATEREQUAL
51378: PUSH
51379: LD_VAR 0 3
51383: PPUSH
51384: LD_INT 2
51386: PPUSH
51387: CALL_OW 275
51391: PUSH
51392: LD_VAR 0 4
51396: PUSH
51397: LD_INT 2
51399: ARRAY
51400: GREATEREQUAL
51401: AND
51402: PUSH
51403: LD_VAR 0 3
51407: PPUSH
51408: LD_INT 3
51410: PPUSH
51411: CALL_OW 275
51415: PUSH
51416: LD_VAR 0 4
51420: PUSH
51421: LD_INT 3
51423: ARRAY
51424: GREATEREQUAL
51425: AND
51426: ST_TO_ADDR
// end ;
51427: LD_VAR 0 2
51431: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
51432: LD_INT 0
51434: PPUSH
51435: PPUSH
51436: PPUSH
// pom := GetBase ( building ) ;
51437: LD_ADDR_VAR 0 4
51441: PUSH
51442: LD_VAR 0 1
51446: PPUSH
51447: CALL_OW 274
51451: ST_TO_ADDR
// if not pom then
51452: LD_VAR 0 4
51456: NOT
51457: IFFALSE 51461
// exit ;
51459: GO 51562
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51461: LD_ADDR_VAR 0 5
51465: PUSH
51466: LD_VAR 0 2
51470: PPUSH
51471: LD_VAR 0 1
51475: PPUSH
51476: CALL_OW 248
51480: PPUSH
51481: CALL_OW 450
51485: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51486: LD_ADDR_VAR 0 3
51490: PUSH
51491: LD_VAR 0 4
51495: PPUSH
51496: LD_INT 1
51498: PPUSH
51499: CALL_OW 275
51503: PUSH
51504: LD_VAR 0 5
51508: PUSH
51509: LD_INT 1
51511: ARRAY
51512: GREATEREQUAL
51513: PUSH
51514: LD_VAR 0 4
51518: PPUSH
51519: LD_INT 2
51521: PPUSH
51522: CALL_OW 275
51526: PUSH
51527: LD_VAR 0 5
51531: PUSH
51532: LD_INT 2
51534: ARRAY
51535: GREATEREQUAL
51536: AND
51537: PUSH
51538: LD_VAR 0 4
51542: PPUSH
51543: LD_INT 3
51545: PPUSH
51546: CALL_OW 275
51550: PUSH
51551: LD_VAR 0 5
51555: PUSH
51556: LD_INT 3
51558: ARRAY
51559: GREATEREQUAL
51560: AND
51561: ST_TO_ADDR
// end ;
51562: LD_VAR 0 3
51566: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
51567: LD_INT 0
51569: PPUSH
51570: PPUSH
51571: PPUSH
51572: PPUSH
51573: PPUSH
51574: PPUSH
51575: PPUSH
51576: PPUSH
51577: PPUSH
51578: PPUSH
51579: PPUSH
// result := false ;
51580: LD_ADDR_VAR 0 8
51584: PUSH
51585: LD_INT 0
51587: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
51588: LD_VAR 0 5
51592: NOT
51593: PUSH
51594: LD_VAR 0 1
51598: NOT
51599: OR
51600: PUSH
51601: LD_VAR 0 2
51605: NOT
51606: OR
51607: PUSH
51608: LD_VAR 0 3
51612: NOT
51613: OR
51614: IFFALSE 51618
// exit ;
51616: GO 52432
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
51618: LD_ADDR_VAR 0 14
51622: PUSH
51623: LD_VAR 0 1
51627: PPUSH
51628: LD_VAR 0 2
51632: PPUSH
51633: LD_VAR 0 3
51637: PPUSH
51638: LD_VAR 0 4
51642: PPUSH
51643: LD_VAR 0 5
51647: PUSH
51648: LD_INT 1
51650: ARRAY
51651: PPUSH
51652: CALL_OW 248
51656: PPUSH
51657: LD_INT 0
51659: PPUSH
51660: CALL 53665 0 6
51664: ST_TO_ADDR
// if not hexes then
51665: LD_VAR 0 14
51669: NOT
51670: IFFALSE 51674
// exit ;
51672: GO 52432
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51674: LD_ADDR_VAR 0 17
51678: PUSH
51679: LD_VAR 0 5
51683: PPUSH
51684: LD_INT 22
51686: PUSH
51687: LD_VAR 0 13
51691: PPUSH
51692: CALL_OW 255
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: LD_INT 2
51703: PUSH
51704: LD_INT 30
51706: PUSH
51707: LD_INT 0
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 30
51716: PUSH
51717: LD_INT 1
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: LIST
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PPUSH
51733: CALL_OW 72
51737: ST_TO_ADDR
// for i = 1 to hexes do
51738: LD_ADDR_VAR 0 9
51742: PUSH
51743: DOUBLE
51744: LD_INT 1
51746: DEC
51747: ST_TO_ADDR
51748: LD_VAR 0 14
51752: PUSH
51753: FOR_TO
51754: IFFALSE 52430
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51756: LD_ADDR_VAR 0 13
51760: PUSH
51761: LD_VAR 0 14
51765: PUSH
51766: LD_VAR 0 9
51770: ARRAY
51771: PUSH
51772: LD_INT 1
51774: ARRAY
51775: PPUSH
51776: LD_VAR 0 14
51780: PUSH
51781: LD_VAR 0 9
51785: ARRAY
51786: PUSH
51787: LD_INT 2
51789: ARRAY
51790: PPUSH
51791: CALL_OW 428
51795: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
51796: LD_VAR 0 14
51800: PUSH
51801: LD_VAR 0 9
51805: ARRAY
51806: PUSH
51807: LD_INT 1
51809: ARRAY
51810: PPUSH
51811: LD_VAR 0 14
51815: PUSH
51816: LD_VAR 0 9
51820: ARRAY
51821: PUSH
51822: LD_INT 2
51824: ARRAY
51825: PPUSH
51826: CALL_OW 351
51830: PUSH
51831: LD_VAR 0 14
51835: PUSH
51836: LD_VAR 0 9
51840: ARRAY
51841: PUSH
51842: LD_INT 1
51844: ARRAY
51845: PPUSH
51846: LD_VAR 0 14
51850: PUSH
51851: LD_VAR 0 9
51855: ARRAY
51856: PUSH
51857: LD_INT 2
51859: ARRAY
51860: PPUSH
51861: CALL_OW 488
51865: NOT
51866: OR
51867: PUSH
51868: LD_VAR 0 13
51872: PPUSH
51873: CALL_OW 247
51877: PUSH
51878: LD_INT 3
51880: EQUAL
51881: OR
51882: IFFALSE 51888
// exit ;
51884: POP
51885: POP
51886: GO 52432
// if not tmp then
51888: LD_VAR 0 13
51892: NOT
51893: IFFALSE 51897
// continue ;
51895: GO 51753
// result := true ;
51897: LD_ADDR_VAR 0 8
51901: PUSH
51902: LD_INT 1
51904: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
51905: LD_VAR 0 6
51909: PUSH
51910: LD_VAR 0 13
51914: PPUSH
51915: CALL_OW 247
51919: PUSH
51920: LD_INT 2
51922: EQUAL
51923: AND
51924: PUSH
51925: LD_VAR 0 13
51929: PPUSH
51930: CALL_OW 263
51934: PUSH
51935: LD_INT 1
51937: EQUAL
51938: AND
51939: IFFALSE 52103
// begin if IsDrivenBy ( tmp ) then
51941: LD_VAR 0 13
51945: PPUSH
51946: CALL_OW 311
51950: IFFALSE 51954
// continue ;
51952: GO 51753
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
51954: LD_VAR 0 6
51958: PPUSH
51959: LD_INT 3
51961: PUSH
51962: LD_INT 60
51964: PUSH
51965: EMPTY
51966: LIST
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: LD_INT 3
51974: PUSH
51975: LD_INT 55
51977: PUSH
51978: EMPTY
51979: LIST
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PPUSH
51989: CALL_OW 72
51993: IFFALSE 52101
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
51995: LD_ADDR_VAR 0 18
51999: PUSH
52000: LD_VAR 0 6
52004: PPUSH
52005: LD_INT 3
52007: PUSH
52008: LD_INT 60
52010: PUSH
52011: EMPTY
52012: LIST
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: LD_INT 3
52020: PUSH
52021: LD_INT 55
52023: PUSH
52024: EMPTY
52025: LIST
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PPUSH
52035: CALL_OW 72
52039: PUSH
52040: LD_INT 1
52042: ARRAY
52043: ST_TO_ADDR
// if IsInUnit ( driver ) then
52044: LD_VAR 0 18
52048: PPUSH
52049: CALL_OW 310
52053: IFFALSE 52064
// ComExit ( driver ) ;
52055: LD_VAR 0 18
52059: PPUSH
52060: CALL 77353 0 1
// AddComEnterUnit ( driver , tmp ) ;
52064: LD_VAR 0 18
52068: PPUSH
52069: LD_VAR 0 13
52073: PPUSH
52074: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
52078: LD_VAR 0 18
52082: PPUSH
52083: LD_VAR 0 7
52087: PPUSH
52088: CALL_OW 173
// AddComExitVehicle ( driver ) ;
52092: LD_VAR 0 18
52096: PPUSH
52097: CALL_OW 181
// end ; continue ;
52101: GO 51753
// end ; if not cleaners or not tmp in cleaners then
52103: LD_VAR 0 6
52107: NOT
52108: PUSH
52109: LD_VAR 0 13
52113: PUSH
52114: LD_VAR 0 6
52118: IN
52119: NOT
52120: OR
52121: IFFALSE 52428
// begin if dep then
52123: LD_VAR 0 17
52127: IFFALSE 52263
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
52129: LD_ADDR_VAR 0 16
52133: PUSH
52134: LD_VAR 0 17
52138: PUSH
52139: LD_INT 1
52141: ARRAY
52142: PPUSH
52143: CALL_OW 250
52147: PPUSH
52148: LD_VAR 0 17
52152: PUSH
52153: LD_INT 1
52155: ARRAY
52156: PPUSH
52157: CALL_OW 254
52161: PPUSH
52162: LD_INT 5
52164: PPUSH
52165: CALL_OW 272
52169: PUSH
52170: LD_VAR 0 17
52174: PUSH
52175: LD_INT 1
52177: ARRAY
52178: PPUSH
52179: CALL_OW 251
52183: PPUSH
52184: LD_VAR 0 17
52188: PUSH
52189: LD_INT 1
52191: ARRAY
52192: PPUSH
52193: CALL_OW 254
52197: PPUSH
52198: LD_INT 5
52200: PPUSH
52201: CALL_OW 273
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
52210: LD_VAR 0 16
52214: PUSH
52215: LD_INT 1
52217: ARRAY
52218: PPUSH
52219: LD_VAR 0 16
52223: PUSH
52224: LD_INT 2
52226: ARRAY
52227: PPUSH
52228: CALL_OW 488
52232: IFFALSE 52263
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
52234: LD_VAR 0 13
52238: PPUSH
52239: LD_VAR 0 16
52243: PUSH
52244: LD_INT 1
52246: ARRAY
52247: PPUSH
52248: LD_VAR 0 16
52252: PUSH
52253: LD_INT 2
52255: ARRAY
52256: PPUSH
52257: CALL_OW 111
// continue ;
52261: GO 51753
// end ; end ; r := GetDir ( tmp ) ;
52263: LD_ADDR_VAR 0 15
52267: PUSH
52268: LD_VAR 0 13
52272: PPUSH
52273: CALL_OW 254
52277: ST_TO_ADDR
// if r = 5 then
52278: LD_VAR 0 15
52282: PUSH
52283: LD_INT 5
52285: EQUAL
52286: IFFALSE 52296
// r := 0 ;
52288: LD_ADDR_VAR 0 15
52292: PUSH
52293: LD_INT 0
52295: ST_TO_ADDR
// for j = r to 5 do
52296: LD_ADDR_VAR 0 10
52300: PUSH
52301: DOUBLE
52302: LD_VAR 0 15
52306: DEC
52307: ST_TO_ADDR
52308: LD_INT 5
52310: PUSH
52311: FOR_TO
52312: IFFALSE 52426
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
52314: LD_ADDR_VAR 0 11
52318: PUSH
52319: LD_VAR 0 13
52323: PPUSH
52324: CALL_OW 250
52328: PPUSH
52329: LD_VAR 0 10
52333: PPUSH
52334: LD_INT 2
52336: PPUSH
52337: CALL_OW 272
52341: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
52342: LD_ADDR_VAR 0 12
52346: PUSH
52347: LD_VAR 0 13
52351: PPUSH
52352: CALL_OW 251
52356: PPUSH
52357: LD_VAR 0 10
52361: PPUSH
52362: LD_INT 2
52364: PPUSH
52365: CALL_OW 273
52369: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
52370: LD_VAR 0 11
52374: PPUSH
52375: LD_VAR 0 12
52379: PPUSH
52380: CALL_OW 488
52384: PUSH
52385: LD_VAR 0 11
52389: PPUSH
52390: LD_VAR 0 12
52394: PPUSH
52395: CALL_OW 428
52399: NOT
52400: AND
52401: IFFALSE 52424
// begin ComMoveXY ( tmp , _x , _y ) ;
52403: LD_VAR 0 13
52407: PPUSH
52408: LD_VAR 0 11
52412: PPUSH
52413: LD_VAR 0 12
52417: PPUSH
52418: CALL_OW 111
// break ;
52422: GO 52426
// end ; end ;
52424: GO 52311
52426: POP
52427: POP
// end ; end ;
52428: GO 51753
52430: POP
52431: POP
// end ;
52432: LD_VAR 0 8
52436: RET
// export function BuildingTechInvented ( side , btype ) ; begin
52437: LD_INT 0
52439: PPUSH
// result := true ;
52440: LD_ADDR_VAR 0 3
52444: PUSH
52445: LD_INT 1
52447: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
52448: LD_VAR 0 2
52452: PUSH
52453: LD_INT 24
52455: DOUBLE
52456: EQUAL
52457: IFTRUE 52467
52459: LD_INT 33
52461: DOUBLE
52462: EQUAL
52463: IFTRUE 52467
52465: GO 52492
52467: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
52468: LD_ADDR_VAR 0 3
52472: PUSH
52473: LD_INT 32
52475: PPUSH
52476: LD_VAR 0 1
52480: PPUSH
52481: CALL_OW 321
52485: PUSH
52486: LD_INT 2
52488: EQUAL
52489: ST_TO_ADDR
52490: GO 52808
52492: LD_INT 20
52494: DOUBLE
52495: EQUAL
52496: IFTRUE 52500
52498: GO 52525
52500: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
52501: LD_ADDR_VAR 0 3
52505: PUSH
52506: LD_INT 6
52508: PPUSH
52509: LD_VAR 0 1
52513: PPUSH
52514: CALL_OW 321
52518: PUSH
52519: LD_INT 2
52521: EQUAL
52522: ST_TO_ADDR
52523: GO 52808
52525: LD_INT 22
52527: DOUBLE
52528: EQUAL
52529: IFTRUE 52539
52531: LD_INT 36
52533: DOUBLE
52534: EQUAL
52535: IFTRUE 52539
52537: GO 52564
52539: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
52540: LD_ADDR_VAR 0 3
52544: PUSH
52545: LD_INT 15
52547: PPUSH
52548: LD_VAR 0 1
52552: PPUSH
52553: CALL_OW 321
52557: PUSH
52558: LD_INT 2
52560: EQUAL
52561: ST_TO_ADDR
52562: GO 52808
52564: LD_INT 30
52566: DOUBLE
52567: EQUAL
52568: IFTRUE 52572
52570: GO 52597
52572: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
52573: LD_ADDR_VAR 0 3
52577: PUSH
52578: LD_INT 20
52580: PPUSH
52581: LD_VAR 0 1
52585: PPUSH
52586: CALL_OW 321
52590: PUSH
52591: LD_INT 2
52593: EQUAL
52594: ST_TO_ADDR
52595: GO 52808
52597: LD_INT 28
52599: DOUBLE
52600: EQUAL
52601: IFTRUE 52611
52603: LD_INT 21
52605: DOUBLE
52606: EQUAL
52607: IFTRUE 52611
52609: GO 52636
52611: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
52612: LD_ADDR_VAR 0 3
52616: PUSH
52617: LD_INT 21
52619: PPUSH
52620: LD_VAR 0 1
52624: PPUSH
52625: CALL_OW 321
52629: PUSH
52630: LD_INT 2
52632: EQUAL
52633: ST_TO_ADDR
52634: GO 52808
52636: LD_INT 16
52638: DOUBLE
52639: EQUAL
52640: IFTRUE 52644
52642: GO 52669
52644: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
52645: LD_ADDR_VAR 0 3
52649: PUSH
52650: LD_INT 84
52652: PPUSH
52653: LD_VAR 0 1
52657: PPUSH
52658: CALL_OW 321
52662: PUSH
52663: LD_INT 2
52665: EQUAL
52666: ST_TO_ADDR
52667: GO 52808
52669: LD_INT 19
52671: DOUBLE
52672: EQUAL
52673: IFTRUE 52683
52675: LD_INT 23
52677: DOUBLE
52678: EQUAL
52679: IFTRUE 52683
52681: GO 52708
52683: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
52684: LD_ADDR_VAR 0 3
52688: PUSH
52689: LD_INT 83
52691: PPUSH
52692: LD_VAR 0 1
52696: PPUSH
52697: CALL_OW 321
52701: PUSH
52702: LD_INT 2
52704: EQUAL
52705: ST_TO_ADDR
52706: GO 52808
52708: LD_INT 17
52710: DOUBLE
52711: EQUAL
52712: IFTRUE 52716
52714: GO 52741
52716: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
52717: LD_ADDR_VAR 0 3
52721: PUSH
52722: LD_INT 39
52724: PPUSH
52725: LD_VAR 0 1
52729: PPUSH
52730: CALL_OW 321
52734: PUSH
52735: LD_INT 2
52737: EQUAL
52738: ST_TO_ADDR
52739: GO 52808
52741: LD_INT 18
52743: DOUBLE
52744: EQUAL
52745: IFTRUE 52749
52747: GO 52774
52749: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
52750: LD_ADDR_VAR 0 3
52754: PUSH
52755: LD_INT 40
52757: PPUSH
52758: LD_VAR 0 1
52762: PPUSH
52763: CALL_OW 321
52767: PUSH
52768: LD_INT 2
52770: EQUAL
52771: ST_TO_ADDR
52772: GO 52808
52774: LD_INT 27
52776: DOUBLE
52777: EQUAL
52778: IFTRUE 52782
52780: GO 52807
52782: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
52783: LD_ADDR_VAR 0 3
52787: PUSH
52788: LD_INT 35
52790: PPUSH
52791: LD_VAR 0 1
52795: PPUSH
52796: CALL_OW 321
52800: PUSH
52801: LD_INT 2
52803: EQUAL
52804: ST_TO_ADDR
52805: GO 52808
52807: POP
// end ;
52808: LD_VAR 0 3
52812: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
52813: LD_INT 0
52815: PPUSH
52816: PPUSH
52817: PPUSH
52818: PPUSH
52819: PPUSH
52820: PPUSH
52821: PPUSH
52822: PPUSH
52823: PPUSH
52824: PPUSH
52825: PPUSH
// result := false ;
52826: LD_ADDR_VAR 0 6
52830: PUSH
52831: LD_INT 0
52833: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
52834: LD_VAR 0 1
52838: NOT
52839: PUSH
52840: LD_VAR 0 1
52844: PPUSH
52845: CALL_OW 266
52849: PUSH
52850: LD_INT 0
52852: PUSH
52853: LD_INT 1
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: IN
52860: NOT
52861: OR
52862: PUSH
52863: LD_VAR 0 2
52867: NOT
52868: OR
52869: PUSH
52870: LD_VAR 0 5
52874: PUSH
52875: LD_INT 0
52877: PUSH
52878: LD_INT 1
52880: PUSH
52881: LD_INT 2
52883: PUSH
52884: LD_INT 3
52886: PUSH
52887: LD_INT 4
52889: PUSH
52890: LD_INT 5
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: IN
52901: NOT
52902: OR
52903: PUSH
52904: LD_VAR 0 3
52908: PPUSH
52909: LD_VAR 0 4
52913: PPUSH
52914: CALL_OW 488
52918: NOT
52919: OR
52920: IFFALSE 52924
// exit ;
52922: GO 53660
// side := GetSide ( depot ) ;
52924: LD_ADDR_VAR 0 9
52928: PUSH
52929: LD_VAR 0 1
52933: PPUSH
52934: CALL_OW 255
52938: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
52939: LD_VAR 0 9
52943: PPUSH
52944: LD_VAR 0 2
52948: PPUSH
52949: CALL 52437 0 2
52953: NOT
52954: IFFALSE 52958
// exit ;
52956: GO 53660
// pom := GetBase ( depot ) ;
52958: LD_ADDR_VAR 0 10
52962: PUSH
52963: LD_VAR 0 1
52967: PPUSH
52968: CALL_OW 274
52972: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52973: LD_ADDR_VAR 0 11
52977: PUSH
52978: LD_VAR 0 2
52982: PPUSH
52983: LD_VAR 0 1
52987: PPUSH
52988: CALL_OW 248
52992: PPUSH
52993: CALL_OW 450
52997: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
52998: LD_VAR 0 10
53002: PPUSH
53003: LD_INT 1
53005: PPUSH
53006: CALL_OW 275
53010: PUSH
53011: LD_VAR 0 11
53015: PUSH
53016: LD_INT 1
53018: ARRAY
53019: GREATEREQUAL
53020: PUSH
53021: LD_VAR 0 10
53025: PPUSH
53026: LD_INT 2
53028: PPUSH
53029: CALL_OW 275
53033: PUSH
53034: LD_VAR 0 11
53038: PUSH
53039: LD_INT 2
53041: ARRAY
53042: GREATEREQUAL
53043: AND
53044: PUSH
53045: LD_VAR 0 10
53049: PPUSH
53050: LD_INT 3
53052: PPUSH
53053: CALL_OW 275
53057: PUSH
53058: LD_VAR 0 11
53062: PUSH
53063: LD_INT 3
53065: ARRAY
53066: GREATEREQUAL
53067: AND
53068: NOT
53069: IFFALSE 53073
// exit ;
53071: GO 53660
// if GetBType ( depot ) = b_depot then
53073: LD_VAR 0 1
53077: PPUSH
53078: CALL_OW 266
53082: PUSH
53083: LD_INT 0
53085: EQUAL
53086: IFFALSE 53098
// dist := 28 else
53088: LD_ADDR_VAR 0 14
53092: PUSH
53093: LD_INT 28
53095: ST_TO_ADDR
53096: GO 53106
// dist := 36 ;
53098: LD_ADDR_VAR 0 14
53102: PUSH
53103: LD_INT 36
53105: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
53106: LD_VAR 0 1
53110: PPUSH
53111: LD_VAR 0 3
53115: PPUSH
53116: LD_VAR 0 4
53120: PPUSH
53121: CALL_OW 297
53125: PUSH
53126: LD_VAR 0 14
53130: GREATER
53131: IFFALSE 53135
// exit ;
53133: GO 53660
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
53135: LD_ADDR_VAR 0 12
53139: PUSH
53140: LD_VAR 0 2
53144: PPUSH
53145: LD_VAR 0 3
53149: PPUSH
53150: LD_VAR 0 4
53154: PPUSH
53155: LD_VAR 0 5
53159: PPUSH
53160: LD_VAR 0 1
53164: PPUSH
53165: CALL_OW 248
53169: PPUSH
53170: LD_INT 0
53172: PPUSH
53173: CALL 53665 0 6
53177: ST_TO_ADDR
// if not hexes then
53178: LD_VAR 0 12
53182: NOT
53183: IFFALSE 53187
// exit ;
53185: GO 53660
// hex := GetHexInfo ( x , y ) ;
53187: LD_ADDR_VAR 0 15
53191: PUSH
53192: LD_VAR 0 3
53196: PPUSH
53197: LD_VAR 0 4
53201: PPUSH
53202: CALL_OW 546
53206: ST_TO_ADDR
// if hex [ 1 ] then
53207: LD_VAR 0 15
53211: PUSH
53212: LD_INT 1
53214: ARRAY
53215: IFFALSE 53219
// exit ;
53217: GO 53660
// height := hex [ 2 ] ;
53219: LD_ADDR_VAR 0 13
53223: PUSH
53224: LD_VAR 0 15
53228: PUSH
53229: LD_INT 2
53231: ARRAY
53232: ST_TO_ADDR
// for i = 1 to hexes do
53233: LD_ADDR_VAR 0 7
53237: PUSH
53238: DOUBLE
53239: LD_INT 1
53241: DEC
53242: ST_TO_ADDR
53243: LD_VAR 0 12
53247: PUSH
53248: FOR_TO
53249: IFFALSE 53579
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
53251: LD_VAR 0 12
53255: PUSH
53256: LD_VAR 0 7
53260: ARRAY
53261: PUSH
53262: LD_INT 1
53264: ARRAY
53265: PPUSH
53266: LD_VAR 0 12
53270: PUSH
53271: LD_VAR 0 7
53275: ARRAY
53276: PUSH
53277: LD_INT 2
53279: ARRAY
53280: PPUSH
53281: CALL_OW 488
53285: NOT
53286: PUSH
53287: LD_VAR 0 12
53291: PUSH
53292: LD_VAR 0 7
53296: ARRAY
53297: PUSH
53298: LD_INT 1
53300: ARRAY
53301: PPUSH
53302: LD_VAR 0 12
53306: PUSH
53307: LD_VAR 0 7
53311: ARRAY
53312: PUSH
53313: LD_INT 2
53315: ARRAY
53316: PPUSH
53317: CALL_OW 428
53321: PUSH
53322: LD_INT 0
53324: GREATER
53325: OR
53326: PUSH
53327: LD_VAR 0 12
53331: PUSH
53332: LD_VAR 0 7
53336: ARRAY
53337: PUSH
53338: LD_INT 1
53340: ARRAY
53341: PPUSH
53342: LD_VAR 0 12
53346: PUSH
53347: LD_VAR 0 7
53351: ARRAY
53352: PUSH
53353: LD_INT 2
53355: ARRAY
53356: PPUSH
53357: CALL_OW 351
53361: OR
53362: IFFALSE 53368
// exit ;
53364: POP
53365: POP
53366: GO 53660
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53368: LD_ADDR_VAR 0 8
53372: PUSH
53373: LD_VAR 0 12
53377: PUSH
53378: LD_VAR 0 7
53382: ARRAY
53383: PUSH
53384: LD_INT 1
53386: ARRAY
53387: PPUSH
53388: LD_VAR 0 12
53392: PUSH
53393: LD_VAR 0 7
53397: ARRAY
53398: PUSH
53399: LD_INT 2
53401: ARRAY
53402: PPUSH
53403: CALL_OW 546
53407: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
53408: LD_VAR 0 8
53412: PUSH
53413: LD_INT 1
53415: ARRAY
53416: PUSH
53417: LD_VAR 0 8
53421: PUSH
53422: LD_INT 2
53424: ARRAY
53425: PUSH
53426: LD_VAR 0 13
53430: PUSH
53431: LD_INT 2
53433: PLUS
53434: GREATER
53435: OR
53436: PUSH
53437: LD_VAR 0 8
53441: PUSH
53442: LD_INT 2
53444: ARRAY
53445: PUSH
53446: LD_VAR 0 13
53450: PUSH
53451: LD_INT 2
53453: MINUS
53454: LESS
53455: OR
53456: PUSH
53457: LD_VAR 0 8
53461: PUSH
53462: LD_INT 3
53464: ARRAY
53465: PUSH
53466: LD_INT 0
53468: PUSH
53469: LD_INT 8
53471: PUSH
53472: LD_INT 9
53474: PUSH
53475: LD_INT 10
53477: PUSH
53478: LD_INT 11
53480: PUSH
53481: LD_INT 12
53483: PUSH
53484: LD_INT 13
53486: PUSH
53487: LD_INT 16
53489: PUSH
53490: LD_INT 17
53492: PUSH
53493: LD_INT 18
53495: PUSH
53496: LD_INT 19
53498: PUSH
53499: LD_INT 20
53501: PUSH
53502: LD_INT 21
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: IN
53520: NOT
53521: OR
53522: PUSH
53523: LD_VAR 0 8
53527: PUSH
53528: LD_INT 5
53530: ARRAY
53531: NOT
53532: OR
53533: PUSH
53534: LD_VAR 0 8
53538: PUSH
53539: LD_INT 6
53541: ARRAY
53542: PUSH
53543: LD_INT 1
53545: PUSH
53546: LD_INT 2
53548: PUSH
53549: LD_INT 7
53551: PUSH
53552: LD_INT 9
53554: PUSH
53555: LD_INT 10
53557: PUSH
53558: LD_INT 11
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: LIST
53567: LIST
53568: IN
53569: NOT
53570: OR
53571: IFFALSE 53577
// exit ;
53573: POP
53574: POP
53575: GO 53660
// end ;
53577: GO 53248
53579: POP
53580: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
53581: LD_VAR 0 9
53585: PPUSH
53586: LD_VAR 0 3
53590: PPUSH
53591: LD_VAR 0 4
53595: PPUSH
53596: LD_INT 20
53598: PPUSH
53599: CALL 45612 0 4
53603: PUSH
53604: LD_INT 4
53606: ARRAY
53607: IFFALSE 53611
// exit ;
53609: GO 53660
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
53611: LD_VAR 0 2
53615: PUSH
53616: LD_INT 29
53618: PUSH
53619: LD_INT 30
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: IN
53626: PUSH
53627: LD_VAR 0 3
53631: PPUSH
53632: LD_VAR 0 4
53636: PPUSH
53637: LD_VAR 0 9
53641: PPUSH
53642: CALL_OW 440
53646: NOT
53647: AND
53648: IFFALSE 53652
// exit ;
53650: GO 53660
// result := true ;
53652: LD_ADDR_VAR 0 6
53656: PUSH
53657: LD_INT 1
53659: ST_TO_ADDR
// end ;
53660: LD_VAR 0 6
53664: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
53665: LD_INT 0
53667: PPUSH
53668: PPUSH
53669: PPUSH
53670: PPUSH
53671: PPUSH
53672: PPUSH
53673: PPUSH
53674: PPUSH
53675: PPUSH
53676: PPUSH
53677: PPUSH
53678: PPUSH
53679: PPUSH
53680: PPUSH
53681: PPUSH
53682: PPUSH
53683: PPUSH
53684: PPUSH
53685: PPUSH
53686: PPUSH
53687: PPUSH
53688: PPUSH
53689: PPUSH
53690: PPUSH
53691: PPUSH
53692: PPUSH
53693: PPUSH
53694: PPUSH
53695: PPUSH
53696: PPUSH
53697: PPUSH
53698: PPUSH
53699: PPUSH
53700: PPUSH
53701: PPUSH
53702: PPUSH
53703: PPUSH
53704: PPUSH
53705: PPUSH
53706: PPUSH
53707: PPUSH
53708: PPUSH
53709: PPUSH
53710: PPUSH
53711: PPUSH
53712: PPUSH
53713: PPUSH
53714: PPUSH
53715: PPUSH
53716: PPUSH
53717: PPUSH
53718: PPUSH
53719: PPUSH
53720: PPUSH
53721: PPUSH
53722: PPUSH
53723: PPUSH
53724: PPUSH
// result = [ ] ;
53725: LD_ADDR_VAR 0 7
53729: PUSH
53730: EMPTY
53731: ST_TO_ADDR
// temp_list = [ ] ;
53732: LD_ADDR_VAR 0 9
53736: PUSH
53737: EMPTY
53738: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
53739: LD_VAR 0 4
53743: PUSH
53744: LD_INT 0
53746: PUSH
53747: LD_INT 1
53749: PUSH
53750: LD_INT 2
53752: PUSH
53753: LD_INT 3
53755: PUSH
53756: LD_INT 4
53758: PUSH
53759: LD_INT 5
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: IN
53770: NOT
53771: PUSH
53772: LD_VAR 0 1
53776: PUSH
53777: LD_INT 0
53779: PUSH
53780: LD_INT 1
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: IN
53787: PUSH
53788: LD_VAR 0 5
53792: PUSH
53793: LD_INT 1
53795: PUSH
53796: LD_INT 2
53798: PUSH
53799: LD_INT 3
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: LIST
53806: IN
53807: NOT
53808: AND
53809: OR
53810: IFFALSE 53814
// exit ;
53812: GO 72205
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
53814: LD_VAR 0 1
53818: PUSH
53819: LD_INT 6
53821: PUSH
53822: LD_INT 7
53824: PUSH
53825: LD_INT 8
53827: PUSH
53828: LD_INT 13
53830: PUSH
53831: LD_INT 12
53833: PUSH
53834: LD_INT 15
53836: PUSH
53837: LD_INT 11
53839: PUSH
53840: LD_INT 14
53842: PUSH
53843: LD_INT 10
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: IN
53857: IFFALSE 53867
// btype = b_lab ;
53859: LD_ADDR_VAR 0 1
53863: PUSH
53864: LD_INT 6
53866: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
53867: LD_VAR 0 6
53871: PUSH
53872: LD_INT 0
53874: PUSH
53875: LD_INT 1
53877: PUSH
53878: LD_INT 2
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: LIST
53885: IN
53886: NOT
53887: PUSH
53888: LD_VAR 0 1
53892: PUSH
53893: LD_INT 0
53895: PUSH
53896: LD_INT 1
53898: PUSH
53899: LD_INT 2
53901: PUSH
53902: LD_INT 3
53904: PUSH
53905: LD_INT 6
53907: PUSH
53908: LD_INT 36
53910: PUSH
53911: LD_INT 4
53913: PUSH
53914: LD_INT 5
53916: PUSH
53917: LD_INT 31
53919: PUSH
53920: LD_INT 32
53922: PUSH
53923: LD_INT 33
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: LIST
53930: LIST
53931: LIST
53932: LIST
53933: LIST
53934: LIST
53935: LIST
53936: LIST
53937: LIST
53938: IN
53939: NOT
53940: PUSH
53941: LD_VAR 0 6
53945: PUSH
53946: LD_INT 1
53948: EQUAL
53949: AND
53950: OR
53951: PUSH
53952: LD_VAR 0 1
53956: PUSH
53957: LD_INT 2
53959: PUSH
53960: LD_INT 3
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: IN
53967: NOT
53968: PUSH
53969: LD_VAR 0 6
53973: PUSH
53974: LD_INT 2
53976: EQUAL
53977: AND
53978: OR
53979: IFFALSE 53989
// mode = 0 ;
53981: LD_ADDR_VAR 0 6
53985: PUSH
53986: LD_INT 0
53988: ST_TO_ADDR
// case mode of 0 :
53989: LD_VAR 0 6
53993: PUSH
53994: LD_INT 0
53996: DOUBLE
53997: EQUAL
53998: IFTRUE 54002
54000: GO 65455
54002: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54003: LD_ADDR_VAR 0 11
54007: PUSH
54008: LD_INT 0
54010: PUSH
54011: LD_INT 0
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 0
54020: PUSH
54021: LD_INT 1
54023: NEG
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 1
54031: PUSH
54032: LD_INT 0
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 1
54041: PUSH
54042: LD_INT 1
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 0
54051: PUSH
54052: LD_INT 1
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 1
54061: NEG
54062: PUSH
54063: LD_INT 0
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 1
54072: NEG
54073: PUSH
54074: LD_INT 1
54076: NEG
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 1
54084: NEG
54085: PUSH
54086: LD_INT 2
54088: NEG
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 0
54096: PUSH
54097: LD_INT 2
54099: NEG
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: PUSH
54105: LD_INT 1
54107: PUSH
54108: LD_INT 1
54110: NEG
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: LD_INT 1
54118: PUSH
54119: LD_INT 2
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 0
54128: PUSH
54129: LD_INT 2
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 1
54138: NEG
54139: PUSH
54140: LD_INT 1
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 1
54149: PUSH
54150: LD_INT 3
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: LD_INT 0
54159: PUSH
54160: LD_INT 3
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 1
54169: NEG
54170: PUSH
54171: LD_INT 2
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54196: LD_ADDR_VAR 0 12
54200: PUSH
54201: LD_INT 0
54203: PUSH
54204: LD_INT 0
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 0
54213: PUSH
54214: LD_INT 1
54216: NEG
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 1
54224: PUSH
54225: LD_INT 0
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 1
54234: PUSH
54235: LD_INT 1
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 0
54244: PUSH
54245: LD_INT 1
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: PUSH
54252: LD_INT 1
54254: NEG
54255: PUSH
54256: LD_INT 0
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: LD_INT 1
54265: NEG
54266: PUSH
54267: LD_INT 1
54269: NEG
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 1
54277: PUSH
54278: LD_INT 1
54280: NEG
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 2
54288: PUSH
54289: LD_INT 0
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 2
54298: PUSH
54299: LD_INT 1
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 1
54308: NEG
54309: PUSH
54310: LD_INT 1
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 2
54319: NEG
54320: PUSH
54321: LD_INT 0
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 2
54330: NEG
54331: PUSH
54332: LD_INT 1
54334: NEG
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 2
54342: NEG
54343: PUSH
54344: LD_INT 1
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 3
54353: NEG
54354: PUSH
54355: LD_INT 0
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: LD_INT 3
54364: NEG
54365: PUSH
54366: LD_INT 1
54368: NEG
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: LIST
54384: LIST
54385: LIST
54386: LIST
54387: LIST
54388: LIST
54389: LIST
54390: LIST
54391: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54392: LD_ADDR_VAR 0 13
54396: PUSH
54397: LD_INT 0
54399: PUSH
54400: LD_INT 0
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 0
54409: PUSH
54410: LD_INT 1
54412: NEG
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 1
54420: PUSH
54421: LD_INT 0
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 1
54430: PUSH
54431: LD_INT 1
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: LD_INT 0
54440: PUSH
54441: LD_INT 1
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 1
54450: NEG
54451: PUSH
54452: LD_INT 0
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: LD_INT 1
54461: NEG
54462: PUSH
54463: LD_INT 1
54465: NEG
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 1
54473: NEG
54474: PUSH
54475: LD_INT 2
54477: NEG
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 2
54485: PUSH
54486: LD_INT 1
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 2
54495: PUSH
54496: LD_INT 2
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 1
54505: PUSH
54506: LD_INT 2
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 2
54515: NEG
54516: PUSH
54517: LD_INT 1
54519: NEG
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 2
54527: NEG
54528: PUSH
54529: LD_INT 2
54531: NEG
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 2
54539: NEG
54540: PUSH
54541: LD_INT 3
54543: NEG
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 3
54551: NEG
54552: PUSH
54553: LD_INT 2
54555: NEG
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 3
54563: NEG
54564: PUSH
54565: LD_INT 3
54567: NEG
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54591: LD_ADDR_VAR 0 14
54595: PUSH
54596: LD_INT 0
54598: PUSH
54599: LD_INT 0
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 0
54608: PUSH
54609: LD_INT 1
54611: NEG
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: LD_INT 1
54619: PUSH
54620: LD_INT 0
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 1
54629: PUSH
54630: LD_INT 1
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 0
54639: PUSH
54640: LD_INT 1
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 1
54649: NEG
54650: PUSH
54651: LD_INT 0
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 1
54660: NEG
54661: PUSH
54662: LD_INT 1
54664: NEG
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 1
54672: NEG
54673: PUSH
54674: LD_INT 2
54676: NEG
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 0
54684: PUSH
54685: LD_INT 2
54687: NEG
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 1
54695: PUSH
54696: LD_INT 1
54698: NEG
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 1
54706: PUSH
54707: LD_INT 2
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PUSH
54714: LD_INT 0
54716: PUSH
54717: LD_INT 2
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 1
54726: NEG
54727: PUSH
54728: LD_INT 1
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 1
54737: NEG
54738: PUSH
54739: LD_INT 3
54741: NEG
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 0
54749: PUSH
54750: LD_INT 3
54752: NEG
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 1
54760: PUSH
54761: LD_INT 2
54763: NEG
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54787: LD_ADDR_VAR 0 15
54791: PUSH
54792: LD_INT 0
54794: PUSH
54795: LD_INT 0
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 0
54804: PUSH
54805: LD_INT 1
54807: NEG
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 1
54815: PUSH
54816: LD_INT 0
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 1
54825: PUSH
54826: LD_INT 1
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 0
54835: PUSH
54836: LD_INT 1
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 1
54845: NEG
54846: PUSH
54847: LD_INT 0
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 1
54856: NEG
54857: PUSH
54858: LD_INT 1
54860: NEG
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 1
54868: PUSH
54869: LD_INT 1
54871: NEG
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 2
54879: PUSH
54880: LD_INT 0
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 2
54889: PUSH
54890: LD_INT 1
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 1
54899: NEG
54900: PUSH
54901: LD_INT 1
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 2
54910: NEG
54911: PUSH
54912: LD_INT 0
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 2
54921: NEG
54922: PUSH
54923: LD_INT 1
54925: NEG
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 2
54933: PUSH
54934: LD_INT 1
54936: NEG
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 3
54944: PUSH
54945: LD_INT 0
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 3
54954: PUSH
54955: LD_INT 1
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: LIST
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54980: LD_ADDR_VAR 0 16
54984: PUSH
54985: LD_INT 0
54987: PUSH
54988: LD_INT 0
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_INT 0
54997: PUSH
54998: LD_INT 1
55000: NEG
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 1
55008: PUSH
55009: LD_INT 0
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 1
55018: PUSH
55019: LD_INT 1
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 0
55028: PUSH
55029: LD_INT 1
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 1
55038: NEG
55039: PUSH
55040: LD_INT 0
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_INT 1
55049: NEG
55050: PUSH
55051: LD_INT 1
55053: NEG
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: PUSH
55059: LD_INT 1
55061: NEG
55062: PUSH
55063: LD_INT 2
55065: NEG
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 2
55073: PUSH
55074: LD_INT 1
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 2
55083: PUSH
55084: LD_INT 2
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 1
55093: PUSH
55094: LD_INT 2
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 2
55103: NEG
55104: PUSH
55105: LD_INT 1
55107: NEG
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 2
55115: NEG
55116: PUSH
55117: LD_INT 2
55119: NEG
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: LD_INT 3
55127: PUSH
55128: LD_INT 2
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: LD_INT 3
55137: PUSH
55138: LD_INT 3
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 2
55147: PUSH
55148: LD_INT 3
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: LIST
55165: LIST
55166: LIST
55167: LIST
55168: LIST
55169: LIST
55170: LIST
55171: LIST
55172: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55173: LD_ADDR_VAR 0 17
55177: PUSH
55178: LD_INT 0
55180: PUSH
55181: LD_INT 0
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: LD_INT 0
55190: PUSH
55191: LD_INT 1
55193: NEG
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 1
55201: PUSH
55202: LD_INT 0
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 1
55211: PUSH
55212: LD_INT 1
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 0
55221: PUSH
55222: LD_INT 1
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 1
55231: NEG
55232: PUSH
55233: LD_INT 0
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 1
55242: NEG
55243: PUSH
55244: LD_INT 1
55246: NEG
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: LD_INT 1
55254: NEG
55255: PUSH
55256: LD_INT 2
55258: NEG
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 0
55266: PUSH
55267: LD_INT 2
55269: NEG
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 1
55277: PUSH
55278: LD_INT 1
55280: NEG
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 2
55288: PUSH
55289: LD_INT 0
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: LD_INT 2
55298: PUSH
55299: LD_INT 1
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 2
55308: PUSH
55309: LD_INT 2
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 1
55318: PUSH
55319: LD_INT 2
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 0
55328: PUSH
55329: LD_INT 2
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: LD_INT 1
55338: NEG
55339: PUSH
55340: LD_INT 1
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: LD_INT 2
55349: NEG
55350: PUSH
55351: LD_INT 0
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: LD_INT 2
55360: NEG
55361: PUSH
55362: LD_INT 1
55364: NEG
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 2
55372: NEG
55373: PUSH
55374: LD_INT 2
55376: NEG
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: LIST
55402: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55403: LD_ADDR_VAR 0 18
55407: PUSH
55408: LD_INT 0
55410: PUSH
55411: LD_INT 0
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: LD_INT 0
55420: PUSH
55421: LD_INT 1
55423: NEG
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 1
55431: PUSH
55432: LD_INT 0
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 1
55441: PUSH
55442: LD_INT 1
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 0
55451: PUSH
55452: LD_INT 1
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 1
55461: NEG
55462: PUSH
55463: LD_INT 0
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 1
55472: NEG
55473: PUSH
55474: LD_INT 1
55476: NEG
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: LD_INT 1
55484: NEG
55485: PUSH
55486: LD_INT 2
55488: NEG
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 0
55496: PUSH
55497: LD_INT 2
55499: NEG
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 1
55507: PUSH
55508: LD_INT 1
55510: NEG
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 2
55518: PUSH
55519: LD_INT 0
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: LD_INT 2
55528: PUSH
55529: LD_INT 1
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 2
55538: PUSH
55539: LD_INT 2
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 1
55548: PUSH
55549: LD_INT 2
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 0
55558: PUSH
55559: LD_INT 2
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: PUSH
55566: LD_INT 1
55568: NEG
55569: PUSH
55570: LD_INT 1
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 2
55579: NEG
55580: PUSH
55581: LD_INT 0
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PUSH
55588: LD_INT 2
55590: NEG
55591: PUSH
55592: LD_INT 1
55594: NEG
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: LD_INT 2
55602: NEG
55603: PUSH
55604: LD_INT 2
55606: NEG
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: LIST
55623: LIST
55624: LIST
55625: LIST
55626: LIST
55627: LIST
55628: LIST
55629: LIST
55630: LIST
55631: LIST
55632: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55633: LD_ADDR_VAR 0 19
55637: PUSH
55638: LD_INT 0
55640: PUSH
55641: LD_INT 0
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: LD_INT 0
55650: PUSH
55651: LD_INT 1
55653: NEG
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 1
55661: PUSH
55662: LD_INT 0
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 1
55671: PUSH
55672: LD_INT 1
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 0
55681: PUSH
55682: LD_INT 1
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 1
55691: NEG
55692: PUSH
55693: LD_INT 0
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 1
55702: NEG
55703: PUSH
55704: LD_INT 1
55706: NEG
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: LD_INT 1
55714: NEG
55715: PUSH
55716: LD_INT 2
55718: NEG
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 0
55726: PUSH
55727: LD_INT 2
55729: NEG
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 1
55737: PUSH
55738: LD_INT 1
55740: NEG
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 2
55748: PUSH
55749: LD_INT 0
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 2
55758: PUSH
55759: LD_INT 1
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 2
55768: PUSH
55769: LD_INT 2
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 1
55778: PUSH
55779: LD_INT 2
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 0
55788: PUSH
55789: LD_INT 2
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 1
55798: NEG
55799: PUSH
55800: LD_INT 1
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: LD_INT 2
55809: NEG
55810: PUSH
55811: LD_INT 0
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: LD_INT 2
55820: NEG
55821: PUSH
55822: LD_INT 1
55824: NEG
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: PUSH
55830: LD_INT 2
55832: NEG
55833: PUSH
55834: LD_INT 2
55836: NEG
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: LIST
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55863: LD_ADDR_VAR 0 20
55867: PUSH
55868: LD_INT 0
55870: PUSH
55871: LD_INT 0
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: PUSH
55878: LD_INT 0
55880: PUSH
55881: LD_INT 1
55883: NEG
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 1
55891: PUSH
55892: LD_INT 0
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 1
55901: PUSH
55902: LD_INT 1
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 0
55911: PUSH
55912: LD_INT 1
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 1
55921: NEG
55922: PUSH
55923: LD_INT 0
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 1
55932: NEG
55933: PUSH
55934: LD_INT 1
55936: NEG
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 1
55944: NEG
55945: PUSH
55946: LD_INT 2
55948: NEG
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: PUSH
55954: LD_INT 0
55956: PUSH
55957: LD_INT 2
55959: NEG
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: LD_INT 1
55967: PUSH
55968: LD_INT 1
55970: NEG
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: LD_INT 2
55978: PUSH
55979: LD_INT 0
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: LD_INT 2
55988: PUSH
55989: LD_INT 1
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: PUSH
55996: LD_INT 2
55998: PUSH
55999: LD_INT 2
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: PUSH
56006: LD_INT 1
56008: PUSH
56009: LD_INT 2
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 0
56018: PUSH
56019: LD_INT 2
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: LD_INT 1
56028: NEG
56029: PUSH
56030: LD_INT 1
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 2
56039: NEG
56040: PUSH
56041: LD_INT 0
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PUSH
56048: LD_INT 2
56050: NEG
56051: PUSH
56052: LD_INT 1
56054: NEG
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 2
56062: NEG
56063: PUSH
56064: LD_INT 2
56066: NEG
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56093: LD_ADDR_VAR 0 21
56097: PUSH
56098: LD_INT 0
56100: PUSH
56101: LD_INT 0
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: LD_INT 0
56110: PUSH
56111: LD_INT 1
56113: NEG
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 1
56121: PUSH
56122: LD_INT 0
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 1
56131: PUSH
56132: LD_INT 1
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 0
56141: PUSH
56142: LD_INT 1
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 1
56151: NEG
56152: PUSH
56153: LD_INT 0
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 1
56162: NEG
56163: PUSH
56164: LD_INT 1
56166: NEG
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 1
56174: NEG
56175: PUSH
56176: LD_INT 2
56178: NEG
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 0
56186: PUSH
56187: LD_INT 2
56189: NEG
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 1
56197: PUSH
56198: LD_INT 1
56200: NEG
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 2
56208: PUSH
56209: LD_INT 0
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 2
56218: PUSH
56219: LD_INT 1
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: PUSH
56226: LD_INT 2
56228: PUSH
56229: LD_INT 2
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: LD_INT 1
56238: PUSH
56239: LD_INT 2
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 0
56248: PUSH
56249: LD_INT 2
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 1
56258: NEG
56259: PUSH
56260: LD_INT 1
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 2
56269: NEG
56270: PUSH
56271: LD_INT 0
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 2
56280: NEG
56281: PUSH
56282: LD_INT 1
56284: NEG
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: LD_INT 2
56292: NEG
56293: PUSH
56294: LD_INT 2
56296: NEG
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: LIST
56320: LIST
56321: LIST
56322: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56323: LD_ADDR_VAR 0 22
56327: PUSH
56328: LD_INT 0
56330: PUSH
56331: LD_INT 0
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: PUSH
56338: LD_INT 0
56340: PUSH
56341: LD_INT 1
56343: NEG
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 1
56351: PUSH
56352: LD_INT 0
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: LD_INT 1
56361: PUSH
56362: LD_INT 1
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 0
56371: PUSH
56372: LD_INT 1
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: LD_INT 1
56381: NEG
56382: PUSH
56383: LD_INT 0
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 1
56392: NEG
56393: PUSH
56394: LD_INT 1
56396: NEG
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 1
56404: NEG
56405: PUSH
56406: LD_INT 2
56408: NEG
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 0
56416: PUSH
56417: LD_INT 2
56419: NEG
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: LD_INT 1
56427: PUSH
56428: LD_INT 1
56430: NEG
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: LD_INT 2
56438: PUSH
56439: LD_INT 0
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: LD_INT 2
56448: PUSH
56449: LD_INT 1
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: PUSH
56456: LD_INT 2
56458: PUSH
56459: LD_INT 2
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 1
56468: PUSH
56469: LD_INT 2
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 0
56478: PUSH
56479: LD_INT 2
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 1
56488: NEG
56489: PUSH
56490: LD_INT 1
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 2
56499: NEG
56500: PUSH
56501: LD_INT 0
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 2
56510: NEG
56511: PUSH
56512: LD_INT 1
56514: NEG
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: LD_INT 2
56522: NEG
56523: PUSH
56524: LD_INT 2
56526: NEG
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56553: LD_ADDR_VAR 0 23
56557: PUSH
56558: LD_INT 0
56560: PUSH
56561: LD_INT 0
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 0
56570: PUSH
56571: LD_INT 1
56573: NEG
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: PUSH
56579: LD_INT 1
56581: PUSH
56582: LD_INT 0
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 1
56591: PUSH
56592: LD_INT 1
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 0
56601: PUSH
56602: LD_INT 1
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 1
56611: NEG
56612: PUSH
56613: LD_INT 0
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 1
56622: NEG
56623: PUSH
56624: LD_INT 1
56626: NEG
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 1
56634: NEG
56635: PUSH
56636: LD_INT 2
56638: NEG
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: PUSH
56644: LD_INT 0
56646: PUSH
56647: LD_INT 2
56649: NEG
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 1
56657: PUSH
56658: LD_INT 1
56660: NEG
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 2
56668: PUSH
56669: LD_INT 0
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 2
56678: PUSH
56679: LD_INT 1
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 2
56688: PUSH
56689: LD_INT 2
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 1
56698: PUSH
56699: LD_INT 2
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 0
56708: PUSH
56709: LD_INT 2
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: PUSH
56716: LD_INT 1
56718: NEG
56719: PUSH
56720: LD_INT 1
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: PUSH
56727: LD_INT 2
56729: NEG
56730: PUSH
56731: LD_INT 0
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 2
56740: NEG
56741: PUSH
56742: LD_INT 1
56744: NEG
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: LD_INT 2
56752: NEG
56753: PUSH
56754: LD_INT 2
56756: NEG
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: PUSH
56762: LD_INT 2
56764: NEG
56765: PUSH
56766: LD_INT 3
56768: NEG
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 1
56776: NEG
56777: PUSH
56778: LD_INT 3
56780: NEG
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: PUSH
56786: LD_INT 1
56788: PUSH
56789: LD_INT 2
56791: NEG
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: LD_INT 2
56799: PUSH
56800: LD_INT 1
56802: NEG
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: LIST
56832: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
56833: LD_ADDR_VAR 0 24
56837: PUSH
56838: LD_INT 0
56840: PUSH
56841: LD_INT 0
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 0
56850: PUSH
56851: LD_INT 1
56853: NEG
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_INT 1
56861: PUSH
56862: LD_INT 0
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 1
56871: PUSH
56872: LD_INT 1
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: LD_INT 0
56881: PUSH
56882: LD_INT 1
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: LD_INT 1
56891: NEG
56892: PUSH
56893: LD_INT 0
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: LD_INT 1
56902: NEG
56903: PUSH
56904: LD_INT 1
56906: NEG
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 1
56914: NEG
56915: PUSH
56916: LD_INT 2
56918: NEG
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: LD_INT 0
56926: PUSH
56927: LD_INT 2
56929: NEG
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: PUSH
56935: LD_INT 1
56937: PUSH
56938: LD_INT 1
56940: NEG
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: LD_INT 2
56948: PUSH
56949: LD_INT 0
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: PUSH
56956: LD_INT 2
56958: PUSH
56959: LD_INT 1
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 2
56968: PUSH
56969: LD_INT 2
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 1
56978: PUSH
56979: LD_INT 2
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: LD_INT 0
56988: PUSH
56989: LD_INT 2
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 1
56998: NEG
56999: PUSH
57000: LD_INT 1
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: LD_INT 2
57009: NEG
57010: PUSH
57011: LD_INT 0
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: LD_INT 2
57020: NEG
57021: PUSH
57022: LD_INT 1
57024: NEG
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 2
57032: NEG
57033: PUSH
57034: LD_INT 2
57036: NEG
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: LD_INT 1
57044: PUSH
57045: LD_INT 2
57047: NEG
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 2
57055: PUSH
57056: LD_INT 1
57058: NEG
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 3
57066: PUSH
57067: LD_INT 1
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: LD_INT 3
57076: PUSH
57077: LD_INT 2
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: LIST
57105: LIST
57106: LIST
57107: LIST
57108: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
57109: LD_ADDR_VAR 0 25
57113: PUSH
57114: LD_INT 0
57116: PUSH
57117: LD_INT 0
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 0
57126: PUSH
57127: LD_INT 1
57129: NEG
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: LD_INT 1
57137: PUSH
57138: LD_INT 0
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PUSH
57145: LD_INT 1
57147: PUSH
57148: LD_INT 1
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: PUSH
57155: LD_INT 0
57157: PUSH
57158: LD_INT 1
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 1
57167: NEG
57168: PUSH
57169: LD_INT 0
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 1
57178: NEG
57179: PUSH
57180: LD_INT 1
57182: NEG
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 1
57190: NEG
57191: PUSH
57192: LD_INT 2
57194: NEG
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 0
57202: PUSH
57203: LD_INT 2
57205: NEG
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 1
57213: PUSH
57214: LD_INT 1
57216: NEG
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PUSH
57222: LD_INT 2
57224: PUSH
57225: LD_INT 0
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 2
57234: PUSH
57235: LD_INT 1
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: LD_INT 2
57244: PUSH
57245: LD_INT 2
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PUSH
57252: LD_INT 1
57254: PUSH
57255: LD_INT 2
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: LD_INT 0
57264: PUSH
57265: LD_INT 2
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 1
57274: NEG
57275: PUSH
57276: LD_INT 1
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 2
57285: NEG
57286: PUSH
57287: LD_INT 0
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 2
57296: NEG
57297: PUSH
57298: LD_INT 1
57300: NEG
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 2
57308: NEG
57309: PUSH
57310: LD_INT 2
57312: NEG
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: LD_INT 3
57320: PUSH
57321: LD_INT 1
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_INT 3
57330: PUSH
57331: LD_INT 2
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: PUSH
57338: LD_INT 2
57340: PUSH
57341: LD_INT 3
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PUSH
57348: LD_INT 1
57350: PUSH
57351: LD_INT 3
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: LIST
57362: LIST
57363: LIST
57364: LIST
57365: LIST
57366: LIST
57367: LIST
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: LIST
57374: LIST
57375: LIST
57376: LIST
57377: LIST
57378: LIST
57379: LIST
57380: LIST
57381: LIST
57382: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57383: LD_ADDR_VAR 0 26
57387: PUSH
57388: LD_INT 0
57390: PUSH
57391: LD_INT 0
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: LD_INT 0
57400: PUSH
57401: LD_INT 1
57403: NEG
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 1
57411: PUSH
57412: LD_INT 0
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: LD_INT 1
57421: PUSH
57422: LD_INT 1
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 0
57431: PUSH
57432: LD_INT 1
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 1
57441: NEG
57442: PUSH
57443: LD_INT 0
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PUSH
57450: LD_INT 1
57452: NEG
57453: PUSH
57454: LD_INT 1
57456: NEG
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 1
57464: NEG
57465: PUSH
57466: LD_INT 2
57468: NEG
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PUSH
57474: LD_INT 0
57476: PUSH
57477: LD_INT 2
57479: NEG
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 1
57487: PUSH
57488: LD_INT 1
57490: NEG
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 2
57498: PUSH
57499: LD_INT 0
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 2
57508: PUSH
57509: LD_INT 1
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: LD_INT 2
57518: PUSH
57519: LD_INT 2
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 1
57528: PUSH
57529: LD_INT 2
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: PUSH
57536: LD_INT 0
57538: PUSH
57539: LD_INT 2
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: PUSH
57546: LD_INT 1
57548: NEG
57549: PUSH
57550: LD_INT 1
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: LD_INT 2
57559: NEG
57560: PUSH
57561: LD_INT 0
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: LD_INT 2
57570: NEG
57571: PUSH
57572: LD_INT 1
57574: NEG
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: LD_INT 2
57582: NEG
57583: PUSH
57584: LD_INT 2
57586: NEG
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: PUSH
57592: LD_INT 2
57594: PUSH
57595: LD_INT 3
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: LD_INT 1
57604: PUSH
57605: LD_INT 3
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: LD_INT 1
57614: NEG
57615: PUSH
57616: LD_INT 2
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 2
57625: NEG
57626: PUSH
57627: LD_INT 1
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57659: LD_ADDR_VAR 0 27
57663: PUSH
57664: LD_INT 0
57666: PUSH
57667: LD_INT 0
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: LD_INT 0
57676: PUSH
57677: LD_INT 1
57679: NEG
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: PUSH
57685: LD_INT 1
57687: PUSH
57688: LD_INT 0
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 1
57697: PUSH
57698: LD_INT 1
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: PUSH
57705: LD_INT 0
57707: PUSH
57708: LD_INT 1
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: PUSH
57715: LD_INT 1
57717: NEG
57718: PUSH
57719: LD_INT 0
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: LD_INT 1
57728: NEG
57729: PUSH
57730: LD_INT 1
57732: NEG
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 1
57740: NEG
57741: PUSH
57742: LD_INT 2
57744: NEG
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 0
57752: PUSH
57753: LD_INT 2
57755: NEG
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 1
57763: PUSH
57764: LD_INT 1
57766: NEG
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 2
57774: PUSH
57775: LD_INT 0
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: LD_INT 2
57784: PUSH
57785: LD_INT 1
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: LD_INT 2
57794: PUSH
57795: LD_INT 2
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 1
57804: PUSH
57805: LD_INT 2
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: LD_INT 0
57814: PUSH
57815: LD_INT 2
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 1
57824: NEG
57825: PUSH
57826: LD_INT 1
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: LD_INT 2
57835: NEG
57836: PUSH
57837: LD_INT 0
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 2
57846: NEG
57847: PUSH
57848: LD_INT 1
57850: NEG
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: LD_INT 2
57858: NEG
57859: PUSH
57860: LD_INT 2
57862: NEG
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PUSH
57868: LD_INT 1
57870: NEG
57871: PUSH
57872: LD_INT 2
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 2
57881: NEG
57882: PUSH
57883: LD_INT 1
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 3
57892: NEG
57893: PUSH
57894: LD_INT 1
57896: NEG
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 3
57904: NEG
57905: PUSH
57906: LD_INT 2
57908: NEG
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: LIST
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: LIST
57923: LIST
57924: LIST
57925: LIST
57926: LIST
57927: LIST
57928: LIST
57929: LIST
57930: LIST
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57939: LD_ADDR_VAR 0 28
57943: PUSH
57944: LD_INT 0
57946: PUSH
57947: LD_INT 0
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 0
57956: PUSH
57957: LD_INT 1
57959: NEG
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: PUSH
57965: LD_INT 1
57967: PUSH
57968: LD_INT 0
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: LD_INT 1
57977: PUSH
57978: LD_INT 1
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: LD_INT 0
57987: PUSH
57988: LD_INT 1
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 1
57997: NEG
57998: PUSH
57999: LD_INT 0
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 1
58008: NEG
58009: PUSH
58010: LD_INT 1
58012: NEG
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 1
58020: NEG
58021: PUSH
58022: LD_INT 2
58024: NEG
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 0
58032: PUSH
58033: LD_INT 2
58035: NEG
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 1
58043: PUSH
58044: LD_INT 1
58046: NEG
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 2
58054: PUSH
58055: LD_INT 0
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: PUSH
58062: LD_INT 2
58064: PUSH
58065: LD_INT 1
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: LD_INT 2
58074: PUSH
58075: LD_INT 2
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 1
58084: PUSH
58085: LD_INT 2
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 0
58094: PUSH
58095: LD_INT 2
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 1
58104: NEG
58105: PUSH
58106: LD_INT 1
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 2
58115: NEG
58116: PUSH
58117: LD_INT 0
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 2
58126: NEG
58127: PUSH
58128: LD_INT 1
58130: NEG
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 2
58138: NEG
58139: PUSH
58140: LD_INT 2
58142: NEG
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 2
58150: NEG
58151: PUSH
58152: LD_INT 3
58154: NEG
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: PUSH
58160: LD_INT 1
58162: NEG
58163: PUSH
58164: LD_INT 3
58166: NEG
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: PUSH
58172: LD_INT 3
58174: NEG
58175: PUSH
58176: LD_INT 1
58178: NEG
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 3
58186: NEG
58187: PUSH
58188: LD_INT 2
58190: NEG
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58221: LD_ADDR_VAR 0 29
58225: PUSH
58226: LD_INT 0
58228: PUSH
58229: LD_INT 0
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 0
58238: PUSH
58239: LD_INT 1
58241: NEG
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 1
58249: PUSH
58250: LD_INT 0
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: LD_INT 1
58259: PUSH
58260: LD_INT 1
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: LD_INT 0
58269: PUSH
58270: LD_INT 1
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: LD_INT 1
58279: NEG
58280: PUSH
58281: LD_INT 0
58283: PUSH
58284: EMPTY
58285: LIST
58286: LIST
58287: PUSH
58288: LD_INT 1
58290: NEG
58291: PUSH
58292: LD_INT 1
58294: NEG
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: LD_INT 1
58302: NEG
58303: PUSH
58304: LD_INT 2
58306: NEG
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: LD_INT 0
58314: PUSH
58315: LD_INT 2
58317: NEG
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: LD_INT 1
58325: PUSH
58326: LD_INT 1
58328: NEG
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: LD_INT 2
58336: PUSH
58337: LD_INT 0
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 2
58346: PUSH
58347: LD_INT 1
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PUSH
58354: LD_INT 1
58356: PUSH
58357: LD_INT 2
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 0
58366: PUSH
58367: LD_INT 2
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 1
58376: NEG
58377: PUSH
58378: LD_INT 1
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 2
58387: NEG
58388: PUSH
58389: LD_INT 1
58391: NEG
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: PUSH
58397: LD_INT 2
58399: NEG
58400: PUSH
58401: LD_INT 2
58403: NEG
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 2
58411: NEG
58412: PUSH
58413: LD_INT 3
58415: NEG
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: LD_INT 2
58423: PUSH
58424: LD_INT 1
58426: NEG
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 3
58434: PUSH
58435: LD_INT 1
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 1
58444: PUSH
58445: LD_INT 3
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 1
58454: NEG
58455: PUSH
58456: LD_INT 2
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 3
58465: NEG
58466: PUSH
58467: LD_INT 2
58469: NEG
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: LIST
58479: LIST
58480: LIST
58481: LIST
58482: LIST
58483: LIST
58484: LIST
58485: LIST
58486: LIST
58487: LIST
58488: LIST
58489: LIST
58490: LIST
58491: LIST
58492: LIST
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58500: LD_ADDR_VAR 0 30
58504: PUSH
58505: LD_INT 0
58507: PUSH
58508: LD_INT 0
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: PUSH
58515: LD_INT 0
58517: PUSH
58518: LD_INT 1
58520: NEG
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PUSH
58526: LD_INT 1
58528: PUSH
58529: LD_INT 0
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: LD_INT 1
58538: PUSH
58539: LD_INT 1
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 0
58548: PUSH
58549: LD_INT 1
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 1
58558: NEG
58559: PUSH
58560: LD_INT 0
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 1
58569: NEG
58570: PUSH
58571: LD_INT 1
58573: NEG
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 1
58581: NEG
58582: PUSH
58583: LD_INT 2
58585: NEG
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: LD_INT 0
58593: PUSH
58594: LD_INT 2
58596: NEG
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: PUSH
58602: LD_INT 1
58604: PUSH
58605: LD_INT 1
58607: NEG
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: LD_INT 2
58615: PUSH
58616: LD_INT 0
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: PUSH
58623: LD_INT 2
58625: PUSH
58626: LD_INT 1
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 2
58635: PUSH
58636: LD_INT 2
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: LD_INT 1
58645: PUSH
58646: LD_INT 2
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: LD_INT 1
58655: NEG
58656: PUSH
58657: LD_INT 1
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: PUSH
58664: LD_INT 2
58666: NEG
58667: PUSH
58668: LD_INT 0
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: LD_INT 2
58677: NEG
58678: PUSH
58679: LD_INT 1
58681: NEG
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: PUSH
58687: LD_INT 1
58689: NEG
58690: PUSH
58691: LD_INT 3
58693: NEG
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: LD_INT 1
58701: PUSH
58702: LD_INT 2
58704: NEG
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: PUSH
58710: LD_INT 3
58712: PUSH
58713: LD_INT 2
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: PUSH
58720: LD_INT 2
58722: PUSH
58723: LD_INT 3
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 2
58732: NEG
58733: PUSH
58734: LD_INT 1
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 3
58743: NEG
58744: PUSH
58745: LD_INT 1
58747: NEG
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: LIST
58757: LIST
58758: LIST
58759: LIST
58760: LIST
58761: LIST
58762: LIST
58763: LIST
58764: LIST
58765: LIST
58766: LIST
58767: LIST
58768: LIST
58769: LIST
58770: LIST
58771: LIST
58772: LIST
58773: LIST
58774: LIST
58775: LIST
58776: LIST
58777: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58778: LD_ADDR_VAR 0 31
58782: PUSH
58783: LD_INT 0
58785: PUSH
58786: LD_INT 0
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 0
58795: PUSH
58796: LD_INT 1
58798: NEG
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: LD_INT 1
58806: PUSH
58807: LD_INT 0
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 1
58816: PUSH
58817: LD_INT 1
58819: PUSH
58820: EMPTY
58821: LIST
58822: LIST
58823: PUSH
58824: LD_INT 0
58826: PUSH
58827: LD_INT 1
58829: PUSH
58830: EMPTY
58831: LIST
58832: LIST
58833: PUSH
58834: LD_INT 1
58836: NEG
58837: PUSH
58838: LD_INT 0
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: LD_INT 1
58847: NEG
58848: PUSH
58849: LD_INT 1
58851: NEG
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 1
58859: NEG
58860: PUSH
58861: LD_INT 2
58863: NEG
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: LD_INT 1
58871: PUSH
58872: LD_INT 1
58874: NEG
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PUSH
58880: LD_INT 2
58882: PUSH
58883: LD_INT 0
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: LD_INT 2
58892: PUSH
58893: LD_INT 1
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: PUSH
58900: LD_INT 2
58902: PUSH
58903: LD_INT 2
58905: PUSH
58906: EMPTY
58907: LIST
58908: LIST
58909: PUSH
58910: LD_INT 1
58912: PUSH
58913: LD_INT 2
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 0
58922: PUSH
58923: LD_INT 2
58925: PUSH
58926: EMPTY
58927: LIST
58928: LIST
58929: PUSH
58930: LD_INT 1
58932: NEG
58933: PUSH
58934: LD_INT 1
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: PUSH
58941: LD_INT 2
58943: NEG
58944: PUSH
58945: LD_INT 1
58947: NEG
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: PUSH
58953: LD_INT 2
58955: NEG
58956: PUSH
58957: LD_INT 2
58959: NEG
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: PUSH
58965: LD_INT 2
58967: NEG
58968: PUSH
58969: LD_INT 3
58971: NEG
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: PUSH
58977: LD_INT 2
58979: PUSH
58980: LD_INT 1
58982: NEG
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 3
58990: PUSH
58991: LD_INT 1
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 1
59000: PUSH
59001: LD_INT 3
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_INT 1
59010: NEG
59011: PUSH
59012: LD_INT 2
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: PUSH
59019: LD_INT 3
59021: NEG
59022: PUSH
59023: LD_INT 2
59025: NEG
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: LIST
59035: LIST
59036: LIST
59037: LIST
59038: LIST
59039: LIST
59040: LIST
59041: LIST
59042: LIST
59043: LIST
59044: LIST
59045: LIST
59046: LIST
59047: LIST
59048: LIST
59049: LIST
59050: LIST
59051: LIST
59052: LIST
59053: LIST
59054: LIST
59055: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59056: LD_ADDR_VAR 0 32
59060: PUSH
59061: LD_INT 0
59063: PUSH
59064: LD_INT 0
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 0
59073: PUSH
59074: LD_INT 1
59076: NEG
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 1
59084: PUSH
59085: LD_INT 0
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 1
59094: PUSH
59095: LD_INT 1
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 0
59104: PUSH
59105: LD_INT 1
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 1
59114: NEG
59115: PUSH
59116: LD_INT 0
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 1
59125: NEG
59126: PUSH
59127: LD_INT 1
59129: NEG
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: PUSH
59135: LD_INT 1
59137: NEG
59138: PUSH
59139: LD_INT 2
59141: NEG
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: LD_INT 0
59149: PUSH
59150: LD_INT 2
59152: NEG
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: LD_INT 1
59160: PUSH
59161: LD_INT 1
59163: NEG
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 2
59171: PUSH
59172: LD_INT 1
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: PUSH
59179: LD_INT 2
59181: PUSH
59182: LD_INT 2
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: PUSH
59189: LD_INT 1
59191: PUSH
59192: LD_INT 2
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: LD_INT 0
59201: PUSH
59202: LD_INT 2
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PUSH
59209: LD_INT 1
59211: NEG
59212: PUSH
59213: LD_INT 1
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 2
59222: NEG
59223: PUSH
59224: LD_INT 0
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 2
59233: NEG
59234: PUSH
59235: LD_INT 1
59237: NEG
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: PUSH
59243: LD_INT 1
59245: NEG
59246: PUSH
59247: LD_INT 3
59249: NEG
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: PUSH
59255: LD_INT 1
59257: PUSH
59258: LD_INT 2
59260: NEG
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 3
59268: PUSH
59269: LD_INT 2
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PUSH
59276: LD_INT 2
59278: PUSH
59279: LD_INT 3
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PUSH
59286: LD_INT 2
59288: NEG
59289: PUSH
59290: LD_INT 1
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 3
59299: NEG
59300: PUSH
59301: LD_INT 1
59303: NEG
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: LIST
59313: LIST
59314: LIST
59315: LIST
59316: LIST
59317: LIST
59318: LIST
59319: LIST
59320: LIST
59321: LIST
59322: LIST
59323: LIST
59324: LIST
59325: LIST
59326: LIST
59327: LIST
59328: LIST
59329: LIST
59330: LIST
59331: LIST
59332: LIST
59333: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59334: LD_ADDR_VAR 0 33
59338: PUSH
59339: LD_INT 0
59341: PUSH
59342: LD_INT 0
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: PUSH
59349: LD_INT 0
59351: PUSH
59352: LD_INT 1
59354: NEG
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: LD_INT 1
59362: PUSH
59363: LD_INT 0
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: PUSH
59370: LD_INT 1
59372: PUSH
59373: LD_INT 1
59375: PUSH
59376: EMPTY
59377: LIST
59378: LIST
59379: PUSH
59380: LD_INT 0
59382: PUSH
59383: LD_INT 1
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 1
59392: NEG
59393: PUSH
59394: LD_INT 0
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: LD_INT 1
59403: NEG
59404: PUSH
59405: LD_INT 1
59407: NEG
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: LD_INT 1
59415: NEG
59416: PUSH
59417: LD_INT 2
59419: NEG
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 1
59427: PUSH
59428: LD_INT 1
59430: NEG
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 2
59438: PUSH
59439: LD_INT 0
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: PUSH
59446: LD_INT 2
59448: PUSH
59449: LD_INT 1
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: PUSH
59456: LD_INT 1
59458: PUSH
59459: LD_INT 2
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: PUSH
59466: LD_INT 0
59468: PUSH
59469: LD_INT 2
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: PUSH
59476: LD_INT 1
59478: NEG
59479: PUSH
59480: LD_INT 1
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: PUSH
59487: LD_INT 2
59489: NEG
59490: PUSH
59491: LD_INT 0
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 2
59500: NEG
59501: PUSH
59502: LD_INT 1
59504: NEG
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: PUSH
59510: LD_INT 2
59512: NEG
59513: PUSH
59514: LD_INT 2
59516: NEG
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: LD_INT 2
59524: NEG
59525: PUSH
59526: LD_INT 3
59528: NEG
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: PUSH
59534: LD_INT 2
59536: PUSH
59537: LD_INT 1
59539: NEG
59540: PUSH
59541: EMPTY
59542: LIST
59543: LIST
59544: PUSH
59545: LD_INT 3
59547: PUSH
59548: LD_INT 1
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: PUSH
59555: LD_INT 1
59557: PUSH
59558: LD_INT 3
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 1
59567: NEG
59568: PUSH
59569: LD_INT 2
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: LD_INT 3
59578: NEG
59579: PUSH
59580: LD_INT 2
59582: NEG
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: LIST
59592: LIST
59593: LIST
59594: LIST
59595: LIST
59596: LIST
59597: LIST
59598: LIST
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: LIST
59604: LIST
59605: LIST
59606: LIST
59607: LIST
59608: LIST
59609: LIST
59610: LIST
59611: LIST
59612: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59613: LD_ADDR_VAR 0 34
59617: PUSH
59618: LD_INT 0
59620: PUSH
59621: LD_INT 0
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: PUSH
59628: LD_INT 0
59630: PUSH
59631: LD_INT 1
59633: NEG
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: PUSH
59639: LD_INT 1
59641: PUSH
59642: LD_INT 0
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: PUSH
59649: LD_INT 1
59651: PUSH
59652: LD_INT 1
59654: PUSH
59655: EMPTY
59656: LIST
59657: LIST
59658: PUSH
59659: LD_INT 0
59661: PUSH
59662: LD_INT 1
59664: PUSH
59665: EMPTY
59666: LIST
59667: LIST
59668: PUSH
59669: LD_INT 1
59671: NEG
59672: PUSH
59673: LD_INT 0
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: LD_INT 1
59682: NEG
59683: PUSH
59684: LD_INT 1
59686: NEG
59687: PUSH
59688: EMPTY
59689: LIST
59690: LIST
59691: PUSH
59692: LD_INT 1
59694: NEG
59695: PUSH
59696: LD_INT 2
59698: NEG
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: PUSH
59704: LD_INT 0
59706: PUSH
59707: LD_INT 2
59709: NEG
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: PUSH
59715: LD_INT 1
59717: PUSH
59718: LD_INT 1
59720: NEG
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: LD_INT 2
59728: PUSH
59729: LD_INT 1
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: PUSH
59736: LD_INT 2
59738: PUSH
59739: LD_INT 2
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 1
59748: PUSH
59749: LD_INT 2
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PUSH
59756: LD_INT 1
59758: NEG
59759: PUSH
59760: LD_INT 1
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: LD_INT 2
59769: NEG
59770: PUSH
59771: LD_INT 0
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 2
59780: NEG
59781: PUSH
59782: LD_INT 1
59784: NEG
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: LD_INT 2
59792: NEG
59793: PUSH
59794: LD_INT 2
59796: NEG
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: LD_INT 1
59804: NEG
59805: PUSH
59806: LD_INT 3
59808: NEG
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: PUSH
59814: LD_INT 1
59816: PUSH
59817: LD_INT 2
59819: NEG
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: PUSH
59825: LD_INT 3
59827: PUSH
59828: LD_INT 2
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: PUSH
59835: LD_INT 2
59837: PUSH
59838: LD_INT 3
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: PUSH
59845: LD_INT 2
59847: NEG
59848: PUSH
59849: LD_INT 1
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: LD_INT 3
59858: NEG
59859: PUSH
59860: LD_INT 1
59862: NEG
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: LIST
59872: LIST
59873: LIST
59874: LIST
59875: LIST
59876: LIST
59877: LIST
59878: LIST
59879: LIST
59880: LIST
59881: LIST
59882: LIST
59883: LIST
59884: LIST
59885: LIST
59886: LIST
59887: LIST
59888: LIST
59889: LIST
59890: LIST
59891: LIST
59892: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59893: LD_ADDR_VAR 0 35
59897: PUSH
59898: LD_INT 0
59900: PUSH
59901: LD_INT 0
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: PUSH
59908: LD_INT 0
59910: PUSH
59911: LD_INT 1
59913: NEG
59914: PUSH
59915: EMPTY
59916: LIST
59917: LIST
59918: PUSH
59919: LD_INT 1
59921: PUSH
59922: LD_INT 0
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: LD_INT 1
59931: PUSH
59932: LD_INT 1
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: PUSH
59939: LD_INT 0
59941: PUSH
59942: LD_INT 1
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PUSH
59949: LD_INT 1
59951: NEG
59952: PUSH
59953: LD_INT 0
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: PUSH
59960: LD_INT 1
59962: NEG
59963: PUSH
59964: LD_INT 1
59966: NEG
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 2
59974: PUSH
59975: LD_INT 1
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 2
59984: NEG
59985: PUSH
59986: LD_INT 1
59988: NEG
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: LIST
59998: LIST
59999: LIST
60000: LIST
60001: LIST
60002: LIST
60003: LIST
60004: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60005: LD_ADDR_VAR 0 36
60009: PUSH
60010: LD_INT 0
60012: PUSH
60013: LD_INT 0
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: PUSH
60020: LD_INT 0
60022: PUSH
60023: LD_INT 1
60025: NEG
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: PUSH
60031: LD_INT 1
60033: PUSH
60034: LD_INT 0
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: LD_INT 1
60043: PUSH
60044: LD_INT 1
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: LD_INT 0
60053: PUSH
60054: LD_INT 1
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: LD_INT 1
60063: NEG
60064: PUSH
60065: LD_INT 0
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: LD_INT 1
60074: NEG
60075: PUSH
60076: LD_INT 1
60078: NEG
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: LD_INT 1
60086: NEG
60087: PUSH
60088: LD_INT 2
60090: NEG
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 1
60098: PUSH
60099: LD_INT 2
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: LIST
60110: LIST
60111: LIST
60112: LIST
60113: LIST
60114: LIST
60115: LIST
60116: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60117: LD_ADDR_VAR 0 37
60121: PUSH
60122: LD_INT 0
60124: PUSH
60125: LD_INT 0
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 0
60134: PUSH
60135: LD_INT 1
60137: NEG
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: LD_INT 1
60145: PUSH
60146: LD_INT 0
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: PUSH
60153: LD_INT 1
60155: PUSH
60156: LD_INT 1
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PUSH
60163: LD_INT 0
60165: PUSH
60166: LD_INT 1
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: PUSH
60173: LD_INT 1
60175: NEG
60176: PUSH
60177: LD_INT 0
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: PUSH
60184: LD_INT 1
60186: NEG
60187: PUSH
60188: LD_INT 1
60190: NEG
60191: PUSH
60192: EMPTY
60193: LIST
60194: LIST
60195: PUSH
60196: LD_INT 1
60198: PUSH
60199: LD_INT 1
60201: NEG
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 1
60209: NEG
60210: PUSH
60211: LD_INT 1
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: LIST
60222: LIST
60223: LIST
60224: LIST
60225: LIST
60226: LIST
60227: LIST
60228: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60229: LD_ADDR_VAR 0 38
60233: PUSH
60234: LD_INT 0
60236: PUSH
60237: LD_INT 0
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PUSH
60244: LD_INT 0
60246: PUSH
60247: LD_INT 1
60249: NEG
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: LD_INT 1
60257: PUSH
60258: LD_INT 0
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: PUSH
60265: LD_INT 1
60267: PUSH
60268: LD_INT 1
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: PUSH
60275: LD_INT 0
60277: PUSH
60278: LD_INT 1
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: LD_INT 1
60287: NEG
60288: PUSH
60289: LD_INT 0
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: PUSH
60296: LD_INT 1
60298: NEG
60299: PUSH
60300: LD_INT 1
60302: NEG
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PUSH
60308: LD_INT 2
60310: PUSH
60311: LD_INT 1
60313: PUSH
60314: EMPTY
60315: LIST
60316: LIST
60317: PUSH
60318: LD_INT 2
60320: NEG
60321: PUSH
60322: LD_INT 1
60324: NEG
60325: PUSH
60326: EMPTY
60327: LIST
60328: LIST
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: LIST
60334: LIST
60335: LIST
60336: LIST
60337: LIST
60338: LIST
60339: LIST
60340: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60341: LD_ADDR_VAR 0 39
60345: PUSH
60346: LD_INT 0
60348: PUSH
60349: LD_INT 0
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: PUSH
60356: LD_INT 0
60358: PUSH
60359: LD_INT 1
60361: NEG
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: PUSH
60367: LD_INT 1
60369: PUSH
60370: LD_INT 0
60372: PUSH
60373: EMPTY
60374: LIST
60375: LIST
60376: PUSH
60377: LD_INT 1
60379: PUSH
60380: LD_INT 1
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: PUSH
60387: LD_INT 0
60389: PUSH
60390: LD_INT 1
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: PUSH
60397: LD_INT 1
60399: NEG
60400: PUSH
60401: LD_INT 0
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: PUSH
60408: LD_INT 1
60410: NEG
60411: PUSH
60412: LD_INT 1
60414: NEG
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: PUSH
60420: LD_INT 1
60422: NEG
60423: PUSH
60424: LD_INT 2
60426: NEG
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: PUSH
60432: LD_INT 1
60434: PUSH
60435: LD_INT 2
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: PUSH
60442: EMPTY
60443: LIST
60444: LIST
60445: LIST
60446: LIST
60447: LIST
60448: LIST
60449: LIST
60450: LIST
60451: LIST
60452: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60453: LD_ADDR_VAR 0 40
60457: PUSH
60458: LD_INT 0
60460: PUSH
60461: LD_INT 0
60463: PUSH
60464: EMPTY
60465: LIST
60466: LIST
60467: PUSH
60468: LD_INT 0
60470: PUSH
60471: LD_INT 1
60473: NEG
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PUSH
60479: LD_INT 1
60481: PUSH
60482: LD_INT 0
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: LD_INT 1
60491: PUSH
60492: LD_INT 1
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 0
60501: PUSH
60502: LD_INT 1
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 1
60511: NEG
60512: PUSH
60513: LD_INT 0
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: LD_INT 1
60522: NEG
60523: PUSH
60524: LD_INT 1
60526: NEG
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: LD_INT 1
60534: PUSH
60535: LD_INT 1
60537: NEG
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: PUSH
60543: LD_INT 1
60545: NEG
60546: PUSH
60547: LD_INT 1
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: LIST
60558: LIST
60559: LIST
60560: LIST
60561: LIST
60562: LIST
60563: LIST
60564: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60565: LD_ADDR_VAR 0 41
60569: PUSH
60570: LD_INT 0
60572: PUSH
60573: LD_INT 0
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: PUSH
60580: LD_INT 0
60582: PUSH
60583: LD_INT 1
60585: NEG
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: PUSH
60591: LD_INT 1
60593: PUSH
60594: LD_INT 0
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: LD_INT 1
60603: PUSH
60604: LD_INT 1
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: PUSH
60611: LD_INT 0
60613: PUSH
60614: LD_INT 1
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: PUSH
60621: LD_INT 1
60623: NEG
60624: PUSH
60625: LD_INT 0
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: PUSH
60632: LD_INT 1
60634: NEG
60635: PUSH
60636: LD_INT 1
60638: NEG
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: LD_INT 1
60646: NEG
60647: PUSH
60648: LD_INT 2
60650: NEG
60651: PUSH
60652: EMPTY
60653: LIST
60654: LIST
60655: PUSH
60656: LD_INT 1
60658: PUSH
60659: LD_INT 1
60661: NEG
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PUSH
60667: LD_INT 2
60669: PUSH
60670: LD_INT 0
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: PUSH
60677: LD_INT 2
60679: PUSH
60680: LD_INT 1
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: PUSH
60687: LD_INT 2
60689: PUSH
60690: LD_INT 2
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: PUSH
60697: LD_INT 1
60699: PUSH
60700: LD_INT 2
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: PUSH
60707: LD_INT 1
60709: NEG
60710: PUSH
60711: LD_INT 1
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: PUSH
60718: LD_INT 2
60720: NEG
60721: PUSH
60722: LD_INT 0
60724: PUSH
60725: EMPTY
60726: LIST
60727: LIST
60728: PUSH
60729: LD_INT 2
60731: NEG
60732: PUSH
60733: LD_INT 1
60735: NEG
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: LD_INT 2
60743: NEG
60744: PUSH
60745: LD_INT 2
60747: NEG
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: PUSH
60753: LD_INT 2
60755: NEG
60756: PUSH
60757: LD_INT 3
60759: NEG
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: PUSH
60765: LD_INT 2
60767: PUSH
60768: LD_INT 1
60770: NEG
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 3
60778: PUSH
60779: LD_INT 0
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 3
60788: PUSH
60789: LD_INT 1
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: LD_INT 3
60798: PUSH
60799: LD_INT 2
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: PUSH
60806: LD_INT 3
60808: PUSH
60809: LD_INT 3
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PUSH
60816: LD_INT 2
60818: PUSH
60819: LD_INT 3
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 2
60828: NEG
60829: PUSH
60830: LD_INT 1
60832: PUSH
60833: EMPTY
60834: LIST
60835: LIST
60836: PUSH
60837: LD_INT 3
60839: NEG
60840: PUSH
60841: LD_INT 0
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: LD_INT 3
60850: NEG
60851: PUSH
60852: LD_INT 1
60854: NEG
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: LD_INT 3
60862: NEG
60863: PUSH
60864: LD_INT 2
60866: NEG
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: PUSH
60872: LD_INT 3
60874: NEG
60875: PUSH
60876: LD_INT 3
60878: NEG
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: LIST
60888: LIST
60889: LIST
60890: LIST
60891: LIST
60892: LIST
60893: LIST
60894: LIST
60895: LIST
60896: LIST
60897: LIST
60898: LIST
60899: LIST
60900: LIST
60901: LIST
60902: LIST
60903: LIST
60904: LIST
60905: LIST
60906: LIST
60907: LIST
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: LIST
60913: LIST
60914: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60915: LD_ADDR_VAR 0 42
60919: PUSH
60920: LD_INT 0
60922: PUSH
60923: LD_INT 0
60925: PUSH
60926: EMPTY
60927: LIST
60928: LIST
60929: PUSH
60930: LD_INT 0
60932: PUSH
60933: LD_INT 1
60935: NEG
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: LD_INT 1
60943: PUSH
60944: LD_INT 0
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: LD_INT 1
60953: PUSH
60954: LD_INT 1
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: PUSH
60961: LD_INT 0
60963: PUSH
60964: LD_INT 1
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: PUSH
60971: LD_INT 1
60973: NEG
60974: PUSH
60975: LD_INT 0
60977: PUSH
60978: EMPTY
60979: LIST
60980: LIST
60981: PUSH
60982: LD_INT 1
60984: NEG
60985: PUSH
60986: LD_INT 1
60988: NEG
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 1
60996: NEG
60997: PUSH
60998: LD_INT 2
61000: NEG
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: LD_INT 0
61008: PUSH
61009: LD_INT 2
61011: NEG
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: PUSH
61017: LD_INT 1
61019: PUSH
61020: LD_INT 1
61022: NEG
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: PUSH
61028: LD_INT 2
61030: PUSH
61031: LD_INT 1
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: LD_INT 2
61040: PUSH
61041: LD_INT 2
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: PUSH
61048: LD_INT 1
61050: PUSH
61051: LD_INT 2
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PUSH
61058: LD_INT 0
61060: PUSH
61061: LD_INT 2
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: PUSH
61068: LD_INT 1
61070: NEG
61071: PUSH
61072: LD_INT 1
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: PUSH
61079: LD_INT 2
61081: NEG
61082: PUSH
61083: LD_INT 1
61085: NEG
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: PUSH
61091: LD_INT 2
61093: NEG
61094: PUSH
61095: LD_INT 2
61097: NEG
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: PUSH
61103: LD_INT 2
61105: NEG
61106: PUSH
61107: LD_INT 3
61109: NEG
61110: PUSH
61111: EMPTY
61112: LIST
61113: LIST
61114: PUSH
61115: LD_INT 1
61117: NEG
61118: PUSH
61119: LD_INT 3
61121: NEG
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: LD_INT 0
61129: PUSH
61130: LD_INT 3
61132: NEG
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: PUSH
61138: LD_INT 1
61140: PUSH
61141: LD_INT 2
61143: NEG
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: PUSH
61149: LD_INT 3
61151: PUSH
61152: LD_INT 2
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: LD_INT 3
61161: PUSH
61162: LD_INT 3
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: LD_INT 2
61171: PUSH
61172: LD_INT 3
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: LD_INT 1
61181: PUSH
61182: LD_INT 3
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: PUSH
61189: LD_INT 0
61191: PUSH
61192: LD_INT 3
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PUSH
61199: LD_INT 1
61201: NEG
61202: PUSH
61203: LD_INT 2
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: PUSH
61210: LD_INT 3
61212: NEG
61213: PUSH
61214: LD_INT 2
61216: NEG
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: LD_INT 3
61224: NEG
61225: PUSH
61226: LD_INT 3
61228: NEG
61229: PUSH
61230: EMPTY
61231: LIST
61232: LIST
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: LIST
61238: LIST
61239: LIST
61240: LIST
61241: LIST
61242: LIST
61243: LIST
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: LIST
61258: LIST
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61265: LD_ADDR_VAR 0 43
61269: PUSH
61270: LD_INT 0
61272: PUSH
61273: LD_INT 0
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: PUSH
61280: LD_INT 0
61282: PUSH
61283: LD_INT 1
61285: NEG
61286: PUSH
61287: EMPTY
61288: LIST
61289: LIST
61290: PUSH
61291: LD_INT 1
61293: PUSH
61294: LD_INT 0
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: PUSH
61301: LD_INT 1
61303: PUSH
61304: LD_INT 1
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: LD_INT 0
61313: PUSH
61314: LD_INT 1
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: LD_INT 1
61323: NEG
61324: PUSH
61325: LD_INT 0
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: PUSH
61332: LD_INT 1
61334: NEG
61335: PUSH
61336: LD_INT 1
61338: NEG
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: LD_INT 1
61346: NEG
61347: PUSH
61348: LD_INT 2
61350: NEG
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: PUSH
61356: LD_INT 0
61358: PUSH
61359: LD_INT 2
61361: NEG
61362: PUSH
61363: EMPTY
61364: LIST
61365: LIST
61366: PUSH
61367: LD_INT 1
61369: PUSH
61370: LD_INT 1
61372: NEG
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: PUSH
61378: LD_INT 2
61380: PUSH
61381: LD_INT 0
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: PUSH
61388: LD_INT 2
61390: PUSH
61391: LD_INT 1
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PUSH
61398: LD_INT 1
61400: PUSH
61401: LD_INT 2
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: PUSH
61408: LD_INT 0
61410: PUSH
61411: LD_INT 2
61413: PUSH
61414: EMPTY
61415: LIST
61416: LIST
61417: PUSH
61418: LD_INT 1
61420: NEG
61421: PUSH
61422: LD_INT 1
61424: PUSH
61425: EMPTY
61426: LIST
61427: LIST
61428: PUSH
61429: LD_INT 2
61431: NEG
61432: PUSH
61433: LD_INT 0
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: LD_INT 2
61442: NEG
61443: PUSH
61444: LD_INT 1
61446: NEG
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: PUSH
61452: LD_INT 1
61454: NEG
61455: PUSH
61456: LD_INT 3
61458: NEG
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: PUSH
61464: LD_INT 0
61466: PUSH
61467: LD_INT 3
61469: NEG
61470: PUSH
61471: EMPTY
61472: LIST
61473: LIST
61474: PUSH
61475: LD_INT 1
61477: PUSH
61478: LD_INT 2
61480: NEG
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: LD_INT 2
61488: PUSH
61489: LD_INT 1
61491: NEG
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: PUSH
61497: LD_INT 3
61499: PUSH
61500: LD_INT 0
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 3
61509: PUSH
61510: LD_INT 1
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: PUSH
61517: LD_INT 1
61519: PUSH
61520: LD_INT 3
61522: PUSH
61523: EMPTY
61524: LIST
61525: LIST
61526: PUSH
61527: LD_INT 0
61529: PUSH
61530: LD_INT 3
61532: PUSH
61533: EMPTY
61534: LIST
61535: LIST
61536: PUSH
61537: LD_INT 1
61539: NEG
61540: PUSH
61541: LD_INT 2
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 2
61550: NEG
61551: PUSH
61552: LD_INT 1
61554: PUSH
61555: EMPTY
61556: LIST
61557: LIST
61558: PUSH
61559: LD_INT 3
61561: NEG
61562: PUSH
61563: LD_INT 0
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: PUSH
61570: LD_INT 3
61572: NEG
61573: PUSH
61574: LD_INT 1
61576: NEG
61577: PUSH
61578: EMPTY
61579: LIST
61580: LIST
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: LIST
61586: LIST
61587: LIST
61588: LIST
61589: LIST
61590: LIST
61591: LIST
61592: LIST
61593: LIST
61594: LIST
61595: LIST
61596: LIST
61597: LIST
61598: LIST
61599: LIST
61600: LIST
61601: LIST
61602: LIST
61603: LIST
61604: LIST
61605: LIST
61606: LIST
61607: LIST
61608: LIST
61609: LIST
61610: LIST
61611: LIST
61612: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61613: LD_ADDR_VAR 0 44
61617: PUSH
61618: LD_INT 0
61620: PUSH
61621: LD_INT 0
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PUSH
61628: LD_INT 0
61630: PUSH
61631: LD_INT 1
61633: NEG
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: PUSH
61639: LD_INT 1
61641: PUSH
61642: LD_INT 0
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: PUSH
61649: LD_INT 1
61651: PUSH
61652: LD_INT 1
61654: PUSH
61655: EMPTY
61656: LIST
61657: LIST
61658: PUSH
61659: LD_INT 0
61661: PUSH
61662: LD_INT 1
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: PUSH
61669: LD_INT 1
61671: NEG
61672: PUSH
61673: LD_INT 0
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: PUSH
61680: LD_INT 1
61682: NEG
61683: PUSH
61684: LD_INT 1
61686: NEG
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: PUSH
61692: LD_INT 1
61694: NEG
61695: PUSH
61696: LD_INT 2
61698: NEG
61699: PUSH
61700: EMPTY
61701: LIST
61702: LIST
61703: PUSH
61704: LD_INT 1
61706: PUSH
61707: LD_INT 1
61709: NEG
61710: PUSH
61711: EMPTY
61712: LIST
61713: LIST
61714: PUSH
61715: LD_INT 2
61717: PUSH
61718: LD_INT 0
61720: PUSH
61721: EMPTY
61722: LIST
61723: LIST
61724: PUSH
61725: LD_INT 2
61727: PUSH
61728: LD_INT 1
61730: PUSH
61731: EMPTY
61732: LIST
61733: LIST
61734: PUSH
61735: LD_INT 2
61737: PUSH
61738: LD_INT 2
61740: PUSH
61741: EMPTY
61742: LIST
61743: LIST
61744: PUSH
61745: LD_INT 1
61747: PUSH
61748: LD_INT 2
61750: PUSH
61751: EMPTY
61752: LIST
61753: LIST
61754: PUSH
61755: LD_INT 1
61757: NEG
61758: PUSH
61759: LD_INT 1
61761: PUSH
61762: EMPTY
61763: LIST
61764: LIST
61765: PUSH
61766: LD_INT 2
61768: NEG
61769: PUSH
61770: LD_INT 0
61772: PUSH
61773: EMPTY
61774: LIST
61775: LIST
61776: PUSH
61777: LD_INT 2
61779: NEG
61780: PUSH
61781: LD_INT 1
61783: NEG
61784: PUSH
61785: EMPTY
61786: LIST
61787: LIST
61788: PUSH
61789: LD_INT 2
61791: NEG
61792: PUSH
61793: LD_INT 2
61795: NEG
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: PUSH
61801: LD_INT 2
61803: NEG
61804: PUSH
61805: LD_INT 3
61807: NEG
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: PUSH
61813: LD_INT 2
61815: PUSH
61816: LD_INT 1
61818: NEG
61819: PUSH
61820: EMPTY
61821: LIST
61822: LIST
61823: PUSH
61824: LD_INT 3
61826: PUSH
61827: LD_INT 0
61829: PUSH
61830: EMPTY
61831: LIST
61832: LIST
61833: PUSH
61834: LD_INT 3
61836: PUSH
61837: LD_INT 1
61839: PUSH
61840: EMPTY
61841: LIST
61842: LIST
61843: PUSH
61844: LD_INT 3
61846: PUSH
61847: LD_INT 2
61849: PUSH
61850: EMPTY
61851: LIST
61852: LIST
61853: PUSH
61854: LD_INT 3
61856: PUSH
61857: LD_INT 3
61859: PUSH
61860: EMPTY
61861: LIST
61862: LIST
61863: PUSH
61864: LD_INT 2
61866: PUSH
61867: LD_INT 3
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: LD_INT 2
61876: NEG
61877: PUSH
61878: LD_INT 1
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: PUSH
61885: LD_INT 3
61887: NEG
61888: PUSH
61889: LD_INT 0
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: PUSH
61896: LD_INT 3
61898: NEG
61899: PUSH
61900: LD_INT 1
61902: NEG
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: PUSH
61908: LD_INT 3
61910: NEG
61911: PUSH
61912: LD_INT 2
61914: NEG
61915: PUSH
61916: EMPTY
61917: LIST
61918: LIST
61919: PUSH
61920: LD_INT 3
61922: NEG
61923: PUSH
61924: LD_INT 3
61926: NEG
61927: PUSH
61928: EMPTY
61929: LIST
61930: LIST
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: LIST
61936: LIST
61937: LIST
61938: LIST
61939: LIST
61940: LIST
61941: LIST
61942: LIST
61943: LIST
61944: LIST
61945: LIST
61946: LIST
61947: LIST
61948: LIST
61949: LIST
61950: LIST
61951: LIST
61952: LIST
61953: LIST
61954: LIST
61955: LIST
61956: LIST
61957: LIST
61958: LIST
61959: LIST
61960: LIST
61961: LIST
61962: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61963: LD_ADDR_VAR 0 45
61967: PUSH
61968: LD_INT 0
61970: PUSH
61971: LD_INT 0
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: PUSH
61978: LD_INT 0
61980: PUSH
61981: LD_INT 1
61983: NEG
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: LD_INT 1
61991: PUSH
61992: LD_INT 0
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: LD_INT 1
62001: PUSH
62002: LD_INT 1
62004: PUSH
62005: EMPTY
62006: LIST
62007: LIST
62008: PUSH
62009: LD_INT 0
62011: PUSH
62012: LD_INT 1
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: PUSH
62019: LD_INT 1
62021: NEG
62022: PUSH
62023: LD_INT 0
62025: PUSH
62026: EMPTY
62027: LIST
62028: LIST
62029: PUSH
62030: LD_INT 1
62032: NEG
62033: PUSH
62034: LD_INT 1
62036: NEG
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: PUSH
62042: LD_INT 1
62044: NEG
62045: PUSH
62046: LD_INT 2
62048: NEG
62049: PUSH
62050: EMPTY
62051: LIST
62052: LIST
62053: PUSH
62054: LD_INT 0
62056: PUSH
62057: LD_INT 2
62059: NEG
62060: PUSH
62061: EMPTY
62062: LIST
62063: LIST
62064: PUSH
62065: LD_INT 1
62067: PUSH
62068: LD_INT 1
62070: NEG
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: PUSH
62076: LD_INT 2
62078: PUSH
62079: LD_INT 1
62081: PUSH
62082: EMPTY
62083: LIST
62084: LIST
62085: PUSH
62086: LD_INT 2
62088: PUSH
62089: LD_INT 2
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: PUSH
62096: LD_INT 1
62098: PUSH
62099: LD_INT 2
62101: PUSH
62102: EMPTY
62103: LIST
62104: LIST
62105: PUSH
62106: LD_INT 0
62108: PUSH
62109: LD_INT 2
62111: PUSH
62112: EMPTY
62113: LIST
62114: LIST
62115: PUSH
62116: LD_INT 1
62118: NEG
62119: PUSH
62120: LD_INT 1
62122: PUSH
62123: EMPTY
62124: LIST
62125: LIST
62126: PUSH
62127: LD_INT 2
62129: NEG
62130: PUSH
62131: LD_INT 1
62133: NEG
62134: PUSH
62135: EMPTY
62136: LIST
62137: LIST
62138: PUSH
62139: LD_INT 2
62141: NEG
62142: PUSH
62143: LD_INT 2
62145: NEG
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: PUSH
62151: LD_INT 2
62153: NEG
62154: PUSH
62155: LD_INT 3
62157: NEG
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: PUSH
62163: LD_INT 1
62165: NEG
62166: PUSH
62167: LD_INT 3
62169: NEG
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: PUSH
62175: LD_INT 0
62177: PUSH
62178: LD_INT 3
62180: NEG
62181: PUSH
62182: EMPTY
62183: LIST
62184: LIST
62185: PUSH
62186: LD_INT 1
62188: PUSH
62189: LD_INT 2
62191: NEG
62192: PUSH
62193: EMPTY
62194: LIST
62195: LIST
62196: PUSH
62197: LD_INT 3
62199: PUSH
62200: LD_INT 2
62202: PUSH
62203: EMPTY
62204: LIST
62205: LIST
62206: PUSH
62207: LD_INT 3
62209: PUSH
62210: LD_INT 3
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: PUSH
62217: LD_INT 2
62219: PUSH
62220: LD_INT 3
62222: PUSH
62223: EMPTY
62224: LIST
62225: LIST
62226: PUSH
62227: LD_INT 1
62229: PUSH
62230: LD_INT 3
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: PUSH
62237: LD_INT 0
62239: PUSH
62240: LD_INT 3
62242: PUSH
62243: EMPTY
62244: LIST
62245: LIST
62246: PUSH
62247: LD_INT 1
62249: NEG
62250: PUSH
62251: LD_INT 2
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: PUSH
62258: LD_INT 3
62260: NEG
62261: PUSH
62262: LD_INT 2
62264: NEG
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: PUSH
62270: LD_INT 3
62272: NEG
62273: PUSH
62274: LD_INT 3
62276: NEG
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: LIST
62286: LIST
62287: LIST
62288: LIST
62289: LIST
62290: LIST
62291: LIST
62292: LIST
62293: LIST
62294: LIST
62295: LIST
62296: LIST
62297: LIST
62298: LIST
62299: LIST
62300: LIST
62301: LIST
62302: LIST
62303: LIST
62304: LIST
62305: LIST
62306: LIST
62307: LIST
62308: LIST
62309: LIST
62310: LIST
62311: LIST
62312: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62313: LD_ADDR_VAR 0 46
62317: PUSH
62318: LD_INT 0
62320: PUSH
62321: LD_INT 0
62323: PUSH
62324: EMPTY
62325: LIST
62326: LIST
62327: PUSH
62328: LD_INT 0
62330: PUSH
62331: LD_INT 1
62333: NEG
62334: PUSH
62335: EMPTY
62336: LIST
62337: LIST
62338: PUSH
62339: LD_INT 1
62341: PUSH
62342: LD_INT 0
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: PUSH
62349: LD_INT 1
62351: PUSH
62352: LD_INT 1
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: PUSH
62359: LD_INT 0
62361: PUSH
62362: LD_INT 1
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: PUSH
62369: LD_INT 1
62371: NEG
62372: PUSH
62373: LD_INT 0
62375: PUSH
62376: EMPTY
62377: LIST
62378: LIST
62379: PUSH
62380: LD_INT 1
62382: NEG
62383: PUSH
62384: LD_INT 1
62386: NEG
62387: PUSH
62388: EMPTY
62389: LIST
62390: LIST
62391: PUSH
62392: LD_INT 1
62394: NEG
62395: PUSH
62396: LD_INT 2
62398: NEG
62399: PUSH
62400: EMPTY
62401: LIST
62402: LIST
62403: PUSH
62404: LD_INT 0
62406: PUSH
62407: LD_INT 2
62409: NEG
62410: PUSH
62411: EMPTY
62412: LIST
62413: LIST
62414: PUSH
62415: LD_INT 1
62417: PUSH
62418: LD_INT 1
62420: NEG
62421: PUSH
62422: EMPTY
62423: LIST
62424: LIST
62425: PUSH
62426: LD_INT 2
62428: PUSH
62429: LD_INT 0
62431: PUSH
62432: EMPTY
62433: LIST
62434: LIST
62435: PUSH
62436: LD_INT 2
62438: PUSH
62439: LD_INT 1
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: PUSH
62446: LD_INT 1
62448: PUSH
62449: LD_INT 2
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: PUSH
62456: LD_INT 0
62458: PUSH
62459: LD_INT 2
62461: PUSH
62462: EMPTY
62463: LIST
62464: LIST
62465: PUSH
62466: LD_INT 1
62468: NEG
62469: PUSH
62470: LD_INT 1
62472: PUSH
62473: EMPTY
62474: LIST
62475: LIST
62476: PUSH
62477: LD_INT 2
62479: NEG
62480: PUSH
62481: LD_INT 0
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: PUSH
62488: LD_INT 2
62490: NEG
62491: PUSH
62492: LD_INT 1
62494: NEG
62495: PUSH
62496: EMPTY
62497: LIST
62498: LIST
62499: PUSH
62500: LD_INT 1
62502: NEG
62503: PUSH
62504: LD_INT 3
62506: NEG
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: PUSH
62512: LD_INT 0
62514: PUSH
62515: LD_INT 3
62517: NEG
62518: PUSH
62519: EMPTY
62520: LIST
62521: LIST
62522: PUSH
62523: LD_INT 1
62525: PUSH
62526: LD_INT 2
62528: NEG
62529: PUSH
62530: EMPTY
62531: LIST
62532: LIST
62533: PUSH
62534: LD_INT 2
62536: PUSH
62537: LD_INT 1
62539: NEG
62540: PUSH
62541: EMPTY
62542: LIST
62543: LIST
62544: PUSH
62545: LD_INT 3
62547: PUSH
62548: LD_INT 0
62550: PUSH
62551: EMPTY
62552: LIST
62553: LIST
62554: PUSH
62555: LD_INT 3
62557: PUSH
62558: LD_INT 1
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: PUSH
62565: LD_INT 1
62567: PUSH
62568: LD_INT 3
62570: PUSH
62571: EMPTY
62572: LIST
62573: LIST
62574: PUSH
62575: LD_INT 0
62577: PUSH
62578: LD_INT 3
62580: PUSH
62581: EMPTY
62582: LIST
62583: LIST
62584: PUSH
62585: LD_INT 1
62587: NEG
62588: PUSH
62589: LD_INT 2
62591: PUSH
62592: EMPTY
62593: LIST
62594: LIST
62595: PUSH
62596: LD_INT 2
62598: NEG
62599: PUSH
62600: LD_INT 1
62602: PUSH
62603: EMPTY
62604: LIST
62605: LIST
62606: PUSH
62607: LD_INT 3
62609: NEG
62610: PUSH
62611: LD_INT 0
62613: PUSH
62614: EMPTY
62615: LIST
62616: LIST
62617: PUSH
62618: LD_INT 3
62620: NEG
62621: PUSH
62622: LD_INT 1
62624: NEG
62625: PUSH
62626: EMPTY
62627: LIST
62628: LIST
62629: PUSH
62630: EMPTY
62631: LIST
62632: LIST
62633: LIST
62634: LIST
62635: LIST
62636: LIST
62637: LIST
62638: LIST
62639: LIST
62640: LIST
62641: LIST
62642: LIST
62643: LIST
62644: LIST
62645: LIST
62646: LIST
62647: LIST
62648: LIST
62649: LIST
62650: LIST
62651: LIST
62652: LIST
62653: LIST
62654: LIST
62655: LIST
62656: LIST
62657: LIST
62658: LIST
62659: LIST
62660: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62661: LD_ADDR_VAR 0 47
62665: PUSH
62666: LD_INT 0
62668: PUSH
62669: LD_INT 0
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: PUSH
62676: LD_INT 0
62678: PUSH
62679: LD_INT 1
62681: NEG
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: PUSH
62687: LD_INT 1
62689: PUSH
62690: LD_INT 0
62692: PUSH
62693: EMPTY
62694: LIST
62695: LIST
62696: PUSH
62697: LD_INT 1
62699: PUSH
62700: LD_INT 1
62702: PUSH
62703: EMPTY
62704: LIST
62705: LIST
62706: PUSH
62707: LD_INT 0
62709: PUSH
62710: LD_INT 1
62712: PUSH
62713: EMPTY
62714: LIST
62715: LIST
62716: PUSH
62717: LD_INT 1
62719: NEG
62720: PUSH
62721: LD_INT 0
62723: PUSH
62724: EMPTY
62725: LIST
62726: LIST
62727: PUSH
62728: LD_INT 1
62730: NEG
62731: PUSH
62732: LD_INT 1
62734: NEG
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 1
62742: NEG
62743: PUSH
62744: LD_INT 2
62746: NEG
62747: PUSH
62748: EMPTY
62749: LIST
62750: LIST
62751: PUSH
62752: LD_INT 0
62754: PUSH
62755: LD_INT 2
62757: NEG
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: PUSH
62763: LD_INT 1
62765: PUSH
62766: LD_INT 1
62768: NEG
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: PUSH
62774: LD_INT 2
62776: NEG
62777: PUSH
62778: LD_INT 1
62780: NEG
62781: PUSH
62782: EMPTY
62783: LIST
62784: LIST
62785: PUSH
62786: LD_INT 2
62788: NEG
62789: PUSH
62790: LD_INT 2
62792: NEG
62793: PUSH
62794: EMPTY
62795: LIST
62796: LIST
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: LIST
62802: LIST
62803: LIST
62804: LIST
62805: LIST
62806: LIST
62807: LIST
62808: LIST
62809: LIST
62810: LIST
62811: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62812: LD_ADDR_VAR 0 48
62816: PUSH
62817: LD_INT 0
62819: PUSH
62820: LD_INT 0
62822: PUSH
62823: EMPTY
62824: LIST
62825: LIST
62826: PUSH
62827: LD_INT 0
62829: PUSH
62830: LD_INT 1
62832: NEG
62833: PUSH
62834: EMPTY
62835: LIST
62836: LIST
62837: PUSH
62838: LD_INT 1
62840: PUSH
62841: LD_INT 0
62843: PUSH
62844: EMPTY
62845: LIST
62846: LIST
62847: PUSH
62848: LD_INT 1
62850: PUSH
62851: LD_INT 1
62853: PUSH
62854: EMPTY
62855: LIST
62856: LIST
62857: PUSH
62858: LD_INT 0
62860: PUSH
62861: LD_INT 1
62863: PUSH
62864: EMPTY
62865: LIST
62866: LIST
62867: PUSH
62868: LD_INT 1
62870: NEG
62871: PUSH
62872: LD_INT 0
62874: PUSH
62875: EMPTY
62876: LIST
62877: LIST
62878: PUSH
62879: LD_INT 1
62881: NEG
62882: PUSH
62883: LD_INT 1
62885: NEG
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: PUSH
62891: LD_INT 1
62893: NEG
62894: PUSH
62895: LD_INT 2
62897: NEG
62898: PUSH
62899: EMPTY
62900: LIST
62901: LIST
62902: PUSH
62903: LD_INT 0
62905: PUSH
62906: LD_INT 2
62908: NEG
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: PUSH
62914: LD_INT 1
62916: PUSH
62917: LD_INT 1
62919: NEG
62920: PUSH
62921: EMPTY
62922: LIST
62923: LIST
62924: PUSH
62925: LD_INT 2
62927: PUSH
62928: LD_INT 0
62930: PUSH
62931: EMPTY
62932: LIST
62933: LIST
62934: PUSH
62935: LD_INT 2
62937: PUSH
62938: LD_INT 1
62940: PUSH
62941: EMPTY
62942: LIST
62943: LIST
62944: PUSH
62945: EMPTY
62946: LIST
62947: LIST
62948: LIST
62949: LIST
62950: LIST
62951: LIST
62952: LIST
62953: LIST
62954: LIST
62955: LIST
62956: LIST
62957: LIST
62958: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62959: LD_ADDR_VAR 0 49
62963: PUSH
62964: LD_INT 0
62966: PUSH
62967: LD_INT 0
62969: PUSH
62970: EMPTY
62971: LIST
62972: LIST
62973: PUSH
62974: LD_INT 0
62976: PUSH
62977: LD_INT 1
62979: NEG
62980: PUSH
62981: EMPTY
62982: LIST
62983: LIST
62984: PUSH
62985: LD_INT 1
62987: PUSH
62988: LD_INT 0
62990: PUSH
62991: EMPTY
62992: LIST
62993: LIST
62994: PUSH
62995: LD_INT 1
62997: PUSH
62998: LD_INT 1
63000: PUSH
63001: EMPTY
63002: LIST
63003: LIST
63004: PUSH
63005: LD_INT 0
63007: PUSH
63008: LD_INT 1
63010: PUSH
63011: EMPTY
63012: LIST
63013: LIST
63014: PUSH
63015: LD_INT 1
63017: NEG
63018: PUSH
63019: LD_INT 0
63021: PUSH
63022: EMPTY
63023: LIST
63024: LIST
63025: PUSH
63026: LD_INT 1
63028: NEG
63029: PUSH
63030: LD_INT 1
63032: NEG
63033: PUSH
63034: EMPTY
63035: LIST
63036: LIST
63037: PUSH
63038: LD_INT 1
63040: PUSH
63041: LD_INT 1
63043: NEG
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: PUSH
63049: LD_INT 2
63051: PUSH
63052: LD_INT 0
63054: PUSH
63055: EMPTY
63056: LIST
63057: LIST
63058: PUSH
63059: LD_INT 2
63061: PUSH
63062: LD_INT 1
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: PUSH
63069: LD_INT 2
63071: PUSH
63072: LD_INT 2
63074: PUSH
63075: EMPTY
63076: LIST
63077: LIST
63078: PUSH
63079: LD_INT 1
63081: PUSH
63082: LD_INT 2
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: PUSH
63089: EMPTY
63090: LIST
63091: LIST
63092: LIST
63093: LIST
63094: LIST
63095: LIST
63096: LIST
63097: LIST
63098: LIST
63099: LIST
63100: LIST
63101: LIST
63102: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63103: LD_ADDR_VAR 0 50
63107: PUSH
63108: LD_INT 0
63110: PUSH
63111: LD_INT 0
63113: PUSH
63114: EMPTY
63115: LIST
63116: LIST
63117: PUSH
63118: LD_INT 0
63120: PUSH
63121: LD_INT 1
63123: NEG
63124: PUSH
63125: EMPTY
63126: LIST
63127: LIST
63128: PUSH
63129: LD_INT 1
63131: PUSH
63132: LD_INT 0
63134: PUSH
63135: EMPTY
63136: LIST
63137: LIST
63138: PUSH
63139: LD_INT 1
63141: PUSH
63142: LD_INT 1
63144: PUSH
63145: EMPTY
63146: LIST
63147: LIST
63148: PUSH
63149: LD_INT 0
63151: PUSH
63152: LD_INT 1
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: PUSH
63159: LD_INT 1
63161: NEG
63162: PUSH
63163: LD_INT 0
63165: PUSH
63166: EMPTY
63167: LIST
63168: LIST
63169: PUSH
63170: LD_INT 1
63172: NEG
63173: PUSH
63174: LD_INT 1
63176: NEG
63177: PUSH
63178: EMPTY
63179: LIST
63180: LIST
63181: PUSH
63182: LD_INT 2
63184: PUSH
63185: LD_INT 1
63187: PUSH
63188: EMPTY
63189: LIST
63190: LIST
63191: PUSH
63192: LD_INT 2
63194: PUSH
63195: LD_INT 2
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: PUSH
63202: LD_INT 1
63204: PUSH
63205: LD_INT 2
63207: PUSH
63208: EMPTY
63209: LIST
63210: LIST
63211: PUSH
63212: LD_INT 0
63214: PUSH
63215: LD_INT 2
63217: PUSH
63218: EMPTY
63219: LIST
63220: LIST
63221: PUSH
63222: LD_INT 1
63224: NEG
63225: PUSH
63226: LD_INT 1
63228: PUSH
63229: EMPTY
63230: LIST
63231: LIST
63232: PUSH
63233: EMPTY
63234: LIST
63235: LIST
63236: LIST
63237: LIST
63238: LIST
63239: LIST
63240: LIST
63241: LIST
63242: LIST
63243: LIST
63244: LIST
63245: LIST
63246: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63247: LD_ADDR_VAR 0 51
63251: PUSH
63252: LD_INT 0
63254: PUSH
63255: LD_INT 0
63257: PUSH
63258: EMPTY
63259: LIST
63260: LIST
63261: PUSH
63262: LD_INT 0
63264: PUSH
63265: LD_INT 1
63267: NEG
63268: PUSH
63269: EMPTY
63270: LIST
63271: LIST
63272: PUSH
63273: LD_INT 1
63275: PUSH
63276: LD_INT 0
63278: PUSH
63279: EMPTY
63280: LIST
63281: LIST
63282: PUSH
63283: LD_INT 1
63285: PUSH
63286: LD_INT 1
63288: PUSH
63289: EMPTY
63290: LIST
63291: LIST
63292: PUSH
63293: LD_INT 0
63295: PUSH
63296: LD_INT 1
63298: PUSH
63299: EMPTY
63300: LIST
63301: LIST
63302: PUSH
63303: LD_INT 1
63305: NEG
63306: PUSH
63307: LD_INT 0
63309: PUSH
63310: EMPTY
63311: LIST
63312: LIST
63313: PUSH
63314: LD_INT 1
63316: NEG
63317: PUSH
63318: LD_INT 1
63320: NEG
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: PUSH
63326: LD_INT 1
63328: PUSH
63329: LD_INT 2
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: PUSH
63336: LD_INT 0
63338: PUSH
63339: LD_INT 2
63341: PUSH
63342: EMPTY
63343: LIST
63344: LIST
63345: PUSH
63346: LD_INT 1
63348: NEG
63349: PUSH
63350: LD_INT 1
63352: PUSH
63353: EMPTY
63354: LIST
63355: LIST
63356: PUSH
63357: LD_INT 2
63359: NEG
63360: PUSH
63361: LD_INT 0
63363: PUSH
63364: EMPTY
63365: LIST
63366: LIST
63367: PUSH
63368: LD_INT 2
63370: NEG
63371: PUSH
63372: LD_INT 1
63374: NEG
63375: PUSH
63376: EMPTY
63377: LIST
63378: LIST
63379: PUSH
63380: EMPTY
63381: LIST
63382: LIST
63383: LIST
63384: LIST
63385: LIST
63386: LIST
63387: LIST
63388: LIST
63389: LIST
63390: LIST
63391: LIST
63392: LIST
63393: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63394: LD_ADDR_VAR 0 52
63398: PUSH
63399: LD_INT 0
63401: PUSH
63402: LD_INT 0
63404: PUSH
63405: EMPTY
63406: LIST
63407: LIST
63408: PUSH
63409: LD_INT 0
63411: PUSH
63412: LD_INT 1
63414: NEG
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: PUSH
63420: LD_INT 1
63422: PUSH
63423: LD_INT 0
63425: PUSH
63426: EMPTY
63427: LIST
63428: LIST
63429: PUSH
63430: LD_INT 1
63432: PUSH
63433: LD_INT 1
63435: PUSH
63436: EMPTY
63437: LIST
63438: LIST
63439: PUSH
63440: LD_INT 0
63442: PUSH
63443: LD_INT 1
63445: PUSH
63446: EMPTY
63447: LIST
63448: LIST
63449: PUSH
63450: LD_INT 1
63452: NEG
63453: PUSH
63454: LD_INT 0
63456: PUSH
63457: EMPTY
63458: LIST
63459: LIST
63460: PUSH
63461: LD_INT 1
63463: NEG
63464: PUSH
63465: LD_INT 1
63467: NEG
63468: PUSH
63469: EMPTY
63470: LIST
63471: LIST
63472: PUSH
63473: LD_INT 1
63475: NEG
63476: PUSH
63477: LD_INT 2
63479: NEG
63480: PUSH
63481: EMPTY
63482: LIST
63483: LIST
63484: PUSH
63485: LD_INT 1
63487: NEG
63488: PUSH
63489: LD_INT 1
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: PUSH
63496: LD_INT 2
63498: NEG
63499: PUSH
63500: LD_INT 0
63502: PUSH
63503: EMPTY
63504: LIST
63505: LIST
63506: PUSH
63507: LD_INT 2
63509: NEG
63510: PUSH
63511: LD_INT 1
63513: NEG
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: PUSH
63519: LD_INT 2
63521: NEG
63522: PUSH
63523: LD_INT 2
63525: NEG
63526: PUSH
63527: EMPTY
63528: LIST
63529: LIST
63530: PUSH
63531: EMPTY
63532: LIST
63533: LIST
63534: LIST
63535: LIST
63536: LIST
63537: LIST
63538: LIST
63539: LIST
63540: LIST
63541: LIST
63542: LIST
63543: LIST
63544: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63545: LD_ADDR_VAR 0 53
63549: PUSH
63550: LD_INT 0
63552: PUSH
63553: LD_INT 0
63555: PUSH
63556: EMPTY
63557: LIST
63558: LIST
63559: PUSH
63560: LD_INT 0
63562: PUSH
63563: LD_INT 1
63565: NEG
63566: PUSH
63567: EMPTY
63568: LIST
63569: LIST
63570: PUSH
63571: LD_INT 1
63573: PUSH
63574: LD_INT 0
63576: PUSH
63577: EMPTY
63578: LIST
63579: LIST
63580: PUSH
63581: LD_INT 1
63583: PUSH
63584: LD_INT 1
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: PUSH
63591: LD_INT 0
63593: PUSH
63594: LD_INT 1
63596: PUSH
63597: EMPTY
63598: LIST
63599: LIST
63600: PUSH
63601: LD_INT 1
63603: NEG
63604: PUSH
63605: LD_INT 0
63607: PUSH
63608: EMPTY
63609: LIST
63610: LIST
63611: PUSH
63612: LD_INT 1
63614: NEG
63615: PUSH
63616: LD_INT 1
63618: NEG
63619: PUSH
63620: EMPTY
63621: LIST
63622: LIST
63623: PUSH
63624: LD_INT 1
63626: NEG
63627: PUSH
63628: LD_INT 2
63630: NEG
63631: PUSH
63632: EMPTY
63633: LIST
63634: LIST
63635: PUSH
63636: LD_INT 0
63638: PUSH
63639: LD_INT 2
63641: NEG
63642: PUSH
63643: EMPTY
63644: LIST
63645: LIST
63646: PUSH
63647: LD_INT 1
63649: PUSH
63650: LD_INT 1
63652: NEG
63653: PUSH
63654: EMPTY
63655: LIST
63656: LIST
63657: PUSH
63658: LD_INT 2
63660: PUSH
63661: LD_INT 0
63663: PUSH
63664: EMPTY
63665: LIST
63666: LIST
63667: PUSH
63668: LD_INT 2
63670: PUSH
63671: LD_INT 1
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: PUSH
63678: LD_INT 2
63680: PUSH
63681: LD_INT 2
63683: PUSH
63684: EMPTY
63685: LIST
63686: LIST
63687: PUSH
63688: LD_INT 1
63690: PUSH
63691: LD_INT 2
63693: PUSH
63694: EMPTY
63695: LIST
63696: LIST
63697: PUSH
63698: LD_INT 0
63700: PUSH
63701: LD_INT 2
63703: PUSH
63704: EMPTY
63705: LIST
63706: LIST
63707: PUSH
63708: LD_INT 1
63710: NEG
63711: PUSH
63712: LD_INT 1
63714: PUSH
63715: EMPTY
63716: LIST
63717: LIST
63718: PUSH
63719: LD_INT 2
63721: NEG
63722: PUSH
63723: LD_INT 0
63725: PUSH
63726: EMPTY
63727: LIST
63728: LIST
63729: PUSH
63730: LD_INT 2
63732: NEG
63733: PUSH
63734: LD_INT 1
63736: NEG
63737: PUSH
63738: EMPTY
63739: LIST
63740: LIST
63741: PUSH
63742: LD_INT 2
63744: NEG
63745: PUSH
63746: LD_INT 2
63748: NEG
63749: PUSH
63750: EMPTY
63751: LIST
63752: LIST
63753: PUSH
63754: EMPTY
63755: LIST
63756: LIST
63757: LIST
63758: LIST
63759: LIST
63760: LIST
63761: LIST
63762: LIST
63763: LIST
63764: LIST
63765: LIST
63766: LIST
63767: LIST
63768: LIST
63769: LIST
63770: LIST
63771: LIST
63772: LIST
63773: LIST
63774: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63775: LD_ADDR_VAR 0 54
63779: PUSH
63780: LD_INT 0
63782: PUSH
63783: LD_INT 0
63785: PUSH
63786: EMPTY
63787: LIST
63788: LIST
63789: PUSH
63790: LD_INT 0
63792: PUSH
63793: LD_INT 1
63795: NEG
63796: PUSH
63797: EMPTY
63798: LIST
63799: LIST
63800: PUSH
63801: LD_INT 1
63803: PUSH
63804: LD_INT 0
63806: PUSH
63807: EMPTY
63808: LIST
63809: LIST
63810: PUSH
63811: LD_INT 1
63813: PUSH
63814: LD_INT 1
63816: PUSH
63817: EMPTY
63818: LIST
63819: LIST
63820: PUSH
63821: LD_INT 0
63823: PUSH
63824: LD_INT 1
63826: PUSH
63827: EMPTY
63828: LIST
63829: LIST
63830: PUSH
63831: LD_INT 1
63833: NEG
63834: PUSH
63835: LD_INT 0
63837: PUSH
63838: EMPTY
63839: LIST
63840: LIST
63841: PUSH
63842: LD_INT 1
63844: NEG
63845: PUSH
63846: LD_INT 1
63848: NEG
63849: PUSH
63850: EMPTY
63851: LIST
63852: LIST
63853: PUSH
63854: LD_INT 1
63856: NEG
63857: PUSH
63858: LD_INT 2
63860: NEG
63861: PUSH
63862: EMPTY
63863: LIST
63864: LIST
63865: PUSH
63866: LD_INT 0
63868: PUSH
63869: LD_INT 2
63871: NEG
63872: PUSH
63873: EMPTY
63874: LIST
63875: LIST
63876: PUSH
63877: LD_INT 1
63879: PUSH
63880: LD_INT 1
63882: NEG
63883: PUSH
63884: EMPTY
63885: LIST
63886: LIST
63887: PUSH
63888: LD_INT 2
63890: PUSH
63891: LD_INT 0
63893: PUSH
63894: EMPTY
63895: LIST
63896: LIST
63897: PUSH
63898: LD_INT 2
63900: PUSH
63901: LD_INT 1
63903: PUSH
63904: EMPTY
63905: LIST
63906: LIST
63907: PUSH
63908: LD_INT 2
63910: PUSH
63911: LD_INT 2
63913: PUSH
63914: EMPTY
63915: LIST
63916: LIST
63917: PUSH
63918: LD_INT 1
63920: PUSH
63921: LD_INT 2
63923: PUSH
63924: EMPTY
63925: LIST
63926: LIST
63927: PUSH
63928: LD_INT 0
63930: PUSH
63931: LD_INT 2
63933: PUSH
63934: EMPTY
63935: LIST
63936: LIST
63937: PUSH
63938: LD_INT 1
63940: NEG
63941: PUSH
63942: LD_INT 1
63944: PUSH
63945: EMPTY
63946: LIST
63947: LIST
63948: PUSH
63949: LD_INT 2
63951: NEG
63952: PUSH
63953: LD_INT 0
63955: PUSH
63956: EMPTY
63957: LIST
63958: LIST
63959: PUSH
63960: LD_INT 2
63962: NEG
63963: PUSH
63964: LD_INT 1
63966: NEG
63967: PUSH
63968: EMPTY
63969: LIST
63970: LIST
63971: PUSH
63972: LD_INT 2
63974: NEG
63975: PUSH
63976: LD_INT 2
63978: NEG
63979: PUSH
63980: EMPTY
63981: LIST
63982: LIST
63983: PUSH
63984: EMPTY
63985: LIST
63986: LIST
63987: LIST
63988: LIST
63989: LIST
63990: LIST
63991: LIST
63992: LIST
63993: LIST
63994: LIST
63995: LIST
63996: LIST
63997: LIST
63998: LIST
63999: LIST
64000: LIST
64001: LIST
64002: LIST
64003: LIST
64004: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64005: LD_ADDR_VAR 0 55
64009: PUSH
64010: LD_INT 0
64012: PUSH
64013: LD_INT 0
64015: PUSH
64016: EMPTY
64017: LIST
64018: LIST
64019: PUSH
64020: LD_INT 0
64022: PUSH
64023: LD_INT 1
64025: NEG
64026: PUSH
64027: EMPTY
64028: LIST
64029: LIST
64030: PUSH
64031: LD_INT 1
64033: PUSH
64034: LD_INT 0
64036: PUSH
64037: EMPTY
64038: LIST
64039: LIST
64040: PUSH
64041: LD_INT 1
64043: PUSH
64044: LD_INT 1
64046: PUSH
64047: EMPTY
64048: LIST
64049: LIST
64050: PUSH
64051: LD_INT 0
64053: PUSH
64054: LD_INT 1
64056: PUSH
64057: EMPTY
64058: LIST
64059: LIST
64060: PUSH
64061: LD_INT 1
64063: NEG
64064: PUSH
64065: LD_INT 0
64067: PUSH
64068: EMPTY
64069: LIST
64070: LIST
64071: PUSH
64072: LD_INT 1
64074: NEG
64075: PUSH
64076: LD_INT 1
64078: NEG
64079: PUSH
64080: EMPTY
64081: LIST
64082: LIST
64083: PUSH
64084: LD_INT 1
64086: NEG
64087: PUSH
64088: LD_INT 2
64090: NEG
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: PUSH
64096: LD_INT 0
64098: PUSH
64099: LD_INT 2
64101: NEG
64102: PUSH
64103: EMPTY
64104: LIST
64105: LIST
64106: PUSH
64107: LD_INT 1
64109: PUSH
64110: LD_INT 1
64112: NEG
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: PUSH
64118: LD_INT 2
64120: PUSH
64121: LD_INT 0
64123: PUSH
64124: EMPTY
64125: LIST
64126: LIST
64127: PUSH
64128: LD_INT 2
64130: PUSH
64131: LD_INT 1
64133: PUSH
64134: EMPTY
64135: LIST
64136: LIST
64137: PUSH
64138: LD_INT 2
64140: PUSH
64141: LD_INT 2
64143: PUSH
64144: EMPTY
64145: LIST
64146: LIST
64147: PUSH
64148: LD_INT 1
64150: PUSH
64151: LD_INT 2
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: PUSH
64158: LD_INT 0
64160: PUSH
64161: LD_INT 2
64163: PUSH
64164: EMPTY
64165: LIST
64166: LIST
64167: PUSH
64168: LD_INT 1
64170: NEG
64171: PUSH
64172: LD_INT 1
64174: PUSH
64175: EMPTY
64176: LIST
64177: LIST
64178: PUSH
64179: LD_INT 2
64181: NEG
64182: PUSH
64183: LD_INT 0
64185: PUSH
64186: EMPTY
64187: LIST
64188: LIST
64189: PUSH
64190: LD_INT 2
64192: NEG
64193: PUSH
64194: LD_INT 1
64196: NEG
64197: PUSH
64198: EMPTY
64199: LIST
64200: LIST
64201: PUSH
64202: LD_INT 2
64204: NEG
64205: PUSH
64206: LD_INT 2
64208: NEG
64209: PUSH
64210: EMPTY
64211: LIST
64212: LIST
64213: PUSH
64214: EMPTY
64215: LIST
64216: LIST
64217: LIST
64218: LIST
64219: LIST
64220: LIST
64221: LIST
64222: LIST
64223: LIST
64224: LIST
64225: LIST
64226: LIST
64227: LIST
64228: LIST
64229: LIST
64230: LIST
64231: LIST
64232: LIST
64233: LIST
64234: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64235: LD_ADDR_VAR 0 56
64239: PUSH
64240: LD_INT 0
64242: PUSH
64243: LD_INT 0
64245: PUSH
64246: EMPTY
64247: LIST
64248: LIST
64249: PUSH
64250: LD_INT 0
64252: PUSH
64253: LD_INT 1
64255: NEG
64256: PUSH
64257: EMPTY
64258: LIST
64259: LIST
64260: PUSH
64261: LD_INT 1
64263: PUSH
64264: LD_INT 0
64266: PUSH
64267: EMPTY
64268: LIST
64269: LIST
64270: PUSH
64271: LD_INT 1
64273: PUSH
64274: LD_INT 1
64276: PUSH
64277: EMPTY
64278: LIST
64279: LIST
64280: PUSH
64281: LD_INT 0
64283: PUSH
64284: LD_INT 1
64286: PUSH
64287: EMPTY
64288: LIST
64289: LIST
64290: PUSH
64291: LD_INT 1
64293: NEG
64294: PUSH
64295: LD_INT 0
64297: PUSH
64298: EMPTY
64299: LIST
64300: LIST
64301: PUSH
64302: LD_INT 1
64304: NEG
64305: PUSH
64306: LD_INT 1
64308: NEG
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: PUSH
64314: LD_INT 1
64316: NEG
64317: PUSH
64318: LD_INT 2
64320: NEG
64321: PUSH
64322: EMPTY
64323: LIST
64324: LIST
64325: PUSH
64326: LD_INT 0
64328: PUSH
64329: LD_INT 2
64331: NEG
64332: PUSH
64333: EMPTY
64334: LIST
64335: LIST
64336: PUSH
64337: LD_INT 1
64339: PUSH
64340: LD_INT 1
64342: NEG
64343: PUSH
64344: EMPTY
64345: LIST
64346: LIST
64347: PUSH
64348: LD_INT 2
64350: PUSH
64351: LD_INT 0
64353: PUSH
64354: EMPTY
64355: LIST
64356: LIST
64357: PUSH
64358: LD_INT 2
64360: PUSH
64361: LD_INT 1
64363: PUSH
64364: EMPTY
64365: LIST
64366: LIST
64367: PUSH
64368: LD_INT 2
64370: PUSH
64371: LD_INT 2
64373: PUSH
64374: EMPTY
64375: LIST
64376: LIST
64377: PUSH
64378: LD_INT 1
64380: PUSH
64381: LD_INT 2
64383: PUSH
64384: EMPTY
64385: LIST
64386: LIST
64387: PUSH
64388: LD_INT 0
64390: PUSH
64391: LD_INT 2
64393: PUSH
64394: EMPTY
64395: LIST
64396: LIST
64397: PUSH
64398: LD_INT 1
64400: NEG
64401: PUSH
64402: LD_INT 1
64404: PUSH
64405: EMPTY
64406: LIST
64407: LIST
64408: PUSH
64409: LD_INT 2
64411: NEG
64412: PUSH
64413: LD_INT 0
64415: PUSH
64416: EMPTY
64417: LIST
64418: LIST
64419: PUSH
64420: LD_INT 2
64422: NEG
64423: PUSH
64424: LD_INT 1
64426: NEG
64427: PUSH
64428: EMPTY
64429: LIST
64430: LIST
64431: PUSH
64432: LD_INT 2
64434: NEG
64435: PUSH
64436: LD_INT 2
64438: NEG
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: PUSH
64444: EMPTY
64445: LIST
64446: LIST
64447: LIST
64448: LIST
64449: LIST
64450: LIST
64451: LIST
64452: LIST
64453: LIST
64454: LIST
64455: LIST
64456: LIST
64457: LIST
64458: LIST
64459: LIST
64460: LIST
64461: LIST
64462: LIST
64463: LIST
64464: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64465: LD_ADDR_VAR 0 57
64469: PUSH
64470: LD_INT 0
64472: PUSH
64473: LD_INT 0
64475: PUSH
64476: EMPTY
64477: LIST
64478: LIST
64479: PUSH
64480: LD_INT 0
64482: PUSH
64483: LD_INT 1
64485: NEG
64486: PUSH
64487: EMPTY
64488: LIST
64489: LIST
64490: PUSH
64491: LD_INT 1
64493: PUSH
64494: LD_INT 0
64496: PUSH
64497: EMPTY
64498: LIST
64499: LIST
64500: PUSH
64501: LD_INT 1
64503: PUSH
64504: LD_INT 1
64506: PUSH
64507: EMPTY
64508: LIST
64509: LIST
64510: PUSH
64511: LD_INT 0
64513: PUSH
64514: LD_INT 1
64516: PUSH
64517: EMPTY
64518: LIST
64519: LIST
64520: PUSH
64521: LD_INT 1
64523: NEG
64524: PUSH
64525: LD_INT 0
64527: PUSH
64528: EMPTY
64529: LIST
64530: LIST
64531: PUSH
64532: LD_INT 1
64534: NEG
64535: PUSH
64536: LD_INT 1
64538: NEG
64539: PUSH
64540: EMPTY
64541: LIST
64542: LIST
64543: PUSH
64544: LD_INT 1
64546: NEG
64547: PUSH
64548: LD_INT 2
64550: NEG
64551: PUSH
64552: EMPTY
64553: LIST
64554: LIST
64555: PUSH
64556: LD_INT 0
64558: PUSH
64559: LD_INT 2
64561: NEG
64562: PUSH
64563: EMPTY
64564: LIST
64565: LIST
64566: PUSH
64567: LD_INT 1
64569: PUSH
64570: LD_INT 1
64572: NEG
64573: PUSH
64574: EMPTY
64575: LIST
64576: LIST
64577: PUSH
64578: LD_INT 2
64580: PUSH
64581: LD_INT 0
64583: PUSH
64584: EMPTY
64585: LIST
64586: LIST
64587: PUSH
64588: LD_INT 2
64590: PUSH
64591: LD_INT 1
64593: PUSH
64594: EMPTY
64595: LIST
64596: LIST
64597: PUSH
64598: LD_INT 2
64600: PUSH
64601: LD_INT 2
64603: PUSH
64604: EMPTY
64605: LIST
64606: LIST
64607: PUSH
64608: LD_INT 1
64610: PUSH
64611: LD_INT 2
64613: PUSH
64614: EMPTY
64615: LIST
64616: LIST
64617: PUSH
64618: LD_INT 0
64620: PUSH
64621: LD_INT 2
64623: PUSH
64624: EMPTY
64625: LIST
64626: LIST
64627: PUSH
64628: LD_INT 1
64630: NEG
64631: PUSH
64632: LD_INT 1
64634: PUSH
64635: EMPTY
64636: LIST
64637: LIST
64638: PUSH
64639: LD_INT 2
64641: NEG
64642: PUSH
64643: LD_INT 0
64645: PUSH
64646: EMPTY
64647: LIST
64648: LIST
64649: PUSH
64650: LD_INT 2
64652: NEG
64653: PUSH
64654: LD_INT 1
64656: NEG
64657: PUSH
64658: EMPTY
64659: LIST
64660: LIST
64661: PUSH
64662: LD_INT 2
64664: NEG
64665: PUSH
64666: LD_INT 2
64668: NEG
64669: PUSH
64670: EMPTY
64671: LIST
64672: LIST
64673: PUSH
64674: EMPTY
64675: LIST
64676: LIST
64677: LIST
64678: LIST
64679: LIST
64680: LIST
64681: LIST
64682: LIST
64683: LIST
64684: LIST
64685: LIST
64686: LIST
64687: LIST
64688: LIST
64689: LIST
64690: LIST
64691: LIST
64692: LIST
64693: LIST
64694: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64695: LD_ADDR_VAR 0 58
64699: PUSH
64700: LD_INT 0
64702: PUSH
64703: LD_INT 0
64705: PUSH
64706: EMPTY
64707: LIST
64708: LIST
64709: PUSH
64710: LD_INT 0
64712: PUSH
64713: LD_INT 1
64715: NEG
64716: PUSH
64717: EMPTY
64718: LIST
64719: LIST
64720: PUSH
64721: LD_INT 1
64723: PUSH
64724: LD_INT 0
64726: PUSH
64727: EMPTY
64728: LIST
64729: LIST
64730: PUSH
64731: LD_INT 1
64733: PUSH
64734: LD_INT 1
64736: PUSH
64737: EMPTY
64738: LIST
64739: LIST
64740: PUSH
64741: LD_INT 0
64743: PUSH
64744: LD_INT 1
64746: PUSH
64747: EMPTY
64748: LIST
64749: LIST
64750: PUSH
64751: LD_INT 1
64753: NEG
64754: PUSH
64755: LD_INT 0
64757: PUSH
64758: EMPTY
64759: LIST
64760: LIST
64761: PUSH
64762: LD_INT 1
64764: NEG
64765: PUSH
64766: LD_INT 1
64768: NEG
64769: PUSH
64770: EMPTY
64771: LIST
64772: LIST
64773: PUSH
64774: LD_INT 1
64776: NEG
64777: PUSH
64778: LD_INT 2
64780: NEG
64781: PUSH
64782: EMPTY
64783: LIST
64784: LIST
64785: PUSH
64786: LD_INT 0
64788: PUSH
64789: LD_INT 2
64791: NEG
64792: PUSH
64793: EMPTY
64794: LIST
64795: LIST
64796: PUSH
64797: LD_INT 1
64799: PUSH
64800: LD_INT 1
64802: NEG
64803: PUSH
64804: EMPTY
64805: LIST
64806: LIST
64807: PUSH
64808: LD_INT 2
64810: PUSH
64811: LD_INT 0
64813: PUSH
64814: EMPTY
64815: LIST
64816: LIST
64817: PUSH
64818: LD_INT 2
64820: PUSH
64821: LD_INT 1
64823: PUSH
64824: EMPTY
64825: LIST
64826: LIST
64827: PUSH
64828: LD_INT 2
64830: PUSH
64831: LD_INT 2
64833: PUSH
64834: EMPTY
64835: LIST
64836: LIST
64837: PUSH
64838: LD_INT 1
64840: PUSH
64841: LD_INT 2
64843: PUSH
64844: EMPTY
64845: LIST
64846: LIST
64847: PUSH
64848: LD_INT 0
64850: PUSH
64851: LD_INT 2
64853: PUSH
64854: EMPTY
64855: LIST
64856: LIST
64857: PUSH
64858: LD_INT 1
64860: NEG
64861: PUSH
64862: LD_INT 1
64864: PUSH
64865: EMPTY
64866: LIST
64867: LIST
64868: PUSH
64869: LD_INT 2
64871: NEG
64872: PUSH
64873: LD_INT 0
64875: PUSH
64876: EMPTY
64877: LIST
64878: LIST
64879: PUSH
64880: LD_INT 2
64882: NEG
64883: PUSH
64884: LD_INT 1
64886: NEG
64887: PUSH
64888: EMPTY
64889: LIST
64890: LIST
64891: PUSH
64892: LD_INT 2
64894: NEG
64895: PUSH
64896: LD_INT 2
64898: NEG
64899: PUSH
64900: EMPTY
64901: LIST
64902: LIST
64903: PUSH
64904: EMPTY
64905: LIST
64906: LIST
64907: LIST
64908: LIST
64909: LIST
64910: LIST
64911: LIST
64912: LIST
64913: LIST
64914: LIST
64915: LIST
64916: LIST
64917: LIST
64918: LIST
64919: LIST
64920: LIST
64921: LIST
64922: LIST
64923: LIST
64924: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64925: LD_ADDR_VAR 0 59
64929: PUSH
64930: LD_INT 0
64932: PUSH
64933: LD_INT 0
64935: PUSH
64936: EMPTY
64937: LIST
64938: LIST
64939: PUSH
64940: LD_INT 0
64942: PUSH
64943: LD_INT 1
64945: NEG
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: PUSH
64951: LD_INT 1
64953: PUSH
64954: LD_INT 0
64956: PUSH
64957: EMPTY
64958: LIST
64959: LIST
64960: PUSH
64961: LD_INT 1
64963: PUSH
64964: LD_INT 1
64966: PUSH
64967: EMPTY
64968: LIST
64969: LIST
64970: PUSH
64971: LD_INT 0
64973: PUSH
64974: LD_INT 1
64976: PUSH
64977: EMPTY
64978: LIST
64979: LIST
64980: PUSH
64981: LD_INT 1
64983: NEG
64984: PUSH
64985: LD_INT 0
64987: PUSH
64988: EMPTY
64989: LIST
64990: LIST
64991: PUSH
64992: LD_INT 1
64994: NEG
64995: PUSH
64996: LD_INT 1
64998: NEG
64999: PUSH
65000: EMPTY
65001: LIST
65002: LIST
65003: PUSH
65004: EMPTY
65005: LIST
65006: LIST
65007: LIST
65008: LIST
65009: LIST
65010: LIST
65011: LIST
65012: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65013: LD_ADDR_VAR 0 60
65017: PUSH
65018: LD_INT 0
65020: PUSH
65021: LD_INT 0
65023: PUSH
65024: EMPTY
65025: LIST
65026: LIST
65027: PUSH
65028: LD_INT 0
65030: PUSH
65031: LD_INT 1
65033: NEG
65034: PUSH
65035: EMPTY
65036: LIST
65037: LIST
65038: PUSH
65039: LD_INT 1
65041: PUSH
65042: LD_INT 0
65044: PUSH
65045: EMPTY
65046: LIST
65047: LIST
65048: PUSH
65049: LD_INT 1
65051: PUSH
65052: LD_INT 1
65054: PUSH
65055: EMPTY
65056: LIST
65057: LIST
65058: PUSH
65059: LD_INT 0
65061: PUSH
65062: LD_INT 1
65064: PUSH
65065: EMPTY
65066: LIST
65067: LIST
65068: PUSH
65069: LD_INT 1
65071: NEG
65072: PUSH
65073: LD_INT 0
65075: PUSH
65076: EMPTY
65077: LIST
65078: LIST
65079: PUSH
65080: LD_INT 1
65082: NEG
65083: PUSH
65084: LD_INT 1
65086: NEG
65087: PUSH
65088: EMPTY
65089: LIST
65090: LIST
65091: PUSH
65092: EMPTY
65093: LIST
65094: LIST
65095: LIST
65096: LIST
65097: LIST
65098: LIST
65099: LIST
65100: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65101: LD_ADDR_VAR 0 61
65105: PUSH
65106: LD_INT 0
65108: PUSH
65109: LD_INT 0
65111: PUSH
65112: EMPTY
65113: LIST
65114: LIST
65115: PUSH
65116: LD_INT 0
65118: PUSH
65119: LD_INT 1
65121: NEG
65122: PUSH
65123: EMPTY
65124: LIST
65125: LIST
65126: PUSH
65127: LD_INT 1
65129: PUSH
65130: LD_INT 0
65132: PUSH
65133: EMPTY
65134: LIST
65135: LIST
65136: PUSH
65137: LD_INT 1
65139: PUSH
65140: LD_INT 1
65142: PUSH
65143: EMPTY
65144: LIST
65145: LIST
65146: PUSH
65147: LD_INT 0
65149: PUSH
65150: LD_INT 1
65152: PUSH
65153: EMPTY
65154: LIST
65155: LIST
65156: PUSH
65157: LD_INT 1
65159: NEG
65160: PUSH
65161: LD_INT 0
65163: PUSH
65164: EMPTY
65165: LIST
65166: LIST
65167: PUSH
65168: LD_INT 1
65170: NEG
65171: PUSH
65172: LD_INT 1
65174: NEG
65175: PUSH
65176: EMPTY
65177: LIST
65178: LIST
65179: PUSH
65180: EMPTY
65181: LIST
65182: LIST
65183: LIST
65184: LIST
65185: LIST
65186: LIST
65187: LIST
65188: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65189: LD_ADDR_VAR 0 62
65193: PUSH
65194: LD_INT 0
65196: PUSH
65197: LD_INT 0
65199: PUSH
65200: EMPTY
65201: LIST
65202: LIST
65203: PUSH
65204: LD_INT 0
65206: PUSH
65207: LD_INT 1
65209: NEG
65210: PUSH
65211: EMPTY
65212: LIST
65213: LIST
65214: PUSH
65215: LD_INT 1
65217: PUSH
65218: LD_INT 0
65220: PUSH
65221: EMPTY
65222: LIST
65223: LIST
65224: PUSH
65225: LD_INT 1
65227: PUSH
65228: LD_INT 1
65230: PUSH
65231: EMPTY
65232: LIST
65233: LIST
65234: PUSH
65235: LD_INT 0
65237: PUSH
65238: LD_INT 1
65240: PUSH
65241: EMPTY
65242: LIST
65243: LIST
65244: PUSH
65245: LD_INT 1
65247: NEG
65248: PUSH
65249: LD_INT 0
65251: PUSH
65252: EMPTY
65253: LIST
65254: LIST
65255: PUSH
65256: LD_INT 1
65258: NEG
65259: PUSH
65260: LD_INT 1
65262: NEG
65263: PUSH
65264: EMPTY
65265: LIST
65266: LIST
65267: PUSH
65268: EMPTY
65269: LIST
65270: LIST
65271: LIST
65272: LIST
65273: LIST
65274: LIST
65275: LIST
65276: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65277: LD_ADDR_VAR 0 63
65281: PUSH
65282: LD_INT 0
65284: PUSH
65285: LD_INT 0
65287: PUSH
65288: EMPTY
65289: LIST
65290: LIST
65291: PUSH
65292: LD_INT 0
65294: PUSH
65295: LD_INT 1
65297: NEG
65298: PUSH
65299: EMPTY
65300: LIST
65301: LIST
65302: PUSH
65303: LD_INT 1
65305: PUSH
65306: LD_INT 0
65308: PUSH
65309: EMPTY
65310: LIST
65311: LIST
65312: PUSH
65313: LD_INT 1
65315: PUSH
65316: LD_INT 1
65318: PUSH
65319: EMPTY
65320: LIST
65321: LIST
65322: PUSH
65323: LD_INT 0
65325: PUSH
65326: LD_INT 1
65328: PUSH
65329: EMPTY
65330: LIST
65331: LIST
65332: PUSH
65333: LD_INT 1
65335: NEG
65336: PUSH
65337: LD_INT 0
65339: PUSH
65340: EMPTY
65341: LIST
65342: LIST
65343: PUSH
65344: LD_INT 1
65346: NEG
65347: PUSH
65348: LD_INT 1
65350: NEG
65351: PUSH
65352: EMPTY
65353: LIST
65354: LIST
65355: PUSH
65356: EMPTY
65357: LIST
65358: LIST
65359: LIST
65360: LIST
65361: LIST
65362: LIST
65363: LIST
65364: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65365: LD_ADDR_VAR 0 64
65369: PUSH
65370: LD_INT 0
65372: PUSH
65373: LD_INT 0
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: PUSH
65380: LD_INT 0
65382: PUSH
65383: LD_INT 1
65385: NEG
65386: PUSH
65387: EMPTY
65388: LIST
65389: LIST
65390: PUSH
65391: LD_INT 1
65393: PUSH
65394: LD_INT 0
65396: PUSH
65397: EMPTY
65398: LIST
65399: LIST
65400: PUSH
65401: LD_INT 1
65403: PUSH
65404: LD_INT 1
65406: PUSH
65407: EMPTY
65408: LIST
65409: LIST
65410: PUSH
65411: LD_INT 0
65413: PUSH
65414: LD_INT 1
65416: PUSH
65417: EMPTY
65418: LIST
65419: LIST
65420: PUSH
65421: LD_INT 1
65423: NEG
65424: PUSH
65425: LD_INT 0
65427: PUSH
65428: EMPTY
65429: LIST
65430: LIST
65431: PUSH
65432: LD_INT 1
65434: NEG
65435: PUSH
65436: LD_INT 1
65438: NEG
65439: PUSH
65440: EMPTY
65441: LIST
65442: LIST
65443: PUSH
65444: EMPTY
65445: LIST
65446: LIST
65447: LIST
65448: LIST
65449: LIST
65450: LIST
65451: LIST
65452: ST_TO_ADDR
// end ; 1 :
65453: GO 71350
65455: LD_INT 1
65457: DOUBLE
65458: EQUAL
65459: IFTRUE 65463
65461: GO 68086
65463: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65464: LD_ADDR_VAR 0 11
65468: PUSH
65469: LD_INT 1
65471: NEG
65472: PUSH
65473: LD_INT 3
65475: NEG
65476: PUSH
65477: EMPTY
65478: LIST
65479: LIST
65480: PUSH
65481: LD_INT 0
65483: PUSH
65484: LD_INT 3
65486: NEG
65487: PUSH
65488: EMPTY
65489: LIST
65490: LIST
65491: PUSH
65492: LD_INT 1
65494: PUSH
65495: LD_INT 2
65497: NEG
65498: PUSH
65499: EMPTY
65500: LIST
65501: LIST
65502: PUSH
65503: EMPTY
65504: LIST
65505: LIST
65506: LIST
65507: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65508: LD_ADDR_VAR 0 12
65512: PUSH
65513: LD_INT 2
65515: PUSH
65516: LD_INT 1
65518: NEG
65519: PUSH
65520: EMPTY
65521: LIST
65522: LIST
65523: PUSH
65524: LD_INT 3
65526: PUSH
65527: LD_INT 0
65529: PUSH
65530: EMPTY
65531: LIST
65532: LIST
65533: PUSH
65534: LD_INT 3
65536: PUSH
65537: LD_INT 1
65539: PUSH
65540: EMPTY
65541: LIST
65542: LIST
65543: PUSH
65544: EMPTY
65545: LIST
65546: LIST
65547: LIST
65548: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65549: LD_ADDR_VAR 0 13
65553: PUSH
65554: LD_INT 3
65556: PUSH
65557: LD_INT 2
65559: PUSH
65560: EMPTY
65561: LIST
65562: LIST
65563: PUSH
65564: LD_INT 3
65566: PUSH
65567: LD_INT 3
65569: PUSH
65570: EMPTY
65571: LIST
65572: LIST
65573: PUSH
65574: LD_INT 2
65576: PUSH
65577: LD_INT 3
65579: PUSH
65580: EMPTY
65581: LIST
65582: LIST
65583: PUSH
65584: EMPTY
65585: LIST
65586: LIST
65587: LIST
65588: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65589: LD_ADDR_VAR 0 14
65593: PUSH
65594: LD_INT 1
65596: PUSH
65597: LD_INT 3
65599: PUSH
65600: EMPTY
65601: LIST
65602: LIST
65603: PUSH
65604: LD_INT 0
65606: PUSH
65607: LD_INT 3
65609: PUSH
65610: EMPTY
65611: LIST
65612: LIST
65613: PUSH
65614: LD_INT 1
65616: NEG
65617: PUSH
65618: LD_INT 2
65620: PUSH
65621: EMPTY
65622: LIST
65623: LIST
65624: PUSH
65625: EMPTY
65626: LIST
65627: LIST
65628: LIST
65629: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65630: LD_ADDR_VAR 0 15
65634: PUSH
65635: LD_INT 2
65637: NEG
65638: PUSH
65639: LD_INT 1
65641: PUSH
65642: EMPTY
65643: LIST
65644: LIST
65645: PUSH
65646: LD_INT 3
65648: NEG
65649: PUSH
65650: LD_INT 0
65652: PUSH
65653: EMPTY
65654: LIST
65655: LIST
65656: PUSH
65657: LD_INT 3
65659: NEG
65660: PUSH
65661: LD_INT 1
65663: NEG
65664: PUSH
65665: EMPTY
65666: LIST
65667: LIST
65668: PUSH
65669: EMPTY
65670: LIST
65671: LIST
65672: LIST
65673: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65674: LD_ADDR_VAR 0 16
65678: PUSH
65679: LD_INT 2
65681: NEG
65682: PUSH
65683: LD_INT 3
65685: NEG
65686: PUSH
65687: EMPTY
65688: LIST
65689: LIST
65690: PUSH
65691: LD_INT 3
65693: NEG
65694: PUSH
65695: LD_INT 2
65697: NEG
65698: PUSH
65699: EMPTY
65700: LIST
65701: LIST
65702: PUSH
65703: LD_INT 3
65705: NEG
65706: PUSH
65707: LD_INT 3
65709: NEG
65710: PUSH
65711: EMPTY
65712: LIST
65713: LIST
65714: PUSH
65715: EMPTY
65716: LIST
65717: LIST
65718: LIST
65719: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65720: LD_ADDR_VAR 0 17
65724: PUSH
65725: LD_INT 1
65727: NEG
65728: PUSH
65729: LD_INT 3
65731: NEG
65732: PUSH
65733: EMPTY
65734: LIST
65735: LIST
65736: PUSH
65737: LD_INT 0
65739: PUSH
65740: LD_INT 3
65742: NEG
65743: PUSH
65744: EMPTY
65745: LIST
65746: LIST
65747: PUSH
65748: LD_INT 1
65750: PUSH
65751: LD_INT 2
65753: NEG
65754: PUSH
65755: EMPTY
65756: LIST
65757: LIST
65758: PUSH
65759: EMPTY
65760: LIST
65761: LIST
65762: LIST
65763: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65764: LD_ADDR_VAR 0 18
65768: PUSH
65769: LD_INT 2
65771: PUSH
65772: LD_INT 1
65774: NEG
65775: PUSH
65776: EMPTY
65777: LIST
65778: LIST
65779: PUSH
65780: LD_INT 3
65782: PUSH
65783: LD_INT 0
65785: PUSH
65786: EMPTY
65787: LIST
65788: LIST
65789: PUSH
65790: LD_INT 3
65792: PUSH
65793: LD_INT 1
65795: PUSH
65796: EMPTY
65797: LIST
65798: LIST
65799: PUSH
65800: EMPTY
65801: LIST
65802: LIST
65803: LIST
65804: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65805: LD_ADDR_VAR 0 19
65809: PUSH
65810: LD_INT 3
65812: PUSH
65813: LD_INT 2
65815: PUSH
65816: EMPTY
65817: LIST
65818: LIST
65819: PUSH
65820: LD_INT 3
65822: PUSH
65823: LD_INT 3
65825: PUSH
65826: EMPTY
65827: LIST
65828: LIST
65829: PUSH
65830: LD_INT 2
65832: PUSH
65833: LD_INT 3
65835: PUSH
65836: EMPTY
65837: LIST
65838: LIST
65839: PUSH
65840: EMPTY
65841: LIST
65842: LIST
65843: LIST
65844: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65845: LD_ADDR_VAR 0 20
65849: PUSH
65850: LD_INT 1
65852: PUSH
65853: LD_INT 3
65855: PUSH
65856: EMPTY
65857: LIST
65858: LIST
65859: PUSH
65860: LD_INT 0
65862: PUSH
65863: LD_INT 3
65865: PUSH
65866: EMPTY
65867: LIST
65868: LIST
65869: PUSH
65870: LD_INT 1
65872: NEG
65873: PUSH
65874: LD_INT 2
65876: PUSH
65877: EMPTY
65878: LIST
65879: LIST
65880: PUSH
65881: EMPTY
65882: LIST
65883: LIST
65884: LIST
65885: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65886: LD_ADDR_VAR 0 21
65890: PUSH
65891: LD_INT 2
65893: NEG
65894: PUSH
65895: LD_INT 1
65897: PUSH
65898: EMPTY
65899: LIST
65900: LIST
65901: PUSH
65902: LD_INT 3
65904: NEG
65905: PUSH
65906: LD_INT 0
65908: PUSH
65909: EMPTY
65910: LIST
65911: LIST
65912: PUSH
65913: LD_INT 3
65915: NEG
65916: PUSH
65917: LD_INT 1
65919: NEG
65920: PUSH
65921: EMPTY
65922: LIST
65923: LIST
65924: PUSH
65925: EMPTY
65926: LIST
65927: LIST
65928: LIST
65929: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65930: LD_ADDR_VAR 0 22
65934: PUSH
65935: LD_INT 2
65937: NEG
65938: PUSH
65939: LD_INT 3
65941: NEG
65942: PUSH
65943: EMPTY
65944: LIST
65945: LIST
65946: PUSH
65947: LD_INT 3
65949: NEG
65950: PUSH
65951: LD_INT 2
65953: NEG
65954: PUSH
65955: EMPTY
65956: LIST
65957: LIST
65958: PUSH
65959: LD_INT 3
65961: NEG
65962: PUSH
65963: LD_INT 3
65965: NEG
65966: PUSH
65967: EMPTY
65968: LIST
65969: LIST
65970: PUSH
65971: EMPTY
65972: LIST
65973: LIST
65974: LIST
65975: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
65976: LD_ADDR_VAR 0 23
65980: PUSH
65981: LD_INT 0
65983: PUSH
65984: LD_INT 3
65986: NEG
65987: PUSH
65988: EMPTY
65989: LIST
65990: LIST
65991: PUSH
65992: LD_INT 1
65994: NEG
65995: PUSH
65996: LD_INT 4
65998: NEG
65999: PUSH
66000: EMPTY
66001: LIST
66002: LIST
66003: PUSH
66004: LD_INT 1
66006: PUSH
66007: LD_INT 3
66009: NEG
66010: PUSH
66011: EMPTY
66012: LIST
66013: LIST
66014: PUSH
66015: EMPTY
66016: LIST
66017: LIST
66018: LIST
66019: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
66020: LD_ADDR_VAR 0 24
66024: PUSH
66025: LD_INT 3
66027: PUSH
66028: LD_INT 0
66030: PUSH
66031: EMPTY
66032: LIST
66033: LIST
66034: PUSH
66035: LD_INT 3
66037: PUSH
66038: LD_INT 1
66040: NEG
66041: PUSH
66042: EMPTY
66043: LIST
66044: LIST
66045: PUSH
66046: LD_INT 4
66048: PUSH
66049: LD_INT 1
66051: PUSH
66052: EMPTY
66053: LIST
66054: LIST
66055: PUSH
66056: EMPTY
66057: LIST
66058: LIST
66059: LIST
66060: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
66061: LD_ADDR_VAR 0 25
66065: PUSH
66066: LD_INT 3
66068: PUSH
66069: LD_INT 3
66071: PUSH
66072: EMPTY
66073: LIST
66074: LIST
66075: PUSH
66076: LD_INT 4
66078: PUSH
66079: LD_INT 3
66081: PUSH
66082: EMPTY
66083: LIST
66084: LIST
66085: PUSH
66086: LD_INT 3
66088: PUSH
66089: LD_INT 4
66091: PUSH
66092: EMPTY
66093: LIST
66094: LIST
66095: PUSH
66096: EMPTY
66097: LIST
66098: LIST
66099: LIST
66100: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
66101: LD_ADDR_VAR 0 26
66105: PUSH
66106: LD_INT 0
66108: PUSH
66109: LD_INT 3
66111: PUSH
66112: EMPTY
66113: LIST
66114: LIST
66115: PUSH
66116: LD_INT 1
66118: PUSH
66119: LD_INT 4
66121: PUSH
66122: EMPTY
66123: LIST
66124: LIST
66125: PUSH
66126: LD_INT 1
66128: NEG
66129: PUSH
66130: LD_INT 3
66132: PUSH
66133: EMPTY
66134: LIST
66135: LIST
66136: PUSH
66137: EMPTY
66138: LIST
66139: LIST
66140: LIST
66141: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
66142: LD_ADDR_VAR 0 27
66146: PUSH
66147: LD_INT 3
66149: NEG
66150: PUSH
66151: LD_INT 0
66153: PUSH
66154: EMPTY
66155: LIST
66156: LIST
66157: PUSH
66158: LD_INT 3
66160: NEG
66161: PUSH
66162: LD_INT 1
66164: PUSH
66165: EMPTY
66166: LIST
66167: LIST
66168: PUSH
66169: LD_INT 4
66171: NEG
66172: PUSH
66173: LD_INT 1
66175: NEG
66176: PUSH
66177: EMPTY
66178: LIST
66179: LIST
66180: PUSH
66181: EMPTY
66182: LIST
66183: LIST
66184: LIST
66185: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
66186: LD_ADDR_VAR 0 28
66190: PUSH
66191: LD_INT 3
66193: NEG
66194: PUSH
66195: LD_INT 3
66197: NEG
66198: PUSH
66199: EMPTY
66200: LIST
66201: LIST
66202: PUSH
66203: LD_INT 3
66205: NEG
66206: PUSH
66207: LD_INT 4
66209: NEG
66210: PUSH
66211: EMPTY
66212: LIST
66213: LIST
66214: PUSH
66215: LD_INT 4
66217: NEG
66218: PUSH
66219: LD_INT 3
66221: NEG
66222: PUSH
66223: EMPTY
66224: LIST
66225: LIST
66226: PUSH
66227: EMPTY
66228: LIST
66229: LIST
66230: LIST
66231: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
66232: LD_ADDR_VAR 0 29
66236: PUSH
66237: LD_INT 1
66239: NEG
66240: PUSH
66241: LD_INT 3
66243: NEG
66244: PUSH
66245: EMPTY
66246: LIST
66247: LIST
66248: PUSH
66249: LD_INT 0
66251: PUSH
66252: LD_INT 3
66254: NEG
66255: PUSH
66256: EMPTY
66257: LIST
66258: LIST
66259: PUSH
66260: LD_INT 1
66262: PUSH
66263: LD_INT 2
66265: NEG
66266: PUSH
66267: EMPTY
66268: LIST
66269: LIST
66270: PUSH
66271: LD_INT 1
66273: NEG
66274: PUSH
66275: LD_INT 4
66277: NEG
66278: PUSH
66279: EMPTY
66280: LIST
66281: LIST
66282: PUSH
66283: LD_INT 0
66285: PUSH
66286: LD_INT 4
66288: NEG
66289: PUSH
66290: EMPTY
66291: LIST
66292: LIST
66293: PUSH
66294: LD_INT 1
66296: PUSH
66297: LD_INT 3
66299: NEG
66300: PUSH
66301: EMPTY
66302: LIST
66303: LIST
66304: PUSH
66305: LD_INT 1
66307: NEG
66308: PUSH
66309: LD_INT 5
66311: NEG
66312: PUSH
66313: EMPTY
66314: LIST
66315: LIST
66316: PUSH
66317: LD_INT 0
66319: PUSH
66320: LD_INT 5
66322: NEG
66323: PUSH
66324: EMPTY
66325: LIST
66326: LIST
66327: PUSH
66328: LD_INT 1
66330: PUSH
66331: LD_INT 4
66333: NEG
66334: PUSH
66335: EMPTY
66336: LIST
66337: LIST
66338: PUSH
66339: LD_INT 1
66341: NEG
66342: PUSH
66343: LD_INT 6
66345: NEG
66346: PUSH
66347: EMPTY
66348: LIST
66349: LIST
66350: PUSH
66351: LD_INT 0
66353: PUSH
66354: LD_INT 6
66356: NEG
66357: PUSH
66358: EMPTY
66359: LIST
66360: LIST
66361: PUSH
66362: LD_INT 1
66364: PUSH
66365: LD_INT 5
66367: NEG
66368: PUSH
66369: EMPTY
66370: LIST
66371: LIST
66372: PUSH
66373: EMPTY
66374: LIST
66375: LIST
66376: LIST
66377: LIST
66378: LIST
66379: LIST
66380: LIST
66381: LIST
66382: LIST
66383: LIST
66384: LIST
66385: LIST
66386: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
66387: LD_ADDR_VAR 0 30
66391: PUSH
66392: LD_INT 2
66394: PUSH
66395: LD_INT 1
66397: NEG
66398: PUSH
66399: EMPTY
66400: LIST
66401: LIST
66402: PUSH
66403: LD_INT 3
66405: PUSH
66406: LD_INT 0
66408: PUSH
66409: EMPTY
66410: LIST
66411: LIST
66412: PUSH
66413: LD_INT 3
66415: PUSH
66416: LD_INT 1
66418: PUSH
66419: EMPTY
66420: LIST
66421: LIST
66422: PUSH
66423: LD_INT 3
66425: PUSH
66426: LD_INT 1
66428: NEG
66429: PUSH
66430: EMPTY
66431: LIST
66432: LIST
66433: PUSH
66434: LD_INT 4
66436: PUSH
66437: LD_INT 0
66439: PUSH
66440: EMPTY
66441: LIST
66442: LIST
66443: PUSH
66444: LD_INT 4
66446: PUSH
66447: LD_INT 1
66449: PUSH
66450: EMPTY
66451: LIST
66452: LIST
66453: PUSH
66454: LD_INT 4
66456: PUSH
66457: LD_INT 1
66459: NEG
66460: PUSH
66461: EMPTY
66462: LIST
66463: LIST
66464: PUSH
66465: LD_INT 5
66467: PUSH
66468: LD_INT 0
66470: PUSH
66471: EMPTY
66472: LIST
66473: LIST
66474: PUSH
66475: LD_INT 5
66477: PUSH
66478: LD_INT 1
66480: PUSH
66481: EMPTY
66482: LIST
66483: LIST
66484: PUSH
66485: LD_INT 5
66487: PUSH
66488: LD_INT 1
66490: NEG
66491: PUSH
66492: EMPTY
66493: LIST
66494: LIST
66495: PUSH
66496: LD_INT 6
66498: PUSH
66499: LD_INT 0
66501: PUSH
66502: EMPTY
66503: LIST
66504: LIST
66505: PUSH
66506: LD_INT 6
66508: PUSH
66509: LD_INT 1
66511: PUSH
66512: EMPTY
66513: LIST
66514: LIST
66515: PUSH
66516: EMPTY
66517: LIST
66518: LIST
66519: LIST
66520: LIST
66521: LIST
66522: LIST
66523: LIST
66524: LIST
66525: LIST
66526: LIST
66527: LIST
66528: LIST
66529: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
66530: LD_ADDR_VAR 0 31
66534: PUSH
66535: LD_INT 3
66537: PUSH
66538: LD_INT 2
66540: PUSH
66541: EMPTY
66542: LIST
66543: LIST
66544: PUSH
66545: LD_INT 3
66547: PUSH
66548: LD_INT 3
66550: PUSH
66551: EMPTY
66552: LIST
66553: LIST
66554: PUSH
66555: LD_INT 2
66557: PUSH
66558: LD_INT 3
66560: PUSH
66561: EMPTY
66562: LIST
66563: LIST
66564: PUSH
66565: LD_INT 4
66567: PUSH
66568: LD_INT 3
66570: PUSH
66571: EMPTY
66572: LIST
66573: LIST
66574: PUSH
66575: LD_INT 4
66577: PUSH
66578: LD_INT 4
66580: PUSH
66581: EMPTY
66582: LIST
66583: LIST
66584: PUSH
66585: LD_INT 3
66587: PUSH
66588: LD_INT 4
66590: PUSH
66591: EMPTY
66592: LIST
66593: LIST
66594: PUSH
66595: LD_INT 5
66597: PUSH
66598: LD_INT 4
66600: PUSH
66601: EMPTY
66602: LIST
66603: LIST
66604: PUSH
66605: LD_INT 5
66607: PUSH
66608: LD_INT 5
66610: PUSH
66611: EMPTY
66612: LIST
66613: LIST
66614: PUSH
66615: LD_INT 4
66617: PUSH
66618: LD_INT 5
66620: PUSH
66621: EMPTY
66622: LIST
66623: LIST
66624: PUSH
66625: LD_INT 6
66627: PUSH
66628: LD_INT 5
66630: PUSH
66631: EMPTY
66632: LIST
66633: LIST
66634: PUSH
66635: LD_INT 6
66637: PUSH
66638: LD_INT 6
66640: PUSH
66641: EMPTY
66642: LIST
66643: LIST
66644: PUSH
66645: LD_INT 5
66647: PUSH
66648: LD_INT 6
66650: PUSH
66651: EMPTY
66652: LIST
66653: LIST
66654: PUSH
66655: EMPTY
66656: LIST
66657: LIST
66658: LIST
66659: LIST
66660: LIST
66661: LIST
66662: LIST
66663: LIST
66664: LIST
66665: LIST
66666: LIST
66667: LIST
66668: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
66669: LD_ADDR_VAR 0 32
66673: PUSH
66674: LD_INT 1
66676: PUSH
66677: LD_INT 3
66679: PUSH
66680: EMPTY
66681: LIST
66682: LIST
66683: PUSH
66684: LD_INT 0
66686: PUSH
66687: LD_INT 3
66689: PUSH
66690: EMPTY
66691: LIST
66692: LIST
66693: PUSH
66694: LD_INT 1
66696: NEG
66697: PUSH
66698: LD_INT 2
66700: PUSH
66701: EMPTY
66702: LIST
66703: LIST
66704: PUSH
66705: LD_INT 1
66707: PUSH
66708: LD_INT 4
66710: PUSH
66711: EMPTY
66712: LIST
66713: LIST
66714: PUSH
66715: LD_INT 0
66717: PUSH
66718: LD_INT 4
66720: PUSH
66721: EMPTY
66722: LIST
66723: LIST
66724: PUSH
66725: LD_INT 1
66727: NEG
66728: PUSH
66729: LD_INT 3
66731: PUSH
66732: EMPTY
66733: LIST
66734: LIST
66735: PUSH
66736: LD_INT 1
66738: PUSH
66739: LD_INT 5
66741: PUSH
66742: EMPTY
66743: LIST
66744: LIST
66745: PUSH
66746: LD_INT 0
66748: PUSH
66749: LD_INT 5
66751: PUSH
66752: EMPTY
66753: LIST
66754: LIST
66755: PUSH
66756: LD_INT 1
66758: NEG
66759: PUSH
66760: LD_INT 4
66762: PUSH
66763: EMPTY
66764: LIST
66765: LIST
66766: PUSH
66767: LD_INT 1
66769: PUSH
66770: LD_INT 6
66772: PUSH
66773: EMPTY
66774: LIST
66775: LIST
66776: PUSH
66777: LD_INT 0
66779: PUSH
66780: LD_INT 6
66782: PUSH
66783: EMPTY
66784: LIST
66785: LIST
66786: PUSH
66787: LD_INT 1
66789: NEG
66790: PUSH
66791: LD_INT 5
66793: PUSH
66794: EMPTY
66795: LIST
66796: LIST
66797: PUSH
66798: EMPTY
66799: LIST
66800: LIST
66801: LIST
66802: LIST
66803: LIST
66804: LIST
66805: LIST
66806: LIST
66807: LIST
66808: LIST
66809: LIST
66810: LIST
66811: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
66812: LD_ADDR_VAR 0 33
66816: PUSH
66817: LD_INT 2
66819: NEG
66820: PUSH
66821: LD_INT 1
66823: PUSH
66824: EMPTY
66825: LIST
66826: LIST
66827: PUSH
66828: LD_INT 3
66830: NEG
66831: PUSH
66832: LD_INT 0
66834: PUSH
66835: EMPTY
66836: LIST
66837: LIST
66838: PUSH
66839: LD_INT 3
66841: NEG
66842: PUSH
66843: LD_INT 1
66845: NEG
66846: PUSH
66847: EMPTY
66848: LIST
66849: LIST
66850: PUSH
66851: LD_INT 3
66853: NEG
66854: PUSH
66855: LD_INT 1
66857: PUSH
66858: EMPTY
66859: LIST
66860: LIST
66861: PUSH
66862: LD_INT 4
66864: NEG
66865: PUSH
66866: LD_INT 0
66868: PUSH
66869: EMPTY
66870: LIST
66871: LIST
66872: PUSH
66873: LD_INT 4
66875: NEG
66876: PUSH
66877: LD_INT 1
66879: NEG
66880: PUSH
66881: EMPTY
66882: LIST
66883: LIST
66884: PUSH
66885: LD_INT 4
66887: NEG
66888: PUSH
66889: LD_INT 1
66891: PUSH
66892: EMPTY
66893: LIST
66894: LIST
66895: PUSH
66896: LD_INT 5
66898: NEG
66899: PUSH
66900: LD_INT 0
66902: PUSH
66903: EMPTY
66904: LIST
66905: LIST
66906: PUSH
66907: LD_INT 5
66909: NEG
66910: PUSH
66911: LD_INT 1
66913: NEG
66914: PUSH
66915: EMPTY
66916: LIST
66917: LIST
66918: PUSH
66919: LD_INT 5
66921: NEG
66922: PUSH
66923: LD_INT 1
66925: PUSH
66926: EMPTY
66927: LIST
66928: LIST
66929: PUSH
66930: LD_INT 6
66932: NEG
66933: PUSH
66934: LD_INT 0
66936: PUSH
66937: EMPTY
66938: LIST
66939: LIST
66940: PUSH
66941: LD_INT 6
66943: NEG
66944: PUSH
66945: LD_INT 1
66947: NEG
66948: PUSH
66949: EMPTY
66950: LIST
66951: LIST
66952: PUSH
66953: EMPTY
66954: LIST
66955: LIST
66956: LIST
66957: LIST
66958: LIST
66959: LIST
66960: LIST
66961: LIST
66962: LIST
66963: LIST
66964: LIST
66965: LIST
66966: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
66967: LD_ADDR_VAR 0 34
66971: PUSH
66972: LD_INT 2
66974: NEG
66975: PUSH
66976: LD_INT 3
66978: NEG
66979: PUSH
66980: EMPTY
66981: LIST
66982: LIST
66983: PUSH
66984: LD_INT 3
66986: NEG
66987: PUSH
66988: LD_INT 2
66990: NEG
66991: PUSH
66992: EMPTY
66993: LIST
66994: LIST
66995: PUSH
66996: LD_INT 3
66998: NEG
66999: PUSH
67000: LD_INT 3
67002: NEG
67003: PUSH
67004: EMPTY
67005: LIST
67006: LIST
67007: PUSH
67008: LD_INT 3
67010: NEG
67011: PUSH
67012: LD_INT 4
67014: NEG
67015: PUSH
67016: EMPTY
67017: LIST
67018: LIST
67019: PUSH
67020: LD_INT 4
67022: NEG
67023: PUSH
67024: LD_INT 3
67026: NEG
67027: PUSH
67028: EMPTY
67029: LIST
67030: LIST
67031: PUSH
67032: LD_INT 4
67034: NEG
67035: PUSH
67036: LD_INT 4
67038: NEG
67039: PUSH
67040: EMPTY
67041: LIST
67042: LIST
67043: PUSH
67044: LD_INT 4
67046: NEG
67047: PUSH
67048: LD_INT 5
67050: NEG
67051: PUSH
67052: EMPTY
67053: LIST
67054: LIST
67055: PUSH
67056: LD_INT 5
67058: NEG
67059: PUSH
67060: LD_INT 4
67062: NEG
67063: PUSH
67064: EMPTY
67065: LIST
67066: LIST
67067: PUSH
67068: LD_INT 5
67070: NEG
67071: PUSH
67072: LD_INT 5
67074: NEG
67075: PUSH
67076: EMPTY
67077: LIST
67078: LIST
67079: PUSH
67080: LD_INT 5
67082: NEG
67083: PUSH
67084: LD_INT 6
67086: NEG
67087: PUSH
67088: EMPTY
67089: LIST
67090: LIST
67091: PUSH
67092: LD_INT 6
67094: NEG
67095: PUSH
67096: LD_INT 5
67098: NEG
67099: PUSH
67100: EMPTY
67101: LIST
67102: LIST
67103: PUSH
67104: LD_INT 6
67106: NEG
67107: PUSH
67108: LD_INT 6
67110: NEG
67111: PUSH
67112: EMPTY
67113: LIST
67114: LIST
67115: PUSH
67116: EMPTY
67117: LIST
67118: LIST
67119: LIST
67120: LIST
67121: LIST
67122: LIST
67123: LIST
67124: LIST
67125: LIST
67126: LIST
67127: LIST
67128: LIST
67129: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
67130: LD_ADDR_VAR 0 41
67134: PUSH
67135: LD_INT 0
67137: PUSH
67138: LD_INT 2
67140: NEG
67141: PUSH
67142: EMPTY
67143: LIST
67144: LIST
67145: PUSH
67146: LD_INT 1
67148: NEG
67149: PUSH
67150: LD_INT 3
67152: NEG
67153: PUSH
67154: EMPTY
67155: LIST
67156: LIST
67157: PUSH
67158: LD_INT 1
67160: PUSH
67161: LD_INT 2
67163: NEG
67164: PUSH
67165: EMPTY
67166: LIST
67167: LIST
67168: PUSH
67169: EMPTY
67170: LIST
67171: LIST
67172: LIST
67173: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
67174: LD_ADDR_VAR 0 42
67178: PUSH
67179: LD_INT 2
67181: PUSH
67182: LD_INT 0
67184: PUSH
67185: EMPTY
67186: LIST
67187: LIST
67188: PUSH
67189: LD_INT 2
67191: PUSH
67192: LD_INT 1
67194: NEG
67195: PUSH
67196: EMPTY
67197: LIST
67198: LIST
67199: PUSH
67200: LD_INT 3
67202: PUSH
67203: LD_INT 1
67205: PUSH
67206: EMPTY
67207: LIST
67208: LIST
67209: PUSH
67210: EMPTY
67211: LIST
67212: LIST
67213: LIST
67214: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
67215: LD_ADDR_VAR 0 43
67219: PUSH
67220: LD_INT 2
67222: PUSH
67223: LD_INT 2
67225: PUSH
67226: EMPTY
67227: LIST
67228: LIST
67229: PUSH
67230: LD_INT 3
67232: PUSH
67233: LD_INT 2
67235: PUSH
67236: EMPTY
67237: LIST
67238: LIST
67239: PUSH
67240: LD_INT 2
67242: PUSH
67243: LD_INT 3
67245: PUSH
67246: EMPTY
67247: LIST
67248: LIST
67249: PUSH
67250: EMPTY
67251: LIST
67252: LIST
67253: LIST
67254: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
67255: LD_ADDR_VAR 0 44
67259: PUSH
67260: LD_INT 0
67262: PUSH
67263: LD_INT 2
67265: PUSH
67266: EMPTY
67267: LIST
67268: LIST
67269: PUSH
67270: LD_INT 1
67272: PUSH
67273: LD_INT 3
67275: PUSH
67276: EMPTY
67277: LIST
67278: LIST
67279: PUSH
67280: LD_INT 1
67282: NEG
67283: PUSH
67284: LD_INT 2
67286: PUSH
67287: EMPTY
67288: LIST
67289: LIST
67290: PUSH
67291: EMPTY
67292: LIST
67293: LIST
67294: LIST
67295: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67296: LD_ADDR_VAR 0 45
67300: PUSH
67301: LD_INT 2
67303: NEG
67304: PUSH
67305: LD_INT 0
67307: PUSH
67308: EMPTY
67309: LIST
67310: LIST
67311: PUSH
67312: LD_INT 2
67314: NEG
67315: PUSH
67316: LD_INT 1
67318: PUSH
67319: EMPTY
67320: LIST
67321: LIST
67322: PUSH
67323: LD_INT 3
67325: NEG
67326: PUSH
67327: LD_INT 1
67329: NEG
67330: PUSH
67331: EMPTY
67332: LIST
67333: LIST
67334: PUSH
67335: EMPTY
67336: LIST
67337: LIST
67338: LIST
67339: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
67340: LD_ADDR_VAR 0 46
67344: PUSH
67345: LD_INT 2
67347: NEG
67348: PUSH
67349: LD_INT 2
67351: NEG
67352: PUSH
67353: EMPTY
67354: LIST
67355: LIST
67356: PUSH
67357: LD_INT 2
67359: NEG
67360: PUSH
67361: LD_INT 3
67363: NEG
67364: PUSH
67365: EMPTY
67366: LIST
67367: LIST
67368: PUSH
67369: LD_INT 3
67371: NEG
67372: PUSH
67373: LD_INT 2
67375: NEG
67376: PUSH
67377: EMPTY
67378: LIST
67379: LIST
67380: PUSH
67381: EMPTY
67382: LIST
67383: LIST
67384: LIST
67385: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
67386: LD_ADDR_VAR 0 47
67390: PUSH
67391: LD_INT 2
67393: NEG
67394: PUSH
67395: LD_INT 3
67397: NEG
67398: PUSH
67399: EMPTY
67400: LIST
67401: LIST
67402: PUSH
67403: LD_INT 1
67405: NEG
67406: PUSH
67407: LD_INT 3
67409: NEG
67410: PUSH
67411: EMPTY
67412: LIST
67413: LIST
67414: PUSH
67415: EMPTY
67416: LIST
67417: LIST
67418: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
67419: LD_ADDR_VAR 0 48
67423: PUSH
67424: LD_INT 1
67426: PUSH
67427: LD_INT 2
67429: NEG
67430: PUSH
67431: EMPTY
67432: LIST
67433: LIST
67434: PUSH
67435: LD_INT 2
67437: PUSH
67438: LD_INT 1
67440: NEG
67441: PUSH
67442: EMPTY
67443: LIST
67444: LIST
67445: PUSH
67446: EMPTY
67447: LIST
67448: LIST
67449: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
67450: LD_ADDR_VAR 0 49
67454: PUSH
67455: LD_INT 3
67457: PUSH
67458: LD_INT 1
67460: PUSH
67461: EMPTY
67462: LIST
67463: LIST
67464: PUSH
67465: LD_INT 3
67467: PUSH
67468: LD_INT 2
67470: PUSH
67471: EMPTY
67472: LIST
67473: LIST
67474: PUSH
67475: EMPTY
67476: LIST
67477: LIST
67478: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
67479: LD_ADDR_VAR 0 50
67483: PUSH
67484: LD_INT 2
67486: PUSH
67487: LD_INT 3
67489: PUSH
67490: EMPTY
67491: LIST
67492: LIST
67493: PUSH
67494: LD_INT 1
67496: PUSH
67497: LD_INT 3
67499: PUSH
67500: EMPTY
67501: LIST
67502: LIST
67503: PUSH
67504: EMPTY
67505: LIST
67506: LIST
67507: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
67508: LD_ADDR_VAR 0 51
67512: PUSH
67513: LD_INT 1
67515: NEG
67516: PUSH
67517: LD_INT 2
67519: PUSH
67520: EMPTY
67521: LIST
67522: LIST
67523: PUSH
67524: LD_INT 2
67526: NEG
67527: PUSH
67528: LD_INT 1
67530: PUSH
67531: EMPTY
67532: LIST
67533: LIST
67534: PUSH
67535: EMPTY
67536: LIST
67537: LIST
67538: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
67539: LD_ADDR_VAR 0 52
67543: PUSH
67544: LD_INT 3
67546: NEG
67547: PUSH
67548: LD_INT 1
67550: NEG
67551: PUSH
67552: EMPTY
67553: LIST
67554: LIST
67555: PUSH
67556: LD_INT 3
67558: NEG
67559: PUSH
67560: LD_INT 2
67562: NEG
67563: PUSH
67564: EMPTY
67565: LIST
67566: LIST
67567: PUSH
67568: EMPTY
67569: LIST
67570: LIST
67571: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67572: LD_ADDR_VAR 0 53
67576: PUSH
67577: LD_INT 1
67579: NEG
67580: PUSH
67581: LD_INT 3
67583: NEG
67584: PUSH
67585: EMPTY
67586: LIST
67587: LIST
67588: PUSH
67589: LD_INT 0
67591: PUSH
67592: LD_INT 3
67594: NEG
67595: PUSH
67596: EMPTY
67597: LIST
67598: LIST
67599: PUSH
67600: LD_INT 1
67602: PUSH
67603: LD_INT 2
67605: NEG
67606: PUSH
67607: EMPTY
67608: LIST
67609: LIST
67610: PUSH
67611: EMPTY
67612: LIST
67613: LIST
67614: LIST
67615: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67616: LD_ADDR_VAR 0 54
67620: PUSH
67621: LD_INT 2
67623: PUSH
67624: LD_INT 1
67626: NEG
67627: PUSH
67628: EMPTY
67629: LIST
67630: LIST
67631: PUSH
67632: LD_INT 3
67634: PUSH
67635: LD_INT 0
67637: PUSH
67638: EMPTY
67639: LIST
67640: LIST
67641: PUSH
67642: LD_INT 3
67644: PUSH
67645: LD_INT 1
67647: PUSH
67648: EMPTY
67649: LIST
67650: LIST
67651: PUSH
67652: EMPTY
67653: LIST
67654: LIST
67655: LIST
67656: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67657: LD_ADDR_VAR 0 55
67661: PUSH
67662: LD_INT 3
67664: PUSH
67665: LD_INT 2
67667: PUSH
67668: EMPTY
67669: LIST
67670: LIST
67671: PUSH
67672: LD_INT 3
67674: PUSH
67675: LD_INT 3
67677: PUSH
67678: EMPTY
67679: LIST
67680: LIST
67681: PUSH
67682: LD_INT 2
67684: PUSH
67685: LD_INT 3
67687: PUSH
67688: EMPTY
67689: LIST
67690: LIST
67691: PUSH
67692: EMPTY
67693: LIST
67694: LIST
67695: LIST
67696: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67697: LD_ADDR_VAR 0 56
67701: PUSH
67702: LD_INT 1
67704: PUSH
67705: LD_INT 3
67707: PUSH
67708: EMPTY
67709: LIST
67710: LIST
67711: PUSH
67712: LD_INT 0
67714: PUSH
67715: LD_INT 3
67717: PUSH
67718: EMPTY
67719: LIST
67720: LIST
67721: PUSH
67722: LD_INT 1
67724: NEG
67725: PUSH
67726: LD_INT 2
67728: PUSH
67729: EMPTY
67730: LIST
67731: LIST
67732: PUSH
67733: EMPTY
67734: LIST
67735: LIST
67736: LIST
67737: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67738: LD_ADDR_VAR 0 57
67742: PUSH
67743: LD_INT 2
67745: NEG
67746: PUSH
67747: LD_INT 1
67749: PUSH
67750: EMPTY
67751: LIST
67752: LIST
67753: PUSH
67754: LD_INT 3
67756: NEG
67757: PUSH
67758: LD_INT 0
67760: PUSH
67761: EMPTY
67762: LIST
67763: LIST
67764: PUSH
67765: LD_INT 3
67767: NEG
67768: PUSH
67769: LD_INT 1
67771: NEG
67772: PUSH
67773: EMPTY
67774: LIST
67775: LIST
67776: PUSH
67777: EMPTY
67778: LIST
67779: LIST
67780: LIST
67781: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67782: LD_ADDR_VAR 0 58
67786: PUSH
67787: LD_INT 2
67789: NEG
67790: PUSH
67791: LD_INT 3
67793: NEG
67794: PUSH
67795: EMPTY
67796: LIST
67797: LIST
67798: PUSH
67799: LD_INT 3
67801: NEG
67802: PUSH
67803: LD_INT 2
67805: NEG
67806: PUSH
67807: EMPTY
67808: LIST
67809: LIST
67810: PUSH
67811: LD_INT 3
67813: NEG
67814: PUSH
67815: LD_INT 3
67817: NEG
67818: PUSH
67819: EMPTY
67820: LIST
67821: LIST
67822: PUSH
67823: EMPTY
67824: LIST
67825: LIST
67826: LIST
67827: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
67828: LD_ADDR_VAR 0 59
67832: PUSH
67833: LD_INT 1
67835: NEG
67836: PUSH
67837: LD_INT 2
67839: NEG
67840: PUSH
67841: EMPTY
67842: LIST
67843: LIST
67844: PUSH
67845: LD_INT 0
67847: PUSH
67848: LD_INT 2
67850: NEG
67851: PUSH
67852: EMPTY
67853: LIST
67854: LIST
67855: PUSH
67856: LD_INT 1
67858: PUSH
67859: LD_INT 1
67861: NEG
67862: PUSH
67863: EMPTY
67864: LIST
67865: LIST
67866: PUSH
67867: EMPTY
67868: LIST
67869: LIST
67870: LIST
67871: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
67872: LD_ADDR_VAR 0 60
67876: PUSH
67877: LD_INT 1
67879: PUSH
67880: LD_INT 1
67882: NEG
67883: PUSH
67884: EMPTY
67885: LIST
67886: LIST
67887: PUSH
67888: LD_INT 2
67890: PUSH
67891: LD_INT 0
67893: PUSH
67894: EMPTY
67895: LIST
67896: LIST
67897: PUSH
67898: LD_INT 2
67900: PUSH
67901: LD_INT 1
67903: PUSH
67904: EMPTY
67905: LIST
67906: LIST
67907: PUSH
67908: EMPTY
67909: LIST
67910: LIST
67911: LIST
67912: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67913: LD_ADDR_VAR 0 61
67917: PUSH
67918: LD_INT 2
67920: PUSH
67921: LD_INT 1
67923: PUSH
67924: EMPTY
67925: LIST
67926: LIST
67927: PUSH
67928: LD_INT 2
67930: PUSH
67931: LD_INT 2
67933: PUSH
67934: EMPTY
67935: LIST
67936: LIST
67937: PUSH
67938: LD_INT 1
67940: PUSH
67941: LD_INT 2
67943: PUSH
67944: EMPTY
67945: LIST
67946: LIST
67947: PUSH
67948: EMPTY
67949: LIST
67950: LIST
67951: LIST
67952: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67953: LD_ADDR_VAR 0 62
67957: PUSH
67958: LD_INT 1
67960: PUSH
67961: LD_INT 2
67963: PUSH
67964: EMPTY
67965: LIST
67966: LIST
67967: PUSH
67968: LD_INT 0
67970: PUSH
67971: LD_INT 2
67973: PUSH
67974: EMPTY
67975: LIST
67976: LIST
67977: PUSH
67978: LD_INT 1
67980: NEG
67981: PUSH
67982: LD_INT 1
67984: PUSH
67985: EMPTY
67986: LIST
67987: LIST
67988: PUSH
67989: EMPTY
67990: LIST
67991: LIST
67992: LIST
67993: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67994: LD_ADDR_VAR 0 63
67998: PUSH
67999: LD_INT 1
68001: NEG
68002: PUSH
68003: LD_INT 1
68005: PUSH
68006: EMPTY
68007: LIST
68008: LIST
68009: PUSH
68010: LD_INT 2
68012: NEG
68013: PUSH
68014: LD_INT 0
68016: PUSH
68017: EMPTY
68018: LIST
68019: LIST
68020: PUSH
68021: LD_INT 2
68023: NEG
68024: PUSH
68025: LD_INT 1
68027: NEG
68028: PUSH
68029: EMPTY
68030: LIST
68031: LIST
68032: PUSH
68033: EMPTY
68034: LIST
68035: LIST
68036: LIST
68037: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68038: LD_ADDR_VAR 0 64
68042: PUSH
68043: LD_INT 1
68045: NEG
68046: PUSH
68047: LD_INT 2
68049: NEG
68050: PUSH
68051: EMPTY
68052: LIST
68053: LIST
68054: PUSH
68055: LD_INT 2
68057: NEG
68058: PUSH
68059: LD_INT 1
68061: NEG
68062: PUSH
68063: EMPTY
68064: LIST
68065: LIST
68066: PUSH
68067: LD_INT 2
68069: NEG
68070: PUSH
68071: LD_INT 2
68073: NEG
68074: PUSH
68075: EMPTY
68076: LIST
68077: LIST
68078: PUSH
68079: EMPTY
68080: LIST
68081: LIST
68082: LIST
68083: ST_TO_ADDR
// end ; 2 :
68084: GO 71350
68086: LD_INT 2
68088: DOUBLE
68089: EQUAL
68090: IFTRUE 68094
68092: GO 71349
68094: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
68095: LD_ADDR_VAR 0 29
68099: PUSH
68100: LD_INT 4
68102: PUSH
68103: LD_INT 0
68105: PUSH
68106: EMPTY
68107: LIST
68108: LIST
68109: PUSH
68110: LD_INT 4
68112: PUSH
68113: LD_INT 1
68115: NEG
68116: PUSH
68117: EMPTY
68118: LIST
68119: LIST
68120: PUSH
68121: LD_INT 5
68123: PUSH
68124: LD_INT 0
68126: PUSH
68127: EMPTY
68128: LIST
68129: LIST
68130: PUSH
68131: LD_INT 5
68133: PUSH
68134: LD_INT 1
68136: PUSH
68137: EMPTY
68138: LIST
68139: LIST
68140: PUSH
68141: LD_INT 4
68143: PUSH
68144: LD_INT 1
68146: PUSH
68147: EMPTY
68148: LIST
68149: LIST
68150: PUSH
68151: LD_INT 3
68153: PUSH
68154: LD_INT 0
68156: PUSH
68157: EMPTY
68158: LIST
68159: LIST
68160: PUSH
68161: LD_INT 3
68163: PUSH
68164: LD_INT 1
68166: NEG
68167: PUSH
68168: EMPTY
68169: LIST
68170: LIST
68171: PUSH
68172: LD_INT 3
68174: PUSH
68175: LD_INT 2
68177: NEG
68178: PUSH
68179: EMPTY
68180: LIST
68181: LIST
68182: PUSH
68183: LD_INT 5
68185: PUSH
68186: LD_INT 2
68188: PUSH
68189: EMPTY
68190: LIST
68191: LIST
68192: PUSH
68193: LD_INT 3
68195: PUSH
68196: LD_INT 3
68198: PUSH
68199: EMPTY
68200: LIST
68201: LIST
68202: PUSH
68203: LD_INT 3
68205: PUSH
68206: LD_INT 2
68208: PUSH
68209: EMPTY
68210: LIST
68211: LIST
68212: PUSH
68213: LD_INT 4
68215: PUSH
68216: LD_INT 3
68218: PUSH
68219: EMPTY
68220: LIST
68221: LIST
68222: PUSH
68223: LD_INT 4
68225: PUSH
68226: LD_INT 4
68228: PUSH
68229: EMPTY
68230: LIST
68231: LIST
68232: PUSH
68233: LD_INT 3
68235: PUSH
68236: LD_INT 4
68238: PUSH
68239: EMPTY
68240: LIST
68241: LIST
68242: PUSH
68243: LD_INT 2
68245: PUSH
68246: LD_INT 3
68248: PUSH
68249: EMPTY
68250: LIST
68251: LIST
68252: PUSH
68253: LD_INT 2
68255: PUSH
68256: LD_INT 2
68258: PUSH
68259: EMPTY
68260: LIST
68261: LIST
68262: PUSH
68263: LD_INT 4
68265: PUSH
68266: LD_INT 2
68268: PUSH
68269: EMPTY
68270: LIST
68271: LIST
68272: PUSH
68273: LD_INT 2
68275: PUSH
68276: LD_INT 4
68278: PUSH
68279: EMPTY
68280: LIST
68281: LIST
68282: PUSH
68283: LD_INT 0
68285: PUSH
68286: LD_INT 4
68288: PUSH
68289: EMPTY
68290: LIST
68291: LIST
68292: PUSH
68293: LD_INT 0
68295: PUSH
68296: LD_INT 3
68298: PUSH
68299: EMPTY
68300: LIST
68301: LIST
68302: PUSH
68303: LD_INT 1
68305: PUSH
68306: LD_INT 4
68308: PUSH
68309: EMPTY
68310: LIST
68311: LIST
68312: PUSH
68313: LD_INT 1
68315: PUSH
68316: LD_INT 5
68318: PUSH
68319: EMPTY
68320: LIST
68321: LIST
68322: PUSH
68323: LD_INT 0
68325: PUSH
68326: LD_INT 5
68328: PUSH
68329: EMPTY
68330: LIST
68331: LIST
68332: PUSH
68333: LD_INT 1
68335: NEG
68336: PUSH
68337: LD_INT 4
68339: PUSH
68340: EMPTY
68341: LIST
68342: LIST
68343: PUSH
68344: LD_INT 1
68346: NEG
68347: PUSH
68348: LD_INT 3
68350: PUSH
68351: EMPTY
68352: LIST
68353: LIST
68354: PUSH
68355: LD_INT 2
68357: PUSH
68358: LD_INT 5
68360: PUSH
68361: EMPTY
68362: LIST
68363: LIST
68364: PUSH
68365: LD_INT 2
68367: NEG
68368: PUSH
68369: LD_INT 3
68371: PUSH
68372: EMPTY
68373: LIST
68374: LIST
68375: PUSH
68376: LD_INT 3
68378: NEG
68379: PUSH
68380: LD_INT 0
68382: PUSH
68383: EMPTY
68384: LIST
68385: LIST
68386: PUSH
68387: LD_INT 3
68389: NEG
68390: PUSH
68391: LD_INT 1
68393: NEG
68394: PUSH
68395: EMPTY
68396: LIST
68397: LIST
68398: PUSH
68399: LD_INT 2
68401: NEG
68402: PUSH
68403: LD_INT 0
68405: PUSH
68406: EMPTY
68407: LIST
68408: LIST
68409: PUSH
68410: LD_INT 2
68412: NEG
68413: PUSH
68414: LD_INT 1
68416: PUSH
68417: EMPTY
68418: LIST
68419: LIST
68420: PUSH
68421: LD_INT 3
68423: NEG
68424: PUSH
68425: LD_INT 1
68427: PUSH
68428: EMPTY
68429: LIST
68430: LIST
68431: PUSH
68432: LD_INT 4
68434: NEG
68435: PUSH
68436: LD_INT 0
68438: PUSH
68439: EMPTY
68440: LIST
68441: LIST
68442: PUSH
68443: LD_INT 4
68445: NEG
68446: PUSH
68447: LD_INT 1
68449: NEG
68450: PUSH
68451: EMPTY
68452: LIST
68453: LIST
68454: PUSH
68455: LD_INT 4
68457: NEG
68458: PUSH
68459: LD_INT 2
68461: NEG
68462: PUSH
68463: EMPTY
68464: LIST
68465: LIST
68466: PUSH
68467: LD_INT 2
68469: NEG
68470: PUSH
68471: LD_INT 2
68473: PUSH
68474: EMPTY
68475: LIST
68476: LIST
68477: PUSH
68478: LD_INT 4
68480: NEG
68481: PUSH
68482: LD_INT 4
68484: NEG
68485: PUSH
68486: EMPTY
68487: LIST
68488: LIST
68489: PUSH
68490: LD_INT 4
68492: NEG
68493: PUSH
68494: LD_INT 5
68496: NEG
68497: PUSH
68498: EMPTY
68499: LIST
68500: LIST
68501: PUSH
68502: LD_INT 3
68504: NEG
68505: PUSH
68506: LD_INT 4
68508: NEG
68509: PUSH
68510: EMPTY
68511: LIST
68512: LIST
68513: PUSH
68514: LD_INT 3
68516: NEG
68517: PUSH
68518: LD_INT 3
68520: NEG
68521: PUSH
68522: EMPTY
68523: LIST
68524: LIST
68525: PUSH
68526: LD_INT 4
68528: NEG
68529: PUSH
68530: LD_INT 3
68532: NEG
68533: PUSH
68534: EMPTY
68535: LIST
68536: LIST
68537: PUSH
68538: LD_INT 5
68540: NEG
68541: PUSH
68542: LD_INT 4
68544: NEG
68545: PUSH
68546: EMPTY
68547: LIST
68548: LIST
68549: PUSH
68550: LD_INT 5
68552: NEG
68553: PUSH
68554: LD_INT 5
68556: NEG
68557: PUSH
68558: EMPTY
68559: LIST
68560: LIST
68561: PUSH
68562: LD_INT 3
68564: NEG
68565: PUSH
68566: LD_INT 5
68568: NEG
68569: PUSH
68570: EMPTY
68571: LIST
68572: LIST
68573: PUSH
68574: LD_INT 5
68576: NEG
68577: PUSH
68578: LD_INT 3
68580: NEG
68581: PUSH
68582: EMPTY
68583: LIST
68584: LIST
68585: PUSH
68586: EMPTY
68587: LIST
68588: LIST
68589: LIST
68590: LIST
68591: LIST
68592: LIST
68593: LIST
68594: LIST
68595: LIST
68596: LIST
68597: LIST
68598: LIST
68599: LIST
68600: LIST
68601: LIST
68602: LIST
68603: LIST
68604: LIST
68605: LIST
68606: LIST
68607: LIST
68608: LIST
68609: LIST
68610: LIST
68611: LIST
68612: LIST
68613: LIST
68614: LIST
68615: LIST
68616: LIST
68617: LIST
68618: LIST
68619: LIST
68620: LIST
68621: LIST
68622: LIST
68623: LIST
68624: LIST
68625: LIST
68626: LIST
68627: LIST
68628: LIST
68629: LIST
68630: LIST
68631: LIST
68632: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
68633: LD_ADDR_VAR 0 30
68637: PUSH
68638: LD_INT 4
68640: PUSH
68641: LD_INT 4
68643: PUSH
68644: EMPTY
68645: LIST
68646: LIST
68647: PUSH
68648: LD_INT 4
68650: PUSH
68651: LD_INT 3
68653: PUSH
68654: EMPTY
68655: LIST
68656: LIST
68657: PUSH
68658: LD_INT 5
68660: PUSH
68661: LD_INT 4
68663: PUSH
68664: EMPTY
68665: LIST
68666: LIST
68667: PUSH
68668: LD_INT 5
68670: PUSH
68671: LD_INT 5
68673: PUSH
68674: EMPTY
68675: LIST
68676: LIST
68677: PUSH
68678: LD_INT 4
68680: PUSH
68681: LD_INT 5
68683: PUSH
68684: EMPTY
68685: LIST
68686: LIST
68687: PUSH
68688: LD_INT 3
68690: PUSH
68691: LD_INT 4
68693: PUSH
68694: EMPTY
68695: LIST
68696: LIST
68697: PUSH
68698: LD_INT 3
68700: PUSH
68701: LD_INT 3
68703: PUSH
68704: EMPTY
68705: LIST
68706: LIST
68707: PUSH
68708: LD_INT 5
68710: PUSH
68711: LD_INT 3
68713: PUSH
68714: EMPTY
68715: LIST
68716: LIST
68717: PUSH
68718: LD_INT 3
68720: PUSH
68721: LD_INT 5
68723: PUSH
68724: EMPTY
68725: LIST
68726: LIST
68727: PUSH
68728: LD_INT 0
68730: PUSH
68731: LD_INT 3
68733: PUSH
68734: EMPTY
68735: LIST
68736: LIST
68737: PUSH
68738: LD_INT 0
68740: PUSH
68741: LD_INT 2
68743: PUSH
68744: EMPTY
68745: LIST
68746: LIST
68747: PUSH
68748: LD_INT 1
68750: PUSH
68751: LD_INT 3
68753: PUSH
68754: EMPTY
68755: LIST
68756: LIST
68757: PUSH
68758: LD_INT 1
68760: PUSH
68761: LD_INT 4
68763: PUSH
68764: EMPTY
68765: LIST
68766: LIST
68767: PUSH
68768: LD_INT 0
68770: PUSH
68771: LD_INT 4
68773: PUSH
68774: EMPTY
68775: LIST
68776: LIST
68777: PUSH
68778: LD_INT 1
68780: NEG
68781: PUSH
68782: LD_INT 3
68784: PUSH
68785: EMPTY
68786: LIST
68787: LIST
68788: PUSH
68789: LD_INT 1
68791: NEG
68792: PUSH
68793: LD_INT 2
68795: PUSH
68796: EMPTY
68797: LIST
68798: LIST
68799: PUSH
68800: LD_INT 2
68802: PUSH
68803: LD_INT 4
68805: PUSH
68806: EMPTY
68807: LIST
68808: LIST
68809: PUSH
68810: LD_INT 2
68812: NEG
68813: PUSH
68814: LD_INT 2
68816: PUSH
68817: EMPTY
68818: LIST
68819: LIST
68820: PUSH
68821: LD_INT 4
68823: NEG
68824: PUSH
68825: LD_INT 0
68827: PUSH
68828: EMPTY
68829: LIST
68830: LIST
68831: PUSH
68832: LD_INT 4
68834: NEG
68835: PUSH
68836: LD_INT 1
68838: NEG
68839: PUSH
68840: EMPTY
68841: LIST
68842: LIST
68843: PUSH
68844: LD_INT 3
68846: NEG
68847: PUSH
68848: LD_INT 0
68850: PUSH
68851: EMPTY
68852: LIST
68853: LIST
68854: PUSH
68855: LD_INT 3
68857: NEG
68858: PUSH
68859: LD_INT 1
68861: PUSH
68862: EMPTY
68863: LIST
68864: LIST
68865: PUSH
68866: LD_INT 4
68868: NEG
68869: PUSH
68870: LD_INT 1
68872: PUSH
68873: EMPTY
68874: LIST
68875: LIST
68876: PUSH
68877: LD_INT 5
68879: NEG
68880: PUSH
68881: LD_INT 0
68883: PUSH
68884: EMPTY
68885: LIST
68886: LIST
68887: PUSH
68888: LD_INT 5
68890: NEG
68891: PUSH
68892: LD_INT 1
68894: NEG
68895: PUSH
68896: EMPTY
68897: LIST
68898: LIST
68899: PUSH
68900: LD_INT 5
68902: NEG
68903: PUSH
68904: LD_INT 2
68906: NEG
68907: PUSH
68908: EMPTY
68909: LIST
68910: LIST
68911: PUSH
68912: LD_INT 3
68914: NEG
68915: PUSH
68916: LD_INT 2
68918: PUSH
68919: EMPTY
68920: LIST
68921: LIST
68922: PUSH
68923: LD_INT 3
68925: NEG
68926: PUSH
68927: LD_INT 3
68929: NEG
68930: PUSH
68931: EMPTY
68932: LIST
68933: LIST
68934: PUSH
68935: LD_INT 3
68937: NEG
68938: PUSH
68939: LD_INT 4
68941: NEG
68942: PUSH
68943: EMPTY
68944: LIST
68945: LIST
68946: PUSH
68947: LD_INT 2
68949: NEG
68950: PUSH
68951: LD_INT 3
68953: NEG
68954: PUSH
68955: EMPTY
68956: LIST
68957: LIST
68958: PUSH
68959: LD_INT 2
68961: NEG
68962: PUSH
68963: LD_INT 2
68965: NEG
68966: PUSH
68967: EMPTY
68968: LIST
68969: LIST
68970: PUSH
68971: LD_INT 3
68973: NEG
68974: PUSH
68975: LD_INT 2
68977: NEG
68978: PUSH
68979: EMPTY
68980: LIST
68981: LIST
68982: PUSH
68983: LD_INT 4
68985: NEG
68986: PUSH
68987: LD_INT 3
68989: NEG
68990: PUSH
68991: EMPTY
68992: LIST
68993: LIST
68994: PUSH
68995: LD_INT 4
68997: NEG
68998: PUSH
68999: LD_INT 4
69001: NEG
69002: PUSH
69003: EMPTY
69004: LIST
69005: LIST
69006: PUSH
69007: LD_INT 2
69009: NEG
69010: PUSH
69011: LD_INT 4
69013: NEG
69014: PUSH
69015: EMPTY
69016: LIST
69017: LIST
69018: PUSH
69019: LD_INT 4
69021: NEG
69022: PUSH
69023: LD_INT 2
69025: NEG
69026: PUSH
69027: EMPTY
69028: LIST
69029: LIST
69030: PUSH
69031: LD_INT 0
69033: PUSH
69034: LD_INT 4
69036: NEG
69037: PUSH
69038: EMPTY
69039: LIST
69040: LIST
69041: PUSH
69042: LD_INT 0
69044: PUSH
69045: LD_INT 5
69047: NEG
69048: PUSH
69049: EMPTY
69050: LIST
69051: LIST
69052: PUSH
69053: LD_INT 1
69055: PUSH
69056: LD_INT 4
69058: NEG
69059: PUSH
69060: EMPTY
69061: LIST
69062: LIST
69063: PUSH
69064: LD_INT 1
69066: PUSH
69067: LD_INT 3
69069: NEG
69070: PUSH
69071: EMPTY
69072: LIST
69073: LIST
69074: PUSH
69075: LD_INT 0
69077: PUSH
69078: LD_INT 3
69080: NEG
69081: PUSH
69082: EMPTY
69083: LIST
69084: LIST
69085: PUSH
69086: LD_INT 1
69088: NEG
69089: PUSH
69090: LD_INT 4
69092: NEG
69093: PUSH
69094: EMPTY
69095: LIST
69096: LIST
69097: PUSH
69098: LD_INT 1
69100: NEG
69101: PUSH
69102: LD_INT 5
69104: NEG
69105: PUSH
69106: EMPTY
69107: LIST
69108: LIST
69109: PUSH
69110: LD_INT 2
69112: PUSH
69113: LD_INT 3
69115: NEG
69116: PUSH
69117: EMPTY
69118: LIST
69119: LIST
69120: PUSH
69121: LD_INT 2
69123: NEG
69124: PUSH
69125: LD_INT 5
69127: NEG
69128: PUSH
69129: EMPTY
69130: LIST
69131: LIST
69132: PUSH
69133: EMPTY
69134: LIST
69135: LIST
69136: LIST
69137: LIST
69138: LIST
69139: LIST
69140: LIST
69141: LIST
69142: LIST
69143: LIST
69144: LIST
69145: LIST
69146: LIST
69147: LIST
69148: LIST
69149: LIST
69150: LIST
69151: LIST
69152: LIST
69153: LIST
69154: LIST
69155: LIST
69156: LIST
69157: LIST
69158: LIST
69159: LIST
69160: LIST
69161: LIST
69162: LIST
69163: LIST
69164: LIST
69165: LIST
69166: LIST
69167: LIST
69168: LIST
69169: LIST
69170: LIST
69171: LIST
69172: LIST
69173: LIST
69174: LIST
69175: LIST
69176: LIST
69177: LIST
69178: LIST
69179: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
69180: LD_ADDR_VAR 0 31
69184: PUSH
69185: LD_INT 0
69187: PUSH
69188: LD_INT 4
69190: PUSH
69191: EMPTY
69192: LIST
69193: LIST
69194: PUSH
69195: LD_INT 0
69197: PUSH
69198: LD_INT 3
69200: PUSH
69201: EMPTY
69202: LIST
69203: LIST
69204: PUSH
69205: LD_INT 1
69207: PUSH
69208: LD_INT 4
69210: PUSH
69211: EMPTY
69212: LIST
69213: LIST
69214: PUSH
69215: LD_INT 1
69217: PUSH
69218: LD_INT 5
69220: PUSH
69221: EMPTY
69222: LIST
69223: LIST
69224: PUSH
69225: LD_INT 0
69227: PUSH
69228: LD_INT 5
69230: PUSH
69231: EMPTY
69232: LIST
69233: LIST
69234: PUSH
69235: LD_INT 1
69237: NEG
69238: PUSH
69239: LD_INT 4
69241: PUSH
69242: EMPTY
69243: LIST
69244: LIST
69245: PUSH
69246: LD_INT 1
69248: NEG
69249: PUSH
69250: LD_INT 3
69252: PUSH
69253: EMPTY
69254: LIST
69255: LIST
69256: PUSH
69257: LD_INT 2
69259: PUSH
69260: LD_INT 5
69262: PUSH
69263: EMPTY
69264: LIST
69265: LIST
69266: PUSH
69267: LD_INT 2
69269: NEG
69270: PUSH
69271: LD_INT 3
69273: PUSH
69274: EMPTY
69275: LIST
69276: LIST
69277: PUSH
69278: LD_INT 3
69280: NEG
69281: PUSH
69282: LD_INT 0
69284: PUSH
69285: EMPTY
69286: LIST
69287: LIST
69288: PUSH
69289: LD_INT 3
69291: NEG
69292: PUSH
69293: LD_INT 1
69295: NEG
69296: PUSH
69297: EMPTY
69298: LIST
69299: LIST
69300: PUSH
69301: LD_INT 2
69303: NEG
69304: PUSH
69305: LD_INT 0
69307: PUSH
69308: EMPTY
69309: LIST
69310: LIST
69311: PUSH
69312: LD_INT 2
69314: NEG
69315: PUSH
69316: LD_INT 1
69318: PUSH
69319: EMPTY
69320: LIST
69321: LIST
69322: PUSH
69323: LD_INT 3
69325: NEG
69326: PUSH
69327: LD_INT 1
69329: PUSH
69330: EMPTY
69331: LIST
69332: LIST
69333: PUSH
69334: LD_INT 4
69336: NEG
69337: PUSH
69338: LD_INT 0
69340: PUSH
69341: EMPTY
69342: LIST
69343: LIST
69344: PUSH
69345: LD_INT 4
69347: NEG
69348: PUSH
69349: LD_INT 1
69351: NEG
69352: PUSH
69353: EMPTY
69354: LIST
69355: LIST
69356: PUSH
69357: LD_INT 4
69359: NEG
69360: PUSH
69361: LD_INT 2
69363: NEG
69364: PUSH
69365: EMPTY
69366: LIST
69367: LIST
69368: PUSH
69369: LD_INT 2
69371: NEG
69372: PUSH
69373: LD_INT 2
69375: PUSH
69376: EMPTY
69377: LIST
69378: LIST
69379: PUSH
69380: LD_INT 4
69382: NEG
69383: PUSH
69384: LD_INT 4
69386: NEG
69387: PUSH
69388: EMPTY
69389: LIST
69390: LIST
69391: PUSH
69392: LD_INT 4
69394: NEG
69395: PUSH
69396: LD_INT 5
69398: NEG
69399: PUSH
69400: EMPTY
69401: LIST
69402: LIST
69403: PUSH
69404: LD_INT 3
69406: NEG
69407: PUSH
69408: LD_INT 4
69410: NEG
69411: PUSH
69412: EMPTY
69413: LIST
69414: LIST
69415: PUSH
69416: LD_INT 3
69418: NEG
69419: PUSH
69420: LD_INT 3
69422: NEG
69423: PUSH
69424: EMPTY
69425: LIST
69426: LIST
69427: PUSH
69428: LD_INT 4
69430: NEG
69431: PUSH
69432: LD_INT 3
69434: NEG
69435: PUSH
69436: EMPTY
69437: LIST
69438: LIST
69439: PUSH
69440: LD_INT 5
69442: NEG
69443: PUSH
69444: LD_INT 4
69446: NEG
69447: PUSH
69448: EMPTY
69449: LIST
69450: LIST
69451: PUSH
69452: LD_INT 5
69454: NEG
69455: PUSH
69456: LD_INT 5
69458: NEG
69459: PUSH
69460: EMPTY
69461: LIST
69462: LIST
69463: PUSH
69464: LD_INT 3
69466: NEG
69467: PUSH
69468: LD_INT 5
69470: NEG
69471: PUSH
69472: EMPTY
69473: LIST
69474: LIST
69475: PUSH
69476: LD_INT 5
69478: NEG
69479: PUSH
69480: LD_INT 3
69482: NEG
69483: PUSH
69484: EMPTY
69485: LIST
69486: LIST
69487: PUSH
69488: LD_INT 0
69490: PUSH
69491: LD_INT 3
69493: NEG
69494: PUSH
69495: EMPTY
69496: LIST
69497: LIST
69498: PUSH
69499: LD_INT 0
69501: PUSH
69502: LD_INT 4
69504: NEG
69505: PUSH
69506: EMPTY
69507: LIST
69508: LIST
69509: PUSH
69510: LD_INT 1
69512: PUSH
69513: LD_INT 3
69515: NEG
69516: PUSH
69517: EMPTY
69518: LIST
69519: LIST
69520: PUSH
69521: LD_INT 1
69523: PUSH
69524: LD_INT 2
69526: NEG
69527: PUSH
69528: EMPTY
69529: LIST
69530: LIST
69531: PUSH
69532: LD_INT 0
69534: PUSH
69535: LD_INT 2
69537: NEG
69538: PUSH
69539: EMPTY
69540: LIST
69541: LIST
69542: PUSH
69543: LD_INT 1
69545: NEG
69546: PUSH
69547: LD_INT 3
69549: NEG
69550: PUSH
69551: EMPTY
69552: LIST
69553: LIST
69554: PUSH
69555: LD_INT 1
69557: NEG
69558: PUSH
69559: LD_INT 4
69561: NEG
69562: PUSH
69563: EMPTY
69564: LIST
69565: LIST
69566: PUSH
69567: LD_INT 2
69569: PUSH
69570: LD_INT 2
69572: NEG
69573: PUSH
69574: EMPTY
69575: LIST
69576: LIST
69577: PUSH
69578: LD_INT 2
69580: NEG
69581: PUSH
69582: LD_INT 4
69584: NEG
69585: PUSH
69586: EMPTY
69587: LIST
69588: LIST
69589: PUSH
69590: LD_INT 4
69592: PUSH
69593: LD_INT 0
69595: PUSH
69596: EMPTY
69597: LIST
69598: LIST
69599: PUSH
69600: LD_INT 4
69602: PUSH
69603: LD_INT 1
69605: NEG
69606: PUSH
69607: EMPTY
69608: LIST
69609: LIST
69610: PUSH
69611: LD_INT 5
69613: PUSH
69614: LD_INT 0
69616: PUSH
69617: EMPTY
69618: LIST
69619: LIST
69620: PUSH
69621: LD_INT 5
69623: PUSH
69624: LD_INT 1
69626: PUSH
69627: EMPTY
69628: LIST
69629: LIST
69630: PUSH
69631: LD_INT 4
69633: PUSH
69634: LD_INT 1
69636: PUSH
69637: EMPTY
69638: LIST
69639: LIST
69640: PUSH
69641: LD_INT 3
69643: PUSH
69644: LD_INT 0
69646: PUSH
69647: EMPTY
69648: LIST
69649: LIST
69650: PUSH
69651: LD_INT 3
69653: PUSH
69654: LD_INT 1
69656: NEG
69657: PUSH
69658: EMPTY
69659: LIST
69660: LIST
69661: PUSH
69662: LD_INT 3
69664: PUSH
69665: LD_INT 2
69667: NEG
69668: PUSH
69669: EMPTY
69670: LIST
69671: LIST
69672: PUSH
69673: LD_INT 5
69675: PUSH
69676: LD_INT 2
69678: PUSH
69679: EMPTY
69680: LIST
69681: LIST
69682: PUSH
69683: EMPTY
69684: LIST
69685: LIST
69686: LIST
69687: LIST
69688: LIST
69689: LIST
69690: LIST
69691: LIST
69692: LIST
69693: LIST
69694: LIST
69695: LIST
69696: LIST
69697: LIST
69698: LIST
69699: LIST
69700: LIST
69701: LIST
69702: LIST
69703: LIST
69704: LIST
69705: LIST
69706: LIST
69707: LIST
69708: LIST
69709: LIST
69710: LIST
69711: LIST
69712: LIST
69713: LIST
69714: LIST
69715: LIST
69716: LIST
69717: LIST
69718: LIST
69719: LIST
69720: LIST
69721: LIST
69722: LIST
69723: LIST
69724: LIST
69725: LIST
69726: LIST
69727: LIST
69728: LIST
69729: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
69730: LD_ADDR_VAR 0 32
69734: PUSH
69735: LD_INT 4
69737: NEG
69738: PUSH
69739: LD_INT 0
69741: PUSH
69742: EMPTY
69743: LIST
69744: LIST
69745: PUSH
69746: LD_INT 4
69748: NEG
69749: PUSH
69750: LD_INT 1
69752: NEG
69753: PUSH
69754: EMPTY
69755: LIST
69756: LIST
69757: PUSH
69758: LD_INT 3
69760: NEG
69761: PUSH
69762: LD_INT 0
69764: PUSH
69765: EMPTY
69766: LIST
69767: LIST
69768: PUSH
69769: LD_INT 3
69771: NEG
69772: PUSH
69773: LD_INT 1
69775: PUSH
69776: EMPTY
69777: LIST
69778: LIST
69779: PUSH
69780: LD_INT 4
69782: NEG
69783: PUSH
69784: LD_INT 1
69786: PUSH
69787: EMPTY
69788: LIST
69789: LIST
69790: PUSH
69791: LD_INT 5
69793: NEG
69794: PUSH
69795: LD_INT 0
69797: PUSH
69798: EMPTY
69799: LIST
69800: LIST
69801: PUSH
69802: LD_INT 5
69804: NEG
69805: PUSH
69806: LD_INT 1
69808: NEG
69809: PUSH
69810: EMPTY
69811: LIST
69812: LIST
69813: PUSH
69814: LD_INT 5
69816: NEG
69817: PUSH
69818: LD_INT 2
69820: NEG
69821: PUSH
69822: EMPTY
69823: LIST
69824: LIST
69825: PUSH
69826: LD_INT 3
69828: NEG
69829: PUSH
69830: LD_INT 2
69832: PUSH
69833: EMPTY
69834: LIST
69835: LIST
69836: PUSH
69837: LD_INT 3
69839: NEG
69840: PUSH
69841: LD_INT 3
69843: NEG
69844: PUSH
69845: EMPTY
69846: LIST
69847: LIST
69848: PUSH
69849: LD_INT 3
69851: NEG
69852: PUSH
69853: LD_INT 4
69855: NEG
69856: PUSH
69857: EMPTY
69858: LIST
69859: LIST
69860: PUSH
69861: LD_INT 2
69863: NEG
69864: PUSH
69865: LD_INT 3
69867: NEG
69868: PUSH
69869: EMPTY
69870: LIST
69871: LIST
69872: PUSH
69873: LD_INT 2
69875: NEG
69876: PUSH
69877: LD_INT 2
69879: NEG
69880: PUSH
69881: EMPTY
69882: LIST
69883: LIST
69884: PUSH
69885: LD_INT 3
69887: NEG
69888: PUSH
69889: LD_INT 2
69891: NEG
69892: PUSH
69893: EMPTY
69894: LIST
69895: LIST
69896: PUSH
69897: LD_INT 4
69899: NEG
69900: PUSH
69901: LD_INT 3
69903: NEG
69904: PUSH
69905: EMPTY
69906: LIST
69907: LIST
69908: PUSH
69909: LD_INT 4
69911: NEG
69912: PUSH
69913: LD_INT 4
69915: NEG
69916: PUSH
69917: EMPTY
69918: LIST
69919: LIST
69920: PUSH
69921: LD_INT 2
69923: NEG
69924: PUSH
69925: LD_INT 4
69927: NEG
69928: PUSH
69929: EMPTY
69930: LIST
69931: LIST
69932: PUSH
69933: LD_INT 4
69935: NEG
69936: PUSH
69937: LD_INT 2
69939: NEG
69940: PUSH
69941: EMPTY
69942: LIST
69943: LIST
69944: PUSH
69945: LD_INT 0
69947: PUSH
69948: LD_INT 4
69950: NEG
69951: PUSH
69952: EMPTY
69953: LIST
69954: LIST
69955: PUSH
69956: LD_INT 0
69958: PUSH
69959: LD_INT 5
69961: NEG
69962: PUSH
69963: EMPTY
69964: LIST
69965: LIST
69966: PUSH
69967: LD_INT 1
69969: PUSH
69970: LD_INT 4
69972: NEG
69973: PUSH
69974: EMPTY
69975: LIST
69976: LIST
69977: PUSH
69978: LD_INT 1
69980: PUSH
69981: LD_INT 3
69983: NEG
69984: PUSH
69985: EMPTY
69986: LIST
69987: LIST
69988: PUSH
69989: LD_INT 0
69991: PUSH
69992: LD_INT 3
69994: NEG
69995: PUSH
69996: EMPTY
69997: LIST
69998: LIST
69999: PUSH
70000: LD_INT 1
70002: NEG
70003: PUSH
70004: LD_INT 4
70006: NEG
70007: PUSH
70008: EMPTY
70009: LIST
70010: LIST
70011: PUSH
70012: LD_INT 1
70014: NEG
70015: PUSH
70016: LD_INT 5
70018: NEG
70019: PUSH
70020: EMPTY
70021: LIST
70022: LIST
70023: PUSH
70024: LD_INT 2
70026: PUSH
70027: LD_INT 3
70029: NEG
70030: PUSH
70031: EMPTY
70032: LIST
70033: LIST
70034: PUSH
70035: LD_INT 2
70037: NEG
70038: PUSH
70039: LD_INT 5
70041: NEG
70042: PUSH
70043: EMPTY
70044: LIST
70045: LIST
70046: PUSH
70047: LD_INT 3
70049: PUSH
70050: LD_INT 0
70052: PUSH
70053: EMPTY
70054: LIST
70055: LIST
70056: PUSH
70057: LD_INT 3
70059: PUSH
70060: LD_INT 1
70062: NEG
70063: PUSH
70064: EMPTY
70065: LIST
70066: LIST
70067: PUSH
70068: LD_INT 4
70070: PUSH
70071: LD_INT 0
70073: PUSH
70074: EMPTY
70075: LIST
70076: LIST
70077: PUSH
70078: LD_INT 4
70080: PUSH
70081: LD_INT 1
70083: PUSH
70084: EMPTY
70085: LIST
70086: LIST
70087: PUSH
70088: LD_INT 3
70090: PUSH
70091: LD_INT 1
70093: PUSH
70094: EMPTY
70095: LIST
70096: LIST
70097: PUSH
70098: LD_INT 2
70100: PUSH
70101: LD_INT 0
70103: PUSH
70104: EMPTY
70105: LIST
70106: LIST
70107: PUSH
70108: LD_INT 2
70110: PUSH
70111: LD_INT 1
70113: NEG
70114: PUSH
70115: EMPTY
70116: LIST
70117: LIST
70118: PUSH
70119: LD_INT 2
70121: PUSH
70122: LD_INT 2
70124: NEG
70125: PUSH
70126: EMPTY
70127: LIST
70128: LIST
70129: PUSH
70130: LD_INT 4
70132: PUSH
70133: LD_INT 2
70135: PUSH
70136: EMPTY
70137: LIST
70138: LIST
70139: PUSH
70140: LD_INT 4
70142: PUSH
70143: LD_INT 4
70145: PUSH
70146: EMPTY
70147: LIST
70148: LIST
70149: PUSH
70150: LD_INT 4
70152: PUSH
70153: LD_INT 3
70155: PUSH
70156: EMPTY
70157: LIST
70158: LIST
70159: PUSH
70160: LD_INT 5
70162: PUSH
70163: LD_INT 4
70165: PUSH
70166: EMPTY
70167: LIST
70168: LIST
70169: PUSH
70170: LD_INT 5
70172: PUSH
70173: LD_INT 5
70175: PUSH
70176: EMPTY
70177: LIST
70178: LIST
70179: PUSH
70180: LD_INT 4
70182: PUSH
70183: LD_INT 5
70185: PUSH
70186: EMPTY
70187: LIST
70188: LIST
70189: PUSH
70190: LD_INT 3
70192: PUSH
70193: LD_INT 4
70195: PUSH
70196: EMPTY
70197: LIST
70198: LIST
70199: PUSH
70200: LD_INT 3
70202: PUSH
70203: LD_INT 3
70205: PUSH
70206: EMPTY
70207: LIST
70208: LIST
70209: PUSH
70210: LD_INT 5
70212: PUSH
70213: LD_INT 3
70215: PUSH
70216: EMPTY
70217: LIST
70218: LIST
70219: PUSH
70220: LD_INT 3
70222: PUSH
70223: LD_INT 5
70225: PUSH
70226: EMPTY
70227: LIST
70228: LIST
70229: PUSH
70230: EMPTY
70231: LIST
70232: LIST
70233: LIST
70234: LIST
70235: LIST
70236: LIST
70237: LIST
70238: LIST
70239: LIST
70240: LIST
70241: LIST
70242: LIST
70243: LIST
70244: LIST
70245: LIST
70246: LIST
70247: LIST
70248: LIST
70249: LIST
70250: LIST
70251: LIST
70252: LIST
70253: LIST
70254: LIST
70255: LIST
70256: LIST
70257: LIST
70258: LIST
70259: LIST
70260: LIST
70261: LIST
70262: LIST
70263: LIST
70264: LIST
70265: LIST
70266: LIST
70267: LIST
70268: LIST
70269: LIST
70270: LIST
70271: LIST
70272: LIST
70273: LIST
70274: LIST
70275: LIST
70276: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
70277: LD_ADDR_VAR 0 33
70281: PUSH
70282: LD_INT 4
70284: NEG
70285: PUSH
70286: LD_INT 4
70288: NEG
70289: PUSH
70290: EMPTY
70291: LIST
70292: LIST
70293: PUSH
70294: LD_INT 4
70296: NEG
70297: PUSH
70298: LD_INT 5
70300: NEG
70301: PUSH
70302: EMPTY
70303: LIST
70304: LIST
70305: PUSH
70306: LD_INT 3
70308: NEG
70309: PUSH
70310: LD_INT 4
70312: NEG
70313: PUSH
70314: EMPTY
70315: LIST
70316: LIST
70317: PUSH
70318: LD_INT 3
70320: NEG
70321: PUSH
70322: LD_INT 3
70324: NEG
70325: PUSH
70326: EMPTY
70327: LIST
70328: LIST
70329: PUSH
70330: LD_INT 4
70332: NEG
70333: PUSH
70334: LD_INT 3
70336: NEG
70337: PUSH
70338: EMPTY
70339: LIST
70340: LIST
70341: PUSH
70342: LD_INT 5
70344: NEG
70345: PUSH
70346: LD_INT 4
70348: NEG
70349: PUSH
70350: EMPTY
70351: LIST
70352: LIST
70353: PUSH
70354: LD_INT 5
70356: NEG
70357: PUSH
70358: LD_INT 5
70360: NEG
70361: PUSH
70362: EMPTY
70363: LIST
70364: LIST
70365: PUSH
70366: LD_INT 3
70368: NEG
70369: PUSH
70370: LD_INT 5
70372: NEG
70373: PUSH
70374: EMPTY
70375: LIST
70376: LIST
70377: PUSH
70378: LD_INT 5
70380: NEG
70381: PUSH
70382: LD_INT 3
70384: NEG
70385: PUSH
70386: EMPTY
70387: LIST
70388: LIST
70389: PUSH
70390: LD_INT 0
70392: PUSH
70393: LD_INT 3
70395: NEG
70396: PUSH
70397: EMPTY
70398: LIST
70399: LIST
70400: PUSH
70401: LD_INT 0
70403: PUSH
70404: LD_INT 4
70406: NEG
70407: PUSH
70408: EMPTY
70409: LIST
70410: LIST
70411: PUSH
70412: LD_INT 1
70414: PUSH
70415: LD_INT 3
70417: NEG
70418: PUSH
70419: EMPTY
70420: LIST
70421: LIST
70422: PUSH
70423: LD_INT 1
70425: PUSH
70426: LD_INT 2
70428: NEG
70429: PUSH
70430: EMPTY
70431: LIST
70432: LIST
70433: PUSH
70434: LD_INT 0
70436: PUSH
70437: LD_INT 2
70439: NEG
70440: PUSH
70441: EMPTY
70442: LIST
70443: LIST
70444: PUSH
70445: LD_INT 1
70447: NEG
70448: PUSH
70449: LD_INT 3
70451: NEG
70452: PUSH
70453: EMPTY
70454: LIST
70455: LIST
70456: PUSH
70457: LD_INT 1
70459: NEG
70460: PUSH
70461: LD_INT 4
70463: NEG
70464: PUSH
70465: EMPTY
70466: LIST
70467: LIST
70468: PUSH
70469: LD_INT 2
70471: PUSH
70472: LD_INT 2
70474: NEG
70475: PUSH
70476: EMPTY
70477: LIST
70478: LIST
70479: PUSH
70480: LD_INT 2
70482: NEG
70483: PUSH
70484: LD_INT 4
70486: NEG
70487: PUSH
70488: EMPTY
70489: LIST
70490: LIST
70491: PUSH
70492: LD_INT 4
70494: PUSH
70495: LD_INT 0
70497: PUSH
70498: EMPTY
70499: LIST
70500: LIST
70501: PUSH
70502: LD_INT 4
70504: PUSH
70505: LD_INT 1
70507: NEG
70508: PUSH
70509: EMPTY
70510: LIST
70511: LIST
70512: PUSH
70513: LD_INT 5
70515: PUSH
70516: LD_INT 0
70518: PUSH
70519: EMPTY
70520: LIST
70521: LIST
70522: PUSH
70523: LD_INT 5
70525: PUSH
70526: LD_INT 1
70528: PUSH
70529: EMPTY
70530: LIST
70531: LIST
70532: PUSH
70533: LD_INT 4
70535: PUSH
70536: LD_INT 1
70538: PUSH
70539: EMPTY
70540: LIST
70541: LIST
70542: PUSH
70543: LD_INT 3
70545: PUSH
70546: LD_INT 0
70548: PUSH
70549: EMPTY
70550: LIST
70551: LIST
70552: PUSH
70553: LD_INT 3
70555: PUSH
70556: LD_INT 1
70558: NEG
70559: PUSH
70560: EMPTY
70561: LIST
70562: LIST
70563: PUSH
70564: LD_INT 3
70566: PUSH
70567: LD_INT 2
70569: NEG
70570: PUSH
70571: EMPTY
70572: LIST
70573: LIST
70574: PUSH
70575: LD_INT 5
70577: PUSH
70578: LD_INT 2
70580: PUSH
70581: EMPTY
70582: LIST
70583: LIST
70584: PUSH
70585: LD_INT 3
70587: PUSH
70588: LD_INT 3
70590: PUSH
70591: EMPTY
70592: LIST
70593: LIST
70594: PUSH
70595: LD_INT 3
70597: PUSH
70598: LD_INT 2
70600: PUSH
70601: EMPTY
70602: LIST
70603: LIST
70604: PUSH
70605: LD_INT 4
70607: PUSH
70608: LD_INT 3
70610: PUSH
70611: EMPTY
70612: LIST
70613: LIST
70614: PUSH
70615: LD_INT 4
70617: PUSH
70618: LD_INT 4
70620: PUSH
70621: EMPTY
70622: LIST
70623: LIST
70624: PUSH
70625: LD_INT 3
70627: PUSH
70628: LD_INT 4
70630: PUSH
70631: EMPTY
70632: LIST
70633: LIST
70634: PUSH
70635: LD_INT 2
70637: PUSH
70638: LD_INT 3
70640: PUSH
70641: EMPTY
70642: LIST
70643: LIST
70644: PUSH
70645: LD_INT 2
70647: PUSH
70648: LD_INT 2
70650: PUSH
70651: EMPTY
70652: LIST
70653: LIST
70654: PUSH
70655: LD_INT 4
70657: PUSH
70658: LD_INT 2
70660: PUSH
70661: EMPTY
70662: LIST
70663: LIST
70664: PUSH
70665: LD_INT 2
70667: PUSH
70668: LD_INT 4
70670: PUSH
70671: EMPTY
70672: LIST
70673: LIST
70674: PUSH
70675: LD_INT 0
70677: PUSH
70678: LD_INT 4
70680: PUSH
70681: EMPTY
70682: LIST
70683: LIST
70684: PUSH
70685: LD_INT 0
70687: PUSH
70688: LD_INT 3
70690: PUSH
70691: EMPTY
70692: LIST
70693: LIST
70694: PUSH
70695: LD_INT 1
70697: PUSH
70698: LD_INT 4
70700: PUSH
70701: EMPTY
70702: LIST
70703: LIST
70704: PUSH
70705: LD_INT 1
70707: PUSH
70708: LD_INT 5
70710: PUSH
70711: EMPTY
70712: LIST
70713: LIST
70714: PUSH
70715: LD_INT 0
70717: PUSH
70718: LD_INT 5
70720: PUSH
70721: EMPTY
70722: LIST
70723: LIST
70724: PUSH
70725: LD_INT 1
70727: NEG
70728: PUSH
70729: LD_INT 4
70731: PUSH
70732: EMPTY
70733: LIST
70734: LIST
70735: PUSH
70736: LD_INT 1
70738: NEG
70739: PUSH
70740: LD_INT 3
70742: PUSH
70743: EMPTY
70744: LIST
70745: LIST
70746: PUSH
70747: LD_INT 2
70749: PUSH
70750: LD_INT 5
70752: PUSH
70753: EMPTY
70754: LIST
70755: LIST
70756: PUSH
70757: LD_INT 2
70759: NEG
70760: PUSH
70761: LD_INT 3
70763: PUSH
70764: EMPTY
70765: LIST
70766: LIST
70767: PUSH
70768: EMPTY
70769: LIST
70770: LIST
70771: LIST
70772: LIST
70773: LIST
70774: LIST
70775: LIST
70776: LIST
70777: LIST
70778: LIST
70779: LIST
70780: LIST
70781: LIST
70782: LIST
70783: LIST
70784: LIST
70785: LIST
70786: LIST
70787: LIST
70788: LIST
70789: LIST
70790: LIST
70791: LIST
70792: LIST
70793: LIST
70794: LIST
70795: LIST
70796: LIST
70797: LIST
70798: LIST
70799: LIST
70800: LIST
70801: LIST
70802: LIST
70803: LIST
70804: LIST
70805: LIST
70806: LIST
70807: LIST
70808: LIST
70809: LIST
70810: LIST
70811: LIST
70812: LIST
70813: LIST
70814: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
70815: LD_ADDR_VAR 0 34
70819: PUSH
70820: LD_INT 0
70822: PUSH
70823: LD_INT 4
70825: NEG
70826: PUSH
70827: EMPTY
70828: LIST
70829: LIST
70830: PUSH
70831: LD_INT 0
70833: PUSH
70834: LD_INT 5
70836: NEG
70837: PUSH
70838: EMPTY
70839: LIST
70840: LIST
70841: PUSH
70842: LD_INT 1
70844: PUSH
70845: LD_INT 4
70847: NEG
70848: PUSH
70849: EMPTY
70850: LIST
70851: LIST
70852: PUSH
70853: LD_INT 1
70855: PUSH
70856: LD_INT 3
70858: NEG
70859: PUSH
70860: EMPTY
70861: LIST
70862: LIST
70863: PUSH
70864: LD_INT 0
70866: PUSH
70867: LD_INT 3
70869: NEG
70870: PUSH
70871: EMPTY
70872: LIST
70873: LIST
70874: PUSH
70875: LD_INT 1
70877: NEG
70878: PUSH
70879: LD_INT 4
70881: NEG
70882: PUSH
70883: EMPTY
70884: LIST
70885: LIST
70886: PUSH
70887: LD_INT 1
70889: NEG
70890: PUSH
70891: LD_INT 5
70893: NEG
70894: PUSH
70895: EMPTY
70896: LIST
70897: LIST
70898: PUSH
70899: LD_INT 2
70901: PUSH
70902: LD_INT 3
70904: NEG
70905: PUSH
70906: EMPTY
70907: LIST
70908: LIST
70909: PUSH
70910: LD_INT 2
70912: NEG
70913: PUSH
70914: LD_INT 5
70916: NEG
70917: PUSH
70918: EMPTY
70919: LIST
70920: LIST
70921: PUSH
70922: LD_INT 3
70924: PUSH
70925: LD_INT 0
70927: PUSH
70928: EMPTY
70929: LIST
70930: LIST
70931: PUSH
70932: LD_INT 3
70934: PUSH
70935: LD_INT 1
70937: NEG
70938: PUSH
70939: EMPTY
70940: LIST
70941: LIST
70942: PUSH
70943: LD_INT 4
70945: PUSH
70946: LD_INT 0
70948: PUSH
70949: EMPTY
70950: LIST
70951: LIST
70952: PUSH
70953: LD_INT 4
70955: PUSH
70956: LD_INT 1
70958: PUSH
70959: EMPTY
70960: LIST
70961: LIST
70962: PUSH
70963: LD_INT 3
70965: PUSH
70966: LD_INT 1
70968: PUSH
70969: EMPTY
70970: LIST
70971: LIST
70972: PUSH
70973: LD_INT 2
70975: PUSH
70976: LD_INT 0
70978: PUSH
70979: EMPTY
70980: LIST
70981: LIST
70982: PUSH
70983: LD_INT 2
70985: PUSH
70986: LD_INT 1
70988: NEG
70989: PUSH
70990: EMPTY
70991: LIST
70992: LIST
70993: PUSH
70994: LD_INT 2
70996: PUSH
70997: LD_INT 2
70999: NEG
71000: PUSH
71001: EMPTY
71002: LIST
71003: LIST
71004: PUSH
71005: LD_INT 4
71007: PUSH
71008: LD_INT 2
71010: PUSH
71011: EMPTY
71012: LIST
71013: LIST
71014: PUSH
71015: LD_INT 4
71017: PUSH
71018: LD_INT 4
71020: PUSH
71021: EMPTY
71022: LIST
71023: LIST
71024: PUSH
71025: LD_INT 4
71027: PUSH
71028: LD_INT 3
71030: PUSH
71031: EMPTY
71032: LIST
71033: LIST
71034: PUSH
71035: LD_INT 5
71037: PUSH
71038: LD_INT 4
71040: PUSH
71041: EMPTY
71042: LIST
71043: LIST
71044: PUSH
71045: LD_INT 5
71047: PUSH
71048: LD_INT 5
71050: PUSH
71051: EMPTY
71052: LIST
71053: LIST
71054: PUSH
71055: LD_INT 4
71057: PUSH
71058: LD_INT 5
71060: PUSH
71061: EMPTY
71062: LIST
71063: LIST
71064: PUSH
71065: LD_INT 3
71067: PUSH
71068: LD_INT 4
71070: PUSH
71071: EMPTY
71072: LIST
71073: LIST
71074: PUSH
71075: LD_INT 3
71077: PUSH
71078: LD_INT 3
71080: PUSH
71081: EMPTY
71082: LIST
71083: LIST
71084: PUSH
71085: LD_INT 5
71087: PUSH
71088: LD_INT 3
71090: PUSH
71091: EMPTY
71092: LIST
71093: LIST
71094: PUSH
71095: LD_INT 3
71097: PUSH
71098: LD_INT 5
71100: PUSH
71101: EMPTY
71102: LIST
71103: LIST
71104: PUSH
71105: LD_INT 0
71107: PUSH
71108: LD_INT 3
71110: PUSH
71111: EMPTY
71112: LIST
71113: LIST
71114: PUSH
71115: LD_INT 0
71117: PUSH
71118: LD_INT 2
71120: PUSH
71121: EMPTY
71122: LIST
71123: LIST
71124: PUSH
71125: LD_INT 1
71127: PUSH
71128: LD_INT 3
71130: PUSH
71131: EMPTY
71132: LIST
71133: LIST
71134: PUSH
71135: LD_INT 1
71137: PUSH
71138: LD_INT 4
71140: PUSH
71141: EMPTY
71142: LIST
71143: LIST
71144: PUSH
71145: LD_INT 0
71147: PUSH
71148: LD_INT 4
71150: PUSH
71151: EMPTY
71152: LIST
71153: LIST
71154: PUSH
71155: LD_INT 1
71157: NEG
71158: PUSH
71159: LD_INT 3
71161: PUSH
71162: EMPTY
71163: LIST
71164: LIST
71165: PUSH
71166: LD_INT 1
71168: NEG
71169: PUSH
71170: LD_INT 2
71172: PUSH
71173: EMPTY
71174: LIST
71175: LIST
71176: PUSH
71177: LD_INT 2
71179: PUSH
71180: LD_INT 4
71182: PUSH
71183: EMPTY
71184: LIST
71185: LIST
71186: PUSH
71187: LD_INT 2
71189: NEG
71190: PUSH
71191: LD_INT 2
71193: PUSH
71194: EMPTY
71195: LIST
71196: LIST
71197: PUSH
71198: LD_INT 4
71200: NEG
71201: PUSH
71202: LD_INT 0
71204: PUSH
71205: EMPTY
71206: LIST
71207: LIST
71208: PUSH
71209: LD_INT 4
71211: NEG
71212: PUSH
71213: LD_INT 1
71215: NEG
71216: PUSH
71217: EMPTY
71218: LIST
71219: LIST
71220: PUSH
71221: LD_INT 3
71223: NEG
71224: PUSH
71225: LD_INT 0
71227: PUSH
71228: EMPTY
71229: LIST
71230: LIST
71231: PUSH
71232: LD_INT 3
71234: NEG
71235: PUSH
71236: LD_INT 1
71238: PUSH
71239: EMPTY
71240: LIST
71241: LIST
71242: PUSH
71243: LD_INT 4
71245: NEG
71246: PUSH
71247: LD_INT 1
71249: PUSH
71250: EMPTY
71251: LIST
71252: LIST
71253: PUSH
71254: LD_INT 5
71256: NEG
71257: PUSH
71258: LD_INT 0
71260: PUSH
71261: EMPTY
71262: LIST
71263: LIST
71264: PUSH
71265: LD_INT 5
71267: NEG
71268: PUSH
71269: LD_INT 1
71271: NEG
71272: PUSH
71273: EMPTY
71274: LIST
71275: LIST
71276: PUSH
71277: LD_INT 5
71279: NEG
71280: PUSH
71281: LD_INT 2
71283: NEG
71284: PUSH
71285: EMPTY
71286: LIST
71287: LIST
71288: PUSH
71289: LD_INT 3
71291: NEG
71292: PUSH
71293: LD_INT 2
71295: PUSH
71296: EMPTY
71297: LIST
71298: LIST
71299: PUSH
71300: EMPTY
71301: LIST
71302: LIST
71303: LIST
71304: LIST
71305: LIST
71306: LIST
71307: LIST
71308: LIST
71309: LIST
71310: LIST
71311: LIST
71312: LIST
71313: LIST
71314: LIST
71315: LIST
71316: LIST
71317: LIST
71318: LIST
71319: LIST
71320: LIST
71321: LIST
71322: LIST
71323: LIST
71324: LIST
71325: LIST
71326: LIST
71327: LIST
71328: LIST
71329: LIST
71330: LIST
71331: LIST
71332: LIST
71333: LIST
71334: LIST
71335: LIST
71336: LIST
71337: LIST
71338: LIST
71339: LIST
71340: LIST
71341: LIST
71342: LIST
71343: LIST
71344: LIST
71345: LIST
71346: ST_TO_ADDR
// end ; end ;
71347: GO 71350
71349: POP
// case btype of b_depot , b_warehouse :
71350: LD_VAR 0 1
71354: PUSH
71355: LD_INT 0
71357: DOUBLE
71358: EQUAL
71359: IFTRUE 71369
71361: LD_INT 1
71363: DOUBLE
71364: EQUAL
71365: IFTRUE 71369
71367: GO 71570
71369: POP
// case nation of nation_american :
71370: LD_VAR 0 5
71374: PUSH
71375: LD_INT 1
71377: DOUBLE
71378: EQUAL
71379: IFTRUE 71383
71381: GO 71439
71383: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
71384: LD_ADDR_VAR 0 9
71388: PUSH
71389: LD_VAR 0 11
71393: PUSH
71394: LD_VAR 0 12
71398: PUSH
71399: LD_VAR 0 13
71403: PUSH
71404: LD_VAR 0 14
71408: PUSH
71409: LD_VAR 0 15
71413: PUSH
71414: LD_VAR 0 16
71418: PUSH
71419: EMPTY
71420: LIST
71421: LIST
71422: LIST
71423: LIST
71424: LIST
71425: LIST
71426: PUSH
71427: LD_VAR 0 4
71431: PUSH
71432: LD_INT 1
71434: PLUS
71435: ARRAY
71436: ST_TO_ADDR
71437: GO 71568
71439: LD_INT 2
71441: DOUBLE
71442: EQUAL
71443: IFTRUE 71447
71445: GO 71503
71447: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
71448: LD_ADDR_VAR 0 9
71452: PUSH
71453: LD_VAR 0 17
71457: PUSH
71458: LD_VAR 0 18
71462: PUSH
71463: LD_VAR 0 19
71467: PUSH
71468: LD_VAR 0 20
71472: PUSH
71473: LD_VAR 0 21
71477: PUSH
71478: LD_VAR 0 22
71482: PUSH
71483: EMPTY
71484: LIST
71485: LIST
71486: LIST
71487: LIST
71488: LIST
71489: LIST
71490: PUSH
71491: LD_VAR 0 4
71495: PUSH
71496: LD_INT 1
71498: PLUS
71499: ARRAY
71500: ST_TO_ADDR
71501: GO 71568
71503: LD_INT 3
71505: DOUBLE
71506: EQUAL
71507: IFTRUE 71511
71509: GO 71567
71511: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
71512: LD_ADDR_VAR 0 9
71516: PUSH
71517: LD_VAR 0 23
71521: PUSH
71522: LD_VAR 0 24
71526: PUSH
71527: LD_VAR 0 25
71531: PUSH
71532: LD_VAR 0 26
71536: PUSH
71537: LD_VAR 0 27
71541: PUSH
71542: LD_VAR 0 28
71546: PUSH
71547: EMPTY
71548: LIST
71549: LIST
71550: LIST
71551: LIST
71552: LIST
71553: LIST
71554: PUSH
71555: LD_VAR 0 4
71559: PUSH
71560: LD_INT 1
71562: PLUS
71563: ARRAY
71564: ST_TO_ADDR
71565: GO 71568
71567: POP
71568: GO 72123
71570: LD_INT 2
71572: DOUBLE
71573: EQUAL
71574: IFTRUE 71584
71576: LD_INT 3
71578: DOUBLE
71579: EQUAL
71580: IFTRUE 71584
71582: GO 71640
71584: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
71585: LD_ADDR_VAR 0 9
71589: PUSH
71590: LD_VAR 0 29
71594: PUSH
71595: LD_VAR 0 30
71599: PUSH
71600: LD_VAR 0 31
71604: PUSH
71605: LD_VAR 0 32
71609: PUSH
71610: LD_VAR 0 33
71614: PUSH
71615: LD_VAR 0 34
71619: PUSH
71620: EMPTY
71621: LIST
71622: LIST
71623: LIST
71624: LIST
71625: LIST
71626: LIST
71627: PUSH
71628: LD_VAR 0 4
71632: PUSH
71633: LD_INT 1
71635: PLUS
71636: ARRAY
71637: ST_TO_ADDR
71638: GO 72123
71640: LD_INT 16
71642: DOUBLE
71643: EQUAL
71644: IFTRUE 71702
71646: LD_INT 17
71648: DOUBLE
71649: EQUAL
71650: IFTRUE 71702
71652: LD_INT 18
71654: DOUBLE
71655: EQUAL
71656: IFTRUE 71702
71658: LD_INT 19
71660: DOUBLE
71661: EQUAL
71662: IFTRUE 71702
71664: LD_INT 22
71666: DOUBLE
71667: EQUAL
71668: IFTRUE 71702
71670: LD_INT 20
71672: DOUBLE
71673: EQUAL
71674: IFTRUE 71702
71676: LD_INT 21
71678: DOUBLE
71679: EQUAL
71680: IFTRUE 71702
71682: LD_INT 23
71684: DOUBLE
71685: EQUAL
71686: IFTRUE 71702
71688: LD_INT 24
71690: DOUBLE
71691: EQUAL
71692: IFTRUE 71702
71694: LD_INT 25
71696: DOUBLE
71697: EQUAL
71698: IFTRUE 71702
71700: GO 71758
71702: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
71703: LD_ADDR_VAR 0 9
71707: PUSH
71708: LD_VAR 0 35
71712: PUSH
71713: LD_VAR 0 36
71717: PUSH
71718: LD_VAR 0 37
71722: PUSH
71723: LD_VAR 0 38
71727: PUSH
71728: LD_VAR 0 39
71732: PUSH
71733: LD_VAR 0 40
71737: PUSH
71738: EMPTY
71739: LIST
71740: LIST
71741: LIST
71742: LIST
71743: LIST
71744: LIST
71745: PUSH
71746: LD_VAR 0 4
71750: PUSH
71751: LD_INT 1
71753: PLUS
71754: ARRAY
71755: ST_TO_ADDR
71756: GO 72123
71758: LD_INT 6
71760: DOUBLE
71761: EQUAL
71762: IFTRUE 71814
71764: LD_INT 7
71766: DOUBLE
71767: EQUAL
71768: IFTRUE 71814
71770: LD_INT 8
71772: DOUBLE
71773: EQUAL
71774: IFTRUE 71814
71776: LD_INT 13
71778: DOUBLE
71779: EQUAL
71780: IFTRUE 71814
71782: LD_INT 12
71784: DOUBLE
71785: EQUAL
71786: IFTRUE 71814
71788: LD_INT 15
71790: DOUBLE
71791: EQUAL
71792: IFTRUE 71814
71794: LD_INT 11
71796: DOUBLE
71797: EQUAL
71798: IFTRUE 71814
71800: LD_INT 14
71802: DOUBLE
71803: EQUAL
71804: IFTRUE 71814
71806: LD_INT 10
71808: DOUBLE
71809: EQUAL
71810: IFTRUE 71814
71812: GO 71870
71814: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
71815: LD_ADDR_VAR 0 9
71819: PUSH
71820: LD_VAR 0 41
71824: PUSH
71825: LD_VAR 0 42
71829: PUSH
71830: LD_VAR 0 43
71834: PUSH
71835: LD_VAR 0 44
71839: PUSH
71840: LD_VAR 0 45
71844: PUSH
71845: LD_VAR 0 46
71849: PUSH
71850: EMPTY
71851: LIST
71852: LIST
71853: LIST
71854: LIST
71855: LIST
71856: LIST
71857: PUSH
71858: LD_VAR 0 4
71862: PUSH
71863: LD_INT 1
71865: PLUS
71866: ARRAY
71867: ST_TO_ADDR
71868: GO 72123
71870: LD_INT 36
71872: DOUBLE
71873: EQUAL
71874: IFTRUE 71878
71876: GO 71934
71878: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
71879: LD_ADDR_VAR 0 9
71883: PUSH
71884: LD_VAR 0 47
71888: PUSH
71889: LD_VAR 0 48
71893: PUSH
71894: LD_VAR 0 49
71898: PUSH
71899: LD_VAR 0 50
71903: PUSH
71904: LD_VAR 0 51
71908: PUSH
71909: LD_VAR 0 52
71913: PUSH
71914: EMPTY
71915: LIST
71916: LIST
71917: LIST
71918: LIST
71919: LIST
71920: LIST
71921: PUSH
71922: LD_VAR 0 4
71926: PUSH
71927: LD_INT 1
71929: PLUS
71930: ARRAY
71931: ST_TO_ADDR
71932: GO 72123
71934: LD_INT 4
71936: DOUBLE
71937: EQUAL
71938: IFTRUE 71960
71940: LD_INT 5
71942: DOUBLE
71943: EQUAL
71944: IFTRUE 71960
71946: LD_INT 34
71948: DOUBLE
71949: EQUAL
71950: IFTRUE 71960
71952: LD_INT 37
71954: DOUBLE
71955: EQUAL
71956: IFTRUE 71960
71958: GO 72016
71960: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
71961: LD_ADDR_VAR 0 9
71965: PUSH
71966: LD_VAR 0 53
71970: PUSH
71971: LD_VAR 0 54
71975: PUSH
71976: LD_VAR 0 55
71980: PUSH
71981: LD_VAR 0 56
71985: PUSH
71986: LD_VAR 0 57
71990: PUSH
71991: LD_VAR 0 58
71995: PUSH
71996: EMPTY
71997: LIST
71998: LIST
71999: LIST
72000: LIST
72001: LIST
72002: LIST
72003: PUSH
72004: LD_VAR 0 4
72008: PUSH
72009: LD_INT 1
72011: PLUS
72012: ARRAY
72013: ST_TO_ADDR
72014: GO 72123
72016: LD_INT 31
72018: DOUBLE
72019: EQUAL
72020: IFTRUE 72066
72022: LD_INT 32
72024: DOUBLE
72025: EQUAL
72026: IFTRUE 72066
72028: LD_INT 33
72030: DOUBLE
72031: EQUAL
72032: IFTRUE 72066
72034: LD_INT 27
72036: DOUBLE
72037: EQUAL
72038: IFTRUE 72066
72040: LD_INT 26
72042: DOUBLE
72043: EQUAL
72044: IFTRUE 72066
72046: LD_INT 28
72048: DOUBLE
72049: EQUAL
72050: IFTRUE 72066
72052: LD_INT 29
72054: DOUBLE
72055: EQUAL
72056: IFTRUE 72066
72058: LD_INT 30
72060: DOUBLE
72061: EQUAL
72062: IFTRUE 72066
72064: GO 72122
72066: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
72067: LD_ADDR_VAR 0 9
72071: PUSH
72072: LD_VAR 0 59
72076: PUSH
72077: LD_VAR 0 60
72081: PUSH
72082: LD_VAR 0 61
72086: PUSH
72087: LD_VAR 0 62
72091: PUSH
72092: LD_VAR 0 63
72096: PUSH
72097: LD_VAR 0 64
72101: PUSH
72102: EMPTY
72103: LIST
72104: LIST
72105: LIST
72106: LIST
72107: LIST
72108: LIST
72109: PUSH
72110: LD_VAR 0 4
72114: PUSH
72115: LD_INT 1
72117: PLUS
72118: ARRAY
72119: ST_TO_ADDR
72120: GO 72123
72122: POP
// temp_list2 = [ ] ;
72123: LD_ADDR_VAR 0 10
72127: PUSH
72128: EMPTY
72129: ST_TO_ADDR
// for i in temp_list do
72130: LD_ADDR_VAR 0 8
72134: PUSH
72135: LD_VAR 0 9
72139: PUSH
72140: FOR_IN
72141: IFFALSE 72193
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
72143: LD_ADDR_VAR 0 10
72147: PUSH
72148: LD_VAR 0 10
72152: PUSH
72153: LD_VAR 0 8
72157: PUSH
72158: LD_INT 1
72160: ARRAY
72161: PUSH
72162: LD_VAR 0 2
72166: PLUS
72167: PUSH
72168: LD_VAR 0 8
72172: PUSH
72173: LD_INT 2
72175: ARRAY
72176: PUSH
72177: LD_VAR 0 3
72181: PLUS
72182: PUSH
72183: EMPTY
72184: LIST
72185: LIST
72186: PUSH
72187: EMPTY
72188: LIST
72189: ADD
72190: ST_TO_ADDR
72191: GO 72140
72193: POP
72194: POP
// result = temp_list2 ;
72195: LD_ADDR_VAR 0 7
72199: PUSH
72200: LD_VAR 0 10
72204: ST_TO_ADDR
// end ;
72205: LD_VAR 0 7
72209: RET
// export function EnemyInRange ( unit , dist ) ; begin
72210: LD_INT 0
72212: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
72213: LD_ADDR_VAR 0 3
72217: PUSH
72218: LD_VAR 0 1
72222: PPUSH
72223: CALL_OW 255
72227: PPUSH
72228: LD_VAR 0 1
72232: PPUSH
72233: CALL_OW 250
72237: PPUSH
72238: LD_VAR 0 1
72242: PPUSH
72243: CALL_OW 251
72247: PPUSH
72248: LD_VAR 0 2
72252: PPUSH
72253: CALL 45612 0 4
72257: PUSH
72258: LD_INT 4
72260: ARRAY
72261: ST_TO_ADDR
// end ;
72262: LD_VAR 0 3
72266: RET
// export function PlayerSeeMe ( unit ) ; begin
72267: LD_INT 0
72269: PPUSH
// result := See ( your_side , unit ) ;
72270: LD_ADDR_VAR 0 2
72274: PUSH
72275: LD_OWVAR 2
72279: PPUSH
72280: LD_VAR 0 1
72284: PPUSH
72285: CALL_OW 292
72289: ST_TO_ADDR
// end ;
72290: LD_VAR 0 2
72294: RET
// export function ReverseDir ( unit ) ; begin
72295: LD_INT 0
72297: PPUSH
// if not unit then
72298: LD_VAR 0 1
72302: NOT
72303: IFFALSE 72307
// exit ;
72305: GO 72330
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
72307: LD_ADDR_VAR 0 2
72311: PUSH
72312: LD_VAR 0 1
72316: PPUSH
72317: CALL_OW 254
72321: PUSH
72322: LD_INT 3
72324: PLUS
72325: PUSH
72326: LD_INT 6
72328: MOD
72329: ST_TO_ADDR
// end ;
72330: LD_VAR 0 2
72334: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
72335: LD_INT 0
72337: PPUSH
72338: PPUSH
72339: PPUSH
72340: PPUSH
72341: PPUSH
72342: PPUSH
// if not unit or not hexes then
72343: LD_VAR 0 1
72347: NOT
72348: PUSH
72349: LD_VAR 0 2
72353: NOT
72354: OR
72355: IFFALSE 72359
// exit ;
72357: GO 72482
// dist := 9999 ;
72359: LD_ADDR_VAR 0 5
72363: PUSH
72364: LD_INT 9999
72366: ST_TO_ADDR
// for i = 1 to hexes do
72367: LD_ADDR_VAR 0 4
72371: PUSH
72372: DOUBLE
72373: LD_INT 1
72375: DEC
72376: ST_TO_ADDR
72377: LD_VAR 0 2
72381: PUSH
72382: FOR_TO
72383: IFFALSE 72470
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
72385: LD_ADDR_VAR 0 6
72389: PUSH
72390: LD_VAR 0 1
72394: PPUSH
72395: LD_VAR 0 2
72399: PUSH
72400: LD_VAR 0 4
72404: ARRAY
72405: PUSH
72406: LD_INT 1
72408: ARRAY
72409: PPUSH
72410: LD_VAR 0 2
72414: PUSH
72415: LD_VAR 0 4
72419: ARRAY
72420: PUSH
72421: LD_INT 2
72423: ARRAY
72424: PPUSH
72425: CALL_OW 297
72429: ST_TO_ADDR
// if tdist < dist then
72430: LD_VAR 0 6
72434: PUSH
72435: LD_VAR 0 5
72439: LESS
72440: IFFALSE 72468
// begin hex := hexes [ i ] ;
72442: LD_ADDR_VAR 0 8
72446: PUSH
72447: LD_VAR 0 2
72451: PUSH
72452: LD_VAR 0 4
72456: ARRAY
72457: ST_TO_ADDR
// dist := tdist ;
72458: LD_ADDR_VAR 0 5
72462: PUSH
72463: LD_VAR 0 6
72467: ST_TO_ADDR
// end ; end ;
72468: GO 72382
72470: POP
72471: POP
// result := hex ;
72472: LD_ADDR_VAR 0 3
72476: PUSH
72477: LD_VAR 0 8
72481: ST_TO_ADDR
// end ;
72482: LD_VAR 0 3
72486: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
72487: LD_INT 0
72489: PPUSH
72490: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
72491: LD_VAR 0 1
72495: NOT
72496: PUSH
72497: LD_VAR 0 1
72501: PUSH
72502: LD_INT 21
72504: PUSH
72505: LD_INT 2
72507: PUSH
72508: EMPTY
72509: LIST
72510: LIST
72511: PUSH
72512: LD_INT 23
72514: PUSH
72515: LD_INT 2
72517: PUSH
72518: EMPTY
72519: LIST
72520: LIST
72521: PUSH
72522: EMPTY
72523: LIST
72524: LIST
72525: PPUSH
72526: CALL_OW 69
72530: IN
72531: NOT
72532: OR
72533: IFFALSE 72537
// exit ;
72535: GO 72584
// for i = 1 to 3 do
72537: LD_ADDR_VAR 0 3
72541: PUSH
72542: DOUBLE
72543: LD_INT 1
72545: DEC
72546: ST_TO_ADDR
72547: LD_INT 3
72549: PUSH
72550: FOR_TO
72551: IFFALSE 72582
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
72553: LD_VAR 0 1
72557: PPUSH
72558: CALL_OW 250
72562: PPUSH
72563: LD_VAR 0 1
72567: PPUSH
72568: CALL_OW 251
72572: PPUSH
72573: LD_INT 1
72575: PPUSH
72576: CALL_OW 453
72580: GO 72550
72582: POP
72583: POP
// end ;
72584: LD_VAR 0 2
72588: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
72589: LD_INT 0
72591: PPUSH
72592: PPUSH
72593: PPUSH
72594: PPUSH
72595: PPUSH
72596: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
72597: LD_VAR 0 1
72601: NOT
72602: PUSH
72603: LD_VAR 0 2
72607: NOT
72608: OR
72609: PUSH
72610: LD_VAR 0 1
72614: PPUSH
72615: CALL_OW 314
72619: OR
72620: IFFALSE 72624
// exit ;
72622: GO 73065
// x := GetX ( enemy_unit ) ;
72624: LD_ADDR_VAR 0 7
72628: PUSH
72629: LD_VAR 0 2
72633: PPUSH
72634: CALL_OW 250
72638: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
72639: LD_ADDR_VAR 0 8
72643: PUSH
72644: LD_VAR 0 2
72648: PPUSH
72649: CALL_OW 251
72653: ST_TO_ADDR
// if not x or not y then
72654: LD_VAR 0 7
72658: NOT
72659: PUSH
72660: LD_VAR 0 8
72664: NOT
72665: OR
72666: IFFALSE 72670
// exit ;
72668: GO 73065
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
72670: LD_ADDR_VAR 0 6
72674: PUSH
72675: LD_VAR 0 7
72679: PPUSH
72680: LD_INT 0
72682: PPUSH
72683: LD_INT 4
72685: PPUSH
72686: CALL_OW 272
72690: PUSH
72691: LD_VAR 0 8
72695: PPUSH
72696: LD_INT 0
72698: PPUSH
72699: LD_INT 4
72701: PPUSH
72702: CALL_OW 273
72706: PUSH
72707: EMPTY
72708: LIST
72709: LIST
72710: PUSH
72711: LD_VAR 0 7
72715: PPUSH
72716: LD_INT 1
72718: PPUSH
72719: LD_INT 4
72721: PPUSH
72722: CALL_OW 272
72726: PUSH
72727: LD_VAR 0 8
72731: PPUSH
72732: LD_INT 1
72734: PPUSH
72735: LD_INT 4
72737: PPUSH
72738: CALL_OW 273
72742: PUSH
72743: EMPTY
72744: LIST
72745: LIST
72746: PUSH
72747: LD_VAR 0 7
72751: PPUSH
72752: LD_INT 2
72754: PPUSH
72755: LD_INT 4
72757: PPUSH
72758: CALL_OW 272
72762: PUSH
72763: LD_VAR 0 8
72767: PPUSH
72768: LD_INT 2
72770: PPUSH
72771: LD_INT 4
72773: PPUSH
72774: CALL_OW 273
72778: PUSH
72779: EMPTY
72780: LIST
72781: LIST
72782: PUSH
72783: LD_VAR 0 7
72787: PPUSH
72788: LD_INT 3
72790: PPUSH
72791: LD_INT 4
72793: PPUSH
72794: CALL_OW 272
72798: PUSH
72799: LD_VAR 0 8
72803: PPUSH
72804: LD_INT 3
72806: PPUSH
72807: LD_INT 4
72809: PPUSH
72810: CALL_OW 273
72814: PUSH
72815: EMPTY
72816: LIST
72817: LIST
72818: PUSH
72819: LD_VAR 0 7
72823: PPUSH
72824: LD_INT 4
72826: PPUSH
72827: LD_INT 4
72829: PPUSH
72830: CALL_OW 272
72834: PUSH
72835: LD_VAR 0 8
72839: PPUSH
72840: LD_INT 4
72842: PPUSH
72843: LD_INT 4
72845: PPUSH
72846: CALL_OW 273
72850: PUSH
72851: EMPTY
72852: LIST
72853: LIST
72854: PUSH
72855: LD_VAR 0 7
72859: PPUSH
72860: LD_INT 5
72862: PPUSH
72863: LD_INT 4
72865: PPUSH
72866: CALL_OW 272
72870: PUSH
72871: LD_VAR 0 8
72875: PPUSH
72876: LD_INT 5
72878: PPUSH
72879: LD_INT 4
72881: PPUSH
72882: CALL_OW 273
72886: PUSH
72887: EMPTY
72888: LIST
72889: LIST
72890: PUSH
72891: EMPTY
72892: LIST
72893: LIST
72894: LIST
72895: LIST
72896: LIST
72897: LIST
72898: ST_TO_ADDR
// for i = tmp downto 1 do
72899: LD_ADDR_VAR 0 4
72903: PUSH
72904: DOUBLE
72905: LD_VAR 0 6
72909: INC
72910: ST_TO_ADDR
72911: LD_INT 1
72913: PUSH
72914: FOR_DOWNTO
72915: IFFALSE 73016
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
72917: LD_VAR 0 6
72921: PUSH
72922: LD_VAR 0 4
72926: ARRAY
72927: PUSH
72928: LD_INT 1
72930: ARRAY
72931: PPUSH
72932: LD_VAR 0 6
72936: PUSH
72937: LD_VAR 0 4
72941: ARRAY
72942: PUSH
72943: LD_INT 2
72945: ARRAY
72946: PPUSH
72947: CALL_OW 488
72951: NOT
72952: PUSH
72953: LD_VAR 0 6
72957: PUSH
72958: LD_VAR 0 4
72962: ARRAY
72963: PUSH
72964: LD_INT 1
72966: ARRAY
72967: PPUSH
72968: LD_VAR 0 6
72972: PUSH
72973: LD_VAR 0 4
72977: ARRAY
72978: PUSH
72979: LD_INT 2
72981: ARRAY
72982: PPUSH
72983: CALL_OW 428
72987: PUSH
72988: LD_INT 0
72990: NONEQUAL
72991: OR
72992: IFFALSE 73014
// tmp := Delete ( tmp , i ) ;
72994: LD_ADDR_VAR 0 6
72998: PUSH
72999: LD_VAR 0 6
73003: PPUSH
73004: LD_VAR 0 4
73008: PPUSH
73009: CALL_OW 3
73013: ST_TO_ADDR
73014: GO 72914
73016: POP
73017: POP
// j := GetClosestHex ( unit , tmp ) ;
73018: LD_ADDR_VAR 0 5
73022: PUSH
73023: LD_VAR 0 1
73027: PPUSH
73028: LD_VAR 0 6
73032: PPUSH
73033: CALL 72335 0 2
73037: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
73038: LD_VAR 0 1
73042: PPUSH
73043: LD_VAR 0 5
73047: PUSH
73048: LD_INT 1
73050: ARRAY
73051: PPUSH
73052: LD_VAR 0 5
73056: PUSH
73057: LD_INT 2
73059: ARRAY
73060: PPUSH
73061: CALL_OW 111
// end ;
73065: LD_VAR 0 3
73069: RET
// export function PrepareApemanSoldier ( ) ; begin
73070: LD_INT 0
73072: PPUSH
// uc_nation := 0 ;
73073: LD_ADDR_OWVAR 21
73077: PUSH
73078: LD_INT 0
73080: ST_TO_ADDR
// hc_sex := sex_male ;
73081: LD_ADDR_OWVAR 27
73085: PUSH
73086: LD_INT 1
73088: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
73089: LD_ADDR_OWVAR 28
73093: PUSH
73094: LD_INT 15
73096: ST_TO_ADDR
// hc_gallery :=  ;
73097: LD_ADDR_OWVAR 33
73101: PUSH
73102: LD_STRING 
73104: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73105: LD_ADDR_OWVAR 31
73109: PUSH
73110: LD_INT 0
73112: PPUSH
73113: LD_INT 3
73115: PPUSH
73116: CALL_OW 12
73120: PUSH
73121: LD_INT 0
73123: PPUSH
73124: LD_INT 3
73126: PPUSH
73127: CALL_OW 12
73131: PUSH
73132: LD_INT 0
73134: PUSH
73135: LD_INT 0
73137: PUSH
73138: EMPTY
73139: LIST
73140: LIST
73141: LIST
73142: LIST
73143: ST_TO_ADDR
// end ;
73144: LD_VAR 0 1
73148: RET
// export function PrepareApemanEngineer ( ) ; begin
73149: LD_INT 0
73151: PPUSH
// uc_nation := 0 ;
73152: LD_ADDR_OWVAR 21
73156: PUSH
73157: LD_INT 0
73159: ST_TO_ADDR
// hc_sex := sex_male ;
73160: LD_ADDR_OWVAR 27
73164: PUSH
73165: LD_INT 1
73167: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
73168: LD_ADDR_OWVAR 28
73172: PUSH
73173: LD_INT 16
73175: ST_TO_ADDR
// hc_gallery :=  ;
73176: LD_ADDR_OWVAR 33
73180: PUSH
73181: LD_STRING 
73183: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73184: LD_ADDR_OWVAR 31
73188: PUSH
73189: LD_INT 0
73191: PPUSH
73192: LD_INT 3
73194: PPUSH
73195: CALL_OW 12
73199: PUSH
73200: LD_INT 0
73202: PPUSH
73203: LD_INT 3
73205: PPUSH
73206: CALL_OW 12
73210: PUSH
73211: LD_INT 0
73213: PUSH
73214: LD_INT 0
73216: PUSH
73217: EMPTY
73218: LIST
73219: LIST
73220: LIST
73221: LIST
73222: ST_TO_ADDR
// end ;
73223: LD_VAR 0 1
73227: RET
// export function PrepareApeman ( agressivity ) ; begin
73228: LD_INT 0
73230: PPUSH
// uc_side := 0 ;
73231: LD_ADDR_OWVAR 20
73235: PUSH
73236: LD_INT 0
73238: ST_TO_ADDR
// uc_nation := 0 ;
73239: LD_ADDR_OWVAR 21
73243: PUSH
73244: LD_INT 0
73246: ST_TO_ADDR
// hc_sex := sex_male ;
73247: LD_ADDR_OWVAR 27
73251: PUSH
73252: LD_INT 1
73254: ST_TO_ADDR
// hc_class := class_apeman ;
73255: LD_ADDR_OWVAR 28
73259: PUSH
73260: LD_INT 12
73262: ST_TO_ADDR
// hc_gallery :=  ;
73263: LD_ADDR_OWVAR 33
73267: PUSH
73268: LD_STRING 
73270: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73271: LD_ADDR_OWVAR 35
73275: PUSH
73276: LD_VAR 0 1
73280: NEG
73281: PPUSH
73282: LD_VAR 0 1
73286: PPUSH
73287: CALL_OW 12
73291: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73292: LD_ADDR_OWVAR 31
73296: PUSH
73297: LD_INT 0
73299: PPUSH
73300: LD_INT 3
73302: PPUSH
73303: CALL_OW 12
73307: PUSH
73308: LD_INT 0
73310: PPUSH
73311: LD_INT 3
73313: PPUSH
73314: CALL_OW 12
73318: PUSH
73319: LD_INT 0
73321: PUSH
73322: LD_INT 0
73324: PUSH
73325: EMPTY
73326: LIST
73327: LIST
73328: LIST
73329: LIST
73330: ST_TO_ADDR
// end ;
73331: LD_VAR 0 2
73335: RET
// export function PrepareTiger ( agressivity ) ; begin
73336: LD_INT 0
73338: PPUSH
// uc_side := 0 ;
73339: LD_ADDR_OWVAR 20
73343: PUSH
73344: LD_INT 0
73346: ST_TO_ADDR
// uc_nation := 0 ;
73347: LD_ADDR_OWVAR 21
73351: PUSH
73352: LD_INT 0
73354: ST_TO_ADDR
// hc_class := class_tiger ;
73355: LD_ADDR_OWVAR 28
73359: PUSH
73360: LD_INT 14
73362: ST_TO_ADDR
// hc_gallery :=  ;
73363: LD_ADDR_OWVAR 33
73367: PUSH
73368: LD_STRING 
73370: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73371: LD_ADDR_OWVAR 35
73375: PUSH
73376: LD_VAR 0 1
73380: NEG
73381: PPUSH
73382: LD_VAR 0 1
73386: PPUSH
73387: CALL_OW 12
73391: ST_TO_ADDR
// end ;
73392: LD_VAR 0 2
73396: RET
// export function PrepareEnchidna ( ) ; begin
73397: LD_INT 0
73399: PPUSH
// uc_side := 0 ;
73400: LD_ADDR_OWVAR 20
73404: PUSH
73405: LD_INT 0
73407: ST_TO_ADDR
// uc_nation := 0 ;
73408: LD_ADDR_OWVAR 21
73412: PUSH
73413: LD_INT 0
73415: ST_TO_ADDR
// hc_class := class_baggie ;
73416: LD_ADDR_OWVAR 28
73420: PUSH
73421: LD_INT 13
73423: ST_TO_ADDR
// hc_gallery :=  ;
73424: LD_ADDR_OWVAR 33
73428: PUSH
73429: LD_STRING 
73431: ST_TO_ADDR
// end ;
73432: LD_VAR 0 1
73436: RET
// export function PrepareFrog ( ) ; begin
73437: LD_INT 0
73439: PPUSH
// uc_side := 0 ;
73440: LD_ADDR_OWVAR 20
73444: PUSH
73445: LD_INT 0
73447: ST_TO_ADDR
// uc_nation := 0 ;
73448: LD_ADDR_OWVAR 21
73452: PUSH
73453: LD_INT 0
73455: ST_TO_ADDR
// hc_class := class_frog ;
73456: LD_ADDR_OWVAR 28
73460: PUSH
73461: LD_INT 19
73463: ST_TO_ADDR
// hc_gallery :=  ;
73464: LD_ADDR_OWVAR 33
73468: PUSH
73469: LD_STRING 
73471: ST_TO_ADDR
// end ;
73472: LD_VAR 0 1
73476: RET
// export function PrepareFish ( ) ; begin
73477: LD_INT 0
73479: PPUSH
// uc_side := 0 ;
73480: LD_ADDR_OWVAR 20
73484: PUSH
73485: LD_INT 0
73487: ST_TO_ADDR
// uc_nation := 0 ;
73488: LD_ADDR_OWVAR 21
73492: PUSH
73493: LD_INT 0
73495: ST_TO_ADDR
// hc_class := class_fish ;
73496: LD_ADDR_OWVAR 28
73500: PUSH
73501: LD_INT 20
73503: ST_TO_ADDR
// hc_gallery :=  ;
73504: LD_ADDR_OWVAR 33
73508: PUSH
73509: LD_STRING 
73511: ST_TO_ADDR
// end ;
73512: LD_VAR 0 1
73516: RET
// export function PrepareBird ( ) ; begin
73517: LD_INT 0
73519: PPUSH
// uc_side := 0 ;
73520: LD_ADDR_OWVAR 20
73524: PUSH
73525: LD_INT 0
73527: ST_TO_ADDR
// uc_nation := 0 ;
73528: LD_ADDR_OWVAR 21
73532: PUSH
73533: LD_INT 0
73535: ST_TO_ADDR
// hc_class := class_phororhacos ;
73536: LD_ADDR_OWVAR 28
73540: PUSH
73541: LD_INT 18
73543: ST_TO_ADDR
// hc_gallery :=  ;
73544: LD_ADDR_OWVAR 33
73548: PUSH
73549: LD_STRING 
73551: ST_TO_ADDR
// end ;
73552: LD_VAR 0 1
73556: RET
// export function PrepareHorse ( ) ; begin
73557: LD_INT 0
73559: PPUSH
// uc_side := 0 ;
73560: LD_ADDR_OWVAR 20
73564: PUSH
73565: LD_INT 0
73567: ST_TO_ADDR
// uc_nation := 0 ;
73568: LD_ADDR_OWVAR 21
73572: PUSH
73573: LD_INT 0
73575: ST_TO_ADDR
// hc_class := class_horse ;
73576: LD_ADDR_OWVAR 28
73580: PUSH
73581: LD_INT 21
73583: ST_TO_ADDR
// hc_gallery :=  ;
73584: LD_ADDR_OWVAR 33
73588: PUSH
73589: LD_STRING 
73591: ST_TO_ADDR
// end ;
73592: LD_VAR 0 1
73596: RET
// export function PrepareMastodont ( ) ; begin
73597: LD_INT 0
73599: PPUSH
// uc_side := 0 ;
73600: LD_ADDR_OWVAR 20
73604: PUSH
73605: LD_INT 0
73607: ST_TO_ADDR
// uc_nation := 0 ;
73608: LD_ADDR_OWVAR 21
73612: PUSH
73613: LD_INT 0
73615: ST_TO_ADDR
// vc_chassis := class_mastodont ;
73616: LD_ADDR_OWVAR 37
73620: PUSH
73621: LD_INT 31
73623: ST_TO_ADDR
// vc_control := control_rider ;
73624: LD_ADDR_OWVAR 38
73628: PUSH
73629: LD_INT 4
73631: ST_TO_ADDR
// end ;
73632: LD_VAR 0 1
73636: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
73637: LD_INT 0
73639: PPUSH
73640: PPUSH
73641: PPUSH
// uc_side = 0 ;
73642: LD_ADDR_OWVAR 20
73646: PUSH
73647: LD_INT 0
73649: ST_TO_ADDR
// uc_nation = 0 ;
73650: LD_ADDR_OWVAR 21
73654: PUSH
73655: LD_INT 0
73657: ST_TO_ADDR
// InitHc_All ( ) ;
73658: CALL_OW 584
// InitVc ;
73662: CALL_OW 20
// if mastodonts then
73666: LD_VAR 0 6
73670: IFFALSE 73737
// for i = 1 to mastodonts do
73672: LD_ADDR_VAR 0 11
73676: PUSH
73677: DOUBLE
73678: LD_INT 1
73680: DEC
73681: ST_TO_ADDR
73682: LD_VAR 0 6
73686: PUSH
73687: FOR_TO
73688: IFFALSE 73735
// begin vc_chassis := 31 ;
73690: LD_ADDR_OWVAR 37
73694: PUSH
73695: LD_INT 31
73697: ST_TO_ADDR
// vc_control := control_rider ;
73698: LD_ADDR_OWVAR 38
73702: PUSH
73703: LD_INT 4
73705: ST_TO_ADDR
// animal := CreateVehicle ;
73706: LD_ADDR_VAR 0 12
73710: PUSH
73711: CALL_OW 45
73715: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73716: LD_VAR 0 12
73720: PPUSH
73721: LD_VAR 0 8
73725: PPUSH
73726: LD_INT 0
73728: PPUSH
73729: CALL 75872 0 3
// end ;
73733: GO 73687
73735: POP
73736: POP
// if horses then
73737: LD_VAR 0 5
73741: IFFALSE 73808
// for i = 1 to horses do
73743: LD_ADDR_VAR 0 11
73747: PUSH
73748: DOUBLE
73749: LD_INT 1
73751: DEC
73752: ST_TO_ADDR
73753: LD_VAR 0 5
73757: PUSH
73758: FOR_TO
73759: IFFALSE 73806
// begin hc_class := 21 ;
73761: LD_ADDR_OWVAR 28
73765: PUSH
73766: LD_INT 21
73768: ST_TO_ADDR
// hc_gallery :=  ;
73769: LD_ADDR_OWVAR 33
73773: PUSH
73774: LD_STRING 
73776: ST_TO_ADDR
// animal := CreateHuman ;
73777: LD_ADDR_VAR 0 12
73781: PUSH
73782: CALL_OW 44
73786: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73787: LD_VAR 0 12
73791: PPUSH
73792: LD_VAR 0 8
73796: PPUSH
73797: LD_INT 0
73799: PPUSH
73800: CALL 75872 0 3
// end ;
73804: GO 73758
73806: POP
73807: POP
// if birds then
73808: LD_VAR 0 1
73812: IFFALSE 73879
// for i = 1 to birds do
73814: LD_ADDR_VAR 0 11
73818: PUSH
73819: DOUBLE
73820: LD_INT 1
73822: DEC
73823: ST_TO_ADDR
73824: LD_VAR 0 1
73828: PUSH
73829: FOR_TO
73830: IFFALSE 73877
// begin hc_class = 18 ;
73832: LD_ADDR_OWVAR 28
73836: PUSH
73837: LD_INT 18
73839: ST_TO_ADDR
// hc_gallery =  ;
73840: LD_ADDR_OWVAR 33
73844: PUSH
73845: LD_STRING 
73847: ST_TO_ADDR
// animal := CreateHuman ;
73848: LD_ADDR_VAR 0 12
73852: PUSH
73853: CALL_OW 44
73857: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73858: LD_VAR 0 12
73862: PPUSH
73863: LD_VAR 0 8
73867: PPUSH
73868: LD_INT 0
73870: PPUSH
73871: CALL 75872 0 3
// end ;
73875: GO 73829
73877: POP
73878: POP
// if tigers then
73879: LD_VAR 0 2
73883: IFFALSE 73967
// for i = 1 to tigers do
73885: LD_ADDR_VAR 0 11
73889: PUSH
73890: DOUBLE
73891: LD_INT 1
73893: DEC
73894: ST_TO_ADDR
73895: LD_VAR 0 2
73899: PUSH
73900: FOR_TO
73901: IFFALSE 73965
// begin hc_class = class_tiger ;
73903: LD_ADDR_OWVAR 28
73907: PUSH
73908: LD_INT 14
73910: ST_TO_ADDR
// hc_gallery =  ;
73911: LD_ADDR_OWVAR 33
73915: PUSH
73916: LD_STRING 
73918: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
73919: LD_ADDR_OWVAR 35
73923: PUSH
73924: LD_INT 7
73926: NEG
73927: PPUSH
73928: LD_INT 7
73930: PPUSH
73931: CALL_OW 12
73935: ST_TO_ADDR
// animal := CreateHuman ;
73936: LD_ADDR_VAR 0 12
73940: PUSH
73941: CALL_OW 44
73945: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73946: LD_VAR 0 12
73950: PPUSH
73951: LD_VAR 0 8
73955: PPUSH
73956: LD_INT 0
73958: PPUSH
73959: CALL 75872 0 3
// end ;
73963: GO 73900
73965: POP
73966: POP
// if apemans then
73967: LD_VAR 0 3
73971: IFFALSE 74094
// for i = 1 to apemans do
73973: LD_ADDR_VAR 0 11
73977: PUSH
73978: DOUBLE
73979: LD_INT 1
73981: DEC
73982: ST_TO_ADDR
73983: LD_VAR 0 3
73987: PUSH
73988: FOR_TO
73989: IFFALSE 74092
// begin hc_class = class_apeman ;
73991: LD_ADDR_OWVAR 28
73995: PUSH
73996: LD_INT 12
73998: ST_TO_ADDR
// hc_gallery =  ;
73999: LD_ADDR_OWVAR 33
74003: PUSH
74004: LD_STRING 
74006: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
74007: LD_ADDR_OWVAR 35
74011: PUSH
74012: LD_INT 2
74014: NEG
74015: PPUSH
74016: LD_INT 2
74018: PPUSH
74019: CALL_OW 12
74023: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
74024: LD_ADDR_OWVAR 31
74028: PUSH
74029: LD_INT 1
74031: PPUSH
74032: LD_INT 3
74034: PPUSH
74035: CALL_OW 12
74039: PUSH
74040: LD_INT 1
74042: PPUSH
74043: LD_INT 3
74045: PPUSH
74046: CALL_OW 12
74050: PUSH
74051: LD_INT 0
74053: PUSH
74054: LD_INT 0
74056: PUSH
74057: EMPTY
74058: LIST
74059: LIST
74060: LIST
74061: LIST
74062: ST_TO_ADDR
// animal := CreateHuman ;
74063: LD_ADDR_VAR 0 12
74067: PUSH
74068: CALL_OW 44
74072: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74073: LD_VAR 0 12
74077: PPUSH
74078: LD_VAR 0 8
74082: PPUSH
74083: LD_INT 0
74085: PPUSH
74086: CALL 75872 0 3
// end ;
74090: GO 73988
74092: POP
74093: POP
// if enchidnas then
74094: LD_VAR 0 4
74098: IFFALSE 74165
// for i = 1 to enchidnas do
74100: LD_ADDR_VAR 0 11
74104: PUSH
74105: DOUBLE
74106: LD_INT 1
74108: DEC
74109: ST_TO_ADDR
74110: LD_VAR 0 4
74114: PUSH
74115: FOR_TO
74116: IFFALSE 74163
// begin hc_class = 13 ;
74118: LD_ADDR_OWVAR 28
74122: PUSH
74123: LD_INT 13
74125: ST_TO_ADDR
// hc_gallery =  ;
74126: LD_ADDR_OWVAR 33
74130: PUSH
74131: LD_STRING 
74133: ST_TO_ADDR
// animal := CreateHuman ;
74134: LD_ADDR_VAR 0 12
74138: PUSH
74139: CALL_OW 44
74143: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74144: LD_VAR 0 12
74148: PPUSH
74149: LD_VAR 0 8
74153: PPUSH
74154: LD_INT 0
74156: PPUSH
74157: CALL 75872 0 3
// end ;
74161: GO 74115
74163: POP
74164: POP
// if fishes then
74165: LD_VAR 0 7
74169: IFFALSE 74236
// for i = 1 to fishes do
74171: LD_ADDR_VAR 0 11
74175: PUSH
74176: DOUBLE
74177: LD_INT 1
74179: DEC
74180: ST_TO_ADDR
74181: LD_VAR 0 7
74185: PUSH
74186: FOR_TO
74187: IFFALSE 74234
// begin hc_class = 20 ;
74189: LD_ADDR_OWVAR 28
74193: PUSH
74194: LD_INT 20
74196: ST_TO_ADDR
// hc_gallery =  ;
74197: LD_ADDR_OWVAR 33
74201: PUSH
74202: LD_STRING 
74204: ST_TO_ADDR
// animal := CreateHuman ;
74205: LD_ADDR_VAR 0 12
74209: PUSH
74210: CALL_OW 44
74214: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
74215: LD_VAR 0 12
74219: PPUSH
74220: LD_VAR 0 9
74224: PPUSH
74225: LD_INT 0
74227: PPUSH
74228: CALL 75872 0 3
// end ;
74232: GO 74186
74234: POP
74235: POP
// end ;
74236: LD_VAR 0 10
74240: RET
// export function WantHeal ( sci , unit ) ; begin
74241: LD_INT 0
74243: PPUSH
// if GetTaskList ( sci ) > 0 then
74244: LD_VAR 0 1
74248: PPUSH
74249: CALL_OW 437
74253: PUSH
74254: LD_INT 0
74256: GREATER
74257: IFFALSE 74327
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
74259: LD_VAR 0 1
74263: PPUSH
74264: CALL_OW 437
74268: PUSH
74269: LD_INT 1
74271: ARRAY
74272: PUSH
74273: LD_INT 1
74275: ARRAY
74276: PUSH
74277: LD_STRING l
74279: EQUAL
74280: PUSH
74281: LD_VAR 0 1
74285: PPUSH
74286: CALL_OW 437
74290: PUSH
74291: LD_INT 1
74293: ARRAY
74294: PUSH
74295: LD_INT 4
74297: ARRAY
74298: PUSH
74299: LD_VAR 0 2
74303: EQUAL
74304: AND
74305: IFFALSE 74317
// result := true else
74307: LD_ADDR_VAR 0 3
74311: PUSH
74312: LD_INT 1
74314: ST_TO_ADDR
74315: GO 74325
// result := false ;
74317: LD_ADDR_VAR 0 3
74321: PUSH
74322: LD_INT 0
74324: ST_TO_ADDR
// end else
74325: GO 74335
// result := false ;
74327: LD_ADDR_VAR 0 3
74331: PUSH
74332: LD_INT 0
74334: ST_TO_ADDR
// end ;
74335: LD_VAR 0 3
74339: RET
// export function HealTarget ( sci ) ; begin
74340: LD_INT 0
74342: PPUSH
// if not sci then
74343: LD_VAR 0 1
74347: NOT
74348: IFFALSE 74352
// exit ;
74350: GO 74417
// result := 0 ;
74352: LD_ADDR_VAR 0 2
74356: PUSH
74357: LD_INT 0
74359: ST_TO_ADDR
// if GetTaskList ( sci ) then
74360: LD_VAR 0 1
74364: PPUSH
74365: CALL_OW 437
74369: IFFALSE 74417
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
74371: LD_VAR 0 1
74375: PPUSH
74376: CALL_OW 437
74380: PUSH
74381: LD_INT 1
74383: ARRAY
74384: PUSH
74385: LD_INT 1
74387: ARRAY
74388: PUSH
74389: LD_STRING l
74391: EQUAL
74392: IFFALSE 74417
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
74394: LD_ADDR_VAR 0 2
74398: PUSH
74399: LD_VAR 0 1
74403: PPUSH
74404: CALL_OW 437
74408: PUSH
74409: LD_INT 1
74411: ARRAY
74412: PUSH
74413: LD_INT 4
74415: ARRAY
74416: ST_TO_ADDR
// end ;
74417: LD_VAR 0 2
74421: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
74422: LD_INT 0
74424: PPUSH
74425: PPUSH
74426: PPUSH
74427: PPUSH
// if not base_units then
74428: LD_VAR 0 1
74432: NOT
74433: IFFALSE 74437
// exit ;
74435: GO 74524
// result := false ;
74437: LD_ADDR_VAR 0 2
74441: PUSH
74442: LD_INT 0
74444: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
74445: LD_ADDR_VAR 0 5
74449: PUSH
74450: LD_VAR 0 1
74454: PPUSH
74455: LD_INT 21
74457: PUSH
74458: LD_INT 3
74460: PUSH
74461: EMPTY
74462: LIST
74463: LIST
74464: PPUSH
74465: CALL_OW 72
74469: ST_TO_ADDR
// if not tmp then
74470: LD_VAR 0 5
74474: NOT
74475: IFFALSE 74479
// exit ;
74477: GO 74524
// for i in tmp do
74479: LD_ADDR_VAR 0 3
74483: PUSH
74484: LD_VAR 0 5
74488: PUSH
74489: FOR_IN
74490: IFFALSE 74522
// begin result := EnemyInRange ( i , 22 ) ;
74492: LD_ADDR_VAR 0 2
74496: PUSH
74497: LD_VAR 0 3
74501: PPUSH
74502: LD_INT 22
74504: PPUSH
74505: CALL 72210 0 2
74509: ST_TO_ADDR
// if result then
74510: LD_VAR 0 2
74514: IFFALSE 74520
// exit ;
74516: POP
74517: POP
74518: GO 74524
// end ;
74520: GO 74489
74522: POP
74523: POP
// end ;
74524: LD_VAR 0 2
74528: RET
// export function FilterByTag ( units , tag ) ; begin
74529: LD_INT 0
74531: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
74532: LD_ADDR_VAR 0 3
74536: PUSH
74537: LD_VAR 0 1
74541: PPUSH
74542: LD_INT 120
74544: PUSH
74545: LD_VAR 0 2
74549: PUSH
74550: EMPTY
74551: LIST
74552: LIST
74553: PPUSH
74554: CALL_OW 72
74558: ST_TO_ADDR
// end ;
74559: LD_VAR 0 3
74563: RET
// export function IsDriver ( un ) ; begin
74564: LD_INT 0
74566: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
74567: LD_ADDR_VAR 0 2
74571: PUSH
74572: LD_VAR 0 1
74576: PUSH
74577: LD_INT 55
74579: PUSH
74580: EMPTY
74581: LIST
74582: PPUSH
74583: CALL_OW 69
74587: IN
74588: ST_TO_ADDR
// end ;
74589: LD_VAR 0 2
74593: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
74594: LD_INT 0
74596: PPUSH
74597: PPUSH
// list := [ ] ;
74598: LD_ADDR_VAR 0 5
74602: PUSH
74603: EMPTY
74604: ST_TO_ADDR
// case d of 0 :
74605: LD_VAR 0 3
74609: PUSH
74610: LD_INT 0
74612: DOUBLE
74613: EQUAL
74614: IFTRUE 74618
74616: GO 74751
74618: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
74619: LD_ADDR_VAR 0 5
74623: PUSH
74624: LD_VAR 0 1
74628: PUSH
74629: LD_INT 4
74631: MINUS
74632: PUSH
74633: LD_VAR 0 2
74637: PUSH
74638: LD_INT 4
74640: MINUS
74641: PUSH
74642: LD_INT 2
74644: PUSH
74645: EMPTY
74646: LIST
74647: LIST
74648: LIST
74649: PUSH
74650: LD_VAR 0 1
74654: PUSH
74655: LD_INT 3
74657: MINUS
74658: PUSH
74659: LD_VAR 0 2
74663: PUSH
74664: LD_INT 1
74666: PUSH
74667: EMPTY
74668: LIST
74669: LIST
74670: LIST
74671: PUSH
74672: LD_VAR 0 1
74676: PUSH
74677: LD_INT 4
74679: PLUS
74680: PUSH
74681: LD_VAR 0 2
74685: PUSH
74686: LD_INT 4
74688: PUSH
74689: EMPTY
74690: LIST
74691: LIST
74692: LIST
74693: PUSH
74694: LD_VAR 0 1
74698: PUSH
74699: LD_INT 3
74701: PLUS
74702: PUSH
74703: LD_VAR 0 2
74707: PUSH
74708: LD_INT 3
74710: PLUS
74711: PUSH
74712: LD_INT 5
74714: PUSH
74715: EMPTY
74716: LIST
74717: LIST
74718: LIST
74719: PUSH
74720: LD_VAR 0 1
74724: PUSH
74725: LD_VAR 0 2
74729: PUSH
74730: LD_INT 4
74732: PLUS
74733: PUSH
74734: LD_INT 0
74736: PUSH
74737: EMPTY
74738: LIST
74739: LIST
74740: LIST
74741: PUSH
74742: EMPTY
74743: LIST
74744: LIST
74745: LIST
74746: LIST
74747: LIST
74748: ST_TO_ADDR
// end ; 1 :
74749: GO 75449
74751: LD_INT 1
74753: DOUBLE
74754: EQUAL
74755: IFTRUE 74759
74757: GO 74892
74759: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
74760: LD_ADDR_VAR 0 5
74764: PUSH
74765: LD_VAR 0 1
74769: PUSH
74770: LD_VAR 0 2
74774: PUSH
74775: LD_INT 4
74777: MINUS
74778: PUSH
74779: LD_INT 3
74781: PUSH
74782: EMPTY
74783: LIST
74784: LIST
74785: LIST
74786: PUSH
74787: LD_VAR 0 1
74791: PUSH
74792: LD_INT 3
74794: MINUS
74795: PUSH
74796: LD_VAR 0 2
74800: PUSH
74801: LD_INT 3
74803: MINUS
74804: PUSH
74805: LD_INT 2
74807: PUSH
74808: EMPTY
74809: LIST
74810: LIST
74811: LIST
74812: PUSH
74813: LD_VAR 0 1
74817: PUSH
74818: LD_INT 4
74820: MINUS
74821: PUSH
74822: LD_VAR 0 2
74826: PUSH
74827: LD_INT 1
74829: PUSH
74830: EMPTY
74831: LIST
74832: LIST
74833: LIST
74834: PUSH
74835: LD_VAR 0 1
74839: PUSH
74840: LD_VAR 0 2
74844: PUSH
74845: LD_INT 3
74847: PLUS
74848: PUSH
74849: LD_INT 0
74851: PUSH
74852: EMPTY
74853: LIST
74854: LIST
74855: LIST
74856: PUSH
74857: LD_VAR 0 1
74861: PUSH
74862: LD_INT 4
74864: PLUS
74865: PUSH
74866: LD_VAR 0 2
74870: PUSH
74871: LD_INT 4
74873: PLUS
74874: PUSH
74875: LD_INT 5
74877: PUSH
74878: EMPTY
74879: LIST
74880: LIST
74881: LIST
74882: PUSH
74883: EMPTY
74884: LIST
74885: LIST
74886: LIST
74887: LIST
74888: LIST
74889: ST_TO_ADDR
// end ; 2 :
74890: GO 75449
74892: LD_INT 2
74894: DOUBLE
74895: EQUAL
74896: IFTRUE 74900
74898: GO 75029
74900: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
74901: LD_ADDR_VAR 0 5
74905: PUSH
74906: LD_VAR 0 1
74910: PUSH
74911: LD_VAR 0 2
74915: PUSH
74916: LD_INT 3
74918: MINUS
74919: PUSH
74920: LD_INT 3
74922: PUSH
74923: EMPTY
74924: LIST
74925: LIST
74926: LIST
74927: PUSH
74928: LD_VAR 0 1
74932: PUSH
74933: LD_INT 4
74935: PLUS
74936: PUSH
74937: LD_VAR 0 2
74941: PUSH
74942: LD_INT 4
74944: PUSH
74945: EMPTY
74946: LIST
74947: LIST
74948: LIST
74949: PUSH
74950: LD_VAR 0 1
74954: PUSH
74955: LD_VAR 0 2
74959: PUSH
74960: LD_INT 4
74962: PLUS
74963: PUSH
74964: LD_INT 0
74966: PUSH
74967: EMPTY
74968: LIST
74969: LIST
74970: LIST
74971: PUSH
74972: LD_VAR 0 1
74976: PUSH
74977: LD_INT 3
74979: MINUS
74980: PUSH
74981: LD_VAR 0 2
74985: PUSH
74986: LD_INT 1
74988: PUSH
74989: EMPTY
74990: LIST
74991: LIST
74992: LIST
74993: PUSH
74994: LD_VAR 0 1
74998: PUSH
74999: LD_INT 4
75001: MINUS
75002: PUSH
75003: LD_VAR 0 2
75007: PUSH
75008: LD_INT 4
75010: MINUS
75011: PUSH
75012: LD_INT 2
75014: PUSH
75015: EMPTY
75016: LIST
75017: LIST
75018: LIST
75019: PUSH
75020: EMPTY
75021: LIST
75022: LIST
75023: LIST
75024: LIST
75025: LIST
75026: ST_TO_ADDR
// end ; 3 :
75027: GO 75449
75029: LD_INT 3
75031: DOUBLE
75032: EQUAL
75033: IFTRUE 75037
75035: GO 75170
75037: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
75038: LD_ADDR_VAR 0 5
75042: PUSH
75043: LD_VAR 0 1
75047: PUSH
75048: LD_INT 3
75050: PLUS
75051: PUSH
75052: LD_VAR 0 2
75056: PUSH
75057: LD_INT 4
75059: PUSH
75060: EMPTY
75061: LIST
75062: LIST
75063: LIST
75064: PUSH
75065: LD_VAR 0 1
75069: PUSH
75070: LD_INT 4
75072: PLUS
75073: PUSH
75074: LD_VAR 0 2
75078: PUSH
75079: LD_INT 4
75081: PLUS
75082: PUSH
75083: LD_INT 5
75085: PUSH
75086: EMPTY
75087: LIST
75088: LIST
75089: LIST
75090: PUSH
75091: LD_VAR 0 1
75095: PUSH
75096: LD_INT 4
75098: MINUS
75099: PUSH
75100: LD_VAR 0 2
75104: PUSH
75105: LD_INT 1
75107: PUSH
75108: EMPTY
75109: LIST
75110: LIST
75111: LIST
75112: PUSH
75113: LD_VAR 0 1
75117: PUSH
75118: LD_VAR 0 2
75122: PUSH
75123: LD_INT 4
75125: MINUS
75126: PUSH
75127: LD_INT 3
75129: PUSH
75130: EMPTY
75131: LIST
75132: LIST
75133: LIST
75134: PUSH
75135: LD_VAR 0 1
75139: PUSH
75140: LD_INT 3
75142: MINUS
75143: PUSH
75144: LD_VAR 0 2
75148: PUSH
75149: LD_INT 3
75151: MINUS
75152: PUSH
75153: LD_INT 2
75155: PUSH
75156: EMPTY
75157: LIST
75158: LIST
75159: LIST
75160: PUSH
75161: EMPTY
75162: LIST
75163: LIST
75164: LIST
75165: LIST
75166: LIST
75167: ST_TO_ADDR
// end ; 4 :
75168: GO 75449
75170: LD_INT 4
75172: DOUBLE
75173: EQUAL
75174: IFTRUE 75178
75176: GO 75311
75178: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
75179: LD_ADDR_VAR 0 5
75183: PUSH
75184: LD_VAR 0 1
75188: PUSH
75189: LD_VAR 0 2
75193: PUSH
75194: LD_INT 4
75196: PLUS
75197: PUSH
75198: LD_INT 0
75200: PUSH
75201: EMPTY
75202: LIST
75203: LIST
75204: LIST
75205: PUSH
75206: LD_VAR 0 1
75210: PUSH
75211: LD_INT 3
75213: PLUS
75214: PUSH
75215: LD_VAR 0 2
75219: PUSH
75220: LD_INT 3
75222: PLUS
75223: PUSH
75224: LD_INT 5
75226: PUSH
75227: EMPTY
75228: LIST
75229: LIST
75230: LIST
75231: PUSH
75232: LD_VAR 0 1
75236: PUSH
75237: LD_INT 4
75239: PLUS
75240: PUSH
75241: LD_VAR 0 2
75245: PUSH
75246: LD_INT 4
75248: PUSH
75249: EMPTY
75250: LIST
75251: LIST
75252: LIST
75253: PUSH
75254: LD_VAR 0 1
75258: PUSH
75259: LD_VAR 0 2
75263: PUSH
75264: LD_INT 3
75266: MINUS
75267: PUSH
75268: LD_INT 3
75270: PUSH
75271: EMPTY
75272: LIST
75273: LIST
75274: LIST
75275: PUSH
75276: LD_VAR 0 1
75280: PUSH
75281: LD_INT 4
75283: MINUS
75284: PUSH
75285: LD_VAR 0 2
75289: PUSH
75290: LD_INT 4
75292: MINUS
75293: PUSH
75294: LD_INT 2
75296: PUSH
75297: EMPTY
75298: LIST
75299: LIST
75300: LIST
75301: PUSH
75302: EMPTY
75303: LIST
75304: LIST
75305: LIST
75306: LIST
75307: LIST
75308: ST_TO_ADDR
// end ; 5 :
75309: GO 75449
75311: LD_INT 5
75313: DOUBLE
75314: EQUAL
75315: IFTRUE 75319
75317: GO 75448
75319: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
75320: LD_ADDR_VAR 0 5
75324: PUSH
75325: LD_VAR 0 1
75329: PUSH
75330: LD_INT 4
75332: MINUS
75333: PUSH
75334: LD_VAR 0 2
75338: PUSH
75339: LD_INT 1
75341: PUSH
75342: EMPTY
75343: LIST
75344: LIST
75345: LIST
75346: PUSH
75347: LD_VAR 0 1
75351: PUSH
75352: LD_VAR 0 2
75356: PUSH
75357: LD_INT 4
75359: MINUS
75360: PUSH
75361: LD_INT 3
75363: PUSH
75364: EMPTY
75365: LIST
75366: LIST
75367: LIST
75368: PUSH
75369: LD_VAR 0 1
75373: PUSH
75374: LD_INT 4
75376: PLUS
75377: PUSH
75378: LD_VAR 0 2
75382: PUSH
75383: LD_INT 4
75385: PLUS
75386: PUSH
75387: LD_INT 5
75389: PUSH
75390: EMPTY
75391: LIST
75392: LIST
75393: LIST
75394: PUSH
75395: LD_VAR 0 1
75399: PUSH
75400: LD_INT 3
75402: PLUS
75403: PUSH
75404: LD_VAR 0 2
75408: PUSH
75409: LD_INT 4
75411: PUSH
75412: EMPTY
75413: LIST
75414: LIST
75415: LIST
75416: PUSH
75417: LD_VAR 0 1
75421: PUSH
75422: LD_VAR 0 2
75426: PUSH
75427: LD_INT 3
75429: PLUS
75430: PUSH
75431: LD_INT 0
75433: PUSH
75434: EMPTY
75435: LIST
75436: LIST
75437: LIST
75438: PUSH
75439: EMPTY
75440: LIST
75441: LIST
75442: LIST
75443: LIST
75444: LIST
75445: ST_TO_ADDR
// end ; end ;
75446: GO 75449
75448: POP
// result := list ;
75449: LD_ADDR_VAR 0 4
75453: PUSH
75454: LD_VAR 0 5
75458: ST_TO_ADDR
// end ;
75459: LD_VAR 0 4
75463: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
75464: LD_INT 0
75466: PPUSH
75467: PPUSH
75468: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
75469: LD_VAR 0 1
75473: NOT
75474: PUSH
75475: LD_VAR 0 2
75479: PUSH
75480: LD_INT 1
75482: PUSH
75483: LD_INT 2
75485: PUSH
75486: LD_INT 3
75488: PUSH
75489: LD_INT 4
75491: PUSH
75492: EMPTY
75493: LIST
75494: LIST
75495: LIST
75496: LIST
75497: IN
75498: NOT
75499: OR
75500: IFFALSE 75504
// exit ;
75502: GO 75596
// tmp := [ ] ;
75504: LD_ADDR_VAR 0 5
75508: PUSH
75509: EMPTY
75510: ST_TO_ADDR
// for i in units do
75511: LD_ADDR_VAR 0 4
75515: PUSH
75516: LD_VAR 0 1
75520: PUSH
75521: FOR_IN
75522: IFFALSE 75565
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
75524: LD_ADDR_VAR 0 5
75528: PUSH
75529: LD_VAR 0 5
75533: PPUSH
75534: LD_VAR 0 5
75538: PUSH
75539: LD_INT 1
75541: PLUS
75542: PPUSH
75543: LD_VAR 0 4
75547: PPUSH
75548: LD_VAR 0 2
75552: PPUSH
75553: CALL_OW 259
75557: PPUSH
75558: CALL_OW 2
75562: ST_TO_ADDR
75563: GO 75521
75565: POP
75566: POP
// if not tmp then
75567: LD_VAR 0 5
75571: NOT
75572: IFFALSE 75576
// exit ;
75574: GO 75596
// result := SortListByListDesc ( units , tmp ) ;
75576: LD_ADDR_VAR 0 3
75580: PUSH
75581: LD_VAR 0 1
75585: PPUSH
75586: LD_VAR 0 5
75590: PPUSH
75591: CALL_OW 77
75595: ST_TO_ADDR
// end ;
75596: LD_VAR 0 3
75600: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
75601: LD_INT 0
75603: PPUSH
75604: PPUSH
75605: PPUSH
// result := false ;
75606: LD_ADDR_VAR 0 3
75610: PUSH
75611: LD_INT 0
75613: ST_TO_ADDR
// x := GetX ( building ) ;
75614: LD_ADDR_VAR 0 4
75618: PUSH
75619: LD_VAR 0 2
75623: PPUSH
75624: CALL_OW 250
75628: ST_TO_ADDR
// y := GetY ( building ) ;
75629: LD_ADDR_VAR 0 5
75633: PUSH
75634: LD_VAR 0 2
75638: PPUSH
75639: CALL_OW 251
75643: ST_TO_ADDR
// if not building or not x or not y then
75644: LD_VAR 0 2
75648: NOT
75649: PUSH
75650: LD_VAR 0 4
75654: NOT
75655: OR
75656: PUSH
75657: LD_VAR 0 5
75661: NOT
75662: OR
75663: IFFALSE 75667
// exit ;
75665: GO 75759
// if GetTaskList ( unit ) then
75667: LD_VAR 0 1
75671: PPUSH
75672: CALL_OW 437
75676: IFFALSE 75759
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75678: LD_STRING e
75680: PUSH
75681: LD_VAR 0 1
75685: PPUSH
75686: CALL_OW 437
75690: PUSH
75691: LD_INT 1
75693: ARRAY
75694: PUSH
75695: LD_INT 1
75697: ARRAY
75698: EQUAL
75699: PUSH
75700: LD_VAR 0 4
75704: PUSH
75705: LD_VAR 0 1
75709: PPUSH
75710: CALL_OW 437
75714: PUSH
75715: LD_INT 1
75717: ARRAY
75718: PUSH
75719: LD_INT 2
75721: ARRAY
75722: EQUAL
75723: AND
75724: PUSH
75725: LD_VAR 0 5
75729: PUSH
75730: LD_VAR 0 1
75734: PPUSH
75735: CALL_OW 437
75739: PUSH
75740: LD_INT 1
75742: ARRAY
75743: PUSH
75744: LD_INT 3
75746: ARRAY
75747: EQUAL
75748: AND
75749: IFFALSE 75759
// result := true end ;
75751: LD_ADDR_VAR 0 3
75755: PUSH
75756: LD_INT 1
75758: ST_TO_ADDR
// end ;
75759: LD_VAR 0 3
75763: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
75764: LD_INT 0
75766: PPUSH
// result := false ;
75767: LD_ADDR_VAR 0 4
75771: PUSH
75772: LD_INT 0
75774: ST_TO_ADDR
// if GetTaskList ( unit ) then
75775: LD_VAR 0 1
75779: PPUSH
75780: CALL_OW 437
75784: IFFALSE 75867
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75786: LD_STRING M
75788: PUSH
75789: LD_VAR 0 1
75793: PPUSH
75794: CALL_OW 437
75798: PUSH
75799: LD_INT 1
75801: ARRAY
75802: PUSH
75803: LD_INT 1
75805: ARRAY
75806: EQUAL
75807: PUSH
75808: LD_VAR 0 2
75812: PUSH
75813: LD_VAR 0 1
75817: PPUSH
75818: CALL_OW 437
75822: PUSH
75823: LD_INT 1
75825: ARRAY
75826: PUSH
75827: LD_INT 2
75829: ARRAY
75830: EQUAL
75831: AND
75832: PUSH
75833: LD_VAR 0 3
75837: PUSH
75838: LD_VAR 0 1
75842: PPUSH
75843: CALL_OW 437
75847: PUSH
75848: LD_INT 1
75850: ARRAY
75851: PUSH
75852: LD_INT 3
75854: ARRAY
75855: EQUAL
75856: AND
75857: IFFALSE 75867
// result := true ;
75859: LD_ADDR_VAR 0 4
75863: PUSH
75864: LD_INT 1
75866: ST_TO_ADDR
// end ; end ;
75867: LD_VAR 0 4
75871: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
75872: LD_INT 0
75874: PPUSH
75875: PPUSH
75876: PPUSH
75877: PPUSH
// if not unit or not area then
75878: LD_VAR 0 1
75882: NOT
75883: PUSH
75884: LD_VAR 0 2
75888: NOT
75889: OR
75890: IFFALSE 75894
// exit ;
75892: GO 76058
// tmp := AreaToList ( area , i ) ;
75894: LD_ADDR_VAR 0 6
75898: PUSH
75899: LD_VAR 0 2
75903: PPUSH
75904: LD_VAR 0 5
75908: PPUSH
75909: CALL_OW 517
75913: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
75914: LD_ADDR_VAR 0 5
75918: PUSH
75919: DOUBLE
75920: LD_INT 1
75922: DEC
75923: ST_TO_ADDR
75924: LD_VAR 0 6
75928: PUSH
75929: LD_INT 1
75931: ARRAY
75932: PUSH
75933: FOR_TO
75934: IFFALSE 76056
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
75936: LD_ADDR_VAR 0 7
75940: PUSH
75941: LD_VAR 0 6
75945: PUSH
75946: LD_INT 1
75948: ARRAY
75949: PUSH
75950: LD_VAR 0 5
75954: ARRAY
75955: PUSH
75956: LD_VAR 0 6
75960: PUSH
75961: LD_INT 2
75963: ARRAY
75964: PUSH
75965: LD_VAR 0 5
75969: ARRAY
75970: PUSH
75971: EMPTY
75972: LIST
75973: LIST
75974: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
75975: LD_VAR 0 7
75979: PUSH
75980: LD_INT 1
75982: ARRAY
75983: PPUSH
75984: LD_VAR 0 7
75988: PUSH
75989: LD_INT 2
75991: ARRAY
75992: PPUSH
75993: CALL_OW 428
75997: PUSH
75998: LD_INT 0
76000: EQUAL
76001: IFFALSE 76054
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
76003: LD_VAR 0 1
76007: PPUSH
76008: LD_VAR 0 7
76012: PUSH
76013: LD_INT 1
76015: ARRAY
76016: PPUSH
76017: LD_VAR 0 7
76021: PUSH
76022: LD_INT 2
76024: ARRAY
76025: PPUSH
76026: LD_VAR 0 3
76030: PPUSH
76031: CALL_OW 48
// result := IsPlaced ( unit ) ;
76035: LD_ADDR_VAR 0 4
76039: PUSH
76040: LD_VAR 0 1
76044: PPUSH
76045: CALL_OW 305
76049: ST_TO_ADDR
// exit ;
76050: POP
76051: POP
76052: GO 76058
// end ; end ;
76054: GO 75933
76056: POP
76057: POP
// end ;
76058: LD_VAR 0 4
76062: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
76063: LD_INT 0
76065: PPUSH
76066: PPUSH
76067: PPUSH
// if not side or side > 8 then
76068: LD_VAR 0 1
76072: NOT
76073: PUSH
76074: LD_VAR 0 1
76078: PUSH
76079: LD_INT 8
76081: GREATER
76082: OR
76083: IFFALSE 76087
// exit ;
76085: GO 76274
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
76087: LD_ADDR_VAR 0 4
76091: PUSH
76092: LD_INT 22
76094: PUSH
76095: LD_VAR 0 1
76099: PUSH
76100: EMPTY
76101: LIST
76102: LIST
76103: PUSH
76104: LD_INT 21
76106: PUSH
76107: LD_INT 3
76109: PUSH
76110: EMPTY
76111: LIST
76112: LIST
76113: PUSH
76114: EMPTY
76115: LIST
76116: LIST
76117: PPUSH
76118: CALL_OW 69
76122: ST_TO_ADDR
// if not tmp then
76123: LD_VAR 0 4
76127: NOT
76128: IFFALSE 76132
// exit ;
76130: GO 76274
// enable_addtolog := true ;
76132: LD_ADDR_OWVAR 81
76136: PUSH
76137: LD_INT 1
76139: ST_TO_ADDR
// AddToLog ( [ ) ;
76140: LD_STRING [
76142: PPUSH
76143: CALL_OW 561
// for i in tmp do
76147: LD_ADDR_VAR 0 3
76151: PUSH
76152: LD_VAR 0 4
76156: PUSH
76157: FOR_IN
76158: IFFALSE 76265
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
76160: LD_STRING [
76162: PUSH
76163: LD_VAR 0 3
76167: PPUSH
76168: CALL_OW 266
76172: STR
76173: PUSH
76174: LD_STRING , 
76176: STR
76177: PUSH
76178: LD_VAR 0 3
76182: PPUSH
76183: CALL_OW 250
76187: STR
76188: PUSH
76189: LD_STRING , 
76191: STR
76192: PUSH
76193: LD_VAR 0 3
76197: PPUSH
76198: CALL_OW 251
76202: STR
76203: PUSH
76204: LD_STRING , 
76206: STR
76207: PUSH
76208: LD_VAR 0 3
76212: PPUSH
76213: CALL_OW 254
76217: STR
76218: PUSH
76219: LD_STRING , 
76221: STR
76222: PUSH
76223: LD_VAR 0 3
76227: PPUSH
76228: LD_INT 1
76230: PPUSH
76231: CALL_OW 268
76235: STR
76236: PUSH
76237: LD_STRING , 
76239: STR
76240: PUSH
76241: LD_VAR 0 3
76245: PPUSH
76246: LD_INT 2
76248: PPUSH
76249: CALL_OW 268
76253: STR
76254: PUSH
76255: LD_STRING ],
76257: STR
76258: PPUSH
76259: CALL_OW 561
// end ;
76263: GO 76157
76265: POP
76266: POP
// AddToLog ( ]; ) ;
76267: LD_STRING ];
76269: PPUSH
76270: CALL_OW 561
// end ;
76274: LD_VAR 0 2
76278: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
76279: LD_INT 0
76281: PPUSH
76282: PPUSH
76283: PPUSH
76284: PPUSH
76285: PPUSH
// if not area or not rate or not max then
76286: LD_VAR 0 1
76290: NOT
76291: PUSH
76292: LD_VAR 0 2
76296: NOT
76297: OR
76298: PUSH
76299: LD_VAR 0 4
76303: NOT
76304: OR
76305: IFFALSE 76309
// exit ;
76307: GO 76498
// while 1 do
76309: LD_INT 1
76311: IFFALSE 76498
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
76313: LD_ADDR_VAR 0 9
76317: PUSH
76318: LD_VAR 0 1
76322: PPUSH
76323: LD_INT 1
76325: PPUSH
76326: CALL_OW 287
76330: PUSH
76331: LD_INT 10
76333: MUL
76334: ST_TO_ADDR
// r := rate / 10 ;
76335: LD_ADDR_VAR 0 7
76339: PUSH
76340: LD_VAR 0 2
76344: PUSH
76345: LD_INT 10
76347: DIVREAL
76348: ST_TO_ADDR
// time := 1 1$00 ;
76349: LD_ADDR_VAR 0 8
76353: PUSH
76354: LD_INT 2100
76356: ST_TO_ADDR
// if amount < min then
76357: LD_VAR 0 9
76361: PUSH
76362: LD_VAR 0 3
76366: LESS
76367: IFFALSE 76385
// r := r * 2 else
76369: LD_ADDR_VAR 0 7
76373: PUSH
76374: LD_VAR 0 7
76378: PUSH
76379: LD_INT 2
76381: MUL
76382: ST_TO_ADDR
76383: GO 76411
// if amount > max then
76385: LD_VAR 0 9
76389: PUSH
76390: LD_VAR 0 4
76394: GREATER
76395: IFFALSE 76411
// r := r / 2 ;
76397: LD_ADDR_VAR 0 7
76401: PUSH
76402: LD_VAR 0 7
76406: PUSH
76407: LD_INT 2
76409: DIVREAL
76410: ST_TO_ADDR
// time := time / r ;
76411: LD_ADDR_VAR 0 8
76415: PUSH
76416: LD_VAR 0 8
76420: PUSH
76421: LD_VAR 0 7
76425: DIVREAL
76426: ST_TO_ADDR
// if time < 0 then
76427: LD_VAR 0 8
76431: PUSH
76432: LD_INT 0
76434: LESS
76435: IFFALSE 76452
// time := time * - 1 ;
76437: LD_ADDR_VAR 0 8
76441: PUSH
76442: LD_VAR 0 8
76446: PUSH
76447: LD_INT 1
76449: NEG
76450: MUL
76451: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
76452: LD_VAR 0 8
76456: PUSH
76457: LD_INT 35
76459: PPUSH
76460: LD_INT 875
76462: PPUSH
76463: CALL_OW 12
76467: PLUS
76468: PPUSH
76469: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
76473: LD_INT 1
76475: PPUSH
76476: LD_INT 5
76478: PPUSH
76479: CALL_OW 12
76483: PPUSH
76484: LD_VAR 0 1
76488: PPUSH
76489: LD_INT 1
76491: PPUSH
76492: CALL_OW 55
// end ;
76496: GO 76309
// end ;
76498: LD_VAR 0 5
76502: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
76503: LD_INT 0
76505: PPUSH
76506: PPUSH
76507: PPUSH
76508: PPUSH
76509: PPUSH
76510: PPUSH
76511: PPUSH
76512: PPUSH
// if not turrets or not factories then
76513: LD_VAR 0 1
76517: NOT
76518: PUSH
76519: LD_VAR 0 2
76523: NOT
76524: OR
76525: IFFALSE 76529
// exit ;
76527: GO 76836
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
76529: LD_ADDR_VAR 0 10
76533: PUSH
76534: LD_INT 5
76536: PUSH
76537: LD_INT 6
76539: PUSH
76540: EMPTY
76541: LIST
76542: LIST
76543: PUSH
76544: LD_INT 2
76546: PUSH
76547: LD_INT 4
76549: PUSH
76550: EMPTY
76551: LIST
76552: LIST
76553: PUSH
76554: LD_INT 3
76556: PUSH
76557: LD_INT 5
76559: PUSH
76560: EMPTY
76561: LIST
76562: LIST
76563: PUSH
76564: EMPTY
76565: LIST
76566: LIST
76567: LIST
76568: PUSH
76569: LD_INT 24
76571: PUSH
76572: LD_INT 25
76574: PUSH
76575: EMPTY
76576: LIST
76577: LIST
76578: PUSH
76579: LD_INT 23
76581: PUSH
76582: LD_INT 27
76584: PUSH
76585: EMPTY
76586: LIST
76587: LIST
76588: PUSH
76589: EMPTY
76590: LIST
76591: LIST
76592: PUSH
76593: LD_INT 42
76595: PUSH
76596: LD_INT 43
76598: PUSH
76599: EMPTY
76600: LIST
76601: LIST
76602: PUSH
76603: LD_INT 44
76605: PUSH
76606: LD_INT 46
76608: PUSH
76609: EMPTY
76610: LIST
76611: LIST
76612: PUSH
76613: LD_INT 45
76615: PUSH
76616: LD_INT 47
76618: PUSH
76619: EMPTY
76620: LIST
76621: LIST
76622: PUSH
76623: EMPTY
76624: LIST
76625: LIST
76626: LIST
76627: PUSH
76628: EMPTY
76629: LIST
76630: LIST
76631: LIST
76632: ST_TO_ADDR
// result := [ ] ;
76633: LD_ADDR_VAR 0 3
76637: PUSH
76638: EMPTY
76639: ST_TO_ADDR
// for i in turrets do
76640: LD_ADDR_VAR 0 4
76644: PUSH
76645: LD_VAR 0 1
76649: PUSH
76650: FOR_IN
76651: IFFALSE 76834
// begin nat := GetNation ( i ) ;
76653: LD_ADDR_VAR 0 7
76657: PUSH
76658: LD_VAR 0 4
76662: PPUSH
76663: CALL_OW 248
76667: ST_TO_ADDR
// weapon := 0 ;
76668: LD_ADDR_VAR 0 8
76672: PUSH
76673: LD_INT 0
76675: ST_TO_ADDR
// if not nat then
76676: LD_VAR 0 7
76680: NOT
76681: IFFALSE 76685
// continue ;
76683: GO 76650
// for j in list [ nat ] do
76685: LD_ADDR_VAR 0 5
76689: PUSH
76690: LD_VAR 0 10
76694: PUSH
76695: LD_VAR 0 7
76699: ARRAY
76700: PUSH
76701: FOR_IN
76702: IFFALSE 76743
// if GetBWeapon ( i ) = j [ 1 ] then
76704: LD_VAR 0 4
76708: PPUSH
76709: CALL_OW 269
76713: PUSH
76714: LD_VAR 0 5
76718: PUSH
76719: LD_INT 1
76721: ARRAY
76722: EQUAL
76723: IFFALSE 76741
// begin weapon := j [ 2 ] ;
76725: LD_ADDR_VAR 0 8
76729: PUSH
76730: LD_VAR 0 5
76734: PUSH
76735: LD_INT 2
76737: ARRAY
76738: ST_TO_ADDR
// break ;
76739: GO 76743
// end ;
76741: GO 76701
76743: POP
76744: POP
// if not weapon then
76745: LD_VAR 0 8
76749: NOT
76750: IFFALSE 76754
// continue ;
76752: GO 76650
// for k in factories do
76754: LD_ADDR_VAR 0 6
76758: PUSH
76759: LD_VAR 0 2
76763: PUSH
76764: FOR_IN
76765: IFFALSE 76830
// begin weapons := AvailableWeaponList ( k ) ;
76767: LD_ADDR_VAR 0 9
76771: PUSH
76772: LD_VAR 0 6
76776: PPUSH
76777: CALL_OW 478
76781: ST_TO_ADDR
// if not weapons then
76782: LD_VAR 0 9
76786: NOT
76787: IFFALSE 76791
// continue ;
76789: GO 76764
// if weapon in weapons then
76791: LD_VAR 0 8
76795: PUSH
76796: LD_VAR 0 9
76800: IN
76801: IFFALSE 76828
// begin result := [ i , weapon ] ;
76803: LD_ADDR_VAR 0 3
76807: PUSH
76808: LD_VAR 0 4
76812: PUSH
76813: LD_VAR 0 8
76817: PUSH
76818: EMPTY
76819: LIST
76820: LIST
76821: ST_TO_ADDR
// exit ;
76822: POP
76823: POP
76824: POP
76825: POP
76826: GO 76836
// end ; end ;
76828: GO 76764
76830: POP
76831: POP
// end ;
76832: GO 76650
76834: POP
76835: POP
// end ;
76836: LD_VAR 0 3
76840: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
76841: LD_INT 0
76843: PPUSH
// if not side or side > 8 then
76844: LD_VAR 0 3
76848: NOT
76849: PUSH
76850: LD_VAR 0 3
76854: PUSH
76855: LD_INT 8
76857: GREATER
76858: OR
76859: IFFALSE 76863
// exit ;
76861: GO 76922
// if not range then
76863: LD_VAR 0 4
76867: NOT
76868: IFFALSE 76879
// range := - 12 ;
76870: LD_ADDR_VAR 0 4
76874: PUSH
76875: LD_INT 12
76877: NEG
76878: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
76879: LD_VAR 0 1
76883: PPUSH
76884: LD_VAR 0 2
76888: PPUSH
76889: LD_VAR 0 3
76893: PPUSH
76894: LD_VAR 0 4
76898: PPUSH
76899: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
76903: LD_VAR 0 1
76907: PPUSH
76908: LD_VAR 0 2
76912: PPUSH
76913: LD_VAR 0 3
76917: PPUSH
76918: CALL_OW 331
// end ;
76922: LD_VAR 0 5
76926: RET
// export function Video ( mode ) ; begin
76927: LD_INT 0
76929: PPUSH
// ingame_video = mode ;
76930: LD_ADDR_OWVAR 52
76934: PUSH
76935: LD_VAR 0 1
76939: ST_TO_ADDR
// interface_hidden = mode ;
76940: LD_ADDR_OWVAR 54
76944: PUSH
76945: LD_VAR 0 1
76949: ST_TO_ADDR
// end ;
76950: LD_VAR 0 2
76954: RET
// export function Join ( array , element ) ; begin
76955: LD_INT 0
76957: PPUSH
// result := Replace ( array , array + 1 , element ) ;
76958: LD_ADDR_VAR 0 3
76962: PUSH
76963: LD_VAR 0 1
76967: PPUSH
76968: LD_VAR 0 1
76972: PUSH
76973: LD_INT 1
76975: PLUS
76976: PPUSH
76977: LD_VAR 0 2
76981: PPUSH
76982: CALL_OW 1
76986: ST_TO_ADDR
// end ;
76987: LD_VAR 0 3
76991: RET
// export function JoinUnion ( array , element ) ; begin
76992: LD_INT 0
76994: PPUSH
// result := array union element ;
76995: LD_ADDR_VAR 0 3
76999: PUSH
77000: LD_VAR 0 1
77004: PUSH
77005: LD_VAR 0 2
77009: UNION
77010: ST_TO_ADDR
// end ;
77011: LD_VAR 0 3
77015: RET
// export function GetBehemoths ( side ) ; begin
77016: LD_INT 0
77018: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
77019: LD_ADDR_VAR 0 2
77023: PUSH
77024: LD_INT 22
77026: PUSH
77027: LD_VAR 0 1
77031: PUSH
77032: EMPTY
77033: LIST
77034: LIST
77035: PUSH
77036: LD_INT 31
77038: PUSH
77039: LD_INT 25
77041: PUSH
77042: EMPTY
77043: LIST
77044: LIST
77045: PUSH
77046: EMPTY
77047: LIST
77048: LIST
77049: PPUSH
77050: CALL_OW 69
77054: ST_TO_ADDR
// end ;
77055: LD_VAR 0 2
77059: RET
// export function Shuffle ( array ) ; var i , index ; begin
77060: LD_INT 0
77062: PPUSH
77063: PPUSH
77064: PPUSH
// result := [ ] ;
77065: LD_ADDR_VAR 0 2
77069: PUSH
77070: EMPTY
77071: ST_TO_ADDR
// if not array then
77072: LD_VAR 0 1
77076: NOT
77077: IFFALSE 77081
// exit ;
77079: GO 77180
// Randomize ;
77081: CALL_OW 10
// for i = array downto 1 do
77085: LD_ADDR_VAR 0 3
77089: PUSH
77090: DOUBLE
77091: LD_VAR 0 1
77095: INC
77096: ST_TO_ADDR
77097: LD_INT 1
77099: PUSH
77100: FOR_DOWNTO
77101: IFFALSE 77178
// begin index := rand ( 1 , array ) ;
77103: LD_ADDR_VAR 0 4
77107: PUSH
77108: LD_INT 1
77110: PPUSH
77111: LD_VAR 0 1
77115: PPUSH
77116: CALL_OW 12
77120: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
77121: LD_ADDR_VAR 0 2
77125: PUSH
77126: LD_VAR 0 2
77130: PPUSH
77131: LD_VAR 0 2
77135: PUSH
77136: LD_INT 1
77138: PLUS
77139: PPUSH
77140: LD_VAR 0 1
77144: PUSH
77145: LD_VAR 0 4
77149: ARRAY
77150: PPUSH
77151: CALL_OW 2
77155: ST_TO_ADDR
// array := Delete ( array , index ) ;
77156: LD_ADDR_VAR 0 1
77160: PUSH
77161: LD_VAR 0 1
77165: PPUSH
77166: LD_VAR 0 4
77170: PPUSH
77171: CALL_OW 3
77175: ST_TO_ADDR
// end ;
77176: GO 77100
77178: POP
77179: POP
// end ;
77180: LD_VAR 0 2
77184: RET
// export function GetBaseMaterials ( base ) ; begin
77185: LD_INT 0
77187: PPUSH
// result := [ 0 , 0 , 0 ] ;
77188: LD_ADDR_VAR 0 2
77192: PUSH
77193: LD_INT 0
77195: PUSH
77196: LD_INT 0
77198: PUSH
77199: LD_INT 0
77201: PUSH
77202: EMPTY
77203: LIST
77204: LIST
77205: LIST
77206: ST_TO_ADDR
// if not base then
77207: LD_VAR 0 1
77211: NOT
77212: IFFALSE 77216
// exit ;
77214: GO 77265
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
77216: LD_ADDR_VAR 0 2
77220: PUSH
77221: LD_VAR 0 1
77225: PPUSH
77226: LD_INT 1
77228: PPUSH
77229: CALL_OW 275
77233: PUSH
77234: LD_VAR 0 1
77238: PPUSH
77239: LD_INT 2
77241: PPUSH
77242: CALL_OW 275
77246: PUSH
77247: LD_VAR 0 1
77251: PPUSH
77252: LD_INT 3
77254: PPUSH
77255: CALL_OW 275
77259: PUSH
77260: EMPTY
77261: LIST
77262: LIST
77263: LIST
77264: ST_TO_ADDR
// end ;
77265: LD_VAR 0 2
77269: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
77270: LD_INT 0
77272: PPUSH
77273: PPUSH
// result := array ;
77274: LD_ADDR_VAR 0 3
77278: PUSH
77279: LD_VAR 0 1
77283: ST_TO_ADDR
// if size >= result then
77284: LD_VAR 0 2
77288: PUSH
77289: LD_VAR 0 3
77293: GREATEREQUAL
77294: IFFALSE 77298
// exit ;
77296: GO 77348
// if size then
77298: LD_VAR 0 2
77302: IFFALSE 77348
// for i := array downto size do
77304: LD_ADDR_VAR 0 4
77308: PUSH
77309: DOUBLE
77310: LD_VAR 0 1
77314: INC
77315: ST_TO_ADDR
77316: LD_VAR 0 2
77320: PUSH
77321: FOR_DOWNTO
77322: IFFALSE 77346
// result := Delete ( result , result ) ;
77324: LD_ADDR_VAR 0 3
77328: PUSH
77329: LD_VAR 0 3
77333: PPUSH
77334: LD_VAR 0 3
77338: PPUSH
77339: CALL_OW 3
77343: ST_TO_ADDR
77344: GO 77321
77346: POP
77347: POP
// end ;
77348: LD_VAR 0 3
77352: RET
// export function ComExit ( unit ) ; var tmp ; begin
77353: LD_INT 0
77355: PPUSH
77356: PPUSH
// if not IsInUnit ( unit ) then
77357: LD_VAR 0 1
77361: PPUSH
77362: CALL_OW 310
77366: NOT
77367: IFFALSE 77371
// exit ;
77369: GO 77431
// tmp := IsInUnit ( unit ) ;
77371: LD_ADDR_VAR 0 3
77375: PUSH
77376: LD_VAR 0 1
77380: PPUSH
77381: CALL_OW 310
77385: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
77386: LD_VAR 0 3
77390: PPUSH
77391: CALL_OW 247
77395: PUSH
77396: LD_INT 2
77398: EQUAL
77399: IFFALSE 77412
// ComExitVehicle ( unit ) else
77401: LD_VAR 0 1
77405: PPUSH
77406: CALL_OW 121
77410: GO 77421
// ComExitBuilding ( unit ) ;
77412: LD_VAR 0 1
77416: PPUSH
77417: CALL_OW 122
// result := tmp ;
77421: LD_ADDR_VAR 0 2
77425: PUSH
77426: LD_VAR 0 3
77430: ST_TO_ADDR
// end ;
77431: LD_VAR 0 2
77435: RET
// export function ComExitAll ( units ) ; var i ; begin
77436: LD_INT 0
77438: PPUSH
77439: PPUSH
// if not units then
77440: LD_VAR 0 1
77444: NOT
77445: IFFALSE 77449
// exit ;
77447: GO 77475
// for i in units do
77449: LD_ADDR_VAR 0 3
77453: PUSH
77454: LD_VAR 0 1
77458: PUSH
77459: FOR_IN
77460: IFFALSE 77473
// ComExit ( i ) ;
77462: LD_VAR 0 3
77466: PPUSH
77467: CALL 77353 0 1
77471: GO 77459
77473: POP
77474: POP
// end ;
77475: LD_VAR 0 2
77479: RET
// export function ResetHc ; begin
77480: LD_INT 0
77482: PPUSH
// InitHc ;
77483: CALL_OW 19
// hc_importance := 0 ;
77487: LD_ADDR_OWVAR 32
77491: PUSH
77492: LD_INT 0
77494: ST_TO_ADDR
// end ;
77495: LD_VAR 0 1
77499: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
77500: LD_INT 0
77502: PPUSH
77503: PPUSH
77504: PPUSH
// _x := ( x1 + x2 ) div 2 ;
77505: LD_ADDR_VAR 0 6
77509: PUSH
77510: LD_VAR 0 1
77514: PUSH
77515: LD_VAR 0 3
77519: PLUS
77520: PUSH
77521: LD_INT 2
77523: DIV
77524: ST_TO_ADDR
// if _x < 0 then
77525: LD_VAR 0 6
77529: PUSH
77530: LD_INT 0
77532: LESS
77533: IFFALSE 77550
// _x := _x * - 1 ;
77535: LD_ADDR_VAR 0 6
77539: PUSH
77540: LD_VAR 0 6
77544: PUSH
77545: LD_INT 1
77547: NEG
77548: MUL
77549: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
77550: LD_ADDR_VAR 0 7
77554: PUSH
77555: LD_VAR 0 2
77559: PUSH
77560: LD_VAR 0 4
77564: PLUS
77565: PUSH
77566: LD_INT 2
77568: DIV
77569: ST_TO_ADDR
// if _y < 0 then
77570: LD_VAR 0 7
77574: PUSH
77575: LD_INT 0
77577: LESS
77578: IFFALSE 77595
// _y := _y * - 1 ;
77580: LD_ADDR_VAR 0 7
77584: PUSH
77585: LD_VAR 0 7
77589: PUSH
77590: LD_INT 1
77592: NEG
77593: MUL
77594: ST_TO_ADDR
// result := [ _x , _y ] ;
77595: LD_ADDR_VAR 0 5
77599: PUSH
77600: LD_VAR 0 6
77604: PUSH
77605: LD_VAR 0 7
77609: PUSH
77610: EMPTY
77611: LIST
77612: LIST
77613: ST_TO_ADDR
// end ;
77614: LD_VAR 0 5
77618: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
77619: LD_INT 0
77621: PPUSH
77622: PPUSH
77623: PPUSH
77624: PPUSH
// task := GetTaskList ( unit ) ;
77625: LD_ADDR_VAR 0 7
77629: PUSH
77630: LD_VAR 0 1
77634: PPUSH
77635: CALL_OW 437
77639: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
77640: LD_VAR 0 7
77644: NOT
77645: PUSH
77646: LD_VAR 0 1
77650: PPUSH
77651: LD_VAR 0 2
77655: PPUSH
77656: CALL_OW 308
77660: NOT
77661: AND
77662: IFFALSE 77666
// exit ;
77664: GO 77784
// if IsInArea ( unit , area ) then
77666: LD_VAR 0 1
77670: PPUSH
77671: LD_VAR 0 2
77675: PPUSH
77676: CALL_OW 308
77680: IFFALSE 77698
// begin ComMoveToArea ( unit , goAway ) ;
77682: LD_VAR 0 1
77686: PPUSH
77687: LD_VAR 0 3
77691: PPUSH
77692: CALL_OW 113
// exit ;
77696: GO 77784
// end ; if task [ 1 ] [ 1 ] <> M then
77698: LD_VAR 0 7
77702: PUSH
77703: LD_INT 1
77705: ARRAY
77706: PUSH
77707: LD_INT 1
77709: ARRAY
77710: PUSH
77711: LD_STRING M
77713: NONEQUAL
77714: IFFALSE 77718
// exit ;
77716: GO 77784
// x := task [ 1 ] [ 2 ] ;
77718: LD_ADDR_VAR 0 5
77722: PUSH
77723: LD_VAR 0 7
77727: PUSH
77728: LD_INT 1
77730: ARRAY
77731: PUSH
77732: LD_INT 2
77734: ARRAY
77735: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
77736: LD_ADDR_VAR 0 6
77740: PUSH
77741: LD_VAR 0 7
77745: PUSH
77746: LD_INT 1
77748: ARRAY
77749: PUSH
77750: LD_INT 3
77752: ARRAY
77753: ST_TO_ADDR
// if InArea ( x , y , area ) then
77754: LD_VAR 0 5
77758: PPUSH
77759: LD_VAR 0 6
77763: PPUSH
77764: LD_VAR 0 2
77768: PPUSH
77769: CALL_OW 309
77773: IFFALSE 77784
// ComStop ( unit ) ;
77775: LD_VAR 0 1
77779: PPUSH
77780: CALL_OW 141
// end ;
77784: LD_VAR 0 4
77788: RET
// export function Abs ( value ) ; begin
77789: LD_INT 0
77791: PPUSH
// result := value ;
77792: LD_ADDR_VAR 0 2
77796: PUSH
77797: LD_VAR 0 1
77801: ST_TO_ADDR
// if value < 0 then
77802: LD_VAR 0 1
77806: PUSH
77807: LD_INT 0
77809: LESS
77810: IFFALSE 77827
// result := value * - 1 ;
77812: LD_ADDR_VAR 0 2
77816: PUSH
77817: LD_VAR 0 1
77821: PUSH
77822: LD_INT 1
77824: NEG
77825: MUL
77826: ST_TO_ADDR
// end ;
77827: LD_VAR 0 2
77831: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
77832: LD_INT 0
77834: PPUSH
77835: PPUSH
77836: PPUSH
77837: PPUSH
77838: PPUSH
77839: PPUSH
77840: PPUSH
77841: PPUSH
// if not unit or not building then
77842: LD_VAR 0 1
77846: NOT
77847: PUSH
77848: LD_VAR 0 2
77852: NOT
77853: OR
77854: IFFALSE 77858
// exit ;
77856: GO 78084
// x := GetX ( building ) ;
77858: LD_ADDR_VAR 0 4
77862: PUSH
77863: LD_VAR 0 2
77867: PPUSH
77868: CALL_OW 250
77872: ST_TO_ADDR
// y := GetY ( building ) ;
77873: LD_ADDR_VAR 0 6
77877: PUSH
77878: LD_VAR 0 2
77882: PPUSH
77883: CALL_OW 251
77887: ST_TO_ADDR
// d := GetDir ( building ) ;
77888: LD_ADDR_VAR 0 8
77892: PUSH
77893: LD_VAR 0 2
77897: PPUSH
77898: CALL_OW 254
77902: ST_TO_ADDR
// r := 4 ;
77903: LD_ADDR_VAR 0 9
77907: PUSH
77908: LD_INT 4
77910: ST_TO_ADDR
// for i := 1 to 5 do
77911: LD_ADDR_VAR 0 10
77915: PUSH
77916: DOUBLE
77917: LD_INT 1
77919: DEC
77920: ST_TO_ADDR
77921: LD_INT 5
77923: PUSH
77924: FOR_TO
77925: IFFALSE 78082
// begin _x := ShiftX ( x , d , r + i ) ;
77927: LD_ADDR_VAR 0 5
77931: PUSH
77932: LD_VAR 0 4
77936: PPUSH
77937: LD_VAR 0 8
77941: PPUSH
77942: LD_VAR 0 9
77946: PUSH
77947: LD_VAR 0 10
77951: PLUS
77952: PPUSH
77953: CALL_OW 272
77957: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
77958: LD_ADDR_VAR 0 7
77962: PUSH
77963: LD_VAR 0 6
77967: PPUSH
77968: LD_VAR 0 8
77972: PPUSH
77973: LD_VAR 0 9
77977: PUSH
77978: LD_VAR 0 10
77982: PLUS
77983: PPUSH
77984: CALL_OW 273
77988: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
77989: LD_VAR 0 5
77993: PPUSH
77994: LD_VAR 0 7
77998: PPUSH
77999: CALL_OW 488
78003: PUSH
78004: LD_VAR 0 5
78008: PPUSH
78009: LD_VAR 0 7
78013: PPUSH
78014: CALL_OW 428
78018: PPUSH
78019: CALL_OW 247
78023: PUSH
78024: LD_INT 3
78026: PUSH
78027: LD_INT 2
78029: PUSH
78030: EMPTY
78031: LIST
78032: LIST
78033: IN
78034: NOT
78035: AND
78036: IFFALSE 78080
// begin ComMoveXY ( unit , _x , _y ) ;
78038: LD_VAR 0 1
78042: PPUSH
78043: LD_VAR 0 5
78047: PPUSH
78048: LD_VAR 0 7
78052: PPUSH
78053: CALL_OW 111
// result := [ _x , _y ] ;
78057: LD_ADDR_VAR 0 3
78061: PUSH
78062: LD_VAR 0 5
78066: PUSH
78067: LD_VAR 0 7
78071: PUSH
78072: EMPTY
78073: LIST
78074: LIST
78075: ST_TO_ADDR
// exit ;
78076: POP
78077: POP
78078: GO 78084
// end ; end ;
78080: GO 77924
78082: POP
78083: POP
// end ;
78084: LD_VAR 0 3
78088: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
78089: LD_INT 0
78091: PPUSH
78092: PPUSH
78093: PPUSH
// result := 0 ;
78094: LD_ADDR_VAR 0 3
78098: PUSH
78099: LD_INT 0
78101: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
78102: LD_VAR 0 1
78106: PUSH
78107: LD_INT 0
78109: LESS
78110: PUSH
78111: LD_VAR 0 1
78115: PUSH
78116: LD_INT 8
78118: GREATER
78119: OR
78120: PUSH
78121: LD_VAR 0 2
78125: PUSH
78126: LD_INT 0
78128: LESS
78129: OR
78130: PUSH
78131: LD_VAR 0 2
78135: PUSH
78136: LD_INT 8
78138: GREATER
78139: OR
78140: IFFALSE 78144
// exit ;
78142: GO 78219
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
78144: LD_ADDR_VAR 0 4
78148: PUSH
78149: LD_INT 22
78151: PUSH
78152: LD_VAR 0 2
78156: PUSH
78157: EMPTY
78158: LIST
78159: LIST
78160: PPUSH
78161: CALL_OW 69
78165: PUSH
78166: FOR_IN
78167: IFFALSE 78217
// begin un := UnitShoot ( i ) ;
78169: LD_ADDR_VAR 0 5
78173: PUSH
78174: LD_VAR 0 4
78178: PPUSH
78179: CALL_OW 504
78183: ST_TO_ADDR
// if GetSide ( un ) = side1 then
78184: LD_VAR 0 5
78188: PPUSH
78189: CALL_OW 255
78193: PUSH
78194: LD_VAR 0 1
78198: EQUAL
78199: IFFALSE 78215
// begin result := un ;
78201: LD_ADDR_VAR 0 3
78205: PUSH
78206: LD_VAR 0 5
78210: ST_TO_ADDR
// exit ;
78211: POP
78212: POP
78213: GO 78219
// end ; end ;
78215: GO 78166
78217: POP
78218: POP
// end ;
78219: LD_VAR 0 3
78223: RET
// export function GetCargoBay ( units ) ; begin
78224: LD_INT 0
78226: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
78227: LD_ADDR_VAR 0 2
78231: PUSH
78232: LD_VAR 0 1
78236: PPUSH
78237: LD_INT 2
78239: PUSH
78240: LD_INT 34
78242: PUSH
78243: LD_INT 12
78245: PUSH
78246: EMPTY
78247: LIST
78248: LIST
78249: PUSH
78250: LD_INT 34
78252: PUSH
78253: LD_INT 51
78255: PUSH
78256: EMPTY
78257: LIST
78258: LIST
78259: PUSH
78260: LD_INT 34
78262: PUSH
78263: LD_INT 32
78265: PUSH
78266: EMPTY
78267: LIST
78268: LIST
78269: PUSH
78270: LD_INT 34
78272: PUSH
78273: LD_INT 89
78275: PUSH
78276: EMPTY
78277: LIST
78278: LIST
78279: PUSH
78280: EMPTY
78281: LIST
78282: LIST
78283: LIST
78284: LIST
78285: LIST
78286: PPUSH
78287: CALL_OW 72
78291: ST_TO_ADDR
// end ;
78292: LD_VAR 0 2
78296: RET
// export function Negate ( value ) ; begin
78297: LD_INT 0
78299: PPUSH
// result := not value ;
78300: LD_ADDR_VAR 0 2
78304: PUSH
78305: LD_VAR 0 1
78309: NOT
78310: ST_TO_ADDR
// end ;
78311: LD_VAR 0 2
78315: RET
// export function Inc ( value ) ; begin
78316: LD_INT 0
78318: PPUSH
// result := value + 1 ;
78319: LD_ADDR_VAR 0 2
78323: PUSH
78324: LD_VAR 0 1
78328: PUSH
78329: LD_INT 1
78331: PLUS
78332: ST_TO_ADDR
// end ;
78333: LD_VAR 0 2
78337: RET
// export function Dec ( value ) ; begin
78338: LD_INT 0
78340: PPUSH
// result := value - 1 ;
78341: LD_ADDR_VAR 0 2
78345: PUSH
78346: LD_VAR 0 1
78350: PUSH
78351: LD_INT 1
78353: MINUS
78354: ST_TO_ADDR
// end ;
78355: LD_VAR 0 2
78359: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
78360: LD_INT 0
78362: PPUSH
78363: PPUSH
78364: PPUSH
78365: PPUSH
78366: PPUSH
78367: PPUSH
78368: PPUSH
78369: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
78370: LD_VAR 0 1
78374: PPUSH
78375: LD_VAR 0 2
78379: PPUSH
78380: CALL_OW 488
78384: NOT
78385: PUSH
78386: LD_VAR 0 3
78390: PPUSH
78391: LD_VAR 0 4
78395: PPUSH
78396: CALL_OW 488
78400: NOT
78401: OR
78402: IFFALSE 78415
// begin result := - 1 ;
78404: LD_ADDR_VAR 0 5
78408: PUSH
78409: LD_INT 1
78411: NEG
78412: ST_TO_ADDR
// exit ;
78413: GO 78650
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
78415: LD_ADDR_VAR 0 12
78419: PUSH
78420: LD_VAR 0 1
78424: PPUSH
78425: LD_VAR 0 2
78429: PPUSH
78430: LD_VAR 0 3
78434: PPUSH
78435: LD_VAR 0 4
78439: PPUSH
78440: CALL 77500 0 4
78444: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
78445: LD_ADDR_VAR 0 11
78449: PUSH
78450: LD_VAR 0 1
78454: PPUSH
78455: LD_VAR 0 2
78459: PPUSH
78460: LD_VAR 0 12
78464: PUSH
78465: LD_INT 1
78467: ARRAY
78468: PPUSH
78469: LD_VAR 0 12
78473: PUSH
78474: LD_INT 2
78476: ARRAY
78477: PPUSH
78478: CALL_OW 298
78482: ST_TO_ADDR
// distance := 9999 ;
78483: LD_ADDR_VAR 0 10
78487: PUSH
78488: LD_INT 9999
78490: ST_TO_ADDR
// for i := 0 to 5 do
78491: LD_ADDR_VAR 0 6
78495: PUSH
78496: DOUBLE
78497: LD_INT 0
78499: DEC
78500: ST_TO_ADDR
78501: LD_INT 5
78503: PUSH
78504: FOR_TO
78505: IFFALSE 78648
// begin _x := ShiftX ( x1 , i , centerDist ) ;
78507: LD_ADDR_VAR 0 7
78511: PUSH
78512: LD_VAR 0 1
78516: PPUSH
78517: LD_VAR 0 6
78521: PPUSH
78522: LD_VAR 0 11
78526: PPUSH
78527: CALL_OW 272
78531: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
78532: LD_ADDR_VAR 0 8
78536: PUSH
78537: LD_VAR 0 2
78541: PPUSH
78542: LD_VAR 0 6
78546: PPUSH
78547: LD_VAR 0 11
78551: PPUSH
78552: CALL_OW 273
78556: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
78557: LD_VAR 0 7
78561: PPUSH
78562: LD_VAR 0 8
78566: PPUSH
78567: CALL_OW 488
78571: NOT
78572: IFFALSE 78576
// continue ;
78574: GO 78504
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
78576: LD_ADDR_VAR 0 9
78580: PUSH
78581: LD_VAR 0 12
78585: PUSH
78586: LD_INT 1
78588: ARRAY
78589: PPUSH
78590: LD_VAR 0 12
78594: PUSH
78595: LD_INT 2
78597: ARRAY
78598: PPUSH
78599: LD_VAR 0 7
78603: PPUSH
78604: LD_VAR 0 8
78608: PPUSH
78609: CALL_OW 298
78613: ST_TO_ADDR
// if tmp < distance then
78614: LD_VAR 0 9
78618: PUSH
78619: LD_VAR 0 10
78623: LESS
78624: IFFALSE 78646
// begin result := i ;
78626: LD_ADDR_VAR 0 5
78630: PUSH
78631: LD_VAR 0 6
78635: ST_TO_ADDR
// distance := tmp ;
78636: LD_ADDR_VAR 0 10
78640: PUSH
78641: LD_VAR 0 9
78645: ST_TO_ADDR
// end ; end ;
78646: GO 78504
78648: POP
78649: POP
// end ;
78650: LD_VAR 0 5
78654: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78655: LD_INT 0
78657: PPUSH
78658: PPUSH
// if not driver or not IsInUnit ( driver ) then
78659: LD_VAR 0 1
78663: NOT
78664: PUSH
78665: LD_VAR 0 1
78669: PPUSH
78670: CALL_OW 310
78674: NOT
78675: OR
78676: IFFALSE 78680
// exit ;
78678: GO 78770
// vehicle := IsInUnit ( driver ) ;
78680: LD_ADDR_VAR 0 3
78684: PUSH
78685: LD_VAR 0 1
78689: PPUSH
78690: CALL_OW 310
78694: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78695: LD_VAR 0 1
78699: PPUSH
78700: LD_STRING \
78702: PUSH
78703: LD_INT 0
78705: PUSH
78706: LD_INT 0
78708: PUSH
78709: LD_INT 0
78711: PUSH
78712: LD_INT 0
78714: PUSH
78715: LD_INT 0
78717: PUSH
78718: LD_INT 0
78720: PUSH
78721: EMPTY
78722: LIST
78723: LIST
78724: LIST
78725: LIST
78726: LIST
78727: LIST
78728: LIST
78729: PUSH
78730: LD_STRING E
78732: PUSH
78733: LD_INT 0
78735: PUSH
78736: LD_INT 0
78738: PUSH
78739: LD_VAR 0 3
78743: PUSH
78744: LD_INT 0
78746: PUSH
78747: LD_INT 0
78749: PUSH
78750: LD_INT 0
78752: PUSH
78753: EMPTY
78754: LIST
78755: LIST
78756: LIST
78757: LIST
78758: LIST
78759: LIST
78760: LIST
78761: PUSH
78762: EMPTY
78763: LIST
78764: LIST
78765: PPUSH
78766: CALL_OW 446
// end ;
78770: LD_VAR 0 2
78774: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78775: LD_INT 0
78777: PPUSH
78778: PPUSH
// if not driver or not IsInUnit ( driver ) then
78779: LD_VAR 0 1
78783: NOT
78784: PUSH
78785: LD_VAR 0 1
78789: PPUSH
78790: CALL_OW 310
78794: NOT
78795: OR
78796: IFFALSE 78800
// exit ;
78798: GO 78890
// vehicle := IsInUnit ( driver ) ;
78800: LD_ADDR_VAR 0 3
78804: PUSH
78805: LD_VAR 0 1
78809: PPUSH
78810: CALL_OW 310
78814: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78815: LD_VAR 0 1
78819: PPUSH
78820: LD_STRING \
78822: PUSH
78823: LD_INT 0
78825: PUSH
78826: LD_INT 0
78828: PUSH
78829: LD_INT 0
78831: PUSH
78832: LD_INT 0
78834: PUSH
78835: LD_INT 0
78837: PUSH
78838: LD_INT 0
78840: PUSH
78841: EMPTY
78842: LIST
78843: LIST
78844: LIST
78845: LIST
78846: LIST
78847: LIST
78848: LIST
78849: PUSH
78850: LD_STRING E
78852: PUSH
78853: LD_INT 0
78855: PUSH
78856: LD_INT 0
78858: PUSH
78859: LD_VAR 0 3
78863: PUSH
78864: LD_INT 0
78866: PUSH
78867: LD_INT 0
78869: PUSH
78870: LD_INT 0
78872: PUSH
78873: EMPTY
78874: LIST
78875: LIST
78876: LIST
78877: LIST
78878: LIST
78879: LIST
78880: LIST
78881: PUSH
78882: EMPTY
78883: LIST
78884: LIST
78885: PPUSH
78886: CALL_OW 447
// end ;
78890: LD_VAR 0 2
78894: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
78895: LD_INT 0
78897: PPUSH
78898: PPUSH
78899: PPUSH
// tmp := [ ] ;
78900: LD_ADDR_VAR 0 5
78904: PUSH
78905: EMPTY
78906: ST_TO_ADDR
// for i in units do
78907: LD_ADDR_VAR 0 4
78911: PUSH
78912: LD_VAR 0 1
78916: PUSH
78917: FOR_IN
78918: IFFALSE 78956
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
78920: LD_ADDR_VAR 0 5
78924: PUSH
78925: LD_VAR 0 5
78929: PPUSH
78930: LD_VAR 0 5
78934: PUSH
78935: LD_INT 1
78937: PLUS
78938: PPUSH
78939: LD_VAR 0 4
78943: PPUSH
78944: CALL_OW 256
78948: PPUSH
78949: CALL_OW 2
78953: ST_TO_ADDR
78954: GO 78917
78956: POP
78957: POP
// if not tmp then
78958: LD_VAR 0 5
78962: NOT
78963: IFFALSE 78967
// exit ;
78965: GO 79015
// if asc then
78967: LD_VAR 0 2
78971: IFFALSE 78995
// result := SortListByListAsc ( units , tmp ) else
78973: LD_ADDR_VAR 0 3
78977: PUSH
78978: LD_VAR 0 1
78982: PPUSH
78983: LD_VAR 0 5
78987: PPUSH
78988: CALL_OW 76
78992: ST_TO_ADDR
78993: GO 79015
// result := SortListByListDesc ( units , tmp ) ;
78995: LD_ADDR_VAR 0 3
78999: PUSH
79000: LD_VAR 0 1
79004: PPUSH
79005: LD_VAR 0 5
79009: PPUSH
79010: CALL_OW 77
79014: ST_TO_ADDR
// end ;
79015: LD_VAR 0 3
79019: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
79020: LD_INT 0
79022: PPUSH
79023: PPUSH
// task := GetTaskList ( mech ) ;
79024: LD_ADDR_VAR 0 4
79028: PUSH
79029: LD_VAR 0 1
79033: PPUSH
79034: CALL_OW 437
79038: ST_TO_ADDR
// if not task then
79039: LD_VAR 0 4
79043: NOT
79044: IFFALSE 79048
// exit ;
79046: GO 79090
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
79048: LD_ADDR_VAR 0 3
79052: PUSH
79053: LD_VAR 0 4
79057: PUSH
79058: LD_INT 1
79060: ARRAY
79061: PUSH
79062: LD_INT 1
79064: ARRAY
79065: PUSH
79066: LD_STRING r
79068: EQUAL
79069: PUSH
79070: LD_VAR 0 4
79074: PUSH
79075: LD_INT 1
79077: ARRAY
79078: PUSH
79079: LD_INT 4
79081: ARRAY
79082: PUSH
79083: LD_VAR 0 2
79087: EQUAL
79088: AND
79089: ST_TO_ADDR
// end ;
79090: LD_VAR 0 3
79094: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
79095: LD_INT 0
79097: PPUSH
// SetDir ( unit , d ) ;
79098: LD_VAR 0 1
79102: PPUSH
79103: LD_VAR 0 4
79107: PPUSH
79108: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
79112: LD_VAR 0 1
79116: PPUSH
79117: LD_VAR 0 2
79121: PPUSH
79122: LD_VAR 0 3
79126: PPUSH
79127: LD_VAR 0 5
79131: PPUSH
79132: CALL_OW 48
// end ;
79136: LD_VAR 0 6
79140: RET
// export function ToNaturalNumber ( number ) ; begin
79141: LD_INT 0
79143: PPUSH
// result := number div 1 ;
79144: LD_ADDR_VAR 0 2
79148: PUSH
79149: LD_VAR 0 1
79153: PUSH
79154: LD_INT 1
79156: DIV
79157: ST_TO_ADDR
// if number < 0 then
79158: LD_VAR 0 1
79162: PUSH
79163: LD_INT 0
79165: LESS
79166: IFFALSE 79176
// result := 0 ;
79168: LD_ADDR_VAR 0 2
79172: PUSH
79173: LD_INT 0
79175: ST_TO_ADDR
// end ;
79176: LD_VAR 0 2
79180: RET
// export function SortByClass ( units , class ) ; var un ; begin
79181: LD_INT 0
79183: PPUSH
79184: PPUSH
// if not units or not class then
79185: LD_VAR 0 1
79189: NOT
79190: PUSH
79191: LD_VAR 0 2
79195: NOT
79196: OR
79197: IFFALSE 79201
// exit ;
79199: GO 79296
// result := [ ] ;
79201: LD_ADDR_VAR 0 3
79205: PUSH
79206: EMPTY
79207: ST_TO_ADDR
// for un in units do
79208: LD_ADDR_VAR 0 4
79212: PUSH
79213: LD_VAR 0 1
79217: PUSH
79218: FOR_IN
79219: IFFALSE 79294
// if GetClass ( un ) = class then
79221: LD_VAR 0 4
79225: PPUSH
79226: CALL_OW 257
79230: PUSH
79231: LD_VAR 0 2
79235: EQUAL
79236: IFFALSE 79263
// result := Insert ( result , 1 , un ) else
79238: LD_ADDR_VAR 0 3
79242: PUSH
79243: LD_VAR 0 3
79247: PPUSH
79248: LD_INT 1
79250: PPUSH
79251: LD_VAR 0 4
79255: PPUSH
79256: CALL_OW 2
79260: ST_TO_ADDR
79261: GO 79292
// result := Replace ( result , result + 1 , un ) ;
79263: LD_ADDR_VAR 0 3
79267: PUSH
79268: LD_VAR 0 3
79272: PPUSH
79273: LD_VAR 0 3
79277: PUSH
79278: LD_INT 1
79280: PLUS
79281: PPUSH
79282: LD_VAR 0 4
79286: PPUSH
79287: CALL_OW 1
79291: ST_TO_ADDR
79292: GO 79218
79294: POP
79295: POP
// end ;
79296: LD_VAR 0 3
79300: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
79301: LD_INT 0
79303: PPUSH
79304: PPUSH
79305: PPUSH
79306: PPUSH
79307: PPUSH
79308: PPUSH
79309: PPUSH
// result := [ ] ;
79310: LD_ADDR_VAR 0 4
79314: PUSH
79315: EMPTY
79316: ST_TO_ADDR
// if x - r < 0 then
79317: LD_VAR 0 1
79321: PUSH
79322: LD_VAR 0 3
79326: MINUS
79327: PUSH
79328: LD_INT 0
79330: LESS
79331: IFFALSE 79343
// min_x := 0 else
79333: LD_ADDR_VAR 0 8
79337: PUSH
79338: LD_INT 0
79340: ST_TO_ADDR
79341: GO 79359
// min_x := x - r ;
79343: LD_ADDR_VAR 0 8
79347: PUSH
79348: LD_VAR 0 1
79352: PUSH
79353: LD_VAR 0 3
79357: MINUS
79358: ST_TO_ADDR
// if y - r < 0 then
79359: LD_VAR 0 2
79363: PUSH
79364: LD_VAR 0 3
79368: MINUS
79369: PUSH
79370: LD_INT 0
79372: LESS
79373: IFFALSE 79385
// min_y := 0 else
79375: LD_ADDR_VAR 0 7
79379: PUSH
79380: LD_INT 0
79382: ST_TO_ADDR
79383: GO 79401
// min_y := y - r ;
79385: LD_ADDR_VAR 0 7
79389: PUSH
79390: LD_VAR 0 2
79394: PUSH
79395: LD_VAR 0 3
79399: MINUS
79400: ST_TO_ADDR
// max_x := x + r ;
79401: LD_ADDR_VAR 0 9
79405: PUSH
79406: LD_VAR 0 1
79410: PUSH
79411: LD_VAR 0 3
79415: PLUS
79416: ST_TO_ADDR
// max_y := y + r ;
79417: LD_ADDR_VAR 0 10
79421: PUSH
79422: LD_VAR 0 2
79426: PUSH
79427: LD_VAR 0 3
79431: PLUS
79432: ST_TO_ADDR
// for _x = min_x to max_x do
79433: LD_ADDR_VAR 0 5
79437: PUSH
79438: DOUBLE
79439: LD_VAR 0 8
79443: DEC
79444: ST_TO_ADDR
79445: LD_VAR 0 9
79449: PUSH
79450: FOR_TO
79451: IFFALSE 79552
// for _y = min_y to max_y do
79453: LD_ADDR_VAR 0 6
79457: PUSH
79458: DOUBLE
79459: LD_VAR 0 7
79463: DEC
79464: ST_TO_ADDR
79465: LD_VAR 0 10
79469: PUSH
79470: FOR_TO
79471: IFFALSE 79548
// begin if not ValidHex ( _x , _y ) then
79473: LD_VAR 0 5
79477: PPUSH
79478: LD_VAR 0 6
79482: PPUSH
79483: CALL_OW 488
79487: NOT
79488: IFFALSE 79492
// continue ;
79490: GO 79470
// if GetResourceTypeXY ( _x , _y ) then
79492: LD_VAR 0 5
79496: PPUSH
79497: LD_VAR 0 6
79501: PPUSH
79502: CALL_OW 283
79506: IFFALSE 79546
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
79508: LD_ADDR_VAR 0 4
79512: PUSH
79513: LD_VAR 0 4
79517: PPUSH
79518: LD_VAR 0 4
79522: PUSH
79523: LD_INT 1
79525: PLUS
79526: PPUSH
79527: LD_VAR 0 5
79531: PUSH
79532: LD_VAR 0 6
79536: PUSH
79537: EMPTY
79538: LIST
79539: LIST
79540: PPUSH
79541: CALL_OW 1
79545: ST_TO_ADDR
// end ;
79546: GO 79470
79548: POP
79549: POP
79550: GO 79450
79552: POP
79553: POP
// end ;
79554: LD_VAR 0 4
79558: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
79559: LD_INT 0
79561: PPUSH
79562: PPUSH
79563: PPUSH
79564: PPUSH
79565: PPUSH
79566: PPUSH
79567: PPUSH
79568: PPUSH
// if not units then
79569: LD_VAR 0 1
79573: NOT
79574: IFFALSE 79578
// exit ;
79576: GO 80102
// result := UnitFilter ( units , [ f_ok ] ) ;
79578: LD_ADDR_VAR 0 3
79582: PUSH
79583: LD_VAR 0 1
79587: PPUSH
79588: LD_INT 50
79590: PUSH
79591: EMPTY
79592: LIST
79593: PPUSH
79594: CALL_OW 72
79598: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
79599: LD_ADDR_VAR 0 8
79603: PUSH
79604: LD_VAR 0 1
79608: PUSH
79609: LD_INT 1
79611: ARRAY
79612: PPUSH
79613: CALL_OW 255
79617: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
79618: LD_ADDR_VAR 0 10
79622: PUSH
79623: LD_INT 29
79625: PUSH
79626: LD_INT 91
79628: PUSH
79629: LD_INT 49
79631: PUSH
79632: EMPTY
79633: LIST
79634: LIST
79635: LIST
79636: ST_TO_ADDR
// if not result then
79637: LD_VAR 0 3
79641: NOT
79642: IFFALSE 79646
// exit ;
79644: GO 80102
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
79646: LD_ADDR_VAR 0 5
79650: PUSH
79651: LD_INT 81
79653: PUSH
79654: LD_VAR 0 8
79658: PUSH
79659: EMPTY
79660: LIST
79661: LIST
79662: PPUSH
79663: CALL_OW 69
79667: ST_TO_ADDR
// for i in result do
79668: LD_ADDR_VAR 0 4
79672: PUSH
79673: LD_VAR 0 3
79677: PUSH
79678: FOR_IN
79679: IFFALSE 80100
// begin tag := GetTag ( i ) + 1 ;
79681: LD_ADDR_VAR 0 9
79685: PUSH
79686: LD_VAR 0 4
79690: PPUSH
79691: CALL_OW 110
79695: PUSH
79696: LD_INT 1
79698: PLUS
79699: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
79700: LD_ADDR_VAR 0 7
79704: PUSH
79705: LD_VAR 0 4
79709: PPUSH
79710: CALL_OW 250
79714: PPUSH
79715: LD_VAR 0 4
79719: PPUSH
79720: CALL_OW 251
79724: PPUSH
79725: LD_INT 6
79727: PPUSH
79728: CALL 79301 0 3
79732: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
79733: LD_VAR 0 4
79737: PPUSH
79738: CALL_OW 247
79742: PUSH
79743: LD_INT 2
79745: EQUAL
79746: PUSH
79747: LD_VAR 0 7
79751: AND
79752: PUSH
79753: LD_VAR 0 4
79757: PPUSH
79758: CALL_OW 264
79762: PUSH
79763: LD_VAR 0 10
79767: IN
79768: NOT
79769: AND
79770: IFFALSE 79809
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
79772: LD_VAR 0 4
79776: PPUSH
79777: LD_VAR 0 7
79781: PUSH
79782: LD_INT 1
79784: ARRAY
79785: PUSH
79786: LD_INT 1
79788: ARRAY
79789: PPUSH
79790: LD_VAR 0 7
79794: PUSH
79795: LD_INT 1
79797: ARRAY
79798: PUSH
79799: LD_INT 2
79801: ARRAY
79802: PPUSH
79803: CALL_OW 116
79807: GO 80098
// if path > tag then
79809: LD_VAR 0 2
79813: PUSH
79814: LD_VAR 0 9
79818: GREATER
79819: IFFALSE 80027
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
79821: LD_ADDR_VAR 0 6
79825: PUSH
79826: LD_VAR 0 5
79830: PPUSH
79831: LD_INT 91
79833: PUSH
79834: LD_VAR 0 4
79838: PUSH
79839: LD_INT 8
79841: PUSH
79842: EMPTY
79843: LIST
79844: LIST
79845: LIST
79846: PPUSH
79847: CALL_OW 72
79851: ST_TO_ADDR
// if nearEnemy then
79852: LD_VAR 0 6
79856: IFFALSE 79925
// begin if GetWeapon ( i ) = ru_time_lapser then
79858: LD_VAR 0 4
79862: PPUSH
79863: CALL_OW 264
79867: PUSH
79868: LD_INT 49
79870: EQUAL
79871: IFFALSE 79899
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
79873: LD_VAR 0 4
79877: PPUSH
79878: LD_VAR 0 6
79882: PPUSH
79883: LD_VAR 0 4
79887: PPUSH
79888: CALL_OW 74
79892: PPUSH
79893: CALL_OW 112
79897: GO 79923
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
79899: LD_VAR 0 4
79903: PPUSH
79904: LD_VAR 0 6
79908: PPUSH
79909: LD_VAR 0 4
79913: PPUSH
79914: CALL_OW 74
79918: PPUSH
79919: CALL_OW 115
// end else
79923: GO 80025
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
79925: LD_VAR 0 4
79929: PPUSH
79930: LD_VAR 0 2
79934: PUSH
79935: LD_VAR 0 9
79939: ARRAY
79940: PUSH
79941: LD_INT 1
79943: ARRAY
79944: PPUSH
79945: LD_VAR 0 2
79949: PUSH
79950: LD_VAR 0 9
79954: ARRAY
79955: PUSH
79956: LD_INT 2
79958: ARRAY
79959: PPUSH
79960: CALL_OW 297
79964: PUSH
79965: LD_INT 6
79967: GREATER
79968: IFFALSE 80011
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
79970: LD_VAR 0 4
79974: PPUSH
79975: LD_VAR 0 2
79979: PUSH
79980: LD_VAR 0 9
79984: ARRAY
79985: PUSH
79986: LD_INT 1
79988: ARRAY
79989: PPUSH
79990: LD_VAR 0 2
79994: PUSH
79995: LD_VAR 0 9
79999: ARRAY
80000: PUSH
80001: LD_INT 2
80003: ARRAY
80004: PPUSH
80005: CALL_OW 114
80009: GO 80025
// SetTag ( i , tag ) ;
80011: LD_VAR 0 4
80015: PPUSH
80016: LD_VAR 0 9
80020: PPUSH
80021: CALL_OW 109
// end else
80025: GO 80098
// if enemy then
80027: LD_VAR 0 5
80031: IFFALSE 80098
// begin if GetWeapon ( i ) = ru_time_lapser then
80033: LD_VAR 0 4
80037: PPUSH
80038: CALL_OW 264
80042: PUSH
80043: LD_INT 49
80045: EQUAL
80046: IFFALSE 80074
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
80048: LD_VAR 0 4
80052: PPUSH
80053: LD_VAR 0 5
80057: PPUSH
80058: LD_VAR 0 4
80062: PPUSH
80063: CALL_OW 74
80067: PPUSH
80068: CALL_OW 112
80072: GO 80098
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
80074: LD_VAR 0 4
80078: PPUSH
80079: LD_VAR 0 5
80083: PPUSH
80084: LD_VAR 0 4
80088: PPUSH
80089: CALL_OW 74
80093: PPUSH
80094: CALL_OW 115
// end ; end ;
80098: GO 79678
80100: POP
80101: POP
// end ;
80102: LD_VAR 0 3
80106: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
80107: LD_INT 0
80109: PPUSH
80110: PPUSH
80111: PPUSH
// if not unit or IsInUnit ( unit ) then
80112: LD_VAR 0 1
80116: NOT
80117: PUSH
80118: LD_VAR 0 1
80122: PPUSH
80123: CALL_OW 310
80127: OR
80128: IFFALSE 80132
// exit ;
80130: GO 80223
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
80132: LD_ADDR_VAR 0 4
80136: PUSH
80137: LD_VAR 0 1
80141: PPUSH
80142: CALL_OW 250
80146: PPUSH
80147: LD_VAR 0 2
80151: PPUSH
80152: LD_INT 1
80154: PPUSH
80155: CALL_OW 272
80159: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
80160: LD_ADDR_VAR 0 5
80164: PUSH
80165: LD_VAR 0 1
80169: PPUSH
80170: CALL_OW 251
80174: PPUSH
80175: LD_VAR 0 2
80179: PPUSH
80180: LD_INT 1
80182: PPUSH
80183: CALL_OW 273
80187: ST_TO_ADDR
// if ValidHex ( x , y ) then
80188: LD_VAR 0 4
80192: PPUSH
80193: LD_VAR 0 5
80197: PPUSH
80198: CALL_OW 488
80202: IFFALSE 80223
// ComTurnXY ( unit , x , y ) ;
80204: LD_VAR 0 1
80208: PPUSH
80209: LD_VAR 0 4
80213: PPUSH
80214: LD_VAR 0 5
80218: PPUSH
80219: CALL_OW 118
// end ;
80223: LD_VAR 0 3
80227: RET
// export function SeeUnits ( side , units ) ; var i ; begin
80228: LD_INT 0
80230: PPUSH
80231: PPUSH
// result := false ;
80232: LD_ADDR_VAR 0 3
80236: PUSH
80237: LD_INT 0
80239: ST_TO_ADDR
// if not units then
80240: LD_VAR 0 2
80244: NOT
80245: IFFALSE 80249
// exit ;
80247: GO 80294
// for i in units do
80249: LD_ADDR_VAR 0 4
80253: PUSH
80254: LD_VAR 0 2
80258: PUSH
80259: FOR_IN
80260: IFFALSE 80292
// if See ( side , i ) then
80262: LD_VAR 0 1
80266: PPUSH
80267: LD_VAR 0 4
80271: PPUSH
80272: CALL_OW 292
80276: IFFALSE 80290
// begin result := true ;
80278: LD_ADDR_VAR 0 3
80282: PUSH
80283: LD_INT 1
80285: ST_TO_ADDR
// exit ;
80286: POP
80287: POP
80288: GO 80294
// end ;
80290: GO 80259
80292: POP
80293: POP
// end ;
80294: LD_VAR 0 3
80298: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
80299: LD_INT 0
80301: PPUSH
80302: PPUSH
80303: PPUSH
80304: PPUSH
// if not unit or not points then
80305: LD_VAR 0 1
80309: NOT
80310: PUSH
80311: LD_VAR 0 2
80315: NOT
80316: OR
80317: IFFALSE 80321
// exit ;
80319: GO 80411
// dist := 99999 ;
80321: LD_ADDR_VAR 0 5
80325: PUSH
80326: LD_INT 99999
80328: ST_TO_ADDR
// for i in points do
80329: LD_ADDR_VAR 0 4
80333: PUSH
80334: LD_VAR 0 2
80338: PUSH
80339: FOR_IN
80340: IFFALSE 80409
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
80342: LD_ADDR_VAR 0 6
80346: PUSH
80347: LD_VAR 0 1
80351: PPUSH
80352: LD_VAR 0 4
80356: PUSH
80357: LD_INT 1
80359: ARRAY
80360: PPUSH
80361: LD_VAR 0 4
80365: PUSH
80366: LD_INT 2
80368: ARRAY
80369: PPUSH
80370: CALL_OW 297
80374: ST_TO_ADDR
// if tmpDist < dist then
80375: LD_VAR 0 6
80379: PUSH
80380: LD_VAR 0 5
80384: LESS
80385: IFFALSE 80407
// begin result := i ;
80387: LD_ADDR_VAR 0 3
80391: PUSH
80392: LD_VAR 0 4
80396: ST_TO_ADDR
// dist := tmpDist ;
80397: LD_ADDR_VAR 0 5
80401: PUSH
80402: LD_VAR 0 6
80406: ST_TO_ADDR
// end ; end ;
80407: GO 80339
80409: POP
80410: POP
// end ;
80411: LD_VAR 0 3
80415: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
80416: LD_INT 0
80418: PPUSH
// uc_side := side ;
80419: LD_ADDR_OWVAR 20
80423: PUSH
80424: LD_VAR 0 1
80428: ST_TO_ADDR
// uc_nation := 3 ;
80429: LD_ADDR_OWVAR 21
80433: PUSH
80434: LD_INT 3
80436: ST_TO_ADDR
// vc_chassis := 25 ;
80437: LD_ADDR_OWVAR 37
80441: PUSH
80442: LD_INT 25
80444: ST_TO_ADDR
// vc_engine := engine_siberite ;
80445: LD_ADDR_OWVAR 39
80449: PUSH
80450: LD_INT 3
80452: ST_TO_ADDR
// vc_control := control_computer ;
80453: LD_ADDR_OWVAR 38
80457: PUSH
80458: LD_INT 3
80460: ST_TO_ADDR
// vc_weapon := 59 ;
80461: LD_ADDR_OWVAR 40
80465: PUSH
80466: LD_INT 59
80468: ST_TO_ADDR
// result := CreateVehicle ;
80469: LD_ADDR_VAR 0 5
80473: PUSH
80474: CALL_OW 45
80478: ST_TO_ADDR
// SetDir ( result , d ) ;
80479: LD_VAR 0 5
80483: PPUSH
80484: LD_VAR 0 4
80488: PPUSH
80489: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
80493: LD_VAR 0 5
80497: PPUSH
80498: LD_VAR 0 2
80502: PPUSH
80503: LD_VAR 0 3
80507: PPUSH
80508: LD_INT 0
80510: PPUSH
80511: CALL_OW 48
// end ;
80515: LD_VAR 0 5
80519: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
80520: LD_INT 0
80522: PPUSH
80523: PPUSH
80524: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
80525: LD_ADDR_VAR 0 2
80529: PUSH
80530: LD_INT 0
80532: PUSH
80533: LD_INT 0
80535: PUSH
80536: LD_INT 0
80538: PUSH
80539: LD_INT 0
80541: PUSH
80542: EMPTY
80543: LIST
80544: LIST
80545: LIST
80546: LIST
80547: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
80548: LD_VAR 0 1
80552: NOT
80553: PUSH
80554: LD_VAR 0 1
80558: PPUSH
80559: CALL_OW 264
80563: PUSH
80564: LD_INT 12
80566: PUSH
80567: LD_INT 51
80569: PUSH
80570: LD_INT 32
80572: PUSH
80573: LD_INT 89
80575: PUSH
80576: EMPTY
80577: LIST
80578: LIST
80579: LIST
80580: LIST
80581: IN
80582: NOT
80583: OR
80584: IFFALSE 80588
// exit ;
80586: GO 80686
// for i := 1 to 3 do
80588: LD_ADDR_VAR 0 3
80592: PUSH
80593: DOUBLE
80594: LD_INT 1
80596: DEC
80597: ST_TO_ADDR
80598: LD_INT 3
80600: PUSH
80601: FOR_TO
80602: IFFALSE 80684
// begin tmp := GetCargo ( cargo , i ) ;
80604: LD_ADDR_VAR 0 4
80608: PUSH
80609: LD_VAR 0 1
80613: PPUSH
80614: LD_VAR 0 3
80618: PPUSH
80619: CALL_OW 289
80623: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
80624: LD_ADDR_VAR 0 2
80628: PUSH
80629: LD_VAR 0 2
80633: PPUSH
80634: LD_VAR 0 3
80638: PPUSH
80639: LD_VAR 0 4
80643: PPUSH
80644: CALL_OW 1
80648: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
80649: LD_ADDR_VAR 0 2
80653: PUSH
80654: LD_VAR 0 2
80658: PPUSH
80659: LD_INT 4
80661: PPUSH
80662: LD_VAR 0 2
80666: PUSH
80667: LD_INT 4
80669: ARRAY
80670: PUSH
80671: LD_VAR 0 4
80675: PLUS
80676: PPUSH
80677: CALL_OW 1
80681: ST_TO_ADDR
// end ;
80682: GO 80601
80684: POP
80685: POP
// end ;
80686: LD_VAR 0 2
80690: RET
// export function Length ( array ) ; begin
80691: LD_INT 0
80693: PPUSH
// result := array + 0 ;
80694: LD_ADDR_VAR 0 2
80698: PUSH
80699: LD_VAR 0 1
80703: PUSH
80704: LD_INT 0
80706: PLUS
80707: ST_TO_ADDR
// end ;
80708: LD_VAR 0 2
80712: RET
// export function PrepareArray ( array ) ; begin
80713: LD_INT 0
80715: PPUSH
// result := array diff 0 ;
80716: LD_ADDR_VAR 0 2
80720: PUSH
80721: LD_VAR 0 1
80725: PUSH
80726: LD_INT 0
80728: DIFF
80729: ST_TO_ADDR
// if not result [ 1 ] then
80730: LD_VAR 0 2
80734: PUSH
80735: LD_INT 1
80737: ARRAY
80738: NOT
80739: IFFALSE 80759
// result := Delete ( result , 1 ) ;
80741: LD_ADDR_VAR 0 2
80745: PUSH
80746: LD_VAR 0 2
80750: PPUSH
80751: LD_INT 1
80753: PPUSH
80754: CALL_OW 3
80758: ST_TO_ADDR
// end ; end_of_file
80759: LD_VAR 0 2
80763: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
80764: LD_VAR 0 1
80768: PUSH
80769: LD_INT 200
80771: DOUBLE
80772: GREATEREQUAL
80773: IFFALSE 80781
80775: LD_INT 299
80777: DOUBLE
80778: LESSEQUAL
80779: IFTRUE 80783
80781: GO 80815
80783: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
80784: LD_VAR 0 1
80788: PPUSH
80789: LD_VAR 0 2
80793: PPUSH
80794: LD_VAR 0 3
80798: PPUSH
80799: LD_VAR 0 4
80803: PPUSH
80804: LD_VAR 0 5
80808: PPUSH
80809: CALL 35666 0 5
80813: GO 80892
80815: LD_INT 300
80817: DOUBLE
80818: GREATEREQUAL
80819: IFFALSE 80827
80821: LD_INT 399
80823: DOUBLE
80824: LESSEQUAL
80825: IFTRUE 80829
80827: GO 80891
80829: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
80830: LD_VAR 0 1
80834: PPUSH
80835: LD_VAR 0 2
80839: PPUSH
80840: LD_VAR 0 3
80844: PPUSH
80845: LD_VAR 0 4
80849: PPUSH
80850: LD_VAR 0 5
80854: PPUSH
80855: LD_VAR 0 6
80859: PPUSH
80860: LD_VAR 0 7
80864: PPUSH
80865: LD_VAR 0 8
80869: PPUSH
80870: LD_VAR 0 9
80874: PPUSH
80875: LD_VAR 0 10
80879: PPUSH
80880: LD_VAR 0 11
80884: PPUSH
80885: CALL 31999 0 11
80889: GO 80892
80891: POP
// end ;
80892: PPOPN 11
80894: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
80895: LD_VAR 0 1
80899: PPUSH
80900: LD_VAR 0 2
80904: PPUSH
80905: LD_VAR 0 3
80909: PPUSH
80910: LD_VAR 0 4
80914: PPUSH
80915: LD_VAR 0 5
80919: PPUSH
80920: CALL 35402 0 5
// end ; end_of_file
80924: PPOPN 5
80926: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
80927: LD_VAR 0 1
80931: PPUSH
80932: LD_VAR 0 2
80936: PPUSH
80937: LD_VAR 0 3
80941: PPUSH
80942: LD_VAR 0 4
80946: PPUSH
80947: LD_VAR 0 5
80951: PPUSH
80952: LD_VAR 0 6
80956: PPUSH
80957: CALL 19692 0 6
// end ;
80961: PPOPN 6
80963: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
80964: LD_INT 0
80966: PPUSH
// begin if not units then
80967: LD_VAR 0 1
80971: NOT
80972: IFFALSE 80976
// exit ;
80974: GO 80976
// end ;
80976: PPOPN 7
80978: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
80979: CALL 19663 0 0
// end ;
80983: PPOPN 1
80985: END
