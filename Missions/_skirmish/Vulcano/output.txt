// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// InitGlobalVariables ;
  15: CALL 18985 0 0
// PrepareTrigger ;
  19: CALL 44 0 0
// PrepareVulcanoBase ;
  23: CALL 916 0 0
// PrepareRussian ;
  27: CALL 3560 0 0
// PrepareLegion ;
  31: CALL 7641 0 0
// Action ;
  35: CALL 10908 0 0
// InitArt ;
  39: CALL 237 0 0
// end ;
  43: END
// export base_captured , russian_prepared , ru_can_attack , ru_sib_bomb , chance_to_bomb , player_res_art , artifact_progress , player_artifact_ready , art_icon , time_res_art , player_commander , time_to_reuse , mine_vulc , medal_enabled , dead_counter , kill_counter , veh_counter , tech_counter , sib_contamin_counter , event_legion_attack , event_russian_attack , event_alliance_attack ; function PrepareTrigger ; begin
  44: LD_INT 0
  46: PPUSH
// base_captured := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// russian_prepared := false ;
  55: LD_ADDR_EXP 2
  59: PUSH
  60: LD_INT 0
  62: ST_TO_ADDR
// ru_can_attack := false ;
  63: LD_ADDR_EXP 3
  67: PUSH
  68: LD_INT 0
  70: ST_TO_ADDR
// ru_sib_bomb := false ;
  71: LD_ADDR_EXP 4
  75: PUSH
  76: LD_INT 0
  78: ST_TO_ADDR
// chance_to_bomb := [ 5 , 10 , 25 ] [ Difficulty ] ;
  79: LD_ADDR_EXP 5
  83: PUSH
  84: LD_INT 5
  86: PUSH
  87: LD_INT 10
  89: PUSH
  90: LD_INT 25
  92: PUSH
  93: EMPTY
  94: LIST
  95: LIST
  96: LIST
  97: PUSH
  98: LD_OWVAR 67
 102: ARRAY
 103: ST_TO_ADDR
// player_res_art := false ;
 104: LD_ADDR_EXP 6
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// player_artifact_ready := false ;
 112: LD_ADDR_EXP 8
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// art_icon := art_use_atom ;
 120: LD_ADDR_EXP 9
 124: PUSH
 125: LD_INT 7
 127: ST_TO_ADDR
// time_res_art := 600 ;
 128: LD_ADDR_EXP 10
 132: PUSH
 133: LD_INT 600
 135: ST_TO_ADDR
// time_to_reuse := 10 10$00 ;
 136: LD_ADDR_EXP 12
 140: PUSH
 141: LD_INT 21000
 143: ST_TO_ADDR
// mine_vulc := false ;
 144: LD_ADDR_EXP 13
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// medal_enabled := false ;
 152: LD_ADDR_EXP 14
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// dead_counter := 0 ;
 160: LD_ADDR_EXP 15
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// kill_counter := 0 ;
 168: LD_ADDR_EXP 16
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// veh_counter := 0 ;
 176: LD_ADDR_EXP 17
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// tech_counter := 0 ;
 184: LD_ADDR_EXP 18
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// sib_contamin_counter := 0 ;
 192: LD_ADDR_EXP 19
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// artifact_progress := 0 ;
 200: LD_ADDR_EXP 7
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// event_legion_attack := 1 ;
 208: LD_ADDR_EXP 20
 212: PUSH
 213: LD_INT 1
 215: ST_TO_ADDR
// event_russian_attack := 2 ;
 216: LD_ADDR_EXP 21
 220: PUSH
 221: LD_INT 2
 223: ST_TO_ADDR
// event_alliance_attack := 3 ;
 224: LD_ADDR_EXP 22
 228: PUSH
 229: LD_INT 3
 231: ST_TO_ADDR
// end ;
 232: LD_VAR 0 1
 236: RET
// function InitArt ; begin
 237: LD_INT 0
 239: PPUSH
// SetArtifactRes ( your_side , true ) ;
 240: LD_OWVAR 2
 244: PPUSH
 245: LD_INT 1
 247: PPUSH
 248: CALL_OW 467
// end ; end_of_file
 252: LD_VAR 0 1
 256: RET
// export us_commander , us_force , us_skill , us_guy ; export function PrepareAmerican ; var i , filter , un , team ; begin
 257: LD_INT 0
 259: PPUSH
 260: PPUSH
 261: PPUSH
 262: PPUSH
 263: PPUSH
// us_skill := [ 7 , 6 , 5 ] [ Difficulty ] ;
 264: LD_ADDR_EXP 25
 268: PUSH
 269: LD_INT 7
 271: PUSH
 272: LD_INT 6
 274: PUSH
 275: LD_INT 5
 277: PUSH
 278: EMPTY
 279: LIST
 280: LIST
 281: LIST
 282: PUSH
 283: LD_OWVAR 67
 287: ARRAY
 288: ST_TO_ADDR
// us_force := [ ] ;
 289: LD_ADDR_EXP 24
 293: PUSH
 294: EMPTY
 295: ST_TO_ADDR
// RemoveEnvironmentArea ( evn ) ;
 296: LD_INT 17
 298: PPUSH
 299: CALL_OW 355
// PrepareAllianceAI ( ) ;
 303: CALL 16247 0 0
// uc_side := 1 ;
 307: LD_ADDR_OWVAR 20
 311: PUSH
 312: LD_INT 1
 314: ST_TO_ADDR
// uc_nation := nation_american ;
 315: LD_ADDR_OWVAR 21
 319: PUSH
 320: LD_INT 1
 322: ST_TO_ADDR
// hc_gallery :=  ;
 323: LD_ADDR_OWVAR 33
 327: PUSH
 328: LD_STRING 
 330: ST_TO_ADDR
// hc_name :=  ;
 331: LD_ADDR_OWVAR 26
 335: PUSH
 336: LD_STRING 
 338: ST_TO_ADDR
// hc_importance := 0 ;
 339: LD_ADDR_OWVAR 32
 343: PUSH
 344: LD_INT 0
 346: ST_TO_ADDR
// for i = 1 to 11 do
 347: LD_ADDR_VAR 0 2
 351: PUSH
 352: DOUBLE
 353: LD_INT 1
 355: DEC
 356: ST_TO_ADDR
 357: LD_INT 11
 359: PUSH
 360: FOR_TO
 361: IFFALSE 414
// begin PrepareHuman ( false , Rand ( 1 , 4 ) , us_skill ) ;
 363: LD_INT 0
 365: PPUSH
 366: LD_INT 1
 368: PPUSH
 369: LD_INT 4
 371: PPUSH
 372: CALL_OW 12
 376: PPUSH
 377: LD_EXP 25
 381: PPUSH
 382: CALL_OW 380
// un := CreateHuman ;
 386: LD_ADDR_VAR 0 4
 390: PUSH
 391: CALL_OW 44
 395: ST_TO_ADDR
// us_force := us_force ^ un ;
 396: LD_ADDR_EXP 24
 400: PUSH
 401: LD_EXP 24
 405: PUSH
 406: LD_VAR 0 4
 410: ADD
 411: ST_TO_ADDR
// end ;
 412: GO 360
 414: POP
 415: POP
// hc_importance := 100 ;
 416: LD_ADDR_OWVAR 32
 420: PUSH
 421: LD_INT 100
 423: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , us_skill ) ;
 424: LD_INT 1
 426: PPUSH
 427: LD_INT 1
 429: PPUSH
 430: LD_EXP 25
 434: PPUSH
 435: CALL_OW 380
// us_commander := CreateHuman ;
 439: LD_ADDR_EXP 23
 443: PUSH
 444: CALL_OW 44
 448: ST_TO_ADDR
// player_commander := us_commander ;
 449: LD_ADDR_EXP 11
 453: PUSH
 454: LD_EXP 23
 458: ST_TO_ADDR
// team := CharacterSelection ( text , [ 6 , 5 , 4 ] [ Difficulty ] , [ 6 , 5 , 4 ] [ Difficulty ] , [ sel_change_class , us_commander , sel_changeable , sel_not_hired ] ^ us_force , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , [ 5 , 5 , - 1 ] [ Difficulty ] ] ) ;
 459: LD_ADDR_VAR 0 5
 463: PUSH
 464: LD_STRING text
 466: PPUSH
 467: LD_INT 6
 469: PUSH
 470: LD_INT 5
 472: PUSH
 473: LD_INT 4
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: LIST
 480: PUSH
 481: LD_OWVAR 67
 485: ARRAY
 486: PPUSH
 487: LD_INT 6
 489: PUSH
 490: LD_INT 5
 492: PUSH
 493: LD_INT 4
 495: PUSH
 496: EMPTY
 497: LIST
 498: LIST
 499: LIST
 500: PUSH
 501: LD_OWVAR 67
 505: ARRAY
 506: PPUSH
 507: LD_INT -5
 509: PUSH
 510: LD_EXP 23
 514: PUSH
 515: LD_INT -3
 517: PUSH
 518: LD_INT -2
 520: PUSH
 521: EMPTY
 522: LIST
 523: LIST
 524: LIST
 525: LIST
 526: PUSH
 527: LD_EXP 24
 531: ADD
 532: PPUSH
 533: LD_INT 1
 535: PUSH
 536: LD_INT 3
 538: PUSH
 539: LD_INT 2
 541: PUSH
 542: LD_INT 1
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: PUSH
 549: LD_INT 4
 551: PUSH
 552: LD_INT 1
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: PUSH
 559: LD_INT 5
 561: PUSH
 562: LD_INT 5
 564: PUSH
 565: LD_INT 1
 567: NEG
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: LIST
 573: PUSH
 574: LD_OWVAR 67
 578: ARRAY
 579: PUSH
 580: EMPTY
 581: LIST
 582: LIST
 583: LIST
 584: LIST
 585: LIST
 586: PPUSH
 587: CALL_OW 42
 591: ST_TO_ADDR
// team := team ^ us_commander ;
 592: LD_ADDR_VAR 0 5
 596: PUSH
 597: LD_VAR 0 5
 601: PUSH
 602: LD_EXP 23
 606: ADD
 607: ST_TO_ADDR
// for i = 1 to team do
 608: LD_ADDR_VAR 0 2
 612: PUSH
 613: DOUBLE
 614: LD_INT 1
 616: DEC
 617: ST_TO_ADDR
 618: LD_VAR 0 5
 622: PUSH
 623: FOR_TO
 624: IFFALSE 649
// PlaceUnitArea ( team [ i ] , start_north , false ) ;
 626: LD_VAR 0 5
 630: PUSH
 631: LD_VAR 0 2
 635: ARRAY
 636: PPUSH
 637: LD_INT 1
 639: PPUSH
 640: LD_INT 0
 642: PPUSH
 643: CALL_OW 49
 647: GO 623
 649: POP
 650: POP
// end ;
 651: LD_VAR 0 1
 655: RET
// every 0 0$38 + 2 2$00 trigger tick < 73500 do
 656: LD_OWVAR 1
 660: PUSH
 661: LD_INT 73500
 663: LESS
 664: IFFALSE 691
 666: GO 668
 668: DISABLE
// begin enable ;
 669: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , extra_crates , true ) ;
 670: LD_INT 1
 672: PPUSH
 673: LD_INT 5
 675: PPUSH
 676: CALL_OW 12
 680: PPUSH
 681: LD_INT 24
 683: PPUSH
 684: LD_INT 1
 686: PPUSH
 687: CALL_OW 55
// end ;
 691: END
// every 1 1$10 do var time , p , l ;
 692: GO 694
 694: DISABLE
 695: LD_INT 0
 697: PPUSH
 698: PPUSH
 699: PPUSH
// begin time := 0 0$44 ;
 700: LD_ADDR_VAR 0 1
 704: PUSH
 705: LD_INT 1540
 707: ST_TO_ADDR
// l := 0 ;
 708: LD_ADDR_VAR 0 3
 712: PUSH
 713: LD_INT 0
 715: ST_TO_ADDR
// repeat begin Wait ( time ) ;
 716: LD_VAR 0 1
 720: PPUSH
 721: CALL_OW 67
// l := l + 1 ;
 725: LD_ADDR_VAR 0 3
 729: PUSH
 730: LD_VAR 0 3
 734: PUSH
 735: LD_INT 1
 737: PLUS
 738: ST_TO_ADDR
// if GetListOfCratesInArea ( us_crates ) < 30 then
 739: LD_INT 12
 741: PPUSH
 742: CALL_OW 435
 746: PUSH
 747: LD_INT 30
 749: LESS
 750: IFFALSE 809
// begin CreateCratesArea ( Rand ( 1 , 5 ) , us_crates , true ) ;
 752: LD_INT 1
 754: PPUSH
 755: LD_INT 5
 757: PPUSH
 758: CALL_OW 12
 762: PPUSH
 763: LD_INT 12
 765: PPUSH
 766: LD_INT 1
 768: PPUSH
 769: CALL_OW 55
// Wait ( Rand ( 0 0$33 , 0 0$44 ) ) ;
 773: LD_INT 1155
 775: PPUSH
 776: LD_INT 1540
 778: PPUSH
 779: CALL_OW 12
 783: PPUSH
 784: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 5 ) , us_crates , true ) ;
 788: LD_INT 1
 790: PPUSH
 791: LD_INT 5
 793: PPUSH
 794: CALL_OW 12
 798: PPUSH
 799: LD_INT 12
 801: PPUSH
 802: LD_INT 1
 804: PPUSH
 805: CALL_OW 55
// end ; p := Rand ( 0 , 1 ) ;
 809: LD_ADDR_VAR 0 2
 813: PUSH
 814: LD_INT 0
 816: PPUSH
 817: LD_INT 1
 819: PPUSH
 820: CALL_OW 12
 824: ST_TO_ADDR
// if p then
 825: LD_VAR 0 2
 829: IFFALSE 864
// begin Wait ( Rand ( 0 0$03 , 0 0$10 ) ) ;
 831: LD_INT 105
 833: PPUSH
 834: LD_INT 350
 836: PPUSH
 837: CALL_OW 12
 841: PPUSH
 842: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 4 ) , true ) ;
 846: LD_INT 1
 848: PPUSH
 849: LD_INT 4
 851: PPUSH
 852: CALL_OW 12
 856: PPUSH
 857: LD_INT 1
 859: PPUSH
 860: CALL_OW 57
// end ; if l mod [ 15 , 13 , 11 ] [ Difficulty ] = 0 then
 864: LD_VAR 0 3
 868: PUSH
 869: LD_INT 15
 871: PUSH
 872: LD_INT 13
 874: PUSH
 875: LD_INT 11
 877: PUSH
 878: EMPTY
 879: LIST
 880: LIST
 881: LIST
 882: PUSH
 883: LD_OWVAR 67
 887: ARRAY
 888: MOD
 889: PUSH
 890: LD_INT 0
 892: EQUAL
 893: IFFALSE 909
// time := time + 2 2$00 ;
 895: LD_ADDR_VAR 0 1
 899: PUSH
 900: LD_VAR 0 1
 904: PUSH
 905: LD_INT 4200
 907: PLUS
 908: ST_TO_ADDR
// end until false ;
 909: LD_INT 0
 911: IFFALSE 716
// end ; end_of_file
 913: PPOPN 3
 915: END
// export function PrepareVulcanoBase ; var i , filter , hp , un , area , russian_in_base ; begin
 916: LD_INT 0
 918: PPUSH
 919: PPUSH
 920: PPUSH
 921: PPUSH
 922: PPUSH
 923: PPUSH
 924: PPUSH
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) ;
 925: LD_ADDR_VAR 0 3
 929: PUSH
 930: LD_INT 22
 932: PUSH
 933: LD_INT 4
 935: PUSH
 936: EMPTY
 937: LIST
 938: LIST
 939: PUSH
 940: LD_INT 21
 942: PUSH
 943: LD_INT 3
 945: PUSH
 946: EMPTY
 947: LIST
 948: LIST
 949: PUSH
 950: EMPTY
 951: LIST
 952: LIST
 953: PPUSH
 954: CALL_OW 69
 958: ST_TO_ADDR
// hp := [ 470 , 370 , 290 ] [ Difficulty ] ;
 959: LD_ADDR_VAR 0 4
 963: PUSH
 964: LD_INT 470
 966: PUSH
 967: LD_INT 370
 969: PUSH
 970: LD_INT 290
 972: PUSH
 973: EMPTY
 974: LIST
 975: LIST
 976: LIST
 977: PUSH
 978: LD_OWVAR 67
 982: ARRAY
 983: ST_TO_ADDR
// case Difficulty of 2 :
 984: LD_OWVAR 67
 988: PUSH
 989: LD_INT 2
 991: DOUBLE
 992: EQUAL
 993: IFTRUE 997
 995: GO 1028
 997: POP
// begin DestroyUnit ( UnitFilter ( filter , [ f_btype , b_bunker ] ) [ 1 ] ) ;
 998: LD_VAR 0 3
1002: PPUSH
1003: LD_INT 30
1005: PUSH
1006: LD_INT 32
1008: PUSH
1009: EMPTY
1010: LIST
1011: LIST
1012: PPUSH
1013: CALL_OW 72
1017: PUSH
1018: LD_INT 1
1020: ARRAY
1021: PPUSH
1022: CALL_OW 65
// end ; 3 :
1026: GO 1104
1028: LD_INT 3
1030: DOUBLE
1031: EQUAL
1032: IFTRUE 1036
1034: GO 1103
1036: POP
// begin DestroyUnit ( UnitFilter ( filter , [ f_btype , b_bunker ] ) [ 1 ] ) ;
1037: LD_VAR 0 3
1041: PPUSH
1042: LD_INT 30
1044: PUSH
1045: LD_INT 32
1047: PUSH
1048: EMPTY
1049: LIST
1050: LIST
1051: PPUSH
1052: CALL_OW 72
1056: PUSH
1057: LD_INT 1
1059: ARRAY
1060: PPUSH
1061: CALL_OW 65
// DestroyUnit ( UnitFilter ( filter , [ f_btype , b_solar_power ] ) [ Rand ( 1 , 3 ) ] ) ;
1065: LD_VAR 0 3
1069: PPUSH
1070: LD_INT 30
1072: PUSH
1073: LD_INT 27
1075: PUSH
1076: EMPTY
1077: LIST
1078: LIST
1079: PPUSH
1080: CALL_OW 72
1084: PUSH
1085: LD_INT 1
1087: PPUSH
1088: LD_INT 3
1090: PPUSH
1091: CALL_OW 12
1095: ARRAY
1096: PPUSH
1097: CALL_OW 65
// end ; end ;
1101: GO 1104
1103: POP
// for i = 1 to filter do
1104: LD_ADDR_VAR 0 2
1108: PUSH
1109: DOUBLE
1110: LD_INT 1
1112: DEC
1113: ST_TO_ADDR
1114: LD_VAR 0 3
1118: PUSH
1119: FOR_TO
1120: IFFALSE 1157
// SetLives ( filter [ i ] , hp + Rand ( - 29 , 29 ) ) ;
1122: LD_VAR 0 3
1126: PUSH
1127: LD_VAR 0 2
1131: ARRAY
1132: PPUSH
1133: LD_VAR 0 4
1137: PUSH
1138: LD_INT 29
1140: NEG
1141: PPUSH
1142: LD_INT 29
1144: PPUSH
1145: CALL_OW 12
1149: PLUS
1150: PPUSH
1151: CALL_OW 234
1155: GO 1119
1157: POP
1158: POP
// SetBName ( us_depot , Vulcano1 ) ;
1159: LD_INT 50
1161: PPUSH
1162: LD_STRING Vulcano1
1164: PPUSH
1165: CALL_OW 500
// hc_importance := 0 ;
1169: LD_ADDR_OWVAR 32
1173: PUSH
1174: LD_INT 0
1176: ST_TO_ADDR
// uc_side := 3 ;
1177: LD_ADDR_OWVAR 20
1181: PUSH
1182: LD_INT 3
1184: ST_TO_ADDR
// uc_nation := nation_russian ;
1185: LD_ADDR_OWVAR 21
1189: PUSH
1190: LD_INT 3
1192: ST_TO_ADDR
// russian_in_base := [ ] ;
1193: LD_ADDR_VAR 0 7
1197: PUSH
1198: EMPTY
1199: ST_TO_ADDR
// for i = 1 to [ 6 , 6 , 7 ] [ Difficulty ] do
1200: LD_ADDR_VAR 0 2
1204: PUSH
1205: DOUBLE
1206: LD_INT 1
1208: DEC
1209: ST_TO_ADDR
1210: LD_INT 6
1212: PUSH
1213: LD_INT 6
1215: PUSH
1216: LD_INT 7
1218: PUSH
1219: EMPTY
1220: LIST
1221: LIST
1222: LIST
1223: PUSH
1224: LD_OWVAR 67
1228: ARRAY
1229: PUSH
1230: FOR_TO
1231: IFFALSE 1312
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
1233: LD_INT 0
1235: PPUSH
1236: LD_INT 1
1238: PPUSH
1239: LD_INT 4
1241: PUSH
1242: LD_INT 5
1244: PUSH
1245: LD_INT 6
1247: PUSH
1248: EMPTY
1249: LIST
1250: LIST
1251: LIST
1252: PUSH
1253: LD_OWVAR 67
1257: ARRAY
1258: PPUSH
1259: CALL_OW 380
// un := CreateHuman ;
1263: LD_ADDR_VAR 0 5
1267: PUSH
1268: CALL_OW 44
1272: ST_TO_ADDR
// russian_in_base := russian_in_base ^ un ;
1273: LD_ADDR_VAR 0 7
1277: PUSH
1278: LD_VAR 0 7
1282: PUSH
1283: LD_VAR 0 5
1287: ADD
1288: ST_TO_ADDR
// PlaceUnitXYR ( un , 94 , 145 , 10 , false ) ;
1289: LD_VAR 0 5
1293: PPUSH
1294: LD_INT 94
1296: PPUSH
1297: LD_INT 145
1299: PPUSH
1300: LD_INT 10
1302: PPUSH
1303: LD_INT 0
1305: PPUSH
1306: CALL_OW 50
// end ;
1310: GO 1230
1312: POP
1313: POP
// end ;
1314: LD_VAR 0 1
1318: RET
// every 0 0$01 trigger GetDistUnitToSide ( us_depot , 1 ) < 40 do var i , un ;
1319: LD_INT 50
1321: PPUSH
1322: LD_INT 1
1324: PPUSH
1325: CALL 1922 0 2
1329: PUSH
1330: LD_INT 40
1332: LESS
1333: IFFALSE 1530
1335: GO 1337
1337: DISABLE
1338: LD_INT 0
1340: PPUSH
1341: PPUSH
// begin uc_side := 4 ;
1342: LD_ADDR_OWVAR 20
1346: PUSH
1347: LD_INT 4
1349: ST_TO_ADDR
// uc_nation := nation_american ;
1350: LD_ADDR_OWVAR 21
1354: PUSH
1355: LD_INT 1
1357: ST_TO_ADDR
// hc_importance := 0 ;
1358: LD_ADDR_OWVAR 32
1362: PUSH
1363: LD_INT 0
1365: ST_TO_ADDR
// for i = 1 to 7 do
1366: LD_ADDR_VAR 0 1
1370: PUSH
1371: DOUBLE
1372: LD_INT 1
1374: DEC
1375: ST_TO_ADDR
1376: LD_INT 7
1378: PUSH
1379: FOR_TO
1380: IFFALSE 1444
// begin PrepareHuman ( false , Rand ( 1 , 3 ) , us_skill ) ;
1382: LD_INT 0
1384: PPUSH
1385: LD_INT 1
1387: PPUSH
1388: LD_INT 3
1390: PPUSH
1391: CALL_OW 12
1395: PPUSH
1396: LD_EXP 25
1400: PPUSH
1401: CALL_OW 380
// un := CreateHuman ;
1405: LD_ADDR_VAR 0 2
1409: PUSH
1410: CALL_OW 44
1414: ST_TO_ADDR
// PlaceUnitArea ( un , base_resp , false ) ;
1415: LD_VAR 0 2
1419: PPUSH
1420: LD_INT 7
1422: PPUSH
1423: LD_INT 0
1425: PPUSH
1426: CALL_OW 49
// SetLives ( un , 10 ) ;
1430: LD_VAR 0 2
1434: PPUSH
1435: LD_INT 10
1437: PPUSH
1438: CALL_OW 234
// end ;
1442: GO 1379
1444: POP
1445: POP
// for i = 1 to 5 do
1446: LD_ADDR_VAR 0 1
1450: PUSH
1451: DOUBLE
1452: LD_INT 1
1454: DEC
1455: ST_TO_ADDR
1456: LD_INT 5
1458: PUSH
1459: FOR_TO
1460: IFFALSE 1528
// begin PrepareHuman ( false , 4 , us_skill ) ;
1462: LD_INT 0
1464: PPUSH
1465: LD_INT 4
1467: PPUSH
1468: LD_EXP 25
1472: PPUSH
1473: CALL_OW 380
// SetDir ( un , 1 ) ;
1477: LD_VAR 0 2
1481: PPUSH
1482: LD_INT 1
1484: PPUSH
1485: CALL_OW 233
// un := CreateHuman ;
1489: LD_ADDR_VAR 0 2
1493: PUSH
1494: CALL_OW 44
1498: ST_TO_ADDR
// PlaceUnitArea ( un , rekt , false ) ;
1499: LD_VAR 0 2
1503: PPUSH
1504: LD_INT 23
1506: PPUSH
1507: LD_INT 0
1509: PPUSH
1510: CALL_OW 49
// SetLives ( un , 10 ) ;
1514: LD_VAR 0 2
1518: PPUSH
1519: LD_INT 10
1521: PPUSH
1522: CALL_OW 234
// end ;
1526: GO 1459
1528: POP
1529: POP
// end ; end_of_file
1530: PPOPN 2
1532: END
// export function IntBazooka ( list , filter ) ; var ta , c , i ; begin
1533: LD_INT 0
1535: PPUSH
1536: PPUSH
1537: PPUSH
1538: PPUSH
// c := Rand ( 1 , 3 ) ;
1539: LD_ADDR_VAR 0 5
1543: PUSH
1544: LD_INT 1
1546: PPUSH
1547: LD_INT 3
1549: PPUSH
1550: CALL_OW 12
1554: ST_TO_ADDR
// for i = 1 to list do
1555: LD_ADDR_VAR 0 6
1559: PUSH
1560: DOUBLE
1561: LD_INT 1
1563: DEC
1564: ST_TO_ADDR
1565: LD_VAR 0 1
1569: PUSH
1570: FOR_TO
1571: IFFALSE 1753
// for ta in filter do
1573: LD_ADDR_VAR 0 4
1577: PUSH
1578: LD_VAR 0 2
1582: PUSH
1583: FOR_IN
1584: IFFALSE 1749
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
1586: LD_VAR 0 1
1590: PUSH
1591: LD_VAR 0 6
1595: ARRAY
1596: PPUSH
1597: LD_VAR 0 4
1601: PPUSH
1602: CALL_OW 296
1606: PUSH
1607: LD_INT 15
1609: LESSEQUAL
1610: IFFALSE 1747
// begin case c of 1 :
1612: LD_VAR 0 5
1616: PUSH
1617: LD_INT 1
1619: DOUBLE
1620: EQUAL
1621: IFTRUE 1625
1623: GO 1663
1625: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
1626: LD_VAR 0 1
1630: PUSH
1631: LD_VAR 0 6
1635: ARRAY
1636: PPUSH
1637: LD_VAR 0 4
1641: PPUSH
1642: CALL_OW 250
1646: PPUSH
1647: LD_VAR 0 4
1651: PPUSH
1652: CALL_OW 251
1656: PPUSH
1657: CALL_OW 154
1661: GO 1747
1663: LD_INT 2
1665: DOUBLE
1666: EQUAL
1667: IFTRUE 1671
1669: GO 1735
1671: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
1672: LD_VAR 0 1
1676: PUSH
1677: LD_VAR 0 6
1681: ARRAY
1682: PPUSH
1683: LD_VAR 0 4
1687: PPUSH
1688: CALL_OW 250
1692: PUSH
1693: LD_INT 1
1695: NEG
1696: PPUSH
1697: LD_INT 1
1699: PPUSH
1700: CALL_OW 12
1704: PLUS
1705: PPUSH
1706: LD_VAR 0 4
1710: PPUSH
1711: CALL_OW 251
1715: PUSH
1716: LD_INT 1
1718: NEG
1719: PPUSH
1720: LD_INT 1
1722: PPUSH
1723: CALL_OW 12
1727: PLUS
1728: PPUSH
1729: CALL_OW 153
1733: GO 1747
1735: LD_INT 3
1737: DOUBLE
1738: EQUAL
1739: IFTRUE 1743
1741: GO 1746
1743: POP
// ; end ;
1744: GO 1747
1746: POP
// end ; end ;
1747: GO 1583
1749: POP
1750: POP
1751: GO 1570
1753: POP
1754: POP
// end ;
1755: LD_VAR 0 3
1759: RET
// export function PrepareApeman ( n ) ; var un , i ; begin
1760: LD_INT 0
1762: PPUSH
1763: PPUSH
1764: PPUSH
// for i = 1 to n do
1765: LD_ADDR_VAR 0 4
1769: PUSH
1770: DOUBLE
1771: LD_INT 1
1773: DEC
1774: ST_TO_ADDR
1775: LD_VAR 0 1
1779: PUSH
1780: FOR_TO
1781: IFFALSE 1915
// begin uc_side := 0 ;
1783: LD_ADDR_OWVAR 20
1787: PUSH
1788: LD_INT 0
1790: ST_TO_ADDR
// uc_nation := 0 ;
1791: LD_ADDR_OWVAR 21
1795: PUSH
1796: LD_INT 0
1798: ST_TO_ADDR
// hc_class := class_apeman ;
1799: LD_ADDR_OWVAR 28
1803: PUSH
1804: LD_INT 12
1806: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
1807: LD_ADDR_OWVAR 31
1811: PUSH
1812: LD_INT 0
1814: PUSH
1815: LD_INT 0
1817: PUSH
1818: LD_INT 0
1820: PUSH
1821: LD_INT 0
1823: PUSH
1824: EMPTY
1825: LIST
1826: LIST
1827: LIST
1828: LIST
1829: ST_TO_ADDR
// hc_name :=  ;
1830: LD_ADDR_OWVAR 26
1834: PUSH
1835: LD_STRING 
1837: ST_TO_ADDR
// hc_gallery :=  ;
1838: LD_ADDR_OWVAR 33
1842: PUSH
1843: LD_STRING 
1845: ST_TO_ADDR
// hc_importance := 0 ;
1846: LD_ADDR_OWVAR 32
1850: PUSH
1851: LD_INT 0
1853: ST_TO_ADDR
// un := CreateHuman ;
1854: LD_ADDR_VAR 0 3
1858: PUSH
1859: CALL_OW 44
1863: ST_TO_ADDR
// PlaceUnitArea ( un , [ ape1 , ape2 ] [ Rand ( 1 , 2 ) ] , false ) ;
1864: LD_VAR 0 3
1868: PPUSH
1869: LD_INT 19
1871: PUSH
1872: LD_INT 20
1874: PUSH
1875: EMPTY
1876: LIST
1877: LIST
1878: PUSH
1879: LD_INT 1
1881: PPUSH
1882: LD_INT 2
1884: PPUSH
1885: CALL_OW 12
1889: ARRAY
1890: PPUSH
1891: LD_INT 0
1893: PPUSH
1894: CALL_OW 49
// Wait ( Rand ( 0 0$33 , 2 2$33 ) ) ;
1898: LD_INT 1155
1900: PPUSH
1901: LD_INT 5355
1903: PPUSH
1904: CALL_OW 12
1908: PPUSH
1909: CALL_OW 67
// end ;
1913: GO 1780
1915: POP
1916: POP
// end ;
1917: LD_VAR 0 2
1921: RET
// export function GetDistUnitToSide ( unit , side ) ; var tmp , dist ; begin
1922: LD_INT 0
1924: PPUSH
1925: PPUSH
1926: PPUSH
// tmp := NearestUnitToUnit ( FilterAllUnits ( [ f_side , side ] ) , unit ) ;
1927: LD_ADDR_VAR 0 4
1931: PUSH
1932: LD_INT 22
1934: PUSH
1935: LD_VAR 0 2
1939: PUSH
1940: EMPTY
1941: LIST
1942: LIST
1943: PPUSH
1944: CALL_OW 69
1948: PPUSH
1949: LD_VAR 0 1
1953: PPUSH
1954: CALL_OW 74
1958: ST_TO_ADDR
// dist := GetDistUnits ( unit , tmp ) ;
1959: LD_ADDR_VAR 0 5
1963: PUSH
1964: LD_VAR 0 1
1968: PPUSH
1969: LD_VAR 0 4
1973: PPUSH
1974: CALL_OW 296
1978: ST_TO_ADDR
// if dist >= 9999 then
1979: LD_VAR 0 5
1983: PUSH
1984: LD_INT 9999
1986: GREATEREQUAL
1987: IFFALSE 2000
// result := - 1 else
1989: LD_ADDR_VAR 0 3
1993: PUSH
1994: LD_INT 1
1996: NEG
1997: ST_TO_ADDR
1998: GO 2010
// result := dist ;
2000: LD_ADDR_VAR 0 3
2004: PUSH
2005: LD_VAR 0 5
2009: ST_TO_ADDR
// end ;
2010: LD_VAR 0 3
2014: RET
// export function NearestUnitToSide ( plist , side ) ; var i , tmp , unit ; begin
2015: LD_INT 0
2017: PPUSH
2018: PPUSH
2019: PPUSH
2020: PPUSH
// tmp := 9999 ;
2021: LD_ADDR_VAR 0 5
2025: PUSH
2026: LD_INT 9999
2028: ST_TO_ADDR
// for i = 1 to plist do
2029: LD_ADDR_VAR 0 4
2033: PUSH
2034: DOUBLE
2035: LD_INT 1
2037: DEC
2038: ST_TO_ADDR
2039: LD_VAR 0 1
2043: PUSH
2044: FOR_TO
2045: IFFALSE 2119
// if GetDistUnitToSide ( plist [ i ] , side ) < tmp then
2047: LD_VAR 0 1
2051: PUSH
2052: LD_VAR 0 4
2056: ARRAY
2057: PPUSH
2058: LD_VAR 0 2
2062: PPUSH
2063: CALL 1922 0 2
2067: PUSH
2068: LD_VAR 0 5
2072: LESS
2073: IFFALSE 2117
// begin tmp := GetDistUnitToSide ( plist [ i ] , side ) ;
2075: LD_ADDR_VAR 0 5
2079: PUSH
2080: LD_VAR 0 1
2084: PUSH
2085: LD_VAR 0 4
2089: ARRAY
2090: PPUSH
2091: LD_VAR 0 2
2095: PPUSH
2096: CALL 1922 0 2
2100: ST_TO_ADDR
// unit := plist [ i ] ;
2101: LD_ADDR_VAR 0 6
2105: PUSH
2106: LD_VAR 0 1
2110: PUSH
2111: LD_VAR 0 4
2115: ARRAY
2116: ST_TO_ADDR
// end ;
2117: GO 2044
2119: POP
2120: POP
// result := unit ;
2121: LD_ADDR_VAR 0 3
2125: PUSH
2126: LD_VAR 0 6
2130: ST_TO_ADDR
// end ;
2131: LD_VAR 0 3
2135: RET
// export function CalculateCommanderPoints ; var points , crates_collected , sib_collected , i ; begin
2136: LD_INT 0
2138: PPUSH
2139: PPUSH
2140: PPUSH
2141: PPUSH
2142: PPUSH
// points := [ 1000 , 2500 , 5000 ] [ Difficulty ] ;
2143: LD_ADDR_VAR 0 2
2147: PUSH
2148: LD_INT 1000
2150: PUSH
2151: LD_INT 2500
2153: PUSH
2154: LD_INT 5000
2156: PUSH
2157: EMPTY
2158: LIST
2159: LIST
2160: LIST
2161: PUSH
2162: LD_OWVAR 67
2166: ARRAY
2167: ST_TO_ADDR
// points := points + ( - 1 * FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) * 30 ) ;
2168: LD_ADDR_VAR 0 2
2172: PUSH
2173: LD_VAR 0 2
2177: PUSH
2178: LD_INT 1
2180: NEG
2181: PUSH
2182: LD_INT 22
2184: PUSH
2185: LD_OWVAR 2
2189: PUSH
2190: EMPTY
2191: LIST
2192: LIST
2193: PUSH
2194: LD_INT 21
2196: PUSH
2197: LD_INT 3
2199: PUSH
2200: EMPTY
2201: LIST
2202: LIST
2203: PUSH
2204: EMPTY
2205: LIST
2206: LIST
2207: PPUSH
2208: CALL_OW 69
2212: MUL
2213: PUSH
2214: LD_INT 30
2216: MUL
2217: PLUS
2218: ST_TO_ADDR
// points := points + ( kill_counter * 10 ) ;
2219: LD_ADDR_VAR 0 2
2223: PUSH
2224: LD_VAR 0 2
2228: PUSH
2229: LD_EXP 16
2233: PUSH
2234: LD_INT 10
2236: MUL
2237: PLUS
2238: ST_TO_ADDR
// points := points + ( - 1 * kill_counter * 20 ) ;
2239: LD_ADDR_VAR 0 2
2243: PUSH
2244: LD_VAR 0 2
2248: PUSH
2249: LD_INT 1
2251: NEG
2252: PUSH
2253: LD_EXP 16
2257: MUL
2258: PUSH
2259: LD_INT 20
2261: MUL
2262: PLUS
2263: ST_TO_ADDR
// points := points + ( - 1 * ( ( tick / 35 ) / 60 ) * 25 ) ;
2264: LD_ADDR_VAR 0 2
2268: PUSH
2269: LD_VAR 0 2
2273: PUSH
2274: LD_INT 1
2276: NEG
2277: PUSH
2278: LD_OWVAR 1
2282: PUSH
2283: LD_INT 35
2285: DIVREAL
2286: PUSH
2287: LD_INT 60
2289: DIVREAL
2290: MUL
2291: PUSH
2292: LD_INT 25
2294: MUL
2295: PLUS
2296: ST_TO_ADDR
// points := points + ( tech_counter * 15 ) ;
2297: LD_ADDR_VAR 0 2
2301: PUSH
2302: LD_VAR 0 2
2306: PUSH
2307: LD_EXP 18
2311: PUSH
2312: LD_INT 15
2314: MUL
2315: PLUS
2316: ST_TO_ADDR
// points := points + ( - 1 * sib_contamin_counter ) * 1000 ;
2317: LD_ADDR_VAR 0 2
2321: PUSH
2322: LD_VAR 0 2
2326: PUSH
2327: LD_INT 1
2329: NEG
2330: PUSH
2331: LD_EXP 19
2335: MUL
2336: PUSH
2337: LD_INT 1000
2339: MUL
2340: PLUS
2341: ST_TO_ADDR
// points := points + ( veh_counter * 5 ) ;
2342: LD_ADDR_VAR 0 2
2346: PUSH
2347: LD_VAR 0 2
2351: PUSH
2352: LD_EXP 17
2356: PUSH
2357: LD_INT 5
2359: MUL
2360: PLUS
2361: ST_TO_ADDR
// result := points ;
2362: LD_ADDR_VAR 0 1
2366: PUSH
2367: LD_VAR 0 2
2371: ST_TO_ADDR
// end ; end_of_file
2372: LD_VAR 0 1
2376: RET
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2377: LD_VAR 0 1
2381: PPUSH
2382: CALL 32325 0 1
// if un = ru_cargo then
2386: LD_VAR 0 1
2390: PUSH
2391: LD_EXP 29
2395: EQUAL
2396: IFFALSE 2406
// ru_cargo := 0 ;
2398: LD_ADDR_EXP 29
2402: PUSH
2403: LD_INT 0
2405: ST_TO_ADDR
// if GetSide ( un ) = your_side then
2406: LD_VAR 0 1
2410: PPUSH
2411: CALL_OW 255
2415: PUSH
2416: LD_OWVAR 2
2420: EQUAL
2421: IFFALSE 2437
// dead_counter := dead_counter + 1 ;
2423: LD_ADDR_EXP 15
2427: PUSH
2428: LD_EXP 15
2432: PUSH
2433: LD_INT 1
2435: PLUS
2436: ST_TO_ADDR
// if GetSide ( un ) in FilterAllUnits ( [ f_enemy , your_side ] ) then
2437: LD_VAR 0 1
2441: PPUSH
2442: CALL_OW 255
2446: PUSH
2447: LD_INT 81
2449: PUSH
2450: LD_OWVAR 2
2454: PUSH
2455: EMPTY
2456: LIST
2457: LIST
2458: PPUSH
2459: CALL_OW 69
2463: IN
2464: IFFALSE 2480
// kill_counter := kill_counter + 1 ;
2466: LD_ADDR_EXP 16
2470: PUSH
2471: LD_EXP 16
2475: PUSH
2476: LD_INT 1
2478: PLUS
2479: ST_TO_ADDR
// if un = player_commander then
2480: LD_VAR 0 1
2484: PUSH
2485: LD_EXP 11
2489: EQUAL
2490: IFFALSE 2499
// YouLost ( vulcano-lost ) ;
2492: LD_STRING vulcano-lost
2494: PPUSH
2495: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) then
2499: LD_VAR 0 1
2503: PUSH
2504: LD_INT 22
2506: PUSH
2507: LD_INT 3
2509: PUSH
2510: EMPTY
2511: LIST
2512: LIST
2513: PUSH
2514: LD_INT 21
2516: PUSH
2517: LD_INT 3
2519: PUSH
2520: EMPTY
2521: LIST
2522: LIST
2523: PUSH
2524: EMPTY
2525: LIST
2526: LIST
2527: PPUSH
2528: CALL_OW 69
2532: IN
2533: IFFALSE 2649
// begin if GetBType ( un ) = b_turret or GetBType ( un ) = b_siberite_power then
2535: LD_VAR 0 1
2539: PPUSH
2540: CALL_OW 266
2544: PUSH
2545: LD_INT 33
2547: EQUAL
2548: PUSH
2549: LD_VAR 0 1
2553: PPUSH
2554: CALL_OW 266
2558: PUSH
2559: LD_INT 28
2561: EQUAL
2562: OR
2563: IFFALSE 2649
// begin ru_blist := ru_blist ^ GetBType ( un ) ;
2565: LD_ADDR_EXP 30
2569: PUSH
2570: LD_EXP 30
2574: PUSH
2575: LD_VAR 0 1
2579: PPUSH
2580: CALL_OW 266
2584: ADD
2585: ST_TO_ADDR
// ru_blist := ru_blist ^ GetX ( un ) ;
2586: LD_ADDR_EXP 30
2590: PUSH
2591: LD_EXP 30
2595: PUSH
2596: LD_VAR 0 1
2600: PPUSH
2601: CALL_OW 250
2605: ADD
2606: ST_TO_ADDR
// ru_blist := ru_blist ^ GetY ( un ) ;
2607: LD_ADDR_EXP 30
2611: PUSH
2612: LD_EXP 30
2616: PUSH
2617: LD_VAR 0 1
2621: PPUSH
2622: CALL_OW 251
2626: ADD
2627: ST_TO_ADDR
// ru_blist := ru_blist ^ GetDir ( un ) ;
2628: LD_ADDR_EXP 30
2632: PUSH
2633: LD_EXP 30
2637: PUSH
2638: LD_VAR 0 1
2642: PPUSH
2643: CALL_OW 254
2647: ADD
2648: ST_TO_ADDR
// end ; end ; if un in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) then
2649: LD_VAR 0 1
2653: PUSH
2654: LD_INT 22
2656: PUSH
2657: LD_INT 8
2659: PUSH
2660: EMPTY
2661: LIST
2662: LIST
2663: PUSH
2664: LD_INT 21
2666: PUSH
2667: LD_INT 3
2669: PUSH
2670: EMPTY
2671: LIST
2672: LIST
2673: PUSH
2674: EMPTY
2675: LIST
2676: LIST
2677: PPUSH
2678: CALL_OW 69
2682: IN
2683: IFFALSE 2827
// begin if GetBType ( un ) = b_barracks then
2685: LD_VAR 0 1
2689: PPUSH
2690: CALL_OW 266
2694: PUSH
2695: LD_INT 5
2697: EQUAL
2698: IFFALSE 2716
// legion_blist := legion_blist ^ b_armoury else
2700: LD_ADDR_EXP 38
2704: PUSH
2705: LD_EXP 38
2709: PUSH
2710: LD_INT 4
2712: ADD
2713: ST_TO_ADDR
2714: GO 2764
// if not GetBType ( un ) in [ b_warehouse , b_lab , b_lab_full ] then
2716: LD_VAR 0 1
2720: PPUSH
2721: CALL_OW 266
2725: PUSH
2726: LD_INT 1
2728: PUSH
2729: LD_INT 6
2731: PUSH
2732: LD_INT 8
2734: PUSH
2735: EMPTY
2736: LIST
2737: LIST
2738: LIST
2739: IN
2740: NOT
2741: IFFALSE 2764
// legion_blist := legion_blist ^ GetBType ( un ) ;
2743: LD_ADDR_EXP 38
2747: PUSH
2748: LD_EXP 38
2752: PUSH
2753: LD_VAR 0 1
2757: PPUSH
2758: CALL_OW 266
2762: ADD
2763: ST_TO_ADDR
// legion_blist := legion_blist ^ GetX ( un ) ;
2764: LD_ADDR_EXP 38
2768: PUSH
2769: LD_EXP 38
2773: PUSH
2774: LD_VAR 0 1
2778: PPUSH
2779: CALL_OW 250
2783: ADD
2784: ST_TO_ADDR
// legion_blist := legion_blist ^ GetY ( un ) ;
2785: LD_ADDR_EXP 38
2789: PUSH
2790: LD_EXP 38
2794: PUSH
2795: LD_VAR 0 1
2799: PPUSH
2800: CALL_OW 251
2804: ADD
2805: ST_TO_ADDR
// legion_blist := legion_blist ^ GetDir ( un ) ;
2806: LD_ADDR_EXP 38
2810: PUSH
2811: LD_EXP 38
2815: PUSH
2816: LD_VAR 0 1
2820: PPUSH
2821: CALL_OW 254
2825: ADD
2826: ST_TO_ADDR
// end ; if un in legion_force then
2827: LD_VAR 0 1
2831: PUSH
2832: LD_EXP 35
2836: IN
2837: IFFALSE 2855
// legion_force := legion_force diff un ;
2839: LD_ADDR_EXP 35
2843: PUSH
2844: LD_EXP 35
2848: PUSH
2849: LD_VAR 0 1
2853: DIFF
2854: ST_TO_ADDR
// if un in ru_force then
2855: LD_VAR 0 1
2859: PUSH
2860: LD_EXP 27
2864: IN
2865: IFFALSE 2883
// ru_force := ru_force diff un ;
2867: LD_ADDR_EXP 27
2871: PUSH
2872: LD_EXP 27
2876: PUSH
2877: LD_VAR 0 1
2881: DIFF
2882: ST_TO_ADDR
// if un in al_force then
2883: LD_VAR 0 1
2887: PUSH
2888: LD_EXP 42
2892: IN
2893: IFFALSE 2911
// al_force := al_force diff un ;
2895: LD_ADDR_EXP 42
2899: PUSH
2900: LD_EXP 42
2904: PUSH
2905: LD_VAR 0 1
2909: DIFF
2910: ST_TO_ADDR
// end ;
2911: PPOPN 1
2913: END
// on BuildingComplete ( b ) do var i ;
2914: LD_INT 0
2916: PPUSH
// begin if GetSide ( b ) = 8 then
2917: LD_VAR 0 1
2921: PPUSH
2922: CALL_OW 255
2926: PUSH
2927: LD_INT 8
2929: EQUAL
2930: IFFALSE 2970
// for i = 1 to 4 do
2932: LD_ADDR_VAR 0 2
2936: PUSH
2937: DOUBLE
2938: LD_INT 1
2940: DEC
2941: ST_TO_ADDR
2942: LD_INT 4
2944: PUSH
2945: FOR_TO
2946: IFFALSE 2968
// legion_blist := Delete ( legion_blist , 1 ) ;
2948: LD_ADDR_EXP 38
2952: PUSH
2953: LD_EXP 38
2957: PPUSH
2958: LD_INT 1
2960: PPUSH
2961: CALL_OW 3
2965: ST_TO_ADDR
2966: GO 2945
2968: POP
2969: POP
// if GetSide ( b ) = 3 then
2970: LD_VAR 0 1
2974: PPUSH
2975: CALL_OW 255
2979: PUSH
2980: LD_INT 3
2982: EQUAL
2983: IFFALSE 3023
// for i = 1 to 4 do
2985: LD_ADDR_VAR 0 2
2989: PUSH
2990: DOUBLE
2991: LD_INT 1
2993: DEC
2994: ST_TO_ADDR
2995: LD_INT 4
2997: PUSH
2998: FOR_TO
2999: IFFALSE 3021
// ru_blist := Delete ( ru_blist , 1 ) ;
3001: LD_ADDR_EXP 30
3005: PUSH
3006: LD_EXP 30
3010: PPUSH
3011: LD_INT 1
3013: PPUSH
3014: CALL_OW 3
3018: ST_TO_ADDR
3019: GO 2998
3021: POP
3022: POP
// end ;
3023: PPOPN 2
3025: END
// on VehicleConstructed ( veh , fac ) do begin if not GetWeapon ( veh ) in [ ru_cargo_bay , ru_siberium_rocket ] then
3026: LD_VAR 0 1
3030: PPUSH
3031: CALL_OW 264
3035: PUSH
3036: LD_INT 51
3038: PUSH
3039: LD_INT 48
3041: PUSH
3042: EMPTY
3043: LIST
3044: LIST
3045: IN
3046: NOT
3047: IFFALSE 3095
// begin if GetSide ( veh ) = 3 then
3049: LD_VAR 0 1
3053: PPUSH
3054: CALL_OW 255
3058: PUSH
3059: LD_INT 3
3061: EQUAL
3062: IFFALSE 3095
// begin ComMoveXY ( veh , 149 , 8 ) ;
3064: LD_VAR 0 1
3068: PPUSH
3069: LD_INT 149
3071: PPUSH
3072: LD_INT 8
3074: PPUSH
3075: CALL_OW 111
// ru_force := ru_force ^ veh ;
3079: LD_ADDR_EXP 27
3083: PUSH
3084: LD_EXP 27
3088: PUSH
3089: LD_VAR 0 1
3093: ADD
3094: ST_TO_ADDR
// end ; end ; if not GetWeapon ( veh ) in [ ar_cargo_bay , ar_control_tower ] then
3095: LD_VAR 0 1
3099: PPUSH
3100: CALL_OW 264
3104: PUSH
3105: LD_INT 32
3107: PUSH
3108: LD_INT 31
3110: PUSH
3111: EMPTY
3112: LIST
3113: LIST
3114: IN
3115: NOT
3116: IFFALSE 3149
// begin if GetSide ( veh ) = 8 then
3118: LD_VAR 0 1
3122: PPUSH
3123: CALL_OW 255
3127: PUSH
3128: LD_INT 8
3130: EQUAL
3131: IFFALSE 3149
// legion_force := legion_force ^ veh ;
3133: LD_ADDR_EXP 35
3137: PUSH
3138: LD_EXP 35
3142: PUSH
3143: LD_VAR 0 1
3147: ADD
3148: ST_TO_ADDR
// end ; if GetSide ( veh ) = 3 and not ru_cargo and GetWeapon ( veh ) = ru_cargo_bay then
3149: LD_VAR 0 1
3153: PPUSH
3154: CALL_OW 255
3158: PUSH
3159: LD_INT 3
3161: EQUAL
3162: PUSH
3163: LD_EXP 29
3167: NOT
3168: AND
3169: PUSH
3170: LD_VAR 0 1
3174: PPUSH
3175: CALL_OW 264
3179: PUSH
3180: LD_INT 51
3182: EQUAL
3183: AND
3184: IFFALSE 3196
// ru_cargo := veh ;
3186: LD_ADDR_EXP 29
3190: PUSH
3191: LD_VAR 0 1
3195: ST_TO_ADDR
// if GetSide ( veh ) = 7 and your_side <> 7 then
3196: LD_VAR 0 1
3200: PPUSH
3201: CALL_OW 255
3205: PUSH
3206: LD_INT 7
3208: EQUAL
3209: PUSH
3210: LD_OWVAR 2
3214: PUSH
3215: LD_INT 7
3217: NONEQUAL
3218: AND
3219: IFFALSE 3237
// al_force := al_force ^ veh ;
3221: LD_ADDR_EXP 42
3225: PUSH
3226: LD_EXP 42
3230: PUSH
3231: LD_VAR 0 1
3235: ADD
3236: ST_TO_ADDR
// if GetSide ( veh ) = your_side then
3237: LD_VAR 0 1
3241: PPUSH
3242: CALL_OW 255
3246: PUSH
3247: LD_OWVAR 2
3251: EQUAL
3252: IFFALSE 3268
// veh_counter := veh_counter + 1 ;
3254: LD_ADDR_EXP 17
3258: PUSH
3259: LD_EXP 17
3263: PUSH
3264: LD_INT 1
3266: PLUS
3267: ST_TO_ADDR
// end ;
3268: PPOPN 2
3270: END
// on SibDepositContaminated ( contaminating_scientist , x_of_deposit , y_of_deposit ) do begin if GetSide ( contaminating_scientist ) <> your_side then
3271: LD_VAR 0 1
3275: PPUSH
3276: CALL_OW 255
3280: PUSH
3281: LD_OWVAR 2
3285: NONEQUAL
3286: IFFALSE 3302
// sib_contamin_counter := sib_contamin_counter + 1 ;
3288: LD_ADDR_EXP 19
3292: PUSH
3293: LD_EXP 19
3297: PUSH
3298: LD_INT 1
3300: PLUS
3301: ST_TO_ADDR
// end ;
3302: PPOPN 3
3304: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = your_side then
3305: LD_VAR 0 2
3309: PPUSH
3310: CALL_OW 255
3314: PUSH
3315: LD_OWVAR 2
3319: EQUAL
3320: IFFALSE 3336
// tech_counter := tech_counter + 1 ;
3322: LD_ADDR_EXP 18
3326: PUSH
3327: LD_EXP 18
3331: PUSH
3332: LD_INT 1
3334: PLUS
3335: ST_TO_ADDR
// if tech = 53 and your_side = 1 then
3336: LD_VAR 0 1
3340: PUSH
3341: LD_INT 53
3343: EQUAL
3344: PUSH
3345: LD_OWVAR 2
3349: PUSH
3350: LD_INT 1
3352: EQUAL
3353: AND
3354: IFFALSE 3369
// SetTech ( 80 , 1 , state_researched ) ;
3356: LD_INT 80
3358: PPUSH
3359: LD_INT 1
3361: PPUSH
3362: LD_INT 2
3364: PPUSH
3365: CALL_OW 322
// end ;
3369: PPOPN 2
3371: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 8 and GetControl ( un ) = control_remote then
3372: LD_VAR 0 1
3376: PPUSH
3377: CALL_OW 255
3381: PUSH
3382: LD_INT 8
3384: EQUAL
3385: PUSH
3386: LD_VAR 0 1
3390: PPUSH
3391: CALL_OW 263
3395: PUSH
3396: LD_INT 2
3398: EQUAL
3399: AND
3400: IFFALSE 3411
// ComAutodestruct ( un ) ;
3402: LD_VAR 0 1
3406: PPUSH
3407: CALL 69110 0 1
// end ;
3411: PPOPN 1
3413: END
// on SailEvent ( event ) do begin case event of event_legion_attack :
3414: LD_VAR 0 1
3418: PUSH
3419: LD_EXP 20
3423: DOUBLE
3424: EQUAL
3425: IFTRUE 3429
3427: GO 3436
3429: POP
// LegionAttack ( ) ; event_alliance_attack :
3430: CALL 10683 0 0
3434: GO 3471
3436: LD_EXP 22
3440: DOUBLE
3441: EQUAL
3442: IFTRUE 3446
3444: GO 3453
3446: POP
// AllianceAttack ( ) ; event_russian_attack :
3447: CALL 18179 0 0
3451: GO 3471
3453: LD_EXP 21
3457: DOUBLE
3458: EQUAL
3459: IFTRUE 3463
3461: GO 3470
3463: POP
// RussianAttack ( ) ; end ;
3464: CALL 7150 0 0
3468: GO 3471
3470: POP
// end ;
3471: PPOPN 1
3473: END
// every 9 9$30 trigger FilterAllUnits ( [ f_class , class_apeman ] ) < 9 do
3474: LD_INT 25
3476: PUSH
3477: LD_INT 12
3479: PUSH
3480: EMPTY
3481: LIST
3482: LIST
3483: PPUSH
3484: CALL_OW 69
3488: PUSH
3489: LD_INT 9
3491: LESS
3492: IFFALSE 3525
3494: GO 3496
3496: DISABLE
// begin enable ;
3497: ENABLE
// PrepareApeman ( 8 - ( FilterAllUnits ( [ f_class , class_apeman ] ) + 0 ) ) ;
3498: LD_INT 8
3500: PUSH
3501: LD_INT 25
3503: PUSH
3504: LD_INT 12
3506: PUSH
3507: EMPTY
3508: LIST
3509: LIST
3510: PPUSH
3511: CALL_OW 69
3515: PUSH
3516: LD_INT 0
3518: PLUS
3519: MINUS
3520: PPUSH
3521: CALL 1760 0 1
// end ;
3525: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
3526: LD_VAR 0 1
3530: PPUSH
3531: LD_VAR 0 2
3535: PPUSH
3536: LD_VAR 0 3
3540: PPUSH
3541: CALL 32423 0 3
// end ;
3545: PPOPN 3
3547: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
3548: LD_VAR 0 1
3552: PPUSH
3553: CALL 32431 0 1
// end ; end_of_file
3557: PPOPN 1
3559: END
// export ru_force , ru_skill , ru_cargo , ru_blist , ru_vlist , ru_amount , ru_time , ru_teleport_exit ; export function PrepareRussian ; var i , un , ru_depot , ru_factory , ru_teleport , ru_barracks , ru_bunkers , ru_buildings , ru_vehicles , ru_humans ; begin
3560: LD_INT 0
3562: PPUSH
3563: PPUSH
3564: PPUSH
3565: PPUSH
3566: PPUSH
3567: PPUSH
3568: PPUSH
3569: PPUSH
3570: PPUSH
3571: PPUSH
3572: PPUSH
// uc_side := 3 ;
3573: LD_ADDR_OWVAR 20
3577: PUSH
3578: LD_INT 3
3580: ST_TO_ADDR
// uc_nation := nation_russian ;
3581: LD_ADDR_OWVAR 21
3585: PUSH
3586: LD_INT 3
3588: ST_TO_ADDR
// ru_depot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
3589: LD_ADDR_VAR 0 4
3593: PUSH
3594: LD_INT 22
3596: PUSH
3597: LD_INT 3
3599: PUSH
3600: EMPTY
3601: LIST
3602: LIST
3603: PUSH
3604: LD_INT 30
3606: PUSH
3607: LD_INT 1
3609: PUSH
3610: EMPTY
3611: LIST
3612: LIST
3613: PUSH
3614: EMPTY
3615: LIST
3616: LIST
3617: PPUSH
3618: CALL_OW 69
3622: PUSH
3623: LD_INT 1
3625: ARRAY
3626: ST_TO_ADDR
// ru_factory := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3627: LD_ADDR_VAR 0 5
3631: PUSH
3632: LD_INT 22
3634: PUSH
3635: LD_INT 3
3637: PUSH
3638: EMPTY
3639: LIST
3640: LIST
3641: PUSH
3642: LD_INT 30
3644: PUSH
3645: LD_INT 3
3647: PUSH
3648: EMPTY
3649: LIST
3650: LIST
3651: PUSH
3652: EMPTY
3653: LIST
3654: LIST
3655: PPUSH
3656: CALL_OW 69
3660: PUSH
3661: LD_INT 1
3663: ARRAY
3664: ST_TO_ADDR
// ru_teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] ;
3665: LD_ADDR_VAR 0 6
3669: PUSH
3670: LD_INT 22
3672: PUSH
3673: LD_INT 3
3675: PUSH
3676: EMPTY
3677: LIST
3678: LIST
3679: PUSH
3680: LD_INT 30
3682: PUSH
3683: LD_INT 34
3685: PUSH
3686: EMPTY
3687: LIST
3688: LIST
3689: PUSH
3690: EMPTY
3691: LIST
3692: LIST
3693: PPUSH
3694: CALL_OW 69
3698: PUSH
3699: LD_INT 1
3701: ARRAY
3702: ST_TO_ADDR
// ru_bunkers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
3703: LD_ADDR_VAR 0 8
3707: PUSH
3708: LD_INT 22
3710: PUSH
3711: LD_INT 3
3713: PUSH
3714: EMPTY
3715: LIST
3716: LIST
3717: PUSH
3718: LD_INT 30
3720: PUSH
3721: LD_INT 33
3723: PUSH
3724: EMPTY
3725: LIST
3726: LIST
3727: PUSH
3728: EMPTY
3729: LIST
3730: LIST
3731: PPUSH
3732: CALL_OW 69
3736: ST_TO_ADDR
// ru_barracks := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
3737: LD_ADDR_VAR 0 7
3741: PUSH
3742: LD_INT 22
3744: PUSH
3745: LD_INT 3
3747: PUSH
3748: EMPTY
3749: LIST
3750: LIST
3751: PUSH
3752: LD_INT 30
3754: PUSH
3755: LD_INT 5
3757: PUSH
3758: EMPTY
3759: LIST
3760: LIST
3761: PUSH
3762: EMPTY
3763: LIST
3764: LIST
3765: PPUSH
3766: CALL_OW 69
3770: PUSH
3771: LD_INT 1
3773: ARRAY
3774: ST_TO_ADDR
// ru_blist := [ ] ;
3775: LD_ADDR_EXP 30
3779: PUSH
3780: EMPTY
3781: ST_TO_ADDR
// ru_vlist := [ ] ;
3782: LD_ADDR_EXP 31
3786: PUSH
3787: EMPTY
3788: ST_TO_ADDR
// ru_teleport_exit := [ 183 , 62 , 147 , 44 ] ;
3789: LD_ADDR_EXP 34
3793: PUSH
3794: LD_INT 183
3796: PUSH
3797: LD_INT 62
3799: PUSH
3800: LD_INT 147
3802: PUSH
3803: LD_INT 44
3805: PUSH
3806: EMPTY
3807: LIST
3808: LIST
3809: LIST
3810: LIST
3811: ST_TO_ADDR
// TeleportExit ( FilterAllUnits ( [ f_btype , b_teleport ] ) [ 1 ] , ru_teleport_exit [ 1 ] , ru_teleport_exit [ 2 ] ) ;
3812: LD_INT 30
3814: PUSH
3815: LD_INT 34
3817: PUSH
3818: EMPTY
3819: LIST
3820: LIST
3821: PPUSH
3822: CALL_OW 69
3826: PUSH
3827: LD_INT 1
3829: ARRAY
3830: PPUSH
3831: LD_EXP 34
3835: PUSH
3836: LD_INT 1
3838: ARRAY
3839: PPUSH
3840: LD_EXP 34
3844: PUSH
3845: LD_INT 2
3847: ARRAY
3848: PPUSH
3849: CALL_OW 243
// ru_amount := [ 4 , 5 , 6 ] [ Difficulty ] ;
3853: LD_ADDR_EXP 32
3857: PUSH
3858: LD_INT 4
3860: PUSH
3861: LD_INT 5
3863: PUSH
3864: LD_INT 6
3866: PUSH
3867: EMPTY
3868: LIST
3869: LIST
3870: LIST
3871: PUSH
3872: LD_OWVAR 67
3876: ARRAY
3877: ST_TO_ADDR
// SetResourceType ( GetBase ( ru_depot ) , mat_cans , 3000 ) ;
3878: LD_VAR 0 4
3882: PPUSH
3883: CALL_OW 274
3887: PPUSH
3888: LD_INT 1
3890: PPUSH
3891: LD_INT 3000
3893: PPUSH
3894: CALL_OW 277
// SetResourceType ( GetBase ( ru_depot ) , mat_oil , 300 ) ;
3898: LD_VAR 0 4
3902: PPUSH
3903: CALL_OW 274
3907: PPUSH
3908: LD_INT 2
3910: PPUSH
3911: LD_INT 300
3913: PPUSH
3914: CALL_OW 277
// hc_gallery :=  ;
3918: LD_ADDR_OWVAR 33
3922: PUSH
3923: LD_STRING 
3925: ST_TO_ADDR
// hc_name :=  ;
3926: LD_ADDR_OWVAR 26
3930: PUSH
3931: LD_STRING 
3933: ST_TO_ADDR
// hc_importance := 0 ;
3934: LD_ADDR_OWVAR 32
3938: PUSH
3939: LD_INT 0
3941: ST_TO_ADDR
// ru_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
3942: LD_ADDR_EXP 28
3946: PUSH
3947: LD_INT 5
3949: PUSH
3950: LD_INT 6
3952: PUSH
3953: LD_INT 7
3955: PUSH
3956: EMPTY
3957: LIST
3958: LIST
3959: LIST
3960: PUSH
3961: LD_OWVAR 67
3965: ARRAY
3966: ST_TO_ADDR
// for i = 1 to 6 do
3967: LD_ADDR_VAR 0 2
3971: PUSH
3972: DOUBLE
3973: LD_INT 1
3975: DEC
3976: ST_TO_ADDR
3977: LD_INT 6
3979: PUSH
3980: FOR_TO
3981: IFFALSE 4139
// begin PrepareHuman ( false , class_bazooker , ru_skill ) ;
3983: LD_INT 0
3985: PPUSH
3986: LD_INT 9
3988: PPUSH
3989: LD_EXP 28
3993: PPUSH
3994: CALL_OW 380
// un := CreateHuman ;
3998: LD_ADDR_VAR 0 3
4002: PUSH
4003: CALL_OW 44
4007: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_barracks ) ;
4008: LD_VAR 0 3
4012: PPUSH
4013: LD_VAR 0 7
4017: PPUSH
4018: CALL_OW 52
// PrepareHuman ( false , 4 , ru_skill ) ;
4022: LD_INT 0
4024: PPUSH
4025: LD_INT 4
4027: PPUSH
4028: LD_EXP 28
4032: PPUSH
4033: CALL_OW 380
// un := CreateHuman ;
4037: LD_ADDR_VAR 0 3
4041: PUSH
4042: CALL_OW 44
4046: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
4047: LD_VAR 0 3
4051: PPUSH
4052: LD_INT 24
4054: PPUSH
4055: CALL_OW 52
// PrepareHuman ( false , 3 , ru_skill ) ;
4059: LD_INT 0
4061: PPUSH
4062: LD_INT 3
4064: PPUSH
4065: LD_EXP 28
4069: PPUSH
4070: CALL_OW 380
// un := CreateHuman ;
4074: LD_ADDR_VAR 0 3
4078: PUSH
4079: CALL_OW 44
4083: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_factory ) ;
4084: LD_VAR 0 3
4088: PPUSH
4089: LD_VAR 0 5
4093: PPUSH
4094: CALL_OW 52
// PrepareHuman ( false , 2 , ru_skill ) ;
4098: LD_INT 0
4100: PPUSH
4101: LD_INT 2
4103: PPUSH
4104: LD_EXP 28
4108: PPUSH
4109: CALL_OW 380
// un := CreateHuman ;
4113: LD_ADDR_VAR 0 3
4117: PUSH
4118: CALL_OW 44
4122: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_depot ) ;
4123: LD_VAR 0 3
4127: PPUSH
4128: LD_VAR 0 4
4132: PPUSH
4133: CALL_OW 52
// end ;
4137: GO 3980
4139: POP
4140: POP
// russian_prepared := true ;
4141: LD_ADDR_EXP 2
4145: PUSH
4146: LD_INT 1
4148: ST_TO_ADDR
// ComConstruct ( ru_factory , ru_medium_wheeled , 3 , control_computer , ru_cargo_bay ) ;
4149: LD_VAR 0 5
4153: PPUSH
4154: LD_INT 21
4156: PPUSH
4157: LD_INT 3
4159: PPUSH
4160: LD_INT 3
4162: PPUSH
4163: LD_INT 51
4165: PPUSH
4166: CALL_OW 125
// end ;
4170: LD_VAR 0 1
4174: RET
// every 0 0$1 trigger legion_mines do var i , p ;
4175: LD_EXP 37
4179: IFFALSE 4391
4181: GO 4183
4183: DISABLE
4184: LD_INT 0
4186: PPUSH
4187: PPUSH
// begin enable ;
4188: ENABLE
// p := 1 ;
4189: LD_ADDR_VAR 0 2
4193: PUSH
4194: LD_INT 1
4196: ST_TO_ADDR
// for i = legion_mines div 2 downto 1 do
4197: LD_ADDR_VAR 0 1
4201: PUSH
4202: DOUBLE
4203: LD_EXP 37
4207: PUSH
4208: LD_INT 2
4210: DIV
4211: INC
4212: ST_TO_ADDR
4213: LD_INT 1
4215: PUSH
4216: FOR_DOWNTO
4217: IFFALSE 4389
// begin if HexInfo ( legion_mines [ p ] , legion_mines [ p + 1 ] ) > 0 then
4219: LD_EXP 37
4223: PUSH
4224: LD_VAR 0 2
4228: ARRAY
4229: PPUSH
4230: LD_EXP 37
4234: PUSH
4235: LD_VAR 0 2
4239: PUSH
4240: LD_INT 1
4242: PLUS
4243: ARRAY
4244: PPUSH
4245: CALL_OW 428
4249: PUSH
4250: LD_INT 0
4252: GREATER
4253: IFFALSE 4387
// if GetSide ( HexInfo ( legion_mines [ p ] , legion_mines [ p + 1 ] ) ) = legion_enemy then
4255: LD_EXP 37
4259: PUSH
4260: LD_VAR 0 2
4264: ARRAY
4265: PPUSH
4266: LD_EXP 37
4270: PUSH
4271: LD_VAR 0 2
4275: PUSH
4276: LD_INT 1
4278: PLUS
4279: ARRAY
4280: PPUSH
4281: CALL_OW 428
4285: PPUSH
4286: CALL_OW 255
4290: PUSH
4291: LD_EXP 40
4295: EQUAL
4296: IFFALSE 4373
// begin LaunchMineAtPos ( legion_mines [ p ] , legion_mines [ p + 1 ] , 8 ) ;
4298: LD_EXP 37
4302: PUSH
4303: LD_VAR 0 2
4307: ARRAY
4308: PPUSH
4309: LD_EXP 37
4313: PUSH
4314: LD_VAR 0 2
4318: PUSH
4319: LD_INT 1
4321: PLUS
4322: ARRAY
4323: PPUSH
4324: LD_INT 8
4326: PPUSH
4327: CALL_OW 456
// legion_mines := Delete ( legion_mines , p ) ;
4331: LD_ADDR_EXP 37
4335: PUSH
4336: LD_EXP 37
4340: PPUSH
4341: LD_VAR 0 2
4345: PPUSH
4346: CALL_OW 3
4350: ST_TO_ADDR
// legion_mines := Delete ( legion_mines , p ) ;
4351: LD_ADDR_EXP 37
4355: PUSH
4356: LD_EXP 37
4360: PPUSH
4361: LD_VAR 0 2
4365: PPUSH
4366: CALL_OW 3
4370: ST_TO_ADDR
// end else
4371: GO 4387
// p := p + 2 ;
4373: LD_ADDR_VAR 0 2
4377: PUSH
4378: LD_VAR 0 2
4382: PUSH
4383: LD_INT 2
4385: PLUS
4386: ST_TO_ADDR
// end ;
4387: GO 4216
4389: POP
4390: POP
// end ;
4391: PPOPN 2
4393: END
// every 0 0$02 trigger FilterAllUnits ( [ f_side , 3 ] ) > 0 and russian_prepared do var ru_depot , ru_factory , ru_teleport , ru_bunkers , ru_buildings , ru_vehicles , ru_humans , ru_barracks , ru_engs , ru_mech , ru_sci , i , tmp , filter , cr , sib_bomb ;
4394: LD_INT 22
4396: PUSH
4397: LD_INT 3
4399: PUSH
4400: EMPTY
4401: LIST
4402: LIST
4403: PPUSH
4404: CALL_OW 69
4408: PUSH
4409: LD_INT 0
4411: GREATER
4412: PUSH
4413: LD_EXP 2
4417: AND
4418: IFFALSE 6651
4420: GO 4422
4422: DISABLE
4423: LD_INT 0
4425: PPUSH
4426: PPUSH
4427: PPUSH
4428: PPUSH
4429: PPUSH
4430: PPUSH
4431: PPUSH
4432: PPUSH
4433: PPUSH
4434: PPUSH
4435: PPUSH
4436: PPUSH
4437: PPUSH
4438: PPUSH
4439: PPUSH
4440: PPUSH
// begin enable ;
4441: ENABLE
// ru_depot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
4442: LD_ADDR_VAR 0 1
4446: PUSH
4447: LD_INT 22
4449: PUSH
4450: LD_INT 3
4452: PUSH
4453: EMPTY
4454: LIST
4455: LIST
4456: PUSH
4457: LD_INT 30
4459: PUSH
4460: LD_INT 1
4462: PUSH
4463: EMPTY
4464: LIST
4465: LIST
4466: PUSH
4467: EMPTY
4468: LIST
4469: LIST
4470: PPUSH
4471: CALL_OW 69
4475: PUSH
4476: LD_INT 1
4478: ARRAY
4479: ST_TO_ADDR
// ru_factory := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
4480: LD_ADDR_VAR 0 2
4484: PUSH
4485: LD_INT 22
4487: PUSH
4488: LD_INT 3
4490: PUSH
4491: EMPTY
4492: LIST
4493: LIST
4494: PUSH
4495: LD_INT 30
4497: PUSH
4498: LD_INT 3
4500: PUSH
4501: EMPTY
4502: LIST
4503: LIST
4504: PUSH
4505: EMPTY
4506: LIST
4507: LIST
4508: PPUSH
4509: CALL_OW 69
4513: PUSH
4514: LD_INT 1
4516: ARRAY
4517: ST_TO_ADDR
// ru_teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] ;
4518: LD_ADDR_VAR 0 3
4522: PUSH
4523: LD_INT 22
4525: PUSH
4526: LD_INT 3
4528: PUSH
4529: EMPTY
4530: LIST
4531: LIST
4532: PUSH
4533: LD_INT 30
4535: PUSH
4536: LD_INT 34
4538: PUSH
4539: EMPTY
4540: LIST
4541: LIST
4542: PUSH
4543: EMPTY
4544: LIST
4545: LIST
4546: PPUSH
4547: CALL_OW 69
4551: PUSH
4552: LD_INT 1
4554: ARRAY
4555: ST_TO_ADDR
// ru_bunkers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
4556: LD_ADDR_VAR 0 4
4560: PUSH
4561: LD_INT 22
4563: PUSH
4564: LD_INT 3
4566: PUSH
4567: EMPTY
4568: LIST
4569: LIST
4570: PUSH
4571: LD_INT 30
4573: PUSH
4574: LD_INT 33
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: PUSH
4581: EMPTY
4582: LIST
4583: LIST
4584: PPUSH
4585: CALL_OW 69
4589: ST_TO_ADDR
// ru_barracks := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
4590: LD_ADDR_VAR 0 8
4594: PUSH
4595: LD_INT 22
4597: PUSH
4598: LD_INT 3
4600: PUSH
4601: EMPTY
4602: LIST
4603: LIST
4604: PUSH
4605: LD_INT 30
4607: PUSH
4608: LD_INT 5
4610: PUSH
4611: EMPTY
4612: LIST
4613: LIST
4614: PUSH
4615: EMPTY
4616: LIST
4617: LIST
4618: PPUSH
4619: CALL_OW 69
4623: PUSH
4624: LD_INT 1
4626: ARRAY
4627: ST_TO_ADDR
// ru_buildings := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
4628: LD_ADDR_VAR 0 5
4632: PUSH
4633: LD_INT 22
4635: PUSH
4636: LD_INT 3
4638: PUSH
4639: EMPTY
4640: LIST
4641: LIST
4642: PUSH
4643: LD_INT 21
4645: PUSH
4646: LD_INT 3
4648: PUSH
4649: EMPTY
4650: LIST
4651: LIST
4652: PUSH
4653: EMPTY
4654: LIST
4655: LIST
4656: PPUSH
4657: CALL_OW 69
4661: ST_TO_ADDR
// ru_vehicles := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
4662: LD_ADDR_VAR 0 6
4666: PUSH
4667: LD_INT 22
4669: PUSH
4670: LD_INT 3
4672: PUSH
4673: EMPTY
4674: LIST
4675: LIST
4676: PUSH
4677: LD_INT 21
4679: PUSH
4680: LD_INT 2
4682: PUSH
4683: EMPTY
4684: LIST
4685: LIST
4686: PUSH
4687: EMPTY
4688: LIST
4689: LIST
4690: PPUSH
4691: CALL_OW 69
4695: ST_TO_ADDR
// ru_humans := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
4696: LD_ADDR_VAR 0 7
4700: PUSH
4701: LD_INT 22
4703: PUSH
4704: LD_INT 3
4706: PUSH
4707: EMPTY
4708: LIST
4709: LIST
4710: PUSH
4711: LD_INT 21
4713: PUSH
4714: LD_INT 1
4716: PUSH
4717: EMPTY
4718: LIST
4719: LIST
4720: PUSH
4721: EMPTY
4722: LIST
4723: LIST
4724: PPUSH
4725: CALL_OW 69
4729: ST_TO_ADDR
// ru_engs := UnitFilter ( ru_humans , [ f_class , 2 ] ) ;
4730: LD_ADDR_VAR 0 9
4734: PUSH
4735: LD_VAR 0 7
4739: PPUSH
4740: LD_INT 25
4742: PUSH
4743: LD_INT 2
4745: PUSH
4746: EMPTY
4747: LIST
4748: LIST
4749: PPUSH
4750: CALL_OW 72
4754: ST_TO_ADDR
// ru_mech := UnitFilter ( ru_humans , [ f_class , 3 ] ) ;
4755: LD_ADDR_VAR 0 10
4759: PUSH
4760: LD_VAR 0 7
4764: PPUSH
4765: LD_INT 25
4767: PUSH
4768: LD_INT 3
4770: PUSH
4771: EMPTY
4772: LIST
4773: LIST
4774: PPUSH
4775: CALL_OW 72
4779: ST_TO_ADDR
// ru_sci := UnitFilter ( ru_humans , [ f_class , 4 ] ) ;
4780: LD_ADDR_VAR 0 11
4784: PUSH
4785: LD_VAR 0 7
4789: PPUSH
4790: LD_INT 25
4792: PUSH
4793: LD_INT 4
4795: PUSH
4796: EMPTY
4797: LIST
4798: LIST
4799: PPUSH
4800: CALL_OW 72
4804: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) > 0 and ru_cargo = false then
4805: LD_INT 22
4807: PUSH
4808: LD_INT 3
4810: PUSH
4811: EMPTY
4812: LIST
4813: LIST
4814: PUSH
4815: LD_INT 34
4817: PUSH
4818: LD_INT 51
4820: PUSH
4821: EMPTY
4822: LIST
4823: LIST
4824: PUSH
4825: EMPTY
4826: LIST
4827: LIST
4828: PPUSH
4829: CALL_OW 69
4833: PUSH
4834: LD_INT 0
4836: GREATER
4837: PUSH
4838: LD_EXP 29
4842: PUSH
4843: LD_INT 0
4845: EQUAL
4846: AND
4847: IFFALSE 4887
// ru_cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
4849: LD_ADDR_EXP 29
4853: PUSH
4854: LD_INT 22
4856: PUSH
4857: LD_INT 3
4859: PUSH
4860: EMPTY
4861: LIST
4862: LIST
4863: PUSH
4864: LD_INT 34
4866: PUSH
4867: LD_INT 51
4869: PUSH
4870: EMPTY
4871: LIST
4872: LIST
4873: PUSH
4874: EMPTY
4875: LIST
4876: LIST
4877: PPUSH
4878: CALL_OW 69
4882: PUSH
4883: LD_INT 1
4885: ARRAY
4886: ST_TO_ADDR
// if ru_cargo then
4887: LD_EXP 29
4891: IFFALSE 5231
// begin if IsInArea ( ru_cargo , ru_base ) then
4893: LD_EXP 29
4897: PPUSH
4898: LD_INT 9
4900: PPUSH
4901: CALL_OW 308
4905: IFFALSE 4984
// begin if GetCargo ( ru_cargo , mat_cans ) = 0 then
4907: LD_EXP 29
4911: PPUSH
4912: LD_INT 1
4914: PPUSH
4915: CALL_OW 289
4919: PUSH
4920: LD_INT 0
4922: EQUAL
4923: IFFALSE 4941
// ComEnterUnit ( ru_cargo , ru_teleport ) else
4925: LD_EXP 29
4929: PPUSH
4930: LD_VAR 0 3
4934: PPUSH
4935: CALL_OW 120
4939: GO 4982
// if not HasTask ( ru_cargo ) then
4941: LD_EXP 29
4945: PPUSH
4946: CALL_OW 314
4950: NOT
4951: IFFALSE 4982
// ComMoveXY ( ru_cargo , GetX ( ru_depot ) , GetY ( ru_depot ) ) ;
4953: LD_EXP 29
4957: PPUSH
4958: LD_VAR 0 1
4962: PPUSH
4963: CALL_OW 250
4967: PPUSH
4968: LD_VAR 0 1
4972: PPUSH
4973: CALL_OW 251
4977: PPUSH
4978: CALL_OW 111
// end else
4982: GO 5231
// begin if not HasTask ( ru_cargo ) and GetCargo ( ru_cargo , mat_cans ) < 100 and not IsInArea ( ru_cargo , cargoa ) then
4984: LD_EXP 29
4988: PPUSH
4989: CALL_OW 314
4993: NOT
4994: PUSH
4995: LD_EXP 29
4999: PPUSH
5000: LD_INT 1
5002: PPUSH
5003: CALL_OW 289
5007: PUSH
5008: LD_INT 100
5010: LESS
5011: AND
5012: PUSH
5013: LD_EXP 29
5017: PPUSH
5018: LD_INT 10
5020: PPUSH
5021: CALL_OW 308
5025: NOT
5026: AND
5027: IFFALSE 5104
// begin cr := GetListOfCratesInArea ( ru_crates ) ;
5029: LD_ADDR_VAR 0 15
5033: PUSH
5034: LD_INT 11
5036: PPUSH
5037: CALL_OW 435
5041: ST_TO_ADDR
// if cr then
5042: LD_VAR 0 15
5046: IFFALSE 5077
// ComCollect ( ru_cargo , cr [ 1 ] , cr [ 2 ] ) else
5048: LD_EXP 29
5052: PPUSH
5053: LD_VAR 0 15
5057: PUSH
5058: LD_INT 1
5060: ARRAY
5061: PPUSH
5062: LD_VAR 0 15
5066: PUSH
5067: LD_INT 2
5069: ARRAY
5070: PPUSH
5071: CALL_OW 117
5075: GO 5104
// if not IsInArea ( ru_cargo , ru_crates ) then
5077: LD_EXP 29
5081: PPUSH
5082: LD_INT 11
5084: PPUSH
5085: CALL_OW 308
5089: NOT
5090: IFFALSE 5104
// ComMoveToArea ( ru_cargo , ru_crates ) ;
5092: LD_EXP 29
5096: PPUSH
5097: LD_INT 11
5099: PPUSH
5100: CALL_OW 113
// end ; if not HasTask ( ru_cargo ) and not IsInArea ( ru_cargo , cargoa ) and ( GetCargo ( ru_cargo , mat_cans ) = 100 or See ( your_side , ru_cargo ) ) then
5104: LD_EXP 29
5108: PPUSH
5109: CALL_OW 314
5113: NOT
5114: PUSH
5115: LD_EXP 29
5119: PPUSH
5120: LD_INT 10
5122: PPUSH
5123: CALL_OW 308
5127: NOT
5128: AND
5129: PUSH
5130: LD_EXP 29
5134: PPUSH
5135: LD_INT 1
5137: PPUSH
5138: CALL_OW 289
5142: PUSH
5143: LD_INT 100
5145: EQUAL
5146: PUSH
5147: LD_OWVAR 2
5151: PPUSH
5152: LD_EXP 29
5156: PPUSH
5157: CALL_OW 292
5161: OR
5162: AND
5163: IFFALSE 5177
// ComMoveToArea ( ru_cargo , cargoa ) ;
5165: LD_EXP 29
5169: PPUSH
5170: LD_INT 10
5172: PPUSH
5173: CALL_OW 113
// if IsInArea ( ru_cargo , cargoa ) and ru_barracks then
5177: LD_EXP 29
5181: PPUSH
5182: LD_INT 10
5184: PPUSH
5185: CALL_OW 308
5189: PUSH
5190: LD_VAR 0 8
5194: AND
5195: IFFALSE 5231
// ComSpaceShift ( UnitFilter ( ru_humans , [ f_class , class_bazooker ] ) [ 1 ] , 139 , 24 ) ;
5197: LD_VAR 0 7
5201: PPUSH
5202: LD_INT 25
5204: PUSH
5205: LD_INT 9
5207: PUSH
5208: EMPTY
5209: LIST
5210: LIST
5211: PPUSH
5212: CALL_OW 72
5216: PUSH
5217: LD_INT 1
5219: ARRAY
5220: PPUSH
5221: LD_INT 139
5223: PPUSH
5224: LD_INT 24
5226: PPUSH
5227: CALL_OW 153
// end ; end ; if ru_cargo = 0 and ru_factory and BuildingStatus ( ru_factory ) = bs_idle then
5231: LD_EXP 29
5235: PUSH
5236: LD_INT 0
5238: EQUAL
5239: PUSH
5240: LD_VAR 0 2
5244: AND
5245: PUSH
5246: LD_VAR 0 2
5250: PPUSH
5251: CALL_OW 461
5255: PUSH
5256: LD_INT 2
5258: EQUAL
5259: AND
5260: IFFALSE 5283
// ComConstruct ( ru_factory , ru_medium_wheeled , 3 , control_computer , ru_cargo_bay ) ;
5262: LD_VAR 0 2
5266: PPUSH
5267: LD_INT 21
5269: PPUSH
5270: LD_INT 3
5272: PPUSH
5273: LD_INT 3
5275: PPUSH
5276: LD_INT 51
5278: PPUSH
5279: CALL_OW 125
// if UnitFilter ( ru_humans , [ f_class , class_bazooker ] ) then
5283: LD_VAR 0 7
5287: PPUSH
5288: LD_INT 25
5290: PUSH
5291: LD_INT 9
5293: PUSH
5294: EMPTY
5295: LIST
5296: LIST
5297: PPUSH
5298: CALL_OW 72
5302: IFFALSE 5366
// IntBazooka ( UnitFilter ( ru_humans , [ f_class , class_bazooker ] ) , FilterAllUnits ( [ [ f_side , Your_Side ] , [ f_not , [ f_type , unit_building ] ] ] ) ) ;
5304: LD_VAR 0 7
5308: PPUSH
5309: LD_INT 25
5311: PUSH
5312: LD_INT 9
5314: PUSH
5315: EMPTY
5316: LIST
5317: LIST
5318: PPUSH
5319: CALL_OW 72
5323: PPUSH
5324: LD_INT 22
5326: PUSH
5327: LD_OWVAR 2
5331: PUSH
5332: EMPTY
5333: LIST
5334: LIST
5335: PUSH
5336: LD_INT 3
5338: PUSH
5339: LD_INT 21
5341: PUSH
5342: LD_INT 3
5344: PUSH
5345: EMPTY
5346: LIST
5347: LIST
5348: PUSH
5349: EMPTY
5350: LIST
5351: LIST
5352: PUSH
5353: EMPTY
5354: LIST
5355: LIST
5356: PPUSH
5357: CALL_OW 69
5361: PPUSH
5362: CALL 1533 0 2
// if ru_factory and ru_vlist > 0 then
5366: LD_VAR 0 2
5370: PUSH
5371: LD_EXP 31
5375: PUSH
5376: LD_INT 0
5378: GREATER
5379: AND
5380: IFFALSE 5480
// begin if BuildingStatus ( ru_factory ) = bs_idle then
5382: LD_VAR 0 2
5386: PPUSH
5387: CALL_OW 461
5391: PUSH
5392: LD_INT 2
5394: EQUAL
5395: IFFALSE 5480
// begin ComConstruct ( ru_factory , ru_vlist [ 1 ] , ru_vlist [ 2 ] , ru_vlist [ 3 ] , ru_vlist [ 4 ] ) ;
5397: LD_VAR 0 2
5401: PPUSH
5402: LD_EXP 31
5406: PUSH
5407: LD_INT 1
5409: ARRAY
5410: PPUSH
5411: LD_EXP 31
5415: PUSH
5416: LD_INT 2
5418: ARRAY
5419: PPUSH
5420: LD_EXP 31
5424: PUSH
5425: LD_INT 3
5427: ARRAY
5428: PPUSH
5429: LD_EXP 31
5433: PUSH
5434: LD_INT 4
5436: ARRAY
5437: PPUSH
5438: CALL_OW 125
// for i = 1 to 4 do
5442: LD_ADDR_VAR 0 12
5446: PUSH
5447: DOUBLE
5448: LD_INT 1
5450: DEC
5451: ST_TO_ADDR
5452: LD_INT 4
5454: PUSH
5455: FOR_TO
5456: IFFALSE 5478
// ru_vlist := Delete ( ru_vlist , 1 ) ;
5458: LD_ADDR_EXP 31
5462: PUSH
5463: LD_EXP 31
5467: PPUSH
5468: LD_INT 1
5470: PPUSH
5471: CALL_OW 3
5475: ST_TO_ADDR
5476: GO 5455
5478: POP
5479: POP
// end ; end ; if BuildingStatus ( ru_lab ) = bs_idle and ru_sib_bomb then
5480: LD_INT 24
5482: PPUSH
5483: CALL_OW 461
5487: PUSH
5488: LD_INT 2
5490: EQUAL
5491: PUSH
5492: LD_EXP 4
5496: AND
5497: IFFALSE 5525
// if GetTech ( tech_sibfiss , 3 ) = state_enabled then
5499: LD_INT 25
5501: PPUSH
5502: LD_INT 3
5504: PPUSH
5505: CALL_OW 321
5509: PUSH
5510: LD_INT 1
5512: EQUAL
5513: IFFALSE 5525
// ComResearch ( ru_lab , tech_sibfiss ) ;
5515: LD_INT 24
5517: PPUSH
5518: LD_INT 25
5520: PPUSH
5521: CALL_OW 124
// if GetTech ( tech_sibfiss , 3 ) = state_researched and tick mod 5 5$00 = 0 then
5525: LD_INT 25
5527: PPUSH
5528: LD_INT 3
5530: PPUSH
5531: CALL_OW 321
5535: PUSH
5536: LD_INT 2
5538: EQUAL
5539: PUSH
5540: LD_OWVAR 1
5544: PUSH
5545: LD_INT 10500
5547: MOD
5548: PUSH
5549: LD_INT 0
5551: EQUAL
5552: AND
5553: IFFALSE 5591
// if BuildingStatus ( ru_factory ) = bs_idle then
5555: LD_VAR 0 2
5559: PPUSH
5560: CALL_OW 461
5564: PUSH
5565: LD_INT 2
5567: EQUAL
5568: IFFALSE 5591
// ComConstruct ( ru_factory , ru_heavy_wheeled , 3 , control_computer , ru_siberium_rocket ) ;
5570: LD_VAR 0 2
5574: PPUSH
5575: LD_INT 23
5577: PPUSH
5578: LD_INT 3
5580: PPUSH
5581: LD_INT 3
5583: PPUSH
5584: LD_INT 48
5586: PPUSH
5587: CALL_OW 125
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) > 0 then
5591: LD_INT 22
5593: PUSH
5594: LD_INT 3
5596: PUSH
5597: EMPTY
5598: LIST
5599: LIST
5600: PUSH
5601: LD_INT 34
5603: PUSH
5604: LD_INT 48
5606: PUSH
5607: EMPTY
5608: LIST
5609: LIST
5610: PUSH
5611: EMPTY
5612: LIST
5613: LIST
5614: PPUSH
5615: CALL_OW 69
5619: PUSH
5620: LD_INT 0
5622: GREATER
5623: IFFALSE 5997
// begin sib_bomb := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) [ 1 ] ;
5625: LD_ADDR_VAR 0 16
5629: PUSH
5630: LD_INT 22
5632: PUSH
5633: LD_INT 3
5635: PUSH
5636: EMPTY
5637: LIST
5638: LIST
5639: PUSH
5640: LD_INT 34
5642: PUSH
5643: LD_INT 48
5645: PUSH
5646: EMPTY
5647: LIST
5648: LIST
5649: PUSH
5650: EMPTY
5651: LIST
5652: LIST
5653: PPUSH
5654: CALL_OW 69
5658: PUSH
5659: LD_INT 1
5661: ARRAY
5662: ST_TO_ADDR
// if IsInArea ( sib_bomb , ru_base ) then
5663: LD_VAR 0 16
5667: PPUSH
5668: LD_INT 9
5670: PPUSH
5671: CALL_OW 308
5675: IFFALSE 5693
// ComEnterUnit ( sib_bomb , ru_teleport ) else
5677: LD_VAR 0 16
5681: PPUSH
5682: LD_VAR 0 3
5686: PPUSH
5687: CALL_OW 120
5691: GO 5997
// if not HasTask ( sib_bomb ) then
5693: LD_VAR 0 16
5697: PPUSH
5698: CALL_OW 314
5702: NOT
5703: IFFALSE 5997
// if GetLives ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) > 250 then
5705: LD_INT 22
5707: PUSH
5708: LD_OWVAR 2
5712: PUSH
5713: EMPTY
5714: LIST
5715: LIST
5716: PUSH
5717: LD_INT 30
5719: PUSH
5720: LD_INT 1
5722: PUSH
5723: EMPTY
5724: LIST
5725: LIST
5726: PUSH
5727: EMPTY
5728: LIST
5729: LIST
5730: PPUSH
5731: CALL_OW 69
5735: PUSH
5736: LD_INT 1
5738: ARRAY
5739: PPUSH
5740: CALL_OW 256
5744: PUSH
5745: LD_INT 250
5747: GREATER
5748: IFFALSE 5841
// ComAttackPlace ( sib_bomb , GetX ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) , GetY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ) else
5750: LD_VAR 0 16
5754: PPUSH
5755: LD_INT 22
5757: PUSH
5758: LD_OWVAR 2
5762: PUSH
5763: EMPTY
5764: LIST
5765: LIST
5766: PUSH
5767: LD_INT 30
5769: PUSH
5770: LD_INT 1
5772: PUSH
5773: EMPTY
5774: LIST
5775: LIST
5776: PUSH
5777: EMPTY
5778: LIST
5779: LIST
5780: PPUSH
5781: CALL_OW 69
5785: PUSH
5786: LD_INT 1
5788: ARRAY
5789: PPUSH
5790: CALL_OW 250
5794: PPUSH
5795: LD_INT 22
5797: PUSH
5798: LD_OWVAR 2
5802: PUSH
5803: EMPTY
5804: LIST
5805: LIST
5806: PUSH
5807: LD_INT 30
5809: PUSH
5810: LD_INT 1
5812: PUSH
5813: EMPTY
5814: LIST
5815: LIST
5816: PUSH
5817: EMPTY
5818: LIST
5819: LIST
5820: PPUSH
5821: CALL_OW 69
5825: PUSH
5826: LD_INT 1
5828: ARRAY
5829: PPUSH
5830: CALL_OW 251
5834: PPUSH
5835: CALL_OW 116
5839: GO 5997
// if FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) > 0 then
5841: LD_INT 22
5843: PUSH
5844: LD_OWVAR 2
5848: PUSH
5849: EMPTY
5850: LIST
5851: LIST
5852: PUSH
5853: LD_INT 21
5855: PUSH
5856: LD_INT 3
5858: PUSH
5859: EMPTY
5860: LIST
5861: LIST
5862: PUSH
5863: EMPTY
5864: LIST
5865: LIST
5866: PPUSH
5867: CALL_OW 69
5871: PUSH
5872: LD_INT 0
5874: GREATER
5875: IFFALSE 5968
// ComAttackPlace ( sib_bomb , GetX ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) [ 1 ] ) , GetY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) [ 1 ] ) ) else
5877: LD_VAR 0 16
5881: PPUSH
5882: LD_INT 22
5884: PUSH
5885: LD_OWVAR 2
5889: PUSH
5890: EMPTY
5891: LIST
5892: LIST
5893: PUSH
5894: LD_INT 21
5896: PUSH
5897: LD_INT 3
5899: PUSH
5900: EMPTY
5901: LIST
5902: LIST
5903: PUSH
5904: EMPTY
5905: LIST
5906: LIST
5907: PPUSH
5908: CALL_OW 69
5912: PUSH
5913: LD_INT 1
5915: ARRAY
5916: PPUSH
5917: CALL_OW 250
5921: PPUSH
5922: LD_INT 22
5924: PUSH
5925: LD_OWVAR 2
5929: PUSH
5930: EMPTY
5931: LIST
5932: LIST
5933: PUSH
5934: LD_INT 21
5936: PUSH
5937: LD_INT 3
5939: PUSH
5940: EMPTY
5941: LIST
5942: LIST
5943: PUSH
5944: EMPTY
5945: LIST
5946: LIST
5947: PPUSH
5948: CALL_OW 69
5952: PUSH
5953: LD_INT 1
5955: ARRAY
5956: PPUSH
5957: CALL_OW 251
5961: PPUSH
5962: CALL_OW 116
5966: GO 5997
// ComAttackPlace ( sib_bomb , GetX ( player_commander ) , GetY ( player_commander ) ) ;
5968: LD_VAR 0 16
5972: PPUSH
5973: LD_EXP 11
5977: PPUSH
5978: CALL_OW 250
5982: PPUSH
5983: LD_EXP 11
5987: PPUSH
5988: CALL_OW 251
5992: PPUSH
5993: CALL_OW 116
// end ; if ru_can_attack then
5997: LD_EXP 3
6001: IFFALSE 6149
// if ru_time > 0 0$00 then
6003: LD_EXP 33
6007: PUSH
6008: LD_INT 0
6010: GREATER
6011: IFFALSE 6029
// ru_time := ru_time - 0 0$03 else
6013: LD_ADDR_EXP 33
6017: PUSH
6018: LD_EXP 33
6022: PUSH
6023: LD_INT 105
6025: MINUS
6026: ST_TO_ADDR
6027: GO 6149
// begin ru_time := Rand ( 9 9$39 , 14 14$39 ) ;
6029: LD_ADDR_EXP 33
6033: PUSH
6034: LD_INT 20265
6036: PPUSH
6037: LD_INT 30765
6039: PPUSH
6040: CALL_OW 12
6044: ST_TO_ADDR
// for i = 1 to ru_amount do
6045: LD_ADDR_VAR 0 12
6049: PUSH
6050: DOUBLE
6051: LD_INT 1
6053: DEC
6054: ST_TO_ADDR
6055: LD_EXP 32
6059: PUSH
6060: FOR_TO
6061: IFFALSE 6147
// begin ru_vlist := ru_vlist ^ ru_heavy_wheeled ;
6063: LD_ADDR_EXP 31
6067: PUSH
6068: LD_EXP 31
6072: PUSH
6073: LD_INT 23
6075: ADD
6076: ST_TO_ADDR
// ru_vlist := ru_vlist ^ engine_siberite ;
6077: LD_ADDR_EXP 31
6081: PUSH
6082: LD_EXP 31
6086: PUSH
6087: LD_INT 3
6089: ADD
6090: ST_TO_ADDR
// ru_vlist := ru_vlist ^ control_computer ;
6091: LD_ADDR_EXP 31
6095: PUSH
6096: LD_EXP 31
6100: PUSH
6101: LD_INT 3
6103: ADD
6104: ST_TO_ADDR
// ru_vlist := ru_vlist ^ [ ru_heavy_gun , ru_rocket_launcher , ru_rocket ] [ MultiRand ( 1 , 2 , 3 ) ] ;
6105: LD_ADDR_EXP 31
6109: PUSH
6110: LD_EXP 31
6114: PUSH
6115: LD_INT 46
6117: PUSH
6118: LD_INT 45
6120: PUSH
6121: LD_INT 47
6123: PUSH
6124: EMPTY
6125: LIST
6126: LIST
6127: LIST
6128: PUSH
6129: LD_INT 1
6131: PPUSH
6132: LD_INT 2
6134: PPUSH
6135: LD_INT 3
6137: PPUSH
6138: CALL_OW 14
6142: ARRAY
6143: ADD
6144: ST_TO_ADDR
// end ;
6145: GO 6060
6147: POP
6148: POP
// end ; if UnitFilter ( ru_bunkers , [ f_bweapon , 0 ] ) > 0 then
6149: LD_VAR 0 4
6153: PPUSH
6154: LD_INT 35
6156: PUSH
6157: LD_INT 0
6159: PUSH
6160: EMPTY
6161: LIST
6162: LIST
6163: PPUSH
6164: CALL_OW 72
6168: PUSH
6169: LD_INT 0
6171: GREATER
6172: IFFALSE 6220
// if BuildingStatus ( ru_factory ) = bs_idle then
6174: LD_VAR 0 2
6178: PPUSH
6179: CALL_OW 461
6183: PUSH
6184: LD_INT 2
6186: EQUAL
6187: IFFALSE 6220
// ComPlaceWeapon ( UnitFilter ( ru_bunkers , [ f_bweapon , 0 ] ) [ 1 ] , ru_rocket ) ;
6189: LD_VAR 0 4
6193: PPUSH
6194: LD_INT 35
6196: PUSH
6197: LD_INT 0
6199: PUSH
6200: EMPTY
6201: LIST
6202: LIST
6203: PPUSH
6204: CALL_OW 72
6208: PUSH
6209: LD_INT 1
6211: ARRAY
6212: PPUSH
6213: LD_INT 47
6215: PPUSH
6216: CALL_OW 148
// if ru_force >= ru_amount then
6220: LD_EXP 27
6224: PUSH
6225: LD_EXP 32
6229: GREATEREQUAL
6230: IFFALSE 6241
// RaiseSailEvent ( event_russian_attack ) ;
6232: LD_EXP 21
6236: PPUSH
6237: CALL_OW 427
// if ru_engs > 0 then
6241: LD_VAR 0 9
6245: PUSH
6246: LD_INT 0
6248: GREATER
6249: IFFALSE 6651
// begin if UnitFilter ( ru_buildings , [ f_not , [ f_lives , 1000 ] ] ) > 0 then
6251: LD_VAR 0 5
6255: PPUSH
6256: LD_INT 3
6258: PUSH
6259: LD_INT 24
6261: PUSH
6262: LD_INT 1000
6264: PUSH
6265: EMPTY
6266: LIST
6267: LIST
6268: PUSH
6269: EMPTY
6270: LIST
6271: LIST
6272: PPUSH
6273: CALL_OW 72
6277: PUSH
6278: LD_INT 0
6280: GREATER
6281: IFFALSE 6436
// begin filter := UnitFilter ( ru_buildings , [ f_not , [ f_lives , 1000 ] ] ) ;
6283: LD_ADDR_VAR 0 14
6287: PUSH
6288: LD_VAR 0 5
6292: PPUSH
6293: LD_INT 3
6295: PUSH
6296: LD_INT 24
6298: PUSH
6299: LD_INT 1000
6301: PUSH
6302: EMPTY
6303: LIST
6304: LIST
6305: PUSH
6306: EMPTY
6307: LIST
6308: LIST
6309: PPUSH
6310: CALL_OW 72
6314: ST_TO_ADDR
// for i = 1 to ru_engs do
6315: LD_ADDR_VAR 0 12
6319: PUSH
6320: DOUBLE
6321: LD_INT 1
6323: DEC
6324: ST_TO_ADDR
6325: LD_VAR 0 9
6329: PUSH
6330: FOR_TO
6331: IFFALSE 6432
// begin if IsInUnit ( ru_engs [ i ] ) then
6333: LD_VAR 0 9
6337: PUSH
6338: LD_VAR 0 12
6342: ARRAY
6343: PPUSH
6344: CALL_OW 310
6348: IFFALSE 6367
// ComExitBuilding ( ru_engs [ i ] ) else
6350: LD_VAR 0 9
6354: PUSH
6355: LD_VAR 0 12
6359: ARRAY
6360: PPUSH
6361: CALL_OW 122
6365: GO 6430
// if not HasTask ( ru_engs [ i ] ) and GetLives ( ru_engs [ i ] ) > 600 then
6367: LD_VAR 0 9
6371: PUSH
6372: LD_VAR 0 12
6376: ARRAY
6377: PPUSH
6378: CALL_OW 314
6382: NOT
6383: PUSH
6384: LD_VAR 0 9
6388: PUSH
6389: LD_VAR 0 12
6393: ARRAY
6394: PPUSH
6395: CALL_OW 256
6399: PUSH
6400: LD_INT 600
6402: GREATER
6403: AND
6404: IFFALSE 6430
// ComRepairBuilding ( ru_engs [ i ] , filter [ 1 ] ) ;
6406: LD_VAR 0 9
6410: PUSH
6411: LD_VAR 0 12
6415: ARRAY
6416: PPUSH
6417: LD_VAR 0 14
6421: PUSH
6422: LD_INT 1
6424: ARRAY
6425: PPUSH
6426: CALL_OW 130
// end ;
6430: GO 6330
6432: POP
6433: POP
// end else
6434: GO 6651
// begin if ru_blist = 0 then
6436: LD_EXP 30
6440: PUSH
6441: LD_INT 0
6443: EQUAL
6444: IFFALSE 6526
// begin for i = 1 to ru_engs do
6446: LD_ADDR_VAR 0 12
6450: PUSH
6451: DOUBLE
6452: LD_INT 1
6454: DEC
6455: ST_TO_ADDR
6456: LD_VAR 0 9
6460: PUSH
6461: FOR_TO
6462: IFFALSE 6522
// if not HasTask ( ru_engs [ i ] ) and not IsInUnit ( ru_engs [ i ] ) then
6464: LD_VAR 0 9
6468: PUSH
6469: LD_VAR 0 12
6473: ARRAY
6474: PPUSH
6475: CALL_OW 314
6479: NOT
6480: PUSH
6481: LD_VAR 0 9
6485: PUSH
6486: LD_VAR 0 12
6490: ARRAY
6491: PPUSH
6492: CALL_OW 310
6496: NOT
6497: AND
6498: IFFALSE 6520
// ComEnterUnit ( ru_engs [ i ] , ru_depot ) ;
6500: LD_VAR 0 9
6504: PUSH
6505: LD_VAR 0 12
6509: ARRAY
6510: PPUSH
6511: LD_VAR 0 1
6515: PPUSH
6516: CALL_OW 120
6520: GO 6461
6522: POP
6523: POP
// end else
6524: GO 6651
// begin for i = 1 to ru_engs do
6526: LD_ADDR_VAR 0 12
6530: PUSH
6531: DOUBLE
6532: LD_INT 1
6534: DEC
6535: ST_TO_ADDR
6536: LD_VAR 0 9
6540: PUSH
6541: FOR_TO
6542: IFFALSE 6649
// begin if IsInUnit ( ru_engs [ i ] ) then
6544: LD_VAR 0 9
6548: PUSH
6549: LD_VAR 0 12
6553: ARRAY
6554: PPUSH
6555: CALL_OW 310
6559: IFFALSE 6578
// ComExitBuilding ( ru_engs [ i ] ) else
6561: LD_VAR 0 9
6565: PUSH
6566: LD_VAR 0 12
6570: ARRAY
6571: PPUSH
6572: CALL_OW 122
6576: GO 6647
// if not HasTask ( ru_engs [ i ] ) then
6578: LD_VAR 0 9
6582: PUSH
6583: LD_VAR 0 12
6587: ARRAY
6588: PPUSH
6589: CALL_OW 314
6593: NOT
6594: IFFALSE 6647
// ComBuild ( ru_engs [ i ] , ru_blist [ 1 ] , ru_blist [ 2 ] , ru_blist [ 3 ] , ru_blist [ 4 ] ) ;
6596: LD_VAR 0 9
6600: PUSH
6601: LD_VAR 0 12
6605: ARRAY
6606: PPUSH
6607: LD_EXP 30
6611: PUSH
6612: LD_INT 1
6614: ARRAY
6615: PPUSH
6616: LD_EXP 30
6620: PUSH
6621: LD_INT 2
6623: ARRAY
6624: PPUSH
6625: LD_EXP 30
6629: PUSH
6630: LD_INT 3
6632: ARRAY
6633: PPUSH
6634: LD_EXP 30
6638: PUSH
6639: LD_INT 4
6641: ARRAY
6642: PPUSH
6643: CALL_OW 145
// end ;
6647: GO 6541
6649: POP
6650: POP
// end ; end ; end ; end ;
6651: PPOPN 16
6653: END
// every 3 3$40 + 0 0$45 trigger russian_prepared and GetListOfCratesInArea ( ru_crates ) < 10 do
6654: LD_EXP 2
6658: PUSH
6659: LD_INT 11
6661: PPUSH
6662: CALL_OW 435
6666: PUSH
6667: LD_INT 10
6669: LESS
6670: AND
6671: IFFALSE 6734
6673: GO 6675
6675: DISABLE
// begin enable ;
6676: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , ru_crates , true ) ;
6677: LD_INT 1
6679: PPUSH
6680: LD_INT 5
6682: PPUSH
6683: CALL_OW 12
6687: PPUSH
6688: LD_INT 11
6690: PPUSH
6691: LD_INT 1
6693: PPUSH
6694: CALL_OW 55
// Wait ( Rand ( 0 0$43 , 1 1$00 ) ) ;
6698: LD_INT 1505
6700: PPUSH
6701: LD_INT 2100
6703: PPUSH
6704: CALL_OW 12
6708: PPUSH
6709: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 5 ) , ru_crates , true ) ;
6713: LD_INT 1
6715: PPUSH
6716: LD_INT 5
6718: PPUSH
6719: CALL_OW 12
6723: PPUSH
6724: LD_INT 11
6726: PPUSH
6727: LD_INT 1
6729: PPUSH
6730: CALL_OW 55
// end ;
6734: END
// every 15 15$00 + 25 25$00 trigger not ru_sib_bomb do var i , tmp ;
6735: LD_EXP 4
6739: NOT
6740: IFFALSE 6855
6742: GO 6744
6744: DISABLE
6745: LD_INT 0
6747: PPUSH
6748: PPUSH
// begin enable ;
6749: ENABLE
// i := Rand ( 0 , 100 ) ;
6750: LD_ADDR_VAR 0 1
6754: PUSH
6755: LD_INT 0
6757: PPUSH
6758: LD_INT 100
6760: PPUSH
6761: CALL_OW 12
6765: ST_TO_ADDR
// case your_side of 1 :
6766: LD_OWVAR 2
6770: PUSH
6771: LD_INT 1
6773: DOUBLE
6774: EQUAL
6775: IFTRUE 6779
6777: GO 6790
6779: POP
// tmp := 10 ; 2 :
6780: LD_ADDR_VAR 0 2
6784: PUSH
6785: LD_INT 10
6787: ST_TO_ADDR
6788: GO 6829
6790: LD_INT 2
6792: DOUBLE
6793: EQUAL
6794: IFTRUE 6798
6796: GO 6809
6798: POP
// tmp := 0 ; 7 :
6799: LD_ADDR_VAR 0 2
6803: PUSH
6804: LD_INT 0
6806: ST_TO_ADDR
6807: GO 6829
6809: LD_INT 7
6811: DOUBLE
6812: EQUAL
6813: IFTRUE 6817
6815: GO 6828
6817: POP
// tmp := 15 ; end ;
6818: LD_ADDR_VAR 0 2
6822: PUSH
6823: LD_INT 15
6825: ST_TO_ADDR
6826: GO 6829
6828: POP
// if i < chance_to_bomb + tmp then
6829: LD_VAR 0 1
6833: PUSH
6834: LD_EXP 5
6838: PUSH
6839: LD_VAR 0 2
6843: PLUS
6844: LESS
6845: IFFALSE 6855
// ru_sib_bomb := true ;
6847: LD_ADDR_EXP 4
6851: PUSH
6852: LD_INT 1
6854: ST_TO_ADDR
// end ;
6855: PPOPN 2
6857: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_weapon , us_siberium_rocket ] ] ) do
6858: LD_INT 22
6860: PUSH
6861: LD_OWVAR 2
6865: PUSH
6866: EMPTY
6867: LIST
6868: LIST
6869: PUSH
6870: LD_INT 34
6872: PUSH
6873: LD_INT 8
6875: PUSH
6876: EMPTY
6877: LIST
6878: LIST
6879: PUSH
6880: EMPTY
6881: LIST
6882: LIST
6883: PPUSH
6884: CALL_OW 69
6888: IFFALSE 6901
6890: GO 6892
6892: DISABLE
// begin ru_sib_bomb := true ;
6893: LD_ADDR_EXP 4
6897: PUSH
6898: LD_INT 1
6900: ST_TO_ADDR
// end ;
6901: END
// every 15 15$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) do var i ;
6902: LD_INT 22
6904: PUSH
6905: LD_INT 3
6907: PUSH
6908: EMPTY
6909: LIST
6910: LIST
6911: PUSH
6912: LD_INT 30
6914: PUSH
6915: LD_INT 34
6917: PUSH
6918: EMPTY
6919: LIST
6920: LIST
6921: PUSH
6922: EMPTY
6923: LIST
6924: LIST
6925: PPUSH
6926: CALL_OW 69
6930: IFFALSE 7029
6932: GO 6934
6934: DISABLE
6935: LD_INT 0
6937: PPUSH
// begin enable ;
6938: ENABLE
// i := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
6939: LD_ADDR_VAR 0 1
6943: PUSH
6944: LD_INT 1
6946: PUSH
6947: LD_INT 3
6949: PUSH
6950: EMPTY
6951: LIST
6952: LIST
6953: PUSH
6954: LD_INT 1
6956: PPUSH
6957: LD_INT 2
6959: PPUSH
6960: CALL_OW 12
6964: ARRAY
6965: ST_TO_ADDR
// TeleportExit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] , ru_teleport_exit [ i ] , ru_teleport_exit [ i + 1 ] ) ;
6966: LD_INT 22
6968: PUSH
6969: LD_INT 3
6971: PUSH
6972: EMPTY
6973: LIST
6974: LIST
6975: PUSH
6976: LD_INT 30
6978: PUSH
6979: LD_INT 34
6981: PUSH
6982: EMPTY
6983: LIST
6984: LIST
6985: PUSH
6986: EMPTY
6987: LIST
6988: LIST
6989: PPUSH
6990: CALL_OW 69
6994: PUSH
6995: LD_INT 1
6997: ARRAY
6998: PPUSH
6999: LD_EXP 34
7003: PUSH
7004: LD_VAR 0 1
7008: ARRAY
7009: PPUSH
7010: LD_EXP 34
7014: PUSH
7015: LD_VAR 0 1
7019: PUSH
7020: LD_INT 1
7022: PLUS
7023: ARRAY
7024: PPUSH
7025: CALL_OW 243
// end ;
7029: PPOPN 1
7031: END
// every 30 30$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) do var ru_depot ;
7032: LD_INT 22
7034: PUSH
7035: LD_INT 3
7037: PUSH
7038: EMPTY
7039: LIST
7040: LIST
7041: PUSH
7042: LD_INT 30
7044: PUSH
7045: LD_INT 1
7047: PUSH
7048: EMPTY
7049: LIST
7050: LIST
7051: PUSH
7052: EMPTY
7053: LIST
7054: LIST
7055: PPUSH
7056: CALL_OW 69
7060: IFFALSE 7147
7062: GO 7064
7064: DISABLE
7065: LD_INT 0
7067: PPUSH
// begin enable ;
7068: ENABLE
// ru_depot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
7069: LD_ADDR_VAR 0 1
7073: PUSH
7074: LD_INT 22
7076: PUSH
7077: LD_INT 3
7079: PUSH
7080: EMPTY
7081: LIST
7082: LIST
7083: PUSH
7084: LD_INT 30
7086: PUSH
7087: LD_INT 1
7089: PUSH
7090: EMPTY
7091: LIST
7092: LIST
7093: PUSH
7094: EMPTY
7095: LIST
7096: LIST
7097: PPUSH
7098: CALL_OW 69
7102: PUSH
7103: LD_INT 1
7105: ARRAY
7106: ST_TO_ADDR
// AddResourceType ( GetBase ( ru_depot ) , mat_cans , 6000 ) ;
7107: LD_VAR 0 1
7111: PPUSH
7112: CALL_OW 274
7116: PPUSH
7117: LD_INT 1
7119: PPUSH
7120: LD_INT 6000
7122: PPUSH
7123: CALL_OW 276
// AddResourceType ( GetBase ( ru_depot ) , mat_oil , 600 ) ;
7127: LD_VAR 0 1
7131: PPUSH
7132: CALL_OW 274
7136: PPUSH
7137: LD_INT 2
7139: PPUSH
7140: LD_INT 600
7142: PPUSH
7143: CALL_OW 276
// end ;
7147: PPOPN 1
7149: END
// export function RussianAttack ( ) ; var path , units , p , i , teleport ; begin
7150: LD_INT 0
7152: PPUSH
7153: PPUSH
7154: PPUSH
7155: PPUSH
7156: PPUSH
7157: PPUSH
// units := ru_force ;
7158: LD_ADDR_VAR 0 3
7162: PUSH
7163: LD_EXP 27
7167: ST_TO_ADDR
// teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) ;
7168: LD_ADDR_VAR 0 6
7172: PUSH
7173: LD_INT 22
7175: PUSH
7176: LD_INT 3
7178: PUSH
7179: EMPTY
7180: LIST
7181: LIST
7182: PUSH
7183: LD_INT 30
7185: PUSH
7186: LD_INT 34
7188: PUSH
7189: EMPTY
7190: LIST
7191: LIST
7192: PUSH
7193: EMPTY
7194: LIST
7195: LIST
7196: PPUSH
7197: CALL_OW 69
7201: ST_TO_ADDR
// ru_force := [ ] ;
7202: LD_ADDR_EXP 27
7206: PUSH
7207: EMPTY
7208: ST_TO_ADDR
// if not teleport then
7209: LD_VAR 0 6
7213: NOT
7214: IFFALSE 7256
// begin for i in units do
7216: LD_ADDR_VAR 0 5
7220: PUSH
7221: LD_VAR 0 3
7225: PUSH
7226: FOR_IN
7227: IFFALSE 7252
// TeleportUnit ( i , 150 , 65 , 12 , true ) ;
7229: LD_VAR 0 5
7233: PPUSH
7234: LD_INT 150
7236: PPUSH
7237: LD_INT 65
7239: PPUSH
7240: LD_INT 12
7242: PPUSH
7243: LD_INT 1
7245: PPUSH
7246: CALL_OW 483
7250: GO 7226
7252: POP
7253: POP
// end else
7254: GO 7351
// begin repeat for i = 1 to units do
7256: LD_ADDR_VAR 0 5
7260: PUSH
7261: DOUBLE
7262: LD_INT 1
7264: DEC
7265: ST_TO_ADDR
7266: LD_VAR 0 3
7270: PUSH
7271: FOR_TO
7272: IFFALSE 7320
// if IsInArea ( units [ i ] , ru_base ) then
7274: LD_VAR 0 3
7278: PUSH
7279: LD_VAR 0 5
7283: ARRAY
7284: PPUSH
7285: LD_INT 9
7287: PPUSH
7288: CALL_OW 308
7292: IFFALSE 7318
// ComEnterUnit ( units [ i ] , teleport [ 1 ] ) ;
7294: LD_VAR 0 3
7298: PUSH
7299: LD_VAR 0 5
7303: ARRAY
7304: PPUSH
7305: LD_VAR 0 6
7309: PUSH
7310: LD_INT 1
7312: ARRAY
7313: PPUSH
7314: CALL_OW 120
7318: GO 7271
7320: POP
7321: POP
// wait ( 0 0$10 ) ;
7322: LD_INT 350
7324: PPUSH
7325: CALL_OW 67
// until not UnitFilter ( units , [ f_inarea , ru_base ] ) ;
7329: LD_VAR 0 3
7333: PPUSH
7334: LD_INT 95
7336: PUSH
7337: LD_INT 9
7339: PUSH
7340: EMPTY
7341: LIST
7342: LIST
7343: PPUSH
7344: CALL_OW 72
7348: NOT
7349: IFFALSE 7256
// end ; p := rand ( 1 , 2 ) ;
7351: LD_ADDR_VAR 0 4
7355: PUSH
7356: LD_INT 1
7358: PPUSH
7359: LD_INT 2
7361: PPUSH
7362: CALL_OW 12
7366: ST_TO_ADDR
// case p of 1 :
7367: LD_VAR 0 4
7371: PUSH
7372: LD_INT 1
7374: DOUBLE
7375: EQUAL
7376: IFTRUE 7380
7378: GO 7434
7380: POP
// path := [ [ 159 , 71 ] , [ 152 , 99 ] , [ 107 , 119 ] , [ 104 , 127 ] ] ; 2 :
7381: LD_ADDR_VAR 0 2
7385: PUSH
7386: LD_INT 159
7388: PUSH
7389: LD_INT 71
7391: PUSH
7392: EMPTY
7393: LIST
7394: LIST
7395: PUSH
7396: LD_INT 152
7398: PUSH
7399: LD_INT 99
7401: PUSH
7402: EMPTY
7403: LIST
7404: LIST
7405: PUSH
7406: LD_INT 107
7408: PUSH
7409: LD_INT 119
7411: PUSH
7412: EMPTY
7413: LIST
7414: LIST
7415: PUSH
7416: LD_INT 104
7418: PUSH
7419: LD_INT 127
7421: PUSH
7422: EMPTY
7423: LIST
7424: LIST
7425: PUSH
7426: EMPTY
7427: LIST
7428: LIST
7429: LIST
7430: LIST
7431: ST_TO_ADDR
7432: GO 7497
7434: LD_INT 2
7436: DOUBLE
7437: EQUAL
7438: IFTRUE 7442
7440: GO 7496
7442: POP
// path := [ [ 116 , 36 ] , [ 91 , 52 ] , [ 53 , 67 ] , [ 58 , 107 ] ] ; end ;
7443: LD_ADDR_VAR 0 2
7447: PUSH
7448: LD_INT 116
7450: PUSH
7451: LD_INT 36
7453: PUSH
7454: EMPTY
7455: LIST
7456: LIST
7457: PUSH
7458: LD_INT 91
7460: PUSH
7461: LD_INT 52
7463: PUSH
7464: EMPTY
7465: LIST
7466: LIST
7467: PUSH
7468: LD_INT 53
7470: PUSH
7471: LD_INT 67
7473: PUSH
7474: EMPTY
7475: LIST
7476: LIST
7477: PUSH
7478: LD_INT 58
7480: PUSH
7481: LD_INT 107
7483: PUSH
7484: EMPTY
7485: LIST
7486: LIST
7487: PUSH
7488: EMPTY
7489: LIST
7490: LIST
7491: LIST
7492: LIST
7493: ST_TO_ADDR
7494: GO 7497
7496: POP
// if FilterAllUnits ( [ f_side , 7 ] ) and p > 1 then
7497: LD_INT 22
7499: PUSH
7500: LD_INT 7
7502: PUSH
7503: EMPTY
7504: LIST
7505: LIST
7506: PPUSH
7507: CALL_OW 69
7511: PUSH
7512: LD_VAR 0 4
7516: PUSH
7517: LD_INT 1
7519: GREATER
7520: AND
7521: IFFALSE 7552
// path := [ [ 116 , 36 ] , [ 91 , 52 ] ] ;
7523: LD_ADDR_VAR 0 2
7527: PUSH
7528: LD_INT 116
7530: PUSH
7531: LD_INT 36
7533: PUSH
7534: EMPTY
7535: LIST
7536: LIST
7537: PUSH
7538: LD_INT 91
7540: PUSH
7541: LD_INT 52
7543: PUSH
7544: EMPTY
7545: LIST
7546: LIST
7547: PUSH
7548: EMPTY
7549: LIST
7550: LIST
7551: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7552: LD_INT 35
7554: PPUSH
7555: CALL_OW 67
// AgressiveMove ( units , path ) ;
7559: LD_VAR 0 3
7563: PPUSH
7564: LD_VAR 0 2
7568: PPUSH
7569: CALL 75462 0 2
// until not UnitFilter ( units , [ f_ok ] ) ;
7573: LD_VAR 0 3
7577: PPUSH
7578: LD_INT 50
7580: PUSH
7581: EMPTY
7582: LIST
7583: PPUSH
7584: CALL_OW 72
7588: NOT
7589: IFFALSE 7552
// end ; end_of_file
7591: LD_VAR 0 1
7595: RET
// export function RemoveLegion ; var i ; begin
7596: LD_INT 0
7598: PPUSH
7599: PPUSH
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
7600: LD_ADDR_VAR 0 2
7604: PUSH
7605: LD_INT 22
7607: PUSH
7608: LD_INT 8
7610: PUSH
7611: EMPTY
7612: LIST
7613: LIST
7614: PPUSH
7615: CALL_OW 69
7619: PUSH
7620: FOR_IN
7621: IFFALSE 7634
// RemoveUnit ( i ) ;
7623: LD_VAR 0 2
7627: PPUSH
7628: CALL_OW 64
7632: GO 7620
7634: POP
7635: POP
// end ;
7636: LD_VAR 0 1
7640: RET
// export legion_force , legion_skill , legion_mines , legion_blist , legion_vlist , legion_enemy ; export function PrepareLegion ; var un , i , tmp , veh , l_depot , p , l_factory , l_lab , l_towers ; begin
7641: LD_INT 0
7643: PPUSH
7644: PPUSH
7645: PPUSH
7646: PPUSH
7647: PPUSH
7648: PPUSH
7649: PPUSH
7650: PPUSH
7651: PPUSH
7652: PPUSH
// l_depot := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
7653: LD_ADDR_VAR 0 6
7657: PUSH
7658: LD_INT 22
7660: PUSH
7661: LD_INT 8
7663: PUSH
7664: EMPTY
7665: LIST
7666: LIST
7667: PUSH
7668: LD_INT 30
7670: PUSH
7671: LD_INT 1
7673: PUSH
7674: EMPTY
7675: LIST
7676: LIST
7677: PUSH
7678: EMPTY
7679: LIST
7680: LIST
7681: PPUSH
7682: CALL_OW 69
7686: PUSH
7687: LD_INT 1
7689: ARRAY
7690: ST_TO_ADDR
// l_factory := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
7691: LD_ADDR_VAR 0 8
7695: PUSH
7696: LD_INT 22
7698: PUSH
7699: LD_INT 8
7701: PUSH
7702: EMPTY
7703: LIST
7704: LIST
7705: PUSH
7706: LD_INT 30
7708: PUSH
7709: LD_INT 3
7711: PUSH
7712: EMPTY
7713: LIST
7714: LIST
7715: PUSH
7716: EMPTY
7717: LIST
7718: LIST
7719: PPUSH
7720: CALL_OW 69
7724: PUSH
7725: LD_INT 1
7727: ARRAY
7728: ST_TO_ADDR
// l_lab := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ;
7729: LD_ADDR_VAR 0 9
7733: PUSH
7734: LD_INT 22
7736: PUSH
7737: LD_INT 8
7739: PUSH
7740: EMPTY
7741: LIST
7742: LIST
7743: PUSH
7744: LD_INT 2
7746: PUSH
7747: LD_INT 30
7749: PUSH
7750: LD_INT 6
7752: PUSH
7753: EMPTY
7754: LIST
7755: LIST
7756: PUSH
7757: LD_INT 30
7759: PUSH
7760: LD_INT 8
7762: PUSH
7763: EMPTY
7764: LIST
7765: LIST
7766: PUSH
7767: EMPTY
7768: LIST
7769: LIST
7770: LIST
7771: PUSH
7772: EMPTY
7773: LIST
7774: LIST
7775: PPUSH
7776: CALL_OW 69
7780: PUSH
7781: LD_INT 1
7783: ARRAY
7784: ST_TO_ADDR
// l_towers := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) ;
7785: LD_ADDR_VAR 0 10
7789: PUSH
7790: LD_INT 22
7792: PUSH
7793: LD_INT 8
7795: PUSH
7796: EMPTY
7797: LIST
7798: LIST
7799: PUSH
7800: LD_INT 30
7802: PUSH
7803: LD_INT 32
7805: PUSH
7806: EMPTY
7807: LIST
7808: LIST
7809: PUSH
7810: EMPTY
7811: LIST
7812: LIST
7813: PPUSH
7814: CALL_OW 69
7818: ST_TO_ADDR
// uc_side := 8 ;
7819: LD_ADDR_OWVAR 20
7823: PUSH
7824: LD_INT 8
7826: ST_TO_ADDR
// uc_nation := nation_arabian ;
7827: LD_ADDR_OWVAR 21
7831: PUSH
7832: LD_INT 2
7834: ST_TO_ADDR
// legion_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
7835: LD_ADDR_EXP 36
7839: PUSH
7840: LD_INT 5
7842: PUSH
7843: LD_INT 6
7845: PUSH
7846: LD_INT 7
7848: PUSH
7849: EMPTY
7850: LIST
7851: LIST
7852: LIST
7853: PUSH
7854: LD_OWVAR 67
7858: ARRAY
7859: ST_TO_ADDR
// legion_blist := [ ] ;
7860: LD_ADDR_EXP 38
7864: PUSH
7865: EMPTY
7866: ST_TO_ADDR
// legion_vlist := [ ] ;
7867: LD_ADDR_EXP 39
7871: PUSH
7872: EMPTY
7873: ST_TO_ADDR
// legion_force := [ ] ;
7874: LD_ADDR_EXP 35
7878: PUSH
7879: EMPTY
7880: ST_TO_ADDR
// legion_enemy := - 1 ;
7881: LD_ADDR_EXP 40
7885: PUSH
7886: LD_INT 1
7888: NEG
7889: ST_TO_ADDR
// SetResourceType ( GetBase ( l_depot ) , mat_cans , 10000 ) ;
7890: LD_VAR 0 6
7894: PPUSH
7895: CALL_OW 274
7899: PPUSH
7900: LD_INT 1
7902: PPUSH
7903: LD_INT 10000
7905: PPUSH
7906: CALL_OW 277
// SetResourceType ( GetBase ( l_depot ) , 3 , 1000 ) ;
7910: LD_VAR 0 6
7914: PPUSH
7915: CALL_OW 274
7919: PPUSH
7920: LD_INT 3
7922: PPUSH
7923: LD_INT 1000
7925: PPUSH
7926: CALL_OW 277
// for i = 1 to l_towers do
7930: LD_ADDR_VAR 0 3
7934: PUSH
7935: DOUBLE
7936: LD_INT 1
7938: DEC
7939: ST_TO_ADDR
7940: LD_VAR 0 10
7944: PUSH
7945: FOR_TO
7946: IFFALSE 7995
// begin PrepareHuman ( false , 1 , legion_skill ) ;
7948: LD_INT 0
7950: PPUSH
7951: LD_INT 1
7953: PPUSH
7954: LD_EXP 36
7958: PPUSH
7959: CALL_OW 380
// un := CreateHuman ;
7963: LD_ADDR_VAR 0 2
7967: PUSH
7968: CALL_OW 44
7972: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_towers [ i ] ) ;
7973: LD_VAR 0 2
7977: PPUSH
7978: LD_VAR 0 10
7982: PUSH
7983: LD_VAR 0 3
7987: ARRAY
7988: PPUSH
7989: CALL_OW 52
// end ;
7993: GO 7945
7995: POP
7996: POP
// for i = 1 to 4 do
7997: LD_ADDR_VAR 0 3
8001: PUSH
8002: DOUBLE
8003: LD_INT 1
8005: DEC
8006: ST_TO_ADDR
8007: LD_INT 4
8009: PUSH
8010: FOR_TO
8011: IFFALSE 8104
// for p = 1 to 2 do
8013: LD_ADDR_VAR 0 7
8017: PUSH
8018: DOUBLE
8019: LD_INT 1
8021: DEC
8022: ST_TO_ADDR
8023: LD_INT 2
8025: PUSH
8026: FOR_TO
8027: IFFALSE 8100
// begin PrepareHuman ( false , class_mortar , legion_skill ) ;
8029: LD_INT 0
8031: PPUSH
8032: LD_INT 8
8034: PPUSH
8035: LD_EXP 36
8039: PPUSH
8040: CALL_OW 380
// un := CreateHuman ;
8044: LD_ADDR_VAR 0 2
8048: PUSH
8049: CALL_OW 44
8053: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_barracks ] ] ) [ p ] ) ;
8054: LD_VAR 0 2
8058: PPUSH
8059: LD_INT 22
8061: PUSH
8062: LD_INT 8
8064: PUSH
8065: EMPTY
8066: LIST
8067: LIST
8068: PUSH
8069: LD_INT 30
8071: PUSH
8072: LD_INT 5
8074: PUSH
8075: EMPTY
8076: LIST
8077: LIST
8078: PUSH
8079: EMPTY
8080: LIST
8081: LIST
8082: PPUSH
8083: CALL_OW 69
8087: PUSH
8088: LD_VAR 0 7
8092: ARRAY
8093: PPUSH
8094: CALL_OW 52
// end ;
8098: GO 8026
8100: POP
8101: POP
8102: GO 8010
8104: POP
8105: POP
// for i = 1 to 4 do
8106: LD_ADDR_VAR 0 3
8110: PUSH
8111: DOUBLE
8112: LD_INT 1
8114: DEC
8115: ST_TO_ADDR
8116: LD_INT 4
8118: PUSH
8119: FOR_TO
8120: IFFALSE 8163
// begin PrepareHuman ( false , 4 , legion_skill ) ;
8122: LD_INT 0
8124: PPUSH
8125: LD_INT 4
8127: PPUSH
8128: LD_EXP 36
8132: PPUSH
8133: CALL_OW 380
// un := CreateHuman ;
8137: LD_ADDR_VAR 0 2
8141: PUSH
8142: CALL_OW 44
8146: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_lab ) ;
8147: LD_VAR 0 2
8151: PPUSH
8152: LD_VAR 0 9
8156: PPUSH
8157: CALL_OW 52
// end ;
8161: GO 8119
8163: POP
8164: POP
// for i = 1 to 4 do
8165: LD_ADDR_VAR 0 3
8169: PUSH
8170: DOUBLE
8171: LD_INT 1
8173: DEC
8174: ST_TO_ADDR
8175: LD_INT 4
8177: PUSH
8178: FOR_TO
8179: IFFALSE 8222
// begin PrepareHuman ( false , 3 , legion_skill ) ;
8181: LD_INT 0
8183: PPUSH
8184: LD_INT 3
8186: PPUSH
8187: LD_EXP 36
8191: PPUSH
8192: CALL_OW 380
// un := CreateHuman ;
8196: LD_ADDR_VAR 0 2
8200: PUSH
8201: CALL_OW 44
8205: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_factory ) ;
8206: LD_VAR 0 2
8210: PPUSH
8211: LD_VAR 0 8
8215: PPUSH
8216: CALL_OW 52
// end ;
8220: GO 8178
8222: POP
8223: POP
// for i = 1 to 3 do
8224: LD_ADDR_VAR 0 3
8228: PUSH
8229: DOUBLE
8230: LD_INT 1
8232: DEC
8233: ST_TO_ADDR
8234: LD_INT 3
8236: PUSH
8237: FOR_TO
8238: IFFALSE 8281
// begin PrepareHuman ( false , 2 , legion_skill ) ;
8240: LD_INT 0
8242: PPUSH
8243: LD_INT 2
8245: PPUSH
8246: LD_EXP 36
8250: PPUSH
8251: CALL_OW 380
// un := CreateHuman ;
8255: LD_ADDR_VAR 0 2
8259: PUSH
8260: CALL_OW 44
8264: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_depot ) ;
8265: LD_VAR 0 2
8269: PPUSH
8270: LD_VAR 0 6
8274: PPUSH
8275: CALL_OW 52
// end ;
8279: GO 8237
8281: POP
8282: POP
// for i = 1 to 3 do
8283: LD_ADDR_VAR 0 3
8287: PUSH
8288: DOUBLE
8289: LD_INT 1
8291: DEC
8292: ST_TO_ADDR
8293: LD_INT 3
8295: PUSH
8296: FOR_TO
8297: IFFALSE 8407
// begin vc_chassis := ar_half_tracked ;
8299: LD_ADDR_OWVAR 37
8303: PUSH
8304: LD_INT 14
8306: ST_TO_ADDR
// vc_engine := engine_siberite ;
8307: LD_ADDR_OWVAR 39
8311: PUSH
8312: LD_INT 3
8314: ST_TO_ADDR
// vc_control := control_manual ;
8315: LD_ADDR_OWVAR 38
8319: PUSH
8320: LD_INT 1
8322: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
8323: LD_ADDR_OWVAR 40
8327: PUSH
8328: LD_INT 31
8330: ST_TO_ADDR
// veh := CreateVehicle ;
8331: LD_ADDR_VAR 0 5
8335: PUSH
8336: CALL_OW 45
8340: ST_TO_ADDR
// PlaceUnitXYR ( veh , 212 , 135 , 5 , false ) ;
8341: LD_VAR 0 5
8345: PPUSH
8346: LD_INT 212
8348: PPUSH
8349: LD_INT 135
8351: PPUSH
8352: LD_INT 5
8354: PPUSH
8355: LD_INT 0
8357: PPUSH
8358: CALL_OW 50
// PrepareHuman ( false , 3 , legion_skill + 1 ) ;
8362: LD_INT 0
8364: PPUSH
8365: LD_INT 3
8367: PPUSH
8368: LD_EXP 36
8372: PUSH
8373: LD_INT 1
8375: PLUS
8376: PPUSH
8377: CALL_OW 380
// un := CreateHuman ;
8381: LD_ADDR_VAR 0 2
8385: PUSH
8386: CALL_OW 44
8390: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8391: LD_VAR 0 2
8395: PPUSH
8396: LD_VAR 0 5
8400: PPUSH
8401: CALL_OW 52
// end ;
8405: GO 8296
8407: POP
8408: POP
// PlaceSeeing ( 198 , 94 , 8 , 10 ) ;
8409: LD_INT 198
8411: PPUSH
8412: LD_INT 94
8414: PPUSH
8415: LD_INT 8
8417: PPUSH
8418: LD_INT 10
8420: PPUSH
8421: CALL_OW 330
// PlaceSeeing ( 167 , 130 , 8 , 10 ) ;
8425: LD_INT 167
8427: PPUSH
8428: LD_INT 130
8430: PPUSH
8431: LD_INT 8
8433: PPUSH
8434: LD_INT 10
8436: PPUSH
8437: CALL_OW 330
// tmp := AreaToList ( legion_mines_area , 0 ) ;
8441: LD_ADDR_VAR 0 4
8445: PUSH
8446: LD_INT 25
8448: PPUSH
8449: LD_INT 0
8451: PPUSH
8452: CALL_OW 517
8456: ST_TO_ADDR
// legion_mines := [ ] ;
8457: LD_ADDR_EXP 37
8461: PUSH
8462: EMPTY
8463: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
8464: LD_ADDR_VAR 0 3
8468: PUSH
8469: DOUBLE
8470: LD_INT 1
8472: DEC
8473: ST_TO_ADDR
8474: LD_VAR 0 4
8478: PUSH
8479: LD_INT 1
8481: ARRAY
8482: PUSH
8483: FOR_TO
8484: IFFALSE 8586
// begin PlaceMine ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 8 , 0 ) ;
8486: LD_VAR 0 4
8490: PUSH
8491: LD_INT 1
8493: ARRAY
8494: PUSH
8495: LD_VAR 0 3
8499: ARRAY
8500: PPUSH
8501: LD_VAR 0 4
8505: PUSH
8506: LD_INT 2
8508: ARRAY
8509: PUSH
8510: LD_VAR 0 3
8514: ARRAY
8515: PPUSH
8516: LD_INT 8
8518: PPUSH
8519: LD_INT 0
8521: PPUSH
8522: CALL_OW 454
// legion_mines := Replace ( legion_mines , legion_mines + 1 , [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ) ;
8526: LD_ADDR_EXP 37
8530: PUSH
8531: LD_EXP 37
8535: PPUSH
8536: LD_EXP 37
8540: PUSH
8541: LD_INT 1
8543: PLUS
8544: PPUSH
8545: LD_VAR 0 4
8549: PUSH
8550: LD_INT 1
8552: ARRAY
8553: PUSH
8554: LD_VAR 0 3
8558: ARRAY
8559: PUSH
8560: LD_VAR 0 4
8564: PUSH
8565: LD_INT 2
8567: ARRAY
8568: PUSH
8569: LD_VAR 0 3
8573: ARRAY
8574: PUSH
8575: EMPTY
8576: LIST
8577: LIST
8578: PPUSH
8579: CALL_OW 1
8583: ST_TO_ADDR
// end ;
8584: GO 8483
8586: POP
8587: POP
// legion_vlist := [ ar_medium_trike , 3 , control_remote , ar_cargo_bay ] ;
8588: LD_ADDR_EXP 39
8592: PUSH
8593: LD_INT 13
8595: PUSH
8596: LD_INT 3
8598: PUSH
8599: LD_INT 2
8601: PUSH
8602: LD_INT 32
8604: PUSH
8605: EMPTY
8606: LIST
8607: LIST
8608: LIST
8609: LIST
8610: ST_TO_ADDR
// end ;
8611: LD_VAR 0 1
8615: RET
// every 0 0$1 trigger tick >= [ 25 25$00 , 22 22$00 , 20 20$00 ] [ Difficulty ] do var artifact , un ;
8616: LD_OWVAR 1
8620: PUSH
8621: LD_INT 52500
8623: PUSH
8624: LD_INT 46200
8626: PUSH
8627: LD_INT 42000
8629: PUSH
8630: EMPTY
8631: LIST
8632: LIST
8633: LIST
8634: PUSH
8635: LD_OWVAR 67
8639: ARRAY
8640: GREATEREQUAL
8641: IFFALSE 8819
8643: GO 8645
8645: DISABLE
8646: LD_INT 0
8648: PPUSH
8649: PPUSH
// begin artifact := FindArtifact ( 1 ) ;
8650: LD_ADDR_VAR 0 1
8654: PUSH
8655: LD_INT 1
8657: PPUSH
8658: CALL_OW 469
8662: ST_TO_ADDR
// if artifact [ 1 ] = 112 and artifact [ 2 ] = 67 then
8663: LD_VAR 0 1
8667: PUSH
8668: LD_INT 1
8670: ARRAY
8671: PUSH
8672: LD_INT 112
8674: EQUAL
8675: PUSH
8676: LD_VAR 0 1
8680: PUSH
8681: LD_INT 2
8683: ARRAY
8684: PUSH
8685: LD_INT 67
8687: EQUAL
8688: AND
8689: IFFALSE 8819
// begin un := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 2 ] ] ) ;
8691: LD_ADDR_VAR 0 2
8695: PUSH
8696: LD_INT 22
8698: PUSH
8699: LD_INT 8
8701: PUSH
8702: EMPTY
8703: LIST
8704: LIST
8705: PUSH
8706: LD_INT 25
8708: PUSH
8709: LD_INT 2
8711: PUSH
8712: EMPTY
8713: LIST
8714: LIST
8715: PUSH
8716: EMPTY
8717: LIST
8718: LIST
8719: PPUSH
8720: CALL_OW 69
8724: ST_TO_ADDR
// if not un then
8725: LD_VAR 0 2
8729: NOT
8730: IFFALSE 8734
// exit ;
8732: GO 8819
// un := un [ 1 ] ;
8734: LD_ADDR_VAR 0 2
8738: PUSH
8739: LD_VAR 0 2
8743: PUSH
8744: LD_INT 1
8746: ARRAY
8747: ST_TO_ADDR
// if IsInUnit ( un ) then
8748: LD_VAR 0 2
8752: PPUSH
8753: CALL_OW 310
8757: IFFALSE 8768
// ComExitBuilding ( un ) ;
8759: LD_VAR 0 2
8763: PPUSH
8764: CALL_OW 122
// AddComCollect ( un , artifact [ 1 ] , artifact [ 2 ] ) ;
8768: LD_VAR 0 2
8772: PPUSH
8773: LD_VAR 0 1
8777: PUSH
8778: LD_INT 1
8780: ARRAY
8781: PPUSH
8782: LD_VAR 0 1
8786: PUSH
8787: LD_INT 2
8789: ARRAY
8790: PPUSH
8791: CALL_OW 177
// AddComMoveXY ( un , 207 , 123 ) ;
8795: LD_VAR 0 2
8799: PPUSH
8800: LD_INT 207
8802: PPUSH
8803: LD_INT 123
8805: PPUSH
8806: CALL_OW 171
// AddComUnload ( un ) ;
8810: LD_VAR 0 2
8814: PPUSH
8815: CALL_OW 219
// end ; end ;
8819: PPOPN 2
8821: END
// every 0 0$02 trigger FilterAllUnits ( [ f_side , 8 ] ) > 0 do var un , i , tmp , veh , b , p , cr , l_depot , l_factory , l_lab , l_towers , l_sib , l_sci , l_mech , l_sold , l_eng , l_cargo ;
8822: LD_INT 22
8824: PUSH
8825: LD_INT 8
8827: PUSH
8828: EMPTY
8829: LIST
8830: LIST
8831: PPUSH
8832: CALL_OW 69
8836: PUSH
8837: LD_INT 0
8839: GREATER
8840: IFFALSE 10425
8842: GO 8844
8844: DISABLE
8845: LD_INT 0
8847: PPUSH
8848: PPUSH
8849: PPUSH
8850: PPUSH
8851: PPUSH
8852: PPUSH
8853: PPUSH
8854: PPUSH
8855: PPUSH
8856: PPUSH
8857: PPUSH
8858: PPUSH
8859: PPUSH
8860: PPUSH
8861: PPUSH
8862: PPUSH
8863: PPUSH
// begin enable ;
8864: ENABLE
// l_depot := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
8865: LD_ADDR_VAR 0 8
8869: PUSH
8870: LD_INT 22
8872: PUSH
8873: LD_INT 8
8875: PUSH
8876: EMPTY
8877: LIST
8878: LIST
8879: PUSH
8880: LD_INT 30
8882: PUSH
8883: LD_INT 1
8885: PUSH
8886: EMPTY
8887: LIST
8888: LIST
8889: PUSH
8890: EMPTY
8891: LIST
8892: LIST
8893: PPUSH
8894: CALL_OW 69
8898: PUSH
8899: LD_INT 1
8901: ARRAY
8902: ST_TO_ADDR
// l_factory := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
8903: LD_ADDR_VAR 0 9
8907: PUSH
8908: LD_INT 22
8910: PUSH
8911: LD_INT 8
8913: PUSH
8914: EMPTY
8915: LIST
8916: LIST
8917: PUSH
8918: LD_INT 30
8920: PUSH
8921: LD_INT 3
8923: PUSH
8924: EMPTY
8925: LIST
8926: LIST
8927: PUSH
8928: EMPTY
8929: LIST
8930: LIST
8931: PPUSH
8932: CALL_OW 69
8936: PUSH
8937: LD_INT 1
8939: ARRAY
8940: ST_TO_ADDR
// l_lab := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ;
8941: LD_ADDR_VAR 0 10
8945: PUSH
8946: LD_INT 22
8948: PUSH
8949: LD_INT 8
8951: PUSH
8952: EMPTY
8953: LIST
8954: LIST
8955: PUSH
8956: LD_INT 2
8958: PUSH
8959: LD_INT 30
8961: PUSH
8962: LD_INT 6
8964: PUSH
8965: EMPTY
8966: LIST
8967: LIST
8968: PUSH
8969: LD_INT 30
8971: PUSH
8972: LD_INT 8
8974: PUSH
8975: EMPTY
8976: LIST
8977: LIST
8978: PUSH
8979: EMPTY
8980: LIST
8981: LIST
8982: LIST
8983: PUSH
8984: EMPTY
8985: LIST
8986: LIST
8987: PPUSH
8988: CALL_OW 69
8992: PUSH
8993: LD_INT 1
8995: ARRAY
8996: ST_TO_ADDR
// l_towers := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) ;
8997: LD_ADDR_VAR 0 11
9001: PUSH
9002: LD_INT 22
9004: PUSH
9005: LD_INT 8
9007: PUSH
9008: EMPTY
9009: LIST
9010: LIST
9011: PUSH
9012: LD_INT 30
9014: PUSH
9015: LD_INT 32
9017: PUSH
9018: EMPTY
9019: LIST
9020: LIST
9021: PUSH
9022: EMPTY
9023: LIST
9024: LIST
9025: PPUSH
9026: CALL_OW 69
9030: ST_TO_ADDR
// l_eng := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 2 ] ] ) ;
9031: LD_ADDR_VAR 0 16
9035: PUSH
9036: LD_INT 22
9038: PUSH
9039: LD_INT 8
9041: PUSH
9042: EMPTY
9043: LIST
9044: LIST
9045: PUSH
9046: LD_INT 25
9048: PUSH
9049: LD_INT 2
9051: PUSH
9052: EMPTY
9053: LIST
9054: LIST
9055: PUSH
9056: EMPTY
9057: LIST
9058: LIST
9059: PPUSH
9060: CALL_OW 69
9064: ST_TO_ADDR
// l_sold := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 1 ] ] ) ;
9065: LD_ADDR_VAR 0 15
9069: PUSH
9070: LD_INT 22
9072: PUSH
9073: LD_INT 8
9075: PUSH
9076: EMPTY
9077: LIST
9078: LIST
9079: PUSH
9080: LD_INT 25
9082: PUSH
9083: LD_INT 1
9085: PUSH
9086: EMPTY
9087: LIST
9088: LIST
9089: PUSH
9090: EMPTY
9091: LIST
9092: LIST
9093: PPUSH
9094: CALL_OW 69
9098: ST_TO_ADDR
// l_mech := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 3 ] ] ) ;
9099: LD_ADDR_VAR 0 14
9103: PUSH
9104: LD_INT 22
9106: PUSH
9107: LD_INT 8
9109: PUSH
9110: EMPTY
9111: LIST
9112: LIST
9113: PUSH
9114: LD_INT 25
9116: PUSH
9117: LD_INT 3
9119: PUSH
9120: EMPTY
9121: LIST
9122: LIST
9123: PUSH
9124: EMPTY
9125: LIST
9126: LIST
9127: PPUSH
9128: CALL_OW 69
9132: ST_TO_ADDR
// l_sci := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 4 ] ] ) ;
9133: LD_ADDR_VAR 0 13
9137: PUSH
9138: LD_INT 22
9140: PUSH
9141: LD_INT 8
9143: PUSH
9144: EMPTY
9145: LIST
9146: LIST
9147: PUSH
9148: LD_INT 25
9150: PUSH
9151: LD_INT 4
9153: PUSH
9154: EMPTY
9155: LIST
9156: LIST
9157: PUSH
9158: EMPTY
9159: LIST
9160: LIST
9161: PPUSH
9162: CALL_OW 69
9166: ST_TO_ADDR
// if l_eng then
9167: LD_VAR 0 16
9171: IFFALSE 9586
// begin b := FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) ;
9173: LD_ADDR_VAR 0 5
9177: PUSH
9178: LD_INT 22
9180: PUSH
9181: LD_INT 8
9183: PUSH
9184: EMPTY
9185: LIST
9186: LIST
9187: PUSH
9188: LD_INT 21
9190: PUSH
9191: LD_INT 3
9193: PUSH
9194: EMPTY
9195: LIST
9196: LIST
9197: PUSH
9198: EMPTY
9199: LIST
9200: LIST
9201: PPUSH
9202: CALL_OW 69
9206: ST_TO_ADDR
// if UnitFilter ( b , [ f_not , [ f_lives , 1000 ] ] ) > 0 then
9207: LD_VAR 0 5
9211: PPUSH
9212: LD_INT 3
9214: PUSH
9215: LD_INT 24
9217: PUSH
9218: LD_INT 1000
9220: PUSH
9221: EMPTY
9222: LIST
9223: LIST
9224: PUSH
9225: EMPTY
9226: LIST
9227: LIST
9228: PPUSH
9229: CALL_OW 72
9233: PUSH
9234: LD_INT 0
9236: GREATER
9237: IFFALSE 9371
// begin tmp := UnitFilter ( b , [ f_not , [ f_lives , 1000 ] ] ) ;
9239: LD_ADDR_VAR 0 3
9243: PUSH
9244: LD_VAR 0 5
9248: PPUSH
9249: LD_INT 3
9251: PUSH
9252: LD_INT 24
9254: PUSH
9255: LD_INT 1000
9257: PUSH
9258: EMPTY
9259: LIST
9260: LIST
9261: PUSH
9262: EMPTY
9263: LIST
9264: LIST
9265: PPUSH
9266: CALL_OW 72
9270: ST_TO_ADDR
// for i = 1 to l_eng do
9271: LD_ADDR_VAR 0 2
9275: PUSH
9276: DOUBLE
9277: LD_INT 1
9279: DEC
9280: ST_TO_ADDR
9281: LD_VAR 0 16
9285: PUSH
9286: FOR_TO
9287: IFFALSE 9367
// if IsInUnit ( l_eng [ i ] ) then
9289: LD_VAR 0 16
9293: PUSH
9294: LD_VAR 0 2
9298: ARRAY
9299: PPUSH
9300: CALL_OW 310
9304: IFFALSE 9323
// ComExitBuilding ( l_eng [ i ] ) else
9306: LD_VAR 0 16
9310: PUSH
9311: LD_VAR 0 2
9315: ARRAY
9316: PPUSH
9317: CALL_OW 122
9321: GO 9365
// if not HasTask ( l_eng [ i ] ) then
9323: LD_VAR 0 16
9327: PUSH
9328: LD_VAR 0 2
9332: ARRAY
9333: PPUSH
9334: CALL_OW 314
9338: NOT
9339: IFFALSE 9365
// ComRepairBuilding ( l_eng [ i ] , tmp [ 1 ] ) ;
9341: LD_VAR 0 16
9345: PUSH
9346: LD_VAR 0 2
9350: ARRAY
9351: PPUSH
9352: LD_VAR 0 3
9356: PUSH
9357: LD_INT 1
9359: ARRAY
9360: PPUSH
9361: CALL_OW 130
9365: GO 9286
9367: POP
9368: POP
// end else
9369: GO 9586
// begin if legion_blist > 0 then
9371: LD_EXP 38
9375: PUSH
9376: LD_INT 0
9378: GREATER
9379: IFFALSE 9508
// begin for i = 1 to l_eng do
9381: LD_ADDR_VAR 0 2
9385: PUSH
9386: DOUBLE
9387: LD_INT 1
9389: DEC
9390: ST_TO_ADDR
9391: LD_VAR 0 16
9395: PUSH
9396: FOR_TO
9397: IFFALSE 9504
// if IsInUnit ( l_eng [ i ] ) then
9399: LD_VAR 0 16
9403: PUSH
9404: LD_VAR 0 2
9408: ARRAY
9409: PPUSH
9410: CALL_OW 310
9414: IFFALSE 9433
// ComExitBuilding ( l_eng [ i ] ) else
9416: LD_VAR 0 16
9420: PUSH
9421: LD_VAR 0 2
9425: ARRAY
9426: PPUSH
9427: CALL_OW 122
9431: GO 9502
// if not HasTask ( l_eng [ i ] ) then
9433: LD_VAR 0 16
9437: PUSH
9438: LD_VAR 0 2
9442: ARRAY
9443: PPUSH
9444: CALL_OW 314
9448: NOT
9449: IFFALSE 9502
// ComBuild ( l_eng [ i ] , legion_blist [ 1 ] , legion_blist [ 2 ] , legion_blist [ 3 ] , legion_blist [ 4 ] ) ;
9451: LD_VAR 0 16
9455: PUSH
9456: LD_VAR 0 2
9460: ARRAY
9461: PPUSH
9462: LD_EXP 38
9466: PUSH
9467: LD_INT 1
9469: ARRAY
9470: PPUSH
9471: LD_EXP 38
9475: PUSH
9476: LD_INT 2
9478: ARRAY
9479: PPUSH
9480: LD_EXP 38
9484: PUSH
9485: LD_INT 3
9487: ARRAY
9488: PPUSH
9489: LD_EXP 38
9493: PUSH
9494: LD_INT 4
9496: ARRAY
9497: PPUSH
9498: CALL_OW 145
9502: GO 9396
9504: POP
9505: POP
// end else
9506: GO 9586
// for i = 1 to l_eng do
9508: LD_ADDR_VAR 0 2
9512: PUSH
9513: DOUBLE
9514: LD_INT 1
9516: DEC
9517: ST_TO_ADDR
9518: LD_VAR 0 16
9522: PUSH
9523: FOR_TO
9524: IFFALSE 9584
// if not IsInUnit ( l_eng [ i ] ) and not HasTask ( l_eng [ i ] ) then
9526: LD_VAR 0 16
9530: PUSH
9531: LD_VAR 0 2
9535: ARRAY
9536: PPUSH
9537: CALL_OW 310
9541: NOT
9542: PUSH
9543: LD_VAR 0 16
9547: PUSH
9548: LD_VAR 0 2
9552: ARRAY
9553: PPUSH
9554: CALL_OW 314
9558: NOT
9559: AND
9560: IFFALSE 9582
// ComEnterUnit ( l_eng [ i ] , l_depot ) ;
9562: LD_VAR 0 16
9566: PUSH
9567: LD_VAR 0 2
9571: ARRAY
9572: PPUSH
9573: LD_VAR 0 8
9577: PPUSH
9578: CALL_OW 120
9582: GO 9523
9584: POP
9585: POP
// end ; end ; if l_factory then
9586: LD_VAR 0 9
9590: IFFALSE 9990
// begin if FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) > 0 then
9592: LD_INT 22
9594: PUSH
9595: LD_INT 8
9597: PUSH
9598: EMPTY
9599: LIST
9600: LIST
9601: PUSH
9602: LD_INT 33
9604: PUSH
9605: LD_INT 2
9607: PUSH
9608: EMPTY
9609: LIST
9610: LIST
9611: PUSH
9612: LD_INT 3
9614: PUSH
9615: LD_INT 61
9617: PUSH
9618: EMPTY
9619: LIST
9620: PUSH
9621: EMPTY
9622: LIST
9623: LIST
9624: PUSH
9625: EMPTY
9626: LIST
9627: LIST
9628: LIST
9629: PPUSH
9630: CALL_OW 69
9634: PUSH
9635: LD_INT 0
9637: GREATER
9638: PUSH
9639: LD_INT 22
9641: PUSH
9642: LD_INT 8
9644: PUSH
9645: EMPTY
9646: LIST
9647: LIST
9648: PUSH
9649: LD_INT 34
9651: PUSH
9652: LD_INT 31
9654: PUSH
9655: EMPTY
9656: LIST
9657: LIST
9658: PUSH
9659: EMPTY
9660: LIST
9661: LIST
9662: PPUSH
9663: CALL_OW 69
9667: PUSH
9668: LD_INT 0
9670: GREATER
9671: AND
9672: IFFALSE 9792
// ComLinkTo ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) [ 1 ] , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) [ Rand ( 1 , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) ) ] ) ;
9674: LD_INT 22
9676: PUSH
9677: LD_INT 8
9679: PUSH
9680: EMPTY
9681: LIST
9682: LIST
9683: PUSH
9684: LD_INT 33
9686: PUSH
9687: LD_INT 2
9689: PUSH
9690: EMPTY
9691: LIST
9692: LIST
9693: PUSH
9694: LD_INT 3
9696: PUSH
9697: LD_INT 61
9699: PUSH
9700: EMPTY
9701: LIST
9702: PUSH
9703: EMPTY
9704: LIST
9705: LIST
9706: PUSH
9707: EMPTY
9708: LIST
9709: LIST
9710: LIST
9711: PPUSH
9712: CALL_OW 69
9716: PUSH
9717: LD_INT 1
9719: ARRAY
9720: PPUSH
9721: LD_INT 22
9723: PUSH
9724: LD_INT 8
9726: PUSH
9727: EMPTY
9728: LIST
9729: LIST
9730: PUSH
9731: LD_INT 34
9733: PUSH
9734: LD_INT 31
9736: PUSH
9737: EMPTY
9738: LIST
9739: LIST
9740: PUSH
9741: EMPTY
9742: LIST
9743: LIST
9744: PPUSH
9745: CALL_OW 69
9749: PUSH
9750: LD_INT 1
9752: PPUSH
9753: LD_INT 22
9755: PUSH
9756: LD_INT 8
9758: PUSH
9759: EMPTY
9760: LIST
9761: LIST
9762: PUSH
9763: LD_INT 34
9765: PUSH
9766: LD_INT 31
9768: PUSH
9769: EMPTY
9770: LIST
9771: LIST
9772: PUSH
9773: EMPTY
9774: LIST
9775: LIST
9776: PPUSH
9777: CALL_OW 69
9781: PPUSH
9782: CALL_OW 12
9786: ARRAY
9787: PPUSH
9788: CALL_OW 135
// if legion_vlist > 0 and BuildingStatus ( l_factory ) = bs_idle then
9792: LD_EXP 39
9796: PUSH
9797: LD_INT 0
9799: GREATER
9800: PUSH
9801: LD_VAR 0 9
9805: PPUSH
9806: CALL_OW 461
9810: PUSH
9811: LD_INT 2
9813: EQUAL
9814: AND
9815: IFFALSE 9900
// begin ComConstruct ( l_factory , legion_vlist [ 1 ] , legion_vlist [ 2 ] , legion_vlist [ 3 ] , legion_vlist [ 4 ] ) ;
9817: LD_VAR 0 9
9821: PPUSH
9822: LD_EXP 39
9826: PUSH
9827: LD_INT 1
9829: ARRAY
9830: PPUSH
9831: LD_EXP 39
9835: PUSH
9836: LD_INT 2
9838: ARRAY
9839: PPUSH
9840: LD_EXP 39
9844: PUSH
9845: LD_INT 3
9847: ARRAY
9848: PPUSH
9849: LD_EXP 39
9853: PUSH
9854: LD_INT 4
9856: ARRAY
9857: PPUSH
9858: CALL_OW 125
// for i = 1 to 4 do
9862: LD_ADDR_VAR 0 2
9866: PUSH
9867: DOUBLE
9868: LD_INT 1
9870: DEC
9871: ST_TO_ADDR
9872: LD_INT 4
9874: PUSH
9875: FOR_TO
9876: IFFALSE 9898
// legion_vlist := Delete ( legion_vlist , 1 ) ;
9878: LD_ADDR_EXP 39
9882: PUSH
9883: LD_EXP 39
9887: PPUSH
9888: LD_INT 1
9890: PPUSH
9891: CALL_OW 3
9895: ST_TO_ADDR
9896: GO 9875
9898: POP
9899: POP
// end ; if UnitFilter ( l_towers , [ f_bweapon , 0 ] ) > 0 and BuildingStatus ( l_factory ) = bs_idle then
9900: LD_VAR 0 11
9904: PPUSH
9905: LD_INT 35
9907: PUSH
9908: LD_INT 0
9910: PUSH
9911: EMPTY
9912: LIST
9913: LIST
9914: PPUSH
9915: CALL_OW 72
9919: PUSH
9920: LD_INT 0
9922: GREATER
9923: PUSH
9924: LD_VAR 0 9
9928: PPUSH
9929: CALL_OW 461
9933: PUSH
9934: LD_INT 2
9936: EQUAL
9937: AND
9938: IFFALSE 9990
// ComPlaceWeapon ( UnitFilter ( l_towers , [ f_bweapon , 0 ] ) [ 1 ] , [ ar_rocket_launcher , ar_gun ] [ Rand ( 1 , 2 ) ] ) ;
9940: LD_VAR 0 11
9944: PPUSH
9945: LD_INT 35
9947: PUSH
9948: LD_INT 0
9950: PUSH
9951: EMPTY
9952: LIST
9953: LIST
9954: PPUSH
9955: CALL_OW 72
9959: PUSH
9960: LD_INT 1
9962: ARRAY
9963: PPUSH
9964: LD_INT 28
9966: PUSH
9967: LD_INT 27
9969: PUSH
9970: EMPTY
9971: LIST
9972: LIST
9973: PUSH
9974: LD_INT 1
9976: PPUSH
9977: LD_INT 2
9979: PPUSH
9980: CALL_OW 12
9984: ARRAY
9985: PPUSH
9986: CALL_OW 148
// end ; if legion_enemy > 0 then
9990: LD_EXP 40
9994: PUSH
9995: LD_INT 0
9997: GREATER
9998: IFFALSE 10283
// begin if tick mod 11 11$00 = 0 then
10000: LD_OWVAR 1
10004: PUSH
10005: LD_INT 23100
10007: MOD
10008: PUSH
10009: LD_INT 0
10011: EQUAL
10012: IFFALSE 10264
// begin legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
10014: LD_ADDR_EXP 39
10018: PUSH
10019: LD_EXP 39
10023: PUSH
10024: LD_INT 13
10026: PUSH
10027: LD_INT 1
10029: PUSH
10030: LD_INT 2
10032: PUSH
10033: EMPTY
10034: LIST
10035: LIST
10036: LIST
10037: ADD
10038: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
10039: LD_ADDR_EXP 39
10043: PUSH
10044: LD_EXP 39
10048: PUSH
10049: LD_INT 28
10051: PUSH
10052: LD_INT 27
10054: PUSH
10055: LD_INT 29
10057: PUSH
10058: EMPTY
10059: LIST
10060: LIST
10061: LIST
10062: PUSH
10063: LD_INT 1
10065: PPUSH
10066: LD_INT 3
10068: PPUSH
10069: CALL_OW 12
10073: ARRAY
10074: ADD
10075: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
10076: LD_ADDR_EXP 39
10080: PUSH
10081: LD_EXP 39
10085: PUSH
10086: LD_INT 13
10088: PUSH
10089: LD_INT 1
10091: PUSH
10092: LD_INT 2
10094: PUSH
10095: EMPTY
10096: LIST
10097: LIST
10098: LIST
10099: ADD
10100: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
10101: LD_ADDR_EXP 39
10105: PUSH
10106: LD_EXP 39
10110: PUSH
10111: LD_INT 28
10113: PUSH
10114: LD_INT 27
10116: PUSH
10117: LD_INT 29
10119: PUSH
10120: EMPTY
10121: LIST
10122: LIST
10123: LIST
10124: PUSH
10125: LD_INT 1
10127: PPUSH
10128: LD_INT 3
10130: PPUSH
10131: CALL_OW 12
10135: ARRAY
10136: ADD
10137: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
10138: LD_ADDR_EXP 39
10142: PUSH
10143: LD_EXP 39
10147: PUSH
10148: LD_INT 13
10150: PUSH
10151: LD_INT 1
10153: PUSH
10154: LD_INT 2
10156: PUSH
10157: EMPTY
10158: LIST
10159: LIST
10160: LIST
10161: ADD
10162: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_mortar , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
10163: LD_ADDR_EXP 39
10167: PUSH
10168: LD_EXP 39
10172: PUSH
10173: LD_INT 28
10175: PUSH
10176: LD_EXP 63
10180: PUSH
10181: LD_INT 29
10183: PUSH
10184: EMPTY
10185: LIST
10186: LIST
10187: LIST
10188: PUSH
10189: LD_INT 1
10191: PPUSH
10192: LD_INT 3
10194: PPUSH
10195: CALL_OW 12
10199: ARRAY
10200: ADD
10201: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
10202: LD_ADDR_EXP 39
10206: PUSH
10207: LD_EXP 39
10211: PUSH
10212: LD_INT 13
10214: PUSH
10215: LD_INT 1
10217: PUSH
10218: LD_INT 2
10220: PUSH
10221: EMPTY
10222: LIST
10223: LIST
10224: LIST
10225: ADD
10226: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
10227: LD_ADDR_EXP 39
10231: PUSH
10232: LD_EXP 39
10236: PUSH
10237: LD_INT 28
10239: PUSH
10240: LD_INT 27
10242: PUSH
10243: LD_INT 29
10245: PUSH
10246: EMPTY
10247: LIST
10248: LIST
10249: LIST
10250: PUSH
10251: LD_INT 1
10253: PPUSH
10254: LD_INT 3
10256: PPUSH
10257: CALL_OW 12
10261: ARRAY
10262: ADD
10263: ST_TO_ADDR
// end ; if legion_force >= 7 then
10264: LD_EXP 35
10268: PUSH
10269: LD_INT 7
10271: GREATEREQUAL
10272: IFFALSE 10283
// RaiseSailEvent ( event_legion_attack ) ;
10274: LD_EXP 20
10278: PPUSH
10279: CALL_OW 427
// end ; if FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_cargo_bay ] ] ) then
10283: LD_INT 22
10285: PUSH
10286: LD_INT 8
10288: PUSH
10289: EMPTY
10290: LIST
10291: LIST
10292: PUSH
10293: LD_INT 34
10295: PUSH
10296: LD_INT 32
10298: PUSH
10299: EMPTY
10300: LIST
10301: LIST
10302: PUSH
10303: EMPTY
10304: LIST
10305: LIST
10306: PPUSH
10307: CALL_OW 69
10311: IFFALSE 10425
// begin if l_cargo = false then
10313: LD_VAR 0 17
10317: PUSH
10318: LD_INT 0
10320: EQUAL
10321: IFFALSE 10357
// l_cargo := FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_cargo_bay ] ] ) ;
10323: LD_ADDR_VAR 0 17
10327: PUSH
10328: LD_INT 22
10330: PUSH
10331: LD_INT 8
10333: PUSH
10334: EMPTY
10335: LIST
10336: LIST
10337: PUSH
10338: LD_INT 34
10340: PUSH
10341: LD_INT 32
10343: PUSH
10344: EMPTY
10345: LIST
10346: LIST
10347: PUSH
10348: EMPTY
10349: LIST
10350: LIST
10351: PPUSH
10352: CALL_OW 69
10356: ST_TO_ADDR
// if l_cargo then
10357: LD_VAR 0 17
10361: IFFALSE 10425
// begin cr := GetListOfCratesInArea ( legion_crates ) ;
10363: LD_ADDR_VAR 0 7
10367: PUSH
10368: LD_INT 14
10370: PPUSH
10371: CALL_OW 435
10375: ST_TO_ADDR
// if cr > 0 then
10376: LD_VAR 0 7
10380: PUSH
10381: LD_INT 0
10383: GREATER
10384: IFFALSE 10425
// if not HasTask ( l_cargo ) then
10386: LD_VAR 0 17
10390: PPUSH
10391: CALL_OW 314
10395: NOT
10396: IFFALSE 10425
// ComCollect ( l_cargo , cr [ 1 ] , cr [ 2 ] ) ;
10398: LD_VAR 0 17
10402: PPUSH
10403: LD_VAR 0 7
10407: PUSH
10408: LD_INT 1
10410: ARRAY
10411: PPUSH
10412: LD_VAR 0 7
10416: PUSH
10417: LD_INT 2
10419: ARRAY
10420: PPUSH
10421: CALL_OW 117
// end ; end ; end ;
10425: PPOPN 17
10427: END
// every 9 9$00 trigger difficulty > 1 do var i , sci , sib , p ;
10428: LD_OWVAR 67
10432: PUSH
10433: LD_INT 1
10435: GREATER
10436: IFFALSE 10641
10438: GO 10440
10440: DISABLE
10441: LD_INT 0
10443: PPUSH
10444: PPUSH
10445: PPUSH
10446: PPUSH
// begin Wait ( Rand ( 0 0$01 , 6 6$01 ) ) ;
10447: LD_INT 35
10449: PPUSH
10450: LD_INT 12635
10452: PPUSH
10453: CALL_OW 12
10457: PPUSH
10458: CALL_OW 67
// sci := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 4 ] ] ) ;
10462: LD_ADDR_VAR 0 2
10466: PUSH
10467: LD_INT 22
10469: PUSH
10470: LD_INT 8
10472: PUSH
10473: EMPTY
10474: LIST
10475: LIST
10476: PUSH
10477: LD_INT 25
10479: PUSH
10480: LD_INT 4
10482: PUSH
10483: EMPTY
10484: LIST
10485: LIST
10486: PUSH
10487: EMPTY
10488: LIST
10489: LIST
10490: PPUSH
10491: CALL_OW 69
10495: ST_TO_ADDR
// p := 1 ;
10496: LD_ADDR_VAR 0 4
10500: PUSH
10501: LD_INT 1
10503: ST_TO_ADDR
// sib := [ 116 , 139 , 69 , 13 ] ;
10504: LD_ADDR_VAR 0 3
10508: PUSH
10509: LD_INT 116
10511: PUSH
10512: LD_INT 139
10514: PUSH
10515: LD_INT 69
10517: PUSH
10518: LD_INT 13
10520: PUSH
10521: EMPTY
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: ST_TO_ADDR
// for i = 1 to 2 do
10527: LD_ADDR_VAR 0 1
10531: PUSH
10532: DOUBLE
10533: LD_INT 1
10535: DEC
10536: ST_TO_ADDR
10537: LD_INT 2
10539: PUSH
10540: FOR_TO
10541: IFFALSE 10639
// begin if IsInUnit ( sci [ i ] ) then
10543: LD_VAR 0 2
10547: PUSH
10548: LD_VAR 0 1
10552: ARRAY
10553: PPUSH
10554: CALL_OW 310
10558: IFFALSE 10575
// ComExitBuilding ( sci [ i ] ) ;
10560: LD_VAR 0 2
10564: PUSH
10565: LD_VAR 0 1
10569: ARRAY
10570: PPUSH
10571: CALL_OW 122
// Wait ( 0 0$03 ) ;
10575: LD_INT 105
10577: PPUSH
10578: CALL_OW 67
// ComContaminate ( sci [ i ] , sib [ p ] , sib [ p + 1 ] ) ;
10582: LD_VAR 0 2
10586: PUSH
10587: LD_VAR 0 1
10591: ARRAY
10592: PPUSH
10593: LD_VAR 0 3
10597: PUSH
10598: LD_VAR 0 4
10602: ARRAY
10603: PPUSH
10604: LD_VAR 0 3
10608: PUSH
10609: LD_VAR 0 4
10613: PUSH
10614: LD_INT 1
10616: PLUS
10617: ARRAY
10618: PPUSH
10619: CALL_OW 158
// p := p + 2 ;
10623: LD_ADDR_VAR 0 4
10627: PUSH
10628: LD_VAR 0 4
10632: PUSH
10633: LD_INT 2
10635: PLUS
10636: ST_TO_ADDR
// end ;
10637: GO 10540
10639: POP
10640: POP
// end ;
10641: PPOPN 4
10643: END
// every 3 3$30 trigger GetListOfCratesInArea ( legion_crates ) < 20 do
10644: LD_INT 14
10646: PPUSH
10647: CALL_OW 435
10651: PUSH
10652: LD_INT 20
10654: LESS
10655: IFFALSE 10682
10657: GO 10659
10659: DISABLE
// begin enable ;
10660: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , legion_crates , true ) ;
10661: LD_INT 1
10663: PPUSH
10664: LD_INT 5
10666: PPUSH
10667: CALL_OW 12
10671: PPUSH
10672: LD_INT 14
10674: PPUSH
10675: LD_INT 1
10677: PPUSH
10678: CALL_OW 55
// end ;
10682: END
// export function LegionAttack ( ) ; var path , units ; begin
10683: LD_INT 0
10685: PPUSH
10686: PPUSH
10687: PPUSH
// units := legion_force ;
10688: LD_ADDR_VAR 0 3
10692: PUSH
10693: LD_EXP 35
10697: ST_TO_ADDR
// legion_force := [ ] ;
10698: LD_ADDR_EXP 35
10702: PUSH
10703: EMPTY
10704: ST_TO_ADDR
// case legion_enemy of 1 :
10705: LD_EXP 40
10709: PUSH
10710: LD_INT 1
10712: DOUBLE
10713: EQUAL
10714: IFTRUE 10718
10716: GO 10761
10718: POP
// path := [ [ 174 , 135 ] , [ 153 , 146 ] , [ 118 , 122 ] ] ; 2 :
10719: LD_ADDR_VAR 0 2
10723: PUSH
10724: LD_INT 174
10726: PUSH
10727: LD_INT 135
10729: PUSH
10730: EMPTY
10731: LIST
10732: LIST
10733: PUSH
10734: LD_INT 153
10736: PUSH
10737: LD_INT 146
10739: PUSH
10740: EMPTY
10741: LIST
10742: LIST
10743: PUSH
10744: LD_INT 118
10746: PUSH
10747: LD_INT 122
10749: PUSH
10750: EMPTY
10751: LIST
10752: LIST
10753: PUSH
10754: EMPTY
10755: LIST
10756: LIST
10757: LIST
10758: ST_TO_ADDR
10759: GO 10864
10761: LD_INT 2
10763: DOUBLE
10764: EQUAL
10765: IFTRUE 10769
10767: GO 10812
10769: POP
// path := [ [ 164 , 73 ] , [ 130 , 48 ] , [ 96 , 48 ] ] ; 7 :
10770: LD_ADDR_VAR 0 2
10774: PUSH
10775: LD_INT 164
10777: PUSH
10778: LD_INT 73
10780: PUSH
10781: EMPTY
10782: LIST
10783: LIST
10784: PUSH
10785: LD_INT 130
10787: PUSH
10788: LD_INT 48
10790: PUSH
10791: EMPTY
10792: LIST
10793: LIST
10794: PUSH
10795: LD_INT 96
10797: PUSH
10798: LD_INT 48
10800: PUSH
10801: EMPTY
10802: LIST
10803: LIST
10804: PUSH
10805: EMPTY
10806: LIST
10807: LIST
10808: LIST
10809: ST_TO_ADDR
10810: GO 10864
10812: LD_INT 7
10814: DOUBLE
10815: EQUAL
10816: IFTRUE 10820
10818: GO 10863
10820: POP
// path := [ [ 174 , 135 ] , [ 153 , 146 ] , [ 118 , 122 ] ] ; end ;
10821: LD_ADDR_VAR 0 2
10825: PUSH
10826: LD_INT 174
10828: PUSH
10829: LD_INT 135
10831: PUSH
10832: EMPTY
10833: LIST
10834: LIST
10835: PUSH
10836: LD_INT 153
10838: PUSH
10839: LD_INT 146
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: PUSH
10846: LD_INT 118
10848: PUSH
10849: LD_INT 122
10851: PUSH
10852: EMPTY
10853: LIST
10854: LIST
10855: PUSH
10856: EMPTY
10857: LIST
10858: LIST
10859: LIST
10860: ST_TO_ADDR
10861: GO 10864
10863: POP
// repeat wait ( 0 0$1 ) ;
10864: LD_INT 35
10866: PPUSH
10867: CALL_OW 67
// AgressiveMove ( units , path ) ;
10871: LD_VAR 0 3
10875: PPUSH
10876: LD_VAR 0 2
10880: PPUSH
10881: CALL 75462 0 2
// until not UnitFilter ( units , [ f_ok ] ) ;
10885: LD_VAR 0 3
10889: PPUSH
10890: LD_INT 50
10892: PUSH
10893: EMPTY
10894: LIST
10895: PPUSH
10896: CALL_OW 72
10900: NOT
10901: IFFALSE 10864
// end ; end_of_file
10903: LD_VAR 0 1
10907: RET
// export function Action ; var un , gamemode , speaker ; begin
10908: LD_INT 0
10910: PPUSH
10911: PPUSH
10912: PPUSH
10913: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
10914: LD_ADDR_OWVAR 67
10918: PUSH
10919: LD_INT 0
10921: PPUSH
10922: CALL_OW 426
10926: ST_TO_ADDR
// gamemode := GetMultiplayerSetting ( 1 ) ;
10927: LD_ADDR_VAR 0 3
10931: PUSH
10932: LD_INT 1
10934: PPUSH
10935: CALL_OW 426
10939: ST_TO_ADDR
// if gamemode = 1 then
10940: LD_VAR 0 3
10944: PUSH
10945: LD_INT 1
10947: EQUAL
10948: IFFALSE 10972
// begin your_side := 1 ;
10950: LD_ADDR_OWVAR 2
10954: PUSH
10955: LD_INT 1
10957: ST_TO_ADDR
// legion_enemy := 1 ;
10958: LD_ADDR_EXP 40
10962: PUSH
10963: LD_INT 1
10965: ST_TO_ADDR
// PrepareAmerican ;
10966: CALL 257 0 0
// end else
10970: GO 11024
// if gamemode = 2 then
10972: LD_VAR 0 3
10976: PUSH
10977: LD_INT 2
10979: EQUAL
10980: IFFALSE 11004
// begin your_side := 2 ;
10982: LD_ADDR_OWVAR 2
10986: PUSH
10987: LD_INT 2
10989: ST_TO_ADDR
// legion_enemy := 2 ;
10990: LD_ADDR_EXP 40
10994: PUSH
10995: LD_INT 2
10997: ST_TO_ADDR
// PrepareArabian ;
10998: CALL 18328 0 0
// end else
11002: GO 11024
// begin your_side := 7 ;
11004: LD_ADDR_OWVAR 2
11008: PUSH
11009: LD_INT 7
11011: ST_TO_ADDR
// legion_enemy := 7 ;
11012: LD_ADDR_EXP 40
11016: PUSH
11017: LD_INT 7
11019: ST_TO_ADDR
// PrepareAlliance ;
11020: CALL 15748 0 0
// end ; if your_side = 1 then
11024: LD_OWVAR 2
11028: PUSH
11029: LD_INT 1
11031: EQUAL
11032: IFFALSE 11510
// begin case Query ( QVul4 ) of 1 :
11034: LD_STRING QVul4
11036: PPUSH
11037: CALL_OW 97
11041: PUSH
11042: LD_INT 1
11044: DOUBLE
11045: EQUAL
11046: IFTRUE 11050
11048: GO 11053
11050: POP
// ; end ;
11051: GO 11054
11053: POP
// InGameOn ;
11054: CALL_OW 8
// CenterNowOnXY ( 8 , 5 ) ;
11058: LD_INT 8
11060: PPUSH
11061: LD_INT 5
11063: PPUSH
11064: CALL_OW 86
// uc_side := 4 ;
11068: LD_ADDR_OWVAR 20
11072: PUSH
11073: LD_INT 4
11075: ST_TO_ADDR
// uc_nation := 1 ;
11076: LD_ADDR_OWVAR 21
11080: PUSH
11081: LD_INT 1
11083: ST_TO_ADDR
// hc_importance := 0 ;
11084: LD_ADDR_OWVAR 32
11088: PUSH
11089: LD_INT 0
11091: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , us_skill ) ;
11092: LD_INT 1
11094: PPUSH
11095: LD_INT 3
11097: PPUSH
11098: LD_EXP 25
11102: PPUSH
11103: CALL_OW 380
// un := CreateHuman ;
11107: LD_ADDR_VAR 0 2
11111: PUSH
11112: CALL_OW 44
11116: ST_TO_ADDR
// PlaceUnitXY ( un , 12 , 9 , false ) ;
11117: LD_VAR 0 2
11121: PPUSH
11122: LD_INT 12
11124: PPUSH
11125: LD_INT 9
11127: PPUSH
11128: LD_INT 0
11130: PPUSH
11131: CALL_OW 48
// hc_name := Stuart Carey ;
11135: LD_ADDR_OWVAR 26
11139: PUSH
11140: LD_STRING Stuart Carey
11142: ST_TO_ADDR
// hc_class := 1 ;
11143: LD_ADDR_OWVAR 28
11147: PUSH
11148: LD_INT 1
11150: ST_TO_ADDR
// hc_gallery := vulcano ;
11151: LD_ADDR_OWVAR 33
11155: PUSH
11156: LD_STRING vulcano
11158: ST_TO_ADDR
// hc_face_number := 1 ;
11159: LD_ADDR_OWVAR 34
11163: PUSH
11164: LD_INT 1
11166: ST_TO_ADDR
// us_guy := CreateHuman ;
11167: LD_ADDR_EXP 26
11171: PUSH
11172: CALL_OW 44
11176: ST_TO_ADDR
// InitHc ;
11177: CALL_OW 19
// if rand ( 0 , 1 ) then
11181: LD_INT 0
11183: PPUSH
11184: LD_INT 1
11186: PPUSH
11187: CALL_OW 12
11191: IFFALSE 11208
// PrepareHuman ( sex_male , 3 , 6 ) else
11193: LD_INT 1
11195: PPUSH
11196: LD_INT 3
11198: PPUSH
11199: LD_INT 6
11201: PPUSH
11202: CALL_OW 380
11206: GO 11221
// PrepareHuman ( sex_female , 4 , 8 ) ;
11208: LD_INT 2
11210: PPUSH
11211: LD_INT 4
11213: PPUSH
11214: LD_INT 8
11216: PPUSH
11217: CALL_OW 380
// ComTurnUnit ( un , us_commander ) ;
11221: LD_VAR 0 2
11225: PPUSH
11226: LD_EXP 23
11230: PPUSH
11231: CALL_OW 119
// ComTurnUnit ( us_commander , un ) ;
11235: LD_EXP 23
11239: PPUSH
11240: LD_VAR 0 2
11244: PPUSH
11245: CALL_OW 119
// if GetSex ( un ) = sex_male then
11249: LD_VAR 0 2
11253: PPUSH
11254: CALL_OW 258
11258: PUSH
11259: LD_INT 1
11261: EQUAL
11262: IFFALSE 11345
// begin Say ( un , VD-un1 ) ;
11264: LD_VAR 0 2
11268: PPUSH
11269: LD_STRING VD-un1
11271: PPUSH
11272: CALL_OW 88
// Say ( us_commander , VDc-1 ) ;
11276: LD_EXP 23
11280: PPUSH
11281: LD_STRING VDc-1
11283: PPUSH
11284: CALL_OW 88
// Say ( un , VD-un2 ) ;
11288: LD_VAR 0 2
11292: PPUSH
11293: LD_STRING VD-un2
11295: PPUSH
11296: CALL_OW 88
// Say ( us_commander , VDc-2 ) ;
11300: LD_EXP 23
11304: PPUSH
11305: LD_STRING VDc-2
11307: PPUSH
11308: CALL_OW 88
// Say ( un , VD-un3 ) ;
11312: LD_VAR 0 2
11316: PPUSH
11317: LD_STRING VD-un3
11319: PPUSH
11320: CALL_OW 88
// wait ( 0 0$0.2 ) ;
11324: LD_INT 7
11326: PPUSH
11327: CALL_OW 67
// Say ( un , VD-un4 ) ;
11331: LD_VAR 0 2
11335: PPUSH
11336: LD_STRING VD-un4
11338: PPUSH
11339: CALL_OW 88
// end else
11343: GO 11424
// begin Say ( un , VD-unf1 ) ;
11345: LD_VAR 0 2
11349: PPUSH
11350: LD_STRING VD-unf1
11352: PPUSH
11353: CALL_OW 88
// Say ( us_commander , VDc-1 ) ;
11357: LD_EXP 23
11361: PPUSH
11362: LD_STRING VDc-1
11364: PPUSH
11365: CALL_OW 88
// Say ( un , VD-unf2 ) ;
11369: LD_VAR 0 2
11373: PPUSH
11374: LD_STRING VD-unf2
11376: PPUSH
11377: CALL_OW 88
// Say ( us_commander , VDc-2 ) ;
11381: LD_EXP 23
11385: PPUSH
11386: LD_STRING VDc-2
11388: PPUSH
11389: CALL_OW 88
// Say ( un , VD-unf3 ) ;
11393: LD_VAR 0 2
11397: PPUSH
11398: LD_STRING VD-unf3
11400: PPUSH
11401: CALL_OW 88
// wait ( 0 0$0.2 ) ;
11405: LD_INT 7
11407: PPUSH
11408: CALL_OW 67
// Say ( un , VD-unf4 ) ;
11412: LD_VAR 0 2
11416: PPUSH
11417: LD_STRING VD-unf4
11419: PPUSH
11420: CALL_OW 88
// end ; ComMoveXY ( un , 2 , 2 ) ;
11424: LD_VAR 0 2
11428: PPUSH
11429: LD_INT 2
11431: PPUSH
11432: LD_INT 2
11434: PPUSH
11435: CALL_OW 111
// Say ( us_commander , VDc-3 ) ;
11439: LD_EXP 23
11443: PPUSH
11444: LD_STRING VDc-3
11446: PPUSH
11447: CALL_OW 88
// InGameOff ;
11451: CALL_OW 9
// ChangeMissionObjectives ( CVulc1 ) ;
11455: LD_STRING CVulc1
11457: PPUSH
11458: CALL_OW 337
// repeat Wait ( 0 0$01 ) ;
11462: LD_INT 35
11464: PPUSH
11465: CALL_OW 67
// until GetX ( un ) = 2 and GetY ( un ) = 2 ;
11469: LD_VAR 0 2
11473: PPUSH
11474: CALL_OW 250
11478: PUSH
11479: LD_INT 2
11481: EQUAL
11482: PUSH
11483: LD_VAR 0 2
11487: PPUSH
11488: CALL_OW 251
11492: PUSH
11493: LD_INT 2
11495: EQUAL
11496: AND
11497: IFFALSE 11462
// RemoveUnit ( un ) ;
11499: LD_VAR 0 2
11503: PPUSH
11504: CALL_OW 64
// end else
11508: GO 11887
// if your_side = 2 then
11510: LD_OWVAR 2
11514: PUSH
11515: LD_INT 2
11517: EQUAL
11518: IFFALSE 11734
// begin CenterNowOnUnits ( player_commander ) ;
11520: LD_EXP 11
11524: PPUSH
11525: CALL_OW 87
// speaker := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff ar_commander ;
11529: LD_ADDR_VAR 0 4
11533: PUSH
11534: LD_INT 22
11536: PUSH
11537: LD_INT 2
11539: PUSH
11540: EMPTY
11541: LIST
11542: LIST
11543: PUSH
11544: LD_INT 21
11546: PUSH
11547: LD_INT 1
11549: PUSH
11550: EMPTY
11551: LIST
11552: LIST
11553: PUSH
11554: EMPTY
11555: LIST
11556: LIST
11557: PPUSH
11558: CALL_OW 69
11562: PUSH
11563: LD_EXP 55
11567: DIFF
11568: ST_TO_ADDR
// if speaker then
11569: LD_VAR 0 4
11573: IFFALSE 11725
// begin InGameOn ;
11575: CALL_OW 8
// Say ( ar_commander , VSd-1 ) ;
11579: LD_EXP 55
11583: PPUSH
11584: LD_STRING VSd-1
11586: PPUSH
11587: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
11591: LD_VAR 0 4
11595: PUSH
11596: LD_INT 1
11598: ARRAY
11599: PPUSH
11600: CALL_OW 258
11604: PUSH
11605: LD_INT 1
11607: EQUAL
11608: IFFALSE 11628
// Say ( speaker [ 1 ] , VAd-1 ) else
11610: LD_VAR 0 4
11614: PUSH
11615: LD_INT 1
11617: ARRAY
11618: PPUSH
11619: LD_STRING VAd-1
11621: PPUSH
11622: CALL_OW 88
11626: GO 11644
// Say ( speaker [ 1 ] , VAfd-1 ) ;
11628: LD_VAR 0 4
11632: PUSH
11633: LD_INT 1
11635: ARRAY
11636: PPUSH
11637: LD_STRING VAfd-1
11639: PPUSH
11640: CALL_OW 88
// Say ( ar_commander , VSd-2 ) ;
11644: LD_EXP 55
11648: PPUSH
11649: LD_STRING VSd-2
11651: PPUSH
11652: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
11656: LD_VAR 0 4
11660: PUSH
11661: LD_INT 1
11663: ARRAY
11664: PPUSH
11665: CALL_OW 258
11669: PUSH
11670: LD_INT 1
11672: EQUAL
11673: IFFALSE 11693
// Say ( speaker [ 1 ] , VAd-2 ) else
11675: LD_VAR 0 4
11679: PUSH
11680: LD_INT 1
11682: ARRAY
11683: PPUSH
11684: LD_STRING VAd-2
11686: PPUSH
11687: CALL_OW 88
11691: GO 11709
// Say ( speaker [ 1 ] , VAfd-2 ) ;
11693: LD_VAR 0 4
11697: PUSH
11698: LD_INT 1
11700: ARRAY
11701: PPUSH
11702: LD_STRING VAfd-2
11704: PPUSH
11705: CALL_OW 88
// Say ( ar_commander , VSd-3 ) ;
11709: LD_EXP 55
11713: PPUSH
11714: LD_STRING VSd-3
11716: PPUSH
11717: CALL_OW 88
// InGameOff ;
11721: CALL_OW 9
// end ; ChangeMissionObjectives ( CVulc5 ) ;
11725: LD_STRING CVulc5
11727: PPUSH
11728: CALL_OW 337
// end else
11732: GO 11887
// if your_side = 7 then
11734: LD_OWVAR 2
11738: PUSH
11739: LD_INT 7
11741: EQUAL
11742: IFFALSE 11887
// begin speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) diff al_commander ;
11744: LD_ADDR_VAR 0 4
11748: PUSH
11749: LD_INT 22
11751: PUSH
11752: LD_INT 7
11754: PUSH
11755: EMPTY
11756: LIST
11757: LIST
11758: PUSH
11759: LD_INT 21
11761: PUSH
11762: LD_INT 1
11764: PUSH
11765: EMPTY
11766: LIST
11767: LIST
11768: PUSH
11769: EMPTY
11770: LIST
11771: LIST
11772: PPUSH
11773: CALL_OW 69
11777: PUSH
11778: LD_EXP 41
11782: DIFF
11783: ST_TO_ADDR
// if speaker then
11784: LD_VAR 0 4
11788: IFFALSE 11880
// begin CenterNowOnUnits ( al_commander ) ;
11790: LD_EXP 41
11794: PPUSH
11795: CALL_OW 87
// InGameOn ;
11799: CALL_OW 8
// Say ( al_commander , VPd-1 ) ;
11803: LD_EXP 41
11807: PPUSH
11808: LD_STRING VPd-1
11810: PPUSH
11811: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) then
11815: LD_VAR 0 4
11819: PUSH
11820: LD_INT 1
11822: ARRAY
11823: PPUSH
11824: CALL_OW 258
11828: IFFALSE 11848
// Say ( speaker [ 1 ] , VPpd-1 ) else
11830: LD_VAR 0 4
11834: PUSH
11835: LD_INT 1
11837: ARRAY
11838: PPUSH
11839: LD_STRING VPpd-1
11841: PPUSH
11842: CALL_OW 88
11846: GO 11864
// Say ( speaker [ 1 ] , VPpdf-1 ) ;
11848: LD_VAR 0 4
11852: PUSH
11853: LD_INT 1
11855: ARRAY
11856: PPUSH
11857: LD_STRING VPpdf-1
11859: PPUSH
11860: CALL_OW 88
// Say ( al_commander , VPd-2 ) ;
11864: LD_EXP 41
11868: PPUSH
11869: LD_STRING VPd-2
11871: PPUSH
11872: CALL_OW 88
// InGameOff ;
11876: CALL_OW 9
// end ; ChangeMissionObjectives ( CVulc7 ) ;
11880: LD_STRING CVulc7
11882: PPUSH
11883: CALL_OW 337
// end ; SaveForQuickRestart ;
11887: CALL_OW 22
// end ;
11891: LD_VAR 0 1
11895: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) do
11896: LD_INT 22
11898: PUSH
11899: LD_INT 2
11901: PUSH
11902: EMPTY
11903: LIST
11904: LIST
11905: PUSH
11906: LD_INT 30
11908: PUSH
11909: LD_INT 3
11911: PUSH
11912: EMPTY
11913: LIST
11914: LIST
11915: PUSH
11916: EMPTY
11917: LIST
11918: LIST
11919: PPUSH
11920: CALL_OW 69
11924: IFFALSE 11968
11926: GO 11928
11928: DISABLE
// begin ChangeMissionObjectives ( CVulc6 ) ;
11929: LD_STRING CVulc6
11931: PPUSH
11932: CALL_OW 337
// Wait ( [ 25 25$00 , 22 22$30 , 20 20$00 ] [ Difficulty ] ) ;
11936: LD_INT 52500
11938: PUSH
11939: LD_INT 47250
11941: PUSH
11942: LD_INT 42000
11944: PUSH
11945: EMPTY
11946: LIST
11947: LIST
11948: LIST
11949: PUSH
11950: LD_OWVAR 67
11954: ARRAY
11955: PPUSH
11956: CALL_OW 67
// ru_can_attack := true ;
11960: LD_ADDR_EXP 3
11964: PUSH
11965: LD_INT 1
11967: ST_TO_ADDR
// end ;
11968: END
// every 0 0$01 trigger GetSide ( us_depot ) = 1 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_warehouse ] ] ] ) do var speaker ;
11969: LD_INT 50
11971: PPUSH
11972: CALL_OW 255
11976: PUSH
11977: LD_INT 1
11979: EQUAL
11980: PUSH
11981: LD_INT 22
11983: PUSH
11984: LD_INT 1
11986: PUSH
11987: EMPTY
11988: LIST
11989: LIST
11990: PUSH
11991: LD_INT 2
11993: PUSH
11994: LD_INT 30
11996: PUSH
11997: LD_INT 3
11999: PUSH
12000: EMPTY
12001: LIST
12002: LIST
12003: PUSH
12004: LD_INT 30
12006: PUSH
12007: LD_INT 1
12009: PUSH
12010: EMPTY
12011: LIST
12012: LIST
12013: PUSH
12014: EMPTY
12015: LIST
12016: LIST
12017: LIST
12018: PUSH
12019: EMPTY
12020: LIST
12021: LIST
12022: PPUSH
12023: CALL_OW 69
12027: OR
12028: IFFALSE 12262
12030: GO 12032
12032: DISABLE
12033: LD_INT 0
12035: PPUSH
// begin ChangeMissionObjectives ( CVulc2 ) ;
12036: LD_STRING CVulc2
12038: PPUSH
12039: CALL_OW 337
// speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) diff us_commander ;
12043: LD_ADDR_VAR 0 1
12047: PUSH
12048: LD_INT 22
12050: PUSH
12051: LD_INT 1
12053: PUSH
12054: EMPTY
12055: LIST
12056: LIST
12057: PUSH
12058: LD_INT 25
12060: PUSH
12061: LD_INT 2
12063: PUSH
12064: EMPTY
12065: LIST
12066: LIST
12067: PUSH
12068: EMPTY
12069: LIST
12070: LIST
12071: PPUSH
12072: CALL_OW 69
12076: PUSH
12077: LD_EXP 23
12081: DIFF
12082: ST_TO_ADDR
// DialogueOn ;
12083: CALL_OW 6
// DWait ( 0 0$0.3 ) ;
12087: LD_INT 10
12089: PPUSH
12090: CALL_OW 68
// if GetSex ( speaker [ 1 ] ) = sex_male then
12094: LD_VAR 0 1
12098: PUSH
12099: LD_INT 1
12101: ARRAY
12102: PPUSH
12103: CALL_OW 258
12107: PUSH
12108: LD_INT 1
12110: EQUAL
12111: IFFALSE 12131
// Say ( speaker [ 1 ] , VDb-1 ) else
12113: LD_VAR 0 1
12117: PUSH
12118: LD_INT 1
12120: ARRAY
12121: PPUSH
12122: LD_STRING VDb-1
12124: PPUSH
12125: CALL_OW 88
12129: GO 12147
// Say ( speaker [ 1 ] , VDbf-1 ) ;
12131: LD_VAR 0 1
12135: PUSH
12136: LD_INT 1
12138: ARRAY
12139: PPUSH
12140: LD_STRING VDbf-1
12142: PPUSH
12143: CALL_OW 88
// DWait ( 0 0$0.3 ) ;
12147: LD_INT 10
12149: PPUSH
12150: CALL_OW 68
// if GetSex ( speaker [ 1 ] ) = sex_male then
12154: LD_VAR 0 1
12158: PUSH
12159: LD_INT 1
12161: ARRAY
12162: PPUSH
12163: CALL_OW 258
12167: PUSH
12168: LD_INT 1
12170: EQUAL
12171: IFFALSE 12191
// Say ( speaker [ 1 ] , VDb-2 ) else
12173: LD_VAR 0 1
12177: PUSH
12178: LD_INT 1
12180: ARRAY
12181: PPUSH
12182: LD_STRING VDb-2
12184: PPUSH
12185: CALL_OW 88
12189: GO 12207
// Say ( speaker [ 1 ] , VDbf-2 ) ;
12191: LD_VAR 0 1
12195: PUSH
12196: LD_INT 1
12198: ARRAY
12199: PPUSH
12200: LD_STRING VDbf-2
12202: PPUSH
12203: CALL_OW 88
// DWait ( 0 0$01 ) ;
12207: LD_INT 35
12209: PPUSH
12210: CALL_OW 68
// Say ( us_commander , VDb-com1 ) ;
12214: LD_EXP 23
12218: PPUSH
12219: LD_STRING VDb-com1
12221: PPUSH
12222: CALL_OW 88
// DialogueOff ;
12226: CALL_OW 7
// Wait ( [ 21 21$00 , 17 17$30 , 15 15$00 ] [ Difficulty ] ) ;
12230: LD_INT 44100
12232: PUSH
12233: LD_INT 36750
12235: PUSH
12236: LD_INT 31500
12238: PUSH
12239: EMPTY
12240: LIST
12241: LIST
12242: LIST
12243: PUSH
12244: LD_OWVAR 67
12248: ARRAY
12249: PPUSH
12250: CALL_OW 67
// ru_can_attack := true ;
12254: LD_ADDR_EXP 3
12258: PUSH
12259: LD_INT 1
12261: ST_TO_ADDR
// end ;
12262: PPOPN 1
12264: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) do
12265: LD_INT 22
12267: PUSH
12268: LD_INT 7
12270: PUSH
12271: EMPTY
12272: LIST
12273: LIST
12274: PUSH
12275: LD_INT 30
12277: PUSH
12278: LD_INT 3
12280: PUSH
12281: EMPTY
12282: LIST
12283: LIST
12284: PUSH
12285: EMPTY
12286: LIST
12287: LIST
12288: PPUSH
12289: CALL_OW 69
12293: IFFALSE 12330
12295: GO 12297
12297: DISABLE
// begin Wait ( [ 20 20$00 , 16 16$30 , 14 14$00 ] [ Difficulty ] ) ;
12298: LD_INT 42000
12300: PUSH
12301: LD_INT 34650
12303: PUSH
12304: LD_INT 29400
12306: PUSH
12307: EMPTY
12308: LIST
12309: LIST
12310: LIST
12311: PUSH
12312: LD_OWVAR 67
12316: ARRAY
12317: PPUSH
12318: CALL_OW 67
// ru_can_attack := true ;
12322: LD_ADDR_EXP 3
12326: PUSH
12327: LD_INT 1
12329: ST_TO_ADDR
// end ;
12330: END
// every 0 0$01 trigger GetSide ( us_lab ) = 1 do var speaker ;
12331: LD_INT 58
12333: PPUSH
12334: CALL_OW 255
12338: PUSH
12339: LD_INT 1
12341: EQUAL
12342: IFFALSE 12549
12344: GO 12346
12346: DISABLE
12347: LD_INT 0
12349: PPUSH
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
12350: LD_ADDR_VAR 0 1
12354: PUSH
12355: LD_INT 22
12357: PUSH
12358: LD_INT 1
12360: PUSH
12361: EMPTY
12362: LIST
12363: LIST
12364: PUSH
12365: LD_INT 25
12367: PUSH
12368: LD_INT 2
12370: PUSH
12371: EMPTY
12372: LIST
12373: LIST
12374: PUSH
12375: EMPTY
12376: LIST
12377: LIST
12378: PPUSH
12379: CALL_OW 69
12383: ST_TO_ADDR
// DialogueOn ;
12384: CALL_OW 6
// if speaker then
12388: LD_VAR 0 1
12392: IFFALSE 12447
// if GetSex ( speaker [ 1 ] ) = sex_male then
12394: LD_VAR 0 1
12398: PUSH
12399: LD_INT 1
12401: ARRAY
12402: PPUSH
12403: CALL_OW 258
12407: PUSH
12408: LD_INT 1
12410: EQUAL
12411: IFFALSE 12431
// Say ( speaker [ 1 ] , VDe-1 ) else
12413: LD_VAR 0 1
12417: PUSH
12418: LD_INT 1
12420: ARRAY
12421: PPUSH
12422: LD_STRING VDe-1
12424: PPUSH
12425: CALL_OW 88
12429: GO 12447
// Say ( speaker [ 1 ] , VDef-1 ) ;
12431: LD_VAR 0 1
12435: PUSH
12436: LD_INT 1
12438: ARRAY
12439: PPUSH
12440: LD_STRING VDef-1
12442: PPUSH
12443: CALL_OW 88
// case Query ( SibNote ) of 1 :
12447: LD_STRING SibNote
12449: PPUSH
12450: CALL_OW 97
12454: PUSH
12455: LD_INT 1
12457: DOUBLE
12458: EQUAL
12459: IFTRUE 12463
12461: GO 12466
12463: POP
// ; end ;
12464: GO 12467
12466: POP
// if speaker then
12467: LD_VAR 0 1
12471: IFFALSE 12526
// if GetSex ( speaker [ 1 ] ) = sex_male then
12473: LD_VAR 0 1
12477: PUSH
12478: LD_INT 1
12480: ARRAY
12481: PPUSH
12482: CALL_OW 258
12486: PUSH
12487: LD_INT 1
12489: EQUAL
12490: IFFALSE 12510
// Say ( speaker [ 1 ] , VDe-2 ) else
12492: LD_VAR 0 1
12496: PUSH
12497: LD_INT 1
12499: ARRAY
12500: PPUSH
12501: LD_STRING VDe-2
12503: PPUSH
12504: CALL_OW 88
12508: GO 12526
// Say ( speaker [ 1 ] , VDef-2 ) ;
12510: LD_VAR 0 1
12514: PUSH
12515: LD_INT 1
12517: ARRAY
12518: PPUSH
12519: LD_STRING VDef-2
12521: PPUSH
12522: CALL_OW 88
// Say ( us_commander , VDc-4 ) ;
12526: LD_EXP 23
12530: PPUSH
12531: LD_STRING VDc-4
12533: PPUSH
12534: CALL_OW 88
// DialogueOff ;
12538: CALL_OW 7
// ChangeMissionObjectives ( CVulc3 ) ;
12542: LD_STRING CVulc3
12544: PPUSH
12545: CALL_OW 337
// end ;
12549: PPOPN 1
12551: END
// every 0 0$01 trigger your_side = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) > 0 do var i , un , veh ;
12552: LD_OWVAR 2
12556: PUSH
12557: LD_INT 1
12559: EQUAL
12560: PUSH
12561: LD_INT 22
12563: PUSH
12564: LD_INT 1
12566: PUSH
12567: EMPTY
12568: LIST
12569: LIST
12570: PUSH
12571: LD_INT 30
12573: PUSH
12574: LD_INT 3
12576: PUSH
12577: EMPTY
12578: LIST
12579: LIST
12580: PUSH
12581: EMPTY
12582: LIST
12583: LIST
12584: PPUSH
12585: CALL_OW 69
12589: PUSH
12590: LD_INT 0
12592: GREATER
12593: AND
12594: IFFALSE 13028
12596: GO 12598
12598: DISABLE
12599: LD_INT 0
12601: PPUSH
12602: PPUSH
12603: PPUSH
// begin Wait ( Rand ( 0 0$07 , 0 0$37 ) ) ;
12604: LD_INT 245
12606: PPUSH
12607: LD_INT 1295
12609: PPUSH
12610: CALL_OW 12
12614: PPUSH
12615: CALL_OW 67
// DialogueOn ;
12619: CALL_OW 6
// SayRadio ( us_guy , VDG-1 ) ;
12623: LD_EXP 26
12627: PPUSH
12628: LD_STRING VDG-1
12630: PPUSH
12631: CALL_OW 94
// Say ( us_commander , VDc-5 ) ;
12635: LD_EXP 23
12639: PPUSH
12640: LD_STRING VDc-5
12642: PPUSH
12643: CALL_OW 88
// SayRadio ( us_guy , VDG-2 ) ;
12647: LD_EXP 26
12651: PPUSH
12652: LD_STRING VDG-2
12654: PPUSH
12655: CALL_OW 94
// Say ( us_commander , VDc-6 ) ;
12659: LD_EXP 23
12663: PPUSH
12664: LD_STRING VDc-6
12666: PPUSH
12667: CALL_OW 88
// SayRadio ( us_guy , VDG-3 ) ;
12671: LD_EXP 26
12675: PPUSH
12676: LD_STRING VDG-3
12678: PPUSH
12679: CALL_OW 94
// Say ( us_commander , VDc-7 ) ;
12683: LD_EXP 23
12687: PPUSH
12688: LD_STRING VDc-7
12690: PPUSH
12691: CALL_OW 88
// SayRadio ( us_guy , VDG-4 ) ;
12695: LD_EXP 26
12699: PPUSH
12700: LD_STRING VDG-4
12702: PPUSH
12703: CALL_OW 94
// DialogueOff ;
12707: CALL_OW 7
// ChangeMissionObjectives ( CVulc4 ) ;
12711: LD_STRING CVulc4
12713: PPUSH
12714: CALL_OW 337
// Wait ( [ 9 9$00 , 10 10$00 , 11 11$00 ] [ Difficulty ] ) ;
12718: LD_INT 18900
12720: PUSH
12721: LD_INT 21000
12723: PUSH
12724: LD_INT 23100
12726: PUSH
12727: EMPTY
12728: LIST
12729: LIST
12730: LIST
12731: PUSH
12732: LD_OWVAR 67
12736: ARRAY
12737: PPUSH
12738: CALL_OW 67
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
12742: LD_ADDR_VAR 0 1
12746: PUSH
12747: DOUBLE
12748: LD_INT 1
12750: DEC
12751: ST_TO_ADDR
12752: LD_INT 4
12754: PUSH
12755: LD_INT 5
12757: PUSH
12758: LD_INT 6
12760: PUSH
12761: EMPTY
12762: LIST
12763: LIST
12764: LIST
12765: PUSH
12766: LD_OWVAR 67
12770: ARRAY
12771: PUSH
12772: FOR_TO
12773: IFFALSE 13017
// begin uc_side := 1 ;
12775: LD_ADDR_OWVAR 20
12779: PUSH
12780: LD_INT 1
12782: ST_TO_ADDR
// uc_nation := 1 ;
12783: LD_ADDR_OWVAR 21
12787: PUSH
12788: LD_INT 1
12790: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , us_skill ) ;
12791: LD_INT 0
12793: PPUSH
12794: LD_INT 1
12796: PPUSH
12797: LD_INT 4
12799: PPUSH
12800: CALL_OW 12
12804: PPUSH
12805: LD_EXP 25
12809: PPUSH
12810: CALL_OW 380
// un := CreateHuman ;
12814: LD_ADDR_VAR 0 2
12818: PUSH
12819: CALL_OW 44
12823: ST_TO_ADDR
// SetDir ( un , 2 ) ;
12824: LD_VAR 0 2
12828: PPUSH
12829: LD_INT 2
12831: PPUSH
12832: CALL_OW 233
// if GetClass ( un ) = 3 then
12836: LD_VAR 0 2
12840: PPUSH
12841: CALL_OW 257
12845: PUSH
12846: LD_INT 3
12848: EQUAL
12849: IFFALSE 13000
// begin vc_chassis := [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 ] ;
12851: LD_ADDR_OWVAR 37
12855: PUSH
12856: LD_INT 2
12858: PUSH
12859: LD_INT 3
12861: PUSH
12862: EMPTY
12863: LIST
12864: LIST
12865: PUSH
12866: LD_VAR 0 1
12870: PUSH
12871: LD_INT 2
12873: MOD
12874: ARRAY
12875: ST_TO_ADDR
// vc_engine := engine_combustion ;
12876: LD_ADDR_OWVAR 39
12880: PUSH
12881: LD_INT 1
12883: ST_TO_ADDR
// vc_control := control_manual ;
12884: LD_ADDR_OWVAR 38
12888: PUSH
12889: LD_INT 1
12891: ST_TO_ADDR
// vc_weapon := [ us_laser , us_laser , us_double_gun , us_radar ] [ rand ( 1 , 4 ) ] ;
12892: LD_ADDR_OWVAR 40
12896: PUSH
12897: LD_INT 9
12899: PUSH
12900: LD_INT 9
12902: PUSH
12903: LD_INT 5
12905: PUSH
12906: LD_INT 11
12908: PUSH
12909: EMPTY
12910: LIST
12911: LIST
12912: LIST
12913: LIST
12914: PUSH
12915: LD_INT 1
12917: PPUSH
12918: LD_INT 4
12920: PPUSH
12921: CALL_OW 12
12925: ARRAY
12926: ST_TO_ADDR
// veh := CreateVehicle ;
12927: LD_ADDR_VAR 0 3
12931: PUSH
12932: CALL_OW 45
12936: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
12937: LD_VAR 0 3
12941: PPUSH
12942: LD_INT 2
12944: PPUSH
12945: CALL_OW 233
// SetFuel ( veh , Rand ( 77 , 88 ) ) ;
12949: LD_VAR 0 3
12953: PPUSH
12954: LD_INT 77
12956: PPUSH
12957: LD_INT 88
12959: PPUSH
12960: CALL_OW 12
12964: PPUSH
12965: CALL_OW 240
// PlaceUnitArea ( veh , start_north , false ) ;
12969: LD_VAR 0 3
12973: PPUSH
12974: LD_INT 1
12976: PPUSH
12977: LD_INT 0
12979: PPUSH
12980: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
12984: LD_VAR 0 2
12988: PPUSH
12989: LD_VAR 0 3
12993: PPUSH
12994: CALL_OW 52
// end else
12998: GO 13015
// PlaceUnitArea ( un , start_north , false ) ;
13000: LD_VAR 0 2
13004: PPUSH
13005: LD_INT 1
13007: PPUSH
13008: LD_INT 0
13010: PPUSH
13011: CALL_OW 49
// end ;
13015: GO 12772
13017: POP
13018: POP
// CenterNowOnUnits ( un ) ;
13019: LD_VAR 0 2
13023: PPUSH
13024: CALL_OW 87
// end ;
13028: PPOPN 3
13030: END
// every 0 0$01 trigger FilterUnitsInArea ( vulc_artifact , [ f_side , your_side ] ) do var un , filter ;
13031: LD_INT 21
13033: PPUSH
13034: LD_INT 22
13036: PUSH
13037: LD_OWVAR 2
13041: PUSH
13042: EMPTY
13043: LIST
13044: LIST
13045: PPUSH
13046: CALL_OW 70
13050: IFFALSE 13371
13052: GO 13054
13054: DISABLE
13055: LD_INT 0
13057: PPUSH
13058: PPUSH
// begin filter := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff player_commander ;
13059: LD_ADDR_VAR 0 2
13063: PUSH
13064: LD_INT 22
13066: PUSH
13067: LD_OWVAR 2
13071: PUSH
13072: EMPTY
13073: LIST
13074: LIST
13075: PUSH
13076: LD_INT 2
13078: PUSH
13079: LD_INT 25
13081: PUSH
13082: LD_INT 1
13084: PUSH
13085: EMPTY
13086: LIST
13087: LIST
13088: PUSH
13089: LD_INT 25
13091: PUSH
13092: LD_INT 2
13094: PUSH
13095: EMPTY
13096: LIST
13097: LIST
13098: PUSH
13099: LD_INT 25
13101: PUSH
13102: LD_INT 3
13104: PUSH
13105: EMPTY
13106: LIST
13107: LIST
13108: PUSH
13109: LD_INT 25
13111: PUSH
13112: LD_INT 4
13114: PUSH
13115: EMPTY
13116: LIST
13117: LIST
13118: PUSH
13119: EMPTY
13120: LIST
13121: LIST
13122: LIST
13123: LIST
13124: LIST
13125: PUSH
13126: EMPTY
13127: LIST
13128: LIST
13129: PPUSH
13130: CALL_OW 69
13134: PUSH
13135: LD_EXP 11
13139: DIFF
13140: ST_TO_ADDR
// un := NearestUnitToXY ( filter , 112 , 67 ) ;
13141: LD_ADDR_VAR 0 1
13145: PUSH
13146: LD_VAR 0 2
13150: PPUSH
13151: LD_INT 112
13153: PPUSH
13154: LD_INT 67
13156: PPUSH
13157: CALL_OW 73
13161: ST_TO_ADDR
// if GetSide ( un ) = 7 then
13162: LD_VAR 0 1
13166: PPUSH
13167: CALL_OW 255
13171: PUSH
13172: LD_INT 7
13174: EQUAL
13175: IFFALSE 13218
// if GetSex ( un ) = sex_male then
13177: LD_VAR 0 1
13181: PPUSH
13182: CALL_OW 258
13186: PUSH
13187: LD_INT 1
13189: EQUAL
13190: IFFALSE 13206
// Say ( un , VD-find-al ) else
13192: LD_VAR 0 1
13196: PPUSH
13197: LD_STRING VD-find-al
13199: PPUSH
13200: CALL_OW 88
13204: GO 13218
// Say ( un , VD-find-al-f ) ;
13206: LD_VAR 0 1
13210: PPUSH
13211: LD_STRING VD-find-al-f
13213: PPUSH
13214: CALL_OW 88
// if GetSide ( un ) = 2 then
13218: LD_VAR 0 1
13222: PPUSH
13223: CALL_OW 255
13227: PUSH
13228: LD_INT 2
13230: EQUAL
13231: IFFALSE 13274
// if GetSex ( un ) = sex_male then
13233: LD_VAR 0 1
13237: PPUSH
13238: CALL_OW 258
13242: PUSH
13243: LD_INT 1
13245: EQUAL
13246: IFFALSE 13262
// Say ( un , VD-find-ar ) else
13248: LD_VAR 0 1
13252: PPUSH
13253: LD_STRING VD-find-ar
13255: PPUSH
13256: CALL_OW 88
13260: GO 13274
// Say ( un , VD-find-ar-f ) ;
13262: LD_VAR 0 1
13266: PPUSH
13267: LD_STRING VD-find-ar-f
13269: PPUSH
13270: CALL_OW 88
// if GetSide ( un ) = 1 then
13274: LD_VAR 0 1
13278: PPUSH
13279: CALL_OW 255
13283: PUSH
13284: LD_INT 1
13286: EQUAL
13287: IFFALSE 13354
// begin if GetSex ( un ) = sex_male then
13289: LD_VAR 0 1
13293: PPUSH
13294: CALL_OW 258
13298: PUSH
13299: LD_INT 1
13301: EQUAL
13302: IFFALSE 13330
// begin Say ( un , VD-find-us ) ;
13304: LD_VAR 0 1
13308: PPUSH
13309: LD_STRING VD-find-us
13311: PPUSH
13312: CALL_OW 88
// Say ( un , VD-find-us2 ) ;
13316: LD_VAR 0 1
13320: PPUSH
13321: LD_STRING VD-find-us2
13323: PPUSH
13324: CALL_OW 88
// end else
13328: GO 13354
// begin Say ( un , VD-find-us-f ) ;
13330: LD_VAR 0 1
13334: PPUSH
13335: LD_STRING VD-find-us-f
13337: PPUSH
13338: CALL_OW 88
// Say ( un , VD-find-us2-f ) ;
13342: LD_VAR 0 1
13346: PPUSH
13347: LD_STRING VD-find-us2-f
13349: PPUSH
13350: CALL_OW 88
// end ; end ; Wait ( 0 0$0.3 ) ;
13354: LD_INT 10
13356: PPUSH
13357: CALL_OW 67
// CenterNowOnXY ( 112 , 67 ) ;
13361: LD_INT 112
13363: PPUSH
13364: LD_INT 67
13366: PPUSH
13367: CALL_OW 86
// end ;
13371: PPOPN 2
13373: END
// every 0 0$01 trigger player_artifact_ready do var speaker ;
13374: LD_EXP 8
13378: IFFALSE 13880
13380: GO 13382
13382: DISABLE
13383: LD_INT 0
13385: PPUSH
// begin if your_side = 1 then
13386: LD_OWVAR 2
13390: PUSH
13391: LD_INT 1
13393: EQUAL
13394: IFFALSE 13575
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) diff us_commander ;
13396: LD_ADDR_VAR 0 1
13400: PUSH
13401: LD_INT 22
13403: PUSH
13404: LD_INT 1
13406: PUSH
13407: EMPTY
13408: LIST
13409: LIST
13410: PUSH
13411: LD_INT 25
13413: PUSH
13414: LD_INT 4
13416: PUSH
13417: EMPTY
13418: LIST
13419: LIST
13420: PUSH
13421: EMPTY
13422: LIST
13423: LIST
13424: PPUSH
13425: CALL_OW 69
13429: PUSH
13430: LD_EXP 23
13434: DIFF
13435: ST_TO_ADDR
// if not speaker then
13436: LD_VAR 0 1
13440: NOT
13441: IFFALSE 13445
// exit ;
13443: GO 13880
// if GetSex ( speaker [ 1 ] ) = sex_male then
13445: LD_VAR 0 1
13449: PUSH
13450: LD_INT 1
13452: ARRAY
13453: PPUSH
13454: CALL_OW 258
13458: PUSH
13459: LD_INT 1
13461: EQUAL
13462: IFFALSE 13482
// Say ( speaker [ 1 ] , VD-us-sci-art-1 ) else
13464: LD_VAR 0 1
13468: PUSH
13469: LD_INT 1
13471: ARRAY
13472: PPUSH
13473: LD_STRING VD-us-sci-art-1
13475: PPUSH
13476: CALL_OW 88
13480: GO 13498
// Say ( speaker [ 1 ] , VD-us-fsci-art-1 ) ;
13482: LD_VAR 0 1
13486: PUSH
13487: LD_INT 1
13489: ARRAY
13490: PPUSH
13491: LD_STRING VD-us-fsci-art-1
13493: PPUSH
13494: CALL_OW 88
// Say ( us_commander , VDc-art1 ) ;
13498: LD_EXP 23
13502: PPUSH
13503: LD_STRING VDc-art1
13505: PPUSH
13506: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
13510: LD_VAR 0 1
13514: PUSH
13515: LD_INT 1
13517: ARRAY
13518: PPUSH
13519: CALL_OW 258
13523: PUSH
13524: LD_INT 1
13526: EQUAL
13527: IFFALSE 13547
// Say ( speaker [ 1 ] , VD-us-sci-art-2 ) else
13529: LD_VAR 0 1
13533: PUSH
13534: LD_INT 1
13536: ARRAY
13537: PPUSH
13538: LD_STRING VD-us-sci-art-2
13540: PPUSH
13541: CALL_OW 88
13545: GO 13563
// Say ( speaker [ 1 ] , VD-us-fsci-art-2 ) ;
13547: LD_VAR 0 1
13551: PUSH
13552: LD_INT 1
13554: ARRAY
13555: PPUSH
13556: LD_STRING VD-us-fsci-art-2
13558: PPUSH
13559: CALL_OW 88
// Say ( us_commander , VDc-art2 ) ;
13563: LD_EXP 23
13567: PPUSH
13568: LD_STRING VDc-art2
13570: PPUSH
13571: CALL_OW 88
// end ; if your_side = 2 then
13575: LD_OWVAR 2
13579: PUSH
13580: LD_INT 2
13582: EQUAL
13583: IFFALSE 13687
// begin speaker := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) diff ar_commander ;
13585: LD_ADDR_VAR 0 1
13589: PUSH
13590: LD_INT 22
13592: PUSH
13593: LD_INT 2
13595: PUSH
13596: EMPTY
13597: LIST
13598: LIST
13599: PUSH
13600: LD_INT 25
13602: PUSH
13603: LD_INT 4
13605: PUSH
13606: EMPTY
13607: LIST
13608: LIST
13609: PUSH
13610: EMPTY
13611: LIST
13612: LIST
13613: PPUSH
13614: CALL_OW 69
13618: PUSH
13619: LD_EXP 55
13623: DIFF
13624: ST_TO_ADDR
// if not speaker then
13625: LD_VAR 0 1
13629: NOT
13630: IFFALSE 13634
// exit ;
13632: GO 13880
// if GetSex ( speaker [ 1 ] ) = sex_male then
13634: LD_VAR 0 1
13638: PUSH
13639: LD_INT 1
13641: ARRAY
13642: PPUSH
13643: CALL_OW 258
13647: PUSH
13648: LD_INT 1
13650: EQUAL
13651: IFFALSE 13671
// Say ( speaker [ 1 ] , VD-ar-sci-art-1 ) else
13653: LD_VAR 0 1
13657: PUSH
13658: LD_INT 1
13660: ARRAY
13661: PPUSH
13662: LD_STRING VD-ar-sci-art-1
13664: PPUSH
13665: CALL_OW 88
13669: GO 13687
// Say ( speaker [ 1 ] , VD-ar-fsci-art-1 ) ;
13671: LD_VAR 0 1
13675: PUSH
13676: LD_INT 1
13678: ARRAY
13679: PPUSH
13680: LD_STRING VD-ar-fsci-art-1
13682: PPUSH
13683: CALL_OW 88
// end ; if your_side = 7 then
13687: LD_OWVAR 2
13691: PUSH
13692: LD_INT 7
13694: EQUAL
13695: IFFALSE 13880
// begin speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 4 ] ] ) diff al_commander ;
13697: LD_ADDR_VAR 0 1
13701: PUSH
13702: LD_INT 22
13704: PUSH
13705: LD_INT 7
13707: PUSH
13708: EMPTY
13709: LIST
13710: LIST
13711: PUSH
13712: LD_INT 25
13714: PUSH
13715: LD_INT 4
13717: PUSH
13718: EMPTY
13719: LIST
13720: LIST
13721: PUSH
13722: EMPTY
13723: LIST
13724: LIST
13725: PPUSH
13726: CALL_OW 69
13730: PUSH
13731: LD_EXP 41
13735: DIFF
13736: ST_TO_ADDR
// if speaker then
13737: LD_VAR 0 1
13741: IFFALSE 13873
// begin if GetSex ( speaker [ 1 ] ) = sex_male then
13743: LD_VAR 0 1
13747: PUSH
13748: LD_INT 1
13750: ARRAY
13751: PPUSH
13752: CALL_OW 258
13756: PUSH
13757: LD_INT 1
13759: EQUAL
13760: IFFALSE 13780
// Say ( speaker [ 1 ] , VD-al-sci-art-1 ) else
13762: LD_VAR 0 1
13766: PUSH
13767: LD_INT 1
13769: ARRAY
13770: PPUSH
13771: LD_STRING VD-al-sci-art-1
13773: PPUSH
13774: CALL_OW 88
13778: GO 13796
// Say ( speaker [ 1 ] , VD-al-fsci-art-1 ) ;
13780: LD_VAR 0 1
13784: PUSH
13785: LD_INT 1
13787: ARRAY
13788: PPUSH
13789: LD_STRING VD-al-fsci-art-1
13791: PPUSH
13792: CALL_OW 88
// Say ( al_commander , VPd-art-1 ) ;
13796: LD_EXP 41
13800: PPUSH
13801: LD_STRING VPd-art-1
13803: PPUSH
13804: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
13808: LD_VAR 0 1
13812: PUSH
13813: LD_INT 1
13815: ARRAY
13816: PPUSH
13817: CALL_OW 258
13821: PUSH
13822: LD_INT 1
13824: EQUAL
13825: IFFALSE 13845
// Say ( speaker [ 1 ] , VD-al-sci-art-2 ) else
13827: LD_VAR 0 1
13831: PUSH
13832: LD_INT 1
13834: ARRAY
13835: PPUSH
13836: LD_STRING VD-al-sci-art-2
13838: PPUSH
13839: CALL_OW 88
13843: GO 13861
// Say ( speaker [ 1 ] , VD-al-fsci-art-2 ) ;
13845: LD_VAR 0 1
13849: PUSH
13850: LD_INT 1
13852: ARRAY
13853: PPUSH
13854: LD_STRING VD-al-fsci-art-2
13856: PPUSH
13857: CALL_OW 88
// Say ( al_commander , VPd-art-2 ) ;
13861: LD_EXP 41
13865: PPUSH
13866: LD_STRING VPd-art-2
13868: PPUSH
13869: CALL_OW 88
// end ; ChangeMissionObjectives ( CVulc7out ) ;
13873: LD_STRING CVulc7out
13875: PPUSH
13876: CALL_OW 337
// end ; end ;
13880: PPOPN 1
13882: END
// every 0 0$01 trigger See ( 8 , NearestUnitToSide ( FilterAllUnits ( [ f_side , your_side ] ) , 8 ) ) do var speaker ;
13883: LD_INT 8
13885: PPUSH
13886: LD_INT 22
13888: PUSH
13889: LD_OWVAR 2
13893: PUSH
13894: EMPTY
13895: LIST
13896: LIST
13897: PPUSH
13898: CALL_OW 69
13902: PPUSH
13903: LD_INT 8
13905: PPUSH
13906: CALL 2015 0 2
13910: PPUSH
13911: CALL_OW 292
13915: IFFALSE 14058
13917: GO 13919
13919: DISABLE
13920: LD_INT 0
13922: PPUSH
// begin if your_side = 1 then
13923: LD_OWVAR 2
13927: PUSH
13928: LD_INT 1
13930: EQUAL
13931: IFFALSE 14014
// begin speaker := FilterAllUnits ( [ f_side , 1 ] ) diff us_commander ;
13933: LD_ADDR_VAR 0 1
13937: PUSH
13938: LD_INT 22
13940: PUSH
13941: LD_INT 1
13943: PUSH
13944: EMPTY
13945: LIST
13946: LIST
13947: PPUSH
13948: CALL_OW 69
13952: PUSH
13953: LD_EXP 23
13957: DIFF
13958: ST_TO_ADDR
// if speaker then
13959: LD_VAR 0 1
13963: IFFALSE 14014
// if GetSex ( speaker [ 1 ] ) then
13965: LD_VAR 0 1
13969: PUSH
13970: LD_INT 1
13972: ARRAY
13973: PPUSH
13974: CALL_OW 258
13978: IFFALSE 13998
// Say ( speaker [ 1 ] , VD-legion-us ) else
13980: LD_VAR 0 1
13984: PUSH
13985: LD_INT 1
13987: ARRAY
13988: PPUSH
13989: LD_STRING VD-legion-us
13991: PPUSH
13992: CALL_OW 88
13996: GO 14014
// Say ( speaker [ 1 ] , VD-legion-us-f ) ;
13998: LD_VAR 0 1
14002: PUSH
14003: LD_INT 1
14005: ARRAY
14006: PPUSH
14007: LD_STRING VD-legion-us-f
14009: PPUSH
14010: CALL_OW 88
// end ; if your_side = 2 then
14014: LD_OWVAR 2
14018: PUSH
14019: LD_INT 2
14021: EQUAL
14022: IFFALSE 14036
// Say ( ar_commander , VD-legion-ar ) ;
14024: LD_EXP 55
14028: PPUSH
14029: LD_STRING VD-legion-ar
14031: PPUSH
14032: CALL_OW 88
// if your_side = 7 then
14036: LD_OWVAR 2
14040: PUSH
14041: LD_INT 7
14043: EQUAL
14044: IFFALSE 14058
// Say ( al_commander , VD-legion-al ) ;
14046: LD_EXP 41
14050: PPUSH
14051: LD_STRING VD-legion-al
14053: PPUSH
14054: CALL_OW 88
// end ;
14058: PPOPN 1
14060: END
// every 0 0$01 trigger mine_vulc do
14061: LD_EXP 13
14065: IFFALSE 14082
14067: GO 14069
14069: DISABLE
// begin Say ( player_commander , VD-vulc-mines ) ;
14070: LD_EXP 11
14074: PPUSH
14075: LD_STRING VD-vulc-mines
14077: PPUSH
14078: CALL_OW 88
// end ;
14082: END
// every 0 0$03 trigger difficulty > 1 do var mines , p , i ;
14083: LD_OWVAR 67
14087: PUSH
14088: LD_INT 1
14090: GREATER
14091: IFFALSE 14210
14093: GO 14095
14095: DISABLE
14096: LD_INT 0
14098: PPUSH
14099: PPUSH
14100: PPUSH
// begin mines := [ 123 , 95 , 119 , 89 , 115 , 81 ] ;
14101: LD_ADDR_VAR 0 1
14105: PUSH
14106: LD_INT 123
14108: PUSH
14109: LD_INT 95
14111: PUSH
14112: LD_INT 119
14114: PUSH
14115: LD_INT 89
14117: PUSH
14118: LD_INT 115
14120: PUSH
14121: LD_INT 81
14123: PUSH
14124: EMPTY
14125: LIST
14126: LIST
14127: LIST
14128: LIST
14129: LIST
14130: LIST
14131: ST_TO_ADDR
// p := 1 ;
14132: LD_ADDR_VAR 0 2
14136: PUSH
14137: LD_INT 1
14139: ST_TO_ADDR
// for i = 1 to 3 do
14140: LD_ADDR_VAR 0 3
14144: PUSH
14145: DOUBLE
14146: LD_INT 1
14148: DEC
14149: ST_TO_ADDR
14150: LD_INT 3
14152: PUSH
14153: FOR_TO
14154: IFFALSE 14208
// begin PlaceMine ( mines [ p ] , mines [ p + 1 ] , 8 , 0 ) ;
14156: LD_VAR 0 1
14160: PUSH
14161: LD_VAR 0 2
14165: ARRAY
14166: PPUSH
14167: LD_VAR 0 1
14171: PUSH
14172: LD_VAR 0 2
14176: PUSH
14177: LD_INT 1
14179: PLUS
14180: ARRAY
14181: PPUSH
14182: LD_INT 8
14184: PPUSH
14185: LD_INT 0
14187: PPUSH
14188: CALL_OW 454
// p := p + 2 ;
14192: LD_ADDR_VAR 0 2
14196: PUSH
14197: LD_VAR 0 2
14201: PUSH
14202: LD_INT 2
14204: PLUS
14205: ST_TO_ADDR
// end ;
14206: GO 14153
14208: POP
14209: POP
// end ;
14210: PPOPN 3
14212: END
// every 0 0$01 trigger difficulty > 1 and FilterUnitsInArea ( vulc_mines , [ f_side , your_side ] ) do var p , i , mines ;
14213: LD_OWVAR 67
14217: PUSH
14218: LD_INT 1
14220: GREATER
14221: PUSH
14222: LD_INT 22
14224: PPUSH
14225: LD_INT 22
14227: PUSH
14228: LD_OWVAR 2
14232: PUSH
14233: EMPTY
14234: LIST
14235: LIST
14236: PPUSH
14237: CALL_OW 70
14241: AND
14242: IFFALSE 14446
14244: GO 14246
14246: DISABLE
14247: LD_INT 0
14249: PPUSH
14250: PPUSH
14251: PPUSH
// begin enable ;
14252: ENABLE
// p := 1 ;
14253: LD_ADDR_VAR 0 1
14257: PUSH
14258: LD_INT 1
14260: ST_TO_ADDR
// mines := [ 123 , 95 , 119 , 89 , 115 , 81 ] ;
14261: LD_ADDR_VAR 0 3
14265: PUSH
14266: LD_INT 123
14268: PUSH
14269: LD_INT 95
14271: PUSH
14272: LD_INT 119
14274: PUSH
14275: LD_INT 89
14277: PUSH
14278: LD_INT 115
14280: PUSH
14281: LD_INT 81
14283: PUSH
14284: EMPTY
14285: LIST
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: LIST
14291: ST_TO_ADDR
// for i = 1 to 3 do
14292: LD_ADDR_VAR 0 2
14296: PUSH
14297: DOUBLE
14298: LD_INT 1
14300: DEC
14301: ST_TO_ADDR
14302: LD_INT 3
14304: PUSH
14305: FOR_TO
14306: IFFALSE 14444
// begin if HexInfo ( mines [ p ] , mines [ p + 1 ] ) > 0 then
14308: LD_VAR 0 3
14312: PUSH
14313: LD_VAR 0 1
14317: ARRAY
14318: PPUSH
14319: LD_VAR 0 3
14323: PUSH
14324: LD_VAR 0 1
14328: PUSH
14329: LD_INT 1
14331: PLUS
14332: ARRAY
14333: PPUSH
14334: CALL_OW 428
14338: PUSH
14339: LD_INT 0
14341: GREATER
14342: IFFALSE 14428
// if GetSide ( HexInfo ( mines [ p ] , mines [ p + 1 ] ) ) = your_side then
14344: LD_VAR 0 3
14348: PUSH
14349: LD_VAR 0 1
14353: ARRAY
14354: PPUSH
14355: LD_VAR 0 3
14359: PUSH
14360: LD_VAR 0 1
14364: PUSH
14365: LD_INT 1
14367: PLUS
14368: ARRAY
14369: PPUSH
14370: CALL_OW 428
14374: PPUSH
14375: CALL_OW 255
14379: PUSH
14380: LD_OWVAR 2
14384: EQUAL
14385: IFFALSE 14428
// begin LaunchMineAtPos ( mines [ p ] , mines [ p + 1 ] , 8 ) ;
14387: LD_VAR 0 3
14391: PUSH
14392: LD_VAR 0 1
14396: ARRAY
14397: PPUSH
14398: LD_VAR 0 3
14402: PUSH
14403: LD_VAR 0 1
14407: PUSH
14408: LD_INT 1
14410: PLUS
14411: ARRAY
14412: PPUSH
14413: LD_INT 8
14415: PPUSH
14416: CALL_OW 456
// mine_vulc := true ;
14420: LD_ADDR_EXP 13
14424: PUSH
14425: LD_INT 1
14427: ST_TO_ADDR
// end ; p := p + 2 ;
14428: LD_ADDR_VAR 0 1
14432: PUSH
14433: LD_VAR 0 1
14437: PUSH
14438: LD_INT 2
14440: PLUS
14441: ST_TO_ADDR
// end ;
14442: GO 14305
14444: POP
14445: POP
// end ;
14446: PPOPN 3
14448: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 3 ] ) = 0 and your_side <> 2 do
14449: LD_INT 22
14451: PUSH
14452: LD_INT 3
14454: PUSH
14455: EMPTY
14456: LIST
14457: LIST
14458: PPUSH
14459: CALL_OW 69
14463: PUSH
14464: LD_INT 0
14466: EQUAL
14467: PUSH
14468: LD_OWVAR 2
14472: PUSH
14473: LD_INT 2
14475: NONEQUAL
14476: AND
14477: IFFALSE 14486
14479: GO 14481
14481: DISABLE
// Win ;
14482: CALL 14543 0 0
14486: END
// every 0 0$01 trigger FilterAllUnits ( [ f_or , [ f_side , 8 ] , [ f_side , 3 ] ] ) = 0 and your_side = 2 do
14487: LD_INT 2
14489: PUSH
14490: LD_INT 22
14492: PUSH
14493: LD_INT 8
14495: PUSH
14496: EMPTY
14497: LIST
14498: LIST
14499: PUSH
14500: LD_INT 22
14502: PUSH
14503: LD_INT 3
14505: PUSH
14506: EMPTY
14507: LIST
14508: LIST
14509: PUSH
14510: EMPTY
14511: LIST
14512: LIST
14513: LIST
14514: PPUSH
14515: CALL_OW 69
14519: PUSH
14520: LD_INT 0
14522: EQUAL
14523: PUSH
14524: LD_OWVAR 2
14528: PUSH
14529: LD_INT 2
14531: EQUAL
14532: AND
14533: IFFALSE 14542
14535: GO 14537
14537: DISABLE
// Win ;
14538: CALL 14543 0 0
14542: END
// function Win ; var points ; begin
14543: LD_INT 0
14545: PPUSH
14546: PPUSH
// case Query ( VulcWin ) of 1 :
14547: LD_STRING VulcWin
14549: PPUSH
14550: CALL_OW 97
14554: PUSH
14555: LD_INT 1
14557: DOUBLE
14558: EQUAL
14559: IFTRUE 14563
14561: GO 14566
14563: POP
// ; end ;
14564: GO 14567
14566: POP
// if medal_enabled then
14567: LD_EXP 14
14571: IFFALSE 14585
// AddMedal ( vulc_1 , 1 ) else
14573: LD_STRING vulc_1
14575: PPUSH
14576: LD_INT 1
14578: PPUSH
14579: CALL_OW 101
14583: GO 14596
// AddMedal ( vulc_1 , - 1 ) ;
14585: LD_STRING vulc_1
14587: PPUSH
14588: LD_INT 1
14590: NEG
14591: PPUSH
14592: CALL_OW 101
// if FilterAllUnits ( [ f_side , 8 ] ) = 0 then
14596: LD_INT 22
14598: PUSH
14599: LD_INT 8
14601: PUSH
14602: EMPTY
14603: LIST
14604: LIST
14605: PPUSH
14606: CALL_OW 69
14610: PUSH
14611: LD_INT 0
14613: EQUAL
14614: IFFALSE 14628
// AddMedal ( vulc_2 , 1 ) else
14616: LD_STRING vulc_2
14618: PPUSH
14619: LD_INT 1
14621: PPUSH
14622: CALL_OW 101
14626: GO 14639
// AddMedal ( vulc_2 , - 1 ) ;
14628: LD_STRING vulc_2
14630: PPUSH
14631: LD_INT 1
14633: NEG
14634: PPUSH
14635: CALL_OW 101
// points := CalculateCommanderPoints ;
14639: LD_ADDR_VAR 0 2
14643: PUSH
14644: CALL 2136 0 0
14648: ST_TO_ADDR
// if points >= 2000 then
14649: LD_VAR 0 2
14653: PUSH
14654: LD_INT 2000
14656: GREATEREQUAL
14657: IFFALSE 14671
// AddMedal ( vulc_3 , 2 ) else
14659: LD_STRING vulc_3
14661: PPUSH
14662: LD_INT 2
14664: PPUSH
14665: CALL_OW 101
14669: GO 14704
// if points >= 0 then
14671: LD_VAR 0 2
14675: PUSH
14676: LD_INT 0
14678: GREATEREQUAL
14679: IFFALSE 14693
// AddMedal ( vulc_3 , 1 ) else
14681: LD_STRING vulc_3
14683: PPUSH
14684: LD_INT 1
14686: PPUSH
14687: CALL_OW 101
14691: GO 14704
// AddMedal ( vulc_3 , - 1 ) ;
14693: LD_STRING vulc_3
14695: PPUSH
14696: LD_INT 1
14698: NEG
14699: PPUSH
14700: CALL_OW 101
// GiveMedals ( MAIN ) ;
14704: LD_STRING MAIN
14706: PPUSH
14707: CALL_OW 102
// YouWin ;
14711: CALL_OW 103
// end ; end_of_file
14715: LD_VAR 0 1
14719: RET
// every 0 0$01 trigger FilterUnitsInArea ( vulcano_area , [ f_type , unit_human ] ) > 0 do var i , un ;
14720: LD_INT 13
14722: PPUSH
14723: LD_INT 21
14725: PUSH
14726: LD_INT 1
14728: PUSH
14729: EMPTY
14730: LIST
14731: LIST
14732: PPUSH
14733: CALL_OW 70
14737: PUSH
14738: LD_INT 0
14740: GREATER
14741: IFFALSE 14801
14743: GO 14745
14745: DISABLE
14746: LD_INT 0
14748: PPUSH
14749: PPUSH
// begin enable ;
14750: ENABLE
// for i in FilterUnitsInArea ( vulcano_area , [ f_type , unit_human ] ) do
14751: LD_ADDR_VAR 0 1
14755: PUSH
14756: LD_INT 13
14758: PPUSH
14759: LD_INT 21
14761: PUSH
14762: LD_INT 1
14764: PUSH
14765: EMPTY
14766: LIST
14767: LIST
14768: PPUSH
14769: CALL_OW 70
14773: PUSH
14774: FOR_IN
14775: IFFALSE 14799
// if GetLives ( i ) then
14777: LD_VAR 0 1
14781: PPUSH
14782: CALL_OW 256
14786: IFFALSE 14797
// KillUnit ( i ) ;
14788: LD_VAR 0 1
14792: PPUSH
14793: CALL_OW 66
14797: GO 14774
14799: POP
14800: POP
// end ;
14801: PPOPN 2
14803: END
// on ArtifactResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
14804: LD_VAR 0 1
14808: PPUSH
14809: CALL_OW 255
14813: PUSH
14814: LD_OWVAR 2
14818: EQUAL
14819: IFFALSE 14829
// player_res_art := true ;
14821: LD_ADDR_EXP 6
14825: PUSH
14826: LD_INT 1
14828: ST_TO_ADDR
// end ;
14829: PPOPN 1
14831: END
// every 0 0$03 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) and player_res_art do var xy , lab ;
14832: LD_INT 22
14834: PUSH
14835: LD_OWVAR 2
14839: PUSH
14840: EMPTY
14841: LIST
14842: LIST
14843: PUSH
14844: LD_INT 2
14846: PUSH
14847: LD_INT 30
14849: PUSH
14850: LD_INT 7
14852: PUSH
14853: EMPTY
14854: LIST
14855: LIST
14856: PUSH
14857: LD_INT 30
14859: PUSH
14860: LD_INT 8
14862: PUSH
14863: EMPTY
14864: LIST
14865: LIST
14866: PUSH
14867: LD_INT 30
14869: PUSH
14870: LD_INT 11
14872: PUSH
14873: EMPTY
14874: LIST
14875: LIST
14876: PUSH
14877: EMPTY
14878: LIST
14879: LIST
14880: LIST
14881: LIST
14882: PUSH
14883: EMPTY
14884: LIST
14885: LIST
14886: PPUSH
14887: CALL_OW 69
14891: PUSH
14892: LD_EXP 6
14896: AND
14897: IFFALSE 15254
14899: GO 14901
14901: DISABLE
14902: LD_INT 0
14904: PPUSH
14905: PPUSH
// begin enable ;
14906: ENABLE
// xy := FindArtifact ( 1 ) ;
14907: LD_ADDR_VAR 0 1
14911: PUSH
14912: LD_INT 1
14914: PPUSH
14915: CALL_OW 469
14919: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_siberium ] ] ] ) , xy [ 1 ] , xy [ 2 ] ) ;
14920: LD_ADDR_VAR 0 2
14924: PUSH
14925: LD_INT 22
14927: PUSH
14928: LD_OWVAR 2
14932: PUSH
14933: EMPTY
14934: LIST
14935: LIST
14936: PUSH
14937: LD_INT 2
14939: PUSH
14940: LD_INT 30
14942: PUSH
14943: LD_INT 8
14945: PUSH
14946: EMPTY
14947: LIST
14948: LIST
14949: PUSH
14950: LD_INT 30
14952: PUSH
14953: LD_INT 7
14955: PUSH
14956: EMPTY
14957: LIST
14958: LIST
14959: PUSH
14960: LD_INT 30
14962: PUSH
14963: LD_INT 11
14965: PUSH
14966: EMPTY
14967: LIST
14968: LIST
14969: PUSH
14970: EMPTY
14971: LIST
14972: LIST
14973: LIST
14974: LIST
14975: PUSH
14976: EMPTY
14977: LIST
14978: LIST
14979: PPUSH
14980: CALL_OW 69
14984: PPUSH
14985: LD_VAR 0 1
14989: PUSH
14990: LD_INT 1
14992: ARRAY
14993: PPUSH
14994: LD_VAR 0 1
14998: PUSH
14999: LD_INT 2
15001: ARRAY
15002: PPUSH
15003: CALL_OW 73
15007: ST_TO_ADDR
// if player_artifact_ready = false then
15008: LD_EXP 8
15012: PUSH
15013: LD_INT 0
15015: EQUAL
15016: IFFALSE 15130
// if GetDistUnitXY ( lab , xy [ 1 ] , xy [ 2 ] ) < 6 then
15018: LD_VAR 0 2
15022: PPUSH
15023: LD_VAR 0 1
15027: PUSH
15028: LD_INT 1
15030: ARRAY
15031: PPUSH
15032: LD_VAR 0 1
15036: PUSH
15037: LD_INT 2
15039: ARRAY
15040: PPUSH
15041: CALL_OW 297
15045: PUSH
15046: LD_INT 6
15048: LESS
15049: IFFALSE 15110
// begin if BuildingStatus ( lab ) = bs_idle then
15051: LD_VAR 0 2
15055: PPUSH
15056: CALL_OW 461
15060: PUSH
15061: LD_INT 2
15063: EQUAL
15064: IFFALSE 15088
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) else
15066: LD_OWVAR 2
15070: PPUSH
15071: LD_INT 1
15073: PPUSH
15074: LD_INT 2
15076: PPUSH
15077: LD_VAR 0 2
15081: PPUSH
15082: CALL_OW 468
15086: GO 15108
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
15088: LD_OWVAR 2
15092: PPUSH
15093: LD_INT 1
15095: PPUSH
15096: LD_INT 1
15098: PPUSH
15099: LD_VAR 0 2
15103: PPUSH
15104: CALL_OW 468
// end else
15108: GO 15130
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
15110: LD_OWVAR 2
15114: PPUSH
15115: LD_INT 1
15117: PPUSH
15118: LD_INT 1
15120: PPUSH
15121: LD_VAR 0 2
15125: PPUSH
15126: CALL_OW 468
// if player_artifact_ready then
15130: LD_EXP 8
15134: IFFALSE 15254
// if GetDistUnitXY ( lab , xy [ 1 ] , xy [ 2 ] ) < 6 then
15136: LD_VAR 0 2
15140: PPUSH
15141: LD_VAR 0 1
15145: PUSH
15146: LD_INT 1
15148: ARRAY
15149: PPUSH
15150: LD_VAR 0 1
15154: PUSH
15155: LD_INT 2
15157: ARRAY
15158: PPUSH
15159: CALL_OW 297
15163: PUSH
15164: LD_INT 6
15166: LESS
15167: IFFALSE 15232
// begin if BuildingStatus ( lab ) = bs_idle then
15169: LD_VAR 0 2
15173: PPUSH
15174: CALL_OW 461
15178: PUSH
15179: LD_INT 2
15181: EQUAL
15182: IFFALSE 15208
// SetArtifactUse ( your_side , art_icon , art_unit , lab ) else
15184: LD_OWVAR 2
15188: PPUSH
15189: LD_EXP 9
15193: PPUSH
15194: LD_INT 4
15196: PPUSH
15197: LD_VAR 0 2
15201: PPUSH
15202: CALL_OW 468
15206: GO 15230
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
15208: LD_OWVAR 2
15212: PPUSH
15213: LD_EXP 9
15217: PPUSH
15218: LD_INT 1
15220: PPUSH
15221: LD_VAR 0 2
15225: PPUSH
15226: CALL_OW 468
// end else
15230: GO 15254
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
15232: LD_OWVAR 2
15236: PPUSH
15237: LD_EXP 9
15241: PPUSH
15242: LD_INT 1
15244: PPUSH
15245: LD_VAR 0 2
15249: PPUSH
15250: CALL_OW 468
// end ;
15254: PPOPN 2
15256: END
// on ArtifactUsed ( s , icon , cr1 , cr2 ) do var xy , i , lab , side ;
15257: LD_INT 0
15259: PPUSH
15260: PPUSH
15261: PPUSH
15262: PPUSH
// begin xy := FindArtifact ( 1 ) ;
15263: LD_ADDR_VAR 0 5
15267: PUSH
15268: LD_INT 1
15270: PPUSH
15271: CALL_OW 469
15275: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , xy [ 1 ] , xy [ 2 ] ) ;
15276: LD_ADDR_VAR 0 7
15280: PUSH
15281: LD_INT 22
15283: PUSH
15284: LD_OWVAR 2
15288: PUSH
15289: EMPTY
15290: LIST
15291: LIST
15292: PUSH
15293: LD_INT 2
15295: PUSH
15296: LD_INT 30
15298: PUSH
15299: LD_INT 8
15301: PUSH
15302: EMPTY
15303: LIST
15304: LIST
15305: PUSH
15306: LD_INT 30
15308: PUSH
15309: LD_INT 11
15311: PUSH
15312: EMPTY
15313: LIST
15314: LIST
15315: PUSH
15316: EMPTY
15317: LIST
15318: LIST
15319: LIST
15320: PUSH
15321: EMPTY
15322: LIST
15323: LIST
15324: PPUSH
15325: CALL_OW 69
15329: PPUSH
15330: LD_VAR 0 5
15334: PUSH
15335: LD_INT 1
15337: ARRAY
15338: PPUSH
15339: LD_VAR 0 5
15343: PUSH
15344: LD_INT 2
15346: ARRAY
15347: PPUSH
15348: CALL_OW 73
15352: ST_TO_ADDR
// if icon = art_exp_left then
15353: LD_VAR 0 2
15357: PUSH
15358: LD_INT 1
15360: EQUAL
15361: IFFALSE 15414
// begin SetSpecResearch ( lab , time_res_art , true ) ;
15363: LD_VAR 0 7
15367: PPUSH
15368: LD_EXP 10
15372: PPUSH
15373: LD_INT 1
15375: PPUSH
15376: CALL_OW 486
// SetWorkingProgress ( lab , artifact_progress ) ;
15380: LD_VAR 0 7
15384: PPUSH
15385: LD_EXP 7
15389: PPUSH
15390: CALL_OW 329
// SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
15394: LD_OWVAR 2
15398: PPUSH
15399: LD_INT 1
15401: PPUSH
15402: LD_INT 0
15404: PPUSH
15405: LD_VAR 0 7
15409: PPUSH
15410: CALL_OW 468
// end ; if icon = art_icon then
15414: LD_VAR 0 2
15418: PUSH
15419: LD_EXP 9
15423: EQUAL
15424: IFFALSE 15635
// begin if cr1 in FilterAllUnits ( [ f_type , unit_building ] ) then
15426: LD_VAR 0 3
15430: PUSH
15431: LD_INT 21
15433: PUSH
15434: LD_INT 3
15436: PUSH
15437: EMPTY
15438: LIST
15439: LIST
15440: PPUSH
15441: CALL_OW 69
15445: IN
15446: IFFALSE 15635
// begin side := GetSide ( cr1 ) ;
15448: LD_ADDR_VAR 0 8
15452: PUSH
15453: LD_VAR 0 3
15457: PPUSH
15458: CALL_OW 255
15462: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_siberite_power ] ] ) > 0 then
15463: LD_INT 22
15465: PUSH
15466: LD_VAR 0 8
15470: PUSH
15471: EMPTY
15472: LIST
15473: LIST
15474: PUSH
15475: LD_INT 30
15477: PUSH
15478: LD_INT 28
15480: PUSH
15481: EMPTY
15482: LIST
15483: LIST
15484: PUSH
15485: EMPTY
15486: LIST
15487: LIST
15488: PPUSH
15489: CALL_OW 69
15493: PUSH
15494: LD_INT 0
15496: GREATER
15497: IFFALSE 15635
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_solar_power ] , [ f_btype , b_siberite_power ] ] ] ) do
15499: LD_ADDR_VAR 0 6
15503: PUSH
15504: LD_INT 22
15506: PUSH
15507: LD_VAR 0 8
15511: PUSH
15512: EMPTY
15513: LIST
15514: LIST
15515: PUSH
15516: LD_INT 2
15518: PUSH
15519: LD_INT 30
15521: PUSH
15522: LD_INT 26
15524: PUSH
15525: EMPTY
15526: LIST
15527: LIST
15528: PUSH
15529: LD_INT 30
15531: PUSH
15532: LD_INT 27
15534: PUSH
15535: EMPTY
15536: LIST
15537: LIST
15538: PUSH
15539: LD_INT 30
15541: PUSH
15542: LD_INT 28
15544: PUSH
15545: EMPTY
15546: LIST
15547: LIST
15548: PUSH
15549: EMPTY
15550: LIST
15551: LIST
15552: LIST
15553: LIST
15554: PUSH
15555: EMPTY
15556: LIST
15557: LIST
15558: PPUSH
15559: CALL_OW 69
15563: PUSH
15564: FOR_IN
15565: IFFALSE 15578
// KillUnit ( i ) ;
15567: LD_VAR 0 6
15571: PPUSH
15572: CALL_OW 66
15576: GO 15564
15578: POP
15579: POP
// player_res_art := false ;
15580: LD_ADDR_EXP 6
15584: PUSH
15585: LD_INT 0
15587: ST_TO_ADDR
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
15588: LD_OWVAR 2
15592: PPUSH
15593: LD_EXP 9
15597: PPUSH
15598: LD_INT 1
15600: PPUSH
15601: LD_VAR 0 7
15605: PPUSH
15606: CALL_OW 468
// wait ( time_to_reuse ) ;
15610: LD_EXP 12
15614: PPUSH
15615: CALL_OW 67
// player_res_art := true ;
15619: LD_ADDR_EXP 6
15623: PUSH
15624: LD_INT 1
15626: ST_TO_ADDR
// medal_enabled := true ;
15627: LD_ADDR_EXP 14
15631: PUSH
15632: LD_INT 1
15634: ST_TO_ADDR
// end ; end ; end ; end ;
15635: PPOPN 8
15637: END
// on SpecResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
15638: LD_VAR 0 1
15642: PPUSH
15643: CALL_OW 255
15647: PUSH
15648: LD_OWVAR 2
15652: EQUAL
15653: IFFALSE 15690
// begin SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
15655: LD_OWVAR 2
15659: PPUSH
15660: LD_INT 1
15662: PPUSH
15663: LD_INT 0
15665: PPUSH
15666: LD_VAR 0 1
15670: PPUSH
15671: CALL_OW 468
// player_artifact_ready := true ;
15675: LD_ADDR_EXP 8
15679: PUSH
15680: LD_INT 1
15682: ST_TO_ADDR
// Hint ( ArtVulcano ) ;
15683: LD_STRING ArtVulcano
15685: PPUSH
15686: CALL_OW 339
// end ; end ;
15690: PPOPN 1
15692: END
// on SpecResearchCancel ( lab , progress ) do begin artifact_progress := progress ;
15693: LD_ADDR_EXP 7
15697: PUSH
15698: LD_VAR 0 2
15702: ST_TO_ADDR
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) ;
15703: LD_OWVAR 2
15707: PPUSH
15708: LD_INT 1
15710: PPUSH
15711: LD_INT 2
15713: PPUSH
15714: LD_VAR 0 1
15718: PPUSH
15719: CALL_OW 468
// end ; end_of_file
15723: PPOPN 2
15725: END
// every 0 0$01 do
15726: GO 15728
15728: DISABLE
// begin enable ;
15729: ENABLE
// Display_Strings := [ #tick , tick ] ;
15730: LD_ADDR_OWVAR 47
15734: PUSH
15735: LD_STRING #tick
15737: PUSH
15738: LD_OWVAR 1
15742: PUSH
15743: EMPTY
15744: LIST
15745: LIST
15746: ST_TO_ADDR
// end ; end_of_file
15747: END
// export al_commander , al_force , al_skill ; export function PrepareAlliance ; var i , filter , un , team ; begin
15748: LD_INT 0
15750: PPUSH
15751: PPUSH
15752: PPUSH
15753: PPUSH
15754: PPUSH
// al_skill := [ 7 , 6 , 5 ] [ Difficulty ] ;
15755: LD_ADDR_EXP 43
15759: PUSH
15760: LD_INT 7
15762: PUSH
15763: LD_INT 6
15765: PUSH
15766: LD_INT 5
15768: PUSH
15769: EMPTY
15770: LIST
15771: LIST
15772: LIST
15773: PUSH
15774: LD_OWVAR 67
15778: ARRAY
15779: ST_TO_ADDR
// al_force := [ ] ;
15780: LD_ADDR_EXP 42
15784: PUSH
15785: EMPTY
15786: ST_TO_ADDR
// RemoveAlliance ;
15787: CALL 16165 0 0
// ResetFog ;
15791: CALL_OW 335
// your_side := 7 ;
15795: LD_ADDR_OWVAR 2
15799: PUSH
15800: LD_INT 7
15802: ST_TO_ADDR
// uc_side := 7 ;
15803: LD_ADDR_OWVAR 20
15807: PUSH
15808: LD_INT 7
15810: ST_TO_ADDR
// hc_gallery :=  ;
15811: LD_ADDR_OWVAR 33
15815: PUSH
15816: LD_STRING 
15818: ST_TO_ADDR
// hc_name :=  ;
15819: LD_ADDR_OWVAR 26
15823: PUSH
15824: LD_STRING 
15826: ST_TO_ADDR
// hc_importance := 0 ;
15827: LD_ADDR_OWVAR 32
15831: PUSH
15832: LD_INT 0
15834: ST_TO_ADDR
// for i = 1 to 17 do
15835: LD_ADDR_VAR 0 2
15839: PUSH
15840: DOUBLE
15841: LD_INT 1
15843: DEC
15844: ST_TO_ADDR
15845: LD_INT 17
15847: PUSH
15848: FOR_TO
15849: IFFALSE 15929
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
15851: LD_ADDR_OWVAR 21
15855: PUSH
15856: LD_INT 1
15858: PUSH
15859: LD_INT 3
15861: PUSH
15862: EMPTY
15863: LIST
15864: LIST
15865: PUSH
15866: LD_INT 1
15868: PPUSH
15869: LD_INT 2
15871: PPUSH
15872: CALL_OW 12
15876: ARRAY
15877: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , al_skill ) ;
15878: LD_INT 0
15880: PPUSH
15881: LD_INT 1
15883: PPUSH
15884: LD_INT 4
15886: PPUSH
15887: CALL_OW 12
15891: PPUSH
15892: LD_EXP 43
15896: PPUSH
15897: CALL_OW 380
// un := CreateHuman ;
15901: LD_ADDR_VAR 0 4
15905: PUSH
15906: CALL_OW 44
15910: ST_TO_ADDR
// al_force := al_force ^ un ;
15911: LD_ADDR_EXP 42
15915: PUSH
15916: LD_EXP 42
15920: PUSH
15921: LD_VAR 0 4
15925: ADD
15926: ST_TO_ADDR
// end ;
15927: GO 15848
15929: POP
15930: POP
// hc_importance := 100 ;
15931: LD_ADDR_OWVAR 32
15935: PUSH
15936: LD_INT 100
15938: ST_TO_ADDR
// uc_nation := 1 ;
15939: LD_ADDR_OWVAR 21
15943: PUSH
15944: LD_INT 1
15946: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , al_skill ) ;
15947: LD_INT 1
15949: PPUSH
15950: LD_INT 1
15952: PPUSH
15953: LD_EXP 43
15957: PPUSH
15958: CALL_OW 380
// al_commander := CreateHuman ;
15962: LD_ADDR_EXP 41
15966: PUSH
15967: CALL_OW 44
15971: ST_TO_ADDR
// player_commander := al_commander ;
15972: LD_ADDR_EXP 11
15976: PUSH
15977: LD_EXP 41
15981: ST_TO_ADDR
// team := CharacterSelection ( text , [ 9 , 9 , 8 ] [ Difficulty ] , [ 9 , 9 , 8 ] [ Difficulty ] , [ sel_change_class , al_commander , sel_changeable , sel_not_hired ] ^ al_force , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , class_bazooker , class_sniper ] ) ;
15982: LD_ADDR_VAR 0 5
15986: PUSH
15987: LD_STRING text
15989: PPUSH
15990: LD_INT 9
15992: PUSH
15993: LD_INT 9
15995: PUSH
15996: LD_INT 8
15998: PUSH
15999: EMPTY
16000: LIST
16001: LIST
16002: LIST
16003: PUSH
16004: LD_OWVAR 67
16008: ARRAY
16009: PPUSH
16010: LD_INT 9
16012: PUSH
16013: LD_INT 9
16015: PUSH
16016: LD_INT 8
16018: PUSH
16019: EMPTY
16020: LIST
16021: LIST
16022: LIST
16023: PUSH
16024: LD_OWVAR 67
16028: ARRAY
16029: PPUSH
16030: LD_INT -5
16032: PUSH
16033: LD_EXP 41
16037: PUSH
16038: LD_INT -3
16040: PUSH
16041: LD_INT -2
16043: PUSH
16044: EMPTY
16045: LIST
16046: LIST
16047: LIST
16048: LIST
16049: PUSH
16050: LD_EXP 42
16054: ADD
16055: PPUSH
16056: LD_INT 1
16058: PUSH
16059: LD_INT 3
16061: PUSH
16062: LD_INT 2
16064: PUSH
16065: LD_INT 1
16067: PUSH
16068: EMPTY
16069: LIST
16070: LIST
16071: PUSH
16072: LD_INT 4
16074: PUSH
16075: LD_INT 1
16077: PUSH
16078: EMPTY
16079: LIST
16080: LIST
16081: PUSH
16082: LD_INT 9
16084: PUSH
16085: LD_INT 5
16087: PUSH
16088: EMPTY
16089: LIST
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: PPUSH
16096: CALL_OW 42
16100: ST_TO_ADDR
// team := team ^ al_commander ;
16101: LD_ADDR_VAR 0 5
16105: PUSH
16106: LD_VAR 0 5
16110: PUSH
16111: LD_EXP 41
16115: ADD
16116: ST_TO_ADDR
// for i = 1 to team do
16117: LD_ADDR_VAR 0 2
16121: PUSH
16122: DOUBLE
16123: LD_INT 1
16125: DEC
16126: ST_TO_ADDR
16127: LD_VAR 0 5
16131: PUSH
16132: FOR_TO
16133: IFFALSE 16158
// PlaceUnitArea ( team [ i ] , south_resp , false ) ;
16135: LD_VAR 0 5
16139: PUSH
16140: LD_VAR 0 2
16144: ARRAY
16145: PPUSH
16146: LD_INT 15
16148: PPUSH
16149: LD_INT 0
16151: PPUSH
16152: CALL_OW 49
16156: GO 16132
16158: POP
16159: POP
// end ;
16160: LD_VAR 0 1
16164: RET
// export function RemoveAlliance ; var i ; begin
16165: LD_INT 0
16167: PPUSH
16168: PPUSH
// DestroyUnit ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
16169: LD_INT 22
16171: PUSH
16172: LD_INT 7
16174: PUSH
16175: EMPTY
16176: LIST
16177: LIST
16178: PUSH
16179: LD_INT 30
16181: PUSH
16182: LD_INT 1
16184: PUSH
16185: EMPTY
16186: LIST
16187: LIST
16188: PUSH
16189: EMPTY
16190: LIST
16191: LIST
16192: PPUSH
16193: CALL_OW 69
16197: PUSH
16198: LD_INT 1
16200: ARRAY
16201: PPUSH
16202: CALL_OW 65
// for i in FilterAllUnits ( [ f_side , 7 ] ) do
16206: LD_ADDR_VAR 0 2
16210: PUSH
16211: LD_INT 22
16213: PUSH
16214: LD_INT 7
16216: PUSH
16217: EMPTY
16218: LIST
16219: LIST
16220: PPUSH
16221: CALL_OW 69
16225: PUSH
16226: FOR_IN
16227: IFFALSE 16240
// RemoveUnit ( i ) ;
16229: LD_VAR 0 2
16233: PPUSH
16234: CALL_OW 64
16238: GO 16226
16240: POP
16241: POP
// end ;
16242: LD_VAR 0 1
16246: RET
// export function PrepareAllianceAI ; var i , un , b ; begin
16247: LD_INT 0
16249: PPUSH
16250: PPUSH
16251: PPUSH
16252: PPUSH
// SetTech ( tech_lapser , 7 , state_researched ) ;
16253: LD_INT 31
16255: PPUSH
16256: LD_INT 7
16258: PPUSH
16259: LD_INT 2
16261: PPUSH
16262: CALL_OW 322
// SetTech ( tech_ai , 7 , state_researched ) ;
16266: LD_INT 32
16268: PPUSH
16269: LD_INT 7
16271: PPUSH
16272: LD_INT 2
16274: PPUSH
16275: CALL_OW 322
// SetTech ( tech_comp3 , 7 , state_researched ) ;
16279: LD_INT 59
16281: PPUSH
16282: LD_INT 7
16284: PPUSH
16285: LD_INT 2
16287: PPUSH
16288: CALL_OW 322
// al_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
16292: LD_ADDR_EXP 43
16296: PUSH
16297: LD_INT 5
16299: PUSH
16300: LD_INT 6
16302: PUSH
16303: LD_INT 7
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: LIST
16310: PUSH
16311: LD_OWVAR 67
16315: ARRAY
16316: ST_TO_ADDR
// al_force := [ ] ;
16317: LD_ADDR_EXP 42
16321: PUSH
16322: EMPTY
16323: ST_TO_ADDR
// al_vehs := [ ] ;
16324: LD_ADDR_EXP 48
16328: PUSH
16329: EMPTY
16330: ST_TO_ADDR
// uc_side := 7 ;
16331: LD_ADDR_OWVAR 20
16335: PUSH
16336: LD_INT 7
16338: ST_TO_ADDR
// uc_nation := 1 ;
16339: LD_ADDR_OWVAR 21
16343: PUSH
16344: LD_INT 1
16346: ST_TO_ADDR
// bc_type := b_oil_mine ;
16347: LD_ADDR_OWVAR 42
16351: PUSH
16352: LD_INT 29
16354: ST_TO_ADDR
// b := CreateBuilding ;
16355: LD_ADDR_VAR 0 4
16359: PUSH
16360: CALL_OW 46
16364: ST_TO_ADDR
// PlaceUnitXYR ( b , 61 , 7 , 0 , false ) ;
16365: LD_VAR 0 4
16369: PPUSH
16370: LD_INT 61
16372: PPUSH
16373: LD_INT 7
16375: PPUSH
16376: LD_INT 0
16378: PPUSH
16379: LD_INT 0
16381: PPUSH
16382: CALL_OW 50
// bc_type := b_siberite_mine ;
16386: LD_ADDR_OWVAR 42
16390: PUSH
16391: LD_INT 30
16393: ST_TO_ADDR
// b := CreateBuilding ;
16394: LD_ADDR_VAR 0 4
16398: PUSH
16399: CALL_OW 46
16403: ST_TO_ADDR
// PlaceUnitXYR ( b , 69 , 13 , 0 , false ) ;
16404: LD_VAR 0 4
16408: PPUSH
16409: LD_INT 69
16411: PPUSH
16412: LD_INT 13
16414: PPUSH
16415: LD_INT 0
16417: PPUSH
16418: LD_INT 0
16420: PPUSH
16421: CALL_OW 50
// hc_gallery :=  ;
16425: LD_ADDR_OWVAR 33
16429: PUSH
16430: LD_STRING 
16432: ST_TO_ADDR
// hc_name :=  ;
16433: LD_ADDR_OWVAR 26
16437: PUSH
16438: LD_STRING 
16440: ST_TO_ADDR
// hc_importance := 0 ;
16441: LD_ADDR_OWVAR 32
16445: PUSH
16446: LD_INT 0
16448: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_bunker ] ] ) do
16449: LD_ADDR_VAR 0 2
16453: PUSH
16454: LD_INT 22
16456: PUSH
16457: LD_INT 7
16459: PUSH
16460: EMPTY
16461: LIST
16462: LIST
16463: PUSH
16464: LD_INT 30
16466: PUSH
16467: LD_INT 32
16469: PUSH
16470: EMPTY
16471: LIST
16472: LIST
16473: PUSH
16474: EMPTY
16475: LIST
16476: LIST
16477: PPUSH
16478: CALL_OW 69
16482: PUSH
16483: FOR_IN
16484: IFFALSE 16554
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
16486: LD_ADDR_OWVAR 21
16490: PUSH
16491: LD_INT 1
16493: PUSH
16494: LD_INT 3
16496: PUSH
16497: EMPTY
16498: LIST
16499: LIST
16500: PUSH
16501: LD_INT 1
16503: PPUSH
16504: LD_INT 2
16506: PPUSH
16507: CALL_OW 12
16511: ARRAY
16512: ST_TO_ADDR
// PrepareHuman ( false , 1 , al_skill ) ;
16513: LD_INT 0
16515: PPUSH
16516: LD_INT 1
16518: PPUSH
16519: LD_EXP 43
16523: PPUSH
16524: CALL_OW 380
// un := CreateHuman ;
16528: LD_ADDR_VAR 0 3
16532: PUSH
16533: CALL_OW 44
16537: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
16538: LD_VAR 0 3
16542: PPUSH
16543: LD_VAR 0 2
16547: PPUSH
16548: CALL_OW 52
// end ;
16552: GO 16483
16554: POP
16555: POP
// for i = 1 to 3 do
16556: LD_ADDR_VAR 0 2
16560: PUSH
16561: DOUBLE
16562: LD_INT 1
16564: DEC
16565: ST_TO_ADDR
16566: LD_INT 3
16568: PUSH
16569: FOR_TO
16570: IFFALSE 16638
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
16572: LD_ADDR_OWVAR 21
16576: PUSH
16577: LD_INT 1
16579: PUSH
16580: LD_INT 3
16582: PUSH
16583: EMPTY
16584: LIST
16585: LIST
16586: PUSH
16587: LD_INT 1
16589: PPUSH
16590: LD_INT 2
16592: PPUSH
16593: CALL_OW 12
16597: ARRAY
16598: ST_TO_ADDR
// PrepareHuman ( false , 4 , al_skill ) ;
16599: LD_INT 0
16601: PPUSH
16602: LD_INT 4
16604: PPUSH
16605: LD_EXP 43
16609: PPUSH
16610: CALL_OW 380
// un := CreateHuman ;
16614: LD_ADDR_VAR 0 3
16618: PUSH
16619: CALL_OW 44
16623: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_lab1 ) ;
16624: LD_VAR 0 3
16628: PPUSH
16629: LD_INT 164
16631: PPUSH
16632: CALL_OW 52
// end ;
16636: GO 16569
16638: POP
16639: POP
// for i = 1 to 4 do
16640: LD_ADDR_VAR 0 2
16644: PUSH
16645: DOUBLE
16646: LD_INT 1
16648: DEC
16649: ST_TO_ADDR
16650: LD_INT 4
16652: PUSH
16653: FOR_TO
16654: IFFALSE 16745
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
16656: LD_ADDR_OWVAR 21
16660: PUSH
16661: LD_INT 1
16663: PUSH
16664: LD_INT 3
16666: PUSH
16667: EMPTY
16668: LIST
16669: LIST
16670: PUSH
16671: LD_INT 1
16673: PPUSH
16674: LD_INT 2
16676: PPUSH
16677: CALL_OW 12
16681: ARRAY
16682: ST_TO_ADDR
// PrepareHuman ( false , [ class_sniper , class_bazooker , class_bazooker ] [ Rand ( 1 , 3 ) ] , al_skill ) ;
16683: LD_INT 0
16685: PPUSH
16686: LD_INT 5
16688: PUSH
16689: LD_INT 9
16691: PUSH
16692: LD_INT 9
16694: PUSH
16695: EMPTY
16696: LIST
16697: LIST
16698: LIST
16699: PUSH
16700: LD_INT 1
16702: PPUSH
16703: LD_INT 3
16705: PPUSH
16706: CALL_OW 12
16710: ARRAY
16711: PPUSH
16712: LD_EXP 43
16716: PPUSH
16717: CALL_OW 380
// un := CreateHuman ;
16721: LD_ADDR_VAR 0 3
16725: PUSH
16726: CALL_OW 44
16730: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_bar ) ;
16731: LD_VAR 0 3
16735: PPUSH
16736: LD_INT 173
16738: PPUSH
16739: CALL_OW 52
// end ;
16743: GO 16653
16745: POP
16746: POP
// for i = 1 to 4 do
16747: LD_ADDR_VAR 0 2
16751: PUSH
16752: DOUBLE
16753: LD_INT 1
16755: DEC
16756: ST_TO_ADDR
16757: LD_INT 4
16759: PUSH
16760: FOR_TO
16761: IFFALSE 16859
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
16763: LD_ADDR_OWVAR 21
16767: PUSH
16768: LD_INT 1
16770: PUSH
16771: LD_INT 3
16773: PUSH
16774: EMPTY
16775: LIST
16776: LIST
16777: PUSH
16778: LD_INT 1
16780: PPUSH
16781: LD_INT 2
16783: PPUSH
16784: CALL_OW 12
16788: ARRAY
16789: ST_TO_ADDR
// PrepareHuman ( false , 3 , al_skill ) ;
16790: LD_INT 0
16792: PPUSH
16793: LD_INT 3
16795: PPUSH
16796: LD_EXP 43
16800: PPUSH
16801: CALL_OW 380
// un := CreateHuman ;
16805: LD_ADDR_VAR 0 3
16809: PUSH
16810: CALL_OW 44
16814: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
16815: LD_VAR 0 3
16819: PPUSH
16820: LD_INT 22
16822: PUSH
16823: LD_INT 7
16825: PUSH
16826: EMPTY
16827: LIST
16828: LIST
16829: PUSH
16830: LD_INT 30
16832: PUSH
16833: LD_INT 3
16835: PUSH
16836: EMPTY
16837: LIST
16838: LIST
16839: PUSH
16840: EMPTY
16841: LIST
16842: LIST
16843: PPUSH
16844: CALL_OW 69
16848: PUSH
16849: LD_INT 1
16851: ARRAY
16852: PPUSH
16853: CALL_OW 52
// end ;
16857: GO 16760
16859: POP
16860: POP
// for i = 1 to 4 do
16861: LD_ADDR_VAR 0 2
16865: PUSH
16866: DOUBLE
16867: LD_INT 1
16869: DEC
16870: ST_TO_ADDR
16871: LD_INT 4
16873: PUSH
16874: FOR_TO
16875: IFFALSE 16943
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
16877: LD_ADDR_OWVAR 21
16881: PUSH
16882: LD_INT 1
16884: PUSH
16885: LD_INT 3
16887: PUSH
16888: EMPTY
16889: LIST
16890: LIST
16891: PUSH
16892: LD_INT 1
16894: PPUSH
16895: LD_INT 2
16897: PPUSH
16898: CALL_OW 12
16902: ARRAY
16903: ST_TO_ADDR
// PrepareHuman ( false , 2 , al_skill ) ;
16904: LD_INT 0
16906: PPUSH
16907: LD_INT 2
16909: PPUSH
16910: LD_EXP 43
16914: PPUSH
16915: CALL_OW 380
// un := CreateHuman ;
16919: LD_ADDR_VAR 0 3
16923: PUSH
16924: CALL_OW 44
16928: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_depot ) ;
16929: LD_VAR 0 3
16933: PPUSH
16934: LD_INT 162
16936: PPUSH
16937: CALL_OW 52
// end ;
16941: GO 16874
16943: POP
16944: POP
// uc_nation := 3 ;
16945: LD_ADDR_OWVAR 21
16949: PUSH
16950: LD_INT 3
16952: ST_TO_ADDR
// vc_chassis := ru_medium_wheeled ;
16953: LD_ADDR_OWVAR 37
16957: PUSH
16958: LD_INT 21
16960: ST_TO_ADDR
// vc_engine := engine_siberite ;
16961: LD_ADDR_OWVAR 39
16965: PUSH
16966: LD_INT 3
16968: ST_TO_ADDR
// vc_control := control_computer ;
16969: LD_ADDR_OWVAR 38
16973: PUSH
16974: LD_INT 3
16976: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
16977: LD_ADDR_OWVAR 40
16981: PUSH
16982: LD_INT 51
16984: ST_TO_ADDR
// PlaceUnitXY ( CreateVehicle , 49 , 13 , false ) ;
16985: CALL_OW 45
16989: PPUSH
16990: LD_INT 49
16992: PPUSH
16993: LD_INT 13
16995: PPUSH
16996: LD_INT 0
16998: PPUSH
16999: CALL_OW 48
// al_turrets := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_turret ] ] ) ;
17003: LD_ADDR_EXP 50
17007: PUSH
17008: LD_INT 22
17010: PUSH
17011: LD_INT 7
17013: PUSH
17014: EMPTY
17015: LIST
17016: LIST
17017: PUSH
17018: LD_INT 30
17020: PUSH
17021: LD_INT 33
17023: PUSH
17024: EMPTY
17025: LIST
17026: LIST
17027: PUSH
17028: EMPTY
17029: LIST
17030: LIST
17031: PPUSH
17032: CALL_OW 69
17036: ST_TO_ADDR
// for i = 1 to FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_btype , b_turret ] , [ f_bweapon , 0 ] ] ] ) do
17037: LD_ADDR_VAR 0 2
17041: PUSH
17042: DOUBLE
17043: LD_INT 1
17045: DEC
17046: ST_TO_ADDR
17047: LD_INT 22
17049: PUSH
17050: LD_INT 7
17052: PUSH
17053: EMPTY
17054: LIST
17055: LIST
17056: PUSH
17057: LD_INT 30
17059: PUSH
17060: LD_INT 33
17062: PUSH
17063: EMPTY
17064: LIST
17065: LIST
17066: PUSH
17067: LD_INT 35
17069: PUSH
17070: LD_INT 0
17072: PUSH
17073: EMPTY
17074: LIST
17075: LIST
17076: PUSH
17077: EMPTY
17078: LIST
17079: LIST
17080: LIST
17081: PUSH
17082: EMPTY
17083: LIST
17084: PPUSH
17085: CALL_OW 69
17089: PUSH
17090: FOR_TO
17091: IFFALSE 17151
// AddComPlaceWeapon ( FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_btype , b_turret ] , [ f_bweapon , 0 ] ] ] ) [ i ] , ru_time_lapser ) ;
17093: LD_INT 22
17095: PUSH
17096: LD_INT 7
17098: PUSH
17099: EMPTY
17100: LIST
17101: LIST
17102: PUSH
17103: LD_INT 30
17105: PUSH
17106: LD_INT 33
17108: PUSH
17109: EMPTY
17110: LIST
17111: LIST
17112: PUSH
17113: LD_INT 35
17115: PUSH
17116: LD_INT 0
17118: PUSH
17119: EMPTY
17120: LIST
17121: LIST
17122: PUSH
17123: EMPTY
17124: LIST
17125: LIST
17126: LIST
17127: PUSH
17128: EMPTY
17129: LIST
17130: PPUSH
17131: CALL_OW 69
17135: PUSH
17136: LD_VAR 0 2
17140: ARRAY
17141: PPUSH
17142: LD_INT 49
17144: PPUSH
17145: CALL_OW 208
17149: GO 17090
17151: POP
17152: POP
// end ;
17153: LD_VAR 0 1
17157: RET
// export al_eng , al_sold , al_mech , al_sci ; export al_vehs , al_cargo , al_turrets ; export al_dep , al_lab , al_fac ; export al_bul ; every 0 0$02 trigger your_side = 1 do var i , un , veh , cr ;
17158: LD_OWVAR 2
17162: PUSH
17163: LD_INT 1
17165: EQUAL
17166: IFFALSE 18176
17168: GO 17170
17170: DISABLE
17171: LD_INT 0
17173: PPUSH
17174: PPUSH
17175: PPUSH
17176: PPUSH
// begin enable ;
17177: ENABLE
// al_bul := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] ] ) ;
17178: LD_ADDR_EXP 54
17182: PUSH
17183: LD_INT 22
17185: PUSH
17186: LD_INT 7
17188: PUSH
17189: EMPTY
17190: LIST
17191: LIST
17192: PUSH
17193: LD_INT 21
17195: PUSH
17196: LD_INT 3
17198: PUSH
17199: EMPTY
17200: LIST
17201: LIST
17202: PUSH
17203: EMPTY
17204: LIST
17205: LIST
17206: PPUSH
17207: CALL_OW 69
17211: ST_TO_ADDR
// al_lab := [ al_lab1 , al_lab2 ] ;
17212: LD_ADDR_EXP 52
17216: PUSH
17217: LD_INT 164
17219: PUSH
17220: LD_INT 197
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: ST_TO_ADDR
// al_dep := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
17227: LD_ADDR_EXP 51
17231: PUSH
17232: LD_INT 22
17234: PUSH
17235: LD_INT 7
17237: PUSH
17238: EMPTY
17239: LIST
17240: LIST
17241: PUSH
17242: LD_INT 30
17244: PUSH
17245: LD_INT 1
17247: PUSH
17248: EMPTY
17249: LIST
17250: LIST
17251: PUSH
17252: EMPTY
17253: LIST
17254: LIST
17255: PPUSH
17256: CALL_OW 69
17260: PUSH
17261: LD_INT 1
17263: ARRAY
17264: ST_TO_ADDR
// al_fac := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
17265: LD_ADDR_EXP 53
17269: PUSH
17270: LD_INT 22
17272: PUSH
17273: LD_INT 7
17275: PUSH
17276: EMPTY
17277: LIST
17278: LIST
17279: PUSH
17280: LD_INT 30
17282: PUSH
17283: LD_INT 3
17285: PUSH
17286: EMPTY
17287: LIST
17288: LIST
17289: PUSH
17290: EMPTY
17291: LIST
17292: LIST
17293: PPUSH
17294: CALL_OW 69
17298: PUSH
17299: LD_INT 1
17301: ARRAY
17302: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) then
17303: LD_INT 22
17305: PUSH
17306: LD_INT 7
17308: PUSH
17309: EMPTY
17310: LIST
17311: LIST
17312: PUSH
17313: LD_INT 34
17315: PUSH
17316: LD_INT 51
17318: PUSH
17319: EMPTY
17320: LIST
17321: LIST
17322: PUSH
17323: EMPTY
17324: LIST
17325: LIST
17326: PPUSH
17327: CALL_OW 69
17331: IFFALSE 17371
// al_cargo := FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
17333: LD_ADDR_EXP 49
17337: PUSH
17338: LD_INT 22
17340: PUSH
17341: LD_INT 7
17343: PUSH
17344: EMPTY
17345: LIST
17346: LIST
17347: PUSH
17348: LD_INT 34
17350: PUSH
17351: LD_INT 51
17353: PUSH
17354: EMPTY
17355: LIST
17356: LIST
17357: PUSH
17358: EMPTY
17359: LIST
17360: LIST
17361: PPUSH
17362: CALL_OW 69
17366: PUSH
17367: LD_INT 1
17369: ARRAY
17370: ST_TO_ADDR
// al_sold := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , class_bazooker ] ] ) ;
17371: LD_ADDR_EXP 45
17375: PUSH
17376: LD_INT 22
17378: PUSH
17379: LD_INT 7
17381: PUSH
17382: EMPTY
17383: LIST
17384: LIST
17385: PUSH
17386: LD_INT 25
17388: PUSH
17389: LD_INT 9
17391: PUSH
17392: EMPTY
17393: LIST
17394: LIST
17395: PUSH
17396: EMPTY
17397: LIST
17398: LIST
17399: PPUSH
17400: CALL_OW 69
17404: ST_TO_ADDR
// al_eng := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 2 ] ] ) ;
17405: LD_ADDR_EXP 44
17409: PUSH
17410: LD_INT 22
17412: PUSH
17413: LD_INT 7
17415: PUSH
17416: EMPTY
17417: LIST
17418: LIST
17419: PUSH
17420: LD_INT 25
17422: PUSH
17423: LD_INT 2
17425: PUSH
17426: EMPTY
17427: LIST
17428: LIST
17429: PUSH
17430: EMPTY
17431: LIST
17432: LIST
17433: PPUSH
17434: CALL_OW 69
17438: ST_TO_ADDR
// al_mech := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 3 ] ] ) ;
17439: LD_ADDR_EXP 46
17443: PUSH
17444: LD_INT 22
17446: PUSH
17447: LD_INT 7
17449: PUSH
17450: EMPTY
17451: LIST
17452: LIST
17453: PUSH
17454: LD_INT 25
17456: PUSH
17457: LD_INT 3
17459: PUSH
17460: EMPTY
17461: LIST
17462: LIST
17463: PUSH
17464: EMPTY
17465: LIST
17466: LIST
17467: PPUSH
17468: CALL_OW 69
17472: ST_TO_ADDR
// al_sci := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 4 ] ] ) ;
17473: LD_ADDR_EXP 47
17477: PUSH
17478: LD_INT 22
17480: PUSH
17481: LD_INT 7
17483: PUSH
17484: EMPTY
17485: LIST
17486: LIST
17487: PUSH
17488: LD_INT 25
17490: PUSH
17491: LD_INT 4
17493: PUSH
17494: EMPTY
17495: LIST
17496: LIST
17497: PUSH
17498: EMPTY
17499: LIST
17500: LIST
17501: PPUSH
17502: CALL_OW 69
17506: ST_TO_ADDR
// IntBazooka ( al_sold , FilterAllUnits ( [ f_enemy , 7 ] ) ) ;
17507: LD_EXP 45
17511: PPUSH
17512: LD_INT 81
17514: PUSH
17515: LD_INT 7
17517: PUSH
17518: EMPTY
17519: LIST
17520: LIST
17521: PPUSH
17522: CALL_OW 69
17526: PPUSH
17527: CALL 1533 0 2
// if not HasTask ( al_cargo ) and GetCargo ( al_cargo , mat_cans ) < 100 then
17531: LD_EXP 49
17535: PPUSH
17536: CALL_OW 314
17540: NOT
17541: PUSH
17542: LD_EXP 49
17546: PPUSH
17547: LD_INT 1
17549: PPUSH
17550: CALL_OW 289
17554: PUSH
17555: LD_INT 100
17557: LESS
17558: AND
17559: IFFALSE 17607
// begin cr := GetListOfCratesInArea ( us_crates ) ;
17561: LD_ADDR_VAR 0 4
17565: PUSH
17566: LD_INT 12
17568: PPUSH
17569: CALL_OW 435
17573: ST_TO_ADDR
// if cr then
17574: LD_VAR 0 4
17578: IFFALSE 17607
// ComCollect ( al_cargo , cr [ 1 ] , cr [ 2 ] ) ;
17580: LD_EXP 49
17584: PPUSH
17585: LD_VAR 0 4
17589: PUSH
17590: LD_INT 1
17592: ARRAY
17593: PPUSH
17594: LD_VAR 0 4
17598: PUSH
17599: LD_INT 2
17601: ARRAY
17602: PPUSH
17603: CALL_OW 117
// end ; if UnitFilter ( al_bul , [ f_not , [ f_lives , 1000 ] ] ) then
17607: LD_EXP 54
17611: PPUSH
17612: LD_INT 3
17614: PUSH
17615: LD_INT 24
17617: PUSH
17618: LD_INT 1000
17620: PUSH
17621: EMPTY
17622: LIST
17623: LIST
17624: PUSH
17625: EMPTY
17626: LIST
17627: LIST
17628: PPUSH
17629: CALL_OW 72
17633: IFFALSE 17763
// begin if al_eng then
17635: LD_EXP 44
17639: IFFALSE 17761
// for i = 1 to al_eng do
17641: LD_ADDR_VAR 0 1
17645: PUSH
17646: DOUBLE
17647: LD_INT 1
17649: DEC
17650: ST_TO_ADDR
17651: LD_EXP 44
17655: PUSH
17656: FOR_TO
17657: IFFALSE 17759
// if IsInUnit ( al_eng [ i ] ) then
17659: LD_EXP 44
17663: PUSH
17664: LD_VAR 0 1
17668: ARRAY
17669: PPUSH
17670: CALL_OW 310
17674: IFFALSE 17693
// ComExitBuilding ( al_eng [ i ] ) else
17676: LD_EXP 44
17680: PUSH
17681: LD_VAR 0 1
17685: ARRAY
17686: PPUSH
17687: CALL_OW 122
17691: GO 17757
// if not HasTask ( al_eng [ i ] ) then
17693: LD_EXP 44
17697: PUSH
17698: LD_VAR 0 1
17702: ARRAY
17703: PPUSH
17704: CALL_OW 314
17708: NOT
17709: IFFALSE 17757
// ComRepairBuilding ( al_eng [ i ] , UnitFilter ( al_bul , [ f_not , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
17711: LD_EXP 44
17715: PUSH
17716: LD_VAR 0 1
17720: ARRAY
17721: PPUSH
17722: LD_EXP 54
17726: PPUSH
17727: LD_INT 3
17729: PUSH
17730: LD_INT 24
17732: PUSH
17733: LD_INT 1000
17735: PUSH
17736: EMPTY
17737: LIST
17738: LIST
17739: PUSH
17740: EMPTY
17741: LIST
17742: LIST
17743: PPUSH
17744: CALL_OW 72
17748: PUSH
17749: LD_INT 1
17751: ARRAY
17752: PPUSH
17753: CALL_OW 130
17757: GO 17656
17759: POP
17760: POP
// end else
17761: GO 17845
// if al_eng then
17763: LD_EXP 44
17767: IFFALSE 17845
// if not IsInUnit ( al_eng [ 1 ] ) then
17769: LD_EXP 44
17773: PUSH
17774: LD_INT 1
17776: ARRAY
17777: PPUSH
17778: CALL_OW 310
17782: NOT
17783: IFFALSE 17845
// for i = 1 to al_eng do
17785: LD_ADDR_VAR 0 1
17789: PUSH
17790: DOUBLE
17791: LD_INT 1
17793: DEC
17794: ST_TO_ADDR
17795: LD_EXP 44
17799: PUSH
17800: FOR_TO
17801: IFFALSE 17843
// if not IsInUnit ( al_eng [ i ] ) then
17803: LD_EXP 44
17807: PUSH
17808: LD_VAR 0 1
17812: ARRAY
17813: PPUSH
17814: CALL_OW 310
17818: NOT
17819: IFFALSE 17841
// ComEnterUnit ( al_eng [ i ] , al_dep ) ;
17821: LD_EXP 44
17825: PUSH
17826: LD_VAR 0 1
17830: ARRAY
17831: PPUSH
17832: LD_EXP 51
17836: PPUSH
17837: CALL_OW 120
17841: GO 17800
17843: POP
17844: POP
// if al_vehs then
17845: LD_EXP 48
17849: IFFALSE 17949
// if BuildingStatus ( al_fac ) = bs_idle then
17851: LD_EXP 53
17855: PPUSH
17856: CALL_OW 461
17860: PUSH
17861: LD_INT 2
17863: EQUAL
17864: IFFALSE 17949
// begin ComConstruct ( al_fac , al_vehs [ 1 ] , al_vehs [ 2 ] , al_vehs [ 3 ] , al_vehs [ 4 ] ) ;
17866: LD_EXP 53
17870: PPUSH
17871: LD_EXP 48
17875: PUSH
17876: LD_INT 1
17878: ARRAY
17879: PPUSH
17880: LD_EXP 48
17884: PUSH
17885: LD_INT 2
17887: ARRAY
17888: PPUSH
17889: LD_EXP 48
17893: PUSH
17894: LD_INT 3
17896: ARRAY
17897: PPUSH
17898: LD_EXP 48
17902: PUSH
17903: LD_INT 4
17905: ARRAY
17906: PPUSH
17907: CALL_OW 125
// for i = 1 to 4 do
17911: LD_ADDR_VAR 0 1
17915: PUSH
17916: DOUBLE
17917: LD_INT 1
17919: DEC
17920: ST_TO_ADDR
17921: LD_INT 4
17923: PUSH
17924: FOR_TO
17925: IFFALSE 17947
// al_vehs := Delete ( al_vehs , 1 ) ;
17927: LD_ADDR_EXP 48
17931: PUSH
17932: LD_EXP 48
17936: PPUSH
17937: LD_INT 1
17939: PPUSH
17940: CALL_OW 3
17944: ST_TO_ADDR
17945: GO 17924
17947: POP
17948: POP
// end ; if al_force = 0 and tick mod 23100 = 0 then
17949: LD_EXP 42
17953: PUSH
17954: LD_INT 0
17956: EQUAL
17957: PUSH
17958: LD_OWVAR 1
17962: PUSH
17963: LD_INT 23100
17965: MOD
17966: PUSH
17967: LD_INT 0
17969: EQUAL
17970: AND
17971: IFFALSE 18085
// begin for i = 1 to [ 6 , 7 , 8 ] [ Difficulty ] do
17973: LD_ADDR_VAR 0 1
17977: PUSH
17978: DOUBLE
17979: LD_INT 1
17981: DEC
17982: ST_TO_ADDR
17983: LD_INT 6
17985: PUSH
17986: LD_INT 7
17988: PUSH
17989: LD_INT 8
17991: PUSH
17992: EMPTY
17993: LIST
17994: LIST
17995: LIST
17996: PUSH
17997: LD_OWVAR 67
18001: ARRAY
18002: PUSH
18003: FOR_TO
18004: IFFALSE 18083
// begin al_vehs := al_vehs ^ ru_heavy_wheeled ;
18006: LD_ADDR_EXP 48
18010: PUSH
18011: LD_EXP 48
18015: PUSH
18016: LD_INT 23
18018: ADD
18019: ST_TO_ADDR
// al_vehs := al_vehs ^ engine_combustion ;
18020: LD_ADDR_EXP 48
18024: PUSH
18025: LD_EXP 48
18029: PUSH
18030: LD_INT 1
18032: ADD
18033: ST_TO_ADDR
// al_vehs := al_vehs ^ control_computer ;
18034: LD_ADDR_EXP 48
18038: PUSH
18039: LD_EXP 48
18043: PUSH
18044: LD_INT 3
18046: ADD
18047: ST_TO_ADDR
// al_vehs := al_vehs ^ [ ru_heavy_gun , ru_rocket ] [ Rand ( 1 , 2 ) ] ;
18048: LD_ADDR_EXP 48
18052: PUSH
18053: LD_EXP 48
18057: PUSH
18058: LD_INT 46
18060: PUSH
18061: LD_INT 47
18063: PUSH
18064: EMPTY
18065: LIST
18066: LIST
18067: PUSH
18068: LD_INT 1
18070: PPUSH
18071: LD_INT 2
18073: PPUSH
18074: CALL_OW 12
18078: ARRAY
18079: ADD
18080: ST_TO_ADDR
// end ;
18081: GO 18003
18083: POP
18084: POP
// end ; if FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 then
18085: LD_INT 22
18087: PUSH
18088: LD_INT 7
18090: PUSH
18091: EMPTY
18092: LIST
18093: LIST
18094: PUSH
18095: LD_INT 34
18097: PUSH
18098: LD_INT 51
18100: PUSH
18101: EMPTY
18102: LIST
18103: LIST
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: PPUSH
18109: CALL_OW 69
18113: PUSH
18114: LD_INT 0
18116: EQUAL
18117: IFFALSE 18140
// ComConstruct ( al_fac , ru_medium_wheeled , engine_combustion , control_computer , ru_cargo_bay ) ;
18119: LD_EXP 53
18123: PPUSH
18124: LD_INT 21
18126: PPUSH
18127: LD_INT 1
18129: PPUSH
18130: LD_INT 3
18132: PPUSH
18133: LD_INT 51
18135: PPUSH
18136: CALL_OW 125
// if al_force >= [ 6 , 7 , 8 ] [ Difficulty ] then
18140: LD_EXP 42
18144: PUSH
18145: LD_INT 6
18147: PUSH
18148: LD_INT 7
18150: PUSH
18151: LD_INT 8
18153: PUSH
18154: EMPTY
18155: LIST
18156: LIST
18157: LIST
18158: PUSH
18159: LD_OWVAR 67
18163: ARRAY
18164: GREATEREQUAL
18165: IFFALSE 18176
// RaiseSailEvent ( event_alliance_attack ) ;
18167: LD_EXP 22
18171: PPUSH
18172: CALL_OW 427
// end ;
18176: PPOPN 4
18178: END
// export function AllianceAttack ( ) ; var path , units ; begin
18179: LD_INT 0
18181: PPUSH
18182: PPUSH
18183: PPUSH
// units := al_force ;
18184: LD_ADDR_VAR 0 3
18188: PUSH
18189: LD_EXP 42
18193: ST_TO_ADDR
// al_force := [ ] ;
18194: LD_ADDR_EXP 42
18198: PUSH
18199: EMPTY
18200: ST_TO_ADDR
// if rand ( 0 , 1 ) then
18201: LD_INT 0
18203: PPUSH
18204: LD_INT 1
18206: PPUSH
18207: CALL_OW 12
18211: IFFALSE 18255
// path := [ [ 49 , 53 ] , [ 52 , 90 ] , [ 63 , 114 ] ] else
18213: LD_ADDR_VAR 0 2
18217: PUSH
18218: LD_INT 49
18220: PUSH
18221: LD_INT 53
18223: PUSH
18224: EMPTY
18225: LIST
18226: LIST
18227: PUSH
18228: LD_INT 52
18230: PUSH
18231: LD_INT 90
18233: PUSH
18234: EMPTY
18235: LIST
18236: LIST
18237: PUSH
18238: LD_INT 63
18240: PUSH
18241: LD_INT 114
18243: PUSH
18244: EMPTY
18245: LIST
18246: LIST
18247: PUSH
18248: EMPTY
18249: LIST
18250: LIST
18251: LIST
18252: ST_TO_ADDR
18253: GO 18284
// path := [ [ 89 , 52 ] , [ 143 , 50 ] ] ;
18255: LD_ADDR_VAR 0 2
18259: PUSH
18260: LD_INT 89
18262: PUSH
18263: LD_INT 52
18265: PUSH
18266: EMPTY
18267: LIST
18268: LIST
18269: PUSH
18270: LD_INT 143
18272: PUSH
18273: LD_INT 50
18275: PUSH
18276: EMPTY
18277: LIST
18278: LIST
18279: PUSH
18280: EMPTY
18281: LIST
18282: LIST
18283: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18284: LD_INT 35
18286: PPUSH
18287: CALL_OW 67
// AgressiveMove ( units , path ) ;
18291: LD_VAR 0 3
18295: PPUSH
18296: LD_VAR 0 2
18300: PPUSH
18301: CALL 75462 0 2
// until not UnitFilter ( units , [ f_ok ] ) ;
18305: LD_VAR 0 3
18309: PPUSH
18310: LD_INT 50
18312: PUSH
18313: EMPTY
18314: LIST
18315: PPUSH
18316: CALL_OW 72
18320: NOT
18321: IFFALSE 18284
// end ; end_of_file
18323: LD_VAR 0 1
18327: RET
// export ar_commander , ar_force , ar_skill ; export function PrepareArabian ; var i , filter , un , team ; begin
18328: LD_INT 0
18330: PPUSH
18331: PPUSH
18332: PPUSH
18333: PPUSH
18334: PPUSH
// ar_skill := [ 9 , 8 , 7 ] [ Difficulty ] ;
18335: LD_ADDR_EXP 57
18339: PUSH
18340: LD_INT 9
18342: PUSH
18343: LD_INT 8
18345: PUSH
18346: LD_INT 7
18348: PUSH
18349: EMPTY
18350: LIST
18351: LIST
18352: LIST
18353: PUSH
18354: LD_OWVAR 67
18358: ARRAY
18359: ST_TO_ADDR
// ar_force := [ ] ;
18360: LD_ADDR_EXP 56
18364: PUSH
18365: EMPTY
18366: ST_TO_ADDR
// RemoveAlliance ;
18367: CALL 16165 0 0
// RemoveEnvironmentArea ( evn ) ;
18371: LD_INT 17
18373: PPUSH
18374: CALL_OW 355
// your_side := 2 ;
18378: LD_ADDR_OWVAR 2
18382: PUSH
18383: LD_INT 2
18385: ST_TO_ADDR
// uc_side := 2 ;
18386: LD_ADDR_OWVAR 20
18390: PUSH
18391: LD_INT 2
18393: ST_TO_ADDR
// uc_nation := nation_arabian ;
18394: LD_ADDR_OWVAR 21
18398: PUSH
18399: LD_INT 2
18401: ST_TO_ADDR
// hc_gallery :=  ;
18402: LD_ADDR_OWVAR 33
18406: PUSH
18407: LD_STRING 
18409: ST_TO_ADDR
// hc_name :=  ;
18410: LD_ADDR_OWVAR 26
18414: PUSH
18415: LD_STRING 
18417: ST_TO_ADDR
// hc_importance := 0 ;
18418: LD_ADDR_OWVAR 32
18422: PUSH
18423: LD_INT 0
18425: ST_TO_ADDR
// for i = 1 to 20 do
18426: LD_ADDR_VAR 0 2
18430: PUSH
18431: DOUBLE
18432: LD_INT 1
18434: DEC
18435: ST_TO_ADDR
18436: LD_INT 20
18438: PUSH
18439: FOR_TO
18440: IFFALSE 18505
// begin PrepareHuman ( false , Rand ( 1 , 4 ) , ar_skill ) ;
18442: LD_INT 0
18444: PPUSH
18445: LD_INT 1
18447: PPUSH
18448: LD_INT 4
18450: PPUSH
18451: CALL_OW 12
18455: PPUSH
18456: LD_EXP 57
18460: PPUSH
18461: CALL_OW 380
// un := CreateHuman ;
18465: LD_ADDR_VAR 0 4
18469: PUSH
18470: CALL_OW 44
18474: ST_TO_ADDR
// SetDir ( un , 2 ) ;
18475: LD_VAR 0 4
18479: PPUSH
18480: LD_INT 2
18482: PPUSH
18483: CALL_OW 233
// ar_force := ar_force ^ un ;
18487: LD_ADDR_EXP 56
18491: PUSH
18492: LD_EXP 56
18496: PUSH
18497: LD_VAR 0 4
18501: ADD
18502: ST_TO_ADDR
// end ;
18503: GO 18439
18505: POP
18506: POP
// hc_importance := 100 ;
18507: LD_ADDR_OWVAR 32
18511: PUSH
18512: LD_INT 100
18514: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , ar_skill ) ;
18515: LD_INT 1
18517: PPUSH
18518: LD_INT 11
18520: PPUSH
18521: LD_EXP 57
18525: PPUSH
18526: CALL_OW 380
// ar_commander := CreateHuman ;
18530: LD_ADDR_EXP 55
18534: PUSH
18535: CALL_OW 44
18539: ST_TO_ADDR
// SetDir ( ar_commander , 2 ) ;
18540: LD_EXP 55
18544: PPUSH
18545: LD_INT 2
18547: PPUSH
18548: CALL_OW 233
// player_commander := ar_commander ;
18552: LD_ADDR_EXP 11
18556: PUSH
18557: LD_EXP 55
18561: ST_TO_ADDR
// team := CharacterSelection ( text , [ 14 , 13 , 12 ] [ Difficulty ] , [ 14 , 13 , 12 ] [ Difficulty ] , [ sel_dont_change_class , ar_commander , sel_not_hired , sel_changeable , sel_change_class ] ^ ar_force , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , class_mortar ] ) ;
18562: LD_ADDR_VAR 0 5
18566: PUSH
18567: LD_STRING text
18569: PPUSH
18570: LD_INT 14
18572: PUSH
18573: LD_INT 13
18575: PUSH
18576: LD_INT 12
18578: PUSH
18579: EMPTY
18580: LIST
18581: LIST
18582: LIST
18583: PUSH
18584: LD_OWVAR 67
18588: ARRAY
18589: PPUSH
18590: LD_INT 14
18592: PUSH
18593: LD_INT 13
18595: PUSH
18596: LD_INT 12
18598: PUSH
18599: EMPTY
18600: LIST
18601: LIST
18602: LIST
18603: PUSH
18604: LD_OWVAR 67
18608: ARRAY
18609: PPUSH
18610: LD_INT -6
18612: PUSH
18613: LD_EXP 55
18617: PUSH
18618: LD_INT -2
18620: PUSH
18621: LD_INT -3
18623: PUSH
18624: LD_INT -5
18626: PUSH
18627: EMPTY
18628: LIST
18629: LIST
18630: LIST
18631: LIST
18632: LIST
18633: PUSH
18634: LD_EXP 56
18638: ADD
18639: PPUSH
18640: LD_INT 1
18642: PUSH
18643: LD_INT 3
18645: PUSH
18646: LD_INT 2
18648: PUSH
18649: LD_INT 1
18651: PUSH
18652: EMPTY
18653: LIST
18654: LIST
18655: PUSH
18656: LD_INT 4
18658: PUSH
18659: LD_INT 1
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: PUSH
18666: LD_INT 8
18668: PUSH
18669: EMPTY
18670: LIST
18671: LIST
18672: LIST
18673: LIST
18674: LIST
18675: PPUSH
18676: CALL_OW 42
18680: ST_TO_ADDR
// team := team ^ ar_commander ;
18681: LD_ADDR_VAR 0 5
18685: PUSH
18686: LD_VAR 0 5
18690: PUSH
18691: LD_EXP 55
18695: ADD
18696: ST_TO_ADDR
// for i = 1 to 4 do
18697: LD_ADDR_VAR 0 2
18701: PUSH
18702: DOUBLE
18703: LD_INT 1
18705: DEC
18706: ST_TO_ADDR
18707: LD_INT 4
18709: PUSH
18710: FOR_TO
18711: IFFALSE 18813
// begin vc_chassis := ar_medium_trike ;
18713: LD_ADDR_OWVAR 37
18717: PUSH
18718: LD_INT 13
18720: ST_TO_ADDR
// vc_engine := engine_siberite ;
18721: LD_ADDR_OWVAR 39
18725: PUSH
18726: LD_INT 3
18728: ST_TO_ADDR
// vc_control := control_manual ;
18729: LD_ADDR_OWVAR 38
18733: PUSH
18734: LD_INT 1
18736: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_cargo_bay , ar_crane , ar_gun ] [ i ] ;
18737: LD_ADDR_OWVAR 40
18741: PUSH
18742: LD_INT 27
18744: PUSH
18745: LD_INT 32
18747: PUSH
18748: LD_EXP 64
18752: PUSH
18753: LD_INT 27
18755: PUSH
18756: EMPTY
18757: LIST
18758: LIST
18759: LIST
18760: LIST
18761: PUSH
18762: LD_VAR 0 2
18766: ARRAY
18767: ST_TO_ADDR
// un := CreateVehicle ;
18768: LD_ADDR_VAR 0 4
18772: PUSH
18773: CALL_OW 45
18777: ST_TO_ADDR
// SetDir ( un , 2 ) ;
18778: LD_VAR 0 4
18782: PPUSH
18783: LD_INT 2
18785: PPUSH
18786: CALL_OW 233
// PlaceUnitXYR ( un , 54 , 15 , 6 , false ) ;
18790: LD_VAR 0 4
18794: PPUSH
18795: LD_INT 54
18797: PPUSH
18798: LD_INT 15
18800: PPUSH
18801: LD_INT 6
18803: PPUSH
18804: LD_INT 0
18806: PPUSH
18807: CALL_OW 50
// end ;
18811: GO 18710
18813: POP
18814: POP
// for i = 1 to team do
18815: LD_ADDR_VAR 0 2
18819: PUSH
18820: DOUBLE
18821: LD_INT 1
18823: DEC
18824: ST_TO_ADDR
18825: LD_VAR 0 5
18829: PUSH
18830: FOR_TO
18831: IFFALSE 18928
// begin if FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) then
18833: LD_INT 22
18835: PUSH
18836: LD_INT 2
18838: PUSH
18839: EMPTY
18840: LIST
18841: LIST
18842: PUSH
18843: LD_INT 58
18845: PUSH
18846: EMPTY
18847: LIST
18848: PUSH
18849: EMPTY
18850: LIST
18851: LIST
18852: PPUSH
18853: CALL_OW 69
18857: IFFALSE 18905
// PlaceHumanInUnit ( team [ i ] , FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) [ 1 ] ) else
18859: LD_VAR 0 5
18863: PUSH
18864: LD_VAR 0 2
18868: ARRAY
18869: PPUSH
18870: LD_INT 22
18872: PUSH
18873: LD_INT 2
18875: PUSH
18876: EMPTY
18877: LIST
18878: LIST
18879: PUSH
18880: LD_INT 58
18882: PUSH
18883: EMPTY
18884: LIST
18885: PUSH
18886: EMPTY
18887: LIST
18888: LIST
18889: PPUSH
18890: CALL_OW 69
18894: PUSH
18895: LD_INT 1
18897: ARRAY
18898: PPUSH
18899: CALL_OW 52
18903: GO 18926
// PlaceUnitArea ( team [ i ] , center_resp , false ) ;
18905: LD_VAR 0 5
18909: PUSH
18910: LD_VAR 0 2
18914: ARRAY
18915: PPUSH
18916: LD_INT 16
18918: PPUSH
18919: LD_INT 0
18921: PPUSH
18922: CALL_OW 49
// end ;
18926: GO 18830
18928: POP
18929: POP
// uc_side := 0 ;
18930: LD_ADDR_OWVAR 20
18934: PUSH
18935: LD_INT 0
18937: ST_TO_ADDR
// uc_nation := 0 ;
18938: LD_ADDR_OWVAR 21
18942: PUSH
18943: LD_INT 0
18945: ST_TO_ADDR
// vc_chassis := 31 ;
18946: LD_ADDR_OWVAR 37
18950: PUSH
18951: LD_INT 31
18953: ST_TO_ADDR
// vc_control := control_rider ;
18954: LD_ADDR_OWVAR 38
18958: PUSH
18959: LD_INT 4
18961: ST_TO_ADDR
// PlaceUnitXY ( CreateVehicle , 96 , 20 , false ) ;
18962: CALL_OW 45
18966: PPUSH
18967: LD_INT 96
18969: PPUSH
18970: LD_INT 20
18972: PPUSH
18973: LD_INT 0
18975: PPUSH
18976: CALL_OW 48
// end ; end_of_file
18980: LD_VAR 0 1
18984: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
18985: LD_INT 0
18987: PPUSH
// ar_miner := 81 ;
18988: LD_ADDR_EXP 65
18992: PUSH
18993: LD_INT 81
18995: ST_TO_ADDR
// ar_crane := 88 ;
18996: LD_ADDR_EXP 64
19000: PUSH
19001: LD_INT 88
19003: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
19004: LD_ADDR_EXP 59
19008: PUSH
19009: LD_INT 89
19011: ST_TO_ADDR
// us_hack := 99 ;
19012: LD_ADDR_EXP 60
19016: PUSH
19017: LD_INT 99
19019: ST_TO_ADDR
// us_artillery := 97 ;
19020: LD_ADDR_EXP 61
19024: PUSH
19025: LD_INT 97
19027: ST_TO_ADDR
// ar_bio_bomb := 91 ;
19028: LD_ADDR_EXP 62
19032: PUSH
19033: LD_INT 91
19035: ST_TO_ADDR
// ar_mortar := 92 ;
19036: LD_ADDR_EXP 63
19040: PUSH
19041: LD_INT 92
19043: ST_TO_ADDR
// ru_radar := 98 ;
19044: LD_ADDR_EXP 58
19048: PUSH
19049: LD_INT 98
19051: ST_TO_ADDR
// tech_Artillery := 80 ;
19052: LD_ADDR_EXP 66
19056: PUSH
19057: LD_INT 80
19059: ST_TO_ADDR
// tech_RadMat := 81 ;
19060: LD_ADDR_EXP 67
19064: PUSH
19065: LD_INT 81
19067: ST_TO_ADDR
// tech_BasicTools := 82 ;
19068: LD_ADDR_EXP 68
19072: PUSH
19073: LD_INT 82
19075: ST_TO_ADDR
// tech_Cargo := 83 ;
19076: LD_ADDR_EXP 69
19080: PUSH
19081: LD_INT 83
19083: ST_TO_ADDR
// tech_Track := 84 ;
19084: LD_ADDR_EXP 70
19088: PUSH
19089: LD_INT 84
19091: ST_TO_ADDR
// tech_Crane := 85 ;
19092: LD_ADDR_EXP 71
19096: PUSH
19097: LD_INT 85
19099: ST_TO_ADDR
// tech_Bulldozer := 86 ;
19100: LD_ADDR_EXP 72
19104: PUSH
19105: LD_INT 86
19107: ST_TO_ADDR
// tech_Hovercraft := 87 ;
19108: LD_ADDR_EXP 73
19112: PUSH
19113: LD_INT 87
19115: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
19116: LD_ADDR_EXP 74
19120: PUSH
19121: LD_INT 88
19123: ST_TO_ADDR
// class_mastodont := 31 ;
19124: LD_ADDR_EXP 75
19128: PUSH
19129: LD_INT 31
19131: ST_TO_ADDR
// class_horse := 21 ;
19132: LD_ADDR_EXP 76
19136: PUSH
19137: LD_INT 21
19139: ST_TO_ADDR
// end ;
19140: LD_VAR 0 1
19144: RET
// every 1 do
19145: GO 19147
19147: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
19148: CALL 18985 0 0
19152: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19153: LD_INT 0
19155: PPUSH
// if p2 = 100 then
19156: LD_VAR 0 2
19160: PUSH
19161: LD_INT 100
19163: EQUAL
19164: IFFALSE 20113
// begin if not StreamModeActive then
19166: LD_EXP 77
19170: NOT
19171: IFFALSE 19181
// StreamModeActive := true ;
19173: LD_ADDR_EXP 77
19177: PUSH
19178: LD_INT 1
19180: ST_TO_ADDR
// if p3 = 0 then
19181: LD_VAR 0 3
19185: PUSH
19186: LD_INT 0
19188: EQUAL
19189: IFFALSE 19195
// InitStreamMode ;
19191: CALL 20273 0 0
// if p3 = 1 then
19195: LD_VAR 0 3
19199: PUSH
19200: LD_INT 1
19202: EQUAL
19203: IFFALSE 19213
// sRocket := true ;
19205: LD_ADDR_EXP 82
19209: PUSH
19210: LD_INT 1
19212: ST_TO_ADDR
// if p3 = 2 then
19213: LD_VAR 0 3
19217: PUSH
19218: LD_INT 2
19220: EQUAL
19221: IFFALSE 19231
// sSpeed := true ;
19223: LD_ADDR_EXP 81
19227: PUSH
19228: LD_INT 1
19230: ST_TO_ADDR
// if p3 = 3 then
19231: LD_VAR 0 3
19235: PUSH
19236: LD_INT 3
19238: EQUAL
19239: IFFALSE 19249
// sEngine := true ;
19241: LD_ADDR_EXP 83
19245: PUSH
19246: LD_INT 1
19248: ST_TO_ADDR
// if p3 = 4 then
19249: LD_VAR 0 3
19253: PUSH
19254: LD_INT 4
19256: EQUAL
19257: IFFALSE 19267
// sSpec := true ;
19259: LD_ADDR_EXP 80
19263: PUSH
19264: LD_INT 1
19266: ST_TO_ADDR
// if p3 = 5 then
19267: LD_VAR 0 3
19271: PUSH
19272: LD_INT 5
19274: EQUAL
19275: IFFALSE 19285
// sLevel := true ;
19277: LD_ADDR_EXP 84
19281: PUSH
19282: LD_INT 1
19284: ST_TO_ADDR
// if p3 = 6 then
19285: LD_VAR 0 3
19289: PUSH
19290: LD_INT 6
19292: EQUAL
19293: IFFALSE 19303
// sArmoury := true ;
19295: LD_ADDR_EXP 85
19299: PUSH
19300: LD_INT 1
19302: ST_TO_ADDR
// if p3 = 7 then
19303: LD_VAR 0 3
19307: PUSH
19308: LD_INT 7
19310: EQUAL
19311: IFFALSE 19321
// sRadar := true ;
19313: LD_ADDR_EXP 86
19317: PUSH
19318: LD_INT 1
19320: ST_TO_ADDR
// if p3 = 8 then
19321: LD_VAR 0 3
19325: PUSH
19326: LD_INT 8
19328: EQUAL
19329: IFFALSE 19339
// sBunker := true ;
19331: LD_ADDR_EXP 87
19335: PUSH
19336: LD_INT 1
19338: ST_TO_ADDR
// if p3 = 9 then
19339: LD_VAR 0 3
19343: PUSH
19344: LD_INT 9
19346: EQUAL
19347: IFFALSE 19357
// sHack := true ;
19349: LD_ADDR_EXP 88
19353: PUSH
19354: LD_INT 1
19356: ST_TO_ADDR
// if p3 = 10 then
19357: LD_VAR 0 3
19361: PUSH
19362: LD_INT 10
19364: EQUAL
19365: IFFALSE 19375
// sFire := true ;
19367: LD_ADDR_EXP 89
19371: PUSH
19372: LD_INT 1
19374: ST_TO_ADDR
// if p3 = 11 then
19375: LD_VAR 0 3
19379: PUSH
19380: LD_INT 11
19382: EQUAL
19383: IFFALSE 19393
// sRefresh := true ;
19385: LD_ADDR_EXP 90
19389: PUSH
19390: LD_INT 1
19392: ST_TO_ADDR
// if p3 = 12 then
19393: LD_VAR 0 3
19397: PUSH
19398: LD_INT 12
19400: EQUAL
19401: IFFALSE 19411
// sExp := true ;
19403: LD_ADDR_EXP 91
19407: PUSH
19408: LD_INT 1
19410: ST_TO_ADDR
// if p3 = 13 then
19411: LD_VAR 0 3
19415: PUSH
19416: LD_INT 13
19418: EQUAL
19419: IFFALSE 19429
// sDepot := true ;
19421: LD_ADDR_EXP 92
19425: PUSH
19426: LD_INT 1
19428: ST_TO_ADDR
// if p3 = 14 then
19429: LD_VAR 0 3
19433: PUSH
19434: LD_INT 14
19436: EQUAL
19437: IFFALSE 19447
// sFlag := true ;
19439: LD_ADDR_EXP 93
19443: PUSH
19444: LD_INT 1
19446: ST_TO_ADDR
// if p3 = 15 then
19447: LD_VAR 0 3
19451: PUSH
19452: LD_INT 15
19454: EQUAL
19455: IFFALSE 19465
// sKamikadze := true ;
19457: LD_ADDR_EXP 101
19461: PUSH
19462: LD_INT 1
19464: ST_TO_ADDR
// if p3 = 16 then
19465: LD_VAR 0 3
19469: PUSH
19470: LD_INT 16
19472: EQUAL
19473: IFFALSE 19483
// sTroll := true ;
19475: LD_ADDR_EXP 102
19479: PUSH
19480: LD_INT 1
19482: ST_TO_ADDR
// if p3 = 17 then
19483: LD_VAR 0 3
19487: PUSH
19488: LD_INT 17
19490: EQUAL
19491: IFFALSE 19501
// sSlow := true ;
19493: LD_ADDR_EXP 103
19497: PUSH
19498: LD_INT 1
19500: ST_TO_ADDR
// if p3 = 18 then
19501: LD_VAR 0 3
19505: PUSH
19506: LD_INT 18
19508: EQUAL
19509: IFFALSE 19519
// sLack := true ;
19511: LD_ADDR_EXP 104
19515: PUSH
19516: LD_INT 1
19518: ST_TO_ADDR
// if p3 = 19 then
19519: LD_VAR 0 3
19523: PUSH
19524: LD_INT 19
19526: EQUAL
19527: IFFALSE 19537
// sTank := true ;
19529: LD_ADDR_EXP 106
19533: PUSH
19534: LD_INT 1
19536: ST_TO_ADDR
// if p3 = 20 then
19537: LD_VAR 0 3
19541: PUSH
19542: LD_INT 20
19544: EQUAL
19545: IFFALSE 19555
// sRemote := true ;
19547: LD_ADDR_EXP 107
19551: PUSH
19552: LD_INT 1
19554: ST_TO_ADDR
// if p3 = 21 then
19555: LD_VAR 0 3
19559: PUSH
19560: LD_INT 21
19562: EQUAL
19563: IFFALSE 19573
// sPowell := true ;
19565: LD_ADDR_EXP 108
19569: PUSH
19570: LD_INT 1
19572: ST_TO_ADDR
// if p3 = 22 then
19573: LD_VAR 0 3
19577: PUSH
19578: LD_INT 22
19580: EQUAL
19581: IFFALSE 19591
// sTeleport := true ;
19583: LD_ADDR_EXP 111
19587: PUSH
19588: LD_INT 1
19590: ST_TO_ADDR
// if p3 = 23 then
19591: LD_VAR 0 3
19595: PUSH
19596: LD_INT 23
19598: EQUAL
19599: IFFALSE 19609
// sOilTower := true ;
19601: LD_ADDR_EXP 113
19605: PUSH
19606: LD_INT 1
19608: ST_TO_ADDR
// if p3 = 24 then
19609: LD_VAR 0 3
19613: PUSH
19614: LD_INT 24
19616: EQUAL
19617: IFFALSE 19627
// sShovel := true ;
19619: LD_ADDR_EXP 114
19623: PUSH
19624: LD_INT 1
19626: ST_TO_ADDR
// if p3 = 25 then
19627: LD_VAR 0 3
19631: PUSH
19632: LD_INT 25
19634: EQUAL
19635: IFFALSE 19645
// sSheik := true ;
19637: LD_ADDR_EXP 115
19641: PUSH
19642: LD_INT 1
19644: ST_TO_ADDR
// if p3 = 26 then
19645: LD_VAR 0 3
19649: PUSH
19650: LD_INT 26
19652: EQUAL
19653: IFFALSE 19663
// sEarthquake := true ;
19655: LD_ADDR_EXP 117
19659: PUSH
19660: LD_INT 1
19662: ST_TO_ADDR
// if p3 = 27 then
19663: LD_VAR 0 3
19667: PUSH
19668: LD_INT 27
19670: EQUAL
19671: IFFALSE 19681
// sAI := true ;
19673: LD_ADDR_EXP 118
19677: PUSH
19678: LD_INT 1
19680: ST_TO_ADDR
// if p3 = 28 then
19681: LD_VAR 0 3
19685: PUSH
19686: LD_INT 28
19688: EQUAL
19689: IFFALSE 19699
// sCargo := true ;
19691: LD_ADDR_EXP 121
19695: PUSH
19696: LD_INT 1
19698: ST_TO_ADDR
// if p3 = 29 then
19699: LD_VAR 0 3
19703: PUSH
19704: LD_INT 29
19706: EQUAL
19707: IFFALSE 19717
// sDLaser := true ;
19709: LD_ADDR_EXP 122
19713: PUSH
19714: LD_INT 1
19716: ST_TO_ADDR
// if p3 = 30 then
19717: LD_VAR 0 3
19721: PUSH
19722: LD_INT 30
19724: EQUAL
19725: IFFALSE 19735
// sExchange := true ;
19727: LD_ADDR_EXP 123
19731: PUSH
19732: LD_INT 1
19734: ST_TO_ADDR
// if p3 = 31 then
19735: LD_VAR 0 3
19739: PUSH
19740: LD_INT 31
19742: EQUAL
19743: IFFALSE 19753
// sFac := true ;
19745: LD_ADDR_EXP 124
19749: PUSH
19750: LD_INT 1
19752: ST_TO_ADDR
// if p3 = 32 then
19753: LD_VAR 0 3
19757: PUSH
19758: LD_INT 32
19760: EQUAL
19761: IFFALSE 19771
// sPower := true ;
19763: LD_ADDR_EXP 125
19767: PUSH
19768: LD_INT 1
19770: ST_TO_ADDR
// if p3 = 33 then
19771: LD_VAR 0 3
19775: PUSH
19776: LD_INT 33
19778: EQUAL
19779: IFFALSE 19789
// sRandom := true ;
19781: LD_ADDR_EXP 126
19785: PUSH
19786: LD_INT 1
19788: ST_TO_ADDR
// if p3 = 34 then
19789: LD_VAR 0 3
19793: PUSH
19794: LD_INT 34
19796: EQUAL
19797: IFFALSE 19807
// sShield := true ;
19799: LD_ADDR_EXP 127
19803: PUSH
19804: LD_INT 1
19806: ST_TO_ADDR
// if p3 = 35 then
19807: LD_VAR 0 3
19811: PUSH
19812: LD_INT 35
19814: EQUAL
19815: IFFALSE 19825
// sTime := true ;
19817: LD_ADDR_EXP 128
19821: PUSH
19822: LD_INT 1
19824: ST_TO_ADDR
// if p3 = 36 then
19825: LD_VAR 0 3
19829: PUSH
19830: LD_INT 36
19832: EQUAL
19833: IFFALSE 19843
// sTools := true ;
19835: LD_ADDR_EXP 129
19839: PUSH
19840: LD_INT 1
19842: ST_TO_ADDR
// if p3 = 101 then
19843: LD_VAR 0 3
19847: PUSH
19848: LD_INT 101
19850: EQUAL
19851: IFFALSE 19861
// sSold := true ;
19853: LD_ADDR_EXP 94
19857: PUSH
19858: LD_INT 1
19860: ST_TO_ADDR
// if p3 = 102 then
19861: LD_VAR 0 3
19865: PUSH
19866: LD_INT 102
19868: EQUAL
19869: IFFALSE 19879
// sDiff := true ;
19871: LD_ADDR_EXP 95
19875: PUSH
19876: LD_INT 1
19878: ST_TO_ADDR
// if p3 = 103 then
19879: LD_VAR 0 3
19883: PUSH
19884: LD_INT 103
19886: EQUAL
19887: IFFALSE 19897
// sFog := true ;
19889: LD_ADDR_EXP 98
19893: PUSH
19894: LD_INT 1
19896: ST_TO_ADDR
// if p3 = 104 then
19897: LD_VAR 0 3
19901: PUSH
19902: LD_INT 104
19904: EQUAL
19905: IFFALSE 19915
// sReset := true ;
19907: LD_ADDR_EXP 99
19911: PUSH
19912: LD_INT 1
19914: ST_TO_ADDR
// if p3 = 105 then
19915: LD_VAR 0 3
19919: PUSH
19920: LD_INT 105
19922: EQUAL
19923: IFFALSE 19933
// sSun := true ;
19925: LD_ADDR_EXP 100
19929: PUSH
19930: LD_INT 1
19932: ST_TO_ADDR
// if p3 = 106 then
19933: LD_VAR 0 3
19937: PUSH
19938: LD_INT 106
19940: EQUAL
19941: IFFALSE 19951
// sTiger := true ;
19943: LD_ADDR_EXP 96
19947: PUSH
19948: LD_INT 1
19950: ST_TO_ADDR
// if p3 = 107 then
19951: LD_VAR 0 3
19955: PUSH
19956: LD_INT 107
19958: EQUAL
19959: IFFALSE 19969
// sBomb := true ;
19961: LD_ADDR_EXP 97
19965: PUSH
19966: LD_INT 1
19968: ST_TO_ADDR
// if p3 = 108 then
19969: LD_VAR 0 3
19973: PUSH
19974: LD_INT 108
19976: EQUAL
19977: IFFALSE 19987
// sWound := true ;
19979: LD_ADDR_EXP 105
19983: PUSH
19984: LD_INT 1
19986: ST_TO_ADDR
// if p3 = 109 then
19987: LD_VAR 0 3
19991: PUSH
19992: LD_INT 109
19994: EQUAL
19995: IFFALSE 20005
// sBetray := true ;
19997: LD_ADDR_EXP 109
20001: PUSH
20002: LD_INT 1
20004: ST_TO_ADDR
// if p3 = 110 then
20005: LD_VAR 0 3
20009: PUSH
20010: LD_INT 110
20012: EQUAL
20013: IFFALSE 20023
// sContamin := true ;
20015: LD_ADDR_EXP 110
20019: PUSH
20020: LD_INT 1
20022: ST_TO_ADDR
// if p3 = 111 then
20023: LD_VAR 0 3
20027: PUSH
20028: LD_INT 111
20030: EQUAL
20031: IFFALSE 20041
// sOil := true ;
20033: LD_ADDR_EXP 112
20037: PUSH
20038: LD_INT 1
20040: ST_TO_ADDR
// if p3 = 112 then
20041: LD_VAR 0 3
20045: PUSH
20046: LD_INT 112
20048: EQUAL
20049: IFFALSE 20059
// sStu := true ;
20051: LD_ADDR_EXP 116
20055: PUSH
20056: LD_INT 1
20058: ST_TO_ADDR
// if p3 = 113 then
20059: LD_VAR 0 3
20063: PUSH
20064: LD_INT 113
20066: EQUAL
20067: IFFALSE 20077
// sBazooka := true ;
20069: LD_ADDR_EXP 119
20073: PUSH
20074: LD_INT 1
20076: ST_TO_ADDR
// if p3 = 114 then
20077: LD_VAR 0 3
20081: PUSH
20082: LD_INT 114
20084: EQUAL
20085: IFFALSE 20095
// sMortar := true ;
20087: LD_ADDR_EXP 120
20091: PUSH
20092: LD_INT 1
20094: ST_TO_ADDR
// if p3 = 115 then
20095: LD_VAR 0 3
20099: PUSH
20100: LD_INT 115
20102: EQUAL
20103: IFFALSE 20113
// sRanger := true ;
20105: LD_ADDR_EXP 130
20109: PUSH
20110: LD_INT 1
20112: ST_TO_ADDR
// end ; if p2 = 101 then
20113: LD_VAR 0 2
20117: PUSH
20118: LD_INT 101
20120: EQUAL
20121: IFFALSE 20249
// begin case p3 of 1 :
20123: LD_VAR 0 3
20127: PUSH
20128: LD_INT 1
20130: DOUBLE
20131: EQUAL
20132: IFTRUE 20136
20134: GO 20143
20136: POP
// hHackUnlimitedResources ; 2 :
20137: CALL 31286 0 0
20141: GO 20249
20143: LD_INT 2
20145: DOUBLE
20146: EQUAL
20147: IFTRUE 20151
20149: GO 20158
20151: POP
// hHackSetLevel10 ; 3 :
20152: CALL 31419 0 0
20156: GO 20249
20158: LD_INT 3
20160: DOUBLE
20161: EQUAL
20162: IFTRUE 20166
20164: GO 20173
20166: POP
// hHackSetLevel10YourUnits ; 4 :
20167: CALL 31504 0 0
20171: GO 20249
20173: LD_INT 4
20175: DOUBLE
20176: EQUAL
20177: IFTRUE 20181
20179: GO 20188
20181: POP
// hHackInvincible ; 5 :
20182: CALL 31952 0 0
20186: GO 20249
20188: LD_INT 5
20190: DOUBLE
20191: EQUAL
20192: IFTRUE 20196
20194: GO 20203
20196: POP
// hHackInvisible ; 6 :
20197: CALL 32063 0 0
20201: GO 20249
20203: LD_INT 6
20205: DOUBLE
20206: EQUAL
20207: IFTRUE 20211
20209: GO 20218
20211: POP
// hHackChangeYourSide ; 7 :
20212: CALL 32120 0 0
20216: GO 20249
20218: LD_INT 7
20220: DOUBLE
20221: EQUAL
20222: IFTRUE 20226
20224: GO 20233
20226: POP
// hHackChangeUnitSide ; 8 :
20227: CALL 32162 0 0
20231: GO 20249
20233: LD_INT 8
20235: DOUBLE
20236: EQUAL
20237: IFTRUE 20241
20239: GO 20248
20241: POP
// hHackFog ; end ;
20242: CALL 32263 0 0
20246: GO 20249
20248: POP
// end ; end ;
20249: LD_VAR 0 7
20253: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
20254: GO 20256
20256: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20257: LD_STRING initStreamRollete();
20259: PPUSH
20260: CALL_OW 559
// InitStreamMode ;
20264: CALL 20273 0 0
// DefineStreamItems ( ) ;
20268: CALL 20713 0 0
// end ;
20272: END
// function InitStreamMode ; begin
20273: LD_INT 0
20275: PPUSH
// streamModeActive := false ;
20276: LD_ADDR_EXP 77
20280: PUSH
20281: LD_INT 0
20283: ST_TO_ADDR
// normalCounter := 36 ;
20284: LD_ADDR_EXP 78
20288: PUSH
20289: LD_INT 36
20291: ST_TO_ADDR
// hardcoreCounter := 16 ;
20292: LD_ADDR_EXP 79
20296: PUSH
20297: LD_INT 16
20299: ST_TO_ADDR
// sRocket := false ;
20300: LD_ADDR_EXP 82
20304: PUSH
20305: LD_INT 0
20307: ST_TO_ADDR
// sSpeed := false ;
20308: LD_ADDR_EXP 81
20312: PUSH
20313: LD_INT 0
20315: ST_TO_ADDR
// sEngine := false ;
20316: LD_ADDR_EXP 83
20320: PUSH
20321: LD_INT 0
20323: ST_TO_ADDR
// sSpec := false ;
20324: LD_ADDR_EXP 80
20328: PUSH
20329: LD_INT 0
20331: ST_TO_ADDR
// sLevel := false ;
20332: LD_ADDR_EXP 84
20336: PUSH
20337: LD_INT 0
20339: ST_TO_ADDR
// sArmoury := false ;
20340: LD_ADDR_EXP 85
20344: PUSH
20345: LD_INT 0
20347: ST_TO_ADDR
// sRadar := false ;
20348: LD_ADDR_EXP 86
20352: PUSH
20353: LD_INT 0
20355: ST_TO_ADDR
// sBunker := false ;
20356: LD_ADDR_EXP 87
20360: PUSH
20361: LD_INT 0
20363: ST_TO_ADDR
// sHack := false ;
20364: LD_ADDR_EXP 88
20368: PUSH
20369: LD_INT 0
20371: ST_TO_ADDR
// sFire := false ;
20372: LD_ADDR_EXP 89
20376: PUSH
20377: LD_INT 0
20379: ST_TO_ADDR
// sRefresh := false ;
20380: LD_ADDR_EXP 90
20384: PUSH
20385: LD_INT 0
20387: ST_TO_ADDR
// sExp := false ;
20388: LD_ADDR_EXP 91
20392: PUSH
20393: LD_INT 0
20395: ST_TO_ADDR
// sDepot := false ;
20396: LD_ADDR_EXP 92
20400: PUSH
20401: LD_INT 0
20403: ST_TO_ADDR
// sFlag := false ;
20404: LD_ADDR_EXP 93
20408: PUSH
20409: LD_INT 0
20411: ST_TO_ADDR
// sKamikadze := false ;
20412: LD_ADDR_EXP 101
20416: PUSH
20417: LD_INT 0
20419: ST_TO_ADDR
// sTroll := false ;
20420: LD_ADDR_EXP 102
20424: PUSH
20425: LD_INT 0
20427: ST_TO_ADDR
// sSlow := false ;
20428: LD_ADDR_EXP 103
20432: PUSH
20433: LD_INT 0
20435: ST_TO_ADDR
// sLack := false ;
20436: LD_ADDR_EXP 104
20440: PUSH
20441: LD_INT 0
20443: ST_TO_ADDR
// sTank := false ;
20444: LD_ADDR_EXP 106
20448: PUSH
20449: LD_INT 0
20451: ST_TO_ADDR
// sRemote := false ;
20452: LD_ADDR_EXP 107
20456: PUSH
20457: LD_INT 0
20459: ST_TO_ADDR
// sPowell := false ;
20460: LD_ADDR_EXP 108
20464: PUSH
20465: LD_INT 0
20467: ST_TO_ADDR
// sTeleport := false ;
20468: LD_ADDR_EXP 111
20472: PUSH
20473: LD_INT 0
20475: ST_TO_ADDR
// sOilTower := false ;
20476: LD_ADDR_EXP 113
20480: PUSH
20481: LD_INT 0
20483: ST_TO_ADDR
// sShovel := false ;
20484: LD_ADDR_EXP 114
20488: PUSH
20489: LD_INT 0
20491: ST_TO_ADDR
// sSheik := false ;
20492: LD_ADDR_EXP 115
20496: PUSH
20497: LD_INT 0
20499: ST_TO_ADDR
// sEarthquake := false ;
20500: LD_ADDR_EXP 117
20504: PUSH
20505: LD_INT 0
20507: ST_TO_ADDR
// sAI := false ;
20508: LD_ADDR_EXP 118
20512: PUSH
20513: LD_INT 0
20515: ST_TO_ADDR
// sCargo := false ;
20516: LD_ADDR_EXP 121
20520: PUSH
20521: LD_INT 0
20523: ST_TO_ADDR
// sDLaser := false ;
20524: LD_ADDR_EXP 122
20528: PUSH
20529: LD_INT 0
20531: ST_TO_ADDR
// sExchange := false ;
20532: LD_ADDR_EXP 123
20536: PUSH
20537: LD_INT 0
20539: ST_TO_ADDR
// sFac := false ;
20540: LD_ADDR_EXP 124
20544: PUSH
20545: LD_INT 0
20547: ST_TO_ADDR
// sPower := false ;
20548: LD_ADDR_EXP 125
20552: PUSH
20553: LD_INT 0
20555: ST_TO_ADDR
// sRandom := false ;
20556: LD_ADDR_EXP 126
20560: PUSH
20561: LD_INT 0
20563: ST_TO_ADDR
// sShield := false ;
20564: LD_ADDR_EXP 127
20568: PUSH
20569: LD_INT 0
20571: ST_TO_ADDR
// sTime := false ;
20572: LD_ADDR_EXP 128
20576: PUSH
20577: LD_INT 0
20579: ST_TO_ADDR
// sTools := false ;
20580: LD_ADDR_EXP 129
20584: PUSH
20585: LD_INT 0
20587: ST_TO_ADDR
// sSold := false ;
20588: LD_ADDR_EXP 94
20592: PUSH
20593: LD_INT 0
20595: ST_TO_ADDR
// sDiff := false ;
20596: LD_ADDR_EXP 95
20600: PUSH
20601: LD_INT 0
20603: ST_TO_ADDR
// sFog := false ;
20604: LD_ADDR_EXP 98
20608: PUSH
20609: LD_INT 0
20611: ST_TO_ADDR
// sReset := false ;
20612: LD_ADDR_EXP 99
20616: PUSH
20617: LD_INT 0
20619: ST_TO_ADDR
// sSun := false ;
20620: LD_ADDR_EXP 100
20624: PUSH
20625: LD_INT 0
20627: ST_TO_ADDR
// sTiger := false ;
20628: LD_ADDR_EXP 96
20632: PUSH
20633: LD_INT 0
20635: ST_TO_ADDR
// sBomb := false ;
20636: LD_ADDR_EXP 97
20640: PUSH
20641: LD_INT 0
20643: ST_TO_ADDR
// sWound := false ;
20644: LD_ADDR_EXP 105
20648: PUSH
20649: LD_INT 0
20651: ST_TO_ADDR
// sBetray := false ;
20652: LD_ADDR_EXP 109
20656: PUSH
20657: LD_INT 0
20659: ST_TO_ADDR
// sContamin := false ;
20660: LD_ADDR_EXP 110
20664: PUSH
20665: LD_INT 0
20667: ST_TO_ADDR
// sOil := false ;
20668: LD_ADDR_EXP 112
20672: PUSH
20673: LD_INT 0
20675: ST_TO_ADDR
// sStu := false ;
20676: LD_ADDR_EXP 116
20680: PUSH
20681: LD_INT 0
20683: ST_TO_ADDR
// sBazooka := false ;
20684: LD_ADDR_EXP 119
20688: PUSH
20689: LD_INT 0
20691: ST_TO_ADDR
// sMortar := false ;
20692: LD_ADDR_EXP 120
20696: PUSH
20697: LD_INT 0
20699: ST_TO_ADDR
// sRanger := false ;
20700: LD_ADDR_EXP 130
20704: PUSH
20705: LD_INT 0
20707: ST_TO_ADDR
// end ;
20708: LD_VAR 0 1
20712: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
20713: LD_INT 0
20715: PPUSH
20716: PPUSH
20717: PPUSH
20718: PPUSH
20719: PPUSH
// result := [ ] ;
20720: LD_ADDR_VAR 0 1
20724: PUSH
20725: EMPTY
20726: ST_TO_ADDR
// if campaign_id = 1 then
20727: LD_OWVAR 69
20731: PUSH
20732: LD_INT 1
20734: EQUAL
20735: IFFALSE 23673
// begin case mission_number of 1 :
20737: LD_OWVAR 70
20741: PUSH
20742: LD_INT 1
20744: DOUBLE
20745: EQUAL
20746: IFTRUE 20750
20748: GO 20814
20750: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
20751: LD_ADDR_VAR 0 1
20755: PUSH
20756: LD_INT 2
20758: PUSH
20759: LD_INT 4
20761: PUSH
20762: LD_INT 11
20764: PUSH
20765: LD_INT 12
20767: PUSH
20768: LD_INT 15
20770: PUSH
20771: LD_INT 16
20773: PUSH
20774: LD_INT 22
20776: PUSH
20777: LD_INT 23
20779: PUSH
20780: LD_INT 26
20782: PUSH
20783: EMPTY
20784: LIST
20785: LIST
20786: LIST
20787: LIST
20788: LIST
20789: LIST
20790: LIST
20791: LIST
20792: LIST
20793: PUSH
20794: LD_INT 101
20796: PUSH
20797: LD_INT 102
20799: PUSH
20800: LD_INT 106
20802: PUSH
20803: EMPTY
20804: LIST
20805: LIST
20806: LIST
20807: PUSH
20808: EMPTY
20809: LIST
20810: LIST
20811: ST_TO_ADDR
20812: GO 23671
20814: LD_INT 2
20816: DOUBLE
20817: EQUAL
20818: IFTRUE 20822
20820: GO 20894
20822: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
20823: LD_ADDR_VAR 0 1
20827: PUSH
20828: LD_INT 2
20830: PUSH
20831: LD_INT 4
20833: PUSH
20834: LD_INT 11
20836: PUSH
20837: LD_INT 12
20839: PUSH
20840: LD_INT 15
20842: PUSH
20843: LD_INT 16
20845: PUSH
20846: LD_INT 22
20848: PUSH
20849: LD_INT 23
20851: PUSH
20852: LD_INT 26
20854: PUSH
20855: EMPTY
20856: LIST
20857: LIST
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: LIST
20865: PUSH
20866: LD_INT 101
20868: PUSH
20869: LD_INT 102
20871: PUSH
20872: LD_INT 105
20874: PUSH
20875: LD_INT 106
20877: PUSH
20878: LD_INT 108
20880: PUSH
20881: EMPTY
20882: LIST
20883: LIST
20884: LIST
20885: LIST
20886: LIST
20887: PUSH
20888: EMPTY
20889: LIST
20890: LIST
20891: ST_TO_ADDR
20892: GO 23671
20894: LD_INT 3
20896: DOUBLE
20897: EQUAL
20898: IFTRUE 20902
20900: GO 20978
20902: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
20903: LD_ADDR_VAR 0 1
20907: PUSH
20908: LD_INT 2
20910: PUSH
20911: LD_INT 4
20913: PUSH
20914: LD_INT 5
20916: PUSH
20917: LD_INT 11
20919: PUSH
20920: LD_INT 12
20922: PUSH
20923: LD_INT 15
20925: PUSH
20926: LD_INT 16
20928: PUSH
20929: LD_INT 22
20931: PUSH
20932: LD_INT 26
20934: PUSH
20935: LD_INT 36
20937: PUSH
20938: EMPTY
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: PUSH
20950: LD_INT 101
20952: PUSH
20953: LD_INT 102
20955: PUSH
20956: LD_INT 105
20958: PUSH
20959: LD_INT 106
20961: PUSH
20962: LD_INT 108
20964: PUSH
20965: EMPTY
20966: LIST
20967: LIST
20968: LIST
20969: LIST
20970: LIST
20971: PUSH
20972: EMPTY
20973: LIST
20974: LIST
20975: ST_TO_ADDR
20976: GO 23671
20978: LD_INT 4
20980: DOUBLE
20981: EQUAL
20982: IFTRUE 20986
20984: GO 21070
20986: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
20987: LD_ADDR_VAR 0 1
20991: PUSH
20992: LD_INT 2
20994: PUSH
20995: LD_INT 4
20997: PUSH
20998: LD_INT 5
21000: PUSH
21001: LD_INT 8
21003: PUSH
21004: LD_INT 11
21006: PUSH
21007: LD_INT 12
21009: PUSH
21010: LD_INT 15
21012: PUSH
21013: LD_INT 16
21015: PUSH
21016: LD_INT 22
21018: PUSH
21019: LD_INT 23
21021: PUSH
21022: LD_INT 26
21024: PUSH
21025: LD_INT 36
21027: PUSH
21028: EMPTY
21029: LIST
21030: LIST
21031: LIST
21032: LIST
21033: LIST
21034: LIST
21035: LIST
21036: LIST
21037: LIST
21038: LIST
21039: LIST
21040: LIST
21041: PUSH
21042: LD_INT 101
21044: PUSH
21045: LD_INT 102
21047: PUSH
21048: LD_INT 105
21050: PUSH
21051: LD_INT 106
21053: PUSH
21054: LD_INT 108
21056: PUSH
21057: EMPTY
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: PUSH
21064: EMPTY
21065: LIST
21066: LIST
21067: ST_TO_ADDR
21068: GO 23671
21070: LD_INT 5
21072: DOUBLE
21073: EQUAL
21074: IFTRUE 21078
21076: GO 21178
21078: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
21079: LD_ADDR_VAR 0 1
21083: PUSH
21084: LD_INT 2
21086: PUSH
21087: LD_INT 4
21089: PUSH
21090: LD_INT 5
21092: PUSH
21093: LD_INT 6
21095: PUSH
21096: LD_INT 8
21098: PUSH
21099: LD_INT 11
21101: PUSH
21102: LD_INT 12
21104: PUSH
21105: LD_INT 15
21107: PUSH
21108: LD_INT 16
21110: PUSH
21111: LD_INT 22
21113: PUSH
21114: LD_INT 23
21116: PUSH
21117: LD_INT 25
21119: PUSH
21120: LD_INT 26
21122: PUSH
21123: LD_INT 36
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: LIST
21130: LIST
21131: LIST
21132: LIST
21133: LIST
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: PUSH
21142: LD_INT 101
21144: PUSH
21145: LD_INT 102
21147: PUSH
21148: LD_INT 105
21150: PUSH
21151: LD_INT 106
21153: PUSH
21154: LD_INT 108
21156: PUSH
21157: LD_INT 109
21159: PUSH
21160: LD_INT 112
21162: PUSH
21163: EMPTY
21164: LIST
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: LIST
21170: LIST
21171: PUSH
21172: EMPTY
21173: LIST
21174: LIST
21175: ST_TO_ADDR
21176: GO 23671
21178: LD_INT 6
21180: DOUBLE
21181: EQUAL
21182: IFTRUE 21186
21184: GO 21306
21186: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
21187: LD_ADDR_VAR 0 1
21191: PUSH
21192: LD_INT 2
21194: PUSH
21195: LD_INT 4
21197: PUSH
21198: LD_INT 5
21200: PUSH
21201: LD_INT 6
21203: PUSH
21204: LD_INT 8
21206: PUSH
21207: LD_INT 11
21209: PUSH
21210: LD_INT 12
21212: PUSH
21213: LD_INT 15
21215: PUSH
21216: LD_INT 16
21218: PUSH
21219: LD_INT 20
21221: PUSH
21222: LD_INT 21
21224: PUSH
21225: LD_INT 22
21227: PUSH
21228: LD_INT 23
21230: PUSH
21231: LD_INT 25
21233: PUSH
21234: LD_INT 26
21236: PUSH
21237: LD_INT 30
21239: PUSH
21240: LD_INT 31
21242: PUSH
21243: LD_INT 32
21245: PUSH
21246: LD_INT 36
21248: PUSH
21249: EMPTY
21250: LIST
21251: LIST
21252: LIST
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: LIST
21269: PUSH
21270: LD_INT 101
21272: PUSH
21273: LD_INT 102
21275: PUSH
21276: LD_INT 105
21278: PUSH
21279: LD_INT 106
21281: PUSH
21282: LD_INT 108
21284: PUSH
21285: LD_INT 109
21287: PUSH
21288: LD_INT 112
21290: PUSH
21291: EMPTY
21292: LIST
21293: LIST
21294: LIST
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: PUSH
21300: EMPTY
21301: LIST
21302: LIST
21303: ST_TO_ADDR
21304: GO 23671
21306: LD_INT 7
21308: DOUBLE
21309: EQUAL
21310: IFTRUE 21314
21312: GO 21414
21314: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
21315: LD_ADDR_VAR 0 1
21319: PUSH
21320: LD_INT 2
21322: PUSH
21323: LD_INT 4
21325: PUSH
21326: LD_INT 5
21328: PUSH
21329: LD_INT 7
21331: PUSH
21332: LD_INT 11
21334: PUSH
21335: LD_INT 12
21337: PUSH
21338: LD_INT 15
21340: PUSH
21341: LD_INT 16
21343: PUSH
21344: LD_INT 20
21346: PUSH
21347: LD_INT 21
21349: PUSH
21350: LD_INT 22
21352: PUSH
21353: LD_INT 23
21355: PUSH
21356: LD_INT 25
21358: PUSH
21359: LD_INT 26
21361: PUSH
21362: EMPTY
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: PUSH
21378: LD_INT 101
21380: PUSH
21381: LD_INT 102
21383: PUSH
21384: LD_INT 103
21386: PUSH
21387: LD_INT 105
21389: PUSH
21390: LD_INT 106
21392: PUSH
21393: LD_INT 108
21395: PUSH
21396: LD_INT 112
21398: PUSH
21399: EMPTY
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: PUSH
21408: EMPTY
21409: LIST
21410: LIST
21411: ST_TO_ADDR
21412: GO 23671
21414: LD_INT 8
21416: DOUBLE
21417: EQUAL
21418: IFTRUE 21422
21420: GO 21550
21422: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
21423: LD_ADDR_VAR 0 1
21427: PUSH
21428: LD_INT 2
21430: PUSH
21431: LD_INT 4
21433: PUSH
21434: LD_INT 5
21436: PUSH
21437: LD_INT 6
21439: PUSH
21440: LD_INT 7
21442: PUSH
21443: LD_INT 8
21445: PUSH
21446: LD_INT 11
21448: PUSH
21449: LD_INT 12
21451: PUSH
21452: LD_INT 15
21454: PUSH
21455: LD_INT 16
21457: PUSH
21458: LD_INT 20
21460: PUSH
21461: LD_INT 21
21463: PUSH
21464: LD_INT 22
21466: PUSH
21467: LD_INT 23
21469: PUSH
21470: LD_INT 25
21472: PUSH
21473: LD_INT 26
21475: PUSH
21476: LD_INT 30
21478: PUSH
21479: LD_INT 31
21481: PUSH
21482: LD_INT 32
21484: PUSH
21485: LD_INT 36
21487: PUSH
21488: EMPTY
21489: LIST
21490: LIST
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: LIST
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: PUSH
21510: LD_INT 101
21512: PUSH
21513: LD_INT 102
21515: PUSH
21516: LD_INT 103
21518: PUSH
21519: LD_INT 105
21521: PUSH
21522: LD_INT 106
21524: PUSH
21525: LD_INT 108
21527: PUSH
21528: LD_INT 109
21530: PUSH
21531: LD_INT 112
21533: PUSH
21534: EMPTY
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: PUSH
21544: EMPTY
21545: LIST
21546: LIST
21547: ST_TO_ADDR
21548: GO 23671
21550: LD_INT 9
21552: DOUBLE
21553: EQUAL
21554: IFTRUE 21558
21556: GO 21694
21558: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
21559: LD_ADDR_VAR 0 1
21563: PUSH
21564: LD_INT 2
21566: PUSH
21567: LD_INT 4
21569: PUSH
21570: LD_INT 5
21572: PUSH
21573: LD_INT 6
21575: PUSH
21576: LD_INT 7
21578: PUSH
21579: LD_INT 8
21581: PUSH
21582: LD_INT 11
21584: PUSH
21585: LD_INT 12
21587: PUSH
21588: LD_INT 15
21590: PUSH
21591: LD_INT 16
21593: PUSH
21594: LD_INT 20
21596: PUSH
21597: LD_INT 21
21599: PUSH
21600: LD_INT 22
21602: PUSH
21603: LD_INT 23
21605: PUSH
21606: LD_INT 25
21608: PUSH
21609: LD_INT 26
21611: PUSH
21612: LD_INT 28
21614: PUSH
21615: LD_INT 30
21617: PUSH
21618: LD_INT 31
21620: PUSH
21621: LD_INT 32
21623: PUSH
21624: LD_INT 36
21626: PUSH
21627: EMPTY
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: PUSH
21650: LD_INT 101
21652: PUSH
21653: LD_INT 102
21655: PUSH
21656: LD_INT 103
21658: PUSH
21659: LD_INT 105
21661: PUSH
21662: LD_INT 106
21664: PUSH
21665: LD_INT 108
21667: PUSH
21668: LD_INT 109
21670: PUSH
21671: LD_INT 112
21673: PUSH
21674: LD_INT 114
21676: PUSH
21677: EMPTY
21678: LIST
21679: LIST
21680: LIST
21681: LIST
21682: LIST
21683: LIST
21684: LIST
21685: LIST
21686: LIST
21687: PUSH
21688: EMPTY
21689: LIST
21690: LIST
21691: ST_TO_ADDR
21692: GO 23671
21694: LD_INT 10
21696: DOUBLE
21697: EQUAL
21698: IFTRUE 21702
21700: GO 21886
21702: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
21703: LD_ADDR_VAR 0 1
21707: PUSH
21708: LD_INT 2
21710: PUSH
21711: LD_INT 4
21713: PUSH
21714: LD_INT 5
21716: PUSH
21717: LD_INT 6
21719: PUSH
21720: LD_INT 7
21722: PUSH
21723: LD_INT 8
21725: PUSH
21726: LD_INT 9
21728: PUSH
21729: LD_INT 10
21731: PUSH
21732: LD_INT 11
21734: PUSH
21735: LD_INT 12
21737: PUSH
21738: LD_INT 13
21740: PUSH
21741: LD_INT 14
21743: PUSH
21744: LD_INT 15
21746: PUSH
21747: LD_INT 16
21749: PUSH
21750: LD_INT 17
21752: PUSH
21753: LD_INT 18
21755: PUSH
21756: LD_INT 19
21758: PUSH
21759: LD_INT 20
21761: PUSH
21762: LD_INT 21
21764: PUSH
21765: LD_INT 22
21767: PUSH
21768: LD_INT 23
21770: PUSH
21771: LD_INT 24
21773: PUSH
21774: LD_INT 25
21776: PUSH
21777: LD_INT 26
21779: PUSH
21780: LD_INT 28
21782: PUSH
21783: LD_INT 30
21785: PUSH
21786: LD_INT 31
21788: PUSH
21789: LD_INT 32
21791: PUSH
21792: LD_INT 36
21794: PUSH
21795: EMPTY
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: PUSH
21826: LD_INT 101
21828: PUSH
21829: LD_INT 102
21831: PUSH
21832: LD_INT 103
21834: PUSH
21835: LD_INT 104
21837: PUSH
21838: LD_INT 105
21840: PUSH
21841: LD_INT 106
21843: PUSH
21844: LD_INT 107
21846: PUSH
21847: LD_INT 108
21849: PUSH
21850: LD_INT 109
21852: PUSH
21853: LD_INT 110
21855: PUSH
21856: LD_INT 111
21858: PUSH
21859: LD_INT 112
21861: PUSH
21862: LD_INT 114
21864: PUSH
21865: EMPTY
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: PUSH
21880: EMPTY
21881: LIST
21882: LIST
21883: ST_TO_ADDR
21884: GO 23671
21886: LD_INT 11
21888: DOUBLE
21889: EQUAL
21890: IFTRUE 21894
21892: GO 22086
21894: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
21895: LD_ADDR_VAR 0 1
21899: PUSH
21900: LD_INT 2
21902: PUSH
21903: LD_INT 3
21905: PUSH
21906: LD_INT 4
21908: PUSH
21909: LD_INT 5
21911: PUSH
21912: LD_INT 6
21914: PUSH
21915: LD_INT 7
21917: PUSH
21918: LD_INT 8
21920: PUSH
21921: LD_INT 9
21923: PUSH
21924: LD_INT 10
21926: PUSH
21927: LD_INT 11
21929: PUSH
21930: LD_INT 12
21932: PUSH
21933: LD_INT 13
21935: PUSH
21936: LD_INT 14
21938: PUSH
21939: LD_INT 15
21941: PUSH
21942: LD_INT 16
21944: PUSH
21945: LD_INT 17
21947: PUSH
21948: LD_INT 18
21950: PUSH
21951: LD_INT 19
21953: PUSH
21954: LD_INT 20
21956: PUSH
21957: LD_INT 21
21959: PUSH
21960: LD_INT 22
21962: PUSH
21963: LD_INT 23
21965: PUSH
21966: LD_INT 24
21968: PUSH
21969: LD_INT 25
21971: PUSH
21972: LD_INT 26
21974: PUSH
21975: LD_INT 28
21977: PUSH
21978: LD_INT 30
21980: PUSH
21981: LD_INT 31
21983: PUSH
21984: LD_INT 32
21986: PUSH
21987: LD_INT 34
21989: PUSH
21990: LD_INT 36
21992: PUSH
21993: EMPTY
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: PUSH
22026: LD_INT 101
22028: PUSH
22029: LD_INT 102
22031: PUSH
22032: LD_INT 103
22034: PUSH
22035: LD_INT 104
22037: PUSH
22038: LD_INT 105
22040: PUSH
22041: LD_INT 106
22043: PUSH
22044: LD_INT 107
22046: PUSH
22047: LD_INT 108
22049: PUSH
22050: LD_INT 109
22052: PUSH
22053: LD_INT 110
22055: PUSH
22056: LD_INT 111
22058: PUSH
22059: LD_INT 112
22061: PUSH
22062: LD_INT 114
22064: PUSH
22065: EMPTY
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: PUSH
22080: EMPTY
22081: LIST
22082: LIST
22083: ST_TO_ADDR
22084: GO 23671
22086: LD_INT 12
22088: DOUBLE
22089: EQUAL
22090: IFTRUE 22094
22092: GO 22302
22094: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
22095: LD_ADDR_VAR 0 1
22099: PUSH
22100: LD_INT 1
22102: PUSH
22103: LD_INT 2
22105: PUSH
22106: LD_INT 3
22108: PUSH
22109: LD_INT 4
22111: PUSH
22112: LD_INT 5
22114: PUSH
22115: LD_INT 6
22117: PUSH
22118: LD_INT 7
22120: PUSH
22121: LD_INT 8
22123: PUSH
22124: LD_INT 9
22126: PUSH
22127: LD_INT 10
22129: PUSH
22130: LD_INT 11
22132: PUSH
22133: LD_INT 12
22135: PUSH
22136: LD_INT 13
22138: PUSH
22139: LD_INT 14
22141: PUSH
22142: LD_INT 15
22144: PUSH
22145: LD_INT 16
22147: PUSH
22148: LD_INT 17
22150: PUSH
22151: LD_INT 18
22153: PUSH
22154: LD_INT 19
22156: PUSH
22157: LD_INT 20
22159: PUSH
22160: LD_INT 21
22162: PUSH
22163: LD_INT 22
22165: PUSH
22166: LD_INT 23
22168: PUSH
22169: LD_INT 24
22171: PUSH
22172: LD_INT 25
22174: PUSH
22175: LD_INT 26
22177: PUSH
22178: LD_INT 27
22180: PUSH
22181: LD_INT 28
22183: PUSH
22184: LD_INT 30
22186: PUSH
22187: LD_INT 31
22189: PUSH
22190: LD_INT 32
22192: PUSH
22193: LD_INT 33
22195: PUSH
22196: LD_INT 34
22198: PUSH
22199: LD_INT 36
22201: PUSH
22202: EMPTY
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: PUSH
22238: LD_INT 101
22240: PUSH
22241: LD_INT 102
22243: PUSH
22244: LD_INT 103
22246: PUSH
22247: LD_INT 104
22249: PUSH
22250: LD_INT 105
22252: PUSH
22253: LD_INT 106
22255: PUSH
22256: LD_INT 107
22258: PUSH
22259: LD_INT 108
22261: PUSH
22262: LD_INT 109
22264: PUSH
22265: LD_INT 110
22267: PUSH
22268: LD_INT 111
22270: PUSH
22271: LD_INT 112
22273: PUSH
22274: LD_INT 113
22276: PUSH
22277: LD_INT 114
22279: PUSH
22280: EMPTY
22281: LIST
22282: LIST
22283: LIST
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: PUSH
22296: EMPTY
22297: LIST
22298: LIST
22299: ST_TO_ADDR
22300: GO 23671
22302: LD_INT 13
22304: DOUBLE
22305: EQUAL
22306: IFTRUE 22310
22308: GO 22506
22310: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
22311: LD_ADDR_VAR 0 1
22315: PUSH
22316: LD_INT 1
22318: PUSH
22319: LD_INT 2
22321: PUSH
22322: LD_INT 3
22324: PUSH
22325: LD_INT 4
22327: PUSH
22328: LD_INT 5
22330: PUSH
22331: LD_INT 8
22333: PUSH
22334: LD_INT 9
22336: PUSH
22337: LD_INT 10
22339: PUSH
22340: LD_INT 11
22342: PUSH
22343: LD_INT 12
22345: PUSH
22346: LD_INT 14
22348: PUSH
22349: LD_INT 15
22351: PUSH
22352: LD_INT 16
22354: PUSH
22355: LD_INT 17
22357: PUSH
22358: LD_INT 18
22360: PUSH
22361: LD_INT 19
22363: PUSH
22364: LD_INT 20
22366: PUSH
22367: LD_INT 21
22369: PUSH
22370: LD_INT 22
22372: PUSH
22373: LD_INT 23
22375: PUSH
22376: LD_INT 24
22378: PUSH
22379: LD_INT 25
22381: PUSH
22382: LD_INT 26
22384: PUSH
22385: LD_INT 27
22387: PUSH
22388: LD_INT 28
22390: PUSH
22391: LD_INT 30
22393: PUSH
22394: LD_INT 31
22396: PUSH
22397: LD_INT 32
22399: PUSH
22400: LD_INT 33
22402: PUSH
22403: LD_INT 34
22405: PUSH
22406: LD_INT 36
22408: PUSH
22409: EMPTY
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: PUSH
22442: LD_INT 101
22444: PUSH
22445: LD_INT 102
22447: PUSH
22448: LD_INT 103
22450: PUSH
22451: LD_INT 104
22453: PUSH
22454: LD_INT 105
22456: PUSH
22457: LD_INT 106
22459: PUSH
22460: LD_INT 107
22462: PUSH
22463: LD_INT 108
22465: PUSH
22466: LD_INT 109
22468: PUSH
22469: LD_INT 110
22471: PUSH
22472: LD_INT 111
22474: PUSH
22475: LD_INT 112
22477: PUSH
22478: LD_INT 113
22480: PUSH
22481: LD_INT 114
22483: PUSH
22484: EMPTY
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: PUSH
22500: EMPTY
22501: LIST
22502: LIST
22503: ST_TO_ADDR
22504: GO 23671
22506: LD_INT 14
22508: DOUBLE
22509: EQUAL
22510: IFTRUE 22514
22512: GO 22726
22514: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
22515: LD_ADDR_VAR 0 1
22519: PUSH
22520: LD_INT 1
22522: PUSH
22523: LD_INT 2
22525: PUSH
22526: LD_INT 3
22528: PUSH
22529: LD_INT 4
22531: PUSH
22532: LD_INT 5
22534: PUSH
22535: LD_INT 6
22537: PUSH
22538: LD_INT 7
22540: PUSH
22541: LD_INT 8
22543: PUSH
22544: LD_INT 9
22546: PUSH
22547: LD_INT 10
22549: PUSH
22550: LD_INT 11
22552: PUSH
22553: LD_INT 12
22555: PUSH
22556: LD_INT 13
22558: PUSH
22559: LD_INT 14
22561: PUSH
22562: LD_INT 15
22564: PUSH
22565: LD_INT 16
22567: PUSH
22568: LD_INT 17
22570: PUSH
22571: LD_INT 18
22573: PUSH
22574: LD_INT 19
22576: PUSH
22577: LD_INT 20
22579: PUSH
22580: LD_INT 21
22582: PUSH
22583: LD_INT 22
22585: PUSH
22586: LD_INT 23
22588: PUSH
22589: LD_INT 24
22591: PUSH
22592: LD_INT 25
22594: PUSH
22595: LD_INT 26
22597: PUSH
22598: LD_INT 27
22600: PUSH
22601: LD_INT 28
22603: PUSH
22604: LD_INT 29
22606: PUSH
22607: LD_INT 30
22609: PUSH
22610: LD_INT 31
22612: PUSH
22613: LD_INT 32
22615: PUSH
22616: LD_INT 33
22618: PUSH
22619: LD_INT 34
22621: PUSH
22622: LD_INT 36
22624: PUSH
22625: EMPTY
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: PUSH
22662: LD_INT 101
22664: PUSH
22665: LD_INT 102
22667: PUSH
22668: LD_INT 103
22670: PUSH
22671: LD_INT 104
22673: PUSH
22674: LD_INT 105
22676: PUSH
22677: LD_INT 106
22679: PUSH
22680: LD_INT 107
22682: PUSH
22683: LD_INT 108
22685: PUSH
22686: LD_INT 109
22688: PUSH
22689: LD_INT 110
22691: PUSH
22692: LD_INT 111
22694: PUSH
22695: LD_INT 112
22697: PUSH
22698: LD_INT 113
22700: PUSH
22701: LD_INT 114
22703: PUSH
22704: EMPTY
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: PUSH
22720: EMPTY
22721: LIST
22722: LIST
22723: ST_TO_ADDR
22724: GO 23671
22726: LD_INT 15
22728: DOUBLE
22729: EQUAL
22730: IFTRUE 22734
22732: GO 22946
22734: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
22735: LD_ADDR_VAR 0 1
22739: PUSH
22740: LD_INT 1
22742: PUSH
22743: LD_INT 2
22745: PUSH
22746: LD_INT 3
22748: PUSH
22749: LD_INT 4
22751: PUSH
22752: LD_INT 5
22754: PUSH
22755: LD_INT 6
22757: PUSH
22758: LD_INT 7
22760: PUSH
22761: LD_INT 8
22763: PUSH
22764: LD_INT 9
22766: PUSH
22767: LD_INT 10
22769: PUSH
22770: LD_INT 11
22772: PUSH
22773: LD_INT 12
22775: PUSH
22776: LD_INT 13
22778: PUSH
22779: LD_INT 14
22781: PUSH
22782: LD_INT 15
22784: PUSH
22785: LD_INT 16
22787: PUSH
22788: LD_INT 17
22790: PUSH
22791: LD_INT 18
22793: PUSH
22794: LD_INT 19
22796: PUSH
22797: LD_INT 20
22799: PUSH
22800: LD_INT 21
22802: PUSH
22803: LD_INT 22
22805: PUSH
22806: LD_INT 23
22808: PUSH
22809: LD_INT 24
22811: PUSH
22812: LD_INT 25
22814: PUSH
22815: LD_INT 26
22817: PUSH
22818: LD_INT 27
22820: PUSH
22821: LD_INT 28
22823: PUSH
22824: LD_INT 29
22826: PUSH
22827: LD_INT 30
22829: PUSH
22830: LD_INT 31
22832: PUSH
22833: LD_INT 32
22835: PUSH
22836: LD_INT 33
22838: PUSH
22839: LD_INT 34
22841: PUSH
22842: LD_INT 36
22844: PUSH
22845: EMPTY
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: LIST
22878: LIST
22879: LIST
22880: LIST
22881: PUSH
22882: LD_INT 101
22884: PUSH
22885: LD_INT 102
22887: PUSH
22888: LD_INT 103
22890: PUSH
22891: LD_INT 104
22893: PUSH
22894: LD_INT 105
22896: PUSH
22897: LD_INT 106
22899: PUSH
22900: LD_INT 107
22902: PUSH
22903: LD_INT 108
22905: PUSH
22906: LD_INT 109
22908: PUSH
22909: LD_INT 110
22911: PUSH
22912: LD_INT 111
22914: PUSH
22915: LD_INT 112
22917: PUSH
22918: LD_INT 113
22920: PUSH
22921: LD_INT 114
22923: PUSH
22924: EMPTY
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: PUSH
22940: EMPTY
22941: LIST
22942: LIST
22943: ST_TO_ADDR
22944: GO 23671
22946: LD_INT 16
22948: DOUBLE
22949: EQUAL
22950: IFTRUE 22954
22952: GO 23078
22954: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
22955: LD_ADDR_VAR 0 1
22959: PUSH
22960: LD_INT 2
22962: PUSH
22963: LD_INT 4
22965: PUSH
22966: LD_INT 5
22968: PUSH
22969: LD_INT 7
22971: PUSH
22972: LD_INT 11
22974: PUSH
22975: LD_INT 12
22977: PUSH
22978: LD_INT 15
22980: PUSH
22981: LD_INT 16
22983: PUSH
22984: LD_INT 20
22986: PUSH
22987: LD_INT 21
22989: PUSH
22990: LD_INT 22
22992: PUSH
22993: LD_INT 23
22995: PUSH
22996: LD_INT 25
22998: PUSH
22999: LD_INT 26
23001: PUSH
23002: LD_INT 30
23004: PUSH
23005: LD_INT 31
23007: PUSH
23008: LD_INT 32
23010: PUSH
23011: LD_INT 33
23013: PUSH
23014: LD_INT 34
23016: PUSH
23017: EMPTY
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: PUSH
23038: LD_INT 101
23040: PUSH
23041: LD_INT 102
23043: PUSH
23044: LD_INT 103
23046: PUSH
23047: LD_INT 106
23049: PUSH
23050: LD_INT 108
23052: PUSH
23053: LD_INT 112
23055: PUSH
23056: LD_INT 113
23058: PUSH
23059: LD_INT 114
23061: PUSH
23062: EMPTY
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: PUSH
23072: EMPTY
23073: LIST
23074: LIST
23075: ST_TO_ADDR
23076: GO 23671
23078: LD_INT 17
23080: DOUBLE
23081: EQUAL
23082: IFTRUE 23086
23084: GO 23298
23086: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
23087: LD_ADDR_VAR 0 1
23091: PUSH
23092: LD_INT 1
23094: PUSH
23095: LD_INT 2
23097: PUSH
23098: LD_INT 3
23100: PUSH
23101: LD_INT 4
23103: PUSH
23104: LD_INT 5
23106: PUSH
23107: LD_INT 6
23109: PUSH
23110: LD_INT 7
23112: PUSH
23113: LD_INT 8
23115: PUSH
23116: LD_INT 9
23118: PUSH
23119: LD_INT 10
23121: PUSH
23122: LD_INT 11
23124: PUSH
23125: LD_INT 12
23127: PUSH
23128: LD_INT 13
23130: PUSH
23131: LD_INT 14
23133: PUSH
23134: LD_INT 15
23136: PUSH
23137: LD_INT 16
23139: PUSH
23140: LD_INT 17
23142: PUSH
23143: LD_INT 18
23145: PUSH
23146: LD_INT 19
23148: PUSH
23149: LD_INT 20
23151: PUSH
23152: LD_INT 21
23154: PUSH
23155: LD_INT 22
23157: PUSH
23158: LD_INT 23
23160: PUSH
23161: LD_INT 24
23163: PUSH
23164: LD_INT 25
23166: PUSH
23167: LD_INT 26
23169: PUSH
23170: LD_INT 27
23172: PUSH
23173: LD_INT 28
23175: PUSH
23176: LD_INT 29
23178: PUSH
23179: LD_INT 30
23181: PUSH
23182: LD_INT 31
23184: PUSH
23185: LD_INT 32
23187: PUSH
23188: LD_INT 33
23190: PUSH
23191: LD_INT 34
23193: PUSH
23194: LD_INT 36
23196: PUSH
23197: EMPTY
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: PUSH
23234: LD_INT 101
23236: PUSH
23237: LD_INT 102
23239: PUSH
23240: LD_INT 103
23242: PUSH
23243: LD_INT 104
23245: PUSH
23246: LD_INT 105
23248: PUSH
23249: LD_INT 106
23251: PUSH
23252: LD_INT 107
23254: PUSH
23255: LD_INT 108
23257: PUSH
23258: LD_INT 109
23260: PUSH
23261: LD_INT 110
23263: PUSH
23264: LD_INT 111
23266: PUSH
23267: LD_INT 112
23269: PUSH
23270: LD_INT 113
23272: PUSH
23273: LD_INT 114
23275: PUSH
23276: EMPTY
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: PUSH
23292: EMPTY
23293: LIST
23294: LIST
23295: ST_TO_ADDR
23296: GO 23671
23298: LD_INT 18
23300: DOUBLE
23301: EQUAL
23302: IFTRUE 23306
23304: GO 23442
23306: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
23307: LD_ADDR_VAR 0 1
23311: PUSH
23312: LD_INT 2
23314: PUSH
23315: LD_INT 4
23317: PUSH
23318: LD_INT 5
23320: PUSH
23321: LD_INT 7
23323: PUSH
23324: LD_INT 11
23326: PUSH
23327: LD_INT 12
23329: PUSH
23330: LD_INT 15
23332: PUSH
23333: LD_INT 16
23335: PUSH
23336: LD_INT 20
23338: PUSH
23339: LD_INT 21
23341: PUSH
23342: LD_INT 22
23344: PUSH
23345: LD_INT 23
23347: PUSH
23348: LD_INT 25
23350: PUSH
23351: LD_INT 26
23353: PUSH
23354: LD_INT 30
23356: PUSH
23357: LD_INT 31
23359: PUSH
23360: LD_INT 32
23362: PUSH
23363: LD_INT 33
23365: PUSH
23366: LD_INT 34
23368: PUSH
23369: LD_INT 35
23371: PUSH
23372: LD_INT 36
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: PUSH
23398: LD_INT 101
23400: PUSH
23401: LD_INT 102
23403: PUSH
23404: LD_INT 103
23406: PUSH
23407: LD_INT 106
23409: PUSH
23410: LD_INT 108
23412: PUSH
23413: LD_INT 112
23415: PUSH
23416: LD_INT 113
23418: PUSH
23419: LD_INT 114
23421: PUSH
23422: LD_INT 115
23424: PUSH
23425: EMPTY
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: PUSH
23436: EMPTY
23437: LIST
23438: LIST
23439: ST_TO_ADDR
23440: GO 23671
23442: LD_INT 19
23444: DOUBLE
23445: EQUAL
23446: IFTRUE 23450
23448: GO 23670
23450: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
23451: LD_ADDR_VAR 0 1
23455: PUSH
23456: LD_INT 1
23458: PUSH
23459: LD_INT 2
23461: PUSH
23462: LD_INT 3
23464: PUSH
23465: LD_INT 4
23467: PUSH
23468: LD_INT 5
23470: PUSH
23471: LD_INT 6
23473: PUSH
23474: LD_INT 7
23476: PUSH
23477: LD_INT 8
23479: PUSH
23480: LD_INT 9
23482: PUSH
23483: LD_INT 10
23485: PUSH
23486: LD_INT 11
23488: PUSH
23489: LD_INT 12
23491: PUSH
23492: LD_INT 13
23494: PUSH
23495: LD_INT 14
23497: PUSH
23498: LD_INT 15
23500: PUSH
23501: LD_INT 16
23503: PUSH
23504: LD_INT 17
23506: PUSH
23507: LD_INT 18
23509: PUSH
23510: LD_INT 19
23512: PUSH
23513: LD_INT 20
23515: PUSH
23516: LD_INT 21
23518: PUSH
23519: LD_INT 22
23521: PUSH
23522: LD_INT 23
23524: PUSH
23525: LD_INT 24
23527: PUSH
23528: LD_INT 25
23530: PUSH
23531: LD_INT 26
23533: PUSH
23534: LD_INT 27
23536: PUSH
23537: LD_INT 28
23539: PUSH
23540: LD_INT 29
23542: PUSH
23543: LD_INT 30
23545: PUSH
23546: LD_INT 31
23548: PUSH
23549: LD_INT 32
23551: PUSH
23552: LD_INT 33
23554: PUSH
23555: LD_INT 34
23557: PUSH
23558: LD_INT 35
23560: PUSH
23561: LD_INT 36
23563: PUSH
23564: EMPTY
23565: LIST
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: PUSH
23602: LD_INT 101
23604: PUSH
23605: LD_INT 102
23607: PUSH
23608: LD_INT 103
23610: PUSH
23611: LD_INT 104
23613: PUSH
23614: LD_INT 105
23616: PUSH
23617: LD_INT 106
23619: PUSH
23620: LD_INT 107
23622: PUSH
23623: LD_INT 108
23625: PUSH
23626: LD_INT 109
23628: PUSH
23629: LD_INT 110
23631: PUSH
23632: LD_INT 111
23634: PUSH
23635: LD_INT 112
23637: PUSH
23638: LD_INT 113
23640: PUSH
23641: LD_INT 114
23643: PUSH
23644: LD_INT 115
23646: PUSH
23647: EMPTY
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: PUSH
23664: EMPTY
23665: LIST
23666: LIST
23667: ST_TO_ADDR
23668: GO 23671
23670: POP
// end else
23671: GO 23890
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
23673: LD_ADDR_VAR 0 1
23677: PUSH
23678: LD_INT 1
23680: PUSH
23681: LD_INT 2
23683: PUSH
23684: LD_INT 3
23686: PUSH
23687: LD_INT 4
23689: PUSH
23690: LD_INT 5
23692: PUSH
23693: LD_INT 6
23695: PUSH
23696: LD_INT 7
23698: PUSH
23699: LD_INT 8
23701: PUSH
23702: LD_INT 9
23704: PUSH
23705: LD_INT 10
23707: PUSH
23708: LD_INT 11
23710: PUSH
23711: LD_INT 12
23713: PUSH
23714: LD_INT 13
23716: PUSH
23717: LD_INT 14
23719: PUSH
23720: LD_INT 15
23722: PUSH
23723: LD_INT 16
23725: PUSH
23726: LD_INT 17
23728: PUSH
23729: LD_INT 18
23731: PUSH
23732: LD_INT 19
23734: PUSH
23735: LD_INT 20
23737: PUSH
23738: LD_INT 21
23740: PUSH
23741: LD_INT 22
23743: PUSH
23744: LD_INT 23
23746: PUSH
23747: LD_INT 24
23749: PUSH
23750: LD_INT 25
23752: PUSH
23753: LD_INT 26
23755: PUSH
23756: LD_INT 27
23758: PUSH
23759: LD_INT 28
23761: PUSH
23762: LD_INT 29
23764: PUSH
23765: LD_INT 30
23767: PUSH
23768: LD_INT 31
23770: PUSH
23771: LD_INT 32
23773: PUSH
23774: LD_INT 33
23776: PUSH
23777: LD_INT 34
23779: PUSH
23780: LD_INT 35
23782: PUSH
23783: LD_INT 36
23785: PUSH
23786: EMPTY
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: PUSH
23824: LD_INT 101
23826: PUSH
23827: LD_INT 102
23829: PUSH
23830: LD_INT 103
23832: PUSH
23833: LD_INT 104
23835: PUSH
23836: LD_INT 105
23838: PUSH
23839: LD_INT 106
23841: PUSH
23842: LD_INT 107
23844: PUSH
23845: LD_INT 108
23847: PUSH
23848: LD_INT 109
23850: PUSH
23851: LD_INT 110
23853: PUSH
23854: LD_INT 111
23856: PUSH
23857: LD_INT 112
23859: PUSH
23860: LD_INT 113
23862: PUSH
23863: LD_INT 114
23865: PUSH
23866: LD_INT 115
23868: PUSH
23869: EMPTY
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: ST_TO_ADDR
// if result then
23890: LD_VAR 0 1
23894: IFFALSE 24183
// begin normal :=  ;
23896: LD_ADDR_VAR 0 3
23900: PUSH
23901: LD_STRING 
23903: ST_TO_ADDR
// hardcore :=  ;
23904: LD_ADDR_VAR 0 4
23908: PUSH
23909: LD_STRING 
23911: ST_TO_ADDR
// for i = 1 to normalCounter do
23912: LD_ADDR_VAR 0 5
23916: PUSH
23917: DOUBLE
23918: LD_INT 1
23920: DEC
23921: ST_TO_ADDR
23922: LD_EXP 78
23926: PUSH
23927: FOR_TO
23928: IFFALSE 24029
// begin tmp := 0 ;
23930: LD_ADDR_VAR 0 2
23934: PUSH
23935: LD_STRING 0
23937: ST_TO_ADDR
// if result [ 1 ] then
23938: LD_VAR 0 1
23942: PUSH
23943: LD_INT 1
23945: ARRAY
23946: IFFALSE 24011
// if result [ 1 ] [ 1 ] = i then
23948: LD_VAR 0 1
23952: PUSH
23953: LD_INT 1
23955: ARRAY
23956: PUSH
23957: LD_INT 1
23959: ARRAY
23960: PUSH
23961: LD_VAR 0 5
23965: EQUAL
23966: IFFALSE 24011
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23968: LD_ADDR_VAR 0 1
23972: PUSH
23973: LD_VAR 0 1
23977: PPUSH
23978: LD_INT 1
23980: PPUSH
23981: LD_VAR 0 1
23985: PUSH
23986: LD_INT 1
23988: ARRAY
23989: PPUSH
23990: LD_INT 1
23992: PPUSH
23993: CALL_OW 3
23997: PPUSH
23998: CALL_OW 1
24002: ST_TO_ADDR
// tmp := 1 ;
24003: LD_ADDR_VAR 0 2
24007: PUSH
24008: LD_STRING 1
24010: ST_TO_ADDR
// end ; normal := normal & tmp ;
24011: LD_ADDR_VAR 0 3
24015: PUSH
24016: LD_VAR 0 3
24020: PUSH
24021: LD_VAR 0 2
24025: STR
24026: ST_TO_ADDR
// end ;
24027: GO 23927
24029: POP
24030: POP
// for i = 1 to hardcoreCounter do
24031: LD_ADDR_VAR 0 5
24035: PUSH
24036: DOUBLE
24037: LD_INT 1
24039: DEC
24040: ST_TO_ADDR
24041: LD_EXP 79
24045: PUSH
24046: FOR_TO
24047: IFFALSE 24152
// begin tmp := 0 ;
24049: LD_ADDR_VAR 0 2
24053: PUSH
24054: LD_STRING 0
24056: ST_TO_ADDR
// if result [ 2 ] then
24057: LD_VAR 0 1
24061: PUSH
24062: LD_INT 2
24064: ARRAY
24065: IFFALSE 24134
// if result [ 2 ] [ 1 ] = 100 + i then
24067: LD_VAR 0 1
24071: PUSH
24072: LD_INT 2
24074: ARRAY
24075: PUSH
24076: LD_INT 1
24078: ARRAY
24079: PUSH
24080: LD_INT 100
24082: PUSH
24083: LD_VAR 0 5
24087: PLUS
24088: EQUAL
24089: IFFALSE 24134
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24091: LD_ADDR_VAR 0 1
24095: PUSH
24096: LD_VAR 0 1
24100: PPUSH
24101: LD_INT 2
24103: PPUSH
24104: LD_VAR 0 1
24108: PUSH
24109: LD_INT 2
24111: ARRAY
24112: PPUSH
24113: LD_INT 1
24115: PPUSH
24116: CALL_OW 3
24120: PPUSH
24121: CALL_OW 1
24125: ST_TO_ADDR
// tmp := 1 ;
24126: LD_ADDR_VAR 0 2
24130: PUSH
24131: LD_STRING 1
24133: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24134: LD_ADDR_VAR 0 4
24138: PUSH
24139: LD_VAR 0 4
24143: PUSH
24144: LD_VAR 0 2
24148: STR
24149: ST_TO_ADDR
// end ;
24150: GO 24046
24152: POP
24153: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
24154: LD_STRING getStreamItemsFromMission("
24156: PUSH
24157: LD_VAR 0 3
24161: STR
24162: PUSH
24163: LD_STRING ","
24165: STR
24166: PUSH
24167: LD_VAR 0 4
24171: STR
24172: PUSH
24173: LD_STRING ")
24175: STR
24176: PPUSH
24177: CALL_OW 559
// end else
24181: GO 24190
// ToLua ( getStreamItemsFromMission("","") ) ;
24183: LD_STRING getStreamItemsFromMission("","")
24185: PPUSH
24186: CALL_OW 559
// end ;
24190: LD_VAR 0 1
24194: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24195: LD_EXP 77
24199: PUSH
24200: LD_EXP 82
24204: AND
24205: IFFALSE 24329
24207: GO 24209
24209: DISABLE
24210: LD_INT 0
24212: PPUSH
24213: PPUSH
// begin enable ;
24214: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24215: LD_ADDR_VAR 0 2
24219: PUSH
24220: LD_INT 22
24222: PUSH
24223: LD_OWVAR 2
24227: PUSH
24228: EMPTY
24229: LIST
24230: LIST
24231: PUSH
24232: LD_INT 2
24234: PUSH
24235: LD_INT 34
24237: PUSH
24238: LD_INT 7
24240: PUSH
24241: EMPTY
24242: LIST
24243: LIST
24244: PUSH
24245: LD_INT 34
24247: PUSH
24248: LD_INT 45
24250: PUSH
24251: EMPTY
24252: LIST
24253: LIST
24254: PUSH
24255: LD_INT 34
24257: PUSH
24258: LD_INT 28
24260: PUSH
24261: EMPTY
24262: LIST
24263: LIST
24264: PUSH
24265: LD_INT 34
24267: PUSH
24268: LD_INT 47
24270: PUSH
24271: EMPTY
24272: LIST
24273: LIST
24274: PUSH
24275: EMPTY
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: PUSH
24282: EMPTY
24283: LIST
24284: LIST
24285: PPUSH
24286: CALL_OW 69
24290: ST_TO_ADDR
// if not tmp then
24291: LD_VAR 0 2
24295: NOT
24296: IFFALSE 24300
// exit ;
24298: GO 24329
// for i in tmp do
24300: LD_ADDR_VAR 0 1
24304: PUSH
24305: LD_VAR 0 2
24309: PUSH
24310: FOR_IN
24311: IFFALSE 24327
// begin SetLives ( i , 0 ) ;
24313: LD_VAR 0 1
24317: PPUSH
24318: LD_INT 0
24320: PPUSH
24321: CALL_OW 234
// end ;
24325: GO 24310
24327: POP
24328: POP
// end ;
24329: PPOPN 2
24331: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24332: LD_EXP 77
24336: PUSH
24337: LD_EXP 83
24341: AND
24342: IFFALSE 24426
24344: GO 24346
24346: DISABLE
24347: LD_INT 0
24349: PPUSH
24350: PPUSH
// begin enable ;
24351: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24352: LD_ADDR_VAR 0 2
24356: PUSH
24357: LD_INT 22
24359: PUSH
24360: LD_OWVAR 2
24364: PUSH
24365: EMPTY
24366: LIST
24367: LIST
24368: PUSH
24369: LD_INT 32
24371: PUSH
24372: LD_INT 3
24374: PUSH
24375: EMPTY
24376: LIST
24377: LIST
24378: PUSH
24379: EMPTY
24380: LIST
24381: LIST
24382: PPUSH
24383: CALL_OW 69
24387: ST_TO_ADDR
// if not tmp then
24388: LD_VAR 0 2
24392: NOT
24393: IFFALSE 24397
// exit ;
24395: GO 24426
// for i in tmp do
24397: LD_ADDR_VAR 0 1
24401: PUSH
24402: LD_VAR 0 2
24406: PUSH
24407: FOR_IN
24408: IFFALSE 24424
// begin SetLives ( i , 0 ) ;
24410: LD_VAR 0 1
24414: PPUSH
24415: LD_INT 0
24417: PPUSH
24418: CALL_OW 234
// end ;
24422: GO 24407
24424: POP
24425: POP
// end ;
24426: PPOPN 2
24428: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24429: LD_EXP 77
24433: PUSH
24434: LD_EXP 80
24438: AND
24439: IFFALSE 24532
24441: GO 24443
24443: DISABLE
24444: LD_INT 0
24446: PPUSH
// begin enable ;
24447: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24448: LD_ADDR_VAR 0 1
24452: PUSH
24453: LD_INT 22
24455: PUSH
24456: LD_OWVAR 2
24460: PUSH
24461: EMPTY
24462: LIST
24463: LIST
24464: PUSH
24465: LD_INT 2
24467: PUSH
24468: LD_INT 25
24470: PUSH
24471: LD_INT 5
24473: PUSH
24474: EMPTY
24475: LIST
24476: LIST
24477: PUSH
24478: LD_INT 25
24480: PUSH
24481: LD_INT 9
24483: PUSH
24484: EMPTY
24485: LIST
24486: LIST
24487: PUSH
24488: LD_INT 25
24490: PUSH
24491: LD_INT 8
24493: PUSH
24494: EMPTY
24495: LIST
24496: LIST
24497: PUSH
24498: EMPTY
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: PUSH
24504: EMPTY
24505: LIST
24506: LIST
24507: PPUSH
24508: CALL_OW 69
24512: PUSH
24513: FOR_IN
24514: IFFALSE 24530
// begin SetClass ( i , 1 ) ;
24516: LD_VAR 0 1
24520: PPUSH
24521: LD_INT 1
24523: PPUSH
24524: CALL_OW 336
// end ;
24528: GO 24513
24530: POP
24531: POP
// end ;
24532: PPOPN 1
24534: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24535: LD_EXP 77
24539: PUSH
24540: LD_EXP 81
24544: AND
24545: PUSH
24546: LD_OWVAR 65
24550: PUSH
24551: LD_INT 7
24553: LESS
24554: AND
24555: IFFALSE 24569
24557: GO 24559
24559: DISABLE
// begin enable ;
24560: ENABLE
// game_speed := 7 ;
24561: LD_ADDR_OWVAR 65
24565: PUSH
24566: LD_INT 7
24568: ST_TO_ADDR
// end ;
24569: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24570: LD_EXP 77
24574: PUSH
24575: LD_EXP 84
24579: AND
24580: IFFALSE 24782
24582: GO 24584
24584: DISABLE
24585: LD_INT 0
24587: PPUSH
24588: PPUSH
24589: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24590: LD_ADDR_VAR 0 3
24594: PUSH
24595: LD_INT 81
24597: PUSH
24598: LD_OWVAR 2
24602: PUSH
24603: EMPTY
24604: LIST
24605: LIST
24606: PUSH
24607: LD_INT 21
24609: PUSH
24610: LD_INT 1
24612: PUSH
24613: EMPTY
24614: LIST
24615: LIST
24616: PUSH
24617: EMPTY
24618: LIST
24619: LIST
24620: PPUSH
24621: CALL_OW 69
24625: ST_TO_ADDR
// if not tmp then
24626: LD_VAR 0 3
24630: NOT
24631: IFFALSE 24635
// exit ;
24633: GO 24782
// if tmp > 5 then
24635: LD_VAR 0 3
24639: PUSH
24640: LD_INT 5
24642: GREATER
24643: IFFALSE 24655
// k := 5 else
24645: LD_ADDR_VAR 0 2
24649: PUSH
24650: LD_INT 5
24652: ST_TO_ADDR
24653: GO 24665
// k := tmp ;
24655: LD_ADDR_VAR 0 2
24659: PUSH
24660: LD_VAR 0 3
24664: ST_TO_ADDR
// for i := 1 to k do
24665: LD_ADDR_VAR 0 1
24669: PUSH
24670: DOUBLE
24671: LD_INT 1
24673: DEC
24674: ST_TO_ADDR
24675: LD_VAR 0 2
24679: PUSH
24680: FOR_TO
24681: IFFALSE 24780
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24683: LD_VAR 0 3
24687: PUSH
24688: LD_VAR 0 1
24692: ARRAY
24693: PPUSH
24694: LD_VAR 0 1
24698: PUSH
24699: LD_INT 4
24701: MOD
24702: PUSH
24703: LD_INT 1
24705: PLUS
24706: PPUSH
24707: CALL_OW 259
24711: PUSH
24712: LD_INT 10
24714: LESS
24715: IFFALSE 24778
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24717: LD_VAR 0 3
24721: PUSH
24722: LD_VAR 0 1
24726: ARRAY
24727: PPUSH
24728: LD_VAR 0 1
24732: PUSH
24733: LD_INT 4
24735: MOD
24736: PUSH
24737: LD_INT 1
24739: PLUS
24740: PPUSH
24741: LD_VAR 0 3
24745: PUSH
24746: LD_VAR 0 1
24750: ARRAY
24751: PPUSH
24752: LD_VAR 0 1
24756: PUSH
24757: LD_INT 4
24759: MOD
24760: PUSH
24761: LD_INT 1
24763: PLUS
24764: PPUSH
24765: CALL_OW 259
24769: PUSH
24770: LD_INT 1
24772: PLUS
24773: PPUSH
24774: CALL_OW 237
24778: GO 24680
24780: POP
24781: POP
// end ;
24782: PPOPN 3
24784: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
24785: LD_EXP 77
24789: PUSH
24790: LD_EXP 85
24794: AND
24795: IFFALSE 24815
24797: GO 24799
24799: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
24800: LD_INT 4
24802: PPUSH
24803: LD_OWVAR 2
24807: PPUSH
24808: LD_INT 0
24810: PPUSH
24811: CALL_OW 324
24815: END
// every 0 0$1 trigger StreamModeActive and sShovel do
24816: LD_EXP 77
24820: PUSH
24821: LD_EXP 114
24825: AND
24826: IFFALSE 24846
24828: GO 24830
24830: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
24831: LD_INT 19
24833: PPUSH
24834: LD_OWVAR 2
24838: PPUSH
24839: LD_INT 0
24841: PPUSH
24842: CALL_OW 324
24846: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
24847: LD_EXP 77
24851: PUSH
24852: LD_EXP 86
24856: AND
24857: IFFALSE 24959
24859: GO 24861
24861: DISABLE
24862: LD_INT 0
24864: PPUSH
24865: PPUSH
// begin enable ;
24866: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
24867: LD_ADDR_VAR 0 2
24871: PUSH
24872: LD_INT 22
24874: PUSH
24875: LD_OWVAR 2
24879: PUSH
24880: EMPTY
24881: LIST
24882: LIST
24883: PUSH
24884: LD_INT 2
24886: PUSH
24887: LD_INT 34
24889: PUSH
24890: LD_INT 11
24892: PUSH
24893: EMPTY
24894: LIST
24895: LIST
24896: PUSH
24897: LD_INT 34
24899: PUSH
24900: LD_INT 30
24902: PUSH
24903: EMPTY
24904: LIST
24905: LIST
24906: PUSH
24907: EMPTY
24908: LIST
24909: LIST
24910: LIST
24911: PUSH
24912: EMPTY
24913: LIST
24914: LIST
24915: PPUSH
24916: CALL_OW 69
24920: ST_TO_ADDR
// if not tmp then
24921: LD_VAR 0 2
24925: NOT
24926: IFFALSE 24930
// exit ;
24928: GO 24959
// for i in tmp do
24930: LD_ADDR_VAR 0 1
24934: PUSH
24935: LD_VAR 0 2
24939: PUSH
24940: FOR_IN
24941: IFFALSE 24957
// begin SetLives ( i , 0 ) ;
24943: LD_VAR 0 1
24947: PPUSH
24948: LD_INT 0
24950: PPUSH
24951: CALL_OW 234
// end ;
24955: GO 24940
24957: POP
24958: POP
// end ;
24959: PPOPN 2
24961: END
// every 0 0$1 trigger StreamModeActive and sBunker do
24962: LD_EXP 77
24966: PUSH
24967: LD_EXP 87
24971: AND
24972: IFFALSE 24992
24974: GO 24976
24976: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
24977: LD_INT 32
24979: PPUSH
24980: LD_OWVAR 2
24984: PPUSH
24985: LD_INT 0
24987: PPUSH
24988: CALL_OW 324
24992: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
24993: LD_EXP 77
24997: PUSH
24998: LD_EXP 88
25002: AND
25003: IFFALSE 25184
25005: GO 25007
25007: DISABLE
25008: LD_INT 0
25010: PPUSH
25011: PPUSH
25012: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25013: LD_ADDR_VAR 0 2
25017: PUSH
25018: LD_INT 22
25020: PUSH
25021: LD_OWVAR 2
25025: PUSH
25026: EMPTY
25027: LIST
25028: LIST
25029: PUSH
25030: LD_INT 33
25032: PUSH
25033: LD_INT 3
25035: PUSH
25036: EMPTY
25037: LIST
25038: LIST
25039: PUSH
25040: EMPTY
25041: LIST
25042: LIST
25043: PPUSH
25044: CALL_OW 69
25048: ST_TO_ADDR
// if not tmp then
25049: LD_VAR 0 2
25053: NOT
25054: IFFALSE 25058
// exit ;
25056: GO 25184
// side := 0 ;
25058: LD_ADDR_VAR 0 3
25062: PUSH
25063: LD_INT 0
25065: ST_TO_ADDR
// for i := 1 to 8 do
25066: LD_ADDR_VAR 0 1
25070: PUSH
25071: DOUBLE
25072: LD_INT 1
25074: DEC
25075: ST_TO_ADDR
25076: LD_INT 8
25078: PUSH
25079: FOR_TO
25080: IFFALSE 25128
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25082: LD_OWVAR 2
25086: PUSH
25087: LD_VAR 0 1
25091: NONEQUAL
25092: PUSH
25093: LD_OWVAR 2
25097: PPUSH
25098: LD_VAR 0 1
25102: PPUSH
25103: CALL_OW 81
25107: PUSH
25108: LD_INT 2
25110: EQUAL
25111: AND
25112: IFFALSE 25126
// begin side := i ;
25114: LD_ADDR_VAR 0 3
25118: PUSH
25119: LD_VAR 0 1
25123: ST_TO_ADDR
// break ;
25124: GO 25128
// end ;
25126: GO 25079
25128: POP
25129: POP
// if not side then
25130: LD_VAR 0 3
25134: NOT
25135: IFFALSE 25139
// exit ;
25137: GO 25184
// for i := 1 to tmp do
25139: LD_ADDR_VAR 0 1
25143: PUSH
25144: DOUBLE
25145: LD_INT 1
25147: DEC
25148: ST_TO_ADDR
25149: LD_VAR 0 2
25153: PUSH
25154: FOR_TO
25155: IFFALSE 25182
// if Prob ( 60 ) then
25157: LD_INT 60
25159: PPUSH
25160: CALL_OW 13
25164: IFFALSE 25180
// SetSide ( i , side ) ;
25166: LD_VAR 0 1
25170: PPUSH
25171: LD_VAR 0 3
25175: PPUSH
25176: CALL_OW 235
25180: GO 25154
25182: POP
25183: POP
// end ;
25184: PPOPN 3
25186: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25187: LD_EXP 77
25191: PUSH
25192: LD_EXP 90
25196: AND
25197: IFFALSE 25316
25199: GO 25201
25201: DISABLE
25202: LD_INT 0
25204: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25205: LD_ADDR_VAR 0 1
25209: PUSH
25210: LD_INT 22
25212: PUSH
25213: LD_OWVAR 2
25217: PUSH
25218: EMPTY
25219: LIST
25220: LIST
25221: PUSH
25222: LD_INT 21
25224: PUSH
25225: LD_INT 1
25227: PUSH
25228: EMPTY
25229: LIST
25230: LIST
25231: PUSH
25232: LD_INT 3
25234: PUSH
25235: LD_INT 23
25237: PUSH
25238: LD_INT 0
25240: PUSH
25241: EMPTY
25242: LIST
25243: LIST
25244: PUSH
25245: EMPTY
25246: LIST
25247: LIST
25248: PUSH
25249: EMPTY
25250: LIST
25251: LIST
25252: LIST
25253: PPUSH
25254: CALL_OW 69
25258: PUSH
25259: FOR_IN
25260: IFFALSE 25314
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25262: LD_VAR 0 1
25266: PPUSH
25267: CALL_OW 257
25271: PUSH
25272: LD_INT 1
25274: PUSH
25275: LD_INT 2
25277: PUSH
25278: LD_INT 3
25280: PUSH
25281: LD_INT 4
25283: PUSH
25284: EMPTY
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: IN
25290: IFFALSE 25312
// SetClass ( un , rand ( 1 , 4 ) ) ;
25292: LD_VAR 0 1
25296: PPUSH
25297: LD_INT 1
25299: PPUSH
25300: LD_INT 4
25302: PPUSH
25303: CALL_OW 12
25307: PPUSH
25308: CALL_OW 336
25312: GO 25259
25314: POP
25315: POP
// end ;
25316: PPOPN 1
25318: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25319: LD_EXP 77
25323: PUSH
25324: LD_EXP 89
25328: AND
25329: IFFALSE 25408
25331: GO 25333
25333: DISABLE
25334: LD_INT 0
25336: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25337: LD_ADDR_VAR 0 1
25341: PUSH
25342: LD_INT 22
25344: PUSH
25345: LD_OWVAR 2
25349: PUSH
25350: EMPTY
25351: LIST
25352: LIST
25353: PUSH
25354: LD_INT 21
25356: PUSH
25357: LD_INT 3
25359: PUSH
25360: EMPTY
25361: LIST
25362: LIST
25363: PUSH
25364: EMPTY
25365: LIST
25366: LIST
25367: PPUSH
25368: CALL_OW 69
25372: ST_TO_ADDR
// if not tmp then
25373: LD_VAR 0 1
25377: NOT
25378: IFFALSE 25382
// exit ;
25380: GO 25408
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25382: LD_VAR 0 1
25386: PUSH
25387: LD_INT 1
25389: PPUSH
25390: LD_VAR 0 1
25394: PPUSH
25395: CALL_OW 12
25399: ARRAY
25400: PPUSH
25401: LD_INT 100
25403: PPUSH
25404: CALL_OW 234
// end ;
25408: PPOPN 1
25410: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25411: LD_EXP 77
25415: PUSH
25416: LD_EXP 91
25420: AND
25421: IFFALSE 25519
25423: GO 25425
25425: DISABLE
25426: LD_INT 0
25428: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25429: LD_ADDR_VAR 0 1
25433: PUSH
25434: LD_INT 22
25436: PUSH
25437: LD_OWVAR 2
25441: PUSH
25442: EMPTY
25443: LIST
25444: LIST
25445: PUSH
25446: LD_INT 21
25448: PUSH
25449: LD_INT 1
25451: PUSH
25452: EMPTY
25453: LIST
25454: LIST
25455: PUSH
25456: EMPTY
25457: LIST
25458: LIST
25459: PPUSH
25460: CALL_OW 69
25464: ST_TO_ADDR
// if not tmp then
25465: LD_VAR 0 1
25469: NOT
25470: IFFALSE 25474
// exit ;
25472: GO 25519
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25474: LD_VAR 0 1
25478: PUSH
25479: LD_INT 1
25481: PPUSH
25482: LD_VAR 0 1
25486: PPUSH
25487: CALL_OW 12
25491: ARRAY
25492: PPUSH
25493: LD_INT 1
25495: PPUSH
25496: LD_INT 4
25498: PPUSH
25499: CALL_OW 12
25503: PPUSH
25504: LD_INT 3000
25506: PPUSH
25507: LD_INT 9000
25509: PPUSH
25510: CALL_OW 12
25514: PPUSH
25515: CALL_OW 492
// end ;
25519: PPOPN 1
25521: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25522: LD_EXP 77
25526: PUSH
25527: LD_EXP 92
25531: AND
25532: IFFALSE 25552
25534: GO 25536
25536: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25537: LD_INT 1
25539: PPUSH
25540: LD_OWVAR 2
25544: PPUSH
25545: LD_INT 0
25547: PPUSH
25548: CALL_OW 324
25552: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25553: LD_EXP 77
25557: PUSH
25558: LD_EXP 93
25562: AND
25563: IFFALSE 25646
25565: GO 25567
25567: DISABLE
25568: LD_INT 0
25570: PPUSH
25571: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25572: LD_ADDR_VAR 0 2
25576: PUSH
25577: LD_INT 22
25579: PUSH
25580: LD_OWVAR 2
25584: PUSH
25585: EMPTY
25586: LIST
25587: LIST
25588: PUSH
25589: LD_INT 21
25591: PUSH
25592: LD_INT 3
25594: PUSH
25595: EMPTY
25596: LIST
25597: LIST
25598: PUSH
25599: EMPTY
25600: LIST
25601: LIST
25602: PPUSH
25603: CALL_OW 69
25607: ST_TO_ADDR
// if not tmp then
25608: LD_VAR 0 2
25612: NOT
25613: IFFALSE 25617
// exit ;
25615: GO 25646
// for i in tmp do
25617: LD_ADDR_VAR 0 1
25621: PUSH
25622: LD_VAR 0 2
25626: PUSH
25627: FOR_IN
25628: IFFALSE 25644
// SetBLevel ( i , 10 ) ;
25630: LD_VAR 0 1
25634: PPUSH
25635: LD_INT 10
25637: PPUSH
25638: CALL_OW 241
25642: GO 25627
25644: POP
25645: POP
// end ;
25646: PPOPN 2
25648: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25649: LD_EXP 77
25653: PUSH
25654: LD_EXP 94
25658: AND
25659: IFFALSE 25770
25661: GO 25663
25663: DISABLE
25664: LD_INT 0
25666: PPUSH
25667: PPUSH
25668: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25669: LD_ADDR_VAR 0 3
25673: PUSH
25674: LD_INT 22
25676: PUSH
25677: LD_OWVAR 2
25681: PUSH
25682: EMPTY
25683: LIST
25684: LIST
25685: PUSH
25686: LD_INT 25
25688: PUSH
25689: LD_INT 1
25691: PUSH
25692: EMPTY
25693: LIST
25694: LIST
25695: PUSH
25696: EMPTY
25697: LIST
25698: LIST
25699: PPUSH
25700: CALL_OW 69
25704: ST_TO_ADDR
// if not tmp then
25705: LD_VAR 0 3
25709: NOT
25710: IFFALSE 25714
// exit ;
25712: GO 25770
// un := tmp [ rand ( 1 , tmp ) ] ;
25714: LD_ADDR_VAR 0 2
25718: PUSH
25719: LD_VAR 0 3
25723: PUSH
25724: LD_INT 1
25726: PPUSH
25727: LD_VAR 0 3
25731: PPUSH
25732: CALL_OW 12
25736: ARRAY
25737: ST_TO_ADDR
// if Crawls ( un ) then
25738: LD_VAR 0 2
25742: PPUSH
25743: CALL_OW 318
25747: IFFALSE 25758
// ComWalk ( un ) ;
25749: LD_VAR 0 2
25753: PPUSH
25754: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25758: LD_VAR 0 2
25762: PPUSH
25763: LD_INT 5
25765: PPUSH
25766: CALL_OW 336
// end ;
25770: PPOPN 3
25772: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
25773: LD_EXP 77
25777: PUSH
25778: LD_EXP 95
25782: AND
25783: PUSH
25784: LD_OWVAR 67
25788: PUSH
25789: LD_INT 4
25791: LESS
25792: AND
25793: IFFALSE 25812
25795: GO 25797
25797: DISABLE
// begin Difficulty := Difficulty + 1 ;
25798: LD_ADDR_OWVAR 67
25802: PUSH
25803: LD_OWVAR 67
25807: PUSH
25808: LD_INT 1
25810: PLUS
25811: ST_TO_ADDR
// end ;
25812: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
25813: LD_EXP 77
25817: PUSH
25818: LD_EXP 96
25822: AND
25823: IFFALSE 25926
25825: GO 25827
25827: DISABLE
25828: LD_INT 0
25830: PPUSH
// begin for i := 1 to 5 do
25831: LD_ADDR_VAR 0 1
25835: PUSH
25836: DOUBLE
25837: LD_INT 1
25839: DEC
25840: ST_TO_ADDR
25841: LD_INT 5
25843: PUSH
25844: FOR_TO
25845: IFFALSE 25924
// begin uc_nation := nation_nature ;
25847: LD_ADDR_OWVAR 21
25851: PUSH
25852: LD_INT 0
25854: ST_TO_ADDR
// uc_side := 0 ;
25855: LD_ADDR_OWVAR 20
25859: PUSH
25860: LD_INT 0
25862: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25863: LD_ADDR_OWVAR 29
25867: PUSH
25868: LD_INT 12
25870: PUSH
25871: LD_INT 12
25873: PUSH
25874: EMPTY
25875: LIST
25876: LIST
25877: ST_TO_ADDR
// hc_agressivity := 20 ;
25878: LD_ADDR_OWVAR 35
25882: PUSH
25883: LD_INT 20
25885: ST_TO_ADDR
// hc_class := class_tiger ;
25886: LD_ADDR_OWVAR 28
25890: PUSH
25891: LD_INT 14
25893: ST_TO_ADDR
// hc_gallery :=  ;
25894: LD_ADDR_OWVAR 33
25898: PUSH
25899: LD_STRING 
25901: ST_TO_ADDR
// hc_name :=  ;
25902: LD_ADDR_OWVAR 26
25906: PUSH
25907: LD_STRING 
25909: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
25910: CALL_OW 44
25914: PPUSH
25915: LD_INT 0
25917: PPUSH
25918: CALL_OW 51
// end ;
25922: GO 25844
25924: POP
25925: POP
// end ;
25926: PPOPN 1
25928: END
// every 0 0$1 trigger StreamModeActive and sBomb do
25929: LD_EXP 77
25933: PUSH
25934: LD_EXP 97
25938: AND
25939: IFFALSE 25948
25941: GO 25943
25943: DISABLE
// StreamSibBomb ;
25944: CALL 25949 0 0
25948: END
// export function StreamSibBomb ; var i , x , y ; begin
25949: LD_INT 0
25951: PPUSH
25952: PPUSH
25953: PPUSH
25954: PPUSH
// result := false ;
25955: LD_ADDR_VAR 0 1
25959: PUSH
25960: LD_INT 0
25962: ST_TO_ADDR
// for i := 1 to 16 do
25963: LD_ADDR_VAR 0 2
25967: PUSH
25968: DOUBLE
25969: LD_INT 1
25971: DEC
25972: ST_TO_ADDR
25973: LD_INT 16
25975: PUSH
25976: FOR_TO
25977: IFFALSE 26176
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25979: LD_ADDR_VAR 0 3
25983: PUSH
25984: LD_INT 10
25986: PUSH
25987: LD_INT 20
25989: PUSH
25990: LD_INT 30
25992: PUSH
25993: LD_INT 40
25995: PUSH
25996: LD_INT 50
25998: PUSH
25999: LD_INT 60
26001: PUSH
26002: LD_INT 70
26004: PUSH
26005: LD_INT 80
26007: PUSH
26008: LD_INT 90
26010: PUSH
26011: LD_INT 100
26013: PUSH
26014: LD_INT 110
26016: PUSH
26017: LD_INT 120
26019: PUSH
26020: LD_INT 130
26022: PUSH
26023: LD_INT 140
26025: PUSH
26026: LD_INT 150
26028: PUSH
26029: EMPTY
26030: LIST
26031: LIST
26032: LIST
26033: LIST
26034: LIST
26035: LIST
26036: LIST
26037: LIST
26038: LIST
26039: LIST
26040: LIST
26041: LIST
26042: LIST
26043: LIST
26044: LIST
26045: PUSH
26046: LD_INT 1
26048: PPUSH
26049: LD_INT 15
26051: PPUSH
26052: CALL_OW 12
26056: ARRAY
26057: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26058: LD_ADDR_VAR 0 4
26062: PUSH
26063: LD_INT 10
26065: PUSH
26066: LD_INT 20
26068: PUSH
26069: LD_INT 30
26071: PUSH
26072: LD_INT 40
26074: PUSH
26075: LD_INT 50
26077: PUSH
26078: LD_INT 60
26080: PUSH
26081: LD_INT 70
26083: PUSH
26084: LD_INT 80
26086: PUSH
26087: LD_INT 90
26089: PUSH
26090: LD_INT 100
26092: PUSH
26093: LD_INT 110
26095: PUSH
26096: LD_INT 120
26098: PUSH
26099: LD_INT 130
26101: PUSH
26102: LD_INT 140
26104: PUSH
26105: LD_INT 150
26107: PUSH
26108: EMPTY
26109: LIST
26110: LIST
26111: LIST
26112: LIST
26113: LIST
26114: LIST
26115: LIST
26116: LIST
26117: LIST
26118: LIST
26119: LIST
26120: LIST
26121: LIST
26122: LIST
26123: LIST
26124: PUSH
26125: LD_INT 1
26127: PPUSH
26128: LD_INT 15
26130: PPUSH
26131: CALL_OW 12
26135: ARRAY
26136: ST_TO_ADDR
// if ValidHex ( x , y ) then
26137: LD_VAR 0 3
26141: PPUSH
26142: LD_VAR 0 4
26146: PPUSH
26147: CALL_OW 488
26151: IFFALSE 26174
// begin result := [ x , y ] ;
26153: LD_ADDR_VAR 0 1
26157: PUSH
26158: LD_VAR 0 3
26162: PUSH
26163: LD_VAR 0 4
26167: PUSH
26168: EMPTY
26169: LIST
26170: LIST
26171: ST_TO_ADDR
// break ;
26172: GO 26176
// end ; end ;
26174: GO 25976
26176: POP
26177: POP
// if result then
26178: LD_VAR 0 1
26182: IFFALSE 26242
// begin ToLua ( playSibBomb() ) ;
26184: LD_STRING playSibBomb()
26186: PPUSH
26187: CALL_OW 559
// wait ( 0 0$14 ) ;
26191: LD_INT 490
26193: PPUSH
26194: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26198: LD_VAR 0 1
26202: PUSH
26203: LD_INT 1
26205: ARRAY
26206: PPUSH
26207: LD_VAR 0 1
26211: PUSH
26212: LD_INT 2
26214: ARRAY
26215: PPUSH
26216: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26220: LD_VAR 0 1
26224: PUSH
26225: LD_INT 1
26227: ARRAY
26228: PPUSH
26229: LD_VAR 0 1
26233: PUSH
26234: LD_INT 2
26236: ARRAY
26237: PPUSH
26238: CALL_OW 429
// end ; end ;
26242: LD_VAR 0 1
26246: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26247: LD_EXP 77
26251: PUSH
26252: LD_EXP 99
26256: AND
26257: IFFALSE 26269
26259: GO 26261
26261: DISABLE
// YouLost (  ) ;
26262: LD_STRING 
26264: PPUSH
26265: CALL_OW 104
26269: END
// every 0 0$1 trigger StreamModeActive and sFog do
26270: LD_EXP 77
26274: PUSH
26275: LD_EXP 98
26279: AND
26280: IFFALSE 26294
26282: GO 26284
26284: DISABLE
// FogOff ( your_side ) ;
26285: LD_OWVAR 2
26289: PPUSH
26290: CALL_OW 344
26294: END
// every 0 0$1 trigger StreamModeActive and sSun do
26295: LD_EXP 77
26299: PUSH
26300: LD_EXP 100
26304: AND
26305: IFFALSE 26333
26307: GO 26309
26309: DISABLE
// begin solar_recharge_percent := 0 ;
26310: LD_ADDR_OWVAR 79
26314: PUSH
26315: LD_INT 0
26317: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26318: LD_INT 10500
26320: PPUSH
26321: CALL_OW 67
// solar_recharge_percent := 100 ;
26325: LD_ADDR_OWVAR 79
26329: PUSH
26330: LD_INT 100
26332: ST_TO_ADDR
// end ;
26333: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26334: LD_EXP 77
26338: PUSH
26339: LD_EXP 101
26343: AND
26344: IFFALSE 26583
26346: GO 26348
26348: DISABLE
26349: LD_INT 0
26351: PPUSH
26352: PPUSH
26353: PPUSH
// begin tmp := [ ] ;
26354: LD_ADDR_VAR 0 3
26358: PUSH
26359: EMPTY
26360: ST_TO_ADDR
// for i := 1 to 6 do
26361: LD_ADDR_VAR 0 1
26365: PUSH
26366: DOUBLE
26367: LD_INT 1
26369: DEC
26370: ST_TO_ADDR
26371: LD_INT 6
26373: PUSH
26374: FOR_TO
26375: IFFALSE 26480
// begin uc_nation := nation_nature ;
26377: LD_ADDR_OWVAR 21
26381: PUSH
26382: LD_INT 0
26384: ST_TO_ADDR
// uc_side := 0 ;
26385: LD_ADDR_OWVAR 20
26389: PUSH
26390: LD_INT 0
26392: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26393: LD_ADDR_OWVAR 29
26397: PUSH
26398: LD_INT 12
26400: PUSH
26401: LD_INT 12
26403: PUSH
26404: EMPTY
26405: LIST
26406: LIST
26407: ST_TO_ADDR
// hc_agressivity := 20 ;
26408: LD_ADDR_OWVAR 35
26412: PUSH
26413: LD_INT 20
26415: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26416: LD_ADDR_OWVAR 28
26420: PUSH
26421: LD_INT 17
26423: ST_TO_ADDR
// hc_gallery :=  ;
26424: LD_ADDR_OWVAR 33
26428: PUSH
26429: LD_STRING 
26431: ST_TO_ADDR
// hc_name :=  ;
26432: LD_ADDR_OWVAR 26
26436: PUSH
26437: LD_STRING 
26439: ST_TO_ADDR
// un := CreateHuman ;
26440: LD_ADDR_VAR 0 2
26444: PUSH
26445: CALL_OW 44
26449: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26450: LD_VAR 0 2
26454: PPUSH
26455: LD_INT 1
26457: PPUSH
26458: CALL_OW 51
// tmp := tmp ^ un ;
26462: LD_ADDR_VAR 0 3
26466: PUSH
26467: LD_VAR 0 3
26471: PUSH
26472: LD_VAR 0 2
26476: ADD
26477: ST_TO_ADDR
// end ;
26478: GO 26374
26480: POP
26481: POP
// repeat wait ( 0 0$1 ) ;
26482: LD_INT 35
26484: PPUSH
26485: CALL_OW 67
// for un in tmp do
26489: LD_ADDR_VAR 0 2
26493: PUSH
26494: LD_VAR 0 3
26498: PUSH
26499: FOR_IN
26500: IFFALSE 26574
// begin if IsDead ( un ) then
26502: LD_VAR 0 2
26506: PPUSH
26507: CALL_OW 301
26511: IFFALSE 26531
// begin tmp := tmp diff un ;
26513: LD_ADDR_VAR 0 3
26517: PUSH
26518: LD_VAR 0 3
26522: PUSH
26523: LD_VAR 0 2
26527: DIFF
26528: ST_TO_ADDR
// continue ;
26529: GO 26499
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26531: LD_VAR 0 2
26535: PPUSH
26536: LD_INT 3
26538: PUSH
26539: LD_INT 22
26541: PUSH
26542: LD_INT 0
26544: PUSH
26545: EMPTY
26546: LIST
26547: LIST
26548: PUSH
26549: EMPTY
26550: LIST
26551: LIST
26552: PPUSH
26553: CALL_OW 69
26557: PPUSH
26558: LD_VAR 0 2
26562: PPUSH
26563: CALL_OW 74
26567: PPUSH
26568: CALL_OW 115
// end ;
26572: GO 26499
26574: POP
26575: POP
// until not tmp ;
26576: LD_VAR 0 3
26580: NOT
26581: IFFALSE 26482
// end ;
26583: PPOPN 3
26585: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26586: LD_EXP 77
26590: PUSH
26591: LD_EXP 102
26595: AND
26596: IFFALSE 26650
26598: GO 26600
26600: DISABLE
// begin ToLua ( displayTroll(); ) ;
26601: LD_STRING displayTroll();
26603: PPUSH
26604: CALL_OW 559
// wait ( 3 3$00 ) ;
26608: LD_INT 6300
26610: PPUSH
26611: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26615: LD_STRING hideTroll();
26617: PPUSH
26618: CALL_OW 559
// wait ( 1 1$00 ) ;
26622: LD_INT 2100
26624: PPUSH
26625: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26629: LD_STRING displayTroll();
26631: PPUSH
26632: CALL_OW 559
// wait ( 1 1$00 ) ;
26636: LD_INT 2100
26638: PPUSH
26639: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26643: LD_STRING hideTroll();
26645: PPUSH
26646: CALL_OW 559
// end ;
26650: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26651: LD_EXP 77
26655: PUSH
26656: LD_EXP 103
26660: AND
26661: IFFALSE 26724
26663: GO 26665
26665: DISABLE
26666: LD_INT 0
26668: PPUSH
// begin p := 0 ;
26669: LD_ADDR_VAR 0 1
26673: PUSH
26674: LD_INT 0
26676: ST_TO_ADDR
// repeat game_speed := 1 ;
26677: LD_ADDR_OWVAR 65
26681: PUSH
26682: LD_INT 1
26684: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26685: LD_INT 35
26687: PPUSH
26688: CALL_OW 67
// p := p + 1 ;
26692: LD_ADDR_VAR 0 1
26696: PUSH
26697: LD_VAR 0 1
26701: PUSH
26702: LD_INT 1
26704: PLUS
26705: ST_TO_ADDR
// until p >= 60 ;
26706: LD_VAR 0 1
26710: PUSH
26711: LD_INT 60
26713: GREATEREQUAL
26714: IFFALSE 26677
// game_speed := 4 ;
26716: LD_ADDR_OWVAR 65
26720: PUSH
26721: LD_INT 4
26723: ST_TO_ADDR
// end ;
26724: PPOPN 1
26726: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26727: LD_EXP 77
26731: PUSH
26732: LD_EXP 104
26736: AND
26737: IFFALSE 26883
26739: GO 26741
26741: DISABLE
26742: LD_INT 0
26744: PPUSH
26745: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26746: LD_ADDR_VAR 0 1
26750: PUSH
26751: LD_INT 22
26753: PUSH
26754: LD_OWVAR 2
26758: PUSH
26759: EMPTY
26760: LIST
26761: LIST
26762: PUSH
26763: LD_INT 2
26765: PUSH
26766: LD_INT 30
26768: PUSH
26769: LD_INT 0
26771: PUSH
26772: EMPTY
26773: LIST
26774: LIST
26775: PUSH
26776: LD_INT 30
26778: PUSH
26779: LD_INT 1
26781: PUSH
26782: EMPTY
26783: LIST
26784: LIST
26785: PUSH
26786: EMPTY
26787: LIST
26788: LIST
26789: LIST
26790: PUSH
26791: EMPTY
26792: LIST
26793: LIST
26794: PPUSH
26795: CALL_OW 69
26799: ST_TO_ADDR
// if not depot then
26800: LD_VAR 0 1
26804: NOT
26805: IFFALSE 26809
// exit ;
26807: GO 26883
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26809: LD_ADDR_VAR 0 2
26813: PUSH
26814: LD_VAR 0 1
26818: PUSH
26819: LD_INT 1
26821: PPUSH
26822: LD_VAR 0 1
26826: PPUSH
26827: CALL_OW 12
26831: ARRAY
26832: PPUSH
26833: CALL_OW 274
26837: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
26838: LD_VAR 0 2
26842: PPUSH
26843: LD_INT 1
26845: PPUSH
26846: LD_INT 0
26848: PPUSH
26849: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
26853: LD_VAR 0 2
26857: PPUSH
26858: LD_INT 2
26860: PPUSH
26861: LD_INT 0
26863: PPUSH
26864: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
26868: LD_VAR 0 2
26872: PPUSH
26873: LD_INT 3
26875: PPUSH
26876: LD_INT 0
26878: PPUSH
26879: CALL_OW 277
// end ;
26883: PPOPN 2
26885: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
26886: LD_EXP 77
26890: PUSH
26891: LD_EXP 105
26895: AND
26896: IFFALSE 26993
26898: GO 26900
26900: DISABLE
26901: LD_INT 0
26903: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26904: LD_ADDR_VAR 0 1
26908: PUSH
26909: LD_INT 22
26911: PUSH
26912: LD_OWVAR 2
26916: PUSH
26917: EMPTY
26918: LIST
26919: LIST
26920: PUSH
26921: LD_INT 21
26923: PUSH
26924: LD_INT 1
26926: PUSH
26927: EMPTY
26928: LIST
26929: LIST
26930: PUSH
26931: LD_INT 3
26933: PUSH
26934: LD_INT 23
26936: PUSH
26937: LD_INT 0
26939: PUSH
26940: EMPTY
26941: LIST
26942: LIST
26943: PUSH
26944: EMPTY
26945: LIST
26946: LIST
26947: PUSH
26948: EMPTY
26949: LIST
26950: LIST
26951: LIST
26952: PPUSH
26953: CALL_OW 69
26957: ST_TO_ADDR
// if not tmp then
26958: LD_VAR 0 1
26962: NOT
26963: IFFALSE 26967
// exit ;
26965: GO 26993
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
26967: LD_VAR 0 1
26971: PUSH
26972: LD_INT 1
26974: PPUSH
26975: LD_VAR 0 1
26979: PPUSH
26980: CALL_OW 12
26984: ARRAY
26985: PPUSH
26986: LD_INT 200
26988: PPUSH
26989: CALL_OW 234
// end ;
26993: PPOPN 1
26995: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
26996: LD_EXP 77
27000: PUSH
27001: LD_EXP 106
27005: AND
27006: IFFALSE 27085
27008: GO 27010
27010: DISABLE
27011: LD_INT 0
27013: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27014: LD_ADDR_VAR 0 1
27018: PUSH
27019: LD_INT 22
27021: PUSH
27022: LD_OWVAR 2
27026: PUSH
27027: EMPTY
27028: LIST
27029: LIST
27030: PUSH
27031: LD_INT 21
27033: PUSH
27034: LD_INT 2
27036: PUSH
27037: EMPTY
27038: LIST
27039: LIST
27040: PUSH
27041: EMPTY
27042: LIST
27043: LIST
27044: PPUSH
27045: CALL_OW 69
27049: ST_TO_ADDR
// if not tmp then
27050: LD_VAR 0 1
27054: NOT
27055: IFFALSE 27059
// exit ;
27057: GO 27085
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27059: LD_VAR 0 1
27063: PUSH
27064: LD_INT 1
27066: PPUSH
27067: LD_VAR 0 1
27071: PPUSH
27072: CALL_OW 12
27076: ARRAY
27077: PPUSH
27078: LD_INT 60
27080: PPUSH
27081: CALL_OW 234
// end ;
27085: PPOPN 1
27087: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27088: LD_EXP 77
27092: PUSH
27093: LD_EXP 107
27097: AND
27098: IFFALSE 27197
27100: GO 27102
27102: DISABLE
27103: LD_INT 0
27105: PPUSH
27106: PPUSH
// begin enable ;
27107: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27108: LD_ADDR_VAR 0 1
27112: PUSH
27113: LD_INT 22
27115: PUSH
27116: LD_OWVAR 2
27120: PUSH
27121: EMPTY
27122: LIST
27123: LIST
27124: PUSH
27125: LD_INT 61
27127: PUSH
27128: EMPTY
27129: LIST
27130: PUSH
27131: LD_INT 33
27133: PUSH
27134: LD_INT 2
27136: PUSH
27137: EMPTY
27138: LIST
27139: LIST
27140: PUSH
27141: EMPTY
27142: LIST
27143: LIST
27144: LIST
27145: PPUSH
27146: CALL_OW 69
27150: ST_TO_ADDR
// if not tmp then
27151: LD_VAR 0 1
27155: NOT
27156: IFFALSE 27160
// exit ;
27158: GO 27197
// for i in tmp do
27160: LD_ADDR_VAR 0 2
27164: PUSH
27165: LD_VAR 0 1
27169: PUSH
27170: FOR_IN
27171: IFFALSE 27195
// if IsControledBy ( i ) then
27173: LD_VAR 0 2
27177: PPUSH
27178: CALL_OW 312
27182: IFFALSE 27193
// ComUnlink ( i ) ;
27184: LD_VAR 0 2
27188: PPUSH
27189: CALL_OW 136
27193: GO 27170
27195: POP
27196: POP
// end ;
27197: PPOPN 2
27199: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27200: LD_EXP 77
27204: PUSH
27205: LD_EXP 108
27209: AND
27210: IFFALSE 27350
27212: GO 27214
27214: DISABLE
27215: LD_INT 0
27217: PPUSH
27218: PPUSH
// begin ToLua ( displayPowell(); ) ;
27219: LD_STRING displayPowell();
27221: PPUSH
27222: CALL_OW 559
// uc_side := 0 ;
27226: LD_ADDR_OWVAR 20
27230: PUSH
27231: LD_INT 0
27233: ST_TO_ADDR
// uc_nation := 2 ;
27234: LD_ADDR_OWVAR 21
27238: PUSH
27239: LD_INT 2
27241: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27242: LD_ADDR_OWVAR 37
27246: PUSH
27247: LD_INT 14
27249: ST_TO_ADDR
// vc_engine := engine_siberite ;
27250: LD_ADDR_OWVAR 39
27254: PUSH
27255: LD_INT 3
27257: ST_TO_ADDR
// vc_control := control_apeman ;
27258: LD_ADDR_OWVAR 38
27262: PUSH
27263: LD_INT 5
27265: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27266: LD_ADDR_OWVAR 40
27270: PUSH
27271: LD_INT 29
27273: ST_TO_ADDR
// un := CreateVehicle ;
27274: LD_ADDR_VAR 0 2
27278: PUSH
27279: CALL_OW 45
27283: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27284: LD_VAR 0 2
27288: PPUSH
27289: LD_INT 1
27291: PPUSH
27292: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27296: LD_INT 35
27298: PPUSH
27299: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27303: LD_VAR 0 2
27307: PPUSH
27308: LD_INT 22
27310: PUSH
27311: LD_OWVAR 2
27315: PUSH
27316: EMPTY
27317: LIST
27318: LIST
27319: PPUSH
27320: CALL_OW 69
27324: PPUSH
27325: LD_VAR 0 2
27329: PPUSH
27330: CALL_OW 74
27334: PPUSH
27335: CALL_OW 115
// until IsDead ( un ) ;
27339: LD_VAR 0 2
27343: PPUSH
27344: CALL_OW 301
27348: IFFALSE 27296
// end ;
27350: PPOPN 2
27352: END
// every 0 0$1 trigger StreamModeActive and sStu do
27353: LD_EXP 77
27357: PUSH
27358: LD_EXP 116
27362: AND
27363: IFFALSE 27379
27365: GO 27367
27367: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27368: LD_STRING displayStucuk();
27370: PPUSH
27371: CALL_OW 559
// ResetFog ;
27375: CALL_OW 335
// end ;
27379: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27380: LD_EXP 77
27384: PUSH
27385: LD_EXP 109
27389: AND
27390: IFFALSE 27531
27392: GO 27394
27394: DISABLE
27395: LD_INT 0
27397: PPUSH
27398: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27399: LD_ADDR_VAR 0 2
27403: PUSH
27404: LD_INT 22
27406: PUSH
27407: LD_OWVAR 2
27411: PUSH
27412: EMPTY
27413: LIST
27414: LIST
27415: PUSH
27416: LD_INT 21
27418: PUSH
27419: LD_INT 1
27421: PUSH
27422: EMPTY
27423: LIST
27424: LIST
27425: PUSH
27426: EMPTY
27427: LIST
27428: LIST
27429: PPUSH
27430: CALL_OW 69
27434: ST_TO_ADDR
// if not tmp then
27435: LD_VAR 0 2
27439: NOT
27440: IFFALSE 27444
// exit ;
27442: GO 27531
// un := tmp [ rand ( 1 , tmp ) ] ;
27444: LD_ADDR_VAR 0 1
27448: PUSH
27449: LD_VAR 0 2
27453: PUSH
27454: LD_INT 1
27456: PPUSH
27457: LD_VAR 0 2
27461: PPUSH
27462: CALL_OW 12
27466: ARRAY
27467: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27468: LD_VAR 0 1
27472: PPUSH
27473: LD_INT 0
27475: PPUSH
27476: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27480: LD_VAR 0 1
27484: PPUSH
27485: LD_OWVAR 3
27489: PUSH
27490: LD_VAR 0 1
27494: DIFF
27495: PPUSH
27496: LD_VAR 0 1
27500: PPUSH
27501: CALL_OW 74
27505: PPUSH
27506: CALL_OW 115
// wait ( 0 0$20 ) ;
27510: LD_INT 700
27512: PPUSH
27513: CALL_OW 67
// SetSide ( un , your_side ) ;
27517: LD_VAR 0 1
27521: PPUSH
27522: LD_OWVAR 2
27526: PPUSH
27527: CALL_OW 235
// end ;
27531: PPOPN 2
27533: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27534: LD_EXP 77
27538: PUSH
27539: LD_EXP 110
27543: AND
27544: IFFALSE 27650
27546: GO 27548
27548: DISABLE
27549: LD_INT 0
27551: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27552: LD_ADDR_VAR 0 1
27556: PUSH
27557: LD_INT 22
27559: PUSH
27560: LD_OWVAR 2
27564: PUSH
27565: EMPTY
27566: LIST
27567: LIST
27568: PUSH
27569: LD_INT 2
27571: PUSH
27572: LD_INT 30
27574: PUSH
27575: LD_INT 0
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: PUSH
27582: LD_INT 30
27584: PUSH
27585: LD_INT 1
27587: PUSH
27588: EMPTY
27589: LIST
27590: LIST
27591: PUSH
27592: EMPTY
27593: LIST
27594: LIST
27595: LIST
27596: PUSH
27597: EMPTY
27598: LIST
27599: LIST
27600: PPUSH
27601: CALL_OW 69
27605: ST_TO_ADDR
// if not depot then
27606: LD_VAR 0 1
27610: NOT
27611: IFFALSE 27615
// exit ;
27613: GO 27650
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27615: LD_VAR 0 1
27619: PUSH
27620: LD_INT 1
27622: ARRAY
27623: PPUSH
27624: CALL_OW 250
27628: PPUSH
27629: LD_VAR 0 1
27633: PUSH
27634: LD_INT 1
27636: ARRAY
27637: PPUSH
27638: CALL_OW 251
27642: PPUSH
27643: LD_INT 70
27645: PPUSH
27646: CALL_OW 495
// end ;
27650: PPOPN 1
27652: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27653: LD_EXP 77
27657: PUSH
27658: LD_EXP 111
27662: AND
27663: IFFALSE 27874
27665: GO 27667
27667: DISABLE
27668: LD_INT 0
27670: PPUSH
27671: PPUSH
27672: PPUSH
27673: PPUSH
27674: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27675: LD_ADDR_VAR 0 5
27679: PUSH
27680: LD_INT 22
27682: PUSH
27683: LD_OWVAR 2
27687: PUSH
27688: EMPTY
27689: LIST
27690: LIST
27691: PUSH
27692: LD_INT 21
27694: PUSH
27695: LD_INT 1
27697: PUSH
27698: EMPTY
27699: LIST
27700: LIST
27701: PUSH
27702: EMPTY
27703: LIST
27704: LIST
27705: PPUSH
27706: CALL_OW 69
27710: ST_TO_ADDR
// if not tmp then
27711: LD_VAR 0 5
27715: NOT
27716: IFFALSE 27720
// exit ;
27718: GO 27874
// for i in tmp do
27720: LD_ADDR_VAR 0 1
27724: PUSH
27725: LD_VAR 0 5
27729: PUSH
27730: FOR_IN
27731: IFFALSE 27872
// begin d := rand ( 0 , 5 ) ;
27733: LD_ADDR_VAR 0 4
27737: PUSH
27738: LD_INT 0
27740: PPUSH
27741: LD_INT 5
27743: PPUSH
27744: CALL_OW 12
27748: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27749: LD_ADDR_VAR 0 2
27753: PUSH
27754: LD_VAR 0 1
27758: PPUSH
27759: CALL_OW 250
27763: PPUSH
27764: LD_VAR 0 4
27768: PPUSH
27769: LD_INT 3
27771: PPUSH
27772: LD_INT 12
27774: PPUSH
27775: CALL_OW 12
27779: PPUSH
27780: CALL_OW 272
27784: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27785: LD_ADDR_VAR 0 3
27789: PUSH
27790: LD_VAR 0 1
27794: PPUSH
27795: CALL_OW 251
27799: PPUSH
27800: LD_VAR 0 4
27804: PPUSH
27805: LD_INT 3
27807: PPUSH
27808: LD_INT 12
27810: PPUSH
27811: CALL_OW 12
27815: PPUSH
27816: CALL_OW 273
27820: ST_TO_ADDR
// if ValidHex ( x , y ) then
27821: LD_VAR 0 2
27825: PPUSH
27826: LD_VAR 0 3
27830: PPUSH
27831: CALL_OW 488
27835: IFFALSE 27870
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
27837: LD_VAR 0 1
27841: PPUSH
27842: LD_VAR 0 2
27846: PPUSH
27847: LD_VAR 0 3
27851: PPUSH
27852: LD_INT 3
27854: PPUSH
27855: LD_INT 6
27857: PPUSH
27858: CALL_OW 12
27862: PPUSH
27863: LD_INT 1
27865: PPUSH
27866: CALL_OW 483
// end ;
27870: GO 27730
27872: POP
27873: POP
// end ;
27874: PPOPN 5
27876: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
27877: LD_EXP 77
27881: PUSH
27882: LD_EXP 112
27886: AND
27887: IFFALSE 27981
27889: GO 27891
27891: DISABLE
27892: LD_INT 0
27894: PPUSH
27895: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
27896: LD_ADDR_VAR 0 2
27900: PUSH
27901: LD_INT 22
27903: PUSH
27904: LD_OWVAR 2
27908: PUSH
27909: EMPTY
27910: LIST
27911: LIST
27912: PUSH
27913: LD_INT 32
27915: PUSH
27916: LD_INT 1
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: PUSH
27923: LD_INT 21
27925: PUSH
27926: LD_INT 2
27928: PUSH
27929: EMPTY
27930: LIST
27931: LIST
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: LIST
27937: PPUSH
27938: CALL_OW 69
27942: ST_TO_ADDR
// if not tmp then
27943: LD_VAR 0 2
27947: NOT
27948: IFFALSE 27952
// exit ;
27950: GO 27981
// for i in tmp do
27952: LD_ADDR_VAR 0 1
27956: PUSH
27957: LD_VAR 0 2
27961: PUSH
27962: FOR_IN
27963: IFFALSE 27979
// SetFuel ( i , 0 ) ;
27965: LD_VAR 0 1
27969: PPUSH
27970: LD_INT 0
27972: PPUSH
27973: CALL_OW 240
27977: GO 27962
27979: POP
27980: POP
// end ;
27981: PPOPN 2
27983: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
27984: LD_EXP 77
27988: PUSH
27989: LD_EXP 113
27993: AND
27994: IFFALSE 28060
27996: GO 27998
27998: DISABLE
27999: LD_INT 0
28001: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28002: LD_ADDR_VAR 0 1
28006: PUSH
28007: LD_INT 22
28009: PUSH
28010: LD_OWVAR 2
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: PUSH
28019: LD_INT 30
28021: PUSH
28022: LD_INT 29
28024: PUSH
28025: EMPTY
28026: LIST
28027: LIST
28028: PUSH
28029: EMPTY
28030: LIST
28031: LIST
28032: PPUSH
28033: CALL_OW 69
28037: ST_TO_ADDR
// if not tmp then
28038: LD_VAR 0 1
28042: NOT
28043: IFFALSE 28047
// exit ;
28045: GO 28060
// DestroyUnit ( tmp [ 1 ] ) ;
28047: LD_VAR 0 1
28051: PUSH
28052: LD_INT 1
28054: ARRAY
28055: PPUSH
28056: CALL_OW 65
// end ;
28060: PPOPN 1
28062: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28063: LD_EXP 77
28067: PUSH
28068: LD_EXP 115
28072: AND
28073: IFFALSE 28202
28075: GO 28077
28077: DISABLE
28078: LD_INT 0
28080: PPUSH
// begin uc_side := 0 ;
28081: LD_ADDR_OWVAR 20
28085: PUSH
28086: LD_INT 0
28088: ST_TO_ADDR
// uc_nation := nation_arabian ;
28089: LD_ADDR_OWVAR 21
28093: PUSH
28094: LD_INT 2
28096: ST_TO_ADDR
// hc_gallery :=  ;
28097: LD_ADDR_OWVAR 33
28101: PUSH
28102: LD_STRING 
28104: ST_TO_ADDR
// hc_name :=  ;
28105: LD_ADDR_OWVAR 26
28109: PUSH
28110: LD_STRING 
28112: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28113: LD_INT 1
28115: PPUSH
28116: LD_INT 11
28118: PPUSH
28119: LD_INT 10
28121: PPUSH
28122: CALL_OW 380
// un := CreateHuman ;
28126: LD_ADDR_VAR 0 1
28130: PUSH
28131: CALL_OW 44
28135: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28136: LD_VAR 0 1
28140: PPUSH
28141: LD_INT 1
28143: PPUSH
28144: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28148: LD_INT 35
28150: PPUSH
28151: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28155: LD_VAR 0 1
28159: PPUSH
28160: LD_INT 22
28162: PUSH
28163: LD_OWVAR 2
28167: PUSH
28168: EMPTY
28169: LIST
28170: LIST
28171: PPUSH
28172: CALL_OW 69
28176: PPUSH
28177: LD_VAR 0 1
28181: PPUSH
28182: CALL_OW 74
28186: PPUSH
28187: CALL_OW 115
// until IsDead ( un ) ;
28191: LD_VAR 0 1
28195: PPUSH
28196: CALL_OW 301
28200: IFFALSE 28148
// end ;
28202: PPOPN 1
28204: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28205: LD_EXP 77
28209: PUSH
28210: LD_EXP 117
28214: AND
28215: IFFALSE 28227
28217: GO 28219
28219: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28220: LD_STRING earthquake(getX(game), 0, 32)
28222: PPUSH
28223: CALL_OW 559
28227: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28228: LD_EXP 77
28232: PUSH
28233: LD_EXP 118
28237: AND
28238: IFFALSE 28329
28240: GO 28242
28242: DISABLE
28243: LD_INT 0
28245: PPUSH
// begin enable ;
28246: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28247: LD_ADDR_VAR 0 1
28251: PUSH
28252: LD_INT 22
28254: PUSH
28255: LD_OWVAR 2
28259: PUSH
28260: EMPTY
28261: LIST
28262: LIST
28263: PUSH
28264: LD_INT 21
28266: PUSH
28267: LD_INT 2
28269: PUSH
28270: EMPTY
28271: LIST
28272: LIST
28273: PUSH
28274: LD_INT 33
28276: PUSH
28277: LD_INT 3
28279: PUSH
28280: EMPTY
28281: LIST
28282: LIST
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: LIST
28288: PPUSH
28289: CALL_OW 69
28293: ST_TO_ADDR
// if not tmp then
28294: LD_VAR 0 1
28298: NOT
28299: IFFALSE 28303
// exit ;
28301: GO 28329
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28303: LD_VAR 0 1
28307: PUSH
28308: LD_INT 1
28310: PPUSH
28311: LD_VAR 0 1
28315: PPUSH
28316: CALL_OW 12
28320: ARRAY
28321: PPUSH
28322: LD_INT 1
28324: PPUSH
28325: CALL_OW 234
// end ;
28329: PPOPN 1
28331: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28332: LD_EXP 77
28336: PUSH
28337: LD_EXP 119
28341: AND
28342: IFFALSE 28483
28344: GO 28346
28346: DISABLE
28347: LD_INT 0
28349: PPUSH
28350: PPUSH
28351: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28352: LD_ADDR_VAR 0 3
28356: PUSH
28357: LD_INT 22
28359: PUSH
28360: LD_OWVAR 2
28364: PUSH
28365: EMPTY
28366: LIST
28367: LIST
28368: PUSH
28369: LD_INT 25
28371: PUSH
28372: LD_INT 1
28374: PUSH
28375: EMPTY
28376: LIST
28377: LIST
28378: PUSH
28379: EMPTY
28380: LIST
28381: LIST
28382: PPUSH
28383: CALL_OW 69
28387: ST_TO_ADDR
// if not tmp then
28388: LD_VAR 0 3
28392: NOT
28393: IFFALSE 28397
// exit ;
28395: GO 28483
// un := tmp [ rand ( 1 , tmp ) ] ;
28397: LD_ADDR_VAR 0 2
28401: PUSH
28402: LD_VAR 0 3
28406: PUSH
28407: LD_INT 1
28409: PPUSH
28410: LD_VAR 0 3
28414: PPUSH
28415: CALL_OW 12
28419: ARRAY
28420: ST_TO_ADDR
// if Crawls ( un ) then
28421: LD_VAR 0 2
28425: PPUSH
28426: CALL_OW 318
28430: IFFALSE 28441
// ComWalk ( un ) ;
28432: LD_VAR 0 2
28436: PPUSH
28437: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28441: LD_VAR 0 2
28445: PPUSH
28446: LD_INT 9
28448: PPUSH
28449: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28453: LD_INT 28
28455: PPUSH
28456: LD_OWVAR 2
28460: PPUSH
28461: LD_INT 2
28463: PPUSH
28464: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28468: LD_INT 29
28470: PPUSH
28471: LD_OWVAR 2
28475: PPUSH
28476: LD_INT 2
28478: PPUSH
28479: CALL_OW 322
// end ;
28483: PPOPN 3
28485: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28486: LD_EXP 77
28490: PUSH
28491: LD_EXP 120
28495: AND
28496: IFFALSE 28607
28498: GO 28500
28500: DISABLE
28501: LD_INT 0
28503: PPUSH
28504: PPUSH
28505: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28506: LD_ADDR_VAR 0 3
28510: PUSH
28511: LD_INT 22
28513: PUSH
28514: LD_OWVAR 2
28518: PUSH
28519: EMPTY
28520: LIST
28521: LIST
28522: PUSH
28523: LD_INT 25
28525: PUSH
28526: LD_INT 1
28528: PUSH
28529: EMPTY
28530: LIST
28531: LIST
28532: PUSH
28533: EMPTY
28534: LIST
28535: LIST
28536: PPUSH
28537: CALL_OW 69
28541: ST_TO_ADDR
// if not tmp then
28542: LD_VAR 0 3
28546: NOT
28547: IFFALSE 28551
// exit ;
28549: GO 28607
// un := tmp [ rand ( 1 , tmp ) ] ;
28551: LD_ADDR_VAR 0 2
28555: PUSH
28556: LD_VAR 0 3
28560: PUSH
28561: LD_INT 1
28563: PPUSH
28564: LD_VAR 0 3
28568: PPUSH
28569: CALL_OW 12
28573: ARRAY
28574: ST_TO_ADDR
// if Crawls ( un ) then
28575: LD_VAR 0 2
28579: PPUSH
28580: CALL_OW 318
28584: IFFALSE 28595
// ComWalk ( un ) ;
28586: LD_VAR 0 2
28590: PPUSH
28591: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28595: LD_VAR 0 2
28599: PPUSH
28600: LD_INT 8
28602: PPUSH
28603: CALL_OW 336
// end ;
28607: PPOPN 3
28609: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28610: LD_EXP 77
28614: PUSH
28615: LD_EXP 121
28619: AND
28620: IFFALSE 28764
28622: GO 28624
28624: DISABLE
28625: LD_INT 0
28627: PPUSH
28628: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28629: LD_ADDR_VAR 0 2
28633: PUSH
28634: LD_INT 22
28636: PUSH
28637: LD_OWVAR 2
28641: PUSH
28642: EMPTY
28643: LIST
28644: LIST
28645: PUSH
28646: LD_INT 21
28648: PUSH
28649: LD_INT 2
28651: PUSH
28652: EMPTY
28653: LIST
28654: LIST
28655: PUSH
28656: LD_INT 2
28658: PUSH
28659: LD_INT 34
28661: PUSH
28662: LD_INT 12
28664: PUSH
28665: EMPTY
28666: LIST
28667: LIST
28668: PUSH
28669: LD_INT 34
28671: PUSH
28672: LD_INT 51
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: PUSH
28679: LD_INT 34
28681: PUSH
28682: LD_INT 32
28684: PUSH
28685: EMPTY
28686: LIST
28687: LIST
28688: PUSH
28689: EMPTY
28690: LIST
28691: LIST
28692: LIST
28693: LIST
28694: PUSH
28695: EMPTY
28696: LIST
28697: LIST
28698: LIST
28699: PPUSH
28700: CALL_OW 69
28704: ST_TO_ADDR
// if not tmp then
28705: LD_VAR 0 2
28709: NOT
28710: IFFALSE 28714
// exit ;
28712: GO 28764
// for i in tmp do
28714: LD_ADDR_VAR 0 1
28718: PUSH
28719: LD_VAR 0 2
28723: PUSH
28724: FOR_IN
28725: IFFALSE 28762
// if GetCargo ( i , mat_artifact ) = 0 then
28727: LD_VAR 0 1
28731: PPUSH
28732: LD_INT 4
28734: PPUSH
28735: CALL_OW 289
28739: PUSH
28740: LD_INT 0
28742: EQUAL
28743: IFFALSE 28760
// SetCargo ( i , mat_siberit , 100 ) ;
28745: LD_VAR 0 1
28749: PPUSH
28750: LD_INT 3
28752: PPUSH
28753: LD_INT 100
28755: PPUSH
28756: CALL_OW 290
28760: GO 28724
28762: POP
28763: POP
// end ;
28764: PPOPN 2
28766: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28767: LD_EXP 77
28771: PUSH
28772: LD_EXP 122
28776: AND
28777: IFFALSE 28960
28779: GO 28781
28781: DISABLE
28782: LD_INT 0
28784: PPUSH
28785: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28786: LD_ADDR_VAR 0 2
28790: PUSH
28791: LD_INT 22
28793: PUSH
28794: LD_OWVAR 2
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: PPUSH
28803: CALL_OW 69
28807: ST_TO_ADDR
// if not tmp then
28808: LD_VAR 0 2
28812: NOT
28813: IFFALSE 28817
// exit ;
28815: GO 28960
// for i := 1 to 2 do
28817: LD_ADDR_VAR 0 1
28821: PUSH
28822: DOUBLE
28823: LD_INT 1
28825: DEC
28826: ST_TO_ADDR
28827: LD_INT 2
28829: PUSH
28830: FOR_TO
28831: IFFALSE 28958
// begin uc_side := your_side ;
28833: LD_ADDR_OWVAR 20
28837: PUSH
28838: LD_OWVAR 2
28842: ST_TO_ADDR
// uc_nation := nation_american ;
28843: LD_ADDR_OWVAR 21
28847: PUSH
28848: LD_INT 1
28850: ST_TO_ADDR
// vc_chassis := us_morphling ;
28851: LD_ADDR_OWVAR 37
28855: PUSH
28856: LD_INT 5
28858: ST_TO_ADDR
// vc_engine := engine_siberite ;
28859: LD_ADDR_OWVAR 39
28863: PUSH
28864: LD_INT 3
28866: ST_TO_ADDR
// vc_control := control_computer ;
28867: LD_ADDR_OWVAR 38
28871: PUSH
28872: LD_INT 3
28874: ST_TO_ADDR
// vc_weapon := us_double_laser ;
28875: LD_ADDR_OWVAR 40
28879: PUSH
28880: LD_INT 10
28882: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
28883: LD_VAR 0 2
28887: PUSH
28888: LD_INT 1
28890: ARRAY
28891: PPUSH
28892: CALL_OW 310
28896: NOT
28897: IFFALSE 28944
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
28899: CALL_OW 45
28903: PPUSH
28904: LD_VAR 0 2
28908: PUSH
28909: LD_INT 1
28911: ARRAY
28912: PPUSH
28913: CALL_OW 250
28917: PPUSH
28918: LD_VAR 0 2
28922: PUSH
28923: LD_INT 1
28925: ARRAY
28926: PPUSH
28927: CALL_OW 251
28931: PPUSH
28932: LD_INT 12
28934: PPUSH
28935: LD_INT 1
28937: PPUSH
28938: CALL_OW 50
28942: GO 28956
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28944: CALL_OW 45
28948: PPUSH
28949: LD_INT 1
28951: PPUSH
28952: CALL_OW 51
// end ;
28956: GO 28830
28958: POP
28959: POP
// end ;
28960: PPOPN 2
28962: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
28963: LD_EXP 77
28967: PUSH
28968: LD_EXP 123
28972: AND
28973: IFFALSE 29195
28975: GO 28977
28977: DISABLE
28978: LD_INT 0
28980: PPUSH
28981: PPUSH
28982: PPUSH
28983: PPUSH
28984: PPUSH
28985: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28986: LD_ADDR_VAR 0 6
28990: PUSH
28991: LD_INT 22
28993: PUSH
28994: LD_OWVAR 2
28998: PUSH
28999: EMPTY
29000: LIST
29001: LIST
29002: PUSH
29003: LD_INT 21
29005: PUSH
29006: LD_INT 1
29008: PUSH
29009: EMPTY
29010: LIST
29011: LIST
29012: PUSH
29013: LD_INT 3
29015: PUSH
29016: LD_INT 23
29018: PUSH
29019: LD_INT 0
29021: PUSH
29022: EMPTY
29023: LIST
29024: LIST
29025: PUSH
29026: EMPTY
29027: LIST
29028: LIST
29029: PUSH
29030: EMPTY
29031: LIST
29032: LIST
29033: LIST
29034: PPUSH
29035: CALL_OW 69
29039: ST_TO_ADDR
// if not tmp then
29040: LD_VAR 0 6
29044: NOT
29045: IFFALSE 29049
// exit ;
29047: GO 29195
// s1 := rand ( 1 , 4 ) ;
29049: LD_ADDR_VAR 0 2
29053: PUSH
29054: LD_INT 1
29056: PPUSH
29057: LD_INT 4
29059: PPUSH
29060: CALL_OW 12
29064: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29065: LD_ADDR_VAR 0 4
29069: PUSH
29070: LD_VAR 0 6
29074: PUSH
29075: LD_INT 1
29077: ARRAY
29078: PPUSH
29079: LD_VAR 0 2
29083: PPUSH
29084: CALL_OW 259
29088: ST_TO_ADDR
// if s1 = 1 then
29089: LD_VAR 0 2
29093: PUSH
29094: LD_INT 1
29096: EQUAL
29097: IFFALSE 29117
// s2 := rand ( 2 , 4 ) else
29099: LD_ADDR_VAR 0 3
29103: PUSH
29104: LD_INT 2
29106: PPUSH
29107: LD_INT 4
29109: PPUSH
29110: CALL_OW 12
29114: ST_TO_ADDR
29115: GO 29125
// s2 := 1 ;
29117: LD_ADDR_VAR 0 3
29121: PUSH
29122: LD_INT 1
29124: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29125: LD_ADDR_VAR 0 5
29129: PUSH
29130: LD_VAR 0 6
29134: PUSH
29135: LD_INT 1
29137: ARRAY
29138: PPUSH
29139: LD_VAR 0 3
29143: PPUSH
29144: CALL_OW 259
29148: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29149: LD_VAR 0 6
29153: PUSH
29154: LD_INT 1
29156: ARRAY
29157: PPUSH
29158: LD_VAR 0 2
29162: PPUSH
29163: LD_VAR 0 5
29167: PPUSH
29168: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29172: LD_VAR 0 6
29176: PUSH
29177: LD_INT 1
29179: ARRAY
29180: PPUSH
29181: LD_VAR 0 3
29185: PPUSH
29186: LD_VAR 0 4
29190: PPUSH
29191: CALL_OW 237
// end ;
29195: PPOPN 6
29197: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29198: LD_EXP 77
29202: PUSH
29203: LD_EXP 124
29207: AND
29208: IFFALSE 29287
29210: GO 29212
29212: DISABLE
29213: LD_INT 0
29215: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29216: LD_ADDR_VAR 0 1
29220: PUSH
29221: LD_INT 22
29223: PUSH
29224: LD_OWVAR 2
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: PUSH
29233: LD_INT 30
29235: PUSH
29236: LD_INT 3
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: PPUSH
29247: CALL_OW 69
29251: ST_TO_ADDR
// if not tmp then
29252: LD_VAR 0 1
29256: NOT
29257: IFFALSE 29261
// exit ;
29259: GO 29287
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29261: LD_VAR 0 1
29265: PUSH
29266: LD_INT 1
29268: PPUSH
29269: LD_VAR 0 1
29273: PPUSH
29274: CALL_OW 12
29278: ARRAY
29279: PPUSH
29280: LD_INT 1
29282: PPUSH
29283: CALL_OW 234
// end ;
29287: PPOPN 1
29289: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29290: LD_EXP 77
29294: PUSH
29295: LD_EXP 125
29299: AND
29300: IFFALSE 29412
29302: GO 29304
29304: DISABLE
29305: LD_INT 0
29307: PPUSH
29308: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29309: LD_ADDR_VAR 0 2
29313: PUSH
29314: LD_INT 22
29316: PUSH
29317: LD_OWVAR 2
29321: PUSH
29322: EMPTY
29323: LIST
29324: LIST
29325: PUSH
29326: LD_INT 2
29328: PUSH
29329: LD_INT 30
29331: PUSH
29332: LD_INT 27
29334: PUSH
29335: EMPTY
29336: LIST
29337: LIST
29338: PUSH
29339: LD_INT 30
29341: PUSH
29342: LD_INT 26
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: PUSH
29349: LD_INT 30
29351: PUSH
29352: LD_INT 28
29354: PUSH
29355: EMPTY
29356: LIST
29357: LIST
29358: PUSH
29359: EMPTY
29360: LIST
29361: LIST
29362: LIST
29363: LIST
29364: PUSH
29365: EMPTY
29366: LIST
29367: LIST
29368: PPUSH
29369: CALL_OW 69
29373: ST_TO_ADDR
// if not tmp then
29374: LD_VAR 0 2
29378: NOT
29379: IFFALSE 29383
// exit ;
29381: GO 29412
// for i in tmp do
29383: LD_ADDR_VAR 0 1
29387: PUSH
29388: LD_VAR 0 2
29392: PUSH
29393: FOR_IN
29394: IFFALSE 29410
// SetLives ( i , 1 ) ;
29396: LD_VAR 0 1
29400: PPUSH
29401: LD_INT 1
29403: PPUSH
29404: CALL_OW 234
29408: GO 29393
29410: POP
29411: POP
// end ;
29412: PPOPN 2
29414: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29415: LD_EXP 77
29419: PUSH
29420: LD_EXP 126
29424: AND
29425: IFFALSE 29699
29427: GO 29429
29429: DISABLE
29430: LD_INT 0
29432: PPUSH
29433: PPUSH
29434: PPUSH
// begin i := rand ( 1 , 7 ) ;
29435: LD_ADDR_VAR 0 1
29439: PUSH
29440: LD_INT 1
29442: PPUSH
29443: LD_INT 7
29445: PPUSH
29446: CALL_OW 12
29450: ST_TO_ADDR
// case i of 1 :
29451: LD_VAR 0 1
29455: PUSH
29456: LD_INT 1
29458: DOUBLE
29459: EQUAL
29460: IFTRUE 29464
29462: GO 29474
29464: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29465: LD_STRING earthquake(getX(game), 0, 32)
29467: PPUSH
29468: CALL_OW 559
29472: GO 29699
29474: LD_INT 2
29476: DOUBLE
29477: EQUAL
29478: IFTRUE 29482
29480: GO 29496
29482: POP
// begin ToLua ( displayStucuk(); ) ;
29483: LD_STRING displayStucuk();
29485: PPUSH
29486: CALL_OW 559
// ResetFog ;
29490: CALL_OW 335
// end ; 3 :
29494: GO 29699
29496: LD_INT 3
29498: DOUBLE
29499: EQUAL
29500: IFTRUE 29504
29502: GO 29608
29504: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29505: LD_ADDR_VAR 0 2
29509: PUSH
29510: LD_INT 22
29512: PUSH
29513: LD_OWVAR 2
29517: PUSH
29518: EMPTY
29519: LIST
29520: LIST
29521: PUSH
29522: LD_INT 25
29524: PUSH
29525: LD_INT 1
29527: PUSH
29528: EMPTY
29529: LIST
29530: LIST
29531: PUSH
29532: EMPTY
29533: LIST
29534: LIST
29535: PPUSH
29536: CALL_OW 69
29540: ST_TO_ADDR
// if not tmp then
29541: LD_VAR 0 2
29545: NOT
29546: IFFALSE 29550
// exit ;
29548: GO 29699
// un := tmp [ rand ( 1 , tmp ) ] ;
29550: LD_ADDR_VAR 0 3
29554: PUSH
29555: LD_VAR 0 2
29559: PUSH
29560: LD_INT 1
29562: PPUSH
29563: LD_VAR 0 2
29567: PPUSH
29568: CALL_OW 12
29572: ARRAY
29573: ST_TO_ADDR
// if Crawls ( un ) then
29574: LD_VAR 0 3
29578: PPUSH
29579: CALL_OW 318
29583: IFFALSE 29594
// ComWalk ( un ) ;
29585: LD_VAR 0 3
29589: PPUSH
29590: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29594: LD_VAR 0 3
29598: PPUSH
29599: LD_INT 8
29601: PPUSH
29602: CALL_OW 336
// end ; 4 :
29606: GO 29699
29608: LD_INT 4
29610: DOUBLE
29611: EQUAL
29612: IFTRUE 29616
29614: GO 29677
29616: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29617: LD_ADDR_VAR 0 2
29621: PUSH
29622: LD_INT 22
29624: PUSH
29625: LD_OWVAR 2
29629: PUSH
29630: EMPTY
29631: LIST
29632: LIST
29633: PUSH
29634: LD_INT 30
29636: PUSH
29637: LD_INT 29
29639: PUSH
29640: EMPTY
29641: LIST
29642: LIST
29643: PUSH
29644: EMPTY
29645: LIST
29646: LIST
29647: PPUSH
29648: CALL_OW 69
29652: ST_TO_ADDR
// if not tmp then
29653: LD_VAR 0 2
29657: NOT
29658: IFFALSE 29662
// exit ;
29660: GO 29699
// DestroyUnit ( tmp [ 1 ] ) ;
29662: LD_VAR 0 2
29666: PUSH
29667: LD_INT 1
29669: ARRAY
29670: PPUSH
29671: CALL_OW 65
// end ; 5 .. 7 :
29675: GO 29699
29677: LD_INT 5
29679: DOUBLE
29680: GREATEREQUAL
29681: IFFALSE 29689
29683: LD_INT 7
29685: DOUBLE
29686: LESSEQUAL
29687: IFTRUE 29691
29689: GO 29698
29691: POP
// StreamSibBomb ; end ;
29692: CALL 25949 0 0
29696: GO 29699
29698: POP
// end ;
29699: PPOPN 3
29701: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29702: LD_EXP 77
29706: PUSH
29707: LD_EXP 127
29711: AND
29712: IFFALSE 29868
29714: GO 29716
29716: DISABLE
29717: LD_INT 0
29719: PPUSH
29720: PPUSH
29721: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29722: LD_ADDR_VAR 0 2
29726: PUSH
29727: LD_INT 81
29729: PUSH
29730: LD_OWVAR 2
29734: PUSH
29735: EMPTY
29736: LIST
29737: LIST
29738: PUSH
29739: LD_INT 2
29741: PUSH
29742: LD_INT 21
29744: PUSH
29745: LD_INT 1
29747: PUSH
29748: EMPTY
29749: LIST
29750: LIST
29751: PUSH
29752: LD_INT 21
29754: PUSH
29755: LD_INT 2
29757: PUSH
29758: EMPTY
29759: LIST
29760: LIST
29761: PUSH
29762: EMPTY
29763: LIST
29764: LIST
29765: LIST
29766: PUSH
29767: EMPTY
29768: LIST
29769: LIST
29770: PPUSH
29771: CALL_OW 69
29775: ST_TO_ADDR
// if not tmp then
29776: LD_VAR 0 2
29780: NOT
29781: IFFALSE 29785
// exit ;
29783: GO 29868
// p := 0 ;
29785: LD_ADDR_VAR 0 3
29789: PUSH
29790: LD_INT 0
29792: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29793: LD_INT 35
29795: PPUSH
29796: CALL_OW 67
// p := p + 1 ;
29800: LD_ADDR_VAR 0 3
29804: PUSH
29805: LD_VAR 0 3
29809: PUSH
29810: LD_INT 1
29812: PLUS
29813: ST_TO_ADDR
// for i in tmp do
29814: LD_ADDR_VAR 0 1
29818: PUSH
29819: LD_VAR 0 2
29823: PUSH
29824: FOR_IN
29825: IFFALSE 29856
// if GetLives ( i ) < 1000 then
29827: LD_VAR 0 1
29831: PPUSH
29832: CALL_OW 256
29836: PUSH
29837: LD_INT 1000
29839: LESS
29840: IFFALSE 29854
// SetLives ( i , 1000 ) ;
29842: LD_VAR 0 1
29846: PPUSH
29847: LD_INT 1000
29849: PPUSH
29850: CALL_OW 234
29854: GO 29824
29856: POP
29857: POP
// until p > 20 ;
29858: LD_VAR 0 3
29862: PUSH
29863: LD_INT 20
29865: GREATER
29866: IFFALSE 29793
// end ;
29868: PPOPN 3
29870: END
// every 0 0$1 trigger StreamModeActive and sTime do
29871: LD_EXP 77
29875: PUSH
29876: LD_EXP 128
29880: AND
29881: IFFALSE 29916
29883: GO 29885
29885: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
29886: LD_INT 28
29888: PPUSH
29889: LD_OWVAR 2
29893: PPUSH
29894: LD_INT 2
29896: PPUSH
29897: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
29901: LD_INT 30
29903: PPUSH
29904: LD_OWVAR 2
29908: PPUSH
29909: LD_INT 2
29911: PPUSH
29912: CALL_OW 322
// end ;
29916: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
29917: LD_EXP 77
29921: PUSH
29922: LD_EXP 129
29926: AND
29927: IFFALSE 30048
29929: GO 29931
29931: DISABLE
29932: LD_INT 0
29934: PPUSH
29935: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29936: LD_ADDR_VAR 0 2
29940: PUSH
29941: LD_INT 22
29943: PUSH
29944: LD_OWVAR 2
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: PUSH
29953: LD_INT 21
29955: PUSH
29956: LD_INT 1
29958: PUSH
29959: EMPTY
29960: LIST
29961: LIST
29962: PUSH
29963: LD_INT 3
29965: PUSH
29966: LD_INT 23
29968: PUSH
29969: LD_INT 0
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: PUSH
29976: EMPTY
29977: LIST
29978: LIST
29979: PUSH
29980: EMPTY
29981: LIST
29982: LIST
29983: LIST
29984: PPUSH
29985: CALL_OW 69
29989: ST_TO_ADDR
// if not tmp then
29990: LD_VAR 0 2
29994: NOT
29995: IFFALSE 29999
// exit ;
29997: GO 30048
// for i in tmp do
29999: LD_ADDR_VAR 0 1
30003: PUSH
30004: LD_VAR 0 2
30008: PUSH
30009: FOR_IN
30010: IFFALSE 30046
// begin if Crawls ( i ) then
30012: LD_VAR 0 1
30016: PPUSH
30017: CALL_OW 318
30021: IFFALSE 30032
// ComWalk ( i ) ;
30023: LD_VAR 0 1
30027: PPUSH
30028: CALL_OW 138
// SetClass ( i , 2 ) ;
30032: LD_VAR 0 1
30036: PPUSH
30037: LD_INT 2
30039: PPUSH
30040: CALL_OW 336
// end ;
30044: GO 30009
30046: POP
30047: POP
// end ;
30048: PPOPN 2
30050: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30051: LD_EXP 77
30055: PUSH
30056: LD_EXP 130
30060: AND
30061: IFFALSE 30342
30063: GO 30065
30065: DISABLE
30066: LD_INT 0
30068: PPUSH
30069: PPUSH
30070: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30071: LD_OWVAR 2
30075: PPUSH
30076: LD_INT 9
30078: PPUSH
30079: LD_INT 1
30081: PPUSH
30082: LD_INT 1
30084: PPUSH
30085: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30089: LD_INT 9
30091: PPUSH
30092: LD_OWVAR 2
30096: PPUSH
30097: CALL_OW 343
// uc_side := 9 ;
30101: LD_ADDR_OWVAR 20
30105: PUSH
30106: LD_INT 9
30108: ST_TO_ADDR
// uc_nation := 2 ;
30109: LD_ADDR_OWVAR 21
30113: PUSH
30114: LD_INT 2
30116: ST_TO_ADDR
// hc_name := Dark Warrior ;
30117: LD_ADDR_OWVAR 26
30121: PUSH
30122: LD_STRING Dark Warrior
30124: ST_TO_ADDR
// hc_gallery :=  ;
30125: LD_ADDR_OWVAR 33
30129: PUSH
30130: LD_STRING 
30132: ST_TO_ADDR
// hc_noskilllimit := true ;
30133: LD_ADDR_OWVAR 76
30137: PUSH
30138: LD_INT 1
30140: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30141: LD_ADDR_OWVAR 31
30145: PUSH
30146: LD_INT 30
30148: PUSH
30149: LD_INT 30
30151: PUSH
30152: LD_INT 30
30154: PUSH
30155: LD_INT 30
30157: PUSH
30158: EMPTY
30159: LIST
30160: LIST
30161: LIST
30162: LIST
30163: ST_TO_ADDR
// un := CreateHuman ;
30164: LD_ADDR_VAR 0 3
30168: PUSH
30169: CALL_OW 44
30173: ST_TO_ADDR
// hc_noskilllimit := false ;
30174: LD_ADDR_OWVAR 76
30178: PUSH
30179: LD_INT 0
30181: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30182: LD_VAR 0 3
30186: PPUSH
30187: LD_INT 1
30189: PPUSH
30190: CALL_OW 51
// p := 0 ;
30194: LD_ADDR_VAR 0 2
30198: PUSH
30199: LD_INT 0
30201: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30202: LD_INT 35
30204: PPUSH
30205: CALL_OW 67
// p := p + 1 ;
30209: LD_ADDR_VAR 0 2
30213: PUSH
30214: LD_VAR 0 2
30218: PUSH
30219: LD_INT 1
30221: PLUS
30222: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30223: LD_VAR 0 3
30227: PPUSH
30228: CALL_OW 256
30232: PUSH
30233: LD_INT 1000
30235: LESS
30236: IFFALSE 30250
// SetLives ( un , 1000 ) ;
30238: LD_VAR 0 3
30242: PPUSH
30243: LD_INT 1000
30245: PPUSH
30246: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30250: LD_VAR 0 3
30254: PPUSH
30255: LD_INT 81
30257: PUSH
30258: LD_OWVAR 2
30262: PUSH
30263: EMPTY
30264: LIST
30265: LIST
30266: PUSH
30267: LD_INT 91
30269: PUSH
30270: LD_VAR 0 3
30274: PUSH
30275: LD_INT 30
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: LIST
30282: PUSH
30283: EMPTY
30284: LIST
30285: LIST
30286: PPUSH
30287: CALL_OW 69
30291: PPUSH
30292: LD_VAR 0 3
30296: PPUSH
30297: CALL_OW 74
30301: PPUSH
30302: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
30306: LD_VAR 0 2
30310: PUSH
30311: LD_INT 60
30313: GREATER
30314: PUSH
30315: LD_VAR 0 3
30319: PPUSH
30320: CALL_OW 301
30324: OR
30325: IFFALSE 30202
// if un then
30327: LD_VAR 0 3
30331: IFFALSE 30342
// RemoveUnit ( un ) ;
30333: LD_VAR 0 3
30337: PPUSH
30338: CALL_OW 64
// end ;
30342: PPOPN 3
30344: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30345: LD_INT 0
30347: PPUSH
// case cmd of 301 :
30348: LD_VAR 0 1
30352: PUSH
30353: LD_INT 301
30355: DOUBLE
30356: EQUAL
30357: IFTRUE 30361
30359: GO 30393
30361: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
30362: LD_VAR 0 6
30366: PPUSH
30367: LD_VAR 0 7
30371: PPUSH
30372: LD_VAR 0 8
30376: PPUSH
30377: LD_VAR 0 4
30381: PPUSH
30382: LD_VAR 0 5
30386: PPUSH
30387: CALL 31594 0 5
30391: GO 30514
30393: LD_INT 302
30395: DOUBLE
30396: EQUAL
30397: IFTRUE 30401
30399: GO 30438
30401: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
30402: LD_VAR 0 6
30406: PPUSH
30407: LD_VAR 0 7
30411: PPUSH
30412: LD_VAR 0 8
30416: PPUSH
30417: LD_VAR 0 9
30421: PPUSH
30422: LD_VAR 0 4
30426: PPUSH
30427: LD_VAR 0 5
30431: PPUSH
30432: CALL 31685 0 6
30436: GO 30514
30438: LD_INT 303
30440: DOUBLE
30441: EQUAL
30442: IFTRUE 30446
30444: GO 30483
30446: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
30447: LD_VAR 0 6
30451: PPUSH
30452: LD_VAR 0 7
30456: PPUSH
30457: LD_VAR 0 8
30461: PPUSH
30462: LD_VAR 0 9
30466: PPUSH
30467: LD_VAR 0 4
30471: PPUSH
30472: LD_VAR 0 5
30476: PPUSH
30477: CALL 30519 0 6
30481: GO 30514
30483: LD_INT 304
30485: DOUBLE
30486: EQUAL
30487: IFTRUE 30491
30489: GO 30513
30491: POP
// hHackTeleport ( unit , x , y ) ; end ;
30492: LD_VAR 0 2
30496: PPUSH
30497: LD_VAR 0 4
30501: PPUSH
30502: LD_VAR 0 5
30506: PPUSH
30507: CALL 32278 0 3
30511: GO 30514
30513: POP
// end ;
30514: LD_VAR 0 12
30518: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
30519: LD_INT 0
30521: PPUSH
30522: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
30523: LD_VAR 0 1
30527: PUSH
30528: LD_INT 1
30530: LESS
30531: PUSH
30532: LD_VAR 0 1
30536: PUSH
30537: LD_INT 3
30539: GREATER
30540: OR
30541: PUSH
30542: LD_VAR 0 5
30546: PPUSH
30547: LD_VAR 0 6
30551: PPUSH
30552: CALL_OW 428
30556: OR
30557: IFFALSE 30561
// exit ;
30559: GO 31281
// uc_side := your_side ;
30561: LD_ADDR_OWVAR 20
30565: PUSH
30566: LD_OWVAR 2
30570: ST_TO_ADDR
// uc_nation := nation ;
30571: LD_ADDR_OWVAR 21
30575: PUSH
30576: LD_VAR 0 1
30580: ST_TO_ADDR
// bc_level = 1 ;
30581: LD_ADDR_OWVAR 43
30585: PUSH
30586: LD_INT 1
30588: ST_TO_ADDR
// case btype of 1 :
30589: LD_VAR 0 2
30593: PUSH
30594: LD_INT 1
30596: DOUBLE
30597: EQUAL
30598: IFTRUE 30602
30600: GO 30613
30602: POP
// bc_type := b_depot ; 2 :
30603: LD_ADDR_OWVAR 42
30607: PUSH
30608: LD_INT 0
30610: ST_TO_ADDR
30611: GO 31225
30613: LD_INT 2
30615: DOUBLE
30616: EQUAL
30617: IFTRUE 30621
30619: GO 30632
30621: POP
// bc_type := b_warehouse ; 3 :
30622: LD_ADDR_OWVAR 42
30626: PUSH
30627: LD_INT 1
30629: ST_TO_ADDR
30630: GO 31225
30632: LD_INT 3
30634: DOUBLE
30635: EQUAL
30636: IFTRUE 30640
30638: GO 30651
30640: POP
// bc_type := b_lab ; 4 .. 9 :
30641: LD_ADDR_OWVAR 42
30645: PUSH
30646: LD_INT 6
30648: ST_TO_ADDR
30649: GO 31225
30651: LD_INT 4
30653: DOUBLE
30654: GREATEREQUAL
30655: IFFALSE 30663
30657: LD_INT 9
30659: DOUBLE
30660: LESSEQUAL
30661: IFTRUE 30665
30663: GO 30717
30665: POP
// begin bc_type := b_lab_half ;
30666: LD_ADDR_OWVAR 42
30670: PUSH
30671: LD_INT 7
30673: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
30674: LD_ADDR_OWVAR 44
30678: PUSH
30679: LD_INT 10
30681: PUSH
30682: LD_INT 11
30684: PUSH
30685: LD_INT 12
30687: PUSH
30688: LD_INT 15
30690: PUSH
30691: LD_INT 14
30693: PUSH
30694: LD_INT 13
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: LIST
30701: LIST
30702: LIST
30703: LIST
30704: PUSH
30705: LD_VAR 0 2
30709: PUSH
30710: LD_INT 3
30712: MINUS
30713: ARRAY
30714: ST_TO_ADDR
// end ; 10 .. 13 :
30715: GO 31225
30717: LD_INT 10
30719: DOUBLE
30720: GREATEREQUAL
30721: IFFALSE 30729
30723: LD_INT 13
30725: DOUBLE
30726: LESSEQUAL
30727: IFTRUE 30731
30729: GO 30808
30731: POP
// begin bc_type := b_lab_full ;
30732: LD_ADDR_OWVAR 42
30736: PUSH
30737: LD_INT 8
30739: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
30740: LD_ADDR_OWVAR 44
30744: PUSH
30745: LD_INT 10
30747: PUSH
30748: LD_INT 12
30750: PUSH
30751: LD_INT 14
30753: PUSH
30754: LD_INT 13
30756: PUSH
30757: EMPTY
30758: LIST
30759: LIST
30760: LIST
30761: LIST
30762: PUSH
30763: LD_VAR 0 2
30767: PUSH
30768: LD_INT 9
30770: MINUS
30771: ARRAY
30772: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
30773: LD_ADDR_OWVAR 45
30777: PUSH
30778: LD_INT 11
30780: PUSH
30781: LD_INT 15
30783: PUSH
30784: LD_INT 12
30786: PUSH
30787: LD_INT 15
30789: PUSH
30790: EMPTY
30791: LIST
30792: LIST
30793: LIST
30794: LIST
30795: PUSH
30796: LD_VAR 0 2
30800: PUSH
30801: LD_INT 9
30803: MINUS
30804: ARRAY
30805: ST_TO_ADDR
// end ; 14 :
30806: GO 31225
30808: LD_INT 14
30810: DOUBLE
30811: EQUAL
30812: IFTRUE 30816
30814: GO 30827
30816: POP
// bc_type := b_workshop ; 15 :
30817: LD_ADDR_OWVAR 42
30821: PUSH
30822: LD_INT 2
30824: ST_TO_ADDR
30825: GO 31225
30827: LD_INT 15
30829: DOUBLE
30830: EQUAL
30831: IFTRUE 30835
30833: GO 30846
30835: POP
// bc_type := b_factory ; 16 :
30836: LD_ADDR_OWVAR 42
30840: PUSH
30841: LD_INT 3
30843: ST_TO_ADDR
30844: GO 31225
30846: LD_INT 16
30848: DOUBLE
30849: EQUAL
30850: IFTRUE 30854
30852: GO 30865
30854: POP
// bc_type := b_ext_gun ; 17 :
30855: LD_ADDR_OWVAR 42
30859: PUSH
30860: LD_INT 17
30862: ST_TO_ADDR
30863: GO 31225
30865: LD_INT 17
30867: DOUBLE
30868: EQUAL
30869: IFTRUE 30873
30871: GO 30901
30873: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
30874: LD_ADDR_OWVAR 42
30878: PUSH
30879: LD_INT 19
30881: PUSH
30882: LD_INT 23
30884: PUSH
30885: LD_INT 19
30887: PUSH
30888: EMPTY
30889: LIST
30890: LIST
30891: LIST
30892: PUSH
30893: LD_VAR 0 1
30897: ARRAY
30898: ST_TO_ADDR
30899: GO 31225
30901: LD_INT 18
30903: DOUBLE
30904: EQUAL
30905: IFTRUE 30909
30907: GO 30920
30909: POP
// bc_type := b_ext_radar ; 19 :
30910: LD_ADDR_OWVAR 42
30914: PUSH
30915: LD_INT 20
30917: ST_TO_ADDR
30918: GO 31225
30920: LD_INT 19
30922: DOUBLE
30923: EQUAL
30924: IFTRUE 30928
30926: GO 30939
30928: POP
// bc_type := b_ext_radio ; 20 :
30929: LD_ADDR_OWVAR 42
30933: PUSH
30934: LD_INT 22
30936: ST_TO_ADDR
30937: GO 31225
30939: LD_INT 20
30941: DOUBLE
30942: EQUAL
30943: IFTRUE 30947
30945: GO 30958
30947: POP
// bc_type := b_ext_siberium ; 21 :
30948: LD_ADDR_OWVAR 42
30952: PUSH
30953: LD_INT 21
30955: ST_TO_ADDR
30956: GO 31225
30958: LD_INT 21
30960: DOUBLE
30961: EQUAL
30962: IFTRUE 30966
30964: GO 30977
30966: POP
// bc_type := b_ext_computer ; 22 :
30967: LD_ADDR_OWVAR 42
30971: PUSH
30972: LD_INT 24
30974: ST_TO_ADDR
30975: GO 31225
30977: LD_INT 22
30979: DOUBLE
30980: EQUAL
30981: IFTRUE 30985
30983: GO 30996
30985: POP
// bc_type := b_ext_track ; 23 :
30986: LD_ADDR_OWVAR 42
30990: PUSH
30991: LD_INT 16
30993: ST_TO_ADDR
30994: GO 31225
30996: LD_INT 23
30998: DOUBLE
30999: EQUAL
31000: IFTRUE 31004
31002: GO 31015
31004: POP
// bc_type := b_ext_laser ; 24 :
31005: LD_ADDR_OWVAR 42
31009: PUSH
31010: LD_INT 25
31012: ST_TO_ADDR
31013: GO 31225
31015: LD_INT 24
31017: DOUBLE
31018: EQUAL
31019: IFTRUE 31023
31021: GO 31034
31023: POP
// bc_type := b_control_tower ; 25 :
31024: LD_ADDR_OWVAR 42
31028: PUSH
31029: LD_INT 36
31031: ST_TO_ADDR
31032: GO 31225
31034: LD_INT 25
31036: DOUBLE
31037: EQUAL
31038: IFTRUE 31042
31040: GO 31053
31042: POP
// bc_type := b_breastwork ; 26 :
31043: LD_ADDR_OWVAR 42
31047: PUSH
31048: LD_INT 31
31050: ST_TO_ADDR
31051: GO 31225
31053: LD_INT 26
31055: DOUBLE
31056: EQUAL
31057: IFTRUE 31061
31059: GO 31072
31061: POP
// bc_type := b_bunker ; 27 :
31062: LD_ADDR_OWVAR 42
31066: PUSH
31067: LD_INT 32
31069: ST_TO_ADDR
31070: GO 31225
31072: LD_INT 27
31074: DOUBLE
31075: EQUAL
31076: IFTRUE 31080
31078: GO 31091
31080: POP
// bc_type := b_turret ; 28 :
31081: LD_ADDR_OWVAR 42
31085: PUSH
31086: LD_INT 33
31088: ST_TO_ADDR
31089: GO 31225
31091: LD_INT 28
31093: DOUBLE
31094: EQUAL
31095: IFTRUE 31099
31097: GO 31110
31099: POP
// bc_type := b_armoury ; 29 :
31100: LD_ADDR_OWVAR 42
31104: PUSH
31105: LD_INT 4
31107: ST_TO_ADDR
31108: GO 31225
31110: LD_INT 29
31112: DOUBLE
31113: EQUAL
31114: IFTRUE 31118
31116: GO 31129
31118: POP
// bc_type := b_barracks ; 30 :
31119: LD_ADDR_OWVAR 42
31123: PUSH
31124: LD_INT 5
31126: ST_TO_ADDR
31127: GO 31225
31129: LD_INT 30
31131: DOUBLE
31132: EQUAL
31133: IFTRUE 31137
31135: GO 31148
31137: POP
// bc_type := b_solar_power ; 31 :
31138: LD_ADDR_OWVAR 42
31142: PUSH
31143: LD_INT 27
31145: ST_TO_ADDR
31146: GO 31225
31148: LD_INT 31
31150: DOUBLE
31151: EQUAL
31152: IFTRUE 31156
31154: GO 31167
31156: POP
// bc_type := b_oil_power ; 32 :
31157: LD_ADDR_OWVAR 42
31161: PUSH
31162: LD_INT 26
31164: ST_TO_ADDR
31165: GO 31225
31167: LD_INT 32
31169: DOUBLE
31170: EQUAL
31171: IFTRUE 31175
31173: GO 31186
31175: POP
// bc_type := b_siberite_power ; 33 :
31176: LD_ADDR_OWVAR 42
31180: PUSH
31181: LD_INT 28
31183: ST_TO_ADDR
31184: GO 31225
31186: LD_INT 33
31188: DOUBLE
31189: EQUAL
31190: IFTRUE 31194
31192: GO 31205
31194: POP
// bc_type := b_oil_mine ; 34 :
31195: LD_ADDR_OWVAR 42
31199: PUSH
31200: LD_INT 29
31202: ST_TO_ADDR
31203: GO 31225
31205: LD_INT 34
31207: DOUBLE
31208: EQUAL
31209: IFTRUE 31213
31211: GO 31224
31213: POP
// bc_type := b_siberite_mine ; end ;
31214: LD_ADDR_OWVAR 42
31218: PUSH
31219: LD_INT 30
31221: ST_TO_ADDR
31222: GO 31225
31224: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
31225: LD_ADDR_VAR 0 8
31229: PUSH
31230: LD_VAR 0 5
31234: PPUSH
31235: LD_VAR 0 6
31239: PPUSH
31240: LD_VAR 0 3
31244: PPUSH
31245: CALL_OW 47
31249: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
31250: LD_OWVAR 42
31254: PUSH
31255: LD_INT 32
31257: PUSH
31258: LD_INT 33
31260: PUSH
31261: EMPTY
31262: LIST
31263: LIST
31264: IN
31265: IFFALSE 31281
// PlaceWeaponTurret ( b , weapon ) ;
31267: LD_VAR 0 8
31271: PPUSH
31272: LD_VAR 0 4
31276: PPUSH
31277: CALL_OW 431
// end ;
31281: LD_VAR 0 7
31285: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
31286: LD_INT 0
31288: PPUSH
31289: PPUSH
31290: PPUSH
31291: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31292: LD_ADDR_VAR 0 4
31296: PUSH
31297: LD_INT 22
31299: PUSH
31300: LD_OWVAR 2
31304: PUSH
31305: EMPTY
31306: LIST
31307: LIST
31308: PUSH
31309: LD_INT 2
31311: PUSH
31312: LD_INT 30
31314: PUSH
31315: LD_INT 0
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: PUSH
31322: LD_INT 30
31324: PUSH
31325: LD_INT 1
31327: PUSH
31328: EMPTY
31329: LIST
31330: LIST
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: LIST
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: PPUSH
31341: CALL_OW 69
31345: ST_TO_ADDR
// if not tmp then
31346: LD_VAR 0 4
31350: NOT
31351: IFFALSE 31355
// exit ;
31353: GO 31414
// for i in tmp do
31355: LD_ADDR_VAR 0 2
31359: PUSH
31360: LD_VAR 0 4
31364: PUSH
31365: FOR_IN
31366: IFFALSE 31412
// for j = 1 to 3 do
31368: LD_ADDR_VAR 0 3
31372: PUSH
31373: DOUBLE
31374: LD_INT 1
31376: DEC
31377: ST_TO_ADDR
31378: LD_INT 3
31380: PUSH
31381: FOR_TO
31382: IFFALSE 31408
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
31384: LD_VAR 0 2
31388: PPUSH
31389: CALL_OW 274
31393: PPUSH
31394: LD_VAR 0 3
31398: PPUSH
31399: LD_INT 99999
31401: PPUSH
31402: CALL_OW 277
31406: GO 31381
31408: POP
31409: POP
31410: GO 31365
31412: POP
31413: POP
// end ;
31414: LD_VAR 0 1
31418: RET
// export function hHackSetLevel10 ; var i , j ; begin
31419: LD_INT 0
31421: PPUSH
31422: PPUSH
31423: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31424: LD_ADDR_VAR 0 2
31428: PUSH
31429: LD_INT 21
31431: PUSH
31432: LD_INT 1
31434: PUSH
31435: EMPTY
31436: LIST
31437: LIST
31438: PPUSH
31439: CALL_OW 69
31443: PUSH
31444: FOR_IN
31445: IFFALSE 31497
// if IsSelected ( i ) then
31447: LD_VAR 0 2
31451: PPUSH
31452: CALL_OW 306
31456: IFFALSE 31495
// begin for j := 1 to 4 do
31458: LD_ADDR_VAR 0 3
31462: PUSH
31463: DOUBLE
31464: LD_INT 1
31466: DEC
31467: ST_TO_ADDR
31468: LD_INT 4
31470: PUSH
31471: FOR_TO
31472: IFFALSE 31493
// SetSkill ( i , j , 10 ) ;
31474: LD_VAR 0 2
31478: PPUSH
31479: LD_VAR 0 3
31483: PPUSH
31484: LD_INT 10
31486: PPUSH
31487: CALL_OW 237
31491: GO 31471
31493: POP
31494: POP
// end ;
31495: GO 31444
31497: POP
31498: POP
// end ;
31499: LD_VAR 0 1
31503: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
31504: LD_INT 0
31506: PPUSH
31507: PPUSH
31508: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
31509: LD_ADDR_VAR 0 2
31513: PUSH
31514: LD_INT 22
31516: PUSH
31517: LD_OWVAR 2
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: PUSH
31526: LD_INT 21
31528: PUSH
31529: LD_INT 1
31531: PUSH
31532: EMPTY
31533: LIST
31534: LIST
31535: PUSH
31536: EMPTY
31537: LIST
31538: LIST
31539: PPUSH
31540: CALL_OW 69
31544: PUSH
31545: FOR_IN
31546: IFFALSE 31587
// begin for j := 1 to 4 do
31548: LD_ADDR_VAR 0 3
31552: PUSH
31553: DOUBLE
31554: LD_INT 1
31556: DEC
31557: ST_TO_ADDR
31558: LD_INT 4
31560: PUSH
31561: FOR_TO
31562: IFFALSE 31583
// SetSkill ( i , j , 10 ) ;
31564: LD_VAR 0 2
31568: PPUSH
31569: LD_VAR 0 3
31573: PPUSH
31574: LD_INT 10
31576: PPUSH
31577: CALL_OW 237
31581: GO 31561
31583: POP
31584: POP
// end ;
31585: GO 31545
31587: POP
31588: POP
// end ;
31589: LD_VAR 0 1
31593: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
31594: LD_INT 0
31596: PPUSH
// uc_side := your_side ;
31597: LD_ADDR_OWVAR 20
31601: PUSH
31602: LD_OWVAR 2
31606: ST_TO_ADDR
// uc_nation := nation ;
31607: LD_ADDR_OWVAR 21
31611: PUSH
31612: LD_VAR 0 1
31616: ST_TO_ADDR
// InitHc ;
31617: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
31621: LD_INT 0
31623: PPUSH
31624: LD_VAR 0 2
31628: PPUSH
31629: LD_VAR 0 3
31633: PPUSH
31634: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
31638: LD_VAR 0 4
31642: PPUSH
31643: LD_VAR 0 5
31647: PPUSH
31648: CALL_OW 428
31652: PUSH
31653: LD_INT 0
31655: EQUAL
31656: IFFALSE 31680
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
31658: CALL_OW 44
31662: PPUSH
31663: LD_VAR 0 4
31667: PPUSH
31668: LD_VAR 0 5
31672: PPUSH
31673: LD_INT 1
31675: PPUSH
31676: CALL_OW 48
// end ;
31680: LD_VAR 0 6
31684: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
31685: LD_INT 0
31687: PPUSH
31688: PPUSH
// uc_side := your_side ;
31689: LD_ADDR_OWVAR 20
31693: PUSH
31694: LD_OWVAR 2
31698: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
31699: LD_VAR 0 1
31703: PUSH
31704: LD_INT 1
31706: PUSH
31707: LD_INT 2
31709: PUSH
31710: LD_INT 3
31712: PUSH
31713: LD_INT 4
31715: PUSH
31716: LD_INT 5
31718: PUSH
31719: EMPTY
31720: LIST
31721: LIST
31722: LIST
31723: LIST
31724: LIST
31725: IN
31726: IFFALSE 31738
// uc_nation := nation_american else
31728: LD_ADDR_OWVAR 21
31732: PUSH
31733: LD_INT 1
31735: ST_TO_ADDR
31736: GO 31781
// if chassis in [ 11 , 12 , 13 , 14 ] then
31738: LD_VAR 0 1
31742: PUSH
31743: LD_INT 11
31745: PUSH
31746: LD_INT 12
31748: PUSH
31749: LD_INT 13
31751: PUSH
31752: LD_INT 14
31754: PUSH
31755: EMPTY
31756: LIST
31757: LIST
31758: LIST
31759: LIST
31760: IN
31761: IFFALSE 31773
// uc_nation := nation_arabian else
31763: LD_ADDR_OWVAR 21
31767: PUSH
31768: LD_INT 2
31770: ST_TO_ADDR
31771: GO 31781
// uc_nation := nation_russian ;
31773: LD_ADDR_OWVAR 21
31777: PUSH
31778: LD_INT 3
31780: ST_TO_ADDR
// vc_chassis := chassis ;
31781: LD_ADDR_OWVAR 37
31785: PUSH
31786: LD_VAR 0 1
31790: ST_TO_ADDR
// vc_engine := engine ;
31791: LD_ADDR_OWVAR 39
31795: PUSH
31796: LD_VAR 0 2
31800: ST_TO_ADDR
// vc_control := control ;
31801: LD_ADDR_OWVAR 38
31805: PUSH
31806: LD_VAR 0 3
31810: ST_TO_ADDR
// vc_weapon := weapon ;
31811: LD_ADDR_OWVAR 40
31815: PUSH
31816: LD_VAR 0 4
31820: ST_TO_ADDR
// un := CreateVehicle ;
31821: LD_ADDR_VAR 0 8
31825: PUSH
31826: CALL_OW 45
31830: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
31831: LD_VAR 0 8
31835: PPUSH
31836: LD_INT 0
31838: PPUSH
31839: LD_INT 5
31841: PPUSH
31842: CALL_OW 12
31846: PPUSH
31847: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
31851: LD_VAR 0 8
31855: PPUSH
31856: LD_VAR 0 5
31860: PPUSH
31861: LD_VAR 0 6
31865: PPUSH
31866: LD_INT 1
31868: PPUSH
31869: CALL_OW 48
// end ;
31873: LD_VAR 0 7
31877: RET
// export hInvincible ; every 1 do
31878: GO 31880
31880: DISABLE
// hInvincible := [ ] ;
31881: LD_ADDR_EXP 131
31885: PUSH
31886: EMPTY
31887: ST_TO_ADDR
31888: END
// every 10 do var i ;
31889: GO 31891
31891: DISABLE
31892: LD_INT 0
31894: PPUSH
// begin enable ;
31895: ENABLE
// if not hInvincible then
31896: LD_EXP 131
31900: NOT
31901: IFFALSE 31905
// exit ;
31903: GO 31949
// for i in hInvincible do
31905: LD_ADDR_VAR 0 1
31909: PUSH
31910: LD_EXP 131
31914: PUSH
31915: FOR_IN
31916: IFFALSE 31947
// if GetLives ( i ) < 1000 then
31918: LD_VAR 0 1
31922: PPUSH
31923: CALL_OW 256
31927: PUSH
31928: LD_INT 1000
31930: LESS
31931: IFFALSE 31945
// SetLives ( i , 1000 ) ;
31933: LD_VAR 0 1
31937: PPUSH
31938: LD_INT 1000
31940: PPUSH
31941: CALL_OW 234
31945: GO 31915
31947: POP
31948: POP
// end ;
31949: PPOPN 1
31951: END
// export function hHackInvincible ; var i ; begin
31952: LD_INT 0
31954: PPUSH
31955: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
31956: LD_ADDR_VAR 0 2
31960: PUSH
31961: LD_INT 2
31963: PUSH
31964: LD_INT 21
31966: PUSH
31967: LD_INT 1
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: PUSH
31974: LD_INT 21
31976: PUSH
31977: LD_INT 2
31979: PUSH
31980: EMPTY
31981: LIST
31982: LIST
31983: PUSH
31984: EMPTY
31985: LIST
31986: LIST
31987: LIST
31988: PPUSH
31989: CALL_OW 69
31993: PUSH
31994: FOR_IN
31995: IFFALSE 32056
// if IsSelected ( i ) then
31997: LD_VAR 0 2
32001: PPUSH
32002: CALL_OW 306
32006: IFFALSE 32054
// begin if i in hInvincible then
32008: LD_VAR 0 2
32012: PUSH
32013: LD_EXP 131
32017: IN
32018: IFFALSE 32038
// hInvincible := hInvincible diff i else
32020: LD_ADDR_EXP 131
32024: PUSH
32025: LD_EXP 131
32029: PUSH
32030: LD_VAR 0 2
32034: DIFF
32035: ST_TO_ADDR
32036: GO 32054
// hInvincible := hInvincible union i ;
32038: LD_ADDR_EXP 131
32042: PUSH
32043: LD_EXP 131
32047: PUSH
32048: LD_VAR 0 2
32052: UNION
32053: ST_TO_ADDR
// end ;
32054: GO 31994
32056: POP
32057: POP
// end ;
32058: LD_VAR 0 1
32062: RET
// export function hHackInvisible ; var i , j ; begin
32063: LD_INT 0
32065: PPUSH
32066: PPUSH
32067: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32068: LD_ADDR_VAR 0 2
32072: PUSH
32073: LD_INT 21
32075: PUSH
32076: LD_INT 1
32078: PUSH
32079: EMPTY
32080: LIST
32081: LIST
32082: PPUSH
32083: CALL_OW 69
32087: PUSH
32088: FOR_IN
32089: IFFALSE 32113
// if IsSelected ( i ) then
32091: LD_VAR 0 2
32095: PPUSH
32096: CALL_OW 306
32100: IFFALSE 32111
// ComForceInvisible ( i ) ;
32102: LD_VAR 0 2
32106: PPUSH
32107: CALL_OW 496
32111: GO 32088
32113: POP
32114: POP
// end ;
32115: LD_VAR 0 1
32119: RET
// export function hHackChangeYourSide ; begin
32120: LD_INT 0
32122: PPUSH
// if your_side = 8 then
32123: LD_OWVAR 2
32127: PUSH
32128: LD_INT 8
32130: EQUAL
32131: IFFALSE 32143
// your_side := 0 else
32133: LD_ADDR_OWVAR 2
32137: PUSH
32138: LD_INT 0
32140: ST_TO_ADDR
32141: GO 32157
// your_side := your_side + 1 ;
32143: LD_ADDR_OWVAR 2
32147: PUSH
32148: LD_OWVAR 2
32152: PUSH
32153: LD_INT 1
32155: PLUS
32156: ST_TO_ADDR
// end ;
32157: LD_VAR 0 1
32161: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32162: LD_INT 0
32164: PPUSH
32165: PPUSH
32166: PPUSH
// for i in all_units do
32167: LD_ADDR_VAR 0 2
32171: PUSH
32172: LD_OWVAR 3
32176: PUSH
32177: FOR_IN
32178: IFFALSE 32256
// if IsSelected ( i ) then
32180: LD_VAR 0 2
32184: PPUSH
32185: CALL_OW 306
32189: IFFALSE 32254
// begin j := GetSide ( i ) ;
32191: LD_ADDR_VAR 0 3
32195: PUSH
32196: LD_VAR 0 2
32200: PPUSH
32201: CALL_OW 255
32205: ST_TO_ADDR
// if j = 8 then
32206: LD_VAR 0 3
32210: PUSH
32211: LD_INT 8
32213: EQUAL
32214: IFFALSE 32226
// j := 0 else
32216: LD_ADDR_VAR 0 3
32220: PUSH
32221: LD_INT 0
32223: ST_TO_ADDR
32224: GO 32240
// j := j + 1 ;
32226: LD_ADDR_VAR 0 3
32230: PUSH
32231: LD_VAR 0 3
32235: PUSH
32236: LD_INT 1
32238: PLUS
32239: ST_TO_ADDR
// SetSide ( i , j ) ;
32240: LD_VAR 0 2
32244: PPUSH
32245: LD_VAR 0 3
32249: PPUSH
32250: CALL_OW 235
// end ;
32254: GO 32177
32256: POP
32257: POP
// end ;
32258: LD_VAR 0 1
32262: RET
// export function hHackFog ; begin
32263: LD_INT 0
32265: PPUSH
// FogOff ( true ) ;
32266: LD_INT 1
32268: PPUSH
32269: CALL_OW 344
// end ;
32273: LD_VAR 0 1
32277: RET
// export function hHackTeleport ( unit , x , y ) ; begin
32278: LD_INT 0
32280: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
32281: LD_VAR 0 1
32285: PPUSH
32286: LD_VAR 0 2
32290: PPUSH
32291: LD_VAR 0 3
32295: PPUSH
32296: LD_INT 1
32298: PPUSH
32299: LD_INT 1
32301: PPUSH
32302: CALL_OW 483
// CenterOnXY ( x , y ) ;
32306: LD_VAR 0 2
32310: PPUSH
32311: LD_VAR 0 3
32315: PPUSH
32316: CALL_OW 84
// end ; end_of_file
32320: LD_VAR 0 4
32324: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
32325: LD_INT 0
32327: PPUSH
32328: PPUSH
32329: PPUSH
32330: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
32331: LD_VAR 0 1
32335: PPUSH
32336: CALL_OW 264
32340: PUSH
32341: LD_EXP 62
32345: EQUAL
32346: IFFALSE 32418
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
32348: LD_INT 68
32350: PPUSH
32351: LD_VAR 0 1
32355: PPUSH
32356: CALL_OW 255
32360: PPUSH
32361: CALL_OW 321
32365: PUSH
32366: LD_INT 2
32368: EQUAL
32369: IFFALSE 32381
// eff := 70 else
32371: LD_ADDR_VAR 0 4
32375: PUSH
32376: LD_INT 70
32378: ST_TO_ADDR
32379: GO 32389
// eff := 30 ;
32381: LD_ADDR_VAR 0 4
32385: PUSH
32386: LD_INT 30
32388: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
32389: LD_VAR 0 1
32393: PPUSH
32394: CALL_OW 250
32398: PPUSH
32399: LD_VAR 0 1
32403: PPUSH
32404: CALL_OW 251
32408: PPUSH
32409: LD_VAR 0 4
32413: PPUSH
32414: CALL_OW 495
// end ; end ;
32418: LD_VAR 0 2
32422: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
32423: LD_INT 0
32425: PPUSH
// end ;
32426: LD_VAR 0 4
32430: RET
// export function SOS_Command ( cmd ) ; begin
32431: LD_INT 0
32433: PPUSH
// end ;
32434: LD_VAR 0 2
32438: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
32439: LD_INT 0
32441: PPUSH
// end ;
32442: LD_VAR 0 6
32446: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
32447: LD_INT 0
32449: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
32450: LD_VAR 0 1
32454: PUSH
32455: LD_INT 250
32457: EQUAL
32458: PUSH
32459: LD_VAR 0 2
32463: PPUSH
32464: CALL_OW 264
32468: PUSH
32469: LD_EXP 65
32473: EQUAL
32474: AND
32475: IFFALSE 32496
// MinerPlaceMine ( unit , x , y ) ;
32477: LD_VAR 0 2
32481: PPUSH
32482: LD_VAR 0 4
32486: PPUSH
32487: LD_VAR 0 5
32491: PPUSH
32492: CALL 34845 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
32496: LD_VAR 0 1
32500: PUSH
32501: LD_INT 251
32503: EQUAL
32504: PUSH
32505: LD_VAR 0 2
32509: PPUSH
32510: CALL_OW 264
32514: PUSH
32515: LD_EXP 65
32519: EQUAL
32520: AND
32521: IFFALSE 32542
// MinerDetonateMine ( unit , x , y ) ;
32523: LD_VAR 0 2
32527: PPUSH
32528: LD_VAR 0 4
32532: PPUSH
32533: LD_VAR 0 5
32537: PPUSH
32538: CALL 35122 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
32542: LD_VAR 0 1
32546: PUSH
32547: LD_INT 252
32549: EQUAL
32550: PUSH
32551: LD_VAR 0 2
32555: PPUSH
32556: CALL_OW 264
32560: PUSH
32561: LD_EXP 65
32565: EQUAL
32566: AND
32567: IFFALSE 32588
// MinerCreateMinefield ( unit , x , y ) ;
32569: LD_VAR 0 2
32573: PPUSH
32574: LD_VAR 0 4
32578: PPUSH
32579: LD_VAR 0 5
32583: PPUSH
32584: CALL 35539 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
32588: LD_VAR 0 1
32592: PUSH
32593: LD_INT 253
32595: EQUAL
32596: PUSH
32597: LD_VAR 0 2
32601: PPUSH
32602: CALL_OW 257
32606: PUSH
32607: LD_INT 5
32609: EQUAL
32610: AND
32611: IFFALSE 32632
// ComBinocular ( unit , x , y ) ;
32613: LD_VAR 0 2
32617: PPUSH
32618: LD_VAR 0 4
32622: PPUSH
32623: LD_VAR 0 5
32627: PPUSH
32628: CALL 35910 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
32632: LD_VAR 0 1
32636: PUSH
32637: LD_INT 254
32639: EQUAL
32640: PUSH
32641: LD_VAR 0 2
32645: PPUSH
32646: CALL_OW 264
32650: PUSH
32651: LD_EXP 60
32655: EQUAL
32656: AND
32657: PUSH
32658: LD_VAR 0 3
32662: PPUSH
32663: CALL_OW 263
32667: PUSH
32668: LD_INT 3
32670: EQUAL
32671: AND
32672: IFFALSE 32688
// HackDestroyVehicle ( unit , selectedUnit ) ;
32674: LD_VAR 0 2
32678: PPUSH
32679: LD_VAR 0 3
32683: PPUSH
32684: CALL 34205 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
32688: LD_VAR 0 1
32692: PUSH
32693: LD_INT 255
32695: EQUAL
32696: PUSH
32697: LD_VAR 0 2
32701: PPUSH
32702: CALL_OW 264
32706: PUSH
32707: LD_INT 14
32709: PUSH
32710: LD_INT 53
32712: PUSH
32713: EMPTY
32714: LIST
32715: LIST
32716: IN
32717: AND
32718: PUSH
32719: LD_VAR 0 4
32723: PPUSH
32724: LD_VAR 0 5
32728: PPUSH
32729: CALL_OW 488
32733: AND
32734: IFFALSE 32758
// CutTreeXYR ( unit , x , y , 12 ) ;
32736: LD_VAR 0 2
32740: PPUSH
32741: LD_VAR 0 4
32745: PPUSH
32746: LD_VAR 0 5
32750: PPUSH
32751: LD_INT 12
32753: PPUSH
32754: CALL 32771 0 4
// end ;
32758: LD_VAR 0 6
32762: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
32763: LD_INT 0
32765: PPUSH
// end ;
32766: LD_VAR 0 4
32770: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
32771: LD_INT 0
32773: PPUSH
32774: PPUSH
32775: PPUSH
32776: PPUSH
32777: PPUSH
32778: PPUSH
32779: PPUSH
32780: PPUSH
32781: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
32782: LD_VAR 0 1
32786: NOT
32787: PUSH
32788: LD_VAR 0 2
32792: PPUSH
32793: LD_VAR 0 3
32797: PPUSH
32798: CALL_OW 488
32802: NOT
32803: OR
32804: PUSH
32805: LD_VAR 0 4
32809: NOT
32810: OR
32811: IFFALSE 32815
// exit ;
32813: GO 33155
// list := [ ] ;
32815: LD_ADDR_VAR 0 13
32819: PUSH
32820: EMPTY
32821: ST_TO_ADDR
// if x - r < 0 then
32822: LD_VAR 0 2
32826: PUSH
32827: LD_VAR 0 4
32831: MINUS
32832: PUSH
32833: LD_INT 0
32835: LESS
32836: IFFALSE 32848
// min_x := 0 else
32838: LD_ADDR_VAR 0 7
32842: PUSH
32843: LD_INT 0
32845: ST_TO_ADDR
32846: GO 32864
// min_x := x - r ;
32848: LD_ADDR_VAR 0 7
32852: PUSH
32853: LD_VAR 0 2
32857: PUSH
32858: LD_VAR 0 4
32862: MINUS
32863: ST_TO_ADDR
// if y - r < 0 then
32864: LD_VAR 0 3
32868: PUSH
32869: LD_VAR 0 4
32873: MINUS
32874: PUSH
32875: LD_INT 0
32877: LESS
32878: IFFALSE 32890
// min_y := 0 else
32880: LD_ADDR_VAR 0 8
32884: PUSH
32885: LD_INT 0
32887: ST_TO_ADDR
32888: GO 32906
// min_y := y - r ;
32890: LD_ADDR_VAR 0 8
32894: PUSH
32895: LD_VAR 0 3
32899: PUSH
32900: LD_VAR 0 4
32904: MINUS
32905: ST_TO_ADDR
// max_x := x + r ;
32906: LD_ADDR_VAR 0 9
32910: PUSH
32911: LD_VAR 0 2
32915: PUSH
32916: LD_VAR 0 4
32920: PLUS
32921: ST_TO_ADDR
// max_y := y + r ;
32922: LD_ADDR_VAR 0 10
32926: PUSH
32927: LD_VAR 0 3
32931: PUSH
32932: LD_VAR 0 4
32936: PLUS
32937: ST_TO_ADDR
// for _x = min_x to max_x do
32938: LD_ADDR_VAR 0 11
32942: PUSH
32943: DOUBLE
32944: LD_VAR 0 7
32948: DEC
32949: ST_TO_ADDR
32950: LD_VAR 0 9
32954: PUSH
32955: FOR_TO
32956: IFFALSE 33073
// for _y = min_y to max_y do
32958: LD_ADDR_VAR 0 12
32962: PUSH
32963: DOUBLE
32964: LD_VAR 0 8
32968: DEC
32969: ST_TO_ADDR
32970: LD_VAR 0 10
32974: PUSH
32975: FOR_TO
32976: IFFALSE 33069
// begin if not ValidHex ( _x , _y ) then
32978: LD_VAR 0 11
32982: PPUSH
32983: LD_VAR 0 12
32987: PPUSH
32988: CALL_OW 488
32992: NOT
32993: IFFALSE 32997
// continue ;
32995: GO 32975
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
32997: LD_VAR 0 11
33001: PPUSH
33002: LD_VAR 0 12
33006: PPUSH
33007: CALL_OW 351
33011: PUSH
33012: LD_VAR 0 11
33016: PPUSH
33017: LD_VAR 0 12
33021: PPUSH
33022: CALL_OW 554
33026: AND
33027: IFFALSE 33067
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
33029: LD_ADDR_VAR 0 13
33033: PUSH
33034: LD_VAR 0 13
33038: PPUSH
33039: LD_VAR 0 13
33043: PUSH
33044: LD_INT 1
33046: PLUS
33047: PPUSH
33048: LD_VAR 0 11
33052: PUSH
33053: LD_VAR 0 12
33057: PUSH
33058: EMPTY
33059: LIST
33060: LIST
33061: PPUSH
33062: CALL_OW 2
33066: ST_TO_ADDR
// end ;
33067: GO 32975
33069: POP
33070: POP
33071: GO 32955
33073: POP
33074: POP
// if not list then
33075: LD_VAR 0 13
33079: NOT
33080: IFFALSE 33084
// exit ;
33082: GO 33155
// for i in list do
33084: LD_ADDR_VAR 0 6
33088: PUSH
33089: LD_VAR 0 13
33093: PUSH
33094: FOR_IN
33095: IFFALSE 33153
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
33097: LD_VAR 0 1
33101: PPUSH
33102: LD_STRING M
33104: PUSH
33105: LD_VAR 0 6
33109: PUSH
33110: LD_INT 1
33112: ARRAY
33113: PUSH
33114: LD_VAR 0 6
33118: PUSH
33119: LD_INT 2
33121: ARRAY
33122: PUSH
33123: LD_INT 0
33125: PUSH
33126: LD_INT 0
33128: PUSH
33129: LD_INT 0
33131: PUSH
33132: LD_INT 0
33134: PUSH
33135: EMPTY
33136: LIST
33137: LIST
33138: LIST
33139: LIST
33140: LIST
33141: LIST
33142: LIST
33143: PUSH
33144: EMPTY
33145: LIST
33146: PPUSH
33147: CALL_OW 447
33151: GO 33094
33153: POP
33154: POP
// end ;
33155: LD_VAR 0 5
33159: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
33160: LD_EXP 134
33164: NOT
33165: IFFALSE 33215
33167: GO 33169
33169: DISABLE
// begin initHack := true ;
33170: LD_ADDR_EXP 134
33174: PUSH
33175: LD_INT 1
33177: ST_TO_ADDR
// hackTanks := [ ] ;
33178: LD_ADDR_EXP 135
33182: PUSH
33183: EMPTY
33184: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
33185: LD_ADDR_EXP 136
33189: PUSH
33190: EMPTY
33191: ST_TO_ADDR
// hackLimit := 3 ;
33192: LD_ADDR_EXP 137
33196: PUSH
33197: LD_INT 3
33199: ST_TO_ADDR
// hackDist := 12 ;
33200: LD_ADDR_EXP 138
33204: PUSH
33205: LD_INT 12
33207: ST_TO_ADDR
// hackCounter := [ ] ;
33208: LD_ADDR_EXP 139
33212: PUSH
33213: EMPTY
33214: ST_TO_ADDR
// end ;
33215: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
33216: LD_EXP 134
33220: PUSH
33221: LD_INT 34
33223: PUSH
33224: LD_EXP 60
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: PPUSH
33233: CALL_OW 69
33237: AND
33238: IFFALSE 33493
33240: GO 33242
33242: DISABLE
33243: LD_INT 0
33245: PPUSH
33246: PPUSH
// begin enable ;
33247: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
33248: LD_ADDR_VAR 0 1
33252: PUSH
33253: LD_INT 34
33255: PUSH
33256: LD_EXP 60
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: PPUSH
33265: CALL_OW 69
33269: PUSH
33270: FOR_IN
33271: IFFALSE 33491
// begin if not i in hackTanks then
33273: LD_VAR 0 1
33277: PUSH
33278: LD_EXP 135
33282: IN
33283: NOT
33284: IFFALSE 33367
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
33286: LD_ADDR_EXP 135
33290: PUSH
33291: LD_EXP 135
33295: PPUSH
33296: LD_EXP 135
33300: PUSH
33301: LD_INT 1
33303: PLUS
33304: PPUSH
33305: LD_VAR 0 1
33309: PPUSH
33310: CALL_OW 1
33314: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
33315: LD_ADDR_EXP 136
33319: PUSH
33320: LD_EXP 136
33324: PPUSH
33325: LD_EXP 136
33329: PUSH
33330: LD_INT 1
33332: PLUS
33333: PPUSH
33334: EMPTY
33335: PPUSH
33336: CALL_OW 1
33340: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
33341: LD_ADDR_EXP 139
33345: PUSH
33346: LD_EXP 139
33350: PPUSH
33351: LD_EXP 139
33355: PUSH
33356: LD_INT 1
33358: PLUS
33359: PPUSH
33360: EMPTY
33361: PPUSH
33362: CALL_OW 1
33366: ST_TO_ADDR
// end ; if not IsOk ( i ) then
33367: LD_VAR 0 1
33371: PPUSH
33372: CALL_OW 302
33376: NOT
33377: IFFALSE 33390
// begin HackUnlinkAll ( i ) ;
33379: LD_VAR 0 1
33383: PPUSH
33384: CALL 33496 0 1
// continue ;
33388: GO 33270
// end ; HackCheckCapturedStatus ( i ) ;
33390: LD_VAR 0 1
33394: PPUSH
33395: CALL 33939 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
33399: LD_ADDR_VAR 0 2
33403: PUSH
33404: LD_INT 81
33406: PUSH
33407: LD_VAR 0 1
33411: PPUSH
33412: CALL_OW 255
33416: PUSH
33417: EMPTY
33418: LIST
33419: LIST
33420: PUSH
33421: LD_INT 33
33423: PUSH
33424: LD_INT 3
33426: PUSH
33427: EMPTY
33428: LIST
33429: LIST
33430: PUSH
33431: LD_INT 91
33433: PUSH
33434: LD_VAR 0 1
33438: PUSH
33439: LD_EXP 138
33443: PUSH
33444: EMPTY
33445: LIST
33446: LIST
33447: LIST
33448: PUSH
33449: LD_INT 50
33451: PUSH
33452: EMPTY
33453: LIST
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: LIST
33459: LIST
33460: PPUSH
33461: CALL_OW 69
33465: ST_TO_ADDR
// if not tmp then
33466: LD_VAR 0 2
33470: NOT
33471: IFFALSE 33475
// continue ;
33473: GO 33270
// HackLink ( i , tmp ) ;
33475: LD_VAR 0 1
33479: PPUSH
33480: LD_VAR 0 2
33484: PPUSH
33485: CALL 33632 0 2
// end ;
33489: GO 33270
33491: POP
33492: POP
// end ;
33493: PPOPN 2
33495: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
33496: LD_INT 0
33498: PPUSH
33499: PPUSH
33500: PPUSH
// if not hack in hackTanks then
33501: LD_VAR 0 1
33505: PUSH
33506: LD_EXP 135
33510: IN
33511: NOT
33512: IFFALSE 33516
// exit ;
33514: GO 33627
// index := GetElementIndex ( hackTanks , hack ) ;
33516: LD_ADDR_VAR 0 4
33520: PUSH
33521: LD_EXP 135
33525: PPUSH
33526: LD_VAR 0 1
33530: PPUSH
33531: CALL 41101 0 2
33535: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
33536: LD_EXP 136
33540: PUSH
33541: LD_VAR 0 4
33545: ARRAY
33546: IFFALSE 33627
// begin for i in hackTanksCaptured [ index ] do
33548: LD_ADDR_VAR 0 3
33552: PUSH
33553: LD_EXP 136
33557: PUSH
33558: LD_VAR 0 4
33562: ARRAY
33563: PUSH
33564: FOR_IN
33565: IFFALSE 33591
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
33567: LD_VAR 0 3
33571: PUSH
33572: LD_INT 1
33574: ARRAY
33575: PPUSH
33576: LD_VAR 0 3
33580: PUSH
33581: LD_INT 2
33583: ARRAY
33584: PPUSH
33585: CALL_OW 235
33589: GO 33564
33591: POP
33592: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
33593: LD_ADDR_EXP 136
33597: PUSH
33598: LD_EXP 136
33602: PPUSH
33603: LD_VAR 0 4
33607: PPUSH
33608: EMPTY
33609: PPUSH
33610: CALL_OW 1
33614: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
33615: LD_VAR 0 1
33619: PPUSH
33620: LD_INT 0
33622: PPUSH
33623: CALL_OW 505
// end ; end ;
33627: LD_VAR 0 2
33631: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
33632: LD_INT 0
33634: PPUSH
33635: PPUSH
33636: PPUSH
// if not hack in hackTanks or not vehicles then
33637: LD_VAR 0 1
33641: PUSH
33642: LD_EXP 135
33646: IN
33647: NOT
33648: PUSH
33649: LD_VAR 0 2
33653: NOT
33654: OR
33655: IFFALSE 33659
// exit ;
33657: GO 33934
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
33659: LD_ADDR_VAR 0 2
33663: PUSH
33664: LD_VAR 0 1
33668: PPUSH
33669: LD_VAR 0 2
33673: PPUSH
33674: LD_INT 1
33676: PPUSH
33677: LD_INT 1
33679: PPUSH
33680: CALL 41751 0 4
33684: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
33685: LD_ADDR_VAR 0 5
33689: PUSH
33690: LD_EXP 135
33694: PPUSH
33695: LD_VAR 0 1
33699: PPUSH
33700: CALL 41101 0 2
33704: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
33705: LD_EXP 136
33709: PUSH
33710: LD_VAR 0 5
33714: ARRAY
33715: PUSH
33716: LD_EXP 137
33720: LESS
33721: IFFALSE 33910
// begin for i := 1 to vehicles do
33723: LD_ADDR_VAR 0 4
33727: PUSH
33728: DOUBLE
33729: LD_INT 1
33731: DEC
33732: ST_TO_ADDR
33733: LD_VAR 0 2
33737: PUSH
33738: FOR_TO
33739: IFFALSE 33908
// begin if hackTanksCaptured [ index ] = hackLimit then
33741: LD_EXP 136
33745: PUSH
33746: LD_VAR 0 5
33750: ARRAY
33751: PUSH
33752: LD_EXP 137
33756: EQUAL
33757: IFFALSE 33761
// break ;
33759: GO 33908
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
33761: LD_ADDR_EXP 139
33765: PUSH
33766: LD_EXP 139
33770: PPUSH
33771: LD_VAR 0 5
33775: PPUSH
33776: LD_EXP 139
33780: PUSH
33781: LD_VAR 0 5
33785: ARRAY
33786: PUSH
33787: LD_INT 1
33789: PLUS
33790: PPUSH
33791: CALL_OW 1
33795: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
33796: LD_ADDR_EXP 136
33800: PUSH
33801: LD_EXP 136
33805: PPUSH
33806: LD_VAR 0 5
33810: PUSH
33811: LD_EXP 136
33815: PUSH
33816: LD_VAR 0 5
33820: ARRAY
33821: PUSH
33822: LD_INT 1
33824: PLUS
33825: PUSH
33826: EMPTY
33827: LIST
33828: LIST
33829: PPUSH
33830: LD_VAR 0 2
33834: PUSH
33835: LD_VAR 0 4
33839: ARRAY
33840: PUSH
33841: LD_VAR 0 2
33845: PUSH
33846: LD_VAR 0 4
33850: ARRAY
33851: PPUSH
33852: CALL_OW 255
33856: PUSH
33857: EMPTY
33858: LIST
33859: LIST
33860: PPUSH
33861: CALL 41316 0 3
33865: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
33866: LD_VAR 0 2
33870: PUSH
33871: LD_VAR 0 4
33875: ARRAY
33876: PPUSH
33877: LD_VAR 0 1
33881: PPUSH
33882: CALL_OW 255
33886: PPUSH
33887: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
33891: LD_VAR 0 2
33895: PUSH
33896: LD_VAR 0 4
33900: ARRAY
33901: PPUSH
33902: CALL_OW 141
// end ;
33906: GO 33738
33908: POP
33909: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
33910: LD_VAR 0 1
33914: PPUSH
33915: LD_EXP 136
33919: PUSH
33920: LD_VAR 0 5
33924: ARRAY
33925: PUSH
33926: LD_INT 0
33928: PLUS
33929: PPUSH
33930: CALL_OW 505
// end ;
33934: LD_VAR 0 3
33938: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
33939: LD_INT 0
33941: PPUSH
33942: PPUSH
33943: PPUSH
33944: PPUSH
// if not hack in hackTanks then
33945: LD_VAR 0 1
33949: PUSH
33950: LD_EXP 135
33954: IN
33955: NOT
33956: IFFALSE 33960
// exit ;
33958: GO 34200
// index := GetElementIndex ( hackTanks , hack ) ;
33960: LD_ADDR_VAR 0 4
33964: PUSH
33965: LD_EXP 135
33969: PPUSH
33970: LD_VAR 0 1
33974: PPUSH
33975: CALL 41101 0 2
33979: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
33980: LD_ADDR_VAR 0 3
33984: PUSH
33985: DOUBLE
33986: LD_EXP 136
33990: PUSH
33991: LD_VAR 0 4
33995: ARRAY
33996: INC
33997: ST_TO_ADDR
33998: LD_INT 1
34000: PUSH
34001: FOR_DOWNTO
34002: IFFALSE 34174
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
34004: LD_ADDR_VAR 0 5
34008: PUSH
34009: LD_EXP 136
34013: PUSH
34014: LD_VAR 0 4
34018: ARRAY
34019: PUSH
34020: LD_VAR 0 3
34024: ARRAY
34025: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
34026: LD_VAR 0 5
34030: PUSH
34031: LD_INT 1
34033: ARRAY
34034: PPUSH
34035: CALL_OW 302
34039: NOT
34040: PUSH
34041: LD_VAR 0 5
34045: PUSH
34046: LD_INT 1
34048: ARRAY
34049: PPUSH
34050: CALL_OW 255
34054: PUSH
34055: LD_VAR 0 1
34059: PPUSH
34060: CALL_OW 255
34064: NONEQUAL
34065: OR
34066: IFFALSE 34172
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
34068: LD_VAR 0 5
34072: PUSH
34073: LD_INT 1
34075: ARRAY
34076: PPUSH
34077: CALL_OW 305
34081: PUSH
34082: LD_VAR 0 5
34086: PUSH
34087: LD_INT 1
34089: ARRAY
34090: PPUSH
34091: CALL_OW 255
34095: PUSH
34096: LD_VAR 0 1
34100: PPUSH
34101: CALL_OW 255
34105: EQUAL
34106: AND
34107: IFFALSE 34131
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
34109: LD_VAR 0 5
34113: PUSH
34114: LD_INT 1
34116: ARRAY
34117: PPUSH
34118: LD_VAR 0 5
34122: PUSH
34123: LD_INT 2
34125: ARRAY
34126: PPUSH
34127: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
34131: LD_ADDR_EXP 136
34135: PUSH
34136: LD_EXP 136
34140: PPUSH
34141: LD_VAR 0 4
34145: PPUSH
34146: LD_EXP 136
34150: PUSH
34151: LD_VAR 0 4
34155: ARRAY
34156: PPUSH
34157: LD_VAR 0 3
34161: PPUSH
34162: CALL_OW 3
34166: PPUSH
34167: CALL_OW 1
34171: ST_TO_ADDR
// end ; end ;
34172: GO 34001
34174: POP
34175: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34176: LD_VAR 0 1
34180: PPUSH
34181: LD_EXP 136
34185: PUSH
34186: LD_VAR 0 4
34190: ARRAY
34191: PUSH
34192: LD_INT 0
34194: PLUS
34195: PPUSH
34196: CALL_OW 505
// end ;
34200: LD_VAR 0 2
34204: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
34205: LD_INT 0
34207: PPUSH
34208: PPUSH
34209: PPUSH
34210: PPUSH
// if not hack in hackTanks then
34211: LD_VAR 0 1
34215: PUSH
34216: LD_EXP 135
34220: IN
34221: NOT
34222: IFFALSE 34226
// exit ;
34224: GO 34311
// index := GetElementIndex ( hackTanks , hack ) ;
34226: LD_ADDR_VAR 0 5
34230: PUSH
34231: LD_EXP 135
34235: PPUSH
34236: LD_VAR 0 1
34240: PPUSH
34241: CALL 41101 0 2
34245: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
34246: LD_ADDR_VAR 0 4
34250: PUSH
34251: DOUBLE
34252: LD_INT 1
34254: DEC
34255: ST_TO_ADDR
34256: LD_EXP 136
34260: PUSH
34261: LD_VAR 0 5
34265: ARRAY
34266: PUSH
34267: FOR_TO
34268: IFFALSE 34309
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
34270: LD_EXP 136
34274: PUSH
34275: LD_VAR 0 5
34279: ARRAY
34280: PUSH
34281: LD_VAR 0 4
34285: ARRAY
34286: PUSH
34287: LD_INT 1
34289: ARRAY
34290: PUSH
34291: LD_VAR 0 2
34295: EQUAL
34296: IFFALSE 34307
// KillUnit ( vehicle ) ;
34298: LD_VAR 0 2
34302: PPUSH
34303: CALL_OW 66
34307: GO 34267
34309: POP
34310: POP
// end ;
34311: LD_VAR 0 3
34315: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
34316: LD_EXP 140
34320: NOT
34321: IFFALSE 34356
34323: GO 34325
34325: DISABLE
// begin initMiner := true ;
34326: LD_ADDR_EXP 140
34330: PUSH
34331: LD_INT 1
34333: ST_TO_ADDR
// minersList := [ ] ;
34334: LD_ADDR_EXP 141
34338: PUSH
34339: EMPTY
34340: ST_TO_ADDR
// minerMinesList := [ ] ;
34341: LD_ADDR_EXP 142
34345: PUSH
34346: EMPTY
34347: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
34348: LD_ADDR_EXP 143
34352: PUSH
34353: LD_INT 5
34355: ST_TO_ADDR
// end ;
34356: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
34357: LD_EXP 140
34361: PUSH
34362: LD_INT 34
34364: PUSH
34365: LD_EXP 65
34369: PUSH
34370: EMPTY
34371: LIST
34372: LIST
34373: PPUSH
34374: CALL_OW 69
34378: AND
34379: IFFALSE 34842
34381: GO 34383
34383: DISABLE
34384: LD_INT 0
34386: PPUSH
34387: PPUSH
34388: PPUSH
34389: PPUSH
// begin enable ;
34390: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
34391: LD_ADDR_VAR 0 1
34395: PUSH
34396: LD_INT 34
34398: PUSH
34399: LD_EXP 65
34403: PUSH
34404: EMPTY
34405: LIST
34406: LIST
34407: PPUSH
34408: CALL_OW 69
34412: PUSH
34413: FOR_IN
34414: IFFALSE 34486
// begin if not i in minersList then
34416: LD_VAR 0 1
34420: PUSH
34421: LD_EXP 141
34425: IN
34426: NOT
34427: IFFALSE 34484
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
34429: LD_ADDR_EXP 141
34433: PUSH
34434: LD_EXP 141
34438: PPUSH
34439: LD_EXP 141
34443: PUSH
34444: LD_INT 1
34446: PLUS
34447: PPUSH
34448: LD_VAR 0 1
34452: PPUSH
34453: CALL_OW 1
34457: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
34458: LD_ADDR_EXP 142
34462: PUSH
34463: LD_EXP 142
34467: PPUSH
34468: LD_EXP 142
34472: PUSH
34473: LD_INT 1
34475: PLUS
34476: PPUSH
34477: EMPTY
34478: PPUSH
34479: CALL_OW 1
34483: ST_TO_ADDR
// end end ;
34484: GO 34413
34486: POP
34487: POP
// for i := minerMinesList downto 1 do
34488: LD_ADDR_VAR 0 1
34492: PUSH
34493: DOUBLE
34494: LD_EXP 142
34498: INC
34499: ST_TO_ADDR
34500: LD_INT 1
34502: PUSH
34503: FOR_DOWNTO
34504: IFFALSE 34840
// begin if IsLive ( minersList [ i ] ) then
34506: LD_EXP 141
34510: PUSH
34511: LD_VAR 0 1
34515: ARRAY
34516: PPUSH
34517: CALL_OW 300
34521: IFFALSE 34549
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
34523: LD_EXP 141
34527: PUSH
34528: LD_VAR 0 1
34532: ARRAY
34533: PPUSH
34534: LD_EXP 142
34538: PUSH
34539: LD_VAR 0 1
34543: ARRAY
34544: PPUSH
34545: CALL_OW 505
// if not minerMinesList [ i ] then
34549: LD_EXP 142
34553: PUSH
34554: LD_VAR 0 1
34558: ARRAY
34559: NOT
34560: IFFALSE 34564
// continue ;
34562: GO 34503
// for j := minerMinesList [ i ] downto 1 do
34564: LD_ADDR_VAR 0 2
34568: PUSH
34569: DOUBLE
34570: LD_EXP 142
34574: PUSH
34575: LD_VAR 0 1
34579: ARRAY
34580: INC
34581: ST_TO_ADDR
34582: LD_INT 1
34584: PUSH
34585: FOR_DOWNTO
34586: IFFALSE 34836
// begin side := GetSide ( minersList [ i ] ) ;
34588: LD_ADDR_VAR 0 3
34592: PUSH
34593: LD_EXP 141
34597: PUSH
34598: LD_VAR 0 1
34602: ARRAY
34603: PPUSH
34604: CALL_OW 255
34608: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
34609: LD_ADDR_VAR 0 4
34613: PUSH
34614: LD_EXP 142
34618: PUSH
34619: LD_VAR 0 1
34623: ARRAY
34624: PUSH
34625: LD_VAR 0 2
34629: ARRAY
34630: PUSH
34631: LD_INT 1
34633: ARRAY
34634: PPUSH
34635: LD_EXP 142
34639: PUSH
34640: LD_VAR 0 1
34644: ARRAY
34645: PUSH
34646: LD_VAR 0 2
34650: ARRAY
34651: PUSH
34652: LD_INT 2
34654: ARRAY
34655: PPUSH
34656: CALL_OW 428
34660: ST_TO_ADDR
// if not tmp then
34661: LD_VAR 0 4
34665: NOT
34666: IFFALSE 34670
// continue ;
34668: GO 34585
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
34670: LD_VAR 0 4
34674: PUSH
34675: LD_INT 81
34677: PUSH
34678: LD_VAR 0 3
34682: PUSH
34683: EMPTY
34684: LIST
34685: LIST
34686: PPUSH
34687: CALL_OW 69
34691: IN
34692: PUSH
34693: LD_EXP 142
34697: PUSH
34698: LD_VAR 0 1
34702: ARRAY
34703: PUSH
34704: LD_VAR 0 2
34708: ARRAY
34709: PUSH
34710: LD_INT 1
34712: ARRAY
34713: PPUSH
34714: LD_EXP 142
34718: PUSH
34719: LD_VAR 0 1
34723: ARRAY
34724: PUSH
34725: LD_VAR 0 2
34729: ARRAY
34730: PUSH
34731: LD_INT 2
34733: ARRAY
34734: PPUSH
34735: CALL_OW 458
34739: AND
34740: IFFALSE 34834
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
34742: LD_EXP 142
34746: PUSH
34747: LD_VAR 0 1
34751: ARRAY
34752: PUSH
34753: LD_VAR 0 2
34757: ARRAY
34758: PUSH
34759: LD_INT 1
34761: ARRAY
34762: PPUSH
34763: LD_EXP 142
34767: PUSH
34768: LD_VAR 0 1
34772: ARRAY
34773: PUSH
34774: LD_VAR 0 2
34778: ARRAY
34779: PUSH
34780: LD_INT 2
34782: ARRAY
34783: PPUSH
34784: LD_VAR 0 3
34788: PPUSH
34789: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
34793: LD_ADDR_EXP 142
34797: PUSH
34798: LD_EXP 142
34802: PPUSH
34803: LD_VAR 0 1
34807: PPUSH
34808: LD_EXP 142
34812: PUSH
34813: LD_VAR 0 1
34817: ARRAY
34818: PPUSH
34819: LD_VAR 0 2
34823: PPUSH
34824: CALL_OW 3
34828: PPUSH
34829: CALL_OW 1
34833: ST_TO_ADDR
// end ; end ;
34834: GO 34585
34836: POP
34837: POP
// end ;
34838: GO 34503
34840: POP
34841: POP
// end ;
34842: PPOPN 4
34844: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
34845: LD_INT 0
34847: PPUSH
34848: PPUSH
// result := false ;
34849: LD_ADDR_VAR 0 4
34853: PUSH
34854: LD_INT 0
34856: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
34857: LD_VAR 0 1
34861: PPUSH
34862: CALL_OW 264
34866: PUSH
34867: LD_EXP 65
34871: EQUAL
34872: NOT
34873: IFFALSE 34877
// exit ;
34875: GO 35117
// index := GetElementIndex ( minersList , unit ) ;
34877: LD_ADDR_VAR 0 5
34881: PUSH
34882: LD_EXP 141
34886: PPUSH
34887: LD_VAR 0 1
34891: PPUSH
34892: CALL 41101 0 2
34896: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
34897: LD_EXP 142
34901: PUSH
34902: LD_VAR 0 5
34906: ARRAY
34907: PUSH
34908: LD_EXP 143
34912: GREATEREQUAL
34913: IFFALSE 34917
// exit ;
34915: GO 35117
// ComMoveXY ( unit , x , y ) ;
34917: LD_VAR 0 1
34921: PPUSH
34922: LD_VAR 0 2
34926: PPUSH
34927: LD_VAR 0 3
34931: PPUSH
34932: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
34936: LD_INT 35
34938: PPUSH
34939: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
34943: LD_VAR 0 1
34947: PPUSH
34948: LD_VAR 0 2
34952: PPUSH
34953: LD_VAR 0 3
34957: PPUSH
34958: CALL 71873 0 3
34962: NOT
34963: PUSH
34964: LD_VAR 0 1
34968: PPUSH
34969: CALL_OW 314
34973: AND
34974: IFFALSE 34978
// exit ;
34976: GO 35117
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
34978: LD_VAR 0 2
34982: PPUSH
34983: LD_VAR 0 3
34987: PPUSH
34988: CALL_OW 428
34992: PUSH
34993: LD_VAR 0 1
34997: EQUAL
34998: PUSH
34999: LD_VAR 0 1
35003: PPUSH
35004: CALL_OW 314
35008: NOT
35009: AND
35010: IFFALSE 34936
// PlaySoundXY ( x , y , PlantMine ) ;
35012: LD_VAR 0 2
35016: PPUSH
35017: LD_VAR 0 3
35021: PPUSH
35022: LD_STRING PlantMine
35024: PPUSH
35025: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
35029: LD_VAR 0 2
35033: PPUSH
35034: LD_VAR 0 3
35038: PPUSH
35039: LD_VAR 0 1
35043: PPUSH
35044: CALL_OW 255
35048: PPUSH
35049: LD_INT 0
35051: PPUSH
35052: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
35056: LD_ADDR_EXP 142
35060: PUSH
35061: LD_EXP 142
35065: PPUSH
35066: LD_VAR 0 5
35070: PUSH
35071: LD_EXP 142
35075: PUSH
35076: LD_VAR 0 5
35080: ARRAY
35081: PUSH
35082: LD_INT 1
35084: PLUS
35085: PUSH
35086: EMPTY
35087: LIST
35088: LIST
35089: PPUSH
35090: LD_VAR 0 2
35094: PUSH
35095: LD_VAR 0 3
35099: PUSH
35100: EMPTY
35101: LIST
35102: LIST
35103: PPUSH
35104: CALL 41316 0 3
35108: ST_TO_ADDR
// result := true ;
35109: LD_ADDR_VAR 0 4
35113: PUSH
35114: LD_INT 1
35116: ST_TO_ADDR
// end ;
35117: LD_VAR 0 4
35121: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
35122: LD_INT 0
35124: PPUSH
35125: PPUSH
35126: PPUSH
// if not unit in minersList then
35127: LD_VAR 0 1
35131: PUSH
35132: LD_EXP 141
35136: IN
35137: NOT
35138: IFFALSE 35142
// exit ;
35140: GO 35534
// index := GetElementIndex ( minersList , unit ) ;
35142: LD_ADDR_VAR 0 6
35146: PUSH
35147: LD_EXP 141
35151: PPUSH
35152: LD_VAR 0 1
35156: PPUSH
35157: CALL 41101 0 2
35161: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
35162: LD_ADDR_VAR 0 5
35166: PUSH
35167: DOUBLE
35168: LD_EXP 142
35172: PUSH
35173: LD_VAR 0 6
35177: ARRAY
35178: INC
35179: ST_TO_ADDR
35180: LD_INT 1
35182: PUSH
35183: FOR_DOWNTO
35184: IFFALSE 35345
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
35186: LD_EXP 142
35190: PUSH
35191: LD_VAR 0 6
35195: ARRAY
35196: PUSH
35197: LD_VAR 0 5
35201: ARRAY
35202: PUSH
35203: LD_INT 1
35205: ARRAY
35206: PUSH
35207: LD_VAR 0 2
35211: EQUAL
35212: PUSH
35213: LD_EXP 142
35217: PUSH
35218: LD_VAR 0 6
35222: ARRAY
35223: PUSH
35224: LD_VAR 0 5
35228: ARRAY
35229: PUSH
35230: LD_INT 2
35232: ARRAY
35233: PUSH
35234: LD_VAR 0 3
35238: EQUAL
35239: AND
35240: IFFALSE 35343
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35242: LD_EXP 142
35246: PUSH
35247: LD_VAR 0 6
35251: ARRAY
35252: PUSH
35253: LD_VAR 0 5
35257: ARRAY
35258: PUSH
35259: LD_INT 1
35261: ARRAY
35262: PPUSH
35263: LD_EXP 142
35267: PUSH
35268: LD_VAR 0 6
35272: ARRAY
35273: PUSH
35274: LD_VAR 0 5
35278: ARRAY
35279: PUSH
35280: LD_INT 2
35282: ARRAY
35283: PPUSH
35284: LD_VAR 0 1
35288: PPUSH
35289: CALL_OW 255
35293: PPUSH
35294: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35298: LD_ADDR_EXP 142
35302: PUSH
35303: LD_EXP 142
35307: PPUSH
35308: LD_VAR 0 6
35312: PPUSH
35313: LD_EXP 142
35317: PUSH
35318: LD_VAR 0 6
35322: ARRAY
35323: PPUSH
35324: LD_VAR 0 5
35328: PPUSH
35329: CALL_OW 3
35333: PPUSH
35334: CALL_OW 1
35338: ST_TO_ADDR
// exit ;
35339: POP
35340: POP
35341: GO 35534
// end ; end ;
35343: GO 35183
35345: POP
35346: POP
// for i := minerMinesList [ index ] downto 1 do
35347: LD_ADDR_VAR 0 5
35351: PUSH
35352: DOUBLE
35353: LD_EXP 142
35357: PUSH
35358: LD_VAR 0 6
35362: ARRAY
35363: INC
35364: ST_TO_ADDR
35365: LD_INT 1
35367: PUSH
35368: FOR_DOWNTO
35369: IFFALSE 35532
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
35371: LD_EXP 142
35375: PUSH
35376: LD_VAR 0 6
35380: ARRAY
35381: PUSH
35382: LD_VAR 0 5
35386: ARRAY
35387: PUSH
35388: LD_INT 1
35390: ARRAY
35391: PPUSH
35392: LD_EXP 142
35396: PUSH
35397: LD_VAR 0 6
35401: ARRAY
35402: PUSH
35403: LD_VAR 0 5
35407: ARRAY
35408: PUSH
35409: LD_INT 2
35411: ARRAY
35412: PPUSH
35413: LD_VAR 0 2
35417: PPUSH
35418: LD_VAR 0 3
35422: PPUSH
35423: CALL_OW 298
35427: PUSH
35428: LD_INT 6
35430: LESS
35431: IFFALSE 35530
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35433: LD_EXP 142
35437: PUSH
35438: LD_VAR 0 6
35442: ARRAY
35443: PUSH
35444: LD_VAR 0 5
35448: ARRAY
35449: PUSH
35450: LD_INT 1
35452: ARRAY
35453: PPUSH
35454: LD_EXP 142
35458: PUSH
35459: LD_VAR 0 6
35463: ARRAY
35464: PUSH
35465: LD_VAR 0 5
35469: ARRAY
35470: PUSH
35471: LD_INT 2
35473: ARRAY
35474: PPUSH
35475: LD_VAR 0 1
35479: PPUSH
35480: CALL_OW 255
35484: PPUSH
35485: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35489: LD_ADDR_EXP 142
35493: PUSH
35494: LD_EXP 142
35498: PPUSH
35499: LD_VAR 0 6
35503: PPUSH
35504: LD_EXP 142
35508: PUSH
35509: LD_VAR 0 6
35513: ARRAY
35514: PPUSH
35515: LD_VAR 0 5
35519: PPUSH
35520: CALL_OW 3
35524: PPUSH
35525: CALL_OW 1
35529: ST_TO_ADDR
// end ; end ;
35530: GO 35368
35532: POP
35533: POP
// end ;
35534: LD_VAR 0 4
35538: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
35539: LD_INT 0
35541: PPUSH
35542: PPUSH
35543: PPUSH
35544: PPUSH
35545: PPUSH
35546: PPUSH
35547: PPUSH
35548: PPUSH
35549: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
35550: LD_VAR 0 1
35554: PPUSH
35555: CALL_OW 264
35559: PUSH
35560: LD_EXP 65
35564: EQUAL
35565: NOT
35566: PUSH
35567: LD_VAR 0 1
35571: PUSH
35572: LD_EXP 141
35576: IN
35577: NOT
35578: OR
35579: IFFALSE 35583
// exit ;
35581: GO 35905
// index := GetElementIndex ( minersList , unit ) ;
35583: LD_ADDR_VAR 0 6
35587: PUSH
35588: LD_EXP 141
35592: PPUSH
35593: LD_VAR 0 1
35597: PPUSH
35598: CALL 41101 0 2
35602: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
35603: LD_ADDR_VAR 0 8
35607: PUSH
35608: LD_EXP 143
35612: PUSH
35613: LD_EXP 142
35617: PUSH
35618: LD_VAR 0 6
35622: ARRAY
35623: MINUS
35624: ST_TO_ADDR
// if not minesFreeAmount then
35625: LD_VAR 0 8
35629: NOT
35630: IFFALSE 35634
// exit ;
35632: GO 35905
// tmp := [ ] ;
35634: LD_ADDR_VAR 0 7
35638: PUSH
35639: EMPTY
35640: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
35641: LD_ADDR_VAR 0 5
35645: PUSH
35646: DOUBLE
35647: LD_INT 1
35649: DEC
35650: ST_TO_ADDR
35651: LD_VAR 0 8
35655: PUSH
35656: FOR_TO
35657: IFFALSE 35852
// begin _d := rand ( 0 , 5 ) ;
35659: LD_ADDR_VAR 0 11
35663: PUSH
35664: LD_INT 0
35666: PPUSH
35667: LD_INT 5
35669: PPUSH
35670: CALL_OW 12
35674: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
35675: LD_ADDR_VAR 0 12
35679: PUSH
35680: LD_INT 2
35682: PPUSH
35683: LD_INT 6
35685: PPUSH
35686: CALL_OW 12
35690: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
35691: LD_ADDR_VAR 0 9
35695: PUSH
35696: LD_VAR 0 2
35700: PPUSH
35701: LD_VAR 0 11
35705: PPUSH
35706: LD_VAR 0 12
35710: PPUSH
35711: CALL_OW 272
35715: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
35716: LD_ADDR_VAR 0 10
35720: PUSH
35721: LD_VAR 0 3
35725: PPUSH
35726: LD_VAR 0 11
35730: PPUSH
35731: LD_VAR 0 12
35735: PPUSH
35736: CALL_OW 273
35740: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
35741: LD_VAR 0 9
35745: PPUSH
35746: LD_VAR 0 10
35750: PPUSH
35751: CALL_OW 488
35755: PUSH
35756: LD_VAR 0 9
35760: PUSH
35761: LD_VAR 0 10
35765: PUSH
35766: EMPTY
35767: LIST
35768: LIST
35769: PUSH
35770: LD_VAR 0 7
35774: IN
35775: NOT
35776: AND
35777: PUSH
35778: LD_VAR 0 9
35782: PPUSH
35783: LD_VAR 0 10
35787: PPUSH
35788: CALL_OW 458
35792: NOT
35793: AND
35794: IFFALSE 35836
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
35796: LD_ADDR_VAR 0 7
35800: PUSH
35801: LD_VAR 0 7
35805: PPUSH
35806: LD_VAR 0 7
35810: PUSH
35811: LD_INT 1
35813: PLUS
35814: PPUSH
35815: LD_VAR 0 9
35819: PUSH
35820: LD_VAR 0 10
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: PPUSH
35829: CALL_OW 1
35833: ST_TO_ADDR
35834: GO 35850
// i := i - 1 ;
35836: LD_ADDR_VAR 0 5
35840: PUSH
35841: LD_VAR 0 5
35845: PUSH
35846: LD_INT 1
35848: MINUS
35849: ST_TO_ADDR
// end ;
35850: GO 35656
35852: POP
35853: POP
// for i in tmp do
35854: LD_ADDR_VAR 0 5
35858: PUSH
35859: LD_VAR 0 7
35863: PUSH
35864: FOR_IN
35865: IFFALSE 35903
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
35867: LD_VAR 0 1
35871: PPUSH
35872: LD_VAR 0 5
35876: PUSH
35877: LD_INT 1
35879: ARRAY
35880: PPUSH
35881: LD_VAR 0 5
35885: PUSH
35886: LD_INT 2
35888: ARRAY
35889: PPUSH
35890: CALL 34845 0 3
35894: NOT
35895: IFFALSE 35901
// exit ;
35897: POP
35898: POP
35899: GO 35905
35901: GO 35864
35903: POP
35904: POP
// end ;
35905: LD_VAR 0 4
35909: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
35910: LD_INT 0
35912: PPUSH
35913: PPUSH
35914: PPUSH
35915: PPUSH
35916: PPUSH
35917: PPUSH
35918: PPUSH
// if not GetClass ( unit ) = class_sniper then
35919: LD_VAR 0 1
35923: PPUSH
35924: CALL_OW 257
35928: PUSH
35929: LD_INT 5
35931: EQUAL
35932: NOT
35933: IFFALSE 35937
// exit ;
35935: GO 36325
// dist := 8 ;
35937: LD_ADDR_VAR 0 5
35941: PUSH
35942: LD_INT 8
35944: ST_TO_ADDR
// viewRange := 12 ;
35945: LD_ADDR_VAR 0 7
35949: PUSH
35950: LD_INT 12
35952: ST_TO_ADDR
// side := GetSide ( unit ) ;
35953: LD_ADDR_VAR 0 6
35957: PUSH
35958: LD_VAR 0 1
35962: PPUSH
35963: CALL_OW 255
35967: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
35968: LD_INT 61
35970: PPUSH
35971: LD_VAR 0 6
35975: PPUSH
35976: CALL_OW 321
35980: PUSH
35981: LD_INT 2
35983: EQUAL
35984: IFFALSE 35994
// viewRange := 16 ;
35986: LD_ADDR_VAR 0 7
35990: PUSH
35991: LD_INT 16
35993: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
35994: LD_VAR 0 1
35998: PPUSH
35999: LD_VAR 0 2
36003: PPUSH
36004: LD_VAR 0 3
36008: PPUSH
36009: CALL_OW 297
36013: PUSH
36014: LD_VAR 0 5
36018: GREATER
36019: IFFALSE 36098
// begin ComMoveXY ( unit , x , y ) ;
36021: LD_VAR 0 1
36025: PPUSH
36026: LD_VAR 0 2
36030: PPUSH
36031: LD_VAR 0 3
36035: PPUSH
36036: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36040: LD_INT 35
36042: PPUSH
36043: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
36047: LD_VAR 0 1
36051: PPUSH
36052: LD_VAR 0 2
36056: PPUSH
36057: LD_VAR 0 3
36061: PPUSH
36062: CALL 71873 0 3
36066: NOT
36067: IFFALSE 36071
// exit ;
36069: GO 36325
// until GetDistUnitXY ( unit , x , y ) < dist ;
36071: LD_VAR 0 1
36075: PPUSH
36076: LD_VAR 0 2
36080: PPUSH
36081: LD_VAR 0 3
36085: PPUSH
36086: CALL_OW 297
36090: PUSH
36091: LD_VAR 0 5
36095: LESS
36096: IFFALSE 36040
// end ; ComTurnXY ( unit , x , y ) ;
36098: LD_VAR 0 1
36102: PPUSH
36103: LD_VAR 0 2
36107: PPUSH
36108: LD_VAR 0 3
36112: PPUSH
36113: CALL_OW 118
// wait ( 5 ) ;
36117: LD_INT 5
36119: PPUSH
36120: CALL_OW 67
// _d := GetDir ( unit ) ;
36124: LD_ADDR_VAR 0 10
36128: PUSH
36129: LD_VAR 0 1
36133: PPUSH
36134: CALL_OW 254
36138: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
36139: LD_ADDR_VAR 0 8
36143: PUSH
36144: LD_VAR 0 1
36148: PPUSH
36149: CALL_OW 250
36153: PPUSH
36154: LD_VAR 0 10
36158: PPUSH
36159: LD_VAR 0 5
36163: PPUSH
36164: CALL_OW 272
36168: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
36169: LD_ADDR_VAR 0 9
36173: PUSH
36174: LD_VAR 0 1
36178: PPUSH
36179: CALL_OW 251
36183: PPUSH
36184: LD_VAR 0 10
36188: PPUSH
36189: LD_VAR 0 5
36193: PPUSH
36194: CALL_OW 273
36198: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36199: LD_VAR 0 8
36203: PPUSH
36204: LD_VAR 0 9
36208: PPUSH
36209: CALL_OW 488
36213: NOT
36214: IFFALSE 36218
// exit ;
36216: GO 36325
// ComAnimCustom ( unit , 1 ) ;
36218: LD_VAR 0 1
36222: PPUSH
36223: LD_INT 1
36225: PPUSH
36226: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
36230: LD_VAR 0 8
36234: PPUSH
36235: LD_VAR 0 9
36239: PPUSH
36240: LD_VAR 0 6
36244: PPUSH
36245: LD_VAR 0 7
36249: PPUSH
36250: CALL_OW 330
// repeat wait ( 1 ) ;
36254: LD_INT 1
36256: PPUSH
36257: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
36261: LD_VAR 0 1
36265: PPUSH
36266: CALL_OW 316
36270: PUSH
36271: LD_VAR 0 1
36275: PPUSH
36276: CALL_OW 314
36280: OR
36281: PUSH
36282: LD_VAR 0 1
36286: PPUSH
36287: CALL_OW 302
36291: NOT
36292: OR
36293: PUSH
36294: LD_VAR 0 1
36298: PPUSH
36299: CALL_OW 301
36303: OR
36304: IFFALSE 36254
// RemoveSeeing ( _x , _y , side ) ;
36306: LD_VAR 0 8
36310: PPUSH
36311: LD_VAR 0 9
36315: PPUSH
36316: LD_VAR 0 6
36320: PPUSH
36321: CALL_OW 331
// end ; end_of_file
36325: LD_VAR 0 4
36329: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
36330: LD_INT 0
36332: PPUSH
36333: PPUSH
// if exist_mode then
36334: LD_VAR 0 2
36338: IFFALSE 36363
// unit := CreateCharacter ( prefix & ident ) else
36340: LD_ADDR_VAR 0 5
36344: PUSH
36345: LD_VAR 0 3
36349: PUSH
36350: LD_VAR 0 1
36354: STR
36355: PPUSH
36356: CALL_OW 34
36360: ST_TO_ADDR
36361: GO 36378
// unit := NewCharacter ( ident ) ;
36363: LD_ADDR_VAR 0 5
36367: PUSH
36368: LD_VAR 0 1
36372: PPUSH
36373: CALL_OW 25
36377: ST_TO_ADDR
// result := unit ;
36378: LD_ADDR_VAR 0 4
36382: PUSH
36383: LD_VAR 0 5
36387: ST_TO_ADDR
// end ;
36388: LD_VAR 0 4
36392: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
36393: LD_INT 0
36395: PPUSH
36396: PPUSH
// if not side or not nation then
36397: LD_VAR 0 1
36401: NOT
36402: PUSH
36403: LD_VAR 0 2
36407: NOT
36408: OR
36409: IFFALSE 36413
// exit ;
36411: GO 37181
// case nation of nation_american :
36413: LD_VAR 0 2
36417: PUSH
36418: LD_INT 1
36420: DOUBLE
36421: EQUAL
36422: IFTRUE 36426
36424: GO 36640
36426: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
36427: LD_ADDR_VAR 0 4
36431: PUSH
36432: LD_INT 35
36434: PUSH
36435: LD_INT 45
36437: PUSH
36438: LD_INT 46
36440: PUSH
36441: LD_INT 47
36443: PUSH
36444: LD_INT 82
36446: PUSH
36447: LD_INT 83
36449: PUSH
36450: LD_INT 84
36452: PUSH
36453: LD_INT 85
36455: PUSH
36456: LD_INT 86
36458: PUSH
36459: LD_INT 1
36461: PUSH
36462: LD_INT 2
36464: PUSH
36465: LD_INT 6
36467: PUSH
36468: LD_INT 15
36470: PUSH
36471: LD_INT 16
36473: PUSH
36474: LD_INT 7
36476: PUSH
36477: LD_INT 12
36479: PUSH
36480: LD_INT 13
36482: PUSH
36483: LD_INT 10
36485: PUSH
36486: LD_INT 14
36488: PUSH
36489: LD_INT 20
36491: PUSH
36492: LD_INT 21
36494: PUSH
36495: LD_INT 22
36497: PUSH
36498: LD_INT 25
36500: PUSH
36501: LD_INT 32
36503: PUSH
36504: LD_INT 27
36506: PUSH
36507: LD_INT 36
36509: PUSH
36510: LD_INT 69
36512: PUSH
36513: LD_INT 39
36515: PUSH
36516: LD_INT 34
36518: PUSH
36519: LD_INT 40
36521: PUSH
36522: LD_INT 48
36524: PUSH
36525: LD_INT 49
36527: PUSH
36528: LD_INT 50
36530: PUSH
36531: LD_INT 51
36533: PUSH
36534: LD_INT 52
36536: PUSH
36537: LD_INT 53
36539: PUSH
36540: LD_INT 54
36542: PUSH
36543: LD_INT 55
36545: PUSH
36546: LD_INT 56
36548: PUSH
36549: LD_INT 57
36551: PUSH
36552: LD_INT 58
36554: PUSH
36555: LD_INT 59
36557: PUSH
36558: LD_INT 60
36560: PUSH
36561: LD_INT 61
36563: PUSH
36564: LD_INT 62
36566: PUSH
36567: LD_INT 80
36569: PUSH
36570: LD_INT 82
36572: PUSH
36573: LD_INT 83
36575: PUSH
36576: LD_INT 84
36578: PUSH
36579: LD_INT 85
36581: PUSH
36582: LD_INT 86
36584: PUSH
36585: EMPTY
36586: LIST
36587: LIST
36588: LIST
36589: LIST
36590: LIST
36591: LIST
36592: LIST
36593: LIST
36594: LIST
36595: LIST
36596: LIST
36597: LIST
36598: LIST
36599: LIST
36600: LIST
36601: LIST
36602: LIST
36603: LIST
36604: LIST
36605: LIST
36606: LIST
36607: LIST
36608: LIST
36609: LIST
36610: LIST
36611: LIST
36612: LIST
36613: LIST
36614: LIST
36615: LIST
36616: LIST
36617: LIST
36618: LIST
36619: LIST
36620: LIST
36621: LIST
36622: LIST
36623: LIST
36624: LIST
36625: LIST
36626: LIST
36627: LIST
36628: LIST
36629: LIST
36630: LIST
36631: LIST
36632: LIST
36633: LIST
36634: LIST
36635: LIST
36636: LIST
36637: ST_TO_ADDR
36638: GO 37105
36640: LD_INT 2
36642: DOUBLE
36643: EQUAL
36644: IFTRUE 36648
36646: GO 36874
36648: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
36649: LD_ADDR_VAR 0 4
36653: PUSH
36654: LD_INT 35
36656: PUSH
36657: LD_INT 45
36659: PUSH
36660: LD_INT 46
36662: PUSH
36663: LD_INT 47
36665: PUSH
36666: LD_INT 82
36668: PUSH
36669: LD_INT 83
36671: PUSH
36672: LD_INT 84
36674: PUSH
36675: LD_INT 85
36677: PUSH
36678: LD_INT 87
36680: PUSH
36681: LD_INT 70
36683: PUSH
36684: LD_INT 1
36686: PUSH
36687: LD_INT 11
36689: PUSH
36690: LD_INT 3
36692: PUSH
36693: LD_INT 4
36695: PUSH
36696: LD_INT 5
36698: PUSH
36699: LD_INT 6
36701: PUSH
36702: LD_INT 15
36704: PUSH
36705: LD_INT 18
36707: PUSH
36708: LD_INT 7
36710: PUSH
36711: LD_INT 17
36713: PUSH
36714: LD_INT 8
36716: PUSH
36717: LD_INT 20
36719: PUSH
36720: LD_INT 21
36722: PUSH
36723: LD_INT 22
36725: PUSH
36726: LD_INT 72
36728: PUSH
36729: LD_INT 26
36731: PUSH
36732: LD_INT 69
36734: PUSH
36735: LD_INT 39
36737: PUSH
36738: LD_INT 40
36740: PUSH
36741: LD_INT 41
36743: PUSH
36744: LD_INT 42
36746: PUSH
36747: LD_INT 43
36749: PUSH
36750: LD_INT 48
36752: PUSH
36753: LD_INT 49
36755: PUSH
36756: LD_INT 50
36758: PUSH
36759: LD_INT 51
36761: PUSH
36762: LD_INT 52
36764: PUSH
36765: LD_INT 53
36767: PUSH
36768: LD_INT 54
36770: PUSH
36771: LD_INT 55
36773: PUSH
36774: LD_INT 56
36776: PUSH
36777: LD_INT 60
36779: PUSH
36780: LD_INT 61
36782: PUSH
36783: LD_INT 62
36785: PUSH
36786: LD_INT 66
36788: PUSH
36789: LD_INT 67
36791: PUSH
36792: LD_INT 68
36794: PUSH
36795: LD_INT 81
36797: PUSH
36798: LD_INT 82
36800: PUSH
36801: LD_INT 83
36803: PUSH
36804: LD_INT 84
36806: PUSH
36807: LD_INT 85
36809: PUSH
36810: LD_INT 87
36812: PUSH
36813: LD_INT 88
36815: PUSH
36816: EMPTY
36817: LIST
36818: LIST
36819: LIST
36820: LIST
36821: LIST
36822: LIST
36823: LIST
36824: LIST
36825: LIST
36826: LIST
36827: LIST
36828: LIST
36829: LIST
36830: LIST
36831: LIST
36832: LIST
36833: LIST
36834: LIST
36835: LIST
36836: LIST
36837: LIST
36838: LIST
36839: LIST
36840: LIST
36841: LIST
36842: LIST
36843: LIST
36844: LIST
36845: LIST
36846: LIST
36847: LIST
36848: LIST
36849: LIST
36850: LIST
36851: LIST
36852: LIST
36853: LIST
36854: LIST
36855: LIST
36856: LIST
36857: LIST
36858: LIST
36859: LIST
36860: LIST
36861: LIST
36862: LIST
36863: LIST
36864: LIST
36865: LIST
36866: LIST
36867: LIST
36868: LIST
36869: LIST
36870: LIST
36871: ST_TO_ADDR
36872: GO 37105
36874: LD_INT 3
36876: DOUBLE
36877: EQUAL
36878: IFTRUE 36882
36880: GO 37104
36882: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
36883: LD_ADDR_VAR 0 4
36887: PUSH
36888: LD_INT 46
36890: PUSH
36891: LD_INT 47
36893: PUSH
36894: LD_INT 1
36896: PUSH
36897: LD_INT 2
36899: PUSH
36900: LD_INT 82
36902: PUSH
36903: LD_INT 83
36905: PUSH
36906: LD_INT 84
36908: PUSH
36909: LD_INT 85
36911: PUSH
36912: LD_INT 86
36914: PUSH
36915: LD_INT 11
36917: PUSH
36918: LD_INT 9
36920: PUSH
36921: LD_INT 20
36923: PUSH
36924: LD_INT 19
36926: PUSH
36927: LD_INT 21
36929: PUSH
36930: LD_INT 24
36932: PUSH
36933: LD_INT 22
36935: PUSH
36936: LD_INT 25
36938: PUSH
36939: LD_INT 28
36941: PUSH
36942: LD_INT 29
36944: PUSH
36945: LD_INT 30
36947: PUSH
36948: LD_INT 31
36950: PUSH
36951: LD_INT 37
36953: PUSH
36954: LD_INT 38
36956: PUSH
36957: LD_INT 32
36959: PUSH
36960: LD_INT 27
36962: PUSH
36963: LD_INT 33
36965: PUSH
36966: LD_INT 69
36968: PUSH
36969: LD_INT 39
36971: PUSH
36972: LD_INT 34
36974: PUSH
36975: LD_INT 40
36977: PUSH
36978: LD_INT 71
36980: PUSH
36981: LD_INT 23
36983: PUSH
36984: LD_INT 44
36986: PUSH
36987: LD_INT 48
36989: PUSH
36990: LD_INT 49
36992: PUSH
36993: LD_INT 50
36995: PUSH
36996: LD_INT 51
36998: PUSH
36999: LD_INT 52
37001: PUSH
37002: LD_INT 53
37004: PUSH
37005: LD_INT 54
37007: PUSH
37008: LD_INT 55
37010: PUSH
37011: LD_INT 56
37013: PUSH
37014: LD_INT 57
37016: PUSH
37017: LD_INT 58
37019: PUSH
37020: LD_INT 59
37022: PUSH
37023: LD_INT 63
37025: PUSH
37026: LD_INT 64
37028: PUSH
37029: LD_INT 65
37031: PUSH
37032: LD_INT 82
37034: PUSH
37035: LD_INT 83
37037: PUSH
37038: LD_INT 84
37040: PUSH
37041: LD_INT 85
37043: PUSH
37044: LD_INT 86
37046: PUSH
37047: EMPTY
37048: LIST
37049: LIST
37050: LIST
37051: LIST
37052: LIST
37053: LIST
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: LIST
37062: LIST
37063: LIST
37064: LIST
37065: LIST
37066: LIST
37067: LIST
37068: LIST
37069: LIST
37070: LIST
37071: LIST
37072: LIST
37073: LIST
37074: LIST
37075: LIST
37076: LIST
37077: LIST
37078: LIST
37079: LIST
37080: LIST
37081: LIST
37082: LIST
37083: LIST
37084: LIST
37085: LIST
37086: LIST
37087: LIST
37088: LIST
37089: LIST
37090: LIST
37091: LIST
37092: LIST
37093: LIST
37094: LIST
37095: LIST
37096: LIST
37097: LIST
37098: LIST
37099: LIST
37100: LIST
37101: ST_TO_ADDR
37102: GO 37105
37104: POP
// if state > - 1 and state < 3 then
37105: LD_VAR 0 3
37109: PUSH
37110: LD_INT 1
37112: NEG
37113: GREATER
37114: PUSH
37115: LD_VAR 0 3
37119: PUSH
37120: LD_INT 3
37122: LESS
37123: AND
37124: IFFALSE 37181
// for i in result do
37126: LD_ADDR_VAR 0 5
37130: PUSH
37131: LD_VAR 0 4
37135: PUSH
37136: FOR_IN
37137: IFFALSE 37179
// if GetTech ( i , side ) <> state then
37139: LD_VAR 0 5
37143: PPUSH
37144: LD_VAR 0 1
37148: PPUSH
37149: CALL_OW 321
37153: PUSH
37154: LD_VAR 0 3
37158: NONEQUAL
37159: IFFALSE 37177
// result := result diff i ;
37161: LD_ADDR_VAR 0 4
37165: PUSH
37166: LD_VAR 0 4
37170: PUSH
37171: LD_VAR 0 5
37175: DIFF
37176: ST_TO_ADDR
37177: GO 37136
37179: POP
37180: POP
// end ;
37181: LD_VAR 0 4
37185: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
37186: LD_INT 0
37188: PPUSH
37189: PPUSH
37190: PPUSH
// result := true ;
37191: LD_ADDR_VAR 0 3
37195: PUSH
37196: LD_INT 1
37198: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
37199: LD_ADDR_VAR 0 5
37203: PUSH
37204: LD_VAR 0 2
37208: PPUSH
37209: CALL_OW 480
37213: ST_TO_ADDR
// if not tmp then
37214: LD_VAR 0 5
37218: NOT
37219: IFFALSE 37223
// exit ;
37221: GO 37272
// for i in tmp do
37223: LD_ADDR_VAR 0 4
37227: PUSH
37228: LD_VAR 0 5
37232: PUSH
37233: FOR_IN
37234: IFFALSE 37270
// if GetTech ( i , side ) <> state_researched then
37236: LD_VAR 0 4
37240: PPUSH
37241: LD_VAR 0 1
37245: PPUSH
37246: CALL_OW 321
37250: PUSH
37251: LD_INT 2
37253: NONEQUAL
37254: IFFALSE 37268
// begin result := false ;
37256: LD_ADDR_VAR 0 3
37260: PUSH
37261: LD_INT 0
37263: ST_TO_ADDR
// exit ;
37264: POP
37265: POP
37266: GO 37272
// end ;
37268: GO 37233
37270: POP
37271: POP
// end ;
37272: LD_VAR 0 3
37276: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
37277: LD_INT 0
37279: PPUSH
37280: PPUSH
37281: PPUSH
37282: PPUSH
37283: PPUSH
37284: PPUSH
37285: PPUSH
37286: PPUSH
37287: PPUSH
37288: PPUSH
37289: PPUSH
37290: PPUSH
37291: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
37292: LD_VAR 0 1
37296: NOT
37297: PUSH
37298: LD_VAR 0 1
37302: PPUSH
37303: CALL_OW 257
37307: PUSH
37308: LD_INT 9
37310: NONEQUAL
37311: OR
37312: IFFALSE 37316
// exit ;
37314: GO 37889
// side := GetSide ( unit ) ;
37316: LD_ADDR_VAR 0 9
37320: PUSH
37321: LD_VAR 0 1
37325: PPUSH
37326: CALL_OW 255
37330: ST_TO_ADDR
// tech_space := tech_spacanom ;
37331: LD_ADDR_VAR 0 12
37335: PUSH
37336: LD_INT 29
37338: ST_TO_ADDR
// tech_time := tech_taurad ;
37339: LD_ADDR_VAR 0 13
37343: PUSH
37344: LD_INT 28
37346: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
37347: LD_ADDR_VAR 0 11
37351: PUSH
37352: LD_VAR 0 1
37356: PPUSH
37357: CALL_OW 310
37361: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
37362: LD_VAR 0 11
37366: PPUSH
37367: CALL_OW 247
37371: PUSH
37372: LD_INT 2
37374: EQUAL
37375: IFFALSE 37379
// exit ;
37377: GO 37889
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37379: LD_ADDR_VAR 0 8
37383: PUSH
37384: LD_INT 81
37386: PUSH
37387: LD_VAR 0 9
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: PUSH
37396: LD_INT 3
37398: PUSH
37399: LD_INT 21
37401: PUSH
37402: LD_INT 3
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: PUSH
37409: EMPTY
37410: LIST
37411: LIST
37412: PUSH
37413: EMPTY
37414: LIST
37415: LIST
37416: PPUSH
37417: CALL_OW 69
37421: ST_TO_ADDR
// if not tmp then
37422: LD_VAR 0 8
37426: NOT
37427: IFFALSE 37431
// exit ;
37429: GO 37889
// if in_unit then
37431: LD_VAR 0 11
37435: IFFALSE 37459
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
37437: LD_ADDR_VAR 0 10
37441: PUSH
37442: LD_VAR 0 8
37446: PPUSH
37447: LD_VAR 0 11
37451: PPUSH
37452: CALL_OW 74
37456: ST_TO_ADDR
37457: GO 37479
// enemy := NearestUnitToUnit ( tmp , unit ) ;
37459: LD_ADDR_VAR 0 10
37463: PUSH
37464: LD_VAR 0 8
37468: PPUSH
37469: LD_VAR 0 1
37473: PPUSH
37474: CALL_OW 74
37478: ST_TO_ADDR
// if not enemy then
37479: LD_VAR 0 10
37483: NOT
37484: IFFALSE 37488
// exit ;
37486: GO 37889
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
37488: LD_VAR 0 11
37492: PUSH
37493: LD_VAR 0 11
37497: PPUSH
37498: LD_VAR 0 10
37502: PPUSH
37503: CALL_OW 296
37507: PUSH
37508: LD_INT 13
37510: GREATER
37511: AND
37512: PUSH
37513: LD_VAR 0 1
37517: PPUSH
37518: LD_VAR 0 10
37522: PPUSH
37523: CALL_OW 296
37527: PUSH
37528: LD_INT 12
37530: GREATER
37531: OR
37532: IFFALSE 37536
// exit ;
37534: GO 37889
// missile := [ 1 ] ;
37536: LD_ADDR_VAR 0 14
37540: PUSH
37541: LD_INT 1
37543: PUSH
37544: EMPTY
37545: LIST
37546: ST_TO_ADDR
// if Researched ( side , tech_space ) then
37547: LD_VAR 0 9
37551: PPUSH
37552: LD_VAR 0 12
37556: PPUSH
37557: CALL_OW 325
37561: IFFALSE 37590
// missile := Insert ( missile , missile + 1 , 2 ) ;
37563: LD_ADDR_VAR 0 14
37567: PUSH
37568: LD_VAR 0 14
37572: PPUSH
37573: LD_VAR 0 14
37577: PUSH
37578: LD_INT 1
37580: PLUS
37581: PPUSH
37582: LD_INT 2
37584: PPUSH
37585: CALL_OW 2
37589: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
37590: LD_VAR 0 9
37594: PPUSH
37595: LD_VAR 0 13
37599: PPUSH
37600: CALL_OW 325
37604: PUSH
37605: LD_VAR 0 10
37609: PPUSH
37610: CALL_OW 255
37614: PPUSH
37615: LD_VAR 0 13
37619: PPUSH
37620: CALL_OW 325
37624: NOT
37625: AND
37626: IFFALSE 37655
// missile := Insert ( missile , missile + 1 , 3 ) ;
37628: LD_ADDR_VAR 0 14
37632: PUSH
37633: LD_VAR 0 14
37637: PPUSH
37638: LD_VAR 0 14
37642: PUSH
37643: LD_INT 1
37645: PLUS
37646: PPUSH
37647: LD_INT 3
37649: PPUSH
37650: CALL_OW 2
37654: ST_TO_ADDR
// if missile < 2 then
37655: LD_VAR 0 14
37659: PUSH
37660: LD_INT 2
37662: LESS
37663: IFFALSE 37667
// exit ;
37665: GO 37889
// x := GetX ( enemy ) ;
37667: LD_ADDR_VAR 0 4
37671: PUSH
37672: LD_VAR 0 10
37676: PPUSH
37677: CALL_OW 250
37681: ST_TO_ADDR
// y := GetY ( enemy ) ;
37682: LD_ADDR_VAR 0 5
37686: PUSH
37687: LD_VAR 0 10
37691: PPUSH
37692: CALL_OW 251
37696: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
37697: LD_ADDR_VAR 0 6
37701: PUSH
37702: LD_VAR 0 4
37706: PUSH
37707: LD_INT 1
37709: NEG
37710: PPUSH
37711: LD_INT 1
37713: PPUSH
37714: CALL_OW 12
37718: PLUS
37719: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
37720: LD_ADDR_VAR 0 7
37724: PUSH
37725: LD_VAR 0 5
37729: PUSH
37730: LD_INT 1
37732: NEG
37733: PPUSH
37734: LD_INT 1
37736: PPUSH
37737: CALL_OW 12
37741: PLUS
37742: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37743: LD_VAR 0 6
37747: PPUSH
37748: LD_VAR 0 7
37752: PPUSH
37753: CALL_OW 488
37757: NOT
37758: IFFALSE 37780
// begin _x := x ;
37760: LD_ADDR_VAR 0 6
37764: PUSH
37765: LD_VAR 0 4
37769: ST_TO_ADDR
// _y := y ;
37770: LD_ADDR_VAR 0 7
37774: PUSH
37775: LD_VAR 0 5
37779: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
37780: LD_ADDR_VAR 0 3
37784: PUSH
37785: LD_INT 1
37787: PPUSH
37788: LD_VAR 0 14
37792: PPUSH
37793: CALL_OW 12
37797: ST_TO_ADDR
// case i of 1 :
37798: LD_VAR 0 3
37802: PUSH
37803: LD_INT 1
37805: DOUBLE
37806: EQUAL
37807: IFTRUE 37811
37809: GO 37828
37811: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
37812: LD_VAR 0 1
37816: PPUSH
37817: LD_VAR 0 10
37821: PPUSH
37822: CALL_OW 115
37826: GO 37889
37828: LD_INT 2
37830: DOUBLE
37831: EQUAL
37832: IFTRUE 37836
37834: GO 37858
37836: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
37837: LD_VAR 0 1
37841: PPUSH
37842: LD_VAR 0 6
37846: PPUSH
37847: LD_VAR 0 7
37851: PPUSH
37852: CALL_OW 153
37856: GO 37889
37858: LD_INT 3
37860: DOUBLE
37861: EQUAL
37862: IFTRUE 37866
37864: GO 37888
37866: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
37867: LD_VAR 0 1
37871: PPUSH
37872: LD_VAR 0 6
37876: PPUSH
37877: LD_VAR 0 7
37881: PPUSH
37882: CALL_OW 154
37886: GO 37889
37888: POP
// end ;
37889: LD_VAR 0 2
37893: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
37894: LD_INT 0
37896: PPUSH
37897: PPUSH
37898: PPUSH
37899: PPUSH
37900: PPUSH
37901: PPUSH
// if not unit or not building then
37902: LD_VAR 0 1
37906: NOT
37907: PUSH
37908: LD_VAR 0 2
37912: NOT
37913: OR
37914: IFFALSE 37918
// exit ;
37916: GO 38076
// x := GetX ( building ) ;
37918: LD_ADDR_VAR 0 5
37922: PUSH
37923: LD_VAR 0 2
37927: PPUSH
37928: CALL_OW 250
37932: ST_TO_ADDR
// y := GetY ( building ) ;
37933: LD_ADDR_VAR 0 6
37937: PUSH
37938: LD_VAR 0 2
37942: PPUSH
37943: CALL_OW 251
37947: ST_TO_ADDR
// for i = 0 to 5 do
37948: LD_ADDR_VAR 0 4
37952: PUSH
37953: DOUBLE
37954: LD_INT 0
37956: DEC
37957: ST_TO_ADDR
37958: LD_INT 5
37960: PUSH
37961: FOR_TO
37962: IFFALSE 38074
// begin _x := ShiftX ( x , i , 3 ) ;
37964: LD_ADDR_VAR 0 7
37968: PUSH
37969: LD_VAR 0 5
37973: PPUSH
37974: LD_VAR 0 4
37978: PPUSH
37979: LD_INT 3
37981: PPUSH
37982: CALL_OW 272
37986: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
37987: LD_ADDR_VAR 0 8
37991: PUSH
37992: LD_VAR 0 6
37996: PPUSH
37997: LD_VAR 0 4
38001: PPUSH
38002: LD_INT 3
38004: PPUSH
38005: CALL_OW 273
38009: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38010: LD_VAR 0 7
38014: PPUSH
38015: LD_VAR 0 8
38019: PPUSH
38020: CALL_OW 488
38024: NOT
38025: IFFALSE 38029
// continue ;
38027: GO 37961
// if HexInfo ( _x , _y ) = 0 then
38029: LD_VAR 0 7
38033: PPUSH
38034: LD_VAR 0 8
38038: PPUSH
38039: CALL_OW 428
38043: PUSH
38044: LD_INT 0
38046: EQUAL
38047: IFFALSE 38072
// begin ComMoveXY ( unit , _x , _y ) ;
38049: LD_VAR 0 1
38053: PPUSH
38054: LD_VAR 0 7
38058: PPUSH
38059: LD_VAR 0 8
38063: PPUSH
38064: CALL_OW 111
// exit ;
38068: POP
38069: POP
38070: GO 38076
// end ; end ;
38072: GO 37961
38074: POP
38075: POP
// end ;
38076: LD_VAR 0 3
38080: RET
// export function ScanBase ( side , base_area ) ; begin
38081: LD_INT 0
38083: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
38084: LD_ADDR_VAR 0 3
38088: PUSH
38089: LD_VAR 0 2
38093: PPUSH
38094: LD_INT 81
38096: PUSH
38097: LD_VAR 0 1
38101: PUSH
38102: EMPTY
38103: LIST
38104: LIST
38105: PPUSH
38106: CALL_OW 70
38110: ST_TO_ADDR
// end ;
38111: LD_VAR 0 3
38115: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
38116: LD_INT 0
38118: PPUSH
38119: PPUSH
38120: PPUSH
38121: PPUSH
// result := false ;
38122: LD_ADDR_VAR 0 2
38126: PUSH
38127: LD_INT 0
38129: ST_TO_ADDR
// side := GetSide ( unit ) ;
38130: LD_ADDR_VAR 0 3
38134: PUSH
38135: LD_VAR 0 1
38139: PPUSH
38140: CALL_OW 255
38144: ST_TO_ADDR
// nat := GetNation ( unit ) ;
38145: LD_ADDR_VAR 0 4
38149: PUSH
38150: LD_VAR 0 1
38154: PPUSH
38155: CALL_OW 248
38159: ST_TO_ADDR
// case nat of 1 :
38160: LD_VAR 0 4
38164: PUSH
38165: LD_INT 1
38167: DOUBLE
38168: EQUAL
38169: IFTRUE 38173
38171: GO 38184
38173: POP
// tech := tech_lassight ; 2 :
38174: LD_ADDR_VAR 0 5
38178: PUSH
38179: LD_INT 12
38181: ST_TO_ADDR
38182: GO 38223
38184: LD_INT 2
38186: DOUBLE
38187: EQUAL
38188: IFTRUE 38192
38190: GO 38203
38192: POP
// tech := tech_mortar ; 3 :
38193: LD_ADDR_VAR 0 5
38197: PUSH
38198: LD_INT 41
38200: ST_TO_ADDR
38201: GO 38223
38203: LD_INT 3
38205: DOUBLE
38206: EQUAL
38207: IFTRUE 38211
38209: GO 38222
38211: POP
// tech := tech_bazooka ; end ;
38212: LD_ADDR_VAR 0 5
38216: PUSH
38217: LD_INT 44
38219: ST_TO_ADDR
38220: GO 38223
38222: POP
// if Researched ( side , tech ) then
38223: LD_VAR 0 3
38227: PPUSH
38228: LD_VAR 0 5
38232: PPUSH
38233: CALL_OW 325
38237: IFFALSE 38264
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
38239: LD_ADDR_VAR 0 2
38243: PUSH
38244: LD_INT 5
38246: PUSH
38247: LD_INT 8
38249: PUSH
38250: LD_INT 9
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: LIST
38257: PUSH
38258: LD_VAR 0 4
38262: ARRAY
38263: ST_TO_ADDR
// end ;
38264: LD_VAR 0 2
38268: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
38269: LD_INT 0
38271: PPUSH
38272: PPUSH
38273: PPUSH
// if not mines then
38274: LD_VAR 0 2
38278: NOT
38279: IFFALSE 38283
// exit ;
38281: GO 38427
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38283: LD_ADDR_VAR 0 5
38287: PUSH
38288: LD_INT 81
38290: PUSH
38291: LD_VAR 0 1
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: PUSH
38300: LD_INT 3
38302: PUSH
38303: LD_INT 21
38305: PUSH
38306: LD_INT 3
38308: PUSH
38309: EMPTY
38310: LIST
38311: LIST
38312: PUSH
38313: EMPTY
38314: LIST
38315: LIST
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: PPUSH
38321: CALL_OW 69
38325: ST_TO_ADDR
// for i in mines do
38326: LD_ADDR_VAR 0 4
38330: PUSH
38331: LD_VAR 0 2
38335: PUSH
38336: FOR_IN
38337: IFFALSE 38425
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
38339: LD_VAR 0 4
38343: PUSH
38344: LD_INT 1
38346: ARRAY
38347: PPUSH
38348: LD_VAR 0 4
38352: PUSH
38353: LD_INT 2
38355: ARRAY
38356: PPUSH
38357: CALL_OW 458
38361: NOT
38362: IFFALSE 38366
// continue ;
38364: GO 38336
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
38366: LD_VAR 0 4
38370: PUSH
38371: LD_INT 1
38373: ARRAY
38374: PPUSH
38375: LD_VAR 0 4
38379: PUSH
38380: LD_INT 2
38382: ARRAY
38383: PPUSH
38384: CALL_OW 428
38388: PUSH
38389: LD_VAR 0 5
38393: IN
38394: IFFALSE 38423
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
38396: LD_VAR 0 4
38400: PUSH
38401: LD_INT 1
38403: ARRAY
38404: PPUSH
38405: LD_VAR 0 4
38409: PUSH
38410: LD_INT 2
38412: ARRAY
38413: PPUSH
38414: LD_VAR 0 1
38418: PPUSH
38419: CALL_OW 456
// end ;
38423: GO 38336
38425: POP
38426: POP
// end ;
38427: LD_VAR 0 3
38431: RET
// export function Count ( array ) ; var i ; begin
38432: LD_INT 0
38434: PPUSH
38435: PPUSH
// result := 0 ;
38436: LD_ADDR_VAR 0 2
38440: PUSH
38441: LD_INT 0
38443: ST_TO_ADDR
// for i in array do
38444: LD_ADDR_VAR 0 3
38448: PUSH
38449: LD_VAR 0 1
38453: PUSH
38454: FOR_IN
38455: IFFALSE 38479
// if i then
38457: LD_VAR 0 3
38461: IFFALSE 38477
// result := result + 1 ;
38463: LD_ADDR_VAR 0 2
38467: PUSH
38468: LD_VAR 0 2
38472: PUSH
38473: LD_INT 1
38475: PLUS
38476: ST_TO_ADDR
38477: GO 38454
38479: POP
38480: POP
// end ;
38481: LD_VAR 0 2
38485: RET
// export function IsEmpty ( building ) ; begin
38486: LD_INT 0
38488: PPUSH
// if not building then
38489: LD_VAR 0 1
38493: NOT
38494: IFFALSE 38498
// exit ;
38496: GO 38541
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
38498: LD_ADDR_VAR 0 2
38502: PUSH
38503: LD_VAR 0 1
38507: PUSH
38508: LD_INT 22
38510: PUSH
38511: LD_VAR 0 1
38515: PPUSH
38516: CALL_OW 255
38520: PUSH
38521: EMPTY
38522: LIST
38523: LIST
38524: PUSH
38525: LD_INT 58
38527: PUSH
38528: EMPTY
38529: LIST
38530: PUSH
38531: EMPTY
38532: LIST
38533: LIST
38534: PPUSH
38535: CALL_OW 69
38539: IN
38540: ST_TO_ADDR
// end ;
38541: LD_VAR 0 2
38545: RET
// export function IsNotFull ( building ) ; begin
38546: LD_INT 0
38548: PPUSH
// if not building then
38549: LD_VAR 0 1
38553: NOT
38554: IFFALSE 38558
// exit ;
38556: GO 38577
// result := UnitsInside ( building ) < 6 ;
38558: LD_ADDR_VAR 0 2
38562: PUSH
38563: LD_VAR 0 1
38567: PPUSH
38568: CALL_OW 313
38572: PUSH
38573: LD_INT 6
38575: LESS
38576: ST_TO_ADDR
// end ;
38577: LD_VAR 0 2
38581: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
38582: LD_INT 0
38584: PPUSH
38585: PPUSH
38586: PPUSH
38587: PPUSH
// tmp := [ ] ;
38588: LD_ADDR_VAR 0 3
38592: PUSH
38593: EMPTY
38594: ST_TO_ADDR
// list := [ ] ;
38595: LD_ADDR_VAR 0 5
38599: PUSH
38600: EMPTY
38601: ST_TO_ADDR
// for i = 16 to 25 do
38602: LD_ADDR_VAR 0 4
38606: PUSH
38607: DOUBLE
38608: LD_INT 16
38610: DEC
38611: ST_TO_ADDR
38612: LD_INT 25
38614: PUSH
38615: FOR_TO
38616: IFFALSE 38689
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
38618: LD_ADDR_VAR 0 3
38622: PUSH
38623: LD_VAR 0 3
38627: PUSH
38628: LD_INT 22
38630: PUSH
38631: LD_VAR 0 1
38635: PPUSH
38636: CALL_OW 255
38640: PUSH
38641: EMPTY
38642: LIST
38643: LIST
38644: PUSH
38645: LD_INT 91
38647: PUSH
38648: LD_VAR 0 1
38652: PUSH
38653: LD_INT 6
38655: PUSH
38656: EMPTY
38657: LIST
38658: LIST
38659: LIST
38660: PUSH
38661: LD_INT 30
38663: PUSH
38664: LD_VAR 0 4
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: LIST
38677: PUSH
38678: EMPTY
38679: LIST
38680: PPUSH
38681: CALL_OW 69
38685: ADD
38686: ST_TO_ADDR
38687: GO 38615
38689: POP
38690: POP
// for i = 1 to tmp do
38691: LD_ADDR_VAR 0 4
38695: PUSH
38696: DOUBLE
38697: LD_INT 1
38699: DEC
38700: ST_TO_ADDR
38701: LD_VAR 0 3
38705: PUSH
38706: FOR_TO
38707: IFFALSE 38795
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
38709: LD_ADDR_VAR 0 5
38713: PUSH
38714: LD_VAR 0 5
38718: PUSH
38719: LD_VAR 0 3
38723: PUSH
38724: LD_VAR 0 4
38728: ARRAY
38729: PPUSH
38730: CALL_OW 266
38734: PUSH
38735: LD_VAR 0 3
38739: PUSH
38740: LD_VAR 0 4
38744: ARRAY
38745: PPUSH
38746: CALL_OW 250
38750: PUSH
38751: LD_VAR 0 3
38755: PUSH
38756: LD_VAR 0 4
38760: ARRAY
38761: PPUSH
38762: CALL_OW 251
38766: PUSH
38767: LD_VAR 0 3
38771: PUSH
38772: LD_VAR 0 4
38776: ARRAY
38777: PPUSH
38778: CALL_OW 254
38782: PUSH
38783: EMPTY
38784: LIST
38785: LIST
38786: LIST
38787: LIST
38788: PUSH
38789: EMPTY
38790: LIST
38791: ADD
38792: ST_TO_ADDR
38793: GO 38706
38795: POP
38796: POP
// result := list ;
38797: LD_ADDR_VAR 0 2
38801: PUSH
38802: LD_VAR 0 5
38806: ST_TO_ADDR
// end ;
38807: LD_VAR 0 2
38811: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
38812: LD_INT 0
38814: PPUSH
38815: PPUSH
38816: PPUSH
38817: PPUSH
38818: PPUSH
38819: PPUSH
38820: PPUSH
// if not factory then
38821: LD_VAR 0 1
38825: NOT
38826: IFFALSE 38830
// exit ;
38828: GO 39423
// if control = control_apeman then
38830: LD_VAR 0 4
38834: PUSH
38835: LD_INT 5
38837: EQUAL
38838: IFFALSE 38947
// begin tmp := UnitsInside ( factory ) ;
38840: LD_ADDR_VAR 0 8
38844: PUSH
38845: LD_VAR 0 1
38849: PPUSH
38850: CALL_OW 313
38854: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
38855: LD_VAR 0 8
38859: PPUSH
38860: LD_INT 25
38862: PUSH
38863: LD_INT 12
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: PPUSH
38870: CALL_OW 72
38874: NOT
38875: IFFALSE 38885
// control := control_manual ;
38877: LD_ADDR_VAR 0 4
38881: PUSH
38882: LD_INT 1
38884: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
38885: LD_ADDR_VAR 0 8
38889: PUSH
38890: LD_VAR 0 1
38894: PPUSH
38895: CALL 38582 0 1
38899: ST_TO_ADDR
// if tmp then
38900: LD_VAR 0 8
38904: IFFALSE 38947
// begin for i in tmp do
38906: LD_ADDR_VAR 0 7
38910: PUSH
38911: LD_VAR 0 8
38915: PUSH
38916: FOR_IN
38917: IFFALSE 38945
// if i [ 1 ] = b_ext_radio then
38919: LD_VAR 0 7
38923: PUSH
38924: LD_INT 1
38926: ARRAY
38927: PUSH
38928: LD_INT 22
38930: EQUAL
38931: IFFALSE 38943
// begin control := control_remote ;
38933: LD_ADDR_VAR 0 4
38937: PUSH
38938: LD_INT 2
38940: ST_TO_ADDR
// break ;
38941: GO 38945
// end ;
38943: GO 38916
38945: POP
38946: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38947: LD_VAR 0 1
38951: PPUSH
38952: LD_VAR 0 2
38956: PPUSH
38957: LD_VAR 0 3
38961: PPUSH
38962: LD_VAR 0 4
38966: PPUSH
38967: LD_VAR 0 5
38971: PPUSH
38972: CALL_OW 448
38976: IFFALSE 39011
// begin result := [ chassis , engine , control , weapon ] ;
38978: LD_ADDR_VAR 0 6
38982: PUSH
38983: LD_VAR 0 2
38987: PUSH
38988: LD_VAR 0 3
38992: PUSH
38993: LD_VAR 0 4
38997: PUSH
38998: LD_VAR 0 5
39002: PUSH
39003: EMPTY
39004: LIST
39005: LIST
39006: LIST
39007: LIST
39008: ST_TO_ADDR
// exit ;
39009: GO 39423
// end ; _chassis := AvailableChassisList ( factory ) ;
39011: LD_ADDR_VAR 0 9
39015: PUSH
39016: LD_VAR 0 1
39020: PPUSH
39021: CALL_OW 475
39025: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
39026: LD_ADDR_VAR 0 11
39030: PUSH
39031: LD_VAR 0 1
39035: PPUSH
39036: CALL_OW 476
39040: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
39041: LD_ADDR_VAR 0 12
39045: PUSH
39046: LD_VAR 0 1
39050: PPUSH
39051: CALL_OW 477
39055: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
39056: LD_ADDR_VAR 0 10
39060: PUSH
39061: LD_VAR 0 1
39065: PPUSH
39066: CALL_OW 478
39070: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
39071: LD_VAR 0 9
39075: NOT
39076: PUSH
39077: LD_VAR 0 11
39081: NOT
39082: OR
39083: PUSH
39084: LD_VAR 0 12
39088: NOT
39089: OR
39090: PUSH
39091: LD_VAR 0 10
39095: NOT
39096: OR
39097: IFFALSE 39132
// begin result := [ chassis , engine , control , weapon ] ;
39099: LD_ADDR_VAR 0 6
39103: PUSH
39104: LD_VAR 0 2
39108: PUSH
39109: LD_VAR 0 3
39113: PUSH
39114: LD_VAR 0 4
39118: PUSH
39119: LD_VAR 0 5
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: ST_TO_ADDR
// exit ;
39130: GO 39423
// end ; if not chassis in _chassis then
39132: LD_VAR 0 2
39136: PUSH
39137: LD_VAR 0 9
39141: IN
39142: NOT
39143: IFFALSE 39169
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
39145: LD_ADDR_VAR 0 2
39149: PUSH
39150: LD_VAR 0 9
39154: PUSH
39155: LD_INT 1
39157: PPUSH
39158: LD_VAR 0 9
39162: PPUSH
39163: CALL_OW 12
39167: ARRAY
39168: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
39169: LD_VAR 0 2
39173: PPUSH
39174: LD_VAR 0 3
39178: PPUSH
39179: CALL 39428 0 2
39183: NOT
39184: IFFALSE 39243
// repeat engine := _engine [ 1 ] ;
39186: LD_ADDR_VAR 0 3
39190: PUSH
39191: LD_VAR 0 11
39195: PUSH
39196: LD_INT 1
39198: ARRAY
39199: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
39200: LD_ADDR_VAR 0 11
39204: PUSH
39205: LD_VAR 0 11
39209: PPUSH
39210: LD_INT 1
39212: PPUSH
39213: CALL_OW 3
39217: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
39218: LD_VAR 0 2
39222: PPUSH
39223: LD_VAR 0 3
39227: PPUSH
39228: CALL 39428 0 2
39232: PUSH
39233: LD_VAR 0 11
39237: PUSH
39238: EMPTY
39239: EQUAL
39240: OR
39241: IFFALSE 39186
// if not control in _control then
39243: LD_VAR 0 4
39247: PUSH
39248: LD_VAR 0 12
39252: IN
39253: NOT
39254: IFFALSE 39280
// control := _control [ rand ( 1 , _control ) ] ;
39256: LD_ADDR_VAR 0 4
39260: PUSH
39261: LD_VAR 0 12
39265: PUSH
39266: LD_INT 1
39268: PPUSH
39269: LD_VAR 0 12
39273: PPUSH
39274: CALL_OW 12
39278: ARRAY
39279: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
39280: LD_VAR 0 2
39284: PPUSH
39285: LD_VAR 0 5
39289: PPUSH
39290: CALL 39648 0 2
39294: NOT
39295: IFFALSE 39354
// repeat weapon := _weapon [ 1 ] ;
39297: LD_ADDR_VAR 0 5
39301: PUSH
39302: LD_VAR 0 10
39306: PUSH
39307: LD_INT 1
39309: ARRAY
39310: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
39311: LD_ADDR_VAR 0 10
39315: PUSH
39316: LD_VAR 0 10
39320: PPUSH
39321: LD_INT 1
39323: PPUSH
39324: CALL_OW 3
39328: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
39329: LD_VAR 0 2
39333: PPUSH
39334: LD_VAR 0 5
39338: PPUSH
39339: CALL 39648 0 2
39343: PUSH
39344: LD_VAR 0 10
39348: PUSH
39349: EMPTY
39350: EQUAL
39351: OR
39352: IFFALSE 39297
// result := [ ] ;
39354: LD_ADDR_VAR 0 6
39358: PUSH
39359: EMPTY
39360: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39361: LD_VAR 0 1
39365: PPUSH
39366: LD_VAR 0 2
39370: PPUSH
39371: LD_VAR 0 3
39375: PPUSH
39376: LD_VAR 0 4
39380: PPUSH
39381: LD_VAR 0 5
39385: PPUSH
39386: CALL_OW 448
39390: IFFALSE 39423
// result := [ chassis , engine , control , weapon ] ;
39392: LD_ADDR_VAR 0 6
39396: PUSH
39397: LD_VAR 0 2
39401: PUSH
39402: LD_VAR 0 3
39406: PUSH
39407: LD_VAR 0 4
39411: PUSH
39412: LD_VAR 0 5
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: LIST
39421: LIST
39422: ST_TO_ADDR
// end ;
39423: LD_VAR 0 6
39427: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
39428: LD_INT 0
39430: PPUSH
// if not chassis or not engine then
39431: LD_VAR 0 1
39435: NOT
39436: PUSH
39437: LD_VAR 0 2
39441: NOT
39442: OR
39443: IFFALSE 39447
// exit ;
39445: GO 39643
// case engine of engine_solar :
39447: LD_VAR 0 2
39451: PUSH
39452: LD_INT 2
39454: DOUBLE
39455: EQUAL
39456: IFTRUE 39460
39458: GO 39498
39460: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
39461: LD_ADDR_VAR 0 3
39465: PUSH
39466: LD_INT 11
39468: PUSH
39469: LD_INT 12
39471: PUSH
39472: LD_INT 13
39474: PUSH
39475: LD_INT 14
39477: PUSH
39478: LD_INT 1
39480: PUSH
39481: LD_INT 2
39483: PUSH
39484: LD_INT 3
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: LIST
39491: LIST
39492: LIST
39493: LIST
39494: LIST
39495: ST_TO_ADDR
39496: GO 39627
39498: LD_INT 1
39500: DOUBLE
39501: EQUAL
39502: IFTRUE 39506
39504: GO 39568
39506: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
39507: LD_ADDR_VAR 0 3
39511: PUSH
39512: LD_INT 11
39514: PUSH
39515: LD_INT 12
39517: PUSH
39518: LD_INT 13
39520: PUSH
39521: LD_INT 14
39523: PUSH
39524: LD_INT 1
39526: PUSH
39527: LD_INT 2
39529: PUSH
39530: LD_INT 3
39532: PUSH
39533: LD_INT 4
39535: PUSH
39536: LD_INT 5
39538: PUSH
39539: LD_INT 21
39541: PUSH
39542: LD_INT 23
39544: PUSH
39545: LD_INT 22
39547: PUSH
39548: LD_INT 24
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: LIST
39565: ST_TO_ADDR
39566: GO 39627
39568: LD_INT 3
39570: DOUBLE
39571: EQUAL
39572: IFTRUE 39576
39574: GO 39626
39576: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39577: LD_ADDR_VAR 0 3
39581: PUSH
39582: LD_INT 13
39584: PUSH
39585: LD_INT 14
39587: PUSH
39588: LD_INT 2
39590: PUSH
39591: LD_INT 3
39593: PUSH
39594: LD_INT 4
39596: PUSH
39597: LD_INT 5
39599: PUSH
39600: LD_INT 21
39602: PUSH
39603: LD_INT 22
39605: PUSH
39606: LD_INT 23
39608: PUSH
39609: LD_INT 24
39611: PUSH
39612: EMPTY
39613: LIST
39614: LIST
39615: LIST
39616: LIST
39617: LIST
39618: LIST
39619: LIST
39620: LIST
39621: LIST
39622: LIST
39623: ST_TO_ADDR
39624: GO 39627
39626: POP
// result := ( chassis in result ) ;
39627: LD_ADDR_VAR 0 3
39631: PUSH
39632: LD_VAR 0 1
39636: PUSH
39637: LD_VAR 0 3
39641: IN
39642: ST_TO_ADDR
// end ;
39643: LD_VAR 0 3
39647: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
39648: LD_INT 0
39650: PPUSH
// if not chassis or not weapon then
39651: LD_VAR 0 1
39655: NOT
39656: PUSH
39657: LD_VAR 0 2
39661: NOT
39662: OR
39663: IFFALSE 39667
// exit ;
39665: GO 40729
// case weapon of us_machine_gun :
39667: LD_VAR 0 2
39671: PUSH
39672: LD_INT 2
39674: DOUBLE
39675: EQUAL
39676: IFTRUE 39680
39678: GO 39710
39680: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
39681: LD_ADDR_VAR 0 3
39685: PUSH
39686: LD_INT 1
39688: PUSH
39689: LD_INT 2
39691: PUSH
39692: LD_INT 3
39694: PUSH
39695: LD_INT 4
39697: PUSH
39698: LD_INT 5
39700: PUSH
39701: EMPTY
39702: LIST
39703: LIST
39704: LIST
39705: LIST
39706: LIST
39707: ST_TO_ADDR
39708: GO 40713
39710: LD_INT 3
39712: DOUBLE
39713: EQUAL
39714: IFTRUE 39718
39716: GO 39748
39718: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
39719: LD_ADDR_VAR 0 3
39723: PUSH
39724: LD_INT 1
39726: PUSH
39727: LD_INT 2
39729: PUSH
39730: LD_INT 3
39732: PUSH
39733: LD_INT 4
39735: PUSH
39736: LD_INT 5
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: LIST
39743: LIST
39744: LIST
39745: ST_TO_ADDR
39746: GO 40713
39748: LD_INT 11
39750: DOUBLE
39751: EQUAL
39752: IFTRUE 39756
39754: GO 39786
39756: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
39757: LD_ADDR_VAR 0 3
39761: PUSH
39762: LD_INT 1
39764: PUSH
39765: LD_INT 2
39767: PUSH
39768: LD_INT 3
39770: PUSH
39771: LD_INT 4
39773: PUSH
39774: LD_INT 5
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: LIST
39781: LIST
39782: LIST
39783: ST_TO_ADDR
39784: GO 40713
39786: LD_INT 4
39788: DOUBLE
39789: EQUAL
39790: IFTRUE 39794
39792: GO 39820
39794: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
39795: LD_ADDR_VAR 0 3
39799: PUSH
39800: LD_INT 2
39802: PUSH
39803: LD_INT 3
39805: PUSH
39806: LD_INT 4
39808: PUSH
39809: LD_INT 5
39811: PUSH
39812: EMPTY
39813: LIST
39814: LIST
39815: LIST
39816: LIST
39817: ST_TO_ADDR
39818: GO 40713
39820: LD_INT 5
39822: DOUBLE
39823: EQUAL
39824: IFTRUE 39828
39826: GO 39854
39828: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
39829: LD_ADDR_VAR 0 3
39833: PUSH
39834: LD_INT 2
39836: PUSH
39837: LD_INT 3
39839: PUSH
39840: LD_INT 4
39842: PUSH
39843: LD_INT 5
39845: PUSH
39846: EMPTY
39847: LIST
39848: LIST
39849: LIST
39850: LIST
39851: ST_TO_ADDR
39852: GO 40713
39854: LD_INT 9
39856: DOUBLE
39857: EQUAL
39858: IFTRUE 39862
39860: GO 39888
39862: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
39863: LD_ADDR_VAR 0 3
39867: PUSH
39868: LD_INT 2
39870: PUSH
39871: LD_INT 3
39873: PUSH
39874: LD_INT 4
39876: PUSH
39877: LD_INT 5
39879: PUSH
39880: EMPTY
39881: LIST
39882: LIST
39883: LIST
39884: LIST
39885: ST_TO_ADDR
39886: GO 40713
39888: LD_INT 7
39890: DOUBLE
39891: EQUAL
39892: IFTRUE 39896
39894: GO 39922
39896: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
39897: LD_ADDR_VAR 0 3
39901: PUSH
39902: LD_INT 2
39904: PUSH
39905: LD_INT 3
39907: PUSH
39908: LD_INT 4
39910: PUSH
39911: LD_INT 5
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: LIST
39918: LIST
39919: ST_TO_ADDR
39920: GO 40713
39922: LD_INT 12
39924: DOUBLE
39925: EQUAL
39926: IFTRUE 39930
39928: GO 39956
39930: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
39931: LD_ADDR_VAR 0 3
39935: PUSH
39936: LD_INT 2
39938: PUSH
39939: LD_INT 3
39941: PUSH
39942: LD_INT 4
39944: PUSH
39945: LD_INT 5
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: LIST
39952: LIST
39953: ST_TO_ADDR
39954: GO 40713
39956: LD_INT 13
39958: DOUBLE
39959: EQUAL
39960: IFTRUE 39964
39962: GO 39990
39964: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
39965: LD_ADDR_VAR 0 3
39969: PUSH
39970: LD_INT 2
39972: PUSH
39973: LD_INT 3
39975: PUSH
39976: LD_INT 4
39978: PUSH
39979: LD_INT 5
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: LIST
39986: LIST
39987: ST_TO_ADDR
39988: GO 40713
39990: LD_INT 14
39992: DOUBLE
39993: EQUAL
39994: IFTRUE 39998
39996: GO 40016
39998: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
39999: LD_ADDR_VAR 0 3
40003: PUSH
40004: LD_INT 4
40006: PUSH
40007: LD_INT 5
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: ST_TO_ADDR
40014: GO 40713
40016: LD_INT 6
40018: DOUBLE
40019: EQUAL
40020: IFTRUE 40024
40022: GO 40042
40024: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
40025: LD_ADDR_VAR 0 3
40029: PUSH
40030: LD_INT 4
40032: PUSH
40033: LD_INT 5
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: ST_TO_ADDR
40040: GO 40713
40042: LD_INT 10
40044: DOUBLE
40045: EQUAL
40046: IFTRUE 40050
40048: GO 40068
40050: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
40051: LD_ADDR_VAR 0 3
40055: PUSH
40056: LD_INT 4
40058: PUSH
40059: LD_INT 5
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: ST_TO_ADDR
40066: GO 40713
40068: LD_INT 22
40070: DOUBLE
40071: EQUAL
40072: IFTRUE 40076
40074: GO 40102
40076: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
40077: LD_ADDR_VAR 0 3
40081: PUSH
40082: LD_INT 11
40084: PUSH
40085: LD_INT 12
40087: PUSH
40088: LD_INT 13
40090: PUSH
40091: LD_INT 14
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: LIST
40098: LIST
40099: ST_TO_ADDR
40100: GO 40713
40102: LD_INT 23
40104: DOUBLE
40105: EQUAL
40106: IFTRUE 40110
40108: GO 40136
40110: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
40111: LD_ADDR_VAR 0 3
40115: PUSH
40116: LD_INT 11
40118: PUSH
40119: LD_INT 12
40121: PUSH
40122: LD_INT 13
40124: PUSH
40125: LD_INT 14
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: LIST
40132: LIST
40133: ST_TO_ADDR
40134: GO 40713
40136: LD_INT 24
40138: DOUBLE
40139: EQUAL
40140: IFTRUE 40144
40142: GO 40170
40144: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
40145: LD_ADDR_VAR 0 3
40149: PUSH
40150: LD_INT 11
40152: PUSH
40153: LD_INT 12
40155: PUSH
40156: LD_INT 13
40158: PUSH
40159: LD_INT 14
40161: PUSH
40162: EMPTY
40163: LIST
40164: LIST
40165: LIST
40166: LIST
40167: ST_TO_ADDR
40168: GO 40713
40170: LD_INT 30
40172: DOUBLE
40173: EQUAL
40174: IFTRUE 40178
40176: GO 40204
40178: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
40179: LD_ADDR_VAR 0 3
40183: PUSH
40184: LD_INT 11
40186: PUSH
40187: LD_INT 12
40189: PUSH
40190: LD_INT 13
40192: PUSH
40193: LD_INT 14
40195: PUSH
40196: EMPTY
40197: LIST
40198: LIST
40199: LIST
40200: LIST
40201: ST_TO_ADDR
40202: GO 40713
40204: LD_INT 25
40206: DOUBLE
40207: EQUAL
40208: IFTRUE 40212
40210: GO 40230
40212: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
40213: LD_ADDR_VAR 0 3
40217: PUSH
40218: LD_INT 13
40220: PUSH
40221: LD_INT 14
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: ST_TO_ADDR
40228: GO 40713
40230: LD_INT 27
40232: DOUBLE
40233: EQUAL
40234: IFTRUE 40238
40236: GO 40256
40238: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
40239: LD_ADDR_VAR 0 3
40243: PUSH
40244: LD_INT 13
40246: PUSH
40247: LD_INT 14
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: ST_TO_ADDR
40254: GO 40713
40256: LD_EXP 63
40260: DOUBLE
40261: EQUAL
40262: IFTRUE 40266
40264: GO 40292
40266: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
40267: LD_ADDR_VAR 0 3
40271: PUSH
40272: LD_INT 11
40274: PUSH
40275: LD_INT 12
40277: PUSH
40278: LD_INT 13
40280: PUSH
40281: LD_INT 14
40283: PUSH
40284: EMPTY
40285: LIST
40286: LIST
40287: LIST
40288: LIST
40289: ST_TO_ADDR
40290: GO 40713
40292: LD_INT 28
40294: DOUBLE
40295: EQUAL
40296: IFTRUE 40300
40298: GO 40318
40300: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
40301: LD_ADDR_VAR 0 3
40305: PUSH
40306: LD_INT 13
40308: PUSH
40309: LD_INT 14
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: ST_TO_ADDR
40316: GO 40713
40318: LD_INT 29
40320: DOUBLE
40321: EQUAL
40322: IFTRUE 40326
40324: GO 40344
40326: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
40327: LD_ADDR_VAR 0 3
40331: PUSH
40332: LD_INT 13
40334: PUSH
40335: LD_INT 14
40337: PUSH
40338: EMPTY
40339: LIST
40340: LIST
40341: ST_TO_ADDR
40342: GO 40713
40344: LD_INT 31
40346: DOUBLE
40347: EQUAL
40348: IFTRUE 40352
40350: GO 40370
40352: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
40353: LD_ADDR_VAR 0 3
40357: PUSH
40358: LD_INT 13
40360: PUSH
40361: LD_INT 14
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: ST_TO_ADDR
40368: GO 40713
40370: LD_INT 26
40372: DOUBLE
40373: EQUAL
40374: IFTRUE 40378
40376: GO 40396
40378: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
40379: LD_ADDR_VAR 0 3
40383: PUSH
40384: LD_INT 13
40386: PUSH
40387: LD_INT 14
40389: PUSH
40390: EMPTY
40391: LIST
40392: LIST
40393: ST_TO_ADDR
40394: GO 40713
40396: LD_INT 42
40398: DOUBLE
40399: EQUAL
40400: IFTRUE 40404
40402: GO 40430
40404: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
40405: LD_ADDR_VAR 0 3
40409: PUSH
40410: LD_INT 21
40412: PUSH
40413: LD_INT 22
40415: PUSH
40416: LD_INT 23
40418: PUSH
40419: LD_INT 24
40421: PUSH
40422: EMPTY
40423: LIST
40424: LIST
40425: LIST
40426: LIST
40427: ST_TO_ADDR
40428: GO 40713
40430: LD_INT 43
40432: DOUBLE
40433: EQUAL
40434: IFTRUE 40438
40436: GO 40464
40438: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
40439: LD_ADDR_VAR 0 3
40443: PUSH
40444: LD_INT 21
40446: PUSH
40447: LD_INT 22
40449: PUSH
40450: LD_INT 23
40452: PUSH
40453: LD_INT 24
40455: PUSH
40456: EMPTY
40457: LIST
40458: LIST
40459: LIST
40460: LIST
40461: ST_TO_ADDR
40462: GO 40713
40464: LD_INT 44
40466: DOUBLE
40467: EQUAL
40468: IFTRUE 40472
40470: GO 40498
40472: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
40473: LD_ADDR_VAR 0 3
40477: PUSH
40478: LD_INT 21
40480: PUSH
40481: LD_INT 22
40483: PUSH
40484: LD_INT 23
40486: PUSH
40487: LD_INT 24
40489: PUSH
40490: EMPTY
40491: LIST
40492: LIST
40493: LIST
40494: LIST
40495: ST_TO_ADDR
40496: GO 40713
40498: LD_INT 45
40500: DOUBLE
40501: EQUAL
40502: IFTRUE 40506
40504: GO 40532
40506: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
40507: LD_ADDR_VAR 0 3
40511: PUSH
40512: LD_INT 21
40514: PUSH
40515: LD_INT 22
40517: PUSH
40518: LD_INT 23
40520: PUSH
40521: LD_INT 24
40523: PUSH
40524: EMPTY
40525: LIST
40526: LIST
40527: LIST
40528: LIST
40529: ST_TO_ADDR
40530: GO 40713
40532: LD_INT 49
40534: DOUBLE
40535: EQUAL
40536: IFTRUE 40540
40538: GO 40566
40540: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
40541: LD_ADDR_VAR 0 3
40545: PUSH
40546: LD_INT 21
40548: PUSH
40549: LD_INT 22
40551: PUSH
40552: LD_INT 23
40554: PUSH
40555: LD_INT 24
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: ST_TO_ADDR
40564: GO 40713
40566: LD_INT 51
40568: DOUBLE
40569: EQUAL
40570: IFTRUE 40574
40572: GO 40600
40574: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
40575: LD_ADDR_VAR 0 3
40579: PUSH
40580: LD_INT 21
40582: PUSH
40583: LD_INT 22
40585: PUSH
40586: LD_INT 23
40588: PUSH
40589: LD_INT 24
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: ST_TO_ADDR
40598: GO 40713
40600: LD_INT 52
40602: DOUBLE
40603: EQUAL
40604: IFTRUE 40608
40606: GO 40634
40608: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
40609: LD_ADDR_VAR 0 3
40613: PUSH
40614: LD_INT 21
40616: PUSH
40617: LD_INT 22
40619: PUSH
40620: LD_INT 23
40622: PUSH
40623: LD_INT 24
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: LIST
40630: LIST
40631: ST_TO_ADDR
40632: GO 40713
40634: LD_INT 53
40636: DOUBLE
40637: EQUAL
40638: IFTRUE 40642
40640: GO 40660
40642: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
40643: LD_ADDR_VAR 0 3
40647: PUSH
40648: LD_INT 23
40650: PUSH
40651: LD_INT 24
40653: PUSH
40654: EMPTY
40655: LIST
40656: LIST
40657: ST_TO_ADDR
40658: GO 40713
40660: LD_INT 46
40662: DOUBLE
40663: EQUAL
40664: IFTRUE 40668
40666: GO 40686
40668: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
40669: LD_ADDR_VAR 0 3
40673: PUSH
40674: LD_INT 23
40676: PUSH
40677: LD_INT 24
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: ST_TO_ADDR
40684: GO 40713
40686: LD_INT 47
40688: DOUBLE
40689: EQUAL
40690: IFTRUE 40694
40692: GO 40712
40694: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40695: LD_ADDR_VAR 0 3
40699: PUSH
40700: LD_INT 23
40702: PUSH
40703: LD_INT 24
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: ST_TO_ADDR
40710: GO 40713
40712: POP
// result := ( chassis in result ) ;
40713: LD_ADDR_VAR 0 3
40717: PUSH
40718: LD_VAR 0 1
40722: PUSH
40723: LD_VAR 0 3
40727: IN
40728: ST_TO_ADDR
// end ;
40729: LD_VAR 0 3
40733: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
40734: LD_INT 0
40736: PPUSH
40737: PPUSH
40738: PPUSH
40739: PPUSH
40740: PPUSH
40741: PPUSH
40742: PPUSH
// result := array ;
40743: LD_ADDR_VAR 0 5
40747: PUSH
40748: LD_VAR 0 1
40752: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
40753: LD_VAR 0 1
40757: NOT
40758: PUSH
40759: LD_VAR 0 2
40763: NOT
40764: OR
40765: PUSH
40766: LD_VAR 0 3
40770: NOT
40771: OR
40772: PUSH
40773: LD_VAR 0 2
40777: PUSH
40778: LD_VAR 0 1
40782: GREATER
40783: OR
40784: PUSH
40785: LD_VAR 0 3
40789: PUSH
40790: LD_VAR 0 1
40794: GREATER
40795: OR
40796: IFFALSE 40800
// exit ;
40798: GO 41096
// if direction then
40800: LD_VAR 0 4
40804: IFFALSE 40868
// begin d := 1 ;
40806: LD_ADDR_VAR 0 9
40810: PUSH
40811: LD_INT 1
40813: ST_TO_ADDR
// if i_from > i_to then
40814: LD_VAR 0 2
40818: PUSH
40819: LD_VAR 0 3
40823: GREATER
40824: IFFALSE 40850
// length := ( array - i_from ) + i_to else
40826: LD_ADDR_VAR 0 11
40830: PUSH
40831: LD_VAR 0 1
40835: PUSH
40836: LD_VAR 0 2
40840: MINUS
40841: PUSH
40842: LD_VAR 0 3
40846: PLUS
40847: ST_TO_ADDR
40848: GO 40866
// length := i_to - i_from ;
40850: LD_ADDR_VAR 0 11
40854: PUSH
40855: LD_VAR 0 3
40859: PUSH
40860: LD_VAR 0 2
40864: MINUS
40865: ST_TO_ADDR
// end else
40866: GO 40929
// begin d := - 1 ;
40868: LD_ADDR_VAR 0 9
40872: PUSH
40873: LD_INT 1
40875: NEG
40876: ST_TO_ADDR
// if i_from > i_to then
40877: LD_VAR 0 2
40881: PUSH
40882: LD_VAR 0 3
40886: GREATER
40887: IFFALSE 40907
// length := i_from - i_to else
40889: LD_ADDR_VAR 0 11
40893: PUSH
40894: LD_VAR 0 2
40898: PUSH
40899: LD_VAR 0 3
40903: MINUS
40904: ST_TO_ADDR
40905: GO 40929
// length := ( array - i_to ) + i_from ;
40907: LD_ADDR_VAR 0 11
40911: PUSH
40912: LD_VAR 0 1
40916: PUSH
40917: LD_VAR 0 3
40921: MINUS
40922: PUSH
40923: LD_VAR 0 2
40927: PLUS
40928: ST_TO_ADDR
// end ; if not length then
40929: LD_VAR 0 11
40933: NOT
40934: IFFALSE 40938
// exit ;
40936: GO 41096
// tmp := array ;
40938: LD_ADDR_VAR 0 10
40942: PUSH
40943: LD_VAR 0 1
40947: ST_TO_ADDR
// for i = 1 to length do
40948: LD_ADDR_VAR 0 6
40952: PUSH
40953: DOUBLE
40954: LD_INT 1
40956: DEC
40957: ST_TO_ADDR
40958: LD_VAR 0 11
40962: PUSH
40963: FOR_TO
40964: IFFALSE 41084
// begin for j = 1 to array do
40966: LD_ADDR_VAR 0 7
40970: PUSH
40971: DOUBLE
40972: LD_INT 1
40974: DEC
40975: ST_TO_ADDR
40976: LD_VAR 0 1
40980: PUSH
40981: FOR_TO
40982: IFFALSE 41070
// begin k := j + d ;
40984: LD_ADDR_VAR 0 8
40988: PUSH
40989: LD_VAR 0 7
40993: PUSH
40994: LD_VAR 0 9
40998: PLUS
40999: ST_TO_ADDR
// if k > array then
41000: LD_VAR 0 8
41004: PUSH
41005: LD_VAR 0 1
41009: GREATER
41010: IFFALSE 41020
// k := 1 ;
41012: LD_ADDR_VAR 0 8
41016: PUSH
41017: LD_INT 1
41019: ST_TO_ADDR
// if not k then
41020: LD_VAR 0 8
41024: NOT
41025: IFFALSE 41037
// k := array ;
41027: LD_ADDR_VAR 0 8
41031: PUSH
41032: LD_VAR 0 1
41036: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
41037: LD_ADDR_VAR 0 10
41041: PUSH
41042: LD_VAR 0 10
41046: PPUSH
41047: LD_VAR 0 8
41051: PPUSH
41052: LD_VAR 0 1
41056: PUSH
41057: LD_VAR 0 7
41061: ARRAY
41062: PPUSH
41063: CALL_OW 1
41067: ST_TO_ADDR
// end ;
41068: GO 40981
41070: POP
41071: POP
// array := tmp ;
41072: LD_ADDR_VAR 0 1
41076: PUSH
41077: LD_VAR 0 10
41081: ST_TO_ADDR
// end ;
41082: GO 40963
41084: POP
41085: POP
// result := array ;
41086: LD_ADDR_VAR 0 5
41090: PUSH
41091: LD_VAR 0 1
41095: ST_TO_ADDR
// end ;
41096: LD_VAR 0 5
41100: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
41101: LD_INT 0
41103: PPUSH
41104: PPUSH
// result := 0 ;
41105: LD_ADDR_VAR 0 3
41109: PUSH
41110: LD_INT 0
41112: ST_TO_ADDR
// if not array or not value in array then
41113: LD_VAR 0 1
41117: NOT
41118: PUSH
41119: LD_VAR 0 2
41123: PUSH
41124: LD_VAR 0 1
41128: IN
41129: NOT
41130: OR
41131: IFFALSE 41135
// exit ;
41133: GO 41189
// for i = 1 to array do
41135: LD_ADDR_VAR 0 4
41139: PUSH
41140: DOUBLE
41141: LD_INT 1
41143: DEC
41144: ST_TO_ADDR
41145: LD_VAR 0 1
41149: PUSH
41150: FOR_TO
41151: IFFALSE 41187
// if value = array [ i ] then
41153: LD_VAR 0 2
41157: PUSH
41158: LD_VAR 0 1
41162: PUSH
41163: LD_VAR 0 4
41167: ARRAY
41168: EQUAL
41169: IFFALSE 41185
// begin result := i ;
41171: LD_ADDR_VAR 0 3
41175: PUSH
41176: LD_VAR 0 4
41180: ST_TO_ADDR
// exit ;
41181: POP
41182: POP
41183: GO 41189
// end ;
41185: GO 41150
41187: POP
41188: POP
// end ;
41189: LD_VAR 0 3
41193: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
41194: LD_INT 0
41196: PPUSH
// vc_chassis := chassis ;
41197: LD_ADDR_OWVAR 37
41201: PUSH
41202: LD_VAR 0 1
41206: ST_TO_ADDR
// vc_engine := engine ;
41207: LD_ADDR_OWVAR 39
41211: PUSH
41212: LD_VAR 0 2
41216: ST_TO_ADDR
// vc_control := control ;
41217: LD_ADDR_OWVAR 38
41221: PUSH
41222: LD_VAR 0 3
41226: ST_TO_ADDR
// vc_weapon := weapon ;
41227: LD_ADDR_OWVAR 40
41231: PUSH
41232: LD_VAR 0 4
41236: ST_TO_ADDR
// vc_fuel_battery := fuel ;
41237: LD_ADDR_OWVAR 41
41241: PUSH
41242: LD_VAR 0 5
41246: ST_TO_ADDR
// end ;
41247: LD_VAR 0 6
41251: RET
// export function WantPlant ( unit ) ; var task ; begin
41252: LD_INT 0
41254: PPUSH
41255: PPUSH
// result := false ;
41256: LD_ADDR_VAR 0 2
41260: PUSH
41261: LD_INT 0
41263: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
41264: LD_ADDR_VAR 0 3
41268: PUSH
41269: LD_VAR 0 1
41273: PPUSH
41274: CALL_OW 437
41278: ST_TO_ADDR
// if task then
41279: LD_VAR 0 3
41283: IFFALSE 41311
// if task [ 1 ] [ 1 ] = p then
41285: LD_VAR 0 3
41289: PUSH
41290: LD_INT 1
41292: ARRAY
41293: PUSH
41294: LD_INT 1
41296: ARRAY
41297: PUSH
41298: LD_STRING p
41300: EQUAL
41301: IFFALSE 41311
// result := true ;
41303: LD_ADDR_VAR 0 2
41307: PUSH
41308: LD_INT 1
41310: ST_TO_ADDR
// end ;
41311: LD_VAR 0 2
41315: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
41316: LD_INT 0
41318: PPUSH
41319: PPUSH
41320: PPUSH
41321: PPUSH
// if pos < 1 then
41322: LD_VAR 0 2
41326: PUSH
41327: LD_INT 1
41329: LESS
41330: IFFALSE 41334
// exit ;
41332: GO 41637
// if pos = 1 then
41334: LD_VAR 0 2
41338: PUSH
41339: LD_INT 1
41341: EQUAL
41342: IFFALSE 41375
// result := Replace ( arr , pos [ 1 ] , value ) else
41344: LD_ADDR_VAR 0 4
41348: PUSH
41349: LD_VAR 0 1
41353: PPUSH
41354: LD_VAR 0 2
41358: PUSH
41359: LD_INT 1
41361: ARRAY
41362: PPUSH
41363: LD_VAR 0 3
41367: PPUSH
41368: CALL_OW 1
41372: ST_TO_ADDR
41373: GO 41637
// begin tmp := arr ;
41375: LD_ADDR_VAR 0 6
41379: PUSH
41380: LD_VAR 0 1
41384: ST_TO_ADDR
// s_arr := [ tmp ] ;
41385: LD_ADDR_VAR 0 7
41389: PUSH
41390: LD_VAR 0 6
41394: PUSH
41395: EMPTY
41396: LIST
41397: ST_TO_ADDR
// for i = 1 to pos - 1 do
41398: LD_ADDR_VAR 0 5
41402: PUSH
41403: DOUBLE
41404: LD_INT 1
41406: DEC
41407: ST_TO_ADDR
41408: LD_VAR 0 2
41412: PUSH
41413: LD_INT 1
41415: MINUS
41416: PUSH
41417: FOR_TO
41418: IFFALSE 41463
// begin tmp := tmp [ pos [ i ] ] ;
41420: LD_ADDR_VAR 0 6
41424: PUSH
41425: LD_VAR 0 6
41429: PUSH
41430: LD_VAR 0 2
41434: PUSH
41435: LD_VAR 0 5
41439: ARRAY
41440: ARRAY
41441: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
41442: LD_ADDR_VAR 0 7
41446: PUSH
41447: LD_VAR 0 7
41451: PUSH
41452: LD_VAR 0 6
41456: PUSH
41457: EMPTY
41458: LIST
41459: ADD
41460: ST_TO_ADDR
// end ;
41461: GO 41417
41463: POP
41464: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
41465: LD_ADDR_VAR 0 6
41469: PUSH
41470: LD_VAR 0 6
41474: PPUSH
41475: LD_VAR 0 2
41479: PUSH
41480: LD_VAR 0 2
41484: ARRAY
41485: PPUSH
41486: LD_VAR 0 3
41490: PPUSH
41491: CALL_OW 1
41495: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
41496: LD_ADDR_VAR 0 7
41500: PUSH
41501: LD_VAR 0 7
41505: PPUSH
41506: LD_VAR 0 7
41510: PPUSH
41511: LD_VAR 0 6
41515: PPUSH
41516: CALL_OW 1
41520: ST_TO_ADDR
// for i = s_arr downto 2 do
41521: LD_ADDR_VAR 0 5
41525: PUSH
41526: DOUBLE
41527: LD_VAR 0 7
41531: INC
41532: ST_TO_ADDR
41533: LD_INT 2
41535: PUSH
41536: FOR_DOWNTO
41537: IFFALSE 41621
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
41539: LD_ADDR_VAR 0 6
41543: PUSH
41544: LD_VAR 0 7
41548: PUSH
41549: LD_VAR 0 5
41553: PUSH
41554: LD_INT 1
41556: MINUS
41557: ARRAY
41558: PPUSH
41559: LD_VAR 0 2
41563: PUSH
41564: LD_VAR 0 5
41568: PUSH
41569: LD_INT 1
41571: MINUS
41572: ARRAY
41573: PPUSH
41574: LD_VAR 0 7
41578: PUSH
41579: LD_VAR 0 5
41583: ARRAY
41584: PPUSH
41585: CALL_OW 1
41589: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
41590: LD_ADDR_VAR 0 7
41594: PUSH
41595: LD_VAR 0 7
41599: PPUSH
41600: LD_VAR 0 5
41604: PUSH
41605: LD_INT 1
41607: MINUS
41608: PPUSH
41609: LD_VAR 0 6
41613: PPUSH
41614: CALL_OW 1
41618: ST_TO_ADDR
// end ;
41619: GO 41536
41621: POP
41622: POP
// result := s_arr [ 1 ] ;
41623: LD_ADDR_VAR 0 4
41627: PUSH
41628: LD_VAR 0 7
41632: PUSH
41633: LD_INT 1
41635: ARRAY
41636: ST_TO_ADDR
// end ; end ;
41637: LD_VAR 0 4
41641: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
41642: LD_INT 0
41644: PPUSH
41645: PPUSH
// if not list then
41646: LD_VAR 0 1
41650: NOT
41651: IFFALSE 41655
// exit ;
41653: GO 41746
// i := list [ pos1 ] ;
41655: LD_ADDR_VAR 0 5
41659: PUSH
41660: LD_VAR 0 1
41664: PUSH
41665: LD_VAR 0 2
41669: ARRAY
41670: ST_TO_ADDR
// if not i then
41671: LD_VAR 0 5
41675: NOT
41676: IFFALSE 41680
// exit ;
41678: GO 41746
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
41680: LD_ADDR_VAR 0 1
41684: PUSH
41685: LD_VAR 0 1
41689: PPUSH
41690: LD_VAR 0 2
41694: PPUSH
41695: LD_VAR 0 1
41699: PUSH
41700: LD_VAR 0 3
41704: ARRAY
41705: PPUSH
41706: CALL_OW 1
41710: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
41711: LD_ADDR_VAR 0 1
41715: PUSH
41716: LD_VAR 0 1
41720: PPUSH
41721: LD_VAR 0 3
41725: PPUSH
41726: LD_VAR 0 5
41730: PPUSH
41731: CALL_OW 1
41735: ST_TO_ADDR
// result := list ;
41736: LD_ADDR_VAR 0 4
41740: PUSH
41741: LD_VAR 0 1
41745: ST_TO_ADDR
// end ;
41746: LD_VAR 0 4
41750: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
41751: LD_INT 0
41753: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
41754: LD_ADDR_VAR 0 5
41758: PUSH
41759: LD_VAR 0 1
41763: PPUSH
41764: CALL_OW 250
41768: PPUSH
41769: LD_VAR 0 1
41773: PPUSH
41774: CALL_OW 251
41778: PPUSH
41779: LD_VAR 0 2
41783: PPUSH
41784: LD_VAR 0 3
41788: PPUSH
41789: LD_VAR 0 4
41793: PPUSH
41794: CALL 41804 0 5
41798: ST_TO_ADDR
// end ;
41799: LD_VAR 0 5
41803: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
41804: LD_INT 0
41806: PPUSH
41807: PPUSH
41808: PPUSH
41809: PPUSH
// if not list then
41810: LD_VAR 0 3
41814: NOT
41815: IFFALSE 41819
// exit ;
41817: GO 42207
// result := [ ] ;
41819: LD_ADDR_VAR 0 6
41823: PUSH
41824: EMPTY
41825: ST_TO_ADDR
// for i in list do
41826: LD_ADDR_VAR 0 7
41830: PUSH
41831: LD_VAR 0 3
41835: PUSH
41836: FOR_IN
41837: IFFALSE 42039
// begin tmp := GetDistUnitXY ( i , x , y ) ;
41839: LD_ADDR_VAR 0 9
41843: PUSH
41844: LD_VAR 0 7
41848: PPUSH
41849: LD_VAR 0 1
41853: PPUSH
41854: LD_VAR 0 2
41858: PPUSH
41859: CALL_OW 297
41863: ST_TO_ADDR
// if not result then
41864: LD_VAR 0 6
41868: NOT
41869: IFFALSE 41895
// result := [ [ i , tmp ] ] else
41871: LD_ADDR_VAR 0 6
41875: PUSH
41876: LD_VAR 0 7
41880: PUSH
41881: LD_VAR 0 9
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: PUSH
41890: EMPTY
41891: LIST
41892: ST_TO_ADDR
41893: GO 42037
// begin if result [ result ] [ 2 ] < tmp then
41895: LD_VAR 0 6
41899: PUSH
41900: LD_VAR 0 6
41904: ARRAY
41905: PUSH
41906: LD_INT 2
41908: ARRAY
41909: PUSH
41910: LD_VAR 0 9
41914: LESS
41915: IFFALSE 41957
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
41917: LD_ADDR_VAR 0 6
41921: PUSH
41922: LD_VAR 0 6
41926: PPUSH
41927: LD_VAR 0 6
41931: PUSH
41932: LD_INT 1
41934: PLUS
41935: PPUSH
41936: LD_VAR 0 7
41940: PUSH
41941: LD_VAR 0 9
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: PPUSH
41950: CALL_OW 2
41954: ST_TO_ADDR
41955: GO 42037
// for j = 1 to result do
41957: LD_ADDR_VAR 0 8
41961: PUSH
41962: DOUBLE
41963: LD_INT 1
41965: DEC
41966: ST_TO_ADDR
41967: LD_VAR 0 6
41971: PUSH
41972: FOR_TO
41973: IFFALSE 42035
// begin if tmp < result [ j ] [ 2 ] then
41975: LD_VAR 0 9
41979: PUSH
41980: LD_VAR 0 6
41984: PUSH
41985: LD_VAR 0 8
41989: ARRAY
41990: PUSH
41991: LD_INT 2
41993: ARRAY
41994: LESS
41995: IFFALSE 42033
// begin result := Insert ( result , j , [ i , tmp ] ) ;
41997: LD_ADDR_VAR 0 6
42001: PUSH
42002: LD_VAR 0 6
42006: PPUSH
42007: LD_VAR 0 8
42011: PPUSH
42012: LD_VAR 0 7
42016: PUSH
42017: LD_VAR 0 9
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: PPUSH
42026: CALL_OW 2
42030: ST_TO_ADDR
// break ;
42031: GO 42035
// end ; end ;
42033: GO 41972
42035: POP
42036: POP
// end ; end ;
42037: GO 41836
42039: POP
42040: POP
// if result and not asc then
42041: LD_VAR 0 6
42045: PUSH
42046: LD_VAR 0 4
42050: NOT
42051: AND
42052: IFFALSE 42127
// begin tmp := result ;
42054: LD_ADDR_VAR 0 9
42058: PUSH
42059: LD_VAR 0 6
42063: ST_TO_ADDR
// for i = tmp downto 1 do
42064: LD_ADDR_VAR 0 7
42068: PUSH
42069: DOUBLE
42070: LD_VAR 0 9
42074: INC
42075: ST_TO_ADDR
42076: LD_INT 1
42078: PUSH
42079: FOR_DOWNTO
42080: IFFALSE 42125
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
42082: LD_ADDR_VAR 0 6
42086: PUSH
42087: LD_VAR 0 6
42091: PPUSH
42092: LD_VAR 0 9
42096: PUSH
42097: LD_VAR 0 7
42101: MINUS
42102: PUSH
42103: LD_INT 1
42105: PLUS
42106: PPUSH
42107: LD_VAR 0 9
42111: PUSH
42112: LD_VAR 0 7
42116: ARRAY
42117: PPUSH
42118: CALL_OW 1
42122: ST_TO_ADDR
42123: GO 42079
42125: POP
42126: POP
// end ; tmp := [ ] ;
42127: LD_ADDR_VAR 0 9
42131: PUSH
42132: EMPTY
42133: ST_TO_ADDR
// if mode then
42134: LD_VAR 0 5
42138: IFFALSE 42207
// begin for i = 1 to result do
42140: LD_ADDR_VAR 0 7
42144: PUSH
42145: DOUBLE
42146: LD_INT 1
42148: DEC
42149: ST_TO_ADDR
42150: LD_VAR 0 6
42154: PUSH
42155: FOR_TO
42156: IFFALSE 42195
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
42158: LD_ADDR_VAR 0 9
42162: PUSH
42163: LD_VAR 0 9
42167: PPUSH
42168: LD_VAR 0 7
42172: PPUSH
42173: LD_VAR 0 6
42177: PUSH
42178: LD_VAR 0 7
42182: ARRAY
42183: PUSH
42184: LD_INT 1
42186: ARRAY
42187: PPUSH
42188: CALL_OW 1
42192: ST_TO_ADDR
42193: GO 42155
42195: POP
42196: POP
// result := tmp ;
42197: LD_ADDR_VAR 0 6
42201: PUSH
42202: LD_VAR 0 9
42206: ST_TO_ADDR
// end ; end ;
42207: LD_VAR 0 6
42211: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
42212: LD_INT 0
42214: PPUSH
42215: PPUSH
42216: PPUSH
42217: PPUSH
42218: PPUSH
42219: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
42220: LD_ADDR_VAR 0 5
42224: PUSH
42225: LD_INT 0
42227: PUSH
42228: LD_INT 0
42230: PUSH
42231: LD_INT 0
42233: PUSH
42234: EMPTY
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: LIST
42240: LIST
42241: ST_TO_ADDR
// if not x or not y then
42242: LD_VAR 0 2
42246: NOT
42247: PUSH
42248: LD_VAR 0 3
42252: NOT
42253: OR
42254: IFFALSE 42258
// exit ;
42256: GO 43910
// if not range then
42258: LD_VAR 0 4
42262: NOT
42263: IFFALSE 42273
// range := 10 ;
42265: LD_ADDR_VAR 0 4
42269: PUSH
42270: LD_INT 10
42272: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42273: LD_ADDR_VAR 0 8
42277: PUSH
42278: LD_INT 81
42280: PUSH
42281: LD_VAR 0 1
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: PUSH
42290: LD_INT 92
42292: PUSH
42293: LD_VAR 0 2
42297: PUSH
42298: LD_VAR 0 3
42302: PUSH
42303: LD_VAR 0 4
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: LIST
42312: LIST
42313: PUSH
42314: LD_INT 3
42316: PUSH
42317: LD_INT 21
42319: PUSH
42320: LD_INT 3
42322: PUSH
42323: EMPTY
42324: LIST
42325: LIST
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: LIST
42335: PPUSH
42336: CALL_OW 69
42340: ST_TO_ADDR
// if not tmp then
42341: LD_VAR 0 8
42345: NOT
42346: IFFALSE 42350
// exit ;
42348: GO 43910
// for i in tmp do
42350: LD_ADDR_VAR 0 6
42354: PUSH
42355: LD_VAR 0 8
42359: PUSH
42360: FOR_IN
42361: IFFALSE 43885
// begin points := [ 0 , 0 , 0 ] ;
42363: LD_ADDR_VAR 0 9
42367: PUSH
42368: LD_INT 0
42370: PUSH
42371: LD_INT 0
42373: PUSH
42374: LD_INT 0
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: LIST
42381: ST_TO_ADDR
// bpoints := 1 ;
42382: LD_ADDR_VAR 0 10
42386: PUSH
42387: LD_INT 1
42389: ST_TO_ADDR
// case GetType ( i ) of unit_human :
42390: LD_VAR 0 6
42394: PPUSH
42395: CALL_OW 247
42399: PUSH
42400: LD_INT 1
42402: DOUBLE
42403: EQUAL
42404: IFTRUE 42408
42406: GO 42986
42408: POP
// begin if GetClass ( i ) = 1 then
42409: LD_VAR 0 6
42413: PPUSH
42414: CALL_OW 257
42418: PUSH
42419: LD_INT 1
42421: EQUAL
42422: IFFALSE 42443
// points := [ 10 , 5 , 3 ] ;
42424: LD_ADDR_VAR 0 9
42428: PUSH
42429: LD_INT 10
42431: PUSH
42432: LD_INT 5
42434: PUSH
42435: LD_INT 3
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: LIST
42442: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
42443: LD_VAR 0 6
42447: PPUSH
42448: CALL_OW 257
42452: PUSH
42453: LD_INT 2
42455: PUSH
42456: LD_INT 3
42458: PUSH
42459: LD_INT 4
42461: PUSH
42462: EMPTY
42463: LIST
42464: LIST
42465: LIST
42466: IN
42467: IFFALSE 42488
// points := [ 3 , 2 , 1 ] ;
42469: LD_ADDR_VAR 0 9
42473: PUSH
42474: LD_INT 3
42476: PUSH
42477: LD_INT 2
42479: PUSH
42480: LD_INT 1
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: LIST
42487: ST_TO_ADDR
// if GetClass ( i ) = 5 then
42488: LD_VAR 0 6
42492: PPUSH
42493: CALL_OW 257
42497: PUSH
42498: LD_INT 5
42500: EQUAL
42501: IFFALSE 42522
// points := [ 130 , 5 , 2 ] ;
42503: LD_ADDR_VAR 0 9
42507: PUSH
42508: LD_INT 130
42510: PUSH
42511: LD_INT 5
42513: PUSH
42514: LD_INT 2
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: LIST
42521: ST_TO_ADDR
// if GetClass ( i ) = 8 then
42522: LD_VAR 0 6
42526: PPUSH
42527: CALL_OW 257
42531: PUSH
42532: LD_INT 8
42534: EQUAL
42535: IFFALSE 42556
// points := [ 35 , 35 , 30 ] ;
42537: LD_ADDR_VAR 0 9
42541: PUSH
42542: LD_INT 35
42544: PUSH
42545: LD_INT 35
42547: PUSH
42548: LD_INT 30
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: LIST
42555: ST_TO_ADDR
// if GetClass ( i ) = 9 then
42556: LD_VAR 0 6
42560: PPUSH
42561: CALL_OW 257
42565: PUSH
42566: LD_INT 9
42568: EQUAL
42569: IFFALSE 42590
// points := [ 20 , 55 , 40 ] ;
42571: LD_ADDR_VAR 0 9
42575: PUSH
42576: LD_INT 20
42578: PUSH
42579: LD_INT 55
42581: PUSH
42582: LD_INT 40
42584: PUSH
42585: EMPTY
42586: LIST
42587: LIST
42588: LIST
42589: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
42590: LD_VAR 0 6
42594: PPUSH
42595: CALL_OW 257
42599: PUSH
42600: LD_INT 12
42602: PUSH
42603: LD_INT 16
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: IN
42610: IFFALSE 42631
// points := [ 5 , 3 , 2 ] ;
42612: LD_ADDR_VAR 0 9
42616: PUSH
42617: LD_INT 5
42619: PUSH
42620: LD_INT 3
42622: PUSH
42623: LD_INT 2
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: LIST
42630: ST_TO_ADDR
// if GetClass ( i ) = 17 then
42631: LD_VAR 0 6
42635: PPUSH
42636: CALL_OW 257
42640: PUSH
42641: LD_INT 17
42643: EQUAL
42644: IFFALSE 42665
// points := [ 100 , 50 , 75 ] ;
42646: LD_ADDR_VAR 0 9
42650: PUSH
42651: LD_INT 100
42653: PUSH
42654: LD_INT 50
42656: PUSH
42657: LD_INT 75
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: LIST
42664: ST_TO_ADDR
// if GetClass ( i ) = 15 then
42665: LD_VAR 0 6
42669: PPUSH
42670: CALL_OW 257
42674: PUSH
42675: LD_INT 15
42677: EQUAL
42678: IFFALSE 42699
// points := [ 10 , 5 , 3 ] ;
42680: LD_ADDR_VAR 0 9
42684: PUSH
42685: LD_INT 10
42687: PUSH
42688: LD_INT 5
42690: PUSH
42691: LD_INT 3
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: LIST
42698: ST_TO_ADDR
// if GetClass ( i ) = 14 then
42699: LD_VAR 0 6
42703: PPUSH
42704: CALL_OW 257
42708: PUSH
42709: LD_INT 14
42711: EQUAL
42712: IFFALSE 42733
// points := [ 10 , 0 , 0 ] ;
42714: LD_ADDR_VAR 0 9
42718: PUSH
42719: LD_INT 10
42721: PUSH
42722: LD_INT 0
42724: PUSH
42725: LD_INT 0
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: LIST
42732: ST_TO_ADDR
// if GetClass ( i ) = 11 then
42733: LD_VAR 0 6
42737: PPUSH
42738: CALL_OW 257
42742: PUSH
42743: LD_INT 11
42745: EQUAL
42746: IFFALSE 42767
// points := [ 30 , 10 , 5 ] ;
42748: LD_ADDR_VAR 0 9
42752: PUSH
42753: LD_INT 30
42755: PUSH
42756: LD_INT 10
42758: PUSH
42759: LD_INT 5
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: LIST
42766: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
42767: LD_VAR 0 1
42771: PPUSH
42772: LD_INT 5
42774: PPUSH
42775: CALL_OW 321
42779: PUSH
42780: LD_INT 2
42782: EQUAL
42783: IFFALSE 42800
// bpoints := bpoints * 1.8 ;
42785: LD_ADDR_VAR 0 10
42789: PUSH
42790: LD_VAR 0 10
42794: PUSH
42795: LD_REAL  1.80000000000000E+0000
42798: MUL
42799: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
42800: LD_VAR 0 6
42804: PPUSH
42805: CALL_OW 257
42809: PUSH
42810: LD_INT 1
42812: PUSH
42813: LD_INT 2
42815: PUSH
42816: LD_INT 3
42818: PUSH
42819: LD_INT 4
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: LIST
42826: LIST
42827: IN
42828: PUSH
42829: LD_VAR 0 1
42833: PPUSH
42834: LD_INT 51
42836: PPUSH
42837: CALL_OW 321
42841: PUSH
42842: LD_INT 2
42844: EQUAL
42845: AND
42846: IFFALSE 42863
// bpoints := bpoints * 1.2 ;
42848: LD_ADDR_VAR 0 10
42852: PUSH
42853: LD_VAR 0 10
42857: PUSH
42858: LD_REAL  1.20000000000000E+0000
42861: MUL
42862: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
42863: LD_VAR 0 6
42867: PPUSH
42868: CALL_OW 257
42872: PUSH
42873: LD_INT 5
42875: PUSH
42876: LD_INT 7
42878: PUSH
42879: LD_INT 9
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: LIST
42886: IN
42887: PUSH
42888: LD_VAR 0 1
42892: PPUSH
42893: LD_INT 52
42895: PPUSH
42896: CALL_OW 321
42900: PUSH
42901: LD_INT 2
42903: EQUAL
42904: AND
42905: IFFALSE 42922
// bpoints := bpoints * 1.5 ;
42907: LD_ADDR_VAR 0 10
42911: PUSH
42912: LD_VAR 0 10
42916: PUSH
42917: LD_REAL  1.50000000000000E+0000
42920: MUL
42921: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
42922: LD_VAR 0 1
42926: PPUSH
42927: LD_INT 66
42929: PPUSH
42930: CALL_OW 321
42934: PUSH
42935: LD_INT 2
42937: EQUAL
42938: IFFALSE 42955
// bpoints := bpoints * 1.1 ;
42940: LD_ADDR_VAR 0 10
42944: PUSH
42945: LD_VAR 0 10
42949: PUSH
42950: LD_REAL  1.10000000000000E+0000
42953: MUL
42954: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
42955: LD_ADDR_VAR 0 10
42959: PUSH
42960: LD_VAR 0 10
42964: PUSH
42965: LD_VAR 0 6
42969: PPUSH
42970: LD_INT 1
42972: PPUSH
42973: CALL_OW 259
42977: PUSH
42978: LD_REAL  1.15000000000000E+0000
42981: MUL
42982: MUL
42983: ST_TO_ADDR
// end ; unit_vehicle :
42984: GO 43814
42986: LD_INT 2
42988: DOUBLE
42989: EQUAL
42990: IFTRUE 42994
42992: GO 43802
42994: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
42995: LD_VAR 0 6
42999: PPUSH
43000: CALL_OW 264
43004: PUSH
43005: LD_INT 2
43007: PUSH
43008: LD_INT 42
43010: PUSH
43011: LD_INT 24
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: LIST
43018: IN
43019: IFFALSE 43040
// points := [ 25 , 5 , 3 ] ;
43021: LD_ADDR_VAR 0 9
43025: PUSH
43026: LD_INT 25
43028: PUSH
43029: LD_INT 5
43031: PUSH
43032: LD_INT 3
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: LIST
43039: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
43040: LD_VAR 0 6
43044: PPUSH
43045: CALL_OW 264
43049: PUSH
43050: LD_INT 4
43052: PUSH
43053: LD_INT 43
43055: PUSH
43056: LD_INT 25
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: LIST
43063: IN
43064: IFFALSE 43085
// points := [ 40 , 15 , 5 ] ;
43066: LD_ADDR_VAR 0 9
43070: PUSH
43071: LD_INT 40
43073: PUSH
43074: LD_INT 15
43076: PUSH
43077: LD_INT 5
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: LIST
43084: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
43085: LD_VAR 0 6
43089: PPUSH
43090: CALL_OW 264
43094: PUSH
43095: LD_INT 3
43097: PUSH
43098: LD_INT 23
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: IN
43105: IFFALSE 43126
// points := [ 7 , 25 , 8 ] ;
43107: LD_ADDR_VAR 0 9
43111: PUSH
43112: LD_INT 7
43114: PUSH
43115: LD_INT 25
43117: PUSH
43118: LD_INT 8
43120: PUSH
43121: EMPTY
43122: LIST
43123: LIST
43124: LIST
43125: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
43126: LD_VAR 0 6
43130: PPUSH
43131: CALL_OW 264
43135: PUSH
43136: LD_INT 5
43138: PUSH
43139: LD_INT 27
43141: PUSH
43142: LD_INT 44
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: LIST
43149: IN
43150: IFFALSE 43171
// points := [ 14 , 50 , 16 ] ;
43152: LD_ADDR_VAR 0 9
43156: PUSH
43157: LD_INT 14
43159: PUSH
43160: LD_INT 50
43162: PUSH
43163: LD_INT 16
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: LIST
43170: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
43171: LD_VAR 0 6
43175: PPUSH
43176: CALL_OW 264
43180: PUSH
43181: LD_INT 6
43183: PUSH
43184: LD_INT 46
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: IN
43191: IFFALSE 43212
// points := [ 32 , 120 , 70 ] ;
43193: LD_ADDR_VAR 0 9
43197: PUSH
43198: LD_INT 32
43200: PUSH
43201: LD_INT 120
43203: PUSH
43204: LD_INT 70
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: LIST
43211: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
43212: LD_VAR 0 6
43216: PPUSH
43217: CALL_OW 264
43221: PUSH
43222: LD_INT 7
43224: PUSH
43225: LD_INT 28
43227: PUSH
43228: LD_INT 45
43230: PUSH
43231: LD_EXP 63
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: LIST
43240: LIST
43241: IN
43242: IFFALSE 43263
// points := [ 35 , 20 , 45 ] ;
43244: LD_ADDR_VAR 0 9
43248: PUSH
43249: LD_INT 35
43251: PUSH
43252: LD_INT 20
43254: PUSH
43255: LD_INT 45
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: LIST
43262: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
43263: LD_VAR 0 6
43267: PPUSH
43268: CALL_OW 264
43272: PUSH
43273: LD_INT 47
43275: PUSH
43276: EMPTY
43277: LIST
43278: IN
43279: IFFALSE 43300
// points := [ 67 , 45 , 75 ] ;
43281: LD_ADDR_VAR 0 9
43285: PUSH
43286: LD_INT 67
43288: PUSH
43289: LD_INT 45
43291: PUSH
43292: LD_INT 75
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: LIST
43299: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
43300: LD_VAR 0 6
43304: PPUSH
43305: CALL_OW 264
43309: PUSH
43310: LD_INT 26
43312: PUSH
43313: EMPTY
43314: LIST
43315: IN
43316: IFFALSE 43337
// points := [ 120 , 30 , 80 ] ;
43318: LD_ADDR_VAR 0 9
43322: PUSH
43323: LD_INT 120
43325: PUSH
43326: LD_INT 30
43328: PUSH
43329: LD_INT 80
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: LIST
43336: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
43337: LD_VAR 0 6
43341: PPUSH
43342: CALL_OW 264
43346: PUSH
43347: LD_INT 22
43349: PUSH
43350: EMPTY
43351: LIST
43352: IN
43353: IFFALSE 43374
// points := [ 40 , 1 , 1 ] ;
43355: LD_ADDR_VAR 0 9
43359: PUSH
43360: LD_INT 40
43362: PUSH
43363: LD_INT 1
43365: PUSH
43366: LD_INT 1
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: LIST
43373: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
43374: LD_VAR 0 6
43378: PPUSH
43379: CALL_OW 264
43383: PUSH
43384: LD_INT 29
43386: PUSH
43387: EMPTY
43388: LIST
43389: IN
43390: IFFALSE 43411
// points := [ 70 , 200 , 400 ] ;
43392: LD_ADDR_VAR 0 9
43396: PUSH
43397: LD_INT 70
43399: PUSH
43400: LD_INT 200
43402: PUSH
43403: LD_INT 400
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: LIST
43410: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
43411: LD_VAR 0 6
43415: PPUSH
43416: CALL_OW 264
43420: PUSH
43421: LD_INT 14
43423: PUSH
43424: LD_INT 53
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: IN
43431: IFFALSE 43452
// points := [ 40 , 10 , 20 ] ;
43433: LD_ADDR_VAR 0 9
43437: PUSH
43438: LD_INT 40
43440: PUSH
43441: LD_INT 10
43443: PUSH
43444: LD_INT 20
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: LIST
43451: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
43452: LD_VAR 0 6
43456: PPUSH
43457: CALL_OW 264
43461: PUSH
43462: LD_INT 9
43464: PUSH
43465: EMPTY
43466: LIST
43467: IN
43468: IFFALSE 43489
// points := [ 5 , 70 , 20 ] ;
43470: LD_ADDR_VAR 0 9
43474: PUSH
43475: LD_INT 5
43477: PUSH
43478: LD_INT 70
43480: PUSH
43481: LD_INT 20
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: LIST
43488: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
43489: LD_VAR 0 6
43493: PPUSH
43494: CALL_OW 264
43498: PUSH
43499: LD_INT 10
43501: PUSH
43502: EMPTY
43503: LIST
43504: IN
43505: IFFALSE 43526
// points := [ 35 , 110 , 70 ] ;
43507: LD_ADDR_VAR 0 9
43511: PUSH
43512: LD_INT 35
43514: PUSH
43515: LD_INT 110
43517: PUSH
43518: LD_INT 70
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: LIST
43525: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
43526: LD_VAR 0 6
43530: PPUSH
43531: CALL_OW 265
43535: PUSH
43536: LD_INT 25
43538: EQUAL
43539: IFFALSE 43560
// points := [ 80 , 65 , 100 ] ;
43541: LD_ADDR_VAR 0 9
43545: PUSH
43546: LD_INT 80
43548: PUSH
43549: LD_INT 65
43551: PUSH
43552: LD_INT 100
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: LIST
43559: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
43560: LD_VAR 0 6
43564: PPUSH
43565: CALL_OW 263
43569: PUSH
43570: LD_INT 1
43572: EQUAL
43573: IFFALSE 43608
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
43575: LD_ADDR_VAR 0 10
43579: PUSH
43580: LD_VAR 0 10
43584: PUSH
43585: LD_VAR 0 6
43589: PPUSH
43590: CALL_OW 311
43594: PPUSH
43595: LD_INT 3
43597: PPUSH
43598: CALL_OW 259
43602: PUSH
43603: LD_INT 4
43605: MUL
43606: MUL
43607: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
43608: LD_VAR 0 6
43612: PPUSH
43613: CALL_OW 263
43617: PUSH
43618: LD_INT 2
43620: EQUAL
43621: IFFALSE 43672
// begin j := IsControledBy ( i ) ;
43623: LD_ADDR_VAR 0 7
43627: PUSH
43628: LD_VAR 0 6
43632: PPUSH
43633: CALL_OW 312
43637: ST_TO_ADDR
// if j then
43638: LD_VAR 0 7
43642: IFFALSE 43672
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
43644: LD_ADDR_VAR 0 10
43648: PUSH
43649: LD_VAR 0 10
43653: PUSH
43654: LD_VAR 0 7
43658: PPUSH
43659: LD_INT 3
43661: PPUSH
43662: CALL_OW 259
43666: PUSH
43667: LD_INT 3
43669: MUL
43670: MUL
43671: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
43672: LD_VAR 0 6
43676: PPUSH
43677: CALL_OW 264
43681: PUSH
43682: LD_INT 5
43684: PUSH
43685: LD_INT 6
43687: PUSH
43688: LD_INT 46
43690: PUSH
43691: LD_INT 44
43693: PUSH
43694: LD_INT 47
43696: PUSH
43697: LD_INT 45
43699: PUSH
43700: LD_INT 28
43702: PUSH
43703: LD_INT 7
43705: PUSH
43706: LD_INT 27
43708: PUSH
43709: LD_INT 29
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: LIST
43716: LIST
43717: LIST
43718: LIST
43719: LIST
43720: LIST
43721: LIST
43722: LIST
43723: IN
43724: PUSH
43725: LD_VAR 0 1
43729: PPUSH
43730: LD_INT 52
43732: PPUSH
43733: CALL_OW 321
43737: PUSH
43738: LD_INT 2
43740: EQUAL
43741: AND
43742: IFFALSE 43759
// bpoints := bpoints * 1.2 ;
43744: LD_ADDR_VAR 0 10
43748: PUSH
43749: LD_VAR 0 10
43753: PUSH
43754: LD_REAL  1.20000000000000E+0000
43757: MUL
43758: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
43759: LD_VAR 0 6
43763: PPUSH
43764: CALL_OW 264
43768: PUSH
43769: LD_INT 6
43771: PUSH
43772: LD_INT 46
43774: PUSH
43775: LD_INT 47
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: LIST
43782: IN
43783: IFFALSE 43800
// bpoints := bpoints * 1.2 ;
43785: LD_ADDR_VAR 0 10
43789: PUSH
43790: LD_VAR 0 10
43794: PUSH
43795: LD_REAL  1.20000000000000E+0000
43798: MUL
43799: ST_TO_ADDR
// end ; unit_building :
43800: GO 43814
43802: LD_INT 3
43804: DOUBLE
43805: EQUAL
43806: IFTRUE 43810
43808: GO 43813
43810: POP
// ; end ;
43811: GO 43814
43813: POP
// for j = 1 to 3 do
43814: LD_ADDR_VAR 0 7
43818: PUSH
43819: DOUBLE
43820: LD_INT 1
43822: DEC
43823: ST_TO_ADDR
43824: LD_INT 3
43826: PUSH
43827: FOR_TO
43828: IFFALSE 43881
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
43830: LD_ADDR_VAR 0 5
43834: PUSH
43835: LD_VAR 0 5
43839: PPUSH
43840: LD_VAR 0 7
43844: PPUSH
43845: LD_VAR 0 5
43849: PUSH
43850: LD_VAR 0 7
43854: ARRAY
43855: PUSH
43856: LD_VAR 0 9
43860: PUSH
43861: LD_VAR 0 7
43865: ARRAY
43866: PUSH
43867: LD_VAR 0 10
43871: MUL
43872: PLUS
43873: PPUSH
43874: CALL_OW 1
43878: ST_TO_ADDR
43879: GO 43827
43881: POP
43882: POP
// end ;
43883: GO 42360
43885: POP
43886: POP
// result := Replace ( result , 4 , tmp ) ;
43887: LD_ADDR_VAR 0 5
43891: PUSH
43892: LD_VAR 0 5
43896: PPUSH
43897: LD_INT 4
43899: PPUSH
43900: LD_VAR 0 8
43904: PPUSH
43905: CALL_OW 1
43909: ST_TO_ADDR
// end ;
43910: LD_VAR 0 5
43914: RET
// export function DangerAtRange ( unit , range ) ; begin
43915: LD_INT 0
43917: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
43918: LD_ADDR_VAR 0 3
43922: PUSH
43923: LD_VAR 0 1
43927: PPUSH
43928: CALL_OW 255
43932: PPUSH
43933: LD_VAR 0 1
43937: PPUSH
43938: CALL_OW 250
43942: PPUSH
43943: LD_VAR 0 1
43947: PPUSH
43948: CALL_OW 251
43952: PPUSH
43953: LD_VAR 0 2
43957: PPUSH
43958: CALL 42212 0 4
43962: ST_TO_ADDR
// end ;
43963: LD_VAR 0 3
43967: RET
// export function DangerInArea ( side , area ) ; begin
43968: LD_INT 0
43970: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
43971: LD_ADDR_VAR 0 3
43975: PUSH
43976: LD_VAR 0 2
43980: PPUSH
43981: LD_INT 81
43983: PUSH
43984: LD_VAR 0 1
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: PPUSH
43993: CALL_OW 70
43997: ST_TO_ADDR
// end ;
43998: LD_VAR 0 3
44002: RET
// export function IsExtension ( b ) ; begin
44003: LD_INT 0
44005: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
44006: LD_ADDR_VAR 0 2
44010: PUSH
44011: LD_VAR 0 1
44015: PUSH
44016: LD_INT 23
44018: PUSH
44019: LD_INT 20
44021: PUSH
44022: LD_INT 22
44024: PUSH
44025: LD_INT 17
44027: PUSH
44028: LD_INT 24
44030: PUSH
44031: LD_INT 21
44033: PUSH
44034: LD_INT 19
44036: PUSH
44037: LD_INT 16
44039: PUSH
44040: LD_INT 25
44042: PUSH
44043: LD_INT 18
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: LIST
44050: LIST
44051: LIST
44052: LIST
44053: LIST
44054: LIST
44055: LIST
44056: LIST
44057: IN
44058: ST_TO_ADDR
// end ;
44059: LD_VAR 0 2
44063: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
44064: LD_INT 0
44066: PPUSH
44067: PPUSH
44068: PPUSH
// result := [ ] ;
44069: LD_ADDR_VAR 0 4
44073: PUSH
44074: EMPTY
44075: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
44076: LD_ADDR_VAR 0 5
44080: PUSH
44081: LD_VAR 0 2
44085: PPUSH
44086: LD_INT 21
44088: PUSH
44089: LD_INT 3
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: PPUSH
44096: CALL_OW 70
44100: ST_TO_ADDR
// if not tmp then
44101: LD_VAR 0 5
44105: NOT
44106: IFFALSE 44110
// exit ;
44108: GO 44174
// if checkLink then
44110: LD_VAR 0 3
44114: IFFALSE 44164
// begin for i in tmp do
44116: LD_ADDR_VAR 0 6
44120: PUSH
44121: LD_VAR 0 5
44125: PUSH
44126: FOR_IN
44127: IFFALSE 44162
// if GetBase ( i ) <> base then
44129: LD_VAR 0 6
44133: PPUSH
44134: CALL_OW 274
44138: PUSH
44139: LD_VAR 0 1
44143: NONEQUAL
44144: IFFALSE 44160
// ComLinkToBase ( base , i ) ;
44146: LD_VAR 0 1
44150: PPUSH
44151: LD_VAR 0 6
44155: PPUSH
44156: CALL_OW 169
44160: GO 44126
44162: POP
44163: POP
// end ; result := tmp ;
44164: LD_ADDR_VAR 0 4
44168: PUSH
44169: LD_VAR 0 5
44173: ST_TO_ADDR
// end ;
44174: LD_VAR 0 4
44178: RET
// export function ComComplete ( units , b ) ; var i ; begin
44179: LD_INT 0
44181: PPUSH
44182: PPUSH
// if not units then
44183: LD_VAR 0 1
44187: NOT
44188: IFFALSE 44192
// exit ;
44190: GO 44282
// for i in units do
44192: LD_ADDR_VAR 0 4
44196: PUSH
44197: LD_VAR 0 1
44201: PUSH
44202: FOR_IN
44203: IFFALSE 44280
// if BuildingStatus ( b ) = bs_build then
44205: LD_VAR 0 2
44209: PPUSH
44210: CALL_OW 461
44214: PUSH
44215: LD_INT 1
44217: EQUAL
44218: IFFALSE 44278
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
44220: LD_VAR 0 4
44224: PPUSH
44225: LD_STRING h
44227: PUSH
44228: LD_VAR 0 2
44232: PPUSH
44233: CALL_OW 250
44237: PUSH
44238: LD_VAR 0 2
44242: PPUSH
44243: CALL_OW 251
44247: PUSH
44248: LD_VAR 0 2
44252: PUSH
44253: LD_INT 0
44255: PUSH
44256: LD_INT 0
44258: PUSH
44259: LD_INT 0
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: LIST
44266: LIST
44267: LIST
44268: LIST
44269: LIST
44270: PUSH
44271: EMPTY
44272: LIST
44273: PPUSH
44274: CALL_OW 446
44278: GO 44202
44280: POP
44281: POP
// end ;
44282: LD_VAR 0 3
44286: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
44287: LD_INT 0
44289: PPUSH
44290: PPUSH
44291: PPUSH
44292: PPUSH
44293: PPUSH
44294: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
44295: LD_VAR 0 1
44299: NOT
44300: PUSH
44301: LD_VAR 0 1
44305: PPUSH
44306: CALL_OW 263
44310: PUSH
44311: LD_INT 2
44313: NONEQUAL
44314: OR
44315: IFFALSE 44319
// exit ;
44317: GO 44635
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
44319: LD_ADDR_VAR 0 6
44323: PUSH
44324: LD_INT 22
44326: PUSH
44327: LD_VAR 0 1
44331: PPUSH
44332: CALL_OW 255
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: LD_INT 2
44343: PUSH
44344: LD_INT 30
44346: PUSH
44347: LD_INT 36
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: PUSH
44354: LD_INT 34
44356: PUSH
44357: LD_INT 31
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: LIST
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PPUSH
44373: CALL_OW 69
44377: ST_TO_ADDR
// if not tmp then
44378: LD_VAR 0 6
44382: NOT
44383: IFFALSE 44387
// exit ;
44385: GO 44635
// result := [ ] ;
44387: LD_ADDR_VAR 0 2
44391: PUSH
44392: EMPTY
44393: ST_TO_ADDR
// for i in tmp do
44394: LD_ADDR_VAR 0 3
44398: PUSH
44399: LD_VAR 0 6
44403: PUSH
44404: FOR_IN
44405: IFFALSE 44476
// begin t := UnitsInside ( i ) ;
44407: LD_ADDR_VAR 0 4
44411: PUSH
44412: LD_VAR 0 3
44416: PPUSH
44417: CALL_OW 313
44421: ST_TO_ADDR
// if t then
44422: LD_VAR 0 4
44426: IFFALSE 44474
// for j in t do
44428: LD_ADDR_VAR 0 7
44432: PUSH
44433: LD_VAR 0 4
44437: PUSH
44438: FOR_IN
44439: IFFALSE 44472
// result := Replace ( result , result + 1 , j ) ;
44441: LD_ADDR_VAR 0 2
44445: PUSH
44446: LD_VAR 0 2
44450: PPUSH
44451: LD_VAR 0 2
44455: PUSH
44456: LD_INT 1
44458: PLUS
44459: PPUSH
44460: LD_VAR 0 7
44464: PPUSH
44465: CALL_OW 1
44469: ST_TO_ADDR
44470: GO 44438
44472: POP
44473: POP
// end ;
44474: GO 44404
44476: POP
44477: POP
// if not result then
44478: LD_VAR 0 2
44482: NOT
44483: IFFALSE 44487
// exit ;
44485: GO 44635
// mech := result [ 1 ] ;
44487: LD_ADDR_VAR 0 5
44491: PUSH
44492: LD_VAR 0 2
44496: PUSH
44497: LD_INT 1
44499: ARRAY
44500: ST_TO_ADDR
// if result > 1 then
44501: LD_VAR 0 2
44505: PUSH
44506: LD_INT 1
44508: GREATER
44509: IFFALSE 44621
// begin for i = 2 to result do
44511: LD_ADDR_VAR 0 3
44515: PUSH
44516: DOUBLE
44517: LD_INT 2
44519: DEC
44520: ST_TO_ADDR
44521: LD_VAR 0 2
44525: PUSH
44526: FOR_TO
44527: IFFALSE 44619
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
44529: LD_ADDR_VAR 0 4
44533: PUSH
44534: LD_VAR 0 2
44538: PUSH
44539: LD_VAR 0 3
44543: ARRAY
44544: PPUSH
44545: LD_INT 3
44547: PPUSH
44548: CALL_OW 259
44552: PUSH
44553: LD_VAR 0 2
44557: PUSH
44558: LD_VAR 0 3
44562: ARRAY
44563: PPUSH
44564: CALL_OW 432
44568: MINUS
44569: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
44570: LD_VAR 0 4
44574: PUSH
44575: LD_VAR 0 5
44579: PPUSH
44580: LD_INT 3
44582: PPUSH
44583: CALL_OW 259
44587: PUSH
44588: LD_VAR 0 5
44592: PPUSH
44593: CALL_OW 432
44597: MINUS
44598: GREATEREQUAL
44599: IFFALSE 44617
// mech := result [ i ] ;
44601: LD_ADDR_VAR 0 5
44605: PUSH
44606: LD_VAR 0 2
44610: PUSH
44611: LD_VAR 0 3
44615: ARRAY
44616: ST_TO_ADDR
// end ;
44617: GO 44526
44619: POP
44620: POP
// end ; ComLinkTo ( vehicle , mech ) ;
44621: LD_VAR 0 1
44625: PPUSH
44626: LD_VAR 0 5
44630: PPUSH
44631: CALL_OW 135
// end ;
44635: LD_VAR 0 2
44639: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
44640: LD_INT 0
44642: PPUSH
44643: PPUSH
44644: PPUSH
44645: PPUSH
44646: PPUSH
44647: PPUSH
44648: PPUSH
44649: PPUSH
44650: PPUSH
44651: PPUSH
44652: PPUSH
44653: PPUSH
44654: PPUSH
// result := [ ] ;
44655: LD_ADDR_VAR 0 7
44659: PUSH
44660: EMPTY
44661: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
44662: LD_VAR 0 1
44666: PPUSH
44667: CALL_OW 266
44671: PUSH
44672: LD_INT 0
44674: PUSH
44675: LD_INT 1
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: IN
44682: NOT
44683: IFFALSE 44687
// exit ;
44685: GO 46321
// if name then
44687: LD_VAR 0 3
44691: IFFALSE 44707
// SetBName ( base_dep , name ) ;
44693: LD_VAR 0 1
44697: PPUSH
44698: LD_VAR 0 3
44702: PPUSH
44703: CALL_OW 500
// base := GetBase ( base_dep ) ;
44707: LD_ADDR_VAR 0 15
44711: PUSH
44712: LD_VAR 0 1
44716: PPUSH
44717: CALL_OW 274
44721: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
44722: LD_ADDR_VAR 0 16
44726: PUSH
44727: LD_VAR 0 1
44731: PPUSH
44732: CALL_OW 255
44736: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
44737: LD_ADDR_VAR 0 17
44741: PUSH
44742: LD_VAR 0 1
44746: PPUSH
44747: CALL_OW 248
44751: ST_TO_ADDR
// if sources then
44752: LD_VAR 0 5
44756: IFFALSE 44803
// for i = 1 to 3 do
44758: LD_ADDR_VAR 0 8
44762: PUSH
44763: DOUBLE
44764: LD_INT 1
44766: DEC
44767: ST_TO_ADDR
44768: LD_INT 3
44770: PUSH
44771: FOR_TO
44772: IFFALSE 44801
// AddResourceType ( base , i , sources [ i ] ) ;
44774: LD_VAR 0 15
44778: PPUSH
44779: LD_VAR 0 8
44783: PPUSH
44784: LD_VAR 0 5
44788: PUSH
44789: LD_VAR 0 8
44793: ARRAY
44794: PPUSH
44795: CALL_OW 276
44799: GO 44771
44801: POP
44802: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
44803: LD_ADDR_VAR 0 18
44807: PUSH
44808: LD_VAR 0 15
44812: PPUSH
44813: LD_VAR 0 2
44817: PPUSH
44818: LD_INT 1
44820: PPUSH
44821: CALL 44064 0 3
44825: ST_TO_ADDR
// InitHc ;
44826: CALL_OW 19
// InitUc ;
44830: CALL_OW 18
// uc_side := side ;
44834: LD_ADDR_OWVAR 20
44838: PUSH
44839: LD_VAR 0 16
44843: ST_TO_ADDR
// uc_nation := nation ;
44844: LD_ADDR_OWVAR 21
44848: PUSH
44849: LD_VAR 0 17
44853: ST_TO_ADDR
// if buildings then
44854: LD_VAR 0 18
44858: IFFALSE 46180
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
44860: LD_ADDR_VAR 0 19
44864: PUSH
44865: LD_VAR 0 18
44869: PPUSH
44870: LD_INT 2
44872: PUSH
44873: LD_INT 30
44875: PUSH
44876: LD_INT 29
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 30
44885: PUSH
44886: LD_INT 30
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: LIST
44897: PPUSH
44898: CALL_OW 72
44902: ST_TO_ADDR
// if tmp then
44903: LD_VAR 0 19
44907: IFFALSE 44955
// for i in tmp do
44909: LD_ADDR_VAR 0 8
44913: PUSH
44914: LD_VAR 0 19
44918: PUSH
44919: FOR_IN
44920: IFFALSE 44953
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
44922: LD_VAR 0 8
44926: PPUSH
44927: CALL_OW 250
44931: PPUSH
44932: LD_VAR 0 8
44936: PPUSH
44937: CALL_OW 251
44941: PPUSH
44942: LD_VAR 0 16
44946: PPUSH
44947: CALL_OW 441
44951: GO 44919
44953: POP
44954: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
44955: LD_VAR 0 18
44959: PPUSH
44960: LD_INT 2
44962: PUSH
44963: LD_INT 30
44965: PUSH
44966: LD_INT 32
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 30
44975: PUSH
44976: LD_INT 33
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: LIST
44987: PPUSH
44988: CALL_OW 72
44992: IFFALSE 45080
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
44994: LD_ADDR_VAR 0 8
44998: PUSH
44999: LD_VAR 0 18
45003: PPUSH
45004: LD_INT 2
45006: PUSH
45007: LD_INT 30
45009: PUSH
45010: LD_INT 32
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: LD_INT 30
45019: PUSH
45020: LD_INT 33
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: LIST
45031: PPUSH
45032: CALL_OW 72
45036: PUSH
45037: FOR_IN
45038: IFFALSE 45078
// begin if not GetBWeapon ( i ) then
45040: LD_VAR 0 8
45044: PPUSH
45045: CALL_OW 269
45049: NOT
45050: IFFALSE 45076
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
45052: LD_VAR 0 8
45056: PPUSH
45057: LD_VAR 0 8
45061: PPUSH
45062: LD_VAR 0 2
45066: PPUSH
45067: CALL 46326 0 2
45071: PPUSH
45072: CALL_OW 431
// end ;
45076: GO 45037
45078: POP
45079: POP
// end ; for i = 1 to personel do
45080: LD_ADDR_VAR 0 8
45084: PUSH
45085: DOUBLE
45086: LD_INT 1
45088: DEC
45089: ST_TO_ADDR
45090: LD_VAR 0 6
45094: PUSH
45095: FOR_TO
45096: IFFALSE 46160
// begin if i > 4 then
45098: LD_VAR 0 8
45102: PUSH
45103: LD_INT 4
45105: GREATER
45106: IFFALSE 45110
// break ;
45108: GO 46160
// case i of 1 :
45110: LD_VAR 0 8
45114: PUSH
45115: LD_INT 1
45117: DOUBLE
45118: EQUAL
45119: IFTRUE 45123
45121: GO 45203
45123: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
45124: LD_ADDR_VAR 0 12
45128: PUSH
45129: LD_VAR 0 18
45133: PPUSH
45134: LD_INT 22
45136: PUSH
45137: LD_VAR 0 16
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: LD_INT 58
45148: PUSH
45149: EMPTY
45150: LIST
45151: PUSH
45152: LD_INT 2
45154: PUSH
45155: LD_INT 30
45157: PUSH
45158: LD_INT 32
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: PUSH
45165: LD_INT 30
45167: PUSH
45168: LD_INT 4
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: LD_INT 30
45177: PUSH
45178: LD_INT 5
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: LIST
45189: LIST
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: LIST
45195: PPUSH
45196: CALL_OW 72
45200: ST_TO_ADDR
45201: GO 45425
45203: LD_INT 2
45205: DOUBLE
45206: EQUAL
45207: IFTRUE 45211
45209: GO 45273
45211: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
45212: LD_ADDR_VAR 0 12
45216: PUSH
45217: LD_VAR 0 18
45221: PPUSH
45222: LD_INT 22
45224: PUSH
45225: LD_VAR 0 16
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_INT 2
45236: PUSH
45237: LD_INT 30
45239: PUSH
45240: LD_INT 0
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: LD_INT 30
45249: PUSH
45250: LD_INT 1
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: LIST
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PPUSH
45266: CALL_OW 72
45270: ST_TO_ADDR
45271: GO 45425
45273: LD_INT 3
45275: DOUBLE
45276: EQUAL
45277: IFTRUE 45281
45279: GO 45343
45281: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
45282: LD_ADDR_VAR 0 12
45286: PUSH
45287: LD_VAR 0 18
45291: PPUSH
45292: LD_INT 22
45294: PUSH
45295: LD_VAR 0 16
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PUSH
45304: LD_INT 2
45306: PUSH
45307: LD_INT 30
45309: PUSH
45310: LD_INT 2
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 30
45319: PUSH
45320: LD_INT 3
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: LIST
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PPUSH
45336: CALL_OW 72
45340: ST_TO_ADDR
45341: GO 45425
45343: LD_INT 4
45345: DOUBLE
45346: EQUAL
45347: IFTRUE 45351
45349: GO 45424
45351: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
45352: LD_ADDR_VAR 0 12
45356: PUSH
45357: LD_VAR 0 18
45361: PPUSH
45362: LD_INT 22
45364: PUSH
45365: LD_VAR 0 16
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: PUSH
45374: LD_INT 2
45376: PUSH
45377: LD_INT 30
45379: PUSH
45380: LD_INT 6
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: LD_INT 30
45389: PUSH
45390: LD_INT 7
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: LD_INT 30
45399: PUSH
45400: LD_INT 8
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: LIST
45411: LIST
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PPUSH
45417: CALL_OW 72
45421: ST_TO_ADDR
45422: GO 45425
45424: POP
// if i = 1 then
45425: LD_VAR 0 8
45429: PUSH
45430: LD_INT 1
45432: EQUAL
45433: IFFALSE 45544
// begin tmp := [ ] ;
45435: LD_ADDR_VAR 0 19
45439: PUSH
45440: EMPTY
45441: ST_TO_ADDR
// for j in f do
45442: LD_ADDR_VAR 0 9
45446: PUSH
45447: LD_VAR 0 12
45451: PUSH
45452: FOR_IN
45453: IFFALSE 45526
// if GetBType ( j ) = b_bunker then
45455: LD_VAR 0 9
45459: PPUSH
45460: CALL_OW 266
45464: PUSH
45465: LD_INT 32
45467: EQUAL
45468: IFFALSE 45495
// tmp := Insert ( tmp , 1 , j ) else
45470: LD_ADDR_VAR 0 19
45474: PUSH
45475: LD_VAR 0 19
45479: PPUSH
45480: LD_INT 1
45482: PPUSH
45483: LD_VAR 0 9
45487: PPUSH
45488: CALL_OW 2
45492: ST_TO_ADDR
45493: GO 45524
// tmp := Insert ( tmp , tmp + 1 , j ) ;
45495: LD_ADDR_VAR 0 19
45499: PUSH
45500: LD_VAR 0 19
45504: PPUSH
45505: LD_VAR 0 19
45509: PUSH
45510: LD_INT 1
45512: PLUS
45513: PPUSH
45514: LD_VAR 0 9
45518: PPUSH
45519: CALL_OW 2
45523: ST_TO_ADDR
45524: GO 45452
45526: POP
45527: POP
// if tmp then
45528: LD_VAR 0 19
45532: IFFALSE 45544
// f := tmp ;
45534: LD_ADDR_VAR 0 12
45538: PUSH
45539: LD_VAR 0 19
45543: ST_TO_ADDR
// end ; x := personel [ i ] ;
45544: LD_ADDR_VAR 0 13
45548: PUSH
45549: LD_VAR 0 6
45553: PUSH
45554: LD_VAR 0 8
45558: ARRAY
45559: ST_TO_ADDR
// if x = - 1 then
45560: LD_VAR 0 13
45564: PUSH
45565: LD_INT 1
45567: NEG
45568: EQUAL
45569: IFFALSE 45778
// begin for j in f do
45571: LD_ADDR_VAR 0 9
45575: PUSH
45576: LD_VAR 0 12
45580: PUSH
45581: FOR_IN
45582: IFFALSE 45774
// repeat InitHc ;
45584: CALL_OW 19
// if GetBType ( j ) = b_barracks then
45588: LD_VAR 0 9
45592: PPUSH
45593: CALL_OW 266
45597: PUSH
45598: LD_INT 5
45600: EQUAL
45601: IFFALSE 45671
// begin if UnitsInside ( j ) < 3 then
45603: LD_VAR 0 9
45607: PPUSH
45608: CALL_OW 313
45612: PUSH
45613: LD_INT 3
45615: LESS
45616: IFFALSE 45652
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45618: LD_INT 0
45620: PPUSH
45621: LD_INT 5
45623: PUSH
45624: LD_INT 8
45626: PUSH
45627: LD_INT 9
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: LIST
45634: PUSH
45635: LD_VAR 0 17
45639: ARRAY
45640: PPUSH
45641: LD_VAR 0 4
45645: PPUSH
45646: CALL_OW 380
45650: GO 45669
// PrepareHuman ( false , i , skill ) ;
45652: LD_INT 0
45654: PPUSH
45655: LD_VAR 0 8
45659: PPUSH
45660: LD_VAR 0 4
45664: PPUSH
45665: CALL_OW 380
// end else
45669: GO 45688
// PrepareHuman ( false , i , skill ) ;
45671: LD_INT 0
45673: PPUSH
45674: LD_VAR 0 8
45678: PPUSH
45679: LD_VAR 0 4
45683: PPUSH
45684: CALL_OW 380
// un := CreateHuman ;
45688: LD_ADDR_VAR 0 14
45692: PUSH
45693: CALL_OW 44
45697: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45698: LD_ADDR_VAR 0 7
45702: PUSH
45703: LD_VAR 0 7
45707: PPUSH
45708: LD_INT 1
45710: PPUSH
45711: LD_VAR 0 14
45715: PPUSH
45716: CALL_OW 2
45720: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
45721: LD_VAR 0 14
45725: PPUSH
45726: LD_VAR 0 9
45730: PPUSH
45731: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
45735: LD_VAR 0 9
45739: PPUSH
45740: CALL_OW 313
45744: PUSH
45745: LD_INT 6
45747: EQUAL
45748: PUSH
45749: LD_VAR 0 9
45753: PPUSH
45754: CALL_OW 266
45758: PUSH
45759: LD_INT 32
45761: PUSH
45762: LD_INT 31
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: IN
45769: OR
45770: IFFALSE 45584
45772: GO 45581
45774: POP
45775: POP
// end else
45776: GO 46158
// for j = 1 to x do
45778: LD_ADDR_VAR 0 9
45782: PUSH
45783: DOUBLE
45784: LD_INT 1
45786: DEC
45787: ST_TO_ADDR
45788: LD_VAR 0 13
45792: PUSH
45793: FOR_TO
45794: IFFALSE 46156
// begin InitHc ;
45796: CALL_OW 19
// if not f then
45800: LD_VAR 0 12
45804: NOT
45805: IFFALSE 45894
// begin PrepareHuman ( false , i , skill ) ;
45807: LD_INT 0
45809: PPUSH
45810: LD_VAR 0 8
45814: PPUSH
45815: LD_VAR 0 4
45819: PPUSH
45820: CALL_OW 380
// un := CreateHuman ;
45824: LD_ADDR_VAR 0 14
45828: PUSH
45829: CALL_OW 44
45833: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45834: LD_ADDR_VAR 0 7
45838: PUSH
45839: LD_VAR 0 7
45843: PPUSH
45844: LD_INT 1
45846: PPUSH
45847: LD_VAR 0 14
45851: PPUSH
45852: CALL_OW 2
45856: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45857: LD_VAR 0 14
45861: PPUSH
45862: LD_VAR 0 1
45866: PPUSH
45867: CALL_OW 250
45871: PPUSH
45872: LD_VAR 0 1
45876: PPUSH
45877: CALL_OW 251
45881: PPUSH
45882: LD_INT 10
45884: PPUSH
45885: LD_INT 0
45887: PPUSH
45888: CALL_OW 50
// continue ;
45892: GO 45793
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
45894: LD_VAR 0 12
45898: PUSH
45899: LD_INT 1
45901: ARRAY
45902: PPUSH
45903: CALL_OW 313
45907: PUSH
45908: LD_VAR 0 12
45912: PUSH
45913: LD_INT 1
45915: ARRAY
45916: PPUSH
45917: CALL_OW 266
45921: PUSH
45922: LD_INT 32
45924: PUSH
45925: LD_INT 31
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: IN
45932: AND
45933: PUSH
45934: LD_VAR 0 12
45938: PUSH
45939: LD_INT 1
45941: ARRAY
45942: PPUSH
45943: CALL_OW 313
45947: PUSH
45948: LD_INT 6
45950: EQUAL
45951: OR
45952: IFFALSE 45972
// f := Delete ( f , 1 ) ;
45954: LD_ADDR_VAR 0 12
45958: PUSH
45959: LD_VAR 0 12
45963: PPUSH
45964: LD_INT 1
45966: PPUSH
45967: CALL_OW 3
45971: ST_TO_ADDR
// if not f then
45972: LD_VAR 0 12
45976: NOT
45977: IFFALSE 45995
// begin x := x + 2 ;
45979: LD_ADDR_VAR 0 13
45983: PUSH
45984: LD_VAR 0 13
45988: PUSH
45989: LD_INT 2
45991: PLUS
45992: ST_TO_ADDR
// continue ;
45993: GO 45793
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
45995: LD_VAR 0 12
45999: PUSH
46000: LD_INT 1
46002: ARRAY
46003: PPUSH
46004: CALL_OW 266
46008: PUSH
46009: LD_INT 5
46011: EQUAL
46012: IFFALSE 46086
// begin if UnitsInside ( f [ 1 ] ) < 3 then
46014: LD_VAR 0 12
46018: PUSH
46019: LD_INT 1
46021: ARRAY
46022: PPUSH
46023: CALL_OW 313
46027: PUSH
46028: LD_INT 3
46030: LESS
46031: IFFALSE 46067
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46033: LD_INT 0
46035: PPUSH
46036: LD_INT 5
46038: PUSH
46039: LD_INT 8
46041: PUSH
46042: LD_INT 9
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: LIST
46049: PUSH
46050: LD_VAR 0 17
46054: ARRAY
46055: PPUSH
46056: LD_VAR 0 4
46060: PPUSH
46061: CALL_OW 380
46065: GO 46084
// PrepareHuman ( false , i , skill ) ;
46067: LD_INT 0
46069: PPUSH
46070: LD_VAR 0 8
46074: PPUSH
46075: LD_VAR 0 4
46079: PPUSH
46080: CALL_OW 380
// end else
46084: GO 46103
// PrepareHuman ( false , i , skill ) ;
46086: LD_INT 0
46088: PPUSH
46089: LD_VAR 0 8
46093: PPUSH
46094: LD_VAR 0 4
46098: PPUSH
46099: CALL_OW 380
// un := CreateHuman ;
46103: LD_ADDR_VAR 0 14
46107: PUSH
46108: CALL_OW 44
46112: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46113: LD_ADDR_VAR 0 7
46117: PUSH
46118: LD_VAR 0 7
46122: PPUSH
46123: LD_INT 1
46125: PPUSH
46126: LD_VAR 0 14
46130: PPUSH
46131: CALL_OW 2
46135: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
46136: LD_VAR 0 14
46140: PPUSH
46141: LD_VAR 0 12
46145: PUSH
46146: LD_INT 1
46148: ARRAY
46149: PPUSH
46150: CALL_OW 52
// end ;
46154: GO 45793
46156: POP
46157: POP
// end ;
46158: GO 45095
46160: POP
46161: POP
// result := result ^ buildings ;
46162: LD_ADDR_VAR 0 7
46166: PUSH
46167: LD_VAR 0 7
46171: PUSH
46172: LD_VAR 0 18
46176: ADD
46177: ST_TO_ADDR
// end else
46178: GO 46321
// begin for i = 1 to personel do
46180: LD_ADDR_VAR 0 8
46184: PUSH
46185: DOUBLE
46186: LD_INT 1
46188: DEC
46189: ST_TO_ADDR
46190: LD_VAR 0 6
46194: PUSH
46195: FOR_TO
46196: IFFALSE 46319
// begin if i > 4 then
46198: LD_VAR 0 8
46202: PUSH
46203: LD_INT 4
46205: GREATER
46206: IFFALSE 46210
// break ;
46208: GO 46319
// x := personel [ i ] ;
46210: LD_ADDR_VAR 0 13
46214: PUSH
46215: LD_VAR 0 6
46219: PUSH
46220: LD_VAR 0 8
46224: ARRAY
46225: ST_TO_ADDR
// if x = - 1 then
46226: LD_VAR 0 13
46230: PUSH
46231: LD_INT 1
46233: NEG
46234: EQUAL
46235: IFFALSE 46239
// continue ;
46237: GO 46195
// PrepareHuman ( false , i , skill ) ;
46239: LD_INT 0
46241: PPUSH
46242: LD_VAR 0 8
46246: PPUSH
46247: LD_VAR 0 4
46251: PPUSH
46252: CALL_OW 380
// un := CreateHuman ;
46256: LD_ADDR_VAR 0 14
46260: PUSH
46261: CALL_OW 44
46265: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46266: LD_VAR 0 14
46270: PPUSH
46271: LD_VAR 0 1
46275: PPUSH
46276: CALL_OW 250
46280: PPUSH
46281: LD_VAR 0 1
46285: PPUSH
46286: CALL_OW 251
46290: PPUSH
46291: LD_INT 10
46293: PPUSH
46294: LD_INT 0
46296: PPUSH
46297: CALL_OW 50
// result := result ^ un ;
46301: LD_ADDR_VAR 0 7
46305: PUSH
46306: LD_VAR 0 7
46310: PUSH
46311: LD_VAR 0 14
46315: ADD
46316: ST_TO_ADDR
// end ;
46317: GO 46195
46319: POP
46320: POP
// end ; end ;
46321: LD_VAR 0 7
46325: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
46326: LD_INT 0
46328: PPUSH
46329: PPUSH
46330: PPUSH
46331: PPUSH
46332: PPUSH
46333: PPUSH
46334: PPUSH
46335: PPUSH
46336: PPUSH
46337: PPUSH
46338: PPUSH
46339: PPUSH
46340: PPUSH
46341: PPUSH
46342: PPUSH
46343: PPUSH
// result := false ;
46344: LD_ADDR_VAR 0 3
46348: PUSH
46349: LD_INT 0
46351: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
46352: LD_VAR 0 1
46356: NOT
46357: PUSH
46358: LD_VAR 0 1
46362: PPUSH
46363: CALL_OW 266
46367: PUSH
46368: LD_INT 32
46370: PUSH
46371: LD_INT 33
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: IN
46378: NOT
46379: OR
46380: IFFALSE 46384
// exit ;
46382: GO 47493
// nat := GetNation ( tower ) ;
46384: LD_ADDR_VAR 0 12
46388: PUSH
46389: LD_VAR 0 1
46393: PPUSH
46394: CALL_OW 248
46398: ST_TO_ADDR
// side := GetSide ( tower ) ;
46399: LD_ADDR_VAR 0 16
46403: PUSH
46404: LD_VAR 0 1
46408: PPUSH
46409: CALL_OW 255
46413: ST_TO_ADDR
// x := GetX ( tower ) ;
46414: LD_ADDR_VAR 0 10
46418: PUSH
46419: LD_VAR 0 1
46423: PPUSH
46424: CALL_OW 250
46428: ST_TO_ADDR
// y := GetY ( tower ) ;
46429: LD_ADDR_VAR 0 11
46433: PUSH
46434: LD_VAR 0 1
46438: PPUSH
46439: CALL_OW 251
46443: ST_TO_ADDR
// if not x or not y then
46444: LD_VAR 0 10
46448: NOT
46449: PUSH
46450: LD_VAR 0 11
46454: NOT
46455: OR
46456: IFFALSE 46460
// exit ;
46458: GO 47493
// weapon := 0 ;
46460: LD_ADDR_VAR 0 18
46464: PUSH
46465: LD_INT 0
46467: ST_TO_ADDR
// fac_list := [ ] ;
46468: LD_ADDR_VAR 0 17
46472: PUSH
46473: EMPTY
46474: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
46475: LD_ADDR_VAR 0 6
46479: PUSH
46480: LD_VAR 0 1
46484: PPUSH
46485: CALL_OW 274
46489: PPUSH
46490: LD_VAR 0 2
46494: PPUSH
46495: LD_INT 0
46497: PPUSH
46498: CALL 44064 0 3
46502: PPUSH
46503: LD_INT 30
46505: PUSH
46506: LD_INT 3
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PPUSH
46513: CALL_OW 72
46517: ST_TO_ADDR
// if not factories then
46518: LD_VAR 0 6
46522: NOT
46523: IFFALSE 46527
// exit ;
46525: GO 47493
// for i in factories do
46527: LD_ADDR_VAR 0 8
46531: PUSH
46532: LD_VAR 0 6
46536: PUSH
46537: FOR_IN
46538: IFFALSE 46563
// fac_list := fac_list union AvailableWeaponList ( i ) ;
46540: LD_ADDR_VAR 0 17
46544: PUSH
46545: LD_VAR 0 17
46549: PUSH
46550: LD_VAR 0 8
46554: PPUSH
46555: CALL_OW 478
46559: UNION
46560: ST_TO_ADDR
46561: GO 46537
46563: POP
46564: POP
// if not fac_list then
46565: LD_VAR 0 17
46569: NOT
46570: IFFALSE 46574
// exit ;
46572: GO 47493
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
46574: LD_ADDR_VAR 0 5
46578: PUSH
46579: LD_INT 4
46581: PUSH
46582: LD_INT 5
46584: PUSH
46585: LD_INT 9
46587: PUSH
46588: LD_INT 10
46590: PUSH
46591: LD_INT 6
46593: PUSH
46594: LD_INT 7
46596: PUSH
46597: LD_INT 11
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: LIST
46604: LIST
46605: LIST
46606: LIST
46607: LIST
46608: PUSH
46609: LD_INT 27
46611: PUSH
46612: LD_INT 28
46614: PUSH
46615: LD_INT 26
46617: PUSH
46618: LD_INT 30
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: LIST
46625: LIST
46626: PUSH
46627: LD_INT 43
46629: PUSH
46630: LD_INT 44
46632: PUSH
46633: LD_INT 46
46635: PUSH
46636: LD_INT 45
46638: PUSH
46639: LD_INT 47
46641: PUSH
46642: LD_INT 49
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: LIST
46649: LIST
46650: LIST
46651: LIST
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: LIST
46657: PUSH
46658: LD_VAR 0 12
46662: ARRAY
46663: ST_TO_ADDR
// list := list isect fac_list ;
46664: LD_ADDR_VAR 0 5
46668: PUSH
46669: LD_VAR 0 5
46673: PUSH
46674: LD_VAR 0 17
46678: ISECT
46679: ST_TO_ADDR
// if not list then
46680: LD_VAR 0 5
46684: NOT
46685: IFFALSE 46689
// exit ;
46687: GO 47493
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
46689: LD_VAR 0 12
46693: PUSH
46694: LD_INT 3
46696: EQUAL
46697: PUSH
46698: LD_INT 49
46700: PUSH
46701: LD_VAR 0 5
46705: IN
46706: AND
46707: PUSH
46708: LD_INT 31
46710: PPUSH
46711: LD_VAR 0 16
46715: PPUSH
46716: CALL_OW 321
46720: PUSH
46721: LD_INT 2
46723: EQUAL
46724: AND
46725: IFFALSE 46785
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
46727: LD_INT 22
46729: PUSH
46730: LD_VAR 0 16
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 35
46741: PUSH
46742: LD_INT 49
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 91
46751: PUSH
46752: LD_VAR 0 1
46756: PUSH
46757: LD_INT 10
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: LIST
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: LIST
46769: PPUSH
46770: CALL_OW 69
46774: NOT
46775: IFFALSE 46785
// weapon := ru_time_lapser ;
46777: LD_ADDR_VAR 0 18
46781: PUSH
46782: LD_INT 49
46784: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
46785: LD_VAR 0 12
46789: PUSH
46790: LD_INT 1
46792: PUSH
46793: LD_INT 2
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: IN
46800: PUSH
46801: LD_INT 11
46803: PUSH
46804: LD_VAR 0 5
46808: IN
46809: PUSH
46810: LD_INT 30
46812: PUSH
46813: LD_VAR 0 5
46817: IN
46818: OR
46819: AND
46820: PUSH
46821: LD_INT 6
46823: PPUSH
46824: LD_VAR 0 16
46828: PPUSH
46829: CALL_OW 321
46833: PUSH
46834: LD_INT 2
46836: EQUAL
46837: AND
46838: IFFALSE 47003
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
46840: LD_INT 22
46842: PUSH
46843: LD_VAR 0 16
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 2
46854: PUSH
46855: LD_INT 35
46857: PUSH
46858: LD_INT 11
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: LD_INT 35
46867: PUSH
46868: LD_INT 30
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 91
46882: PUSH
46883: LD_VAR 0 1
46887: PUSH
46888: LD_INT 18
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: LIST
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: LIST
46900: PPUSH
46901: CALL_OW 69
46905: NOT
46906: PUSH
46907: LD_INT 22
46909: PUSH
46910: LD_VAR 0 16
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 2
46921: PUSH
46922: LD_INT 30
46924: PUSH
46925: LD_INT 32
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 30
46934: PUSH
46935: LD_INT 33
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: LIST
46946: PUSH
46947: LD_INT 91
46949: PUSH
46950: LD_VAR 0 1
46954: PUSH
46955: LD_INT 12
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: LIST
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: LIST
46967: PUSH
46968: EMPTY
46969: LIST
46970: PPUSH
46971: CALL_OW 69
46975: PUSH
46976: LD_INT 2
46978: GREATER
46979: AND
46980: IFFALSE 47003
// weapon := [ us_radar , ar_radar ] [ nat ] ;
46982: LD_ADDR_VAR 0 18
46986: PUSH
46987: LD_INT 11
46989: PUSH
46990: LD_INT 30
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_VAR 0 12
47001: ARRAY
47002: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
47003: LD_VAR 0 18
47007: NOT
47008: PUSH
47009: LD_INT 40
47011: PPUSH
47012: LD_VAR 0 16
47016: PPUSH
47017: CALL_OW 321
47021: PUSH
47022: LD_INT 2
47024: EQUAL
47025: AND
47026: PUSH
47027: LD_INT 7
47029: PUSH
47030: LD_VAR 0 5
47034: IN
47035: PUSH
47036: LD_INT 28
47038: PUSH
47039: LD_VAR 0 5
47043: IN
47044: OR
47045: PUSH
47046: LD_INT 45
47048: PUSH
47049: LD_VAR 0 5
47053: IN
47054: OR
47055: AND
47056: IFFALSE 47310
// begin hex := GetHexInfo ( x , y ) ;
47058: LD_ADDR_VAR 0 4
47062: PUSH
47063: LD_VAR 0 10
47067: PPUSH
47068: LD_VAR 0 11
47072: PPUSH
47073: CALL_OW 546
47077: ST_TO_ADDR
// if hex [ 1 ] then
47078: LD_VAR 0 4
47082: PUSH
47083: LD_INT 1
47085: ARRAY
47086: IFFALSE 47090
// exit ;
47088: GO 47493
// height := hex [ 2 ] ;
47090: LD_ADDR_VAR 0 15
47094: PUSH
47095: LD_VAR 0 4
47099: PUSH
47100: LD_INT 2
47102: ARRAY
47103: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
47104: LD_ADDR_VAR 0 14
47108: PUSH
47109: LD_INT 0
47111: PUSH
47112: LD_INT 2
47114: PUSH
47115: LD_INT 3
47117: PUSH
47118: LD_INT 5
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: LIST
47125: LIST
47126: ST_TO_ADDR
// for i in tmp do
47127: LD_ADDR_VAR 0 8
47131: PUSH
47132: LD_VAR 0 14
47136: PUSH
47137: FOR_IN
47138: IFFALSE 47308
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
47140: LD_ADDR_VAR 0 9
47144: PUSH
47145: LD_VAR 0 10
47149: PPUSH
47150: LD_VAR 0 8
47154: PPUSH
47155: LD_INT 5
47157: PPUSH
47158: CALL_OW 272
47162: PUSH
47163: LD_VAR 0 11
47167: PPUSH
47168: LD_VAR 0 8
47172: PPUSH
47173: LD_INT 5
47175: PPUSH
47176: CALL_OW 273
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
47185: LD_VAR 0 9
47189: PUSH
47190: LD_INT 1
47192: ARRAY
47193: PPUSH
47194: LD_VAR 0 9
47198: PUSH
47199: LD_INT 2
47201: ARRAY
47202: PPUSH
47203: CALL_OW 488
47207: IFFALSE 47306
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
47209: LD_ADDR_VAR 0 4
47213: PUSH
47214: LD_VAR 0 9
47218: PUSH
47219: LD_INT 1
47221: ARRAY
47222: PPUSH
47223: LD_VAR 0 9
47227: PUSH
47228: LD_INT 2
47230: ARRAY
47231: PPUSH
47232: CALL_OW 546
47236: ST_TO_ADDR
// if hex [ 1 ] then
47237: LD_VAR 0 4
47241: PUSH
47242: LD_INT 1
47244: ARRAY
47245: IFFALSE 47249
// continue ;
47247: GO 47137
// h := hex [ 2 ] ;
47249: LD_ADDR_VAR 0 13
47253: PUSH
47254: LD_VAR 0 4
47258: PUSH
47259: LD_INT 2
47261: ARRAY
47262: ST_TO_ADDR
// if h + 7 < height then
47263: LD_VAR 0 13
47267: PUSH
47268: LD_INT 7
47270: PLUS
47271: PUSH
47272: LD_VAR 0 15
47276: LESS
47277: IFFALSE 47306
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
47279: LD_ADDR_VAR 0 18
47283: PUSH
47284: LD_INT 7
47286: PUSH
47287: LD_INT 28
47289: PUSH
47290: LD_INT 45
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: LIST
47297: PUSH
47298: LD_VAR 0 12
47302: ARRAY
47303: ST_TO_ADDR
// break ;
47304: GO 47308
// end ; end ; end ;
47306: GO 47137
47308: POP
47309: POP
// end ; if not weapon then
47310: LD_VAR 0 18
47314: NOT
47315: IFFALSE 47375
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
47317: LD_ADDR_VAR 0 5
47321: PUSH
47322: LD_VAR 0 5
47326: PUSH
47327: LD_INT 11
47329: PUSH
47330: LD_INT 30
47332: PUSH
47333: LD_INT 49
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: LIST
47340: DIFF
47341: ST_TO_ADDR
// if not list then
47342: LD_VAR 0 5
47346: NOT
47347: IFFALSE 47351
// exit ;
47349: GO 47493
// weapon := list [ rand ( 1 , list ) ] ;
47351: LD_ADDR_VAR 0 18
47355: PUSH
47356: LD_VAR 0 5
47360: PUSH
47361: LD_INT 1
47363: PPUSH
47364: LD_VAR 0 5
47368: PPUSH
47369: CALL_OW 12
47373: ARRAY
47374: ST_TO_ADDR
// end ; if weapon then
47375: LD_VAR 0 18
47379: IFFALSE 47493
// begin tmp := CostOfWeapon ( weapon ) ;
47381: LD_ADDR_VAR 0 14
47385: PUSH
47386: LD_VAR 0 18
47390: PPUSH
47391: CALL_OW 451
47395: ST_TO_ADDR
// j := GetBase ( tower ) ;
47396: LD_ADDR_VAR 0 9
47400: PUSH
47401: LD_VAR 0 1
47405: PPUSH
47406: CALL_OW 274
47410: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
47411: LD_VAR 0 9
47415: PPUSH
47416: LD_INT 1
47418: PPUSH
47419: CALL_OW 275
47423: PUSH
47424: LD_VAR 0 14
47428: PUSH
47429: LD_INT 1
47431: ARRAY
47432: GREATEREQUAL
47433: PUSH
47434: LD_VAR 0 9
47438: PPUSH
47439: LD_INT 2
47441: PPUSH
47442: CALL_OW 275
47446: PUSH
47447: LD_VAR 0 14
47451: PUSH
47452: LD_INT 2
47454: ARRAY
47455: GREATEREQUAL
47456: AND
47457: PUSH
47458: LD_VAR 0 9
47462: PPUSH
47463: LD_INT 3
47465: PPUSH
47466: CALL_OW 275
47470: PUSH
47471: LD_VAR 0 14
47475: PUSH
47476: LD_INT 3
47478: ARRAY
47479: GREATEREQUAL
47480: AND
47481: IFFALSE 47493
// result := weapon ;
47483: LD_ADDR_VAR 0 3
47487: PUSH
47488: LD_VAR 0 18
47492: ST_TO_ADDR
// end ; end ;
47493: LD_VAR 0 3
47497: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
47498: LD_INT 0
47500: PPUSH
47501: PPUSH
// result := true ;
47502: LD_ADDR_VAR 0 3
47506: PUSH
47507: LD_INT 1
47509: ST_TO_ADDR
// if array1 = array2 then
47510: LD_VAR 0 1
47514: PUSH
47515: LD_VAR 0 2
47519: EQUAL
47520: IFFALSE 47580
// begin for i = 1 to array1 do
47522: LD_ADDR_VAR 0 4
47526: PUSH
47527: DOUBLE
47528: LD_INT 1
47530: DEC
47531: ST_TO_ADDR
47532: LD_VAR 0 1
47536: PUSH
47537: FOR_TO
47538: IFFALSE 47576
// if array1 [ i ] <> array2 [ i ] then
47540: LD_VAR 0 1
47544: PUSH
47545: LD_VAR 0 4
47549: ARRAY
47550: PUSH
47551: LD_VAR 0 2
47555: PUSH
47556: LD_VAR 0 4
47560: ARRAY
47561: NONEQUAL
47562: IFFALSE 47574
// begin result := false ;
47564: LD_ADDR_VAR 0 3
47568: PUSH
47569: LD_INT 0
47571: ST_TO_ADDR
// break ;
47572: GO 47576
// end ;
47574: GO 47537
47576: POP
47577: POP
// end else
47578: GO 47588
// result := false ;
47580: LD_ADDR_VAR 0 3
47584: PUSH
47585: LD_INT 0
47587: ST_TO_ADDR
// end ;
47588: LD_VAR 0 3
47592: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
47593: LD_INT 0
47595: PPUSH
47596: PPUSH
// if not array1 or not array2 then
47597: LD_VAR 0 1
47601: NOT
47602: PUSH
47603: LD_VAR 0 2
47607: NOT
47608: OR
47609: IFFALSE 47613
// exit ;
47611: GO 47677
// result := true ;
47613: LD_ADDR_VAR 0 3
47617: PUSH
47618: LD_INT 1
47620: ST_TO_ADDR
// for i = 1 to array1 do
47621: LD_ADDR_VAR 0 4
47625: PUSH
47626: DOUBLE
47627: LD_INT 1
47629: DEC
47630: ST_TO_ADDR
47631: LD_VAR 0 1
47635: PUSH
47636: FOR_TO
47637: IFFALSE 47675
// if array1 [ i ] <> array2 [ i ] then
47639: LD_VAR 0 1
47643: PUSH
47644: LD_VAR 0 4
47648: ARRAY
47649: PUSH
47650: LD_VAR 0 2
47654: PUSH
47655: LD_VAR 0 4
47659: ARRAY
47660: NONEQUAL
47661: IFFALSE 47673
// begin result := false ;
47663: LD_ADDR_VAR 0 3
47667: PUSH
47668: LD_INT 0
47670: ST_TO_ADDR
// break ;
47671: GO 47675
// end ;
47673: GO 47636
47675: POP
47676: POP
// end ;
47677: LD_VAR 0 3
47681: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
47682: LD_INT 0
47684: PPUSH
47685: PPUSH
47686: PPUSH
// pom := GetBase ( fac ) ;
47687: LD_ADDR_VAR 0 5
47691: PUSH
47692: LD_VAR 0 1
47696: PPUSH
47697: CALL_OW 274
47701: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
47702: LD_ADDR_VAR 0 4
47706: PUSH
47707: LD_VAR 0 2
47711: PUSH
47712: LD_INT 1
47714: ARRAY
47715: PPUSH
47716: LD_VAR 0 2
47720: PUSH
47721: LD_INT 2
47723: ARRAY
47724: PPUSH
47725: LD_VAR 0 2
47729: PUSH
47730: LD_INT 3
47732: ARRAY
47733: PPUSH
47734: LD_VAR 0 2
47738: PUSH
47739: LD_INT 4
47741: ARRAY
47742: PPUSH
47743: CALL_OW 449
47747: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47748: LD_ADDR_VAR 0 3
47752: PUSH
47753: LD_VAR 0 5
47757: PPUSH
47758: LD_INT 1
47760: PPUSH
47761: CALL_OW 275
47765: PUSH
47766: LD_VAR 0 4
47770: PUSH
47771: LD_INT 1
47773: ARRAY
47774: GREATEREQUAL
47775: PUSH
47776: LD_VAR 0 5
47780: PPUSH
47781: LD_INT 2
47783: PPUSH
47784: CALL_OW 275
47788: PUSH
47789: LD_VAR 0 4
47793: PUSH
47794: LD_INT 2
47796: ARRAY
47797: GREATEREQUAL
47798: AND
47799: PUSH
47800: LD_VAR 0 5
47804: PPUSH
47805: LD_INT 3
47807: PPUSH
47808: CALL_OW 275
47812: PUSH
47813: LD_VAR 0 4
47817: PUSH
47818: LD_INT 3
47820: ARRAY
47821: GREATEREQUAL
47822: AND
47823: ST_TO_ADDR
// end ;
47824: LD_VAR 0 3
47828: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
47829: LD_INT 0
47831: PPUSH
47832: PPUSH
47833: PPUSH
47834: PPUSH
// pom := GetBase ( building ) ;
47835: LD_ADDR_VAR 0 3
47839: PUSH
47840: LD_VAR 0 1
47844: PPUSH
47845: CALL_OW 274
47849: ST_TO_ADDR
// if not pom then
47850: LD_VAR 0 3
47854: NOT
47855: IFFALSE 47859
// exit ;
47857: GO 48029
// btype := GetBType ( building ) ;
47859: LD_ADDR_VAR 0 5
47863: PUSH
47864: LD_VAR 0 1
47868: PPUSH
47869: CALL_OW 266
47873: ST_TO_ADDR
// if btype = b_armoury then
47874: LD_VAR 0 5
47878: PUSH
47879: LD_INT 4
47881: EQUAL
47882: IFFALSE 47892
// btype := b_barracks ;
47884: LD_ADDR_VAR 0 5
47888: PUSH
47889: LD_INT 5
47891: ST_TO_ADDR
// if btype = b_depot then
47892: LD_VAR 0 5
47896: PUSH
47897: LD_INT 0
47899: EQUAL
47900: IFFALSE 47910
// btype := b_warehouse ;
47902: LD_ADDR_VAR 0 5
47906: PUSH
47907: LD_INT 1
47909: ST_TO_ADDR
// if btype = b_workshop then
47910: LD_VAR 0 5
47914: PUSH
47915: LD_INT 2
47917: EQUAL
47918: IFFALSE 47928
// btype := b_factory ;
47920: LD_ADDR_VAR 0 5
47924: PUSH
47925: LD_INT 3
47927: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47928: LD_ADDR_VAR 0 4
47932: PUSH
47933: LD_VAR 0 5
47937: PPUSH
47938: LD_VAR 0 1
47942: PPUSH
47943: CALL_OW 248
47947: PPUSH
47948: CALL_OW 450
47952: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47953: LD_ADDR_VAR 0 2
47957: PUSH
47958: LD_VAR 0 3
47962: PPUSH
47963: LD_INT 1
47965: PPUSH
47966: CALL_OW 275
47970: PUSH
47971: LD_VAR 0 4
47975: PUSH
47976: LD_INT 1
47978: ARRAY
47979: GREATEREQUAL
47980: PUSH
47981: LD_VAR 0 3
47985: PPUSH
47986: LD_INT 2
47988: PPUSH
47989: CALL_OW 275
47993: PUSH
47994: LD_VAR 0 4
47998: PUSH
47999: LD_INT 2
48001: ARRAY
48002: GREATEREQUAL
48003: AND
48004: PUSH
48005: LD_VAR 0 3
48009: PPUSH
48010: LD_INT 3
48012: PPUSH
48013: CALL_OW 275
48017: PUSH
48018: LD_VAR 0 4
48022: PUSH
48023: LD_INT 3
48025: ARRAY
48026: GREATEREQUAL
48027: AND
48028: ST_TO_ADDR
// end ;
48029: LD_VAR 0 2
48033: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
48034: LD_INT 0
48036: PPUSH
48037: PPUSH
48038: PPUSH
// pom := GetBase ( building ) ;
48039: LD_ADDR_VAR 0 4
48043: PUSH
48044: LD_VAR 0 1
48048: PPUSH
48049: CALL_OW 274
48053: ST_TO_ADDR
// if not pom then
48054: LD_VAR 0 4
48058: NOT
48059: IFFALSE 48063
// exit ;
48061: GO 48164
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48063: LD_ADDR_VAR 0 5
48067: PUSH
48068: LD_VAR 0 2
48072: PPUSH
48073: LD_VAR 0 1
48077: PPUSH
48078: CALL_OW 248
48082: PPUSH
48083: CALL_OW 450
48087: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48088: LD_ADDR_VAR 0 3
48092: PUSH
48093: LD_VAR 0 4
48097: PPUSH
48098: LD_INT 1
48100: PPUSH
48101: CALL_OW 275
48105: PUSH
48106: LD_VAR 0 5
48110: PUSH
48111: LD_INT 1
48113: ARRAY
48114: GREATEREQUAL
48115: PUSH
48116: LD_VAR 0 4
48120: PPUSH
48121: LD_INT 2
48123: PPUSH
48124: CALL_OW 275
48128: PUSH
48129: LD_VAR 0 5
48133: PUSH
48134: LD_INT 2
48136: ARRAY
48137: GREATEREQUAL
48138: AND
48139: PUSH
48140: LD_VAR 0 4
48144: PPUSH
48145: LD_INT 3
48147: PPUSH
48148: CALL_OW 275
48152: PUSH
48153: LD_VAR 0 5
48157: PUSH
48158: LD_INT 3
48160: ARRAY
48161: GREATEREQUAL
48162: AND
48163: ST_TO_ADDR
// end ;
48164: LD_VAR 0 3
48168: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
48169: LD_INT 0
48171: PPUSH
48172: PPUSH
48173: PPUSH
48174: PPUSH
48175: PPUSH
48176: PPUSH
48177: PPUSH
48178: PPUSH
48179: PPUSH
48180: PPUSH
48181: PPUSH
// result := false ;
48182: LD_ADDR_VAR 0 8
48186: PUSH
48187: LD_INT 0
48189: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
48190: LD_VAR 0 5
48194: NOT
48195: PUSH
48196: LD_VAR 0 1
48200: NOT
48201: OR
48202: PUSH
48203: LD_VAR 0 2
48207: NOT
48208: OR
48209: PUSH
48210: LD_VAR 0 3
48214: NOT
48215: OR
48216: IFFALSE 48220
// exit ;
48218: GO 49034
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
48220: LD_ADDR_VAR 0 14
48224: PUSH
48225: LD_VAR 0 1
48229: PPUSH
48230: LD_VAR 0 2
48234: PPUSH
48235: LD_VAR 0 3
48239: PPUSH
48240: LD_VAR 0 4
48244: PPUSH
48245: LD_VAR 0 5
48249: PUSH
48250: LD_INT 1
48252: ARRAY
48253: PPUSH
48254: CALL_OW 248
48258: PPUSH
48259: LD_INT 0
48261: PPUSH
48262: CALL 50271 0 6
48266: ST_TO_ADDR
// if not hexes then
48267: LD_VAR 0 14
48271: NOT
48272: IFFALSE 48276
// exit ;
48274: GO 49034
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
48276: LD_ADDR_VAR 0 17
48280: PUSH
48281: LD_VAR 0 5
48285: PPUSH
48286: LD_INT 22
48288: PUSH
48289: LD_VAR 0 13
48293: PPUSH
48294: CALL_OW 255
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 2
48305: PUSH
48306: LD_INT 30
48308: PUSH
48309: LD_INT 0
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: PUSH
48316: LD_INT 30
48318: PUSH
48319: LD_INT 1
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: LIST
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PPUSH
48335: CALL_OW 72
48339: ST_TO_ADDR
// for i = 1 to hexes do
48340: LD_ADDR_VAR 0 9
48344: PUSH
48345: DOUBLE
48346: LD_INT 1
48348: DEC
48349: ST_TO_ADDR
48350: LD_VAR 0 14
48354: PUSH
48355: FOR_TO
48356: IFFALSE 49032
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48358: LD_ADDR_VAR 0 13
48362: PUSH
48363: LD_VAR 0 14
48367: PUSH
48368: LD_VAR 0 9
48372: ARRAY
48373: PUSH
48374: LD_INT 1
48376: ARRAY
48377: PPUSH
48378: LD_VAR 0 14
48382: PUSH
48383: LD_VAR 0 9
48387: ARRAY
48388: PUSH
48389: LD_INT 2
48391: ARRAY
48392: PPUSH
48393: CALL_OW 428
48397: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
48398: LD_VAR 0 14
48402: PUSH
48403: LD_VAR 0 9
48407: ARRAY
48408: PUSH
48409: LD_INT 1
48411: ARRAY
48412: PPUSH
48413: LD_VAR 0 14
48417: PUSH
48418: LD_VAR 0 9
48422: ARRAY
48423: PUSH
48424: LD_INT 2
48426: ARRAY
48427: PPUSH
48428: CALL_OW 351
48432: PUSH
48433: LD_VAR 0 14
48437: PUSH
48438: LD_VAR 0 9
48442: ARRAY
48443: PUSH
48444: LD_INT 1
48446: ARRAY
48447: PPUSH
48448: LD_VAR 0 14
48452: PUSH
48453: LD_VAR 0 9
48457: ARRAY
48458: PUSH
48459: LD_INT 2
48461: ARRAY
48462: PPUSH
48463: CALL_OW 488
48467: NOT
48468: OR
48469: PUSH
48470: LD_VAR 0 13
48474: PPUSH
48475: CALL_OW 247
48479: PUSH
48480: LD_INT 3
48482: EQUAL
48483: OR
48484: IFFALSE 48490
// exit ;
48486: POP
48487: POP
48488: GO 49034
// if not tmp then
48490: LD_VAR 0 13
48494: NOT
48495: IFFALSE 48499
// continue ;
48497: GO 48355
// result := true ;
48499: LD_ADDR_VAR 0 8
48503: PUSH
48504: LD_INT 1
48506: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
48507: LD_VAR 0 6
48511: PUSH
48512: LD_VAR 0 13
48516: PPUSH
48517: CALL_OW 247
48521: PUSH
48522: LD_INT 2
48524: EQUAL
48525: AND
48526: PUSH
48527: LD_VAR 0 13
48531: PPUSH
48532: CALL_OW 263
48536: PUSH
48537: LD_INT 1
48539: EQUAL
48540: AND
48541: IFFALSE 48705
// begin if IsDrivenBy ( tmp ) then
48543: LD_VAR 0 13
48547: PPUSH
48548: CALL_OW 311
48552: IFFALSE 48556
// continue ;
48554: GO 48355
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
48556: LD_VAR 0 6
48560: PPUSH
48561: LD_INT 3
48563: PUSH
48564: LD_INT 60
48566: PUSH
48567: EMPTY
48568: LIST
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 3
48576: PUSH
48577: LD_INT 55
48579: PUSH
48580: EMPTY
48581: LIST
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PPUSH
48591: CALL_OW 72
48595: IFFALSE 48703
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
48597: LD_ADDR_VAR 0 18
48601: PUSH
48602: LD_VAR 0 6
48606: PPUSH
48607: LD_INT 3
48609: PUSH
48610: LD_INT 60
48612: PUSH
48613: EMPTY
48614: LIST
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: LD_INT 3
48622: PUSH
48623: LD_INT 55
48625: PUSH
48626: EMPTY
48627: LIST
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PPUSH
48637: CALL_OW 72
48641: PUSH
48642: LD_INT 1
48644: ARRAY
48645: ST_TO_ADDR
// if IsInUnit ( driver ) then
48646: LD_VAR 0 18
48650: PPUSH
48651: CALL_OW 310
48655: IFFALSE 48666
// ComExit ( driver ) ;
48657: LD_VAR 0 18
48661: PPUSH
48662: CALL 73455 0 1
// AddComEnterUnit ( driver , tmp ) ;
48666: LD_VAR 0 18
48670: PPUSH
48671: LD_VAR 0 13
48675: PPUSH
48676: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
48680: LD_VAR 0 18
48684: PPUSH
48685: LD_VAR 0 7
48689: PPUSH
48690: CALL_OW 173
// AddComExitVehicle ( driver ) ;
48694: LD_VAR 0 18
48698: PPUSH
48699: CALL_OW 181
// end ; continue ;
48703: GO 48355
// end ; if not cleaners or not tmp in cleaners then
48705: LD_VAR 0 6
48709: NOT
48710: PUSH
48711: LD_VAR 0 13
48715: PUSH
48716: LD_VAR 0 6
48720: IN
48721: NOT
48722: OR
48723: IFFALSE 49030
// begin if dep then
48725: LD_VAR 0 17
48729: IFFALSE 48865
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
48731: LD_ADDR_VAR 0 16
48735: PUSH
48736: LD_VAR 0 17
48740: PUSH
48741: LD_INT 1
48743: ARRAY
48744: PPUSH
48745: CALL_OW 250
48749: PPUSH
48750: LD_VAR 0 17
48754: PUSH
48755: LD_INT 1
48757: ARRAY
48758: PPUSH
48759: CALL_OW 254
48763: PPUSH
48764: LD_INT 5
48766: PPUSH
48767: CALL_OW 272
48771: PUSH
48772: LD_VAR 0 17
48776: PUSH
48777: LD_INT 1
48779: ARRAY
48780: PPUSH
48781: CALL_OW 251
48785: PPUSH
48786: LD_VAR 0 17
48790: PUSH
48791: LD_INT 1
48793: ARRAY
48794: PPUSH
48795: CALL_OW 254
48799: PPUSH
48800: LD_INT 5
48802: PPUSH
48803: CALL_OW 273
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
48812: LD_VAR 0 16
48816: PUSH
48817: LD_INT 1
48819: ARRAY
48820: PPUSH
48821: LD_VAR 0 16
48825: PUSH
48826: LD_INT 2
48828: ARRAY
48829: PPUSH
48830: CALL_OW 488
48834: IFFALSE 48865
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
48836: LD_VAR 0 13
48840: PPUSH
48841: LD_VAR 0 16
48845: PUSH
48846: LD_INT 1
48848: ARRAY
48849: PPUSH
48850: LD_VAR 0 16
48854: PUSH
48855: LD_INT 2
48857: ARRAY
48858: PPUSH
48859: CALL_OW 111
// continue ;
48863: GO 48355
// end ; end ; r := GetDir ( tmp ) ;
48865: LD_ADDR_VAR 0 15
48869: PUSH
48870: LD_VAR 0 13
48874: PPUSH
48875: CALL_OW 254
48879: ST_TO_ADDR
// if r = 5 then
48880: LD_VAR 0 15
48884: PUSH
48885: LD_INT 5
48887: EQUAL
48888: IFFALSE 48898
// r := 0 ;
48890: LD_ADDR_VAR 0 15
48894: PUSH
48895: LD_INT 0
48897: ST_TO_ADDR
// for j = r to 5 do
48898: LD_ADDR_VAR 0 10
48902: PUSH
48903: DOUBLE
48904: LD_VAR 0 15
48908: DEC
48909: ST_TO_ADDR
48910: LD_INT 5
48912: PUSH
48913: FOR_TO
48914: IFFALSE 49028
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
48916: LD_ADDR_VAR 0 11
48920: PUSH
48921: LD_VAR 0 13
48925: PPUSH
48926: CALL_OW 250
48930: PPUSH
48931: LD_VAR 0 10
48935: PPUSH
48936: LD_INT 2
48938: PPUSH
48939: CALL_OW 272
48943: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
48944: LD_ADDR_VAR 0 12
48948: PUSH
48949: LD_VAR 0 13
48953: PPUSH
48954: CALL_OW 251
48958: PPUSH
48959: LD_VAR 0 10
48963: PPUSH
48964: LD_INT 2
48966: PPUSH
48967: CALL_OW 273
48971: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
48972: LD_VAR 0 11
48976: PPUSH
48977: LD_VAR 0 12
48981: PPUSH
48982: CALL_OW 488
48986: PUSH
48987: LD_VAR 0 11
48991: PPUSH
48992: LD_VAR 0 12
48996: PPUSH
48997: CALL_OW 428
49001: NOT
49002: AND
49003: IFFALSE 49026
// begin ComMoveXY ( tmp , _x , _y ) ;
49005: LD_VAR 0 13
49009: PPUSH
49010: LD_VAR 0 11
49014: PPUSH
49015: LD_VAR 0 12
49019: PPUSH
49020: CALL_OW 111
// break ;
49024: GO 49028
// end ; end ;
49026: GO 48913
49028: POP
49029: POP
// end ; end ;
49030: GO 48355
49032: POP
49033: POP
// end ;
49034: LD_VAR 0 8
49038: RET
// export function BuildingTechInvented ( side , btype ) ; begin
49039: LD_INT 0
49041: PPUSH
// result := true ;
49042: LD_ADDR_VAR 0 3
49046: PUSH
49047: LD_INT 1
49049: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
49050: LD_VAR 0 2
49054: PUSH
49055: LD_INT 24
49057: DOUBLE
49058: EQUAL
49059: IFTRUE 49069
49061: LD_INT 33
49063: DOUBLE
49064: EQUAL
49065: IFTRUE 49069
49067: GO 49094
49069: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
49070: LD_ADDR_VAR 0 3
49074: PUSH
49075: LD_INT 32
49077: PPUSH
49078: LD_VAR 0 1
49082: PPUSH
49083: CALL_OW 321
49087: PUSH
49088: LD_INT 2
49090: EQUAL
49091: ST_TO_ADDR
49092: GO 49414
49094: LD_INT 20
49096: DOUBLE
49097: EQUAL
49098: IFTRUE 49102
49100: GO 49127
49102: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
49103: LD_ADDR_VAR 0 3
49107: PUSH
49108: LD_INT 6
49110: PPUSH
49111: LD_VAR 0 1
49115: PPUSH
49116: CALL_OW 321
49120: PUSH
49121: LD_INT 2
49123: EQUAL
49124: ST_TO_ADDR
49125: GO 49414
49127: LD_INT 22
49129: DOUBLE
49130: EQUAL
49131: IFTRUE 49141
49133: LD_INT 36
49135: DOUBLE
49136: EQUAL
49137: IFTRUE 49141
49139: GO 49166
49141: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
49142: LD_ADDR_VAR 0 3
49146: PUSH
49147: LD_INT 15
49149: PPUSH
49150: LD_VAR 0 1
49154: PPUSH
49155: CALL_OW 321
49159: PUSH
49160: LD_INT 2
49162: EQUAL
49163: ST_TO_ADDR
49164: GO 49414
49166: LD_INT 30
49168: DOUBLE
49169: EQUAL
49170: IFTRUE 49174
49172: GO 49199
49174: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
49175: LD_ADDR_VAR 0 3
49179: PUSH
49180: LD_INT 20
49182: PPUSH
49183: LD_VAR 0 1
49187: PPUSH
49188: CALL_OW 321
49192: PUSH
49193: LD_INT 2
49195: EQUAL
49196: ST_TO_ADDR
49197: GO 49414
49199: LD_INT 28
49201: DOUBLE
49202: EQUAL
49203: IFTRUE 49213
49205: LD_INT 21
49207: DOUBLE
49208: EQUAL
49209: IFTRUE 49213
49211: GO 49238
49213: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
49214: LD_ADDR_VAR 0 3
49218: PUSH
49219: LD_INT 21
49221: PPUSH
49222: LD_VAR 0 1
49226: PPUSH
49227: CALL_OW 321
49231: PUSH
49232: LD_INT 2
49234: EQUAL
49235: ST_TO_ADDR
49236: GO 49414
49238: LD_INT 16
49240: DOUBLE
49241: EQUAL
49242: IFTRUE 49246
49244: GO 49273
49246: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
49247: LD_ADDR_VAR 0 3
49251: PUSH
49252: LD_EXP 70
49256: PPUSH
49257: LD_VAR 0 1
49261: PPUSH
49262: CALL_OW 321
49266: PUSH
49267: LD_INT 2
49269: EQUAL
49270: ST_TO_ADDR
49271: GO 49414
49273: LD_INT 19
49275: DOUBLE
49276: EQUAL
49277: IFTRUE 49287
49279: LD_INT 23
49281: DOUBLE
49282: EQUAL
49283: IFTRUE 49287
49285: GO 49314
49287: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
49288: LD_ADDR_VAR 0 3
49292: PUSH
49293: LD_EXP 69
49297: PPUSH
49298: LD_VAR 0 1
49302: PPUSH
49303: CALL_OW 321
49307: PUSH
49308: LD_INT 2
49310: EQUAL
49311: ST_TO_ADDR
49312: GO 49414
49314: LD_INT 17
49316: DOUBLE
49317: EQUAL
49318: IFTRUE 49322
49320: GO 49347
49322: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
49323: LD_ADDR_VAR 0 3
49327: PUSH
49328: LD_INT 39
49330: PPUSH
49331: LD_VAR 0 1
49335: PPUSH
49336: CALL_OW 321
49340: PUSH
49341: LD_INT 2
49343: EQUAL
49344: ST_TO_ADDR
49345: GO 49414
49347: LD_INT 18
49349: DOUBLE
49350: EQUAL
49351: IFTRUE 49355
49353: GO 49380
49355: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
49356: LD_ADDR_VAR 0 3
49360: PUSH
49361: LD_INT 40
49363: PPUSH
49364: LD_VAR 0 1
49368: PPUSH
49369: CALL_OW 321
49373: PUSH
49374: LD_INT 2
49376: EQUAL
49377: ST_TO_ADDR
49378: GO 49414
49380: LD_INT 27
49382: DOUBLE
49383: EQUAL
49384: IFTRUE 49388
49386: GO 49413
49388: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
49389: LD_ADDR_VAR 0 3
49393: PUSH
49394: LD_INT 35
49396: PPUSH
49397: LD_VAR 0 1
49401: PPUSH
49402: CALL_OW 321
49406: PUSH
49407: LD_INT 2
49409: EQUAL
49410: ST_TO_ADDR
49411: GO 49414
49413: POP
// end ;
49414: LD_VAR 0 3
49418: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
49419: LD_INT 0
49421: PPUSH
49422: PPUSH
49423: PPUSH
49424: PPUSH
49425: PPUSH
49426: PPUSH
49427: PPUSH
49428: PPUSH
49429: PPUSH
49430: PPUSH
49431: PPUSH
// result := false ;
49432: LD_ADDR_VAR 0 6
49436: PUSH
49437: LD_INT 0
49439: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
49440: LD_VAR 0 1
49444: NOT
49445: PUSH
49446: LD_VAR 0 1
49450: PPUSH
49451: CALL_OW 266
49455: PUSH
49456: LD_INT 0
49458: PUSH
49459: LD_INT 1
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: IN
49466: NOT
49467: OR
49468: PUSH
49469: LD_VAR 0 2
49473: NOT
49474: OR
49475: PUSH
49476: LD_VAR 0 5
49480: PUSH
49481: LD_INT 0
49483: PUSH
49484: LD_INT 1
49486: PUSH
49487: LD_INT 2
49489: PUSH
49490: LD_INT 3
49492: PUSH
49493: LD_INT 4
49495: PUSH
49496: LD_INT 5
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: IN
49507: NOT
49508: OR
49509: PUSH
49510: LD_VAR 0 3
49514: PPUSH
49515: LD_VAR 0 4
49519: PPUSH
49520: CALL_OW 488
49524: NOT
49525: OR
49526: IFFALSE 49530
// exit ;
49528: GO 50266
// side := GetSide ( depot ) ;
49530: LD_ADDR_VAR 0 9
49534: PUSH
49535: LD_VAR 0 1
49539: PPUSH
49540: CALL_OW 255
49544: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
49545: LD_VAR 0 9
49549: PPUSH
49550: LD_VAR 0 2
49554: PPUSH
49555: CALL 49039 0 2
49559: NOT
49560: IFFALSE 49564
// exit ;
49562: GO 50266
// pom := GetBase ( depot ) ;
49564: LD_ADDR_VAR 0 10
49568: PUSH
49569: LD_VAR 0 1
49573: PPUSH
49574: CALL_OW 274
49578: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
49579: LD_ADDR_VAR 0 11
49583: PUSH
49584: LD_VAR 0 2
49588: PPUSH
49589: LD_VAR 0 1
49593: PPUSH
49594: CALL_OW 248
49598: PPUSH
49599: CALL_OW 450
49603: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
49604: LD_VAR 0 10
49608: PPUSH
49609: LD_INT 1
49611: PPUSH
49612: CALL_OW 275
49616: PUSH
49617: LD_VAR 0 11
49621: PUSH
49622: LD_INT 1
49624: ARRAY
49625: GREATEREQUAL
49626: PUSH
49627: LD_VAR 0 10
49631: PPUSH
49632: LD_INT 2
49634: PPUSH
49635: CALL_OW 275
49639: PUSH
49640: LD_VAR 0 11
49644: PUSH
49645: LD_INT 2
49647: ARRAY
49648: GREATEREQUAL
49649: AND
49650: PUSH
49651: LD_VAR 0 10
49655: PPUSH
49656: LD_INT 3
49658: PPUSH
49659: CALL_OW 275
49663: PUSH
49664: LD_VAR 0 11
49668: PUSH
49669: LD_INT 3
49671: ARRAY
49672: GREATEREQUAL
49673: AND
49674: NOT
49675: IFFALSE 49679
// exit ;
49677: GO 50266
// if GetBType ( depot ) = b_depot then
49679: LD_VAR 0 1
49683: PPUSH
49684: CALL_OW 266
49688: PUSH
49689: LD_INT 0
49691: EQUAL
49692: IFFALSE 49704
// dist := 28 else
49694: LD_ADDR_VAR 0 14
49698: PUSH
49699: LD_INT 28
49701: ST_TO_ADDR
49702: GO 49712
// dist := 36 ;
49704: LD_ADDR_VAR 0 14
49708: PUSH
49709: LD_INT 36
49711: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
49712: LD_VAR 0 1
49716: PPUSH
49717: LD_VAR 0 3
49721: PPUSH
49722: LD_VAR 0 4
49726: PPUSH
49727: CALL_OW 297
49731: PUSH
49732: LD_VAR 0 14
49736: GREATER
49737: IFFALSE 49741
// exit ;
49739: GO 50266
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
49741: LD_ADDR_VAR 0 12
49745: PUSH
49746: LD_VAR 0 2
49750: PPUSH
49751: LD_VAR 0 3
49755: PPUSH
49756: LD_VAR 0 4
49760: PPUSH
49761: LD_VAR 0 5
49765: PPUSH
49766: LD_VAR 0 1
49770: PPUSH
49771: CALL_OW 248
49775: PPUSH
49776: LD_INT 0
49778: PPUSH
49779: CALL 50271 0 6
49783: ST_TO_ADDR
// if not hexes then
49784: LD_VAR 0 12
49788: NOT
49789: IFFALSE 49793
// exit ;
49791: GO 50266
// hex := GetHexInfo ( x , y ) ;
49793: LD_ADDR_VAR 0 15
49797: PUSH
49798: LD_VAR 0 3
49802: PPUSH
49803: LD_VAR 0 4
49807: PPUSH
49808: CALL_OW 546
49812: ST_TO_ADDR
// if hex [ 1 ] then
49813: LD_VAR 0 15
49817: PUSH
49818: LD_INT 1
49820: ARRAY
49821: IFFALSE 49825
// exit ;
49823: GO 50266
// height := hex [ 2 ] ;
49825: LD_ADDR_VAR 0 13
49829: PUSH
49830: LD_VAR 0 15
49834: PUSH
49835: LD_INT 2
49837: ARRAY
49838: ST_TO_ADDR
// for i = 1 to hexes do
49839: LD_ADDR_VAR 0 7
49843: PUSH
49844: DOUBLE
49845: LD_INT 1
49847: DEC
49848: ST_TO_ADDR
49849: LD_VAR 0 12
49853: PUSH
49854: FOR_TO
49855: IFFALSE 50185
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
49857: LD_VAR 0 12
49861: PUSH
49862: LD_VAR 0 7
49866: ARRAY
49867: PUSH
49868: LD_INT 1
49870: ARRAY
49871: PPUSH
49872: LD_VAR 0 12
49876: PUSH
49877: LD_VAR 0 7
49881: ARRAY
49882: PUSH
49883: LD_INT 2
49885: ARRAY
49886: PPUSH
49887: CALL_OW 488
49891: NOT
49892: PUSH
49893: LD_VAR 0 12
49897: PUSH
49898: LD_VAR 0 7
49902: ARRAY
49903: PUSH
49904: LD_INT 1
49906: ARRAY
49907: PPUSH
49908: LD_VAR 0 12
49912: PUSH
49913: LD_VAR 0 7
49917: ARRAY
49918: PUSH
49919: LD_INT 2
49921: ARRAY
49922: PPUSH
49923: CALL_OW 428
49927: PUSH
49928: LD_INT 0
49930: GREATER
49931: OR
49932: PUSH
49933: LD_VAR 0 12
49937: PUSH
49938: LD_VAR 0 7
49942: ARRAY
49943: PUSH
49944: LD_INT 1
49946: ARRAY
49947: PPUSH
49948: LD_VAR 0 12
49952: PUSH
49953: LD_VAR 0 7
49957: ARRAY
49958: PUSH
49959: LD_INT 2
49961: ARRAY
49962: PPUSH
49963: CALL_OW 351
49967: OR
49968: IFFALSE 49974
// exit ;
49970: POP
49971: POP
49972: GO 50266
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49974: LD_ADDR_VAR 0 8
49978: PUSH
49979: LD_VAR 0 12
49983: PUSH
49984: LD_VAR 0 7
49988: ARRAY
49989: PUSH
49990: LD_INT 1
49992: ARRAY
49993: PPUSH
49994: LD_VAR 0 12
49998: PUSH
49999: LD_VAR 0 7
50003: ARRAY
50004: PUSH
50005: LD_INT 2
50007: ARRAY
50008: PPUSH
50009: CALL_OW 546
50013: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
50014: LD_VAR 0 8
50018: PUSH
50019: LD_INT 1
50021: ARRAY
50022: PUSH
50023: LD_VAR 0 8
50027: PUSH
50028: LD_INT 2
50030: ARRAY
50031: PUSH
50032: LD_VAR 0 13
50036: PUSH
50037: LD_INT 2
50039: PLUS
50040: GREATER
50041: OR
50042: PUSH
50043: LD_VAR 0 8
50047: PUSH
50048: LD_INT 2
50050: ARRAY
50051: PUSH
50052: LD_VAR 0 13
50056: PUSH
50057: LD_INT 2
50059: MINUS
50060: LESS
50061: OR
50062: PUSH
50063: LD_VAR 0 8
50067: PUSH
50068: LD_INT 3
50070: ARRAY
50071: PUSH
50072: LD_INT 0
50074: PUSH
50075: LD_INT 8
50077: PUSH
50078: LD_INT 9
50080: PUSH
50081: LD_INT 10
50083: PUSH
50084: LD_INT 11
50086: PUSH
50087: LD_INT 12
50089: PUSH
50090: LD_INT 13
50092: PUSH
50093: LD_INT 16
50095: PUSH
50096: LD_INT 17
50098: PUSH
50099: LD_INT 18
50101: PUSH
50102: LD_INT 19
50104: PUSH
50105: LD_INT 20
50107: PUSH
50108: LD_INT 21
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: IN
50126: NOT
50127: OR
50128: PUSH
50129: LD_VAR 0 8
50133: PUSH
50134: LD_INT 5
50136: ARRAY
50137: NOT
50138: OR
50139: PUSH
50140: LD_VAR 0 8
50144: PUSH
50145: LD_INT 6
50147: ARRAY
50148: PUSH
50149: LD_INT 1
50151: PUSH
50152: LD_INT 2
50154: PUSH
50155: LD_INT 7
50157: PUSH
50158: LD_INT 9
50160: PUSH
50161: LD_INT 10
50163: PUSH
50164: LD_INT 11
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: LIST
50171: LIST
50172: LIST
50173: LIST
50174: IN
50175: NOT
50176: OR
50177: IFFALSE 50183
// exit ;
50179: POP
50180: POP
50181: GO 50266
// end ;
50183: GO 49854
50185: POP
50186: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
50187: LD_VAR 0 9
50191: PPUSH
50192: LD_VAR 0 3
50196: PPUSH
50197: LD_VAR 0 4
50201: PPUSH
50202: LD_INT 20
50204: PPUSH
50205: CALL 42212 0 4
50209: PUSH
50210: LD_INT 4
50212: ARRAY
50213: IFFALSE 50217
// exit ;
50215: GO 50266
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
50217: LD_VAR 0 2
50221: PUSH
50222: LD_INT 29
50224: PUSH
50225: LD_INT 30
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: IN
50232: PUSH
50233: LD_VAR 0 3
50237: PPUSH
50238: LD_VAR 0 4
50242: PPUSH
50243: LD_VAR 0 9
50247: PPUSH
50248: CALL_OW 440
50252: NOT
50253: AND
50254: IFFALSE 50258
// exit ;
50256: GO 50266
// result := true ;
50258: LD_ADDR_VAR 0 6
50262: PUSH
50263: LD_INT 1
50265: ST_TO_ADDR
// end ;
50266: LD_VAR 0 6
50270: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
50271: LD_INT 0
50273: PPUSH
50274: PPUSH
50275: PPUSH
50276: PPUSH
50277: PPUSH
50278: PPUSH
50279: PPUSH
50280: PPUSH
50281: PPUSH
50282: PPUSH
50283: PPUSH
50284: PPUSH
50285: PPUSH
50286: PPUSH
50287: PPUSH
50288: PPUSH
50289: PPUSH
50290: PPUSH
50291: PPUSH
50292: PPUSH
50293: PPUSH
50294: PPUSH
50295: PPUSH
50296: PPUSH
50297: PPUSH
50298: PPUSH
50299: PPUSH
50300: PPUSH
50301: PPUSH
50302: PPUSH
50303: PPUSH
50304: PPUSH
50305: PPUSH
50306: PPUSH
50307: PPUSH
50308: PPUSH
50309: PPUSH
50310: PPUSH
50311: PPUSH
50312: PPUSH
50313: PPUSH
50314: PPUSH
50315: PPUSH
50316: PPUSH
50317: PPUSH
50318: PPUSH
50319: PPUSH
50320: PPUSH
50321: PPUSH
50322: PPUSH
50323: PPUSH
50324: PPUSH
50325: PPUSH
50326: PPUSH
50327: PPUSH
50328: PPUSH
50329: PPUSH
50330: PPUSH
// result = [ ] ;
50331: LD_ADDR_VAR 0 7
50335: PUSH
50336: EMPTY
50337: ST_TO_ADDR
// temp_list = [ ] ;
50338: LD_ADDR_VAR 0 9
50342: PUSH
50343: EMPTY
50344: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
50345: LD_VAR 0 4
50349: PUSH
50350: LD_INT 0
50352: PUSH
50353: LD_INT 1
50355: PUSH
50356: LD_INT 2
50358: PUSH
50359: LD_INT 3
50361: PUSH
50362: LD_INT 4
50364: PUSH
50365: LD_INT 5
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: LIST
50374: LIST
50375: IN
50376: NOT
50377: PUSH
50378: LD_VAR 0 1
50382: PUSH
50383: LD_INT 0
50385: PUSH
50386: LD_INT 1
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: IN
50393: PUSH
50394: LD_VAR 0 5
50398: PUSH
50399: LD_INT 1
50401: PUSH
50402: LD_INT 2
50404: PUSH
50405: LD_INT 3
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: LIST
50412: IN
50413: NOT
50414: AND
50415: OR
50416: IFFALSE 50420
// exit ;
50418: GO 68811
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
50420: LD_VAR 0 1
50424: PUSH
50425: LD_INT 6
50427: PUSH
50428: LD_INT 7
50430: PUSH
50431: LD_INT 8
50433: PUSH
50434: LD_INT 13
50436: PUSH
50437: LD_INT 12
50439: PUSH
50440: LD_INT 15
50442: PUSH
50443: LD_INT 11
50445: PUSH
50446: LD_INT 14
50448: PUSH
50449: LD_INT 10
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: IN
50463: IFFALSE 50473
// btype = b_lab ;
50465: LD_ADDR_VAR 0 1
50469: PUSH
50470: LD_INT 6
50472: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
50473: LD_VAR 0 6
50477: PUSH
50478: LD_INT 0
50480: PUSH
50481: LD_INT 1
50483: PUSH
50484: LD_INT 2
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: LIST
50491: IN
50492: NOT
50493: PUSH
50494: LD_VAR 0 1
50498: PUSH
50499: LD_INT 0
50501: PUSH
50502: LD_INT 1
50504: PUSH
50505: LD_INT 2
50507: PUSH
50508: LD_INT 3
50510: PUSH
50511: LD_INT 6
50513: PUSH
50514: LD_INT 36
50516: PUSH
50517: LD_INT 4
50519: PUSH
50520: LD_INT 5
50522: PUSH
50523: LD_INT 31
50525: PUSH
50526: LD_INT 32
50528: PUSH
50529: LD_INT 33
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: IN
50545: NOT
50546: PUSH
50547: LD_VAR 0 6
50551: PUSH
50552: LD_INT 1
50554: EQUAL
50555: AND
50556: OR
50557: PUSH
50558: LD_VAR 0 1
50562: PUSH
50563: LD_INT 2
50565: PUSH
50566: LD_INT 3
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: IN
50573: NOT
50574: PUSH
50575: LD_VAR 0 6
50579: PUSH
50580: LD_INT 2
50582: EQUAL
50583: AND
50584: OR
50585: IFFALSE 50595
// mode = 0 ;
50587: LD_ADDR_VAR 0 6
50591: PUSH
50592: LD_INT 0
50594: ST_TO_ADDR
// case mode of 0 :
50595: LD_VAR 0 6
50599: PUSH
50600: LD_INT 0
50602: DOUBLE
50603: EQUAL
50604: IFTRUE 50608
50606: GO 62061
50608: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50609: LD_ADDR_VAR 0 11
50613: PUSH
50614: LD_INT 0
50616: PUSH
50617: LD_INT 0
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 0
50626: PUSH
50627: LD_INT 1
50629: NEG
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PUSH
50635: LD_INT 1
50637: PUSH
50638: LD_INT 0
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 1
50647: PUSH
50648: LD_INT 1
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 0
50657: PUSH
50658: LD_INT 1
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: LD_INT 1
50667: NEG
50668: PUSH
50669: LD_INT 0
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 1
50678: NEG
50679: PUSH
50680: LD_INT 1
50682: NEG
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 1
50690: NEG
50691: PUSH
50692: LD_INT 2
50694: NEG
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 0
50702: PUSH
50703: LD_INT 2
50705: NEG
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 1
50713: PUSH
50714: LD_INT 1
50716: NEG
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 1
50724: PUSH
50725: LD_INT 2
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 0
50734: PUSH
50735: LD_INT 2
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 1
50744: NEG
50745: PUSH
50746: LD_INT 1
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 1
50755: PUSH
50756: LD_INT 3
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 0
50765: PUSH
50766: LD_INT 3
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 1
50775: NEG
50776: PUSH
50777: LD_INT 2
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50802: LD_ADDR_VAR 0 12
50806: PUSH
50807: LD_INT 0
50809: PUSH
50810: LD_INT 0
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: LD_INT 0
50819: PUSH
50820: LD_INT 1
50822: NEG
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: LD_INT 1
50830: PUSH
50831: LD_INT 0
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: PUSH
50838: LD_INT 1
50840: PUSH
50841: LD_INT 1
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 0
50850: PUSH
50851: LD_INT 1
50853: PUSH
50854: EMPTY
50855: LIST
50856: LIST
50857: PUSH
50858: LD_INT 1
50860: NEG
50861: PUSH
50862: LD_INT 0
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: LD_INT 1
50871: NEG
50872: PUSH
50873: LD_INT 1
50875: NEG
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 1
50883: PUSH
50884: LD_INT 1
50886: NEG
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 2
50894: PUSH
50895: LD_INT 0
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: LD_INT 2
50904: PUSH
50905: LD_INT 1
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 1
50914: NEG
50915: PUSH
50916: LD_INT 1
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: LD_INT 2
50925: NEG
50926: PUSH
50927: LD_INT 0
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: PUSH
50934: LD_INT 2
50936: NEG
50937: PUSH
50938: LD_INT 1
50940: NEG
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 2
50948: NEG
50949: PUSH
50950: LD_INT 1
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: LD_INT 3
50959: NEG
50960: PUSH
50961: LD_INT 0
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 3
50970: NEG
50971: PUSH
50972: LD_INT 1
50974: NEG
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: LIST
50997: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50998: LD_ADDR_VAR 0 13
51002: PUSH
51003: LD_INT 0
51005: PUSH
51006: LD_INT 0
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: LD_INT 0
51015: PUSH
51016: LD_INT 1
51018: NEG
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: LD_INT 1
51026: PUSH
51027: LD_INT 0
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 1
51036: PUSH
51037: LD_INT 1
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: PUSH
51044: LD_INT 0
51046: PUSH
51047: LD_INT 1
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: LD_INT 1
51056: NEG
51057: PUSH
51058: LD_INT 0
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 1
51067: NEG
51068: PUSH
51069: LD_INT 1
51071: NEG
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: LD_INT 1
51079: NEG
51080: PUSH
51081: LD_INT 2
51083: NEG
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 2
51091: PUSH
51092: LD_INT 1
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 2
51101: PUSH
51102: LD_INT 2
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 1
51111: PUSH
51112: LD_INT 2
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 2
51121: NEG
51122: PUSH
51123: LD_INT 1
51125: NEG
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 2
51133: NEG
51134: PUSH
51135: LD_INT 2
51137: NEG
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 2
51145: NEG
51146: PUSH
51147: LD_INT 3
51149: NEG
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 3
51157: NEG
51158: PUSH
51159: LD_INT 2
51161: NEG
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 3
51169: NEG
51170: PUSH
51171: LD_INT 3
51173: NEG
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: LIST
51183: LIST
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: LIST
51196: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51197: LD_ADDR_VAR 0 14
51201: PUSH
51202: LD_INT 0
51204: PUSH
51205: LD_INT 0
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 0
51214: PUSH
51215: LD_INT 1
51217: NEG
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 1
51225: PUSH
51226: LD_INT 0
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 1
51235: PUSH
51236: LD_INT 1
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 0
51245: PUSH
51246: LD_INT 1
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 1
51255: NEG
51256: PUSH
51257: LD_INT 0
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 1
51266: NEG
51267: PUSH
51268: LD_INT 1
51270: NEG
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 1
51278: NEG
51279: PUSH
51280: LD_INT 2
51282: NEG
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 0
51290: PUSH
51291: LD_INT 2
51293: NEG
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 1
51301: PUSH
51302: LD_INT 1
51304: NEG
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 1
51312: PUSH
51313: LD_INT 2
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: LD_INT 0
51322: PUSH
51323: LD_INT 2
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 1
51332: NEG
51333: PUSH
51334: LD_INT 1
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: PUSH
51341: LD_INT 1
51343: NEG
51344: PUSH
51345: LD_INT 3
51347: NEG
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 0
51355: PUSH
51356: LD_INT 3
51358: NEG
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: LD_INT 1
51366: PUSH
51367: LD_INT 2
51369: NEG
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51393: LD_ADDR_VAR 0 15
51397: PUSH
51398: LD_INT 0
51400: PUSH
51401: LD_INT 0
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 0
51410: PUSH
51411: LD_INT 1
51413: NEG
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 1
51421: PUSH
51422: LD_INT 0
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 1
51431: PUSH
51432: LD_INT 1
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 0
51441: PUSH
51442: LD_INT 1
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 1
51451: NEG
51452: PUSH
51453: LD_INT 0
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 1
51462: NEG
51463: PUSH
51464: LD_INT 1
51466: NEG
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 1
51474: PUSH
51475: LD_INT 1
51477: NEG
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 2
51485: PUSH
51486: LD_INT 0
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 2
51495: PUSH
51496: LD_INT 1
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 1
51505: NEG
51506: PUSH
51507: LD_INT 1
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 2
51516: NEG
51517: PUSH
51518: LD_INT 0
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 2
51527: NEG
51528: PUSH
51529: LD_INT 1
51531: NEG
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: LD_INT 2
51539: PUSH
51540: LD_INT 1
51542: NEG
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: LD_INT 3
51550: PUSH
51551: LD_INT 0
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 3
51560: PUSH
51561: LD_INT 1
51563: PUSH
51564: EMPTY
51565: LIST
51566: LIST
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51586: LD_ADDR_VAR 0 16
51590: PUSH
51591: LD_INT 0
51593: PUSH
51594: LD_INT 0
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: LD_INT 0
51603: PUSH
51604: LD_INT 1
51606: NEG
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 1
51614: PUSH
51615: LD_INT 0
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 1
51624: PUSH
51625: LD_INT 1
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 0
51634: PUSH
51635: LD_INT 1
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 1
51644: NEG
51645: PUSH
51646: LD_INT 0
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 1
51655: NEG
51656: PUSH
51657: LD_INT 1
51659: NEG
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 1
51667: NEG
51668: PUSH
51669: LD_INT 2
51671: NEG
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 2
51679: PUSH
51680: LD_INT 1
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 2
51689: PUSH
51690: LD_INT 2
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 1
51699: PUSH
51700: LD_INT 2
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 2
51709: NEG
51710: PUSH
51711: LD_INT 1
51713: NEG
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 2
51721: NEG
51722: PUSH
51723: LD_INT 2
51725: NEG
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 3
51733: PUSH
51734: LD_INT 2
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: LD_INT 3
51743: PUSH
51744: LD_INT 3
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: LD_INT 2
51753: PUSH
51754: LD_INT 3
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51779: LD_ADDR_VAR 0 17
51783: PUSH
51784: LD_INT 0
51786: PUSH
51787: LD_INT 0
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 0
51796: PUSH
51797: LD_INT 1
51799: NEG
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: LD_INT 1
51807: PUSH
51808: LD_INT 0
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 1
51817: PUSH
51818: LD_INT 1
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 0
51827: PUSH
51828: LD_INT 1
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: LD_INT 1
51837: NEG
51838: PUSH
51839: LD_INT 0
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: LD_INT 1
51848: NEG
51849: PUSH
51850: LD_INT 1
51852: NEG
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 1
51860: NEG
51861: PUSH
51862: LD_INT 2
51864: NEG
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 0
51872: PUSH
51873: LD_INT 2
51875: NEG
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: LD_INT 1
51883: PUSH
51884: LD_INT 1
51886: NEG
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 2
51894: PUSH
51895: LD_INT 0
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 2
51904: PUSH
51905: LD_INT 1
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 2
51914: PUSH
51915: LD_INT 2
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 1
51924: PUSH
51925: LD_INT 2
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 0
51934: PUSH
51935: LD_INT 2
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 1
51944: NEG
51945: PUSH
51946: LD_INT 1
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 2
51955: NEG
51956: PUSH
51957: LD_INT 0
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 2
51966: NEG
51967: PUSH
51968: LD_INT 1
51970: NEG
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 2
51978: NEG
51979: PUSH
51980: LD_INT 2
51982: NEG
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: LIST
52004: LIST
52005: LIST
52006: LIST
52007: LIST
52008: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52009: LD_ADDR_VAR 0 18
52013: PUSH
52014: LD_INT 0
52016: PUSH
52017: LD_INT 0
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: PUSH
52024: LD_INT 0
52026: PUSH
52027: LD_INT 1
52029: NEG
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 1
52037: PUSH
52038: LD_INT 0
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 1
52047: PUSH
52048: LD_INT 1
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 0
52057: PUSH
52058: LD_INT 1
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 1
52067: NEG
52068: PUSH
52069: LD_INT 0
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 1
52078: NEG
52079: PUSH
52080: LD_INT 1
52082: NEG
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 1
52090: NEG
52091: PUSH
52092: LD_INT 2
52094: NEG
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 0
52102: PUSH
52103: LD_INT 2
52105: NEG
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: PUSH
52111: LD_INT 1
52113: PUSH
52114: LD_INT 1
52116: NEG
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: LD_INT 2
52124: PUSH
52125: LD_INT 0
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 2
52134: PUSH
52135: LD_INT 1
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 2
52144: PUSH
52145: LD_INT 2
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 1
52154: PUSH
52155: LD_INT 2
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 0
52164: PUSH
52165: LD_INT 2
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 1
52174: NEG
52175: PUSH
52176: LD_INT 1
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 2
52185: NEG
52186: PUSH
52187: LD_INT 0
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 2
52196: NEG
52197: PUSH
52198: LD_INT 1
52200: NEG
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PUSH
52206: LD_INT 2
52208: NEG
52209: PUSH
52210: LD_INT 2
52212: NEG
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: LIST
52227: LIST
52228: LIST
52229: LIST
52230: LIST
52231: LIST
52232: LIST
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52239: LD_ADDR_VAR 0 19
52243: PUSH
52244: LD_INT 0
52246: PUSH
52247: LD_INT 0
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 0
52256: PUSH
52257: LD_INT 1
52259: NEG
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 1
52267: PUSH
52268: LD_INT 0
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 1
52277: PUSH
52278: LD_INT 1
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 0
52287: PUSH
52288: LD_INT 1
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 1
52297: NEG
52298: PUSH
52299: LD_INT 0
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PUSH
52306: LD_INT 1
52308: NEG
52309: PUSH
52310: LD_INT 1
52312: NEG
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 1
52320: NEG
52321: PUSH
52322: LD_INT 2
52324: NEG
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: LD_INT 0
52332: PUSH
52333: LD_INT 2
52335: NEG
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: PUSH
52341: LD_INT 1
52343: PUSH
52344: LD_INT 1
52346: NEG
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: PUSH
52352: LD_INT 2
52354: PUSH
52355: LD_INT 0
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 2
52364: PUSH
52365: LD_INT 1
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 2
52374: PUSH
52375: LD_INT 2
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: LD_INT 1
52384: PUSH
52385: LD_INT 2
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 0
52394: PUSH
52395: LD_INT 2
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 1
52404: NEG
52405: PUSH
52406: LD_INT 1
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 2
52415: NEG
52416: PUSH
52417: LD_INT 0
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 2
52426: NEG
52427: PUSH
52428: LD_INT 1
52430: NEG
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 2
52438: NEG
52439: PUSH
52440: LD_INT 2
52442: NEG
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: LIST
52452: LIST
52453: LIST
52454: LIST
52455: LIST
52456: LIST
52457: LIST
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52469: LD_ADDR_VAR 0 20
52473: PUSH
52474: LD_INT 0
52476: PUSH
52477: LD_INT 0
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 0
52486: PUSH
52487: LD_INT 1
52489: NEG
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 1
52497: PUSH
52498: LD_INT 0
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 1
52507: PUSH
52508: LD_INT 1
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 0
52517: PUSH
52518: LD_INT 1
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 1
52527: NEG
52528: PUSH
52529: LD_INT 0
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 1
52538: NEG
52539: PUSH
52540: LD_INT 1
52542: NEG
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 1
52550: NEG
52551: PUSH
52552: LD_INT 2
52554: NEG
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 0
52562: PUSH
52563: LD_INT 2
52565: NEG
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: LD_INT 1
52573: PUSH
52574: LD_INT 1
52576: NEG
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 2
52584: PUSH
52585: LD_INT 0
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 2
52594: PUSH
52595: LD_INT 1
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 2
52604: PUSH
52605: LD_INT 2
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: LD_INT 1
52614: PUSH
52615: LD_INT 2
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: LD_INT 0
52624: PUSH
52625: LD_INT 2
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 1
52634: NEG
52635: PUSH
52636: LD_INT 1
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 2
52645: NEG
52646: PUSH
52647: LD_INT 0
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: LD_INT 2
52656: NEG
52657: PUSH
52658: LD_INT 1
52660: NEG
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: LD_INT 2
52668: NEG
52669: PUSH
52670: LD_INT 2
52672: NEG
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52699: LD_ADDR_VAR 0 21
52703: PUSH
52704: LD_INT 0
52706: PUSH
52707: LD_INT 0
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: LD_INT 0
52716: PUSH
52717: LD_INT 1
52719: NEG
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 1
52727: PUSH
52728: LD_INT 0
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 1
52737: PUSH
52738: LD_INT 1
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 0
52747: PUSH
52748: LD_INT 1
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 1
52757: NEG
52758: PUSH
52759: LD_INT 0
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: PUSH
52766: LD_INT 1
52768: NEG
52769: PUSH
52770: LD_INT 1
52772: NEG
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 1
52780: NEG
52781: PUSH
52782: LD_INT 2
52784: NEG
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 0
52792: PUSH
52793: LD_INT 2
52795: NEG
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: LD_INT 1
52803: PUSH
52804: LD_INT 1
52806: NEG
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: LD_INT 2
52814: PUSH
52815: LD_INT 0
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 2
52824: PUSH
52825: LD_INT 1
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: LD_INT 2
52834: PUSH
52835: LD_INT 2
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: LD_INT 1
52844: PUSH
52845: LD_INT 2
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 0
52854: PUSH
52855: LD_INT 2
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 1
52864: NEG
52865: PUSH
52866: LD_INT 1
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 2
52875: NEG
52876: PUSH
52877: LD_INT 0
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 2
52886: NEG
52887: PUSH
52888: LD_INT 1
52890: NEG
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 2
52898: NEG
52899: PUSH
52900: LD_INT 2
52902: NEG
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: LIST
52924: LIST
52925: LIST
52926: LIST
52927: LIST
52928: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52929: LD_ADDR_VAR 0 22
52933: PUSH
52934: LD_INT 0
52936: PUSH
52937: LD_INT 0
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 0
52946: PUSH
52947: LD_INT 1
52949: NEG
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 1
52957: PUSH
52958: LD_INT 0
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 1
52967: PUSH
52968: LD_INT 1
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 0
52977: PUSH
52978: LD_INT 1
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 1
52987: NEG
52988: PUSH
52989: LD_INT 0
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 1
52998: NEG
52999: PUSH
53000: LD_INT 1
53002: NEG
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PUSH
53008: LD_INT 1
53010: NEG
53011: PUSH
53012: LD_INT 2
53014: NEG
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 0
53022: PUSH
53023: LD_INT 2
53025: NEG
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: PUSH
53031: LD_INT 1
53033: PUSH
53034: LD_INT 1
53036: NEG
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 2
53044: PUSH
53045: LD_INT 0
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 2
53054: PUSH
53055: LD_INT 1
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 2
53064: PUSH
53065: LD_INT 2
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 1
53074: PUSH
53075: LD_INT 2
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 0
53084: PUSH
53085: LD_INT 2
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 1
53094: NEG
53095: PUSH
53096: LD_INT 1
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 2
53105: NEG
53106: PUSH
53107: LD_INT 0
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 2
53116: NEG
53117: PUSH
53118: LD_INT 1
53120: NEG
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 2
53128: NEG
53129: PUSH
53130: LD_INT 2
53132: NEG
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: LIST
53142: LIST
53143: LIST
53144: LIST
53145: LIST
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: LIST
53151: LIST
53152: LIST
53153: LIST
53154: LIST
53155: LIST
53156: LIST
53157: LIST
53158: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53159: LD_ADDR_VAR 0 23
53163: PUSH
53164: LD_INT 0
53166: PUSH
53167: LD_INT 0
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 0
53176: PUSH
53177: LD_INT 1
53179: NEG
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 1
53187: PUSH
53188: LD_INT 0
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 1
53197: PUSH
53198: LD_INT 1
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 0
53207: PUSH
53208: LD_INT 1
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 1
53217: NEG
53218: PUSH
53219: LD_INT 0
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: LD_INT 1
53228: NEG
53229: PUSH
53230: LD_INT 1
53232: NEG
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 1
53240: NEG
53241: PUSH
53242: LD_INT 2
53244: NEG
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 0
53252: PUSH
53253: LD_INT 2
53255: NEG
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: LD_INT 1
53263: PUSH
53264: LD_INT 1
53266: NEG
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 2
53274: PUSH
53275: LD_INT 0
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 2
53284: PUSH
53285: LD_INT 1
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 2
53294: PUSH
53295: LD_INT 2
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 1
53304: PUSH
53305: LD_INT 2
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 0
53314: PUSH
53315: LD_INT 2
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 1
53324: NEG
53325: PUSH
53326: LD_INT 1
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 2
53335: NEG
53336: PUSH
53337: LD_INT 0
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 2
53346: NEG
53347: PUSH
53348: LD_INT 1
53350: NEG
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 2
53358: NEG
53359: PUSH
53360: LD_INT 2
53362: NEG
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 2
53370: NEG
53371: PUSH
53372: LD_INT 3
53374: NEG
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 1
53382: NEG
53383: PUSH
53384: LD_INT 3
53386: NEG
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 1
53394: PUSH
53395: LD_INT 2
53397: NEG
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: LD_INT 2
53405: PUSH
53406: LD_INT 1
53408: NEG
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: LIST
53418: LIST
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
53439: LD_ADDR_VAR 0 24
53443: PUSH
53444: LD_INT 0
53446: PUSH
53447: LD_INT 0
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 0
53456: PUSH
53457: LD_INT 1
53459: NEG
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 1
53467: PUSH
53468: LD_INT 0
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 1
53477: PUSH
53478: LD_INT 1
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 0
53487: PUSH
53488: LD_INT 1
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 1
53497: NEG
53498: PUSH
53499: LD_INT 0
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 1
53508: NEG
53509: PUSH
53510: LD_INT 1
53512: NEG
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 1
53520: NEG
53521: PUSH
53522: LD_INT 2
53524: NEG
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: LD_INT 0
53532: PUSH
53533: LD_INT 2
53535: NEG
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 1
53543: PUSH
53544: LD_INT 1
53546: NEG
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 2
53554: PUSH
53555: LD_INT 0
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 2
53564: PUSH
53565: LD_INT 1
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 2
53574: PUSH
53575: LD_INT 2
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 1
53584: PUSH
53585: LD_INT 2
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 0
53594: PUSH
53595: LD_INT 2
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 1
53604: NEG
53605: PUSH
53606: LD_INT 1
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 2
53615: NEG
53616: PUSH
53617: LD_INT 0
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 2
53626: NEG
53627: PUSH
53628: LD_INT 1
53630: NEG
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 2
53638: NEG
53639: PUSH
53640: LD_INT 2
53642: NEG
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 1
53650: PUSH
53651: LD_INT 2
53653: NEG
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 2
53661: PUSH
53662: LD_INT 1
53664: NEG
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 3
53672: PUSH
53673: LD_INT 1
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 3
53682: PUSH
53683: LD_INT 2
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: LIST
53694: LIST
53695: LIST
53696: LIST
53697: LIST
53698: LIST
53699: LIST
53700: LIST
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
53715: LD_ADDR_VAR 0 25
53719: PUSH
53720: LD_INT 0
53722: PUSH
53723: LD_INT 0
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 0
53732: PUSH
53733: LD_INT 1
53735: NEG
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: PUSH
53741: LD_INT 1
53743: PUSH
53744: LD_INT 0
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 1
53753: PUSH
53754: LD_INT 1
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 0
53763: PUSH
53764: LD_INT 1
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 1
53773: NEG
53774: PUSH
53775: LD_INT 0
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 1
53784: NEG
53785: PUSH
53786: LD_INT 1
53788: NEG
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: LD_INT 1
53796: NEG
53797: PUSH
53798: LD_INT 2
53800: NEG
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: PUSH
53806: LD_INT 0
53808: PUSH
53809: LD_INT 2
53811: NEG
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 1
53819: PUSH
53820: LD_INT 1
53822: NEG
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 2
53830: PUSH
53831: LD_INT 0
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 2
53840: PUSH
53841: LD_INT 1
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 2
53850: PUSH
53851: LD_INT 2
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 1
53860: PUSH
53861: LD_INT 2
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 0
53870: PUSH
53871: LD_INT 2
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: LD_INT 1
53880: NEG
53881: PUSH
53882: LD_INT 1
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: LD_INT 2
53891: NEG
53892: PUSH
53893: LD_INT 0
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 2
53902: NEG
53903: PUSH
53904: LD_INT 1
53906: NEG
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 2
53914: NEG
53915: PUSH
53916: LD_INT 2
53918: NEG
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 3
53926: PUSH
53927: LD_INT 1
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 3
53936: PUSH
53937: LD_INT 2
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 2
53946: PUSH
53947: LD_INT 3
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: LD_INT 1
53956: PUSH
53957: LD_INT 3
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: LIST
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: LIST
53976: LIST
53977: LIST
53978: LIST
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: LIST
53984: LIST
53985: LIST
53986: LIST
53987: LIST
53988: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53989: LD_ADDR_VAR 0 26
53993: PUSH
53994: LD_INT 0
53996: PUSH
53997: LD_INT 0
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 0
54006: PUSH
54007: LD_INT 1
54009: NEG
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 1
54017: PUSH
54018: LD_INT 0
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 1
54027: PUSH
54028: LD_INT 1
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: PUSH
54035: LD_INT 0
54037: PUSH
54038: LD_INT 1
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: PUSH
54045: LD_INT 1
54047: NEG
54048: PUSH
54049: LD_INT 0
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 1
54058: NEG
54059: PUSH
54060: LD_INT 1
54062: NEG
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 1
54070: NEG
54071: PUSH
54072: LD_INT 2
54074: NEG
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 0
54082: PUSH
54083: LD_INT 2
54085: NEG
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 1
54093: PUSH
54094: LD_INT 1
54096: NEG
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 2
54104: PUSH
54105: LD_INT 0
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: PUSH
54112: LD_INT 2
54114: PUSH
54115: LD_INT 1
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: PUSH
54122: LD_INT 2
54124: PUSH
54125: LD_INT 2
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: LD_INT 1
54134: PUSH
54135: LD_INT 2
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: PUSH
54142: LD_INT 0
54144: PUSH
54145: LD_INT 2
54147: PUSH
54148: EMPTY
54149: LIST
54150: LIST
54151: PUSH
54152: LD_INT 1
54154: NEG
54155: PUSH
54156: LD_INT 1
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: LD_INT 2
54165: NEG
54166: PUSH
54167: LD_INT 0
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 2
54176: NEG
54177: PUSH
54178: LD_INT 1
54180: NEG
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 2
54188: NEG
54189: PUSH
54190: LD_INT 2
54192: NEG
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 2
54200: PUSH
54201: LD_INT 3
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 1
54210: PUSH
54211: LD_INT 3
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 1
54220: NEG
54221: PUSH
54222: LD_INT 2
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 2
54231: NEG
54232: PUSH
54233: LD_INT 1
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: LIST
54264: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54265: LD_ADDR_VAR 0 27
54269: PUSH
54270: LD_INT 0
54272: PUSH
54273: LD_INT 0
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 0
54282: PUSH
54283: LD_INT 1
54285: NEG
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 1
54293: PUSH
54294: LD_INT 0
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 1
54303: PUSH
54304: LD_INT 1
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 0
54313: PUSH
54314: LD_INT 1
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 1
54323: NEG
54324: PUSH
54325: LD_INT 0
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: PUSH
54332: LD_INT 1
54334: NEG
54335: PUSH
54336: LD_INT 1
54338: NEG
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: PUSH
54344: LD_INT 1
54346: NEG
54347: PUSH
54348: LD_INT 2
54350: NEG
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 0
54358: PUSH
54359: LD_INT 2
54361: NEG
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 1
54369: PUSH
54370: LD_INT 1
54372: NEG
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 2
54380: PUSH
54381: LD_INT 0
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: LD_INT 2
54390: PUSH
54391: LD_INT 1
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: PUSH
54398: LD_INT 2
54400: PUSH
54401: LD_INT 2
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 1
54410: PUSH
54411: LD_INT 2
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 0
54420: PUSH
54421: LD_INT 2
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 1
54430: NEG
54431: PUSH
54432: LD_INT 1
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 2
54441: NEG
54442: PUSH
54443: LD_INT 0
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 2
54452: NEG
54453: PUSH
54454: LD_INT 1
54456: NEG
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 2
54464: NEG
54465: PUSH
54466: LD_INT 2
54468: NEG
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 1
54476: NEG
54477: PUSH
54478: LD_INT 2
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 2
54487: NEG
54488: PUSH
54489: LD_INT 1
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: PUSH
54496: LD_INT 3
54498: NEG
54499: PUSH
54500: LD_INT 1
54502: NEG
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 3
54510: NEG
54511: PUSH
54512: LD_INT 2
54514: NEG
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: LIST
54524: LIST
54525: LIST
54526: LIST
54527: LIST
54528: LIST
54529: LIST
54530: LIST
54531: LIST
54532: LIST
54533: LIST
54534: LIST
54535: LIST
54536: LIST
54537: LIST
54538: LIST
54539: LIST
54540: LIST
54541: LIST
54542: LIST
54543: LIST
54544: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54545: LD_ADDR_VAR 0 28
54549: PUSH
54550: LD_INT 0
54552: PUSH
54553: LD_INT 0
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 0
54562: PUSH
54563: LD_INT 1
54565: NEG
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 1
54573: PUSH
54574: LD_INT 0
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 1
54583: PUSH
54584: LD_INT 1
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 0
54593: PUSH
54594: LD_INT 1
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 1
54603: NEG
54604: PUSH
54605: LD_INT 0
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 1
54614: NEG
54615: PUSH
54616: LD_INT 1
54618: NEG
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 1
54626: NEG
54627: PUSH
54628: LD_INT 2
54630: NEG
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 0
54638: PUSH
54639: LD_INT 2
54641: NEG
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 1
54649: PUSH
54650: LD_INT 1
54652: NEG
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 2
54660: PUSH
54661: LD_INT 0
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: LD_INT 2
54670: PUSH
54671: LD_INT 1
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: LD_INT 2
54680: PUSH
54681: LD_INT 2
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 1
54690: PUSH
54691: LD_INT 2
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 0
54700: PUSH
54701: LD_INT 2
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 1
54710: NEG
54711: PUSH
54712: LD_INT 1
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 2
54721: NEG
54722: PUSH
54723: LD_INT 0
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 2
54732: NEG
54733: PUSH
54734: LD_INT 1
54736: NEG
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 2
54744: NEG
54745: PUSH
54746: LD_INT 2
54748: NEG
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 2
54756: NEG
54757: PUSH
54758: LD_INT 3
54760: NEG
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 1
54768: NEG
54769: PUSH
54770: LD_INT 3
54772: NEG
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 3
54780: NEG
54781: PUSH
54782: LD_INT 1
54784: NEG
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: LD_INT 3
54792: NEG
54793: PUSH
54794: LD_INT 2
54796: NEG
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: LIST
54826: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54827: LD_ADDR_VAR 0 29
54831: PUSH
54832: LD_INT 0
54834: PUSH
54835: LD_INT 0
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 0
54844: PUSH
54845: LD_INT 1
54847: NEG
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 1
54855: PUSH
54856: LD_INT 0
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 1
54865: PUSH
54866: LD_INT 1
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 0
54875: PUSH
54876: LD_INT 1
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 1
54885: NEG
54886: PUSH
54887: LD_INT 0
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 1
54896: NEG
54897: PUSH
54898: LD_INT 1
54900: NEG
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_INT 1
54908: NEG
54909: PUSH
54910: LD_INT 2
54912: NEG
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 0
54920: PUSH
54921: LD_INT 2
54923: NEG
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 1
54931: PUSH
54932: LD_INT 1
54934: NEG
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: LD_INT 2
54942: PUSH
54943: LD_INT 0
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 2
54952: PUSH
54953: LD_INT 1
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 1
54962: PUSH
54963: LD_INT 2
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: LD_INT 0
54972: PUSH
54973: LD_INT 2
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 1
54982: NEG
54983: PUSH
54984: LD_INT 1
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: LD_INT 2
54993: NEG
54994: PUSH
54995: LD_INT 1
54997: NEG
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 2
55005: NEG
55006: PUSH
55007: LD_INT 2
55009: NEG
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 2
55017: NEG
55018: PUSH
55019: LD_INT 3
55021: NEG
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 2
55029: PUSH
55030: LD_INT 1
55032: NEG
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 3
55040: PUSH
55041: LD_INT 1
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 1
55050: PUSH
55051: LD_INT 3
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 1
55060: NEG
55061: PUSH
55062: LD_INT 2
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 3
55071: NEG
55072: PUSH
55073: LD_INT 2
55075: NEG
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: LIST
55085: LIST
55086: LIST
55087: LIST
55088: LIST
55089: LIST
55090: LIST
55091: LIST
55092: LIST
55093: LIST
55094: LIST
55095: LIST
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55106: LD_ADDR_VAR 0 30
55110: PUSH
55111: LD_INT 0
55113: PUSH
55114: LD_INT 0
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 0
55123: PUSH
55124: LD_INT 1
55126: NEG
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 1
55134: PUSH
55135: LD_INT 0
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 1
55144: PUSH
55145: LD_INT 1
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 0
55154: PUSH
55155: LD_INT 1
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 1
55164: NEG
55165: PUSH
55166: LD_INT 0
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 1
55175: NEG
55176: PUSH
55177: LD_INT 1
55179: NEG
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 1
55187: NEG
55188: PUSH
55189: LD_INT 2
55191: NEG
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 0
55199: PUSH
55200: LD_INT 2
55202: NEG
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 1
55210: PUSH
55211: LD_INT 1
55213: NEG
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 2
55221: PUSH
55222: LD_INT 0
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 2
55231: PUSH
55232: LD_INT 1
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 2
55241: PUSH
55242: LD_INT 2
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 1
55251: PUSH
55252: LD_INT 2
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 1
55261: NEG
55262: PUSH
55263: LD_INT 1
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 2
55272: NEG
55273: PUSH
55274: LD_INT 0
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 2
55283: NEG
55284: PUSH
55285: LD_INT 1
55287: NEG
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 1
55295: NEG
55296: PUSH
55297: LD_INT 3
55299: NEG
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 1
55307: PUSH
55308: LD_INT 2
55310: NEG
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 3
55318: PUSH
55319: LD_INT 2
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 2
55328: PUSH
55329: LD_INT 3
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: LD_INT 2
55338: NEG
55339: PUSH
55340: LD_INT 1
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: LD_INT 3
55349: NEG
55350: PUSH
55351: LD_INT 1
55353: NEG
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55384: LD_ADDR_VAR 0 31
55388: PUSH
55389: LD_INT 0
55391: PUSH
55392: LD_INT 0
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 0
55401: PUSH
55402: LD_INT 1
55404: NEG
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: LD_INT 1
55412: PUSH
55413: LD_INT 0
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: LD_INT 1
55422: PUSH
55423: LD_INT 1
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 0
55432: PUSH
55433: LD_INT 1
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: LD_INT 1
55442: NEG
55443: PUSH
55444: LD_INT 0
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 1
55453: NEG
55454: PUSH
55455: LD_INT 1
55457: NEG
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 1
55465: NEG
55466: PUSH
55467: LD_INT 2
55469: NEG
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 1
55477: PUSH
55478: LD_INT 1
55480: NEG
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 2
55488: PUSH
55489: LD_INT 0
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 2
55498: PUSH
55499: LD_INT 1
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 2
55508: PUSH
55509: LD_INT 2
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 1
55518: PUSH
55519: LD_INT 2
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: LD_INT 0
55528: PUSH
55529: LD_INT 2
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 1
55538: NEG
55539: PUSH
55540: LD_INT 1
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 2
55549: NEG
55550: PUSH
55551: LD_INT 1
55553: NEG
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: LD_INT 2
55561: NEG
55562: PUSH
55563: LD_INT 2
55565: NEG
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 2
55573: NEG
55574: PUSH
55575: LD_INT 3
55577: NEG
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 2
55585: PUSH
55586: LD_INT 1
55588: NEG
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 3
55596: PUSH
55597: LD_INT 1
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 1
55606: PUSH
55607: LD_INT 3
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 1
55616: NEG
55617: PUSH
55618: LD_INT 2
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 3
55627: NEG
55628: PUSH
55629: LD_INT 2
55631: NEG
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: LIST
55641: LIST
55642: LIST
55643: LIST
55644: LIST
55645: LIST
55646: LIST
55647: LIST
55648: LIST
55649: LIST
55650: LIST
55651: LIST
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: LIST
55661: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55662: LD_ADDR_VAR 0 32
55666: PUSH
55667: LD_INT 0
55669: PUSH
55670: LD_INT 0
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 0
55679: PUSH
55680: LD_INT 1
55682: NEG
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: PUSH
55688: LD_INT 1
55690: PUSH
55691: LD_INT 0
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: LD_INT 1
55700: PUSH
55701: LD_INT 1
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PUSH
55708: LD_INT 0
55710: PUSH
55711: LD_INT 1
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 1
55720: NEG
55721: PUSH
55722: LD_INT 0
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 1
55731: NEG
55732: PUSH
55733: LD_INT 1
55735: NEG
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 1
55743: NEG
55744: PUSH
55745: LD_INT 2
55747: NEG
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: LD_INT 0
55755: PUSH
55756: LD_INT 2
55758: NEG
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: LD_INT 1
55766: PUSH
55767: LD_INT 1
55769: NEG
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 2
55777: PUSH
55778: LD_INT 1
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: PUSH
55785: LD_INT 2
55787: PUSH
55788: LD_INT 2
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: PUSH
55795: LD_INT 1
55797: PUSH
55798: LD_INT 2
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: LD_INT 0
55807: PUSH
55808: LD_INT 2
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: PUSH
55815: LD_INT 1
55817: NEG
55818: PUSH
55819: LD_INT 1
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 2
55828: NEG
55829: PUSH
55830: LD_INT 0
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 2
55839: NEG
55840: PUSH
55841: LD_INT 1
55843: NEG
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: LD_INT 1
55851: NEG
55852: PUSH
55853: LD_INT 3
55855: NEG
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 1
55863: PUSH
55864: LD_INT 2
55866: NEG
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 3
55874: PUSH
55875: LD_INT 2
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 2
55884: PUSH
55885: LD_INT 3
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 2
55894: NEG
55895: PUSH
55896: LD_INT 1
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 3
55905: NEG
55906: PUSH
55907: LD_INT 1
55909: NEG
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: LIST
55919: LIST
55920: LIST
55921: LIST
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55940: LD_ADDR_VAR 0 33
55944: PUSH
55945: LD_INT 0
55947: PUSH
55948: LD_INT 0
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: PUSH
55955: LD_INT 0
55957: PUSH
55958: LD_INT 1
55960: NEG
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: LD_INT 1
55968: PUSH
55969: LD_INT 0
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: LD_INT 1
55978: PUSH
55979: LD_INT 1
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: LD_INT 0
55988: PUSH
55989: LD_INT 1
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: PUSH
55996: LD_INT 1
55998: NEG
55999: PUSH
56000: LD_INT 0
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 1
56009: NEG
56010: PUSH
56011: LD_INT 1
56013: NEG
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 1
56021: NEG
56022: PUSH
56023: LD_INT 2
56025: NEG
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 1
56033: PUSH
56034: LD_INT 1
56036: NEG
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: PUSH
56042: LD_INT 2
56044: PUSH
56045: LD_INT 0
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 2
56054: PUSH
56055: LD_INT 1
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PUSH
56062: LD_INT 1
56064: PUSH
56065: LD_INT 2
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 0
56074: PUSH
56075: LD_INT 2
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 1
56084: NEG
56085: PUSH
56086: LD_INT 1
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 2
56095: NEG
56096: PUSH
56097: LD_INT 0
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 2
56106: NEG
56107: PUSH
56108: LD_INT 1
56110: NEG
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 2
56118: NEG
56119: PUSH
56120: LD_INT 2
56122: NEG
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 2
56130: NEG
56131: PUSH
56132: LD_INT 3
56134: NEG
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 2
56142: PUSH
56143: LD_INT 1
56145: NEG
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: LD_INT 3
56153: PUSH
56154: LD_INT 1
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: LD_INT 1
56163: PUSH
56164: LD_INT 3
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 1
56173: NEG
56174: PUSH
56175: LD_INT 2
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 3
56184: NEG
56185: PUSH
56186: LD_INT 2
56188: NEG
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: LIST
56198: LIST
56199: LIST
56200: LIST
56201: LIST
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56219: LD_ADDR_VAR 0 34
56223: PUSH
56224: LD_INT 0
56226: PUSH
56227: LD_INT 0
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 0
56236: PUSH
56237: LD_INT 1
56239: NEG
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: LD_INT 1
56247: PUSH
56248: LD_INT 0
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 1
56257: PUSH
56258: LD_INT 1
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 0
56267: PUSH
56268: LD_INT 1
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 1
56277: NEG
56278: PUSH
56279: LD_INT 0
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PUSH
56286: LD_INT 1
56288: NEG
56289: PUSH
56290: LD_INT 1
56292: NEG
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: PUSH
56298: LD_INT 1
56300: NEG
56301: PUSH
56302: LD_INT 2
56304: NEG
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: PUSH
56310: LD_INT 0
56312: PUSH
56313: LD_INT 2
56315: NEG
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: PUSH
56321: LD_INT 1
56323: PUSH
56324: LD_INT 1
56326: NEG
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 2
56334: PUSH
56335: LD_INT 1
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 2
56344: PUSH
56345: LD_INT 2
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 1
56354: PUSH
56355: LD_INT 2
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 1
56364: NEG
56365: PUSH
56366: LD_INT 1
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 2
56375: NEG
56376: PUSH
56377: LD_INT 0
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 2
56386: NEG
56387: PUSH
56388: LD_INT 1
56390: NEG
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: LD_INT 2
56398: NEG
56399: PUSH
56400: LD_INT 2
56402: NEG
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 1
56410: NEG
56411: PUSH
56412: LD_INT 3
56414: NEG
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 1
56422: PUSH
56423: LD_INT 2
56425: NEG
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 3
56433: PUSH
56434: LD_INT 2
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 2
56443: PUSH
56444: LD_INT 3
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 2
56453: NEG
56454: PUSH
56455: LD_INT 1
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 3
56464: NEG
56465: PUSH
56466: LD_INT 1
56468: NEG
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: LIST
56478: LIST
56479: LIST
56480: LIST
56481: LIST
56482: LIST
56483: LIST
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: LIST
56494: LIST
56495: LIST
56496: LIST
56497: LIST
56498: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56499: LD_ADDR_VAR 0 35
56503: PUSH
56504: LD_INT 0
56506: PUSH
56507: LD_INT 0
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: PUSH
56514: LD_INT 0
56516: PUSH
56517: LD_INT 1
56519: NEG
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 1
56527: PUSH
56528: LD_INT 0
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 1
56537: PUSH
56538: LD_INT 1
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: LD_INT 0
56547: PUSH
56548: LD_INT 1
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 1
56557: NEG
56558: PUSH
56559: LD_INT 0
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 1
56568: NEG
56569: PUSH
56570: LD_INT 1
56572: NEG
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 2
56580: PUSH
56581: LD_INT 1
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 2
56590: NEG
56591: PUSH
56592: LD_INT 1
56594: NEG
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: LIST
56604: LIST
56605: LIST
56606: LIST
56607: LIST
56608: LIST
56609: LIST
56610: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56611: LD_ADDR_VAR 0 36
56615: PUSH
56616: LD_INT 0
56618: PUSH
56619: LD_INT 0
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 0
56628: PUSH
56629: LD_INT 1
56631: NEG
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 1
56639: PUSH
56640: LD_INT 0
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 1
56649: PUSH
56650: LD_INT 1
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 0
56659: PUSH
56660: LD_INT 1
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 1
56669: NEG
56670: PUSH
56671: LD_INT 0
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 1
56680: NEG
56681: PUSH
56682: LD_INT 1
56684: NEG
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: LD_INT 1
56692: NEG
56693: PUSH
56694: LD_INT 2
56696: NEG
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: LD_INT 1
56704: PUSH
56705: LD_INT 2
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: LIST
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56723: LD_ADDR_VAR 0 37
56727: PUSH
56728: LD_INT 0
56730: PUSH
56731: LD_INT 0
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 0
56740: PUSH
56741: LD_INT 1
56743: NEG
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 1
56751: PUSH
56752: LD_INT 0
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 1
56761: PUSH
56762: LD_INT 1
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: LD_INT 0
56771: PUSH
56772: LD_INT 1
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: LD_INT 1
56781: NEG
56782: PUSH
56783: LD_INT 0
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: LD_INT 1
56792: NEG
56793: PUSH
56794: LD_INT 1
56796: NEG
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 1
56804: PUSH
56805: LD_INT 1
56807: NEG
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: LD_INT 1
56815: NEG
56816: PUSH
56817: LD_INT 1
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56835: LD_ADDR_VAR 0 38
56839: PUSH
56840: LD_INT 0
56842: PUSH
56843: LD_INT 0
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 0
56852: PUSH
56853: LD_INT 1
56855: NEG
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 1
56863: PUSH
56864: LD_INT 0
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 1
56873: PUSH
56874: LD_INT 1
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 0
56883: PUSH
56884: LD_INT 1
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 1
56893: NEG
56894: PUSH
56895: LD_INT 0
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 1
56904: NEG
56905: PUSH
56906: LD_INT 1
56908: NEG
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: LD_INT 2
56916: PUSH
56917: LD_INT 1
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: LD_INT 2
56926: NEG
56927: PUSH
56928: LD_INT 1
56930: NEG
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56947: LD_ADDR_VAR 0 39
56951: PUSH
56952: LD_INT 0
56954: PUSH
56955: LD_INT 0
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: PUSH
56962: LD_INT 0
56964: PUSH
56965: LD_INT 1
56967: NEG
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 1
56975: PUSH
56976: LD_INT 0
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PUSH
56983: LD_INT 1
56985: PUSH
56986: LD_INT 1
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 0
56995: PUSH
56996: LD_INT 1
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 1
57005: NEG
57006: PUSH
57007: LD_INT 0
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: LD_INT 1
57016: NEG
57017: PUSH
57018: LD_INT 1
57020: NEG
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 1
57028: NEG
57029: PUSH
57030: LD_INT 2
57032: NEG
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 1
57040: PUSH
57041: LD_INT 2
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: LIST
57057: LIST
57058: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57059: LD_ADDR_VAR 0 40
57063: PUSH
57064: LD_INT 0
57066: PUSH
57067: LD_INT 0
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: LD_INT 0
57076: PUSH
57077: LD_INT 1
57079: NEG
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 1
57087: PUSH
57088: LD_INT 0
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 1
57097: PUSH
57098: LD_INT 1
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 0
57107: PUSH
57108: LD_INT 1
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: LD_INT 1
57117: NEG
57118: PUSH
57119: LD_INT 0
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: LD_INT 1
57128: NEG
57129: PUSH
57130: LD_INT 1
57132: NEG
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 1
57140: PUSH
57141: LD_INT 1
57143: NEG
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 1
57151: NEG
57152: PUSH
57153: LD_INT 1
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: LIST
57164: LIST
57165: LIST
57166: LIST
57167: LIST
57168: LIST
57169: LIST
57170: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57171: LD_ADDR_VAR 0 41
57175: PUSH
57176: LD_INT 0
57178: PUSH
57179: LD_INT 0
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: LD_INT 0
57188: PUSH
57189: LD_INT 1
57191: NEG
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: LD_INT 1
57199: PUSH
57200: LD_INT 0
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 1
57209: PUSH
57210: LD_INT 1
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 0
57219: PUSH
57220: LD_INT 1
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: PUSH
57227: LD_INT 1
57229: NEG
57230: PUSH
57231: LD_INT 0
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 1
57240: NEG
57241: PUSH
57242: LD_INT 1
57244: NEG
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: LD_INT 1
57252: NEG
57253: PUSH
57254: LD_INT 2
57256: NEG
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: LD_INT 1
57264: PUSH
57265: LD_INT 1
57267: NEG
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: LD_INT 2
57275: PUSH
57276: LD_INT 0
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 2
57285: PUSH
57286: LD_INT 1
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: LD_INT 2
57295: PUSH
57296: LD_INT 2
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PUSH
57303: LD_INT 1
57305: PUSH
57306: LD_INT 2
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: PUSH
57313: LD_INT 1
57315: NEG
57316: PUSH
57317: LD_INT 1
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: LD_INT 2
57326: NEG
57327: PUSH
57328: LD_INT 0
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 2
57337: NEG
57338: PUSH
57339: LD_INT 1
57341: NEG
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: LD_INT 2
57349: NEG
57350: PUSH
57351: LD_INT 2
57353: NEG
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 2
57361: NEG
57362: PUSH
57363: LD_INT 3
57365: NEG
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 2
57373: PUSH
57374: LD_INT 1
57376: NEG
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 3
57384: PUSH
57385: LD_INT 0
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 3
57394: PUSH
57395: LD_INT 1
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 3
57404: PUSH
57405: LD_INT 2
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: LD_INT 3
57414: PUSH
57415: LD_INT 3
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: LD_INT 2
57424: PUSH
57425: LD_INT 3
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: LD_INT 2
57434: NEG
57435: PUSH
57436: LD_INT 1
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 3
57445: NEG
57446: PUSH
57447: LD_INT 0
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 3
57456: NEG
57457: PUSH
57458: LD_INT 1
57460: NEG
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: LD_INT 3
57468: NEG
57469: PUSH
57470: LD_INT 2
57472: NEG
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: LD_INT 3
57480: NEG
57481: PUSH
57482: LD_INT 3
57484: NEG
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: LIST
57510: LIST
57511: LIST
57512: LIST
57513: LIST
57514: LIST
57515: LIST
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57521: LD_ADDR_VAR 0 42
57525: PUSH
57526: LD_INT 0
57528: PUSH
57529: LD_INT 0
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: PUSH
57536: LD_INT 0
57538: PUSH
57539: LD_INT 1
57541: NEG
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 1
57549: PUSH
57550: LD_INT 0
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: LD_INT 1
57559: PUSH
57560: LD_INT 1
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: LD_INT 0
57569: PUSH
57570: LD_INT 1
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 1
57579: NEG
57580: PUSH
57581: LD_INT 0
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 1
57590: NEG
57591: PUSH
57592: LD_INT 1
57594: NEG
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 1
57602: NEG
57603: PUSH
57604: LD_INT 2
57606: NEG
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: LD_INT 0
57614: PUSH
57615: LD_INT 2
57617: NEG
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 1
57625: PUSH
57626: LD_INT 1
57628: NEG
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: LD_INT 2
57636: PUSH
57637: LD_INT 1
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 2
57646: PUSH
57647: LD_INT 2
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: LD_INT 1
57656: PUSH
57657: LD_INT 2
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: LD_INT 0
57666: PUSH
57667: LD_INT 2
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: LD_INT 1
57676: NEG
57677: PUSH
57678: LD_INT 1
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: PUSH
57685: LD_INT 2
57687: NEG
57688: PUSH
57689: LD_INT 1
57691: NEG
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: PUSH
57697: LD_INT 2
57699: NEG
57700: PUSH
57701: LD_INT 2
57703: NEG
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 2
57711: NEG
57712: PUSH
57713: LD_INT 3
57715: NEG
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 1
57723: NEG
57724: PUSH
57725: LD_INT 3
57727: NEG
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: LD_INT 0
57735: PUSH
57736: LD_INT 3
57738: NEG
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: LD_INT 1
57746: PUSH
57747: LD_INT 2
57749: NEG
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PUSH
57755: LD_INT 3
57757: PUSH
57758: LD_INT 2
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: LD_INT 3
57767: PUSH
57768: LD_INT 3
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: PUSH
57775: LD_INT 2
57777: PUSH
57778: LD_INT 3
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 1
57787: PUSH
57788: LD_INT 3
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: LD_INT 0
57797: PUSH
57798: LD_INT 3
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 1
57807: NEG
57808: PUSH
57809: LD_INT 2
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: LD_INT 3
57818: NEG
57819: PUSH
57820: LD_INT 2
57822: NEG
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: LD_INT 3
57830: NEG
57831: PUSH
57832: LD_INT 3
57834: NEG
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: LIST
57849: LIST
57850: LIST
57851: LIST
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57871: LD_ADDR_VAR 0 43
57875: PUSH
57876: LD_INT 0
57878: PUSH
57879: LD_INT 0
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 0
57888: PUSH
57889: LD_INT 1
57891: NEG
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: LD_INT 1
57899: PUSH
57900: LD_INT 0
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 1
57909: PUSH
57910: LD_INT 1
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 0
57919: PUSH
57920: LD_INT 1
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 1
57929: NEG
57930: PUSH
57931: LD_INT 0
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: LD_INT 1
57940: NEG
57941: PUSH
57942: LD_INT 1
57944: NEG
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: LD_INT 1
57952: NEG
57953: PUSH
57954: LD_INT 2
57956: NEG
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 0
57964: PUSH
57965: LD_INT 2
57967: NEG
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: LD_INT 1
57975: PUSH
57976: LD_INT 1
57978: NEG
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 2
57986: PUSH
57987: LD_INT 0
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 2
57996: PUSH
57997: LD_INT 1
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 1
58006: PUSH
58007: LD_INT 2
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 0
58016: PUSH
58017: LD_INT 2
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 1
58026: NEG
58027: PUSH
58028: LD_INT 1
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: LD_INT 2
58037: NEG
58038: PUSH
58039: LD_INT 0
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: PUSH
58046: LD_INT 2
58048: NEG
58049: PUSH
58050: LD_INT 1
58052: NEG
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: PUSH
58058: LD_INT 1
58060: NEG
58061: PUSH
58062: LD_INT 3
58064: NEG
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: PUSH
58070: LD_INT 0
58072: PUSH
58073: LD_INT 3
58075: NEG
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 1
58083: PUSH
58084: LD_INT 2
58086: NEG
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 2
58094: PUSH
58095: LD_INT 1
58097: NEG
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: LD_INT 3
58105: PUSH
58106: LD_INT 0
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 3
58115: PUSH
58116: LD_INT 1
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 1
58125: PUSH
58126: LD_INT 3
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 0
58135: PUSH
58136: LD_INT 3
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PUSH
58143: LD_INT 1
58145: NEG
58146: PUSH
58147: LD_INT 2
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 2
58156: NEG
58157: PUSH
58158: LD_INT 1
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: LD_INT 3
58167: NEG
58168: PUSH
58169: LD_INT 0
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: LD_INT 3
58178: NEG
58179: PUSH
58180: LD_INT 1
58182: NEG
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: LIST
58192: LIST
58193: LIST
58194: LIST
58195: LIST
58196: LIST
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58219: LD_ADDR_VAR 0 44
58223: PUSH
58224: LD_INT 0
58226: PUSH
58227: LD_INT 0
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 0
58236: PUSH
58237: LD_INT 1
58239: NEG
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: PUSH
58245: LD_INT 1
58247: PUSH
58248: LD_INT 0
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: LD_INT 1
58257: PUSH
58258: LD_INT 1
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: LD_INT 0
58267: PUSH
58268: LD_INT 1
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 1
58277: NEG
58278: PUSH
58279: LD_INT 0
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 1
58288: NEG
58289: PUSH
58290: LD_INT 1
58292: NEG
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: LD_INT 1
58300: NEG
58301: PUSH
58302: LD_INT 2
58304: NEG
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: LD_INT 1
58312: PUSH
58313: LD_INT 1
58315: NEG
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: PUSH
58321: LD_INT 2
58323: PUSH
58324: LD_INT 0
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 2
58333: PUSH
58334: LD_INT 1
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 2
58343: PUSH
58344: LD_INT 2
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 1
58353: PUSH
58354: LD_INT 2
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 1
58363: NEG
58364: PUSH
58365: LD_INT 1
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: LD_INT 2
58374: NEG
58375: PUSH
58376: LD_INT 0
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: LD_INT 2
58385: NEG
58386: PUSH
58387: LD_INT 1
58389: NEG
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 2
58397: NEG
58398: PUSH
58399: LD_INT 2
58401: NEG
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PUSH
58407: LD_INT 2
58409: NEG
58410: PUSH
58411: LD_INT 3
58413: NEG
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 2
58421: PUSH
58422: LD_INT 1
58424: NEG
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 3
58432: PUSH
58433: LD_INT 0
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: LD_INT 3
58442: PUSH
58443: LD_INT 1
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: PUSH
58450: LD_INT 3
58452: PUSH
58453: LD_INT 2
58455: PUSH
58456: EMPTY
58457: LIST
58458: LIST
58459: PUSH
58460: LD_INT 3
58462: PUSH
58463: LD_INT 3
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PUSH
58470: LD_INT 2
58472: PUSH
58473: LD_INT 3
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: PUSH
58480: LD_INT 2
58482: NEG
58483: PUSH
58484: LD_INT 1
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: LD_INT 3
58493: NEG
58494: PUSH
58495: LD_INT 0
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 3
58504: NEG
58505: PUSH
58506: LD_INT 1
58508: NEG
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: LD_INT 3
58516: NEG
58517: PUSH
58518: LD_INT 2
58520: NEG
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PUSH
58526: LD_INT 3
58528: NEG
58529: PUSH
58530: LD_INT 3
58532: NEG
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: LIST
58542: LIST
58543: LIST
58544: LIST
58545: LIST
58546: LIST
58547: LIST
58548: LIST
58549: LIST
58550: LIST
58551: LIST
58552: LIST
58553: LIST
58554: LIST
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: LIST
58560: LIST
58561: LIST
58562: LIST
58563: LIST
58564: LIST
58565: LIST
58566: LIST
58567: LIST
58568: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58569: LD_ADDR_VAR 0 45
58573: PUSH
58574: LD_INT 0
58576: PUSH
58577: LD_INT 0
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 0
58586: PUSH
58587: LD_INT 1
58589: NEG
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: PUSH
58595: LD_INT 1
58597: PUSH
58598: LD_INT 0
58600: PUSH
58601: EMPTY
58602: LIST
58603: LIST
58604: PUSH
58605: LD_INT 1
58607: PUSH
58608: LD_INT 1
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: PUSH
58615: LD_INT 0
58617: PUSH
58618: LD_INT 1
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: PUSH
58625: LD_INT 1
58627: NEG
58628: PUSH
58629: LD_INT 0
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: PUSH
58636: LD_INT 1
58638: NEG
58639: PUSH
58640: LD_INT 1
58642: NEG
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 1
58650: NEG
58651: PUSH
58652: LD_INT 2
58654: NEG
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: LD_INT 0
58662: PUSH
58663: LD_INT 2
58665: NEG
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: LD_INT 1
58673: PUSH
58674: LD_INT 1
58676: NEG
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 2
58684: PUSH
58685: LD_INT 1
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 2
58694: PUSH
58695: LD_INT 2
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: LD_INT 1
58704: PUSH
58705: LD_INT 2
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 0
58714: PUSH
58715: LD_INT 2
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PUSH
58722: LD_INT 1
58724: NEG
58725: PUSH
58726: LD_INT 1
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 2
58735: NEG
58736: PUSH
58737: LD_INT 1
58739: NEG
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: LD_INT 2
58747: NEG
58748: PUSH
58749: LD_INT 2
58751: NEG
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: LD_INT 2
58759: NEG
58760: PUSH
58761: LD_INT 3
58763: NEG
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 1
58771: NEG
58772: PUSH
58773: LD_INT 3
58775: NEG
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: LD_INT 0
58783: PUSH
58784: LD_INT 3
58786: NEG
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 1
58794: PUSH
58795: LD_INT 2
58797: NEG
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 3
58805: PUSH
58806: LD_INT 2
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: LD_INT 3
58815: PUSH
58816: LD_INT 3
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PUSH
58823: LD_INT 2
58825: PUSH
58826: LD_INT 3
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_INT 1
58835: PUSH
58836: LD_INT 3
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: LD_INT 0
58845: PUSH
58846: LD_INT 3
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PUSH
58853: LD_INT 1
58855: NEG
58856: PUSH
58857: LD_INT 2
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: PUSH
58864: LD_INT 3
58866: NEG
58867: PUSH
58868: LD_INT 2
58870: NEG
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 3
58878: NEG
58879: PUSH
58880: LD_INT 3
58882: NEG
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: LIST
58892: LIST
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: LIST
58900: LIST
58901: LIST
58902: LIST
58903: LIST
58904: LIST
58905: LIST
58906: LIST
58907: LIST
58908: LIST
58909: LIST
58910: LIST
58911: LIST
58912: LIST
58913: LIST
58914: LIST
58915: LIST
58916: LIST
58917: LIST
58918: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58919: LD_ADDR_VAR 0 46
58923: PUSH
58924: LD_INT 0
58926: PUSH
58927: LD_INT 0
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: LD_INT 0
58936: PUSH
58937: LD_INT 1
58939: NEG
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: PUSH
58945: LD_INT 1
58947: PUSH
58948: LD_INT 0
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: PUSH
58955: LD_INT 1
58957: PUSH
58958: LD_INT 1
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: PUSH
58965: LD_INT 0
58967: PUSH
58968: LD_INT 1
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 1
58977: NEG
58978: PUSH
58979: LD_INT 0
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 1
58988: NEG
58989: PUSH
58990: LD_INT 1
58992: NEG
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 1
59000: NEG
59001: PUSH
59002: LD_INT 2
59004: NEG
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 0
59012: PUSH
59013: LD_INT 2
59015: NEG
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 1
59023: PUSH
59024: LD_INT 1
59026: NEG
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 2
59034: PUSH
59035: LD_INT 0
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 2
59044: PUSH
59045: LD_INT 1
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: LD_INT 1
59054: PUSH
59055: LD_INT 2
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 0
59064: PUSH
59065: LD_INT 2
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: LD_INT 1
59074: NEG
59075: PUSH
59076: LD_INT 1
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 2
59085: NEG
59086: PUSH
59087: LD_INT 0
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: LD_INT 2
59096: NEG
59097: PUSH
59098: LD_INT 1
59100: NEG
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: PUSH
59106: LD_INT 1
59108: NEG
59109: PUSH
59110: LD_INT 3
59112: NEG
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: PUSH
59118: LD_INT 0
59120: PUSH
59121: LD_INT 3
59123: NEG
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PUSH
59129: LD_INT 1
59131: PUSH
59132: LD_INT 2
59134: NEG
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: PUSH
59140: LD_INT 2
59142: PUSH
59143: LD_INT 1
59145: NEG
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 3
59153: PUSH
59154: LD_INT 0
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: LD_INT 3
59163: PUSH
59164: LD_INT 1
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 1
59173: PUSH
59174: LD_INT 3
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 0
59183: PUSH
59184: LD_INT 3
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 1
59193: NEG
59194: PUSH
59195: LD_INT 2
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PUSH
59202: LD_INT 2
59204: NEG
59205: PUSH
59206: LD_INT 1
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: PUSH
59213: LD_INT 3
59215: NEG
59216: PUSH
59217: LD_INT 0
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: LD_INT 3
59226: NEG
59227: PUSH
59228: LD_INT 1
59230: NEG
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: LIST
59240: LIST
59241: LIST
59242: LIST
59243: LIST
59244: LIST
59245: LIST
59246: LIST
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: LIST
59252: LIST
59253: LIST
59254: LIST
59255: LIST
59256: LIST
59257: LIST
59258: LIST
59259: LIST
59260: LIST
59261: LIST
59262: LIST
59263: LIST
59264: LIST
59265: LIST
59266: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59267: LD_ADDR_VAR 0 47
59271: PUSH
59272: LD_INT 0
59274: PUSH
59275: LD_INT 0
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 0
59284: PUSH
59285: LD_INT 1
59287: NEG
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: LD_INT 1
59295: PUSH
59296: LD_INT 0
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: PUSH
59303: LD_INT 1
59305: PUSH
59306: LD_INT 1
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: PUSH
59313: LD_INT 0
59315: PUSH
59316: LD_INT 1
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: PUSH
59323: LD_INT 1
59325: NEG
59326: PUSH
59327: LD_INT 0
59329: PUSH
59330: EMPTY
59331: LIST
59332: LIST
59333: PUSH
59334: LD_INT 1
59336: NEG
59337: PUSH
59338: LD_INT 1
59340: NEG
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: LD_INT 1
59348: NEG
59349: PUSH
59350: LD_INT 2
59352: NEG
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: PUSH
59358: LD_INT 0
59360: PUSH
59361: LD_INT 2
59363: NEG
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: PUSH
59369: LD_INT 1
59371: PUSH
59372: LD_INT 1
59374: NEG
59375: PUSH
59376: EMPTY
59377: LIST
59378: LIST
59379: PUSH
59380: LD_INT 2
59382: NEG
59383: PUSH
59384: LD_INT 1
59386: NEG
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: PUSH
59392: LD_INT 2
59394: NEG
59395: PUSH
59396: LD_INT 2
59398: NEG
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: LIST
59413: LIST
59414: LIST
59415: LIST
59416: LIST
59417: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59418: LD_ADDR_VAR 0 48
59422: PUSH
59423: LD_INT 0
59425: PUSH
59426: LD_INT 0
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: LD_INT 0
59435: PUSH
59436: LD_INT 1
59438: NEG
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: PUSH
59444: LD_INT 1
59446: PUSH
59447: LD_INT 0
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: PUSH
59454: LD_INT 1
59456: PUSH
59457: LD_INT 1
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 0
59466: PUSH
59467: LD_INT 1
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PUSH
59474: LD_INT 1
59476: NEG
59477: PUSH
59478: LD_INT 0
59480: PUSH
59481: EMPTY
59482: LIST
59483: LIST
59484: PUSH
59485: LD_INT 1
59487: NEG
59488: PUSH
59489: LD_INT 1
59491: NEG
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: PUSH
59497: LD_INT 1
59499: NEG
59500: PUSH
59501: LD_INT 2
59503: NEG
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: LD_INT 0
59511: PUSH
59512: LD_INT 2
59514: NEG
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: LD_INT 1
59522: PUSH
59523: LD_INT 1
59525: NEG
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PUSH
59531: LD_INT 2
59533: PUSH
59534: LD_INT 0
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: LD_INT 2
59543: PUSH
59544: LD_INT 1
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: LIST
59555: LIST
59556: LIST
59557: LIST
59558: LIST
59559: LIST
59560: LIST
59561: LIST
59562: LIST
59563: LIST
59564: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59565: LD_ADDR_VAR 0 49
59569: PUSH
59570: LD_INT 0
59572: PUSH
59573: LD_INT 0
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PUSH
59580: LD_INT 0
59582: PUSH
59583: LD_INT 1
59585: NEG
59586: PUSH
59587: EMPTY
59588: LIST
59589: LIST
59590: PUSH
59591: LD_INT 1
59593: PUSH
59594: LD_INT 0
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: PUSH
59601: LD_INT 1
59603: PUSH
59604: LD_INT 1
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: LD_INT 0
59613: PUSH
59614: LD_INT 1
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PUSH
59621: LD_INT 1
59623: NEG
59624: PUSH
59625: LD_INT 0
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: PUSH
59632: LD_INT 1
59634: NEG
59635: PUSH
59636: LD_INT 1
59638: NEG
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: PUSH
59644: LD_INT 1
59646: PUSH
59647: LD_INT 1
59649: NEG
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 2
59657: PUSH
59658: LD_INT 0
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 2
59667: PUSH
59668: LD_INT 1
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: LD_INT 2
59677: PUSH
59678: LD_INT 2
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 1
59687: PUSH
59688: LD_INT 2
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: LIST
59699: LIST
59700: LIST
59701: LIST
59702: LIST
59703: LIST
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59709: LD_ADDR_VAR 0 50
59713: PUSH
59714: LD_INT 0
59716: PUSH
59717: LD_INT 0
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: PUSH
59724: LD_INT 0
59726: PUSH
59727: LD_INT 1
59729: NEG
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PUSH
59735: LD_INT 1
59737: PUSH
59738: LD_INT 0
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: PUSH
59745: LD_INT 1
59747: PUSH
59748: LD_INT 1
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: PUSH
59755: LD_INT 0
59757: PUSH
59758: LD_INT 1
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: PUSH
59765: LD_INT 1
59767: NEG
59768: PUSH
59769: LD_INT 0
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: PUSH
59776: LD_INT 1
59778: NEG
59779: PUSH
59780: LD_INT 1
59782: NEG
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: LD_INT 2
59790: PUSH
59791: LD_INT 1
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 2
59800: PUSH
59801: LD_INT 2
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 1
59810: PUSH
59811: LD_INT 2
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: LD_INT 0
59820: PUSH
59821: LD_INT 2
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PUSH
59828: LD_INT 1
59830: NEG
59831: PUSH
59832: LD_INT 1
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: LIST
59843: LIST
59844: LIST
59845: LIST
59846: LIST
59847: LIST
59848: LIST
59849: LIST
59850: LIST
59851: LIST
59852: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59853: LD_ADDR_VAR 0 51
59857: PUSH
59858: LD_INT 0
59860: PUSH
59861: LD_INT 0
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: PUSH
59868: LD_INT 0
59870: PUSH
59871: LD_INT 1
59873: NEG
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: PUSH
59879: LD_INT 1
59881: PUSH
59882: LD_INT 0
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: PUSH
59889: LD_INT 1
59891: PUSH
59892: LD_INT 1
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: PUSH
59899: LD_INT 0
59901: PUSH
59902: LD_INT 1
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: PUSH
59909: LD_INT 1
59911: NEG
59912: PUSH
59913: LD_INT 0
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: PUSH
59920: LD_INT 1
59922: NEG
59923: PUSH
59924: LD_INT 1
59926: NEG
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: PUSH
59932: LD_INT 1
59934: PUSH
59935: LD_INT 2
59937: PUSH
59938: EMPTY
59939: LIST
59940: LIST
59941: PUSH
59942: LD_INT 0
59944: PUSH
59945: LD_INT 2
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 1
59954: NEG
59955: PUSH
59956: LD_INT 1
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: PUSH
59963: LD_INT 2
59965: NEG
59966: PUSH
59967: LD_INT 0
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 2
59976: NEG
59977: PUSH
59978: LD_INT 1
59980: NEG
59981: PUSH
59982: EMPTY
59983: LIST
59984: LIST
59985: PUSH
59986: EMPTY
59987: LIST
59988: LIST
59989: LIST
59990: LIST
59991: LIST
59992: LIST
59993: LIST
59994: LIST
59995: LIST
59996: LIST
59997: LIST
59998: LIST
59999: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60000: LD_ADDR_VAR 0 52
60004: PUSH
60005: LD_INT 0
60007: PUSH
60008: LD_INT 0
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: LD_INT 0
60017: PUSH
60018: LD_INT 1
60020: NEG
60021: PUSH
60022: EMPTY
60023: LIST
60024: LIST
60025: PUSH
60026: LD_INT 1
60028: PUSH
60029: LD_INT 0
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: LD_INT 1
60038: PUSH
60039: LD_INT 1
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 0
60048: PUSH
60049: LD_INT 1
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: LD_INT 1
60058: NEG
60059: PUSH
60060: LD_INT 0
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: PUSH
60067: LD_INT 1
60069: NEG
60070: PUSH
60071: LD_INT 1
60073: NEG
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: PUSH
60079: LD_INT 1
60081: NEG
60082: PUSH
60083: LD_INT 2
60085: NEG
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: LD_INT 1
60093: NEG
60094: PUSH
60095: LD_INT 1
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: PUSH
60102: LD_INT 2
60104: NEG
60105: PUSH
60106: LD_INT 0
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: PUSH
60113: LD_INT 2
60115: NEG
60116: PUSH
60117: LD_INT 1
60119: NEG
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: LD_INT 2
60127: NEG
60128: PUSH
60129: LD_INT 2
60131: NEG
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: LIST
60141: LIST
60142: LIST
60143: LIST
60144: LIST
60145: LIST
60146: LIST
60147: LIST
60148: LIST
60149: LIST
60150: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60151: LD_ADDR_VAR 0 53
60155: PUSH
60156: LD_INT 0
60158: PUSH
60159: LD_INT 0
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: LD_INT 0
60168: PUSH
60169: LD_INT 1
60171: NEG
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: PUSH
60177: LD_INT 1
60179: PUSH
60180: LD_INT 0
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: LD_INT 1
60189: PUSH
60190: LD_INT 1
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: PUSH
60197: LD_INT 0
60199: PUSH
60200: LD_INT 1
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 1
60209: NEG
60210: PUSH
60211: LD_INT 0
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PUSH
60218: LD_INT 1
60220: NEG
60221: PUSH
60222: LD_INT 1
60224: NEG
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: LD_INT 1
60232: NEG
60233: PUSH
60234: LD_INT 2
60236: NEG
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: PUSH
60242: LD_INT 0
60244: PUSH
60245: LD_INT 2
60247: NEG
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: PUSH
60253: LD_INT 1
60255: PUSH
60256: LD_INT 1
60258: NEG
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: PUSH
60264: LD_INT 2
60266: PUSH
60267: LD_INT 0
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: PUSH
60274: LD_INT 2
60276: PUSH
60277: LD_INT 1
60279: PUSH
60280: EMPTY
60281: LIST
60282: LIST
60283: PUSH
60284: LD_INT 2
60286: PUSH
60287: LD_INT 2
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: PUSH
60294: LD_INT 1
60296: PUSH
60297: LD_INT 2
60299: PUSH
60300: EMPTY
60301: LIST
60302: LIST
60303: PUSH
60304: LD_INT 0
60306: PUSH
60307: LD_INT 2
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: PUSH
60314: LD_INT 1
60316: NEG
60317: PUSH
60318: LD_INT 1
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 2
60327: NEG
60328: PUSH
60329: LD_INT 0
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PUSH
60336: LD_INT 2
60338: NEG
60339: PUSH
60340: LD_INT 1
60342: NEG
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: LD_INT 2
60350: NEG
60351: PUSH
60352: LD_INT 2
60354: NEG
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: PUSH
60360: EMPTY
60361: LIST
60362: LIST
60363: LIST
60364: LIST
60365: LIST
60366: LIST
60367: LIST
60368: LIST
60369: LIST
60370: LIST
60371: LIST
60372: LIST
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60381: LD_ADDR_VAR 0 54
60385: PUSH
60386: LD_INT 0
60388: PUSH
60389: LD_INT 0
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PUSH
60396: LD_INT 0
60398: PUSH
60399: LD_INT 1
60401: NEG
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: PUSH
60407: LD_INT 1
60409: PUSH
60410: LD_INT 0
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 1
60419: PUSH
60420: LD_INT 1
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 0
60429: PUSH
60430: LD_INT 1
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 1
60439: NEG
60440: PUSH
60441: LD_INT 0
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: PUSH
60448: LD_INT 1
60450: NEG
60451: PUSH
60452: LD_INT 1
60454: NEG
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: LD_INT 1
60462: NEG
60463: PUSH
60464: LD_INT 2
60466: NEG
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: PUSH
60472: LD_INT 0
60474: PUSH
60475: LD_INT 2
60477: NEG
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: PUSH
60483: LD_INT 1
60485: PUSH
60486: LD_INT 1
60488: NEG
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: PUSH
60494: LD_INT 2
60496: PUSH
60497: LD_INT 0
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: PUSH
60504: LD_INT 2
60506: PUSH
60507: LD_INT 1
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: PUSH
60514: LD_INT 2
60516: PUSH
60517: LD_INT 2
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: PUSH
60524: LD_INT 1
60526: PUSH
60527: LD_INT 2
60529: PUSH
60530: EMPTY
60531: LIST
60532: LIST
60533: PUSH
60534: LD_INT 0
60536: PUSH
60537: LD_INT 2
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: PUSH
60544: LD_INT 1
60546: NEG
60547: PUSH
60548: LD_INT 1
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 2
60557: NEG
60558: PUSH
60559: LD_INT 0
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: LD_INT 2
60568: NEG
60569: PUSH
60570: LD_INT 1
60572: NEG
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: PUSH
60578: LD_INT 2
60580: NEG
60581: PUSH
60582: LD_INT 2
60584: NEG
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: PUSH
60590: EMPTY
60591: LIST
60592: LIST
60593: LIST
60594: LIST
60595: LIST
60596: LIST
60597: LIST
60598: LIST
60599: LIST
60600: LIST
60601: LIST
60602: LIST
60603: LIST
60604: LIST
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60611: LD_ADDR_VAR 0 55
60615: PUSH
60616: LD_INT 0
60618: PUSH
60619: LD_INT 0
60621: PUSH
60622: EMPTY
60623: LIST
60624: LIST
60625: PUSH
60626: LD_INT 0
60628: PUSH
60629: LD_INT 1
60631: NEG
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: PUSH
60637: LD_INT 1
60639: PUSH
60640: LD_INT 0
60642: PUSH
60643: EMPTY
60644: LIST
60645: LIST
60646: PUSH
60647: LD_INT 1
60649: PUSH
60650: LD_INT 1
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: LD_INT 0
60659: PUSH
60660: LD_INT 1
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PUSH
60667: LD_INT 1
60669: NEG
60670: PUSH
60671: LD_INT 0
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: PUSH
60678: LD_INT 1
60680: NEG
60681: PUSH
60682: LD_INT 1
60684: NEG
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: PUSH
60690: LD_INT 1
60692: NEG
60693: PUSH
60694: LD_INT 2
60696: NEG
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: PUSH
60702: LD_INT 0
60704: PUSH
60705: LD_INT 2
60707: NEG
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: PUSH
60713: LD_INT 1
60715: PUSH
60716: LD_INT 1
60718: NEG
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: PUSH
60724: LD_INT 2
60726: PUSH
60727: LD_INT 0
60729: PUSH
60730: EMPTY
60731: LIST
60732: LIST
60733: PUSH
60734: LD_INT 2
60736: PUSH
60737: LD_INT 1
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: PUSH
60744: LD_INT 2
60746: PUSH
60747: LD_INT 2
60749: PUSH
60750: EMPTY
60751: LIST
60752: LIST
60753: PUSH
60754: LD_INT 1
60756: PUSH
60757: LD_INT 2
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: PUSH
60764: LD_INT 0
60766: PUSH
60767: LD_INT 2
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: PUSH
60774: LD_INT 1
60776: NEG
60777: PUSH
60778: LD_INT 1
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 2
60787: NEG
60788: PUSH
60789: LD_INT 0
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: LD_INT 2
60798: NEG
60799: PUSH
60800: LD_INT 1
60802: NEG
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: PUSH
60808: LD_INT 2
60810: NEG
60811: PUSH
60812: LD_INT 2
60814: NEG
60815: PUSH
60816: EMPTY
60817: LIST
60818: LIST
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: LIST
60824: LIST
60825: LIST
60826: LIST
60827: LIST
60828: LIST
60829: LIST
60830: LIST
60831: LIST
60832: LIST
60833: LIST
60834: LIST
60835: LIST
60836: LIST
60837: LIST
60838: LIST
60839: LIST
60840: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60841: LD_ADDR_VAR 0 56
60845: PUSH
60846: LD_INT 0
60848: PUSH
60849: LD_INT 0
60851: PUSH
60852: EMPTY
60853: LIST
60854: LIST
60855: PUSH
60856: LD_INT 0
60858: PUSH
60859: LD_INT 1
60861: NEG
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: PUSH
60867: LD_INT 1
60869: PUSH
60870: LD_INT 0
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: PUSH
60877: LD_INT 1
60879: PUSH
60880: LD_INT 1
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: PUSH
60887: LD_INT 0
60889: PUSH
60890: LD_INT 1
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: PUSH
60897: LD_INT 1
60899: NEG
60900: PUSH
60901: LD_INT 0
60903: PUSH
60904: EMPTY
60905: LIST
60906: LIST
60907: PUSH
60908: LD_INT 1
60910: NEG
60911: PUSH
60912: LD_INT 1
60914: NEG
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: PUSH
60920: LD_INT 1
60922: NEG
60923: PUSH
60924: LD_INT 2
60926: NEG
60927: PUSH
60928: EMPTY
60929: LIST
60930: LIST
60931: PUSH
60932: LD_INT 0
60934: PUSH
60935: LD_INT 2
60937: NEG
60938: PUSH
60939: EMPTY
60940: LIST
60941: LIST
60942: PUSH
60943: LD_INT 1
60945: PUSH
60946: LD_INT 1
60948: NEG
60949: PUSH
60950: EMPTY
60951: LIST
60952: LIST
60953: PUSH
60954: LD_INT 2
60956: PUSH
60957: LD_INT 0
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: PUSH
60964: LD_INT 2
60966: PUSH
60967: LD_INT 1
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: PUSH
60974: LD_INT 2
60976: PUSH
60977: LD_INT 2
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: PUSH
60984: LD_INT 1
60986: PUSH
60987: LD_INT 2
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 0
60996: PUSH
60997: LD_INT 2
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PUSH
61004: LD_INT 1
61006: NEG
61007: PUSH
61008: LD_INT 1
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 2
61017: NEG
61018: PUSH
61019: LD_INT 0
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 2
61028: NEG
61029: PUSH
61030: LD_INT 1
61032: NEG
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: LD_INT 2
61040: NEG
61041: PUSH
61042: LD_INT 2
61044: NEG
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: LIST
61054: LIST
61055: LIST
61056: LIST
61057: LIST
61058: LIST
61059: LIST
61060: LIST
61061: LIST
61062: LIST
61063: LIST
61064: LIST
61065: LIST
61066: LIST
61067: LIST
61068: LIST
61069: LIST
61070: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61071: LD_ADDR_VAR 0 57
61075: PUSH
61076: LD_INT 0
61078: PUSH
61079: LD_INT 0
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: PUSH
61086: LD_INT 0
61088: PUSH
61089: LD_INT 1
61091: NEG
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 1
61099: PUSH
61100: LD_INT 0
61102: PUSH
61103: EMPTY
61104: LIST
61105: LIST
61106: PUSH
61107: LD_INT 1
61109: PUSH
61110: LD_INT 1
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: LD_INT 0
61119: PUSH
61120: LD_INT 1
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: LD_INT 1
61129: NEG
61130: PUSH
61131: LD_INT 0
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: PUSH
61138: LD_INT 1
61140: NEG
61141: PUSH
61142: LD_INT 1
61144: NEG
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: PUSH
61150: LD_INT 1
61152: NEG
61153: PUSH
61154: LD_INT 2
61156: NEG
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: PUSH
61162: LD_INT 0
61164: PUSH
61165: LD_INT 2
61167: NEG
61168: PUSH
61169: EMPTY
61170: LIST
61171: LIST
61172: PUSH
61173: LD_INT 1
61175: PUSH
61176: LD_INT 1
61178: NEG
61179: PUSH
61180: EMPTY
61181: LIST
61182: LIST
61183: PUSH
61184: LD_INT 2
61186: PUSH
61187: LD_INT 0
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: PUSH
61194: LD_INT 2
61196: PUSH
61197: LD_INT 1
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: PUSH
61204: LD_INT 2
61206: PUSH
61207: LD_INT 2
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: PUSH
61214: LD_INT 1
61216: PUSH
61217: LD_INT 2
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: PUSH
61224: LD_INT 0
61226: PUSH
61227: LD_INT 2
61229: PUSH
61230: EMPTY
61231: LIST
61232: LIST
61233: PUSH
61234: LD_INT 1
61236: NEG
61237: PUSH
61238: LD_INT 1
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: PUSH
61245: LD_INT 2
61247: NEG
61248: PUSH
61249: LD_INT 0
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: PUSH
61256: LD_INT 2
61258: NEG
61259: PUSH
61260: LD_INT 1
61262: NEG
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: PUSH
61268: LD_INT 2
61270: NEG
61271: PUSH
61272: LD_INT 2
61274: NEG
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: PUSH
61280: EMPTY
61281: LIST
61282: LIST
61283: LIST
61284: LIST
61285: LIST
61286: LIST
61287: LIST
61288: LIST
61289: LIST
61290: LIST
61291: LIST
61292: LIST
61293: LIST
61294: LIST
61295: LIST
61296: LIST
61297: LIST
61298: LIST
61299: LIST
61300: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61301: LD_ADDR_VAR 0 58
61305: PUSH
61306: LD_INT 0
61308: PUSH
61309: LD_INT 0
61311: PUSH
61312: EMPTY
61313: LIST
61314: LIST
61315: PUSH
61316: LD_INT 0
61318: PUSH
61319: LD_INT 1
61321: NEG
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: PUSH
61327: LD_INT 1
61329: PUSH
61330: LD_INT 0
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: PUSH
61337: LD_INT 1
61339: PUSH
61340: LD_INT 1
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: LD_INT 0
61349: PUSH
61350: LD_INT 1
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: PUSH
61357: LD_INT 1
61359: NEG
61360: PUSH
61361: LD_INT 0
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: LD_INT 1
61370: NEG
61371: PUSH
61372: LD_INT 1
61374: NEG
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: PUSH
61380: LD_INT 1
61382: NEG
61383: PUSH
61384: LD_INT 2
61386: NEG
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: PUSH
61392: LD_INT 0
61394: PUSH
61395: LD_INT 2
61397: NEG
61398: PUSH
61399: EMPTY
61400: LIST
61401: LIST
61402: PUSH
61403: LD_INT 1
61405: PUSH
61406: LD_INT 1
61408: NEG
61409: PUSH
61410: EMPTY
61411: LIST
61412: LIST
61413: PUSH
61414: LD_INT 2
61416: PUSH
61417: LD_INT 0
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: PUSH
61424: LD_INT 2
61426: PUSH
61427: LD_INT 1
61429: PUSH
61430: EMPTY
61431: LIST
61432: LIST
61433: PUSH
61434: LD_INT 2
61436: PUSH
61437: LD_INT 2
61439: PUSH
61440: EMPTY
61441: LIST
61442: LIST
61443: PUSH
61444: LD_INT 1
61446: PUSH
61447: LD_INT 2
61449: PUSH
61450: EMPTY
61451: LIST
61452: LIST
61453: PUSH
61454: LD_INT 0
61456: PUSH
61457: LD_INT 2
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: PUSH
61464: LD_INT 1
61466: NEG
61467: PUSH
61468: LD_INT 1
61470: PUSH
61471: EMPTY
61472: LIST
61473: LIST
61474: PUSH
61475: LD_INT 2
61477: NEG
61478: PUSH
61479: LD_INT 0
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: LD_INT 2
61488: NEG
61489: PUSH
61490: LD_INT 1
61492: NEG
61493: PUSH
61494: EMPTY
61495: LIST
61496: LIST
61497: PUSH
61498: LD_INT 2
61500: NEG
61501: PUSH
61502: LD_INT 2
61504: NEG
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: PUSH
61510: EMPTY
61511: LIST
61512: LIST
61513: LIST
61514: LIST
61515: LIST
61516: LIST
61517: LIST
61518: LIST
61519: LIST
61520: LIST
61521: LIST
61522: LIST
61523: LIST
61524: LIST
61525: LIST
61526: LIST
61527: LIST
61528: LIST
61529: LIST
61530: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61531: LD_ADDR_VAR 0 59
61535: PUSH
61536: LD_INT 0
61538: PUSH
61539: LD_INT 0
61541: PUSH
61542: EMPTY
61543: LIST
61544: LIST
61545: PUSH
61546: LD_INT 0
61548: PUSH
61549: LD_INT 1
61551: NEG
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: PUSH
61557: LD_INT 1
61559: PUSH
61560: LD_INT 0
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: LD_INT 1
61569: PUSH
61570: LD_INT 1
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: PUSH
61577: LD_INT 0
61579: PUSH
61580: LD_INT 1
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: PUSH
61587: LD_INT 1
61589: NEG
61590: PUSH
61591: LD_INT 0
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: PUSH
61598: LD_INT 1
61600: NEG
61601: PUSH
61602: LD_INT 1
61604: NEG
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: LIST
61614: LIST
61615: LIST
61616: LIST
61617: LIST
61618: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61619: LD_ADDR_VAR 0 60
61623: PUSH
61624: LD_INT 0
61626: PUSH
61627: LD_INT 0
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: LD_INT 0
61636: PUSH
61637: LD_INT 1
61639: NEG
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: LD_INT 1
61647: PUSH
61648: LD_INT 0
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: PUSH
61655: LD_INT 1
61657: PUSH
61658: LD_INT 1
61660: PUSH
61661: EMPTY
61662: LIST
61663: LIST
61664: PUSH
61665: LD_INT 0
61667: PUSH
61668: LD_INT 1
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: PUSH
61675: LD_INT 1
61677: NEG
61678: PUSH
61679: LD_INT 0
61681: PUSH
61682: EMPTY
61683: LIST
61684: LIST
61685: PUSH
61686: LD_INT 1
61688: NEG
61689: PUSH
61690: LD_INT 1
61692: NEG
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: PUSH
61698: EMPTY
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61707: LD_ADDR_VAR 0 61
61711: PUSH
61712: LD_INT 0
61714: PUSH
61715: LD_INT 0
61717: PUSH
61718: EMPTY
61719: LIST
61720: LIST
61721: PUSH
61722: LD_INT 0
61724: PUSH
61725: LD_INT 1
61727: NEG
61728: PUSH
61729: EMPTY
61730: LIST
61731: LIST
61732: PUSH
61733: LD_INT 1
61735: PUSH
61736: LD_INT 0
61738: PUSH
61739: EMPTY
61740: LIST
61741: LIST
61742: PUSH
61743: LD_INT 1
61745: PUSH
61746: LD_INT 1
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: PUSH
61753: LD_INT 0
61755: PUSH
61756: LD_INT 1
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: PUSH
61763: LD_INT 1
61765: NEG
61766: PUSH
61767: LD_INT 0
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: PUSH
61774: LD_INT 1
61776: NEG
61777: PUSH
61778: LD_INT 1
61780: NEG
61781: PUSH
61782: EMPTY
61783: LIST
61784: LIST
61785: PUSH
61786: EMPTY
61787: LIST
61788: LIST
61789: LIST
61790: LIST
61791: LIST
61792: LIST
61793: LIST
61794: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61795: LD_ADDR_VAR 0 62
61799: PUSH
61800: LD_INT 0
61802: PUSH
61803: LD_INT 0
61805: PUSH
61806: EMPTY
61807: LIST
61808: LIST
61809: PUSH
61810: LD_INT 0
61812: PUSH
61813: LD_INT 1
61815: NEG
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: PUSH
61821: LD_INT 1
61823: PUSH
61824: LD_INT 0
61826: PUSH
61827: EMPTY
61828: LIST
61829: LIST
61830: PUSH
61831: LD_INT 1
61833: PUSH
61834: LD_INT 1
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: PUSH
61841: LD_INT 0
61843: PUSH
61844: LD_INT 1
61846: PUSH
61847: EMPTY
61848: LIST
61849: LIST
61850: PUSH
61851: LD_INT 1
61853: NEG
61854: PUSH
61855: LD_INT 0
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: PUSH
61862: LD_INT 1
61864: NEG
61865: PUSH
61866: LD_INT 1
61868: NEG
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: EMPTY
61875: LIST
61876: LIST
61877: LIST
61878: LIST
61879: LIST
61880: LIST
61881: LIST
61882: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61883: LD_ADDR_VAR 0 63
61887: PUSH
61888: LD_INT 0
61890: PUSH
61891: LD_INT 0
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: PUSH
61898: LD_INT 0
61900: PUSH
61901: LD_INT 1
61903: NEG
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: PUSH
61909: LD_INT 1
61911: PUSH
61912: LD_INT 0
61914: PUSH
61915: EMPTY
61916: LIST
61917: LIST
61918: PUSH
61919: LD_INT 1
61921: PUSH
61922: LD_INT 1
61924: PUSH
61925: EMPTY
61926: LIST
61927: LIST
61928: PUSH
61929: LD_INT 0
61931: PUSH
61932: LD_INT 1
61934: PUSH
61935: EMPTY
61936: LIST
61937: LIST
61938: PUSH
61939: LD_INT 1
61941: NEG
61942: PUSH
61943: LD_INT 0
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: PUSH
61950: LD_INT 1
61952: NEG
61953: PUSH
61954: LD_INT 1
61956: NEG
61957: PUSH
61958: EMPTY
61959: LIST
61960: LIST
61961: PUSH
61962: EMPTY
61963: LIST
61964: LIST
61965: LIST
61966: LIST
61967: LIST
61968: LIST
61969: LIST
61970: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61971: LD_ADDR_VAR 0 64
61975: PUSH
61976: LD_INT 0
61978: PUSH
61979: LD_INT 0
61981: PUSH
61982: EMPTY
61983: LIST
61984: LIST
61985: PUSH
61986: LD_INT 0
61988: PUSH
61989: LD_INT 1
61991: NEG
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: PUSH
61997: LD_INT 1
61999: PUSH
62000: LD_INT 0
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: PUSH
62007: LD_INT 1
62009: PUSH
62010: LD_INT 1
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: PUSH
62017: LD_INT 0
62019: PUSH
62020: LD_INT 1
62022: PUSH
62023: EMPTY
62024: LIST
62025: LIST
62026: PUSH
62027: LD_INT 1
62029: NEG
62030: PUSH
62031: LD_INT 0
62033: PUSH
62034: EMPTY
62035: LIST
62036: LIST
62037: PUSH
62038: LD_INT 1
62040: NEG
62041: PUSH
62042: LD_INT 1
62044: NEG
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: PUSH
62050: EMPTY
62051: LIST
62052: LIST
62053: LIST
62054: LIST
62055: LIST
62056: LIST
62057: LIST
62058: ST_TO_ADDR
// end ; 1 :
62059: GO 67956
62061: LD_INT 1
62063: DOUBLE
62064: EQUAL
62065: IFTRUE 62069
62067: GO 64692
62069: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62070: LD_ADDR_VAR 0 11
62074: PUSH
62075: LD_INT 1
62077: NEG
62078: PUSH
62079: LD_INT 3
62081: NEG
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: PUSH
62087: LD_INT 0
62089: PUSH
62090: LD_INT 3
62092: NEG
62093: PUSH
62094: EMPTY
62095: LIST
62096: LIST
62097: PUSH
62098: LD_INT 1
62100: PUSH
62101: LD_INT 2
62103: NEG
62104: PUSH
62105: EMPTY
62106: LIST
62107: LIST
62108: PUSH
62109: EMPTY
62110: LIST
62111: LIST
62112: LIST
62113: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62114: LD_ADDR_VAR 0 12
62118: PUSH
62119: LD_INT 2
62121: PUSH
62122: LD_INT 1
62124: NEG
62125: PUSH
62126: EMPTY
62127: LIST
62128: LIST
62129: PUSH
62130: LD_INT 3
62132: PUSH
62133: LD_INT 0
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: PUSH
62140: LD_INT 3
62142: PUSH
62143: LD_INT 1
62145: PUSH
62146: EMPTY
62147: LIST
62148: LIST
62149: PUSH
62150: EMPTY
62151: LIST
62152: LIST
62153: LIST
62154: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62155: LD_ADDR_VAR 0 13
62159: PUSH
62160: LD_INT 3
62162: PUSH
62163: LD_INT 2
62165: PUSH
62166: EMPTY
62167: LIST
62168: LIST
62169: PUSH
62170: LD_INT 3
62172: PUSH
62173: LD_INT 3
62175: PUSH
62176: EMPTY
62177: LIST
62178: LIST
62179: PUSH
62180: LD_INT 2
62182: PUSH
62183: LD_INT 3
62185: PUSH
62186: EMPTY
62187: LIST
62188: LIST
62189: PUSH
62190: EMPTY
62191: LIST
62192: LIST
62193: LIST
62194: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62195: LD_ADDR_VAR 0 14
62199: PUSH
62200: LD_INT 1
62202: PUSH
62203: LD_INT 3
62205: PUSH
62206: EMPTY
62207: LIST
62208: LIST
62209: PUSH
62210: LD_INT 0
62212: PUSH
62213: LD_INT 3
62215: PUSH
62216: EMPTY
62217: LIST
62218: LIST
62219: PUSH
62220: LD_INT 1
62222: NEG
62223: PUSH
62224: LD_INT 2
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: LIST
62235: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62236: LD_ADDR_VAR 0 15
62240: PUSH
62241: LD_INT 2
62243: NEG
62244: PUSH
62245: LD_INT 1
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: PUSH
62252: LD_INT 3
62254: NEG
62255: PUSH
62256: LD_INT 0
62258: PUSH
62259: EMPTY
62260: LIST
62261: LIST
62262: PUSH
62263: LD_INT 3
62265: NEG
62266: PUSH
62267: LD_INT 1
62269: NEG
62270: PUSH
62271: EMPTY
62272: LIST
62273: LIST
62274: PUSH
62275: EMPTY
62276: LIST
62277: LIST
62278: LIST
62279: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62280: LD_ADDR_VAR 0 16
62284: PUSH
62285: LD_INT 2
62287: NEG
62288: PUSH
62289: LD_INT 3
62291: NEG
62292: PUSH
62293: EMPTY
62294: LIST
62295: LIST
62296: PUSH
62297: LD_INT 3
62299: NEG
62300: PUSH
62301: LD_INT 2
62303: NEG
62304: PUSH
62305: EMPTY
62306: LIST
62307: LIST
62308: PUSH
62309: LD_INT 3
62311: NEG
62312: PUSH
62313: LD_INT 3
62315: NEG
62316: PUSH
62317: EMPTY
62318: LIST
62319: LIST
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: LIST
62325: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62326: LD_ADDR_VAR 0 17
62330: PUSH
62331: LD_INT 1
62333: NEG
62334: PUSH
62335: LD_INT 3
62337: NEG
62338: PUSH
62339: EMPTY
62340: LIST
62341: LIST
62342: PUSH
62343: LD_INT 0
62345: PUSH
62346: LD_INT 3
62348: NEG
62349: PUSH
62350: EMPTY
62351: LIST
62352: LIST
62353: PUSH
62354: LD_INT 1
62356: PUSH
62357: LD_INT 2
62359: NEG
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: LIST
62369: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62370: LD_ADDR_VAR 0 18
62374: PUSH
62375: LD_INT 2
62377: PUSH
62378: LD_INT 1
62380: NEG
62381: PUSH
62382: EMPTY
62383: LIST
62384: LIST
62385: PUSH
62386: LD_INT 3
62388: PUSH
62389: LD_INT 0
62391: PUSH
62392: EMPTY
62393: LIST
62394: LIST
62395: PUSH
62396: LD_INT 3
62398: PUSH
62399: LD_INT 1
62401: PUSH
62402: EMPTY
62403: LIST
62404: LIST
62405: PUSH
62406: EMPTY
62407: LIST
62408: LIST
62409: LIST
62410: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62411: LD_ADDR_VAR 0 19
62415: PUSH
62416: LD_INT 3
62418: PUSH
62419: LD_INT 2
62421: PUSH
62422: EMPTY
62423: LIST
62424: LIST
62425: PUSH
62426: LD_INT 3
62428: PUSH
62429: LD_INT 3
62431: PUSH
62432: EMPTY
62433: LIST
62434: LIST
62435: PUSH
62436: LD_INT 2
62438: PUSH
62439: LD_INT 3
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: PUSH
62446: EMPTY
62447: LIST
62448: LIST
62449: LIST
62450: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62451: LD_ADDR_VAR 0 20
62455: PUSH
62456: LD_INT 1
62458: PUSH
62459: LD_INT 3
62461: PUSH
62462: EMPTY
62463: LIST
62464: LIST
62465: PUSH
62466: LD_INT 0
62468: PUSH
62469: LD_INT 3
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: LD_INT 1
62478: NEG
62479: PUSH
62480: LD_INT 2
62482: PUSH
62483: EMPTY
62484: LIST
62485: LIST
62486: PUSH
62487: EMPTY
62488: LIST
62489: LIST
62490: LIST
62491: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62492: LD_ADDR_VAR 0 21
62496: PUSH
62497: LD_INT 2
62499: NEG
62500: PUSH
62501: LD_INT 1
62503: PUSH
62504: EMPTY
62505: LIST
62506: LIST
62507: PUSH
62508: LD_INT 3
62510: NEG
62511: PUSH
62512: LD_INT 0
62514: PUSH
62515: EMPTY
62516: LIST
62517: LIST
62518: PUSH
62519: LD_INT 3
62521: NEG
62522: PUSH
62523: LD_INT 1
62525: NEG
62526: PUSH
62527: EMPTY
62528: LIST
62529: LIST
62530: PUSH
62531: EMPTY
62532: LIST
62533: LIST
62534: LIST
62535: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62536: LD_ADDR_VAR 0 22
62540: PUSH
62541: LD_INT 2
62543: NEG
62544: PUSH
62545: LD_INT 3
62547: NEG
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: PUSH
62553: LD_INT 3
62555: NEG
62556: PUSH
62557: LD_INT 2
62559: NEG
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: PUSH
62565: LD_INT 3
62567: NEG
62568: PUSH
62569: LD_INT 3
62571: NEG
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: EMPTY
62578: LIST
62579: LIST
62580: LIST
62581: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
62582: LD_ADDR_VAR 0 23
62586: PUSH
62587: LD_INT 0
62589: PUSH
62590: LD_INT 3
62592: NEG
62593: PUSH
62594: EMPTY
62595: LIST
62596: LIST
62597: PUSH
62598: LD_INT 1
62600: NEG
62601: PUSH
62602: LD_INT 4
62604: NEG
62605: PUSH
62606: EMPTY
62607: LIST
62608: LIST
62609: PUSH
62610: LD_INT 1
62612: PUSH
62613: LD_INT 3
62615: NEG
62616: PUSH
62617: EMPTY
62618: LIST
62619: LIST
62620: PUSH
62621: EMPTY
62622: LIST
62623: LIST
62624: LIST
62625: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
62626: LD_ADDR_VAR 0 24
62630: PUSH
62631: LD_INT 3
62633: PUSH
62634: LD_INT 0
62636: PUSH
62637: EMPTY
62638: LIST
62639: LIST
62640: PUSH
62641: LD_INT 3
62643: PUSH
62644: LD_INT 1
62646: NEG
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: PUSH
62652: LD_INT 4
62654: PUSH
62655: LD_INT 1
62657: PUSH
62658: EMPTY
62659: LIST
62660: LIST
62661: PUSH
62662: EMPTY
62663: LIST
62664: LIST
62665: LIST
62666: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
62667: LD_ADDR_VAR 0 25
62671: PUSH
62672: LD_INT 3
62674: PUSH
62675: LD_INT 3
62677: PUSH
62678: EMPTY
62679: LIST
62680: LIST
62681: PUSH
62682: LD_INT 4
62684: PUSH
62685: LD_INT 3
62687: PUSH
62688: EMPTY
62689: LIST
62690: LIST
62691: PUSH
62692: LD_INT 3
62694: PUSH
62695: LD_INT 4
62697: PUSH
62698: EMPTY
62699: LIST
62700: LIST
62701: PUSH
62702: EMPTY
62703: LIST
62704: LIST
62705: LIST
62706: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
62707: LD_ADDR_VAR 0 26
62711: PUSH
62712: LD_INT 0
62714: PUSH
62715: LD_INT 3
62717: PUSH
62718: EMPTY
62719: LIST
62720: LIST
62721: PUSH
62722: LD_INT 1
62724: PUSH
62725: LD_INT 4
62727: PUSH
62728: EMPTY
62729: LIST
62730: LIST
62731: PUSH
62732: LD_INT 1
62734: NEG
62735: PUSH
62736: LD_INT 3
62738: PUSH
62739: EMPTY
62740: LIST
62741: LIST
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: LIST
62747: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
62748: LD_ADDR_VAR 0 27
62752: PUSH
62753: LD_INT 3
62755: NEG
62756: PUSH
62757: LD_INT 0
62759: PUSH
62760: EMPTY
62761: LIST
62762: LIST
62763: PUSH
62764: LD_INT 3
62766: NEG
62767: PUSH
62768: LD_INT 1
62770: PUSH
62771: EMPTY
62772: LIST
62773: LIST
62774: PUSH
62775: LD_INT 4
62777: NEG
62778: PUSH
62779: LD_INT 1
62781: NEG
62782: PUSH
62783: EMPTY
62784: LIST
62785: LIST
62786: PUSH
62787: EMPTY
62788: LIST
62789: LIST
62790: LIST
62791: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
62792: LD_ADDR_VAR 0 28
62796: PUSH
62797: LD_INT 3
62799: NEG
62800: PUSH
62801: LD_INT 3
62803: NEG
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: PUSH
62809: LD_INT 3
62811: NEG
62812: PUSH
62813: LD_INT 4
62815: NEG
62816: PUSH
62817: EMPTY
62818: LIST
62819: LIST
62820: PUSH
62821: LD_INT 4
62823: NEG
62824: PUSH
62825: LD_INT 3
62827: NEG
62828: PUSH
62829: EMPTY
62830: LIST
62831: LIST
62832: PUSH
62833: EMPTY
62834: LIST
62835: LIST
62836: LIST
62837: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
62838: LD_ADDR_VAR 0 29
62842: PUSH
62843: LD_INT 1
62845: NEG
62846: PUSH
62847: LD_INT 3
62849: NEG
62850: PUSH
62851: EMPTY
62852: LIST
62853: LIST
62854: PUSH
62855: LD_INT 0
62857: PUSH
62858: LD_INT 3
62860: NEG
62861: PUSH
62862: EMPTY
62863: LIST
62864: LIST
62865: PUSH
62866: LD_INT 1
62868: PUSH
62869: LD_INT 2
62871: NEG
62872: PUSH
62873: EMPTY
62874: LIST
62875: LIST
62876: PUSH
62877: LD_INT 1
62879: NEG
62880: PUSH
62881: LD_INT 4
62883: NEG
62884: PUSH
62885: EMPTY
62886: LIST
62887: LIST
62888: PUSH
62889: LD_INT 0
62891: PUSH
62892: LD_INT 4
62894: NEG
62895: PUSH
62896: EMPTY
62897: LIST
62898: LIST
62899: PUSH
62900: LD_INT 1
62902: PUSH
62903: LD_INT 3
62905: NEG
62906: PUSH
62907: EMPTY
62908: LIST
62909: LIST
62910: PUSH
62911: LD_INT 1
62913: NEG
62914: PUSH
62915: LD_INT 5
62917: NEG
62918: PUSH
62919: EMPTY
62920: LIST
62921: LIST
62922: PUSH
62923: LD_INT 0
62925: PUSH
62926: LD_INT 5
62928: NEG
62929: PUSH
62930: EMPTY
62931: LIST
62932: LIST
62933: PUSH
62934: LD_INT 1
62936: PUSH
62937: LD_INT 4
62939: NEG
62940: PUSH
62941: EMPTY
62942: LIST
62943: LIST
62944: PUSH
62945: LD_INT 1
62947: NEG
62948: PUSH
62949: LD_INT 6
62951: NEG
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: PUSH
62957: LD_INT 0
62959: PUSH
62960: LD_INT 6
62962: NEG
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: PUSH
62968: LD_INT 1
62970: PUSH
62971: LD_INT 5
62973: NEG
62974: PUSH
62975: EMPTY
62976: LIST
62977: LIST
62978: PUSH
62979: EMPTY
62980: LIST
62981: LIST
62982: LIST
62983: LIST
62984: LIST
62985: LIST
62986: LIST
62987: LIST
62988: LIST
62989: LIST
62990: LIST
62991: LIST
62992: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
62993: LD_ADDR_VAR 0 30
62997: PUSH
62998: LD_INT 2
63000: PUSH
63001: LD_INT 1
63003: NEG
63004: PUSH
63005: EMPTY
63006: LIST
63007: LIST
63008: PUSH
63009: LD_INT 3
63011: PUSH
63012: LD_INT 0
63014: PUSH
63015: EMPTY
63016: LIST
63017: LIST
63018: PUSH
63019: LD_INT 3
63021: PUSH
63022: LD_INT 1
63024: PUSH
63025: EMPTY
63026: LIST
63027: LIST
63028: PUSH
63029: LD_INT 3
63031: PUSH
63032: LD_INT 1
63034: NEG
63035: PUSH
63036: EMPTY
63037: LIST
63038: LIST
63039: PUSH
63040: LD_INT 4
63042: PUSH
63043: LD_INT 0
63045: PUSH
63046: EMPTY
63047: LIST
63048: LIST
63049: PUSH
63050: LD_INT 4
63052: PUSH
63053: LD_INT 1
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: PUSH
63060: LD_INT 4
63062: PUSH
63063: LD_INT 1
63065: NEG
63066: PUSH
63067: EMPTY
63068: LIST
63069: LIST
63070: PUSH
63071: LD_INT 5
63073: PUSH
63074: LD_INT 0
63076: PUSH
63077: EMPTY
63078: LIST
63079: LIST
63080: PUSH
63081: LD_INT 5
63083: PUSH
63084: LD_INT 1
63086: PUSH
63087: EMPTY
63088: LIST
63089: LIST
63090: PUSH
63091: LD_INT 5
63093: PUSH
63094: LD_INT 1
63096: NEG
63097: PUSH
63098: EMPTY
63099: LIST
63100: LIST
63101: PUSH
63102: LD_INT 6
63104: PUSH
63105: LD_INT 0
63107: PUSH
63108: EMPTY
63109: LIST
63110: LIST
63111: PUSH
63112: LD_INT 6
63114: PUSH
63115: LD_INT 1
63117: PUSH
63118: EMPTY
63119: LIST
63120: LIST
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: LIST
63126: LIST
63127: LIST
63128: LIST
63129: LIST
63130: LIST
63131: LIST
63132: LIST
63133: LIST
63134: LIST
63135: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
63136: LD_ADDR_VAR 0 31
63140: PUSH
63141: LD_INT 3
63143: PUSH
63144: LD_INT 2
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: PUSH
63151: LD_INT 3
63153: PUSH
63154: LD_INT 3
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: PUSH
63161: LD_INT 2
63163: PUSH
63164: LD_INT 3
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: LD_INT 4
63173: PUSH
63174: LD_INT 3
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: PUSH
63181: LD_INT 4
63183: PUSH
63184: LD_INT 4
63186: PUSH
63187: EMPTY
63188: LIST
63189: LIST
63190: PUSH
63191: LD_INT 3
63193: PUSH
63194: LD_INT 4
63196: PUSH
63197: EMPTY
63198: LIST
63199: LIST
63200: PUSH
63201: LD_INT 5
63203: PUSH
63204: LD_INT 4
63206: PUSH
63207: EMPTY
63208: LIST
63209: LIST
63210: PUSH
63211: LD_INT 5
63213: PUSH
63214: LD_INT 5
63216: PUSH
63217: EMPTY
63218: LIST
63219: LIST
63220: PUSH
63221: LD_INT 4
63223: PUSH
63224: LD_INT 5
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: PUSH
63231: LD_INT 6
63233: PUSH
63234: LD_INT 5
63236: PUSH
63237: EMPTY
63238: LIST
63239: LIST
63240: PUSH
63241: LD_INT 6
63243: PUSH
63244: LD_INT 6
63246: PUSH
63247: EMPTY
63248: LIST
63249: LIST
63250: PUSH
63251: LD_INT 5
63253: PUSH
63254: LD_INT 6
63256: PUSH
63257: EMPTY
63258: LIST
63259: LIST
63260: PUSH
63261: EMPTY
63262: LIST
63263: LIST
63264: LIST
63265: LIST
63266: LIST
63267: LIST
63268: LIST
63269: LIST
63270: LIST
63271: LIST
63272: LIST
63273: LIST
63274: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
63275: LD_ADDR_VAR 0 32
63279: PUSH
63280: LD_INT 1
63282: PUSH
63283: LD_INT 3
63285: PUSH
63286: EMPTY
63287: LIST
63288: LIST
63289: PUSH
63290: LD_INT 0
63292: PUSH
63293: LD_INT 3
63295: PUSH
63296: EMPTY
63297: LIST
63298: LIST
63299: PUSH
63300: LD_INT 1
63302: NEG
63303: PUSH
63304: LD_INT 2
63306: PUSH
63307: EMPTY
63308: LIST
63309: LIST
63310: PUSH
63311: LD_INT 1
63313: PUSH
63314: LD_INT 4
63316: PUSH
63317: EMPTY
63318: LIST
63319: LIST
63320: PUSH
63321: LD_INT 0
63323: PUSH
63324: LD_INT 4
63326: PUSH
63327: EMPTY
63328: LIST
63329: LIST
63330: PUSH
63331: LD_INT 1
63333: NEG
63334: PUSH
63335: LD_INT 3
63337: PUSH
63338: EMPTY
63339: LIST
63340: LIST
63341: PUSH
63342: LD_INT 1
63344: PUSH
63345: LD_INT 5
63347: PUSH
63348: EMPTY
63349: LIST
63350: LIST
63351: PUSH
63352: LD_INT 0
63354: PUSH
63355: LD_INT 5
63357: PUSH
63358: EMPTY
63359: LIST
63360: LIST
63361: PUSH
63362: LD_INT 1
63364: NEG
63365: PUSH
63366: LD_INT 4
63368: PUSH
63369: EMPTY
63370: LIST
63371: LIST
63372: PUSH
63373: LD_INT 1
63375: PUSH
63376: LD_INT 6
63378: PUSH
63379: EMPTY
63380: LIST
63381: LIST
63382: PUSH
63383: LD_INT 0
63385: PUSH
63386: LD_INT 6
63388: PUSH
63389: EMPTY
63390: LIST
63391: LIST
63392: PUSH
63393: LD_INT 1
63395: NEG
63396: PUSH
63397: LD_INT 5
63399: PUSH
63400: EMPTY
63401: LIST
63402: LIST
63403: PUSH
63404: EMPTY
63405: LIST
63406: LIST
63407: LIST
63408: LIST
63409: LIST
63410: LIST
63411: LIST
63412: LIST
63413: LIST
63414: LIST
63415: LIST
63416: LIST
63417: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
63418: LD_ADDR_VAR 0 33
63422: PUSH
63423: LD_INT 2
63425: NEG
63426: PUSH
63427: LD_INT 1
63429: PUSH
63430: EMPTY
63431: LIST
63432: LIST
63433: PUSH
63434: LD_INT 3
63436: NEG
63437: PUSH
63438: LD_INT 0
63440: PUSH
63441: EMPTY
63442: LIST
63443: LIST
63444: PUSH
63445: LD_INT 3
63447: NEG
63448: PUSH
63449: LD_INT 1
63451: NEG
63452: PUSH
63453: EMPTY
63454: LIST
63455: LIST
63456: PUSH
63457: LD_INT 3
63459: NEG
63460: PUSH
63461: LD_INT 1
63463: PUSH
63464: EMPTY
63465: LIST
63466: LIST
63467: PUSH
63468: LD_INT 4
63470: NEG
63471: PUSH
63472: LD_INT 0
63474: PUSH
63475: EMPTY
63476: LIST
63477: LIST
63478: PUSH
63479: LD_INT 4
63481: NEG
63482: PUSH
63483: LD_INT 1
63485: NEG
63486: PUSH
63487: EMPTY
63488: LIST
63489: LIST
63490: PUSH
63491: LD_INT 4
63493: NEG
63494: PUSH
63495: LD_INT 1
63497: PUSH
63498: EMPTY
63499: LIST
63500: LIST
63501: PUSH
63502: LD_INT 5
63504: NEG
63505: PUSH
63506: LD_INT 0
63508: PUSH
63509: EMPTY
63510: LIST
63511: LIST
63512: PUSH
63513: LD_INT 5
63515: NEG
63516: PUSH
63517: LD_INT 1
63519: NEG
63520: PUSH
63521: EMPTY
63522: LIST
63523: LIST
63524: PUSH
63525: LD_INT 5
63527: NEG
63528: PUSH
63529: LD_INT 1
63531: PUSH
63532: EMPTY
63533: LIST
63534: LIST
63535: PUSH
63536: LD_INT 6
63538: NEG
63539: PUSH
63540: LD_INT 0
63542: PUSH
63543: EMPTY
63544: LIST
63545: LIST
63546: PUSH
63547: LD_INT 6
63549: NEG
63550: PUSH
63551: LD_INT 1
63553: NEG
63554: PUSH
63555: EMPTY
63556: LIST
63557: LIST
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: LIST
63563: LIST
63564: LIST
63565: LIST
63566: LIST
63567: LIST
63568: LIST
63569: LIST
63570: LIST
63571: LIST
63572: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
63573: LD_ADDR_VAR 0 34
63577: PUSH
63578: LD_INT 2
63580: NEG
63581: PUSH
63582: LD_INT 3
63584: NEG
63585: PUSH
63586: EMPTY
63587: LIST
63588: LIST
63589: PUSH
63590: LD_INT 3
63592: NEG
63593: PUSH
63594: LD_INT 2
63596: NEG
63597: PUSH
63598: EMPTY
63599: LIST
63600: LIST
63601: PUSH
63602: LD_INT 3
63604: NEG
63605: PUSH
63606: LD_INT 3
63608: NEG
63609: PUSH
63610: EMPTY
63611: LIST
63612: LIST
63613: PUSH
63614: LD_INT 3
63616: NEG
63617: PUSH
63618: LD_INT 4
63620: NEG
63621: PUSH
63622: EMPTY
63623: LIST
63624: LIST
63625: PUSH
63626: LD_INT 4
63628: NEG
63629: PUSH
63630: LD_INT 3
63632: NEG
63633: PUSH
63634: EMPTY
63635: LIST
63636: LIST
63637: PUSH
63638: LD_INT 4
63640: NEG
63641: PUSH
63642: LD_INT 4
63644: NEG
63645: PUSH
63646: EMPTY
63647: LIST
63648: LIST
63649: PUSH
63650: LD_INT 4
63652: NEG
63653: PUSH
63654: LD_INT 5
63656: NEG
63657: PUSH
63658: EMPTY
63659: LIST
63660: LIST
63661: PUSH
63662: LD_INT 5
63664: NEG
63665: PUSH
63666: LD_INT 4
63668: NEG
63669: PUSH
63670: EMPTY
63671: LIST
63672: LIST
63673: PUSH
63674: LD_INT 5
63676: NEG
63677: PUSH
63678: LD_INT 5
63680: NEG
63681: PUSH
63682: EMPTY
63683: LIST
63684: LIST
63685: PUSH
63686: LD_INT 5
63688: NEG
63689: PUSH
63690: LD_INT 6
63692: NEG
63693: PUSH
63694: EMPTY
63695: LIST
63696: LIST
63697: PUSH
63698: LD_INT 6
63700: NEG
63701: PUSH
63702: LD_INT 5
63704: NEG
63705: PUSH
63706: EMPTY
63707: LIST
63708: LIST
63709: PUSH
63710: LD_INT 6
63712: NEG
63713: PUSH
63714: LD_INT 6
63716: NEG
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: LIST
63726: LIST
63727: LIST
63728: LIST
63729: LIST
63730: LIST
63731: LIST
63732: LIST
63733: LIST
63734: LIST
63735: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
63736: LD_ADDR_VAR 0 41
63740: PUSH
63741: LD_INT 0
63743: PUSH
63744: LD_INT 2
63746: NEG
63747: PUSH
63748: EMPTY
63749: LIST
63750: LIST
63751: PUSH
63752: LD_INT 1
63754: NEG
63755: PUSH
63756: LD_INT 3
63758: NEG
63759: PUSH
63760: EMPTY
63761: LIST
63762: LIST
63763: PUSH
63764: LD_INT 1
63766: PUSH
63767: LD_INT 2
63769: NEG
63770: PUSH
63771: EMPTY
63772: LIST
63773: LIST
63774: PUSH
63775: EMPTY
63776: LIST
63777: LIST
63778: LIST
63779: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
63780: LD_ADDR_VAR 0 42
63784: PUSH
63785: LD_INT 2
63787: PUSH
63788: LD_INT 0
63790: PUSH
63791: EMPTY
63792: LIST
63793: LIST
63794: PUSH
63795: LD_INT 2
63797: PUSH
63798: LD_INT 1
63800: NEG
63801: PUSH
63802: EMPTY
63803: LIST
63804: LIST
63805: PUSH
63806: LD_INT 3
63808: PUSH
63809: LD_INT 1
63811: PUSH
63812: EMPTY
63813: LIST
63814: LIST
63815: PUSH
63816: EMPTY
63817: LIST
63818: LIST
63819: LIST
63820: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
63821: LD_ADDR_VAR 0 43
63825: PUSH
63826: LD_INT 2
63828: PUSH
63829: LD_INT 2
63831: PUSH
63832: EMPTY
63833: LIST
63834: LIST
63835: PUSH
63836: LD_INT 3
63838: PUSH
63839: LD_INT 2
63841: PUSH
63842: EMPTY
63843: LIST
63844: LIST
63845: PUSH
63846: LD_INT 2
63848: PUSH
63849: LD_INT 3
63851: PUSH
63852: EMPTY
63853: LIST
63854: LIST
63855: PUSH
63856: EMPTY
63857: LIST
63858: LIST
63859: LIST
63860: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
63861: LD_ADDR_VAR 0 44
63865: PUSH
63866: LD_INT 0
63868: PUSH
63869: LD_INT 2
63871: PUSH
63872: EMPTY
63873: LIST
63874: LIST
63875: PUSH
63876: LD_INT 1
63878: PUSH
63879: LD_INT 3
63881: PUSH
63882: EMPTY
63883: LIST
63884: LIST
63885: PUSH
63886: LD_INT 1
63888: NEG
63889: PUSH
63890: LD_INT 2
63892: PUSH
63893: EMPTY
63894: LIST
63895: LIST
63896: PUSH
63897: EMPTY
63898: LIST
63899: LIST
63900: LIST
63901: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63902: LD_ADDR_VAR 0 45
63906: PUSH
63907: LD_INT 2
63909: NEG
63910: PUSH
63911: LD_INT 0
63913: PUSH
63914: EMPTY
63915: LIST
63916: LIST
63917: PUSH
63918: LD_INT 2
63920: NEG
63921: PUSH
63922: LD_INT 1
63924: PUSH
63925: EMPTY
63926: LIST
63927: LIST
63928: PUSH
63929: LD_INT 3
63931: NEG
63932: PUSH
63933: LD_INT 1
63935: NEG
63936: PUSH
63937: EMPTY
63938: LIST
63939: LIST
63940: PUSH
63941: EMPTY
63942: LIST
63943: LIST
63944: LIST
63945: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
63946: LD_ADDR_VAR 0 46
63950: PUSH
63951: LD_INT 2
63953: NEG
63954: PUSH
63955: LD_INT 2
63957: NEG
63958: PUSH
63959: EMPTY
63960: LIST
63961: LIST
63962: PUSH
63963: LD_INT 2
63965: NEG
63966: PUSH
63967: LD_INT 3
63969: NEG
63970: PUSH
63971: EMPTY
63972: LIST
63973: LIST
63974: PUSH
63975: LD_INT 3
63977: NEG
63978: PUSH
63979: LD_INT 2
63981: NEG
63982: PUSH
63983: EMPTY
63984: LIST
63985: LIST
63986: PUSH
63987: EMPTY
63988: LIST
63989: LIST
63990: LIST
63991: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
63992: LD_ADDR_VAR 0 47
63996: PUSH
63997: LD_INT 2
63999: NEG
64000: PUSH
64001: LD_INT 3
64003: NEG
64004: PUSH
64005: EMPTY
64006: LIST
64007: LIST
64008: PUSH
64009: LD_INT 1
64011: NEG
64012: PUSH
64013: LD_INT 3
64015: NEG
64016: PUSH
64017: EMPTY
64018: LIST
64019: LIST
64020: PUSH
64021: EMPTY
64022: LIST
64023: LIST
64024: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
64025: LD_ADDR_VAR 0 48
64029: PUSH
64030: LD_INT 1
64032: PUSH
64033: LD_INT 2
64035: NEG
64036: PUSH
64037: EMPTY
64038: LIST
64039: LIST
64040: PUSH
64041: LD_INT 2
64043: PUSH
64044: LD_INT 1
64046: NEG
64047: PUSH
64048: EMPTY
64049: LIST
64050: LIST
64051: PUSH
64052: EMPTY
64053: LIST
64054: LIST
64055: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
64056: LD_ADDR_VAR 0 49
64060: PUSH
64061: LD_INT 3
64063: PUSH
64064: LD_INT 1
64066: PUSH
64067: EMPTY
64068: LIST
64069: LIST
64070: PUSH
64071: LD_INT 3
64073: PUSH
64074: LD_INT 2
64076: PUSH
64077: EMPTY
64078: LIST
64079: LIST
64080: PUSH
64081: EMPTY
64082: LIST
64083: LIST
64084: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
64085: LD_ADDR_VAR 0 50
64089: PUSH
64090: LD_INT 2
64092: PUSH
64093: LD_INT 3
64095: PUSH
64096: EMPTY
64097: LIST
64098: LIST
64099: PUSH
64100: LD_INT 1
64102: PUSH
64103: LD_INT 3
64105: PUSH
64106: EMPTY
64107: LIST
64108: LIST
64109: PUSH
64110: EMPTY
64111: LIST
64112: LIST
64113: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
64114: LD_ADDR_VAR 0 51
64118: PUSH
64119: LD_INT 1
64121: NEG
64122: PUSH
64123: LD_INT 2
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: PUSH
64130: LD_INT 2
64132: NEG
64133: PUSH
64134: LD_INT 1
64136: PUSH
64137: EMPTY
64138: LIST
64139: LIST
64140: PUSH
64141: EMPTY
64142: LIST
64143: LIST
64144: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
64145: LD_ADDR_VAR 0 52
64149: PUSH
64150: LD_INT 3
64152: NEG
64153: PUSH
64154: LD_INT 1
64156: NEG
64157: PUSH
64158: EMPTY
64159: LIST
64160: LIST
64161: PUSH
64162: LD_INT 3
64164: NEG
64165: PUSH
64166: LD_INT 2
64168: NEG
64169: PUSH
64170: EMPTY
64171: LIST
64172: LIST
64173: PUSH
64174: EMPTY
64175: LIST
64176: LIST
64177: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64178: LD_ADDR_VAR 0 53
64182: PUSH
64183: LD_INT 1
64185: NEG
64186: PUSH
64187: LD_INT 3
64189: NEG
64190: PUSH
64191: EMPTY
64192: LIST
64193: LIST
64194: PUSH
64195: LD_INT 0
64197: PUSH
64198: LD_INT 3
64200: NEG
64201: PUSH
64202: EMPTY
64203: LIST
64204: LIST
64205: PUSH
64206: LD_INT 1
64208: PUSH
64209: LD_INT 2
64211: NEG
64212: PUSH
64213: EMPTY
64214: LIST
64215: LIST
64216: PUSH
64217: EMPTY
64218: LIST
64219: LIST
64220: LIST
64221: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64222: LD_ADDR_VAR 0 54
64226: PUSH
64227: LD_INT 2
64229: PUSH
64230: LD_INT 1
64232: NEG
64233: PUSH
64234: EMPTY
64235: LIST
64236: LIST
64237: PUSH
64238: LD_INT 3
64240: PUSH
64241: LD_INT 0
64243: PUSH
64244: EMPTY
64245: LIST
64246: LIST
64247: PUSH
64248: LD_INT 3
64250: PUSH
64251: LD_INT 1
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: PUSH
64258: EMPTY
64259: LIST
64260: LIST
64261: LIST
64262: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64263: LD_ADDR_VAR 0 55
64267: PUSH
64268: LD_INT 3
64270: PUSH
64271: LD_INT 2
64273: PUSH
64274: EMPTY
64275: LIST
64276: LIST
64277: PUSH
64278: LD_INT 3
64280: PUSH
64281: LD_INT 3
64283: PUSH
64284: EMPTY
64285: LIST
64286: LIST
64287: PUSH
64288: LD_INT 2
64290: PUSH
64291: LD_INT 3
64293: PUSH
64294: EMPTY
64295: LIST
64296: LIST
64297: PUSH
64298: EMPTY
64299: LIST
64300: LIST
64301: LIST
64302: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64303: LD_ADDR_VAR 0 56
64307: PUSH
64308: LD_INT 1
64310: PUSH
64311: LD_INT 3
64313: PUSH
64314: EMPTY
64315: LIST
64316: LIST
64317: PUSH
64318: LD_INT 0
64320: PUSH
64321: LD_INT 3
64323: PUSH
64324: EMPTY
64325: LIST
64326: LIST
64327: PUSH
64328: LD_INT 1
64330: NEG
64331: PUSH
64332: LD_INT 2
64334: PUSH
64335: EMPTY
64336: LIST
64337: LIST
64338: PUSH
64339: EMPTY
64340: LIST
64341: LIST
64342: LIST
64343: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64344: LD_ADDR_VAR 0 57
64348: PUSH
64349: LD_INT 2
64351: NEG
64352: PUSH
64353: LD_INT 1
64355: PUSH
64356: EMPTY
64357: LIST
64358: LIST
64359: PUSH
64360: LD_INT 3
64362: NEG
64363: PUSH
64364: LD_INT 0
64366: PUSH
64367: EMPTY
64368: LIST
64369: LIST
64370: PUSH
64371: LD_INT 3
64373: NEG
64374: PUSH
64375: LD_INT 1
64377: NEG
64378: PUSH
64379: EMPTY
64380: LIST
64381: LIST
64382: PUSH
64383: EMPTY
64384: LIST
64385: LIST
64386: LIST
64387: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64388: LD_ADDR_VAR 0 58
64392: PUSH
64393: LD_INT 2
64395: NEG
64396: PUSH
64397: LD_INT 3
64399: NEG
64400: PUSH
64401: EMPTY
64402: LIST
64403: LIST
64404: PUSH
64405: LD_INT 3
64407: NEG
64408: PUSH
64409: LD_INT 2
64411: NEG
64412: PUSH
64413: EMPTY
64414: LIST
64415: LIST
64416: PUSH
64417: LD_INT 3
64419: NEG
64420: PUSH
64421: LD_INT 3
64423: NEG
64424: PUSH
64425: EMPTY
64426: LIST
64427: LIST
64428: PUSH
64429: EMPTY
64430: LIST
64431: LIST
64432: LIST
64433: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
64434: LD_ADDR_VAR 0 59
64438: PUSH
64439: LD_INT 1
64441: NEG
64442: PUSH
64443: LD_INT 2
64445: NEG
64446: PUSH
64447: EMPTY
64448: LIST
64449: LIST
64450: PUSH
64451: LD_INT 0
64453: PUSH
64454: LD_INT 2
64456: NEG
64457: PUSH
64458: EMPTY
64459: LIST
64460: LIST
64461: PUSH
64462: LD_INT 1
64464: PUSH
64465: LD_INT 1
64467: NEG
64468: PUSH
64469: EMPTY
64470: LIST
64471: LIST
64472: PUSH
64473: EMPTY
64474: LIST
64475: LIST
64476: LIST
64477: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64478: LD_ADDR_VAR 0 60
64482: PUSH
64483: LD_INT 1
64485: PUSH
64486: LD_INT 1
64488: NEG
64489: PUSH
64490: EMPTY
64491: LIST
64492: LIST
64493: PUSH
64494: LD_INT 2
64496: PUSH
64497: LD_INT 0
64499: PUSH
64500: EMPTY
64501: LIST
64502: LIST
64503: PUSH
64504: LD_INT 2
64506: PUSH
64507: LD_INT 1
64509: PUSH
64510: EMPTY
64511: LIST
64512: LIST
64513: PUSH
64514: EMPTY
64515: LIST
64516: LIST
64517: LIST
64518: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64519: LD_ADDR_VAR 0 61
64523: PUSH
64524: LD_INT 2
64526: PUSH
64527: LD_INT 1
64529: PUSH
64530: EMPTY
64531: LIST
64532: LIST
64533: PUSH
64534: LD_INT 2
64536: PUSH
64537: LD_INT 2
64539: PUSH
64540: EMPTY
64541: LIST
64542: LIST
64543: PUSH
64544: LD_INT 1
64546: PUSH
64547: LD_INT 2
64549: PUSH
64550: EMPTY
64551: LIST
64552: LIST
64553: PUSH
64554: EMPTY
64555: LIST
64556: LIST
64557: LIST
64558: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64559: LD_ADDR_VAR 0 62
64563: PUSH
64564: LD_INT 1
64566: PUSH
64567: LD_INT 2
64569: PUSH
64570: EMPTY
64571: LIST
64572: LIST
64573: PUSH
64574: LD_INT 0
64576: PUSH
64577: LD_INT 2
64579: PUSH
64580: EMPTY
64581: LIST
64582: LIST
64583: PUSH
64584: LD_INT 1
64586: NEG
64587: PUSH
64588: LD_INT 1
64590: PUSH
64591: EMPTY
64592: LIST
64593: LIST
64594: PUSH
64595: EMPTY
64596: LIST
64597: LIST
64598: LIST
64599: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64600: LD_ADDR_VAR 0 63
64604: PUSH
64605: LD_INT 1
64607: NEG
64608: PUSH
64609: LD_INT 1
64611: PUSH
64612: EMPTY
64613: LIST
64614: LIST
64615: PUSH
64616: LD_INT 2
64618: NEG
64619: PUSH
64620: LD_INT 0
64622: PUSH
64623: EMPTY
64624: LIST
64625: LIST
64626: PUSH
64627: LD_INT 2
64629: NEG
64630: PUSH
64631: LD_INT 1
64633: NEG
64634: PUSH
64635: EMPTY
64636: LIST
64637: LIST
64638: PUSH
64639: EMPTY
64640: LIST
64641: LIST
64642: LIST
64643: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64644: LD_ADDR_VAR 0 64
64648: PUSH
64649: LD_INT 1
64651: NEG
64652: PUSH
64653: LD_INT 2
64655: NEG
64656: PUSH
64657: EMPTY
64658: LIST
64659: LIST
64660: PUSH
64661: LD_INT 2
64663: NEG
64664: PUSH
64665: LD_INT 1
64667: NEG
64668: PUSH
64669: EMPTY
64670: LIST
64671: LIST
64672: PUSH
64673: LD_INT 2
64675: NEG
64676: PUSH
64677: LD_INT 2
64679: NEG
64680: PUSH
64681: EMPTY
64682: LIST
64683: LIST
64684: PUSH
64685: EMPTY
64686: LIST
64687: LIST
64688: LIST
64689: ST_TO_ADDR
// end ; 2 :
64690: GO 67956
64692: LD_INT 2
64694: DOUBLE
64695: EQUAL
64696: IFTRUE 64700
64698: GO 67955
64700: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
64701: LD_ADDR_VAR 0 29
64705: PUSH
64706: LD_INT 4
64708: PUSH
64709: LD_INT 0
64711: PUSH
64712: EMPTY
64713: LIST
64714: LIST
64715: PUSH
64716: LD_INT 4
64718: PUSH
64719: LD_INT 1
64721: NEG
64722: PUSH
64723: EMPTY
64724: LIST
64725: LIST
64726: PUSH
64727: LD_INT 5
64729: PUSH
64730: LD_INT 0
64732: PUSH
64733: EMPTY
64734: LIST
64735: LIST
64736: PUSH
64737: LD_INT 5
64739: PUSH
64740: LD_INT 1
64742: PUSH
64743: EMPTY
64744: LIST
64745: LIST
64746: PUSH
64747: LD_INT 4
64749: PUSH
64750: LD_INT 1
64752: PUSH
64753: EMPTY
64754: LIST
64755: LIST
64756: PUSH
64757: LD_INT 3
64759: PUSH
64760: LD_INT 0
64762: PUSH
64763: EMPTY
64764: LIST
64765: LIST
64766: PUSH
64767: LD_INT 3
64769: PUSH
64770: LD_INT 1
64772: NEG
64773: PUSH
64774: EMPTY
64775: LIST
64776: LIST
64777: PUSH
64778: LD_INT 3
64780: PUSH
64781: LD_INT 2
64783: NEG
64784: PUSH
64785: EMPTY
64786: LIST
64787: LIST
64788: PUSH
64789: LD_INT 5
64791: PUSH
64792: LD_INT 2
64794: PUSH
64795: EMPTY
64796: LIST
64797: LIST
64798: PUSH
64799: LD_INT 3
64801: PUSH
64802: LD_INT 3
64804: PUSH
64805: EMPTY
64806: LIST
64807: LIST
64808: PUSH
64809: LD_INT 3
64811: PUSH
64812: LD_INT 2
64814: PUSH
64815: EMPTY
64816: LIST
64817: LIST
64818: PUSH
64819: LD_INT 4
64821: PUSH
64822: LD_INT 3
64824: PUSH
64825: EMPTY
64826: LIST
64827: LIST
64828: PUSH
64829: LD_INT 4
64831: PUSH
64832: LD_INT 4
64834: PUSH
64835: EMPTY
64836: LIST
64837: LIST
64838: PUSH
64839: LD_INT 3
64841: PUSH
64842: LD_INT 4
64844: PUSH
64845: EMPTY
64846: LIST
64847: LIST
64848: PUSH
64849: LD_INT 2
64851: PUSH
64852: LD_INT 3
64854: PUSH
64855: EMPTY
64856: LIST
64857: LIST
64858: PUSH
64859: LD_INT 2
64861: PUSH
64862: LD_INT 2
64864: PUSH
64865: EMPTY
64866: LIST
64867: LIST
64868: PUSH
64869: LD_INT 4
64871: PUSH
64872: LD_INT 2
64874: PUSH
64875: EMPTY
64876: LIST
64877: LIST
64878: PUSH
64879: LD_INT 2
64881: PUSH
64882: LD_INT 4
64884: PUSH
64885: EMPTY
64886: LIST
64887: LIST
64888: PUSH
64889: LD_INT 0
64891: PUSH
64892: LD_INT 4
64894: PUSH
64895: EMPTY
64896: LIST
64897: LIST
64898: PUSH
64899: LD_INT 0
64901: PUSH
64902: LD_INT 3
64904: PUSH
64905: EMPTY
64906: LIST
64907: LIST
64908: PUSH
64909: LD_INT 1
64911: PUSH
64912: LD_INT 4
64914: PUSH
64915: EMPTY
64916: LIST
64917: LIST
64918: PUSH
64919: LD_INT 1
64921: PUSH
64922: LD_INT 5
64924: PUSH
64925: EMPTY
64926: LIST
64927: LIST
64928: PUSH
64929: LD_INT 0
64931: PUSH
64932: LD_INT 5
64934: PUSH
64935: EMPTY
64936: LIST
64937: LIST
64938: PUSH
64939: LD_INT 1
64941: NEG
64942: PUSH
64943: LD_INT 4
64945: PUSH
64946: EMPTY
64947: LIST
64948: LIST
64949: PUSH
64950: LD_INT 1
64952: NEG
64953: PUSH
64954: LD_INT 3
64956: PUSH
64957: EMPTY
64958: LIST
64959: LIST
64960: PUSH
64961: LD_INT 2
64963: PUSH
64964: LD_INT 5
64966: PUSH
64967: EMPTY
64968: LIST
64969: LIST
64970: PUSH
64971: LD_INT 2
64973: NEG
64974: PUSH
64975: LD_INT 3
64977: PUSH
64978: EMPTY
64979: LIST
64980: LIST
64981: PUSH
64982: LD_INT 3
64984: NEG
64985: PUSH
64986: LD_INT 0
64988: PUSH
64989: EMPTY
64990: LIST
64991: LIST
64992: PUSH
64993: LD_INT 3
64995: NEG
64996: PUSH
64997: LD_INT 1
64999: NEG
65000: PUSH
65001: EMPTY
65002: LIST
65003: LIST
65004: PUSH
65005: LD_INT 2
65007: NEG
65008: PUSH
65009: LD_INT 0
65011: PUSH
65012: EMPTY
65013: LIST
65014: LIST
65015: PUSH
65016: LD_INT 2
65018: NEG
65019: PUSH
65020: LD_INT 1
65022: PUSH
65023: EMPTY
65024: LIST
65025: LIST
65026: PUSH
65027: LD_INT 3
65029: NEG
65030: PUSH
65031: LD_INT 1
65033: PUSH
65034: EMPTY
65035: LIST
65036: LIST
65037: PUSH
65038: LD_INT 4
65040: NEG
65041: PUSH
65042: LD_INT 0
65044: PUSH
65045: EMPTY
65046: LIST
65047: LIST
65048: PUSH
65049: LD_INT 4
65051: NEG
65052: PUSH
65053: LD_INT 1
65055: NEG
65056: PUSH
65057: EMPTY
65058: LIST
65059: LIST
65060: PUSH
65061: LD_INT 4
65063: NEG
65064: PUSH
65065: LD_INT 2
65067: NEG
65068: PUSH
65069: EMPTY
65070: LIST
65071: LIST
65072: PUSH
65073: LD_INT 2
65075: NEG
65076: PUSH
65077: LD_INT 2
65079: PUSH
65080: EMPTY
65081: LIST
65082: LIST
65083: PUSH
65084: LD_INT 4
65086: NEG
65087: PUSH
65088: LD_INT 4
65090: NEG
65091: PUSH
65092: EMPTY
65093: LIST
65094: LIST
65095: PUSH
65096: LD_INT 4
65098: NEG
65099: PUSH
65100: LD_INT 5
65102: NEG
65103: PUSH
65104: EMPTY
65105: LIST
65106: LIST
65107: PUSH
65108: LD_INT 3
65110: NEG
65111: PUSH
65112: LD_INT 4
65114: NEG
65115: PUSH
65116: EMPTY
65117: LIST
65118: LIST
65119: PUSH
65120: LD_INT 3
65122: NEG
65123: PUSH
65124: LD_INT 3
65126: NEG
65127: PUSH
65128: EMPTY
65129: LIST
65130: LIST
65131: PUSH
65132: LD_INT 4
65134: NEG
65135: PUSH
65136: LD_INT 3
65138: NEG
65139: PUSH
65140: EMPTY
65141: LIST
65142: LIST
65143: PUSH
65144: LD_INT 5
65146: NEG
65147: PUSH
65148: LD_INT 4
65150: NEG
65151: PUSH
65152: EMPTY
65153: LIST
65154: LIST
65155: PUSH
65156: LD_INT 5
65158: NEG
65159: PUSH
65160: LD_INT 5
65162: NEG
65163: PUSH
65164: EMPTY
65165: LIST
65166: LIST
65167: PUSH
65168: LD_INT 3
65170: NEG
65171: PUSH
65172: LD_INT 5
65174: NEG
65175: PUSH
65176: EMPTY
65177: LIST
65178: LIST
65179: PUSH
65180: LD_INT 5
65182: NEG
65183: PUSH
65184: LD_INT 3
65186: NEG
65187: PUSH
65188: EMPTY
65189: LIST
65190: LIST
65191: PUSH
65192: EMPTY
65193: LIST
65194: LIST
65195: LIST
65196: LIST
65197: LIST
65198: LIST
65199: LIST
65200: LIST
65201: LIST
65202: LIST
65203: LIST
65204: LIST
65205: LIST
65206: LIST
65207: LIST
65208: LIST
65209: LIST
65210: LIST
65211: LIST
65212: LIST
65213: LIST
65214: LIST
65215: LIST
65216: LIST
65217: LIST
65218: LIST
65219: LIST
65220: LIST
65221: LIST
65222: LIST
65223: LIST
65224: LIST
65225: LIST
65226: LIST
65227: LIST
65228: LIST
65229: LIST
65230: LIST
65231: LIST
65232: LIST
65233: LIST
65234: LIST
65235: LIST
65236: LIST
65237: LIST
65238: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
65239: LD_ADDR_VAR 0 30
65243: PUSH
65244: LD_INT 4
65246: PUSH
65247: LD_INT 4
65249: PUSH
65250: EMPTY
65251: LIST
65252: LIST
65253: PUSH
65254: LD_INT 4
65256: PUSH
65257: LD_INT 3
65259: PUSH
65260: EMPTY
65261: LIST
65262: LIST
65263: PUSH
65264: LD_INT 5
65266: PUSH
65267: LD_INT 4
65269: PUSH
65270: EMPTY
65271: LIST
65272: LIST
65273: PUSH
65274: LD_INT 5
65276: PUSH
65277: LD_INT 5
65279: PUSH
65280: EMPTY
65281: LIST
65282: LIST
65283: PUSH
65284: LD_INT 4
65286: PUSH
65287: LD_INT 5
65289: PUSH
65290: EMPTY
65291: LIST
65292: LIST
65293: PUSH
65294: LD_INT 3
65296: PUSH
65297: LD_INT 4
65299: PUSH
65300: EMPTY
65301: LIST
65302: LIST
65303: PUSH
65304: LD_INT 3
65306: PUSH
65307: LD_INT 3
65309: PUSH
65310: EMPTY
65311: LIST
65312: LIST
65313: PUSH
65314: LD_INT 5
65316: PUSH
65317: LD_INT 3
65319: PUSH
65320: EMPTY
65321: LIST
65322: LIST
65323: PUSH
65324: LD_INT 3
65326: PUSH
65327: LD_INT 5
65329: PUSH
65330: EMPTY
65331: LIST
65332: LIST
65333: PUSH
65334: LD_INT 0
65336: PUSH
65337: LD_INT 3
65339: PUSH
65340: EMPTY
65341: LIST
65342: LIST
65343: PUSH
65344: LD_INT 0
65346: PUSH
65347: LD_INT 2
65349: PUSH
65350: EMPTY
65351: LIST
65352: LIST
65353: PUSH
65354: LD_INT 1
65356: PUSH
65357: LD_INT 3
65359: PUSH
65360: EMPTY
65361: LIST
65362: LIST
65363: PUSH
65364: LD_INT 1
65366: PUSH
65367: LD_INT 4
65369: PUSH
65370: EMPTY
65371: LIST
65372: LIST
65373: PUSH
65374: LD_INT 0
65376: PUSH
65377: LD_INT 4
65379: PUSH
65380: EMPTY
65381: LIST
65382: LIST
65383: PUSH
65384: LD_INT 1
65386: NEG
65387: PUSH
65388: LD_INT 3
65390: PUSH
65391: EMPTY
65392: LIST
65393: LIST
65394: PUSH
65395: LD_INT 1
65397: NEG
65398: PUSH
65399: LD_INT 2
65401: PUSH
65402: EMPTY
65403: LIST
65404: LIST
65405: PUSH
65406: LD_INT 2
65408: PUSH
65409: LD_INT 4
65411: PUSH
65412: EMPTY
65413: LIST
65414: LIST
65415: PUSH
65416: LD_INT 2
65418: NEG
65419: PUSH
65420: LD_INT 2
65422: PUSH
65423: EMPTY
65424: LIST
65425: LIST
65426: PUSH
65427: LD_INT 4
65429: NEG
65430: PUSH
65431: LD_INT 0
65433: PUSH
65434: EMPTY
65435: LIST
65436: LIST
65437: PUSH
65438: LD_INT 4
65440: NEG
65441: PUSH
65442: LD_INT 1
65444: NEG
65445: PUSH
65446: EMPTY
65447: LIST
65448: LIST
65449: PUSH
65450: LD_INT 3
65452: NEG
65453: PUSH
65454: LD_INT 0
65456: PUSH
65457: EMPTY
65458: LIST
65459: LIST
65460: PUSH
65461: LD_INT 3
65463: NEG
65464: PUSH
65465: LD_INT 1
65467: PUSH
65468: EMPTY
65469: LIST
65470: LIST
65471: PUSH
65472: LD_INT 4
65474: NEG
65475: PUSH
65476: LD_INT 1
65478: PUSH
65479: EMPTY
65480: LIST
65481: LIST
65482: PUSH
65483: LD_INT 5
65485: NEG
65486: PUSH
65487: LD_INT 0
65489: PUSH
65490: EMPTY
65491: LIST
65492: LIST
65493: PUSH
65494: LD_INT 5
65496: NEG
65497: PUSH
65498: LD_INT 1
65500: NEG
65501: PUSH
65502: EMPTY
65503: LIST
65504: LIST
65505: PUSH
65506: LD_INT 5
65508: NEG
65509: PUSH
65510: LD_INT 2
65512: NEG
65513: PUSH
65514: EMPTY
65515: LIST
65516: LIST
65517: PUSH
65518: LD_INT 3
65520: NEG
65521: PUSH
65522: LD_INT 2
65524: PUSH
65525: EMPTY
65526: LIST
65527: LIST
65528: PUSH
65529: LD_INT 3
65531: NEG
65532: PUSH
65533: LD_INT 3
65535: NEG
65536: PUSH
65537: EMPTY
65538: LIST
65539: LIST
65540: PUSH
65541: LD_INT 3
65543: NEG
65544: PUSH
65545: LD_INT 4
65547: NEG
65548: PUSH
65549: EMPTY
65550: LIST
65551: LIST
65552: PUSH
65553: LD_INT 2
65555: NEG
65556: PUSH
65557: LD_INT 3
65559: NEG
65560: PUSH
65561: EMPTY
65562: LIST
65563: LIST
65564: PUSH
65565: LD_INT 2
65567: NEG
65568: PUSH
65569: LD_INT 2
65571: NEG
65572: PUSH
65573: EMPTY
65574: LIST
65575: LIST
65576: PUSH
65577: LD_INT 3
65579: NEG
65580: PUSH
65581: LD_INT 2
65583: NEG
65584: PUSH
65585: EMPTY
65586: LIST
65587: LIST
65588: PUSH
65589: LD_INT 4
65591: NEG
65592: PUSH
65593: LD_INT 3
65595: NEG
65596: PUSH
65597: EMPTY
65598: LIST
65599: LIST
65600: PUSH
65601: LD_INT 4
65603: NEG
65604: PUSH
65605: LD_INT 4
65607: NEG
65608: PUSH
65609: EMPTY
65610: LIST
65611: LIST
65612: PUSH
65613: LD_INT 2
65615: NEG
65616: PUSH
65617: LD_INT 4
65619: NEG
65620: PUSH
65621: EMPTY
65622: LIST
65623: LIST
65624: PUSH
65625: LD_INT 4
65627: NEG
65628: PUSH
65629: LD_INT 2
65631: NEG
65632: PUSH
65633: EMPTY
65634: LIST
65635: LIST
65636: PUSH
65637: LD_INT 0
65639: PUSH
65640: LD_INT 4
65642: NEG
65643: PUSH
65644: EMPTY
65645: LIST
65646: LIST
65647: PUSH
65648: LD_INT 0
65650: PUSH
65651: LD_INT 5
65653: NEG
65654: PUSH
65655: EMPTY
65656: LIST
65657: LIST
65658: PUSH
65659: LD_INT 1
65661: PUSH
65662: LD_INT 4
65664: NEG
65665: PUSH
65666: EMPTY
65667: LIST
65668: LIST
65669: PUSH
65670: LD_INT 1
65672: PUSH
65673: LD_INT 3
65675: NEG
65676: PUSH
65677: EMPTY
65678: LIST
65679: LIST
65680: PUSH
65681: LD_INT 0
65683: PUSH
65684: LD_INT 3
65686: NEG
65687: PUSH
65688: EMPTY
65689: LIST
65690: LIST
65691: PUSH
65692: LD_INT 1
65694: NEG
65695: PUSH
65696: LD_INT 4
65698: NEG
65699: PUSH
65700: EMPTY
65701: LIST
65702: LIST
65703: PUSH
65704: LD_INT 1
65706: NEG
65707: PUSH
65708: LD_INT 5
65710: NEG
65711: PUSH
65712: EMPTY
65713: LIST
65714: LIST
65715: PUSH
65716: LD_INT 2
65718: PUSH
65719: LD_INT 3
65721: NEG
65722: PUSH
65723: EMPTY
65724: LIST
65725: LIST
65726: PUSH
65727: LD_INT 2
65729: NEG
65730: PUSH
65731: LD_INT 5
65733: NEG
65734: PUSH
65735: EMPTY
65736: LIST
65737: LIST
65738: PUSH
65739: EMPTY
65740: LIST
65741: LIST
65742: LIST
65743: LIST
65744: LIST
65745: LIST
65746: LIST
65747: LIST
65748: LIST
65749: LIST
65750: LIST
65751: LIST
65752: LIST
65753: LIST
65754: LIST
65755: LIST
65756: LIST
65757: LIST
65758: LIST
65759: LIST
65760: LIST
65761: LIST
65762: LIST
65763: LIST
65764: LIST
65765: LIST
65766: LIST
65767: LIST
65768: LIST
65769: LIST
65770: LIST
65771: LIST
65772: LIST
65773: LIST
65774: LIST
65775: LIST
65776: LIST
65777: LIST
65778: LIST
65779: LIST
65780: LIST
65781: LIST
65782: LIST
65783: LIST
65784: LIST
65785: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
65786: LD_ADDR_VAR 0 31
65790: PUSH
65791: LD_INT 0
65793: PUSH
65794: LD_INT 4
65796: PUSH
65797: EMPTY
65798: LIST
65799: LIST
65800: PUSH
65801: LD_INT 0
65803: PUSH
65804: LD_INT 3
65806: PUSH
65807: EMPTY
65808: LIST
65809: LIST
65810: PUSH
65811: LD_INT 1
65813: PUSH
65814: LD_INT 4
65816: PUSH
65817: EMPTY
65818: LIST
65819: LIST
65820: PUSH
65821: LD_INT 1
65823: PUSH
65824: LD_INT 5
65826: PUSH
65827: EMPTY
65828: LIST
65829: LIST
65830: PUSH
65831: LD_INT 0
65833: PUSH
65834: LD_INT 5
65836: PUSH
65837: EMPTY
65838: LIST
65839: LIST
65840: PUSH
65841: LD_INT 1
65843: NEG
65844: PUSH
65845: LD_INT 4
65847: PUSH
65848: EMPTY
65849: LIST
65850: LIST
65851: PUSH
65852: LD_INT 1
65854: NEG
65855: PUSH
65856: LD_INT 3
65858: PUSH
65859: EMPTY
65860: LIST
65861: LIST
65862: PUSH
65863: LD_INT 2
65865: PUSH
65866: LD_INT 5
65868: PUSH
65869: EMPTY
65870: LIST
65871: LIST
65872: PUSH
65873: LD_INT 2
65875: NEG
65876: PUSH
65877: LD_INT 3
65879: PUSH
65880: EMPTY
65881: LIST
65882: LIST
65883: PUSH
65884: LD_INT 3
65886: NEG
65887: PUSH
65888: LD_INT 0
65890: PUSH
65891: EMPTY
65892: LIST
65893: LIST
65894: PUSH
65895: LD_INT 3
65897: NEG
65898: PUSH
65899: LD_INT 1
65901: NEG
65902: PUSH
65903: EMPTY
65904: LIST
65905: LIST
65906: PUSH
65907: LD_INT 2
65909: NEG
65910: PUSH
65911: LD_INT 0
65913: PUSH
65914: EMPTY
65915: LIST
65916: LIST
65917: PUSH
65918: LD_INT 2
65920: NEG
65921: PUSH
65922: LD_INT 1
65924: PUSH
65925: EMPTY
65926: LIST
65927: LIST
65928: PUSH
65929: LD_INT 3
65931: NEG
65932: PUSH
65933: LD_INT 1
65935: PUSH
65936: EMPTY
65937: LIST
65938: LIST
65939: PUSH
65940: LD_INT 4
65942: NEG
65943: PUSH
65944: LD_INT 0
65946: PUSH
65947: EMPTY
65948: LIST
65949: LIST
65950: PUSH
65951: LD_INT 4
65953: NEG
65954: PUSH
65955: LD_INT 1
65957: NEG
65958: PUSH
65959: EMPTY
65960: LIST
65961: LIST
65962: PUSH
65963: LD_INT 4
65965: NEG
65966: PUSH
65967: LD_INT 2
65969: NEG
65970: PUSH
65971: EMPTY
65972: LIST
65973: LIST
65974: PUSH
65975: LD_INT 2
65977: NEG
65978: PUSH
65979: LD_INT 2
65981: PUSH
65982: EMPTY
65983: LIST
65984: LIST
65985: PUSH
65986: LD_INT 4
65988: NEG
65989: PUSH
65990: LD_INT 4
65992: NEG
65993: PUSH
65994: EMPTY
65995: LIST
65996: LIST
65997: PUSH
65998: LD_INT 4
66000: NEG
66001: PUSH
66002: LD_INT 5
66004: NEG
66005: PUSH
66006: EMPTY
66007: LIST
66008: LIST
66009: PUSH
66010: LD_INT 3
66012: NEG
66013: PUSH
66014: LD_INT 4
66016: NEG
66017: PUSH
66018: EMPTY
66019: LIST
66020: LIST
66021: PUSH
66022: LD_INT 3
66024: NEG
66025: PUSH
66026: LD_INT 3
66028: NEG
66029: PUSH
66030: EMPTY
66031: LIST
66032: LIST
66033: PUSH
66034: LD_INT 4
66036: NEG
66037: PUSH
66038: LD_INT 3
66040: NEG
66041: PUSH
66042: EMPTY
66043: LIST
66044: LIST
66045: PUSH
66046: LD_INT 5
66048: NEG
66049: PUSH
66050: LD_INT 4
66052: NEG
66053: PUSH
66054: EMPTY
66055: LIST
66056: LIST
66057: PUSH
66058: LD_INT 5
66060: NEG
66061: PUSH
66062: LD_INT 5
66064: NEG
66065: PUSH
66066: EMPTY
66067: LIST
66068: LIST
66069: PUSH
66070: LD_INT 3
66072: NEG
66073: PUSH
66074: LD_INT 5
66076: NEG
66077: PUSH
66078: EMPTY
66079: LIST
66080: LIST
66081: PUSH
66082: LD_INT 5
66084: NEG
66085: PUSH
66086: LD_INT 3
66088: NEG
66089: PUSH
66090: EMPTY
66091: LIST
66092: LIST
66093: PUSH
66094: LD_INT 0
66096: PUSH
66097: LD_INT 3
66099: NEG
66100: PUSH
66101: EMPTY
66102: LIST
66103: LIST
66104: PUSH
66105: LD_INT 0
66107: PUSH
66108: LD_INT 4
66110: NEG
66111: PUSH
66112: EMPTY
66113: LIST
66114: LIST
66115: PUSH
66116: LD_INT 1
66118: PUSH
66119: LD_INT 3
66121: NEG
66122: PUSH
66123: EMPTY
66124: LIST
66125: LIST
66126: PUSH
66127: LD_INT 1
66129: PUSH
66130: LD_INT 2
66132: NEG
66133: PUSH
66134: EMPTY
66135: LIST
66136: LIST
66137: PUSH
66138: LD_INT 0
66140: PUSH
66141: LD_INT 2
66143: NEG
66144: PUSH
66145: EMPTY
66146: LIST
66147: LIST
66148: PUSH
66149: LD_INT 1
66151: NEG
66152: PUSH
66153: LD_INT 3
66155: NEG
66156: PUSH
66157: EMPTY
66158: LIST
66159: LIST
66160: PUSH
66161: LD_INT 1
66163: NEG
66164: PUSH
66165: LD_INT 4
66167: NEG
66168: PUSH
66169: EMPTY
66170: LIST
66171: LIST
66172: PUSH
66173: LD_INT 2
66175: PUSH
66176: LD_INT 2
66178: NEG
66179: PUSH
66180: EMPTY
66181: LIST
66182: LIST
66183: PUSH
66184: LD_INT 2
66186: NEG
66187: PUSH
66188: LD_INT 4
66190: NEG
66191: PUSH
66192: EMPTY
66193: LIST
66194: LIST
66195: PUSH
66196: LD_INT 4
66198: PUSH
66199: LD_INT 0
66201: PUSH
66202: EMPTY
66203: LIST
66204: LIST
66205: PUSH
66206: LD_INT 4
66208: PUSH
66209: LD_INT 1
66211: NEG
66212: PUSH
66213: EMPTY
66214: LIST
66215: LIST
66216: PUSH
66217: LD_INT 5
66219: PUSH
66220: LD_INT 0
66222: PUSH
66223: EMPTY
66224: LIST
66225: LIST
66226: PUSH
66227: LD_INT 5
66229: PUSH
66230: LD_INT 1
66232: PUSH
66233: EMPTY
66234: LIST
66235: LIST
66236: PUSH
66237: LD_INT 4
66239: PUSH
66240: LD_INT 1
66242: PUSH
66243: EMPTY
66244: LIST
66245: LIST
66246: PUSH
66247: LD_INT 3
66249: PUSH
66250: LD_INT 0
66252: PUSH
66253: EMPTY
66254: LIST
66255: LIST
66256: PUSH
66257: LD_INT 3
66259: PUSH
66260: LD_INT 1
66262: NEG
66263: PUSH
66264: EMPTY
66265: LIST
66266: LIST
66267: PUSH
66268: LD_INT 3
66270: PUSH
66271: LD_INT 2
66273: NEG
66274: PUSH
66275: EMPTY
66276: LIST
66277: LIST
66278: PUSH
66279: LD_INT 5
66281: PUSH
66282: LD_INT 2
66284: PUSH
66285: EMPTY
66286: LIST
66287: LIST
66288: PUSH
66289: EMPTY
66290: LIST
66291: LIST
66292: LIST
66293: LIST
66294: LIST
66295: LIST
66296: LIST
66297: LIST
66298: LIST
66299: LIST
66300: LIST
66301: LIST
66302: LIST
66303: LIST
66304: LIST
66305: LIST
66306: LIST
66307: LIST
66308: LIST
66309: LIST
66310: LIST
66311: LIST
66312: LIST
66313: LIST
66314: LIST
66315: LIST
66316: LIST
66317: LIST
66318: LIST
66319: LIST
66320: LIST
66321: LIST
66322: LIST
66323: LIST
66324: LIST
66325: LIST
66326: LIST
66327: LIST
66328: LIST
66329: LIST
66330: LIST
66331: LIST
66332: LIST
66333: LIST
66334: LIST
66335: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
66336: LD_ADDR_VAR 0 32
66340: PUSH
66341: LD_INT 4
66343: NEG
66344: PUSH
66345: LD_INT 0
66347: PUSH
66348: EMPTY
66349: LIST
66350: LIST
66351: PUSH
66352: LD_INT 4
66354: NEG
66355: PUSH
66356: LD_INT 1
66358: NEG
66359: PUSH
66360: EMPTY
66361: LIST
66362: LIST
66363: PUSH
66364: LD_INT 3
66366: NEG
66367: PUSH
66368: LD_INT 0
66370: PUSH
66371: EMPTY
66372: LIST
66373: LIST
66374: PUSH
66375: LD_INT 3
66377: NEG
66378: PUSH
66379: LD_INT 1
66381: PUSH
66382: EMPTY
66383: LIST
66384: LIST
66385: PUSH
66386: LD_INT 4
66388: NEG
66389: PUSH
66390: LD_INT 1
66392: PUSH
66393: EMPTY
66394: LIST
66395: LIST
66396: PUSH
66397: LD_INT 5
66399: NEG
66400: PUSH
66401: LD_INT 0
66403: PUSH
66404: EMPTY
66405: LIST
66406: LIST
66407: PUSH
66408: LD_INT 5
66410: NEG
66411: PUSH
66412: LD_INT 1
66414: NEG
66415: PUSH
66416: EMPTY
66417: LIST
66418: LIST
66419: PUSH
66420: LD_INT 5
66422: NEG
66423: PUSH
66424: LD_INT 2
66426: NEG
66427: PUSH
66428: EMPTY
66429: LIST
66430: LIST
66431: PUSH
66432: LD_INT 3
66434: NEG
66435: PUSH
66436: LD_INT 2
66438: PUSH
66439: EMPTY
66440: LIST
66441: LIST
66442: PUSH
66443: LD_INT 3
66445: NEG
66446: PUSH
66447: LD_INT 3
66449: NEG
66450: PUSH
66451: EMPTY
66452: LIST
66453: LIST
66454: PUSH
66455: LD_INT 3
66457: NEG
66458: PUSH
66459: LD_INT 4
66461: NEG
66462: PUSH
66463: EMPTY
66464: LIST
66465: LIST
66466: PUSH
66467: LD_INT 2
66469: NEG
66470: PUSH
66471: LD_INT 3
66473: NEG
66474: PUSH
66475: EMPTY
66476: LIST
66477: LIST
66478: PUSH
66479: LD_INT 2
66481: NEG
66482: PUSH
66483: LD_INT 2
66485: NEG
66486: PUSH
66487: EMPTY
66488: LIST
66489: LIST
66490: PUSH
66491: LD_INT 3
66493: NEG
66494: PUSH
66495: LD_INT 2
66497: NEG
66498: PUSH
66499: EMPTY
66500: LIST
66501: LIST
66502: PUSH
66503: LD_INT 4
66505: NEG
66506: PUSH
66507: LD_INT 3
66509: NEG
66510: PUSH
66511: EMPTY
66512: LIST
66513: LIST
66514: PUSH
66515: LD_INT 4
66517: NEG
66518: PUSH
66519: LD_INT 4
66521: NEG
66522: PUSH
66523: EMPTY
66524: LIST
66525: LIST
66526: PUSH
66527: LD_INT 2
66529: NEG
66530: PUSH
66531: LD_INT 4
66533: NEG
66534: PUSH
66535: EMPTY
66536: LIST
66537: LIST
66538: PUSH
66539: LD_INT 4
66541: NEG
66542: PUSH
66543: LD_INT 2
66545: NEG
66546: PUSH
66547: EMPTY
66548: LIST
66549: LIST
66550: PUSH
66551: LD_INT 0
66553: PUSH
66554: LD_INT 4
66556: NEG
66557: PUSH
66558: EMPTY
66559: LIST
66560: LIST
66561: PUSH
66562: LD_INT 0
66564: PUSH
66565: LD_INT 5
66567: NEG
66568: PUSH
66569: EMPTY
66570: LIST
66571: LIST
66572: PUSH
66573: LD_INT 1
66575: PUSH
66576: LD_INT 4
66578: NEG
66579: PUSH
66580: EMPTY
66581: LIST
66582: LIST
66583: PUSH
66584: LD_INT 1
66586: PUSH
66587: LD_INT 3
66589: NEG
66590: PUSH
66591: EMPTY
66592: LIST
66593: LIST
66594: PUSH
66595: LD_INT 0
66597: PUSH
66598: LD_INT 3
66600: NEG
66601: PUSH
66602: EMPTY
66603: LIST
66604: LIST
66605: PUSH
66606: LD_INT 1
66608: NEG
66609: PUSH
66610: LD_INT 4
66612: NEG
66613: PUSH
66614: EMPTY
66615: LIST
66616: LIST
66617: PUSH
66618: LD_INT 1
66620: NEG
66621: PUSH
66622: LD_INT 5
66624: NEG
66625: PUSH
66626: EMPTY
66627: LIST
66628: LIST
66629: PUSH
66630: LD_INT 2
66632: PUSH
66633: LD_INT 3
66635: NEG
66636: PUSH
66637: EMPTY
66638: LIST
66639: LIST
66640: PUSH
66641: LD_INT 2
66643: NEG
66644: PUSH
66645: LD_INT 5
66647: NEG
66648: PUSH
66649: EMPTY
66650: LIST
66651: LIST
66652: PUSH
66653: LD_INT 3
66655: PUSH
66656: LD_INT 0
66658: PUSH
66659: EMPTY
66660: LIST
66661: LIST
66662: PUSH
66663: LD_INT 3
66665: PUSH
66666: LD_INT 1
66668: NEG
66669: PUSH
66670: EMPTY
66671: LIST
66672: LIST
66673: PUSH
66674: LD_INT 4
66676: PUSH
66677: LD_INT 0
66679: PUSH
66680: EMPTY
66681: LIST
66682: LIST
66683: PUSH
66684: LD_INT 4
66686: PUSH
66687: LD_INT 1
66689: PUSH
66690: EMPTY
66691: LIST
66692: LIST
66693: PUSH
66694: LD_INT 3
66696: PUSH
66697: LD_INT 1
66699: PUSH
66700: EMPTY
66701: LIST
66702: LIST
66703: PUSH
66704: LD_INT 2
66706: PUSH
66707: LD_INT 0
66709: PUSH
66710: EMPTY
66711: LIST
66712: LIST
66713: PUSH
66714: LD_INT 2
66716: PUSH
66717: LD_INT 1
66719: NEG
66720: PUSH
66721: EMPTY
66722: LIST
66723: LIST
66724: PUSH
66725: LD_INT 2
66727: PUSH
66728: LD_INT 2
66730: NEG
66731: PUSH
66732: EMPTY
66733: LIST
66734: LIST
66735: PUSH
66736: LD_INT 4
66738: PUSH
66739: LD_INT 2
66741: PUSH
66742: EMPTY
66743: LIST
66744: LIST
66745: PUSH
66746: LD_INT 4
66748: PUSH
66749: LD_INT 4
66751: PUSH
66752: EMPTY
66753: LIST
66754: LIST
66755: PUSH
66756: LD_INT 4
66758: PUSH
66759: LD_INT 3
66761: PUSH
66762: EMPTY
66763: LIST
66764: LIST
66765: PUSH
66766: LD_INT 5
66768: PUSH
66769: LD_INT 4
66771: PUSH
66772: EMPTY
66773: LIST
66774: LIST
66775: PUSH
66776: LD_INT 5
66778: PUSH
66779: LD_INT 5
66781: PUSH
66782: EMPTY
66783: LIST
66784: LIST
66785: PUSH
66786: LD_INT 4
66788: PUSH
66789: LD_INT 5
66791: PUSH
66792: EMPTY
66793: LIST
66794: LIST
66795: PUSH
66796: LD_INT 3
66798: PUSH
66799: LD_INT 4
66801: PUSH
66802: EMPTY
66803: LIST
66804: LIST
66805: PUSH
66806: LD_INT 3
66808: PUSH
66809: LD_INT 3
66811: PUSH
66812: EMPTY
66813: LIST
66814: LIST
66815: PUSH
66816: LD_INT 5
66818: PUSH
66819: LD_INT 3
66821: PUSH
66822: EMPTY
66823: LIST
66824: LIST
66825: PUSH
66826: LD_INT 3
66828: PUSH
66829: LD_INT 5
66831: PUSH
66832: EMPTY
66833: LIST
66834: LIST
66835: PUSH
66836: EMPTY
66837: LIST
66838: LIST
66839: LIST
66840: LIST
66841: LIST
66842: LIST
66843: LIST
66844: LIST
66845: LIST
66846: LIST
66847: LIST
66848: LIST
66849: LIST
66850: LIST
66851: LIST
66852: LIST
66853: LIST
66854: LIST
66855: LIST
66856: LIST
66857: LIST
66858: LIST
66859: LIST
66860: LIST
66861: LIST
66862: LIST
66863: LIST
66864: LIST
66865: LIST
66866: LIST
66867: LIST
66868: LIST
66869: LIST
66870: LIST
66871: LIST
66872: LIST
66873: LIST
66874: LIST
66875: LIST
66876: LIST
66877: LIST
66878: LIST
66879: LIST
66880: LIST
66881: LIST
66882: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
66883: LD_ADDR_VAR 0 33
66887: PUSH
66888: LD_INT 4
66890: NEG
66891: PUSH
66892: LD_INT 4
66894: NEG
66895: PUSH
66896: EMPTY
66897: LIST
66898: LIST
66899: PUSH
66900: LD_INT 4
66902: NEG
66903: PUSH
66904: LD_INT 5
66906: NEG
66907: PUSH
66908: EMPTY
66909: LIST
66910: LIST
66911: PUSH
66912: LD_INT 3
66914: NEG
66915: PUSH
66916: LD_INT 4
66918: NEG
66919: PUSH
66920: EMPTY
66921: LIST
66922: LIST
66923: PUSH
66924: LD_INT 3
66926: NEG
66927: PUSH
66928: LD_INT 3
66930: NEG
66931: PUSH
66932: EMPTY
66933: LIST
66934: LIST
66935: PUSH
66936: LD_INT 4
66938: NEG
66939: PUSH
66940: LD_INT 3
66942: NEG
66943: PUSH
66944: EMPTY
66945: LIST
66946: LIST
66947: PUSH
66948: LD_INT 5
66950: NEG
66951: PUSH
66952: LD_INT 4
66954: NEG
66955: PUSH
66956: EMPTY
66957: LIST
66958: LIST
66959: PUSH
66960: LD_INT 5
66962: NEG
66963: PUSH
66964: LD_INT 5
66966: NEG
66967: PUSH
66968: EMPTY
66969: LIST
66970: LIST
66971: PUSH
66972: LD_INT 3
66974: NEG
66975: PUSH
66976: LD_INT 5
66978: NEG
66979: PUSH
66980: EMPTY
66981: LIST
66982: LIST
66983: PUSH
66984: LD_INT 5
66986: NEG
66987: PUSH
66988: LD_INT 3
66990: NEG
66991: PUSH
66992: EMPTY
66993: LIST
66994: LIST
66995: PUSH
66996: LD_INT 0
66998: PUSH
66999: LD_INT 3
67001: NEG
67002: PUSH
67003: EMPTY
67004: LIST
67005: LIST
67006: PUSH
67007: LD_INT 0
67009: PUSH
67010: LD_INT 4
67012: NEG
67013: PUSH
67014: EMPTY
67015: LIST
67016: LIST
67017: PUSH
67018: LD_INT 1
67020: PUSH
67021: LD_INT 3
67023: NEG
67024: PUSH
67025: EMPTY
67026: LIST
67027: LIST
67028: PUSH
67029: LD_INT 1
67031: PUSH
67032: LD_INT 2
67034: NEG
67035: PUSH
67036: EMPTY
67037: LIST
67038: LIST
67039: PUSH
67040: LD_INT 0
67042: PUSH
67043: LD_INT 2
67045: NEG
67046: PUSH
67047: EMPTY
67048: LIST
67049: LIST
67050: PUSH
67051: LD_INT 1
67053: NEG
67054: PUSH
67055: LD_INT 3
67057: NEG
67058: PUSH
67059: EMPTY
67060: LIST
67061: LIST
67062: PUSH
67063: LD_INT 1
67065: NEG
67066: PUSH
67067: LD_INT 4
67069: NEG
67070: PUSH
67071: EMPTY
67072: LIST
67073: LIST
67074: PUSH
67075: LD_INT 2
67077: PUSH
67078: LD_INT 2
67080: NEG
67081: PUSH
67082: EMPTY
67083: LIST
67084: LIST
67085: PUSH
67086: LD_INT 2
67088: NEG
67089: PUSH
67090: LD_INT 4
67092: NEG
67093: PUSH
67094: EMPTY
67095: LIST
67096: LIST
67097: PUSH
67098: LD_INT 4
67100: PUSH
67101: LD_INT 0
67103: PUSH
67104: EMPTY
67105: LIST
67106: LIST
67107: PUSH
67108: LD_INT 4
67110: PUSH
67111: LD_INT 1
67113: NEG
67114: PUSH
67115: EMPTY
67116: LIST
67117: LIST
67118: PUSH
67119: LD_INT 5
67121: PUSH
67122: LD_INT 0
67124: PUSH
67125: EMPTY
67126: LIST
67127: LIST
67128: PUSH
67129: LD_INT 5
67131: PUSH
67132: LD_INT 1
67134: PUSH
67135: EMPTY
67136: LIST
67137: LIST
67138: PUSH
67139: LD_INT 4
67141: PUSH
67142: LD_INT 1
67144: PUSH
67145: EMPTY
67146: LIST
67147: LIST
67148: PUSH
67149: LD_INT 3
67151: PUSH
67152: LD_INT 0
67154: PUSH
67155: EMPTY
67156: LIST
67157: LIST
67158: PUSH
67159: LD_INT 3
67161: PUSH
67162: LD_INT 1
67164: NEG
67165: PUSH
67166: EMPTY
67167: LIST
67168: LIST
67169: PUSH
67170: LD_INT 3
67172: PUSH
67173: LD_INT 2
67175: NEG
67176: PUSH
67177: EMPTY
67178: LIST
67179: LIST
67180: PUSH
67181: LD_INT 5
67183: PUSH
67184: LD_INT 2
67186: PUSH
67187: EMPTY
67188: LIST
67189: LIST
67190: PUSH
67191: LD_INT 3
67193: PUSH
67194: LD_INT 3
67196: PUSH
67197: EMPTY
67198: LIST
67199: LIST
67200: PUSH
67201: LD_INT 3
67203: PUSH
67204: LD_INT 2
67206: PUSH
67207: EMPTY
67208: LIST
67209: LIST
67210: PUSH
67211: LD_INT 4
67213: PUSH
67214: LD_INT 3
67216: PUSH
67217: EMPTY
67218: LIST
67219: LIST
67220: PUSH
67221: LD_INT 4
67223: PUSH
67224: LD_INT 4
67226: PUSH
67227: EMPTY
67228: LIST
67229: LIST
67230: PUSH
67231: LD_INT 3
67233: PUSH
67234: LD_INT 4
67236: PUSH
67237: EMPTY
67238: LIST
67239: LIST
67240: PUSH
67241: LD_INT 2
67243: PUSH
67244: LD_INT 3
67246: PUSH
67247: EMPTY
67248: LIST
67249: LIST
67250: PUSH
67251: LD_INT 2
67253: PUSH
67254: LD_INT 2
67256: PUSH
67257: EMPTY
67258: LIST
67259: LIST
67260: PUSH
67261: LD_INT 4
67263: PUSH
67264: LD_INT 2
67266: PUSH
67267: EMPTY
67268: LIST
67269: LIST
67270: PUSH
67271: LD_INT 2
67273: PUSH
67274: LD_INT 4
67276: PUSH
67277: EMPTY
67278: LIST
67279: LIST
67280: PUSH
67281: LD_INT 0
67283: PUSH
67284: LD_INT 4
67286: PUSH
67287: EMPTY
67288: LIST
67289: LIST
67290: PUSH
67291: LD_INT 0
67293: PUSH
67294: LD_INT 3
67296: PUSH
67297: EMPTY
67298: LIST
67299: LIST
67300: PUSH
67301: LD_INT 1
67303: PUSH
67304: LD_INT 4
67306: PUSH
67307: EMPTY
67308: LIST
67309: LIST
67310: PUSH
67311: LD_INT 1
67313: PUSH
67314: LD_INT 5
67316: PUSH
67317: EMPTY
67318: LIST
67319: LIST
67320: PUSH
67321: LD_INT 0
67323: PUSH
67324: LD_INT 5
67326: PUSH
67327: EMPTY
67328: LIST
67329: LIST
67330: PUSH
67331: LD_INT 1
67333: NEG
67334: PUSH
67335: LD_INT 4
67337: PUSH
67338: EMPTY
67339: LIST
67340: LIST
67341: PUSH
67342: LD_INT 1
67344: NEG
67345: PUSH
67346: LD_INT 3
67348: PUSH
67349: EMPTY
67350: LIST
67351: LIST
67352: PUSH
67353: LD_INT 2
67355: PUSH
67356: LD_INT 5
67358: PUSH
67359: EMPTY
67360: LIST
67361: LIST
67362: PUSH
67363: LD_INT 2
67365: NEG
67366: PUSH
67367: LD_INT 3
67369: PUSH
67370: EMPTY
67371: LIST
67372: LIST
67373: PUSH
67374: EMPTY
67375: LIST
67376: LIST
67377: LIST
67378: LIST
67379: LIST
67380: LIST
67381: LIST
67382: LIST
67383: LIST
67384: LIST
67385: LIST
67386: LIST
67387: LIST
67388: LIST
67389: LIST
67390: LIST
67391: LIST
67392: LIST
67393: LIST
67394: LIST
67395: LIST
67396: LIST
67397: LIST
67398: LIST
67399: LIST
67400: LIST
67401: LIST
67402: LIST
67403: LIST
67404: LIST
67405: LIST
67406: LIST
67407: LIST
67408: LIST
67409: LIST
67410: LIST
67411: LIST
67412: LIST
67413: LIST
67414: LIST
67415: LIST
67416: LIST
67417: LIST
67418: LIST
67419: LIST
67420: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
67421: LD_ADDR_VAR 0 34
67425: PUSH
67426: LD_INT 0
67428: PUSH
67429: LD_INT 4
67431: NEG
67432: PUSH
67433: EMPTY
67434: LIST
67435: LIST
67436: PUSH
67437: LD_INT 0
67439: PUSH
67440: LD_INT 5
67442: NEG
67443: PUSH
67444: EMPTY
67445: LIST
67446: LIST
67447: PUSH
67448: LD_INT 1
67450: PUSH
67451: LD_INT 4
67453: NEG
67454: PUSH
67455: EMPTY
67456: LIST
67457: LIST
67458: PUSH
67459: LD_INT 1
67461: PUSH
67462: LD_INT 3
67464: NEG
67465: PUSH
67466: EMPTY
67467: LIST
67468: LIST
67469: PUSH
67470: LD_INT 0
67472: PUSH
67473: LD_INT 3
67475: NEG
67476: PUSH
67477: EMPTY
67478: LIST
67479: LIST
67480: PUSH
67481: LD_INT 1
67483: NEG
67484: PUSH
67485: LD_INT 4
67487: NEG
67488: PUSH
67489: EMPTY
67490: LIST
67491: LIST
67492: PUSH
67493: LD_INT 1
67495: NEG
67496: PUSH
67497: LD_INT 5
67499: NEG
67500: PUSH
67501: EMPTY
67502: LIST
67503: LIST
67504: PUSH
67505: LD_INT 2
67507: PUSH
67508: LD_INT 3
67510: NEG
67511: PUSH
67512: EMPTY
67513: LIST
67514: LIST
67515: PUSH
67516: LD_INT 2
67518: NEG
67519: PUSH
67520: LD_INT 5
67522: NEG
67523: PUSH
67524: EMPTY
67525: LIST
67526: LIST
67527: PUSH
67528: LD_INT 3
67530: PUSH
67531: LD_INT 0
67533: PUSH
67534: EMPTY
67535: LIST
67536: LIST
67537: PUSH
67538: LD_INT 3
67540: PUSH
67541: LD_INT 1
67543: NEG
67544: PUSH
67545: EMPTY
67546: LIST
67547: LIST
67548: PUSH
67549: LD_INT 4
67551: PUSH
67552: LD_INT 0
67554: PUSH
67555: EMPTY
67556: LIST
67557: LIST
67558: PUSH
67559: LD_INT 4
67561: PUSH
67562: LD_INT 1
67564: PUSH
67565: EMPTY
67566: LIST
67567: LIST
67568: PUSH
67569: LD_INT 3
67571: PUSH
67572: LD_INT 1
67574: PUSH
67575: EMPTY
67576: LIST
67577: LIST
67578: PUSH
67579: LD_INT 2
67581: PUSH
67582: LD_INT 0
67584: PUSH
67585: EMPTY
67586: LIST
67587: LIST
67588: PUSH
67589: LD_INT 2
67591: PUSH
67592: LD_INT 1
67594: NEG
67595: PUSH
67596: EMPTY
67597: LIST
67598: LIST
67599: PUSH
67600: LD_INT 2
67602: PUSH
67603: LD_INT 2
67605: NEG
67606: PUSH
67607: EMPTY
67608: LIST
67609: LIST
67610: PUSH
67611: LD_INT 4
67613: PUSH
67614: LD_INT 2
67616: PUSH
67617: EMPTY
67618: LIST
67619: LIST
67620: PUSH
67621: LD_INT 4
67623: PUSH
67624: LD_INT 4
67626: PUSH
67627: EMPTY
67628: LIST
67629: LIST
67630: PUSH
67631: LD_INT 4
67633: PUSH
67634: LD_INT 3
67636: PUSH
67637: EMPTY
67638: LIST
67639: LIST
67640: PUSH
67641: LD_INT 5
67643: PUSH
67644: LD_INT 4
67646: PUSH
67647: EMPTY
67648: LIST
67649: LIST
67650: PUSH
67651: LD_INT 5
67653: PUSH
67654: LD_INT 5
67656: PUSH
67657: EMPTY
67658: LIST
67659: LIST
67660: PUSH
67661: LD_INT 4
67663: PUSH
67664: LD_INT 5
67666: PUSH
67667: EMPTY
67668: LIST
67669: LIST
67670: PUSH
67671: LD_INT 3
67673: PUSH
67674: LD_INT 4
67676: PUSH
67677: EMPTY
67678: LIST
67679: LIST
67680: PUSH
67681: LD_INT 3
67683: PUSH
67684: LD_INT 3
67686: PUSH
67687: EMPTY
67688: LIST
67689: LIST
67690: PUSH
67691: LD_INT 5
67693: PUSH
67694: LD_INT 3
67696: PUSH
67697: EMPTY
67698: LIST
67699: LIST
67700: PUSH
67701: LD_INT 3
67703: PUSH
67704: LD_INT 5
67706: PUSH
67707: EMPTY
67708: LIST
67709: LIST
67710: PUSH
67711: LD_INT 0
67713: PUSH
67714: LD_INT 3
67716: PUSH
67717: EMPTY
67718: LIST
67719: LIST
67720: PUSH
67721: LD_INT 0
67723: PUSH
67724: LD_INT 2
67726: PUSH
67727: EMPTY
67728: LIST
67729: LIST
67730: PUSH
67731: LD_INT 1
67733: PUSH
67734: LD_INT 3
67736: PUSH
67737: EMPTY
67738: LIST
67739: LIST
67740: PUSH
67741: LD_INT 1
67743: PUSH
67744: LD_INT 4
67746: PUSH
67747: EMPTY
67748: LIST
67749: LIST
67750: PUSH
67751: LD_INT 0
67753: PUSH
67754: LD_INT 4
67756: PUSH
67757: EMPTY
67758: LIST
67759: LIST
67760: PUSH
67761: LD_INT 1
67763: NEG
67764: PUSH
67765: LD_INT 3
67767: PUSH
67768: EMPTY
67769: LIST
67770: LIST
67771: PUSH
67772: LD_INT 1
67774: NEG
67775: PUSH
67776: LD_INT 2
67778: PUSH
67779: EMPTY
67780: LIST
67781: LIST
67782: PUSH
67783: LD_INT 2
67785: PUSH
67786: LD_INT 4
67788: PUSH
67789: EMPTY
67790: LIST
67791: LIST
67792: PUSH
67793: LD_INT 2
67795: NEG
67796: PUSH
67797: LD_INT 2
67799: PUSH
67800: EMPTY
67801: LIST
67802: LIST
67803: PUSH
67804: LD_INT 4
67806: NEG
67807: PUSH
67808: LD_INT 0
67810: PUSH
67811: EMPTY
67812: LIST
67813: LIST
67814: PUSH
67815: LD_INT 4
67817: NEG
67818: PUSH
67819: LD_INT 1
67821: NEG
67822: PUSH
67823: EMPTY
67824: LIST
67825: LIST
67826: PUSH
67827: LD_INT 3
67829: NEG
67830: PUSH
67831: LD_INT 0
67833: PUSH
67834: EMPTY
67835: LIST
67836: LIST
67837: PUSH
67838: LD_INT 3
67840: NEG
67841: PUSH
67842: LD_INT 1
67844: PUSH
67845: EMPTY
67846: LIST
67847: LIST
67848: PUSH
67849: LD_INT 4
67851: NEG
67852: PUSH
67853: LD_INT 1
67855: PUSH
67856: EMPTY
67857: LIST
67858: LIST
67859: PUSH
67860: LD_INT 5
67862: NEG
67863: PUSH
67864: LD_INT 0
67866: PUSH
67867: EMPTY
67868: LIST
67869: LIST
67870: PUSH
67871: LD_INT 5
67873: NEG
67874: PUSH
67875: LD_INT 1
67877: NEG
67878: PUSH
67879: EMPTY
67880: LIST
67881: LIST
67882: PUSH
67883: LD_INT 5
67885: NEG
67886: PUSH
67887: LD_INT 2
67889: NEG
67890: PUSH
67891: EMPTY
67892: LIST
67893: LIST
67894: PUSH
67895: LD_INT 3
67897: NEG
67898: PUSH
67899: LD_INT 2
67901: PUSH
67902: EMPTY
67903: LIST
67904: LIST
67905: PUSH
67906: EMPTY
67907: LIST
67908: LIST
67909: LIST
67910: LIST
67911: LIST
67912: LIST
67913: LIST
67914: LIST
67915: LIST
67916: LIST
67917: LIST
67918: LIST
67919: LIST
67920: LIST
67921: LIST
67922: LIST
67923: LIST
67924: LIST
67925: LIST
67926: LIST
67927: LIST
67928: LIST
67929: LIST
67930: LIST
67931: LIST
67932: LIST
67933: LIST
67934: LIST
67935: LIST
67936: LIST
67937: LIST
67938: LIST
67939: LIST
67940: LIST
67941: LIST
67942: LIST
67943: LIST
67944: LIST
67945: LIST
67946: LIST
67947: LIST
67948: LIST
67949: LIST
67950: LIST
67951: LIST
67952: ST_TO_ADDR
// end ; end ;
67953: GO 67956
67955: POP
// case btype of b_depot , b_warehouse :
67956: LD_VAR 0 1
67960: PUSH
67961: LD_INT 0
67963: DOUBLE
67964: EQUAL
67965: IFTRUE 67975
67967: LD_INT 1
67969: DOUBLE
67970: EQUAL
67971: IFTRUE 67975
67973: GO 68176
67975: POP
// case nation of nation_american :
67976: LD_VAR 0 5
67980: PUSH
67981: LD_INT 1
67983: DOUBLE
67984: EQUAL
67985: IFTRUE 67989
67987: GO 68045
67989: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
67990: LD_ADDR_VAR 0 9
67994: PUSH
67995: LD_VAR 0 11
67999: PUSH
68000: LD_VAR 0 12
68004: PUSH
68005: LD_VAR 0 13
68009: PUSH
68010: LD_VAR 0 14
68014: PUSH
68015: LD_VAR 0 15
68019: PUSH
68020: LD_VAR 0 16
68024: PUSH
68025: EMPTY
68026: LIST
68027: LIST
68028: LIST
68029: LIST
68030: LIST
68031: LIST
68032: PUSH
68033: LD_VAR 0 4
68037: PUSH
68038: LD_INT 1
68040: PLUS
68041: ARRAY
68042: ST_TO_ADDR
68043: GO 68174
68045: LD_INT 2
68047: DOUBLE
68048: EQUAL
68049: IFTRUE 68053
68051: GO 68109
68053: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
68054: LD_ADDR_VAR 0 9
68058: PUSH
68059: LD_VAR 0 17
68063: PUSH
68064: LD_VAR 0 18
68068: PUSH
68069: LD_VAR 0 19
68073: PUSH
68074: LD_VAR 0 20
68078: PUSH
68079: LD_VAR 0 21
68083: PUSH
68084: LD_VAR 0 22
68088: PUSH
68089: EMPTY
68090: LIST
68091: LIST
68092: LIST
68093: LIST
68094: LIST
68095: LIST
68096: PUSH
68097: LD_VAR 0 4
68101: PUSH
68102: LD_INT 1
68104: PLUS
68105: ARRAY
68106: ST_TO_ADDR
68107: GO 68174
68109: LD_INT 3
68111: DOUBLE
68112: EQUAL
68113: IFTRUE 68117
68115: GO 68173
68117: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
68118: LD_ADDR_VAR 0 9
68122: PUSH
68123: LD_VAR 0 23
68127: PUSH
68128: LD_VAR 0 24
68132: PUSH
68133: LD_VAR 0 25
68137: PUSH
68138: LD_VAR 0 26
68142: PUSH
68143: LD_VAR 0 27
68147: PUSH
68148: LD_VAR 0 28
68152: PUSH
68153: EMPTY
68154: LIST
68155: LIST
68156: LIST
68157: LIST
68158: LIST
68159: LIST
68160: PUSH
68161: LD_VAR 0 4
68165: PUSH
68166: LD_INT 1
68168: PLUS
68169: ARRAY
68170: ST_TO_ADDR
68171: GO 68174
68173: POP
68174: GO 68729
68176: LD_INT 2
68178: DOUBLE
68179: EQUAL
68180: IFTRUE 68190
68182: LD_INT 3
68184: DOUBLE
68185: EQUAL
68186: IFTRUE 68190
68188: GO 68246
68190: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
68191: LD_ADDR_VAR 0 9
68195: PUSH
68196: LD_VAR 0 29
68200: PUSH
68201: LD_VAR 0 30
68205: PUSH
68206: LD_VAR 0 31
68210: PUSH
68211: LD_VAR 0 32
68215: PUSH
68216: LD_VAR 0 33
68220: PUSH
68221: LD_VAR 0 34
68225: PUSH
68226: EMPTY
68227: LIST
68228: LIST
68229: LIST
68230: LIST
68231: LIST
68232: LIST
68233: PUSH
68234: LD_VAR 0 4
68238: PUSH
68239: LD_INT 1
68241: PLUS
68242: ARRAY
68243: ST_TO_ADDR
68244: GO 68729
68246: LD_INT 16
68248: DOUBLE
68249: EQUAL
68250: IFTRUE 68308
68252: LD_INT 17
68254: DOUBLE
68255: EQUAL
68256: IFTRUE 68308
68258: LD_INT 18
68260: DOUBLE
68261: EQUAL
68262: IFTRUE 68308
68264: LD_INT 19
68266: DOUBLE
68267: EQUAL
68268: IFTRUE 68308
68270: LD_INT 22
68272: DOUBLE
68273: EQUAL
68274: IFTRUE 68308
68276: LD_INT 20
68278: DOUBLE
68279: EQUAL
68280: IFTRUE 68308
68282: LD_INT 21
68284: DOUBLE
68285: EQUAL
68286: IFTRUE 68308
68288: LD_INT 23
68290: DOUBLE
68291: EQUAL
68292: IFTRUE 68308
68294: LD_INT 24
68296: DOUBLE
68297: EQUAL
68298: IFTRUE 68308
68300: LD_INT 25
68302: DOUBLE
68303: EQUAL
68304: IFTRUE 68308
68306: GO 68364
68308: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
68309: LD_ADDR_VAR 0 9
68313: PUSH
68314: LD_VAR 0 35
68318: PUSH
68319: LD_VAR 0 36
68323: PUSH
68324: LD_VAR 0 37
68328: PUSH
68329: LD_VAR 0 38
68333: PUSH
68334: LD_VAR 0 39
68338: PUSH
68339: LD_VAR 0 40
68343: PUSH
68344: EMPTY
68345: LIST
68346: LIST
68347: LIST
68348: LIST
68349: LIST
68350: LIST
68351: PUSH
68352: LD_VAR 0 4
68356: PUSH
68357: LD_INT 1
68359: PLUS
68360: ARRAY
68361: ST_TO_ADDR
68362: GO 68729
68364: LD_INT 6
68366: DOUBLE
68367: EQUAL
68368: IFTRUE 68420
68370: LD_INT 7
68372: DOUBLE
68373: EQUAL
68374: IFTRUE 68420
68376: LD_INT 8
68378: DOUBLE
68379: EQUAL
68380: IFTRUE 68420
68382: LD_INT 13
68384: DOUBLE
68385: EQUAL
68386: IFTRUE 68420
68388: LD_INT 12
68390: DOUBLE
68391: EQUAL
68392: IFTRUE 68420
68394: LD_INT 15
68396: DOUBLE
68397: EQUAL
68398: IFTRUE 68420
68400: LD_INT 11
68402: DOUBLE
68403: EQUAL
68404: IFTRUE 68420
68406: LD_INT 14
68408: DOUBLE
68409: EQUAL
68410: IFTRUE 68420
68412: LD_INT 10
68414: DOUBLE
68415: EQUAL
68416: IFTRUE 68420
68418: GO 68476
68420: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
68421: LD_ADDR_VAR 0 9
68425: PUSH
68426: LD_VAR 0 41
68430: PUSH
68431: LD_VAR 0 42
68435: PUSH
68436: LD_VAR 0 43
68440: PUSH
68441: LD_VAR 0 44
68445: PUSH
68446: LD_VAR 0 45
68450: PUSH
68451: LD_VAR 0 46
68455: PUSH
68456: EMPTY
68457: LIST
68458: LIST
68459: LIST
68460: LIST
68461: LIST
68462: LIST
68463: PUSH
68464: LD_VAR 0 4
68468: PUSH
68469: LD_INT 1
68471: PLUS
68472: ARRAY
68473: ST_TO_ADDR
68474: GO 68729
68476: LD_INT 36
68478: DOUBLE
68479: EQUAL
68480: IFTRUE 68484
68482: GO 68540
68484: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
68485: LD_ADDR_VAR 0 9
68489: PUSH
68490: LD_VAR 0 47
68494: PUSH
68495: LD_VAR 0 48
68499: PUSH
68500: LD_VAR 0 49
68504: PUSH
68505: LD_VAR 0 50
68509: PUSH
68510: LD_VAR 0 51
68514: PUSH
68515: LD_VAR 0 52
68519: PUSH
68520: EMPTY
68521: LIST
68522: LIST
68523: LIST
68524: LIST
68525: LIST
68526: LIST
68527: PUSH
68528: LD_VAR 0 4
68532: PUSH
68533: LD_INT 1
68535: PLUS
68536: ARRAY
68537: ST_TO_ADDR
68538: GO 68729
68540: LD_INT 4
68542: DOUBLE
68543: EQUAL
68544: IFTRUE 68566
68546: LD_INT 5
68548: DOUBLE
68549: EQUAL
68550: IFTRUE 68566
68552: LD_INT 34
68554: DOUBLE
68555: EQUAL
68556: IFTRUE 68566
68558: LD_INT 37
68560: DOUBLE
68561: EQUAL
68562: IFTRUE 68566
68564: GO 68622
68566: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
68567: LD_ADDR_VAR 0 9
68571: PUSH
68572: LD_VAR 0 53
68576: PUSH
68577: LD_VAR 0 54
68581: PUSH
68582: LD_VAR 0 55
68586: PUSH
68587: LD_VAR 0 56
68591: PUSH
68592: LD_VAR 0 57
68596: PUSH
68597: LD_VAR 0 58
68601: PUSH
68602: EMPTY
68603: LIST
68604: LIST
68605: LIST
68606: LIST
68607: LIST
68608: LIST
68609: PUSH
68610: LD_VAR 0 4
68614: PUSH
68615: LD_INT 1
68617: PLUS
68618: ARRAY
68619: ST_TO_ADDR
68620: GO 68729
68622: LD_INT 31
68624: DOUBLE
68625: EQUAL
68626: IFTRUE 68672
68628: LD_INT 32
68630: DOUBLE
68631: EQUAL
68632: IFTRUE 68672
68634: LD_INT 33
68636: DOUBLE
68637: EQUAL
68638: IFTRUE 68672
68640: LD_INT 27
68642: DOUBLE
68643: EQUAL
68644: IFTRUE 68672
68646: LD_INT 26
68648: DOUBLE
68649: EQUAL
68650: IFTRUE 68672
68652: LD_INT 28
68654: DOUBLE
68655: EQUAL
68656: IFTRUE 68672
68658: LD_INT 29
68660: DOUBLE
68661: EQUAL
68662: IFTRUE 68672
68664: LD_INT 30
68666: DOUBLE
68667: EQUAL
68668: IFTRUE 68672
68670: GO 68728
68672: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
68673: LD_ADDR_VAR 0 9
68677: PUSH
68678: LD_VAR 0 59
68682: PUSH
68683: LD_VAR 0 60
68687: PUSH
68688: LD_VAR 0 61
68692: PUSH
68693: LD_VAR 0 62
68697: PUSH
68698: LD_VAR 0 63
68702: PUSH
68703: LD_VAR 0 64
68707: PUSH
68708: EMPTY
68709: LIST
68710: LIST
68711: LIST
68712: LIST
68713: LIST
68714: LIST
68715: PUSH
68716: LD_VAR 0 4
68720: PUSH
68721: LD_INT 1
68723: PLUS
68724: ARRAY
68725: ST_TO_ADDR
68726: GO 68729
68728: POP
// temp_list2 = [ ] ;
68729: LD_ADDR_VAR 0 10
68733: PUSH
68734: EMPTY
68735: ST_TO_ADDR
// for i in temp_list do
68736: LD_ADDR_VAR 0 8
68740: PUSH
68741: LD_VAR 0 9
68745: PUSH
68746: FOR_IN
68747: IFFALSE 68799
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
68749: LD_ADDR_VAR 0 10
68753: PUSH
68754: LD_VAR 0 10
68758: PUSH
68759: LD_VAR 0 8
68763: PUSH
68764: LD_INT 1
68766: ARRAY
68767: PUSH
68768: LD_VAR 0 2
68772: PLUS
68773: PUSH
68774: LD_VAR 0 8
68778: PUSH
68779: LD_INT 2
68781: ARRAY
68782: PUSH
68783: LD_VAR 0 3
68787: PLUS
68788: PUSH
68789: EMPTY
68790: LIST
68791: LIST
68792: PUSH
68793: EMPTY
68794: LIST
68795: ADD
68796: ST_TO_ADDR
68797: GO 68746
68799: POP
68800: POP
// result = temp_list2 ;
68801: LD_ADDR_VAR 0 7
68805: PUSH
68806: LD_VAR 0 10
68810: ST_TO_ADDR
// end ;
68811: LD_VAR 0 7
68815: RET
// export function EnemyInRange ( unit , dist ) ; begin
68816: LD_INT 0
68818: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
68819: LD_ADDR_VAR 0 3
68823: PUSH
68824: LD_VAR 0 1
68828: PPUSH
68829: CALL_OW 255
68833: PPUSH
68834: LD_VAR 0 1
68838: PPUSH
68839: CALL_OW 250
68843: PPUSH
68844: LD_VAR 0 1
68848: PPUSH
68849: CALL_OW 251
68853: PPUSH
68854: LD_VAR 0 2
68858: PPUSH
68859: CALL 42212 0 4
68863: PUSH
68864: LD_INT 4
68866: ARRAY
68867: ST_TO_ADDR
// end ;
68868: LD_VAR 0 3
68872: RET
// export function PlayerSeeMe ( unit ) ; begin
68873: LD_INT 0
68875: PPUSH
// result := See ( your_side , unit ) ;
68876: LD_ADDR_VAR 0 2
68880: PUSH
68881: LD_OWVAR 2
68885: PPUSH
68886: LD_VAR 0 1
68890: PPUSH
68891: CALL_OW 292
68895: ST_TO_ADDR
// end ;
68896: LD_VAR 0 2
68900: RET
// export function ReverseDir ( unit ) ; begin
68901: LD_INT 0
68903: PPUSH
// if not unit then
68904: LD_VAR 0 1
68908: NOT
68909: IFFALSE 68913
// exit ;
68911: GO 68936
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
68913: LD_ADDR_VAR 0 2
68917: PUSH
68918: LD_VAR 0 1
68922: PPUSH
68923: CALL_OW 254
68927: PUSH
68928: LD_INT 3
68930: PLUS
68931: PUSH
68932: LD_INT 6
68934: MOD
68935: ST_TO_ADDR
// end ;
68936: LD_VAR 0 2
68940: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
68941: LD_INT 0
68943: PPUSH
68944: PPUSH
68945: PPUSH
68946: PPUSH
68947: PPUSH
// if not hexes then
68948: LD_VAR 0 2
68952: NOT
68953: IFFALSE 68957
// exit ;
68955: GO 69105
// dist := 9999 ;
68957: LD_ADDR_VAR 0 5
68961: PUSH
68962: LD_INT 9999
68964: ST_TO_ADDR
// for i = 1 to hexes do
68965: LD_ADDR_VAR 0 4
68969: PUSH
68970: DOUBLE
68971: LD_INT 1
68973: DEC
68974: ST_TO_ADDR
68975: LD_VAR 0 2
68979: PUSH
68980: FOR_TO
68981: IFFALSE 69093
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
68983: LD_VAR 0 1
68987: PPUSH
68988: LD_VAR 0 2
68992: PUSH
68993: LD_VAR 0 4
68997: ARRAY
68998: PUSH
68999: LD_INT 1
69001: ARRAY
69002: PPUSH
69003: LD_VAR 0 2
69007: PUSH
69008: LD_VAR 0 4
69012: ARRAY
69013: PUSH
69014: LD_INT 2
69016: ARRAY
69017: PPUSH
69018: CALL_OW 297
69022: PUSH
69023: LD_VAR 0 5
69027: LESS
69028: IFFALSE 69091
// begin hex := hexes [ i ] ;
69030: LD_ADDR_VAR 0 7
69034: PUSH
69035: LD_VAR 0 2
69039: PUSH
69040: LD_VAR 0 4
69044: ARRAY
69045: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
69046: LD_ADDR_VAR 0 5
69050: PUSH
69051: LD_VAR 0 1
69055: PPUSH
69056: LD_VAR 0 2
69060: PUSH
69061: LD_VAR 0 4
69065: ARRAY
69066: PUSH
69067: LD_INT 1
69069: ARRAY
69070: PPUSH
69071: LD_VAR 0 2
69075: PUSH
69076: LD_VAR 0 4
69080: ARRAY
69081: PUSH
69082: LD_INT 2
69084: ARRAY
69085: PPUSH
69086: CALL_OW 297
69090: ST_TO_ADDR
// end ; end ;
69091: GO 68980
69093: POP
69094: POP
// result := hex ;
69095: LD_ADDR_VAR 0 3
69099: PUSH
69100: LD_VAR 0 7
69104: ST_TO_ADDR
// end ;
69105: LD_VAR 0 3
69109: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
69110: LD_INT 0
69112: PPUSH
69113: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
69114: LD_VAR 0 1
69118: NOT
69119: PUSH
69120: LD_VAR 0 1
69124: PUSH
69125: LD_INT 21
69127: PUSH
69128: LD_INT 2
69130: PUSH
69131: EMPTY
69132: LIST
69133: LIST
69134: PUSH
69135: LD_INT 23
69137: PUSH
69138: LD_INT 2
69140: PUSH
69141: EMPTY
69142: LIST
69143: LIST
69144: PUSH
69145: EMPTY
69146: LIST
69147: LIST
69148: PPUSH
69149: CALL_OW 69
69153: IN
69154: NOT
69155: OR
69156: IFFALSE 69160
// exit ;
69158: GO 69207
// for i = 1 to 3 do
69160: LD_ADDR_VAR 0 3
69164: PUSH
69165: DOUBLE
69166: LD_INT 1
69168: DEC
69169: ST_TO_ADDR
69170: LD_INT 3
69172: PUSH
69173: FOR_TO
69174: IFFALSE 69205
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
69176: LD_VAR 0 1
69180: PPUSH
69181: CALL_OW 250
69185: PPUSH
69186: LD_VAR 0 1
69190: PPUSH
69191: CALL_OW 251
69195: PPUSH
69196: LD_INT 1
69198: PPUSH
69199: CALL_OW 453
69203: GO 69173
69205: POP
69206: POP
// end ;
69207: LD_VAR 0 2
69211: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
69212: LD_INT 0
69214: PPUSH
69215: PPUSH
69216: PPUSH
69217: PPUSH
69218: PPUSH
69219: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
69220: LD_VAR 0 1
69224: NOT
69225: PUSH
69226: LD_VAR 0 2
69230: NOT
69231: OR
69232: PUSH
69233: LD_VAR 0 1
69237: PPUSH
69238: CALL_OW 314
69242: OR
69243: IFFALSE 69247
// exit ;
69245: GO 69688
// x := GetX ( enemy_unit ) ;
69247: LD_ADDR_VAR 0 7
69251: PUSH
69252: LD_VAR 0 2
69256: PPUSH
69257: CALL_OW 250
69261: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
69262: LD_ADDR_VAR 0 8
69266: PUSH
69267: LD_VAR 0 2
69271: PPUSH
69272: CALL_OW 251
69276: ST_TO_ADDR
// if not x or not y then
69277: LD_VAR 0 7
69281: NOT
69282: PUSH
69283: LD_VAR 0 8
69287: NOT
69288: OR
69289: IFFALSE 69293
// exit ;
69291: GO 69688
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
69293: LD_ADDR_VAR 0 6
69297: PUSH
69298: LD_VAR 0 7
69302: PPUSH
69303: LD_INT 0
69305: PPUSH
69306: LD_INT 4
69308: PPUSH
69309: CALL_OW 272
69313: PUSH
69314: LD_VAR 0 8
69318: PPUSH
69319: LD_INT 0
69321: PPUSH
69322: LD_INT 4
69324: PPUSH
69325: CALL_OW 273
69329: PUSH
69330: EMPTY
69331: LIST
69332: LIST
69333: PUSH
69334: LD_VAR 0 7
69338: PPUSH
69339: LD_INT 1
69341: PPUSH
69342: LD_INT 4
69344: PPUSH
69345: CALL_OW 272
69349: PUSH
69350: LD_VAR 0 8
69354: PPUSH
69355: LD_INT 1
69357: PPUSH
69358: LD_INT 4
69360: PPUSH
69361: CALL_OW 273
69365: PUSH
69366: EMPTY
69367: LIST
69368: LIST
69369: PUSH
69370: LD_VAR 0 7
69374: PPUSH
69375: LD_INT 2
69377: PPUSH
69378: LD_INT 4
69380: PPUSH
69381: CALL_OW 272
69385: PUSH
69386: LD_VAR 0 8
69390: PPUSH
69391: LD_INT 2
69393: PPUSH
69394: LD_INT 4
69396: PPUSH
69397: CALL_OW 273
69401: PUSH
69402: EMPTY
69403: LIST
69404: LIST
69405: PUSH
69406: LD_VAR 0 7
69410: PPUSH
69411: LD_INT 3
69413: PPUSH
69414: LD_INT 4
69416: PPUSH
69417: CALL_OW 272
69421: PUSH
69422: LD_VAR 0 8
69426: PPUSH
69427: LD_INT 3
69429: PPUSH
69430: LD_INT 4
69432: PPUSH
69433: CALL_OW 273
69437: PUSH
69438: EMPTY
69439: LIST
69440: LIST
69441: PUSH
69442: LD_VAR 0 7
69446: PPUSH
69447: LD_INT 4
69449: PPUSH
69450: LD_INT 4
69452: PPUSH
69453: CALL_OW 272
69457: PUSH
69458: LD_VAR 0 8
69462: PPUSH
69463: LD_INT 4
69465: PPUSH
69466: LD_INT 4
69468: PPUSH
69469: CALL_OW 273
69473: PUSH
69474: EMPTY
69475: LIST
69476: LIST
69477: PUSH
69478: LD_VAR 0 7
69482: PPUSH
69483: LD_INT 5
69485: PPUSH
69486: LD_INT 4
69488: PPUSH
69489: CALL_OW 272
69493: PUSH
69494: LD_VAR 0 8
69498: PPUSH
69499: LD_INT 5
69501: PPUSH
69502: LD_INT 4
69504: PPUSH
69505: CALL_OW 273
69509: PUSH
69510: EMPTY
69511: LIST
69512: LIST
69513: PUSH
69514: EMPTY
69515: LIST
69516: LIST
69517: LIST
69518: LIST
69519: LIST
69520: LIST
69521: ST_TO_ADDR
// for i = tmp downto 1 do
69522: LD_ADDR_VAR 0 4
69526: PUSH
69527: DOUBLE
69528: LD_VAR 0 6
69532: INC
69533: ST_TO_ADDR
69534: LD_INT 1
69536: PUSH
69537: FOR_DOWNTO
69538: IFFALSE 69639
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
69540: LD_VAR 0 6
69544: PUSH
69545: LD_VAR 0 4
69549: ARRAY
69550: PUSH
69551: LD_INT 1
69553: ARRAY
69554: PPUSH
69555: LD_VAR 0 6
69559: PUSH
69560: LD_VAR 0 4
69564: ARRAY
69565: PUSH
69566: LD_INT 2
69568: ARRAY
69569: PPUSH
69570: CALL_OW 488
69574: NOT
69575: PUSH
69576: LD_VAR 0 6
69580: PUSH
69581: LD_VAR 0 4
69585: ARRAY
69586: PUSH
69587: LD_INT 1
69589: ARRAY
69590: PPUSH
69591: LD_VAR 0 6
69595: PUSH
69596: LD_VAR 0 4
69600: ARRAY
69601: PUSH
69602: LD_INT 2
69604: ARRAY
69605: PPUSH
69606: CALL_OW 428
69610: PUSH
69611: LD_INT 0
69613: NONEQUAL
69614: OR
69615: IFFALSE 69637
// tmp := Delete ( tmp , i ) ;
69617: LD_ADDR_VAR 0 6
69621: PUSH
69622: LD_VAR 0 6
69626: PPUSH
69627: LD_VAR 0 4
69631: PPUSH
69632: CALL_OW 3
69636: ST_TO_ADDR
69637: GO 69537
69639: POP
69640: POP
// j := GetClosestHex ( unit , tmp ) ;
69641: LD_ADDR_VAR 0 5
69645: PUSH
69646: LD_VAR 0 1
69650: PPUSH
69651: LD_VAR 0 6
69655: PPUSH
69656: CALL 68941 0 2
69660: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
69661: LD_VAR 0 1
69665: PPUSH
69666: LD_VAR 0 5
69670: PUSH
69671: LD_INT 1
69673: ARRAY
69674: PPUSH
69675: LD_VAR 0 5
69679: PUSH
69680: LD_INT 2
69682: ARRAY
69683: PPUSH
69684: CALL_OW 111
// end ;
69688: LD_VAR 0 3
69692: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
69693: LD_INT 0
69695: PPUSH
69696: PPUSH
69697: PPUSH
// uc_side = 0 ;
69698: LD_ADDR_OWVAR 20
69702: PUSH
69703: LD_INT 0
69705: ST_TO_ADDR
// uc_nation = 0 ;
69706: LD_ADDR_OWVAR 21
69710: PUSH
69711: LD_INT 0
69713: ST_TO_ADDR
// InitHc_All ( ) ;
69714: CALL_OW 584
// InitVc ;
69718: CALL_OW 20
// if mastodonts then
69722: LD_VAR 0 6
69726: IFFALSE 69793
// for i = 1 to mastodonts do
69728: LD_ADDR_VAR 0 11
69732: PUSH
69733: DOUBLE
69734: LD_INT 1
69736: DEC
69737: ST_TO_ADDR
69738: LD_VAR 0 6
69742: PUSH
69743: FOR_TO
69744: IFFALSE 69791
// begin vc_chassis := 31 ;
69746: LD_ADDR_OWVAR 37
69750: PUSH
69751: LD_INT 31
69753: ST_TO_ADDR
// vc_control := control_rider ;
69754: LD_ADDR_OWVAR 38
69758: PUSH
69759: LD_INT 4
69761: ST_TO_ADDR
// animal := CreateVehicle ;
69762: LD_ADDR_VAR 0 12
69766: PUSH
69767: CALL_OW 45
69771: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69772: LD_VAR 0 12
69776: PPUSH
69777: LD_VAR 0 8
69781: PPUSH
69782: LD_INT 0
69784: PPUSH
69785: CALL 71981 0 3
// end ;
69789: GO 69743
69791: POP
69792: POP
// if horses then
69793: LD_VAR 0 5
69797: IFFALSE 69864
// for i = 1 to horses do
69799: LD_ADDR_VAR 0 11
69803: PUSH
69804: DOUBLE
69805: LD_INT 1
69807: DEC
69808: ST_TO_ADDR
69809: LD_VAR 0 5
69813: PUSH
69814: FOR_TO
69815: IFFALSE 69862
// begin hc_class := 21 ;
69817: LD_ADDR_OWVAR 28
69821: PUSH
69822: LD_INT 21
69824: ST_TO_ADDR
// hc_gallery :=  ;
69825: LD_ADDR_OWVAR 33
69829: PUSH
69830: LD_STRING 
69832: ST_TO_ADDR
// animal := CreateHuman ;
69833: LD_ADDR_VAR 0 12
69837: PUSH
69838: CALL_OW 44
69842: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69843: LD_VAR 0 12
69847: PPUSH
69848: LD_VAR 0 8
69852: PPUSH
69853: LD_INT 0
69855: PPUSH
69856: CALL 71981 0 3
// end ;
69860: GO 69814
69862: POP
69863: POP
// if birds then
69864: LD_VAR 0 1
69868: IFFALSE 69935
// for i = 1 to birds do
69870: LD_ADDR_VAR 0 11
69874: PUSH
69875: DOUBLE
69876: LD_INT 1
69878: DEC
69879: ST_TO_ADDR
69880: LD_VAR 0 1
69884: PUSH
69885: FOR_TO
69886: IFFALSE 69933
// begin hc_class = 18 ;
69888: LD_ADDR_OWVAR 28
69892: PUSH
69893: LD_INT 18
69895: ST_TO_ADDR
// hc_gallery =  ;
69896: LD_ADDR_OWVAR 33
69900: PUSH
69901: LD_STRING 
69903: ST_TO_ADDR
// animal := CreateHuman ;
69904: LD_ADDR_VAR 0 12
69908: PUSH
69909: CALL_OW 44
69913: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69914: LD_VAR 0 12
69918: PPUSH
69919: LD_VAR 0 8
69923: PPUSH
69924: LD_INT 0
69926: PPUSH
69927: CALL 71981 0 3
// end ;
69931: GO 69885
69933: POP
69934: POP
// if tigers then
69935: LD_VAR 0 2
69939: IFFALSE 70023
// for i = 1 to tigers do
69941: LD_ADDR_VAR 0 11
69945: PUSH
69946: DOUBLE
69947: LD_INT 1
69949: DEC
69950: ST_TO_ADDR
69951: LD_VAR 0 2
69955: PUSH
69956: FOR_TO
69957: IFFALSE 70021
// begin hc_class = class_tiger ;
69959: LD_ADDR_OWVAR 28
69963: PUSH
69964: LD_INT 14
69966: ST_TO_ADDR
// hc_gallery =  ;
69967: LD_ADDR_OWVAR 33
69971: PUSH
69972: LD_STRING 
69974: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
69975: LD_ADDR_OWVAR 35
69979: PUSH
69980: LD_INT 7
69982: NEG
69983: PPUSH
69984: LD_INT 7
69986: PPUSH
69987: CALL_OW 12
69991: ST_TO_ADDR
// animal := CreateHuman ;
69992: LD_ADDR_VAR 0 12
69996: PUSH
69997: CALL_OW 44
70001: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70002: LD_VAR 0 12
70006: PPUSH
70007: LD_VAR 0 8
70011: PPUSH
70012: LD_INT 0
70014: PPUSH
70015: CALL 71981 0 3
// end ;
70019: GO 69956
70021: POP
70022: POP
// if apemans then
70023: LD_VAR 0 3
70027: IFFALSE 70150
// for i = 1 to apemans do
70029: LD_ADDR_VAR 0 11
70033: PUSH
70034: DOUBLE
70035: LD_INT 1
70037: DEC
70038: ST_TO_ADDR
70039: LD_VAR 0 3
70043: PUSH
70044: FOR_TO
70045: IFFALSE 70148
// begin hc_class = class_apeman ;
70047: LD_ADDR_OWVAR 28
70051: PUSH
70052: LD_INT 12
70054: ST_TO_ADDR
// hc_gallery =  ;
70055: LD_ADDR_OWVAR 33
70059: PUSH
70060: LD_STRING 
70062: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
70063: LD_ADDR_OWVAR 35
70067: PUSH
70068: LD_INT 2
70070: NEG
70071: PPUSH
70072: LD_INT 2
70074: PPUSH
70075: CALL_OW 12
70079: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
70080: LD_ADDR_OWVAR 31
70084: PUSH
70085: LD_INT 1
70087: PPUSH
70088: LD_INT 3
70090: PPUSH
70091: CALL_OW 12
70095: PUSH
70096: LD_INT 1
70098: PPUSH
70099: LD_INT 3
70101: PPUSH
70102: CALL_OW 12
70106: PUSH
70107: LD_INT 0
70109: PUSH
70110: LD_INT 0
70112: PUSH
70113: EMPTY
70114: LIST
70115: LIST
70116: LIST
70117: LIST
70118: ST_TO_ADDR
// animal := CreateHuman ;
70119: LD_ADDR_VAR 0 12
70123: PUSH
70124: CALL_OW 44
70128: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70129: LD_VAR 0 12
70133: PPUSH
70134: LD_VAR 0 8
70138: PPUSH
70139: LD_INT 0
70141: PPUSH
70142: CALL 71981 0 3
// end ;
70146: GO 70044
70148: POP
70149: POP
// if enchidnas then
70150: LD_VAR 0 4
70154: IFFALSE 70221
// for i = 1 to enchidnas do
70156: LD_ADDR_VAR 0 11
70160: PUSH
70161: DOUBLE
70162: LD_INT 1
70164: DEC
70165: ST_TO_ADDR
70166: LD_VAR 0 4
70170: PUSH
70171: FOR_TO
70172: IFFALSE 70219
// begin hc_class = 13 ;
70174: LD_ADDR_OWVAR 28
70178: PUSH
70179: LD_INT 13
70181: ST_TO_ADDR
// hc_gallery =  ;
70182: LD_ADDR_OWVAR 33
70186: PUSH
70187: LD_STRING 
70189: ST_TO_ADDR
// animal := CreateHuman ;
70190: LD_ADDR_VAR 0 12
70194: PUSH
70195: CALL_OW 44
70199: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70200: LD_VAR 0 12
70204: PPUSH
70205: LD_VAR 0 8
70209: PPUSH
70210: LD_INT 0
70212: PPUSH
70213: CALL 71981 0 3
// end ;
70217: GO 70171
70219: POP
70220: POP
// if fishes then
70221: LD_VAR 0 7
70225: IFFALSE 70292
// for i = 1 to fishes do
70227: LD_ADDR_VAR 0 11
70231: PUSH
70232: DOUBLE
70233: LD_INT 1
70235: DEC
70236: ST_TO_ADDR
70237: LD_VAR 0 7
70241: PUSH
70242: FOR_TO
70243: IFFALSE 70290
// begin hc_class = 20 ;
70245: LD_ADDR_OWVAR 28
70249: PUSH
70250: LD_INT 20
70252: ST_TO_ADDR
// hc_gallery =  ;
70253: LD_ADDR_OWVAR 33
70257: PUSH
70258: LD_STRING 
70260: ST_TO_ADDR
// animal := CreateHuman ;
70261: LD_ADDR_VAR 0 12
70265: PUSH
70266: CALL_OW 44
70270: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
70271: LD_VAR 0 12
70275: PPUSH
70276: LD_VAR 0 9
70280: PPUSH
70281: LD_INT 0
70283: PPUSH
70284: CALL 71981 0 3
// end ;
70288: GO 70242
70290: POP
70291: POP
// end ;
70292: LD_VAR 0 10
70296: RET
// export function WantHeal ( sci , unit ) ; begin
70297: LD_INT 0
70299: PPUSH
// if GetTaskList ( sci ) > 0 then
70300: LD_VAR 0 1
70304: PPUSH
70305: CALL_OW 437
70309: PUSH
70310: LD_INT 0
70312: GREATER
70313: IFFALSE 70383
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
70315: LD_VAR 0 1
70319: PPUSH
70320: CALL_OW 437
70324: PUSH
70325: LD_INT 1
70327: ARRAY
70328: PUSH
70329: LD_INT 1
70331: ARRAY
70332: PUSH
70333: LD_STRING l
70335: EQUAL
70336: PUSH
70337: LD_VAR 0 1
70341: PPUSH
70342: CALL_OW 437
70346: PUSH
70347: LD_INT 1
70349: ARRAY
70350: PUSH
70351: LD_INT 4
70353: ARRAY
70354: PUSH
70355: LD_VAR 0 2
70359: EQUAL
70360: AND
70361: IFFALSE 70373
// result := true else
70363: LD_ADDR_VAR 0 3
70367: PUSH
70368: LD_INT 1
70370: ST_TO_ADDR
70371: GO 70381
// result := false ;
70373: LD_ADDR_VAR 0 3
70377: PUSH
70378: LD_INT 0
70380: ST_TO_ADDR
// end else
70381: GO 70391
// result := false ;
70383: LD_ADDR_VAR 0 3
70387: PUSH
70388: LD_INT 0
70390: ST_TO_ADDR
// end ;
70391: LD_VAR 0 3
70395: RET
// export function HealTarget ( sci ) ; begin
70396: LD_INT 0
70398: PPUSH
// if not sci then
70399: LD_VAR 0 1
70403: NOT
70404: IFFALSE 70408
// exit ;
70406: GO 70473
// result := 0 ;
70408: LD_ADDR_VAR 0 2
70412: PUSH
70413: LD_INT 0
70415: ST_TO_ADDR
// if GetTaskList ( sci ) then
70416: LD_VAR 0 1
70420: PPUSH
70421: CALL_OW 437
70425: IFFALSE 70473
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
70427: LD_VAR 0 1
70431: PPUSH
70432: CALL_OW 437
70436: PUSH
70437: LD_INT 1
70439: ARRAY
70440: PUSH
70441: LD_INT 1
70443: ARRAY
70444: PUSH
70445: LD_STRING l
70447: EQUAL
70448: IFFALSE 70473
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
70450: LD_ADDR_VAR 0 2
70454: PUSH
70455: LD_VAR 0 1
70459: PPUSH
70460: CALL_OW 437
70464: PUSH
70465: LD_INT 1
70467: ARRAY
70468: PUSH
70469: LD_INT 4
70471: ARRAY
70472: ST_TO_ADDR
// end ;
70473: LD_VAR 0 2
70477: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
70478: LD_INT 0
70480: PPUSH
70481: PPUSH
70482: PPUSH
70483: PPUSH
// if not base_units then
70484: LD_VAR 0 1
70488: NOT
70489: IFFALSE 70493
// exit ;
70491: GO 70580
// result := false ;
70493: LD_ADDR_VAR 0 2
70497: PUSH
70498: LD_INT 0
70500: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
70501: LD_ADDR_VAR 0 5
70505: PUSH
70506: LD_VAR 0 1
70510: PPUSH
70511: LD_INT 21
70513: PUSH
70514: LD_INT 3
70516: PUSH
70517: EMPTY
70518: LIST
70519: LIST
70520: PPUSH
70521: CALL_OW 72
70525: ST_TO_ADDR
// if not tmp then
70526: LD_VAR 0 5
70530: NOT
70531: IFFALSE 70535
// exit ;
70533: GO 70580
// for i in tmp do
70535: LD_ADDR_VAR 0 3
70539: PUSH
70540: LD_VAR 0 5
70544: PUSH
70545: FOR_IN
70546: IFFALSE 70578
// begin result := EnemyInRange ( i , 22 ) ;
70548: LD_ADDR_VAR 0 2
70552: PUSH
70553: LD_VAR 0 3
70557: PPUSH
70558: LD_INT 22
70560: PPUSH
70561: CALL 68816 0 2
70565: ST_TO_ADDR
// if result then
70566: LD_VAR 0 2
70570: IFFALSE 70576
// exit ;
70572: POP
70573: POP
70574: GO 70580
// end ;
70576: GO 70545
70578: POP
70579: POP
// end ;
70580: LD_VAR 0 2
70584: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
70585: LD_INT 0
70587: PPUSH
70588: PPUSH
// if not units then
70589: LD_VAR 0 1
70593: NOT
70594: IFFALSE 70598
// exit ;
70596: GO 70668
// result := [ ] ;
70598: LD_ADDR_VAR 0 3
70602: PUSH
70603: EMPTY
70604: ST_TO_ADDR
// for i in units do
70605: LD_ADDR_VAR 0 4
70609: PUSH
70610: LD_VAR 0 1
70614: PUSH
70615: FOR_IN
70616: IFFALSE 70666
// if GetTag ( i ) = tag then
70618: LD_VAR 0 4
70622: PPUSH
70623: CALL_OW 110
70627: PUSH
70628: LD_VAR 0 2
70632: EQUAL
70633: IFFALSE 70664
// result := Replace ( result , result + 1 , i ) ;
70635: LD_ADDR_VAR 0 3
70639: PUSH
70640: LD_VAR 0 3
70644: PPUSH
70645: LD_VAR 0 3
70649: PUSH
70650: LD_INT 1
70652: PLUS
70653: PPUSH
70654: LD_VAR 0 4
70658: PPUSH
70659: CALL_OW 1
70663: ST_TO_ADDR
70664: GO 70615
70666: POP
70667: POP
// end ;
70668: LD_VAR 0 3
70672: RET
// export function IsDriver ( un ) ; begin
70673: LD_INT 0
70675: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
70676: LD_ADDR_VAR 0 2
70680: PUSH
70681: LD_VAR 0 1
70685: PUSH
70686: LD_INT 55
70688: PUSH
70689: EMPTY
70690: LIST
70691: PPUSH
70692: CALL_OW 69
70696: IN
70697: ST_TO_ADDR
// end ;
70698: LD_VAR 0 2
70702: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
70703: LD_INT 0
70705: PPUSH
70706: PPUSH
// list := [ ] ;
70707: LD_ADDR_VAR 0 5
70711: PUSH
70712: EMPTY
70713: ST_TO_ADDR
// case d of 0 :
70714: LD_VAR 0 3
70718: PUSH
70719: LD_INT 0
70721: DOUBLE
70722: EQUAL
70723: IFTRUE 70727
70725: GO 70860
70727: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
70728: LD_ADDR_VAR 0 5
70732: PUSH
70733: LD_VAR 0 1
70737: PUSH
70738: LD_INT 4
70740: MINUS
70741: PUSH
70742: LD_VAR 0 2
70746: PUSH
70747: LD_INT 4
70749: MINUS
70750: PUSH
70751: LD_INT 2
70753: PUSH
70754: EMPTY
70755: LIST
70756: LIST
70757: LIST
70758: PUSH
70759: LD_VAR 0 1
70763: PUSH
70764: LD_INT 3
70766: MINUS
70767: PUSH
70768: LD_VAR 0 2
70772: PUSH
70773: LD_INT 1
70775: PUSH
70776: EMPTY
70777: LIST
70778: LIST
70779: LIST
70780: PUSH
70781: LD_VAR 0 1
70785: PUSH
70786: LD_INT 4
70788: PLUS
70789: PUSH
70790: LD_VAR 0 2
70794: PUSH
70795: LD_INT 4
70797: PUSH
70798: EMPTY
70799: LIST
70800: LIST
70801: LIST
70802: PUSH
70803: LD_VAR 0 1
70807: PUSH
70808: LD_INT 3
70810: PLUS
70811: PUSH
70812: LD_VAR 0 2
70816: PUSH
70817: LD_INT 3
70819: PLUS
70820: PUSH
70821: LD_INT 5
70823: PUSH
70824: EMPTY
70825: LIST
70826: LIST
70827: LIST
70828: PUSH
70829: LD_VAR 0 1
70833: PUSH
70834: LD_VAR 0 2
70838: PUSH
70839: LD_INT 4
70841: PLUS
70842: PUSH
70843: LD_INT 0
70845: PUSH
70846: EMPTY
70847: LIST
70848: LIST
70849: LIST
70850: PUSH
70851: EMPTY
70852: LIST
70853: LIST
70854: LIST
70855: LIST
70856: LIST
70857: ST_TO_ADDR
// end ; 1 :
70858: GO 71558
70860: LD_INT 1
70862: DOUBLE
70863: EQUAL
70864: IFTRUE 70868
70866: GO 71001
70868: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
70869: LD_ADDR_VAR 0 5
70873: PUSH
70874: LD_VAR 0 1
70878: PUSH
70879: LD_VAR 0 2
70883: PUSH
70884: LD_INT 4
70886: MINUS
70887: PUSH
70888: LD_INT 3
70890: PUSH
70891: EMPTY
70892: LIST
70893: LIST
70894: LIST
70895: PUSH
70896: LD_VAR 0 1
70900: PUSH
70901: LD_INT 3
70903: MINUS
70904: PUSH
70905: LD_VAR 0 2
70909: PUSH
70910: LD_INT 3
70912: MINUS
70913: PUSH
70914: LD_INT 2
70916: PUSH
70917: EMPTY
70918: LIST
70919: LIST
70920: LIST
70921: PUSH
70922: LD_VAR 0 1
70926: PUSH
70927: LD_INT 4
70929: MINUS
70930: PUSH
70931: LD_VAR 0 2
70935: PUSH
70936: LD_INT 1
70938: PUSH
70939: EMPTY
70940: LIST
70941: LIST
70942: LIST
70943: PUSH
70944: LD_VAR 0 1
70948: PUSH
70949: LD_VAR 0 2
70953: PUSH
70954: LD_INT 3
70956: PLUS
70957: PUSH
70958: LD_INT 0
70960: PUSH
70961: EMPTY
70962: LIST
70963: LIST
70964: LIST
70965: PUSH
70966: LD_VAR 0 1
70970: PUSH
70971: LD_INT 4
70973: PLUS
70974: PUSH
70975: LD_VAR 0 2
70979: PUSH
70980: LD_INT 4
70982: PLUS
70983: PUSH
70984: LD_INT 5
70986: PUSH
70987: EMPTY
70988: LIST
70989: LIST
70990: LIST
70991: PUSH
70992: EMPTY
70993: LIST
70994: LIST
70995: LIST
70996: LIST
70997: LIST
70998: ST_TO_ADDR
// end ; 2 :
70999: GO 71558
71001: LD_INT 2
71003: DOUBLE
71004: EQUAL
71005: IFTRUE 71009
71007: GO 71138
71009: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
71010: LD_ADDR_VAR 0 5
71014: PUSH
71015: LD_VAR 0 1
71019: PUSH
71020: LD_VAR 0 2
71024: PUSH
71025: LD_INT 3
71027: MINUS
71028: PUSH
71029: LD_INT 3
71031: PUSH
71032: EMPTY
71033: LIST
71034: LIST
71035: LIST
71036: PUSH
71037: LD_VAR 0 1
71041: PUSH
71042: LD_INT 4
71044: PLUS
71045: PUSH
71046: LD_VAR 0 2
71050: PUSH
71051: LD_INT 4
71053: PUSH
71054: EMPTY
71055: LIST
71056: LIST
71057: LIST
71058: PUSH
71059: LD_VAR 0 1
71063: PUSH
71064: LD_VAR 0 2
71068: PUSH
71069: LD_INT 4
71071: PLUS
71072: PUSH
71073: LD_INT 0
71075: PUSH
71076: EMPTY
71077: LIST
71078: LIST
71079: LIST
71080: PUSH
71081: LD_VAR 0 1
71085: PUSH
71086: LD_INT 3
71088: MINUS
71089: PUSH
71090: LD_VAR 0 2
71094: PUSH
71095: LD_INT 1
71097: PUSH
71098: EMPTY
71099: LIST
71100: LIST
71101: LIST
71102: PUSH
71103: LD_VAR 0 1
71107: PUSH
71108: LD_INT 4
71110: MINUS
71111: PUSH
71112: LD_VAR 0 2
71116: PUSH
71117: LD_INT 4
71119: MINUS
71120: PUSH
71121: LD_INT 2
71123: PUSH
71124: EMPTY
71125: LIST
71126: LIST
71127: LIST
71128: PUSH
71129: EMPTY
71130: LIST
71131: LIST
71132: LIST
71133: LIST
71134: LIST
71135: ST_TO_ADDR
// end ; 3 :
71136: GO 71558
71138: LD_INT 3
71140: DOUBLE
71141: EQUAL
71142: IFTRUE 71146
71144: GO 71279
71146: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
71147: LD_ADDR_VAR 0 5
71151: PUSH
71152: LD_VAR 0 1
71156: PUSH
71157: LD_INT 3
71159: PLUS
71160: PUSH
71161: LD_VAR 0 2
71165: PUSH
71166: LD_INT 4
71168: PUSH
71169: EMPTY
71170: LIST
71171: LIST
71172: LIST
71173: PUSH
71174: LD_VAR 0 1
71178: PUSH
71179: LD_INT 4
71181: PLUS
71182: PUSH
71183: LD_VAR 0 2
71187: PUSH
71188: LD_INT 4
71190: PLUS
71191: PUSH
71192: LD_INT 5
71194: PUSH
71195: EMPTY
71196: LIST
71197: LIST
71198: LIST
71199: PUSH
71200: LD_VAR 0 1
71204: PUSH
71205: LD_INT 4
71207: MINUS
71208: PUSH
71209: LD_VAR 0 2
71213: PUSH
71214: LD_INT 1
71216: PUSH
71217: EMPTY
71218: LIST
71219: LIST
71220: LIST
71221: PUSH
71222: LD_VAR 0 1
71226: PUSH
71227: LD_VAR 0 2
71231: PUSH
71232: LD_INT 4
71234: MINUS
71235: PUSH
71236: LD_INT 3
71238: PUSH
71239: EMPTY
71240: LIST
71241: LIST
71242: LIST
71243: PUSH
71244: LD_VAR 0 1
71248: PUSH
71249: LD_INT 3
71251: MINUS
71252: PUSH
71253: LD_VAR 0 2
71257: PUSH
71258: LD_INT 3
71260: MINUS
71261: PUSH
71262: LD_INT 2
71264: PUSH
71265: EMPTY
71266: LIST
71267: LIST
71268: LIST
71269: PUSH
71270: EMPTY
71271: LIST
71272: LIST
71273: LIST
71274: LIST
71275: LIST
71276: ST_TO_ADDR
// end ; 4 :
71277: GO 71558
71279: LD_INT 4
71281: DOUBLE
71282: EQUAL
71283: IFTRUE 71287
71285: GO 71420
71287: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
71288: LD_ADDR_VAR 0 5
71292: PUSH
71293: LD_VAR 0 1
71297: PUSH
71298: LD_VAR 0 2
71302: PUSH
71303: LD_INT 4
71305: PLUS
71306: PUSH
71307: LD_INT 0
71309: PUSH
71310: EMPTY
71311: LIST
71312: LIST
71313: LIST
71314: PUSH
71315: LD_VAR 0 1
71319: PUSH
71320: LD_INT 3
71322: PLUS
71323: PUSH
71324: LD_VAR 0 2
71328: PUSH
71329: LD_INT 3
71331: PLUS
71332: PUSH
71333: LD_INT 5
71335: PUSH
71336: EMPTY
71337: LIST
71338: LIST
71339: LIST
71340: PUSH
71341: LD_VAR 0 1
71345: PUSH
71346: LD_INT 4
71348: PLUS
71349: PUSH
71350: LD_VAR 0 2
71354: PUSH
71355: LD_INT 4
71357: PUSH
71358: EMPTY
71359: LIST
71360: LIST
71361: LIST
71362: PUSH
71363: LD_VAR 0 1
71367: PUSH
71368: LD_VAR 0 2
71372: PUSH
71373: LD_INT 3
71375: MINUS
71376: PUSH
71377: LD_INT 3
71379: PUSH
71380: EMPTY
71381: LIST
71382: LIST
71383: LIST
71384: PUSH
71385: LD_VAR 0 1
71389: PUSH
71390: LD_INT 4
71392: MINUS
71393: PUSH
71394: LD_VAR 0 2
71398: PUSH
71399: LD_INT 4
71401: MINUS
71402: PUSH
71403: LD_INT 2
71405: PUSH
71406: EMPTY
71407: LIST
71408: LIST
71409: LIST
71410: PUSH
71411: EMPTY
71412: LIST
71413: LIST
71414: LIST
71415: LIST
71416: LIST
71417: ST_TO_ADDR
// end ; 5 :
71418: GO 71558
71420: LD_INT 5
71422: DOUBLE
71423: EQUAL
71424: IFTRUE 71428
71426: GO 71557
71428: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
71429: LD_ADDR_VAR 0 5
71433: PUSH
71434: LD_VAR 0 1
71438: PUSH
71439: LD_INT 4
71441: MINUS
71442: PUSH
71443: LD_VAR 0 2
71447: PUSH
71448: LD_INT 1
71450: PUSH
71451: EMPTY
71452: LIST
71453: LIST
71454: LIST
71455: PUSH
71456: LD_VAR 0 1
71460: PUSH
71461: LD_VAR 0 2
71465: PUSH
71466: LD_INT 4
71468: MINUS
71469: PUSH
71470: LD_INT 3
71472: PUSH
71473: EMPTY
71474: LIST
71475: LIST
71476: LIST
71477: PUSH
71478: LD_VAR 0 1
71482: PUSH
71483: LD_INT 4
71485: PLUS
71486: PUSH
71487: LD_VAR 0 2
71491: PUSH
71492: LD_INT 4
71494: PLUS
71495: PUSH
71496: LD_INT 5
71498: PUSH
71499: EMPTY
71500: LIST
71501: LIST
71502: LIST
71503: PUSH
71504: LD_VAR 0 1
71508: PUSH
71509: LD_INT 3
71511: PLUS
71512: PUSH
71513: LD_VAR 0 2
71517: PUSH
71518: LD_INT 4
71520: PUSH
71521: EMPTY
71522: LIST
71523: LIST
71524: LIST
71525: PUSH
71526: LD_VAR 0 1
71530: PUSH
71531: LD_VAR 0 2
71535: PUSH
71536: LD_INT 3
71538: PLUS
71539: PUSH
71540: LD_INT 0
71542: PUSH
71543: EMPTY
71544: LIST
71545: LIST
71546: LIST
71547: PUSH
71548: EMPTY
71549: LIST
71550: LIST
71551: LIST
71552: LIST
71553: LIST
71554: ST_TO_ADDR
// end ; end ;
71555: GO 71558
71557: POP
// result := list ;
71558: LD_ADDR_VAR 0 4
71562: PUSH
71563: LD_VAR 0 5
71567: ST_TO_ADDR
// end ;
71568: LD_VAR 0 4
71572: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
71573: LD_INT 0
71575: PPUSH
71576: PPUSH
71577: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
71578: LD_VAR 0 1
71582: NOT
71583: PUSH
71584: LD_VAR 0 2
71588: PUSH
71589: LD_INT 1
71591: PUSH
71592: LD_INT 2
71594: PUSH
71595: LD_INT 3
71597: PUSH
71598: LD_INT 4
71600: PUSH
71601: EMPTY
71602: LIST
71603: LIST
71604: LIST
71605: LIST
71606: IN
71607: NOT
71608: OR
71609: IFFALSE 71613
// exit ;
71611: GO 71705
// tmp := [ ] ;
71613: LD_ADDR_VAR 0 5
71617: PUSH
71618: EMPTY
71619: ST_TO_ADDR
// for i in units do
71620: LD_ADDR_VAR 0 4
71624: PUSH
71625: LD_VAR 0 1
71629: PUSH
71630: FOR_IN
71631: IFFALSE 71674
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
71633: LD_ADDR_VAR 0 5
71637: PUSH
71638: LD_VAR 0 5
71642: PPUSH
71643: LD_VAR 0 5
71647: PUSH
71648: LD_INT 1
71650: PLUS
71651: PPUSH
71652: LD_VAR 0 4
71656: PPUSH
71657: LD_VAR 0 2
71661: PPUSH
71662: CALL_OW 259
71666: PPUSH
71667: CALL_OW 2
71671: ST_TO_ADDR
71672: GO 71630
71674: POP
71675: POP
// if not tmp then
71676: LD_VAR 0 5
71680: NOT
71681: IFFALSE 71685
// exit ;
71683: GO 71705
// result := SortListByListDesc ( units , tmp ) ;
71685: LD_ADDR_VAR 0 3
71689: PUSH
71690: LD_VAR 0 1
71694: PPUSH
71695: LD_VAR 0 5
71699: PPUSH
71700: CALL_OW 77
71704: ST_TO_ADDR
// end ;
71705: LD_VAR 0 3
71709: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
71710: LD_INT 0
71712: PPUSH
71713: PPUSH
71714: PPUSH
// result := false ;
71715: LD_ADDR_VAR 0 3
71719: PUSH
71720: LD_INT 0
71722: ST_TO_ADDR
// x := GetX ( building ) ;
71723: LD_ADDR_VAR 0 4
71727: PUSH
71728: LD_VAR 0 2
71732: PPUSH
71733: CALL_OW 250
71737: ST_TO_ADDR
// y := GetY ( building ) ;
71738: LD_ADDR_VAR 0 5
71742: PUSH
71743: LD_VAR 0 2
71747: PPUSH
71748: CALL_OW 251
71752: ST_TO_ADDR
// if not building or not x or not y then
71753: LD_VAR 0 2
71757: NOT
71758: PUSH
71759: LD_VAR 0 4
71763: NOT
71764: OR
71765: PUSH
71766: LD_VAR 0 5
71770: NOT
71771: OR
71772: IFFALSE 71776
// exit ;
71774: GO 71868
// if GetTaskList ( unit ) then
71776: LD_VAR 0 1
71780: PPUSH
71781: CALL_OW 437
71785: IFFALSE 71868
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71787: LD_STRING e
71789: PUSH
71790: LD_VAR 0 1
71794: PPUSH
71795: CALL_OW 437
71799: PUSH
71800: LD_INT 1
71802: ARRAY
71803: PUSH
71804: LD_INT 1
71806: ARRAY
71807: EQUAL
71808: PUSH
71809: LD_VAR 0 4
71813: PUSH
71814: LD_VAR 0 1
71818: PPUSH
71819: CALL_OW 437
71823: PUSH
71824: LD_INT 1
71826: ARRAY
71827: PUSH
71828: LD_INT 2
71830: ARRAY
71831: EQUAL
71832: AND
71833: PUSH
71834: LD_VAR 0 5
71838: PUSH
71839: LD_VAR 0 1
71843: PPUSH
71844: CALL_OW 437
71848: PUSH
71849: LD_INT 1
71851: ARRAY
71852: PUSH
71853: LD_INT 3
71855: ARRAY
71856: EQUAL
71857: AND
71858: IFFALSE 71868
// result := true end ;
71860: LD_ADDR_VAR 0 3
71864: PUSH
71865: LD_INT 1
71867: ST_TO_ADDR
// end ;
71868: LD_VAR 0 3
71872: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
71873: LD_INT 0
71875: PPUSH
// result := false ;
71876: LD_ADDR_VAR 0 4
71880: PUSH
71881: LD_INT 0
71883: ST_TO_ADDR
// if GetTaskList ( unit ) then
71884: LD_VAR 0 1
71888: PPUSH
71889: CALL_OW 437
71893: IFFALSE 71976
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71895: LD_STRING M
71897: PUSH
71898: LD_VAR 0 1
71902: PPUSH
71903: CALL_OW 437
71907: PUSH
71908: LD_INT 1
71910: ARRAY
71911: PUSH
71912: LD_INT 1
71914: ARRAY
71915: EQUAL
71916: PUSH
71917: LD_VAR 0 2
71921: PUSH
71922: LD_VAR 0 1
71926: PPUSH
71927: CALL_OW 437
71931: PUSH
71932: LD_INT 1
71934: ARRAY
71935: PUSH
71936: LD_INT 2
71938: ARRAY
71939: EQUAL
71940: AND
71941: PUSH
71942: LD_VAR 0 3
71946: PUSH
71947: LD_VAR 0 1
71951: PPUSH
71952: CALL_OW 437
71956: PUSH
71957: LD_INT 1
71959: ARRAY
71960: PUSH
71961: LD_INT 3
71963: ARRAY
71964: EQUAL
71965: AND
71966: IFFALSE 71976
// result := true ;
71968: LD_ADDR_VAR 0 4
71972: PUSH
71973: LD_INT 1
71975: ST_TO_ADDR
// end ; end ;
71976: LD_VAR 0 4
71980: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
71981: LD_INT 0
71983: PPUSH
71984: PPUSH
71985: PPUSH
71986: PPUSH
// if not unit or not area then
71987: LD_VAR 0 1
71991: NOT
71992: PUSH
71993: LD_VAR 0 2
71997: NOT
71998: OR
71999: IFFALSE 72003
// exit ;
72001: GO 72167
// tmp := AreaToList ( area , i ) ;
72003: LD_ADDR_VAR 0 6
72007: PUSH
72008: LD_VAR 0 2
72012: PPUSH
72013: LD_VAR 0 5
72017: PPUSH
72018: CALL_OW 517
72022: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
72023: LD_ADDR_VAR 0 5
72027: PUSH
72028: DOUBLE
72029: LD_INT 1
72031: DEC
72032: ST_TO_ADDR
72033: LD_VAR 0 6
72037: PUSH
72038: LD_INT 1
72040: ARRAY
72041: PUSH
72042: FOR_TO
72043: IFFALSE 72165
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
72045: LD_ADDR_VAR 0 7
72049: PUSH
72050: LD_VAR 0 6
72054: PUSH
72055: LD_INT 1
72057: ARRAY
72058: PUSH
72059: LD_VAR 0 5
72063: ARRAY
72064: PUSH
72065: LD_VAR 0 6
72069: PUSH
72070: LD_INT 2
72072: ARRAY
72073: PUSH
72074: LD_VAR 0 5
72078: ARRAY
72079: PUSH
72080: EMPTY
72081: LIST
72082: LIST
72083: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
72084: LD_VAR 0 7
72088: PUSH
72089: LD_INT 1
72091: ARRAY
72092: PPUSH
72093: LD_VAR 0 7
72097: PUSH
72098: LD_INT 2
72100: ARRAY
72101: PPUSH
72102: CALL_OW 428
72106: PUSH
72107: LD_INT 0
72109: EQUAL
72110: IFFALSE 72163
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
72112: LD_VAR 0 1
72116: PPUSH
72117: LD_VAR 0 7
72121: PUSH
72122: LD_INT 1
72124: ARRAY
72125: PPUSH
72126: LD_VAR 0 7
72130: PUSH
72131: LD_INT 2
72133: ARRAY
72134: PPUSH
72135: LD_VAR 0 3
72139: PPUSH
72140: CALL_OW 48
// result := IsPlaced ( unit ) ;
72144: LD_ADDR_VAR 0 4
72148: PUSH
72149: LD_VAR 0 1
72153: PPUSH
72154: CALL_OW 305
72158: ST_TO_ADDR
// exit ;
72159: POP
72160: POP
72161: GO 72167
// end ; end ;
72163: GO 72042
72165: POP
72166: POP
// end ;
72167: LD_VAR 0 4
72171: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
72172: LD_INT 0
72174: PPUSH
72175: PPUSH
72176: PPUSH
// if not side or side > 8 then
72177: LD_VAR 0 1
72181: NOT
72182: PUSH
72183: LD_VAR 0 1
72187: PUSH
72188: LD_INT 8
72190: GREATER
72191: OR
72192: IFFALSE 72196
// exit ;
72194: GO 72383
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
72196: LD_ADDR_VAR 0 4
72200: PUSH
72201: LD_INT 22
72203: PUSH
72204: LD_VAR 0 1
72208: PUSH
72209: EMPTY
72210: LIST
72211: LIST
72212: PUSH
72213: LD_INT 21
72215: PUSH
72216: LD_INT 3
72218: PUSH
72219: EMPTY
72220: LIST
72221: LIST
72222: PUSH
72223: EMPTY
72224: LIST
72225: LIST
72226: PPUSH
72227: CALL_OW 69
72231: ST_TO_ADDR
// if not tmp then
72232: LD_VAR 0 4
72236: NOT
72237: IFFALSE 72241
// exit ;
72239: GO 72383
// enable_addtolog := true ;
72241: LD_ADDR_OWVAR 81
72245: PUSH
72246: LD_INT 1
72248: ST_TO_ADDR
// AddToLog ( [ ) ;
72249: LD_STRING [
72251: PPUSH
72252: CALL_OW 561
// for i in tmp do
72256: LD_ADDR_VAR 0 3
72260: PUSH
72261: LD_VAR 0 4
72265: PUSH
72266: FOR_IN
72267: IFFALSE 72374
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
72269: LD_STRING [
72271: PUSH
72272: LD_VAR 0 3
72276: PPUSH
72277: CALL_OW 266
72281: STR
72282: PUSH
72283: LD_STRING , 
72285: STR
72286: PUSH
72287: LD_VAR 0 3
72291: PPUSH
72292: CALL_OW 250
72296: STR
72297: PUSH
72298: LD_STRING , 
72300: STR
72301: PUSH
72302: LD_VAR 0 3
72306: PPUSH
72307: CALL_OW 251
72311: STR
72312: PUSH
72313: LD_STRING , 
72315: STR
72316: PUSH
72317: LD_VAR 0 3
72321: PPUSH
72322: CALL_OW 254
72326: STR
72327: PUSH
72328: LD_STRING , 
72330: STR
72331: PUSH
72332: LD_VAR 0 3
72336: PPUSH
72337: LD_INT 1
72339: PPUSH
72340: CALL_OW 268
72344: STR
72345: PUSH
72346: LD_STRING , 
72348: STR
72349: PUSH
72350: LD_VAR 0 3
72354: PPUSH
72355: LD_INT 2
72357: PPUSH
72358: CALL_OW 268
72362: STR
72363: PUSH
72364: LD_STRING ],
72366: STR
72367: PPUSH
72368: CALL_OW 561
// end ;
72372: GO 72266
72374: POP
72375: POP
// AddToLog ( ]; ) ;
72376: LD_STRING ];
72378: PPUSH
72379: CALL_OW 561
// end ;
72383: LD_VAR 0 2
72387: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
72388: LD_INT 0
72390: PPUSH
72391: PPUSH
72392: PPUSH
72393: PPUSH
72394: PPUSH
// if not area or not rate or not max then
72395: LD_VAR 0 1
72399: NOT
72400: PUSH
72401: LD_VAR 0 2
72405: NOT
72406: OR
72407: PUSH
72408: LD_VAR 0 4
72412: NOT
72413: OR
72414: IFFALSE 72418
// exit ;
72416: GO 72610
// while 1 do
72418: LD_INT 1
72420: IFFALSE 72610
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
72422: LD_ADDR_VAR 0 9
72426: PUSH
72427: LD_VAR 0 1
72431: PPUSH
72432: LD_INT 1
72434: PPUSH
72435: CALL_OW 287
72439: PUSH
72440: LD_INT 10
72442: MUL
72443: ST_TO_ADDR
// r := rate / 10 ;
72444: LD_ADDR_VAR 0 7
72448: PUSH
72449: LD_VAR 0 2
72453: PUSH
72454: LD_INT 10
72456: DIVREAL
72457: ST_TO_ADDR
// time := 1 1$00 ;
72458: LD_ADDR_VAR 0 8
72462: PUSH
72463: LD_INT 2100
72465: ST_TO_ADDR
// if amount < min then
72466: LD_VAR 0 9
72470: PUSH
72471: LD_VAR 0 3
72475: LESS
72476: IFFALSE 72494
// r := r * 2 else
72478: LD_ADDR_VAR 0 7
72482: PUSH
72483: LD_VAR 0 7
72487: PUSH
72488: LD_INT 2
72490: MUL
72491: ST_TO_ADDR
72492: GO 72520
// if amount > max then
72494: LD_VAR 0 9
72498: PUSH
72499: LD_VAR 0 4
72503: GREATER
72504: IFFALSE 72520
// r := r / 2 ;
72506: LD_ADDR_VAR 0 7
72510: PUSH
72511: LD_VAR 0 7
72515: PUSH
72516: LD_INT 2
72518: DIVREAL
72519: ST_TO_ADDR
// time := time / r ;
72520: LD_ADDR_VAR 0 8
72524: PUSH
72525: LD_VAR 0 8
72529: PUSH
72530: LD_VAR 0 7
72534: DIVREAL
72535: ST_TO_ADDR
// if time < 0 then
72536: LD_VAR 0 8
72540: PUSH
72541: LD_INT 0
72543: LESS
72544: IFFALSE 72561
// time := time * - 1 ;
72546: LD_ADDR_VAR 0 8
72550: PUSH
72551: LD_VAR 0 8
72555: PUSH
72556: LD_INT 1
72558: NEG
72559: MUL
72560: ST_TO_ADDR
// wait ( time ) ;
72561: LD_VAR 0 8
72565: PPUSH
72566: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
72570: LD_INT 35
72572: PPUSH
72573: LD_INT 875
72575: PPUSH
72576: CALL_OW 12
72580: PPUSH
72581: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
72585: LD_INT 1
72587: PPUSH
72588: LD_INT 5
72590: PPUSH
72591: CALL_OW 12
72595: PPUSH
72596: LD_VAR 0 1
72600: PPUSH
72601: LD_INT 1
72603: PPUSH
72604: CALL_OW 55
// end ;
72608: GO 72418
// end ;
72610: LD_VAR 0 5
72614: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
72615: LD_INT 0
72617: PPUSH
72618: PPUSH
72619: PPUSH
72620: PPUSH
72621: PPUSH
72622: PPUSH
72623: PPUSH
72624: PPUSH
// if not turrets or not factories then
72625: LD_VAR 0 1
72629: NOT
72630: PUSH
72631: LD_VAR 0 2
72635: NOT
72636: OR
72637: IFFALSE 72641
// exit ;
72639: GO 72948
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
72641: LD_ADDR_VAR 0 10
72645: PUSH
72646: LD_INT 5
72648: PUSH
72649: LD_INT 6
72651: PUSH
72652: EMPTY
72653: LIST
72654: LIST
72655: PUSH
72656: LD_INT 2
72658: PUSH
72659: LD_INT 4
72661: PUSH
72662: EMPTY
72663: LIST
72664: LIST
72665: PUSH
72666: LD_INT 3
72668: PUSH
72669: LD_INT 5
72671: PUSH
72672: EMPTY
72673: LIST
72674: LIST
72675: PUSH
72676: EMPTY
72677: LIST
72678: LIST
72679: LIST
72680: PUSH
72681: LD_INT 24
72683: PUSH
72684: LD_INT 25
72686: PUSH
72687: EMPTY
72688: LIST
72689: LIST
72690: PUSH
72691: LD_INT 23
72693: PUSH
72694: LD_INT 27
72696: PUSH
72697: EMPTY
72698: LIST
72699: LIST
72700: PUSH
72701: EMPTY
72702: LIST
72703: LIST
72704: PUSH
72705: LD_INT 42
72707: PUSH
72708: LD_INT 43
72710: PUSH
72711: EMPTY
72712: LIST
72713: LIST
72714: PUSH
72715: LD_INT 44
72717: PUSH
72718: LD_INT 46
72720: PUSH
72721: EMPTY
72722: LIST
72723: LIST
72724: PUSH
72725: LD_INT 45
72727: PUSH
72728: LD_INT 47
72730: PUSH
72731: EMPTY
72732: LIST
72733: LIST
72734: PUSH
72735: EMPTY
72736: LIST
72737: LIST
72738: LIST
72739: PUSH
72740: EMPTY
72741: LIST
72742: LIST
72743: LIST
72744: ST_TO_ADDR
// result := [ ] ;
72745: LD_ADDR_VAR 0 3
72749: PUSH
72750: EMPTY
72751: ST_TO_ADDR
// for i in turrets do
72752: LD_ADDR_VAR 0 4
72756: PUSH
72757: LD_VAR 0 1
72761: PUSH
72762: FOR_IN
72763: IFFALSE 72946
// begin nat := GetNation ( i ) ;
72765: LD_ADDR_VAR 0 7
72769: PUSH
72770: LD_VAR 0 4
72774: PPUSH
72775: CALL_OW 248
72779: ST_TO_ADDR
// weapon := 0 ;
72780: LD_ADDR_VAR 0 8
72784: PUSH
72785: LD_INT 0
72787: ST_TO_ADDR
// if not nat then
72788: LD_VAR 0 7
72792: NOT
72793: IFFALSE 72797
// continue ;
72795: GO 72762
// for j in list [ nat ] do
72797: LD_ADDR_VAR 0 5
72801: PUSH
72802: LD_VAR 0 10
72806: PUSH
72807: LD_VAR 0 7
72811: ARRAY
72812: PUSH
72813: FOR_IN
72814: IFFALSE 72855
// if GetBWeapon ( i ) = j [ 1 ] then
72816: LD_VAR 0 4
72820: PPUSH
72821: CALL_OW 269
72825: PUSH
72826: LD_VAR 0 5
72830: PUSH
72831: LD_INT 1
72833: ARRAY
72834: EQUAL
72835: IFFALSE 72853
// begin weapon := j [ 2 ] ;
72837: LD_ADDR_VAR 0 8
72841: PUSH
72842: LD_VAR 0 5
72846: PUSH
72847: LD_INT 2
72849: ARRAY
72850: ST_TO_ADDR
// break ;
72851: GO 72855
// end ;
72853: GO 72813
72855: POP
72856: POP
// if not weapon then
72857: LD_VAR 0 8
72861: NOT
72862: IFFALSE 72866
// continue ;
72864: GO 72762
// for k in factories do
72866: LD_ADDR_VAR 0 6
72870: PUSH
72871: LD_VAR 0 2
72875: PUSH
72876: FOR_IN
72877: IFFALSE 72942
// begin weapons := AvailableWeaponList ( k ) ;
72879: LD_ADDR_VAR 0 9
72883: PUSH
72884: LD_VAR 0 6
72888: PPUSH
72889: CALL_OW 478
72893: ST_TO_ADDR
// if not weapons then
72894: LD_VAR 0 9
72898: NOT
72899: IFFALSE 72903
// continue ;
72901: GO 72876
// if weapon in weapons then
72903: LD_VAR 0 8
72907: PUSH
72908: LD_VAR 0 9
72912: IN
72913: IFFALSE 72940
// begin result := [ i , weapon ] ;
72915: LD_ADDR_VAR 0 3
72919: PUSH
72920: LD_VAR 0 4
72924: PUSH
72925: LD_VAR 0 8
72929: PUSH
72930: EMPTY
72931: LIST
72932: LIST
72933: ST_TO_ADDR
// exit ;
72934: POP
72935: POP
72936: POP
72937: POP
72938: GO 72948
// end ; end ;
72940: GO 72876
72942: POP
72943: POP
// end ;
72944: GO 72762
72946: POP
72947: POP
// end ;
72948: LD_VAR 0 3
72952: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
72953: LD_INT 0
72955: PPUSH
// if not side or side > 8 then
72956: LD_VAR 0 3
72960: NOT
72961: PUSH
72962: LD_VAR 0 3
72966: PUSH
72967: LD_INT 8
72969: GREATER
72970: OR
72971: IFFALSE 72975
// exit ;
72973: GO 73034
// if not range then
72975: LD_VAR 0 4
72979: NOT
72980: IFFALSE 72991
// range := - 12 ;
72982: LD_ADDR_VAR 0 4
72986: PUSH
72987: LD_INT 12
72989: NEG
72990: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
72991: LD_VAR 0 1
72995: PPUSH
72996: LD_VAR 0 2
73000: PPUSH
73001: LD_VAR 0 3
73005: PPUSH
73006: LD_VAR 0 4
73010: PPUSH
73011: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
73015: LD_VAR 0 1
73019: PPUSH
73020: LD_VAR 0 2
73024: PPUSH
73025: LD_VAR 0 3
73029: PPUSH
73030: CALL_OW 331
// end ;
73034: LD_VAR 0 5
73038: RET
// export function Video ( mode ) ; begin
73039: LD_INT 0
73041: PPUSH
// ingame_video = mode ;
73042: LD_ADDR_OWVAR 52
73046: PUSH
73047: LD_VAR 0 1
73051: ST_TO_ADDR
// interface_hidden = mode ;
73052: LD_ADDR_OWVAR 54
73056: PUSH
73057: LD_VAR 0 1
73061: ST_TO_ADDR
// end ;
73062: LD_VAR 0 2
73066: RET
// export function Join ( array , element ) ; begin
73067: LD_INT 0
73069: PPUSH
// result := Replace ( array , array + 1 , element ) ;
73070: LD_ADDR_VAR 0 3
73074: PUSH
73075: LD_VAR 0 1
73079: PPUSH
73080: LD_VAR 0 1
73084: PUSH
73085: LD_INT 1
73087: PLUS
73088: PPUSH
73089: LD_VAR 0 2
73093: PPUSH
73094: CALL_OW 1
73098: ST_TO_ADDR
// end ;
73099: LD_VAR 0 3
73103: RET
// export function JoinUnion ( array , element ) ; begin
73104: LD_INT 0
73106: PPUSH
// result := array union element ;
73107: LD_ADDR_VAR 0 3
73111: PUSH
73112: LD_VAR 0 1
73116: PUSH
73117: LD_VAR 0 2
73121: UNION
73122: ST_TO_ADDR
// end ;
73123: LD_VAR 0 3
73127: RET
// export function GetBehemoths ( side ) ; begin
73128: LD_INT 0
73130: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
73131: LD_ADDR_VAR 0 2
73135: PUSH
73136: LD_INT 22
73138: PUSH
73139: LD_VAR 0 1
73143: PUSH
73144: EMPTY
73145: LIST
73146: LIST
73147: PUSH
73148: LD_INT 31
73150: PUSH
73151: LD_INT 25
73153: PUSH
73154: EMPTY
73155: LIST
73156: LIST
73157: PUSH
73158: EMPTY
73159: LIST
73160: LIST
73161: PPUSH
73162: CALL_OW 69
73166: ST_TO_ADDR
// end ;
73167: LD_VAR 0 2
73171: RET
// export function Shuffle ( array ) ; var i , index ; begin
73172: LD_INT 0
73174: PPUSH
73175: PPUSH
73176: PPUSH
// result := [ ] ;
73177: LD_ADDR_VAR 0 2
73181: PUSH
73182: EMPTY
73183: ST_TO_ADDR
// if not array then
73184: LD_VAR 0 1
73188: NOT
73189: IFFALSE 73193
// exit ;
73191: GO 73292
// Randomize ;
73193: CALL_OW 10
// for i = array downto 1 do
73197: LD_ADDR_VAR 0 3
73201: PUSH
73202: DOUBLE
73203: LD_VAR 0 1
73207: INC
73208: ST_TO_ADDR
73209: LD_INT 1
73211: PUSH
73212: FOR_DOWNTO
73213: IFFALSE 73290
// begin index := rand ( 1 , array ) ;
73215: LD_ADDR_VAR 0 4
73219: PUSH
73220: LD_INT 1
73222: PPUSH
73223: LD_VAR 0 1
73227: PPUSH
73228: CALL_OW 12
73232: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
73233: LD_ADDR_VAR 0 2
73237: PUSH
73238: LD_VAR 0 2
73242: PPUSH
73243: LD_VAR 0 2
73247: PUSH
73248: LD_INT 1
73250: PLUS
73251: PPUSH
73252: LD_VAR 0 1
73256: PUSH
73257: LD_VAR 0 4
73261: ARRAY
73262: PPUSH
73263: CALL_OW 2
73267: ST_TO_ADDR
// array := Delete ( array , index ) ;
73268: LD_ADDR_VAR 0 1
73272: PUSH
73273: LD_VAR 0 1
73277: PPUSH
73278: LD_VAR 0 4
73282: PPUSH
73283: CALL_OW 3
73287: ST_TO_ADDR
// end ;
73288: GO 73212
73290: POP
73291: POP
// end ;
73292: LD_VAR 0 2
73296: RET
// export function GetBaseMaterials ( base ) ; begin
73297: LD_INT 0
73299: PPUSH
// result := [ 0 , 0 , 0 ] ;
73300: LD_ADDR_VAR 0 2
73304: PUSH
73305: LD_INT 0
73307: PUSH
73308: LD_INT 0
73310: PUSH
73311: LD_INT 0
73313: PUSH
73314: EMPTY
73315: LIST
73316: LIST
73317: LIST
73318: ST_TO_ADDR
// if not base then
73319: LD_VAR 0 1
73323: NOT
73324: IFFALSE 73328
// exit ;
73326: GO 73377
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
73328: LD_ADDR_VAR 0 2
73332: PUSH
73333: LD_VAR 0 1
73337: PPUSH
73338: LD_INT 1
73340: PPUSH
73341: CALL_OW 275
73345: PUSH
73346: LD_VAR 0 1
73350: PPUSH
73351: LD_INT 2
73353: PPUSH
73354: CALL_OW 275
73358: PUSH
73359: LD_VAR 0 1
73363: PPUSH
73364: LD_INT 3
73366: PPUSH
73367: CALL_OW 275
73371: PUSH
73372: EMPTY
73373: LIST
73374: LIST
73375: LIST
73376: ST_TO_ADDR
// end ;
73377: LD_VAR 0 2
73381: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
73382: LD_INT 0
73384: PPUSH
73385: PPUSH
// result := array ;
73386: LD_ADDR_VAR 0 3
73390: PUSH
73391: LD_VAR 0 1
73395: ST_TO_ADDR
// if size > 0 then
73396: LD_VAR 0 2
73400: PUSH
73401: LD_INT 0
73403: GREATER
73404: IFFALSE 73450
// for i := array downto size do
73406: LD_ADDR_VAR 0 4
73410: PUSH
73411: DOUBLE
73412: LD_VAR 0 1
73416: INC
73417: ST_TO_ADDR
73418: LD_VAR 0 2
73422: PUSH
73423: FOR_DOWNTO
73424: IFFALSE 73448
// result := Delete ( result , result ) ;
73426: LD_ADDR_VAR 0 3
73430: PUSH
73431: LD_VAR 0 3
73435: PPUSH
73436: LD_VAR 0 3
73440: PPUSH
73441: CALL_OW 3
73445: ST_TO_ADDR
73446: GO 73423
73448: POP
73449: POP
// end ;
73450: LD_VAR 0 3
73454: RET
// export function ComExit ( unit ) ; var tmp ; begin
73455: LD_INT 0
73457: PPUSH
73458: PPUSH
// if not IsInUnit ( unit ) then
73459: LD_VAR 0 1
73463: PPUSH
73464: CALL_OW 310
73468: NOT
73469: IFFALSE 73473
// exit ;
73471: GO 73533
// tmp := IsInUnit ( unit ) ;
73473: LD_ADDR_VAR 0 3
73477: PUSH
73478: LD_VAR 0 1
73482: PPUSH
73483: CALL_OW 310
73487: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
73488: LD_VAR 0 3
73492: PPUSH
73493: CALL_OW 247
73497: PUSH
73498: LD_INT 2
73500: EQUAL
73501: IFFALSE 73514
// ComExitVehicle ( unit ) else
73503: LD_VAR 0 1
73507: PPUSH
73508: CALL_OW 121
73512: GO 73523
// ComExitBuilding ( unit ) ;
73514: LD_VAR 0 1
73518: PPUSH
73519: CALL_OW 122
// result := tmp ;
73523: LD_ADDR_VAR 0 2
73527: PUSH
73528: LD_VAR 0 3
73532: ST_TO_ADDR
// end ;
73533: LD_VAR 0 2
73537: RET
// export function ComExitAll ( units ) ; var i ; begin
73538: LD_INT 0
73540: PPUSH
73541: PPUSH
// if not units then
73542: LD_VAR 0 1
73546: NOT
73547: IFFALSE 73551
// exit ;
73549: GO 73577
// for i in units do
73551: LD_ADDR_VAR 0 3
73555: PUSH
73556: LD_VAR 0 1
73560: PUSH
73561: FOR_IN
73562: IFFALSE 73575
// ComExit ( i ) ;
73564: LD_VAR 0 3
73568: PPUSH
73569: CALL 73455 0 1
73573: GO 73561
73575: POP
73576: POP
// end ;
73577: LD_VAR 0 2
73581: RET
// export function ResetHc ; begin
73582: LD_INT 0
73584: PPUSH
// InitHc ;
73585: CALL_OW 19
// hc_importance := 0 ;
73589: LD_ADDR_OWVAR 32
73593: PUSH
73594: LD_INT 0
73596: ST_TO_ADDR
// end ;
73597: LD_VAR 0 1
73601: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
73602: LD_INT 0
73604: PPUSH
73605: PPUSH
73606: PPUSH
// _x := ( x1 + x2 ) div 2 ;
73607: LD_ADDR_VAR 0 6
73611: PUSH
73612: LD_VAR 0 1
73616: PUSH
73617: LD_VAR 0 3
73621: PLUS
73622: PUSH
73623: LD_INT 2
73625: DIV
73626: ST_TO_ADDR
// if _x < 0 then
73627: LD_VAR 0 6
73631: PUSH
73632: LD_INT 0
73634: LESS
73635: IFFALSE 73652
// _x := _x * - 1 ;
73637: LD_ADDR_VAR 0 6
73641: PUSH
73642: LD_VAR 0 6
73646: PUSH
73647: LD_INT 1
73649: NEG
73650: MUL
73651: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
73652: LD_ADDR_VAR 0 7
73656: PUSH
73657: LD_VAR 0 2
73661: PUSH
73662: LD_VAR 0 4
73666: PLUS
73667: PUSH
73668: LD_INT 2
73670: DIV
73671: ST_TO_ADDR
// if _y < 0 then
73672: LD_VAR 0 7
73676: PUSH
73677: LD_INT 0
73679: LESS
73680: IFFALSE 73697
// _y := _y * - 1 ;
73682: LD_ADDR_VAR 0 7
73686: PUSH
73687: LD_VAR 0 7
73691: PUSH
73692: LD_INT 1
73694: NEG
73695: MUL
73696: ST_TO_ADDR
// result := [ _x , _y ] ;
73697: LD_ADDR_VAR 0 5
73701: PUSH
73702: LD_VAR 0 6
73706: PUSH
73707: LD_VAR 0 7
73711: PUSH
73712: EMPTY
73713: LIST
73714: LIST
73715: ST_TO_ADDR
// end ;
73716: LD_VAR 0 5
73720: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
73721: LD_INT 0
73723: PPUSH
73724: PPUSH
73725: PPUSH
73726: PPUSH
// task := GetTaskList ( unit ) ;
73727: LD_ADDR_VAR 0 7
73731: PUSH
73732: LD_VAR 0 1
73736: PPUSH
73737: CALL_OW 437
73741: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
73742: LD_VAR 0 7
73746: NOT
73747: PUSH
73748: LD_VAR 0 1
73752: PPUSH
73753: LD_VAR 0 2
73757: PPUSH
73758: CALL_OW 308
73762: NOT
73763: AND
73764: IFFALSE 73768
// exit ;
73766: GO 73886
// if IsInArea ( unit , area ) then
73768: LD_VAR 0 1
73772: PPUSH
73773: LD_VAR 0 2
73777: PPUSH
73778: CALL_OW 308
73782: IFFALSE 73800
// begin ComMoveToArea ( unit , goAway ) ;
73784: LD_VAR 0 1
73788: PPUSH
73789: LD_VAR 0 3
73793: PPUSH
73794: CALL_OW 113
// exit ;
73798: GO 73886
// end ; if task [ 1 ] [ 1 ] <> M then
73800: LD_VAR 0 7
73804: PUSH
73805: LD_INT 1
73807: ARRAY
73808: PUSH
73809: LD_INT 1
73811: ARRAY
73812: PUSH
73813: LD_STRING M
73815: NONEQUAL
73816: IFFALSE 73820
// exit ;
73818: GO 73886
// x := task [ 1 ] [ 2 ] ;
73820: LD_ADDR_VAR 0 5
73824: PUSH
73825: LD_VAR 0 7
73829: PUSH
73830: LD_INT 1
73832: ARRAY
73833: PUSH
73834: LD_INT 2
73836: ARRAY
73837: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
73838: LD_ADDR_VAR 0 6
73842: PUSH
73843: LD_VAR 0 7
73847: PUSH
73848: LD_INT 1
73850: ARRAY
73851: PUSH
73852: LD_INT 3
73854: ARRAY
73855: ST_TO_ADDR
// if InArea ( x , y , area ) then
73856: LD_VAR 0 5
73860: PPUSH
73861: LD_VAR 0 6
73865: PPUSH
73866: LD_VAR 0 2
73870: PPUSH
73871: CALL_OW 309
73875: IFFALSE 73886
// ComStop ( unit ) ;
73877: LD_VAR 0 1
73881: PPUSH
73882: CALL_OW 141
// end ;
73886: LD_VAR 0 4
73890: RET
// export function Abs ( value ) ; begin
73891: LD_INT 0
73893: PPUSH
// result := value ;
73894: LD_ADDR_VAR 0 2
73898: PUSH
73899: LD_VAR 0 1
73903: ST_TO_ADDR
// if value < 0 then
73904: LD_VAR 0 1
73908: PUSH
73909: LD_INT 0
73911: LESS
73912: IFFALSE 73929
// result := value * - 1 ;
73914: LD_ADDR_VAR 0 2
73918: PUSH
73919: LD_VAR 0 1
73923: PUSH
73924: LD_INT 1
73926: NEG
73927: MUL
73928: ST_TO_ADDR
// end ;
73929: LD_VAR 0 2
73933: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
73934: LD_INT 0
73936: PPUSH
73937: PPUSH
73938: PPUSH
73939: PPUSH
73940: PPUSH
73941: PPUSH
73942: PPUSH
73943: PPUSH
// if not unit or not building then
73944: LD_VAR 0 1
73948: NOT
73949: PUSH
73950: LD_VAR 0 2
73954: NOT
73955: OR
73956: IFFALSE 73960
// exit ;
73958: GO 74186
// x := GetX ( building ) ;
73960: LD_ADDR_VAR 0 4
73964: PUSH
73965: LD_VAR 0 2
73969: PPUSH
73970: CALL_OW 250
73974: ST_TO_ADDR
// y := GetY ( building ) ;
73975: LD_ADDR_VAR 0 6
73979: PUSH
73980: LD_VAR 0 2
73984: PPUSH
73985: CALL_OW 251
73989: ST_TO_ADDR
// d := GetDir ( building ) ;
73990: LD_ADDR_VAR 0 8
73994: PUSH
73995: LD_VAR 0 2
73999: PPUSH
74000: CALL_OW 254
74004: ST_TO_ADDR
// r := 4 ;
74005: LD_ADDR_VAR 0 9
74009: PUSH
74010: LD_INT 4
74012: ST_TO_ADDR
// for i := 1 to 5 do
74013: LD_ADDR_VAR 0 10
74017: PUSH
74018: DOUBLE
74019: LD_INT 1
74021: DEC
74022: ST_TO_ADDR
74023: LD_INT 5
74025: PUSH
74026: FOR_TO
74027: IFFALSE 74184
// begin _x := ShiftX ( x , d , r + i ) ;
74029: LD_ADDR_VAR 0 5
74033: PUSH
74034: LD_VAR 0 4
74038: PPUSH
74039: LD_VAR 0 8
74043: PPUSH
74044: LD_VAR 0 9
74048: PUSH
74049: LD_VAR 0 10
74053: PLUS
74054: PPUSH
74055: CALL_OW 272
74059: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
74060: LD_ADDR_VAR 0 7
74064: PUSH
74065: LD_VAR 0 6
74069: PPUSH
74070: LD_VAR 0 8
74074: PPUSH
74075: LD_VAR 0 9
74079: PUSH
74080: LD_VAR 0 10
74084: PLUS
74085: PPUSH
74086: CALL_OW 273
74090: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
74091: LD_VAR 0 5
74095: PPUSH
74096: LD_VAR 0 7
74100: PPUSH
74101: CALL_OW 488
74105: PUSH
74106: LD_VAR 0 5
74110: PPUSH
74111: LD_VAR 0 7
74115: PPUSH
74116: CALL_OW 428
74120: PPUSH
74121: CALL_OW 247
74125: PUSH
74126: LD_INT 3
74128: PUSH
74129: LD_INT 2
74131: PUSH
74132: EMPTY
74133: LIST
74134: LIST
74135: IN
74136: NOT
74137: AND
74138: IFFALSE 74182
// begin ComMoveXY ( unit , _x , _y ) ;
74140: LD_VAR 0 1
74144: PPUSH
74145: LD_VAR 0 5
74149: PPUSH
74150: LD_VAR 0 7
74154: PPUSH
74155: CALL_OW 111
// result := [ _x , _y ] ;
74159: LD_ADDR_VAR 0 3
74163: PUSH
74164: LD_VAR 0 5
74168: PUSH
74169: LD_VAR 0 7
74173: PUSH
74174: EMPTY
74175: LIST
74176: LIST
74177: ST_TO_ADDR
// exit ;
74178: POP
74179: POP
74180: GO 74186
// end ; end ;
74182: GO 74026
74184: POP
74185: POP
// end ;
74186: LD_VAR 0 3
74190: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
74191: LD_INT 0
74193: PPUSH
74194: PPUSH
74195: PPUSH
// result := 0 ;
74196: LD_ADDR_VAR 0 3
74200: PUSH
74201: LD_INT 0
74203: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
74204: LD_VAR 0 1
74208: PUSH
74209: LD_INT 0
74211: LESS
74212: PUSH
74213: LD_VAR 0 1
74217: PUSH
74218: LD_INT 8
74220: GREATER
74221: OR
74222: PUSH
74223: LD_VAR 0 2
74227: PUSH
74228: LD_INT 0
74230: LESS
74231: OR
74232: PUSH
74233: LD_VAR 0 2
74237: PUSH
74238: LD_INT 8
74240: GREATER
74241: OR
74242: IFFALSE 74246
// exit ;
74244: GO 74321
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
74246: LD_ADDR_VAR 0 4
74250: PUSH
74251: LD_INT 22
74253: PUSH
74254: LD_VAR 0 2
74258: PUSH
74259: EMPTY
74260: LIST
74261: LIST
74262: PPUSH
74263: CALL_OW 69
74267: PUSH
74268: FOR_IN
74269: IFFALSE 74319
// begin un := UnitShoot ( i ) ;
74271: LD_ADDR_VAR 0 5
74275: PUSH
74276: LD_VAR 0 4
74280: PPUSH
74281: CALL_OW 504
74285: ST_TO_ADDR
// if GetSide ( un ) = side1 then
74286: LD_VAR 0 5
74290: PPUSH
74291: CALL_OW 255
74295: PUSH
74296: LD_VAR 0 1
74300: EQUAL
74301: IFFALSE 74317
// begin result := un ;
74303: LD_ADDR_VAR 0 3
74307: PUSH
74308: LD_VAR 0 5
74312: ST_TO_ADDR
// exit ;
74313: POP
74314: POP
74315: GO 74321
// end ; end ;
74317: GO 74268
74319: POP
74320: POP
// end ;
74321: LD_VAR 0 3
74325: RET
// export function GetCargoBay ( units ) ; begin
74326: LD_INT 0
74328: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
74329: LD_ADDR_VAR 0 2
74333: PUSH
74334: LD_VAR 0 1
74338: PPUSH
74339: LD_INT 2
74341: PUSH
74342: LD_INT 34
74344: PUSH
74345: LD_INT 12
74347: PUSH
74348: EMPTY
74349: LIST
74350: LIST
74351: PUSH
74352: LD_INT 34
74354: PUSH
74355: LD_INT 51
74357: PUSH
74358: EMPTY
74359: LIST
74360: LIST
74361: PUSH
74362: LD_INT 34
74364: PUSH
74365: LD_INT 32
74367: PUSH
74368: EMPTY
74369: LIST
74370: LIST
74371: PUSH
74372: LD_INT 34
74374: PUSH
74375: LD_EXP 59
74379: PUSH
74380: EMPTY
74381: LIST
74382: LIST
74383: PUSH
74384: EMPTY
74385: LIST
74386: LIST
74387: LIST
74388: LIST
74389: LIST
74390: PPUSH
74391: CALL_OW 72
74395: ST_TO_ADDR
// end ;
74396: LD_VAR 0 2
74400: RET
// export function Negate ( value ) ; begin
74401: LD_INT 0
74403: PPUSH
// result := not value ;
74404: LD_ADDR_VAR 0 2
74408: PUSH
74409: LD_VAR 0 1
74413: NOT
74414: ST_TO_ADDR
// end ;
74415: LD_VAR 0 2
74419: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
74420: LD_INT 0
74422: PPUSH
// if x1 = x2 then
74423: LD_VAR 0 1
74427: PUSH
74428: LD_VAR 0 3
74432: EQUAL
74433: IFFALSE 74467
// begin if y1 > y2 then
74435: LD_VAR 0 2
74439: PUSH
74440: LD_VAR 0 4
74444: GREATER
74445: IFFALSE 74457
// result := 0 else
74447: LD_ADDR_VAR 0 5
74451: PUSH
74452: LD_INT 0
74454: ST_TO_ADDR
74455: GO 74465
// result := 3 ;
74457: LD_ADDR_VAR 0 5
74461: PUSH
74462: LD_INT 3
74464: ST_TO_ADDR
// exit ;
74465: GO 74553
// end ; if y1 = y2 then
74467: LD_VAR 0 2
74471: PUSH
74472: LD_VAR 0 4
74476: EQUAL
74477: IFFALSE 74511
// begin if x1 > x2 then
74479: LD_VAR 0 1
74483: PUSH
74484: LD_VAR 0 3
74488: GREATER
74489: IFFALSE 74501
// result := 1 else
74491: LD_ADDR_VAR 0 5
74495: PUSH
74496: LD_INT 1
74498: ST_TO_ADDR
74499: GO 74509
// result := 4 ;
74501: LD_ADDR_VAR 0 5
74505: PUSH
74506: LD_INT 4
74508: ST_TO_ADDR
// exit ;
74509: GO 74553
// end ; if x1 > x2 and y1 > y2 then
74511: LD_VAR 0 1
74515: PUSH
74516: LD_VAR 0 3
74520: GREATER
74521: PUSH
74522: LD_VAR 0 2
74526: PUSH
74527: LD_VAR 0 4
74531: GREATER
74532: AND
74533: IFFALSE 74545
// result := 2 else
74535: LD_ADDR_VAR 0 5
74539: PUSH
74540: LD_INT 2
74542: ST_TO_ADDR
74543: GO 74553
// result := 5 ;
74545: LD_ADDR_VAR 0 5
74549: PUSH
74550: LD_INT 5
74552: ST_TO_ADDR
// end ;
74553: LD_VAR 0 5
74557: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
74558: LD_INT 0
74560: PPUSH
74561: PPUSH
// if not driver or not IsInUnit ( driver ) then
74562: LD_VAR 0 1
74566: NOT
74567: PUSH
74568: LD_VAR 0 1
74572: PPUSH
74573: CALL_OW 310
74577: NOT
74578: OR
74579: IFFALSE 74583
// exit ;
74581: GO 74673
// vehicle := IsInUnit ( driver ) ;
74583: LD_ADDR_VAR 0 3
74587: PUSH
74588: LD_VAR 0 1
74592: PPUSH
74593: CALL_OW 310
74597: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
74598: LD_VAR 0 1
74602: PPUSH
74603: LD_STRING \
74605: PUSH
74606: LD_INT 0
74608: PUSH
74609: LD_INT 0
74611: PUSH
74612: LD_INT 0
74614: PUSH
74615: LD_INT 0
74617: PUSH
74618: LD_INT 0
74620: PUSH
74621: LD_INT 0
74623: PUSH
74624: EMPTY
74625: LIST
74626: LIST
74627: LIST
74628: LIST
74629: LIST
74630: LIST
74631: LIST
74632: PUSH
74633: LD_STRING E
74635: PUSH
74636: LD_INT 0
74638: PUSH
74639: LD_INT 0
74641: PUSH
74642: LD_VAR 0 3
74646: PUSH
74647: LD_INT 0
74649: PUSH
74650: LD_INT 0
74652: PUSH
74653: LD_INT 0
74655: PUSH
74656: EMPTY
74657: LIST
74658: LIST
74659: LIST
74660: LIST
74661: LIST
74662: LIST
74663: LIST
74664: PUSH
74665: EMPTY
74666: LIST
74667: LIST
74668: PPUSH
74669: CALL_OW 446
// end ;
74673: LD_VAR 0 2
74677: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
74678: LD_INT 0
74680: PPUSH
74681: PPUSH
// if not driver or not IsInUnit ( driver ) then
74682: LD_VAR 0 1
74686: NOT
74687: PUSH
74688: LD_VAR 0 1
74692: PPUSH
74693: CALL_OW 310
74697: NOT
74698: OR
74699: IFFALSE 74703
// exit ;
74701: GO 74793
// vehicle := IsInUnit ( driver ) ;
74703: LD_ADDR_VAR 0 3
74707: PUSH
74708: LD_VAR 0 1
74712: PPUSH
74713: CALL_OW 310
74717: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
74718: LD_VAR 0 1
74722: PPUSH
74723: LD_STRING \
74725: PUSH
74726: LD_INT 0
74728: PUSH
74729: LD_INT 0
74731: PUSH
74732: LD_INT 0
74734: PUSH
74735: LD_INT 0
74737: PUSH
74738: LD_INT 0
74740: PUSH
74741: LD_INT 0
74743: PUSH
74744: EMPTY
74745: LIST
74746: LIST
74747: LIST
74748: LIST
74749: LIST
74750: LIST
74751: LIST
74752: PUSH
74753: LD_STRING E
74755: PUSH
74756: LD_INT 0
74758: PUSH
74759: LD_INT 0
74761: PUSH
74762: LD_VAR 0 3
74766: PUSH
74767: LD_INT 0
74769: PUSH
74770: LD_INT 0
74772: PUSH
74773: LD_INT 0
74775: PUSH
74776: EMPTY
74777: LIST
74778: LIST
74779: LIST
74780: LIST
74781: LIST
74782: LIST
74783: LIST
74784: PUSH
74785: EMPTY
74786: LIST
74787: LIST
74788: PPUSH
74789: CALL_OW 447
// end ;
74793: LD_VAR 0 2
74797: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
74798: LD_INT 0
74800: PPUSH
74801: PPUSH
74802: PPUSH
// tmp := [ ] ;
74803: LD_ADDR_VAR 0 5
74807: PUSH
74808: EMPTY
74809: ST_TO_ADDR
// for i in units do
74810: LD_ADDR_VAR 0 4
74814: PUSH
74815: LD_VAR 0 1
74819: PUSH
74820: FOR_IN
74821: IFFALSE 74859
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
74823: LD_ADDR_VAR 0 5
74827: PUSH
74828: LD_VAR 0 5
74832: PPUSH
74833: LD_VAR 0 5
74837: PUSH
74838: LD_INT 1
74840: PLUS
74841: PPUSH
74842: LD_VAR 0 4
74846: PPUSH
74847: CALL_OW 256
74851: PPUSH
74852: CALL_OW 2
74856: ST_TO_ADDR
74857: GO 74820
74859: POP
74860: POP
// if not tmp then
74861: LD_VAR 0 5
74865: NOT
74866: IFFALSE 74870
// exit ;
74868: GO 74918
// if asc then
74870: LD_VAR 0 2
74874: IFFALSE 74898
// result := SortListByListAsc ( units , tmp ) else
74876: LD_ADDR_VAR 0 3
74880: PUSH
74881: LD_VAR 0 1
74885: PPUSH
74886: LD_VAR 0 5
74890: PPUSH
74891: CALL_OW 76
74895: ST_TO_ADDR
74896: GO 74918
// result := SortListByListDesc ( units , tmp ) ;
74898: LD_ADDR_VAR 0 3
74902: PUSH
74903: LD_VAR 0 1
74907: PPUSH
74908: LD_VAR 0 5
74912: PPUSH
74913: CALL_OW 77
74917: ST_TO_ADDR
// end ;
74918: LD_VAR 0 3
74922: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
74923: LD_INT 0
74925: PPUSH
74926: PPUSH
// task := GetTaskList ( mech ) ;
74927: LD_ADDR_VAR 0 4
74931: PUSH
74932: LD_VAR 0 1
74936: PPUSH
74937: CALL_OW 437
74941: ST_TO_ADDR
// if not task then
74942: LD_VAR 0 4
74946: NOT
74947: IFFALSE 74951
// exit ;
74949: GO 74993
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
74951: LD_ADDR_VAR 0 3
74955: PUSH
74956: LD_VAR 0 4
74960: PUSH
74961: LD_INT 1
74963: ARRAY
74964: PUSH
74965: LD_INT 1
74967: ARRAY
74968: PUSH
74969: LD_STRING r
74971: EQUAL
74972: PUSH
74973: LD_VAR 0 4
74977: PUSH
74978: LD_INT 1
74980: ARRAY
74981: PUSH
74982: LD_INT 4
74984: ARRAY
74985: PUSH
74986: LD_VAR 0 2
74990: EQUAL
74991: AND
74992: ST_TO_ADDR
// end ;
74993: LD_VAR 0 3
74997: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
74998: LD_INT 0
75000: PPUSH
// SetDir ( unit , d ) ;
75001: LD_VAR 0 1
75005: PPUSH
75006: LD_VAR 0 4
75010: PPUSH
75011: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
75015: LD_VAR 0 1
75019: PPUSH
75020: LD_VAR 0 2
75024: PPUSH
75025: LD_VAR 0 3
75029: PPUSH
75030: LD_VAR 0 5
75034: PPUSH
75035: CALL_OW 48
// end ;
75039: LD_VAR 0 6
75043: RET
// export function ToNaturalNumber ( number ) ; begin
75044: LD_INT 0
75046: PPUSH
// result := number div 1 ;
75047: LD_ADDR_VAR 0 2
75051: PUSH
75052: LD_VAR 0 1
75056: PUSH
75057: LD_INT 1
75059: DIV
75060: ST_TO_ADDR
// if number < 0 then
75061: LD_VAR 0 1
75065: PUSH
75066: LD_INT 0
75068: LESS
75069: IFFALSE 75079
// result := 0 ;
75071: LD_ADDR_VAR 0 2
75075: PUSH
75076: LD_INT 0
75078: ST_TO_ADDR
// end ;
75079: LD_VAR 0 2
75083: RET
// export function SortByClass ( units , class ) ; var un ; begin
75084: LD_INT 0
75086: PPUSH
75087: PPUSH
// if not units or not class then
75088: LD_VAR 0 1
75092: NOT
75093: PUSH
75094: LD_VAR 0 2
75098: NOT
75099: OR
75100: IFFALSE 75104
// exit ;
75102: GO 75199
// result := [ ] ;
75104: LD_ADDR_VAR 0 3
75108: PUSH
75109: EMPTY
75110: ST_TO_ADDR
// for un in units do
75111: LD_ADDR_VAR 0 4
75115: PUSH
75116: LD_VAR 0 1
75120: PUSH
75121: FOR_IN
75122: IFFALSE 75197
// if GetClass ( un ) = class then
75124: LD_VAR 0 4
75128: PPUSH
75129: CALL_OW 257
75133: PUSH
75134: LD_VAR 0 2
75138: EQUAL
75139: IFFALSE 75166
// result := Insert ( result , 1 , un ) else
75141: LD_ADDR_VAR 0 3
75145: PUSH
75146: LD_VAR 0 3
75150: PPUSH
75151: LD_INT 1
75153: PPUSH
75154: LD_VAR 0 4
75158: PPUSH
75159: CALL_OW 2
75163: ST_TO_ADDR
75164: GO 75195
// result := Replace ( result , result + 1 , un ) ;
75166: LD_ADDR_VAR 0 3
75170: PUSH
75171: LD_VAR 0 3
75175: PPUSH
75176: LD_VAR 0 3
75180: PUSH
75181: LD_INT 1
75183: PLUS
75184: PPUSH
75185: LD_VAR 0 4
75189: PPUSH
75190: CALL_OW 1
75194: ST_TO_ADDR
75195: GO 75121
75197: POP
75198: POP
// end ;
75199: LD_VAR 0 3
75203: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
75204: LD_INT 0
75206: PPUSH
75207: PPUSH
75208: PPUSH
75209: PPUSH
75210: PPUSH
75211: PPUSH
75212: PPUSH
// result := [ ] ;
75213: LD_ADDR_VAR 0 4
75217: PUSH
75218: EMPTY
75219: ST_TO_ADDR
// if x - r < 0 then
75220: LD_VAR 0 1
75224: PUSH
75225: LD_VAR 0 3
75229: MINUS
75230: PUSH
75231: LD_INT 0
75233: LESS
75234: IFFALSE 75246
// min_x := 0 else
75236: LD_ADDR_VAR 0 8
75240: PUSH
75241: LD_INT 0
75243: ST_TO_ADDR
75244: GO 75262
// min_x := x - r ;
75246: LD_ADDR_VAR 0 8
75250: PUSH
75251: LD_VAR 0 1
75255: PUSH
75256: LD_VAR 0 3
75260: MINUS
75261: ST_TO_ADDR
// if y - r < 0 then
75262: LD_VAR 0 2
75266: PUSH
75267: LD_VAR 0 3
75271: MINUS
75272: PUSH
75273: LD_INT 0
75275: LESS
75276: IFFALSE 75288
// min_y := 0 else
75278: LD_ADDR_VAR 0 7
75282: PUSH
75283: LD_INT 0
75285: ST_TO_ADDR
75286: GO 75304
// min_y := y - r ;
75288: LD_ADDR_VAR 0 7
75292: PUSH
75293: LD_VAR 0 2
75297: PUSH
75298: LD_VAR 0 3
75302: MINUS
75303: ST_TO_ADDR
// max_x := x + r ;
75304: LD_ADDR_VAR 0 9
75308: PUSH
75309: LD_VAR 0 1
75313: PUSH
75314: LD_VAR 0 3
75318: PLUS
75319: ST_TO_ADDR
// max_y := y + r ;
75320: LD_ADDR_VAR 0 10
75324: PUSH
75325: LD_VAR 0 2
75329: PUSH
75330: LD_VAR 0 3
75334: PLUS
75335: ST_TO_ADDR
// for _x = min_x to max_x do
75336: LD_ADDR_VAR 0 5
75340: PUSH
75341: DOUBLE
75342: LD_VAR 0 8
75346: DEC
75347: ST_TO_ADDR
75348: LD_VAR 0 9
75352: PUSH
75353: FOR_TO
75354: IFFALSE 75455
// for _y = min_y to max_y do
75356: LD_ADDR_VAR 0 6
75360: PUSH
75361: DOUBLE
75362: LD_VAR 0 7
75366: DEC
75367: ST_TO_ADDR
75368: LD_VAR 0 10
75372: PUSH
75373: FOR_TO
75374: IFFALSE 75451
// begin if not ValidHex ( _x , _y ) then
75376: LD_VAR 0 5
75380: PPUSH
75381: LD_VAR 0 6
75385: PPUSH
75386: CALL_OW 488
75390: NOT
75391: IFFALSE 75395
// continue ;
75393: GO 75373
// if GetResourceTypeXY ( _x , _y ) then
75395: LD_VAR 0 5
75399: PPUSH
75400: LD_VAR 0 6
75404: PPUSH
75405: CALL_OW 283
75409: IFFALSE 75449
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
75411: LD_ADDR_VAR 0 4
75415: PUSH
75416: LD_VAR 0 4
75420: PPUSH
75421: LD_VAR 0 4
75425: PUSH
75426: LD_INT 1
75428: PLUS
75429: PPUSH
75430: LD_VAR 0 5
75434: PUSH
75435: LD_VAR 0 6
75439: PUSH
75440: EMPTY
75441: LIST
75442: LIST
75443: PPUSH
75444: CALL_OW 1
75448: ST_TO_ADDR
// end ;
75449: GO 75373
75451: POP
75452: POP
75453: GO 75353
75455: POP
75456: POP
// end ;
75457: LD_VAR 0 4
75461: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
75462: LD_INT 0
75464: PPUSH
75465: PPUSH
75466: PPUSH
75467: PPUSH
75468: PPUSH
75469: PPUSH
// if not units then
75470: LD_VAR 0 1
75474: NOT
75475: IFFALSE 75479
// exit ;
75477: GO 75880
// result := UnitFilter ( units , [ f_ok ] ) ;
75479: LD_ADDR_VAR 0 3
75483: PUSH
75484: LD_VAR 0 1
75488: PPUSH
75489: LD_INT 50
75491: PUSH
75492: EMPTY
75493: LIST
75494: PPUSH
75495: CALL_OW 72
75499: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
75500: LD_ADDR_VAR 0 7
75504: PUSH
75505: LD_VAR 0 1
75509: PUSH
75510: LD_INT 1
75512: ARRAY
75513: PPUSH
75514: CALL_OW 255
75518: ST_TO_ADDR
// if not result then
75519: LD_VAR 0 3
75523: NOT
75524: IFFALSE 75528
// exit ;
75526: GO 75880
// for i in result do
75528: LD_ADDR_VAR 0 4
75532: PUSH
75533: LD_VAR 0 3
75537: PUSH
75538: FOR_IN
75539: IFFALSE 75878
// begin tag := GetTag ( i ) + 1 ;
75541: LD_ADDR_VAR 0 8
75545: PUSH
75546: LD_VAR 0 4
75550: PPUSH
75551: CALL_OW 110
75555: PUSH
75556: LD_INT 1
75558: PLUS
75559: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
75560: LD_ADDR_VAR 0 6
75564: PUSH
75565: LD_VAR 0 4
75569: PPUSH
75570: CALL_OW 250
75574: PPUSH
75575: LD_VAR 0 4
75579: PPUSH
75580: CALL_OW 251
75584: PPUSH
75585: LD_INT 6
75587: PPUSH
75588: CALL 75204 0 3
75592: ST_TO_ADDR
// if cr then
75593: LD_VAR 0 6
75597: IFFALSE 75636
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
75599: LD_VAR 0 4
75603: PPUSH
75604: LD_VAR 0 6
75608: PUSH
75609: LD_INT 1
75611: ARRAY
75612: PUSH
75613: LD_INT 1
75615: ARRAY
75616: PPUSH
75617: LD_VAR 0 6
75621: PUSH
75622: LD_INT 1
75624: ARRAY
75625: PUSH
75626: LD_INT 2
75628: ARRAY
75629: PPUSH
75630: CALL_OW 116
75634: GO 75876
// if path > tag then
75636: LD_VAR 0 2
75640: PUSH
75641: LD_VAR 0 8
75645: GREATER
75646: IFFALSE 75824
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
75648: LD_ADDR_VAR 0 5
75652: PUSH
75653: LD_INT 81
75655: PUSH
75656: LD_VAR 0 7
75660: PUSH
75661: EMPTY
75662: LIST
75663: LIST
75664: PUSH
75665: LD_INT 91
75667: PUSH
75668: LD_VAR 0 4
75672: PUSH
75673: LD_INT 12
75675: PUSH
75676: EMPTY
75677: LIST
75678: LIST
75679: LIST
75680: PUSH
75681: EMPTY
75682: LIST
75683: LIST
75684: PPUSH
75685: CALL_OW 69
75689: ST_TO_ADDR
// if enemy then
75690: LD_VAR 0 5
75694: IFFALSE 75722
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
75696: LD_VAR 0 4
75700: PPUSH
75701: LD_VAR 0 5
75705: PPUSH
75706: LD_VAR 0 4
75710: PPUSH
75711: CALL_OW 74
75715: PPUSH
75716: CALL_OW 115
75720: GO 75822
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
75722: LD_VAR 0 4
75726: PPUSH
75727: LD_VAR 0 2
75731: PUSH
75732: LD_VAR 0 8
75736: ARRAY
75737: PUSH
75738: LD_INT 1
75740: ARRAY
75741: PPUSH
75742: LD_VAR 0 2
75746: PUSH
75747: LD_VAR 0 8
75751: ARRAY
75752: PUSH
75753: LD_INT 2
75755: ARRAY
75756: PPUSH
75757: CALL_OW 297
75761: PUSH
75762: LD_INT 6
75764: GREATER
75765: IFFALSE 75808
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
75767: LD_VAR 0 4
75771: PPUSH
75772: LD_VAR 0 2
75776: PUSH
75777: LD_VAR 0 8
75781: ARRAY
75782: PUSH
75783: LD_INT 1
75785: ARRAY
75786: PPUSH
75787: LD_VAR 0 2
75791: PUSH
75792: LD_VAR 0 8
75796: ARRAY
75797: PUSH
75798: LD_INT 2
75800: ARRAY
75801: PPUSH
75802: CALL_OW 114
75806: GO 75822
// SetTag ( i , tag ) ;
75808: LD_VAR 0 4
75812: PPUSH
75813: LD_VAR 0 8
75817: PPUSH
75818: CALL_OW 109
// end else
75822: GO 75876
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
75824: LD_ADDR_VAR 0 5
75828: PUSH
75829: LD_INT 81
75831: PUSH
75832: LD_VAR 0 7
75836: PUSH
75837: EMPTY
75838: LIST
75839: LIST
75840: PPUSH
75841: CALL_OW 69
75845: ST_TO_ADDR
// if enemy then
75846: LD_VAR 0 5
75850: IFFALSE 75876
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
75852: LD_VAR 0 4
75856: PPUSH
75857: LD_VAR 0 5
75861: PPUSH
75862: LD_VAR 0 4
75866: PPUSH
75867: CALL_OW 74
75871: PPUSH
75872: CALL_OW 115
// end ; end ;
75876: GO 75538
75878: POP
75879: POP
// end ; end_of_file
75880: LD_VAR 0 3
75884: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
75885: LD_VAR 0 1
75889: PUSH
75890: LD_INT 200
75892: DOUBLE
75893: GREATEREQUAL
75894: IFFALSE 75902
75896: LD_INT 299
75898: DOUBLE
75899: LESSEQUAL
75900: IFTRUE 75904
75902: GO 75936
75904: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
75905: LD_VAR 0 1
75909: PPUSH
75910: LD_VAR 0 2
75914: PPUSH
75915: LD_VAR 0 3
75919: PPUSH
75920: LD_VAR 0 4
75924: PPUSH
75925: LD_VAR 0 5
75929: PPUSH
75930: CALL 32447 0 5
75934: GO 76013
75936: LD_INT 300
75938: DOUBLE
75939: GREATEREQUAL
75940: IFFALSE 75948
75942: LD_INT 399
75944: DOUBLE
75945: LESSEQUAL
75946: IFTRUE 75950
75948: GO 76012
75950: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
75951: LD_VAR 0 1
75955: PPUSH
75956: LD_VAR 0 2
75960: PPUSH
75961: LD_VAR 0 3
75965: PPUSH
75966: LD_VAR 0 4
75970: PPUSH
75971: LD_VAR 0 5
75975: PPUSH
75976: LD_VAR 0 6
75980: PPUSH
75981: LD_VAR 0 7
75985: PPUSH
75986: LD_VAR 0 8
75990: PPUSH
75991: LD_VAR 0 9
75995: PPUSH
75996: LD_VAR 0 10
76000: PPUSH
76001: LD_VAR 0 11
76005: PPUSH
76006: CALL 30345 0 11
76010: GO 76013
76012: POP
// end ;
76013: PPOPN 11
76015: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
76016: LD_VAR 0 1
76020: PPUSH
76021: LD_VAR 0 2
76025: PPUSH
76026: LD_VAR 0 3
76030: PPUSH
76031: LD_VAR 0 4
76035: PPUSH
76036: LD_VAR 0 5
76040: PPUSH
76041: CALL 32439 0 5
// end ; end_of_file
76045: PPOPN 5
76047: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
76048: LD_VAR 0 1
76052: PPUSH
76053: LD_VAR 0 2
76057: PPUSH
76058: LD_VAR 0 3
76062: PPUSH
76063: LD_VAR 0 4
76067: PPUSH
76068: LD_VAR 0 5
76072: PPUSH
76073: LD_VAR 0 6
76077: PPUSH
76078: CALL 19153 0 6
// end ;
76082: PPOPN 6
76084: END
