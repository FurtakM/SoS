// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// PrepareTrigger ;
  15: CALL 40 0 0
// PrepareVulcanoBase ;
  19: CALL 880 0 0
// PrepareRussian ;
  23: CALL 3532 0 0
// PrepareLegion ;
  27: CALL 7063 0 0
// Action ;
  31: CALL 10742 0 0
// InitArt ;
  35: CALL 201 0 0
// end ;
  39: END
// export base_captured , russian_prepared , ru_can_attack , ru_sib_bomb , chance_to_bomb , player_res_art , player_artifact_ready , art_icon , time_res_art , player_commander , time_to_reuse , mine_vulc , medal_enabled , dead_counter , kill_counter , veh_counter , tech_counter , sib_contamin_counter ; function PrepareTrigger ; begin
  40: LD_INT 0
  42: PPUSH
// base_captured := false ;
  43: LD_ADDR_EXP 1
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// russian_prepared := false ;
  51: LD_ADDR_EXP 2
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// ru_can_attack := false ;
  59: LD_ADDR_EXP 3
  63: PUSH
  64: LD_INT 0
  66: ST_TO_ADDR
// ru_sib_bomb := false ;
  67: LD_ADDR_EXP 4
  71: PUSH
  72: LD_INT 0
  74: ST_TO_ADDR
// chance_to_bomb := [ 5 , 10 , 25 ] [ Difficulty ] ;
  75: LD_ADDR_EXP 5
  79: PUSH
  80: LD_INT 5
  82: PUSH
  83: LD_INT 10
  85: PUSH
  86: LD_INT 25
  88: PUSH
  89: EMPTY
  90: LIST
  91: LIST
  92: LIST
  93: PUSH
  94: LD_OWVAR 67
  98: ARRAY
  99: ST_TO_ADDR
// player_res_art := false ;
 100: LD_ADDR_EXP 6
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// player_artifact_ready := false ;
 108: LD_ADDR_EXP 7
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// art_icon := art_use_atom ;
 116: LD_ADDR_EXP 8
 120: PUSH
 121: LD_INT 7
 123: ST_TO_ADDR
// time_res_art := 600 ;
 124: LD_ADDR_EXP 9
 128: PUSH
 129: LD_INT 600
 131: ST_TO_ADDR
// time_to_reuse := 10 10$00 ;
 132: LD_ADDR_EXP 11
 136: PUSH
 137: LD_INT 21000
 139: ST_TO_ADDR
// mine_vulc := false ;
 140: LD_ADDR_EXP 12
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// medal_enabled := false ;
 148: LD_ADDR_EXP 13
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// dead_counter := 0 ;
 156: LD_ADDR_EXP 14
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// kill_counter := 0 ;
 164: LD_ADDR_EXP 15
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// veh_counter := 0 ;
 172: LD_ADDR_EXP 16
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// tech_counter := 0 ;
 180: LD_ADDR_EXP 17
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// sib_contamin_counter := 0 ;
 188: LD_ADDR_EXP 18
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// end ;
 196: LD_VAR 0 1
 200: RET
// function InitArt ; begin
 201: LD_INT 0
 203: PPUSH
// SetArtifactRes ( your_side , true ) ;
 204: LD_OWVAR 2
 208: PPUSH
 209: LD_INT 1
 211: PPUSH
 212: CALL_OW 467
// end ; end_of_file
 216: LD_VAR 0 1
 220: RET
// export us_commander , us_force , us_skill , us_guy ; export function PrepareAmerican ; var i , filter , un , team ; begin
 221: LD_INT 0
 223: PPUSH
 224: PPUSH
 225: PPUSH
 226: PPUSH
 227: PPUSH
// us_skill := [ 7 , 6 , 5 ] [ Difficulty ] ;
 228: LD_ADDR_EXP 21
 232: PUSH
 233: LD_INT 7
 235: PUSH
 236: LD_INT 6
 238: PUSH
 239: LD_INT 5
 241: PUSH
 242: EMPTY
 243: LIST
 244: LIST
 245: LIST
 246: PUSH
 247: LD_OWVAR 67
 251: ARRAY
 252: ST_TO_ADDR
// us_force := [ ] ;
 253: LD_ADDR_EXP 20
 257: PUSH
 258: EMPTY
 259: ST_TO_ADDR
// RemoveEnvironmentArea ( evn ) ;
 260: LD_INT 17
 262: PPUSH
 263: CALL_OW 355
// PrepareAllianceAI ( ) ;
 267: CALL 16079 0 0
// uc_side := 1 ;
 271: LD_ADDR_OWVAR 20
 275: PUSH
 276: LD_INT 1
 278: ST_TO_ADDR
// uc_nation := nation_american ;
 279: LD_ADDR_OWVAR 21
 283: PUSH
 284: LD_INT 1
 286: ST_TO_ADDR
// hc_gallery :=  ;
 287: LD_ADDR_OWVAR 33
 291: PUSH
 292: LD_STRING 
 294: ST_TO_ADDR
// hc_name :=  ;
 295: LD_ADDR_OWVAR 26
 299: PUSH
 300: LD_STRING 
 302: ST_TO_ADDR
// hc_importance := 0 ;
 303: LD_ADDR_OWVAR 32
 307: PUSH
 308: LD_INT 0
 310: ST_TO_ADDR
// for i = 1 to 11 do
 311: LD_ADDR_VAR 0 2
 315: PUSH
 316: DOUBLE
 317: LD_INT 1
 319: DEC
 320: ST_TO_ADDR
 321: LD_INT 11
 323: PUSH
 324: FOR_TO
 325: IFFALSE 378
// begin PrepareHuman ( false , Rand ( 1 , 4 ) , us_skill ) ;
 327: LD_INT 0
 329: PPUSH
 330: LD_INT 1
 332: PPUSH
 333: LD_INT 4
 335: PPUSH
 336: CALL_OW 12
 340: PPUSH
 341: LD_EXP 21
 345: PPUSH
 346: CALL_OW 380
// un := CreateHuman ;
 350: LD_ADDR_VAR 0 4
 354: PUSH
 355: CALL_OW 44
 359: ST_TO_ADDR
// us_force := us_force ^ un ;
 360: LD_ADDR_EXP 20
 364: PUSH
 365: LD_EXP 20
 369: PUSH
 370: LD_VAR 0 4
 374: ADD
 375: ST_TO_ADDR
// end ;
 376: GO 324
 378: POP
 379: POP
// hc_importance := 100 ;
 380: LD_ADDR_OWVAR 32
 384: PUSH
 385: LD_INT 100
 387: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , us_skill ) ;
 388: LD_INT 1
 390: PPUSH
 391: LD_INT 1
 393: PPUSH
 394: LD_EXP 21
 398: PPUSH
 399: CALL_OW 380
// us_commander := CreateHuman ;
 403: LD_ADDR_EXP 19
 407: PUSH
 408: CALL_OW 44
 412: ST_TO_ADDR
// player_commander := us_commander ;
 413: LD_ADDR_EXP 10
 417: PUSH
 418: LD_EXP 19
 422: ST_TO_ADDR
// team := CharacterSelection ( text , [ 6 , 5 , 4 ] [ Difficulty ] , [ 6 , 5 , 4 ] [ Difficulty ] , [ sel_change_class , us_commander , sel_changeable , sel_not_hired ] ^ us_force , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , [ 5 , 5 , - 1 ] [ Difficulty ] ] ) ;
 423: LD_ADDR_VAR 0 5
 427: PUSH
 428: LD_STRING text
 430: PPUSH
 431: LD_INT 6
 433: PUSH
 434: LD_INT 5
 436: PUSH
 437: LD_INT 4
 439: PUSH
 440: EMPTY
 441: LIST
 442: LIST
 443: LIST
 444: PUSH
 445: LD_OWVAR 67
 449: ARRAY
 450: PPUSH
 451: LD_INT 6
 453: PUSH
 454: LD_INT 5
 456: PUSH
 457: LD_INT 4
 459: PUSH
 460: EMPTY
 461: LIST
 462: LIST
 463: LIST
 464: PUSH
 465: LD_OWVAR 67
 469: ARRAY
 470: PPUSH
 471: LD_INT -5
 473: PUSH
 474: LD_EXP 19
 478: PUSH
 479: LD_INT -3
 481: PUSH
 482: LD_INT -2
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: LIST
 489: LIST
 490: PUSH
 491: LD_EXP 20
 495: ADD
 496: PPUSH
 497: LD_INT 1
 499: PUSH
 500: LD_INT 3
 502: PUSH
 503: LD_INT 2
 505: PUSH
 506: LD_INT 1
 508: PUSH
 509: EMPTY
 510: LIST
 511: LIST
 512: PUSH
 513: LD_INT 4
 515: PUSH
 516: LD_INT 1
 518: PUSH
 519: EMPTY
 520: LIST
 521: LIST
 522: PUSH
 523: LD_INT 5
 525: PUSH
 526: LD_INT 5
 528: PUSH
 529: LD_INT 1
 531: NEG
 532: PUSH
 533: EMPTY
 534: LIST
 535: LIST
 536: LIST
 537: PUSH
 538: LD_OWVAR 67
 542: ARRAY
 543: PUSH
 544: EMPTY
 545: LIST
 546: LIST
 547: LIST
 548: LIST
 549: LIST
 550: PPUSH
 551: CALL_OW 42
 555: ST_TO_ADDR
// team := team ^ us_commander ;
 556: LD_ADDR_VAR 0 5
 560: PUSH
 561: LD_VAR 0 5
 565: PUSH
 566: LD_EXP 19
 570: ADD
 571: ST_TO_ADDR
// for i = 1 to team do
 572: LD_ADDR_VAR 0 2
 576: PUSH
 577: DOUBLE
 578: LD_INT 1
 580: DEC
 581: ST_TO_ADDR
 582: LD_VAR 0 5
 586: PUSH
 587: FOR_TO
 588: IFFALSE 613
// PlaceUnitArea ( team [ i ] , start_north , false ) ;
 590: LD_VAR 0 5
 594: PUSH
 595: LD_VAR 0 2
 599: ARRAY
 600: PPUSH
 601: LD_INT 1
 603: PPUSH
 604: LD_INT 0
 606: PPUSH
 607: CALL_OW 49
 611: GO 587
 613: POP
 614: POP
// end ;
 615: LD_VAR 0 1
 619: RET
// every 0 0$38 + 2 2$00 trigger tick < 73500 do
 620: LD_OWVAR 1
 624: PUSH
 625: LD_INT 73500
 627: LESS
 628: IFFALSE 655
 630: GO 632
 632: DISABLE
// begin enable ;
 633: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , extra_crates , true ) ;
 634: LD_INT 1
 636: PPUSH
 637: LD_INT 5
 639: PPUSH
 640: CALL_OW 12
 644: PPUSH
 645: LD_INT 24
 647: PPUSH
 648: LD_INT 1
 650: PPUSH
 651: CALL_OW 55
// end ;
 655: END
// every 1 1$10 do var time , p , l ;
 656: GO 658
 658: DISABLE
 659: LD_INT 0
 661: PPUSH
 662: PPUSH
 663: PPUSH
// begin time := 0 0$44 ;
 664: LD_ADDR_VAR 0 1
 668: PUSH
 669: LD_INT 1540
 671: ST_TO_ADDR
// l := 0 ;
 672: LD_ADDR_VAR 0 3
 676: PUSH
 677: LD_INT 0
 679: ST_TO_ADDR
// repeat begin Wait ( time ) ;
 680: LD_VAR 0 1
 684: PPUSH
 685: CALL_OW 67
// l := l + 1 ;
 689: LD_ADDR_VAR 0 3
 693: PUSH
 694: LD_VAR 0 3
 698: PUSH
 699: LD_INT 1
 701: PLUS
 702: ST_TO_ADDR
// if GetListOfCratesInArea ( us_crates ) < 30 then
 703: LD_INT 12
 705: PPUSH
 706: CALL_OW 435
 710: PUSH
 711: LD_INT 30
 713: LESS
 714: IFFALSE 773
// begin CreateCratesArea ( Rand ( 1 , 5 ) , us_crates , true ) ;
 716: LD_INT 1
 718: PPUSH
 719: LD_INT 5
 721: PPUSH
 722: CALL_OW 12
 726: PPUSH
 727: LD_INT 12
 729: PPUSH
 730: LD_INT 1
 732: PPUSH
 733: CALL_OW 55
// Wait ( Rand ( 0 0$33 , 0 0$44 ) ) ;
 737: LD_INT 1155
 739: PPUSH
 740: LD_INT 1540
 742: PPUSH
 743: CALL_OW 12
 747: PPUSH
 748: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 5 ) , us_crates , true ) ;
 752: LD_INT 1
 754: PPUSH
 755: LD_INT 5
 757: PPUSH
 758: CALL_OW 12
 762: PPUSH
 763: LD_INT 12
 765: PPUSH
 766: LD_INT 1
 768: PPUSH
 769: CALL_OW 55
// end ; p := Rand ( 0 , 1 ) ;
 773: LD_ADDR_VAR 0 2
 777: PUSH
 778: LD_INT 0
 780: PPUSH
 781: LD_INT 1
 783: PPUSH
 784: CALL_OW 12
 788: ST_TO_ADDR
// if p then
 789: LD_VAR 0 2
 793: IFFALSE 828
// begin Wait ( Rand ( 0 0$03 , 0 0$10 ) ) ;
 795: LD_INT 105
 797: PPUSH
 798: LD_INT 350
 800: PPUSH
 801: CALL_OW 12
 805: PPUSH
 806: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 4 ) , true ) ;
 810: LD_INT 1
 812: PPUSH
 813: LD_INT 4
 815: PPUSH
 816: CALL_OW 12
 820: PPUSH
 821: LD_INT 1
 823: PPUSH
 824: CALL_OW 57
// end ; if l mod [ 15 , 13 , 11 ] [ Difficulty ] = 0 then
 828: LD_VAR 0 3
 832: PUSH
 833: LD_INT 15
 835: PUSH
 836: LD_INT 13
 838: PUSH
 839: LD_INT 11
 841: PUSH
 842: EMPTY
 843: LIST
 844: LIST
 845: LIST
 846: PUSH
 847: LD_OWVAR 67
 851: ARRAY
 852: MOD
 853: PUSH
 854: LD_INT 0
 856: EQUAL
 857: IFFALSE 873
// time := time + 2 2$00 ;
 859: LD_ADDR_VAR 0 1
 863: PUSH
 864: LD_VAR 0 1
 868: PUSH
 869: LD_INT 4200
 871: PLUS
 872: ST_TO_ADDR
// end until false ;
 873: LD_INT 0
 875: IFFALSE 680
// end ; end_of_file
 877: PPOPN 3
 879: END
// export function PrepareVulcanoBase ; var i , filter , hp , un , area , p , russian_in_base ; begin
 880: LD_INT 0
 882: PPUSH
 883: PPUSH
 884: PPUSH
 885: PPUSH
 886: PPUSH
 887: PPUSH
 888: PPUSH
 889: PPUSH
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) ;
 890: LD_ADDR_VAR 0 3
 894: PUSH
 895: LD_INT 22
 897: PUSH
 898: LD_INT 4
 900: PUSH
 901: EMPTY
 902: LIST
 903: LIST
 904: PUSH
 905: LD_INT 21
 907: PUSH
 908: LD_INT 3
 910: PUSH
 911: EMPTY
 912: LIST
 913: LIST
 914: PUSH
 915: EMPTY
 916: LIST
 917: LIST
 918: PPUSH
 919: CALL_OW 69
 923: ST_TO_ADDR
// hp := [ 470 , 370 , 290 ] [ Difficulty ] ;
 924: LD_ADDR_VAR 0 4
 928: PUSH
 929: LD_INT 470
 931: PUSH
 932: LD_INT 370
 934: PUSH
 935: LD_INT 290
 937: PUSH
 938: EMPTY
 939: LIST
 940: LIST
 941: LIST
 942: PUSH
 943: LD_OWVAR 67
 947: ARRAY
 948: ST_TO_ADDR
// case Difficulty of 2 :
 949: LD_OWVAR 67
 953: PUSH
 954: LD_INT 2
 956: DOUBLE
 957: EQUAL
 958: IFTRUE 962
 960: GO 993
 962: POP
// begin DestroyUnit ( UnitFilter ( filter , [ f_btype , b_bunker ] ) [ 1 ] ) ;
 963: LD_VAR 0 3
 967: PPUSH
 968: LD_INT 30
 970: PUSH
 971: LD_INT 32
 973: PUSH
 974: EMPTY
 975: LIST
 976: LIST
 977: PPUSH
 978: CALL_OW 72
 982: PUSH
 983: LD_INT 1
 985: ARRAY
 986: PPUSH
 987: CALL_OW 65
// end ; 3 :
 991: GO 1069
 993: LD_INT 3
 995: DOUBLE
 996: EQUAL
 997: IFTRUE 1001
 999: GO 1068
1001: POP
// begin DestroyUnit ( UnitFilter ( filter , [ f_btype , b_bunker ] ) [ 1 ] ) ;
1002: LD_VAR 0 3
1006: PPUSH
1007: LD_INT 30
1009: PUSH
1010: LD_INT 32
1012: PUSH
1013: EMPTY
1014: LIST
1015: LIST
1016: PPUSH
1017: CALL_OW 72
1021: PUSH
1022: LD_INT 1
1024: ARRAY
1025: PPUSH
1026: CALL_OW 65
// DestroyUnit ( UnitFilter ( filter , [ f_btype , b_solar_power ] ) [ Rand ( 1 , 3 ) ] ) ;
1030: LD_VAR 0 3
1034: PPUSH
1035: LD_INT 30
1037: PUSH
1038: LD_INT 27
1040: PUSH
1041: EMPTY
1042: LIST
1043: LIST
1044: PPUSH
1045: CALL_OW 72
1049: PUSH
1050: LD_INT 1
1052: PPUSH
1053: LD_INT 3
1055: PPUSH
1056: CALL_OW 12
1060: ARRAY
1061: PPUSH
1062: CALL_OW 65
// end ; end ;
1066: GO 1069
1068: POP
// for i = 1 to filter do
1069: LD_ADDR_VAR 0 2
1073: PUSH
1074: DOUBLE
1075: LD_INT 1
1077: DEC
1078: ST_TO_ADDR
1079: LD_VAR 0 3
1083: PUSH
1084: FOR_TO
1085: IFFALSE 1122
// SetLives ( filter [ i ] , hp + Rand ( - 29 , 29 ) ) ;
1087: LD_VAR 0 3
1091: PUSH
1092: LD_VAR 0 2
1096: ARRAY
1097: PPUSH
1098: LD_VAR 0 4
1102: PUSH
1103: LD_INT 29
1105: NEG
1106: PPUSH
1107: LD_INT 29
1109: PPUSH
1110: CALL_OW 12
1114: PLUS
1115: PPUSH
1116: CALL_OW 234
1120: GO 1084
1122: POP
1123: POP
// SetBName ( us_depot , Vulcano1 ) ;
1124: LD_INT 50
1126: PPUSH
1127: LD_STRING Vulcano1
1129: PPUSH
1130: CALL_OW 500
// hc_importance := 0 ;
1134: LD_ADDR_OWVAR 32
1138: PUSH
1139: LD_INT 0
1141: ST_TO_ADDR
// uc_side := 3 ;
1142: LD_ADDR_OWVAR 20
1146: PUSH
1147: LD_INT 3
1149: ST_TO_ADDR
// uc_nation := nation_russian ;
1150: LD_ADDR_OWVAR 21
1154: PUSH
1155: LD_INT 3
1157: ST_TO_ADDR
// russian_in_base := [ ] ;
1158: LD_ADDR_VAR 0 8
1162: PUSH
1163: EMPTY
1164: ST_TO_ADDR
// area := RandPointsFromArea ( 82 , 137 , 106 , 152 , 10 ) ;
1165: LD_ADDR_VAR 0 6
1169: PUSH
1170: LD_INT 82
1172: PPUSH
1173: LD_INT 137
1175: PPUSH
1176: LD_INT 106
1178: PPUSH
1179: LD_INT 152
1181: PPUSH
1182: LD_INT 10
1184: PPUSH
1185: CALL 1562 0 5
1189: ST_TO_ADDR
// p := 1 ;
1190: LD_ADDR_VAR 0 7
1194: PUSH
1195: LD_INT 1
1197: ST_TO_ADDR
// for i = 1 to [ 6 , 6 , 7 ] [ Difficulty ] do
1198: LD_ADDR_VAR 0 2
1202: PUSH
1203: DOUBLE
1204: LD_INT 1
1206: DEC
1207: ST_TO_ADDR
1208: LD_INT 6
1210: PUSH
1211: LD_INT 6
1213: PUSH
1214: LD_INT 7
1216: PUSH
1217: EMPTY
1218: LIST
1219: LIST
1220: LIST
1221: PUSH
1222: LD_OWVAR 67
1226: ARRAY
1227: PUSH
1228: FOR_TO
1229: IFFALSE 1341
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
1231: LD_INT 0
1233: PPUSH
1234: LD_INT 1
1236: PPUSH
1237: LD_INT 4
1239: PUSH
1240: LD_INT 5
1242: PUSH
1243: LD_INT 6
1245: PUSH
1246: EMPTY
1247: LIST
1248: LIST
1249: LIST
1250: PUSH
1251: LD_OWVAR 67
1255: ARRAY
1256: PPUSH
1257: CALL_OW 380
// un := CreateHuman ;
1261: LD_ADDR_VAR 0 5
1265: PUSH
1266: CALL_OW 44
1270: ST_TO_ADDR
// russian_in_base := russian_in_base ^ un ;
1271: LD_ADDR_VAR 0 8
1275: PUSH
1276: LD_VAR 0 8
1280: PUSH
1281: LD_VAR 0 5
1285: ADD
1286: ST_TO_ADDR
// PlaceUnitXY ( un , area [ p ] , area [ p + 1 ] , false ) ;
1287: LD_VAR 0 5
1291: PPUSH
1292: LD_VAR 0 6
1296: PUSH
1297: LD_VAR 0 7
1301: ARRAY
1302: PPUSH
1303: LD_VAR 0 6
1307: PUSH
1308: LD_VAR 0 7
1312: PUSH
1313: LD_INT 1
1315: PLUS
1316: ARRAY
1317: PPUSH
1318: LD_INT 0
1320: PPUSH
1321: CALL_OW 48
// p := p + 2 ;
1325: LD_ADDR_VAR 0 7
1329: PUSH
1330: LD_VAR 0 7
1334: PUSH
1335: LD_INT 2
1337: PLUS
1338: ST_TO_ADDR
// end ;
1339: GO 1228
1341: POP
1342: POP
// end ;
1343: LD_VAR 0 1
1347: RET
// every 0 0$01 trigger GetDistUnitToSide ( us_depot , 1 ) < 40 do var i , un ;
1348: LD_INT 50
1350: PPUSH
1351: LD_INT 1
1353: PPUSH
1354: CALL 2052 0 2
1358: PUSH
1359: LD_INT 40
1361: LESS
1362: IFFALSE 1559
1364: GO 1366
1366: DISABLE
1367: LD_INT 0
1369: PPUSH
1370: PPUSH
// begin uc_side := 4 ;
1371: LD_ADDR_OWVAR 20
1375: PUSH
1376: LD_INT 4
1378: ST_TO_ADDR
// uc_nation := nation_american ;
1379: LD_ADDR_OWVAR 21
1383: PUSH
1384: LD_INT 1
1386: ST_TO_ADDR
// hc_importance := 0 ;
1387: LD_ADDR_OWVAR 32
1391: PUSH
1392: LD_INT 0
1394: ST_TO_ADDR
// for i = 1 to 7 do
1395: LD_ADDR_VAR 0 1
1399: PUSH
1400: DOUBLE
1401: LD_INT 1
1403: DEC
1404: ST_TO_ADDR
1405: LD_INT 7
1407: PUSH
1408: FOR_TO
1409: IFFALSE 1473
// begin PrepareHuman ( false , Rand ( 1 , 3 ) , us_skill ) ;
1411: LD_INT 0
1413: PPUSH
1414: LD_INT 1
1416: PPUSH
1417: LD_INT 3
1419: PPUSH
1420: CALL_OW 12
1424: PPUSH
1425: LD_EXP 21
1429: PPUSH
1430: CALL_OW 380
// un := CreateHuman ;
1434: LD_ADDR_VAR 0 2
1438: PUSH
1439: CALL_OW 44
1443: ST_TO_ADDR
// PlaceUnitArea ( un , base_resp , false ) ;
1444: LD_VAR 0 2
1448: PPUSH
1449: LD_INT 7
1451: PPUSH
1452: LD_INT 0
1454: PPUSH
1455: CALL_OW 49
// SetLives ( un , 10 ) ;
1459: LD_VAR 0 2
1463: PPUSH
1464: LD_INT 10
1466: PPUSH
1467: CALL_OW 234
// end ;
1471: GO 1408
1473: POP
1474: POP
// for i = 1 to 5 do
1475: LD_ADDR_VAR 0 1
1479: PUSH
1480: DOUBLE
1481: LD_INT 1
1483: DEC
1484: ST_TO_ADDR
1485: LD_INT 5
1487: PUSH
1488: FOR_TO
1489: IFFALSE 1557
// begin PrepareHuman ( false , 4 , us_skill ) ;
1491: LD_INT 0
1493: PPUSH
1494: LD_INT 4
1496: PPUSH
1497: LD_EXP 21
1501: PPUSH
1502: CALL_OW 380
// SetDir ( un , 1 ) ;
1506: LD_VAR 0 2
1510: PPUSH
1511: LD_INT 1
1513: PPUSH
1514: CALL_OW 233
// un := CreateHuman ;
1518: LD_ADDR_VAR 0 2
1522: PUSH
1523: CALL_OW 44
1527: ST_TO_ADDR
// PlaceUnitArea ( un , rekt , false ) ;
1528: LD_VAR 0 2
1532: PPUSH
1533: LD_INT 23
1535: PPUSH
1536: LD_INT 0
1538: PPUSH
1539: CALL_OW 49
// SetLives ( un , 10 ) ;
1543: LD_VAR 0 2
1547: PPUSH
1548: LD_INT 10
1550: PPUSH
1551: CALL_OW 234
// end ;
1555: GO 1488
1557: POP
1558: POP
// end ; end_of_file
1559: PPOPN 2
1561: END
// export function RandPointsFromArea ( x1 , y1 , x2 , y2 , num ) ; var list , i ; begin
1562: LD_INT 0
1564: PPUSH
1565: PPUSH
1566: PPUSH
// list := [ ] ;
1567: LD_ADDR_VAR 0 7
1571: PUSH
1572: EMPTY
1573: ST_TO_ADDR
// for i = 1 to num do
1574: LD_ADDR_VAR 0 8
1578: PUSH
1579: DOUBLE
1580: LD_INT 1
1582: DEC
1583: ST_TO_ADDR
1584: LD_VAR 0 5
1588: PUSH
1589: FOR_TO
1590: IFFALSE 1646
// begin list := list ^ Rand ( x1 , x2 ) ;
1592: LD_ADDR_VAR 0 7
1596: PUSH
1597: LD_VAR 0 7
1601: PUSH
1602: LD_VAR 0 1
1606: PPUSH
1607: LD_VAR 0 3
1611: PPUSH
1612: CALL_OW 12
1616: ADD
1617: ST_TO_ADDR
// list := list ^ Rand ( y1 , y2 ) ;
1618: LD_ADDR_VAR 0 7
1622: PUSH
1623: LD_VAR 0 7
1627: PUSH
1628: LD_VAR 0 2
1632: PPUSH
1633: LD_VAR 0 4
1637: PPUSH
1638: CALL_OW 12
1642: ADD
1643: ST_TO_ADDR
// end ;
1644: GO 1589
1646: POP
1647: POP
// result := list ;
1648: LD_ADDR_VAR 0 6
1652: PUSH
1653: LD_VAR 0 7
1657: ST_TO_ADDR
// end ;
1658: LD_VAR 0 6
1662: RET
// export function IntBazooka ( list , filter ) ; var ta , c , i ; begin
1663: LD_INT 0
1665: PPUSH
1666: PPUSH
1667: PPUSH
1668: PPUSH
// c := Rand ( 1 , 3 ) ;
1669: LD_ADDR_VAR 0 5
1673: PUSH
1674: LD_INT 1
1676: PPUSH
1677: LD_INT 3
1679: PPUSH
1680: CALL_OW 12
1684: ST_TO_ADDR
// for i = 1 to list do
1685: LD_ADDR_VAR 0 6
1689: PUSH
1690: DOUBLE
1691: LD_INT 1
1693: DEC
1694: ST_TO_ADDR
1695: LD_VAR 0 1
1699: PUSH
1700: FOR_TO
1701: IFFALSE 1883
// for ta in filter do
1703: LD_ADDR_VAR 0 4
1707: PUSH
1708: LD_VAR 0 2
1712: PUSH
1713: FOR_IN
1714: IFFALSE 1879
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
1716: LD_VAR 0 1
1720: PUSH
1721: LD_VAR 0 6
1725: ARRAY
1726: PPUSH
1727: LD_VAR 0 4
1731: PPUSH
1732: CALL_OW 296
1736: PUSH
1737: LD_INT 15
1739: LESSEQUAL
1740: IFFALSE 1877
// begin case c of 1 :
1742: LD_VAR 0 5
1746: PUSH
1747: LD_INT 1
1749: DOUBLE
1750: EQUAL
1751: IFTRUE 1755
1753: GO 1793
1755: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
1756: LD_VAR 0 1
1760: PUSH
1761: LD_VAR 0 6
1765: ARRAY
1766: PPUSH
1767: LD_VAR 0 4
1771: PPUSH
1772: CALL_OW 250
1776: PPUSH
1777: LD_VAR 0 4
1781: PPUSH
1782: CALL_OW 251
1786: PPUSH
1787: CALL_OW 154
1791: GO 1877
1793: LD_INT 2
1795: DOUBLE
1796: EQUAL
1797: IFTRUE 1801
1799: GO 1865
1801: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
1802: LD_VAR 0 1
1806: PUSH
1807: LD_VAR 0 6
1811: ARRAY
1812: PPUSH
1813: LD_VAR 0 4
1817: PPUSH
1818: CALL_OW 250
1822: PUSH
1823: LD_INT 1
1825: NEG
1826: PPUSH
1827: LD_INT 1
1829: PPUSH
1830: CALL_OW 12
1834: PLUS
1835: PPUSH
1836: LD_VAR 0 4
1840: PPUSH
1841: CALL_OW 251
1845: PUSH
1846: LD_INT 1
1848: NEG
1849: PPUSH
1850: LD_INT 1
1852: PPUSH
1853: CALL_OW 12
1857: PLUS
1858: PPUSH
1859: CALL_OW 153
1863: GO 1877
1865: LD_INT 3
1867: DOUBLE
1868: EQUAL
1869: IFTRUE 1873
1871: GO 1876
1873: POP
// ; end ;
1874: GO 1877
1876: POP
// end ; end ;
1877: GO 1713
1879: POP
1880: POP
1881: GO 1700
1883: POP
1884: POP
// end ;
1885: LD_VAR 0 3
1889: RET
// export function PrepareApeman ( n ) ; var un , i ; begin
1890: LD_INT 0
1892: PPUSH
1893: PPUSH
1894: PPUSH
// for i = 1 to n do
1895: LD_ADDR_VAR 0 4
1899: PUSH
1900: DOUBLE
1901: LD_INT 1
1903: DEC
1904: ST_TO_ADDR
1905: LD_VAR 0 1
1909: PUSH
1910: FOR_TO
1911: IFFALSE 2045
// begin uc_side := 0 ;
1913: LD_ADDR_OWVAR 20
1917: PUSH
1918: LD_INT 0
1920: ST_TO_ADDR
// uc_nation := 0 ;
1921: LD_ADDR_OWVAR 21
1925: PUSH
1926: LD_INT 0
1928: ST_TO_ADDR
// hc_class := class_apeman ;
1929: LD_ADDR_OWVAR 28
1933: PUSH
1934: LD_INT 12
1936: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
1937: LD_ADDR_OWVAR 31
1941: PUSH
1942: LD_INT 0
1944: PUSH
1945: LD_INT 0
1947: PUSH
1948: LD_INT 0
1950: PUSH
1951: LD_INT 0
1953: PUSH
1954: EMPTY
1955: LIST
1956: LIST
1957: LIST
1958: LIST
1959: ST_TO_ADDR
// hc_name :=  ;
1960: LD_ADDR_OWVAR 26
1964: PUSH
1965: LD_STRING 
1967: ST_TO_ADDR
// hc_gallery :=  ;
1968: LD_ADDR_OWVAR 33
1972: PUSH
1973: LD_STRING 
1975: ST_TO_ADDR
// hc_importance := 0 ;
1976: LD_ADDR_OWVAR 32
1980: PUSH
1981: LD_INT 0
1983: ST_TO_ADDR
// un := CreateHuman ;
1984: LD_ADDR_VAR 0 3
1988: PUSH
1989: CALL_OW 44
1993: ST_TO_ADDR
// PlaceUnitArea ( un , [ ape1 , ape2 ] [ Rand ( 1 , 2 ) ] , false ) ;
1994: LD_VAR 0 3
1998: PPUSH
1999: LD_INT 19
2001: PUSH
2002: LD_INT 20
2004: PUSH
2005: EMPTY
2006: LIST
2007: LIST
2008: PUSH
2009: LD_INT 1
2011: PPUSH
2012: LD_INT 2
2014: PPUSH
2015: CALL_OW 12
2019: ARRAY
2020: PPUSH
2021: LD_INT 0
2023: PPUSH
2024: CALL_OW 49
// Wait ( Rand ( 0 0$33 , 2 2$33 ) ) ;
2028: LD_INT 1155
2030: PPUSH
2031: LD_INT 5355
2033: PPUSH
2034: CALL_OW 12
2038: PPUSH
2039: CALL_OW 67
// end ;
2043: GO 1910
2045: POP
2046: POP
// end ;
2047: LD_VAR 0 2
2051: RET
// export function GetDistUnitToSide ( unit , side ) ; var tmp , dist ; begin
2052: LD_INT 0
2054: PPUSH
2055: PPUSH
2056: PPUSH
// tmp := NearestUnitToUnit ( FilterAllUnits ( [ f_side , side ] ) , unit ) ;
2057: LD_ADDR_VAR 0 4
2061: PUSH
2062: LD_INT 22
2064: PUSH
2065: LD_VAR 0 2
2069: PUSH
2070: EMPTY
2071: LIST
2072: LIST
2073: PPUSH
2074: CALL_OW 69
2078: PPUSH
2079: LD_VAR 0 1
2083: PPUSH
2084: CALL_OW 74
2088: ST_TO_ADDR
// dist := GetDistUnits ( unit , tmp ) ;
2089: LD_ADDR_VAR 0 5
2093: PUSH
2094: LD_VAR 0 1
2098: PPUSH
2099: LD_VAR 0 4
2103: PPUSH
2104: CALL_OW 296
2108: ST_TO_ADDR
// if dist >= 9999 then
2109: LD_VAR 0 5
2113: PUSH
2114: LD_INT 9999
2116: GREATEREQUAL
2117: IFFALSE 2130
// result := - 1 else
2119: LD_ADDR_VAR 0 3
2123: PUSH
2124: LD_INT 1
2126: NEG
2127: ST_TO_ADDR
2128: GO 2140
// result := dist ;
2130: LD_ADDR_VAR 0 3
2134: PUSH
2135: LD_VAR 0 5
2139: ST_TO_ADDR
// end ;
2140: LD_VAR 0 3
2144: RET
// export function NearestUnitToSide ( plist , side ) ; var i , tmp , unit ; begin
2145: LD_INT 0
2147: PPUSH
2148: PPUSH
2149: PPUSH
2150: PPUSH
// tmp := 9999 ;
2151: LD_ADDR_VAR 0 5
2155: PUSH
2156: LD_INT 9999
2158: ST_TO_ADDR
// for i = 1 to plist do
2159: LD_ADDR_VAR 0 4
2163: PUSH
2164: DOUBLE
2165: LD_INT 1
2167: DEC
2168: ST_TO_ADDR
2169: LD_VAR 0 1
2173: PUSH
2174: FOR_TO
2175: IFFALSE 2249
// if GetDistUnitToSide ( plist [ i ] , side ) < tmp then
2177: LD_VAR 0 1
2181: PUSH
2182: LD_VAR 0 4
2186: ARRAY
2187: PPUSH
2188: LD_VAR 0 2
2192: PPUSH
2193: CALL 2052 0 2
2197: PUSH
2198: LD_VAR 0 5
2202: LESS
2203: IFFALSE 2247
// begin tmp := GetDistUnitToSide ( plist [ i ] , side ) ;
2205: LD_ADDR_VAR 0 5
2209: PUSH
2210: LD_VAR 0 1
2214: PUSH
2215: LD_VAR 0 4
2219: ARRAY
2220: PPUSH
2221: LD_VAR 0 2
2225: PPUSH
2226: CALL 2052 0 2
2230: ST_TO_ADDR
// unit := plist [ i ] ;
2231: LD_ADDR_VAR 0 6
2235: PUSH
2236: LD_VAR 0 1
2240: PUSH
2241: LD_VAR 0 4
2245: ARRAY
2246: ST_TO_ADDR
// end ;
2247: GO 2174
2249: POP
2250: POP
// result := unit ;
2251: LD_ADDR_VAR 0 3
2255: PUSH
2256: LD_VAR 0 6
2260: ST_TO_ADDR
// end ;
2261: LD_VAR 0 3
2265: RET
// export function CalculateCommanderPoints ; var points , crates_collected , sib_collected , i ; begin
2266: LD_INT 0
2268: PPUSH
2269: PPUSH
2270: PPUSH
2271: PPUSH
2272: PPUSH
// points := [ 1000 , 2500 , 5000 ] [ Difficulty ] ;
2273: LD_ADDR_VAR 0 2
2277: PUSH
2278: LD_INT 1000
2280: PUSH
2281: LD_INT 2500
2283: PUSH
2284: LD_INT 5000
2286: PUSH
2287: EMPTY
2288: LIST
2289: LIST
2290: LIST
2291: PUSH
2292: LD_OWVAR 67
2296: ARRAY
2297: ST_TO_ADDR
// points := points + ( - 1 * FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) * 30 ) ;
2298: LD_ADDR_VAR 0 2
2302: PUSH
2303: LD_VAR 0 2
2307: PUSH
2308: LD_INT 1
2310: NEG
2311: PUSH
2312: LD_INT 22
2314: PUSH
2315: LD_OWVAR 2
2319: PUSH
2320: EMPTY
2321: LIST
2322: LIST
2323: PUSH
2324: LD_INT 21
2326: PUSH
2327: LD_INT 3
2329: PUSH
2330: EMPTY
2331: LIST
2332: LIST
2333: PUSH
2334: EMPTY
2335: LIST
2336: LIST
2337: PPUSH
2338: CALL_OW 69
2342: MUL
2343: PUSH
2344: LD_INT 30
2346: MUL
2347: PLUS
2348: ST_TO_ADDR
// points := points + ( kill_counter * 10 ) ;
2349: LD_ADDR_VAR 0 2
2353: PUSH
2354: LD_VAR 0 2
2358: PUSH
2359: LD_EXP 15
2363: PUSH
2364: LD_INT 10
2366: MUL
2367: PLUS
2368: ST_TO_ADDR
// points := points + ( - 1 * kill_counter * 20 ) ;
2369: LD_ADDR_VAR 0 2
2373: PUSH
2374: LD_VAR 0 2
2378: PUSH
2379: LD_INT 1
2381: NEG
2382: PUSH
2383: LD_EXP 15
2387: MUL
2388: PUSH
2389: LD_INT 20
2391: MUL
2392: PLUS
2393: ST_TO_ADDR
// points := points + ( - 1 * ( ( tick / 35 ) / 60 ) * 25 ) ;
2394: LD_ADDR_VAR 0 2
2398: PUSH
2399: LD_VAR 0 2
2403: PUSH
2404: LD_INT 1
2406: NEG
2407: PUSH
2408: LD_OWVAR 1
2412: PUSH
2413: LD_INT 35
2415: DIVREAL
2416: PUSH
2417: LD_INT 60
2419: DIVREAL
2420: MUL
2421: PUSH
2422: LD_INT 25
2424: MUL
2425: PLUS
2426: ST_TO_ADDR
// points := points + ( tech_counter * 15 ) ;
2427: LD_ADDR_VAR 0 2
2431: PUSH
2432: LD_VAR 0 2
2436: PUSH
2437: LD_EXP 17
2441: PUSH
2442: LD_INT 15
2444: MUL
2445: PLUS
2446: ST_TO_ADDR
// points := points + ( - 1 * sib_contamin_counter ) * 1000 ;
2447: LD_ADDR_VAR 0 2
2451: PUSH
2452: LD_VAR 0 2
2456: PUSH
2457: LD_INT 1
2459: NEG
2460: PUSH
2461: LD_EXP 18
2465: MUL
2466: PUSH
2467: LD_INT 1000
2469: MUL
2470: PLUS
2471: ST_TO_ADDR
// points := points + ( veh_counter * 5 ) ;
2472: LD_ADDR_VAR 0 2
2476: PUSH
2477: LD_VAR 0 2
2481: PUSH
2482: LD_EXP 16
2486: PUSH
2487: LD_INT 5
2489: MUL
2490: PLUS
2491: ST_TO_ADDR
// result := points ;
2492: LD_ADDR_VAR 0 1
2496: PUSH
2497: LD_VAR 0 2
2501: ST_TO_ADDR
// end ; end_of_file
2502: LD_VAR 0 1
2506: RET
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2507: LD_VAR 0 1
2511: PPUSH
2512: CALL 29811 0 1
// if GetSide ( un ) = your_side then
2516: LD_VAR 0 1
2520: PPUSH
2521: CALL_OW 255
2525: PUSH
2526: LD_OWVAR 2
2530: EQUAL
2531: IFFALSE 2547
// dead_counter := dead_counter + 1 ;
2533: LD_ADDR_EXP 14
2537: PUSH
2538: LD_EXP 14
2542: PUSH
2543: LD_INT 1
2545: PLUS
2546: ST_TO_ADDR
// if GetSide ( un ) in FilterAllUnits ( [ f_enemy , your_side ] ) then
2547: LD_VAR 0 1
2551: PPUSH
2552: CALL_OW 255
2556: PUSH
2557: LD_INT 81
2559: PUSH
2560: LD_OWVAR 2
2564: PUSH
2565: EMPTY
2566: LIST
2567: LIST
2568: PPUSH
2569: CALL_OW 69
2573: IN
2574: IFFALSE 2590
// kill_counter := kill_counter + 1 ;
2576: LD_ADDR_EXP 15
2580: PUSH
2581: LD_EXP 15
2585: PUSH
2586: LD_INT 1
2588: PLUS
2589: ST_TO_ADDR
// if un = player_commander then
2590: LD_VAR 0 1
2594: PUSH
2595: LD_EXP 10
2599: EQUAL
2600: IFFALSE 2609
// YouLost ( vulcano-lost ) ;
2602: LD_STRING vulcano-lost
2604: PPUSH
2605: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) then
2609: LD_VAR 0 1
2613: PUSH
2614: LD_INT 22
2616: PUSH
2617: LD_INT 3
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: PUSH
2624: LD_INT 21
2626: PUSH
2627: LD_INT 3
2629: PUSH
2630: EMPTY
2631: LIST
2632: LIST
2633: PUSH
2634: EMPTY
2635: LIST
2636: LIST
2637: PPUSH
2638: CALL_OW 69
2642: IN
2643: IFFALSE 2759
// begin if GetBType ( un ) = b_turret or GetBType ( un ) = b_siberite_power then
2645: LD_VAR 0 1
2649: PPUSH
2650: CALL_OW 266
2654: PUSH
2655: LD_INT 33
2657: EQUAL
2658: PUSH
2659: LD_VAR 0 1
2663: PPUSH
2664: CALL_OW 266
2668: PUSH
2669: LD_INT 28
2671: EQUAL
2672: OR
2673: IFFALSE 2759
// begin ru_blist := ru_blist ^ GetBType ( un ) ;
2675: LD_ADDR_EXP 26
2679: PUSH
2680: LD_EXP 26
2684: PUSH
2685: LD_VAR 0 1
2689: PPUSH
2690: CALL_OW 266
2694: ADD
2695: ST_TO_ADDR
// ru_blist := ru_blist ^ GetX ( un ) ;
2696: LD_ADDR_EXP 26
2700: PUSH
2701: LD_EXP 26
2705: PUSH
2706: LD_VAR 0 1
2710: PPUSH
2711: CALL_OW 250
2715: ADD
2716: ST_TO_ADDR
// ru_blist := ru_blist ^ GetY ( un ) ;
2717: LD_ADDR_EXP 26
2721: PUSH
2722: LD_EXP 26
2726: PUSH
2727: LD_VAR 0 1
2731: PPUSH
2732: CALL_OW 251
2736: ADD
2737: ST_TO_ADDR
// ru_blist := ru_blist ^ GetDir ( un ) ;
2738: LD_ADDR_EXP 26
2742: PUSH
2743: LD_EXP 26
2747: PUSH
2748: LD_VAR 0 1
2752: PPUSH
2753: CALL_OW 254
2757: ADD
2758: ST_TO_ADDR
// end ; end ; if un in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) then
2759: LD_VAR 0 1
2763: PUSH
2764: LD_INT 22
2766: PUSH
2767: LD_INT 8
2769: PUSH
2770: EMPTY
2771: LIST
2772: LIST
2773: PUSH
2774: LD_INT 21
2776: PUSH
2777: LD_INT 3
2779: PUSH
2780: EMPTY
2781: LIST
2782: LIST
2783: PUSH
2784: EMPTY
2785: LIST
2786: LIST
2787: PPUSH
2788: CALL_OW 69
2792: IN
2793: IFFALSE 2937
// begin if GetBType ( un ) = b_barracks then
2795: LD_VAR 0 1
2799: PPUSH
2800: CALL_OW 266
2804: PUSH
2805: LD_INT 5
2807: EQUAL
2808: IFFALSE 2826
// legion_blist := legion_blist ^ b_armoury else
2810: LD_ADDR_EXP 34
2814: PUSH
2815: LD_EXP 34
2819: PUSH
2820: LD_INT 4
2822: ADD
2823: ST_TO_ADDR
2824: GO 2874
// if not GetBType ( un ) in [ b_warehouse , b_lab , b_lab_full ] then
2826: LD_VAR 0 1
2830: PPUSH
2831: CALL_OW 266
2835: PUSH
2836: LD_INT 1
2838: PUSH
2839: LD_INT 6
2841: PUSH
2842: LD_INT 8
2844: PUSH
2845: EMPTY
2846: LIST
2847: LIST
2848: LIST
2849: IN
2850: NOT
2851: IFFALSE 2874
// legion_blist := legion_blist ^ GetBType ( un ) ;
2853: LD_ADDR_EXP 34
2857: PUSH
2858: LD_EXP 34
2862: PUSH
2863: LD_VAR 0 1
2867: PPUSH
2868: CALL_OW 266
2872: ADD
2873: ST_TO_ADDR
// legion_blist := legion_blist ^ GetX ( un ) ;
2874: LD_ADDR_EXP 34
2878: PUSH
2879: LD_EXP 34
2883: PUSH
2884: LD_VAR 0 1
2888: PPUSH
2889: CALL_OW 250
2893: ADD
2894: ST_TO_ADDR
// legion_blist := legion_blist ^ GetY ( un ) ;
2895: LD_ADDR_EXP 34
2899: PUSH
2900: LD_EXP 34
2904: PUSH
2905: LD_VAR 0 1
2909: PPUSH
2910: CALL_OW 251
2914: ADD
2915: ST_TO_ADDR
// legion_blist := legion_blist ^ GetDir ( un ) ;
2916: LD_ADDR_EXP 34
2920: PUSH
2921: LD_EXP 34
2925: PUSH
2926: LD_VAR 0 1
2930: PPUSH
2931: CALL_OW 254
2935: ADD
2936: ST_TO_ADDR
// end ; if un in legion_force then
2937: LD_VAR 0 1
2941: PUSH
2942: LD_EXP 31
2946: IN
2947: IFFALSE 2965
// legion_force := legion_force diff un ;
2949: LD_ADDR_EXP 31
2953: PUSH
2954: LD_EXP 31
2958: PUSH
2959: LD_VAR 0 1
2963: DIFF
2964: ST_TO_ADDR
// if un in ru_force then
2965: LD_VAR 0 1
2969: PUSH
2970: LD_EXP 23
2974: IN
2975: IFFALSE 2993
// ru_force := ru_force diff un ;
2977: LD_ADDR_EXP 23
2981: PUSH
2982: LD_EXP 23
2986: PUSH
2987: LD_VAR 0 1
2991: DIFF
2992: ST_TO_ADDR
// if un in al_force then
2993: LD_VAR 0 1
2997: PUSH
2998: LD_EXP 38
3002: IN
3003: IFFALSE 3021
// al_force := al_force diff un ;
3005: LD_ADDR_EXP 38
3009: PUSH
3010: LD_EXP 38
3014: PUSH
3015: LD_VAR 0 1
3019: DIFF
3020: ST_TO_ADDR
// end ;
3021: PPOPN 1
3023: END
// on BuildingComplete ( b ) do var i ;
3024: LD_INT 0
3026: PPUSH
// begin if GetSide ( b ) = 8 then
3027: LD_VAR 0 1
3031: PPUSH
3032: CALL_OW 255
3036: PUSH
3037: LD_INT 8
3039: EQUAL
3040: IFFALSE 3080
// for i = 1 to 4 do
3042: LD_ADDR_VAR 0 2
3046: PUSH
3047: DOUBLE
3048: LD_INT 1
3050: DEC
3051: ST_TO_ADDR
3052: LD_INT 4
3054: PUSH
3055: FOR_TO
3056: IFFALSE 3078
// legion_blist := Delete ( legion_blist , 1 ) ;
3058: LD_ADDR_EXP 34
3062: PUSH
3063: LD_EXP 34
3067: PPUSH
3068: LD_INT 1
3070: PPUSH
3071: CALL_OW 3
3075: ST_TO_ADDR
3076: GO 3055
3078: POP
3079: POP
// if GetSide ( b ) = 3 then
3080: LD_VAR 0 1
3084: PPUSH
3085: CALL_OW 255
3089: PUSH
3090: LD_INT 3
3092: EQUAL
3093: IFFALSE 3133
// for i = 1 to 4 do
3095: LD_ADDR_VAR 0 2
3099: PUSH
3100: DOUBLE
3101: LD_INT 1
3103: DEC
3104: ST_TO_ADDR
3105: LD_INT 4
3107: PUSH
3108: FOR_TO
3109: IFFALSE 3131
// ru_blist := Delete ( ru_blist , 1 ) ;
3111: LD_ADDR_EXP 26
3115: PUSH
3116: LD_EXP 26
3120: PPUSH
3121: LD_INT 1
3123: PPUSH
3124: CALL_OW 3
3128: ST_TO_ADDR
3129: GO 3108
3131: POP
3132: POP
// end ;
3133: PPOPN 2
3135: END
// on VehicleConstructed ( veh , fac ) do begin if not GetWeapon ( veh ) in [ ru_cargo_bay , ru_siberium_rocket ] then
3136: LD_VAR 0 1
3140: PPUSH
3141: CALL_OW 264
3145: PUSH
3146: LD_INT 51
3148: PUSH
3149: LD_INT 48
3151: PUSH
3152: EMPTY
3153: LIST
3154: LIST
3155: IN
3156: NOT
3157: IFFALSE 3205
// begin if GetSide ( veh ) = 3 then
3159: LD_VAR 0 1
3163: PPUSH
3164: CALL_OW 255
3168: PUSH
3169: LD_INT 3
3171: EQUAL
3172: IFFALSE 3205
// begin ComMoveXY ( veh , 149 , 8 ) ;
3174: LD_VAR 0 1
3178: PPUSH
3179: LD_INT 149
3181: PPUSH
3182: LD_INT 8
3184: PPUSH
3185: CALL_OW 111
// ru_force := ru_force ^ veh ;
3189: LD_ADDR_EXP 23
3193: PUSH
3194: LD_EXP 23
3198: PUSH
3199: LD_VAR 0 1
3203: ADD
3204: ST_TO_ADDR
// end ; end ; if not GetWeapon ( veh ) in [ ar_cargo_bay , ar_control_tower ] then
3205: LD_VAR 0 1
3209: PPUSH
3210: CALL_OW 264
3214: PUSH
3215: LD_INT 32
3217: PUSH
3218: LD_INT 31
3220: PUSH
3221: EMPTY
3222: LIST
3223: LIST
3224: IN
3225: NOT
3226: IFFALSE 3259
// begin if GetSide ( veh ) = 8 then
3228: LD_VAR 0 1
3232: PPUSH
3233: CALL_OW 255
3237: PUSH
3238: LD_INT 8
3240: EQUAL
3241: IFFALSE 3259
// legion_force := legion_force ^ veh ;
3243: LD_ADDR_EXP 31
3247: PUSH
3248: LD_EXP 31
3252: PUSH
3253: LD_VAR 0 1
3257: ADD
3258: ST_TO_ADDR
// end ; if GetSide ( veh ) = 7 and your_side <> 7 then
3259: LD_VAR 0 1
3263: PPUSH
3264: CALL_OW 255
3268: PUSH
3269: LD_INT 7
3271: EQUAL
3272: PUSH
3273: LD_OWVAR 2
3277: PUSH
3278: LD_INT 7
3280: NONEQUAL
3281: AND
3282: IFFALSE 3300
// al_force := al_force ^ veh ;
3284: LD_ADDR_EXP 38
3288: PUSH
3289: LD_EXP 38
3293: PUSH
3294: LD_VAR 0 1
3298: ADD
3299: ST_TO_ADDR
// if GetSide ( veh ) = your_side then
3300: LD_VAR 0 1
3304: PPUSH
3305: CALL_OW 255
3309: PUSH
3310: LD_OWVAR 2
3314: EQUAL
3315: IFFALSE 3331
// veh_counter := veh_counter + 1 ;
3317: LD_ADDR_EXP 16
3321: PUSH
3322: LD_EXP 16
3326: PUSH
3327: LD_INT 1
3329: PLUS
3330: ST_TO_ADDR
// end ;
3331: PPOPN 2
3333: END
// on SibDepositContaminated ( contaminating_scientist , x_of_deposit , y_of_deposit ) do begin if GetSide ( contaminating_scientist ) <> your_side then
3334: LD_VAR 0 1
3338: PPUSH
3339: CALL_OW 255
3343: PUSH
3344: LD_OWVAR 2
3348: NONEQUAL
3349: IFFALSE 3365
// sib_contamin_counter := sib_contamin_counter + 1 ;
3351: LD_ADDR_EXP 18
3355: PUSH
3356: LD_EXP 18
3360: PUSH
3361: LD_INT 1
3363: PLUS
3364: ST_TO_ADDR
// end ;
3365: PPOPN 3
3367: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = your_side then
3368: LD_VAR 0 2
3372: PPUSH
3373: CALL_OW 255
3377: PUSH
3378: LD_OWVAR 2
3382: EQUAL
3383: IFFALSE 3399
// tech_counter := tech_counter + 1 ;
3385: LD_ADDR_EXP 17
3389: PUSH
3390: LD_EXP 17
3394: PUSH
3395: LD_INT 1
3397: PLUS
3398: ST_TO_ADDR
// if tech = 53 and your_side = 1 then
3399: LD_VAR 0 1
3403: PUSH
3404: LD_INT 53
3406: EQUAL
3407: PUSH
3408: LD_OWVAR 2
3412: PUSH
3413: LD_INT 1
3415: EQUAL
3416: AND
3417: IFFALSE 3432
// SetTech ( 80 , 1 , state_researched ) ;
3419: LD_INT 80
3421: PPUSH
3422: LD_INT 1
3424: PPUSH
3425: LD_INT 2
3427: PPUSH
3428: CALL_OW 322
// end ;
3432: PPOPN 2
3434: END
// every 9 9$30 trigger FilterAllUnits ( [ f_class , class_apeman ] ) < 9 do var i ;
3435: LD_INT 25
3437: PUSH
3438: LD_INT 12
3440: PUSH
3441: EMPTY
3442: LIST
3443: LIST
3444: PPUSH
3445: CALL_OW 69
3449: PUSH
3450: LD_INT 9
3452: LESS
3453: IFFALSE 3495
3455: GO 3457
3457: DISABLE
3458: LD_INT 0
3460: PPUSH
// begin enable ;
3461: ENABLE
// i := FilterAllUnits ( [ f_class , class_apeman ] ) ;
3462: LD_ADDR_VAR 0 1
3466: PUSH
3467: LD_INT 25
3469: PUSH
3470: LD_INT 12
3472: PUSH
3473: EMPTY
3474: LIST
3475: LIST
3476: PPUSH
3477: CALL_OW 69
3481: ST_TO_ADDR
// PrepareApeman ( 8 - i ) ;
3482: LD_INT 8
3484: PUSH
3485: LD_VAR 0 1
3489: MINUS
3490: PPUSH
3491: CALL 1890 0 1
// end ;
3495: PPOPN 1
3497: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
3498: LD_VAR 0 1
3502: PPUSH
3503: LD_VAR 0 2
3507: PPUSH
3508: LD_VAR 0 3
3512: PPUSH
3513: CALL 29909 0 3
// end ;
3517: PPOPN 3
3519: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
3520: LD_VAR 0 1
3524: PPUSH
3525: CALL 29917 0 1
// end ; end_of_file
3529: PPOPN 1
3531: END
// export ru_force , ru_skill , ru_cargo , ru_blist , ru_vlist , ru_amount , ru_time , ru_teleport_exit ; export function PrepareRussian ; var i , un , ru_depot , ru_factory , ru_teleport , ru_barracks , ru_bunkers , ru_buildings , ru_vehicles , ru_humans ; begin
3532: LD_INT 0
3534: PPUSH
3535: PPUSH
3536: PPUSH
3537: PPUSH
3538: PPUSH
3539: PPUSH
3540: PPUSH
3541: PPUSH
3542: PPUSH
3543: PPUSH
3544: PPUSH
// uc_side := 3 ;
3545: LD_ADDR_OWVAR 20
3549: PUSH
3550: LD_INT 3
3552: ST_TO_ADDR
// uc_nation := nation_russian ;
3553: LD_ADDR_OWVAR 21
3557: PUSH
3558: LD_INT 3
3560: ST_TO_ADDR
// ru_depot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
3561: LD_ADDR_VAR 0 4
3565: PUSH
3566: LD_INT 22
3568: PUSH
3569: LD_INT 3
3571: PUSH
3572: EMPTY
3573: LIST
3574: LIST
3575: PUSH
3576: LD_INT 30
3578: PUSH
3579: LD_INT 1
3581: PUSH
3582: EMPTY
3583: LIST
3584: LIST
3585: PUSH
3586: EMPTY
3587: LIST
3588: LIST
3589: PPUSH
3590: CALL_OW 69
3594: PUSH
3595: LD_INT 1
3597: ARRAY
3598: ST_TO_ADDR
// ru_factory := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3599: LD_ADDR_VAR 0 5
3603: PUSH
3604: LD_INT 22
3606: PUSH
3607: LD_INT 3
3609: PUSH
3610: EMPTY
3611: LIST
3612: LIST
3613: PUSH
3614: LD_INT 30
3616: PUSH
3617: LD_INT 3
3619: PUSH
3620: EMPTY
3621: LIST
3622: LIST
3623: PUSH
3624: EMPTY
3625: LIST
3626: LIST
3627: PPUSH
3628: CALL_OW 69
3632: PUSH
3633: LD_INT 1
3635: ARRAY
3636: ST_TO_ADDR
// ru_teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] ;
3637: LD_ADDR_VAR 0 6
3641: PUSH
3642: LD_INT 22
3644: PUSH
3645: LD_INT 3
3647: PUSH
3648: EMPTY
3649: LIST
3650: LIST
3651: PUSH
3652: LD_INT 30
3654: PUSH
3655: LD_INT 34
3657: PUSH
3658: EMPTY
3659: LIST
3660: LIST
3661: PUSH
3662: EMPTY
3663: LIST
3664: LIST
3665: PPUSH
3666: CALL_OW 69
3670: PUSH
3671: LD_INT 1
3673: ARRAY
3674: ST_TO_ADDR
// ru_bunkers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
3675: LD_ADDR_VAR 0 8
3679: PUSH
3680: LD_INT 22
3682: PUSH
3683: LD_INT 3
3685: PUSH
3686: EMPTY
3687: LIST
3688: LIST
3689: PUSH
3690: LD_INT 30
3692: PUSH
3693: LD_INT 33
3695: PUSH
3696: EMPTY
3697: LIST
3698: LIST
3699: PUSH
3700: EMPTY
3701: LIST
3702: LIST
3703: PPUSH
3704: CALL_OW 69
3708: ST_TO_ADDR
// ru_barracks := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
3709: LD_ADDR_VAR 0 7
3713: PUSH
3714: LD_INT 22
3716: PUSH
3717: LD_INT 3
3719: PUSH
3720: EMPTY
3721: LIST
3722: LIST
3723: PUSH
3724: LD_INT 30
3726: PUSH
3727: LD_INT 5
3729: PUSH
3730: EMPTY
3731: LIST
3732: LIST
3733: PUSH
3734: EMPTY
3735: LIST
3736: LIST
3737: PPUSH
3738: CALL_OW 69
3742: PUSH
3743: LD_INT 1
3745: ARRAY
3746: ST_TO_ADDR
// ru_blist := [ ] ;
3747: LD_ADDR_EXP 26
3751: PUSH
3752: EMPTY
3753: ST_TO_ADDR
// ru_vlist := [ ] ;
3754: LD_ADDR_EXP 27
3758: PUSH
3759: EMPTY
3760: ST_TO_ADDR
// ru_teleport_exit := [ 183 , 62 , 147 , 44 ] ;
3761: LD_ADDR_EXP 30
3765: PUSH
3766: LD_INT 183
3768: PUSH
3769: LD_INT 62
3771: PUSH
3772: LD_INT 147
3774: PUSH
3775: LD_INT 44
3777: PUSH
3778: EMPTY
3779: LIST
3780: LIST
3781: LIST
3782: LIST
3783: ST_TO_ADDR
// TeleportExit ( FilterAllUnits ( [ f_btype , b_teleport ] ) [ 1 ] , ru_teleport_exit [ 1 ] , ru_teleport_exit [ 2 ] ) ;
3784: LD_INT 30
3786: PUSH
3787: LD_INT 34
3789: PUSH
3790: EMPTY
3791: LIST
3792: LIST
3793: PPUSH
3794: CALL_OW 69
3798: PUSH
3799: LD_INT 1
3801: ARRAY
3802: PPUSH
3803: LD_EXP 30
3807: PUSH
3808: LD_INT 1
3810: ARRAY
3811: PPUSH
3812: LD_EXP 30
3816: PUSH
3817: LD_INT 2
3819: ARRAY
3820: PPUSH
3821: CALL_OW 243
// ru_amount := [ 4 , 5 , 6 ] [ Difficulty ] ;
3825: LD_ADDR_EXP 28
3829: PUSH
3830: LD_INT 4
3832: PUSH
3833: LD_INT 5
3835: PUSH
3836: LD_INT 6
3838: PUSH
3839: EMPTY
3840: LIST
3841: LIST
3842: LIST
3843: PUSH
3844: LD_OWVAR 67
3848: ARRAY
3849: ST_TO_ADDR
// SetResourceType ( GetBase ( ru_depot ) , mat_cans , 3000 ) ;
3850: LD_VAR 0 4
3854: PPUSH
3855: CALL_OW 274
3859: PPUSH
3860: LD_INT 1
3862: PPUSH
3863: LD_INT 3000
3865: PPUSH
3866: CALL_OW 277
// SetResourceType ( GetBase ( ru_depot ) , mat_oil , 300 ) ;
3870: LD_VAR 0 4
3874: PPUSH
3875: CALL_OW 274
3879: PPUSH
3880: LD_INT 2
3882: PPUSH
3883: LD_INT 300
3885: PPUSH
3886: CALL_OW 277
// hc_gallery :=  ;
3890: LD_ADDR_OWVAR 33
3894: PUSH
3895: LD_STRING 
3897: ST_TO_ADDR
// hc_name :=  ;
3898: LD_ADDR_OWVAR 26
3902: PUSH
3903: LD_STRING 
3905: ST_TO_ADDR
// hc_importance := 0 ;
3906: LD_ADDR_OWVAR 32
3910: PUSH
3911: LD_INT 0
3913: ST_TO_ADDR
// ru_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
3914: LD_ADDR_EXP 24
3918: PUSH
3919: LD_INT 5
3921: PUSH
3922: LD_INT 6
3924: PUSH
3925: LD_INT 7
3927: PUSH
3928: EMPTY
3929: LIST
3930: LIST
3931: LIST
3932: PUSH
3933: LD_OWVAR 67
3937: ARRAY
3938: ST_TO_ADDR
// for i = 1 to 6 do
3939: LD_ADDR_VAR 0 2
3943: PUSH
3944: DOUBLE
3945: LD_INT 1
3947: DEC
3948: ST_TO_ADDR
3949: LD_INT 6
3951: PUSH
3952: FOR_TO
3953: IFFALSE 4111
// begin PrepareHuman ( false , class_bazooker , ru_skill ) ;
3955: LD_INT 0
3957: PPUSH
3958: LD_INT 9
3960: PPUSH
3961: LD_EXP 24
3965: PPUSH
3966: CALL_OW 380
// un := CreateHuman ;
3970: LD_ADDR_VAR 0 3
3974: PUSH
3975: CALL_OW 44
3979: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_barracks ) ;
3980: LD_VAR 0 3
3984: PPUSH
3985: LD_VAR 0 7
3989: PPUSH
3990: CALL_OW 52
// PrepareHuman ( false , 4 , ru_skill ) ;
3994: LD_INT 0
3996: PPUSH
3997: LD_INT 4
3999: PPUSH
4000: LD_EXP 24
4004: PPUSH
4005: CALL_OW 380
// un := CreateHuman ;
4009: LD_ADDR_VAR 0 3
4013: PUSH
4014: CALL_OW 44
4018: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
4019: LD_VAR 0 3
4023: PPUSH
4024: LD_INT 24
4026: PPUSH
4027: CALL_OW 52
// PrepareHuman ( false , 3 , ru_skill ) ;
4031: LD_INT 0
4033: PPUSH
4034: LD_INT 3
4036: PPUSH
4037: LD_EXP 24
4041: PPUSH
4042: CALL_OW 380
// un := CreateHuman ;
4046: LD_ADDR_VAR 0 3
4050: PUSH
4051: CALL_OW 44
4055: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_factory ) ;
4056: LD_VAR 0 3
4060: PPUSH
4061: LD_VAR 0 5
4065: PPUSH
4066: CALL_OW 52
// PrepareHuman ( false , 2 , ru_skill ) ;
4070: LD_INT 0
4072: PPUSH
4073: LD_INT 2
4075: PPUSH
4076: LD_EXP 24
4080: PPUSH
4081: CALL_OW 380
// un := CreateHuman ;
4085: LD_ADDR_VAR 0 3
4089: PUSH
4090: CALL_OW 44
4094: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_depot ) ;
4095: LD_VAR 0 3
4099: PPUSH
4100: LD_VAR 0 4
4104: PPUSH
4105: CALL_OW 52
// end ;
4109: GO 3952
4111: POP
4112: POP
// russian_prepared := true ;
4113: LD_ADDR_EXP 2
4117: PUSH
4118: LD_INT 1
4120: ST_TO_ADDR
// ComConstruct ( ru_factory , ru_medium_wheeled , 3 , control_computer , ru_cargo_bay ) ;
4121: LD_VAR 0 5
4125: PPUSH
4126: LD_INT 21
4128: PPUSH
4129: LD_INT 3
4131: PPUSH
4132: LD_INT 3
4134: PPUSH
4135: LD_INT 51
4137: PPUSH
4138: CALL_OW 125
// end ;
4142: LD_VAR 0 1
4146: RET
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 3 ] ) > 0 and russian_prepared do var ru_depot , ru_factory , ru_teleport , ru_bunkers , ru_buildings , ru_vehicles , ru_humans , ru_barracks , ru_engs , ru_mech , ru_sci , i , tmp , filter , p , cr , sib_bomb ;
4147: LD_INT 22
4149: PUSH
4150: LD_INT 3
4152: PUSH
4153: EMPTY
4154: LIST
4155: LIST
4156: PPUSH
4157: CALL_OW 69
4161: PUSH
4162: LD_INT 0
4164: GREATER
4165: PUSH
4166: LD_EXP 2
4170: AND
4171: IFFALSE 6634
4173: GO 4175
4175: DISABLE
4176: LD_INT 0
4178: PPUSH
4179: PPUSH
4180: PPUSH
4181: PPUSH
4182: PPUSH
4183: PPUSH
4184: PPUSH
4185: PPUSH
4186: PPUSH
4187: PPUSH
4188: PPUSH
4189: PPUSH
4190: PPUSH
4191: PPUSH
4192: PPUSH
4193: PPUSH
4194: PPUSH
// begin enable ;
4195: ENABLE
// ru_depot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
4196: LD_ADDR_VAR 0 1
4200: PUSH
4201: LD_INT 22
4203: PUSH
4204: LD_INT 3
4206: PUSH
4207: EMPTY
4208: LIST
4209: LIST
4210: PUSH
4211: LD_INT 30
4213: PUSH
4214: LD_INT 1
4216: PUSH
4217: EMPTY
4218: LIST
4219: LIST
4220: PUSH
4221: EMPTY
4222: LIST
4223: LIST
4224: PPUSH
4225: CALL_OW 69
4229: PUSH
4230: LD_INT 1
4232: ARRAY
4233: ST_TO_ADDR
// ru_factory := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
4234: LD_ADDR_VAR 0 2
4238: PUSH
4239: LD_INT 22
4241: PUSH
4242: LD_INT 3
4244: PUSH
4245: EMPTY
4246: LIST
4247: LIST
4248: PUSH
4249: LD_INT 30
4251: PUSH
4252: LD_INT 3
4254: PUSH
4255: EMPTY
4256: LIST
4257: LIST
4258: PUSH
4259: EMPTY
4260: LIST
4261: LIST
4262: PPUSH
4263: CALL_OW 69
4267: PUSH
4268: LD_INT 1
4270: ARRAY
4271: ST_TO_ADDR
// ru_teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] ;
4272: LD_ADDR_VAR 0 3
4276: PUSH
4277: LD_INT 22
4279: PUSH
4280: LD_INT 3
4282: PUSH
4283: EMPTY
4284: LIST
4285: LIST
4286: PUSH
4287: LD_INT 30
4289: PUSH
4290: LD_INT 34
4292: PUSH
4293: EMPTY
4294: LIST
4295: LIST
4296: PUSH
4297: EMPTY
4298: LIST
4299: LIST
4300: PPUSH
4301: CALL_OW 69
4305: PUSH
4306: LD_INT 1
4308: ARRAY
4309: ST_TO_ADDR
// ru_bunkers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
4310: LD_ADDR_VAR 0 4
4314: PUSH
4315: LD_INT 22
4317: PUSH
4318: LD_INT 3
4320: PUSH
4321: EMPTY
4322: LIST
4323: LIST
4324: PUSH
4325: LD_INT 30
4327: PUSH
4328: LD_INT 33
4330: PUSH
4331: EMPTY
4332: LIST
4333: LIST
4334: PUSH
4335: EMPTY
4336: LIST
4337: LIST
4338: PPUSH
4339: CALL_OW 69
4343: ST_TO_ADDR
// ru_barracks := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
4344: LD_ADDR_VAR 0 8
4348: PUSH
4349: LD_INT 22
4351: PUSH
4352: LD_INT 3
4354: PUSH
4355: EMPTY
4356: LIST
4357: LIST
4358: PUSH
4359: LD_INT 30
4361: PUSH
4362: LD_INT 5
4364: PUSH
4365: EMPTY
4366: LIST
4367: LIST
4368: PUSH
4369: EMPTY
4370: LIST
4371: LIST
4372: PPUSH
4373: CALL_OW 69
4377: PUSH
4378: LD_INT 1
4380: ARRAY
4381: ST_TO_ADDR
// ru_buildings := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
4382: LD_ADDR_VAR 0 5
4386: PUSH
4387: LD_INT 22
4389: PUSH
4390: LD_INT 3
4392: PUSH
4393: EMPTY
4394: LIST
4395: LIST
4396: PUSH
4397: LD_INT 21
4399: PUSH
4400: LD_INT 3
4402: PUSH
4403: EMPTY
4404: LIST
4405: LIST
4406: PUSH
4407: EMPTY
4408: LIST
4409: LIST
4410: PPUSH
4411: CALL_OW 69
4415: ST_TO_ADDR
// ru_vehicles := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
4416: LD_ADDR_VAR 0 6
4420: PUSH
4421: LD_INT 22
4423: PUSH
4424: LD_INT 3
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: PUSH
4431: LD_INT 21
4433: PUSH
4434: LD_INT 2
4436: PUSH
4437: EMPTY
4438: LIST
4439: LIST
4440: PUSH
4441: EMPTY
4442: LIST
4443: LIST
4444: PPUSH
4445: CALL_OW 69
4449: ST_TO_ADDR
// ru_humans := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
4450: LD_ADDR_VAR 0 7
4454: PUSH
4455: LD_INT 22
4457: PUSH
4458: LD_INT 3
4460: PUSH
4461: EMPTY
4462: LIST
4463: LIST
4464: PUSH
4465: LD_INT 21
4467: PUSH
4468: LD_INT 1
4470: PUSH
4471: EMPTY
4472: LIST
4473: LIST
4474: PUSH
4475: EMPTY
4476: LIST
4477: LIST
4478: PPUSH
4479: CALL_OW 69
4483: ST_TO_ADDR
// ru_engs := UnitFilter ( ru_humans , [ f_class , 2 ] ) ;
4484: LD_ADDR_VAR 0 9
4488: PUSH
4489: LD_VAR 0 7
4493: PPUSH
4494: LD_INT 25
4496: PUSH
4497: LD_INT 2
4499: PUSH
4500: EMPTY
4501: LIST
4502: LIST
4503: PPUSH
4504: CALL_OW 72
4508: ST_TO_ADDR
// ru_mech := UnitFilter ( ru_humans , [ f_class , 3 ] ) ;
4509: LD_ADDR_VAR 0 10
4513: PUSH
4514: LD_VAR 0 7
4518: PPUSH
4519: LD_INT 25
4521: PUSH
4522: LD_INT 3
4524: PUSH
4525: EMPTY
4526: LIST
4527: LIST
4528: PPUSH
4529: CALL_OW 72
4533: ST_TO_ADDR
// ru_sci := UnitFilter ( ru_humans , [ f_class , 4 ] ) ;
4534: LD_ADDR_VAR 0 11
4538: PUSH
4539: LD_VAR 0 7
4543: PPUSH
4544: LD_INT 25
4546: PUSH
4547: LD_INT 4
4549: PUSH
4550: EMPTY
4551: LIST
4552: LIST
4553: PPUSH
4554: CALL_OW 72
4558: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) > 0 and ru_cargo = false then
4559: LD_INT 22
4561: PUSH
4562: LD_INT 3
4564: PUSH
4565: EMPTY
4566: LIST
4567: LIST
4568: PUSH
4569: LD_INT 34
4571: PUSH
4572: LD_INT 51
4574: PUSH
4575: EMPTY
4576: LIST
4577: LIST
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: PPUSH
4583: CALL_OW 69
4587: PUSH
4588: LD_INT 0
4590: GREATER
4591: PUSH
4592: LD_EXP 25
4596: PUSH
4597: LD_INT 0
4599: EQUAL
4600: AND
4601: IFFALSE 4641
// ru_cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
4603: LD_ADDR_EXP 25
4607: PUSH
4608: LD_INT 22
4610: PUSH
4611: LD_INT 3
4613: PUSH
4614: EMPTY
4615: LIST
4616: LIST
4617: PUSH
4618: LD_INT 34
4620: PUSH
4621: LD_INT 51
4623: PUSH
4624: EMPTY
4625: LIST
4626: LIST
4627: PUSH
4628: EMPTY
4629: LIST
4630: LIST
4631: PPUSH
4632: CALL_OW 69
4636: PUSH
4637: LD_INT 1
4639: ARRAY
4640: ST_TO_ADDR
// if ru_cargo then
4641: LD_EXP 25
4645: IFFALSE 4943
// begin if IsInArea ( ru_cargo , ru_base ) then
4647: LD_EXP 25
4651: PPUSH
4652: LD_INT 9
4654: PPUSH
4655: CALL_OW 308
4659: IFFALSE 4738
// begin if GetCargo ( ru_cargo , mat_cans ) = 0 then
4661: LD_EXP 25
4665: PPUSH
4666: LD_INT 1
4668: PPUSH
4669: CALL_OW 289
4673: PUSH
4674: LD_INT 0
4676: EQUAL
4677: IFFALSE 4695
// ComEnterUnit ( ru_cargo , ru_teleport ) else
4679: LD_EXP 25
4683: PPUSH
4684: LD_VAR 0 3
4688: PPUSH
4689: CALL_OW 120
4693: GO 4736
// if not HasTask ( ru_cargo ) then
4695: LD_EXP 25
4699: PPUSH
4700: CALL_OW 314
4704: NOT
4705: IFFALSE 4736
// ComMoveXY ( ru_cargo , GetX ( ru_depot ) , GetY ( ru_depot ) ) ;
4707: LD_EXP 25
4711: PPUSH
4712: LD_VAR 0 1
4716: PPUSH
4717: CALL_OW 250
4721: PPUSH
4722: LD_VAR 0 1
4726: PPUSH
4727: CALL_OW 251
4731: PPUSH
4732: CALL_OW 111
// end else
4736: GO 4943
// begin if not HasTask ( ru_cargo ) and GetCargo ( ru_cargo , mat_cans ) < 100 then
4738: LD_EXP 25
4742: PPUSH
4743: CALL_OW 314
4747: NOT
4748: PUSH
4749: LD_EXP 25
4753: PPUSH
4754: LD_INT 1
4756: PPUSH
4757: CALL_OW 289
4761: PUSH
4762: LD_INT 100
4764: LESS
4765: AND
4766: IFFALSE 4832
// begin cr := GetListOfCratesInArea ( ru_crates ) ;
4768: LD_ADDR_VAR 0 16
4772: PUSH
4773: LD_INT 11
4775: PPUSH
4776: CALL_OW 435
4780: ST_TO_ADDR
// if cr > 0 then
4781: LD_VAR 0 16
4785: PUSH
4786: LD_INT 0
4788: GREATER
4789: IFFALSE 4820
// ComCollect ( ru_cargo , cr [ 1 ] , cr [ 2 ] ) else
4791: LD_EXP 25
4795: PPUSH
4796: LD_VAR 0 16
4800: PUSH
4801: LD_INT 1
4803: ARRAY
4804: PPUSH
4805: LD_VAR 0 16
4809: PUSH
4810: LD_INT 2
4812: ARRAY
4813: PPUSH
4814: CALL_OW 117
4818: GO 4832
// ComMoveToArea ( ru_cargo , ru_crates ) ;
4820: LD_EXP 25
4824: PPUSH
4825: LD_INT 11
4827: PPUSH
4828: CALL_OW 113
// end ; if not HasTask ( ru_cargo ) and not IsInArea ( ru_cargo , cargoa ) and GetCargo ( ru_cargo , mat_cans ) = 100 then
4832: LD_EXP 25
4836: PPUSH
4837: CALL_OW 314
4841: NOT
4842: PUSH
4843: LD_EXP 25
4847: PPUSH
4848: LD_INT 10
4850: PPUSH
4851: CALL_OW 308
4855: NOT
4856: AND
4857: PUSH
4858: LD_EXP 25
4862: PPUSH
4863: LD_INT 1
4865: PPUSH
4866: CALL_OW 289
4870: PUSH
4871: LD_INT 100
4873: EQUAL
4874: AND
4875: IFFALSE 4889
// ComMoveToArea ( ru_cargo , cargoa ) ;
4877: LD_EXP 25
4881: PPUSH
4882: LD_INT 10
4884: PPUSH
4885: CALL_OW 113
// if IsInArea ( ru_cargo , cargoa ) and ru_barracks then
4889: LD_EXP 25
4893: PPUSH
4894: LD_INT 10
4896: PPUSH
4897: CALL_OW 308
4901: PUSH
4902: LD_VAR 0 8
4906: AND
4907: IFFALSE 4943
// ComSpaceShift ( UnitFilter ( ru_humans , [ f_class , class_bazooker ] ) [ 1 ] , 139 , 24 ) ;
4909: LD_VAR 0 7
4913: PPUSH
4914: LD_INT 25
4916: PUSH
4917: LD_INT 9
4919: PUSH
4920: EMPTY
4921: LIST
4922: LIST
4923: PPUSH
4924: CALL_OW 72
4928: PUSH
4929: LD_INT 1
4931: ARRAY
4932: PPUSH
4933: LD_INT 139
4935: PPUSH
4936: LD_INT 24
4938: PPUSH
4939: CALL_OW 153
// end ; end ; if ru_cargo = 0 and ru_factory and BuildingStatus ( ru_factory ) = bs_idle then
4943: LD_EXP 25
4947: PUSH
4948: LD_INT 0
4950: EQUAL
4951: PUSH
4952: LD_VAR 0 2
4956: AND
4957: PUSH
4958: LD_VAR 0 2
4962: PPUSH
4963: CALL_OW 461
4967: PUSH
4968: LD_INT 2
4970: EQUAL
4971: AND
4972: IFFALSE 4995
// ComConstruct ( ru_factory , ru_medium_wheeled , 3 , control_computer , ru_cargo_bay ) ;
4974: LD_VAR 0 2
4978: PPUSH
4979: LD_INT 21
4981: PPUSH
4982: LD_INT 3
4984: PPUSH
4985: LD_INT 3
4987: PPUSH
4988: LD_INT 51
4990: PPUSH
4991: CALL_OW 125
// if UnitFilter ( ru_humans , [ f_class , class_bazooker ] ) then
4995: LD_VAR 0 7
4999: PPUSH
5000: LD_INT 25
5002: PUSH
5003: LD_INT 9
5005: PUSH
5006: EMPTY
5007: LIST
5008: LIST
5009: PPUSH
5010: CALL_OW 72
5014: IFFALSE 5078
// IntBazooka ( UnitFilter ( ru_humans , [ f_class , class_bazooker ] ) , FilterAllUnits ( [ [ f_side , Your_Side ] , [ f_not , [ f_type , unit_building ] ] ] ) ) ;
5016: LD_VAR 0 7
5020: PPUSH
5021: LD_INT 25
5023: PUSH
5024: LD_INT 9
5026: PUSH
5027: EMPTY
5028: LIST
5029: LIST
5030: PPUSH
5031: CALL_OW 72
5035: PPUSH
5036: LD_INT 22
5038: PUSH
5039: LD_OWVAR 2
5043: PUSH
5044: EMPTY
5045: LIST
5046: LIST
5047: PUSH
5048: LD_INT 3
5050: PUSH
5051: LD_INT 21
5053: PUSH
5054: LD_INT 3
5056: PUSH
5057: EMPTY
5058: LIST
5059: LIST
5060: PUSH
5061: EMPTY
5062: LIST
5063: LIST
5064: PUSH
5065: EMPTY
5066: LIST
5067: LIST
5068: PPUSH
5069: CALL_OW 69
5073: PPUSH
5074: CALL 1663 0 2
// if ru_factory and ru_vlist > 0 then
5078: LD_VAR 0 2
5082: PUSH
5083: LD_EXP 27
5087: PUSH
5088: LD_INT 0
5090: GREATER
5091: AND
5092: IFFALSE 5192
// begin if BuildingStatus ( ru_factory ) = bs_idle then
5094: LD_VAR 0 2
5098: PPUSH
5099: CALL_OW 461
5103: PUSH
5104: LD_INT 2
5106: EQUAL
5107: IFFALSE 5192
// begin ComConstruct ( ru_factory , ru_vlist [ 1 ] , ru_vlist [ 2 ] , ru_vlist [ 3 ] , ru_vlist [ 4 ] ) ;
5109: LD_VAR 0 2
5113: PPUSH
5114: LD_EXP 27
5118: PUSH
5119: LD_INT 1
5121: ARRAY
5122: PPUSH
5123: LD_EXP 27
5127: PUSH
5128: LD_INT 2
5130: ARRAY
5131: PPUSH
5132: LD_EXP 27
5136: PUSH
5137: LD_INT 3
5139: ARRAY
5140: PPUSH
5141: LD_EXP 27
5145: PUSH
5146: LD_INT 4
5148: ARRAY
5149: PPUSH
5150: CALL_OW 125
// for i = 1 to 4 do
5154: LD_ADDR_VAR 0 12
5158: PUSH
5159: DOUBLE
5160: LD_INT 1
5162: DEC
5163: ST_TO_ADDR
5164: LD_INT 4
5166: PUSH
5167: FOR_TO
5168: IFFALSE 5190
// ru_vlist := Delete ( ru_vlist , 1 ) ;
5170: LD_ADDR_EXP 27
5174: PUSH
5175: LD_EXP 27
5179: PPUSH
5180: LD_INT 1
5182: PPUSH
5183: CALL_OW 3
5187: ST_TO_ADDR
5188: GO 5167
5190: POP
5191: POP
// end ; end ; if BuildingStatus ( ru_lab ) = bs_idle and ru_sib_bomb then
5192: LD_INT 24
5194: PPUSH
5195: CALL_OW 461
5199: PUSH
5200: LD_INT 2
5202: EQUAL
5203: PUSH
5204: LD_EXP 4
5208: AND
5209: IFFALSE 5237
// if GetTech ( tech_sibfiss , 3 ) = state_enabled then
5211: LD_INT 25
5213: PPUSH
5214: LD_INT 3
5216: PPUSH
5217: CALL_OW 321
5221: PUSH
5222: LD_INT 1
5224: EQUAL
5225: IFFALSE 5237
// ComResearch ( ru_lab , tech_sibfiss ) ;
5227: LD_INT 24
5229: PPUSH
5230: LD_INT 25
5232: PPUSH
5233: CALL_OW 124
// if GetTech ( tech_sibfiss , 3 ) = state_researched and tick mod 5 5$00 = 0 then
5237: LD_INT 25
5239: PPUSH
5240: LD_INT 3
5242: PPUSH
5243: CALL_OW 321
5247: PUSH
5248: LD_INT 2
5250: EQUAL
5251: PUSH
5252: LD_OWVAR 1
5256: PUSH
5257: LD_INT 10500
5259: MOD
5260: PUSH
5261: LD_INT 0
5263: EQUAL
5264: AND
5265: IFFALSE 5303
// if BuildingStatus ( ru_factory ) = bs_idle then
5267: LD_VAR 0 2
5271: PPUSH
5272: CALL_OW 461
5276: PUSH
5277: LD_INT 2
5279: EQUAL
5280: IFFALSE 5303
// ComConstruct ( ru_factory , ru_heavy_wheeled , 3 , control_computer , ru_siberium_rocket ) ;
5282: LD_VAR 0 2
5286: PPUSH
5287: LD_INT 23
5289: PPUSH
5290: LD_INT 3
5292: PPUSH
5293: LD_INT 3
5295: PPUSH
5296: LD_INT 48
5298: PPUSH
5299: CALL_OW 125
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) > 0 then
5303: LD_INT 22
5305: PUSH
5306: LD_INT 3
5308: PUSH
5309: EMPTY
5310: LIST
5311: LIST
5312: PUSH
5313: LD_INT 34
5315: PUSH
5316: LD_INT 48
5318: PUSH
5319: EMPTY
5320: LIST
5321: LIST
5322: PUSH
5323: EMPTY
5324: LIST
5325: LIST
5326: PPUSH
5327: CALL_OW 69
5331: PUSH
5332: LD_INT 0
5334: GREATER
5335: IFFALSE 5709
// begin sib_bomb := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) [ 1 ] ;
5337: LD_ADDR_VAR 0 17
5341: PUSH
5342: LD_INT 22
5344: PUSH
5345: LD_INT 3
5347: PUSH
5348: EMPTY
5349: LIST
5350: LIST
5351: PUSH
5352: LD_INT 34
5354: PUSH
5355: LD_INT 48
5357: PUSH
5358: EMPTY
5359: LIST
5360: LIST
5361: PUSH
5362: EMPTY
5363: LIST
5364: LIST
5365: PPUSH
5366: CALL_OW 69
5370: PUSH
5371: LD_INT 1
5373: ARRAY
5374: ST_TO_ADDR
// if IsInArea ( sib_bomb , ru_base ) then
5375: LD_VAR 0 17
5379: PPUSH
5380: LD_INT 9
5382: PPUSH
5383: CALL_OW 308
5387: IFFALSE 5405
// ComEnterUnit ( sib_bomb , ru_teleport ) else
5389: LD_VAR 0 17
5393: PPUSH
5394: LD_VAR 0 3
5398: PPUSH
5399: CALL_OW 120
5403: GO 5709
// if not HasTask ( sib_bomb ) then
5405: LD_VAR 0 17
5409: PPUSH
5410: CALL_OW 314
5414: NOT
5415: IFFALSE 5709
// if GetLives ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) > 250 then
5417: LD_INT 22
5419: PUSH
5420: LD_OWVAR 2
5424: PUSH
5425: EMPTY
5426: LIST
5427: LIST
5428: PUSH
5429: LD_INT 30
5431: PUSH
5432: LD_INT 1
5434: PUSH
5435: EMPTY
5436: LIST
5437: LIST
5438: PUSH
5439: EMPTY
5440: LIST
5441: LIST
5442: PPUSH
5443: CALL_OW 69
5447: PUSH
5448: LD_INT 1
5450: ARRAY
5451: PPUSH
5452: CALL_OW 256
5456: PUSH
5457: LD_INT 250
5459: GREATER
5460: IFFALSE 5553
// ComAttackPlace ( sib_bomb , GetX ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) , GetY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ) else
5462: LD_VAR 0 17
5466: PPUSH
5467: LD_INT 22
5469: PUSH
5470: LD_OWVAR 2
5474: PUSH
5475: EMPTY
5476: LIST
5477: LIST
5478: PUSH
5479: LD_INT 30
5481: PUSH
5482: LD_INT 1
5484: PUSH
5485: EMPTY
5486: LIST
5487: LIST
5488: PUSH
5489: EMPTY
5490: LIST
5491: LIST
5492: PPUSH
5493: CALL_OW 69
5497: PUSH
5498: LD_INT 1
5500: ARRAY
5501: PPUSH
5502: CALL_OW 250
5506: PPUSH
5507: LD_INT 22
5509: PUSH
5510: LD_OWVAR 2
5514: PUSH
5515: EMPTY
5516: LIST
5517: LIST
5518: PUSH
5519: LD_INT 30
5521: PUSH
5522: LD_INT 1
5524: PUSH
5525: EMPTY
5526: LIST
5527: LIST
5528: PUSH
5529: EMPTY
5530: LIST
5531: LIST
5532: PPUSH
5533: CALL_OW 69
5537: PUSH
5538: LD_INT 1
5540: ARRAY
5541: PPUSH
5542: CALL_OW 251
5546: PPUSH
5547: CALL_OW 116
5551: GO 5709
// if FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) > 0 then
5553: LD_INT 22
5555: PUSH
5556: LD_OWVAR 2
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: PUSH
5565: LD_INT 21
5567: PUSH
5568: LD_INT 3
5570: PUSH
5571: EMPTY
5572: LIST
5573: LIST
5574: PUSH
5575: EMPTY
5576: LIST
5577: LIST
5578: PPUSH
5579: CALL_OW 69
5583: PUSH
5584: LD_INT 0
5586: GREATER
5587: IFFALSE 5680
// ComAttackPlace ( sib_bomb , GetX ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) [ 1 ] ) , GetY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) [ 1 ] ) ) else
5589: LD_VAR 0 17
5593: PPUSH
5594: LD_INT 22
5596: PUSH
5597: LD_OWVAR 2
5601: PUSH
5602: EMPTY
5603: LIST
5604: LIST
5605: PUSH
5606: LD_INT 21
5608: PUSH
5609: LD_INT 3
5611: PUSH
5612: EMPTY
5613: LIST
5614: LIST
5615: PUSH
5616: EMPTY
5617: LIST
5618: LIST
5619: PPUSH
5620: CALL_OW 69
5624: PUSH
5625: LD_INT 1
5627: ARRAY
5628: PPUSH
5629: CALL_OW 250
5633: PPUSH
5634: LD_INT 22
5636: PUSH
5637: LD_OWVAR 2
5641: PUSH
5642: EMPTY
5643: LIST
5644: LIST
5645: PUSH
5646: LD_INT 21
5648: PUSH
5649: LD_INT 3
5651: PUSH
5652: EMPTY
5653: LIST
5654: LIST
5655: PUSH
5656: EMPTY
5657: LIST
5658: LIST
5659: PPUSH
5660: CALL_OW 69
5664: PUSH
5665: LD_INT 1
5667: ARRAY
5668: PPUSH
5669: CALL_OW 251
5673: PPUSH
5674: CALL_OW 116
5678: GO 5709
// ComAttackPlace ( sib_bomb , GetX ( player_commander ) , GetY ( player_commander ) ) ;
5680: LD_VAR 0 17
5684: PPUSH
5685: LD_EXP 10
5689: PPUSH
5690: CALL_OW 250
5694: PPUSH
5695: LD_EXP 10
5699: PPUSH
5700: CALL_OW 251
5704: PPUSH
5705: CALL_OW 116
// end ; if ru_can_attack then
5709: LD_EXP 3
5713: IFFALSE 5861
// if ru_time > 0 0$00 then
5715: LD_EXP 29
5719: PUSH
5720: LD_INT 0
5722: GREATER
5723: IFFALSE 5741
// ru_time := ru_time - 0 0$01 else
5725: LD_ADDR_EXP 29
5729: PUSH
5730: LD_EXP 29
5734: PUSH
5735: LD_INT 35
5737: MINUS
5738: ST_TO_ADDR
5739: GO 5861
// begin ru_time := Rand ( 9 9$39 , 14 14$39 ) ;
5741: LD_ADDR_EXP 29
5745: PUSH
5746: LD_INT 20265
5748: PPUSH
5749: LD_INT 30765
5751: PPUSH
5752: CALL_OW 12
5756: ST_TO_ADDR
// for i = 1 to ru_amount do
5757: LD_ADDR_VAR 0 12
5761: PUSH
5762: DOUBLE
5763: LD_INT 1
5765: DEC
5766: ST_TO_ADDR
5767: LD_EXP 28
5771: PUSH
5772: FOR_TO
5773: IFFALSE 5859
// begin ru_vlist := ru_vlist ^ ru_heavy_wheeled ;
5775: LD_ADDR_EXP 27
5779: PUSH
5780: LD_EXP 27
5784: PUSH
5785: LD_INT 23
5787: ADD
5788: ST_TO_ADDR
// ru_vlist := ru_vlist ^ engine_siberite ;
5789: LD_ADDR_EXP 27
5793: PUSH
5794: LD_EXP 27
5798: PUSH
5799: LD_INT 3
5801: ADD
5802: ST_TO_ADDR
// ru_vlist := ru_vlist ^ control_computer ;
5803: LD_ADDR_EXP 27
5807: PUSH
5808: LD_EXP 27
5812: PUSH
5813: LD_INT 3
5815: ADD
5816: ST_TO_ADDR
// ru_vlist := ru_vlist ^ [ ru_heavy_gun , ru_rocket_launcher , ru_rocket ] [ MultiRand ( 1 , 2 , 3 ) ] ;
5817: LD_ADDR_EXP 27
5821: PUSH
5822: LD_EXP 27
5826: PUSH
5827: LD_INT 46
5829: PUSH
5830: LD_INT 45
5832: PUSH
5833: LD_INT 47
5835: PUSH
5836: EMPTY
5837: LIST
5838: LIST
5839: LIST
5840: PUSH
5841: LD_INT 1
5843: PPUSH
5844: LD_INT 2
5846: PPUSH
5847: LD_INT 3
5849: PPUSH
5850: CALL_OW 14
5854: ARRAY
5855: ADD
5856: ST_TO_ADDR
// end ;
5857: GO 5772
5859: POP
5860: POP
// end ; if UnitFilter ( ru_bunkers , [ f_bweapon , 0 ] ) > 0 then
5861: LD_VAR 0 4
5865: PPUSH
5866: LD_INT 35
5868: PUSH
5869: LD_INT 0
5871: PUSH
5872: EMPTY
5873: LIST
5874: LIST
5875: PPUSH
5876: CALL_OW 72
5880: PUSH
5881: LD_INT 0
5883: GREATER
5884: IFFALSE 5932
// if BuildingStatus ( ru_factory ) = bs_idle then
5886: LD_VAR 0 2
5890: PPUSH
5891: CALL_OW 461
5895: PUSH
5896: LD_INT 2
5898: EQUAL
5899: IFFALSE 5932
// ComPlaceWeapon ( UnitFilter ( ru_bunkers , [ f_bweapon , 0 ] ) [ 1 ] , ru_rocket ) ;
5901: LD_VAR 0 4
5905: PPUSH
5906: LD_INT 35
5908: PUSH
5909: LD_INT 0
5911: PUSH
5912: EMPTY
5913: LIST
5914: LIST
5915: PPUSH
5916: CALL_OW 72
5920: PUSH
5921: LD_INT 1
5923: ARRAY
5924: PPUSH
5925: LD_INT 47
5927: PPUSH
5928: CALL_OW 148
// if ru_force = ru_amount then
5932: LD_EXP 23
5936: PUSH
5937: LD_EXP 28
5941: EQUAL
5942: IFFALSE 6074
// begin for i = 1 to ru_force do
5944: LD_ADDR_VAR 0 12
5948: PUSH
5949: DOUBLE
5950: LD_INT 1
5952: DEC
5953: ST_TO_ADDR
5954: LD_EXP 23
5958: PUSH
5959: FOR_TO
5960: IFFALSE 6070
// if IsInArea ( ru_force [ i ] , ru_base ) then
5962: LD_EXP 23
5966: PUSH
5967: LD_VAR 0 12
5971: ARRAY
5972: PPUSH
5973: LD_INT 9
5975: PPUSH
5976: CALL_OW 308
5980: IFFALSE 6004
// ComEnterUnit ( ru_force [ i ] , ru_teleport ) else
5982: LD_EXP 23
5986: PUSH
5987: LD_VAR 0 12
5991: ARRAY
5992: PPUSH
5993: LD_VAR 0 3
5997: PPUSH
5998: CALL_OW 120
6002: GO 6068
// if not HasTask ( ru_force [ i ] ) then
6004: LD_EXP 23
6008: PUSH
6009: LD_VAR 0 12
6013: ARRAY
6014: PPUSH
6015: CALL_OW 314
6019: NOT
6020: IFFALSE 6068
// ComAttackUnit ( ru_force [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , ru_force [ i ] ) ) ;
6022: LD_EXP 23
6026: PUSH
6027: LD_VAR 0 12
6031: ARRAY
6032: PPUSH
6033: LD_INT 81
6035: PUSH
6036: LD_INT 3
6038: PUSH
6039: EMPTY
6040: LIST
6041: LIST
6042: PPUSH
6043: CALL_OW 69
6047: PPUSH
6048: LD_EXP 23
6052: PUSH
6053: LD_VAR 0 12
6057: ARRAY
6058: PPUSH
6059: CALL_OW 74
6063: PPUSH
6064: CALL_OW 115
6068: GO 5959
6070: POP
6071: POP
// end else
6072: GO 6224
// if UnitFilter ( ru_force , [ f_not , [ f_inarea , legion_base ] ] ) > 0 then
6074: LD_EXP 23
6078: PPUSH
6079: LD_INT 3
6081: PUSH
6082: LD_INT 95
6084: PUSH
6085: LD_INT 18
6087: PUSH
6088: EMPTY
6089: LIST
6090: LIST
6091: PUSH
6092: EMPTY
6093: LIST
6094: LIST
6095: PPUSH
6096: CALL_OW 72
6100: PUSH
6101: LD_INT 0
6103: GREATER
6104: IFFALSE 6224
// begin tmp := UnitFilter ( ru_force , [ f_not , [ f_inarea , legion_base ] ] ) ;
6106: LD_ADDR_VAR 0 13
6110: PUSH
6111: LD_EXP 23
6115: PPUSH
6116: LD_INT 3
6118: PUSH
6119: LD_INT 95
6121: PUSH
6122: LD_INT 18
6124: PUSH
6125: EMPTY
6126: LIST
6127: LIST
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: PPUSH
6133: CALL_OW 72
6137: ST_TO_ADDR
// for i = 1 to tmp do
6138: LD_ADDR_VAR 0 12
6142: PUSH
6143: DOUBLE
6144: LD_INT 1
6146: DEC
6147: ST_TO_ADDR
6148: LD_VAR 0 13
6152: PUSH
6153: FOR_TO
6154: IFFALSE 6222
// if not HasTask ( tmp [ i ] ) then
6156: LD_VAR 0 13
6160: PUSH
6161: LD_VAR 0 12
6165: ARRAY
6166: PPUSH
6167: CALL_OW 314
6171: NOT
6172: IFFALSE 6220
// ComAttackUnit ( ru_force [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , ru_force [ i ] ) ) ;
6174: LD_EXP 23
6178: PUSH
6179: LD_VAR 0 12
6183: ARRAY
6184: PPUSH
6185: LD_INT 81
6187: PUSH
6188: LD_INT 3
6190: PUSH
6191: EMPTY
6192: LIST
6193: LIST
6194: PPUSH
6195: CALL_OW 69
6199: PPUSH
6200: LD_EXP 23
6204: PUSH
6205: LD_VAR 0 12
6209: ARRAY
6210: PPUSH
6211: CALL_OW 74
6215: PPUSH
6216: CALL_OW 115
6220: GO 6153
6222: POP
6223: POP
// end ; if ru_engs > 0 then
6224: LD_VAR 0 9
6228: PUSH
6229: LD_INT 0
6231: GREATER
6232: IFFALSE 6634
// begin if UnitFilter ( ru_buildings , [ f_not , [ f_lives , 1000 ] ] ) > 0 then
6234: LD_VAR 0 5
6238: PPUSH
6239: LD_INT 3
6241: PUSH
6242: LD_INT 24
6244: PUSH
6245: LD_INT 1000
6247: PUSH
6248: EMPTY
6249: LIST
6250: LIST
6251: PUSH
6252: EMPTY
6253: LIST
6254: LIST
6255: PPUSH
6256: CALL_OW 72
6260: PUSH
6261: LD_INT 0
6263: GREATER
6264: IFFALSE 6419
// begin filter := UnitFilter ( ru_buildings , [ f_not , [ f_lives , 1000 ] ] ) ;
6266: LD_ADDR_VAR 0 14
6270: PUSH
6271: LD_VAR 0 5
6275: PPUSH
6276: LD_INT 3
6278: PUSH
6279: LD_INT 24
6281: PUSH
6282: LD_INT 1000
6284: PUSH
6285: EMPTY
6286: LIST
6287: LIST
6288: PUSH
6289: EMPTY
6290: LIST
6291: LIST
6292: PPUSH
6293: CALL_OW 72
6297: ST_TO_ADDR
// for i = 1 to ru_engs do
6298: LD_ADDR_VAR 0 12
6302: PUSH
6303: DOUBLE
6304: LD_INT 1
6306: DEC
6307: ST_TO_ADDR
6308: LD_VAR 0 9
6312: PUSH
6313: FOR_TO
6314: IFFALSE 6415
// begin if IsInUnit ( ru_engs [ i ] ) then
6316: LD_VAR 0 9
6320: PUSH
6321: LD_VAR 0 12
6325: ARRAY
6326: PPUSH
6327: CALL_OW 310
6331: IFFALSE 6350
// ComExitBuilding ( ru_engs [ i ] ) else
6333: LD_VAR 0 9
6337: PUSH
6338: LD_VAR 0 12
6342: ARRAY
6343: PPUSH
6344: CALL_OW 122
6348: GO 6413
// if not HasTask ( ru_engs [ i ] ) and GetLives ( ru_engs [ i ] ) > 600 then
6350: LD_VAR 0 9
6354: PUSH
6355: LD_VAR 0 12
6359: ARRAY
6360: PPUSH
6361: CALL_OW 314
6365: NOT
6366: PUSH
6367: LD_VAR 0 9
6371: PUSH
6372: LD_VAR 0 12
6376: ARRAY
6377: PPUSH
6378: CALL_OW 256
6382: PUSH
6383: LD_INT 600
6385: GREATER
6386: AND
6387: IFFALSE 6413
// ComRepairBuilding ( ru_engs [ i ] , filter [ 1 ] ) ;
6389: LD_VAR 0 9
6393: PUSH
6394: LD_VAR 0 12
6398: ARRAY
6399: PPUSH
6400: LD_VAR 0 14
6404: PUSH
6405: LD_INT 1
6407: ARRAY
6408: PPUSH
6409: CALL_OW 130
// end ;
6413: GO 6313
6415: POP
6416: POP
// end else
6417: GO 6634
// begin if ru_blist = 0 then
6419: LD_EXP 26
6423: PUSH
6424: LD_INT 0
6426: EQUAL
6427: IFFALSE 6509
// begin for i = 1 to ru_engs do
6429: LD_ADDR_VAR 0 12
6433: PUSH
6434: DOUBLE
6435: LD_INT 1
6437: DEC
6438: ST_TO_ADDR
6439: LD_VAR 0 9
6443: PUSH
6444: FOR_TO
6445: IFFALSE 6505
// if not HasTask ( ru_engs [ i ] ) and not IsInUnit ( ru_engs [ i ] ) then
6447: LD_VAR 0 9
6451: PUSH
6452: LD_VAR 0 12
6456: ARRAY
6457: PPUSH
6458: CALL_OW 314
6462: NOT
6463: PUSH
6464: LD_VAR 0 9
6468: PUSH
6469: LD_VAR 0 12
6473: ARRAY
6474: PPUSH
6475: CALL_OW 310
6479: NOT
6480: AND
6481: IFFALSE 6503
// ComEnterUnit ( ru_engs [ i ] , ru_depot ) ;
6483: LD_VAR 0 9
6487: PUSH
6488: LD_VAR 0 12
6492: ARRAY
6493: PPUSH
6494: LD_VAR 0 1
6498: PPUSH
6499: CALL_OW 120
6503: GO 6444
6505: POP
6506: POP
// end else
6507: GO 6634
// begin for i = 1 to ru_engs do
6509: LD_ADDR_VAR 0 12
6513: PUSH
6514: DOUBLE
6515: LD_INT 1
6517: DEC
6518: ST_TO_ADDR
6519: LD_VAR 0 9
6523: PUSH
6524: FOR_TO
6525: IFFALSE 6632
// begin if IsInUnit ( ru_engs [ i ] ) then
6527: LD_VAR 0 9
6531: PUSH
6532: LD_VAR 0 12
6536: ARRAY
6537: PPUSH
6538: CALL_OW 310
6542: IFFALSE 6561
// ComExitBuilding ( ru_engs [ i ] ) else
6544: LD_VAR 0 9
6548: PUSH
6549: LD_VAR 0 12
6553: ARRAY
6554: PPUSH
6555: CALL_OW 122
6559: GO 6630
// if not HasTask ( ru_engs [ i ] ) then
6561: LD_VAR 0 9
6565: PUSH
6566: LD_VAR 0 12
6570: ARRAY
6571: PPUSH
6572: CALL_OW 314
6576: NOT
6577: IFFALSE 6630
// ComBuild ( ru_engs [ i ] , ru_blist [ 1 ] , ru_blist [ 2 ] , ru_blist [ 3 ] , ru_blist [ 4 ] ) ;
6579: LD_VAR 0 9
6583: PUSH
6584: LD_VAR 0 12
6588: ARRAY
6589: PPUSH
6590: LD_EXP 26
6594: PUSH
6595: LD_INT 1
6597: ARRAY
6598: PPUSH
6599: LD_EXP 26
6603: PUSH
6604: LD_INT 2
6606: ARRAY
6607: PPUSH
6608: LD_EXP 26
6612: PUSH
6613: LD_INT 3
6615: ARRAY
6616: PPUSH
6617: LD_EXP 26
6621: PUSH
6622: LD_INT 4
6624: ARRAY
6625: PPUSH
6626: CALL_OW 145
// end ;
6630: GO 6524
6632: POP
6633: POP
// end ; end ; end ; end ;
6634: PPOPN 17
6636: END
// every 2 2$40 + 0 0$45 trigger russian_prepared and GetListOfCratesInArea ( ru_crates ) < 20 do
6637: LD_EXP 2
6641: PUSH
6642: LD_INT 11
6644: PPUSH
6645: CALL_OW 435
6649: PUSH
6650: LD_INT 20
6652: LESS
6653: AND
6654: IFFALSE 6717
6656: GO 6658
6658: DISABLE
// begin enable ;
6659: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , ru_crates , true ) ;
6660: LD_INT 1
6662: PPUSH
6663: LD_INT 5
6665: PPUSH
6666: CALL_OW 12
6670: PPUSH
6671: LD_INT 11
6673: PPUSH
6674: LD_INT 1
6676: PPUSH
6677: CALL_OW 55
// Wait ( Rand ( 0 0$43 , 1 1$00 ) ) ;
6681: LD_INT 1505
6683: PPUSH
6684: LD_INT 2100
6686: PPUSH
6687: CALL_OW 12
6691: PPUSH
6692: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 5 ) , ru_crates , true ) ;
6696: LD_INT 1
6698: PPUSH
6699: LD_INT 5
6701: PPUSH
6702: CALL_OW 12
6706: PPUSH
6707: LD_INT 11
6709: PPUSH
6710: LD_INT 1
6712: PPUSH
6713: CALL_OW 55
// end ;
6717: END
// every 15 15$00 + 25 25$00 trigger ru_sib_bomb = false do var i , tmp ;
6718: LD_EXP 4
6722: PUSH
6723: LD_INT 0
6725: EQUAL
6726: IFFALSE 6841
6728: GO 6730
6730: DISABLE
6731: LD_INT 0
6733: PPUSH
6734: PPUSH
// begin enable ;
6735: ENABLE
// i := Rand ( 0 , 100 ) ;
6736: LD_ADDR_VAR 0 1
6740: PUSH
6741: LD_INT 0
6743: PPUSH
6744: LD_INT 100
6746: PPUSH
6747: CALL_OW 12
6751: ST_TO_ADDR
// case your_side of 1 :
6752: LD_OWVAR 2
6756: PUSH
6757: LD_INT 1
6759: DOUBLE
6760: EQUAL
6761: IFTRUE 6765
6763: GO 6776
6765: POP
// tmp := 10 ; 2 :
6766: LD_ADDR_VAR 0 2
6770: PUSH
6771: LD_INT 10
6773: ST_TO_ADDR
6774: GO 6815
6776: LD_INT 2
6778: DOUBLE
6779: EQUAL
6780: IFTRUE 6784
6782: GO 6795
6784: POP
// tmp := 0 ; 7 :
6785: LD_ADDR_VAR 0 2
6789: PUSH
6790: LD_INT 0
6792: ST_TO_ADDR
6793: GO 6815
6795: LD_INT 7
6797: DOUBLE
6798: EQUAL
6799: IFTRUE 6803
6801: GO 6814
6803: POP
// tmp := 15 ; end ;
6804: LD_ADDR_VAR 0 2
6808: PUSH
6809: LD_INT 15
6811: ST_TO_ADDR
6812: GO 6815
6814: POP
// if i < chance_to_bomb + tmp then
6815: LD_VAR 0 1
6819: PUSH
6820: LD_EXP 5
6824: PUSH
6825: LD_VAR 0 2
6829: PLUS
6830: LESS
6831: IFFALSE 6841
// ru_sib_bomb := true ;
6833: LD_ADDR_EXP 4
6837: PUSH
6838: LD_INT 1
6840: ST_TO_ADDR
// end ;
6841: PPOPN 2
6843: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_weapon , us_siberium_rocket ] ] ) do
6844: LD_INT 22
6846: PUSH
6847: LD_OWVAR 2
6851: PUSH
6852: EMPTY
6853: LIST
6854: LIST
6855: PUSH
6856: LD_INT 34
6858: PUSH
6859: LD_INT 8
6861: PUSH
6862: EMPTY
6863: LIST
6864: LIST
6865: PUSH
6866: EMPTY
6867: LIST
6868: LIST
6869: PPUSH
6870: CALL_OW 69
6874: IFFALSE 6887
6876: GO 6878
6878: DISABLE
// begin ru_sib_bomb := true ;
6879: LD_ADDR_EXP 4
6883: PUSH
6884: LD_INT 1
6886: ST_TO_ADDR
// end ;
6887: END
// every 15 15$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) do var i ;
6888: LD_INT 22
6890: PUSH
6891: LD_INT 3
6893: PUSH
6894: EMPTY
6895: LIST
6896: LIST
6897: PUSH
6898: LD_INT 30
6900: PUSH
6901: LD_INT 34
6903: PUSH
6904: EMPTY
6905: LIST
6906: LIST
6907: PUSH
6908: EMPTY
6909: LIST
6910: LIST
6911: PPUSH
6912: CALL_OW 69
6916: IFFALSE 7015
6918: GO 6920
6920: DISABLE
6921: LD_INT 0
6923: PPUSH
// begin enable ;
6924: ENABLE
// i := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
6925: LD_ADDR_VAR 0 1
6929: PUSH
6930: LD_INT 1
6932: PUSH
6933: LD_INT 3
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: PUSH
6940: LD_INT 1
6942: PPUSH
6943: LD_INT 2
6945: PPUSH
6946: CALL_OW 12
6950: ARRAY
6951: ST_TO_ADDR
// TeleportExit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] , ru_teleport_exit [ i ] , ru_teleport_exit [ i + 1 ] ) ;
6952: LD_INT 22
6954: PUSH
6955: LD_INT 3
6957: PUSH
6958: EMPTY
6959: LIST
6960: LIST
6961: PUSH
6962: LD_INT 30
6964: PUSH
6965: LD_INT 34
6967: PUSH
6968: EMPTY
6969: LIST
6970: LIST
6971: PUSH
6972: EMPTY
6973: LIST
6974: LIST
6975: PPUSH
6976: CALL_OW 69
6980: PUSH
6981: LD_INT 1
6983: ARRAY
6984: PPUSH
6985: LD_EXP 30
6989: PUSH
6990: LD_VAR 0 1
6994: ARRAY
6995: PPUSH
6996: LD_EXP 30
7000: PUSH
7001: LD_VAR 0 1
7005: PUSH
7006: LD_INT 1
7008: PLUS
7009: ARRAY
7010: PPUSH
7011: CALL_OW 243
// end ; end_of_file
7015: PPOPN 1
7017: END
// export function RemoveLegion ; var i ; begin
7018: LD_INT 0
7020: PPUSH
7021: PPUSH
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
7022: LD_ADDR_VAR 0 2
7026: PUSH
7027: LD_INT 22
7029: PUSH
7030: LD_INT 8
7032: PUSH
7033: EMPTY
7034: LIST
7035: LIST
7036: PPUSH
7037: CALL_OW 69
7041: PUSH
7042: FOR_IN
7043: IFFALSE 7056
// RemoveUnit ( i ) ;
7045: LD_VAR 0 2
7049: PPUSH
7050: CALL_OW 64
7054: GO 7042
7056: POP
7057: POP
// end ;
7058: LD_VAR 0 1
7062: RET
// export legion_force , legion_skill , legion_mines , legion_blist , legion_vlist , legion_enemy ; export function PrepareLegion ; var un , i , tmp , veh , p , l_depot , l_factory , l_lab , l_towers ; begin
7063: LD_INT 0
7065: PPUSH
7066: PPUSH
7067: PPUSH
7068: PPUSH
7069: PPUSH
7070: PPUSH
7071: PPUSH
7072: PPUSH
7073: PPUSH
7074: PPUSH
// l_depot := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
7075: LD_ADDR_VAR 0 7
7079: PUSH
7080: LD_INT 22
7082: PUSH
7083: LD_INT 8
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: PUSH
7090: LD_INT 30
7092: PUSH
7093: LD_INT 1
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: PUSH
7100: EMPTY
7101: LIST
7102: LIST
7103: PPUSH
7104: CALL_OW 69
7108: PUSH
7109: LD_INT 1
7111: ARRAY
7112: ST_TO_ADDR
// l_factory := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
7113: LD_ADDR_VAR 0 8
7117: PUSH
7118: LD_INT 22
7120: PUSH
7121: LD_INT 8
7123: PUSH
7124: EMPTY
7125: LIST
7126: LIST
7127: PUSH
7128: LD_INT 30
7130: PUSH
7131: LD_INT 3
7133: PUSH
7134: EMPTY
7135: LIST
7136: LIST
7137: PUSH
7138: EMPTY
7139: LIST
7140: LIST
7141: PPUSH
7142: CALL_OW 69
7146: PUSH
7147: LD_INT 1
7149: ARRAY
7150: ST_TO_ADDR
// l_lab := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ;
7151: LD_ADDR_VAR 0 9
7155: PUSH
7156: LD_INT 22
7158: PUSH
7159: LD_INT 8
7161: PUSH
7162: EMPTY
7163: LIST
7164: LIST
7165: PUSH
7166: LD_INT 2
7168: PUSH
7169: LD_INT 30
7171: PUSH
7172: LD_INT 6
7174: PUSH
7175: EMPTY
7176: LIST
7177: LIST
7178: PUSH
7179: LD_INT 30
7181: PUSH
7182: LD_INT 8
7184: PUSH
7185: EMPTY
7186: LIST
7187: LIST
7188: PUSH
7189: EMPTY
7190: LIST
7191: LIST
7192: LIST
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: PPUSH
7198: CALL_OW 69
7202: PUSH
7203: LD_INT 1
7205: ARRAY
7206: ST_TO_ADDR
// l_towers := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) ;
7207: LD_ADDR_VAR 0 10
7211: PUSH
7212: LD_INT 22
7214: PUSH
7215: LD_INT 8
7217: PUSH
7218: EMPTY
7219: LIST
7220: LIST
7221: PUSH
7222: LD_INT 30
7224: PUSH
7225: LD_INT 32
7227: PUSH
7228: EMPTY
7229: LIST
7230: LIST
7231: PUSH
7232: EMPTY
7233: LIST
7234: LIST
7235: PPUSH
7236: CALL_OW 69
7240: ST_TO_ADDR
// uc_side := 8 ;
7241: LD_ADDR_OWVAR 20
7245: PUSH
7246: LD_INT 8
7248: ST_TO_ADDR
// uc_nation := nation_arabian ;
7249: LD_ADDR_OWVAR 21
7253: PUSH
7254: LD_INT 2
7256: ST_TO_ADDR
// legion_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
7257: LD_ADDR_EXP 32
7261: PUSH
7262: LD_INT 5
7264: PUSH
7265: LD_INT 6
7267: PUSH
7268: LD_INT 7
7270: PUSH
7271: EMPTY
7272: LIST
7273: LIST
7274: LIST
7275: PUSH
7276: LD_OWVAR 67
7280: ARRAY
7281: ST_TO_ADDR
// legion_blist := [ ] ;
7282: LD_ADDR_EXP 34
7286: PUSH
7287: EMPTY
7288: ST_TO_ADDR
// legion_vlist := [ ] ;
7289: LD_ADDR_EXP 35
7293: PUSH
7294: EMPTY
7295: ST_TO_ADDR
// legion_force := [ ] ;
7296: LD_ADDR_EXP 31
7300: PUSH
7301: EMPTY
7302: ST_TO_ADDR
// legion_enemy := - 1 ;
7303: LD_ADDR_EXP 36
7307: PUSH
7308: LD_INT 1
7310: NEG
7311: ST_TO_ADDR
// SetResourceType ( GetBase ( l_depot ) , mat_cans , 10000 ) ;
7312: LD_VAR 0 7
7316: PPUSH
7317: CALL_OW 274
7321: PPUSH
7322: LD_INT 1
7324: PPUSH
7325: LD_INT 10000
7327: PPUSH
7328: CALL_OW 277
// SetResourceType ( GetBase ( l_depot ) , 3 , 1000 ) ;
7332: LD_VAR 0 7
7336: PPUSH
7337: CALL_OW 274
7341: PPUSH
7342: LD_INT 3
7344: PPUSH
7345: LD_INT 1000
7347: PPUSH
7348: CALL_OW 277
// for i = 1 to l_towers do
7352: LD_ADDR_VAR 0 3
7356: PUSH
7357: DOUBLE
7358: LD_INT 1
7360: DEC
7361: ST_TO_ADDR
7362: LD_VAR 0 10
7366: PUSH
7367: FOR_TO
7368: IFFALSE 7417
// begin PrepareHuman ( false , 1 , legion_skill ) ;
7370: LD_INT 0
7372: PPUSH
7373: LD_INT 1
7375: PPUSH
7376: LD_EXP 32
7380: PPUSH
7381: CALL_OW 380
// un := CreateHuman ;
7385: LD_ADDR_VAR 0 2
7389: PUSH
7390: CALL_OW 44
7394: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_towers [ i ] ) ;
7395: LD_VAR 0 2
7399: PPUSH
7400: LD_VAR 0 10
7404: PUSH
7405: LD_VAR 0 3
7409: ARRAY
7410: PPUSH
7411: CALL_OW 52
// end ;
7415: GO 7367
7417: POP
7418: POP
// for i = 1 to 4 do
7419: LD_ADDR_VAR 0 3
7423: PUSH
7424: DOUBLE
7425: LD_INT 1
7427: DEC
7428: ST_TO_ADDR
7429: LD_INT 4
7431: PUSH
7432: FOR_TO
7433: IFFALSE 7526
// for p = 1 to 2 do
7435: LD_ADDR_VAR 0 6
7439: PUSH
7440: DOUBLE
7441: LD_INT 1
7443: DEC
7444: ST_TO_ADDR
7445: LD_INT 2
7447: PUSH
7448: FOR_TO
7449: IFFALSE 7522
// begin PrepareHuman ( false , class_mortar , legion_skill ) ;
7451: LD_INT 0
7453: PPUSH
7454: LD_INT 8
7456: PPUSH
7457: LD_EXP 32
7461: PPUSH
7462: CALL_OW 380
// un := CreateHuman ;
7466: LD_ADDR_VAR 0 2
7470: PUSH
7471: CALL_OW 44
7475: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_barracks ] ] ) [ p ] ) ;
7476: LD_VAR 0 2
7480: PPUSH
7481: LD_INT 22
7483: PUSH
7484: LD_INT 8
7486: PUSH
7487: EMPTY
7488: LIST
7489: LIST
7490: PUSH
7491: LD_INT 30
7493: PUSH
7494: LD_INT 5
7496: PUSH
7497: EMPTY
7498: LIST
7499: LIST
7500: PUSH
7501: EMPTY
7502: LIST
7503: LIST
7504: PPUSH
7505: CALL_OW 69
7509: PUSH
7510: LD_VAR 0 6
7514: ARRAY
7515: PPUSH
7516: CALL_OW 52
// end ;
7520: GO 7448
7522: POP
7523: POP
7524: GO 7432
7526: POP
7527: POP
// for i = 1 to 4 do
7528: LD_ADDR_VAR 0 3
7532: PUSH
7533: DOUBLE
7534: LD_INT 1
7536: DEC
7537: ST_TO_ADDR
7538: LD_INT 4
7540: PUSH
7541: FOR_TO
7542: IFFALSE 7585
// begin PrepareHuman ( false , 4 , legion_skill ) ;
7544: LD_INT 0
7546: PPUSH
7547: LD_INT 4
7549: PPUSH
7550: LD_EXP 32
7554: PPUSH
7555: CALL_OW 380
// un := CreateHuman ;
7559: LD_ADDR_VAR 0 2
7563: PUSH
7564: CALL_OW 44
7568: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_lab ) ;
7569: LD_VAR 0 2
7573: PPUSH
7574: LD_VAR 0 9
7578: PPUSH
7579: CALL_OW 52
// end ;
7583: GO 7541
7585: POP
7586: POP
// for i = 1 to 6 do
7587: LD_ADDR_VAR 0 3
7591: PUSH
7592: DOUBLE
7593: LD_INT 1
7595: DEC
7596: ST_TO_ADDR
7597: LD_INT 6
7599: PUSH
7600: FOR_TO
7601: IFFALSE 7644
// begin PrepareHuman ( false , 3 , legion_skill ) ;
7603: LD_INT 0
7605: PPUSH
7606: LD_INT 3
7608: PPUSH
7609: LD_EXP 32
7613: PPUSH
7614: CALL_OW 380
// un := CreateHuman ;
7618: LD_ADDR_VAR 0 2
7622: PUSH
7623: CALL_OW 44
7627: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_factory ) ;
7628: LD_VAR 0 2
7632: PPUSH
7633: LD_VAR 0 8
7637: PPUSH
7638: CALL_OW 52
// end ;
7642: GO 7600
7644: POP
7645: POP
// for i = 1 to 5 do
7646: LD_ADDR_VAR 0 3
7650: PUSH
7651: DOUBLE
7652: LD_INT 1
7654: DEC
7655: ST_TO_ADDR
7656: LD_INT 5
7658: PUSH
7659: FOR_TO
7660: IFFALSE 7703
// begin PrepareHuman ( false , 2 , legion_skill ) ;
7662: LD_INT 0
7664: PPUSH
7665: LD_INT 2
7667: PPUSH
7668: LD_EXP 32
7672: PPUSH
7673: CALL_OW 380
// un := CreateHuman ;
7677: LD_ADDR_VAR 0 2
7681: PUSH
7682: CALL_OW 44
7686: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_depot ) ;
7687: LD_VAR 0 2
7691: PPUSH
7692: LD_VAR 0 7
7696: PPUSH
7697: CALL_OW 52
// end ;
7701: GO 7659
7703: POP
7704: POP
// tmp := RandPointsFromArea ( 199 , 134 , 216 , 141 , 6 ) ;
7705: LD_ADDR_VAR 0 4
7709: PUSH
7710: LD_INT 199
7712: PPUSH
7713: LD_INT 134
7715: PPUSH
7716: LD_INT 216
7718: PPUSH
7719: LD_INT 141
7721: PPUSH
7722: LD_INT 6
7724: PPUSH
7725: CALL 1562 0 5
7729: ST_TO_ADDR
// p := 1 ;
7730: LD_ADDR_VAR 0 6
7734: PUSH
7735: LD_INT 1
7737: ST_TO_ADDR
// for i = 1 to 3 do
7738: LD_ADDR_VAR 0 3
7742: PUSH
7743: DOUBLE
7744: LD_INT 1
7746: DEC
7747: ST_TO_ADDR
7748: LD_INT 3
7750: PUSH
7751: FOR_TO
7752: IFFALSE 8005
// begin vc_chassis := ar_half_tracked ;
7754: LD_ADDR_OWVAR 37
7758: PUSH
7759: LD_INT 14
7761: ST_TO_ADDR
// vc_engine := engine_siberite ;
7762: LD_ADDR_OWVAR 39
7766: PUSH
7767: LD_INT 3
7769: ST_TO_ADDR
// vc_control := control_manual ;
7770: LD_ADDR_OWVAR 38
7774: PUSH
7775: LD_INT 1
7777: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
7778: LD_ADDR_OWVAR 40
7782: PUSH
7783: LD_INT 31
7785: ST_TO_ADDR
// veh := CreateVehicle ;
7786: LD_ADDR_VAR 0 5
7790: PUSH
7791: CALL_OW 45
7795: ST_TO_ADDR
// if HexInfo ( tmp [ p ] , tmp [ p + 1 ] ) = 0 then
7796: LD_VAR 0 4
7800: PUSH
7801: LD_VAR 0 6
7805: ARRAY
7806: PPUSH
7807: LD_VAR 0 4
7811: PUSH
7812: LD_VAR 0 6
7816: PUSH
7817: LD_INT 1
7819: PLUS
7820: ARRAY
7821: PPUSH
7822: CALL_OW 428
7826: PUSH
7827: LD_INT 0
7829: EQUAL
7830: IFFALSE 7872
// PlaceUnitXY ( veh , tmp [ p ] , tmp [ p + 1 ] , false ) else
7832: LD_VAR 0 5
7836: PPUSH
7837: LD_VAR 0 4
7841: PUSH
7842: LD_VAR 0 6
7846: ARRAY
7847: PPUSH
7848: LD_VAR 0 4
7852: PUSH
7853: LD_VAR 0 6
7857: PUSH
7858: LD_INT 1
7860: PLUS
7861: ARRAY
7862: PPUSH
7863: LD_INT 0
7865: PPUSH
7866: CALL_OW 48
7870: GO 7960
// begin repeat p := p + 2 ;
7872: LD_ADDR_VAR 0 6
7876: PUSH
7877: LD_VAR 0 6
7881: PUSH
7882: LD_INT 2
7884: PLUS
7885: ST_TO_ADDR
// until HexInfo ( tmp [ p ] , tmp [ p + 1 ] ) = 0 ;
7886: LD_VAR 0 4
7890: PUSH
7891: LD_VAR 0 6
7895: ARRAY
7896: PPUSH
7897: LD_VAR 0 4
7901: PUSH
7902: LD_VAR 0 6
7906: PUSH
7907: LD_INT 1
7909: PLUS
7910: ARRAY
7911: PPUSH
7912: CALL_OW 428
7916: PUSH
7917: LD_INT 0
7919: EQUAL
7920: IFFALSE 7872
// PlaceUnitXY ( veh , tmp [ p ] , tmp [ p + 1 ] , false ) ;
7922: LD_VAR 0 5
7926: PPUSH
7927: LD_VAR 0 4
7931: PUSH
7932: LD_VAR 0 6
7936: ARRAY
7937: PPUSH
7938: LD_VAR 0 4
7942: PUSH
7943: LD_VAR 0 6
7947: PUSH
7948: LD_INT 1
7950: PLUS
7951: ARRAY
7952: PPUSH
7953: LD_INT 0
7955: PPUSH
7956: CALL_OW 48
// end ; PrepareHuman ( false , 3 , legion_skill + 1 ) ;
7960: LD_INT 0
7962: PPUSH
7963: LD_INT 3
7965: PPUSH
7966: LD_EXP 32
7970: PUSH
7971: LD_INT 1
7973: PLUS
7974: PPUSH
7975: CALL_OW 380
// un := CreateHuman ;
7979: LD_ADDR_VAR 0 2
7983: PUSH
7984: CALL_OW 44
7988: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7989: LD_VAR 0 2
7993: PPUSH
7994: LD_VAR 0 5
7998: PPUSH
7999: CALL_OW 52
// end ;
8003: GO 7751
8005: POP
8006: POP
// PlaceSeeing ( 198 , 94 , 8 , 10 ) ;
8007: LD_INT 198
8009: PPUSH
8010: LD_INT 94
8012: PPUSH
8013: LD_INT 8
8015: PPUSH
8016: LD_INT 10
8018: PPUSH
8019: CALL_OW 330
// PlaceSeeing ( 167 , 130 , 8 , 10 ) ;
8023: LD_INT 167
8025: PPUSH
8026: LD_INT 130
8028: PPUSH
8029: LD_INT 8
8031: PPUSH
8032: LD_INT 10
8034: PPUSH
8035: CALL_OW 330
// legion_mines := [ ] ;
8039: LD_ADDR_EXP 33
8043: PUSH
8044: EMPTY
8045: ST_TO_ADDR
// legion_mines := RandPointsFromArea ( 176 , 122 , 188 , 126 , 6 ) ;
8046: LD_ADDR_EXP 33
8050: PUSH
8051: LD_INT 176
8053: PPUSH
8054: LD_INT 122
8056: PPUSH
8057: LD_INT 188
8059: PPUSH
8060: LD_INT 126
8062: PPUSH
8063: LD_INT 6
8065: PPUSH
8066: CALL 1562 0 5
8070: ST_TO_ADDR
// legion_mines := legion_mines ^ RandPointsFromArea ( 197 , 91 , 205 , 96 , 4 ) ;
8071: LD_ADDR_EXP 33
8075: PUSH
8076: LD_EXP 33
8080: PUSH
8081: LD_INT 197
8083: PPUSH
8084: LD_INT 91
8086: PPUSH
8087: LD_INT 205
8089: PPUSH
8090: LD_INT 96
8092: PPUSH
8093: LD_INT 4
8095: PPUSH
8096: CALL 1562 0 5
8100: ADD
8101: ST_TO_ADDR
// legion_mines := legion_mines ^ RandPointsFromArea ( 184 , 151 , 178 , 130 , 9 ) ;
8102: LD_ADDR_EXP 33
8106: PUSH
8107: LD_EXP 33
8111: PUSH
8112: LD_INT 184
8114: PPUSH
8115: LD_INT 151
8117: PPUSH
8118: LD_INT 178
8120: PPUSH
8121: LD_INT 130
8123: PPUSH
8124: LD_INT 9
8126: PPUSH
8127: CALL 1562 0 5
8131: ADD
8132: ST_TO_ADDR
// if Difficulty > 1 then
8133: LD_OWVAR 67
8137: PUSH
8138: LD_INT 1
8140: GREATER
8141: IFFALSE 8174
// legion_mines := legion_mines ^ RandPointsFromArea ( 166 , 126 , 181 , 136 , 5 ) ;
8143: LD_ADDR_EXP 33
8147: PUSH
8148: LD_EXP 33
8152: PUSH
8153: LD_INT 166
8155: PPUSH
8156: LD_INT 126
8158: PPUSH
8159: LD_INT 181
8161: PPUSH
8162: LD_INT 136
8164: PPUSH
8165: LD_INT 5
8167: PPUSH
8168: CALL 1562 0 5
8172: ADD
8173: ST_TO_ADDR
// p := 1 ;
8174: LD_ADDR_VAR 0 6
8178: PUSH
8179: LD_INT 1
8181: ST_TO_ADDR
// for i = 1 to 24 do
8182: LD_ADDR_VAR 0 3
8186: PUSH
8187: DOUBLE
8188: LD_INT 1
8190: DEC
8191: ST_TO_ADDR
8192: LD_INT 24
8194: PUSH
8195: FOR_TO
8196: IFFALSE 8250
// begin PlaceMine ( legion_mines [ p ] , legion_mines [ p + 1 ] , 8 , 0 ) ;
8198: LD_EXP 33
8202: PUSH
8203: LD_VAR 0 6
8207: ARRAY
8208: PPUSH
8209: LD_EXP 33
8213: PUSH
8214: LD_VAR 0 6
8218: PUSH
8219: LD_INT 1
8221: PLUS
8222: ARRAY
8223: PPUSH
8224: LD_INT 8
8226: PPUSH
8227: LD_INT 0
8229: PPUSH
8230: CALL_OW 454
// p := p + 2 ;
8234: LD_ADDR_VAR 0 6
8238: PUSH
8239: LD_VAR 0 6
8243: PUSH
8244: LD_INT 2
8246: PLUS
8247: ST_TO_ADDR
// end ;
8248: GO 8195
8250: POP
8251: POP
// legion_vlist := [ ar_medium_trike , 3 , control_remote , ar_cargo_bay ] ;
8252: LD_ADDR_EXP 35
8256: PUSH
8257: LD_INT 13
8259: PUSH
8260: LD_INT 3
8262: PUSH
8263: LD_INT 2
8265: PUSH
8266: LD_INT 32
8268: PUSH
8269: EMPTY
8270: LIST
8271: LIST
8272: LIST
8273: LIST
8274: ST_TO_ADDR
// end ;
8275: LD_VAR 0 1
8279: RET
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 8 ] ) > 0 do var un , i , tmp , veh , b , p , cr , l_depot , l_factory , l_lab , l_towers , l_sib , l_sci , l_mech , l_sold , l_eng , l_cargo ;
8280: LD_INT 22
8282: PUSH
8283: LD_INT 8
8285: PUSH
8286: EMPTY
8287: LIST
8288: LIST
8289: PPUSH
8290: CALL_OW 69
8294: PUSH
8295: LD_INT 0
8297: GREATER
8298: IFFALSE 10484
8300: GO 8302
8302: DISABLE
8303: LD_INT 0
8305: PPUSH
8306: PPUSH
8307: PPUSH
8308: PPUSH
8309: PPUSH
8310: PPUSH
8311: PPUSH
8312: PPUSH
8313: PPUSH
8314: PPUSH
8315: PPUSH
8316: PPUSH
8317: PPUSH
8318: PPUSH
8319: PPUSH
8320: PPUSH
8321: PPUSH
// begin enable ;
8322: ENABLE
// l_depot := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
8323: LD_ADDR_VAR 0 8
8327: PUSH
8328: LD_INT 22
8330: PUSH
8331: LD_INT 8
8333: PUSH
8334: EMPTY
8335: LIST
8336: LIST
8337: PUSH
8338: LD_INT 30
8340: PUSH
8341: LD_INT 1
8343: PUSH
8344: EMPTY
8345: LIST
8346: LIST
8347: PUSH
8348: EMPTY
8349: LIST
8350: LIST
8351: PPUSH
8352: CALL_OW 69
8356: PUSH
8357: LD_INT 1
8359: ARRAY
8360: ST_TO_ADDR
// l_factory := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
8361: LD_ADDR_VAR 0 9
8365: PUSH
8366: LD_INT 22
8368: PUSH
8369: LD_INT 8
8371: PUSH
8372: EMPTY
8373: LIST
8374: LIST
8375: PUSH
8376: LD_INT 30
8378: PUSH
8379: LD_INT 3
8381: PUSH
8382: EMPTY
8383: LIST
8384: LIST
8385: PUSH
8386: EMPTY
8387: LIST
8388: LIST
8389: PPUSH
8390: CALL_OW 69
8394: PUSH
8395: LD_INT 1
8397: ARRAY
8398: ST_TO_ADDR
// l_lab := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ;
8399: LD_ADDR_VAR 0 10
8403: PUSH
8404: LD_INT 22
8406: PUSH
8407: LD_INT 8
8409: PUSH
8410: EMPTY
8411: LIST
8412: LIST
8413: PUSH
8414: LD_INT 2
8416: PUSH
8417: LD_INT 30
8419: PUSH
8420: LD_INT 6
8422: PUSH
8423: EMPTY
8424: LIST
8425: LIST
8426: PUSH
8427: LD_INT 30
8429: PUSH
8430: LD_INT 8
8432: PUSH
8433: EMPTY
8434: LIST
8435: LIST
8436: PUSH
8437: EMPTY
8438: LIST
8439: LIST
8440: LIST
8441: PUSH
8442: EMPTY
8443: LIST
8444: LIST
8445: PPUSH
8446: CALL_OW 69
8450: PUSH
8451: LD_INT 1
8453: ARRAY
8454: ST_TO_ADDR
// l_towers := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) ;
8455: LD_ADDR_VAR 0 11
8459: PUSH
8460: LD_INT 22
8462: PUSH
8463: LD_INT 8
8465: PUSH
8466: EMPTY
8467: LIST
8468: LIST
8469: PUSH
8470: LD_INT 30
8472: PUSH
8473: LD_INT 32
8475: PUSH
8476: EMPTY
8477: LIST
8478: LIST
8479: PUSH
8480: EMPTY
8481: LIST
8482: LIST
8483: PPUSH
8484: CALL_OW 69
8488: ST_TO_ADDR
// l_eng := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 2 ] ] ) ;
8489: LD_ADDR_VAR 0 16
8493: PUSH
8494: LD_INT 22
8496: PUSH
8497: LD_INT 8
8499: PUSH
8500: EMPTY
8501: LIST
8502: LIST
8503: PUSH
8504: LD_INT 25
8506: PUSH
8507: LD_INT 2
8509: PUSH
8510: EMPTY
8511: LIST
8512: LIST
8513: PUSH
8514: EMPTY
8515: LIST
8516: LIST
8517: PPUSH
8518: CALL_OW 69
8522: ST_TO_ADDR
// l_sold := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 1 ] ] ) ;
8523: LD_ADDR_VAR 0 15
8527: PUSH
8528: LD_INT 22
8530: PUSH
8531: LD_INT 8
8533: PUSH
8534: EMPTY
8535: LIST
8536: LIST
8537: PUSH
8538: LD_INT 25
8540: PUSH
8541: LD_INT 1
8543: PUSH
8544: EMPTY
8545: LIST
8546: LIST
8547: PUSH
8548: EMPTY
8549: LIST
8550: LIST
8551: PPUSH
8552: CALL_OW 69
8556: ST_TO_ADDR
// l_mech := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 3 ] ] ) ;
8557: LD_ADDR_VAR 0 14
8561: PUSH
8562: LD_INT 22
8564: PUSH
8565: LD_INT 8
8567: PUSH
8568: EMPTY
8569: LIST
8570: LIST
8571: PUSH
8572: LD_INT 25
8574: PUSH
8575: LD_INT 3
8577: PUSH
8578: EMPTY
8579: LIST
8580: LIST
8581: PUSH
8582: EMPTY
8583: LIST
8584: LIST
8585: PPUSH
8586: CALL_OW 69
8590: ST_TO_ADDR
// l_sci := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 4 ] ] ) ;
8591: LD_ADDR_VAR 0 13
8595: PUSH
8596: LD_INT 22
8598: PUSH
8599: LD_INT 8
8601: PUSH
8602: EMPTY
8603: LIST
8604: LIST
8605: PUSH
8606: LD_INT 25
8608: PUSH
8609: LD_INT 4
8611: PUSH
8612: EMPTY
8613: LIST
8614: LIST
8615: PUSH
8616: EMPTY
8617: LIST
8618: LIST
8619: PPUSH
8620: CALL_OW 69
8624: ST_TO_ADDR
// if l_eng then
8625: LD_VAR 0 16
8629: IFFALSE 9044
// begin b := FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) ;
8631: LD_ADDR_VAR 0 5
8635: PUSH
8636: LD_INT 22
8638: PUSH
8639: LD_INT 8
8641: PUSH
8642: EMPTY
8643: LIST
8644: LIST
8645: PUSH
8646: LD_INT 21
8648: PUSH
8649: LD_INT 3
8651: PUSH
8652: EMPTY
8653: LIST
8654: LIST
8655: PUSH
8656: EMPTY
8657: LIST
8658: LIST
8659: PPUSH
8660: CALL_OW 69
8664: ST_TO_ADDR
// if UnitFilter ( b , [ f_not , [ f_lives , 1000 ] ] ) > 0 then
8665: LD_VAR 0 5
8669: PPUSH
8670: LD_INT 3
8672: PUSH
8673: LD_INT 24
8675: PUSH
8676: LD_INT 1000
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: PUSH
8683: EMPTY
8684: LIST
8685: LIST
8686: PPUSH
8687: CALL_OW 72
8691: PUSH
8692: LD_INT 0
8694: GREATER
8695: IFFALSE 8829
// begin tmp := UnitFilter ( b , [ f_not , [ f_lives , 1000 ] ] ) ;
8697: LD_ADDR_VAR 0 3
8701: PUSH
8702: LD_VAR 0 5
8706: PPUSH
8707: LD_INT 3
8709: PUSH
8710: LD_INT 24
8712: PUSH
8713: LD_INT 1000
8715: PUSH
8716: EMPTY
8717: LIST
8718: LIST
8719: PUSH
8720: EMPTY
8721: LIST
8722: LIST
8723: PPUSH
8724: CALL_OW 72
8728: ST_TO_ADDR
// for i = 1 to l_eng do
8729: LD_ADDR_VAR 0 2
8733: PUSH
8734: DOUBLE
8735: LD_INT 1
8737: DEC
8738: ST_TO_ADDR
8739: LD_VAR 0 16
8743: PUSH
8744: FOR_TO
8745: IFFALSE 8825
// if IsInUnit ( l_eng [ i ] ) then
8747: LD_VAR 0 16
8751: PUSH
8752: LD_VAR 0 2
8756: ARRAY
8757: PPUSH
8758: CALL_OW 310
8762: IFFALSE 8781
// ComExitBuilding ( l_eng [ i ] ) else
8764: LD_VAR 0 16
8768: PUSH
8769: LD_VAR 0 2
8773: ARRAY
8774: PPUSH
8775: CALL_OW 122
8779: GO 8823
// if not HasTask ( l_eng [ i ] ) then
8781: LD_VAR 0 16
8785: PUSH
8786: LD_VAR 0 2
8790: ARRAY
8791: PPUSH
8792: CALL_OW 314
8796: NOT
8797: IFFALSE 8823
// ComRepairBuilding ( l_eng [ i ] , tmp [ 1 ] ) ;
8799: LD_VAR 0 16
8803: PUSH
8804: LD_VAR 0 2
8808: ARRAY
8809: PPUSH
8810: LD_VAR 0 3
8814: PUSH
8815: LD_INT 1
8817: ARRAY
8818: PPUSH
8819: CALL_OW 130
8823: GO 8744
8825: POP
8826: POP
// end else
8827: GO 9044
// begin if legion_blist > 0 then
8829: LD_EXP 34
8833: PUSH
8834: LD_INT 0
8836: GREATER
8837: IFFALSE 8966
// begin for i = 1 to l_eng do
8839: LD_ADDR_VAR 0 2
8843: PUSH
8844: DOUBLE
8845: LD_INT 1
8847: DEC
8848: ST_TO_ADDR
8849: LD_VAR 0 16
8853: PUSH
8854: FOR_TO
8855: IFFALSE 8962
// if IsInUnit ( l_eng [ i ] ) then
8857: LD_VAR 0 16
8861: PUSH
8862: LD_VAR 0 2
8866: ARRAY
8867: PPUSH
8868: CALL_OW 310
8872: IFFALSE 8891
// ComExitBuilding ( l_eng [ i ] ) else
8874: LD_VAR 0 16
8878: PUSH
8879: LD_VAR 0 2
8883: ARRAY
8884: PPUSH
8885: CALL_OW 122
8889: GO 8960
// if not HasTask ( l_eng [ i ] ) then
8891: LD_VAR 0 16
8895: PUSH
8896: LD_VAR 0 2
8900: ARRAY
8901: PPUSH
8902: CALL_OW 314
8906: NOT
8907: IFFALSE 8960
// ComBuild ( l_eng [ i ] , legion_blist [ 1 ] , legion_blist [ 2 ] , legion_blist [ 3 ] , legion_blist [ 4 ] ) ;
8909: LD_VAR 0 16
8913: PUSH
8914: LD_VAR 0 2
8918: ARRAY
8919: PPUSH
8920: LD_EXP 34
8924: PUSH
8925: LD_INT 1
8927: ARRAY
8928: PPUSH
8929: LD_EXP 34
8933: PUSH
8934: LD_INT 2
8936: ARRAY
8937: PPUSH
8938: LD_EXP 34
8942: PUSH
8943: LD_INT 3
8945: ARRAY
8946: PPUSH
8947: LD_EXP 34
8951: PUSH
8952: LD_INT 4
8954: ARRAY
8955: PPUSH
8956: CALL_OW 145
8960: GO 8854
8962: POP
8963: POP
// end else
8964: GO 9044
// for i = 1 to l_eng do
8966: LD_ADDR_VAR 0 2
8970: PUSH
8971: DOUBLE
8972: LD_INT 1
8974: DEC
8975: ST_TO_ADDR
8976: LD_VAR 0 16
8980: PUSH
8981: FOR_TO
8982: IFFALSE 9042
// if not IsInUnit ( l_eng [ i ] ) and not HasTask ( l_eng [ i ] ) then
8984: LD_VAR 0 16
8988: PUSH
8989: LD_VAR 0 2
8993: ARRAY
8994: PPUSH
8995: CALL_OW 310
8999: NOT
9000: PUSH
9001: LD_VAR 0 16
9005: PUSH
9006: LD_VAR 0 2
9010: ARRAY
9011: PPUSH
9012: CALL_OW 314
9016: NOT
9017: AND
9018: IFFALSE 9040
// ComEnterUnit ( l_eng [ i ] , l_depot ) ;
9020: LD_VAR 0 16
9024: PUSH
9025: LD_VAR 0 2
9029: ARRAY
9030: PPUSH
9031: LD_VAR 0 8
9035: PPUSH
9036: CALL_OW 120
9040: GO 8981
9042: POP
9043: POP
// end ; end ; if l_factory then
9044: LD_VAR 0 9
9048: IFFALSE 9448
// begin if FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) > 0 then
9050: LD_INT 22
9052: PUSH
9053: LD_INT 8
9055: PUSH
9056: EMPTY
9057: LIST
9058: LIST
9059: PUSH
9060: LD_INT 33
9062: PUSH
9063: LD_INT 2
9065: PUSH
9066: EMPTY
9067: LIST
9068: LIST
9069: PUSH
9070: LD_INT 3
9072: PUSH
9073: LD_INT 61
9075: PUSH
9076: EMPTY
9077: LIST
9078: PUSH
9079: EMPTY
9080: LIST
9081: LIST
9082: PUSH
9083: EMPTY
9084: LIST
9085: LIST
9086: LIST
9087: PPUSH
9088: CALL_OW 69
9092: PUSH
9093: LD_INT 0
9095: GREATER
9096: PUSH
9097: LD_INT 22
9099: PUSH
9100: LD_INT 8
9102: PUSH
9103: EMPTY
9104: LIST
9105: LIST
9106: PUSH
9107: LD_INT 34
9109: PUSH
9110: LD_INT 31
9112: PUSH
9113: EMPTY
9114: LIST
9115: LIST
9116: PUSH
9117: EMPTY
9118: LIST
9119: LIST
9120: PPUSH
9121: CALL_OW 69
9125: PUSH
9126: LD_INT 0
9128: GREATER
9129: AND
9130: IFFALSE 9250
// ComLinkTo ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) [ 1 ] , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) [ Rand ( 1 , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) ) ] ) ;
9132: LD_INT 22
9134: PUSH
9135: LD_INT 8
9137: PUSH
9138: EMPTY
9139: LIST
9140: LIST
9141: PUSH
9142: LD_INT 33
9144: PUSH
9145: LD_INT 2
9147: PUSH
9148: EMPTY
9149: LIST
9150: LIST
9151: PUSH
9152: LD_INT 3
9154: PUSH
9155: LD_INT 61
9157: PUSH
9158: EMPTY
9159: LIST
9160: PUSH
9161: EMPTY
9162: LIST
9163: LIST
9164: PUSH
9165: EMPTY
9166: LIST
9167: LIST
9168: LIST
9169: PPUSH
9170: CALL_OW 69
9174: PUSH
9175: LD_INT 1
9177: ARRAY
9178: PPUSH
9179: LD_INT 22
9181: PUSH
9182: LD_INT 8
9184: PUSH
9185: EMPTY
9186: LIST
9187: LIST
9188: PUSH
9189: LD_INT 34
9191: PUSH
9192: LD_INT 31
9194: PUSH
9195: EMPTY
9196: LIST
9197: LIST
9198: PUSH
9199: EMPTY
9200: LIST
9201: LIST
9202: PPUSH
9203: CALL_OW 69
9207: PUSH
9208: LD_INT 1
9210: PPUSH
9211: LD_INT 22
9213: PUSH
9214: LD_INT 8
9216: PUSH
9217: EMPTY
9218: LIST
9219: LIST
9220: PUSH
9221: LD_INT 34
9223: PUSH
9224: LD_INT 31
9226: PUSH
9227: EMPTY
9228: LIST
9229: LIST
9230: PUSH
9231: EMPTY
9232: LIST
9233: LIST
9234: PPUSH
9235: CALL_OW 69
9239: PPUSH
9240: CALL_OW 12
9244: ARRAY
9245: PPUSH
9246: CALL_OW 135
// if legion_vlist > 0 and BuildingStatus ( l_factory ) = bs_idle then
9250: LD_EXP 35
9254: PUSH
9255: LD_INT 0
9257: GREATER
9258: PUSH
9259: LD_VAR 0 9
9263: PPUSH
9264: CALL_OW 461
9268: PUSH
9269: LD_INT 2
9271: EQUAL
9272: AND
9273: IFFALSE 9358
// begin ComConstruct ( l_factory , legion_vlist [ 1 ] , legion_vlist [ 2 ] , legion_vlist [ 3 ] , legion_vlist [ 4 ] ) ;
9275: LD_VAR 0 9
9279: PPUSH
9280: LD_EXP 35
9284: PUSH
9285: LD_INT 1
9287: ARRAY
9288: PPUSH
9289: LD_EXP 35
9293: PUSH
9294: LD_INT 2
9296: ARRAY
9297: PPUSH
9298: LD_EXP 35
9302: PUSH
9303: LD_INT 3
9305: ARRAY
9306: PPUSH
9307: LD_EXP 35
9311: PUSH
9312: LD_INT 4
9314: ARRAY
9315: PPUSH
9316: CALL_OW 125
// for i = 1 to 4 do
9320: LD_ADDR_VAR 0 2
9324: PUSH
9325: DOUBLE
9326: LD_INT 1
9328: DEC
9329: ST_TO_ADDR
9330: LD_INT 4
9332: PUSH
9333: FOR_TO
9334: IFFALSE 9356
// legion_vlist := Delete ( legion_vlist , 1 ) ;
9336: LD_ADDR_EXP 35
9340: PUSH
9341: LD_EXP 35
9345: PPUSH
9346: LD_INT 1
9348: PPUSH
9349: CALL_OW 3
9353: ST_TO_ADDR
9354: GO 9333
9356: POP
9357: POP
// end ; if UnitFilter ( l_towers , [ f_bweapon , 0 ] ) > 0 and BuildingStatus ( l_factory ) = bs_idle then
9358: LD_VAR 0 11
9362: PPUSH
9363: LD_INT 35
9365: PUSH
9366: LD_INT 0
9368: PUSH
9369: EMPTY
9370: LIST
9371: LIST
9372: PPUSH
9373: CALL_OW 72
9377: PUSH
9378: LD_INT 0
9380: GREATER
9381: PUSH
9382: LD_VAR 0 9
9386: PPUSH
9387: CALL_OW 461
9391: PUSH
9392: LD_INT 2
9394: EQUAL
9395: AND
9396: IFFALSE 9448
// ComPlaceWeapon ( UnitFilter ( l_towers , [ f_bweapon , 0 ] ) [ 1 ] , [ ar_rocket_launcher , ar_gun ] [ Rand ( 1 , 2 ) ] ) ;
9398: LD_VAR 0 11
9402: PPUSH
9403: LD_INT 35
9405: PUSH
9406: LD_INT 0
9408: PUSH
9409: EMPTY
9410: LIST
9411: LIST
9412: PPUSH
9413: CALL_OW 72
9417: PUSH
9418: LD_INT 1
9420: ARRAY
9421: PPUSH
9422: LD_INT 28
9424: PUSH
9425: LD_INT 27
9427: PUSH
9428: EMPTY
9429: LIST
9430: LIST
9431: PUSH
9432: LD_INT 1
9434: PPUSH
9435: LD_INT 2
9437: PPUSH
9438: CALL_OW 12
9442: ARRAY
9443: PPUSH
9444: CALL_OW 148
// end ; if legion_enemy > 0 then
9448: LD_EXP 36
9452: PUSH
9453: LD_INT 0
9455: GREATER
9456: IFFALSE 10036
// begin if tick mod 11 11$00 = 0 then
9458: LD_OWVAR 1
9462: PUSH
9463: LD_INT 23100
9465: MOD
9466: PUSH
9467: LD_INT 0
9469: EQUAL
9470: IFFALSE 9720
// begin legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
9472: LD_ADDR_EXP 35
9476: PUSH
9477: LD_EXP 35
9481: PUSH
9482: LD_INT 13
9484: PUSH
9485: LD_INT 1
9487: PUSH
9488: LD_INT 2
9490: PUSH
9491: EMPTY
9492: LIST
9493: LIST
9494: LIST
9495: ADD
9496: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
9497: LD_ADDR_EXP 35
9501: PUSH
9502: LD_EXP 35
9506: PUSH
9507: LD_INT 28
9509: PUSH
9510: LD_INT 27
9512: PUSH
9513: LD_INT 29
9515: PUSH
9516: EMPTY
9517: LIST
9518: LIST
9519: LIST
9520: PUSH
9521: LD_INT 1
9523: PPUSH
9524: LD_INT 3
9526: PPUSH
9527: CALL_OW 12
9531: ARRAY
9532: ADD
9533: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
9534: LD_ADDR_EXP 35
9538: PUSH
9539: LD_EXP 35
9543: PUSH
9544: LD_INT 13
9546: PUSH
9547: LD_INT 1
9549: PUSH
9550: LD_INT 2
9552: PUSH
9553: EMPTY
9554: LIST
9555: LIST
9556: LIST
9557: ADD
9558: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
9559: LD_ADDR_EXP 35
9563: PUSH
9564: LD_EXP 35
9568: PUSH
9569: LD_INT 28
9571: PUSH
9572: LD_INT 27
9574: PUSH
9575: LD_INT 29
9577: PUSH
9578: EMPTY
9579: LIST
9580: LIST
9581: LIST
9582: PUSH
9583: LD_INT 1
9585: PPUSH
9586: LD_INT 3
9588: PPUSH
9589: CALL_OW 12
9593: ARRAY
9594: ADD
9595: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
9596: LD_ADDR_EXP 35
9600: PUSH
9601: LD_EXP 35
9605: PUSH
9606: LD_INT 13
9608: PUSH
9609: LD_INT 1
9611: PUSH
9612: LD_INT 2
9614: PUSH
9615: EMPTY
9616: LIST
9617: LIST
9618: LIST
9619: ADD
9620: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
9621: LD_ADDR_EXP 35
9625: PUSH
9626: LD_EXP 35
9630: PUSH
9631: LD_INT 28
9633: PUSH
9634: LD_INT 27
9636: PUSH
9637: LD_INT 29
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: LIST
9644: PUSH
9645: LD_INT 1
9647: PPUSH
9648: LD_INT 3
9650: PPUSH
9651: CALL_OW 12
9655: ARRAY
9656: ADD
9657: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
9658: LD_ADDR_EXP 35
9662: PUSH
9663: LD_EXP 35
9667: PUSH
9668: LD_INT 13
9670: PUSH
9671: LD_INT 1
9673: PUSH
9674: LD_INT 2
9676: PUSH
9677: EMPTY
9678: LIST
9679: LIST
9680: LIST
9681: ADD
9682: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
9683: LD_ADDR_EXP 35
9687: PUSH
9688: LD_EXP 35
9692: PUSH
9693: LD_INT 28
9695: PUSH
9696: LD_INT 27
9698: PUSH
9699: LD_INT 29
9701: PUSH
9702: EMPTY
9703: LIST
9704: LIST
9705: LIST
9706: PUSH
9707: LD_INT 1
9709: PPUSH
9710: LD_INT 3
9712: PPUSH
9713: CALL_OW 12
9717: ARRAY
9718: ADD
9719: ST_TO_ADDR
// end ; if legion_force >= 7 then
9720: LD_EXP 31
9724: PUSH
9725: LD_INT 7
9727: GREATEREQUAL
9728: IFFALSE 9911
// begin for i = 1 to legion_force do
9730: LD_ADDR_VAR 0 2
9734: PUSH
9735: DOUBLE
9736: LD_INT 1
9738: DEC
9739: ST_TO_ADDR
9740: LD_EXP 31
9744: PUSH
9745: FOR_TO
9746: IFFALSE 9909
// begin if not HasTask ( legion_force [ i ] ) and GetTag ( legion_force [ i ] ) <> 11 then
9748: LD_EXP 31
9752: PUSH
9753: LD_VAR 0 2
9757: ARRAY
9758: PPUSH
9759: CALL_OW 314
9763: NOT
9764: PUSH
9765: LD_EXP 31
9769: PUSH
9770: LD_VAR 0 2
9774: ARRAY
9775: PPUSH
9776: CALL_OW 110
9780: PUSH
9781: LD_INT 11
9783: NONEQUAL
9784: AND
9785: IFFALSE 9907
// begin case legion_enemy of 1 :
9787: LD_EXP 36
9791: PUSH
9792: LD_INT 1
9794: DOUBLE
9795: EQUAL
9796: IFTRUE 9800
9798: GO 9824
9800: POP
// ComMoveXY ( legion_force [ i ] , 142 , 144 ) ; 2 :
9801: LD_EXP 31
9805: PUSH
9806: LD_VAR 0 2
9810: ARRAY
9811: PPUSH
9812: LD_INT 142
9814: PPUSH
9815: LD_INT 144
9817: PPUSH
9818: CALL_OW 111
9822: GO 9889
9824: LD_INT 2
9826: DOUBLE
9827: EQUAL
9828: IFTRUE 9832
9830: GO 9856
9832: POP
// ComMoveXY ( legion_force [ i ] , 101 , 34 ) ; 7 :
9833: LD_EXP 31
9837: PUSH
9838: LD_VAR 0 2
9842: ARRAY
9843: PPUSH
9844: LD_INT 101
9846: PPUSH
9847: LD_INT 34
9849: PPUSH
9850: CALL_OW 111
9854: GO 9889
9856: LD_INT 7
9858: DOUBLE
9859: EQUAL
9860: IFTRUE 9864
9862: GO 9888
9864: POP
// ComMoveXY ( legion_force [ i ] , 173 , 127 ) ; end ;
9865: LD_EXP 31
9869: PUSH
9870: LD_VAR 0 2
9874: ARRAY
9875: PPUSH
9876: LD_INT 173
9878: PPUSH
9879: LD_INT 127
9881: PPUSH
9882: CALL_OW 111
9886: GO 9889
9888: POP
// SetTag ( legion_force [ i ] , 11 ) ;
9889: LD_EXP 31
9893: PUSH
9894: LD_VAR 0 2
9898: ARRAY
9899: PPUSH
9900: LD_INT 11
9902: PPUSH
9903: CALL_OW 109
// end ; end ;
9907: GO 9745
9909: POP
9910: POP
// end ; if legion_force then
9911: LD_EXP 31
9915: IFFALSE 10036
// begin tmp := legion_force ;
9917: LD_ADDR_VAR 0 3
9921: PUSH
9922: LD_EXP 31
9926: ST_TO_ADDR
// for i = 1 to tmp do
9927: LD_ADDR_VAR 0 2
9931: PUSH
9932: DOUBLE
9933: LD_INT 1
9935: DEC
9936: ST_TO_ADDR
9937: LD_VAR 0 3
9941: PUSH
9942: FOR_TO
9943: IFFALSE 10034
// if not HasTask ( tmp [ i ] ) and GetTag ( legion_force [ i ] ) = 11 then
9945: LD_VAR 0 3
9949: PUSH
9950: LD_VAR 0 2
9954: ARRAY
9955: PPUSH
9956: CALL_OW 314
9960: NOT
9961: PUSH
9962: LD_EXP 31
9966: PUSH
9967: LD_VAR 0 2
9971: ARRAY
9972: PPUSH
9973: CALL_OW 110
9977: PUSH
9978: LD_INT 11
9980: EQUAL
9981: AND
9982: IFFALSE 10032
// ComAttackUnit ( tmp [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , legion_enemy ] ) , tmp [ i ] ) ) ;
9984: LD_VAR 0 3
9988: PUSH
9989: LD_VAR 0 2
9993: ARRAY
9994: PPUSH
9995: LD_INT 22
9997: PUSH
9998: LD_EXP 36
10002: PUSH
10003: EMPTY
10004: LIST
10005: LIST
10006: PPUSH
10007: CALL_OW 69
10011: PPUSH
10012: LD_VAR 0 3
10016: PUSH
10017: LD_VAR 0 2
10021: ARRAY
10022: PPUSH
10023: CALL_OW 74
10027: PPUSH
10028: CALL_OW 115
10032: GO 9942
10034: POP
10035: POP
// end ; end ; p := 1 ;
10036: LD_ADDR_VAR 0 6
10040: PUSH
10041: LD_INT 1
10043: ST_TO_ADDR
// for i = 1 to 24 do
10044: LD_ADDR_VAR 0 2
10048: PUSH
10049: DOUBLE
10050: LD_INT 1
10052: DEC
10053: ST_TO_ADDR
10054: LD_INT 24
10056: PUSH
10057: FOR_TO
10058: IFFALSE 10188
// begin if HexInfo ( legion_mines [ p ] , legion_mines [ p + 1 ] ) > 0 then
10060: LD_EXP 33
10064: PUSH
10065: LD_VAR 0 6
10069: ARRAY
10070: PPUSH
10071: LD_EXP 33
10075: PUSH
10076: LD_VAR 0 6
10080: PUSH
10081: LD_INT 1
10083: PLUS
10084: ARRAY
10085: PPUSH
10086: CALL_OW 428
10090: PUSH
10091: LD_INT 0
10093: GREATER
10094: IFFALSE 10172
// if GetSide ( HexInfo ( legion_mines [ p ] , legion_mines [ p + 1 ] ) ) = legion_enemy then
10096: LD_EXP 33
10100: PUSH
10101: LD_VAR 0 6
10105: ARRAY
10106: PPUSH
10107: LD_EXP 33
10111: PUSH
10112: LD_VAR 0 6
10116: PUSH
10117: LD_INT 1
10119: PLUS
10120: ARRAY
10121: PPUSH
10122: CALL_OW 428
10126: PPUSH
10127: CALL_OW 255
10131: PUSH
10132: LD_EXP 36
10136: EQUAL
10137: IFFALSE 10172
// LaunchMineAtPos ( legion_mines [ p ] , legion_mines [ p + 1 ] , 8 ) ;
10139: LD_EXP 33
10143: PUSH
10144: LD_VAR 0 6
10148: ARRAY
10149: PPUSH
10150: LD_EXP 33
10154: PUSH
10155: LD_VAR 0 6
10159: PUSH
10160: LD_INT 1
10162: PLUS
10163: ARRAY
10164: PPUSH
10165: LD_INT 8
10167: PPUSH
10168: CALL_OW 456
// p := p + 2 ;
10172: LD_ADDR_VAR 0 6
10176: PUSH
10177: LD_VAR 0 6
10181: PUSH
10182: LD_INT 2
10184: PLUS
10185: ST_TO_ADDR
// end ;
10186: GO 10057
10188: POP
10189: POP
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_cargo_bay ] ] ) then
10190: LD_INT 22
10192: PUSH
10193: LD_INT 8
10195: PUSH
10196: EMPTY
10197: LIST
10198: LIST
10199: PUSH
10200: LD_INT 34
10202: PUSH
10203: LD_INT 32
10205: PUSH
10206: EMPTY
10207: LIST
10208: LIST
10209: PUSH
10210: EMPTY
10211: LIST
10212: LIST
10213: PPUSH
10214: CALL_OW 69
10218: IFFALSE 10332
// begin if l_cargo = false then
10220: LD_VAR 0 17
10224: PUSH
10225: LD_INT 0
10227: EQUAL
10228: IFFALSE 10264
// l_cargo := FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_cargo_bay ] ] ) ;
10230: LD_ADDR_VAR 0 17
10234: PUSH
10235: LD_INT 22
10237: PUSH
10238: LD_INT 8
10240: PUSH
10241: EMPTY
10242: LIST
10243: LIST
10244: PUSH
10245: LD_INT 34
10247: PUSH
10248: LD_INT 32
10250: PUSH
10251: EMPTY
10252: LIST
10253: LIST
10254: PUSH
10255: EMPTY
10256: LIST
10257: LIST
10258: PPUSH
10259: CALL_OW 69
10263: ST_TO_ADDR
// if l_cargo then
10264: LD_VAR 0 17
10268: IFFALSE 10332
// begin cr := GetListOfCratesInArea ( legion_crates ) ;
10270: LD_ADDR_VAR 0 7
10274: PUSH
10275: LD_INT 14
10277: PPUSH
10278: CALL_OW 435
10282: ST_TO_ADDR
// if cr > 0 then
10283: LD_VAR 0 7
10287: PUSH
10288: LD_INT 0
10290: GREATER
10291: IFFALSE 10332
// if not HasTask ( l_cargo ) then
10293: LD_VAR 0 17
10297: PPUSH
10298: CALL_OW 314
10302: NOT
10303: IFFALSE 10332
// ComCollect ( l_cargo , cr [ 1 ] , cr [ 2 ] ) ;
10305: LD_VAR 0 17
10309: PPUSH
10310: LD_VAR 0 7
10314: PUSH
10315: LD_INT 1
10317: ARRAY
10318: PPUSH
10319: LD_VAR 0 7
10323: PUSH
10324: LD_INT 2
10326: ARRAY
10327: PPUSH
10328: CALL_OW 117
// end ; end ; if tick = [ 25 25$00 , 22 22$00 , 20 20$00 ] [ Difficulty ] and FindArtifact ( 1 ) [ 1 ] = 112 and FindArtifact ( 1 ) [ 2 ] = 67 then
10332: LD_OWVAR 1
10336: PUSH
10337: LD_INT 52500
10339: PUSH
10340: LD_INT 46200
10342: PUSH
10343: LD_INT 42000
10345: PUSH
10346: EMPTY
10347: LIST
10348: LIST
10349: LIST
10350: PUSH
10351: LD_OWVAR 67
10355: ARRAY
10356: EQUAL
10357: PUSH
10358: LD_INT 1
10360: PPUSH
10361: CALL_OW 469
10365: PUSH
10366: LD_INT 1
10368: ARRAY
10369: PUSH
10370: LD_INT 112
10372: EQUAL
10373: AND
10374: PUSH
10375: LD_INT 1
10377: PPUSH
10378: CALL_OW 469
10382: PUSH
10383: LD_INT 2
10385: ARRAY
10386: PUSH
10387: LD_INT 67
10389: EQUAL
10390: AND
10391: IFFALSE 10484
// begin un := l_eng [ 1 ] ;
10393: LD_ADDR_VAR 0 1
10397: PUSH
10398: LD_VAR 0 16
10402: PUSH
10403: LD_INT 1
10405: ARRAY
10406: ST_TO_ADDR
// if IsInUnit ( un ) then
10407: LD_VAR 0 1
10411: PPUSH
10412: CALL_OW 310
10416: IFFALSE 10427
// ComExitBuilding ( un ) ;
10418: LD_VAR 0 1
10422: PPUSH
10423: CALL_OW 122
// AddComCollect ( un , FindArtifact ( 1 ) [ 1 ] , FindArtifact ( 1 ) [ 2 ] ) ;
10427: LD_VAR 0 1
10431: PPUSH
10432: LD_INT 1
10434: PPUSH
10435: CALL_OW 469
10439: PUSH
10440: LD_INT 1
10442: ARRAY
10443: PPUSH
10444: LD_INT 1
10446: PPUSH
10447: CALL_OW 469
10451: PUSH
10452: LD_INT 2
10454: ARRAY
10455: PPUSH
10456: CALL_OW 177
// AddComMoveXY ( un , 207 , 123 ) ;
10460: LD_VAR 0 1
10464: PPUSH
10465: LD_INT 207
10467: PPUSH
10468: LD_INT 123
10470: PPUSH
10471: CALL_OW 171
// AddComUnload ( un ) ;
10475: LD_VAR 0 1
10479: PPUSH
10480: CALL_OW 219
// end ; end ;
10484: PPOPN 17
10486: END
// every 9 9$00 trigger difficulty > 1 do var i , sci , sib , p ;
10487: LD_OWVAR 67
10491: PUSH
10492: LD_INT 1
10494: GREATER
10495: IFFALSE 10700
10497: GO 10499
10499: DISABLE
10500: LD_INT 0
10502: PPUSH
10503: PPUSH
10504: PPUSH
10505: PPUSH
// begin Wait ( Rand ( 0 0$01 , 6 6$01 ) ) ;
10506: LD_INT 35
10508: PPUSH
10509: LD_INT 12635
10511: PPUSH
10512: CALL_OW 12
10516: PPUSH
10517: CALL_OW 67
// sci := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 4 ] ] ) ;
10521: LD_ADDR_VAR 0 2
10525: PUSH
10526: LD_INT 22
10528: PUSH
10529: LD_INT 8
10531: PUSH
10532: EMPTY
10533: LIST
10534: LIST
10535: PUSH
10536: LD_INT 25
10538: PUSH
10539: LD_INT 4
10541: PUSH
10542: EMPTY
10543: LIST
10544: LIST
10545: PUSH
10546: EMPTY
10547: LIST
10548: LIST
10549: PPUSH
10550: CALL_OW 69
10554: ST_TO_ADDR
// p := 1 ;
10555: LD_ADDR_VAR 0 4
10559: PUSH
10560: LD_INT 1
10562: ST_TO_ADDR
// sib := [ 116 , 139 , 69 , 13 ] ;
10563: LD_ADDR_VAR 0 3
10567: PUSH
10568: LD_INT 116
10570: PUSH
10571: LD_INT 139
10573: PUSH
10574: LD_INT 69
10576: PUSH
10577: LD_INT 13
10579: PUSH
10580: EMPTY
10581: LIST
10582: LIST
10583: LIST
10584: LIST
10585: ST_TO_ADDR
// for i = 1 to 2 do
10586: LD_ADDR_VAR 0 1
10590: PUSH
10591: DOUBLE
10592: LD_INT 1
10594: DEC
10595: ST_TO_ADDR
10596: LD_INT 2
10598: PUSH
10599: FOR_TO
10600: IFFALSE 10698
// begin if IsInUnit ( sci [ i ] ) then
10602: LD_VAR 0 2
10606: PUSH
10607: LD_VAR 0 1
10611: ARRAY
10612: PPUSH
10613: CALL_OW 310
10617: IFFALSE 10634
// ComExitBuilding ( sci [ i ] ) ;
10619: LD_VAR 0 2
10623: PUSH
10624: LD_VAR 0 1
10628: ARRAY
10629: PPUSH
10630: CALL_OW 122
// Wait ( 0 0$03 ) ;
10634: LD_INT 105
10636: PPUSH
10637: CALL_OW 67
// ComContaminate ( sci [ i ] , sib [ p ] , sib [ p + 1 ] ) ;
10641: LD_VAR 0 2
10645: PUSH
10646: LD_VAR 0 1
10650: ARRAY
10651: PPUSH
10652: LD_VAR 0 3
10656: PUSH
10657: LD_VAR 0 4
10661: ARRAY
10662: PPUSH
10663: LD_VAR 0 3
10667: PUSH
10668: LD_VAR 0 4
10672: PUSH
10673: LD_INT 1
10675: PLUS
10676: ARRAY
10677: PPUSH
10678: CALL_OW 158
// p := p + 2 ;
10682: LD_ADDR_VAR 0 4
10686: PUSH
10687: LD_VAR 0 4
10691: PUSH
10692: LD_INT 2
10694: PLUS
10695: ST_TO_ADDR
// end ;
10696: GO 10599
10698: POP
10699: POP
// end ;
10700: PPOPN 4
10702: END
// every 3 3$30 trigger GetListOfCratesInArea ( legion_crates ) < 20 do
10703: LD_INT 14
10705: PPUSH
10706: CALL_OW 435
10710: PUSH
10711: LD_INT 20
10713: LESS
10714: IFFALSE 10741
10716: GO 10718
10718: DISABLE
// begin enable ;
10719: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , legion_crates , true ) ;
10720: LD_INT 1
10722: PPUSH
10723: LD_INT 5
10725: PPUSH
10726: CALL_OW 12
10730: PPUSH
10731: LD_INT 14
10733: PPUSH
10734: LD_INT 1
10736: PPUSH
10737: CALL_OW 55
// end ; end_of_file
10741: END
// export function Action ; var un , gamemode , speaker ; begin
10742: LD_INT 0
10744: PPUSH
10745: PPUSH
10746: PPUSH
10747: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
10748: LD_ADDR_OWVAR 67
10752: PUSH
10753: LD_INT 0
10755: PPUSH
10756: CALL_OW 426
10760: ST_TO_ADDR
// gamemode := GetMultiplayerSetting ( 1 ) ;
10761: LD_ADDR_VAR 0 3
10765: PUSH
10766: LD_INT 1
10768: PPUSH
10769: CALL_OW 426
10773: ST_TO_ADDR
// if gamemode = 1 then
10774: LD_VAR 0 3
10778: PUSH
10779: LD_INT 1
10781: EQUAL
10782: IFFALSE 10806
// begin your_side := 1 ;
10784: LD_ADDR_OWVAR 2
10788: PUSH
10789: LD_INT 1
10791: ST_TO_ADDR
// legion_enemy := 1 ;
10792: LD_ADDR_EXP 36
10796: PUSH
10797: LD_INT 1
10799: ST_TO_ADDR
// PrepareAmerican ;
10800: CALL 221 0 0
// end else
10804: GO 10858
// if gamemode = 2 then
10806: LD_VAR 0 3
10810: PUSH
10811: LD_INT 2
10813: EQUAL
10814: IFFALSE 10838
// begin your_side := 2 ;
10816: LD_ADDR_OWVAR 2
10820: PUSH
10821: LD_INT 2
10823: ST_TO_ADDR
// legion_enemy := 2 ;
10824: LD_ADDR_EXP 36
10828: PUSH
10829: LD_INT 2
10831: ST_TO_ADDR
// PrepareArabian ;
10832: CALL 18169 0 0
// end else
10836: GO 10858
// begin your_side := 7 ;
10838: LD_ADDR_OWVAR 2
10842: PUSH
10843: LD_INT 7
10845: ST_TO_ADDR
// legion_enemy := 7 ;
10846: LD_ADDR_EXP 36
10850: PUSH
10851: LD_INT 7
10853: ST_TO_ADDR
// PrepareAlliance ;
10854: CALL 15580 0 0
// end ; if your_side = 1 then
10858: LD_OWVAR 2
10862: PUSH
10863: LD_INT 1
10865: EQUAL
10866: IFFALSE 11344
// begin case Query ( QVul4 ) of 1 :
10868: LD_STRING QVul4
10870: PPUSH
10871: CALL_OW 97
10875: PUSH
10876: LD_INT 1
10878: DOUBLE
10879: EQUAL
10880: IFTRUE 10884
10882: GO 10887
10884: POP
// ; end ;
10885: GO 10888
10887: POP
// InGameOn ;
10888: CALL_OW 8
// CenterNowOnXY ( 8 , 5 ) ;
10892: LD_INT 8
10894: PPUSH
10895: LD_INT 5
10897: PPUSH
10898: CALL_OW 86
// uc_side := 4 ;
10902: LD_ADDR_OWVAR 20
10906: PUSH
10907: LD_INT 4
10909: ST_TO_ADDR
// uc_nation := 1 ;
10910: LD_ADDR_OWVAR 21
10914: PUSH
10915: LD_INT 1
10917: ST_TO_ADDR
// hc_importance := 0 ;
10918: LD_ADDR_OWVAR 32
10922: PUSH
10923: LD_INT 0
10925: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , us_skill ) ;
10926: LD_INT 1
10928: PPUSH
10929: LD_INT 3
10931: PPUSH
10932: LD_EXP 21
10936: PPUSH
10937: CALL_OW 380
// un := CreateHuman ;
10941: LD_ADDR_VAR 0 2
10945: PUSH
10946: CALL_OW 44
10950: ST_TO_ADDR
// PlaceUnitXY ( un , 12 , 9 , false ) ;
10951: LD_VAR 0 2
10955: PPUSH
10956: LD_INT 12
10958: PPUSH
10959: LD_INT 9
10961: PPUSH
10962: LD_INT 0
10964: PPUSH
10965: CALL_OW 48
// hc_name := Stuart Carey ;
10969: LD_ADDR_OWVAR 26
10973: PUSH
10974: LD_STRING Stuart Carey
10976: ST_TO_ADDR
// hc_class := 1 ;
10977: LD_ADDR_OWVAR 28
10981: PUSH
10982: LD_INT 1
10984: ST_TO_ADDR
// hc_gallery := vulcano ;
10985: LD_ADDR_OWVAR 33
10989: PUSH
10990: LD_STRING vulcano
10992: ST_TO_ADDR
// hc_face_number := 1 ;
10993: LD_ADDR_OWVAR 34
10997: PUSH
10998: LD_INT 1
11000: ST_TO_ADDR
// us_guy := CreateHuman ;
11001: LD_ADDR_EXP 22
11005: PUSH
11006: CALL_OW 44
11010: ST_TO_ADDR
// InitHc ;
11011: CALL_OW 19
// if rand ( 0 , 1 ) then
11015: LD_INT 0
11017: PPUSH
11018: LD_INT 1
11020: PPUSH
11021: CALL_OW 12
11025: IFFALSE 11042
// PrepareHuman ( sex_male , 3 , 6 ) else
11027: LD_INT 1
11029: PPUSH
11030: LD_INT 3
11032: PPUSH
11033: LD_INT 6
11035: PPUSH
11036: CALL_OW 380
11040: GO 11055
// PrepareHuman ( sex_female , 4 , 8 ) ;
11042: LD_INT 2
11044: PPUSH
11045: LD_INT 4
11047: PPUSH
11048: LD_INT 8
11050: PPUSH
11051: CALL_OW 380
// ComTurnUnit ( un , us_commander ) ;
11055: LD_VAR 0 2
11059: PPUSH
11060: LD_EXP 19
11064: PPUSH
11065: CALL_OW 119
// ComTurnUnit ( us_commander , un ) ;
11069: LD_EXP 19
11073: PPUSH
11074: LD_VAR 0 2
11078: PPUSH
11079: CALL_OW 119
// if GetSex ( un ) = sex_male then
11083: LD_VAR 0 2
11087: PPUSH
11088: CALL_OW 258
11092: PUSH
11093: LD_INT 1
11095: EQUAL
11096: IFFALSE 11179
// begin Say ( un , VD-un1 ) ;
11098: LD_VAR 0 2
11102: PPUSH
11103: LD_STRING VD-un1
11105: PPUSH
11106: CALL_OW 88
// Say ( us_commander , VDc-1 ) ;
11110: LD_EXP 19
11114: PPUSH
11115: LD_STRING VDc-1
11117: PPUSH
11118: CALL_OW 88
// Say ( un , VD-un2 ) ;
11122: LD_VAR 0 2
11126: PPUSH
11127: LD_STRING VD-un2
11129: PPUSH
11130: CALL_OW 88
// Say ( us_commander , VDc-2 ) ;
11134: LD_EXP 19
11138: PPUSH
11139: LD_STRING VDc-2
11141: PPUSH
11142: CALL_OW 88
// Say ( un , VD-un3 ) ;
11146: LD_VAR 0 2
11150: PPUSH
11151: LD_STRING VD-un3
11153: PPUSH
11154: CALL_OW 88
// wait ( 0 0$0.2 ) ;
11158: LD_INT 7
11160: PPUSH
11161: CALL_OW 67
// Say ( un , VD-un4 ) ;
11165: LD_VAR 0 2
11169: PPUSH
11170: LD_STRING VD-un4
11172: PPUSH
11173: CALL_OW 88
// end else
11177: GO 11258
// begin Say ( un , VD-unf1 ) ;
11179: LD_VAR 0 2
11183: PPUSH
11184: LD_STRING VD-unf1
11186: PPUSH
11187: CALL_OW 88
// Say ( us_commander , VDc-1 ) ;
11191: LD_EXP 19
11195: PPUSH
11196: LD_STRING VDc-1
11198: PPUSH
11199: CALL_OW 88
// Say ( un , VD-unf2 ) ;
11203: LD_VAR 0 2
11207: PPUSH
11208: LD_STRING VD-unf2
11210: PPUSH
11211: CALL_OW 88
// Say ( us_commander , VDc-2 ) ;
11215: LD_EXP 19
11219: PPUSH
11220: LD_STRING VDc-2
11222: PPUSH
11223: CALL_OW 88
// Say ( un , VD-unf3 ) ;
11227: LD_VAR 0 2
11231: PPUSH
11232: LD_STRING VD-unf3
11234: PPUSH
11235: CALL_OW 88
// wait ( 0 0$0.2 ) ;
11239: LD_INT 7
11241: PPUSH
11242: CALL_OW 67
// Say ( un , VD-unf4 ) ;
11246: LD_VAR 0 2
11250: PPUSH
11251: LD_STRING VD-unf4
11253: PPUSH
11254: CALL_OW 88
// end ; ComMoveXY ( un , 2 , 2 ) ;
11258: LD_VAR 0 2
11262: PPUSH
11263: LD_INT 2
11265: PPUSH
11266: LD_INT 2
11268: PPUSH
11269: CALL_OW 111
// Say ( us_commander , VDc-3 ) ;
11273: LD_EXP 19
11277: PPUSH
11278: LD_STRING VDc-3
11280: PPUSH
11281: CALL_OW 88
// InGameOff ;
11285: CALL_OW 9
// ChangeMissionObjectives ( CVulc1 ) ;
11289: LD_STRING CVulc1
11291: PPUSH
11292: CALL_OW 337
// repeat Wait ( 0 0$01 ) ;
11296: LD_INT 35
11298: PPUSH
11299: CALL_OW 67
// until GetX ( un ) = 2 and GetY ( un ) = 2 ;
11303: LD_VAR 0 2
11307: PPUSH
11308: CALL_OW 250
11312: PUSH
11313: LD_INT 2
11315: EQUAL
11316: PUSH
11317: LD_VAR 0 2
11321: PPUSH
11322: CALL_OW 251
11326: PUSH
11327: LD_INT 2
11329: EQUAL
11330: AND
11331: IFFALSE 11296
// RemoveUnit ( un ) ;
11333: LD_VAR 0 2
11337: PPUSH
11338: CALL_OW 64
// end else
11342: GO 11721
// if your_side = 2 then
11344: LD_OWVAR 2
11348: PUSH
11349: LD_INT 2
11351: EQUAL
11352: IFFALSE 11568
// begin CenterNowOnUnits ( player_commander ) ;
11354: LD_EXP 10
11358: PPUSH
11359: CALL_OW 87
// speaker := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff ar_commander ;
11363: LD_ADDR_VAR 0 4
11367: PUSH
11368: LD_INT 22
11370: PUSH
11371: LD_INT 2
11373: PUSH
11374: EMPTY
11375: LIST
11376: LIST
11377: PUSH
11378: LD_INT 21
11380: PUSH
11381: LD_INT 1
11383: PUSH
11384: EMPTY
11385: LIST
11386: LIST
11387: PUSH
11388: EMPTY
11389: LIST
11390: LIST
11391: PPUSH
11392: CALL_OW 69
11396: PUSH
11397: LD_EXP 51
11401: DIFF
11402: ST_TO_ADDR
// if speaker then
11403: LD_VAR 0 4
11407: IFFALSE 11559
// begin InGameOn ;
11409: CALL_OW 8
// Say ( ar_commander , VSd-1 ) ;
11413: LD_EXP 51
11417: PPUSH
11418: LD_STRING VSd-1
11420: PPUSH
11421: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
11425: LD_VAR 0 4
11429: PUSH
11430: LD_INT 1
11432: ARRAY
11433: PPUSH
11434: CALL_OW 258
11438: PUSH
11439: LD_INT 1
11441: EQUAL
11442: IFFALSE 11462
// Say ( speaker [ 1 ] , VAd-1 ) else
11444: LD_VAR 0 4
11448: PUSH
11449: LD_INT 1
11451: ARRAY
11452: PPUSH
11453: LD_STRING VAd-1
11455: PPUSH
11456: CALL_OW 88
11460: GO 11478
// Say ( speaker [ 1 ] , VAfd-1 ) ;
11462: LD_VAR 0 4
11466: PUSH
11467: LD_INT 1
11469: ARRAY
11470: PPUSH
11471: LD_STRING VAfd-1
11473: PPUSH
11474: CALL_OW 88
// Say ( ar_commander , VSd-2 ) ;
11478: LD_EXP 51
11482: PPUSH
11483: LD_STRING VSd-2
11485: PPUSH
11486: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
11490: LD_VAR 0 4
11494: PUSH
11495: LD_INT 1
11497: ARRAY
11498: PPUSH
11499: CALL_OW 258
11503: PUSH
11504: LD_INT 1
11506: EQUAL
11507: IFFALSE 11527
// Say ( speaker [ 1 ] , VAd-2 ) else
11509: LD_VAR 0 4
11513: PUSH
11514: LD_INT 1
11516: ARRAY
11517: PPUSH
11518: LD_STRING VAd-2
11520: PPUSH
11521: CALL_OW 88
11525: GO 11543
// Say ( speaker [ 1 ] , VAfd-2 ) ;
11527: LD_VAR 0 4
11531: PUSH
11532: LD_INT 1
11534: ARRAY
11535: PPUSH
11536: LD_STRING VAfd-2
11538: PPUSH
11539: CALL_OW 88
// Say ( ar_commander , VSd-3 ) ;
11543: LD_EXP 51
11547: PPUSH
11548: LD_STRING VSd-3
11550: PPUSH
11551: CALL_OW 88
// InGameOff ;
11555: CALL_OW 9
// end ; ChangeMissionObjectives ( CVulc5 ) ;
11559: LD_STRING CVulc5
11561: PPUSH
11562: CALL_OW 337
// end else
11566: GO 11721
// if your_side = 7 then
11568: LD_OWVAR 2
11572: PUSH
11573: LD_INT 7
11575: EQUAL
11576: IFFALSE 11721
// begin speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) diff al_commander ;
11578: LD_ADDR_VAR 0 4
11582: PUSH
11583: LD_INT 22
11585: PUSH
11586: LD_INT 7
11588: PUSH
11589: EMPTY
11590: LIST
11591: LIST
11592: PUSH
11593: LD_INT 21
11595: PUSH
11596: LD_INT 1
11598: PUSH
11599: EMPTY
11600: LIST
11601: LIST
11602: PUSH
11603: EMPTY
11604: LIST
11605: LIST
11606: PPUSH
11607: CALL_OW 69
11611: PUSH
11612: LD_EXP 37
11616: DIFF
11617: ST_TO_ADDR
// if speaker then
11618: LD_VAR 0 4
11622: IFFALSE 11714
// begin CenterNowOnUnits ( al_commander ) ;
11624: LD_EXP 37
11628: PPUSH
11629: CALL_OW 87
// InGameOn ;
11633: CALL_OW 8
// Say ( al_commander , VPd-1 ) ;
11637: LD_EXP 37
11641: PPUSH
11642: LD_STRING VPd-1
11644: PPUSH
11645: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) then
11649: LD_VAR 0 4
11653: PUSH
11654: LD_INT 1
11656: ARRAY
11657: PPUSH
11658: CALL_OW 258
11662: IFFALSE 11682
// Say ( speaker [ 1 ] , VPpd-1 ) else
11664: LD_VAR 0 4
11668: PUSH
11669: LD_INT 1
11671: ARRAY
11672: PPUSH
11673: LD_STRING VPpd-1
11675: PPUSH
11676: CALL_OW 88
11680: GO 11698
// Say ( speaker [ 1 ] , VPpdf-1 ) ;
11682: LD_VAR 0 4
11686: PUSH
11687: LD_INT 1
11689: ARRAY
11690: PPUSH
11691: LD_STRING VPpdf-1
11693: PPUSH
11694: CALL_OW 88
// Say ( al_commander , VPd-2 ) ;
11698: LD_EXP 37
11702: PPUSH
11703: LD_STRING VPd-2
11705: PPUSH
11706: CALL_OW 88
// InGameOff ;
11710: CALL_OW 9
// end ; ChangeMissionObjectives ( CVulc7 ) ;
11714: LD_STRING CVulc7
11716: PPUSH
11717: CALL_OW 337
// end ; SaveForQuickRestart ;
11721: CALL_OW 22
// end ;
11725: LD_VAR 0 1
11729: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) do
11730: LD_INT 22
11732: PUSH
11733: LD_INT 2
11735: PUSH
11736: EMPTY
11737: LIST
11738: LIST
11739: PUSH
11740: LD_INT 30
11742: PUSH
11743: LD_INT 3
11745: PUSH
11746: EMPTY
11747: LIST
11748: LIST
11749: PUSH
11750: EMPTY
11751: LIST
11752: LIST
11753: PPUSH
11754: CALL_OW 69
11758: IFFALSE 11802
11760: GO 11762
11762: DISABLE
// begin ChangeMissionObjectives ( CVulc6 ) ;
11763: LD_STRING CVulc6
11765: PPUSH
11766: CALL_OW 337
// Wait ( [ 25 25$00 , 22 22$30 , 20 20$00 ] [ Difficulty ] ) ;
11770: LD_INT 52500
11772: PUSH
11773: LD_INT 47250
11775: PUSH
11776: LD_INT 42000
11778: PUSH
11779: EMPTY
11780: LIST
11781: LIST
11782: LIST
11783: PUSH
11784: LD_OWVAR 67
11788: ARRAY
11789: PPUSH
11790: CALL_OW 67
// ru_can_attack := true ;
11794: LD_ADDR_EXP 3
11798: PUSH
11799: LD_INT 1
11801: ST_TO_ADDR
// end ;
11802: END
// every 0 0$01 trigger GetSide ( us_depot ) = 1 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_warehouse ] ] ] ) do var speaker ;
11803: LD_INT 50
11805: PPUSH
11806: CALL_OW 255
11810: PUSH
11811: LD_INT 1
11813: EQUAL
11814: PUSH
11815: LD_INT 22
11817: PUSH
11818: LD_INT 1
11820: PUSH
11821: EMPTY
11822: LIST
11823: LIST
11824: PUSH
11825: LD_INT 2
11827: PUSH
11828: LD_INT 30
11830: PUSH
11831: LD_INT 3
11833: PUSH
11834: EMPTY
11835: LIST
11836: LIST
11837: PUSH
11838: LD_INT 30
11840: PUSH
11841: LD_INT 1
11843: PUSH
11844: EMPTY
11845: LIST
11846: LIST
11847: PUSH
11848: EMPTY
11849: LIST
11850: LIST
11851: LIST
11852: PUSH
11853: EMPTY
11854: LIST
11855: LIST
11856: PPUSH
11857: CALL_OW 69
11861: OR
11862: IFFALSE 12096
11864: GO 11866
11866: DISABLE
11867: LD_INT 0
11869: PPUSH
// begin ChangeMissionObjectives ( CVulc2 ) ;
11870: LD_STRING CVulc2
11872: PPUSH
11873: CALL_OW 337
// speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) diff us_commander ;
11877: LD_ADDR_VAR 0 1
11881: PUSH
11882: LD_INT 22
11884: PUSH
11885: LD_INT 1
11887: PUSH
11888: EMPTY
11889: LIST
11890: LIST
11891: PUSH
11892: LD_INT 25
11894: PUSH
11895: LD_INT 2
11897: PUSH
11898: EMPTY
11899: LIST
11900: LIST
11901: PUSH
11902: EMPTY
11903: LIST
11904: LIST
11905: PPUSH
11906: CALL_OW 69
11910: PUSH
11911: LD_EXP 19
11915: DIFF
11916: ST_TO_ADDR
// DialogueOn ;
11917: CALL_OW 6
// DWait ( 0 0$0.3 ) ;
11921: LD_INT 10
11923: PPUSH
11924: CALL_OW 68
// if GetSex ( speaker [ 1 ] ) = sex_male then
11928: LD_VAR 0 1
11932: PUSH
11933: LD_INT 1
11935: ARRAY
11936: PPUSH
11937: CALL_OW 258
11941: PUSH
11942: LD_INT 1
11944: EQUAL
11945: IFFALSE 11965
// Say ( speaker [ 1 ] , VDb-1 ) else
11947: LD_VAR 0 1
11951: PUSH
11952: LD_INT 1
11954: ARRAY
11955: PPUSH
11956: LD_STRING VDb-1
11958: PPUSH
11959: CALL_OW 88
11963: GO 11981
// Say ( speaker [ 1 ] , VDbf-1 ) ;
11965: LD_VAR 0 1
11969: PUSH
11970: LD_INT 1
11972: ARRAY
11973: PPUSH
11974: LD_STRING VDbf-1
11976: PPUSH
11977: CALL_OW 88
// DWait ( 0 0$0.3 ) ;
11981: LD_INT 10
11983: PPUSH
11984: CALL_OW 68
// if GetSex ( speaker [ 1 ] ) = sex_male then
11988: LD_VAR 0 1
11992: PUSH
11993: LD_INT 1
11995: ARRAY
11996: PPUSH
11997: CALL_OW 258
12001: PUSH
12002: LD_INT 1
12004: EQUAL
12005: IFFALSE 12025
// Say ( speaker [ 1 ] , VDb-2 ) else
12007: LD_VAR 0 1
12011: PUSH
12012: LD_INT 1
12014: ARRAY
12015: PPUSH
12016: LD_STRING VDb-2
12018: PPUSH
12019: CALL_OW 88
12023: GO 12041
// Say ( speaker [ 1 ] , VDbf-2 ) ;
12025: LD_VAR 0 1
12029: PUSH
12030: LD_INT 1
12032: ARRAY
12033: PPUSH
12034: LD_STRING VDbf-2
12036: PPUSH
12037: CALL_OW 88
// DWait ( 0 0$01 ) ;
12041: LD_INT 35
12043: PPUSH
12044: CALL_OW 68
// Say ( us_commander , VDb-com1 ) ;
12048: LD_EXP 19
12052: PPUSH
12053: LD_STRING VDb-com1
12055: PPUSH
12056: CALL_OW 88
// DialogueOff ;
12060: CALL_OW 7
// Wait ( [ 21 21$00 , 17 17$30 , 15 15$00 ] [ Difficulty ] ) ;
12064: LD_INT 44100
12066: PUSH
12067: LD_INT 36750
12069: PUSH
12070: LD_INT 31500
12072: PUSH
12073: EMPTY
12074: LIST
12075: LIST
12076: LIST
12077: PUSH
12078: LD_OWVAR 67
12082: ARRAY
12083: PPUSH
12084: CALL_OW 67
// ru_can_attack := true ;
12088: LD_ADDR_EXP 3
12092: PUSH
12093: LD_INT 1
12095: ST_TO_ADDR
// end ;
12096: PPOPN 1
12098: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) do
12099: LD_INT 22
12101: PUSH
12102: LD_INT 7
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: PUSH
12109: LD_INT 30
12111: PUSH
12112: LD_INT 3
12114: PUSH
12115: EMPTY
12116: LIST
12117: LIST
12118: PUSH
12119: EMPTY
12120: LIST
12121: LIST
12122: PPUSH
12123: CALL_OW 69
12127: IFFALSE 12164
12129: GO 12131
12131: DISABLE
// begin Wait ( [ 20 20$00 , 16 16$30 , 14 14$00 ] [ Difficulty ] ) ;
12132: LD_INT 42000
12134: PUSH
12135: LD_INT 34650
12137: PUSH
12138: LD_INT 29400
12140: PUSH
12141: EMPTY
12142: LIST
12143: LIST
12144: LIST
12145: PUSH
12146: LD_OWVAR 67
12150: ARRAY
12151: PPUSH
12152: CALL_OW 67
// ru_can_attack := true ;
12156: LD_ADDR_EXP 3
12160: PUSH
12161: LD_INT 1
12163: ST_TO_ADDR
// end ;
12164: END
// every 0 0$01 trigger GetSide ( us_lab ) = 1 do var speaker ;
12165: LD_INT 58
12167: PPUSH
12168: CALL_OW 255
12172: PUSH
12173: LD_INT 1
12175: EQUAL
12176: IFFALSE 12383
12178: GO 12180
12180: DISABLE
12181: LD_INT 0
12183: PPUSH
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
12184: LD_ADDR_VAR 0 1
12188: PUSH
12189: LD_INT 22
12191: PUSH
12192: LD_INT 1
12194: PUSH
12195: EMPTY
12196: LIST
12197: LIST
12198: PUSH
12199: LD_INT 25
12201: PUSH
12202: LD_INT 2
12204: PUSH
12205: EMPTY
12206: LIST
12207: LIST
12208: PUSH
12209: EMPTY
12210: LIST
12211: LIST
12212: PPUSH
12213: CALL_OW 69
12217: ST_TO_ADDR
// DialogueOn ;
12218: CALL_OW 6
// if speaker then
12222: LD_VAR 0 1
12226: IFFALSE 12281
// if GetSex ( speaker [ 1 ] ) = sex_male then
12228: LD_VAR 0 1
12232: PUSH
12233: LD_INT 1
12235: ARRAY
12236: PPUSH
12237: CALL_OW 258
12241: PUSH
12242: LD_INT 1
12244: EQUAL
12245: IFFALSE 12265
// Say ( speaker [ 1 ] , VDe-1 ) else
12247: LD_VAR 0 1
12251: PUSH
12252: LD_INT 1
12254: ARRAY
12255: PPUSH
12256: LD_STRING VDe-1
12258: PPUSH
12259: CALL_OW 88
12263: GO 12281
// Say ( speaker [ 1 ] , VDef-1 ) ;
12265: LD_VAR 0 1
12269: PUSH
12270: LD_INT 1
12272: ARRAY
12273: PPUSH
12274: LD_STRING VDef-1
12276: PPUSH
12277: CALL_OW 88
// case Query ( SibNote ) of 1 :
12281: LD_STRING SibNote
12283: PPUSH
12284: CALL_OW 97
12288: PUSH
12289: LD_INT 1
12291: DOUBLE
12292: EQUAL
12293: IFTRUE 12297
12295: GO 12300
12297: POP
// ; end ;
12298: GO 12301
12300: POP
// if speaker then
12301: LD_VAR 0 1
12305: IFFALSE 12360
// if GetSex ( speaker [ 1 ] ) = sex_male then
12307: LD_VAR 0 1
12311: PUSH
12312: LD_INT 1
12314: ARRAY
12315: PPUSH
12316: CALL_OW 258
12320: PUSH
12321: LD_INT 1
12323: EQUAL
12324: IFFALSE 12344
// Say ( speaker [ 1 ] , VDe-2 ) else
12326: LD_VAR 0 1
12330: PUSH
12331: LD_INT 1
12333: ARRAY
12334: PPUSH
12335: LD_STRING VDe-2
12337: PPUSH
12338: CALL_OW 88
12342: GO 12360
// Say ( speaker [ 1 ] , VDef-2 ) ;
12344: LD_VAR 0 1
12348: PUSH
12349: LD_INT 1
12351: ARRAY
12352: PPUSH
12353: LD_STRING VDef-2
12355: PPUSH
12356: CALL_OW 88
// Say ( us_commander , VDc-4 ) ;
12360: LD_EXP 19
12364: PPUSH
12365: LD_STRING VDc-4
12367: PPUSH
12368: CALL_OW 88
// DialogueOff ;
12372: CALL_OW 7
// ChangeMissionObjectives ( CVulc3 ) ;
12376: LD_STRING CVulc3
12378: PPUSH
12379: CALL_OW 337
// end ;
12383: PPOPN 1
12385: END
// every 0 0$01 trigger your_side = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) > 0 do var i , un , veh ;
12386: LD_OWVAR 2
12390: PUSH
12391: LD_INT 1
12393: EQUAL
12394: PUSH
12395: LD_INT 22
12397: PUSH
12398: LD_INT 1
12400: PUSH
12401: EMPTY
12402: LIST
12403: LIST
12404: PUSH
12405: LD_INT 30
12407: PUSH
12408: LD_INT 3
12410: PUSH
12411: EMPTY
12412: LIST
12413: LIST
12414: PUSH
12415: EMPTY
12416: LIST
12417: LIST
12418: PPUSH
12419: CALL_OW 69
12423: PUSH
12424: LD_INT 0
12426: GREATER
12427: AND
12428: IFFALSE 12862
12430: GO 12432
12432: DISABLE
12433: LD_INT 0
12435: PPUSH
12436: PPUSH
12437: PPUSH
// begin Wait ( Rand ( 0 0$07 , 0 0$37 ) ) ;
12438: LD_INT 245
12440: PPUSH
12441: LD_INT 1295
12443: PPUSH
12444: CALL_OW 12
12448: PPUSH
12449: CALL_OW 67
// DialogueOn ;
12453: CALL_OW 6
// SayRadio ( us_guy , VDG-1 ) ;
12457: LD_EXP 22
12461: PPUSH
12462: LD_STRING VDG-1
12464: PPUSH
12465: CALL_OW 94
// Say ( us_commander , VDc-5 ) ;
12469: LD_EXP 19
12473: PPUSH
12474: LD_STRING VDc-5
12476: PPUSH
12477: CALL_OW 88
// SayRadio ( us_guy , VDG-2 ) ;
12481: LD_EXP 22
12485: PPUSH
12486: LD_STRING VDG-2
12488: PPUSH
12489: CALL_OW 94
// Say ( us_commander , VDc-6 ) ;
12493: LD_EXP 19
12497: PPUSH
12498: LD_STRING VDc-6
12500: PPUSH
12501: CALL_OW 88
// SayRadio ( us_guy , VDG-3 ) ;
12505: LD_EXP 22
12509: PPUSH
12510: LD_STRING VDG-3
12512: PPUSH
12513: CALL_OW 94
// Say ( us_commander , VDc-7 ) ;
12517: LD_EXP 19
12521: PPUSH
12522: LD_STRING VDc-7
12524: PPUSH
12525: CALL_OW 88
// SayRadio ( us_guy , VDG-4 ) ;
12529: LD_EXP 22
12533: PPUSH
12534: LD_STRING VDG-4
12536: PPUSH
12537: CALL_OW 94
// DialogueOff ;
12541: CALL_OW 7
// ChangeMissionObjectives ( CVulc4 ) ;
12545: LD_STRING CVulc4
12547: PPUSH
12548: CALL_OW 337
// Wait ( [ 9 9$00 , 10 10$00 , 11 11$00 ] [ Difficulty ] ) ;
12552: LD_INT 18900
12554: PUSH
12555: LD_INT 21000
12557: PUSH
12558: LD_INT 23100
12560: PUSH
12561: EMPTY
12562: LIST
12563: LIST
12564: LIST
12565: PUSH
12566: LD_OWVAR 67
12570: ARRAY
12571: PPUSH
12572: CALL_OW 67
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
12576: LD_ADDR_VAR 0 1
12580: PUSH
12581: DOUBLE
12582: LD_INT 1
12584: DEC
12585: ST_TO_ADDR
12586: LD_INT 4
12588: PUSH
12589: LD_INT 5
12591: PUSH
12592: LD_INT 6
12594: PUSH
12595: EMPTY
12596: LIST
12597: LIST
12598: LIST
12599: PUSH
12600: LD_OWVAR 67
12604: ARRAY
12605: PUSH
12606: FOR_TO
12607: IFFALSE 12851
// begin uc_side := 1 ;
12609: LD_ADDR_OWVAR 20
12613: PUSH
12614: LD_INT 1
12616: ST_TO_ADDR
// uc_nation := 1 ;
12617: LD_ADDR_OWVAR 21
12621: PUSH
12622: LD_INT 1
12624: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , us_skill ) ;
12625: LD_INT 0
12627: PPUSH
12628: LD_INT 1
12630: PPUSH
12631: LD_INT 4
12633: PPUSH
12634: CALL_OW 12
12638: PPUSH
12639: LD_EXP 21
12643: PPUSH
12644: CALL_OW 380
// un := CreateHuman ;
12648: LD_ADDR_VAR 0 2
12652: PUSH
12653: CALL_OW 44
12657: ST_TO_ADDR
// SetDir ( un , 2 ) ;
12658: LD_VAR 0 2
12662: PPUSH
12663: LD_INT 2
12665: PPUSH
12666: CALL_OW 233
// if GetClass ( un ) = 3 then
12670: LD_VAR 0 2
12674: PPUSH
12675: CALL_OW 257
12679: PUSH
12680: LD_INT 3
12682: EQUAL
12683: IFFALSE 12834
// begin vc_chassis := [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 ] ;
12685: LD_ADDR_OWVAR 37
12689: PUSH
12690: LD_INT 2
12692: PUSH
12693: LD_INT 3
12695: PUSH
12696: EMPTY
12697: LIST
12698: LIST
12699: PUSH
12700: LD_VAR 0 1
12704: PUSH
12705: LD_INT 2
12707: MOD
12708: ARRAY
12709: ST_TO_ADDR
// vc_engine := engine_combustion ;
12710: LD_ADDR_OWVAR 39
12714: PUSH
12715: LD_INT 1
12717: ST_TO_ADDR
// vc_control := control_manual ;
12718: LD_ADDR_OWVAR 38
12722: PUSH
12723: LD_INT 1
12725: ST_TO_ADDR
// vc_weapon := [ us_laser , us_laser , us_double_gun , us_radar ] [ rand ( 1 , 4 ) ] ;
12726: LD_ADDR_OWVAR 40
12730: PUSH
12731: LD_INT 9
12733: PUSH
12734: LD_INT 9
12736: PUSH
12737: LD_INT 5
12739: PUSH
12740: LD_INT 11
12742: PUSH
12743: EMPTY
12744: LIST
12745: LIST
12746: LIST
12747: LIST
12748: PUSH
12749: LD_INT 1
12751: PPUSH
12752: LD_INT 4
12754: PPUSH
12755: CALL_OW 12
12759: ARRAY
12760: ST_TO_ADDR
// veh := CreateVehicle ;
12761: LD_ADDR_VAR 0 3
12765: PUSH
12766: CALL_OW 45
12770: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
12771: LD_VAR 0 3
12775: PPUSH
12776: LD_INT 2
12778: PPUSH
12779: CALL_OW 233
// SetFuel ( veh , Rand ( 77 , 88 ) ) ;
12783: LD_VAR 0 3
12787: PPUSH
12788: LD_INT 77
12790: PPUSH
12791: LD_INT 88
12793: PPUSH
12794: CALL_OW 12
12798: PPUSH
12799: CALL_OW 240
// PlaceUnitArea ( veh , start_north , false ) ;
12803: LD_VAR 0 3
12807: PPUSH
12808: LD_INT 1
12810: PPUSH
12811: LD_INT 0
12813: PPUSH
12814: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
12818: LD_VAR 0 2
12822: PPUSH
12823: LD_VAR 0 3
12827: PPUSH
12828: CALL_OW 52
// end else
12832: GO 12849
// PlaceUnitArea ( un , start_north , false ) ;
12834: LD_VAR 0 2
12838: PPUSH
12839: LD_INT 1
12841: PPUSH
12842: LD_INT 0
12844: PPUSH
12845: CALL_OW 49
// end ;
12849: GO 12606
12851: POP
12852: POP
// CenterNowOnUnits ( un ) ;
12853: LD_VAR 0 2
12857: PPUSH
12858: CALL_OW 87
// end ;
12862: PPOPN 3
12864: END
// every 0 0$01 trigger FilterUnitsInArea ( vulc_artifact , [ f_side , your_side ] ) do var un , filter ;
12865: LD_INT 21
12867: PPUSH
12868: LD_INT 22
12870: PUSH
12871: LD_OWVAR 2
12875: PUSH
12876: EMPTY
12877: LIST
12878: LIST
12879: PPUSH
12880: CALL_OW 70
12884: IFFALSE 13205
12886: GO 12888
12888: DISABLE
12889: LD_INT 0
12891: PPUSH
12892: PPUSH
// begin filter := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff player_commander ;
12893: LD_ADDR_VAR 0 2
12897: PUSH
12898: LD_INT 22
12900: PUSH
12901: LD_OWVAR 2
12905: PUSH
12906: EMPTY
12907: LIST
12908: LIST
12909: PUSH
12910: LD_INT 2
12912: PUSH
12913: LD_INT 25
12915: PUSH
12916: LD_INT 1
12918: PUSH
12919: EMPTY
12920: LIST
12921: LIST
12922: PUSH
12923: LD_INT 25
12925: PUSH
12926: LD_INT 2
12928: PUSH
12929: EMPTY
12930: LIST
12931: LIST
12932: PUSH
12933: LD_INT 25
12935: PUSH
12936: LD_INT 3
12938: PUSH
12939: EMPTY
12940: LIST
12941: LIST
12942: PUSH
12943: LD_INT 25
12945: PUSH
12946: LD_INT 4
12948: PUSH
12949: EMPTY
12950: LIST
12951: LIST
12952: PUSH
12953: EMPTY
12954: LIST
12955: LIST
12956: LIST
12957: LIST
12958: LIST
12959: PUSH
12960: EMPTY
12961: LIST
12962: LIST
12963: PPUSH
12964: CALL_OW 69
12968: PUSH
12969: LD_EXP 10
12973: DIFF
12974: ST_TO_ADDR
// un := NearestUnitToXY ( filter , 112 , 67 ) ;
12975: LD_ADDR_VAR 0 1
12979: PUSH
12980: LD_VAR 0 2
12984: PPUSH
12985: LD_INT 112
12987: PPUSH
12988: LD_INT 67
12990: PPUSH
12991: CALL_OW 73
12995: ST_TO_ADDR
// if GetSide ( un ) = 7 then
12996: LD_VAR 0 1
13000: PPUSH
13001: CALL_OW 255
13005: PUSH
13006: LD_INT 7
13008: EQUAL
13009: IFFALSE 13052
// if GetSex ( un ) = sex_male then
13011: LD_VAR 0 1
13015: PPUSH
13016: CALL_OW 258
13020: PUSH
13021: LD_INT 1
13023: EQUAL
13024: IFFALSE 13040
// Say ( un , VD-find-al ) else
13026: LD_VAR 0 1
13030: PPUSH
13031: LD_STRING VD-find-al
13033: PPUSH
13034: CALL_OW 88
13038: GO 13052
// Say ( un , VD-find-al-f ) ;
13040: LD_VAR 0 1
13044: PPUSH
13045: LD_STRING VD-find-al-f
13047: PPUSH
13048: CALL_OW 88
// if GetSide ( un ) = 2 then
13052: LD_VAR 0 1
13056: PPUSH
13057: CALL_OW 255
13061: PUSH
13062: LD_INT 2
13064: EQUAL
13065: IFFALSE 13108
// if GetSex ( un ) = sex_male then
13067: LD_VAR 0 1
13071: PPUSH
13072: CALL_OW 258
13076: PUSH
13077: LD_INT 1
13079: EQUAL
13080: IFFALSE 13096
// Say ( un , VD-find-ar ) else
13082: LD_VAR 0 1
13086: PPUSH
13087: LD_STRING VD-find-ar
13089: PPUSH
13090: CALL_OW 88
13094: GO 13108
// Say ( un , VD-find-ar-f ) ;
13096: LD_VAR 0 1
13100: PPUSH
13101: LD_STRING VD-find-ar-f
13103: PPUSH
13104: CALL_OW 88
// if GetSide ( un ) = 1 then
13108: LD_VAR 0 1
13112: PPUSH
13113: CALL_OW 255
13117: PUSH
13118: LD_INT 1
13120: EQUAL
13121: IFFALSE 13188
// begin if GetSex ( un ) = sex_male then
13123: LD_VAR 0 1
13127: PPUSH
13128: CALL_OW 258
13132: PUSH
13133: LD_INT 1
13135: EQUAL
13136: IFFALSE 13164
// begin Say ( un , VD-find-us ) ;
13138: LD_VAR 0 1
13142: PPUSH
13143: LD_STRING VD-find-us
13145: PPUSH
13146: CALL_OW 88
// Say ( un , VD-find-us2 ) ;
13150: LD_VAR 0 1
13154: PPUSH
13155: LD_STRING VD-find-us2
13157: PPUSH
13158: CALL_OW 88
// end else
13162: GO 13188
// begin Say ( un , VD-find-us-f ) ;
13164: LD_VAR 0 1
13168: PPUSH
13169: LD_STRING VD-find-us-f
13171: PPUSH
13172: CALL_OW 88
// Say ( un , VD-find-us2-f ) ;
13176: LD_VAR 0 1
13180: PPUSH
13181: LD_STRING VD-find-us2-f
13183: PPUSH
13184: CALL_OW 88
// end ; end ; Wait ( 0 0$0.3 ) ;
13188: LD_INT 10
13190: PPUSH
13191: CALL_OW 67
// CenterNowOnXY ( 112 , 67 ) ;
13195: LD_INT 112
13197: PPUSH
13198: LD_INT 67
13200: PPUSH
13201: CALL_OW 86
// end ;
13205: PPOPN 2
13207: END
// every 0 0$01 trigger player_artifact_ready do var speaker ;
13208: LD_EXP 7
13212: IFFALSE 13714
13214: GO 13216
13216: DISABLE
13217: LD_INT 0
13219: PPUSH
// begin if your_side = 1 then
13220: LD_OWVAR 2
13224: PUSH
13225: LD_INT 1
13227: EQUAL
13228: IFFALSE 13409
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) diff us_commander ;
13230: LD_ADDR_VAR 0 1
13234: PUSH
13235: LD_INT 22
13237: PUSH
13238: LD_INT 1
13240: PUSH
13241: EMPTY
13242: LIST
13243: LIST
13244: PUSH
13245: LD_INT 25
13247: PUSH
13248: LD_INT 4
13250: PUSH
13251: EMPTY
13252: LIST
13253: LIST
13254: PUSH
13255: EMPTY
13256: LIST
13257: LIST
13258: PPUSH
13259: CALL_OW 69
13263: PUSH
13264: LD_EXP 19
13268: DIFF
13269: ST_TO_ADDR
// if not speaker then
13270: LD_VAR 0 1
13274: NOT
13275: IFFALSE 13279
// exit ;
13277: GO 13714
// if GetSex ( speaker [ 1 ] ) = sex_male then
13279: LD_VAR 0 1
13283: PUSH
13284: LD_INT 1
13286: ARRAY
13287: PPUSH
13288: CALL_OW 258
13292: PUSH
13293: LD_INT 1
13295: EQUAL
13296: IFFALSE 13316
// Say ( speaker [ 1 ] , VD-us-sci-art-1 ) else
13298: LD_VAR 0 1
13302: PUSH
13303: LD_INT 1
13305: ARRAY
13306: PPUSH
13307: LD_STRING VD-us-sci-art-1
13309: PPUSH
13310: CALL_OW 88
13314: GO 13332
// Say ( speaker [ 1 ] , VD-us-fsci-art-1 ) ;
13316: LD_VAR 0 1
13320: PUSH
13321: LD_INT 1
13323: ARRAY
13324: PPUSH
13325: LD_STRING VD-us-fsci-art-1
13327: PPUSH
13328: CALL_OW 88
// Say ( us_commander , VDc-art1 ) ;
13332: LD_EXP 19
13336: PPUSH
13337: LD_STRING VDc-art1
13339: PPUSH
13340: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
13344: LD_VAR 0 1
13348: PUSH
13349: LD_INT 1
13351: ARRAY
13352: PPUSH
13353: CALL_OW 258
13357: PUSH
13358: LD_INT 1
13360: EQUAL
13361: IFFALSE 13381
// Say ( speaker [ 1 ] , VD-us-sci-art-2 ) else
13363: LD_VAR 0 1
13367: PUSH
13368: LD_INT 1
13370: ARRAY
13371: PPUSH
13372: LD_STRING VD-us-sci-art-2
13374: PPUSH
13375: CALL_OW 88
13379: GO 13397
// Say ( speaker [ 1 ] , VD-us-fsci-art-2 ) ;
13381: LD_VAR 0 1
13385: PUSH
13386: LD_INT 1
13388: ARRAY
13389: PPUSH
13390: LD_STRING VD-us-fsci-art-2
13392: PPUSH
13393: CALL_OW 88
// Say ( us_commander , VDc-art2 ) ;
13397: LD_EXP 19
13401: PPUSH
13402: LD_STRING VDc-art2
13404: PPUSH
13405: CALL_OW 88
// end ; if your_side = 2 then
13409: LD_OWVAR 2
13413: PUSH
13414: LD_INT 2
13416: EQUAL
13417: IFFALSE 13521
// begin speaker := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) diff ar_commander ;
13419: LD_ADDR_VAR 0 1
13423: PUSH
13424: LD_INT 22
13426: PUSH
13427: LD_INT 2
13429: PUSH
13430: EMPTY
13431: LIST
13432: LIST
13433: PUSH
13434: LD_INT 25
13436: PUSH
13437: LD_INT 4
13439: PUSH
13440: EMPTY
13441: LIST
13442: LIST
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: PPUSH
13448: CALL_OW 69
13452: PUSH
13453: LD_EXP 51
13457: DIFF
13458: ST_TO_ADDR
// if not speaker then
13459: LD_VAR 0 1
13463: NOT
13464: IFFALSE 13468
// exit ;
13466: GO 13714
// if GetSex ( speaker [ 1 ] ) = sex_male then
13468: LD_VAR 0 1
13472: PUSH
13473: LD_INT 1
13475: ARRAY
13476: PPUSH
13477: CALL_OW 258
13481: PUSH
13482: LD_INT 1
13484: EQUAL
13485: IFFALSE 13505
// Say ( speaker [ 1 ] , VD-ar-sci-art-1 ) else
13487: LD_VAR 0 1
13491: PUSH
13492: LD_INT 1
13494: ARRAY
13495: PPUSH
13496: LD_STRING VD-ar-sci-art-1
13498: PPUSH
13499: CALL_OW 88
13503: GO 13521
// Say ( speaker [ 1 ] , VD-ar-fsci-art-1 ) ;
13505: LD_VAR 0 1
13509: PUSH
13510: LD_INT 1
13512: ARRAY
13513: PPUSH
13514: LD_STRING VD-ar-fsci-art-1
13516: PPUSH
13517: CALL_OW 88
// end ; if your_side = 7 then
13521: LD_OWVAR 2
13525: PUSH
13526: LD_INT 7
13528: EQUAL
13529: IFFALSE 13714
// begin speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 4 ] ] ) diff al_commander ;
13531: LD_ADDR_VAR 0 1
13535: PUSH
13536: LD_INT 22
13538: PUSH
13539: LD_INT 7
13541: PUSH
13542: EMPTY
13543: LIST
13544: LIST
13545: PUSH
13546: LD_INT 25
13548: PUSH
13549: LD_INT 4
13551: PUSH
13552: EMPTY
13553: LIST
13554: LIST
13555: PUSH
13556: EMPTY
13557: LIST
13558: LIST
13559: PPUSH
13560: CALL_OW 69
13564: PUSH
13565: LD_EXP 37
13569: DIFF
13570: ST_TO_ADDR
// if speaker then
13571: LD_VAR 0 1
13575: IFFALSE 13707
// begin if GetSex ( speaker [ 1 ] ) = sex_male then
13577: LD_VAR 0 1
13581: PUSH
13582: LD_INT 1
13584: ARRAY
13585: PPUSH
13586: CALL_OW 258
13590: PUSH
13591: LD_INT 1
13593: EQUAL
13594: IFFALSE 13614
// Say ( speaker [ 1 ] , VD-al-sci-art-1 ) else
13596: LD_VAR 0 1
13600: PUSH
13601: LD_INT 1
13603: ARRAY
13604: PPUSH
13605: LD_STRING VD-al-sci-art-1
13607: PPUSH
13608: CALL_OW 88
13612: GO 13630
// Say ( speaker [ 1 ] , VD-al-fsci-art-1 ) ;
13614: LD_VAR 0 1
13618: PUSH
13619: LD_INT 1
13621: ARRAY
13622: PPUSH
13623: LD_STRING VD-al-fsci-art-1
13625: PPUSH
13626: CALL_OW 88
// Say ( al_commander , VPd-art-1 ) ;
13630: LD_EXP 37
13634: PPUSH
13635: LD_STRING VPd-art-1
13637: PPUSH
13638: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
13642: LD_VAR 0 1
13646: PUSH
13647: LD_INT 1
13649: ARRAY
13650: PPUSH
13651: CALL_OW 258
13655: PUSH
13656: LD_INT 1
13658: EQUAL
13659: IFFALSE 13679
// Say ( speaker [ 1 ] , VD-al-sci-art-2 ) else
13661: LD_VAR 0 1
13665: PUSH
13666: LD_INT 1
13668: ARRAY
13669: PPUSH
13670: LD_STRING VD-al-sci-art-2
13672: PPUSH
13673: CALL_OW 88
13677: GO 13695
// Say ( speaker [ 1 ] , VD-al-fsci-art-2 ) ;
13679: LD_VAR 0 1
13683: PUSH
13684: LD_INT 1
13686: ARRAY
13687: PPUSH
13688: LD_STRING VD-al-fsci-art-2
13690: PPUSH
13691: CALL_OW 88
// Say ( al_commander , VPd-art-2 ) ;
13695: LD_EXP 37
13699: PPUSH
13700: LD_STRING VPd-art-2
13702: PPUSH
13703: CALL_OW 88
// end ; ChangeMissionObjectives ( CVulc7out ) ;
13707: LD_STRING CVulc7out
13709: PPUSH
13710: CALL_OW 337
// end ; end ;
13714: PPOPN 1
13716: END
// every 0 0$01 trigger See ( 8 , NearestUnitToSide ( FilterAllUnits ( [ f_side , your_side ] ) , 8 ) ) do var speaker ;
13717: LD_INT 8
13719: PPUSH
13720: LD_INT 22
13722: PUSH
13723: LD_OWVAR 2
13727: PUSH
13728: EMPTY
13729: LIST
13730: LIST
13731: PPUSH
13732: CALL_OW 69
13736: PPUSH
13737: LD_INT 8
13739: PPUSH
13740: CALL 2145 0 2
13744: PPUSH
13745: CALL_OW 292
13749: IFFALSE 13892
13751: GO 13753
13753: DISABLE
13754: LD_INT 0
13756: PPUSH
// begin if your_side = 1 then
13757: LD_OWVAR 2
13761: PUSH
13762: LD_INT 1
13764: EQUAL
13765: IFFALSE 13848
// begin speaker := FilterAllUnits ( [ f_side , 1 ] ) diff us_commander ;
13767: LD_ADDR_VAR 0 1
13771: PUSH
13772: LD_INT 22
13774: PUSH
13775: LD_INT 1
13777: PUSH
13778: EMPTY
13779: LIST
13780: LIST
13781: PPUSH
13782: CALL_OW 69
13786: PUSH
13787: LD_EXP 19
13791: DIFF
13792: ST_TO_ADDR
// if speaker then
13793: LD_VAR 0 1
13797: IFFALSE 13848
// if GetSex ( speaker [ 1 ] ) then
13799: LD_VAR 0 1
13803: PUSH
13804: LD_INT 1
13806: ARRAY
13807: PPUSH
13808: CALL_OW 258
13812: IFFALSE 13832
// Say ( speaker [ 1 ] , VD-legion-us ) else
13814: LD_VAR 0 1
13818: PUSH
13819: LD_INT 1
13821: ARRAY
13822: PPUSH
13823: LD_STRING VD-legion-us
13825: PPUSH
13826: CALL_OW 88
13830: GO 13848
// Say ( speaker [ 1 ] , VD-legion-us-f ) ;
13832: LD_VAR 0 1
13836: PUSH
13837: LD_INT 1
13839: ARRAY
13840: PPUSH
13841: LD_STRING VD-legion-us-f
13843: PPUSH
13844: CALL_OW 88
// end ; if your_side = 2 then
13848: LD_OWVAR 2
13852: PUSH
13853: LD_INT 2
13855: EQUAL
13856: IFFALSE 13870
// Say ( ar_commander , VD-legion-ar ) ;
13858: LD_EXP 51
13862: PPUSH
13863: LD_STRING VD-legion-ar
13865: PPUSH
13866: CALL_OW 88
// if your_side = 7 then
13870: LD_OWVAR 2
13874: PUSH
13875: LD_INT 7
13877: EQUAL
13878: IFFALSE 13892
// Say ( al_commander , VD-legion-al ) ;
13880: LD_EXP 37
13884: PPUSH
13885: LD_STRING VD-legion-al
13887: PPUSH
13888: CALL_OW 88
// end ;
13892: PPOPN 1
13894: END
// every 0 0$01 trigger mine_vulc do
13895: LD_EXP 12
13899: IFFALSE 13916
13901: GO 13903
13903: DISABLE
// begin Say ( player_commander , VD-vulc-mines ) ;
13904: LD_EXP 10
13908: PPUSH
13909: LD_STRING VD-vulc-mines
13911: PPUSH
13912: CALL_OW 88
// end ;
13916: END
// every 0 0$03 trigger difficulty > 1 do var mines , p , i ;
13917: LD_OWVAR 67
13921: PUSH
13922: LD_INT 1
13924: GREATER
13925: IFFALSE 14044
13927: GO 13929
13929: DISABLE
13930: LD_INT 0
13932: PPUSH
13933: PPUSH
13934: PPUSH
// begin mines := [ 123 , 95 , 119 , 89 , 115 , 81 ] ;
13935: LD_ADDR_VAR 0 1
13939: PUSH
13940: LD_INT 123
13942: PUSH
13943: LD_INT 95
13945: PUSH
13946: LD_INT 119
13948: PUSH
13949: LD_INT 89
13951: PUSH
13952: LD_INT 115
13954: PUSH
13955: LD_INT 81
13957: PUSH
13958: EMPTY
13959: LIST
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: LIST
13965: ST_TO_ADDR
// p := 1 ;
13966: LD_ADDR_VAR 0 2
13970: PUSH
13971: LD_INT 1
13973: ST_TO_ADDR
// for i = 1 to 3 do
13974: LD_ADDR_VAR 0 3
13978: PUSH
13979: DOUBLE
13980: LD_INT 1
13982: DEC
13983: ST_TO_ADDR
13984: LD_INT 3
13986: PUSH
13987: FOR_TO
13988: IFFALSE 14042
// begin PlaceMine ( mines [ p ] , mines [ p + 1 ] , 8 , 0 ) ;
13990: LD_VAR 0 1
13994: PUSH
13995: LD_VAR 0 2
13999: ARRAY
14000: PPUSH
14001: LD_VAR 0 1
14005: PUSH
14006: LD_VAR 0 2
14010: PUSH
14011: LD_INT 1
14013: PLUS
14014: ARRAY
14015: PPUSH
14016: LD_INT 8
14018: PPUSH
14019: LD_INT 0
14021: PPUSH
14022: CALL_OW 454
// p := p + 2 ;
14026: LD_ADDR_VAR 0 2
14030: PUSH
14031: LD_VAR 0 2
14035: PUSH
14036: LD_INT 2
14038: PLUS
14039: ST_TO_ADDR
// end ;
14040: GO 13987
14042: POP
14043: POP
// end ;
14044: PPOPN 3
14046: END
// every 0 0$01 trigger difficulty > 1 and FilterUnitsInArea ( vulc_mines , [ f_side , your_side ] ) do var p , i , mines ;
14047: LD_OWVAR 67
14051: PUSH
14052: LD_INT 1
14054: GREATER
14055: PUSH
14056: LD_INT 22
14058: PPUSH
14059: LD_INT 22
14061: PUSH
14062: LD_OWVAR 2
14066: PUSH
14067: EMPTY
14068: LIST
14069: LIST
14070: PPUSH
14071: CALL_OW 70
14075: AND
14076: IFFALSE 14280
14078: GO 14080
14080: DISABLE
14081: LD_INT 0
14083: PPUSH
14084: PPUSH
14085: PPUSH
// begin enable ;
14086: ENABLE
// p := 1 ;
14087: LD_ADDR_VAR 0 1
14091: PUSH
14092: LD_INT 1
14094: ST_TO_ADDR
// mines := [ 123 , 95 , 119 , 89 , 115 , 81 ] ;
14095: LD_ADDR_VAR 0 3
14099: PUSH
14100: LD_INT 123
14102: PUSH
14103: LD_INT 95
14105: PUSH
14106: LD_INT 119
14108: PUSH
14109: LD_INT 89
14111: PUSH
14112: LD_INT 115
14114: PUSH
14115: LD_INT 81
14117: PUSH
14118: EMPTY
14119: LIST
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: LIST
14125: ST_TO_ADDR
// for i = 1 to 3 do
14126: LD_ADDR_VAR 0 2
14130: PUSH
14131: DOUBLE
14132: LD_INT 1
14134: DEC
14135: ST_TO_ADDR
14136: LD_INT 3
14138: PUSH
14139: FOR_TO
14140: IFFALSE 14278
// begin if HexInfo ( mines [ p ] , mines [ p + 1 ] ) > 0 then
14142: LD_VAR 0 3
14146: PUSH
14147: LD_VAR 0 1
14151: ARRAY
14152: PPUSH
14153: LD_VAR 0 3
14157: PUSH
14158: LD_VAR 0 1
14162: PUSH
14163: LD_INT 1
14165: PLUS
14166: ARRAY
14167: PPUSH
14168: CALL_OW 428
14172: PUSH
14173: LD_INT 0
14175: GREATER
14176: IFFALSE 14262
// if GetSide ( HexInfo ( mines [ p ] , mines [ p + 1 ] ) ) = your_side then
14178: LD_VAR 0 3
14182: PUSH
14183: LD_VAR 0 1
14187: ARRAY
14188: PPUSH
14189: LD_VAR 0 3
14193: PUSH
14194: LD_VAR 0 1
14198: PUSH
14199: LD_INT 1
14201: PLUS
14202: ARRAY
14203: PPUSH
14204: CALL_OW 428
14208: PPUSH
14209: CALL_OW 255
14213: PUSH
14214: LD_OWVAR 2
14218: EQUAL
14219: IFFALSE 14262
// begin LaunchMineAtPos ( mines [ p ] , mines [ p + 1 ] , 8 ) ;
14221: LD_VAR 0 3
14225: PUSH
14226: LD_VAR 0 1
14230: ARRAY
14231: PPUSH
14232: LD_VAR 0 3
14236: PUSH
14237: LD_VAR 0 1
14241: PUSH
14242: LD_INT 1
14244: PLUS
14245: ARRAY
14246: PPUSH
14247: LD_INT 8
14249: PPUSH
14250: CALL_OW 456
// mine_vulc := true ;
14254: LD_ADDR_EXP 12
14258: PUSH
14259: LD_INT 1
14261: ST_TO_ADDR
// end ; p := p + 2 ;
14262: LD_ADDR_VAR 0 1
14266: PUSH
14267: LD_VAR 0 1
14271: PUSH
14272: LD_INT 2
14274: PLUS
14275: ST_TO_ADDR
// end ;
14276: GO 14139
14278: POP
14279: POP
// end ;
14280: PPOPN 3
14282: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 3 ] ) = 0 and your_side <> 2 do
14283: LD_INT 22
14285: PUSH
14286: LD_INT 3
14288: PUSH
14289: EMPTY
14290: LIST
14291: LIST
14292: PPUSH
14293: CALL_OW 69
14297: PUSH
14298: LD_INT 0
14300: EQUAL
14301: PUSH
14302: LD_OWVAR 2
14306: PUSH
14307: LD_INT 2
14309: NONEQUAL
14310: AND
14311: IFFALSE 14320
14313: GO 14315
14315: DISABLE
// Win ;
14316: CALL 14377 0 0
14320: END
// every 0 0$01 trigger FilterAllUnits ( [ f_or , [ f_side , 8 ] , [ f_side , 3 ] ] ) = 0 and your_side = 2 do
14321: LD_INT 2
14323: PUSH
14324: LD_INT 22
14326: PUSH
14327: LD_INT 8
14329: PUSH
14330: EMPTY
14331: LIST
14332: LIST
14333: PUSH
14334: LD_INT 22
14336: PUSH
14337: LD_INT 3
14339: PUSH
14340: EMPTY
14341: LIST
14342: LIST
14343: PUSH
14344: EMPTY
14345: LIST
14346: LIST
14347: LIST
14348: PPUSH
14349: CALL_OW 69
14353: PUSH
14354: LD_INT 0
14356: EQUAL
14357: PUSH
14358: LD_OWVAR 2
14362: PUSH
14363: LD_INT 2
14365: EQUAL
14366: AND
14367: IFFALSE 14376
14369: GO 14371
14371: DISABLE
// Win ;
14372: CALL 14377 0 0
14376: END
// function Win ; var points ; begin
14377: LD_INT 0
14379: PPUSH
14380: PPUSH
// case Query ( VulcWin ) of 1 :
14381: LD_STRING VulcWin
14383: PPUSH
14384: CALL_OW 97
14388: PUSH
14389: LD_INT 1
14391: DOUBLE
14392: EQUAL
14393: IFTRUE 14397
14395: GO 14400
14397: POP
// ; end ;
14398: GO 14401
14400: POP
// if medal_enabled then
14401: LD_EXP 13
14405: IFFALSE 14419
// AddMedal ( vulc_1 , 1 ) else
14407: LD_STRING vulc_1
14409: PPUSH
14410: LD_INT 1
14412: PPUSH
14413: CALL_OW 101
14417: GO 14430
// AddMedal ( vulc_1 , - 1 ) ;
14419: LD_STRING vulc_1
14421: PPUSH
14422: LD_INT 1
14424: NEG
14425: PPUSH
14426: CALL_OW 101
// if FilterAllUnits ( [ f_side , 8 ] ) = 0 then
14430: LD_INT 22
14432: PUSH
14433: LD_INT 8
14435: PUSH
14436: EMPTY
14437: LIST
14438: LIST
14439: PPUSH
14440: CALL_OW 69
14444: PUSH
14445: LD_INT 0
14447: EQUAL
14448: IFFALSE 14462
// AddMedal ( vulc_2 , 1 ) else
14450: LD_STRING vulc_2
14452: PPUSH
14453: LD_INT 1
14455: PPUSH
14456: CALL_OW 101
14460: GO 14473
// AddMedal ( vulc_2 , - 1 ) ;
14462: LD_STRING vulc_2
14464: PPUSH
14465: LD_INT 1
14467: NEG
14468: PPUSH
14469: CALL_OW 101
// points := CalculateCommanderPoints ;
14473: LD_ADDR_VAR 0 2
14477: PUSH
14478: CALL 2266 0 0
14482: ST_TO_ADDR
// if points >= 2000 then
14483: LD_VAR 0 2
14487: PUSH
14488: LD_INT 2000
14490: GREATEREQUAL
14491: IFFALSE 14505
// AddMedal ( vulc_3 , 2 ) else
14493: LD_STRING vulc_3
14495: PPUSH
14496: LD_INT 2
14498: PPUSH
14499: CALL_OW 101
14503: GO 14538
// if points >= 0 then
14505: LD_VAR 0 2
14509: PUSH
14510: LD_INT 0
14512: GREATEREQUAL
14513: IFFALSE 14527
// AddMedal ( vulc_3 , 1 ) else
14515: LD_STRING vulc_3
14517: PPUSH
14518: LD_INT 1
14520: PPUSH
14521: CALL_OW 101
14525: GO 14538
// AddMedal ( vulc_3 , - 1 ) ;
14527: LD_STRING vulc_3
14529: PPUSH
14530: LD_INT 1
14532: NEG
14533: PPUSH
14534: CALL_OW 101
// GiveMedals ( MAIN ) ;
14538: LD_STRING MAIN
14540: PPUSH
14541: CALL_OW 102
// YouWin ;
14545: CALL_OW 103
// end ; end_of_file
14549: LD_VAR 0 1
14553: RET
// every 0 0$01 trigger FilterUnitsInArea ( vulcano_area , [ f_type , unit_human ] ) > 0 do var i , un ;
14554: LD_INT 13
14556: PPUSH
14557: LD_INT 21
14559: PUSH
14560: LD_INT 1
14562: PUSH
14563: EMPTY
14564: LIST
14565: LIST
14566: PPUSH
14567: CALL_OW 70
14571: PUSH
14572: LD_INT 0
14574: GREATER
14575: IFFALSE 14642
14577: GO 14579
14579: DISABLE
14580: LD_INT 0
14582: PPUSH
14583: PPUSH
// begin enable ;
14584: ENABLE
// for i in FilterUnitsInArea ( vulcano_area , [ f_type , unit_human ] ) do
14585: LD_ADDR_VAR 0 1
14589: PUSH
14590: LD_INT 13
14592: PPUSH
14593: LD_INT 21
14595: PUSH
14596: LD_INT 1
14598: PUSH
14599: EMPTY
14600: LIST
14601: LIST
14602: PPUSH
14603: CALL_OW 70
14607: PUSH
14608: FOR_IN
14609: IFFALSE 14640
// if GetLives ( i ) > 4 then
14611: LD_VAR 0 1
14615: PPUSH
14616: CALL_OW 256
14620: PUSH
14621: LD_INT 4
14623: GREATER
14624: IFFALSE 14638
// SetLives ( i , 4 ) ;
14626: LD_VAR 0 1
14630: PPUSH
14631: LD_INT 4
14633: PPUSH
14634: CALL_OW 234
14638: GO 14608
14640: POP
14641: POP
// end ;
14642: PPOPN 2
14644: END
// on ArtifactResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
14645: LD_VAR 0 1
14649: PPUSH
14650: CALL_OW 255
14654: PUSH
14655: LD_OWVAR 2
14659: EQUAL
14660: IFFALSE 14670
// player_res_art := true ;
14662: LD_ADDR_EXP 6
14666: PUSH
14667: LD_INT 1
14669: ST_TO_ADDR
// end ;
14670: PPOPN 1
14672: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) and player_res_art do var x , y , lab ;
14673: LD_INT 22
14675: PUSH
14676: LD_OWVAR 2
14680: PUSH
14681: EMPTY
14682: LIST
14683: LIST
14684: PUSH
14685: LD_INT 2
14687: PUSH
14688: LD_INT 30
14690: PUSH
14691: LD_INT 7
14693: PUSH
14694: EMPTY
14695: LIST
14696: LIST
14697: PUSH
14698: LD_INT 30
14700: PUSH
14701: LD_INT 8
14703: PUSH
14704: EMPTY
14705: LIST
14706: LIST
14707: PUSH
14708: LD_INT 30
14710: PUSH
14711: LD_INT 11
14713: PUSH
14714: EMPTY
14715: LIST
14716: LIST
14717: PUSH
14718: EMPTY
14719: LIST
14720: LIST
14721: LIST
14722: LIST
14723: PUSH
14724: EMPTY
14725: LIST
14726: LIST
14727: PPUSH
14728: CALL_OW 69
14732: PUSH
14733: LD_EXP 6
14737: AND
14738: IFFALSE 15093
14740: GO 14742
14742: DISABLE
14743: LD_INT 0
14745: PPUSH
14746: PPUSH
14747: PPUSH
// begin enable ;
14748: ENABLE
// x := FindArtifact ( 1 ) [ 1 ] ;
14749: LD_ADDR_VAR 0 1
14753: PUSH
14754: LD_INT 1
14756: PPUSH
14757: CALL_OW 469
14761: PUSH
14762: LD_INT 1
14764: ARRAY
14765: ST_TO_ADDR
// y := FindArtifact ( 1 ) [ 2 ] ;
14766: LD_ADDR_VAR 0 2
14770: PUSH
14771: LD_INT 1
14773: PPUSH
14774: CALL_OW 469
14778: PUSH
14779: LD_INT 2
14781: ARRAY
14782: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_siberium ] ] ] ) , x , y ) ;
14783: LD_ADDR_VAR 0 3
14787: PUSH
14788: LD_INT 22
14790: PUSH
14791: LD_OWVAR 2
14795: PUSH
14796: EMPTY
14797: LIST
14798: LIST
14799: PUSH
14800: LD_INT 2
14802: PUSH
14803: LD_INT 30
14805: PUSH
14806: LD_INT 8
14808: PUSH
14809: EMPTY
14810: LIST
14811: LIST
14812: PUSH
14813: LD_INT 30
14815: PUSH
14816: LD_INT 7
14818: PUSH
14819: EMPTY
14820: LIST
14821: LIST
14822: PUSH
14823: LD_INT 30
14825: PUSH
14826: LD_INT 11
14828: PUSH
14829: EMPTY
14830: LIST
14831: LIST
14832: PUSH
14833: EMPTY
14834: LIST
14835: LIST
14836: LIST
14837: LIST
14838: PUSH
14839: EMPTY
14840: LIST
14841: LIST
14842: PPUSH
14843: CALL_OW 69
14847: PPUSH
14848: LD_VAR 0 1
14852: PPUSH
14853: LD_VAR 0 2
14857: PPUSH
14858: CALL_OW 73
14862: ST_TO_ADDR
// if player_artifact_ready = false then
14863: LD_EXP 7
14867: PUSH
14868: LD_INT 0
14870: EQUAL
14871: IFFALSE 14977
// if GetDistUnitXY ( lab , x , y ) < 6 then
14873: LD_VAR 0 3
14877: PPUSH
14878: LD_VAR 0 1
14882: PPUSH
14883: LD_VAR 0 2
14887: PPUSH
14888: CALL_OW 297
14892: PUSH
14893: LD_INT 6
14895: LESS
14896: IFFALSE 14957
// begin if BuildingStatus ( lab ) = bs_idle then
14898: LD_VAR 0 3
14902: PPUSH
14903: CALL_OW 461
14907: PUSH
14908: LD_INT 2
14910: EQUAL
14911: IFFALSE 14935
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) else
14913: LD_OWVAR 2
14917: PPUSH
14918: LD_INT 1
14920: PPUSH
14921: LD_INT 2
14923: PPUSH
14924: LD_VAR 0 3
14928: PPUSH
14929: CALL_OW 468
14933: GO 14955
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
14935: LD_OWVAR 2
14939: PPUSH
14940: LD_INT 1
14942: PPUSH
14943: LD_INT 1
14945: PPUSH
14946: LD_VAR 0 3
14950: PPUSH
14951: CALL_OW 468
// end else
14955: GO 14977
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
14957: LD_OWVAR 2
14961: PPUSH
14962: LD_INT 1
14964: PPUSH
14965: LD_INT 1
14967: PPUSH
14968: LD_VAR 0 3
14972: PPUSH
14973: CALL_OW 468
// if player_artifact_ready then
14977: LD_EXP 7
14981: IFFALSE 15093
// if GetDistUnitXY ( lab , x , y ) < 6 then
14983: LD_VAR 0 3
14987: PPUSH
14988: LD_VAR 0 1
14992: PPUSH
14993: LD_VAR 0 2
14997: PPUSH
14998: CALL_OW 297
15002: PUSH
15003: LD_INT 6
15005: LESS
15006: IFFALSE 15071
// begin if BuildingStatus ( lab ) = bs_idle then
15008: LD_VAR 0 3
15012: PPUSH
15013: CALL_OW 461
15017: PUSH
15018: LD_INT 2
15020: EQUAL
15021: IFFALSE 15047
// SetArtifactUse ( your_side , art_icon , art_unit , lab ) else
15023: LD_OWVAR 2
15027: PPUSH
15028: LD_EXP 8
15032: PPUSH
15033: LD_INT 4
15035: PPUSH
15036: LD_VAR 0 3
15040: PPUSH
15041: CALL_OW 468
15045: GO 15069
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
15047: LD_OWVAR 2
15051: PPUSH
15052: LD_EXP 8
15056: PPUSH
15057: LD_INT 1
15059: PPUSH
15060: LD_VAR 0 3
15064: PPUSH
15065: CALL_OW 468
// end else
15069: GO 15093
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
15071: LD_OWVAR 2
15075: PPUSH
15076: LD_EXP 8
15080: PPUSH
15081: LD_INT 1
15083: PPUSH
15084: LD_VAR 0 3
15088: PPUSH
15089: CALL_OW 468
// end ;
15093: PPOPN 3
15095: END
// on ArtifactUsed ( s , icon , cr1 , cr2 ) do var x , y , i , lab , side ;
15096: LD_INT 0
15098: PPUSH
15099: PPUSH
15100: PPUSH
15101: PPUSH
15102: PPUSH
// begin x := FindArtifact ( 1 ) [ 1 ] ;
15103: LD_ADDR_VAR 0 5
15107: PUSH
15108: LD_INT 1
15110: PPUSH
15111: CALL_OW 469
15115: PUSH
15116: LD_INT 1
15118: ARRAY
15119: ST_TO_ADDR
// y := FindArtifact ( 1 ) [ 2 ] ;
15120: LD_ADDR_VAR 0 6
15124: PUSH
15125: LD_INT 1
15127: PPUSH
15128: CALL_OW 469
15132: PUSH
15133: LD_INT 2
15135: ARRAY
15136: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , x , y ) ;
15137: LD_ADDR_VAR 0 8
15141: PUSH
15142: LD_INT 22
15144: PUSH
15145: LD_OWVAR 2
15149: PUSH
15150: EMPTY
15151: LIST
15152: LIST
15153: PUSH
15154: LD_INT 2
15156: PUSH
15157: LD_INT 30
15159: PUSH
15160: LD_INT 8
15162: PUSH
15163: EMPTY
15164: LIST
15165: LIST
15166: PUSH
15167: LD_INT 30
15169: PUSH
15170: LD_INT 11
15172: PUSH
15173: EMPTY
15174: LIST
15175: LIST
15176: PUSH
15177: EMPTY
15178: LIST
15179: LIST
15180: LIST
15181: PUSH
15182: EMPTY
15183: LIST
15184: LIST
15185: PPUSH
15186: CALL_OW 69
15190: PPUSH
15191: LD_VAR 0 5
15195: PPUSH
15196: LD_VAR 0 6
15200: PPUSH
15201: CALL_OW 73
15205: ST_TO_ADDR
// if icon = art_exp_left then
15206: LD_VAR 0 2
15210: PUSH
15211: LD_INT 1
15213: EQUAL
15214: IFFALSE 15253
// begin SetSpecResearch ( lab , time_res_art , true ) ;
15216: LD_VAR 0 8
15220: PPUSH
15221: LD_EXP 9
15225: PPUSH
15226: LD_INT 1
15228: PPUSH
15229: CALL_OW 486
// SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
15233: LD_OWVAR 2
15237: PPUSH
15238: LD_INT 1
15240: PPUSH
15241: LD_INT 0
15243: PPUSH
15244: LD_VAR 0 8
15248: PPUSH
15249: CALL_OW 468
// end ; if icon = art_icon then
15253: LD_VAR 0 2
15257: PUSH
15258: LD_EXP 8
15262: EQUAL
15263: IFFALSE 15477
// begin if cr1 in FilterAllUnits ( [ f_type , unit_building ] ) then
15265: LD_VAR 0 3
15269: PUSH
15270: LD_INT 21
15272: PUSH
15273: LD_INT 3
15275: PUSH
15276: EMPTY
15277: LIST
15278: LIST
15279: PPUSH
15280: CALL_OW 69
15284: IN
15285: IFFALSE 15477
// begin side := GetSide ( cr1 ) ;
15287: LD_ADDR_VAR 0 9
15291: PUSH
15292: LD_VAR 0 3
15296: PPUSH
15297: CALL_OW 255
15301: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_siberite_power ] ] ) > 0 then
15302: LD_INT 22
15304: PUSH
15305: LD_VAR 0 9
15309: PUSH
15310: EMPTY
15311: LIST
15312: LIST
15313: PUSH
15314: LD_INT 30
15316: PUSH
15317: LD_INT 28
15319: PUSH
15320: EMPTY
15321: LIST
15322: LIST
15323: PUSH
15324: EMPTY
15325: LIST
15326: LIST
15327: PPUSH
15328: CALL_OW 69
15332: PUSH
15333: LD_INT 0
15335: GREATER
15336: IFFALSE 15477
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_solar_power ] , [ f_btype , b_siberite_power ] ] ] ) do
15338: LD_ADDR_VAR 0 7
15342: PUSH
15343: LD_INT 22
15345: PUSH
15346: LD_VAR 0 9
15350: PUSH
15351: EMPTY
15352: LIST
15353: LIST
15354: PUSH
15355: LD_INT 2
15357: PUSH
15358: LD_INT 30
15360: PUSH
15361: LD_INT 26
15363: PUSH
15364: EMPTY
15365: LIST
15366: LIST
15367: PUSH
15368: LD_INT 30
15370: PUSH
15371: LD_INT 27
15373: PUSH
15374: EMPTY
15375: LIST
15376: LIST
15377: PUSH
15378: LD_INT 30
15380: PUSH
15381: LD_INT 28
15383: PUSH
15384: EMPTY
15385: LIST
15386: LIST
15387: PUSH
15388: EMPTY
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: PUSH
15394: EMPTY
15395: LIST
15396: LIST
15397: PPUSH
15398: CALL_OW 69
15402: PUSH
15403: FOR_IN
15404: IFFALSE 15420
// SetLives ( i , 1 ) ;
15406: LD_VAR 0 7
15410: PPUSH
15411: LD_INT 1
15413: PPUSH
15414: CALL_OW 234
15418: GO 15403
15420: POP
15421: POP
// player_res_art := false ;
15422: LD_ADDR_EXP 6
15426: PUSH
15427: LD_INT 0
15429: ST_TO_ADDR
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
15430: LD_OWVAR 2
15434: PPUSH
15435: LD_EXP 8
15439: PPUSH
15440: LD_INT 1
15442: PPUSH
15443: LD_VAR 0 8
15447: PPUSH
15448: CALL_OW 468
// Wait ( time_to_reuse ) ;
15452: LD_EXP 11
15456: PPUSH
15457: CALL_OW 67
// player_res_art := true ;
15461: LD_ADDR_EXP 6
15465: PUSH
15466: LD_INT 1
15468: ST_TO_ADDR
// medal_enabled := true ;
15469: LD_ADDR_EXP 13
15473: PUSH
15474: LD_INT 1
15476: ST_TO_ADDR
// end ; end ; end ; end ;
15477: PPOPN 9
15479: END
// on SpecResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
15480: LD_VAR 0 1
15484: PPUSH
15485: CALL_OW 255
15489: PUSH
15490: LD_OWVAR 2
15494: EQUAL
15495: IFFALSE 15532
// begin SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
15497: LD_OWVAR 2
15501: PPUSH
15502: LD_INT 1
15504: PPUSH
15505: LD_INT 0
15507: PPUSH
15508: LD_VAR 0 1
15512: PPUSH
15513: CALL_OW 468
// player_artifact_ready := true ;
15517: LD_ADDR_EXP 7
15521: PUSH
15522: LD_INT 1
15524: ST_TO_ADDR
// Hint ( ArtVulcano ) ;
15525: LD_STRING ArtVulcano
15527: PPUSH
15528: CALL_OW 339
// end ; end ;
15532: PPOPN 1
15534: END
// on SpecResearchCancel ( lab , progress ) do begin SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) ;
15535: LD_OWVAR 2
15539: PPUSH
15540: LD_INT 1
15542: PPUSH
15543: LD_INT 2
15545: PPUSH
15546: LD_VAR 0 1
15550: PPUSH
15551: CALL_OW 468
// end ; end_of_file
15555: PPOPN 2
15557: END
// every 0 0$01 do
15558: GO 15560
15560: DISABLE
// begin enable ;
15561: ENABLE
// Display_Strings := [ #tick , tick ] ;
15562: LD_ADDR_OWVAR 47
15566: PUSH
15567: LD_STRING #tick
15569: PUSH
15570: LD_OWVAR 1
15574: PUSH
15575: EMPTY
15576: LIST
15577: LIST
15578: ST_TO_ADDR
// end ; end_of_file
15579: END
// export al_commander , al_force , al_skill ; export function PrepareAlliance ; var i , filter , un , team ; begin
15580: LD_INT 0
15582: PPUSH
15583: PPUSH
15584: PPUSH
15585: PPUSH
15586: PPUSH
// al_skill := [ 7 , 6 , 5 ] [ Difficulty ] ;
15587: LD_ADDR_EXP 39
15591: PUSH
15592: LD_INT 7
15594: PUSH
15595: LD_INT 6
15597: PUSH
15598: LD_INT 5
15600: PUSH
15601: EMPTY
15602: LIST
15603: LIST
15604: LIST
15605: PUSH
15606: LD_OWVAR 67
15610: ARRAY
15611: ST_TO_ADDR
// al_force := [ ] ;
15612: LD_ADDR_EXP 38
15616: PUSH
15617: EMPTY
15618: ST_TO_ADDR
// RemoveAlliance ;
15619: CALL 15997 0 0
// ResetFog ;
15623: CALL_OW 335
// your_side := 7 ;
15627: LD_ADDR_OWVAR 2
15631: PUSH
15632: LD_INT 7
15634: ST_TO_ADDR
// uc_side := 7 ;
15635: LD_ADDR_OWVAR 20
15639: PUSH
15640: LD_INT 7
15642: ST_TO_ADDR
// hc_gallery :=  ;
15643: LD_ADDR_OWVAR 33
15647: PUSH
15648: LD_STRING 
15650: ST_TO_ADDR
// hc_name :=  ;
15651: LD_ADDR_OWVAR 26
15655: PUSH
15656: LD_STRING 
15658: ST_TO_ADDR
// hc_importance := 0 ;
15659: LD_ADDR_OWVAR 32
15663: PUSH
15664: LD_INT 0
15666: ST_TO_ADDR
// for i = 1 to 17 do
15667: LD_ADDR_VAR 0 2
15671: PUSH
15672: DOUBLE
15673: LD_INT 1
15675: DEC
15676: ST_TO_ADDR
15677: LD_INT 17
15679: PUSH
15680: FOR_TO
15681: IFFALSE 15761
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
15683: LD_ADDR_OWVAR 21
15687: PUSH
15688: LD_INT 1
15690: PUSH
15691: LD_INT 3
15693: PUSH
15694: EMPTY
15695: LIST
15696: LIST
15697: PUSH
15698: LD_INT 1
15700: PPUSH
15701: LD_INT 2
15703: PPUSH
15704: CALL_OW 12
15708: ARRAY
15709: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , al_skill ) ;
15710: LD_INT 0
15712: PPUSH
15713: LD_INT 1
15715: PPUSH
15716: LD_INT 4
15718: PPUSH
15719: CALL_OW 12
15723: PPUSH
15724: LD_EXP 39
15728: PPUSH
15729: CALL_OW 380
// un := CreateHuman ;
15733: LD_ADDR_VAR 0 4
15737: PUSH
15738: CALL_OW 44
15742: ST_TO_ADDR
// al_force := al_force ^ un ;
15743: LD_ADDR_EXP 38
15747: PUSH
15748: LD_EXP 38
15752: PUSH
15753: LD_VAR 0 4
15757: ADD
15758: ST_TO_ADDR
// end ;
15759: GO 15680
15761: POP
15762: POP
// hc_importance := 100 ;
15763: LD_ADDR_OWVAR 32
15767: PUSH
15768: LD_INT 100
15770: ST_TO_ADDR
// uc_nation := 1 ;
15771: LD_ADDR_OWVAR 21
15775: PUSH
15776: LD_INT 1
15778: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , al_skill ) ;
15779: LD_INT 1
15781: PPUSH
15782: LD_INT 1
15784: PPUSH
15785: LD_EXP 39
15789: PPUSH
15790: CALL_OW 380
// al_commander := CreateHuman ;
15794: LD_ADDR_EXP 37
15798: PUSH
15799: CALL_OW 44
15803: ST_TO_ADDR
// player_commander := al_commander ;
15804: LD_ADDR_EXP 10
15808: PUSH
15809: LD_EXP 37
15813: ST_TO_ADDR
// team := CharacterSelection ( text , [ 9 , 9 , 8 ] [ Difficulty ] , [ 9 , 9 , 8 ] [ Difficulty ] , [ sel_change_class , al_commander , sel_changeable , sel_not_hired ] ^ al_force , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , class_bazooker , class_sniper ] ) ;
15814: LD_ADDR_VAR 0 5
15818: PUSH
15819: LD_STRING text
15821: PPUSH
15822: LD_INT 9
15824: PUSH
15825: LD_INT 9
15827: PUSH
15828: LD_INT 8
15830: PUSH
15831: EMPTY
15832: LIST
15833: LIST
15834: LIST
15835: PUSH
15836: LD_OWVAR 67
15840: ARRAY
15841: PPUSH
15842: LD_INT 9
15844: PUSH
15845: LD_INT 9
15847: PUSH
15848: LD_INT 8
15850: PUSH
15851: EMPTY
15852: LIST
15853: LIST
15854: LIST
15855: PUSH
15856: LD_OWVAR 67
15860: ARRAY
15861: PPUSH
15862: LD_INT -5
15864: PUSH
15865: LD_EXP 37
15869: PUSH
15870: LD_INT -3
15872: PUSH
15873: LD_INT -2
15875: PUSH
15876: EMPTY
15877: LIST
15878: LIST
15879: LIST
15880: LIST
15881: PUSH
15882: LD_EXP 38
15886: ADD
15887: PPUSH
15888: LD_INT 1
15890: PUSH
15891: LD_INT 3
15893: PUSH
15894: LD_INT 2
15896: PUSH
15897: LD_INT 1
15899: PUSH
15900: EMPTY
15901: LIST
15902: LIST
15903: PUSH
15904: LD_INT 4
15906: PUSH
15907: LD_INT 1
15909: PUSH
15910: EMPTY
15911: LIST
15912: LIST
15913: PUSH
15914: LD_INT 9
15916: PUSH
15917: LD_INT 5
15919: PUSH
15920: EMPTY
15921: LIST
15922: LIST
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: PPUSH
15928: CALL_OW 42
15932: ST_TO_ADDR
// team := team ^ al_commander ;
15933: LD_ADDR_VAR 0 5
15937: PUSH
15938: LD_VAR 0 5
15942: PUSH
15943: LD_EXP 37
15947: ADD
15948: ST_TO_ADDR
// for i = 1 to team do
15949: LD_ADDR_VAR 0 2
15953: PUSH
15954: DOUBLE
15955: LD_INT 1
15957: DEC
15958: ST_TO_ADDR
15959: LD_VAR 0 5
15963: PUSH
15964: FOR_TO
15965: IFFALSE 15990
// PlaceUnitArea ( team [ i ] , south_resp , false ) ;
15967: LD_VAR 0 5
15971: PUSH
15972: LD_VAR 0 2
15976: ARRAY
15977: PPUSH
15978: LD_INT 15
15980: PPUSH
15981: LD_INT 0
15983: PPUSH
15984: CALL_OW 49
15988: GO 15964
15990: POP
15991: POP
// end ;
15992: LD_VAR 0 1
15996: RET
// export function RemoveAlliance ; var i ; begin
15997: LD_INT 0
15999: PPUSH
16000: PPUSH
// DestroyUnit ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
16001: LD_INT 22
16003: PUSH
16004: LD_INT 7
16006: PUSH
16007: EMPTY
16008: LIST
16009: LIST
16010: PUSH
16011: LD_INT 30
16013: PUSH
16014: LD_INT 1
16016: PUSH
16017: EMPTY
16018: LIST
16019: LIST
16020: PUSH
16021: EMPTY
16022: LIST
16023: LIST
16024: PPUSH
16025: CALL_OW 69
16029: PUSH
16030: LD_INT 1
16032: ARRAY
16033: PPUSH
16034: CALL_OW 65
// for i in FilterAllUnits ( [ f_side , 7 ] ) do
16038: LD_ADDR_VAR 0 2
16042: PUSH
16043: LD_INT 22
16045: PUSH
16046: LD_INT 7
16048: PUSH
16049: EMPTY
16050: LIST
16051: LIST
16052: PPUSH
16053: CALL_OW 69
16057: PUSH
16058: FOR_IN
16059: IFFALSE 16072
// RemoveUnit ( i ) ;
16061: LD_VAR 0 2
16065: PPUSH
16066: CALL_OW 64
16070: GO 16058
16072: POP
16073: POP
// end ;
16074: LD_VAR 0 1
16078: RET
// export function PrepareAllianceAI ; var i , un , b ; begin
16079: LD_INT 0
16081: PPUSH
16082: PPUSH
16083: PPUSH
16084: PPUSH
// SetTech ( tech_lapser , 7 , state_researched ) ;
16085: LD_INT 31
16087: PPUSH
16088: LD_INT 7
16090: PPUSH
16091: LD_INT 2
16093: PPUSH
16094: CALL_OW 322
// SetTech ( tech_ai , 7 , state_researched ) ;
16098: LD_INT 32
16100: PPUSH
16101: LD_INT 7
16103: PPUSH
16104: LD_INT 2
16106: PPUSH
16107: CALL_OW 322
// SetTech ( tech_comp3 , 7 , state_researched ) ;
16111: LD_INT 59
16113: PPUSH
16114: LD_INT 7
16116: PPUSH
16117: LD_INT 2
16119: PPUSH
16120: CALL_OW 322
// al_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
16124: LD_ADDR_EXP 39
16128: PUSH
16129: LD_INT 5
16131: PUSH
16132: LD_INT 6
16134: PUSH
16135: LD_INT 7
16137: PUSH
16138: EMPTY
16139: LIST
16140: LIST
16141: LIST
16142: PUSH
16143: LD_OWVAR 67
16147: ARRAY
16148: ST_TO_ADDR
// al_force := [ ] ;
16149: LD_ADDR_EXP 38
16153: PUSH
16154: EMPTY
16155: ST_TO_ADDR
// al_vehs := [ ] ;
16156: LD_ADDR_EXP 44
16160: PUSH
16161: EMPTY
16162: ST_TO_ADDR
// uc_side := 7 ;
16163: LD_ADDR_OWVAR 20
16167: PUSH
16168: LD_INT 7
16170: ST_TO_ADDR
// uc_nation := 1 ;
16171: LD_ADDR_OWVAR 21
16175: PUSH
16176: LD_INT 1
16178: ST_TO_ADDR
// bc_type := b_oil_mine ;
16179: LD_ADDR_OWVAR 42
16183: PUSH
16184: LD_INT 29
16186: ST_TO_ADDR
// b := CreateBuilding ;
16187: LD_ADDR_VAR 0 4
16191: PUSH
16192: CALL_OW 46
16196: ST_TO_ADDR
// PlaceUnitXYR ( b , 61 , 7 , 0 , false ) ;
16197: LD_VAR 0 4
16201: PPUSH
16202: LD_INT 61
16204: PPUSH
16205: LD_INT 7
16207: PPUSH
16208: LD_INT 0
16210: PPUSH
16211: LD_INT 0
16213: PPUSH
16214: CALL_OW 50
// bc_type := b_siberite_mine ;
16218: LD_ADDR_OWVAR 42
16222: PUSH
16223: LD_INT 30
16225: ST_TO_ADDR
// b := CreateBuilding ;
16226: LD_ADDR_VAR 0 4
16230: PUSH
16231: CALL_OW 46
16235: ST_TO_ADDR
// PlaceUnitXYR ( b , 69 , 13 , 0 , false ) ;
16236: LD_VAR 0 4
16240: PPUSH
16241: LD_INT 69
16243: PPUSH
16244: LD_INT 13
16246: PPUSH
16247: LD_INT 0
16249: PPUSH
16250: LD_INT 0
16252: PPUSH
16253: CALL_OW 50
// hc_gallery :=  ;
16257: LD_ADDR_OWVAR 33
16261: PUSH
16262: LD_STRING 
16264: ST_TO_ADDR
// hc_name :=  ;
16265: LD_ADDR_OWVAR 26
16269: PUSH
16270: LD_STRING 
16272: ST_TO_ADDR
// hc_importance := 0 ;
16273: LD_ADDR_OWVAR 32
16277: PUSH
16278: LD_INT 0
16280: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_bunker ] ] ) do
16281: LD_ADDR_VAR 0 2
16285: PUSH
16286: LD_INT 22
16288: PUSH
16289: LD_INT 7
16291: PUSH
16292: EMPTY
16293: LIST
16294: LIST
16295: PUSH
16296: LD_INT 30
16298: PUSH
16299: LD_INT 32
16301: PUSH
16302: EMPTY
16303: LIST
16304: LIST
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: PPUSH
16310: CALL_OW 69
16314: PUSH
16315: FOR_IN
16316: IFFALSE 16386
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
16318: LD_ADDR_OWVAR 21
16322: PUSH
16323: LD_INT 1
16325: PUSH
16326: LD_INT 3
16328: PUSH
16329: EMPTY
16330: LIST
16331: LIST
16332: PUSH
16333: LD_INT 1
16335: PPUSH
16336: LD_INT 2
16338: PPUSH
16339: CALL_OW 12
16343: ARRAY
16344: ST_TO_ADDR
// PrepareHuman ( false , 1 , al_skill ) ;
16345: LD_INT 0
16347: PPUSH
16348: LD_INT 1
16350: PPUSH
16351: LD_EXP 39
16355: PPUSH
16356: CALL_OW 380
// un := CreateHuman ;
16360: LD_ADDR_VAR 0 3
16364: PUSH
16365: CALL_OW 44
16369: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
16370: LD_VAR 0 3
16374: PPUSH
16375: LD_VAR 0 2
16379: PPUSH
16380: CALL_OW 52
// end ;
16384: GO 16315
16386: POP
16387: POP
// for i = 1 to 3 do
16388: LD_ADDR_VAR 0 2
16392: PUSH
16393: DOUBLE
16394: LD_INT 1
16396: DEC
16397: ST_TO_ADDR
16398: LD_INT 3
16400: PUSH
16401: FOR_TO
16402: IFFALSE 16470
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
16404: LD_ADDR_OWVAR 21
16408: PUSH
16409: LD_INT 1
16411: PUSH
16412: LD_INT 3
16414: PUSH
16415: EMPTY
16416: LIST
16417: LIST
16418: PUSH
16419: LD_INT 1
16421: PPUSH
16422: LD_INT 2
16424: PPUSH
16425: CALL_OW 12
16429: ARRAY
16430: ST_TO_ADDR
// PrepareHuman ( false , 4 , al_skill ) ;
16431: LD_INT 0
16433: PPUSH
16434: LD_INT 4
16436: PPUSH
16437: LD_EXP 39
16441: PPUSH
16442: CALL_OW 380
// un := CreateHuman ;
16446: LD_ADDR_VAR 0 3
16450: PUSH
16451: CALL_OW 44
16455: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_lab1 ) ;
16456: LD_VAR 0 3
16460: PPUSH
16461: LD_INT 164
16463: PPUSH
16464: CALL_OW 52
// end ;
16468: GO 16401
16470: POP
16471: POP
// for i = 1 to 6 do
16472: LD_ADDR_VAR 0 2
16476: PUSH
16477: DOUBLE
16478: LD_INT 1
16480: DEC
16481: ST_TO_ADDR
16482: LD_INT 6
16484: PUSH
16485: FOR_TO
16486: IFFALSE 16577
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
16488: LD_ADDR_OWVAR 21
16492: PUSH
16493: LD_INT 1
16495: PUSH
16496: LD_INT 3
16498: PUSH
16499: EMPTY
16500: LIST
16501: LIST
16502: PUSH
16503: LD_INT 1
16505: PPUSH
16506: LD_INT 2
16508: PPUSH
16509: CALL_OW 12
16513: ARRAY
16514: ST_TO_ADDR
// PrepareHuman ( false , [ class_sniper , class_bazooker , class_bazooker ] [ Rand ( 1 , 3 ) ] , al_skill ) ;
16515: LD_INT 0
16517: PPUSH
16518: LD_INT 5
16520: PUSH
16521: LD_INT 9
16523: PUSH
16524: LD_INT 9
16526: PUSH
16527: EMPTY
16528: LIST
16529: LIST
16530: LIST
16531: PUSH
16532: LD_INT 1
16534: PPUSH
16535: LD_INT 3
16537: PPUSH
16538: CALL_OW 12
16542: ARRAY
16543: PPUSH
16544: LD_EXP 39
16548: PPUSH
16549: CALL_OW 380
// un := CreateHuman ;
16553: LD_ADDR_VAR 0 3
16557: PUSH
16558: CALL_OW 44
16562: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_bar ) ;
16563: LD_VAR 0 3
16567: PPUSH
16568: LD_INT 173
16570: PPUSH
16571: CALL_OW 52
// end ;
16575: GO 16485
16577: POP
16578: POP
// for i = 1 to 6 do
16579: LD_ADDR_VAR 0 2
16583: PUSH
16584: DOUBLE
16585: LD_INT 1
16587: DEC
16588: ST_TO_ADDR
16589: LD_INT 6
16591: PUSH
16592: FOR_TO
16593: IFFALSE 16691
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
16595: LD_ADDR_OWVAR 21
16599: PUSH
16600: LD_INT 1
16602: PUSH
16603: LD_INT 3
16605: PUSH
16606: EMPTY
16607: LIST
16608: LIST
16609: PUSH
16610: LD_INT 1
16612: PPUSH
16613: LD_INT 2
16615: PPUSH
16616: CALL_OW 12
16620: ARRAY
16621: ST_TO_ADDR
// PrepareHuman ( false , 3 , al_skill ) ;
16622: LD_INT 0
16624: PPUSH
16625: LD_INT 3
16627: PPUSH
16628: LD_EXP 39
16632: PPUSH
16633: CALL_OW 380
// un := CreateHuman ;
16637: LD_ADDR_VAR 0 3
16641: PUSH
16642: CALL_OW 44
16646: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
16647: LD_VAR 0 3
16651: PPUSH
16652: LD_INT 22
16654: PUSH
16655: LD_INT 7
16657: PUSH
16658: EMPTY
16659: LIST
16660: LIST
16661: PUSH
16662: LD_INT 30
16664: PUSH
16665: LD_INT 3
16667: PUSH
16668: EMPTY
16669: LIST
16670: LIST
16671: PUSH
16672: EMPTY
16673: LIST
16674: LIST
16675: PPUSH
16676: CALL_OW 69
16680: PUSH
16681: LD_INT 1
16683: ARRAY
16684: PPUSH
16685: CALL_OW 52
// end ;
16689: GO 16592
16691: POP
16692: POP
// for i = 1 to 4 do
16693: LD_ADDR_VAR 0 2
16697: PUSH
16698: DOUBLE
16699: LD_INT 1
16701: DEC
16702: ST_TO_ADDR
16703: LD_INT 4
16705: PUSH
16706: FOR_TO
16707: IFFALSE 16775
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
16709: LD_ADDR_OWVAR 21
16713: PUSH
16714: LD_INT 1
16716: PUSH
16717: LD_INT 3
16719: PUSH
16720: EMPTY
16721: LIST
16722: LIST
16723: PUSH
16724: LD_INT 1
16726: PPUSH
16727: LD_INT 2
16729: PPUSH
16730: CALL_OW 12
16734: ARRAY
16735: ST_TO_ADDR
// PrepareHuman ( false , 2 , al_skill ) ;
16736: LD_INT 0
16738: PPUSH
16739: LD_INT 2
16741: PPUSH
16742: LD_EXP 39
16746: PPUSH
16747: CALL_OW 380
// un := CreateHuman ;
16751: LD_ADDR_VAR 0 3
16755: PUSH
16756: CALL_OW 44
16760: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_depot ) ;
16761: LD_VAR 0 3
16765: PPUSH
16766: LD_INT 162
16768: PPUSH
16769: CALL_OW 52
// end ;
16773: GO 16706
16775: POP
16776: POP
// uc_nation := 3 ;
16777: LD_ADDR_OWVAR 21
16781: PUSH
16782: LD_INT 3
16784: ST_TO_ADDR
// vc_chassis := ru_medium_wheeled ;
16785: LD_ADDR_OWVAR 37
16789: PUSH
16790: LD_INT 21
16792: ST_TO_ADDR
// vc_engine := engine_siberite ;
16793: LD_ADDR_OWVAR 39
16797: PUSH
16798: LD_INT 3
16800: ST_TO_ADDR
// vc_control := control_computer ;
16801: LD_ADDR_OWVAR 38
16805: PUSH
16806: LD_INT 3
16808: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
16809: LD_ADDR_OWVAR 40
16813: PUSH
16814: LD_INT 51
16816: ST_TO_ADDR
// PlaceUnitXY ( CreateVehicle , 49 , 13 , false ) ;
16817: CALL_OW 45
16821: PPUSH
16822: LD_INT 49
16824: PPUSH
16825: LD_INT 13
16827: PPUSH
16828: LD_INT 0
16830: PPUSH
16831: CALL_OW 48
// al_turrets := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_turret ] ] ) ;
16835: LD_ADDR_EXP 46
16839: PUSH
16840: LD_INT 22
16842: PUSH
16843: LD_INT 7
16845: PUSH
16846: EMPTY
16847: LIST
16848: LIST
16849: PUSH
16850: LD_INT 30
16852: PUSH
16853: LD_INT 33
16855: PUSH
16856: EMPTY
16857: LIST
16858: LIST
16859: PUSH
16860: EMPTY
16861: LIST
16862: LIST
16863: PPUSH
16864: CALL_OW 69
16868: ST_TO_ADDR
// for i = 1 to FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_btype , b_turret ] , [ f_bweapon , 0 ] ] ] ) do
16869: LD_ADDR_VAR 0 2
16873: PUSH
16874: DOUBLE
16875: LD_INT 1
16877: DEC
16878: ST_TO_ADDR
16879: LD_INT 22
16881: PUSH
16882: LD_INT 7
16884: PUSH
16885: EMPTY
16886: LIST
16887: LIST
16888: PUSH
16889: LD_INT 30
16891: PUSH
16892: LD_INT 33
16894: PUSH
16895: EMPTY
16896: LIST
16897: LIST
16898: PUSH
16899: LD_INT 35
16901: PUSH
16902: LD_INT 0
16904: PUSH
16905: EMPTY
16906: LIST
16907: LIST
16908: PUSH
16909: EMPTY
16910: LIST
16911: LIST
16912: LIST
16913: PUSH
16914: EMPTY
16915: LIST
16916: PPUSH
16917: CALL_OW 69
16921: PUSH
16922: FOR_TO
16923: IFFALSE 16983
// AddComPlaceWeapon ( FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_btype , b_turret ] , [ f_bweapon , 0 ] ] ] ) [ i ] , ru_time_lapser ) ;
16925: LD_INT 22
16927: PUSH
16928: LD_INT 7
16930: PUSH
16931: EMPTY
16932: LIST
16933: LIST
16934: PUSH
16935: LD_INT 30
16937: PUSH
16938: LD_INT 33
16940: PUSH
16941: EMPTY
16942: LIST
16943: LIST
16944: PUSH
16945: LD_INT 35
16947: PUSH
16948: LD_INT 0
16950: PUSH
16951: EMPTY
16952: LIST
16953: LIST
16954: PUSH
16955: EMPTY
16956: LIST
16957: LIST
16958: LIST
16959: PUSH
16960: EMPTY
16961: LIST
16962: PPUSH
16963: CALL_OW 69
16967: PUSH
16968: LD_VAR 0 2
16972: ARRAY
16973: PPUSH
16974: LD_INT 49
16976: PPUSH
16977: CALL_OW 208
16981: GO 16922
16983: POP
16984: POP
// end ;
16985: LD_VAR 0 1
16989: RET
// export al_eng , al_sold , al_mech , al_sci ; export al_vehs , al_cargo , al_turrets ; export al_dep , al_lab , al_fac ; export al_bul ; every 0 0$01 trigger your_side = 1 do var i , un , veh , cr ;
16990: LD_OWVAR 2
16994: PUSH
16995: LD_INT 1
16997: EQUAL
16998: IFFALSE 18166
17000: GO 17002
17002: DISABLE
17003: LD_INT 0
17005: PPUSH
17006: PPUSH
17007: PPUSH
17008: PPUSH
// begin enable ;
17009: ENABLE
// al_bul := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] ] ) ;
17010: LD_ADDR_EXP 50
17014: PUSH
17015: LD_INT 22
17017: PUSH
17018: LD_INT 7
17020: PUSH
17021: EMPTY
17022: LIST
17023: LIST
17024: PUSH
17025: LD_INT 21
17027: PUSH
17028: LD_INT 3
17030: PUSH
17031: EMPTY
17032: LIST
17033: LIST
17034: PUSH
17035: EMPTY
17036: LIST
17037: LIST
17038: PPUSH
17039: CALL_OW 69
17043: ST_TO_ADDR
// al_lab := [ al_lab1 , al_lab2 ] ;
17044: LD_ADDR_EXP 48
17048: PUSH
17049: LD_INT 164
17051: PUSH
17052: LD_INT 197
17054: PUSH
17055: EMPTY
17056: LIST
17057: LIST
17058: ST_TO_ADDR
// al_dep := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
17059: LD_ADDR_EXP 47
17063: PUSH
17064: LD_INT 22
17066: PUSH
17067: LD_INT 7
17069: PUSH
17070: EMPTY
17071: LIST
17072: LIST
17073: PUSH
17074: LD_INT 30
17076: PUSH
17077: LD_INT 1
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: PUSH
17084: EMPTY
17085: LIST
17086: LIST
17087: PPUSH
17088: CALL_OW 69
17092: PUSH
17093: LD_INT 1
17095: ARRAY
17096: ST_TO_ADDR
// al_fac := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
17097: LD_ADDR_EXP 49
17101: PUSH
17102: LD_INT 22
17104: PUSH
17105: LD_INT 7
17107: PUSH
17108: EMPTY
17109: LIST
17110: LIST
17111: PUSH
17112: LD_INT 30
17114: PUSH
17115: LD_INT 3
17117: PUSH
17118: EMPTY
17119: LIST
17120: LIST
17121: PUSH
17122: EMPTY
17123: LIST
17124: LIST
17125: PPUSH
17126: CALL_OW 69
17130: PUSH
17131: LD_INT 1
17133: ARRAY
17134: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) then
17135: LD_INT 22
17137: PUSH
17138: LD_INT 7
17140: PUSH
17141: EMPTY
17142: LIST
17143: LIST
17144: PUSH
17145: LD_INT 34
17147: PUSH
17148: LD_INT 51
17150: PUSH
17151: EMPTY
17152: LIST
17153: LIST
17154: PUSH
17155: EMPTY
17156: LIST
17157: LIST
17158: PPUSH
17159: CALL_OW 69
17163: IFFALSE 17203
// al_cargo := FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
17165: LD_ADDR_EXP 45
17169: PUSH
17170: LD_INT 22
17172: PUSH
17173: LD_INT 7
17175: PUSH
17176: EMPTY
17177: LIST
17178: LIST
17179: PUSH
17180: LD_INT 34
17182: PUSH
17183: LD_INT 51
17185: PUSH
17186: EMPTY
17187: LIST
17188: LIST
17189: PUSH
17190: EMPTY
17191: LIST
17192: LIST
17193: PPUSH
17194: CALL_OW 69
17198: PUSH
17199: LD_INT 1
17201: ARRAY
17202: ST_TO_ADDR
// al_sold := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , class_bazooker ] ] ) ;
17203: LD_ADDR_EXP 41
17207: PUSH
17208: LD_INT 22
17210: PUSH
17211: LD_INT 7
17213: PUSH
17214: EMPTY
17215: LIST
17216: LIST
17217: PUSH
17218: LD_INT 25
17220: PUSH
17221: LD_INT 9
17223: PUSH
17224: EMPTY
17225: LIST
17226: LIST
17227: PUSH
17228: EMPTY
17229: LIST
17230: LIST
17231: PPUSH
17232: CALL_OW 69
17236: ST_TO_ADDR
// al_eng := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 2 ] ] ) ;
17237: LD_ADDR_EXP 40
17241: PUSH
17242: LD_INT 22
17244: PUSH
17245: LD_INT 7
17247: PUSH
17248: EMPTY
17249: LIST
17250: LIST
17251: PUSH
17252: LD_INT 25
17254: PUSH
17255: LD_INT 2
17257: PUSH
17258: EMPTY
17259: LIST
17260: LIST
17261: PUSH
17262: EMPTY
17263: LIST
17264: LIST
17265: PPUSH
17266: CALL_OW 69
17270: ST_TO_ADDR
// al_mech := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 3 ] ] ) ;
17271: LD_ADDR_EXP 42
17275: PUSH
17276: LD_INT 22
17278: PUSH
17279: LD_INT 7
17281: PUSH
17282: EMPTY
17283: LIST
17284: LIST
17285: PUSH
17286: LD_INT 25
17288: PUSH
17289: LD_INT 3
17291: PUSH
17292: EMPTY
17293: LIST
17294: LIST
17295: PUSH
17296: EMPTY
17297: LIST
17298: LIST
17299: PPUSH
17300: CALL_OW 69
17304: ST_TO_ADDR
// al_sci := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 4 ] ] ) ;
17305: LD_ADDR_EXP 43
17309: PUSH
17310: LD_INT 22
17312: PUSH
17313: LD_INT 7
17315: PUSH
17316: EMPTY
17317: LIST
17318: LIST
17319: PUSH
17320: LD_INT 25
17322: PUSH
17323: LD_INT 4
17325: PUSH
17326: EMPTY
17327: LIST
17328: LIST
17329: PUSH
17330: EMPTY
17331: LIST
17332: LIST
17333: PPUSH
17334: CALL_OW 69
17338: ST_TO_ADDR
// IntBazooka ( al_sold , FilterAllUnits ( [ f_enemy , 7 ] ) ) ;
17339: LD_EXP 41
17343: PPUSH
17344: LD_INT 81
17346: PUSH
17347: LD_INT 7
17349: PUSH
17350: EMPTY
17351: LIST
17352: LIST
17353: PPUSH
17354: CALL_OW 69
17358: PPUSH
17359: CALL 1663 0 2
// if not HasTask ( al_cargo ) and GetCargo ( al_cargo , mat_cans ) < 100 then
17363: LD_EXP 45
17367: PPUSH
17368: CALL_OW 314
17372: NOT
17373: PUSH
17374: LD_EXP 45
17378: PPUSH
17379: LD_INT 1
17381: PPUSH
17382: CALL_OW 289
17386: PUSH
17387: LD_INT 100
17389: LESS
17390: AND
17391: IFFALSE 17439
// begin cr := GetListOfCratesInArea ( us_crates ) ;
17393: LD_ADDR_VAR 0 4
17397: PUSH
17398: LD_INT 12
17400: PPUSH
17401: CALL_OW 435
17405: ST_TO_ADDR
// if cr then
17406: LD_VAR 0 4
17410: IFFALSE 17439
// ComCollect ( al_cargo , cr [ 1 ] , cr [ 2 ] ) ;
17412: LD_EXP 45
17416: PPUSH
17417: LD_VAR 0 4
17421: PUSH
17422: LD_INT 1
17424: ARRAY
17425: PPUSH
17426: LD_VAR 0 4
17430: PUSH
17431: LD_INT 2
17433: ARRAY
17434: PPUSH
17435: CALL_OW 117
// end ; if UnitFilter ( al_bul , [ f_not , [ f_lives , 1000 ] ] ) then
17439: LD_EXP 50
17443: PPUSH
17444: LD_INT 3
17446: PUSH
17447: LD_INT 24
17449: PUSH
17450: LD_INT 1000
17452: PUSH
17453: EMPTY
17454: LIST
17455: LIST
17456: PUSH
17457: EMPTY
17458: LIST
17459: LIST
17460: PPUSH
17461: CALL_OW 72
17465: IFFALSE 17595
// begin if al_eng then
17467: LD_EXP 40
17471: IFFALSE 17593
// for i = 1 to al_eng do
17473: LD_ADDR_VAR 0 1
17477: PUSH
17478: DOUBLE
17479: LD_INT 1
17481: DEC
17482: ST_TO_ADDR
17483: LD_EXP 40
17487: PUSH
17488: FOR_TO
17489: IFFALSE 17591
// if IsInUnit ( al_eng [ i ] ) then
17491: LD_EXP 40
17495: PUSH
17496: LD_VAR 0 1
17500: ARRAY
17501: PPUSH
17502: CALL_OW 310
17506: IFFALSE 17525
// ComExitBuilding ( al_eng [ i ] ) else
17508: LD_EXP 40
17512: PUSH
17513: LD_VAR 0 1
17517: ARRAY
17518: PPUSH
17519: CALL_OW 122
17523: GO 17589
// if not HasTask ( al_eng [ i ] ) then
17525: LD_EXP 40
17529: PUSH
17530: LD_VAR 0 1
17534: ARRAY
17535: PPUSH
17536: CALL_OW 314
17540: NOT
17541: IFFALSE 17589
// ComRepairBuilding ( al_eng [ i ] , UnitFilter ( al_bul , [ f_not , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
17543: LD_EXP 40
17547: PUSH
17548: LD_VAR 0 1
17552: ARRAY
17553: PPUSH
17554: LD_EXP 50
17558: PPUSH
17559: LD_INT 3
17561: PUSH
17562: LD_INT 24
17564: PUSH
17565: LD_INT 1000
17567: PUSH
17568: EMPTY
17569: LIST
17570: LIST
17571: PUSH
17572: EMPTY
17573: LIST
17574: LIST
17575: PPUSH
17576: CALL_OW 72
17580: PUSH
17581: LD_INT 1
17583: ARRAY
17584: PPUSH
17585: CALL_OW 130
17589: GO 17488
17591: POP
17592: POP
// end else
17593: GO 17677
// if al_eng then
17595: LD_EXP 40
17599: IFFALSE 17677
// if not IsInUnit ( al_eng [ 1 ] ) then
17601: LD_EXP 40
17605: PUSH
17606: LD_INT 1
17608: ARRAY
17609: PPUSH
17610: CALL_OW 310
17614: NOT
17615: IFFALSE 17677
// for i = 1 to al_eng do
17617: LD_ADDR_VAR 0 1
17621: PUSH
17622: DOUBLE
17623: LD_INT 1
17625: DEC
17626: ST_TO_ADDR
17627: LD_EXP 40
17631: PUSH
17632: FOR_TO
17633: IFFALSE 17675
// if not IsInUnit ( al_eng [ i ] ) then
17635: LD_EXP 40
17639: PUSH
17640: LD_VAR 0 1
17644: ARRAY
17645: PPUSH
17646: CALL_OW 310
17650: NOT
17651: IFFALSE 17673
// ComEnterUnit ( al_eng [ i ] , al_dep ) ;
17653: LD_EXP 40
17657: PUSH
17658: LD_VAR 0 1
17662: ARRAY
17663: PPUSH
17664: LD_EXP 47
17668: PPUSH
17669: CALL_OW 120
17673: GO 17632
17675: POP
17676: POP
// if al_vehs then
17677: LD_EXP 44
17681: IFFALSE 17781
// if BuildingStatus ( al_fac ) = bs_idle then
17683: LD_EXP 49
17687: PPUSH
17688: CALL_OW 461
17692: PUSH
17693: LD_INT 2
17695: EQUAL
17696: IFFALSE 17781
// begin ComConstruct ( al_fac , al_vehs [ 1 ] , al_vehs [ 2 ] , al_vehs [ 3 ] , al_vehs [ 4 ] ) ;
17698: LD_EXP 49
17702: PPUSH
17703: LD_EXP 44
17707: PUSH
17708: LD_INT 1
17710: ARRAY
17711: PPUSH
17712: LD_EXP 44
17716: PUSH
17717: LD_INT 2
17719: ARRAY
17720: PPUSH
17721: LD_EXP 44
17725: PUSH
17726: LD_INT 3
17728: ARRAY
17729: PPUSH
17730: LD_EXP 44
17734: PUSH
17735: LD_INT 4
17737: ARRAY
17738: PPUSH
17739: CALL_OW 125
// for i = 1 to 4 do
17743: LD_ADDR_VAR 0 1
17747: PUSH
17748: DOUBLE
17749: LD_INT 1
17751: DEC
17752: ST_TO_ADDR
17753: LD_INT 4
17755: PUSH
17756: FOR_TO
17757: IFFALSE 17779
// al_vehs := Delete ( al_vehs , 1 ) ;
17759: LD_ADDR_EXP 44
17763: PUSH
17764: LD_EXP 44
17768: PPUSH
17769: LD_INT 1
17771: PPUSH
17772: CALL_OW 3
17776: ST_TO_ADDR
17777: GO 17756
17779: POP
17780: POP
// end ; if al_force = 0 and tick mod 23100 = 0 then
17781: LD_EXP 38
17785: PUSH
17786: LD_INT 0
17788: EQUAL
17789: PUSH
17790: LD_OWVAR 1
17794: PUSH
17795: LD_INT 23100
17797: MOD
17798: PUSH
17799: LD_INT 0
17801: EQUAL
17802: AND
17803: IFFALSE 17917
// begin for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
17805: LD_ADDR_VAR 0 1
17809: PUSH
17810: DOUBLE
17811: LD_INT 1
17813: DEC
17814: ST_TO_ADDR
17815: LD_INT 4
17817: PUSH
17818: LD_INT 5
17820: PUSH
17821: LD_INT 6
17823: PUSH
17824: EMPTY
17825: LIST
17826: LIST
17827: LIST
17828: PUSH
17829: LD_OWVAR 67
17833: ARRAY
17834: PUSH
17835: FOR_TO
17836: IFFALSE 17915
// begin al_vehs := al_vehs ^ ru_heavy_wheeled ;
17838: LD_ADDR_EXP 44
17842: PUSH
17843: LD_EXP 44
17847: PUSH
17848: LD_INT 23
17850: ADD
17851: ST_TO_ADDR
// al_vehs := al_vehs ^ engine_combustion ;
17852: LD_ADDR_EXP 44
17856: PUSH
17857: LD_EXP 44
17861: PUSH
17862: LD_INT 1
17864: ADD
17865: ST_TO_ADDR
// al_vehs := al_vehs ^ control_computer ;
17866: LD_ADDR_EXP 44
17870: PUSH
17871: LD_EXP 44
17875: PUSH
17876: LD_INT 3
17878: ADD
17879: ST_TO_ADDR
// al_vehs := al_vehs ^ [ ru_heavy_gun , ru_rocket ] [ Rand ( 1 , 2 ) ] ;
17880: LD_ADDR_EXP 44
17884: PUSH
17885: LD_EXP 44
17889: PUSH
17890: LD_INT 46
17892: PUSH
17893: LD_INT 47
17895: PUSH
17896: EMPTY
17897: LIST
17898: LIST
17899: PUSH
17900: LD_INT 1
17902: PPUSH
17903: LD_INT 2
17905: PPUSH
17906: CALL_OW 12
17910: ARRAY
17911: ADD
17912: ST_TO_ADDR
// end ;
17913: GO 17835
17915: POP
17916: POP
// end ; if FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 then
17917: LD_INT 22
17919: PUSH
17920: LD_INT 7
17922: PUSH
17923: EMPTY
17924: LIST
17925: LIST
17926: PUSH
17927: LD_INT 34
17929: PUSH
17930: LD_INT 51
17932: PUSH
17933: EMPTY
17934: LIST
17935: LIST
17936: PUSH
17937: EMPTY
17938: LIST
17939: LIST
17940: PPUSH
17941: CALL_OW 69
17945: PUSH
17946: LD_INT 0
17948: EQUAL
17949: IFFALSE 17972
// ComConstruct ( al_fac , ru_medium_wheeled , engine_combustion , control_computer , ru_cargo_bay ) ;
17951: LD_EXP 49
17955: PPUSH
17956: LD_INT 21
17958: PPUSH
17959: LD_INT 1
17961: PPUSH
17962: LD_INT 3
17964: PPUSH
17965: LD_INT 51
17967: PPUSH
17968: CALL_OW 125
// if al_force and tick mod 25200 = 0 then
17972: LD_EXP 38
17976: PUSH
17977: LD_OWVAR 1
17981: PUSH
17982: LD_INT 25200
17984: MOD
17985: PUSH
17986: LD_INT 0
17988: EQUAL
17989: AND
17990: IFFALSE 18053
// begin for i = 1 to al_force do
17992: LD_ADDR_VAR 0 1
17996: PUSH
17997: DOUBLE
17998: LD_INT 1
18000: DEC
18001: ST_TO_ADDR
18002: LD_EXP 38
18006: PUSH
18007: FOR_TO
18008: IFFALSE 18051
// if GetTag ( al_force [ i ] ) <> 11 then
18010: LD_EXP 38
18014: PUSH
18015: LD_VAR 0 1
18019: ARRAY
18020: PPUSH
18021: CALL_OW 110
18025: PUSH
18026: LD_INT 11
18028: NONEQUAL
18029: IFFALSE 18049
// SetTag ( al_force [ i ] , 11 ) ;
18031: LD_EXP 38
18035: PUSH
18036: LD_VAR 0 1
18040: ARRAY
18041: PPUSH
18042: LD_INT 11
18044: PPUSH
18045: CALL_OW 109
18049: GO 18007
18051: POP
18052: POP
// end ; if al_force then
18053: LD_EXP 38
18057: IFFALSE 18166
// for i = 1 to al_force do
18059: LD_ADDR_VAR 0 1
18063: PUSH
18064: DOUBLE
18065: LD_INT 1
18067: DEC
18068: ST_TO_ADDR
18069: LD_EXP 38
18073: PUSH
18074: FOR_TO
18075: IFFALSE 18164
// begin if GetTag ( al_force [ i ] ) = 11 then
18077: LD_EXP 38
18081: PUSH
18082: LD_VAR 0 1
18086: ARRAY
18087: PPUSH
18088: CALL_OW 110
18092: PUSH
18093: LD_INT 11
18095: EQUAL
18096: IFFALSE 18162
// begin if not HasTask ( al_force [ i ] ) then
18098: LD_EXP 38
18102: PUSH
18103: LD_VAR 0 1
18107: ARRAY
18108: PPUSH
18109: CALL_OW 314
18113: NOT
18114: IFFALSE 18162
// ComAttackUnit ( al_force [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 7 ] ) , al_force [ i ] ) ) ;
18116: LD_EXP 38
18120: PUSH
18121: LD_VAR 0 1
18125: ARRAY
18126: PPUSH
18127: LD_INT 81
18129: PUSH
18130: LD_INT 7
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: PPUSH
18137: CALL_OW 69
18141: PPUSH
18142: LD_EXP 38
18146: PUSH
18147: LD_VAR 0 1
18151: ARRAY
18152: PPUSH
18153: CALL_OW 74
18157: PPUSH
18158: CALL_OW 115
// end ; end ;
18162: GO 18074
18164: POP
18165: POP
// end ; end_of_file
18166: PPOPN 4
18168: END
// export ar_commander , ar_force , ar_skill ; export function PrepareArabian ; var i , filter , un , team ; begin
18169: LD_INT 0
18171: PPUSH
18172: PPUSH
18173: PPUSH
18174: PPUSH
18175: PPUSH
// ar_skill := [ 9 , 8 , 7 ] [ Difficulty ] ;
18176: LD_ADDR_EXP 53
18180: PUSH
18181: LD_INT 9
18183: PUSH
18184: LD_INT 8
18186: PUSH
18187: LD_INT 7
18189: PUSH
18190: EMPTY
18191: LIST
18192: LIST
18193: LIST
18194: PUSH
18195: LD_OWVAR 67
18199: ARRAY
18200: ST_TO_ADDR
// ar_force := [ ] ;
18201: LD_ADDR_EXP 52
18205: PUSH
18206: EMPTY
18207: ST_TO_ADDR
// RemoveAlliance ;
18208: CALL 15997 0 0
// RemoveEnvironmentArea ( evn ) ;
18212: LD_INT 17
18214: PPUSH
18215: CALL_OW 355
// your_side := 2 ;
18219: LD_ADDR_OWVAR 2
18223: PUSH
18224: LD_INT 2
18226: ST_TO_ADDR
// uc_side := 2 ;
18227: LD_ADDR_OWVAR 20
18231: PUSH
18232: LD_INT 2
18234: ST_TO_ADDR
// uc_nation := nation_arabian ;
18235: LD_ADDR_OWVAR 21
18239: PUSH
18240: LD_INT 2
18242: ST_TO_ADDR
// hc_gallery :=  ;
18243: LD_ADDR_OWVAR 33
18247: PUSH
18248: LD_STRING 
18250: ST_TO_ADDR
// hc_name :=  ;
18251: LD_ADDR_OWVAR 26
18255: PUSH
18256: LD_STRING 
18258: ST_TO_ADDR
// hc_importance := 0 ;
18259: LD_ADDR_OWVAR 32
18263: PUSH
18264: LD_INT 0
18266: ST_TO_ADDR
// for i = 1 to 20 do
18267: LD_ADDR_VAR 0 2
18271: PUSH
18272: DOUBLE
18273: LD_INT 1
18275: DEC
18276: ST_TO_ADDR
18277: LD_INT 20
18279: PUSH
18280: FOR_TO
18281: IFFALSE 18346
// begin PrepareHuman ( false , Rand ( 1 , 4 ) , ar_skill ) ;
18283: LD_INT 0
18285: PPUSH
18286: LD_INT 1
18288: PPUSH
18289: LD_INT 4
18291: PPUSH
18292: CALL_OW 12
18296: PPUSH
18297: LD_EXP 53
18301: PPUSH
18302: CALL_OW 380
// un := CreateHuman ;
18306: LD_ADDR_VAR 0 4
18310: PUSH
18311: CALL_OW 44
18315: ST_TO_ADDR
// SetDir ( un , 2 ) ;
18316: LD_VAR 0 4
18320: PPUSH
18321: LD_INT 2
18323: PPUSH
18324: CALL_OW 233
// ar_force := ar_force ^ un ;
18328: LD_ADDR_EXP 52
18332: PUSH
18333: LD_EXP 52
18337: PUSH
18338: LD_VAR 0 4
18342: ADD
18343: ST_TO_ADDR
// end ;
18344: GO 18280
18346: POP
18347: POP
// hc_importance := 100 ;
18348: LD_ADDR_OWVAR 32
18352: PUSH
18353: LD_INT 100
18355: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , ar_skill ) ;
18356: LD_INT 1
18358: PPUSH
18359: LD_INT 11
18361: PPUSH
18362: LD_EXP 53
18366: PPUSH
18367: CALL_OW 380
// ar_commander := CreateHuman ;
18371: LD_ADDR_EXP 51
18375: PUSH
18376: CALL_OW 44
18380: ST_TO_ADDR
// SetDir ( ar_commander , 2 ) ;
18381: LD_EXP 51
18385: PPUSH
18386: LD_INT 2
18388: PPUSH
18389: CALL_OW 233
// player_commander := ar_commander ;
18393: LD_ADDR_EXP 10
18397: PUSH
18398: LD_EXP 51
18402: ST_TO_ADDR
// team := CharacterSelection ( text , [ 14 , 13 , 12 ] [ Difficulty ] , [ 14 , 13 , 12 ] [ Difficulty ] , [ sel_change_class , ar_commander , sel_changeable , sel_not_hired ] ^ ar_force , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , class_mortar ] ) ;
18403: LD_ADDR_VAR 0 5
18407: PUSH
18408: LD_STRING text
18410: PPUSH
18411: LD_INT 14
18413: PUSH
18414: LD_INT 13
18416: PUSH
18417: LD_INT 12
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: LIST
18424: PUSH
18425: LD_OWVAR 67
18429: ARRAY
18430: PPUSH
18431: LD_INT 14
18433: PUSH
18434: LD_INT 13
18436: PUSH
18437: LD_INT 12
18439: PUSH
18440: EMPTY
18441: LIST
18442: LIST
18443: LIST
18444: PUSH
18445: LD_OWVAR 67
18449: ARRAY
18450: PPUSH
18451: LD_INT -5
18453: PUSH
18454: LD_EXP 51
18458: PUSH
18459: LD_INT -3
18461: PUSH
18462: LD_INT -2
18464: PUSH
18465: EMPTY
18466: LIST
18467: LIST
18468: LIST
18469: LIST
18470: PUSH
18471: LD_EXP 52
18475: ADD
18476: PPUSH
18477: LD_INT 1
18479: PUSH
18480: LD_INT 3
18482: PUSH
18483: LD_INT 2
18485: PUSH
18486: LD_INT 1
18488: PUSH
18489: EMPTY
18490: LIST
18491: LIST
18492: PUSH
18493: LD_INT 4
18495: PUSH
18496: LD_INT 1
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: PUSH
18503: LD_INT 8
18505: PUSH
18506: EMPTY
18507: LIST
18508: LIST
18509: LIST
18510: LIST
18511: LIST
18512: PPUSH
18513: CALL_OW 42
18517: ST_TO_ADDR
// team := team ^ ar_commander ;
18518: LD_ADDR_VAR 0 5
18522: PUSH
18523: LD_VAR 0 5
18527: PUSH
18528: LD_EXP 51
18532: ADD
18533: ST_TO_ADDR
// for i = 1 to team do
18534: LD_ADDR_VAR 0 2
18538: PUSH
18539: DOUBLE
18540: LD_INT 1
18542: DEC
18543: ST_TO_ADDR
18544: LD_VAR 0 5
18548: PUSH
18549: FOR_TO
18550: IFFALSE 18575
// PlaceUnitArea ( team [ i ] , center_resp , false ) ;
18552: LD_VAR 0 5
18556: PUSH
18557: LD_VAR 0 2
18561: ARRAY
18562: PPUSH
18563: LD_INT 16
18565: PPUSH
18566: LD_INT 0
18568: PPUSH
18569: CALL_OW 49
18573: GO 18549
18575: POP
18576: POP
// uc_side := 0 ;
18577: LD_ADDR_OWVAR 20
18581: PUSH
18582: LD_INT 0
18584: ST_TO_ADDR
// uc_nation := 0 ;
18585: LD_ADDR_OWVAR 21
18589: PUSH
18590: LD_INT 0
18592: ST_TO_ADDR
// vc_chassis := 31 ;
18593: LD_ADDR_OWVAR 37
18597: PUSH
18598: LD_INT 31
18600: ST_TO_ADDR
// vc_control := control_rider ;
18601: LD_ADDR_OWVAR 38
18605: PUSH
18606: LD_INT 4
18608: ST_TO_ADDR
// PlaceUnitXY ( CreateVehicle , 96 , 20 , false ) ;
18609: CALL_OW 45
18613: PPUSH
18614: LD_INT 96
18616: PPUSH
18617: LD_INT 20
18619: PPUSH
18620: LD_INT 0
18622: PPUSH
18623: CALL_OW 48
// end ; end_of_file
18627: LD_VAR 0 1
18631: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
18632: LD_INT 0
18634: PPUSH
// ru_radar := 98 ;
18635: LD_ADDR_EXP 54
18639: PUSH
18640: LD_INT 98
18642: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
18643: LD_ADDR_EXP 55
18647: PUSH
18648: LD_INT 89
18650: ST_TO_ADDR
// us_hack := 99 ;
18651: LD_ADDR_EXP 56
18655: PUSH
18656: LD_INT 99
18658: ST_TO_ADDR
// us_artillery := 97 ;
18659: LD_ADDR_EXP 57
18663: PUSH
18664: LD_INT 97
18666: ST_TO_ADDR
// ar_bio_bomb := 91 ;
18667: LD_ADDR_EXP 58
18671: PUSH
18672: LD_INT 91
18674: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
18675: LD_ADDR_EXP 59
18679: PUSH
18680: LD_INT 92
18682: ST_TO_ADDR
// tech_Artillery := 80 ;
18683: LD_ADDR_EXP 60
18687: PUSH
18688: LD_INT 80
18690: ST_TO_ADDR
// tech_RadMat := 81 ;
18691: LD_ADDR_EXP 61
18695: PUSH
18696: LD_INT 81
18698: ST_TO_ADDR
// tech_BasicTools := 82 ;
18699: LD_ADDR_EXP 62
18703: PUSH
18704: LD_INT 82
18706: ST_TO_ADDR
// tech_Cargo := 83 ;
18707: LD_ADDR_EXP 63
18711: PUSH
18712: LD_INT 83
18714: ST_TO_ADDR
// tech_Track := 84 ;
18715: LD_ADDR_EXP 64
18719: PUSH
18720: LD_INT 84
18722: ST_TO_ADDR
// tech_Crane := 85 ;
18723: LD_ADDR_EXP 65
18727: PUSH
18728: LD_INT 85
18730: ST_TO_ADDR
// tech_Bulldozer := 86 ;
18731: LD_ADDR_EXP 66
18735: PUSH
18736: LD_INT 86
18738: ST_TO_ADDR
// tech_Hovercraft := 87 ;
18739: LD_ADDR_EXP 67
18743: PUSH
18744: LD_INT 87
18746: ST_TO_ADDR
// end ;
18747: LD_VAR 0 1
18751: RET
// every 1 do
18752: GO 18754
18754: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
18755: CALL 18632 0 0
18759: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
18760: GO 18762
18762: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
18763: LD_STRING initStreamRollete();
18765: PPUSH
18766: CALL_OW 559
// InitStreamMode ;
18770: CALL 18779 0 0
// DefineStreamItems ( ) ;
18774: CALL 19219 0 0
// end ;
18778: END
// function InitStreamMode ; begin
18779: LD_INT 0
18781: PPUSH
// streamModeActive := false ;
18782: LD_ADDR_EXP 68
18786: PUSH
18787: LD_INT 0
18789: ST_TO_ADDR
// normalCounter := 36 ;
18790: LD_ADDR_EXP 69
18794: PUSH
18795: LD_INT 36
18797: ST_TO_ADDR
// hardcoreCounter := 16 ;
18798: LD_ADDR_EXP 70
18802: PUSH
18803: LD_INT 16
18805: ST_TO_ADDR
// sRocket := false ;
18806: LD_ADDR_EXP 73
18810: PUSH
18811: LD_INT 0
18813: ST_TO_ADDR
// sSpeed := false ;
18814: LD_ADDR_EXP 72
18818: PUSH
18819: LD_INT 0
18821: ST_TO_ADDR
// sEngine := false ;
18822: LD_ADDR_EXP 74
18826: PUSH
18827: LD_INT 0
18829: ST_TO_ADDR
// sSpec := false ;
18830: LD_ADDR_EXP 71
18834: PUSH
18835: LD_INT 0
18837: ST_TO_ADDR
// sLevel := false ;
18838: LD_ADDR_EXP 75
18842: PUSH
18843: LD_INT 0
18845: ST_TO_ADDR
// sArmoury := false ;
18846: LD_ADDR_EXP 76
18850: PUSH
18851: LD_INT 0
18853: ST_TO_ADDR
// sRadar := false ;
18854: LD_ADDR_EXP 77
18858: PUSH
18859: LD_INT 0
18861: ST_TO_ADDR
// sBunker := false ;
18862: LD_ADDR_EXP 78
18866: PUSH
18867: LD_INT 0
18869: ST_TO_ADDR
// sHack := false ;
18870: LD_ADDR_EXP 79
18874: PUSH
18875: LD_INT 0
18877: ST_TO_ADDR
// sFire := false ;
18878: LD_ADDR_EXP 80
18882: PUSH
18883: LD_INT 0
18885: ST_TO_ADDR
// sRefresh := false ;
18886: LD_ADDR_EXP 81
18890: PUSH
18891: LD_INT 0
18893: ST_TO_ADDR
// sExp := false ;
18894: LD_ADDR_EXP 82
18898: PUSH
18899: LD_INT 0
18901: ST_TO_ADDR
// sDepot := false ;
18902: LD_ADDR_EXP 83
18906: PUSH
18907: LD_INT 0
18909: ST_TO_ADDR
// sFlag := false ;
18910: LD_ADDR_EXP 84
18914: PUSH
18915: LD_INT 0
18917: ST_TO_ADDR
// sKamikadze := false ;
18918: LD_ADDR_EXP 92
18922: PUSH
18923: LD_INT 0
18925: ST_TO_ADDR
// sTroll := false ;
18926: LD_ADDR_EXP 93
18930: PUSH
18931: LD_INT 0
18933: ST_TO_ADDR
// sSlow := false ;
18934: LD_ADDR_EXP 94
18938: PUSH
18939: LD_INT 0
18941: ST_TO_ADDR
// sLack := false ;
18942: LD_ADDR_EXP 95
18946: PUSH
18947: LD_INT 0
18949: ST_TO_ADDR
// sTank := false ;
18950: LD_ADDR_EXP 97
18954: PUSH
18955: LD_INT 0
18957: ST_TO_ADDR
// sRemote := false ;
18958: LD_ADDR_EXP 98
18962: PUSH
18963: LD_INT 0
18965: ST_TO_ADDR
// sPowell := false ;
18966: LD_ADDR_EXP 99
18970: PUSH
18971: LD_INT 0
18973: ST_TO_ADDR
// sTeleport := false ;
18974: LD_ADDR_EXP 102
18978: PUSH
18979: LD_INT 0
18981: ST_TO_ADDR
// sOilTower := false ;
18982: LD_ADDR_EXP 104
18986: PUSH
18987: LD_INT 0
18989: ST_TO_ADDR
// sShovel := false ;
18990: LD_ADDR_EXP 105
18994: PUSH
18995: LD_INT 0
18997: ST_TO_ADDR
// sSheik := false ;
18998: LD_ADDR_EXP 106
19002: PUSH
19003: LD_INT 0
19005: ST_TO_ADDR
// sEarthquake := false ;
19006: LD_ADDR_EXP 108
19010: PUSH
19011: LD_INT 0
19013: ST_TO_ADDR
// sAI := false ;
19014: LD_ADDR_EXP 109
19018: PUSH
19019: LD_INT 0
19021: ST_TO_ADDR
// sCargo := false ;
19022: LD_ADDR_EXP 112
19026: PUSH
19027: LD_INT 0
19029: ST_TO_ADDR
// sDLaser := false ;
19030: LD_ADDR_EXP 113
19034: PUSH
19035: LD_INT 0
19037: ST_TO_ADDR
// sExchange := false ;
19038: LD_ADDR_EXP 114
19042: PUSH
19043: LD_INT 0
19045: ST_TO_ADDR
// sFac := false ;
19046: LD_ADDR_EXP 115
19050: PUSH
19051: LD_INT 0
19053: ST_TO_ADDR
// sPower := false ;
19054: LD_ADDR_EXP 116
19058: PUSH
19059: LD_INT 0
19061: ST_TO_ADDR
// sRandom := false ;
19062: LD_ADDR_EXP 117
19066: PUSH
19067: LD_INT 0
19069: ST_TO_ADDR
// sShield := false ;
19070: LD_ADDR_EXP 118
19074: PUSH
19075: LD_INT 0
19077: ST_TO_ADDR
// sTime := false ;
19078: LD_ADDR_EXP 119
19082: PUSH
19083: LD_INT 0
19085: ST_TO_ADDR
// sTools := false ;
19086: LD_ADDR_EXP 120
19090: PUSH
19091: LD_INT 0
19093: ST_TO_ADDR
// sSold := false ;
19094: LD_ADDR_EXP 85
19098: PUSH
19099: LD_INT 0
19101: ST_TO_ADDR
// sDiff := false ;
19102: LD_ADDR_EXP 86
19106: PUSH
19107: LD_INT 0
19109: ST_TO_ADDR
// sFog := false ;
19110: LD_ADDR_EXP 89
19114: PUSH
19115: LD_INT 0
19117: ST_TO_ADDR
// sReset := false ;
19118: LD_ADDR_EXP 90
19122: PUSH
19123: LD_INT 0
19125: ST_TO_ADDR
// sSun := false ;
19126: LD_ADDR_EXP 91
19130: PUSH
19131: LD_INT 0
19133: ST_TO_ADDR
// sTiger := false ;
19134: LD_ADDR_EXP 87
19138: PUSH
19139: LD_INT 0
19141: ST_TO_ADDR
// sBomb := false ;
19142: LD_ADDR_EXP 88
19146: PUSH
19147: LD_INT 0
19149: ST_TO_ADDR
// sWound := false ;
19150: LD_ADDR_EXP 96
19154: PUSH
19155: LD_INT 0
19157: ST_TO_ADDR
// sBetray := false ;
19158: LD_ADDR_EXP 100
19162: PUSH
19163: LD_INT 0
19165: ST_TO_ADDR
// sContamin := false ;
19166: LD_ADDR_EXP 101
19170: PUSH
19171: LD_INT 0
19173: ST_TO_ADDR
// sOil := false ;
19174: LD_ADDR_EXP 103
19178: PUSH
19179: LD_INT 0
19181: ST_TO_ADDR
// sStu := false ;
19182: LD_ADDR_EXP 107
19186: PUSH
19187: LD_INT 0
19189: ST_TO_ADDR
// sBazooka := false ;
19190: LD_ADDR_EXP 110
19194: PUSH
19195: LD_INT 0
19197: ST_TO_ADDR
// sMortar := false ;
19198: LD_ADDR_EXP 111
19202: PUSH
19203: LD_INT 0
19205: ST_TO_ADDR
// sRanger := false ;
19206: LD_ADDR_EXP 121
19210: PUSH
19211: LD_INT 0
19213: ST_TO_ADDR
// end ;
19214: LD_VAR 0 1
19218: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
19219: LD_INT 0
19221: PPUSH
19222: PPUSH
19223: PPUSH
19224: PPUSH
19225: PPUSH
// result := [ ] ;
19226: LD_ADDR_VAR 0 1
19230: PUSH
19231: EMPTY
19232: ST_TO_ADDR
// if campaign_id = 1 then
19233: LD_OWVAR 69
19237: PUSH
19238: LD_INT 1
19240: EQUAL
19241: IFFALSE 22179
// begin case mission_number of 1 :
19243: LD_OWVAR 70
19247: PUSH
19248: LD_INT 1
19250: DOUBLE
19251: EQUAL
19252: IFTRUE 19256
19254: GO 19320
19256: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
19257: LD_ADDR_VAR 0 1
19261: PUSH
19262: LD_INT 2
19264: PUSH
19265: LD_INT 4
19267: PUSH
19268: LD_INT 11
19270: PUSH
19271: LD_INT 12
19273: PUSH
19274: LD_INT 15
19276: PUSH
19277: LD_INT 16
19279: PUSH
19280: LD_INT 22
19282: PUSH
19283: LD_INT 23
19285: PUSH
19286: LD_INT 26
19288: PUSH
19289: EMPTY
19290: LIST
19291: LIST
19292: LIST
19293: LIST
19294: LIST
19295: LIST
19296: LIST
19297: LIST
19298: LIST
19299: PUSH
19300: LD_INT 101
19302: PUSH
19303: LD_INT 102
19305: PUSH
19306: LD_INT 106
19308: PUSH
19309: EMPTY
19310: LIST
19311: LIST
19312: LIST
19313: PUSH
19314: EMPTY
19315: LIST
19316: LIST
19317: ST_TO_ADDR
19318: GO 22177
19320: LD_INT 2
19322: DOUBLE
19323: EQUAL
19324: IFTRUE 19328
19326: GO 19400
19328: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
19329: LD_ADDR_VAR 0 1
19333: PUSH
19334: LD_INT 2
19336: PUSH
19337: LD_INT 4
19339: PUSH
19340: LD_INT 11
19342: PUSH
19343: LD_INT 12
19345: PUSH
19346: LD_INT 15
19348: PUSH
19349: LD_INT 16
19351: PUSH
19352: LD_INT 22
19354: PUSH
19355: LD_INT 23
19357: PUSH
19358: LD_INT 26
19360: PUSH
19361: EMPTY
19362: LIST
19363: LIST
19364: LIST
19365: LIST
19366: LIST
19367: LIST
19368: LIST
19369: LIST
19370: LIST
19371: PUSH
19372: LD_INT 101
19374: PUSH
19375: LD_INT 102
19377: PUSH
19378: LD_INT 105
19380: PUSH
19381: LD_INT 106
19383: PUSH
19384: LD_INT 108
19386: PUSH
19387: EMPTY
19388: LIST
19389: LIST
19390: LIST
19391: LIST
19392: LIST
19393: PUSH
19394: EMPTY
19395: LIST
19396: LIST
19397: ST_TO_ADDR
19398: GO 22177
19400: LD_INT 3
19402: DOUBLE
19403: EQUAL
19404: IFTRUE 19408
19406: GO 19484
19408: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
19409: LD_ADDR_VAR 0 1
19413: PUSH
19414: LD_INT 2
19416: PUSH
19417: LD_INT 4
19419: PUSH
19420: LD_INT 5
19422: PUSH
19423: LD_INT 11
19425: PUSH
19426: LD_INT 12
19428: PUSH
19429: LD_INT 15
19431: PUSH
19432: LD_INT 16
19434: PUSH
19435: LD_INT 22
19437: PUSH
19438: LD_INT 26
19440: PUSH
19441: LD_INT 36
19443: PUSH
19444: EMPTY
19445: LIST
19446: LIST
19447: LIST
19448: LIST
19449: LIST
19450: LIST
19451: LIST
19452: LIST
19453: LIST
19454: LIST
19455: PUSH
19456: LD_INT 101
19458: PUSH
19459: LD_INT 102
19461: PUSH
19462: LD_INT 105
19464: PUSH
19465: LD_INT 106
19467: PUSH
19468: LD_INT 108
19470: PUSH
19471: EMPTY
19472: LIST
19473: LIST
19474: LIST
19475: LIST
19476: LIST
19477: PUSH
19478: EMPTY
19479: LIST
19480: LIST
19481: ST_TO_ADDR
19482: GO 22177
19484: LD_INT 4
19486: DOUBLE
19487: EQUAL
19488: IFTRUE 19492
19490: GO 19576
19492: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
19493: LD_ADDR_VAR 0 1
19497: PUSH
19498: LD_INT 2
19500: PUSH
19501: LD_INT 4
19503: PUSH
19504: LD_INT 5
19506: PUSH
19507: LD_INT 8
19509: PUSH
19510: LD_INT 11
19512: PUSH
19513: LD_INT 12
19515: PUSH
19516: LD_INT 15
19518: PUSH
19519: LD_INT 16
19521: PUSH
19522: LD_INT 22
19524: PUSH
19525: LD_INT 23
19527: PUSH
19528: LD_INT 26
19530: PUSH
19531: LD_INT 36
19533: PUSH
19534: EMPTY
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: LIST
19547: PUSH
19548: LD_INT 101
19550: PUSH
19551: LD_INT 102
19553: PUSH
19554: LD_INT 105
19556: PUSH
19557: LD_INT 106
19559: PUSH
19560: LD_INT 108
19562: PUSH
19563: EMPTY
19564: LIST
19565: LIST
19566: LIST
19567: LIST
19568: LIST
19569: PUSH
19570: EMPTY
19571: LIST
19572: LIST
19573: ST_TO_ADDR
19574: GO 22177
19576: LD_INT 5
19578: DOUBLE
19579: EQUAL
19580: IFTRUE 19584
19582: GO 19684
19584: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
19585: LD_ADDR_VAR 0 1
19589: PUSH
19590: LD_INT 2
19592: PUSH
19593: LD_INT 4
19595: PUSH
19596: LD_INT 5
19598: PUSH
19599: LD_INT 6
19601: PUSH
19602: LD_INT 8
19604: PUSH
19605: LD_INT 11
19607: PUSH
19608: LD_INT 12
19610: PUSH
19611: LD_INT 15
19613: PUSH
19614: LD_INT 16
19616: PUSH
19617: LD_INT 22
19619: PUSH
19620: LD_INT 23
19622: PUSH
19623: LD_INT 25
19625: PUSH
19626: LD_INT 26
19628: PUSH
19629: LD_INT 36
19631: PUSH
19632: EMPTY
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: PUSH
19648: LD_INT 101
19650: PUSH
19651: LD_INT 102
19653: PUSH
19654: LD_INT 105
19656: PUSH
19657: LD_INT 106
19659: PUSH
19660: LD_INT 108
19662: PUSH
19663: LD_INT 109
19665: PUSH
19666: LD_INT 112
19668: PUSH
19669: EMPTY
19670: LIST
19671: LIST
19672: LIST
19673: LIST
19674: LIST
19675: LIST
19676: LIST
19677: PUSH
19678: EMPTY
19679: LIST
19680: LIST
19681: ST_TO_ADDR
19682: GO 22177
19684: LD_INT 6
19686: DOUBLE
19687: EQUAL
19688: IFTRUE 19692
19690: GO 19812
19692: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
19693: LD_ADDR_VAR 0 1
19697: PUSH
19698: LD_INT 2
19700: PUSH
19701: LD_INT 4
19703: PUSH
19704: LD_INT 5
19706: PUSH
19707: LD_INT 6
19709: PUSH
19710: LD_INT 8
19712: PUSH
19713: LD_INT 11
19715: PUSH
19716: LD_INT 12
19718: PUSH
19719: LD_INT 15
19721: PUSH
19722: LD_INT 16
19724: PUSH
19725: LD_INT 20
19727: PUSH
19728: LD_INT 21
19730: PUSH
19731: LD_INT 22
19733: PUSH
19734: LD_INT 23
19736: PUSH
19737: LD_INT 25
19739: PUSH
19740: LD_INT 26
19742: PUSH
19743: LD_INT 30
19745: PUSH
19746: LD_INT 31
19748: PUSH
19749: LD_INT 32
19751: PUSH
19752: LD_INT 36
19754: PUSH
19755: EMPTY
19756: LIST
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: PUSH
19776: LD_INT 101
19778: PUSH
19779: LD_INT 102
19781: PUSH
19782: LD_INT 105
19784: PUSH
19785: LD_INT 106
19787: PUSH
19788: LD_INT 108
19790: PUSH
19791: LD_INT 109
19793: PUSH
19794: LD_INT 112
19796: PUSH
19797: EMPTY
19798: LIST
19799: LIST
19800: LIST
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: PUSH
19806: EMPTY
19807: LIST
19808: LIST
19809: ST_TO_ADDR
19810: GO 22177
19812: LD_INT 7
19814: DOUBLE
19815: EQUAL
19816: IFTRUE 19820
19818: GO 19920
19820: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
19821: LD_ADDR_VAR 0 1
19825: PUSH
19826: LD_INT 2
19828: PUSH
19829: LD_INT 4
19831: PUSH
19832: LD_INT 5
19834: PUSH
19835: LD_INT 7
19837: PUSH
19838: LD_INT 11
19840: PUSH
19841: LD_INT 12
19843: PUSH
19844: LD_INT 15
19846: PUSH
19847: LD_INT 16
19849: PUSH
19850: LD_INT 20
19852: PUSH
19853: LD_INT 21
19855: PUSH
19856: LD_INT 22
19858: PUSH
19859: LD_INT 23
19861: PUSH
19862: LD_INT 25
19864: PUSH
19865: LD_INT 26
19867: PUSH
19868: EMPTY
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: LIST
19874: LIST
19875: LIST
19876: LIST
19877: LIST
19878: LIST
19879: LIST
19880: LIST
19881: LIST
19882: LIST
19883: PUSH
19884: LD_INT 101
19886: PUSH
19887: LD_INT 102
19889: PUSH
19890: LD_INT 103
19892: PUSH
19893: LD_INT 105
19895: PUSH
19896: LD_INT 106
19898: PUSH
19899: LD_INT 108
19901: PUSH
19902: LD_INT 112
19904: PUSH
19905: EMPTY
19906: LIST
19907: LIST
19908: LIST
19909: LIST
19910: LIST
19911: LIST
19912: LIST
19913: PUSH
19914: EMPTY
19915: LIST
19916: LIST
19917: ST_TO_ADDR
19918: GO 22177
19920: LD_INT 8
19922: DOUBLE
19923: EQUAL
19924: IFTRUE 19928
19926: GO 20056
19928: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
19929: LD_ADDR_VAR 0 1
19933: PUSH
19934: LD_INT 2
19936: PUSH
19937: LD_INT 4
19939: PUSH
19940: LD_INT 5
19942: PUSH
19943: LD_INT 6
19945: PUSH
19946: LD_INT 7
19948: PUSH
19949: LD_INT 8
19951: PUSH
19952: LD_INT 11
19954: PUSH
19955: LD_INT 12
19957: PUSH
19958: LD_INT 15
19960: PUSH
19961: LD_INT 16
19963: PUSH
19964: LD_INT 20
19966: PUSH
19967: LD_INT 21
19969: PUSH
19970: LD_INT 22
19972: PUSH
19973: LD_INT 23
19975: PUSH
19976: LD_INT 25
19978: PUSH
19979: LD_INT 26
19981: PUSH
19982: LD_INT 30
19984: PUSH
19985: LD_INT 31
19987: PUSH
19988: LD_INT 32
19990: PUSH
19991: LD_INT 36
19993: PUSH
19994: EMPTY
19995: LIST
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: LIST
20003: LIST
20004: LIST
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: LIST
20014: LIST
20015: PUSH
20016: LD_INT 101
20018: PUSH
20019: LD_INT 102
20021: PUSH
20022: LD_INT 103
20024: PUSH
20025: LD_INT 105
20027: PUSH
20028: LD_INT 106
20030: PUSH
20031: LD_INT 108
20033: PUSH
20034: LD_INT 109
20036: PUSH
20037: LD_INT 112
20039: PUSH
20040: EMPTY
20041: LIST
20042: LIST
20043: LIST
20044: LIST
20045: LIST
20046: LIST
20047: LIST
20048: LIST
20049: PUSH
20050: EMPTY
20051: LIST
20052: LIST
20053: ST_TO_ADDR
20054: GO 22177
20056: LD_INT 9
20058: DOUBLE
20059: EQUAL
20060: IFTRUE 20064
20062: GO 20200
20064: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
20065: LD_ADDR_VAR 0 1
20069: PUSH
20070: LD_INT 2
20072: PUSH
20073: LD_INT 4
20075: PUSH
20076: LD_INT 5
20078: PUSH
20079: LD_INT 6
20081: PUSH
20082: LD_INT 7
20084: PUSH
20085: LD_INT 8
20087: PUSH
20088: LD_INT 11
20090: PUSH
20091: LD_INT 12
20093: PUSH
20094: LD_INT 15
20096: PUSH
20097: LD_INT 16
20099: PUSH
20100: LD_INT 20
20102: PUSH
20103: LD_INT 21
20105: PUSH
20106: LD_INT 22
20108: PUSH
20109: LD_INT 23
20111: PUSH
20112: LD_INT 25
20114: PUSH
20115: LD_INT 26
20117: PUSH
20118: LD_INT 28
20120: PUSH
20121: LD_INT 30
20123: PUSH
20124: LD_INT 31
20126: PUSH
20127: LD_INT 32
20129: PUSH
20130: LD_INT 36
20132: PUSH
20133: EMPTY
20134: LIST
20135: LIST
20136: LIST
20137: LIST
20138: LIST
20139: LIST
20140: LIST
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: PUSH
20156: LD_INT 101
20158: PUSH
20159: LD_INT 102
20161: PUSH
20162: LD_INT 103
20164: PUSH
20165: LD_INT 105
20167: PUSH
20168: LD_INT 106
20170: PUSH
20171: LD_INT 108
20173: PUSH
20174: LD_INT 109
20176: PUSH
20177: LD_INT 112
20179: PUSH
20180: LD_INT 114
20182: PUSH
20183: EMPTY
20184: LIST
20185: LIST
20186: LIST
20187: LIST
20188: LIST
20189: LIST
20190: LIST
20191: LIST
20192: LIST
20193: PUSH
20194: EMPTY
20195: LIST
20196: LIST
20197: ST_TO_ADDR
20198: GO 22177
20200: LD_INT 10
20202: DOUBLE
20203: EQUAL
20204: IFTRUE 20208
20206: GO 20392
20208: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
20209: LD_ADDR_VAR 0 1
20213: PUSH
20214: LD_INT 2
20216: PUSH
20217: LD_INT 4
20219: PUSH
20220: LD_INT 5
20222: PUSH
20223: LD_INT 6
20225: PUSH
20226: LD_INT 7
20228: PUSH
20229: LD_INT 8
20231: PUSH
20232: LD_INT 9
20234: PUSH
20235: LD_INT 10
20237: PUSH
20238: LD_INT 11
20240: PUSH
20241: LD_INT 12
20243: PUSH
20244: LD_INT 13
20246: PUSH
20247: LD_INT 14
20249: PUSH
20250: LD_INT 15
20252: PUSH
20253: LD_INT 16
20255: PUSH
20256: LD_INT 17
20258: PUSH
20259: LD_INT 18
20261: PUSH
20262: LD_INT 19
20264: PUSH
20265: LD_INT 20
20267: PUSH
20268: LD_INT 21
20270: PUSH
20271: LD_INT 22
20273: PUSH
20274: LD_INT 23
20276: PUSH
20277: LD_INT 24
20279: PUSH
20280: LD_INT 25
20282: PUSH
20283: LD_INT 26
20285: PUSH
20286: LD_INT 28
20288: PUSH
20289: LD_INT 30
20291: PUSH
20292: LD_INT 31
20294: PUSH
20295: LD_INT 32
20297: PUSH
20298: LD_INT 36
20300: PUSH
20301: EMPTY
20302: LIST
20303: LIST
20304: LIST
20305: LIST
20306: LIST
20307: LIST
20308: LIST
20309: LIST
20310: LIST
20311: LIST
20312: LIST
20313: LIST
20314: LIST
20315: LIST
20316: LIST
20317: LIST
20318: LIST
20319: LIST
20320: LIST
20321: LIST
20322: LIST
20323: LIST
20324: LIST
20325: LIST
20326: LIST
20327: LIST
20328: LIST
20329: LIST
20330: LIST
20331: PUSH
20332: LD_INT 101
20334: PUSH
20335: LD_INT 102
20337: PUSH
20338: LD_INT 103
20340: PUSH
20341: LD_INT 104
20343: PUSH
20344: LD_INT 105
20346: PUSH
20347: LD_INT 106
20349: PUSH
20350: LD_INT 107
20352: PUSH
20353: LD_INT 108
20355: PUSH
20356: LD_INT 109
20358: PUSH
20359: LD_INT 110
20361: PUSH
20362: LD_INT 111
20364: PUSH
20365: LD_INT 112
20367: PUSH
20368: LD_INT 114
20370: PUSH
20371: EMPTY
20372: LIST
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: LIST
20380: LIST
20381: LIST
20382: LIST
20383: LIST
20384: LIST
20385: PUSH
20386: EMPTY
20387: LIST
20388: LIST
20389: ST_TO_ADDR
20390: GO 22177
20392: LD_INT 11
20394: DOUBLE
20395: EQUAL
20396: IFTRUE 20400
20398: GO 20592
20400: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
20401: LD_ADDR_VAR 0 1
20405: PUSH
20406: LD_INT 2
20408: PUSH
20409: LD_INT 3
20411: PUSH
20412: LD_INT 4
20414: PUSH
20415: LD_INT 5
20417: PUSH
20418: LD_INT 6
20420: PUSH
20421: LD_INT 7
20423: PUSH
20424: LD_INT 8
20426: PUSH
20427: LD_INT 9
20429: PUSH
20430: LD_INT 10
20432: PUSH
20433: LD_INT 11
20435: PUSH
20436: LD_INT 12
20438: PUSH
20439: LD_INT 13
20441: PUSH
20442: LD_INT 14
20444: PUSH
20445: LD_INT 15
20447: PUSH
20448: LD_INT 16
20450: PUSH
20451: LD_INT 17
20453: PUSH
20454: LD_INT 18
20456: PUSH
20457: LD_INT 19
20459: PUSH
20460: LD_INT 20
20462: PUSH
20463: LD_INT 21
20465: PUSH
20466: LD_INT 22
20468: PUSH
20469: LD_INT 23
20471: PUSH
20472: LD_INT 24
20474: PUSH
20475: LD_INT 25
20477: PUSH
20478: LD_INT 26
20480: PUSH
20481: LD_INT 28
20483: PUSH
20484: LD_INT 30
20486: PUSH
20487: LD_INT 31
20489: PUSH
20490: LD_INT 32
20492: PUSH
20493: LD_INT 34
20495: PUSH
20496: LD_INT 36
20498: PUSH
20499: EMPTY
20500: LIST
20501: LIST
20502: LIST
20503: LIST
20504: LIST
20505: LIST
20506: LIST
20507: LIST
20508: LIST
20509: LIST
20510: LIST
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: LIST
20516: LIST
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: LIST
20527: LIST
20528: LIST
20529: LIST
20530: LIST
20531: PUSH
20532: LD_INT 101
20534: PUSH
20535: LD_INT 102
20537: PUSH
20538: LD_INT 103
20540: PUSH
20541: LD_INT 104
20543: PUSH
20544: LD_INT 105
20546: PUSH
20547: LD_INT 106
20549: PUSH
20550: LD_INT 107
20552: PUSH
20553: LD_INT 108
20555: PUSH
20556: LD_INT 109
20558: PUSH
20559: LD_INT 110
20561: PUSH
20562: LD_INT 111
20564: PUSH
20565: LD_INT 112
20567: PUSH
20568: LD_INT 114
20570: PUSH
20571: EMPTY
20572: LIST
20573: LIST
20574: LIST
20575: LIST
20576: LIST
20577: LIST
20578: LIST
20579: LIST
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: LIST
20585: PUSH
20586: EMPTY
20587: LIST
20588: LIST
20589: ST_TO_ADDR
20590: GO 22177
20592: LD_INT 12
20594: DOUBLE
20595: EQUAL
20596: IFTRUE 20600
20598: GO 20808
20600: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
20601: LD_ADDR_VAR 0 1
20605: PUSH
20606: LD_INT 1
20608: PUSH
20609: LD_INT 2
20611: PUSH
20612: LD_INT 3
20614: PUSH
20615: LD_INT 4
20617: PUSH
20618: LD_INT 5
20620: PUSH
20621: LD_INT 6
20623: PUSH
20624: LD_INT 7
20626: PUSH
20627: LD_INT 8
20629: PUSH
20630: LD_INT 9
20632: PUSH
20633: LD_INT 10
20635: PUSH
20636: LD_INT 11
20638: PUSH
20639: LD_INT 12
20641: PUSH
20642: LD_INT 13
20644: PUSH
20645: LD_INT 14
20647: PUSH
20648: LD_INT 15
20650: PUSH
20651: LD_INT 16
20653: PUSH
20654: LD_INT 17
20656: PUSH
20657: LD_INT 18
20659: PUSH
20660: LD_INT 19
20662: PUSH
20663: LD_INT 20
20665: PUSH
20666: LD_INT 21
20668: PUSH
20669: LD_INT 22
20671: PUSH
20672: LD_INT 23
20674: PUSH
20675: LD_INT 24
20677: PUSH
20678: LD_INT 25
20680: PUSH
20681: LD_INT 26
20683: PUSH
20684: LD_INT 27
20686: PUSH
20687: LD_INT 28
20689: PUSH
20690: LD_INT 30
20692: PUSH
20693: LD_INT 31
20695: PUSH
20696: LD_INT 32
20698: PUSH
20699: LD_INT 33
20701: PUSH
20702: LD_INT 34
20704: PUSH
20705: LD_INT 36
20707: PUSH
20708: EMPTY
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: LIST
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: LIST
20733: LIST
20734: LIST
20735: LIST
20736: LIST
20737: LIST
20738: LIST
20739: LIST
20740: LIST
20741: LIST
20742: LIST
20743: PUSH
20744: LD_INT 101
20746: PUSH
20747: LD_INT 102
20749: PUSH
20750: LD_INT 103
20752: PUSH
20753: LD_INT 104
20755: PUSH
20756: LD_INT 105
20758: PUSH
20759: LD_INT 106
20761: PUSH
20762: LD_INT 107
20764: PUSH
20765: LD_INT 108
20767: PUSH
20768: LD_INT 109
20770: PUSH
20771: LD_INT 110
20773: PUSH
20774: LD_INT 111
20776: PUSH
20777: LD_INT 112
20779: PUSH
20780: LD_INT 113
20782: PUSH
20783: LD_INT 114
20785: PUSH
20786: EMPTY
20787: LIST
20788: LIST
20789: LIST
20790: LIST
20791: LIST
20792: LIST
20793: LIST
20794: LIST
20795: LIST
20796: LIST
20797: LIST
20798: LIST
20799: LIST
20800: LIST
20801: PUSH
20802: EMPTY
20803: LIST
20804: LIST
20805: ST_TO_ADDR
20806: GO 22177
20808: LD_INT 13
20810: DOUBLE
20811: EQUAL
20812: IFTRUE 20816
20814: GO 21012
20816: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
20817: LD_ADDR_VAR 0 1
20821: PUSH
20822: LD_INT 1
20824: PUSH
20825: LD_INT 2
20827: PUSH
20828: LD_INT 3
20830: PUSH
20831: LD_INT 4
20833: PUSH
20834: LD_INT 5
20836: PUSH
20837: LD_INT 8
20839: PUSH
20840: LD_INT 9
20842: PUSH
20843: LD_INT 10
20845: PUSH
20846: LD_INT 11
20848: PUSH
20849: LD_INT 12
20851: PUSH
20852: LD_INT 14
20854: PUSH
20855: LD_INT 15
20857: PUSH
20858: LD_INT 16
20860: PUSH
20861: LD_INT 17
20863: PUSH
20864: LD_INT 18
20866: PUSH
20867: LD_INT 19
20869: PUSH
20870: LD_INT 20
20872: PUSH
20873: LD_INT 21
20875: PUSH
20876: LD_INT 22
20878: PUSH
20879: LD_INT 23
20881: PUSH
20882: LD_INT 24
20884: PUSH
20885: LD_INT 25
20887: PUSH
20888: LD_INT 26
20890: PUSH
20891: LD_INT 27
20893: PUSH
20894: LD_INT 28
20896: PUSH
20897: LD_INT 30
20899: PUSH
20900: LD_INT 31
20902: PUSH
20903: LD_INT 32
20905: PUSH
20906: LD_INT 33
20908: PUSH
20909: LD_INT 34
20911: PUSH
20912: LD_INT 36
20914: PUSH
20915: EMPTY
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: LIST
20922: LIST
20923: LIST
20924: LIST
20925: LIST
20926: LIST
20927: LIST
20928: LIST
20929: LIST
20930: LIST
20931: LIST
20932: LIST
20933: LIST
20934: LIST
20935: LIST
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: PUSH
20948: LD_INT 101
20950: PUSH
20951: LD_INT 102
20953: PUSH
20954: LD_INT 103
20956: PUSH
20957: LD_INT 104
20959: PUSH
20960: LD_INT 105
20962: PUSH
20963: LD_INT 106
20965: PUSH
20966: LD_INT 107
20968: PUSH
20969: LD_INT 108
20971: PUSH
20972: LD_INT 109
20974: PUSH
20975: LD_INT 110
20977: PUSH
20978: LD_INT 111
20980: PUSH
20981: LD_INT 112
20983: PUSH
20984: LD_INT 113
20986: PUSH
20987: LD_INT 114
20989: PUSH
20990: EMPTY
20991: LIST
20992: LIST
20993: LIST
20994: LIST
20995: LIST
20996: LIST
20997: LIST
20998: LIST
20999: LIST
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: LIST
21005: PUSH
21006: EMPTY
21007: LIST
21008: LIST
21009: ST_TO_ADDR
21010: GO 22177
21012: LD_INT 14
21014: DOUBLE
21015: EQUAL
21016: IFTRUE 21020
21018: GO 21232
21020: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
21021: LD_ADDR_VAR 0 1
21025: PUSH
21026: LD_INT 1
21028: PUSH
21029: LD_INT 2
21031: PUSH
21032: LD_INT 3
21034: PUSH
21035: LD_INT 4
21037: PUSH
21038: LD_INT 5
21040: PUSH
21041: LD_INT 6
21043: PUSH
21044: LD_INT 7
21046: PUSH
21047: LD_INT 8
21049: PUSH
21050: LD_INT 9
21052: PUSH
21053: LD_INT 10
21055: PUSH
21056: LD_INT 11
21058: PUSH
21059: LD_INT 12
21061: PUSH
21062: LD_INT 13
21064: PUSH
21065: LD_INT 14
21067: PUSH
21068: LD_INT 15
21070: PUSH
21071: LD_INT 16
21073: PUSH
21074: LD_INT 17
21076: PUSH
21077: LD_INT 18
21079: PUSH
21080: LD_INT 19
21082: PUSH
21083: LD_INT 20
21085: PUSH
21086: LD_INT 21
21088: PUSH
21089: LD_INT 22
21091: PUSH
21092: LD_INT 23
21094: PUSH
21095: LD_INT 24
21097: PUSH
21098: LD_INT 25
21100: PUSH
21101: LD_INT 26
21103: PUSH
21104: LD_INT 27
21106: PUSH
21107: LD_INT 28
21109: PUSH
21110: LD_INT 29
21112: PUSH
21113: LD_INT 30
21115: PUSH
21116: LD_INT 31
21118: PUSH
21119: LD_INT 32
21121: PUSH
21122: LD_INT 33
21124: PUSH
21125: LD_INT 34
21127: PUSH
21128: LD_INT 36
21130: PUSH
21131: EMPTY
21132: LIST
21133: LIST
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: LIST
21142: LIST
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: LIST
21150: LIST
21151: LIST
21152: LIST
21153: LIST
21154: LIST
21155: LIST
21156: LIST
21157: LIST
21158: LIST
21159: LIST
21160: LIST
21161: LIST
21162: LIST
21163: LIST
21164: LIST
21165: LIST
21166: LIST
21167: PUSH
21168: LD_INT 101
21170: PUSH
21171: LD_INT 102
21173: PUSH
21174: LD_INT 103
21176: PUSH
21177: LD_INT 104
21179: PUSH
21180: LD_INT 105
21182: PUSH
21183: LD_INT 106
21185: PUSH
21186: LD_INT 107
21188: PUSH
21189: LD_INT 108
21191: PUSH
21192: LD_INT 109
21194: PUSH
21195: LD_INT 110
21197: PUSH
21198: LD_INT 111
21200: PUSH
21201: LD_INT 112
21203: PUSH
21204: LD_INT 113
21206: PUSH
21207: LD_INT 114
21209: PUSH
21210: EMPTY
21211: LIST
21212: LIST
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: LIST
21218: LIST
21219: LIST
21220: LIST
21221: LIST
21222: LIST
21223: LIST
21224: LIST
21225: PUSH
21226: EMPTY
21227: LIST
21228: LIST
21229: ST_TO_ADDR
21230: GO 22177
21232: LD_INT 15
21234: DOUBLE
21235: EQUAL
21236: IFTRUE 21240
21238: GO 21452
21240: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
21241: LD_ADDR_VAR 0 1
21245: PUSH
21246: LD_INT 1
21248: PUSH
21249: LD_INT 2
21251: PUSH
21252: LD_INT 3
21254: PUSH
21255: LD_INT 4
21257: PUSH
21258: LD_INT 5
21260: PUSH
21261: LD_INT 6
21263: PUSH
21264: LD_INT 7
21266: PUSH
21267: LD_INT 8
21269: PUSH
21270: LD_INT 9
21272: PUSH
21273: LD_INT 10
21275: PUSH
21276: LD_INT 11
21278: PUSH
21279: LD_INT 12
21281: PUSH
21282: LD_INT 13
21284: PUSH
21285: LD_INT 14
21287: PUSH
21288: LD_INT 15
21290: PUSH
21291: LD_INT 16
21293: PUSH
21294: LD_INT 17
21296: PUSH
21297: LD_INT 18
21299: PUSH
21300: LD_INT 19
21302: PUSH
21303: LD_INT 20
21305: PUSH
21306: LD_INT 21
21308: PUSH
21309: LD_INT 22
21311: PUSH
21312: LD_INT 23
21314: PUSH
21315: LD_INT 24
21317: PUSH
21318: LD_INT 25
21320: PUSH
21321: LD_INT 26
21323: PUSH
21324: LD_INT 27
21326: PUSH
21327: LD_INT 28
21329: PUSH
21330: LD_INT 29
21332: PUSH
21333: LD_INT 30
21335: PUSH
21336: LD_INT 31
21338: PUSH
21339: LD_INT 32
21341: PUSH
21342: LD_INT 33
21344: PUSH
21345: LD_INT 34
21347: PUSH
21348: LD_INT 36
21350: PUSH
21351: EMPTY
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: PUSH
21388: LD_INT 101
21390: PUSH
21391: LD_INT 102
21393: PUSH
21394: LD_INT 103
21396: PUSH
21397: LD_INT 104
21399: PUSH
21400: LD_INT 105
21402: PUSH
21403: LD_INT 106
21405: PUSH
21406: LD_INT 107
21408: PUSH
21409: LD_INT 108
21411: PUSH
21412: LD_INT 109
21414: PUSH
21415: LD_INT 110
21417: PUSH
21418: LD_INT 111
21420: PUSH
21421: LD_INT 112
21423: PUSH
21424: LD_INT 113
21426: PUSH
21427: LD_INT 114
21429: PUSH
21430: EMPTY
21431: LIST
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: LIST
21440: LIST
21441: LIST
21442: LIST
21443: LIST
21444: LIST
21445: PUSH
21446: EMPTY
21447: LIST
21448: LIST
21449: ST_TO_ADDR
21450: GO 22177
21452: LD_INT 16
21454: DOUBLE
21455: EQUAL
21456: IFTRUE 21460
21458: GO 21584
21460: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
21461: LD_ADDR_VAR 0 1
21465: PUSH
21466: LD_INT 2
21468: PUSH
21469: LD_INT 4
21471: PUSH
21472: LD_INT 5
21474: PUSH
21475: LD_INT 7
21477: PUSH
21478: LD_INT 11
21480: PUSH
21481: LD_INT 12
21483: PUSH
21484: LD_INT 15
21486: PUSH
21487: LD_INT 16
21489: PUSH
21490: LD_INT 20
21492: PUSH
21493: LD_INT 21
21495: PUSH
21496: LD_INT 22
21498: PUSH
21499: LD_INT 23
21501: PUSH
21502: LD_INT 25
21504: PUSH
21505: LD_INT 26
21507: PUSH
21508: LD_INT 30
21510: PUSH
21511: LD_INT 31
21513: PUSH
21514: LD_INT 32
21516: PUSH
21517: LD_INT 33
21519: PUSH
21520: LD_INT 34
21522: PUSH
21523: EMPTY
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: PUSH
21544: LD_INT 101
21546: PUSH
21547: LD_INT 102
21549: PUSH
21550: LD_INT 103
21552: PUSH
21553: LD_INT 106
21555: PUSH
21556: LD_INT 108
21558: PUSH
21559: LD_INT 112
21561: PUSH
21562: LD_INT 113
21564: PUSH
21565: LD_INT 114
21567: PUSH
21568: EMPTY
21569: LIST
21570: LIST
21571: LIST
21572: LIST
21573: LIST
21574: LIST
21575: LIST
21576: LIST
21577: PUSH
21578: EMPTY
21579: LIST
21580: LIST
21581: ST_TO_ADDR
21582: GO 22177
21584: LD_INT 17
21586: DOUBLE
21587: EQUAL
21588: IFTRUE 21592
21590: GO 21804
21592: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
21593: LD_ADDR_VAR 0 1
21597: PUSH
21598: LD_INT 1
21600: PUSH
21601: LD_INT 2
21603: PUSH
21604: LD_INT 3
21606: PUSH
21607: LD_INT 4
21609: PUSH
21610: LD_INT 5
21612: PUSH
21613: LD_INT 6
21615: PUSH
21616: LD_INT 7
21618: PUSH
21619: LD_INT 8
21621: PUSH
21622: LD_INT 9
21624: PUSH
21625: LD_INT 10
21627: PUSH
21628: LD_INT 11
21630: PUSH
21631: LD_INT 12
21633: PUSH
21634: LD_INT 13
21636: PUSH
21637: LD_INT 14
21639: PUSH
21640: LD_INT 15
21642: PUSH
21643: LD_INT 16
21645: PUSH
21646: LD_INT 17
21648: PUSH
21649: LD_INT 18
21651: PUSH
21652: LD_INT 19
21654: PUSH
21655: LD_INT 20
21657: PUSH
21658: LD_INT 21
21660: PUSH
21661: LD_INT 22
21663: PUSH
21664: LD_INT 23
21666: PUSH
21667: LD_INT 24
21669: PUSH
21670: LD_INT 25
21672: PUSH
21673: LD_INT 26
21675: PUSH
21676: LD_INT 27
21678: PUSH
21679: LD_INT 28
21681: PUSH
21682: LD_INT 29
21684: PUSH
21685: LD_INT 30
21687: PUSH
21688: LD_INT 31
21690: PUSH
21691: LD_INT 32
21693: PUSH
21694: LD_INT 33
21696: PUSH
21697: LD_INT 34
21699: PUSH
21700: LD_INT 36
21702: PUSH
21703: EMPTY
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: PUSH
21740: LD_INT 101
21742: PUSH
21743: LD_INT 102
21745: PUSH
21746: LD_INT 103
21748: PUSH
21749: LD_INT 104
21751: PUSH
21752: LD_INT 105
21754: PUSH
21755: LD_INT 106
21757: PUSH
21758: LD_INT 107
21760: PUSH
21761: LD_INT 108
21763: PUSH
21764: LD_INT 109
21766: PUSH
21767: LD_INT 110
21769: PUSH
21770: LD_INT 111
21772: PUSH
21773: LD_INT 112
21775: PUSH
21776: LD_INT 113
21778: PUSH
21779: LD_INT 114
21781: PUSH
21782: EMPTY
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: PUSH
21798: EMPTY
21799: LIST
21800: LIST
21801: ST_TO_ADDR
21802: GO 22177
21804: LD_INT 18
21806: DOUBLE
21807: EQUAL
21808: IFTRUE 21812
21810: GO 21948
21812: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
21813: LD_ADDR_VAR 0 1
21817: PUSH
21818: LD_INT 2
21820: PUSH
21821: LD_INT 4
21823: PUSH
21824: LD_INT 5
21826: PUSH
21827: LD_INT 7
21829: PUSH
21830: LD_INT 11
21832: PUSH
21833: LD_INT 12
21835: PUSH
21836: LD_INT 15
21838: PUSH
21839: LD_INT 16
21841: PUSH
21842: LD_INT 20
21844: PUSH
21845: LD_INT 21
21847: PUSH
21848: LD_INT 22
21850: PUSH
21851: LD_INT 23
21853: PUSH
21854: LD_INT 25
21856: PUSH
21857: LD_INT 26
21859: PUSH
21860: LD_INT 30
21862: PUSH
21863: LD_INT 31
21865: PUSH
21866: LD_INT 32
21868: PUSH
21869: LD_INT 33
21871: PUSH
21872: LD_INT 34
21874: PUSH
21875: LD_INT 35
21877: PUSH
21878: LD_INT 36
21880: PUSH
21881: EMPTY
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: PUSH
21904: LD_INT 101
21906: PUSH
21907: LD_INT 102
21909: PUSH
21910: LD_INT 103
21912: PUSH
21913: LD_INT 106
21915: PUSH
21916: LD_INT 108
21918: PUSH
21919: LD_INT 112
21921: PUSH
21922: LD_INT 113
21924: PUSH
21925: LD_INT 114
21927: PUSH
21928: LD_INT 115
21930: PUSH
21931: EMPTY
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: PUSH
21942: EMPTY
21943: LIST
21944: LIST
21945: ST_TO_ADDR
21946: GO 22177
21948: LD_INT 19
21950: DOUBLE
21951: EQUAL
21952: IFTRUE 21956
21954: GO 22176
21956: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
21957: LD_ADDR_VAR 0 1
21961: PUSH
21962: LD_INT 1
21964: PUSH
21965: LD_INT 2
21967: PUSH
21968: LD_INT 3
21970: PUSH
21971: LD_INT 4
21973: PUSH
21974: LD_INT 5
21976: PUSH
21977: LD_INT 6
21979: PUSH
21980: LD_INT 7
21982: PUSH
21983: LD_INT 8
21985: PUSH
21986: LD_INT 9
21988: PUSH
21989: LD_INT 10
21991: PUSH
21992: LD_INT 11
21994: PUSH
21995: LD_INT 12
21997: PUSH
21998: LD_INT 13
22000: PUSH
22001: LD_INT 14
22003: PUSH
22004: LD_INT 15
22006: PUSH
22007: LD_INT 16
22009: PUSH
22010: LD_INT 17
22012: PUSH
22013: LD_INT 18
22015: PUSH
22016: LD_INT 19
22018: PUSH
22019: LD_INT 20
22021: PUSH
22022: LD_INT 21
22024: PUSH
22025: LD_INT 22
22027: PUSH
22028: LD_INT 23
22030: PUSH
22031: LD_INT 24
22033: PUSH
22034: LD_INT 25
22036: PUSH
22037: LD_INT 26
22039: PUSH
22040: LD_INT 27
22042: PUSH
22043: LD_INT 28
22045: PUSH
22046: LD_INT 29
22048: PUSH
22049: LD_INT 30
22051: PUSH
22052: LD_INT 31
22054: PUSH
22055: LD_INT 32
22057: PUSH
22058: LD_INT 33
22060: PUSH
22061: LD_INT 34
22063: PUSH
22064: LD_INT 35
22066: PUSH
22067: LD_INT 36
22069: PUSH
22070: EMPTY
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: PUSH
22108: LD_INT 101
22110: PUSH
22111: LD_INT 102
22113: PUSH
22114: LD_INT 103
22116: PUSH
22117: LD_INT 104
22119: PUSH
22120: LD_INT 105
22122: PUSH
22123: LD_INT 106
22125: PUSH
22126: LD_INT 107
22128: PUSH
22129: LD_INT 108
22131: PUSH
22132: LD_INT 109
22134: PUSH
22135: LD_INT 110
22137: PUSH
22138: LD_INT 111
22140: PUSH
22141: LD_INT 112
22143: PUSH
22144: LD_INT 113
22146: PUSH
22147: LD_INT 114
22149: PUSH
22150: LD_INT 115
22152: PUSH
22153: EMPTY
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: PUSH
22170: EMPTY
22171: LIST
22172: LIST
22173: ST_TO_ADDR
22174: GO 22177
22176: POP
// end else
22177: GO 22396
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
22179: LD_ADDR_VAR 0 1
22183: PUSH
22184: LD_INT 1
22186: PUSH
22187: LD_INT 2
22189: PUSH
22190: LD_INT 3
22192: PUSH
22193: LD_INT 4
22195: PUSH
22196: LD_INT 5
22198: PUSH
22199: LD_INT 6
22201: PUSH
22202: LD_INT 7
22204: PUSH
22205: LD_INT 8
22207: PUSH
22208: LD_INT 9
22210: PUSH
22211: LD_INT 10
22213: PUSH
22214: LD_INT 11
22216: PUSH
22217: LD_INT 12
22219: PUSH
22220: LD_INT 13
22222: PUSH
22223: LD_INT 14
22225: PUSH
22226: LD_INT 15
22228: PUSH
22229: LD_INT 16
22231: PUSH
22232: LD_INT 17
22234: PUSH
22235: LD_INT 18
22237: PUSH
22238: LD_INT 19
22240: PUSH
22241: LD_INT 20
22243: PUSH
22244: LD_INT 21
22246: PUSH
22247: LD_INT 22
22249: PUSH
22250: LD_INT 23
22252: PUSH
22253: LD_INT 24
22255: PUSH
22256: LD_INT 25
22258: PUSH
22259: LD_INT 26
22261: PUSH
22262: LD_INT 27
22264: PUSH
22265: LD_INT 28
22267: PUSH
22268: LD_INT 29
22270: PUSH
22271: LD_INT 30
22273: PUSH
22274: LD_INT 31
22276: PUSH
22277: LD_INT 32
22279: PUSH
22280: LD_INT 33
22282: PUSH
22283: LD_INT 34
22285: PUSH
22286: LD_INT 35
22288: PUSH
22289: LD_INT 36
22291: PUSH
22292: EMPTY
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: PUSH
22330: LD_INT 101
22332: PUSH
22333: LD_INT 102
22335: PUSH
22336: LD_INT 103
22338: PUSH
22339: LD_INT 104
22341: PUSH
22342: LD_INT 105
22344: PUSH
22345: LD_INT 106
22347: PUSH
22348: LD_INT 107
22350: PUSH
22351: LD_INT 108
22353: PUSH
22354: LD_INT 109
22356: PUSH
22357: LD_INT 110
22359: PUSH
22360: LD_INT 111
22362: PUSH
22363: LD_INT 112
22365: PUSH
22366: LD_INT 113
22368: PUSH
22369: LD_INT 114
22371: PUSH
22372: LD_INT 115
22374: PUSH
22375: EMPTY
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: PUSH
22392: EMPTY
22393: LIST
22394: LIST
22395: ST_TO_ADDR
// if result then
22396: LD_VAR 0 1
22400: IFFALSE 22689
// begin normal :=  ;
22402: LD_ADDR_VAR 0 3
22406: PUSH
22407: LD_STRING 
22409: ST_TO_ADDR
// hardcore :=  ;
22410: LD_ADDR_VAR 0 4
22414: PUSH
22415: LD_STRING 
22417: ST_TO_ADDR
// for i = 1 to normalCounter do
22418: LD_ADDR_VAR 0 5
22422: PUSH
22423: DOUBLE
22424: LD_INT 1
22426: DEC
22427: ST_TO_ADDR
22428: LD_EXP 69
22432: PUSH
22433: FOR_TO
22434: IFFALSE 22535
// begin tmp := 0 ;
22436: LD_ADDR_VAR 0 2
22440: PUSH
22441: LD_STRING 0
22443: ST_TO_ADDR
// if result [ 1 ] then
22444: LD_VAR 0 1
22448: PUSH
22449: LD_INT 1
22451: ARRAY
22452: IFFALSE 22517
// if result [ 1 ] [ 1 ] = i then
22454: LD_VAR 0 1
22458: PUSH
22459: LD_INT 1
22461: ARRAY
22462: PUSH
22463: LD_INT 1
22465: ARRAY
22466: PUSH
22467: LD_VAR 0 5
22471: EQUAL
22472: IFFALSE 22517
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
22474: LD_ADDR_VAR 0 1
22478: PUSH
22479: LD_VAR 0 1
22483: PPUSH
22484: LD_INT 1
22486: PPUSH
22487: LD_VAR 0 1
22491: PUSH
22492: LD_INT 1
22494: ARRAY
22495: PPUSH
22496: LD_INT 1
22498: PPUSH
22499: CALL_OW 3
22503: PPUSH
22504: CALL_OW 1
22508: ST_TO_ADDR
// tmp := 1 ;
22509: LD_ADDR_VAR 0 2
22513: PUSH
22514: LD_STRING 1
22516: ST_TO_ADDR
// end ; normal := normal & tmp ;
22517: LD_ADDR_VAR 0 3
22521: PUSH
22522: LD_VAR 0 3
22526: PUSH
22527: LD_VAR 0 2
22531: STR
22532: ST_TO_ADDR
// end ;
22533: GO 22433
22535: POP
22536: POP
// for i = 1 to hardcoreCounter do
22537: LD_ADDR_VAR 0 5
22541: PUSH
22542: DOUBLE
22543: LD_INT 1
22545: DEC
22546: ST_TO_ADDR
22547: LD_EXP 70
22551: PUSH
22552: FOR_TO
22553: IFFALSE 22658
// begin tmp := 0 ;
22555: LD_ADDR_VAR 0 2
22559: PUSH
22560: LD_STRING 0
22562: ST_TO_ADDR
// if result [ 2 ] then
22563: LD_VAR 0 1
22567: PUSH
22568: LD_INT 2
22570: ARRAY
22571: IFFALSE 22640
// if result [ 2 ] [ 1 ] = 100 + i then
22573: LD_VAR 0 1
22577: PUSH
22578: LD_INT 2
22580: ARRAY
22581: PUSH
22582: LD_INT 1
22584: ARRAY
22585: PUSH
22586: LD_INT 100
22588: PUSH
22589: LD_VAR 0 5
22593: PLUS
22594: EQUAL
22595: IFFALSE 22640
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
22597: LD_ADDR_VAR 0 1
22601: PUSH
22602: LD_VAR 0 1
22606: PPUSH
22607: LD_INT 2
22609: PPUSH
22610: LD_VAR 0 1
22614: PUSH
22615: LD_INT 2
22617: ARRAY
22618: PPUSH
22619: LD_INT 1
22621: PPUSH
22622: CALL_OW 3
22626: PPUSH
22627: CALL_OW 1
22631: ST_TO_ADDR
// tmp := 1 ;
22632: LD_ADDR_VAR 0 2
22636: PUSH
22637: LD_STRING 1
22639: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
22640: LD_ADDR_VAR 0 4
22644: PUSH
22645: LD_VAR 0 4
22649: PUSH
22650: LD_VAR 0 2
22654: STR
22655: ST_TO_ADDR
// end ;
22656: GO 22552
22658: POP
22659: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
22660: LD_STRING getStreamItemsFromMission("
22662: PUSH
22663: LD_VAR 0 3
22667: STR
22668: PUSH
22669: LD_STRING ","
22671: STR
22672: PUSH
22673: LD_VAR 0 4
22677: STR
22678: PUSH
22679: LD_STRING ")
22681: STR
22682: PPUSH
22683: CALL_OW 559
// end else
22687: GO 22696
// ToLua ( getStreamItemsFromMission("","") ) ;
22689: LD_STRING getStreamItemsFromMission("","")
22691: PPUSH
22692: CALL_OW 559
// end ;
22696: LD_VAR 0 1
22700: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
22701: LD_VAR 0 2
22705: PUSH
22706: LD_INT 100
22708: EQUAL
22709: IFFALSE 23658
// begin if not StreamModeActive then
22711: LD_EXP 68
22715: NOT
22716: IFFALSE 22726
// StreamModeActive := true ;
22718: LD_ADDR_EXP 68
22722: PUSH
22723: LD_INT 1
22725: ST_TO_ADDR
// if p3 = 0 then
22726: LD_VAR 0 3
22730: PUSH
22731: LD_INT 0
22733: EQUAL
22734: IFFALSE 22740
// InitStreamMode ;
22736: CALL 18779 0 0
// if p3 = 1 then
22740: LD_VAR 0 3
22744: PUSH
22745: LD_INT 1
22747: EQUAL
22748: IFFALSE 22758
// sRocket := true ;
22750: LD_ADDR_EXP 73
22754: PUSH
22755: LD_INT 1
22757: ST_TO_ADDR
// if p3 = 2 then
22758: LD_VAR 0 3
22762: PUSH
22763: LD_INT 2
22765: EQUAL
22766: IFFALSE 22776
// sSpeed := true ;
22768: LD_ADDR_EXP 72
22772: PUSH
22773: LD_INT 1
22775: ST_TO_ADDR
// if p3 = 3 then
22776: LD_VAR 0 3
22780: PUSH
22781: LD_INT 3
22783: EQUAL
22784: IFFALSE 22794
// sEngine := true ;
22786: LD_ADDR_EXP 74
22790: PUSH
22791: LD_INT 1
22793: ST_TO_ADDR
// if p3 = 4 then
22794: LD_VAR 0 3
22798: PUSH
22799: LD_INT 4
22801: EQUAL
22802: IFFALSE 22812
// sSpec := true ;
22804: LD_ADDR_EXP 71
22808: PUSH
22809: LD_INT 1
22811: ST_TO_ADDR
// if p3 = 5 then
22812: LD_VAR 0 3
22816: PUSH
22817: LD_INT 5
22819: EQUAL
22820: IFFALSE 22830
// sLevel := true ;
22822: LD_ADDR_EXP 75
22826: PUSH
22827: LD_INT 1
22829: ST_TO_ADDR
// if p3 = 6 then
22830: LD_VAR 0 3
22834: PUSH
22835: LD_INT 6
22837: EQUAL
22838: IFFALSE 22848
// sArmoury := true ;
22840: LD_ADDR_EXP 76
22844: PUSH
22845: LD_INT 1
22847: ST_TO_ADDR
// if p3 = 7 then
22848: LD_VAR 0 3
22852: PUSH
22853: LD_INT 7
22855: EQUAL
22856: IFFALSE 22866
// sRadar := true ;
22858: LD_ADDR_EXP 77
22862: PUSH
22863: LD_INT 1
22865: ST_TO_ADDR
// if p3 = 8 then
22866: LD_VAR 0 3
22870: PUSH
22871: LD_INT 8
22873: EQUAL
22874: IFFALSE 22884
// sBunker := true ;
22876: LD_ADDR_EXP 78
22880: PUSH
22881: LD_INT 1
22883: ST_TO_ADDR
// if p3 = 9 then
22884: LD_VAR 0 3
22888: PUSH
22889: LD_INT 9
22891: EQUAL
22892: IFFALSE 22902
// sHack := true ;
22894: LD_ADDR_EXP 79
22898: PUSH
22899: LD_INT 1
22901: ST_TO_ADDR
// if p3 = 10 then
22902: LD_VAR 0 3
22906: PUSH
22907: LD_INT 10
22909: EQUAL
22910: IFFALSE 22920
// sFire := true ;
22912: LD_ADDR_EXP 80
22916: PUSH
22917: LD_INT 1
22919: ST_TO_ADDR
// if p3 = 11 then
22920: LD_VAR 0 3
22924: PUSH
22925: LD_INT 11
22927: EQUAL
22928: IFFALSE 22938
// sRefresh := true ;
22930: LD_ADDR_EXP 81
22934: PUSH
22935: LD_INT 1
22937: ST_TO_ADDR
// if p3 = 12 then
22938: LD_VAR 0 3
22942: PUSH
22943: LD_INT 12
22945: EQUAL
22946: IFFALSE 22956
// sExp := true ;
22948: LD_ADDR_EXP 82
22952: PUSH
22953: LD_INT 1
22955: ST_TO_ADDR
// if p3 = 13 then
22956: LD_VAR 0 3
22960: PUSH
22961: LD_INT 13
22963: EQUAL
22964: IFFALSE 22974
// sDepot := true ;
22966: LD_ADDR_EXP 83
22970: PUSH
22971: LD_INT 1
22973: ST_TO_ADDR
// if p3 = 14 then
22974: LD_VAR 0 3
22978: PUSH
22979: LD_INT 14
22981: EQUAL
22982: IFFALSE 22992
// sFlag := true ;
22984: LD_ADDR_EXP 84
22988: PUSH
22989: LD_INT 1
22991: ST_TO_ADDR
// if p3 = 15 then
22992: LD_VAR 0 3
22996: PUSH
22997: LD_INT 15
22999: EQUAL
23000: IFFALSE 23010
// sKamikadze := true ;
23002: LD_ADDR_EXP 92
23006: PUSH
23007: LD_INT 1
23009: ST_TO_ADDR
// if p3 = 16 then
23010: LD_VAR 0 3
23014: PUSH
23015: LD_INT 16
23017: EQUAL
23018: IFFALSE 23028
// sTroll := true ;
23020: LD_ADDR_EXP 93
23024: PUSH
23025: LD_INT 1
23027: ST_TO_ADDR
// if p3 = 17 then
23028: LD_VAR 0 3
23032: PUSH
23033: LD_INT 17
23035: EQUAL
23036: IFFALSE 23046
// sSlow := true ;
23038: LD_ADDR_EXP 94
23042: PUSH
23043: LD_INT 1
23045: ST_TO_ADDR
// if p3 = 18 then
23046: LD_VAR 0 3
23050: PUSH
23051: LD_INT 18
23053: EQUAL
23054: IFFALSE 23064
// sLack := true ;
23056: LD_ADDR_EXP 95
23060: PUSH
23061: LD_INT 1
23063: ST_TO_ADDR
// if p3 = 19 then
23064: LD_VAR 0 3
23068: PUSH
23069: LD_INT 19
23071: EQUAL
23072: IFFALSE 23082
// sTank := true ;
23074: LD_ADDR_EXP 97
23078: PUSH
23079: LD_INT 1
23081: ST_TO_ADDR
// if p3 = 20 then
23082: LD_VAR 0 3
23086: PUSH
23087: LD_INT 20
23089: EQUAL
23090: IFFALSE 23100
// sRemote := true ;
23092: LD_ADDR_EXP 98
23096: PUSH
23097: LD_INT 1
23099: ST_TO_ADDR
// if p3 = 21 then
23100: LD_VAR 0 3
23104: PUSH
23105: LD_INT 21
23107: EQUAL
23108: IFFALSE 23118
// sPowell := true ;
23110: LD_ADDR_EXP 99
23114: PUSH
23115: LD_INT 1
23117: ST_TO_ADDR
// if p3 = 22 then
23118: LD_VAR 0 3
23122: PUSH
23123: LD_INT 22
23125: EQUAL
23126: IFFALSE 23136
// sTeleport := true ;
23128: LD_ADDR_EXP 102
23132: PUSH
23133: LD_INT 1
23135: ST_TO_ADDR
// if p3 = 23 then
23136: LD_VAR 0 3
23140: PUSH
23141: LD_INT 23
23143: EQUAL
23144: IFFALSE 23154
// sOilTower := true ;
23146: LD_ADDR_EXP 104
23150: PUSH
23151: LD_INT 1
23153: ST_TO_ADDR
// if p3 = 24 then
23154: LD_VAR 0 3
23158: PUSH
23159: LD_INT 24
23161: EQUAL
23162: IFFALSE 23172
// sShovel := true ;
23164: LD_ADDR_EXP 105
23168: PUSH
23169: LD_INT 1
23171: ST_TO_ADDR
// if p3 = 25 then
23172: LD_VAR 0 3
23176: PUSH
23177: LD_INT 25
23179: EQUAL
23180: IFFALSE 23190
// sSheik := true ;
23182: LD_ADDR_EXP 106
23186: PUSH
23187: LD_INT 1
23189: ST_TO_ADDR
// if p3 = 26 then
23190: LD_VAR 0 3
23194: PUSH
23195: LD_INT 26
23197: EQUAL
23198: IFFALSE 23208
// sEarthquake := true ;
23200: LD_ADDR_EXP 108
23204: PUSH
23205: LD_INT 1
23207: ST_TO_ADDR
// if p3 = 27 then
23208: LD_VAR 0 3
23212: PUSH
23213: LD_INT 27
23215: EQUAL
23216: IFFALSE 23226
// sAI := true ;
23218: LD_ADDR_EXP 109
23222: PUSH
23223: LD_INT 1
23225: ST_TO_ADDR
// if p3 = 28 then
23226: LD_VAR 0 3
23230: PUSH
23231: LD_INT 28
23233: EQUAL
23234: IFFALSE 23244
// sCargo := true ;
23236: LD_ADDR_EXP 112
23240: PUSH
23241: LD_INT 1
23243: ST_TO_ADDR
// if p3 = 29 then
23244: LD_VAR 0 3
23248: PUSH
23249: LD_INT 29
23251: EQUAL
23252: IFFALSE 23262
// sDLaser := true ;
23254: LD_ADDR_EXP 113
23258: PUSH
23259: LD_INT 1
23261: ST_TO_ADDR
// if p3 = 30 then
23262: LD_VAR 0 3
23266: PUSH
23267: LD_INT 30
23269: EQUAL
23270: IFFALSE 23280
// sExchange := true ;
23272: LD_ADDR_EXP 114
23276: PUSH
23277: LD_INT 1
23279: ST_TO_ADDR
// if p3 = 31 then
23280: LD_VAR 0 3
23284: PUSH
23285: LD_INT 31
23287: EQUAL
23288: IFFALSE 23298
// sFac := true ;
23290: LD_ADDR_EXP 115
23294: PUSH
23295: LD_INT 1
23297: ST_TO_ADDR
// if p3 = 32 then
23298: LD_VAR 0 3
23302: PUSH
23303: LD_INT 32
23305: EQUAL
23306: IFFALSE 23316
// sPower := true ;
23308: LD_ADDR_EXP 116
23312: PUSH
23313: LD_INT 1
23315: ST_TO_ADDR
// if p3 = 33 then
23316: LD_VAR 0 3
23320: PUSH
23321: LD_INT 33
23323: EQUAL
23324: IFFALSE 23334
// sRandom := true ;
23326: LD_ADDR_EXP 117
23330: PUSH
23331: LD_INT 1
23333: ST_TO_ADDR
// if p3 = 34 then
23334: LD_VAR 0 3
23338: PUSH
23339: LD_INT 34
23341: EQUAL
23342: IFFALSE 23352
// sShield := true ;
23344: LD_ADDR_EXP 118
23348: PUSH
23349: LD_INT 1
23351: ST_TO_ADDR
// if p3 = 35 then
23352: LD_VAR 0 3
23356: PUSH
23357: LD_INT 35
23359: EQUAL
23360: IFFALSE 23370
// sTime := true ;
23362: LD_ADDR_EXP 119
23366: PUSH
23367: LD_INT 1
23369: ST_TO_ADDR
// if p3 = 36 then
23370: LD_VAR 0 3
23374: PUSH
23375: LD_INT 36
23377: EQUAL
23378: IFFALSE 23388
// sTools := true ;
23380: LD_ADDR_EXP 120
23384: PUSH
23385: LD_INT 1
23387: ST_TO_ADDR
// if p3 = 101 then
23388: LD_VAR 0 3
23392: PUSH
23393: LD_INT 101
23395: EQUAL
23396: IFFALSE 23406
// sSold := true ;
23398: LD_ADDR_EXP 85
23402: PUSH
23403: LD_INT 1
23405: ST_TO_ADDR
// if p3 = 102 then
23406: LD_VAR 0 3
23410: PUSH
23411: LD_INT 102
23413: EQUAL
23414: IFFALSE 23424
// sDiff := true ;
23416: LD_ADDR_EXP 86
23420: PUSH
23421: LD_INT 1
23423: ST_TO_ADDR
// if p3 = 103 then
23424: LD_VAR 0 3
23428: PUSH
23429: LD_INT 103
23431: EQUAL
23432: IFFALSE 23442
// sFog := true ;
23434: LD_ADDR_EXP 89
23438: PUSH
23439: LD_INT 1
23441: ST_TO_ADDR
// if p3 = 104 then
23442: LD_VAR 0 3
23446: PUSH
23447: LD_INT 104
23449: EQUAL
23450: IFFALSE 23460
// sReset := true ;
23452: LD_ADDR_EXP 90
23456: PUSH
23457: LD_INT 1
23459: ST_TO_ADDR
// if p3 = 105 then
23460: LD_VAR 0 3
23464: PUSH
23465: LD_INT 105
23467: EQUAL
23468: IFFALSE 23478
// sSun := true ;
23470: LD_ADDR_EXP 91
23474: PUSH
23475: LD_INT 1
23477: ST_TO_ADDR
// if p3 = 106 then
23478: LD_VAR 0 3
23482: PUSH
23483: LD_INT 106
23485: EQUAL
23486: IFFALSE 23496
// sTiger := true ;
23488: LD_ADDR_EXP 87
23492: PUSH
23493: LD_INT 1
23495: ST_TO_ADDR
// if p3 = 107 then
23496: LD_VAR 0 3
23500: PUSH
23501: LD_INT 107
23503: EQUAL
23504: IFFALSE 23514
// sBomb := true ;
23506: LD_ADDR_EXP 88
23510: PUSH
23511: LD_INT 1
23513: ST_TO_ADDR
// if p3 = 108 then
23514: LD_VAR 0 3
23518: PUSH
23519: LD_INT 108
23521: EQUAL
23522: IFFALSE 23532
// sWound := true ;
23524: LD_ADDR_EXP 96
23528: PUSH
23529: LD_INT 1
23531: ST_TO_ADDR
// if p3 = 109 then
23532: LD_VAR 0 3
23536: PUSH
23537: LD_INT 109
23539: EQUAL
23540: IFFALSE 23550
// sBetray := true ;
23542: LD_ADDR_EXP 100
23546: PUSH
23547: LD_INT 1
23549: ST_TO_ADDR
// if p3 = 110 then
23550: LD_VAR 0 3
23554: PUSH
23555: LD_INT 110
23557: EQUAL
23558: IFFALSE 23568
// sContamin := true ;
23560: LD_ADDR_EXP 101
23564: PUSH
23565: LD_INT 1
23567: ST_TO_ADDR
// if p3 = 111 then
23568: LD_VAR 0 3
23572: PUSH
23573: LD_INT 111
23575: EQUAL
23576: IFFALSE 23586
// sOil := true ;
23578: LD_ADDR_EXP 103
23582: PUSH
23583: LD_INT 1
23585: ST_TO_ADDR
// if p3 = 112 then
23586: LD_VAR 0 3
23590: PUSH
23591: LD_INT 112
23593: EQUAL
23594: IFFALSE 23604
// sStu := true ;
23596: LD_ADDR_EXP 107
23600: PUSH
23601: LD_INT 1
23603: ST_TO_ADDR
// if p3 = 113 then
23604: LD_VAR 0 3
23608: PUSH
23609: LD_INT 113
23611: EQUAL
23612: IFFALSE 23622
// sBazooka := true ;
23614: LD_ADDR_EXP 110
23618: PUSH
23619: LD_INT 1
23621: ST_TO_ADDR
// if p3 = 114 then
23622: LD_VAR 0 3
23626: PUSH
23627: LD_INT 114
23629: EQUAL
23630: IFFALSE 23640
// sMortar := true ;
23632: LD_ADDR_EXP 111
23636: PUSH
23637: LD_INT 1
23639: ST_TO_ADDR
// if p3 = 115 then
23640: LD_VAR 0 3
23644: PUSH
23645: LD_INT 115
23647: EQUAL
23648: IFFALSE 23658
// sRanger := true ;
23650: LD_ADDR_EXP 121
23654: PUSH
23655: LD_INT 1
23657: ST_TO_ADDR
// end ; end ;
23658: PPOPN 6
23660: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
23661: LD_EXP 68
23665: PUSH
23666: LD_EXP 73
23670: AND
23671: IFFALSE 23795
23673: GO 23675
23675: DISABLE
23676: LD_INT 0
23678: PPUSH
23679: PPUSH
// begin enable ;
23680: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
23681: LD_ADDR_VAR 0 2
23685: PUSH
23686: LD_INT 22
23688: PUSH
23689: LD_OWVAR 2
23693: PUSH
23694: EMPTY
23695: LIST
23696: LIST
23697: PUSH
23698: LD_INT 2
23700: PUSH
23701: LD_INT 34
23703: PUSH
23704: LD_INT 7
23706: PUSH
23707: EMPTY
23708: LIST
23709: LIST
23710: PUSH
23711: LD_INT 34
23713: PUSH
23714: LD_INT 45
23716: PUSH
23717: EMPTY
23718: LIST
23719: LIST
23720: PUSH
23721: LD_INT 34
23723: PUSH
23724: LD_INT 28
23726: PUSH
23727: EMPTY
23728: LIST
23729: LIST
23730: PUSH
23731: LD_INT 34
23733: PUSH
23734: LD_INT 47
23736: PUSH
23737: EMPTY
23738: LIST
23739: LIST
23740: PUSH
23741: EMPTY
23742: LIST
23743: LIST
23744: LIST
23745: LIST
23746: LIST
23747: PUSH
23748: EMPTY
23749: LIST
23750: LIST
23751: PPUSH
23752: CALL_OW 69
23756: ST_TO_ADDR
// if not tmp then
23757: LD_VAR 0 2
23761: NOT
23762: IFFALSE 23766
// exit ;
23764: GO 23795
// for i in tmp do
23766: LD_ADDR_VAR 0 1
23770: PUSH
23771: LD_VAR 0 2
23775: PUSH
23776: FOR_IN
23777: IFFALSE 23793
// begin SetLives ( i , 0 ) ;
23779: LD_VAR 0 1
23783: PPUSH
23784: LD_INT 0
23786: PPUSH
23787: CALL_OW 234
// end ;
23791: GO 23776
23793: POP
23794: POP
// end ;
23795: PPOPN 2
23797: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
23798: LD_EXP 68
23802: PUSH
23803: LD_EXP 74
23807: AND
23808: IFFALSE 23892
23810: GO 23812
23812: DISABLE
23813: LD_INT 0
23815: PPUSH
23816: PPUSH
// begin enable ;
23817: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
23818: LD_ADDR_VAR 0 2
23822: PUSH
23823: LD_INT 22
23825: PUSH
23826: LD_OWVAR 2
23830: PUSH
23831: EMPTY
23832: LIST
23833: LIST
23834: PUSH
23835: LD_INT 32
23837: PUSH
23838: LD_INT 3
23840: PUSH
23841: EMPTY
23842: LIST
23843: LIST
23844: PUSH
23845: EMPTY
23846: LIST
23847: LIST
23848: PPUSH
23849: CALL_OW 69
23853: ST_TO_ADDR
// if not tmp then
23854: LD_VAR 0 2
23858: NOT
23859: IFFALSE 23863
// exit ;
23861: GO 23892
// for i in tmp do
23863: LD_ADDR_VAR 0 1
23867: PUSH
23868: LD_VAR 0 2
23872: PUSH
23873: FOR_IN
23874: IFFALSE 23890
// begin SetLives ( i , 0 ) ;
23876: LD_VAR 0 1
23880: PPUSH
23881: LD_INT 0
23883: PPUSH
23884: CALL_OW 234
// end ;
23888: GO 23873
23890: POP
23891: POP
// end ;
23892: PPOPN 2
23894: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
23895: LD_EXP 68
23899: PUSH
23900: LD_EXP 71
23904: AND
23905: IFFALSE 23998
23907: GO 23909
23909: DISABLE
23910: LD_INT 0
23912: PPUSH
// begin enable ;
23913: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
23914: LD_ADDR_VAR 0 1
23918: PUSH
23919: LD_INT 22
23921: PUSH
23922: LD_OWVAR 2
23926: PUSH
23927: EMPTY
23928: LIST
23929: LIST
23930: PUSH
23931: LD_INT 2
23933: PUSH
23934: LD_INT 25
23936: PUSH
23937: LD_INT 5
23939: PUSH
23940: EMPTY
23941: LIST
23942: LIST
23943: PUSH
23944: LD_INT 25
23946: PUSH
23947: LD_INT 9
23949: PUSH
23950: EMPTY
23951: LIST
23952: LIST
23953: PUSH
23954: LD_INT 25
23956: PUSH
23957: LD_INT 8
23959: PUSH
23960: EMPTY
23961: LIST
23962: LIST
23963: PUSH
23964: EMPTY
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: PUSH
23970: EMPTY
23971: LIST
23972: LIST
23973: PPUSH
23974: CALL_OW 69
23978: PUSH
23979: FOR_IN
23980: IFFALSE 23996
// begin SetClass ( i , 1 ) ;
23982: LD_VAR 0 1
23986: PPUSH
23987: LD_INT 1
23989: PPUSH
23990: CALL_OW 336
// end ;
23994: GO 23979
23996: POP
23997: POP
// end ;
23998: PPOPN 1
24000: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24001: LD_EXP 68
24005: PUSH
24006: LD_EXP 72
24010: AND
24011: PUSH
24012: LD_OWVAR 65
24016: PUSH
24017: LD_INT 7
24019: LESS
24020: AND
24021: IFFALSE 24035
24023: GO 24025
24025: DISABLE
// begin enable ;
24026: ENABLE
// game_speed := 7 ;
24027: LD_ADDR_OWVAR 65
24031: PUSH
24032: LD_INT 7
24034: ST_TO_ADDR
// end ;
24035: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24036: LD_EXP 68
24040: PUSH
24041: LD_EXP 75
24045: AND
24046: IFFALSE 24248
24048: GO 24050
24050: DISABLE
24051: LD_INT 0
24053: PPUSH
24054: PPUSH
24055: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24056: LD_ADDR_VAR 0 3
24060: PUSH
24061: LD_INT 81
24063: PUSH
24064: LD_OWVAR 2
24068: PUSH
24069: EMPTY
24070: LIST
24071: LIST
24072: PUSH
24073: LD_INT 21
24075: PUSH
24076: LD_INT 1
24078: PUSH
24079: EMPTY
24080: LIST
24081: LIST
24082: PUSH
24083: EMPTY
24084: LIST
24085: LIST
24086: PPUSH
24087: CALL_OW 69
24091: ST_TO_ADDR
// if not tmp then
24092: LD_VAR 0 3
24096: NOT
24097: IFFALSE 24101
// exit ;
24099: GO 24248
// if tmp > 5 then
24101: LD_VAR 0 3
24105: PUSH
24106: LD_INT 5
24108: GREATER
24109: IFFALSE 24121
// k := 5 else
24111: LD_ADDR_VAR 0 2
24115: PUSH
24116: LD_INT 5
24118: ST_TO_ADDR
24119: GO 24131
// k := tmp ;
24121: LD_ADDR_VAR 0 2
24125: PUSH
24126: LD_VAR 0 3
24130: ST_TO_ADDR
// for i := 1 to k do
24131: LD_ADDR_VAR 0 1
24135: PUSH
24136: DOUBLE
24137: LD_INT 1
24139: DEC
24140: ST_TO_ADDR
24141: LD_VAR 0 2
24145: PUSH
24146: FOR_TO
24147: IFFALSE 24246
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24149: LD_VAR 0 3
24153: PUSH
24154: LD_VAR 0 1
24158: ARRAY
24159: PPUSH
24160: LD_VAR 0 1
24164: PUSH
24165: LD_INT 4
24167: MOD
24168: PUSH
24169: LD_INT 1
24171: PLUS
24172: PPUSH
24173: CALL_OW 259
24177: PUSH
24178: LD_INT 10
24180: LESS
24181: IFFALSE 24244
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24183: LD_VAR 0 3
24187: PUSH
24188: LD_VAR 0 1
24192: ARRAY
24193: PPUSH
24194: LD_VAR 0 1
24198: PUSH
24199: LD_INT 4
24201: MOD
24202: PUSH
24203: LD_INT 1
24205: PLUS
24206: PPUSH
24207: LD_VAR 0 3
24211: PUSH
24212: LD_VAR 0 1
24216: ARRAY
24217: PPUSH
24218: LD_VAR 0 1
24222: PUSH
24223: LD_INT 4
24225: MOD
24226: PUSH
24227: LD_INT 1
24229: PLUS
24230: PPUSH
24231: CALL_OW 259
24235: PUSH
24236: LD_INT 1
24238: PLUS
24239: PPUSH
24240: CALL_OW 237
24244: GO 24146
24246: POP
24247: POP
// end ;
24248: PPOPN 3
24250: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
24251: LD_EXP 68
24255: PUSH
24256: LD_EXP 76
24260: AND
24261: IFFALSE 24281
24263: GO 24265
24265: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
24266: LD_INT 4
24268: PPUSH
24269: LD_OWVAR 2
24273: PPUSH
24274: LD_INT 0
24276: PPUSH
24277: CALL_OW 324
24281: END
// every 0 0$1 trigger StreamModeActive and sShovel do
24282: LD_EXP 68
24286: PUSH
24287: LD_EXP 105
24291: AND
24292: IFFALSE 24312
24294: GO 24296
24296: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
24297: LD_INT 19
24299: PPUSH
24300: LD_OWVAR 2
24304: PPUSH
24305: LD_INT 0
24307: PPUSH
24308: CALL_OW 324
24312: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
24313: LD_EXP 68
24317: PUSH
24318: LD_EXP 77
24322: AND
24323: IFFALSE 24425
24325: GO 24327
24327: DISABLE
24328: LD_INT 0
24330: PPUSH
24331: PPUSH
// begin enable ;
24332: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
24333: LD_ADDR_VAR 0 2
24337: PUSH
24338: LD_INT 22
24340: PUSH
24341: LD_OWVAR 2
24345: PUSH
24346: EMPTY
24347: LIST
24348: LIST
24349: PUSH
24350: LD_INT 2
24352: PUSH
24353: LD_INT 34
24355: PUSH
24356: LD_INT 11
24358: PUSH
24359: EMPTY
24360: LIST
24361: LIST
24362: PUSH
24363: LD_INT 34
24365: PUSH
24366: LD_INT 30
24368: PUSH
24369: EMPTY
24370: LIST
24371: LIST
24372: PUSH
24373: EMPTY
24374: LIST
24375: LIST
24376: LIST
24377: PUSH
24378: EMPTY
24379: LIST
24380: LIST
24381: PPUSH
24382: CALL_OW 69
24386: ST_TO_ADDR
// if not tmp then
24387: LD_VAR 0 2
24391: NOT
24392: IFFALSE 24396
// exit ;
24394: GO 24425
// for i in tmp do
24396: LD_ADDR_VAR 0 1
24400: PUSH
24401: LD_VAR 0 2
24405: PUSH
24406: FOR_IN
24407: IFFALSE 24423
// begin SetLives ( i , 0 ) ;
24409: LD_VAR 0 1
24413: PPUSH
24414: LD_INT 0
24416: PPUSH
24417: CALL_OW 234
// end ;
24421: GO 24406
24423: POP
24424: POP
// end ;
24425: PPOPN 2
24427: END
// every 0 0$1 trigger StreamModeActive and sBunker do
24428: LD_EXP 68
24432: PUSH
24433: LD_EXP 78
24437: AND
24438: IFFALSE 24458
24440: GO 24442
24442: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
24443: LD_INT 32
24445: PPUSH
24446: LD_OWVAR 2
24450: PPUSH
24451: LD_INT 0
24453: PPUSH
24454: CALL_OW 324
24458: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
24459: LD_EXP 68
24463: PUSH
24464: LD_EXP 79
24468: AND
24469: IFFALSE 24650
24471: GO 24473
24473: DISABLE
24474: LD_INT 0
24476: PPUSH
24477: PPUSH
24478: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
24479: LD_ADDR_VAR 0 2
24483: PUSH
24484: LD_INT 22
24486: PUSH
24487: LD_OWVAR 2
24491: PUSH
24492: EMPTY
24493: LIST
24494: LIST
24495: PUSH
24496: LD_INT 33
24498: PUSH
24499: LD_INT 3
24501: PUSH
24502: EMPTY
24503: LIST
24504: LIST
24505: PUSH
24506: EMPTY
24507: LIST
24508: LIST
24509: PPUSH
24510: CALL_OW 69
24514: ST_TO_ADDR
// if not tmp then
24515: LD_VAR 0 2
24519: NOT
24520: IFFALSE 24524
// exit ;
24522: GO 24650
// side := 0 ;
24524: LD_ADDR_VAR 0 3
24528: PUSH
24529: LD_INT 0
24531: ST_TO_ADDR
// for i := 1 to 8 do
24532: LD_ADDR_VAR 0 1
24536: PUSH
24537: DOUBLE
24538: LD_INT 1
24540: DEC
24541: ST_TO_ADDR
24542: LD_INT 8
24544: PUSH
24545: FOR_TO
24546: IFFALSE 24594
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
24548: LD_OWVAR 2
24552: PUSH
24553: LD_VAR 0 1
24557: NONEQUAL
24558: PUSH
24559: LD_OWVAR 2
24563: PPUSH
24564: LD_VAR 0 1
24568: PPUSH
24569: CALL_OW 81
24573: PUSH
24574: LD_INT 2
24576: EQUAL
24577: AND
24578: IFFALSE 24592
// begin side := i ;
24580: LD_ADDR_VAR 0 3
24584: PUSH
24585: LD_VAR 0 1
24589: ST_TO_ADDR
// break ;
24590: GO 24594
// end ;
24592: GO 24545
24594: POP
24595: POP
// if not side then
24596: LD_VAR 0 3
24600: NOT
24601: IFFALSE 24605
// exit ;
24603: GO 24650
// for i := 1 to tmp do
24605: LD_ADDR_VAR 0 1
24609: PUSH
24610: DOUBLE
24611: LD_INT 1
24613: DEC
24614: ST_TO_ADDR
24615: LD_VAR 0 2
24619: PUSH
24620: FOR_TO
24621: IFFALSE 24648
// if Prob ( 60 ) then
24623: LD_INT 60
24625: PPUSH
24626: CALL_OW 13
24630: IFFALSE 24646
// SetSide ( i , side ) ;
24632: LD_VAR 0 1
24636: PPUSH
24637: LD_VAR 0 3
24641: PPUSH
24642: CALL_OW 235
24646: GO 24620
24648: POP
24649: POP
// end ;
24650: PPOPN 3
24652: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
24653: LD_EXP 68
24657: PUSH
24658: LD_EXP 81
24662: AND
24663: IFFALSE 24782
24665: GO 24667
24667: DISABLE
24668: LD_INT 0
24670: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
24671: LD_ADDR_VAR 0 1
24675: PUSH
24676: LD_INT 22
24678: PUSH
24679: LD_OWVAR 2
24683: PUSH
24684: EMPTY
24685: LIST
24686: LIST
24687: PUSH
24688: LD_INT 21
24690: PUSH
24691: LD_INT 1
24693: PUSH
24694: EMPTY
24695: LIST
24696: LIST
24697: PUSH
24698: LD_INT 3
24700: PUSH
24701: LD_INT 23
24703: PUSH
24704: LD_INT 0
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: PUSH
24711: EMPTY
24712: LIST
24713: LIST
24714: PUSH
24715: EMPTY
24716: LIST
24717: LIST
24718: LIST
24719: PPUSH
24720: CALL_OW 69
24724: PUSH
24725: FOR_IN
24726: IFFALSE 24780
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
24728: LD_VAR 0 1
24732: PPUSH
24733: CALL_OW 257
24737: PUSH
24738: LD_INT 1
24740: PUSH
24741: LD_INT 2
24743: PUSH
24744: LD_INT 3
24746: PUSH
24747: LD_INT 4
24749: PUSH
24750: EMPTY
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: IN
24756: IFFALSE 24778
// SetClass ( un , rand ( 1 , 4 ) ) ;
24758: LD_VAR 0 1
24762: PPUSH
24763: LD_INT 1
24765: PPUSH
24766: LD_INT 4
24768: PPUSH
24769: CALL_OW 12
24773: PPUSH
24774: CALL_OW 336
24778: GO 24725
24780: POP
24781: POP
// end ;
24782: PPOPN 1
24784: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
24785: LD_EXP 68
24789: PUSH
24790: LD_EXP 80
24794: AND
24795: IFFALSE 24874
24797: GO 24799
24799: DISABLE
24800: LD_INT 0
24802: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24803: LD_ADDR_VAR 0 1
24807: PUSH
24808: LD_INT 22
24810: PUSH
24811: LD_OWVAR 2
24815: PUSH
24816: EMPTY
24817: LIST
24818: LIST
24819: PUSH
24820: LD_INT 21
24822: PUSH
24823: LD_INT 3
24825: PUSH
24826: EMPTY
24827: LIST
24828: LIST
24829: PUSH
24830: EMPTY
24831: LIST
24832: LIST
24833: PPUSH
24834: CALL_OW 69
24838: ST_TO_ADDR
// if not tmp then
24839: LD_VAR 0 1
24843: NOT
24844: IFFALSE 24848
// exit ;
24846: GO 24874
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
24848: LD_VAR 0 1
24852: PUSH
24853: LD_INT 1
24855: PPUSH
24856: LD_VAR 0 1
24860: PPUSH
24861: CALL_OW 12
24865: ARRAY
24866: PPUSH
24867: LD_INT 100
24869: PPUSH
24870: CALL_OW 234
// end ;
24874: PPOPN 1
24876: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
24877: LD_EXP 68
24881: PUSH
24882: LD_EXP 82
24886: AND
24887: IFFALSE 24985
24889: GO 24891
24891: DISABLE
24892: LD_INT 0
24894: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24895: LD_ADDR_VAR 0 1
24899: PUSH
24900: LD_INT 22
24902: PUSH
24903: LD_OWVAR 2
24907: PUSH
24908: EMPTY
24909: LIST
24910: LIST
24911: PUSH
24912: LD_INT 21
24914: PUSH
24915: LD_INT 1
24917: PUSH
24918: EMPTY
24919: LIST
24920: LIST
24921: PUSH
24922: EMPTY
24923: LIST
24924: LIST
24925: PPUSH
24926: CALL_OW 69
24930: ST_TO_ADDR
// if not tmp then
24931: LD_VAR 0 1
24935: NOT
24936: IFFALSE 24940
// exit ;
24938: GO 24985
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
24940: LD_VAR 0 1
24944: PUSH
24945: LD_INT 1
24947: PPUSH
24948: LD_VAR 0 1
24952: PPUSH
24953: CALL_OW 12
24957: ARRAY
24958: PPUSH
24959: LD_INT 1
24961: PPUSH
24962: LD_INT 4
24964: PPUSH
24965: CALL_OW 12
24969: PPUSH
24970: LD_INT 3000
24972: PPUSH
24973: LD_INT 9000
24975: PPUSH
24976: CALL_OW 12
24980: PPUSH
24981: CALL_OW 492
// end ;
24985: PPOPN 1
24987: END
// every 0 0$1 trigger StreamModeActive and sDepot do
24988: LD_EXP 68
24992: PUSH
24993: LD_EXP 83
24997: AND
24998: IFFALSE 25018
25000: GO 25002
25002: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25003: LD_INT 1
25005: PPUSH
25006: LD_OWVAR 2
25010: PPUSH
25011: LD_INT 0
25013: PPUSH
25014: CALL_OW 324
25018: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25019: LD_EXP 68
25023: PUSH
25024: LD_EXP 84
25028: AND
25029: IFFALSE 25112
25031: GO 25033
25033: DISABLE
25034: LD_INT 0
25036: PPUSH
25037: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25038: LD_ADDR_VAR 0 2
25042: PUSH
25043: LD_INT 22
25045: PUSH
25046: LD_OWVAR 2
25050: PUSH
25051: EMPTY
25052: LIST
25053: LIST
25054: PUSH
25055: LD_INT 21
25057: PUSH
25058: LD_INT 3
25060: PUSH
25061: EMPTY
25062: LIST
25063: LIST
25064: PUSH
25065: EMPTY
25066: LIST
25067: LIST
25068: PPUSH
25069: CALL_OW 69
25073: ST_TO_ADDR
// if not tmp then
25074: LD_VAR 0 2
25078: NOT
25079: IFFALSE 25083
// exit ;
25081: GO 25112
// for i in tmp do
25083: LD_ADDR_VAR 0 1
25087: PUSH
25088: LD_VAR 0 2
25092: PUSH
25093: FOR_IN
25094: IFFALSE 25110
// SetBLevel ( i , 10 ) ;
25096: LD_VAR 0 1
25100: PPUSH
25101: LD_INT 10
25103: PPUSH
25104: CALL_OW 241
25108: GO 25093
25110: POP
25111: POP
// end ;
25112: PPOPN 2
25114: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25115: LD_EXP 68
25119: PUSH
25120: LD_EXP 85
25124: AND
25125: IFFALSE 25236
25127: GO 25129
25129: DISABLE
25130: LD_INT 0
25132: PPUSH
25133: PPUSH
25134: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25135: LD_ADDR_VAR 0 3
25139: PUSH
25140: LD_INT 22
25142: PUSH
25143: LD_OWVAR 2
25147: PUSH
25148: EMPTY
25149: LIST
25150: LIST
25151: PUSH
25152: LD_INT 25
25154: PUSH
25155: LD_INT 1
25157: PUSH
25158: EMPTY
25159: LIST
25160: LIST
25161: PUSH
25162: EMPTY
25163: LIST
25164: LIST
25165: PPUSH
25166: CALL_OW 69
25170: ST_TO_ADDR
// if not tmp then
25171: LD_VAR 0 3
25175: NOT
25176: IFFALSE 25180
// exit ;
25178: GO 25236
// un := tmp [ rand ( 1 , tmp ) ] ;
25180: LD_ADDR_VAR 0 2
25184: PUSH
25185: LD_VAR 0 3
25189: PUSH
25190: LD_INT 1
25192: PPUSH
25193: LD_VAR 0 3
25197: PPUSH
25198: CALL_OW 12
25202: ARRAY
25203: ST_TO_ADDR
// if Crawls ( un ) then
25204: LD_VAR 0 2
25208: PPUSH
25209: CALL_OW 318
25213: IFFALSE 25224
// ComWalk ( un ) ;
25215: LD_VAR 0 2
25219: PPUSH
25220: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25224: LD_VAR 0 2
25228: PPUSH
25229: LD_INT 5
25231: PPUSH
25232: CALL_OW 336
// end ;
25236: PPOPN 3
25238: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
25239: LD_EXP 68
25243: PUSH
25244: LD_EXP 86
25248: AND
25249: PUSH
25250: LD_OWVAR 67
25254: PUSH
25255: LD_INT 3
25257: LESS
25258: AND
25259: IFFALSE 25278
25261: GO 25263
25263: DISABLE
// Difficulty := Difficulty + 1 ;
25264: LD_ADDR_OWVAR 67
25268: PUSH
25269: LD_OWVAR 67
25273: PUSH
25274: LD_INT 1
25276: PLUS
25277: ST_TO_ADDR
25278: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
25279: LD_EXP 68
25283: PUSH
25284: LD_EXP 87
25288: AND
25289: IFFALSE 25392
25291: GO 25293
25293: DISABLE
25294: LD_INT 0
25296: PPUSH
// begin for i := 1 to 5 do
25297: LD_ADDR_VAR 0 1
25301: PUSH
25302: DOUBLE
25303: LD_INT 1
25305: DEC
25306: ST_TO_ADDR
25307: LD_INT 5
25309: PUSH
25310: FOR_TO
25311: IFFALSE 25390
// begin uc_nation := nation_nature ;
25313: LD_ADDR_OWVAR 21
25317: PUSH
25318: LD_INT 0
25320: ST_TO_ADDR
// uc_side := 0 ;
25321: LD_ADDR_OWVAR 20
25325: PUSH
25326: LD_INT 0
25328: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25329: LD_ADDR_OWVAR 29
25333: PUSH
25334: LD_INT 12
25336: PUSH
25337: LD_INT 12
25339: PUSH
25340: EMPTY
25341: LIST
25342: LIST
25343: ST_TO_ADDR
// hc_agressivity := 20 ;
25344: LD_ADDR_OWVAR 35
25348: PUSH
25349: LD_INT 20
25351: ST_TO_ADDR
// hc_class := class_tiger ;
25352: LD_ADDR_OWVAR 28
25356: PUSH
25357: LD_INT 14
25359: ST_TO_ADDR
// hc_gallery :=  ;
25360: LD_ADDR_OWVAR 33
25364: PUSH
25365: LD_STRING 
25367: ST_TO_ADDR
// hc_name :=  ;
25368: LD_ADDR_OWVAR 26
25372: PUSH
25373: LD_STRING 
25375: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
25376: CALL_OW 44
25380: PPUSH
25381: LD_INT 0
25383: PPUSH
25384: CALL_OW 51
// end ;
25388: GO 25310
25390: POP
25391: POP
// end ;
25392: PPOPN 1
25394: END
// every 0 0$1 trigger StreamModeActive and sBomb do
25395: LD_EXP 68
25399: PUSH
25400: LD_EXP 88
25404: AND
25405: IFFALSE 25414
25407: GO 25409
25409: DISABLE
// StreamSibBomb ;
25410: CALL 25415 0 0
25414: END
// export function StreamSibBomb ; var i , x , y ; begin
25415: LD_INT 0
25417: PPUSH
25418: PPUSH
25419: PPUSH
25420: PPUSH
// result := false ;
25421: LD_ADDR_VAR 0 1
25425: PUSH
25426: LD_INT 0
25428: ST_TO_ADDR
// for i := 1 to 16 do
25429: LD_ADDR_VAR 0 2
25433: PUSH
25434: DOUBLE
25435: LD_INT 1
25437: DEC
25438: ST_TO_ADDR
25439: LD_INT 16
25441: PUSH
25442: FOR_TO
25443: IFFALSE 25642
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25445: LD_ADDR_VAR 0 3
25449: PUSH
25450: LD_INT 10
25452: PUSH
25453: LD_INT 20
25455: PUSH
25456: LD_INT 30
25458: PUSH
25459: LD_INT 40
25461: PUSH
25462: LD_INT 50
25464: PUSH
25465: LD_INT 60
25467: PUSH
25468: LD_INT 70
25470: PUSH
25471: LD_INT 80
25473: PUSH
25474: LD_INT 90
25476: PUSH
25477: LD_INT 100
25479: PUSH
25480: LD_INT 110
25482: PUSH
25483: LD_INT 120
25485: PUSH
25486: LD_INT 130
25488: PUSH
25489: LD_INT 140
25491: PUSH
25492: LD_INT 150
25494: PUSH
25495: EMPTY
25496: LIST
25497: LIST
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: LIST
25503: LIST
25504: LIST
25505: LIST
25506: LIST
25507: LIST
25508: LIST
25509: LIST
25510: LIST
25511: PUSH
25512: LD_INT 1
25514: PPUSH
25515: LD_INT 15
25517: PPUSH
25518: CALL_OW 12
25522: ARRAY
25523: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25524: LD_ADDR_VAR 0 4
25528: PUSH
25529: LD_INT 10
25531: PUSH
25532: LD_INT 20
25534: PUSH
25535: LD_INT 30
25537: PUSH
25538: LD_INT 40
25540: PUSH
25541: LD_INT 50
25543: PUSH
25544: LD_INT 60
25546: PUSH
25547: LD_INT 70
25549: PUSH
25550: LD_INT 80
25552: PUSH
25553: LD_INT 90
25555: PUSH
25556: LD_INT 100
25558: PUSH
25559: LD_INT 110
25561: PUSH
25562: LD_INT 120
25564: PUSH
25565: LD_INT 130
25567: PUSH
25568: LD_INT 140
25570: PUSH
25571: LD_INT 150
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: LIST
25580: LIST
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: LIST
25589: LIST
25590: PUSH
25591: LD_INT 1
25593: PPUSH
25594: LD_INT 15
25596: PPUSH
25597: CALL_OW 12
25601: ARRAY
25602: ST_TO_ADDR
// if ValidHex ( x , y ) then
25603: LD_VAR 0 3
25607: PPUSH
25608: LD_VAR 0 4
25612: PPUSH
25613: CALL_OW 488
25617: IFFALSE 25640
// begin result := [ x , y ] ;
25619: LD_ADDR_VAR 0 1
25623: PUSH
25624: LD_VAR 0 3
25628: PUSH
25629: LD_VAR 0 4
25633: PUSH
25634: EMPTY
25635: LIST
25636: LIST
25637: ST_TO_ADDR
// break ;
25638: GO 25642
// end ; end ;
25640: GO 25442
25642: POP
25643: POP
// if result then
25644: LD_VAR 0 1
25648: IFFALSE 25708
// begin ToLua ( playSibBomb() ) ;
25650: LD_STRING playSibBomb()
25652: PPUSH
25653: CALL_OW 559
// wait ( 0 0$14 ) ;
25657: LD_INT 490
25659: PPUSH
25660: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
25664: LD_VAR 0 1
25668: PUSH
25669: LD_INT 1
25671: ARRAY
25672: PPUSH
25673: LD_VAR 0 1
25677: PUSH
25678: LD_INT 2
25680: ARRAY
25681: PPUSH
25682: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
25686: LD_VAR 0 1
25690: PUSH
25691: LD_INT 1
25693: ARRAY
25694: PPUSH
25695: LD_VAR 0 1
25699: PUSH
25700: LD_INT 2
25702: ARRAY
25703: PPUSH
25704: CALL_OW 429
// end ; end ;
25708: LD_VAR 0 1
25712: RET
// every 0 0$1 trigger StreamModeActive and sReset do
25713: LD_EXP 68
25717: PUSH
25718: LD_EXP 90
25722: AND
25723: IFFALSE 25735
25725: GO 25727
25727: DISABLE
// YouLost (  ) ;
25728: LD_STRING 
25730: PPUSH
25731: CALL_OW 104
25735: END
// every 0 0$1 trigger StreamModeActive and sFog do
25736: LD_EXP 68
25740: PUSH
25741: LD_EXP 89
25745: AND
25746: IFFALSE 25760
25748: GO 25750
25750: DISABLE
// FogOff ( your_side ) ;
25751: LD_OWVAR 2
25755: PPUSH
25756: CALL_OW 344
25760: END
// every 0 0$1 trigger StreamModeActive and sSun do
25761: LD_EXP 68
25765: PUSH
25766: LD_EXP 91
25770: AND
25771: IFFALSE 25799
25773: GO 25775
25775: DISABLE
// begin solar_recharge_percent := 0 ;
25776: LD_ADDR_OWVAR 79
25780: PUSH
25781: LD_INT 0
25783: ST_TO_ADDR
// wait ( 5 5$00 ) ;
25784: LD_INT 10500
25786: PPUSH
25787: CALL_OW 67
// solar_recharge_percent := 100 ;
25791: LD_ADDR_OWVAR 79
25795: PUSH
25796: LD_INT 100
25798: ST_TO_ADDR
// end ;
25799: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
25800: LD_EXP 68
25804: PUSH
25805: LD_EXP 92
25809: AND
25810: IFFALSE 26049
25812: GO 25814
25814: DISABLE
25815: LD_INT 0
25817: PPUSH
25818: PPUSH
25819: PPUSH
// begin tmp := [ ] ;
25820: LD_ADDR_VAR 0 3
25824: PUSH
25825: EMPTY
25826: ST_TO_ADDR
// for i := 1 to 6 do
25827: LD_ADDR_VAR 0 1
25831: PUSH
25832: DOUBLE
25833: LD_INT 1
25835: DEC
25836: ST_TO_ADDR
25837: LD_INT 6
25839: PUSH
25840: FOR_TO
25841: IFFALSE 25946
// begin uc_nation := nation_nature ;
25843: LD_ADDR_OWVAR 21
25847: PUSH
25848: LD_INT 0
25850: ST_TO_ADDR
// uc_side := 0 ;
25851: LD_ADDR_OWVAR 20
25855: PUSH
25856: LD_INT 0
25858: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25859: LD_ADDR_OWVAR 29
25863: PUSH
25864: LD_INT 12
25866: PUSH
25867: LD_INT 12
25869: PUSH
25870: EMPTY
25871: LIST
25872: LIST
25873: ST_TO_ADDR
// hc_agressivity := 20 ;
25874: LD_ADDR_OWVAR 35
25878: PUSH
25879: LD_INT 20
25881: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
25882: LD_ADDR_OWVAR 28
25886: PUSH
25887: LD_INT 17
25889: ST_TO_ADDR
// hc_gallery :=  ;
25890: LD_ADDR_OWVAR 33
25894: PUSH
25895: LD_STRING 
25897: ST_TO_ADDR
// hc_name :=  ;
25898: LD_ADDR_OWVAR 26
25902: PUSH
25903: LD_STRING 
25905: ST_TO_ADDR
// un := CreateHuman ;
25906: LD_ADDR_VAR 0 2
25910: PUSH
25911: CALL_OW 44
25915: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
25916: LD_VAR 0 2
25920: PPUSH
25921: LD_INT 1
25923: PPUSH
25924: CALL_OW 51
// tmp := tmp ^ un ;
25928: LD_ADDR_VAR 0 3
25932: PUSH
25933: LD_VAR 0 3
25937: PUSH
25938: LD_VAR 0 2
25942: ADD
25943: ST_TO_ADDR
// end ;
25944: GO 25840
25946: POP
25947: POP
// repeat wait ( 0 0$1 ) ;
25948: LD_INT 35
25950: PPUSH
25951: CALL_OW 67
// for un in tmp do
25955: LD_ADDR_VAR 0 2
25959: PUSH
25960: LD_VAR 0 3
25964: PUSH
25965: FOR_IN
25966: IFFALSE 26040
// begin if IsDead ( un ) then
25968: LD_VAR 0 2
25972: PPUSH
25973: CALL_OW 301
25977: IFFALSE 25997
// begin tmp := tmp diff un ;
25979: LD_ADDR_VAR 0 3
25983: PUSH
25984: LD_VAR 0 3
25988: PUSH
25989: LD_VAR 0 2
25993: DIFF
25994: ST_TO_ADDR
// continue ;
25995: GO 25965
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
25997: LD_VAR 0 2
26001: PPUSH
26002: LD_INT 3
26004: PUSH
26005: LD_INT 22
26007: PUSH
26008: LD_INT 0
26010: PUSH
26011: EMPTY
26012: LIST
26013: LIST
26014: PUSH
26015: EMPTY
26016: LIST
26017: LIST
26018: PPUSH
26019: CALL_OW 69
26023: PPUSH
26024: LD_VAR 0 2
26028: PPUSH
26029: CALL_OW 74
26033: PPUSH
26034: CALL_OW 115
// end ;
26038: GO 25965
26040: POP
26041: POP
// until not tmp ;
26042: LD_VAR 0 3
26046: NOT
26047: IFFALSE 25948
// end ;
26049: PPOPN 3
26051: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26052: LD_EXP 68
26056: PUSH
26057: LD_EXP 93
26061: AND
26062: IFFALSE 26116
26064: GO 26066
26066: DISABLE
// begin ToLua ( displayTroll(); ) ;
26067: LD_STRING displayTroll();
26069: PPUSH
26070: CALL_OW 559
// wait ( 3 3$00 ) ;
26074: LD_INT 6300
26076: PPUSH
26077: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26081: LD_STRING hideTroll();
26083: PPUSH
26084: CALL_OW 559
// wait ( 1 1$00 ) ;
26088: LD_INT 2100
26090: PPUSH
26091: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26095: LD_STRING displayTroll();
26097: PPUSH
26098: CALL_OW 559
// wait ( 1 1$00 ) ;
26102: LD_INT 2100
26104: PPUSH
26105: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26109: LD_STRING hideTroll();
26111: PPUSH
26112: CALL_OW 559
// end ;
26116: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26117: LD_EXP 68
26121: PUSH
26122: LD_EXP 94
26126: AND
26127: IFFALSE 26190
26129: GO 26131
26131: DISABLE
26132: LD_INT 0
26134: PPUSH
// begin p := 0 ;
26135: LD_ADDR_VAR 0 1
26139: PUSH
26140: LD_INT 0
26142: ST_TO_ADDR
// repeat game_speed := 1 ;
26143: LD_ADDR_OWVAR 65
26147: PUSH
26148: LD_INT 1
26150: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26151: LD_INT 35
26153: PPUSH
26154: CALL_OW 67
// p := p + 1 ;
26158: LD_ADDR_VAR 0 1
26162: PUSH
26163: LD_VAR 0 1
26167: PUSH
26168: LD_INT 1
26170: PLUS
26171: ST_TO_ADDR
// until p >= 60 ;
26172: LD_VAR 0 1
26176: PUSH
26177: LD_INT 60
26179: GREATEREQUAL
26180: IFFALSE 26143
// game_speed := 4 ;
26182: LD_ADDR_OWVAR 65
26186: PUSH
26187: LD_INT 4
26189: ST_TO_ADDR
// end ;
26190: PPOPN 1
26192: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26193: LD_EXP 68
26197: PUSH
26198: LD_EXP 95
26202: AND
26203: IFFALSE 26349
26205: GO 26207
26207: DISABLE
26208: LD_INT 0
26210: PPUSH
26211: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26212: LD_ADDR_VAR 0 1
26216: PUSH
26217: LD_INT 22
26219: PUSH
26220: LD_OWVAR 2
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: PUSH
26229: LD_INT 2
26231: PUSH
26232: LD_INT 30
26234: PUSH
26235: LD_INT 0
26237: PUSH
26238: EMPTY
26239: LIST
26240: LIST
26241: PUSH
26242: LD_INT 30
26244: PUSH
26245: LD_INT 1
26247: PUSH
26248: EMPTY
26249: LIST
26250: LIST
26251: PUSH
26252: EMPTY
26253: LIST
26254: LIST
26255: LIST
26256: PUSH
26257: EMPTY
26258: LIST
26259: LIST
26260: PPUSH
26261: CALL_OW 69
26265: ST_TO_ADDR
// if not depot then
26266: LD_VAR 0 1
26270: NOT
26271: IFFALSE 26275
// exit ;
26273: GO 26349
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26275: LD_ADDR_VAR 0 2
26279: PUSH
26280: LD_VAR 0 1
26284: PUSH
26285: LD_INT 1
26287: PPUSH
26288: LD_VAR 0 1
26292: PPUSH
26293: CALL_OW 12
26297: ARRAY
26298: PPUSH
26299: CALL_OW 274
26303: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
26304: LD_VAR 0 2
26308: PPUSH
26309: LD_INT 1
26311: PPUSH
26312: LD_INT 0
26314: PPUSH
26315: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
26319: LD_VAR 0 2
26323: PPUSH
26324: LD_INT 2
26326: PPUSH
26327: LD_INT 0
26329: PPUSH
26330: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
26334: LD_VAR 0 2
26338: PPUSH
26339: LD_INT 3
26341: PPUSH
26342: LD_INT 0
26344: PPUSH
26345: CALL_OW 277
// end ;
26349: PPOPN 2
26351: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
26352: LD_EXP 68
26356: PUSH
26357: LD_EXP 96
26361: AND
26362: IFFALSE 26459
26364: GO 26366
26366: DISABLE
26367: LD_INT 0
26369: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26370: LD_ADDR_VAR 0 1
26374: PUSH
26375: LD_INT 22
26377: PUSH
26378: LD_OWVAR 2
26382: PUSH
26383: EMPTY
26384: LIST
26385: LIST
26386: PUSH
26387: LD_INT 21
26389: PUSH
26390: LD_INT 1
26392: PUSH
26393: EMPTY
26394: LIST
26395: LIST
26396: PUSH
26397: LD_INT 3
26399: PUSH
26400: LD_INT 23
26402: PUSH
26403: LD_INT 0
26405: PUSH
26406: EMPTY
26407: LIST
26408: LIST
26409: PUSH
26410: EMPTY
26411: LIST
26412: LIST
26413: PUSH
26414: EMPTY
26415: LIST
26416: LIST
26417: LIST
26418: PPUSH
26419: CALL_OW 69
26423: ST_TO_ADDR
// if not tmp then
26424: LD_VAR 0 1
26428: NOT
26429: IFFALSE 26433
// exit ;
26431: GO 26459
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
26433: LD_VAR 0 1
26437: PUSH
26438: LD_INT 1
26440: PPUSH
26441: LD_VAR 0 1
26445: PPUSH
26446: CALL_OW 12
26450: ARRAY
26451: PPUSH
26452: LD_INT 200
26454: PPUSH
26455: CALL_OW 234
// end ;
26459: PPOPN 1
26461: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
26462: LD_EXP 68
26466: PUSH
26467: LD_EXP 97
26471: AND
26472: IFFALSE 26551
26474: GO 26476
26476: DISABLE
26477: LD_INT 0
26479: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
26480: LD_ADDR_VAR 0 1
26484: PUSH
26485: LD_INT 22
26487: PUSH
26488: LD_OWVAR 2
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: PUSH
26497: LD_INT 21
26499: PUSH
26500: LD_INT 2
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: PUSH
26507: EMPTY
26508: LIST
26509: LIST
26510: PPUSH
26511: CALL_OW 69
26515: ST_TO_ADDR
// if not tmp then
26516: LD_VAR 0 1
26520: NOT
26521: IFFALSE 26525
// exit ;
26523: GO 26551
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
26525: LD_VAR 0 1
26529: PUSH
26530: LD_INT 1
26532: PPUSH
26533: LD_VAR 0 1
26537: PPUSH
26538: CALL_OW 12
26542: ARRAY
26543: PPUSH
26544: LD_INT 60
26546: PPUSH
26547: CALL_OW 234
// end ;
26551: PPOPN 1
26553: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
26554: LD_EXP 68
26558: PUSH
26559: LD_EXP 98
26563: AND
26564: IFFALSE 26663
26566: GO 26568
26568: DISABLE
26569: LD_INT 0
26571: PPUSH
26572: PPUSH
// begin enable ;
26573: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
26574: LD_ADDR_VAR 0 1
26578: PUSH
26579: LD_INT 22
26581: PUSH
26582: LD_OWVAR 2
26586: PUSH
26587: EMPTY
26588: LIST
26589: LIST
26590: PUSH
26591: LD_INT 61
26593: PUSH
26594: EMPTY
26595: LIST
26596: PUSH
26597: LD_INT 33
26599: PUSH
26600: LD_INT 2
26602: PUSH
26603: EMPTY
26604: LIST
26605: LIST
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: LIST
26611: PPUSH
26612: CALL_OW 69
26616: ST_TO_ADDR
// if not tmp then
26617: LD_VAR 0 1
26621: NOT
26622: IFFALSE 26626
// exit ;
26624: GO 26663
// for i in tmp do
26626: LD_ADDR_VAR 0 2
26630: PUSH
26631: LD_VAR 0 1
26635: PUSH
26636: FOR_IN
26637: IFFALSE 26661
// if IsControledBy ( i ) then
26639: LD_VAR 0 2
26643: PPUSH
26644: CALL_OW 312
26648: IFFALSE 26659
// ComUnlink ( i ) ;
26650: LD_VAR 0 2
26654: PPUSH
26655: CALL_OW 136
26659: GO 26636
26661: POP
26662: POP
// end ;
26663: PPOPN 2
26665: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
26666: LD_EXP 68
26670: PUSH
26671: LD_EXP 99
26675: AND
26676: IFFALSE 26816
26678: GO 26680
26680: DISABLE
26681: LD_INT 0
26683: PPUSH
26684: PPUSH
// begin ToLua ( displayPowell(); ) ;
26685: LD_STRING displayPowell();
26687: PPUSH
26688: CALL_OW 559
// uc_side := 0 ;
26692: LD_ADDR_OWVAR 20
26696: PUSH
26697: LD_INT 0
26699: ST_TO_ADDR
// uc_nation := 2 ;
26700: LD_ADDR_OWVAR 21
26704: PUSH
26705: LD_INT 2
26707: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
26708: LD_ADDR_OWVAR 37
26712: PUSH
26713: LD_INT 14
26715: ST_TO_ADDR
// vc_engine := engine_siberite ;
26716: LD_ADDR_OWVAR 39
26720: PUSH
26721: LD_INT 3
26723: ST_TO_ADDR
// vc_control := control_apeman ;
26724: LD_ADDR_OWVAR 38
26728: PUSH
26729: LD_INT 5
26731: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
26732: LD_ADDR_OWVAR 40
26736: PUSH
26737: LD_INT 29
26739: ST_TO_ADDR
// un := CreateVehicle ;
26740: LD_ADDR_VAR 0 2
26744: PUSH
26745: CALL_OW 45
26749: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26750: LD_VAR 0 2
26754: PPUSH
26755: LD_INT 1
26757: PPUSH
26758: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26762: LD_INT 35
26764: PPUSH
26765: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26769: LD_VAR 0 2
26773: PPUSH
26774: LD_INT 22
26776: PUSH
26777: LD_OWVAR 2
26781: PUSH
26782: EMPTY
26783: LIST
26784: LIST
26785: PPUSH
26786: CALL_OW 69
26790: PPUSH
26791: LD_VAR 0 2
26795: PPUSH
26796: CALL_OW 74
26800: PPUSH
26801: CALL_OW 115
// until IsDead ( un ) ;
26805: LD_VAR 0 2
26809: PPUSH
26810: CALL_OW 301
26814: IFFALSE 26762
// end ;
26816: PPOPN 2
26818: END
// every 0 0$1 trigger StreamModeActive and sStu do
26819: LD_EXP 68
26823: PUSH
26824: LD_EXP 107
26828: AND
26829: IFFALSE 26845
26831: GO 26833
26833: DISABLE
// begin ToLua ( displayStucuk(); ) ;
26834: LD_STRING displayStucuk();
26836: PPUSH
26837: CALL_OW 559
// ResetFog ;
26841: CALL_OW 335
// end ;
26845: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
26846: LD_EXP 68
26850: PUSH
26851: LD_EXP 100
26855: AND
26856: IFFALSE 26997
26858: GO 26860
26860: DISABLE
26861: LD_INT 0
26863: PPUSH
26864: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26865: LD_ADDR_VAR 0 2
26869: PUSH
26870: LD_INT 22
26872: PUSH
26873: LD_OWVAR 2
26877: PUSH
26878: EMPTY
26879: LIST
26880: LIST
26881: PUSH
26882: LD_INT 21
26884: PUSH
26885: LD_INT 1
26887: PUSH
26888: EMPTY
26889: LIST
26890: LIST
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: PPUSH
26896: CALL_OW 69
26900: ST_TO_ADDR
// if not tmp then
26901: LD_VAR 0 2
26905: NOT
26906: IFFALSE 26910
// exit ;
26908: GO 26997
// un := tmp [ rand ( 1 , tmp ) ] ;
26910: LD_ADDR_VAR 0 1
26914: PUSH
26915: LD_VAR 0 2
26919: PUSH
26920: LD_INT 1
26922: PPUSH
26923: LD_VAR 0 2
26927: PPUSH
26928: CALL_OW 12
26932: ARRAY
26933: ST_TO_ADDR
// SetSide ( un , 0 ) ;
26934: LD_VAR 0 1
26938: PPUSH
26939: LD_INT 0
26941: PPUSH
26942: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
26946: LD_VAR 0 1
26950: PPUSH
26951: LD_OWVAR 3
26955: PUSH
26956: LD_VAR 0 1
26960: DIFF
26961: PPUSH
26962: LD_VAR 0 1
26966: PPUSH
26967: CALL_OW 74
26971: PPUSH
26972: CALL_OW 115
// wait ( 0 0$20 ) ;
26976: LD_INT 700
26978: PPUSH
26979: CALL_OW 67
// SetSide ( un , your_side ) ;
26983: LD_VAR 0 1
26987: PPUSH
26988: LD_OWVAR 2
26992: PPUSH
26993: CALL_OW 235
// end ;
26997: PPOPN 2
26999: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27000: LD_EXP 68
27004: PUSH
27005: LD_EXP 101
27009: AND
27010: IFFALSE 27116
27012: GO 27014
27014: DISABLE
27015: LD_INT 0
27017: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27018: LD_ADDR_VAR 0 1
27022: PUSH
27023: LD_INT 22
27025: PUSH
27026: LD_OWVAR 2
27030: PUSH
27031: EMPTY
27032: LIST
27033: LIST
27034: PUSH
27035: LD_INT 2
27037: PUSH
27038: LD_INT 30
27040: PUSH
27041: LD_INT 0
27043: PUSH
27044: EMPTY
27045: LIST
27046: LIST
27047: PUSH
27048: LD_INT 30
27050: PUSH
27051: LD_INT 1
27053: PUSH
27054: EMPTY
27055: LIST
27056: LIST
27057: PUSH
27058: EMPTY
27059: LIST
27060: LIST
27061: LIST
27062: PUSH
27063: EMPTY
27064: LIST
27065: LIST
27066: PPUSH
27067: CALL_OW 69
27071: ST_TO_ADDR
// if not depot then
27072: LD_VAR 0 1
27076: NOT
27077: IFFALSE 27081
// exit ;
27079: GO 27116
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27081: LD_VAR 0 1
27085: PUSH
27086: LD_INT 1
27088: ARRAY
27089: PPUSH
27090: CALL_OW 250
27094: PPUSH
27095: LD_VAR 0 1
27099: PUSH
27100: LD_INT 1
27102: ARRAY
27103: PPUSH
27104: CALL_OW 251
27108: PPUSH
27109: LD_INT 70
27111: PPUSH
27112: CALL_OW 495
// end ;
27116: PPOPN 1
27118: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27119: LD_EXP 68
27123: PUSH
27124: LD_EXP 102
27128: AND
27129: IFFALSE 27340
27131: GO 27133
27133: DISABLE
27134: LD_INT 0
27136: PPUSH
27137: PPUSH
27138: PPUSH
27139: PPUSH
27140: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27141: LD_ADDR_VAR 0 5
27145: PUSH
27146: LD_INT 22
27148: PUSH
27149: LD_OWVAR 2
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: PUSH
27158: LD_INT 21
27160: PUSH
27161: LD_INT 1
27163: PUSH
27164: EMPTY
27165: LIST
27166: LIST
27167: PUSH
27168: EMPTY
27169: LIST
27170: LIST
27171: PPUSH
27172: CALL_OW 69
27176: ST_TO_ADDR
// if not tmp then
27177: LD_VAR 0 5
27181: NOT
27182: IFFALSE 27186
// exit ;
27184: GO 27340
// for i in tmp do
27186: LD_ADDR_VAR 0 1
27190: PUSH
27191: LD_VAR 0 5
27195: PUSH
27196: FOR_IN
27197: IFFALSE 27338
// begin d := rand ( 0 , 5 ) ;
27199: LD_ADDR_VAR 0 4
27203: PUSH
27204: LD_INT 0
27206: PPUSH
27207: LD_INT 5
27209: PPUSH
27210: CALL_OW 12
27214: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27215: LD_ADDR_VAR 0 2
27219: PUSH
27220: LD_VAR 0 1
27224: PPUSH
27225: CALL_OW 250
27229: PPUSH
27230: LD_VAR 0 4
27234: PPUSH
27235: LD_INT 3
27237: PPUSH
27238: LD_INT 12
27240: PPUSH
27241: CALL_OW 12
27245: PPUSH
27246: CALL_OW 272
27250: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27251: LD_ADDR_VAR 0 3
27255: PUSH
27256: LD_VAR 0 1
27260: PPUSH
27261: CALL_OW 251
27265: PPUSH
27266: LD_VAR 0 4
27270: PPUSH
27271: LD_INT 3
27273: PPUSH
27274: LD_INT 12
27276: PPUSH
27277: CALL_OW 12
27281: PPUSH
27282: CALL_OW 273
27286: ST_TO_ADDR
// if ValidHex ( x , y ) then
27287: LD_VAR 0 2
27291: PPUSH
27292: LD_VAR 0 3
27296: PPUSH
27297: CALL_OW 488
27301: IFFALSE 27336
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
27303: LD_VAR 0 1
27307: PPUSH
27308: LD_VAR 0 2
27312: PPUSH
27313: LD_VAR 0 3
27317: PPUSH
27318: LD_INT 3
27320: PPUSH
27321: LD_INT 6
27323: PPUSH
27324: CALL_OW 12
27328: PPUSH
27329: LD_INT 1
27331: PPUSH
27332: CALL_OW 483
// end ;
27336: GO 27196
27338: POP
27339: POP
// end ;
27340: PPOPN 5
27342: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
27343: LD_EXP 68
27347: PUSH
27348: LD_EXP 103
27352: AND
27353: IFFALSE 27447
27355: GO 27357
27357: DISABLE
27358: LD_INT 0
27360: PPUSH
27361: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
27362: LD_ADDR_VAR 0 2
27366: PUSH
27367: LD_INT 22
27369: PUSH
27370: LD_OWVAR 2
27374: PUSH
27375: EMPTY
27376: LIST
27377: LIST
27378: PUSH
27379: LD_INT 32
27381: PUSH
27382: LD_INT 1
27384: PUSH
27385: EMPTY
27386: LIST
27387: LIST
27388: PUSH
27389: LD_INT 21
27391: PUSH
27392: LD_INT 2
27394: PUSH
27395: EMPTY
27396: LIST
27397: LIST
27398: PUSH
27399: EMPTY
27400: LIST
27401: LIST
27402: LIST
27403: PPUSH
27404: CALL_OW 69
27408: ST_TO_ADDR
// if not tmp then
27409: LD_VAR 0 2
27413: NOT
27414: IFFALSE 27418
// exit ;
27416: GO 27447
// for i in tmp do
27418: LD_ADDR_VAR 0 1
27422: PUSH
27423: LD_VAR 0 2
27427: PUSH
27428: FOR_IN
27429: IFFALSE 27445
// SetFuel ( i , 0 ) ;
27431: LD_VAR 0 1
27435: PPUSH
27436: LD_INT 0
27438: PPUSH
27439: CALL_OW 240
27443: GO 27428
27445: POP
27446: POP
// end ;
27447: PPOPN 2
27449: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
27450: LD_EXP 68
27454: PUSH
27455: LD_EXP 104
27459: AND
27460: IFFALSE 27526
27462: GO 27464
27464: DISABLE
27465: LD_INT 0
27467: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27468: LD_ADDR_VAR 0 1
27472: PUSH
27473: LD_INT 22
27475: PUSH
27476: LD_OWVAR 2
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: PUSH
27485: LD_INT 30
27487: PUSH
27488: LD_INT 29
27490: PUSH
27491: EMPTY
27492: LIST
27493: LIST
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: PPUSH
27499: CALL_OW 69
27503: ST_TO_ADDR
// if not tmp then
27504: LD_VAR 0 1
27508: NOT
27509: IFFALSE 27513
// exit ;
27511: GO 27526
// DestroyUnit ( tmp [ 1 ] ) ;
27513: LD_VAR 0 1
27517: PUSH
27518: LD_INT 1
27520: ARRAY
27521: PPUSH
27522: CALL_OW 65
// end ;
27526: PPOPN 1
27528: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
27529: LD_EXP 68
27533: PUSH
27534: LD_EXP 106
27538: AND
27539: IFFALSE 27668
27541: GO 27543
27543: DISABLE
27544: LD_INT 0
27546: PPUSH
// begin uc_side := 0 ;
27547: LD_ADDR_OWVAR 20
27551: PUSH
27552: LD_INT 0
27554: ST_TO_ADDR
// uc_nation := nation_arabian ;
27555: LD_ADDR_OWVAR 21
27559: PUSH
27560: LD_INT 2
27562: ST_TO_ADDR
// hc_gallery :=  ;
27563: LD_ADDR_OWVAR 33
27567: PUSH
27568: LD_STRING 
27570: ST_TO_ADDR
// hc_name :=  ;
27571: LD_ADDR_OWVAR 26
27575: PUSH
27576: LD_STRING 
27578: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
27579: LD_INT 1
27581: PPUSH
27582: LD_INT 11
27584: PPUSH
27585: LD_INT 10
27587: PPUSH
27588: CALL_OW 380
// un := CreateHuman ;
27592: LD_ADDR_VAR 0 1
27596: PUSH
27597: CALL_OW 44
27601: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27602: LD_VAR 0 1
27606: PPUSH
27607: LD_INT 1
27609: PPUSH
27610: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27614: LD_INT 35
27616: PPUSH
27617: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27621: LD_VAR 0 1
27625: PPUSH
27626: LD_INT 22
27628: PUSH
27629: LD_OWVAR 2
27633: PUSH
27634: EMPTY
27635: LIST
27636: LIST
27637: PPUSH
27638: CALL_OW 69
27642: PPUSH
27643: LD_VAR 0 1
27647: PPUSH
27648: CALL_OW 74
27652: PPUSH
27653: CALL_OW 115
// until IsDead ( un ) ;
27657: LD_VAR 0 1
27661: PPUSH
27662: CALL_OW 301
27666: IFFALSE 27614
// end ;
27668: PPOPN 1
27670: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
27671: LD_EXP 68
27675: PUSH
27676: LD_EXP 108
27680: AND
27681: IFFALSE 27693
27683: GO 27685
27685: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
27686: LD_STRING earthquake(getX(game), 0, 32)
27688: PPUSH
27689: CALL_OW 559
27693: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
27694: LD_EXP 68
27698: PUSH
27699: LD_EXP 109
27703: AND
27704: IFFALSE 27795
27706: GO 27708
27708: DISABLE
27709: LD_INT 0
27711: PPUSH
// begin enable ;
27712: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
27713: LD_ADDR_VAR 0 1
27717: PUSH
27718: LD_INT 22
27720: PUSH
27721: LD_OWVAR 2
27725: PUSH
27726: EMPTY
27727: LIST
27728: LIST
27729: PUSH
27730: LD_INT 21
27732: PUSH
27733: LD_INT 2
27735: PUSH
27736: EMPTY
27737: LIST
27738: LIST
27739: PUSH
27740: LD_INT 33
27742: PUSH
27743: LD_INT 3
27745: PUSH
27746: EMPTY
27747: LIST
27748: LIST
27749: PUSH
27750: EMPTY
27751: LIST
27752: LIST
27753: LIST
27754: PPUSH
27755: CALL_OW 69
27759: ST_TO_ADDR
// if not tmp then
27760: LD_VAR 0 1
27764: NOT
27765: IFFALSE 27769
// exit ;
27767: GO 27795
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27769: LD_VAR 0 1
27773: PUSH
27774: LD_INT 1
27776: PPUSH
27777: LD_VAR 0 1
27781: PPUSH
27782: CALL_OW 12
27786: ARRAY
27787: PPUSH
27788: LD_INT 1
27790: PPUSH
27791: CALL_OW 234
// end ;
27795: PPOPN 1
27797: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
27798: LD_EXP 68
27802: PUSH
27803: LD_EXP 110
27807: AND
27808: IFFALSE 27949
27810: GO 27812
27812: DISABLE
27813: LD_INT 0
27815: PPUSH
27816: PPUSH
27817: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27818: LD_ADDR_VAR 0 3
27822: PUSH
27823: LD_INT 22
27825: PUSH
27826: LD_OWVAR 2
27830: PUSH
27831: EMPTY
27832: LIST
27833: LIST
27834: PUSH
27835: LD_INT 25
27837: PUSH
27838: LD_INT 1
27840: PUSH
27841: EMPTY
27842: LIST
27843: LIST
27844: PUSH
27845: EMPTY
27846: LIST
27847: LIST
27848: PPUSH
27849: CALL_OW 69
27853: ST_TO_ADDR
// if not tmp then
27854: LD_VAR 0 3
27858: NOT
27859: IFFALSE 27863
// exit ;
27861: GO 27949
// un := tmp [ rand ( 1 , tmp ) ] ;
27863: LD_ADDR_VAR 0 2
27867: PUSH
27868: LD_VAR 0 3
27872: PUSH
27873: LD_INT 1
27875: PPUSH
27876: LD_VAR 0 3
27880: PPUSH
27881: CALL_OW 12
27885: ARRAY
27886: ST_TO_ADDR
// if Crawls ( un ) then
27887: LD_VAR 0 2
27891: PPUSH
27892: CALL_OW 318
27896: IFFALSE 27907
// ComWalk ( un ) ;
27898: LD_VAR 0 2
27902: PPUSH
27903: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
27907: LD_VAR 0 2
27911: PPUSH
27912: LD_INT 9
27914: PPUSH
27915: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
27919: LD_INT 28
27921: PPUSH
27922: LD_OWVAR 2
27926: PPUSH
27927: LD_INT 2
27929: PPUSH
27930: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
27934: LD_INT 29
27936: PPUSH
27937: LD_OWVAR 2
27941: PPUSH
27942: LD_INT 2
27944: PPUSH
27945: CALL_OW 322
// end ;
27949: PPOPN 3
27951: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
27952: LD_EXP 68
27956: PUSH
27957: LD_EXP 111
27961: AND
27962: IFFALSE 28073
27964: GO 27966
27966: DISABLE
27967: LD_INT 0
27969: PPUSH
27970: PPUSH
27971: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27972: LD_ADDR_VAR 0 3
27976: PUSH
27977: LD_INT 22
27979: PUSH
27980: LD_OWVAR 2
27984: PUSH
27985: EMPTY
27986: LIST
27987: LIST
27988: PUSH
27989: LD_INT 25
27991: PUSH
27992: LD_INT 1
27994: PUSH
27995: EMPTY
27996: LIST
27997: LIST
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: PPUSH
28003: CALL_OW 69
28007: ST_TO_ADDR
// if not tmp then
28008: LD_VAR 0 3
28012: NOT
28013: IFFALSE 28017
// exit ;
28015: GO 28073
// un := tmp [ rand ( 1 , tmp ) ] ;
28017: LD_ADDR_VAR 0 2
28021: PUSH
28022: LD_VAR 0 3
28026: PUSH
28027: LD_INT 1
28029: PPUSH
28030: LD_VAR 0 3
28034: PPUSH
28035: CALL_OW 12
28039: ARRAY
28040: ST_TO_ADDR
// if Crawls ( un ) then
28041: LD_VAR 0 2
28045: PPUSH
28046: CALL_OW 318
28050: IFFALSE 28061
// ComWalk ( un ) ;
28052: LD_VAR 0 2
28056: PPUSH
28057: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28061: LD_VAR 0 2
28065: PPUSH
28066: LD_INT 8
28068: PPUSH
28069: CALL_OW 336
// end ;
28073: PPOPN 3
28075: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28076: LD_EXP 68
28080: PUSH
28081: LD_EXP 112
28085: AND
28086: IFFALSE 28230
28088: GO 28090
28090: DISABLE
28091: LD_INT 0
28093: PPUSH
28094: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28095: LD_ADDR_VAR 0 2
28099: PUSH
28100: LD_INT 22
28102: PUSH
28103: LD_OWVAR 2
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: PUSH
28112: LD_INT 21
28114: PUSH
28115: LD_INT 2
28117: PUSH
28118: EMPTY
28119: LIST
28120: LIST
28121: PUSH
28122: LD_INT 2
28124: PUSH
28125: LD_INT 34
28127: PUSH
28128: LD_INT 12
28130: PUSH
28131: EMPTY
28132: LIST
28133: LIST
28134: PUSH
28135: LD_INT 34
28137: PUSH
28138: LD_INT 51
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: PUSH
28145: LD_INT 34
28147: PUSH
28148: LD_INT 32
28150: PUSH
28151: EMPTY
28152: LIST
28153: LIST
28154: PUSH
28155: EMPTY
28156: LIST
28157: LIST
28158: LIST
28159: LIST
28160: PUSH
28161: EMPTY
28162: LIST
28163: LIST
28164: LIST
28165: PPUSH
28166: CALL_OW 69
28170: ST_TO_ADDR
// if not tmp then
28171: LD_VAR 0 2
28175: NOT
28176: IFFALSE 28180
// exit ;
28178: GO 28230
// for i in tmp do
28180: LD_ADDR_VAR 0 1
28184: PUSH
28185: LD_VAR 0 2
28189: PUSH
28190: FOR_IN
28191: IFFALSE 28228
// if GetCargo ( i , mat_artifact ) = 0 then
28193: LD_VAR 0 1
28197: PPUSH
28198: LD_INT 4
28200: PPUSH
28201: CALL_OW 289
28205: PUSH
28206: LD_INT 0
28208: EQUAL
28209: IFFALSE 28226
// SetCargo ( i , mat_siberit , 100 ) ;
28211: LD_VAR 0 1
28215: PPUSH
28216: LD_INT 3
28218: PPUSH
28219: LD_INT 100
28221: PPUSH
28222: CALL_OW 290
28226: GO 28190
28228: POP
28229: POP
// end ;
28230: PPOPN 2
28232: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28233: LD_EXP 68
28237: PUSH
28238: LD_EXP 113
28242: AND
28243: IFFALSE 28426
28245: GO 28247
28247: DISABLE
28248: LD_INT 0
28250: PPUSH
28251: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28252: LD_ADDR_VAR 0 2
28256: PUSH
28257: LD_INT 22
28259: PUSH
28260: LD_OWVAR 2
28264: PUSH
28265: EMPTY
28266: LIST
28267: LIST
28268: PPUSH
28269: CALL_OW 69
28273: ST_TO_ADDR
// if not tmp then
28274: LD_VAR 0 2
28278: NOT
28279: IFFALSE 28283
// exit ;
28281: GO 28426
// for i := 1 to 2 do
28283: LD_ADDR_VAR 0 1
28287: PUSH
28288: DOUBLE
28289: LD_INT 1
28291: DEC
28292: ST_TO_ADDR
28293: LD_INT 2
28295: PUSH
28296: FOR_TO
28297: IFFALSE 28424
// begin uc_side := your_side ;
28299: LD_ADDR_OWVAR 20
28303: PUSH
28304: LD_OWVAR 2
28308: ST_TO_ADDR
// uc_nation := nation_american ;
28309: LD_ADDR_OWVAR 21
28313: PUSH
28314: LD_INT 1
28316: ST_TO_ADDR
// vc_chassis := us_morphling ;
28317: LD_ADDR_OWVAR 37
28321: PUSH
28322: LD_INT 5
28324: ST_TO_ADDR
// vc_engine := engine_siberite ;
28325: LD_ADDR_OWVAR 39
28329: PUSH
28330: LD_INT 3
28332: ST_TO_ADDR
// vc_control := control_computer ;
28333: LD_ADDR_OWVAR 38
28337: PUSH
28338: LD_INT 3
28340: ST_TO_ADDR
// vc_weapon := us_double_laser ;
28341: LD_ADDR_OWVAR 40
28345: PUSH
28346: LD_INT 10
28348: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
28349: LD_VAR 0 2
28353: PUSH
28354: LD_INT 1
28356: ARRAY
28357: PPUSH
28358: CALL_OW 310
28362: NOT
28363: IFFALSE 28410
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
28365: CALL_OW 45
28369: PPUSH
28370: LD_VAR 0 2
28374: PUSH
28375: LD_INT 1
28377: ARRAY
28378: PPUSH
28379: CALL_OW 250
28383: PPUSH
28384: LD_VAR 0 2
28388: PUSH
28389: LD_INT 1
28391: ARRAY
28392: PPUSH
28393: CALL_OW 251
28397: PPUSH
28398: LD_INT 12
28400: PPUSH
28401: LD_INT 1
28403: PPUSH
28404: CALL_OW 50
28408: GO 28422
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28410: CALL_OW 45
28414: PPUSH
28415: LD_INT 1
28417: PPUSH
28418: CALL_OW 51
// end ;
28422: GO 28296
28424: POP
28425: POP
// end ;
28426: PPOPN 2
28428: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
28429: LD_EXP 68
28433: PUSH
28434: LD_EXP 114
28438: AND
28439: IFFALSE 28661
28441: GO 28443
28443: DISABLE
28444: LD_INT 0
28446: PPUSH
28447: PPUSH
28448: PPUSH
28449: PPUSH
28450: PPUSH
28451: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28452: LD_ADDR_VAR 0 6
28456: PUSH
28457: LD_INT 22
28459: PUSH
28460: LD_OWVAR 2
28464: PUSH
28465: EMPTY
28466: LIST
28467: LIST
28468: PUSH
28469: LD_INT 21
28471: PUSH
28472: LD_INT 1
28474: PUSH
28475: EMPTY
28476: LIST
28477: LIST
28478: PUSH
28479: LD_INT 3
28481: PUSH
28482: LD_INT 23
28484: PUSH
28485: LD_INT 0
28487: PUSH
28488: EMPTY
28489: LIST
28490: LIST
28491: PUSH
28492: EMPTY
28493: LIST
28494: LIST
28495: PUSH
28496: EMPTY
28497: LIST
28498: LIST
28499: LIST
28500: PPUSH
28501: CALL_OW 69
28505: ST_TO_ADDR
// if not tmp then
28506: LD_VAR 0 6
28510: NOT
28511: IFFALSE 28515
// exit ;
28513: GO 28661
// s1 := rand ( 1 , 4 ) ;
28515: LD_ADDR_VAR 0 2
28519: PUSH
28520: LD_INT 1
28522: PPUSH
28523: LD_INT 4
28525: PPUSH
28526: CALL_OW 12
28530: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
28531: LD_ADDR_VAR 0 4
28535: PUSH
28536: LD_VAR 0 6
28540: PUSH
28541: LD_INT 1
28543: ARRAY
28544: PPUSH
28545: LD_VAR 0 2
28549: PPUSH
28550: CALL_OW 259
28554: ST_TO_ADDR
// if s1 = 1 then
28555: LD_VAR 0 2
28559: PUSH
28560: LD_INT 1
28562: EQUAL
28563: IFFALSE 28583
// s2 := rand ( 2 , 4 ) else
28565: LD_ADDR_VAR 0 3
28569: PUSH
28570: LD_INT 2
28572: PPUSH
28573: LD_INT 4
28575: PPUSH
28576: CALL_OW 12
28580: ST_TO_ADDR
28581: GO 28591
// s2 := 1 ;
28583: LD_ADDR_VAR 0 3
28587: PUSH
28588: LD_INT 1
28590: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
28591: LD_ADDR_VAR 0 5
28595: PUSH
28596: LD_VAR 0 6
28600: PUSH
28601: LD_INT 1
28603: ARRAY
28604: PPUSH
28605: LD_VAR 0 3
28609: PPUSH
28610: CALL_OW 259
28614: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
28615: LD_VAR 0 6
28619: PUSH
28620: LD_INT 1
28622: ARRAY
28623: PPUSH
28624: LD_VAR 0 2
28628: PPUSH
28629: LD_VAR 0 5
28633: PPUSH
28634: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
28638: LD_VAR 0 6
28642: PUSH
28643: LD_INT 1
28645: ARRAY
28646: PPUSH
28647: LD_VAR 0 3
28651: PPUSH
28652: LD_VAR 0 4
28656: PPUSH
28657: CALL_OW 237
// end ;
28661: PPOPN 6
28663: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
28664: LD_EXP 68
28668: PUSH
28669: LD_EXP 115
28673: AND
28674: IFFALSE 28753
28676: GO 28678
28678: DISABLE
28679: LD_INT 0
28681: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
28682: LD_ADDR_VAR 0 1
28686: PUSH
28687: LD_INT 22
28689: PUSH
28690: LD_OWVAR 2
28694: PUSH
28695: EMPTY
28696: LIST
28697: LIST
28698: PUSH
28699: LD_INT 30
28701: PUSH
28702: LD_INT 3
28704: PUSH
28705: EMPTY
28706: LIST
28707: LIST
28708: PUSH
28709: EMPTY
28710: LIST
28711: LIST
28712: PPUSH
28713: CALL_OW 69
28717: ST_TO_ADDR
// if not tmp then
28718: LD_VAR 0 1
28722: NOT
28723: IFFALSE 28727
// exit ;
28725: GO 28753
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28727: LD_VAR 0 1
28731: PUSH
28732: LD_INT 1
28734: PPUSH
28735: LD_VAR 0 1
28739: PPUSH
28740: CALL_OW 12
28744: ARRAY
28745: PPUSH
28746: LD_INT 1
28748: PPUSH
28749: CALL_OW 234
// end ;
28753: PPOPN 1
28755: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
28756: LD_EXP 68
28760: PUSH
28761: LD_EXP 116
28765: AND
28766: IFFALSE 28878
28768: GO 28770
28770: DISABLE
28771: LD_INT 0
28773: PPUSH
28774: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
28775: LD_ADDR_VAR 0 2
28779: PUSH
28780: LD_INT 22
28782: PUSH
28783: LD_OWVAR 2
28787: PUSH
28788: EMPTY
28789: LIST
28790: LIST
28791: PUSH
28792: LD_INT 2
28794: PUSH
28795: LD_INT 30
28797: PUSH
28798: LD_INT 27
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: PUSH
28805: LD_INT 30
28807: PUSH
28808: LD_INT 26
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: PUSH
28815: LD_INT 30
28817: PUSH
28818: LD_INT 28
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: PUSH
28825: EMPTY
28826: LIST
28827: LIST
28828: LIST
28829: LIST
28830: PUSH
28831: EMPTY
28832: LIST
28833: LIST
28834: PPUSH
28835: CALL_OW 69
28839: ST_TO_ADDR
// if not tmp then
28840: LD_VAR 0 2
28844: NOT
28845: IFFALSE 28849
// exit ;
28847: GO 28878
// for i in tmp do
28849: LD_ADDR_VAR 0 1
28853: PUSH
28854: LD_VAR 0 2
28858: PUSH
28859: FOR_IN
28860: IFFALSE 28876
// SetLives ( i , 1 ) ;
28862: LD_VAR 0 1
28866: PPUSH
28867: LD_INT 1
28869: PPUSH
28870: CALL_OW 234
28874: GO 28859
28876: POP
28877: POP
// end ;
28878: PPOPN 2
28880: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
28881: LD_EXP 68
28885: PUSH
28886: LD_EXP 117
28890: AND
28891: IFFALSE 29165
28893: GO 28895
28895: DISABLE
28896: LD_INT 0
28898: PPUSH
28899: PPUSH
28900: PPUSH
// begin i := rand ( 1 , 7 ) ;
28901: LD_ADDR_VAR 0 1
28905: PUSH
28906: LD_INT 1
28908: PPUSH
28909: LD_INT 7
28911: PPUSH
28912: CALL_OW 12
28916: ST_TO_ADDR
// case i of 1 :
28917: LD_VAR 0 1
28921: PUSH
28922: LD_INT 1
28924: DOUBLE
28925: EQUAL
28926: IFTRUE 28930
28928: GO 28940
28930: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
28931: LD_STRING earthquake(getX(game), 0, 32)
28933: PPUSH
28934: CALL_OW 559
28938: GO 29165
28940: LD_INT 2
28942: DOUBLE
28943: EQUAL
28944: IFTRUE 28948
28946: GO 28962
28948: POP
// begin ToLua ( displayStucuk(); ) ;
28949: LD_STRING displayStucuk();
28951: PPUSH
28952: CALL_OW 559
// ResetFog ;
28956: CALL_OW 335
// end ; 3 :
28960: GO 29165
28962: LD_INT 3
28964: DOUBLE
28965: EQUAL
28966: IFTRUE 28970
28968: GO 29074
28970: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28971: LD_ADDR_VAR 0 2
28975: PUSH
28976: LD_INT 22
28978: PUSH
28979: LD_OWVAR 2
28983: PUSH
28984: EMPTY
28985: LIST
28986: LIST
28987: PUSH
28988: LD_INT 25
28990: PUSH
28991: LD_INT 1
28993: PUSH
28994: EMPTY
28995: LIST
28996: LIST
28997: PUSH
28998: EMPTY
28999: LIST
29000: LIST
29001: PPUSH
29002: CALL_OW 69
29006: ST_TO_ADDR
// if not tmp then
29007: LD_VAR 0 2
29011: NOT
29012: IFFALSE 29016
// exit ;
29014: GO 29165
// un := tmp [ rand ( 1 , tmp ) ] ;
29016: LD_ADDR_VAR 0 3
29020: PUSH
29021: LD_VAR 0 2
29025: PUSH
29026: LD_INT 1
29028: PPUSH
29029: LD_VAR 0 2
29033: PPUSH
29034: CALL_OW 12
29038: ARRAY
29039: ST_TO_ADDR
// if Crawls ( un ) then
29040: LD_VAR 0 3
29044: PPUSH
29045: CALL_OW 318
29049: IFFALSE 29060
// ComWalk ( un ) ;
29051: LD_VAR 0 3
29055: PPUSH
29056: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29060: LD_VAR 0 3
29064: PPUSH
29065: LD_INT 8
29067: PPUSH
29068: CALL_OW 336
// end ; 4 :
29072: GO 29165
29074: LD_INT 4
29076: DOUBLE
29077: EQUAL
29078: IFTRUE 29082
29080: GO 29143
29082: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29083: LD_ADDR_VAR 0 2
29087: PUSH
29088: LD_INT 22
29090: PUSH
29091: LD_OWVAR 2
29095: PUSH
29096: EMPTY
29097: LIST
29098: LIST
29099: PUSH
29100: LD_INT 30
29102: PUSH
29103: LD_INT 29
29105: PUSH
29106: EMPTY
29107: LIST
29108: LIST
29109: PUSH
29110: EMPTY
29111: LIST
29112: LIST
29113: PPUSH
29114: CALL_OW 69
29118: ST_TO_ADDR
// if not tmp then
29119: LD_VAR 0 2
29123: NOT
29124: IFFALSE 29128
// exit ;
29126: GO 29165
// DestroyUnit ( tmp [ 1 ] ) ;
29128: LD_VAR 0 2
29132: PUSH
29133: LD_INT 1
29135: ARRAY
29136: PPUSH
29137: CALL_OW 65
// end ; 5 .. 7 :
29141: GO 29165
29143: LD_INT 5
29145: DOUBLE
29146: GREATEREQUAL
29147: IFFALSE 29155
29149: LD_INT 7
29151: DOUBLE
29152: LESSEQUAL
29153: IFTRUE 29157
29155: GO 29164
29157: POP
// StreamSibBomb ; end ;
29158: CALL 25415 0 0
29162: GO 29165
29164: POP
// end ;
29165: PPOPN 3
29167: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29168: LD_EXP 68
29172: PUSH
29173: LD_EXP 118
29177: AND
29178: IFFALSE 29334
29180: GO 29182
29182: DISABLE
29183: LD_INT 0
29185: PPUSH
29186: PPUSH
29187: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29188: LD_ADDR_VAR 0 2
29192: PUSH
29193: LD_INT 81
29195: PUSH
29196: LD_OWVAR 2
29200: PUSH
29201: EMPTY
29202: LIST
29203: LIST
29204: PUSH
29205: LD_INT 2
29207: PUSH
29208: LD_INT 21
29210: PUSH
29211: LD_INT 1
29213: PUSH
29214: EMPTY
29215: LIST
29216: LIST
29217: PUSH
29218: LD_INT 21
29220: PUSH
29221: LD_INT 2
29223: PUSH
29224: EMPTY
29225: LIST
29226: LIST
29227: PUSH
29228: EMPTY
29229: LIST
29230: LIST
29231: LIST
29232: PUSH
29233: EMPTY
29234: LIST
29235: LIST
29236: PPUSH
29237: CALL_OW 69
29241: ST_TO_ADDR
// if not tmp then
29242: LD_VAR 0 2
29246: NOT
29247: IFFALSE 29251
// exit ;
29249: GO 29334
// p := 0 ;
29251: LD_ADDR_VAR 0 3
29255: PUSH
29256: LD_INT 0
29258: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29259: LD_INT 35
29261: PPUSH
29262: CALL_OW 67
// p := p + 1 ;
29266: LD_ADDR_VAR 0 3
29270: PUSH
29271: LD_VAR 0 3
29275: PUSH
29276: LD_INT 1
29278: PLUS
29279: ST_TO_ADDR
// for i in tmp do
29280: LD_ADDR_VAR 0 1
29284: PUSH
29285: LD_VAR 0 2
29289: PUSH
29290: FOR_IN
29291: IFFALSE 29322
// if GetLives ( i ) < 1000 then
29293: LD_VAR 0 1
29297: PPUSH
29298: CALL_OW 256
29302: PUSH
29303: LD_INT 1000
29305: LESS
29306: IFFALSE 29320
// SetLives ( i , 1000 ) ;
29308: LD_VAR 0 1
29312: PPUSH
29313: LD_INT 1000
29315: PPUSH
29316: CALL_OW 234
29320: GO 29290
29322: POP
29323: POP
// until p > 20 ;
29324: LD_VAR 0 3
29328: PUSH
29329: LD_INT 20
29331: GREATER
29332: IFFALSE 29259
// end ;
29334: PPOPN 3
29336: END
// every 0 0$1 trigger StreamModeActive and sTime do
29337: LD_EXP 68
29341: PUSH
29342: LD_EXP 119
29346: AND
29347: IFFALSE 29382
29349: GO 29351
29351: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
29352: LD_INT 28
29354: PPUSH
29355: LD_OWVAR 2
29359: PPUSH
29360: LD_INT 2
29362: PPUSH
29363: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
29367: LD_INT 30
29369: PPUSH
29370: LD_OWVAR 2
29374: PPUSH
29375: LD_INT 2
29377: PPUSH
29378: CALL_OW 322
// end ;
29382: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
29383: LD_EXP 68
29387: PUSH
29388: LD_EXP 120
29392: AND
29393: IFFALSE 29514
29395: GO 29397
29397: DISABLE
29398: LD_INT 0
29400: PPUSH
29401: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29402: LD_ADDR_VAR 0 2
29406: PUSH
29407: LD_INT 22
29409: PUSH
29410: LD_OWVAR 2
29414: PUSH
29415: EMPTY
29416: LIST
29417: LIST
29418: PUSH
29419: LD_INT 21
29421: PUSH
29422: LD_INT 1
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: PUSH
29429: LD_INT 3
29431: PUSH
29432: LD_INT 23
29434: PUSH
29435: LD_INT 0
29437: PUSH
29438: EMPTY
29439: LIST
29440: LIST
29441: PUSH
29442: EMPTY
29443: LIST
29444: LIST
29445: PUSH
29446: EMPTY
29447: LIST
29448: LIST
29449: LIST
29450: PPUSH
29451: CALL_OW 69
29455: ST_TO_ADDR
// if not tmp then
29456: LD_VAR 0 2
29460: NOT
29461: IFFALSE 29465
// exit ;
29463: GO 29514
// for i in tmp do
29465: LD_ADDR_VAR 0 1
29469: PUSH
29470: LD_VAR 0 2
29474: PUSH
29475: FOR_IN
29476: IFFALSE 29512
// begin if Crawls ( i ) then
29478: LD_VAR 0 1
29482: PPUSH
29483: CALL_OW 318
29487: IFFALSE 29498
// ComWalk ( i ) ;
29489: LD_VAR 0 1
29493: PPUSH
29494: CALL_OW 138
// SetClass ( i , 2 ) ;
29498: LD_VAR 0 1
29502: PPUSH
29503: LD_INT 2
29505: PPUSH
29506: CALL_OW 336
// end ;
29510: GO 29475
29512: POP
29513: POP
// end ;
29514: PPOPN 2
29516: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
29517: LD_EXP 68
29521: PUSH
29522: LD_EXP 121
29526: AND
29527: IFFALSE 29808
29529: GO 29531
29531: DISABLE
29532: LD_INT 0
29534: PPUSH
29535: PPUSH
29536: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
29537: LD_OWVAR 2
29541: PPUSH
29542: LD_INT 9
29544: PPUSH
29545: LD_INT 1
29547: PPUSH
29548: LD_INT 1
29550: PPUSH
29551: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
29555: LD_INT 9
29557: PPUSH
29558: LD_OWVAR 2
29562: PPUSH
29563: CALL_OW 343
// uc_side := 9 ;
29567: LD_ADDR_OWVAR 20
29571: PUSH
29572: LD_INT 9
29574: ST_TO_ADDR
// uc_nation := 2 ;
29575: LD_ADDR_OWVAR 21
29579: PUSH
29580: LD_INT 2
29582: ST_TO_ADDR
// hc_name := Dark Warrior ;
29583: LD_ADDR_OWVAR 26
29587: PUSH
29588: LD_STRING Dark Warrior
29590: ST_TO_ADDR
// hc_gallery :=  ;
29591: LD_ADDR_OWVAR 33
29595: PUSH
29596: LD_STRING 
29598: ST_TO_ADDR
// hc_noskilllimit := true ;
29599: LD_ADDR_OWVAR 76
29603: PUSH
29604: LD_INT 1
29606: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
29607: LD_ADDR_OWVAR 31
29611: PUSH
29612: LD_INT 30
29614: PUSH
29615: LD_INT 30
29617: PUSH
29618: LD_INT 30
29620: PUSH
29621: LD_INT 30
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: LIST
29628: LIST
29629: ST_TO_ADDR
// un := CreateHuman ;
29630: LD_ADDR_VAR 0 3
29634: PUSH
29635: CALL_OW 44
29639: ST_TO_ADDR
// hc_noskilllimit := false ;
29640: LD_ADDR_OWVAR 76
29644: PUSH
29645: LD_INT 0
29647: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29648: LD_VAR 0 3
29652: PPUSH
29653: LD_INT 1
29655: PPUSH
29656: CALL_OW 51
// p := 0 ;
29660: LD_ADDR_VAR 0 2
29664: PUSH
29665: LD_INT 0
29667: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29668: LD_INT 35
29670: PPUSH
29671: CALL_OW 67
// p := p + 1 ;
29675: LD_ADDR_VAR 0 2
29679: PUSH
29680: LD_VAR 0 2
29684: PUSH
29685: LD_INT 1
29687: PLUS
29688: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
29689: LD_VAR 0 3
29693: PPUSH
29694: CALL_OW 256
29698: PUSH
29699: LD_INT 1000
29701: LESS
29702: IFFALSE 29716
// SetLives ( un , 1000 ) ;
29704: LD_VAR 0 3
29708: PPUSH
29709: LD_INT 1000
29711: PPUSH
29712: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
29716: LD_VAR 0 3
29720: PPUSH
29721: LD_INT 81
29723: PUSH
29724: LD_OWVAR 2
29728: PUSH
29729: EMPTY
29730: LIST
29731: LIST
29732: PUSH
29733: LD_INT 91
29735: PUSH
29736: LD_VAR 0 3
29740: PUSH
29741: LD_INT 30
29743: PUSH
29744: EMPTY
29745: LIST
29746: LIST
29747: LIST
29748: PUSH
29749: EMPTY
29750: LIST
29751: LIST
29752: PPUSH
29753: CALL_OW 69
29757: PPUSH
29758: LD_VAR 0 3
29762: PPUSH
29763: CALL_OW 74
29767: PPUSH
29768: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
29772: LD_VAR 0 2
29776: PUSH
29777: LD_INT 60
29779: GREATER
29780: PUSH
29781: LD_VAR 0 3
29785: PPUSH
29786: CALL_OW 301
29790: OR
29791: IFFALSE 29668
// if un then
29793: LD_VAR 0 3
29797: IFFALSE 29808
// RemoveUnit ( un ) ;
29799: LD_VAR 0 3
29803: PPUSH
29804: CALL_OW 64
// end ; end_of_file
29808: PPOPN 3
29810: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
29811: LD_INT 0
29813: PPUSH
29814: PPUSH
29815: PPUSH
29816: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
29817: LD_VAR 0 1
29821: PPUSH
29822: CALL_OW 264
29826: PUSH
29827: LD_EXP 58
29831: EQUAL
29832: IFFALSE 29904
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
29834: LD_INT 68
29836: PPUSH
29837: LD_VAR 0 1
29841: PPUSH
29842: CALL_OW 255
29846: PPUSH
29847: CALL_OW 321
29851: PUSH
29852: LD_INT 2
29854: EQUAL
29855: IFFALSE 29867
// eff := 70 else
29857: LD_ADDR_VAR 0 4
29861: PUSH
29862: LD_INT 70
29864: ST_TO_ADDR
29865: GO 29875
// eff := 30 ;
29867: LD_ADDR_VAR 0 4
29871: PUSH
29872: LD_INT 30
29874: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
29875: LD_VAR 0 1
29879: PPUSH
29880: CALL_OW 250
29884: PPUSH
29885: LD_VAR 0 1
29889: PPUSH
29890: CALL_OW 251
29894: PPUSH
29895: LD_VAR 0 4
29899: PPUSH
29900: CALL_OW 495
// end ; end ;
29904: LD_VAR 0 2
29908: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
29909: LD_INT 0
29911: PPUSH
// end ;
29912: LD_VAR 0 4
29916: RET
// export function SOS_Command ( cmd ) ; begin
29917: LD_INT 0
29919: PPUSH
// end ;
29920: LD_VAR 0 2
29924: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y ) do begin if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
29925: LD_VAR 0 1
29929: PUSH
29930: LD_INT 254
29932: EQUAL
29933: PUSH
29934: LD_VAR 0 2
29938: PPUSH
29939: CALL_OW 264
29943: PUSH
29944: LD_EXP 56
29948: EQUAL
29949: AND
29950: PUSH
29951: LD_VAR 0 3
29955: PPUSH
29956: CALL_OW 263
29960: PUSH
29961: LD_INT 3
29963: EQUAL
29964: AND
29965: IFFALSE 29976
// DestroyUnit ( selectedUnit ) ;
29967: LD_VAR 0 3
29971: PPUSH
29972: CALL_OW 65
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
29976: LD_VAR 0 1
29980: PUSH
29981: LD_INT 255
29983: EQUAL
29984: PUSH
29985: LD_VAR 0 2
29989: PPUSH
29990: CALL_OW 264
29994: PUSH
29995: LD_INT 14
29997: PUSH
29998: LD_INT 53
30000: PUSH
30001: EMPTY
30002: LIST
30003: LIST
30004: IN
30005: AND
30006: PUSH
30007: LD_VAR 0 4
30011: PPUSH
30012: LD_VAR 0 5
30016: PPUSH
30017: CALL_OW 488
30021: AND
30022: IFFALSE 30046
// CutTreeXYR ( unit , x , y , 12 ) ;
30024: LD_VAR 0 2
30028: PPUSH
30029: LD_VAR 0 4
30033: PPUSH
30034: LD_VAR 0 5
30038: PPUSH
30039: LD_INT 12
30041: PPUSH
30042: CALL 30049 0 4
// end ;
30046: PPOPN 5
30048: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
30049: LD_INT 0
30051: PPUSH
30052: PPUSH
30053: PPUSH
30054: PPUSH
30055: PPUSH
30056: PPUSH
30057: PPUSH
30058: PPUSH
30059: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
30060: LD_VAR 0 1
30064: NOT
30065: PUSH
30066: LD_VAR 0 2
30070: PPUSH
30071: LD_VAR 0 3
30075: PPUSH
30076: CALL_OW 488
30080: NOT
30081: OR
30082: PUSH
30083: LD_VAR 0 4
30087: NOT
30088: OR
30089: IFFALSE 30093
// exit ;
30091: GO 30433
// list := [ ] ;
30093: LD_ADDR_VAR 0 13
30097: PUSH
30098: EMPTY
30099: ST_TO_ADDR
// if x - r < 0 then
30100: LD_VAR 0 2
30104: PUSH
30105: LD_VAR 0 4
30109: MINUS
30110: PUSH
30111: LD_INT 0
30113: LESS
30114: IFFALSE 30126
// min_x := 0 else
30116: LD_ADDR_VAR 0 7
30120: PUSH
30121: LD_INT 0
30123: ST_TO_ADDR
30124: GO 30142
// min_x := x - r ;
30126: LD_ADDR_VAR 0 7
30130: PUSH
30131: LD_VAR 0 2
30135: PUSH
30136: LD_VAR 0 4
30140: MINUS
30141: ST_TO_ADDR
// if y - r < 0 then
30142: LD_VAR 0 3
30146: PUSH
30147: LD_VAR 0 4
30151: MINUS
30152: PUSH
30153: LD_INT 0
30155: LESS
30156: IFFALSE 30168
// min_y := 0 else
30158: LD_ADDR_VAR 0 8
30162: PUSH
30163: LD_INT 0
30165: ST_TO_ADDR
30166: GO 30184
// min_y := y - r ;
30168: LD_ADDR_VAR 0 8
30172: PUSH
30173: LD_VAR 0 3
30177: PUSH
30178: LD_VAR 0 4
30182: MINUS
30183: ST_TO_ADDR
// max_x := x + r ;
30184: LD_ADDR_VAR 0 9
30188: PUSH
30189: LD_VAR 0 2
30193: PUSH
30194: LD_VAR 0 4
30198: PLUS
30199: ST_TO_ADDR
// max_y := y + r ;
30200: LD_ADDR_VAR 0 10
30204: PUSH
30205: LD_VAR 0 3
30209: PUSH
30210: LD_VAR 0 4
30214: PLUS
30215: ST_TO_ADDR
// for _x = min_x to max_x do
30216: LD_ADDR_VAR 0 11
30220: PUSH
30221: DOUBLE
30222: LD_VAR 0 7
30226: DEC
30227: ST_TO_ADDR
30228: LD_VAR 0 9
30232: PUSH
30233: FOR_TO
30234: IFFALSE 30351
// for _y = min_y to max_y do
30236: LD_ADDR_VAR 0 12
30240: PUSH
30241: DOUBLE
30242: LD_VAR 0 8
30246: DEC
30247: ST_TO_ADDR
30248: LD_VAR 0 10
30252: PUSH
30253: FOR_TO
30254: IFFALSE 30347
// begin if not ValidHex ( _x , _y ) then
30256: LD_VAR 0 11
30260: PPUSH
30261: LD_VAR 0 12
30265: PPUSH
30266: CALL_OW 488
30270: NOT
30271: IFFALSE 30275
// continue ;
30273: GO 30253
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
30275: LD_VAR 0 11
30279: PPUSH
30280: LD_VAR 0 12
30284: PPUSH
30285: CALL_OW 351
30289: PUSH
30290: LD_VAR 0 11
30294: PPUSH
30295: LD_VAR 0 12
30299: PPUSH
30300: CALL_OW 554
30304: AND
30305: IFFALSE 30345
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
30307: LD_ADDR_VAR 0 13
30311: PUSH
30312: LD_VAR 0 13
30316: PPUSH
30317: LD_VAR 0 13
30321: PUSH
30322: LD_INT 1
30324: PLUS
30325: PPUSH
30326: LD_VAR 0 11
30330: PUSH
30331: LD_VAR 0 12
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: PPUSH
30340: CALL_OW 2
30344: ST_TO_ADDR
// end ;
30345: GO 30253
30347: POP
30348: POP
30349: GO 30233
30351: POP
30352: POP
// if not list then
30353: LD_VAR 0 13
30357: NOT
30358: IFFALSE 30362
// exit ;
30360: GO 30433
// for i in list do
30362: LD_ADDR_VAR 0 6
30366: PUSH
30367: LD_VAR 0 13
30371: PUSH
30372: FOR_IN
30373: IFFALSE 30431
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
30375: LD_VAR 0 1
30379: PPUSH
30380: LD_STRING M
30382: PUSH
30383: LD_VAR 0 6
30387: PUSH
30388: LD_INT 1
30390: ARRAY
30391: PUSH
30392: LD_VAR 0 6
30396: PUSH
30397: LD_INT 2
30399: ARRAY
30400: PUSH
30401: LD_INT 0
30403: PUSH
30404: LD_INT 0
30406: PUSH
30407: LD_INT 0
30409: PUSH
30410: LD_INT 0
30412: PUSH
30413: EMPTY
30414: LIST
30415: LIST
30416: LIST
30417: LIST
30418: LIST
30419: LIST
30420: LIST
30421: PUSH
30422: EMPTY
30423: LIST
30424: PPUSH
30425: CALL_OW 447
30429: GO 30372
30431: POP
30432: POP
// end ;
30433: LD_VAR 0 5
30437: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
30438: LD_EXP 122
30442: NOT
30443: IFFALSE 30493
30445: GO 30447
30447: DISABLE
// begin initHack := true ;
30448: LD_ADDR_EXP 122
30452: PUSH
30453: LD_INT 1
30455: ST_TO_ADDR
// hackTanks := [ ] ;
30456: LD_ADDR_EXP 123
30460: PUSH
30461: EMPTY
30462: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
30463: LD_ADDR_EXP 124
30467: PUSH
30468: EMPTY
30469: ST_TO_ADDR
// hackLimit := 3 ;
30470: LD_ADDR_EXP 125
30474: PUSH
30475: LD_INT 3
30477: ST_TO_ADDR
// hackDist := 12 ;
30478: LD_ADDR_EXP 126
30482: PUSH
30483: LD_INT 12
30485: ST_TO_ADDR
// hackCounter := [ ] ;
30486: LD_ADDR_EXP 127
30490: PUSH
30491: EMPTY
30492: ST_TO_ADDR
// end ;
30493: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
30494: LD_EXP 122
30498: PUSH
30499: LD_INT 34
30501: PUSH
30502: LD_EXP 56
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: PPUSH
30511: CALL_OW 69
30515: AND
30516: IFFALSE 30771
30518: GO 30520
30520: DISABLE
30521: LD_INT 0
30523: PPUSH
30524: PPUSH
// begin enable ;
30525: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
30526: LD_ADDR_VAR 0 1
30530: PUSH
30531: LD_INT 34
30533: PUSH
30534: LD_EXP 56
30538: PUSH
30539: EMPTY
30540: LIST
30541: LIST
30542: PPUSH
30543: CALL_OW 69
30547: PUSH
30548: FOR_IN
30549: IFFALSE 30769
// begin if not i in hackTanks then
30551: LD_VAR 0 1
30555: PUSH
30556: LD_EXP 123
30560: IN
30561: NOT
30562: IFFALSE 30645
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
30564: LD_ADDR_EXP 123
30568: PUSH
30569: LD_EXP 123
30573: PPUSH
30574: LD_EXP 123
30578: PUSH
30579: LD_INT 1
30581: PLUS
30582: PPUSH
30583: LD_VAR 0 1
30587: PPUSH
30588: CALL_OW 1
30592: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
30593: LD_ADDR_EXP 124
30597: PUSH
30598: LD_EXP 124
30602: PPUSH
30603: LD_EXP 124
30607: PUSH
30608: LD_INT 1
30610: PLUS
30611: PPUSH
30612: EMPTY
30613: PPUSH
30614: CALL_OW 1
30618: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
30619: LD_ADDR_EXP 127
30623: PUSH
30624: LD_EXP 127
30628: PPUSH
30629: LD_EXP 127
30633: PUSH
30634: LD_INT 1
30636: PLUS
30637: PPUSH
30638: EMPTY
30639: PPUSH
30640: CALL_OW 1
30644: ST_TO_ADDR
// end ; if not IsOk ( i ) then
30645: LD_VAR 0 1
30649: PPUSH
30650: CALL_OW 302
30654: NOT
30655: IFFALSE 30668
// begin HackUnlinkAll ( i ) ;
30657: LD_VAR 0 1
30661: PPUSH
30662: CALL 30774 0 1
// continue ;
30666: GO 30548
// end ; HackCheckCapturedStatus ( i ) ;
30668: LD_VAR 0 1
30672: PPUSH
30673: CALL 31217 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
30677: LD_ADDR_VAR 0 2
30681: PUSH
30682: LD_INT 81
30684: PUSH
30685: LD_VAR 0 1
30689: PPUSH
30690: CALL_OW 255
30694: PUSH
30695: EMPTY
30696: LIST
30697: LIST
30698: PUSH
30699: LD_INT 33
30701: PUSH
30702: LD_INT 3
30704: PUSH
30705: EMPTY
30706: LIST
30707: LIST
30708: PUSH
30709: LD_INT 91
30711: PUSH
30712: LD_VAR 0 1
30716: PUSH
30717: LD_EXP 126
30721: PUSH
30722: EMPTY
30723: LIST
30724: LIST
30725: LIST
30726: PUSH
30727: LD_INT 50
30729: PUSH
30730: EMPTY
30731: LIST
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: LIST
30737: LIST
30738: PPUSH
30739: CALL_OW 69
30743: ST_TO_ADDR
// if not tmp then
30744: LD_VAR 0 2
30748: NOT
30749: IFFALSE 30753
// continue ;
30751: GO 30548
// HackLink ( i , tmp ) ;
30753: LD_VAR 0 1
30757: PPUSH
30758: LD_VAR 0 2
30762: PPUSH
30763: CALL 30910 0 2
// end ;
30767: GO 30548
30769: POP
30770: POP
// end ;
30771: PPOPN 2
30773: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
30774: LD_INT 0
30776: PPUSH
30777: PPUSH
30778: PPUSH
// if not hack in hackTanks then
30779: LD_VAR 0 1
30783: PUSH
30784: LD_EXP 123
30788: IN
30789: NOT
30790: IFFALSE 30794
// exit ;
30792: GO 30905
// index := GetElementIndex ( hackTanks , hack ) ;
30794: LD_ADDR_VAR 0 4
30798: PUSH
30799: LD_EXP 123
30803: PPUSH
30804: LD_VAR 0 1
30808: PPUSH
30809: CALL 36214 0 2
30813: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
30814: LD_EXP 124
30818: PUSH
30819: LD_VAR 0 4
30823: ARRAY
30824: IFFALSE 30905
// begin for i in hackTanksCaptured [ index ] do
30826: LD_ADDR_VAR 0 3
30830: PUSH
30831: LD_EXP 124
30835: PUSH
30836: LD_VAR 0 4
30840: ARRAY
30841: PUSH
30842: FOR_IN
30843: IFFALSE 30869
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
30845: LD_VAR 0 3
30849: PUSH
30850: LD_INT 1
30852: ARRAY
30853: PPUSH
30854: LD_VAR 0 3
30858: PUSH
30859: LD_INT 2
30861: ARRAY
30862: PPUSH
30863: CALL_OW 235
30867: GO 30842
30869: POP
30870: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
30871: LD_ADDR_EXP 124
30875: PUSH
30876: LD_EXP 124
30880: PPUSH
30881: LD_VAR 0 4
30885: PPUSH
30886: EMPTY
30887: PPUSH
30888: CALL_OW 1
30892: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
30893: LD_VAR 0 1
30897: PPUSH
30898: LD_INT 0
30900: PPUSH
30901: CALL_OW 505
// end ; end ;
30905: LD_VAR 0 2
30909: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
30910: LD_INT 0
30912: PPUSH
30913: PPUSH
30914: PPUSH
// if not hack in hackTanks or not vehicles then
30915: LD_VAR 0 1
30919: PUSH
30920: LD_EXP 123
30924: IN
30925: NOT
30926: PUSH
30927: LD_VAR 0 2
30931: NOT
30932: OR
30933: IFFALSE 30937
// exit ;
30935: GO 31212
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
30937: LD_ADDR_VAR 0 2
30941: PUSH
30942: LD_VAR 0 1
30946: PPUSH
30947: LD_VAR 0 2
30951: PPUSH
30952: LD_INT 1
30954: PPUSH
30955: LD_INT 1
30957: PPUSH
30958: CALL 36864 0 4
30962: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
30963: LD_ADDR_VAR 0 5
30967: PUSH
30968: LD_EXP 123
30972: PPUSH
30973: LD_VAR 0 1
30977: PPUSH
30978: CALL 36214 0 2
30982: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
30983: LD_EXP 124
30987: PUSH
30988: LD_VAR 0 5
30992: ARRAY
30993: PUSH
30994: LD_EXP 125
30998: LESS
30999: IFFALSE 31188
// begin for i := 1 to vehicles do
31001: LD_ADDR_VAR 0 4
31005: PUSH
31006: DOUBLE
31007: LD_INT 1
31009: DEC
31010: ST_TO_ADDR
31011: LD_VAR 0 2
31015: PUSH
31016: FOR_TO
31017: IFFALSE 31186
// begin if hackTanksCaptured [ index ] = hackLimit then
31019: LD_EXP 124
31023: PUSH
31024: LD_VAR 0 5
31028: ARRAY
31029: PUSH
31030: LD_EXP 125
31034: EQUAL
31035: IFFALSE 31039
// break ;
31037: GO 31186
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
31039: LD_ADDR_EXP 127
31043: PUSH
31044: LD_EXP 127
31048: PPUSH
31049: LD_VAR 0 5
31053: PPUSH
31054: LD_EXP 127
31058: PUSH
31059: LD_VAR 0 5
31063: ARRAY
31064: PUSH
31065: LD_INT 1
31067: PLUS
31068: PPUSH
31069: CALL_OW 1
31073: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
31074: LD_ADDR_EXP 124
31078: PUSH
31079: LD_EXP 124
31083: PPUSH
31084: LD_VAR 0 5
31088: PUSH
31089: LD_EXP 124
31093: PUSH
31094: LD_VAR 0 5
31098: ARRAY
31099: PUSH
31100: LD_INT 1
31102: PLUS
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: PPUSH
31108: LD_VAR 0 2
31112: PUSH
31113: LD_VAR 0 4
31117: ARRAY
31118: PUSH
31119: LD_VAR 0 2
31123: PUSH
31124: LD_VAR 0 4
31128: ARRAY
31129: PPUSH
31130: CALL_OW 255
31134: PUSH
31135: EMPTY
31136: LIST
31137: LIST
31138: PPUSH
31139: CALL 36429 0 3
31143: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
31144: LD_VAR 0 2
31148: PUSH
31149: LD_VAR 0 4
31153: ARRAY
31154: PPUSH
31155: LD_VAR 0 1
31159: PPUSH
31160: CALL_OW 255
31164: PPUSH
31165: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
31169: LD_VAR 0 2
31173: PUSH
31174: LD_VAR 0 4
31178: ARRAY
31179: PPUSH
31180: CALL_OW 141
// end ;
31184: GO 31016
31186: POP
31187: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
31188: LD_VAR 0 1
31192: PPUSH
31193: LD_EXP 124
31197: PUSH
31198: LD_VAR 0 5
31202: ARRAY
31203: PUSH
31204: LD_INT 0
31206: PLUS
31207: PPUSH
31208: CALL_OW 505
// end ;
31212: LD_VAR 0 3
31216: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
31217: LD_INT 0
31219: PPUSH
31220: PPUSH
31221: PPUSH
31222: PPUSH
// if not hack in hackTanks then
31223: LD_VAR 0 1
31227: PUSH
31228: LD_EXP 123
31232: IN
31233: NOT
31234: IFFALSE 31238
// exit ;
31236: GO 31478
// index := GetElementIndex ( hackTanks , hack ) ;
31238: LD_ADDR_VAR 0 4
31242: PUSH
31243: LD_EXP 123
31247: PPUSH
31248: LD_VAR 0 1
31252: PPUSH
31253: CALL 36214 0 2
31257: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
31258: LD_ADDR_VAR 0 3
31262: PUSH
31263: DOUBLE
31264: LD_EXP 124
31268: PUSH
31269: LD_VAR 0 4
31273: ARRAY
31274: INC
31275: ST_TO_ADDR
31276: LD_INT 1
31278: PUSH
31279: FOR_DOWNTO
31280: IFFALSE 31452
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
31282: LD_ADDR_VAR 0 5
31286: PUSH
31287: LD_EXP 124
31291: PUSH
31292: LD_VAR 0 4
31296: ARRAY
31297: PUSH
31298: LD_VAR 0 3
31302: ARRAY
31303: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
31304: LD_VAR 0 5
31308: PUSH
31309: LD_INT 1
31311: ARRAY
31312: PPUSH
31313: CALL_OW 302
31317: NOT
31318: PUSH
31319: LD_VAR 0 5
31323: PUSH
31324: LD_INT 1
31326: ARRAY
31327: PPUSH
31328: CALL_OW 255
31332: PUSH
31333: LD_VAR 0 1
31337: PPUSH
31338: CALL_OW 255
31342: NONEQUAL
31343: OR
31344: IFFALSE 31450
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
31346: LD_VAR 0 5
31350: PUSH
31351: LD_INT 1
31353: ARRAY
31354: PPUSH
31355: CALL_OW 305
31359: PUSH
31360: LD_VAR 0 5
31364: PUSH
31365: LD_INT 1
31367: ARRAY
31368: PPUSH
31369: CALL_OW 255
31373: PUSH
31374: LD_VAR 0 1
31378: PPUSH
31379: CALL_OW 255
31383: EQUAL
31384: AND
31385: IFFALSE 31409
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
31387: LD_VAR 0 5
31391: PUSH
31392: LD_INT 1
31394: ARRAY
31395: PPUSH
31396: LD_VAR 0 5
31400: PUSH
31401: LD_INT 2
31403: ARRAY
31404: PPUSH
31405: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
31409: LD_ADDR_EXP 124
31413: PUSH
31414: LD_EXP 124
31418: PPUSH
31419: LD_VAR 0 4
31423: PPUSH
31424: LD_EXP 124
31428: PUSH
31429: LD_VAR 0 4
31433: ARRAY
31434: PPUSH
31435: LD_VAR 0 3
31439: PPUSH
31440: CALL_OW 3
31444: PPUSH
31445: CALL_OW 1
31449: ST_TO_ADDR
// end ; end ;
31450: GO 31279
31452: POP
31453: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
31454: LD_VAR 0 1
31458: PPUSH
31459: LD_EXP 124
31463: PUSH
31464: LD_VAR 0 4
31468: ARRAY
31469: PUSH
31470: LD_INT 0
31472: PLUS
31473: PPUSH
31474: CALL_OW 505
// end ; end_of_file
31478: LD_VAR 0 2
31482: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31483: LD_INT 0
31485: PPUSH
31486: PPUSH
// if exist_mode then
31487: LD_VAR 0 2
31491: IFFALSE 31516
// unit := CreateCharacter ( prefix & ident ) else
31493: LD_ADDR_VAR 0 5
31497: PUSH
31498: LD_VAR 0 3
31502: PUSH
31503: LD_VAR 0 1
31507: STR
31508: PPUSH
31509: CALL_OW 34
31513: ST_TO_ADDR
31514: GO 31531
// unit := NewCharacter ( ident ) ;
31516: LD_ADDR_VAR 0 5
31520: PUSH
31521: LD_VAR 0 1
31525: PPUSH
31526: CALL_OW 25
31530: ST_TO_ADDR
// result := unit ;
31531: LD_ADDR_VAR 0 4
31535: PUSH
31536: LD_VAR 0 5
31540: ST_TO_ADDR
// end ;
31541: LD_VAR 0 4
31545: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31546: LD_INT 0
31548: PPUSH
31549: PPUSH
// if not side or not nation then
31550: LD_VAR 0 1
31554: NOT
31555: PUSH
31556: LD_VAR 0 2
31560: NOT
31561: OR
31562: IFFALSE 31566
// exit ;
31564: GO 32330
// case nation of nation_american :
31566: LD_VAR 0 2
31570: PUSH
31571: LD_INT 1
31573: DOUBLE
31574: EQUAL
31575: IFTRUE 31579
31577: GO 31793
31579: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31580: LD_ADDR_VAR 0 4
31584: PUSH
31585: LD_INT 35
31587: PUSH
31588: LD_INT 45
31590: PUSH
31591: LD_INT 46
31593: PUSH
31594: LD_INT 47
31596: PUSH
31597: LD_INT 82
31599: PUSH
31600: LD_INT 83
31602: PUSH
31603: LD_INT 84
31605: PUSH
31606: LD_INT 85
31608: PUSH
31609: LD_INT 86
31611: PUSH
31612: LD_INT 1
31614: PUSH
31615: LD_INT 2
31617: PUSH
31618: LD_INT 6
31620: PUSH
31621: LD_INT 15
31623: PUSH
31624: LD_INT 16
31626: PUSH
31627: LD_INT 7
31629: PUSH
31630: LD_INT 12
31632: PUSH
31633: LD_INT 13
31635: PUSH
31636: LD_INT 10
31638: PUSH
31639: LD_INT 14
31641: PUSH
31642: LD_INT 20
31644: PUSH
31645: LD_INT 21
31647: PUSH
31648: LD_INT 22
31650: PUSH
31651: LD_INT 25
31653: PUSH
31654: LD_INT 32
31656: PUSH
31657: LD_INT 27
31659: PUSH
31660: LD_INT 36
31662: PUSH
31663: LD_INT 69
31665: PUSH
31666: LD_INT 39
31668: PUSH
31669: LD_INT 34
31671: PUSH
31672: LD_INT 40
31674: PUSH
31675: LD_INT 48
31677: PUSH
31678: LD_INT 49
31680: PUSH
31681: LD_INT 50
31683: PUSH
31684: LD_INT 51
31686: PUSH
31687: LD_INT 52
31689: PUSH
31690: LD_INT 53
31692: PUSH
31693: LD_INT 54
31695: PUSH
31696: LD_INT 55
31698: PUSH
31699: LD_INT 56
31701: PUSH
31702: LD_INT 57
31704: PUSH
31705: LD_INT 58
31707: PUSH
31708: LD_INT 59
31710: PUSH
31711: LD_INT 60
31713: PUSH
31714: LD_INT 61
31716: PUSH
31717: LD_INT 62
31719: PUSH
31720: LD_INT 80
31722: PUSH
31723: LD_INT 82
31725: PUSH
31726: LD_INT 83
31728: PUSH
31729: LD_INT 84
31731: PUSH
31732: LD_INT 85
31734: PUSH
31735: LD_INT 86
31737: PUSH
31738: EMPTY
31739: LIST
31740: LIST
31741: LIST
31742: LIST
31743: LIST
31744: LIST
31745: LIST
31746: LIST
31747: LIST
31748: LIST
31749: LIST
31750: LIST
31751: LIST
31752: LIST
31753: LIST
31754: LIST
31755: LIST
31756: LIST
31757: LIST
31758: LIST
31759: LIST
31760: LIST
31761: LIST
31762: LIST
31763: LIST
31764: LIST
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: LIST
31772: LIST
31773: LIST
31774: LIST
31775: LIST
31776: LIST
31777: LIST
31778: LIST
31779: LIST
31780: LIST
31781: LIST
31782: LIST
31783: LIST
31784: LIST
31785: LIST
31786: LIST
31787: LIST
31788: LIST
31789: LIST
31790: ST_TO_ADDR
31791: GO 32254
31793: LD_INT 2
31795: DOUBLE
31796: EQUAL
31797: IFTRUE 31801
31799: GO 32023
31801: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
31802: LD_ADDR_VAR 0 4
31806: PUSH
31807: LD_INT 35
31809: PUSH
31810: LD_INT 45
31812: PUSH
31813: LD_INT 46
31815: PUSH
31816: LD_INT 47
31818: PUSH
31819: LD_INT 82
31821: PUSH
31822: LD_INT 83
31824: PUSH
31825: LD_INT 84
31827: PUSH
31828: LD_INT 85
31830: PUSH
31831: LD_INT 87
31833: PUSH
31834: LD_INT 70
31836: PUSH
31837: LD_INT 1
31839: PUSH
31840: LD_INT 11
31842: PUSH
31843: LD_INT 3
31845: PUSH
31846: LD_INT 4
31848: PUSH
31849: LD_INT 5
31851: PUSH
31852: LD_INT 6
31854: PUSH
31855: LD_INT 15
31857: PUSH
31858: LD_INT 18
31860: PUSH
31861: LD_INT 7
31863: PUSH
31864: LD_INT 17
31866: PUSH
31867: LD_INT 8
31869: PUSH
31870: LD_INT 20
31872: PUSH
31873: LD_INT 21
31875: PUSH
31876: LD_INT 22
31878: PUSH
31879: LD_INT 72
31881: PUSH
31882: LD_INT 26
31884: PUSH
31885: LD_INT 69
31887: PUSH
31888: LD_INT 39
31890: PUSH
31891: LD_INT 40
31893: PUSH
31894: LD_INT 41
31896: PUSH
31897: LD_INT 42
31899: PUSH
31900: LD_INT 43
31902: PUSH
31903: LD_INT 48
31905: PUSH
31906: LD_INT 49
31908: PUSH
31909: LD_INT 50
31911: PUSH
31912: LD_INT 51
31914: PUSH
31915: LD_INT 52
31917: PUSH
31918: LD_INT 53
31920: PUSH
31921: LD_INT 54
31923: PUSH
31924: LD_INT 55
31926: PUSH
31927: LD_INT 56
31929: PUSH
31930: LD_INT 60
31932: PUSH
31933: LD_INT 61
31935: PUSH
31936: LD_INT 62
31938: PUSH
31939: LD_INT 66
31941: PUSH
31942: LD_INT 67
31944: PUSH
31945: LD_INT 68
31947: PUSH
31948: LD_INT 81
31950: PUSH
31951: LD_INT 82
31953: PUSH
31954: LD_INT 83
31956: PUSH
31957: LD_INT 84
31959: PUSH
31960: LD_INT 85
31962: PUSH
31963: LD_INT 87
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: LIST
31970: LIST
31971: LIST
31972: LIST
31973: LIST
31974: LIST
31975: LIST
31976: LIST
31977: LIST
31978: LIST
31979: LIST
31980: LIST
31981: LIST
31982: LIST
31983: LIST
31984: LIST
31985: LIST
31986: LIST
31987: LIST
31988: LIST
31989: LIST
31990: LIST
31991: LIST
31992: LIST
31993: LIST
31994: LIST
31995: LIST
31996: LIST
31997: LIST
31998: LIST
31999: LIST
32000: LIST
32001: LIST
32002: LIST
32003: LIST
32004: LIST
32005: LIST
32006: LIST
32007: LIST
32008: LIST
32009: LIST
32010: LIST
32011: LIST
32012: LIST
32013: LIST
32014: LIST
32015: LIST
32016: LIST
32017: LIST
32018: LIST
32019: LIST
32020: ST_TO_ADDR
32021: GO 32254
32023: LD_INT 3
32025: DOUBLE
32026: EQUAL
32027: IFTRUE 32031
32029: GO 32253
32031: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
32032: LD_ADDR_VAR 0 4
32036: PUSH
32037: LD_INT 46
32039: PUSH
32040: LD_INT 47
32042: PUSH
32043: LD_INT 1
32045: PUSH
32046: LD_INT 2
32048: PUSH
32049: LD_INT 82
32051: PUSH
32052: LD_INT 83
32054: PUSH
32055: LD_INT 84
32057: PUSH
32058: LD_INT 85
32060: PUSH
32061: LD_INT 86
32063: PUSH
32064: LD_INT 11
32066: PUSH
32067: LD_INT 9
32069: PUSH
32070: LD_INT 20
32072: PUSH
32073: LD_INT 19
32075: PUSH
32076: LD_INT 21
32078: PUSH
32079: LD_INT 24
32081: PUSH
32082: LD_INT 22
32084: PUSH
32085: LD_INT 25
32087: PUSH
32088: LD_INT 28
32090: PUSH
32091: LD_INT 29
32093: PUSH
32094: LD_INT 30
32096: PUSH
32097: LD_INT 31
32099: PUSH
32100: LD_INT 37
32102: PUSH
32103: LD_INT 38
32105: PUSH
32106: LD_INT 32
32108: PUSH
32109: LD_INT 27
32111: PUSH
32112: LD_INT 33
32114: PUSH
32115: LD_INT 69
32117: PUSH
32118: LD_INT 39
32120: PUSH
32121: LD_INT 34
32123: PUSH
32124: LD_INT 40
32126: PUSH
32127: LD_INT 71
32129: PUSH
32130: LD_INT 23
32132: PUSH
32133: LD_INT 44
32135: PUSH
32136: LD_INT 48
32138: PUSH
32139: LD_INT 49
32141: PUSH
32142: LD_INT 50
32144: PUSH
32145: LD_INT 51
32147: PUSH
32148: LD_INT 52
32150: PUSH
32151: LD_INT 53
32153: PUSH
32154: LD_INT 54
32156: PUSH
32157: LD_INT 55
32159: PUSH
32160: LD_INT 56
32162: PUSH
32163: LD_INT 57
32165: PUSH
32166: LD_INT 58
32168: PUSH
32169: LD_INT 59
32171: PUSH
32172: LD_INT 63
32174: PUSH
32175: LD_INT 64
32177: PUSH
32178: LD_INT 65
32180: PUSH
32181: LD_INT 82
32183: PUSH
32184: LD_INT 83
32186: PUSH
32187: LD_INT 84
32189: PUSH
32190: LD_INT 85
32192: PUSH
32193: LD_INT 86
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: LIST
32200: LIST
32201: LIST
32202: LIST
32203: LIST
32204: LIST
32205: LIST
32206: LIST
32207: LIST
32208: LIST
32209: LIST
32210: LIST
32211: LIST
32212: LIST
32213: LIST
32214: LIST
32215: LIST
32216: LIST
32217: LIST
32218: LIST
32219: LIST
32220: LIST
32221: LIST
32222: LIST
32223: LIST
32224: LIST
32225: LIST
32226: LIST
32227: LIST
32228: LIST
32229: LIST
32230: LIST
32231: LIST
32232: LIST
32233: LIST
32234: LIST
32235: LIST
32236: LIST
32237: LIST
32238: LIST
32239: LIST
32240: LIST
32241: LIST
32242: LIST
32243: LIST
32244: LIST
32245: LIST
32246: LIST
32247: LIST
32248: LIST
32249: LIST
32250: ST_TO_ADDR
32251: GO 32254
32253: POP
// if state > - 1 and state < 3 then
32254: LD_VAR 0 3
32258: PUSH
32259: LD_INT 1
32261: NEG
32262: GREATER
32263: PUSH
32264: LD_VAR 0 3
32268: PUSH
32269: LD_INT 3
32271: LESS
32272: AND
32273: IFFALSE 32330
// for i in result do
32275: LD_ADDR_VAR 0 5
32279: PUSH
32280: LD_VAR 0 4
32284: PUSH
32285: FOR_IN
32286: IFFALSE 32328
// if GetTech ( i , side ) <> state then
32288: LD_VAR 0 5
32292: PPUSH
32293: LD_VAR 0 1
32297: PPUSH
32298: CALL_OW 321
32302: PUSH
32303: LD_VAR 0 3
32307: NONEQUAL
32308: IFFALSE 32326
// result := result diff i ;
32310: LD_ADDR_VAR 0 4
32314: PUSH
32315: LD_VAR 0 4
32319: PUSH
32320: LD_VAR 0 5
32324: DIFF
32325: ST_TO_ADDR
32326: GO 32285
32328: POP
32329: POP
// end ;
32330: LD_VAR 0 4
32334: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
32335: LD_INT 0
32337: PPUSH
32338: PPUSH
32339: PPUSH
// result := true ;
32340: LD_ADDR_VAR 0 3
32344: PUSH
32345: LD_INT 1
32347: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
32348: LD_ADDR_VAR 0 5
32352: PUSH
32353: LD_VAR 0 2
32357: PPUSH
32358: CALL_OW 480
32362: ST_TO_ADDR
// if not tmp then
32363: LD_VAR 0 5
32367: NOT
32368: IFFALSE 32372
// exit ;
32370: GO 32421
// for i in tmp do
32372: LD_ADDR_VAR 0 4
32376: PUSH
32377: LD_VAR 0 5
32381: PUSH
32382: FOR_IN
32383: IFFALSE 32419
// if GetTech ( i , side ) <> state_researched then
32385: LD_VAR 0 4
32389: PPUSH
32390: LD_VAR 0 1
32394: PPUSH
32395: CALL_OW 321
32399: PUSH
32400: LD_INT 2
32402: NONEQUAL
32403: IFFALSE 32417
// begin result := false ;
32405: LD_ADDR_VAR 0 3
32409: PUSH
32410: LD_INT 0
32412: ST_TO_ADDR
// exit ;
32413: POP
32414: POP
32415: GO 32421
// end ;
32417: GO 32382
32419: POP
32420: POP
// end ;
32421: LD_VAR 0 3
32425: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
32426: LD_INT 0
32428: PPUSH
32429: PPUSH
32430: PPUSH
32431: PPUSH
32432: PPUSH
32433: PPUSH
32434: PPUSH
32435: PPUSH
32436: PPUSH
32437: PPUSH
32438: PPUSH
32439: PPUSH
32440: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32441: LD_VAR 0 1
32445: NOT
32446: PUSH
32447: LD_VAR 0 1
32451: PPUSH
32452: CALL_OW 257
32456: PUSH
32457: LD_INT 9
32459: NONEQUAL
32460: OR
32461: IFFALSE 32465
// exit ;
32463: GO 33038
// side := GetSide ( unit ) ;
32465: LD_ADDR_VAR 0 9
32469: PUSH
32470: LD_VAR 0 1
32474: PPUSH
32475: CALL_OW 255
32479: ST_TO_ADDR
// tech_space := tech_spacanom ;
32480: LD_ADDR_VAR 0 12
32484: PUSH
32485: LD_INT 29
32487: ST_TO_ADDR
// tech_time := tech_taurad ;
32488: LD_ADDR_VAR 0 13
32492: PUSH
32493: LD_INT 28
32495: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32496: LD_ADDR_VAR 0 11
32500: PUSH
32501: LD_VAR 0 1
32505: PPUSH
32506: CALL_OW 310
32510: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32511: LD_VAR 0 11
32515: PPUSH
32516: CALL_OW 247
32520: PUSH
32521: LD_INT 2
32523: EQUAL
32524: IFFALSE 32528
// exit ;
32526: GO 33038
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32528: LD_ADDR_VAR 0 8
32532: PUSH
32533: LD_INT 81
32535: PUSH
32536: LD_VAR 0 9
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: PUSH
32545: LD_INT 3
32547: PUSH
32548: LD_INT 21
32550: PUSH
32551: LD_INT 3
32553: PUSH
32554: EMPTY
32555: LIST
32556: LIST
32557: PUSH
32558: EMPTY
32559: LIST
32560: LIST
32561: PUSH
32562: EMPTY
32563: LIST
32564: LIST
32565: PPUSH
32566: CALL_OW 69
32570: ST_TO_ADDR
// if not tmp then
32571: LD_VAR 0 8
32575: NOT
32576: IFFALSE 32580
// exit ;
32578: GO 33038
// if in_unit then
32580: LD_VAR 0 11
32584: IFFALSE 32608
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32586: LD_ADDR_VAR 0 10
32590: PUSH
32591: LD_VAR 0 8
32595: PPUSH
32596: LD_VAR 0 11
32600: PPUSH
32601: CALL_OW 74
32605: ST_TO_ADDR
32606: GO 32628
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32608: LD_ADDR_VAR 0 10
32612: PUSH
32613: LD_VAR 0 8
32617: PPUSH
32618: LD_VAR 0 1
32622: PPUSH
32623: CALL_OW 74
32627: ST_TO_ADDR
// if not enemy then
32628: LD_VAR 0 10
32632: NOT
32633: IFFALSE 32637
// exit ;
32635: GO 33038
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32637: LD_VAR 0 11
32641: PUSH
32642: LD_VAR 0 11
32646: PPUSH
32647: LD_VAR 0 10
32651: PPUSH
32652: CALL_OW 296
32656: PUSH
32657: LD_INT 13
32659: GREATER
32660: AND
32661: PUSH
32662: LD_VAR 0 1
32666: PPUSH
32667: LD_VAR 0 10
32671: PPUSH
32672: CALL_OW 296
32676: PUSH
32677: LD_INT 12
32679: GREATER
32680: OR
32681: IFFALSE 32685
// exit ;
32683: GO 33038
// missile := [ 1 ] ;
32685: LD_ADDR_VAR 0 14
32689: PUSH
32690: LD_INT 1
32692: PUSH
32693: EMPTY
32694: LIST
32695: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32696: LD_VAR 0 9
32700: PPUSH
32701: LD_VAR 0 12
32705: PPUSH
32706: CALL_OW 325
32710: IFFALSE 32739
// missile := Insert ( missile , missile + 1 , 2 ) ;
32712: LD_ADDR_VAR 0 14
32716: PUSH
32717: LD_VAR 0 14
32721: PPUSH
32722: LD_VAR 0 14
32726: PUSH
32727: LD_INT 1
32729: PLUS
32730: PPUSH
32731: LD_INT 2
32733: PPUSH
32734: CALL_OW 2
32738: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32739: LD_VAR 0 9
32743: PPUSH
32744: LD_VAR 0 13
32748: PPUSH
32749: CALL_OW 325
32753: PUSH
32754: LD_VAR 0 10
32758: PPUSH
32759: CALL_OW 255
32763: PPUSH
32764: LD_VAR 0 13
32768: PPUSH
32769: CALL_OW 325
32773: NOT
32774: AND
32775: IFFALSE 32804
// missile := Insert ( missile , missile + 1 , 3 ) ;
32777: LD_ADDR_VAR 0 14
32781: PUSH
32782: LD_VAR 0 14
32786: PPUSH
32787: LD_VAR 0 14
32791: PUSH
32792: LD_INT 1
32794: PLUS
32795: PPUSH
32796: LD_INT 3
32798: PPUSH
32799: CALL_OW 2
32803: ST_TO_ADDR
// if missile < 2 then
32804: LD_VAR 0 14
32808: PUSH
32809: LD_INT 2
32811: LESS
32812: IFFALSE 32816
// exit ;
32814: GO 33038
// x := GetX ( enemy ) ;
32816: LD_ADDR_VAR 0 4
32820: PUSH
32821: LD_VAR 0 10
32825: PPUSH
32826: CALL_OW 250
32830: ST_TO_ADDR
// y := GetY ( enemy ) ;
32831: LD_ADDR_VAR 0 5
32835: PUSH
32836: LD_VAR 0 10
32840: PPUSH
32841: CALL_OW 251
32845: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32846: LD_ADDR_VAR 0 6
32850: PUSH
32851: LD_VAR 0 4
32855: PUSH
32856: LD_INT 1
32858: NEG
32859: PPUSH
32860: LD_INT 1
32862: PPUSH
32863: CALL_OW 12
32867: PLUS
32868: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32869: LD_ADDR_VAR 0 7
32873: PUSH
32874: LD_VAR 0 5
32878: PUSH
32879: LD_INT 1
32881: NEG
32882: PPUSH
32883: LD_INT 1
32885: PPUSH
32886: CALL_OW 12
32890: PLUS
32891: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32892: LD_VAR 0 6
32896: PPUSH
32897: LD_VAR 0 7
32901: PPUSH
32902: CALL_OW 488
32906: NOT
32907: IFFALSE 32929
// begin _x := x ;
32909: LD_ADDR_VAR 0 6
32913: PUSH
32914: LD_VAR 0 4
32918: ST_TO_ADDR
// _y := y ;
32919: LD_ADDR_VAR 0 7
32923: PUSH
32924: LD_VAR 0 5
32928: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32929: LD_ADDR_VAR 0 3
32933: PUSH
32934: LD_INT 1
32936: PPUSH
32937: LD_VAR 0 14
32941: PPUSH
32942: CALL_OW 12
32946: ST_TO_ADDR
// case i of 1 :
32947: LD_VAR 0 3
32951: PUSH
32952: LD_INT 1
32954: DOUBLE
32955: EQUAL
32956: IFTRUE 32960
32958: GO 32977
32960: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32961: LD_VAR 0 1
32965: PPUSH
32966: LD_VAR 0 10
32970: PPUSH
32971: CALL_OW 115
32975: GO 33038
32977: LD_INT 2
32979: DOUBLE
32980: EQUAL
32981: IFTRUE 32985
32983: GO 33007
32985: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32986: LD_VAR 0 1
32990: PPUSH
32991: LD_VAR 0 6
32995: PPUSH
32996: LD_VAR 0 7
33000: PPUSH
33001: CALL_OW 153
33005: GO 33038
33007: LD_INT 3
33009: DOUBLE
33010: EQUAL
33011: IFTRUE 33015
33013: GO 33037
33015: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
33016: LD_VAR 0 1
33020: PPUSH
33021: LD_VAR 0 6
33025: PPUSH
33026: LD_VAR 0 7
33030: PPUSH
33031: CALL_OW 154
33035: GO 33038
33037: POP
// end ;
33038: LD_VAR 0 2
33042: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
33043: LD_INT 0
33045: PPUSH
33046: PPUSH
33047: PPUSH
33048: PPUSH
33049: PPUSH
33050: PPUSH
// if not unit or not building then
33051: LD_VAR 0 1
33055: NOT
33056: PUSH
33057: LD_VAR 0 2
33061: NOT
33062: OR
33063: IFFALSE 33067
// exit ;
33065: GO 33225
// x := GetX ( building ) ;
33067: LD_ADDR_VAR 0 5
33071: PUSH
33072: LD_VAR 0 2
33076: PPUSH
33077: CALL_OW 250
33081: ST_TO_ADDR
// y := GetY ( building ) ;
33082: LD_ADDR_VAR 0 6
33086: PUSH
33087: LD_VAR 0 2
33091: PPUSH
33092: CALL_OW 251
33096: ST_TO_ADDR
// for i = 0 to 5 do
33097: LD_ADDR_VAR 0 4
33101: PUSH
33102: DOUBLE
33103: LD_INT 0
33105: DEC
33106: ST_TO_ADDR
33107: LD_INT 5
33109: PUSH
33110: FOR_TO
33111: IFFALSE 33223
// begin _x := ShiftX ( x , i , 3 ) ;
33113: LD_ADDR_VAR 0 7
33117: PUSH
33118: LD_VAR 0 5
33122: PPUSH
33123: LD_VAR 0 4
33127: PPUSH
33128: LD_INT 3
33130: PPUSH
33131: CALL_OW 272
33135: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
33136: LD_ADDR_VAR 0 8
33140: PUSH
33141: LD_VAR 0 6
33145: PPUSH
33146: LD_VAR 0 4
33150: PPUSH
33151: LD_INT 3
33153: PPUSH
33154: CALL_OW 273
33158: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33159: LD_VAR 0 7
33163: PPUSH
33164: LD_VAR 0 8
33168: PPUSH
33169: CALL_OW 488
33173: NOT
33174: IFFALSE 33178
// continue ;
33176: GO 33110
// if HexInfo ( _x , _y ) = 0 then
33178: LD_VAR 0 7
33182: PPUSH
33183: LD_VAR 0 8
33187: PPUSH
33188: CALL_OW 428
33192: PUSH
33193: LD_INT 0
33195: EQUAL
33196: IFFALSE 33221
// begin ComMoveXY ( unit , _x , _y ) ;
33198: LD_VAR 0 1
33202: PPUSH
33203: LD_VAR 0 7
33207: PPUSH
33208: LD_VAR 0 8
33212: PPUSH
33213: CALL_OW 111
// exit ;
33217: POP
33218: POP
33219: GO 33225
// end ; end ;
33221: GO 33110
33223: POP
33224: POP
// end ;
33225: LD_VAR 0 3
33229: RET
// export function ScanBase ( side , base_area ) ; begin
33230: LD_INT 0
33232: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
33233: LD_ADDR_VAR 0 3
33237: PUSH
33238: LD_VAR 0 2
33242: PPUSH
33243: LD_INT 81
33245: PUSH
33246: LD_VAR 0 1
33250: PUSH
33251: EMPTY
33252: LIST
33253: LIST
33254: PPUSH
33255: CALL_OW 70
33259: ST_TO_ADDR
// end ;
33260: LD_VAR 0 3
33264: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33265: LD_INT 0
33267: PPUSH
33268: PPUSH
33269: PPUSH
33270: PPUSH
// result := false ;
33271: LD_ADDR_VAR 0 2
33275: PUSH
33276: LD_INT 0
33278: ST_TO_ADDR
// side := GetSide ( unit ) ;
33279: LD_ADDR_VAR 0 3
33283: PUSH
33284: LD_VAR 0 1
33288: PPUSH
33289: CALL_OW 255
33293: ST_TO_ADDR
// nat := GetNation ( unit ) ;
33294: LD_ADDR_VAR 0 4
33298: PUSH
33299: LD_VAR 0 1
33303: PPUSH
33304: CALL_OW 248
33308: ST_TO_ADDR
// case nat of 1 :
33309: LD_VAR 0 4
33313: PUSH
33314: LD_INT 1
33316: DOUBLE
33317: EQUAL
33318: IFTRUE 33322
33320: GO 33333
33322: POP
// tech := tech_lassight ; 2 :
33323: LD_ADDR_VAR 0 5
33327: PUSH
33328: LD_INT 12
33330: ST_TO_ADDR
33331: GO 33372
33333: LD_INT 2
33335: DOUBLE
33336: EQUAL
33337: IFTRUE 33341
33339: GO 33352
33341: POP
// tech := tech_mortar ; 3 :
33342: LD_ADDR_VAR 0 5
33346: PUSH
33347: LD_INT 41
33349: ST_TO_ADDR
33350: GO 33372
33352: LD_INT 3
33354: DOUBLE
33355: EQUAL
33356: IFTRUE 33360
33358: GO 33371
33360: POP
// tech := tech_bazooka ; end ;
33361: LD_ADDR_VAR 0 5
33365: PUSH
33366: LD_INT 44
33368: ST_TO_ADDR
33369: GO 33372
33371: POP
// if Researched ( side , tech ) then
33372: LD_VAR 0 3
33376: PPUSH
33377: LD_VAR 0 5
33381: PPUSH
33382: CALL_OW 325
33386: IFFALSE 33413
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33388: LD_ADDR_VAR 0 2
33392: PUSH
33393: LD_INT 5
33395: PUSH
33396: LD_INT 8
33398: PUSH
33399: LD_INT 9
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: LIST
33406: PUSH
33407: LD_VAR 0 4
33411: ARRAY
33412: ST_TO_ADDR
// end ;
33413: LD_VAR 0 2
33417: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33418: LD_INT 0
33420: PPUSH
33421: PPUSH
33422: PPUSH
// if not mines then
33423: LD_VAR 0 2
33427: NOT
33428: IFFALSE 33432
// exit ;
33430: GO 33576
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33432: LD_ADDR_VAR 0 5
33436: PUSH
33437: LD_INT 81
33439: PUSH
33440: LD_VAR 0 1
33444: PUSH
33445: EMPTY
33446: LIST
33447: LIST
33448: PUSH
33449: LD_INT 3
33451: PUSH
33452: LD_INT 21
33454: PUSH
33455: LD_INT 3
33457: PUSH
33458: EMPTY
33459: LIST
33460: LIST
33461: PUSH
33462: EMPTY
33463: LIST
33464: LIST
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PPUSH
33470: CALL_OW 69
33474: ST_TO_ADDR
// for i in mines do
33475: LD_ADDR_VAR 0 4
33479: PUSH
33480: LD_VAR 0 2
33484: PUSH
33485: FOR_IN
33486: IFFALSE 33574
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33488: LD_VAR 0 4
33492: PUSH
33493: LD_INT 1
33495: ARRAY
33496: PPUSH
33497: LD_VAR 0 4
33501: PUSH
33502: LD_INT 2
33504: ARRAY
33505: PPUSH
33506: CALL_OW 458
33510: NOT
33511: IFFALSE 33515
// continue ;
33513: GO 33485
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33515: LD_VAR 0 4
33519: PUSH
33520: LD_INT 1
33522: ARRAY
33523: PPUSH
33524: LD_VAR 0 4
33528: PUSH
33529: LD_INT 2
33531: ARRAY
33532: PPUSH
33533: CALL_OW 428
33537: PUSH
33538: LD_VAR 0 5
33542: IN
33543: IFFALSE 33572
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33545: LD_VAR 0 4
33549: PUSH
33550: LD_INT 1
33552: ARRAY
33553: PPUSH
33554: LD_VAR 0 4
33558: PUSH
33559: LD_INT 2
33561: ARRAY
33562: PPUSH
33563: LD_VAR 0 1
33567: PPUSH
33568: CALL_OW 456
// end ;
33572: GO 33485
33574: POP
33575: POP
// end ;
33576: LD_VAR 0 3
33580: RET
// export function Count ( array ) ; var i ; begin
33581: LD_INT 0
33583: PPUSH
33584: PPUSH
// result := 0 ;
33585: LD_ADDR_VAR 0 2
33589: PUSH
33590: LD_INT 0
33592: ST_TO_ADDR
// for i in array do
33593: LD_ADDR_VAR 0 3
33597: PUSH
33598: LD_VAR 0 1
33602: PUSH
33603: FOR_IN
33604: IFFALSE 33628
// if i then
33606: LD_VAR 0 3
33610: IFFALSE 33626
// result := result + 1 ;
33612: LD_ADDR_VAR 0 2
33616: PUSH
33617: LD_VAR 0 2
33621: PUSH
33622: LD_INT 1
33624: PLUS
33625: ST_TO_ADDR
33626: GO 33603
33628: POP
33629: POP
// end ;
33630: LD_VAR 0 2
33634: RET
// export function IsEmpty ( building ) ; begin
33635: LD_INT 0
33637: PPUSH
// if not building then
33638: LD_VAR 0 1
33642: NOT
33643: IFFALSE 33647
// exit ;
33645: GO 33690
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33647: LD_ADDR_VAR 0 2
33651: PUSH
33652: LD_VAR 0 1
33656: PUSH
33657: LD_INT 22
33659: PUSH
33660: LD_VAR 0 1
33664: PPUSH
33665: CALL_OW 255
33669: PUSH
33670: EMPTY
33671: LIST
33672: LIST
33673: PUSH
33674: LD_INT 58
33676: PUSH
33677: EMPTY
33678: LIST
33679: PUSH
33680: EMPTY
33681: LIST
33682: LIST
33683: PPUSH
33684: CALL_OW 69
33688: IN
33689: ST_TO_ADDR
// end ;
33690: LD_VAR 0 2
33694: RET
// export function IsNotFull ( building ) ; begin
33695: LD_INT 0
33697: PPUSH
// if not building then
33698: LD_VAR 0 1
33702: NOT
33703: IFFALSE 33707
// exit ;
33705: GO 33726
// result := UnitsInside ( building ) < 6 ;
33707: LD_ADDR_VAR 0 2
33711: PUSH
33712: LD_VAR 0 1
33716: PPUSH
33717: CALL_OW 313
33721: PUSH
33722: LD_INT 6
33724: LESS
33725: ST_TO_ADDR
// end ;
33726: LD_VAR 0 2
33730: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33731: LD_INT 0
33733: PPUSH
33734: PPUSH
33735: PPUSH
33736: PPUSH
// tmp := [ ] ;
33737: LD_ADDR_VAR 0 3
33741: PUSH
33742: EMPTY
33743: ST_TO_ADDR
// list := [ ] ;
33744: LD_ADDR_VAR 0 5
33748: PUSH
33749: EMPTY
33750: ST_TO_ADDR
// for i = 16 to 25 do
33751: LD_ADDR_VAR 0 4
33755: PUSH
33756: DOUBLE
33757: LD_INT 16
33759: DEC
33760: ST_TO_ADDR
33761: LD_INT 25
33763: PUSH
33764: FOR_TO
33765: IFFALSE 33838
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33767: LD_ADDR_VAR 0 3
33771: PUSH
33772: LD_VAR 0 3
33776: PUSH
33777: LD_INT 22
33779: PUSH
33780: LD_VAR 0 1
33784: PPUSH
33785: CALL_OW 255
33789: PUSH
33790: EMPTY
33791: LIST
33792: LIST
33793: PUSH
33794: LD_INT 91
33796: PUSH
33797: LD_VAR 0 1
33801: PUSH
33802: LD_INT 6
33804: PUSH
33805: EMPTY
33806: LIST
33807: LIST
33808: LIST
33809: PUSH
33810: LD_INT 30
33812: PUSH
33813: LD_VAR 0 4
33817: PUSH
33818: EMPTY
33819: LIST
33820: LIST
33821: PUSH
33822: EMPTY
33823: LIST
33824: LIST
33825: LIST
33826: PUSH
33827: EMPTY
33828: LIST
33829: PPUSH
33830: CALL_OW 69
33834: ADD
33835: ST_TO_ADDR
33836: GO 33764
33838: POP
33839: POP
// for i = 1 to tmp do
33840: LD_ADDR_VAR 0 4
33844: PUSH
33845: DOUBLE
33846: LD_INT 1
33848: DEC
33849: ST_TO_ADDR
33850: LD_VAR 0 3
33854: PUSH
33855: FOR_TO
33856: IFFALSE 33944
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33858: LD_ADDR_VAR 0 5
33862: PUSH
33863: LD_VAR 0 5
33867: PUSH
33868: LD_VAR 0 3
33872: PUSH
33873: LD_VAR 0 4
33877: ARRAY
33878: PPUSH
33879: CALL_OW 266
33883: PUSH
33884: LD_VAR 0 3
33888: PUSH
33889: LD_VAR 0 4
33893: ARRAY
33894: PPUSH
33895: CALL_OW 250
33899: PUSH
33900: LD_VAR 0 3
33904: PUSH
33905: LD_VAR 0 4
33909: ARRAY
33910: PPUSH
33911: CALL_OW 251
33915: PUSH
33916: LD_VAR 0 3
33920: PUSH
33921: LD_VAR 0 4
33925: ARRAY
33926: PPUSH
33927: CALL_OW 254
33931: PUSH
33932: EMPTY
33933: LIST
33934: LIST
33935: LIST
33936: LIST
33937: PUSH
33938: EMPTY
33939: LIST
33940: ADD
33941: ST_TO_ADDR
33942: GO 33855
33944: POP
33945: POP
// result := list ;
33946: LD_ADDR_VAR 0 2
33950: PUSH
33951: LD_VAR 0 5
33955: ST_TO_ADDR
// end ;
33956: LD_VAR 0 2
33960: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33961: LD_INT 0
33963: PPUSH
33964: PPUSH
33965: PPUSH
33966: PPUSH
33967: PPUSH
33968: PPUSH
33969: PPUSH
// if not factory then
33970: LD_VAR 0 1
33974: NOT
33975: IFFALSE 33979
// exit ;
33977: GO 34572
// if control = control_apeman then
33979: LD_VAR 0 4
33983: PUSH
33984: LD_INT 5
33986: EQUAL
33987: IFFALSE 34096
// begin tmp := UnitsInside ( factory ) ;
33989: LD_ADDR_VAR 0 8
33993: PUSH
33994: LD_VAR 0 1
33998: PPUSH
33999: CALL_OW 313
34003: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
34004: LD_VAR 0 8
34008: PPUSH
34009: LD_INT 25
34011: PUSH
34012: LD_INT 12
34014: PUSH
34015: EMPTY
34016: LIST
34017: LIST
34018: PPUSH
34019: CALL_OW 72
34023: NOT
34024: IFFALSE 34034
// control := control_manual ;
34026: LD_ADDR_VAR 0 4
34030: PUSH
34031: LD_INT 1
34033: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
34034: LD_ADDR_VAR 0 8
34038: PUSH
34039: LD_VAR 0 1
34043: PPUSH
34044: CALL 33731 0 1
34048: ST_TO_ADDR
// if tmp then
34049: LD_VAR 0 8
34053: IFFALSE 34096
// begin for i in tmp do
34055: LD_ADDR_VAR 0 7
34059: PUSH
34060: LD_VAR 0 8
34064: PUSH
34065: FOR_IN
34066: IFFALSE 34094
// if i [ 1 ] = b_ext_radio then
34068: LD_VAR 0 7
34072: PUSH
34073: LD_INT 1
34075: ARRAY
34076: PUSH
34077: LD_INT 22
34079: EQUAL
34080: IFFALSE 34092
// begin control := control_remote ;
34082: LD_ADDR_VAR 0 4
34086: PUSH
34087: LD_INT 2
34089: ST_TO_ADDR
// break ;
34090: GO 34094
// end ;
34092: GO 34065
34094: POP
34095: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34096: LD_VAR 0 1
34100: PPUSH
34101: LD_VAR 0 2
34105: PPUSH
34106: LD_VAR 0 3
34110: PPUSH
34111: LD_VAR 0 4
34115: PPUSH
34116: LD_VAR 0 5
34120: PPUSH
34121: CALL_OW 448
34125: IFFALSE 34160
// begin result := [ chassis , engine , control , weapon ] ;
34127: LD_ADDR_VAR 0 6
34131: PUSH
34132: LD_VAR 0 2
34136: PUSH
34137: LD_VAR 0 3
34141: PUSH
34142: LD_VAR 0 4
34146: PUSH
34147: LD_VAR 0 5
34151: PUSH
34152: EMPTY
34153: LIST
34154: LIST
34155: LIST
34156: LIST
34157: ST_TO_ADDR
// exit ;
34158: GO 34572
// end ; _chassis := AvailableChassisList ( factory ) ;
34160: LD_ADDR_VAR 0 9
34164: PUSH
34165: LD_VAR 0 1
34169: PPUSH
34170: CALL_OW 475
34174: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
34175: LD_ADDR_VAR 0 11
34179: PUSH
34180: LD_VAR 0 1
34184: PPUSH
34185: CALL_OW 476
34189: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
34190: LD_ADDR_VAR 0 12
34194: PUSH
34195: LD_VAR 0 1
34199: PPUSH
34200: CALL_OW 477
34204: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
34205: LD_ADDR_VAR 0 10
34209: PUSH
34210: LD_VAR 0 1
34214: PPUSH
34215: CALL_OW 478
34219: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
34220: LD_VAR 0 9
34224: NOT
34225: PUSH
34226: LD_VAR 0 11
34230: NOT
34231: OR
34232: PUSH
34233: LD_VAR 0 12
34237: NOT
34238: OR
34239: PUSH
34240: LD_VAR 0 10
34244: NOT
34245: OR
34246: IFFALSE 34281
// begin result := [ chassis , engine , control , weapon ] ;
34248: LD_ADDR_VAR 0 6
34252: PUSH
34253: LD_VAR 0 2
34257: PUSH
34258: LD_VAR 0 3
34262: PUSH
34263: LD_VAR 0 4
34267: PUSH
34268: LD_VAR 0 5
34272: PUSH
34273: EMPTY
34274: LIST
34275: LIST
34276: LIST
34277: LIST
34278: ST_TO_ADDR
// exit ;
34279: GO 34572
// end ; if not chassis in _chassis then
34281: LD_VAR 0 2
34285: PUSH
34286: LD_VAR 0 9
34290: IN
34291: NOT
34292: IFFALSE 34318
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
34294: LD_ADDR_VAR 0 2
34298: PUSH
34299: LD_VAR 0 9
34303: PUSH
34304: LD_INT 1
34306: PPUSH
34307: LD_VAR 0 9
34311: PPUSH
34312: CALL_OW 12
34316: ARRAY
34317: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
34318: LD_VAR 0 2
34322: PPUSH
34323: LD_VAR 0 3
34327: PPUSH
34328: CALL 34577 0 2
34332: NOT
34333: IFFALSE 34392
// repeat engine := _engine [ 1 ] ;
34335: LD_ADDR_VAR 0 3
34339: PUSH
34340: LD_VAR 0 11
34344: PUSH
34345: LD_INT 1
34347: ARRAY
34348: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
34349: LD_ADDR_VAR 0 11
34353: PUSH
34354: LD_VAR 0 11
34358: PPUSH
34359: LD_INT 1
34361: PPUSH
34362: CALL_OW 3
34366: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34367: LD_VAR 0 2
34371: PPUSH
34372: LD_VAR 0 3
34376: PPUSH
34377: CALL 34577 0 2
34381: PUSH
34382: LD_VAR 0 11
34386: PUSH
34387: EMPTY
34388: EQUAL
34389: OR
34390: IFFALSE 34335
// if not control in _control then
34392: LD_VAR 0 4
34396: PUSH
34397: LD_VAR 0 12
34401: IN
34402: NOT
34403: IFFALSE 34429
// control := _control [ rand ( 1 , _control ) ] ;
34405: LD_ADDR_VAR 0 4
34409: PUSH
34410: LD_VAR 0 12
34414: PUSH
34415: LD_INT 1
34417: PPUSH
34418: LD_VAR 0 12
34422: PPUSH
34423: CALL_OW 12
34427: ARRAY
34428: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34429: LD_VAR 0 2
34433: PPUSH
34434: LD_VAR 0 5
34438: PPUSH
34439: CALL 34797 0 2
34443: NOT
34444: IFFALSE 34503
// repeat weapon := _weapon [ 1 ] ;
34446: LD_ADDR_VAR 0 5
34450: PUSH
34451: LD_VAR 0 10
34455: PUSH
34456: LD_INT 1
34458: ARRAY
34459: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34460: LD_ADDR_VAR 0 10
34464: PUSH
34465: LD_VAR 0 10
34469: PPUSH
34470: LD_INT 1
34472: PPUSH
34473: CALL_OW 3
34477: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34478: LD_VAR 0 2
34482: PPUSH
34483: LD_VAR 0 5
34487: PPUSH
34488: CALL 34797 0 2
34492: PUSH
34493: LD_VAR 0 10
34497: PUSH
34498: EMPTY
34499: EQUAL
34500: OR
34501: IFFALSE 34446
// result := [ ] ;
34503: LD_ADDR_VAR 0 6
34507: PUSH
34508: EMPTY
34509: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34510: LD_VAR 0 1
34514: PPUSH
34515: LD_VAR 0 2
34519: PPUSH
34520: LD_VAR 0 3
34524: PPUSH
34525: LD_VAR 0 4
34529: PPUSH
34530: LD_VAR 0 5
34534: PPUSH
34535: CALL_OW 448
34539: IFFALSE 34572
// result := [ chassis , engine , control , weapon ] ;
34541: LD_ADDR_VAR 0 6
34545: PUSH
34546: LD_VAR 0 2
34550: PUSH
34551: LD_VAR 0 3
34555: PUSH
34556: LD_VAR 0 4
34560: PUSH
34561: LD_VAR 0 5
34565: PUSH
34566: EMPTY
34567: LIST
34568: LIST
34569: LIST
34570: LIST
34571: ST_TO_ADDR
// end ;
34572: LD_VAR 0 6
34576: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34577: LD_INT 0
34579: PPUSH
// if not chassis or not engine then
34580: LD_VAR 0 1
34584: NOT
34585: PUSH
34586: LD_VAR 0 2
34590: NOT
34591: OR
34592: IFFALSE 34596
// exit ;
34594: GO 34792
// case engine of engine_solar :
34596: LD_VAR 0 2
34600: PUSH
34601: LD_INT 2
34603: DOUBLE
34604: EQUAL
34605: IFTRUE 34609
34607: GO 34647
34609: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34610: LD_ADDR_VAR 0 3
34614: PUSH
34615: LD_INT 11
34617: PUSH
34618: LD_INT 12
34620: PUSH
34621: LD_INT 13
34623: PUSH
34624: LD_INT 14
34626: PUSH
34627: LD_INT 1
34629: PUSH
34630: LD_INT 2
34632: PUSH
34633: LD_INT 3
34635: PUSH
34636: EMPTY
34637: LIST
34638: LIST
34639: LIST
34640: LIST
34641: LIST
34642: LIST
34643: LIST
34644: ST_TO_ADDR
34645: GO 34776
34647: LD_INT 1
34649: DOUBLE
34650: EQUAL
34651: IFTRUE 34655
34653: GO 34717
34655: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34656: LD_ADDR_VAR 0 3
34660: PUSH
34661: LD_INT 11
34663: PUSH
34664: LD_INT 12
34666: PUSH
34667: LD_INT 13
34669: PUSH
34670: LD_INT 14
34672: PUSH
34673: LD_INT 1
34675: PUSH
34676: LD_INT 2
34678: PUSH
34679: LD_INT 3
34681: PUSH
34682: LD_INT 4
34684: PUSH
34685: LD_INT 5
34687: PUSH
34688: LD_INT 21
34690: PUSH
34691: LD_INT 23
34693: PUSH
34694: LD_INT 22
34696: PUSH
34697: LD_INT 24
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: LIST
34704: LIST
34705: LIST
34706: LIST
34707: LIST
34708: LIST
34709: LIST
34710: LIST
34711: LIST
34712: LIST
34713: LIST
34714: ST_TO_ADDR
34715: GO 34776
34717: LD_INT 3
34719: DOUBLE
34720: EQUAL
34721: IFTRUE 34725
34723: GO 34775
34725: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34726: LD_ADDR_VAR 0 3
34730: PUSH
34731: LD_INT 13
34733: PUSH
34734: LD_INT 14
34736: PUSH
34737: LD_INT 2
34739: PUSH
34740: LD_INT 3
34742: PUSH
34743: LD_INT 4
34745: PUSH
34746: LD_INT 5
34748: PUSH
34749: LD_INT 21
34751: PUSH
34752: LD_INT 22
34754: PUSH
34755: LD_INT 23
34757: PUSH
34758: LD_INT 24
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: LIST
34765: LIST
34766: LIST
34767: LIST
34768: LIST
34769: LIST
34770: LIST
34771: LIST
34772: ST_TO_ADDR
34773: GO 34776
34775: POP
// result := ( chassis in result ) ;
34776: LD_ADDR_VAR 0 3
34780: PUSH
34781: LD_VAR 0 1
34785: PUSH
34786: LD_VAR 0 3
34790: IN
34791: ST_TO_ADDR
// end ;
34792: LD_VAR 0 3
34796: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34797: LD_INT 0
34799: PPUSH
// if not chassis or not weapon then
34800: LD_VAR 0 1
34804: NOT
34805: PUSH
34806: LD_VAR 0 2
34810: NOT
34811: OR
34812: IFFALSE 34816
// exit ;
34814: GO 35842
// case weapon of us_machine_gun :
34816: LD_VAR 0 2
34820: PUSH
34821: LD_INT 2
34823: DOUBLE
34824: EQUAL
34825: IFTRUE 34829
34827: GO 34859
34829: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34830: LD_ADDR_VAR 0 3
34834: PUSH
34835: LD_INT 1
34837: PUSH
34838: LD_INT 2
34840: PUSH
34841: LD_INT 3
34843: PUSH
34844: LD_INT 4
34846: PUSH
34847: LD_INT 5
34849: PUSH
34850: EMPTY
34851: LIST
34852: LIST
34853: LIST
34854: LIST
34855: LIST
34856: ST_TO_ADDR
34857: GO 35826
34859: LD_INT 3
34861: DOUBLE
34862: EQUAL
34863: IFTRUE 34867
34865: GO 34897
34867: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34868: LD_ADDR_VAR 0 3
34872: PUSH
34873: LD_INT 1
34875: PUSH
34876: LD_INT 2
34878: PUSH
34879: LD_INT 3
34881: PUSH
34882: LD_INT 4
34884: PUSH
34885: LD_INT 5
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: LIST
34892: LIST
34893: LIST
34894: ST_TO_ADDR
34895: GO 35826
34897: LD_INT 11
34899: DOUBLE
34900: EQUAL
34901: IFTRUE 34905
34903: GO 34935
34905: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34906: LD_ADDR_VAR 0 3
34910: PUSH
34911: LD_INT 1
34913: PUSH
34914: LD_INT 2
34916: PUSH
34917: LD_INT 3
34919: PUSH
34920: LD_INT 4
34922: PUSH
34923: LD_INT 5
34925: PUSH
34926: EMPTY
34927: LIST
34928: LIST
34929: LIST
34930: LIST
34931: LIST
34932: ST_TO_ADDR
34933: GO 35826
34935: LD_INT 4
34937: DOUBLE
34938: EQUAL
34939: IFTRUE 34943
34941: GO 34969
34943: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34944: LD_ADDR_VAR 0 3
34948: PUSH
34949: LD_INT 2
34951: PUSH
34952: LD_INT 3
34954: PUSH
34955: LD_INT 4
34957: PUSH
34958: LD_INT 5
34960: PUSH
34961: EMPTY
34962: LIST
34963: LIST
34964: LIST
34965: LIST
34966: ST_TO_ADDR
34967: GO 35826
34969: LD_INT 5
34971: DOUBLE
34972: EQUAL
34973: IFTRUE 34977
34975: GO 35003
34977: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34978: LD_ADDR_VAR 0 3
34982: PUSH
34983: LD_INT 2
34985: PUSH
34986: LD_INT 3
34988: PUSH
34989: LD_INT 4
34991: PUSH
34992: LD_INT 5
34994: PUSH
34995: EMPTY
34996: LIST
34997: LIST
34998: LIST
34999: LIST
35000: ST_TO_ADDR
35001: GO 35826
35003: LD_INT 9
35005: DOUBLE
35006: EQUAL
35007: IFTRUE 35011
35009: GO 35037
35011: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
35012: LD_ADDR_VAR 0 3
35016: PUSH
35017: LD_INT 2
35019: PUSH
35020: LD_INT 3
35022: PUSH
35023: LD_INT 4
35025: PUSH
35026: LD_INT 5
35028: PUSH
35029: EMPTY
35030: LIST
35031: LIST
35032: LIST
35033: LIST
35034: ST_TO_ADDR
35035: GO 35826
35037: LD_INT 7
35039: DOUBLE
35040: EQUAL
35041: IFTRUE 35045
35043: GO 35071
35045: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
35046: LD_ADDR_VAR 0 3
35050: PUSH
35051: LD_INT 2
35053: PUSH
35054: LD_INT 3
35056: PUSH
35057: LD_INT 4
35059: PUSH
35060: LD_INT 5
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: LIST
35067: LIST
35068: ST_TO_ADDR
35069: GO 35826
35071: LD_INT 12
35073: DOUBLE
35074: EQUAL
35075: IFTRUE 35079
35077: GO 35105
35079: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
35080: LD_ADDR_VAR 0 3
35084: PUSH
35085: LD_INT 2
35087: PUSH
35088: LD_INT 3
35090: PUSH
35091: LD_INT 4
35093: PUSH
35094: LD_INT 5
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: LIST
35101: LIST
35102: ST_TO_ADDR
35103: GO 35826
35105: LD_INT 13
35107: DOUBLE
35108: EQUAL
35109: IFTRUE 35113
35111: GO 35139
35113: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
35114: LD_ADDR_VAR 0 3
35118: PUSH
35119: LD_INT 2
35121: PUSH
35122: LD_INT 3
35124: PUSH
35125: LD_INT 4
35127: PUSH
35128: LD_INT 5
35130: PUSH
35131: EMPTY
35132: LIST
35133: LIST
35134: LIST
35135: LIST
35136: ST_TO_ADDR
35137: GO 35826
35139: LD_INT 14
35141: DOUBLE
35142: EQUAL
35143: IFTRUE 35147
35145: GO 35165
35147: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
35148: LD_ADDR_VAR 0 3
35152: PUSH
35153: LD_INT 4
35155: PUSH
35156: LD_INT 5
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: ST_TO_ADDR
35163: GO 35826
35165: LD_INT 6
35167: DOUBLE
35168: EQUAL
35169: IFTRUE 35173
35171: GO 35191
35173: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
35174: LD_ADDR_VAR 0 3
35178: PUSH
35179: LD_INT 4
35181: PUSH
35182: LD_INT 5
35184: PUSH
35185: EMPTY
35186: LIST
35187: LIST
35188: ST_TO_ADDR
35189: GO 35826
35191: LD_INT 10
35193: DOUBLE
35194: EQUAL
35195: IFTRUE 35199
35197: GO 35217
35199: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
35200: LD_ADDR_VAR 0 3
35204: PUSH
35205: LD_INT 4
35207: PUSH
35208: LD_INT 5
35210: PUSH
35211: EMPTY
35212: LIST
35213: LIST
35214: ST_TO_ADDR
35215: GO 35826
35217: LD_INT 22
35219: DOUBLE
35220: EQUAL
35221: IFTRUE 35225
35223: GO 35251
35225: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
35226: LD_ADDR_VAR 0 3
35230: PUSH
35231: LD_INT 11
35233: PUSH
35234: LD_INT 12
35236: PUSH
35237: LD_INT 13
35239: PUSH
35240: LD_INT 14
35242: PUSH
35243: EMPTY
35244: LIST
35245: LIST
35246: LIST
35247: LIST
35248: ST_TO_ADDR
35249: GO 35826
35251: LD_INT 23
35253: DOUBLE
35254: EQUAL
35255: IFTRUE 35259
35257: GO 35285
35259: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
35260: LD_ADDR_VAR 0 3
35264: PUSH
35265: LD_INT 11
35267: PUSH
35268: LD_INT 12
35270: PUSH
35271: LD_INT 13
35273: PUSH
35274: LD_INT 14
35276: PUSH
35277: EMPTY
35278: LIST
35279: LIST
35280: LIST
35281: LIST
35282: ST_TO_ADDR
35283: GO 35826
35285: LD_INT 24
35287: DOUBLE
35288: EQUAL
35289: IFTRUE 35293
35291: GO 35319
35293: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
35294: LD_ADDR_VAR 0 3
35298: PUSH
35299: LD_INT 11
35301: PUSH
35302: LD_INT 12
35304: PUSH
35305: LD_INT 13
35307: PUSH
35308: LD_INT 14
35310: PUSH
35311: EMPTY
35312: LIST
35313: LIST
35314: LIST
35315: LIST
35316: ST_TO_ADDR
35317: GO 35826
35319: LD_INT 30
35321: DOUBLE
35322: EQUAL
35323: IFTRUE 35327
35325: GO 35353
35327: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
35328: LD_ADDR_VAR 0 3
35332: PUSH
35333: LD_INT 11
35335: PUSH
35336: LD_INT 12
35338: PUSH
35339: LD_INT 13
35341: PUSH
35342: LD_INT 14
35344: PUSH
35345: EMPTY
35346: LIST
35347: LIST
35348: LIST
35349: LIST
35350: ST_TO_ADDR
35351: GO 35826
35353: LD_INT 25
35355: DOUBLE
35356: EQUAL
35357: IFTRUE 35361
35359: GO 35379
35361: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
35362: LD_ADDR_VAR 0 3
35366: PUSH
35367: LD_INT 13
35369: PUSH
35370: LD_INT 14
35372: PUSH
35373: EMPTY
35374: LIST
35375: LIST
35376: ST_TO_ADDR
35377: GO 35826
35379: LD_INT 27
35381: DOUBLE
35382: EQUAL
35383: IFTRUE 35387
35385: GO 35405
35387: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35388: LD_ADDR_VAR 0 3
35392: PUSH
35393: LD_INT 13
35395: PUSH
35396: LD_INT 14
35398: PUSH
35399: EMPTY
35400: LIST
35401: LIST
35402: ST_TO_ADDR
35403: GO 35826
35405: LD_INT 28
35407: DOUBLE
35408: EQUAL
35409: IFTRUE 35413
35411: GO 35431
35413: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35414: LD_ADDR_VAR 0 3
35418: PUSH
35419: LD_INT 13
35421: PUSH
35422: LD_INT 14
35424: PUSH
35425: EMPTY
35426: LIST
35427: LIST
35428: ST_TO_ADDR
35429: GO 35826
35431: LD_INT 29
35433: DOUBLE
35434: EQUAL
35435: IFTRUE 35439
35437: GO 35457
35439: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35440: LD_ADDR_VAR 0 3
35444: PUSH
35445: LD_INT 13
35447: PUSH
35448: LD_INT 14
35450: PUSH
35451: EMPTY
35452: LIST
35453: LIST
35454: ST_TO_ADDR
35455: GO 35826
35457: LD_INT 31
35459: DOUBLE
35460: EQUAL
35461: IFTRUE 35465
35463: GO 35483
35465: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35466: LD_ADDR_VAR 0 3
35470: PUSH
35471: LD_INT 13
35473: PUSH
35474: LD_INT 14
35476: PUSH
35477: EMPTY
35478: LIST
35479: LIST
35480: ST_TO_ADDR
35481: GO 35826
35483: LD_INT 26
35485: DOUBLE
35486: EQUAL
35487: IFTRUE 35491
35489: GO 35509
35491: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35492: LD_ADDR_VAR 0 3
35496: PUSH
35497: LD_INT 13
35499: PUSH
35500: LD_INT 14
35502: PUSH
35503: EMPTY
35504: LIST
35505: LIST
35506: ST_TO_ADDR
35507: GO 35826
35509: LD_INT 42
35511: DOUBLE
35512: EQUAL
35513: IFTRUE 35517
35515: GO 35543
35517: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35518: LD_ADDR_VAR 0 3
35522: PUSH
35523: LD_INT 21
35525: PUSH
35526: LD_INT 22
35528: PUSH
35529: LD_INT 23
35531: PUSH
35532: LD_INT 24
35534: PUSH
35535: EMPTY
35536: LIST
35537: LIST
35538: LIST
35539: LIST
35540: ST_TO_ADDR
35541: GO 35826
35543: LD_INT 43
35545: DOUBLE
35546: EQUAL
35547: IFTRUE 35551
35549: GO 35577
35551: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35552: LD_ADDR_VAR 0 3
35556: PUSH
35557: LD_INT 21
35559: PUSH
35560: LD_INT 22
35562: PUSH
35563: LD_INT 23
35565: PUSH
35566: LD_INT 24
35568: PUSH
35569: EMPTY
35570: LIST
35571: LIST
35572: LIST
35573: LIST
35574: ST_TO_ADDR
35575: GO 35826
35577: LD_INT 44
35579: DOUBLE
35580: EQUAL
35581: IFTRUE 35585
35583: GO 35611
35585: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35586: LD_ADDR_VAR 0 3
35590: PUSH
35591: LD_INT 21
35593: PUSH
35594: LD_INT 22
35596: PUSH
35597: LD_INT 23
35599: PUSH
35600: LD_INT 24
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: LIST
35607: LIST
35608: ST_TO_ADDR
35609: GO 35826
35611: LD_INT 45
35613: DOUBLE
35614: EQUAL
35615: IFTRUE 35619
35617: GO 35645
35619: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35620: LD_ADDR_VAR 0 3
35624: PUSH
35625: LD_INT 21
35627: PUSH
35628: LD_INT 22
35630: PUSH
35631: LD_INT 23
35633: PUSH
35634: LD_INT 24
35636: PUSH
35637: EMPTY
35638: LIST
35639: LIST
35640: LIST
35641: LIST
35642: ST_TO_ADDR
35643: GO 35826
35645: LD_INT 49
35647: DOUBLE
35648: EQUAL
35649: IFTRUE 35653
35651: GO 35679
35653: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35654: LD_ADDR_VAR 0 3
35658: PUSH
35659: LD_INT 21
35661: PUSH
35662: LD_INT 22
35664: PUSH
35665: LD_INT 23
35667: PUSH
35668: LD_INT 24
35670: PUSH
35671: EMPTY
35672: LIST
35673: LIST
35674: LIST
35675: LIST
35676: ST_TO_ADDR
35677: GO 35826
35679: LD_INT 51
35681: DOUBLE
35682: EQUAL
35683: IFTRUE 35687
35685: GO 35713
35687: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35688: LD_ADDR_VAR 0 3
35692: PUSH
35693: LD_INT 21
35695: PUSH
35696: LD_INT 22
35698: PUSH
35699: LD_INT 23
35701: PUSH
35702: LD_INT 24
35704: PUSH
35705: EMPTY
35706: LIST
35707: LIST
35708: LIST
35709: LIST
35710: ST_TO_ADDR
35711: GO 35826
35713: LD_INT 52
35715: DOUBLE
35716: EQUAL
35717: IFTRUE 35721
35719: GO 35747
35721: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35722: LD_ADDR_VAR 0 3
35726: PUSH
35727: LD_INT 21
35729: PUSH
35730: LD_INT 22
35732: PUSH
35733: LD_INT 23
35735: PUSH
35736: LD_INT 24
35738: PUSH
35739: EMPTY
35740: LIST
35741: LIST
35742: LIST
35743: LIST
35744: ST_TO_ADDR
35745: GO 35826
35747: LD_INT 53
35749: DOUBLE
35750: EQUAL
35751: IFTRUE 35755
35753: GO 35773
35755: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35756: LD_ADDR_VAR 0 3
35760: PUSH
35761: LD_INT 23
35763: PUSH
35764: LD_INT 24
35766: PUSH
35767: EMPTY
35768: LIST
35769: LIST
35770: ST_TO_ADDR
35771: GO 35826
35773: LD_INT 46
35775: DOUBLE
35776: EQUAL
35777: IFTRUE 35781
35779: GO 35799
35781: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35782: LD_ADDR_VAR 0 3
35786: PUSH
35787: LD_INT 23
35789: PUSH
35790: LD_INT 24
35792: PUSH
35793: EMPTY
35794: LIST
35795: LIST
35796: ST_TO_ADDR
35797: GO 35826
35799: LD_INT 47
35801: DOUBLE
35802: EQUAL
35803: IFTRUE 35807
35805: GO 35825
35807: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35808: LD_ADDR_VAR 0 3
35812: PUSH
35813: LD_INT 23
35815: PUSH
35816: LD_INT 24
35818: PUSH
35819: EMPTY
35820: LIST
35821: LIST
35822: ST_TO_ADDR
35823: GO 35826
35825: POP
// result := ( chassis in result ) ;
35826: LD_ADDR_VAR 0 3
35830: PUSH
35831: LD_VAR 0 1
35835: PUSH
35836: LD_VAR 0 3
35840: IN
35841: ST_TO_ADDR
// end ;
35842: LD_VAR 0 3
35846: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35847: LD_INT 0
35849: PPUSH
35850: PPUSH
35851: PPUSH
35852: PPUSH
35853: PPUSH
35854: PPUSH
35855: PPUSH
// result := array ;
35856: LD_ADDR_VAR 0 5
35860: PUSH
35861: LD_VAR 0 1
35865: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35866: LD_VAR 0 1
35870: NOT
35871: PUSH
35872: LD_VAR 0 2
35876: NOT
35877: OR
35878: PUSH
35879: LD_VAR 0 3
35883: NOT
35884: OR
35885: PUSH
35886: LD_VAR 0 2
35890: PUSH
35891: LD_VAR 0 1
35895: GREATER
35896: OR
35897: PUSH
35898: LD_VAR 0 3
35902: PUSH
35903: LD_VAR 0 1
35907: GREATER
35908: OR
35909: IFFALSE 35913
// exit ;
35911: GO 36209
// if direction then
35913: LD_VAR 0 4
35917: IFFALSE 35981
// begin d := 1 ;
35919: LD_ADDR_VAR 0 9
35923: PUSH
35924: LD_INT 1
35926: ST_TO_ADDR
// if i_from > i_to then
35927: LD_VAR 0 2
35931: PUSH
35932: LD_VAR 0 3
35936: GREATER
35937: IFFALSE 35963
// length := ( array - i_from ) + i_to else
35939: LD_ADDR_VAR 0 11
35943: PUSH
35944: LD_VAR 0 1
35948: PUSH
35949: LD_VAR 0 2
35953: MINUS
35954: PUSH
35955: LD_VAR 0 3
35959: PLUS
35960: ST_TO_ADDR
35961: GO 35979
// length := i_to - i_from ;
35963: LD_ADDR_VAR 0 11
35967: PUSH
35968: LD_VAR 0 3
35972: PUSH
35973: LD_VAR 0 2
35977: MINUS
35978: ST_TO_ADDR
// end else
35979: GO 36042
// begin d := - 1 ;
35981: LD_ADDR_VAR 0 9
35985: PUSH
35986: LD_INT 1
35988: NEG
35989: ST_TO_ADDR
// if i_from > i_to then
35990: LD_VAR 0 2
35994: PUSH
35995: LD_VAR 0 3
35999: GREATER
36000: IFFALSE 36020
// length := i_from - i_to else
36002: LD_ADDR_VAR 0 11
36006: PUSH
36007: LD_VAR 0 2
36011: PUSH
36012: LD_VAR 0 3
36016: MINUS
36017: ST_TO_ADDR
36018: GO 36042
// length := ( array - i_to ) + i_from ;
36020: LD_ADDR_VAR 0 11
36024: PUSH
36025: LD_VAR 0 1
36029: PUSH
36030: LD_VAR 0 3
36034: MINUS
36035: PUSH
36036: LD_VAR 0 2
36040: PLUS
36041: ST_TO_ADDR
// end ; if not length then
36042: LD_VAR 0 11
36046: NOT
36047: IFFALSE 36051
// exit ;
36049: GO 36209
// tmp := array ;
36051: LD_ADDR_VAR 0 10
36055: PUSH
36056: LD_VAR 0 1
36060: ST_TO_ADDR
// for i = 1 to length do
36061: LD_ADDR_VAR 0 6
36065: PUSH
36066: DOUBLE
36067: LD_INT 1
36069: DEC
36070: ST_TO_ADDR
36071: LD_VAR 0 11
36075: PUSH
36076: FOR_TO
36077: IFFALSE 36197
// begin for j = 1 to array do
36079: LD_ADDR_VAR 0 7
36083: PUSH
36084: DOUBLE
36085: LD_INT 1
36087: DEC
36088: ST_TO_ADDR
36089: LD_VAR 0 1
36093: PUSH
36094: FOR_TO
36095: IFFALSE 36183
// begin k := j + d ;
36097: LD_ADDR_VAR 0 8
36101: PUSH
36102: LD_VAR 0 7
36106: PUSH
36107: LD_VAR 0 9
36111: PLUS
36112: ST_TO_ADDR
// if k > array then
36113: LD_VAR 0 8
36117: PUSH
36118: LD_VAR 0 1
36122: GREATER
36123: IFFALSE 36133
// k := 1 ;
36125: LD_ADDR_VAR 0 8
36129: PUSH
36130: LD_INT 1
36132: ST_TO_ADDR
// if not k then
36133: LD_VAR 0 8
36137: NOT
36138: IFFALSE 36150
// k := array ;
36140: LD_ADDR_VAR 0 8
36144: PUSH
36145: LD_VAR 0 1
36149: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
36150: LD_ADDR_VAR 0 10
36154: PUSH
36155: LD_VAR 0 10
36159: PPUSH
36160: LD_VAR 0 8
36164: PPUSH
36165: LD_VAR 0 1
36169: PUSH
36170: LD_VAR 0 7
36174: ARRAY
36175: PPUSH
36176: CALL_OW 1
36180: ST_TO_ADDR
// end ;
36181: GO 36094
36183: POP
36184: POP
// array := tmp ;
36185: LD_ADDR_VAR 0 1
36189: PUSH
36190: LD_VAR 0 10
36194: ST_TO_ADDR
// end ;
36195: GO 36076
36197: POP
36198: POP
// result := array ;
36199: LD_ADDR_VAR 0 5
36203: PUSH
36204: LD_VAR 0 1
36208: ST_TO_ADDR
// end ;
36209: LD_VAR 0 5
36213: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
36214: LD_INT 0
36216: PPUSH
36217: PPUSH
// result := 0 ;
36218: LD_ADDR_VAR 0 3
36222: PUSH
36223: LD_INT 0
36225: ST_TO_ADDR
// if not array or not value in array then
36226: LD_VAR 0 1
36230: NOT
36231: PUSH
36232: LD_VAR 0 2
36236: PUSH
36237: LD_VAR 0 1
36241: IN
36242: NOT
36243: OR
36244: IFFALSE 36248
// exit ;
36246: GO 36302
// for i = 1 to array do
36248: LD_ADDR_VAR 0 4
36252: PUSH
36253: DOUBLE
36254: LD_INT 1
36256: DEC
36257: ST_TO_ADDR
36258: LD_VAR 0 1
36262: PUSH
36263: FOR_TO
36264: IFFALSE 36300
// if value = array [ i ] then
36266: LD_VAR 0 2
36270: PUSH
36271: LD_VAR 0 1
36275: PUSH
36276: LD_VAR 0 4
36280: ARRAY
36281: EQUAL
36282: IFFALSE 36298
// begin result := i ;
36284: LD_ADDR_VAR 0 3
36288: PUSH
36289: LD_VAR 0 4
36293: ST_TO_ADDR
// exit ;
36294: POP
36295: POP
36296: GO 36302
// end ;
36298: GO 36263
36300: POP
36301: POP
// end ;
36302: LD_VAR 0 3
36306: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
36307: LD_INT 0
36309: PPUSH
// vc_chassis := chassis ;
36310: LD_ADDR_OWVAR 37
36314: PUSH
36315: LD_VAR 0 1
36319: ST_TO_ADDR
// vc_engine := engine ;
36320: LD_ADDR_OWVAR 39
36324: PUSH
36325: LD_VAR 0 2
36329: ST_TO_ADDR
// vc_control := control ;
36330: LD_ADDR_OWVAR 38
36334: PUSH
36335: LD_VAR 0 3
36339: ST_TO_ADDR
// vc_weapon := weapon ;
36340: LD_ADDR_OWVAR 40
36344: PUSH
36345: LD_VAR 0 4
36349: ST_TO_ADDR
// vc_fuel_battery := fuel ;
36350: LD_ADDR_OWVAR 41
36354: PUSH
36355: LD_VAR 0 5
36359: ST_TO_ADDR
// end ;
36360: LD_VAR 0 6
36364: RET
// export function WantPlant ( unit ) ; var task ; begin
36365: LD_INT 0
36367: PPUSH
36368: PPUSH
// result := false ;
36369: LD_ADDR_VAR 0 2
36373: PUSH
36374: LD_INT 0
36376: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36377: LD_ADDR_VAR 0 3
36381: PUSH
36382: LD_VAR 0 1
36386: PPUSH
36387: CALL_OW 437
36391: ST_TO_ADDR
// if task then
36392: LD_VAR 0 3
36396: IFFALSE 36424
// if task [ 1 ] [ 1 ] = p then
36398: LD_VAR 0 3
36402: PUSH
36403: LD_INT 1
36405: ARRAY
36406: PUSH
36407: LD_INT 1
36409: ARRAY
36410: PUSH
36411: LD_STRING p
36413: EQUAL
36414: IFFALSE 36424
// result := true ;
36416: LD_ADDR_VAR 0 2
36420: PUSH
36421: LD_INT 1
36423: ST_TO_ADDR
// end ;
36424: LD_VAR 0 2
36428: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36429: LD_INT 0
36431: PPUSH
36432: PPUSH
36433: PPUSH
36434: PPUSH
// if pos < 1 then
36435: LD_VAR 0 2
36439: PUSH
36440: LD_INT 1
36442: LESS
36443: IFFALSE 36447
// exit ;
36445: GO 36750
// if pos = 1 then
36447: LD_VAR 0 2
36451: PUSH
36452: LD_INT 1
36454: EQUAL
36455: IFFALSE 36488
// result := Replace ( arr , pos [ 1 ] , value ) else
36457: LD_ADDR_VAR 0 4
36461: PUSH
36462: LD_VAR 0 1
36466: PPUSH
36467: LD_VAR 0 2
36471: PUSH
36472: LD_INT 1
36474: ARRAY
36475: PPUSH
36476: LD_VAR 0 3
36480: PPUSH
36481: CALL_OW 1
36485: ST_TO_ADDR
36486: GO 36750
// begin tmp := arr ;
36488: LD_ADDR_VAR 0 6
36492: PUSH
36493: LD_VAR 0 1
36497: ST_TO_ADDR
// s_arr := [ tmp ] ;
36498: LD_ADDR_VAR 0 7
36502: PUSH
36503: LD_VAR 0 6
36507: PUSH
36508: EMPTY
36509: LIST
36510: ST_TO_ADDR
// for i = 1 to pos - 1 do
36511: LD_ADDR_VAR 0 5
36515: PUSH
36516: DOUBLE
36517: LD_INT 1
36519: DEC
36520: ST_TO_ADDR
36521: LD_VAR 0 2
36525: PUSH
36526: LD_INT 1
36528: MINUS
36529: PUSH
36530: FOR_TO
36531: IFFALSE 36576
// begin tmp := tmp [ pos [ i ] ] ;
36533: LD_ADDR_VAR 0 6
36537: PUSH
36538: LD_VAR 0 6
36542: PUSH
36543: LD_VAR 0 2
36547: PUSH
36548: LD_VAR 0 5
36552: ARRAY
36553: ARRAY
36554: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36555: LD_ADDR_VAR 0 7
36559: PUSH
36560: LD_VAR 0 7
36564: PUSH
36565: LD_VAR 0 6
36569: PUSH
36570: EMPTY
36571: LIST
36572: ADD
36573: ST_TO_ADDR
// end ;
36574: GO 36530
36576: POP
36577: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36578: LD_ADDR_VAR 0 6
36582: PUSH
36583: LD_VAR 0 6
36587: PPUSH
36588: LD_VAR 0 2
36592: PUSH
36593: LD_VAR 0 2
36597: ARRAY
36598: PPUSH
36599: LD_VAR 0 3
36603: PPUSH
36604: CALL_OW 1
36608: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36609: LD_ADDR_VAR 0 7
36613: PUSH
36614: LD_VAR 0 7
36618: PPUSH
36619: LD_VAR 0 7
36623: PPUSH
36624: LD_VAR 0 6
36628: PPUSH
36629: CALL_OW 1
36633: ST_TO_ADDR
// for i = s_arr downto 2 do
36634: LD_ADDR_VAR 0 5
36638: PUSH
36639: DOUBLE
36640: LD_VAR 0 7
36644: INC
36645: ST_TO_ADDR
36646: LD_INT 2
36648: PUSH
36649: FOR_DOWNTO
36650: IFFALSE 36734
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36652: LD_ADDR_VAR 0 6
36656: PUSH
36657: LD_VAR 0 7
36661: PUSH
36662: LD_VAR 0 5
36666: PUSH
36667: LD_INT 1
36669: MINUS
36670: ARRAY
36671: PPUSH
36672: LD_VAR 0 2
36676: PUSH
36677: LD_VAR 0 5
36681: PUSH
36682: LD_INT 1
36684: MINUS
36685: ARRAY
36686: PPUSH
36687: LD_VAR 0 7
36691: PUSH
36692: LD_VAR 0 5
36696: ARRAY
36697: PPUSH
36698: CALL_OW 1
36702: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36703: LD_ADDR_VAR 0 7
36707: PUSH
36708: LD_VAR 0 7
36712: PPUSH
36713: LD_VAR 0 5
36717: PUSH
36718: LD_INT 1
36720: MINUS
36721: PPUSH
36722: LD_VAR 0 6
36726: PPUSH
36727: CALL_OW 1
36731: ST_TO_ADDR
// end ;
36732: GO 36649
36734: POP
36735: POP
// result := s_arr [ 1 ] ;
36736: LD_ADDR_VAR 0 4
36740: PUSH
36741: LD_VAR 0 7
36745: PUSH
36746: LD_INT 1
36748: ARRAY
36749: ST_TO_ADDR
// end ; end ;
36750: LD_VAR 0 4
36754: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36755: LD_INT 0
36757: PPUSH
36758: PPUSH
// if not list then
36759: LD_VAR 0 1
36763: NOT
36764: IFFALSE 36768
// exit ;
36766: GO 36859
// i := list [ pos1 ] ;
36768: LD_ADDR_VAR 0 5
36772: PUSH
36773: LD_VAR 0 1
36777: PUSH
36778: LD_VAR 0 2
36782: ARRAY
36783: ST_TO_ADDR
// if not i then
36784: LD_VAR 0 5
36788: NOT
36789: IFFALSE 36793
// exit ;
36791: GO 36859
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36793: LD_ADDR_VAR 0 1
36797: PUSH
36798: LD_VAR 0 1
36802: PPUSH
36803: LD_VAR 0 2
36807: PPUSH
36808: LD_VAR 0 1
36812: PUSH
36813: LD_VAR 0 3
36817: ARRAY
36818: PPUSH
36819: CALL_OW 1
36823: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36824: LD_ADDR_VAR 0 1
36828: PUSH
36829: LD_VAR 0 1
36833: PPUSH
36834: LD_VAR 0 3
36838: PPUSH
36839: LD_VAR 0 5
36843: PPUSH
36844: CALL_OW 1
36848: ST_TO_ADDR
// result := list ;
36849: LD_ADDR_VAR 0 4
36853: PUSH
36854: LD_VAR 0 1
36858: ST_TO_ADDR
// end ;
36859: LD_VAR 0 4
36863: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36864: LD_INT 0
36866: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36867: LD_ADDR_VAR 0 5
36871: PUSH
36872: LD_VAR 0 1
36876: PPUSH
36877: CALL_OW 250
36881: PPUSH
36882: LD_VAR 0 1
36886: PPUSH
36887: CALL_OW 251
36891: PPUSH
36892: LD_VAR 0 2
36896: PPUSH
36897: LD_VAR 0 3
36901: PPUSH
36902: LD_VAR 0 4
36906: PPUSH
36907: CALL 36917 0 5
36911: ST_TO_ADDR
// end ;
36912: LD_VAR 0 5
36916: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36917: LD_INT 0
36919: PPUSH
36920: PPUSH
36921: PPUSH
36922: PPUSH
// if not list then
36923: LD_VAR 0 3
36927: NOT
36928: IFFALSE 36932
// exit ;
36930: GO 37320
// result := [ ] ;
36932: LD_ADDR_VAR 0 6
36936: PUSH
36937: EMPTY
36938: ST_TO_ADDR
// for i in list do
36939: LD_ADDR_VAR 0 7
36943: PUSH
36944: LD_VAR 0 3
36948: PUSH
36949: FOR_IN
36950: IFFALSE 37152
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36952: LD_ADDR_VAR 0 9
36956: PUSH
36957: LD_VAR 0 7
36961: PPUSH
36962: LD_VAR 0 1
36966: PPUSH
36967: LD_VAR 0 2
36971: PPUSH
36972: CALL_OW 297
36976: ST_TO_ADDR
// if not result then
36977: LD_VAR 0 6
36981: NOT
36982: IFFALSE 37008
// result := [ [ i , tmp ] ] else
36984: LD_ADDR_VAR 0 6
36988: PUSH
36989: LD_VAR 0 7
36993: PUSH
36994: LD_VAR 0 9
36998: PUSH
36999: EMPTY
37000: LIST
37001: LIST
37002: PUSH
37003: EMPTY
37004: LIST
37005: ST_TO_ADDR
37006: GO 37150
// begin if result [ result ] [ 2 ] < tmp then
37008: LD_VAR 0 6
37012: PUSH
37013: LD_VAR 0 6
37017: ARRAY
37018: PUSH
37019: LD_INT 2
37021: ARRAY
37022: PUSH
37023: LD_VAR 0 9
37027: LESS
37028: IFFALSE 37070
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37030: LD_ADDR_VAR 0 6
37034: PUSH
37035: LD_VAR 0 6
37039: PPUSH
37040: LD_VAR 0 6
37044: PUSH
37045: LD_INT 1
37047: PLUS
37048: PPUSH
37049: LD_VAR 0 7
37053: PUSH
37054: LD_VAR 0 9
37058: PUSH
37059: EMPTY
37060: LIST
37061: LIST
37062: PPUSH
37063: CALL_OW 2
37067: ST_TO_ADDR
37068: GO 37150
// for j = 1 to result do
37070: LD_ADDR_VAR 0 8
37074: PUSH
37075: DOUBLE
37076: LD_INT 1
37078: DEC
37079: ST_TO_ADDR
37080: LD_VAR 0 6
37084: PUSH
37085: FOR_TO
37086: IFFALSE 37148
// begin if tmp < result [ j ] [ 2 ] then
37088: LD_VAR 0 9
37092: PUSH
37093: LD_VAR 0 6
37097: PUSH
37098: LD_VAR 0 8
37102: ARRAY
37103: PUSH
37104: LD_INT 2
37106: ARRAY
37107: LESS
37108: IFFALSE 37146
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37110: LD_ADDR_VAR 0 6
37114: PUSH
37115: LD_VAR 0 6
37119: PPUSH
37120: LD_VAR 0 8
37124: PPUSH
37125: LD_VAR 0 7
37129: PUSH
37130: LD_VAR 0 9
37134: PUSH
37135: EMPTY
37136: LIST
37137: LIST
37138: PPUSH
37139: CALL_OW 2
37143: ST_TO_ADDR
// break ;
37144: GO 37148
// end ; end ;
37146: GO 37085
37148: POP
37149: POP
// end ; end ;
37150: GO 36949
37152: POP
37153: POP
// if result and not asc then
37154: LD_VAR 0 6
37158: PUSH
37159: LD_VAR 0 4
37163: NOT
37164: AND
37165: IFFALSE 37240
// begin tmp := result ;
37167: LD_ADDR_VAR 0 9
37171: PUSH
37172: LD_VAR 0 6
37176: ST_TO_ADDR
// for i = tmp downto 1 do
37177: LD_ADDR_VAR 0 7
37181: PUSH
37182: DOUBLE
37183: LD_VAR 0 9
37187: INC
37188: ST_TO_ADDR
37189: LD_INT 1
37191: PUSH
37192: FOR_DOWNTO
37193: IFFALSE 37238
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
37195: LD_ADDR_VAR 0 6
37199: PUSH
37200: LD_VAR 0 6
37204: PPUSH
37205: LD_VAR 0 9
37209: PUSH
37210: LD_VAR 0 7
37214: MINUS
37215: PUSH
37216: LD_INT 1
37218: PLUS
37219: PPUSH
37220: LD_VAR 0 9
37224: PUSH
37225: LD_VAR 0 7
37229: ARRAY
37230: PPUSH
37231: CALL_OW 1
37235: ST_TO_ADDR
37236: GO 37192
37238: POP
37239: POP
// end ; tmp := [ ] ;
37240: LD_ADDR_VAR 0 9
37244: PUSH
37245: EMPTY
37246: ST_TO_ADDR
// if mode then
37247: LD_VAR 0 5
37251: IFFALSE 37320
// begin for i = 1 to result do
37253: LD_ADDR_VAR 0 7
37257: PUSH
37258: DOUBLE
37259: LD_INT 1
37261: DEC
37262: ST_TO_ADDR
37263: LD_VAR 0 6
37267: PUSH
37268: FOR_TO
37269: IFFALSE 37308
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
37271: LD_ADDR_VAR 0 9
37275: PUSH
37276: LD_VAR 0 9
37280: PPUSH
37281: LD_VAR 0 7
37285: PPUSH
37286: LD_VAR 0 6
37290: PUSH
37291: LD_VAR 0 7
37295: ARRAY
37296: PUSH
37297: LD_INT 1
37299: ARRAY
37300: PPUSH
37301: CALL_OW 1
37305: ST_TO_ADDR
37306: GO 37268
37308: POP
37309: POP
// result := tmp ;
37310: LD_ADDR_VAR 0 6
37314: PUSH
37315: LD_VAR 0 9
37319: ST_TO_ADDR
// end ; end ;
37320: LD_VAR 0 6
37324: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
37325: LD_INT 0
37327: PPUSH
37328: PPUSH
37329: PPUSH
37330: PPUSH
37331: PPUSH
37332: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
37333: LD_ADDR_VAR 0 5
37337: PUSH
37338: LD_INT 0
37340: PUSH
37341: LD_INT 0
37343: PUSH
37344: LD_INT 0
37346: PUSH
37347: EMPTY
37348: PUSH
37349: EMPTY
37350: LIST
37351: LIST
37352: LIST
37353: LIST
37354: ST_TO_ADDR
// if not x or not y then
37355: LD_VAR 0 2
37359: NOT
37360: PUSH
37361: LD_VAR 0 3
37365: NOT
37366: OR
37367: IFFALSE 37371
// exit ;
37369: GO 39017
// if not range then
37371: LD_VAR 0 4
37375: NOT
37376: IFFALSE 37386
// range := 10 ;
37378: LD_ADDR_VAR 0 4
37382: PUSH
37383: LD_INT 10
37385: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37386: LD_ADDR_VAR 0 8
37390: PUSH
37391: LD_INT 81
37393: PUSH
37394: LD_VAR 0 1
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: PUSH
37403: LD_INT 92
37405: PUSH
37406: LD_VAR 0 2
37410: PUSH
37411: LD_VAR 0 3
37415: PUSH
37416: LD_VAR 0 4
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: LIST
37425: LIST
37426: PUSH
37427: LD_INT 3
37429: PUSH
37430: LD_INT 21
37432: PUSH
37433: LD_INT 3
37435: PUSH
37436: EMPTY
37437: LIST
37438: LIST
37439: PUSH
37440: EMPTY
37441: LIST
37442: LIST
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: LIST
37448: PPUSH
37449: CALL_OW 69
37453: ST_TO_ADDR
// if not tmp then
37454: LD_VAR 0 8
37458: NOT
37459: IFFALSE 37463
// exit ;
37461: GO 39017
// for i in tmp do
37463: LD_ADDR_VAR 0 6
37467: PUSH
37468: LD_VAR 0 8
37472: PUSH
37473: FOR_IN
37474: IFFALSE 38992
// begin points := [ 0 , 0 , 0 ] ;
37476: LD_ADDR_VAR 0 9
37480: PUSH
37481: LD_INT 0
37483: PUSH
37484: LD_INT 0
37486: PUSH
37487: LD_INT 0
37489: PUSH
37490: EMPTY
37491: LIST
37492: LIST
37493: LIST
37494: ST_TO_ADDR
// bpoints := 1 ;
37495: LD_ADDR_VAR 0 10
37499: PUSH
37500: LD_INT 1
37502: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37503: LD_VAR 0 6
37507: PPUSH
37508: CALL_OW 247
37512: PUSH
37513: LD_INT 1
37515: DOUBLE
37516: EQUAL
37517: IFTRUE 37521
37519: GO 38099
37521: POP
// begin if GetClass ( i ) = 1 then
37522: LD_VAR 0 6
37526: PPUSH
37527: CALL_OW 257
37531: PUSH
37532: LD_INT 1
37534: EQUAL
37535: IFFALSE 37556
// points := [ 10 , 5 , 3 ] ;
37537: LD_ADDR_VAR 0 9
37541: PUSH
37542: LD_INT 10
37544: PUSH
37545: LD_INT 5
37547: PUSH
37548: LD_INT 3
37550: PUSH
37551: EMPTY
37552: LIST
37553: LIST
37554: LIST
37555: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37556: LD_VAR 0 6
37560: PPUSH
37561: CALL_OW 257
37565: PUSH
37566: LD_INT 2
37568: PUSH
37569: LD_INT 3
37571: PUSH
37572: LD_INT 4
37574: PUSH
37575: EMPTY
37576: LIST
37577: LIST
37578: LIST
37579: IN
37580: IFFALSE 37601
// points := [ 3 , 2 , 1 ] ;
37582: LD_ADDR_VAR 0 9
37586: PUSH
37587: LD_INT 3
37589: PUSH
37590: LD_INT 2
37592: PUSH
37593: LD_INT 1
37595: PUSH
37596: EMPTY
37597: LIST
37598: LIST
37599: LIST
37600: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37601: LD_VAR 0 6
37605: PPUSH
37606: CALL_OW 257
37610: PUSH
37611: LD_INT 5
37613: EQUAL
37614: IFFALSE 37635
// points := [ 130 , 5 , 2 ] ;
37616: LD_ADDR_VAR 0 9
37620: PUSH
37621: LD_INT 130
37623: PUSH
37624: LD_INT 5
37626: PUSH
37627: LD_INT 2
37629: PUSH
37630: EMPTY
37631: LIST
37632: LIST
37633: LIST
37634: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37635: LD_VAR 0 6
37639: PPUSH
37640: CALL_OW 257
37644: PUSH
37645: LD_INT 8
37647: EQUAL
37648: IFFALSE 37669
// points := [ 35 , 35 , 30 ] ;
37650: LD_ADDR_VAR 0 9
37654: PUSH
37655: LD_INT 35
37657: PUSH
37658: LD_INT 35
37660: PUSH
37661: LD_INT 30
37663: PUSH
37664: EMPTY
37665: LIST
37666: LIST
37667: LIST
37668: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37669: LD_VAR 0 6
37673: PPUSH
37674: CALL_OW 257
37678: PUSH
37679: LD_INT 9
37681: EQUAL
37682: IFFALSE 37703
// points := [ 20 , 55 , 40 ] ;
37684: LD_ADDR_VAR 0 9
37688: PUSH
37689: LD_INT 20
37691: PUSH
37692: LD_INT 55
37694: PUSH
37695: LD_INT 40
37697: PUSH
37698: EMPTY
37699: LIST
37700: LIST
37701: LIST
37702: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37703: LD_VAR 0 6
37707: PPUSH
37708: CALL_OW 257
37712: PUSH
37713: LD_INT 12
37715: PUSH
37716: LD_INT 16
37718: PUSH
37719: EMPTY
37720: LIST
37721: LIST
37722: IN
37723: IFFALSE 37744
// points := [ 5 , 3 , 2 ] ;
37725: LD_ADDR_VAR 0 9
37729: PUSH
37730: LD_INT 5
37732: PUSH
37733: LD_INT 3
37735: PUSH
37736: LD_INT 2
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: LIST
37743: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37744: LD_VAR 0 6
37748: PPUSH
37749: CALL_OW 257
37753: PUSH
37754: LD_INT 17
37756: EQUAL
37757: IFFALSE 37778
// points := [ 100 , 50 , 75 ] ;
37759: LD_ADDR_VAR 0 9
37763: PUSH
37764: LD_INT 100
37766: PUSH
37767: LD_INT 50
37769: PUSH
37770: LD_INT 75
37772: PUSH
37773: EMPTY
37774: LIST
37775: LIST
37776: LIST
37777: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37778: LD_VAR 0 6
37782: PPUSH
37783: CALL_OW 257
37787: PUSH
37788: LD_INT 15
37790: EQUAL
37791: IFFALSE 37812
// points := [ 10 , 5 , 3 ] ;
37793: LD_ADDR_VAR 0 9
37797: PUSH
37798: LD_INT 10
37800: PUSH
37801: LD_INT 5
37803: PUSH
37804: LD_INT 3
37806: PUSH
37807: EMPTY
37808: LIST
37809: LIST
37810: LIST
37811: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37812: LD_VAR 0 6
37816: PPUSH
37817: CALL_OW 257
37821: PUSH
37822: LD_INT 14
37824: EQUAL
37825: IFFALSE 37846
// points := [ 10 , 0 , 0 ] ;
37827: LD_ADDR_VAR 0 9
37831: PUSH
37832: LD_INT 10
37834: PUSH
37835: LD_INT 0
37837: PUSH
37838: LD_INT 0
37840: PUSH
37841: EMPTY
37842: LIST
37843: LIST
37844: LIST
37845: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37846: LD_VAR 0 6
37850: PPUSH
37851: CALL_OW 257
37855: PUSH
37856: LD_INT 11
37858: EQUAL
37859: IFFALSE 37880
// points := [ 30 , 10 , 5 ] ;
37861: LD_ADDR_VAR 0 9
37865: PUSH
37866: LD_INT 30
37868: PUSH
37869: LD_INT 10
37871: PUSH
37872: LD_INT 5
37874: PUSH
37875: EMPTY
37876: LIST
37877: LIST
37878: LIST
37879: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37880: LD_VAR 0 1
37884: PPUSH
37885: LD_INT 5
37887: PPUSH
37888: CALL_OW 321
37892: PUSH
37893: LD_INT 2
37895: EQUAL
37896: IFFALSE 37913
// bpoints := bpoints * 1.8 ;
37898: LD_ADDR_VAR 0 10
37902: PUSH
37903: LD_VAR 0 10
37907: PUSH
37908: LD_REAL  1.80000000000000E+0000
37911: MUL
37912: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37913: LD_VAR 0 6
37917: PPUSH
37918: CALL_OW 257
37922: PUSH
37923: LD_INT 1
37925: PUSH
37926: LD_INT 2
37928: PUSH
37929: LD_INT 3
37931: PUSH
37932: LD_INT 4
37934: PUSH
37935: EMPTY
37936: LIST
37937: LIST
37938: LIST
37939: LIST
37940: IN
37941: PUSH
37942: LD_VAR 0 1
37946: PPUSH
37947: LD_INT 51
37949: PPUSH
37950: CALL_OW 321
37954: PUSH
37955: LD_INT 2
37957: EQUAL
37958: AND
37959: IFFALSE 37976
// bpoints := bpoints * 1.2 ;
37961: LD_ADDR_VAR 0 10
37965: PUSH
37966: LD_VAR 0 10
37970: PUSH
37971: LD_REAL  1.20000000000000E+0000
37974: MUL
37975: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37976: LD_VAR 0 6
37980: PPUSH
37981: CALL_OW 257
37985: PUSH
37986: LD_INT 5
37988: PUSH
37989: LD_INT 7
37991: PUSH
37992: LD_INT 9
37994: PUSH
37995: EMPTY
37996: LIST
37997: LIST
37998: LIST
37999: IN
38000: PUSH
38001: LD_VAR 0 1
38005: PPUSH
38006: LD_INT 52
38008: PPUSH
38009: CALL_OW 321
38013: PUSH
38014: LD_INT 2
38016: EQUAL
38017: AND
38018: IFFALSE 38035
// bpoints := bpoints * 1.5 ;
38020: LD_ADDR_VAR 0 10
38024: PUSH
38025: LD_VAR 0 10
38029: PUSH
38030: LD_REAL  1.50000000000000E+0000
38033: MUL
38034: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38035: LD_VAR 0 1
38039: PPUSH
38040: LD_INT 66
38042: PPUSH
38043: CALL_OW 321
38047: PUSH
38048: LD_INT 2
38050: EQUAL
38051: IFFALSE 38068
// bpoints := bpoints * 1.1 ;
38053: LD_ADDR_VAR 0 10
38057: PUSH
38058: LD_VAR 0 10
38062: PUSH
38063: LD_REAL  1.10000000000000E+0000
38066: MUL
38067: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38068: LD_ADDR_VAR 0 10
38072: PUSH
38073: LD_VAR 0 10
38077: PUSH
38078: LD_VAR 0 6
38082: PPUSH
38083: LD_INT 1
38085: PPUSH
38086: CALL_OW 259
38090: PUSH
38091: LD_REAL  1.15000000000000E+0000
38094: MUL
38095: MUL
38096: ST_TO_ADDR
// end ; unit_vehicle :
38097: GO 38921
38099: LD_INT 2
38101: DOUBLE
38102: EQUAL
38103: IFTRUE 38107
38105: GO 38909
38107: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
38108: LD_VAR 0 6
38112: PPUSH
38113: CALL_OW 264
38117: PUSH
38118: LD_INT 2
38120: PUSH
38121: LD_INT 42
38123: PUSH
38124: LD_INT 24
38126: PUSH
38127: EMPTY
38128: LIST
38129: LIST
38130: LIST
38131: IN
38132: IFFALSE 38153
// points := [ 25 , 5 , 3 ] ;
38134: LD_ADDR_VAR 0 9
38138: PUSH
38139: LD_INT 25
38141: PUSH
38142: LD_INT 5
38144: PUSH
38145: LD_INT 3
38147: PUSH
38148: EMPTY
38149: LIST
38150: LIST
38151: LIST
38152: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
38153: LD_VAR 0 6
38157: PPUSH
38158: CALL_OW 264
38162: PUSH
38163: LD_INT 4
38165: PUSH
38166: LD_INT 43
38168: PUSH
38169: LD_INT 25
38171: PUSH
38172: EMPTY
38173: LIST
38174: LIST
38175: LIST
38176: IN
38177: IFFALSE 38198
// points := [ 40 , 15 , 5 ] ;
38179: LD_ADDR_VAR 0 9
38183: PUSH
38184: LD_INT 40
38186: PUSH
38187: LD_INT 15
38189: PUSH
38190: LD_INT 5
38192: PUSH
38193: EMPTY
38194: LIST
38195: LIST
38196: LIST
38197: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
38198: LD_VAR 0 6
38202: PPUSH
38203: CALL_OW 264
38207: PUSH
38208: LD_INT 3
38210: PUSH
38211: LD_INT 23
38213: PUSH
38214: EMPTY
38215: LIST
38216: LIST
38217: IN
38218: IFFALSE 38239
// points := [ 7 , 25 , 8 ] ;
38220: LD_ADDR_VAR 0 9
38224: PUSH
38225: LD_INT 7
38227: PUSH
38228: LD_INT 25
38230: PUSH
38231: LD_INT 8
38233: PUSH
38234: EMPTY
38235: LIST
38236: LIST
38237: LIST
38238: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
38239: LD_VAR 0 6
38243: PPUSH
38244: CALL_OW 264
38248: PUSH
38249: LD_INT 5
38251: PUSH
38252: LD_INT 27
38254: PUSH
38255: LD_INT 44
38257: PUSH
38258: EMPTY
38259: LIST
38260: LIST
38261: LIST
38262: IN
38263: IFFALSE 38284
// points := [ 14 , 50 , 16 ] ;
38265: LD_ADDR_VAR 0 9
38269: PUSH
38270: LD_INT 14
38272: PUSH
38273: LD_INT 50
38275: PUSH
38276: LD_INT 16
38278: PUSH
38279: EMPTY
38280: LIST
38281: LIST
38282: LIST
38283: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
38284: LD_VAR 0 6
38288: PPUSH
38289: CALL_OW 264
38293: PUSH
38294: LD_INT 6
38296: PUSH
38297: LD_INT 46
38299: PUSH
38300: EMPTY
38301: LIST
38302: LIST
38303: IN
38304: IFFALSE 38325
// points := [ 32 , 120 , 70 ] ;
38306: LD_ADDR_VAR 0 9
38310: PUSH
38311: LD_INT 32
38313: PUSH
38314: LD_INT 120
38316: PUSH
38317: LD_INT 70
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: LIST
38324: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
38325: LD_VAR 0 6
38329: PPUSH
38330: CALL_OW 264
38334: PUSH
38335: LD_INT 7
38337: PUSH
38338: LD_INT 28
38340: PUSH
38341: LD_INT 45
38343: PUSH
38344: EMPTY
38345: LIST
38346: LIST
38347: LIST
38348: IN
38349: IFFALSE 38370
// points := [ 35 , 20 , 45 ] ;
38351: LD_ADDR_VAR 0 9
38355: PUSH
38356: LD_INT 35
38358: PUSH
38359: LD_INT 20
38361: PUSH
38362: LD_INT 45
38364: PUSH
38365: EMPTY
38366: LIST
38367: LIST
38368: LIST
38369: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
38370: LD_VAR 0 6
38374: PPUSH
38375: CALL_OW 264
38379: PUSH
38380: LD_INT 47
38382: PUSH
38383: EMPTY
38384: LIST
38385: IN
38386: IFFALSE 38407
// points := [ 67 , 45 , 75 ] ;
38388: LD_ADDR_VAR 0 9
38392: PUSH
38393: LD_INT 67
38395: PUSH
38396: LD_INT 45
38398: PUSH
38399: LD_INT 75
38401: PUSH
38402: EMPTY
38403: LIST
38404: LIST
38405: LIST
38406: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
38407: LD_VAR 0 6
38411: PPUSH
38412: CALL_OW 264
38416: PUSH
38417: LD_INT 26
38419: PUSH
38420: EMPTY
38421: LIST
38422: IN
38423: IFFALSE 38444
// points := [ 120 , 30 , 80 ] ;
38425: LD_ADDR_VAR 0 9
38429: PUSH
38430: LD_INT 120
38432: PUSH
38433: LD_INT 30
38435: PUSH
38436: LD_INT 80
38438: PUSH
38439: EMPTY
38440: LIST
38441: LIST
38442: LIST
38443: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
38444: LD_VAR 0 6
38448: PPUSH
38449: CALL_OW 264
38453: PUSH
38454: LD_INT 22
38456: PUSH
38457: EMPTY
38458: LIST
38459: IN
38460: IFFALSE 38481
// points := [ 40 , 1 , 1 ] ;
38462: LD_ADDR_VAR 0 9
38466: PUSH
38467: LD_INT 40
38469: PUSH
38470: LD_INT 1
38472: PUSH
38473: LD_INT 1
38475: PUSH
38476: EMPTY
38477: LIST
38478: LIST
38479: LIST
38480: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
38481: LD_VAR 0 6
38485: PPUSH
38486: CALL_OW 264
38490: PUSH
38491: LD_INT 29
38493: PUSH
38494: EMPTY
38495: LIST
38496: IN
38497: IFFALSE 38518
// points := [ 70 , 200 , 400 ] ;
38499: LD_ADDR_VAR 0 9
38503: PUSH
38504: LD_INT 70
38506: PUSH
38507: LD_INT 200
38509: PUSH
38510: LD_INT 400
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: LIST
38517: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38518: LD_VAR 0 6
38522: PPUSH
38523: CALL_OW 264
38527: PUSH
38528: LD_INT 14
38530: PUSH
38531: LD_INT 53
38533: PUSH
38534: EMPTY
38535: LIST
38536: LIST
38537: IN
38538: IFFALSE 38559
// points := [ 40 , 10 , 20 ] ;
38540: LD_ADDR_VAR 0 9
38544: PUSH
38545: LD_INT 40
38547: PUSH
38548: LD_INT 10
38550: PUSH
38551: LD_INT 20
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: LIST
38558: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38559: LD_VAR 0 6
38563: PPUSH
38564: CALL_OW 264
38568: PUSH
38569: LD_INT 9
38571: PUSH
38572: EMPTY
38573: LIST
38574: IN
38575: IFFALSE 38596
// points := [ 5 , 70 , 20 ] ;
38577: LD_ADDR_VAR 0 9
38581: PUSH
38582: LD_INT 5
38584: PUSH
38585: LD_INT 70
38587: PUSH
38588: LD_INT 20
38590: PUSH
38591: EMPTY
38592: LIST
38593: LIST
38594: LIST
38595: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38596: LD_VAR 0 6
38600: PPUSH
38601: CALL_OW 264
38605: PUSH
38606: LD_INT 10
38608: PUSH
38609: EMPTY
38610: LIST
38611: IN
38612: IFFALSE 38633
// points := [ 35 , 110 , 70 ] ;
38614: LD_ADDR_VAR 0 9
38618: PUSH
38619: LD_INT 35
38621: PUSH
38622: LD_INT 110
38624: PUSH
38625: LD_INT 70
38627: PUSH
38628: EMPTY
38629: LIST
38630: LIST
38631: LIST
38632: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38633: LD_VAR 0 6
38637: PPUSH
38638: CALL_OW 265
38642: PUSH
38643: LD_INT 25
38645: EQUAL
38646: IFFALSE 38667
// points := [ 80 , 65 , 100 ] ;
38648: LD_ADDR_VAR 0 9
38652: PUSH
38653: LD_INT 80
38655: PUSH
38656: LD_INT 65
38658: PUSH
38659: LD_INT 100
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: LIST
38666: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38667: LD_VAR 0 6
38671: PPUSH
38672: CALL_OW 263
38676: PUSH
38677: LD_INT 1
38679: EQUAL
38680: IFFALSE 38715
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38682: LD_ADDR_VAR 0 10
38686: PUSH
38687: LD_VAR 0 10
38691: PUSH
38692: LD_VAR 0 6
38696: PPUSH
38697: CALL_OW 311
38701: PPUSH
38702: LD_INT 3
38704: PPUSH
38705: CALL_OW 259
38709: PUSH
38710: LD_INT 4
38712: MUL
38713: MUL
38714: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38715: LD_VAR 0 6
38719: PPUSH
38720: CALL_OW 263
38724: PUSH
38725: LD_INT 2
38727: EQUAL
38728: IFFALSE 38779
// begin j := IsControledBy ( i ) ;
38730: LD_ADDR_VAR 0 7
38734: PUSH
38735: LD_VAR 0 6
38739: PPUSH
38740: CALL_OW 312
38744: ST_TO_ADDR
// if j then
38745: LD_VAR 0 7
38749: IFFALSE 38779
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38751: LD_ADDR_VAR 0 10
38755: PUSH
38756: LD_VAR 0 10
38760: PUSH
38761: LD_VAR 0 7
38765: PPUSH
38766: LD_INT 3
38768: PPUSH
38769: CALL_OW 259
38773: PUSH
38774: LD_INT 3
38776: MUL
38777: MUL
38778: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38779: LD_VAR 0 6
38783: PPUSH
38784: CALL_OW 264
38788: PUSH
38789: LD_INT 5
38791: PUSH
38792: LD_INT 6
38794: PUSH
38795: LD_INT 46
38797: PUSH
38798: LD_INT 44
38800: PUSH
38801: LD_INT 47
38803: PUSH
38804: LD_INT 45
38806: PUSH
38807: LD_INT 28
38809: PUSH
38810: LD_INT 7
38812: PUSH
38813: LD_INT 27
38815: PUSH
38816: LD_INT 29
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: LIST
38823: LIST
38824: LIST
38825: LIST
38826: LIST
38827: LIST
38828: LIST
38829: LIST
38830: IN
38831: PUSH
38832: LD_VAR 0 1
38836: PPUSH
38837: LD_INT 52
38839: PPUSH
38840: CALL_OW 321
38844: PUSH
38845: LD_INT 2
38847: EQUAL
38848: AND
38849: IFFALSE 38866
// bpoints := bpoints * 1.2 ;
38851: LD_ADDR_VAR 0 10
38855: PUSH
38856: LD_VAR 0 10
38860: PUSH
38861: LD_REAL  1.20000000000000E+0000
38864: MUL
38865: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38866: LD_VAR 0 6
38870: PPUSH
38871: CALL_OW 264
38875: PUSH
38876: LD_INT 6
38878: PUSH
38879: LD_INT 46
38881: PUSH
38882: LD_INT 47
38884: PUSH
38885: EMPTY
38886: LIST
38887: LIST
38888: LIST
38889: IN
38890: IFFALSE 38907
// bpoints := bpoints * 1.2 ;
38892: LD_ADDR_VAR 0 10
38896: PUSH
38897: LD_VAR 0 10
38901: PUSH
38902: LD_REAL  1.20000000000000E+0000
38905: MUL
38906: ST_TO_ADDR
// end ; unit_building :
38907: GO 38921
38909: LD_INT 3
38911: DOUBLE
38912: EQUAL
38913: IFTRUE 38917
38915: GO 38920
38917: POP
// ; end ;
38918: GO 38921
38920: POP
// for j = 1 to 3 do
38921: LD_ADDR_VAR 0 7
38925: PUSH
38926: DOUBLE
38927: LD_INT 1
38929: DEC
38930: ST_TO_ADDR
38931: LD_INT 3
38933: PUSH
38934: FOR_TO
38935: IFFALSE 38988
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38937: LD_ADDR_VAR 0 5
38941: PUSH
38942: LD_VAR 0 5
38946: PPUSH
38947: LD_VAR 0 7
38951: PPUSH
38952: LD_VAR 0 5
38956: PUSH
38957: LD_VAR 0 7
38961: ARRAY
38962: PUSH
38963: LD_VAR 0 9
38967: PUSH
38968: LD_VAR 0 7
38972: ARRAY
38973: PUSH
38974: LD_VAR 0 10
38978: MUL
38979: PLUS
38980: PPUSH
38981: CALL_OW 1
38985: ST_TO_ADDR
38986: GO 38934
38988: POP
38989: POP
// end ;
38990: GO 37473
38992: POP
38993: POP
// result := Replace ( result , 4 , tmp ) ;
38994: LD_ADDR_VAR 0 5
38998: PUSH
38999: LD_VAR 0 5
39003: PPUSH
39004: LD_INT 4
39006: PPUSH
39007: LD_VAR 0 8
39011: PPUSH
39012: CALL_OW 1
39016: ST_TO_ADDR
// end ;
39017: LD_VAR 0 5
39021: RET
// export function DangerAtRange ( unit , range ) ; begin
39022: LD_INT 0
39024: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39025: LD_ADDR_VAR 0 3
39029: PUSH
39030: LD_VAR 0 1
39034: PPUSH
39035: CALL_OW 255
39039: PPUSH
39040: LD_VAR 0 1
39044: PPUSH
39045: CALL_OW 250
39049: PPUSH
39050: LD_VAR 0 1
39054: PPUSH
39055: CALL_OW 251
39059: PPUSH
39060: LD_VAR 0 2
39064: PPUSH
39065: CALL 37325 0 4
39069: ST_TO_ADDR
// end ;
39070: LD_VAR 0 3
39074: RET
// export function DangerInArea ( side , area ) ; begin
39075: LD_INT 0
39077: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39078: LD_ADDR_VAR 0 3
39082: PUSH
39083: LD_VAR 0 2
39087: PPUSH
39088: LD_INT 81
39090: PUSH
39091: LD_VAR 0 1
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: PPUSH
39100: CALL_OW 70
39104: ST_TO_ADDR
// end ;
39105: LD_VAR 0 3
39109: RET
// export function IsExtension ( b ) ; begin
39110: LD_INT 0
39112: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
39113: LD_ADDR_VAR 0 2
39117: PUSH
39118: LD_VAR 0 1
39122: PUSH
39123: LD_INT 23
39125: PUSH
39126: LD_INT 20
39128: PUSH
39129: LD_INT 22
39131: PUSH
39132: LD_INT 17
39134: PUSH
39135: LD_INT 24
39137: PUSH
39138: LD_INT 21
39140: PUSH
39141: LD_INT 19
39143: PUSH
39144: LD_INT 16
39146: PUSH
39147: LD_INT 25
39149: PUSH
39150: LD_INT 18
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: IN
39165: ST_TO_ADDR
// end ;
39166: LD_VAR 0 2
39170: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
39171: LD_INT 0
39173: PPUSH
39174: PPUSH
39175: PPUSH
// result := [ ] ;
39176: LD_ADDR_VAR 0 3
39180: PUSH
39181: EMPTY
39182: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
39183: LD_ADDR_VAR 0 4
39187: PUSH
39188: LD_VAR 0 2
39192: PPUSH
39193: LD_INT 21
39195: PUSH
39196: LD_INT 3
39198: PUSH
39199: EMPTY
39200: LIST
39201: LIST
39202: PPUSH
39203: CALL_OW 70
39207: ST_TO_ADDR
// if not tmp then
39208: LD_VAR 0 4
39212: NOT
39213: IFFALSE 39217
// exit ;
39215: GO 39275
// for i in tmp do
39217: LD_ADDR_VAR 0 5
39221: PUSH
39222: LD_VAR 0 4
39226: PUSH
39227: FOR_IN
39228: IFFALSE 39263
// if GetBase ( i ) <> base then
39230: LD_VAR 0 5
39234: PPUSH
39235: CALL_OW 274
39239: PUSH
39240: LD_VAR 0 1
39244: NONEQUAL
39245: IFFALSE 39261
// ComLinkToBase ( base , i ) ;
39247: LD_VAR 0 1
39251: PPUSH
39252: LD_VAR 0 5
39256: PPUSH
39257: CALL_OW 169
39261: GO 39227
39263: POP
39264: POP
// result := tmp ;
39265: LD_ADDR_VAR 0 3
39269: PUSH
39270: LD_VAR 0 4
39274: ST_TO_ADDR
// end ;
39275: LD_VAR 0 3
39279: RET
// export function ComComplete ( unit , b ) ; var i ; begin
39280: LD_INT 0
39282: PPUSH
39283: PPUSH
// if BuildingStatus ( b ) = bs_build then
39284: LD_VAR 0 2
39288: PPUSH
39289: CALL_OW 461
39293: PUSH
39294: LD_INT 1
39296: EQUAL
39297: IFFALSE 39357
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
39299: LD_VAR 0 1
39303: PPUSH
39304: LD_STRING h
39306: PUSH
39307: LD_VAR 0 2
39311: PPUSH
39312: CALL_OW 250
39316: PUSH
39317: LD_VAR 0 2
39321: PPUSH
39322: CALL_OW 251
39326: PUSH
39327: LD_VAR 0 2
39331: PUSH
39332: LD_INT 0
39334: PUSH
39335: LD_INT 0
39337: PUSH
39338: LD_INT 0
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: LIST
39345: LIST
39346: LIST
39347: LIST
39348: LIST
39349: PUSH
39350: EMPTY
39351: LIST
39352: PPUSH
39353: CALL_OW 446
// end ;
39357: LD_VAR 0 3
39361: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
39362: LD_INT 0
39364: PPUSH
39365: PPUSH
39366: PPUSH
39367: PPUSH
39368: PPUSH
39369: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
39370: LD_VAR 0 1
39374: NOT
39375: PUSH
39376: LD_VAR 0 1
39380: PPUSH
39381: CALL_OW 263
39385: PUSH
39386: LD_INT 2
39388: EQUAL
39389: NOT
39390: OR
39391: IFFALSE 39395
// exit ;
39393: GO 39711
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
39395: LD_ADDR_VAR 0 6
39399: PUSH
39400: LD_INT 22
39402: PUSH
39403: LD_VAR 0 1
39407: PPUSH
39408: CALL_OW 255
39412: PUSH
39413: EMPTY
39414: LIST
39415: LIST
39416: PUSH
39417: LD_INT 2
39419: PUSH
39420: LD_INT 30
39422: PUSH
39423: LD_INT 36
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: PUSH
39430: LD_INT 34
39432: PUSH
39433: LD_INT 31
39435: PUSH
39436: EMPTY
39437: LIST
39438: LIST
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: LIST
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: PPUSH
39449: CALL_OW 69
39453: ST_TO_ADDR
// if not tmp then
39454: LD_VAR 0 6
39458: NOT
39459: IFFALSE 39463
// exit ;
39461: GO 39711
// result := [ ] ;
39463: LD_ADDR_VAR 0 2
39467: PUSH
39468: EMPTY
39469: ST_TO_ADDR
// for i in tmp do
39470: LD_ADDR_VAR 0 3
39474: PUSH
39475: LD_VAR 0 6
39479: PUSH
39480: FOR_IN
39481: IFFALSE 39552
// begin t := UnitsInside ( i ) ;
39483: LD_ADDR_VAR 0 4
39487: PUSH
39488: LD_VAR 0 3
39492: PPUSH
39493: CALL_OW 313
39497: ST_TO_ADDR
// if t then
39498: LD_VAR 0 4
39502: IFFALSE 39550
// for j in t do
39504: LD_ADDR_VAR 0 7
39508: PUSH
39509: LD_VAR 0 4
39513: PUSH
39514: FOR_IN
39515: IFFALSE 39548
// result := Insert ( result , result + 1 , j ) ;
39517: LD_ADDR_VAR 0 2
39521: PUSH
39522: LD_VAR 0 2
39526: PPUSH
39527: LD_VAR 0 2
39531: PUSH
39532: LD_INT 1
39534: PLUS
39535: PPUSH
39536: LD_VAR 0 7
39540: PPUSH
39541: CALL_OW 2
39545: ST_TO_ADDR
39546: GO 39514
39548: POP
39549: POP
// end ;
39550: GO 39480
39552: POP
39553: POP
// if not result then
39554: LD_VAR 0 2
39558: NOT
39559: IFFALSE 39563
// exit ;
39561: GO 39711
// mech := result [ 1 ] ;
39563: LD_ADDR_VAR 0 5
39567: PUSH
39568: LD_VAR 0 2
39572: PUSH
39573: LD_INT 1
39575: ARRAY
39576: ST_TO_ADDR
// if result > 1 then
39577: LD_VAR 0 2
39581: PUSH
39582: LD_INT 1
39584: GREATER
39585: IFFALSE 39697
// for i = 2 to result do
39587: LD_ADDR_VAR 0 3
39591: PUSH
39592: DOUBLE
39593: LD_INT 2
39595: DEC
39596: ST_TO_ADDR
39597: LD_VAR 0 2
39601: PUSH
39602: FOR_TO
39603: IFFALSE 39695
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39605: LD_ADDR_VAR 0 4
39609: PUSH
39610: LD_VAR 0 2
39614: PUSH
39615: LD_VAR 0 3
39619: ARRAY
39620: PPUSH
39621: LD_INT 3
39623: PPUSH
39624: CALL_OW 259
39628: PUSH
39629: LD_VAR 0 2
39633: PUSH
39634: LD_VAR 0 3
39638: ARRAY
39639: PPUSH
39640: CALL_OW 432
39644: MINUS
39645: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39646: LD_VAR 0 4
39650: PUSH
39651: LD_VAR 0 5
39655: PPUSH
39656: LD_INT 3
39658: PPUSH
39659: CALL_OW 259
39663: PUSH
39664: LD_VAR 0 5
39668: PPUSH
39669: CALL_OW 432
39673: MINUS
39674: GREATEREQUAL
39675: IFFALSE 39693
// mech := result [ i ] ;
39677: LD_ADDR_VAR 0 5
39681: PUSH
39682: LD_VAR 0 2
39686: PUSH
39687: LD_VAR 0 3
39691: ARRAY
39692: ST_TO_ADDR
// end ;
39693: GO 39602
39695: POP
39696: POP
// ComLinkTo ( vehicle , mech ) ;
39697: LD_VAR 0 1
39701: PPUSH
39702: LD_VAR 0 5
39706: PPUSH
39707: CALL_OW 135
// end ;
39711: LD_VAR 0 2
39715: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39716: LD_INT 0
39718: PPUSH
39719: PPUSH
39720: PPUSH
39721: PPUSH
39722: PPUSH
39723: PPUSH
39724: PPUSH
39725: PPUSH
39726: PPUSH
39727: PPUSH
39728: PPUSH
39729: PPUSH
39730: PPUSH
// result := [ ] ;
39731: LD_ADDR_VAR 0 7
39735: PUSH
39736: EMPTY
39737: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39738: LD_VAR 0 1
39742: PPUSH
39743: CALL_OW 266
39747: PUSH
39748: LD_INT 0
39750: PUSH
39751: LD_INT 1
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: IN
39758: NOT
39759: IFFALSE 39763
// exit ;
39761: GO 41394
// if name then
39763: LD_VAR 0 3
39767: IFFALSE 39783
// SetBName ( base_dep , name ) ;
39769: LD_VAR 0 1
39773: PPUSH
39774: LD_VAR 0 3
39778: PPUSH
39779: CALL_OW 500
// base := GetBase ( base_dep ) ;
39783: LD_ADDR_VAR 0 15
39787: PUSH
39788: LD_VAR 0 1
39792: PPUSH
39793: CALL_OW 274
39797: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39798: LD_ADDR_VAR 0 16
39802: PUSH
39803: LD_VAR 0 1
39807: PPUSH
39808: CALL_OW 255
39812: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39813: LD_ADDR_VAR 0 17
39817: PUSH
39818: LD_VAR 0 1
39822: PPUSH
39823: CALL_OW 248
39827: ST_TO_ADDR
// if sources then
39828: LD_VAR 0 5
39832: IFFALSE 39879
// for i = 1 to 3 do
39834: LD_ADDR_VAR 0 8
39838: PUSH
39839: DOUBLE
39840: LD_INT 1
39842: DEC
39843: ST_TO_ADDR
39844: LD_INT 3
39846: PUSH
39847: FOR_TO
39848: IFFALSE 39877
// AddResourceType ( base , i , sources [ i ] ) ;
39850: LD_VAR 0 15
39854: PPUSH
39855: LD_VAR 0 8
39859: PPUSH
39860: LD_VAR 0 5
39864: PUSH
39865: LD_VAR 0 8
39869: ARRAY
39870: PPUSH
39871: CALL_OW 276
39875: GO 39847
39877: POP
39878: POP
// buildings := GetBaseBuildings ( base , area ) ;
39879: LD_ADDR_VAR 0 18
39883: PUSH
39884: LD_VAR 0 15
39888: PPUSH
39889: LD_VAR 0 2
39893: PPUSH
39894: CALL 39171 0 2
39898: ST_TO_ADDR
// InitHc ;
39899: CALL_OW 19
// InitUc ;
39903: CALL_OW 18
// uc_side := side ;
39907: LD_ADDR_OWVAR 20
39911: PUSH
39912: LD_VAR 0 16
39916: ST_TO_ADDR
// uc_nation := nation ;
39917: LD_ADDR_OWVAR 21
39921: PUSH
39922: LD_VAR 0 17
39926: ST_TO_ADDR
// if buildings then
39927: LD_VAR 0 18
39931: IFFALSE 41253
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39933: LD_ADDR_VAR 0 19
39937: PUSH
39938: LD_VAR 0 18
39942: PPUSH
39943: LD_INT 2
39945: PUSH
39946: LD_INT 30
39948: PUSH
39949: LD_INT 29
39951: PUSH
39952: EMPTY
39953: LIST
39954: LIST
39955: PUSH
39956: LD_INT 30
39958: PUSH
39959: LD_INT 30
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: PUSH
39966: EMPTY
39967: LIST
39968: LIST
39969: LIST
39970: PPUSH
39971: CALL_OW 72
39975: ST_TO_ADDR
// if tmp then
39976: LD_VAR 0 19
39980: IFFALSE 40028
// for i in tmp do
39982: LD_ADDR_VAR 0 8
39986: PUSH
39987: LD_VAR 0 19
39991: PUSH
39992: FOR_IN
39993: IFFALSE 40026
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39995: LD_VAR 0 8
39999: PPUSH
40000: CALL_OW 250
40004: PPUSH
40005: LD_VAR 0 8
40009: PPUSH
40010: CALL_OW 251
40014: PPUSH
40015: LD_VAR 0 16
40019: PPUSH
40020: CALL_OW 441
40024: GO 39992
40026: POP
40027: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40028: LD_VAR 0 18
40032: PPUSH
40033: LD_INT 2
40035: PUSH
40036: LD_INT 30
40038: PUSH
40039: LD_INT 32
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: PUSH
40046: LD_INT 30
40048: PUSH
40049: LD_INT 33
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: PUSH
40056: EMPTY
40057: LIST
40058: LIST
40059: LIST
40060: PPUSH
40061: CALL_OW 72
40065: IFFALSE 40153
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
40067: LD_ADDR_VAR 0 8
40071: PUSH
40072: LD_VAR 0 18
40076: PPUSH
40077: LD_INT 2
40079: PUSH
40080: LD_INT 30
40082: PUSH
40083: LD_INT 32
40085: PUSH
40086: EMPTY
40087: LIST
40088: LIST
40089: PUSH
40090: LD_INT 30
40092: PUSH
40093: LD_INT 33
40095: PUSH
40096: EMPTY
40097: LIST
40098: LIST
40099: PUSH
40100: EMPTY
40101: LIST
40102: LIST
40103: LIST
40104: PPUSH
40105: CALL_OW 72
40109: PUSH
40110: FOR_IN
40111: IFFALSE 40151
// begin if not GetBWeapon ( i ) then
40113: LD_VAR 0 8
40117: PPUSH
40118: CALL_OW 269
40122: NOT
40123: IFFALSE 40149
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
40125: LD_VAR 0 8
40129: PPUSH
40130: LD_VAR 0 8
40134: PPUSH
40135: LD_VAR 0 2
40139: PPUSH
40140: CALL 41399 0 2
40144: PPUSH
40145: CALL_OW 431
// end ;
40149: GO 40110
40151: POP
40152: POP
// end ; for i = 1 to personel do
40153: LD_ADDR_VAR 0 8
40157: PUSH
40158: DOUBLE
40159: LD_INT 1
40161: DEC
40162: ST_TO_ADDR
40163: LD_VAR 0 6
40167: PUSH
40168: FOR_TO
40169: IFFALSE 41233
// begin if i > 4 then
40171: LD_VAR 0 8
40175: PUSH
40176: LD_INT 4
40178: GREATER
40179: IFFALSE 40183
// break ;
40181: GO 41233
// case i of 1 :
40183: LD_VAR 0 8
40187: PUSH
40188: LD_INT 1
40190: DOUBLE
40191: EQUAL
40192: IFTRUE 40196
40194: GO 40276
40196: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
40197: LD_ADDR_VAR 0 12
40201: PUSH
40202: LD_VAR 0 18
40206: PPUSH
40207: LD_INT 22
40209: PUSH
40210: LD_VAR 0 16
40214: PUSH
40215: EMPTY
40216: LIST
40217: LIST
40218: PUSH
40219: LD_INT 58
40221: PUSH
40222: EMPTY
40223: LIST
40224: PUSH
40225: LD_INT 2
40227: PUSH
40228: LD_INT 30
40230: PUSH
40231: LD_INT 32
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: PUSH
40238: LD_INT 30
40240: PUSH
40241: LD_INT 4
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: PUSH
40248: LD_INT 30
40250: PUSH
40251: LD_INT 5
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: PUSH
40258: EMPTY
40259: LIST
40260: LIST
40261: LIST
40262: LIST
40263: PUSH
40264: EMPTY
40265: LIST
40266: LIST
40267: LIST
40268: PPUSH
40269: CALL_OW 72
40273: ST_TO_ADDR
40274: GO 40498
40276: LD_INT 2
40278: DOUBLE
40279: EQUAL
40280: IFTRUE 40284
40282: GO 40346
40284: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
40285: LD_ADDR_VAR 0 12
40289: PUSH
40290: LD_VAR 0 18
40294: PPUSH
40295: LD_INT 22
40297: PUSH
40298: LD_VAR 0 16
40302: PUSH
40303: EMPTY
40304: LIST
40305: LIST
40306: PUSH
40307: LD_INT 2
40309: PUSH
40310: LD_INT 30
40312: PUSH
40313: LD_INT 0
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: PUSH
40320: LD_INT 30
40322: PUSH
40323: LD_INT 1
40325: PUSH
40326: EMPTY
40327: LIST
40328: LIST
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: LIST
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PPUSH
40339: CALL_OW 72
40343: ST_TO_ADDR
40344: GO 40498
40346: LD_INT 3
40348: DOUBLE
40349: EQUAL
40350: IFTRUE 40354
40352: GO 40416
40354: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
40355: LD_ADDR_VAR 0 12
40359: PUSH
40360: LD_VAR 0 18
40364: PPUSH
40365: LD_INT 22
40367: PUSH
40368: LD_VAR 0 16
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: PUSH
40377: LD_INT 2
40379: PUSH
40380: LD_INT 30
40382: PUSH
40383: LD_INT 2
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: PUSH
40390: LD_INT 30
40392: PUSH
40393: LD_INT 3
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: LIST
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: PPUSH
40409: CALL_OW 72
40413: ST_TO_ADDR
40414: GO 40498
40416: LD_INT 4
40418: DOUBLE
40419: EQUAL
40420: IFTRUE 40424
40422: GO 40497
40424: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
40425: LD_ADDR_VAR 0 12
40429: PUSH
40430: LD_VAR 0 18
40434: PPUSH
40435: LD_INT 22
40437: PUSH
40438: LD_VAR 0 16
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PUSH
40447: LD_INT 2
40449: PUSH
40450: LD_INT 30
40452: PUSH
40453: LD_INT 6
40455: PUSH
40456: EMPTY
40457: LIST
40458: LIST
40459: PUSH
40460: LD_INT 30
40462: PUSH
40463: LD_INT 7
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: PUSH
40470: LD_INT 30
40472: PUSH
40473: LD_INT 8
40475: PUSH
40476: EMPTY
40477: LIST
40478: LIST
40479: PUSH
40480: EMPTY
40481: LIST
40482: LIST
40483: LIST
40484: LIST
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PPUSH
40490: CALL_OW 72
40494: ST_TO_ADDR
40495: GO 40498
40497: POP
// if i = 1 then
40498: LD_VAR 0 8
40502: PUSH
40503: LD_INT 1
40505: EQUAL
40506: IFFALSE 40617
// begin tmp := [ ] ;
40508: LD_ADDR_VAR 0 19
40512: PUSH
40513: EMPTY
40514: ST_TO_ADDR
// for j in f do
40515: LD_ADDR_VAR 0 9
40519: PUSH
40520: LD_VAR 0 12
40524: PUSH
40525: FOR_IN
40526: IFFALSE 40599
// if GetBType ( j ) = b_bunker then
40528: LD_VAR 0 9
40532: PPUSH
40533: CALL_OW 266
40537: PUSH
40538: LD_INT 32
40540: EQUAL
40541: IFFALSE 40568
// tmp := Insert ( tmp , 1 , j ) else
40543: LD_ADDR_VAR 0 19
40547: PUSH
40548: LD_VAR 0 19
40552: PPUSH
40553: LD_INT 1
40555: PPUSH
40556: LD_VAR 0 9
40560: PPUSH
40561: CALL_OW 2
40565: ST_TO_ADDR
40566: GO 40597
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40568: LD_ADDR_VAR 0 19
40572: PUSH
40573: LD_VAR 0 19
40577: PPUSH
40578: LD_VAR 0 19
40582: PUSH
40583: LD_INT 1
40585: PLUS
40586: PPUSH
40587: LD_VAR 0 9
40591: PPUSH
40592: CALL_OW 2
40596: ST_TO_ADDR
40597: GO 40525
40599: POP
40600: POP
// if tmp then
40601: LD_VAR 0 19
40605: IFFALSE 40617
// f := tmp ;
40607: LD_ADDR_VAR 0 12
40611: PUSH
40612: LD_VAR 0 19
40616: ST_TO_ADDR
// end ; x := personel [ i ] ;
40617: LD_ADDR_VAR 0 13
40621: PUSH
40622: LD_VAR 0 6
40626: PUSH
40627: LD_VAR 0 8
40631: ARRAY
40632: ST_TO_ADDR
// if x = - 1 then
40633: LD_VAR 0 13
40637: PUSH
40638: LD_INT 1
40640: NEG
40641: EQUAL
40642: IFFALSE 40851
// begin for j in f do
40644: LD_ADDR_VAR 0 9
40648: PUSH
40649: LD_VAR 0 12
40653: PUSH
40654: FOR_IN
40655: IFFALSE 40847
// repeat InitHc ;
40657: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40661: LD_VAR 0 9
40665: PPUSH
40666: CALL_OW 266
40670: PUSH
40671: LD_INT 5
40673: EQUAL
40674: IFFALSE 40744
// begin if UnitsInside ( j ) < 3 then
40676: LD_VAR 0 9
40680: PPUSH
40681: CALL_OW 313
40685: PUSH
40686: LD_INT 3
40688: LESS
40689: IFFALSE 40725
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40691: LD_INT 0
40693: PPUSH
40694: LD_INT 5
40696: PUSH
40697: LD_INT 8
40699: PUSH
40700: LD_INT 9
40702: PUSH
40703: EMPTY
40704: LIST
40705: LIST
40706: LIST
40707: PUSH
40708: LD_VAR 0 17
40712: ARRAY
40713: PPUSH
40714: LD_VAR 0 4
40718: PPUSH
40719: CALL_OW 380
40723: GO 40742
// PrepareHuman ( false , i , skill ) ;
40725: LD_INT 0
40727: PPUSH
40728: LD_VAR 0 8
40732: PPUSH
40733: LD_VAR 0 4
40737: PPUSH
40738: CALL_OW 380
// end else
40742: GO 40761
// PrepareHuman ( false , i , skill ) ;
40744: LD_INT 0
40746: PPUSH
40747: LD_VAR 0 8
40751: PPUSH
40752: LD_VAR 0 4
40756: PPUSH
40757: CALL_OW 380
// un := CreateHuman ;
40761: LD_ADDR_VAR 0 14
40765: PUSH
40766: CALL_OW 44
40770: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40771: LD_ADDR_VAR 0 7
40775: PUSH
40776: LD_VAR 0 7
40780: PPUSH
40781: LD_INT 1
40783: PPUSH
40784: LD_VAR 0 14
40788: PPUSH
40789: CALL_OW 2
40793: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40794: LD_VAR 0 14
40798: PPUSH
40799: LD_VAR 0 9
40803: PPUSH
40804: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40808: LD_VAR 0 9
40812: PPUSH
40813: CALL_OW 313
40817: PUSH
40818: LD_INT 6
40820: EQUAL
40821: PUSH
40822: LD_VAR 0 9
40826: PPUSH
40827: CALL_OW 266
40831: PUSH
40832: LD_INT 32
40834: PUSH
40835: LD_INT 31
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: IN
40842: OR
40843: IFFALSE 40657
40845: GO 40654
40847: POP
40848: POP
// end else
40849: GO 41231
// for j = 1 to x do
40851: LD_ADDR_VAR 0 9
40855: PUSH
40856: DOUBLE
40857: LD_INT 1
40859: DEC
40860: ST_TO_ADDR
40861: LD_VAR 0 13
40865: PUSH
40866: FOR_TO
40867: IFFALSE 41229
// begin InitHc ;
40869: CALL_OW 19
// if not f then
40873: LD_VAR 0 12
40877: NOT
40878: IFFALSE 40967
// begin PrepareHuman ( false , i , skill ) ;
40880: LD_INT 0
40882: PPUSH
40883: LD_VAR 0 8
40887: PPUSH
40888: LD_VAR 0 4
40892: PPUSH
40893: CALL_OW 380
// un := CreateHuman ;
40897: LD_ADDR_VAR 0 14
40901: PUSH
40902: CALL_OW 44
40906: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40907: LD_ADDR_VAR 0 7
40911: PUSH
40912: LD_VAR 0 7
40916: PPUSH
40917: LD_INT 1
40919: PPUSH
40920: LD_VAR 0 14
40924: PPUSH
40925: CALL_OW 2
40929: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40930: LD_VAR 0 14
40934: PPUSH
40935: LD_VAR 0 1
40939: PPUSH
40940: CALL_OW 250
40944: PPUSH
40945: LD_VAR 0 1
40949: PPUSH
40950: CALL_OW 251
40954: PPUSH
40955: LD_INT 10
40957: PPUSH
40958: LD_INT 0
40960: PPUSH
40961: CALL_OW 50
// continue ;
40965: GO 40866
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40967: LD_VAR 0 12
40971: PUSH
40972: LD_INT 1
40974: ARRAY
40975: PPUSH
40976: CALL_OW 313
40980: PUSH
40981: LD_VAR 0 12
40985: PUSH
40986: LD_INT 1
40988: ARRAY
40989: PPUSH
40990: CALL_OW 266
40994: PUSH
40995: LD_INT 32
40997: PUSH
40998: LD_INT 31
41000: PUSH
41001: EMPTY
41002: LIST
41003: LIST
41004: IN
41005: AND
41006: PUSH
41007: LD_VAR 0 12
41011: PUSH
41012: LD_INT 1
41014: ARRAY
41015: PPUSH
41016: CALL_OW 313
41020: PUSH
41021: LD_INT 6
41023: EQUAL
41024: OR
41025: IFFALSE 41045
// f := Delete ( f , 1 ) ;
41027: LD_ADDR_VAR 0 12
41031: PUSH
41032: LD_VAR 0 12
41036: PPUSH
41037: LD_INT 1
41039: PPUSH
41040: CALL_OW 3
41044: ST_TO_ADDR
// if not f then
41045: LD_VAR 0 12
41049: NOT
41050: IFFALSE 41068
// begin x := x + 2 ;
41052: LD_ADDR_VAR 0 13
41056: PUSH
41057: LD_VAR 0 13
41061: PUSH
41062: LD_INT 2
41064: PLUS
41065: ST_TO_ADDR
// continue ;
41066: GO 40866
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
41068: LD_VAR 0 12
41072: PUSH
41073: LD_INT 1
41075: ARRAY
41076: PPUSH
41077: CALL_OW 266
41081: PUSH
41082: LD_INT 5
41084: EQUAL
41085: IFFALSE 41159
// begin if UnitsInside ( f [ 1 ] ) < 3 then
41087: LD_VAR 0 12
41091: PUSH
41092: LD_INT 1
41094: ARRAY
41095: PPUSH
41096: CALL_OW 313
41100: PUSH
41101: LD_INT 3
41103: LESS
41104: IFFALSE 41140
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41106: LD_INT 0
41108: PPUSH
41109: LD_INT 5
41111: PUSH
41112: LD_INT 8
41114: PUSH
41115: LD_INT 9
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: LIST
41122: PUSH
41123: LD_VAR 0 17
41127: ARRAY
41128: PPUSH
41129: LD_VAR 0 4
41133: PPUSH
41134: CALL_OW 380
41138: GO 41157
// PrepareHuman ( false , i , skill ) ;
41140: LD_INT 0
41142: PPUSH
41143: LD_VAR 0 8
41147: PPUSH
41148: LD_VAR 0 4
41152: PPUSH
41153: CALL_OW 380
// end else
41157: GO 41176
// PrepareHuman ( false , i , skill ) ;
41159: LD_INT 0
41161: PPUSH
41162: LD_VAR 0 8
41166: PPUSH
41167: LD_VAR 0 4
41171: PPUSH
41172: CALL_OW 380
// un := CreateHuman ;
41176: LD_ADDR_VAR 0 14
41180: PUSH
41181: CALL_OW 44
41185: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41186: LD_ADDR_VAR 0 7
41190: PUSH
41191: LD_VAR 0 7
41195: PPUSH
41196: LD_INT 1
41198: PPUSH
41199: LD_VAR 0 14
41203: PPUSH
41204: CALL_OW 2
41208: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
41209: LD_VAR 0 14
41213: PPUSH
41214: LD_VAR 0 12
41218: PUSH
41219: LD_INT 1
41221: ARRAY
41222: PPUSH
41223: CALL_OW 52
// end ;
41227: GO 40866
41229: POP
41230: POP
// end ;
41231: GO 40168
41233: POP
41234: POP
// result := result ^ buildings ;
41235: LD_ADDR_VAR 0 7
41239: PUSH
41240: LD_VAR 0 7
41244: PUSH
41245: LD_VAR 0 18
41249: ADD
41250: ST_TO_ADDR
// end else
41251: GO 41394
// begin for i = 1 to personel do
41253: LD_ADDR_VAR 0 8
41257: PUSH
41258: DOUBLE
41259: LD_INT 1
41261: DEC
41262: ST_TO_ADDR
41263: LD_VAR 0 6
41267: PUSH
41268: FOR_TO
41269: IFFALSE 41392
// begin if i > 4 then
41271: LD_VAR 0 8
41275: PUSH
41276: LD_INT 4
41278: GREATER
41279: IFFALSE 41283
// break ;
41281: GO 41392
// x := personel [ i ] ;
41283: LD_ADDR_VAR 0 13
41287: PUSH
41288: LD_VAR 0 6
41292: PUSH
41293: LD_VAR 0 8
41297: ARRAY
41298: ST_TO_ADDR
// if x = - 1 then
41299: LD_VAR 0 13
41303: PUSH
41304: LD_INT 1
41306: NEG
41307: EQUAL
41308: IFFALSE 41312
// continue ;
41310: GO 41268
// PrepareHuman ( false , i , skill ) ;
41312: LD_INT 0
41314: PPUSH
41315: LD_VAR 0 8
41319: PPUSH
41320: LD_VAR 0 4
41324: PPUSH
41325: CALL_OW 380
// un := CreateHuman ;
41329: LD_ADDR_VAR 0 14
41333: PUSH
41334: CALL_OW 44
41338: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41339: LD_VAR 0 14
41343: PPUSH
41344: LD_VAR 0 1
41348: PPUSH
41349: CALL_OW 250
41353: PPUSH
41354: LD_VAR 0 1
41358: PPUSH
41359: CALL_OW 251
41363: PPUSH
41364: LD_INT 10
41366: PPUSH
41367: LD_INT 0
41369: PPUSH
41370: CALL_OW 50
// result := result ^ un ;
41374: LD_ADDR_VAR 0 7
41378: PUSH
41379: LD_VAR 0 7
41383: PUSH
41384: LD_VAR 0 14
41388: ADD
41389: ST_TO_ADDR
// end ;
41390: GO 41268
41392: POP
41393: POP
// end ; end ;
41394: LD_VAR 0 7
41398: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
41399: LD_INT 0
41401: PPUSH
41402: PPUSH
41403: PPUSH
41404: PPUSH
41405: PPUSH
41406: PPUSH
41407: PPUSH
41408: PPUSH
41409: PPUSH
41410: PPUSH
41411: PPUSH
41412: PPUSH
41413: PPUSH
41414: PPUSH
41415: PPUSH
41416: PPUSH
// result := false ;
41417: LD_ADDR_VAR 0 3
41421: PUSH
41422: LD_INT 0
41424: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
41425: LD_VAR 0 1
41429: NOT
41430: PUSH
41431: LD_VAR 0 1
41435: PPUSH
41436: CALL_OW 266
41440: PUSH
41441: LD_INT 32
41443: PUSH
41444: LD_INT 33
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: IN
41451: NOT
41452: OR
41453: IFFALSE 41457
// exit ;
41455: GO 42593
// nat := GetNation ( tower ) ;
41457: LD_ADDR_VAR 0 12
41461: PUSH
41462: LD_VAR 0 1
41466: PPUSH
41467: CALL_OW 248
41471: ST_TO_ADDR
// side := GetSide ( tower ) ;
41472: LD_ADDR_VAR 0 16
41476: PUSH
41477: LD_VAR 0 1
41481: PPUSH
41482: CALL_OW 255
41486: ST_TO_ADDR
// x := GetX ( tower ) ;
41487: LD_ADDR_VAR 0 10
41491: PUSH
41492: LD_VAR 0 1
41496: PPUSH
41497: CALL_OW 250
41501: ST_TO_ADDR
// y := GetY ( tower ) ;
41502: LD_ADDR_VAR 0 11
41506: PUSH
41507: LD_VAR 0 1
41511: PPUSH
41512: CALL_OW 251
41516: ST_TO_ADDR
// if not x or not y then
41517: LD_VAR 0 10
41521: NOT
41522: PUSH
41523: LD_VAR 0 11
41527: NOT
41528: OR
41529: IFFALSE 41533
// exit ;
41531: GO 42593
// weapon := 0 ;
41533: LD_ADDR_VAR 0 18
41537: PUSH
41538: LD_INT 0
41540: ST_TO_ADDR
// fac_list := [ ] ;
41541: LD_ADDR_VAR 0 17
41545: PUSH
41546: EMPTY
41547: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
41548: LD_ADDR_VAR 0 6
41552: PUSH
41553: LD_VAR 0 1
41557: PPUSH
41558: CALL_OW 274
41562: PPUSH
41563: LD_VAR 0 2
41567: PPUSH
41568: CALL 39171 0 2
41572: PPUSH
41573: LD_INT 30
41575: PUSH
41576: LD_INT 3
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: PPUSH
41583: CALL_OW 72
41587: ST_TO_ADDR
// if not factories then
41588: LD_VAR 0 6
41592: NOT
41593: IFFALSE 41597
// exit ;
41595: GO 42593
// for i in factories do
41597: LD_ADDR_VAR 0 8
41601: PUSH
41602: LD_VAR 0 6
41606: PUSH
41607: FOR_IN
41608: IFFALSE 41633
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41610: LD_ADDR_VAR 0 17
41614: PUSH
41615: LD_VAR 0 17
41619: PUSH
41620: LD_VAR 0 8
41624: PPUSH
41625: CALL_OW 478
41629: UNION
41630: ST_TO_ADDR
41631: GO 41607
41633: POP
41634: POP
// if not fac_list then
41635: LD_VAR 0 17
41639: NOT
41640: IFFALSE 41644
// exit ;
41642: GO 42593
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41644: LD_ADDR_VAR 0 5
41648: PUSH
41649: LD_INT 4
41651: PUSH
41652: LD_INT 5
41654: PUSH
41655: LD_INT 9
41657: PUSH
41658: LD_INT 10
41660: PUSH
41661: LD_INT 6
41663: PUSH
41664: LD_INT 7
41666: PUSH
41667: LD_INT 11
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: LIST
41674: LIST
41675: LIST
41676: LIST
41677: LIST
41678: PUSH
41679: LD_INT 27
41681: PUSH
41682: LD_INT 28
41684: PUSH
41685: LD_INT 26
41687: PUSH
41688: LD_INT 30
41690: PUSH
41691: EMPTY
41692: LIST
41693: LIST
41694: LIST
41695: LIST
41696: PUSH
41697: LD_INT 43
41699: PUSH
41700: LD_INT 44
41702: PUSH
41703: LD_INT 46
41705: PUSH
41706: LD_INT 45
41708: PUSH
41709: LD_INT 47
41711: PUSH
41712: LD_INT 49
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: LIST
41727: PUSH
41728: LD_VAR 0 12
41732: ARRAY
41733: ST_TO_ADDR
// for i in list do
41734: LD_ADDR_VAR 0 8
41738: PUSH
41739: LD_VAR 0 5
41743: PUSH
41744: FOR_IN
41745: IFFALSE 41778
// if not i in fac_list then
41747: LD_VAR 0 8
41751: PUSH
41752: LD_VAR 0 17
41756: IN
41757: NOT
41758: IFFALSE 41776
// list := list diff i ;
41760: LD_ADDR_VAR 0 5
41764: PUSH
41765: LD_VAR 0 5
41769: PUSH
41770: LD_VAR 0 8
41774: DIFF
41775: ST_TO_ADDR
41776: GO 41744
41778: POP
41779: POP
// if not list then
41780: LD_VAR 0 5
41784: NOT
41785: IFFALSE 41789
// exit ;
41787: GO 42593
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41789: LD_VAR 0 12
41793: PUSH
41794: LD_INT 3
41796: EQUAL
41797: PUSH
41798: LD_INT 49
41800: PUSH
41801: LD_VAR 0 5
41805: IN
41806: AND
41807: PUSH
41808: LD_INT 31
41810: PPUSH
41811: LD_VAR 0 16
41815: PPUSH
41816: CALL_OW 321
41820: PUSH
41821: LD_INT 2
41823: EQUAL
41824: AND
41825: IFFALSE 41885
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41827: LD_INT 22
41829: PUSH
41830: LD_VAR 0 16
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: PUSH
41839: LD_INT 35
41841: PUSH
41842: LD_INT 49
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: PUSH
41849: LD_INT 91
41851: PUSH
41852: LD_VAR 0 1
41856: PUSH
41857: LD_INT 10
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: LIST
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: LIST
41869: PPUSH
41870: CALL_OW 69
41874: NOT
41875: IFFALSE 41885
// weapon := ru_time_lapser ;
41877: LD_ADDR_VAR 0 18
41881: PUSH
41882: LD_INT 49
41884: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41885: LD_VAR 0 12
41889: PUSH
41890: LD_INT 1
41892: PUSH
41893: LD_INT 2
41895: PUSH
41896: EMPTY
41897: LIST
41898: LIST
41899: IN
41900: PUSH
41901: LD_INT 11
41903: PUSH
41904: LD_VAR 0 5
41908: IN
41909: PUSH
41910: LD_INT 30
41912: PUSH
41913: LD_VAR 0 5
41917: IN
41918: OR
41919: AND
41920: PUSH
41921: LD_INT 6
41923: PPUSH
41924: LD_VAR 0 16
41928: PPUSH
41929: CALL_OW 321
41933: PUSH
41934: LD_INT 2
41936: EQUAL
41937: AND
41938: IFFALSE 42103
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41940: LD_INT 22
41942: PUSH
41943: LD_VAR 0 16
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 2
41954: PUSH
41955: LD_INT 35
41957: PUSH
41958: LD_INT 11
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PUSH
41965: LD_INT 35
41967: PUSH
41968: LD_INT 30
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: PUSH
41975: EMPTY
41976: LIST
41977: LIST
41978: LIST
41979: PUSH
41980: LD_INT 91
41982: PUSH
41983: LD_VAR 0 1
41987: PUSH
41988: LD_INT 18
41990: PUSH
41991: EMPTY
41992: LIST
41993: LIST
41994: LIST
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: LIST
42000: PPUSH
42001: CALL_OW 69
42005: NOT
42006: PUSH
42007: LD_INT 22
42009: PUSH
42010: LD_VAR 0 16
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: PUSH
42019: LD_INT 2
42021: PUSH
42022: LD_INT 30
42024: PUSH
42025: LD_INT 32
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: LD_INT 30
42034: PUSH
42035: LD_INT 33
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: LIST
42046: PUSH
42047: LD_INT 91
42049: PUSH
42050: LD_VAR 0 1
42054: PUSH
42055: LD_INT 12
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: LIST
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: LIST
42067: PUSH
42068: EMPTY
42069: LIST
42070: PPUSH
42071: CALL_OW 69
42075: PUSH
42076: LD_INT 2
42078: GREATER
42079: AND
42080: IFFALSE 42103
// weapon := [ us_radar , ar_radar ] [ nat ] ;
42082: LD_ADDR_VAR 0 18
42086: PUSH
42087: LD_INT 11
42089: PUSH
42090: LD_INT 30
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: PUSH
42097: LD_VAR 0 12
42101: ARRAY
42102: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
42103: LD_VAR 0 18
42107: NOT
42108: PUSH
42109: LD_INT 40
42111: PPUSH
42112: LD_VAR 0 16
42116: PPUSH
42117: CALL_OW 321
42121: PUSH
42122: LD_INT 2
42124: EQUAL
42125: AND
42126: PUSH
42127: LD_INT 7
42129: PUSH
42130: LD_VAR 0 5
42134: IN
42135: PUSH
42136: LD_INT 28
42138: PUSH
42139: LD_VAR 0 5
42143: IN
42144: OR
42145: PUSH
42146: LD_INT 45
42148: PUSH
42149: LD_VAR 0 5
42153: IN
42154: OR
42155: AND
42156: IFFALSE 42410
// begin hex := GetHexInfo ( x , y ) ;
42158: LD_ADDR_VAR 0 4
42162: PUSH
42163: LD_VAR 0 10
42167: PPUSH
42168: LD_VAR 0 11
42172: PPUSH
42173: CALL_OW 546
42177: ST_TO_ADDR
// if hex [ 1 ] then
42178: LD_VAR 0 4
42182: PUSH
42183: LD_INT 1
42185: ARRAY
42186: IFFALSE 42190
// exit ;
42188: GO 42593
// height := hex [ 2 ] ;
42190: LD_ADDR_VAR 0 15
42194: PUSH
42195: LD_VAR 0 4
42199: PUSH
42200: LD_INT 2
42202: ARRAY
42203: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
42204: LD_ADDR_VAR 0 14
42208: PUSH
42209: LD_INT 0
42211: PUSH
42212: LD_INT 2
42214: PUSH
42215: LD_INT 3
42217: PUSH
42218: LD_INT 5
42220: PUSH
42221: EMPTY
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: ST_TO_ADDR
// for i in tmp do
42227: LD_ADDR_VAR 0 8
42231: PUSH
42232: LD_VAR 0 14
42236: PUSH
42237: FOR_IN
42238: IFFALSE 42408
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
42240: LD_ADDR_VAR 0 9
42244: PUSH
42245: LD_VAR 0 10
42249: PPUSH
42250: LD_VAR 0 8
42254: PPUSH
42255: LD_INT 5
42257: PPUSH
42258: CALL_OW 272
42262: PUSH
42263: LD_VAR 0 11
42267: PPUSH
42268: LD_VAR 0 8
42272: PPUSH
42273: LD_INT 5
42275: PPUSH
42276: CALL_OW 273
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
42285: LD_VAR 0 9
42289: PUSH
42290: LD_INT 1
42292: ARRAY
42293: PPUSH
42294: LD_VAR 0 9
42298: PUSH
42299: LD_INT 2
42301: ARRAY
42302: PPUSH
42303: CALL_OW 488
42307: IFFALSE 42406
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
42309: LD_ADDR_VAR 0 4
42313: PUSH
42314: LD_VAR 0 9
42318: PUSH
42319: LD_INT 1
42321: ARRAY
42322: PPUSH
42323: LD_VAR 0 9
42327: PUSH
42328: LD_INT 2
42330: ARRAY
42331: PPUSH
42332: CALL_OW 546
42336: ST_TO_ADDR
// if hex [ 1 ] then
42337: LD_VAR 0 4
42341: PUSH
42342: LD_INT 1
42344: ARRAY
42345: IFFALSE 42349
// continue ;
42347: GO 42237
// h := hex [ 2 ] ;
42349: LD_ADDR_VAR 0 13
42353: PUSH
42354: LD_VAR 0 4
42358: PUSH
42359: LD_INT 2
42361: ARRAY
42362: ST_TO_ADDR
// if h + 7 < height then
42363: LD_VAR 0 13
42367: PUSH
42368: LD_INT 7
42370: PLUS
42371: PUSH
42372: LD_VAR 0 15
42376: LESS
42377: IFFALSE 42406
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
42379: LD_ADDR_VAR 0 18
42383: PUSH
42384: LD_INT 7
42386: PUSH
42387: LD_INT 28
42389: PUSH
42390: LD_INT 45
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: LIST
42397: PUSH
42398: LD_VAR 0 12
42402: ARRAY
42403: ST_TO_ADDR
// break ;
42404: GO 42408
// end ; end ; end ;
42406: GO 42237
42408: POP
42409: POP
// end ; if not weapon then
42410: LD_VAR 0 18
42414: NOT
42415: IFFALSE 42475
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
42417: LD_ADDR_VAR 0 5
42421: PUSH
42422: LD_VAR 0 5
42426: PUSH
42427: LD_INT 11
42429: PUSH
42430: LD_INT 30
42432: PUSH
42433: LD_INT 49
42435: PUSH
42436: EMPTY
42437: LIST
42438: LIST
42439: LIST
42440: DIFF
42441: ST_TO_ADDR
// if not list then
42442: LD_VAR 0 5
42446: NOT
42447: IFFALSE 42451
// exit ;
42449: GO 42593
// weapon := list [ rand ( 1 , list ) ] ;
42451: LD_ADDR_VAR 0 18
42455: PUSH
42456: LD_VAR 0 5
42460: PUSH
42461: LD_INT 1
42463: PPUSH
42464: LD_VAR 0 5
42468: PPUSH
42469: CALL_OW 12
42473: ARRAY
42474: ST_TO_ADDR
// end ; if weapon then
42475: LD_VAR 0 18
42479: IFFALSE 42593
// begin tmp := CostOfWeapon ( weapon ) ;
42481: LD_ADDR_VAR 0 14
42485: PUSH
42486: LD_VAR 0 18
42490: PPUSH
42491: CALL_OW 451
42495: ST_TO_ADDR
// j := GetBase ( tower ) ;
42496: LD_ADDR_VAR 0 9
42500: PUSH
42501: LD_VAR 0 1
42505: PPUSH
42506: CALL_OW 274
42510: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42511: LD_VAR 0 9
42515: PPUSH
42516: LD_INT 1
42518: PPUSH
42519: CALL_OW 275
42523: PUSH
42524: LD_VAR 0 14
42528: PUSH
42529: LD_INT 1
42531: ARRAY
42532: GREATEREQUAL
42533: PUSH
42534: LD_VAR 0 9
42538: PPUSH
42539: LD_INT 2
42541: PPUSH
42542: CALL_OW 275
42546: PUSH
42547: LD_VAR 0 14
42551: PUSH
42552: LD_INT 2
42554: ARRAY
42555: GREATEREQUAL
42556: AND
42557: PUSH
42558: LD_VAR 0 9
42562: PPUSH
42563: LD_INT 3
42565: PPUSH
42566: CALL_OW 275
42570: PUSH
42571: LD_VAR 0 14
42575: PUSH
42576: LD_INT 3
42578: ARRAY
42579: GREATEREQUAL
42580: AND
42581: IFFALSE 42593
// result := weapon ;
42583: LD_ADDR_VAR 0 3
42587: PUSH
42588: LD_VAR 0 18
42592: ST_TO_ADDR
// end ; end ;
42593: LD_VAR 0 3
42597: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42598: LD_INT 0
42600: PPUSH
42601: PPUSH
// result := true ;
42602: LD_ADDR_VAR 0 3
42606: PUSH
42607: LD_INT 1
42609: ST_TO_ADDR
// if array1 = array2 then
42610: LD_VAR 0 1
42614: PUSH
42615: LD_VAR 0 2
42619: EQUAL
42620: IFFALSE 42680
// begin for i = 1 to array1 do
42622: LD_ADDR_VAR 0 4
42626: PUSH
42627: DOUBLE
42628: LD_INT 1
42630: DEC
42631: ST_TO_ADDR
42632: LD_VAR 0 1
42636: PUSH
42637: FOR_TO
42638: IFFALSE 42676
// if array1 [ i ] <> array2 [ i ] then
42640: LD_VAR 0 1
42644: PUSH
42645: LD_VAR 0 4
42649: ARRAY
42650: PUSH
42651: LD_VAR 0 2
42655: PUSH
42656: LD_VAR 0 4
42660: ARRAY
42661: NONEQUAL
42662: IFFALSE 42674
// begin result := false ;
42664: LD_ADDR_VAR 0 3
42668: PUSH
42669: LD_INT 0
42671: ST_TO_ADDR
// break ;
42672: GO 42676
// end ;
42674: GO 42637
42676: POP
42677: POP
// end else
42678: GO 42688
// result := false ;
42680: LD_ADDR_VAR 0 3
42684: PUSH
42685: LD_INT 0
42687: ST_TO_ADDR
// end ;
42688: LD_VAR 0 3
42692: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42693: LD_INT 0
42695: PPUSH
42696: PPUSH
42697: PPUSH
// pom := GetBase ( fac ) ;
42698: LD_ADDR_VAR 0 5
42702: PUSH
42703: LD_VAR 0 1
42707: PPUSH
42708: CALL_OW 274
42712: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42713: LD_ADDR_VAR 0 4
42717: PUSH
42718: LD_VAR 0 2
42722: PUSH
42723: LD_INT 1
42725: ARRAY
42726: PPUSH
42727: LD_VAR 0 2
42731: PUSH
42732: LD_INT 2
42734: ARRAY
42735: PPUSH
42736: LD_VAR 0 2
42740: PUSH
42741: LD_INT 3
42743: ARRAY
42744: PPUSH
42745: LD_VAR 0 2
42749: PUSH
42750: LD_INT 4
42752: ARRAY
42753: PPUSH
42754: CALL_OW 449
42758: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42759: LD_ADDR_VAR 0 3
42763: PUSH
42764: LD_VAR 0 5
42768: PPUSH
42769: LD_INT 1
42771: PPUSH
42772: CALL_OW 275
42776: PUSH
42777: LD_VAR 0 4
42781: PUSH
42782: LD_INT 1
42784: ARRAY
42785: GREATEREQUAL
42786: PUSH
42787: LD_VAR 0 5
42791: PPUSH
42792: LD_INT 2
42794: PPUSH
42795: CALL_OW 275
42799: PUSH
42800: LD_VAR 0 4
42804: PUSH
42805: LD_INT 2
42807: ARRAY
42808: GREATEREQUAL
42809: AND
42810: PUSH
42811: LD_VAR 0 5
42815: PPUSH
42816: LD_INT 3
42818: PPUSH
42819: CALL_OW 275
42823: PUSH
42824: LD_VAR 0 4
42828: PUSH
42829: LD_INT 3
42831: ARRAY
42832: GREATEREQUAL
42833: AND
42834: ST_TO_ADDR
// end ;
42835: LD_VAR 0 3
42839: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42840: LD_INT 0
42842: PPUSH
42843: PPUSH
42844: PPUSH
42845: PPUSH
// pom := GetBase ( building ) ;
42846: LD_ADDR_VAR 0 3
42850: PUSH
42851: LD_VAR 0 1
42855: PPUSH
42856: CALL_OW 274
42860: ST_TO_ADDR
// if not pom then
42861: LD_VAR 0 3
42865: NOT
42866: IFFALSE 42870
// exit ;
42868: GO 43040
// btype := GetBType ( building ) ;
42870: LD_ADDR_VAR 0 5
42874: PUSH
42875: LD_VAR 0 1
42879: PPUSH
42880: CALL_OW 266
42884: ST_TO_ADDR
// if btype = b_armoury then
42885: LD_VAR 0 5
42889: PUSH
42890: LD_INT 4
42892: EQUAL
42893: IFFALSE 42903
// btype := b_barracks ;
42895: LD_ADDR_VAR 0 5
42899: PUSH
42900: LD_INT 5
42902: ST_TO_ADDR
// if btype = b_depot then
42903: LD_VAR 0 5
42907: PUSH
42908: LD_INT 0
42910: EQUAL
42911: IFFALSE 42921
// btype := b_warehouse ;
42913: LD_ADDR_VAR 0 5
42917: PUSH
42918: LD_INT 1
42920: ST_TO_ADDR
// if btype = b_workshop then
42921: LD_VAR 0 5
42925: PUSH
42926: LD_INT 2
42928: EQUAL
42929: IFFALSE 42939
// btype := b_factory ;
42931: LD_ADDR_VAR 0 5
42935: PUSH
42936: LD_INT 3
42938: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42939: LD_ADDR_VAR 0 4
42943: PUSH
42944: LD_VAR 0 5
42948: PPUSH
42949: LD_VAR 0 1
42953: PPUSH
42954: CALL_OW 248
42958: PPUSH
42959: CALL_OW 450
42963: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42964: LD_ADDR_VAR 0 2
42968: PUSH
42969: LD_VAR 0 3
42973: PPUSH
42974: LD_INT 1
42976: PPUSH
42977: CALL_OW 275
42981: PUSH
42982: LD_VAR 0 4
42986: PUSH
42987: LD_INT 1
42989: ARRAY
42990: GREATEREQUAL
42991: PUSH
42992: LD_VAR 0 3
42996: PPUSH
42997: LD_INT 2
42999: PPUSH
43000: CALL_OW 275
43004: PUSH
43005: LD_VAR 0 4
43009: PUSH
43010: LD_INT 2
43012: ARRAY
43013: GREATEREQUAL
43014: AND
43015: PUSH
43016: LD_VAR 0 3
43020: PPUSH
43021: LD_INT 3
43023: PPUSH
43024: CALL_OW 275
43028: PUSH
43029: LD_VAR 0 4
43033: PUSH
43034: LD_INT 3
43036: ARRAY
43037: GREATEREQUAL
43038: AND
43039: ST_TO_ADDR
// end ;
43040: LD_VAR 0 2
43044: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
43045: LD_INT 0
43047: PPUSH
43048: PPUSH
43049: PPUSH
// pom := GetBase ( building ) ;
43050: LD_ADDR_VAR 0 4
43054: PUSH
43055: LD_VAR 0 1
43059: PPUSH
43060: CALL_OW 274
43064: ST_TO_ADDR
// if not pom then
43065: LD_VAR 0 4
43069: NOT
43070: IFFALSE 43074
// exit ;
43072: GO 43175
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43074: LD_ADDR_VAR 0 5
43078: PUSH
43079: LD_VAR 0 2
43083: PPUSH
43084: LD_VAR 0 1
43088: PPUSH
43089: CALL_OW 248
43093: PPUSH
43094: CALL_OW 450
43098: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43099: LD_ADDR_VAR 0 3
43103: PUSH
43104: LD_VAR 0 4
43108: PPUSH
43109: LD_INT 1
43111: PPUSH
43112: CALL_OW 275
43116: PUSH
43117: LD_VAR 0 5
43121: PUSH
43122: LD_INT 1
43124: ARRAY
43125: GREATEREQUAL
43126: PUSH
43127: LD_VAR 0 4
43131: PPUSH
43132: LD_INT 2
43134: PPUSH
43135: CALL_OW 275
43139: PUSH
43140: LD_VAR 0 5
43144: PUSH
43145: LD_INT 2
43147: ARRAY
43148: GREATEREQUAL
43149: AND
43150: PUSH
43151: LD_VAR 0 4
43155: PPUSH
43156: LD_INT 3
43158: PPUSH
43159: CALL_OW 275
43163: PUSH
43164: LD_VAR 0 5
43168: PUSH
43169: LD_INT 3
43171: ARRAY
43172: GREATEREQUAL
43173: AND
43174: ST_TO_ADDR
// end ;
43175: LD_VAR 0 3
43179: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
43180: LD_INT 0
43182: PPUSH
43183: PPUSH
43184: PPUSH
43185: PPUSH
43186: PPUSH
43187: PPUSH
43188: PPUSH
43189: PPUSH
43190: PPUSH
43191: PPUSH
// result := false ;
43192: LD_ADDR_VAR 0 6
43196: PUSH
43197: LD_INT 0
43199: ST_TO_ADDR
// if not base or not btype or not x or not y then
43200: LD_VAR 0 1
43204: NOT
43205: PUSH
43206: LD_VAR 0 2
43210: NOT
43211: OR
43212: PUSH
43213: LD_VAR 0 3
43217: NOT
43218: OR
43219: PUSH
43220: LD_VAR 0 4
43224: NOT
43225: OR
43226: IFFALSE 43230
// exit ;
43228: GO 43839
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
43230: LD_ADDR_VAR 0 12
43234: PUSH
43235: LD_VAR 0 2
43239: PPUSH
43240: LD_VAR 0 3
43244: PPUSH
43245: LD_VAR 0 4
43249: PPUSH
43250: LD_VAR 0 5
43254: PPUSH
43255: LD_VAR 0 1
43259: PUSH
43260: LD_INT 1
43262: ARRAY
43263: PPUSH
43264: CALL_OW 248
43268: PPUSH
43269: LD_INT 0
43271: PPUSH
43272: CALL 44676 0 6
43276: ST_TO_ADDR
// if not hexes then
43277: LD_VAR 0 12
43281: NOT
43282: IFFALSE 43286
// exit ;
43284: GO 43839
// for i = 1 to hexes do
43286: LD_ADDR_VAR 0 7
43290: PUSH
43291: DOUBLE
43292: LD_INT 1
43294: DEC
43295: ST_TO_ADDR
43296: LD_VAR 0 12
43300: PUSH
43301: FOR_TO
43302: IFFALSE 43837
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43304: LD_ADDR_VAR 0 11
43308: PUSH
43309: LD_VAR 0 12
43313: PUSH
43314: LD_VAR 0 7
43318: ARRAY
43319: PUSH
43320: LD_INT 1
43322: ARRAY
43323: PPUSH
43324: LD_VAR 0 12
43328: PUSH
43329: LD_VAR 0 7
43333: ARRAY
43334: PUSH
43335: LD_INT 2
43337: ARRAY
43338: PPUSH
43339: CALL_OW 428
43343: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
43344: LD_VAR 0 12
43348: PUSH
43349: LD_VAR 0 7
43353: ARRAY
43354: PUSH
43355: LD_INT 1
43357: ARRAY
43358: PPUSH
43359: LD_VAR 0 12
43363: PUSH
43364: LD_VAR 0 7
43368: ARRAY
43369: PUSH
43370: LD_INT 2
43372: ARRAY
43373: PPUSH
43374: CALL_OW 351
43378: PUSH
43379: LD_VAR 0 12
43383: PUSH
43384: LD_VAR 0 7
43388: ARRAY
43389: PUSH
43390: LD_INT 1
43392: ARRAY
43393: PPUSH
43394: LD_VAR 0 12
43398: PUSH
43399: LD_VAR 0 7
43403: ARRAY
43404: PUSH
43405: LD_INT 2
43407: ARRAY
43408: PPUSH
43409: CALL_OW 488
43413: NOT
43414: OR
43415: PUSH
43416: LD_VAR 0 11
43420: PPUSH
43421: CALL_OW 247
43425: PUSH
43426: LD_INT 3
43428: EQUAL
43429: OR
43430: IFFALSE 43436
// exit ;
43432: POP
43433: POP
43434: GO 43839
// if not tmp or not tmp in base then
43436: LD_VAR 0 11
43440: NOT
43441: PUSH
43442: LD_VAR 0 11
43446: PUSH
43447: LD_VAR 0 1
43451: IN
43452: NOT
43453: OR
43454: IFFALSE 43458
// continue ;
43456: GO 43301
// result := true ;
43458: LD_ADDR_VAR 0 6
43462: PUSH
43463: LD_INT 1
43465: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43466: LD_ADDR_VAR 0 15
43470: PUSH
43471: LD_VAR 0 1
43475: PPUSH
43476: LD_INT 22
43478: PUSH
43479: LD_VAR 0 11
43483: PPUSH
43484: CALL_OW 255
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: LD_INT 2
43495: PUSH
43496: LD_INT 30
43498: PUSH
43499: LD_INT 0
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: LD_INT 30
43508: PUSH
43509: LD_INT 1
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: LIST
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: PPUSH
43525: CALL_OW 72
43529: ST_TO_ADDR
// if dep then
43530: LD_VAR 0 15
43534: IFFALSE 43670
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43536: LD_ADDR_VAR 0 14
43540: PUSH
43541: LD_VAR 0 15
43545: PUSH
43546: LD_INT 1
43548: ARRAY
43549: PPUSH
43550: CALL_OW 250
43554: PPUSH
43555: LD_VAR 0 15
43559: PUSH
43560: LD_INT 1
43562: ARRAY
43563: PPUSH
43564: CALL_OW 254
43568: PPUSH
43569: LD_INT 5
43571: PPUSH
43572: CALL_OW 272
43576: PUSH
43577: LD_VAR 0 15
43581: PUSH
43582: LD_INT 1
43584: ARRAY
43585: PPUSH
43586: CALL_OW 251
43590: PPUSH
43591: LD_VAR 0 15
43595: PUSH
43596: LD_INT 1
43598: ARRAY
43599: PPUSH
43600: CALL_OW 254
43604: PPUSH
43605: LD_INT 5
43607: PPUSH
43608: CALL_OW 273
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43617: LD_VAR 0 14
43621: PUSH
43622: LD_INT 1
43624: ARRAY
43625: PPUSH
43626: LD_VAR 0 14
43630: PUSH
43631: LD_INT 2
43633: ARRAY
43634: PPUSH
43635: CALL_OW 488
43639: IFFALSE 43670
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43641: LD_VAR 0 11
43645: PPUSH
43646: LD_VAR 0 14
43650: PUSH
43651: LD_INT 1
43653: ARRAY
43654: PPUSH
43655: LD_VAR 0 14
43659: PUSH
43660: LD_INT 2
43662: ARRAY
43663: PPUSH
43664: CALL_OW 111
// continue ;
43668: GO 43301
// end ; end ; r := GetDir ( tmp ) ;
43670: LD_ADDR_VAR 0 13
43674: PUSH
43675: LD_VAR 0 11
43679: PPUSH
43680: CALL_OW 254
43684: ST_TO_ADDR
// if r = 5 then
43685: LD_VAR 0 13
43689: PUSH
43690: LD_INT 5
43692: EQUAL
43693: IFFALSE 43703
// r := 0 ;
43695: LD_ADDR_VAR 0 13
43699: PUSH
43700: LD_INT 0
43702: ST_TO_ADDR
// for j = r to 5 do
43703: LD_ADDR_VAR 0 8
43707: PUSH
43708: DOUBLE
43709: LD_VAR 0 13
43713: DEC
43714: ST_TO_ADDR
43715: LD_INT 5
43717: PUSH
43718: FOR_TO
43719: IFFALSE 43833
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43721: LD_ADDR_VAR 0 9
43725: PUSH
43726: LD_VAR 0 11
43730: PPUSH
43731: CALL_OW 250
43735: PPUSH
43736: LD_VAR 0 8
43740: PPUSH
43741: LD_INT 2
43743: PPUSH
43744: CALL_OW 272
43748: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43749: LD_ADDR_VAR 0 10
43753: PUSH
43754: LD_VAR 0 11
43758: PPUSH
43759: CALL_OW 251
43763: PPUSH
43764: LD_VAR 0 8
43768: PPUSH
43769: LD_INT 2
43771: PPUSH
43772: CALL_OW 273
43776: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43777: LD_VAR 0 9
43781: PPUSH
43782: LD_VAR 0 10
43786: PPUSH
43787: CALL_OW 488
43791: PUSH
43792: LD_VAR 0 9
43796: PPUSH
43797: LD_VAR 0 10
43801: PPUSH
43802: CALL_OW 428
43806: NOT
43807: AND
43808: IFFALSE 43831
// begin ComMoveXY ( tmp , _x , _y ) ;
43810: LD_VAR 0 11
43814: PPUSH
43815: LD_VAR 0 9
43819: PPUSH
43820: LD_VAR 0 10
43824: PPUSH
43825: CALL_OW 111
// break ;
43829: GO 43833
// end ; end ;
43831: GO 43718
43833: POP
43834: POP
// end ;
43835: GO 43301
43837: POP
43838: POP
// end ;
43839: LD_VAR 0 6
43843: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
43844: LD_INT 0
43846: PPUSH
43847: PPUSH
43848: PPUSH
43849: PPUSH
43850: PPUSH
43851: PPUSH
43852: PPUSH
43853: PPUSH
43854: PPUSH
43855: PPUSH
// result := false ;
43856: LD_ADDR_VAR 0 6
43860: PUSH
43861: LD_INT 0
43863: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43864: LD_VAR 0 1
43868: NOT
43869: PUSH
43870: LD_VAR 0 1
43874: PPUSH
43875: CALL_OW 266
43879: PUSH
43880: LD_INT 0
43882: PUSH
43883: LD_INT 1
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: IN
43890: NOT
43891: OR
43892: PUSH
43893: LD_VAR 0 2
43897: NOT
43898: OR
43899: PUSH
43900: LD_VAR 0 5
43904: PUSH
43905: LD_INT 0
43907: PUSH
43908: LD_INT 1
43910: PUSH
43911: LD_INT 2
43913: PUSH
43914: LD_INT 3
43916: PUSH
43917: LD_INT 4
43919: PUSH
43920: LD_INT 5
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: LIST
43927: LIST
43928: LIST
43929: LIST
43930: IN
43931: NOT
43932: OR
43933: PUSH
43934: LD_VAR 0 3
43938: PPUSH
43939: LD_VAR 0 4
43943: PPUSH
43944: CALL_OW 488
43948: NOT
43949: OR
43950: IFFALSE 43954
// exit ;
43952: GO 44671
// pom := GetBase ( depot ) ;
43954: LD_ADDR_VAR 0 10
43958: PUSH
43959: LD_VAR 0 1
43963: PPUSH
43964: CALL_OW 274
43968: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43969: LD_ADDR_VAR 0 11
43973: PUSH
43974: LD_VAR 0 2
43978: PPUSH
43979: LD_VAR 0 1
43983: PPUSH
43984: CALL_OW 248
43988: PPUSH
43989: CALL_OW 450
43993: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43994: LD_VAR 0 10
43998: PPUSH
43999: LD_INT 1
44001: PPUSH
44002: CALL_OW 275
44006: PUSH
44007: LD_VAR 0 11
44011: PUSH
44012: LD_INT 1
44014: ARRAY
44015: GREATEREQUAL
44016: PUSH
44017: LD_VAR 0 10
44021: PPUSH
44022: LD_INT 2
44024: PPUSH
44025: CALL_OW 275
44029: PUSH
44030: LD_VAR 0 11
44034: PUSH
44035: LD_INT 2
44037: ARRAY
44038: GREATEREQUAL
44039: AND
44040: PUSH
44041: LD_VAR 0 10
44045: PPUSH
44046: LD_INT 3
44048: PPUSH
44049: CALL_OW 275
44053: PUSH
44054: LD_VAR 0 11
44058: PUSH
44059: LD_INT 3
44061: ARRAY
44062: GREATEREQUAL
44063: AND
44064: NOT
44065: IFFALSE 44069
// exit ;
44067: GO 44671
// if GetBType ( depot ) = b_depot then
44069: LD_VAR 0 1
44073: PPUSH
44074: CALL_OW 266
44078: PUSH
44079: LD_INT 0
44081: EQUAL
44082: IFFALSE 44094
// dist := 28 else
44084: LD_ADDR_VAR 0 14
44088: PUSH
44089: LD_INT 28
44091: ST_TO_ADDR
44092: GO 44102
// dist := 36 ;
44094: LD_ADDR_VAR 0 14
44098: PUSH
44099: LD_INT 36
44101: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44102: LD_VAR 0 1
44106: PPUSH
44107: LD_VAR 0 3
44111: PPUSH
44112: LD_VAR 0 4
44116: PPUSH
44117: CALL_OW 297
44121: PUSH
44122: LD_VAR 0 14
44126: GREATER
44127: IFFALSE 44131
// exit ;
44129: GO 44671
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44131: LD_ADDR_VAR 0 12
44135: PUSH
44136: LD_VAR 0 2
44140: PPUSH
44141: LD_VAR 0 3
44145: PPUSH
44146: LD_VAR 0 4
44150: PPUSH
44151: LD_VAR 0 5
44155: PPUSH
44156: LD_VAR 0 1
44160: PPUSH
44161: CALL_OW 248
44165: PPUSH
44166: LD_INT 0
44168: PPUSH
44169: CALL 44676 0 6
44173: ST_TO_ADDR
// if not hexes then
44174: LD_VAR 0 12
44178: NOT
44179: IFFALSE 44183
// exit ;
44181: GO 44671
// hex := GetHexInfo ( x , y ) ;
44183: LD_ADDR_VAR 0 15
44187: PUSH
44188: LD_VAR 0 3
44192: PPUSH
44193: LD_VAR 0 4
44197: PPUSH
44198: CALL_OW 546
44202: ST_TO_ADDR
// if hex [ 1 ] then
44203: LD_VAR 0 15
44207: PUSH
44208: LD_INT 1
44210: ARRAY
44211: IFFALSE 44215
// exit ;
44213: GO 44671
// height := hex [ 2 ] ;
44215: LD_ADDR_VAR 0 13
44219: PUSH
44220: LD_VAR 0 15
44224: PUSH
44225: LD_INT 2
44227: ARRAY
44228: ST_TO_ADDR
// for i = 1 to hexes do
44229: LD_ADDR_VAR 0 7
44233: PUSH
44234: DOUBLE
44235: LD_INT 1
44237: DEC
44238: ST_TO_ADDR
44239: LD_VAR 0 12
44243: PUSH
44244: FOR_TO
44245: IFFALSE 44575
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44247: LD_VAR 0 12
44251: PUSH
44252: LD_VAR 0 7
44256: ARRAY
44257: PUSH
44258: LD_INT 1
44260: ARRAY
44261: PPUSH
44262: LD_VAR 0 12
44266: PUSH
44267: LD_VAR 0 7
44271: ARRAY
44272: PUSH
44273: LD_INT 2
44275: ARRAY
44276: PPUSH
44277: CALL_OW 488
44281: NOT
44282: PUSH
44283: LD_VAR 0 12
44287: PUSH
44288: LD_VAR 0 7
44292: ARRAY
44293: PUSH
44294: LD_INT 1
44296: ARRAY
44297: PPUSH
44298: LD_VAR 0 12
44302: PUSH
44303: LD_VAR 0 7
44307: ARRAY
44308: PUSH
44309: LD_INT 2
44311: ARRAY
44312: PPUSH
44313: CALL_OW 428
44317: PUSH
44318: LD_INT 0
44320: GREATER
44321: OR
44322: PUSH
44323: LD_VAR 0 12
44327: PUSH
44328: LD_VAR 0 7
44332: ARRAY
44333: PUSH
44334: LD_INT 1
44336: ARRAY
44337: PPUSH
44338: LD_VAR 0 12
44342: PUSH
44343: LD_VAR 0 7
44347: ARRAY
44348: PUSH
44349: LD_INT 2
44351: ARRAY
44352: PPUSH
44353: CALL_OW 351
44357: OR
44358: IFFALSE 44364
// exit ;
44360: POP
44361: POP
44362: GO 44671
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44364: LD_ADDR_VAR 0 8
44368: PUSH
44369: LD_VAR 0 12
44373: PUSH
44374: LD_VAR 0 7
44378: ARRAY
44379: PUSH
44380: LD_INT 1
44382: ARRAY
44383: PPUSH
44384: LD_VAR 0 12
44388: PUSH
44389: LD_VAR 0 7
44393: ARRAY
44394: PUSH
44395: LD_INT 2
44397: ARRAY
44398: PPUSH
44399: CALL_OW 546
44403: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44404: LD_VAR 0 8
44408: PUSH
44409: LD_INT 1
44411: ARRAY
44412: PUSH
44413: LD_VAR 0 8
44417: PUSH
44418: LD_INT 2
44420: ARRAY
44421: PUSH
44422: LD_VAR 0 13
44426: PUSH
44427: LD_INT 2
44429: PLUS
44430: GREATER
44431: OR
44432: PUSH
44433: LD_VAR 0 8
44437: PUSH
44438: LD_INT 2
44440: ARRAY
44441: PUSH
44442: LD_VAR 0 13
44446: PUSH
44447: LD_INT 2
44449: MINUS
44450: LESS
44451: OR
44452: PUSH
44453: LD_VAR 0 8
44457: PUSH
44458: LD_INT 3
44460: ARRAY
44461: PUSH
44462: LD_INT 0
44464: PUSH
44465: LD_INT 8
44467: PUSH
44468: LD_INT 9
44470: PUSH
44471: LD_INT 10
44473: PUSH
44474: LD_INT 11
44476: PUSH
44477: LD_INT 12
44479: PUSH
44480: LD_INT 13
44482: PUSH
44483: LD_INT 16
44485: PUSH
44486: LD_INT 17
44488: PUSH
44489: LD_INT 18
44491: PUSH
44492: LD_INT 19
44494: PUSH
44495: LD_INT 20
44497: PUSH
44498: LD_INT 21
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: IN
44516: NOT
44517: OR
44518: PUSH
44519: LD_VAR 0 8
44523: PUSH
44524: LD_INT 5
44526: ARRAY
44527: NOT
44528: OR
44529: PUSH
44530: LD_VAR 0 8
44534: PUSH
44535: LD_INT 6
44537: ARRAY
44538: PUSH
44539: LD_INT 1
44541: PUSH
44542: LD_INT 2
44544: PUSH
44545: LD_INT 7
44547: PUSH
44548: LD_INT 9
44550: PUSH
44551: LD_INT 10
44553: PUSH
44554: LD_INT 11
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: LIST
44561: LIST
44562: LIST
44563: LIST
44564: IN
44565: NOT
44566: OR
44567: IFFALSE 44573
// exit ;
44569: POP
44570: POP
44571: GO 44671
// end ;
44573: GO 44244
44575: POP
44576: POP
// side := GetSide ( depot ) ;
44577: LD_ADDR_VAR 0 9
44581: PUSH
44582: LD_VAR 0 1
44586: PPUSH
44587: CALL_OW 255
44591: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44592: LD_VAR 0 9
44596: PPUSH
44597: LD_VAR 0 3
44601: PPUSH
44602: LD_VAR 0 4
44606: PPUSH
44607: LD_INT 20
44609: PPUSH
44610: CALL 37325 0 4
44614: PUSH
44615: LD_INT 4
44617: ARRAY
44618: IFFALSE 44622
// exit ;
44620: GO 44671
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44622: LD_VAR 0 2
44626: PUSH
44627: LD_INT 29
44629: PUSH
44630: LD_INT 30
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: IN
44637: PUSH
44638: LD_VAR 0 3
44642: PPUSH
44643: LD_VAR 0 4
44647: PPUSH
44648: LD_VAR 0 9
44652: PPUSH
44653: CALL_OW 440
44657: NOT
44658: AND
44659: IFFALSE 44663
// exit ;
44661: GO 44671
// result := true ;
44663: LD_ADDR_VAR 0 6
44667: PUSH
44668: LD_INT 1
44670: ST_TO_ADDR
// end ;
44671: LD_VAR 0 6
44675: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
44676: LD_INT 0
44678: PPUSH
44679: PPUSH
44680: PPUSH
44681: PPUSH
44682: PPUSH
44683: PPUSH
44684: PPUSH
44685: PPUSH
44686: PPUSH
44687: PPUSH
44688: PPUSH
44689: PPUSH
44690: PPUSH
44691: PPUSH
44692: PPUSH
44693: PPUSH
44694: PPUSH
44695: PPUSH
44696: PPUSH
44697: PPUSH
44698: PPUSH
44699: PPUSH
44700: PPUSH
44701: PPUSH
44702: PPUSH
44703: PPUSH
44704: PPUSH
44705: PPUSH
44706: PPUSH
44707: PPUSH
44708: PPUSH
44709: PPUSH
44710: PPUSH
44711: PPUSH
44712: PPUSH
44713: PPUSH
44714: PPUSH
44715: PPUSH
44716: PPUSH
44717: PPUSH
44718: PPUSH
44719: PPUSH
44720: PPUSH
44721: PPUSH
44722: PPUSH
44723: PPUSH
44724: PPUSH
44725: PPUSH
44726: PPUSH
44727: PPUSH
44728: PPUSH
44729: PPUSH
44730: PPUSH
44731: PPUSH
44732: PPUSH
44733: PPUSH
44734: PPUSH
44735: PPUSH
// result = [ ] ;
44736: LD_ADDR_VAR 0 7
44740: PUSH
44741: EMPTY
44742: ST_TO_ADDR
// temp_list = [ ] ;
44743: LD_ADDR_VAR 0 9
44747: PUSH
44748: EMPTY
44749: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44750: LD_VAR 0 4
44754: PUSH
44755: LD_INT 0
44757: PUSH
44758: LD_INT 1
44760: PUSH
44761: LD_INT 2
44763: PUSH
44764: LD_INT 3
44766: PUSH
44767: LD_INT 4
44769: PUSH
44770: LD_INT 5
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: IN
44781: NOT
44782: PUSH
44783: LD_VAR 0 1
44787: PUSH
44788: LD_INT 0
44790: PUSH
44791: LD_INT 1
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: IN
44798: PUSH
44799: LD_VAR 0 5
44803: PUSH
44804: LD_INT 1
44806: PUSH
44807: LD_INT 2
44809: PUSH
44810: LD_INT 3
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: LIST
44817: IN
44818: NOT
44819: AND
44820: OR
44821: IFFALSE 44825
// exit ;
44823: GO 63216
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44825: LD_VAR 0 1
44829: PUSH
44830: LD_INT 6
44832: PUSH
44833: LD_INT 7
44835: PUSH
44836: LD_INT 8
44838: PUSH
44839: LD_INT 13
44841: PUSH
44842: LD_INT 12
44844: PUSH
44845: LD_INT 15
44847: PUSH
44848: LD_INT 11
44850: PUSH
44851: LD_INT 14
44853: PUSH
44854: LD_INT 10
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: LIST
44861: LIST
44862: LIST
44863: LIST
44864: LIST
44865: LIST
44866: LIST
44867: IN
44868: IFFALSE 44878
// btype = b_lab ;
44870: LD_ADDR_VAR 0 1
44874: PUSH
44875: LD_INT 6
44877: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44878: LD_VAR 0 6
44882: PUSH
44883: LD_INT 0
44885: PUSH
44886: LD_INT 1
44888: PUSH
44889: LD_INT 2
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: LIST
44896: IN
44897: NOT
44898: PUSH
44899: LD_VAR 0 1
44903: PUSH
44904: LD_INT 0
44906: PUSH
44907: LD_INT 1
44909: PUSH
44910: LD_INT 2
44912: PUSH
44913: LD_INT 3
44915: PUSH
44916: LD_INT 6
44918: PUSH
44919: LD_INT 36
44921: PUSH
44922: LD_INT 4
44924: PUSH
44925: LD_INT 5
44927: PUSH
44928: LD_INT 31
44930: PUSH
44931: LD_INT 32
44933: PUSH
44934: LD_INT 33
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: LIST
44941: LIST
44942: LIST
44943: LIST
44944: LIST
44945: LIST
44946: LIST
44947: LIST
44948: LIST
44949: IN
44950: NOT
44951: PUSH
44952: LD_VAR 0 6
44956: PUSH
44957: LD_INT 1
44959: EQUAL
44960: AND
44961: OR
44962: PUSH
44963: LD_VAR 0 1
44967: PUSH
44968: LD_INT 2
44970: PUSH
44971: LD_INT 3
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: IN
44978: NOT
44979: PUSH
44980: LD_VAR 0 6
44984: PUSH
44985: LD_INT 2
44987: EQUAL
44988: AND
44989: OR
44990: IFFALSE 45000
// mode = 0 ;
44992: LD_ADDR_VAR 0 6
44996: PUSH
44997: LD_INT 0
44999: ST_TO_ADDR
// case mode of 0 :
45000: LD_VAR 0 6
45004: PUSH
45005: LD_INT 0
45007: DOUBLE
45008: EQUAL
45009: IFTRUE 45013
45011: GO 56466
45013: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45014: LD_ADDR_VAR 0 11
45018: PUSH
45019: LD_INT 0
45021: PUSH
45022: LD_INT 0
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 0
45031: PUSH
45032: LD_INT 1
45034: NEG
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 1
45042: PUSH
45043: LD_INT 0
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: PUSH
45050: LD_INT 1
45052: PUSH
45053: LD_INT 1
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: PUSH
45060: LD_INT 0
45062: PUSH
45063: LD_INT 1
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 1
45072: NEG
45073: PUSH
45074: LD_INT 0
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: PUSH
45081: LD_INT 1
45083: NEG
45084: PUSH
45085: LD_INT 1
45087: NEG
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: LD_INT 1
45095: NEG
45096: PUSH
45097: LD_INT 2
45099: NEG
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: LD_INT 0
45107: PUSH
45108: LD_INT 2
45110: NEG
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 1
45118: PUSH
45119: LD_INT 1
45121: NEG
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 1
45129: PUSH
45130: LD_INT 2
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: LD_INT 0
45139: PUSH
45140: LD_INT 2
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 1
45149: NEG
45150: PUSH
45151: LD_INT 1
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: PUSH
45158: LD_INT 1
45160: PUSH
45161: LD_INT 3
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: PUSH
45168: LD_INT 0
45170: PUSH
45171: LD_INT 3
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: PUSH
45178: LD_INT 1
45180: NEG
45181: PUSH
45182: LD_INT 2
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: LIST
45193: LIST
45194: LIST
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45207: LD_ADDR_VAR 0 12
45211: PUSH
45212: LD_INT 0
45214: PUSH
45215: LD_INT 0
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: PUSH
45222: LD_INT 0
45224: PUSH
45225: LD_INT 1
45227: NEG
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 1
45235: PUSH
45236: LD_INT 0
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: PUSH
45243: LD_INT 1
45245: PUSH
45246: LD_INT 1
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: PUSH
45253: LD_INT 0
45255: PUSH
45256: LD_INT 1
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: LD_INT 1
45265: NEG
45266: PUSH
45267: LD_INT 0
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: PUSH
45274: LD_INT 1
45276: NEG
45277: PUSH
45278: LD_INT 1
45280: NEG
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: PUSH
45286: LD_INT 1
45288: PUSH
45289: LD_INT 1
45291: NEG
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 2
45299: PUSH
45300: LD_INT 0
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: LD_INT 2
45309: PUSH
45310: LD_INT 1
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 1
45319: NEG
45320: PUSH
45321: LD_INT 1
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: LD_INT 2
45330: NEG
45331: PUSH
45332: LD_INT 0
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PUSH
45339: LD_INT 2
45341: NEG
45342: PUSH
45343: LD_INT 1
45345: NEG
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: LD_INT 2
45353: NEG
45354: PUSH
45355: LD_INT 1
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: PUSH
45362: LD_INT 3
45364: NEG
45365: PUSH
45366: LD_INT 0
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: PUSH
45373: LD_INT 3
45375: NEG
45376: PUSH
45377: LD_INT 1
45379: NEG
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: LIST
45389: LIST
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: LIST
45395: LIST
45396: LIST
45397: LIST
45398: LIST
45399: LIST
45400: LIST
45401: LIST
45402: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45403: LD_ADDR_VAR 0 13
45407: PUSH
45408: LD_INT 0
45410: PUSH
45411: LD_INT 0
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PUSH
45418: LD_INT 0
45420: PUSH
45421: LD_INT 1
45423: NEG
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: PUSH
45429: LD_INT 1
45431: PUSH
45432: LD_INT 0
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: PUSH
45439: LD_INT 1
45441: PUSH
45442: LD_INT 1
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: PUSH
45449: LD_INT 0
45451: PUSH
45452: LD_INT 1
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: PUSH
45459: LD_INT 1
45461: NEG
45462: PUSH
45463: LD_INT 0
45465: PUSH
45466: EMPTY
45467: LIST
45468: LIST
45469: PUSH
45470: LD_INT 1
45472: NEG
45473: PUSH
45474: LD_INT 1
45476: NEG
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: LD_INT 1
45484: NEG
45485: PUSH
45486: LD_INT 2
45488: NEG
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: PUSH
45494: LD_INT 2
45496: PUSH
45497: LD_INT 1
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: LD_INT 2
45506: PUSH
45507: LD_INT 2
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: LD_INT 1
45516: PUSH
45517: LD_INT 2
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: PUSH
45524: LD_INT 2
45526: NEG
45527: PUSH
45528: LD_INT 1
45530: NEG
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 2
45538: NEG
45539: PUSH
45540: LD_INT 2
45542: NEG
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: PUSH
45548: LD_INT 2
45550: NEG
45551: PUSH
45552: LD_INT 3
45554: NEG
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 3
45562: NEG
45563: PUSH
45564: LD_INT 2
45566: NEG
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 3
45574: NEG
45575: PUSH
45576: LD_INT 3
45578: NEG
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: LIST
45588: LIST
45589: LIST
45590: LIST
45591: LIST
45592: LIST
45593: LIST
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45602: LD_ADDR_VAR 0 14
45606: PUSH
45607: LD_INT 0
45609: PUSH
45610: LD_INT 0
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: LD_INT 0
45619: PUSH
45620: LD_INT 1
45622: NEG
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: LD_INT 1
45630: PUSH
45631: LD_INT 0
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: LD_INT 1
45640: PUSH
45641: LD_INT 1
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 0
45650: PUSH
45651: LD_INT 1
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 1
45660: NEG
45661: PUSH
45662: LD_INT 0
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: PUSH
45669: LD_INT 1
45671: NEG
45672: PUSH
45673: LD_INT 1
45675: NEG
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 1
45683: NEG
45684: PUSH
45685: LD_INT 2
45687: NEG
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: LD_INT 0
45695: PUSH
45696: LD_INT 2
45698: NEG
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 1
45706: PUSH
45707: LD_INT 1
45709: NEG
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: LD_INT 1
45717: PUSH
45718: LD_INT 2
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: LD_INT 0
45727: PUSH
45728: LD_INT 2
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 1
45737: NEG
45738: PUSH
45739: LD_INT 1
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: LD_INT 1
45748: NEG
45749: PUSH
45750: LD_INT 3
45752: NEG
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 0
45760: PUSH
45761: LD_INT 3
45763: NEG
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 1
45771: PUSH
45772: LD_INT 2
45774: NEG
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: LIST
45784: LIST
45785: LIST
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45798: LD_ADDR_VAR 0 15
45802: PUSH
45803: LD_INT 0
45805: PUSH
45806: LD_INT 0
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: PUSH
45813: LD_INT 0
45815: PUSH
45816: LD_INT 1
45818: NEG
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 1
45826: PUSH
45827: LD_INT 0
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 1
45836: PUSH
45837: LD_INT 1
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: PUSH
45844: LD_INT 0
45846: PUSH
45847: LD_INT 1
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: LD_INT 1
45856: NEG
45857: PUSH
45858: LD_INT 0
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: LD_INT 1
45867: NEG
45868: PUSH
45869: LD_INT 1
45871: NEG
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: PUSH
45877: LD_INT 1
45879: PUSH
45880: LD_INT 1
45882: NEG
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: PUSH
45888: LD_INT 2
45890: PUSH
45891: LD_INT 0
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: PUSH
45898: LD_INT 2
45900: PUSH
45901: LD_INT 1
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: PUSH
45908: LD_INT 1
45910: NEG
45911: PUSH
45912: LD_INT 1
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: LD_INT 2
45921: NEG
45922: PUSH
45923: LD_INT 0
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 2
45932: NEG
45933: PUSH
45934: LD_INT 1
45936: NEG
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: LD_INT 2
45944: PUSH
45945: LD_INT 1
45947: NEG
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: PUSH
45953: LD_INT 3
45955: PUSH
45956: LD_INT 0
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: PUSH
45963: LD_INT 3
45965: PUSH
45966: LD_INT 1
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: LIST
45988: LIST
45989: LIST
45990: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45991: LD_ADDR_VAR 0 16
45995: PUSH
45996: LD_INT 0
45998: PUSH
45999: LD_INT 0
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 0
46008: PUSH
46009: LD_INT 1
46011: NEG
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: PUSH
46017: LD_INT 1
46019: PUSH
46020: LD_INT 0
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 1
46029: PUSH
46030: LD_INT 1
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 0
46039: PUSH
46040: LD_INT 1
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PUSH
46047: LD_INT 1
46049: NEG
46050: PUSH
46051: LD_INT 0
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: LD_INT 1
46060: NEG
46061: PUSH
46062: LD_INT 1
46064: NEG
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: LD_INT 1
46072: NEG
46073: PUSH
46074: LD_INT 2
46076: NEG
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: PUSH
46082: LD_INT 2
46084: PUSH
46085: LD_INT 1
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: PUSH
46092: LD_INT 2
46094: PUSH
46095: LD_INT 2
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: PUSH
46102: LD_INT 1
46104: PUSH
46105: LD_INT 2
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 2
46114: NEG
46115: PUSH
46116: LD_INT 1
46118: NEG
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: PUSH
46124: LD_INT 2
46126: NEG
46127: PUSH
46128: LD_INT 2
46130: NEG
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: PUSH
46136: LD_INT 3
46138: PUSH
46139: LD_INT 2
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: PUSH
46146: LD_INT 3
46148: PUSH
46149: LD_INT 3
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: LD_INT 2
46158: PUSH
46159: LD_INT 3
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46184: LD_ADDR_VAR 0 17
46188: PUSH
46189: LD_INT 0
46191: PUSH
46192: LD_INT 0
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: PUSH
46199: LD_INT 0
46201: PUSH
46202: LD_INT 1
46204: NEG
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 1
46212: PUSH
46213: LD_INT 0
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: LD_INT 1
46222: PUSH
46223: LD_INT 1
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 0
46232: PUSH
46233: LD_INT 1
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 1
46242: NEG
46243: PUSH
46244: LD_INT 0
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: LD_INT 1
46253: NEG
46254: PUSH
46255: LD_INT 1
46257: NEG
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: LD_INT 1
46265: NEG
46266: PUSH
46267: LD_INT 2
46269: NEG
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: LD_INT 0
46277: PUSH
46278: LD_INT 2
46280: NEG
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 1
46288: PUSH
46289: LD_INT 1
46291: NEG
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 2
46299: PUSH
46300: LD_INT 0
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: LD_INT 2
46309: PUSH
46310: LD_INT 1
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 2
46319: PUSH
46320: LD_INT 2
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: PUSH
46327: LD_INT 1
46329: PUSH
46330: LD_INT 2
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: LD_INT 0
46339: PUSH
46340: LD_INT 2
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: LD_INT 1
46349: NEG
46350: PUSH
46351: LD_INT 1
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: LD_INT 2
46360: NEG
46361: PUSH
46362: LD_INT 0
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 2
46371: NEG
46372: PUSH
46373: LD_INT 1
46375: NEG
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 2
46383: NEG
46384: PUSH
46385: LD_INT 2
46387: NEG
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: LIST
46397: LIST
46398: LIST
46399: LIST
46400: LIST
46401: LIST
46402: LIST
46403: LIST
46404: LIST
46405: LIST
46406: LIST
46407: LIST
46408: LIST
46409: LIST
46410: LIST
46411: LIST
46412: LIST
46413: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46414: LD_ADDR_VAR 0 18
46418: PUSH
46419: LD_INT 0
46421: PUSH
46422: LD_INT 0
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: PUSH
46429: LD_INT 0
46431: PUSH
46432: LD_INT 1
46434: NEG
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: LD_INT 1
46442: PUSH
46443: LD_INT 0
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 1
46452: PUSH
46453: LD_INT 1
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 0
46462: PUSH
46463: LD_INT 1
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 1
46472: NEG
46473: PUSH
46474: LD_INT 0
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 1
46483: NEG
46484: PUSH
46485: LD_INT 1
46487: NEG
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 1
46495: NEG
46496: PUSH
46497: LD_INT 2
46499: NEG
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 0
46507: PUSH
46508: LD_INT 2
46510: NEG
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PUSH
46516: LD_INT 1
46518: PUSH
46519: LD_INT 1
46521: NEG
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: PUSH
46527: LD_INT 2
46529: PUSH
46530: LD_INT 0
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: LD_INT 2
46539: PUSH
46540: LD_INT 1
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 2
46549: PUSH
46550: LD_INT 2
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: LD_INT 1
46559: PUSH
46560: LD_INT 2
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 0
46569: PUSH
46570: LD_INT 2
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 1
46579: NEG
46580: PUSH
46581: LD_INT 1
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 2
46590: NEG
46591: PUSH
46592: LD_INT 0
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 2
46601: NEG
46602: PUSH
46603: LD_INT 1
46605: NEG
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: LD_INT 2
46613: NEG
46614: PUSH
46615: LD_INT 2
46617: NEG
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: LIST
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: LIST
46632: LIST
46633: LIST
46634: LIST
46635: LIST
46636: LIST
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: LIST
46643: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46644: LD_ADDR_VAR 0 19
46648: PUSH
46649: LD_INT 0
46651: PUSH
46652: LD_INT 0
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 0
46661: PUSH
46662: LD_INT 1
46664: NEG
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 1
46672: PUSH
46673: LD_INT 0
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 1
46682: PUSH
46683: LD_INT 1
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 0
46692: PUSH
46693: LD_INT 1
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 1
46702: NEG
46703: PUSH
46704: LD_INT 0
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 1
46713: NEG
46714: PUSH
46715: LD_INT 1
46717: NEG
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: PUSH
46723: LD_INT 1
46725: NEG
46726: PUSH
46727: LD_INT 2
46729: NEG
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: LD_INT 0
46737: PUSH
46738: LD_INT 2
46740: NEG
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 1
46748: PUSH
46749: LD_INT 1
46751: NEG
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 2
46759: PUSH
46760: LD_INT 0
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 2
46769: PUSH
46770: LD_INT 1
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 2
46779: PUSH
46780: LD_INT 2
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: LD_INT 1
46789: PUSH
46790: LD_INT 2
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 0
46799: PUSH
46800: LD_INT 2
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 1
46809: NEG
46810: PUSH
46811: LD_INT 1
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: LD_INT 2
46820: NEG
46821: PUSH
46822: LD_INT 0
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: LD_INT 2
46831: NEG
46832: PUSH
46833: LD_INT 1
46835: NEG
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 2
46843: NEG
46844: PUSH
46845: LD_INT 2
46847: NEG
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: LIST
46857: LIST
46858: LIST
46859: LIST
46860: LIST
46861: LIST
46862: LIST
46863: LIST
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: LIST
46873: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46874: LD_ADDR_VAR 0 20
46878: PUSH
46879: LD_INT 0
46881: PUSH
46882: LD_INT 0
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 0
46891: PUSH
46892: LD_INT 1
46894: NEG
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 1
46902: PUSH
46903: LD_INT 0
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 1
46912: PUSH
46913: LD_INT 1
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 0
46922: PUSH
46923: LD_INT 1
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 1
46932: NEG
46933: PUSH
46934: LD_INT 0
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 1
46943: NEG
46944: PUSH
46945: LD_INT 1
46947: NEG
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: LD_INT 1
46955: NEG
46956: PUSH
46957: LD_INT 2
46959: NEG
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: LD_INT 0
46967: PUSH
46968: LD_INT 2
46970: NEG
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 1
46978: PUSH
46979: LD_INT 1
46981: NEG
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 2
46989: PUSH
46990: LD_INT 0
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 2
46999: PUSH
47000: LD_INT 1
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 2
47009: PUSH
47010: LD_INT 2
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: LD_INT 1
47019: PUSH
47020: LD_INT 2
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 0
47029: PUSH
47030: LD_INT 2
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 1
47039: NEG
47040: PUSH
47041: LD_INT 1
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 2
47050: NEG
47051: PUSH
47052: LD_INT 0
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 2
47061: NEG
47062: PUSH
47063: LD_INT 1
47065: NEG
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 2
47073: NEG
47074: PUSH
47075: LD_INT 2
47077: NEG
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: LIST
47093: LIST
47094: LIST
47095: LIST
47096: LIST
47097: LIST
47098: LIST
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47104: LD_ADDR_VAR 0 21
47108: PUSH
47109: LD_INT 0
47111: PUSH
47112: LD_INT 0
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: PUSH
47119: LD_INT 0
47121: PUSH
47122: LD_INT 1
47124: NEG
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 1
47132: PUSH
47133: LD_INT 0
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 1
47142: PUSH
47143: LD_INT 1
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: LD_INT 0
47152: PUSH
47153: LD_INT 1
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: PUSH
47160: LD_INT 1
47162: NEG
47163: PUSH
47164: LD_INT 0
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: PUSH
47171: LD_INT 1
47173: NEG
47174: PUSH
47175: LD_INT 1
47177: NEG
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 1
47185: NEG
47186: PUSH
47187: LD_INT 2
47189: NEG
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: PUSH
47195: LD_INT 0
47197: PUSH
47198: LD_INT 2
47200: NEG
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 1
47208: PUSH
47209: LD_INT 1
47211: NEG
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_INT 2
47219: PUSH
47220: LD_INT 0
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: LD_INT 2
47229: PUSH
47230: LD_INT 1
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: LD_INT 2
47239: PUSH
47240: LD_INT 2
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 1
47249: PUSH
47250: LD_INT 2
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 0
47259: PUSH
47260: LD_INT 2
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 1
47269: NEG
47270: PUSH
47271: LD_INT 1
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 2
47280: NEG
47281: PUSH
47282: LD_INT 0
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 2
47291: NEG
47292: PUSH
47293: LD_INT 1
47295: NEG
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 2
47303: NEG
47304: PUSH
47305: LD_INT 2
47307: NEG
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: LIST
47317: LIST
47318: LIST
47319: LIST
47320: LIST
47321: LIST
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47334: LD_ADDR_VAR 0 22
47338: PUSH
47339: LD_INT 0
47341: PUSH
47342: LD_INT 0
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 0
47351: PUSH
47352: LD_INT 1
47354: NEG
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 1
47362: PUSH
47363: LD_INT 0
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 1
47372: PUSH
47373: LD_INT 1
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 0
47382: PUSH
47383: LD_INT 1
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 1
47392: NEG
47393: PUSH
47394: LD_INT 0
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: LD_INT 1
47403: NEG
47404: PUSH
47405: LD_INT 1
47407: NEG
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: PUSH
47413: LD_INT 1
47415: NEG
47416: PUSH
47417: LD_INT 2
47419: NEG
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 0
47427: PUSH
47428: LD_INT 2
47430: NEG
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 1
47438: PUSH
47439: LD_INT 1
47441: NEG
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 2
47449: PUSH
47450: LD_INT 0
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 2
47459: PUSH
47460: LD_INT 1
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 2
47469: PUSH
47470: LD_INT 2
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: PUSH
47477: LD_INT 1
47479: PUSH
47480: LD_INT 2
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: LD_INT 0
47489: PUSH
47490: LD_INT 2
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 1
47499: NEG
47500: PUSH
47501: LD_INT 1
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 2
47510: NEG
47511: PUSH
47512: LD_INT 0
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 2
47521: NEG
47522: PUSH
47523: LD_INT 1
47525: NEG
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 2
47533: NEG
47534: PUSH
47535: LD_INT 2
47537: NEG
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47564: LD_ADDR_VAR 0 23
47568: PUSH
47569: LD_INT 0
47571: PUSH
47572: LD_INT 0
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: PUSH
47579: LD_INT 0
47581: PUSH
47582: LD_INT 1
47584: NEG
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 1
47592: PUSH
47593: LD_INT 0
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: LD_INT 1
47602: PUSH
47603: LD_INT 1
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 0
47612: PUSH
47613: LD_INT 1
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 1
47622: NEG
47623: PUSH
47624: LD_INT 0
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 1
47633: NEG
47634: PUSH
47635: LD_INT 1
47637: NEG
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 1
47645: NEG
47646: PUSH
47647: LD_INT 2
47649: NEG
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 0
47657: PUSH
47658: LD_INT 2
47660: NEG
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 1
47668: PUSH
47669: LD_INT 1
47671: NEG
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 2
47679: PUSH
47680: LD_INT 0
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PUSH
47687: LD_INT 2
47689: PUSH
47690: LD_INT 1
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: LD_INT 2
47699: PUSH
47700: LD_INT 2
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 1
47709: PUSH
47710: LD_INT 2
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 0
47719: PUSH
47720: LD_INT 2
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: LD_INT 1
47729: NEG
47730: PUSH
47731: LD_INT 1
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 2
47740: NEG
47741: PUSH
47742: LD_INT 0
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 2
47751: NEG
47752: PUSH
47753: LD_INT 1
47755: NEG
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 2
47763: NEG
47764: PUSH
47765: LD_INT 2
47767: NEG
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: PUSH
47773: LD_INT 2
47775: NEG
47776: PUSH
47777: LD_INT 3
47779: NEG
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 1
47787: NEG
47788: PUSH
47789: LD_INT 3
47791: NEG
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: LD_INT 1
47799: PUSH
47800: LD_INT 2
47802: NEG
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 2
47810: PUSH
47811: LD_INT 1
47813: NEG
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: LIST
47823: LIST
47824: LIST
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47844: LD_ADDR_VAR 0 24
47848: PUSH
47849: LD_INT 0
47851: PUSH
47852: LD_INT 0
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 0
47861: PUSH
47862: LD_INT 1
47864: NEG
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: LD_INT 1
47872: PUSH
47873: LD_INT 0
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: LD_INT 1
47882: PUSH
47883: LD_INT 1
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: LD_INT 0
47892: PUSH
47893: LD_INT 1
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: LD_INT 1
47902: NEG
47903: PUSH
47904: LD_INT 0
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 1
47913: NEG
47914: PUSH
47915: LD_INT 1
47917: NEG
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 1
47925: NEG
47926: PUSH
47927: LD_INT 2
47929: NEG
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: LD_INT 0
47937: PUSH
47938: LD_INT 2
47940: NEG
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: LD_INT 1
47948: PUSH
47949: LD_INT 1
47951: NEG
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 2
47959: PUSH
47960: LD_INT 0
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 2
47969: PUSH
47970: LD_INT 1
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 2
47979: PUSH
47980: LD_INT 2
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PUSH
47987: LD_INT 1
47989: PUSH
47990: LD_INT 2
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 0
47999: PUSH
48000: LD_INT 2
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: PUSH
48007: LD_INT 1
48009: NEG
48010: PUSH
48011: LD_INT 1
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 2
48020: NEG
48021: PUSH
48022: LD_INT 0
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: LD_INT 2
48031: NEG
48032: PUSH
48033: LD_INT 1
48035: NEG
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: PUSH
48041: LD_INT 2
48043: NEG
48044: PUSH
48045: LD_INT 2
48047: NEG
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 1
48055: PUSH
48056: LD_INT 2
48058: NEG
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 2
48066: PUSH
48067: LD_INT 1
48069: NEG
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PUSH
48075: LD_INT 3
48077: PUSH
48078: LD_INT 1
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 3
48087: PUSH
48088: LD_INT 2
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: LIST
48108: LIST
48109: LIST
48110: LIST
48111: LIST
48112: LIST
48113: LIST
48114: LIST
48115: LIST
48116: LIST
48117: LIST
48118: LIST
48119: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48120: LD_ADDR_VAR 0 25
48124: PUSH
48125: LD_INT 0
48127: PUSH
48128: LD_INT 0
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: PUSH
48135: LD_INT 0
48137: PUSH
48138: LD_INT 1
48140: NEG
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: LD_INT 1
48148: PUSH
48149: LD_INT 0
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 1
48158: PUSH
48159: LD_INT 1
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 0
48168: PUSH
48169: LD_INT 1
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: PUSH
48176: LD_INT 1
48178: NEG
48179: PUSH
48180: LD_INT 0
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: LD_INT 1
48189: NEG
48190: PUSH
48191: LD_INT 1
48193: NEG
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 1
48201: NEG
48202: PUSH
48203: LD_INT 2
48205: NEG
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: PUSH
48211: LD_INT 0
48213: PUSH
48214: LD_INT 2
48216: NEG
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: LD_INT 1
48224: PUSH
48225: LD_INT 1
48227: NEG
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: LD_INT 2
48235: PUSH
48236: LD_INT 0
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 2
48245: PUSH
48246: LD_INT 1
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: LD_INT 2
48255: PUSH
48256: LD_INT 2
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: PUSH
48263: LD_INT 1
48265: PUSH
48266: LD_INT 2
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 0
48275: PUSH
48276: LD_INT 2
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: LD_INT 1
48285: NEG
48286: PUSH
48287: LD_INT 1
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: PUSH
48294: LD_INT 2
48296: NEG
48297: PUSH
48298: LD_INT 0
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: PUSH
48305: LD_INT 2
48307: NEG
48308: PUSH
48309: LD_INT 1
48311: NEG
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: LD_INT 2
48319: NEG
48320: PUSH
48321: LD_INT 2
48323: NEG
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: PUSH
48329: LD_INT 3
48331: PUSH
48332: LD_INT 1
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: LD_INT 3
48341: PUSH
48342: LD_INT 2
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: PUSH
48349: LD_INT 2
48351: PUSH
48352: LD_INT 3
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 1
48361: PUSH
48362: LD_INT 3
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: EMPTY
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: LIST
48391: LIST
48392: LIST
48393: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48394: LD_ADDR_VAR 0 26
48398: PUSH
48399: LD_INT 0
48401: PUSH
48402: LD_INT 0
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: LD_INT 0
48411: PUSH
48412: LD_INT 1
48414: NEG
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 1
48422: PUSH
48423: LD_INT 0
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 1
48432: PUSH
48433: LD_INT 1
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 0
48442: PUSH
48443: LD_INT 1
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 1
48452: NEG
48453: PUSH
48454: LD_INT 0
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 1
48463: NEG
48464: PUSH
48465: LD_INT 1
48467: NEG
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: LD_INT 1
48475: NEG
48476: PUSH
48477: LD_INT 2
48479: NEG
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 0
48487: PUSH
48488: LD_INT 2
48490: NEG
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 1
48498: PUSH
48499: LD_INT 1
48501: NEG
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 2
48509: PUSH
48510: LD_INT 0
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 2
48519: PUSH
48520: LD_INT 1
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 2
48529: PUSH
48530: LD_INT 2
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: PUSH
48537: LD_INT 1
48539: PUSH
48540: LD_INT 2
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: LD_INT 0
48549: PUSH
48550: LD_INT 2
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 1
48559: NEG
48560: PUSH
48561: LD_INT 1
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 2
48570: NEG
48571: PUSH
48572: LD_INT 0
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 2
48581: NEG
48582: PUSH
48583: LD_INT 1
48585: NEG
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 2
48593: NEG
48594: PUSH
48595: LD_INT 2
48597: NEG
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 2
48605: PUSH
48606: LD_INT 3
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 1
48615: PUSH
48616: LD_INT 3
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PUSH
48623: LD_INT 1
48625: NEG
48626: PUSH
48627: LD_INT 2
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: LD_INT 2
48636: NEG
48637: PUSH
48638: LD_INT 1
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: LIST
48649: LIST
48650: LIST
48651: LIST
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48670: LD_ADDR_VAR 0 27
48674: PUSH
48675: LD_INT 0
48677: PUSH
48678: LD_INT 0
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 0
48687: PUSH
48688: LD_INT 1
48690: NEG
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 1
48698: PUSH
48699: LD_INT 0
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 1
48708: PUSH
48709: LD_INT 1
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 0
48718: PUSH
48719: LD_INT 1
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: PUSH
48726: LD_INT 1
48728: NEG
48729: PUSH
48730: LD_INT 0
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 1
48739: NEG
48740: PUSH
48741: LD_INT 1
48743: NEG
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 1
48751: NEG
48752: PUSH
48753: LD_INT 2
48755: NEG
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 0
48763: PUSH
48764: LD_INT 2
48766: NEG
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 1
48774: PUSH
48775: LD_INT 1
48777: NEG
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 2
48785: PUSH
48786: LD_INT 0
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 2
48795: PUSH
48796: LD_INT 1
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: LD_INT 2
48805: PUSH
48806: LD_INT 2
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: PUSH
48813: LD_INT 1
48815: PUSH
48816: LD_INT 2
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 0
48825: PUSH
48826: LD_INT 2
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 1
48835: NEG
48836: PUSH
48837: LD_INT 1
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: LD_INT 2
48846: NEG
48847: PUSH
48848: LD_INT 0
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 2
48857: NEG
48858: PUSH
48859: LD_INT 1
48861: NEG
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 2
48869: NEG
48870: PUSH
48871: LD_INT 2
48873: NEG
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: LD_INT 1
48881: NEG
48882: PUSH
48883: LD_INT 2
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 2
48892: NEG
48893: PUSH
48894: LD_INT 1
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: LD_INT 3
48903: NEG
48904: PUSH
48905: LD_INT 1
48907: NEG
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 3
48915: NEG
48916: PUSH
48917: LD_INT 2
48919: NEG
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: LIST
48942: LIST
48943: LIST
48944: LIST
48945: LIST
48946: LIST
48947: LIST
48948: LIST
48949: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48950: LD_ADDR_VAR 0 28
48954: PUSH
48955: LD_INT 0
48957: PUSH
48958: LD_INT 0
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: PUSH
48965: LD_INT 0
48967: PUSH
48968: LD_INT 1
48970: NEG
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 1
48978: PUSH
48979: LD_INT 0
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 1
48988: PUSH
48989: LD_INT 1
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: LD_INT 0
48998: PUSH
48999: LD_INT 1
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PUSH
49006: LD_INT 1
49008: NEG
49009: PUSH
49010: LD_INT 0
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 1
49019: NEG
49020: PUSH
49021: LD_INT 1
49023: NEG
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 1
49031: NEG
49032: PUSH
49033: LD_INT 2
49035: NEG
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: PUSH
49041: LD_INT 0
49043: PUSH
49044: LD_INT 2
49046: NEG
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: LD_INT 1
49054: PUSH
49055: LD_INT 1
49057: NEG
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 2
49065: PUSH
49066: LD_INT 0
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: LD_INT 2
49075: PUSH
49076: LD_INT 1
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 2
49085: PUSH
49086: LD_INT 2
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 1
49095: PUSH
49096: LD_INT 2
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: LD_INT 0
49105: PUSH
49106: LD_INT 2
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 1
49115: NEG
49116: PUSH
49117: LD_INT 1
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PUSH
49124: LD_INT 2
49126: NEG
49127: PUSH
49128: LD_INT 0
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: LD_INT 2
49137: NEG
49138: PUSH
49139: LD_INT 1
49141: NEG
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: LD_INT 2
49149: NEG
49150: PUSH
49151: LD_INT 2
49153: NEG
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PUSH
49159: LD_INT 2
49161: NEG
49162: PUSH
49163: LD_INT 3
49165: NEG
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: LD_INT 1
49173: NEG
49174: PUSH
49175: LD_INT 3
49177: NEG
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 3
49185: NEG
49186: PUSH
49187: LD_INT 1
49189: NEG
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 3
49197: NEG
49198: PUSH
49199: LD_INT 2
49201: NEG
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: LIST
49211: LIST
49212: LIST
49213: LIST
49214: LIST
49215: LIST
49216: LIST
49217: LIST
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: LIST
49225: LIST
49226: LIST
49227: LIST
49228: LIST
49229: LIST
49230: LIST
49231: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49232: LD_ADDR_VAR 0 29
49236: PUSH
49237: LD_INT 0
49239: PUSH
49240: LD_INT 0
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: LD_INT 0
49249: PUSH
49250: LD_INT 1
49252: NEG
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 1
49260: PUSH
49261: LD_INT 0
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: LD_INT 1
49270: PUSH
49271: LD_INT 1
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: PUSH
49278: LD_INT 0
49280: PUSH
49281: LD_INT 1
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 1
49290: NEG
49291: PUSH
49292: LD_INT 0
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 1
49301: NEG
49302: PUSH
49303: LD_INT 1
49305: NEG
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: LD_INT 1
49313: NEG
49314: PUSH
49315: LD_INT 2
49317: NEG
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: PUSH
49323: LD_INT 0
49325: PUSH
49326: LD_INT 2
49328: NEG
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: LD_INT 1
49336: PUSH
49337: LD_INT 1
49339: NEG
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 2
49347: PUSH
49348: LD_INT 0
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: LD_INT 2
49357: PUSH
49358: LD_INT 1
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 1
49367: PUSH
49368: LD_INT 2
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 0
49377: PUSH
49378: LD_INT 2
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: PUSH
49385: LD_INT 1
49387: NEG
49388: PUSH
49389: LD_INT 1
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 2
49398: NEG
49399: PUSH
49400: LD_INT 1
49402: NEG
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 2
49410: NEG
49411: PUSH
49412: LD_INT 2
49414: NEG
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 2
49422: NEG
49423: PUSH
49424: LD_INT 3
49426: NEG
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 2
49434: PUSH
49435: LD_INT 1
49437: NEG
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 3
49445: PUSH
49446: LD_INT 1
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: LD_INT 1
49455: PUSH
49456: LD_INT 3
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: PUSH
49463: LD_INT 1
49465: NEG
49466: PUSH
49467: LD_INT 2
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: LD_INT 3
49476: NEG
49477: PUSH
49478: LD_INT 2
49480: NEG
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: LIST
49492: LIST
49493: LIST
49494: LIST
49495: LIST
49496: LIST
49497: LIST
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49511: LD_ADDR_VAR 0 30
49515: PUSH
49516: LD_INT 0
49518: PUSH
49519: LD_INT 0
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: LD_INT 0
49528: PUSH
49529: LD_INT 1
49531: NEG
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: PUSH
49537: LD_INT 1
49539: PUSH
49540: LD_INT 0
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_INT 1
49549: PUSH
49550: LD_INT 1
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 0
49559: PUSH
49560: LD_INT 1
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 1
49569: NEG
49570: PUSH
49571: LD_INT 0
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PUSH
49578: LD_INT 1
49580: NEG
49581: PUSH
49582: LD_INT 1
49584: NEG
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 1
49592: NEG
49593: PUSH
49594: LD_INT 2
49596: NEG
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: PUSH
49602: LD_INT 0
49604: PUSH
49605: LD_INT 2
49607: NEG
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 1
49615: PUSH
49616: LD_INT 1
49618: NEG
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 2
49626: PUSH
49627: LD_INT 0
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 2
49636: PUSH
49637: LD_INT 1
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: LD_INT 2
49646: PUSH
49647: LD_INT 2
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_INT 1
49656: PUSH
49657: LD_INT 2
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 1
49666: NEG
49667: PUSH
49668: LD_INT 1
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 2
49677: NEG
49678: PUSH
49679: LD_INT 0
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: PUSH
49686: LD_INT 2
49688: NEG
49689: PUSH
49690: LD_INT 1
49692: NEG
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 1
49700: NEG
49701: PUSH
49702: LD_INT 3
49704: NEG
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 1
49712: PUSH
49713: LD_INT 2
49715: NEG
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 3
49723: PUSH
49724: LD_INT 2
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 2
49733: PUSH
49734: LD_INT 3
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 2
49743: NEG
49744: PUSH
49745: LD_INT 1
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 3
49754: NEG
49755: PUSH
49756: LD_INT 1
49758: NEG
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: LIST
49768: LIST
49769: LIST
49770: LIST
49771: LIST
49772: LIST
49773: LIST
49774: LIST
49775: LIST
49776: LIST
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49789: LD_ADDR_VAR 0 31
49793: PUSH
49794: LD_INT 0
49796: PUSH
49797: LD_INT 0
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: PUSH
49804: LD_INT 0
49806: PUSH
49807: LD_INT 1
49809: NEG
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 1
49817: PUSH
49818: LD_INT 0
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 1
49827: PUSH
49828: LD_INT 1
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 0
49837: PUSH
49838: LD_INT 1
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: LD_INT 1
49847: NEG
49848: PUSH
49849: LD_INT 0
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: LD_INT 1
49858: NEG
49859: PUSH
49860: LD_INT 1
49862: NEG
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 1
49870: NEG
49871: PUSH
49872: LD_INT 2
49874: NEG
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 1
49882: PUSH
49883: LD_INT 1
49885: NEG
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 2
49893: PUSH
49894: LD_INT 0
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 2
49903: PUSH
49904: LD_INT 1
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 2
49913: PUSH
49914: LD_INT 2
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 1
49923: PUSH
49924: LD_INT 2
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 0
49933: PUSH
49934: LD_INT 2
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: PUSH
49941: LD_INT 1
49943: NEG
49944: PUSH
49945: LD_INT 1
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 2
49954: NEG
49955: PUSH
49956: LD_INT 1
49958: NEG
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: PUSH
49964: LD_INT 2
49966: NEG
49967: PUSH
49968: LD_INT 2
49970: NEG
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: LD_INT 2
49978: NEG
49979: PUSH
49980: LD_INT 3
49982: NEG
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: LD_INT 2
49990: PUSH
49991: LD_INT 1
49993: NEG
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 3
50001: PUSH
50002: LD_INT 1
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 1
50011: PUSH
50012: LD_INT 3
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 1
50021: NEG
50022: PUSH
50023: LD_INT 2
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 3
50032: NEG
50033: PUSH
50034: LD_INT 2
50036: NEG
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: LIST
50056: LIST
50057: LIST
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: LIST
50066: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50067: LD_ADDR_VAR 0 32
50071: PUSH
50072: LD_INT 0
50074: PUSH
50075: LD_INT 0
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: LD_INT 0
50084: PUSH
50085: LD_INT 1
50087: NEG
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 1
50095: PUSH
50096: LD_INT 0
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: LD_INT 1
50105: PUSH
50106: LD_INT 1
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: LD_INT 0
50115: PUSH
50116: LD_INT 1
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: PUSH
50123: LD_INT 1
50125: NEG
50126: PUSH
50127: LD_INT 0
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 1
50136: NEG
50137: PUSH
50138: LD_INT 1
50140: NEG
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 1
50148: NEG
50149: PUSH
50150: LD_INT 2
50152: NEG
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 0
50160: PUSH
50161: LD_INT 2
50163: NEG
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 1
50171: PUSH
50172: LD_INT 1
50174: NEG
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 2
50182: PUSH
50183: LD_INT 1
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: LD_INT 2
50192: PUSH
50193: LD_INT 2
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: LD_INT 1
50202: PUSH
50203: LD_INT 2
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: LD_INT 0
50212: PUSH
50213: LD_INT 2
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: LD_INT 1
50222: NEG
50223: PUSH
50224: LD_INT 1
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 2
50233: NEG
50234: PUSH
50235: LD_INT 0
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 2
50244: NEG
50245: PUSH
50246: LD_INT 1
50248: NEG
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 1
50256: NEG
50257: PUSH
50258: LD_INT 3
50260: NEG
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 1
50268: PUSH
50269: LD_INT 2
50271: NEG
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: LD_INT 3
50279: PUSH
50280: LD_INT 2
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 2
50289: PUSH
50290: LD_INT 3
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: PUSH
50297: LD_INT 2
50299: NEG
50300: PUSH
50301: LD_INT 1
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: PUSH
50308: LD_INT 3
50310: NEG
50311: PUSH
50312: LD_INT 1
50314: NEG
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50345: LD_ADDR_VAR 0 33
50349: PUSH
50350: LD_INT 0
50352: PUSH
50353: LD_INT 0
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: LD_INT 0
50362: PUSH
50363: LD_INT 1
50365: NEG
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 1
50373: PUSH
50374: LD_INT 0
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: LD_INT 1
50383: PUSH
50384: LD_INT 1
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 0
50393: PUSH
50394: LD_INT 1
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 1
50403: NEG
50404: PUSH
50405: LD_INT 0
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 1
50414: NEG
50415: PUSH
50416: LD_INT 1
50418: NEG
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PUSH
50424: LD_INT 1
50426: NEG
50427: PUSH
50428: LD_INT 2
50430: NEG
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PUSH
50436: LD_INT 1
50438: PUSH
50439: LD_INT 1
50441: NEG
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: PUSH
50447: LD_INT 2
50449: PUSH
50450: LD_INT 0
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 2
50459: PUSH
50460: LD_INT 1
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 1
50469: PUSH
50470: LD_INT 2
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 0
50479: PUSH
50480: LD_INT 2
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: LD_INT 1
50489: NEG
50490: PUSH
50491: LD_INT 1
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_INT 2
50500: NEG
50501: PUSH
50502: LD_INT 0
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: PUSH
50509: LD_INT 2
50511: NEG
50512: PUSH
50513: LD_INT 1
50515: NEG
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 2
50523: NEG
50524: PUSH
50525: LD_INT 2
50527: NEG
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 2
50535: NEG
50536: PUSH
50537: LD_INT 3
50539: NEG
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PUSH
50545: LD_INT 2
50547: PUSH
50548: LD_INT 1
50550: NEG
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: PUSH
50556: LD_INT 3
50558: PUSH
50559: LD_INT 1
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 1
50568: PUSH
50569: LD_INT 3
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: PUSH
50576: LD_INT 1
50578: NEG
50579: PUSH
50580: LD_INT 2
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: LD_INT 3
50589: NEG
50590: PUSH
50591: LD_INT 2
50593: NEG
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50624: LD_ADDR_VAR 0 34
50628: PUSH
50629: LD_INT 0
50631: PUSH
50632: LD_INT 0
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 0
50641: PUSH
50642: LD_INT 1
50644: NEG
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 1
50652: PUSH
50653: LD_INT 0
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 1
50662: PUSH
50663: LD_INT 1
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 0
50672: PUSH
50673: LD_INT 1
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 1
50682: NEG
50683: PUSH
50684: LD_INT 0
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 1
50693: NEG
50694: PUSH
50695: LD_INT 1
50697: NEG
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 1
50705: NEG
50706: PUSH
50707: LD_INT 2
50709: NEG
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: LD_INT 0
50717: PUSH
50718: LD_INT 2
50720: NEG
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 1
50728: PUSH
50729: LD_INT 1
50731: NEG
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 2
50739: PUSH
50740: LD_INT 1
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 2
50749: PUSH
50750: LD_INT 2
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 1
50759: PUSH
50760: LD_INT 2
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 1
50769: NEG
50770: PUSH
50771: LD_INT 1
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: LD_INT 2
50780: NEG
50781: PUSH
50782: LD_INT 0
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 2
50791: NEG
50792: PUSH
50793: LD_INT 1
50795: NEG
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 2
50803: NEG
50804: PUSH
50805: LD_INT 2
50807: NEG
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 1
50815: NEG
50816: PUSH
50817: LD_INT 3
50819: NEG
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 1
50827: PUSH
50828: LD_INT 2
50830: NEG
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 3
50838: PUSH
50839: LD_INT 2
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 2
50848: PUSH
50849: LD_INT 3
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 2
50858: NEG
50859: PUSH
50860: LD_INT 1
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 3
50869: NEG
50870: PUSH
50871: LD_INT 1
50873: NEG
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50904: LD_ADDR_VAR 0 35
50908: PUSH
50909: LD_INT 0
50911: PUSH
50912: LD_INT 0
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 0
50921: PUSH
50922: LD_INT 1
50924: NEG
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 1
50932: PUSH
50933: LD_INT 0
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 1
50942: PUSH
50943: LD_INT 1
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 0
50952: PUSH
50953: LD_INT 1
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 1
50962: NEG
50963: PUSH
50964: LD_INT 0
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 1
50973: NEG
50974: PUSH
50975: LD_INT 1
50977: NEG
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 2
50985: PUSH
50986: LD_INT 1
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 2
50995: NEG
50996: PUSH
50997: LD_INT 1
50999: NEG
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51016: LD_ADDR_VAR 0 36
51020: PUSH
51021: LD_INT 0
51023: PUSH
51024: LD_INT 0
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: LD_INT 0
51033: PUSH
51034: LD_INT 1
51036: NEG
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 1
51044: PUSH
51045: LD_INT 0
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 1
51054: PUSH
51055: LD_INT 1
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 0
51064: PUSH
51065: LD_INT 1
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 1
51074: NEG
51075: PUSH
51076: LD_INT 0
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: LD_INT 1
51085: NEG
51086: PUSH
51087: LD_INT 1
51089: NEG
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 1
51097: NEG
51098: PUSH
51099: LD_INT 2
51101: NEG
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 1
51109: PUSH
51110: LD_INT 2
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51128: LD_ADDR_VAR 0 37
51132: PUSH
51133: LD_INT 0
51135: PUSH
51136: LD_INT 0
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 0
51145: PUSH
51146: LD_INT 1
51148: NEG
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 1
51156: PUSH
51157: LD_INT 0
51159: PUSH
51160: EMPTY
51161: LIST
51162: LIST
51163: PUSH
51164: LD_INT 1
51166: PUSH
51167: LD_INT 1
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 0
51176: PUSH
51177: LD_INT 1
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 1
51186: NEG
51187: PUSH
51188: LD_INT 0
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 1
51197: NEG
51198: PUSH
51199: LD_INT 1
51201: NEG
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 1
51209: PUSH
51210: LD_INT 1
51212: NEG
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 1
51220: NEG
51221: PUSH
51222: LD_INT 1
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51240: LD_ADDR_VAR 0 38
51244: PUSH
51245: LD_INT 0
51247: PUSH
51248: LD_INT 0
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: PUSH
51255: LD_INT 0
51257: PUSH
51258: LD_INT 1
51260: NEG
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: LD_INT 1
51268: PUSH
51269: LD_INT 0
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 1
51278: PUSH
51279: LD_INT 1
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: PUSH
51286: LD_INT 0
51288: PUSH
51289: LD_INT 1
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: LD_INT 1
51298: NEG
51299: PUSH
51300: LD_INT 0
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 1
51309: NEG
51310: PUSH
51311: LD_INT 1
51313: NEG
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 2
51321: PUSH
51322: LD_INT 1
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: LD_INT 2
51331: NEG
51332: PUSH
51333: LD_INT 1
51335: NEG
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51352: LD_ADDR_VAR 0 39
51356: PUSH
51357: LD_INT 0
51359: PUSH
51360: LD_INT 0
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 0
51369: PUSH
51370: LD_INT 1
51372: NEG
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 1
51380: PUSH
51381: LD_INT 0
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: LD_INT 1
51390: PUSH
51391: LD_INT 1
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 0
51400: PUSH
51401: LD_INT 1
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 1
51410: NEG
51411: PUSH
51412: LD_INT 0
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 1
51421: NEG
51422: PUSH
51423: LD_INT 1
51425: NEG
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 1
51433: NEG
51434: PUSH
51435: LD_INT 2
51437: NEG
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 1
51445: PUSH
51446: LD_INT 2
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51464: LD_ADDR_VAR 0 40
51468: PUSH
51469: LD_INT 0
51471: PUSH
51472: LD_INT 0
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 0
51481: PUSH
51482: LD_INT 1
51484: NEG
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 1
51492: PUSH
51493: LD_INT 0
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PUSH
51500: LD_INT 1
51502: PUSH
51503: LD_INT 1
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 0
51512: PUSH
51513: LD_INT 1
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 1
51522: NEG
51523: PUSH
51524: LD_INT 0
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: LD_INT 1
51533: NEG
51534: PUSH
51535: LD_INT 1
51537: NEG
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 1
51545: PUSH
51546: LD_INT 1
51548: NEG
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 1
51556: NEG
51557: PUSH
51558: LD_INT 1
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51576: LD_ADDR_VAR 0 41
51580: PUSH
51581: LD_INT 0
51583: PUSH
51584: LD_INT 0
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: LD_INT 0
51593: PUSH
51594: LD_INT 1
51596: NEG
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 1
51604: PUSH
51605: LD_INT 0
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 1
51614: PUSH
51615: LD_INT 1
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 0
51624: PUSH
51625: LD_INT 1
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 1
51634: NEG
51635: PUSH
51636: LD_INT 0
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 1
51645: NEG
51646: PUSH
51647: LD_INT 1
51649: NEG
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 1
51657: NEG
51658: PUSH
51659: LD_INT 2
51661: NEG
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: LD_INT 1
51669: PUSH
51670: LD_INT 1
51672: NEG
51673: PUSH
51674: EMPTY
51675: LIST
51676: LIST
51677: PUSH
51678: LD_INT 2
51680: PUSH
51681: LD_INT 0
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 2
51690: PUSH
51691: LD_INT 1
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 2
51700: PUSH
51701: LD_INT 2
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 1
51710: PUSH
51711: LD_INT 2
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 1
51720: NEG
51721: PUSH
51722: LD_INT 1
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 2
51731: NEG
51732: PUSH
51733: LD_INT 0
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 2
51742: NEG
51743: PUSH
51744: LD_INT 1
51746: NEG
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: PUSH
51752: LD_INT 2
51754: NEG
51755: PUSH
51756: LD_INT 2
51758: NEG
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: PUSH
51764: LD_INT 2
51766: NEG
51767: PUSH
51768: LD_INT 3
51770: NEG
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 2
51778: PUSH
51779: LD_INT 1
51781: NEG
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 3
51789: PUSH
51790: LD_INT 0
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 3
51799: PUSH
51800: LD_INT 1
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 3
51809: PUSH
51810: LD_INT 2
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 3
51819: PUSH
51820: LD_INT 3
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 2
51829: PUSH
51830: LD_INT 3
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 2
51839: NEG
51840: PUSH
51841: LD_INT 1
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 3
51850: NEG
51851: PUSH
51852: LD_INT 0
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 3
51861: NEG
51862: PUSH
51863: LD_INT 1
51865: NEG
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 3
51873: NEG
51874: PUSH
51875: LD_INT 2
51877: NEG
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 3
51885: NEG
51886: PUSH
51887: LD_INT 3
51889: NEG
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: LIST
51925: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51926: LD_ADDR_VAR 0 42
51930: PUSH
51931: LD_INT 0
51933: PUSH
51934: LD_INT 0
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 0
51943: PUSH
51944: LD_INT 1
51946: NEG
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 1
51954: PUSH
51955: LD_INT 0
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 1
51964: PUSH
51965: LD_INT 1
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: LD_INT 0
51974: PUSH
51975: LD_INT 1
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 1
51984: NEG
51985: PUSH
51986: LD_INT 0
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 1
51995: NEG
51996: PUSH
51997: LD_INT 1
51999: NEG
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PUSH
52005: LD_INT 1
52007: NEG
52008: PUSH
52009: LD_INT 2
52011: NEG
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 0
52019: PUSH
52020: LD_INT 2
52022: NEG
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 1
52030: PUSH
52031: LD_INT 1
52033: NEG
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 2
52041: PUSH
52042: LD_INT 1
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 2
52051: PUSH
52052: LD_INT 2
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 1
52061: PUSH
52062: LD_INT 2
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 0
52071: PUSH
52072: LD_INT 2
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: LD_INT 1
52081: NEG
52082: PUSH
52083: LD_INT 1
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: LD_INT 2
52092: NEG
52093: PUSH
52094: LD_INT 1
52096: NEG
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 2
52104: NEG
52105: PUSH
52106: LD_INT 2
52108: NEG
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 2
52116: NEG
52117: PUSH
52118: LD_INT 3
52120: NEG
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 1
52128: NEG
52129: PUSH
52130: LD_INT 3
52132: NEG
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 0
52140: PUSH
52141: LD_INT 3
52143: NEG
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: LD_INT 1
52151: PUSH
52152: LD_INT 2
52154: NEG
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: LD_INT 3
52162: PUSH
52163: LD_INT 2
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: PUSH
52170: LD_INT 3
52172: PUSH
52173: LD_INT 3
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 2
52182: PUSH
52183: LD_INT 3
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 1
52192: PUSH
52193: LD_INT 3
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 0
52202: PUSH
52203: LD_INT 3
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 1
52212: NEG
52213: PUSH
52214: LD_INT 2
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 3
52223: NEG
52224: PUSH
52225: LD_INT 2
52227: NEG
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 3
52235: NEG
52236: PUSH
52237: LD_INT 3
52239: NEG
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: LIST
52254: LIST
52255: LIST
52256: LIST
52257: LIST
52258: LIST
52259: LIST
52260: LIST
52261: LIST
52262: LIST
52263: LIST
52264: LIST
52265: LIST
52266: LIST
52267: LIST
52268: LIST
52269: LIST
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52276: LD_ADDR_VAR 0 43
52280: PUSH
52281: LD_INT 0
52283: PUSH
52284: LD_INT 0
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 0
52293: PUSH
52294: LD_INT 1
52296: NEG
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 1
52304: PUSH
52305: LD_INT 0
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 1
52314: PUSH
52315: LD_INT 1
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 0
52324: PUSH
52325: LD_INT 1
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 1
52334: NEG
52335: PUSH
52336: LD_INT 0
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 1
52345: NEG
52346: PUSH
52347: LD_INT 1
52349: NEG
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 1
52357: NEG
52358: PUSH
52359: LD_INT 2
52361: NEG
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 0
52369: PUSH
52370: LD_INT 2
52372: NEG
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 1
52380: PUSH
52381: LD_INT 1
52383: NEG
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 2
52391: PUSH
52392: LD_INT 0
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: LD_INT 2
52401: PUSH
52402: LD_INT 1
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PUSH
52409: LD_INT 1
52411: PUSH
52412: LD_INT 2
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 0
52421: PUSH
52422: LD_INT 2
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 1
52431: NEG
52432: PUSH
52433: LD_INT 1
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: LD_INT 2
52442: NEG
52443: PUSH
52444: LD_INT 0
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: LD_INT 2
52453: NEG
52454: PUSH
52455: LD_INT 1
52457: NEG
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: LD_INT 1
52465: NEG
52466: PUSH
52467: LD_INT 3
52469: NEG
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 0
52477: PUSH
52478: LD_INT 3
52480: NEG
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 1
52488: PUSH
52489: LD_INT 2
52491: NEG
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 2
52499: PUSH
52500: LD_INT 1
52502: NEG
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 3
52510: PUSH
52511: LD_INT 0
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 3
52520: PUSH
52521: LD_INT 1
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: PUSH
52528: LD_INT 1
52530: PUSH
52531: LD_INT 3
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: LD_INT 0
52540: PUSH
52541: LD_INT 3
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 1
52550: NEG
52551: PUSH
52552: LD_INT 2
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 2
52561: NEG
52562: PUSH
52563: LD_INT 1
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: LD_INT 3
52572: NEG
52573: PUSH
52574: LD_INT 0
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: PUSH
52581: LD_INT 3
52583: NEG
52584: PUSH
52585: LD_INT 1
52587: NEG
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52624: LD_ADDR_VAR 0 44
52628: PUSH
52629: LD_INT 0
52631: PUSH
52632: LD_INT 0
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 0
52641: PUSH
52642: LD_INT 1
52644: NEG
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: LD_INT 1
52652: PUSH
52653: LD_INT 0
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: LD_INT 1
52662: PUSH
52663: LD_INT 1
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: PUSH
52670: LD_INT 0
52672: PUSH
52673: LD_INT 1
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 1
52682: NEG
52683: PUSH
52684: LD_INT 0
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 1
52693: NEG
52694: PUSH
52695: LD_INT 1
52697: NEG
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 1
52705: NEG
52706: PUSH
52707: LD_INT 2
52709: NEG
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PUSH
52715: LD_INT 1
52717: PUSH
52718: LD_INT 1
52720: NEG
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: LD_INT 2
52728: PUSH
52729: LD_INT 0
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: LD_INT 2
52738: PUSH
52739: LD_INT 1
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: PUSH
52746: LD_INT 2
52748: PUSH
52749: LD_INT 2
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: PUSH
52756: LD_INT 1
52758: PUSH
52759: LD_INT 2
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: PUSH
52766: LD_INT 1
52768: NEG
52769: PUSH
52770: LD_INT 1
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: LD_INT 2
52779: NEG
52780: PUSH
52781: LD_INT 0
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 2
52790: NEG
52791: PUSH
52792: LD_INT 1
52794: NEG
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 2
52802: NEG
52803: PUSH
52804: LD_INT 2
52806: NEG
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: LD_INT 2
52814: NEG
52815: PUSH
52816: LD_INT 3
52818: NEG
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 2
52826: PUSH
52827: LD_INT 1
52829: NEG
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: LD_INT 3
52837: PUSH
52838: LD_INT 0
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PUSH
52845: LD_INT 3
52847: PUSH
52848: LD_INT 1
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 3
52857: PUSH
52858: LD_INT 2
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 3
52867: PUSH
52868: LD_INT 3
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: PUSH
52875: LD_INT 2
52877: PUSH
52878: LD_INT 3
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: LD_INT 2
52887: NEG
52888: PUSH
52889: LD_INT 1
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 3
52898: NEG
52899: PUSH
52900: LD_INT 0
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 3
52909: NEG
52910: PUSH
52911: LD_INT 1
52913: NEG
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: PUSH
52919: LD_INT 3
52921: NEG
52922: PUSH
52923: LD_INT 2
52925: NEG
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: LD_INT 3
52933: NEG
52934: PUSH
52935: LD_INT 3
52937: NEG
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52974: LD_ADDR_VAR 0 45
52978: PUSH
52979: LD_INT 0
52981: PUSH
52982: LD_INT 0
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 0
52991: PUSH
52992: LD_INT 1
52994: NEG
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 1
53002: PUSH
53003: LD_INT 0
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 1
53012: PUSH
53013: LD_INT 1
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 0
53022: PUSH
53023: LD_INT 1
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 1
53032: NEG
53033: PUSH
53034: LD_INT 0
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: PUSH
53041: LD_INT 1
53043: NEG
53044: PUSH
53045: LD_INT 1
53047: NEG
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 1
53055: NEG
53056: PUSH
53057: LD_INT 2
53059: NEG
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: LD_INT 0
53067: PUSH
53068: LD_INT 2
53070: NEG
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 1
53078: PUSH
53079: LD_INT 1
53081: NEG
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: LD_INT 2
53089: PUSH
53090: LD_INT 1
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 2
53099: PUSH
53100: LD_INT 2
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 1
53109: PUSH
53110: LD_INT 2
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 0
53119: PUSH
53120: LD_INT 2
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: PUSH
53127: LD_INT 1
53129: NEG
53130: PUSH
53131: LD_INT 1
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 2
53140: NEG
53141: PUSH
53142: LD_INT 1
53144: NEG
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: PUSH
53150: LD_INT 2
53152: NEG
53153: PUSH
53154: LD_INT 2
53156: NEG
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 2
53164: NEG
53165: PUSH
53166: LD_INT 3
53168: NEG
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 1
53176: NEG
53177: PUSH
53178: LD_INT 3
53180: NEG
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: PUSH
53186: LD_INT 0
53188: PUSH
53189: LD_INT 3
53191: NEG
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 1
53199: PUSH
53200: LD_INT 2
53202: NEG
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 3
53210: PUSH
53211: LD_INT 2
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 3
53220: PUSH
53221: LD_INT 3
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 2
53230: PUSH
53231: LD_INT 3
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 1
53240: PUSH
53241: LD_INT 3
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: LD_INT 0
53250: PUSH
53251: LD_INT 3
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: LD_INT 1
53260: NEG
53261: PUSH
53262: LD_INT 2
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: LD_INT 3
53271: NEG
53272: PUSH
53273: LD_INT 2
53275: NEG
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_INT 3
53283: NEG
53284: PUSH
53285: LD_INT 3
53287: NEG
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53324: LD_ADDR_VAR 0 46
53328: PUSH
53329: LD_INT 0
53331: PUSH
53332: LD_INT 0
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 0
53341: PUSH
53342: LD_INT 1
53344: NEG
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 1
53352: PUSH
53353: LD_INT 0
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 1
53362: PUSH
53363: LD_INT 1
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 0
53372: PUSH
53373: LD_INT 1
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 1
53382: NEG
53383: PUSH
53384: LD_INT 0
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: LD_INT 1
53393: NEG
53394: PUSH
53395: LD_INT 1
53397: NEG
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: LD_INT 1
53405: NEG
53406: PUSH
53407: LD_INT 2
53409: NEG
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 0
53417: PUSH
53418: LD_INT 2
53420: NEG
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 1
53428: PUSH
53429: LD_INT 1
53431: NEG
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: LD_INT 2
53439: PUSH
53440: LD_INT 0
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 2
53449: PUSH
53450: LD_INT 1
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 1
53459: PUSH
53460: LD_INT 2
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 0
53469: PUSH
53470: LD_INT 2
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: LD_INT 1
53479: NEG
53480: PUSH
53481: LD_INT 1
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: PUSH
53488: LD_INT 2
53490: NEG
53491: PUSH
53492: LD_INT 0
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: PUSH
53499: LD_INT 2
53501: NEG
53502: PUSH
53503: LD_INT 1
53505: NEG
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: LD_INT 1
53513: NEG
53514: PUSH
53515: LD_INT 3
53517: NEG
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_INT 0
53525: PUSH
53526: LD_INT 3
53528: NEG
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: LD_INT 1
53536: PUSH
53537: LD_INT 2
53539: NEG
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: LD_INT 2
53547: PUSH
53548: LD_INT 1
53550: NEG
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 3
53558: PUSH
53559: LD_INT 0
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 3
53568: PUSH
53569: LD_INT 1
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: LD_INT 1
53578: PUSH
53579: LD_INT 3
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 0
53588: PUSH
53589: LD_INT 3
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: LD_INT 1
53598: NEG
53599: PUSH
53600: LD_INT 2
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 2
53609: NEG
53610: PUSH
53611: LD_INT 1
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 3
53620: NEG
53621: PUSH
53622: LD_INT 0
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 3
53631: NEG
53632: PUSH
53633: LD_INT 1
53635: NEG
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53672: LD_ADDR_VAR 0 47
53676: PUSH
53677: LD_INT 0
53679: PUSH
53680: LD_INT 0
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 0
53689: PUSH
53690: LD_INT 1
53692: NEG
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 1
53700: PUSH
53701: LD_INT 0
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 1
53710: PUSH
53711: LD_INT 1
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 0
53720: PUSH
53721: LD_INT 1
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 1
53730: NEG
53731: PUSH
53732: LD_INT 0
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 1
53741: NEG
53742: PUSH
53743: LD_INT 1
53745: NEG
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 1
53753: NEG
53754: PUSH
53755: LD_INT 2
53757: NEG
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: PUSH
53763: LD_INT 0
53765: PUSH
53766: LD_INT 2
53768: NEG
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: PUSH
53774: LD_INT 1
53776: PUSH
53777: LD_INT 1
53779: NEG
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: LD_INT 2
53787: NEG
53788: PUSH
53789: LD_INT 1
53791: NEG
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PUSH
53797: LD_INT 2
53799: NEG
53800: PUSH
53801: LD_INT 2
53803: NEG
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53823: LD_ADDR_VAR 0 48
53827: PUSH
53828: LD_INT 0
53830: PUSH
53831: LD_INT 0
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 0
53840: PUSH
53841: LD_INT 1
53843: NEG
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 1
53851: PUSH
53852: LD_INT 0
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 1
53861: PUSH
53862: LD_INT 1
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 0
53871: PUSH
53872: LD_INT 1
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 1
53881: NEG
53882: PUSH
53883: LD_INT 0
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 1
53892: NEG
53893: PUSH
53894: LD_INT 1
53896: NEG
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 1
53904: NEG
53905: PUSH
53906: LD_INT 2
53908: NEG
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 0
53916: PUSH
53917: LD_INT 2
53919: NEG
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 1
53927: PUSH
53928: LD_INT 1
53930: NEG
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 2
53938: PUSH
53939: LD_INT 0
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 2
53948: PUSH
53949: LD_INT 1
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: LIST
53960: LIST
53961: LIST
53962: LIST
53963: LIST
53964: LIST
53965: LIST
53966: LIST
53967: LIST
53968: LIST
53969: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53970: LD_ADDR_VAR 0 49
53974: PUSH
53975: LD_INT 0
53977: PUSH
53978: LD_INT 0
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 0
53987: PUSH
53988: LD_INT 1
53990: NEG
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 1
53998: PUSH
53999: LD_INT 0
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 1
54008: PUSH
54009: LD_INT 1
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 0
54018: PUSH
54019: LD_INT 1
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: PUSH
54026: LD_INT 1
54028: NEG
54029: PUSH
54030: LD_INT 0
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 1
54039: NEG
54040: PUSH
54041: LD_INT 1
54043: NEG
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 1
54051: PUSH
54052: LD_INT 1
54054: NEG
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 2
54062: PUSH
54063: LD_INT 0
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 2
54072: PUSH
54073: LD_INT 1
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 2
54082: PUSH
54083: LD_INT 2
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 1
54092: PUSH
54093: LD_INT 2
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54114: LD_ADDR_VAR 0 50
54118: PUSH
54119: LD_INT 0
54121: PUSH
54122: LD_INT 0
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: LD_INT 0
54131: PUSH
54132: LD_INT 1
54134: NEG
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: LD_INT 1
54142: PUSH
54143: LD_INT 0
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 1
54152: PUSH
54153: LD_INT 1
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 0
54162: PUSH
54163: LD_INT 1
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 1
54172: NEG
54173: PUSH
54174: LD_INT 0
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 1
54183: NEG
54184: PUSH
54185: LD_INT 1
54187: NEG
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 2
54195: PUSH
54196: LD_INT 1
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 2
54205: PUSH
54206: LD_INT 2
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 1
54215: PUSH
54216: LD_INT 2
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 0
54225: PUSH
54226: LD_INT 2
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 1
54235: NEG
54236: PUSH
54237: LD_INT 1
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54258: LD_ADDR_VAR 0 51
54262: PUSH
54263: LD_INT 0
54265: PUSH
54266: LD_INT 0
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 0
54275: PUSH
54276: LD_INT 1
54278: NEG
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 1
54286: PUSH
54287: LD_INT 0
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: LD_INT 1
54296: PUSH
54297: LD_INT 1
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 0
54306: PUSH
54307: LD_INT 1
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: PUSH
54314: LD_INT 1
54316: NEG
54317: PUSH
54318: LD_INT 0
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 1
54327: NEG
54328: PUSH
54329: LD_INT 1
54331: NEG
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 1
54339: PUSH
54340: LD_INT 2
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: LD_INT 0
54349: PUSH
54350: LD_INT 2
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PUSH
54357: LD_INT 1
54359: NEG
54360: PUSH
54361: LD_INT 1
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 2
54370: NEG
54371: PUSH
54372: LD_INT 0
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 2
54381: NEG
54382: PUSH
54383: LD_INT 1
54385: NEG
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54405: LD_ADDR_VAR 0 52
54409: PUSH
54410: LD_INT 0
54412: PUSH
54413: LD_INT 0
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: LD_INT 0
54422: PUSH
54423: LD_INT 1
54425: NEG
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 1
54433: PUSH
54434: LD_INT 0
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 1
54443: PUSH
54444: LD_INT 1
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 0
54453: PUSH
54454: LD_INT 1
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: LD_INT 1
54463: NEG
54464: PUSH
54465: LD_INT 0
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 1
54474: NEG
54475: PUSH
54476: LD_INT 1
54478: NEG
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 1
54486: NEG
54487: PUSH
54488: LD_INT 2
54490: NEG
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: PUSH
54496: LD_INT 1
54498: NEG
54499: PUSH
54500: LD_INT 1
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: LD_INT 2
54509: NEG
54510: PUSH
54511: LD_INT 0
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: LD_INT 2
54520: NEG
54521: PUSH
54522: LD_INT 1
54524: NEG
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: LD_INT 2
54532: NEG
54533: PUSH
54534: LD_INT 2
54536: NEG
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: LIST
54546: LIST
54547: LIST
54548: LIST
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54556: LD_ADDR_VAR 0 53
54560: PUSH
54561: LD_INT 0
54563: PUSH
54564: LD_INT 0
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 0
54573: PUSH
54574: LD_INT 1
54576: NEG
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 1
54584: PUSH
54585: LD_INT 0
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 1
54594: PUSH
54595: LD_INT 1
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 0
54604: PUSH
54605: LD_INT 1
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 1
54614: NEG
54615: PUSH
54616: LD_INT 0
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 1
54625: NEG
54626: PUSH
54627: LD_INT 1
54629: NEG
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: LD_INT 1
54637: NEG
54638: PUSH
54639: LD_INT 2
54641: NEG
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 0
54649: PUSH
54650: LD_INT 2
54652: NEG
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 1
54660: PUSH
54661: LD_INT 1
54663: NEG
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 2
54671: PUSH
54672: LD_INT 0
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 2
54681: PUSH
54682: LD_INT 1
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: LD_INT 2
54691: PUSH
54692: LD_INT 2
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: LD_INT 1
54701: PUSH
54702: LD_INT 2
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 0
54711: PUSH
54712: LD_INT 2
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 1
54721: NEG
54722: PUSH
54723: LD_INT 1
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 2
54732: NEG
54733: PUSH
54734: LD_INT 0
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: PUSH
54741: LD_INT 2
54743: NEG
54744: PUSH
54745: LD_INT 1
54747: NEG
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 2
54755: NEG
54756: PUSH
54757: LD_INT 2
54759: NEG
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: LIST
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54786: LD_ADDR_VAR 0 54
54790: PUSH
54791: LD_INT 0
54793: PUSH
54794: LD_INT 0
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: LD_INT 0
54803: PUSH
54804: LD_INT 1
54806: NEG
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: LD_INT 1
54814: PUSH
54815: LD_INT 0
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: PUSH
54822: LD_INT 1
54824: PUSH
54825: LD_INT 1
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 0
54834: PUSH
54835: LD_INT 1
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 1
54844: NEG
54845: PUSH
54846: LD_INT 0
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 1
54855: NEG
54856: PUSH
54857: LD_INT 1
54859: NEG
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 1
54867: NEG
54868: PUSH
54869: LD_INT 2
54871: NEG
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 0
54879: PUSH
54880: LD_INT 2
54882: NEG
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: LD_INT 1
54890: PUSH
54891: LD_INT 1
54893: NEG
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: LD_INT 2
54901: PUSH
54902: LD_INT 0
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 2
54911: PUSH
54912: LD_INT 1
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 2
54921: PUSH
54922: LD_INT 2
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 1
54931: PUSH
54932: LD_INT 2
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 0
54941: PUSH
54942: LD_INT 2
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 1
54951: NEG
54952: PUSH
54953: LD_INT 1
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 2
54962: NEG
54963: PUSH
54964: LD_INT 0
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: LD_INT 2
54973: NEG
54974: PUSH
54975: LD_INT 1
54977: NEG
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 2
54985: NEG
54986: PUSH
54987: LD_INT 2
54989: NEG
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: LIST
55003: LIST
55004: LIST
55005: LIST
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: LIST
55015: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55016: LD_ADDR_VAR 0 55
55020: PUSH
55021: LD_INT 0
55023: PUSH
55024: LD_INT 0
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 0
55033: PUSH
55034: LD_INT 1
55036: NEG
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: LD_INT 1
55044: PUSH
55045: LD_INT 0
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 1
55054: PUSH
55055: LD_INT 1
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 0
55064: PUSH
55065: LD_INT 1
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 1
55074: NEG
55075: PUSH
55076: LD_INT 0
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 1
55085: NEG
55086: PUSH
55087: LD_INT 1
55089: NEG
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: PUSH
55095: LD_INT 1
55097: NEG
55098: PUSH
55099: LD_INT 2
55101: NEG
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: PUSH
55107: LD_INT 0
55109: PUSH
55110: LD_INT 2
55112: NEG
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 1
55120: PUSH
55121: LD_INT 1
55123: NEG
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: LD_INT 2
55131: PUSH
55132: LD_INT 0
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: PUSH
55139: LD_INT 2
55141: PUSH
55142: LD_INT 1
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 2
55151: PUSH
55152: LD_INT 2
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: LD_INT 1
55161: PUSH
55162: LD_INT 2
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PUSH
55169: LD_INT 0
55171: PUSH
55172: LD_INT 2
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: LD_INT 1
55181: NEG
55182: PUSH
55183: LD_INT 1
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: LD_INT 2
55192: NEG
55193: PUSH
55194: LD_INT 0
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: LD_INT 2
55203: NEG
55204: PUSH
55205: LD_INT 1
55207: NEG
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: LD_INT 2
55215: NEG
55216: PUSH
55217: LD_INT 2
55219: NEG
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55246: LD_ADDR_VAR 0 56
55250: PUSH
55251: LD_INT 0
55253: PUSH
55254: LD_INT 0
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: LD_INT 0
55263: PUSH
55264: LD_INT 1
55266: NEG
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: PUSH
55272: LD_INT 1
55274: PUSH
55275: LD_INT 0
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 1
55284: PUSH
55285: LD_INT 1
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 0
55294: PUSH
55295: LD_INT 1
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: LD_INT 1
55304: NEG
55305: PUSH
55306: LD_INT 0
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 1
55315: NEG
55316: PUSH
55317: LD_INT 1
55319: NEG
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 1
55327: NEG
55328: PUSH
55329: LD_INT 2
55331: NEG
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: LD_INT 0
55339: PUSH
55340: LD_INT 2
55342: NEG
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: LD_INT 1
55350: PUSH
55351: LD_INT 1
55353: NEG
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: LD_INT 2
55361: PUSH
55362: LD_INT 0
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 2
55371: PUSH
55372: LD_INT 1
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: LD_INT 2
55381: PUSH
55382: LD_INT 2
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 1
55391: PUSH
55392: LD_INT 2
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 0
55401: PUSH
55402: LD_INT 2
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 1
55411: NEG
55412: PUSH
55413: LD_INT 1
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: LD_INT 2
55422: NEG
55423: PUSH
55424: LD_INT 0
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 2
55433: NEG
55434: PUSH
55435: LD_INT 1
55437: NEG
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 2
55445: NEG
55446: PUSH
55447: LD_INT 2
55449: NEG
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55476: LD_ADDR_VAR 0 57
55480: PUSH
55481: LD_INT 0
55483: PUSH
55484: LD_INT 0
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 0
55493: PUSH
55494: LD_INT 1
55496: NEG
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 1
55504: PUSH
55505: LD_INT 0
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 1
55514: PUSH
55515: LD_INT 1
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 0
55524: PUSH
55525: LD_INT 1
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 1
55534: NEG
55535: PUSH
55536: LD_INT 0
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 1
55545: NEG
55546: PUSH
55547: LD_INT 1
55549: NEG
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: LD_INT 1
55557: NEG
55558: PUSH
55559: LD_INT 2
55561: NEG
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 0
55569: PUSH
55570: LD_INT 2
55572: NEG
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 1
55580: PUSH
55581: LD_INT 1
55583: NEG
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: LD_INT 2
55591: PUSH
55592: LD_INT 0
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 2
55601: PUSH
55602: LD_INT 1
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 2
55611: PUSH
55612: LD_INT 2
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 1
55621: PUSH
55622: LD_INT 2
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 0
55631: PUSH
55632: LD_INT 2
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 1
55641: NEG
55642: PUSH
55643: LD_INT 1
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 2
55652: NEG
55653: PUSH
55654: LD_INT 0
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: LD_INT 2
55663: NEG
55664: PUSH
55665: LD_INT 1
55667: NEG
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 2
55675: NEG
55676: PUSH
55677: LD_INT 2
55679: NEG
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: LIST
55689: LIST
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55706: LD_ADDR_VAR 0 58
55710: PUSH
55711: LD_INT 0
55713: PUSH
55714: LD_INT 0
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 0
55723: PUSH
55724: LD_INT 1
55726: NEG
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: LD_INT 1
55734: PUSH
55735: LD_INT 0
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 1
55744: PUSH
55745: LD_INT 1
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 0
55754: PUSH
55755: LD_INT 1
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: LD_INT 1
55764: NEG
55765: PUSH
55766: LD_INT 0
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 1
55775: NEG
55776: PUSH
55777: LD_INT 1
55779: NEG
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: PUSH
55785: LD_INT 1
55787: NEG
55788: PUSH
55789: LD_INT 2
55791: NEG
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 0
55799: PUSH
55800: LD_INT 2
55802: NEG
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 1
55810: PUSH
55811: LD_INT 1
55813: NEG
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 2
55821: PUSH
55822: LD_INT 0
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: LD_INT 2
55831: PUSH
55832: LD_INT 1
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 2
55841: PUSH
55842: LD_INT 2
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: LD_INT 1
55851: PUSH
55852: LD_INT 2
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: LD_INT 0
55861: PUSH
55862: LD_INT 2
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 1
55871: NEG
55872: PUSH
55873: LD_INT 1
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 2
55882: NEG
55883: PUSH
55884: LD_INT 0
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 2
55893: NEG
55894: PUSH
55895: LD_INT 1
55897: NEG
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 2
55905: NEG
55906: PUSH
55907: LD_INT 2
55909: NEG
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: LIST
55919: LIST
55920: LIST
55921: LIST
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55936: LD_ADDR_VAR 0 59
55940: PUSH
55941: LD_INT 0
55943: PUSH
55944: LD_INT 0
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 0
55953: PUSH
55954: LD_INT 1
55956: NEG
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 1
55964: PUSH
55965: LD_INT 0
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 1
55974: PUSH
55975: LD_INT 1
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: LD_INT 0
55984: PUSH
55985: LD_INT 1
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 1
55994: NEG
55995: PUSH
55996: LD_INT 0
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 1
56005: NEG
56006: PUSH
56007: LD_INT 1
56009: NEG
56010: PUSH
56011: EMPTY
56012: LIST
56013: LIST
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56024: LD_ADDR_VAR 0 60
56028: PUSH
56029: LD_INT 0
56031: PUSH
56032: LD_INT 0
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: LD_INT 0
56041: PUSH
56042: LD_INT 1
56044: NEG
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 1
56052: PUSH
56053: LD_INT 0
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 1
56062: PUSH
56063: LD_INT 1
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 0
56072: PUSH
56073: LD_INT 1
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 1
56082: NEG
56083: PUSH
56084: LD_INT 0
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 1
56093: NEG
56094: PUSH
56095: LD_INT 1
56097: NEG
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: LIST
56107: LIST
56108: LIST
56109: LIST
56110: LIST
56111: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56112: LD_ADDR_VAR 0 61
56116: PUSH
56117: LD_INT 0
56119: PUSH
56120: LD_INT 0
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 0
56129: PUSH
56130: LD_INT 1
56132: NEG
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 1
56140: PUSH
56141: LD_INT 0
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 1
56150: PUSH
56151: LD_INT 1
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 0
56160: PUSH
56161: LD_INT 1
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 1
56170: NEG
56171: PUSH
56172: LD_INT 0
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 1
56181: NEG
56182: PUSH
56183: LD_INT 1
56185: NEG
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: LIST
56195: LIST
56196: LIST
56197: LIST
56198: LIST
56199: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56200: LD_ADDR_VAR 0 62
56204: PUSH
56205: LD_INT 0
56207: PUSH
56208: LD_INT 0
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 0
56217: PUSH
56218: LD_INT 1
56220: NEG
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: PUSH
56226: LD_INT 1
56228: PUSH
56229: LD_INT 0
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: LD_INT 1
56238: PUSH
56239: LD_INT 1
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 0
56248: PUSH
56249: LD_INT 1
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 1
56258: NEG
56259: PUSH
56260: LD_INT 0
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 1
56269: NEG
56270: PUSH
56271: LD_INT 1
56273: NEG
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56288: LD_ADDR_VAR 0 63
56292: PUSH
56293: LD_INT 0
56295: PUSH
56296: LD_INT 0
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 0
56305: PUSH
56306: LD_INT 1
56308: NEG
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: LD_INT 1
56316: PUSH
56317: LD_INT 0
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 1
56326: PUSH
56327: LD_INT 1
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 0
56336: PUSH
56337: LD_INT 1
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: LD_INT 1
56346: NEG
56347: PUSH
56348: LD_INT 0
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PUSH
56355: LD_INT 1
56357: NEG
56358: PUSH
56359: LD_INT 1
56361: NEG
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: LIST
56375: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56376: LD_ADDR_VAR 0 64
56380: PUSH
56381: LD_INT 0
56383: PUSH
56384: LD_INT 0
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 0
56393: PUSH
56394: LD_INT 1
56396: NEG
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 1
56404: PUSH
56405: LD_INT 0
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: PUSH
56412: LD_INT 1
56414: PUSH
56415: LD_INT 1
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 0
56424: PUSH
56425: LD_INT 1
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 1
56434: NEG
56435: PUSH
56436: LD_INT 0
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 1
56445: NEG
56446: PUSH
56447: LD_INT 1
56449: NEG
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: LIST
56459: LIST
56460: LIST
56461: LIST
56462: LIST
56463: ST_TO_ADDR
// end ; 1 :
56464: GO 62361
56466: LD_INT 1
56468: DOUBLE
56469: EQUAL
56470: IFTRUE 56474
56472: GO 59097
56474: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56475: LD_ADDR_VAR 0 11
56479: PUSH
56480: LD_INT 1
56482: NEG
56483: PUSH
56484: LD_INT 3
56486: NEG
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PUSH
56492: LD_INT 0
56494: PUSH
56495: LD_INT 3
56497: NEG
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PUSH
56503: LD_INT 1
56505: PUSH
56506: LD_INT 2
56508: NEG
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: LIST
56518: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56519: LD_ADDR_VAR 0 12
56523: PUSH
56524: LD_INT 2
56526: PUSH
56527: LD_INT 1
56529: NEG
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 3
56537: PUSH
56538: LD_INT 0
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: LD_INT 3
56547: PUSH
56548: LD_INT 1
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: LIST
56559: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56560: LD_ADDR_VAR 0 13
56564: PUSH
56565: LD_INT 3
56567: PUSH
56568: LD_INT 2
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 3
56577: PUSH
56578: LD_INT 3
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 2
56587: PUSH
56588: LD_INT 3
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: LIST
56599: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56600: LD_ADDR_VAR 0 14
56604: PUSH
56605: LD_INT 1
56607: PUSH
56608: LD_INT 3
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: LD_INT 0
56617: PUSH
56618: LD_INT 3
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: LD_INT 1
56627: NEG
56628: PUSH
56629: LD_INT 2
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: LIST
56640: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56641: LD_ADDR_VAR 0 15
56645: PUSH
56646: LD_INT 2
56648: NEG
56649: PUSH
56650: LD_INT 1
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 3
56659: NEG
56660: PUSH
56661: LD_INT 0
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_INT 3
56670: NEG
56671: PUSH
56672: LD_INT 1
56674: NEG
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: LIST
56684: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56685: LD_ADDR_VAR 0 16
56689: PUSH
56690: LD_INT 2
56692: NEG
56693: PUSH
56694: LD_INT 3
56696: NEG
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: LD_INT 3
56704: NEG
56705: PUSH
56706: LD_INT 2
56708: NEG
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 3
56716: NEG
56717: PUSH
56718: LD_INT 3
56720: NEG
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: LIST
56730: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56731: LD_ADDR_VAR 0 17
56735: PUSH
56736: LD_INT 1
56738: NEG
56739: PUSH
56740: LD_INT 3
56742: NEG
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 0
56750: PUSH
56751: LD_INT 3
56753: NEG
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 1
56761: PUSH
56762: LD_INT 2
56764: NEG
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: LIST
56774: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56775: LD_ADDR_VAR 0 18
56779: PUSH
56780: LD_INT 2
56782: PUSH
56783: LD_INT 1
56785: NEG
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: LD_INT 3
56793: PUSH
56794: LD_INT 0
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PUSH
56801: LD_INT 3
56803: PUSH
56804: LD_INT 1
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: LIST
56815: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56816: LD_ADDR_VAR 0 19
56820: PUSH
56821: LD_INT 3
56823: PUSH
56824: LD_INT 2
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 3
56833: PUSH
56834: LD_INT 3
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 2
56843: PUSH
56844: LD_INT 3
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: LIST
56855: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56856: LD_ADDR_VAR 0 20
56860: PUSH
56861: LD_INT 1
56863: PUSH
56864: LD_INT 3
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 0
56873: PUSH
56874: LD_INT 3
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 1
56883: NEG
56884: PUSH
56885: LD_INT 2
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: LIST
56896: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56897: LD_ADDR_VAR 0 21
56901: PUSH
56902: LD_INT 2
56904: NEG
56905: PUSH
56906: LD_INT 1
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 3
56915: NEG
56916: PUSH
56917: LD_INT 0
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: LD_INT 3
56926: NEG
56927: PUSH
56928: LD_INT 1
56930: NEG
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: LIST
56940: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56941: LD_ADDR_VAR 0 22
56945: PUSH
56946: LD_INT 2
56948: NEG
56949: PUSH
56950: LD_INT 3
56952: NEG
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 3
56960: NEG
56961: PUSH
56962: LD_INT 2
56964: NEG
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: LD_INT 3
56972: NEG
56973: PUSH
56974: LD_INT 3
56976: NEG
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: LIST
56986: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56987: LD_ADDR_VAR 0 23
56991: PUSH
56992: LD_INT 0
56994: PUSH
56995: LD_INT 3
56997: NEG
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 1
57005: NEG
57006: PUSH
57007: LD_INT 4
57009: NEG
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: LD_INT 1
57017: PUSH
57018: LD_INT 3
57020: NEG
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: LIST
57030: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57031: LD_ADDR_VAR 0 24
57035: PUSH
57036: LD_INT 3
57038: PUSH
57039: LD_INT 0
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: LD_INT 3
57048: PUSH
57049: LD_INT 1
57051: NEG
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 4
57059: PUSH
57060: LD_INT 1
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: LIST
57071: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57072: LD_ADDR_VAR 0 25
57076: PUSH
57077: LD_INT 3
57079: PUSH
57080: LD_INT 3
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 4
57089: PUSH
57090: LD_INT 3
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 3
57099: PUSH
57100: LD_INT 4
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: LIST
57111: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57112: LD_ADDR_VAR 0 26
57116: PUSH
57117: LD_INT 0
57119: PUSH
57120: LD_INT 3
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: LD_INT 1
57129: PUSH
57130: LD_INT 4
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: PUSH
57137: LD_INT 1
57139: NEG
57140: PUSH
57141: LD_INT 3
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: LIST
57152: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57153: LD_ADDR_VAR 0 27
57157: PUSH
57158: LD_INT 3
57160: NEG
57161: PUSH
57162: LD_INT 0
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 3
57171: NEG
57172: PUSH
57173: LD_INT 1
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: LD_INT 4
57182: NEG
57183: PUSH
57184: LD_INT 1
57186: NEG
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: LIST
57196: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57197: LD_ADDR_VAR 0 28
57201: PUSH
57202: LD_INT 3
57204: NEG
57205: PUSH
57206: LD_INT 3
57208: NEG
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: LD_INT 3
57216: NEG
57217: PUSH
57218: LD_INT 4
57220: NEG
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 4
57228: NEG
57229: PUSH
57230: LD_INT 3
57232: NEG
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: LIST
57242: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57243: LD_ADDR_VAR 0 29
57247: PUSH
57248: LD_INT 1
57250: NEG
57251: PUSH
57252: LD_INT 3
57254: NEG
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 0
57262: PUSH
57263: LD_INT 3
57265: NEG
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 1
57273: PUSH
57274: LD_INT 2
57276: NEG
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 1
57284: NEG
57285: PUSH
57286: LD_INT 4
57288: NEG
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 0
57296: PUSH
57297: LD_INT 4
57299: NEG
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: LD_INT 1
57307: PUSH
57308: LD_INT 3
57310: NEG
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: LD_INT 1
57318: NEG
57319: PUSH
57320: LD_INT 5
57322: NEG
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_INT 0
57330: PUSH
57331: LD_INT 5
57333: NEG
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: LD_INT 1
57341: PUSH
57342: LD_INT 4
57344: NEG
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 1
57352: NEG
57353: PUSH
57354: LD_INT 6
57356: NEG
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 0
57364: PUSH
57365: LD_INT 6
57367: NEG
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 1
57375: PUSH
57376: LD_INT 5
57378: NEG
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: LIST
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: LIST
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57398: LD_ADDR_VAR 0 30
57402: PUSH
57403: LD_INT 2
57405: PUSH
57406: LD_INT 1
57408: NEG
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 3
57416: PUSH
57417: LD_INT 0
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 3
57426: PUSH
57427: LD_INT 1
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 3
57436: PUSH
57437: LD_INT 1
57439: NEG
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: LD_INT 4
57447: PUSH
57448: LD_INT 0
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: PUSH
57455: LD_INT 4
57457: PUSH
57458: LD_INT 1
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 4
57467: PUSH
57468: LD_INT 1
57470: NEG
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: PUSH
57476: LD_INT 5
57478: PUSH
57479: LD_INT 0
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: PUSH
57486: LD_INT 5
57488: PUSH
57489: LD_INT 1
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 5
57498: PUSH
57499: LD_INT 1
57501: NEG
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: LD_INT 6
57509: PUSH
57510: LD_INT 0
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 6
57519: PUSH
57520: LD_INT 1
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57541: LD_ADDR_VAR 0 31
57545: PUSH
57546: LD_INT 3
57548: PUSH
57549: LD_INT 2
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 3
57558: PUSH
57559: LD_INT 3
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 2
57568: PUSH
57569: LD_INT 3
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: LD_INT 4
57578: PUSH
57579: LD_INT 3
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 4
57588: PUSH
57589: LD_INT 4
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 3
57598: PUSH
57599: LD_INT 4
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 5
57608: PUSH
57609: LD_INT 4
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: LD_INT 5
57618: PUSH
57619: LD_INT 5
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 4
57628: PUSH
57629: LD_INT 5
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: LD_INT 6
57638: PUSH
57639: LD_INT 5
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: LD_INT 6
57648: PUSH
57649: LD_INT 6
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 5
57658: PUSH
57659: LD_INT 6
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: LIST
57670: LIST
57671: LIST
57672: LIST
57673: LIST
57674: LIST
57675: LIST
57676: LIST
57677: LIST
57678: LIST
57679: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57680: LD_ADDR_VAR 0 32
57684: PUSH
57685: LD_INT 1
57687: PUSH
57688: LD_INT 3
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 0
57697: PUSH
57698: LD_INT 3
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: PUSH
57705: LD_INT 1
57707: NEG
57708: PUSH
57709: LD_INT 2
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 1
57718: PUSH
57719: LD_INT 4
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: LD_INT 0
57728: PUSH
57729: LD_INT 4
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 1
57738: NEG
57739: PUSH
57740: LD_INT 3
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 1
57749: PUSH
57750: LD_INT 5
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 0
57759: PUSH
57760: LD_INT 5
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 1
57769: NEG
57770: PUSH
57771: LD_INT 4
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: LD_INT 1
57780: PUSH
57781: LD_INT 6
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 0
57790: PUSH
57791: LD_INT 6
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PUSH
57798: LD_INT 1
57800: NEG
57801: PUSH
57802: LD_INT 5
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: LIST
57813: LIST
57814: LIST
57815: LIST
57816: LIST
57817: LIST
57818: LIST
57819: LIST
57820: LIST
57821: LIST
57822: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57823: LD_ADDR_VAR 0 33
57827: PUSH
57828: LD_INT 2
57830: NEG
57831: PUSH
57832: LD_INT 1
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 3
57841: NEG
57842: PUSH
57843: LD_INT 0
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: LD_INT 3
57852: NEG
57853: PUSH
57854: LD_INT 1
57856: NEG
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: LD_INT 3
57864: NEG
57865: PUSH
57866: LD_INT 1
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: LD_INT 4
57875: NEG
57876: PUSH
57877: LD_INT 0
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 4
57886: NEG
57887: PUSH
57888: LD_INT 1
57890: NEG
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 4
57898: NEG
57899: PUSH
57900: LD_INT 1
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 5
57909: NEG
57910: PUSH
57911: LD_INT 0
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: LD_INT 5
57920: NEG
57921: PUSH
57922: LD_INT 1
57924: NEG
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 5
57932: NEG
57933: PUSH
57934: LD_INT 1
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 6
57943: NEG
57944: PUSH
57945: LD_INT 0
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_INT 6
57954: NEG
57955: PUSH
57956: LD_INT 1
57958: NEG
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: LIST
57968: LIST
57969: LIST
57970: LIST
57971: LIST
57972: LIST
57973: LIST
57974: LIST
57975: LIST
57976: LIST
57977: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57978: LD_ADDR_VAR 0 34
57982: PUSH
57983: LD_INT 2
57985: NEG
57986: PUSH
57987: LD_INT 3
57989: NEG
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 3
57997: NEG
57998: PUSH
57999: LD_INT 2
58001: NEG
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 3
58009: NEG
58010: PUSH
58011: LD_INT 3
58013: NEG
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 3
58021: NEG
58022: PUSH
58023: LD_INT 4
58025: NEG
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 4
58033: NEG
58034: PUSH
58035: LD_INT 3
58037: NEG
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: PUSH
58043: LD_INT 4
58045: NEG
58046: PUSH
58047: LD_INT 4
58049: NEG
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 4
58057: NEG
58058: PUSH
58059: LD_INT 5
58061: NEG
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 5
58069: NEG
58070: PUSH
58071: LD_INT 4
58073: NEG
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: LD_INT 5
58081: NEG
58082: PUSH
58083: LD_INT 5
58085: NEG
58086: PUSH
58087: EMPTY
58088: LIST
58089: LIST
58090: PUSH
58091: LD_INT 5
58093: NEG
58094: PUSH
58095: LD_INT 6
58097: NEG
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: LD_INT 6
58105: NEG
58106: PUSH
58107: LD_INT 5
58109: NEG
58110: PUSH
58111: EMPTY
58112: LIST
58113: LIST
58114: PUSH
58115: LD_INT 6
58117: NEG
58118: PUSH
58119: LD_INT 6
58121: NEG
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: LIST
58131: LIST
58132: LIST
58133: LIST
58134: LIST
58135: LIST
58136: LIST
58137: LIST
58138: LIST
58139: LIST
58140: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58141: LD_ADDR_VAR 0 41
58145: PUSH
58146: LD_INT 0
58148: PUSH
58149: LD_INT 2
58151: NEG
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 1
58159: NEG
58160: PUSH
58161: LD_INT 3
58163: NEG
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 1
58171: PUSH
58172: LD_INT 2
58174: NEG
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: LIST
58184: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58185: LD_ADDR_VAR 0 42
58189: PUSH
58190: LD_INT 2
58192: PUSH
58193: LD_INT 0
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 2
58202: PUSH
58203: LD_INT 1
58205: NEG
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PUSH
58211: LD_INT 3
58213: PUSH
58214: LD_INT 1
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: LIST
58225: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58226: LD_ADDR_VAR 0 43
58230: PUSH
58231: LD_INT 2
58233: PUSH
58234: LD_INT 2
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 3
58243: PUSH
58244: LD_INT 2
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 2
58253: PUSH
58254: LD_INT 3
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: LIST
58265: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58266: LD_ADDR_VAR 0 44
58270: PUSH
58271: LD_INT 0
58273: PUSH
58274: LD_INT 2
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: LD_INT 1
58283: PUSH
58284: LD_INT 3
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: LD_INT 1
58293: NEG
58294: PUSH
58295: LD_INT 2
58297: PUSH
58298: EMPTY
58299: LIST
58300: LIST
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: LIST
58306: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58307: LD_ADDR_VAR 0 45
58311: PUSH
58312: LD_INT 2
58314: NEG
58315: PUSH
58316: LD_INT 0
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: LD_INT 2
58325: NEG
58326: PUSH
58327: LD_INT 1
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: LD_INT 3
58336: NEG
58337: PUSH
58338: LD_INT 1
58340: NEG
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: LIST
58350: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58351: LD_ADDR_VAR 0 46
58355: PUSH
58356: LD_INT 2
58358: NEG
58359: PUSH
58360: LD_INT 2
58362: NEG
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 2
58370: NEG
58371: PUSH
58372: LD_INT 3
58374: NEG
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 3
58382: NEG
58383: PUSH
58384: LD_INT 2
58386: NEG
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: LIST
58396: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58397: LD_ADDR_VAR 0 47
58401: PUSH
58402: LD_INT 2
58404: NEG
58405: PUSH
58406: LD_INT 3
58408: NEG
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: PUSH
58414: LD_INT 1
58416: NEG
58417: PUSH
58418: LD_INT 3
58420: NEG
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58430: LD_ADDR_VAR 0 48
58434: PUSH
58435: LD_INT 1
58437: PUSH
58438: LD_INT 2
58440: NEG
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: LD_INT 2
58448: PUSH
58449: LD_INT 1
58451: NEG
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58461: LD_ADDR_VAR 0 49
58465: PUSH
58466: LD_INT 3
58468: PUSH
58469: LD_INT 1
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: PUSH
58476: LD_INT 3
58478: PUSH
58479: LD_INT 2
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58490: LD_ADDR_VAR 0 50
58494: PUSH
58495: LD_INT 2
58497: PUSH
58498: LD_INT 3
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: PUSH
58505: LD_INT 1
58507: PUSH
58508: LD_INT 3
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58519: LD_ADDR_VAR 0 51
58523: PUSH
58524: LD_INT 1
58526: NEG
58527: PUSH
58528: LD_INT 2
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: LD_INT 2
58537: NEG
58538: PUSH
58539: LD_INT 1
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58550: LD_ADDR_VAR 0 52
58554: PUSH
58555: LD_INT 3
58557: NEG
58558: PUSH
58559: LD_INT 1
58561: NEG
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 3
58569: NEG
58570: PUSH
58571: LD_INT 2
58573: NEG
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58583: LD_ADDR_VAR 0 53
58587: PUSH
58588: LD_INT 1
58590: NEG
58591: PUSH
58592: LD_INT 3
58594: NEG
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: LD_INT 0
58602: PUSH
58603: LD_INT 3
58605: NEG
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: PUSH
58611: LD_INT 1
58613: PUSH
58614: LD_INT 2
58616: NEG
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: LIST
58626: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58627: LD_ADDR_VAR 0 54
58631: PUSH
58632: LD_INT 2
58634: PUSH
58635: LD_INT 1
58637: NEG
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: LD_INT 3
58645: PUSH
58646: LD_INT 0
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: LD_INT 3
58655: PUSH
58656: LD_INT 1
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: LIST
58667: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58668: LD_ADDR_VAR 0 55
58672: PUSH
58673: LD_INT 3
58675: PUSH
58676: LD_INT 2
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: LD_INT 3
58685: PUSH
58686: LD_INT 3
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PUSH
58693: LD_INT 2
58695: PUSH
58696: LD_INT 3
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: LIST
58707: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58708: LD_ADDR_VAR 0 56
58712: PUSH
58713: LD_INT 1
58715: PUSH
58716: LD_INT 3
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: LD_INT 0
58725: PUSH
58726: LD_INT 3
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 1
58735: NEG
58736: PUSH
58737: LD_INT 2
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: LIST
58748: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58749: LD_ADDR_VAR 0 57
58753: PUSH
58754: LD_INT 2
58756: NEG
58757: PUSH
58758: LD_INT 1
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PUSH
58765: LD_INT 3
58767: NEG
58768: PUSH
58769: LD_INT 0
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PUSH
58776: LD_INT 3
58778: NEG
58779: PUSH
58780: LD_INT 1
58782: NEG
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: LIST
58792: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58793: LD_ADDR_VAR 0 58
58797: PUSH
58798: LD_INT 2
58800: NEG
58801: PUSH
58802: LD_INT 3
58804: NEG
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PUSH
58810: LD_INT 3
58812: NEG
58813: PUSH
58814: LD_INT 2
58816: NEG
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_INT 3
58824: NEG
58825: PUSH
58826: LD_INT 3
58828: NEG
58829: PUSH
58830: EMPTY
58831: LIST
58832: LIST
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: LIST
58838: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58839: LD_ADDR_VAR 0 59
58843: PUSH
58844: LD_INT 1
58846: NEG
58847: PUSH
58848: LD_INT 2
58850: NEG
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: LD_INT 0
58858: PUSH
58859: LD_INT 2
58861: NEG
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 1
58869: PUSH
58870: LD_INT 1
58872: NEG
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: LIST
58882: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58883: LD_ADDR_VAR 0 60
58887: PUSH
58888: LD_INT 1
58890: PUSH
58891: LD_INT 1
58893: NEG
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 2
58901: PUSH
58902: LD_INT 0
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 2
58911: PUSH
58912: LD_INT 1
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: LIST
58923: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58924: LD_ADDR_VAR 0 61
58928: PUSH
58929: LD_INT 2
58931: PUSH
58932: LD_INT 1
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: LD_INT 2
58941: PUSH
58942: LD_INT 2
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 1
58951: PUSH
58952: LD_INT 2
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: LIST
58963: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58964: LD_ADDR_VAR 0 62
58968: PUSH
58969: LD_INT 1
58971: PUSH
58972: LD_INT 2
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: LD_INT 0
58981: PUSH
58982: LD_INT 2
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: PUSH
58989: LD_INT 1
58991: NEG
58992: PUSH
58993: LD_INT 1
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: LIST
59004: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59005: LD_ADDR_VAR 0 63
59009: PUSH
59010: LD_INT 1
59012: NEG
59013: PUSH
59014: LD_INT 1
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 2
59023: NEG
59024: PUSH
59025: LD_INT 0
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 2
59034: NEG
59035: PUSH
59036: LD_INT 1
59038: NEG
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: LIST
59048: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59049: LD_ADDR_VAR 0 64
59053: PUSH
59054: LD_INT 1
59056: NEG
59057: PUSH
59058: LD_INT 2
59060: NEG
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: PUSH
59066: LD_INT 2
59068: NEG
59069: PUSH
59070: LD_INT 1
59072: NEG
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 2
59080: NEG
59081: PUSH
59082: LD_INT 2
59084: NEG
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: LIST
59094: ST_TO_ADDR
// end ; 2 :
59095: GO 62361
59097: LD_INT 2
59099: DOUBLE
59100: EQUAL
59101: IFTRUE 59105
59103: GO 62360
59105: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59106: LD_ADDR_VAR 0 29
59110: PUSH
59111: LD_INT 4
59113: PUSH
59114: LD_INT 0
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: LD_INT 4
59123: PUSH
59124: LD_INT 1
59126: NEG
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 5
59134: PUSH
59135: LD_INT 0
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: PUSH
59142: LD_INT 5
59144: PUSH
59145: LD_INT 1
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: PUSH
59152: LD_INT 4
59154: PUSH
59155: LD_INT 1
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: PUSH
59162: LD_INT 3
59164: PUSH
59165: LD_INT 0
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: PUSH
59172: LD_INT 3
59174: PUSH
59175: LD_INT 1
59177: NEG
59178: PUSH
59179: EMPTY
59180: LIST
59181: LIST
59182: PUSH
59183: LD_INT 3
59185: PUSH
59186: LD_INT 2
59188: NEG
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: PUSH
59194: LD_INT 5
59196: PUSH
59197: LD_INT 2
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: LD_INT 3
59206: PUSH
59207: LD_INT 3
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: LD_INT 3
59216: PUSH
59217: LD_INT 2
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: LD_INT 4
59226: PUSH
59227: LD_INT 3
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: LD_INT 4
59236: PUSH
59237: LD_INT 4
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: PUSH
59244: LD_INT 3
59246: PUSH
59247: LD_INT 4
59249: PUSH
59250: EMPTY
59251: LIST
59252: LIST
59253: PUSH
59254: LD_INT 2
59256: PUSH
59257: LD_INT 3
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: LD_INT 2
59266: PUSH
59267: LD_INT 2
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: LD_INT 4
59276: PUSH
59277: LD_INT 2
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 2
59286: PUSH
59287: LD_INT 4
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: LD_INT 0
59296: PUSH
59297: LD_INT 4
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PUSH
59304: LD_INT 0
59306: PUSH
59307: LD_INT 3
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: LD_INT 1
59316: PUSH
59317: LD_INT 4
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: PUSH
59324: LD_INT 1
59326: PUSH
59327: LD_INT 5
59329: PUSH
59330: EMPTY
59331: LIST
59332: LIST
59333: PUSH
59334: LD_INT 0
59336: PUSH
59337: LD_INT 5
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: PUSH
59344: LD_INT 1
59346: NEG
59347: PUSH
59348: LD_INT 4
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: PUSH
59355: LD_INT 1
59357: NEG
59358: PUSH
59359: LD_INT 3
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: LD_INT 2
59368: PUSH
59369: LD_INT 5
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: LD_INT 2
59378: NEG
59379: PUSH
59380: LD_INT 3
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PUSH
59387: LD_INT 3
59389: NEG
59390: PUSH
59391: LD_INT 0
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: LD_INT 3
59400: NEG
59401: PUSH
59402: LD_INT 1
59404: NEG
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 2
59412: NEG
59413: PUSH
59414: LD_INT 0
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: LD_INT 2
59423: NEG
59424: PUSH
59425: LD_INT 1
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: LD_INT 3
59434: NEG
59435: PUSH
59436: LD_INT 1
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: LD_INT 4
59445: NEG
59446: PUSH
59447: LD_INT 0
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: PUSH
59454: LD_INT 4
59456: NEG
59457: PUSH
59458: LD_INT 1
59460: NEG
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: PUSH
59466: LD_INT 4
59468: NEG
59469: PUSH
59470: LD_INT 2
59472: NEG
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: PUSH
59478: LD_INT 2
59480: NEG
59481: PUSH
59482: LD_INT 2
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: PUSH
59489: LD_INT 4
59491: NEG
59492: PUSH
59493: LD_INT 4
59495: NEG
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: PUSH
59501: LD_INT 4
59503: NEG
59504: PUSH
59505: LD_INT 5
59507: NEG
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: LD_INT 3
59515: NEG
59516: PUSH
59517: LD_INT 4
59519: NEG
59520: PUSH
59521: EMPTY
59522: LIST
59523: LIST
59524: PUSH
59525: LD_INT 3
59527: NEG
59528: PUSH
59529: LD_INT 3
59531: NEG
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: PUSH
59537: LD_INT 4
59539: NEG
59540: PUSH
59541: LD_INT 3
59543: NEG
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: PUSH
59549: LD_INT 5
59551: NEG
59552: PUSH
59553: LD_INT 4
59555: NEG
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 5
59563: NEG
59564: PUSH
59565: LD_INT 5
59567: NEG
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: LD_INT 3
59575: NEG
59576: PUSH
59577: LD_INT 5
59579: NEG
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: LD_INT 5
59587: NEG
59588: PUSH
59589: LD_INT 3
59591: NEG
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: LIST
59604: LIST
59605: LIST
59606: LIST
59607: LIST
59608: LIST
59609: LIST
59610: LIST
59611: LIST
59612: LIST
59613: LIST
59614: LIST
59615: LIST
59616: LIST
59617: LIST
59618: LIST
59619: LIST
59620: LIST
59621: LIST
59622: LIST
59623: LIST
59624: LIST
59625: LIST
59626: LIST
59627: LIST
59628: LIST
59629: LIST
59630: LIST
59631: LIST
59632: LIST
59633: LIST
59634: LIST
59635: LIST
59636: LIST
59637: LIST
59638: LIST
59639: LIST
59640: LIST
59641: LIST
59642: LIST
59643: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59644: LD_ADDR_VAR 0 30
59648: PUSH
59649: LD_INT 4
59651: PUSH
59652: LD_INT 4
59654: PUSH
59655: EMPTY
59656: LIST
59657: LIST
59658: PUSH
59659: LD_INT 4
59661: PUSH
59662: LD_INT 3
59664: PUSH
59665: EMPTY
59666: LIST
59667: LIST
59668: PUSH
59669: LD_INT 5
59671: PUSH
59672: LD_INT 4
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: LD_INT 5
59681: PUSH
59682: LD_INT 5
59684: PUSH
59685: EMPTY
59686: LIST
59687: LIST
59688: PUSH
59689: LD_INT 4
59691: PUSH
59692: LD_INT 5
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: PUSH
59699: LD_INT 3
59701: PUSH
59702: LD_INT 4
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: PUSH
59709: LD_INT 3
59711: PUSH
59712: LD_INT 3
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: PUSH
59719: LD_INT 5
59721: PUSH
59722: LD_INT 3
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: LD_INT 3
59731: PUSH
59732: LD_INT 5
59734: PUSH
59735: EMPTY
59736: LIST
59737: LIST
59738: PUSH
59739: LD_INT 0
59741: PUSH
59742: LD_INT 3
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: PUSH
59749: LD_INT 0
59751: PUSH
59752: LD_INT 2
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: LD_INT 1
59761: PUSH
59762: LD_INT 3
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PUSH
59769: LD_INT 1
59771: PUSH
59772: LD_INT 4
59774: PUSH
59775: EMPTY
59776: LIST
59777: LIST
59778: PUSH
59779: LD_INT 0
59781: PUSH
59782: LD_INT 4
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: LD_INT 1
59791: NEG
59792: PUSH
59793: LD_INT 3
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PUSH
59800: LD_INT 1
59802: NEG
59803: PUSH
59804: LD_INT 2
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: LD_INT 2
59813: PUSH
59814: LD_INT 4
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 2
59823: NEG
59824: PUSH
59825: LD_INT 2
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 4
59834: NEG
59835: PUSH
59836: LD_INT 0
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: PUSH
59843: LD_INT 4
59845: NEG
59846: PUSH
59847: LD_INT 1
59849: NEG
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: PUSH
59855: LD_INT 3
59857: NEG
59858: PUSH
59859: LD_INT 0
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: PUSH
59866: LD_INT 3
59868: NEG
59869: PUSH
59870: LD_INT 1
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: LD_INT 4
59879: NEG
59880: PUSH
59881: LD_INT 1
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: PUSH
59888: LD_INT 5
59890: NEG
59891: PUSH
59892: LD_INT 0
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: PUSH
59899: LD_INT 5
59901: NEG
59902: PUSH
59903: LD_INT 1
59905: NEG
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: PUSH
59911: LD_INT 5
59913: NEG
59914: PUSH
59915: LD_INT 2
59917: NEG
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: PUSH
59923: LD_INT 3
59925: NEG
59926: PUSH
59927: LD_INT 2
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: PUSH
59934: LD_INT 3
59936: NEG
59937: PUSH
59938: LD_INT 3
59940: NEG
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 3
59948: NEG
59949: PUSH
59950: LD_INT 4
59952: NEG
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: LD_INT 2
59960: NEG
59961: PUSH
59962: LD_INT 3
59964: NEG
59965: PUSH
59966: EMPTY
59967: LIST
59968: LIST
59969: PUSH
59970: LD_INT 2
59972: NEG
59973: PUSH
59974: LD_INT 2
59976: NEG
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 3
59984: NEG
59985: PUSH
59986: LD_INT 2
59988: NEG
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: PUSH
59994: LD_INT 4
59996: NEG
59997: PUSH
59998: LD_INT 3
60000: NEG
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: PUSH
60006: LD_INT 4
60008: NEG
60009: PUSH
60010: LD_INT 4
60012: NEG
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: LD_INT 2
60020: NEG
60021: PUSH
60022: LD_INT 4
60024: NEG
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PUSH
60030: LD_INT 4
60032: NEG
60033: PUSH
60034: LD_INT 2
60036: NEG
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PUSH
60042: LD_INT 0
60044: PUSH
60045: LD_INT 4
60047: NEG
60048: PUSH
60049: EMPTY
60050: LIST
60051: LIST
60052: PUSH
60053: LD_INT 0
60055: PUSH
60056: LD_INT 5
60058: NEG
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 1
60066: PUSH
60067: LD_INT 4
60069: NEG
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: PUSH
60075: LD_INT 1
60077: PUSH
60078: LD_INT 3
60080: NEG
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: LD_INT 0
60088: PUSH
60089: LD_INT 3
60091: NEG
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: PUSH
60097: LD_INT 1
60099: NEG
60100: PUSH
60101: LD_INT 4
60103: NEG
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: PUSH
60109: LD_INT 1
60111: NEG
60112: PUSH
60113: LD_INT 5
60115: NEG
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PUSH
60121: LD_INT 2
60123: PUSH
60124: LD_INT 3
60126: NEG
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 2
60134: NEG
60135: PUSH
60136: LD_INT 5
60138: NEG
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: LIST
60148: LIST
60149: LIST
60150: LIST
60151: LIST
60152: LIST
60153: LIST
60154: LIST
60155: LIST
60156: LIST
60157: LIST
60158: LIST
60159: LIST
60160: LIST
60161: LIST
60162: LIST
60163: LIST
60164: LIST
60165: LIST
60166: LIST
60167: LIST
60168: LIST
60169: LIST
60170: LIST
60171: LIST
60172: LIST
60173: LIST
60174: LIST
60175: LIST
60176: LIST
60177: LIST
60178: LIST
60179: LIST
60180: LIST
60181: LIST
60182: LIST
60183: LIST
60184: LIST
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60191: LD_ADDR_VAR 0 31
60195: PUSH
60196: LD_INT 0
60198: PUSH
60199: LD_INT 4
60201: PUSH
60202: EMPTY
60203: LIST
60204: LIST
60205: PUSH
60206: LD_INT 0
60208: PUSH
60209: LD_INT 3
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: PUSH
60216: LD_INT 1
60218: PUSH
60219: LD_INT 4
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: LD_INT 1
60228: PUSH
60229: LD_INT 5
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: PUSH
60236: LD_INT 0
60238: PUSH
60239: LD_INT 5
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: LD_INT 1
60248: NEG
60249: PUSH
60250: LD_INT 4
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: PUSH
60257: LD_INT 1
60259: NEG
60260: PUSH
60261: LD_INT 3
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: PUSH
60268: LD_INT 2
60270: PUSH
60271: LD_INT 5
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: PUSH
60278: LD_INT 2
60280: NEG
60281: PUSH
60282: LD_INT 3
60284: PUSH
60285: EMPTY
60286: LIST
60287: LIST
60288: PUSH
60289: LD_INT 3
60291: NEG
60292: PUSH
60293: LD_INT 0
60295: PUSH
60296: EMPTY
60297: LIST
60298: LIST
60299: PUSH
60300: LD_INT 3
60302: NEG
60303: PUSH
60304: LD_INT 1
60306: NEG
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: LD_INT 2
60314: NEG
60315: PUSH
60316: LD_INT 0
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: PUSH
60323: LD_INT 2
60325: NEG
60326: PUSH
60327: LD_INT 1
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_INT 3
60336: NEG
60337: PUSH
60338: LD_INT 1
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 4
60347: NEG
60348: PUSH
60349: LD_INT 0
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: PUSH
60356: LD_INT 4
60358: NEG
60359: PUSH
60360: LD_INT 1
60362: NEG
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: LD_INT 4
60370: NEG
60371: PUSH
60372: LD_INT 2
60374: NEG
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: PUSH
60380: LD_INT 2
60382: NEG
60383: PUSH
60384: LD_INT 2
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: PUSH
60391: LD_INT 4
60393: NEG
60394: PUSH
60395: LD_INT 4
60397: NEG
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 4
60405: NEG
60406: PUSH
60407: LD_INT 5
60409: NEG
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: PUSH
60415: LD_INT 3
60417: NEG
60418: PUSH
60419: LD_INT 4
60421: NEG
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 3
60429: NEG
60430: PUSH
60431: LD_INT 3
60433: NEG
60434: PUSH
60435: EMPTY
60436: LIST
60437: LIST
60438: PUSH
60439: LD_INT 4
60441: NEG
60442: PUSH
60443: LD_INT 3
60445: NEG
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: PUSH
60451: LD_INT 5
60453: NEG
60454: PUSH
60455: LD_INT 4
60457: NEG
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: LD_INT 5
60465: NEG
60466: PUSH
60467: LD_INT 5
60469: NEG
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: PUSH
60475: LD_INT 3
60477: NEG
60478: PUSH
60479: LD_INT 5
60481: NEG
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: PUSH
60487: LD_INT 5
60489: NEG
60490: PUSH
60491: LD_INT 3
60493: NEG
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 0
60501: PUSH
60502: LD_INT 3
60504: NEG
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: PUSH
60510: LD_INT 0
60512: PUSH
60513: LD_INT 4
60515: NEG
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 1
60523: PUSH
60524: LD_INT 3
60526: NEG
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: LD_INT 1
60534: PUSH
60535: LD_INT 2
60537: NEG
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: PUSH
60543: LD_INT 0
60545: PUSH
60546: LD_INT 2
60548: NEG
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: PUSH
60554: LD_INT 1
60556: NEG
60557: PUSH
60558: LD_INT 3
60560: NEG
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: LD_INT 1
60568: NEG
60569: PUSH
60570: LD_INT 4
60572: NEG
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: PUSH
60578: LD_INT 2
60580: PUSH
60581: LD_INT 2
60583: NEG
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: LD_INT 2
60591: NEG
60592: PUSH
60593: LD_INT 4
60595: NEG
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: LD_INT 4
60603: PUSH
60604: LD_INT 0
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: PUSH
60611: LD_INT 4
60613: PUSH
60614: LD_INT 1
60616: NEG
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: LD_INT 5
60624: PUSH
60625: LD_INT 0
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: PUSH
60632: LD_INT 5
60634: PUSH
60635: LD_INT 1
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: LD_INT 4
60644: PUSH
60645: LD_INT 1
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 3
60654: PUSH
60655: LD_INT 0
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: PUSH
60662: LD_INT 3
60664: PUSH
60665: LD_INT 1
60667: NEG
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PUSH
60673: LD_INT 3
60675: PUSH
60676: LD_INT 2
60678: NEG
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: LD_INT 5
60686: PUSH
60687: LD_INT 2
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: PUSH
60694: EMPTY
60695: LIST
60696: LIST
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: LIST
60706: LIST
60707: LIST
60708: LIST
60709: LIST
60710: LIST
60711: LIST
60712: LIST
60713: LIST
60714: LIST
60715: LIST
60716: LIST
60717: LIST
60718: LIST
60719: LIST
60720: LIST
60721: LIST
60722: LIST
60723: LIST
60724: LIST
60725: LIST
60726: LIST
60727: LIST
60728: LIST
60729: LIST
60730: LIST
60731: LIST
60732: LIST
60733: LIST
60734: LIST
60735: LIST
60736: LIST
60737: LIST
60738: LIST
60739: LIST
60740: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60741: LD_ADDR_VAR 0 32
60745: PUSH
60746: LD_INT 4
60748: NEG
60749: PUSH
60750: LD_INT 0
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: LD_INT 4
60759: NEG
60760: PUSH
60761: LD_INT 1
60763: NEG
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: PUSH
60769: LD_INT 3
60771: NEG
60772: PUSH
60773: LD_INT 0
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PUSH
60780: LD_INT 3
60782: NEG
60783: PUSH
60784: LD_INT 1
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: PUSH
60791: LD_INT 4
60793: NEG
60794: PUSH
60795: LD_INT 1
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: PUSH
60802: LD_INT 5
60804: NEG
60805: PUSH
60806: LD_INT 0
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: PUSH
60813: LD_INT 5
60815: NEG
60816: PUSH
60817: LD_INT 1
60819: NEG
60820: PUSH
60821: EMPTY
60822: LIST
60823: LIST
60824: PUSH
60825: LD_INT 5
60827: NEG
60828: PUSH
60829: LD_INT 2
60831: NEG
60832: PUSH
60833: EMPTY
60834: LIST
60835: LIST
60836: PUSH
60837: LD_INT 3
60839: NEG
60840: PUSH
60841: LD_INT 2
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: LD_INT 3
60850: NEG
60851: PUSH
60852: LD_INT 3
60854: NEG
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: LD_INT 3
60862: NEG
60863: PUSH
60864: LD_INT 4
60866: NEG
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: PUSH
60872: LD_INT 2
60874: NEG
60875: PUSH
60876: LD_INT 3
60878: NEG
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: PUSH
60884: LD_INT 2
60886: NEG
60887: PUSH
60888: LD_INT 2
60890: NEG
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: PUSH
60896: LD_INT 3
60898: NEG
60899: PUSH
60900: LD_INT 2
60902: NEG
60903: PUSH
60904: EMPTY
60905: LIST
60906: LIST
60907: PUSH
60908: LD_INT 4
60910: NEG
60911: PUSH
60912: LD_INT 3
60914: NEG
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: PUSH
60920: LD_INT 4
60922: NEG
60923: PUSH
60924: LD_INT 4
60926: NEG
60927: PUSH
60928: EMPTY
60929: LIST
60930: LIST
60931: PUSH
60932: LD_INT 2
60934: NEG
60935: PUSH
60936: LD_INT 4
60938: NEG
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: PUSH
60944: LD_INT 4
60946: NEG
60947: PUSH
60948: LD_INT 2
60950: NEG
60951: PUSH
60952: EMPTY
60953: LIST
60954: LIST
60955: PUSH
60956: LD_INT 0
60958: PUSH
60959: LD_INT 4
60961: NEG
60962: PUSH
60963: EMPTY
60964: LIST
60965: LIST
60966: PUSH
60967: LD_INT 0
60969: PUSH
60970: LD_INT 5
60972: NEG
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_INT 1
60980: PUSH
60981: LD_INT 4
60983: NEG
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: PUSH
60989: LD_INT 1
60991: PUSH
60992: LD_INT 3
60994: NEG
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: LD_INT 0
61002: PUSH
61003: LD_INT 3
61005: NEG
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: LD_INT 1
61013: NEG
61014: PUSH
61015: LD_INT 4
61017: NEG
61018: PUSH
61019: EMPTY
61020: LIST
61021: LIST
61022: PUSH
61023: LD_INT 1
61025: NEG
61026: PUSH
61027: LD_INT 5
61029: NEG
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: LD_INT 2
61037: PUSH
61038: LD_INT 3
61040: NEG
61041: PUSH
61042: EMPTY
61043: LIST
61044: LIST
61045: PUSH
61046: LD_INT 2
61048: NEG
61049: PUSH
61050: LD_INT 5
61052: NEG
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PUSH
61058: LD_INT 3
61060: PUSH
61061: LD_INT 0
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: PUSH
61068: LD_INT 3
61070: PUSH
61071: LD_INT 1
61073: NEG
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: PUSH
61079: LD_INT 4
61081: PUSH
61082: LD_INT 0
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: PUSH
61089: LD_INT 4
61091: PUSH
61092: LD_INT 1
61094: PUSH
61095: EMPTY
61096: LIST
61097: LIST
61098: PUSH
61099: LD_INT 3
61101: PUSH
61102: LD_INT 1
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_INT 2
61111: PUSH
61112: LD_INT 0
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: PUSH
61119: LD_INT 2
61121: PUSH
61122: LD_INT 1
61124: NEG
61125: PUSH
61126: EMPTY
61127: LIST
61128: LIST
61129: PUSH
61130: LD_INT 2
61132: PUSH
61133: LD_INT 2
61135: NEG
61136: PUSH
61137: EMPTY
61138: LIST
61139: LIST
61140: PUSH
61141: LD_INT 4
61143: PUSH
61144: LD_INT 2
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: PUSH
61151: LD_INT 4
61153: PUSH
61154: LD_INT 4
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: PUSH
61161: LD_INT 4
61163: PUSH
61164: LD_INT 3
61166: PUSH
61167: EMPTY
61168: LIST
61169: LIST
61170: PUSH
61171: LD_INT 5
61173: PUSH
61174: LD_INT 4
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: LD_INT 5
61183: PUSH
61184: LD_INT 5
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: PUSH
61191: LD_INT 4
61193: PUSH
61194: LD_INT 5
61196: PUSH
61197: EMPTY
61198: LIST
61199: LIST
61200: PUSH
61201: LD_INT 3
61203: PUSH
61204: LD_INT 4
61206: PUSH
61207: EMPTY
61208: LIST
61209: LIST
61210: PUSH
61211: LD_INT 3
61213: PUSH
61214: LD_INT 3
61216: PUSH
61217: EMPTY
61218: LIST
61219: LIST
61220: PUSH
61221: LD_INT 5
61223: PUSH
61224: LD_INT 3
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: PUSH
61231: LD_INT 3
61233: PUSH
61234: LD_INT 5
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: LIST
61258: LIST
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: LIST
61271: LIST
61272: LIST
61273: LIST
61274: LIST
61275: LIST
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: LIST
61282: LIST
61283: LIST
61284: LIST
61285: LIST
61286: LIST
61287: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61288: LD_ADDR_VAR 0 33
61292: PUSH
61293: LD_INT 4
61295: NEG
61296: PUSH
61297: LD_INT 4
61299: NEG
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: LD_INT 4
61307: NEG
61308: PUSH
61309: LD_INT 5
61311: NEG
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: PUSH
61317: LD_INT 3
61319: NEG
61320: PUSH
61321: LD_INT 4
61323: NEG
61324: PUSH
61325: EMPTY
61326: LIST
61327: LIST
61328: PUSH
61329: LD_INT 3
61331: NEG
61332: PUSH
61333: LD_INT 3
61335: NEG
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PUSH
61341: LD_INT 4
61343: NEG
61344: PUSH
61345: LD_INT 3
61347: NEG
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: PUSH
61353: LD_INT 5
61355: NEG
61356: PUSH
61357: LD_INT 4
61359: NEG
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 5
61367: NEG
61368: PUSH
61369: LD_INT 5
61371: NEG
61372: PUSH
61373: EMPTY
61374: LIST
61375: LIST
61376: PUSH
61377: LD_INT 3
61379: NEG
61380: PUSH
61381: LD_INT 5
61383: NEG
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: PUSH
61389: LD_INT 5
61391: NEG
61392: PUSH
61393: LD_INT 3
61395: NEG
61396: PUSH
61397: EMPTY
61398: LIST
61399: LIST
61400: PUSH
61401: LD_INT 0
61403: PUSH
61404: LD_INT 3
61406: NEG
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: PUSH
61412: LD_INT 0
61414: PUSH
61415: LD_INT 4
61417: NEG
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: PUSH
61423: LD_INT 1
61425: PUSH
61426: LD_INT 3
61428: NEG
61429: PUSH
61430: EMPTY
61431: LIST
61432: LIST
61433: PUSH
61434: LD_INT 1
61436: PUSH
61437: LD_INT 2
61439: NEG
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: PUSH
61445: LD_INT 0
61447: PUSH
61448: LD_INT 2
61450: NEG
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: PUSH
61456: LD_INT 1
61458: NEG
61459: PUSH
61460: LD_INT 3
61462: NEG
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: PUSH
61468: LD_INT 1
61470: NEG
61471: PUSH
61472: LD_INT 4
61474: NEG
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 2
61482: PUSH
61483: LD_INT 2
61485: NEG
61486: PUSH
61487: EMPTY
61488: LIST
61489: LIST
61490: PUSH
61491: LD_INT 2
61493: NEG
61494: PUSH
61495: LD_INT 4
61497: NEG
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: PUSH
61503: LD_INT 4
61505: PUSH
61506: LD_INT 0
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: PUSH
61513: LD_INT 4
61515: PUSH
61516: LD_INT 1
61518: NEG
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PUSH
61524: LD_INT 5
61526: PUSH
61527: LD_INT 0
61529: PUSH
61530: EMPTY
61531: LIST
61532: LIST
61533: PUSH
61534: LD_INT 5
61536: PUSH
61537: LD_INT 1
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: PUSH
61544: LD_INT 4
61546: PUSH
61547: LD_INT 1
61549: PUSH
61550: EMPTY
61551: LIST
61552: LIST
61553: PUSH
61554: LD_INT 3
61556: PUSH
61557: LD_INT 0
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: PUSH
61564: LD_INT 3
61566: PUSH
61567: LD_INT 1
61569: NEG
61570: PUSH
61571: EMPTY
61572: LIST
61573: LIST
61574: PUSH
61575: LD_INT 3
61577: PUSH
61578: LD_INT 2
61580: NEG
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: PUSH
61586: LD_INT 5
61588: PUSH
61589: LD_INT 2
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: PUSH
61596: LD_INT 3
61598: PUSH
61599: LD_INT 3
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: LD_INT 3
61608: PUSH
61609: LD_INT 2
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: PUSH
61616: LD_INT 4
61618: PUSH
61619: LD_INT 3
61621: PUSH
61622: EMPTY
61623: LIST
61624: LIST
61625: PUSH
61626: LD_INT 4
61628: PUSH
61629: LD_INT 4
61631: PUSH
61632: EMPTY
61633: LIST
61634: LIST
61635: PUSH
61636: LD_INT 3
61638: PUSH
61639: LD_INT 4
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: PUSH
61646: LD_INT 2
61648: PUSH
61649: LD_INT 3
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: PUSH
61656: LD_INT 2
61658: PUSH
61659: LD_INT 2
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: PUSH
61666: LD_INT 4
61668: PUSH
61669: LD_INT 2
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: PUSH
61676: LD_INT 2
61678: PUSH
61679: LD_INT 4
61681: PUSH
61682: EMPTY
61683: LIST
61684: LIST
61685: PUSH
61686: LD_INT 0
61688: PUSH
61689: LD_INT 4
61691: PUSH
61692: EMPTY
61693: LIST
61694: LIST
61695: PUSH
61696: LD_INT 0
61698: PUSH
61699: LD_INT 3
61701: PUSH
61702: EMPTY
61703: LIST
61704: LIST
61705: PUSH
61706: LD_INT 1
61708: PUSH
61709: LD_INT 4
61711: PUSH
61712: EMPTY
61713: LIST
61714: LIST
61715: PUSH
61716: LD_INT 1
61718: PUSH
61719: LD_INT 5
61721: PUSH
61722: EMPTY
61723: LIST
61724: LIST
61725: PUSH
61726: LD_INT 0
61728: PUSH
61729: LD_INT 5
61731: PUSH
61732: EMPTY
61733: LIST
61734: LIST
61735: PUSH
61736: LD_INT 1
61738: NEG
61739: PUSH
61740: LD_INT 4
61742: PUSH
61743: EMPTY
61744: LIST
61745: LIST
61746: PUSH
61747: LD_INT 1
61749: NEG
61750: PUSH
61751: LD_INT 3
61753: PUSH
61754: EMPTY
61755: LIST
61756: LIST
61757: PUSH
61758: LD_INT 2
61760: PUSH
61761: LD_INT 5
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: PUSH
61768: LD_INT 2
61770: NEG
61771: PUSH
61772: LD_INT 3
61774: PUSH
61775: EMPTY
61776: LIST
61777: LIST
61778: PUSH
61779: EMPTY
61780: LIST
61781: LIST
61782: LIST
61783: LIST
61784: LIST
61785: LIST
61786: LIST
61787: LIST
61788: LIST
61789: LIST
61790: LIST
61791: LIST
61792: LIST
61793: LIST
61794: LIST
61795: LIST
61796: LIST
61797: LIST
61798: LIST
61799: LIST
61800: LIST
61801: LIST
61802: LIST
61803: LIST
61804: LIST
61805: LIST
61806: LIST
61807: LIST
61808: LIST
61809: LIST
61810: LIST
61811: LIST
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: LIST
61823: LIST
61824: LIST
61825: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61826: LD_ADDR_VAR 0 34
61830: PUSH
61831: LD_INT 0
61833: PUSH
61834: LD_INT 4
61836: NEG
61837: PUSH
61838: EMPTY
61839: LIST
61840: LIST
61841: PUSH
61842: LD_INT 0
61844: PUSH
61845: LD_INT 5
61847: NEG
61848: PUSH
61849: EMPTY
61850: LIST
61851: LIST
61852: PUSH
61853: LD_INT 1
61855: PUSH
61856: LD_INT 4
61858: NEG
61859: PUSH
61860: EMPTY
61861: LIST
61862: LIST
61863: PUSH
61864: LD_INT 1
61866: PUSH
61867: LD_INT 3
61869: NEG
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: PUSH
61875: LD_INT 0
61877: PUSH
61878: LD_INT 3
61880: NEG
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: PUSH
61886: LD_INT 1
61888: NEG
61889: PUSH
61890: LD_INT 4
61892: NEG
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: PUSH
61898: LD_INT 1
61900: NEG
61901: PUSH
61902: LD_INT 5
61904: NEG
61905: PUSH
61906: EMPTY
61907: LIST
61908: LIST
61909: PUSH
61910: LD_INT 2
61912: PUSH
61913: LD_INT 3
61915: NEG
61916: PUSH
61917: EMPTY
61918: LIST
61919: LIST
61920: PUSH
61921: LD_INT 2
61923: NEG
61924: PUSH
61925: LD_INT 5
61927: NEG
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: PUSH
61933: LD_INT 3
61935: PUSH
61936: LD_INT 0
61938: PUSH
61939: EMPTY
61940: LIST
61941: LIST
61942: PUSH
61943: LD_INT 3
61945: PUSH
61946: LD_INT 1
61948: NEG
61949: PUSH
61950: EMPTY
61951: LIST
61952: LIST
61953: PUSH
61954: LD_INT 4
61956: PUSH
61957: LD_INT 0
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: PUSH
61964: LD_INT 4
61966: PUSH
61967: LD_INT 1
61969: PUSH
61970: EMPTY
61971: LIST
61972: LIST
61973: PUSH
61974: LD_INT 3
61976: PUSH
61977: LD_INT 1
61979: PUSH
61980: EMPTY
61981: LIST
61982: LIST
61983: PUSH
61984: LD_INT 2
61986: PUSH
61987: LD_INT 0
61989: PUSH
61990: EMPTY
61991: LIST
61992: LIST
61993: PUSH
61994: LD_INT 2
61996: PUSH
61997: LD_INT 1
61999: NEG
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: PUSH
62005: LD_INT 2
62007: PUSH
62008: LD_INT 2
62010: NEG
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: PUSH
62016: LD_INT 4
62018: PUSH
62019: LD_INT 2
62021: PUSH
62022: EMPTY
62023: LIST
62024: LIST
62025: PUSH
62026: LD_INT 4
62028: PUSH
62029: LD_INT 4
62031: PUSH
62032: EMPTY
62033: LIST
62034: LIST
62035: PUSH
62036: LD_INT 4
62038: PUSH
62039: LD_INT 3
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: LD_INT 5
62048: PUSH
62049: LD_INT 4
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: PUSH
62056: LD_INT 5
62058: PUSH
62059: LD_INT 5
62061: PUSH
62062: EMPTY
62063: LIST
62064: LIST
62065: PUSH
62066: LD_INT 4
62068: PUSH
62069: LD_INT 5
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: PUSH
62076: LD_INT 3
62078: PUSH
62079: LD_INT 4
62081: PUSH
62082: EMPTY
62083: LIST
62084: LIST
62085: PUSH
62086: LD_INT 3
62088: PUSH
62089: LD_INT 3
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: PUSH
62096: LD_INT 5
62098: PUSH
62099: LD_INT 3
62101: PUSH
62102: EMPTY
62103: LIST
62104: LIST
62105: PUSH
62106: LD_INT 3
62108: PUSH
62109: LD_INT 5
62111: PUSH
62112: EMPTY
62113: LIST
62114: LIST
62115: PUSH
62116: LD_INT 0
62118: PUSH
62119: LD_INT 3
62121: PUSH
62122: EMPTY
62123: LIST
62124: LIST
62125: PUSH
62126: LD_INT 0
62128: PUSH
62129: LD_INT 2
62131: PUSH
62132: EMPTY
62133: LIST
62134: LIST
62135: PUSH
62136: LD_INT 1
62138: PUSH
62139: LD_INT 3
62141: PUSH
62142: EMPTY
62143: LIST
62144: LIST
62145: PUSH
62146: LD_INT 1
62148: PUSH
62149: LD_INT 4
62151: PUSH
62152: EMPTY
62153: LIST
62154: LIST
62155: PUSH
62156: LD_INT 0
62158: PUSH
62159: LD_INT 4
62161: PUSH
62162: EMPTY
62163: LIST
62164: LIST
62165: PUSH
62166: LD_INT 1
62168: NEG
62169: PUSH
62170: LD_INT 3
62172: PUSH
62173: EMPTY
62174: LIST
62175: LIST
62176: PUSH
62177: LD_INT 1
62179: NEG
62180: PUSH
62181: LD_INT 2
62183: PUSH
62184: EMPTY
62185: LIST
62186: LIST
62187: PUSH
62188: LD_INT 2
62190: PUSH
62191: LD_INT 4
62193: PUSH
62194: EMPTY
62195: LIST
62196: LIST
62197: PUSH
62198: LD_INT 2
62200: NEG
62201: PUSH
62202: LD_INT 2
62204: PUSH
62205: EMPTY
62206: LIST
62207: LIST
62208: PUSH
62209: LD_INT 4
62211: NEG
62212: PUSH
62213: LD_INT 0
62215: PUSH
62216: EMPTY
62217: LIST
62218: LIST
62219: PUSH
62220: LD_INT 4
62222: NEG
62223: PUSH
62224: LD_INT 1
62226: NEG
62227: PUSH
62228: EMPTY
62229: LIST
62230: LIST
62231: PUSH
62232: LD_INT 3
62234: NEG
62235: PUSH
62236: LD_INT 0
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: PUSH
62243: LD_INT 3
62245: NEG
62246: PUSH
62247: LD_INT 1
62249: PUSH
62250: EMPTY
62251: LIST
62252: LIST
62253: PUSH
62254: LD_INT 4
62256: NEG
62257: PUSH
62258: LD_INT 1
62260: PUSH
62261: EMPTY
62262: LIST
62263: LIST
62264: PUSH
62265: LD_INT 5
62267: NEG
62268: PUSH
62269: LD_INT 0
62271: PUSH
62272: EMPTY
62273: LIST
62274: LIST
62275: PUSH
62276: LD_INT 5
62278: NEG
62279: PUSH
62280: LD_INT 1
62282: NEG
62283: PUSH
62284: EMPTY
62285: LIST
62286: LIST
62287: PUSH
62288: LD_INT 5
62290: NEG
62291: PUSH
62292: LD_INT 2
62294: NEG
62295: PUSH
62296: EMPTY
62297: LIST
62298: LIST
62299: PUSH
62300: LD_INT 3
62302: NEG
62303: PUSH
62304: LD_INT 2
62306: PUSH
62307: EMPTY
62308: LIST
62309: LIST
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: LIST
62315: LIST
62316: LIST
62317: LIST
62318: LIST
62319: LIST
62320: LIST
62321: LIST
62322: LIST
62323: LIST
62324: LIST
62325: LIST
62326: LIST
62327: LIST
62328: LIST
62329: LIST
62330: LIST
62331: LIST
62332: LIST
62333: LIST
62334: LIST
62335: LIST
62336: LIST
62337: LIST
62338: LIST
62339: LIST
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: LIST
62346: LIST
62347: LIST
62348: LIST
62349: LIST
62350: LIST
62351: LIST
62352: LIST
62353: LIST
62354: LIST
62355: LIST
62356: LIST
62357: ST_TO_ADDR
// end ; end ;
62358: GO 62361
62360: POP
// case btype of b_depot , b_warehouse :
62361: LD_VAR 0 1
62365: PUSH
62366: LD_INT 0
62368: DOUBLE
62369: EQUAL
62370: IFTRUE 62380
62372: LD_INT 1
62374: DOUBLE
62375: EQUAL
62376: IFTRUE 62380
62378: GO 62581
62380: POP
// case nation of nation_american :
62381: LD_VAR 0 5
62385: PUSH
62386: LD_INT 1
62388: DOUBLE
62389: EQUAL
62390: IFTRUE 62394
62392: GO 62450
62394: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
62395: LD_ADDR_VAR 0 9
62399: PUSH
62400: LD_VAR 0 11
62404: PUSH
62405: LD_VAR 0 12
62409: PUSH
62410: LD_VAR 0 13
62414: PUSH
62415: LD_VAR 0 14
62419: PUSH
62420: LD_VAR 0 15
62424: PUSH
62425: LD_VAR 0 16
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: LIST
62434: LIST
62435: LIST
62436: LIST
62437: PUSH
62438: LD_VAR 0 4
62442: PUSH
62443: LD_INT 1
62445: PLUS
62446: ARRAY
62447: ST_TO_ADDR
62448: GO 62579
62450: LD_INT 2
62452: DOUBLE
62453: EQUAL
62454: IFTRUE 62458
62456: GO 62514
62458: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
62459: LD_ADDR_VAR 0 9
62463: PUSH
62464: LD_VAR 0 17
62468: PUSH
62469: LD_VAR 0 18
62473: PUSH
62474: LD_VAR 0 19
62478: PUSH
62479: LD_VAR 0 20
62483: PUSH
62484: LD_VAR 0 21
62488: PUSH
62489: LD_VAR 0 22
62493: PUSH
62494: EMPTY
62495: LIST
62496: LIST
62497: LIST
62498: LIST
62499: LIST
62500: LIST
62501: PUSH
62502: LD_VAR 0 4
62506: PUSH
62507: LD_INT 1
62509: PLUS
62510: ARRAY
62511: ST_TO_ADDR
62512: GO 62579
62514: LD_INT 3
62516: DOUBLE
62517: EQUAL
62518: IFTRUE 62522
62520: GO 62578
62522: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62523: LD_ADDR_VAR 0 9
62527: PUSH
62528: LD_VAR 0 23
62532: PUSH
62533: LD_VAR 0 24
62537: PUSH
62538: LD_VAR 0 25
62542: PUSH
62543: LD_VAR 0 26
62547: PUSH
62548: LD_VAR 0 27
62552: PUSH
62553: LD_VAR 0 28
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: LIST
62562: LIST
62563: LIST
62564: LIST
62565: PUSH
62566: LD_VAR 0 4
62570: PUSH
62571: LD_INT 1
62573: PLUS
62574: ARRAY
62575: ST_TO_ADDR
62576: GO 62579
62578: POP
62579: GO 63134
62581: LD_INT 2
62583: DOUBLE
62584: EQUAL
62585: IFTRUE 62595
62587: LD_INT 3
62589: DOUBLE
62590: EQUAL
62591: IFTRUE 62595
62593: GO 62651
62595: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62596: LD_ADDR_VAR 0 9
62600: PUSH
62601: LD_VAR 0 29
62605: PUSH
62606: LD_VAR 0 30
62610: PUSH
62611: LD_VAR 0 31
62615: PUSH
62616: LD_VAR 0 32
62620: PUSH
62621: LD_VAR 0 33
62625: PUSH
62626: LD_VAR 0 34
62630: PUSH
62631: EMPTY
62632: LIST
62633: LIST
62634: LIST
62635: LIST
62636: LIST
62637: LIST
62638: PUSH
62639: LD_VAR 0 4
62643: PUSH
62644: LD_INT 1
62646: PLUS
62647: ARRAY
62648: ST_TO_ADDR
62649: GO 63134
62651: LD_INT 16
62653: DOUBLE
62654: EQUAL
62655: IFTRUE 62713
62657: LD_INT 17
62659: DOUBLE
62660: EQUAL
62661: IFTRUE 62713
62663: LD_INT 18
62665: DOUBLE
62666: EQUAL
62667: IFTRUE 62713
62669: LD_INT 19
62671: DOUBLE
62672: EQUAL
62673: IFTRUE 62713
62675: LD_INT 22
62677: DOUBLE
62678: EQUAL
62679: IFTRUE 62713
62681: LD_INT 20
62683: DOUBLE
62684: EQUAL
62685: IFTRUE 62713
62687: LD_INT 21
62689: DOUBLE
62690: EQUAL
62691: IFTRUE 62713
62693: LD_INT 23
62695: DOUBLE
62696: EQUAL
62697: IFTRUE 62713
62699: LD_INT 24
62701: DOUBLE
62702: EQUAL
62703: IFTRUE 62713
62705: LD_INT 25
62707: DOUBLE
62708: EQUAL
62709: IFTRUE 62713
62711: GO 62769
62713: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62714: LD_ADDR_VAR 0 9
62718: PUSH
62719: LD_VAR 0 35
62723: PUSH
62724: LD_VAR 0 36
62728: PUSH
62729: LD_VAR 0 37
62733: PUSH
62734: LD_VAR 0 38
62738: PUSH
62739: LD_VAR 0 39
62743: PUSH
62744: LD_VAR 0 40
62748: PUSH
62749: EMPTY
62750: LIST
62751: LIST
62752: LIST
62753: LIST
62754: LIST
62755: LIST
62756: PUSH
62757: LD_VAR 0 4
62761: PUSH
62762: LD_INT 1
62764: PLUS
62765: ARRAY
62766: ST_TO_ADDR
62767: GO 63134
62769: LD_INT 6
62771: DOUBLE
62772: EQUAL
62773: IFTRUE 62825
62775: LD_INT 7
62777: DOUBLE
62778: EQUAL
62779: IFTRUE 62825
62781: LD_INT 8
62783: DOUBLE
62784: EQUAL
62785: IFTRUE 62825
62787: LD_INT 13
62789: DOUBLE
62790: EQUAL
62791: IFTRUE 62825
62793: LD_INT 12
62795: DOUBLE
62796: EQUAL
62797: IFTRUE 62825
62799: LD_INT 15
62801: DOUBLE
62802: EQUAL
62803: IFTRUE 62825
62805: LD_INT 11
62807: DOUBLE
62808: EQUAL
62809: IFTRUE 62825
62811: LD_INT 14
62813: DOUBLE
62814: EQUAL
62815: IFTRUE 62825
62817: LD_INT 10
62819: DOUBLE
62820: EQUAL
62821: IFTRUE 62825
62823: GO 62881
62825: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
62826: LD_ADDR_VAR 0 9
62830: PUSH
62831: LD_VAR 0 41
62835: PUSH
62836: LD_VAR 0 42
62840: PUSH
62841: LD_VAR 0 43
62845: PUSH
62846: LD_VAR 0 44
62850: PUSH
62851: LD_VAR 0 45
62855: PUSH
62856: LD_VAR 0 46
62860: PUSH
62861: EMPTY
62862: LIST
62863: LIST
62864: LIST
62865: LIST
62866: LIST
62867: LIST
62868: PUSH
62869: LD_VAR 0 4
62873: PUSH
62874: LD_INT 1
62876: PLUS
62877: ARRAY
62878: ST_TO_ADDR
62879: GO 63134
62881: LD_INT 36
62883: DOUBLE
62884: EQUAL
62885: IFTRUE 62889
62887: GO 62945
62889: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62890: LD_ADDR_VAR 0 9
62894: PUSH
62895: LD_VAR 0 47
62899: PUSH
62900: LD_VAR 0 48
62904: PUSH
62905: LD_VAR 0 49
62909: PUSH
62910: LD_VAR 0 50
62914: PUSH
62915: LD_VAR 0 51
62919: PUSH
62920: LD_VAR 0 52
62924: PUSH
62925: EMPTY
62926: LIST
62927: LIST
62928: LIST
62929: LIST
62930: LIST
62931: LIST
62932: PUSH
62933: LD_VAR 0 4
62937: PUSH
62938: LD_INT 1
62940: PLUS
62941: ARRAY
62942: ST_TO_ADDR
62943: GO 63134
62945: LD_INT 4
62947: DOUBLE
62948: EQUAL
62949: IFTRUE 62971
62951: LD_INT 5
62953: DOUBLE
62954: EQUAL
62955: IFTRUE 62971
62957: LD_INT 34
62959: DOUBLE
62960: EQUAL
62961: IFTRUE 62971
62963: LD_INT 37
62965: DOUBLE
62966: EQUAL
62967: IFTRUE 62971
62969: GO 63027
62971: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62972: LD_ADDR_VAR 0 9
62976: PUSH
62977: LD_VAR 0 53
62981: PUSH
62982: LD_VAR 0 54
62986: PUSH
62987: LD_VAR 0 55
62991: PUSH
62992: LD_VAR 0 56
62996: PUSH
62997: LD_VAR 0 57
63001: PUSH
63002: LD_VAR 0 58
63006: PUSH
63007: EMPTY
63008: LIST
63009: LIST
63010: LIST
63011: LIST
63012: LIST
63013: LIST
63014: PUSH
63015: LD_VAR 0 4
63019: PUSH
63020: LD_INT 1
63022: PLUS
63023: ARRAY
63024: ST_TO_ADDR
63025: GO 63134
63027: LD_INT 31
63029: DOUBLE
63030: EQUAL
63031: IFTRUE 63077
63033: LD_INT 32
63035: DOUBLE
63036: EQUAL
63037: IFTRUE 63077
63039: LD_INT 33
63041: DOUBLE
63042: EQUAL
63043: IFTRUE 63077
63045: LD_INT 27
63047: DOUBLE
63048: EQUAL
63049: IFTRUE 63077
63051: LD_INT 26
63053: DOUBLE
63054: EQUAL
63055: IFTRUE 63077
63057: LD_INT 28
63059: DOUBLE
63060: EQUAL
63061: IFTRUE 63077
63063: LD_INT 29
63065: DOUBLE
63066: EQUAL
63067: IFTRUE 63077
63069: LD_INT 30
63071: DOUBLE
63072: EQUAL
63073: IFTRUE 63077
63075: GO 63133
63077: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
63078: LD_ADDR_VAR 0 9
63082: PUSH
63083: LD_VAR 0 59
63087: PUSH
63088: LD_VAR 0 60
63092: PUSH
63093: LD_VAR 0 61
63097: PUSH
63098: LD_VAR 0 62
63102: PUSH
63103: LD_VAR 0 63
63107: PUSH
63108: LD_VAR 0 64
63112: PUSH
63113: EMPTY
63114: LIST
63115: LIST
63116: LIST
63117: LIST
63118: LIST
63119: LIST
63120: PUSH
63121: LD_VAR 0 4
63125: PUSH
63126: LD_INT 1
63128: PLUS
63129: ARRAY
63130: ST_TO_ADDR
63131: GO 63134
63133: POP
// temp_list2 = [ ] ;
63134: LD_ADDR_VAR 0 10
63138: PUSH
63139: EMPTY
63140: ST_TO_ADDR
// for i in temp_list do
63141: LD_ADDR_VAR 0 8
63145: PUSH
63146: LD_VAR 0 9
63150: PUSH
63151: FOR_IN
63152: IFFALSE 63204
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63154: LD_ADDR_VAR 0 10
63158: PUSH
63159: LD_VAR 0 10
63163: PUSH
63164: LD_VAR 0 8
63168: PUSH
63169: LD_INT 1
63171: ARRAY
63172: PUSH
63173: LD_VAR 0 2
63177: PLUS
63178: PUSH
63179: LD_VAR 0 8
63183: PUSH
63184: LD_INT 2
63186: ARRAY
63187: PUSH
63188: LD_VAR 0 3
63192: PLUS
63193: PUSH
63194: EMPTY
63195: LIST
63196: LIST
63197: PUSH
63198: EMPTY
63199: LIST
63200: ADD
63201: ST_TO_ADDR
63202: GO 63151
63204: POP
63205: POP
// result = temp_list2 ;
63206: LD_ADDR_VAR 0 7
63210: PUSH
63211: LD_VAR 0 10
63215: ST_TO_ADDR
// end ;
63216: LD_VAR 0 7
63220: RET
// export function EnemyInRange ( unit , dist ) ; begin
63221: LD_INT 0
63223: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63224: LD_ADDR_VAR 0 3
63228: PUSH
63229: LD_VAR 0 1
63233: PPUSH
63234: CALL_OW 255
63238: PPUSH
63239: LD_VAR 0 1
63243: PPUSH
63244: CALL_OW 250
63248: PPUSH
63249: LD_VAR 0 1
63253: PPUSH
63254: CALL_OW 251
63258: PPUSH
63259: LD_VAR 0 2
63263: PPUSH
63264: CALL 37325 0 4
63268: PUSH
63269: LD_INT 4
63271: ARRAY
63272: ST_TO_ADDR
// end ;
63273: LD_VAR 0 3
63277: RET
// export function PlayerSeeMe ( unit ) ; begin
63278: LD_INT 0
63280: PPUSH
// result := See ( your_side , unit ) ;
63281: LD_ADDR_VAR 0 2
63285: PUSH
63286: LD_OWVAR 2
63290: PPUSH
63291: LD_VAR 0 1
63295: PPUSH
63296: CALL_OW 292
63300: ST_TO_ADDR
// end ;
63301: LD_VAR 0 2
63305: RET
// export function ReverseDir ( unit ) ; begin
63306: LD_INT 0
63308: PPUSH
// if not unit then
63309: LD_VAR 0 1
63313: NOT
63314: IFFALSE 63318
// exit ;
63316: GO 63341
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63318: LD_ADDR_VAR 0 2
63322: PUSH
63323: LD_VAR 0 1
63327: PPUSH
63328: CALL_OW 254
63332: PUSH
63333: LD_INT 3
63335: PLUS
63336: PUSH
63337: LD_INT 6
63339: MOD
63340: ST_TO_ADDR
// end ;
63341: LD_VAR 0 2
63345: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
63346: LD_INT 0
63348: PPUSH
63349: PPUSH
63350: PPUSH
63351: PPUSH
63352: PPUSH
// if not hexes then
63353: LD_VAR 0 2
63357: NOT
63358: IFFALSE 63362
// exit ;
63360: GO 63510
// dist := 9999 ;
63362: LD_ADDR_VAR 0 5
63366: PUSH
63367: LD_INT 9999
63369: ST_TO_ADDR
// for i = 1 to hexes do
63370: LD_ADDR_VAR 0 4
63374: PUSH
63375: DOUBLE
63376: LD_INT 1
63378: DEC
63379: ST_TO_ADDR
63380: LD_VAR 0 2
63384: PUSH
63385: FOR_TO
63386: IFFALSE 63498
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
63388: LD_VAR 0 1
63392: PPUSH
63393: LD_VAR 0 2
63397: PUSH
63398: LD_VAR 0 4
63402: ARRAY
63403: PUSH
63404: LD_INT 1
63406: ARRAY
63407: PPUSH
63408: LD_VAR 0 2
63412: PUSH
63413: LD_VAR 0 4
63417: ARRAY
63418: PUSH
63419: LD_INT 2
63421: ARRAY
63422: PPUSH
63423: CALL_OW 297
63427: PUSH
63428: LD_VAR 0 5
63432: LESS
63433: IFFALSE 63496
// begin hex := hexes [ i ] ;
63435: LD_ADDR_VAR 0 7
63439: PUSH
63440: LD_VAR 0 2
63444: PUSH
63445: LD_VAR 0 4
63449: ARRAY
63450: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63451: LD_ADDR_VAR 0 5
63455: PUSH
63456: LD_VAR 0 1
63460: PPUSH
63461: LD_VAR 0 2
63465: PUSH
63466: LD_VAR 0 4
63470: ARRAY
63471: PUSH
63472: LD_INT 1
63474: ARRAY
63475: PPUSH
63476: LD_VAR 0 2
63480: PUSH
63481: LD_VAR 0 4
63485: ARRAY
63486: PUSH
63487: LD_INT 2
63489: ARRAY
63490: PPUSH
63491: CALL_OW 297
63495: ST_TO_ADDR
// end ; end ;
63496: GO 63385
63498: POP
63499: POP
// result := hex ;
63500: LD_ADDR_VAR 0 3
63504: PUSH
63505: LD_VAR 0 7
63509: ST_TO_ADDR
// end ;
63510: LD_VAR 0 3
63514: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63515: LD_INT 0
63517: PPUSH
63518: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63519: LD_VAR 0 1
63523: NOT
63524: PUSH
63525: LD_VAR 0 1
63529: PUSH
63530: LD_INT 21
63532: PUSH
63533: LD_INT 2
63535: PUSH
63536: EMPTY
63537: LIST
63538: LIST
63539: PUSH
63540: LD_INT 23
63542: PUSH
63543: LD_INT 2
63545: PUSH
63546: EMPTY
63547: LIST
63548: LIST
63549: PUSH
63550: EMPTY
63551: LIST
63552: LIST
63553: PPUSH
63554: CALL_OW 69
63558: IN
63559: NOT
63560: OR
63561: IFFALSE 63565
// exit ;
63563: GO 63612
// for i = 1 to 3 do
63565: LD_ADDR_VAR 0 3
63569: PUSH
63570: DOUBLE
63571: LD_INT 1
63573: DEC
63574: ST_TO_ADDR
63575: LD_INT 3
63577: PUSH
63578: FOR_TO
63579: IFFALSE 63610
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63581: LD_VAR 0 1
63585: PPUSH
63586: CALL_OW 250
63590: PPUSH
63591: LD_VAR 0 1
63595: PPUSH
63596: CALL_OW 251
63600: PPUSH
63601: LD_INT 1
63603: PPUSH
63604: CALL_OW 453
63608: GO 63578
63610: POP
63611: POP
// end ;
63612: LD_VAR 0 2
63616: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63617: LD_INT 0
63619: PPUSH
63620: PPUSH
63621: PPUSH
63622: PPUSH
63623: PPUSH
63624: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
63625: LD_VAR 0 1
63629: NOT
63630: PUSH
63631: LD_VAR 0 2
63635: NOT
63636: OR
63637: PUSH
63638: LD_VAR 0 1
63642: PPUSH
63643: CALL_OW 314
63647: OR
63648: IFFALSE 63652
// exit ;
63650: GO 64093
// x := GetX ( enemy_unit ) ;
63652: LD_ADDR_VAR 0 7
63656: PUSH
63657: LD_VAR 0 2
63661: PPUSH
63662: CALL_OW 250
63666: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63667: LD_ADDR_VAR 0 8
63671: PUSH
63672: LD_VAR 0 2
63676: PPUSH
63677: CALL_OW 251
63681: ST_TO_ADDR
// if not x or not y then
63682: LD_VAR 0 7
63686: NOT
63687: PUSH
63688: LD_VAR 0 8
63692: NOT
63693: OR
63694: IFFALSE 63698
// exit ;
63696: GO 64093
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63698: LD_ADDR_VAR 0 6
63702: PUSH
63703: LD_VAR 0 7
63707: PPUSH
63708: LD_INT 0
63710: PPUSH
63711: LD_INT 4
63713: PPUSH
63714: CALL_OW 272
63718: PUSH
63719: LD_VAR 0 8
63723: PPUSH
63724: LD_INT 0
63726: PPUSH
63727: LD_INT 4
63729: PPUSH
63730: CALL_OW 273
63734: PUSH
63735: EMPTY
63736: LIST
63737: LIST
63738: PUSH
63739: LD_VAR 0 7
63743: PPUSH
63744: LD_INT 1
63746: PPUSH
63747: LD_INT 4
63749: PPUSH
63750: CALL_OW 272
63754: PUSH
63755: LD_VAR 0 8
63759: PPUSH
63760: LD_INT 1
63762: PPUSH
63763: LD_INT 4
63765: PPUSH
63766: CALL_OW 273
63770: PUSH
63771: EMPTY
63772: LIST
63773: LIST
63774: PUSH
63775: LD_VAR 0 7
63779: PPUSH
63780: LD_INT 2
63782: PPUSH
63783: LD_INT 4
63785: PPUSH
63786: CALL_OW 272
63790: PUSH
63791: LD_VAR 0 8
63795: PPUSH
63796: LD_INT 2
63798: PPUSH
63799: LD_INT 4
63801: PPUSH
63802: CALL_OW 273
63806: PUSH
63807: EMPTY
63808: LIST
63809: LIST
63810: PUSH
63811: LD_VAR 0 7
63815: PPUSH
63816: LD_INT 3
63818: PPUSH
63819: LD_INT 4
63821: PPUSH
63822: CALL_OW 272
63826: PUSH
63827: LD_VAR 0 8
63831: PPUSH
63832: LD_INT 3
63834: PPUSH
63835: LD_INT 4
63837: PPUSH
63838: CALL_OW 273
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: PUSH
63847: LD_VAR 0 7
63851: PPUSH
63852: LD_INT 4
63854: PPUSH
63855: LD_INT 4
63857: PPUSH
63858: CALL_OW 272
63862: PUSH
63863: LD_VAR 0 8
63867: PPUSH
63868: LD_INT 4
63870: PPUSH
63871: LD_INT 4
63873: PPUSH
63874: CALL_OW 273
63878: PUSH
63879: EMPTY
63880: LIST
63881: LIST
63882: PUSH
63883: LD_VAR 0 7
63887: PPUSH
63888: LD_INT 5
63890: PPUSH
63891: LD_INT 4
63893: PPUSH
63894: CALL_OW 272
63898: PUSH
63899: LD_VAR 0 8
63903: PPUSH
63904: LD_INT 5
63906: PPUSH
63907: LD_INT 4
63909: PPUSH
63910: CALL_OW 273
63914: PUSH
63915: EMPTY
63916: LIST
63917: LIST
63918: PUSH
63919: EMPTY
63920: LIST
63921: LIST
63922: LIST
63923: LIST
63924: LIST
63925: LIST
63926: ST_TO_ADDR
// for i = tmp downto 1 do
63927: LD_ADDR_VAR 0 4
63931: PUSH
63932: DOUBLE
63933: LD_VAR 0 6
63937: INC
63938: ST_TO_ADDR
63939: LD_INT 1
63941: PUSH
63942: FOR_DOWNTO
63943: IFFALSE 64044
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63945: LD_VAR 0 6
63949: PUSH
63950: LD_VAR 0 4
63954: ARRAY
63955: PUSH
63956: LD_INT 1
63958: ARRAY
63959: PPUSH
63960: LD_VAR 0 6
63964: PUSH
63965: LD_VAR 0 4
63969: ARRAY
63970: PUSH
63971: LD_INT 2
63973: ARRAY
63974: PPUSH
63975: CALL_OW 488
63979: NOT
63980: PUSH
63981: LD_VAR 0 6
63985: PUSH
63986: LD_VAR 0 4
63990: ARRAY
63991: PUSH
63992: LD_INT 1
63994: ARRAY
63995: PPUSH
63996: LD_VAR 0 6
64000: PUSH
64001: LD_VAR 0 4
64005: ARRAY
64006: PUSH
64007: LD_INT 2
64009: ARRAY
64010: PPUSH
64011: CALL_OW 428
64015: PUSH
64016: LD_INT 0
64018: NONEQUAL
64019: OR
64020: IFFALSE 64042
// tmp := Delete ( tmp , i ) ;
64022: LD_ADDR_VAR 0 6
64026: PUSH
64027: LD_VAR 0 6
64031: PPUSH
64032: LD_VAR 0 4
64036: PPUSH
64037: CALL_OW 3
64041: ST_TO_ADDR
64042: GO 63942
64044: POP
64045: POP
// j := GetClosestHex ( unit , tmp ) ;
64046: LD_ADDR_VAR 0 5
64050: PUSH
64051: LD_VAR 0 1
64055: PPUSH
64056: LD_VAR 0 6
64060: PPUSH
64061: CALL 63346 0 2
64065: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64066: LD_VAR 0 1
64070: PPUSH
64071: LD_VAR 0 5
64075: PUSH
64076: LD_INT 1
64078: ARRAY
64079: PPUSH
64080: LD_VAR 0 5
64084: PUSH
64085: LD_INT 2
64087: ARRAY
64088: PPUSH
64089: CALL_OW 111
// end ;
64093: LD_VAR 0 3
64097: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64098: LD_INT 0
64100: PPUSH
64101: PPUSH
64102: PPUSH
// uc_side = 0 ;
64103: LD_ADDR_OWVAR 20
64107: PUSH
64108: LD_INT 0
64110: ST_TO_ADDR
// uc_nation = 0 ;
64111: LD_ADDR_OWVAR 21
64115: PUSH
64116: LD_INT 0
64118: ST_TO_ADDR
// InitHc ;
64119: CALL_OW 19
// InitVc ;
64123: CALL_OW 20
// if mastodonts then
64127: LD_VAR 0 6
64131: IFFALSE 64198
// for i = 1 to mastodonts do
64133: LD_ADDR_VAR 0 11
64137: PUSH
64138: DOUBLE
64139: LD_INT 1
64141: DEC
64142: ST_TO_ADDR
64143: LD_VAR 0 6
64147: PUSH
64148: FOR_TO
64149: IFFALSE 64196
// begin vc_chassis := 31 ;
64151: LD_ADDR_OWVAR 37
64155: PUSH
64156: LD_INT 31
64158: ST_TO_ADDR
// vc_control := control_rider ;
64159: LD_ADDR_OWVAR 38
64163: PUSH
64164: LD_INT 4
64166: ST_TO_ADDR
// animal := CreateVehicle ;
64167: LD_ADDR_VAR 0 12
64171: PUSH
64172: CALL_OW 45
64176: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64177: LD_VAR 0 12
64181: PPUSH
64182: LD_VAR 0 8
64186: PPUSH
64187: LD_INT 0
64189: PPUSH
64190: CALL 66267 0 3
// end ;
64194: GO 64148
64196: POP
64197: POP
// if horses then
64198: LD_VAR 0 5
64202: IFFALSE 64269
// for i = 1 to horses do
64204: LD_ADDR_VAR 0 11
64208: PUSH
64209: DOUBLE
64210: LD_INT 1
64212: DEC
64213: ST_TO_ADDR
64214: LD_VAR 0 5
64218: PUSH
64219: FOR_TO
64220: IFFALSE 64267
// begin hc_class := 21 ;
64222: LD_ADDR_OWVAR 28
64226: PUSH
64227: LD_INT 21
64229: ST_TO_ADDR
// hc_gallery :=  ;
64230: LD_ADDR_OWVAR 33
64234: PUSH
64235: LD_STRING 
64237: ST_TO_ADDR
// animal := CreateHuman ;
64238: LD_ADDR_VAR 0 12
64242: PUSH
64243: CALL_OW 44
64247: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64248: LD_VAR 0 12
64252: PPUSH
64253: LD_VAR 0 8
64257: PPUSH
64258: LD_INT 0
64260: PPUSH
64261: CALL 66267 0 3
// end ;
64265: GO 64219
64267: POP
64268: POP
// if birds then
64269: LD_VAR 0 1
64273: IFFALSE 64340
// for i = 1 to birds do
64275: LD_ADDR_VAR 0 11
64279: PUSH
64280: DOUBLE
64281: LD_INT 1
64283: DEC
64284: ST_TO_ADDR
64285: LD_VAR 0 1
64289: PUSH
64290: FOR_TO
64291: IFFALSE 64338
// begin hc_class = 18 ;
64293: LD_ADDR_OWVAR 28
64297: PUSH
64298: LD_INT 18
64300: ST_TO_ADDR
// hc_gallery =  ;
64301: LD_ADDR_OWVAR 33
64305: PUSH
64306: LD_STRING 
64308: ST_TO_ADDR
// animal := CreateHuman ;
64309: LD_ADDR_VAR 0 12
64313: PUSH
64314: CALL_OW 44
64318: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64319: LD_VAR 0 12
64323: PPUSH
64324: LD_VAR 0 8
64328: PPUSH
64329: LD_INT 0
64331: PPUSH
64332: CALL 66267 0 3
// end ;
64336: GO 64290
64338: POP
64339: POP
// if tigers then
64340: LD_VAR 0 2
64344: IFFALSE 64428
// for i = 1 to tigers do
64346: LD_ADDR_VAR 0 11
64350: PUSH
64351: DOUBLE
64352: LD_INT 1
64354: DEC
64355: ST_TO_ADDR
64356: LD_VAR 0 2
64360: PUSH
64361: FOR_TO
64362: IFFALSE 64426
// begin hc_class = class_tiger ;
64364: LD_ADDR_OWVAR 28
64368: PUSH
64369: LD_INT 14
64371: ST_TO_ADDR
// hc_gallery =  ;
64372: LD_ADDR_OWVAR 33
64376: PUSH
64377: LD_STRING 
64379: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
64380: LD_ADDR_OWVAR 35
64384: PUSH
64385: LD_INT 7
64387: NEG
64388: PPUSH
64389: LD_INT 7
64391: PPUSH
64392: CALL_OW 12
64396: ST_TO_ADDR
// animal := CreateHuman ;
64397: LD_ADDR_VAR 0 12
64401: PUSH
64402: CALL_OW 44
64406: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64407: LD_VAR 0 12
64411: PPUSH
64412: LD_VAR 0 8
64416: PPUSH
64417: LD_INT 0
64419: PPUSH
64420: CALL 66267 0 3
// end ;
64424: GO 64361
64426: POP
64427: POP
// if apemans then
64428: LD_VAR 0 3
64432: IFFALSE 64555
// for i = 1 to apemans do
64434: LD_ADDR_VAR 0 11
64438: PUSH
64439: DOUBLE
64440: LD_INT 1
64442: DEC
64443: ST_TO_ADDR
64444: LD_VAR 0 3
64448: PUSH
64449: FOR_TO
64450: IFFALSE 64553
// begin hc_class = class_apeman ;
64452: LD_ADDR_OWVAR 28
64456: PUSH
64457: LD_INT 12
64459: ST_TO_ADDR
// hc_gallery =  ;
64460: LD_ADDR_OWVAR 33
64464: PUSH
64465: LD_STRING 
64467: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
64468: LD_ADDR_OWVAR 35
64472: PUSH
64473: LD_INT 5
64475: NEG
64476: PPUSH
64477: LD_INT 5
64479: PPUSH
64480: CALL_OW 12
64484: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64485: LD_ADDR_OWVAR 31
64489: PUSH
64490: LD_INT 1
64492: PPUSH
64493: LD_INT 3
64495: PPUSH
64496: CALL_OW 12
64500: PUSH
64501: LD_INT 1
64503: PPUSH
64504: LD_INT 3
64506: PPUSH
64507: CALL_OW 12
64511: PUSH
64512: LD_INT 0
64514: PUSH
64515: LD_INT 0
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: LIST
64522: LIST
64523: ST_TO_ADDR
// animal := CreateHuman ;
64524: LD_ADDR_VAR 0 12
64528: PUSH
64529: CALL_OW 44
64533: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64534: LD_VAR 0 12
64538: PPUSH
64539: LD_VAR 0 8
64543: PPUSH
64544: LD_INT 0
64546: PPUSH
64547: CALL 66267 0 3
// end ;
64551: GO 64449
64553: POP
64554: POP
// if enchidnas then
64555: LD_VAR 0 4
64559: IFFALSE 64626
// for i = 1 to enchidnas do
64561: LD_ADDR_VAR 0 11
64565: PUSH
64566: DOUBLE
64567: LD_INT 1
64569: DEC
64570: ST_TO_ADDR
64571: LD_VAR 0 4
64575: PUSH
64576: FOR_TO
64577: IFFALSE 64624
// begin hc_class = 13 ;
64579: LD_ADDR_OWVAR 28
64583: PUSH
64584: LD_INT 13
64586: ST_TO_ADDR
// hc_gallery =  ;
64587: LD_ADDR_OWVAR 33
64591: PUSH
64592: LD_STRING 
64594: ST_TO_ADDR
// animal := CreateHuman ;
64595: LD_ADDR_VAR 0 12
64599: PUSH
64600: CALL_OW 44
64604: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64605: LD_VAR 0 12
64609: PPUSH
64610: LD_VAR 0 8
64614: PPUSH
64615: LD_INT 0
64617: PPUSH
64618: CALL 66267 0 3
// end ;
64622: GO 64576
64624: POP
64625: POP
// if fishes then
64626: LD_VAR 0 7
64630: IFFALSE 64697
// for i = 1 to fishes do
64632: LD_ADDR_VAR 0 11
64636: PUSH
64637: DOUBLE
64638: LD_INT 1
64640: DEC
64641: ST_TO_ADDR
64642: LD_VAR 0 7
64646: PUSH
64647: FOR_TO
64648: IFFALSE 64695
// begin hc_class = 20 ;
64650: LD_ADDR_OWVAR 28
64654: PUSH
64655: LD_INT 20
64657: ST_TO_ADDR
// hc_gallery =  ;
64658: LD_ADDR_OWVAR 33
64662: PUSH
64663: LD_STRING 
64665: ST_TO_ADDR
// animal := CreateHuman ;
64666: LD_ADDR_VAR 0 12
64670: PUSH
64671: CALL_OW 44
64675: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64676: LD_VAR 0 12
64680: PPUSH
64681: LD_VAR 0 9
64685: PPUSH
64686: LD_INT 0
64688: PPUSH
64689: CALL 66267 0 3
// end ;
64693: GO 64647
64695: POP
64696: POP
// end ;
64697: LD_VAR 0 10
64701: RET
// export function WantHeal ( sci , unit ) ; begin
64702: LD_INT 0
64704: PPUSH
// if GetTaskList ( sci ) > 0 then
64705: LD_VAR 0 1
64709: PPUSH
64710: CALL_OW 437
64714: PUSH
64715: LD_INT 0
64717: GREATER
64718: IFFALSE 64788
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64720: LD_VAR 0 1
64724: PPUSH
64725: CALL_OW 437
64729: PUSH
64730: LD_INT 1
64732: ARRAY
64733: PUSH
64734: LD_INT 1
64736: ARRAY
64737: PUSH
64738: LD_STRING l
64740: EQUAL
64741: PUSH
64742: LD_VAR 0 1
64746: PPUSH
64747: CALL_OW 437
64751: PUSH
64752: LD_INT 1
64754: ARRAY
64755: PUSH
64756: LD_INT 4
64758: ARRAY
64759: PUSH
64760: LD_VAR 0 2
64764: EQUAL
64765: AND
64766: IFFALSE 64778
// result := true else
64768: LD_ADDR_VAR 0 3
64772: PUSH
64773: LD_INT 1
64775: ST_TO_ADDR
64776: GO 64786
// result := false ;
64778: LD_ADDR_VAR 0 3
64782: PUSH
64783: LD_INT 0
64785: ST_TO_ADDR
// end else
64786: GO 64796
// result := false ;
64788: LD_ADDR_VAR 0 3
64792: PUSH
64793: LD_INT 0
64795: ST_TO_ADDR
// end ;
64796: LD_VAR 0 3
64800: RET
// export function HealTarget ( sci ) ; begin
64801: LD_INT 0
64803: PPUSH
// if not sci then
64804: LD_VAR 0 1
64808: NOT
64809: IFFALSE 64813
// exit ;
64811: GO 64878
// result := 0 ;
64813: LD_ADDR_VAR 0 2
64817: PUSH
64818: LD_INT 0
64820: ST_TO_ADDR
// if GetTaskList ( sci ) then
64821: LD_VAR 0 1
64825: PPUSH
64826: CALL_OW 437
64830: IFFALSE 64878
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64832: LD_VAR 0 1
64836: PPUSH
64837: CALL_OW 437
64841: PUSH
64842: LD_INT 1
64844: ARRAY
64845: PUSH
64846: LD_INT 1
64848: ARRAY
64849: PUSH
64850: LD_STRING l
64852: EQUAL
64853: IFFALSE 64878
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64855: LD_ADDR_VAR 0 2
64859: PUSH
64860: LD_VAR 0 1
64864: PPUSH
64865: CALL_OW 437
64869: PUSH
64870: LD_INT 1
64872: ARRAY
64873: PUSH
64874: LD_INT 4
64876: ARRAY
64877: ST_TO_ADDR
// end ;
64878: LD_VAR 0 2
64882: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64883: LD_INT 0
64885: PPUSH
64886: PPUSH
64887: PPUSH
64888: PPUSH
// if not base_units then
64889: LD_VAR 0 1
64893: NOT
64894: IFFALSE 64898
// exit ;
64896: GO 64985
// result := false ;
64898: LD_ADDR_VAR 0 2
64902: PUSH
64903: LD_INT 0
64905: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64906: LD_ADDR_VAR 0 5
64910: PUSH
64911: LD_VAR 0 1
64915: PPUSH
64916: LD_INT 21
64918: PUSH
64919: LD_INT 3
64921: PUSH
64922: EMPTY
64923: LIST
64924: LIST
64925: PPUSH
64926: CALL_OW 72
64930: ST_TO_ADDR
// if not tmp then
64931: LD_VAR 0 5
64935: NOT
64936: IFFALSE 64940
// exit ;
64938: GO 64985
// for i in tmp do
64940: LD_ADDR_VAR 0 3
64944: PUSH
64945: LD_VAR 0 5
64949: PUSH
64950: FOR_IN
64951: IFFALSE 64983
// begin result := EnemyInRange ( i , 22 ) ;
64953: LD_ADDR_VAR 0 2
64957: PUSH
64958: LD_VAR 0 3
64962: PPUSH
64963: LD_INT 22
64965: PPUSH
64966: CALL 63221 0 2
64970: ST_TO_ADDR
// if result then
64971: LD_VAR 0 2
64975: IFFALSE 64981
// exit ;
64977: POP
64978: POP
64979: GO 64985
// end ;
64981: GO 64950
64983: POP
64984: POP
// end ;
64985: LD_VAR 0 2
64989: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
64990: LD_INT 0
64992: PPUSH
64993: PPUSH
// if not units then
64994: LD_VAR 0 1
64998: NOT
64999: IFFALSE 65003
// exit ;
65001: GO 65073
// result := [ ] ;
65003: LD_ADDR_VAR 0 3
65007: PUSH
65008: EMPTY
65009: ST_TO_ADDR
// for i in units do
65010: LD_ADDR_VAR 0 4
65014: PUSH
65015: LD_VAR 0 1
65019: PUSH
65020: FOR_IN
65021: IFFALSE 65071
// if GetTag ( i ) = tag then
65023: LD_VAR 0 4
65027: PPUSH
65028: CALL_OW 110
65032: PUSH
65033: LD_VAR 0 2
65037: EQUAL
65038: IFFALSE 65069
// result := Insert ( result , result + 1 , i ) ;
65040: LD_ADDR_VAR 0 3
65044: PUSH
65045: LD_VAR 0 3
65049: PPUSH
65050: LD_VAR 0 3
65054: PUSH
65055: LD_INT 1
65057: PLUS
65058: PPUSH
65059: LD_VAR 0 4
65063: PPUSH
65064: CALL_OW 2
65068: ST_TO_ADDR
65069: GO 65020
65071: POP
65072: POP
// end ;
65073: LD_VAR 0 3
65077: RET
// export function IsDriver ( un ) ; begin
65078: LD_INT 0
65080: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65081: LD_ADDR_VAR 0 2
65085: PUSH
65086: LD_VAR 0 1
65090: PUSH
65091: LD_INT 55
65093: PUSH
65094: EMPTY
65095: LIST
65096: PPUSH
65097: CALL_OW 69
65101: IN
65102: ST_TO_ADDR
// end ;
65103: LD_VAR 0 2
65107: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65108: LD_INT 0
65110: PPUSH
65111: PPUSH
// list := [ ] ;
65112: LD_ADDR_VAR 0 5
65116: PUSH
65117: EMPTY
65118: ST_TO_ADDR
// case d of 0 :
65119: LD_VAR 0 3
65123: PUSH
65124: LD_INT 0
65126: DOUBLE
65127: EQUAL
65128: IFTRUE 65132
65130: GO 65265
65132: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65133: LD_ADDR_VAR 0 5
65137: PUSH
65138: LD_VAR 0 1
65142: PUSH
65143: LD_INT 4
65145: MINUS
65146: PUSH
65147: LD_VAR 0 2
65151: PUSH
65152: LD_INT 4
65154: MINUS
65155: PUSH
65156: LD_INT 2
65158: PUSH
65159: EMPTY
65160: LIST
65161: LIST
65162: LIST
65163: PUSH
65164: LD_VAR 0 1
65168: PUSH
65169: LD_INT 3
65171: MINUS
65172: PUSH
65173: LD_VAR 0 2
65177: PUSH
65178: LD_INT 1
65180: PUSH
65181: EMPTY
65182: LIST
65183: LIST
65184: LIST
65185: PUSH
65186: LD_VAR 0 1
65190: PUSH
65191: LD_INT 4
65193: PLUS
65194: PUSH
65195: LD_VAR 0 2
65199: PUSH
65200: LD_INT 4
65202: PUSH
65203: EMPTY
65204: LIST
65205: LIST
65206: LIST
65207: PUSH
65208: LD_VAR 0 1
65212: PUSH
65213: LD_INT 3
65215: PLUS
65216: PUSH
65217: LD_VAR 0 2
65221: PUSH
65222: LD_INT 3
65224: PLUS
65225: PUSH
65226: LD_INT 5
65228: PUSH
65229: EMPTY
65230: LIST
65231: LIST
65232: LIST
65233: PUSH
65234: LD_VAR 0 1
65238: PUSH
65239: LD_VAR 0 2
65243: PUSH
65244: LD_INT 4
65246: PLUS
65247: PUSH
65248: LD_INT 0
65250: PUSH
65251: EMPTY
65252: LIST
65253: LIST
65254: LIST
65255: PUSH
65256: EMPTY
65257: LIST
65258: LIST
65259: LIST
65260: LIST
65261: LIST
65262: ST_TO_ADDR
// end ; 1 :
65263: GO 65963
65265: LD_INT 1
65267: DOUBLE
65268: EQUAL
65269: IFTRUE 65273
65271: GO 65406
65273: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
65274: LD_ADDR_VAR 0 5
65278: PUSH
65279: LD_VAR 0 1
65283: PUSH
65284: LD_VAR 0 2
65288: PUSH
65289: LD_INT 4
65291: MINUS
65292: PUSH
65293: LD_INT 3
65295: PUSH
65296: EMPTY
65297: LIST
65298: LIST
65299: LIST
65300: PUSH
65301: LD_VAR 0 1
65305: PUSH
65306: LD_INT 3
65308: MINUS
65309: PUSH
65310: LD_VAR 0 2
65314: PUSH
65315: LD_INT 3
65317: MINUS
65318: PUSH
65319: LD_INT 2
65321: PUSH
65322: EMPTY
65323: LIST
65324: LIST
65325: LIST
65326: PUSH
65327: LD_VAR 0 1
65331: PUSH
65332: LD_INT 4
65334: MINUS
65335: PUSH
65336: LD_VAR 0 2
65340: PUSH
65341: LD_INT 1
65343: PUSH
65344: EMPTY
65345: LIST
65346: LIST
65347: LIST
65348: PUSH
65349: LD_VAR 0 1
65353: PUSH
65354: LD_VAR 0 2
65358: PUSH
65359: LD_INT 3
65361: PLUS
65362: PUSH
65363: LD_INT 0
65365: PUSH
65366: EMPTY
65367: LIST
65368: LIST
65369: LIST
65370: PUSH
65371: LD_VAR 0 1
65375: PUSH
65376: LD_INT 4
65378: PLUS
65379: PUSH
65380: LD_VAR 0 2
65384: PUSH
65385: LD_INT 4
65387: PLUS
65388: PUSH
65389: LD_INT 5
65391: PUSH
65392: EMPTY
65393: LIST
65394: LIST
65395: LIST
65396: PUSH
65397: EMPTY
65398: LIST
65399: LIST
65400: LIST
65401: LIST
65402: LIST
65403: ST_TO_ADDR
// end ; 2 :
65404: GO 65963
65406: LD_INT 2
65408: DOUBLE
65409: EQUAL
65410: IFTRUE 65414
65412: GO 65543
65414: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
65415: LD_ADDR_VAR 0 5
65419: PUSH
65420: LD_VAR 0 1
65424: PUSH
65425: LD_VAR 0 2
65429: PUSH
65430: LD_INT 3
65432: MINUS
65433: PUSH
65434: LD_INT 3
65436: PUSH
65437: EMPTY
65438: LIST
65439: LIST
65440: LIST
65441: PUSH
65442: LD_VAR 0 1
65446: PUSH
65447: LD_INT 4
65449: PLUS
65450: PUSH
65451: LD_VAR 0 2
65455: PUSH
65456: LD_INT 4
65458: PUSH
65459: EMPTY
65460: LIST
65461: LIST
65462: LIST
65463: PUSH
65464: LD_VAR 0 1
65468: PUSH
65469: LD_VAR 0 2
65473: PUSH
65474: LD_INT 4
65476: PLUS
65477: PUSH
65478: LD_INT 0
65480: PUSH
65481: EMPTY
65482: LIST
65483: LIST
65484: LIST
65485: PUSH
65486: LD_VAR 0 1
65490: PUSH
65491: LD_INT 3
65493: MINUS
65494: PUSH
65495: LD_VAR 0 2
65499: PUSH
65500: LD_INT 1
65502: PUSH
65503: EMPTY
65504: LIST
65505: LIST
65506: LIST
65507: PUSH
65508: LD_VAR 0 1
65512: PUSH
65513: LD_INT 4
65515: MINUS
65516: PUSH
65517: LD_VAR 0 2
65521: PUSH
65522: LD_INT 4
65524: MINUS
65525: PUSH
65526: LD_INT 2
65528: PUSH
65529: EMPTY
65530: LIST
65531: LIST
65532: LIST
65533: PUSH
65534: EMPTY
65535: LIST
65536: LIST
65537: LIST
65538: LIST
65539: LIST
65540: ST_TO_ADDR
// end ; 3 :
65541: GO 65963
65543: LD_INT 3
65545: DOUBLE
65546: EQUAL
65547: IFTRUE 65551
65549: GO 65684
65551: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65552: LD_ADDR_VAR 0 5
65556: PUSH
65557: LD_VAR 0 1
65561: PUSH
65562: LD_INT 3
65564: PLUS
65565: PUSH
65566: LD_VAR 0 2
65570: PUSH
65571: LD_INT 4
65573: PUSH
65574: EMPTY
65575: LIST
65576: LIST
65577: LIST
65578: PUSH
65579: LD_VAR 0 1
65583: PUSH
65584: LD_INT 4
65586: PLUS
65587: PUSH
65588: LD_VAR 0 2
65592: PUSH
65593: LD_INT 4
65595: PLUS
65596: PUSH
65597: LD_INT 5
65599: PUSH
65600: EMPTY
65601: LIST
65602: LIST
65603: LIST
65604: PUSH
65605: LD_VAR 0 1
65609: PUSH
65610: LD_INT 4
65612: MINUS
65613: PUSH
65614: LD_VAR 0 2
65618: PUSH
65619: LD_INT 1
65621: PUSH
65622: EMPTY
65623: LIST
65624: LIST
65625: LIST
65626: PUSH
65627: LD_VAR 0 1
65631: PUSH
65632: LD_VAR 0 2
65636: PUSH
65637: LD_INT 4
65639: MINUS
65640: PUSH
65641: LD_INT 3
65643: PUSH
65644: EMPTY
65645: LIST
65646: LIST
65647: LIST
65648: PUSH
65649: LD_VAR 0 1
65653: PUSH
65654: LD_INT 3
65656: MINUS
65657: PUSH
65658: LD_VAR 0 2
65662: PUSH
65663: LD_INT 3
65665: MINUS
65666: PUSH
65667: LD_INT 2
65669: PUSH
65670: EMPTY
65671: LIST
65672: LIST
65673: LIST
65674: PUSH
65675: EMPTY
65676: LIST
65677: LIST
65678: LIST
65679: LIST
65680: LIST
65681: ST_TO_ADDR
// end ; 4 :
65682: GO 65963
65684: LD_INT 4
65686: DOUBLE
65687: EQUAL
65688: IFTRUE 65692
65690: GO 65825
65692: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65693: LD_ADDR_VAR 0 5
65697: PUSH
65698: LD_VAR 0 1
65702: PUSH
65703: LD_VAR 0 2
65707: PUSH
65708: LD_INT 4
65710: PLUS
65711: PUSH
65712: LD_INT 0
65714: PUSH
65715: EMPTY
65716: LIST
65717: LIST
65718: LIST
65719: PUSH
65720: LD_VAR 0 1
65724: PUSH
65725: LD_INT 3
65727: PLUS
65728: PUSH
65729: LD_VAR 0 2
65733: PUSH
65734: LD_INT 3
65736: PLUS
65737: PUSH
65738: LD_INT 5
65740: PUSH
65741: EMPTY
65742: LIST
65743: LIST
65744: LIST
65745: PUSH
65746: LD_VAR 0 1
65750: PUSH
65751: LD_INT 4
65753: PLUS
65754: PUSH
65755: LD_VAR 0 2
65759: PUSH
65760: LD_INT 4
65762: PUSH
65763: EMPTY
65764: LIST
65765: LIST
65766: LIST
65767: PUSH
65768: LD_VAR 0 1
65772: PUSH
65773: LD_VAR 0 2
65777: PUSH
65778: LD_INT 3
65780: MINUS
65781: PUSH
65782: LD_INT 3
65784: PUSH
65785: EMPTY
65786: LIST
65787: LIST
65788: LIST
65789: PUSH
65790: LD_VAR 0 1
65794: PUSH
65795: LD_INT 4
65797: MINUS
65798: PUSH
65799: LD_VAR 0 2
65803: PUSH
65804: LD_INT 4
65806: MINUS
65807: PUSH
65808: LD_INT 2
65810: PUSH
65811: EMPTY
65812: LIST
65813: LIST
65814: LIST
65815: PUSH
65816: EMPTY
65817: LIST
65818: LIST
65819: LIST
65820: LIST
65821: LIST
65822: ST_TO_ADDR
// end ; 5 :
65823: GO 65963
65825: LD_INT 5
65827: DOUBLE
65828: EQUAL
65829: IFTRUE 65833
65831: GO 65962
65833: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65834: LD_ADDR_VAR 0 5
65838: PUSH
65839: LD_VAR 0 1
65843: PUSH
65844: LD_INT 4
65846: MINUS
65847: PUSH
65848: LD_VAR 0 2
65852: PUSH
65853: LD_INT 1
65855: PUSH
65856: EMPTY
65857: LIST
65858: LIST
65859: LIST
65860: PUSH
65861: LD_VAR 0 1
65865: PUSH
65866: LD_VAR 0 2
65870: PUSH
65871: LD_INT 4
65873: MINUS
65874: PUSH
65875: LD_INT 3
65877: PUSH
65878: EMPTY
65879: LIST
65880: LIST
65881: LIST
65882: PUSH
65883: LD_VAR 0 1
65887: PUSH
65888: LD_INT 4
65890: PLUS
65891: PUSH
65892: LD_VAR 0 2
65896: PUSH
65897: LD_INT 4
65899: PLUS
65900: PUSH
65901: LD_INT 5
65903: PUSH
65904: EMPTY
65905: LIST
65906: LIST
65907: LIST
65908: PUSH
65909: LD_VAR 0 1
65913: PUSH
65914: LD_INT 3
65916: PLUS
65917: PUSH
65918: LD_VAR 0 2
65922: PUSH
65923: LD_INT 4
65925: PUSH
65926: EMPTY
65927: LIST
65928: LIST
65929: LIST
65930: PUSH
65931: LD_VAR 0 1
65935: PUSH
65936: LD_VAR 0 2
65940: PUSH
65941: LD_INT 3
65943: PLUS
65944: PUSH
65945: LD_INT 0
65947: PUSH
65948: EMPTY
65949: LIST
65950: LIST
65951: LIST
65952: PUSH
65953: EMPTY
65954: LIST
65955: LIST
65956: LIST
65957: LIST
65958: LIST
65959: ST_TO_ADDR
// end ; end ;
65960: GO 65963
65962: POP
// result := list ;
65963: LD_ADDR_VAR 0 4
65967: PUSH
65968: LD_VAR 0 5
65972: ST_TO_ADDR
// end ;
65973: LD_VAR 0 4
65977: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65978: LD_INT 0
65980: PPUSH
65981: PPUSH
65982: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65983: LD_VAR 0 1
65987: NOT
65988: PUSH
65989: LD_VAR 0 2
65993: PUSH
65994: LD_INT 1
65996: PUSH
65997: LD_INT 2
65999: PUSH
66000: LD_INT 3
66002: PUSH
66003: LD_INT 4
66005: PUSH
66006: EMPTY
66007: LIST
66008: LIST
66009: LIST
66010: LIST
66011: IN
66012: NOT
66013: OR
66014: IFFALSE 66018
// exit ;
66016: GO 66110
// tmp := [ ] ;
66018: LD_ADDR_VAR 0 5
66022: PUSH
66023: EMPTY
66024: ST_TO_ADDR
// for i in units do
66025: LD_ADDR_VAR 0 4
66029: PUSH
66030: LD_VAR 0 1
66034: PUSH
66035: FOR_IN
66036: IFFALSE 66079
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
66038: LD_ADDR_VAR 0 5
66042: PUSH
66043: LD_VAR 0 5
66047: PPUSH
66048: LD_VAR 0 5
66052: PUSH
66053: LD_INT 1
66055: PLUS
66056: PPUSH
66057: LD_VAR 0 4
66061: PPUSH
66062: LD_VAR 0 2
66066: PPUSH
66067: CALL_OW 259
66071: PPUSH
66072: CALL_OW 2
66076: ST_TO_ADDR
66077: GO 66035
66079: POP
66080: POP
// if not tmp then
66081: LD_VAR 0 5
66085: NOT
66086: IFFALSE 66090
// exit ;
66088: GO 66110
// result := SortListByListDesc ( units , tmp ) ;
66090: LD_ADDR_VAR 0 3
66094: PUSH
66095: LD_VAR 0 1
66099: PPUSH
66100: LD_VAR 0 5
66104: PPUSH
66105: CALL_OW 77
66109: ST_TO_ADDR
// end ;
66110: LD_VAR 0 3
66114: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66115: LD_INT 0
66117: PPUSH
66118: PPUSH
66119: PPUSH
// x := GetX ( building ) ;
66120: LD_ADDR_VAR 0 4
66124: PUSH
66125: LD_VAR 0 2
66129: PPUSH
66130: CALL_OW 250
66134: ST_TO_ADDR
// y := GetY ( building ) ;
66135: LD_ADDR_VAR 0 5
66139: PUSH
66140: LD_VAR 0 2
66144: PPUSH
66145: CALL_OW 251
66149: ST_TO_ADDR
// if GetTaskList ( unit ) then
66150: LD_VAR 0 1
66154: PPUSH
66155: CALL_OW 437
66159: IFFALSE 66254
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66161: LD_STRING e
66163: PUSH
66164: LD_VAR 0 1
66168: PPUSH
66169: CALL_OW 437
66173: PUSH
66174: LD_INT 1
66176: ARRAY
66177: PUSH
66178: LD_INT 1
66180: ARRAY
66181: EQUAL
66182: PUSH
66183: LD_VAR 0 4
66187: PUSH
66188: LD_VAR 0 1
66192: PPUSH
66193: CALL_OW 437
66197: PUSH
66198: LD_INT 1
66200: ARRAY
66201: PUSH
66202: LD_INT 2
66204: ARRAY
66205: EQUAL
66206: AND
66207: PUSH
66208: LD_VAR 0 5
66212: PUSH
66213: LD_VAR 0 1
66217: PPUSH
66218: CALL_OW 437
66222: PUSH
66223: LD_INT 1
66225: ARRAY
66226: PUSH
66227: LD_INT 3
66229: ARRAY
66230: EQUAL
66231: AND
66232: IFFALSE 66244
// result := true else
66234: LD_ADDR_VAR 0 3
66238: PUSH
66239: LD_INT 1
66241: ST_TO_ADDR
66242: GO 66252
// result := false ;
66244: LD_ADDR_VAR 0 3
66248: PUSH
66249: LD_INT 0
66251: ST_TO_ADDR
// end else
66252: GO 66262
// result := false ;
66254: LD_ADDR_VAR 0 3
66258: PUSH
66259: LD_INT 0
66261: ST_TO_ADDR
// end ;
66262: LD_VAR 0 3
66266: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
66267: LD_INT 0
66269: PPUSH
66270: PPUSH
66271: PPUSH
66272: PPUSH
// if not unit or not area then
66273: LD_VAR 0 1
66277: NOT
66278: PUSH
66279: LD_VAR 0 2
66283: NOT
66284: OR
66285: IFFALSE 66289
// exit ;
66287: GO 66453
// tmp := AreaToList ( area , i ) ;
66289: LD_ADDR_VAR 0 6
66293: PUSH
66294: LD_VAR 0 2
66298: PPUSH
66299: LD_VAR 0 5
66303: PPUSH
66304: CALL_OW 517
66308: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
66309: LD_ADDR_VAR 0 5
66313: PUSH
66314: DOUBLE
66315: LD_INT 1
66317: DEC
66318: ST_TO_ADDR
66319: LD_VAR 0 6
66323: PUSH
66324: LD_INT 1
66326: ARRAY
66327: PUSH
66328: FOR_TO
66329: IFFALSE 66451
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
66331: LD_ADDR_VAR 0 7
66335: PUSH
66336: LD_VAR 0 6
66340: PUSH
66341: LD_INT 1
66343: ARRAY
66344: PUSH
66345: LD_VAR 0 5
66349: ARRAY
66350: PUSH
66351: LD_VAR 0 6
66355: PUSH
66356: LD_INT 2
66358: ARRAY
66359: PUSH
66360: LD_VAR 0 5
66364: ARRAY
66365: PUSH
66366: EMPTY
66367: LIST
66368: LIST
66369: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
66370: LD_VAR 0 7
66374: PUSH
66375: LD_INT 1
66377: ARRAY
66378: PPUSH
66379: LD_VAR 0 7
66383: PUSH
66384: LD_INT 2
66386: ARRAY
66387: PPUSH
66388: CALL_OW 428
66392: PUSH
66393: LD_INT 0
66395: EQUAL
66396: IFFALSE 66449
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66398: LD_VAR 0 1
66402: PPUSH
66403: LD_VAR 0 7
66407: PUSH
66408: LD_INT 1
66410: ARRAY
66411: PPUSH
66412: LD_VAR 0 7
66416: PUSH
66417: LD_INT 2
66419: ARRAY
66420: PPUSH
66421: LD_VAR 0 3
66425: PPUSH
66426: CALL_OW 48
// result := IsPlaced ( unit ) ;
66430: LD_ADDR_VAR 0 4
66434: PUSH
66435: LD_VAR 0 1
66439: PPUSH
66440: CALL_OW 305
66444: ST_TO_ADDR
// exit ;
66445: POP
66446: POP
66447: GO 66453
// end ; end ;
66449: GO 66328
66451: POP
66452: POP
// end ;
66453: LD_VAR 0 4
66457: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66458: LD_INT 0
66460: PPUSH
66461: PPUSH
66462: PPUSH
// if not side or side > 8 then
66463: LD_VAR 0 1
66467: NOT
66468: PUSH
66469: LD_VAR 0 1
66473: PUSH
66474: LD_INT 8
66476: GREATER
66477: OR
66478: IFFALSE 66482
// exit ;
66480: GO 66669
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66482: LD_ADDR_VAR 0 4
66486: PUSH
66487: LD_INT 22
66489: PUSH
66490: LD_VAR 0 1
66494: PUSH
66495: EMPTY
66496: LIST
66497: LIST
66498: PUSH
66499: LD_INT 21
66501: PUSH
66502: LD_INT 3
66504: PUSH
66505: EMPTY
66506: LIST
66507: LIST
66508: PUSH
66509: EMPTY
66510: LIST
66511: LIST
66512: PPUSH
66513: CALL_OW 69
66517: ST_TO_ADDR
// if not tmp then
66518: LD_VAR 0 4
66522: NOT
66523: IFFALSE 66527
// exit ;
66525: GO 66669
// enable_addtolog := true ;
66527: LD_ADDR_OWVAR 81
66531: PUSH
66532: LD_INT 1
66534: ST_TO_ADDR
// AddToLog ( [ ) ;
66535: LD_STRING [
66537: PPUSH
66538: CALL_OW 561
// for i in tmp do
66542: LD_ADDR_VAR 0 3
66546: PUSH
66547: LD_VAR 0 4
66551: PUSH
66552: FOR_IN
66553: IFFALSE 66660
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66555: LD_STRING [
66557: PUSH
66558: LD_VAR 0 3
66562: PPUSH
66563: CALL_OW 266
66567: STR
66568: PUSH
66569: LD_STRING , 
66571: STR
66572: PUSH
66573: LD_VAR 0 3
66577: PPUSH
66578: CALL_OW 250
66582: STR
66583: PUSH
66584: LD_STRING , 
66586: STR
66587: PUSH
66588: LD_VAR 0 3
66592: PPUSH
66593: CALL_OW 251
66597: STR
66598: PUSH
66599: LD_STRING , 
66601: STR
66602: PUSH
66603: LD_VAR 0 3
66607: PPUSH
66608: CALL_OW 254
66612: STR
66613: PUSH
66614: LD_STRING , 
66616: STR
66617: PUSH
66618: LD_VAR 0 3
66622: PPUSH
66623: LD_INT 1
66625: PPUSH
66626: CALL_OW 268
66630: STR
66631: PUSH
66632: LD_STRING , 
66634: STR
66635: PUSH
66636: LD_VAR 0 3
66640: PPUSH
66641: LD_INT 2
66643: PPUSH
66644: CALL_OW 268
66648: STR
66649: PUSH
66650: LD_STRING ],
66652: STR
66653: PPUSH
66654: CALL_OW 561
// end ;
66658: GO 66552
66660: POP
66661: POP
// AddToLog ( ]; ) ;
66662: LD_STRING ];
66664: PPUSH
66665: CALL_OW 561
// end ;
66669: LD_VAR 0 2
66673: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66674: LD_INT 0
66676: PPUSH
66677: PPUSH
66678: PPUSH
66679: PPUSH
66680: PPUSH
// if not area or not rate or not max then
66681: LD_VAR 0 1
66685: NOT
66686: PUSH
66687: LD_VAR 0 2
66691: NOT
66692: OR
66693: PUSH
66694: LD_VAR 0 4
66698: NOT
66699: OR
66700: IFFALSE 66704
// exit ;
66702: GO 66896
// while 1 do
66704: LD_INT 1
66706: IFFALSE 66896
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66708: LD_ADDR_VAR 0 9
66712: PUSH
66713: LD_VAR 0 1
66717: PPUSH
66718: LD_INT 1
66720: PPUSH
66721: CALL_OW 287
66725: PUSH
66726: LD_INT 10
66728: MUL
66729: ST_TO_ADDR
// r := rate / 10 ;
66730: LD_ADDR_VAR 0 7
66734: PUSH
66735: LD_VAR 0 2
66739: PUSH
66740: LD_INT 10
66742: DIVREAL
66743: ST_TO_ADDR
// time := 1 1$00 ;
66744: LD_ADDR_VAR 0 8
66748: PUSH
66749: LD_INT 2100
66751: ST_TO_ADDR
// if amount < min then
66752: LD_VAR 0 9
66756: PUSH
66757: LD_VAR 0 3
66761: LESS
66762: IFFALSE 66780
// r := r * 2 else
66764: LD_ADDR_VAR 0 7
66768: PUSH
66769: LD_VAR 0 7
66773: PUSH
66774: LD_INT 2
66776: MUL
66777: ST_TO_ADDR
66778: GO 66806
// if amount > max then
66780: LD_VAR 0 9
66784: PUSH
66785: LD_VAR 0 4
66789: GREATER
66790: IFFALSE 66806
// r := r / 2 ;
66792: LD_ADDR_VAR 0 7
66796: PUSH
66797: LD_VAR 0 7
66801: PUSH
66802: LD_INT 2
66804: DIVREAL
66805: ST_TO_ADDR
// time := time / r ;
66806: LD_ADDR_VAR 0 8
66810: PUSH
66811: LD_VAR 0 8
66815: PUSH
66816: LD_VAR 0 7
66820: DIVREAL
66821: ST_TO_ADDR
// if time < 0 then
66822: LD_VAR 0 8
66826: PUSH
66827: LD_INT 0
66829: LESS
66830: IFFALSE 66847
// time := time * - 1 ;
66832: LD_ADDR_VAR 0 8
66836: PUSH
66837: LD_VAR 0 8
66841: PUSH
66842: LD_INT 1
66844: NEG
66845: MUL
66846: ST_TO_ADDR
// wait ( time ) ;
66847: LD_VAR 0 8
66851: PPUSH
66852: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
66856: LD_INT 35
66858: PPUSH
66859: LD_INT 875
66861: PPUSH
66862: CALL_OW 12
66866: PPUSH
66867: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66871: LD_INT 1
66873: PPUSH
66874: LD_INT 5
66876: PPUSH
66877: CALL_OW 12
66881: PPUSH
66882: LD_VAR 0 1
66886: PPUSH
66887: LD_INT 1
66889: PPUSH
66890: CALL_OW 55
// end ;
66894: GO 66704
// end ;
66896: LD_VAR 0 5
66900: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66901: LD_INT 0
66903: PPUSH
66904: PPUSH
66905: PPUSH
66906: PPUSH
66907: PPUSH
66908: PPUSH
66909: PPUSH
66910: PPUSH
// if not turrets or not factories then
66911: LD_VAR 0 1
66915: NOT
66916: PUSH
66917: LD_VAR 0 2
66921: NOT
66922: OR
66923: IFFALSE 66927
// exit ;
66925: GO 67234
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66927: LD_ADDR_VAR 0 10
66931: PUSH
66932: LD_INT 5
66934: PUSH
66935: LD_INT 6
66937: PUSH
66938: EMPTY
66939: LIST
66940: LIST
66941: PUSH
66942: LD_INT 2
66944: PUSH
66945: LD_INT 4
66947: PUSH
66948: EMPTY
66949: LIST
66950: LIST
66951: PUSH
66952: LD_INT 3
66954: PUSH
66955: LD_INT 5
66957: PUSH
66958: EMPTY
66959: LIST
66960: LIST
66961: PUSH
66962: EMPTY
66963: LIST
66964: LIST
66965: LIST
66966: PUSH
66967: LD_INT 24
66969: PUSH
66970: LD_INT 25
66972: PUSH
66973: EMPTY
66974: LIST
66975: LIST
66976: PUSH
66977: LD_INT 23
66979: PUSH
66980: LD_INT 27
66982: PUSH
66983: EMPTY
66984: LIST
66985: LIST
66986: PUSH
66987: EMPTY
66988: LIST
66989: LIST
66990: PUSH
66991: LD_INT 42
66993: PUSH
66994: LD_INT 43
66996: PUSH
66997: EMPTY
66998: LIST
66999: LIST
67000: PUSH
67001: LD_INT 44
67003: PUSH
67004: LD_INT 46
67006: PUSH
67007: EMPTY
67008: LIST
67009: LIST
67010: PUSH
67011: LD_INT 45
67013: PUSH
67014: LD_INT 47
67016: PUSH
67017: EMPTY
67018: LIST
67019: LIST
67020: PUSH
67021: EMPTY
67022: LIST
67023: LIST
67024: LIST
67025: PUSH
67026: EMPTY
67027: LIST
67028: LIST
67029: LIST
67030: ST_TO_ADDR
// result := [ ] ;
67031: LD_ADDR_VAR 0 3
67035: PUSH
67036: EMPTY
67037: ST_TO_ADDR
// for i in turrets do
67038: LD_ADDR_VAR 0 4
67042: PUSH
67043: LD_VAR 0 1
67047: PUSH
67048: FOR_IN
67049: IFFALSE 67232
// begin nat := GetNation ( i ) ;
67051: LD_ADDR_VAR 0 7
67055: PUSH
67056: LD_VAR 0 4
67060: PPUSH
67061: CALL_OW 248
67065: ST_TO_ADDR
// weapon := 0 ;
67066: LD_ADDR_VAR 0 8
67070: PUSH
67071: LD_INT 0
67073: ST_TO_ADDR
// if not nat then
67074: LD_VAR 0 7
67078: NOT
67079: IFFALSE 67083
// continue ;
67081: GO 67048
// for j in list [ nat ] do
67083: LD_ADDR_VAR 0 5
67087: PUSH
67088: LD_VAR 0 10
67092: PUSH
67093: LD_VAR 0 7
67097: ARRAY
67098: PUSH
67099: FOR_IN
67100: IFFALSE 67141
// if GetBWeapon ( i ) = j [ 1 ] then
67102: LD_VAR 0 4
67106: PPUSH
67107: CALL_OW 269
67111: PUSH
67112: LD_VAR 0 5
67116: PUSH
67117: LD_INT 1
67119: ARRAY
67120: EQUAL
67121: IFFALSE 67139
// begin weapon := j [ 2 ] ;
67123: LD_ADDR_VAR 0 8
67127: PUSH
67128: LD_VAR 0 5
67132: PUSH
67133: LD_INT 2
67135: ARRAY
67136: ST_TO_ADDR
// break ;
67137: GO 67141
// end ;
67139: GO 67099
67141: POP
67142: POP
// if not weapon then
67143: LD_VAR 0 8
67147: NOT
67148: IFFALSE 67152
// continue ;
67150: GO 67048
// for k in factories do
67152: LD_ADDR_VAR 0 6
67156: PUSH
67157: LD_VAR 0 2
67161: PUSH
67162: FOR_IN
67163: IFFALSE 67228
// begin weapons := AvailableWeaponList ( k ) ;
67165: LD_ADDR_VAR 0 9
67169: PUSH
67170: LD_VAR 0 6
67174: PPUSH
67175: CALL_OW 478
67179: ST_TO_ADDR
// if not weapons then
67180: LD_VAR 0 9
67184: NOT
67185: IFFALSE 67189
// continue ;
67187: GO 67162
// if weapon in weapons then
67189: LD_VAR 0 8
67193: PUSH
67194: LD_VAR 0 9
67198: IN
67199: IFFALSE 67226
// begin result := [ i , weapon ] ;
67201: LD_ADDR_VAR 0 3
67205: PUSH
67206: LD_VAR 0 4
67210: PUSH
67211: LD_VAR 0 8
67215: PUSH
67216: EMPTY
67217: LIST
67218: LIST
67219: ST_TO_ADDR
// exit ;
67220: POP
67221: POP
67222: POP
67223: POP
67224: GO 67234
// end ; end ;
67226: GO 67162
67228: POP
67229: POP
// end ;
67230: GO 67048
67232: POP
67233: POP
// end ;
67234: LD_VAR 0 3
67238: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
67239: LD_INT 0
67241: PPUSH
// if not side or side > 8 then
67242: LD_VAR 0 3
67246: NOT
67247: PUSH
67248: LD_VAR 0 3
67252: PUSH
67253: LD_INT 8
67255: GREATER
67256: OR
67257: IFFALSE 67261
// exit ;
67259: GO 67320
// if not range then
67261: LD_VAR 0 4
67265: NOT
67266: IFFALSE 67277
// range := - 12 ;
67268: LD_ADDR_VAR 0 4
67272: PUSH
67273: LD_INT 12
67275: NEG
67276: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
67277: LD_VAR 0 1
67281: PPUSH
67282: LD_VAR 0 2
67286: PPUSH
67287: LD_VAR 0 3
67291: PPUSH
67292: LD_VAR 0 4
67296: PPUSH
67297: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
67301: LD_VAR 0 1
67305: PPUSH
67306: LD_VAR 0 2
67310: PPUSH
67311: LD_VAR 0 3
67315: PPUSH
67316: CALL_OW 331
// end ;
67320: LD_VAR 0 5
67324: RET
// export function Video ( mode ) ; begin
67325: LD_INT 0
67327: PPUSH
// ingame_video = mode ;
67328: LD_ADDR_OWVAR 52
67332: PUSH
67333: LD_VAR 0 1
67337: ST_TO_ADDR
// interface_hidden = mode ;
67338: LD_ADDR_OWVAR 54
67342: PUSH
67343: LD_VAR 0 1
67347: ST_TO_ADDR
// end ;
67348: LD_VAR 0 2
67352: RET
// export function Join ( array , element ) ; begin
67353: LD_INT 0
67355: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67356: LD_ADDR_VAR 0 3
67360: PUSH
67361: LD_VAR 0 1
67365: PPUSH
67366: LD_VAR 0 1
67370: PUSH
67371: LD_INT 1
67373: PLUS
67374: PPUSH
67375: LD_VAR 0 2
67379: PPUSH
67380: CALL_OW 1
67384: ST_TO_ADDR
// end ;
67385: LD_VAR 0 3
67389: RET
// export function JoinUnion ( array , element ) ; begin
67390: LD_INT 0
67392: PPUSH
// result := array union element ;
67393: LD_ADDR_VAR 0 3
67397: PUSH
67398: LD_VAR 0 1
67402: PUSH
67403: LD_VAR 0 2
67407: UNION
67408: ST_TO_ADDR
// end ;
67409: LD_VAR 0 3
67413: RET
// export function GetBehemoths ( side ) ; begin
67414: LD_INT 0
67416: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
67417: LD_ADDR_VAR 0 2
67421: PUSH
67422: LD_INT 22
67424: PUSH
67425: LD_VAR 0 1
67429: PUSH
67430: EMPTY
67431: LIST
67432: LIST
67433: PUSH
67434: LD_INT 31
67436: PUSH
67437: LD_INT 25
67439: PUSH
67440: EMPTY
67441: LIST
67442: LIST
67443: PUSH
67444: EMPTY
67445: LIST
67446: LIST
67447: PPUSH
67448: CALL_OW 69
67452: ST_TO_ADDR
// end ;
67453: LD_VAR 0 2
67457: RET
// export function Shuffle ( array ) ; var i , index ; begin
67458: LD_INT 0
67460: PPUSH
67461: PPUSH
67462: PPUSH
// result := [ ] ;
67463: LD_ADDR_VAR 0 2
67467: PUSH
67468: EMPTY
67469: ST_TO_ADDR
// if not array then
67470: LD_VAR 0 1
67474: NOT
67475: IFFALSE 67479
// exit ;
67477: GO 67578
// Randomize ;
67479: CALL_OW 10
// for i = array downto 1 do
67483: LD_ADDR_VAR 0 3
67487: PUSH
67488: DOUBLE
67489: LD_VAR 0 1
67493: INC
67494: ST_TO_ADDR
67495: LD_INT 1
67497: PUSH
67498: FOR_DOWNTO
67499: IFFALSE 67576
// begin index := rand ( 1 , array ) ;
67501: LD_ADDR_VAR 0 4
67505: PUSH
67506: LD_INT 1
67508: PPUSH
67509: LD_VAR 0 1
67513: PPUSH
67514: CALL_OW 12
67518: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67519: LD_ADDR_VAR 0 2
67523: PUSH
67524: LD_VAR 0 2
67528: PPUSH
67529: LD_VAR 0 2
67533: PUSH
67534: LD_INT 1
67536: PLUS
67537: PPUSH
67538: LD_VAR 0 1
67542: PUSH
67543: LD_VAR 0 4
67547: ARRAY
67548: PPUSH
67549: CALL_OW 2
67553: ST_TO_ADDR
// array := Delete ( array , index ) ;
67554: LD_ADDR_VAR 0 1
67558: PUSH
67559: LD_VAR 0 1
67563: PPUSH
67564: LD_VAR 0 4
67568: PPUSH
67569: CALL_OW 3
67573: ST_TO_ADDR
// end ;
67574: GO 67498
67576: POP
67577: POP
// end ;
67578: LD_VAR 0 2
67582: RET
// export function GetBaseMaterials ( base ) ; begin
67583: LD_INT 0
67585: PPUSH
// result := [ 0 , 0 , 0 ] ;
67586: LD_ADDR_VAR 0 2
67590: PUSH
67591: LD_INT 0
67593: PUSH
67594: LD_INT 0
67596: PUSH
67597: LD_INT 0
67599: PUSH
67600: EMPTY
67601: LIST
67602: LIST
67603: LIST
67604: ST_TO_ADDR
// if not base then
67605: LD_VAR 0 1
67609: NOT
67610: IFFALSE 67614
// exit ;
67612: GO 67663
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67614: LD_ADDR_VAR 0 2
67618: PUSH
67619: LD_VAR 0 1
67623: PPUSH
67624: LD_INT 1
67626: PPUSH
67627: CALL_OW 275
67631: PUSH
67632: LD_VAR 0 1
67636: PPUSH
67637: LD_INT 2
67639: PPUSH
67640: CALL_OW 275
67644: PUSH
67645: LD_VAR 0 1
67649: PPUSH
67650: LD_INT 3
67652: PPUSH
67653: CALL_OW 275
67657: PUSH
67658: EMPTY
67659: LIST
67660: LIST
67661: LIST
67662: ST_TO_ADDR
// end ;
67663: LD_VAR 0 2
67667: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67668: LD_INT 0
67670: PPUSH
67671: PPUSH
// result := array ;
67672: LD_ADDR_VAR 0 3
67676: PUSH
67677: LD_VAR 0 1
67681: ST_TO_ADDR
// if size > 0 then
67682: LD_VAR 0 2
67686: PUSH
67687: LD_INT 0
67689: GREATER
67690: IFFALSE 67736
// for i := array downto size do
67692: LD_ADDR_VAR 0 4
67696: PUSH
67697: DOUBLE
67698: LD_VAR 0 1
67702: INC
67703: ST_TO_ADDR
67704: LD_VAR 0 2
67708: PUSH
67709: FOR_DOWNTO
67710: IFFALSE 67734
// result := Delete ( result , result ) ;
67712: LD_ADDR_VAR 0 3
67716: PUSH
67717: LD_VAR 0 3
67721: PPUSH
67722: LD_VAR 0 3
67726: PPUSH
67727: CALL_OW 3
67731: ST_TO_ADDR
67732: GO 67709
67734: POP
67735: POP
// end ;
67736: LD_VAR 0 3
67740: RET
// export function ComExit ( unit ) ; var tmp ; begin
67741: LD_INT 0
67743: PPUSH
67744: PPUSH
// if not IsInUnit ( unit ) then
67745: LD_VAR 0 1
67749: PPUSH
67750: CALL_OW 310
67754: NOT
67755: IFFALSE 67759
// exit ;
67757: GO 67819
// tmp := IsInUnit ( unit ) ;
67759: LD_ADDR_VAR 0 3
67763: PUSH
67764: LD_VAR 0 1
67768: PPUSH
67769: CALL_OW 310
67773: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67774: LD_VAR 0 3
67778: PPUSH
67779: CALL_OW 247
67783: PUSH
67784: LD_INT 2
67786: EQUAL
67787: IFFALSE 67800
// ComExitVehicle ( unit ) else
67789: LD_VAR 0 1
67793: PPUSH
67794: CALL_OW 121
67798: GO 67809
// ComExitBuilding ( unit ) ;
67800: LD_VAR 0 1
67804: PPUSH
67805: CALL_OW 122
// result := tmp ;
67809: LD_ADDR_VAR 0 2
67813: PUSH
67814: LD_VAR 0 3
67818: ST_TO_ADDR
// end ;
67819: LD_VAR 0 2
67823: RET
// export function ResetHc ; begin
67824: LD_INT 0
67826: PPUSH
// InitHc ;
67827: CALL_OW 19
// hc_importance := 0 ;
67831: LD_ADDR_OWVAR 32
67835: PUSH
67836: LD_INT 0
67838: ST_TO_ADDR
// end ;
67839: LD_VAR 0 1
67843: RET
