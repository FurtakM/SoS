// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// PrepareTrigger ;
  15: CALL 40 0 0
// PrepareVulcanoBase ;
  19: CALL 1142 0 0
// PrepareRussian ;
  23: CALL 3824 0 0
// PrepareLegion ;
  27: CALL 8105 0 0
// Action ;
  31: CALL 11613 0 0
// InitArt ;
  35: CALL 241 0 0
// end ;
  39: END
// export base_captured , russian_prepared , ru_can_attack , ru_sib_bomb , chance_to_bomb , player_res_art , artifact_progress , player_artifact_ready , art_icon , time_res_art , player_commander , time_to_reuse , mine_vulc , medal_enabled , debug , dead_counter , kill_counter , veh_counter , tech_counter , sib_contamin_counter , event_legion_attack , event_russian_attack , event_alliance_attack ; function PrepareTrigger ; begin
  40: LD_INT 0
  42: PPUSH
// debug := false ;
  43: LD_ADDR_EXP 15
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// base_captured := false ;
  51: LD_ADDR_EXP 1
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// russian_prepared := false ;
  59: LD_ADDR_EXP 2
  63: PUSH
  64: LD_INT 0
  66: ST_TO_ADDR
// ru_can_attack := false ;
  67: LD_ADDR_EXP 3
  71: PUSH
  72: LD_INT 0
  74: ST_TO_ADDR
// ru_sib_bomb := false ;
  75: LD_ADDR_EXP 4
  79: PUSH
  80: LD_INT 0
  82: ST_TO_ADDR
// chance_to_bomb := [ 5 , 10 , 25 ] [ Difficulty ] ;
  83: LD_ADDR_EXP 5
  87: PUSH
  88: LD_INT 5
  90: PUSH
  91: LD_INT 10
  93: PUSH
  94: LD_INT 25
  96: PUSH
  97: EMPTY
  98: LIST
  99: LIST
 100: LIST
 101: PUSH
 102: LD_OWVAR 67
 106: ARRAY
 107: ST_TO_ADDR
// player_res_art := false ;
 108: LD_ADDR_EXP 6
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// player_artifact_ready := false ;
 116: LD_ADDR_EXP 8
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// art_icon := art_use_atom ;
 124: LD_ADDR_EXP 9
 128: PUSH
 129: LD_INT 7
 131: ST_TO_ADDR
// time_res_art := 600 ;
 132: LD_ADDR_EXP 10
 136: PUSH
 137: LD_INT 600
 139: ST_TO_ADDR
// time_to_reuse := 10 10$00 ;
 140: LD_ADDR_EXP 12
 144: PUSH
 145: LD_INT 21000
 147: ST_TO_ADDR
// mine_vulc := false ;
 148: LD_ADDR_EXP 13
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// medal_enabled := false ;
 156: LD_ADDR_EXP 14
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// dead_counter := 0 ;
 164: LD_ADDR_EXP 16
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// kill_counter := 0 ;
 172: LD_ADDR_EXP 17
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// veh_counter := 0 ;
 180: LD_ADDR_EXP 18
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// tech_counter := 0 ;
 188: LD_ADDR_EXP 19
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// sib_contamin_counter := 0 ;
 196: LD_ADDR_EXP 20
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// artifact_progress := 0 ;
 204: LD_ADDR_EXP 7
 208: PUSH
 209: LD_INT 0
 211: ST_TO_ADDR
// event_legion_attack := 1 ;
 212: LD_ADDR_EXP 21
 216: PUSH
 217: LD_INT 1
 219: ST_TO_ADDR
// event_russian_attack := 2 ;
 220: LD_ADDR_EXP 22
 224: PUSH
 225: LD_INT 2
 227: ST_TO_ADDR
// event_alliance_attack := 3 ;
 228: LD_ADDR_EXP 23
 232: PUSH
 233: LD_INT 3
 235: ST_TO_ADDR
// end ;
 236: LD_VAR 0 1
 240: RET
// function InitArt ; begin
 241: LD_INT 0
 243: PPUSH
// SetArtifactRes ( your_side , true ) ;
 244: LD_OWVAR 2
 248: PPUSH
 249: LD_INT 1
 251: PPUSH
 252: CALL_OW 467
// end ; end_of_file
 256: LD_VAR 0 1
 260: RET
// export us_commander , us_force , us_skill , us_guy ; export function PrepareAmerican ; var i , filter , un , team ; begin
 261: LD_INT 0
 263: PPUSH
 264: PPUSH
 265: PPUSH
 266: PPUSH
 267: PPUSH
// us_skill := [ 7 , 6 , 5 ] [ Difficulty ] ;
 268: LD_ADDR_EXP 26
 272: PUSH
 273: LD_INT 7
 275: PUSH
 276: LD_INT 6
 278: PUSH
 279: LD_INT 5
 281: PUSH
 282: EMPTY
 283: LIST
 284: LIST
 285: LIST
 286: PUSH
 287: LD_OWVAR 67
 291: ARRAY
 292: ST_TO_ADDR
// us_force := [ ] ;
 293: LD_ADDR_EXP 25
 297: PUSH
 298: EMPTY
 299: ST_TO_ADDR
// RemoveEnvironmentArea ( evn ) ;
 300: LD_INT 17
 302: PPUSH
 303: CALL_OW 355
// PrepareAllianceAI ( ) ;
 307: CALL 17044 0 0
// uc_side := 1 ;
 311: LD_ADDR_OWVAR 20
 315: PUSH
 316: LD_INT 1
 318: ST_TO_ADDR
// uc_nation := nation_american ;
 319: LD_ADDR_OWVAR 21
 323: PUSH
 324: LD_INT 1
 326: ST_TO_ADDR
// hc_gallery :=  ;
 327: LD_ADDR_OWVAR 33
 331: PUSH
 332: LD_STRING 
 334: ST_TO_ADDR
// hc_name :=  ;
 335: LD_ADDR_OWVAR 26
 339: PUSH
 340: LD_STRING 
 342: ST_TO_ADDR
// hc_importance := 0 ;
 343: LD_ADDR_OWVAR 32
 347: PUSH
 348: LD_INT 0
 350: ST_TO_ADDR
// for i = 1 to 11 do
 351: LD_ADDR_VAR 0 2
 355: PUSH
 356: DOUBLE
 357: LD_INT 1
 359: DEC
 360: ST_TO_ADDR
 361: LD_INT 11
 363: PUSH
 364: FOR_TO
 365: IFFALSE 418
// begin PrepareHuman ( false , Rand ( 1 , 4 ) , us_skill ) ;
 367: LD_INT 0
 369: PPUSH
 370: LD_INT 1
 372: PPUSH
 373: LD_INT 4
 375: PPUSH
 376: CALL_OW 12
 380: PPUSH
 381: LD_EXP 26
 385: PPUSH
 386: CALL_OW 380
// un := CreateHuman ;
 390: LD_ADDR_VAR 0 4
 394: PUSH
 395: CALL_OW 44
 399: ST_TO_ADDR
// us_force := us_force ^ un ;
 400: LD_ADDR_EXP 25
 404: PUSH
 405: LD_EXP 25
 409: PUSH
 410: LD_VAR 0 4
 414: ADD
 415: ST_TO_ADDR
// end ;
 416: GO 364
 418: POP
 419: POP
// hc_importance := 100 ;
 420: LD_ADDR_OWVAR 32
 424: PUSH
 425: LD_INT 100
 427: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , us_skill ) ;
 428: LD_INT 1
 430: PPUSH
 431: LD_INT 1
 433: PPUSH
 434: LD_EXP 26
 438: PPUSH
 439: CALL_OW 380
// hc_gallery := skirmish ;
 443: LD_ADDR_OWVAR 33
 447: PUSH
 448: LD_STRING skirmish
 450: ST_TO_ADDR
// hc_face_number := 10 ;
 451: LD_ADDR_OWVAR 34
 455: PUSH
 456: LD_INT 10
 458: ST_TO_ADDR
// hc_name := Michael Anderson ;
 459: LD_ADDR_OWVAR 26
 463: PUSH
 464: LD_STRING Michael Anderson
 466: ST_TO_ADDR
// us_commander := CreateHuman ;
 467: LD_ADDR_EXP 24
 471: PUSH
 472: CALL_OW 44
 476: ST_TO_ADDR
// player_commander := us_commander ;
 477: LD_ADDR_EXP 11
 481: PUSH
 482: LD_EXP 24
 486: ST_TO_ADDR
// hc_importance := 0 ;
 487: LD_ADDR_OWVAR 32
 491: PUSH
 492: LD_INT 0
 494: ST_TO_ADDR
// hc_gallery :=  ;
 495: LD_ADDR_OWVAR 33
 499: PUSH
 500: LD_STRING 
 502: ST_TO_ADDR
// team := CharacterSelection ( text , [ 7 , 6 , 5 ] [ Difficulty ] , [ 7 , 6 , 5 ] [ Difficulty ] , [ sel_change_class , us_commander , sel_changeable , sel_not_hired ] ^ us_force , [ class_soldier , [ class_mechanic , 1 ] , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , [ 5 , 5 , - 1 ] [ Difficulty ] ] ) ;
 503: LD_ADDR_VAR 0 5
 507: PUSH
 508: LD_STRING text
 510: PPUSH
 511: LD_INT 7
 513: PUSH
 514: LD_INT 6
 516: PUSH
 517: LD_INT 5
 519: PUSH
 520: EMPTY
 521: LIST
 522: LIST
 523: LIST
 524: PUSH
 525: LD_OWVAR 67
 529: ARRAY
 530: PPUSH
 531: LD_INT 7
 533: PUSH
 534: LD_INT 6
 536: PUSH
 537: LD_INT 5
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: LIST
 544: PUSH
 545: LD_OWVAR 67
 549: ARRAY
 550: PPUSH
 551: LD_INT -5
 553: PUSH
 554: LD_EXP 24
 558: PUSH
 559: LD_INT -3
 561: PUSH
 562: LD_INT -2
 564: PUSH
 565: EMPTY
 566: LIST
 567: LIST
 568: LIST
 569: LIST
 570: PUSH
 571: LD_EXP 25
 575: ADD
 576: PPUSH
 577: LD_INT 1
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 1
 585: PUSH
 586: EMPTY
 587: LIST
 588: LIST
 589: PUSH
 590: LD_INT 2
 592: PUSH
 593: LD_INT 1
 595: PUSH
 596: EMPTY
 597: LIST
 598: LIST
 599: PUSH
 600: LD_INT 4
 602: PUSH
 603: LD_INT 1
 605: PUSH
 606: EMPTY
 607: LIST
 608: LIST
 609: PUSH
 610: LD_INT 5
 612: PUSH
 613: LD_INT 5
 615: PUSH
 616: LD_INT 1
 618: NEG
 619: PUSH
 620: EMPTY
 621: LIST
 622: LIST
 623: LIST
 624: PUSH
 625: LD_OWVAR 67
 629: ARRAY
 630: PUSH
 631: EMPTY
 632: LIST
 633: LIST
 634: LIST
 635: LIST
 636: LIST
 637: PPUSH
 638: CALL_OW 42
 642: ST_TO_ADDR
// team := team ^ us_commander ;
 643: LD_ADDR_VAR 0 5
 647: PUSH
 648: LD_VAR 0 5
 652: PUSH
 653: LD_EXP 24
 657: ADD
 658: ST_TO_ADDR
// for i = 1 to team do
 659: LD_ADDR_VAR 0 2
 663: PUSH
 664: DOUBLE
 665: LD_INT 1
 667: DEC
 668: ST_TO_ADDR
 669: LD_VAR 0 5
 673: PUSH
 674: FOR_TO
 675: IFFALSE 875
// begin if GetClass ( team [ i ] ) = class_mechanic then
 677: LD_VAR 0 5
 681: PUSH
 682: LD_VAR 0 2
 686: ARRAY
 687: PPUSH
 688: CALL_OW 257
 692: PUSH
 693: LD_INT 3
 695: EQUAL
 696: IFFALSE 837
// begin vc_chassis := [ us_medium_tracked , us_heavy_tracked , us_morphling ] [ i mod 3 + 1 ] ;
 698: LD_ADDR_OWVAR 37
 702: PUSH
 703: LD_INT 3
 705: PUSH
 706: LD_INT 4
 708: PUSH
 709: LD_INT 5
 711: PUSH
 712: EMPTY
 713: LIST
 714: LIST
 715: LIST
 716: PUSH
 717: LD_VAR 0 2
 721: PUSH
 722: LD_INT 3
 724: MOD
 725: PUSH
 726: LD_INT 1
 728: PLUS
 729: ARRAY
 730: ST_TO_ADDR
// vc_engine := engine_siberite ;
 731: LD_ADDR_OWVAR 39
 735: PUSH
 736: LD_INT 3
 738: ST_TO_ADDR
// vc_control := control_manual ;
 739: LD_ADDR_OWVAR 38
 743: PUSH
 744: LD_INT 1
 746: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_laser ] [ rand ( 1 , 3 ) ] ;
 747: LD_ADDR_OWVAR 40
 751: PUSH
 752: LD_INT 4
 754: PUSH
 755: LD_INT 5
 757: PUSH
 758: LD_INT 9
 760: PUSH
 761: EMPTY
 762: LIST
 763: LIST
 764: LIST
 765: PUSH
 766: LD_INT 1
 768: PPUSH
 769: LD_INT 3
 771: PPUSH
 772: CALL_OW 12
 776: ARRAY
 777: ST_TO_ADDR
// un := CreateVehicle ;
 778: LD_ADDR_VAR 0 4
 782: PUSH
 783: CALL_OW 45
 787: ST_TO_ADDR
// SetDir ( un , 2 ) ;
 788: LD_VAR 0 4
 792: PPUSH
 793: LD_INT 2
 795: PPUSH
 796: CALL_OW 233
// PlaceUnitArea ( un , start_north , false ) ;
 800: LD_VAR 0 4
 804: PPUSH
 805: LD_INT 1
 807: PPUSH
 808: LD_INT 0
 810: PPUSH
 811: CALL_OW 49
// PlaceHumanInUnit ( team [ i ] , un ) ;
 815: LD_VAR 0 5
 819: PUSH
 820: LD_VAR 0 2
 824: ARRAY
 825: PPUSH
 826: LD_VAR 0 4
 830: PPUSH
 831: CALL_OW 52
// end else
 835: GO 873
// begin PlaceUnitArea ( team [ i ] , start_north , false ) ;
 837: LD_VAR 0 5
 841: PUSH
 842: LD_VAR 0 2
 846: ARRAY
 847: PPUSH
 848: LD_INT 1
 850: PPUSH
 851: LD_INT 0
 853: PPUSH
 854: CALL_OW 49
// ComHold ( team [ i ] ) ;
 858: LD_VAR 0 5
 862: PUSH
 863: LD_VAR 0 2
 867: ARRAY
 868: PPUSH
 869: CALL_OW 140
// end ; end ;
 873: GO 674
 875: POP
 876: POP
// end ;
 877: LD_VAR 0 1
 881: RET
// every 0 0$38 + 2 2$30 trigger tick < 73500 do
 882: LD_OWVAR 1
 886: PUSH
 887: LD_INT 73500
 889: LESS
 890: IFFALSE 917
 892: GO 894
 894: DISABLE
// begin enable ;
 895: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , extra_crates , true ) ;
 896: LD_INT 1
 898: PPUSH
 899: LD_INT 5
 901: PPUSH
 902: CALL_OW 12
 906: PPUSH
 907: LD_INT 23
 909: PPUSH
 910: LD_INT 1
 912: PPUSH
 913: CALL_OW 55
// end ;
 917: END
// every 1 1$10 do var time , p , l ;
 918: GO 920
 920: DISABLE
 921: LD_INT 0
 923: PPUSH
 924: PPUSH
 925: PPUSH
// begin time := 0 0$44 ;
 926: LD_ADDR_VAR 0 1
 930: PUSH
 931: LD_INT 1540
 933: ST_TO_ADDR
// l := 0 ;
 934: LD_ADDR_VAR 0 3
 938: PUSH
 939: LD_INT 0
 941: ST_TO_ADDR
// repeat begin Wait ( time ) ;
 942: LD_VAR 0 1
 946: PPUSH
 947: CALL_OW 67
// l := l + 1 ;
 951: LD_ADDR_VAR 0 3
 955: PUSH
 956: LD_VAR 0 3
 960: PUSH
 961: LD_INT 1
 963: PLUS
 964: ST_TO_ADDR
// if GetListOfCratesInArea ( us_crates ) < 20 then
 965: LD_INT 12
 967: PPUSH
 968: CALL_OW 435
 972: PUSH
 973: LD_INT 20
 975: LESS
 976: IFFALSE 1035
// begin CreateCratesArea ( Rand ( 1 , 5 ) , us_crates , true ) ;
 978: LD_INT 1
 980: PPUSH
 981: LD_INT 5
 983: PPUSH
 984: CALL_OW 12
 988: PPUSH
 989: LD_INT 12
 991: PPUSH
 992: LD_INT 1
 994: PPUSH
 995: CALL_OW 55
// Wait ( Rand ( 0 0$39 , 0 0$48 ) ) ;
 999: LD_INT 1365
1001: PPUSH
1002: LD_INT 1680
1004: PPUSH
1005: CALL_OW 12
1009: PPUSH
1010: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 5 ) , us_crates , true ) ;
1014: LD_INT 1
1016: PPUSH
1017: LD_INT 5
1019: PPUSH
1020: CALL_OW 12
1024: PPUSH
1025: LD_INT 12
1027: PPUSH
1028: LD_INT 1
1030: PPUSH
1031: CALL_OW 55
// end ; p := Rand ( 0 , 1 ) ;
1035: LD_ADDR_VAR 0 2
1039: PUSH
1040: LD_INT 0
1042: PPUSH
1043: LD_INT 1
1045: PPUSH
1046: CALL_OW 12
1050: ST_TO_ADDR
// if p then
1051: LD_VAR 0 2
1055: IFFALSE 1090
// begin Wait ( Rand ( 0 0$09 , 0 0$20 ) ) ;
1057: LD_INT 315
1059: PPUSH
1060: LD_INT 700
1062: PPUSH
1063: CALL_OW 12
1067: PPUSH
1068: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 4 ) , true ) ;
1072: LD_INT 1
1074: PPUSH
1075: LD_INT 4
1077: PPUSH
1078: CALL_OW 12
1082: PPUSH
1083: LD_INT 1
1085: PPUSH
1086: CALL_OW 57
// end ; if l mod [ 15 , 13 , 11 ] [ Difficulty ] = 0 then
1090: LD_VAR 0 3
1094: PUSH
1095: LD_INT 15
1097: PUSH
1098: LD_INT 13
1100: PUSH
1101: LD_INT 11
1103: PUSH
1104: EMPTY
1105: LIST
1106: LIST
1107: LIST
1108: PUSH
1109: LD_OWVAR 67
1113: ARRAY
1114: MOD
1115: PUSH
1116: LD_INT 0
1118: EQUAL
1119: IFFALSE 1135
// time := time + 2 2$00 ;
1121: LD_ADDR_VAR 0 1
1125: PUSH
1126: LD_VAR 0 1
1130: PUSH
1131: LD_INT 4200
1133: PLUS
1134: ST_TO_ADDR
// end until false ;
1135: LD_INT 0
1137: IFFALSE 942
// end ; end_of_file
1139: PPOPN 3
1141: END
// export russians_in_base ; export function PrepareVulcanoBase ; var i , filter , hp , un , area ; begin
1142: LD_INT 0
1144: PPUSH
1145: PPUSH
1146: PPUSH
1147: PPUSH
1148: PPUSH
1149: PPUSH
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) ;
1150: LD_ADDR_VAR 0 3
1154: PUSH
1155: LD_INT 22
1157: PUSH
1158: LD_INT 4
1160: PUSH
1161: EMPTY
1162: LIST
1163: LIST
1164: PUSH
1165: LD_INT 21
1167: PUSH
1168: LD_INT 3
1170: PUSH
1171: EMPTY
1172: LIST
1173: LIST
1174: PUSH
1175: EMPTY
1176: LIST
1177: LIST
1178: PPUSH
1179: CALL_OW 69
1183: ST_TO_ADDR
// hp := [ 470 , 370 , 290 ] [ Difficulty ] ;
1184: LD_ADDR_VAR 0 4
1188: PUSH
1189: LD_INT 470
1191: PUSH
1192: LD_INT 370
1194: PUSH
1195: LD_INT 290
1197: PUSH
1198: EMPTY
1199: LIST
1200: LIST
1201: LIST
1202: PUSH
1203: LD_OWVAR 67
1207: ARRAY
1208: ST_TO_ADDR
// case Difficulty of 2 :
1209: LD_OWVAR 67
1213: PUSH
1214: LD_INT 2
1216: DOUBLE
1217: EQUAL
1218: IFTRUE 1222
1220: GO 1253
1222: POP
// begin DestroyUnit ( UnitFilter ( filter , [ f_btype , b_bunker ] ) [ 1 ] ) ;
1223: LD_VAR 0 3
1227: PPUSH
1228: LD_INT 30
1230: PUSH
1231: LD_INT 32
1233: PUSH
1234: EMPTY
1235: LIST
1236: LIST
1237: PPUSH
1238: CALL_OW 72
1242: PUSH
1243: LD_INT 1
1245: ARRAY
1246: PPUSH
1247: CALL_OW 65
// end ; 3 :
1251: GO 1329
1253: LD_INT 3
1255: DOUBLE
1256: EQUAL
1257: IFTRUE 1261
1259: GO 1328
1261: POP
// begin DestroyUnit ( UnitFilter ( filter , [ f_btype , b_bunker ] ) [ 1 ] ) ;
1262: LD_VAR 0 3
1266: PPUSH
1267: LD_INT 30
1269: PUSH
1270: LD_INT 32
1272: PUSH
1273: EMPTY
1274: LIST
1275: LIST
1276: PPUSH
1277: CALL_OW 72
1281: PUSH
1282: LD_INT 1
1284: ARRAY
1285: PPUSH
1286: CALL_OW 65
// DestroyUnit ( UnitFilter ( filter , [ f_btype , b_solar_power ] ) [ Rand ( 1 , 3 ) ] ) ;
1290: LD_VAR 0 3
1294: PPUSH
1295: LD_INT 30
1297: PUSH
1298: LD_INT 27
1300: PUSH
1301: EMPTY
1302: LIST
1303: LIST
1304: PPUSH
1305: CALL_OW 72
1309: PUSH
1310: LD_INT 1
1312: PPUSH
1313: LD_INT 3
1315: PPUSH
1316: CALL_OW 12
1320: ARRAY
1321: PPUSH
1322: CALL_OW 65
// end ; end ;
1326: GO 1329
1328: POP
// for i = 1 to filter do
1329: LD_ADDR_VAR 0 2
1333: PUSH
1334: DOUBLE
1335: LD_INT 1
1337: DEC
1338: ST_TO_ADDR
1339: LD_VAR 0 3
1343: PUSH
1344: FOR_TO
1345: IFFALSE 1382
// SetLives ( filter [ i ] , hp + Rand ( - 29 , 29 ) ) ;
1347: LD_VAR 0 3
1351: PUSH
1352: LD_VAR 0 2
1356: ARRAY
1357: PPUSH
1358: LD_VAR 0 4
1362: PUSH
1363: LD_INT 29
1365: NEG
1366: PPUSH
1367: LD_INT 29
1369: PPUSH
1370: CALL_OW 12
1374: PLUS
1375: PPUSH
1376: CALL_OW 234
1380: GO 1344
1382: POP
1383: POP
// SetBName ( us_depot , Vulcano1 ) ;
1384: LD_INT 50
1386: PPUSH
1387: LD_STRING Vulcano1
1389: PPUSH
1390: CALL_OW 500
// hc_importance := 0 ;
1394: LD_ADDR_OWVAR 32
1398: PUSH
1399: LD_INT 0
1401: ST_TO_ADDR
// uc_side := 3 ;
1402: LD_ADDR_OWVAR 20
1406: PUSH
1407: LD_INT 3
1409: ST_TO_ADDR
// uc_nation := nation_russian ;
1410: LD_ADDR_OWVAR 21
1414: PUSH
1415: LD_INT 3
1417: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
1418: LD_ADDR_OWVAR 37
1422: PUSH
1423: LD_INT 22
1425: ST_TO_ADDR
// vc_engine := engine_combustion ;
1426: LD_ADDR_OWVAR 39
1430: PUSH
1431: LD_INT 1
1433: ST_TO_ADDR
// vc_control := control_manual ;
1434: LD_ADDR_OWVAR 38
1438: PUSH
1439: LD_INT 1
1441: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1442: LD_ADDR_OWVAR 40
1446: PUSH
1447: LD_INT 51
1449: ST_TO_ADDR
// un := CreateVehicle ;
1450: LD_ADDR_VAR 0 5
1454: PUSH
1455: CALL_OW 45
1459: ST_TO_ADDR
// PlaceUnitXY ( un , 97 , 138 , false ) ;
1460: LD_VAR 0 5
1464: PPUSH
1465: LD_INT 97
1467: PPUSH
1468: LD_INT 138
1470: PPUSH
1471: LD_INT 0
1473: PPUSH
1474: CALL_OW 48
// SetCargo ( un , mat_cans , 100 ) ;
1478: LD_VAR 0 5
1482: PPUSH
1483: LD_INT 1
1485: PPUSH
1486: LD_INT 100
1488: PPUSH
1489: CALL_OW 290
// SetFuel ( un , 45 ) ;
1493: LD_VAR 0 5
1497: PPUSH
1498: LD_INT 45
1500: PPUSH
1501: CALL_OW 240
// un := CreateVehicle ;
1505: LD_ADDR_VAR 0 5
1509: PUSH
1510: CALL_OW 45
1514: ST_TO_ADDR
// PlaceUnitXY ( un , 109 , 154 , false ) ;
1515: LD_VAR 0 5
1519: PPUSH
1520: LD_INT 109
1522: PPUSH
1523: LD_INT 154
1525: PPUSH
1526: LD_INT 0
1528: PPUSH
1529: CALL_OW 48
// SetCargo ( un , mat_cans , 100 ) ;
1533: LD_VAR 0 5
1537: PPUSH
1538: LD_INT 1
1540: PPUSH
1541: LD_INT 100
1543: PPUSH
1544: CALL_OW 290
// SetDir ( un , 1 ) ;
1548: LD_VAR 0 5
1552: PPUSH
1553: LD_INT 1
1555: PPUSH
1556: CALL_OW 233
// SetFuel ( un , 50 ) ;
1560: LD_VAR 0 5
1564: PPUSH
1565: LD_INT 50
1567: PPUSH
1568: CALL_OW 240
// russians_in_base := [ ] ;
1572: LD_ADDR_EXP 28
1576: PUSH
1577: EMPTY
1578: ST_TO_ADDR
// for i = 1 to [ 6 , 6 , 7 ] [ Difficulty ] do
1579: LD_ADDR_VAR 0 2
1583: PUSH
1584: DOUBLE
1585: LD_INT 1
1587: DEC
1588: ST_TO_ADDR
1589: LD_INT 6
1591: PUSH
1592: LD_INT 6
1594: PUSH
1595: LD_INT 7
1597: PUSH
1598: EMPTY
1599: LIST
1600: LIST
1601: LIST
1602: PUSH
1603: LD_OWVAR 67
1607: ARRAY
1608: PUSH
1609: FOR_TO
1610: IFFALSE 1691
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
1612: LD_INT 0
1614: PPUSH
1615: LD_INT 1
1617: PPUSH
1618: LD_INT 4
1620: PUSH
1621: LD_INT 5
1623: PUSH
1624: LD_INT 6
1626: PUSH
1627: EMPTY
1628: LIST
1629: LIST
1630: LIST
1631: PUSH
1632: LD_OWVAR 67
1636: ARRAY
1637: PPUSH
1638: CALL_OW 380
// un := CreateHuman ;
1642: LD_ADDR_VAR 0 5
1646: PUSH
1647: CALL_OW 44
1651: ST_TO_ADDR
// russians_in_base := russians_in_base ^ un ;
1652: LD_ADDR_EXP 28
1656: PUSH
1657: LD_EXP 28
1661: PUSH
1662: LD_VAR 0 5
1666: ADD
1667: ST_TO_ADDR
// PlaceUnitXYR ( un , 94 , 145 , 10 , false ) ;
1668: LD_VAR 0 5
1672: PPUSH
1673: LD_INT 94
1675: PPUSH
1676: LD_INT 145
1678: PPUSH
1679: LD_INT 10
1681: PPUSH
1682: LD_INT 0
1684: PPUSH
1685: CALL_OW 50
// end ;
1689: GO 1609
1691: POP
1692: POP
// end ;
1693: LD_VAR 0 1
1697: RET
// every 0 0$2 trigger UnitFilter ( russians_in_base , [ f_see , 1 ] ) do var enemy ;
1698: LD_EXP 28
1702: PPUSH
1703: LD_INT 101
1705: PUSH
1706: LD_INT 1
1708: PUSH
1709: EMPTY
1710: LIST
1711: LIST
1712: PPUSH
1713: CALL_OW 72
1717: IFFALSE 1783
1719: GO 1721
1721: DISABLE
1722: LD_INT 0
1724: PPUSH
// begin enemy := UnitFilter ( russians_in_base , [ f_see , 1 ] ) [ 1 ] ;
1725: LD_ADDR_VAR 0 1
1729: PUSH
1730: LD_EXP 28
1734: PPUSH
1735: LD_INT 101
1737: PUSH
1738: LD_INT 1
1740: PUSH
1741: EMPTY
1742: LIST
1743: LIST
1744: PPUSH
1745: CALL_OW 72
1749: PUSH
1750: LD_INT 1
1752: ARRAY
1753: ST_TO_ADDR
// ComAgressiveMove ( russians_in_base , GetX ( enemy ) , GetY ( enemy ) ) ;
1754: LD_EXP 28
1758: PPUSH
1759: LD_VAR 0 1
1763: PPUSH
1764: CALL_OW 250
1768: PPUSH
1769: LD_VAR 0 1
1773: PPUSH
1774: CALL_OW 251
1778: PPUSH
1779: CALL_OW 114
// end ;
1783: PPOPN 1
1785: END
// every 0 0$01 trigger GetDistUnitToSide ( us_depot , 1 ) < 40 do var i , un ;
1786: LD_INT 50
1788: PPUSH
1789: LD_INT 1
1791: PPUSH
1792: CALL 2162 0 2
1796: PUSH
1797: LD_INT 40
1799: LESS
1800: IFFALSE 1997
1802: GO 1804
1804: DISABLE
1805: LD_INT 0
1807: PPUSH
1808: PPUSH
// begin uc_side := 4 ;
1809: LD_ADDR_OWVAR 20
1813: PUSH
1814: LD_INT 4
1816: ST_TO_ADDR
// uc_nation := nation_american ;
1817: LD_ADDR_OWVAR 21
1821: PUSH
1822: LD_INT 1
1824: ST_TO_ADDR
// hc_importance := 0 ;
1825: LD_ADDR_OWVAR 32
1829: PUSH
1830: LD_INT 0
1832: ST_TO_ADDR
// for i = 1 to 7 do
1833: LD_ADDR_VAR 0 1
1837: PUSH
1838: DOUBLE
1839: LD_INT 1
1841: DEC
1842: ST_TO_ADDR
1843: LD_INT 7
1845: PUSH
1846: FOR_TO
1847: IFFALSE 1911
// begin PrepareHuman ( false , Rand ( 1 , 3 ) , us_skill ) ;
1849: LD_INT 0
1851: PPUSH
1852: LD_INT 1
1854: PPUSH
1855: LD_INT 3
1857: PPUSH
1858: CALL_OW 12
1862: PPUSH
1863: LD_EXP 26
1867: PPUSH
1868: CALL_OW 380
// un := CreateHuman ;
1872: LD_ADDR_VAR 0 2
1876: PUSH
1877: CALL_OW 44
1881: ST_TO_ADDR
// PlaceUnitArea ( un , base_resp , false ) ;
1882: LD_VAR 0 2
1886: PPUSH
1887: LD_INT 7
1889: PPUSH
1890: LD_INT 0
1892: PPUSH
1893: CALL_OW 49
// SetLives ( un , 10 ) ;
1897: LD_VAR 0 2
1901: PPUSH
1902: LD_INT 10
1904: PPUSH
1905: CALL_OW 234
// end ;
1909: GO 1846
1911: POP
1912: POP
// for i = 1 to 5 do
1913: LD_ADDR_VAR 0 1
1917: PUSH
1918: DOUBLE
1919: LD_INT 1
1921: DEC
1922: ST_TO_ADDR
1923: LD_INT 5
1925: PUSH
1926: FOR_TO
1927: IFFALSE 1995
// begin PrepareHuman ( false , 4 , us_skill ) ;
1929: LD_INT 0
1931: PPUSH
1932: LD_INT 4
1934: PPUSH
1935: LD_EXP 26
1939: PPUSH
1940: CALL_OW 380
// SetDir ( un , 1 ) ;
1944: LD_VAR 0 2
1948: PPUSH
1949: LD_INT 1
1951: PPUSH
1952: CALL_OW 233
// un := CreateHuman ;
1956: LD_ADDR_VAR 0 2
1960: PUSH
1961: CALL_OW 44
1965: ST_TO_ADDR
// PlaceUnitArea ( un , rekt , false ) ;
1966: LD_VAR 0 2
1970: PPUSH
1971: LD_INT 22
1973: PPUSH
1974: LD_INT 0
1976: PPUSH
1977: CALL_OW 49
// SetLives ( un , 10 ) ;
1981: LD_VAR 0 2
1985: PPUSH
1986: LD_INT 10
1988: PPUSH
1989: CALL_OW 234
// end ;
1993: GO 1926
1995: POP
1996: POP
// end ; end_of_file
1997: PPOPN 2
1999: END
// export function PrepareApeman2 ( n ) ; var un , i ; begin
2000: LD_INT 0
2002: PPUSH
2003: PPUSH
2004: PPUSH
// for i = 1 to n do
2005: LD_ADDR_VAR 0 4
2009: PUSH
2010: DOUBLE
2011: LD_INT 1
2013: DEC
2014: ST_TO_ADDR
2015: LD_VAR 0 1
2019: PUSH
2020: FOR_TO
2021: IFFALSE 2155
// begin uc_side := 0 ;
2023: LD_ADDR_OWVAR 20
2027: PUSH
2028: LD_INT 0
2030: ST_TO_ADDR
// uc_nation := 0 ;
2031: LD_ADDR_OWVAR 21
2035: PUSH
2036: LD_INT 0
2038: ST_TO_ADDR
// hc_class := class_apeman ;
2039: LD_ADDR_OWVAR 28
2043: PUSH
2044: LD_INT 12
2046: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
2047: LD_ADDR_OWVAR 31
2051: PUSH
2052: LD_INT 0
2054: PUSH
2055: LD_INT 0
2057: PUSH
2058: LD_INT 0
2060: PUSH
2061: LD_INT 0
2063: PUSH
2064: EMPTY
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: ST_TO_ADDR
// hc_name :=  ;
2070: LD_ADDR_OWVAR 26
2074: PUSH
2075: LD_STRING 
2077: ST_TO_ADDR
// hc_gallery :=  ;
2078: LD_ADDR_OWVAR 33
2082: PUSH
2083: LD_STRING 
2085: ST_TO_ADDR
// hc_importance := 0 ;
2086: LD_ADDR_OWVAR 32
2090: PUSH
2091: LD_INT 0
2093: ST_TO_ADDR
// un := CreateHuman ;
2094: LD_ADDR_VAR 0 3
2098: PUSH
2099: CALL_OW 44
2103: ST_TO_ADDR
// PlaceUnitArea ( un , [ ape1 , ape2 ] [ Rand ( 1 , 2 ) ] , false ) ;
2104: LD_VAR 0 3
2108: PPUSH
2109: LD_INT 19
2111: PUSH
2112: LD_INT 20
2114: PUSH
2115: EMPTY
2116: LIST
2117: LIST
2118: PUSH
2119: LD_INT 1
2121: PPUSH
2122: LD_INT 2
2124: PPUSH
2125: CALL_OW 12
2129: ARRAY
2130: PPUSH
2131: LD_INT 0
2133: PPUSH
2134: CALL_OW 49
// Wait ( Rand ( 0 0$33 , 2 2$33 ) ) ;
2138: LD_INT 1155
2140: PPUSH
2141: LD_INT 5355
2143: PPUSH
2144: CALL_OW 12
2148: PPUSH
2149: CALL_OW 67
// end ;
2153: GO 2020
2155: POP
2156: POP
// end ;
2157: LD_VAR 0 2
2161: RET
// export function GetDistUnitToSide ( unit , side ) ; var tmp , dist ; begin
2162: LD_INT 0
2164: PPUSH
2165: PPUSH
2166: PPUSH
// tmp := NearestUnitToUnit ( FilterAllUnits ( [ f_side , side ] ) , unit ) ;
2167: LD_ADDR_VAR 0 4
2171: PUSH
2172: LD_INT 22
2174: PUSH
2175: LD_VAR 0 2
2179: PUSH
2180: EMPTY
2181: LIST
2182: LIST
2183: PPUSH
2184: CALL_OW 69
2188: PPUSH
2189: LD_VAR 0 1
2193: PPUSH
2194: CALL_OW 74
2198: ST_TO_ADDR
// dist := GetDistUnits ( unit , tmp ) ;
2199: LD_ADDR_VAR 0 5
2203: PUSH
2204: LD_VAR 0 1
2208: PPUSH
2209: LD_VAR 0 4
2213: PPUSH
2214: CALL_OW 296
2218: ST_TO_ADDR
// if dist >= 9999 then
2219: LD_VAR 0 5
2223: PUSH
2224: LD_INT 9999
2226: GREATEREQUAL
2227: IFFALSE 2240
// result := - 1 else
2229: LD_ADDR_VAR 0 3
2233: PUSH
2234: LD_INT 1
2236: NEG
2237: ST_TO_ADDR
2238: GO 2250
// result := dist ;
2240: LD_ADDR_VAR 0 3
2244: PUSH
2245: LD_VAR 0 5
2249: ST_TO_ADDR
// end ;
2250: LD_VAR 0 3
2254: RET
// export function NearestUnitToSide ( plist , side ) ; var i , tmp , unit ; begin
2255: LD_INT 0
2257: PPUSH
2258: PPUSH
2259: PPUSH
2260: PPUSH
// tmp := 9999 ;
2261: LD_ADDR_VAR 0 5
2265: PUSH
2266: LD_INT 9999
2268: ST_TO_ADDR
// for i = 1 to plist do
2269: LD_ADDR_VAR 0 4
2273: PUSH
2274: DOUBLE
2275: LD_INT 1
2277: DEC
2278: ST_TO_ADDR
2279: LD_VAR 0 1
2283: PUSH
2284: FOR_TO
2285: IFFALSE 2359
// if GetDistUnitToSide ( plist [ i ] , side ) < tmp then
2287: LD_VAR 0 1
2291: PUSH
2292: LD_VAR 0 4
2296: ARRAY
2297: PPUSH
2298: LD_VAR 0 2
2302: PPUSH
2303: CALL 2162 0 2
2307: PUSH
2308: LD_VAR 0 5
2312: LESS
2313: IFFALSE 2357
// begin tmp := GetDistUnitToSide ( plist [ i ] , side ) ;
2315: LD_ADDR_VAR 0 5
2319: PUSH
2320: LD_VAR 0 1
2324: PUSH
2325: LD_VAR 0 4
2329: ARRAY
2330: PPUSH
2331: LD_VAR 0 2
2335: PPUSH
2336: CALL 2162 0 2
2340: ST_TO_ADDR
// unit := plist [ i ] ;
2341: LD_ADDR_VAR 0 6
2345: PUSH
2346: LD_VAR 0 1
2350: PUSH
2351: LD_VAR 0 4
2355: ARRAY
2356: ST_TO_ADDR
// end ;
2357: GO 2284
2359: POP
2360: POP
// result := unit ;
2361: LD_ADDR_VAR 0 3
2365: PUSH
2366: LD_VAR 0 6
2370: ST_TO_ADDR
// end ;
2371: LD_VAR 0 3
2375: RET
// export function CalculateCommanderPoints ; var points , crates_collected , sib_collected , i ; begin
2376: LD_INT 0
2378: PPUSH
2379: PPUSH
2380: PPUSH
2381: PPUSH
2382: PPUSH
// points := [ 1000 , 2500 , 5000 ] [ Difficulty ] ;
2383: LD_ADDR_VAR 0 2
2387: PUSH
2388: LD_INT 1000
2390: PUSH
2391: LD_INT 2500
2393: PUSH
2394: LD_INT 5000
2396: PUSH
2397: EMPTY
2398: LIST
2399: LIST
2400: LIST
2401: PUSH
2402: LD_OWVAR 67
2406: ARRAY
2407: ST_TO_ADDR
// points := points + ( - 1 * FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) * 30 ) ;
2408: LD_ADDR_VAR 0 2
2412: PUSH
2413: LD_VAR 0 2
2417: PUSH
2418: LD_INT 1
2420: NEG
2421: PUSH
2422: LD_INT 22
2424: PUSH
2425: LD_OWVAR 2
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: PUSH
2434: LD_INT 21
2436: PUSH
2437: LD_INT 3
2439: PUSH
2440: EMPTY
2441: LIST
2442: LIST
2443: PUSH
2444: EMPTY
2445: LIST
2446: LIST
2447: PPUSH
2448: CALL_OW 69
2452: MUL
2453: PUSH
2454: LD_INT 30
2456: MUL
2457: PLUS
2458: ST_TO_ADDR
// points := points + ( kill_counter * 10 ) ;
2459: LD_ADDR_VAR 0 2
2463: PUSH
2464: LD_VAR 0 2
2468: PUSH
2469: LD_EXP 17
2473: PUSH
2474: LD_INT 10
2476: MUL
2477: PLUS
2478: ST_TO_ADDR
// points := points + ( - 1 * kill_counter * 20 ) ;
2479: LD_ADDR_VAR 0 2
2483: PUSH
2484: LD_VAR 0 2
2488: PUSH
2489: LD_INT 1
2491: NEG
2492: PUSH
2493: LD_EXP 17
2497: MUL
2498: PUSH
2499: LD_INT 20
2501: MUL
2502: PLUS
2503: ST_TO_ADDR
// points := points + ( - 1 * ( ( tick / 35 ) / 60 ) * 25 ) ;
2504: LD_ADDR_VAR 0 2
2508: PUSH
2509: LD_VAR 0 2
2513: PUSH
2514: LD_INT 1
2516: NEG
2517: PUSH
2518: LD_OWVAR 1
2522: PUSH
2523: LD_INT 35
2525: DIVREAL
2526: PUSH
2527: LD_INT 60
2529: DIVREAL
2530: MUL
2531: PUSH
2532: LD_INT 25
2534: MUL
2535: PLUS
2536: ST_TO_ADDR
// points := points + ( tech_counter * 15 ) ;
2537: LD_ADDR_VAR 0 2
2541: PUSH
2542: LD_VAR 0 2
2546: PUSH
2547: LD_EXP 19
2551: PUSH
2552: LD_INT 15
2554: MUL
2555: PLUS
2556: ST_TO_ADDR
// points := points + ( - 1 * sib_contamin_counter ) * 1000 ;
2557: LD_ADDR_VAR 0 2
2561: PUSH
2562: LD_VAR 0 2
2566: PUSH
2567: LD_INT 1
2569: NEG
2570: PUSH
2571: LD_EXP 20
2575: MUL
2576: PUSH
2577: LD_INT 1000
2579: MUL
2580: PLUS
2581: ST_TO_ADDR
// points := points + ( veh_counter * 5 ) ;
2582: LD_ADDR_VAR 0 2
2586: PUSH
2587: LD_VAR 0 2
2591: PUSH
2592: LD_EXP 18
2596: PUSH
2597: LD_INT 5
2599: MUL
2600: PLUS
2601: ST_TO_ADDR
// result := points ;
2602: LD_ADDR_VAR 0 1
2606: PUSH
2607: LD_VAR 0 2
2611: ST_TO_ADDR
// end ; end_of_file
2612: LD_VAR 0 1
2616: RET
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2617: LD_VAR 0 1
2621: PPUSH
2622: CALL 35583 0 1
// if un = ru_cargo then
2626: LD_VAR 0 1
2630: PUSH
2631: LD_EXP 31
2635: EQUAL
2636: IFFALSE 2646
// ru_cargo := 0 ;
2638: LD_ADDR_EXP 31
2642: PUSH
2643: LD_INT 0
2645: ST_TO_ADDR
// if GetSide ( un ) = your_side then
2646: LD_VAR 0 1
2650: PPUSH
2651: CALL_OW 255
2655: PUSH
2656: LD_OWVAR 2
2660: EQUAL
2661: IFFALSE 2677
// dead_counter := dead_counter + 1 ;
2663: LD_ADDR_EXP 16
2667: PUSH
2668: LD_EXP 16
2672: PUSH
2673: LD_INT 1
2675: PLUS
2676: ST_TO_ADDR
// if GetSide ( un ) in FilterAllUnits ( [ f_enemy , your_side ] ) then
2677: LD_VAR 0 1
2681: PPUSH
2682: CALL_OW 255
2686: PUSH
2687: LD_INT 81
2689: PUSH
2690: LD_OWVAR 2
2694: PUSH
2695: EMPTY
2696: LIST
2697: LIST
2698: PPUSH
2699: CALL_OW 69
2703: IN
2704: IFFALSE 2720
// kill_counter := kill_counter + 1 ;
2706: LD_ADDR_EXP 17
2710: PUSH
2711: LD_EXP 17
2715: PUSH
2716: LD_INT 1
2718: PLUS
2719: ST_TO_ADDR
// if un = player_commander then
2720: LD_VAR 0 1
2724: PUSH
2725: LD_EXP 11
2729: EQUAL
2730: IFFALSE 2739
// YouLost ( vulcano-lost ) ;
2732: LD_STRING vulcano-lost
2734: PPUSH
2735: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) then
2739: LD_VAR 0 1
2743: PUSH
2744: LD_INT 22
2746: PUSH
2747: LD_INT 3
2749: PUSH
2750: EMPTY
2751: LIST
2752: LIST
2753: PUSH
2754: LD_INT 21
2756: PUSH
2757: LD_INT 3
2759: PUSH
2760: EMPTY
2761: LIST
2762: LIST
2763: PUSH
2764: EMPTY
2765: LIST
2766: LIST
2767: PPUSH
2768: CALL_OW 69
2772: IN
2773: IFFALSE 2889
// begin if GetBType ( un ) = b_turret or GetBType ( un ) = b_siberite_power then
2775: LD_VAR 0 1
2779: PPUSH
2780: CALL_OW 266
2784: PUSH
2785: LD_INT 33
2787: EQUAL
2788: PUSH
2789: LD_VAR 0 1
2793: PPUSH
2794: CALL_OW 266
2798: PUSH
2799: LD_INT 28
2801: EQUAL
2802: OR
2803: IFFALSE 2889
// begin ru_blist := ru_blist ^ GetBType ( un ) ;
2805: LD_ADDR_EXP 32
2809: PUSH
2810: LD_EXP 32
2814: PUSH
2815: LD_VAR 0 1
2819: PPUSH
2820: CALL_OW 266
2824: ADD
2825: ST_TO_ADDR
// ru_blist := ru_blist ^ GetX ( un ) ;
2826: LD_ADDR_EXP 32
2830: PUSH
2831: LD_EXP 32
2835: PUSH
2836: LD_VAR 0 1
2840: PPUSH
2841: CALL_OW 250
2845: ADD
2846: ST_TO_ADDR
// ru_blist := ru_blist ^ GetY ( un ) ;
2847: LD_ADDR_EXP 32
2851: PUSH
2852: LD_EXP 32
2856: PUSH
2857: LD_VAR 0 1
2861: PPUSH
2862: CALL_OW 251
2866: ADD
2867: ST_TO_ADDR
// ru_blist := ru_blist ^ GetDir ( un ) ;
2868: LD_ADDR_EXP 32
2872: PUSH
2873: LD_EXP 32
2877: PUSH
2878: LD_VAR 0 1
2882: PPUSH
2883: CALL_OW 254
2887: ADD
2888: ST_TO_ADDR
// end ; end ; if un in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) then
2889: LD_VAR 0 1
2893: PUSH
2894: LD_INT 22
2896: PUSH
2897: LD_INT 8
2899: PUSH
2900: EMPTY
2901: LIST
2902: LIST
2903: PUSH
2904: LD_INT 21
2906: PUSH
2907: LD_INT 3
2909: PUSH
2910: EMPTY
2911: LIST
2912: LIST
2913: PUSH
2914: EMPTY
2915: LIST
2916: LIST
2917: PPUSH
2918: CALL_OW 69
2922: IN
2923: IFFALSE 3067
// begin if GetBType ( un ) = b_barracks then
2925: LD_VAR 0 1
2929: PPUSH
2930: CALL_OW 266
2934: PUSH
2935: LD_INT 5
2937: EQUAL
2938: IFFALSE 2956
// legion_blist := legion_blist ^ b_armoury else
2940: LD_ADDR_EXP 40
2944: PUSH
2945: LD_EXP 40
2949: PUSH
2950: LD_INT 4
2952: ADD
2953: ST_TO_ADDR
2954: GO 3004
// if not GetBType ( un ) in [ b_warehouse , b_lab , b_lab_full ] then
2956: LD_VAR 0 1
2960: PPUSH
2961: CALL_OW 266
2965: PUSH
2966: LD_INT 1
2968: PUSH
2969: LD_INT 6
2971: PUSH
2972: LD_INT 8
2974: PUSH
2975: EMPTY
2976: LIST
2977: LIST
2978: LIST
2979: IN
2980: NOT
2981: IFFALSE 3004
// legion_blist := legion_blist ^ GetBType ( un ) ;
2983: LD_ADDR_EXP 40
2987: PUSH
2988: LD_EXP 40
2992: PUSH
2993: LD_VAR 0 1
2997: PPUSH
2998: CALL_OW 266
3002: ADD
3003: ST_TO_ADDR
// legion_blist := legion_blist ^ GetX ( un ) ;
3004: LD_ADDR_EXP 40
3008: PUSH
3009: LD_EXP 40
3013: PUSH
3014: LD_VAR 0 1
3018: PPUSH
3019: CALL_OW 250
3023: ADD
3024: ST_TO_ADDR
// legion_blist := legion_blist ^ GetY ( un ) ;
3025: LD_ADDR_EXP 40
3029: PUSH
3030: LD_EXP 40
3034: PUSH
3035: LD_VAR 0 1
3039: PPUSH
3040: CALL_OW 251
3044: ADD
3045: ST_TO_ADDR
// legion_blist := legion_blist ^ GetDir ( un ) ;
3046: LD_ADDR_EXP 40
3050: PUSH
3051: LD_EXP 40
3055: PUSH
3056: LD_VAR 0 1
3060: PPUSH
3061: CALL_OW 254
3065: ADD
3066: ST_TO_ADDR
// end ; if un in legion_force then
3067: LD_VAR 0 1
3071: PUSH
3072: LD_EXP 37
3076: IN
3077: IFFALSE 3095
// legion_force := legion_force diff un ;
3079: LD_ADDR_EXP 37
3083: PUSH
3084: LD_EXP 37
3088: PUSH
3089: LD_VAR 0 1
3093: DIFF
3094: ST_TO_ADDR
// if un in ru_force then
3095: LD_VAR 0 1
3099: PUSH
3100: LD_EXP 29
3104: IN
3105: IFFALSE 3123
// ru_force := ru_force diff un ;
3107: LD_ADDR_EXP 29
3111: PUSH
3112: LD_EXP 29
3116: PUSH
3117: LD_VAR 0 1
3121: DIFF
3122: ST_TO_ADDR
// if un in al_force then
3123: LD_VAR 0 1
3127: PUSH
3128: LD_EXP 44
3132: IN
3133: IFFALSE 3151
// al_force := al_force diff un ;
3135: LD_ADDR_EXP 44
3139: PUSH
3140: LD_EXP 44
3144: PUSH
3145: LD_VAR 0 1
3149: DIFF
3150: ST_TO_ADDR
// end ;
3151: PPOPN 1
3153: END
// on BuildingComplete ( b ) do var i ;
3154: LD_INT 0
3156: PPUSH
// begin if GetSide ( b ) = 8 then
3157: LD_VAR 0 1
3161: PPUSH
3162: CALL_OW 255
3166: PUSH
3167: LD_INT 8
3169: EQUAL
3170: IFFALSE 3210
// for i = 1 to 4 do
3172: LD_ADDR_VAR 0 2
3176: PUSH
3177: DOUBLE
3178: LD_INT 1
3180: DEC
3181: ST_TO_ADDR
3182: LD_INT 4
3184: PUSH
3185: FOR_TO
3186: IFFALSE 3208
// legion_blist := Delete ( legion_blist , 1 ) ;
3188: LD_ADDR_EXP 40
3192: PUSH
3193: LD_EXP 40
3197: PPUSH
3198: LD_INT 1
3200: PPUSH
3201: CALL_OW 3
3205: ST_TO_ADDR
3206: GO 3185
3208: POP
3209: POP
// if GetSide ( b ) = 3 then
3210: LD_VAR 0 1
3214: PPUSH
3215: CALL_OW 255
3219: PUSH
3220: LD_INT 3
3222: EQUAL
3223: IFFALSE 3263
// for i = 1 to 4 do
3225: LD_ADDR_VAR 0 2
3229: PUSH
3230: DOUBLE
3231: LD_INT 1
3233: DEC
3234: ST_TO_ADDR
3235: LD_INT 4
3237: PUSH
3238: FOR_TO
3239: IFFALSE 3261
// ru_blist := Delete ( ru_blist , 1 ) ;
3241: LD_ADDR_EXP 32
3245: PUSH
3246: LD_EXP 32
3250: PPUSH
3251: LD_INT 1
3253: PPUSH
3254: CALL_OW 3
3258: ST_TO_ADDR
3259: GO 3238
3261: POP
3262: POP
// end ;
3263: PPOPN 2
3265: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
3266: LD_VAR 0 1
3270: PPUSH
3271: LD_VAR 0 2
3275: PPUSH
3276: CALL 35703 0 2
// if not GetWeapon ( veh ) in [ ru_cargo_bay , ru_siberium_rocket ] then
3280: LD_VAR 0 1
3284: PPUSH
3285: CALL_OW 264
3289: PUSH
3290: LD_INT 51
3292: PUSH
3293: LD_INT 48
3295: PUSH
3296: EMPTY
3297: LIST
3298: LIST
3299: IN
3300: NOT
3301: IFFALSE 3349
// begin if GetSide ( veh ) = 3 then
3303: LD_VAR 0 1
3307: PPUSH
3308: CALL_OW 255
3312: PUSH
3313: LD_INT 3
3315: EQUAL
3316: IFFALSE 3349
// begin ComMoveXY ( veh , 149 , 8 ) ;
3318: LD_VAR 0 1
3322: PPUSH
3323: LD_INT 149
3325: PPUSH
3326: LD_INT 8
3328: PPUSH
3329: CALL_OW 111
// ru_force := ru_force ^ veh ;
3333: LD_ADDR_EXP 29
3337: PUSH
3338: LD_EXP 29
3342: PUSH
3343: LD_VAR 0 1
3347: ADD
3348: ST_TO_ADDR
// end ; end ; if not GetWeapon ( veh ) in [ ar_cargo_bay , ar_control_tower ] then
3349: LD_VAR 0 1
3353: PPUSH
3354: CALL_OW 264
3358: PUSH
3359: LD_INT 32
3361: PUSH
3362: LD_INT 31
3364: PUSH
3365: EMPTY
3366: LIST
3367: LIST
3368: IN
3369: NOT
3370: IFFALSE 3403
// begin if GetSide ( veh ) = 8 then
3372: LD_VAR 0 1
3376: PPUSH
3377: CALL_OW 255
3381: PUSH
3382: LD_INT 8
3384: EQUAL
3385: IFFALSE 3403
// legion_force := legion_force ^ veh ;
3387: LD_ADDR_EXP 37
3391: PUSH
3392: LD_EXP 37
3396: PUSH
3397: LD_VAR 0 1
3401: ADD
3402: ST_TO_ADDR
// end ; if GetSide ( veh ) = 3 and not ru_cargo and GetWeapon ( veh ) = ru_cargo_bay then
3403: LD_VAR 0 1
3407: PPUSH
3408: CALL_OW 255
3412: PUSH
3413: LD_INT 3
3415: EQUAL
3416: PUSH
3417: LD_EXP 31
3421: NOT
3422: AND
3423: PUSH
3424: LD_VAR 0 1
3428: PPUSH
3429: CALL_OW 264
3433: PUSH
3434: LD_INT 51
3436: EQUAL
3437: AND
3438: IFFALSE 3450
// ru_cargo := veh ;
3440: LD_ADDR_EXP 31
3444: PUSH
3445: LD_VAR 0 1
3449: ST_TO_ADDR
// if GetSide ( veh ) = 7 and your_side <> 7 then
3450: LD_VAR 0 1
3454: PPUSH
3455: CALL_OW 255
3459: PUSH
3460: LD_INT 7
3462: EQUAL
3463: PUSH
3464: LD_OWVAR 2
3468: PUSH
3469: LD_INT 7
3471: NONEQUAL
3472: AND
3473: IFFALSE 3491
// al_force := al_force ^ veh ;
3475: LD_ADDR_EXP 44
3479: PUSH
3480: LD_EXP 44
3484: PUSH
3485: LD_VAR 0 1
3489: ADD
3490: ST_TO_ADDR
// if GetSide ( veh ) = your_side then
3491: LD_VAR 0 1
3495: PPUSH
3496: CALL_OW 255
3500: PUSH
3501: LD_OWVAR 2
3505: EQUAL
3506: IFFALSE 3522
// veh_counter := veh_counter + 1 ;
3508: LD_ADDR_EXP 18
3512: PUSH
3513: LD_EXP 18
3517: PUSH
3518: LD_INT 1
3520: PLUS
3521: ST_TO_ADDR
// end ;
3522: PPOPN 2
3524: END
// on SibDepositContaminated ( contaminating_scientist , x_of_deposit , y_of_deposit ) do begin if GetSide ( contaminating_scientist ) <> your_side then
3525: LD_VAR 0 1
3529: PPUSH
3530: CALL_OW 255
3534: PUSH
3535: LD_OWVAR 2
3539: NONEQUAL
3540: IFFALSE 3556
// sib_contamin_counter := sib_contamin_counter + 1 ;
3542: LD_ADDR_EXP 20
3546: PUSH
3547: LD_EXP 20
3551: PUSH
3552: LD_INT 1
3554: PLUS
3555: ST_TO_ADDR
// end ;
3556: PPOPN 3
3558: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = your_side then
3559: LD_VAR 0 2
3563: PPUSH
3564: CALL_OW 255
3568: PUSH
3569: LD_OWVAR 2
3573: EQUAL
3574: IFFALSE 3590
// tech_counter := tech_counter + 1 ;
3576: LD_ADDR_EXP 19
3580: PUSH
3581: LD_EXP 19
3585: PUSH
3586: LD_INT 1
3588: PLUS
3589: ST_TO_ADDR
// if tech = 53 and your_side = 1 then
3590: LD_VAR 0 1
3594: PUSH
3595: LD_INT 53
3597: EQUAL
3598: PUSH
3599: LD_OWVAR 2
3603: PUSH
3604: LD_INT 1
3606: EQUAL
3607: AND
3608: IFFALSE 3623
// SetTech ( 80 , 1 , state_researched ) ;
3610: LD_INT 80
3612: PPUSH
3613: LD_INT 1
3615: PPUSH
3616: LD_INT 2
3618: PPUSH
3619: CALL_OW 322
// end ;
3623: PPOPN 2
3625: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 8 and GetControl ( un ) = control_remote then
3626: LD_VAR 0 1
3630: PPUSH
3631: CALL_OW 255
3635: PUSH
3636: LD_INT 8
3638: EQUAL
3639: PUSH
3640: LD_VAR 0 1
3644: PPUSH
3645: CALL_OW 263
3649: PUSH
3650: LD_INT 2
3652: EQUAL
3653: AND
3654: IFFALSE 3665
// ComAutodestruct ( un ) ;
3656: LD_VAR 0 1
3660: PPUSH
3661: CALL 73514 0 1
// end ;
3665: PPOPN 1
3667: END
// on SailEvent ( event ) do begin case event of event_legion_attack :
3668: LD_VAR 0 1
3672: PUSH
3673: LD_EXP 21
3677: DOUBLE
3678: EQUAL
3679: IFTRUE 3683
3681: GO 3690
3683: POP
// LegionAttack ( ) ; event_alliance_attack :
3684: CALL 11403 0 0
3688: GO 3725
3690: LD_EXP 23
3694: DOUBLE
3695: EQUAL
3696: IFTRUE 3700
3698: GO 3707
3700: POP
// AllianceAttack ( ) ; event_russian_attack :
3701: CALL 18952 0 0
3705: GO 3725
3707: LD_EXP 22
3711: DOUBLE
3712: EQUAL
3713: IFTRUE 3717
3715: GO 3724
3717: POP
// RussianAttack ( ) ; end ;
3718: CALL 7629 0 0
3722: GO 3725
3724: POP
// end ;
3725: PPOPN 1
3727: END
// every 9 9$30 trigger FilterAllUnits ( [ f_class , class_apeman ] ) < 9 and tick < 50 50$00 do
3728: LD_INT 25
3730: PUSH
3731: LD_INT 12
3733: PUSH
3734: EMPTY
3735: LIST
3736: LIST
3737: PPUSH
3738: CALL_OW 69
3742: PUSH
3743: LD_INT 9
3745: LESS
3746: PUSH
3747: LD_OWVAR 1
3751: PUSH
3752: LD_INT 105000
3754: LESS
3755: AND
3756: IFFALSE 3789
3758: GO 3760
3760: DISABLE
// begin enable ;
3761: ENABLE
// PrepareApeman2 ( 8 - ( FilterAllUnits ( [ f_class , class_apeman ] ) + 0 ) ) ;
3762: LD_INT 8
3764: PUSH
3765: LD_INT 25
3767: PUSH
3768: LD_INT 12
3770: PUSH
3771: EMPTY
3772: LIST
3773: LIST
3774: PPUSH
3775: CALL_OW 69
3779: PUSH
3780: LD_INT 0
3782: PLUS
3783: MINUS
3784: PPUSH
3785: CALL 2000 0 1
// end ;
3789: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
3790: LD_VAR 0 1
3794: PPUSH
3795: LD_VAR 0 2
3799: PPUSH
3800: LD_VAR 0 3
3804: PPUSH
3805: CALL 35679 0 3
// end ;
3809: PPOPN 3
3811: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
3812: LD_VAR 0 1
3816: PPUSH
3817: CALL 35687 0 1
// end ; end_of_file
3821: PPOPN 1
3823: END
// export ru_force , ru_skill , ru_cargo , ru_blist , ru_vlist , ru_amount , ru_time , ru_teleport_exit ; export function PrepareRussian ; var i , un , ru_depot , ru_factory , ru_teleport , ru_barracks , ru_bunkers , ru_buildings , ru_vehicles , ru_humans ; begin
3824: LD_INT 0
3826: PPUSH
3827: PPUSH
3828: PPUSH
3829: PPUSH
3830: PPUSH
3831: PPUSH
3832: PPUSH
3833: PPUSH
3834: PPUSH
3835: PPUSH
3836: PPUSH
// uc_side := 3 ;
3837: LD_ADDR_OWVAR 20
3841: PUSH
3842: LD_INT 3
3844: ST_TO_ADDR
// uc_nation := nation_russian ;
3845: LD_ADDR_OWVAR 21
3849: PUSH
3850: LD_INT 3
3852: ST_TO_ADDR
// ru_depot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
3853: LD_ADDR_VAR 0 4
3857: PUSH
3858: LD_INT 22
3860: PUSH
3861: LD_INT 3
3863: PUSH
3864: EMPTY
3865: LIST
3866: LIST
3867: PUSH
3868: LD_INT 30
3870: PUSH
3871: LD_INT 1
3873: PUSH
3874: EMPTY
3875: LIST
3876: LIST
3877: PUSH
3878: EMPTY
3879: LIST
3880: LIST
3881: PPUSH
3882: CALL_OW 69
3886: PUSH
3887: LD_INT 1
3889: ARRAY
3890: ST_TO_ADDR
// ru_factory := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3891: LD_ADDR_VAR 0 5
3895: PUSH
3896: LD_INT 22
3898: PUSH
3899: LD_INT 3
3901: PUSH
3902: EMPTY
3903: LIST
3904: LIST
3905: PUSH
3906: LD_INT 30
3908: PUSH
3909: LD_INT 3
3911: PUSH
3912: EMPTY
3913: LIST
3914: LIST
3915: PUSH
3916: EMPTY
3917: LIST
3918: LIST
3919: PPUSH
3920: CALL_OW 69
3924: PUSH
3925: LD_INT 1
3927: ARRAY
3928: ST_TO_ADDR
// ru_teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] ;
3929: LD_ADDR_VAR 0 6
3933: PUSH
3934: LD_INT 22
3936: PUSH
3937: LD_INT 3
3939: PUSH
3940: EMPTY
3941: LIST
3942: LIST
3943: PUSH
3944: LD_INT 30
3946: PUSH
3947: LD_INT 34
3949: PUSH
3950: EMPTY
3951: LIST
3952: LIST
3953: PUSH
3954: EMPTY
3955: LIST
3956: LIST
3957: PPUSH
3958: CALL_OW 69
3962: PUSH
3963: LD_INT 1
3965: ARRAY
3966: ST_TO_ADDR
// ru_bunkers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
3967: LD_ADDR_VAR 0 8
3971: PUSH
3972: LD_INT 22
3974: PUSH
3975: LD_INT 3
3977: PUSH
3978: EMPTY
3979: LIST
3980: LIST
3981: PUSH
3982: LD_INT 30
3984: PUSH
3985: LD_INT 33
3987: PUSH
3988: EMPTY
3989: LIST
3990: LIST
3991: PUSH
3992: EMPTY
3993: LIST
3994: LIST
3995: PPUSH
3996: CALL_OW 69
4000: ST_TO_ADDR
// ru_barracks := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
4001: LD_ADDR_VAR 0 7
4005: PUSH
4006: LD_INT 22
4008: PUSH
4009: LD_INT 3
4011: PUSH
4012: EMPTY
4013: LIST
4014: LIST
4015: PUSH
4016: LD_INT 30
4018: PUSH
4019: LD_INT 5
4021: PUSH
4022: EMPTY
4023: LIST
4024: LIST
4025: PUSH
4026: EMPTY
4027: LIST
4028: LIST
4029: PPUSH
4030: CALL_OW 69
4034: PUSH
4035: LD_INT 1
4037: ARRAY
4038: ST_TO_ADDR
// ru_blist := [ ] ;
4039: LD_ADDR_EXP 32
4043: PUSH
4044: EMPTY
4045: ST_TO_ADDR
// ru_vlist := [ ] ;
4046: LD_ADDR_EXP 33
4050: PUSH
4051: EMPTY
4052: ST_TO_ADDR
// ru_teleport_exit := [ 183 , 62 , 147 , 44 ] ;
4053: LD_ADDR_EXP 36
4057: PUSH
4058: LD_INT 183
4060: PUSH
4061: LD_INT 62
4063: PUSH
4064: LD_INT 147
4066: PUSH
4067: LD_INT 44
4069: PUSH
4070: EMPTY
4071: LIST
4072: LIST
4073: LIST
4074: LIST
4075: ST_TO_ADDR
// TeleportExit ( FilterAllUnits ( [ f_btype , b_teleport ] ) [ 1 ] , ru_teleport_exit [ 1 ] , ru_teleport_exit [ 2 ] ) ;
4076: LD_INT 30
4078: PUSH
4079: LD_INT 34
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: PPUSH
4086: CALL_OW 69
4090: PUSH
4091: LD_INT 1
4093: ARRAY
4094: PPUSH
4095: LD_EXP 36
4099: PUSH
4100: LD_INT 1
4102: ARRAY
4103: PPUSH
4104: LD_EXP 36
4108: PUSH
4109: LD_INT 2
4111: ARRAY
4112: PPUSH
4113: CALL_OW 243
// ru_amount := [ 4 , 5 , 6 ] [ Difficulty ] ;
4117: LD_ADDR_EXP 34
4121: PUSH
4122: LD_INT 4
4124: PUSH
4125: LD_INT 5
4127: PUSH
4128: LD_INT 6
4130: PUSH
4131: EMPTY
4132: LIST
4133: LIST
4134: LIST
4135: PUSH
4136: LD_OWVAR 67
4140: ARRAY
4141: ST_TO_ADDR
// SetResourceType ( GetBase ( ru_depot ) , mat_cans , 3000 ) ;
4142: LD_VAR 0 4
4146: PPUSH
4147: CALL_OW 274
4151: PPUSH
4152: LD_INT 1
4154: PPUSH
4155: LD_INT 3000
4157: PPUSH
4158: CALL_OW 277
// SetResourceType ( GetBase ( ru_depot ) , mat_oil , 300 ) ;
4162: LD_VAR 0 4
4166: PPUSH
4167: CALL_OW 274
4171: PPUSH
4172: LD_INT 2
4174: PPUSH
4175: LD_INT 300
4177: PPUSH
4178: CALL_OW 277
// hc_gallery :=  ;
4182: LD_ADDR_OWVAR 33
4186: PUSH
4187: LD_STRING 
4189: ST_TO_ADDR
// hc_name :=  ;
4190: LD_ADDR_OWVAR 26
4194: PUSH
4195: LD_STRING 
4197: ST_TO_ADDR
// hc_importance := 0 ;
4198: LD_ADDR_OWVAR 32
4202: PUSH
4203: LD_INT 0
4205: ST_TO_ADDR
// ru_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
4206: LD_ADDR_EXP 30
4210: PUSH
4211: LD_INT 5
4213: PUSH
4214: LD_INT 6
4216: PUSH
4217: LD_INT 7
4219: PUSH
4220: EMPTY
4221: LIST
4222: LIST
4223: LIST
4224: PUSH
4225: LD_OWVAR 67
4229: ARRAY
4230: ST_TO_ADDR
// for i = 1 to 6 do
4231: LD_ADDR_VAR 0 2
4235: PUSH
4236: DOUBLE
4237: LD_INT 1
4239: DEC
4240: ST_TO_ADDR
4241: LD_INT 6
4243: PUSH
4244: FOR_TO
4245: IFFALSE 4403
// begin PrepareHuman ( false , class_bazooker , ru_skill ) ;
4247: LD_INT 0
4249: PPUSH
4250: LD_INT 9
4252: PPUSH
4253: LD_EXP 30
4257: PPUSH
4258: CALL_OW 380
// un := CreateHuman ;
4262: LD_ADDR_VAR 0 3
4266: PUSH
4267: CALL_OW 44
4271: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_barracks ) ;
4272: LD_VAR 0 3
4276: PPUSH
4277: LD_VAR 0 7
4281: PPUSH
4282: CALL_OW 52
// PrepareHuman ( false , 4 , ru_skill ) ;
4286: LD_INT 0
4288: PPUSH
4289: LD_INT 4
4291: PPUSH
4292: LD_EXP 30
4296: PPUSH
4297: CALL_OW 380
// un := CreateHuman ;
4301: LD_ADDR_VAR 0 3
4305: PUSH
4306: CALL_OW 44
4310: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
4311: LD_VAR 0 3
4315: PPUSH
4316: LD_INT 24
4318: PPUSH
4319: CALL_OW 52
// PrepareHuman ( false , 3 , ru_skill ) ;
4323: LD_INT 0
4325: PPUSH
4326: LD_INT 3
4328: PPUSH
4329: LD_EXP 30
4333: PPUSH
4334: CALL_OW 380
// un := CreateHuman ;
4338: LD_ADDR_VAR 0 3
4342: PUSH
4343: CALL_OW 44
4347: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_factory ) ;
4348: LD_VAR 0 3
4352: PPUSH
4353: LD_VAR 0 5
4357: PPUSH
4358: CALL_OW 52
// PrepareHuman ( false , 2 , ru_skill ) ;
4362: LD_INT 0
4364: PPUSH
4365: LD_INT 2
4367: PPUSH
4368: LD_EXP 30
4372: PPUSH
4373: CALL_OW 380
// un := CreateHuman ;
4377: LD_ADDR_VAR 0 3
4381: PUSH
4382: CALL_OW 44
4386: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_depot ) ;
4387: LD_VAR 0 3
4391: PPUSH
4392: LD_VAR 0 4
4396: PPUSH
4397: CALL_OW 52
// end ;
4401: GO 4244
4403: POP
4404: POP
// if Difficulty > 1 then
4405: LD_OWVAR 67
4409: PUSH
4410: LD_INT 1
4412: GREATER
4413: IFFALSE 4446
// begin un := CreateBehemoth ( 3 , 160 , 36 , 3 ) ;
4415: LD_ADDR_VAR 0 3
4419: PUSH
4420: LD_INT 3
4422: PPUSH
4423: LD_INT 160
4425: PPUSH
4426: LD_INT 36
4428: PPUSH
4429: LD_INT 3
4431: PPUSH
4432: CALL 81474 0 4
4436: ST_TO_ADDR
// ComHold ( un ) ;
4437: LD_VAR 0 3
4441: PPUSH
4442: CALL_OW 140
// end ; russian_prepared := true ;
4446: LD_ADDR_EXP 2
4450: PUSH
4451: LD_INT 1
4453: ST_TO_ADDR
// ComConstruct ( ru_factory , ru_medium_wheeled , 3 , control_computer , ru_cargo_bay ) ;
4454: LD_VAR 0 5
4458: PPUSH
4459: LD_INT 21
4461: PPUSH
4462: LD_INT 3
4464: PPUSH
4465: LD_INT 3
4467: PPUSH
4468: LD_INT 51
4470: PPUSH
4471: CALL_OW 125
// end ;
4475: LD_VAR 0 1
4479: RET
// every 0 0$02 trigger FilterAllUnits ( [ f_side , 3 ] ) > 0 and russian_prepared do var ru_depot , ru_factory , ru_teleport , ru_bunkers , ru_buildings , ru_vehicles , ru_humans , ru_barracks , ru_engs , ru_mech , ru_sci , i , tmp , filter , cr , sib_bomb ;
4480: LD_INT 22
4482: PUSH
4483: LD_INT 3
4485: PUSH
4486: EMPTY
4487: LIST
4488: LIST
4489: PPUSH
4490: CALL_OW 69
4494: PUSH
4495: LD_INT 0
4497: GREATER
4498: PUSH
4499: LD_EXP 2
4503: AND
4504: IFFALSE 6654
4506: GO 4508
4508: DISABLE
4509: LD_INT 0
4511: PPUSH
4512: PPUSH
4513: PPUSH
4514: PPUSH
4515: PPUSH
4516: PPUSH
4517: PPUSH
4518: PPUSH
4519: PPUSH
4520: PPUSH
4521: PPUSH
4522: PPUSH
4523: PPUSH
4524: PPUSH
4525: PPUSH
4526: PPUSH
// begin enable ;
4527: ENABLE
// ru_depot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
4528: LD_ADDR_VAR 0 1
4532: PUSH
4533: LD_INT 22
4535: PUSH
4536: LD_INT 3
4538: PUSH
4539: EMPTY
4540: LIST
4541: LIST
4542: PUSH
4543: LD_INT 30
4545: PUSH
4546: LD_INT 1
4548: PUSH
4549: EMPTY
4550: LIST
4551: LIST
4552: PUSH
4553: EMPTY
4554: LIST
4555: LIST
4556: PPUSH
4557: CALL_OW 69
4561: PUSH
4562: LD_INT 1
4564: ARRAY
4565: ST_TO_ADDR
// ru_factory := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
4566: LD_ADDR_VAR 0 2
4570: PUSH
4571: LD_INT 22
4573: PUSH
4574: LD_INT 3
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: PUSH
4581: LD_INT 30
4583: PUSH
4584: LD_INT 3
4586: PUSH
4587: EMPTY
4588: LIST
4589: LIST
4590: PUSH
4591: EMPTY
4592: LIST
4593: LIST
4594: PPUSH
4595: CALL_OW 69
4599: PUSH
4600: LD_INT 1
4602: ARRAY
4603: ST_TO_ADDR
// ru_teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] ;
4604: LD_ADDR_VAR 0 3
4608: PUSH
4609: LD_INT 22
4611: PUSH
4612: LD_INT 3
4614: PUSH
4615: EMPTY
4616: LIST
4617: LIST
4618: PUSH
4619: LD_INT 30
4621: PUSH
4622: LD_INT 34
4624: PUSH
4625: EMPTY
4626: LIST
4627: LIST
4628: PUSH
4629: EMPTY
4630: LIST
4631: LIST
4632: PPUSH
4633: CALL_OW 69
4637: PUSH
4638: LD_INT 1
4640: ARRAY
4641: ST_TO_ADDR
// ru_bunkers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
4642: LD_ADDR_VAR 0 4
4646: PUSH
4647: LD_INT 22
4649: PUSH
4650: LD_INT 3
4652: PUSH
4653: EMPTY
4654: LIST
4655: LIST
4656: PUSH
4657: LD_INT 30
4659: PUSH
4660: LD_INT 33
4662: PUSH
4663: EMPTY
4664: LIST
4665: LIST
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: PPUSH
4671: CALL_OW 69
4675: ST_TO_ADDR
// ru_barracks := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
4676: LD_ADDR_VAR 0 8
4680: PUSH
4681: LD_INT 22
4683: PUSH
4684: LD_INT 3
4686: PUSH
4687: EMPTY
4688: LIST
4689: LIST
4690: PUSH
4691: LD_INT 30
4693: PUSH
4694: LD_INT 5
4696: PUSH
4697: EMPTY
4698: LIST
4699: LIST
4700: PUSH
4701: EMPTY
4702: LIST
4703: LIST
4704: PPUSH
4705: CALL_OW 69
4709: PUSH
4710: LD_INT 1
4712: ARRAY
4713: ST_TO_ADDR
// ru_buildings := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
4714: LD_ADDR_VAR 0 5
4718: PUSH
4719: LD_INT 22
4721: PUSH
4722: LD_INT 3
4724: PUSH
4725: EMPTY
4726: LIST
4727: LIST
4728: PUSH
4729: LD_INT 21
4731: PUSH
4732: LD_INT 3
4734: PUSH
4735: EMPTY
4736: LIST
4737: LIST
4738: PUSH
4739: EMPTY
4740: LIST
4741: LIST
4742: PPUSH
4743: CALL_OW 69
4747: ST_TO_ADDR
// ru_vehicles := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
4748: LD_ADDR_VAR 0 6
4752: PUSH
4753: LD_INT 22
4755: PUSH
4756: LD_INT 3
4758: PUSH
4759: EMPTY
4760: LIST
4761: LIST
4762: PUSH
4763: LD_INT 21
4765: PUSH
4766: LD_INT 2
4768: PUSH
4769: EMPTY
4770: LIST
4771: LIST
4772: PUSH
4773: EMPTY
4774: LIST
4775: LIST
4776: PPUSH
4777: CALL_OW 69
4781: ST_TO_ADDR
// ru_humans := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
4782: LD_ADDR_VAR 0 7
4786: PUSH
4787: LD_INT 22
4789: PUSH
4790: LD_INT 3
4792: PUSH
4793: EMPTY
4794: LIST
4795: LIST
4796: PUSH
4797: LD_INT 21
4799: PUSH
4800: LD_INT 1
4802: PUSH
4803: EMPTY
4804: LIST
4805: LIST
4806: PUSH
4807: EMPTY
4808: LIST
4809: LIST
4810: PPUSH
4811: CALL_OW 69
4815: ST_TO_ADDR
// ru_engs := UnitFilter ( ru_humans , [ f_class , 2 ] ) ;
4816: LD_ADDR_VAR 0 9
4820: PUSH
4821: LD_VAR 0 7
4825: PPUSH
4826: LD_INT 25
4828: PUSH
4829: LD_INT 2
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: PPUSH
4836: CALL_OW 72
4840: ST_TO_ADDR
// ru_mech := UnitFilter ( ru_humans , [ f_class , 3 ] ) ;
4841: LD_ADDR_VAR 0 10
4845: PUSH
4846: LD_VAR 0 7
4850: PPUSH
4851: LD_INT 25
4853: PUSH
4854: LD_INT 3
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: PPUSH
4861: CALL_OW 72
4865: ST_TO_ADDR
// ru_sci := UnitFilter ( ru_humans , [ f_class , 4 ] ) ;
4866: LD_ADDR_VAR 0 11
4870: PUSH
4871: LD_VAR 0 7
4875: PPUSH
4876: LD_INT 25
4878: PUSH
4879: LD_INT 4
4881: PUSH
4882: EMPTY
4883: LIST
4884: LIST
4885: PPUSH
4886: CALL_OW 72
4890: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) > 0 and ru_cargo = false then
4891: LD_INT 22
4893: PUSH
4894: LD_INT 3
4896: PUSH
4897: EMPTY
4898: LIST
4899: LIST
4900: PUSH
4901: LD_INT 34
4903: PUSH
4904: LD_INT 51
4906: PUSH
4907: EMPTY
4908: LIST
4909: LIST
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: PPUSH
4915: CALL_OW 69
4919: PUSH
4920: LD_INT 0
4922: GREATER
4923: PUSH
4924: LD_EXP 31
4928: PUSH
4929: LD_INT 0
4931: EQUAL
4932: AND
4933: IFFALSE 4973
// ru_cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
4935: LD_ADDR_EXP 31
4939: PUSH
4940: LD_INT 22
4942: PUSH
4943: LD_INT 3
4945: PUSH
4946: EMPTY
4947: LIST
4948: LIST
4949: PUSH
4950: LD_INT 34
4952: PUSH
4953: LD_INT 51
4955: PUSH
4956: EMPTY
4957: LIST
4958: LIST
4959: PUSH
4960: EMPTY
4961: LIST
4962: LIST
4963: PPUSH
4964: CALL_OW 69
4968: PUSH
4969: LD_INT 1
4971: ARRAY
4972: ST_TO_ADDR
// if ru_cargo then
4973: LD_EXP 31
4977: IFFALSE 5317
// begin if IsInArea ( ru_cargo , ru_base ) then
4979: LD_EXP 31
4983: PPUSH
4984: LD_INT 9
4986: PPUSH
4987: CALL_OW 308
4991: IFFALSE 5070
// begin if GetCargo ( ru_cargo , mat_cans ) = 0 then
4993: LD_EXP 31
4997: PPUSH
4998: LD_INT 1
5000: PPUSH
5001: CALL_OW 289
5005: PUSH
5006: LD_INT 0
5008: EQUAL
5009: IFFALSE 5027
// ComEnterUnit ( ru_cargo , ru_teleport ) else
5011: LD_EXP 31
5015: PPUSH
5016: LD_VAR 0 3
5020: PPUSH
5021: CALL_OW 120
5025: GO 5068
// if not HasTask ( ru_cargo ) then
5027: LD_EXP 31
5031: PPUSH
5032: CALL_OW 314
5036: NOT
5037: IFFALSE 5068
// ComMoveXY ( ru_cargo , GetX ( ru_depot ) , GetY ( ru_depot ) ) ;
5039: LD_EXP 31
5043: PPUSH
5044: LD_VAR 0 1
5048: PPUSH
5049: CALL_OW 250
5053: PPUSH
5054: LD_VAR 0 1
5058: PPUSH
5059: CALL_OW 251
5063: PPUSH
5064: CALL_OW 111
// end else
5068: GO 5317
// begin if not HasTask ( ru_cargo ) and GetCargo ( ru_cargo , mat_cans ) < 100 and not IsInArea ( ru_cargo , cargoa ) then
5070: LD_EXP 31
5074: PPUSH
5075: CALL_OW 314
5079: NOT
5080: PUSH
5081: LD_EXP 31
5085: PPUSH
5086: LD_INT 1
5088: PPUSH
5089: CALL_OW 289
5093: PUSH
5094: LD_INT 100
5096: LESS
5097: AND
5098: PUSH
5099: LD_EXP 31
5103: PPUSH
5104: LD_INT 10
5106: PPUSH
5107: CALL_OW 308
5111: NOT
5112: AND
5113: IFFALSE 5190
// begin cr := GetListOfCratesInArea ( ru_crates ) ;
5115: LD_ADDR_VAR 0 15
5119: PUSH
5120: LD_INT 11
5122: PPUSH
5123: CALL_OW 435
5127: ST_TO_ADDR
// if cr then
5128: LD_VAR 0 15
5132: IFFALSE 5163
// ComCollect ( ru_cargo , cr [ 1 ] , cr [ 2 ] ) else
5134: LD_EXP 31
5138: PPUSH
5139: LD_VAR 0 15
5143: PUSH
5144: LD_INT 1
5146: ARRAY
5147: PPUSH
5148: LD_VAR 0 15
5152: PUSH
5153: LD_INT 2
5155: ARRAY
5156: PPUSH
5157: CALL_OW 117
5161: GO 5190
// if not IsInArea ( ru_cargo , ru_crates ) then
5163: LD_EXP 31
5167: PPUSH
5168: LD_INT 11
5170: PPUSH
5171: CALL_OW 308
5175: NOT
5176: IFFALSE 5190
// ComMoveToArea ( ru_cargo , ru_crates ) ;
5178: LD_EXP 31
5182: PPUSH
5183: LD_INT 11
5185: PPUSH
5186: CALL_OW 113
// end ; if not HasTask ( ru_cargo ) and not IsInArea ( ru_cargo , cargoa ) and ( GetCargo ( ru_cargo , mat_cans ) = 100 or See ( your_side , ru_cargo ) ) then
5190: LD_EXP 31
5194: PPUSH
5195: CALL_OW 314
5199: NOT
5200: PUSH
5201: LD_EXP 31
5205: PPUSH
5206: LD_INT 10
5208: PPUSH
5209: CALL_OW 308
5213: NOT
5214: AND
5215: PUSH
5216: LD_EXP 31
5220: PPUSH
5221: LD_INT 1
5223: PPUSH
5224: CALL_OW 289
5228: PUSH
5229: LD_INT 100
5231: EQUAL
5232: PUSH
5233: LD_OWVAR 2
5237: PPUSH
5238: LD_EXP 31
5242: PPUSH
5243: CALL_OW 292
5247: OR
5248: AND
5249: IFFALSE 5263
// ComMoveToArea ( ru_cargo , cargoa ) ;
5251: LD_EXP 31
5255: PPUSH
5256: LD_INT 10
5258: PPUSH
5259: CALL_OW 113
// if IsInArea ( ru_cargo , cargoa ) and ru_barracks then
5263: LD_EXP 31
5267: PPUSH
5268: LD_INT 10
5270: PPUSH
5271: CALL_OW 308
5275: PUSH
5276: LD_VAR 0 8
5280: AND
5281: IFFALSE 5317
// ComSpaceShift ( UnitFilter ( ru_humans , [ f_class , class_bazooker ] ) [ 1 ] , 139 , 24 ) ;
5283: LD_VAR 0 7
5287: PPUSH
5288: LD_INT 25
5290: PUSH
5291: LD_INT 9
5293: PUSH
5294: EMPTY
5295: LIST
5296: LIST
5297: PPUSH
5298: CALL_OW 72
5302: PUSH
5303: LD_INT 1
5305: ARRAY
5306: PPUSH
5307: LD_INT 139
5309: PPUSH
5310: LD_INT 24
5312: PPUSH
5313: CALL_OW 153
// end ; end ; if ru_cargo = 0 and ru_factory and BuildingStatus ( ru_factory ) = bs_idle then
5317: LD_EXP 31
5321: PUSH
5322: LD_INT 0
5324: EQUAL
5325: PUSH
5326: LD_VAR 0 2
5330: AND
5331: PUSH
5332: LD_VAR 0 2
5336: PPUSH
5337: CALL_OW 461
5341: PUSH
5342: LD_INT 2
5344: EQUAL
5345: AND
5346: IFFALSE 5369
// ComConstruct ( ru_factory , ru_medium_wheeled , 3 , control_computer , ru_cargo_bay ) ;
5348: LD_VAR 0 2
5352: PPUSH
5353: LD_INT 21
5355: PPUSH
5356: LD_INT 3
5358: PPUSH
5359: LD_INT 3
5361: PPUSH
5362: LD_INT 51
5364: PPUSH
5365: CALL_OW 125
// if ru_factory and ru_vlist > 0 then
5369: LD_VAR 0 2
5373: PUSH
5374: LD_EXP 33
5378: PUSH
5379: LD_INT 0
5381: GREATER
5382: AND
5383: IFFALSE 5483
// begin if BuildingStatus ( ru_factory ) = bs_idle then
5385: LD_VAR 0 2
5389: PPUSH
5390: CALL_OW 461
5394: PUSH
5395: LD_INT 2
5397: EQUAL
5398: IFFALSE 5483
// begin ComConstruct ( ru_factory , ru_vlist [ 1 ] , ru_vlist [ 2 ] , ru_vlist [ 3 ] , ru_vlist [ 4 ] ) ;
5400: LD_VAR 0 2
5404: PPUSH
5405: LD_EXP 33
5409: PUSH
5410: LD_INT 1
5412: ARRAY
5413: PPUSH
5414: LD_EXP 33
5418: PUSH
5419: LD_INT 2
5421: ARRAY
5422: PPUSH
5423: LD_EXP 33
5427: PUSH
5428: LD_INT 3
5430: ARRAY
5431: PPUSH
5432: LD_EXP 33
5436: PUSH
5437: LD_INT 4
5439: ARRAY
5440: PPUSH
5441: CALL_OW 125
// for i = 1 to 4 do
5445: LD_ADDR_VAR 0 12
5449: PUSH
5450: DOUBLE
5451: LD_INT 1
5453: DEC
5454: ST_TO_ADDR
5455: LD_INT 4
5457: PUSH
5458: FOR_TO
5459: IFFALSE 5481
// ru_vlist := Delete ( ru_vlist , 1 ) ;
5461: LD_ADDR_EXP 33
5465: PUSH
5466: LD_EXP 33
5470: PPUSH
5471: LD_INT 1
5473: PPUSH
5474: CALL_OW 3
5478: ST_TO_ADDR
5479: GO 5458
5481: POP
5482: POP
// end ; end ; if BuildingStatus ( ru_lab ) = bs_idle and ru_sib_bomb then
5483: LD_INT 24
5485: PPUSH
5486: CALL_OW 461
5490: PUSH
5491: LD_INT 2
5493: EQUAL
5494: PUSH
5495: LD_EXP 4
5499: AND
5500: IFFALSE 5528
// if GetTech ( tech_sibfiss , 3 ) = state_enabled then
5502: LD_INT 25
5504: PPUSH
5505: LD_INT 3
5507: PPUSH
5508: CALL_OW 321
5512: PUSH
5513: LD_INT 1
5515: EQUAL
5516: IFFALSE 5528
// ComResearch ( ru_lab , tech_sibfiss ) ;
5518: LD_INT 24
5520: PPUSH
5521: LD_INT 25
5523: PPUSH
5524: CALL_OW 124
// if GetTech ( tech_sibfiss , 3 ) = state_researched and tick mod 5 5$00 = 0 then
5528: LD_INT 25
5530: PPUSH
5531: LD_INT 3
5533: PPUSH
5534: CALL_OW 321
5538: PUSH
5539: LD_INT 2
5541: EQUAL
5542: PUSH
5543: LD_OWVAR 1
5547: PUSH
5548: LD_INT 10500
5550: MOD
5551: PUSH
5552: LD_INT 0
5554: EQUAL
5555: AND
5556: IFFALSE 5594
// if BuildingStatus ( ru_factory ) = bs_idle then
5558: LD_VAR 0 2
5562: PPUSH
5563: CALL_OW 461
5567: PUSH
5568: LD_INT 2
5570: EQUAL
5571: IFFALSE 5594
// ComConstruct ( ru_factory , ru_heavy_wheeled , 3 , control_computer , ru_siberium_rocket ) ;
5573: LD_VAR 0 2
5577: PPUSH
5578: LD_INT 23
5580: PPUSH
5581: LD_INT 3
5583: PPUSH
5584: LD_INT 3
5586: PPUSH
5587: LD_INT 48
5589: PPUSH
5590: CALL_OW 125
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) > 0 then
5594: LD_INT 22
5596: PUSH
5597: LD_INT 3
5599: PUSH
5600: EMPTY
5601: LIST
5602: LIST
5603: PUSH
5604: LD_INT 34
5606: PUSH
5607: LD_INT 48
5609: PUSH
5610: EMPTY
5611: LIST
5612: LIST
5613: PUSH
5614: EMPTY
5615: LIST
5616: LIST
5617: PPUSH
5618: CALL_OW 69
5622: PUSH
5623: LD_INT 0
5625: GREATER
5626: IFFALSE 6000
// begin sib_bomb := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) [ 1 ] ;
5628: LD_ADDR_VAR 0 16
5632: PUSH
5633: LD_INT 22
5635: PUSH
5636: LD_INT 3
5638: PUSH
5639: EMPTY
5640: LIST
5641: LIST
5642: PUSH
5643: LD_INT 34
5645: PUSH
5646: LD_INT 48
5648: PUSH
5649: EMPTY
5650: LIST
5651: LIST
5652: PUSH
5653: EMPTY
5654: LIST
5655: LIST
5656: PPUSH
5657: CALL_OW 69
5661: PUSH
5662: LD_INT 1
5664: ARRAY
5665: ST_TO_ADDR
// if IsInArea ( sib_bomb , ru_base ) then
5666: LD_VAR 0 16
5670: PPUSH
5671: LD_INT 9
5673: PPUSH
5674: CALL_OW 308
5678: IFFALSE 5696
// ComEnterUnit ( sib_bomb , ru_teleport ) else
5680: LD_VAR 0 16
5684: PPUSH
5685: LD_VAR 0 3
5689: PPUSH
5690: CALL_OW 120
5694: GO 6000
// if not HasTask ( sib_bomb ) then
5696: LD_VAR 0 16
5700: PPUSH
5701: CALL_OW 314
5705: NOT
5706: IFFALSE 6000
// if GetLives ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) > 250 then
5708: LD_INT 22
5710: PUSH
5711: LD_OWVAR 2
5715: PUSH
5716: EMPTY
5717: LIST
5718: LIST
5719: PUSH
5720: LD_INT 30
5722: PUSH
5723: LD_INT 1
5725: PUSH
5726: EMPTY
5727: LIST
5728: LIST
5729: PUSH
5730: EMPTY
5731: LIST
5732: LIST
5733: PPUSH
5734: CALL_OW 69
5738: PUSH
5739: LD_INT 1
5741: ARRAY
5742: PPUSH
5743: CALL_OW 256
5747: PUSH
5748: LD_INT 250
5750: GREATER
5751: IFFALSE 5844
// ComAttackPlace ( sib_bomb , GetX ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) , GetY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ) else
5753: LD_VAR 0 16
5757: PPUSH
5758: LD_INT 22
5760: PUSH
5761: LD_OWVAR 2
5765: PUSH
5766: EMPTY
5767: LIST
5768: LIST
5769: PUSH
5770: LD_INT 30
5772: PUSH
5773: LD_INT 1
5775: PUSH
5776: EMPTY
5777: LIST
5778: LIST
5779: PUSH
5780: EMPTY
5781: LIST
5782: LIST
5783: PPUSH
5784: CALL_OW 69
5788: PUSH
5789: LD_INT 1
5791: ARRAY
5792: PPUSH
5793: CALL_OW 250
5797: PPUSH
5798: LD_INT 22
5800: PUSH
5801: LD_OWVAR 2
5805: PUSH
5806: EMPTY
5807: LIST
5808: LIST
5809: PUSH
5810: LD_INT 30
5812: PUSH
5813: LD_INT 1
5815: PUSH
5816: EMPTY
5817: LIST
5818: LIST
5819: PUSH
5820: EMPTY
5821: LIST
5822: LIST
5823: PPUSH
5824: CALL_OW 69
5828: PUSH
5829: LD_INT 1
5831: ARRAY
5832: PPUSH
5833: CALL_OW 251
5837: PPUSH
5838: CALL_OW 116
5842: GO 6000
// if FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) > 0 then
5844: LD_INT 22
5846: PUSH
5847: LD_OWVAR 2
5851: PUSH
5852: EMPTY
5853: LIST
5854: LIST
5855: PUSH
5856: LD_INT 21
5858: PUSH
5859: LD_INT 3
5861: PUSH
5862: EMPTY
5863: LIST
5864: LIST
5865: PUSH
5866: EMPTY
5867: LIST
5868: LIST
5869: PPUSH
5870: CALL_OW 69
5874: PUSH
5875: LD_INT 0
5877: GREATER
5878: IFFALSE 5971
// ComAttackPlace ( sib_bomb , GetX ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) [ 1 ] ) , GetY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) [ 1 ] ) ) else
5880: LD_VAR 0 16
5884: PPUSH
5885: LD_INT 22
5887: PUSH
5888: LD_OWVAR 2
5892: PUSH
5893: EMPTY
5894: LIST
5895: LIST
5896: PUSH
5897: LD_INT 21
5899: PUSH
5900: LD_INT 3
5902: PUSH
5903: EMPTY
5904: LIST
5905: LIST
5906: PUSH
5907: EMPTY
5908: LIST
5909: LIST
5910: PPUSH
5911: CALL_OW 69
5915: PUSH
5916: LD_INT 1
5918: ARRAY
5919: PPUSH
5920: CALL_OW 250
5924: PPUSH
5925: LD_INT 22
5927: PUSH
5928: LD_OWVAR 2
5932: PUSH
5933: EMPTY
5934: LIST
5935: LIST
5936: PUSH
5937: LD_INT 21
5939: PUSH
5940: LD_INT 3
5942: PUSH
5943: EMPTY
5944: LIST
5945: LIST
5946: PUSH
5947: EMPTY
5948: LIST
5949: LIST
5950: PPUSH
5951: CALL_OW 69
5955: PUSH
5956: LD_INT 1
5958: ARRAY
5959: PPUSH
5960: CALL_OW 251
5964: PPUSH
5965: CALL_OW 116
5969: GO 6000
// ComAttackPlace ( sib_bomb , GetX ( player_commander ) , GetY ( player_commander ) ) ;
5971: LD_VAR 0 16
5975: PPUSH
5976: LD_EXP 11
5980: PPUSH
5981: CALL_OW 250
5985: PPUSH
5986: LD_EXP 11
5990: PPUSH
5991: CALL_OW 251
5995: PPUSH
5996: CALL_OW 116
// end ; if ru_can_attack then
6000: LD_EXP 3
6004: IFFALSE 6152
// if ru_time > 0 0$00 then
6006: LD_EXP 35
6010: PUSH
6011: LD_INT 0
6013: GREATER
6014: IFFALSE 6032
// ru_time := ru_time - 0 0$03 else
6016: LD_ADDR_EXP 35
6020: PUSH
6021: LD_EXP 35
6025: PUSH
6026: LD_INT 105
6028: MINUS
6029: ST_TO_ADDR
6030: GO 6152
// begin ru_time := Rand ( 9 9$39 , 14 14$39 ) ;
6032: LD_ADDR_EXP 35
6036: PUSH
6037: LD_INT 20265
6039: PPUSH
6040: LD_INT 30765
6042: PPUSH
6043: CALL_OW 12
6047: ST_TO_ADDR
// for i = 1 to ru_amount do
6048: LD_ADDR_VAR 0 12
6052: PUSH
6053: DOUBLE
6054: LD_INT 1
6056: DEC
6057: ST_TO_ADDR
6058: LD_EXP 34
6062: PUSH
6063: FOR_TO
6064: IFFALSE 6150
// begin ru_vlist := ru_vlist ^ ru_heavy_wheeled ;
6066: LD_ADDR_EXP 33
6070: PUSH
6071: LD_EXP 33
6075: PUSH
6076: LD_INT 23
6078: ADD
6079: ST_TO_ADDR
// ru_vlist := ru_vlist ^ engine_siberite ;
6080: LD_ADDR_EXP 33
6084: PUSH
6085: LD_EXP 33
6089: PUSH
6090: LD_INT 3
6092: ADD
6093: ST_TO_ADDR
// ru_vlist := ru_vlist ^ control_computer ;
6094: LD_ADDR_EXP 33
6098: PUSH
6099: LD_EXP 33
6103: PUSH
6104: LD_INT 3
6106: ADD
6107: ST_TO_ADDR
// ru_vlist := ru_vlist ^ [ ru_heavy_gun , ru_rocket_launcher , ru_rocket ] [ MultiRand ( 1 , 2 , 3 ) ] ;
6108: LD_ADDR_EXP 33
6112: PUSH
6113: LD_EXP 33
6117: PUSH
6118: LD_INT 46
6120: PUSH
6121: LD_INT 45
6123: PUSH
6124: LD_INT 47
6126: PUSH
6127: EMPTY
6128: LIST
6129: LIST
6130: LIST
6131: PUSH
6132: LD_INT 1
6134: PPUSH
6135: LD_INT 2
6137: PPUSH
6138: LD_INT 3
6140: PPUSH
6141: CALL_OW 14
6145: ARRAY
6146: ADD
6147: ST_TO_ADDR
// end ;
6148: GO 6063
6150: POP
6151: POP
// end ; if UnitFilter ( ru_bunkers , [ f_bweapon , 0 ] ) > 0 then
6152: LD_VAR 0 4
6156: PPUSH
6157: LD_INT 35
6159: PUSH
6160: LD_INT 0
6162: PUSH
6163: EMPTY
6164: LIST
6165: LIST
6166: PPUSH
6167: CALL_OW 72
6171: PUSH
6172: LD_INT 0
6174: GREATER
6175: IFFALSE 6223
// if BuildingStatus ( ru_factory ) = bs_idle then
6177: LD_VAR 0 2
6181: PPUSH
6182: CALL_OW 461
6186: PUSH
6187: LD_INT 2
6189: EQUAL
6190: IFFALSE 6223
// ComPlaceWeapon ( UnitFilter ( ru_bunkers , [ f_bweapon , 0 ] ) [ 1 ] , ru_rocket ) ;
6192: LD_VAR 0 4
6196: PPUSH
6197: LD_INT 35
6199: PUSH
6200: LD_INT 0
6202: PUSH
6203: EMPTY
6204: LIST
6205: LIST
6206: PPUSH
6207: CALL_OW 72
6211: PUSH
6212: LD_INT 1
6214: ARRAY
6215: PPUSH
6216: LD_INT 47
6218: PPUSH
6219: CALL_OW 148
// if ru_force >= ru_amount then
6223: LD_EXP 29
6227: PUSH
6228: LD_EXP 34
6232: GREATEREQUAL
6233: IFFALSE 6244
// RaiseSailEvent ( event_russian_attack ) ;
6235: LD_EXP 22
6239: PPUSH
6240: CALL_OW 427
// if ru_engs > 0 then
6244: LD_VAR 0 9
6248: PUSH
6249: LD_INT 0
6251: GREATER
6252: IFFALSE 6654
// begin if UnitFilter ( ru_buildings , [ f_not , [ f_lives , 1000 ] ] ) > 0 then
6254: LD_VAR 0 5
6258: PPUSH
6259: LD_INT 3
6261: PUSH
6262: LD_INT 24
6264: PUSH
6265: LD_INT 1000
6267: PUSH
6268: EMPTY
6269: LIST
6270: LIST
6271: PUSH
6272: EMPTY
6273: LIST
6274: LIST
6275: PPUSH
6276: CALL_OW 72
6280: PUSH
6281: LD_INT 0
6283: GREATER
6284: IFFALSE 6439
// begin filter := UnitFilter ( ru_buildings , [ f_not , [ f_lives , 1000 ] ] ) ;
6286: LD_ADDR_VAR 0 14
6290: PUSH
6291: LD_VAR 0 5
6295: PPUSH
6296: LD_INT 3
6298: PUSH
6299: LD_INT 24
6301: PUSH
6302: LD_INT 1000
6304: PUSH
6305: EMPTY
6306: LIST
6307: LIST
6308: PUSH
6309: EMPTY
6310: LIST
6311: LIST
6312: PPUSH
6313: CALL_OW 72
6317: ST_TO_ADDR
// for i = 1 to ru_engs do
6318: LD_ADDR_VAR 0 12
6322: PUSH
6323: DOUBLE
6324: LD_INT 1
6326: DEC
6327: ST_TO_ADDR
6328: LD_VAR 0 9
6332: PUSH
6333: FOR_TO
6334: IFFALSE 6435
// begin if IsInUnit ( ru_engs [ i ] ) then
6336: LD_VAR 0 9
6340: PUSH
6341: LD_VAR 0 12
6345: ARRAY
6346: PPUSH
6347: CALL_OW 310
6351: IFFALSE 6370
// ComExitBuilding ( ru_engs [ i ] ) else
6353: LD_VAR 0 9
6357: PUSH
6358: LD_VAR 0 12
6362: ARRAY
6363: PPUSH
6364: CALL_OW 122
6368: GO 6433
// if not HasTask ( ru_engs [ i ] ) and GetLives ( ru_engs [ i ] ) > 600 then
6370: LD_VAR 0 9
6374: PUSH
6375: LD_VAR 0 12
6379: ARRAY
6380: PPUSH
6381: CALL_OW 314
6385: NOT
6386: PUSH
6387: LD_VAR 0 9
6391: PUSH
6392: LD_VAR 0 12
6396: ARRAY
6397: PPUSH
6398: CALL_OW 256
6402: PUSH
6403: LD_INT 600
6405: GREATER
6406: AND
6407: IFFALSE 6433
// ComRepairBuilding ( ru_engs [ i ] , filter [ 1 ] ) ;
6409: LD_VAR 0 9
6413: PUSH
6414: LD_VAR 0 12
6418: ARRAY
6419: PPUSH
6420: LD_VAR 0 14
6424: PUSH
6425: LD_INT 1
6427: ARRAY
6428: PPUSH
6429: CALL_OW 130
// end ;
6433: GO 6333
6435: POP
6436: POP
// end else
6437: GO 6654
// begin if ru_blist = 0 then
6439: LD_EXP 32
6443: PUSH
6444: LD_INT 0
6446: EQUAL
6447: IFFALSE 6529
// begin for i = 1 to ru_engs do
6449: LD_ADDR_VAR 0 12
6453: PUSH
6454: DOUBLE
6455: LD_INT 1
6457: DEC
6458: ST_TO_ADDR
6459: LD_VAR 0 9
6463: PUSH
6464: FOR_TO
6465: IFFALSE 6525
// if not HasTask ( ru_engs [ i ] ) and not IsInUnit ( ru_engs [ i ] ) then
6467: LD_VAR 0 9
6471: PUSH
6472: LD_VAR 0 12
6476: ARRAY
6477: PPUSH
6478: CALL_OW 314
6482: NOT
6483: PUSH
6484: LD_VAR 0 9
6488: PUSH
6489: LD_VAR 0 12
6493: ARRAY
6494: PPUSH
6495: CALL_OW 310
6499: NOT
6500: AND
6501: IFFALSE 6523
// ComEnterUnit ( ru_engs [ i ] , ru_depot ) ;
6503: LD_VAR 0 9
6507: PUSH
6508: LD_VAR 0 12
6512: ARRAY
6513: PPUSH
6514: LD_VAR 0 1
6518: PPUSH
6519: CALL_OW 120
6523: GO 6464
6525: POP
6526: POP
// end else
6527: GO 6654
// begin for i = 1 to ru_engs do
6529: LD_ADDR_VAR 0 12
6533: PUSH
6534: DOUBLE
6535: LD_INT 1
6537: DEC
6538: ST_TO_ADDR
6539: LD_VAR 0 9
6543: PUSH
6544: FOR_TO
6545: IFFALSE 6652
// begin if IsInUnit ( ru_engs [ i ] ) then
6547: LD_VAR 0 9
6551: PUSH
6552: LD_VAR 0 12
6556: ARRAY
6557: PPUSH
6558: CALL_OW 310
6562: IFFALSE 6581
// ComExitBuilding ( ru_engs [ i ] ) else
6564: LD_VAR 0 9
6568: PUSH
6569: LD_VAR 0 12
6573: ARRAY
6574: PPUSH
6575: CALL_OW 122
6579: GO 6650
// if not HasTask ( ru_engs [ i ] ) then
6581: LD_VAR 0 9
6585: PUSH
6586: LD_VAR 0 12
6590: ARRAY
6591: PPUSH
6592: CALL_OW 314
6596: NOT
6597: IFFALSE 6650
// ComBuild ( ru_engs [ i ] , ru_blist [ 1 ] , ru_blist [ 2 ] , ru_blist [ 3 ] , ru_blist [ 4 ] ) ;
6599: LD_VAR 0 9
6603: PUSH
6604: LD_VAR 0 12
6608: ARRAY
6609: PPUSH
6610: LD_EXP 32
6614: PUSH
6615: LD_INT 1
6617: ARRAY
6618: PPUSH
6619: LD_EXP 32
6623: PUSH
6624: LD_INT 2
6626: ARRAY
6627: PPUSH
6628: LD_EXP 32
6632: PUSH
6633: LD_INT 3
6635: ARRAY
6636: PPUSH
6637: LD_EXP 32
6641: PUSH
6642: LD_INT 4
6644: ARRAY
6645: PPUSH
6646: CALL_OW 145
// end ;
6650: GO 6544
6652: POP
6653: POP
// end ; end ; end ; end ;
6654: PPOPN 16
6656: END
// every 3 3$40 + 0 0$45 trigger russian_prepared and GetListOfCratesInArea ( ru_crates ) < 10 do
6657: LD_EXP 2
6661: PUSH
6662: LD_INT 11
6664: PPUSH
6665: CALL_OW 435
6669: PUSH
6670: LD_INT 10
6672: LESS
6673: AND
6674: IFFALSE 6737
6676: GO 6678
6678: DISABLE
// begin enable ;
6679: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , ru_crates , true ) ;
6680: LD_INT 1
6682: PPUSH
6683: LD_INT 5
6685: PPUSH
6686: CALL_OW 12
6690: PPUSH
6691: LD_INT 11
6693: PPUSH
6694: LD_INT 1
6696: PPUSH
6697: CALL_OW 55
// Wait ( Rand ( 0 0$43 , 1 1$00 ) ) ;
6701: LD_INT 1505
6703: PPUSH
6704: LD_INT 2100
6706: PPUSH
6707: CALL_OW 12
6711: PPUSH
6712: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 5 ) , ru_crates , true ) ;
6716: LD_INT 1
6718: PPUSH
6719: LD_INT 5
6721: PPUSH
6722: CALL_OW 12
6726: PPUSH
6727: LD_INT 11
6729: PPUSH
6730: LD_INT 1
6732: PPUSH
6733: CALL_OW 55
// end ;
6737: END
// every 15 15$00 + 25 25$00 trigger not ru_sib_bomb do var i , tmp ;
6738: LD_EXP 4
6742: NOT
6743: IFFALSE 6858
6745: GO 6747
6747: DISABLE
6748: LD_INT 0
6750: PPUSH
6751: PPUSH
// begin enable ;
6752: ENABLE
// i := Rand ( 0 , 100 ) ;
6753: LD_ADDR_VAR 0 1
6757: PUSH
6758: LD_INT 0
6760: PPUSH
6761: LD_INT 100
6763: PPUSH
6764: CALL_OW 12
6768: ST_TO_ADDR
// case your_side of 1 :
6769: LD_OWVAR 2
6773: PUSH
6774: LD_INT 1
6776: DOUBLE
6777: EQUAL
6778: IFTRUE 6782
6780: GO 6793
6782: POP
// tmp := 10 ; 2 :
6783: LD_ADDR_VAR 0 2
6787: PUSH
6788: LD_INT 10
6790: ST_TO_ADDR
6791: GO 6832
6793: LD_INT 2
6795: DOUBLE
6796: EQUAL
6797: IFTRUE 6801
6799: GO 6812
6801: POP
// tmp := 0 ; 7 :
6802: LD_ADDR_VAR 0 2
6806: PUSH
6807: LD_INT 0
6809: ST_TO_ADDR
6810: GO 6832
6812: LD_INT 7
6814: DOUBLE
6815: EQUAL
6816: IFTRUE 6820
6818: GO 6831
6820: POP
// tmp := 15 ; end ;
6821: LD_ADDR_VAR 0 2
6825: PUSH
6826: LD_INT 15
6828: ST_TO_ADDR
6829: GO 6832
6831: POP
// if i < chance_to_bomb + tmp then
6832: LD_VAR 0 1
6836: PUSH
6837: LD_EXP 5
6841: PUSH
6842: LD_VAR 0 2
6846: PLUS
6847: LESS
6848: IFFALSE 6858
// ru_sib_bomb := true ;
6850: LD_ADDR_EXP 4
6854: PUSH
6855: LD_INT 1
6857: ST_TO_ADDR
// end ;
6858: PPOPN 2
6860: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_weapon , us_siberium_rocket ] ] ) do
6861: LD_INT 22
6863: PUSH
6864: LD_OWVAR 2
6868: PUSH
6869: EMPTY
6870: LIST
6871: LIST
6872: PUSH
6873: LD_INT 34
6875: PUSH
6876: LD_INT 8
6878: PUSH
6879: EMPTY
6880: LIST
6881: LIST
6882: PUSH
6883: EMPTY
6884: LIST
6885: LIST
6886: PPUSH
6887: CALL_OW 69
6891: IFFALSE 6904
6893: GO 6895
6895: DISABLE
// begin ru_sib_bomb := true ;
6896: LD_ADDR_EXP 4
6900: PUSH
6901: LD_INT 1
6903: ST_TO_ADDR
// end ;
6904: END
// every 10 10$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) do var i ;
6905: LD_INT 22
6907: PUSH
6908: LD_INT 3
6910: PUSH
6911: EMPTY
6912: LIST
6913: LIST
6914: PUSH
6915: LD_INT 30
6917: PUSH
6918: LD_INT 34
6920: PUSH
6921: EMPTY
6922: LIST
6923: LIST
6924: PUSH
6925: EMPTY
6926: LIST
6927: LIST
6928: PPUSH
6929: CALL_OW 69
6933: IFFALSE 7032
6935: GO 6937
6937: DISABLE
6938: LD_INT 0
6940: PPUSH
// begin enable ;
6941: ENABLE
// i := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
6942: LD_ADDR_VAR 0 1
6946: PUSH
6947: LD_INT 1
6949: PUSH
6950: LD_INT 3
6952: PUSH
6953: EMPTY
6954: LIST
6955: LIST
6956: PUSH
6957: LD_INT 1
6959: PPUSH
6960: LD_INT 2
6962: PPUSH
6963: CALL_OW 12
6967: ARRAY
6968: ST_TO_ADDR
// TeleportExit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] , ru_teleport_exit [ i ] , ru_teleport_exit [ i + 1 ] ) ;
6969: LD_INT 22
6971: PUSH
6972: LD_INT 3
6974: PUSH
6975: EMPTY
6976: LIST
6977: LIST
6978: PUSH
6979: LD_INT 30
6981: PUSH
6982: LD_INT 34
6984: PUSH
6985: EMPTY
6986: LIST
6987: LIST
6988: PUSH
6989: EMPTY
6990: LIST
6991: LIST
6992: PPUSH
6993: CALL_OW 69
6997: PUSH
6998: LD_INT 1
7000: ARRAY
7001: PPUSH
7002: LD_EXP 36
7006: PUSH
7007: LD_VAR 0 1
7011: ARRAY
7012: PPUSH
7013: LD_EXP 36
7017: PUSH
7018: LD_VAR 0 1
7022: PUSH
7023: LD_INT 1
7025: PLUS
7026: ARRAY
7027: PPUSH
7028: CALL_OW 243
// end ;
7032: PPOPN 1
7034: END
// every 12 12$00 trigger tick >= [ 28 28$00 , 25 25$00 ] [ Difficulty - 1 ] and Difficulty > 1 and FilterAllUnits ( [ f_side , 3 ] ) do var i , un , tmp , p , path ;
7035: LD_OWVAR 1
7039: PUSH
7040: LD_INT 58800
7042: PUSH
7043: LD_INT 52500
7045: PUSH
7046: EMPTY
7047: LIST
7048: LIST
7049: PUSH
7050: LD_OWVAR 67
7054: PUSH
7055: LD_INT 1
7057: MINUS
7058: ARRAY
7059: GREATEREQUAL
7060: PUSH
7061: LD_OWVAR 67
7065: PUSH
7066: LD_INT 1
7068: GREATER
7069: AND
7070: PUSH
7071: LD_INT 22
7073: PUSH
7074: LD_INT 3
7076: PUSH
7077: EMPTY
7078: LIST
7079: LIST
7080: PPUSH
7081: CALL_OW 69
7085: AND
7086: IFFALSE 7508
7088: GO 7090
7090: DISABLE
7091: LD_INT 0
7093: PPUSH
7094: PPUSH
7095: PPUSH
7096: PPUSH
7097: PPUSH
// begin enable ;
7098: ENABLE
// if tick > 60 60$00 then
7099: LD_OWVAR 1
7103: PUSH
7104: LD_INT 126000
7106: GREATER
7107: IFFALSE 7110
// disable ;
7109: DISABLE
// tmp := [ ] ;
7110: LD_ADDR_VAR 0 3
7114: PUSH
7115: EMPTY
7116: ST_TO_ADDR
// for i := 1 to 8 do
7117: LD_ADDR_VAR 0 1
7121: PUSH
7122: DOUBLE
7123: LD_INT 1
7125: DEC
7126: ST_TO_ADDR
7127: LD_INT 8
7129: PUSH
7130: FOR_TO
7131: IFFALSE 7290
// begin uc_side := 6 ;
7133: LD_ADDR_OWVAR 20
7137: PUSH
7138: LD_INT 6
7140: ST_TO_ADDR
// uc_nation := 3 ;
7141: LD_ADDR_OWVAR 21
7145: PUSH
7146: LD_INT 3
7148: ST_TO_ADDR
// vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod 3 + 1 ] ;
7149: LD_ADDR_OWVAR 37
7153: PUSH
7154: LD_INT 21
7156: PUSH
7157: LD_INT 23
7159: PUSH
7160: LD_INT 24
7162: PUSH
7163: EMPTY
7164: LIST
7165: LIST
7166: LIST
7167: PUSH
7168: LD_VAR 0 1
7172: PUSH
7173: LD_INT 3
7175: MOD
7176: PUSH
7177: LD_INT 1
7179: PLUS
7180: ARRAY
7181: ST_TO_ADDR
// vc_engine := engine_siberite ;
7182: LD_ADDR_OWVAR 39
7186: PUSH
7187: LD_INT 3
7189: ST_TO_ADDR
// vc_control := control_computer ;
7190: LD_ADDR_OWVAR 38
7194: PUSH
7195: LD_INT 3
7197: ST_TO_ADDR
// vc_weapon := [ ru_rocket_launcher , ru_flamethrower , ru_rocket ] [ i mod 3 + 1 ] ;
7198: LD_ADDR_OWVAR 40
7202: PUSH
7203: LD_INT 45
7205: PUSH
7206: LD_INT 93
7208: PUSH
7209: LD_INT 47
7211: PUSH
7212: EMPTY
7213: LIST
7214: LIST
7215: LIST
7216: PUSH
7217: LD_VAR 0 1
7221: PUSH
7222: LD_INT 3
7224: MOD
7225: PUSH
7226: LD_INT 1
7228: PLUS
7229: ARRAY
7230: ST_TO_ADDR
// un := CreateVehicle ;
7231: LD_ADDR_VAR 0 2
7235: PUSH
7236: CALL_OW 45
7240: ST_TO_ADDR
// SetDir ( un , 2 ) ;
7241: LD_VAR 0 2
7245: PPUSH
7246: LD_INT 2
7248: PPUSH
7249: CALL_OW 233
// PlaceUnitArea ( un , start_north , false ) ;
7253: LD_VAR 0 2
7257: PPUSH
7258: LD_INT 1
7260: PPUSH
7261: LD_INT 0
7263: PPUSH
7264: CALL_OW 49
// tmp := Join ( tmp , un ) ;
7268: LD_ADDR_VAR 0 3
7272: PUSH
7273: LD_VAR 0 3
7277: PPUSH
7278: LD_VAR 0 2
7282: PPUSH
7283: CALL 78013 0 2
7287: ST_TO_ADDR
// end ;
7288: GO 7130
7290: POP
7291: POP
// if FilterAllUnits ( [ [ f_side , your_side ] , [ f_distxy , 58 , 15 , 18 ] ] ) > 1 then
7292: LD_INT 22
7294: PUSH
7295: LD_OWVAR 2
7299: PUSH
7300: EMPTY
7301: LIST
7302: LIST
7303: PUSH
7304: LD_INT 92
7306: PUSH
7307: LD_INT 58
7309: PUSH
7310: LD_INT 15
7312: PUSH
7313: LD_INT 18
7315: PUSH
7316: EMPTY
7317: LIST
7318: LIST
7319: LIST
7320: LIST
7321: PUSH
7322: EMPTY
7323: LIST
7324: LIST
7325: PPUSH
7326: CALL_OW 69
7330: PUSH
7331: LD_INT 1
7333: GREATER
7334: IFFALSE 7346
// p := 2 else
7336: LD_ADDR_VAR 0 4
7340: PUSH
7341: LD_INT 2
7343: ST_TO_ADDR
7344: GO 7354
// p := 1 ;
7346: LD_ADDR_VAR 0 4
7350: PUSH
7351: LD_INT 1
7353: ST_TO_ADDR
// case p of 1 :
7354: LD_VAR 0 4
7358: PUSH
7359: LD_INT 1
7361: DOUBLE
7362: EQUAL
7363: IFTRUE 7367
7365: GO 7432
7367: POP
// path := [ [ 29 , 29 ] , [ 49 , 70 ] , [ 49 , 70 ] , [ 61 , 110 ] , [ 74 , 129 ] ] ; 2 :
7368: LD_ADDR_VAR 0 5
7372: PUSH
7373: LD_INT 29
7375: PUSH
7376: LD_INT 29
7378: PUSH
7379: EMPTY
7380: LIST
7381: LIST
7382: PUSH
7383: LD_INT 49
7385: PUSH
7386: LD_INT 70
7388: PUSH
7389: EMPTY
7390: LIST
7391: LIST
7392: PUSH
7393: LD_INT 49
7395: PUSH
7396: LD_INT 70
7398: PUSH
7399: EMPTY
7400: LIST
7401: LIST
7402: PUSH
7403: LD_INT 61
7405: PUSH
7406: LD_INT 110
7408: PUSH
7409: EMPTY
7410: LIST
7411: LIST
7412: PUSH
7413: LD_INT 74
7415: PUSH
7416: LD_INT 129
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: LIST
7427: LIST
7428: LIST
7429: ST_TO_ADDR
7430: GO 7484
7432: LD_INT 2
7434: DOUBLE
7435: EQUAL
7436: IFTRUE 7440
7438: GO 7483
7440: POP
// path := [ [ 24 , 23 ] , [ 49 , 39 ] , [ 52 , 27 ] ] ; end ;
7441: LD_ADDR_VAR 0 5
7445: PUSH
7446: LD_INT 24
7448: PUSH
7449: LD_INT 23
7451: PUSH
7452: EMPTY
7453: LIST
7454: LIST
7455: PUSH
7456: LD_INT 49
7458: PUSH
7459: LD_INT 39
7461: PUSH
7462: EMPTY
7463: LIST
7464: LIST
7465: PUSH
7466: LD_INT 52
7468: PUSH
7469: LD_INT 27
7471: PUSH
7472: EMPTY
7473: LIST
7474: LIST
7475: PUSH
7476: EMPTY
7477: LIST
7478: LIST
7479: LIST
7480: ST_TO_ADDR
7481: GO 7484
7483: POP
// repeat wait ( 0 0$1 ) ;
7484: LD_INT 35
7486: PPUSH
7487: CALL_OW 67
// until not AgressiveMove ( tmp , path ) ;
7491: LD_VAR 0 3
7495: PPUSH
7496: LD_VAR 0 5
7500: PPUSH
7501: CALL 80617 0 2
7505: NOT
7506: IFFALSE 7484
// end ;
7508: PPOPN 5
7510: END
// every 30 30$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) do var ru_depot ;
7511: LD_INT 22
7513: PUSH
7514: LD_INT 3
7516: PUSH
7517: EMPTY
7518: LIST
7519: LIST
7520: PUSH
7521: LD_INT 30
7523: PUSH
7524: LD_INT 1
7526: PUSH
7527: EMPTY
7528: LIST
7529: LIST
7530: PUSH
7531: EMPTY
7532: LIST
7533: LIST
7534: PPUSH
7535: CALL_OW 69
7539: IFFALSE 7626
7541: GO 7543
7543: DISABLE
7544: LD_INT 0
7546: PPUSH
// begin enable ;
7547: ENABLE
// ru_depot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
7548: LD_ADDR_VAR 0 1
7552: PUSH
7553: LD_INT 22
7555: PUSH
7556: LD_INT 3
7558: PUSH
7559: EMPTY
7560: LIST
7561: LIST
7562: PUSH
7563: LD_INT 30
7565: PUSH
7566: LD_INT 1
7568: PUSH
7569: EMPTY
7570: LIST
7571: LIST
7572: PUSH
7573: EMPTY
7574: LIST
7575: LIST
7576: PPUSH
7577: CALL_OW 69
7581: PUSH
7582: LD_INT 1
7584: ARRAY
7585: ST_TO_ADDR
// AddResourceType ( GetBase ( ru_depot ) , mat_cans , 6000 ) ;
7586: LD_VAR 0 1
7590: PPUSH
7591: CALL_OW 274
7595: PPUSH
7596: LD_INT 1
7598: PPUSH
7599: LD_INT 6000
7601: PPUSH
7602: CALL_OW 276
// AddResourceType ( GetBase ( ru_depot ) , mat_oil , 600 ) ;
7606: LD_VAR 0 1
7610: PPUSH
7611: CALL_OW 274
7615: PPUSH
7616: LD_INT 2
7618: PPUSH
7619: LD_INT 600
7621: PPUSH
7622: CALL_OW 276
// end ;
7626: PPOPN 1
7628: END
// export function RussianAttack ( ) ; var path , units , p , i , teleport ; begin
7629: LD_INT 0
7631: PPUSH
7632: PPUSH
7633: PPUSH
7634: PPUSH
7635: PPUSH
7636: PPUSH
// units := ru_force ;
7637: LD_ADDR_VAR 0 3
7641: PUSH
7642: LD_EXP 29
7646: ST_TO_ADDR
// teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) ;
7647: LD_ADDR_VAR 0 6
7651: PUSH
7652: LD_INT 22
7654: PUSH
7655: LD_INT 3
7657: PUSH
7658: EMPTY
7659: LIST
7660: LIST
7661: PUSH
7662: LD_INT 30
7664: PUSH
7665: LD_INT 34
7667: PUSH
7668: EMPTY
7669: LIST
7670: LIST
7671: PUSH
7672: EMPTY
7673: LIST
7674: LIST
7675: PPUSH
7676: CALL_OW 69
7680: ST_TO_ADDR
// ru_force := [ ] ;
7681: LD_ADDR_EXP 29
7685: PUSH
7686: EMPTY
7687: ST_TO_ADDR
// if not teleport then
7688: LD_VAR 0 6
7692: NOT
7693: IFFALSE 7735
// begin for i in units do
7695: LD_ADDR_VAR 0 5
7699: PUSH
7700: LD_VAR 0 3
7704: PUSH
7705: FOR_IN
7706: IFFALSE 7731
// TeleportUnit ( i , 150 , 65 , 12 , true ) ;
7708: LD_VAR 0 5
7712: PPUSH
7713: LD_INT 150
7715: PPUSH
7716: LD_INT 65
7718: PPUSH
7719: LD_INT 12
7721: PPUSH
7722: LD_INT 1
7724: PPUSH
7725: CALL_OW 483
7729: GO 7705
7731: POP
7732: POP
// end else
7733: GO 7830
// begin repeat for i = 1 to units do
7735: LD_ADDR_VAR 0 5
7739: PUSH
7740: DOUBLE
7741: LD_INT 1
7743: DEC
7744: ST_TO_ADDR
7745: LD_VAR 0 3
7749: PUSH
7750: FOR_TO
7751: IFFALSE 7799
// if IsInArea ( units [ i ] , ru_base ) then
7753: LD_VAR 0 3
7757: PUSH
7758: LD_VAR 0 5
7762: ARRAY
7763: PPUSH
7764: LD_INT 9
7766: PPUSH
7767: CALL_OW 308
7771: IFFALSE 7797
// ComEnterUnit ( units [ i ] , teleport [ 1 ] ) ;
7773: LD_VAR 0 3
7777: PUSH
7778: LD_VAR 0 5
7782: ARRAY
7783: PPUSH
7784: LD_VAR 0 6
7788: PUSH
7789: LD_INT 1
7791: ARRAY
7792: PPUSH
7793: CALL_OW 120
7797: GO 7750
7799: POP
7800: POP
// wait ( 0 0$10 ) ;
7801: LD_INT 350
7803: PPUSH
7804: CALL_OW 67
// until not UnitFilter ( units , [ f_inarea , ru_base ] ) ;
7808: LD_VAR 0 3
7812: PPUSH
7813: LD_INT 95
7815: PUSH
7816: LD_INT 9
7818: PUSH
7819: EMPTY
7820: LIST
7821: LIST
7822: PPUSH
7823: CALL_OW 72
7827: NOT
7828: IFFALSE 7735
// end ; p := rand ( 1 , 2 ) ;
7830: LD_ADDR_VAR 0 4
7834: PUSH
7835: LD_INT 1
7837: PPUSH
7838: LD_INT 2
7840: PPUSH
7841: CALL_OW 12
7845: ST_TO_ADDR
// case p of 1 :
7846: LD_VAR 0 4
7850: PUSH
7851: LD_INT 1
7853: DOUBLE
7854: EQUAL
7855: IFTRUE 7859
7857: GO 7913
7859: POP
// path := [ [ 159 , 71 ] , [ 152 , 99 ] , [ 107 , 119 ] , [ 104 , 127 ] ] ; 2 :
7860: LD_ADDR_VAR 0 2
7864: PUSH
7865: LD_INT 159
7867: PUSH
7868: LD_INT 71
7870: PUSH
7871: EMPTY
7872: LIST
7873: LIST
7874: PUSH
7875: LD_INT 152
7877: PUSH
7878: LD_INT 99
7880: PUSH
7881: EMPTY
7882: LIST
7883: LIST
7884: PUSH
7885: LD_INT 107
7887: PUSH
7888: LD_INT 119
7890: PUSH
7891: EMPTY
7892: LIST
7893: LIST
7894: PUSH
7895: LD_INT 104
7897: PUSH
7898: LD_INT 127
7900: PUSH
7901: EMPTY
7902: LIST
7903: LIST
7904: PUSH
7905: EMPTY
7906: LIST
7907: LIST
7908: LIST
7909: LIST
7910: ST_TO_ADDR
7911: GO 7976
7913: LD_INT 2
7915: DOUBLE
7916: EQUAL
7917: IFTRUE 7921
7919: GO 7975
7921: POP
// path := [ [ 116 , 36 ] , [ 91 , 52 ] , [ 53 , 67 ] , [ 58 , 107 ] ] ; end ;
7922: LD_ADDR_VAR 0 2
7926: PUSH
7927: LD_INT 116
7929: PUSH
7930: LD_INT 36
7932: PUSH
7933: EMPTY
7934: LIST
7935: LIST
7936: PUSH
7937: LD_INT 91
7939: PUSH
7940: LD_INT 52
7942: PUSH
7943: EMPTY
7944: LIST
7945: LIST
7946: PUSH
7947: LD_INT 53
7949: PUSH
7950: LD_INT 67
7952: PUSH
7953: EMPTY
7954: LIST
7955: LIST
7956: PUSH
7957: LD_INT 58
7959: PUSH
7960: LD_INT 107
7962: PUSH
7963: EMPTY
7964: LIST
7965: LIST
7966: PUSH
7967: EMPTY
7968: LIST
7969: LIST
7970: LIST
7971: LIST
7972: ST_TO_ADDR
7973: GO 7976
7975: POP
// if FilterAllUnits ( [ f_side , 7 ] ) and p > 1 then
7976: LD_INT 22
7978: PUSH
7979: LD_INT 7
7981: PUSH
7982: EMPTY
7983: LIST
7984: LIST
7985: PPUSH
7986: CALL_OW 69
7990: PUSH
7991: LD_VAR 0 4
7995: PUSH
7996: LD_INT 1
7998: GREATER
7999: AND
8000: IFFALSE 8031
// path := [ [ 116 , 36 ] , [ 91 , 52 ] ] ;
8002: LD_ADDR_VAR 0 2
8006: PUSH
8007: LD_INT 116
8009: PUSH
8010: LD_INT 36
8012: PUSH
8013: EMPTY
8014: LIST
8015: LIST
8016: PUSH
8017: LD_INT 91
8019: PUSH
8020: LD_INT 52
8022: PUSH
8023: EMPTY
8024: LIST
8025: LIST
8026: PUSH
8027: EMPTY
8028: LIST
8029: LIST
8030: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8031: LD_INT 35
8033: PPUSH
8034: CALL_OW 67
// until not AgressiveMove ( units , path ) ;
8038: LD_VAR 0 3
8042: PPUSH
8043: LD_VAR 0 2
8047: PPUSH
8048: CALL 80617 0 2
8052: NOT
8053: IFFALSE 8031
// end ; end_of_file
8055: LD_VAR 0 1
8059: RET
// export function RemoveLegion ; var i ; begin
8060: LD_INT 0
8062: PPUSH
8063: PPUSH
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
8064: LD_ADDR_VAR 0 2
8068: PUSH
8069: LD_INT 22
8071: PUSH
8072: LD_INT 8
8074: PUSH
8075: EMPTY
8076: LIST
8077: LIST
8078: PPUSH
8079: CALL_OW 69
8083: PUSH
8084: FOR_IN
8085: IFFALSE 8098
// RemoveUnit ( i ) ;
8087: LD_VAR 0 2
8091: PPUSH
8092: CALL_OW 64
8096: GO 8084
8098: POP
8099: POP
// end ;
8100: LD_VAR 0 1
8104: RET
// export legion_force , legion_skill , legion_mines , legion_blist , legion_vlist , legion_enemy ; export function PrepareLegion ; var un , i , tmp , veh , l_depot , p , l_factory , l_lab , l_towers ; begin
8105: LD_INT 0
8107: PPUSH
8108: PPUSH
8109: PPUSH
8110: PPUSH
8111: PPUSH
8112: PPUSH
8113: PPUSH
8114: PPUSH
8115: PPUSH
8116: PPUSH
// l_depot := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
8117: LD_ADDR_VAR 0 6
8121: PUSH
8122: LD_INT 22
8124: PUSH
8125: LD_INT 8
8127: PUSH
8128: EMPTY
8129: LIST
8130: LIST
8131: PUSH
8132: LD_INT 30
8134: PUSH
8135: LD_INT 1
8137: PUSH
8138: EMPTY
8139: LIST
8140: LIST
8141: PUSH
8142: EMPTY
8143: LIST
8144: LIST
8145: PPUSH
8146: CALL_OW 69
8150: PUSH
8151: LD_INT 1
8153: ARRAY
8154: ST_TO_ADDR
// l_factory := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
8155: LD_ADDR_VAR 0 8
8159: PUSH
8160: LD_INT 22
8162: PUSH
8163: LD_INT 8
8165: PUSH
8166: EMPTY
8167: LIST
8168: LIST
8169: PUSH
8170: LD_INT 30
8172: PUSH
8173: LD_INT 3
8175: PUSH
8176: EMPTY
8177: LIST
8178: LIST
8179: PUSH
8180: EMPTY
8181: LIST
8182: LIST
8183: PPUSH
8184: CALL_OW 69
8188: PUSH
8189: LD_INT 1
8191: ARRAY
8192: ST_TO_ADDR
// l_lab := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ;
8193: LD_ADDR_VAR 0 9
8197: PUSH
8198: LD_INT 22
8200: PUSH
8201: LD_INT 8
8203: PUSH
8204: EMPTY
8205: LIST
8206: LIST
8207: PUSH
8208: LD_INT 2
8210: PUSH
8211: LD_INT 30
8213: PUSH
8214: LD_INT 6
8216: PUSH
8217: EMPTY
8218: LIST
8219: LIST
8220: PUSH
8221: LD_INT 30
8223: PUSH
8224: LD_INT 8
8226: PUSH
8227: EMPTY
8228: LIST
8229: LIST
8230: PUSH
8231: EMPTY
8232: LIST
8233: LIST
8234: LIST
8235: PUSH
8236: EMPTY
8237: LIST
8238: LIST
8239: PPUSH
8240: CALL_OW 69
8244: PUSH
8245: LD_INT 1
8247: ARRAY
8248: ST_TO_ADDR
// l_towers := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) ;
8249: LD_ADDR_VAR 0 10
8253: PUSH
8254: LD_INT 22
8256: PUSH
8257: LD_INT 8
8259: PUSH
8260: EMPTY
8261: LIST
8262: LIST
8263: PUSH
8264: LD_INT 30
8266: PUSH
8267: LD_INT 32
8269: PUSH
8270: EMPTY
8271: LIST
8272: LIST
8273: PUSH
8274: EMPTY
8275: LIST
8276: LIST
8277: PPUSH
8278: CALL_OW 69
8282: ST_TO_ADDR
// uc_side := 8 ;
8283: LD_ADDR_OWVAR 20
8287: PUSH
8288: LD_INT 8
8290: ST_TO_ADDR
// uc_nation := nation_arabian ;
8291: LD_ADDR_OWVAR 21
8295: PUSH
8296: LD_INT 2
8298: ST_TO_ADDR
// legion_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
8299: LD_ADDR_EXP 38
8303: PUSH
8304: LD_INT 5
8306: PUSH
8307: LD_INT 6
8309: PUSH
8310: LD_INT 7
8312: PUSH
8313: EMPTY
8314: LIST
8315: LIST
8316: LIST
8317: PUSH
8318: LD_OWVAR 67
8322: ARRAY
8323: ST_TO_ADDR
// legion_blist := [ ] ;
8324: LD_ADDR_EXP 40
8328: PUSH
8329: EMPTY
8330: ST_TO_ADDR
// legion_vlist := [ ] ;
8331: LD_ADDR_EXP 41
8335: PUSH
8336: EMPTY
8337: ST_TO_ADDR
// legion_force := [ ] ;
8338: LD_ADDR_EXP 37
8342: PUSH
8343: EMPTY
8344: ST_TO_ADDR
// legion_enemy := - 1 ;
8345: LD_ADDR_EXP 42
8349: PUSH
8350: LD_INT 1
8352: NEG
8353: ST_TO_ADDR
// SetResourceType ( GetBase ( l_depot ) , mat_cans , 10000 ) ;
8354: LD_VAR 0 6
8358: PPUSH
8359: CALL_OW 274
8363: PPUSH
8364: LD_INT 1
8366: PPUSH
8367: LD_INT 10000
8369: PPUSH
8370: CALL_OW 277
// SetResourceType ( GetBase ( l_depot ) , 3 , 1000 ) ;
8374: LD_VAR 0 6
8378: PPUSH
8379: CALL_OW 274
8383: PPUSH
8384: LD_INT 3
8386: PPUSH
8387: LD_INT 1000
8389: PPUSH
8390: CALL_OW 277
// for i = 1 to l_towers do
8394: LD_ADDR_VAR 0 3
8398: PUSH
8399: DOUBLE
8400: LD_INT 1
8402: DEC
8403: ST_TO_ADDR
8404: LD_VAR 0 10
8408: PUSH
8409: FOR_TO
8410: IFFALSE 8459
// begin PrepareHuman ( false , 1 , legion_skill ) ;
8412: LD_INT 0
8414: PPUSH
8415: LD_INT 1
8417: PPUSH
8418: LD_EXP 38
8422: PPUSH
8423: CALL_OW 380
// un := CreateHuman ;
8427: LD_ADDR_VAR 0 2
8431: PUSH
8432: CALL_OW 44
8436: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_towers [ i ] ) ;
8437: LD_VAR 0 2
8441: PPUSH
8442: LD_VAR 0 10
8446: PUSH
8447: LD_VAR 0 3
8451: ARRAY
8452: PPUSH
8453: CALL_OW 52
// end ;
8457: GO 8409
8459: POP
8460: POP
// for i = 1 to 4 do
8461: LD_ADDR_VAR 0 3
8465: PUSH
8466: DOUBLE
8467: LD_INT 1
8469: DEC
8470: ST_TO_ADDR
8471: LD_INT 4
8473: PUSH
8474: FOR_TO
8475: IFFALSE 8568
// for p = 1 to 2 do
8477: LD_ADDR_VAR 0 7
8481: PUSH
8482: DOUBLE
8483: LD_INT 1
8485: DEC
8486: ST_TO_ADDR
8487: LD_INT 2
8489: PUSH
8490: FOR_TO
8491: IFFALSE 8564
// begin PrepareHuman ( false , class_mortar , legion_skill ) ;
8493: LD_INT 0
8495: PPUSH
8496: LD_INT 8
8498: PPUSH
8499: LD_EXP 38
8503: PPUSH
8504: CALL_OW 380
// un := CreateHuman ;
8508: LD_ADDR_VAR 0 2
8512: PUSH
8513: CALL_OW 44
8517: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_barracks ] ] ) [ p ] ) ;
8518: LD_VAR 0 2
8522: PPUSH
8523: LD_INT 22
8525: PUSH
8526: LD_INT 8
8528: PUSH
8529: EMPTY
8530: LIST
8531: LIST
8532: PUSH
8533: LD_INT 30
8535: PUSH
8536: LD_INT 5
8538: PUSH
8539: EMPTY
8540: LIST
8541: LIST
8542: PUSH
8543: EMPTY
8544: LIST
8545: LIST
8546: PPUSH
8547: CALL_OW 69
8551: PUSH
8552: LD_VAR 0 7
8556: ARRAY
8557: PPUSH
8558: CALL_OW 52
// end ;
8562: GO 8490
8564: POP
8565: POP
8566: GO 8474
8568: POP
8569: POP
// for i = 1 to 4 do
8570: LD_ADDR_VAR 0 3
8574: PUSH
8575: DOUBLE
8576: LD_INT 1
8578: DEC
8579: ST_TO_ADDR
8580: LD_INT 4
8582: PUSH
8583: FOR_TO
8584: IFFALSE 8627
// begin PrepareHuman ( false , 4 , legion_skill ) ;
8586: LD_INT 0
8588: PPUSH
8589: LD_INT 4
8591: PPUSH
8592: LD_EXP 38
8596: PPUSH
8597: CALL_OW 380
// un := CreateHuman ;
8601: LD_ADDR_VAR 0 2
8605: PUSH
8606: CALL_OW 44
8610: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_lab ) ;
8611: LD_VAR 0 2
8615: PPUSH
8616: LD_VAR 0 9
8620: PPUSH
8621: CALL_OW 52
// end ;
8625: GO 8583
8627: POP
8628: POP
// for i = 1 to 4 do
8629: LD_ADDR_VAR 0 3
8633: PUSH
8634: DOUBLE
8635: LD_INT 1
8637: DEC
8638: ST_TO_ADDR
8639: LD_INT 4
8641: PUSH
8642: FOR_TO
8643: IFFALSE 8686
// begin PrepareHuman ( false , 3 , legion_skill ) ;
8645: LD_INT 0
8647: PPUSH
8648: LD_INT 3
8650: PPUSH
8651: LD_EXP 38
8655: PPUSH
8656: CALL_OW 380
// un := CreateHuman ;
8660: LD_ADDR_VAR 0 2
8664: PUSH
8665: CALL_OW 44
8669: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_factory ) ;
8670: LD_VAR 0 2
8674: PPUSH
8675: LD_VAR 0 8
8679: PPUSH
8680: CALL_OW 52
// end ;
8684: GO 8642
8686: POP
8687: POP
// for i = 1 to 3 do
8688: LD_ADDR_VAR 0 3
8692: PUSH
8693: DOUBLE
8694: LD_INT 1
8696: DEC
8697: ST_TO_ADDR
8698: LD_INT 3
8700: PUSH
8701: FOR_TO
8702: IFFALSE 8745
// begin PrepareHuman ( false , 2 , legion_skill ) ;
8704: LD_INT 0
8706: PPUSH
8707: LD_INT 2
8709: PPUSH
8710: LD_EXP 38
8714: PPUSH
8715: CALL_OW 380
// un := CreateHuman ;
8719: LD_ADDR_VAR 0 2
8723: PUSH
8724: CALL_OW 44
8728: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_depot ) ;
8729: LD_VAR 0 2
8733: PPUSH
8734: LD_VAR 0 6
8738: PPUSH
8739: CALL_OW 52
// end ;
8743: GO 8701
8745: POP
8746: POP
// for i = 1 to 3 do
8747: LD_ADDR_VAR 0 3
8751: PUSH
8752: DOUBLE
8753: LD_INT 1
8755: DEC
8756: ST_TO_ADDR
8757: LD_INT 3
8759: PUSH
8760: FOR_TO
8761: IFFALSE 8871
// begin vc_chassis := ar_half_tracked ;
8763: LD_ADDR_OWVAR 37
8767: PUSH
8768: LD_INT 14
8770: ST_TO_ADDR
// vc_engine := engine_siberite ;
8771: LD_ADDR_OWVAR 39
8775: PUSH
8776: LD_INT 3
8778: ST_TO_ADDR
// vc_control := control_manual ;
8779: LD_ADDR_OWVAR 38
8783: PUSH
8784: LD_INT 1
8786: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
8787: LD_ADDR_OWVAR 40
8791: PUSH
8792: LD_INT 31
8794: ST_TO_ADDR
// veh := CreateVehicle ;
8795: LD_ADDR_VAR 0 5
8799: PUSH
8800: CALL_OW 45
8804: ST_TO_ADDR
// PlaceUnitXYR ( veh , 212 , 135 , 5 , false ) ;
8805: LD_VAR 0 5
8809: PPUSH
8810: LD_INT 212
8812: PPUSH
8813: LD_INT 135
8815: PPUSH
8816: LD_INT 5
8818: PPUSH
8819: LD_INT 0
8821: PPUSH
8822: CALL_OW 50
// PrepareHuman ( false , 3 , legion_skill + 1 ) ;
8826: LD_INT 0
8828: PPUSH
8829: LD_INT 3
8831: PPUSH
8832: LD_EXP 38
8836: PUSH
8837: LD_INT 1
8839: PLUS
8840: PPUSH
8841: CALL_OW 380
// un := CreateHuman ;
8845: LD_ADDR_VAR 0 2
8849: PUSH
8850: CALL_OW 44
8854: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8855: LD_VAR 0 2
8859: PPUSH
8860: LD_VAR 0 5
8864: PPUSH
8865: CALL_OW 52
// end ;
8869: GO 8760
8871: POP
8872: POP
// PrepareSoldier ( false , 8 ) ;
8873: LD_INT 0
8875: PPUSH
8876: LD_INT 8
8878: PPUSH
8879: CALL_OW 381
// hc_class := class_sniper ;
8883: LD_ADDR_OWVAR 28
8887: PUSH
8888: LD_INT 5
8890: ST_TO_ADDR
// un := CreateHuman ;
8891: LD_ADDR_VAR 0 2
8895: PUSH
8896: CALL_OW 44
8900: ST_TO_ADDR
// SetDir ( un , 4 ) ;
8901: LD_VAR 0 2
8905: PPUSH
8906: LD_INT 4
8908: PPUSH
8909: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( 136 , 92 ) ) ;
8913: LD_VAR 0 2
8917: PPUSH
8918: LD_INT 136
8920: PPUSH
8921: LD_INT 92
8923: PPUSH
8924: CALL_OW 428
8928: PPUSH
8929: CALL_OW 52
// PlaceSeeing ( 198 , 94 , 8 , 10 ) ;
8933: LD_INT 198
8935: PPUSH
8936: LD_INT 94
8938: PPUSH
8939: LD_INT 8
8941: PPUSH
8942: LD_INT 10
8944: PPUSH
8945: CALL_OW 330
// PlaceSeeing ( 167 , 130 , 8 , 10 ) ;
8949: LD_INT 167
8951: PPUSH
8952: LD_INT 130
8954: PPUSH
8955: LD_INT 8
8957: PPUSH
8958: LD_INT 10
8960: PPUSH
8961: CALL_OW 330
// tmp := AreaToList ( legion_mines_area , 0 ) ;
8965: LD_ADDR_VAR 0 4
8969: PUSH
8970: LD_INT 24
8972: PPUSH
8973: LD_INT 0
8975: PPUSH
8976: CALL_OW 517
8980: ST_TO_ADDR
// legion_mines := [ ] ;
8981: LD_ADDR_EXP 39
8985: PUSH
8986: EMPTY
8987: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
8988: LD_ADDR_VAR 0 3
8992: PUSH
8993: DOUBLE
8994: LD_INT 1
8996: DEC
8997: ST_TO_ADDR
8998: LD_VAR 0 4
9002: PUSH
9003: LD_INT 1
9005: ARRAY
9006: PUSH
9007: FOR_TO
9008: IFFALSE 9110
// begin PlaceMine ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 8 , 0 ) ;
9010: LD_VAR 0 4
9014: PUSH
9015: LD_INT 1
9017: ARRAY
9018: PUSH
9019: LD_VAR 0 3
9023: ARRAY
9024: PPUSH
9025: LD_VAR 0 4
9029: PUSH
9030: LD_INT 2
9032: ARRAY
9033: PUSH
9034: LD_VAR 0 3
9038: ARRAY
9039: PPUSH
9040: LD_INT 8
9042: PPUSH
9043: LD_INT 0
9045: PPUSH
9046: CALL_OW 454
// legion_mines := Replace ( legion_mines , legion_mines + 1 , [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ) ;
9050: LD_ADDR_EXP 39
9054: PUSH
9055: LD_EXP 39
9059: PPUSH
9060: LD_EXP 39
9064: PUSH
9065: LD_INT 1
9067: PLUS
9068: PPUSH
9069: LD_VAR 0 4
9073: PUSH
9074: LD_INT 1
9076: ARRAY
9077: PUSH
9078: LD_VAR 0 3
9082: ARRAY
9083: PUSH
9084: LD_VAR 0 4
9088: PUSH
9089: LD_INT 2
9091: ARRAY
9092: PUSH
9093: LD_VAR 0 3
9097: ARRAY
9098: PUSH
9099: EMPTY
9100: LIST
9101: LIST
9102: PPUSH
9103: CALL_OW 1
9107: ST_TO_ADDR
// end ;
9108: GO 9007
9110: POP
9111: POP
// legion_vlist := [ ar_medium_trike , 3 , control_remote , ar_cargo_bay ] ;
9112: LD_ADDR_EXP 41
9116: PUSH
9117: LD_INT 13
9119: PUSH
9120: LD_INT 3
9122: PUSH
9123: LD_INT 2
9125: PUSH
9126: LD_INT 32
9128: PUSH
9129: EMPTY
9130: LIST
9131: LIST
9132: LIST
9133: LIST
9134: ST_TO_ADDR
// end ;
9135: LD_VAR 0 1
9139: RET
// every 0 0$1 trigger legion_mines and FilterUnitsInArea ( legion_mines_area , [ f_side , your_side ] ) do var i , un ;
9140: LD_EXP 39
9144: PUSH
9145: LD_INT 24
9147: PPUSH
9148: LD_INT 22
9150: PUSH
9151: LD_OWVAR 2
9155: PUSH
9156: EMPTY
9157: LIST
9158: LIST
9159: PPUSH
9160: CALL_OW 70
9164: AND
9165: IFFALSE 9332
9167: GO 9169
9169: DISABLE
9170: LD_INT 0
9172: PPUSH
9173: PPUSH
// begin enable ;
9174: ENABLE
// for i := legion_mines downto 1 do
9175: LD_ADDR_VAR 0 1
9179: PUSH
9180: DOUBLE
9181: LD_EXP 39
9185: INC
9186: ST_TO_ADDR
9187: LD_INT 1
9189: PUSH
9190: FOR_DOWNTO
9191: IFFALSE 9330
// begin un := HexInfo ( legion_mines [ i ] [ 1 ] , legion_mines [ i ] [ 2 ] ) ;
9193: LD_ADDR_VAR 0 2
9197: PUSH
9198: LD_EXP 39
9202: PUSH
9203: LD_VAR 0 1
9207: ARRAY
9208: PUSH
9209: LD_INT 1
9211: ARRAY
9212: PPUSH
9213: LD_EXP 39
9217: PUSH
9218: LD_VAR 0 1
9222: ARRAY
9223: PUSH
9224: LD_INT 2
9226: ARRAY
9227: PPUSH
9228: CALL_OW 428
9232: ST_TO_ADDR
// if un then
9233: LD_VAR 0 2
9237: IFFALSE 9328
// if GetSide ( un ) = legion_enemy then
9239: LD_VAR 0 2
9243: PPUSH
9244: CALL_OW 255
9248: PUSH
9249: LD_EXP 42
9253: EQUAL
9254: IFFALSE 9328
// begin LaunchMineAtPos ( legion_mines [ i ] [ 1 ] , legion_mines [ i ] [ 2 ] , 8 ) ;
9256: LD_EXP 39
9260: PUSH
9261: LD_VAR 0 1
9265: ARRAY
9266: PUSH
9267: LD_INT 1
9269: ARRAY
9270: PPUSH
9271: LD_EXP 39
9275: PUSH
9276: LD_VAR 0 1
9280: ARRAY
9281: PUSH
9282: LD_INT 2
9284: ARRAY
9285: PPUSH
9286: LD_INT 8
9288: PPUSH
9289: CALL_OW 456
// legion_mines := Delete ( legion_mines , i ) ;
9293: LD_ADDR_EXP 39
9297: PUSH
9298: LD_EXP 39
9302: PPUSH
9303: LD_VAR 0 1
9307: PPUSH
9308: CALL_OW 3
9312: ST_TO_ADDR
// if not mine_vulc then
9313: LD_EXP 13
9317: NOT
9318: IFFALSE 9328
// mine_vulc := true ;
9320: LD_ADDR_EXP 13
9324: PUSH
9325: LD_INT 1
9327: ST_TO_ADDR
// end ; end ;
9328: GO 9190
9330: POP
9331: POP
// end ;
9332: PPOPN 2
9334: END
// every 0 0$1 trigger tick >= [ 25 25$00 , 22 22$00 , 20 20$00 ] [ Difficulty ] do var artifact , un ;
9335: LD_OWVAR 1
9339: PUSH
9340: LD_INT 52500
9342: PUSH
9343: LD_INT 46200
9345: PUSH
9346: LD_INT 42000
9348: PUSH
9349: EMPTY
9350: LIST
9351: LIST
9352: LIST
9353: PUSH
9354: LD_OWVAR 67
9358: ARRAY
9359: GREATEREQUAL
9360: IFFALSE 9538
9362: GO 9364
9364: DISABLE
9365: LD_INT 0
9367: PPUSH
9368: PPUSH
// begin artifact := FindArtifact ( 1 ) ;
9369: LD_ADDR_VAR 0 1
9373: PUSH
9374: LD_INT 1
9376: PPUSH
9377: CALL_OW 469
9381: ST_TO_ADDR
// if artifact [ 1 ] = 112 and artifact [ 2 ] = 67 then
9382: LD_VAR 0 1
9386: PUSH
9387: LD_INT 1
9389: ARRAY
9390: PUSH
9391: LD_INT 112
9393: EQUAL
9394: PUSH
9395: LD_VAR 0 1
9399: PUSH
9400: LD_INT 2
9402: ARRAY
9403: PUSH
9404: LD_INT 67
9406: EQUAL
9407: AND
9408: IFFALSE 9538
// begin un := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 2 ] ] ) ;
9410: LD_ADDR_VAR 0 2
9414: PUSH
9415: LD_INT 22
9417: PUSH
9418: LD_INT 8
9420: PUSH
9421: EMPTY
9422: LIST
9423: LIST
9424: PUSH
9425: LD_INT 25
9427: PUSH
9428: LD_INT 2
9430: PUSH
9431: EMPTY
9432: LIST
9433: LIST
9434: PUSH
9435: EMPTY
9436: LIST
9437: LIST
9438: PPUSH
9439: CALL_OW 69
9443: ST_TO_ADDR
// if not un then
9444: LD_VAR 0 2
9448: NOT
9449: IFFALSE 9453
// exit ;
9451: GO 9538
// un := un [ 1 ] ;
9453: LD_ADDR_VAR 0 2
9457: PUSH
9458: LD_VAR 0 2
9462: PUSH
9463: LD_INT 1
9465: ARRAY
9466: ST_TO_ADDR
// if IsInUnit ( un ) then
9467: LD_VAR 0 2
9471: PPUSH
9472: CALL_OW 310
9476: IFFALSE 9487
// ComExitBuilding ( un ) ;
9478: LD_VAR 0 2
9482: PPUSH
9483: CALL_OW 122
// AddComCollect ( un , artifact [ 1 ] , artifact [ 2 ] ) ;
9487: LD_VAR 0 2
9491: PPUSH
9492: LD_VAR 0 1
9496: PUSH
9497: LD_INT 1
9499: ARRAY
9500: PPUSH
9501: LD_VAR 0 1
9505: PUSH
9506: LD_INT 2
9508: ARRAY
9509: PPUSH
9510: CALL_OW 177
// AddComMoveXY ( un , 207 , 123 ) ;
9514: LD_VAR 0 2
9518: PPUSH
9519: LD_INT 207
9521: PPUSH
9522: LD_INT 123
9524: PPUSH
9525: CALL_OW 171
// AddComUnload ( un ) ;
9529: LD_VAR 0 2
9533: PPUSH
9534: CALL_OW 219
// end ; end ;
9538: PPOPN 2
9540: END
// every 0 0$02 trigger FilterAllUnits ( [ f_side , 8 ] ) > 0 do var un , i , tmp , veh , b , p , cr , l_depot , l_factory , l_lab , l_towers , l_sib , l_sci , l_mech , l_sold , l_eng , l_cargo ;
9541: LD_INT 22
9543: PUSH
9544: LD_INT 8
9546: PUSH
9547: EMPTY
9548: LIST
9549: LIST
9550: PPUSH
9551: CALL_OW 69
9555: PUSH
9556: LD_INT 0
9558: GREATER
9559: IFFALSE 11145
9561: GO 9563
9563: DISABLE
9564: LD_INT 0
9566: PPUSH
9567: PPUSH
9568: PPUSH
9569: PPUSH
9570: PPUSH
9571: PPUSH
9572: PPUSH
9573: PPUSH
9574: PPUSH
9575: PPUSH
9576: PPUSH
9577: PPUSH
9578: PPUSH
9579: PPUSH
9580: PPUSH
9581: PPUSH
9582: PPUSH
// begin enable ;
9583: ENABLE
// l_depot := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
9584: LD_ADDR_VAR 0 8
9588: PUSH
9589: LD_INT 22
9591: PUSH
9592: LD_INT 8
9594: PUSH
9595: EMPTY
9596: LIST
9597: LIST
9598: PUSH
9599: LD_INT 30
9601: PUSH
9602: LD_INT 1
9604: PUSH
9605: EMPTY
9606: LIST
9607: LIST
9608: PUSH
9609: EMPTY
9610: LIST
9611: LIST
9612: PPUSH
9613: CALL_OW 69
9617: PUSH
9618: LD_INT 1
9620: ARRAY
9621: ST_TO_ADDR
// l_factory := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
9622: LD_ADDR_VAR 0 9
9626: PUSH
9627: LD_INT 22
9629: PUSH
9630: LD_INT 8
9632: PUSH
9633: EMPTY
9634: LIST
9635: LIST
9636: PUSH
9637: LD_INT 30
9639: PUSH
9640: LD_INT 3
9642: PUSH
9643: EMPTY
9644: LIST
9645: LIST
9646: PUSH
9647: EMPTY
9648: LIST
9649: LIST
9650: PPUSH
9651: CALL_OW 69
9655: PUSH
9656: LD_INT 1
9658: ARRAY
9659: ST_TO_ADDR
// l_lab := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ;
9660: LD_ADDR_VAR 0 10
9664: PUSH
9665: LD_INT 22
9667: PUSH
9668: LD_INT 8
9670: PUSH
9671: EMPTY
9672: LIST
9673: LIST
9674: PUSH
9675: LD_INT 2
9677: PUSH
9678: LD_INT 30
9680: PUSH
9681: LD_INT 6
9683: PUSH
9684: EMPTY
9685: LIST
9686: LIST
9687: PUSH
9688: LD_INT 30
9690: PUSH
9691: LD_INT 8
9693: PUSH
9694: EMPTY
9695: LIST
9696: LIST
9697: PUSH
9698: EMPTY
9699: LIST
9700: LIST
9701: LIST
9702: PUSH
9703: EMPTY
9704: LIST
9705: LIST
9706: PPUSH
9707: CALL_OW 69
9711: PUSH
9712: LD_INT 1
9714: ARRAY
9715: ST_TO_ADDR
// l_towers := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) ;
9716: LD_ADDR_VAR 0 11
9720: PUSH
9721: LD_INT 22
9723: PUSH
9724: LD_INT 8
9726: PUSH
9727: EMPTY
9728: LIST
9729: LIST
9730: PUSH
9731: LD_INT 30
9733: PUSH
9734: LD_INT 32
9736: PUSH
9737: EMPTY
9738: LIST
9739: LIST
9740: PUSH
9741: EMPTY
9742: LIST
9743: LIST
9744: PPUSH
9745: CALL_OW 69
9749: ST_TO_ADDR
// l_eng := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 2 ] ] ) ;
9750: LD_ADDR_VAR 0 16
9754: PUSH
9755: LD_INT 22
9757: PUSH
9758: LD_INT 8
9760: PUSH
9761: EMPTY
9762: LIST
9763: LIST
9764: PUSH
9765: LD_INT 25
9767: PUSH
9768: LD_INT 2
9770: PUSH
9771: EMPTY
9772: LIST
9773: LIST
9774: PUSH
9775: EMPTY
9776: LIST
9777: LIST
9778: PPUSH
9779: CALL_OW 69
9783: ST_TO_ADDR
// l_sold := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 1 ] ] ) ;
9784: LD_ADDR_VAR 0 15
9788: PUSH
9789: LD_INT 22
9791: PUSH
9792: LD_INT 8
9794: PUSH
9795: EMPTY
9796: LIST
9797: LIST
9798: PUSH
9799: LD_INT 25
9801: PUSH
9802: LD_INT 1
9804: PUSH
9805: EMPTY
9806: LIST
9807: LIST
9808: PUSH
9809: EMPTY
9810: LIST
9811: LIST
9812: PPUSH
9813: CALL_OW 69
9817: ST_TO_ADDR
// l_mech := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 3 ] ] ) ;
9818: LD_ADDR_VAR 0 14
9822: PUSH
9823: LD_INT 22
9825: PUSH
9826: LD_INT 8
9828: PUSH
9829: EMPTY
9830: LIST
9831: LIST
9832: PUSH
9833: LD_INT 25
9835: PUSH
9836: LD_INT 3
9838: PUSH
9839: EMPTY
9840: LIST
9841: LIST
9842: PUSH
9843: EMPTY
9844: LIST
9845: LIST
9846: PPUSH
9847: CALL_OW 69
9851: ST_TO_ADDR
// l_sci := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 4 ] ] ) ;
9852: LD_ADDR_VAR 0 13
9856: PUSH
9857: LD_INT 22
9859: PUSH
9860: LD_INT 8
9862: PUSH
9863: EMPTY
9864: LIST
9865: LIST
9866: PUSH
9867: LD_INT 25
9869: PUSH
9870: LD_INT 4
9872: PUSH
9873: EMPTY
9874: LIST
9875: LIST
9876: PUSH
9877: EMPTY
9878: LIST
9879: LIST
9880: PPUSH
9881: CALL_OW 69
9885: ST_TO_ADDR
// if l_eng then
9886: LD_VAR 0 16
9890: IFFALSE 10308
// begin b := FilterUnitsInArea ( legion_base_area , [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) ;
9892: LD_ADDR_VAR 0 5
9896: PUSH
9897: LD_INT 25
9899: PPUSH
9900: LD_INT 22
9902: PUSH
9903: LD_INT 8
9905: PUSH
9906: EMPTY
9907: LIST
9908: LIST
9909: PUSH
9910: LD_INT 21
9912: PUSH
9913: LD_INT 3
9915: PUSH
9916: EMPTY
9917: LIST
9918: LIST
9919: PUSH
9920: EMPTY
9921: LIST
9922: LIST
9923: PPUSH
9924: CALL_OW 70
9928: ST_TO_ADDR
// if UnitFilter ( b , [ f_not , [ f_lives , 1000 ] ] ) > 0 then
9929: LD_VAR 0 5
9933: PPUSH
9934: LD_INT 3
9936: PUSH
9937: LD_INT 24
9939: PUSH
9940: LD_INT 1000
9942: PUSH
9943: EMPTY
9944: LIST
9945: LIST
9946: PUSH
9947: EMPTY
9948: LIST
9949: LIST
9950: PPUSH
9951: CALL_OW 72
9955: PUSH
9956: LD_INT 0
9958: GREATER
9959: IFFALSE 10093
// begin tmp := UnitFilter ( b , [ f_not , [ f_lives , 1000 ] ] ) ;
9961: LD_ADDR_VAR 0 3
9965: PUSH
9966: LD_VAR 0 5
9970: PPUSH
9971: LD_INT 3
9973: PUSH
9974: LD_INT 24
9976: PUSH
9977: LD_INT 1000
9979: PUSH
9980: EMPTY
9981: LIST
9982: LIST
9983: PUSH
9984: EMPTY
9985: LIST
9986: LIST
9987: PPUSH
9988: CALL_OW 72
9992: ST_TO_ADDR
// for i = 1 to l_eng do
9993: LD_ADDR_VAR 0 2
9997: PUSH
9998: DOUBLE
9999: LD_INT 1
10001: DEC
10002: ST_TO_ADDR
10003: LD_VAR 0 16
10007: PUSH
10008: FOR_TO
10009: IFFALSE 10089
// if IsInUnit ( l_eng [ i ] ) then
10011: LD_VAR 0 16
10015: PUSH
10016: LD_VAR 0 2
10020: ARRAY
10021: PPUSH
10022: CALL_OW 310
10026: IFFALSE 10045
// ComExitBuilding ( l_eng [ i ] ) else
10028: LD_VAR 0 16
10032: PUSH
10033: LD_VAR 0 2
10037: ARRAY
10038: PPUSH
10039: CALL_OW 122
10043: GO 10087
// if not HasTask ( l_eng [ i ] ) then
10045: LD_VAR 0 16
10049: PUSH
10050: LD_VAR 0 2
10054: ARRAY
10055: PPUSH
10056: CALL_OW 314
10060: NOT
10061: IFFALSE 10087
// ComRepairBuilding ( l_eng [ i ] , tmp [ 1 ] ) ;
10063: LD_VAR 0 16
10067: PUSH
10068: LD_VAR 0 2
10072: ARRAY
10073: PPUSH
10074: LD_VAR 0 3
10078: PUSH
10079: LD_INT 1
10081: ARRAY
10082: PPUSH
10083: CALL_OW 130
10087: GO 10008
10089: POP
10090: POP
// end else
10091: GO 10308
// begin if legion_blist > 0 then
10093: LD_EXP 40
10097: PUSH
10098: LD_INT 0
10100: GREATER
10101: IFFALSE 10230
// begin for i = 1 to l_eng do
10103: LD_ADDR_VAR 0 2
10107: PUSH
10108: DOUBLE
10109: LD_INT 1
10111: DEC
10112: ST_TO_ADDR
10113: LD_VAR 0 16
10117: PUSH
10118: FOR_TO
10119: IFFALSE 10226
// if IsInUnit ( l_eng [ i ] ) then
10121: LD_VAR 0 16
10125: PUSH
10126: LD_VAR 0 2
10130: ARRAY
10131: PPUSH
10132: CALL_OW 310
10136: IFFALSE 10155
// ComExitBuilding ( l_eng [ i ] ) else
10138: LD_VAR 0 16
10142: PUSH
10143: LD_VAR 0 2
10147: ARRAY
10148: PPUSH
10149: CALL_OW 122
10153: GO 10224
// if not HasTask ( l_eng [ i ] ) then
10155: LD_VAR 0 16
10159: PUSH
10160: LD_VAR 0 2
10164: ARRAY
10165: PPUSH
10166: CALL_OW 314
10170: NOT
10171: IFFALSE 10224
// ComBuild ( l_eng [ i ] , legion_blist [ 1 ] , legion_blist [ 2 ] , legion_blist [ 3 ] , legion_blist [ 4 ] ) ;
10173: LD_VAR 0 16
10177: PUSH
10178: LD_VAR 0 2
10182: ARRAY
10183: PPUSH
10184: LD_EXP 40
10188: PUSH
10189: LD_INT 1
10191: ARRAY
10192: PPUSH
10193: LD_EXP 40
10197: PUSH
10198: LD_INT 2
10200: ARRAY
10201: PPUSH
10202: LD_EXP 40
10206: PUSH
10207: LD_INT 3
10209: ARRAY
10210: PPUSH
10211: LD_EXP 40
10215: PUSH
10216: LD_INT 4
10218: ARRAY
10219: PPUSH
10220: CALL_OW 145
10224: GO 10118
10226: POP
10227: POP
// end else
10228: GO 10308
// for i = 1 to l_eng do
10230: LD_ADDR_VAR 0 2
10234: PUSH
10235: DOUBLE
10236: LD_INT 1
10238: DEC
10239: ST_TO_ADDR
10240: LD_VAR 0 16
10244: PUSH
10245: FOR_TO
10246: IFFALSE 10306
// if not IsInUnit ( l_eng [ i ] ) and not HasTask ( l_eng [ i ] ) then
10248: LD_VAR 0 16
10252: PUSH
10253: LD_VAR 0 2
10257: ARRAY
10258: PPUSH
10259: CALL_OW 310
10263: NOT
10264: PUSH
10265: LD_VAR 0 16
10269: PUSH
10270: LD_VAR 0 2
10274: ARRAY
10275: PPUSH
10276: CALL_OW 314
10280: NOT
10281: AND
10282: IFFALSE 10304
// ComEnterUnit ( l_eng [ i ] , l_depot ) ;
10284: LD_VAR 0 16
10288: PUSH
10289: LD_VAR 0 2
10293: ARRAY
10294: PPUSH
10295: LD_VAR 0 8
10299: PPUSH
10300: CALL_OW 120
10304: GO 10245
10306: POP
10307: POP
// end ; end ; if l_factory then
10308: LD_VAR 0 9
10312: IFFALSE 10712
// begin if FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) > 0 then
10314: LD_INT 22
10316: PUSH
10317: LD_INT 8
10319: PUSH
10320: EMPTY
10321: LIST
10322: LIST
10323: PUSH
10324: LD_INT 33
10326: PUSH
10327: LD_INT 2
10329: PUSH
10330: EMPTY
10331: LIST
10332: LIST
10333: PUSH
10334: LD_INT 3
10336: PUSH
10337: LD_INT 61
10339: PUSH
10340: EMPTY
10341: LIST
10342: PUSH
10343: EMPTY
10344: LIST
10345: LIST
10346: PUSH
10347: EMPTY
10348: LIST
10349: LIST
10350: LIST
10351: PPUSH
10352: CALL_OW 69
10356: PUSH
10357: LD_INT 0
10359: GREATER
10360: PUSH
10361: LD_INT 22
10363: PUSH
10364: LD_INT 8
10366: PUSH
10367: EMPTY
10368: LIST
10369: LIST
10370: PUSH
10371: LD_INT 34
10373: PUSH
10374: LD_INT 31
10376: PUSH
10377: EMPTY
10378: LIST
10379: LIST
10380: PUSH
10381: EMPTY
10382: LIST
10383: LIST
10384: PPUSH
10385: CALL_OW 69
10389: PUSH
10390: LD_INT 0
10392: GREATER
10393: AND
10394: IFFALSE 10514
// ComLinkTo ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) [ 1 ] , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) [ Rand ( 1 , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) ) ] ) ;
10396: LD_INT 22
10398: PUSH
10399: LD_INT 8
10401: PUSH
10402: EMPTY
10403: LIST
10404: LIST
10405: PUSH
10406: LD_INT 33
10408: PUSH
10409: LD_INT 2
10411: PUSH
10412: EMPTY
10413: LIST
10414: LIST
10415: PUSH
10416: LD_INT 3
10418: PUSH
10419: LD_INT 61
10421: PUSH
10422: EMPTY
10423: LIST
10424: PUSH
10425: EMPTY
10426: LIST
10427: LIST
10428: PUSH
10429: EMPTY
10430: LIST
10431: LIST
10432: LIST
10433: PPUSH
10434: CALL_OW 69
10438: PUSH
10439: LD_INT 1
10441: ARRAY
10442: PPUSH
10443: LD_INT 22
10445: PUSH
10446: LD_INT 8
10448: PUSH
10449: EMPTY
10450: LIST
10451: LIST
10452: PUSH
10453: LD_INT 34
10455: PUSH
10456: LD_INT 31
10458: PUSH
10459: EMPTY
10460: LIST
10461: LIST
10462: PUSH
10463: EMPTY
10464: LIST
10465: LIST
10466: PPUSH
10467: CALL_OW 69
10471: PUSH
10472: LD_INT 1
10474: PPUSH
10475: LD_INT 22
10477: PUSH
10478: LD_INT 8
10480: PUSH
10481: EMPTY
10482: LIST
10483: LIST
10484: PUSH
10485: LD_INT 34
10487: PUSH
10488: LD_INT 31
10490: PUSH
10491: EMPTY
10492: LIST
10493: LIST
10494: PUSH
10495: EMPTY
10496: LIST
10497: LIST
10498: PPUSH
10499: CALL_OW 69
10503: PPUSH
10504: CALL_OW 12
10508: ARRAY
10509: PPUSH
10510: CALL_OW 135
// if legion_vlist > 0 and BuildingStatus ( l_factory ) = bs_idle then
10514: LD_EXP 41
10518: PUSH
10519: LD_INT 0
10521: GREATER
10522: PUSH
10523: LD_VAR 0 9
10527: PPUSH
10528: CALL_OW 461
10532: PUSH
10533: LD_INT 2
10535: EQUAL
10536: AND
10537: IFFALSE 10622
// begin ComConstruct ( l_factory , legion_vlist [ 1 ] , legion_vlist [ 2 ] , legion_vlist [ 3 ] , legion_vlist [ 4 ] ) ;
10539: LD_VAR 0 9
10543: PPUSH
10544: LD_EXP 41
10548: PUSH
10549: LD_INT 1
10551: ARRAY
10552: PPUSH
10553: LD_EXP 41
10557: PUSH
10558: LD_INT 2
10560: ARRAY
10561: PPUSH
10562: LD_EXP 41
10566: PUSH
10567: LD_INT 3
10569: ARRAY
10570: PPUSH
10571: LD_EXP 41
10575: PUSH
10576: LD_INT 4
10578: ARRAY
10579: PPUSH
10580: CALL_OW 125
// for i = 1 to 4 do
10584: LD_ADDR_VAR 0 2
10588: PUSH
10589: DOUBLE
10590: LD_INT 1
10592: DEC
10593: ST_TO_ADDR
10594: LD_INT 4
10596: PUSH
10597: FOR_TO
10598: IFFALSE 10620
// legion_vlist := Delete ( legion_vlist , 1 ) ;
10600: LD_ADDR_EXP 41
10604: PUSH
10605: LD_EXP 41
10609: PPUSH
10610: LD_INT 1
10612: PPUSH
10613: CALL_OW 3
10617: ST_TO_ADDR
10618: GO 10597
10620: POP
10621: POP
// end ; if UnitFilter ( l_towers , [ f_bweapon , 0 ] ) > 0 and BuildingStatus ( l_factory ) = bs_idle then
10622: LD_VAR 0 11
10626: PPUSH
10627: LD_INT 35
10629: PUSH
10630: LD_INT 0
10632: PUSH
10633: EMPTY
10634: LIST
10635: LIST
10636: PPUSH
10637: CALL_OW 72
10641: PUSH
10642: LD_INT 0
10644: GREATER
10645: PUSH
10646: LD_VAR 0 9
10650: PPUSH
10651: CALL_OW 461
10655: PUSH
10656: LD_INT 2
10658: EQUAL
10659: AND
10660: IFFALSE 10712
// ComPlaceWeapon ( UnitFilter ( l_towers , [ f_bweapon , 0 ] ) [ 1 ] , [ ar_rocket_launcher , ar_gun ] [ Rand ( 1 , 2 ) ] ) ;
10662: LD_VAR 0 11
10666: PPUSH
10667: LD_INT 35
10669: PUSH
10670: LD_INT 0
10672: PUSH
10673: EMPTY
10674: LIST
10675: LIST
10676: PPUSH
10677: CALL_OW 72
10681: PUSH
10682: LD_INT 1
10684: ARRAY
10685: PPUSH
10686: LD_INT 28
10688: PUSH
10689: LD_INT 27
10691: PUSH
10692: EMPTY
10693: LIST
10694: LIST
10695: PUSH
10696: LD_INT 1
10698: PPUSH
10699: LD_INT 2
10701: PPUSH
10702: CALL_OW 12
10706: ARRAY
10707: PPUSH
10708: CALL_OW 148
// end ; if legion_enemy > 0 then
10712: LD_EXP 42
10716: PUSH
10717: LD_INT 0
10719: GREATER
10720: IFFALSE 11003
// begin if tick mod 11 11$00 = 0 then
10722: LD_OWVAR 1
10726: PUSH
10727: LD_INT 23100
10729: MOD
10730: PUSH
10731: LD_INT 0
10733: EQUAL
10734: IFFALSE 10984
// begin legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
10736: LD_ADDR_EXP 41
10740: PUSH
10741: LD_EXP 41
10745: PUSH
10746: LD_INT 13
10748: PUSH
10749: LD_INT 1
10751: PUSH
10752: LD_INT 2
10754: PUSH
10755: EMPTY
10756: LIST
10757: LIST
10758: LIST
10759: ADD
10760: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
10761: LD_ADDR_EXP 41
10765: PUSH
10766: LD_EXP 41
10770: PUSH
10771: LD_INT 28
10773: PUSH
10774: LD_INT 27
10776: PUSH
10777: LD_INT 29
10779: PUSH
10780: EMPTY
10781: LIST
10782: LIST
10783: LIST
10784: PUSH
10785: LD_INT 1
10787: PPUSH
10788: LD_INT 3
10790: PPUSH
10791: CALL_OW 12
10795: ARRAY
10796: ADD
10797: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
10798: LD_ADDR_EXP 41
10802: PUSH
10803: LD_EXP 41
10807: PUSH
10808: LD_INT 13
10810: PUSH
10811: LD_INT 1
10813: PUSH
10814: LD_INT 2
10816: PUSH
10817: EMPTY
10818: LIST
10819: LIST
10820: LIST
10821: ADD
10822: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
10823: LD_ADDR_EXP 41
10827: PUSH
10828: LD_EXP 41
10832: PUSH
10833: LD_INT 28
10835: PUSH
10836: LD_INT 27
10838: PUSH
10839: LD_INT 29
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: LIST
10846: PUSH
10847: LD_INT 1
10849: PPUSH
10850: LD_INT 3
10852: PPUSH
10853: CALL_OW 12
10857: ARRAY
10858: ADD
10859: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
10860: LD_ADDR_EXP 41
10864: PUSH
10865: LD_EXP 41
10869: PUSH
10870: LD_INT 13
10872: PUSH
10873: LD_INT 1
10875: PUSH
10876: LD_INT 2
10878: PUSH
10879: EMPTY
10880: LIST
10881: LIST
10882: LIST
10883: ADD
10884: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_mortar , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
10885: LD_ADDR_EXP 41
10889: PUSH
10890: LD_EXP 41
10894: PUSH
10895: LD_INT 28
10897: PUSH
10898: LD_INT 92
10900: PUSH
10901: LD_INT 29
10903: PUSH
10904: EMPTY
10905: LIST
10906: LIST
10907: LIST
10908: PUSH
10909: LD_INT 1
10911: PPUSH
10912: LD_INT 3
10914: PPUSH
10915: CALL_OW 12
10919: ARRAY
10920: ADD
10921: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
10922: LD_ADDR_EXP 41
10926: PUSH
10927: LD_EXP 41
10931: PUSH
10932: LD_INT 13
10934: PUSH
10935: LD_INT 1
10937: PUSH
10938: LD_INT 2
10940: PUSH
10941: EMPTY
10942: LIST
10943: LIST
10944: LIST
10945: ADD
10946: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
10947: LD_ADDR_EXP 41
10951: PUSH
10952: LD_EXP 41
10956: PUSH
10957: LD_INT 28
10959: PUSH
10960: LD_INT 27
10962: PUSH
10963: LD_INT 29
10965: PUSH
10966: EMPTY
10967: LIST
10968: LIST
10969: LIST
10970: PUSH
10971: LD_INT 1
10973: PPUSH
10974: LD_INT 3
10976: PPUSH
10977: CALL_OW 12
10981: ARRAY
10982: ADD
10983: ST_TO_ADDR
// end ; if legion_force >= 8 then
10984: LD_EXP 37
10988: PUSH
10989: LD_INT 8
10991: GREATEREQUAL
10992: IFFALSE 11003
// RaiseSailEvent ( event_legion_attack ) ;
10994: LD_EXP 21
10998: PPUSH
10999: CALL_OW 427
// end ; if FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_cargo_bay ] ] ) then
11003: LD_INT 22
11005: PUSH
11006: LD_INT 8
11008: PUSH
11009: EMPTY
11010: LIST
11011: LIST
11012: PUSH
11013: LD_INT 34
11015: PUSH
11016: LD_INT 32
11018: PUSH
11019: EMPTY
11020: LIST
11021: LIST
11022: PUSH
11023: EMPTY
11024: LIST
11025: LIST
11026: PPUSH
11027: CALL_OW 69
11031: IFFALSE 11145
// begin if l_cargo = false then
11033: LD_VAR 0 17
11037: PUSH
11038: LD_INT 0
11040: EQUAL
11041: IFFALSE 11077
// l_cargo := FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_cargo_bay ] ] ) ;
11043: LD_ADDR_VAR 0 17
11047: PUSH
11048: LD_INT 22
11050: PUSH
11051: LD_INT 8
11053: PUSH
11054: EMPTY
11055: LIST
11056: LIST
11057: PUSH
11058: LD_INT 34
11060: PUSH
11061: LD_INT 32
11063: PUSH
11064: EMPTY
11065: LIST
11066: LIST
11067: PUSH
11068: EMPTY
11069: LIST
11070: LIST
11071: PPUSH
11072: CALL_OW 69
11076: ST_TO_ADDR
// if l_cargo then
11077: LD_VAR 0 17
11081: IFFALSE 11145
// begin cr := GetListOfCratesInArea ( legion_crates ) ;
11083: LD_ADDR_VAR 0 7
11087: PUSH
11088: LD_INT 14
11090: PPUSH
11091: CALL_OW 435
11095: ST_TO_ADDR
// if cr > 0 then
11096: LD_VAR 0 7
11100: PUSH
11101: LD_INT 0
11103: GREATER
11104: IFFALSE 11145
// if not HasTask ( l_cargo ) then
11106: LD_VAR 0 17
11110: PPUSH
11111: CALL_OW 314
11115: NOT
11116: IFFALSE 11145
// ComCollect ( l_cargo , cr [ 1 ] , cr [ 2 ] ) ;
11118: LD_VAR 0 17
11122: PPUSH
11123: LD_VAR 0 7
11127: PUSH
11128: LD_INT 1
11130: ARRAY
11131: PPUSH
11132: LD_VAR 0 7
11136: PUSH
11137: LD_INT 2
11139: ARRAY
11140: PPUSH
11141: CALL_OW 117
// end ; end ; end ;
11145: PPOPN 17
11147: END
// every 9 9$00 trigger difficulty > 1 do var i , sci , sib , p ;
11148: LD_OWVAR 67
11152: PUSH
11153: LD_INT 1
11155: GREATER
11156: IFFALSE 11361
11158: GO 11160
11160: DISABLE
11161: LD_INT 0
11163: PPUSH
11164: PPUSH
11165: PPUSH
11166: PPUSH
// begin Wait ( Rand ( 0 0$01 , 6 6$01 ) ) ;
11167: LD_INT 35
11169: PPUSH
11170: LD_INT 12635
11172: PPUSH
11173: CALL_OW 12
11177: PPUSH
11178: CALL_OW 67
// sci := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 4 ] ] ) ;
11182: LD_ADDR_VAR 0 2
11186: PUSH
11187: LD_INT 22
11189: PUSH
11190: LD_INT 8
11192: PUSH
11193: EMPTY
11194: LIST
11195: LIST
11196: PUSH
11197: LD_INT 25
11199: PUSH
11200: LD_INT 4
11202: PUSH
11203: EMPTY
11204: LIST
11205: LIST
11206: PUSH
11207: EMPTY
11208: LIST
11209: LIST
11210: PPUSH
11211: CALL_OW 69
11215: ST_TO_ADDR
// p := 1 ;
11216: LD_ADDR_VAR 0 4
11220: PUSH
11221: LD_INT 1
11223: ST_TO_ADDR
// sib := [ 116 , 139 , 69 , 13 ] ;
11224: LD_ADDR_VAR 0 3
11228: PUSH
11229: LD_INT 116
11231: PUSH
11232: LD_INT 139
11234: PUSH
11235: LD_INT 69
11237: PUSH
11238: LD_INT 13
11240: PUSH
11241: EMPTY
11242: LIST
11243: LIST
11244: LIST
11245: LIST
11246: ST_TO_ADDR
// for i = 1 to 2 do
11247: LD_ADDR_VAR 0 1
11251: PUSH
11252: DOUBLE
11253: LD_INT 1
11255: DEC
11256: ST_TO_ADDR
11257: LD_INT 2
11259: PUSH
11260: FOR_TO
11261: IFFALSE 11359
// begin if IsInUnit ( sci [ i ] ) then
11263: LD_VAR 0 2
11267: PUSH
11268: LD_VAR 0 1
11272: ARRAY
11273: PPUSH
11274: CALL_OW 310
11278: IFFALSE 11295
// ComExitBuilding ( sci [ i ] ) ;
11280: LD_VAR 0 2
11284: PUSH
11285: LD_VAR 0 1
11289: ARRAY
11290: PPUSH
11291: CALL_OW 122
// Wait ( 0 0$03 ) ;
11295: LD_INT 105
11297: PPUSH
11298: CALL_OW 67
// ComContaminate ( sci [ i ] , sib [ p ] , sib [ p + 1 ] ) ;
11302: LD_VAR 0 2
11306: PUSH
11307: LD_VAR 0 1
11311: ARRAY
11312: PPUSH
11313: LD_VAR 0 3
11317: PUSH
11318: LD_VAR 0 4
11322: ARRAY
11323: PPUSH
11324: LD_VAR 0 3
11328: PUSH
11329: LD_VAR 0 4
11333: PUSH
11334: LD_INT 1
11336: PLUS
11337: ARRAY
11338: PPUSH
11339: CALL_OW 158
// p := p + 2 ;
11343: LD_ADDR_VAR 0 4
11347: PUSH
11348: LD_VAR 0 4
11352: PUSH
11353: LD_INT 2
11355: PLUS
11356: ST_TO_ADDR
// end ;
11357: GO 11260
11359: POP
11360: POP
// end ;
11361: PPOPN 4
11363: END
// every 3 3$30 trigger GetListOfCratesInArea ( legion_crates ) < 20 do
11364: LD_INT 14
11366: PPUSH
11367: CALL_OW 435
11371: PUSH
11372: LD_INT 20
11374: LESS
11375: IFFALSE 11402
11377: GO 11379
11379: DISABLE
// begin enable ;
11380: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , legion_crates , true ) ;
11381: LD_INT 1
11383: PPUSH
11384: LD_INT 5
11386: PPUSH
11387: CALL_OW 12
11391: PPUSH
11392: LD_INT 14
11394: PPUSH
11395: LD_INT 1
11397: PPUSH
11398: CALL_OW 55
// end ;
11402: END
// export function LegionAttack ( ) ; var path , units ; begin
11403: LD_INT 0
11405: PPUSH
11406: PPUSH
11407: PPUSH
// units := legion_force ;
11408: LD_ADDR_VAR 0 3
11412: PUSH
11413: LD_EXP 37
11417: ST_TO_ADDR
// legion_force := [ ] ;
11418: LD_ADDR_EXP 37
11422: PUSH
11423: EMPTY
11424: ST_TO_ADDR
// case legion_enemy of 1 :
11425: LD_EXP 42
11429: PUSH
11430: LD_INT 1
11432: DOUBLE
11433: EQUAL
11434: IFTRUE 11438
11436: GO 11481
11438: POP
// path := [ [ 174 , 135 ] , [ 153 , 146 ] , [ 118 , 122 ] ] ; 2 :
11439: LD_ADDR_VAR 0 2
11443: PUSH
11444: LD_INT 174
11446: PUSH
11447: LD_INT 135
11449: PUSH
11450: EMPTY
11451: LIST
11452: LIST
11453: PUSH
11454: LD_INT 153
11456: PUSH
11457: LD_INT 146
11459: PUSH
11460: EMPTY
11461: LIST
11462: LIST
11463: PUSH
11464: LD_INT 118
11466: PUSH
11467: LD_INT 122
11469: PUSH
11470: EMPTY
11471: LIST
11472: LIST
11473: PUSH
11474: EMPTY
11475: LIST
11476: LIST
11477: LIST
11478: ST_TO_ADDR
11479: GO 11584
11481: LD_INT 2
11483: DOUBLE
11484: EQUAL
11485: IFTRUE 11489
11487: GO 11532
11489: POP
// path := [ [ 164 , 73 ] , [ 130 , 48 ] , [ 96 , 48 ] ] ; 7 :
11490: LD_ADDR_VAR 0 2
11494: PUSH
11495: LD_INT 164
11497: PUSH
11498: LD_INT 73
11500: PUSH
11501: EMPTY
11502: LIST
11503: LIST
11504: PUSH
11505: LD_INT 130
11507: PUSH
11508: LD_INT 48
11510: PUSH
11511: EMPTY
11512: LIST
11513: LIST
11514: PUSH
11515: LD_INT 96
11517: PUSH
11518: LD_INT 48
11520: PUSH
11521: EMPTY
11522: LIST
11523: LIST
11524: PUSH
11525: EMPTY
11526: LIST
11527: LIST
11528: LIST
11529: ST_TO_ADDR
11530: GO 11584
11532: LD_INT 7
11534: DOUBLE
11535: EQUAL
11536: IFTRUE 11540
11538: GO 11583
11540: POP
// path := [ [ 174 , 135 ] , [ 153 , 146 ] , [ 118 , 122 ] ] ; end ;
11541: LD_ADDR_VAR 0 2
11545: PUSH
11546: LD_INT 174
11548: PUSH
11549: LD_INT 135
11551: PUSH
11552: EMPTY
11553: LIST
11554: LIST
11555: PUSH
11556: LD_INT 153
11558: PUSH
11559: LD_INT 146
11561: PUSH
11562: EMPTY
11563: LIST
11564: LIST
11565: PUSH
11566: LD_INT 118
11568: PUSH
11569: LD_INT 122
11571: PUSH
11572: EMPTY
11573: LIST
11574: LIST
11575: PUSH
11576: EMPTY
11577: LIST
11578: LIST
11579: LIST
11580: ST_TO_ADDR
11581: GO 11584
11583: POP
// repeat wait ( 0 0$1 ) ;
11584: LD_INT 35
11586: PPUSH
11587: CALL_OW 67
// until not AgressiveMove ( units , path ) ;
11591: LD_VAR 0 3
11595: PPUSH
11596: LD_VAR 0 2
11600: PPUSH
11601: CALL 80617 0 2
11605: NOT
11606: IFFALSE 11584
// end ; end_of_file
11608: LD_VAR 0 1
11612: RET
// export function Action ; var un , gamemode , speaker ; begin
11613: LD_INT 0
11615: PPUSH
11616: PPUSH
11617: PPUSH
11618: PPUSH
// if debug then
11619: LD_EXP 15
11623: IFFALSE 11650
// begin Difficulty := 2 ;
11625: LD_ADDR_OWVAR 67
11629: PUSH
11630: LD_INT 2
11632: ST_TO_ADDR
// gamemode := 3 ;
11633: LD_ADDR_VAR 0 3
11637: PUSH
11638: LD_INT 3
11640: ST_TO_ADDR
// FogOff ( 7 ) ;
11641: LD_INT 7
11643: PPUSH
11644: CALL_OW 344
// end else
11648: GO 11676
// begin Difficulty := GetMultiplayerSetting ( 0 ) ;
11650: LD_ADDR_OWVAR 67
11654: PUSH
11655: LD_INT 0
11657: PPUSH
11658: CALL_OW 426
11662: ST_TO_ADDR
// gamemode := GetMultiplayerSetting ( 1 ) ;
11663: LD_ADDR_VAR 0 3
11667: PUSH
11668: LD_INT 1
11670: PPUSH
11671: CALL_OW 426
11675: ST_TO_ADDR
// end ; if gamemode = 1 then
11676: LD_VAR 0 3
11680: PUSH
11681: LD_INT 1
11683: EQUAL
11684: IFFALSE 11708
// begin your_side := 1 ;
11686: LD_ADDR_OWVAR 2
11690: PUSH
11691: LD_INT 1
11693: ST_TO_ADDR
// legion_enemy := 1 ;
11694: LD_ADDR_EXP 42
11698: PUSH
11699: LD_INT 1
11701: ST_TO_ADDR
// PrepareAmerican ;
11702: CALL 261 0 0
// end else
11706: GO 11760
// if gamemode = 2 then
11708: LD_VAR 0 3
11712: PUSH
11713: LD_INT 2
11715: EQUAL
11716: IFFALSE 11740
// begin your_side := 2 ;
11718: LD_ADDR_OWVAR 2
11722: PUSH
11723: LD_INT 2
11725: ST_TO_ADDR
// legion_enemy := 2 ;
11726: LD_ADDR_EXP 42
11730: PUSH
11731: LD_INT 2
11733: ST_TO_ADDR
// PrepareArabian ;
11734: CALL 19086 0 0
// end else
11738: GO 11760
// begin your_side := 7 ;
11740: LD_ADDR_OWVAR 2
11744: PUSH
11745: LD_INT 7
11747: ST_TO_ADDR
// legion_enemy := 7 ;
11748: LD_ADDR_EXP 42
11752: PUSH
11753: LD_INT 7
11755: ST_TO_ADDR
// PrepareAlliance ;
11756: CALL 16230 0 0
// end ; if your_side = 1 then
11760: LD_OWVAR 2
11764: PUSH
11765: LD_INT 1
11767: EQUAL
11768: IFFALSE 12352
// begin Query ( QVul4 ) ;
11770: LD_STRING QVul4
11772: PPUSH
11773: CALL_OW 97
// InGameOn ;
11777: CALL_OW 8
// PlaceSeeing ( 8 , 5 , 1 , 12 ) ;
11781: LD_INT 8
11783: PPUSH
11784: LD_INT 5
11786: PPUSH
11787: LD_INT 1
11789: PPUSH
11790: LD_INT 12
11792: PPUSH
11793: CALL_OW 330
// RemoveSeeing ( 8 , 5 , 1 ) ;
11797: LD_INT 8
11799: PPUSH
11800: LD_INT 5
11802: PPUSH
11803: LD_INT 1
11805: PPUSH
11806: CALL_OW 331
// PlaceSeeing ( 98 , 148 , 1 , 2 ) ;
11810: LD_INT 98
11812: PPUSH
11813: LD_INT 148
11815: PPUSH
11816: LD_INT 1
11818: PPUSH
11819: LD_INT 2
11821: PPUSH
11822: CALL_OW 330
// RemoveSeeing ( 98 , 148 , 1 ) ;
11826: LD_INT 98
11828: PPUSH
11829: LD_INT 148
11831: PPUSH
11832: LD_INT 1
11834: PPUSH
11835: CALL_OW 331
// CenterNowOnXY ( 8 , 5 ) ;
11839: LD_INT 8
11841: PPUSH
11842: LD_INT 5
11844: PPUSH
11845: CALL_OW 86
// uc_side := 4 ;
11849: LD_ADDR_OWVAR 20
11853: PUSH
11854: LD_INT 4
11856: ST_TO_ADDR
// uc_nation := 1 ;
11857: LD_ADDR_OWVAR 21
11861: PUSH
11862: LD_INT 1
11864: ST_TO_ADDR
// hc_importance := 0 ;
11865: LD_ADDR_OWVAR 32
11869: PUSH
11870: LD_INT 0
11872: ST_TO_ADDR
// hc_name :=  ;
11873: LD_ADDR_OWVAR 26
11877: PUSH
11878: LD_STRING 
11880: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , us_skill ) ;
11881: LD_INT 1
11883: PPUSH
11884: LD_INT 3
11886: PPUSH
11887: LD_EXP 26
11891: PPUSH
11892: CALL_OW 380
// un := CreateHuman ;
11896: LD_ADDR_VAR 0 2
11900: PUSH
11901: CALL_OW 44
11905: ST_TO_ADDR
// PlaceUnitXY ( un , 19 , 23 , false ) ;
11906: LD_VAR 0 2
11910: PPUSH
11911: LD_INT 19
11913: PPUSH
11914: LD_INT 23
11916: PPUSH
11917: LD_INT 0
11919: PPUSH
11920: CALL_OW 48
// hc_name := Stuart Carey ;
11924: LD_ADDR_OWVAR 26
11928: PUSH
11929: LD_STRING Stuart Carey
11931: ST_TO_ADDR
// hc_class := 1 ;
11932: LD_ADDR_OWVAR 28
11936: PUSH
11937: LD_INT 1
11939: ST_TO_ADDR
// hc_gallery := vulcano ;
11940: LD_ADDR_OWVAR 33
11944: PUSH
11945: LD_STRING vulcano
11947: ST_TO_ADDR
// hc_face_number := 1 ;
11948: LD_ADDR_OWVAR 34
11952: PUSH
11953: LD_INT 1
11955: ST_TO_ADDR
// us_guy := CreateHuman ;
11956: LD_ADDR_EXP 27
11960: PUSH
11961: CALL_OW 44
11965: ST_TO_ADDR
// InitHc ;
11966: CALL_OW 19
// if rand ( 0 , 1 ) then
11970: LD_INT 0
11972: PPUSH
11973: LD_INT 1
11975: PPUSH
11976: CALL_OW 12
11980: IFFALSE 11997
// PrepareHuman ( sex_male , 3 , 6 ) else
11982: LD_INT 1
11984: PPUSH
11985: LD_INT 3
11987: PPUSH
11988: LD_INT 6
11990: PPUSH
11991: CALL_OW 380
11995: GO 12010
// PrepareHuman ( sex_female , 4 , 8 ) ;
11997: LD_INT 2
11999: PPUSH
12000: LD_INT 4
12002: PPUSH
12003: LD_INT 8
12005: PPUSH
12006: CALL_OW 380
// ComMoveXY ( un , 12 , 10 ) ;
12010: LD_VAR 0 2
12014: PPUSH
12015: LD_INT 12
12017: PPUSH
12018: LD_INT 10
12020: PPUSH
12021: CALL_OW 111
// ComTurnUnit ( us_commander , un ) ;
12025: LD_EXP 24
12029: PPUSH
12030: LD_VAR 0 2
12034: PPUSH
12035: CALL_OW 119
// repeat wait ( 0 0$3 ) ;
12039: LD_INT 105
12041: PPUSH
12042: CALL_OW 67
// until See ( 4 , us_commander ) or IsAt ( un , 12 , 10 ) ;
12046: LD_INT 4
12048: PPUSH
12049: LD_EXP 24
12053: PPUSH
12054: CALL_OW 292
12058: PUSH
12059: LD_VAR 0 2
12063: PPUSH
12064: LD_INT 12
12066: PPUSH
12067: LD_INT 10
12069: PPUSH
12070: CALL_OW 307
12074: OR
12075: IFFALSE 12039
// ComTurnUnit ( un , us_commander ) ;
12077: LD_VAR 0 2
12081: PPUSH
12082: LD_EXP 24
12086: PPUSH
12087: CALL_OW 119
// if GetSex ( un ) = sex_male then
12091: LD_VAR 0 2
12095: PPUSH
12096: CALL_OW 258
12100: PUSH
12101: LD_INT 1
12103: EQUAL
12104: IFFALSE 12187
// begin Say ( un , VD-un1 ) ;
12106: LD_VAR 0 2
12110: PPUSH
12111: LD_STRING VD-un1
12113: PPUSH
12114: CALL_OW 88
// Say ( us_commander , VDc-1 ) ;
12118: LD_EXP 24
12122: PPUSH
12123: LD_STRING VDc-1
12125: PPUSH
12126: CALL_OW 88
// Say ( un , VD-un2 ) ;
12130: LD_VAR 0 2
12134: PPUSH
12135: LD_STRING VD-un2
12137: PPUSH
12138: CALL_OW 88
// Say ( us_commander , VDc-2 ) ;
12142: LD_EXP 24
12146: PPUSH
12147: LD_STRING VDc-2
12149: PPUSH
12150: CALL_OW 88
// Say ( un , VD-un3 ) ;
12154: LD_VAR 0 2
12158: PPUSH
12159: LD_STRING VD-un3
12161: PPUSH
12162: CALL_OW 88
// wait ( 0 0$0.2 ) ;
12166: LD_INT 7
12168: PPUSH
12169: CALL_OW 67
// Say ( un , VD-un4 ) ;
12173: LD_VAR 0 2
12177: PPUSH
12178: LD_STRING VD-un4
12180: PPUSH
12181: CALL_OW 88
// end else
12185: GO 12266
// begin Say ( un , VD-unf1 ) ;
12187: LD_VAR 0 2
12191: PPUSH
12192: LD_STRING VD-unf1
12194: PPUSH
12195: CALL_OW 88
// Say ( us_commander , VDc-1 ) ;
12199: LD_EXP 24
12203: PPUSH
12204: LD_STRING VDc-1
12206: PPUSH
12207: CALL_OW 88
// Say ( un , VD-unf2 ) ;
12211: LD_VAR 0 2
12215: PPUSH
12216: LD_STRING VD-unf2
12218: PPUSH
12219: CALL_OW 88
// Say ( us_commander , VDc-2 ) ;
12223: LD_EXP 24
12227: PPUSH
12228: LD_STRING VDc-2
12230: PPUSH
12231: CALL_OW 88
// Say ( un , VD-unf3 ) ;
12235: LD_VAR 0 2
12239: PPUSH
12240: LD_STRING VD-unf3
12242: PPUSH
12243: CALL_OW 88
// wait ( 0 0$0.2 ) ;
12247: LD_INT 7
12249: PPUSH
12250: CALL_OW 67
// Say ( un , VD-unf4 ) ;
12254: LD_VAR 0 2
12258: PPUSH
12259: LD_STRING VD-unf4
12261: PPUSH
12262: CALL_OW 88
// end ; ComMoveXY ( un , 2 , 2 ) ;
12266: LD_VAR 0 2
12270: PPUSH
12271: LD_INT 2
12273: PPUSH
12274: LD_INT 2
12276: PPUSH
12277: CALL_OW 111
// Say ( us_commander , VDc-3 ) ;
12281: LD_EXP 24
12285: PPUSH
12286: LD_STRING VDc-3
12288: PPUSH
12289: CALL_OW 88
// InGameOff ;
12293: CALL_OW 9
// ChangeMissionObjectives ( CVulc1 ) ;
12297: LD_STRING CVulc1
12299: PPUSH
12300: CALL_OW 337
// repeat Wait ( 0 0$01 ) ;
12304: LD_INT 35
12306: PPUSH
12307: CALL_OW 67
// until GetX ( un ) = 2 and GetY ( un ) = 2 ;
12311: LD_VAR 0 2
12315: PPUSH
12316: CALL_OW 250
12320: PUSH
12321: LD_INT 2
12323: EQUAL
12324: PUSH
12325: LD_VAR 0 2
12329: PPUSH
12330: CALL_OW 251
12334: PUSH
12335: LD_INT 2
12337: EQUAL
12338: AND
12339: IFFALSE 12304
// RemoveUnit ( un ) ;
12341: LD_VAR 0 2
12345: PPUSH
12346: CALL_OW 64
// end else
12350: GO 12729
// if your_side = 2 then
12352: LD_OWVAR 2
12356: PUSH
12357: LD_INT 2
12359: EQUAL
12360: IFFALSE 12576
// begin CenterNowOnUnits ( player_commander ) ;
12362: LD_EXP 11
12366: PPUSH
12367: CALL_OW 87
// speaker := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff ar_commander ;
12371: LD_ADDR_VAR 0 4
12375: PUSH
12376: LD_INT 22
12378: PUSH
12379: LD_INT 2
12381: PUSH
12382: EMPTY
12383: LIST
12384: LIST
12385: PUSH
12386: LD_INT 21
12388: PUSH
12389: LD_INT 1
12391: PUSH
12392: EMPTY
12393: LIST
12394: LIST
12395: PUSH
12396: EMPTY
12397: LIST
12398: LIST
12399: PPUSH
12400: CALL_OW 69
12404: PUSH
12405: LD_EXP 57
12409: DIFF
12410: ST_TO_ADDR
// if speaker then
12411: LD_VAR 0 4
12415: IFFALSE 12567
// begin InGameOn ;
12417: CALL_OW 8
// Say ( ar_commander , VSd-1 ) ;
12421: LD_EXP 57
12425: PPUSH
12426: LD_STRING VSd-1
12428: PPUSH
12429: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
12433: LD_VAR 0 4
12437: PUSH
12438: LD_INT 1
12440: ARRAY
12441: PPUSH
12442: CALL_OW 258
12446: PUSH
12447: LD_INT 1
12449: EQUAL
12450: IFFALSE 12470
// Say ( speaker [ 1 ] , VAd-1 ) else
12452: LD_VAR 0 4
12456: PUSH
12457: LD_INT 1
12459: ARRAY
12460: PPUSH
12461: LD_STRING VAd-1
12463: PPUSH
12464: CALL_OW 88
12468: GO 12486
// Say ( speaker [ 1 ] , VAfd-1 ) ;
12470: LD_VAR 0 4
12474: PUSH
12475: LD_INT 1
12477: ARRAY
12478: PPUSH
12479: LD_STRING VAfd-1
12481: PPUSH
12482: CALL_OW 88
// Say ( ar_commander , VSd-2 ) ;
12486: LD_EXP 57
12490: PPUSH
12491: LD_STRING VSd-2
12493: PPUSH
12494: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
12498: LD_VAR 0 4
12502: PUSH
12503: LD_INT 1
12505: ARRAY
12506: PPUSH
12507: CALL_OW 258
12511: PUSH
12512: LD_INT 1
12514: EQUAL
12515: IFFALSE 12535
// Say ( speaker [ 1 ] , VAd-2 ) else
12517: LD_VAR 0 4
12521: PUSH
12522: LD_INT 1
12524: ARRAY
12525: PPUSH
12526: LD_STRING VAd-2
12528: PPUSH
12529: CALL_OW 88
12533: GO 12551
// Say ( speaker [ 1 ] , VAfd-2 ) ;
12535: LD_VAR 0 4
12539: PUSH
12540: LD_INT 1
12542: ARRAY
12543: PPUSH
12544: LD_STRING VAfd-2
12546: PPUSH
12547: CALL_OW 88
// Say ( ar_commander , VSd-3 ) ;
12551: LD_EXP 57
12555: PPUSH
12556: LD_STRING VSd-3
12558: PPUSH
12559: CALL_OW 88
// InGameOff ;
12563: CALL_OW 9
// end ; ChangeMissionObjectives ( CVulc5 ) ;
12567: LD_STRING CVulc5
12569: PPUSH
12570: CALL_OW 337
// end else
12574: GO 12729
// if your_side = 7 then
12576: LD_OWVAR 2
12580: PUSH
12581: LD_INT 7
12583: EQUAL
12584: IFFALSE 12729
// begin speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) diff al_commander ;
12586: LD_ADDR_VAR 0 4
12590: PUSH
12591: LD_INT 22
12593: PUSH
12594: LD_INT 7
12596: PUSH
12597: EMPTY
12598: LIST
12599: LIST
12600: PUSH
12601: LD_INT 21
12603: PUSH
12604: LD_INT 1
12606: PUSH
12607: EMPTY
12608: LIST
12609: LIST
12610: PUSH
12611: EMPTY
12612: LIST
12613: LIST
12614: PPUSH
12615: CALL_OW 69
12619: PUSH
12620: LD_EXP 43
12624: DIFF
12625: ST_TO_ADDR
// if speaker then
12626: LD_VAR 0 4
12630: IFFALSE 12722
// begin CenterNowOnUnits ( al_commander ) ;
12632: LD_EXP 43
12636: PPUSH
12637: CALL_OW 87
// InGameOn ;
12641: CALL_OW 8
// Say ( al_commander , VPd-1 ) ;
12645: LD_EXP 43
12649: PPUSH
12650: LD_STRING VPd-1
12652: PPUSH
12653: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) then
12657: LD_VAR 0 4
12661: PUSH
12662: LD_INT 1
12664: ARRAY
12665: PPUSH
12666: CALL_OW 258
12670: IFFALSE 12690
// Say ( speaker [ 1 ] , VPpd-1 ) else
12672: LD_VAR 0 4
12676: PUSH
12677: LD_INT 1
12679: ARRAY
12680: PPUSH
12681: LD_STRING VPpd-1
12683: PPUSH
12684: CALL_OW 88
12688: GO 12706
// Say ( speaker [ 1 ] , VPpdf-1 ) ;
12690: LD_VAR 0 4
12694: PUSH
12695: LD_INT 1
12697: ARRAY
12698: PPUSH
12699: LD_STRING VPpdf-1
12701: PPUSH
12702: CALL_OW 88
// Say ( al_commander , VPd-2 ) ;
12706: LD_EXP 43
12710: PPUSH
12711: LD_STRING VPd-2
12713: PPUSH
12714: CALL_OW 88
// InGameOff ;
12718: CALL_OW 9
// end ; ChangeMissionObjectives ( CVulc7 ) ;
12722: LD_STRING CVulc7
12724: PPUSH
12725: CALL_OW 337
// end ; SaveForQuickRestart ;
12729: CALL_OW 22
// end ;
12733: LD_VAR 0 1
12737: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) do
12738: LD_INT 22
12740: PUSH
12741: LD_INT 2
12743: PUSH
12744: EMPTY
12745: LIST
12746: LIST
12747: PUSH
12748: LD_INT 30
12750: PUSH
12751: LD_INT 3
12753: PUSH
12754: EMPTY
12755: LIST
12756: LIST
12757: PUSH
12758: EMPTY
12759: LIST
12760: LIST
12761: PPUSH
12762: CALL_OW 69
12766: IFFALSE 12810
12768: GO 12770
12770: DISABLE
// begin ChangeMissionObjectives ( CVulc6 ) ;
12771: LD_STRING CVulc6
12773: PPUSH
12774: CALL_OW 337
// Wait ( [ 25 25$00 , 22 22$30 , 20 20$00 ] [ Difficulty ] ) ;
12778: LD_INT 52500
12780: PUSH
12781: LD_INT 47250
12783: PUSH
12784: LD_INT 42000
12786: PUSH
12787: EMPTY
12788: LIST
12789: LIST
12790: LIST
12791: PUSH
12792: LD_OWVAR 67
12796: ARRAY
12797: PPUSH
12798: CALL_OW 67
// ru_can_attack := true ;
12802: LD_ADDR_EXP 3
12806: PUSH
12807: LD_INT 1
12809: ST_TO_ADDR
// end ;
12810: END
// every 0 0$01 trigger GetSide ( us_depot ) = 1 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_warehouse ] ] ] ) do var speaker ;
12811: LD_INT 50
12813: PPUSH
12814: CALL_OW 255
12818: PUSH
12819: LD_INT 1
12821: EQUAL
12822: PUSH
12823: LD_INT 22
12825: PUSH
12826: LD_INT 1
12828: PUSH
12829: EMPTY
12830: LIST
12831: LIST
12832: PUSH
12833: LD_INT 2
12835: PUSH
12836: LD_INT 30
12838: PUSH
12839: LD_INT 3
12841: PUSH
12842: EMPTY
12843: LIST
12844: LIST
12845: PUSH
12846: LD_INT 30
12848: PUSH
12849: LD_INT 1
12851: PUSH
12852: EMPTY
12853: LIST
12854: LIST
12855: PUSH
12856: EMPTY
12857: LIST
12858: LIST
12859: LIST
12860: PUSH
12861: EMPTY
12862: LIST
12863: LIST
12864: PPUSH
12865: CALL_OW 69
12869: OR
12870: IFFALSE 13104
12872: GO 12874
12874: DISABLE
12875: LD_INT 0
12877: PPUSH
// begin ChangeMissionObjectives ( CVulc2 ) ;
12878: LD_STRING CVulc2
12880: PPUSH
12881: CALL_OW 337
// speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) diff us_commander ;
12885: LD_ADDR_VAR 0 1
12889: PUSH
12890: LD_INT 22
12892: PUSH
12893: LD_INT 1
12895: PUSH
12896: EMPTY
12897: LIST
12898: LIST
12899: PUSH
12900: LD_INT 25
12902: PUSH
12903: LD_INT 2
12905: PUSH
12906: EMPTY
12907: LIST
12908: LIST
12909: PUSH
12910: EMPTY
12911: LIST
12912: LIST
12913: PPUSH
12914: CALL_OW 69
12918: PUSH
12919: LD_EXP 24
12923: DIFF
12924: ST_TO_ADDR
// DialogueOn ;
12925: CALL_OW 6
// DWait ( 0 0$0.3 ) ;
12929: LD_INT 10
12931: PPUSH
12932: CALL_OW 68
// if GetSex ( speaker [ 1 ] ) = sex_male then
12936: LD_VAR 0 1
12940: PUSH
12941: LD_INT 1
12943: ARRAY
12944: PPUSH
12945: CALL_OW 258
12949: PUSH
12950: LD_INT 1
12952: EQUAL
12953: IFFALSE 12973
// Say ( speaker [ 1 ] , VDb-1 ) else
12955: LD_VAR 0 1
12959: PUSH
12960: LD_INT 1
12962: ARRAY
12963: PPUSH
12964: LD_STRING VDb-1
12966: PPUSH
12967: CALL_OW 88
12971: GO 12989
// Say ( speaker [ 1 ] , VDbf-1 ) ;
12973: LD_VAR 0 1
12977: PUSH
12978: LD_INT 1
12980: ARRAY
12981: PPUSH
12982: LD_STRING VDbf-1
12984: PPUSH
12985: CALL_OW 88
// DWait ( 0 0$0.3 ) ;
12989: LD_INT 10
12991: PPUSH
12992: CALL_OW 68
// if GetSex ( speaker [ 1 ] ) = sex_male then
12996: LD_VAR 0 1
13000: PUSH
13001: LD_INT 1
13003: ARRAY
13004: PPUSH
13005: CALL_OW 258
13009: PUSH
13010: LD_INT 1
13012: EQUAL
13013: IFFALSE 13033
// Say ( speaker [ 1 ] , VDb-2 ) else
13015: LD_VAR 0 1
13019: PUSH
13020: LD_INT 1
13022: ARRAY
13023: PPUSH
13024: LD_STRING VDb-2
13026: PPUSH
13027: CALL_OW 88
13031: GO 13049
// Say ( speaker [ 1 ] , VDbf-2 ) ;
13033: LD_VAR 0 1
13037: PUSH
13038: LD_INT 1
13040: ARRAY
13041: PPUSH
13042: LD_STRING VDbf-2
13044: PPUSH
13045: CALL_OW 88
// DWait ( 0 0$01 ) ;
13049: LD_INT 35
13051: PPUSH
13052: CALL_OW 68
// Say ( us_commander , VDb-com1 ) ;
13056: LD_EXP 24
13060: PPUSH
13061: LD_STRING VDb-com1
13063: PPUSH
13064: CALL_OW 88
// DialogueOff ;
13068: CALL_OW 7
// Wait ( [ 21 21$00 , 17 17$30 , 15 15$00 ] [ Difficulty ] ) ;
13072: LD_INT 44100
13074: PUSH
13075: LD_INT 36750
13077: PUSH
13078: LD_INT 31500
13080: PUSH
13081: EMPTY
13082: LIST
13083: LIST
13084: LIST
13085: PUSH
13086: LD_OWVAR 67
13090: ARRAY
13091: PPUSH
13092: CALL_OW 67
// ru_can_attack := true ;
13096: LD_ADDR_EXP 3
13100: PUSH
13101: LD_INT 1
13103: ST_TO_ADDR
// end ;
13104: PPOPN 1
13106: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) do
13107: LD_INT 22
13109: PUSH
13110: LD_INT 7
13112: PUSH
13113: EMPTY
13114: LIST
13115: LIST
13116: PUSH
13117: LD_INT 30
13119: PUSH
13120: LD_INT 3
13122: PUSH
13123: EMPTY
13124: LIST
13125: LIST
13126: PUSH
13127: EMPTY
13128: LIST
13129: LIST
13130: PPUSH
13131: CALL_OW 69
13135: IFFALSE 13172
13137: GO 13139
13139: DISABLE
// begin Wait ( [ 20 20$00 , 16 16$30 , 14 14$00 ] [ Difficulty ] ) ;
13140: LD_INT 42000
13142: PUSH
13143: LD_INT 34650
13145: PUSH
13146: LD_INT 29400
13148: PUSH
13149: EMPTY
13150: LIST
13151: LIST
13152: LIST
13153: PUSH
13154: LD_OWVAR 67
13158: ARRAY
13159: PPUSH
13160: CALL_OW 67
// ru_can_attack := true ;
13164: LD_ADDR_EXP 3
13168: PUSH
13169: LD_INT 1
13171: ST_TO_ADDR
// end ;
13172: END
// every 0 0$01 trigger GetSide ( us_lab ) = 1 do var speaker ;
13173: LD_INT 58
13175: PPUSH
13176: CALL_OW 255
13180: PUSH
13181: LD_INT 1
13183: EQUAL
13184: IFFALSE 13391
13186: GO 13188
13188: DISABLE
13189: LD_INT 0
13191: PPUSH
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
13192: LD_ADDR_VAR 0 1
13196: PUSH
13197: LD_INT 22
13199: PUSH
13200: LD_INT 1
13202: PUSH
13203: EMPTY
13204: LIST
13205: LIST
13206: PUSH
13207: LD_INT 25
13209: PUSH
13210: LD_INT 2
13212: PUSH
13213: EMPTY
13214: LIST
13215: LIST
13216: PUSH
13217: EMPTY
13218: LIST
13219: LIST
13220: PPUSH
13221: CALL_OW 69
13225: ST_TO_ADDR
// DialogueOn ;
13226: CALL_OW 6
// if speaker then
13230: LD_VAR 0 1
13234: IFFALSE 13289
// if GetSex ( speaker [ 1 ] ) = sex_male then
13236: LD_VAR 0 1
13240: PUSH
13241: LD_INT 1
13243: ARRAY
13244: PPUSH
13245: CALL_OW 258
13249: PUSH
13250: LD_INT 1
13252: EQUAL
13253: IFFALSE 13273
// Say ( speaker [ 1 ] , VDe-1 ) else
13255: LD_VAR 0 1
13259: PUSH
13260: LD_INT 1
13262: ARRAY
13263: PPUSH
13264: LD_STRING VDe-1
13266: PPUSH
13267: CALL_OW 88
13271: GO 13289
// Say ( speaker [ 1 ] , VDef-1 ) ;
13273: LD_VAR 0 1
13277: PUSH
13278: LD_INT 1
13280: ARRAY
13281: PPUSH
13282: LD_STRING VDef-1
13284: PPUSH
13285: CALL_OW 88
// case Query ( SibNote ) of 1 :
13289: LD_STRING SibNote
13291: PPUSH
13292: CALL_OW 97
13296: PUSH
13297: LD_INT 1
13299: DOUBLE
13300: EQUAL
13301: IFTRUE 13305
13303: GO 13308
13305: POP
// ; end ;
13306: GO 13309
13308: POP
// if speaker then
13309: LD_VAR 0 1
13313: IFFALSE 13368
// if GetSex ( speaker [ 1 ] ) = sex_male then
13315: LD_VAR 0 1
13319: PUSH
13320: LD_INT 1
13322: ARRAY
13323: PPUSH
13324: CALL_OW 258
13328: PUSH
13329: LD_INT 1
13331: EQUAL
13332: IFFALSE 13352
// Say ( speaker [ 1 ] , VDe-2 ) else
13334: LD_VAR 0 1
13338: PUSH
13339: LD_INT 1
13341: ARRAY
13342: PPUSH
13343: LD_STRING VDe-2
13345: PPUSH
13346: CALL_OW 88
13350: GO 13368
// Say ( speaker [ 1 ] , VDef-2 ) ;
13352: LD_VAR 0 1
13356: PUSH
13357: LD_INT 1
13359: ARRAY
13360: PPUSH
13361: LD_STRING VDef-2
13363: PPUSH
13364: CALL_OW 88
// Say ( us_commander , VDc-4 ) ;
13368: LD_EXP 24
13372: PPUSH
13373: LD_STRING VDc-4
13375: PPUSH
13376: CALL_OW 88
// DialogueOff ;
13380: CALL_OW 7
// ChangeMissionObjectives ( CVulc3 ) ;
13384: LD_STRING CVulc3
13386: PPUSH
13387: CALL_OW 337
// end ;
13391: PPOPN 1
13393: END
// every 0 0$01 trigger your_side = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) > 0 do var i , un , veh ;
13394: LD_OWVAR 2
13398: PUSH
13399: LD_INT 1
13401: EQUAL
13402: PUSH
13403: LD_INT 22
13405: PUSH
13406: LD_INT 1
13408: PUSH
13409: EMPTY
13410: LIST
13411: LIST
13412: PUSH
13413: LD_INT 30
13415: PUSH
13416: LD_INT 3
13418: PUSH
13419: EMPTY
13420: LIST
13421: LIST
13422: PUSH
13423: EMPTY
13424: LIST
13425: LIST
13426: PPUSH
13427: CALL_OW 69
13431: PUSH
13432: LD_INT 0
13434: GREATER
13435: AND
13436: IFFALSE 13882
13438: GO 13440
13440: DISABLE
13441: LD_INT 0
13443: PPUSH
13444: PPUSH
13445: PPUSH
// begin Wait ( Rand ( 0 0$07 , 0 0$37 ) ) ;
13446: LD_INT 245
13448: PPUSH
13449: LD_INT 1295
13451: PPUSH
13452: CALL_OW 12
13456: PPUSH
13457: CALL_OW 67
// DialogueOn ;
13461: CALL_OW 6
// SayRadio ( us_guy , VDG-1 ) ;
13465: LD_EXP 27
13469: PPUSH
13470: LD_STRING VDG-1
13472: PPUSH
13473: CALL_OW 94
// Say ( us_commander , VDc-5 ) ;
13477: LD_EXP 24
13481: PPUSH
13482: LD_STRING VDc-5
13484: PPUSH
13485: CALL_OW 88
// SayRadio ( us_guy , VDG-2 ) ;
13489: LD_EXP 27
13493: PPUSH
13494: LD_STRING VDG-2
13496: PPUSH
13497: CALL_OW 94
// Say ( us_commander , VDc-6 ) ;
13501: LD_EXP 24
13505: PPUSH
13506: LD_STRING VDc-6
13508: PPUSH
13509: CALL_OW 88
// Say ( us_commander , VDc-6a ) ;
13513: LD_EXP 24
13517: PPUSH
13518: LD_STRING VDc-6a
13520: PPUSH
13521: CALL_OW 88
// SayRadio ( us_guy , VDG-3 ) ;
13525: LD_EXP 27
13529: PPUSH
13530: LD_STRING VDG-3
13532: PPUSH
13533: CALL_OW 94
// Say ( us_commander , VDc-7 ) ;
13537: LD_EXP 24
13541: PPUSH
13542: LD_STRING VDc-7
13544: PPUSH
13545: CALL_OW 88
// SayRadio ( us_guy , VDG-4 ) ;
13549: LD_EXP 27
13553: PPUSH
13554: LD_STRING VDG-4
13556: PPUSH
13557: CALL_OW 94
// DialogueOff ;
13561: CALL_OW 7
// ChangeMissionObjectives ( CVulc4 ) ;
13565: LD_STRING CVulc4
13567: PPUSH
13568: CALL_OW 337
// Wait ( [ 9 9$00 , 10 10$00 , 11 11$00 ] [ Difficulty ] ) ;
13572: LD_INT 18900
13574: PUSH
13575: LD_INT 21000
13577: PUSH
13578: LD_INT 23100
13580: PUSH
13581: EMPTY
13582: LIST
13583: LIST
13584: LIST
13585: PUSH
13586: LD_OWVAR 67
13590: ARRAY
13591: PPUSH
13592: CALL_OW 67
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
13596: LD_ADDR_VAR 0 1
13600: PUSH
13601: DOUBLE
13602: LD_INT 1
13604: DEC
13605: ST_TO_ADDR
13606: LD_INT 4
13608: PUSH
13609: LD_INT 5
13611: PUSH
13612: LD_INT 6
13614: PUSH
13615: EMPTY
13616: LIST
13617: LIST
13618: LIST
13619: PUSH
13620: LD_OWVAR 67
13624: ARRAY
13625: PUSH
13626: FOR_TO
13627: IFFALSE 13871
// begin uc_side := 1 ;
13629: LD_ADDR_OWVAR 20
13633: PUSH
13634: LD_INT 1
13636: ST_TO_ADDR
// uc_nation := 1 ;
13637: LD_ADDR_OWVAR 21
13641: PUSH
13642: LD_INT 1
13644: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , us_skill ) ;
13645: LD_INT 0
13647: PPUSH
13648: LD_INT 1
13650: PPUSH
13651: LD_INT 4
13653: PPUSH
13654: CALL_OW 12
13658: PPUSH
13659: LD_EXP 26
13663: PPUSH
13664: CALL_OW 380
// un := CreateHuman ;
13668: LD_ADDR_VAR 0 2
13672: PUSH
13673: CALL_OW 44
13677: ST_TO_ADDR
// SetDir ( un , 2 ) ;
13678: LD_VAR 0 2
13682: PPUSH
13683: LD_INT 2
13685: PPUSH
13686: CALL_OW 233
// if GetClass ( un ) = 3 then
13690: LD_VAR 0 2
13694: PPUSH
13695: CALL_OW 257
13699: PUSH
13700: LD_INT 3
13702: EQUAL
13703: IFFALSE 13854
// begin vc_chassis := [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 ] ;
13705: LD_ADDR_OWVAR 37
13709: PUSH
13710: LD_INT 2
13712: PUSH
13713: LD_INT 3
13715: PUSH
13716: EMPTY
13717: LIST
13718: LIST
13719: PUSH
13720: LD_VAR 0 1
13724: PUSH
13725: LD_INT 2
13727: MOD
13728: ARRAY
13729: ST_TO_ADDR
// vc_engine := engine_combustion ;
13730: LD_ADDR_OWVAR 39
13734: PUSH
13735: LD_INT 1
13737: ST_TO_ADDR
// vc_control := control_manual ;
13738: LD_ADDR_OWVAR 38
13742: PUSH
13743: LD_INT 1
13745: ST_TO_ADDR
// vc_weapon := [ us_laser , us_laser , us_double_gun , us_radar ] [ rand ( 1 , 4 ) ] ;
13746: LD_ADDR_OWVAR 40
13750: PUSH
13751: LD_INT 9
13753: PUSH
13754: LD_INT 9
13756: PUSH
13757: LD_INT 5
13759: PUSH
13760: LD_INT 11
13762: PUSH
13763: EMPTY
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: PUSH
13769: LD_INT 1
13771: PPUSH
13772: LD_INT 4
13774: PPUSH
13775: CALL_OW 12
13779: ARRAY
13780: ST_TO_ADDR
// veh := CreateVehicle ;
13781: LD_ADDR_VAR 0 3
13785: PUSH
13786: CALL_OW 45
13790: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
13791: LD_VAR 0 3
13795: PPUSH
13796: LD_INT 2
13798: PPUSH
13799: CALL_OW 233
// SetFuel ( veh , Rand ( 77 , 88 ) ) ;
13803: LD_VAR 0 3
13807: PPUSH
13808: LD_INT 77
13810: PPUSH
13811: LD_INT 88
13813: PPUSH
13814: CALL_OW 12
13818: PPUSH
13819: CALL_OW 240
// PlaceUnitArea ( veh , start_north , false ) ;
13823: LD_VAR 0 3
13827: PPUSH
13828: LD_INT 1
13830: PPUSH
13831: LD_INT 0
13833: PPUSH
13834: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
13838: LD_VAR 0 2
13842: PPUSH
13843: LD_VAR 0 3
13847: PPUSH
13848: CALL_OW 52
// end else
13852: GO 13869
// PlaceUnitArea ( un , start_north , false ) ;
13854: LD_VAR 0 2
13858: PPUSH
13859: LD_INT 1
13861: PPUSH
13862: LD_INT 0
13864: PPUSH
13865: CALL_OW 49
// end ;
13869: GO 13626
13871: POP
13872: POP
// CenterNowOnUnits ( un ) ;
13873: LD_VAR 0 2
13877: PPUSH
13878: CALL_OW 87
// end ;
13882: PPOPN 3
13884: END
// every 0 0$01 trigger FilterUnitsInArea ( vulc_artifact , [ f_side , your_side ] ) do var un , filter ;
13885: LD_INT 21
13887: PPUSH
13888: LD_INT 22
13890: PUSH
13891: LD_OWVAR 2
13895: PUSH
13896: EMPTY
13897: LIST
13898: LIST
13899: PPUSH
13900: CALL_OW 70
13904: IFFALSE 14225
13906: GO 13908
13908: DISABLE
13909: LD_INT 0
13911: PPUSH
13912: PPUSH
// begin filter := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff player_commander ;
13913: LD_ADDR_VAR 0 2
13917: PUSH
13918: LD_INT 22
13920: PUSH
13921: LD_OWVAR 2
13925: PUSH
13926: EMPTY
13927: LIST
13928: LIST
13929: PUSH
13930: LD_INT 2
13932: PUSH
13933: LD_INT 25
13935: PUSH
13936: LD_INT 1
13938: PUSH
13939: EMPTY
13940: LIST
13941: LIST
13942: PUSH
13943: LD_INT 25
13945: PUSH
13946: LD_INT 2
13948: PUSH
13949: EMPTY
13950: LIST
13951: LIST
13952: PUSH
13953: LD_INT 25
13955: PUSH
13956: LD_INT 3
13958: PUSH
13959: EMPTY
13960: LIST
13961: LIST
13962: PUSH
13963: LD_INT 25
13965: PUSH
13966: LD_INT 4
13968: PUSH
13969: EMPTY
13970: LIST
13971: LIST
13972: PUSH
13973: EMPTY
13974: LIST
13975: LIST
13976: LIST
13977: LIST
13978: LIST
13979: PUSH
13980: EMPTY
13981: LIST
13982: LIST
13983: PPUSH
13984: CALL_OW 69
13988: PUSH
13989: LD_EXP 11
13993: DIFF
13994: ST_TO_ADDR
// un := NearestUnitToXY ( filter , 112 , 67 ) ;
13995: LD_ADDR_VAR 0 1
13999: PUSH
14000: LD_VAR 0 2
14004: PPUSH
14005: LD_INT 112
14007: PPUSH
14008: LD_INT 67
14010: PPUSH
14011: CALL_OW 73
14015: ST_TO_ADDR
// if GetSide ( un ) = 7 then
14016: LD_VAR 0 1
14020: PPUSH
14021: CALL_OW 255
14025: PUSH
14026: LD_INT 7
14028: EQUAL
14029: IFFALSE 14072
// if GetSex ( un ) = sex_male then
14031: LD_VAR 0 1
14035: PPUSH
14036: CALL_OW 258
14040: PUSH
14041: LD_INT 1
14043: EQUAL
14044: IFFALSE 14060
// Say ( un , VD-find-al ) else
14046: LD_VAR 0 1
14050: PPUSH
14051: LD_STRING VD-find-al
14053: PPUSH
14054: CALL_OW 88
14058: GO 14072
// Say ( un , VD-find-al-f ) ;
14060: LD_VAR 0 1
14064: PPUSH
14065: LD_STRING VD-find-al-f
14067: PPUSH
14068: CALL_OW 88
// if GetSide ( un ) = 2 then
14072: LD_VAR 0 1
14076: PPUSH
14077: CALL_OW 255
14081: PUSH
14082: LD_INT 2
14084: EQUAL
14085: IFFALSE 14128
// if GetSex ( un ) = sex_male then
14087: LD_VAR 0 1
14091: PPUSH
14092: CALL_OW 258
14096: PUSH
14097: LD_INT 1
14099: EQUAL
14100: IFFALSE 14116
// Say ( un , VD-find-ar ) else
14102: LD_VAR 0 1
14106: PPUSH
14107: LD_STRING VD-find-ar
14109: PPUSH
14110: CALL_OW 88
14114: GO 14128
// Say ( un , VD-find-ar-f ) ;
14116: LD_VAR 0 1
14120: PPUSH
14121: LD_STRING VD-find-ar-f
14123: PPUSH
14124: CALL_OW 88
// if GetSide ( un ) = 1 then
14128: LD_VAR 0 1
14132: PPUSH
14133: CALL_OW 255
14137: PUSH
14138: LD_INT 1
14140: EQUAL
14141: IFFALSE 14208
// begin if GetSex ( un ) = sex_male then
14143: LD_VAR 0 1
14147: PPUSH
14148: CALL_OW 258
14152: PUSH
14153: LD_INT 1
14155: EQUAL
14156: IFFALSE 14184
// begin Say ( un , VD-find-us ) ;
14158: LD_VAR 0 1
14162: PPUSH
14163: LD_STRING VD-find-us
14165: PPUSH
14166: CALL_OW 88
// Say ( un , VD-find-us2 ) ;
14170: LD_VAR 0 1
14174: PPUSH
14175: LD_STRING VD-find-us2
14177: PPUSH
14178: CALL_OW 88
// end else
14182: GO 14208
// begin Say ( un , VD-find-us-f ) ;
14184: LD_VAR 0 1
14188: PPUSH
14189: LD_STRING VD-find-us-f
14191: PPUSH
14192: CALL_OW 88
// Say ( un , VD-find-us2-f ) ;
14196: LD_VAR 0 1
14200: PPUSH
14201: LD_STRING VD-find-us2-f
14203: PPUSH
14204: CALL_OW 88
// end ; end ; Wait ( 0 0$0.3 ) ;
14208: LD_INT 10
14210: PPUSH
14211: CALL_OW 67
// CenterNowOnXY ( 112 , 67 ) ;
14215: LD_INT 112
14217: PPUSH
14218: LD_INT 67
14220: PPUSH
14221: CALL_OW 86
// end ;
14225: PPOPN 2
14227: END
// every 0 0$01 trigger player_artifact_ready do var speaker ;
14228: LD_EXP 8
14232: IFFALSE 14734
14234: GO 14236
14236: DISABLE
14237: LD_INT 0
14239: PPUSH
// begin if your_side = 1 then
14240: LD_OWVAR 2
14244: PUSH
14245: LD_INT 1
14247: EQUAL
14248: IFFALSE 14429
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) diff us_commander ;
14250: LD_ADDR_VAR 0 1
14254: PUSH
14255: LD_INT 22
14257: PUSH
14258: LD_INT 1
14260: PUSH
14261: EMPTY
14262: LIST
14263: LIST
14264: PUSH
14265: LD_INT 25
14267: PUSH
14268: LD_INT 4
14270: PUSH
14271: EMPTY
14272: LIST
14273: LIST
14274: PUSH
14275: EMPTY
14276: LIST
14277: LIST
14278: PPUSH
14279: CALL_OW 69
14283: PUSH
14284: LD_EXP 24
14288: DIFF
14289: ST_TO_ADDR
// if not speaker then
14290: LD_VAR 0 1
14294: NOT
14295: IFFALSE 14299
// exit ;
14297: GO 14734
// if GetSex ( speaker [ 1 ] ) = sex_male then
14299: LD_VAR 0 1
14303: PUSH
14304: LD_INT 1
14306: ARRAY
14307: PPUSH
14308: CALL_OW 258
14312: PUSH
14313: LD_INT 1
14315: EQUAL
14316: IFFALSE 14336
// Say ( speaker [ 1 ] , VD-us-sci-art-1 ) else
14318: LD_VAR 0 1
14322: PUSH
14323: LD_INT 1
14325: ARRAY
14326: PPUSH
14327: LD_STRING VD-us-sci-art-1
14329: PPUSH
14330: CALL_OW 88
14334: GO 14352
// Say ( speaker [ 1 ] , VD-us-fsci-art-1 ) ;
14336: LD_VAR 0 1
14340: PUSH
14341: LD_INT 1
14343: ARRAY
14344: PPUSH
14345: LD_STRING VD-us-fsci-art-1
14347: PPUSH
14348: CALL_OW 88
// Say ( us_commander , VDc-art1 ) ;
14352: LD_EXP 24
14356: PPUSH
14357: LD_STRING VDc-art1
14359: PPUSH
14360: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
14364: LD_VAR 0 1
14368: PUSH
14369: LD_INT 1
14371: ARRAY
14372: PPUSH
14373: CALL_OW 258
14377: PUSH
14378: LD_INT 1
14380: EQUAL
14381: IFFALSE 14401
// Say ( speaker [ 1 ] , VD-us-sci-art-2 ) else
14383: LD_VAR 0 1
14387: PUSH
14388: LD_INT 1
14390: ARRAY
14391: PPUSH
14392: LD_STRING VD-us-sci-art-2
14394: PPUSH
14395: CALL_OW 88
14399: GO 14417
// Say ( speaker [ 1 ] , VD-us-fsci-art-2 ) ;
14401: LD_VAR 0 1
14405: PUSH
14406: LD_INT 1
14408: ARRAY
14409: PPUSH
14410: LD_STRING VD-us-fsci-art-2
14412: PPUSH
14413: CALL_OW 88
// Say ( us_commander , VDc-art2 ) ;
14417: LD_EXP 24
14421: PPUSH
14422: LD_STRING VDc-art2
14424: PPUSH
14425: CALL_OW 88
// end ; if your_side = 2 then
14429: LD_OWVAR 2
14433: PUSH
14434: LD_INT 2
14436: EQUAL
14437: IFFALSE 14541
// begin speaker := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) diff ar_commander ;
14439: LD_ADDR_VAR 0 1
14443: PUSH
14444: LD_INT 22
14446: PUSH
14447: LD_INT 2
14449: PUSH
14450: EMPTY
14451: LIST
14452: LIST
14453: PUSH
14454: LD_INT 25
14456: PUSH
14457: LD_INT 4
14459: PUSH
14460: EMPTY
14461: LIST
14462: LIST
14463: PUSH
14464: EMPTY
14465: LIST
14466: LIST
14467: PPUSH
14468: CALL_OW 69
14472: PUSH
14473: LD_EXP 57
14477: DIFF
14478: ST_TO_ADDR
// if not speaker then
14479: LD_VAR 0 1
14483: NOT
14484: IFFALSE 14488
// exit ;
14486: GO 14734
// if GetSex ( speaker [ 1 ] ) = sex_male then
14488: LD_VAR 0 1
14492: PUSH
14493: LD_INT 1
14495: ARRAY
14496: PPUSH
14497: CALL_OW 258
14501: PUSH
14502: LD_INT 1
14504: EQUAL
14505: IFFALSE 14525
// Say ( speaker [ 1 ] , VD-ar-sci-art-1 ) else
14507: LD_VAR 0 1
14511: PUSH
14512: LD_INT 1
14514: ARRAY
14515: PPUSH
14516: LD_STRING VD-ar-sci-art-1
14518: PPUSH
14519: CALL_OW 88
14523: GO 14541
// Say ( speaker [ 1 ] , VD-ar-fsci-art-1 ) ;
14525: LD_VAR 0 1
14529: PUSH
14530: LD_INT 1
14532: ARRAY
14533: PPUSH
14534: LD_STRING VD-ar-fsci-art-1
14536: PPUSH
14537: CALL_OW 88
// end ; if your_side = 7 then
14541: LD_OWVAR 2
14545: PUSH
14546: LD_INT 7
14548: EQUAL
14549: IFFALSE 14734
// begin speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 4 ] ] ) diff al_commander ;
14551: LD_ADDR_VAR 0 1
14555: PUSH
14556: LD_INT 22
14558: PUSH
14559: LD_INT 7
14561: PUSH
14562: EMPTY
14563: LIST
14564: LIST
14565: PUSH
14566: LD_INT 25
14568: PUSH
14569: LD_INT 4
14571: PUSH
14572: EMPTY
14573: LIST
14574: LIST
14575: PUSH
14576: EMPTY
14577: LIST
14578: LIST
14579: PPUSH
14580: CALL_OW 69
14584: PUSH
14585: LD_EXP 43
14589: DIFF
14590: ST_TO_ADDR
// if speaker then
14591: LD_VAR 0 1
14595: IFFALSE 14727
// begin if GetSex ( speaker [ 1 ] ) = sex_male then
14597: LD_VAR 0 1
14601: PUSH
14602: LD_INT 1
14604: ARRAY
14605: PPUSH
14606: CALL_OW 258
14610: PUSH
14611: LD_INT 1
14613: EQUAL
14614: IFFALSE 14634
// Say ( speaker [ 1 ] , VD-al-sci-art-1 ) else
14616: LD_VAR 0 1
14620: PUSH
14621: LD_INT 1
14623: ARRAY
14624: PPUSH
14625: LD_STRING VD-al-sci-art-1
14627: PPUSH
14628: CALL_OW 88
14632: GO 14650
// Say ( speaker [ 1 ] , VD-al-fsci-art-1 ) ;
14634: LD_VAR 0 1
14638: PUSH
14639: LD_INT 1
14641: ARRAY
14642: PPUSH
14643: LD_STRING VD-al-fsci-art-1
14645: PPUSH
14646: CALL_OW 88
// Say ( al_commander , VPd-art-1 ) ;
14650: LD_EXP 43
14654: PPUSH
14655: LD_STRING VPd-art-1
14657: PPUSH
14658: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
14662: LD_VAR 0 1
14666: PUSH
14667: LD_INT 1
14669: ARRAY
14670: PPUSH
14671: CALL_OW 258
14675: PUSH
14676: LD_INT 1
14678: EQUAL
14679: IFFALSE 14699
// Say ( speaker [ 1 ] , VD-al-sci-art-2 ) else
14681: LD_VAR 0 1
14685: PUSH
14686: LD_INT 1
14688: ARRAY
14689: PPUSH
14690: LD_STRING VD-al-sci-art-2
14692: PPUSH
14693: CALL_OW 88
14697: GO 14715
// Say ( speaker [ 1 ] , VD-al-fsci-art-2 ) ;
14699: LD_VAR 0 1
14703: PUSH
14704: LD_INT 1
14706: ARRAY
14707: PPUSH
14708: LD_STRING VD-al-fsci-art-2
14710: PPUSH
14711: CALL_OW 88
// Say ( al_commander , VPd-art-2 ) ;
14715: LD_EXP 43
14719: PPUSH
14720: LD_STRING VPd-art-2
14722: PPUSH
14723: CALL_OW 88
// end ; ChangeMissionObjectives ( CVulc7out ) ;
14727: LD_STRING CVulc7out
14729: PPUSH
14730: CALL_OW 337
// end ; end ;
14734: PPOPN 1
14736: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_see , 8 ] ] ) do var speaker ;
14737: LD_INT 22
14739: PUSH
14740: LD_OWVAR 2
14744: PUSH
14745: EMPTY
14746: LIST
14747: LIST
14748: PUSH
14749: LD_INT 101
14751: PUSH
14752: LD_INT 8
14754: PUSH
14755: EMPTY
14756: LIST
14757: LIST
14758: PUSH
14759: EMPTY
14760: LIST
14761: LIST
14762: PPUSH
14763: CALL_OW 69
14767: IFFALSE 14910
14769: GO 14771
14771: DISABLE
14772: LD_INT 0
14774: PPUSH
// begin if your_side = 1 then
14775: LD_OWVAR 2
14779: PUSH
14780: LD_INT 1
14782: EQUAL
14783: IFFALSE 14866
// begin speaker := FilterAllUnits ( [ f_side , 1 ] ) diff us_commander ;
14785: LD_ADDR_VAR 0 1
14789: PUSH
14790: LD_INT 22
14792: PUSH
14793: LD_INT 1
14795: PUSH
14796: EMPTY
14797: LIST
14798: LIST
14799: PPUSH
14800: CALL_OW 69
14804: PUSH
14805: LD_EXP 24
14809: DIFF
14810: ST_TO_ADDR
// if speaker then
14811: LD_VAR 0 1
14815: IFFALSE 14866
// if GetSex ( speaker [ 1 ] ) then
14817: LD_VAR 0 1
14821: PUSH
14822: LD_INT 1
14824: ARRAY
14825: PPUSH
14826: CALL_OW 258
14830: IFFALSE 14850
// Say ( speaker [ 1 ] , VD-legion-us ) else
14832: LD_VAR 0 1
14836: PUSH
14837: LD_INT 1
14839: ARRAY
14840: PPUSH
14841: LD_STRING VD-legion-us
14843: PPUSH
14844: CALL_OW 88
14848: GO 14866
// Say ( speaker [ 1 ] , VD-legion-us-f ) ;
14850: LD_VAR 0 1
14854: PUSH
14855: LD_INT 1
14857: ARRAY
14858: PPUSH
14859: LD_STRING VD-legion-us-f
14861: PPUSH
14862: CALL_OW 88
// end ; if your_side = 2 then
14866: LD_OWVAR 2
14870: PUSH
14871: LD_INT 2
14873: EQUAL
14874: IFFALSE 14888
// Say ( ar_commander , VD-legion-ar ) ;
14876: LD_EXP 57
14880: PPUSH
14881: LD_STRING VD-legion-ar
14883: PPUSH
14884: CALL_OW 88
// if your_side = 7 then
14888: LD_OWVAR 2
14892: PUSH
14893: LD_INT 7
14895: EQUAL
14896: IFFALSE 14910
// Say ( al_commander , VD-legion-al ) ;
14898: LD_EXP 43
14902: PPUSH
14903: LD_STRING VD-legion-al
14905: PPUSH
14906: CALL_OW 88
// end ;
14910: PPOPN 1
14912: END
// every 0 0$01 trigger mine_vulc do
14913: LD_EXP 13
14917: IFFALSE 14934
14919: GO 14921
14921: DISABLE
// begin Say ( player_commander , VD-vulc-mines ) ;
14922: LD_EXP 11
14926: PPUSH
14927: LD_STRING VD-vulc-mines
14929: PPUSH
14930: CALL_OW 88
// end ;
14934: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 3 ] ) = 0 and your_side <> 2 do
14935: LD_INT 22
14937: PUSH
14938: LD_INT 3
14940: PUSH
14941: EMPTY
14942: LIST
14943: LIST
14944: PPUSH
14945: CALL_OW 69
14949: PUSH
14950: LD_INT 0
14952: EQUAL
14953: PUSH
14954: LD_OWVAR 2
14958: PUSH
14959: LD_INT 2
14961: NONEQUAL
14962: AND
14963: IFFALSE 14972
14965: GO 14967
14967: DISABLE
// Win ;
14968: CALL 15029 0 0
14972: END
// every 0 0$01 trigger FilterAllUnits ( [ f_or , [ f_side , 8 ] , [ f_side , 3 ] ] ) = 0 and your_side = 2 do
14973: LD_INT 2
14975: PUSH
14976: LD_INT 22
14978: PUSH
14979: LD_INT 8
14981: PUSH
14982: EMPTY
14983: LIST
14984: LIST
14985: PUSH
14986: LD_INT 22
14988: PUSH
14989: LD_INT 3
14991: PUSH
14992: EMPTY
14993: LIST
14994: LIST
14995: PUSH
14996: EMPTY
14997: LIST
14998: LIST
14999: LIST
15000: PPUSH
15001: CALL_OW 69
15005: PUSH
15006: LD_INT 0
15008: EQUAL
15009: PUSH
15010: LD_OWVAR 2
15014: PUSH
15015: LD_INT 2
15017: EQUAL
15018: AND
15019: IFFALSE 15028
15021: GO 15023
15023: DISABLE
// Win ;
15024: CALL 15029 0 0
15028: END
// function Win ; var points ; begin
15029: LD_INT 0
15031: PPUSH
15032: PPUSH
// case Query ( VulcWin ) of 1 :
15033: LD_STRING VulcWin
15035: PPUSH
15036: CALL_OW 97
15040: PUSH
15041: LD_INT 1
15043: DOUBLE
15044: EQUAL
15045: IFTRUE 15049
15047: GO 15052
15049: POP
// ; end ;
15050: GO 15053
15052: POP
// if medal_enabled then
15053: LD_EXP 14
15057: IFFALSE 15071
// AddMedal ( vulc_1 , 1 ) else
15059: LD_STRING vulc_1
15061: PPUSH
15062: LD_INT 1
15064: PPUSH
15065: CALL_OW 101
15069: GO 15082
// AddMedal ( vulc_1 , - 1 ) ;
15071: LD_STRING vulc_1
15073: PPUSH
15074: LD_INT 1
15076: NEG
15077: PPUSH
15078: CALL_OW 101
// if FilterAllUnits ( [ f_side , 8 ] ) = 0 then
15082: LD_INT 22
15084: PUSH
15085: LD_INT 8
15087: PUSH
15088: EMPTY
15089: LIST
15090: LIST
15091: PPUSH
15092: CALL_OW 69
15096: PUSH
15097: LD_INT 0
15099: EQUAL
15100: IFFALSE 15114
// AddMedal ( vulc_2 , 1 ) else
15102: LD_STRING vulc_2
15104: PPUSH
15105: LD_INT 1
15107: PPUSH
15108: CALL_OW 101
15112: GO 15125
// AddMedal ( vulc_2 , - 1 ) ;
15114: LD_STRING vulc_2
15116: PPUSH
15117: LD_INT 1
15119: NEG
15120: PPUSH
15121: CALL_OW 101
// points := CalculateCommanderPoints ;
15125: LD_ADDR_VAR 0 2
15129: PUSH
15130: CALL 2376 0 0
15134: ST_TO_ADDR
// if points >= 2000 then
15135: LD_VAR 0 2
15139: PUSH
15140: LD_INT 2000
15142: GREATEREQUAL
15143: IFFALSE 15157
// AddMedal ( vulc_3 , 2 ) else
15145: LD_STRING vulc_3
15147: PPUSH
15148: LD_INT 2
15150: PPUSH
15151: CALL_OW 101
15155: GO 15190
// if points >= 0 then
15157: LD_VAR 0 2
15161: PUSH
15162: LD_INT 0
15164: GREATEREQUAL
15165: IFFALSE 15179
// AddMedal ( vulc_3 , 1 ) else
15167: LD_STRING vulc_3
15169: PPUSH
15170: LD_INT 1
15172: PPUSH
15173: CALL_OW 101
15177: GO 15190
// AddMedal ( vulc_3 , - 1 ) ;
15179: LD_STRING vulc_3
15181: PPUSH
15182: LD_INT 1
15184: NEG
15185: PPUSH
15186: CALL_OW 101
// GiveMedals ( MAIN ) ;
15190: LD_STRING MAIN
15192: PPUSH
15193: CALL_OW 102
// YouWin ;
15197: CALL_OW 103
// end ; end_of_file
15201: LD_VAR 0 1
15205: RET
// every 0 0$01 trigger FilterUnitsInArea ( vulcano_area , [ f_type , unit_human ] ) do var i , un ;
15206: LD_INT 13
15208: PPUSH
15209: LD_INT 21
15211: PUSH
15212: LD_INT 1
15214: PUSH
15215: EMPTY
15216: LIST
15217: LIST
15218: PPUSH
15219: CALL_OW 70
15223: IFFALSE 15283
15225: GO 15227
15227: DISABLE
15228: LD_INT 0
15230: PPUSH
15231: PPUSH
// begin enable ;
15232: ENABLE
// for i in FilterUnitsInArea ( vulcano_area , [ f_type , unit_human ] ) do
15233: LD_ADDR_VAR 0 1
15237: PUSH
15238: LD_INT 13
15240: PPUSH
15241: LD_INT 21
15243: PUSH
15244: LD_INT 1
15246: PUSH
15247: EMPTY
15248: LIST
15249: LIST
15250: PPUSH
15251: CALL_OW 70
15255: PUSH
15256: FOR_IN
15257: IFFALSE 15281
// if GetLives ( i ) then
15259: LD_VAR 0 1
15263: PPUSH
15264: CALL_OW 256
15268: IFFALSE 15279
// KillUnit ( i ) ;
15270: LD_VAR 0 1
15274: PPUSH
15275: CALL_OW 66
15279: GO 15256
15281: POP
15282: POP
// end ;
15283: PPOPN 2
15285: END
// on ArtifactResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
15286: LD_VAR 0 1
15290: PPUSH
15291: CALL_OW 255
15295: PUSH
15296: LD_OWVAR 2
15300: EQUAL
15301: IFFALSE 15311
// player_res_art := true ;
15303: LD_ADDR_EXP 6
15307: PUSH
15308: LD_INT 1
15310: ST_TO_ADDR
// end ;
15311: PPOPN 1
15313: END
// every 0 0$03 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) and player_res_art do var xy , lab ;
15314: LD_INT 22
15316: PUSH
15317: LD_OWVAR 2
15321: PUSH
15322: EMPTY
15323: LIST
15324: LIST
15325: PUSH
15326: LD_INT 2
15328: PUSH
15329: LD_INT 30
15331: PUSH
15332: LD_INT 7
15334: PUSH
15335: EMPTY
15336: LIST
15337: LIST
15338: PUSH
15339: LD_INT 30
15341: PUSH
15342: LD_INT 8
15344: PUSH
15345: EMPTY
15346: LIST
15347: LIST
15348: PUSH
15349: LD_INT 30
15351: PUSH
15352: LD_INT 11
15354: PUSH
15355: EMPTY
15356: LIST
15357: LIST
15358: PUSH
15359: EMPTY
15360: LIST
15361: LIST
15362: LIST
15363: LIST
15364: PUSH
15365: EMPTY
15366: LIST
15367: LIST
15368: PPUSH
15369: CALL_OW 69
15373: PUSH
15374: LD_EXP 6
15378: AND
15379: IFFALSE 15736
15381: GO 15383
15383: DISABLE
15384: LD_INT 0
15386: PPUSH
15387: PPUSH
// begin enable ;
15388: ENABLE
// xy := FindArtifact ( 1 ) ;
15389: LD_ADDR_VAR 0 1
15393: PUSH
15394: LD_INT 1
15396: PPUSH
15397: CALL_OW 469
15401: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_siberium ] ] ] ) , xy [ 1 ] , xy [ 2 ] ) ;
15402: LD_ADDR_VAR 0 2
15406: PUSH
15407: LD_INT 22
15409: PUSH
15410: LD_OWVAR 2
15414: PUSH
15415: EMPTY
15416: LIST
15417: LIST
15418: PUSH
15419: LD_INT 2
15421: PUSH
15422: LD_INT 30
15424: PUSH
15425: LD_INT 8
15427: PUSH
15428: EMPTY
15429: LIST
15430: LIST
15431: PUSH
15432: LD_INT 30
15434: PUSH
15435: LD_INT 7
15437: PUSH
15438: EMPTY
15439: LIST
15440: LIST
15441: PUSH
15442: LD_INT 30
15444: PUSH
15445: LD_INT 11
15447: PUSH
15448: EMPTY
15449: LIST
15450: LIST
15451: PUSH
15452: EMPTY
15453: LIST
15454: LIST
15455: LIST
15456: LIST
15457: PUSH
15458: EMPTY
15459: LIST
15460: LIST
15461: PPUSH
15462: CALL_OW 69
15466: PPUSH
15467: LD_VAR 0 1
15471: PUSH
15472: LD_INT 1
15474: ARRAY
15475: PPUSH
15476: LD_VAR 0 1
15480: PUSH
15481: LD_INT 2
15483: ARRAY
15484: PPUSH
15485: CALL_OW 73
15489: ST_TO_ADDR
// if player_artifact_ready = false then
15490: LD_EXP 8
15494: PUSH
15495: LD_INT 0
15497: EQUAL
15498: IFFALSE 15612
// if GetDistUnitXY ( lab , xy [ 1 ] , xy [ 2 ] ) < 6 then
15500: LD_VAR 0 2
15504: PPUSH
15505: LD_VAR 0 1
15509: PUSH
15510: LD_INT 1
15512: ARRAY
15513: PPUSH
15514: LD_VAR 0 1
15518: PUSH
15519: LD_INT 2
15521: ARRAY
15522: PPUSH
15523: CALL_OW 297
15527: PUSH
15528: LD_INT 6
15530: LESS
15531: IFFALSE 15592
// begin if BuildingStatus ( lab ) = bs_idle then
15533: LD_VAR 0 2
15537: PPUSH
15538: CALL_OW 461
15542: PUSH
15543: LD_INT 2
15545: EQUAL
15546: IFFALSE 15570
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) else
15548: LD_OWVAR 2
15552: PPUSH
15553: LD_INT 1
15555: PPUSH
15556: LD_INT 2
15558: PPUSH
15559: LD_VAR 0 2
15563: PPUSH
15564: CALL_OW 468
15568: GO 15590
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
15570: LD_OWVAR 2
15574: PPUSH
15575: LD_INT 1
15577: PPUSH
15578: LD_INT 1
15580: PPUSH
15581: LD_VAR 0 2
15585: PPUSH
15586: CALL_OW 468
// end else
15590: GO 15612
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
15592: LD_OWVAR 2
15596: PPUSH
15597: LD_INT 1
15599: PPUSH
15600: LD_INT 1
15602: PPUSH
15603: LD_VAR 0 2
15607: PPUSH
15608: CALL_OW 468
// if player_artifact_ready then
15612: LD_EXP 8
15616: IFFALSE 15736
// if GetDistUnitXY ( lab , xy [ 1 ] , xy [ 2 ] ) < 6 then
15618: LD_VAR 0 2
15622: PPUSH
15623: LD_VAR 0 1
15627: PUSH
15628: LD_INT 1
15630: ARRAY
15631: PPUSH
15632: LD_VAR 0 1
15636: PUSH
15637: LD_INT 2
15639: ARRAY
15640: PPUSH
15641: CALL_OW 297
15645: PUSH
15646: LD_INT 6
15648: LESS
15649: IFFALSE 15714
// begin if BuildingStatus ( lab ) = bs_idle then
15651: LD_VAR 0 2
15655: PPUSH
15656: CALL_OW 461
15660: PUSH
15661: LD_INT 2
15663: EQUAL
15664: IFFALSE 15690
// SetArtifactUse ( your_side , art_icon , art_unit , lab ) else
15666: LD_OWVAR 2
15670: PPUSH
15671: LD_EXP 9
15675: PPUSH
15676: LD_INT 4
15678: PPUSH
15679: LD_VAR 0 2
15683: PPUSH
15684: CALL_OW 468
15688: GO 15712
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
15690: LD_OWVAR 2
15694: PPUSH
15695: LD_EXP 9
15699: PPUSH
15700: LD_INT 1
15702: PPUSH
15703: LD_VAR 0 2
15707: PPUSH
15708: CALL_OW 468
// end else
15712: GO 15736
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
15714: LD_OWVAR 2
15718: PPUSH
15719: LD_EXP 9
15723: PPUSH
15724: LD_INT 1
15726: PPUSH
15727: LD_VAR 0 2
15731: PPUSH
15732: CALL_OW 468
// end ;
15736: PPOPN 2
15738: END
// on ArtifactUsed ( s , icon , cr1 , cr2 ) do var xy , i , lab , side ;
15739: LD_INT 0
15741: PPUSH
15742: PPUSH
15743: PPUSH
15744: PPUSH
// begin xy := FindArtifact ( 1 ) ;
15745: LD_ADDR_VAR 0 5
15749: PUSH
15750: LD_INT 1
15752: PPUSH
15753: CALL_OW 469
15757: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , xy [ 1 ] , xy [ 2 ] ) ;
15758: LD_ADDR_VAR 0 7
15762: PUSH
15763: LD_INT 22
15765: PUSH
15766: LD_OWVAR 2
15770: PUSH
15771: EMPTY
15772: LIST
15773: LIST
15774: PUSH
15775: LD_INT 2
15777: PUSH
15778: LD_INT 30
15780: PUSH
15781: LD_INT 8
15783: PUSH
15784: EMPTY
15785: LIST
15786: LIST
15787: PUSH
15788: LD_INT 30
15790: PUSH
15791: LD_INT 11
15793: PUSH
15794: EMPTY
15795: LIST
15796: LIST
15797: PUSH
15798: EMPTY
15799: LIST
15800: LIST
15801: LIST
15802: PUSH
15803: EMPTY
15804: LIST
15805: LIST
15806: PPUSH
15807: CALL_OW 69
15811: PPUSH
15812: LD_VAR 0 5
15816: PUSH
15817: LD_INT 1
15819: ARRAY
15820: PPUSH
15821: LD_VAR 0 5
15825: PUSH
15826: LD_INT 2
15828: ARRAY
15829: PPUSH
15830: CALL_OW 73
15834: ST_TO_ADDR
// if icon = art_exp_left then
15835: LD_VAR 0 2
15839: PUSH
15840: LD_INT 1
15842: EQUAL
15843: IFFALSE 15896
// begin SetSpecResearch ( lab , time_res_art , true ) ;
15845: LD_VAR 0 7
15849: PPUSH
15850: LD_EXP 10
15854: PPUSH
15855: LD_INT 1
15857: PPUSH
15858: CALL_OW 486
// SetWorkingProgress ( lab , artifact_progress ) ;
15862: LD_VAR 0 7
15866: PPUSH
15867: LD_EXP 7
15871: PPUSH
15872: CALL_OW 329
// SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
15876: LD_OWVAR 2
15880: PPUSH
15881: LD_INT 1
15883: PPUSH
15884: LD_INT 0
15886: PPUSH
15887: LD_VAR 0 7
15891: PPUSH
15892: CALL_OW 468
// end ; if icon = art_icon then
15896: LD_VAR 0 2
15900: PUSH
15901: LD_EXP 9
15905: EQUAL
15906: IFFALSE 16139
// begin if cr1 in FilterAllUnits ( [ f_type , unit_building ] ) then
15908: LD_VAR 0 3
15912: PUSH
15913: LD_INT 21
15915: PUSH
15916: LD_INT 3
15918: PUSH
15919: EMPTY
15920: LIST
15921: LIST
15922: PPUSH
15923: CALL_OW 69
15927: IN
15928: IFFALSE 16139
// begin side := GetSide ( cr1 ) ;
15930: LD_ADDR_VAR 0 8
15934: PUSH
15935: LD_VAR 0 3
15939: PPUSH
15940: CALL_OW 255
15944: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_siberite_power ] ] ) > 0 then
15945: LD_INT 22
15947: PUSH
15948: LD_VAR 0 8
15952: PUSH
15953: EMPTY
15954: LIST
15955: LIST
15956: PUSH
15957: LD_INT 30
15959: PUSH
15960: LD_INT 28
15962: PUSH
15963: EMPTY
15964: LIST
15965: LIST
15966: PUSH
15967: EMPTY
15968: LIST
15969: LIST
15970: PPUSH
15971: CALL_OW 69
15975: PUSH
15976: LD_INT 0
15978: GREATER
15979: IFFALSE 16139
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_solar_power ] , [ f_btype , b_siberite_power ] ] ] ) do
15981: LD_ADDR_VAR 0 6
15985: PUSH
15986: LD_INT 22
15988: PUSH
15989: LD_VAR 0 8
15993: PUSH
15994: EMPTY
15995: LIST
15996: LIST
15997: PUSH
15998: LD_INT 2
16000: PUSH
16001: LD_INT 30
16003: PUSH
16004: LD_INT 26
16006: PUSH
16007: EMPTY
16008: LIST
16009: LIST
16010: PUSH
16011: LD_INT 30
16013: PUSH
16014: LD_INT 27
16016: PUSH
16017: EMPTY
16018: LIST
16019: LIST
16020: PUSH
16021: LD_INT 30
16023: PUSH
16024: LD_INT 28
16026: PUSH
16027: EMPTY
16028: LIST
16029: LIST
16030: PUSH
16031: EMPTY
16032: LIST
16033: LIST
16034: LIST
16035: LIST
16036: PUSH
16037: EMPTY
16038: LIST
16039: LIST
16040: PPUSH
16041: CALL_OW 69
16045: PUSH
16046: FOR_IN
16047: IFFALSE 16060
// KillUnit ( i ) ;
16049: LD_VAR 0 6
16053: PPUSH
16054: CALL_OW 66
16058: GO 16046
16060: POP
16061: POP
// medal_enabled := true ;
16062: LD_ADDR_EXP 14
16066: PUSH
16067: LD_INT 1
16069: ST_TO_ADDR
// player_res_art := false ;
16070: LD_ADDR_EXP 6
16074: PUSH
16075: LD_INT 0
16077: ST_TO_ADDR
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
16078: LD_OWVAR 2
16082: PPUSH
16083: LD_EXP 9
16087: PPUSH
16088: LD_INT 1
16090: PPUSH
16091: LD_VAR 0 7
16095: PPUSH
16096: CALL_OW 468
// wait ( time_to_reuse ) ;
16100: LD_EXP 12
16104: PPUSH
16105: CALL_OW 67
// SetArtifactUse ( your_side , art_icon , art_unit , lab ) ;
16109: LD_OWVAR 2
16113: PPUSH
16114: LD_EXP 9
16118: PPUSH
16119: LD_INT 4
16121: PPUSH
16122: LD_VAR 0 7
16126: PPUSH
16127: CALL_OW 468
// player_res_art := true ;
16131: LD_ADDR_EXP 6
16135: PUSH
16136: LD_INT 1
16138: ST_TO_ADDR
// end ; end ; end ; end ;
16139: PPOPN 8
16141: END
// on SpecResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
16142: LD_VAR 0 1
16146: PPUSH
16147: CALL_OW 255
16151: PUSH
16152: LD_OWVAR 2
16156: EQUAL
16157: IFFALSE 16194
// begin SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
16159: LD_OWVAR 2
16163: PPUSH
16164: LD_INT 1
16166: PPUSH
16167: LD_INT 0
16169: PPUSH
16170: LD_VAR 0 1
16174: PPUSH
16175: CALL_OW 468
// player_artifact_ready := true ;
16179: LD_ADDR_EXP 8
16183: PUSH
16184: LD_INT 1
16186: ST_TO_ADDR
// Hint ( ArtVulcano ) ;
16187: LD_STRING ArtVulcano
16189: PPUSH
16190: CALL_OW 339
// end ; end ;
16194: PPOPN 1
16196: END
// on SpecResearchCancel ( lab , progress ) do begin artifact_progress := progress ;
16197: LD_ADDR_EXP 7
16201: PUSH
16202: LD_VAR 0 2
16206: ST_TO_ADDR
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) ;
16207: LD_OWVAR 2
16211: PPUSH
16212: LD_INT 1
16214: PPUSH
16215: LD_INT 2
16217: PPUSH
16218: LD_VAR 0 1
16222: PPUSH
16223: CALL_OW 468
// end ; end_of_file end_of_file
16227: PPOPN 2
16229: END
// export al_commander , al_force , al_skill ; export function PrepareAlliance ; var i , filter , un , team ; begin
16230: LD_INT 0
16232: PPUSH
16233: PPUSH
16234: PPUSH
16235: PPUSH
16236: PPUSH
// al_skill := [ 7 , 6 , 5 ] [ Difficulty ] ;
16237: LD_ADDR_EXP 45
16241: PUSH
16242: LD_INT 7
16244: PUSH
16245: LD_INT 6
16247: PUSH
16248: LD_INT 5
16250: PUSH
16251: EMPTY
16252: LIST
16253: LIST
16254: LIST
16255: PUSH
16256: LD_OWVAR 67
16260: ARRAY
16261: ST_TO_ADDR
// al_force := [ ] ;
16262: LD_ADDR_EXP 44
16266: PUSH
16267: EMPTY
16268: ST_TO_ADDR
// RemoveAlliance ;
16269: CALL 16962 0 0
// ResetFog ;
16273: CALL_OW 335
// your_side := 7 ;
16277: LD_ADDR_OWVAR 2
16281: PUSH
16282: LD_INT 7
16284: ST_TO_ADDR
// uc_side := 7 ;
16285: LD_ADDR_OWVAR 20
16289: PUSH
16290: LD_INT 7
16292: ST_TO_ADDR
// hc_gallery :=  ;
16293: LD_ADDR_OWVAR 33
16297: PUSH
16298: LD_STRING 
16300: ST_TO_ADDR
// hc_name :=  ;
16301: LD_ADDR_OWVAR 26
16305: PUSH
16306: LD_STRING 
16308: ST_TO_ADDR
// hc_importance := 0 ;
16309: LD_ADDR_OWVAR 32
16313: PUSH
16314: LD_INT 0
16316: ST_TO_ADDR
// for i = 1 to 17 do
16317: LD_ADDR_VAR 0 2
16321: PUSH
16322: DOUBLE
16323: LD_INT 1
16325: DEC
16326: ST_TO_ADDR
16327: LD_INT 17
16329: PUSH
16330: FOR_TO
16331: IFFALSE 16411
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
16333: LD_ADDR_OWVAR 21
16337: PUSH
16338: LD_INT 1
16340: PUSH
16341: LD_INT 3
16343: PUSH
16344: EMPTY
16345: LIST
16346: LIST
16347: PUSH
16348: LD_INT 1
16350: PPUSH
16351: LD_INT 2
16353: PPUSH
16354: CALL_OW 12
16358: ARRAY
16359: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , al_skill ) ;
16360: LD_INT 0
16362: PPUSH
16363: LD_INT 1
16365: PPUSH
16366: LD_INT 4
16368: PPUSH
16369: CALL_OW 12
16373: PPUSH
16374: LD_EXP 45
16378: PPUSH
16379: CALL_OW 380
// un := CreateHuman ;
16383: LD_ADDR_VAR 0 4
16387: PUSH
16388: CALL_OW 44
16392: ST_TO_ADDR
// al_force := al_force ^ un ;
16393: LD_ADDR_EXP 44
16397: PUSH
16398: LD_EXP 44
16402: PUSH
16403: LD_VAR 0 4
16407: ADD
16408: ST_TO_ADDR
// end ;
16409: GO 16330
16411: POP
16412: POP
// hc_importance := 100 ;
16413: LD_ADDR_OWVAR 32
16417: PUSH
16418: LD_INT 100
16420: ST_TO_ADDR
// uc_nation := 3 ;
16421: LD_ADDR_OWVAR 21
16425: PUSH
16426: LD_INT 3
16428: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , al_skill ) ;
16429: LD_INT 1
16431: PPUSH
16432: LD_INT 1
16434: PPUSH
16435: LD_EXP 45
16439: PPUSH
16440: CALL_OW 380
// hc_gallery := skirmish ;
16444: LD_ADDR_OWVAR 33
16448: PUSH
16449: LD_STRING skirmish
16451: ST_TO_ADDR
// hc_face_number := 8 ;
16452: LD_ADDR_OWVAR 34
16456: PUSH
16457: LD_INT 8
16459: ST_TO_ADDR
// hc_name := Trofim Petya ;
16460: LD_ADDR_OWVAR 26
16464: PUSH
16465: LD_STRING Trofim Petya
16467: ST_TO_ADDR
// al_commander := CreateHuman ;
16468: LD_ADDR_EXP 43
16472: PUSH
16473: CALL_OW 44
16477: ST_TO_ADDR
// player_commander := al_commander ;
16478: LD_ADDR_EXP 11
16482: PUSH
16483: LD_EXP 43
16487: ST_TO_ADDR
// hc_importance := 0 ;
16488: LD_ADDR_OWVAR 32
16492: PUSH
16493: LD_INT 0
16495: ST_TO_ADDR
// hc_gallery :=  ;
16496: LD_ADDR_OWVAR 33
16500: PUSH
16501: LD_STRING 
16503: ST_TO_ADDR
// team := CharacterSelection ( text , [ 9 , 9 , 8 ] [ Difficulty ] , [ 9 , 9 , 8 ] [ Difficulty ] , [ sel_change_class , al_commander , sel_changeable , sel_not_hired ] ^ al_force , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , class_bazooker , class_sniper ] ) ;
16504: LD_ADDR_VAR 0 5
16508: PUSH
16509: LD_STRING text
16511: PPUSH
16512: LD_INT 9
16514: PUSH
16515: LD_INT 9
16517: PUSH
16518: LD_INT 8
16520: PUSH
16521: EMPTY
16522: LIST
16523: LIST
16524: LIST
16525: PUSH
16526: LD_OWVAR 67
16530: ARRAY
16531: PPUSH
16532: LD_INT 9
16534: PUSH
16535: LD_INT 9
16537: PUSH
16538: LD_INT 8
16540: PUSH
16541: EMPTY
16542: LIST
16543: LIST
16544: LIST
16545: PUSH
16546: LD_OWVAR 67
16550: ARRAY
16551: PPUSH
16552: LD_INT -5
16554: PUSH
16555: LD_EXP 43
16559: PUSH
16560: LD_INT -3
16562: PUSH
16563: LD_INT -2
16565: PUSH
16566: EMPTY
16567: LIST
16568: LIST
16569: LIST
16570: LIST
16571: PUSH
16572: LD_EXP 44
16576: ADD
16577: PPUSH
16578: LD_INT 1
16580: PUSH
16581: LD_INT 3
16583: PUSH
16584: LD_INT 2
16586: PUSH
16587: LD_INT 1
16589: PUSH
16590: EMPTY
16591: LIST
16592: LIST
16593: PUSH
16594: LD_INT 4
16596: PUSH
16597: LD_INT 1
16599: PUSH
16600: EMPTY
16601: LIST
16602: LIST
16603: PUSH
16604: LD_INT 9
16606: PUSH
16607: LD_INT 5
16609: PUSH
16610: EMPTY
16611: LIST
16612: LIST
16613: LIST
16614: LIST
16615: LIST
16616: LIST
16617: PPUSH
16618: CALL_OW 42
16622: ST_TO_ADDR
// team := team ^ al_commander ;
16623: LD_ADDR_VAR 0 5
16627: PUSH
16628: LD_VAR 0 5
16632: PUSH
16633: LD_EXP 43
16637: ADD
16638: ST_TO_ADDR
// for i = 1 to team do
16639: LD_ADDR_VAR 0 2
16643: PUSH
16644: DOUBLE
16645: LD_INT 1
16647: DEC
16648: ST_TO_ADDR
16649: LD_VAR 0 5
16653: PUSH
16654: FOR_TO
16655: IFFALSE 16955
// begin if GetClass ( team [ i ] ) = class_mechanic then
16657: LD_VAR 0 5
16661: PUSH
16662: LD_VAR 0 2
16666: ARRAY
16667: PPUSH
16668: CALL_OW 257
16672: PUSH
16673: LD_INT 3
16675: EQUAL
16676: IFFALSE 16932
// begin uc_nation := [ 1 , 3 ] [ rand ( 1 , 2 ) ] ;
16678: LD_ADDR_OWVAR 21
16682: PUSH
16683: LD_INT 1
16685: PUSH
16686: LD_INT 3
16688: PUSH
16689: EMPTY
16690: LIST
16691: LIST
16692: PUSH
16693: LD_INT 1
16695: PPUSH
16696: LD_INT 2
16698: PPUSH
16699: CALL_OW 12
16703: ARRAY
16704: ST_TO_ADDR
// if uc_nation = 1 then
16705: LD_OWVAR 21
16709: PUSH
16710: LD_INT 1
16712: EQUAL
16713: IFFALSE 16797
// begin vc_chassis := [ us_medium_tracked , us_heavy_tracked , us_morphling ] [ i mod 3 + 1 ] ;
16715: LD_ADDR_OWVAR 37
16719: PUSH
16720: LD_INT 3
16722: PUSH
16723: LD_INT 4
16725: PUSH
16726: LD_INT 5
16728: PUSH
16729: EMPTY
16730: LIST
16731: LIST
16732: LIST
16733: PUSH
16734: LD_VAR 0 2
16738: PUSH
16739: LD_INT 3
16741: MOD
16742: PUSH
16743: LD_INT 1
16745: PLUS
16746: ARRAY
16747: ST_TO_ADDR
// vc_engine := engine_siberite ;
16748: LD_ADDR_OWVAR 39
16752: PUSH
16753: LD_INT 3
16755: ST_TO_ADDR
// vc_control := control_manual ;
16756: LD_ADDR_OWVAR 38
16760: PUSH
16761: LD_INT 1
16763: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_laser ] [ rand ( 1 , 3 ) ] ;
16764: LD_ADDR_OWVAR 40
16768: PUSH
16769: LD_INT 4
16771: PUSH
16772: LD_INT 5
16774: PUSH
16775: LD_INT 9
16777: PUSH
16778: EMPTY
16779: LIST
16780: LIST
16781: LIST
16782: PUSH
16783: LD_INT 1
16785: PPUSH
16786: LD_INT 3
16788: PPUSH
16789: CALL_OW 12
16793: ARRAY
16794: ST_TO_ADDR
// end else
16795: GO 16873
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] ;
16797: LD_ADDR_OWVAR 37
16801: PUSH
16802: LD_INT 21
16804: PUSH
16805: LD_INT 23
16807: PUSH
16808: EMPTY
16809: LIST
16810: LIST
16811: PUSH
16812: LD_VAR 0 2
16816: PUSH
16817: LD_INT 2
16819: MOD
16820: PUSH
16821: LD_INT 1
16823: PLUS
16824: ARRAY
16825: ST_TO_ADDR
// vc_engine := engine_siberite ;
16826: LD_ADDR_OWVAR 39
16830: PUSH
16831: LD_INT 3
16833: ST_TO_ADDR
// vc_control := control_manual ;
16834: LD_ADDR_OWVAR 38
16838: PUSH
16839: LD_INT 1
16841: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_rocket_launcher , ru_gatling_gun ] [ rand ( 1 , 3 ) ] ;
16842: LD_ADDR_OWVAR 40
16846: PUSH
16847: LD_INT 44
16849: PUSH
16850: LD_INT 45
16852: PUSH
16853: LD_INT 43
16855: PUSH
16856: EMPTY
16857: LIST
16858: LIST
16859: LIST
16860: PUSH
16861: LD_INT 1
16863: PPUSH
16864: LD_INT 3
16866: PPUSH
16867: CALL_OW 12
16871: ARRAY
16872: ST_TO_ADDR
// end ; un := CreateVehicle ;
16873: LD_ADDR_VAR 0 4
16877: PUSH
16878: CALL_OW 45
16882: ST_TO_ADDR
// SetDir ( un , 5 ) ;
16883: LD_VAR 0 4
16887: PPUSH
16888: LD_INT 5
16890: PPUSH
16891: CALL_OW 233
// PlaceUnitArea ( un , south_resp , false ) ;
16895: LD_VAR 0 4
16899: PPUSH
16900: LD_INT 15
16902: PPUSH
16903: LD_INT 0
16905: PPUSH
16906: CALL_OW 49
// PlaceHumanInUnit ( team [ i ] , un ) ;
16910: LD_VAR 0 5
16914: PUSH
16915: LD_VAR 0 2
16919: ARRAY
16920: PPUSH
16921: LD_VAR 0 4
16925: PPUSH
16926: CALL_OW 52
// end else
16930: GO 16953
// PlaceUnitArea ( team [ i ] , south_resp , false ) ;
16932: LD_VAR 0 5
16936: PUSH
16937: LD_VAR 0 2
16941: ARRAY
16942: PPUSH
16943: LD_INT 15
16945: PPUSH
16946: LD_INT 0
16948: PPUSH
16949: CALL_OW 49
// end ;
16953: GO 16654
16955: POP
16956: POP
// end ;
16957: LD_VAR 0 1
16961: RET
// export function RemoveAlliance ; var i ; begin
16962: LD_INT 0
16964: PPUSH
16965: PPUSH
// DestroyUnit ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
16966: LD_INT 22
16968: PUSH
16969: LD_INT 7
16971: PUSH
16972: EMPTY
16973: LIST
16974: LIST
16975: PUSH
16976: LD_INT 30
16978: PUSH
16979: LD_INT 1
16981: PUSH
16982: EMPTY
16983: LIST
16984: LIST
16985: PUSH
16986: EMPTY
16987: LIST
16988: LIST
16989: PPUSH
16990: CALL_OW 69
16994: PUSH
16995: LD_INT 1
16997: ARRAY
16998: PPUSH
16999: CALL_OW 65
// for i in FilterAllUnits ( [ f_side , 7 ] ) do
17003: LD_ADDR_VAR 0 2
17007: PUSH
17008: LD_INT 22
17010: PUSH
17011: LD_INT 7
17013: PUSH
17014: EMPTY
17015: LIST
17016: LIST
17017: PPUSH
17018: CALL_OW 69
17022: PUSH
17023: FOR_IN
17024: IFFALSE 17037
// RemoveUnit ( i ) ;
17026: LD_VAR 0 2
17030: PPUSH
17031: CALL_OW 64
17035: GO 17023
17037: POP
17038: POP
// end ;
17039: LD_VAR 0 1
17043: RET
// export function PrepareAllianceAI ; var i , un , b ; begin
17044: LD_INT 0
17046: PPUSH
17047: PPUSH
17048: PPUSH
17049: PPUSH
// SetTech ( tech_lapser , 7 , state_researched ) ;
17050: LD_INT 31
17052: PPUSH
17053: LD_INT 7
17055: PPUSH
17056: LD_INT 2
17058: PPUSH
17059: CALL_OW 322
// SetTech ( tech_ai , 7 , state_researched ) ;
17063: LD_INT 32
17065: PPUSH
17066: LD_INT 7
17068: PPUSH
17069: LD_INT 2
17071: PPUSH
17072: CALL_OW 322
// SetTech ( tech_comp3 , 7 , state_researched ) ;
17076: LD_INT 59
17078: PPUSH
17079: LD_INT 7
17081: PPUSH
17082: LD_INT 2
17084: PPUSH
17085: CALL_OW 322
// al_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
17089: LD_ADDR_EXP 45
17093: PUSH
17094: LD_INT 5
17096: PUSH
17097: LD_INT 6
17099: PUSH
17100: LD_INT 7
17102: PUSH
17103: EMPTY
17104: LIST
17105: LIST
17106: LIST
17107: PUSH
17108: LD_OWVAR 67
17112: ARRAY
17113: ST_TO_ADDR
// al_force := [ ] ;
17114: LD_ADDR_EXP 44
17118: PUSH
17119: EMPTY
17120: ST_TO_ADDR
// al_vehs := [ ] ;
17121: LD_ADDR_EXP 50
17125: PUSH
17126: EMPTY
17127: ST_TO_ADDR
// uc_side := 7 ;
17128: LD_ADDR_OWVAR 20
17132: PUSH
17133: LD_INT 7
17135: ST_TO_ADDR
// uc_nation := 1 ;
17136: LD_ADDR_OWVAR 21
17140: PUSH
17141: LD_INT 1
17143: ST_TO_ADDR
// bc_type := b_oil_mine ;
17144: LD_ADDR_OWVAR 42
17148: PUSH
17149: LD_INT 29
17151: ST_TO_ADDR
// b := CreateBuilding ;
17152: LD_ADDR_VAR 0 4
17156: PUSH
17157: CALL_OW 46
17161: ST_TO_ADDR
// PlaceUnitXYR ( b , 61 , 7 , 0 , false ) ;
17162: LD_VAR 0 4
17166: PPUSH
17167: LD_INT 61
17169: PPUSH
17170: LD_INT 7
17172: PPUSH
17173: LD_INT 0
17175: PPUSH
17176: LD_INT 0
17178: PPUSH
17179: CALL_OW 50
// bc_type := b_siberite_mine ;
17183: LD_ADDR_OWVAR 42
17187: PUSH
17188: LD_INT 30
17190: ST_TO_ADDR
// b := CreateBuilding ;
17191: LD_ADDR_VAR 0 4
17195: PUSH
17196: CALL_OW 46
17200: ST_TO_ADDR
// PlaceUnitXYR ( b , 69 , 13 , 0 , false ) ;
17201: LD_VAR 0 4
17205: PPUSH
17206: LD_INT 69
17208: PPUSH
17209: LD_INT 13
17211: PPUSH
17212: LD_INT 0
17214: PPUSH
17215: LD_INT 0
17217: PPUSH
17218: CALL_OW 50
// hc_gallery :=  ;
17222: LD_ADDR_OWVAR 33
17226: PUSH
17227: LD_STRING 
17229: ST_TO_ADDR
// hc_name :=  ;
17230: LD_ADDR_OWVAR 26
17234: PUSH
17235: LD_STRING 
17237: ST_TO_ADDR
// hc_importance := 0 ;
17238: LD_ADDR_OWVAR 32
17242: PUSH
17243: LD_INT 0
17245: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_bunker ] ] ) do
17246: LD_ADDR_VAR 0 2
17250: PUSH
17251: LD_INT 22
17253: PUSH
17254: LD_INT 7
17256: PUSH
17257: EMPTY
17258: LIST
17259: LIST
17260: PUSH
17261: LD_INT 30
17263: PUSH
17264: LD_INT 32
17266: PUSH
17267: EMPTY
17268: LIST
17269: LIST
17270: PUSH
17271: EMPTY
17272: LIST
17273: LIST
17274: PPUSH
17275: CALL_OW 69
17279: PUSH
17280: FOR_IN
17281: IFFALSE 17351
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17283: LD_ADDR_OWVAR 21
17287: PUSH
17288: LD_INT 1
17290: PUSH
17291: LD_INT 3
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: PUSH
17298: LD_INT 1
17300: PPUSH
17301: LD_INT 2
17303: PPUSH
17304: CALL_OW 12
17308: ARRAY
17309: ST_TO_ADDR
// PrepareHuman ( false , 1 , al_skill ) ;
17310: LD_INT 0
17312: PPUSH
17313: LD_INT 1
17315: PPUSH
17316: LD_EXP 45
17320: PPUSH
17321: CALL_OW 380
// un := CreateHuman ;
17325: LD_ADDR_VAR 0 3
17329: PUSH
17330: CALL_OW 44
17334: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
17335: LD_VAR 0 3
17339: PPUSH
17340: LD_VAR 0 2
17344: PPUSH
17345: CALL_OW 52
// end ;
17349: GO 17280
17351: POP
17352: POP
// for i = 1 to 3 do
17353: LD_ADDR_VAR 0 2
17357: PUSH
17358: DOUBLE
17359: LD_INT 1
17361: DEC
17362: ST_TO_ADDR
17363: LD_INT 3
17365: PUSH
17366: FOR_TO
17367: IFFALSE 17435
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17369: LD_ADDR_OWVAR 21
17373: PUSH
17374: LD_INT 1
17376: PUSH
17377: LD_INT 3
17379: PUSH
17380: EMPTY
17381: LIST
17382: LIST
17383: PUSH
17384: LD_INT 1
17386: PPUSH
17387: LD_INT 2
17389: PPUSH
17390: CALL_OW 12
17394: ARRAY
17395: ST_TO_ADDR
// PrepareHuman ( false , 4 , al_skill ) ;
17396: LD_INT 0
17398: PPUSH
17399: LD_INT 4
17401: PPUSH
17402: LD_EXP 45
17406: PPUSH
17407: CALL_OW 380
// un := CreateHuman ;
17411: LD_ADDR_VAR 0 3
17415: PUSH
17416: CALL_OW 44
17420: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_lab1 ) ;
17421: LD_VAR 0 3
17425: PPUSH
17426: LD_INT 164
17428: PPUSH
17429: CALL_OW 52
// end ;
17433: GO 17366
17435: POP
17436: POP
// for i = 1 to 4 do
17437: LD_ADDR_VAR 0 2
17441: PUSH
17442: DOUBLE
17443: LD_INT 1
17445: DEC
17446: ST_TO_ADDR
17447: LD_INT 4
17449: PUSH
17450: FOR_TO
17451: IFFALSE 17542
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17453: LD_ADDR_OWVAR 21
17457: PUSH
17458: LD_INT 1
17460: PUSH
17461: LD_INT 3
17463: PUSH
17464: EMPTY
17465: LIST
17466: LIST
17467: PUSH
17468: LD_INT 1
17470: PPUSH
17471: LD_INT 2
17473: PPUSH
17474: CALL_OW 12
17478: ARRAY
17479: ST_TO_ADDR
// PrepareHuman ( false , [ class_sniper , class_bazooker , class_bazooker ] [ Rand ( 1 , 3 ) ] , al_skill ) ;
17480: LD_INT 0
17482: PPUSH
17483: LD_INT 5
17485: PUSH
17486: LD_INT 9
17488: PUSH
17489: LD_INT 9
17491: PUSH
17492: EMPTY
17493: LIST
17494: LIST
17495: LIST
17496: PUSH
17497: LD_INT 1
17499: PPUSH
17500: LD_INT 3
17502: PPUSH
17503: CALL_OW 12
17507: ARRAY
17508: PPUSH
17509: LD_EXP 45
17513: PPUSH
17514: CALL_OW 380
// un := CreateHuman ;
17518: LD_ADDR_VAR 0 3
17522: PUSH
17523: CALL_OW 44
17527: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_bar ) ;
17528: LD_VAR 0 3
17532: PPUSH
17533: LD_INT 173
17535: PPUSH
17536: CALL_OW 52
// end ;
17540: GO 17450
17542: POP
17543: POP
// for i = 1 to 4 do
17544: LD_ADDR_VAR 0 2
17548: PUSH
17549: DOUBLE
17550: LD_INT 1
17552: DEC
17553: ST_TO_ADDR
17554: LD_INT 4
17556: PUSH
17557: FOR_TO
17558: IFFALSE 17656
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17560: LD_ADDR_OWVAR 21
17564: PUSH
17565: LD_INT 1
17567: PUSH
17568: LD_INT 3
17570: PUSH
17571: EMPTY
17572: LIST
17573: LIST
17574: PUSH
17575: LD_INT 1
17577: PPUSH
17578: LD_INT 2
17580: PPUSH
17581: CALL_OW 12
17585: ARRAY
17586: ST_TO_ADDR
// PrepareHuman ( false , 3 , al_skill ) ;
17587: LD_INT 0
17589: PPUSH
17590: LD_INT 3
17592: PPUSH
17593: LD_EXP 45
17597: PPUSH
17598: CALL_OW 380
// un := CreateHuman ;
17602: LD_ADDR_VAR 0 3
17606: PUSH
17607: CALL_OW 44
17611: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
17612: LD_VAR 0 3
17616: PPUSH
17617: LD_INT 22
17619: PUSH
17620: LD_INT 7
17622: PUSH
17623: EMPTY
17624: LIST
17625: LIST
17626: PUSH
17627: LD_INT 30
17629: PUSH
17630: LD_INT 3
17632: PUSH
17633: EMPTY
17634: LIST
17635: LIST
17636: PUSH
17637: EMPTY
17638: LIST
17639: LIST
17640: PPUSH
17641: CALL_OW 69
17645: PUSH
17646: LD_INT 1
17648: ARRAY
17649: PPUSH
17650: CALL_OW 52
// end ;
17654: GO 17557
17656: POP
17657: POP
// for i = 1 to 4 do
17658: LD_ADDR_VAR 0 2
17662: PUSH
17663: DOUBLE
17664: LD_INT 1
17666: DEC
17667: ST_TO_ADDR
17668: LD_INT 4
17670: PUSH
17671: FOR_TO
17672: IFFALSE 17740
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17674: LD_ADDR_OWVAR 21
17678: PUSH
17679: LD_INT 1
17681: PUSH
17682: LD_INT 3
17684: PUSH
17685: EMPTY
17686: LIST
17687: LIST
17688: PUSH
17689: LD_INT 1
17691: PPUSH
17692: LD_INT 2
17694: PPUSH
17695: CALL_OW 12
17699: ARRAY
17700: ST_TO_ADDR
// PrepareHuman ( false , 2 , al_skill ) ;
17701: LD_INT 0
17703: PPUSH
17704: LD_INT 2
17706: PPUSH
17707: LD_EXP 45
17711: PPUSH
17712: CALL_OW 380
// un := CreateHuman ;
17716: LD_ADDR_VAR 0 3
17720: PUSH
17721: CALL_OW 44
17725: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_depot ) ;
17726: LD_VAR 0 3
17730: PPUSH
17731: LD_INT 162
17733: PPUSH
17734: CALL_OW 52
// end ;
17738: GO 17671
17740: POP
17741: POP
// uc_nation := 3 ;
17742: LD_ADDR_OWVAR 21
17746: PUSH
17747: LD_INT 3
17749: ST_TO_ADDR
// vc_chassis := ru_medium_wheeled ;
17750: LD_ADDR_OWVAR 37
17754: PUSH
17755: LD_INT 21
17757: ST_TO_ADDR
// vc_engine := engine_siberite ;
17758: LD_ADDR_OWVAR 39
17762: PUSH
17763: LD_INT 3
17765: ST_TO_ADDR
// vc_control := control_computer ;
17766: LD_ADDR_OWVAR 38
17770: PUSH
17771: LD_INT 3
17773: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
17774: LD_ADDR_OWVAR 40
17778: PUSH
17779: LD_INT 51
17781: ST_TO_ADDR
// PlaceUnitXY ( CreateVehicle , 49 , 13 , false ) ;
17782: CALL_OW 45
17786: PPUSH
17787: LD_INT 49
17789: PPUSH
17790: LD_INT 13
17792: PPUSH
17793: LD_INT 0
17795: PPUSH
17796: CALL_OW 48
// al_turrets := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_turret ] ] ) ;
17800: LD_ADDR_EXP 52
17804: PUSH
17805: LD_INT 22
17807: PUSH
17808: LD_INT 7
17810: PUSH
17811: EMPTY
17812: LIST
17813: LIST
17814: PUSH
17815: LD_INT 30
17817: PUSH
17818: LD_INT 33
17820: PUSH
17821: EMPTY
17822: LIST
17823: LIST
17824: PUSH
17825: EMPTY
17826: LIST
17827: LIST
17828: PPUSH
17829: CALL_OW 69
17833: ST_TO_ADDR
// for i = 1 to FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_btype , b_turret ] , [ f_bweapon , 0 ] ] ] ) do
17834: LD_ADDR_VAR 0 2
17838: PUSH
17839: DOUBLE
17840: LD_INT 1
17842: DEC
17843: ST_TO_ADDR
17844: LD_INT 22
17846: PUSH
17847: LD_INT 7
17849: PUSH
17850: EMPTY
17851: LIST
17852: LIST
17853: PUSH
17854: LD_INT 30
17856: PUSH
17857: LD_INT 33
17859: PUSH
17860: EMPTY
17861: LIST
17862: LIST
17863: PUSH
17864: LD_INT 35
17866: PUSH
17867: LD_INT 0
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: PUSH
17874: EMPTY
17875: LIST
17876: LIST
17877: LIST
17878: PUSH
17879: EMPTY
17880: LIST
17881: PPUSH
17882: CALL_OW 69
17886: PUSH
17887: FOR_TO
17888: IFFALSE 17948
// AddComPlaceWeapon ( FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_btype , b_turret ] , [ f_bweapon , 0 ] ] ] ) [ i ] , ru_time_lapser ) ;
17890: LD_INT 22
17892: PUSH
17893: LD_INT 7
17895: PUSH
17896: EMPTY
17897: LIST
17898: LIST
17899: PUSH
17900: LD_INT 30
17902: PUSH
17903: LD_INT 33
17905: PUSH
17906: EMPTY
17907: LIST
17908: LIST
17909: PUSH
17910: LD_INT 35
17912: PUSH
17913: LD_INT 0
17915: PUSH
17916: EMPTY
17917: LIST
17918: LIST
17919: PUSH
17920: EMPTY
17921: LIST
17922: LIST
17923: LIST
17924: PUSH
17925: EMPTY
17926: LIST
17927: PPUSH
17928: CALL_OW 69
17932: PUSH
17933: LD_VAR 0 2
17937: ARRAY
17938: PPUSH
17939: LD_INT 49
17941: PPUSH
17942: CALL_OW 208
17946: GO 17887
17948: POP
17949: POP
// end ;
17950: LD_VAR 0 1
17954: RET
// export al_eng , al_sold , al_mech , al_sci ; export al_vehs , al_cargo , al_turrets ; export al_dep , al_lab , al_fac ; export al_bul ; every 0 0$02 trigger your_side = 1 do var i , un , veh , cr ;
17955: LD_OWVAR 2
17959: PUSH
17960: LD_INT 1
17962: EQUAL
17963: IFFALSE 18949
17965: GO 17967
17967: DISABLE
17968: LD_INT 0
17970: PPUSH
17971: PPUSH
17972: PPUSH
17973: PPUSH
// begin enable ;
17974: ENABLE
// al_bul := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] ] ) ;
17975: LD_ADDR_EXP 56
17979: PUSH
17980: LD_INT 22
17982: PUSH
17983: LD_INT 7
17985: PUSH
17986: EMPTY
17987: LIST
17988: LIST
17989: PUSH
17990: LD_INT 21
17992: PUSH
17993: LD_INT 3
17995: PUSH
17996: EMPTY
17997: LIST
17998: LIST
17999: PUSH
18000: EMPTY
18001: LIST
18002: LIST
18003: PPUSH
18004: CALL_OW 69
18008: ST_TO_ADDR
// al_lab := [ al_lab1 , al_lab2 ] ;
18009: LD_ADDR_EXP 54
18013: PUSH
18014: LD_INT 164
18016: PUSH
18017: LD_INT 197
18019: PUSH
18020: EMPTY
18021: LIST
18022: LIST
18023: ST_TO_ADDR
// al_dep := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
18024: LD_ADDR_EXP 53
18028: PUSH
18029: LD_INT 22
18031: PUSH
18032: LD_INT 7
18034: PUSH
18035: EMPTY
18036: LIST
18037: LIST
18038: PUSH
18039: LD_INT 30
18041: PUSH
18042: LD_INT 1
18044: PUSH
18045: EMPTY
18046: LIST
18047: LIST
18048: PUSH
18049: EMPTY
18050: LIST
18051: LIST
18052: PPUSH
18053: CALL_OW 69
18057: PUSH
18058: LD_INT 1
18060: ARRAY
18061: ST_TO_ADDR
// al_fac := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
18062: LD_ADDR_EXP 55
18066: PUSH
18067: LD_INT 22
18069: PUSH
18070: LD_INT 7
18072: PUSH
18073: EMPTY
18074: LIST
18075: LIST
18076: PUSH
18077: LD_INT 30
18079: PUSH
18080: LD_INT 3
18082: PUSH
18083: EMPTY
18084: LIST
18085: LIST
18086: PUSH
18087: EMPTY
18088: LIST
18089: LIST
18090: PPUSH
18091: CALL_OW 69
18095: PUSH
18096: LD_INT 1
18098: ARRAY
18099: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) then
18100: LD_INT 22
18102: PUSH
18103: LD_INT 7
18105: PUSH
18106: EMPTY
18107: LIST
18108: LIST
18109: PUSH
18110: LD_INT 34
18112: PUSH
18113: LD_INT 51
18115: PUSH
18116: EMPTY
18117: LIST
18118: LIST
18119: PUSH
18120: EMPTY
18121: LIST
18122: LIST
18123: PPUSH
18124: CALL_OW 69
18128: IFFALSE 18168
// al_cargo := FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
18130: LD_ADDR_EXP 51
18134: PUSH
18135: LD_INT 22
18137: PUSH
18138: LD_INT 7
18140: PUSH
18141: EMPTY
18142: LIST
18143: LIST
18144: PUSH
18145: LD_INT 34
18147: PUSH
18148: LD_INT 51
18150: PUSH
18151: EMPTY
18152: LIST
18153: LIST
18154: PUSH
18155: EMPTY
18156: LIST
18157: LIST
18158: PPUSH
18159: CALL_OW 69
18163: PUSH
18164: LD_INT 1
18166: ARRAY
18167: ST_TO_ADDR
// al_sold := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , class_bazooker ] ] ) ;
18168: LD_ADDR_EXP 47
18172: PUSH
18173: LD_INT 22
18175: PUSH
18176: LD_INT 7
18178: PUSH
18179: EMPTY
18180: LIST
18181: LIST
18182: PUSH
18183: LD_INT 25
18185: PUSH
18186: LD_INT 9
18188: PUSH
18189: EMPTY
18190: LIST
18191: LIST
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PPUSH
18197: CALL_OW 69
18201: ST_TO_ADDR
// al_eng := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 2 ] ] ) ;
18202: LD_ADDR_EXP 46
18206: PUSH
18207: LD_INT 22
18209: PUSH
18210: LD_INT 7
18212: PUSH
18213: EMPTY
18214: LIST
18215: LIST
18216: PUSH
18217: LD_INT 25
18219: PUSH
18220: LD_INT 2
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: PUSH
18227: EMPTY
18228: LIST
18229: LIST
18230: PPUSH
18231: CALL_OW 69
18235: ST_TO_ADDR
// al_mech := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 3 ] ] ) ;
18236: LD_ADDR_EXP 48
18240: PUSH
18241: LD_INT 22
18243: PUSH
18244: LD_INT 7
18246: PUSH
18247: EMPTY
18248: LIST
18249: LIST
18250: PUSH
18251: LD_INT 25
18253: PUSH
18254: LD_INT 3
18256: PUSH
18257: EMPTY
18258: LIST
18259: LIST
18260: PUSH
18261: EMPTY
18262: LIST
18263: LIST
18264: PPUSH
18265: CALL_OW 69
18269: ST_TO_ADDR
// al_sci := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 4 ] ] ) ;
18270: LD_ADDR_EXP 49
18274: PUSH
18275: LD_INT 22
18277: PUSH
18278: LD_INT 7
18280: PUSH
18281: EMPTY
18282: LIST
18283: LIST
18284: PUSH
18285: LD_INT 25
18287: PUSH
18288: LD_INT 4
18290: PUSH
18291: EMPTY
18292: LIST
18293: LIST
18294: PUSH
18295: EMPTY
18296: LIST
18297: LIST
18298: PPUSH
18299: CALL_OW 69
18303: ST_TO_ADDR
// if not HasTask ( al_cargo ) and GetCargo ( al_cargo , mat_cans ) < 100 then
18304: LD_EXP 51
18308: PPUSH
18309: CALL_OW 314
18313: NOT
18314: PUSH
18315: LD_EXP 51
18319: PPUSH
18320: LD_INT 1
18322: PPUSH
18323: CALL_OW 289
18327: PUSH
18328: LD_INT 100
18330: LESS
18331: AND
18332: IFFALSE 18380
// begin cr := GetListOfCratesInArea ( us_crates ) ;
18334: LD_ADDR_VAR 0 4
18338: PUSH
18339: LD_INT 12
18341: PPUSH
18342: CALL_OW 435
18346: ST_TO_ADDR
// if cr then
18347: LD_VAR 0 4
18351: IFFALSE 18380
// ComCollect ( al_cargo , cr [ 1 ] , cr [ 2 ] ) ;
18353: LD_EXP 51
18357: PPUSH
18358: LD_VAR 0 4
18362: PUSH
18363: LD_INT 1
18365: ARRAY
18366: PPUSH
18367: LD_VAR 0 4
18371: PUSH
18372: LD_INT 2
18374: ARRAY
18375: PPUSH
18376: CALL_OW 117
// end ; if UnitFilter ( al_bul , [ f_not , [ f_lives , 1000 ] ] ) then
18380: LD_EXP 56
18384: PPUSH
18385: LD_INT 3
18387: PUSH
18388: LD_INT 24
18390: PUSH
18391: LD_INT 1000
18393: PUSH
18394: EMPTY
18395: LIST
18396: LIST
18397: PUSH
18398: EMPTY
18399: LIST
18400: LIST
18401: PPUSH
18402: CALL_OW 72
18406: IFFALSE 18536
// begin if al_eng then
18408: LD_EXP 46
18412: IFFALSE 18534
// for i = 1 to al_eng do
18414: LD_ADDR_VAR 0 1
18418: PUSH
18419: DOUBLE
18420: LD_INT 1
18422: DEC
18423: ST_TO_ADDR
18424: LD_EXP 46
18428: PUSH
18429: FOR_TO
18430: IFFALSE 18532
// if IsInUnit ( al_eng [ i ] ) then
18432: LD_EXP 46
18436: PUSH
18437: LD_VAR 0 1
18441: ARRAY
18442: PPUSH
18443: CALL_OW 310
18447: IFFALSE 18466
// ComExitBuilding ( al_eng [ i ] ) else
18449: LD_EXP 46
18453: PUSH
18454: LD_VAR 0 1
18458: ARRAY
18459: PPUSH
18460: CALL_OW 122
18464: GO 18530
// if not HasTask ( al_eng [ i ] ) then
18466: LD_EXP 46
18470: PUSH
18471: LD_VAR 0 1
18475: ARRAY
18476: PPUSH
18477: CALL_OW 314
18481: NOT
18482: IFFALSE 18530
// ComRepairBuilding ( al_eng [ i ] , UnitFilter ( al_bul , [ f_not , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
18484: LD_EXP 46
18488: PUSH
18489: LD_VAR 0 1
18493: ARRAY
18494: PPUSH
18495: LD_EXP 56
18499: PPUSH
18500: LD_INT 3
18502: PUSH
18503: LD_INT 24
18505: PUSH
18506: LD_INT 1000
18508: PUSH
18509: EMPTY
18510: LIST
18511: LIST
18512: PUSH
18513: EMPTY
18514: LIST
18515: LIST
18516: PPUSH
18517: CALL_OW 72
18521: PUSH
18522: LD_INT 1
18524: ARRAY
18525: PPUSH
18526: CALL_OW 130
18530: GO 18429
18532: POP
18533: POP
// end else
18534: GO 18618
// if al_eng then
18536: LD_EXP 46
18540: IFFALSE 18618
// if not IsInUnit ( al_eng [ 1 ] ) then
18542: LD_EXP 46
18546: PUSH
18547: LD_INT 1
18549: ARRAY
18550: PPUSH
18551: CALL_OW 310
18555: NOT
18556: IFFALSE 18618
// for i = 1 to al_eng do
18558: LD_ADDR_VAR 0 1
18562: PUSH
18563: DOUBLE
18564: LD_INT 1
18566: DEC
18567: ST_TO_ADDR
18568: LD_EXP 46
18572: PUSH
18573: FOR_TO
18574: IFFALSE 18616
// if not IsInUnit ( al_eng [ i ] ) then
18576: LD_EXP 46
18580: PUSH
18581: LD_VAR 0 1
18585: ARRAY
18586: PPUSH
18587: CALL_OW 310
18591: NOT
18592: IFFALSE 18614
// ComEnterUnit ( al_eng [ i ] , al_dep ) ;
18594: LD_EXP 46
18598: PUSH
18599: LD_VAR 0 1
18603: ARRAY
18604: PPUSH
18605: LD_EXP 53
18609: PPUSH
18610: CALL_OW 120
18614: GO 18573
18616: POP
18617: POP
// if al_vehs then
18618: LD_EXP 50
18622: IFFALSE 18722
// if BuildingStatus ( al_fac ) = bs_idle then
18624: LD_EXP 55
18628: PPUSH
18629: CALL_OW 461
18633: PUSH
18634: LD_INT 2
18636: EQUAL
18637: IFFALSE 18722
// begin ComConstruct ( al_fac , al_vehs [ 1 ] , al_vehs [ 2 ] , al_vehs [ 3 ] , al_vehs [ 4 ] ) ;
18639: LD_EXP 55
18643: PPUSH
18644: LD_EXP 50
18648: PUSH
18649: LD_INT 1
18651: ARRAY
18652: PPUSH
18653: LD_EXP 50
18657: PUSH
18658: LD_INT 2
18660: ARRAY
18661: PPUSH
18662: LD_EXP 50
18666: PUSH
18667: LD_INT 3
18669: ARRAY
18670: PPUSH
18671: LD_EXP 50
18675: PUSH
18676: LD_INT 4
18678: ARRAY
18679: PPUSH
18680: CALL_OW 125
// for i = 1 to 4 do
18684: LD_ADDR_VAR 0 1
18688: PUSH
18689: DOUBLE
18690: LD_INT 1
18692: DEC
18693: ST_TO_ADDR
18694: LD_INT 4
18696: PUSH
18697: FOR_TO
18698: IFFALSE 18720
// al_vehs := Delete ( al_vehs , 1 ) ;
18700: LD_ADDR_EXP 50
18704: PUSH
18705: LD_EXP 50
18709: PPUSH
18710: LD_INT 1
18712: PPUSH
18713: CALL_OW 3
18717: ST_TO_ADDR
18718: GO 18697
18720: POP
18721: POP
// end ; if al_force = 0 and tick mod 23100 = 0 then
18722: LD_EXP 44
18726: PUSH
18727: LD_INT 0
18729: EQUAL
18730: PUSH
18731: LD_OWVAR 1
18735: PUSH
18736: LD_INT 23100
18738: MOD
18739: PUSH
18740: LD_INT 0
18742: EQUAL
18743: AND
18744: IFFALSE 18858
// begin for i = 1 to [ 6 , 7 , 8 ] [ Difficulty ] do
18746: LD_ADDR_VAR 0 1
18750: PUSH
18751: DOUBLE
18752: LD_INT 1
18754: DEC
18755: ST_TO_ADDR
18756: LD_INT 6
18758: PUSH
18759: LD_INT 7
18761: PUSH
18762: LD_INT 8
18764: PUSH
18765: EMPTY
18766: LIST
18767: LIST
18768: LIST
18769: PUSH
18770: LD_OWVAR 67
18774: ARRAY
18775: PUSH
18776: FOR_TO
18777: IFFALSE 18856
// begin al_vehs := al_vehs ^ ru_heavy_wheeled ;
18779: LD_ADDR_EXP 50
18783: PUSH
18784: LD_EXP 50
18788: PUSH
18789: LD_INT 23
18791: ADD
18792: ST_TO_ADDR
// al_vehs := al_vehs ^ engine_combustion ;
18793: LD_ADDR_EXP 50
18797: PUSH
18798: LD_EXP 50
18802: PUSH
18803: LD_INT 1
18805: ADD
18806: ST_TO_ADDR
// al_vehs := al_vehs ^ control_computer ;
18807: LD_ADDR_EXP 50
18811: PUSH
18812: LD_EXP 50
18816: PUSH
18817: LD_INT 3
18819: ADD
18820: ST_TO_ADDR
// al_vehs := al_vehs ^ [ ru_heavy_gun , ru_rocket ] [ Rand ( 1 , 2 ) ] ;
18821: LD_ADDR_EXP 50
18825: PUSH
18826: LD_EXP 50
18830: PUSH
18831: LD_INT 46
18833: PUSH
18834: LD_INT 47
18836: PUSH
18837: EMPTY
18838: LIST
18839: LIST
18840: PUSH
18841: LD_INT 1
18843: PPUSH
18844: LD_INT 2
18846: PPUSH
18847: CALL_OW 12
18851: ARRAY
18852: ADD
18853: ST_TO_ADDR
// end ;
18854: GO 18776
18856: POP
18857: POP
// end ; if FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 then
18858: LD_INT 22
18860: PUSH
18861: LD_INT 7
18863: PUSH
18864: EMPTY
18865: LIST
18866: LIST
18867: PUSH
18868: LD_INT 34
18870: PUSH
18871: LD_INT 51
18873: PUSH
18874: EMPTY
18875: LIST
18876: LIST
18877: PUSH
18878: EMPTY
18879: LIST
18880: LIST
18881: PPUSH
18882: CALL_OW 69
18886: PUSH
18887: LD_INT 0
18889: EQUAL
18890: IFFALSE 18913
// ComConstruct ( al_fac , ru_medium_wheeled , engine_combustion , control_computer , ru_cargo_bay ) ;
18892: LD_EXP 55
18896: PPUSH
18897: LD_INT 21
18899: PPUSH
18900: LD_INT 1
18902: PPUSH
18903: LD_INT 3
18905: PPUSH
18906: LD_INT 51
18908: PPUSH
18909: CALL_OW 125
// if al_force >= [ 6 , 7 , 8 ] [ Difficulty ] then
18913: LD_EXP 44
18917: PUSH
18918: LD_INT 6
18920: PUSH
18921: LD_INT 7
18923: PUSH
18924: LD_INT 8
18926: PUSH
18927: EMPTY
18928: LIST
18929: LIST
18930: LIST
18931: PUSH
18932: LD_OWVAR 67
18936: ARRAY
18937: GREATEREQUAL
18938: IFFALSE 18949
// RaiseSailEvent ( event_alliance_attack ) ;
18940: LD_EXP 23
18944: PPUSH
18945: CALL_OW 427
// end ;
18949: PPOPN 4
18951: END
// export function AllianceAttack ( ) ; var path , units ; begin
18952: LD_INT 0
18954: PPUSH
18955: PPUSH
18956: PPUSH
// units := al_force ;
18957: LD_ADDR_VAR 0 3
18961: PUSH
18962: LD_EXP 44
18966: ST_TO_ADDR
// al_force := [ ] ;
18967: LD_ADDR_EXP 44
18971: PUSH
18972: EMPTY
18973: ST_TO_ADDR
// if rand ( 0 , 1 ) then
18974: LD_INT 0
18976: PPUSH
18977: LD_INT 1
18979: PPUSH
18980: CALL_OW 12
18984: IFFALSE 19028
// path := [ [ 49 , 53 ] , [ 52 , 90 ] , [ 63 , 114 ] ] else
18986: LD_ADDR_VAR 0 2
18990: PUSH
18991: LD_INT 49
18993: PUSH
18994: LD_INT 53
18996: PUSH
18997: EMPTY
18998: LIST
18999: LIST
19000: PUSH
19001: LD_INT 52
19003: PUSH
19004: LD_INT 90
19006: PUSH
19007: EMPTY
19008: LIST
19009: LIST
19010: PUSH
19011: LD_INT 63
19013: PUSH
19014: LD_INT 114
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: PUSH
19021: EMPTY
19022: LIST
19023: LIST
19024: LIST
19025: ST_TO_ADDR
19026: GO 19057
// path := [ [ 89 , 52 ] , [ 143 , 50 ] ] ;
19028: LD_ADDR_VAR 0 2
19032: PUSH
19033: LD_INT 89
19035: PUSH
19036: LD_INT 52
19038: PUSH
19039: EMPTY
19040: LIST
19041: LIST
19042: PUSH
19043: LD_INT 143
19045: PUSH
19046: LD_INT 50
19048: PUSH
19049: EMPTY
19050: LIST
19051: LIST
19052: PUSH
19053: EMPTY
19054: LIST
19055: LIST
19056: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19057: LD_INT 35
19059: PPUSH
19060: CALL_OW 67
// until not AgressiveMove ( units , path ) ;
19064: LD_VAR 0 3
19068: PPUSH
19069: LD_VAR 0 2
19073: PPUSH
19074: CALL 80617 0 2
19078: NOT
19079: IFFALSE 19057
// end ; end_of_file
19081: LD_VAR 0 1
19085: RET
// export ar_commander , ar_force , ar_skill ; export function PrepareArabian ; var i , filter , un , team ; begin
19086: LD_INT 0
19088: PPUSH
19089: PPUSH
19090: PPUSH
19091: PPUSH
19092: PPUSH
// ar_skill := [ 9 , 8 , 7 ] [ Difficulty ] ;
19093: LD_ADDR_EXP 59
19097: PUSH
19098: LD_INT 9
19100: PUSH
19101: LD_INT 8
19103: PUSH
19104: LD_INT 7
19106: PUSH
19107: EMPTY
19108: LIST
19109: LIST
19110: LIST
19111: PUSH
19112: LD_OWVAR 67
19116: ARRAY
19117: ST_TO_ADDR
// ar_force := [ ] ;
19118: LD_ADDR_EXP 58
19122: PUSH
19123: EMPTY
19124: ST_TO_ADDR
// RemoveAlliance ;
19125: CALL 16962 0 0
// RemoveEnvironmentArea ( evn ) ;
19129: LD_INT 17
19131: PPUSH
19132: CALL_OW 355
// your_side := 2 ;
19136: LD_ADDR_OWVAR 2
19140: PUSH
19141: LD_INT 2
19143: ST_TO_ADDR
// uc_side := 2 ;
19144: LD_ADDR_OWVAR 20
19148: PUSH
19149: LD_INT 2
19151: ST_TO_ADDR
// uc_nation := nation_arabian ;
19152: LD_ADDR_OWVAR 21
19156: PUSH
19157: LD_INT 2
19159: ST_TO_ADDR
// hc_gallery :=  ;
19160: LD_ADDR_OWVAR 33
19164: PUSH
19165: LD_STRING 
19167: ST_TO_ADDR
// hc_name :=  ;
19168: LD_ADDR_OWVAR 26
19172: PUSH
19173: LD_STRING 
19175: ST_TO_ADDR
// hc_importance := 0 ;
19176: LD_ADDR_OWVAR 32
19180: PUSH
19181: LD_INT 0
19183: ST_TO_ADDR
// for i = 1 to 20 do
19184: LD_ADDR_VAR 0 2
19188: PUSH
19189: DOUBLE
19190: LD_INT 1
19192: DEC
19193: ST_TO_ADDR
19194: LD_INT 20
19196: PUSH
19197: FOR_TO
19198: IFFALSE 19263
// begin PrepareHuman ( false , Rand ( 1 , 4 ) , ar_skill ) ;
19200: LD_INT 0
19202: PPUSH
19203: LD_INT 1
19205: PPUSH
19206: LD_INT 4
19208: PPUSH
19209: CALL_OW 12
19213: PPUSH
19214: LD_EXP 59
19218: PPUSH
19219: CALL_OW 380
// un := CreateHuman ;
19223: LD_ADDR_VAR 0 4
19227: PUSH
19228: CALL_OW 44
19232: ST_TO_ADDR
// SetDir ( un , 2 ) ;
19233: LD_VAR 0 4
19237: PPUSH
19238: LD_INT 2
19240: PPUSH
19241: CALL_OW 233
// ar_force := ar_force ^ un ;
19245: LD_ADDR_EXP 58
19249: PUSH
19250: LD_EXP 58
19254: PUSH
19255: LD_VAR 0 4
19259: ADD
19260: ST_TO_ADDR
// end ;
19261: GO 19197
19263: POP
19264: POP
// hc_importance := 100 ;
19265: LD_ADDR_OWVAR 32
19269: PUSH
19270: LD_INT 100
19272: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , ar_skill ) ;
19273: LD_INT 1
19275: PPUSH
19276: LD_INT 11
19278: PPUSH
19279: LD_EXP 59
19283: PPUSH
19284: CALL_OW 380
// hc_gallery := skirmish ;
19288: LD_ADDR_OWVAR 33
19292: PUSH
19293: LD_STRING skirmish
19295: ST_TO_ADDR
// hc_face_number := 9 ;
19296: LD_ADDR_OWVAR 34
19300: PUSH
19301: LD_INT 9
19303: ST_TO_ADDR
// hc_name := Muhammad Mustaffi ;
19304: LD_ADDR_OWVAR 26
19308: PUSH
19309: LD_STRING Muhammad Mustaffi
19311: ST_TO_ADDR
// ar_commander := CreateHuman ;
19312: LD_ADDR_EXP 57
19316: PUSH
19317: CALL_OW 44
19321: ST_TO_ADDR
// SetDir ( ar_commander , 2 ) ;
19322: LD_EXP 57
19326: PPUSH
19327: LD_INT 2
19329: PPUSH
19330: CALL_OW 233
// player_commander := ar_commander ;
19334: LD_ADDR_EXP 11
19338: PUSH
19339: LD_EXP 57
19343: ST_TO_ADDR
// hc_importance := 0 ;
19344: LD_ADDR_OWVAR 32
19348: PUSH
19349: LD_INT 0
19351: ST_TO_ADDR
// hc_gallery :=  ;
19352: LD_ADDR_OWVAR 33
19356: PUSH
19357: LD_STRING 
19359: ST_TO_ADDR
// team := CharacterSelection ( text , [ 14 , 13 , 12 ] [ Difficulty ] , [ 14 , 13 , 12 ] [ Difficulty ] , [ sel_dont_change_class , ar_commander , sel_not_hired , sel_changeable , sel_change_class ] ^ ar_force , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , class_mortar ] ) ;
19360: LD_ADDR_VAR 0 5
19364: PUSH
19365: LD_STRING text
19367: PPUSH
19368: LD_INT 14
19370: PUSH
19371: LD_INT 13
19373: PUSH
19374: LD_INT 12
19376: PUSH
19377: EMPTY
19378: LIST
19379: LIST
19380: LIST
19381: PUSH
19382: LD_OWVAR 67
19386: ARRAY
19387: PPUSH
19388: LD_INT 14
19390: PUSH
19391: LD_INT 13
19393: PUSH
19394: LD_INT 12
19396: PUSH
19397: EMPTY
19398: LIST
19399: LIST
19400: LIST
19401: PUSH
19402: LD_OWVAR 67
19406: ARRAY
19407: PPUSH
19408: LD_INT -6
19410: PUSH
19411: LD_EXP 57
19415: PUSH
19416: LD_INT -2
19418: PUSH
19419: LD_INT -3
19421: PUSH
19422: LD_INT -5
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: LIST
19429: LIST
19430: LIST
19431: PUSH
19432: LD_EXP 58
19436: ADD
19437: PPUSH
19438: LD_INT 1
19440: PUSH
19441: LD_INT 3
19443: PUSH
19444: LD_INT 2
19446: PUSH
19447: LD_INT 1
19449: PUSH
19450: EMPTY
19451: LIST
19452: LIST
19453: PUSH
19454: LD_INT 4
19456: PUSH
19457: LD_INT 1
19459: PUSH
19460: EMPTY
19461: LIST
19462: LIST
19463: PUSH
19464: LD_INT 8
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: LIST
19471: LIST
19472: LIST
19473: PPUSH
19474: CALL_OW 42
19478: ST_TO_ADDR
// team := team ^ ar_commander ;
19479: LD_ADDR_VAR 0 5
19483: PUSH
19484: LD_VAR 0 5
19488: PUSH
19489: LD_EXP 57
19493: ADD
19494: ST_TO_ADDR
// for i = 1 to 4 do
19495: LD_ADDR_VAR 0 2
19499: PUSH
19500: DOUBLE
19501: LD_INT 1
19503: DEC
19504: ST_TO_ADDR
19505: LD_INT 4
19507: PUSH
19508: FOR_TO
19509: IFFALSE 19609
// begin vc_chassis := ar_medium_trike ;
19511: LD_ADDR_OWVAR 37
19515: PUSH
19516: LD_INT 13
19518: ST_TO_ADDR
// vc_engine := engine_siberite ;
19519: LD_ADDR_OWVAR 39
19523: PUSH
19524: LD_INT 3
19526: ST_TO_ADDR
// vc_control := control_manual ;
19527: LD_ADDR_OWVAR 38
19531: PUSH
19532: LD_INT 1
19534: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_cargo_bay , ar_crane , ar_gun ] [ i ] ;
19535: LD_ADDR_OWVAR 40
19539: PUSH
19540: LD_INT 27
19542: PUSH
19543: LD_INT 32
19545: PUSH
19546: LD_INT 88
19548: PUSH
19549: LD_INT 27
19551: PUSH
19552: EMPTY
19553: LIST
19554: LIST
19555: LIST
19556: LIST
19557: PUSH
19558: LD_VAR 0 2
19562: ARRAY
19563: ST_TO_ADDR
// un := CreateVehicle ;
19564: LD_ADDR_VAR 0 4
19568: PUSH
19569: CALL_OW 45
19573: ST_TO_ADDR
// SetDir ( un , 2 ) ;
19574: LD_VAR 0 4
19578: PPUSH
19579: LD_INT 2
19581: PPUSH
19582: CALL_OW 233
// PlaceUnitXYR ( un , 54 , 15 , 6 , false ) ;
19586: LD_VAR 0 4
19590: PPUSH
19591: LD_INT 54
19593: PPUSH
19594: LD_INT 15
19596: PPUSH
19597: LD_INT 6
19599: PPUSH
19600: LD_INT 0
19602: PPUSH
19603: CALL_OW 50
// end ;
19607: GO 19508
19609: POP
19610: POP
// for i = 1 to team do
19611: LD_ADDR_VAR 0 2
19615: PUSH
19616: DOUBLE
19617: LD_INT 1
19619: DEC
19620: ST_TO_ADDR
19621: LD_VAR 0 5
19625: PUSH
19626: FOR_TO
19627: IFFALSE 19724
// begin if FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) then
19629: LD_INT 22
19631: PUSH
19632: LD_INT 2
19634: PUSH
19635: EMPTY
19636: LIST
19637: LIST
19638: PUSH
19639: LD_INT 58
19641: PUSH
19642: EMPTY
19643: LIST
19644: PUSH
19645: EMPTY
19646: LIST
19647: LIST
19648: PPUSH
19649: CALL_OW 69
19653: IFFALSE 19701
// PlaceHumanInUnit ( team [ i ] , FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) [ 1 ] ) else
19655: LD_VAR 0 5
19659: PUSH
19660: LD_VAR 0 2
19664: ARRAY
19665: PPUSH
19666: LD_INT 22
19668: PUSH
19669: LD_INT 2
19671: PUSH
19672: EMPTY
19673: LIST
19674: LIST
19675: PUSH
19676: LD_INT 58
19678: PUSH
19679: EMPTY
19680: LIST
19681: PUSH
19682: EMPTY
19683: LIST
19684: LIST
19685: PPUSH
19686: CALL_OW 69
19690: PUSH
19691: LD_INT 1
19693: ARRAY
19694: PPUSH
19695: CALL_OW 52
19699: GO 19722
// PlaceUnitArea ( team [ i ] , center_resp , false ) ;
19701: LD_VAR 0 5
19705: PUSH
19706: LD_VAR 0 2
19710: ARRAY
19711: PPUSH
19712: LD_INT 16
19714: PPUSH
19715: LD_INT 0
19717: PPUSH
19718: CALL_OW 49
// end ;
19722: GO 19626
19724: POP
19725: POP
// uc_side := 0 ;
19726: LD_ADDR_OWVAR 20
19730: PUSH
19731: LD_INT 0
19733: ST_TO_ADDR
// uc_nation := 0 ;
19734: LD_ADDR_OWVAR 21
19738: PUSH
19739: LD_INT 0
19741: ST_TO_ADDR
// vc_chassis := 31 ;
19742: LD_ADDR_OWVAR 37
19746: PUSH
19747: LD_INT 31
19749: ST_TO_ADDR
// vc_control := control_rider ;
19750: LD_ADDR_OWVAR 38
19754: PUSH
19755: LD_INT 4
19757: ST_TO_ADDR
// PlaceUnitXY ( CreateVehicle , 96 , 20 , false ) ;
19758: CALL_OW 45
19762: PPUSH
19763: LD_INT 96
19765: PPUSH
19766: LD_INT 20
19768: PPUSH
19769: LD_INT 0
19771: PPUSH
19772: CALL_OW 48
// end ; end_of_file end_of_file
19776: LD_VAR 0 1
19780: RET
// export globalGameSaveCounter ; every 0 0$1 do
19781: GO 19783
19783: DISABLE
// begin enable ;
19784: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19785: LD_STRING updateTimer(
19787: PUSH
19788: LD_OWVAR 1
19792: STR
19793: PUSH
19794: LD_STRING );
19796: STR
19797: PPUSH
19798: CALL_OW 559
// end ;
19802: END
// every 0 0$1 do
19803: GO 19805
19805: DISABLE
// begin globalGameSaveCounter := 0 ;
19806: LD_ADDR_EXP 60
19810: PUSH
19811: LD_INT 0
19813: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
19814: LD_STRING setGameSaveCounter(0)
19816: PPUSH
19817: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
19821: LD_STRING initStreamRollete();
19823: PPUSH
19824: CALL_OW 559
// InitStreamMode ;
19828: CALL 21154 0 0
// DefineStreamItems ( false ) ;
19832: LD_INT 0
19834: PPUSH
19835: CALL 21618 0 1
// end ;
19839: END
// export function SOS_MapStart ( ) ; begin
19840: LD_INT 0
19842: PPUSH
// if streamModeActive then
19843: LD_EXP 61
19847: IFFALSE 19856
// DefineStreamItems ( true ) ;
19849: LD_INT 1
19851: PPUSH
19852: CALL 21618 0 1
// UpdateLuaVariables ( ) ;
19856: CALL 19873 0 0
// UpdateFactoryWaypoints ( ) ;
19860: CALL 34487 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19864: CALL 34744 0 0
// end ;
19868: LD_VAR 0 1
19872: RET
// function UpdateLuaVariables ( ) ; begin
19873: LD_INT 0
19875: PPUSH
// if globalGameSaveCounter then
19876: LD_EXP 60
19880: IFFALSE 19914
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
19882: LD_ADDR_EXP 60
19886: PUSH
19887: LD_EXP 60
19891: PPUSH
19892: CALL 79374 0 1
19896: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19897: LD_STRING setGameSaveCounter(
19899: PUSH
19900: LD_EXP 60
19904: STR
19905: PUSH
19906: LD_STRING )
19908: STR
19909: PPUSH
19910: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
19914: LD_STRING setGameDifficulty(
19916: PUSH
19917: LD_OWVAR 67
19921: STR
19922: PUSH
19923: LD_STRING )
19925: STR
19926: PPUSH
19927: CALL_OW 559
// end ;
19931: LD_VAR 0 1
19935: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19936: LD_INT 0
19938: PPUSH
// if p2 = stream_mode then
19939: LD_VAR 0 2
19943: PUSH
19944: LD_INT 100
19946: EQUAL
19947: IFFALSE 20950
// begin if not StreamModeActive then
19949: LD_EXP 61
19953: NOT
19954: IFFALSE 19964
// StreamModeActive := true ;
19956: LD_ADDR_EXP 61
19960: PUSH
19961: LD_INT 1
19963: ST_TO_ADDR
// if p3 = 0 then
19964: LD_VAR 0 3
19968: PUSH
19969: LD_INT 0
19971: EQUAL
19972: IFFALSE 19978
// InitStreamMode ;
19974: CALL 21154 0 0
// if p3 = 1 then
19978: LD_VAR 0 3
19982: PUSH
19983: LD_INT 1
19985: EQUAL
19986: IFFALSE 19996
// sRocket := true ;
19988: LD_ADDR_EXP 66
19992: PUSH
19993: LD_INT 1
19995: ST_TO_ADDR
// if p3 = 2 then
19996: LD_VAR 0 3
20000: PUSH
20001: LD_INT 2
20003: EQUAL
20004: IFFALSE 20014
// sSpeed := true ;
20006: LD_ADDR_EXP 65
20010: PUSH
20011: LD_INT 1
20013: ST_TO_ADDR
// if p3 = 3 then
20014: LD_VAR 0 3
20018: PUSH
20019: LD_INT 3
20021: EQUAL
20022: IFFALSE 20032
// sEngine := true ;
20024: LD_ADDR_EXP 67
20028: PUSH
20029: LD_INT 1
20031: ST_TO_ADDR
// if p3 = 4 then
20032: LD_VAR 0 3
20036: PUSH
20037: LD_INT 4
20039: EQUAL
20040: IFFALSE 20050
// sSpec := true ;
20042: LD_ADDR_EXP 64
20046: PUSH
20047: LD_INT 1
20049: ST_TO_ADDR
// if p3 = 5 then
20050: LD_VAR 0 3
20054: PUSH
20055: LD_INT 5
20057: EQUAL
20058: IFFALSE 20068
// sLevel := true ;
20060: LD_ADDR_EXP 68
20064: PUSH
20065: LD_INT 1
20067: ST_TO_ADDR
// if p3 = 6 then
20068: LD_VAR 0 3
20072: PUSH
20073: LD_INT 6
20075: EQUAL
20076: IFFALSE 20086
// sArmoury := true ;
20078: LD_ADDR_EXP 69
20082: PUSH
20083: LD_INT 1
20085: ST_TO_ADDR
// if p3 = 7 then
20086: LD_VAR 0 3
20090: PUSH
20091: LD_INT 7
20093: EQUAL
20094: IFFALSE 20104
// sRadar := true ;
20096: LD_ADDR_EXP 70
20100: PUSH
20101: LD_INT 1
20103: ST_TO_ADDR
// if p3 = 8 then
20104: LD_VAR 0 3
20108: PUSH
20109: LD_INT 8
20111: EQUAL
20112: IFFALSE 20122
// sBunker := true ;
20114: LD_ADDR_EXP 71
20118: PUSH
20119: LD_INT 1
20121: ST_TO_ADDR
// if p3 = 9 then
20122: LD_VAR 0 3
20126: PUSH
20127: LD_INT 9
20129: EQUAL
20130: IFFALSE 20140
// sHack := true ;
20132: LD_ADDR_EXP 72
20136: PUSH
20137: LD_INT 1
20139: ST_TO_ADDR
// if p3 = 10 then
20140: LD_VAR 0 3
20144: PUSH
20145: LD_INT 10
20147: EQUAL
20148: IFFALSE 20158
// sFire := true ;
20150: LD_ADDR_EXP 73
20154: PUSH
20155: LD_INT 1
20157: ST_TO_ADDR
// if p3 = 11 then
20158: LD_VAR 0 3
20162: PUSH
20163: LD_INT 11
20165: EQUAL
20166: IFFALSE 20176
// sRefresh := true ;
20168: LD_ADDR_EXP 74
20172: PUSH
20173: LD_INT 1
20175: ST_TO_ADDR
// if p3 = 12 then
20176: LD_VAR 0 3
20180: PUSH
20181: LD_INT 12
20183: EQUAL
20184: IFFALSE 20194
// sExp := true ;
20186: LD_ADDR_EXP 75
20190: PUSH
20191: LD_INT 1
20193: ST_TO_ADDR
// if p3 = 13 then
20194: LD_VAR 0 3
20198: PUSH
20199: LD_INT 13
20201: EQUAL
20202: IFFALSE 20212
// sDepot := true ;
20204: LD_ADDR_EXP 76
20208: PUSH
20209: LD_INT 1
20211: ST_TO_ADDR
// if p3 = 14 then
20212: LD_VAR 0 3
20216: PUSH
20217: LD_INT 14
20219: EQUAL
20220: IFFALSE 20230
// sFlag := true ;
20222: LD_ADDR_EXP 77
20226: PUSH
20227: LD_INT 1
20229: ST_TO_ADDR
// if p3 = 15 then
20230: LD_VAR 0 3
20234: PUSH
20235: LD_INT 15
20237: EQUAL
20238: IFFALSE 20248
// sKamikadze := true ;
20240: LD_ADDR_EXP 85
20244: PUSH
20245: LD_INT 1
20247: ST_TO_ADDR
// if p3 = 16 then
20248: LD_VAR 0 3
20252: PUSH
20253: LD_INT 16
20255: EQUAL
20256: IFFALSE 20266
// sTroll := true ;
20258: LD_ADDR_EXP 86
20262: PUSH
20263: LD_INT 1
20265: ST_TO_ADDR
// if p3 = 17 then
20266: LD_VAR 0 3
20270: PUSH
20271: LD_INT 17
20273: EQUAL
20274: IFFALSE 20284
// sSlow := true ;
20276: LD_ADDR_EXP 87
20280: PUSH
20281: LD_INT 1
20283: ST_TO_ADDR
// if p3 = 18 then
20284: LD_VAR 0 3
20288: PUSH
20289: LD_INT 18
20291: EQUAL
20292: IFFALSE 20302
// sLack := true ;
20294: LD_ADDR_EXP 88
20298: PUSH
20299: LD_INT 1
20301: ST_TO_ADDR
// if p3 = 19 then
20302: LD_VAR 0 3
20306: PUSH
20307: LD_INT 19
20309: EQUAL
20310: IFFALSE 20320
// sTank := true ;
20312: LD_ADDR_EXP 90
20316: PUSH
20317: LD_INT 1
20319: ST_TO_ADDR
// if p3 = 20 then
20320: LD_VAR 0 3
20324: PUSH
20325: LD_INT 20
20327: EQUAL
20328: IFFALSE 20338
// sRemote := true ;
20330: LD_ADDR_EXP 91
20334: PUSH
20335: LD_INT 1
20337: ST_TO_ADDR
// if p3 = 21 then
20338: LD_VAR 0 3
20342: PUSH
20343: LD_INT 21
20345: EQUAL
20346: IFFALSE 20356
// sPowell := true ;
20348: LD_ADDR_EXP 92
20352: PUSH
20353: LD_INT 1
20355: ST_TO_ADDR
// if p3 = 22 then
20356: LD_VAR 0 3
20360: PUSH
20361: LD_INT 22
20363: EQUAL
20364: IFFALSE 20374
// sTeleport := true ;
20366: LD_ADDR_EXP 95
20370: PUSH
20371: LD_INT 1
20373: ST_TO_ADDR
// if p3 = 23 then
20374: LD_VAR 0 3
20378: PUSH
20379: LD_INT 23
20381: EQUAL
20382: IFFALSE 20392
// sOilTower := true ;
20384: LD_ADDR_EXP 97
20388: PUSH
20389: LD_INT 1
20391: ST_TO_ADDR
// if p3 = 24 then
20392: LD_VAR 0 3
20396: PUSH
20397: LD_INT 24
20399: EQUAL
20400: IFFALSE 20410
// sShovel := true ;
20402: LD_ADDR_EXP 98
20406: PUSH
20407: LD_INT 1
20409: ST_TO_ADDR
// if p3 = 25 then
20410: LD_VAR 0 3
20414: PUSH
20415: LD_INT 25
20417: EQUAL
20418: IFFALSE 20428
// sSheik := true ;
20420: LD_ADDR_EXP 99
20424: PUSH
20425: LD_INT 1
20427: ST_TO_ADDR
// if p3 = 26 then
20428: LD_VAR 0 3
20432: PUSH
20433: LD_INT 26
20435: EQUAL
20436: IFFALSE 20446
// sEarthquake := true ;
20438: LD_ADDR_EXP 101
20442: PUSH
20443: LD_INT 1
20445: ST_TO_ADDR
// if p3 = 27 then
20446: LD_VAR 0 3
20450: PUSH
20451: LD_INT 27
20453: EQUAL
20454: IFFALSE 20464
// sAI := true ;
20456: LD_ADDR_EXP 102
20460: PUSH
20461: LD_INT 1
20463: ST_TO_ADDR
// if p3 = 28 then
20464: LD_VAR 0 3
20468: PUSH
20469: LD_INT 28
20471: EQUAL
20472: IFFALSE 20482
// sCargo := true ;
20474: LD_ADDR_EXP 105
20478: PUSH
20479: LD_INT 1
20481: ST_TO_ADDR
// if p3 = 29 then
20482: LD_VAR 0 3
20486: PUSH
20487: LD_INT 29
20489: EQUAL
20490: IFFALSE 20500
// sDLaser := true ;
20492: LD_ADDR_EXP 106
20496: PUSH
20497: LD_INT 1
20499: ST_TO_ADDR
// if p3 = 30 then
20500: LD_VAR 0 3
20504: PUSH
20505: LD_INT 30
20507: EQUAL
20508: IFFALSE 20518
// sExchange := true ;
20510: LD_ADDR_EXP 107
20514: PUSH
20515: LD_INT 1
20517: ST_TO_ADDR
// if p3 = 31 then
20518: LD_VAR 0 3
20522: PUSH
20523: LD_INT 31
20525: EQUAL
20526: IFFALSE 20536
// sFac := true ;
20528: LD_ADDR_EXP 108
20532: PUSH
20533: LD_INT 1
20535: ST_TO_ADDR
// if p3 = 32 then
20536: LD_VAR 0 3
20540: PUSH
20541: LD_INT 32
20543: EQUAL
20544: IFFALSE 20554
// sPower := true ;
20546: LD_ADDR_EXP 109
20550: PUSH
20551: LD_INT 1
20553: ST_TO_ADDR
// if p3 = 33 then
20554: LD_VAR 0 3
20558: PUSH
20559: LD_INT 33
20561: EQUAL
20562: IFFALSE 20572
// sRandom := true ;
20564: LD_ADDR_EXP 110
20568: PUSH
20569: LD_INT 1
20571: ST_TO_ADDR
// if p3 = 34 then
20572: LD_VAR 0 3
20576: PUSH
20577: LD_INT 34
20579: EQUAL
20580: IFFALSE 20590
// sShield := true ;
20582: LD_ADDR_EXP 111
20586: PUSH
20587: LD_INT 1
20589: ST_TO_ADDR
// if p3 = 35 then
20590: LD_VAR 0 3
20594: PUSH
20595: LD_INT 35
20597: EQUAL
20598: IFFALSE 20608
// sTime := true ;
20600: LD_ADDR_EXP 112
20604: PUSH
20605: LD_INT 1
20607: ST_TO_ADDR
// if p3 = 36 then
20608: LD_VAR 0 3
20612: PUSH
20613: LD_INT 36
20615: EQUAL
20616: IFFALSE 20626
// sTools := true ;
20618: LD_ADDR_EXP 113
20622: PUSH
20623: LD_INT 1
20625: ST_TO_ADDR
// if p3 = 101 then
20626: LD_VAR 0 3
20630: PUSH
20631: LD_INT 101
20633: EQUAL
20634: IFFALSE 20644
// sSold := true ;
20636: LD_ADDR_EXP 78
20640: PUSH
20641: LD_INT 1
20643: ST_TO_ADDR
// if p3 = 102 then
20644: LD_VAR 0 3
20648: PUSH
20649: LD_INT 102
20651: EQUAL
20652: IFFALSE 20662
// sDiff := true ;
20654: LD_ADDR_EXP 79
20658: PUSH
20659: LD_INT 1
20661: ST_TO_ADDR
// if p3 = 103 then
20662: LD_VAR 0 3
20666: PUSH
20667: LD_INT 103
20669: EQUAL
20670: IFFALSE 20680
// sFog := true ;
20672: LD_ADDR_EXP 82
20676: PUSH
20677: LD_INT 1
20679: ST_TO_ADDR
// if p3 = 104 then
20680: LD_VAR 0 3
20684: PUSH
20685: LD_INT 104
20687: EQUAL
20688: IFFALSE 20698
// sReset := true ;
20690: LD_ADDR_EXP 83
20694: PUSH
20695: LD_INT 1
20697: ST_TO_ADDR
// if p3 = 105 then
20698: LD_VAR 0 3
20702: PUSH
20703: LD_INT 105
20705: EQUAL
20706: IFFALSE 20716
// sSun := true ;
20708: LD_ADDR_EXP 84
20712: PUSH
20713: LD_INT 1
20715: ST_TO_ADDR
// if p3 = 106 then
20716: LD_VAR 0 3
20720: PUSH
20721: LD_INT 106
20723: EQUAL
20724: IFFALSE 20734
// sTiger := true ;
20726: LD_ADDR_EXP 80
20730: PUSH
20731: LD_INT 1
20733: ST_TO_ADDR
// if p3 = 107 then
20734: LD_VAR 0 3
20738: PUSH
20739: LD_INT 107
20741: EQUAL
20742: IFFALSE 20752
// sBomb := true ;
20744: LD_ADDR_EXP 81
20748: PUSH
20749: LD_INT 1
20751: ST_TO_ADDR
// if p3 = 108 then
20752: LD_VAR 0 3
20756: PUSH
20757: LD_INT 108
20759: EQUAL
20760: IFFALSE 20770
// sWound := true ;
20762: LD_ADDR_EXP 89
20766: PUSH
20767: LD_INT 1
20769: ST_TO_ADDR
// if p3 = 109 then
20770: LD_VAR 0 3
20774: PUSH
20775: LD_INT 109
20777: EQUAL
20778: IFFALSE 20788
// sBetray := true ;
20780: LD_ADDR_EXP 93
20784: PUSH
20785: LD_INT 1
20787: ST_TO_ADDR
// if p3 = 110 then
20788: LD_VAR 0 3
20792: PUSH
20793: LD_INT 110
20795: EQUAL
20796: IFFALSE 20806
// sContamin := true ;
20798: LD_ADDR_EXP 94
20802: PUSH
20803: LD_INT 1
20805: ST_TO_ADDR
// if p3 = 111 then
20806: LD_VAR 0 3
20810: PUSH
20811: LD_INT 111
20813: EQUAL
20814: IFFALSE 20824
// sOil := true ;
20816: LD_ADDR_EXP 96
20820: PUSH
20821: LD_INT 1
20823: ST_TO_ADDR
// if p3 = 112 then
20824: LD_VAR 0 3
20828: PUSH
20829: LD_INT 112
20831: EQUAL
20832: IFFALSE 20842
// sStu := true ;
20834: LD_ADDR_EXP 100
20838: PUSH
20839: LD_INT 1
20841: ST_TO_ADDR
// if p3 = 113 then
20842: LD_VAR 0 3
20846: PUSH
20847: LD_INT 113
20849: EQUAL
20850: IFFALSE 20860
// sBazooka := true ;
20852: LD_ADDR_EXP 103
20856: PUSH
20857: LD_INT 1
20859: ST_TO_ADDR
// if p3 = 114 then
20860: LD_VAR 0 3
20864: PUSH
20865: LD_INT 114
20867: EQUAL
20868: IFFALSE 20878
// sMortar := true ;
20870: LD_ADDR_EXP 104
20874: PUSH
20875: LD_INT 1
20877: ST_TO_ADDR
// if p3 = 115 then
20878: LD_VAR 0 3
20882: PUSH
20883: LD_INT 115
20885: EQUAL
20886: IFFALSE 20896
// sRanger := true ;
20888: LD_ADDR_EXP 114
20892: PUSH
20893: LD_INT 1
20895: ST_TO_ADDR
// if p3 = 116 then
20896: LD_VAR 0 3
20900: PUSH
20901: LD_INT 116
20903: EQUAL
20904: IFFALSE 20914
// sComputer := true ;
20906: LD_ADDR_EXP 115
20910: PUSH
20911: LD_INT 1
20913: ST_TO_ADDR
// if p3 = 117 then
20914: LD_VAR 0 3
20918: PUSH
20919: LD_INT 117
20921: EQUAL
20922: IFFALSE 20932
// s30 := true ;
20924: LD_ADDR_EXP 116
20928: PUSH
20929: LD_INT 1
20931: ST_TO_ADDR
// if p3 = 118 then
20932: LD_VAR 0 3
20936: PUSH
20937: LD_INT 118
20939: EQUAL
20940: IFFALSE 20950
// s60 := true ;
20942: LD_ADDR_EXP 117
20946: PUSH
20947: LD_INT 1
20949: ST_TO_ADDR
// end ; if p2 = hack_mode then
20950: LD_VAR 0 2
20954: PUSH
20955: LD_INT 101
20957: EQUAL
20958: IFFALSE 21086
// begin case p3 of 1 :
20960: LD_VAR 0 3
20964: PUSH
20965: LD_INT 1
20967: DOUBLE
20968: EQUAL
20969: IFTRUE 20973
20971: GO 20980
20973: POP
// hHackUnlimitedResources ; 2 :
20974: CALL 33233 0 0
20978: GO 21086
20980: LD_INT 2
20982: DOUBLE
20983: EQUAL
20984: IFTRUE 20988
20986: GO 20995
20988: POP
// hHackSetLevel10 ; 3 :
20989: CALL 33366 0 0
20993: GO 21086
20995: LD_INT 3
20997: DOUBLE
20998: EQUAL
20999: IFTRUE 21003
21001: GO 21010
21003: POP
// hHackSetLevel10YourUnits ; 4 :
21004: CALL 33451 0 0
21008: GO 21086
21010: LD_INT 4
21012: DOUBLE
21013: EQUAL
21014: IFTRUE 21018
21016: GO 21025
21018: POP
// hHackInvincible ; 5 :
21019: CALL 33899 0 0
21023: GO 21086
21025: LD_INT 5
21027: DOUBLE
21028: EQUAL
21029: IFTRUE 21033
21031: GO 21040
21033: POP
// hHackInvisible ; 6 :
21034: CALL 34010 0 0
21038: GO 21086
21040: LD_INT 6
21042: DOUBLE
21043: EQUAL
21044: IFTRUE 21048
21046: GO 21055
21048: POP
// hHackChangeYourSide ; 7 :
21049: CALL 34067 0 0
21053: GO 21086
21055: LD_INT 7
21057: DOUBLE
21058: EQUAL
21059: IFTRUE 21063
21061: GO 21070
21063: POP
// hHackChangeUnitSide ; 8 :
21064: CALL 34109 0 0
21068: GO 21086
21070: LD_INT 8
21072: DOUBLE
21073: EQUAL
21074: IFTRUE 21078
21076: GO 21085
21078: POP
// hHackFog ; end ;
21079: CALL 34210 0 0
21083: GO 21086
21085: POP
// end ; if p2 = game_save_mode then
21086: LD_VAR 0 2
21090: PUSH
21091: LD_INT 102
21093: EQUAL
21094: IFFALSE 21149
// begin if p3 = 1 then
21096: LD_VAR 0 3
21100: PUSH
21101: LD_INT 1
21103: EQUAL
21104: IFFALSE 21116
// globalGameSaveCounter := p4 ;
21106: LD_ADDR_EXP 60
21110: PUSH
21111: LD_VAR 0 4
21115: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
21116: LD_VAR 0 3
21120: PUSH
21121: LD_INT 2
21123: EQUAL
21124: PUSH
21125: LD_EXP 60
21129: AND
21130: IFFALSE 21149
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21132: LD_STRING setGameSaveCounter(
21134: PUSH
21135: LD_EXP 60
21139: STR
21140: PUSH
21141: LD_STRING )
21143: STR
21144: PPUSH
21145: CALL_OW 559
// end ; end ;
21149: LD_VAR 0 7
21153: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
21154: LD_INT 0
21156: PPUSH
// streamModeActive := false ;
21157: LD_ADDR_EXP 61
21161: PUSH
21162: LD_INT 0
21164: ST_TO_ADDR
// normalCounter := 36 ;
21165: LD_ADDR_EXP 62
21169: PUSH
21170: LD_INT 36
21172: ST_TO_ADDR
// hardcoreCounter := 18 ;
21173: LD_ADDR_EXP 63
21177: PUSH
21178: LD_INT 18
21180: ST_TO_ADDR
// sRocket := false ;
21181: LD_ADDR_EXP 66
21185: PUSH
21186: LD_INT 0
21188: ST_TO_ADDR
// sSpeed := false ;
21189: LD_ADDR_EXP 65
21193: PUSH
21194: LD_INT 0
21196: ST_TO_ADDR
// sEngine := false ;
21197: LD_ADDR_EXP 67
21201: PUSH
21202: LD_INT 0
21204: ST_TO_ADDR
// sSpec := false ;
21205: LD_ADDR_EXP 64
21209: PUSH
21210: LD_INT 0
21212: ST_TO_ADDR
// sLevel := false ;
21213: LD_ADDR_EXP 68
21217: PUSH
21218: LD_INT 0
21220: ST_TO_ADDR
// sArmoury := false ;
21221: LD_ADDR_EXP 69
21225: PUSH
21226: LD_INT 0
21228: ST_TO_ADDR
// sRadar := false ;
21229: LD_ADDR_EXP 70
21233: PUSH
21234: LD_INT 0
21236: ST_TO_ADDR
// sBunker := false ;
21237: LD_ADDR_EXP 71
21241: PUSH
21242: LD_INT 0
21244: ST_TO_ADDR
// sHack := false ;
21245: LD_ADDR_EXP 72
21249: PUSH
21250: LD_INT 0
21252: ST_TO_ADDR
// sFire := false ;
21253: LD_ADDR_EXP 73
21257: PUSH
21258: LD_INT 0
21260: ST_TO_ADDR
// sRefresh := false ;
21261: LD_ADDR_EXP 74
21265: PUSH
21266: LD_INT 0
21268: ST_TO_ADDR
// sExp := false ;
21269: LD_ADDR_EXP 75
21273: PUSH
21274: LD_INT 0
21276: ST_TO_ADDR
// sDepot := false ;
21277: LD_ADDR_EXP 76
21281: PUSH
21282: LD_INT 0
21284: ST_TO_ADDR
// sFlag := false ;
21285: LD_ADDR_EXP 77
21289: PUSH
21290: LD_INT 0
21292: ST_TO_ADDR
// sKamikadze := false ;
21293: LD_ADDR_EXP 85
21297: PUSH
21298: LD_INT 0
21300: ST_TO_ADDR
// sTroll := false ;
21301: LD_ADDR_EXP 86
21305: PUSH
21306: LD_INT 0
21308: ST_TO_ADDR
// sSlow := false ;
21309: LD_ADDR_EXP 87
21313: PUSH
21314: LD_INT 0
21316: ST_TO_ADDR
// sLack := false ;
21317: LD_ADDR_EXP 88
21321: PUSH
21322: LD_INT 0
21324: ST_TO_ADDR
// sTank := false ;
21325: LD_ADDR_EXP 90
21329: PUSH
21330: LD_INT 0
21332: ST_TO_ADDR
// sRemote := false ;
21333: LD_ADDR_EXP 91
21337: PUSH
21338: LD_INT 0
21340: ST_TO_ADDR
// sPowell := false ;
21341: LD_ADDR_EXP 92
21345: PUSH
21346: LD_INT 0
21348: ST_TO_ADDR
// sTeleport := false ;
21349: LD_ADDR_EXP 95
21353: PUSH
21354: LD_INT 0
21356: ST_TO_ADDR
// sOilTower := false ;
21357: LD_ADDR_EXP 97
21361: PUSH
21362: LD_INT 0
21364: ST_TO_ADDR
// sShovel := false ;
21365: LD_ADDR_EXP 98
21369: PUSH
21370: LD_INT 0
21372: ST_TO_ADDR
// sSheik := false ;
21373: LD_ADDR_EXP 99
21377: PUSH
21378: LD_INT 0
21380: ST_TO_ADDR
// sEarthquake := false ;
21381: LD_ADDR_EXP 101
21385: PUSH
21386: LD_INT 0
21388: ST_TO_ADDR
// sAI := false ;
21389: LD_ADDR_EXP 102
21393: PUSH
21394: LD_INT 0
21396: ST_TO_ADDR
// sCargo := false ;
21397: LD_ADDR_EXP 105
21401: PUSH
21402: LD_INT 0
21404: ST_TO_ADDR
// sDLaser := false ;
21405: LD_ADDR_EXP 106
21409: PUSH
21410: LD_INT 0
21412: ST_TO_ADDR
// sExchange := false ;
21413: LD_ADDR_EXP 107
21417: PUSH
21418: LD_INT 0
21420: ST_TO_ADDR
// sFac := false ;
21421: LD_ADDR_EXP 108
21425: PUSH
21426: LD_INT 0
21428: ST_TO_ADDR
// sPower := false ;
21429: LD_ADDR_EXP 109
21433: PUSH
21434: LD_INT 0
21436: ST_TO_ADDR
// sRandom := false ;
21437: LD_ADDR_EXP 110
21441: PUSH
21442: LD_INT 0
21444: ST_TO_ADDR
// sShield := false ;
21445: LD_ADDR_EXP 111
21449: PUSH
21450: LD_INT 0
21452: ST_TO_ADDR
// sTime := false ;
21453: LD_ADDR_EXP 112
21457: PUSH
21458: LD_INT 0
21460: ST_TO_ADDR
// sTools := false ;
21461: LD_ADDR_EXP 113
21465: PUSH
21466: LD_INT 0
21468: ST_TO_ADDR
// sSold := false ;
21469: LD_ADDR_EXP 78
21473: PUSH
21474: LD_INT 0
21476: ST_TO_ADDR
// sDiff := false ;
21477: LD_ADDR_EXP 79
21481: PUSH
21482: LD_INT 0
21484: ST_TO_ADDR
// sFog := false ;
21485: LD_ADDR_EXP 82
21489: PUSH
21490: LD_INT 0
21492: ST_TO_ADDR
// sReset := false ;
21493: LD_ADDR_EXP 83
21497: PUSH
21498: LD_INT 0
21500: ST_TO_ADDR
// sSun := false ;
21501: LD_ADDR_EXP 84
21505: PUSH
21506: LD_INT 0
21508: ST_TO_ADDR
// sTiger := false ;
21509: LD_ADDR_EXP 80
21513: PUSH
21514: LD_INT 0
21516: ST_TO_ADDR
// sBomb := false ;
21517: LD_ADDR_EXP 81
21521: PUSH
21522: LD_INT 0
21524: ST_TO_ADDR
// sWound := false ;
21525: LD_ADDR_EXP 89
21529: PUSH
21530: LD_INT 0
21532: ST_TO_ADDR
// sBetray := false ;
21533: LD_ADDR_EXP 93
21537: PUSH
21538: LD_INT 0
21540: ST_TO_ADDR
// sContamin := false ;
21541: LD_ADDR_EXP 94
21545: PUSH
21546: LD_INT 0
21548: ST_TO_ADDR
// sOil := false ;
21549: LD_ADDR_EXP 96
21553: PUSH
21554: LD_INT 0
21556: ST_TO_ADDR
// sStu := false ;
21557: LD_ADDR_EXP 100
21561: PUSH
21562: LD_INT 0
21564: ST_TO_ADDR
// sBazooka := false ;
21565: LD_ADDR_EXP 103
21569: PUSH
21570: LD_INT 0
21572: ST_TO_ADDR
// sMortar := false ;
21573: LD_ADDR_EXP 104
21577: PUSH
21578: LD_INT 0
21580: ST_TO_ADDR
// sRanger := false ;
21581: LD_ADDR_EXP 114
21585: PUSH
21586: LD_INT 0
21588: ST_TO_ADDR
// sComputer := false ;
21589: LD_ADDR_EXP 115
21593: PUSH
21594: LD_INT 0
21596: ST_TO_ADDR
// s30 := false ;
21597: LD_ADDR_EXP 116
21601: PUSH
21602: LD_INT 0
21604: ST_TO_ADDR
// s60 := false ;
21605: LD_ADDR_EXP 117
21609: PUSH
21610: LD_INT 0
21612: ST_TO_ADDR
// end ;
21613: LD_VAR 0 1
21617: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21618: LD_INT 0
21620: PPUSH
21621: PPUSH
21622: PPUSH
21623: PPUSH
21624: PPUSH
21625: PPUSH
21626: PPUSH
// result := [ ] ;
21627: LD_ADDR_VAR 0 2
21631: PUSH
21632: EMPTY
21633: ST_TO_ADDR
// if campaign_id = 1 then
21634: LD_OWVAR 69
21638: PUSH
21639: LD_INT 1
21641: EQUAL
21642: IFFALSE 24808
// begin case mission_number of 1 :
21644: LD_OWVAR 70
21648: PUSH
21649: LD_INT 1
21651: DOUBLE
21652: EQUAL
21653: IFTRUE 21657
21655: GO 21733
21657: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21658: LD_ADDR_VAR 0 2
21662: PUSH
21663: LD_INT 2
21665: PUSH
21666: LD_INT 4
21668: PUSH
21669: LD_INT 11
21671: PUSH
21672: LD_INT 12
21674: PUSH
21675: LD_INT 15
21677: PUSH
21678: LD_INT 16
21680: PUSH
21681: LD_INT 22
21683: PUSH
21684: LD_INT 23
21686: PUSH
21687: LD_INT 26
21689: PUSH
21690: EMPTY
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: PUSH
21701: LD_INT 101
21703: PUSH
21704: LD_INT 102
21706: PUSH
21707: LD_INT 106
21709: PUSH
21710: LD_INT 116
21712: PUSH
21713: LD_INT 117
21715: PUSH
21716: LD_INT 118
21718: PUSH
21719: EMPTY
21720: LIST
21721: LIST
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: PUSH
21727: EMPTY
21728: LIST
21729: LIST
21730: ST_TO_ADDR
21731: GO 24806
21733: LD_INT 2
21735: DOUBLE
21736: EQUAL
21737: IFTRUE 21741
21739: GO 21825
21741: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21742: LD_ADDR_VAR 0 2
21746: PUSH
21747: LD_INT 2
21749: PUSH
21750: LD_INT 4
21752: PUSH
21753: LD_INT 11
21755: PUSH
21756: LD_INT 12
21758: PUSH
21759: LD_INT 15
21761: PUSH
21762: LD_INT 16
21764: PUSH
21765: LD_INT 22
21767: PUSH
21768: LD_INT 23
21770: PUSH
21771: LD_INT 26
21773: PUSH
21774: EMPTY
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: PUSH
21785: LD_INT 101
21787: PUSH
21788: LD_INT 102
21790: PUSH
21791: LD_INT 105
21793: PUSH
21794: LD_INT 106
21796: PUSH
21797: LD_INT 108
21799: PUSH
21800: LD_INT 116
21802: PUSH
21803: LD_INT 117
21805: PUSH
21806: LD_INT 118
21808: PUSH
21809: EMPTY
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: PUSH
21819: EMPTY
21820: LIST
21821: LIST
21822: ST_TO_ADDR
21823: GO 24806
21825: LD_INT 3
21827: DOUBLE
21828: EQUAL
21829: IFTRUE 21833
21831: GO 21921
21833: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21834: LD_ADDR_VAR 0 2
21838: PUSH
21839: LD_INT 2
21841: PUSH
21842: LD_INT 4
21844: PUSH
21845: LD_INT 5
21847: PUSH
21848: LD_INT 11
21850: PUSH
21851: LD_INT 12
21853: PUSH
21854: LD_INT 15
21856: PUSH
21857: LD_INT 16
21859: PUSH
21860: LD_INT 22
21862: PUSH
21863: LD_INT 26
21865: PUSH
21866: LD_INT 36
21868: PUSH
21869: EMPTY
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: PUSH
21881: LD_INT 101
21883: PUSH
21884: LD_INT 102
21886: PUSH
21887: LD_INT 105
21889: PUSH
21890: LD_INT 106
21892: PUSH
21893: LD_INT 108
21895: PUSH
21896: LD_INT 116
21898: PUSH
21899: LD_INT 117
21901: PUSH
21902: LD_INT 118
21904: PUSH
21905: EMPTY
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: LIST
21914: PUSH
21915: EMPTY
21916: LIST
21917: LIST
21918: ST_TO_ADDR
21919: GO 24806
21921: LD_INT 4
21923: DOUBLE
21924: EQUAL
21925: IFTRUE 21929
21927: GO 22025
21929: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21930: LD_ADDR_VAR 0 2
21934: PUSH
21935: LD_INT 2
21937: PUSH
21938: LD_INT 4
21940: PUSH
21941: LD_INT 5
21943: PUSH
21944: LD_INT 8
21946: PUSH
21947: LD_INT 11
21949: PUSH
21950: LD_INT 12
21952: PUSH
21953: LD_INT 15
21955: PUSH
21956: LD_INT 16
21958: PUSH
21959: LD_INT 22
21961: PUSH
21962: LD_INT 23
21964: PUSH
21965: LD_INT 26
21967: PUSH
21968: LD_INT 36
21970: PUSH
21971: EMPTY
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: PUSH
21985: LD_INT 101
21987: PUSH
21988: LD_INT 102
21990: PUSH
21991: LD_INT 105
21993: PUSH
21994: LD_INT 106
21996: PUSH
21997: LD_INT 108
21999: PUSH
22000: LD_INT 116
22002: PUSH
22003: LD_INT 117
22005: PUSH
22006: LD_INT 118
22008: PUSH
22009: EMPTY
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: PUSH
22019: EMPTY
22020: LIST
22021: LIST
22022: ST_TO_ADDR
22023: GO 24806
22025: LD_INT 5
22027: DOUBLE
22028: EQUAL
22029: IFTRUE 22033
22031: GO 22145
22033: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
22034: LD_ADDR_VAR 0 2
22038: PUSH
22039: LD_INT 2
22041: PUSH
22042: LD_INT 4
22044: PUSH
22045: LD_INT 5
22047: PUSH
22048: LD_INT 6
22050: PUSH
22051: LD_INT 8
22053: PUSH
22054: LD_INT 11
22056: PUSH
22057: LD_INT 12
22059: PUSH
22060: LD_INT 15
22062: PUSH
22063: LD_INT 16
22065: PUSH
22066: LD_INT 22
22068: PUSH
22069: LD_INT 23
22071: PUSH
22072: LD_INT 25
22074: PUSH
22075: LD_INT 26
22077: PUSH
22078: LD_INT 36
22080: PUSH
22081: EMPTY
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: PUSH
22097: LD_INT 101
22099: PUSH
22100: LD_INT 102
22102: PUSH
22103: LD_INT 105
22105: PUSH
22106: LD_INT 106
22108: PUSH
22109: LD_INT 108
22111: PUSH
22112: LD_INT 109
22114: PUSH
22115: LD_INT 112
22117: PUSH
22118: LD_INT 116
22120: PUSH
22121: LD_INT 117
22123: PUSH
22124: LD_INT 118
22126: PUSH
22127: EMPTY
22128: LIST
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: LIST
22135: LIST
22136: LIST
22137: LIST
22138: PUSH
22139: EMPTY
22140: LIST
22141: LIST
22142: ST_TO_ADDR
22143: GO 24806
22145: LD_INT 6
22147: DOUBLE
22148: EQUAL
22149: IFTRUE 22153
22151: GO 22285
22153: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22154: LD_ADDR_VAR 0 2
22158: PUSH
22159: LD_INT 2
22161: PUSH
22162: LD_INT 4
22164: PUSH
22165: LD_INT 5
22167: PUSH
22168: LD_INT 6
22170: PUSH
22171: LD_INT 8
22173: PUSH
22174: LD_INT 11
22176: PUSH
22177: LD_INT 12
22179: PUSH
22180: LD_INT 15
22182: PUSH
22183: LD_INT 16
22185: PUSH
22186: LD_INT 20
22188: PUSH
22189: LD_INT 21
22191: PUSH
22192: LD_INT 22
22194: PUSH
22195: LD_INT 23
22197: PUSH
22198: LD_INT 25
22200: PUSH
22201: LD_INT 26
22203: PUSH
22204: LD_INT 30
22206: PUSH
22207: LD_INT 31
22209: PUSH
22210: LD_INT 32
22212: PUSH
22213: LD_INT 36
22215: PUSH
22216: EMPTY
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: PUSH
22237: LD_INT 101
22239: PUSH
22240: LD_INT 102
22242: PUSH
22243: LD_INT 105
22245: PUSH
22246: LD_INT 106
22248: PUSH
22249: LD_INT 108
22251: PUSH
22252: LD_INT 109
22254: PUSH
22255: LD_INT 112
22257: PUSH
22258: LD_INT 116
22260: PUSH
22261: LD_INT 117
22263: PUSH
22264: LD_INT 118
22266: PUSH
22267: EMPTY
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: PUSH
22279: EMPTY
22280: LIST
22281: LIST
22282: ST_TO_ADDR
22283: GO 24806
22285: LD_INT 7
22287: DOUBLE
22288: EQUAL
22289: IFTRUE 22293
22291: GO 22405
22293: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22294: LD_ADDR_VAR 0 2
22298: PUSH
22299: LD_INT 2
22301: PUSH
22302: LD_INT 4
22304: PUSH
22305: LD_INT 5
22307: PUSH
22308: LD_INT 7
22310: PUSH
22311: LD_INT 11
22313: PUSH
22314: LD_INT 12
22316: PUSH
22317: LD_INT 15
22319: PUSH
22320: LD_INT 16
22322: PUSH
22323: LD_INT 20
22325: PUSH
22326: LD_INT 21
22328: PUSH
22329: LD_INT 22
22331: PUSH
22332: LD_INT 23
22334: PUSH
22335: LD_INT 25
22337: PUSH
22338: LD_INT 26
22340: PUSH
22341: EMPTY
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: PUSH
22357: LD_INT 101
22359: PUSH
22360: LD_INT 102
22362: PUSH
22363: LD_INT 103
22365: PUSH
22366: LD_INT 105
22368: PUSH
22369: LD_INT 106
22371: PUSH
22372: LD_INT 108
22374: PUSH
22375: LD_INT 112
22377: PUSH
22378: LD_INT 116
22380: PUSH
22381: LD_INT 117
22383: PUSH
22384: LD_INT 118
22386: PUSH
22387: EMPTY
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: PUSH
22399: EMPTY
22400: LIST
22401: LIST
22402: ST_TO_ADDR
22403: GO 24806
22405: LD_INT 8
22407: DOUBLE
22408: EQUAL
22409: IFTRUE 22413
22411: GO 22553
22413: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22414: LD_ADDR_VAR 0 2
22418: PUSH
22419: LD_INT 2
22421: PUSH
22422: LD_INT 4
22424: PUSH
22425: LD_INT 5
22427: PUSH
22428: LD_INT 6
22430: PUSH
22431: LD_INT 7
22433: PUSH
22434: LD_INT 8
22436: PUSH
22437: LD_INT 11
22439: PUSH
22440: LD_INT 12
22442: PUSH
22443: LD_INT 15
22445: PUSH
22446: LD_INT 16
22448: PUSH
22449: LD_INT 20
22451: PUSH
22452: LD_INT 21
22454: PUSH
22455: LD_INT 22
22457: PUSH
22458: LD_INT 23
22460: PUSH
22461: LD_INT 25
22463: PUSH
22464: LD_INT 26
22466: PUSH
22467: LD_INT 30
22469: PUSH
22470: LD_INT 31
22472: PUSH
22473: LD_INT 32
22475: PUSH
22476: LD_INT 36
22478: PUSH
22479: EMPTY
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: PUSH
22501: LD_INT 101
22503: PUSH
22504: LD_INT 102
22506: PUSH
22507: LD_INT 103
22509: PUSH
22510: LD_INT 105
22512: PUSH
22513: LD_INT 106
22515: PUSH
22516: LD_INT 108
22518: PUSH
22519: LD_INT 109
22521: PUSH
22522: LD_INT 112
22524: PUSH
22525: LD_INT 116
22527: PUSH
22528: LD_INT 117
22530: PUSH
22531: LD_INT 118
22533: PUSH
22534: EMPTY
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: PUSH
22547: EMPTY
22548: LIST
22549: LIST
22550: ST_TO_ADDR
22551: GO 24806
22553: LD_INT 9
22555: DOUBLE
22556: EQUAL
22557: IFTRUE 22561
22559: GO 22709
22561: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22562: LD_ADDR_VAR 0 2
22566: PUSH
22567: LD_INT 2
22569: PUSH
22570: LD_INT 4
22572: PUSH
22573: LD_INT 5
22575: PUSH
22576: LD_INT 6
22578: PUSH
22579: LD_INT 7
22581: PUSH
22582: LD_INT 8
22584: PUSH
22585: LD_INT 11
22587: PUSH
22588: LD_INT 12
22590: PUSH
22591: LD_INT 15
22593: PUSH
22594: LD_INT 16
22596: PUSH
22597: LD_INT 20
22599: PUSH
22600: LD_INT 21
22602: PUSH
22603: LD_INT 22
22605: PUSH
22606: LD_INT 23
22608: PUSH
22609: LD_INT 25
22611: PUSH
22612: LD_INT 26
22614: PUSH
22615: LD_INT 28
22617: PUSH
22618: LD_INT 30
22620: PUSH
22621: LD_INT 31
22623: PUSH
22624: LD_INT 32
22626: PUSH
22627: LD_INT 36
22629: PUSH
22630: EMPTY
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: PUSH
22653: LD_INT 101
22655: PUSH
22656: LD_INT 102
22658: PUSH
22659: LD_INT 103
22661: PUSH
22662: LD_INT 105
22664: PUSH
22665: LD_INT 106
22667: PUSH
22668: LD_INT 108
22670: PUSH
22671: LD_INT 109
22673: PUSH
22674: LD_INT 112
22676: PUSH
22677: LD_INT 114
22679: PUSH
22680: LD_INT 116
22682: PUSH
22683: LD_INT 117
22685: PUSH
22686: LD_INT 118
22688: PUSH
22689: EMPTY
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: PUSH
22703: EMPTY
22704: LIST
22705: LIST
22706: ST_TO_ADDR
22707: GO 24806
22709: LD_INT 10
22711: DOUBLE
22712: EQUAL
22713: IFTRUE 22717
22715: GO 22913
22717: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22718: LD_ADDR_VAR 0 2
22722: PUSH
22723: LD_INT 2
22725: PUSH
22726: LD_INT 4
22728: PUSH
22729: LD_INT 5
22731: PUSH
22732: LD_INT 6
22734: PUSH
22735: LD_INT 7
22737: PUSH
22738: LD_INT 8
22740: PUSH
22741: LD_INT 9
22743: PUSH
22744: LD_INT 10
22746: PUSH
22747: LD_INT 11
22749: PUSH
22750: LD_INT 12
22752: PUSH
22753: LD_INT 13
22755: PUSH
22756: LD_INT 14
22758: PUSH
22759: LD_INT 15
22761: PUSH
22762: LD_INT 16
22764: PUSH
22765: LD_INT 17
22767: PUSH
22768: LD_INT 18
22770: PUSH
22771: LD_INT 19
22773: PUSH
22774: LD_INT 20
22776: PUSH
22777: LD_INT 21
22779: PUSH
22780: LD_INT 22
22782: PUSH
22783: LD_INT 23
22785: PUSH
22786: LD_INT 24
22788: PUSH
22789: LD_INT 25
22791: PUSH
22792: LD_INT 26
22794: PUSH
22795: LD_INT 28
22797: PUSH
22798: LD_INT 30
22800: PUSH
22801: LD_INT 31
22803: PUSH
22804: LD_INT 32
22806: PUSH
22807: LD_INT 36
22809: PUSH
22810: EMPTY
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: PUSH
22841: LD_INT 101
22843: PUSH
22844: LD_INT 102
22846: PUSH
22847: LD_INT 103
22849: PUSH
22850: LD_INT 104
22852: PUSH
22853: LD_INT 105
22855: PUSH
22856: LD_INT 106
22858: PUSH
22859: LD_INT 107
22861: PUSH
22862: LD_INT 108
22864: PUSH
22865: LD_INT 109
22867: PUSH
22868: LD_INT 110
22870: PUSH
22871: LD_INT 111
22873: PUSH
22874: LD_INT 112
22876: PUSH
22877: LD_INT 114
22879: PUSH
22880: LD_INT 116
22882: PUSH
22883: LD_INT 117
22885: PUSH
22886: LD_INT 118
22888: PUSH
22889: EMPTY
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: PUSH
22907: EMPTY
22908: LIST
22909: LIST
22910: ST_TO_ADDR
22911: GO 24806
22913: LD_INT 11
22915: DOUBLE
22916: EQUAL
22917: IFTRUE 22921
22919: GO 23125
22921: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22922: LD_ADDR_VAR 0 2
22926: PUSH
22927: LD_INT 2
22929: PUSH
22930: LD_INT 3
22932: PUSH
22933: LD_INT 4
22935: PUSH
22936: LD_INT 5
22938: PUSH
22939: LD_INT 6
22941: PUSH
22942: LD_INT 7
22944: PUSH
22945: LD_INT 8
22947: PUSH
22948: LD_INT 9
22950: PUSH
22951: LD_INT 10
22953: PUSH
22954: LD_INT 11
22956: PUSH
22957: LD_INT 12
22959: PUSH
22960: LD_INT 13
22962: PUSH
22963: LD_INT 14
22965: PUSH
22966: LD_INT 15
22968: PUSH
22969: LD_INT 16
22971: PUSH
22972: LD_INT 17
22974: PUSH
22975: LD_INT 18
22977: PUSH
22978: LD_INT 19
22980: PUSH
22981: LD_INT 20
22983: PUSH
22984: LD_INT 21
22986: PUSH
22987: LD_INT 22
22989: PUSH
22990: LD_INT 23
22992: PUSH
22993: LD_INT 24
22995: PUSH
22996: LD_INT 25
22998: PUSH
22999: LD_INT 26
23001: PUSH
23002: LD_INT 28
23004: PUSH
23005: LD_INT 30
23007: PUSH
23008: LD_INT 31
23010: PUSH
23011: LD_INT 32
23013: PUSH
23014: LD_INT 34
23016: PUSH
23017: LD_INT 36
23019: PUSH
23020: EMPTY
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: PUSH
23053: LD_INT 101
23055: PUSH
23056: LD_INT 102
23058: PUSH
23059: LD_INT 103
23061: PUSH
23062: LD_INT 104
23064: PUSH
23065: LD_INT 105
23067: PUSH
23068: LD_INT 106
23070: PUSH
23071: LD_INT 107
23073: PUSH
23074: LD_INT 108
23076: PUSH
23077: LD_INT 109
23079: PUSH
23080: LD_INT 110
23082: PUSH
23083: LD_INT 111
23085: PUSH
23086: LD_INT 112
23088: PUSH
23089: LD_INT 114
23091: PUSH
23092: LD_INT 116
23094: PUSH
23095: LD_INT 117
23097: PUSH
23098: LD_INT 118
23100: PUSH
23101: EMPTY
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: LIST
23112: LIST
23113: LIST
23114: LIST
23115: LIST
23116: LIST
23117: LIST
23118: PUSH
23119: EMPTY
23120: LIST
23121: LIST
23122: ST_TO_ADDR
23123: GO 24806
23125: LD_INT 12
23127: DOUBLE
23128: EQUAL
23129: IFTRUE 23133
23131: GO 23353
23133: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23134: LD_ADDR_VAR 0 2
23138: PUSH
23139: LD_INT 1
23141: PUSH
23142: LD_INT 2
23144: PUSH
23145: LD_INT 3
23147: PUSH
23148: LD_INT 4
23150: PUSH
23151: LD_INT 5
23153: PUSH
23154: LD_INT 6
23156: PUSH
23157: LD_INT 7
23159: PUSH
23160: LD_INT 8
23162: PUSH
23163: LD_INT 9
23165: PUSH
23166: LD_INT 10
23168: PUSH
23169: LD_INT 11
23171: PUSH
23172: LD_INT 12
23174: PUSH
23175: LD_INT 13
23177: PUSH
23178: LD_INT 14
23180: PUSH
23181: LD_INT 15
23183: PUSH
23184: LD_INT 16
23186: PUSH
23187: LD_INT 17
23189: PUSH
23190: LD_INT 18
23192: PUSH
23193: LD_INT 19
23195: PUSH
23196: LD_INT 20
23198: PUSH
23199: LD_INT 21
23201: PUSH
23202: LD_INT 22
23204: PUSH
23205: LD_INT 23
23207: PUSH
23208: LD_INT 24
23210: PUSH
23211: LD_INT 25
23213: PUSH
23214: LD_INT 26
23216: PUSH
23217: LD_INT 27
23219: PUSH
23220: LD_INT 28
23222: PUSH
23223: LD_INT 30
23225: PUSH
23226: LD_INT 31
23228: PUSH
23229: LD_INT 32
23231: PUSH
23232: LD_INT 33
23234: PUSH
23235: LD_INT 34
23237: PUSH
23238: LD_INT 36
23240: PUSH
23241: EMPTY
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: PUSH
23277: LD_INT 101
23279: PUSH
23280: LD_INT 102
23282: PUSH
23283: LD_INT 103
23285: PUSH
23286: LD_INT 104
23288: PUSH
23289: LD_INT 105
23291: PUSH
23292: LD_INT 106
23294: PUSH
23295: LD_INT 107
23297: PUSH
23298: LD_INT 108
23300: PUSH
23301: LD_INT 109
23303: PUSH
23304: LD_INT 110
23306: PUSH
23307: LD_INT 111
23309: PUSH
23310: LD_INT 112
23312: PUSH
23313: LD_INT 113
23315: PUSH
23316: LD_INT 114
23318: PUSH
23319: LD_INT 116
23321: PUSH
23322: LD_INT 117
23324: PUSH
23325: LD_INT 118
23327: PUSH
23328: EMPTY
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: PUSH
23347: EMPTY
23348: LIST
23349: LIST
23350: ST_TO_ADDR
23351: GO 24806
23353: LD_INT 13
23355: DOUBLE
23356: EQUAL
23357: IFTRUE 23361
23359: GO 23569
23361: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23362: LD_ADDR_VAR 0 2
23366: PUSH
23367: LD_INT 1
23369: PUSH
23370: LD_INT 2
23372: PUSH
23373: LD_INT 3
23375: PUSH
23376: LD_INT 4
23378: PUSH
23379: LD_INT 5
23381: PUSH
23382: LD_INT 8
23384: PUSH
23385: LD_INT 9
23387: PUSH
23388: LD_INT 10
23390: PUSH
23391: LD_INT 11
23393: PUSH
23394: LD_INT 12
23396: PUSH
23397: LD_INT 14
23399: PUSH
23400: LD_INT 15
23402: PUSH
23403: LD_INT 16
23405: PUSH
23406: LD_INT 17
23408: PUSH
23409: LD_INT 18
23411: PUSH
23412: LD_INT 19
23414: PUSH
23415: LD_INT 20
23417: PUSH
23418: LD_INT 21
23420: PUSH
23421: LD_INT 22
23423: PUSH
23424: LD_INT 23
23426: PUSH
23427: LD_INT 24
23429: PUSH
23430: LD_INT 25
23432: PUSH
23433: LD_INT 26
23435: PUSH
23436: LD_INT 27
23438: PUSH
23439: LD_INT 28
23441: PUSH
23442: LD_INT 30
23444: PUSH
23445: LD_INT 31
23447: PUSH
23448: LD_INT 32
23450: PUSH
23451: LD_INT 33
23453: PUSH
23454: LD_INT 34
23456: PUSH
23457: LD_INT 36
23459: PUSH
23460: EMPTY
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: PUSH
23493: LD_INT 101
23495: PUSH
23496: LD_INT 102
23498: PUSH
23499: LD_INT 103
23501: PUSH
23502: LD_INT 104
23504: PUSH
23505: LD_INT 105
23507: PUSH
23508: LD_INT 106
23510: PUSH
23511: LD_INT 107
23513: PUSH
23514: LD_INT 108
23516: PUSH
23517: LD_INT 109
23519: PUSH
23520: LD_INT 110
23522: PUSH
23523: LD_INT 111
23525: PUSH
23526: LD_INT 112
23528: PUSH
23529: LD_INT 113
23531: PUSH
23532: LD_INT 114
23534: PUSH
23535: LD_INT 116
23537: PUSH
23538: LD_INT 117
23540: PUSH
23541: LD_INT 118
23543: PUSH
23544: EMPTY
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: PUSH
23563: EMPTY
23564: LIST
23565: LIST
23566: ST_TO_ADDR
23567: GO 24806
23569: LD_INT 14
23571: DOUBLE
23572: EQUAL
23573: IFTRUE 23577
23575: GO 23801
23577: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23578: LD_ADDR_VAR 0 2
23582: PUSH
23583: LD_INT 1
23585: PUSH
23586: LD_INT 2
23588: PUSH
23589: LD_INT 3
23591: PUSH
23592: LD_INT 4
23594: PUSH
23595: LD_INT 5
23597: PUSH
23598: LD_INT 6
23600: PUSH
23601: LD_INT 7
23603: PUSH
23604: LD_INT 8
23606: PUSH
23607: LD_INT 9
23609: PUSH
23610: LD_INT 10
23612: PUSH
23613: LD_INT 11
23615: PUSH
23616: LD_INT 12
23618: PUSH
23619: LD_INT 13
23621: PUSH
23622: LD_INT 14
23624: PUSH
23625: LD_INT 15
23627: PUSH
23628: LD_INT 16
23630: PUSH
23631: LD_INT 17
23633: PUSH
23634: LD_INT 18
23636: PUSH
23637: LD_INT 19
23639: PUSH
23640: LD_INT 20
23642: PUSH
23643: LD_INT 21
23645: PUSH
23646: LD_INT 22
23648: PUSH
23649: LD_INT 23
23651: PUSH
23652: LD_INT 24
23654: PUSH
23655: LD_INT 25
23657: PUSH
23658: LD_INT 26
23660: PUSH
23661: LD_INT 27
23663: PUSH
23664: LD_INT 28
23666: PUSH
23667: LD_INT 29
23669: PUSH
23670: LD_INT 30
23672: PUSH
23673: LD_INT 31
23675: PUSH
23676: LD_INT 32
23678: PUSH
23679: LD_INT 33
23681: PUSH
23682: LD_INT 34
23684: PUSH
23685: LD_INT 36
23687: PUSH
23688: EMPTY
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: PUSH
23725: LD_INT 101
23727: PUSH
23728: LD_INT 102
23730: PUSH
23731: LD_INT 103
23733: PUSH
23734: LD_INT 104
23736: PUSH
23737: LD_INT 105
23739: PUSH
23740: LD_INT 106
23742: PUSH
23743: LD_INT 107
23745: PUSH
23746: LD_INT 108
23748: PUSH
23749: LD_INT 109
23751: PUSH
23752: LD_INT 110
23754: PUSH
23755: LD_INT 111
23757: PUSH
23758: LD_INT 112
23760: PUSH
23761: LD_INT 113
23763: PUSH
23764: LD_INT 114
23766: PUSH
23767: LD_INT 116
23769: PUSH
23770: LD_INT 117
23772: PUSH
23773: LD_INT 118
23775: PUSH
23776: EMPTY
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: PUSH
23795: EMPTY
23796: LIST
23797: LIST
23798: ST_TO_ADDR
23799: GO 24806
23801: LD_INT 15
23803: DOUBLE
23804: EQUAL
23805: IFTRUE 23809
23807: GO 24033
23809: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23810: LD_ADDR_VAR 0 2
23814: PUSH
23815: LD_INT 1
23817: PUSH
23818: LD_INT 2
23820: PUSH
23821: LD_INT 3
23823: PUSH
23824: LD_INT 4
23826: PUSH
23827: LD_INT 5
23829: PUSH
23830: LD_INT 6
23832: PUSH
23833: LD_INT 7
23835: PUSH
23836: LD_INT 8
23838: PUSH
23839: LD_INT 9
23841: PUSH
23842: LD_INT 10
23844: PUSH
23845: LD_INT 11
23847: PUSH
23848: LD_INT 12
23850: PUSH
23851: LD_INT 13
23853: PUSH
23854: LD_INT 14
23856: PUSH
23857: LD_INT 15
23859: PUSH
23860: LD_INT 16
23862: PUSH
23863: LD_INT 17
23865: PUSH
23866: LD_INT 18
23868: PUSH
23869: LD_INT 19
23871: PUSH
23872: LD_INT 20
23874: PUSH
23875: LD_INT 21
23877: PUSH
23878: LD_INT 22
23880: PUSH
23881: LD_INT 23
23883: PUSH
23884: LD_INT 24
23886: PUSH
23887: LD_INT 25
23889: PUSH
23890: LD_INT 26
23892: PUSH
23893: LD_INT 27
23895: PUSH
23896: LD_INT 28
23898: PUSH
23899: LD_INT 29
23901: PUSH
23902: LD_INT 30
23904: PUSH
23905: LD_INT 31
23907: PUSH
23908: LD_INT 32
23910: PUSH
23911: LD_INT 33
23913: PUSH
23914: LD_INT 34
23916: PUSH
23917: LD_INT 36
23919: PUSH
23920: EMPTY
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: PUSH
23957: LD_INT 101
23959: PUSH
23960: LD_INT 102
23962: PUSH
23963: LD_INT 103
23965: PUSH
23966: LD_INT 104
23968: PUSH
23969: LD_INT 105
23971: PUSH
23972: LD_INT 106
23974: PUSH
23975: LD_INT 107
23977: PUSH
23978: LD_INT 108
23980: PUSH
23981: LD_INT 109
23983: PUSH
23984: LD_INT 110
23986: PUSH
23987: LD_INT 111
23989: PUSH
23990: LD_INT 112
23992: PUSH
23993: LD_INT 113
23995: PUSH
23996: LD_INT 114
23998: PUSH
23999: LD_INT 116
24001: PUSH
24002: LD_INT 117
24004: PUSH
24005: LD_INT 118
24007: PUSH
24008: EMPTY
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: PUSH
24027: EMPTY
24028: LIST
24029: LIST
24030: ST_TO_ADDR
24031: GO 24806
24033: LD_INT 16
24035: DOUBLE
24036: EQUAL
24037: IFTRUE 24041
24039: GO 24177
24041: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
24042: LD_ADDR_VAR 0 2
24046: PUSH
24047: LD_INT 2
24049: PUSH
24050: LD_INT 4
24052: PUSH
24053: LD_INT 5
24055: PUSH
24056: LD_INT 7
24058: PUSH
24059: LD_INT 11
24061: PUSH
24062: LD_INT 12
24064: PUSH
24065: LD_INT 15
24067: PUSH
24068: LD_INT 16
24070: PUSH
24071: LD_INT 20
24073: PUSH
24074: LD_INT 21
24076: PUSH
24077: LD_INT 22
24079: PUSH
24080: LD_INT 23
24082: PUSH
24083: LD_INT 25
24085: PUSH
24086: LD_INT 26
24088: PUSH
24089: LD_INT 30
24091: PUSH
24092: LD_INT 31
24094: PUSH
24095: LD_INT 32
24097: PUSH
24098: LD_INT 33
24100: PUSH
24101: LD_INT 34
24103: PUSH
24104: EMPTY
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: LIST
24122: LIST
24123: LIST
24124: PUSH
24125: LD_INT 101
24127: PUSH
24128: LD_INT 102
24130: PUSH
24131: LD_INT 103
24133: PUSH
24134: LD_INT 106
24136: PUSH
24137: LD_INT 108
24139: PUSH
24140: LD_INT 112
24142: PUSH
24143: LD_INT 113
24145: PUSH
24146: LD_INT 114
24148: PUSH
24149: LD_INT 116
24151: PUSH
24152: LD_INT 117
24154: PUSH
24155: LD_INT 118
24157: PUSH
24158: EMPTY
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: PUSH
24171: EMPTY
24172: LIST
24173: LIST
24174: ST_TO_ADDR
24175: GO 24806
24177: LD_INT 17
24179: DOUBLE
24180: EQUAL
24181: IFTRUE 24185
24183: GO 24409
24185: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24186: LD_ADDR_VAR 0 2
24190: PUSH
24191: LD_INT 1
24193: PUSH
24194: LD_INT 2
24196: PUSH
24197: LD_INT 3
24199: PUSH
24200: LD_INT 4
24202: PUSH
24203: LD_INT 5
24205: PUSH
24206: LD_INT 6
24208: PUSH
24209: LD_INT 7
24211: PUSH
24212: LD_INT 8
24214: PUSH
24215: LD_INT 9
24217: PUSH
24218: LD_INT 10
24220: PUSH
24221: LD_INT 11
24223: PUSH
24224: LD_INT 12
24226: PUSH
24227: LD_INT 13
24229: PUSH
24230: LD_INT 14
24232: PUSH
24233: LD_INT 15
24235: PUSH
24236: LD_INT 16
24238: PUSH
24239: LD_INT 17
24241: PUSH
24242: LD_INT 18
24244: PUSH
24245: LD_INT 19
24247: PUSH
24248: LD_INT 20
24250: PUSH
24251: LD_INT 21
24253: PUSH
24254: LD_INT 22
24256: PUSH
24257: LD_INT 23
24259: PUSH
24260: LD_INT 24
24262: PUSH
24263: LD_INT 25
24265: PUSH
24266: LD_INT 26
24268: PUSH
24269: LD_INT 27
24271: PUSH
24272: LD_INT 28
24274: PUSH
24275: LD_INT 29
24277: PUSH
24278: LD_INT 30
24280: PUSH
24281: LD_INT 31
24283: PUSH
24284: LD_INT 32
24286: PUSH
24287: LD_INT 33
24289: PUSH
24290: LD_INT 34
24292: PUSH
24293: LD_INT 36
24295: PUSH
24296: EMPTY
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: PUSH
24333: LD_INT 101
24335: PUSH
24336: LD_INT 102
24338: PUSH
24339: LD_INT 103
24341: PUSH
24342: LD_INT 104
24344: PUSH
24345: LD_INT 105
24347: PUSH
24348: LD_INT 106
24350: PUSH
24351: LD_INT 107
24353: PUSH
24354: LD_INT 108
24356: PUSH
24357: LD_INT 109
24359: PUSH
24360: LD_INT 110
24362: PUSH
24363: LD_INT 111
24365: PUSH
24366: LD_INT 112
24368: PUSH
24369: LD_INT 113
24371: PUSH
24372: LD_INT 114
24374: PUSH
24375: LD_INT 116
24377: PUSH
24378: LD_INT 117
24380: PUSH
24381: LD_INT 118
24383: PUSH
24384: EMPTY
24385: LIST
24386: LIST
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: LIST
24392: LIST
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: LIST
24402: PUSH
24403: EMPTY
24404: LIST
24405: LIST
24406: ST_TO_ADDR
24407: GO 24806
24409: LD_INT 18
24411: DOUBLE
24412: EQUAL
24413: IFTRUE 24417
24415: GO 24565
24417: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24418: LD_ADDR_VAR 0 2
24422: PUSH
24423: LD_INT 2
24425: PUSH
24426: LD_INT 4
24428: PUSH
24429: LD_INT 5
24431: PUSH
24432: LD_INT 7
24434: PUSH
24435: LD_INT 11
24437: PUSH
24438: LD_INT 12
24440: PUSH
24441: LD_INT 15
24443: PUSH
24444: LD_INT 16
24446: PUSH
24447: LD_INT 20
24449: PUSH
24450: LD_INT 21
24452: PUSH
24453: LD_INT 22
24455: PUSH
24456: LD_INT 23
24458: PUSH
24459: LD_INT 25
24461: PUSH
24462: LD_INT 26
24464: PUSH
24465: LD_INT 30
24467: PUSH
24468: LD_INT 31
24470: PUSH
24471: LD_INT 32
24473: PUSH
24474: LD_INT 33
24476: PUSH
24477: LD_INT 34
24479: PUSH
24480: LD_INT 35
24482: PUSH
24483: LD_INT 36
24485: PUSH
24486: EMPTY
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: PUSH
24509: LD_INT 101
24511: PUSH
24512: LD_INT 102
24514: PUSH
24515: LD_INT 103
24517: PUSH
24518: LD_INT 106
24520: PUSH
24521: LD_INT 108
24523: PUSH
24524: LD_INT 112
24526: PUSH
24527: LD_INT 113
24529: PUSH
24530: LD_INT 114
24532: PUSH
24533: LD_INT 115
24535: PUSH
24536: LD_INT 116
24538: PUSH
24539: LD_INT 117
24541: PUSH
24542: LD_INT 118
24544: PUSH
24545: EMPTY
24546: LIST
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: LIST
24553: LIST
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: PUSH
24559: EMPTY
24560: LIST
24561: LIST
24562: ST_TO_ADDR
24563: GO 24806
24565: LD_INT 19
24567: DOUBLE
24568: EQUAL
24569: IFTRUE 24573
24571: GO 24805
24573: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24574: LD_ADDR_VAR 0 2
24578: PUSH
24579: LD_INT 1
24581: PUSH
24582: LD_INT 2
24584: PUSH
24585: LD_INT 3
24587: PUSH
24588: LD_INT 4
24590: PUSH
24591: LD_INT 5
24593: PUSH
24594: LD_INT 6
24596: PUSH
24597: LD_INT 7
24599: PUSH
24600: LD_INT 8
24602: PUSH
24603: LD_INT 9
24605: PUSH
24606: LD_INT 10
24608: PUSH
24609: LD_INT 11
24611: PUSH
24612: LD_INT 12
24614: PUSH
24615: LD_INT 13
24617: PUSH
24618: LD_INT 14
24620: PUSH
24621: LD_INT 15
24623: PUSH
24624: LD_INT 16
24626: PUSH
24627: LD_INT 17
24629: PUSH
24630: LD_INT 18
24632: PUSH
24633: LD_INT 19
24635: PUSH
24636: LD_INT 20
24638: PUSH
24639: LD_INT 21
24641: PUSH
24642: LD_INT 22
24644: PUSH
24645: LD_INT 23
24647: PUSH
24648: LD_INT 24
24650: PUSH
24651: LD_INT 25
24653: PUSH
24654: LD_INT 26
24656: PUSH
24657: LD_INT 27
24659: PUSH
24660: LD_INT 28
24662: PUSH
24663: LD_INT 29
24665: PUSH
24666: LD_INT 30
24668: PUSH
24669: LD_INT 31
24671: PUSH
24672: LD_INT 32
24674: PUSH
24675: LD_INT 33
24677: PUSH
24678: LD_INT 34
24680: PUSH
24681: LD_INT 35
24683: PUSH
24684: LD_INT 36
24686: PUSH
24687: EMPTY
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: PUSH
24725: LD_INT 101
24727: PUSH
24728: LD_INT 102
24730: PUSH
24731: LD_INT 103
24733: PUSH
24734: LD_INT 104
24736: PUSH
24737: LD_INT 105
24739: PUSH
24740: LD_INT 106
24742: PUSH
24743: LD_INT 107
24745: PUSH
24746: LD_INT 108
24748: PUSH
24749: LD_INT 109
24751: PUSH
24752: LD_INT 110
24754: PUSH
24755: LD_INT 111
24757: PUSH
24758: LD_INT 112
24760: PUSH
24761: LD_INT 113
24763: PUSH
24764: LD_INT 114
24766: PUSH
24767: LD_INT 115
24769: PUSH
24770: LD_INT 116
24772: PUSH
24773: LD_INT 117
24775: PUSH
24776: LD_INT 118
24778: PUSH
24779: EMPTY
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: PUSH
24799: EMPTY
24800: LIST
24801: LIST
24802: ST_TO_ADDR
24803: GO 24806
24805: POP
// end else
24806: GO 25037
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24808: LD_ADDR_VAR 0 2
24812: PUSH
24813: LD_INT 1
24815: PUSH
24816: LD_INT 2
24818: PUSH
24819: LD_INT 3
24821: PUSH
24822: LD_INT 4
24824: PUSH
24825: LD_INT 5
24827: PUSH
24828: LD_INT 6
24830: PUSH
24831: LD_INT 7
24833: PUSH
24834: LD_INT 8
24836: PUSH
24837: LD_INT 9
24839: PUSH
24840: LD_INT 10
24842: PUSH
24843: LD_INT 11
24845: PUSH
24846: LD_INT 12
24848: PUSH
24849: LD_INT 13
24851: PUSH
24852: LD_INT 14
24854: PUSH
24855: LD_INT 15
24857: PUSH
24858: LD_INT 16
24860: PUSH
24861: LD_INT 17
24863: PUSH
24864: LD_INT 18
24866: PUSH
24867: LD_INT 19
24869: PUSH
24870: LD_INT 20
24872: PUSH
24873: LD_INT 21
24875: PUSH
24876: LD_INT 22
24878: PUSH
24879: LD_INT 23
24881: PUSH
24882: LD_INT 24
24884: PUSH
24885: LD_INT 25
24887: PUSH
24888: LD_INT 26
24890: PUSH
24891: LD_INT 27
24893: PUSH
24894: LD_INT 28
24896: PUSH
24897: LD_INT 29
24899: PUSH
24900: LD_INT 30
24902: PUSH
24903: LD_INT 31
24905: PUSH
24906: LD_INT 32
24908: PUSH
24909: LD_INT 33
24911: PUSH
24912: LD_INT 34
24914: PUSH
24915: LD_INT 35
24917: PUSH
24918: LD_INT 36
24920: PUSH
24921: EMPTY
24922: LIST
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: PUSH
24959: LD_INT 101
24961: PUSH
24962: LD_INT 102
24964: PUSH
24965: LD_INT 103
24967: PUSH
24968: LD_INT 104
24970: PUSH
24971: LD_INT 105
24973: PUSH
24974: LD_INT 106
24976: PUSH
24977: LD_INT 107
24979: PUSH
24980: LD_INT 108
24982: PUSH
24983: LD_INT 109
24985: PUSH
24986: LD_INT 110
24988: PUSH
24989: LD_INT 111
24991: PUSH
24992: LD_INT 112
24994: PUSH
24995: LD_INT 113
24997: PUSH
24998: LD_INT 114
25000: PUSH
25001: LD_INT 115
25003: PUSH
25004: LD_INT 116
25006: PUSH
25007: LD_INT 117
25009: PUSH
25010: LD_INT 118
25012: PUSH
25013: EMPTY
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: PUSH
25033: EMPTY
25034: LIST
25035: LIST
25036: ST_TO_ADDR
// if result then
25037: LD_VAR 0 2
25041: IFFALSE 25827
// begin normal :=  ;
25043: LD_ADDR_VAR 0 5
25047: PUSH
25048: LD_STRING 
25050: ST_TO_ADDR
// hardcore :=  ;
25051: LD_ADDR_VAR 0 6
25055: PUSH
25056: LD_STRING 
25058: ST_TO_ADDR
// active :=  ;
25059: LD_ADDR_VAR 0 7
25063: PUSH
25064: LD_STRING 
25066: ST_TO_ADDR
// for i = 1 to normalCounter do
25067: LD_ADDR_VAR 0 8
25071: PUSH
25072: DOUBLE
25073: LD_INT 1
25075: DEC
25076: ST_TO_ADDR
25077: LD_EXP 62
25081: PUSH
25082: FOR_TO
25083: IFFALSE 25184
// begin tmp := 0 ;
25085: LD_ADDR_VAR 0 3
25089: PUSH
25090: LD_STRING 0
25092: ST_TO_ADDR
// if result [ 1 ] then
25093: LD_VAR 0 2
25097: PUSH
25098: LD_INT 1
25100: ARRAY
25101: IFFALSE 25166
// if result [ 1 ] [ 1 ] = i then
25103: LD_VAR 0 2
25107: PUSH
25108: LD_INT 1
25110: ARRAY
25111: PUSH
25112: LD_INT 1
25114: ARRAY
25115: PUSH
25116: LD_VAR 0 8
25120: EQUAL
25121: IFFALSE 25166
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25123: LD_ADDR_VAR 0 2
25127: PUSH
25128: LD_VAR 0 2
25132: PPUSH
25133: LD_INT 1
25135: PPUSH
25136: LD_VAR 0 2
25140: PUSH
25141: LD_INT 1
25143: ARRAY
25144: PPUSH
25145: LD_INT 1
25147: PPUSH
25148: CALL_OW 3
25152: PPUSH
25153: CALL_OW 1
25157: ST_TO_ADDR
// tmp := 1 ;
25158: LD_ADDR_VAR 0 3
25162: PUSH
25163: LD_STRING 1
25165: ST_TO_ADDR
// end ; normal := normal & tmp ;
25166: LD_ADDR_VAR 0 5
25170: PUSH
25171: LD_VAR 0 5
25175: PUSH
25176: LD_VAR 0 3
25180: STR
25181: ST_TO_ADDR
// end ;
25182: GO 25082
25184: POP
25185: POP
// for i = 1 to hardcoreCounter do
25186: LD_ADDR_VAR 0 8
25190: PUSH
25191: DOUBLE
25192: LD_INT 1
25194: DEC
25195: ST_TO_ADDR
25196: LD_EXP 63
25200: PUSH
25201: FOR_TO
25202: IFFALSE 25307
// begin tmp := 0 ;
25204: LD_ADDR_VAR 0 3
25208: PUSH
25209: LD_STRING 0
25211: ST_TO_ADDR
// if result [ 2 ] then
25212: LD_VAR 0 2
25216: PUSH
25217: LD_INT 2
25219: ARRAY
25220: IFFALSE 25289
// if result [ 2 ] [ 1 ] = 100 + i then
25222: LD_VAR 0 2
25226: PUSH
25227: LD_INT 2
25229: ARRAY
25230: PUSH
25231: LD_INT 1
25233: ARRAY
25234: PUSH
25235: LD_INT 100
25237: PUSH
25238: LD_VAR 0 8
25242: PLUS
25243: EQUAL
25244: IFFALSE 25289
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25246: LD_ADDR_VAR 0 2
25250: PUSH
25251: LD_VAR 0 2
25255: PPUSH
25256: LD_INT 2
25258: PPUSH
25259: LD_VAR 0 2
25263: PUSH
25264: LD_INT 2
25266: ARRAY
25267: PPUSH
25268: LD_INT 1
25270: PPUSH
25271: CALL_OW 3
25275: PPUSH
25276: CALL_OW 1
25280: ST_TO_ADDR
// tmp := 1 ;
25281: LD_ADDR_VAR 0 3
25285: PUSH
25286: LD_STRING 1
25288: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25289: LD_ADDR_VAR 0 6
25293: PUSH
25294: LD_VAR 0 6
25298: PUSH
25299: LD_VAR 0 3
25303: STR
25304: ST_TO_ADDR
// end ;
25305: GO 25201
25307: POP
25308: POP
// if isGameLoad then
25309: LD_VAR 0 1
25313: IFFALSE 25788
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25315: LD_ADDR_VAR 0 4
25319: PUSH
25320: LD_EXP 66
25324: PUSH
25325: LD_EXP 65
25329: PUSH
25330: LD_EXP 67
25334: PUSH
25335: LD_EXP 64
25339: PUSH
25340: LD_EXP 68
25344: PUSH
25345: LD_EXP 69
25349: PUSH
25350: LD_EXP 70
25354: PUSH
25355: LD_EXP 71
25359: PUSH
25360: LD_EXP 72
25364: PUSH
25365: LD_EXP 73
25369: PUSH
25370: LD_EXP 74
25374: PUSH
25375: LD_EXP 75
25379: PUSH
25380: LD_EXP 76
25384: PUSH
25385: LD_EXP 77
25389: PUSH
25390: LD_EXP 85
25394: PUSH
25395: LD_EXP 86
25399: PUSH
25400: LD_EXP 87
25404: PUSH
25405: LD_EXP 88
25409: PUSH
25410: LD_EXP 90
25414: PUSH
25415: LD_EXP 91
25419: PUSH
25420: LD_EXP 92
25424: PUSH
25425: LD_EXP 95
25429: PUSH
25430: LD_EXP 97
25434: PUSH
25435: LD_EXP 98
25439: PUSH
25440: LD_EXP 99
25444: PUSH
25445: LD_EXP 101
25449: PUSH
25450: LD_EXP 102
25454: PUSH
25455: LD_EXP 105
25459: PUSH
25460: LD_EXP 106
25464: PUSH
25465: LD_EXP 107
25469: PUSH
25470: LD_EXP 108
25474: PUSH
25475: LD_EXP 109
25479: PUSH
25480: LD_EXP 110
25484: PUSH
25485: LD_EXP 111
25489: PUSH
25490: LD_EXP 112
25494: PUSH
25495: LD_EXP 113
25499: PUSH
25500: LD_EXP 78
25504: PUSH
25505: LD_EXP 79
25509: PUSH
25510: LD_EXP 82
25514: PUSH
25515: LD_EXP 83
25519: PUSH
25520: LD_EXP 84
25524: PUSH
25525: LD_EXP 80
25529: PUSH
25530: LD_EXP 81
25534: PUSH
25535: LD_EXP 89
25539: PUSH
25540: LD_EXP 93
25544: PUSH
25545: LD_EXP 94
25549: PUSH
25550: LD_EXP 96
25554: PUSH
25555: LD_EXP 100
25559: PUSH
25560: LD_EXP 103
25564: PUSH
25565: LD_EXP 104
25569: PUSH
25570: LD_EXP 114
25574: PUSH
25575: LD_EXP 115
25579: PUSH
25580: LD_EXP 116
25584: PUSH
25585: LD_EXP 117
25589: PUSH
25590: EMPTY
25591: LIST
25592: LIST
25593: LIST
25594: LIST
25595: LIST
25596: LIST
25597: LIST
25598: LIST
25599: LIST
25600: LIST
25601: LIST
25602: LIST
25603: LIST
25604: LIST
25605: LIST
25606: LIST
25607: LIST
25608: LIST
25609: LIST
25610: LIST
25611: LIST
25612: LIST
25613: LIST
25614: LIST
25615: LIST
25616: LIST
25617: LIST
25618: LIST
25619: LIST
25620: LIST
25621: LIST
25622: LIST
25623: LIST
25624: LIST
25625: LIST
25626: LIST
25627: LIST
25628: LIST
25629: LIST
25630: LIST
25631: LIST
25632: LIST
25633: LIST
25634: LIST
25635: LIST
25636: LIST
25637: LIST
25638: LIST
25639: LIST
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: LIST
25645: ST_TO_ADDR
// tmp :=  ;
25646: LD_ADDR_VAR 0 3
25650: PUSH
25651: LD_STRING 
25653: ST_TO_ADDR
// for i = 1 to normalCounter do
25654: LD_ADDR_VAR 0 8
25658: PUSH
25659: DOUBLE
25660: LD_INT 1
25662: DEC
25663: ST_TO_ADDR
25664: LD_EXP 62
25668: PUSH
25669: FOR_TO
25670: IFFALSE 25706
// begin if flags [ i ] then
25672: LD_VAR 0 4
25676: PUSH
25677: LD_VAR 0 8
25681: ARRAY
25682: IFFALSE 25704
// tmp := tmp & i & ; ;
25684: LD_ADDR_VAR 0 3
25688: PUSH
25689: LD_VAR 0 3
25693: PUSH
25694: LD_VAR 0 8
25698: STR
25699: PUSH
25700: LD_STRING ;
25702: STR
25703: ST_TO_ADDR
// end ;
25704: GO 25669
25706: POP
25707: POP
// for i = 1 to hardcoreCounter do
25708: LD_ADDR_VAR 0 8
25712: PUSH
25713: DOUBLE
25714: LD_INT 1
25716: DEC
25717: ST_TO_ADDR
25718: LD_EXP 63
25722: PUSH
25723: FOR_TO
25724: IFFALSE 25770
// begin if flags [ normalCounter + i ] then
25726: LD_VAR 0 4
25730: PUSH
25731: LD_EXP 62
25735: PUSH
25736: LD_VAR 0 8
25740: PLUS
25741: ARRAY
25742: IFFALSE 25768
// tmp := tmp & ( 100 + i ) & ; ;
25744: LD_ADDR_VAR 0 3
25748: PUSH
25749: LD_VAR 0 3
25753: PUSH
25754: LD_INT 100
25756: PUSH
25757: LD_VAR 0 8
25761: PLUS
25762: STR
25763: PUSH
25764: LD_STRING ;
25766: STR
25767: ST_TO_ADDR
// end ;
25768: GO 25723
25770: POP
25771: POP
// if tmp then
25772: LD_VAR 0 3
25776: IFFALSE 25788
// active := tmp ;
25778: LD_ADDR_VAR 0 7
25782: PUSH
25783: LD_VAR 0 3
25787: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25788: LD_STRING getStreamItemsFromMission("
25790: PUSH
25791: LD_VAR 0 5
25795: STR
25796: PUSH
25797: LD_STRING ","
25799: STR
25800: PUSH
25801: LD_VAR 0 6
25805: STR
25806: PUSH
25807: LD_STRING ","
25809: STR
25810: PUSH
25811: LD_VAR 0 7
25815: STR
25816: PUSH
25817: LD_STRING ")
25819: STR
25820: PPUSH
25821: CALL_OW 559
// end else
25825: GO 25834
// ToLua ( getStreamItemsFromMission("","","") ) ;
25827: LD_STRING getStreamItemsFromMission("","","")
25829: PPUSH
25830: CALL_OW 559
// end ;
25834: LD_VAR 0 2
25838: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25839: LD_EXP 61
25843: PUSH
25844: LD_EXP 66
25848: AND
25849: IFFALSE 25973
25851: GO 25853
25853: DISABLE
25854: LD_INT 0
25856: PPUSH
25857: PPUSH
// begin enable ;
25858: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25859: LD_ADDR_VAR 0 2
25863: PUSH
25864: LD_INT 22
25866: PUSH
25867: LD_OWVAR 2
25871: PUSH
25872: EMPTY
25873: LIST
25874: LIST
25875: PUSH
25876: LD_INT 2
25878: PUSH
25879: LD_INT 34
25881: PUSH
25882: LD_INT 7
25884: PUSH
25885: EMPTY
25886: LIST
25887: LIST
25888: PUSH
25889: LD_INT 34
25891: PUSH
25892: LD_INT 45
25894: PUSH
25895: EMPTY
25896: LIST
25897: LIST
25898: PUSH
25899: LD_INT 34
25901: PUSH
25902: LD_INT 28
25904: PUSH
25905: EMPTY
25906: LIST
25907: LIST
25908: PUSH
25909: LD_INT 34
25911: PUSH
25912: LD_INT 47
25914: PUSH
25915: EMPTY
25916: LIST
25917: LIST
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: LIST
25923: LIST
25924: LIST
25925: PUSH
25926: EMPTY
25927: LIST
25928: LIST
25929: PPUSH
25930: CALL_OW 69
25934: ST_TO_ADDR
// if not tmp then
25935: LD_VAR 0 2
25939: NOT
25940: IFFALSE 25944
// exit ;
25942: GO 25973
// for i in tmp do
25944: LD_ADDR_VAR 0 1
25948: PUSH
25949: LD_VAR 0 2
25953: PUSH
25954: FOR_IN
25955: IFFALSE 25971
// begin SetLives ( i , 0 ) ;
25957: LD_VAR 0 1
25961: PPUSH
25962: LD_INT 0
25964: PPUSH
25965: CALL_OW 234
// end ;
25969: GO 25954
25971: POP
25972: POP
// end ;
25973: PPOPN 2
25975: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25976: LD_EXP 61
25980: PUSH
25981: LD_EXP 67
25985: AND
25986: IFFALSE 26070
25988: GO 25990
25990: DISABLE
25991: LD_INT 0
25993: PPUSH
25994: PPUSH
// begin enable ;
25995: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25996: LD_ADDR_VAR 0 2
26000: PUSH
26001: LD_INT 22
26003: PUSH
26004: LD_OWVAR 2
26008: PUSH
26009: EMPTY
26010: LIST
26011: LIST
26012: PUSH
26013: LD_INT 32
26015: PUSH
26016: LD_INT 3
26018: PUSH
26019: EMPTY
26020: LIST
26021: LIST
26022: PUSH
26023: EMPTY
26024: LIST
26025: LIST
26026: PPUSH
26027: CALL_OW 69
26031: ST_TO_ADDR
// if not tmp then
26032: LD_VAR 0 2
26036: NOT
26037: IFFALSE 26041
// exit ;
26039: GO 26070
// for i in tmp do
26041: LD_ADDR_VAR 0 1
26045: PUSH
26046: LD_VAR 0 2
26050: PUSH
26051: FOR_IN
26052: IFFALSE 26068
// begin SetLives ( i , 0 ) ;
26054: LD_VAR 0 1
26058: PPUSH
26059: LD_INT 0
26061: PPUSH
26062: CALL_OW 234
// end ;
26066: GO 26051
26068: POP
26069: POP
// end ;
26070: PPOPN 2
26072: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26073: LD_EXP 61
26077: PUSH
26078: LD_EXP 64
26082: AND
26083: IFFALSE 26176
26085: GO 26087
26087: DISABLE
26088: LD_INT 0
26090: PPUSH
// begin enable ;
26091: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26092: LD_ADDR_VAR 0 1
26096: PUSH
26097: LD_INT 22
26099: PUSH
26100: LD_OWVAR 2
26104: PUSH
26105: EMPTY
26106: LIST
26107: LIST
26108: PUSH
26109: LD_INT 2
26111: PUSH
26112: LD_INT 25
26114: PUSH
26115: LD_INT 5
26117: PUSH
26118: EMPTY
26119: LIST
26120: LIST
26121: PUSH
26122: LD_INT 25
26124: PUSH
26125: LD_INT 9
26127: PUSH
26128: EMPTY
26129: LIST
26130: LIST
26131: PUSH
26132: LD_INT 25
26134: PUSH
26135: LD_INT 8
26137: PUSH
26138: EMPTY
26139: LIST
26140: LIST
26141: PUSH
26142: EMPTY
26143: LIST
26144: LIST
26145: LIST
26146: LIST
26147: PUSH
26148: EMPTY
26149: LIST
26150: LIST
26151: PPUSH
26152: CALL_OW 69
26156: PUSH
26157: FOR_IN
26158: IFFALSE 26174
// begin SetClass ( i , 1 ) ;
26160: LD_VAR 0 1
26164: PPUSH
26165: LD_INT 1
26167: PPUSH
26168: CALL_OW 336
// end ;
26172: GO 26157
26174: POP
26175: POP
// end ;
26176: PPOPN 1
26178: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26179: LD_EXP 61
26183: PUSH
26184: LD_EXP 65
26188: AND
26189: PUSH
26190: LD_OWVAR 65
26194: PUSH
26195: LD_INT 7
26197: LESS
26198: AND
26199: IFFALSE 26213
26201: GO 26203
26203: DISABLE
// begin enable ;
26204: ENABLE
// game_speed := 7 ;
26205: LD_ADDR_OWVAR 65
26209: PUSH
26210: LD_INT 7
26212: ST_TO_ADDR
// end ;
26213: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26214: LD_EXP 61
26218: PUSH
26219: LD_EXP 68
26223: AND
26224: IFFALSE 26426
26226: GO 26228
26228: DISABLE
26229: LD_INT 0
26231: PPUSH
26232: PPUSH
26233: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26234: LD_ADDR_VAR 0 3
26238: PUSH
26239: LD_INT 81
26241: PUSH
26242: LD_OWVAR 2
26246: PUSH
26247: EMPTY
26248: LIST
26249: LIST
26250: PUSH
26251: LD_INT 21
26253: PUSH
26254: LD_INT 1
26256: PUSH
26257: EMPTY
26258: LIST
26259: LIST
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: PPUSH
26265: CALL_OW 69
26269: ST_TO_ADDR
// if not tmp then
26270: LD_VAR 0 3
26274: NOT
26275: IFFALSE 26279
// exit ;
26277: GO 26426
// if tmp > 5 then
26279: LD_VAR 0 3
26283: PUSH
26284: LD_INT 5
26286: GREATER
26287: IFFALSE 26299
// k := 5 else
26289: LD_ADDR_VAR 0 2
26293: PUSH
26294: LD_INT 5
26296: ST_TO_ADDR
26297: GO 26309
// k := tmp ;
26299: LD_ADDR_VAR 0 2
26303: PUSH
26304: LD_VAR 0 3
26308: ST_TO_ADDR
// for i := 1 to k do
26309: LD_ADDR_VAR 0 1
26313: PUSH
26314: DOUBLE
26315: LD_INT 1
26317: DEC
26318: ST_TO_ADDR
26319: LD_VAR 0 2
26323: PUSH
26324: FOR_TO
26325: IFFALSE 26424
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26327: LD_VAR 0 3
26331: PUSH
26332: LD_VAR 0 1
26336: ARRAY
26337: PPUSH
26338: LD_VAR 0 1
26342: PUSH
26343: LD_INT 4
26345: MOD
26346: PUSH
26347: LD_INT 1
26349: PLUS
26350: PPUSH
26351: CALL_OW 259
26355: PUSH
26356: LD_INT 10
26358: LESS
26359: IFFALSE 26422
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26361: LD_VAR 0 3
26365: PUSH
26366: LD_VAR 0 1
26370: ARRAY
26371: PPUSH
26372: LD_VAR 0 1
26376: PUSH
26377: LD_INT 4
26379: MOD
26380: PUSH
26381: LD_INT 1
26383: PLUS
26384: PPUSH
26385: LD_VAR 0 3
26389: PUSH
26390: LD_VAR 0 1
26394: ARRAY
26395: PPUSH
26396: LD_VAR 0 1
26400: PUSH
26401: LD_INT 4
26403: MOD
26404: PUSH
26405: LD_INT 1
26407: PLUS
26408: PPUSH
26409: CALL_OW 259
26413: PUSH
26414: LD_INT 1
26416: PLUS
26417: PPUSH
26418: CALL_OW 237
26422: GO 26324
26424: POP
26425: POP
// end ;
26426: PPOPN 3
26428: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26429: LD_EXP 61
26433: PUSH
26434: LD_EXP 69
26438: AND
26439: IFFALSE 26459
26441: GO 26443
26443: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26444: LD_INT 4
26446: PPUSH
26447: LD_OWVAR 2
26451: PPUSH
26452: LD_INT 0
26454: PPUSH
26455: CALL_OW 324
26459: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26460: LD_EXP 61
26464: PUSH
26465: LD_EXP 98
26469: AND
26470: IFFALSE 26490
26472: GO 26474
26474: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26475: LD_INT 19
26477: PPUSH
26478: LD_OWVAR 2
26482: PPUSH
26483: LD_INT 0
26485: PPUSH
26486: CALL_OW 324
26490: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26491: LD_EXP 61
26495: PUSH
26496: LD_EXP 70
26500: AND
26501: IFFALSE 26603
26503: GO 26505
26505: DISABLE
26506: LD_INT 0
26508: PPUSH
26509: PPUSH
// begin enable ;
26510: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26511: LD_ADDR_VAR 0 2
26515: PUSH
26516: LD_INT 22
26518: PUSH
26519: LD_OWVAR 2
26523: PUSH
26524: EMPTY
26525: LIST
26526: LIST
26527: PUSH
26528: LD_INT 2
26530: PUSH
26531: LD_INT 34
26533: PUSH
26534: LD_INT 11
26536: PUSH
26537: EMPTY
26538: LIST
26539: LIST
26540: PUSH
26541: LD_INT 34
26543: PUSH
26544: LD_INT 30
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: PUSH
26551: EMPTY
26552: LIST
26553: LIST
26554: LIST
26555: PUSH
26556: EMPTY
26557: LIST
26558: LIST
26559: PPUSH
26560: CALL_OW 69
26564: ST_TO_ADDR
// if not tmp then
26565: LD_VAR 0 2
26569: NOT
26570: IFFALSE 26574
// exit ;
26572: GO 26603
// for i in tmp do
26574: LD_ADDR_VAR 0 1
26578: PUSH
26579: LD_VAR 0 2
26583: PUSH
26584: FOR_IN
26585: IFFALSE 26601
// begin SetLives ( i , 0 ) ;
26587: LD_VAR 0 1
26591: PPUSH
26592: LD_INT 0
26594: PPUSH
26595: CALL_OW 234
// end ;
26599: GO 26584
26601: POP
26602: POP
// end ;
26603: PPOPN 2
26605: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26606: LD_EXP 61
26610: PUSH
26611: LD_EXP 71
26615: AND
26616: IFFALSE 26636
26618: GO 26620
26620: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26621: LD_INT 32
26623: PPUSH
26624: LD_OWVAR 2
26628: PPUSH
26629: LD_INT 0
26631: PPUSH
26632: CALL_OW 324
26636: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26637: LD_EXP 61
26641: PUSH
26642: LD_EXP 72
26646: AND
26647: IFFALSE 26828
26649: GO 26651
26651: DISABLE
26652: LD_INT 0
26654: PPUSH
26655: PPUSH
26656: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26657: LD_ADDR_VAR 0 2
26661: PUSH
26662: LD_INT 22
26664: PUSH
26665: LD_OWVAR 2
26669: PUSH
26670: EMPTY
26671: LIST
26672: LIST
26673: PUSH
26674: LD_INT 33
26676: PUSH
26677: LD_INT 3
26679: PUSH
26680: EMPTY
26681: LIST
26682: LIST
26683: PUSH
26684: EMPTY
26685: LIST
26686: LIST
26687: PPUSH
26688: CALL_OW 69
26692: ST_TO_ADDR
// if not tmp then
26693: LD_VAR 0 2
26697: NOT
26698: IFFALSE 26702
// exit ;
26700: GO 26828
// side := 0 ;
26702: LD_ADDR_VAR 0 3
26706: PUSH
26707: LD_INT 0
26709: ST_TO_ADDR
// for i := 1 to 8 do
26710: LD_ADDR_VAR 0 1
26714: PUSH
26715: DOUBLE
26716: LD_INT 1
26718: DEC
26719: ST_TO_ADDR
26720: LD_INT 8
26722: PUSH
26723: FOR_TO
26724: IFFALSE 26772
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26726: LD_OWVAR 2
26730: PUSH
26731: LD_VAR 0 1
26735: NONEQUAL
26736: PUSH
26737: LD_OWVAR 2
26741: PPUSH
26742: LD_VAR 0 1
26746: PPUSH
26747: CALL_OW 81
26751: PUSH
26752: LD_INT 2
26754: EQUAL
26755: AND
26756: IFFALSE 26770
// begin side := i ;
26758: LD_ADDR_VAR 0 3
26762: PUSH
26763: LD_VAR 0 1
26767: ST_TO_ADDR
// break ;
26768: GO 26772
// end ;
26770: GO 26723
26772: POP
26773: POP
// if not side then
26774: LD_VAR 0 3
26778: NOT
26779: IFFALSE 26783
// exit ;
26781: GO 26828
// for i := 1 to tmp do
26783: LD_ADDR_VAR 0 1
26787: PUSH
26788: DOUBLE
26789: LD_INT 1
26791: DEC
26792: ST_TO_ADDR
26793: LD_VAR 0 2
26797: PUSH
26798: FOR_TO
26799: IFFALSE 26826
// if Prob ( 60 ) then
26801: LD_INT 60
26803: PPUSH
26804: CALL_OW 13
26808: IFFALSE 26824
// SetSide ( i , side ) ;
26810: LD_VAR 0 1
26814: PPUSH
26815: LD_VAR 0 3
26819: PPUSH
26820: CALL_OW 235
26824: GO 26798
26826: POP
26827: POP
// end ;
26828: PPOPN 3
26830: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26831: LD_EXP 61
26835: PUSH
26836: LD_EXP 74
26840: AND
26841: IFFALSE 26960
26843: GO 26845
26845: DISABLE
26846: LD_INT 0
26848: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26849: LD_ADDR_VAR 0 1
26853: PUSH
26854: LD_INT 22
26856: PUSH
26857: LD_OWVAR 2
26861: PUSH
26862: EMPTY
26863: LIST
26864: LIST
26865: PUSH
26866: LD_INT 21
26868: PUSH
26869: LD_INT 1
26871: PUSH
26872: EMPTY
26873: LIST
26874: LIST
26875: PUSH
26876: LD_INT 3
26878: PUSH
26879: LD_INT 23
26881: PUSH
26882: LD_INT 0
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: PUSH
26889: EMPTY
26890: LIST
26891: LIST
26892: PUSH
26893: EMPTY
26894: LIST
26895: LIST
26896: LIST
26897: PPUSH
26898: CALL_OW 69
26902: PUSH
26903: FOR_IN
26904: IFFALSE 26958
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26906: LD_VAR 0 1
26910: PPUSH
26911: CALL_OW 257
26915: PUSH
26916: LD_INT 1
26918: PUSH
26919: LD_INT 2
26921: PUSH
26922: LD_INT 3
26924: PUSH
26925: LD_INT 4
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: IN
26934: IFFALSE 26956
// SetClass ( un , rand ( 1 , 4 ) ) ;
26936: LD_VAR 0 1
26940: PPUSH
26941: LD_INT 1
26943: PPUSH
26944: LD_INT 4
26946: PPUSH
26947: CALL_OW 12
26951: PPUSH
26952: CALL_OW 336
26956: GO 26903
26958: POP
26959: POP
// end ;
26960: PPOPN 1
26962: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26963: LD_EXP 61
26967: PUSH
26968: LD_EXP 73
26972: AND
26973: IFFALSE 27052
26975: GO 26977
26977: DISABLE
26978: LD_INT 0
26980: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26981: LD_ADDR_VAR 0 1
26985: PUSH
26986: LD_INT 22
26988: PUSH
26989: LD_OWVAR 2
26993: PUSH
26994: EMPTY
26995: LIST
26996: LIST
26997: PUSH
26998: LD_INT 21
27000: PUSH
27001: LD_INT 3
27003: PUSH
27004: EMPTY
27005: LIST
27006: LIST
27007: PUSH
27008: EMPTY
27009: LIST
27010: LIST
27011: PPUSH
27012: CALL_OW 69
27016: ST_TO_ADDR
// if not tmp then
27017: LD_VAR 0 1
27021: NOT
27022: IFFALSE 27026
// exit ;
27024: GO 27052
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
27026: LD_VAR 0 1
27030: PUSH
27031: LD_INT 1
27033: PPUSH
27034: LD_VAR 0 1
27038: PPUSH
27039: CALL_OW 12
27043: ARRAY
27044: PPUSH
27045: LD_INT 100
27047: PPUSH
27048: CALL_OW 234
// end ;
27052: PPOPN 1
27054: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27055: LD_EXP 61
27059: PUSH
27060: LD_EXP 75
27064: AND
27065: IFFALSE 27163
27067: GO 27069
27069: DISABLE
27070: LD_INT 0
27072: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27073: LD_ADDR_VAR 0 1
27077: PUSH
27078: LD_INT 22
27080: PUSH
27081: LD_OWVAR 2
27085: PUSH
27086: EMPTY
27087: LIST
27088: LIST
27089: PUSH
27090: LD_INT 21
27092: PUSH
27093: LD_INT 1
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: PUSH
27100: EMPTY
27101: LIST
27102: LIST
27103: PPUSH
27104: CALL_OW 69
27108: ST_TO_ADDR
// if not tmp then
27109: LD_VAR 0 1
27113: NOT
27114: IFFALSE 27118
// exit ;
27116: GO 27163
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27118: LD_VAR 0 1
27122: PUSH
27123: LD_INT 1
27125: PPUSH
27126: LD_VAR 0 1
27130: PPUSH
27131: CALL_OW 12
27135: ARRAY
27136: PPUSH
27137: LD_INT 1
27139: PPUSH
27140: LD_INT 4
27142: PPUSH
27143: CALL_OW 12
27147: PPUSH
27148: LD_INT 3000
27150: PPUSH
27151: LD_INT 9000
27153: PPUSH
27154: CALL_OW 12
27158: PPUSH
27159: CALL_OW 492
// end ;
27163: PPOPN 1
27165: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27166: LD_EXP 61
27170: PUSH
27171: LD_EXP 76
27175: AND
27176: IFFALSE 27196
27178: GO 27180
27180: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27181: LD_INT 1
27183: PPUSH
27184: LD_OWVAR 2
27188: PPUSH
27189: LD_INT 0
27191: PPUSH
27192: CALL_OW 324
27196: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27197: LD_EXP 61
27201: PUSH
27202: LD_EXP 77
27206: AND
27207: IFFALSE 27290
27209: GO 27211
27211: DISABLE
27212: LD_INT 0
27214: PPUSH
27215: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27216: LD_ADDR_VAR 0 2
27220: PUSH
27221: LD_INT 22
27223: PUSH
27224: LD_OWVAR 2
27228: PUSH
27229: EMPTY
27230: LIST
27231: LIST
27232: PUSH
27233: LD_INT 21
27235: PUSH
27236: LD_INT 3
27238: PUSH
27239: EMPTY
27240: LIST
27241: LIST
27242: PUSH
27243: EMPTY
27244: LIST
27245: LIST
27246: PPUSH
27247: CALL_OW 69
27251: ST_TO_ADDR
// if not tmp then
27252: LD_VAR 0 2
27256: NOT
27257: IFFALSE 27261
// exit ;
27259: GO 27290
// for i in tmp do
27261: LD_ADDR_VAR 0 1
27265: PUSH
27266: LD_VAR 0 2
27270: PUSH
27271: FOR_IN
27272: IFFALSE 27288
// SetBLevel ( i , 10 ) ;
27274: LD_VAR 0 1
27278: PPUSH
27279: LD_INT 10
27281: PPUSH
27282: CALL_OW 241
27286: GO 27271
27288: POP
27289: POP
// end ;
27290: PPOPN 2
27292: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27293: LD_EXP 61
27297: PUSH
27298: LD_EXP 78
27302: AND
27303: IFFALSE 27414
27305: GO 27307
27307: DISABLE
27308: LD_INT 0
27310: PPUSH
27311: PPUSH
27312: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27313: LD_ADDR_VAR 0 3
27317: PUSH
27318: LD_INT 22
27320: PUSH
27321: LD_OWVAR 2
27325: PUSH
27326: EMPTY
27327: LIST
27328: LIST
27329: PUSH
27330: LD_INT 25
27332: PUSH
27333: LD_INT 1
27335: PUSH
27336: EMPTY
27337: LIST
27338: LIST
27339: PUSH
27340: EMPTY
27341: LIST
27342: LIST
27343: PPUSH
27344: CALL_OW 69
27348: ST_TO_ADDR
// if not tmp then
27349: LD_VAR 0 3
27353: NOT
27354: IFFALSE 27358
// exit ;
27356: GO 27414
// un := tmp [ rand ( 1 , tmp ) ] ;
27358: LD_ADDR_VAR 0 2
27362: PUSH
27363: LD_VAR 0 3
27367: PUSH
27368: LD_INT 1
27370: PPUSH
27371: LD_VAR 0 3
27375: PPUSH
27376: CALL_OW 12
27380: ARRAY
27381: ST_TO_ADDR
// if Crawls ( un ) then
27382: LD_VAR 0 2
27386: PPUSH
27387: CALL_OW 318
27391: IFFALSE 27402
// ComWalk ( un ) ;
27393: LD_VAR 0 2
27397: PPUSH
27398: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27402: LD_VAR 0 2
27406: PPUSH
27407: LD_INT 5
27409: PPUSH
27410: CALL_OW 336
// end ;
27414: PPOPN 3
27416: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27417: LD_EXP 61
27421: PUSH
27422: LD_EXP 79
27426: AND
27427: PUSH
27428: LD_OWVAR 67
27432: PUSH
27433: LD_INT 4
27435: LESS
27436: AND
27437: IFFALSE 27456
27439: GO 27441
27441: DISABLE
// begin Difficulty := Difficulty + 1 ;
27442: LD_ADDR_OWVAR 67
27446: PUSH
27447: LD_OWVAR 67
27451: PUSH
27452: LD_INT 1
27454: PLUS
27455: ST_TO_ADDR
// end ;
27456: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27457: LD_EXP 61
27461: PUSH
27462: LD_EXP 80
27466: AND
27467: IFFALSE 27570
27469: GO 27471
27471: DISABLE
27472: LD_INT 0
27474: PPUSH
// begin for i := 1 to 5 do
27475: LD_ADDR_VAR 0 1
27479: PUSH
27480: DOUBLE
27481: LD_INT 1
27483: DEC
27484: ST_TO_ADDR
27485: LD_INT 5
27487: PUSH
27488: FOR_TO
27489: IFFALSE 27568
// begin uc_nation := nation_nature ;
27491: LD_ADDR_OWVAR 21
27495: PUSH
27496: LD_INT 0
27498: ST_TO_ADDR
// uc_side := 0 ;
27499: LD_ADDR_OWVAR 20
27503: PUSH
27504: LD_INT 0
27506: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27507: LD_ADDR_OWVAR 29
27511: PUSH
27512: LD_INT 12
27514: PUSH
27515: LD_INT 12
27517: PUSH
27518: EMPTY
27519: LIST
27520: LIST
27521: ST_TO_ADDR
// hc_agressivity := 20 ;
27522: LD_ADDR_OWVAR 35
27526: PUSH
27527: LD_INT 20
27529: ST_TO_ADDR
// hc_class := class_tiger ;
27530: LD_ADDR_OWVAR 28
27534: PUSH
27535: LD_INT 14
27537: ST_TO_ADDR
// hc_gallery :=  ;
27538: LD_ADDR_OWVAR 33
27542: PUSH
27543: LD_STRING 
27545: ST_TO_ADDR
// hc_name :=  ;
27546: LD_ADDR_OWVAR 26
27550: PUSH
27551: LD_STRING 
27553: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27554: CALL_OW 44
27558: PPUSH
27559: LD_INT 0
27561: PPUSH
27562: CALL_OW 51
// end ;
27566: GO 27488
27568: POP
27569: POP
// end ;
27570: PPOPN 1
27572: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27573: LD_EXP 61
27577: PUSH
27578: LD_EXP 81
27582: AND
27583: IFFALSE 27592
27585: GO 27587
27587: DISABLE
// StreamSibBomb ;
27588: CALL 27593 0 0
27592: END
// export function StreamSibBomb ; var i , x , y ; begin
27593: LD_INT 0
27595: PPUSH
27596: PPUSH
27597: PPUSH
27598: PPUSH
// result := false ;
27599: LD_ADDR_VAR 0 1
27603: PUSH
27604: LD_INT 0
27606: ST_TO_ADDR
// for i := 1 to 16 do
27607: LD_ADDR_VAR 0 2
27611: PUSH
27612: DOUBLE
27613: LD_INT 1
27615: DEC
27616: ST_TO_ADDR
27617: LD_INT 16
27619: PUSH
27620: FOR_TO
27621: IFFALSE 27820
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27623: LD_ADDR_VAR 0 3
27627: PUSH
27628: LD_INT 10
27630: PUSH
27631: LD_INT 20
27633: PUSH
27634: LD_INT 30
27636: PUSH
27637: LD_INT 40
27639: PUSH
27640: LD_INT 50
27642: PUSH
27643: LD_INT 60
27645: PUSH
27646: LD_INT 70
27648: PUSH
27649: LD_INT 80
27651: PUSH
27652: LD_INT 90
27654: PUSH
27655: LD_INT 100
27657: PUSH
27658: LD_INT 110
27660: PUSH
27661: LD_INT 120
27663: PUSH
27664: LD_INT 130
27666: PUSH
27667: LD_INT 140
27669: PUSH
27670: LD_INT 150
27672: PUSH
27673: EMPTY
27674: LIST
27675: LIST
27676: LIST
27677: LIST
27678: LIST
27679: LIST
27680: LIST
27681: LIST
27682: LIST
27683: LIST
27684: LIST
27685: LIST
27686: LIST
27687: LIST
27688: LIST
27689: PUSH
27690: LD_INT 1
27692: PPUSH
27693: LD_INT 15
27695: PPUSH
27696: CALL_OW 12
27700: ARRAY
27701: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27702: LD_ADDR_VAR 0 4
27706: PUSH
27707: LD_INT 10
27709: PUSH
27710: LD_INT 20
27712: PUSH
27713: LD_INT 30
27715: PUSH
27716: LD_INT 40
27718: PUSH
27719: LD_INT 50
27721: PUSH
27722: LD_INT 60
27724: PUSH
27725: LD_INT 70
27727: PUSH
27728: LD_INT 80
27730: PUSH
27731: LD_INT 90
27733: PUSH
27734: LD_INT 100
27736: PUSH
27737: LD_INT 110
27739: PUSH
27740: LD_INT 120
27742: PUSH
27743: LD_INT 130
27745: PUSH
27746: LD_INT 140
27748: PUSH
27749: LD_INT 150
27751: PUSH
27752: EMPTY
27753: LIST
27754: LIST
27755: LIST
27756: LIST
27757: LIST
27758: LIST
27759: LIST
27760: LIST
27761: LIST
27762: LIST
27763: LIST
27764: LIST
27765: LIST
27766: LIST
27767: LIST
27768: PUSH
27769: LD_INT 1
27771: PPUSH
27772: LD_INT 15
27774: PPUSH
27775: CALL_OW 12
27779: ARRAY
27780: ST_TO_ADDR
// if ValidHex ( x , y ) then
27781: LD_VAR 0 3
27785: PPUSH
27786: LD_VAR 0 4
27790: PPUSH
27791: CALL_OW 488
27795: IFFALSE 27818
// begin result := [ x , y ] ;
27797: LD_ADDR_VAR 0 1
27801: PUSH
27802: LD_VAR 0 3
27806: PUSH
27807: LD_VAR 0 4
27811: PUSH
27812: EMPTY
27813: LIST
27814: LIST
27815: ST_TO_ADDR
// break ;
27816: GO 27820
// end ; end ;
27818: GO 27620
27820: POP
27821: POP
// if result then
27822: LD_VAR 0 1
27826: IFFALSE 27886
// begin ToLua ( playSibBomb() ) ;
27828: LD_STRING playSibBomb()
27830: PPUSH
27831: CALL_OW 559
// wait ( 0 0$14 ) ;
27835: LD_INT 490
27837: PPUSH
27838: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27842: LD_VAR 0 1
27846: PUSH
27847: LD_INT 1
27849: ARRAY
27850: PPUSH
27851: LD_VAR 0 1
27855: PUSH
27856: LD_INT 2
27858: ARRAY
27859: PPUSH
27860: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27864: LD_VAR 0 1
27868: PUSH
27869: LD_INT 1
27871: ARRAY
27872: PPUSH
27873: LD_VAR 0 1
27877: PUSH
27878: LD_INT 2
27880: ARRAY
27881: PPUSH
27882: CALL_OW 429
// end ; end ;
27886: LD_VAR 0 1
27890: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27891: LD_EXP 61
27895: PUSH
27896: LD_EXP 83
27900: AND
27901: IFFALSE 27913
27903: GO 27905
27905: DISABLE
// YouLost (  ) ;
27906: LD_STRING 
27908: PPUSH
27909: CALL_OW 104
27913: END
// every 0 0$1 trigger StreamModeActive and sFog do
27914: LD_EXP 61
27918: PUSH
27919: LD_EXP 82
27923: AND
27924: IFFALSE 27938
27926: GO 27928
27928: DISABLE
// FogOff ( your_side ) ;
27929: LD_OWVAR 2
27933: PPUSH
27934: CALL_OW 344
27938: END
// every 0 0$1 trigger StreamModeActive and sSun do
27939: LD_EXP 61
27943: PUSH
27944: LD_EXP 84
27948: AND
27949: IFFALSE 27977
27951: GO 27953
27953: DISABLE
// begin solar_recharge_percent := 0 ;
27954: LD_ADDR_OWVAR 79
27958: PUSH
27959: LD_INT 0
27961: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27962: LD_INT 10500
27964: PPUSH
27965: CALL_OW 67
// solar_recharge_percent := 100 ;
27969: LD_ADDR_OWVAR 79
27973: PUSH
27974: LD_INT 100
27976: ST_TO_ADDR
// end ;
27977: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27978: LD_EXP 61
27982: PUSH
27983: LD_EXP 85
27987: AND
27988: IFFALSE 28227
27990: GO 27992
27992: DISABLE
27993: LD_INT 0
27995: PPUSH
27996: PPUSH
27997: PPUSH
// begin tmp := [ ] ;
27998: LD_ADDR_VAR 0 3
28002: PUSH
28003: EMPTY
28004: ST_TO_ADDR
// for i := 1 to 6 do
28005: LD_ADDR_VAR 0 1
28009: PUSH
28010: DOUBLE
28011: LD_INT 1
28013: DEC
28014: ST_TO_ADDR
28015: LD_INT 6
28017: PUSH
28018: FOR_TO
28019: IFFALSE 28124
// begin uc_nation := nation_nature ;
28021: LD_ADDR_OWVAR 21
28025: PUSH
28026: LD_INT 0
28028: ST_TO_ADDR
// uc_side := 0 ;
28029: LD_ADDR_OWVAR 20
28033: PUSH
28034: LD_INT 0
28036: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28037: LD_ADDR_OWVAR 29
28041: PUSH
28042: LD_INT 12
28044: PUSH
28045: LD_INT 12
28047: PUSH
28048: EMPTY
28049: LIST
28050: LIST
28051: ST_TO_ADDR
// hc_agressivity := 20 ;
28052: LD_ADDR_OWVAR 35
28056: PUSH
28057: LD_INT 20
28059: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28060: LD_ADDR_OWVAR 28
28064: PUSH
28065: LD_INT 17
28067: ST_TO_ADDR
// hc_gallery :=  ;
28068: LD_ADDR_OWVAR 33
28072: PUSH
28073: LD_STRING 
28075: ST_TO_ADDR
// hc_name :=  ;
28076: LD_ADDR_OWVAR 26
28080: PUSH
28081: LD_STRING 
28083: ST_TO_ADDR
// un := CreateHuman ;
28084: LD_ADDR_VAR 0 2
28088: PUSH
28089: CALL_OW 44
28093: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28094: LD_VAR 0 2
28098: PPUSH
28099: LD_INT 1
28101: PPUSH
28102: CALL_OW 51
// tmp := tmp ^ un ;
28106: LD_ADDR_VAR 0 3
28110: PUSH
28111: LD_VAR 0 3
28115: PUSH
28116: LD_VAR 0 2
28120: ADD
28121: ST_TO_ADDR
// end ;
28122: GO 28018
28124: POP
28125: POP
// repeat wait ( 0 0$1 ) ;
28126: LD_INT 35
28128: PPUSH
28129: CALL_OW 67
// for un in tmp do
28133: LD_ADDR_VAR 0 2
28137: PUSH
28138: LD_VAR 0 3
28142: PUSH
28143: FOR_IN
28144: IFFALSE 28218
// begin if IsDead ( un ) then
28146: LD_VAR 0 2
28150: PPUSH
28151: CALL_OW 301
28155: IFFALSE 28175
// begin tmp := tmp diff un ;
28157: LD_ADDR_VAR 0 3
28161: PUSH
28162: LD_VAR 0 3
28166: PUSH
28167: LD_VAR 0 2
28171: DIFF
28172: ST_TO_ADDR
// continue ;
28173: GO 28143
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28175: LD_VAR 0 2
28179: PPUSH
28180: LD_INT 3
28182: PUSH
28183: LD_INT 22
28185: PUSH
28186: LD_INT 0
28188: PUSH
28189: EMPTY
28190: LIST
28191: LIST
28192: PUSH
28193: EMPTY
28194: LIST
28195: LIST
28196: PPUSH
28197: CALL_OW 69
28201: PPUSH
28202: LD_VAR 0 2
28206: PPUSH
28207: CALL_OW 74
28211: PPUSH
28212: CALL_OW 115
// end ;
28216: GO 28143
28218: POP
28219: POP
// until not tmp ;
28220: LD_VAR 0 3
28224: NOT
28225: IFFALSE 28126
// end ;
28227: PPOPN 3
28229: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28230: LD_EXP 61
28234: PUSH
28235: LD_EXP 86
28239: AND
28240: IFFALSE 28294
28242: GO 28244
28244: DISABLE
// begin ToLua ( displayTroll(); ) ;
28245: LD_STRING displayTroll();
28247: PPUSH
28248: CALL_OW 559
// wait ( 3 3$00 ) ;
28252: LD_INT 6300
28254: PPUSH
28255: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28259: LD_STRING hideTroll();
28261: PPUSH
28262: CALL_OW 559
// wait ( 1 1$00 ) ;
28266: LD_INT 2100
28268: PPUSH
28269: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28273: LD_STRING displayTroll();
28275: PPUSH
28276: CALL_OW 559
// wait ( 1 1$00 ) ;
28280: LD_INT 2100
28282: PPUSH
28283: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28287: LD_STRING hideTroll();
28289: PPUSH
28290: CALL_OW 559
// end ;
28294: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28295: LD_EXP 61
28299: PUSH
28300: LD_EXP 87
28304: AND
28305: IFFALSE 28368
28307: GO 28309
28309: DISABLE
28310: LD_INT 0
28312: PPUSH
// begin p := 0 ;
28313: LD_ADDR_VAR 0 1
28317: PUSH
28318: LD_INT 0
28320: ST_TO_ADDR
// repeat game_speed := 1 ;
28321: LD_ADDR_OWVAR 65
28325: PUSH
28326: LD_INT 1
28328: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28329: LD_INT 35
28331: PPUSH
28332: CALL_OW 67
// p := p + 1 ;
28336: LD_ADDR_VAR 0 1
28340: PUSH
28341: LD_VAR 0 1
28345: PUSH
28346: LD_INT 1
28348: PLUS
28349: ST_TO_ADDR
// until p >= 60 ;
28350: LD_VAR 0 1
28354: PUSH
28355: LD_INT 60
28357: GREATEREQUAL
28358: IFFALSE 28321
// game_speed := 4 ;
28360: LD_ADDR_OWVAR 65
28364: PUSH
28365: LD_INT 4
28367: ST_TO_ADDR
// end ;
28368: PPOPN 1
28370: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28371: LD_EXP 61
28375: PUSH
28376: LD_EXP 88
28380: AND
28381: IFFALSE 28527
28383: GO 28385
28385: DISABLE
28386: LD_INT 0
28388: PPUSH
28389: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28390: LD_ADDR_VAR 0 1
28394: PUSH
28395: LD_INT 22
28397: PUSH
28398: LD_OWVAR 2
28402: PUSH
28403: EMPTY
28404: LIST
28405: LIST
28406: PUSH
28407: LD_INT 2
28409: PUSH
28410: LD_INT 30
28412: PUSH
28413: LD_INT 0
28415: PUSH
28416: EMPTY
28417: LIST
28418: LIST
28419: PUSH
28420: LD_INT 30
28422: PUSH
28423: LD_INT 1
28425: PUSH
28426: EMPTY
28427: LIST
28428: LIST
28429: PUSH
28430: EMPTY
28431: LIST
28432: LIST
28433: LIST
28434: PUSH
28435: EMPTY
28436: LIST
28437: LIST
28438: PPUSH
28439: CALL_OW 69
28443: ST_TO_ADDR
// if not depot then
28444: LD_VAR 0 1
28448: NOT
28449: IFFALSE 28453
// exit ;
28451: GO 28527
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28453: LD_ADDR_VAR 0 2
28457: PUSH
28458: LD_VAR 0 1
28462: PUSH
28463: LD_INT 1
28465: PPUSH
28466: LD_VAR 0 1
28470: PPUSH
28471: CALL_OW 12
28475: ARRAY
28476: PPUSH
28477: CALL_OW 274
28481: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28482: LD_VAR 0 2
28486: PPUSH
28487: LD_INT 1
28489: PPUSH
28490: LD_INT 0
28492: PPUSH
28493: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28497: LD_VAR 0 2
28501: PPUSH
28502: LD_INT 2
28504: PPUSH
28505: LD_INT 0
28507: PPUSH
28508: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28512: LD_VAR 0 2
28516: PPUSH
28517: LD_INT 3
28519: PPUSH
28520: LD_INT 0
28522: PPUSH
28523: CALL_OW 277
// end ;
28527: PPOPN 2
28529: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28530: LD_EXP 61
28534: PUSH
28535: LD_EXP 89
28539: AND
28540: IFFALSE 28637
28542: GO 28544
28544: DISABLE
28545: LD_INT 0
28547: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28548: LD_ADDR_VAR 0 1
28552: PUSH
28553: LD_INT 22
28555: PUSH
28556: LD_OWVAR 2
28560: PUSH
28561: EMPTY
28562: LIST
28563: LIST
28564: PUSH
28565: LD_INT 21
28567: PUSH
28568: LD_INT 1
28570: PUSH
28571: EMPTY
28572: LIST
28573: LIST
28574: PUSH
28575: LD_INT 3
28577: PUSH
28578: LD_INT 23
28580: PUSH
28581: LD_INT 0
28583: PUSH
28584: EMPTY
28585: LIST
28586: LIST
28587: PUSH
28588: EMPTY
28589: LIST
28590: LIST
28591: PUSH
28592: EMPTY
28593: LIST
28594: LIST
28595: LIST
28596: PPUSH
28597: CALL_OW 69
28601: ST_TO_ADDR
// if not tmp then
28602: LD_VAR 0 1
28606: NOT
28607: IFFALSE 28611
// exit ;
28609: GO 28637
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28611: LD_VAR 0 1
28615: PUSH
28616: LD_INT 1
28618: PPUSH
28619: LD_VAR 0 1
28623: PPUSH
28624: CALL_OW 12
28628: ARRAY
28629: PPUSH
28630: LD_INT 200
28632: PPUSH
28633: CALL_OW 234
// end ;
28637: PPOPN 1
28639: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28640: LD_EXP 61
28644: PUSH
28645: LD_EXP 90
28649: AND
28650: IFFALSE 28729
28652: GO 28654
28654: DISABLE
28655: LD_INT 0
28657: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28658: LD_ADDR_VAR 0 1
28662: PUSH
28663: LD_INT 22
28665: PUSH
28666: LD_OWVAR 2
28670: PUSH
28671: EMPTY
28672: LIST
28673: LIST
28674: PUSH
28675: LD_INT 21
28677: PUSH
28678: LD_INT 2
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: PUSH
28685: EMPTY
28686: LIST
28687: LIST
28688: PPUSH
28689: CALL_OW 69
28693: ST_TO_ADDR
// if not tmp then
28694: LD_VAR 0 1
28698: NOT
28699: IFFALSE 28703
// exit ;
28701: GO 28729
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28703: LD_VAR 0 1
28707: PUSH
28708: LD_INT 1
28710: PPUSH
28711: LD_VAR 0 1
28715: PPUSH
28716: CALL_OW 12
28720: ARRAY
28721: PPUSH
28722: LD_INT 60
28724: PPUSH
28725: CALL_OW 234
// end ;
28729: PPOPN 1
28731: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28732: LD_EXP 61
28736: PUSH
28737: LD_EXP 91
28741: AND
28742: IFFALSE 28841
28744: GO 28746
28746: DISABLE
28747: LD_INT 0
28749: PPUSH
28750: PPUSH
// begin enable ;
28751: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28752: LD_ADDR_VAR 0 1
28756: PUSH
28757: LD_INT 22
28759: PUSH
28760: LD_OWVAR 2
28764: PUSH
28765: EMPTY
28766: LIST
28767: LIST
28768: PUSH
28769: LD_INT 61
28771: PUSH
28772: EMPTY
28773: LIST
28774: PUSH
28775: LD_INT 33
28777: PUSH
28778: LD_INT 2
28780: PUSH
28781: EMPTY
28782: LIST
28783: LIST
28784: PUSH
28785: EMPTY
28786: LIST
28787: LIST
28788: LIST
28789: PPUSH
28790: CALL_OW 69
28794: ST_TO_ADDR
// if not tmp then
28795: LD_VAR 0 1
28799: NOT
28800: IFFALSE 28804
// exit ;
28802: GO 28841
// for i in tmp do
28804: LD_ADDR_VAR 0 2
28808: PUSH
28809: LD_VAR 0 1
28813: PUSH
28814: FOR_IN
28815: IFFALSE 28839
// if IsControledBy ( i ) then
28817: LD_VAR 0 2
28821: PPUSH
28822: CALL_OW 312
28826: IFFALSE 28837
// ComUnlink ( i ) ;
28828: LD_VAR 0 2
28832: PPUSH
28833: CALL_OW 136
28837: GO 28814
28839: POP
28840: POP
// end ;
28841: PPOPN 2
28843: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28844: LD_EXP 61
28848: PUSH
28849: LD_EXP 92
28853: AND
28854: IFFALSE 28994
28856: GO 28858
28858: DISABLE
28859: LD_INT 0
28861: PPUSH
28862: PPUSH
// begin ToLua ( displayPowell(); ) ;
28863: LD_STRING displayPowell();
28865: PPUSH
28866: CALL_OW 559
// uc_side := 0 ;
28870: LD_ADDR_OWVAR 20
28874: PUSH
28875: LD_INT 0
28877: ST_TO_ADDR
// uc_nation := 2 ;
28878: LD_ADDR_OWVAR 21
28882: PUSH
28883: LD_INT 2
28885: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28886: LD_ADDR_OWVAR 37
28890: PUSH
28891: LD_INT 14
28893: ST_TO_ADDR
// vc_engine := engine_siberite ;
28894: LD_ADDR_OWVAR 39
28898: PUSH
28899: LD_INT 3
28901: ST_TO_ADDR
// vc_control := control_apeman ;
28902: LD_ADDR_OWVAR 38
28906: PUSH
28907: LD_INT 5
28909: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28910: LD_ADDR_OWVAR 40
28914: PUSH
28915: LD_INT 29
28917: ST_TO_ADDR
// un := CreateVehicle ;
28918: LD_ADDR_VAR 0 2
28922: PUSH
28923: CALL_OW 45
28927: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28928: LD_VAR 0 2
28932: PPUSH
28933: LD_INT 1
28935: PPUSH
28936: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28940: LD_INT 35
28942: PPUSH
28943: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28947: LD_VAR 0 2
28951: PPUSH
28952: LD_INT 22
28954: PUSH
28955: LD_OWVAR 2
28959: PUSH
28960: EMPTY
28961: LIST
28962: LIST
28963: PPUSH
28964: CALL_OW 69
28968: PPUSH
28969: LD_VAR 0 2
28973: PPUSH
28974: CALL_OW 74
28978: PPUSH
28979: CALL_OW 115
// until IsDead ( un ) ;
28983: LD_VAR 0 2
28987: PPUSH
28988: CALL_OW 301
28992: IFFALSE 28940
// end ;
28994: PPOPN 2
28996: END
// every 0 0$1 trigger StreamModeActive and sStu do
28997: LD_EXP 61
29001: PUSH
29002: LD_EXP 100
29006: AND
29007: IFFALSE 29023
29009: GO 29011
29011: DISABLE
// begin ToLua ( displayStucuk(); ) ;
29012: LD_STRING displayStucuk();
29014: PPUSH
29015: CALL_OW 559
// ResetFog ;
29019: CALL_OW 335
// end ;
29023: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29024: LD_EXP 61
29028: PUSH
29029: LD_EXP 93
29033: AND
29034: IFFALSE 29175
29036: GO 29038
29038: DISABLE
29039: LD_INT 0
29041: PPUSH
29042: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29043: LD_ADDR_VAR 0 2
29047: PUSH
29048: LD_INT 22
29050: PUSH
29051: LD_OWVAR 2
29055: PUSH
29056: EMPTY
29057: LIST
29058: LIST
29059: PUSH
29060: LD_INT 21
29062: PUSH
29063: LD_INT 1
29065: PUSH
29066: EMPTY
29067: LIST
29068: LIST
29069: PUSH
29070: EMPTY
29071: LIST
29072: LIST
29073: PPUSH
29074: CALL_OW 69
29078: ST_TO_ADDR
// if not tmp then
29079: LD_VAR 0 2
29083: NOT
29084: IFFALSE 29088
// exit ;
29086: GO 29175
// un := tmp [ rand ( 1 , tmp ) ] ;
29088: LD_ADDR_VAR 0 1
29092: PUSH
29093: LD_VAR 0 2
29097: PUSH
29098: LD_INT 1
29100: PPUSH
29101: LD_VAR 0 2
29105: PPUSH
29106: CALL_OW 12
29110: ARRAY
29111: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29112: LD_VAR 0 1
29116: PPUSH
29117: LD_INT 0
29119: PPUSH
29120: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29124: LD_VAR 0 1
29128: PPUSH
29129: LD_OWVAR 3
29133: PUSH
29134: LD_VAR 0 1
29138: DIFF
29139: PPUSH
29140: LD_VAR 0 1
29144: PPUSH
29145: CALL_OW 74
29149: PPUSH
29150: CALL_OW 115
// wait ( 0 0$20 ) ;
29154: LD_INT 700
29156: PPUSH
29157: CALL_OW 67
// SetSide ( un , your_side ) ;
29161: LD_VAR 0 1
29165: PPUSH
29166: LD_OWVAR 2
29170: PPUSH
29171: CALL_OW 235
// end ;
29175: PPOPN 2
29177: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29178: LD_EXP 61
29182: PUSH
29183: LD_EXP 94
29187: AND
29188: IFFALSE 29294
29190: GO 29192
29192: DISABLE
29193: LD_INT 0
29195: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29196: LD_ADDR_VAR 0 1
29200: PUSH
29201: LD_INT 22
29203: PUSH
29204: LD_OWVAR 2
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: PUSH
29213: LD_INT 2
29215: PUSH
29216: LD_INT 30
29218: PUSH
29219: LD_INT 0
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: PUSH
29226: LD_INT 30
29228: PUSH
29229: LD_INT 1
29231: PUSH
29232: EMPTY
29233: LIST
29234: LIST
29235: PUSH
29236: EMPTY
29237: LIST
29238: LIST
29239: LIST
29240: PUSH
29241: EMPTY
29242: LIST
29243: LIST
29244: PPUSH
29245: CALL_OW 69
29249: ST_TO_ADDR
// if not depot then
29250: LD_VAR 0 1
29254: NOT
29255: IFFALSE 29259
// exit ;
29257: GO 29294
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29259: LD_VAR 0 1
29263: PUSH
29264: LD_INT 1
29266: ARRAY
29267: PPUSH
29268: CALL_OW 250
29272: PPUSH
29273: LD_VAR 0 1
29277: PUSH
29278: LD_INT 1
29280: ARRAY
29281: PPUSH
29282: CALL_OW 251
29286: PPUSH
29287: LD_INT 70
29289: PPUSH
29290: CALL_OW 495
// end ;
29294: PPOPN 1
29296: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29297: LD_EXP 61
29301: PUSH
29302: LD_EXP 95
29306: AND
29307: IFFALSE 29518
29309: GO 29311
29311: DISABLE
29312: LD_INT 0
29314: PPUSH
29315: PPUSH
29316: PPUSH
29317: PPUSH
29318: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29319: LD_ADDR_VAR 0 5
29323: PUSH
29324: LD_INT 22
29326: PUSH
29327: LD_OWVAR 2
29331: PUSH
29332: EMPTY
29333: LIST
29334: LIST
29335: PUSH
29336: LD_INT 21
29338: PUSH
29339: LD_INT 1
29341: PUSH
29342: EMPTY
29343: LIST
29344: LIST
29345: PUSH
29346: EMPTY
29347: LIST
29348: LIST
29349: PPUSH
29350: CALL_OW 69
29354: ST_TO_ADDR
// if not tmp then
29355: LD_VAR 0 5
29359: NOT
29360: IFFALSE 29364
// exit ;
29362: GO 29518
// for i in tmp do
29364: LD_ADDR_VAR 0 1
29368: PUSH
29369: LD_VAR 0 5
29373: PUSH
29374: FOR_IN
29375: IFFALSE 29516
// begin d := rand ( 0 , 5 ) ;
29377: LD_ADDR_VAR 0 4
29381: PUSH
29382: LD_INT 0
29384: PPUSH
29385: LD_INT 5
29387: PPUSH
29388: CALL_OW 12
29392: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29393: LD_ADDR_VAR 0 2
29397: PUSH
29398: LD_VAR 0 1
29402: PPUSH
29403: CALL_OW 250
29407: PPUSH
29408: LD_VAR 0 4
29412: PPUSH
29413: LD_INT 3
29415: PPUSH
29416: LD_INT 12
29418: PPUSH
29419: CALL_OW 12
29423: PPUSH
29424: CALL_OW 272
29428: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29429: LD_ADDR_VAR 0 3
29433: PUSH
29434: LD_VAR 0 1
29438: PPUSH
29439: CALL_OW 251
29443: PPUSH
29444: LD_VAR 0 4
29448: PPUSH
29449: LD_INT 3
29451: PPUSH
29452: LD_INT 12
29454: PPUSH
29455: CALL_OW 12
29459: PPUSH
29460: CALL_OW 273
29464: ST_TO_ADDR
// if ValidHex ( x , y ) then
29465: LD_VAR 0 2
29469: PPUSH
29470: LD_VAR 0 3
29474: PPUSH
29475: CALL_OW 488
29479: IFFALSE 29514
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29481: LD_VAR 0 1
29485: PPUSH
29486: LD_VAR 0 2
29490: PPUSH
29491: LD_VAR 0 3
29495: PPUSH
29496: LD_INT 3
29498: PPUSH
29499: LD_INT 6
29501: PPUSH
29502: CALL_OW 12
29506: PPUSH
29507: LD_INT 1
29509: PPUSH
29510: CALL_OW 483
// end ;
29514: GO 29374
29516: POP
29517: POP
// end ;
29518: PPOPN 5
29520: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29521: LD_EXP 61
29525: PUSH
29526: LD_EXP 96
29530: AND
29531: IFFALSE 29625
29533: GO 29535
29535: DISABLE
29536: LD_INT 0
29538: PPUSH
29539: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29540: LD_ADDR_VAR 0 2
29544: PUSH
29545: LD_INT 22
29547: PUSH
29548: LD_OWVAR 2
29552: PUSH
29553: EMPTY
29554: LIST
29555: LIST
29556: PUSH
29557: LD_INT 32
29559: PUSH
29560: LD_INT 1
29562: PUSH
29563: EMPTY
29564: LIST
29565: LIST
29566: PUSH
29567: LD_INT 21
29569: PUSH
29570: LD_INT 2
29572: PUSH
29573: EMPTY
29574: LIST
29575: LIST
29576: PUSH
29577: EMPTY
29578: LIST
29579: LIST
29580: LIST
29581: PPUSH
29582: CALL_OW 69
29586: ST_TO_ADDR
// if not tmp then
29587: LD_VAR 0 2
29591: NOT
29592: IFFALSE 29596
// exit ;
29594: GO 29625
// for i in tmp do
29596: LD_ADDR_VAR 0 1
29600: PUSH
29601: LD_VAR 0 2
29605: PUSH
29606: FOR_IN
29607: IFFALSE 29623
// SetFuel ( i , 0 ) ;
29609: LD_VAR 0 1
29613: PPUSH
29614: LD_INT 0
29616: PPUSH
29617: CALL_OW 240
29621: GO 29606
29623: POP
29624: POP
// end ;
29625: PPOPN 2
29627: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29628: LD_EXP 61
29632: PUSH
29633: LD_EXP 97
29637: AND
29638: IFFALSE 29704
29640: GO 29642
29642: DISABLE
29643: LD_INT 0
29645: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29646: LD_ADDR_VAR 0 1
29650: PUSH
29651: LD_INT 22
29653: PUSH
29654: LD_OWVAR 2
29658: PUSH
29659: EMPTY
29660: LIST
29661: LIST
29662: PUSH
29663: LD_INT 30
29665: PUSH
29666: LD_INT 29
29668: PUSH
29669: EMPTY
29670: LIST
29671: LIST
29672: PUSH
29673: EMPTY
29674: LIST
29675: LIST
29676: PPUSH
29677: CALL_OW 69
29681: ST_TO_ADDR
// if not tmp then
29682: LD_VAR 0 1
29686: NOT
29687: IFFALSE 29691
// exit ;
29689: GO 29704
// DestroyUnit ( tmp [ 1 ] ) ;
29691: LD_VAR 0 1
29695: PUSH
29696: LD_INT 1
29698: ARRAY
29699: PPUSH
29700: CALL_OW 65
// end ;
29704: PPOPN 1
29706: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29707: LD_EXP 61
29711: PUSH
29712: LD_EXP 99
29716: AND
29717: IFFALSE 29846
29719: GO 29721
29721: DISABLE
29722: LD_INT 0
29724: PPUSH
// begin uc_side := 0 ;
29725: LD_ADDR_OWVAR 20
29729: PUSH
29730: LD_INT 0
29732: ST_TO_ADDR
// uc_nation := nation_arabian ;
29733: LD_ADDR_OWVAR 21
29737: PUSH
29738: LD_INT 2
29740: ST_TO_ADDR
// hc_gallery :=  ;
29741: LD_ADDR_OWVAR 33
29745: PUSH
29746: LD_STRING 
29748: ST_TO_ADDR
// hc_name :=  ;
29749: LD_ADDR_OWVAR 26
29753: PUSH
29754: LD_STRING 
29756: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29757: LD_INT 1
29759: PPUSH
29760: LD_INT 11
29762: PPUSH
29763: LD_INT 10
29765: PPUSH
29766: CALL_OW 380
// un := CreateHuman ;
29770: LD_ADDR_VAR 0 1
29774: PUSH
29775: CALL_OW 44
29779: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29780: LD_VAR 0 1
29784: PPUSH
29785: LD_INT 1
29787: PPUSH
29788: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29792: LD_INT 35
29794: PPUSH
29795: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29799: LD_VAR 0 1
29803: PPUSH
29804: LD_INT 22
29806: PUSH
29807: LD_OWVAR 2
29811: PUSH
29812: EMPTY
29813: LIST
29814: LIST
29815: PPUSH
29816: CALL_OW 69
29820: PPUSH
29821: LD_VAR 0 1
29825: PPUSH
29826: CALL_OW 74
29830: PPUSH
29831: CALL_OW 115
// until IsDead ( un ) ;
29835: LD_VAR 0 1
29839: PPUSH
29840: CALL_OW 301
29844: IFFALSE 29792
// end ;
29846: PPOPN 1
29848: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29849: LD_EXP 61
29853: PUSH
29854: LD_EXP 101
29858: AND
29859: IFFALSE 29871
29861: GO 29863
29863: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29864: LD_STRING earthquake(getX(game), 0, 32)
29866: PPUSH
29867: CALL_OW 559
29871: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29872: LD_EXP 61
29876: PUSH
29877: LD_EXP 102
29881: AND
29882: IFFALSE 29973
29884: GO 29886
29886: DISABLE
29887: LD_INT 0
29889: PPUSH
// begin enable ;
29890: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29891: LD_ADDR_VAR 0 1
29895: PUSH
29896: LD_INT 22
29898: PUSH
29899: LD_OWVAR 2
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: PUSH
29908: LD_INT 21
29910: PUSH
29911: LD_INT 2
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: PUSH
29918: LD_INT 33
29920: PUSH
29921: LD_INT 3
29923: PUSH
29924: EMPTY
29925: LIST
29926: LIST
29927: PUSH
29928: EMPTY
29929: LIST
29930: LIST
29931: LIST
29932: PPUSH
29933: CALL_OW 69
29937: ST_TO_ADDR
// if not tmp then
29938: LD_VAR 0 1
29942: NOT
29943: IFFALSE 29947
// exit ;
29945: GO 29973
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29947: LD_VAR 0 1
29951: PUSH
29952: LD_INT 1
29954: PPUSH
29955: LD_VAR 0 1
29959: PPUSH
29960: CALL_OW 12
29964: ARRAY
29965: PPUSH
29966: LD_INT 1
29968: PPUSH
29969: CALL_OW 234
// end ;
29973: PPOPN 1
29975: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29976: LD_EXP 61
29980: PUSH
29981: LD_EXP 103
29985: AND
29986: IFFALSE 30127
29988: GO 29990
29990: DISABLE
29991: LD_INT 0
29993: PPUSH
29994: PPUSH
29995: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29996: LD_ADDR_VAR 0 3
30000: PUSH
30001: LD_INT 22
30003: PUSH
30004: LD_OWVAR 2
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: PUSH
30013: LD_INT 25
30015: PUSH
30016: LD_INT 1
30018: PUSH
30019: EMPTY
30020: LIST
30021: LIST
30022: PUSH
30023: EMPTY
30024: LIST
30025: LIST
30026: PPUSH
30027: CALL_OW 69
30031: ST_TO_ADDR
// if not tmp then
30032: LD_VAR 0 3
30036: NOT
30037: IFFALSE 30041
// exit ;
30039: GO 30127
// un := tmp [ rand ( 1 , tmp ) ] ;
30041: LD_ADDR_VAR 0 2
30045: PUSH
30046: LD_VAR 0 3
30050: PUSH
30051: LD_INT 1
30053: PPUSH
30054: LD_VAR 0 3
30058: PPUSH
30059: CALL_OW 12
30063: ARRAY
30064: ST_TO_ADDR
// if Crawls ( un ) then
30065: LD_VAR 0 2
30069: PPUSH
30070: CALL_OW 318
30074: IFFALSE 30085
// ComWalk ( un ) ;
30076: LD_VAR 0 2
30080: PPUSH
30081: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30085: LD_VAR 0 2
30089: PPUSH
30090: LD_INT 9
30092: PPUSH
30093: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30097: LD_INT 28
30099: PPUSH
30100: LD_OWVAR 2
30104: PPUSH
30105: LD_INT 2
30107: PPUSH
30108: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30112: LD_INT 29
30114: PPUSH
30115: LD_OWVAR 2
30119: PPUSH
30120: LD_INT 2
30122: PPUSH
30123: CALL_OW 322
// end ;
30127: PPOPN 3
30129: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30130: LD_EXP 61
30134: PUSH
30135: LD_EXP 104
30139: AND
30140: IFFALSE 30251
30142: GO 30144
30144: DISABLE
30145: LD_INT 0
30147: PPUSH
30148: PPUSH
30149: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30150: LD_ADDR_VAR 0 3
30154: PUSH
30155: LD_INT 22
30157: PUSH
30158: LD_OWVAR 2
30162: PUSH
30163: EMPTY
30164: LIST
30165: LIST
30166: PUSH
30167: LD_INT 25
30169: PUSH
30170: LD_INT 1
30172: PUSH
30173: EMPTY
30174: LIST
30175: LIST
30176: PUSH
30177: EMPTY
30178: LIST
30179: LIST
30180: PPUSH
30181: CALL_OW 69
30185: ST_TO_ADDR
// if not tmp then
30186: LD_VAR 0 3
30190: NOT
30191: IFFALSE 30195
// exit ;
30193: GO 30251
// un := tmp [ rand ( 1 , tmp ) ] ;
30195: LD_ADDR_VAR 0 2
30199: PUSH
30200: LD_VAR 0 3
30204: PUSH
30205: LD_INT 1
30207: PPUSH
30208: LD_VAR 0 3
30212: PPUSH
30213: CALL_OW 12
30217: ARRAY
30218: ST_TO_ADDR
// if Crawls ( un ) then
30219: LD_VAR 0 2
30223: PPUSH
30224: CALL_OW 318
30228: IFFALSE 30239
// ComWalk ( un ) ;
30230: LD_VAR 0 2
30234: PPUSH
30235: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30239: LD_VAR 0 2
30243: PPUSH
30244: LD_INT 8
30246: PPUSH
30247: CALL_OW 336
// end ;
30251: PPOPN 3
30253: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30254: LD_EXP 61
30258: PUSH
30259: LD_EXP 105
30263: AND
30264: IFFALSE 30408
30266: GO 30268
30268: DISABLE
30269: LD_INT 0
30271: PPUSH
30272: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30273: LD_ADDR_VAR 0 2
30277: PUSH
30278: LD_INT 22
30280: PUSH
30281: LD_OWVAR 2
30285: PUSH
30286: EMPTY
30287: LIST
30288: LIST
30289: PUSH
30290: LD_INT 21
30292: PUSH
30293: LD_INT 2
30295: PUSH
30296: EMPTY
30297: LIST
30298: LIST
30299: PUSH
30300: LD_INT 2
30302: PUSH
30303: LD_INT 34
30305: PUSH
30306: LD_INT 12
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: PUSH
30313: LD_INT 34
30315: PUSH
30316: LD_INT 51
30318: PUSH
30319: EMPTY
30320: LIST
30321: LIST
30322: PUSH
30323: LD_INT 34
30325: PUSH
30326: LD_INT 32
30328: PUSH
30329: EMPTY
30330: LIST
30331: LIST
30332: PUSH
30333: EMPTY
30334: LIST
30335: LIST
30336: LIST
30337: LIST
30338: PUSH
30339: EMPTY
30340: LIST
30341: LIST
30342: LIST
30343: PPUSH
30344: CALL_OW 69
30348: ST_TO_ADDR
// if not tmp then
30349: LD_VAR 0 2
30353: NOT
30354: IFFALSE 30358
// exit ;
30356: GO 30408
// for i in tmp do
30358: LD_ADDR_VAR 0 1
30362: PUSH
30363: LD_VAR 0 2
30367: PUSH
30368: FOR_IN
30369: IFFALSE 30406
// if GetCargo ( i , mat_artifact ) = 0 then
30371: LD_VAR 0 1
30375: PPUSH
30376: LD_INT 4
30378: PPUSH
30379: CALL_OW 289
30383: PUSH
30384: LD_INT 0
30386: EQUAL
30387: IFFALSE 30404
// SetCargo ( i , mat_siberit , 100 ) ;
30389: LD_VAR 0 1
30393: PPUSH
30394: LD_INT 3
30396: PPUSH
30397: LD_INT 100
30399: PPUSH
30400: CALL_OW 290
30404: GO 30368
30406: POP
30407: POP
// end ;
30408: PPOPN 2
30410: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30411: LD_EXP 61
30415: PUSH
30416: LD_EXP 106
30420: AND
30421: IFFALSE 30604
30423: GO 30425
30425: DISABLE
30426: LD_INT 0
30428: PPUSH
30429: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30430: LD_ADDR_VAR 0 2
30434: PUSH
30435: LD_INT 22
30437: PUSH
30438: LD_OWVAR 2
30442: PUSH
30443: EMPTY
30444: LIST
30445: LIST
30446: PPUSH
30447: CALL_OW 69
30451: ST_TO_ADDR
// if not tmp then
30452: LD_VAR 0 2
30456: NOT
30457: IFFALSE 30461
// exit ;
30459: GO 30604
// for i := 1 to 2 do
30461: LD_ADDR_VAR 0 1
30465: PUSH
30466: DOUBLE
30467: LD_INT 1
30469: DEC
30470: ST_TO_ADDR
30471: LD_INT 2
30473: PUSH
30474: FOR_TO
30475: IFFALSE 30602
// begin uc_side := your_side ;
30477: LD_ADDR_OWVAR 20
30481: PUSH
30482: LD_OWVAR 2
30486: ST_TO_ADDR
// uc_nation := nation_american ;
30487: LD_ADDR_OWVAR 21
30491: PUSH
30492: LD_INT 1
30494: ST_TO_ADDR
// vc_chassis := us_morphling ;
30495: LD_ADDR_OWVAR 37
30499: PUSH
30500: LD_INT 5
30502: ST_TO_ADDR
// vc_engine := engine_siberite ;
30503: LD_ADDR_OWVAR 39
30507: PUSH
30508: LD_INT 3
30510: ST_TO_ADDR
// vc_control := control_computer ;
30511: LD_ADDR_OWVAR 38
30515: PUSH
30516: LD_INT 3
30518: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30519: LD_ADDR_OWVAR 40
30523: PUSH
30524: LD_INT 10
30526: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30527: LD_VAR 0 2
30531: PUSH
30532: LD_INT 1
30534: ARRAY
30535: PPUSH
30536: CALL_OW 310
30540: NOT
30541: IFFALSE 30588
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30543: CALL_OW 45
30547: PPUSH
30548: LD_VAR 0 2
30552: PUSH
30553: LD_INT 1
30555: ARRAY
30556: PPUSH
30557: CALL_OW 250
30561: PPUSH
30562: LD_VAR 0 2
30566: PUSH
30567: LD_INT 1
30569: ARRAY
30570: PPUSH
30571: CALL_OW 251
30575: PPUSH
30576: LD_INT 12
30578: PPUSH
30579: LD_INT 1
30581: PPUSH
30582: CALL_OW 50
30586: GO 30600
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30588: CALL_OW 45
30592: PPUSH
30593: LD_INT 1
30595: PPUSH
30596: CALL_OW 51
// end ;
30600: GO 30474
30602: POP
30603: POP
// end ;
30604: PPOPN 2
30606: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30607: LD_EXP 61
30611: PUSH
30612: LD_EXP 107
30616: AND
30617: IFFALSE 30839
30619: GO 30621
30621: DISABLE
30622: LD_INT 0
30624: PPUSH
30625: PPUSH
30626: PPUSH
30627: PPUSH
30628: PPUSH
30629: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30630: LD_ADDR_VAR 0 6
30634: PUSH
30635: LD_INT 22
30637: PUSH
30638: LD_OWVAR 2
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: PUSH
30647: LD_INT 21
30649: PUSH
30650: LD_INT 1
30652: PUSH
30653: EMPTY
30654: LIST
30655: LIST
30656: PUSH
30657: LD_INT 3
30659: PUSH
30660: LD_INT 23
30662: PUSH
30663: LD_INT 0
30665: PUSH
30666: EMPTY
30667: LIST
30668: LIST
30669: PUSH
30670: EMPTY
30671: LIST
30672: LIST
30673: PUSH
30674: EMPTY
30675: LIST
30676: LIST
30677: LIST
30678: PPUSH
30679: CALL_OW 69
30683: ST_TO_ADDR
// if not tmp then
30684: LD_VAR 0 6
30688: NOT
30689: IFFALSE 30693
// exit ;
30691: GO 30839
// s1 := rand ( 1 , 4 ) ;
30693: LD_ADDR_VAR 0 2
30697: PUSH
30698: LD_INT 1
30700: PPUSH
30701: LD_INT 4
30703: PPUSH
30704: CALL_OW 12
30708: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30709: LD_ADDR_VAR 0 4
30713: PUSH
30714: LD_VAR 0 6
30718: PUSH
30719: LD_INT 1
30721: ARRAY
30722: PPUSH
30723: LD_VAR 0 2
30727: PPUSH
30728: CALL_OW 259
30732: ST_TO_ADDR
// if s1 = 1 then
30733: LD_VAR 0 2
30737: PUSH
30738: LD_INT 1
30740: EQUAL
30741: IFFALSE 30761
// s2 := rand ( 2 , 4 ) else
30743: LD_ADDR_VAR 0 3
30747: PUSH
30748: LD_INT 2
30750: PPUSH
30751: LD_INT 4
30753: PPUSH
30754: CALL_OW 12
30758: ST_TO_ADDR
30759: GO 30769
// s2 := 1 ;
30761: LD_ADDR_VAR 0 3
30765: PUSH
30766: LD_INT 1
30768: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30769: LD_ADDR_VAR 0 5
30773: PUSH
30774: LD_VAR 0 6
30778: PUSH
30779: LD_INT 1
30781: ARRAY
30782: PPUSH
30783: LD_VAR 0 3
30787: PPUSH
30788: CALL_OW 259
30792: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30793: LD_VAR 0 6
30797: PUSH
30798: LD_INT 1
30800: ARRAY
30801: PPUSH
30802: LD_VAR 0 2
30806: PPUSH
30807: LD_VAR 0 5
30811: PPUSH
30812: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30816: LD_VAR 0 6
30820: PUSH
30821: LD_INT 1
30823: ARRAY
30824: PPUSH
30825: LD_VAR 0 3
30829: PPUSH
30830: LD_VAR 0 4
30834: PPUSH
30835: CALL_OW 237
// end ;
30839: PPOPN 6
30841: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30842: LD_EXP 61
30846: PUSH
30847: LD_EXP 108
30851: AND
30852: IFFALSE 30931
30854: GO 30856
30856: DISABLE
30857: LD_INT 0
30859: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30860: LD_ADDR_VAR 0 1
30864: PUSH
30865: LD_INT 22
30867: PUSH
30868: LD_OWVAR 2
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: PUSH
30877: LD_INT 30
30879: PUSH
30880: LD_INT 3
30882: PUSH
30883: EMPTY
30884: LIST
30885: LIST
30886: PUSH
30887: EMPTY
30888: LIST
30889: LIST
30890: PPUSH
30891: CALL_OW 69
30895: ST_TO_ADDR
// if not tmp then
30896: LD_VAR 0 1
30900: NOT
30901: IFFALSE 30905
// exit ;
30903: GO 30931
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30905: LD_VAR 0 1
30909: PUSH
30910: LD_INT 1
30912: PPUSH
30913: LD_VAR 0 1
30917: PPUSH
30918: CALL_OW 12
30922: ARRAY
30923: PPUSH
30924: LD_INT 1
30926: PPUSH
30927: CALL_OW 234
// end ;
30931: PPOPN 1
30933: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30934: LD_EXP 61
30938: PUSH
30939: LD_EXP 109
30943: AND
30944: IFFALSE 31056
30946: GO 30948
30948: DISABLE
30949: LD_INT 0
30951: PPUSH
30952: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30953: LD_ADDR_VAR 0 2
30957: PUSH
30958: LD_INT 22
30960: PUSH
30961: LD_OWVAR 2
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: PUSH
30970: LD_INT 2
30972: PUSH
30973: LD_INT 30
30975: PUSH
30976: LD_INT 27
30978: PUSH
30979: EMPTY
30980: LIST
30981: LIST
30982: PUSH
30983: LD_INT 30
30985: PUSH
30986: LD_INT 26
30988: PUSH
30989: EMPTY
30990: LIST
30991: LIST
30992: PUSH
30993: LD_INT 30
30995: PUSH
30996: LD_INT 28
30998: PUSH
30999: EMPTY
31000: LIST
31001: LIST
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: LIST
31007: LIST
31008: PUSH
31009: EMPTY
31010: LIST
31011: LIST
31012: PPUSH
31013: CALL_OW 69
31017: ST_TO_ADDR
// if not tmp then
31018: LD_VAR 0 2
31022: NOT
31023: IFFALSE 31027
// exit ;
31025: GO 31056
// for i in tmp do
31027: LD_ADDR_VAR 0 1
31031: PUSH
31032: LD_VAR 0 2
31036: PUSH
31037: FOR_IN
31038: IFFALSE 31054
// SetLives ( i , 1 ) ;
31040: LD_VAR 0 1
31044: PPUSH
31045: LD_INT 1
31047: PPUSH
31048: CALL_OW 234
31052: GO 31037
31054: POP
31055: POP
// end ;
31056: PPOPN 2
31058: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31059: LD_EXP 61
31063: PUSH
31064: LD_EXP 110
31068: AND
31069: IFFALSE 31356
31071: GO 31073
31073: DISABLE
31074: LD_INT 0
31076: PPUSH
31077: PPUSH
31078: PPUSH
// begin i := rand ( 1 , 7 ) ;
31079: LD_ADDR_VAR 0 1
31083: PUSH
31084: LD_INT 1
31086: PPUSH
31087: LD_INT 7
31089: PPUSH
31090: CALL_OW 12
31094: ST_TO_ADDR
// case i of 1 :
31095: LD_VAR 0 1
31099: PUSH
31100: LD_INT 1
31102: DOUBLE
31103: EQUAL
31104: IFTRUE 31108
31106: GO 31118
31108: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31109: LD_STRING earthquake(getX(game), 0, 32)
31111: PPUSH
31112: CALL_OW 559
31116: GO 31356
31118: LD_INT 2
31120: DOUBLE
31121: EQUAL
31122: IFTRUE 31126
31124: GO 31140
31126: POP
// begin ToLua ( displayStucuk(); ) ;
31127: LD_STRING displayStucuk();
31129: PPUSH
31130: CALL_OW 559
// ResetFog ;
31134: CALL_OW 335
// end ; 3 :
31138: GO 31356
31140: LD_INT 3
31142: DOUBLE
31143: EQUAL
31144: IFTRUE 31148
31146: GO 31252
31148: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31149: LD_ADDR_VAR 0 2
31153: PUSH
31154: LD_INT 22
31156: PUSH
31157: LD_OWVAR 2
31161: PUSH
31162: EMPTY
31163: LIST
31164: LIST
31165: PUSH
31166: LD_INT 25
31168: PUSH
31169: LD_INT 1
31171: PUSH
31172: EMPTY
31173: LIST
31174: LIST
31175: PUSH
31176: EMPTY
31177: LIST
31178: LIST
31179: PPUSH
31180: CALL_OW 69
31184: ST_TO_ADDR
// if not tmp then
31185: LD_VAR 0 2
31189: NOT
31190: IFFALSE 31194
// exit ;
31192: GO 31356
// un := tmp [ rand ( 1 , tmp ) ] ;
31194: LD_ADDR_VAR 0 3
31198: PUSH
31199: LD_VAR 0 2
31203: PUSH
31204: LD_INT 1
31206: PPUSH
31207: LD_VAR 0 2
31211: PPUSH
31212: CALL_OW 12
31216: ARRAY
31217: ST_TO_ADDR
// if Crawls ( un ) then
31218: LD_VAR 0 3
31222: PPUSH
31223: CALL_OW 318
31227: IFFALSE 31238
// ComWalk ( un ) ;
31229: LD_VAR 0 3
31233: PPUSH
31234: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31238: LD_VAR 0 3
31242: PPUSH
31243: LD_INT 8
31245: PPUSH
31246: CALL_OW 336
// end ; 4 :
31250: GO 31356
31252: LD_INT 4
31254: DOUBLE
31255: EQUAL
31256: IFTRUE 31260
31258: GO 31334
31260: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31261: LD_ADDR_VAR 0 2
31265: PUSH
31266: LD_INT 22
31268: PUSH
31269: LD_OWVAR 2
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: PUSH
31278: LD_INT 30
31280: PUSH
31281: LD_INT 29
31283: PUSH
31284: EMPTY
31285: LIST
31286: LIST
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: PPUSH
31292: CALL_OW 69
31296: ST_TO_ADDR
// if not tmp then
31297: LD_VAR 0 2
31301: NOT
31302: IFFALSE 31306
// exit ;
31304: GO 31356
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31306: LD_VAR 0 2
31310: PUSH
31311: LD_INT 1
31313: ARRAY
31314: PPUSH
31315: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31319: LD_VAR 0 2
31323: PUSH
31324: LD_INT 1
31326: ARRAY
31327: PPUSH
31328: CALL_OW 65
// end ; 5 .. 7 :
31332: GO 31356
31334: LD_INT 5
31336: DOUBLE
31337: GREATEREQUAL
31338: IFFALSE 31346
31340: LD_INT 7
31342: DOUBLE
31343: LESSEQUAL
31344: IFTRUE 31348
31346: GO 31355
31348: POP
// StreamSibBomb ; end ;
31349: CALL 27593 0 0
31353: GO 31356
31355: POP
// end ;
31356: PPOPN 3
31358: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31359: LD_EXP 61
31363: PUSH
31364: LD_EXP 111
31368: AND
31369: IFFALSE 31525
31371: GO 31373
31373: DISABLE
31374: LD_INT 0
31376: PPUSH
31377: PPUSH
31378: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31379: LD_ADDR_VAR 0 2
31383: PUSH
31384: LD_INT 81
31386: PUSH
31387: LD_OWVAR 2
31391: PUSH
31392: EMPTY
31393: LIST
31394: LIST
31395: PUSH
31396: LD_INT 2
31398: PUSH
31399: LD_INT 21
31401: PUSH
31402: LD_INT 1
31404: PUSH
31405: EMPTY
31406: LIST
31407: LIST
31408: PUSH
31409: LD_INT 21
31411: PUSH
31412: LD_INT 2
31414: PUSH
31415: EMPTY
31416: LIST
31417: LIST
31418: PUSH
31419: EMPTY
31420: LIST
31421: LIST
31422: LIST
31423: PUSH
31424: EMPTY
31425: LIST
31426: LIST
31427: PPUSH
31428: CALL_OW 69
31432: ST_TO_ADDR
// if not tmp then
31433: LD_VAR 0 2
31437: NOT
31438: IFFALSE 31442
// exit ;
31440: GO 31525
// p := 0 ;
31442: LD_ADDR_VAR 0 3
31446: PUSH
31447: LD_INT 0
31449: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31450: LD_INT 35
31452: PPUSH
31453: CALL_OW 67
// p := p + 1 ;
31457: LD_ADDR_VAR 0 3
31461: PUSH
31462: LD_VAR 0 3
31466: PUSH
31467: LD_INT 1
31469: PLUS
31470: ST_TO_ADDR
// for i in tmp do
31471: LD_ADDR_VAR 0 1
31475: PUSH
31476: LD_VAR 0 2
31480: PUSH
31481: FOR_IN
31482: IFFALSE 31513
// if GetLives ( i ) < 1000 then
31484: LD_VAR 0 1
31488: PPUSH
31489: CALL_OW 256
31493: PUSH
31494: LD_INT 1000
31496: LESS
31497: IFFALSE 31511
// SetLives ( i , 1000 ) ;
31499: LD_VAR 0 1
31503: PPUSH
31504: LD_INT 1000
31506: PPUSH
31507: CALL_OW 234
31511: GO 31481
31513: POP
31514: POP
// until p > 20 ;
31515: LD_VAR 0 3
31519: PUSH
31520: LD_INT 20
31522: GREATER
31523: IFFALSE 31450
// end ;
31525: PPOPN 3
31527: END
// every 0 0$1 trigger StreamModeActive and sTime do
31528: LD_EXP 61
31532: PUSH
31533: LD_EXP 112
31537: AND
31538: IFFALSE 31573
31540: GO 31542
31542: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31543: LD_INT 28
31545: PPUSH
31546: LD_OWVAR 2
31550: PPUSH
31551: LD_INT 2
31553: PPUSH
31554: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31558: LD_INT 30
31560: PPUSH
31561: LD_OWVAR 2
31565: PPUSH
31566: LD_INT 2
31568: PPUSH
31569: CALL_OW 322
// end ;
31573: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31574: LD_EXP 61
31578: PUSH
31579: LD_EXP 113
31583: AND
31584: IFFALSE 31705
31586: GO 31588
31588: DISABLE
31589: LD_INT 0
31591: PPUSH
31592: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31593: LD_ADDR_VAR 0 2
31597: PUSH
31598: LD_INT 22
31600: PUSH
31601: LD_OWVAR 2
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: PUSH
31610: LD_INT 21
31612: PUSH
31613: LD_INT 1
31615: PUSH
31616: EMPTY
31617: LIST
31618: LIST
31619: PUSH
31620: LD_INT 3
31622: PUSH
31623: LD_INT 23
31625: PUSH
31626: LD_INT 0
31628: PUSH
31629: EMPTY
31630: LIST
31631: LIST
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: PUSH
31637: EMPTY
31638: LIST
31639: LIST
31640: LIST
31641: PPUSH
31642: CALL_OW 69
31646: ST_TO_ADDR
// if not tmp then
31647: LD_VAR 0 2
31651: NOT
31652: IFFALSE 31656
// exit ;
31654: GO 31705
// for i in tmp do
31656: LD_ADDR_VAR 0 1
31660: PUSH
31661: LD_VAR 0 2
31665: PUSH
31666: FOR_IN
31667: IFFALSE 31703
// begin if Crawls ( i ) then
31669: LD_VAR 0 1
31673: PPUSH
31674: CALL_OW 318
31678: IFFALSE 31689
// ComWalk ( i ) ;
31680: LD_VAR 0 1
31684: PPUSH
31685: CALL_OW 138
// SetClass ( i , 2 ) ;
31689: LD_VAR 0 1
31693: PPUSH
31694: LD_INT 2
31696: PPUSH
31697: CALL_OW 336
// end ;
31701: GO 31666
31703: POP
31704: POP
// end ;
31705: PPOPN 2
31707: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31708: LD_EXP 61
31712: PUSH
31713: LD_EXP 114
31717: AND
31718: IFFALSE 32006
31720: GO 31722
31722: DISABLE
31723: LD_INT 0
31725: PPUSH
31726: PPUSH
31727: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31728: LD_OWVAR 2
31732: PPUSH
31733: LD_INT 9
31735: PPUSH
31736: LD_INT 1
31738: PPUSH
31739: LD_INT 1
31741: PPUSH
31742: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31746: LD_INT 9
31748: PPUSH
31749: LD_OWVAR 2
31753: PPUSH
31754: CALL_OW 343
// uc_side := 9 ;
31758: LD_ADDR_OWVAR 20
31762: PUSH
31763: LD_INT 9
31765: ST_TO_ADDR
// uc_nation := 2 ;
31766: LD_ADDR_OWVAR 21
31770: PUSH
31771: LD_INT 2
31773: ST_TO_ADDR
// hc_name := Dark Warrior ;
31774: LD_ADDR_OWVAR 26
31778: PUSH
31779: LD_STRING Dark Warrior
31781: ST_TO_ADDR
// hc_gallery :=  ;
31782: LD_ADDR_OWVAR 33
31786: PUSH
31787: LD_STRING 
31789: ST_TO_ADDR
// hc_noskilllimit := true ;
31790: LD_ADDR_OWVAR 76
31794: PUSH
31795: LD_INT 1
31797: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31798: LD_ADDR_OWVAR 31
31802: PUSH
31803: LD_INT 30
31805: PUSH
31806: LD_INT 30
31808: PUSH
31809: LD_INT 30
31811: PUSH
31812: LD_INT 30
31814: PUSH
31815: EMPTY
31816: LIST
31817: LIST
31818: LIST
31819: LIST
31820: ST_TO_ADDR
// un := CreateHuman ;
31821: LD_ADDR_VAR 0 3
31825: PUSH
31826: CALL_OW 44
31830: ST_TO_ADDR
// hc_noskilllimit := false ;
31831: LD_ADDR_OWVAR 76
31835: PUSH
31836: LD_INT 0
31838: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31839: LD_VAR 0 3
31843: PPUSH
31844: LD_INT 1
31846: PPUSH
31847: CALL_OW 51
// ToLua ( playRanger() ) ;
31851: LD_STRING playRanger()
31853: PPUSH
31854: CALL_OW 559
// p := 0 ;
31858: LD_ADDR_VAR 0 2
31862: PUSH
31863: LD_INT 0
31865: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31866: LD_INT 35
31868: PPUSH
31869: CALL_OW 67
// p := p + 1 ;
31873: LD_ADDR_VAR 0 2
31877: PUSH
31878: LD_VAR 0 2
31882: PUSH
31883: LD_INT 1
31885: PLUS
31886: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31887: LD_VAR 0 3
31891: PPUSH
31892: CALL_OW 256
31896: PUSH
31897: LD_INT 1000
31899: LESS
31900: IFFALSE 31914
// SetLives ( un , 1000 ) ;
31902: LD_VAR 0 3
31906: PPUSH
31907: LD_INT 1000
31909: PPUSH
31910: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31914: LD_VAR 0 3
31918: PPUSH
31919: LD_INT 81
31921: PUSH
31922: LD_OWVAR 2
31926: PUSH
31927: EMPTY
31928: LIST
31929: LIST
31930: PUSH
31931: LD_INT 91
31933: PUSH
31934: LD_VAR 0 3
31938: PUSH
31939: LD_INT 30
31941: PUSH
31942: EMPTY
31943: LIST
31944: LIST
31945: LIST
31946: PUSH
31947: EMPTY
31948: LIST
31949: LIST
31950: PPUSH
31951: CALL_OW 69
31955: PPUSH
31956: LD_VAR 0 3
31960: PPUSH
31961: CALL_OW 74
31965: PPUSH
31966: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31970: LD_VAR 0 2
31974: PUSH
31975: LD_INT 80
31977: GREATER
31978: PUSH
31979: LD_VAR 0 3
31983: PPUSH
31984: CALL_OW 301
31988: OR
31989: IFFALSE 31866
// if un then
31991: LD_VAR 0 3
31995: IFFALSE 32006
// RemoveUnit ( un ) ;
31997: LD_VAR 0 3
32001: PPUSH
32002: CALL_OW 64
// end ;
32006: PPOPN 3
32008: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
32009: LD_EXP 115
32013: IFFALSE 32129
32015: GO 32017
32017: DISABLE
32018: LD_INT 0
32020: PPUSH
32021: PPUSH
32022: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32023: LD_ADDR_VAR 0 2
32027: PUSH
32028: LD_INT 81
32030: PUSH
32031: LD_OWVAR 2
32035: PUSH
32036: EMPTY
32037: LIST
32038: LIST
32039: PUSH
32040: LD_INT 21
32042: PUSH
32043: LD_INT 1
32045: PUSH
32046: EMPTY
32047: LIST
32048: LIST
32049: PUSH
32050: EMPTY
32051: LIST
32052: LIST
32053: PPUSH
32054: CALL_OW 69
32058: ST_TO_ADDR
// ToLua ( playComputer() ) ;
32059: LD_STRING playComputer()
32061: PPUSH
32062: CALL_OW 559
// if not tmp then
32066: LD_VAR 0 2
32070: NOT
32071: IFFALSE 32075
// exit ;
32073: GO 32129
// for i in tmp do
32075: LD_ADDR_VAR 0 1
32079: PUSH
32080: LD_VAR 0 2
32084: PUSH
32085: FOR_IN
32086: IFFALSE 32127
// for j := 1 to 4 do
32088: LD_ADDR_VAR 0 3
32092: PUSH
32093: DOUBLE
32094: LD_INT 1
32096: DEC
32097: ST_TO_ADDR
32098: LD_INT 4
32100: PUSH
32101: FOR_TO
32102: IFFALSE 32123
// SetSkill ( i , j , 10 ) ;
32104: LD_VAR 0 1
32108: PPUSH
32109: LD_VAR 0 3
32113: PPUSH
32114: LD_INT 10
32116: PPUSH
32117: CALL_OW 237
32121: GO 32101
32123: POP
32124: POP
32125: GO 32085
32127: POP
32128: POP
// end ;
32129: PPOPN 3
32131: END
// every 0 0$1 trigger s30 do var i , tmp ;
32132: LD_EXP 116
32136: IFFALSE 32205
32138: GO 32140
32140: DISABLE
32141: LD_INT 0
32143: PPUSH
32144: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32145: LD_ADDR_VAR 0 2
32149: PUSH
32150: LD_INT 22
32152: PUSH
32153: LD_OWVAR 2
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: PPUSH
32162: CALL_OW 69
32166: ST_TO_ADDR
// if not tmp then
32167: LD_VAR 0 2
32171: NOT
32172: IFFALSE 32176
// exit ;
32174: GO 32205
// for i in tmp do
32176: LD_ADDR_VAR 0 1
32180: PUSH
32181: LD_VAR 0 2
32185: PUSH
32186: FOR_IN
32187: IFFALSE 32203
// SetLives ( i , 300 ) ;
32189: LD_VAR 0 1
32193: PPUSH
32194: LD_INT 300
32196: PPUSH
32197: CALL_OW 234
32201: GO 32186
32203: POP
32204: POP
// end ;
32205: PPOPN 2
32207: END
// every 0 0$1 trigger s60 do var i , tmp ;
32208: LD_EXP 117
32212: IFFALSE 32281
32214: GO 32216
32216: DISABLE
32217: LD_INT 0
32219: PPUSH
32220: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32221: LD_ADDR_VAR 0 2
32225: PUSH
32226: LD_INT 22
32228: PUSH
32229: LD_OWVAR 2
32233: PUSH
32234: EMPTY
32235: LIST
32236: LIST
32237: PPUSH
32238: CALL_OW 69
32242: ST_TO_ADDR
// if not tmp then
32243: LD_VAR 0 2
32247: NOT
32248: IFFALSE 32252
// exit ;
32250: GO 32281
// for i in tmp do
32252: LD_ADDR_VAR 0 1
32256: PUSH
32257: LD_VAR 0 2
32261: PUSH
32262: FOR_IN
32263: IFFALSE 32279
// SetLives ( i , 600 ) ;
32265: LD_VAR 0 1
32269: PPUSH
32270: LD_INT 600
32272: PPUSH
32273: CALL_OW 234
32277: GO 32262
32279: POP
32280: POP
// end ;
32281: PPOPN 2
32283: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32284: LD_INT 0
32286: PPUSH
// case cmd of 301 :
32287: LD_VAR 0 1
32291: PUSH
32292: LD_INT 301
32294: DOUBLE
32295: EQUAL
32296: IFTRUE 32300
32298: GO 32332
32300: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32301: LD_VAR 0 6
32305: PPUSH
32306: LD_VAR 0 7
32310: PPUSH
32311: LD_VAR 0 8
32315: PPUSH
32316: LD_VAR 0 4
32320: PPUSH
32321: LD_VAR 0 5
32325: PPUSH
32326: CALL 33541 0 5
32330: GO 32453
32332: LD_INT 302
32334: DOUBLE
32335: EQUAL
32336: IFTRUE 32340
32338: GO 32377
32340: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32341: LD_VAR 0 6
32345: PPUSH
32346: LD_VAR 0 7
32350: PPUSH
32351: LD_VAR 0 8
32355: PPUSH
32356: LD_VAR 0 9
32360: PPUSH
32361: LD_VAR 0 4
32365: PPUSH
32366: LD_VAR 0 5
32370: PPUSH
32371: CALL 33632 0 6
32375: GO 32453
32377: LD_INT 303
32379: DOUBLE
32380: EQUAL
32381: IFTRUE 32385
32383: GO 32422
32385: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32386: LD_VAR 0 6
32390: PPUSH
32391: LD_VAR 0 7
32395: PPUSH
32396: LD_VAR 0 8
32400: PPUSH
32401: LD_VAR 0 9
32405: PPUSH
32406: LD_VAR 0 4
32410: PPUSH
32411: LD_VAR 0 5
32415: PPUSH
32416: CALL 32458 0 6
32420: GO 32453
32422: LD_INT 304
32424: DOUBLE
32425: EQUAL
32426: IFTRUE 32430
32428: GO 32452
32430: POP
// hHackTeleport ( unit , x , y ) ; end ;
32431: LD_VAR 0 2
32435: PPUSH
32436: LD_VAR 0 4
32440: PPUSH
32441: LD_VAR 0 5
32445: PPUSH
32446: CALL 34225 0 3
32450: GO 32453
32452: POP
// end ;
32453: LD_VAR 0 12
32457: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32458: LD_INT 0
32460: PPUSH
32461: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32462: LD_VAR 0 1
32466: PUSH
32467: LD_INT 1
32469: LESS
32470: PUSH
32471: LD_VAR 0 1
32475: PUSH
32476: LD_INT 3
32478: GREATER
32479: OR
32480: PUSH
32481: LD_VAR 0 5
32485: PPUSH
32486: LD_VAR 0 6
32490: PPUSH
32491: CALL_OW 428
32495: OR
32496: IFFALSE 32500
// exit ;
32498: GO 33228
// uc_side := your_side ;
32500: LD_ADDR_OWVAR 20
32504: PUSH
32505: LD_OWVAR 2
32509: ST_TO_ADDR
// uc_nation := nation ;
32510: LD_ADDR_OWVAR 21
32514: PUSH
32515: LD_VAR 0 1
32519: ST_TO_ADDR
// bc_level = 1 ;
32520: LD_ADDR_OWVAR 43
32524: PUSH
32525: LD_INT 1
32527: ST_TO_ADDR
// case btype of 1 :
32528: LD_VAR 0 2
32532: PUSH
32533: LD_INT 1
32535: DOUBLE
32536: EQUAL
32537: IFTRUE 32541
32539: GO 32552
32541: POP
// bc_type := b_depot ; 2 :
32542: LD_ADDR_OWVAR 42
32546: PUSH
32547: LD_INT 0
32549: ST_TO_ADDR
32550: GO 33172
32552: LD_INT 2
32554: DOUBLE
32555: EQUAL
32556: IFTRUE 32560
32558: GO 32571
32560: POP
// bc_type := b_warehouse ; 3 :
32561: LD_ADDR_OWVAR 42
32565: PUSH
32566: LD_INT 1
32568: ST_TO_ADDR
32569: GO 33172
32571: LD_INT 3
32573: DOUBLE
32574: EQUAL
32575: IFTRUE 32579
32577: GO 32590
32579: POP
// bc_type := b_lab ; 4 .. 9 :
32580: LD_ADDR_OWVAR 42
32584: PUSH
32585: LD_INT 6
32587: ST_TO_ADDR
32588: GO 33172
32590: LD_INT 4
32592: DOUBLE
32593: GREATEREQUAL
32594: IFFALSE 32602
32596: LD_INT 9
32598: DOUBLE
32599: LESSEQUAL
32600: IFTRUE 32604
32602: GO 32664
32604: POP
// begin bc_type := b_lab_half ;
32605: LD_ADDR_OWVAR 42
32609: PUSH
32610: LD_INT 7
32612: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32613: LD_ADDR_OWVAR 44
32617: PUSH
32618: LD_INT 10
32620: PUSH
32621: LD_INT 11
32623: PUSH
32624: LD_INT 12
32626: PUSH
32627: LD_INT 15
32629: PUSH
32630: LD_INT 14
32632: PUSH
32633: LD_INT 13
32635: PUSH
32636: EMPTY
32637: LIST
32638: LIST
32639: LIST
32640: LIST
32641: LIST
32642: LIST
32643: PUSH
32644: LD_VAR 0 2
32648: PUSH
32649: LD_INT 3
32651: MINUS
32652: ARRAY
32653: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
32654: LD_ADDR_OWVAR 45
32658: PUSH
32659: LD_INT 9
32661: ST_TO_ADDR
// end ; 10 .. 13 :
32662: GO 33172
32664: LD_INT 10
32666: DOUBLE
32667: GREATEREQUAL
32668: IFFALSE 32676
32670: LD_INT 13
32672: DOUBLE
32673: LESSEQUAL
32674: IFTRUE 32678
32676: GO 32755
32678: POP
// begin bc_type := b_lab_full ;
32679: LD_ADDR_OWVAR 42
32683: PUSH
32684: LD_INT 8
32686: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32687: LD_ADDR_OWVAR 44
32691: PUSH
32692: LD_INT 10
32694: PUSH
32695: LD_INT 12
32697: PUSH
32698: LD_INT 14
32700: PUSH
32701: LD_INT 13
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: LIST
32708: LIST
32709: PUSH
32710: LD_VAR 0 2
32714: PUSH
32715: LD_INT 9
32717: MINUS
32718: ARRAY
32719: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32720: LD_ADDR_OWVAR 45
32724: PUSH
32725: LD_INT 11
32727: PUSH
32728: LD_INT 15
32730: PUSH
32731: LD_INT 12
32733: PUSH
32734: LD_INT 15
32736: PUSH
32737: EMPTY
32738: LIST
32739: LIST
32740: LIST
32741: LIST
32742: PUSH
32743: LD_VAR 0 2
32747: PUSH
32748: LD_INT 9
32750: MINUS
32751: ARRAY
32752: ST_TO_ADDR
// end ; 14 :
32753: GO 33172
32755: LD_INT 14
32757: DOUBLE
32758: EQUAL
32759: IFTRUE 32763
32761: GO 32774
32763: POP
// bc_type := b_workshop ; 15 :
32764: LD_ADDR_OWVAR 42
32768: PUSH
32769: LD_INT 2
32771: ST_TO_ADDR
32772: GO 33172
32774: LD_INT 15
32776: DOUBLE
32777: EQUAL
32778: IFTRUE 32782
32780: GO 32793
32782: POP
// bc_type := b_factory ; 16 :
32783: LD_ADDR_OWVAR 42
32787: PUSH
32788: LD_INT 3
32790: ST_TO_ADDR
32791: GO 33172
32793: LD_INT 16
32795: DOUBLE
32796: EQUAL
32797: IFTRUE 32801
32799: GO 32812
32801: POP
// bc_type := b_ext_gun ; 17 :
32802: LD_ADDR_OWVAR 42
32806: PUSH
32807: LD_INT 17
32809: ST_TO_ADDR
32810: GO 33172
32812: LD_INT 17
32814: DOUBLE
32815: EQUAL
32816: IFTRUE 32820
32818: GO 32848
32820: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32821: LD_ADDR_OWVAR 42
32825: PUSH
32826: LD_INT 19
32828: PUSH
32829: LD_INT 23
32831: PUSH
32832: LD_INT 19
32834: PUSH
32835: EMPTY
32836: LIST
32837: LIST
32838: LIST
32839: PUSH
32840: LD_VAR 0 1
32844: ARRAY
32845: ST_TO_ADDR
32846: GO 33172
32848: LD_INT 18
32850: DOUBLE
32851: EQUAL
32852: IFTRUE 32856
32854: GO 32867
32856: POP
// bc_type := b_ext_radar ; 19 :
32857: LD_ADDR_OWVAR 42
32861: PUSH
32862: LD_INT 20
32864: ST_TO_ADDR
32865: GO 33172
32867: LD_INT 19
32869: DOUBLE
32870: EQUAL
32871: IFTRUE 32875
32873: GO 32886
32875: POP
// bc_type := b_ext_radio ; 20 :
32876: LD_ADDR_OWVAR 42
32880: PUSH
32881: LD_INT 22
32883: ST_TO_ADDR
32884: GO 33172
32886: LD_INT 20
32888: DOUBLE
32889: EQUAL
32890: IFTRUE 32894
32892: GO 32905
32894: POP
// bc_type := b_ext_siberium ; 21 :
32895: LD_ADDR_OWVAR 42
32899: PUSH
32900: LD_INT 21
32902: ST_TO_ADDR
32903: GO 33172
32905: LD_INT 21
32907: DOUBLE
32908: EQUAL
32909: IFTRUE 32913
32911: GO 32924
32913: POP
// bc_type := b_ext_computer ; 22 :
32914: LD_ADDR_OWVAR 42
32918: PUSH
32919: LD_INT 24
32921: ST_TO_ADDR
32922: GO 33172
32924: LD_INT 22
32926: DOUBLE
32927: EQUAL
32928: IFTRUE 32932
32930: GO 32943
32932: POP
// bc_type := b_ext_track ; 23 :
32933: LD_ADDR_OWVAR 42
32937: PUSH
32938: LD_INT 16
32940: ST_TO_ADDR
32941: GO 33172
32943: LD_INT 23
32945: DOUBLE
32946: EQUAL
32947: IFTRUE 32951
32949: GO 32962
32951: POP
// bc_type := b_ext_laser ; 24 :
32952: LD_ADDR_OWVAR 42
32956: PUSH
32957: LD_INT 25
32959: ST_TO_ADDR
32960: GO 33172
32962: LD_INT 24
32964: DOUBLE
32965: EQUAL
32966: IFTRUE 32970
32968: GO 32981
32970: POP
// bc_type := b_control_tower ; 25 :
32971: LD_ADDR_OWVAR 42
32975: PUSH
32976: LD_INT 36
32978: ST_TO_ADDR
32979: GO 33172
32981: LD_INT 25
32983: DOUBLE
32984: EQUAL
32985: IFTRUE 32989
32987: GO 33000
32989: POP
// bc_type := b_breastwork ; 26 :
32990: LD_ADDR_OWVAR 42
32994: PUSH
32995: LD_INT 31
32997: ST_TO_ADDR
32998: GO 33172
33000: LD_INT 26
33002: DOUBLE
33003: EQUAL
33004: IFTRUE 33008
33006: GO 33019
33008: POP
// bc_type := b_bunker ; 27 :
33009: LD_ADDR_OWVAR 42
33013: PUSH
33014: LD_INT 32
33016: ST_TO_ADDR
33017: GO 33172
33019: LD_INT 27
33021: DOUBLE
33022: EQUAL
33023: IFTRUE 33027
33025: GO 33038
33027: POP
// bc_type := b_turret ; 28 :
33028: LD_ADDR_OWVAR 42
33032: PUSH
33033: LD_INT 33
33035: ST_TO_ADDR
33036: GO 33172
33038: LD_INT 28
33040: DOUBLE
33041: EQUAL
33042: IFTRUE 33046
33044: GO 33057
33046: POP
// bc_type := b_armoury ; 29 :
33047: LD_ADDR_OWVAR 42
33051: PUSH
33052: LD_INT 4
33054: ST_TO_ADDR
33055: GO 33172
33057: LD_INT 29
33059: DOUBLE
33060: EQUAL
33061: IFTRUE 33065
33063: GO 33076
33065: POP
// bc_type := b_barracks ; 30 :
33066: LD_ADDR_OWVAR 42
33070: PUSH
33071: LD_INT 5
33073: ST_TO_ADDR
33074: GO 33172
33076: LD_INT 30
33078: DOUBLE
33079: EQUAL
33080: IFTRUE 33084
33082: GO 33095
33084: POP
// bc_type := b_solar_power ; 31 :
33085: LD_ADDR_OWVAR 42
33089: PUSH
33090: LD_INT 27
33092: ST_TO_ADDR
33093: GO 33172
33095: LD_INT 31
33097: DOUBLE
33098: EQUAL
33099: IFTRUE 33103
33101: GO 33114
33103: POP
// bc_type := b_oil_power ; 32 :
33104: LD_ADDR_OWVAR 42
33108: PUSH
33109: LD_INT 26
33111: ST_TO_ADDR
33112: GO 33172
33114: LD_INT 32
33116: DOUBLE
33117: EQUAL
33118: IFTRUE 33122
33120: GO 33133
33122: POP
// bc_type := b_siberite_power ; 33 :
33123: LD_ADDR_OWVAR 42
33127: PUSH
33128: LD_INT 28
33130: ST_TO_ADDR
33131: GO 33172
33133: LD_INT 33
33135: DOUBLE
33136: EQUAL
33137: IFTRUE 33141
33139: GO 33152
33141: POP
// bc_type := b_oil_mine ; 34 :
33142: LD_ADDR_OWVAR 42
33146: PUSH
33147: LD_INT 29
33149: ST_TO_ADDR
33150: GO 33172
33152: LD_INT 34
33154: DOUBLE
33155: EQUAL
33156: IFTRUE 33160
33158: GO 33171
33160: POP
// bc_type := b_siberite_mine ; end ;
33161: LD_ADDR_OWVAR 42
33165: PUSH
33166: LD_INT 30
33168: ST_TO_ADDR
33169: GO 33172
33171: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33172: LD_ADDR_VAR 0 8
33176: PUSH
33177: LD_VAR 0 5
33181: PPUSH
33182: LD_VAR 0 6
33186: PPUSH
33187: LD_VAR 0 3
33191: PPUSH
33192: CALL_OW 47
33196: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33197: LD_OWVAR 42
33201: PUSH
33202: LD_INT 32
33204: PUSH
33205: LD_INT 33
33207: PUSH
33208: EMPTY
33209: LIST
33210: LIST
33211: IN
33212: IFFALSE 33228
// PlaceWeaponTurret ( b , weapon ) ;
33214: LD_VAR 0 8
33218: PPUSH
33219: LD_VAR 0 4
33223: PPUSH
33224: CALL_OW 431
// end ;
33228: LD_VAR 0 7
33232: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33233: LD_INT 0
33235: PPUSH
33236: PPUSH
33237: PPUSH
33238: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33239: LD_ADDR_VAR 0 4
33243: PUSH
33244: LD_INT 22
33246: PUSH
33247: LD_OWVAR 2
33251: PUSH
33252: EMPTY
33253: LIST
33254: LIST
33255: PUSH
33256: LD_INT 2
33258: PUSH
33259: LD_INT 30
33261: PUSH
33262: LD_INT 0
33264: PUSH
33265: EMPTY
33266: LIST
33267: LIST
33268: PUSH
33269: LD_INT 30
33271: PUSH
33272: LD_INT 1
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: PUSH
33279: EMPTY
33280: LIST
33281: LIST
33282: LIST
33283: PUSH
33284: EMPTY
33285: LIST
33286: LIST
33287: PPUSH
33288: CALL_OW 69
33292: ST_TO_ADDR
// if not tmp then
33293: LD_VAR 0 4
33297: NOT
33298: IFFALSE 33302
// exit ;
33300: GO 33361
// for i in tmp do
33302: LD_ADDR_VAR 0 2
33306: PUSH
33307: LD_VAR 0 4
33311: PUSH
33312: FOR_IN
33313: IFFALSE 33359
// for j = 1 to 3 do
33315: LD_ADDR_VAR 0 3
33319: PUSH
33320: DOUBLE
33321: LD_INT 1
33323: DEC
33324: ST_TO_ADDR
33325: LD_INT 3
33327: PUSH
33328: FOR_TO
33329: IFFALSE 33355
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33331: LD_VAR 0 2
33335: PPUSH
33336: CALL_OW 274
33340: PPUSH
33341: LD_VAR 0 3
33345: PPUSH
33346: LD_INT 99999
33348: PPUSH
33349: CALL_OW 277
33353: GO 33328
33355: POP
33356: POP
33357: GO 33312
33359: POP
33360: POP
// end ;
33361: LD_VAR 0 1
33365: RET
// export function hHackSetLevel10 ; var i , j ; begin
33366: LD_INT 0
33368: PPUSH
33369: PPUSH
33370: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33371: LD_ADDR_VAR 0 2
33375: PUSH
33376: LD_INT 21
33378: PUSH
33379: LD_INT 1
33381: PUSH
33382: EMPTY
33383: LIST
33384: LIST
33385: PPUSH
33386: CALL_OW 69
33390: PUSH
33391: FOR_IN
33392: IFFALSE 33444
// if IsSelected ( i ) then
33394: LD_VAR 0 2
33398: PPUSH
33399: CALL_OW 306
33403: IFFALSE 33442
// begin for j := 1 to 4 do
33405: LD_ADDR_VAR 0 3
33409: PUSH
33410: DOUBLE
33411: LD_INT 1
33413: DEC
33414: ST_TO_ADDR
33415: LD_INT 4
33417: PUSH
33418: FOR_TO
33419: IFFALSE 33440
// SetSkill ( i , j , 10 ) ;
33421: LD_VAR 0 2
33425: PPUSH
33426: LD_VAR 0 3
33430: PPUSH
33431: LD_INT 10
33433: PPUSH
33434: CALL_OW 237
33438: GO 33418
33440: POP
33441: POP
// end ;
33442: GO 33391
33444: POP
33445: POP
// end ;
33446: LD_VAR 0 1
33450: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33451: LD_INT 0
33453: PPUSH
33454: PPUSH
33455: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33456: LD_ADDR_VAR 0 2
33460: PUSH
33461: LD_INT 22
33463: PUSH
33464: LD_OWVAR 2
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: PUSH
33473: LD_INT 21
33475: PUSH
33476: LD_INT 1
33478: PUSH
33479: EMPTY
33480: LIST
33481: LIST
33482: PUSH
33483: EMPTY
33484: LIST
33485: LIST
33486: PPUSH
33487: CALL_OW 69
33491: PUSH
33492: FOR_IN
33493: IFFALSE 33534
// begin for j := 1 to 4 do
33495: LD_ADDR_VAR 0 3
33499: PUSH
33500: DOUBLE
33501: LD_INT 1
33503: DEC
33504: ST_TO_ADDR
33505: LD_INT 4
33507: PUSH
33508: FOR_TO
33509: IFFALSE 33530
// SetSkill ( i , j , 10 ) ;
33511: LD_VAR 0 2
33515: PPUSH
33516: LD_VAR 0 3
33520: PPUSH
33521: LD_INT 10
33523: PPUSH
33524: CALL_OW 237
33528: GO 33508
33530: POP
33531: POP
// end ;
33532: GO 33492
33534: POP
33535: POP
// end ;
33536: LD_VAR 0 1
33540: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33541: LD_INT 0
33543: PPUSH
// uc_side := your_side ;
33544: LD_ADDR_OWVAR 20
33548: PUSH
33549: LD_OWVAR 2
33553: ST_TO_ADDR
// uc_nation := nation ;
33554: LD_ADDR_OWVAR 21
33558: PUSH
33559: LD_VAR 0 1
33563: ST_TO_ADDR
// InitHc ;
33564: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33568: LD_INT 0
33570: PPUSH
33571: LD_VAR 0 2
33575: PPUSH
33576: LD_VAR 0 3
33580: PPUSH
33581: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33585: LD_VAR 0 4
33589: PPUSH
33590: LD_VAR 0 5
33594: PPUSH
33595: CALL_OW 428
33599: PUSH
33600: LD_INT 0
33602: EQUAL
33603: IFFALSE 33627
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33605: CALL_OW 44
33609: PPUSH
33610: LD_VAR 0 4
33614: PPUSH
33615: LD_VAR 0 5
33619: PPUSH
33620: LD_INT 1
33622: PPUSH
33623: CALL_OW 48
// end ;
33627: LD_VAR 0 6
33631: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33632: LD_INT 0
33634: PPUSH
33635: PPUSH
// uc_side := your_side ;
33636: LD_ADDR_OWVAR 20
33640: PUSH
33641: LD_OWVAR 2
33645: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33646: LD_VAR 0 1
33650: PUSH
33651: LD_INT 1
33653: PUSH
33654: LD_INT 2
33656: PUSH
33657: LD_INT 3
33659: PUSH
33660: LD_INT 4
33662: PUSH
33663: LD_INT 5
33665: PUSH
33666: EMPTY
33667: LIST
33668: LIST
33669: LIST
33670: LIST
33671: LIST
33672: IN
33673: IFFALSE 33685
// uc_nation := nation_american else
33675: LD_ADDR_OWVAR 21
33679: PUSH
33680: LD_INT 1
33682: ST_TO_ADDR
33683: GO 33728
// if chassis in [ 11 , 12 , 13 , 14 ] then
33685: LD_VAR 0 1
33689: PUSH
33690: LD_INT 11
33692: PUSH
33693: LD_INT 12
33695: PUSH
33696: LD_INT 13
33698: PUSH
33699: LD_INT 14
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: LIST
33706: LIST
33707: IN
33708: IFFALSE 33720
// uc_nation := nation_arabian else
33710: LD_ADDR_OWVAR 21
33714: PUSH
33715: LD_INT 2
33717: ST_TO_ADDR
33718: GO 33728
// uc_nation := nation_russian ;
33720: LD_ADDR_OWVAR 21
33724: PUSH
33725: LD_INT 3
33727: ST_TO_ADDR
// vc_chassis := chassis ;
33728: LD_ADDR_OWVAR 37
33732: PUSH
33733: LD_VAR 0 1
33737: ST_TO_ADDR
// vc_engine := engine ;
33738: LD_ADDR_OWVAR 39
33742: PUSH
33743: LD_VAR 0 2
33747: ST_TO_ADDR
// vc_control := control ;
33748: LD_ADDR_OWVAR 38
33752: PUSH
33753: LD_VAR 0 3
33757: ST_TO_ADDR
// vc_weapon := weapon ;
33758: LD_ADDR_OWVAR 40
33762: PUSH
33763: LD_VAR 0 4
33767: ST_TO_ADDR
// un := CreateVehicle ;
33768: LD_ADDR_VAR 0 8
33772: PUSH
33773: CALL_OW 45
33777: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33778: LD_VAR 0 8
33782: PPUSH
33783: LD_INT 0
33785: PPUSH
33786: LD_INT 5
33788: PPUSH
33789: CALL_OW 12
33793: PPUSH
33794: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33798: LD_VAR 0 8
33802: PPUSH
33803: LD_VAR 0 5
33807: PPUSH
33808: LD_VAR 0 6
33812: PPUSH
33813: LD_INT 1
33815: PPUSH
33816: CALL_OW 48
// end ;
33820: LD_VAR 0 7
33824: RET
// export hInvincible ; every 1 do
33825: GO 33827
33827: DISABLE
// hInvincible := [ ] ;
33828: LD_ADDR_EXP 118
33832: PUSH
33833: EMPTY
33834: ST_TO_ADDR
33835: END
// every 10 do var i ;
33836: GO 33838
33838: DISABLE
33839: LD_INT 0
33841: PPUSH
// begin enable ;
33842: ENABLE
// if not hInvincible then
33843: LD_EXP 118
33847: NOT
33848: IFFALSE 33852
// exit ;
33850: GO 33896
// for i in hInvincible do
33852: LD_ADDR_VAR 0 1
33856: PUSH
33857: LD_EXP 118
33861: PUSH
33862: FOR_IN
33863: IFFALSE 33894
// if GetLives ( i ) < 1000 then
33865: LD_VAR 0 1
33869: PPUSH
33870: CALL_OW 256
33874: PUSH
33875: LD_INT 1000
33877: LESS
33878: IFFALSE 33892
// SetLives ( i , 1000 ) ;
33880: LD_VAR 0 1
33884: PPUSH
33885: LD_INT 1000
33887: PPUSH
33888: CALL_OW 234
33892: GO 33862
33894: POP
33895: POP
// end ;
33896: PPOPN 1
33898: END
// export function hHackInvincible ; var i ; begin
33899: LD_INT 0
33901: PPUSH
33902: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33903: LD_ADDR_VAR 0 2
33907: PUSH
33908: LD_INT 2
33910: PUSH
33911: LD_INT 21
33913: PUSH
33914: LD_INT 1
33916: PUSH
33917: EMPTY
33918: LIST
33919: LIST
33920: PUSH
33921: LD_INT 21
33923: PUSH
33924: LD_INT 2
33926: PUSH
33927: EMPTY
33928: LIST
33929: LIST
33930: PUSH
33931: EMPTY
33932: LIST
33933: LIST
33934: LIST
33935: PPUSH
33936: CALL_OW 69
33940: PUSH
33941: FOR_IN
33942: IFFALSE 34003
// if IsSelected ( i ) then
33944: LD_VAR 0 2
33948: PPUSH
33949: CALL_OW 306
33953: IFFALSE 34001
// begin if i in hInvincible then
33955: LD_VAR 0 2
33959: PUSH
33960: LD_EXP 118
33964: IN
33965: IFFALSE 33985
// hInvincible := hInvincible diff i else
33967: LD_ADDR_EXP 118
33971: PUSH
33972: LD_EXP 118
33976: PUSH
33977: LD_VAR 0 2
33981: DIFF
33982: ST_TO_ADDR
33983: GO 34001
// hInvincible := hInvincible union i ;
33985: LD_ADDR_EXP 118
33989: PUSH
33990: LD_EXP 118
33994: PUSH
33995: LD_VAR 0 2
33999: UNION
34000: ST_TO_ADDR
// end ;
34001: GO 33941
34003: POP
34004: POP
// end ;
34005: LD_VAR 0 1
34009: RET
// export function hHackInvisible ; var i , j ; begin
34010: LD_INT 0
34012: PPUSH
34013: PPUSH
34014: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34015: LD_ADDR_VAR 0 2
34019: PUSH
34020: LD_INT 21
34022: PUSH
34023: LD_INT 1
34025: PUSH
34026: EMPTY
34027: LIST
34028: LIST
34029: PPUSH
34030: CALL_OW 69
34034: PUSH
34035: FOR_IN
34036: IFFALSE 34060
// if IsSelected ( i ) then
34038: LD_VAR 0 2
34042: PPUSH
34043: CALL_OW 306
34047: IFFALSE 34058
// ComForceInvisible ( i ) ;
34049: LD_VAR 0 2
34053: PPUSH
34054: CALL_OW 496
34058: GO 34035
34060: POP
34061: POP
// end ;
34062: LD_VAR 0 1
34066: RET
// export function hHackChangeYourSide ; begin
34067: LD_INT 0
34069: PPUSH
// if your_side = 8 then
34070: LD_OWVAR 2
34074: PUSH
34075: LD_INT 8
34077: EQUAL
34078: IFFALSE 34090
// your_side := 0 else
34080: LD_ADDR_OWVAR 2
34084: PUSH
34085: LD_INT 0
34087: ST_TO_ADDR
34088: GO 34104
// your_side := your_side + 1 ;
34090: LD_ADDR_OWVAR 2
34094: PUSH
34095: LD_OWVAR 2
34099: PUSH
34100: LD_INT 1
34102: PLUS
34103: ST_TO_ADDR
// end ;
34104: LD_VAR 0 1
34108: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34109: LD_INT 0
34111: PPUSH
34112: PPUSH
34113: PPUSH
// for i in all_units do
34114: LD_ADDR_VAR 0 2
34118: PUSH
34119: LD_OWVAR 3
34123: PUSH
34124: FOR_IN
34125: IFFALSE 34203
// if IsSelected ( i ) then
34127: LD_VAR 0 2
34131: PPUSH
34132: CALL_OW 306
34136: IFFALSE 34201
// begin j := GetSide ( i ) ;
34138: LD_ADDR_VAR 0 3
34142: PUSH
34143: LD_VAR 0 2
34147: PPUSH
34148: CALL_OW 255
34152: ST_TO_ADDR
// if j = 8 then
34153: LD_VAR 0 3
34157: PUSH
34158: LD_INT 8
34160: EQUAL
34161: IFFALSE 34173
// j := 0 else
34163: LD_ADDR_VAR 0 3
34167: PUSH
34168: LD_INT 0
34170: ST_TO_ADDR
34171: GO 34187
// j := j + 1 ;
34173: LD_ADDR_VAR 0 3
34177: PUSH
34178: LD_VAR 0 3
34182: PUSH
34183: LD_INT 1
34185: PLUS
34186: ST_TO_ADDR
// SetSide ( i , j ) ;
34187: LD_VAR 0 2
34191: PPUSH
34192: LD_VAR 0 3
34196: PPUSH
34197: CALL_OW 235
// end ;
34201: GO 34124
34203: POP
34204: POP
// end ;
34205: LD_VAR 0 1
34209: RET
// export function hHackFog ; begin
34210: LD_INT 0
34212: PPUSH
// FogOff ( true ) ;
34213: LD_INT 1
34215: PPUSH
34216: CALL_OW 344
// end ;
34220: LD_VAR 0 1
34224: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34225: LD_INT 0
34227: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34228: LD_VAR 0 1
34232: PPUSH
34233: LD_VAR 0 2
34237: PPUSH
34238: LD_VAR 0 3
34242: PPUSH
34243: LD_INT 1
34245: PPUSH
34246: LD_INT 1
34248: PPUSH
34249: CALL_OW 483
// CenterOnXY ( x , y ) ;
34253: LD_VAR 0 2
34257: PPUSH
34258: LD_VAR 0 3
34262: PPUSH
34263: CALL_OW 84
// end ;
34267: LD_VAR 0 4
34271: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34272: LD_INT 0
34274: PPUSH
34275: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34276: LD_VAR 0 1
34280: NOT
34281: PUSH
34282: LD_VAR 0 2
34286: PPUSH
34287: LD_VAR 0 3
34291: PPUSH
34292: CALL_OW 488
34296: NOT
34297: OR
34298: PUSH
34299: LD_VAR 0 1
34303: PPUSH
34304: CALL_OW 266
34308: PUSH
34309: LD_INT 3
34311: NONEQUAL
34312: PUSH
34313: LD_VAR 0 1
34317: PPUSH
34318: CALL_OW 247
34322: PUSH
34323: LD_INT 1
34325: EQUAL
34326: NOT
34327: AND
34328: OR
34329: IFFALSE 34333
// exit ;
34331: GO 34482
// if GetType ( factory ) = unit_human then
34333: LD_VAR 0 1
34337: PPUSH
34338: CALL_OW 247
34342: PUSH
34343: LD_INT 1
34345: EQUAL
34346: IFFALSE 34363
// factory := IsInUnit ( factory ) ;
34348: LD_ADDR_VAR 0 1
34352: PUSH
34353: LD_VAR 0 1
34357: PPUSH
34358: CALL_OW 310
34362: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34363: LD_VAR 0 1
34367: PPUSH
34368: CALL_OW 266
34372: PUSH
34373: LD_INT 3
34375: NONEQUAL
34376: IFFALSE 34380
// exit ;
34378: GO 34482
// if HexInfo ( x , y ) = factory then
34380: LD_VAR 0 2
34384: PPUSH
34385: LD_VAR 0 3
34389: PPUSH
34390: CALL_OW 428
34394: PUSH
34395: LD_VAR 0 1
34399: EQUAL
34400: IFFALSE 34427
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
34402: LD_ADDR_EXP 119
34406: PUSH
34407: LD_EXP 119
34411: PPUSH
34412: LD_VAR 0 1
34416: PPUSH
34417: LD_INT 0
34419: PPUSH
34420: CALL_OW 1
34424: ST_TO_ADDR
34425: GO 34478
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
34427: LD_ADDR_EXP 119
34431: PUSH
34432: LD_EXP 119
34436: PPUSH
34437: LD_VAR 0 1
34441: PPUSH
34442: LD_VAR 0 1
34446: PPUSH
34447: CALL_OW 255
34451: PUSH
34452: LD_VAR 0 1
34456: PUSH
34457: LD_VAR 0 2
34461: PUSH
34462: LD_VAR 0 3
34466: PUSH
34467: EMPTY
34468: LIST
34469: LIST
34470: LIST
34471: LIST
34472: PPUSH
34473: CALL_OW 1
34477: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34478: CALL 34487 0 0
// end ;
34482: LD_VAR 0 4
34486: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34487: LD_INT 0
34489: PPUSH
34490: PPUSH
34491: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34492: LD_STRING resetFactoryWaypoint();
34494: PPUSH
34495: CALL_OW 559
// if factoryWaypoints then
34499: LD_EXP 119
34503: IFFALSE 34629
// begin list := PrepareArray ( factoryWaypoints ) ;
34505: LD_ADDR_VAR 0 3
34509: PUSH
34510: LD_EXP 119
34514: PPUSH
34515: CALL 81771 0 1
34519: ST_TO_ADDR
// for i := 1 to list do
34520: LD_ADDR_VAR 0 2
34524: PUSH
34525: DOUBLE
34526: LD_INT 1
34528: DEC
34529: ST_TO_ADDR
34530: LD_VAR 0 3
34534: PUSH
34535: FOR_TO
34536: IFFALSE 34627
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34538: LD_STRING setFactoryWaypointXY(
34540: PUSH
34541: LD_VAR 0 3
34545: PUSH
34546: LD_VAR 0 2
34550: ARRAY
34551: PUSH
34552: LD_INT 1
34554: ARRAY
34555: STR
34556: PUSH
34557: LD_STRING ,
34559: STR
34560: PUSH
34561: LD_VAR 0 3
34565: PUSH
34566: LD_VAR 0 2
34570: ARRAY
34571: PUSH
34572: LD_INT 2
34574: ARRAY
34575: STR
34576: PUSH
34577: LD_STRING ,
34579: STR
34580: PUSH
34581: LD_VAR 0 3
34585: PUSH
34586: LD_VAR 0 2
34590: ARRAY
34591: PUSH
34592: LD_INT 3
34594: ARRAY
34595: STR
34596: PUSH
34597: LD_STRING ,
34599: STR
34600: PUSH
34601: LD_VAR 0 3
34605: PUSH
34606: LD_VAR 0 2
34610: ARRAY
34611: PUSH
34612: LD_INT 4
34614: ARRAY
34615: STR
34616: PUSH
34617: LD_STRING )
34619: STR
34620: PPUSH
34621: CALL_OW 559
34625: GO 34535
34627: POP
34628: POP
// end ; end ;
34629: LD_VAR 0 1
34633: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34634: LD_INT 0
34636: PPUSH
// if HexInfo ( x , y ) = warehouse then
34637: LD_VAR 0 2
34641: PPUSH
34642: LD_VAR 0 3
34646: PPUSH
34647: CALL_OW 428
34651: PUSH
34652: LD_VAR 0 1
34656: EQUAL
34657: IFFALSE 34684
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34659: LD_ADDR_EXP 120
34663: PUSH
34664: LD_EXP 120
34668: PPUSH
34669: LD_VAR 0 1
34673: PPUSH
34674: LD_INT 0
34676: PPUSH
34677: CALL_OW 1
34681: ST_TO_ADDR
34682: GO 34735
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34684: LD_ADDR_EXP 120
34688: PUSH
34689: LD_EXP 120
34693: PPUSH
34694: LD_VAR 0 1
34698: PPUSH
34699: LD_VAR 0 1
34703: PPUSH
34704: CALL_OW 255
34708: PUSH
34709: LD_VAR 0 1
34713: PUSH
34714: LD_VAR 0 2
34718: PUSH
34719: LD_VAR 0 3
34723: PUSH
34724: EMPTY
34725: LIST
34726: LIST
34727: LIST
34728: LIST
34729: PPUSH
34730: CALL_OW 1
34734: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
34735: CALL 34744 0 0
// end ;
34739: LD_VAR 0 4
34743: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
34744: LD_INT 0
34746: PPUSH
34747: PPUSH
34748: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
34749: LD_STRING resetWarehouseGatheringPoints();
34751: PPUSH
34752: CALL_OW 559
// if warehouseGatheringPoints then
34756: LD_EXP 120
34760: IFFALSE 34886
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
34762: LD_ADDR_VAR 0 3
34766: PUSH
34767: LD_EXP 120
34771: PPUSH
34772: CALL 81771 0 1
34776: ST_TO_ADDR
// for i := 1 to list do
34777: LD_ADDR_VAR 0 2
34781: PUSH
34782: DOUBLE
34783: LD_INT 1
34785: DEC
34786: ST_TO_ADDR
34787: LD_VAR 0 3
34791: PUSH
34792: FOR_TO
34793: IFFALSE 34884
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34795: LD_STRING setWarehouseGatheringPointXY(
34797: PUSH
34798: LD_VAR 0 3
34802: PUSH
34803: LD_VAR 0 2
34807: ARRAY
34808: PUSH
34809: LD_INT 1
34811: ARRAY
34812: STR
34813: PUSH
34814: LD_STRING ,
34816: STR
34817: PUSH
34818: LD_VAR 0 3
34822: PUSH
34823: LD_VAR 0 2
34827: ARRAY
34828: PUSH
34829: LD_INT 2
34831: ARRAY
34832: STR
34833: PUSH
34834: LD_STRING ,
34836: STR
34837: PUSH
34838: LD_VAR 0 3
34842: PUSH
34843: LD_VAR 0 2
34847: ARRAY
34848: PUSH
34849: LD_INT 3
34851: ARRAY
34852: STR
34853: PUSH
34854: LD_STRING ,
34856: STR
34857: PUSH
34858: LD_VAR 0 3
34862: PUSH
34863: LD_VAR 0 2
34867: ARRAY
34868: PUSH
34869: LD_INT 4
34871: ARRAY
34872: STR
34873: PUSH
34874: LD_STRING )
34876: STR
34877: PPUSH
34878: CALL_OW 559
34882: GO 34792
34884: POP
34885: POP
// end ; end ;
34886: LD_VAR 0 1
34890: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
34891: LD_EXP 120
34895: IFFALSE 35580
34897: GO 34899
34899: DISABLE
34900: LD_INT 0
34902: PPUSH
34903: PPUSH
34904: PPUSH
34905: PPUSH
34906: PPUSH
34907: PPUSH
34908: PPUSH
34909: PPUSH
34910: PPUSH
// begin enable ;
34911: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
34912: LD_ADDR_VAR 0 3
34916: PUSH
34917: LD_EXP 120
34921: PPUSH
34922: CALL 81771 0 1
34926: ST_TO_ADDR
// if not list then
34927: LD_VAR 0 3
34931: NOT
34932: IFFALSE 34936
// exit ;
34934: GO 35580
// for i := 1 to list do
34936: LD_ADDR_VAR 0 1
34940: PUSH
34941: DOUBLE
34942: LD_INT 1
34944: DEC
34945: ST_TO_ADDR
34946: LD_VAR 0 3
34950: PUSH
34951: FOR_TO
34952: IFFALSE 35578
// begin depot := list [ i ] [ 2 ] ;
34954: LD_ADDR_VAR 0 8
34958: PUSH
34959: LD_VAR 0 3
34963: PUSH
34964: LD_VAR 0 1
34968: ARRAY
34969: PUSH
34970: LD_INT 2
34972: ARRAY
34973: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
34974: LD_ADDR_VAR 0 5
34978: PUSH
34979: LD_VAR 0 3
34983: PUSH
34984: LD_VAR 0 1
34988: ARRAY
34989: PUSH
34990: LD_INT 1
34992: ARRAY
34993: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
34994: LD_VAR 0 8
34998: PPUSH
34999: CALL_OW 301
35003: PUSH
35004: LD_VAR 0 5
35008: PUSH
35009: LD_VAR 0 8
35013: PPUSH
35014: CALL_OW 255
35018: NONEQUAL
35019: OR
35020: IFFALSE 35049
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
35022: LD_ADDR_EXP 120
35026: PUSH
35027: LD_EXP 120
35031: PPUSH
35032: LD_VAR 0 8
35036: PPUSH
35037: LD_INT 0
35039: PPUSH
35040: CALL_OW 1
35044: ST_TO_ADDR
// exit ;
35045: POP
35046: POP
35047: GO 35580
// end ; x := list [ i ] [ 3 ] ;
35049: LD_ADDR_VAR 0 6
35053: PUSH
35054: LD_VAR 0 3
35058: PUSH
35059: LD_VAR 0 1
35063: ARRAY
35064: PUSH
35065: LD_INT 3
35067: ARRAY
35068: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
35069: LD_ADDR_VAR 0 7
35073: PUSH
35074: LD_VAR 0 3
35078: PUSH
35079: LD_VAR 0 1
35083: ARRAY
35084: PUSH
35085: LD_INT 4
35087: ARRAY
35088: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
35089: LD_ADDR_VAR 0 9
35093: PUSH
35094: LD_VAR 0 6
35098: PPUSH
35099: LD_VAR 0 7
35103: PPUSH
35104: LD_INT 16
35106: PPUSH
35107: CALL 80359 0 3
35111: ST_TO_ADDR
// if not cratesNearbyPoint then
35112: LD_VAR 0 9
35116: NOT
35117: IFFALSE 35123
// exit ;
35119: POP
35120: POP
35121: GO 35580
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35123: LD_ADDR_VAR 0 4
35127: PUSH
35128: LD_INT 22
35130: PUSH
35131: LD_VAR 0 5
35135: PUSH
35136: EMPTY
35137: LIST
35138: LIST
35139: PUSH
35140: LD_INT 3
35142: PUSH
35143: LD_INT 60
35145: PUSH
35146: EMPTY
35147: LIST
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: PUSH
35153: LD_INT 91
35155: PUSH
35156: LD_VAR 0 8
35160: PUSH
35161: LD_INT 6
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: LIST
35168: PUSH
35169: LD_INT 2
35171: PUSH
35172: LD_INT 25
35174: PUSH
35175: LD_INT 2
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: PUSH
35182: LD_INT 25
35184: PUSH
35185: LD_INT 16
35187: PUSH
35188: EMPTY
35189: LIST
35190: LIST
35191: PUSH
35192: EMPTY
35193: LIST
35194: LIST
35195: LIST
35196: PUSH
35197: EMPTY
35198: LIST
35199: LIST
35200: LIST
35201: LIST
35202: PPUSH
35203: CALL_OW 69
35207: PUSH
35208: LD_VAR 0 8
35212: PPUSH
35213: CALL_OW 313
35217: PPUSH
35218: LD_INT 3
35220: PUSH
35221: LD_INT 60
35223: PUSH
35224: EMPTY
35225: LIST
35226: PUSH
35227: EMPTY
35228: LIST
35229: LIST
35230: PUSH
35231: LD_INT 2
35233: PUSH
35234: LD_INT 25
35236: PUSH
35237: LD_INT 2
35239: PUSH
35240: EMPTY
35241: LIST
35242: LIST
35243: PUSH
35244: LD_INT 25
35246: PUSH
35247: LD_INT 16
35249: PUSH
35250: EMPTY
35251: LIST
35252: LIST
35253: PUSH
35254: EMPTY
35255: LIST
35256: LIST
35257: LIST
35258: PUSH
35259: EMPTY
35260: LIST
35261: LIST
35262: PPUSH
35263: CALL_OW 72
35267: UNION
35268: ST_TO_ADDR
// if tmp then
35269: LD_VAR 0 4
35273: IFFALSE 35353
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35275: LD_ADDR_VAR 0 4
35279: PUSH
35280: LD_VAR 0 4
35284: PPUSH
35285: LD_INT 3
35287: PPUSH
35288: CALL 78328 0 2
35292: ST_TO_ADDR
// for j in tmp do
35293: LD_ADDR_VAR 0 2
35297: PUSH
35298: LD_VAR 0 4
35302: PUSH
35303: FOR_IN
35304: IFFALSE 35347
// begin if IsInUnit ( j ) then
35306: LD_VAR 0 2
35310: PPUSH
35311: CALL_OW 310
35315: IFFALSE 35326
// ComExit ( j ) ;
35317: LD_VAR 0 2
35321: PPUSH
35322: CALL 78411 0 1
// AddComCollect ( j , x , y ) ;
35326: LD_VAR 0 2
35330: PPUSH
35331: LD_VAR 0 6
35335: PPUSH
35336: LD_VAR 0 7
35340: PPUSH
35341: CALL_OW 177
// end ;
35345: GO 35303
35347: POP
35348: POP
// exit ;
35349: POP
35350: POP
35351: GO 35580
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35353: LD_ADDR_VAR 0 4
35357: PUSH
35358: LD_INT 22
35360: PUSH
35361: LD_VAR 0 5
35365: PUSH
35366: EMPTY
35367: LIST
35368: LIST
35369: PUSH
35370: LD_INT 91
35372: PUSH
35373: LD_VAR 0 8
35377: PUSH
35378: LD_INT 8
35380: PUSH
35381: EMPTY
35382: LIST
35383: LIST
35384: LIST
35385: PUSH
35386: LD_INT 2
35388: PUSH
35389: LD_INT 34
35391: PUSH
35392: LD_INT 12
35394: PUSH
35395: EMPTY
35396: LIST
35397: LIST
35398: PUSH
35399: LD_INT 34
35401: PUSH
35402: LD_INT 51
35404: PUSH
35405: EMPTY
35406: LIST
35407: LIST
35408: PUSH
35409: LD_INT 34
35411: PUSH
35412: LD_INT 32
35414: PUSH
35415: EMPTY
35416: LIST
35417: LIST
35418: PUSH
35419: LD_INT 34
35421: PUSH
35422: LD_INT 89
35424: PUSH
35425: EMPTY
35426: LIST
35427: LIST
35428: PUSH
35429: EMPTY
35430: LIST
35431: LIST
35432: LIST
35433: LIST
35434: LIST
35435: PUSH
35436: EMPTY
35437: LIST
35438: LIST
35439: LIST
35440: PPUSH
35441: CALL_OW 69
35445: ST_TO_ADDR
// if tmp then
35446: LD_VAR 0 4
35450: IFFALSE 35576
// begin for j in tmp do
35452: LD_ADDR_VAR 0 2
35456: PUSH
35457: LD_VAR 0 4
35461: PUSH
35462: FOR_IN
35463: IFFALSE 35574
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35465: LD_VAR 0 2
35469: PPUSH
35470: CALL_OW 262
35474: PUSH
35475: LD_INT 3
35477: EQUAL
35478: PUSH
35479: LD_VAR 0 2
35483: PPUSH
35484: CALL_OW 261
35488: PUSH
35489: LD_INT 20
35491: GREATER
35492: OR
35493: PUSH
35494: LD_VAR 0 2
35498: PPUSH
35499: CALL_OW 314
35503: NOT
35504: AND
35505: PUSH
35506: LD_VAR 0 2
35510: PPUSH
35511: CALL_OW 263
35515: PUSH
35516: LD_INT 1
35518: NONEQUAL
35519: PUSH
35520: LD_VAR 0 2
35524: PPUSH
35525: CALL_OW 311
35529: OR
35530: AND
35531: IFFALSE 35572
// begin ComCollect ( j , x , y ) ;
35533: LD_VAR 0 2
35537: PPUSH
35538: LD_VAR 0 6
35542: PPUSH
35543: LD_VAR 0 7
35547: PPUSH
35548: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35552: LD_VAR 0 2
35556: PPUSH
35557: LD_VAR 0 8
35561: PPUSH
35562: CALL_OW 172
// exit ;
35566: POP
35567: POP
35568: POP
35569: POP
35570: GO 35580
// end ;
35572: GO 35462
35574: POP
35575: POP
// end ; end ;
35576: GO 34951
35578: POP
35579: POP
// end ; end_of_file
35580: PPOPN 9
35582: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
35583: LD_INT 0
35585: PPUSH
35586: PPUSH
35587: PPUSH
35588: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
35589: LD_VAR 0 1
35593: PPUSH
35594: CALL_OW 264
35598: PUSH
35599: LD_INT 91
35601: EQUAL
35602: IFFALSE 35674
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
35604: LD_INT 68
35606: PPUSH
35607: LD_VAR 0 1
35611: PPUSH
35612: CALL_OW 255
35616: PPUSH
35617: CALL_OW 321
35621: PUSH
35622: LD_INT 2
35624: EQUAL
35625: IFFALSE 35637
// eff := 70 else
35627: LD_ADDR_VAR 0 4
35631: PUSH
35632: LD_INT 70
35634: ST_TO_ADDR
35635: GO 35645
// eff := 30 ;
35637: LD_ADDR_VAR 0 4
35641: PUSH
35642: LD_INT 30
35644: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35645: LD_VAR 0 1
35649: PPUSH
35650: CALL_OW 250
35654: PPUSH
35655: LD_VAR 0 1
35659: PPUSH
35660: CALL_OW 251
35664: PPUSH
35665: LD_VAR 0 4
35669: PPUSH
35670: CALL_OW 495
// end ; end ;
35674: LD_VAR 0 2
35678: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35679: LD_INT 0
35681: PPUSH
// end ;
35682: LD_VAR 0 4
35686: RET
// export function SOS_Command ( cmd ) ; begin
35687: LD_INT 0
35689: PPUSH
// end ;
35690: LD_VAR 0 2
35694: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35695: LD_INT 0
35697: PPUSH
// end ;
35698: LD_VAR 0 6
35702: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
35703: LD_INT 0
35705: PPUSH
35706: PPUSH
// if not vehicle or not factory then
35707: LD_VAR 0 1
35711: NOT
35712: PUSH
35713: LD_VAR 0 2
35717: NOT
35718: OR
35719: IFFALSE 35723
// exit ;
35721: GO 35954
// if factoryWaypoints >= factory then
35723: LD_EXP 119
35727: PUSH
35728: LD_VAR 0 2
35732: GREATEREQUAL
35733: IFFALSE 35954
// if factoryWaypoints [ factory ] then
35735: LD_EXP 119
35739: PUSH
35740: LD_VAR 0 2
35744: ARRAY
35745: IFFALSE 35954
// begin if GetControl ( vehicle ) = control_manual then
35747: LD_VAR 0 1
35751: PPUSH
35752: CALL_OW 263
35756: PUSH
35757: LD_INT 1
35759: EQUAL
35760: IFFALSE 35841
// begin driver := IsDrivenBy ( vehicle ) ;
35762: LD_ADDR_VAR 0 4
35766: PUSH
35767: LD_VAR 0 1
35771: PPUSH
35772: CALL_OW 311
35776: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35777: LD_VAR 0 4
35781: PPUSH
35782: LD_EXP 119
35786: PUSH
35787: LD_VAR 0 2
35791: ARRAY
35792: PUSH
35793: LD_INT 3
35795: ARRAY
35796: PPUSH
35797: LD_EXP 119
35801: PUSH
35802: LD_VAR 0 2
35806: ARRAY
35807: PUSH
35808: LD_INT 4
35810: ARRAY
35811: PPUSH
35812: CALL_OW 171
// AddComExitVehicle ( driver ) ;
35816: LD_VAR 0 4
35820: PPUSH
35821: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
35825: LD_VAR 0 4
35829: PPUSH
35830: LD_VAR 0 2
35834: PPUSH
35835: CALL_OW 180
// end else
35839: GO 35954
// if GetControl ( vehicle ) = control_remote then
35841: LD_VAR 0 1
35845: PPUSH
35846: CALL_OW 263
35850: PUSH
35851: LD_INT 2
35853: EQUAL
35854: IFFALSE 35915
// begin wait ( 0 0$2 ) ;
35856: LD_INT 70
35858: PPUSH
35859: CALL_OW 67
// if Connect ( vehicle ) then
35863: LD_VAR 0 1
35867: PPUSH
35868: CALL 48619 0 1
35872: IFFALSE 35913
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35874: LD_VAR 0 1
35878: PPUSH
35879: LD_EXP 119
35883: PUSH
35884: LD_VAR 0 2
35888: ARRAY
35889: PUSH
35890: LD_INT 3
35892: ARRAY
35893: PPUSH
35894: LD_EXP 119
35898: PUSH
35899: LD_VAR 0 2
35903: ARRAY
35904: PUSH
35905: LD_INT 4
35907: ARRAY
35908: PPUSH
35909: CALL_OW 171
// end else
35913: GO 35954
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35915: LD_VAR 0 1
35919: PPUSH
35920: LD_EXP 119
35924: PUSH
35925: LD_VAR 0 2
35929: ARRAY
35930: PUSH
35931: LD_INT 3
35933: ARRAY
35934: PPUSH
35935: LD_EXP 119
35939: PUSH
35940: LD_VAR 0 2
35944: ARRAY
35945: PUSH
35946: LD_INT 4
35948: ARRAY
35949: PPUSH
35950: CALL_OW 171
// end ; end ;
35954: LD_VAR 0 3
35958: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
35959: LD_INT 0
35961: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
35962: LD_VAR 0 1
35966: PUSH
35967: LD_INT 250
35969: EQUAL
35970: PUSH
35971: LD_VAR 0 2
35975: PPUSH
35976: CALL_OW 264
35980: PUSH
35981: LD_INT 81
35983: EQUAL
35984: AND
35985: IFFALSE 36006
// MinerPlaceMine ( unit , x , y ) ;
35987: LD_VAR 0 2
35991: PPUSH
35992: LD_VAR 0 4
35996: PPUSH
35997: LD_VAR 0 5
36001: PPUSH
36002: CALL 38830 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
36006: LD_VAR 0 1
36010: PUSH
36011: LD_INT 251
36013: EQUAL
36014: PUSH
36015: LD_VAR 0 2
36019: PPUSH
36020: CALL_OW 264
36024: PUSH
36025: LD_INT 81
36027: EQUAL
36028: AND
36029: IFFALSE 36050
// MinerDetonateMine ( unit , x , y ) ;
36031: LD_VAR 0 2
36035: PPUSH
36036: LD_VAR 0 4
36040: PPUSH
36041: LD_VAR 0 5
36045: PPUSH
36046: CALL 39105 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
36050: LD_VAR 0 1
36054: PUSH
36055: LD_INT 252
36057: EQUAL
36058: PUSH
36059: LD_VAR 0 2
36063: PPUSH
36064: CALL_OW 264
36068: PUSH
36069: LD_INT 81
36071: EQUAL
36072: AND
36073: IFFALSE 36094
// MinerCreateMinefield ( unit , x , y ) ;
36075: LD_VAR 0 2
36079: PPUSH
36080: LD_VAR 0 4
36084: PPUSH
36085: LD_VAR 0 5
36089: PPUSH
36090: CALL 39522 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
36094: LD_VAR 0 1
36098: PUSH
36099: LD_INT 253
36101: EQUAL
36102: PUSH
36103: LD_VAR 0 2
36107: PPUSH
36108: CALL_OW 257
36112: PUSH
36113: LD_INT 5
36115: EQUAL
36116: AND
36117: IFFALSE 36138
// ComBinocular ( unit , x , y ) ;
36119: LD_VAR 0 2
36123: PPUSH
36124: LD_VAR 0 4
36128: PPUSH
36129: LD_VAR 0 5
36133: PPUSH
36134: CALL 39891 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36138: LD_VAR 0 1
36142: PUSH
36143: LD_INT 254
36145: EQUAL
36146: PUSH
36147: LD_VAR 0 2
36151: PPUSH
36152: CALL_OW 264
36156: PUSH
36157: LD_INT 99
36159: EQUAL
36160: AND
36161: PUSH
36162: LD_VAR 0 3
36166: PPUSH
36167: CALL_OW 263
36171: PUSH
36172: LD_INT 3
36174: EQUAL
36175: AND
36176: IFFALSE 36192
// HackDestroyVehicle ( unit , selectedUnit ) ;
36178: LD_VAR 0 2
36182: PPUSH
36183: LD_VAR 0 3
36187: PPUSH
36188: CALL 38194 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36192: LD_VAR 0 1
36196: PUSH
36197: LD_INT 255
36199: EQUAL
36200: PUSH
36201: LD_VAR 0 2
36205: PPUSH
36206: CALL_OW 264
36210: PUSH
36211: LD_INT 14
36213: PUSH
36214: LD_INT 53
36216: PUSH
36217: EMPTY
36218: LIST
36219: LIST
36220: IN
36221: AND
36222: PUSH
36223: LD_VAR 0 4
36227: PPUSH
36228: LD_VAR 0 5
36232: PPUSH
36233: CALL_OW 488
36237: AND
36238: IFFALSE 36262
// CutTreeXYR ( unit , x , y , 12 ) ;
36240: LD_VAR 0 2
36244: PPUSH
36245: LD_VAR 0 4
36249: PPUSH
36250: LD_VAR 0 5
36254: PPUSH
36255: LD_INT 12
36257: PPUSH
36258: CALL 36357 0 4
// if cmd = 256 then
36262: LD_VAR 0 1
36266: PUSH
36267: LD_INT 256
36269: EQUAL
36270: IFFALSE 36291
// SetFactoryWaypoint ( unit , x , y ) ;
36272: LD_VAR 0 2
36276: PPUSH
36277: LD_VAR 0 4
36281: PPUSH
36282: LD_VAR 0 5
36286: PPUSH
36287: CALL 34272 0 3
// if cmd = 257 then
36291: LD_VAR 0 1
36295: PUSH
36296: LD_INT 257
36298: EQUAL
36299: IFFALSE 36320
// SetWarehouseGatheringPoint ( unit , x , y ) ;
36301: LD_VAR 0 2
36305: PPUSH
36306: LD_VAR 0 4
36310: PPUSH
36311: LD_VAR 0 5
36315: PPUSH
36316: CALL 34634 0 3
// if cmd = 258 then
36320: LD_VAR 0 1
36324: PUSH
36325: LD_INT 258
36327: EQUAL
36328: IFFALSE 36352
// BurnTreeXYR ( unit , x , y , 8 ) ;
36330: LD_VAR 0 2
36334: PPUSH
36335: LD_VAR 0 4
36339: PPUSH
36340: LD_VAR 0 5
36344: PPUSH
36345: LD_INT 8
36347: PPUSH
36348: CALL 36751 0 4
// end ;
36352: LD_VAR 0 6
36356: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36357: LD_INT 0
36359: PPUSH
36360: PPUSH
36361: PPUSH
36362: PPUSH
36363: PPUSH
36364: PPUSH
36365: PPUSH
36366: PPUSH
36367: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
36368: LD_VAR 0 1
36372: PPUSH
36373: CALL_OW 302
36377: NOT
36378: PUSH
36379: LD_VAR 0 2
36383: PPUSH
36384: LD_VAR 0 3
36388: PPUSH
36389: CALL_OW 488
36393: NOT
36394: OR
36395: PUSH
36396: LD_VAR 0 4
36400: NOT
36401: OR
36402: IFFALSE 36406
// exit ;
36404: GO 36746
// list := [ ] ;
36406: LD_ADDR_VAR 0 13
36410: PUSH
36411: EMPTY
36412: ST_TO_ADDR
// if x - r < 0 then
36413: LD_VAR 0 2
36417: PUSH
36418: LD_VAR 0 4
36422: MINUS
36423: PUSH
36424: LD_INT 0
36426: LESS
36427: IFFALSE 36439
// min_x := 0 else
36429: LD_ADDR_VAR 0 7
36433: PUSH
36434: LD_INT 0
36436: ST_TO_ADDR
36437: GO 36455
// min_x := x - r ;
36439: LD_ADDR_VAR 0 7
36443: PUSH
36444: LD_VAR 0 2
36448: PUSH
36449: LD_VAR 0 4
36453: MINUS
36454: ST_TO_ADDR
// if y - r < 0 then
36455: LD_VAR 0 3
36459: PUSH
36460: LD_VAR 0 4
36464: MINUS
36465: PUSH
36466: LD_INT 0
36468: LESS
36469: IFFALSE 36481
// min_y := 0 else
36471: LD_ADDR_VAR 0 8
36475: PUSH
36476: LD_INT 0
36478: ST_TO_ADDR
36479: GO 36497
// min_y := y - r ;
36481: LD_ADDR_VAR 0 8
36485: PUSH
36486: LD_VAR 0 3
36490: PUSH
36491: LD_VAR 0 4
36495: MINUS
36496: ST_TO_ADDR
// max_x := x + r ;
36497: LD_ADDR_VAR 0 9
36501: PUSH
36502: LD_VAR 0 2
36506: PUSH
36507: LD_VAR 0 4
36511: PLUS
36512: ST_TO_ADDR
// max_y := y + r ;
36513: LD_ADDR_VAR 0 10
36517: PUSH
36518: LD_VAR 0 3
36522: PUSH
36523: LD_VAR 0 4
36527: PLUS
36528: ST_TO_ADDR
// for _x = min_x to max_x do
36529: LD_ADDR_VAR 0 11
36533: PUSH
36534: DOUBLE
36535: LD_VAR 0 7
36539: DEC
36540: ST_TO_ADDR
36541: LD_VAR 0 9
36545: PUSH
36546: FOR_TO
36547: IFFALSE 36664
// for _y = min_y to max_y do
36549: LD_ADDR_VAR 0 12
36553: PUSH
36554: DOUBLE
36555: LD_VAR 0 8
36559: DEC
36560: ST_TO_ADDR
36561: LD_VAR 0 10
36565: PUSH
36566: FOR_TO
36567: IFFALSE 36660
// begin if not ValidHex ( _x , _y ) then
36569: LD_VAR 0 11
36573: PPUSH
36574: LD_VAR 0 12
36578: PPUSH
36579: CALL_OW 488
36583: NOT
36584: IFFALSE 36588
// continue ;
36586: GO 36566
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36588: LD_VAR 0 11
36592: PPUSH
36593: LD_VAR 0 12
36597: PPUSH
36598: CALL_OW 351
36602: PUSH
36603: LD_VAR 0 11
36607: PPUSH
36608: LD_VAR 0 12
36612: PPUSH
36613: CALL_OW 554
36617: AND
36618: IFFALSE 36658
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36620: LD_ADDR_VAR 0 13
36624: PUSH
36625: LD_VAR 0 13
36629: PPUSH
36630: LD_VAR 0 13
36634: PUSH
36635: LD_INT 1
36637: PLUS
36638: PPUSH
36639: LD_VAR 0 11
36643: PUSH
36644: LD_VAR 0 12
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: PPUSH
36653: CALL_OW 2
36657: ST_TO_ADDR
// end ;
36658: GO 36566
36660: POP
36661: POP
36662: GO 36546
36664: POP
36665: POP
// if not list then
36666: LD_VAR 0 13
36670: NOT
36671: IFFALSE 36675
// exit ;
36673: GO 36746
// for i in list do
36675: LD_ADDR_VAR 0 6
36679: PUSH
36680: LD_VAR 0 13
36684: PUSH
36685: FOR_IN
36686: IFFALSE 36744
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
36688: LD_VAR 0 1
36692: PPUSH
36693: LD_STRING M
36695: PUSH
36696: LD_VAR 0 6
36700: PUSH
36701: LD_INT 1
36703: ARRAY
36704: PUSH
36705: LD_VAR 0 6
36709: PUSH
36710: LD_INT 2
36712: ARRAY
36713: PUSH
36714: LD_INT 0
36716: PUSH
36717: LD_INT 0
36719: PUSH
36720: LD_INT 0
36722: PUSH
36723: LD_INT 0
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: LIST
36730: LIST
36731: LIST
36732: LIST
36733: LIST
36734: PUSH
36735: EMPTY
36736: LIST
36737: PPUSH
36738: CALL_OW 447
36742: GO 36685
36744: POP
36745: POP
// end ;
36746: LD_VAR 0 5
36750: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36751: LD_INT 0
36753: PPUSH
36754: PPUSH
36755: PPUSH
36756: PPUSH
36757: PPUSH
36758: PPUSH
36759: PPUSH
36760: PPUSH
36761: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
36762: LD_VAR 0 1
36766: PPUSH
36767: CALL_OW 302
36771: NOT
36772: PUSH
36773: LD_VAR 0 2
36777: PPUSH
36778: LD_VAR 0 3
36782: PPUSH
36783: CALL_OW 488
36787: NOT
36788: OR
36789: PUSH
36790: LD_VAR 0 4
36794: NOT
36795: OR
36796: IFFALSE 36800
// exit ;
36798: GO 37148
// list := [ ] ;
36800: LD_ADDR_VAR 0 13
36804: PUSH
36805: EMPTY
36806: ST_TO_ADDR
// if x - r < 0 then
36807: LD_VAR 0 2
36811: PUSH
36812: LD_VAR 0 4
36816: MINUS
36817: PUSH
36818: LD_INT 0
36820: LESS
36821: IFFALSE 36833
// min_x := 0 else
36823: LD_ADDR_VAR 0 7
36827: PUSH
36828: LD_INT 0
36830: ST_TO_ADDR
36831: GO 36849
// min_x := x - r ;
36833: LD_ADDR_VAR 0 7
36837: PUSH
36838: LD_VAR 0 2
36842: PUSH
36843: LD_VAR 0 4
36847: MINUS
36848: ST_TO_ADDR
// if y - r < 0 then
36849: LD_VAR 0 3
36853: PUSH
36854: LD_VAR 0 4
36858: MINUS
36859: PUSH
36860: LD_INT 0
36862: LESS
36863: IFFALSE 36875
// min_y := 0 else
36865: LD_ADDR_VAR 0 8
36869: PUSH
36870: LD_INT 0
36872: ST_TO_ADDR
36873: GO 36891
// min_y := y - r ;
36875: LD_ADDR_VAR 0 8
36879: PUSH
36880: LD_VAR 0 3
36884: PUSH
36885: LD_VAR 0 4
36889: MINUS
36890: ST_TO_ADDR
// max_x := x + r ;
36891: LD_ADDR_VAR 0 9
36895: PUSH
36896: LD_VAR 0 2
36900: PUSH
36901: LD_VAR 0 4
36905: PLUS
36906: ST_TO_ADDR
// max_y := y + r ;
36907: LD_ADDR_VAR 0 10
36911: PUSH
36912: LD_VAR 0 3
36916: PUSH
36917: LD_VAR 0 4
36921: PLUS
36922: ST_TO_ADDR
// for _x = min_x to max_x do
36923: LD_ADDR_VAR 0 11
36927: PUSH
36928: DOUBLE
36929: LD_VAR 0 7
36933: DEC
36934: ST_TO_ADDR
36935: LD_VAR 0 9
36939: PUSH
36940: FOR_TO
36941: IFFALSE 37058
// for _y = min_y to max_y do
36943: LD_ADDR_VAR 0 12
36947: PUSH
36948: DOUBLE
36949: LD_VAR 0 8
36953: DEC
36954: ST_TO_ADDR
36955: LD_VAR 0 10
36959: PUSH
36960: FOR_TO
36961: IFFALSE 37054
// begin if not ValidHex ( _x , _y ) then
36963: LD_VAR 0 11
36967: PPUSH
36968: LD_VAR 0 12
36972: PPUSH
36973: CALL_OW 488
36977: NOT
36978: IFFALSE 36982
// continue ;
36980: GO 36960
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36982: LD_VAR 0 11
36986: PPUSH
36987: LD_VAR 0 12
36991: PPUSH
36992: CALL_OW 351
36996: PUSH
36997: LD_VAR 0 11
37001: PPUSH
37002: LD_VAR 0 12
37006: PPUSH
37007: CALL_OW 554
37011: AND
37012: IFFALSE 37052
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37014: LD_ADDR_VAR 0 13
37018: PUSH
37019: LD_VAR 0 13
37023: PPUSH
37024: LD_VAR 0 13
37028: PUSH
37029: LD_INT 1
37031: PLUS
37032: PPUSH
37033: LD_VAR 0 11
37037: PUSH
37038: LD_VAR 0 12
37042: PUSH
37043: EMPTY
37044: LIST
37045: LIST
37046: PPUSH
37047: CALL_OW 2
37051: ST_TO_ADDR
// end ;
37052: GO 36960
37054: POP
37055: POP
37056: GO 36940
37058: POP
37059: POP
// if not list then
37060: LD_VAR 0 13
37064: NOT
37065: IFFALSE 37069
// exit ;
37067: GO 37148
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
37069: LD_ADDR_VAR 0 13
37073: PUSH
37074: LD_VAR 0 1
37078: PPUSH
37079: LD_VAR 0 13
37083: PPUSH
37084: LD_INT 1
37086: PPUSH
37087: LD_INT 1
37089: PPUSH
37090: CALL 45761 0 4
37094: ST_TO_ADDR
// ComStop ( flame ) ;
37095: LD_VAR 0 1
37099: PPUSH
37100: CALL_OW 141
// for i in list do
37104: LD_ADDR_VAR 0 6
37108: PUSH
37109: LD_VAR 0 13
37113: PUSH
37114: FOR_IN
37115: IFFALSE 37146
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
37117: LD_VAR 0 1
37121: PPUSH
37122: LD_VAR 0 6
37126: PUSH
37127: LD_INT 1
37129: ARRAY
37130: PPUSH
37131: LD_VAR 0 6
37135: PUSH
37136: LD_INT 2
37138: ARRAY
37139: PPUSH
37140: CALL_OW 176
37144: GO 37114
37146: POP
37147: POP
// end ;
37148: LD_VAR 0 5
37152: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
37153: LD_EXP 122
37157: NOT
37158: IFFALSE 37208
37160: GO 37162
37162: DISABLE
// begin initHack := true ;
37163: LD_ADDR_EXP 122
37167: PUSH
37168: LD_INT 1
37170: ST_TO_ADDR
// hackTanks := [ ] ;
37171: LD_ADDR_EXP 123
37175: PUSH
37176: EMPTY
37177: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
37178: LD_ADDR_EXP 124
37182: PUSH
37183: EMPTY
37184: ST_TO_ADDR
// hackLimit := 3 ;
37185: LD_ADDR_EXP 125
37189: PUSH
37190: LD_INT 3
37192: ST_TO_ADDR
// hackDist := 12 ;
37193: LD_ADDR_EXP 126
37197: PUSH
37198: LD_INT 12
37200: ST_TO_ADDR
// hackCounter := [ ] ;
37201: LD_ADDR_EXP 127
37205: PUSH
37206: EMPTY
37207: ST_TO_ADDR
// end ;
37208: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
37209: LD_EXP 122
37213: PUSH
37214: LD_INT 34
37216: PUSH
37217: LD_INT 99
37219: PUSH
37220: EMPTY
37221: LIST
37222: LIST
37223: PPUSH
37224: CALL_OW 69
37228: AND
37229: IFFALSE 37482
37231: GO 37233
37233: DISABLE
37234: LD_INT 0
37236: PPUSH
37237: PPUSH
// begin enable ;
37238: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
37239: LD_ADDR_VAR 0 1
37243: PUSH
37244: LD_INT 34
37246: PUSH
37247: LD_INT 99
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: PPUSH
37254: CALL_OW 69
37258: PUSH
37259: FOR_IN
37260: IFFALSE 37480
// begin if not i in hackTanks then
37262: LD_VAR 0 1
37266: PUSH
37267: LD_EXP 123
37271: IN
37272: NOT
37273: IFFALSE 37356
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
37275: LD_ADDR_EXP 123
37279: PUSH
37280: LD_EXP 123
37284: PPUSH
37285: LD_EXP 123
37289: PUSH
37290: LD_INT 1
37292: PLUS
37293: PPUSH
37294: LD_VAR 0 1
37298: PPUSH
37299: CALL_OW 1
37303: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
37304: LD_ADDR_EXP 124
37308: PUSH
37309: LD_EXP 124
37313: PPUSH
37314: LD_EXP 124
37318: PUSH
37319: LD_INT 1
37321: PLUS
37322: PPUSH
37323: EMPTY
37324: PPUSH
37325: CALL_OW 1
37329: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
37330: LD_ADDR_EXP 127
37334: PUSH
37335: LD_EXP 127
37339: PPUSH
37340: LD_EXP 127
37344: PUSH
37345: LD_INT 1
37347: PLUS
37348: PPUSH
37349: EMPTY
37350: PPUSH
37351: CALL_OW 1
37355: ST_TO_ADDR
// end ; if not IsOk ( i ) then
37356: LD_VAR 0 1
37360: PPUSH
37361: CALL_OW 302
37365: NOT
37366: IFFALSE 37379
// begin HackUnlinkAll ( i ) ;
37368: LD_VAR 0 1
37372: PPUSH
37373: CALL 37485 0 1
// continue ;
37377: GO 37259
// end ; HackCheckCapturedStatus ( i ) ;
37379: LD_VAR 0 1
37383: PPUSH
37384: CALL 37928 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
37388: LD_ADDR_VAR 0 2
37392: PUSH
37393: LD_INT 81
37395: PUSH
37396: LD_VAR 0 1
37400: PPUSH
37401: CALL_OW 255
37405: PUSH
37406: EMPTY
37407: LIST
37408: LIST
37409: PUSH
37410: LD_INT 33
37412: PUSH
37413: LD_INT 3
37415: PUSH
37416: EMPTY
37417: LIST
37418: LIST
37419: PUSH
37420: LD_INT 91
37422: PUSH
37423: LD_VAR 0 1
37427: PUSH
37428: LD_EXP 126
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: LIST
37437: PUSH
37438: LD_INT 50
37440: PUSH
37441: EMPTY
37442: LIST
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: LIST
37448: LIST
37449: PPUSH
37450: CALL_OW 69
37454: ST_TO_ADDR
// if not tmp then
37455: LD_VAR 0 2
37459: NOT
37460: IFFALSE 37464
// continue ;
37462: GO 37259
// HackLink ( i , tmp ) ;
37464: LD_VAR 0 1
37468: PPUSH
37469: LD_VAR 0 2
37473: PPUSH
37474: CALL 37621 0 2
// end ;
37478: GO 37259
37480: POP
37481: POP
// end ;
37482: PPOPN 2
37484: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
37485: LD_INT 0
37487: PPUSH
37488: PPUSH
37489: PPUSH
// if not hack in hackTanks then
37490: LD_VAR 0 1
37494: PUSH
37495: LD_EXP 123
37499: IN
37500: NOT
37501: IFFALSE 37505
// exit ;
37503: GO 37616
// index := GetElementIndex ( hackTanks , hack ) ;
37505: LD_ADDR_VAR 0 4
37509: PUSH
37510: LD_EXP 123
37514: PPUSH
37515: LD_VAR 0 1
37519: PPUSH
37520: CALL 45058 0 2
37524: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
37525: LD_EXP 124
37529: PUSH
37530: LD_VAR 0 4
37534: ARRAY
37535: IFFALSE 37616
// begin for i in hackTanksCaptured [ index ] do
37537: LD_ADDR_VAR 0 3
37541: PUSH
37542: LD_EXP 124
37546: PUSH
37547: LD_VAR 0 4
37551: ARRAY
37552: PUSH
37553: FOR_IN
37554: IFFALSE 37580
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
37556: LD_VAR 0 3
37560: PUSH
37561: LD_INT 1
37563: ARRAY
37564: PPUSH
37565: LD_VAR 0 3
37569: PUSH
37570: LD_INT 2
37572: ARRAY
37573: PPUSH
37574: CALL_OW 235
37578: GO 37553
37580: POP
37581: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
37582: LD_ADDR_EXP 124
37586: PUSH
37587: LD_EXP 124
37591: PPUSH
37592: LD_VAR 0 4
37596: PPUSH
37597: EMPTY
37598: PPUSH
37599: CALL_OW 1
37603: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
37604: LD_VAR 0 1
37608: PPUSH
37609: LD_INT 0
37611: PPUSH
37612: CALL_OW 505
// end ; end ;
37616: LD_VAR 0 2
37620: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
37621: LD_INT 0
37623: PPUSH
37624: PPUSH
37625: PPUSH
// if not hack in hackTanks or not vehicles then
37626: LD_VAR 0 1
37630: PUSH
37631: LD_EXP 123
37635: IN
37636: NOT
37637: PUSH
37638: LD_VAR 0 2
37642: NOT
37643: OR
37644: IFFALSE 37648
// exit ;
37646: GO 37923
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
37648: LD_ADDR_VAR 0 2
37652: PUSH
37653: LD_VAR 0 1
37657: PPUSH
37658: LD_VAR 0 2
37662: PPUSH
37663: LD_INT 1
37665: PPUSH
37666: LD_INT 1
37668: PPUSH
37669: CALL 45708 0 4
37673: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
37674: LD_ADDR_VAR 0 5
37678: PUSH
37679: LD_EXP 123
37683: PPUSH
37684: LD_VAR 0 1
37688: PPUSH
37689: CALL 45058 0 2
37693: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
37694: LD_EXP 124
37698: PUSH
37699: LD_VAR 0 5
37703: ARRAY
37704: PUSH
37705: LD_EXP 125
37709: LESS
37710: IFFALSE 37899
// begin for i := 1 to vehicles do
37712: LD_ADDR_VAR 0 4
37716: PUSH
37717: DOUBLE
37718: LD_INT 1
37720: DEC
37721: ST_TO_ADDR
37722: LD_VAR 0 2
37726: PUSH
37727: FOR_TO
37728: IFFALSE 37897
// begin if hackTanksCaptured [ index ] = hackLimit then
37730: LD_EXP 124
37734: PUSH
37735: LD_VAR 0 5
37739: ARRAY
37740: PUSH
37741: LD_EXP 125
37745: EQUAL
37746: IFFALSE 37750
// break ;
37748: GO 37897
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
37750: LD_ADDR_EXP 127
37754: PUSH
37755: LD_EXP 127
37759: PPUSH
37760: LD_VAR 0 5
37764: PPUSH
37765: LD_EXP 127
37769: PUSH
37770: LD_VAR 0 5
37774: ARRAY
37775: PUSH
37776: LD_INT 1
37778: PLUS
37779: PPUSH
37780: CALL_OW 1
37784: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
37785: LD_ADDR_EXP 124
37789: PUSH
37790: LD_EXP 124
37794: PPUSH
37795: LD_VAR 0 5
37799: PUSH
37800: LD_EXP 124
37804: PUSH
37805: LD_VAR 0 5
37809: ARRAY
37810: PUSH
37811: LD_INT 1
37813: PLUS
37814: PUSH
37815: EMPTY
37816: LIST
37817: LIST
37818: PPUSH
37819: LD_VAR 0 2
37823: PUSH
37824: LD_VAR 0 4
37828: ARRAY
37829: PUSH
37830: LD_VAR 0 2
37834: PUSH
37835: LD_VAR 0 4
37839: ARRAY
37840: PPUSH
37841: CALL_OW 255
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: PPUSH
37850: CALL 45273 0 3
37854: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
37855: LD_VAR 0 2
37859: PUSH
37860: LD_VAR 0 4
37864: ARRAY
37865: PPUSH
37866: LD_VAR 0 1
37870: PPUSH
37871: CALL_OW 255
37875: PPUSH
37876: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
37880: LD_VAR 0 2
37884: PUSH
37885: LD_VAR 0 4
37889: ARRAY
37890: PPUSH
37891: CALL_OW 141
// end ;
37895: GO 37727
37897: POP
37898: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37899: LD_VAR 0 1
37903: PPUSH
37904: LD_EXP 124
37908: PUSH
37909: LD_VAR 0 5
37913: ARRAY
37914: PUSH
37915: LD_INT 0
37917: PLUS
37918: PPUSH
37919: CALL_OW 505
// end ;
37923: LD_VAR 0 3
37927: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
37928: LD_INT 0
37930: PPUSH
37931: PPUSH
37932: PPUSH
37933: PPUSH
// if not hack in hackTanks then
37934: LD_VAR 0 1
37938: PUSH
37939: LD_EXP 123
37943: IN
37944: NOT
37945: IFFALSE 37949
// exit ;
37947: GO 38189
// index := GetElementIndex ( hackTanks , hack ) ;
37949: LD_ADDR_VAR 0 4
37953: PUSH
37954: LD_EXP 123
37958: PPUSH
37959: LD_VAR 0 1
37963: PPUSH
37964: CALL 45058 0 2
37968: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
37969: LD_ADDR_VAR 0 3
37973: PUSH
37974: DOUBLE
37975: LD_EXP 124
37979: PUSH
37980: LD_VAR 0 4
37984: ARRAY
37985: INC
37986: ST_TO_ADDR
37987: LD_INT 1
37989: PUSH
37990: FOR_DOWNTO
37991: IFFALSE 38163
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
37993: LD_ADDR_VAR 0 5
37997: PUSH
37998: LD_EXP 124
38002: PUSH
38003: LD_VAR 0 4
38007: ARRAY
38008: PUSH
38009: LD_VAR 0 3
38013: ARRAY
38014: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
38015: LD_VAR 0 5
38019: PUSH
38020: LD_INT 1
38022: ARRAY
38023: PPUSH
38024: CALL_OW 302
38028: NOT
38029: PUSH
38030: LD_VAR 0 5
38034: PUSH
38035: LD_INT 1
38037: ARRAY
38038: PPUSH
38039: CALL_OW 255
38043: PUSH
38044: LD_VAR 0 1
38048: PPUSH
38049: CALL_OW 255
38053: NONEQUAL
38054: OR
38055: IFFALSE 38161
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
38057: LD_VAR 0 5
38061: PUSH
38062: LD_INT 1
38064: ARRAY
38065: PPUSH
38066: CALL_OW 305
38070: PUSH
38071: LD_VAR 0 5
38075: PUSH
38076: LD_INT 1
38078: ARRAY
38079: PPUSH
38080: CALL_OW 255
38084: PUSH
38085: LD_VAR 0 1
38089: PPUSH
38090: CALL_OW 255
38094: EQUAL
38095: AND
38096: IFFALSE 38120
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
38098: LD_VAR 0 5
38102: PUSH
38103: LD_INT 1
38105: ARRAY
38106: PPUSH
38107: LD_VAR 0 5
38111: PUSH
38112: LD_INT 2
38114: ARRAY
38115: PPUSH
38116: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
38120: LD_ADDR_EXP 124
38124: PUSH
38125: LD_EXP 124
38129: PPUSH
38130: LD_VAR 0 4
38134: PPUSH
38135: LD_EXP 124
38139: PUSH
38140: LD_VAR 0 4
38144: ARRAY
38145: PPUSH
38146: LD_VAR 0 3
38150: PPUSH
38151: CALL_OW 3
38155: PPUSH
38156: CALL_OW 1
38160: ST_TO_ADDR
// end ; end ;
38161: GO 37990
38163: POP
38164: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38165: LD_VAR 0 1
38169: PPUSH
38170: LD_EXP 124
38174: PUSH
38175: LD_VAR 0 4
38179: ARRAY
38180: PUSH
38181: LD_INT 0
38183: PLUS
38184: PPUSH
38185: CALL_OW 505
// end ;
38189: LD_VAR 0 2
38193: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
38194: LD_INT 0
38196: PPUSH
38197: PPUSH
38198: PPUSH
38199: PPUSH
// if not hack in hackTanks then
38200: LD_VAR 0 1
38204: PUSH
38205: LD_EXP 123
38209: IN
38210: NOT
38211: IFFALSE 38215
// exit ;
38213: GO 38300
// index := GetElementIndex ( hackTanks , hack ) ;
38215: LD_ADDR_VAR 0 5
38219: PUSH
38220: LD_EXP 123
38224: PPUSH
38225: LD_VAR 0 1
38229: PPUSH
38230: CALL 45058 0 2
38234: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
38235: LD_ADDR_VAR 0 4
38239: PUSH
38240: DOUBLE
38241: LD_INT 1
38243: DEC
38244: ST_TO_ADDR
38245: LD_EXP 124
38249: PUSH
38250: LD_VAR 0 5
38254: ARRAY
38255: PUSH
38256: FOR_TO
38257: IFFALSE 38298
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
38259: LD_EXP 124
38263: PUSH
38264: LD_VAR 0 5
38268: ARRAY
38269: PUSH
38270: LD_VAR 0 4
38274: ARRAY
38275: PUSH
38276: LD_INT 1
38278: ARRAY
38279: PUSH
38280: LD_VAR 0 2
38284: EQUAL
38285: IFFALSE 38296
// KillUnit ( vehicle ) ;
38287: LD_VAR 0 2
38291: PPUSH
38292: CALL_OW 66
38296: GO 38256
38298: POP
38299: POP
// end ;
38300: LD_VAR 0 3
38304: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
38305: LD_EXP 128
38309: NOT
38310: IFFALSE 38345
38312: GO 38314
38314: DISABLE
// begin initMiner := true ;
38315: LD_ADDR_EXP 128
38319: PUSH
38320: LD_INT 1
38322: ST_TO_ADDR
// minersList := [ ] ;
38323: LD_ADDR_EXP 129
38327: PUSH
38328: EMPTY
38329: ST_TO_ADDR
// minerMinesList := [ ] ;
38330: LD_ADDR_EXP 130
38334: PUSH
38335: EMPTY
38336: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
38337: LD_ADDR_EXP 131
38341: PUSH
38342: LD_INT 5
38344: ST_TO_ADDR
// end ;
38345: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
38346: LD_EXP 128
38350: PUSH
38351: LD_INT 34
38353: PUSH
38354: LD_INT 81
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: PPUSH
38361: CALL_OW 69
38365: AND
38366: IFFALSE 38827
38368: GO 38370
38370: DISABLE
38371: LD_INT 0
38373: PPUSH
38374: PPUSH
38375: PPUSH
38376: PPUSH
// begin enable ;
38377: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
38378: LD_ADDR_VAR 0 1
38382: PUSH
38383: LD_INT 34
38385: PUSH
38386: LD_INT 81
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: PPUSH
38393: CALL_OW 69
38397: PUSH
38398: FOR_IN
38399: IFFALSE 38471
// begin if not i in minersList then
38401: LD_VAR 0 1
38405: PUSH
38406: LD_EXP 129
38410: IN
38411: NOT
38412: IFFALSE 38469
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
38414: LD_ADDR_EXP 129
38418: PUSH
38419: LD_EXP 129
38423: PPUSH
38424: LD_EXP 129
38428: PUSH
38429: LD_INT 1
38431: PLUS
38432: PPUSH
38433: LD_VAR 0 1
38437: PPUSH
38438: CALL_OW 1
38442: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
38443: LD_ADDR_EXP 130
38447: PUSH
38448: LD_EXP 130
38452: PPUSH
38453: LD_EXP 130
38457: PUSH
38458: LD_INT 1
38460: PLUS
38461: PPUSH
38462: EMPTY
38463: PPUSH
38464: CALL_OW 1
38468: ST_TO_ADDR
// end end ;
38469: GO 38398
38471: POP
38472: POP
// for i := minerMinesList downto 1 do
38473: LD_ADDR_VAR 0 1
38477: PUSH
38478: DOUBLE
38479: LD_EXP 130
38483: INC
38484: ST_TO_ADDR
38485: LD_INT 1
38487: PUSH
38488: FOR_DOWNTO
38489: IFFALSE 38825
// begin if IsLive ( minersList [ i ] ) then
38491: LD_EXP 129
38495: PUSH
38496: LD_VAR 0 1
38500: ARRAY
38501: PPUSH
38502: CALL_OW 300
38506: IFFALSE 38534
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
38508: LD_EXP 129
38512: PUSH
38513: LD_VAR 0 1
38517: ARRAY
38518: PPUSH
38519: LD_EXP 130
38523: PUSH
38524: LD_VAR 0 1
38528: ARRAY
38529: PPUSH
38530: CALL_OW 505
// if not minerMinesList [ i ] then
38534: LD_EXP 130
38538: PUSH
38539: LD_VAR 0 1
38543: ARRAY
38544: NOT
38545: IFFALSE 38549
// continue ;
38547: GO 38488
// for j := minerMinesList [ i ] downto 1 do
38549: LD_ADDR_VAR 0 2
38553: PUSH
38554: DOUBLE
38555: LD_EXP 130
38559: PUSH
38560: LD_VAR 0 1
38564: ARRAY
38565: INC
38566: ST_TO_ADDR
38567: LD_INT 1
38569: PUSH
38570: FOR_DOWNTO
38571: IFFALSE 38821
// begin side := GetSide ( minersList [ i ] ) ;
38573: LD_ADDR_VAR 0 3
38577: PUSH
38578: LD_EXP 129
38582: PUSH
38583: LD_VAR 0 1
38587: ARRAY
38588: PPUSH
38589: CALL_OW 255
38593: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
38594: LD_ADDR_VAR 0 4
38598: PUSH
38599: LD_EXP 130
38603: PUSH
38604: LD_VAR 0 1
38608: ARRAY
38609: PUSH
38610: LD_VAR 0 2
38614: ARRAY
38615: PUSH
38616: LD_INT 1
38618: ARRAY
38619: PPUSH
38620: LD_EXP 130
38624: PUSH
38625: LD_VAR 0 1
38629: ARRAY
38630: PUSH
38631: LD_VAR 0 2
38635: ARRAY
38636: PUSH
38637: LD_INT 2
38639: ARRAY
38640: PPUSH
38641: CALL_OW 428
38645: ST_TO_ADDR
// if not tmp then
38646: LD_VAR 0 4
38650: NOT
38651: IFFALSE 38655
// continue ;
38653: GO 38570
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
38655: LD_VAR 0 4
38659: PUSH
38660: LD_INT 81
38662: PUSH
38663: LD_VAR 0 3
38667: PUSH
38668: EMPTY
38669: LIST
38670: LIST
38671: PPUSH
38672: CALL_OW 69
38676: IN
38677: PUSH
38678: LD_EXP 130
38682: PUSH
38683: LD_VAR 0 1
38687: ARRAY
38688: PUSH
38689: LD_VAR 0 2
38693: ARRAY
38694: PUSH
38695: LD_INT 1
38697: ARRAY
38698: PPUSH
38699: LD_EXP 130
38703: PUSH
38704: LD_VAR 0 1
38708: ARRAY
38709: PUSH
38710: LD_VAR 0 2
38714: ARRAY
38715: PUSH
38716: LD_INT 2
38718: ARRAY
38719: PPUSH
38720: CALL_OW 458
38724: AND
38725: IFFALSE 38819
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
38727: LD_EXP 130
38731: PUSH
38732: LD_VAR 0 1
38736: ARRAY
38737: PUSH
38738: LD_VAR 0 2
38742: ARRAY
38743: PUSH
38744: LD_INT 1
38746: ARRAY
38747: PPUSH
38748: LD_EXP 130
38752: PUSH
38753: LD_VAR 0 1
38757: ARRAY
38758: PUSH
38759: LD_VAR 0 2
38763: ARRAY
38764: PUSH
38765: LD_INT 2
38767: ARRAY
38768: PPUSH
38769: LD_VAR 0 3
38773: PPUSH
38774: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
38778: LD_ADDR_EXP 130
38782: PUSH
38783: LD_EXP 130
38787: PPUSH
38788: LD_VAR 0 1
38792: PPUSH
38793: LD_EXP 130
38797: PUSH
38798: LD_VAR 0 1
38802: ARRAY
38803: PPUSH
38804: LD_VAR 0 2
38808: PPUSH
38809: CALL_OW 3
38813: PPUSH
38814: CALL_OW 1
38818: ST_TO_ADDR
// end ; end ;
38819: GO 38570
38821: POP
38822: POP
// end ;
38823: GO 38488
38825: POP
38826: POP
// end ;
38827: PPOPN 4
38829: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
38830: LD_INT 0
38832: PPUSH
38833: PPUSH
// result := false ;
38834: LD_ADDR_VAR 0 4
38838: PUSH
38839: LD_INT 0
38841: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
38842: LD_VAR 0 1
38846: PPUSH
38847: CALL_OW 264
38851: PUSH
38852: LD_INT 81
38854: EQUAL
38855: NOT
38856: IFFALSE 38860
// exit ;
38858: GO 39100
// index := GetElementIndex ( minersList , unit ) ;
38860: LD_ADDR_VAR 0 5
38864: PUSH
38865: LD_EXP 129
38869: PPUSH
38870: LD_VAR 0 1
38874: PPUSH
38875: CALL 45058 0 2
38879: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
38880: LD_EXP 130
38884: PUSH
38885: LD_VAR 0 5
38889: ARRAY
38890: PUSH
38891: LD_EXP 131
38895: GREATEREQUAL
38896: IFFALSE 38900
// exit ;
38898: GO 39100
// ComMoveXY ( unit , x , y ) ;
38900: LD_VAR 0 1
38904: PPUSH
38905: LD_VAR 0 2
38909: PPUSH
38910: LD_VAR 0 3
38914: PPUSH
38915: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38919: LD_INT 35
38921: PPUSH
38922: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
38926: LD_VAR 0 1
38930: PPUSH
38931: LD_VAR 0 2
38935: PPUSH
38936: LD_VAR 0 3
38940: PPUSH
38941: CALL 76810 0 3
38945: NOT
38946: PUSH
38947: LD_VAR 0 1
38951: PPUSH
38952: CALL_OW 314
38956: AND
38957: IFFALSE 38961
// exit ;
38959: GO 39100
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
38961: LD_VAR 0 2
38965: PPUSH
38966: LD_VAR 0 3
38970: PPUSH
38971: CALL_OW 428
38975: PUSH
38976: LD_VAR 0 1
38980: EQUAL
38981: PUSH
38982: LD_VAR 0 1
38986: PPUSH
38987: CALL_OW 314
38991: NOT
38992: AND
38993: IFFALSE 38919
// PlaySoundXY ( x , y , PlantMine ) ;
38995: LD_VAR 0 2
38999: PPUSH
39000: LD_VAR 0 3
39004: PPUSH
39005: LD_STRING PlantMine
39007: PPUSH
39008: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
39012: LD_VAR 0 2
39016: PPUSH
39017: LD_VAR 0 3
39021: PPUSH
39022: LD_VAR 0 1
39026: PPUSH
39027: CALL_OW 255
39031: PPUSH
39032: LD_INT 0
39034: PPUSH
39035: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
39039: LD_ADDR_EXP 130
39043: PUSH
39044: LD_EXP 130
39048: PPUSH
39049: LD_VAR 0 5
39053: PUSH
39054: LD_EXP 130
39058: PUSH
39059: LD_VAR 0 5
39063: ARRAY
39064: PUSH
39065: LD_INT 1
39067: PLUS
39068: PUSH
39069: EMPTY
39070: LIST
39071: LIST
39072: PPUSH
39073: LD_VAR 0 2
39077: PUSH
39078: LD_VAR 0 3
39082: PUSH
39083: EMPTY
39084: LIST
39085: LIST
39086: PPUSH
39087: CALL 45273 0 3
39091: ST_TO_ADDR
// result := true ;
39092: LD_ADDR_VAR 0 4
39096: PUSH
39097: LD_INT 1
39099: ST_TO_ADDR
// end ;
39100: LD_VAR 0 4
39104: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
39105: LD_INT 0
39107: PPUSH
39108: PPUSH
39109: PPUSH
// if not unit in minersList then
39110: LD_VAR 0 1
39114: PUSH
39115: LD_EXP 129
39119: IN
39120: NOT
39121: IFFALSE 39125
// exit ;
39123: GO 39517
// index := GetElementIndex ( minersList , unit ) ;
39125: LD_ADDR_VAR 0 6
39129: PUSH
39130: LD_EXP 129
39134: PPUSH
39135: LD_VAR 0 1
39139: PPUSH
39140: CALL 45058 0 2
39144: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
39145: LD_ADDR_VAR 0 5
39149: PUSH
39150: DOUBLE
39151: LD_EXP 130
39155: PUSH
39156: LD_VAR 0 6
39160: ARRAY
39161: INC
39162: ST_TO_ADDR
39163: LD_INT 1
39165: PUSH
39166: FOR_DOWNTO
39167: IFFALSE 39328
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
39169: LD_EXP 130
39173: PUSH
39174: LD_VAR 0 6
39178: ARRAY
39179: PUSH
39180: LD_VAR 0 5
39184: ARRAY
39185: PUSH
39186: LD_INT 1
39188: ARRAY
39189: PUSH
39190: LD_VAR 0 2
39194: EQUAL
39195: PUSH
39196: LD_EXP 130
39200: PUSH
39201: LD_VAR 0 6
39205: ARRAY
39206: PUSH
39207: LD_VAR 0 5
39211: ARRAY
39212: PUSH
39213: LD_INT 2
39215: ARRAY
39216: PUSH
39217: LD_VAR 0 3
39221: EQUAL
39222: AND
39223: IFFALSE 39326
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39225: LD_EXP 130
39229: PUSH
39230: LD_VAR 0 6
39234: ARRAY
39235: PUSH
39236: LD_VAR 0 5
39240: ARRAY
39241: PUSH
39242: LD_INT 1
39244: ARRAY
39245: PPUSH
39246: LD_EXP 130
39250: PUSH
39251: LD_VAR 0 6
39255: ARRAY
39256: PUSH
39257: LD_VAR 0 5
39261: ARRAY
39262: PUSH
39263: LD_INT 2
39265: ARRAY
39266: PPUSH
39267: LD_VAR 0 1
39271: PPUSH
39272: CALL_OW 255
39276: PPUSH
39277: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39281: LD_ADDR_EXP 130
39285: PUSH
39286: LD_EXP 130
39290: PPUSH
39291: LD_VAR 0 6
39295: PPUSH
39296: LD_EXP 130
39300: PUSH
39301: LD_VAR 0 6
39305: ARRAY
39306: PPUSH
39307: LD_VAR 0 5
39311: PPUSH
39312: CALL_OW 3
39316: PPUSH
39317: CALL_OW 1
39321: ST_TO_ADDR
// exit ;
39322: POP
39323: POP
39324: GO 39517
// end ; end ;
39326: GO 39166
39328: POP
39329: POP
// for i := minerMinesList [ index ] downto 1 do
39330: LD_ADDR_VAR 0 5
39334: PUSH
39335: DOUBLE
39336: LD_EXP 130
39340: PUSH
39341: LD_VAR 0 6
39345: ARRAY
39346: INC
39347: ST_TO_ADDR
39348: LD_INT 1
39350: PUSH
39351: FOR_DOWNTO
39352: IFFALSE 39515
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
39354: LD_EXP 130
39358: PUSH
39359: LD_VAR 0 6
39363: ARRAY
39364: PUSH
39365: LD_VAR 0 5
39369: ARRAY
39370: PUSH
39371: LD_INT 1
39373: ARRAY
39374: PPUSH
39375: LD_EXP 130
39379: PUSH
39380: LD_VAR 0 6
39384: ARRAY
39385: PUSH
39386: LD_VAR 0 5
39390: ARRAY
39391: PUSH
39392: LD_INT 2
39394: ARRAY
39395: PPUSH
39396: LD_VAR 0 2
39400: PPUSH
39401: LD_VAR 0 3
39405: PPUSH
39406: CALL_OW 298
39410: PUSH
39411: LD_INT 6
39413: LESS
39414: IFFALSE 39513
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39416: LD_EXP 130
39420: PUSH
39421: LD_VAR 0 6
39425: ARRAY
39426: PUSH
39427: LD_VAR 0 5
39431: ARRAY
39432: PUSH
39433: LD_INT 1
39435: ARRAY
39436: PPUSH
39437: LD_EXP 130
39441: PUSH
39442: LD_VAR 0 6
39446: ARRAY
39447: PUSH
39448: LD_VAR 0 5
39452: ARRAY
39453: PUSH
39454: LD_INT 2
39456: ARRAY
39457: PPUSH
39458: LD_VAR 0 1
39462: PPUSH
39463: CALL_OW 255
39467: PPUSH
39468: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39472: LD_ADDR_EXP 130
39476: PUSH
39477: LD_EXP 130
39481: PPUSH
39482: LD_VAR 0 6
39486: PPUSH
39487: LD_EXP 130
39491: PUSH
39492: LD_VAR 0 6
39496: ARRAY
39497: PPUSH
39498: LD_VAR 0 5
39502: PPUSH
39503: CALL_OW 3
39507: PPUSH
39508: CALL_OW 1
39512: ST_TO_ADDR
// end ; end ;
39513: GO 39351
39515: POP
39516: POP
// end ;
39517: LD_VAR 0 4
39521: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
39522: LD_INT 0
39524: PPUSH
39525: PPUSH
39526: PPUSH
39527: PPUSH
39528: PPUSH
39529: PPUSH
39530: PPUSH
39531: PPUSH
39532: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
39533: LD_VAR 0 1
39537: PPUSH
39538: CALL_OW 264
39542: PUSH
39543: LD_INT 81
39545: EQUAL
39546: NOT
39547: PUSH
39548: LD_VAR 0 1
39552: PUSH
39553: LD_EXP 129
39557: IN
39558: NOT
39559: OR
39560: IFFALSE 39564
// exit ;
39562: GO 39886
// index := GetElementIndex ( minersList , unit ) ;
39564: LD_ADDR_VAR 0 6
39568: PUSH
39569: LD_EXP 129
39573: PPUSH
39574: LD_VAR 0 1
39578: PPUSH
39579: CALL 45058 0 2
39583: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
39584: LD_ADDR_VAR 0 8
39588: PUSH
39589: LD_EXP 131
39593: PUSH
39594: LD_EXP 130
39598: PUSH
39599: LD_VAR 0 6
39603: ARRAY
39604: MINUS
39605: ST_TO_ADDR
// if not minesFreeAmount then
39606: LD_VAR 0 8
39610: NOT
39611: IFFALSE 39615
// exit ;
39613: GO 39886
// tmp := [ ] ;
39615: LD_ADDR_VAR 0 7
39619: PUSH
39620: EMPTY
39621: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
39622: LD_ADDR_VAR 0 5
39626: PUSH
39627: DOUBLE
39628: LD_INT 1
39630: DEC
39631: ST_TO_ADDR
39632: LD_VAR 0 8
39636: PUSH
39637: FOR_TO
39638: IFFALSE 39833
// begin _d := rand ( 0 , 5 ) ;
39640: LD_ADDR_VAR 0 11
39644: PUSH
39645: LD_INT 0
39647: PPUSH
39648: LD_INT 5
39650: PPUSH
39651: CALL_OW 12
39655: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
39656: LD_ADDR_VAR 0 12
39660: PUSH
39661: LD_INT 2
39663: PPUSH
39664: LD_INT 6
39666: PPUSH
39667: CALL_OW 12
39671: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
39672: LD_ADDR_VAR 0 9
39676: PUSH
39677: LD_VAR 0 2
39681: PPUSH
39682: LD_VAR 0 11
39686: PPUSH
39687: LD_VAR 0 12
39691: PPUSH
39692: CALL_OW 272
39696: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
39697: LD_ADDR_VAR 0 10
39701: PUSH
39702: LD_VAR 0 3
39706: PPUSH
39707: LD_VAR 0 11
39711: PPUSH
39712: LD_VAR 0 12
39716: PPUSH
39717: CALL_OW 273
39721: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
39722: LD_VAR 0 9
39726: PPUSH
39727: LD_VAR 0 10
39731: PPUSH
39732: CALL_OW 488
39736: PUSH
39737: LD_VAR 0 9
39741: PUSH
39742: LD_VAR 0 10
39746: PUSH
39747: EMPTY
39748: LIST
39749: LIST
39750: PUSH
39751: LD_VAR 0 7
39755: IN
39756: NOT
39757: AND
39758: PUSH
39759: LD_VAR 0 9
39763: PPUSH
39764: LD_VAR 0 10
39768: PPUSH
39769: CALL_OW 458
39773: NOT
39774: AND
39775: IFFALSE 39817
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
39777: LD_ADDR_VAR 0 7
39781: PUSH
39782: LD_VAR 0 7
39786: PPUSH
39787: LD_VAR 0 7
39791: PUSH
39792: LD_INT 1
39794: PLUS
39795: PPUSH
39796: LD_VAR 0 9
39800: PUSH
39801: LD_VAR 0 10
39805: PUSH
39806: EMPTY
39807: LIST
39808: LIST
39809: PPUSH
39810: CALL_OW 1
39814: ST_TO_ADDR
39815: GO 39831
// i := i - 1 ;
39817: LD_ADDR_VAR 0 5
39821: PUSH
39822: LD_VAR 0 5
39826: PUSH
39827: LD_INT 1
39829: MINUS
39830: ST_TO_ADDR
// end ;
39831: GO 39637
39833: POP
39834: POP
// for i in tmp do
39835: LD_ADDR_VAR 0 5
39839: PUSH
39840: LD_VAR 0 7
39844: PUSH
39845: FOR_IN
39846: IFFALSE 39884
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
39848: LD_VAR 0 1
39852: PPUSH
39853: LD_VAR 0 5
39857: PUSH
39858: LD_INT 1
39860: ARRAY
39861: PPUSH
39862: LD_VAR 0 5
39866: PUSH
39867: LD_INT 2
39869: ARRAY
39870: PPUSH
39871: CALL 38830 0 3
39875: NOT
39876: IFFALSE 39882
// exit ;
39878: POP
39879: POP
39880: GO 39886
39882: GO 39845
39884: POP
39885: POP
// end ;
39886: LD_VAR 0 4
39890: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
39891: LD_INT 0
39893: PPUSH
39894: PPUSH
39895: PPUSH
39896: PPUSH
39897: PPUSH
39898: PPUSH
39899: PPUSH
// if not GetClass ( unit ) = class_sniper then
39900: LD_VAR 0 1
39904: PPUSH
39905: CALL_OW 257
39909: PUSH
39910: LD_INT 5
39912: EQUAL
39913: NOT
39914: IFFALSE 39918
// exit ;
39916: GO 40306
// dist := 8 ;
39918: LD_ADDR_VAR 0 5
39922: PUSH
39923: LD_INT 8
39925: ST_TO_ADDR
// viewRange := 12 ;
39926: LD_ADDR_VAR 0 7
39930: PUSH
39931: LD_INT 12
39933: ST_TO_ADDR
// side := GetSide ( unit ) ;
39934: LD_ADDR_VAR 0 6
39938: PUSH
39939: LD_VAR 0 1
39943: PPUSH
39944: CALL_OW 255
39948: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
39949: LD_INT 61
39951: PPUSH
39952: LD_VAR 0 6
39956: PPUSH
39957: CALL_OW 321
39961: PUSH
39962: LD_INT 2
39964: EQUAL
39965: IFFALSE 39975
// viewRange := 16 ;
39967: LD_ADDR_VAR 0 7
39971: PUSH
39972: LD_INT 16
39974: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
39975: LD_VAR 0 1
39979: PPUSH
39980: LD_VAR 0 2
39984: PPUSH
39985: LD_VAR 0 3
39989: PPUSH
39990: CALL_OW 297
39994: PUSH
39995: LD_VAR 0 5
39999: GREATER
40000: IFFALSE 40079
// begin ComMoveXY ( unit , x , y ) ;
40002: LD_VAR 0 1
40006: PPUSH
40007: LD_VAR 0 2
40011: PPUSH
40012: LD_VAR 0 3
40016: PPUSH
40017: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40021: LD_INT 35
40023: PPUSH
40024: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
40028: LD_VAR 0 1
40032: PPUSH
40033: LD_VAR 0 2
40037: PPUSH
40038: LD_VAR 0 3
40042: PPUSH
40043: CALL 76810 0 3
40047: NOT
40048: IFFALSE 40052
// exit ;
40050: GO 40306
// until GetDistUnitXY ( unit , x , y ) < dist ;
40052: LD_VAR 0 1
40056: PPUSH
40057: LD_VAR 0 2
40061: PPUSH
40062: LD_VAR 0 3
40066: PPUSH
40067: CALL_OW 297
40071: PUSH
40072: LD_VAR 0 5
40076: LESS
40077: IFFALSE 40021
// end ; ComTurnXY ( unit , x , y ) ;
40079: LD_VAR 0 1
40083: PPUSH
40084: LD_VAR 0 2
40088: PPUSH
40089: LD_VAR 0 3
40093: PPUSH
40094: CALL_OW 118
// wait ( 5 ) ;
40098: LD_INT 5
40100: PPUSH
40101: CALL_OW 67
// _d := GetDir ( unit ) ;
40105: LD_ADDR_VAR 0 10
40109: PUSH
40110: LD_VAR 0 1
40114: PPUSH
40115: CALL_OW 254
40119: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
40120: LD_ADDR_VAR 0 8
40124: PUSH
40125: LD_VAR 0 1
40129: PPUSH
40130: CALL_OW 250
40134: PPUSH
40135: LD_VAR 0 10
40139: PPUSH
40140: LD_VAR 0 5
40144: PPUSH
40145: CALL_OW 272
40149: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
40150: LD_ADDR_VAR 0 9
40154: PUSH
40155: LD_VAR 0 1
40159: PPUSH
40160: CALL_OW 251
40164: PPUSH
40165: LD_VAR 0 10
40169: PPUSH
40170: LD_VAR 0 5
40174: PPUSH
40175: CALL_OW 273
40179: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40180: LD_VAR 0 8
40184: PPUSH
40185: LD_VAR 0 9
40189: PPUSH
40190: CALL_OW 488
40194: NOT
40195: IFFALSE 40199
// exit ;
40197: GO 40306
// ComAnimCustom ( unit , 1 ) ;
40199: LD_VAR 0 1
40203: PPUSH
40204: LD_INT 1
40206: PPUSH
40207: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
40211: LD_VAR 0 8
40215: PPUSH
40216: LD_VAR 0 9
40220: PPUSH
40221: LD_VAR 0 6
40225: PPUSH
40226: LD_VAR 0 7
40230: PPUSH
40231: CALL_OW 330
// repeat wait ( 1 ) ;
40235: LD_INT 1
40237: PPUSH
40238: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
40242: LD_VAR 0 1
40246: PPUSH
40247: CALL_OW 316
40251: PUSH
40252: LD_VAR 0 1
40256: PPUSH
40257: CALL_OW 314
40261: OR
40262: PUSH
40263: LD_VAR 0 1
40267: PPUSH
40268: CALL_OW 302
40272: NOT
40273: OR
40274: PUSH
40275: LD_VAR 0 1
40279: PPUSH
40280: CALL_OW 301
40284: OR
40285: IFFALSE 40235
// RemoveSeeing ( _x , _y , side ) ;
40287: LD_VAR 0 8
40291: PPUSH
40292: LD_VAR 0 9
40296: PPUSH
40297: LD_VAR 0 6
40301: PPUSH
40302: CALL_OW 331
// end ; end_of_file
40306: LD_VAR 0 4
40310: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
40311: LD_INT 0
40313: PPUSH
40314: PPUSH
// if exist_mode then
40315: LD_VAR 0 2
40319: IFFALSE 40344
// unit := CreateCharacter ( prefix & ident ) else
40321: LD_ADDR_VAR 0 5
40325: PUSH
40326: LD_VAR 0 3
40330: PUSH
40331: LD_VAR 0 1
40335: STR
40336: PPUSH
40337: CALL_OW 34
40341: ST_TO_ADDR
40342: GO 40359
// unit := NewCharacter ( ident ) ;
40344: LD_ADDR_VAR 0 5
40348: PUSH
40349: LD_VAR 0 1
40353: PPUSH
40354: CALL_OW 25
40358: ST_TO_ADDR
// result := unit ;
40359: LD_ADDR_VAR 0 4
40363: PUSH
40364: LD_VAR 0 5
40368: ST_TO_ADDR
// end ;
40369: LD_VAR 0 4
40373: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
40374: LD_INT 0
40376: PPUSH
40377: PPUSH
// if not side or not nation then
40378: LD_VAR 0 1
40382: NOT
40383: PUSH
40384: LD_VAR 0 2
40388: NOT
40389: OR
40390: IFFALSE 40394
// exit ;
40392: GO 41162
// case nation of nation_american :
40394: LD_VAR 0 2
40398: PUSH
40399: LD_INT 1
40401: DOUBLE
40402: EQUAL
40403: IFTRUE 40407
40405: GO 40621
40407: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
40408: LD_ADDR_VAR 0 4
40412: PUSH
40413: LD_INT 35
40415: PUSH
40416: LD_INT 45
40418: PUSH
40419: LD_INT 46
40421: PUSH
40422: LD_INT 47
40424: PUSH
40425: LD_INT 82
40427: PUSH
40428: LD_INT 83
40430: PUSH
40431: LD_INT 84
40433: PUSH
40434: LD_INT 85
40436: PUSH
40437: LD_INT 86
40439: PUSH
40440: LD_INT 1
40442: PUSH
40443: LD_INT 2
40445: PUSH
40446: LD_INT 6
40448: PUSH
40449: LD_INT 15
40451: PUSH
40452: LD_INT 16
40454: PUSH
40455: LD_INT 7
40457: PUSH
40458: LD_INT 12
40460: PUSH
40461: LD_INT 13
40463: PUSH
40464: LD_INT 10
40466: PUSH
40467: LD_INT 14
40469: PUSH
40470: LD_INT 20
40472: PUSH
40473: LD_INT 21
40475: PUSH
40476: LD_INT 22
40478: PUSH
40479: LD_INT 25
40481: PUSH
40482: LD_INT 32
40484: PUSH
40485: LD_INT 27
40487: PUSH
40488: LD_INT 36
40490: PUSH
40491: LD_INT 69
40493: PUSH
40494: LD_INT 39
40496: PUSH
40497: LD_INT 34
40499: PUSH
40500: LD_INT 40
40502: PUSH
40503: LD_INT 48
40505: PUSH
40506: LD_INT 49
40508: PUSH
40509: LD_INT 50
40511: PUSH
40512: LD_INT 51
40514: PUSH
40515: LD_INT 52
40517: PUSH
40518: LD_INT 53
40520: PUSH
40521: LD_INT 54
40523: PUSH
40524: LD_INT 55
40526: PUSH
40527: LD_INT 56
40529: PUSH
40530: LD_INT 57
40532: PUSH
40533: LD_INT 58
40535: PUSH
40536: LD_INT 59
40538: PUSH
40539: LD_INT 60
40541: PUSH
40542: LD_INT 61
40544: PUSH
40545: LD_INT 62
40547: PUSH
40548: LD_INT 80
40550: PUSH
40551: LD_INT 82
40553: PUSH
40554: LD_INT 83
40556: PUSH
40557: LD_INT 84
40559: PUSH
40560: LD_INT 85
40562: PUSH
40563: LD_INT 86
40565: PUSH
40566: EMPTY
40567: LIST
40568: LIST
40569: LIST
40570: LIST
40571: LIST
40572: LIST
40573: LIST
40574: LIST
40575: LIST
40576: LIST
40577: LIST
40578: LIST
40579: LIST
40580: LIST
40581: LIST
40582: LIST
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: LIST
40617: LIST
40618: ST_TO_ADDR
40619: GO 41086
40621: LD_INT 2
40623: DOUBLE
40624: EQUAL
40625: IFTRUE 40629
40627: GO 40855
40629: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
40630: LD_ADDR_VAR 0 4
40634: PUSH
40635: LD_INT 35
40637: PUSH
40638: LD_INT 45
40640: PUSH
40641: LD_INT 46
40643: PUSH
40644: LD_INT 47
40646: PUSH
40647: LD_INT 82
40649: PUSH
40650: LD_INT 83
40652: PUSH
40653: LD_INT 84
40655: PUSH
40656: LD_INT 85
40658: PUSH
40659: LD_INT 87
40661: PUSH
40662: LD_INT 70
40664: PUSH
40665: LD_INT 1
40667: PUSH
40668: LD_INT 11
40670: PUSH
40671: LD_INT 3
40673: PUSH
40674: LD_INT 4
40676: PUSH
40677: LD_INT 5
40679: PUSH
40680: LD_INT 6
40682: PUSH
40683: LD_INT 15
40685: PUSH
40686: LD_INT 18
40688: PUSH
40689: LD_INT 7
40691: PUSH
40692: LD_INT 17
40694: PUSH
40695: LD_INT 8
40697: PUSH
40698: LD_INT 20
40700: PUSH
40701: LD_INT 21
40703: PUSH
40704: LD_INT 22
40706: PUSH
40707: LD_INT 72
40709: PUSH
40710: LD_INT 26
40712: PUSH
40713: LD_INT 69
40715: PUSH
40716: LD_INT 39
40718: PUSH
40719: LD_INT 40
40721: PUSH
40722: LD_INT 41
40724: PUSH
40725: LD_INT 42
40727: PUSH
40728: LD_INT 43
40730: PUSH
40731: LD_INT 48
40733: PUSH
40734: LD_INT 49
40736: PUSH
40737: LD_INT 50
40739: PUSH
40740: LD_INT 51
40742: PUSH
40743: LD_INT 52
40745: PUSH
40746: LD_INT 53
40748: PUSH
40749: LD_INT 54
40751: PUSH
40752: LD_INT 55
40754: PUSH
40755: LD_INT 56
40757: PUSH
40758: LD_INT 60
40760: PUSH
40761: LD_INT 61
40763: PUSH
40764: LD_INT 62
40766: PUSH
40767: LD_INT 66
40769: PUSH
40770: LD_INT 67
40772: PUSH
40773: LD_INT 68
40775: PUSH
40776: LD_INT 81
40778: PUSH
40779: LD_INT 82
40781: PUSH
40782: LD_INT 83
40784: PUSH
40785: LD_INT 84
40787: PUSH
40788: LD_INT 85
40790: PUSH
40791: LD_INT 87
40793: PUSH
40794: LD_INT 88
40796: PUSH
40797: EMPTY
40798: LIST
40799: LIST
40800: LIST
40801: LIST
40802: LIST
40803: LIST
40804: LIST
40805: LIST
40806: LIST
40807: LIST
40808: LIST
40809: LIST
40810: LIST
40811: LIST
40812: LIST
40813: LIST
40814: LIST
40815: LIST
40816: LIST
40817: LIST
40818: LIST
40819: LIST
40820: LIST
40821: LIST
40822: LIST
40823: LIST
40824: LIST
40825: LIST
40826: LIST
40827: LIST
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: LIST
40835: LIST
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: LIST
40842: LIST
40843: LIST
40844: LIST
40845: LIST
40846: LIST
40847: LIST
40848: LIST
40849: LIST
40850: LIST
40851: LIST
40852: ST_TO_ADDR
40853: GO 41086
40855: LD_INT 3
40857: DOUBLE
40858: EQUAL
40859: IFTRUE 40863
40861: GO 41085
40863: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
40864: LD_ADDR_VAR 0 4
40868: PUSH
40869: LD_INT 46
40871: PUSH
40872: LD_INT 47
40874: PUSH
40875: LD_INT 1
40877: PUSH
40878: LD_INT 2
40880: PUSH
40881: LD_INT 82
40883: PUSH
40884: LD_INT 83
40886: PUSH
40887: LD_INT 84
40889: PUSH
40890: LD_INT 85
40892: PUSH
40893: LD_INT 86
40895: PUSH
40896: LD_INT 11
40898: PUSH
40899: LD_INT 9
40901: PUSH
40902: LD_INT 20
40904: PUSH
40905: LD_INT 19
40907: PUSH
40908: LD_INT 21
40910: PUSH
40911: LD_INT 24
40913: PUSH
40914: LD_INT 22
40916: PUSH
40917: LD_INT 25
40919: PUSH
40920: LD_INT 28
40922: PUSH
40923: LD_INT 29
40925: PUSH
40926: LD_INT 30
40928: PUSH
40929: LD_INT 31
40931: PUSH
40932: LD_INT 37
40934: PUSH
40935: LD_INT 38
40937: PUSH
40938: LD_INT 32
40940: PUSH
40941: LD_INT 27
40943: PUSH
40944: LD_INT 33
40946: PUSH
40947: LD_INT 69
40949: PUSH
40950: LD_INT 39
40952: PUSH
40953: LD_INT 34
40955: PUSH
40956: LD_INT 40
40958: PUSH
40959: LD_INT 71
40961: PUSH
40962: LD_INT 23
40964: PUSH
40965: LD_INT 44
40967: PUSH
40968: LD_INT 48
40970: PUSH
40971: LD_INT 49
40973: PUSH
40974: LD_INT 50
40976: PUSH
40977: LD_INT 51
40979: PUSH
40980: LD_INT 52
40982: PUSH
40983: LD_INT 53
40985: PUSH
40986: LD_INT 54
40988: PUSH
40989: LD_INT 55
40991: PUSH
40992: LD_INT 56
40994: PUSH
40995: LD_INT 57
40997: PUSH
40998: LD_INT 58
41000: PUSH
41001: LD_INT 59
41003: PUSH
41004: LD_INT 63
41006: PUSH
41007: LD_INT 64
41009: PUSH
41010: LD_INT 65
41012: PUSH
41013: LD_INT 82
41015: PUSH
41016: LD_INT 83
41018: PUSH
41019: LD_INT 84
41021: PUSH
41022: LD_INT 85
41024: PUSH
41025: LD_INT 86
41027: PUSH
41028: EMPTY
41029: LIST
41030: LIST
41031: LIST
41032: LIST
41033: LIST
41034: LIST
41035: LIST
41036: LIST
41037: LIST
41038: LIST
41039: LIST
41040: LIST
41041: LIST
41042: LIST
41043: LIST
41044: LIST
41045: LIST
41046: LIST
41047: LIST
41048: LIST
41049: LIST
41050: LIST
41051: LIST
41052: LIST
41053: LIST
41054: LIST
41055: LIST
41056: LIST
41057: LIST
41058: LIST
41059: LIST
41060: LIST
41061: LIST
41062: LIST
41063: LIST
41064: LIST
41065: LIST
41066: LIST
41067: LIST
41068: LIST
41069: LIST
41070: LIST
41071: LIST
41072: LIST
41073: LIST
41074: LIST
41075: LIST
41076: LIST
41077: LIST
41078: LIST
41079: LIST
41080: LIST
41081: LIST
41082: ST_TO_ADDR
41083: GO 41086
41085: POP
// if state > - 1 and state < 3 then
41086: LD_VAR 0 3
41090: PUSH
41091: LD_INT 1
41093: NEG
41094: GREATER
41095: PUSH
41096: LD_VAR 0 3
41100: PUSH
41101: LD_INT 3
41103: LESS
41104: AND
41105: IFFALSE 41162
// for i in result do
41107: LD_ADDR_VAR 0 5
41111: PUSH
41112: LD_VAR 0 4
41116: PUSH
41117: FOR_IN
41118: IFFALSE 41160
// if GetTech ( i , side ) <> state then
41120: LD_VAR 0 5
41124: PPUSH
41125: LD_VAR 0 1
41129: PPUSH
41130: CALL_OW 321
41134: PUSH
41135: LD_VAR 0 3
41139: NONEQUAL
41140: IFFALSE 41158
// result := result diff i ;
41142: LD_ADDR_VAR 0 4
41146: PUSH
41147: LD_VAR 0 4
41151: PUSH
41152: LD_VAR 0 5
41156: DIFF
41157: ST_TO_ADDR
41158: GO 41117
41160: POP
41161: POP
// end ;
41162: LD_VAR 0 4
41166: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
41167: LD_INT 0
41169: PPUSH
41170: PPUSH
41171: PPUSH
// result := true ;
41172: LD_ADDR_VAR 0 3
41176: PUSH
41177: LD_INT 1
41179: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
41180: LD_ADDR_VAR 0 5
41184: PUSH
41185: LD_VAR 0 2
41189: PPUSH
41190: CALL_OW 480
41194: ST_TO_ADDR
// if not tmp then
41195: LD_VAR 0 5
41199: NOT
41200: IFFALSE 41204
// exit ;
41202: GO 41253
// for i in tmp do
41204: LD_ADDR_VAR 0 4
41208: PUSH
41209: LD_VAR 0 5
41213: PUSH
41214: FOR_IN
41215: IFFALSE 41251
// if GetTech ( i , side ) <> state_researched then
41217: LD_VAR 0 4
41221: PPUSH
41222: LD_VAR 0 1
41226: PPUSH
41227: CALL_OW 321
41231: PUSH
41232: LD_INT 2
41234: NONEQUAL
41235: IFFALSE 41249
// begin result := false ;
41237: LD_ADDR_VAR 0 3
41241: PUSH
41242: LD_INT 0
41244: ST_TO_ADDR
// exit ;
41245: POP
41246: POP
41247: GO 41253
// end ;
41249: GO 41214
41251: POP
41252: POP
// end ;
41253: LD_VAR 0 3
41257: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
41258: LD_INT 0
41260: PPUSH
41261: PPUSH
41262: PPUSH
41263: PPUSH
41264: PPUSH
41265: PPUSH
41266: PPUSH
41267: PPUSH
41268: PPUSH
41269: PPUSH
41270: PPUSH
41271: PPUSH
41272: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
41273: LD_VAR 0 1
41277: NOT
41278: PUSH
41279: LD_VAR 0 1
41283: PPUSH
41284: CALL_OW 257
41288: PUSH
41289: LD_INT 9
41291: NONEQUAL
41292: OR
41293: IFFALSE 41297
// exit ;
41295: GO 41870
// side := GetSide ( unit ) ;
41297: LD_ADDR_VAR 0 9
41301: PUSH
41302: LD_VAR 0 1
41306: PPUSH
41307: CALL_OW 255
41311: ST_TO_ADDR
// tech_space := tech_spacanom ;
41312: LD_ADDR_VAR 0 12
41316: PUSH
41317: LD_INT 29
41319: ST_TO_ADDR
// tech_time := tech_taurad ;
41320: LD_ADDR_VAR 0 13
41324: PUSH
41325: LD_INT 28
41327: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
41328: LD_ADDR_VAR 0 11
41332: PUSH
41333: LD_VAR 0 1
41337: PPUSH
41338: CALL_OW 310
41342: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
41343: LD_VAR 0 11
41347: PPUSH
41348: CALL_OW 247
41352: PUSH
41353: LD_INT 2
41355: EQUAL
41356: IFFALSE 41360
// exit ;
41358: GO 41870
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41360: LD_ADDR_VAR 0 8
41364: PUSH
41365: LD_INT 81
41367: PUSH
41368: LD_VAR 0 9
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: PUSH
41377: LD_INT 3
41379: PUSH
41380: LD_INT 21
41382: PUSH
41383: LD_INT 3
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PPUSH
41398: CALL_OW 69
41402: ST_TO_ADDR
// if not tmp then
41403: LD_VAR 0 8
41407: NOT
41408: IFFALSE 41412
// exit ;
41410: GO 41870
// if in_unit then
41412: LD_VAR 0 11
41416: IFFALSE 41440
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
41418: LD_ADDR_VAR 0 10
41422: PUSH
41423: LD_VAR 0 8
41427: PPUSH
41428: LD_VAR 0 11
41432: PPUSH
41433: CALL_OW 74
41437: ST_TO_ADDR
41438: GO 41460
// enemy := NearestUnitToUnit ( tmp , unit ) ;
41440: LD_ADDR_VAR 0 10
41444: PUSH
41445: LD_VAR 0 8
41449: PPUSH
41450: LD_VAR 0 1
41454: PPUSH
41455: CALL_OW 74
41459: ST_TO_ADDR
// if not enemy then
41460: LD_VAR 0 10
41464: NOT
41465: IFFALSE 41469
// exit ;
41467: GO 41870
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
41469: LD_VAR 0 11
41473: PUSH
41474: LD_VAR 0 11
41478: PPUSH
41479: LD_VAR 0 10
41483: PPUSH
41484: CALL_OW 296
41488: PUSH
41489: LD_INT 13
41491: GREATER
41492: AND
41493: PUSH
41494: LD_VAR 0 1
41498: PPUSH
41499: LD_VAR 0 10
41503: PPUSH
41504: CALL_OW 296
41508: PUSH
41509: LD_INT 12
41511: GREATER
41512: OR
41513: IFFALSE 41517
// exit ;
41515: GO 41870
// missile := [ 1 ] ;
41517: LD_ADDR_VAR 0 14
41521: PUSH
41522: LD_INT 1
41524: PUSH
41525: EMPTY
41526: LIST
41527: ST_TO_ADDR
// if Researched ( side , tech_space ) then
41528: LD_VAR 0 9
41532: PPUSH
41533: LD_VAR 0 12
41537: PPUSH
41538: CALL_OW 325
41542: IFFALSE 41571
// missile := Replace ( missile , missile + 1 , 2 ) ;
41544: LD_ADDR_VAR 0 14
41548: PUSH
41549: LD_VAR 0 14
41553: PPUSH
41554: LD_VAR 0 14
41558: PUSH
41559: LD_INT 1
41561: PLUS
41562: PPUSH
41563: LD_INT 2
41565: PPUSH
41566: CALL_OW 1
41570: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
41571: LD_VAR 0 9
41575: PPUSH
41576: LD_VAR 0 13
41580: PPUSH
41581: CALL_OW 325
41585: PUSH
41586: LD_VAR 0 10
41590: PPUSH
41591: CALL_OW 255
41595: PPUSH
41596: LD_VAR 0 13
41600: PPUSH
41601: CALL_OW 325
41605: NOT
41606: AND
41607: IFFALSE 41636
// missile := Replace ( missile , missile + 1 , 3 ) ;
41609: LD_ADDR_VAR 0 14
41613: PUSH
41614: LD_VAR 0 14
41618: PPUSH
41619: LD_VAR 0 14
41623: PUSH
41624: LD_INT 1
41626: PLUS
41627: PPUSH
41628: LD_INT 3
41630: PPUSH
41631: CALL_OW 1
41635: ST_TO_ADDR
// if missile < 2 then
41636: LD_VAR 0 14
41640: PUSH
41641: LD_INT 2
41643: LESS
41644: IFFALSE 41648
// exit ;
41646: GO 41870
// x := GetX ( enemy ) ;
41648: LD_ADDR_VAR 0 4
41652: PUSH
41653: LD_VAR 0 10
41657: PPUSH
41658: CALL_OW 250
41662: ST_TO_ADDR
// y := GetY ( enemy ) ;
41663: LD_ADDR_VAR 0 5
41667: PUSH
41668: LD_VAR 0 10
41672: PPUSH
41673: CALL_OW 251
41677: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
41678: LD_ADDR_VAR 0 6
41682: PUSH
41683: LD_VAR 0 4
41687: PUSH
41688: LD_INT 1
41690: NEG
41691: PPUSH
41692: LD_INT 1
41694: PPUSH
41695: CALL_OW 12
41699: PLUS
41700: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
41701: LD_ADDR_VAR 0 7
41705: PUSH
41706: LD_VAR 0 5
41710: PUSH
41711: LD_INT 1
41713: NEG
41714: PPUSH
41715: LD_INT 1
41717: PPUSH
41718: CALL_OW 12
41722: PLUS
41723: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41724: LD_VAR 0 6
41728: PPUSH
41729: LD_VAR 0 7
41733: PPUSH
41734: CALL_OW 488
41738: NOT
41739: IFFALSE 41761
// begin _x := x ;
41741: LD_ADDR_VAR 0 6
41745: PUSH
41746: LD_VAR 0 4
41750: ST_TO_ADDR
// _y := y ;
41751: LD_ADDR_VAR 0 7
41755: PUSH
41756: LD_VAR 0 5
41760: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
41761: LD_ADDR_VAR 0 3
41765: PUSH
41766: LD_INT 1
41768: PPUSH
41769: LD_VAR 0 14
41773: PPUSH
41774: CALL_OW 12
41778: ST_TO_ADDR
// case i of 1 :
41779: LD_VAR 0 3
41783: PUSH
41784: LD_INT 1
41786: DOUBLE
41787: EQUAL
41788: IFTRUE 41792
41790: GO 41809
41792: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
41793: LD_VAR 0 1
41797: PPUSH
41798: LD_VAR 0 10
41802: PPUSH
41803: CALL_OW 115
41807: GO 41870
41809: LD_INT 2
41811: DOUBLE
41812: EQUAL
41813: IFTRUE 41817
41815: GO 41839
41817: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
41818: LD_VAR 0 1
41822: PPUSH
41823: LD_VAR 0 6
41827: PPUSH
41828: LD_VAR 0 7
41832: PPUSH
41833: CALL_OW 153
41837: GO 41870
41839: LD_INT 3
41841: DOUBLE
41842: EQUAL
41843: IFTRUE 41847
41845: GO 41869
41847: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
41848: LD_VAR 0 1
41852: PPUSH
41853: LD_VAR 0 6
41857: PPUSH
41858: LD_VAR 0 7
41862: PPUSH
41863: CALL_OW 154
41867: GO 41870
41869: POP
// end ;
41870: LD_VAR 0 2
41874: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
41875: LD_INT 0
41877: PPUSH
41878: PPUSH
41879: PPUSH
41880: PPUSH
41881: PPUSH
41882: PPUSH
// if not unit or not building then
41883: LD_VAR 0 1
41887: NOT
41888: PUSH
41889: LD_VAR 0 2
41893: NOT
41894: OR
41895: IFFALSE 41899
// exit ;
41897: GO 42057
// x := GetX ( building ) ;
41899: LD_ADDR_VAR 0 5
41903: PUSH
41904: LD_VAR 0 2
41908: PPUSH
41909: CALL_OW 250
41913: ST_TO_ADDR
// y := GetY ( building ) ;
41914: LD_ADDR_VAR 0 6
41918: PUSH
41919: LD_VAR 0 2
41923: PPUSH
41924: CALL_OW 251
41928: ST_TO_ADDR
// for i = 0 to 5 do
41929: LD_ADDR_VAR 0 4
41933: PUSH
41934: DOUBLE
41935: LD_INT 0
41937: DEC
41938: ST_TO_ADDR
41939: LD_INT 5
41941: PUSH
41942: FOR_TO
41943: IFFALSE 42055
// begin _x := ShiftX ( x , i , 3 ) ;
41945: LD_ADDR_VAR 0 7
41949: PUSH
41950: LD_VAR 0 5
41954: PPUSH
41955: LD_VAR 0 4
41959: PPUSH
41960: LD_INT 3
41962: PPUSH
41963: CALL_OW 272
41967: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
41968: LD_ADDR_VAR 0 8
41972: PUSH
41973: LD_VAR 0 6
41977: PPUSH
41978: LD_VAR 0 4
41982: PPUSH
41983: LD_INT 3
41985: PPUSH
41986: CALL_OW 273
41990: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41991: LD_VAR 0 7
41995: PPUSH
41996: LD_VAR 0 8
42000: PPUSH
42001: CALL_OW 488
42005: NOT
42006: IFFALSE 42010
// continue ;
42008: GO 41942
// if HexInfo ( _x , _y ) = 0 then
42010: LD_VAR 0 7
42014: PPUSH
42015: LD_VAR 0 8
42019: PPUSH
42020: CALL_OW 428
42024: PUSH
42025: LD_INT 0
42027: EQUAL
42028: IFFALSE 42053
// begin ComMoveXY ( unit , _x , _y ) ;
42030: LD_VAR 0 1
42034: PPUSH
42035: LD_VAR 0 7
42039: PPUSH
42040: LD_VAR 0 8
42044: PPUSH
42045: CALL_OW 111
// exit ;
42049: POP
42050: POP
42051: GO 42057
// end ; end ;
42053: GO 41942
42055: POP
42056: POP
// end ;
42057: LD_VAR 0 3
42061: RET
// export function ScanBase ( side , base_area ) ; begin
42062: LD_INT 0
42064: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
42065: LD_ADDR_VAR 0 3
42069: PUSH
42070: LD_VAR 0 2
42074: PPUSH
42075: LD_INT 81
42077: PUSH
42078: LD_VAR 0 1
42082: PUSH
42083: EMPTY
42084: LIST
42085: LIST
42086: PPUSH
42087: CALL_OW 70
42091: ST_TO_ADDR
// end ;
42092: LD_VAR 0 3
42096: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
42097: LD_INT 0
42099: PPUSH
42100: PPUSH
42101: PPUSH
42102: PPUSH
// result := false ;
42103: LD_ADDR_VAR 0 2
42107: PUSH
42108: LD_INT 0
42110: ST_TO_ADDR
// side := GetSide ( unit ) ;
42111: LD_ADDR_VAR 0 3
42115: PUSH
42116: LD_VAR 0 1
42120: PPUSH
42121: CALL_OW 255
42125: ST_TO_ADDR
// nat := GetNation ( unit ) ;
42126: LD_ADDR_VAR 0 4
42130: PUSH
42131: LD_VAR 0 1
42135: PPUSH
42136: CALL_OW 248
42140: ST_TO_ADDR
// case nat of 1 :
42141: LD_VAR 0 4
42145: PUSH
42146: LD_INT 1
42148: DOUBLE
42149: EQUAL
42150: IFTRUE 42154
42152: GO 42165
42154: POP
// tech := tech_lassight ; 2 :
42155: LD_ADDR_VAR 0 5
42159: PUSH
42160: LD_INT 12
42162: ST_TO_ADDR
42163: GO 42204
42165: LD_INT 2
42167: DOUBLE
42168: EQUAL
42169: IFTRUE 42173
42171: GO 42184
42173: POP
// tech := tech_mortar ; 3 :
42174: LD_ADDR_VAR 0 5
42178: PUSH
42179: LD_INT 41
42181: ST_TO_ADDR
42182: GO 42204
42184: LD_INT 3
42186: DOUBLE
42187: EQUAL
42188: IFTRUE 42192
42190: GO 42203
42192: POP
// tech := tech_bazooka ; end ;
42193: LD_ADDR_VAR 0 5
42197: PUSH
42198: LD_INT 44
42200: ST_TO_ADDR
42201: GO 42204
42203: POP
// if Researched ( side , tech ) then
42204: LD_VAR 0 3
42208: PPUSH
42209: LD_VAR 0 5
42213: PPUSH
42214: CALL_OW 325
42218: IFFALSE 42245
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
42220: LD_ADDR_VAR 0 2
42224: PUSH
42225: LD_INT 5
42227: PUSH
42228: LD_INT 8
42230: PUSH
42231: LD_INT 9
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: LIST
42238: PUSH
42239: LD_VAR 0 4
42243: ARRAY
42244: ST_TO_ADDR
// end ;
42245: LD_VAR 0 2
42249: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
42250: LD_INT 0
42252: PPUSH
42253: PPUSH
42254: PPUSH
// if not mines then
42255: LD_VAR 0 2
42259: NOT
42260: IFFALSE 42264
// exit ;
42262: GO 42408
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42264: LD_ADDR_VAR 0 5
42268: PUSH
42269: LD_INT 81
42271: PUSH
42272: LD_VAR 0 1
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: PUSH
42281: LD_INT 3
42283: PUSH
42284: LD_INT 21
42286: PUSH
42287: LD_INT 3
42289: PUSH
42290: EMPTY
42291: LIST
42292: LIST
42293: PUSH
42294: EMPTY
42295: LIST
42296: LIST
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PPUSH
42302: CALL_OW 69
42306: ST_TO_ADDR
// for i in mines do
42307: LD_ADDR_VAR 0 4
42311: PUSH
42312: LD_VAR 0 2
42316: PUSH
42317: FOR_IN
42318: IFFALSE 42406
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
42320: LD_VAR 0 4
42324: PUSH
42325: LD_INT 1
42327: ARRAY
42328: PPUSH
42329: LD_VAR 0 4
42333: PUSH
42334: LD_INT 2
42336: ARRAY
42337: PPUSH
42338: CALL_OW 458
42342: NOT
42343: IFFALSE 42347
// continue ;
42345: GO 42317
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
42347: LD_VAR 0 4
42351: PUSH
42352: LD_INT 1
42354: ARRAY
42355: PPUSH
42356: LD_VAR 0 4
42360: PUSH
42361: LD_INT 2
42363: ARRAY
42364: PPUSH
42365: CALL_OW 428
42369: PUSH
42370: LD_VAR 0 5
42374: IN
42375: IFFALSE 42404
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
42377: LD_VAR 0 4
42381: PUSH
42382: LD_INT 1
42384: ARRAY
42385: PPUSH
42386: LD_VAR 0 4
42390: PUSH
42391: LD_INT 2
42393: ARRAY
42394: PPUSH
42395: LD_VAR 0 1
42399: PPUSH
42400: CALL_OW 456
// end ;
42404: GO 42317
42406: POP
42407: POP
// end ;
42408: LD_VAR 0 3
42412: RET
// export function Count ( array ) ; begin
42413: LD_INT 0
42415: PPUSH
// result := array + 0 ;
42416: LD_ADDR_VAR 0 2
42420: PUSH
42421: LD_VAR 0 1
42425: PUSH
42426: LD_INT 0
42428: PLUS
42429: ST_TO_ADDR
// end ;
42430: LD_VAR 0 2
42434: RET
// export function IsEmpty ( building ) ; begin
42435: LD_INT 0
42437: PPUSH
// if not building then
42438: LD_VAR 0 1
42442: NOT
42443: IFFALSE 42447
// exit ;
42445: GO 42490
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
42447: LD_ADDR_VAR 0 2
42451: PUSH
42452: LD_VAR 0 1
42456: PUSH
42457: LD_INT 22
42459: PUSH
42460: LD_VAR 0 1
42464: PPUSH
42465: CALL_OW 255
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: PUSH
42474: LD_INT 58
42476: PUSH
42477: EMPTY
42478: LIST
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: PPUSH
42484: CALL_OW 69
42488: IN
42489: ST_TO_ADDR
// end ;
42490: LD_VAR 0 2
42494: RET
// export function IsNotFull ( building ) ; var places ; begin
42495: LD_INT 0
42497: PPUSH
42498: PPUSH
// if not building then
42499: LD_VAR 0 1
42503: NOT
42504: IFFALSE 42508
// exit ;
42506: GO 42536
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
42508: LD_ADDR_VAR 0 2
42512: PUSH
42513: LD_VAR 0 1
42517: PPUSH
42518: LD_INT 3
42520: PUSH
42521: LD_INT 62
42523: PUSH
42524: EMPTY
42525: LIST
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: PPUSH
42531: CALL_OW 72
42535: ST_TO_ADDR
// end ;
42536: LD_VAR 0 2
42540: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
42541: LD_INT 0
42543: PPUSH
42544: PPUSH
42545: PPUSH
42546: PPUSH
// tmp := [ ] ;
42547: LD_ADDR_VAR 0 3
42551: PUSH
42552: EMPTY
42553: ST_TO_ADDR
// list := [ ] ;
42554: LD_ADDR_VAR 0 5
42558: PUSH
42559: EMPTY
42560: ST_TO_ADDR
// for i = 16 to 25 do
42561: LD_ADDR_VAR 0 4
42565: PUSH
42566: DOUBLE
42567: LD_INT 16
42569: DEC
42570: ST_TO_ADDR
42571: LD_INT 25
42573: PUSH
42574: FOR_TO
42575: IFFALSE 42648
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
42577: LD_ADDR_VAR 0 3
42581: PUSH
42582: LD_VAR 0 3
42586: PUSH
42587: LD_INT 22
42589: PUSH
42590: LD_VAR 0 1
42594: PPUSH
42595: CALL_OW 255
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: PUSH
42604: LD_INT 91
42606: PUSH
42607: LD_VAR 0 1
42611: PUSH
42612: LD_INT 6
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: LIST
42619: PUSH
42620: LD_INT 30
42622: PUSH
42623: LD_VAR 0 4
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: PUSH
42632: EMPTY
42633: LIST
42634: LIST
42635: LIST
42636: PUSH
42637: EMPTY
42638: LIST
42639: PPUSH
42640: CALL_OW 69
42644: ADD
42645: ST_TO_ADDR
42646: GO 42574
42648: POP
42649: POP
// for i = 1 to tmp do
42650: LD_ADDR_VAR 0 4
42654: PUSH
42655: DOUBLE
42656: LD_INT 1
42658: DEC
42659: ST_TO_ADDR
42660: LD_VAR 0 3
42664: PUSH
42665: FOR_TO
42666: IFFALSE 42754
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
42668: LD_ADDR_VAR 0 5
42672: PUSH
42673: LD_VAR 0 5
42677: PUSH
42678: LD_VAR 0 3
42682: PUSH
42683: LD_VAR 0 4
42687: ARRAY
42688: PPUSH
42689: CALL_OW 266
42693: PUSH
42694: LD_VAR 0 3
42698: PUSH
42699: LD_VAR 0 4
42703: ARRAY
42704: PPUSH
42705: CALL_OW 250
42709: PUSH
42710: LD_VAR 0 3
42714: PUSH
42715: LD_VAR 0 4
42719: ARRAY
42720: PPUSH
42721: CALL_OW 251
42725: PUSH
42726: LD_VAR 0 3
42730: PUSH
42731: LD_VAR 0 4
42735: ARRAY
42736: PPUSH
42737: CALL_OW 254
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: LIST
42746: LIST
42747: PUSH
42748: EMPTY
42749: LIST
42750: ADD
42751: ST_TO_ADDR
42752: GO 42665
42754: POP
42755: POP
// result := list ;
42756: LD_ADDR_VAR 0 2
42760: PUSH
42761: LD_VAR 0 5
42765: ST_TO_ADDR
// end ;
42766: LD_VAR 0 2
42770: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
42771: LD_INT 0
42773: PPUSH
42774: PPUSH
42775: PPUSH
42776: PPUSH
42777: PPUSH
42778: PPUSH
42779: PPUSH
// if not factory then
42780: LD_VAR 0 1
42784: NOT
42785: IFFALSE 42789
// exit ;
42787: GO 43382
// if control = control_apeman then
42789: LD_VAR 0 4
42793: PUSH
42794: LD_INT 5
42796: EQUAL
42797: IFFALSE 42906
// begin tmp := UnitsInside ( factory ) ;
42799: LD_ADDR_VAR 0 8
42803: PUSH
42804: LD_VAR 0 1
42808: PPUSH
42809: CALL_OW 313
42813: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
42814: LD_VAR 0 8
42818: PPUSH
42819: LD_INT 25
42821: PUSH
42822: LD_INT 12
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: PPUSH
42829: CALL_OW 72
42833: NOT
42834: IFFALSE 42844
// control := control_manual ;
42836: LD_ADDR_VAR 0 4
42840: PUSH
42841: LD_INT 1
42843: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
42844: LD_ADDR_VAR 0 8
42848: PUSH
42849: LD_VAR 0 1
42853: PPUSH
42854: CALL 42541 0 1
42858: ST_TO_ADDR
// if tmp then
42859: LD_VAR 0 8
42863: IFFALSE 42906
// begin for i in tmp do
42865: LD_ADDR_VAR 0 7
42869: PUSH
42870: LD_VAR 0 8
42874: PUSH
42875: FOR_IN
42876: IFFALSE 42904
// if i [ 1 ] = b_ext_radio then
42878: LD_VAR 0 7
42882: PUSH
42883: LD_INT 1
42885: ARRAY
42886: PUSH
42887: LD_INT 22
42889: EQUAL
42890: IFFALSE 42902
// begin control := control_remote ;
42892: LD_ADDR_VAR 0 4
42896: PUSH
42897: LD_INT 2
42899: ST_TO_ADDR
// break ;
42900: GO 42904
// end ;
42902: GO 42875
42904: POP
42905: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42906: LD_VAR 0 1
42910: PPUSH
42911: LD_VAR 0 2
42915: PPUSH
42916: LD_VAR 0 3
42920: PPUSH
42921: LD_VAR 0 4
42925: PPUSH
42926: LD_VAR 0 5
42930: PPUSH
42931: CALL_OW 448
42935: IFFALSE 42970
// begin result := [ chassis , engine , control , weapon ] ;
42937: LD_ADDR_VAR 0 6
42941: PUSH
42942: LD_VAR 0 2
42946: PUSH
42947: LD_VAR 0 3
42951: PUSH
42952: LD_VAR 0 4
42956: PUSH
42957: LD_VAR 0 5
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: LIST
42966: LIST
42967: ST_TO_ADDR
// exit ;
42968: GO 43382
// end ; _chassis := AvailableChassisList ( factory ) ;
42970: LD_ADDR_VAR 0 9
42974: PUSH
42975: LD_VAR 0 1
42979: PPUSH
42980: CALL_OW 475
42984: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
42985: LD_ADDR_VAR 0 11
42989: PUSH
42990: LD_VAR 0 1
42994: PPUSH
42995: CALL_OW 476
42999: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
43000: LD_ADDR_VAR 0 12
43004: PUSH
43005: LD_VAR 0 1
43009: PPUSH
43010: CALL_OW 477
43014: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
43015: LD_ADDR_VAR 0 10
43019: PUSH
43020: LD_VAR 0 1
43024: PPUSH
43025: CALL_OW 478
43029: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
43030: LD_VAR 0 9
43034: NOT
43035: PUSH
43036: LD_VAR 0 11
43040: NOT
43041: OR
43042: PUSH
43043: LD_VAR 0 12
43047: NOT
43048: OR
43049: PUSH
43050: LD_VAR 0 10
43054: NOT
43055: OR
43056: IFFALSE 43091
// begin result := [ chassis , engine , control , weapon ] ;
43058: LD_ADDR_VAR 0 6
43062: PUSH
43063: LD_VAR 0 2
43067: PUSH
43068: LD_VAR 0 3
43072: PUSH
43073: LD_VAR 0 4
43077: PUSH
43078: LD_VAR 0 5
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: LIST
43087: LIST
43088: ST_TO_ADDR
// exit ;
43089: GO 43382
// end ; if not chassis in _chassis then
43091: LD_VAR 0 2
43095: PUSH
43096: LD_VAR 0 9
43100: IN
43101: NOT
43102: IFFALSE 43128
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
43104: LD_ADDR_VAR 0 2
43108: PUSH
43109: LD_VAR 0 9
43113: PUSH
43114: LD_INT 1
43116: PPUSH
43117: LD_VAR 0 9
43121: PPUSH
43122: CALL_OW 12
43126: ARRAY
43127: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
43128: LD_VAR 0 2
43132: PPUSH
43133: LD_VAR 0 3
43137: PPUSH
43138: CALL 43387 0 2
43142: NOT
43143: IFFALSE 43202
// repeat engine := _engine [ 1 ] ;
43145: LD_ADDR_VAR 0 3
43149: PUSH
43150: LD_VAR 0 11
43154: PUSH
43155: LD_INT 1
43157: ARRAY
43158: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
43159: LD_ADDR_VAR 0 11
43163: PUSH
43164: LD_VAR 0 11
43168: PPUSH
43169: LD_INT 1
43171: PPUSH
43172: CALL_OW 3
43176: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
43177: LD_VAR 0 2
43181: PPUSH
43182: LD_VAR 0 3
43186: PPUSH
43187: CALL 43387 0 2
43191: PUSH
43192: LD_VAR 0 11
43196: PUSH
43197: EMPTY
43198: EQUAL
43199: OR
43200: IFFALSE 43145
// if not control in _control then
43202: LD_VAR 0 4
43206: PUSH
43207: LD_VAR 0 12
43211: IN
43212: NOT
43213: IFFALSE 43239
// control := _control [ rand ( 1 , _control ) ] ;
43215: LD_ADDR_VAR 0 4
43219: PUSH
43220: LD_VAR 0 12
43224: PUSH
43225: LD_INT 1
43227: PPUSH
43228: LD_VAR 0 12
43232: PPUSH
43233: CALL_OW 12
43237: ARRAY
43238: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
43239: LD_VAR 0 2
43243: PPUSH
43244: LD_VAR 0 5
43248: PPUSH
43249: CALL 43607 0 2
43253: NOT
43254: IFFALSE 43313
// repeat weapon := _weapon [ 1 ] ;
43256: LD_ADDR_VAR 0 5
43260: PUSH
43261: LD_VAR 0 10
43265: PUSH
43266: LD_INT 1
43268: ARRAY
43269: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
43270: LD_ADDR_VAR 0 10
43274: PUSH
43275: LD_VAR 0 10
43279: PPUSH
43280: LD_INT 1
43282: PPUSH
43283: CALL_OW 3
43287: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
43288: LD_VAR 0 2
43292: PPUSH
43293: LD_VAR 0 5
43297: PPUSH
43298: CALL 43607 0 2
43302: PUSH
43303: LD_VAR 0 10
43307: PUSH
43308: EMPTY
43309: EQUAL
43310: OR
43311: IFFALSE 43256
// result := [ ] ;
43313: LD_ADDR_VAR 0 6
43317: PUSH
43318: EMPTY
43319: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43320: LD_VAR 0 1
43324: PPUSH
43325: LD_VAR 0 2
43329: PPUSH
43330: LD_VAR 0 3
43334: PPUSH
43335: LD_VAR 0 4
43339: PPUSH
43340: LD_VAR 0 5
43344: PPUSH
43345: CALL_OW 448
43349: IFFALSE 43382
// result := [ chassis , engine , control , weapon ] ;
43351: LD_ADDR_VAR 0 6
43355: PUSH
43356: LD_VAR 0 2
43360: PUSH
43361: LD_VAR 0 3
43365: PUSH
43366: LD_VAR 0 4
43370: PUSH
43371: LD_VAR 0 5
43375: PUSH
43376: EMPTY
43377: LIST
43378: LIST
43379: LIST
43380: LIST
43381: ST_TO_ADDR
// end ;
43382: LD_VAR 0 6
43386: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
43387: LD_INT 0
43389: PPUSH
// if not chassis or not engine then
43390: LD_VAR 0 1
43394: NOT
43395: PUSH
43396: LD_VAR 0 2
43400: NOT
43401: OR
43402: IFFALSE 43406
// exit ;
43404: GO 43602
// case engine of engine_solar :
43406: LD_VAR 0 2
43410: PUSH
43411: LD_INT 2
43413: DOUBLE
43414: EQUAL
43415: IFTRUE 43419
43417: GO 43457
43419: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
43420: LD_ADDR_VAR 0 3
43424: PUSH
43425: LD_INT 11
43427: PUSH
43428: LD_INT 12
43430: PUSH
43431: LD_INT 13
43433: PUSH
43434: LD_INT 14
43436: PUSH
43437: LD_INT 1
43439: PUSH
43440: LD_INT 2
43442: PUSH
43443: LD_INT 3
43445: PUSH
43446: EMPTY
43447: LIST
43448: LIST
43449: LIST
43450: LIST
43451: LIST
43452: LIST
43453: LIST
43454: ST_TO_ADDR
43455: GO 43586
43457: LD_INT 1
43459: DOUBLE
43460: EQUAL
43461: IFTRUE 43465
43463: GO 43527
43465: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
43466: LD_ADDR_VAR 0 3
43470: PUSH
43471: LD_INT 11
43473: PUSH
43474: LD_INT 12
43476: PUSH
43477: LD_INT 13
43479: PUSH
43480: LD_INT 14
43482: PUSH
43483: LD_INT 1
43485: PUSH
43486: LD_INT 2
43488: PUSH
43489: LD_INT 3
43491: PUSH
43492: LD_INT 4
43494: PUSH
43495: LD_INT 5
43497: PUSH
43498: LD_INT 21
43500: PUSH
43501: LD_INT 23
43503: PUSH
43504: LD_INT 22
43506: PUSH
43507: LD_INT 24
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: LIST
43514: LIST
43515: LIST
43516: LIST
43517: LIST
43518: LIST
43519: LIST
43520: LIST
43521: LIST
43522: LIST
43523: LIST
43524: ST_TO_ADDR
43525: GO 43586
43527: LD_INT 3
43529: DOUBLE
43530: EQUAL
43531: IFTRUE 43535
43533: GO 43585
43535: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43536: LD_ADDR_VAR 0 3
43540: PUSH
43541: LD_INT 13
43543: PUSH
43544: LD_INT 14
43546: PUSH
43547: LD_INT 2
43549: PUSH
43550: LD_INT 3
43552: PUSH
43553: LD_INT 4
43555: PUSH
43556: LD_INT 5
43558: PUSH
43559: LD_INT 21
43561: PUSH
43562: LD_INT 22
43564: PUSH
43565: LD_INT 23
43567: PUSH
43568: LD_INT 24
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: LIST
43575: LIST
43576: LIST
43577: LIST
43578: LIST
43579: LIST
43580: LIST
43581: LIST
43582: ST_TO_ADDR
43583: GO 43586
43585: POP
// result := ( chassis in result ) ;
43586: LD_ADDR_VAR 0 3
43590: PUSH
43591: LD_VAR 0 1
43595: PUSH
43596: LD_VAR 0 3
43600: IN
43601: ST_TO_ADDR
// end ;
43602: LD_VAR 0 3
43606: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
43607: LD_INT 0
43609: PPUSH
// if not chassis or not weapon then
43610: LD_VAR 0 1
43614: NOT
43615: PUSH
43616: LD_VAR 0 2
43620: NOT
43621: OR
43622: IFFALSE 43626
// exit ;
43624: GO 44686
// case weapon of us_machine_gun :
43626: LD_VAR 0 2
43630: PUSH
43631: LD_INT 2
43633: DOUBLE
43634: EQUAL
43635: IFTRUE 43639
43637: GO 43669
43639: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
43640: LD_ADDR_VAR 0 3
43644: PUSH
43645: LD_INT 1
43647: PUSH
43648: LD_INT 2
43650: PUSH
43651: LD_INT 3
43653: PUSH
43654: LD_INT 4
43656: PUSH
43657: LD_INT 5
43659: PUSH
43660: EMPTY
43661: LIST
43662: LIST
43663: LIST
43664: LIST
43665: LIST
43666: ST_TO_ADDR
43667: GO 44670
43669: LD_INT 3
43671: DOUBLE
43672: EQUAL
43673: IFTRUE 43677
43675: GO 43707
43677: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
43678: LD_ADDR_VAR 0 3
43682: PUSH
43683: LD_INT 1
43685: PUSH
43686: LD_INT 2
43688: PUSH
43689: LD_INT 3
43691: PUSH
43692: LD_INT 4
43694: PUSH
43695: LD_INT 5
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: LIST
43702: LIST
43703: LIST
43704: ST_TO_ADDR
43705: GO 44670
43707: LD_INT 11
43709: DOUBLE
43710: EQUAL
43711: IFTRUE 43715
43713: GO 43745
43715: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
43716: LD_ADDR_VAR 0 3
43720: PUSH
43721: LD_INT 1
43723: PUSH
43724: LD_INT 2
43726: PUSH
43727: LD_INT 3
43729: PUSH
43730: LD_INT 4
43732: PUSH
43733: LD_INT 5
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: LIST
43740: LIST
43741: LIST
43742: ST_TO_ADDR
43743: GO 44670
43745: LD_INT 4
43747: DOUBLE
43748: EQUAL
43749: IFTRUE 43753
43751: GO 43779
43753: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
43754: LD_ADDR_VAR 0 3
43758: PUSH
43759: LD_INT 2
43761: PUSH
43762: LD_INT 3
43764: PUSH
43765: LD_INT 4
43767: PUSH
43768: LD_INT 5
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: LIST
43775: LIST
43776: ST_TO_ADDR
43777: GO 44670
43779: LD_INT 5
43781: DOUBLE
43782: EQUAL
43783: IFTRUE 43787
43785: GO 43813
43787: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
43788: LD_ADDR_VAR 0 3
43792: PUSH
43793: LD_INT 2
43795: PUSH
43796: LD_INT 3
43798: PUSH
43799: LD_INT 4
43801: PUSH
43802: LD_INT 5
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: LIST
43809: LIST
43810: ST_TO_ADDR
43811: GO 44670
43813: LD_INT 9
43815: DOUBLE
43816: EQUAL
43817: IFTRUE 43821
43819: GO 43847
43821: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
43822: LD_ADDR_VAR 0 3
43826: PUSH
43827: LD_INT 2
43829: PUSH
43830: LD_INT 3
43832: PUSH
43833: LD_INT 4
43835: PUSH
43836: LD_INT 5
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: ST_TO_ADDR
43845: GO 44670
43847: LD_INT 7
43849: DOUBLE
43850: EQUAL
43851: IFTRUE 43855
43853: GO 43881
43855: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
43856: LD_ADDR_VAR 0 3
43860: PUSH
43861: LD_INT 2
43863: PUSH
43864: LD_INT 3
43866: PUSH
43867: LD_INT 4
43869: PUSH
43870: LD_INT 5
43872: PUSH
43873: EMPTY
43874: LIST
43875: LIST
43876: LIST
43877: LIST
43878: ST_TO_ADDR
43879: GO 44670
43881: LD_INT 12
43883: DOUBLE
43884: EQUAL
43885: IFTRUE 43889
43887: GO 43915
43889: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
43890: LD_ADDR_VAR 0 3
43894: PUSH
43895: LD_INT 2
43897: PUSH
43898: LD_INT 3
43900: PUSH
43901: LD_INT 4
43903: PUSH
43904: LD_INT 5
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: LIST
43911: LIST
43912: ST_TO_ADDR
43913: GO 44670
43915: LD_INT 13
43917: DOUBLE
43918: EQUAL
43919: IFTRUE 43923
43921: GO 43949
43923: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
43924: LD_ADDR_VAR 0 3
43928: PUSH
43929: LD_INT 2
43931: PUSH
43932: LD_INT 3
43934: PUSH
43935: LD_INT 4
43937: PUSH
43938: LD_INT 5
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: LIST
43945: LIST
43946: ST_TO_ADDR
43947: GO 44670
43949: LD_INT 14
43951: DOUBLE
43952: EQUAL
43953: IFTRUE 43957
43955: GO 43975
43957: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
43958: LD_ADDR_VAR 0 3
43962: PUSH
43963: LD_INT 4
43965: PUSH
43966: LD_INT 5
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: ST_TO_ADDR
43973: GO 44670
43975: LD_INT 6
43977: DOUBLE
43978: EQUAL
43979: IFTRUE 43983
43981: GO 44001
43983: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
43984: LD_ADDR_VAR 0 3
43988: PUSH
43989: LD_INT 4
43991: PUSH
43992: LD_INT 5
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: ST_TO_ADDR
43999: GO 44670
44001: LD_INT 10
44003: DOUBLE
44004: EQUAL
44005: IFTRUE 44009
44007: GO 44027
44009: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
44010: LD_ADDR_VAR 0 3
44014: PUSH
44015: LD_INT 4
44017: PUSH
44018: LD_INT 5
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: ST_TO_ADDR
44025: GO 44670
44027: LD_INT 22
44029: DOUBLE
44030: EQUAL
44031: IFTRUE 44035
44033: GO 44061
44035: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
44036: LD_ADDR_VAR 0 3
44040: PUSH
44041: LD_INT 11
44043: PUSH
44044: LD_INT 12
44046: PUSH
44047: LD_INT 13
44049: PUSH
44050: LD_INT 14
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: LIST
44057: LIST
44058: ST_TO_ADDR
44059: GO 44670
44061: LD_INT 23
44063: DOUBLE
44064: EQUAL
44065: IFTRUE 44069
44067: GO 44095
44069: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
44070: LD_ADDR_VAR 0 3
44074: PUSH
44075: LD_INT 11
44077: PUSH
44078: LD_INT 12
44080: PUSH
44081: LD_INT 13
44083: PUSH
44084: LD_INT 14
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: LIST
44091: LIST
44092: ST_TO_ADDR
44093: GO 44670
44095: LD_INT 24
44097: DOUBLE
44098: EQUAL
44099: IFTRUE 44103
44101: GO 44129
44103: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
44104: LD_ADDR_VAR 0 3
44108: PUSH
44109: LD_INT 11
44111: PUSH
44112: LD_INT 12
44114: PUSH
44115: LD_INT 13
44117: PUSH
44118: LD_INT 14
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: LIST
44125: LIST
44126: ST_TO_ADDR
44127: GO 44670
44129: LD_INT 30
44131: DOUBLE
44132: EQUAL
44133: IFTRUE 44137
44135: GO 44163
44137: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
44138: LD_ADDR_VAR 0 3
44142: PUSH
44143: LD_INT 11
44145: PUSH
44146: LD_INT 12
44148: PUSH
44149: LD_INT 13
44151: PUSH
44152: LD_INT 14
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: LIST
44159: LIST
44160: ST_TO_ADDR
44161: GO 44670
44163: LD_INT 25
44165: DOUBLE
44166: EQUAL
44167: IFTRUE 44171
44169: GO 44189
44171: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
44172: LD_ADDR_VAR 0 3
44176: PUSH
44177: LD_INT 13
44179: PUSH
44180: LD_INT 14
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: ST_TO_ADDR
44187: GO 44670
44189: LD_INT 27
44191: DOUBLE
44192: EQUAL
44193: IFTRUE 44197
44195: GO 44215
44197: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
44198: LD_ADDR_VAR 0 3
44202: PUSH
44203: LD_INT 13
44205: PUSH
44206: LD_INT 14
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: ST_TO_ADDR
44213: GO 44670
44215: LD_INT 92
44217: DOUBLE
44218: EQUAL
44219: IFTRUE 44223
44221: GO 44249
44223: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
44224: LD_ADDR_VAR 0 3
44228: PUSH
44229: LD_INT 11
44231: PUSH
44232: LD_INT 12
44234: PUSH
44235: LD_INT 13
44237: PUSH
44238: LD_INT 14
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: LIST
44245: LIST
44246: ST_TO_ADDR
44247: GO 44670
44249: LD_INT 28
44251: DOUBLE
44252: EQUAL
44253: IFTRUE 44257
44255: GO 44275
44257: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
44258: LD_ADDR_VAR 0 3
44262: PUSH
44263: LD_INT 13
44265: PUSH
44266: LD_INT 14
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: ST_TO_ADDR
44273: GO 44670
44275: LD_INT 29
44277: DOUBLE
44278: EQUAL
44279: IFTRUE 44283
44281: GO 44301
44283: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
44284: LD_ADDR_VAR 0 3
44288: PUSH
44289: LD_INT 13
44291: PUSH
44292: LD_INT 14
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: ST_TO_ADDR
44299: GO 44670
44301: LD_INT 31
44303: DOUBLE
44304: EQUAL
44305: IFTRUE 44309
44307: GO 44327
44309: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
44310: LD_ADDR_VAR 0 3
44314: PUSH
44315: LD_INT 13
44317: PUSH
44318: LD_INT 14
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: ST_TO_ADDR
44325: GO 44670
44327: LD_INT 26
44329: DOUBLE
44330: EQUAL
44331: IFTRUE 44335
44333: GO 44353
44335: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
44336: LD_ADDR_VAR 0 3
44340: PUSH
44341: LD_INT 13
44343: PUSH
44344: LD_INT 14
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: ST_TO_ADDR
44351: GO 44670
44353: LD_INT 42
44355: DOUBLE
44356: EQUAL
44357: IFTRUE 44361
44359: GO 44387
44361: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
44362: LD_ADDR_VAR 0 3
44366: PUSH
44367: LD_INT 21
44369: PUSH
44370: LD_INT 22
44372: PUSH
44373: LD_INT 23
44375: PUSH
44376: LD_INT 24
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: LIST
44383: LIST
44384: ST_TO_ADDR
44385: GO 44670
44387: LD_INT 43
44389: DOUBLE
44390: EQUAL
44391: IFTRUE 44395
44393: GO 44421
44395: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
44396: LD_ADDR_VAR 0 3
44400: PUSH
44401: LD_INT 21
44403: PUSH
44404: LD_INT 22
44406: PUSH
44407: LD_INT 23
44409: PUSH
44410: LD_INT 24
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: ST_TO_ADDR
44419: GO 44670
44421: LD_INT 44
44423: DOUBLE
44424: EQUAL
44425: IFTRUE 44429
44427: GO 44455
44429: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
44430: LD_ADDR_VAR 0 3
44434: PUSH
44435: LD_INT 21
44437: PUSH
44438: LD_INT 22
44440: PUSH
44441: LD_INT 23
44443: PUSH
44444: LD_INT 24
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: LIST
44451: LIST
44452: ST_TO_ADDR
44453: GO 44670
44455: LD_INT 45
44457: DOUBLE
44458: EQUAL
44459: IFTRUE 44463
44461: GO 44489
44463: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
44464: LD_ADDR_VAR 0 3
44468: PUSH
44469: LD_INT 21
44471: PUSH
44472: LD_INT 22
44474: PUSH
44475: LD_INT 23
44477: PUSH
44478: LD_INT 24
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: LIST
44485: LIST
44486: ST_TO_ADDR
44487: GO 44670
44489: LD_INT 49
44491: DOUBLE
44492: EQUAL
44493: IFTRUE 44497
44495: GO 44523
44497: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
44498: LD_ADDR_VAR 0 3
44502: PUSH
44503: LD_INT 21
44505: PUSH
44506: LD_INT 22
44508: PUSH
44509: LD_INT 23
44511: PUSH
44512: LD_INT 24
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: LIST
44519: LIST
44520: ST_TO_ADDR
44521: GO 44670
44523: LD_INT 51
44525: DOUBLE
44526: EQUAL
44527: IFTRUE 44531
44529: GO 44557
44531: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
44532: LD_ADDR_VAR 0 3
44536: PUSH
44537: LD_INT 21
44539: PUSH
44540: LD_INT 22
44542: PUSH
44543: LD_INT 23
44545: PUSH
44546: LD_INT 24
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: LIST
44553: LIST
44554: ST_TO_ADDR
44555: GO 44670
44557: LD_INT 52
44559: DOUBLE
44560: EQUAL
44561: IFTRUE 44565
44563: GO 44591
44565: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
44566: LD_ADDR_VAR 0 3
44570: PUSH
44571: LD_INT 21
44573: PUSH
44574: LD_INT 22
44576: PUSH
44577: LD_INT 23
44579: PUSH
44580: LD_INT 24
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: LIST
44587: LIST
44588: ST_TO_ADDR
44589: GO 44670
44591: LD_INT 53
44593: DOUBLE
44594: EQUAL
44595: IFTRUE 44599
44597: GO 44617
44599: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
44600: LD_ADDR_VAR 0 3
44604: PUSH
44605: LD_INT 23
44607: PUSH
44608: LD_INT 24
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: ST_TO_ADDR
44615: GO 44670
44617: LD_INT 46
44619: DOUBLE
44620: EQUAL
44621: IFTRUE 44625
44623: GO 44643
44625: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
44626: LD_ADDR_VAR 0 3
44630: PUSH
44631: LD_INT 23
44633: PUSH
44634: LD_INT 24
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: ST_TO_ADDR
44641: GO 44670
44643: LD_INT 47
44645: DOUBLE
44646: EQUAL
44647: IFTRUE 44651
44649: GO 44669
44651: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44652: LD_ADDR_VAR 0 3
44656: PUSH
44657: LD_INT 23
44659: PUSH
44660: LD_INT 24
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: ST_TO_ADDR
44667: GO 44670
44669: POP
// result := ( chassis in result ) ;
44670: LD_ADDR_VAR 0 3
44674: PUSH
44675: LD_VAR 0 1
44679: PUSH
44680: LD_VAR 0 3
44684: IN
44685: ST_TO_ADDR
// end ;
44686: LD_VAR 0 3
44690: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
44691: LD_INT 0
44693: PPUSH
44694: PPUSH
44695: PPUSH
44696: PPUSH
44697: PPUSH
44698: PPUSH
44699: PPUSH
// result := array ;
44700: LD_ADDR_VAR 0 5
44704: PUSH
44705: LD_VAR 0 1
44709: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
44710: LD_VAR 0 1
44714: NOT
44715: PUSH
44716: LD_VAR 0 2
44720: NOT
44721: OR
44722: PUSH
44723: LD_VAR 0 3
44727: NOT
44728: OR
44729: PUSH
44730: LD_VAR 0 2
44734: PUSH
44735: LD_VAR 0 1
44739: GREATER
44740: OR
44741: PUSH
44742: LD_VAR 0 3
44746: PUSH
44747: LD_VAR 0 1
44751: GREATER
44752: OR
44753: IFFALSE 44757
// exit ;
44755: GO 45053
// if direction then
44757: LD_VAR 0 4
44761: IFFALSE 44825
// begin d := 1 ;
44763: LD_ADDR_VAR 0 9
44767: PUSH
44768: LD_INT 1
44770: ST_TO_ADDR
// if i_from > i_to then
44771: LD_VAR 0 2
44775: PUSH
44776: LD_VAR 0 3
44780: GREATER
44781: IFFALSE 44807
// length := ( array - i_from ) + i_to else
44783: LD_ADDR_VAR 0 11
44787: PUSH
44788: LD_VAR 0 1
44792: PUSH
44793: LD_VAR 0 2
44797: MINUS
44798: PUSH
44799: LD_VAR 0 3
44803: PLUS
44804: ST_TO_ADDR
44805: GO 44823
// length := i_to - i_from ;
44807: LD_ADDR_VAR 0 11
44811: PUSH
44812: LD_VAR 0 3
44816: PUSH
44817: LD_VAR 0 2
44821: MINUS
44822: ST_TO_ADDR
// end else
44823: GO 44886
// begin d := - 1 ;
44825: LD_ADDR_VAR 0 9
44829: PUSH
44830: LD_INT 1
44832: NEG
44833: ST_TO_ADDR
// if i_from > i_to then
44834: LD_VAR 0 2
44838: PUSH
44839: LD_VAR 0 3
44843: GREATER
44844: IFFALSE 44864
// length := i_from - i_to else
44846: LD_ADDR_VAR 0 11
44850: PUSH
44851: LD_VAR 0 2
44855: PUSH
44856: LD_VAR 0 3
44860: MINUS
44861: ST_TO_ADDR
44862: GO 44886
// length := ( array - i_to ) + i_from ;
44864: LD_ADDR_VAR 0 11
44868: PUSH
44869: LD_VAR 0 1
44873: PUSH
44874: LD_VAR 0 3
44878: MINUS
44879: PUSH
44880: LD_VAR 0 2
44884: PLUS
44885: ST_TO_ADDR
// end ; if not length then
44886: LD_VAR 0 11
44890: NOT
44891: IFFALSE 44895
// exit ;
44893: GO 45053
// tmp := array ;
44895: LD_ADDR_VAR 0 10
44899: PUSH
44900: LD_VAR 0 1
44904: ST_TO_ADDR
// for i = 1 to length do
44905: LD_ADDR_VAR 0 6
44909: PUSH
44910: DOUBLE
44911: LD_INT 1
44913: DEC
44914: ST_TO_ADDR
44915: LD_VAR 0 11
44919: PUSH
44920: FOR_TO
44921: IFFALSE 45041
// begin for j = 1 to array do
44923: LD_ADDR_VAR 0 7
44927: PUSH
44928: DOUBLE
44929: LD_INT 1
44931: DEC
44932: ST_TO_ADDR
44933: LD_VAR 0 1
44937: PUSH
44938: FOR_TO
44939: IFFALSE 45027
// begin k := j + d ;
44941: LD_ADDR_VAR 0 8
44945: PUSH
44946: LD_VAR 0 7
44950: PUSH
44951: LD_VAR 0 9
44955: PLUS
44956: ST_TO_ADDR
// if k > array then
44957: LD_VAR 0 8
44961: PUSH
44962: LD_VAR 0 1
44966: GREATER
44967: IFFALSE 44977
// k := 1 ;
44969: LD_ADDR_VAR 0 8
44973: PUSH
44974: LD_INT 1
44976: ST_TO_ADDR
// if not k then
44977: LD_VAR 0 8
44981: NOT
44982: IFFALSE 44994
// k := array ;
44984: LD_ADDR_VAR 0 8
44988: PUSH
44989: LD_VAR 0 1
44993: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
44994: LD_ADDR_VAR 0 10
44998: PUSH
44999: LD_VAR 0 10
45003: PPUSH
45004: LD_VAR 0 8
45008: PPUSH
45009: LD_VAR 0 1
45013: PUSH
45014: LD_VAR 0 7
45018: ARRAY
45019: PPUSH
45020: CALL_OW 1
45024: ST_TO_ADDR
// end ;
45025: GO 44938
45027: POP
45028: POP
// array := tmp ;
45029: LD_ADDR_VAR 0 1
45033: PUSH
45034: LD_VAR 0 10
45038: ST_TO_ADDR
// end ;
45039: GO 44920
45041: POP
45042: POP
// result := array ;
45043: LD_ADDR_VAR 0 5
45047: PUSH
45048: LD_VAR 0 1
45052: ST_TO_ADDR
// end ;
45053: LD_VAR 0 5
45057: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
45058: LD_INT 0
45060: PPUSH
45061: PPUSH
// result := 0 ;
45062: LD_ADDR_VAR 0 3
45066: PUSH
45067: LD_INT 0
45069: ST_TO_ADDR
// if not array or not value in array then
45070: LD_VAR 0 1
45074: NOT
45075: PUSH
45076: LD_VAR 0 2
45080: PUSH
45081: LD_VAR 0 1
45085: IN
45086: NOT
45087: OR
45088: IFFALSE 45092
// exit ;
45090: GO 45146
// for i = 1 to array do
45092: LD_ADDR_VAR 0 4
45096: PUSH
45097: DOUBLE
45098: LD_INT 1
45100: DEC
45101: ST_TO_ADDR
45102: LD_VAR 0 1
45106: PUSH
45107: FOR_TO
45108: IFFALSE 45144
// if value = array [ i ] then
45110: LD_VAR 0 2
45114: PUSH
45115: LD_VAR 0 1
45119: PUSH
45120: LD_VAR 0 4
45124: ARRAY
45125: EQUAL
45126: IFFALSE 45142
// begin result := i ;
45128: LD_ADDR_VAR 0 3
45132: PUSH
45133: LD_VAR 0 4
45137: ST_TO_ADDR
// exit ;
45138: POP
45139: POP
45140: GO 45146
// end ;
45142: GO 45107
45144: POP
45145: POP
// end ;
45146: LD_VAR 0 3
45150: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
45151: LD_INT 0
45153: PPUSH
// vc_chassis := chassis ;
45154: LD_ADDR_OWVAR 37
45158: PUSH
45159: LD_VAR 0 1
45163: ST_TO_ADDR
// vc_engine := engine ;
45164: LD_ADDR_OWVAR 39
45168: PUSH
45169: LD_VAR 0 2
45173: ST_TO_ADDR
// vc_control := control ;
45174: LD_ADDR_OWVAR 38
45178: PUSH
45179: LD_VAR 0 3
45183: ST_TO_ADDR
// vc_weapon := weapon ;
45184: LD_ADDR_OWVAR 40
45188: PUSH
45189: LD_VAR 0 4
45193: ST_TO_ADDR
// vc_fuel_battery := fuel ;
45194: LD_ADDR_OWVAR 41
45198: PUSH
45199: LD_VAR 0 5
45203: ST_TO_ADDR
// end ;
45204: LD_VAR 0 6
45208: RET
// export function WantPlant ( unit ) ; var task ; begin
45209: LD_INT 0
45211: PPUSH
45212: PPUSH
// result := false ;
45213: LD_ADDR_VAR 0 2
45217: PUSH
45218: LD_INT 0
45220: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
45221: LD_ADDR_VAR 0 3
45225: PUSH
45226: LD_VAR 0 1
45230: PPUSH
45231: CALL_OW 437
45235: ST_TO_ADDR
// if task then
45236: LD_VAR 0 3
45240: IFFALSE 45268
// if task [ 1 ] [ 1 ] = p then
45242: LD_VAR 0 3
45246: PUSH
45247: LD_INT 1
45249: ARRAY
45250: PUSH
45251: LD_INT 1
45253: ARRAY
45254: PUSH
45255: LD_STRING p
45257: EQUAL
45258: IFFALSE 45268
// result := true ;
45260: LD_ADDR_VAR 0 2
45264: PUSH
45265: LD_INT 1
45267: ST_TO_ADDR
// end ;
45268: LD_VAR 0 2
45272: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
45273: LD_INT 0
45275: PPUSH
45276: PPUSH
45277: PPUSH
45278: PPUSH
// if pos < 1 then
45279: LD_VAR 0 2
45283: PUSH
45284: LD_INT 1
45286: LESS
45287: IFFALSE 45291
// exit ;
45289: GO 45594
// if pos = 1 then
45291: LD_VAR 0 2
45295: PUSH
45296: LD_INT 1
45298: EQUAL
45299: IFFALSE 45332
// result := Replace ( arr , pos [ 1 ] , value ) else
45301: LD_ADDR_VAR 0 4
45305: PUSH
45306: LD_VAR 0 1
45310: PPUSH
45311: LD_VAR 0 2
45315: PUSH
45316: LD_INT 1
45318: ARRAY
45319: PPUSH
45320: LD_VAR 0 3
45324: PPUSH
45325: CALL_OW 1
45329: ST_TO_ADDR
45330: GO 45594
// begin tmp := arr ;
45332: LD_ADDR_VAR 0 6
45336: PUSH
45337: LD_VAR 0 1
45341: ST_TO_ADDR
// s_arr := [ tmp ] ;
45342: LD_ADDR_VAR 0 7
45346: PUSH
45347: LD_VAR 0 6
45351: PUSH
45352: EMPTY
45353: LIST
45354: ST_TO_ADDR
// for i = 1 to pos - 1 do
45355: LD_ADDR_VAR 0 5
45359: PUSH
45360: DOUBLE
45361: LD_INT 1
45363: DEC
45364: ST_TO_ADDR
45365: LD_VAR 0 2
45369: PUSH
45370: LD_INT 1
45372: MINUS
45373: PUSH
45374: FOR_TO
45375: IFFALSE 45420
// begin tmp := tmp [ pos [ i ] ] ;
45377: LD_ADDR_VAR 0 6
45381: PUSH
45382: LD_VAR 0 6
45386: PUSH
45387: LD_VAR 0 2
45391: PUSH
45392: LD_VAR 0 5
45396: ARRAY
45397: ARRAY
45398: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
45399: LD_ADDR_VAR 0 7
45403: PUSH
45404: LD_VAR 0 7
45408: PUSH
45409: LD_VAR 0 6
45413: PUSH
45414: EMPTY
45415: LIST
45416: ADD
45417: ST_TO_ADDR
// end ;
45418: GO 45374
45420: POP
45421: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
45422: LD_ADDR_VAR 0 6
45426: PUSH
45427: LD_VAR 0 6
45431: PPUSH
45432: LD_VAR 0 2
45436: PUSH
45437: LD_VAR 0 2
45441: ARRAY
45442: PPUSH
45443: LD_VAR 0 3
45447: PPUSH
45448: CALL_OW 1
45452: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
45453: LD_ADDR_VAR 0 7
45457: PUSH
45458: LD_VAR 0 7
45462: PPUSH
45463: LD_VAR 0 7
45467: PPUSH
45468: LD_VAR 0 6
45472: PPUSH
45473: CALL_OW 1
45477: ST_TO_ADDR
// for i = s_arr downto 2 do
45478: LD_ADDR_VAR 0 5
45482: PUSH
45483: DOUBLE
45484: LD_VAR 0 7
45488: INC
45489: ST_TO_ADDR
45490: LD_INT 2
45492: PUSH
45493: FOR_DOWNTO
45494: IFFALSE 45578
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
45496: LD_ADDR_VAR 0 6
45500: PUSH
45501: LD_VAR 0 7
45505: PUSH
45506: LD_VAR 0 5
45510: PUSH
45511: LD_INT 1
45513: MINUS
45514: ARRAY
45515: PPUSH
45516: LD_VAR 0 2
45520: PUSH
45521: LD_VAR 0 5
45525: PUSH
45526: LD_INT 1
45528: MINUS
45529: ARRAY
45530: PPUSH
45531: LD_VAR 0 7
45535: PUSH
45536: LD_VAR 0 5
45540: ARRAY
45541: PPUSH
45542: CALL_OW 1
45546: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
45547: LD_ADDR_VAR 0 7
45551: PUSH
45552: LD_VAR 0 7
45556: PPUSH
45557: LD_VAR 0 5
45561: PUSH
45562: LD_INT 1
45564: MINUS
45565: PPUSH
45566: LD_VAR 0 6
45570: PPUSH
45571: CALL_OW 1
45575: ST_TO_ADDR
// end ;
45576: GO 45493
45578: POP
45579: POP
// result := s_arr [ 1 ] ;
45580: LD_ADDR_VAR 0 4
45584: PUSH
45585: LD_VAR 0 7
45589: PUSH
45590: LD_INT 1
45592: ARRAY
45593: ST_TO_ADDR
// end ; end ;
45594: LD_VAR 0 4
45598: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
45599: LD_INT 0
45601: PPUSH
45602: PPUSH
// if not list then
45603: LD_VAR 0 1
45607: NOT
45608: IFFALSE 45612
// exit ;
45610: GO 45703
// i := list [ pos1 ] ;
45612: LD_ADDR_VAR 0 5
45616: PUSH
45617: LD_VAR 0 1
45621: PUSH
45622: LD_VAR 0 2
45626: ARRAY
45627: ST_TO_ADDR
// if not i then
45628: LD_VAR 0 5
45632: NOT
45633: IFFALSE 45637
// exit ;
45635: GO 45703
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
45637: LD_ADDR_VAR 0 1
45641: PUSH
45642: LD_VAR 0 1
45646: PPUSH
45647: LD_VAR 0 2
45651: PPUSH
45652: LD_VAR 0 1
45656: PUSH
45657: LD_VAR 0 3
45661: ARRAY
45662: PPUSH
45663: CALL_OW 1
45667: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
45668: LD_ADDR_VAR 0 1
45672: PUSH
45673: LD_VAR 0 1
45677: PPUSH
45678: LD_VAR 0 3
45682: PPUSH
45683: LD_VAR 0 5
45687: PPUSH
45688: CALL_OW 1
45692: ST_TO_ADDR
// result := list ;
45693: LD_ADDR_VAR 0 4
45697: PUSH
45698: LD_VAR 0 1
45702: ST_TO_ADDR
// end ;
45703: LD_VAR 0 4
45707: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
45708: LD_INT 0
45710: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
45711: LD_ADDR_VAR 0 5
45715: PUSH
45716: LD_VAR 0 1
45720: PPUSH
45721: CALL_OW 250
45725: PPUSH
45726: LD_VAR 0 1
45730: PPUSH
45731: CALL_OW 251
45735: PPUSH
45736: LD_VAR 0 2
45740: PPUSH
45741: LD_VAR 0 3
45745: PPUSH
45746: LD_VAR 0 4
45750: PPUSH
45751: CALL 46129 0 5
45755: ST_TO_ADDR
// end ;
45756: LD_VAR 0 5
45760: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
45761: LD_INT 0
45763: PPUSH
45764: PPUSH
45765: PPUSH
45766: PPUSH
// if not list or not unit then
45767: LD_VAR 0 2
45771: NOT
45772: PUSH
45773: LD_VAR 0 1
45777: NOT
45778: OR
45779: IFFALSE 45783
// exit ;
45781: GO 46124
// result := [ ] ;
45783: LD_ADDR_VAR 0 5
45787: PUSH
45788: EMPTY
45789: ST_TO_ADDR
// for i in list do
45790: LD_ADDR_VAR 0 6
45794: PUSH
45795: LD_VAR 0 2
45799: PUSH
45800: FOR_IN
45801: IFFALSE 46019
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
45803: LD_ADDR_VAR 0 8
45807: PUSH
45808: LD_VAR 0 1
45812: PPUSH
45813: LD_VAR 0 6
45817: PUSH
45818: LD_INT 1
45820: ARRAY
45821: PPUSH
45822: LD_VAR 0 6
45826: PUSH
45827: LD_INT 2
45829: ARRAY
45830: PPUSH
45831: CALL_OW 297
45835: ST_TO_ADDR
// if not Count ( result ) then
45836: LD_VAR 0 5
45840: PPUSH
45841: CALL 42413 0 1
45845: NOT
45846: IFFALSE 45879
// begin result := Join ( result , [ i , tmp ] ) ;
45848: LD_ADDR_VAR 0 5
45852: PUSH
45853: LD_VAR 0 5
45857: PPUSH
45858: LD_VAR 0 6
45862: PUSH
45863: LD_VAR 0 8
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PPUSH
45872: CALL 78013 0 2
45876: ST_TO_ADDR
// continue ;
45877: GO 45800
// end ; if result [ result ] [ 2 ] <= tmp then
45879: LD_VAR 0 5
45883: PUSH
45884: LD_VAR 0 5
45888: ARRAY
45889: PUSH
45890: LD_INT 2
45892: ARRAY
45893: PUSH
45894: LD_VAR 0 8
45898: LESSEQUAL
45899: IFFALSE 45932
// result := Join ( result , [ i , tmp ] ) else
45901: LD_ADDR_VAR 0 5
45905: PUSH
45906: LD_VAR 0 5
45910: PPUSH
45911: LD_VAR 0 6
45915: PUSH
45916: LD_VAR 0 8
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PPUSH
45925: CALL 78013 0 2
45929: ST_TO_ADDR
45930: GO 46017
// begin for j := 1 to Count ( result ) do
45932: LD_ADDR_VAR 0 7
45936: PUSH
45937: DOUBLE
45938: LD_INT 1
45940: DEC
45941: ST_TO_ADDR
45942: LD_VAR 0 5
45946: PPUSH
45947: CALL 42413 0 1
45951: PUSH
45952: FOR_TO
45953: IFFALSE 46015
// begin if tmp < result [ j ] [ 2 ] then
45955: LD_VAR 0 8
45959: PUSH
45960: LD_VAR 0 5
45964: PUSH
45965: LD_VAR 0 7
45969: ARRAY
45970: PUSH
45971: LD_INT 2
45973: ARRAY
45974: LESS
45975: IFFALSE 46013
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45977: LD_ADDR_VAR 0 5
45981: PUSH
45982: LD_VAR 0 5
45986: PPUSH
45987: LD_VAR 0 7
45991: PPUSH
45992: LD_VAR 0 6
45996: PUSH
45997: LD_VAR 0 8
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PPUSH
46006: CALL_OW 2
46010: ST_TO_ADDR
// break ;
46011: GO 46015
// end ; end ;
46013: GO 45952
46015: POP
46016: POP
// end ; end ;
46017: GO 45800
46019: POP
46020: POP
// if result and not asc then
46021: LD_VAR 0 5
46025: PUSH
46026: LD_VAR 0 3
46030: NOT
46031: AND
46032: IFFALSE 46049
// result := ReverseArray ( result ) ;
46034: LD_ADDR_VAR 0 5
46038: PUSH
46039: LD_VAR 0 5
46043: PPUSH
46044: CALL 73289 0 1
46048: ST_TO_ADDR
// tmp := [ ] ;
46049: LD_ADDR_VAR 0 8
46053: PUSH
46054: EMPTY
46055: ST_TO_ADDR
// if mode then
46056: LD_VAR 0 4
46060: IFFALSE 46124
// begin for i := 1 to result do
46062: LD_ADDR_VAR 0 6
46066: PUSH
46067: DOUBLE
46068: LD_INT 1
46070: DEC
46071: ST_TO_ADDR
46072: LD_VAR 0 5
46076: PUSH
46077: FOR_TO
46078: IFFALSE 46112
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
46080: LD_ADDR_VAR 0 8
46084: PUSH
46085: LD_VAR 0 8
46089: PPUSH
46090: LD_VAR 0 5
46094: PUSH
46095: LD_VAR 0 6
46099: ARRAY
46100: PUSH
46101: LD_INT 1
46103: ARRAY
46104: PPUSH
46105: CALL 78013 0 2
46109: ST_TO_ADDR
46110: GO 46077
46112: POP
46113: POP
// result := tmp ;
46114: LD_ADDR_VAR 0 5
46118: PUSH
46119: LD_VAR 0 8
46123: ST_TO_ADDR
// end ; end ;
46124: LD_VAR 0 5
46128: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
46129: LD_INT 0
46131: PPUSH
46132: PPUSH
46133: PPUSH
46134: PPUSH
// if not list then
46135: LD_VAR 0 3
46139: NOT
46140: IFFALSE 46144
// exit ;
46142: GO 46532
// result := [ ] ;
46144: LD_ADDR_VAR 0 6
46148: PUSH
46149: EMPTY
46150: ST_TO_ADDR
// for i in list do
46151: LD_ADDR_VAR 0 7
46155: PUSH
46156: LD_VAR 0 3
46160: PUSH
46161: FOR_IN
46162: IFFALSE 46364
// begin tmp := GetDistUnitXY ( i , x , y ) ;
46164: LD_ADDR_VAR 0 9
46168: PUSH
46169: LD_VAR 0 7
46173: PPUSH
46174: LD_VAR 0 1
46178: PPUSH
46179: LD_VAR 0 2
46183: PPUSH
46184: CALL_OW 297
46188: ST_TO_ADDR
// if not result then
46189: LD_VAR 0 6
46193: NOT
46194: IFFALSE 46220
// result := [ [ i , tmp ] ] else
46196: LD_ADDR_VAR 0 6
46200: PUSH
46201: LD_VAR 0 7
46205: PUSH
46206: LD_VAR 0 9
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: EMPTY
46216: LIST
46217: ST_TO_ADDR
46218: GO 46362
// begin if result [ result ] [ 2 ] < tmp then
46220: LD_VAR 0 6
46224: PUSH
46225: LD_VAR 0 6
46229: ARRAY
46230: PUSH
46231: LD_INT 2
46233: ARRAY
46234: PUSH
46235: LD_VAR 0 9
46239: LESS
46240: IFFALSE 46282
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
46242: LD_ADDR_VAR 0 6
46246: PUSH
46247: LD_VAR 0 6
46251: PPUSH
46252: LD_VAR 0 6
46256: PUSH
46257: LD_INT 1
46259: PLUS
46260: PPUSH
46261: LD_VAR 0 7
46265: PUSH
46266: LD_VAR 0 9
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PPUSH
46275: CALL_OW 2
46279: ST_TO_ADDR
46280: GO 46362
// for j = 1 to result do
46282: LD_ADDR_VAR 0 8
46286: PUSH
46287: DOUBLE
46288: LD_INT 1
46290: DEC
46291: ST_TO_ADDR
46292: LD_VAR 0 6
46296: PUSH
46297: FOR_TO
46298: IFFALSE 46360
// begin if tmp < result [ j ] [ 2 ] then
46300: LD_VAR 0 9
46304: PUSH
46305: LD_VAR 0 6
46309: PUSH
46310: LD_VAR 0 8
46314: ARRAY
46315: PUSH
46316: LD_INT 2
46318: ARRAY
46319: LESS
46320: IFFALSE 46358
// begin result := Insert ( result , j , [ i , tmp ] ) ;
46322: LD_ADDR_VAR 0 6
46326: PUSH
46327: LD_VAR 0 6
46331: PPUSH
46332: LD_VAR 0 8
46336: PPUSH
46337: LD_VAR 0 7
46341: PUSH
46342: LD_VAR 0 9
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PPUSH
46351: CALL_OW 2
46355: ST_TO_ADDR
// break ;
46356: GO 46360
// end ; end ;
46358: GO 46297
46360: POP
46361: POP
// end ; end ;
46362: GO 46161
46364: POP
46365: POP
// if result and not asc then
46366: LD_VAR 0 6
46370: PUSH
46371: LD_VAR 0 4
46375: NOT
46376: AND
46377: IFFALSE 46452
// begin tmp := result ;
46379: LD_ADDR_VAR 0 9
46383: PUSH
46384: LD_VAR 0 6
46388: ST_TO_ADDR
// for i = tmp downto 1 do
46389: LD_ADDR_VAR 0 7
46393: PUSH
46394: DOUBLE
46395: LD_VAR 0 9
46399: INC
46400: ST_TO_ADDR
46401: LD_INT 1
46403: PUSH
46404: FOR_DOWNTO
46405: IFFALSE 46450
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
46407: LD_ADDR_VAR 0 6
46411: PUSH
46412: LD_VAR 0 6
46416: PPUSH
46417: LD_VAR 0 9
46421: PUSH
46422: LD_VAR 0 7
46426: MINUS
46427: PUSH
46428: LD_INT 1
46430: PLUS
46431: PPUSH
46432: LD_VAR 0 9
46436: PUSH
46437: LD_VAR 0 7
46441: ARRAY
46442: PPUSH
46443: CALL_OW 1
46447: ST_TO_ADDR
46448: GO 46404
46450: POP
46451: POP
// end ; tmp := [ ] ;
46452: LD_ADDR_VAR 0 9
46456: PUSH
46457: EMPTY
46458: ST_TO_ADDR
// if mode then
46459: LD_VAR 0 5
46463: IFFALSE 46532
// begin for i = 1 to result do
46465: LD_ADDR_VAR 0 7
46469: PUSH
46470: DOUBLE
46471: LD_INT 1
46473: DEC
46474: ST_TO_ADDR
46475: LD_VAR 0 6
46479: PUSH
46480: FOR_TO
46481: IFFALSE 46520
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
46483: LD_ADDR_VAR 0 9
46487: PUSH
46488: LD_VAR 0 9
46492: PPUSH
46493: LD_VAR 0 7
46497: PPUSH
46498: LD_VAR 0 6
46502: PUSH
46503: LD_VAR 0 7
46507: ARRAY
46508: PUSH
46509: LD_INT 1
46511: ARRAY
46512: PPUSH
46513: CALL_OW 1
46517: ST_TO_ADDR
46518: GO 46480
46520: POP
46521: POP
// result := tmp ;
46522: LD_ADDR_VAR 0 6
46526: PUSH
46527: LD_VAR 0 9
46531: ST_TO_ADDR
// end ; end ;
46532: LD_VAR 0 6
46536: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
46537: LD_INT 0
46539: PPUSH
46540: PPUSH
46541: PPUSH
46542: PPUSH
46543: PPUSH
46544: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
46545: LD_ADDR_VAR 0 5
46549: PUSH
46550: LD_INT 0
46552: PUSH
46553: LD_INT 0
46555: PUSH
46556: LD_INT 0
46558: PUSH
46559: EMPTY
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: ST_TO_ADDR
// if not x or not y then
46567: LD_VAR 0 2
46571: NOT
46572: PUSH
46573: LD_VAR 0 3
46577: NOT
46578: OR
46579: IFFALSE 46583
// exit ;
46581: GO 48233
// if not range then
46583: LD_VAR 0 4
46587: NOT
46588: IFFALSE 46598
// range := 10 ;
46590: LD_ADDR_VAR 0 4
46594: PUSH
46595: LD_INT 10
46597: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
46598: LD_ADDR_VAR 0 8
46602: PUSH
46603: LD_INT 81
46605: PUSH
46606: LD_VAR 0 1
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 92
46617: PUSH
46618: LD_VAR 0 2
46622: PUSH
46623: LD_VAR 0 3
46627: PUSH
46628: LD_VAR 0 4
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: LIST
46637: LIST
46638: PUSH
46639: LD_INT 3
46641: PUSH
46642: LD_INT 21
46644: PUSH
46645: LD_INT 3
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: LIST
46660: PPUSH
46661: CALL_OW 69
46665: ST_TO_ADDR
// if not tmp then
46666: LD_VAR 0 8
46670: NOT
46671: IFFALSE 46675
// exit ;
46673: GO 48233
// for i in tmp do
46675: LD_ADDR_VAR 0 6
46679: PUSH
46680: LD_VAR 0 8
46684: PUSH
46685: FOR_IN
46686: IFFALSE 48208
// begin points := [ 0 , 0 , 0 ] ;
46688: LD_ADDR_VAR 0 9
46692: PUSH
46693: LD_INT 0
46695: PUSH
46696: LD_INT 0
46698: PUSH
46699: LD_INT 0
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: LIST
46706: ST_TO_ADDR
// bpoints := 1 ;
46707: LD_ADDR_VAR 0 10
46711: PUSH
46712: LD_INT 1
46714: ST_TO_ADDR
// case GetType ( i ) of unit_human :
46715: LD_VAR 0 6
46719: PPUSH
46720: CALL_OW 247
46724: PUSH
46725: LD_INT 1
46727: DOUBLE
46728: EQUAL
46729: IFTRUE 46733
46731: GO 47311
46733: POP
// begin if GetClass ( i ) = 1 then
46734: LD_VAR 0 6
46738: PPUSH
46739: CALL_OW 257
46743: PUSH
46744: LD_INT 1
46746: EQUAL
46747: IFFALSE 46768
// points := [ 10 , 5 , 3 ] ;
46749: LD_ADDR_VAR 0 9
46753: PUSH
46754: LD_INT 10
46756: PUSH
46757: LD_INT 5
46759: PUSH
46760: LD_INT 3
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: LIST
46767: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
46768: LD_VAR 0 6
46772: PPUSH
46773: CALL_OW 257
46777: PUSH
46778: LD_INT 2
46780: PUSH
46781: LD_INT 3
46783: PUSH
46784: LD_INT 4
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: LIST
46791: IN
46792: IFFALSE 46813
// points := [ 3 , 2 , 1 ] ;
46794: LD_ADDR_VAR 0 9
46798: PUSH
46799: LD_INT 3
46801: PUSH
46802: LD_INT 2
46804: PUSH
46805: LD_INT 1
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: LIST
46812: ST_TO_ADDR
// if GetClass ( i ) = 5 then
46813: LD_VAR 0 6
46817: PPUSH
46818: CALL_OW 257
46822: PUSH
46823: LD_INT 5
46825: EQUAL
46826: IFFALSE 46847
// points := [ 130 , 5 , 2 ] ;
46828: LD_ADDR_VAR 0 9
46832: PUSH
46833: LD_INT 130
46835: PUSH
46836: LD_INT 5
46838: PUSH
46839: LD_INT 2
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: LIST
46846: ST_TO_ADDR
// if GetClass ( i ) = 8 then
46847: LD_VAR 0 6
46851: PPUSH
46852: CALL_OW 257
46856: PUSH
46857: LD_INT 8
46859: EQUAL
46860: IFFALSE 46881
// points := [ 35 , 35 , 30 ] ;
46862: LD_ADDR_VAR 0 9
46866: PUSH
46867: LD_INT 35
46869: PUSH
46870: LD_INT 35
46872: PUSH
46873: LD_INT 30
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: LIST
46880: ST_TO_ADDR
// if GetClass ( i ) = 9 then
46881: LD_VAR 0 6
46885: PPUSH
46886: CALL_OW 257
46890: PUSH
46891: LD_INT 9
46893: EQUAL
46894: IFFALSE 46915
// points := [ 20 , 55 , 40 ] ;
46896: LD_ADDR_VAR 0 9
46900: PUSH
46901: LD_INT 20
46903: PUSH
46904: LD_INT 55
46906: PUSH
46907: LD_INT 40
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: LIST
46914: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
46915: LD_VAR 0 6
46919: PPUSH
46920: CALL_OW 257
46924: PUSH
46925: LD_INT 12
46927: PUSH
46928: LD_INT 16
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: IN
46935: IFFALSE 46956
// points := [ 5 , 3 , 2 ] ;
46937: LD_ADDR_VAR 0 9
46941: PUSH
46942: LD_INT 5
46944: PUSH
46945: LD_INT 3
46947: PUSH
46948: LD_INT 2
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: LIST
46955: ST_TO_ADDR
// if GetClass ( i ) = 17 then
46956: LD_VAR 0 6
46960: PPUSH
46961: CALL_OW 257
46965: PUSH
46966: LD_INT 17
46968: EQUAL
46969: IFFALSE 46990
// points := [ 100 , 50 , 75 ] ;
46971: LD_ADDR_VAR 0 9
46975: PUSH
46976: LD_INT 100
46978: PUSH
46979: LD_INT 50
46981: PUSH
46982: LD_INT 75
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: LIST
46989: ST_TO_ADDR
// if GetClass ( i ) = 15 then
46990: LD_VAR 0 6
46994: PPUSH
46995: CALL_OW 257
46999: PUSH
47000: LD_INT 15
47002: EQUAL
47003: IFFALSE 47024
// points := [ 10 , 5 , 3 ] ;
47005: LD_ADDR_VAR 0 9
47009: PUSH
47010: LD_INT 10
47012: PUSH
47013: LD_INT 5
47015: PUSH
47016: LD_INT 3
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: LIST
47023: ST_TO_ADDR
// if GetClass ( i ) = 14 then
47024: LD_VAR 0 6
47028: PPUSH
47029: CALL_OW 257
47033: PUSH
47034: LD_INT 14
47036: EQUAL
47037: IFFALSE 47058
// points := [ 10 , 0 , 0 ] ;
47039: LD_ADDR_VAR 0 9
47043: PUSH
47044: LD_INT 10
47046: PUSH
47047: LD_INT 0
47049: PUSH
47050: LD_INT 0
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: LIST
47057: ST_TO_ADDR
// if GetClass ( i ) = 11 then
47058: LD_VAR 0 6
47062: PPUSH
47063: CALL_OW 257
47067: PUSH
47068: LD_INT 11
47070: EQUAL
47071: IFFALSE 47092
// points := [ 30 , 10 , 5 ] ;
47073: LD_ADDR_VAR 0 9
47077: PUSH
47078: LD_INT 30
47080: PUSH
47081: LD_INT 10
47083: PUSH
47084: LD_INT 5
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: LIST
47091: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
47092: LD_VAR 0 1
47096: PPUSH
47097: LD_INT 5
47099: PPUSH
47100: CALL_OW 321
47104: PUSH
47105: LD_INT 2
47107: EQUAL
47108: IFFALSE 47125
// bpoints := bpoints * 1.8 ;
47110: LD_ADDR_VAR 0 10
47114: PUSH
47115: LD_VAR 0 10
47119: PUSH
47120: LD_REAL  1.80000000000000E+0000
47123: MUL
47124: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
47125: LD_VAR 0 6
47129: PPUSH
47130: CALL_OW 257
47134: PUSH
47135: LD_INT 1
47137: PUSH
47138: LD_INT 2
47140: PUSH
47141: LD_INT 3
47143: PUSH
47144: LD_INT 4
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: LIST
47151: LIST
47152: IN
47153: PUSH
47154: LD_VAR 0 1
47158: PPUSH
47159: LD_INT 51
47161: PPUSH
47162: CALL_OW 321
47166: PUSH
47167: LD_INT 2
47169: EQUAL
47170: AND
47171: IFFALSE 47188
// bpoints := bpoints * 1.2 ;
47173: LD_ADDR_VAR 0 10
47177: PUSH
47178: LD_VAR 0 10
47182: PUSH
47183: LD_REAL  1.20000000000000E+0000
47186: MUL
47187: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
47188: LD_VAR 0 6
47192: PPUSH
47193: CALL_OW 257
47197: PUSH
47198: LD_INT 5
47200: PUSH
47201: LD_INT 7
47203: PUSH
47204: LD_INT 9
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: LIST
47211: IN
47212: PUSH
47213: LD_VAR 0 1
47217: PPUSH
47218: LD_INT 52
47220: PPUSH
47221: CALL_OW 321
47225: PUSH
47226: LD_INT 2
47228: EQUAL
47229: AND
47230: IFFALSE 47247
// bpoints := bpoints * 1.5 ;
47232: LD_ADDR_VAR 0 10
47236: PUSH
47237: LD_VAR 0 10
47241: PUSH
47242: LD_REAL  1.50000000000000E+0000
47245: MUL
47246: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
47247: LD_VAR 0 1
47251: PPUSH
47252: LD_INT 66
47254: PPUSH
47255: CALL_OW 321
47259: PUSH
47260: LD_INT 2
47262: EQUAL
47263: IFFALSE 47280
// bpoints := bpoints * 1.1 ;
47265: LD_ADDR_VAR 0 10
47269: PUSH
47270: LD_VAR 0 10
47274: PUSH
47275: LD_REAL  1.10000000000000E+0000
47278: MUL
47279: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
47280: LD_ADDR_VAR 0 10
47284: PUSH
47285: LD_VAR 0 10
47289: PUSH
47290: LD_VAR 0 6
47294: PPUSH
47295: LD_INT 1
47297: PPUSH
47298: CALL_OW 259
47302: PUSH
47303: LD_REAL  1.15000000000000E+0000
47306: MUL
47307: MUL
47308: ST_TO_ADDR
// end ; unit_vehicle :
47309: GO 48137
47311: LD_INT 2
47313: DOUBLE
47314: EQUAL
47315: IFTRUE 47319
47317: GO 48125
47319: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
47320: LD_VAR 0 6
47324: PPUSH
47325: CALL_OW 264
47329: PUSH
47330: LD_INT 2
47332: PUSH
47333: LD_INT 42
47335: PUSH
47336: LD_INT 24
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: LIST
47343: IN
47344: IFFALSE 47365
// points := [ 25 , 5 , 3 ] ;
47346: LD_ADDR_VAR 0 9
47350: PUSH
47351: LD_INT 25
47353: PUSH
47354: LD_INT 5
47356: PUSH
47357: LD_INT 3
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: LIST
47364: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
47365: LD_VAR 0 6
47369: PPUSH
47370: CALL_OW 264
47374: PUSH
47375: LD_INT 4
47377: PUSH
47378: LD_INT 43
47380: PUSH
47381: LD_INT 25
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: LIST
47388: IN
47389: IFFALSE 47410
// points := [ 40 , 15 , 5 ] ;
47391: LD_ADDR_VAR 0 9
47395: PUSH
47396: LD_INT 40
47398: PUSH
47399: LD_INT 15
47401: PUSH
47402: LD_INT 5
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: LIST
47409: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
47410: LD_VAR 0 6
47414: PPUSH
47415: CALL_OW 264
47419: PUSH
47420: LD_INT 3
47422: PUSH
47423: LD_INT 23
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: IN
47430: IFFALSE 47451
// points := [ 7 , 25 , 8 ] ;
47432: LD_ADDR_VAR 0 9
47436: PUSH
47437: LD_INT 7
47439: PUSH
47440: LD_INT 25
47442: PUSH
47443: LD_INT 8
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: LIST
47450: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
47451: LD_VAR 0 6
47455: PPUSH
47456: CALL_OW 264
47460: PUSH
47461: LD_INT 5
47463: PUSH
47464: LD_INT 27
47466: PUSH
47467: LD_INT 44
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: LIST
47474: IN
47475: IFFALSE 47496
// points := [ 14 , 50 , 16 ] ;
47477: LD_ADDR_VAR 0 9
47481: PUSH
47482: LD_INT 14
47484: PUSH
47485: LD_INT 50
47487: PUSH
47488: LD_INT 16
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: LIST
47495: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
47496: LD_VAR 0 6
47500: PPUSH
47501: CALL_OW 264
47505: PUSH
47506: LD_INT 6
47508: PUSH
47509: LD_INT 46
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: IN
47516: IFFALSE 47537
// points := [ 32 , 120 , 70 ] ;
47518: LD_ADDR_VAR 0 9
47522: PUSH
47523: LD_INT 32
47525: PUSH
47526: LD_INT 120
47528: PUSH
47529: LD_INT 70
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: LIST
47536: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
47537: LD_VAR 0 6
47541: PPUSH
47542: CALL_OW 264
47546: PUSH
47547: LD_INT 7
47549: PUSH
47550: LD_INT 28
47552: PUSH
47553: LD_INT 45
47555: PUSH
47556: LD_INT 92
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: IN
47565: IFFALSE 47586
// points := [ 35 , 20 , 45 ] ;
47567: LD_ADDR_VAR 0 9
47571: PUSH
47572: LD_INT 35
47574: PUSH
47575: LD_INT 20
47577: PUSH
47578: LD_INT 45
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: LIST
47585: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
47586: LD_VAR 0 6
47590: PPUSH
47591: CALL_OW 264
47595: PUSH
47596: LD_INT 47
47598: PUSH
47599: EMPTY
47600: LIST
47601: IN
47602: IFFALSE 47623
// points := [ 67 , 45 , 75 ] ;
47604: LD_ADDR_VAR 0 9
47608: PUSH
47609: LD_INT 67
47611: PUSH
47612: LD_INT 45
47614: PUSH
47615: LD_INT 75
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: LIST
47622: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
47623: LD_VAR 0 6
47627: PPUSH
47628: CALL_OW 264
47632: PUSH
47633: LD_INT 26
47635: PUSH
47636: EMPTY
47637: LIST
47638: IN
47639: IFFALSE 47660
// points := [ 120 , 30 , 80 ] ;
47641: LD_ADDR_VAR 0 9
47645: PUSH
47646: LD_INT 120
47648: PUSH
47649: LD_INT 30
47651: PUSH
47652: LD_INT 80
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: LIST
47659: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
47660: LD_VAR 0 6
47664: PPUSH
47665: CALL_OW 264
47669: PUSH
47670: LD_INT 22
47672: PUSH
47673: EMPTY
47674: LIST
47675: IN
47676: IFFALSE 47697
// points := [ 40 , 1 , 1 ] ;
47678: LD_ADDR_VAR 0 9
47682: PUSH
47683: LD_INT 40
47685: PUSH
47686: LD_INT 1
47688: PUSH
47689: LD_INT 1
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: LIST
47696: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
47697: LD_VAR 0 6
47701: PPUSH
47702: CALL_OW 264
47706: PUSH
47707: LD_INT 29
47709: PUSH
47710: EMPTY
47711: LIST
47712: IN
47713: IFFALSE 47734
// points := [ 70 , 200 , 400 ] ;
47715: LD_ADDR_VAR 0 9
47719: PUSH
47720: LD_INT 70
47722: PUSH
47723: LD_INT 200
47725: PUSH
47726: LD_INT 400
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: LIST
47733: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
47734: LD_VAR 0 6
47738: PPUSH
47739: CALL_OW 264
47743: PUSH
47744: LD_INT 14
47746: PUSH
47747: LD_INT 53
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: IN
47754: IFFALSE 47775
// points := [ 40 , 10 , 20 ] ;
47756: LD_ADDR_VAR 0 9
47760: PUSH
47761: LD_INT 40
47763: PUSH
47764: LD_INT 10
47766: PUSH
47767: LD_INT 20
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: LIST
47774: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
47775: LD_VAR 0 6
47779: PPUSH
47780: CALL_OW 264
47784: PUSH
47785: LD_INT 9
47787: PUSH
47788: EMPTY
47789: LIST
47790: IN
47791: IFFALSE 47812
// points := [ 5 , 70 , 20 ] ;
47793: LD_ADDR_VAR 0 9
47797: PUSH
47798: LD_INT 5
47800: PUSH
47801: LD_INT 70
47803: PUSH
47804: LD_INT 20
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: LIST
47811: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
47812: LD_VAR 0 6
47816: PPUSH
47817: CALL_OW 264
47821: PUSH
47822: LD_INT 10
47824: PUSH
47825: EMPTY
47826: LIST
47827: IN
47828: IFFALSE 47849
// points := [ 35 , 110 , 70 ] ;
47830: LD_ADDR_VAR 0 9
47834: PUSH
47835: LD_INT 35
47837: PUSH
47838: LD_INT 110
47840: PUSH
47841: LD_INT 70
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: LIST
47848: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
47849: LD_VAR 0 6
47853: PPUSH
47854: CALL_OW 265
47858: PUSH
47859: LD_INT 25
47861: EQUAL
47862: IFFALSE 47883
// points := [ 80 , 65 , 100 ] ;
47864: LD_ADDR_VAR 0 9
47868: PUSH
47869: LD_INT 80
47871: PUSH
47872: LD_INT 65
47874: PUSH
47875: LD_INT 100
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: LIST
47882: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
47883: LD_VAR 0 6
47887: PPUSH
47888: CALL_OW 263
47892: PUSH
47893: LD_INT 1
47895: EQUAL
47896: IFFALSE 47931
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
47898: LD_ADDR_VAR 0 10
47902: PUSH
47903: LD_VAR 0 10
47907: PUSH
47908: LD_VAR 0 6
47912: PPUSH
47913: CALL_OW 311
47917: PPUSH
47918: LD_INT 3
47920: PPUSH
47921: CALL_OW 259
47925: PUSH
47926: LD_INT 4
47928: MUL
47929: MUL
47930: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
47931: LD_VAR 0 6
47935: PPUSH
47936: CALL_OW 263
47940: PUSH
47941: LD_INT 2
47943: EQUAL
47944: IFFALSE 47995
// begin j := IsControledBy ( i ) ;
47946: LD_ADDR_VAR 0 7
47950: PUSH
47951: LD_VAR 0 6
47955: PPUSH
47956: CALL_OW 312
47960: ST_TO_ADDR
// if j then
47961: LD_VAR 0 7
47965: IFFALSE 47995
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
47967: LD_ADDR_VAR 0 10
47971: PUSH
47972: LD_VAR 0 10
47976: PUSH
47977: LD_VAR 0 7
47981: PPUSH
47982: LD_INT 3
47984: PPUSH
47985: CALL_OW 259
47989: PUSH
47990: LD_INT 3
47992: MUL
47993: MUL
47994: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
47995: LD_VAR 0 6
47999: PPUSH
48000: CALL_OW 264
48004: PUSH
48005: LD_INT 5
48007: PUSH
48008: LD_INT 6
48010: PUSH
48011: LD_INT 46
48013: PUSH
48014: LD_INT 44
48016: PUSH
48017: LD_INT 47
48019: PUSH
48020: LD_INT 45
48022: PUSH
48023: LD_INT 28
48025: PUSH
48026: LD_INT 7
48028: PUSH
48029: LD_INT 27
48031: PUSH
48032: LD_INT 29
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: IN
48047: PUSH
48048: LD_VAR 0 1
48052: PPUSH
48053: LD_INT 52
48055: PPUSH
48056: CALL_OW 321
48060: PUSH
48061: LD_INT 2
48063: EQUAL
48064: AND
48065: IFFALSE 48082
// bpoints := bpoints * 1.2 ;
48067: LD_ADDR_VAR 0 10
48071: PUSH
48072: LD_VAR 0 10
48076: PUSH
48077: LD_REAL  1.20000000000000E+0000
48080: MUL
48081: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
48082: LD_VAR 0 6
48086: PPUSH
48087: CALL_OW 264
48091: PUSH
48092: LD_INT 6
48094: PUSH
48095: LD_INT 46
48097: PUSH
48098: LD_INT 47
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: LIST
48105: IN
48106: IFFALSE 48123
// bpoints := bpoints * 1.2 ;
48108: LD_ADDR_VAR 0 10
48112: PUSH
48113: LD_VAR 0 10
48117: PUSH
48118: LD_REAL  1.20000000000000E+0000
48121: MUL
48122: ST_TO_ADDR
// end ; unit_building :
48123: GO 48137
48125: LD_INT 3
48127: DOUBLE
48128: EQUAL
48129: IFTRUE 48133
48131: GO 48136
48133: POP
// ; end ;
48134: GO 48137
48136: POP
// for j = 1 to 3 do
48137: LD_ADDR_VAR 0 7
48141: PUSH
48142: DOUBLE
48143: LD_INT 1
48145: DEC
48146: ST_TO_ADDR
48147: LD_INT 3
48149: PUSH
48150: FOR_TO
48151: IFFALSE 48204
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
48153: LD_ADDR_VAR 0 5
48157: PUSH
48158: LD_VAR 0 5
48162: PPUSH
48163: LD_VAR 0 7
48167: PPUSH
48168: LD_VAR 0 5
48172: PUSH
48173: LD_VAR 0 7
48177: ARRAY
48178: PUSH
48179: LD_VAR 0 9
48183: PUSH
48184: LD_VAR 0 7
48188: ARRAY
48189: PUSH
48190: LD_VAR 0 10
48194: MUL
48195: PLUS
48196: PPUSH
48197: CALL_OW 1
48201: ST_TO_ADDR
48202: GO 48150
48204: POP
48205: POP
// end ;
48206: GO 46685
48208: POP
48209: POP
// result := Replace ( result , 4 , tmp ) ;
48210: LD_ADDR_VAR 0 5
48214: PUSH
48215: LD_VAR 0 5
48219: PPUSH
48220: LD_INT 4
48222: PPUSH
48223: LD_VAR 0 8
48227: PPUSH
48228: CALL_OW 1
48232: ST_TO_ADDR
// end ;
48233: LD_VAR 0 5
48237: RET
// export function DangerAtRange ( unit , range ) ; begin
48238: LD_INT 0
48240: PPUSH
// if not unit then
48241: LD_VAR 0 1
48245: NOT
48246: IFFALSE 48250
// exit ;
48248: GO 48295
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
48250: LD_ADDR_VAR 0 3
48254: PUSH
48255: LD_VAR 0 1
48259: PPUSH
48260: CALL_OW 255
48264: PPUSH
48265: LD_VAR 0 1
48269: PPUSH
48270: CALL_OW 250
48274: PPUSH
48275: LD_VAR 0 1
48279: PPUSH
48280: CALL_OW 251
48284: PPUSH
48285: LD_VAR 0 2
48289: PPUSH
48290: CALL 46537 0 4
48294: ST_TO_ADDR
// end ;
48295: LD_VAR 0 3
48299: RET
// export function DangerInArea ( side , area ) ; begin
48300: LD_INT 0
48302: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
48303: LD_ADDR_VAR 0 3
48307: PUSH
48308: LD_VAR 0 2
48312: PPUSH
48313: LD_INT 81
48315: PUSH
48316: LD_VAR 0 1
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PPUSH
48325: CALL_OW 70
48329: ST_TO_ADDR
// end ;
48330: LD_VAR 0 3
48334: RET
// export function IsExtension ( b ) ; begin
48335: LD_INT 0
48337: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
48338: LD_ADDR_VAR 0 2
48342: PUSH
48343: LD_VAR 0 1
48347: PUSH
48348: LD_INT 23
48350: PUSH
48351: LD_INT 20
48353: PUSH
48354: LD_INT 22
48356: PUSH
48357: LD_INT 17
48359: PUSH
48360: LD_INT 24
48362: PUSH
48363: LD_INT 21
48365: PUSH
48366: LD_INT 19
48368: PUSH
48369: LD_INT 16
48371: PUSH
48372: LD_INT 25
48374: PUSH
48375: LD_INT 18
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: IN
48390: ST_TO_ADDR
// end ;
48391: LD_VAR 0 2
48395: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
48396: LD_INT 0
48398: PPUSH
48399: PPUSH
48400: PPUSH
// result := [ ] ;
48401: LD_ADDR_VAR 0 4
48405: PUSH
48406: EMPTY
48407: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
48408: LD_ADDR_VAR 0 5
48412: PUSH
48413: LD_VAR 0 2
48417: PPUSH
48418: LD_INT 21
48420: PUSH
48421: LD_INT 3
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PPUSH
48428: CALL_OW 70
48432: ST_TO_ADDR
// if not tmp then
48433: LD_VAR 0 5
48437: NOT
48438: IFFALSE 48442
// exit ;
48440: GO 48506
// if checkLink then
48442: LD_VAR 0 3
48446: IFFALSE 48496
// begin for i in tmp do
48448: LD_ADDR_VAR 0 6
48452: PUSH
48453: LD_VAR 0 5
48457: PUSH
48458: FOR_IN
48459: IFFALSE 48494
// if GetBase ( i ) <> base then
48461: LD_VAR 0 6
48465: PPUSH
48466: CALL_OW 274
48470: PUSH
48471: LD_VAR 0 1
48475: NONEQUAL
48476: IFFALSE 48492
// ComLinkToBase ( base , i ) ;
48478: LD_VAR 0 1
48482: PPUSH
48483: LD_VAR 0 6
48487: PPUSH
48488: CALL_OW 169
48492: GO 48458
48494: POP
48495: POP
// end ; result := tmp ;
48496: LD_ADDR_VAR 0 4
48500: PUSH
48501: LD_VAR 0 5
48505: ST_TO_ADDR
// end ;
48506: LD_VAR 0 4
48510: RET
// export function ComComplete ( units , b ) ; var i ; begin
48511: LD_INT 0
48513: PPUSH
48514: PPUSH
// if not units then
48515: LD_VAR 0 1
48519: NOT
48520: IFFALSE 48524
// exit ;
48522: GO 48614
// for i in units do
48524: LD_ADDR_VAR 0 4
48528: PUSH
48529: LD_VAR 0 1
48533: PUSH
48534: FOR_IN
48535: IFFALSE 48612
// if BuildingStatus ( b ) = bs_build then
48537: LD_VAR 0 2
48541: PPUSH
48542: CALL_OW 461
48546: PUSH
48547: LD_INT 1
48549: EQUAL
48550: IFFALSE 48610
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
48552: LD_VAR 0 4
48556: PPUSH
48557: LD_STRING h
48559: PUSH
48560: LD_VAR 0 2
48564: PPUSH
48565: CALL_OW 250
48569: PUSH
48570: LD_VAR 0 2
48574: PPUSH
48575: CALL_OW 251
48579: PUSH
48580: LD_VAR 0 2
48584: PUSH
48585: LD_INT 0
48587: PUSH
48588: LD_INT 0
48590: PUSH
48591: LD_INT 0
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: PUSH
48603: EMPTY
48604: LIST
48605: PPUSH
48606: CALL_OW 446
48610: GO 48534
48612: POP
48613: POP
// end ;
48614: LD_VAR 0 3
48618: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
48619: LD_INT 0
48621: PPUSH
48622: PPUSH
48623: PPUSH
48624: PPUSH
48625: PPUSH
48626: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
48627: LD_VAR 0 1
48631: NOT
48632: PUSH
48633: LD_VAR 0 1
48637: PPUSH
48638: CALL_OW 263
48642: PUSH
48643: LD_INT 2
48645: NONEQUAL
48646: OR
48647: IFFALSE 48651
// exit ;
48649: GO 48967
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
48651: LD_ADDR_VAR 0 6
48655: PUSH
48656: LD_INT 22
48658: PUSH
48659: LD_VAR 0 1
48663: PPUSH
48664: CALL_OW 255
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PUSH
48673: LD_INT 2
48675: PUSH
48676: LD_INT 30
48678: PUSH
48679: LD_INT 36
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: PUSH
48686: LD_INT 34
48688: PUSH
48689: LD_INT 31
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: LIST
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PPUSH
48705: CALL_OW 69
48709: ST_TO_ADDR
// if not tmp then
48710: LD_VAR 0 6
48714: NOT
48715: IFFALSE 48719
// exit ;
48717: GO 48967
// result := [ ] ;
48719: LD_ADDR_VAR 0 2
48723: PUSH
48724: EMPTY
48725: ST_TO_ADDR
// for i in tmp do
48726: LD_ADDR_VAR 0 3
48730: PUSH
48731: LD_VAR 0 6
48735: PUSH
48736: FOR_IN
48737: IFFALSE 48808
// begin t := UnitsInside ( i ) ;
48739: LD_ADDR_VAR 0 4
48743: PUSH
48744: LD_VAR 0 3
48748: PPUSH
48749: CALL_OW 313
48753: ST_TO_ADDR
// if t then
48754: LD_VAR 0 4
48758: IFFALSE 48806
// for j in t do
48760: LD_ADDR_VAR 0 7
48764: PUSH
48765: LD_VAR 0 4
48769: PUSH
48770: FOR_IN
48771: IFFALSE 48804
// result := Replace ( result , result + 1 , j ) ;
48773: LD_ADDR_VAR 0 2
48777: PUSH
48778: LD_VAR 0 2
48782: PPUSH
48783: LD_VAR 0 2
48787: PUSH
48788: LD_INT 1
48790: PLUS
48791: PPUSH
48792: LD_VAR 0 7
48796: PPUSH
48797: CALL_OW 1
48801: ST_TO_ADDR
48802: GO 48770
48804: POP
48805: POP
// end ;
48806: GO 48736
48808: POP
48809: POP
// if not result then
48810: LD_VAR 0 2
48814: NOT
48815: IFFALSE 48819
// exit ;
48817: GO 48967
// mech := result [ 1 ] ;
48819: LD_ADDR_VAR 0 5
48823: PUSH
48824: LD_VAR 0 2
48828: PUSH
48829: LD_INT 1
48831: ARRAY
48832: ST_TO_ADDR
// if result > 1 then
48833: LD_VAR 0 2
48837: PUSH
48838: LD_INT 1
48840: GREATER
48841: IFFALSE 48953
// begin for i = 2 to result do
48843: LD_ADDR_VAR 0 3
48847: PUSH
48848: DOUBLE
48849: LD_INT 2
48851: DEC
48852: ST_TO_ADDR
48853: LD_VAR 0 2
48857: PUSH
48858: FOR_TO
48859: IFFALSE 48951
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
48861: LD_ADDR_VAR 0 4
48865: PUSH
48866: LD_VAR 0 2
48870: PUSH
48871: LD_VAR 0 3
48875: ARRAY
48876: PPUSH
48877: LD_INT 3
48879: PPUSH
48880: CALL_OW 259
48884: PUSH
48885: LD_VAR 0 2
48889: PUSH
48890: LD_VAR 0 3
48894: ARRAY
48895: PPUSH
48896: CALL_OW 432
48900: MINUS
48901: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
48902: LD_VAR 0 4
48906: PUSH
48907: LD_VAR 0 5
48911: PPUSH
48912: LD_INT 3
48914: PPUSH
48915: CALL_OW 259
48919: PUSH
48920: LD_VAR 0 5
48924: PPUSH
48925: CALL_OW 432
48929: MINUS
48930: GREATEREQUAL
48931: IFFALSE 48949
// mech := result [ i ] ;
48933: LD_ADDR_VAR 0 5
48937: PUSH
48938: LD_VAR 0 2
48942: PUSH
48943: LD_VAR 0 3
48947: ARRAY
48948: ST_TO_ADDR
// end ;
48949: GO 48858
48951: POP
48952: POP
// end ; ComLinkTo ( vehicle , mech ) ;
48953: LD_VAR 0 1
48957: PPUSH
48958: LD_VAR 0 5
48962: PPUSH
48963: CALL_OW 135
// end ;
48967: LD_VAR 0 2
48971: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
48972: LD_INT 0
48974: PPUSH
48975: PPUSH
48976: PPUSH
48977: PPUSH
48978: PPUSH
48979: PPUSH
48980: PPUSH
48981: PPUSH
48982: PPUSH
48983: PPUSH
48984: PPUSH
48985: PPUSH
48986: PPUSH
// result := [ ] ;
48987: LD_ADDR_VAR 0 7
48991: PUSH
48992: EMPTY
48993: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
48994: LD_VAR 0 1
48998: PPUSH
48999: CALL_OW 266
49003: PUSH
49004: LD_INT 0
49006: PUSH
49007: LD_INT 1
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: IN
49014: NOT
49015: IFFALSE 49019
// exit ;
49017: GO 50653
// if name then
49019: LD_VAR 0 3
49023: IFFALSE 49039
// SetBName ( base_dep , name ) ;
49025: LD_VAR 0 1
49029: PPUSH
49030: LD_VAR 0 3
49034: PPUSH
49035: CALL_OW 500
// base := GetBase ( base_dep ) ;
49039: LD_ADDR_VAR 0 15
49043: PUSH
49044: LD_VAR 0 1
49048: PPUSH
49049: CALL_OW 274
49053: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
49054: LD_ADDR_VAR 0 16
49058: PUSH
49059: LD_VAR 0 1
49063: PPUSH
49064: CALL_OW 255
49068: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
49069: LD_ADDR_VAR 0 17
49073: PUSH
49074: LD_VAR 0 1
49078: PPUSH
49079: CALL_OW 248
49083: ST_TO_ADDR
// if sources then
49084: LD_VAR 0 5
49088: IFFALSE 49135
// for i = 1 to 3 do
49090: LD_ADDR_VAR 0 8
49094: PUSH
49095: DOUBLE
49096: LD_INT 1
49098: DEC
49099: ST_TO_ADDR
49100: LD_INT 3
49102: PUSH
49103: FOR_TO
49104: IFFALSE 49133
// AddResourceType ( base , i , sources [ i ] ) ;
49106: LD_VAR 0 15
49110: PPUSH
49111: LD_VAR 0 8
49115: PPUSH
49116: LD_VAR 0 5
49120: PUSH
49121: LD_VAR 0 8
49125: ARRAY
49126: PPUSH
49127: CALL_OW 276
49131: GO 49103
49133: POP
49134: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
49135: LD_ADDR_VAR 0 18
49139: PUSH
49140: LD_VAR 0 15
49144: PPUSH
49145: LD_VAR 0 2
49149: PPUSH
49150: LD_INT 1
49152: PPUSH
49153: CALL 48396 0 3
49157: ST_TO_ADDR
// InitHc ;
49158: CALL_OW 19
// InitUc ;
49162: CALL_OW 18
// uc_side := side ;
49166: LD_ADDR_OWVAR 20
49170: PUSH
49171: LD_VAR 0 16
49175: ST_TO_ADDR
// uc_nation := nation ;
49176: LD_ADDR_OWVAR 21
49180: PUSH
49181: LD_VAR 0 17
49185: ST_TO_ADDR
// if buildings then
49186: LD_VAR 0 18
49190: IFFALSE 50512
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
49192: LD_ADDR_VAR 0 19
49196: PUSH
49197: LD_VAR 0 18
49201: PPUSH
49202: LD_INT 2
49204: PUSH
49205: LD_INT 30
49207: PUSH
49208: LD_INT 29
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 30
49217: PUSH
49218: LD_INT 30
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: LIST
49229: PPUSH
49230: CALL_OW 72
49234: ST_TO_ADDR
// if tmp then
49235: LD_VAR 0 19
49239: IFFALSE 49287
// for i in tmp do
49241: LD_ADDR_VAR 0 8
49245: PUSH
49246: LD_VAR 0 19
49250: PUSH
49251: FOR_IN
49252: IFFALSE 49285
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
49254: LD_VAR 0 8
49258: PPUSH
49259: CALL_OW 250
49263: PPUSH
49264: LD_VAR 0 8
49268: PPUSH
49269: CALL_OW 251
49273: PPUSH
49274: LD_VAR 0 16
49278: PPUSH
49279: CALL_OW 441
49283: GO 49251
49285: POP
49286: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
49287: LD_VAR 0 18
49291: PPUSH
49292: LD_INT 2
49294: PUSH
49295: LD_INT 30
49297: PUSH
49298: LD_INT 32
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 30
49307: PUSH
49308: LD_INT 33
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: LIST
49319: PPUSH
49320: CALL_OW 72
49324: IFFALSE 49412
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
49326: LD_ADDR_VAR 0 8
49330: PUSH
49331: LD_VAR 0 18
49335: PPUSH
49336: LD_INT 2
49338: PUSH
49339: LD_INT 30
49341: PUSH
49342: LD_INT 32
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: LD_INT 30
49351: PUSH
49352: LD_INT 33
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: LIST
49363: PPUSH
49364: CALL_OW 72
49368: PUSH
49369: FOR_IN
49370: IFFALSE 49410
// begin if not GetBWeapon ( i ) then
49372: LD_VAR 0 8
49376: PPUSH
49377: CALL_OW 269
49381: NOT
49382: IFFALSE 49408
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
49384: LD_VAR 0 8
49388: PPUSH
49389: LD_VAR 0 8
49393: PPUSH
49394: LD_VAR 0 2
49398: PPUSH
49399: CALL 50658 0 2
49403: PPUSH
49404: CALL_OW 431
// end ;
49408: GO 49369
49410: POP
49411: POP
// end ; for i = 1 to personel do
49412: LD_ADDR_VAR 0 8
49416: PUSH
49417: DOUBLE
49418: LD_INT 1
49420: DEC
49421: ST_TO_ADDR
49422: LD_VAR 0 6
49426: PUSH
49427: FOR_TO
49428: IFFALSE 50492
// begin if i > 4 then
49430: LD_VAR 0 8
49434: PUSH
49435: LD_INT 4
49437: GREATER
49438: IFFALSE 49442
// break ;
49440: GO 50492
// case i of 1 :
49442: LD_VAR 0 8
49446: PUSH
49447: LD_INT 1
49449: DOUBLE
49450: EQUAL
49451: IFTRUE 49455
49453: GO 49535
49455: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
49456: LD_ADDR_VAR 0 12
49460: PUSH
49461: LD_VAR 0 18
49465: PPUSH
49466: LD_INT 22
49468: PUSH
49469: LD_VAR 0 16
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 58
49480: PUSH
49481: EMPTY
49482: LIST
49483: PUSH
49484: LD_INT 2
49486: PUSH
49487: LD_INT 30
49489: PUSH
49490: LD_INT 32
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 30
49499: PUSH
49500: LD_INT 4
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 30
49509: PUSH
49510: LD_INT 5
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: LIST
49521: LIST
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: LIST
49527: PPUSH
49528: CALL_OW 72
49532: ST_TO_ADDR
49533: GO 49757
49535: LD_INT 2
49537: DOUBLE
49538: EQUAL
49539: IFTRUE 49543
49541: GO 49605
49543: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
49544: LD_ADDR_VAR 0 12
49548: PUSH
49549: LD_VAR 0 18
49553: PPUSH
49554: LD_INT 22
49556: PUSH
49557: LD_VAR 0 16
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: LD_INT 2
49568: PUSH
49569: LD_INT 30
49571: PUSH
49572: LD_INT 0
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 30
49581: PUSH
49582: LD_INT 1
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: LIST
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PPUSH
49598: CALL_OW 72
49602: ST_TO_ADDR
49603: GO 49757
49605: LD_INT 3
49607: DOUBLE
49608: EQUAL
49609: IFTRUE 49613
49611: GO 49675
49613: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
49614: LD_ADDR_VAR 0 12
49618: PUSH
49619: LD_VAR 0 18
49623: PPUSH
49624: LD_INT 22
49626: PUSH
49627: LD_VAR 0 16
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 2
49638: PUSH
49639: LD_INT 30
49641: PUSH
49642: LD_INT 2
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: LD_INT 30
49651: PUSH
49652: LD_INT 3
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: LIST
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PPUSH
49668: CALL_OW 72
49672: ST_TO_ADDR
49673: GO 49757
49675: LD_INT 4
49677: DOUBLE
49678: EQUAL
49679: IFTRUE 49683
49681: GO 49756
49683: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
49684: LD_ADDR_VAR 0 12
49688: PUSH
49689: LD_VAR 0 18
49693: PPUSH
49694: LD_INT 22
49696: PUSH
49697: LD_VAR 0 16
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: LD_INT 2
49708: PUSH
49709: LD_INT 30
49711: PUSH
49712: LD_INT 6
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 30
49721: PUSH
49722: LD_INT 7
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 30
49731: PUSH
49732: LD_INT 8
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: LIST
49743: LIST
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PPUSH
49749: CALL_OW 72
49753: ST_TO_ADDR
49754: GO 49757
49756: POP
// if i = 1 then
49757: LD_VAR 0 8
49761: PUSH
49762: LD_INT 1
49764: EQUAL
49765: IFFALSE 49876
// begin tmp := [ ] ;
49767: LD_ADDR_VAR 0 19
49771: PUSH
49772: EMPTY
49773: ST_TO_ADDR
// for j in f do
49774: LD_ADDR_VAR 0 9
49778: PUSH
49779: LD_VAR 0 12
49783: PUSH
49784: FOR_IN
49785: IFFALSE 49858
// if GetBType ( j ) = b_bunker then
49787: LD_VAR 0 9
49791: PPUSH
49792: CALL_OW 266
49796: PUSH
49797: LD_INT 32
49799: EQUAL
49800: IFFALSE 49827
// tmp := Insert ( tmp , 1 , j ) else
49802: LD_ADDR_VAR 0 19
49806: PUSH
49807: LD_VAR 0 19
49811: PPUSH
49812: LD_INT 1
49814: PPUSH
49815: LD_VAR 0 9
49819: PPUSH
49820: CALL_OW 2
49824: ST_TO_ADDR
49825: GO 49856
// tmp := Insert ( tmp , tmp + 1 , j ) ;
49827: LD_ADDR_VAR 0 19
49831: PUSH
49832: LD_VAR 0 19
49836: PPUSH
49837: LD_VAR 0 19
49841: PUSH
49842: LD_INT 1
49844: PLUS
49845: PPUSH
49846: LD_VAR 0 9
49850: PPUSH
49851: CALL_OW 2
49855: ST_TO_ADDR
49856: GO 49784
49858: POP
49859: POP
// if tmp then
49860: LD_VAR 0 19
49864: IFFALSE 49876
// f := tmp ;
49866: LD_ADDR_VAR 0 12
49870: PUSH
49871: LD_VAR 0 19
49875: ST_TO_ADDR
// end ; x := personel [ i ] ;
49876: LD_ADDR_VAR 0 13
49880: PUSH
49881: LD_VAR 0 6
49885: PUSH
49886: LD_VAR 0 8
49890: ARRAY
49891: ST_TO_ADDR
// if x = - 1 then
49892: LD_VAR 0 13
49896: PUSH
49897: LD_INT 1
49899: NEG
49900: EQUAL
49901: IFFALSE 50110
// begin for j in f do
49903: LD_ADDR_VAR 0 9
49907: PUSH
49908: LD_VAR 0 12
49912: PUSH
49913: FOR_IN
49914: IFFALSE 50106
// repeat InitHc ;
49916: CALL_OW 19
// if GetBType ( j ) = b_barracks then
49920: LD_VAR 0 9
49924: PPUSH
49925: CALL_OW 266
49929: PUSH
49930: LD_INT 5
49932: EQUAL
49933: IFFALSE 50003
// begin if UnitsInside ( j ) < 3 then
49935: LD_VAR 0 9
49939: PPUSH
49940: CALL_OW 313
49944: PUSH
49945: LD_INT 3
49947: LESS
49948: IFFALSE 49984
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49950: LD_INT 0
49952: PPUSH
49953: LD_INT 5
49955: PUSH
49956: LD_INT 8
49958: PUSH
49959: LD_INT 9
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: LIST
49966: PUSH
49967: LD_VAR 0 17
49971: ARRAY
49972: PPUSH
49973: LD_VAR 0 4
49977: PPUSH
49978: CALL_OW 380
49982: GO 50001
// PrepareHuman ( false , i , skill ) ;
49984: LD_INT 0
49986: PPUSH
49987: LD_VAR 0 8
49991: PPUSH
49992: LD_VAR 0 4
49996: PPUSH
49997: CALL_OW 380
// end else
50001: GO 50020
// PrepareHuman ( false , i , skill ) ;
50003: LD_INT 0
50005: PPUSH
50006: LD_VAR 0 8
50010: PPUSH
50011: LD_VAR 0 4
50015: PPUSH
50016: CALL_OW 380
// un := CreateHuman ;
50020: LD_ADDR_VAR 0 14
50024: PUSH
50025: CALL_OW 44
50029: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50030: LD_ADDR_VAR 0 7
50034: PUSH
50035: LD_VAR 0 7
50039: PPUSH
50040: LD_INT 1
50042: PPUSH
50043: LD_VAR 0 14
50047: PPUSH
50048: CALL_OW 2
50052: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
50053: LD_VAR 0 14
50057: PPUSH
50058: LD_VAR 0 9
50062: PPUSH
50063: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
50067: LD_VAR 0 9
50071: PPUSH
50072: CALL_OW 313
50076: PUSH
50077: LD_INT 6
50079: EQUAL
50080: PUSH
50081: LD_VAR 0 9
50085: PPUSH
50086: CALL_OW 266
50090: PUSH
50091: LD_INT 32
50093: PUSH
50094: LD_INT 31
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: IN
50101: OR
50102: IFFALSE 49916
50104: GO 49913
50106: POP
50107: POP
// end else
50108: GO 50490
// for j = 1 to x do
50110: LD_ADDR_VAR 0 9
50114: PUSH
50115: DOUBLE
50116: LD_INT 1
50118: DEC
50119: ST_TO_ADDR
50120: LD_VAR 0 13
50124: PUSH
50125: FOR_TO
50126: IFFALSE 50488
// begin InitHc ;
50128: CALL_OW 19
// if not f then
50132: LD_VAR 0 12
50136: NOT
50137: IFFALSE 50226
// begin PrepareHuman ( false , i , skill ) ;
50139: LD_INT 0
50141: PPUSH
50142: LD_VAR 0 8
50146: PPUSH
50147: LD_VAR 0 4
50151: PPUSH
50152: CALL_OW 380
// un := CreateHuman ;
50156: LD_ADDR_VAR 0 14
50160: PUSH
50161: CALL_OW 44
50165: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50166: LD_ADDR_VAR 0 7
50170: PUSH
50171: LD_VAR 0 7
50175: PPUSH
50176: LD_INT 1
50178: PPUSH
50179: LD_VAR 0 14
50183: PPUSH
50184: CALL_OW 2
50188: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50189: LD_VAR 0 14
50193: PPUSH
50194: LD_VAR 0 1
50198: PPUSH
50199: CALL_OW 250
50203: PPUSH
50204: LD_VAR 0 1
50208: PPUSH
50209: CALL_OW 251
50213: PPUSH
50214: LD_INT 10
50216: PPUSH
50217: LD_INT 0
50219: PPUSH
50220: CALL_OW 50
// continue ;
50224: GO 50125
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
50226: LD_VAR 0 12
50230: PUSH
50231: LD_INT 1
50233: ARRAY
50234: PPUSH
50235: CALL_OW 313
50239: PUSH
50240: LD_VAR 0 12
50244: PUSH
50245: LD_INT 1
50247: ARRAY
50248: PPUSH
50249: CALL_OW 266
50253: PUSH
50254: LD_INT 32
50256: PUSH
50257: LD_INT 31
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: IN
50264: AND
50265: PUSH
50266: LD_VAR 0 12
50270: PUSH
50271: LD_INT 1
50273: ARRAY
50274: PPUSH
50275: CALL_OW 313
50279: PUSH
50280: LD_INT 6
50282: EQUAL
50283: OR
50284: IFFALSE 50304
// f := Delete ( f , 1 ) ;
50286: LD_ADDR_VAR 0 12
50290: PUSH
50291: LD_VAR 0 12
50295: PPUSH
50296: LD_INT 1
50298: PPUSH
50299: CALL_OW 3
50303: ST_TO_ADDR
// if not f then
50304: LD_VAR 0 12
50308: NOT
50309: IFFALSE 50327
// begin x := x + 2 ;
50311: LD_ADDR_VAR 0 13
50315: PUSH
50316: LD_VAR 0 13
50320: PUSH
50321: LD_INT 2
50323: PLUS
50324: ST_TO_ADDR
// continue ;
50325: GO 50125
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
50327: LD_VAR 0 12
50331: PUSH
50332: LD_INT 1
50334: ARRAY
50335: PPUSH
50336: CALL_OW 266
50340: PUSH
50341: LD_INT 5
50343: EQUAL
50344: IFFALSE 50418
// begin if UnitsInside ( f [ 1 ] ) < 3 then
50346: LD_VAR 0 12
50350: PUSH
50351: LD_INT 1
50353: ARRAY
50354: PPUSH
50355: CALL_OW 313
50359: PUSH
50360: LD_INT 3
50362: LESS
50363: IFFALSE 50399
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50365: LD_INT 0
50367: PPUSH
50368: LD_INT 5
50370: PUSH
50371: LD_INT 8
50373: PUSH
50374: LD_INT 9
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: LIST
50381: PUSH
50382: LD_VAR 0 17
50386: ARRAY
50387: PPUSH
50388: LD_VAR 0 4
50392: PPUSH
50393: CALL_OW 380
50397: GO 50416
// PrepareHuman ( false , i , skill ) ;
50399: LD_INT 0
50401: PPUSH
50402: LD_VAR 0 8
50406: PPUSH
50407: LD_VAR 0 4
50411: PPUSH
50412: CALL_OW 380
// end else
50416: GO 50435
// PrepareHuman ( false , i , skill ) ;
50418: LD_INT 0
50420: PPUSH
50421: LD_VAR 0 8
50425: PPUSH
50426: LD_VAR 0 4
50430: PPUSH
50431: CALL_OW 380
// un := CreateHuman ;
50435: LD_ADDR_VAR 0 14
50439: PUSH
50440: CALL_OW 44
50444: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50445: LD_ADDR_VAR 0 7
50449: PUSH
50450: LD_VAR 0 7
50454: PPUSH
50455: LD_INT 1
50457: PPUSH
50458: LD_VAR 0 14
50462: PPUSH
50463: CALL_OW 2
50467: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
50468: LD_VAR 0 14
50472: PPUSH
50473: LD_VAR 0 12
50477: PUSH
50478: LD_INT 1
50480: ARRAY
50481: PPUSH
50482: CALL_OW 52
// end ;
50486: GO 50125
50488: POP
50489: POP
// end ;
50490: GO 49427
50492: POP
50493: POP
// result := result ^ buildings ;
50494: LD_ADDR_VAR 0 7
50498: PUSH
50499: LD_VAR 0 7
50503: PUSH
50504: LD_VAR 0 18
50508: ADD
50509: ST_TO_ADDR
// end else
50510: GO 50653
// begin for i = 1 to personel do
50512: LD_ADDR_VAR 0 8
50516: PUSH
50517: DOUBLE
50518: LD_INT 1
50520: DEC
50521: ST_TO_ADDR
50522: LD_VAR 0 6
50526: PUSH
50527: FOR_TO
50528: IFFALSE 50651
// begin if i > 4 then
50530: LD_VAR 0 8
50534: PUSH
50535: LD_INT 4
50537: GREATER
50538: IFFALSE 50542
// break ;
50540: GO 50651
// x := personel [ i ] ;
50542: LD_ADDR_VAR 0 13
50546: PUSH
50547: LD_VAR 0 6
50551: PUSH
50552: LD_VAR 0 8
50556: ARRAY
50557: ST_TO_ADDR
// if x = - 1 then
50558: LD_VAR 0 13
50562: PUSH
50563: LD_INT 1
50565: NEG
50566: EQUAL
50567: IFFALSE 50571
// continue ;
50569: GO 50527
// PrepareHuman ( false , i , skill ) ;
50571: LD_INT 0
50573: PPUSH
50574: LD_VAR 0 8
50578: PPUSH
50579: LD_VAR 0 4
50583: PPUSH
50584: CALL_OW 380
// un := CreateHuman ;
50588: LD_ADDR_VAR 0 14
50592: PUSH
50593: CALL_OW 44
50597: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50598: LD_VAR 0 14
50602: PPUSH
50603: LD_VAR 0 1
50607: PPUSH
50608: CALL_OW 250
50612: PPUSH
50613: LD_VAR 0 1
50617: PPUSH
50618: CALL_OW 251
50622: PPUSH
50623: LD_INT 10
50625: PPUSH
50626: LD_INT 0
50628: PPUSH
50629: CALL_OW 50
// result := result ^ un ;
50633: LD_ADDR_VAR 0 7
50637: PUSH
50638: LD_VAR 0 7
50642: PUSH
50643: LD_VAR 0 14
50647: ADD
50648: ST_TO_ADDR
// end ;
50649: GO 50527
50651: POP
50652: POP
// end ; end ;
50653: LD_VAR 0 7
50657: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
50658: LD_INT 0
50660: PPUSH
50661: PPUSH
50662: PPUSH
50663: PPUSH
50664: PPUSH
50665: PPUSH
50666: PPUSH
50667: PPUSH
50668: PPUSH
50669: PPUSH
50670: PPUSH
50671: PPUSH
50672: PPUSH
50673: PPUSH
50674: PPUSH
50675: PPUSH
// result := false ;
50676: LD_ADDR_VAR 0 3
50680: PUSH
50681: LD_INT 0
50683: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
50684: LD_VAR 0 1
50688: NOT
50689: PUSH
50690: LD_VAR 0 1
50694: PPUSH
50695: CALL_OW 266
50699: PUSH
50700: LD_INT 32
50702: PUSH
50703: LD_INT 33
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: IN
50710: NOT
50711: OR
50712: IFFALSE 50716
// exit ;
50714: GO 51825
// nat := GetNation ( tower ) ;
50716: LD_ADDR_VAR 0 12
50720: PUSH
50721: LD_VAR 0 1
50725: PPUSH
50726: CALL_OW 248
50730: ST_TO_ADDR
// side := GetSide ( tower ) ;
50731: LD_ADDR_VAR 0 16
50735: PUSH
50736: LD_VAR 0 1
50740: PPUSH
50741: CALL_OW 255
50745: ST_TO_ADDR
// x := GetX ( tower ) ;
50746: LD_ADDR_VAR 0 10
50750: PUSH
50751: LD_VAR 0 1
50755: PPUSH
50756: CALL_OW 250
50760: ST_TO_ADDR
// y := GetY ( tower ) ;
50761: LD_ADDR_VAR 0 11
50765: PUSH
50766: LD_VAR 0 1
50770: PPUSH
50771: CALL_OW 251
50775: ST_TO_ADDR
// if not x or not y then
50776: LD_VAR 0 10
50780: NOT
50781: PUSH
50782: LD_VAR 0 11
50786: NOT
50787: OR
50788: IFFALSE 50792
// exit ;
50790: GO 51825
// weapon := 0 ;
50792: LD_ADDR_VAR 0 18
50796: PUSH
50797: LD_INT 0
50799: ST_TO_ADDR
// fac_list := [ ] ;
50800: LD_ADDR_VAR 0 17
50804: PUSH
50805: EMPTY
50806: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
50807: LD_ADDR_VAR 0 6
50811: PUSH
50812: LD_VAR 0 1
50816: PPUSH
50817: CALL_OW 274
50821: PPUSH
50822: LD_VAR 0 2
50826: PPUSH
50827: LD_INT 0
50829: PPUSH
50830: CALL 48396 0 3
50834: PPUSH
50835: LD_INT 30
50837: PUSH
50838: LD_INT 3
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PPUSH
50845: CALL_OW 72
50849: ST_TO_ADDR
// if not factories then
50850: LD_VAR 0 6
50854: NOT
50855: IFFALSE 50859
// exit ;
50857: GO 51825
// for i in factories do
50859: LD_ADDR_VAR 0 8
50863: PUSH
50864: LD_VAR 0 6
50868: PUSH
50869: FOR_IN
50870: IFFALSE 50895
// fac_list := fac_list union AvailableWeaponList ( i ) ;
50872: LD_ADDR_VAR 0 17
50876: PUSH
50877: LD_VAR 0 17
50881: PUSH
50882: LD_VAR 0 8
50886: PPUSH
50887: CALL_OW 478
50891: UNION
50892: ST_TO_ADDR
50893: GO 50869
50895: POP
50896: POP
// if not fac_list then
50897: LD_VAR 0 17
50901: NOT
50902: IFFALSE 50906
// exit ;
50904: GO 51825
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
50906: LD_ADDR_VAR 0 5
50910: PUSH
50911: LD_INT 4
50913: PUSH
50914: LD_INT 5
50916: PUSH
50917: LD_INT 9
50919: PUSH
50920: LD_INT 10
50922: PUSH
50923: LD_INT 6
50925: PUSH
50926: LD_INT 7
50928: PUSH
50929: LD_INT 11
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: LIST
50936: LIST
50937: LIST
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 27
50943: PUSH
50944: LD_INT 28
50946: PUSH
50947: LD_INT 26
50949: PUSH
50950: LD_INT 30
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: PUSH
50959: LD_INT 43
50961: PUSH
50962: LD_INT 44
50964: PUSH
50965: LD_INT 46
50967: PUSH
50968: LD_INT 45
50970: PUSH
50971: LD_INT 47
50973: PUSH
50974: LD_INT 49
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: LIST
50989: PUSH
50990: LD_VAR 0 12
50994: ARRAY
50995: ST_TO_ADDR
// list := list isect fac_list ;
50996: LD_ADDR_VAR 0 5
51000: PUSH
51001: LD_VAR 0 5
51005: PUSH
51006: LD_VAR 0 17
51010: ISECT
51011: ST_TO_ADDR
// if not list then
51012: LD_VAR 0 5
51016: NOT
51017: IFFALSE 51021
// exit ;
51019: GO 51825
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
51021: LD_VAR 0 12
51025: PUSH
51026: LD_INT 3
51028: EQUAL
51029: PUSH
51030: LD_INT 49
51032: PUSH
51033: LD_VAR 0 5
51037: IN
51038: AND
51039: PUSH
51040: LD_INT 31
51042: PPUSH
51043: LD_VAR 0 16
51047: PPUSH
51048: CALL_OW 321
51052: PUSH
51053: LD_INT 2
51055: EQUAL
51056: AND
51057: IFFALSE 51117
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
51059: LD_INT 22
51061: PUSH
51062: LD_VAR 0 16
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 35
51073: PUSH
51074: LD_INT 49
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 91
51083: PUSH
51084: LD_VAR 0 1
51088: PUSH
51089: LD_INT 10
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: LIST
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: LIST
51101: PPUSH
51102: CALL_OW 69
51106: NOT
51107: IFFALSE 51117
// weapon := ru_time_lapser ;
51109: LD_ADDR_VAR 0 18
51113: PUSH
51114: LD_INT 49
51116: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
51117: LD_VAR 0 12
51121: PUSH
51122: LD_INT 1
51124: PUSH
51125: LD_INT 2
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: IN
51132: PUSH
51133: LD_INT 11
51135: PUSH
51136: LD_VAR 0 5
51140: IN
51141: PUSH
51142: LD_INT 30
51144: PUSH
51145: LD_VAR 0 5
51149: IN
51150: OR
51151: AND
51152: PUSH
51153: LD_INT 6
51155: PPUSH
51156: LD_VAR 0 16
51160: PPUSH
51161: CALL_OW 321
51165: PUSH
51166: LD_INT 2
51168: EQUAL
51169: AND
51170: IFFALSE 51335
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
51172: LD_INT 22
51174: PUSH
51175: LD_VAR 0 16
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 2
51186: PUSH
51187: LD_INT 35
51189: PUSH
51190: LD_INT 11
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 35
51199: PUSH
51200: LD_INT 30
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 91
51214: PUSH
51215: LD_VAR 0 1
51219: PUSH
51220: LD_INT 18
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: LIST
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: LIST
51232: PPUSH
51233: CALL_OW 69
51237: NOT
51238: PUSH
51239: LD_INT 22
51241: PUSH
51242: LD_VAR 0 16
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: LD_INT 2
51253: PUSH
51254: LD_INT 30
51256: PUSH
51257: LD_INT 32
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 30
51266: PUSH
51267: LD_INT 33
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 91
51281: PUSH
51282: LD_VAR 0 1
51286: PUSH
51287: LD_INT 12
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: LIST
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: LIST
51299: PUSH
51300: EMPTY
51301: LIST
51302: PPUSH
51303: CALL_OW 69
51307: PUSH
51308: LD_INT 2
51310: GREATER
51311: AND
51312: IFFALSE 51335
// weapon := [ us_radar , ar_radar ] [ nat ] ;
51314: LD_ADDR_VAR 0 18
51318: PUSH
51319: LD_INT 11
51321: PUSH
51322: LD_INT 30
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: LD_VAR 0 12
51333: ARRAY
51334: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
51335: LD_VAR 0 18
51339: NOT
51340: PUSH
51341: LD_INT 40
51343: PPUSH
51344: LD_VAR 0 16
51348: PPUSH
51349: CALL_OW 321
51353: PUSH
51354: LD_INT 2
51356: EQUAL
51357: AND
51358: PUSH
51359: LD_INT 7
51361: PUSH
51362: LD_VAR 0 5
51366: IN
51367: PUSH
51368: LD_INT 28
51370: PUSH
51371: LD_VAR 0 5
51375: IN
51376: OR
51377: PUSH
51378: LD_INT 45
51380: PUSH
51381: LD_VAR 0 5
51385: IN
51386: OR
51387: AND
51388: IFFALSE 51642
// begin hex := GetHexInfo ( x , y ) ;
51390: LD_ADDR_VAR 0 4
51394: PUSH
51395: LD_VAR 0 10
51399: PPUSH
51400: LD_VAR 0 11
51404: PPUSH
51405: CALL_OW 546
51409: ST_TO_ADDR
// if hex [ 1 ] then
51410: LD_VAR 0 4
51414: PUSH
51415: LD_INT 1
51417: ARRAY
51418: IFFALSE 51422
// exit ;
51420: GO 51825
// height := hex [ 2 ] ;
51422: LD_ADDR_VAR 0 15
51426: PUSH
51427: LD_VAR 0 4
51431: PUSH
51432: LD_INT 2
51434: ARRAY
51435: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
51436: LD_ADDR_VAR 0 14
51440: PUSH
51441: LD_INT 0
51443: PUSH
51444: LD_INT 2
51446: PUSH
51447: LD_INT 3
51449: PUSH
51450: LD_INT 5
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: ST_TO_ADDR
// for i in tmp do
51459: LD_ADDR_VAR 0 8
51463: PUSH
51464: LD_VAR 0 14
51468: PUSH
51469: FOR_IN
51470: IFFALSE 51640
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
51472: LD_ADDR_VAR 0 9
51476: PUSH
51477: LD_VAR 0 10
51481: PPUSH
51482: LD_VAR 0 8
51486: PPUSH
51487: LD_INT 5
51489: PPUSH
51490: CALL_OW 272
51494: PUSH
51495: LD_VAR 0 11
51499: PPUSH
51500: LD_VAR 0 8
51504: PPUSH
51505: LD_INT 5
51507: PPUSH
51508: CALL_OW 273
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
51517: LD_VAR 0 9
51521: PUSH
51522: LD_INT 1
51524: ARRAY
51525: PPUSH
51526: LD_VAR 0 9
51530: PUSH
51531: LD_INT 2
51533: ARRAY
51534: PPUSH
51535: CALL_OW 488
51539: IFFALSE 51638
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
51541: LD_ADDR_VAR 0 4
51545: PUSH
51546: LD_VAR 0 9
51550: PUSH
51551: LD_INT 1
51553: ARRAY
51554: PPUSH
51555: LD_VAR 0 9
51559: PUSH
51560: LD_INT 2
51562: ARRAY
51563: PPUSH
51564: CALL_OW 546
51568: ST_TO_ADDR
// if hex [ 1 ] then
51569: LD_VAR 0 4
51573: PUSH
51574: LD_INT 1
51576: ARRAY
51577: IFFALSE 51581
// continue ;
51579: GO 51469
// h := hex [ 2 ] ;
51581: LD_ADDR_VAR 0 13
51585: PUSH
51586: LD_VAR 0 4
51590: PUSH
51591: LD_INT 2
51593: ARRAY
51594: ST_TO_ADDR
// if h + 7 < height then
51595: LD_VAR 0 13
51599: PUSH
51600: LD_INT 7
51602: PLUS
51603: PUSH
51604: LD_VAR 0 15
51608: LESS
51609: IFFALSE 51638
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
51611: LD_ADDR_VAR 0 18
51615: PUSH
51616: LD_INT 7
51618: PUSH
51619: LD_INT 28
51621: PUSH
51622: LD_INT 45
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: LIST
51629: PUSH
51630: LD_VAR 0 12
51634: ARRAY
51635: ST_TO_ADDR
// break ;
51636: GO 51640
// end ; end ; end ;
51638: GO 51469
51640: POP
51641: POP
// end ; if not weapon then
51642: LD_VAR 0 18
51646: NOT
51647: IFFALSE 51707
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
51649: LD_ADDR_VAR 0 5
51653: PUSH
51654: LD_VAR 0 5
51658: PUSH
51659: LD_INT 11
51661: PUSH
51662: LD_INT 30
51664: PUSH
51665: LD_INT 49
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: LIST
51672: DIFF
51673: ST_TO_ADDR
// if not list then
51674: LD_VAR 0 5
51678: NOT
51679: IFFALSE 51683
// exit ;
51681: GO 51825
// weapon := list [ rand ( 1 , list ) ] ;
51683: LD_ADDR_VAR 0 18
51687: PUSH
51688: LD_VAR 0 5
51692: PUSH
51693: LD_INT 1
51695: PPUSH
51696: LD_VAR 0 5
51700: PPUSH
51701: CALL_OW 12
51705: ARRAY
51706: ST_TO_ADDR
// end ; if weapon then
51707: LD_VAR 0 18
51711: IFFALSE 51825
// begin tmp := CostOfWeapon ( weapon ) ;
51713: LD_ADDR_VAR 0 14
51717: PUSH
51718: LD_VAR 0 18
51722: PPUSH
51723: CALL_OW 451
51727: ST_TO_ADDR
// j := GetBase ( tower ) ;
51728: LD_ADDR_VAR 0 9
51732: PUSH
51733: LD_VAR 0 1
51737: PPUSH
51738: CALL_OW 274
51742: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
51743: LD_VAR 0 9
51747: PPUSH
51748: LD_INT 1
51750: PPUSH
51751: CALL_OW 275
51755: PUSH
51756: LD_VAR 0 14
51760: PUSH
51761: LD_INT 1
51763: ARRAY
51764: GREATEREQUAL
51765: PUSH
51766: LD_VAR 0 9
51770: PPUSH
51771: LD_INT 2
51773: PPUSH
51774: CALL_OW 275
51778: PUSH
51779: LD_VAR 0 14
51783: PUSH
51784: LD_INT 2
51786: ARRAY
51787: GREATEREQUAL
51788: AND
51789: PUSH
51790: LD_VAR 0 9
51794: PPUSH
51795: LD_INT 3
51797: PPUSH
51798: CALL_OW 275
51802: PUSH
51803: LD_VAR 0 14
51807: PUSH
51808: LD_INT 3
51810: ARRAY
51811: GREATEREQUAL
51812: AND
51813: IFFALSE 51825
// result := weapon ;
51815: LD_ADDR_VAR 0 3
51819: PUSH
51820: LD_VAR 0 18
51824: ST_TO_ADDR
// end ; end ;
51825: LD_VAR 0 3
51829: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
51830: LD_INT 0
51832: PPUSH
51833: PPUSH
// result := true ;
51834: LD_ADDR_VAR 0 3
51838: PUSH
51839: LD_INT 1
51841: ST_TO_ADDR
// if array1 = array2 then
51842: LD_VAR 0 1
51846: PUSH
51847: LD_VAR 0 2
51851: EQUAL
51852: IFFALSE 51912
// begin for i = 1 to array1 do
51854: LD_ADDR_VAR 0 4
51858: PUSH
51859: DOUBLE
51860: LD_INT 1
51862: DEC
51863: ST_TO_ADDR
51864: LD_VAR 0 1
51868: PUSH
51869: FOR_TO
51870: IFFALSE 51908
// if array1 [ i ] <> array2 [ i ] then
51872: LD_VAR 0 1
51876: PUSH
51877: LD_VAR 0 4
51881: ARRAY
51882: PUSH
51883: LD_VAR 0 2
51887: PUSH
51888: LD_VAR 0 4
51892: ARRAY
51893: NONEQUAL
51894: IFFALSE 51906
// begin result := false ;
51896: LD_ADDR_VAR 0 3
51900: PUSH
51901: LD_INT 0
51903: ST_TO_ADDR
// break ;
51904: GO 51908
// end ;
51906: GO 51869
51908: POP
51909: POP
// end else
51910: GO 51920
// result := false ;
51912: LD_ADDR_VAR 0 3
51916: PUSH
51917: LD_INT 0
51919: ST_TO_ADDR
// end ;
51920: LD_VAR 0 3
51924: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
51925: LD_INT 0
51927: PPUSH
51928: PPUSH
// if not array1 or not array2 then
51929: LD_VAR 0 1
51933: NOT
51934: PUSH
51935: LD_VAR 0 2
51939: NOT
51940: OR
51941: IFFALSE 51945
// exit ;
51943: GO 52009
// result := true ;
51945: LD_ADDR_VAR 0 3
51949: PUSH
51950: LD_INT 1
51952: ST_TO_ADDR
// for i = 1 to array1 do
51953: LD_ADDR_VAR 0 4
51957: PUSH
51958: DOUBLE
51959: LD_INT 1
51961: DEC
51962: ST_TO_ADDR
51963: LD_VAR 0 1
51967: PUSH
51968: FOR_TO
51969: IFFALSE 52007
// if array1 [ i ] <> array2 [ i ] then
51971: LD_VAR 0 1
51975: PUSH
51976: LD_VAR 0 4
51980: ARRAY
51981: PUSH
51982: LD_VAR 0 2
51986: PUSH
51987: LD_VAR 0 4
51991: ARRAY
51992: NONEQUAL
51993: IFFALSE 52005
// begin result := false ;
51995: LD_ADDR_VAR 0 3
51999: PUSH
52000: LD_INT 0
52002: ST_TO_ADDR
// break ;
52003: GO 52007
// end ;
52005: GO 51968
52007: POP
52008: POP
// end ;
52009: LD_VAR 0 3
52013: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
52014: LD_INT 0
52016: PPUSH
52017: PPUSH
52018: PPUSH
// pom := GetBase ( fac ) ;
52019: LD_ADDR_VAR 0 5
52023: PUSH
52024: LD_VAR 0 1
52028: PPUSH
52029: CALL_OW 274
52033: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
52034: LD_ADDR_VAR 0 4
52038: PUSH
52039: LD_VAR 0 2
52043: PUSH
52044: LD_INT 1
52046: ARRAY
52047: PPUSH
52048: LD_VAR 0 2
52052: PUSH
52053: LD_INT 2
52055: ARRAY
52056: PPUSH
52057: LD_VAR 0 2
52061: PUSH
52062: LD_INT 3
52064: ARRAY
52065: PPUSH
52066: LD_VAR 0 2
52070: PUSH
52071: LD_INT 4
52073: ARRAY
52074: PPUSH
52075: CALL_OW 449
52079: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52080: LD_ADDR_VAR 0 3
52084: PUSH
52085: LD_VAR 0 5
52089: PPUSH
52090: LD_INT 1
52092: PPUSH
52093: CALL_OW 275
52097: PUSH
52098: LD_VAR 0 4
52102: PUSH
52103: LD_INT 1
52105: ARRAY
52106: GREATEREQUAL
52107: PUSH
52108: LD_VAR 0 5
52112: PPUSH
52113: LD_INT 2
52115: PPUSH
52116: CALL_OW 275
52120: PUSH
52121: LD_VAR 0 4
52125: PUSH
52126: LD_INT 2
52128: ARRAY
52129: GREATEREQUAL
52130: AND
52131: PUSH
52132: LD_VAR 0 5
52136: PPUSH
52137: LD_INT 3
52139: PPUSH
52140: CALL_OW 275
52144: PUSH
52145: LD_VAR 0 4
52149: PUSH
52150: LD_INT 3
52152: ARRAY
52153: GREATEREQUAL
52154: AND
52155: ST_TO_ADDR
// end ;
52156: LD_VAR 0 3
52160: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
52161: LD_INT 0
52163: PPUSH
52164: PPUSH
52165: PPUSH
52166: PPUSH
// pom := GetBase ( building ) ;
52167: LD_ADDR_VAR 0 3
52171: PUSH
52172: LD_VAR 0 1
52176: PPUSH
52177: CALL_OW 274
52181: ST_TO_ADDR
// if not pom then
52182: LD_VAR 0 3
52186: NOT
52187: IFFALSE 52191
// exit ;
52189: GO 52361
// btype := GetBType ( building ) ;
52191: LD_ADDR_VAR 0 5
52195: PUSH
52196: LD_VAR 0 1
52200: PPUSH
52201: CALL_OW 266
52205: ST_TO_ADDR
// if btype = b_armoury then
52206: LD_VAR 0 5
52210: PUSH
52211: LD_INT 4
52213: EQUAL
52214: IFFALSE 52224
// btype := b_barracks ;
52216: LD_ADDR_VAR 0 5
52220: PUSH
52221: LD_INT 5
52223: ST_TO_ADDR
// if btype = b_depot then
52224: LD_VAR 0 5
52228: PUSH
52229: LD_INT 0
52231: EQUAL
52232: IFFALSE 52242
// btype := b_warehouse ;
52234: LD_ADDR_VAR 0 5
52238: PUSH
52239: LD_INT 1
52241: ST_TO_ADDR
// if btype = b_workshop then
52242: LD_VAR 0 5
52246: PUSH
52247: LD_INT 2
52249: EQUAL
52250: IFFALSE 52260
// btype := b_factory ;
52252: LD_ADDR_VAR 0 5
52256: PUSH
52257: LD_INT 3
52259: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52260: LD_ADDR_VAR 0 4
52264: PUSH
52265: LD_VAR 0 5
52269: PPUSH
52270: LD_VAR 0 1
52274: PPUSH
52275: CALL_OW 248
52279: PPUSH
52280: CALL_OW 450
52284: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52285: LD_ADDR_VAR 0 2
52289: PUSH
52290: LD_VAR 0 3
52294: PPUSH
52295: LD_INT 1
52297: PPUSH
52298: CALL_OW 275
52302: PUSH
52303: LD_VAR 0 4
52307: PUSH
52308: LD_INT 1
52310: ARRAY
52311: GREATEREQUAL
52312: PUSH
52313: LD_VAR 0 3
52317: PPUSH
52318: LD_INT 2
52320: PPUSH
52321: CALL_OW 275
52325: PUSH
52326: LD_VAR 0 4
52330: PUSH
52331: LD_INT 2
52333: ARRAY
52334: GREATEREQUAL
52335: AND
52336: PUSH
52337: LD_VAR 0 3
52341: PPUSH
52342: LD_INT 3
52344: PPUSH
52345: CALL_OW 275
52349: PUSH
52350: LD_VAR 0 4
52354: PUSH
52355: LD_INT 3
52357: ARRAY
52358: GREATEREQUAL
52359: AND
52360: ST_TO_ADDR
// end ;
52361: LD_VAR 0 2
52365: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
52366: LD_INT 0
52368: PPUSH
52369: PPUSH
52370: PPUSH
// pom := GetBase ( building ) ;
52371: LD_ADDR_VAR 0 4
52375: PUSH
52376: LD_VAR 0 1
52380: PPUSH
52381: CALL_OW 274
52385: ST_TO_ADDR
// if not pom then
52386: LD_VAR 0 4
52390: NOT
52391: IFFALSE 52395
// exit ;
52393: GO 52496
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52395: LD_ADDR_VAR 0 5
52399: PUSH
52400: LD_VAR 0 2
52404: PPUSH
52405: LD_VAR 0 1
52409: PPUSH
52410: CALL_OW 248
52414: PPUSH
52415: CALL_OW 450
52419: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52420: LD_ADDR_VAR 0 3
52424: PUSH
52425: LD_VAR 0 4
52429: PPUSH
52430: LD_INT 1
52432: PPUSH
52433: CALL_OW 275
52437: PUSH
52438: LD_VAR 0 5
52442: PUSH
52443: LD_INT 1
52445: ARRAY
52446: GREATEREQUAL
52447: PUSH
52448: LD_VAR 0 4
52452: PPUSH
52453: LD_INT 2
52455: PPUSH
52456: CALL_OW 275
52460: PUSH
52461: LD_VAR 0 5
52465: PUSH
52466: LD_INT 2
52468: ARRAY
52469: GREATEREQUAL
52470: AND
52471: PUSH
52472: LD_VAR 0 4
52476: PPUSH
52477: LD_INT 3
52479: PPUSH
52480: CALL_OW 275
52484: PUSH
52485: LD_VAR 0 5
52489: PUSH
52490: LD_INT 3
52492: ARRAY
52493: GREATEREQUAL
52494: AND
52495: ST_TO_ADDR
// end ;
52496: LD_VAR 0 3
52500: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
52501: LD_INT 0
52503: PPUSH
52504: PPUSH
52505: PPUSH
52506: PPUSH
52507: PPUSH
52508: PPUSH
52509: PPUSH
52510: PPUSH
52511: PPUSH
52512: PPUSH
52513: PPUSH
// result := false ;
52514: LD_ADDR_VAR 0 8
52518: PUSH
52519: LD_INT 0
52521: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
52522: LD_VAR 0 5
52526: NOT
52527: PUSH
52528: LD_VAR 0 1
52532: NOT
52533: OR
52534: PUSH
52535: LD_VAR 0 2
52539: NOT
52540: OR
52541: PUSH
52542: LD_VAR 0 3
52546: NOT
52547: OR
52548: IFFALSE 52552
// exit ;
52550: GO 53366
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
52552: LD_ADDR_VAR 0 14
52556: PUSH
52557: LD_VAR 0 1
52561: PPUSH
52562: LD_VAR 0 2
52566: PPUSH
52567: LD_VAR 0 3
52571: PPUSH
52572: LD_VAR 0 4
52576: PPUSH
52577: LD_VAR 0 5
52581: PUSH
52582: LD_INT 1
52584: ARRAY
52585: PPUSH
52586: CALL_OW 248
52590: PPUSH
52591: LD_INT 0
52593: PPUSH
52594: CALL 54619 0 6
52598: ST_TO_ADDR
// if not hexes then
52599: LD_VAR 0 14
52603: NOT
52604: IFFALSE 52608
// exit ;
52606: GO 53366
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52608: LD_ADDR_VAR 0 17
52612: PUSH
52613: LD_VAR 0 5
52617: PPUSH
52618: LD_INT 22
52620: PUSH
52621: LD_VAR 0 13
52625: PPUSH
52626: CALL_OW 255
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: LD_INT 2
52637: PUSH
52638: LD_INT 30
52640: PUSH
52641: LD_INT 0
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 30
52650: PUSH
52651: LD_INT 1
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: LIST
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PPUSH
52667: CALL_OW 72
52671: ST_TO_ADDR
// for i = 1 to hexes do
52672: LD_ADDR_VAR 0 9
52676: PUSH
52677: DOUBLE
52678: LD_INT 1
52680: DEC
52681: ST_TO_ADDR
52682: LD_VAR 0 14
52686: PUSH
52687: FOR_TO
52688: IFFALSE 53364
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52690: LD_ADDR_VAR 0 13
52694: PUSH
52695: LD_VAR 0 14
52699: PUSH
52700: LD_VAR 0 9
52704: ARRAY
52705: PUSH
52706: LD_INT 1
52708: ARRAY
52709: PPUSH
52710: LD_VAR 0 14
52714: PUSH
52715: LD_VAR 0 9
52719: ARRAY
52720: PUSH
52721: LD_INT 2
52723: ARRAY
52724: PPUSH
52725: CALL_OW 428
52729: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
52730: LD_VAR 0 14
52734: PUSH
52735: LD_VAR 0 9
52739: ARRAY
52740: PUSH
52741: LD_INT 1
52743: ARRAY
52744: PPUSH
52745: LD_VAR 0 14
52749: PUSH
52750: LD_VAR 0 9
52754: ARRAY
52755: PUSH
52756: LD_INT 2
52758: ARRAY
52759: PPUSH
52760: CALL_OW 351
52764: PUSH
52765: LD_VAR 0 14
52769: PUSH
52770: LD_VAR 0 9
52774: ARRAY
52775: PUSH
52776: LD_INT 1
52778: ARRAY
52779: PPUSH
52780: LD_VAR 0 14
52784: PUSH
52785: LD_VAR 0 9
52789: ARRAY
52790: PUSH
52791: LD_INT 2
52793: ARRAY
52794: PPUSH
52795: CALL_OW 488
52799: NOT
52800: OR
52801: PUSH
52802: LD_VAR 0 13
52806: PPUSH
52807: CALL_OW 247
52811: PUSH
52812: LD_INT 3
52814: EQUAL
52815: OR
52816: IFFALSE 52822
// exit ;
52818: POP
52819: POP
52820: GO 53366
// if not tmp then
52822: LD_VAR 0 13
52826: NOT
52827: IFFALSE 52831
// continue ;
52829: GO 52687
// result := true ;
52831: LD_ADDR_VAR 0 8
52835: PUSH
52836: LD_INT 1
52838: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
52839: LD_VAR 0 6
52843: PUSH
52844: LD_VAR 0 13
52848: PPUSH
52849: CALL_OW 247
52853: PUSH
52854: LD_INT 2
52856: EQUAL
52857: AND
52858: PUSH
52859: LD_VAR 0 13
52863: PPUSH
52864: CALL_OW 263
52868: PUSH
52869: LD_INT 1
52871: EQUAL
52872: AND
52873: IFFALSE 53037
// begin if IsDrivenBy ( tmp ) then
52875: LD_VAR 0 13
52879: PPUSH
52880: CALL_OW 311
52884: IFFALSE 52888
// continue ;
52886: GO 52687
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
52888: LD_VAR 0 6
52892: PPUSH
52893: LD_INT 3
52895: PUSH
52896: LD_INT 60
52898: PUSH
52899: EMPTY
52900: LIST
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: PUSH
52906: LD_INT 3
52908: PUSH
52909: LD_INT 55
52911: PUSH
52912: EMPTY
52913: LIST
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PPUSH
52923: CALL_OW 72
52927: IFFALSE 53035
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
52929: LD_ADDR_VAR 0 18
52933: PUSH
52934: LD_VAR 0 6
52938: PPUSH
52939: LD_INT 3
52941: PUSH
52942: LD_INT 60
52944: PUSH
52945: EMPTY
52946: LIST
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 3
52954: PUSH
52955: LD_INT 55
52957: PUSH
52958: EMPTY
52959: LIST
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PPUSH
52969: CALL_OW 72
52973: PUSH
52974: LD_INT 1
52976: ARRAY
52977: ST_TO_ADDR
// if IsInUnit ( driver ) then
52978: LD_VAR 0 18
52982: PPUSH
52983: CALL_OW 310
52987: IFFALSE 52998
// ComExit ( driver ) ;
52989: LD_VAR 0 18
52993: PPUSH
52994: CALL 78411 0 1
// AddComEnterUnit ( driver , tmp ) ;
52998: LD_VAR 0 18
53002: PPUSH
53003: LD_VAR 0 13
53007: PPUSH
53008: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
53012: LD_VAR 0 18
53016: PPUSH
53017: LD_VAR 0 7
53021: PPUSH
53022: CALL_OW 173
// AddComExitVehicle ( driver ) ;
53026: LD_VAR 0 18
53030: PPUSH
53031: CALL_OW 181
// end ; continue ;
53035: GO 52687
// end ; if not cleaners or not tmp in cleaners then
53037: LD_VAR 0 6
53041: NOT
53042: PUSH
53043: LD_VAR 0 13
53047: PUSH
53048: LD_VAR 0 6
53052: IN
53053: NOT
53054: OR
53055: IFFALSE 53362
// begin if dep then
53057: LD_VAR 0 17
53061: IFFALSE 53197
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
53063: LD_ADDR_VAR 0 16
53067: PUSH
53068: LD_VAR 0 17
53072: PUSH
53073: LD_INT 1
53075: ARRAY
53076: PPUSH
53077: CALL_OW 250
53081: PPUSH
53082: LD_VAR 0 17
53086: PUSH
53087: LD_INT 1
53089: ARRAY
53090: PPUSH
53091: CALL_OW 254
53095: PPUSH
53096: LD_INT 5
53098: PPUSH
53099: CALL_OW 272
53103: PUSH
53104: LD_VAR 0 17
53108: PUSH
53109: LD_INT 1
53111: ARRAY
53112: PPUSH
53113: CALL_OW 251
53117: PPUSH
53118: LD_VAR 0 17
53122: PUSH
53123: LD_INT 1
53125: ARRAY
53126: PPUSH
53127: CALL_OW 254
53131: PPUSH
53132: LD_INT 5
53134: PPUSH
53135: CALL_OW 273
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
53144: LD_VAR 0 16
53148: PUSH
53149: LD_INT 1
53151: ARRAY
53152: PPUSH
53153: LD_VAR 0 16
53157: PUSH
53158: LD_INT 2
53160: ARRAY
53161: PPUSH
53162: CALL_OW 488
53166: IFFALSE 53197
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
53168: LD_VAR 0 13
53172: PPUSH
53173: LD_VAR 0 16
53177: PUSH
53178: LD_INT 1
53180: ARRAY
53181: PPUSH
53182: LD_VAR 0 16
53186: PUSH
53187: LD_INT 2
53189: ARRAY
53190: PPUSH
53191: CALL_OW 111
// continue ;
53195: GO 52687
// end ; end ; r := GetDir ( tmp ) ;
53197: LD_ADDR_VAR 0 15
53201: PUSH
53202: LD_VAR 0 13
53206: PPUSH
53207: CALL_OW 254
53211: ST_TO_ADDR
// if r = 5 then
53212: LD_VAR 0 15
53216: PUSH
53217: LD_INT 5
53219: EQUAL
53220: IFFALSE 53230
// r := 0 ;
53222: LD_ADDR_VAR 0 15
53226: PUSH
53227: LD_INT 0
53229: ST_TO_ADDR
// for j = r to 5 do
53230: LD_ADDR_VAR 0 10
53234: PUSH
53235: DOUBLE
53236: LD_VAR 0 15
53240: DEC
53241: ST_TO_ADDR
53242: LD_INT 5
53244: PUSH
53245: FOR_TO
53246: IFFALSE 53360
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
53248: LD_ADDR_VAR 0 11
53252: PUSH
53253: LD_VAR 0 13
53257: PPUSH
53258: CALL_OW 250
53262: PPUSH
53263: LD_VAR 0 10
53267: PPUSH
53268: LD_INT 2
53270: PPUSH
53271: CALL_OW 272
53275: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
53276: LD_ADDR_VAR 0 12
53280: PUSH
53281: LD_VAR 0 13
53285: PPUSH
53286: CALL_OW 251
53290: PPUSH
53291: LD_VAR 0 10
53295: PPUSH
53296: LD_INT 2
53298: PPUSH
53299: CALL_OW 273
53303: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
53304: LD_VAR 0 11
53308: PPUSH
53309: LD_VAR 0 12
53313: PPUSH
53314: CALL_OW 488
53318: PUSH
53319: LD_VAR 0 11
53323: PPUSH
53324: LD_VAR 0 12
53328: PPUSH
53329: CALL_OW 428
53333: NOT
53334: AND
53335: IFFALSE 53358
// begin ComMoveXY ( tmp , _x , _y ) ;
53337: LD_VAR 0 13
53341: PPUSH
53342: LD_VAR 0 11
53346: PPUSH
53347: LD_VAR 0 12
53351: PPUSH
53352: CALL_OW 111
// break ;
53356: GO 53360
// end ; end ;
53358: GO 53245
53360: POP
53361: POP
// end ; end ;
53362: GO 52687
53364: POP
53365: POP
// end ;
53366: LD_VAR 0 8
53370: RET
// export function BuildingTechInvented ( side , btype ) ; begin
53371: LD_INT 0
53373: PPUSH
// result := true ;
53374: LD_ADDR_VAR 0 3
53378: PUSH
53379: LD_INT 1
53381: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
53382: LD_VAR 0 2
53386: PUSH
53387: LD_INT 24
53389: DOUBLE
53390: EQUAL
53391: IFTRUE 53401
53393: LD_INT 33
53395: DOUBLE
53396: EQUAL
53397: IFTRUE 53401
53399: GO 53426
53401: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
53402: LD_ADDR_VAR 0 3
53406: PUSH
53407: LD_INT 32
53409: PPUSH
53410: LD_VAR 0 1
53414: PPUSH
53415: CALL_OW 321
53419: PUSH
53420: LD_INT 2
53422: EQUAL
53423: ST_TO_ADDR
53424: GO 53742
53426: LD_INT 20
53428: DOUBLE
53429: EQUAL
53430: IFTRUE 53434
53432: GO 53459
53434: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
53435: LD_ADDR_VAR 0 3
53439: PUSH
53440: LD_INT 6
53442: PPUSH
53443: LD_VAR 0 1
53447: PPUSH
53448: CALL_OW 321
53452: PUSH
53453: LD_INT 2
53455: EQUAL
53456: ST_TO_ADDR
53457: GO 53742
53459: LD_INT 22
53461: DOUBLE
53462: EQUAL
53463: IFTRUE 53473
53465: LD_INT 36
53467: DOUBLE
53468: EQUAL
53469: IFTRUE 53473
53471: GO 53498
53473: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
53474: LD_ADDR_VAR 0 3
53478: PUSH
53479: LD_INT 15
53481: PPUSH
53482: LD_VAR 0 1
53486: PPUSH
53487: CALL_OW 321
53491: PUSH
53492: LD_INT 2
53494: EQUAL
53495: ST_TO_ADDR
53496: GO 53742
53498: LD_INT 30
53500: DOUBLE
53501: EQUAL
53502: IFTRUE 53506
53504: GO 53531
53506: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
53507: LD_ADDR_VAR 0 3
53511: PUSH
53512: LD_INT 20
53514: PPUSH
53515: LD_VAR 0 1
53519: PPUSH
53520: CALL_OW 321
53524: PUSH
53525: LD_INT 2
53527: EQUAL
53528: ST_TO_ADDR
53529: GO 53742
53531: LD_INT 28
53533: DOUBLE
53534: EQUAL
53535: IFTRUE 53545
53537: LD_INT 21
53539: DOUBLE
53540: EQUAL
53541: IFTRUE 53545
53543: GO 53570
53545: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
53546: LD_ADDR_VAR 0 3
53550: PUSH
53551: LD_INT 21
53553: PPUSH
53554: LD_VAR 0 1
53558: PPUSH
53559: CALL_OW 321
53563: PUSH
53564: LD_INT 2
53566: EQUAL
53567: ST_TO_ADDR
53568: GO 53742
53570: LD_INT 16
53572: DOUBLE
53573: EQUAL
53574: IFTRUE 53578
53576: GO 53603
53578: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
53579: LD_ADDR_VAR 0 3
53583: PUSH
53584: LD_INT 84
53586: PPUSH
53587: LD_VAR 0 1
53591: PPUSH
53592: CALL_OW 321
53596: PUSH
53597: LD_INT 2
53599: EQUAL
53600: ST_TO_ADDR
53601: GO 53742
53603: LD_INT 19
53605: DOUBLE
53606: EQUAL
53607: IFTRUE 53617
53609: LD_INT 23
53611: DOUBLE
53612: EQUAL
53613: IFTRUE 53617
53615: GO 53642
53617: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
53618: LD_ADDR_VAR 0 3
53622: PUSH
53623: LD_INT 83
53625: PPUSH
53626: LD_VAR 0 1
53630: PPUSH
53631: CALL_OW 321
53635: PUSH
53636: LD_INT 2
53638: EQUAL
53639: ST_TO_ADDR
53640: GO 53742
53642: LD_INT 17
53644: DOUBLE
53645: EQUAL
53646: IFTRUE 53650
53648: GO 53675
53650: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
53651: LD_ADDR_VAR 0 3
53655: PUSH
53656: LD_INT 39
53658: PPUSH
53659: LD_VAR 0 1
53663: PPUSH
53664: CALL_OW 321
53668: PUSH
53669: LD_INT 2
53671: EQUAL
53672: ST_TO_ADDR
53673: GO 53742
53675: LD_INT 18
53677: DOUBLE
53678: EQUAL
53679: IFTRUE 53683
53681: GO 53708
53683: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
53684: LD_ADDR_VAR 0 3
53688: PUSH
53689: LD_INT 40
53691: PPUSH
53692: LD_VAR 0 1
53696: PPUSH
53697: CALL_OW 321
53701: PUSH
53702: LD_INT 2
53704: EQUAL
53705: ST_TO_ADDR
53706: GO 53742
53708: LD_INT 27
53710: DOUBLE
53711: EQUAL
53712: IFTRUE 53716
53714: GO 53741
53716: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
53717: LD_ADDR_VAR 0 3
53721: PUSH
53722: LD_INT 35
53724: PPUSH
53725: LD_VAR 0 1
53729: PPUSH
53730: CALL_OW 321
53734: PUSH
53735: LD_INT 2
53737: EQUAL
53738: ST_TO_ADDR
53739: GO 53742
53741: POP
// end ;
53742: LD_VAR 0 3
53746: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
53747: LD_INT 0
53749: PPUSH
53750: PPUSH
53751: PPUSH
53752: PPUSH
53753: PPUSH
53754: PPUSH
53755: PPUSH
53756: PPUSH
53757: PPUSH
53758: PPUSH
53759: PPUSH
// result := false ;
53760: LD_ADDR_VAR 0 6
53764: PUSH
53765: LD_INT 0
53767: ST_TO_ADDR
// if btype = b_depot then
53768: LD_VAR 0 2
53772: PUSH
53773: LD_INT 0
53775: EQUAL
53776: IFFALSE 53788
// begin result := true ;
53778: LD_ADDR_VAR 0 6
53782: PUSH
53783: LD_INT 1
53785: ST_TO_ADDR
// exit ;
53786: GO 54614
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
53788: LD_VAR 0 1
53792: NOT
53793: PUSH
53794: LD_VAR 0 1
53798: PPUSH
53799: CALL_OW 266
53803: PUSH
53804: LD_INT 0
53806: PUSH
53807: LD_INT 1
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: IN
53814: NOT
53815: OR
53816: PUSH
53817: LD_VAR 0 2
53821: NOT
53822: OR
53823: PUSH
53824: LD_VAR 0 5
53828: PUSH
53829: LD_INT 0
53831: PUSH
53832: LD_INT 1
53834: PUSH
53835: LD_INT 2
53837: PUSH
53838: LD_INT 3
53840: PUSH
53841: LD_INT 4
53843: PUSH
53844: LD_INT 5
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: IN
53855: NOT
53856: OR
53857: PUSH
53858: LD_VAR 0 3
53862: PPUSH
53863: LD_VAR 0 4
53867: PPUSH
53868: CALL_OW 488
53872: NOT
53873: OR
53874: IFFALSE 53878
// exit ;
53876: GO 54614
// side := GetSide ( depot ) ;
53878: LD_ADDR_VAR 0 9
53882: PUSH
53883: LD_VAR 0 1
53887: PPUSH
53888: CALL_OW 255
53892: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
53893: LD_VAR 0 9
53897: PPUSH
53898: LD_VAR 0 2
53902: PPUSH
53903: CALL 53371 0 2
53907: NOT
53908: IFFALSE 53912
// exit ;
53910: GO 54614
// pom := GetBase ( depot ) ;
53912: LD_ADDR_VAR 0 10
53916: PUSH
53917: LD_VAR 0 1
53921: PPUSH
53922: CALL_OW 274
53926: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
53927: LD_ADDR_VAR 0 11
53931: PUSH
53932: LD_VAR 0 2
53936: PPUSH
53937: LD_VAR 0 1
53941: PPUSH
53942: CALL_OW 248
53946: PPUSH
53947: CALL_OW 450
53951: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
53952: LD_VAR 0 10
53956: PPUSH
53957: LD_INT 1
53959: PPUSH
53960: CALL_OW 275
53964: PUSH
53965: LD_VAR 0 11
53969: PUSH
53970: LD_INT 1
53972: ARRAY
53973: GREATEREQUAL
53974: PUSH
53975: LD_VAR 0 10
53979: PPUSH
53980: LD_INT 2
53982: PPUSH
53983: CALL_OW 275
53987: PUSH
53988: LD_VAR 0 11
53992: PUSH
53993: LD_INT 2
53995: ARRAY
53996: GREATEREQUAL
53997: AND
53998: PUSH
53999: LD_VAR 0 10
54003: PPUSH
54004: LD_INT 3
54006: PPUSH
54007: CALL_OW 275
54011: PUSH
54012: LD_VAR 0 11
54016: PUSH
54017: LD_INT 3
54019: ARRAY
54020: GREATEREQUAL
54021: AND
54022: NOT
54023: IFFALSE 54027
// exit ;
54025: GO 54614
// if GetBType ( depot ) = b_depot then
54027: LD_VAR 0 1
54031: PPUSH
54032: CALL_OW 266
54036: PUSH
54037: LD_INT 0
54039: EQUAL
54040: IFFALSE 54052
// dist := 28 else
54042: LD_ADDR_VAR 0 14
54046: PUSH
54047: LD_INT 28
54049: ST_TO_ADDR
54050: GO 54060
// dist := 36 ;
54052: LD_ADDR_VAR 0 14
54056: PUSH
54057: LD_INT 36
54059: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
54060: LD_VAR 0 1
54064: PPUSH
54065: LD_VAR 0 3
54069: PPUSH
54070: LD_VAR 0 4
54074: PPUSH
54075: CALL_OW 297
54079: PUSH
54080: LD_VAR 0 14
54084: GREATER
54085: IFFALSE 54089
// exit ;
54087: GO 54614
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
54089: LD_ADDR_VAR 0 12
54093: PUSH
54094: LD_VAR 0 2
54098: PPUSH
54099: LD_VAR 0 3
54103: PPUSH
54104: LD_VAR 0 4
54108: PPUSH
54109: LD_VAR 0 5
54113: PPUSH
54114: LD_VAR 0 1
54118: PPUSH
54119: CALL_OW 248
54123: PPUSH
54124: LD_INT 0
54126: PPUSH
54127: CALL 54619 0 6
54131: ST_TO_ADDR
// if not hexes then
54132: LD_VAR 0 12
54136: NOT
54137: IFFALSE 54141
// exit ;
54139: GO 54614
// hex := GetHexInfo ( x , y ) ;
54141: LD_ADDR_VAR 0 15
54145: PUSH
54146: LD_VAR 0 3
54150: PPUSH
54151: LD_VAR 0 4
54155: PPUSH
54156: CALL_OW 546
54160: ST_TO_ADDR
// if hex [ 1 ] then
54161: LD_VAR 0 15
54165: PUSH
54166: LD_INT 1
54168: ARRAY
54169: IFFALSE 54173
// exit ;
54171: GO 54614
// height := hex [ 2 ] ;
54173: LD_ADDR_VAR 0 13
54177: PUSH
54178: LD_VAR 0 15
54182: PUSH
54183: LD_INT 2
54185: ARRAY
54186: ST_TO_ADDR
// for i = 1 to hexes do
54187: LD_ADDR_VAR 0 7
54191: PUSH
54192: DOUBLE
54193: LD_INT 1
54195: DEC
54196: ST_TO_ADDR
54197: LD_VAR 0 12
54201: PUSH
54202: FOR_TO
54203: IFFALSE 54533
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
54205: LD_VAR 0 12
54209: PUSH
54210: LD_VAR 0 7
54214: ARRAY
54215: PUSH
54216: LD_INT 1
54218: ARRAY
54219: PPUSH
54220: LD_VAR 0 12
54224: PUSH
54225: LD_VAR 0 7
54229: ARRAY
54230: PUSH
54231: LD_INT 2
54233: ARRAY
54234: PPUSH
54235: CALL_OW 488
54239: NOT
54240: PUSH
54241: LD_VAR 0 12
54245: PUSH
54246: LD_VAR 0 7
54250: ARRAY
54251: PUSH
54252: LD_INT 1
54254: ARRAY
54255: PPUSH
54256: LD_VAR 0 12
54260: PUSH
54261: LD_VAR 0 7
54265: ARRAY
54266: PUSH
54267: LD_INT 2
54269: ARRAY
54270: PPUSH
54271: CALL_OW 428
54275: PUSH
54276: LD_INT 0
54278: GREATER
54279: OR
54280: PUSH
54281: LD_VAR 0 12
54285: PUSH
54286: LD_VAR 0 7
54290: ARRAY
54291: PUSH
54292: LD_INT 1
54294: ARRAY
54295: PPUSH
54296: LD_VAR 0 12
54300: PUSH
54301: LD_VAR 0 7
54305: ARRAY
54306: PUSH
54307: LD_INT 2
54309: ARRAY
54310: PPUSH
54311: CALL_OW 351
54315: OR
54316: IFFALSE 54322
// exit ;
54318: POP
54319: POP
54320: GO 54614
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54322: LD_ADDR_VAR 0 8
54326: PUSH
54327: LD_VAR 0 12
54331: PUSH
54332: LD_VAR 0 7
54336: ARRAY
54337: PUSH
54338: LD_INT 1
54340: ARRAY
54341: PPUSH
54342: LD_VAR 0 12
54346: PUSH
54347: LD_VAR 0 7
54351: ARRAY
54352: PUSH
54353: LD_INT 2
54355: ARRAY
54356: PPUSH
54357: CALL_OW 546
54361: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
54362: LD_VAR 0 8
54366: PUSH
54367: LD_INT 1
54369: ARRAY
54370: PUSH
54371: LD_VAR 0 8
54375: PUSH
54376: LD_INT 2
54378: ARRAY
54379: PUSH
54380: LD_VAR 0 13
54384: PUSH
54385: LD_INT 2
54387: PLUS
54388: GREATER
54389: OR
54390: PUSH
54391: LD_VAR 0 8
54395: PUSH
54396: LD_INT 2
54398: ARRAY
54399: PUSH
54400: LD_VAR 0 13
54404: PUSH
54405: LD_INT 2
54407: MINUS
54408: LESS
54409: OR
54410: PUSH
54411: LD_VAR 0 8
54415: PUSH
54416: LD_INT 3
54418: ARRAY
54419: PUSH
54420: LD_INT 0
54422: PUSH
54423: LD_INT 8
54425: PUSH
54426: LD_INT 9
54428: PUSH
54429: LD_INT 10
54431: PUSH
54432: LD_INT 11
54434: PUSH
54435: LD_INT 12
54437: PUSH
54438: LD_INT 13
54440: PUSH
54441: LD_INT 16
54443: PUSH
54444: LD_INT 17
54446: PUSH
54447: LD_INT 18
54449: PUSH
54450: LD_INT 19
54452: PUSH
54453: LD_INT 20
54455: PUSH
54456: LD_INT 21
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: LIST
54463: LIST
54464: LIST
54465: LIST
54466: LIST
54467: LIST
54468: LIST
54469: LIST
54470: LIST
54471: LIST
54472: LIST
54473: IN
54474: NOT
54475: OR
54476: PUSH
54477: LD_VAR 0 8
54481: PUSH
54482: LD_INT 5
54484: ARRAY
54485: NOT
54486: OR
54487: PUSH
54488: LD_VAR 0 8
54492: PUSH
54493: LD_INT 6
54495: ARRAY
54496: PUSH
54497: LD_INT 1
54499: PUSH
54500: LD_INT 2
54502: PUSH
54503: LD_INT 7
54505: PUSH
54506: LD_INT 9
54508: PUSH
54509: LD_INT 10
54511: PUSH
54512: LD_INT 11
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: LIST
54521: LIST
54522: IN
54523: NOT
54524: OR
54525: IFFALSE 54531
// exit ;
54527: POP
54528: POP
54529: GO 54614
// end ;
54531: GO 54202
54533: POP
54534: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
54535: LD_VAR 0 9
54539: PPUSH
54540: LD_VAR 0 3
54544: PPUSH
54545: LD_VAR 0 4
54549: PPUSH
54550: LD_INT 20
54552: PPUSH
54553: CALL 46537 0 4
54557: PUSH
54558: LD_INT 4
54560: ARRAY
54561: IFFALSE 54565
// exit ;
54563: GO 54614
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
54565: LD_VAR 0 2
54569: PUSH
54570: LD_INT 29
54572: PUSH
54573: LD_INT 30
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: IN
54580: PUSH
54581: LD_VAR 0 3
54585: PPUSH
54586: LD_VAR 0 4
54590: PPUSH
54591: LD_VAR 0 9
54595: PPUSH
54596: CALL_OW 440
54600: NOT
54601: AND
54602: IFFALSE 54606
// exit ;
54604: GO 54614
// result := true ;
54606: LD_ADDR_VAR 0 6
54610: PUSH
54611: LD_INT 1
54613: ST_TO_ADDR
// end ;
54614: LD_VAR 0 6
54618: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
54619: LD_INT 0
54621: PPUSH
54622: PPUSH
54623: PPUSH
54624: PPUSH
54625: PPUSH
54626: PPUSH
54627: PPUSH
54628: PPUSH
54629: PPUSH
54630: PPUSH
54631: PPUSH
54632: PPUSH
54633: PPUSH
54634: PPUSH
54635: PPUSH
54636: PPUSH
54637: PPUSH
54638: PPUSH
54639: PPUSH
54640: PPUSH
54641: PPUSH
54642: PPUSH
54643: PPUSH
54644: PPUSH
54645: PPUSH
54646: PPUSH
54647: PPUSH
54648: PPUSH
54649: PPUSH
54650: PPUSH
54651: PPUSH
54652: PPUSH
54653: PPUSH
54654: PPUSH
54655: PPUSH
54656: PPUSH
54657: PPUSH
54658: PPUSH
54659: PPUSH
54660: PPUSH
54661: PPUSH
54662: PPUSH
54663: PPUSH
54664: PPUSH
54665: PPUSH
54666: PPUSH
54667: PPUSH
54668: PPUSH
54669: PPUSH
54670: PPUSH
54671: PPUSH
54672: PPUSH
54673: PPUSH
54674: PPUSH
54675: PPUSH
54676: PPUSH
54677: PPUSH
54678: PPUSH
// result = [ ] ;
54679: LD_ADDR_VAR 0 7
54683: PUSH
54684: EMPTY
54685: ST_TO_ADDR
// temp_list = [ ] ;
54686: LD_ADDR_VAR 0 9
54690: PUSH
54691: EMPTY
54692: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
54693: LD_VAR 0 4
54697: PUSH
54698: LD_INT 0
54700: PUSH
54701: LD_INT 1
54703: PUSH
54704: LD_INT 2
54706: PUSH
54707: LD_INT 3
54709: PUSH
54710: LD_INT 4
54712: PUSH
54713: LD_INT 5
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: IN
54724: NOT
54725: PUSH
54726: LD_VAR 0 1
54730: PUSH
54731: LD_INT 0
54733: PUSH
54734: LD_INT 1
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: IN
54741: PUSH
54742: LD_VAR 0 5
54746: PUSH
54747: LD_INT 1
54749: PUSH
54750: LD_INT 2
54752: PUSH
54753: LD_INT 3
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: LIST
54760: IN
54761: NOT
54762: AND
54763: OR
54764: IFFALSE 54768
// exit ;
54766: GO 73159
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
54768: LD_VAR 0 1
54772: PUSH
54773: LD_INT 6
54775: PUSH
54776: LD_INT 7
54778: PUSH
54779: LD_INT 8
54781: PUSH
54782: LD_INT 13
54784: PUSH
54785: LD_INT 12
54787: PUSH
54788: LD_INT 15
54790: PUSH
54791: LD_INT 11
54793: PUSH
54794: LD_INT 14
54796: PUSH
54797: LD_INT 10
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: IN
54811: IFFALSE 54821
// btype = b_lab ;
54813: LD_ADDR_VAR 0 1
54817: PUSH
54818: LD_INT 6
54820: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
54821: LD_VAR 0 6
54825: PUSH
54826: LD_INT 0
54828: PUSH
54829: LD_INT 1
54831: PUSH
54832: LD_INT 2
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: LIST
54839: IN
54840: NOT
54841: PUSH
54842: LD_VAR 0 1
54846: PUSH
54847: LD_INT 0
54849: PUSH
54850: LD_INT 1
54852: PUSH
54853: LD_INT 2
54855: PUSH
54856: LD_INT 3
54858: PUSH
54859: LD_INT 6
54861: PUSH
54862: LD_INT 36
54864: PUSH
54865: LD_INT 4
54867: PUSH
54868: LD_INT 5
54870: PUSH
54871: LD_INT 31
54873: PUSH
54874: LD_INT 32
54876: PUSH
54877: LD_INT 33
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: IN
54893: NOT
54894: PUSH
54895: LD_VAR 0 6
54899: PUSH
54900: LD_INT 1
54902: EQUAL
54903: AND
54904: OR
54905: PUSH
54906: LD_VAR 0 1
54910: PUSH
54911: LD_INT 2
54913: PUSH
54914: LD_INT 3
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: IN
54921: NOT
54922: PUSH
54923: LD_VAR 0 6
54927: PUSH
54928: LD_INT 2
54930: EQUAL
54931: AND
54932: OR
54933: IFFALSE 54943
// mode = 0 ;
54935: LD_ADDR_VAR 0 6
54939: PUSH
54940: LD_INT 0
54942: ST_TO_ADDR
// case mode of 0 :
54943: LD_VAR 0 6
54947: PUSH
54948: LD_INT 0
54950: DOUBLE
54951: EQUAL
54952: IFTRUE 54956
54954: GO 66409
54956: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54957: LD_ADDR_VAR 0 11
54961: PUSH
54962: LD_INT 0
54964: PUSH
54965: LD_INT 0
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: LD_INT 0
54974: PUSH
54975: LD_INT 1
54977: NEG
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 1
54985: PUSH
54986: LD_INT 0
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 1
54995: PUSH
54996: LD_INT 1
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 0
55005: PUSH
55006: LD_INT 1
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 1
55015: NEG
55016: PUSH
55017: LD_INT 0
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: LD_INT 1
55026: NEG
55027: PUSH
55028: LD_INT 1
55030: NEG
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 1
55038: NEG
55039: PUSH
55040: LD_INT 2
55042: NEG
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 0
55050: PUSH
55051: LD_INT 2
55053: NEG
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: PUSH
55059: LD_INT 1
55061: PUSH
55062: LD_INT 1
55064: NEG
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: LD_INT 1
55072: PUSH
55073: LD_INT 2
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 0
55082: PUSH
55083: LD_INT 2
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 1
55092: NEG
55093: PUSH
55094: LD_INT 1
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 1
55103: PUSH
55104: LD_INT 3
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: LD_INT 0
55113: PUSH
55114: LD_INT 3
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 1
55123: NEG
55124: PUSH
55125: LD_INT 2
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55150: LD_ADDR_VAR 0 12
55154: PUSH
55155: LD_INT 0
55157: PUSH
55158: LD_INT 0
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 0
55167: PUSH
55168: LD_INT 1
55170: NEG
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 1
55178: PUSH
55179: LD_INT 0
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 1
55188: PUSH
55189: LD_INT 1
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 0
55198: PUSH
55199: LD_INT 1
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 1
55208: NEG
55209: PUSH
55210: LD_INT 0
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: LD_INT 1
55219: NEG
55220: PUSH
55221: LD_INT 1
55223: NEG
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 1
55231: PUSH
55232: LD_INT 1
55234: NEG
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 2
55242: PUSH
55243: LD_INT 0
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 2
55252: PUSH
55253: LD_INT 1
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 1
55262: NEG
55263: PUSH
55264: LD_INT 1
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 2
55273: NEG
55274: PUSH
55275: LD_INT 0
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 2
55284: NEG
55285: PUSH
55286: LD_INT 1
55288: NEG
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 2
55296: NEG
55297: PUSH
55298: LD_INT 1
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 3
55307: NEG
55308: PUSH
55309: LD_INT 0
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 3
55318: NEG
55319: PUSH
55320: LD_INT 1
55322: NEG
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55346: LD_ADDR_VAR 0 13
55350: PUSH
55351: LD_INT 0
55353: PUSH
55354: LD_INT 0
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: PUSH
55361: LD_INT 0
55363: PUSH
55364: LD_INT 1
55366: NEG
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 1
55374: PUSH
55375: LD_INT 0
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 1
55384: PUSH
55385: LD_INT 1
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 0
55394: PUSH
55395: LD_INT 1
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 1
55404: NEG
55405: PUSH
55406: LD_INT 0
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 1
55415: NEG
55416: PUSH
55417: LD_INT 1
55419: NEG
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 1
55427: NEG
55428: PUSH
55429: LD_INT 2
55431: NEG
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: LD_INT 2
55439: PUSH
55440: LD_INT 1
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: LD_INT 2
55449: PUSH
55450: LD_INT 2
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 1
55459: PUSH
55460: LD_INT 2
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 2
55469: NEG
55470: PUSH
55471: LD_INT 1
55473: NEG
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 2
55481: NEG
55482: PUSH
55483: LD_INT 2
55485: NEG
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 2
55493: NEG
55494: PUSH
55495: LD_INT 3
55497: NEG
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 3
55505: NEG
55506: PUSH
55507: LD_INT 2
55509: NEG
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 3
55517: NEG
55518: PUSH
55519: LD_INT 3
55521: NEG
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55545: LD_ADDR_VAR 0 14
55549: PUSH
55550: LD_INT 0
55552: PUSH
55553: LD_INT 0
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 0
55562: PUSH
55563: LD_INT 1
55565: NEG
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 1
55573: PUSH
55574: LD_INT 0
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: LD_INT 1
55583: PUSH
55584: LD_INT 1
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PUSH
55591: LD_INT 0
55593: PUSH
55594: LD_INT 1
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: LD_INT 1
55603: NEG
55604: PUSH
55605: LD_INT 0
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 1
55614: NEG
55615: PUSH
55616: LD_INT 1
55618: NEG
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: LD_INT 1
55626: NEG
55627: PUSH
55628: LD_INT 2
55630: NEG
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PUSH
55636: LD_INT 0
55638: PUSH
55639: LD_INT 2
55641: NEG
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 1
55649: PUSH
55650: LD_INT 1
55652: NEG
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 1
55660: PUSH
55661: LD_INT 2
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: LD_INT 0
55670: PUSH
55671: LD_INT 2
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PUSH
55678: LD_INT 1
55680: NEG
55681: PUSH
55682: LD_INT 1
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 1
55691: NEG
55692: PUSH
55693: LD_INT 3
55695: NEG
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 0
55703: PUSH
55704: LD_INT 3
55706: NEG
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: LD_INT 1
55714: PUSH
55715: LD_INT 2
55717: NEG
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: LIST
55727: LIST
55728: LIST
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55741: LD_ADDR_VAR 0 15
55745: PUSH
55746: LD_INT 0
55748: PUSH
55749: LD_INT 0
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 0
55758: PUSH
55759: LD_INT 1
55761: NEG
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 1
55769: PUSH
55770: LD_INT 0
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 1
55779: PUSH
55780: LD_INT 1
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 0
55789: PUSH
55790: LD_INT 1
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 1
55799: NEG
55800: PUSH
55801: LD_INT 0
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 1
55810: NEG
55811: PUSH
55812: LD_INT 1
55814: NEG
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 1
55822: PUSH
55823: LD_INT 1
55825: NEG
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 2
55833: PUSH
55834: LD_INT 0
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: LD_INT 2
55843: PUSH
55844: LD_INT 1
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 1
55853: NEG
55854: PUSH
55855: LD_INT 1
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 2
55864: NEG
55865: PUSH
55866: LD_INT 0
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 2
55875: NEG
55876: PUSH
55877: LD_INT 1
55879: NEG
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 2
55887: PUSH
55888: LD_INT 1
55890: NEG
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: LD_INT 3
55898: PUSH
55899: LD_INT 0
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 3
55908: PUSH
55909: LD_INT 1
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: LIST
55920: LIST
55921: LIST
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55934: LD_ADDR_VAR 0 16
55938: PUSH
55939: LD_INT 0
55941: PUSH
55942: LD_INT 0
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 0
55951: PUSH
55952: LD_INT 1
55954: NEG
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 1
55962: PUSH
55963: LD_INT 0
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 1
55972: PUSH
55973: LD_INT 1
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: LD_INT 0
55982: PUSH
55983: LD_INT 1
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 1
55992: NEG
55993: PUSH
55994: LD_INT 0
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 1
56003: NEG
56004: PUSH
56005: LD_INT 1
56007: NEG
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 1
56015: NEG
56016: PUSH
56017: LD_INT 2
56019: NEG
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: PUSH
56025: LD_INT 2
56027: PUSH
56028: LD_INT 1
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 2
56037: PUSH
56038: LD_INT 2
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 1
56047: PUSH
56048: LD_INT 2
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 2
56057: NEG
56058: PUSH
56059: LD_INT 1
56061: NEG
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 2
56069: NEG
56070: PUSH
56071: LD_INT 2
56073: NEG
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 3
56081: PUSH
56082: LD_INT 2
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 3
56091: PUSH
56092: LD_INT 3
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 2
56101: PUSH
56102: LD_INT 3
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: LIST
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: LIST
56121: LIST
56122: LIST
56123: LIST
56124: LIST
56125: LIST
56126: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56127: LD_ADDR_VAR 0 17
56131: PUSH
56132: LD_INT 0
56134: PUSH
56135: LD_INT 0
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 0
56144: PUSH
56145: LD_INT 1
56147: NEG
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 1
56155: PUSH
56156: LD_INT 0
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 1
56165: PUSH
56166: LD_INT 1
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 0
56175: PUSH
56176: LD_INT 1
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 1
56185: NEG
56186: PUSH
56187: LD_INT 0
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: LD_INT 1
56196: NEG
56197: PUSH
56198: LD_INT 1
56200: NEG
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 1
56208: NEG
56209: PUSH
56210: LD_INT 2
56212: NEG
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: LD_INT 0
56220: PUSH
56221: LD_INT 2
56223: NEG
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: PUSH
56229: LD_INT 1
56231: PUSH
56232: LD_INT 1
56234: NEG
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PUSH
56240: LD_INT 2
56242: PUSH
56243: LD_INT 0
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: PUSH
56250: LD_INT 2
56252: PUSH
56253: LD_INT 1
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: PUSH
56260: LD_INT 2
56262: PUSH
56263: LD_INT 2
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PUSH
56270: LD_INT 1
56272: PUSH
56273: LD_INT 2
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 0
56282: PUSH
56283: LD_INT 2
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: LD_INT 1
56292: NEG
56293: PUSH
56294: LD_INT 1
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 2
56303: NEG
56304: PUSH
56305: LD_INT 0
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 2
56314: NEG
56315: PUSH
56316: LD_INT 1
56318: NEG
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 2
56326: NEG
56327: PUSH
56328: LD_INT 2
56330: NEG
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: LIST
56340: LIST
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56357: LD_ADDR_VAR 0 18
56361: PUSH
56362: LD_INT 0
56364: PUSH
56365: LD_INT 0
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 0
56374: PUSH
56375: LD_INT 1
56377: NEG
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 1
56385: PUSH
56386: LD_INT 0
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 1
56395: PUSH
56396: LD_INT 1
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: LD_INT 0
56405: PUSH
56406: LD_INT 1
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 1
56415: NEG
56416: PUSH
56417: LD_INT 0
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 1
56426: NEG
56427: PUSH
56428: LD_INT 1
56430: NEG
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: LD_INT 1
56438: NEG
56439: PUSH
56440: LD_INT 2
56442: NEG
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 0
56450: PUSH
56451: LD_INT 2
56453: NEG
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 1
56461: PUSH
56462: LD_INT 1
56464: NEG
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 2
56472: PUSH
56473: LD_INT 0
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 2
56482: PUSH
56483: LD_INT 1
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 2
56492: PUSH
56493: LD_INT 2
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 1
56502: PUSH
56503: LD_INT 2
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 0
56512: PUSH
56513: LD_INT 2
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: LD_INT 1
56522: NEG
56523: PUSH
56524: LD_INT 1
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 2
56533: NEG
56534: PUSH
56535: LD_INT 0
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 2
56544: NEG
56545: PUSH
56546: LD_INT 1
56548: NEG
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 2
56556: NEG
56557: PUSH
56558: LD_INT 2
56560: NEG
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: LIST
56582: LIST
56583: LIST
56584: LIST
56585: LIST
56586: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56587: LD_ADDR_VAR 0 19
56591: PUSH
56592: LD_INT 0
56594: PUSH
56595: LD_INT 0
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: PUSH
56602: LD_INT 0
56604: PUSH
56605: LD_INT 1
56607: NEG
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: PUSH
56613: LD_INT 1
56615: PUSH
56616: LD_INT 0
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: PUSH
56623: LD_INT 1
56625: PUSH
56626: LD_INT 1
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: LD_INT 0
56635: PUSH
56636: LD_INT 1
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 1
56645: NEG
56646: PUSH
56647: LD_INT 0
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: LD_INT 1
56656: NEG
56657: PUSH
56658: LD_INT 1
56660: NEG
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 1
56668: NEG
56669: PUSH
56670: LD_INT 2
56672: NEG
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 0
56680: PUSH
56681: LD_INT 2
56683: NEG
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 1
56691: PUSH
56692: LD_INT 1
56694: NEG
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 2
56702: PUSH
56703: LD_INT 0
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 2
56712: PUSH
56713: LD_INT 1
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 2
56722: PUSH
56723: LD_INT 2
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 1
56732: PUSH
56733: LD_INT 2
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 0
56742: PUSH
56743: LD_INT 2
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: LD_INT 1
56752: NEG
56753: PUSH
56754: LD_INT 1
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 2
56763: NEG
56764: PUSH
56765: LD_INT 0
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 2
56774: NEG
56775: PUSH
56776: LD_INT 1
56778: NEG
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 2
56786: NEG
56787: PUSH
56788: LD_INT 2
56790: NEG
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56817: LD_ADDR_VAR 0 20
56821: PUSH
56822: LD_INT 0
56824: PUSH
56825: LD_INT 0
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: LD_INT 0
56834: PUSH
56835: LD_INT 1
56837: NEG
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: PUSH
56843: LD_INT 1
56845: PUSH
56846: LD_INT 0
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: LD_INT 1
56855: PUSH
56856: LD_INT 1
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: LD_INT 0
56865: PUSH
56866: LD_INT 1
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 1
56875: NEG
56876: PUSH
56877: LD_INT 0
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: LD_INT 1
56886: NEG
56887: PUSH
56888: LD_INT 1
56890: NEG
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: LD_INT 1
56898: NEG
56899: PUSH
56900: LD_INT 2
56902: NEG
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: LD_INT 0
56910: PUSH
56911: LD_INT 2
56913: NEG
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: LD_INT 1
56921: PUSH
56922: LD_INT 1
56924: NEG
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: LD_INT 2
56932: PUSH
56933: LD_INT 0
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: PUSH
56940: LD_INT 2
56942: PUSH
56943: LD_INT 1
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 2
56952: PUSH
56953: LD_INT 2
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PUSH
56960: LD_INT 1
56962: PUSH
56963: LD_INT 2
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: LD_INT 0
56972: PUSH
56973: LD_INT 2
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: LD_INT 1
56982: NEG
56983: PUSH
56984: LD_INT 1
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: PUSH
56991: LD_INT 2
56993: NEG
56994: PUSH
56995: LD_INT 0
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: LD_INT 2
57004: NEG
57005: PUSH
57006: LD_INT 1
57008: NEG
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: LD_INT 2
57016: NEG
57017: PUSH
57018: LD_INT 2
57020: NEG
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: LIST
57030: LIST
57031: LIST
57032: LIST
57033: LIST
57034: LIST
57035: LIST
57036: LIST
57037: LIST
57038: LIST
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: LIST
57044: LIST
57045: LIST
57046: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57047: LD_ADDR_VAR 0 21
57051: PUSH
57052: LD_INT 0
57054: PUSH
57055: LD_INT 0
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: LD_INT 0
57064: PUSH
57065: LD_INT 1
57067: NEG
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: LD_INT 1
57075: PUSH
57076: LD_INT 0
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: LD_INT 1
57085: PUSH
57086: LD_INT 1
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 0
57095: PUSH
57096: LD_INT 1
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: LD_INT 1
57105: NEG
57106: PUSH
57107: LD_INT 0
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: LD_INT 1
57116: NEG
57117: PUSH
57118: LD_INT 1
57120: NEG
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: LD_INT 1
57128: NEG
57129: PUSH
57130: LD_INT 2
57132: NEG
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 0
57140: PUSH
57141: LD_INT 2
57143: NEG
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 1
57151: PUSH
57152: LD_INT 1
57154: NEG
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PUSH
57160: LD_INT 2
57162: PUSH
57163: LD_INT 0
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: LD_INT 2
57172: PUSH
57173: LD_INT 1
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: LD_INT 2
57182: PUSH
57183: LD_INT 2
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PUSH
57190: LD_INT 1
57192: PUSH
57193: LD_INT 2
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 0
57202: PUSH
57203: LD_INT 2
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 1
57212: NEG
57213: PUSH
57214: LD_INT 1
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 2
57223: NEG
57224: PUSH
57225: LD_INT 0
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 2
57234: NEG
57235: PUSH
57236: LD_INT 1
57238: NEG
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 2
57246: NEG
57247: PUSH
57248: LD_INT 2
57250: NEG
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: LIST
57260: LIST
57261: LIST
57262: LIST
57263: LIST
57264: LIST
57265: LIST
57266: LIST
57267: LIST
57268: LIST
57269: LIST
57270: LIST
57271: LIST
57272: LIST
57273: LIST
57274: LIST
57275: LIST
57276: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57277: LD_ADDR_VAR 0 22
57281: PUSH
57282: LD_INT 0
57284: PUSH
57285: LD_INT 0
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 0
57294: PUSH
57295: LD_INT 1
57297: NEG
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PUSH
57303: LD_INT 1
57305: PUSH
57306: LD_INT 0
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: PUSH
57313: LD_INT 1
57315: PUSH
57316: LD_INT 1
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: PUSH
57323: LD_INT 0
57325: PUSH
57326: LD_INT 1
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: LD_INT 1
57335: NEG
57336: PUSH
57337: LD_INT 0
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: LD_INT 1
57346: NEG
57347: PUSH
57348: LD_INT 1
57350: NEG
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PUSH
57356: LD_INT 1
57358: NEG
57359: PUSH
57360: LD_INT 2
57362: NEG
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: LD_INT 0
57370: PUSH
57371: LD_INT 2
57373: NEG
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: PUSH
57379: LD_INT 1
57381: PUSH
57382: LD_INT 1
57384: NEG
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_INT 2
57392: PUSH
57393: LD_INT 0
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 2
57402: PUSH
57403: LD_INT 1
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: PUSH
57410: LD_INT 2
57412: PUSH
57413: LD_INT 2
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: PUSH
57420: LD_INT 1
57422: PUSH
57423: LD_INT 2
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 0
57432: PUSH
57433: LD_INT 2
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 1
57442: NEG
57443: PUSH
57444: LD_INT 1
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 2
57453: NEG
57454: PUSH
57455: LD_INT 0
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 2
57464: NEG
57465: PUSH
57466: LD_INT 1
57468: NEG
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PUSH
57474: LD_INT 2
57476: NEG
57477: PUSH
57478: LD_INT 2
57480: NEG
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: LIST
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57507: LD_ADDR_VAR 0 23
57511: PUSH
57512: LD_INT 0
57514: PUSH
57515: LD_INT 0
57517: PUSH
57518: EMPTY
57519: LIST
57520: LIST
57521: PUSH
57522: LD_INT 0
57524: PUSH
57525: LD_INT 1
57527: NEG
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: PUSH
57533: LD_INT 1
57535: PUSH
57536: LD_INT 0
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: PUSH
57543: LD_INT 1
57545: PUSH
57546: LD_INT 1
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 0
57555: PUSH
57556: LD_INT 1
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PUSH
57563: LD_INT 1
57565: NEG
57566: PUSH
57567: LD_INT 0
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: LD_INT 1
57576: NEG
57577: PUSH
57578: LD_INT 1
57580: NEG
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 1
57588: NEG
57589: PUSH
57590: LD_INT 2
57592: NEG
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: LD_INT 0
57600: PUSH
57601: LD_INT 2
57603: NEG
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: LD_INT 1
57611: PUSH
57612: LD_INT 1
57614: NEG
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: LD_INT 2
57622: PUSH
57623: LD_INT 0
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 2
57632: PUSH
57633: LD_INT 1
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: LD_INT 2
57642: PUSH
57643: LD_INT 2
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 1
57652: PUSH
57653: LD_INT 2
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: LD_INT 0
57662: PUSH
57663: LD_INT 2
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 1
57672: NEG
57673: PUSH
57674: LD_INT 1
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: LD_INT 2
57683: NEG
57684: PUSH
57685: LD_INT 0
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 2
57694: NEG
57695: PUSH
57696: LD_INT 1
57698: NEG
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 2
57706: NEG
57707: PUSH
57708: LD_INT 2
57710: NEG
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 2
57718: NEG
57719: PUSH
57720: LD_INT 3
57722: NEG
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 1
57730: NEG
57731: PUSH
57732: LD_INT 3
57734: NEG
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 1
57742: PUSH
57743: LD_INT 2
57745: NEG
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 2
57753: PUSH
57754: LD_INT 1
57756: NEG
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: LIST
57766: LIST
57767: LIST
57768: LIST
57769: LIST
57770: LIST
57771: LIST
57772: LIST
57773: LIST
57774: LIST
57775: LIST
57776: LIST
57777: LIST
57778: LIST
57779: LIST
57780: LIST
57781: LIST
57782: LIST
57783: LIST
57784: LIST
57785: LIST
57786: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
57787: LD_ADDR_VAR 0 24
57791: PUSH
57792: LD_INT 0
57794: PUSH
57795: LD_INT 0
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 0
57804: PUSH
57805: LD_INT 1
57807: NEG
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 1
57815: PUSH
57816: LD_INT 0
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: PUSH
57823: LD_INT 1
57825: PUSH
57826: LD_INT 1
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: LD_INT 0
57835: PUSH
57836: LD_INT 1
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 1
57845: NEG
57846: PUSH
57847: LD_INT 0
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 1
57856: NEG
57857: PUSH
57858: LD_INT 1
57860: NEG
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: PUSH
57866: LD_INT 1
57868: NEG
57869: PUSH
57870: LD_INT 2
57872: NEG
57873: PUSH
57874: EMPTY
57875: LIST
57876: LIST
57877: PUSH
57878: LD_INT 0
57880: PUSH
57881: LD_INT 2
57883: NEG
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: LD_INT 1
57891: PUSH
57892: LD_INT 1
57894: NEG
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 2
57902: PUSH
57903: LD_INT 0
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 2
57912: PUSH
57913: LD_INT 1
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: LD_INT 2
57922: PUSH
57923: LD_INT 2
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 1
57932: PUSH
57933: LD_INT 2
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: LD_INT 0
57942: PUSH
57943: LD_INT 2
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: LD_INT 1
57952: NEG
57953: PUSH
57954: LD_INT 1
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: LD_INT 2
57963: NEG
57964: PUSH
57965: LD_INT 0
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 2
57974: NEG
57975: PUSH
57976: LD_INT 1
57978: NEG
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 2
57986: NEG
57987: PUSH
57988: LD_INT 2
57990: NEG
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 1
57998: PUSH
57999: LD_INT 2
58001: NEG
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 2
58009: PUSH
58010: LD_INT 1
58012: NEG
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 3
58020: PUSH
58021: LD_INT 1
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PUSH
58028: LD_INT 3
58030: PUSH
58031: LD_INT 2
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: LIST
58042: LIST
58043: LIST
58044: LIST
58045: LIST
58046: LIST
58047: LIST
58048: LIST
58049: LIST
58050: LIST
58051: LIST
58052: LIST
58053: LIST
58054: LIST
58055: LIST
58056: LIST
58057: LIST
58058: LIST
58059: LIST
58060: LIST
58061: LIST
58062: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
58063: LD_ADDR_VAR 0 25
58067: PUSH
58068: LD_INT 0
58070: PUSH
58071: LD_INT 0
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 0
58080: PUSH
58081: LD_INT 1
58083: NEG
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 1
58091: PUSH
58092: LD_INT 0
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: LD_INT 1
58101: PUSH
58102: LD_INT 1
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: LD_INT 0
58111: PUSH
58112: LD_INT 1
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: LD_INT 1
58121: NEG
58122: PUSH
58123: LD_INT 0
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 1
58132: NEG
58133: PUSH
58134: LD_INT 1
58136: NEG
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: PUSH
58142: LD_INT 1
58144: NEG
58145: PUSH
58146: LD_INT 2
58148: NEG
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 0
58156: PUSH
58157: LD_INT 2
58159: NEG
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: LD_INT 1
58167: PUSH
58168: LD_INT 1
58170: NEG
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: LD_INT 2
58178: PUSH
58179: LD_INT 0
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: PUSH
58186: LD_INT 2
58188: PUSH
58189: LD_INT 1
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 2
58198: PUSH
58199: LD_INT 2
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: LD_INT 1
58208: PUSH
58209: LD_INT 2
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: LD_INT 0
58218: PUSH
58219: LD_INT 2
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: LD_INT 1
58228: NEG
58229: PUSH
58230: LD_INT 1
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: LD_INT 2
58239: NEG
58240: PUSH
58241: LD_INT 0
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: LD_INT 2
58250: NEG
58251: PUSH
58252: LD_INT 1
58254: NEG
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 2
58262: NEG
58263: PUSH
58264: LD_INT 2
58266: NEG
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 3
58274: PUSH
58275: LD_INT 1
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: PUSH
58282: LD_INT 3
58284: PUSH
58285: LD_INT 2
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: PUSH
58292: LD_INT 2
58294: PUSH
58295: LD_INT 3
58297: PUSH
58298: EMPTY
58299: LIST
58300: LIST
58301: PUSH
58302: LD_INT 1
58304: PUSH
58305: LD_INT 3
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: LIST
58316: LIST
58317: LIST
58318: LIST
58319: LIST
58320: LIST
58321: LIST
58322: LIST
58323: LIST
58324: LIST
58325: LIST
58326: LIST
58327: LIST
58328: LIST
58329: LIST
58330: LIST
58331: LIST
58332: LIST
58333: LIST
58334: LIST
58335: LIST
58336: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58337: LD_ADDR_VAR 0 26
58341: PUSH
58342: LD_INT 0
58344: PUSH
58345: LD_INT 0
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: LD_INT 0
58354: PUSH
58355: LD_INT 1
58357: NEG
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 1
58365: PUSH
58366: LD_INT 0
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_INT 1
58375: PUSH
58376: LD_INT 1
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: LD_INT 0
58385: PUSH
58386: LD_INT 1
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 1
58395: NEG
58396: PUSH
58397: LD_INT 0
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: LD_INT 1
58406: NEG
58407: PUSH
58408: LD_INT 1
58410: NEG
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 1
58418: NEG
58419: PUSH
58420: LD_INT 2
58422: NEG
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: LD_INT 0
58430: PUSH
58431: LD_INT 2
58433: NEG
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 1
58441: PUSH
58442: LD_INT 1
58444: NEG
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: PUSH
58450: LD_INT 2
58452: PUSH
58453: LD_INT 0
58455: PUSH
58456: EMPTY
58457: LIST
58458: LIST
58459: PUSH
58460: LD_INT 2
58462: PUSH
58463: LD_INT 1
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PUSH
58470: LD_INT 2
58472: PUSH
58473: LD_INT 2
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: PUSH
58480: LD_INT 1
58482: PUSH
58483: LD_INT 2
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_INT 0
58492: PUSH
58493: LD_INT 2
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: LD_INT 1
58502: NEG
58503: PUSH
58504: LD_INT 1
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 2
58513: NEG
58514: PUSH
58515: LD_INT 0
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 2
58524: NEG
58525: PUSH
58526: LD_INT 1
58528: NEG
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: LD_INT 2
58536: NEG
58537: PUSH
58538: LD_INT 2
58540: NEG
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 2
58548: PUSH
58549: LD_INT 3
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 1
58558: PUSH
58559: LD_INT 3
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: PUSH
58566: LD_INT 1
58568: NEG
58569: PUSH
58570: LD_INT 2
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: PUSH
58577: LD_INT 2
58579: NEG
58580: PUSH
58581: LD_INT 1
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: LIST
58592: LIST
58593: LIST
58594: LIST
58595: LIST
58596: LIST
58597: LIST
58598: LIST
58599: LIST
58600: LIST
58601: LIST
58602: LIST
58603: LIST
58604: LIST
58605: LIST
58606: LIST
58607: LIST
58608: LIST
58609: LIST
58610: LIST
58611: LIST
58612: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58613: LD_ADDR_VAR 0 27
58617: PUSH
58618: LD_INT 0
58620: PUSH
58621: LD_INT 0
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 0
58630: PUSH
58631: LD_INT 1
58633: NEG
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 1
58641: PUSH
58642: LD_INT 0
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 1
58651: PUSH
58652: LD_INT 1
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: LD_INT 0
58661: PUSH
58662: LD_INT 1
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: PUSH
58669: LD_INT 1
58671: NEG
58672: PUSH
58673: LD_INT 0
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: PUSH
58680: LD_INT 1
58682: NEG
58683: PUSH
58684: LD_INT 1
58686: NEG
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 1
58694: NEG
58695: PUSH
58696: LD_INT 2
58698: NEG
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 0
58706: PUSH
58707: LD_INT 2
58709: NEG
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: PUSH
58715: LD_INT 1
58717: PUSH
58718: LD_INT 1
58720: NEG
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PUSH
58726: LD_INT 2
58728: PUSH
58729: LD_INT 0
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: LD_INT 2
58738: PUSH
58739: LD_INT 1
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 2
58748: PUSH
58749: LD_INT 2
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: LD_INT 1
58758: PUSH
58759: LD_INT 2
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: PUSH
58766: LD_INT 0
58768: PUSH
58769: LD_INT 2
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PUSH
58776: LD_INT 1
58778: NEG
58779: PUSH
58780: LD_INT 1
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: LD_INT 2
58789: NEG
58790: PUSH
58791: LD_INT 0
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 2
58800: NEG
58801: PUSH
58802: LD_INT 1
58804: NEG
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PUSH
58810: LD_INT 2
58812: NEG
58813: PUSH
58814: LD_INT 2
58816: NEG
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_INT 1
58824: NEG
58825: PUSH
58826: LD_INT 2
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_INT 2
58835: NEG
58836: PUSH
58837: LD_INT 1
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: PUSH
58844: LD_INT 3
58846: NEG
58847: PUSH
58848: LD_INT 1
58850: NEG
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: LD_INT 3
58858: NEG
58859: PUSH
58860: LD_INT 2
58862: NEG
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: LIST
58872: LIST
58873: LIST
58874: LIST
58875: LIST
58876: LIST
58877: LIST
58878: LIST
58879: LIST
58880: LIST
58881: LIST
58882: LIST
58883: LIST
58884: LIST
58885: LIST
58886: LIST
58887: LIST
58888: LIST
58889: LIST
58890: LIST
58891: LIST
58892: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58893: LD_ADDR_VAR 0 28
58897: PUSH
58898: LD_INT 0
58900: PUSH
58901: LD_INT 0
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 0
58910: PUSH
58911: LD_INT 1
58913: NEG
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 1
58921: PUSH
58922: LD_INT 0
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 1
58931: PUSH
58932: LD_INT 1
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: LD_INT 0
58941: PUSH
58942: LD_INT 1
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 1
58951: NEG
58952: PUSH
58953: LD_INT 0
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: PUSH
58960: LD_INT 1
58962: NEG
58963: PUSH
58964: LD_INT 1
58966: NEG
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: PUSH
58972: LD_INT 1
58974: NEG
58975: PUSH
58976: LD_INT 2
58978: NEG
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 0
58986: PUSH
58987: LD_INT 2
58989: NEG
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 1
58997: PUSH
58998: LD_INT 1
59000: NEG
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: LD_INT 2
59008: PUSH
59009: LD_INT 0
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_INT 2
59018: PUSH
59019: LD_INT 1
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 2
59028: PUSH
59029: LD_INT 2
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: LD_INT 1
59038: PUSH
59039: LD_INT 2
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PUSH
59046: LD_INT 0
59048: PUSH
59049: LD_INT 2
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 1
59058: NEG
59059: PUSH
59060: LD_INT 1
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 2
59069: NEG
59070: PUSH
59071: LD_INT 0
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 2
59080: NEG
59081: PUSH
59082: LD_INT 1
59084: NEG
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: PUSH
59090: LD_INT 2
59092: NEG
59093: PUSH
59094: LD_INT 2
59096: NEG
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 2
59104: NEG
59105: PUSH
59106: LD_INT 3
59108: NEG
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: LD_INT 1
59116: NEG
59117: PUSH
59118: LD_INT 3
59120: NEG
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: LD_INT 3
59128: NEG
59129: PUSH
59130: LD_INT 1
59132: NEG
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_INT 3
59140: NEG
59141: PUSH
59142: LD_INT 2
59144: NEG
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: LIST
59154: LIST
59155: LIST
59156: LIST
59157: LIST
59158: LIST
59159: LIST
59160: LIST
59161: LIST
59162: LIST
59163: LIST
59164: LIST
59165: LIST
59166: LIST
59167: LIST
59168: LIST
59169: LIST
59170: LIST
59171: LIST
59172: LIST
59173: LIST
59174: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59175: LD_ADDR_VAR 0 29
59179: PUSH
59180: LD_INT 0
59182: PUSH
59183: LD_INT 0
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: LD_INT 0
59192: PUSH
59193: LD_INT 1
59195: NEG
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 1
59203: PUSH
59204: LD_INT 0
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 1
59213: PUSH
59214: LD_INT 1
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 0
59223: PUSH
59224: LD_INT 1
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 1
59233: NEG
59234: PUSH
59235: LD_INT 0
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: PUSH
59242: LD_INT 1
59244: NEG
59245: PUSH
59246: LD_INT 1
59248: NEG
59249: PUSH
59250: EMPTY
59251: LIST
59252: LIST
59253: PUSH
59254: LD_INT 1
59256: NEG
59257: PUSH
59258: LD_INT 2
59260: NEG
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 0
59268: PUSH
59269: LD_INT 2
59271: NEG
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: PUSH
59277: LD_INT 1
59279: PUSH
59280: LD_INT 1
59282: NEG
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 2
59290: PUSH
59291: LD_INT 0
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 2
59300: PUSH
59301: LD_INT 1
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: LD_INT 1
59310: PUSH
59311: LD_INT 2
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: LD_INT 0
59320: PUSH
59321: LD_INT 2
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: PUSH
59328: LD_INT 1
59330: NEG
59331: PUSH
59332: LD_INT 1
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: PUSH
59339: LD_INT 2
59341: NEG
59342: PUSH
59343: LD_INT 1
59345: NEG
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: PUSH
59351: LD_INT 2
59353: NEG
59354: PUSH
59355: LD_INT 2
59357: NEG
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: PUSH
59363: LD_INT 2
59365: NEG
59366: PUSH
59367: LD_INT 3
59369: NEG
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: PUSH
59375: LD_INT 2
59377: PUSH
59378: LD_INT 1
59380: NEG
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 3
59388: PUSH
59389: LD_INT 1
59391: PUSH
59392: EMPTY
59393: LIST
59394: LIST
59395: PUSH
59396: LD_INT 1
59398: PUSH
59399: LD_INT 3
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: PUSH
59406: LD_INT 1
59408: NEG
59409: PUSH
59410: LD_INT 2
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: PUSH
59417: LD_INT 3
59419: NEG
59420: PUSH
59421: LD_INT 2
59423: NEG
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: LIST
59433: LIST
59434: LIST
59435: LIST
59436: LIST
59437: LIST
59438: LIST
59439: LIST
59440: LIST
59441: LIST
59442: LIST
59443: LIST
59444: LIST
59445: LIST
59446: LIST
59447: LIST
59448: LIST
59449: LIST
59450: LIST
59451: LIST
59452: LIST
59453: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59454: LD_ADDR_VAR 0 30
59458: PUSH
59459: LD_INT 0
59461: PUSH
59462: LD_INT 0
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: LD_INT 0
59471: PUSH
59472: LD_INT 1
59474: NEG
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: LD_INT 1
59482: PUSH
59483: LD_INT 0
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: LD_INT 1
59492: PUSH
59493: LD_INT 1
59495: PUSH
59496: EMPTY
59497: LIST
59498: LIST
59499: PUSH
59500: LD_INT 0
59502: PUSH
59503: LD_INT 1
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: PUSH
59510: LD_INT 1
59512: NEG
59513: PUSH
59514: LD_INT 0
59516: PUSH
59517: EMPTY
59518: LIST
59519: LIST
59520: PUSH
59521: LD_INT 1
59523: NEG
59524: PUSH
59525: LD_INT 1
59527: NEG
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: PUSH
59533: LD_INT 1
59535: NEG
59536: PUSH
59537: LD_INT 2
59539: NEG
59540: PUSH
59541: EMPTY
59542: LIST
59543: LIST
59544: PUSH
59545: LD_INT 0
59547: PUSH
59548: LD_INT 2
59550: NEG
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: LD_INT 1
59558: PUSH
59559: LD_INT 1
59561: NEG
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: PUSH
59567: LD_INT 2
59569: PUSH
59570: LD_INT 0
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PUSH
59577: LD_INT 2
59579: PUSH
59580: LD_INT 1
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: PUSH
59587: LD_INT 2
59589: PUSH
59590: LD_INT 2
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: LD_INT 1
59599: PUSH
59600: LD_INT 2
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 1
59609: NEG
59610: PUSH
59611: LD_INT 1
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: LD_INT 2
59620: NEG
59621: PUSH
59622: LD_INT 0
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: PUSH
59629: LD_INT 2
59631: NEG
59632: PUSH
59633: LD_INT 1
59635: NEG
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PUSH
59641: LD_INT 1
59643: NEG
59644: PUSH
59645: LD_INT 3
59647: NEG
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: PUSH
59653: LD_INT 1
59655: PUSH
59656: LD_INT 2
59658: NEG
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: PUSH
59664: LD_INT 3
59666: PUSH
59667: LD_INT 2
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: LD_INT 2
59676: PUSH
59677: LD_INT 3
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: PUSH
59684: LD_INT 2
59686: NEG
59687: PUSH
59688: LD_INT 1
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: PUSH
59695: LD_INT 3
59697: NEG
59698: PUSH
59699: LD_INT 1
59701: NEG
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: LIST
59711: LIST
59712: LIST
59713: LIST
59714: LIST
59715: LIST
59716: LIST
59717: LIST
59718: LIST
59719: LIST
59720: LIST
59721: LIST
59722: LIST
59723: LIST
59724: LIST
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: LIST
59731: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59732: LD_ADDR_VAR 0 31
59736: PUSH
59737: LD_INT 0
59739: PUSH
59740: LD_INT 0
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: PUSH
59747: LD_INT 0
59749: PUSH
59750: LD_INT 1
59752: NEG
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: PUSH
59758: LD_INT 1
59760: PUSH
59761: LD_INT 0
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: PUSH
59768: LD_INT 1
59770: PUSH
59771: LD_INT 1
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 0
59780: PUSH
59781: LD_INT 1
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: LD_INT 1
59790: NEG
59791: PUSH
59792: LD_INT 0
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: PUSH
59799: LD_INT 1
59801: NEG
59802: PUSH
59803: LD_INT 1
59805: NEG
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: LD_INT 1
59813: NEG
59814: PUSH
59815: LD_INT 2
59817: NEG
59818: PUSH
59819: EMPTY
59820: LIST
59821: LIST
59822: PUSH
59823: LD_INT 1
59825: PUSH
59826: LD_INT 1
59828: NEG
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: PUSH
59834: LD_INT 2
59836: PUSH
59837: LD_INT 0
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: PUSH
59844: LD_INT 2
59846: PUSH
59847: LD_INT 1
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: PUSH
59854: LD_INT 2
59856: PUSH
59857: LD_INT 2
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PUSH
59864: LD_INT 1
59866: PUSH
59867: LD_INT 2
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PUSH
59874: LD_INT 0
59876: PUSH
59877: LD_INT 2
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: PUSH
59884: LD_INT 1
59886: NEG
59887: PUSH
59888: LD_INT 1
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: PUSH
59895: LD_INT 2
59897: NEG
59898: PUSH
59899: LD_INT 1
59901: NEG
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: PUSH
59907: LD_INT 2
59909: NEG
59910: PUSH
59911: LD_INT 2
59913: NEG
59914: PUSH
59915: EMPTY
59916: LIST
59917: LIST
59918: PUSH
59919: LD_INT 2
59921: NEG
59922: PUSH
59923: LD_INT 3
59925: NEG
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: LD_INT 2
59933: PUSH
59934: LD_INT 1
59936: NEG
59937: PUSH
59938: EMPTY
59939: LIST
59940: LIST
59941: PUSH
59942: LD_INT 3
59944: PUSH
59945: LD_INT 1
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 1
59954: PUSH
59955: LD_INT 3
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 1
59964: NEG
59965: PUSH
59966: LD_INT 2
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: PUSH
59973: LD_INT 3
59975: NEG
59976: PUSH
59977: LD_INT 2
59979: NEG
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: LIST
59989: LIST
59990: LIST
59991: LIST
59992: LIST
59993: LIST
59994: LIST
59995: LIST
59996: LIST
59997: LIST
59998: LIST
59999: LIST
60000: LIST
60001: LIST
60002: LIST
60003: LIST
60004: LIST
60005: LIST
60006: LIST
60007: LIST
60008: LIST
60009: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60010: LD_ADDR_VAR 0 32
60014: PUSH
60015: LD_INT 0
60017: PUSH
60018: LD_INT 0
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 0
60027: PUSH
60028: LD_INT 1
60030: NEG
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: LD_INT 1
60038: PUSH
60039: LD_INT 0
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 1
60048: PUSH
60049: LD_INT 1
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: LD_INT 0
60058: PUSH
60059: LD_INT 1
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: PUSH
60066: LD_INT 1
60068: NEG
60069: PUSH
60070: LD_INT 0
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: PUSH
60077: LD_INT 1
60079: NEG
60080: PUSH
60081: LD_INT 1
60083: NEG
60084: PUSH
60085: EMPTY
60086: LIST
60087: LIST
60088: PUSH
60089: LD_INT 1
60091: NEG
60092: PUSH
60093: LD_INT 2
60095: NEG
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: PUSH
60101: LD_INT 0
60103: PUSH
60104: LD_INT 2
60106: NEG
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: PUSH
60112: LD_INT 1
60114: PUSH
60115: LD_INT 1
60117: NEG
60118: PUSH
60119: EMPTY
60120: LIST
60121: LIST
60122: PUSH
60123: LD_INT 2
60125: PUSH
60126: LD_INT 1
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PUSH
60133: LD_INT 2
60135: PUSH
60136: LD_INT 2
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: LD_INT 1
60145: PUSH
60146: LD_INT 2
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: PUSH
60153: LD_INT 0
60155: PUSH
60156: LD_INT 2
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PUSH
60163: LD_INT 1
60165: NEG
60166: PUSH
60167: LD_INT 1
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_INT 2
60176: NEG
60177: PUSH
60178: LD_INT 0
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 2
60187: NEG
60188: PUSH
60189: LD_INT 1
60191: NEG
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: PUSH
60197: LD_INT 1
60199: NEG
60200: PUSH
60201: LD_INT 3
60203: NEG
60204: PUSH
60205: EMPTY
60206: LIST
60207: LIST
60208: PUSH
60209: LD_INT 1
60211: PUSH
60212: LD_INT 2
60214: NEG
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_INT 3
60222: PUSH
60223: LD_INT 2
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: LD_INT 2
60232: PUSH
60233: LD_INT 3
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PUSH
60240: LD_INT 2
60242: NEG
60243: PUSH
60244: LD_INT 1
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: LD_INT 3
60253: NEG
60254: PUSH
60255: LD_INT 1
60257: NEG
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: LIST
60267: LIST
60268: LIST
60269: LIST
60270: LIST
60271: LIST
60272: LIST
60273: LIST
60274: LIST
60275: LIST
60276: LIST
60277: LIST
60278: LIST
60279: LIST
60280: LIST
60281: LIST
60282: LIST
60283: LIST
60284: LIST
60285: LIST
60286: LIST
60287: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60288: LD_ADDR_VAR 0 33
60292: PUSH
60293: LD_INT 0
60295: PUSH
60296: LD_INT 0
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: PUSH
60303: LD_INT 0
60305: PUSH
60306: LD_INT 1
60308: NEG
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: PUSH
60314: LD_INT 1
60316: PUSH
60317: LD_INT 0
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: LD_INT 1
60326: PUSH
60327: LD_INT 1
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_INT 0
60336: PUSH
60337: LD_INT 1
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: PUSH
60344: LD_INT 1
60346: NEG
60347: PUSH
60348: LD_INT 0
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: PUSH
60355: LD_INT 1
60357: NEG
60358: PUSH
60359: LD_INT 1
60361: NEG
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: PUSH
60367: LD_INT 1
60369: NEG
60370: PUSH
60371: LD_INT 2
60373: NEG
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 1
60381: PUSH
60382: LD_INT 1
60384: NEG
60385: PUSH
60386: EMPTY
60387: LIST
60388: LIST
60389: PUSH
60390: LD_INT 2
60392: PUSH
60393: LD_INT 0
60395: PUSH
60396: EMPTY
60397: LIST
60398: LIST
60399: PUSH
60400: LD_INT 2
60402: PUSH
60403: LD_INT 1
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: PUSH
60410: LD_INT 1
60412: PUSH
60413: LD_INT 2
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: PUSH
60420: LD_INT 0
60422: PUSH
60423: LD_INT 2
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PUSH
60430: LD_INT 1
60432: NEG
60433: PUSH
60434: LD_INT 1
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_INT 2
60443: NEG
60444: PUSH
60445: LD_INT 0
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: LD_INT 2
60454: NEG
60455: PUSH
60456: LD_INT 1
60458: NEG
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: LD_INT 2
60466: NEG
60467: PUSH
60468: LD_INT 2
60470: NEG
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: LD_INT 2
60478: NEG
60479: PUSH
60480: LD_INT 3
60482: NEG
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 2
60490: PUSH
60491: LD_INT 1
60493: NEG
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 3
60501: PUSH
60502: LD_INT 1
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 1
60511: PUSH
60512: LD_INT 3
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 1
60521: NEG
60522: PUSH
60523: LD_INT 2
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: PUSH
60530: LD_INT 3
60532: NEG
60533: PUSH
60534: LD_INT 2
60536: NEG
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PUSH
60542: EMPTY
60543: LIST
60544: LIST
60545: LIST
60546: LIST
60547: LIST
60548: LIST
60549: LIST
60550: LIST
60551: LIST
60552: LIST
60553: LIST
60554: LIST
60555: LIST
60556: LIST
60557: LIST
60558: LIST
60559: LIST
60560: LIST
60561: LIST
60562: LIST
60563: LIST
60564: LIST
60565: LIST
60566: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60567: LD_ADDR_VAR 0 34
60571: PUSH
60572: LD_INT 0
60574: PUSH
60575: LD_INT 0
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: PUSH
60582: LD_INT 0
60584: PUSH
60585: LD_INT 1
60587: NEG
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: PUSH
60593: LD_INT 1
60595: PUSH
60596: LD_INT 0
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: PUSH
60603: LD_INT 1
60605: PUSH
60606: LD_INT 1
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: LD_INT 0
60615: PUSH
60616: LD_INT 1
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: LD_INT 1
60625: NEG
60626: PUSH
60627: LD_INT 0
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: LD_INT 1
60636: NEG
60637: PUSH
60638: LD_INT 1
60640: NEG
60641: PUSH
60642: EMPTY
60643: LIST
60644: LIST
60645: PUSH
60646: LD_INT 1
60648: NEG
60649: PUSH
60650: LD_INT 2
60652: NEG
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: PUSH
60658: LD_INT 0
60660: PUSH
60661: LD_INT 2
60663: NEG
60664: PUSH
60665: EMPTY
60666: LIST
60667: LIST
60668: PUSH
60669: LD_INT 1
60671: PUSH
60672: LD_INT 1
60674: NEG
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: PUSH
60680: LD_INT 2
60682: PUSH
60683: LD_INT 1
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: PUSH
60690: LD_INT 2
60692: PUSH
60693: LD_INT 2
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PUSH
60700: LD_INT 1
60702: PUSH
60703: LD_INT 2
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: PUSH
60710: LD_INT 1
60712: NEG
60713: PUSH
60714: LD_INT 1
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: PUSH
60721: LD_INT 2
60723: NEG
60724: PUSH
60725: LD_INT 0
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: PUSH
60732: LD_INT 2
60734: NEG
60735: PUSH
60736: LD_INT 1
60738: NEG
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: PUSH
60744: LD_INT 2
60746: NEG
60747: PUSH
60748: LD_INT 2
60750: NEG
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: PUSH
60756: LD_INT 1
60758: NEG
60759: PUSH
60760: LD_INT 3
60762: NEG
60763: PUSH
60764: EMPTY
60765: LIST
60766: LIST
60767: PUSH
60768: LD_INT 1
60770: PUSH
60771: LD_INT 2
60773: NEG
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: PUSH
60779: LD_INT 3
60781: PUSH
60782: LD_INT 2
60784: PUSH
60785: EMPTY
60786: LIST
60787: LIST
60788: PUSH
60789: LD_INT 2
60791: PUSH
60792: LD_INT 3
60794: PUSH
60795: EMPTY
60796: LIST
60797: LIST
60798: PUSH
60799: LD_INT 2
60801: NEG
60802: PUSH
60803: LD_INT 1
60805: PUSH
60806: EMPTY
60807: LIST
60808: LIST
60809: PUSH
60810: LD_INT 3
60812: NEG
60813: PUSH
60814: LD_INT 1
60816: NEG
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: LIST
60826: LIST
60827: LIST
60828: LIST
60829: LIST
60830: LIST
60831: LIST
60832: LIST
60833: LIST
60834: LIST
60835: LIST
60836: LIST
60837: LIST
60838: LIST
60839: LIST
60840: LIST
60841: LIST
60842: LIST
60843: LIST
60844: LIST
60845: LIST
60846: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60847: LD_ADDR_VAR 0 35
60851: PUSH
60852: LD_INT 0
60854: PUSH
60855: LD_INT 0
60857: PUSH
60858: EMPTY
60859: LIST
60860: LIST
60861: PUSH
60862: LD_INT 0
60864: PUSH
60865: LD_INT 1
60867: NEG
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PUSH
60873: LD_INT 1
60875: PUSH
60876: LD_INT 0
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: LD_INT 1
60885: PUSH
60886: LD_INT 1
60888: PUSH
60889: EMPTY
60890: LIST
60891: LIST
60892: PUSH
60893: LD_INT 0
60895: PUSH
60896: LD_INT 1
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: PUSH
60903: LD_INT 1
60905: NEG
60906: PUSH
60907: LD_INT 0
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: PUSH
60914: LD_INT 1
60916: NEG
60917: PUSH
60918: LD_INT 1
60920: NEG
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: PUSH
60926: LD_INT 2
60928: PUSH
60929: LD_INT 1
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: LD_INT 2
60938: NEG
60939: PUSH
60940: LD_INT 1
60942: NEG
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: LIST
60952: LIST
60953: LIST
60954: LIST
60955: LIST
60956: LIST
60957: LIST
60958: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60959: LD_ADDR_VAR 0 36
60963: PUSH
60964: LD_INT 0
60966: PUSH
60967: LD_INT 0
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: PUSH
60974: LD_INT 0
60976: PUSH
60977: LD_INT 1
60979: NEG
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: LD_INT 1
60987: PUSH
60988: LD_INT 0
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: PUSH
60995: LD_INT 1
60997: PUSH
60998: LD_INT 1
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 0
61007: PUSH
61008: LD_INT 1
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 1
61017: NEG
61018: PUSH
61019: LD_INT 0
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 1
61028: NEG
61029: PUSH
61030: LD_INT 1
61032: NEG
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: LD_INT 1
61040: NEG
61041: PUSH
61042: LD_INT 2
61044: NEG
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: LD_INT 1
61052: PUSH
61053: LD_INT 2
61055: PUSH
61056: EMPTY
61057: LIST
61058: LIST
61059: PUSH
61060: EMPTY
61061: LIST
61062: LIST
61063: LIST
61064: LIST
61065: LIST
61066: LIST
61067: LIST
61068: LIST
61069: LIST
61070: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61071: LD_ADDR_VAR 0 37
61075: PUSH
61076: LD_INT 0
61078: PUSH
61079: LD_INT 0
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: PUSH
61086: LD_INT 0
61088: PUSH
61089: LD_INT 1
61091: NEG
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 1
61099: PUSH
61100: LD_INT 0
61102: PUSH
61103: EMPTY
61104: LIST
61105: LIST
61106: PUSH
61107: LD_INT 1
61109: PUSH
61110: LD_INT 1
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: LD_INT 0
61119: PUSH
61120: LD_INT 1
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: LD_INT 1
61129: NEG
61130: PUSH
61131: LD_INT 0
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: PUSH
61138: LD_INT 1
61140: NEG
61141: PUSH
61142: LD_INT 1
61144: NEG
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: PUSH
61150: LD_INT 1
61152: PUSH
61153: LD_INT 1
61155: NEG
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: PUSH
61161: LD_INT 1
61163: NEG
61164: PUSH
61165: LD_INT 1
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: LIST
61176: LIST
61177: LIST
61178: LIST
61179: LIST
61180: LIST
61181: LIST
61182: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61183: LD_ADDR_VAR 0 38
61187: PUSH
61188: LD_INT 0
61190: PUSH
61191: LD_INT 0
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: PUSH
61198: LD_INT 0
61200: PUSH
61201: LD_INT 1
61203: NEG
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PUSH
61209: LD_INT 1
61211: PUSH
61212: LD_INT 0
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: PUSH
61219: LD_INT 1
61221: PUSH
61222: LD_INT 1
61224: PUSH
61225: EMPTY
61226: LIST
61227: LIST
61228: PUSH
61229: LD_INT 0
61231: PUSH
61232: LD_INT 1
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: PUSH
61239: LD_INT 1
61241: NEG
61242: PUSH
61243: LD_INT 0
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: LD_INT 1
61252: NEG
61253: PUSH
61254: LD_INT 1
61256: NEG
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: PUSH
61262: LD_INT 2
61264: PUSH
61265: LD_INT 1
61267: PUSH
61268: EMPTY
61269: LIST
61270: LIST
61271: PUSH
61272: LD_INT 2
61274: NEG
61275: PUSH
61276: LD_INT 1
61278: NEG
61279: PUSH
61280: EMPTY
61281: LIST
61282: LIST
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: LIST
61288: LIST
61289: LIST
61290: LIST
61291: LIST
61292: LIST
61293: LIST
61294: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61295: LD_ADDR_VAR 0 39
61299: PUSH
61300: LD_INT 0
61302: PUSH
61303: LD_INT 0
61305: PUSH
61306: EMPTY
61307: LIST
61308: LIST
61309: PUSH
61310: LD_INT 0
61312: PUSH
61313: LD_INT 1
61315: NEG
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: LD_INT 1
61323: PUSH
61324: LD_INT 0
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PUSH
61331: LD_INT 1
61333: PUSH
61334: LD_INT 1
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PUSH
61341: LD_INT 0
61343: PUSH
61344: LD_INT 1
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: PUSH
61351: LD_INT 1
61353: NEG
61354: PUSH
61355: LD_INT 0
61357: PUSH
61358: EMPTY
61359: LIST
61360: LIST
61361: PUSH
61362: LD_INT 1
61364: NEG
61365: PUSH
61366: LD_INT 1
61368: NEG
61369: PUSH
61370: EMPTY
61371: LIST
61372: LIST
61373: PUSH
61374: LD_INT 1
61376: NEG
61377: PUSH
61378: LD_INT 2
61380: NEG
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: LD_INT 1
61388: PUSH
61389: LD_INT 2
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: LIST
61400: LIST
61401: LIST
61402: LIST
61403: LIST
61404: LIST
61405: LIST
61406: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61407: LD_ADDR_VAR 0 40
61411: PUSH
61412: LD_INT 0
61414: PUSH
61415: LD_INT 0
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: PUSH
61422: LD_INT 0
61424: PUSH
61425: LD_INT 1
61427: NEG
61428: PUSH
61429: EMPTY
61430: LIST
61431: LIST
61432: PUSH
61433: LD_INT 1
61435: PUSH
61436: LD_INT 0
61438: PUSH
61439: EMPTY
61440: LIST
61441: LIST
61442: PUSH
61443: LD_INT 1
61445: PUSH
61446: LD_INT 1
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: PUSH
61453: LD_INT 0
61455: PUSH
61456: LD_INT 1
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: PUSH
61463: LD_INT 1
61465: NEG
61466: PUSH
61467: LD_INT 0
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: PUSH
61474: LD_INT 1
61476: NEG
61477: PUSH
61478: LD_INT 1
61480: NEG
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: LD_INT 1
61488: PUSH
61489: LD_INT 1
61491: NEG
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: PUSH
61497: LD_INT 1
61499: NEG
61500: PUSH
61501: LD_INT 1
61503: PUSH
61504: EMPTY
61505: LIST
61506: LIST
61507: PUSH
61508: EMPTY
61509: LIST
61510: LIST
61511: LIST
61512: LIST
61513: LIST
61514: LIST
61515: LIST
61516: LIST
61517: LIST
61518: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61519: LD_ADDR_VAR 0 41
61523: PUSH
61524: LD_INT 0
61526: PUSH
61527: LD_INT 0
61529: PUSH
61530: EMPTY
61531: LIST
61532: LIST
61533: PUSH
61534: LD_INT 0
61536: PUSH
61537: LD_INT 1
61539: NEG
61540: PUSH
61541: EMPTY
61542: LIST
61543: LIST
61544: PUSH
61545: LD_INT 1
61547: PUSH
61548: LD_INT 0
61550: PUSH
61551: EMPTY
61552: LIST
61553: LIST
61554: PUSH
61555: LD_INT 1
61557: PUSH
61558: LD_INT 1
61560: PUSH
61561: EMPTY
61562: LIST
61563: LIST
61564: PUSH
61565: LD_INT 0
61567: PUSH
61568: LD_INT 1
61570: PUSH
61571: EMPTY
61572: LIST
61573: LIST
61574: PUSH
61575: LD_INT 1
61577: NEG
61578: PUSH
61579: LD_INT 0
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: PUSH
61586: LD_INT 1
61588: NEG
61589: PUSH
61590: LD_INT 1
61592: NEG
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: PUSH
61598: LD_INT 1
61600: NEG
61601: PUSH
61602: LD_INT 2
61604: NEG
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: PUSH
61610: LD_INT 1
61612: PUSH
61613: LD_INT 1
61615: NEG
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: PUSH
61621: LD_INT 2
61623: PUSH
61624: LD_INT 0
61626: PUSH
61627: EMPTY
61628: LIST
61629: LIST
61630: PUSH
61631: LD_INT 2
61633: PUSH
61634: LD_INT 1
61636: PUSH
61637: EMPTY
61638: LIST
61639: LIST
61640: PUSH
61641: LD_INT 2
61643: PUSH
61644: LD_INT 2
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: PUSH
61651: LD_INT 1
61653: PUSH
61654: LD_INT 2
61656: PUSH
61657: EMPTY
61658: LIST
61659: LIST
61660: PUSH
61661: LD_INT 1
61663: NEG
61664: PUSH
61665: LD_INT 1
61667: PUSH
61668: EMPTY
61669: LIST
61670: LIST
61671: PUSH
61672: LD_INT 2
61674: NEG
61675: PUSH
61676: LD_INT 0
61678: PUSH
61679: EMPTY
61680: LIST
61681: LIST
61682: PUSH
61683: LD_INT 2
61685: NEG
61686: PUSH
61687: LD_INT 1
61689: NEG
61690: PUSH
61691: EMPTY
61692: LIST
61693: LIST
61694: PUSH
61695: LD_INT 2
61697: NEG
61698: PUSH
61699: LD_INT 2
61701: NEG
61702: PUSH
61703: EMPTY
61704: LIST
61705: LIST
61706: PUSH
61707: LD_INT 2
61709: NEG
61710: PUSH
61711: LD_INT 3
61713: NEG
61714: PUSH
61715: EMPTY
61716: LIST
61717: LIST
61718: PUSH
61719: LD_INT 2
61721: PUSH
61722: LD_INT 1
61724: NEG
61725: PUSH
61726: EMPTY
61727: LIST
61728: LIST
61729: PUSH
61730: LD_INT 3
61732: PUSH
61733: LD_INT 0
61735: PUSH
61736: EMPTY
61737: LIST
61738: LIST
61739: PUSH
61740: LD_INT 3
61742: PUSH
61743: LD_INT 1
61745: PUSH
61746: EMPTY
61747: LIST
61748: LIST
61749: PUSH
61750: LD_INT 3
61752: PUSH
61753: LD_INT 2
61755: PUSH
61756: EMPTY
61757: LIST
61758: LIST
61759: PUSH
61760: LD_INT 3
61762: PUSH
61763: LD_INT 3
61765: PUSH
61766: EMPTY
61767: LIST
61768: LIST
61769: PUSH
61770: LD_INT 2
61772: PUSH
61773: LD_INT 3
61775: PUSH
61776: EMPTY
61777: LIST
61778: LIST
61779: PUSH
61780: LD_INT 2
61782: NEG
61783: PUSH
61784: LD_INT 1
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: PUSH
61791: LD_INT 3
61793: NEG
61794: PUSH
61795: LD_INT 0
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: LD_INT 3
61804: NEG
61805: PUSH
61806: LD_INT 1
61808: NEG
61809: PUSH
61810: EMPTY
61811: LIST
61812: LIST
61813: PUSH
61814: LD_INT 3
61816: NEG
61817: PUSH
61818: LD_INT 2
61820: NEG
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: PUSH
61826: LD_INT 3
61828: NEG
61829: PUSH
61830: LD_INT 3
61832: NEG
61833: PUSH
61834: EMPTY
61835: LIST
61836: LIST
61837: PUSH
61838: EMPTY
61839: LIST
61840: LIST
61841: LIST
61842: LIST
61843: LIST
61844: LIST
61845: LIST
61846: LIST
61847: LIST
61848: LIST
61849: LIST
61850: LIST
61851: LIST
61852: LIST
61853: LIST
61854: LIST
61855: LIST
61856: LIST
61857: LIST
61858: LIST
61859: LIST
61860: LIST
61861: LIST
61862: LIST
61863: LIST
61864: LIST
61865: LIST
61866: LIST
61867: LIST
61868: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61869: LD_ADDR_VAR 0 42
61873: PUSH
61874: LD_INT 0
61876: PUSH
61877: LD_INT 0
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: PUSH
61884: LD_INT 0
61886: PUSH
61887: LD_INT 1
61889: NEG
61890: PUSH
61891: EMPTY
61892: LIST
61893: LIST
61894: PUSH
61895: LD_INT 1
61897: PUSH
61898: LD_INT 0
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: PUSH
61905: LD_INT 1
61907: PUSH
61908: LD_INT 1
61910: PUSH
61911: EMPTY
61912: LIST
61913: LIST
61914: PUSH
61915: LD_INT 0
61917: PUSH
61918: LD_INT 1
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: PUSH
61925: LD_INT 1
61927: NEG
61928: PUSH
61929: LD_INT 0
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: PUSH
61936: LD_INT 1
61938: NEG
61939: PUSH
61940: LD_INT 1
61942: NEG
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: PUSH
61948: LD_INT 1
61950: NEG
61951: PUSH
61952: LD_INT 2
61954: NEG
61955: PUSH
61956: EMPTY
61957: LIST
61958: LIST
61959: PUSH
61960: LD_INT 0
61962: PUSH
61963: LD_INT 2
61965: NEG
61966: PUSH
61967: EMPTY
61968: LIST
61969: LIST
61970: PUSH
61971: LD_INT 1
61973: PUSH
61974: LD_INT 1
61976: NEG
61977: PUSH
61978: EMPTY
61979: LIST
61980: LIST
61981: PUSH
61982: LD_INT 2
61984: PUSH
61985: LD_INT 1
61987: PUSH
61988: EMPTY
61989: LIST
61990: LIST
61991: PUSH
61992: LD_INT 2
61994: PUSH
61995: LD_INT 2
61997: PUSH
61998: EMPTY
61999: LIST
62000: LIST
62001: PUSH
62002: LD_INT 1
62004: PUSH
62005: LD_INT 2
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: PUSH
62012: LD_INT 0
62014: PUSH
62015: LD_INT 2
62017: PUSH
62018: EMPTY
62019: LIST
62020: LIST
62021: PUSH
62022: LD_INT 1
62024: NEG
62025: PUSH
62026: LD_INT 1
62028: PUSH
62029: EMPTY
62030: LIST
62031: LIST
62032: PUSH
62033: LD_INT 2
62035: NEG
62036: PUSH
62037: LD_INT 1
62039: NEG
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: PUSH
62045: LD_INT 2
62047: NEG
62048: PUSH
62049: LD_INT 2
62051: NEG
62052: PUSH
62053: EMPTY
62054: LIST
62055: LIST
62056: PUSH
62057: LD_INT 2
62059: NEG
62060: PUSH
62061: LD_INT 3
62063: NEG
62064: PUSH
62065: EMPTY
62066: LIST
62067: LIST
62068: PUSH
62069: LD_INT 1
62071: NEG
62072: PUSH
62073: LD_INT 3
62075: NEG
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: PUSH
62081: LD_INT 0
62083: PUSH
62084: LD_INT 3
62086: NEG
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: PUSH
62092: LD_INT 1
62094: PUSH
62095: LD_INT 2
62097: NEG
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: PUSH
62103: LD_INT 3
62105: PUSH
62106: LD_INT 2
62108: PUSH
62109: EMPTY
62110: LIST
62111: LIST
62112: PUSH
62113: LD_INT 3
62115: PUSH
62116: LD_INT 3
62118: PUSH
62119: EMPTY
62120: LIST
62121: LIST
62122: PUSH
62123: LD_INT 2
62125: PUSH
62126: LD_INT 3
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: PUSH
62133: LD_INT 1
62135: PUSH
62136: LD_INT 3
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: PUSH
62143: LD_INT 0
62145: PUSH
62146: LD_INT 3
62148: PUSH
62149: EMPTY
62150: LIST
62151: LIST
62152: PUSH
62153: LD_INT 1
62155: NEG
62156: PUSH
62157: LD_INT 2
62159: PUSH
62160: EMPTY
62161: LIST
62162: LIST
62163: PUSH
62164: LD_INT 3
62166: NEG
62167: PUSH
62168: LD_INT 2
62170: NEG
62171: PUSH
62172: EMPTY
62173: LIST
62174: LIST
62175: PUSH
62176: LD_INT 3
62178: NEG
62179: PUSH
62180: LD_INT 3
62182: NEG
62183: PUSH
62184: EMPTY
62185: LIST
62186: LIST
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: LIST
62192: LIST
62193: LIST
62194: LIST
62195: LIST
62196: LIST
62197: LIST
62198: LIST
62199: LIST
62200: LIST
62201: LIST
62202: LIST
62203: LIST
62204: LIST
62205: LIST
62206: LIST
62207: LIST
62208: LIST
62209: LIST
62210: LIST
62211: LIST
62212: LIST
62213: LIST
62214: LIST
62215: LIST
62216: LIST
62217: LIST
62218: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62219: LD_ADDR_VAR 0 43
62223: PUSH
62224: LD_INT 0
62226: PUSH
62227: LD_INT 0
62229: PUSH
62230: EMPTY
62231: LIST
62232: LIST
62233: PUSH
62234: LD_INT 0
62236: PUSH
62237: LD_INT 1
62239: NEG
62240: PUSH
62241: EMPTY
62242: LIST
62243: LIST
62244: PUSH
62245: LD_INT 1
62247: PUSH
62248: LD_INT 0
62250: PUSH
62251: EMPTY
62252: LIST
62253: LIST
62254: PUSH
62255: LD_INT 1
62257: PUSH
62258: LD_INT 1
62260: PUSH
62261: EMPTY
62262: LIST
62263: LIST
62264: PUSH
62265: LD_INT 0
62267: PUSH
62268: LD_INT 1
62270: PUSH
62271: EMPTY
62272: LIST
62273: LIST
62274: PUSH
62275: LD_INT 1
62277: NEG
62278: PUSH
62279: LD_INT 0
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: PUSH
62286: LD_INT 1
62288: NEG
62289: PUSH
62290: LD_INT 1
62292: NEG
62293: PUSH
62294: EMPTY
62295: LIST
62296: LIST
62297: PUSH
62298: LD_INT 1
62300: NEG
62301: PUSH
62302: LD_INT 2
62304: NEG
62305: PUSH
62306: EMPTY
62307: LIST
62308: LIST
62309: PUSH
62310: LD_INT 0
62312: PUSH
62313: LD_INT 2
62315: NEG
62316: PUSH
62317: EMPTY
62318: LIST
62319: LIST
62320: PUSH
62321: LD_INT 1
62323: PUSH
62324: LD_INT 1
62326: NEG
62327: PUSH
62328: EMPTY
62329: LIST
62330: LIST
62331: PUSH
62332: LD_INT 2
62334: PUSH
62335: LD_INT 0
62337: PUSH
62338: EMPTY
62339: LIST
62340: LIST
62341: PUSH
62342: LD_INT 2
62344: PUSH
62345: LD_INT 1
62347: PUSH
62348: EMPTY
62349: LIST
62350: LIST
62351: PUSH
62352: LD_INT 1
62354: PUSH
62355: LD_INT 2
62357: PUSH
62358: EMPTY
62359: LIST
62360: LIST
62361: PUSH
62362: LD_INT 0
62364: PUSH
62365: LD_INT 2
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: PUSH
62372: LD_INT 1
62374: NEG
62375: PUSH
62376: LD_INT 1
62378: PUSH
62379: EMPTY
62380: LIST
62381: LIST
62382: PUSH
62383: LD_INT 2
62385: NEG
62386: PUSH
62387: LD_INT 0
62389: PUSH
62390: EMPTY
62391: LIST
62392: LIST
62393: PUSH
62394: LD_INT 2
62396: NEG
62397: PUSH
62398: LD_INT 1
62400: NEG
62401: PUSH
62402: EMPTY
62403: LIST
62404: LIST
62405: PUSH
62406: LD_INT 1
62408: NEG
62409: PUSH
62410: LD_INT 3
62412: NEG
62413: PUSH
62414: EMPTY
62415: LIST
62416: LIST
62417: PUSH
62418: LD_INT 0
62420: PUSH
62421: LD_INT 3
62423: NEG
62424: PUSH
62425: EMPTY
62426: LIST
62427: LIST
62428: PUSH
62429: LD_INT 1
62431: PUSH
62432: LD_INT 2
62434: NEG
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: PUSH
62440: LD_INT 2
62442: PUSH
62443: LD_INT 1
62445: NEG
62446: PUSH
62447: EMPTY
62448: LIST
62449: LIST
62450: PUSH
62451: LD_INT 3
62453: PUSH
62454: LD_INT 0
62456: PUSH
62457: EMPTY
62458: LIST
62459: LIST
62460: PUSH
62461: LD_INT 3
62463: PUSH
62464: LD_INT 1
62466: PUSH
62467: EMPTY
62468: LIST
62469: LIST
62470: PUSH
62471: LD_INT 1
62473: PUSH
62474: LD_INT 3
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: PUSH
62481: LD_INT 0
62483: PUSH
62484: LD_INT 3
62486: PUSH
62487: EMPTY
62488: LIST
62489: LIST
62490: PUSH
62491: LD_INT 1
62493: NEG
62494: PUSH
62495: LD_INT 2
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: PUSH
62502: LD_INT 2
62504: NEG
62505: PUSH
62506: LD_INT 1
62508: PUSH
62509: EMPTY
62510: LIST
62511: LIST
62512: PUSH
62513: LD_INT 3
62515: NEG
62516: PUSH
62517: LD_INT 0
62519: PUSH
62520: EMPTY
62521: LIST
62522: LIST
62523: PUSH
62524: LD_INT 3
62526: NEG
62527: PUSH
62528: LD_INT 1
62530: NEG
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: PUSH
62536: EMPTY
62537: LIST
62538: LIST
62539: LIST
62540: LIST
62541: LIST
62542: LIST
62543: LIST
62544: LIST
62545: LIST
62546: LIST
62547: LIST
62548: LIST
62549: LIST
62550: LIST
62551: LIST
62552: LIST
62553: LIST
62554: LIST
62555: LIST
62556: LIST
62557: LIST
62558: LIST
62559: LIST
62560: LIST
62561: LIST
62562: LIST
62563: LIST
62564: LIST
62565: LIST
62566: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62567: LD_ADDR_VAR 0 44
62571: PUSH
62572: LD_INT 0
62574: PUSH
62575: LD_INT 0
62577: PUSH
62578: EMPTY
62579: LIST
62580: LIST
62581: PUSH
62582: LD_INT 0
62584: PUSH
62585: LD_INT 1
62587: NEG
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: PUSH
62593: LD_INT 1
62595: PUSH
62596: LD_INT 0
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: PUSH
62603: LD_INT 1
62605: PUSH
62606: LD_INT 1
62608: PUSH
62609: EMPTY
62610: LIST
62611: LIST
62612: PUSH
62613: LD_INT 0
62615: PUSH
62616: LD_INT 1
62618: PUSH
62619: EMPTY
62620: LIST
62621: LIST
62622: PUSH
62623: LD_INT 1
62625: NEG
62626: PUSH
62627: LD_INT 0
62629: PUSH
62630: EMPTY
62631: LIST
62632: LIST
62633: PUSH
62634: LD_INT 1
62636: NEG
62637: PUSH
62638: LD_INT 1
62640: NEG
62641: PUSH
62642: EMPTY
62643: LIST
62644: LIST
62645: PUSH
62646: LD_INT 1
62648: NEG
62649: PUSH
62650: LD_INT 2
62652: NEG
62653: PUSH
62654: EMPTY
62655: LIST
62656: LIST
62657: PUSH
62658: LD_INT 1
62660: PUSH
62661: LD_INT 1
62663: NEG
62664: PUSH
62665: EMPTY
62666: LIST
62667: LIST
62668: PUSH
62669: LD_INT 2
62671: PUSH
62672: LD_INT 0
62674: PUSH
62675: EMPTY
62676: LIST
62677: LIST
62678: PUSH
62679: LD_INT 2
62681: PUSH
62682: LD_INT 1
62684: PUSH
62685: EMPTY
62686: LIST
62687: LIST
62688: PUSH
62689: LD_INT 2
62691: PUSH
62692: LD_INT 2
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: PUSH
62699: LD_INT 1
62701: PUSH
62702: LD_INT 2
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: PUSH
62709: LD_INT 1
62711: NEG
62712: PUSH
62713: LD_INT 1
62715: PUSH
62716: EMPTY
62717: LIST
62718: LIST
62719: PUSH
62720: LD_INT 2
62722: NEG
62723: PUSH
62724: LD_INT 0
62726: PUSH
62727: EMPTY
62728: LIST
62729: LIST
62730: PUSH
62731: LD_INT 2
62733: NEG
62734: PUSH
62735: LD_INT 1
62737: NEG
62738: PUSH
62739: EMPTY
62740: LIST
62741: LIST
62742: PUSH
62743: LD_INT 2
62745: NEG
62746: PUSH
62747: LD_INT 2
62749: NEG
62750: PUSH
62751: EMPTY
62752: LIST
62753: LIST
62754: PUSH
62755: LD_INT 2
62757: NEG
62758: PUSH
62759: LD_INT 3
62761: NEG
62762: PUSH
62763: EMPTY
62764: LIST
62765: LIST
62766: PUSH
62767: LD_INT 2
62769: PUSH
62770: LD_INT 1
62772: NEG
62773: PUSH
62774: EMPTY
62775: LIST
62776: LIST
62777: PUSH
62778: LD_INT 3
62780: PUSH
62781: LD_INT 0
62783: PUSH
62784: EMPTY
62785: LIST
62786: LIST
62787: PUSH
62788: LD_INT 3
62790: PUSH
62791: LD_INT 1
62793: PUSH
62794: EMPTY
62795: LIST
62796: LIST
62797: PUSH
62798: LD_INT 3
62800: PUSH
62801: LD_INT 2
62803: PUSH
62804: EMPTY
62805: LIST
62806: LIST
62807: PUSH
62808: LD_INT 3
62810: PUSH
62811: LD_INT 3
62813: PUSH
62814: EMPTY
62815: LIST
62816: LIST
62817: PUSH
62818: LD_INT 2
62820: PUSH
62821: LD_INT 3
62823: PUSH
62824: EMPTY
62825: LIST
62826: LIST
62827: PUSH
62828: LD_INT 2
62830: NEG
62831: PUSH
62832: LD_INT 1
62834: PUSH
62835: EMPTY
62836: LIST
62837: LIST
62838: PUSH
62839: LD_INT 3
62841: NEG
62842: PUSH
62843: LD_INT 0
62845: PUSH
62846: EMPTY
62847: LIST
62848: LIST
62849: PUSH
62850: LD_INT 3
62852: NEG
62853: PUSH
62854: LD_INT 1
62856: NEG
62857: PUSH
62858: EMPTY
62859: LIST
62860: LIST
62861: PUSH
62862: LD_INT 3
62864: NEG
62865: PUSH
62866: LD_INT 2
62868: NEG
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: PUSH
62874: LD_INT 3
62876: NEG
62877: PUSH
62878: LD_INT 3
62880: NEG
62881: PUSH
62882: EMPTY
62883: LIST
62884: LIST
62885: PUSH
62886: EMPTY
62887: LIST
62888: LIST
62889: LIST
62890: LIST
62891: LIST
62892: LIST
62893: LIST
62894: LIST
62895: LIST
62896: LIST
62897: LIST
62898: LIST
62899: LIST
62900: LIST
62901: LIST
62902: LIST
62903: LIST
62904: LIST
62905: LIST
62906: LIST
62907: LIST
62908: LIST
62909: LIST
62910: LIST
62911: LIST
62912: LIST
62913: LIST
62914: LIST
62915: LIST
62916: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62917: LD_ADDR_VAR 0 45
62921: PUSH
62922: LD_INT 0
62924: PUSH
62925: LD_INT 0
62927: PUSH
62928: EMPTY
62929: LIST
62930: LIST
62931: PUSH
62932: LD_INT 0
62934: PUSH
62935: LD_INT 1
62937: NEG
62938: PUSH
62939: EMPTY
62940: LIST
62941: LIST
62942: PUSH
62943: LD_INT 1
62945: PUSH
62946: LD_INT 0
62948: PUSH
62949: EMPTY
62950: LIST
62951: LIST
62952: PUSH
62953: LD_INT 1
62955: PUSH
62956: LD_INT 1
62958: PUSH
62959: EMPTY
62960: LIST
62961: LIST
62962: PUSH
62963: LD_INT 0
62965: PUSH
62966: LD_INT 1
62968: PUSH
62969: EMPTY
62970: LIST
62971: LIST
62972: PUSH
62973: LD_INT 1
62975: NEG
62976: PUSH
62977: LD_INT 0
62979: PUSH
62980: EMPTY
62981: LIST
62982: LIST
62983: PUSH
62984: LD_INT 1
62986: NEG
62987: PUSH
62988: LD_INT 1
62990: NEG
62991: PUSH
62992: EMPTY
62993: LIST
62994: LIST
62995: PUSH
62996: LD_INT 1
62998: NEG
62999: PUSH
63000: LD_INT 2
63002: NEG
63003: PUSH
63004: EMPTY
63005: LIST
63006: LIST
63007: PUSH
63008: LD_INT 0
63010: PUSH
63011: LD_INT 2
63013: NEG
63014: PUSH
63015: EMPTY
63016: LIST
63017: LIST
63018: PUSH
63019: LD_INT 1
63021: PUSH
63022: LD_INT 1
63024: NEG
63025: PUSH
63026: EMPTY
63027: LIST
63028: LIST
63029: PUSH
63030: LD_INT 2
63032: PUSH
63033: LD_INT 1
63035: PUSH
63036: EMPTY
63037: LIST
63038: LIST
63039: PUSH
63040: LD_INT 2
63042: PUSH
63043: LD_INT 2
63045: PUSH
63046: EMPTY
63047: LIST
63048: LIST
63049: PUSH
63050: LD_INT 1
63052: PUSH
63053: LD_INT 2
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: PUSH
63060: LD_INT 0
63062: PUSH
63063: LD_INT 2
63065: PUSH
63066: EMPTY
63067: LIST
63068: LIST
63069: PUSH
63070: LD_INT 1
63072: NEG
63073: PUSH
63074: LD_INT 1
63076: PUSH
63077: EMPTY
63078: LIST
63079: LIST
63080: PUSH
63081: LD_INT 2
63083: NEG
63084: PUSH
63085: LD_INT 1
63087: NEG
63088: PUSH
63089: EMPTY
63090: LIST
63091: LIST
63092: PUSH
63093: LD_INT 2
63095: NEG
63096: PUSH
63097: LD_INT 2
63099: NEG
63100: PUSH
63101: EMPTY
63102: LIST
63103: LIST
63104: PUSH
63105: LD_INT 2
63107: NEG
63108: PUSH
63109: LD_INT 3
63111: NEG
63112: PUSH
63113: EMPTY
63114: LIST
63115: LIST
63116: PUSH
63117: LD_INT 1
63119: NEG
63120: PUSH
63121: LD_INT 3
63123: NEG
63124: PUSH
63125: EMPTY
63126: LIST
63127: LIST
63128: PUSH
63129: LD_INT 0
63131: PUSH
63132: LD_INT 3
63134: NEG
63135: PUSH
63136: EMPTY
63137: LIST
63138: LIST
63139: PUSH
63140: LD_INT 1
63142: PUSH
63143: LD_INT 2
63145: NEG
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: PUSH
63151: LD_INT 3
63153: PUSH
63154: LD_INT 2
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: PUSH
63161: LD_INT 3
63163: PUSH
63164: LD_INT 3
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: LD_INT 2
63173: PUSH
63174: LD_INT 3
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: PUSH
63181: LD_INT 1
63183: PUSH
63184: LD_INT 3
63186: PUSH
63187: EMPTY
63188: LIST
63189: LIST
63190: PUSH
63191: LD_INT 0
63193: PUSH
63194: LD_INT 3
63196: PUSH
63197: EMPTY
63198: LIST
63199: LIST
63200: PUSH
63201: LD_INT 1
63203: NEG
63204: PUSH
63205: LD_INT 2
63207: PUSH
63208: EMPTY
63209: LIST
63210: LIST
63211: PUSH
63212: LD_INT 3
63214: NEG
63215: PUSH
63216: LD_INT 2
63218: NEG
63219: PUSH
63220: EMPTY
63221: LIST
63222: LIST
63223: PUSH
63224: LD_INT 3
63226: NEG
63227: PUSH
63228: LD_INT 3
63230: NEG
63231: PUSH
63232: EMPTY
63233: LIST
63234: LIST
63235: PUSH
63236: EMPTY
63237: LIST
63238: LIST
63239: LIST
63240: LIST
63241: LIST
63242: LIST
63243: LIST
63244: LIST
63245: LIST
63246: LIST
63247: LIST
63248: LIST
63249: LIST
63250: LIST
63251: LIST
63252: LIST
63253: LIST
63254: LIST
63255: LIST
63256: LIST
63257: LIST
63258: LIST
63259: LIST
63260: LIST
63261: LIST
63262: LIST
63263: LIST
63264: LIST
63265: LIST
63266: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63267: LD_ADDR_VAR 0 46
63271: PUSH
63272: LD_INT 0
63274: PUSH
63275: LD_INT 0
63277: PUSH
63278: EMPTY
63279: LIST
63280: LIST
63281: PUSH
63282: LD_INT 0
63284: PUSH
63285: LD_INT 1
63287: NEG
63288: PUSH
63289: EMPTY
63290: LIST
63291: LIST
63292: PUSH
63293: LD_INT 1
63295: PUSH
63296: LD_INT 0
63298: PUSH
63299: EMPTY
63300: LIST
63301: LIST
63302: PUSH
63303: LD_INT 1
63305: PUSH
63306: LD_INT 1
63308: PUSH
63309: EMPTY
63310: LIST
63311: LIST
63312: PUSH
63313: LD_INT 0
63315: PUSH
63316: LD_INT 1
63318: PUSH
63319: EMPTY
63320: LIST
63321: LIST
63322: PUSH
63323: LD_INT 1
63325: NEG
63326: PUSH
63327: LD_INT 0
63329: PUSH
63330: EMPTY
63331: LIST
63332: LIST
63333: PUSH
63334: LD_INT 1
63336: NEG
63337: PUSH
63338: LD_INT 1
63340: NEG
63341: PUSH
63342: EMPTY
63343: LIST
63344: LIST
63345: PUSH
63346: LD_INT 1
63348: NEG
63349: PUSH
63350: LD_INT 2
63352: NEG
63353: PUSH
63354: EMPTY
63355: LIST
63356: LIST
63357: PUSH
63358: LD_INT 0
63360: PUSH
63361: LD_INT 2
63363: NEG
63364: PUSH
63365: EMPTY
63366: LIST
63367: LIST
63368: PUSH
63369: LD_INT 1
63371: PUSH
63372: LD_INT 1
63374: NEG
63375: PUSH
63376: EMPTY
63377: LIST
63378: LIST
63379: PUSH
63380: LD_INT 2
63382: PUSH
63383: LD_INT 0
63385: PUSH
63386: EMPTY
63387: LIST
63388: LIST
63389: PUSH
63390: LD_INT 2
63392: PUSH
63393: LD_INT 1
63395: PUSH
63396: EMPTY
63397: LIST
63398: LIST
63399: PUSH
63400: LD_INT 1
63402: PUSH
63403: LD_INT 2
63405: PUSH
63406: EMPTY
63407: LIST
63408: LIST
63409: PUSH
63410: LD_INT 0
63412: PUSH
63413: LD_INT 2
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: PUSH
63420: LD_INT 1
63422: NEG
63423: PUSH
63424: LD_INT 1
63426: PUSH
63427: EMPTY
63428: LIST
63429: LIST
63430: PUSH
63431: LD_INT 2
63433: NEG
63434: PUSH
63435: LD_INT 0
63437: PUSH
63438: EMPTY
63439: LIST
63440: LIST
63441: PUSH
63442: LD_INT 2
63444: NEG
63445: PUSH
63446: LD_INT 1
63448: NEG
63449: PUSH
63450: EMPTY
63451: LIST
63452: LIST
63453: PUSH
63454: LD_INT 1
63456: NEG
63457: PUSH
63458: LD_INT 3
63460: NEG
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: PUSH
63466: LD_INT 0
63468: PUSH
63469: LD_INT 3
63471: NEG
63472: PUSH
63473: EMPTY
63474: LIST
63475: LIST
63476: PUSH
63477: LD_INT 1
63479: PUSH
63480: LD_INT 2
63482: NEG
63483: PUSH
63484: EMPTY
63485: LIST
63486: LIST
63487: PUSH
63488: LD_INT 2
63490: PUSH
63491: LD_INT 1
63493: NEG
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: PUSH
63499: LD_INT 3
63501: PUSH
63502: LD_INT 0
63504: PUSH
63505: EMPTY
63506: LIST
63507: LIST
63508: PUSH
63509: LD_INT 3
63511: PUSH
63512: LD_INT 1
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: PUSH
63519: LD_INT 1
63521: PUSH
63522: LD_INT 3
63524: PUSH
63525: EMPTY
63526: LIST
63527: LIST
63528: PUSH
63529: LD_INT 0
63531: PUSH
63532: LD_INT 3
63534: PUSH
63535: EMPTY
63536: LIST
63537: LIST
63538: PUSH
63539: LD_INT 1
63541: NEG
63542: PUSH
63543: LD_INT 2
63545: PUSH
63546: EMPTY
63547: LIST
63548: LIST
63549: PUSH
63550: LD_INT 2
63552: NEG
63553: PUSH
63554: LD_INT 1
63556: PUSH
63557: EMPTY
63558: LIST
63559: LIST
63560: PUSH
63561: LD_INT 3
63563: NEG
63564: PUSH
63565: LD_INT 0
63567: PUSH
63568: EMPTY
63569: LIST
63570: LIST
63571: PUSH
63572: LD_INT 3
63574: NEG
63575: PUSH
63576: LD_INT 1
63578: NEG
63579: PUSH
63580: EMPTY
63581: LIST
63582: LIST
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: LIST
63588: LIST
63589: LIST
63590: LIST
63591: LIST
63592: LIST
63593: LIST
63594: LIST
63595: LIST
63596: LIST
63597: LIST
63598: LIST
63599: LIST
63600: LIST
63601: LIST
63602: LIST
63603: LIST
63604: LIST
63605: LIST
63606: LIST
63607: LIST
63608: LIST
63609: LIST
63610: LIST
63611: LIST
63612: LIST
63613: LIST
63614: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63615: LD_ADDR_VAR 0 47
63619: PUSH
63620: LD_INT 0
63622: PUSH
63623: LD_INT 0
63625: PUSH
63626: EMPTY
63627: LIST
63628: LIST
63629: PUSH
63630: LD_INT 0
63632: PUSH
63633: LD_INT 1
63635: NEG
63636: PUSH
63637: EMPTY
63638: LIST
63639: LIST
63640: PUSH
63641: LD_INT 1
63643: PUSH
63644: LD_INT 0
63646: PUSH
63647: EMPTY
63648: LIST
63649: LIST
63650: PUSH
63651: LD_INT 1
63653: PUSH
63654: LD_INT 1
63656: PUSH
63657: EMPTY
63658: LIST
63659: LIST
63660: PUSH
63661: LD_INT 0
63663: PUSH
63664: LD_INT 1
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: PUSH
63671: LD_INT 1
63673: NEG
63674: PUSH
63675: LD_INT 0
63677: PUSH
63678: EMPTY
63679: LIST
63680: LIST
63681: PUSH
63682: LD_INT 1
63684: NEG
63685: PUSH
63686: LD_INT 1
63688: NEG
63689: PUSH
63690: EMPTY
63691: LIST
63692: LIST
63693: PUSH
63694: LD_INT 1
63696: NEG
63697: PUSH
63698: LD_INT 2
63700: NEG
63701: PUSH
63702: EMPTY
63703: LIST
63704: LIST
63705: PUSH
63706: LD_INT 0
63708: PUSH
63709: LD_INT 2
63711: NEG
63712: PUSH
63713: EMPTY
63714: LIST
63715: LIST
63716: PUSH
63717: LD_INT 1
63719: PUSH
63720: LD_INT 1
63722: NEG
63723: PUSH
63724: EMPTY
63725: LIST
63726: LIST
63727: PUSH
63728: LD_INT 2
63730: NEG
63731: PUSH
63732: LD_INT 1
63734: NEG
63735: PUSH
63736: EMPTY
63737: LIST
63738: LIST
63739: PUSH
63740: LD_INT 2
63742: NEG
63743: PUSH
63744: LD_INT 2
63746: NEG
63747: PUSH
63748: EMPTY
63749: LIST
63750: LIST
63751: PUSH
63752: EMPTY
63753: LIST
63754: LIST
63755: LIST
63756: LIST
63757: LIST
63758: LIST
63759: LIST
63760: LIST
63761: LIST
63762: LIST
63763: LIST
63764: LIST
63765: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63766: LD_ADDR_VAR 0 48
63770: PUSH
63771: LD_INT 0
63773: PUSH
63774: LD_INT 0
63776: PUSH
63777: EMPTY
63778: LIST
63779: LIST
63780: PUSH
63781: LD_INT 0
63783: PUSH
63784: LD_INT 1
63786: NEG
63787: PUSH
63788: EMPTY
63789: LIST
63790: LIST
63791: PUSH
63792: LD_INT 1
63794: PUSH
63795: LD_INT 0
63797: PUSH
63798: EMPTY
63799: LIST
63800: LIST
63801: PUSH
63802: LD_INT 1
63804: PUSH
63805: LD_INT 1
63807: PUSH
63808: EMPTY
63809: LIST
63810: LIST
63811: PUSH
63812: LD_INT 0
63814: PUSH
63815: LD_INT 1
63817: PUSH
63818: EMPTY
63819: LIST
63820: LIST
63821: PUSH
63822: LD_INT 1
63824: NEG
63825: PUSH
63826: LD_INT 0
63828: PUSH
63829: EMPTY
63830: LIST
63831: LIST
63832: PUSH
63833: LD_INT 1
63835: NEG
63836: PUSH
63837: LD_INT 1
63839: NEG
63840: PUSH
63841: EMPTY
63842: LIST
63843: LIST
63844: PUSH
63845: LD_INT 1
63847: NEG
63848: PUSH
63849: LD_INT 2
63851: NEG
63852: PUSH
63853: EMPTY
63854: LIST
63855: LIST
63856: PUSH
63857: LD_INT 0
63859: PUSH
63860: LD_INT 2
63862: NEG
63863: PUSH
63864: EMPTY
63865: LIST
63866: LIST
63867: PUSH
63868: LD_INT 1
63870: PUSH
63871: LD_INT 1
63873: NEG
63874: PUSH
63875: EMPTY
63876: LIST
63877: LIST
63878: PUSH
63879: LD_INT 2
63881: PUSH
63882: LD_INT 0
63884: PUSH
63885: EMPTY
63886: LIST
63887: LIST
63888: PUSH
63889: LD_INT 2
63891: PUSH
63892: LD_INT 1
63894: PUSH
63895: EMPTY
63896: LIST
63897: LIST
63898: PUSH
63899: EMPTY
63900: LIST
63901: LIST
63902: LIST
63903: LIST
63904: LIST
63905: LIST
63906: LIST
63907: LIST
63908: LIST
63909: LIST
63910: LIST
63911: LIST
63912: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63913: LD_ADDR_VAR 0 49
63917: PUSH
63918: LD_INT 0
63920: PUSH
63921: LD_INT 0
63923: PUSH
63924: EMPTY
63925: LIST
63926: LIST
63927: PUSH
63928: LD_INT 0
63930: PUSH
63931: LD_INT 1
63933: NEG
63934: PUSH
63935: EMPTY
63936: LIST
63937: LIST
63938: PUSH
63939: LD_INT 1
63941: PUSH
63942: LD_INT 0
63944: PUSH
63945: EMPTY
63946: LIST
63947: LIST
63948: PUSH
63949: LD_INT 1
63951: PUSH
63952: LD_INT 1
63954: PUSH
63955: EMPTY
63956: LIST
63957: LIST
63958: PUSH
63959: LD_INT 0
63961: PUSH
63962: LD_INT 1
63964: PUSH
63965: EMPTY
63966: LIST
63967: LIST
63968: PUSH
63969: LD_INT 1
63971: NEG
63972: PUSH
63973: LD_INT 0
63975: PUSH
63976: EMPTY
63977: LIST
63978: LIST
63979: PUSH
63980: LD_INT 1
63982: NEG
63983: PUSH
63984: LD_INT 1
63986: NEG
63987: PUSH
63988: EMPTY
63989: LIST
63990: LIST
63991: PUSH
63992: LD_INT 1
63994: PUSH
63995: LD_INT 1
63997: NEG
63998: PUSH
63999: EMPTY
64000: LIST
64001: LIST
64002: PUSH
64003: LD_INT 2
64005: PUSH
64006: LD_INT 0
64008: PUSH
64009: EMPTY
64010: LIST
64011: LIST
64012: PUSH
64013: LD_INT 2
64015: PUSH
64016: LD_INT 1
64018: PUSH
64019: EMPTY
64020: LIST
64021: LIST
64022: PUSH
64023: LD_INT 2
64025: PUSH
64026: LD_INT 2
64028: PUSH
64029: EMPTY
64030: LIST
64031: LIST
64032: PUSH
64033: LD_INT 1
64035: PUSH
64036: LD_INT 2
64038: PUSH
64039: EMPTY
64040: LIST
64041: LIST
64042: PUSH
64043: EMPTY
64044: LIST
64045: LIST
64046: LIST
64047: LIST
64048: LIST
64049: LIST
64050: LIST
64051: LIST
64052: LIST
64053: LIST
64054: LIST
64055: LIST
64056: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64057: LD_ADDR_VAR 0 50
64061: PUSH
64062: LD_INT 0
64064: PUSH
64065: LD_INT 0
64067: PUSH
64068: EMPTY
64069: LIST
64070: LIST
64071: PUSH
64072: LD_INT 0
64074: PUSH
64075: LD_INT 1
64077: NEG
64078: PUSH
64079: EMPTY
64080: LIST
64081: LIST
64082: PUSH
64083: LD_INT 1
64085: PUSH
64086: LD_INT 0
64088: PUSH
64089: EMPTY
64090: LIST
64091: LIST
64092: PUSH
64093: LD_INT 1
64095: PUSH
64096: LD_INT 1
64098: PUSH
64099: EMPTY
64100: LIST
64101: LIST
64102: PUSH
64103: LD_INT 0
64105: PUSH
64106: LD_INT 1
64108: PUSH
64109: EMPTY
64110: LIST
64111: LIST
64112: PUSH
64113: LD_INT 1
64115: NEG
64116: PUSH
64117: LD_INT 0
64119: PUSH
64120: EMPTY
64121: LIST
64122: LIST
64123: PUSH
64124: LD_INT 1
64126: NEG
64127: PUSH
64128: LD_INT 1
64130: NEG
64131: PUSH
64132: EMPTY
64133: LIST
64134: LIST
64135: PUSH
64136: LD_INT 2
64138: PUSH
64139: LD_INT 1
64141: PUSH
64142: EMPTY
64143: LIST
64144: LIST
64145: PUSH
64146: LD_INT 2
64148: PUSH
64149: LD_INT 2
64151: PUSH
64152: EMPTY
64153: LIST
64154: LIST
64155: PUSH
64156: LD_INT 1
64158: PUSH
64159: LD_INT 2
64161: PUSH
64162: EMPTY
64163: LIST
64164: LIST
64165: PUSH
64166: LD_INT 0
64168: PUSH
64169: LD_INT 2
64171: PUSH
64172: EMPTY
64173: LIST
64174: LIST
64175: PUSH
64176: LD_INT 1
64178: NEG
64179: PUSH
64180: LD_INT 1
64182: PUSH
64183: EMPTY
64184: LIST
64185: LIST
64186: PUSH
64187: EMPTY
64188: LIST
64189: LIST
64190: LIST
64191: LIST
64192: LIST
64193: LIST
64194: LIST
64195: LIST
64196: LIST
64197: LIST
64198: LIST
64199: LIST
64200: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64201: LD_ADDR_VAR 0 51
64205: PUSH
64206: LD_INT 0
64208: PUSH
64209: LD_INT 0
64211: PUSH
64212: EMPTY
64213: LIST
64214: LIST
64215: PUSH
64216: LD_INT 0
64218: PUSH
64219: LD_INT 1
64221: NEG
64222: PUSH
64223: EMPTY
64224: LIST
64225: LIST
64226: PUSH
64227: LD_INT 1
64229: PUSH
64230: LD_INT 0
64232: PUSH
64233: EMPTY
64234: LIST
64235: LIST
64236: PUSH
64237: LD_INT 1
64239: PUSH
64240: LD_INT 1
64242: PUSH
64243: EMPTY
64244: LIST
64245: LIST
64246: PUSH
64247: LD_INT 0
64249: PUSH
64250: LD_INT 1
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: PUSH
64257: LD_INT 1
64259: NEG
64260: PUSH
64261: LD_INT 0
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: PUSH
64268: LD_INT 1
64270: NEG
64271: PUSH
64272: LD_INT 1
64274: NEG
64275: PUSH
64276: EMPTY
64277: LIST
64278: LIST
64279: PUSH
64280: LD_INT 1
64282: PUSH
64283: LD_INT 2
64285: PUSH
64286: EMPTY
64287: LIST
64288: LIST
64289: PUSH
64290: LD_INT 0
64292: PUSH
64293: LD_INT 2
64295: PUSH
64296: EMPTY
64297: LIST
64298: LIST
64299: PUSH
64300: LD_INT 1
64302: NEG
64303: PUSH
64304: LD_INT 1
64306: PUSH
64307: EMPTY
64308: LIST
64309: LIST
64310: PUSH
64311: LD_INT 2
64313: NEG
64314: PUSH
64315: LD_INT 0
64317: PUSH
64318: EMPTY
64319: LIST
64320: LIST
64321: PUSH
64322: LD_INT 2
64324: NEG
64325: PUSH
64326: LD_INT 1
64328: NEG
64329: PUSH
64330: EMPTY
64331: LIST
64332: LIST
64333: PUSH
64334: EMPTY
64335: LIST
64336: LIST
64337: LIST
64338: LIST
64339: LIST
64340: LIST
64341: LIST
64342: LIST
64343: LIST
64344: LIST
64345: LIST
64346: LIST
64347: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64348: LD_ADDR_VAR 0 52
64352: PUSH
64353: LD_INT 0
64355: PUSH
64356: LD_INT 0
64358: PUSH
64359: EMPTY
64360: LIST
64361: LIST
64362: PUSH
64363: LD_INT 0
64365: PUSH
64366: LD_INT 1
64368: NEG
64369: PUSH
64370: EMPTY
64371: LIST
64372: LIST
64373: PUSH
64374: LD_INT 1
64376: PUSH
64377: LD_INT 0
64379: PUSH
64380: EMPTY
64381: LIST
64382: LIST
64383: PUSH
64384: LD_INT 1
64386: PUSH
64387: LD_INT 1
64389: PUSH
64390: EMPTY
64391: LIST
64392: LIST
64393: PUSH
64394: LD_INT 0
64396: PUSH
64397: LD_INT 1
64399: PUSH
64400: EMPTY
64401: LIST
64402: LIST
64403: PUSH
64404: LD_INT 1
64406: NEG
64407: PUSH
64408: LD_INT 0
64410: PUSH
64411: EMPTY
64412: LIST
64413: LIST
64414: PUSH
64415: LD_INT 1
64417: NEG
64418: PUSH
64419: LD_INT 1
64421: NEG
64422: PUSH
64423: EMPTY
64424: LIST
64425: LIST
64426: PUSH
64427: LD_INT 1
64429: NEG
64430: PUSH
64431: LD_INT 2
64433: NEG
64434: PUSH
64435: EMPTY
64436: LIST
64437: LIST
64438: PUSH
64439: LD_INT 1
64441: NEG
64442: PUSH
64443: LD_INT 1
64445: PUSH
64446: EMPTY
64447: LIST
64448: LIST
64449: PUSH
64450: LD_INT 2
64452: NEG
64453: PUSH
64454: LD_INT 0
64456: PUSH
64457: EMPTY
64458: LIST
64459: LIST
64460: PUSH
64461: LD_INT 2
64463: NEG
64464: PUSH
64465: LD_INT 1
64467: NEG
64468: PUSH
64469: EMPTY
64470: LIST
64471: LIST
64472: PUSH
64473: LD_INT 2
64475: NEG
64476: PUSH
64477: LD_INT 2
64479: NEG
64480: PUSH
64481: EMPTY
64482: LIST
64483: LIST
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: LIST
64489: LIST
64490: LIST
64491: LIST
64492: LIST
64493: LIST
64494: LIST
64495: LIST
64496: LIST
64497: LIST
64498: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64499: LD_ADDR_VAR 0 53
64503: PUSH
64504: LD_INT 0
64506: PUSH
64507: LD_INT 0
64509: PUSH
64510: EMPTY
64511: LIST
64512: LIST
64513: PUSH
64514: LD_INT 0
64516: PUSH
64517: LD_INT 1
64519: NEG
64520: PUSH
64521: EMPTY
64522: LIST
64523: LIST
64524: PUSH
64525: LD_INT 1
64527: PUSH
64528: LD_INT 0
64530: PUSH
64531: EMPTY
64532: LIST
64533: LIST
64534: PUSH
64535: LD_INT 1
64537: PUSH
64538: LD_INT 1
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: PUSH
64545: LD_INT 0
64547: PUSH
64548: LD_INT 1
64550: PUSH
64551: EMPTY
64552: LIST
64553: LIST
64554: PUSH
64555: LD_INT 1
64557: NEG
64558: PUSH
64559: LD_INT 0
64561: PUSH
64562: EMPTY
64563: LIST
64564: LIST
64565: PUSH
64566: LD_INT 1
64568: NEG
64569: PUSH
64570: LD_INT 1
64572: NEG
64573: PUSH
64574: EMPTY
64575: LIST
64576: LIST
64577: PUSH
64578: LD_INT 1
64580: NEG
64581: PUSH
64582: LD_INT 2
64584: NEG
64585: PUSH
64586: EMPTY
64587: LIST
64588: LIST
64589: PUSH
64590: LD_INT 0
64592: PUSH
64593: LD_INT 2
64595: NEG
64596: PUSH
64597: EMPTY
64598: LIST
64599: LIST
64600: PUSH
64601: LD_INT 1
64603: PUSH
64604: LD_INT 1
64606: NEG
64607: PUSH
64608: EMPTY
64609: LIST
64610: LIST
64611: PUSH
64612: LD_INT 2
64614: PUSH
64615: LD_INT 0
64617: PUSH
64618: EMPTY
64619: LIST
64620: LIST
64621: PUSH
64622: LD_INT 2
64624: PUSH
64625: LD_INT 1
64627: PUSH
64628: EMPTY
64629: LIST
64630: LIST
64631: PUSH
64632: LD_INT 2
64634: PUSH
64635: LD_INT 2
64637: PUSH
64638: EMPTY
64639: LIST
64640: LIST
64641: PUSH
64642: LD_INT 1
64644: PUSH
64645: LD_INT 2
64647: PUSH
64648: EMPTY
64649: LIST
64650: LIST
64651: PUSH
64652: LD_INT 0
64654: PUSH
64655: LD_INT 2
64657: PUSH
64658: EMPTY
64659: LIST
64660: LIST
64661: PUSH
64662: LD_INT 1
64664: NEG
64665: PUSH
64666: LD_INT 1
64668: PUSH
64669: EMPTY
64670: LIST
64671: LIST
64672: PUSH
64673: LD_INT 2
64675: NEG
64676: PUSH
64677: LD_INT 0
64679: PUSH
64680: EMPTY
64681: LIST
64682: LIST
64683: PUSH
64684: LD_INT 2
64686: NEG
64687: PUSH
64688: LD_INT 1
64690: NEG
64691: PUSH
64692: EMPTY
64693: LIST
64694: LIST
64695: PUSH
64696: LD_INT 2
64698: NEG
64699: PUSH
64700: LD_INT 2
64702: NEG
64703: PUSH
64704: EMPTY
64705: LIST
64706: LIST
64707: PUSH
64708: EMPTY
64709: LIST
64710: LIST
64711: LIST
64712: LIST
64713: LIST
64714: LIST
64715: LIST
64716: LIST
64717: LIST
64718: LIST
64719: LIST
64720: LIST
64721: LIST
64722: LIST
64723: LIST
64724: LIST
64725: LIST
64726: LIST
64727: LIST
64728: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64729: LD_ADDR_VAR 0 54
64733: PUSH
64734: LD_INT 0
64736: PUSH
64737: LD_INT 0
64739: PUSH
64740: EMPTY
64741: LIST
64742: LIST
64743: PUSH
64744: LD_INT 0
64746: PUSH
64747: LD_INT 1
64749: NEG
64750: PUSH
64751: EMPTY
64752: LIST
64753: LIST
64754: PUSH
64755: LD_INT 1
64757: PUSH
64758: LD_INT 0
64760: PUSH
64761: EMPTY
64762: LIST
64763: LIST
64764: PUSH
64765: LD_INT 1
64767: PUSH
64768: LD_INT 1
64770: PUSH
64771: EMPTY
64772: LIST
64773: LIST
64774: PUSH
64775: LD_INT 0
64777: PUSH
64778: LD_INT 1
64780: PUSH
64781: EMPTY
64782: LIST
64783: LIST
64784: PUSH
64785: LD_INT 1
64787: NEG
64788: PUSH
64789: LD_INT 0
64791: PUSH
64792: EMPTY
64793: LIST
64794: LIST
64795: PUSH
64796: LD_INT 1
64798: NEG
64799: PUSH
64800: LD_INT 1
64802: NEG
64803: PUSH
64804: EMPTY
64805: LIST
64806: LIST
64807: PUSH
64808: LD_INT 1
64810: NEG
64811: PUSH
64812: LD_INT 2
64814: NEG
64815: PUSH
64816: EMPTY
64817: LIST
64818: LIST
64819: PUSH
64820: LD_INT 0
64822: PUSH
64823: LD_INT 2
64825: NEG
64826: PUSH
64827: EMPTY
64828: LIST
64829: LIST
64830: PUSH
64831: LD_INT 1
64833: PUSH
64834: LD_INT 1
64836: NEG
64837: PUSH
64838: EMPTY
64839: LIST
64840: LIST
64841: PUSH
64842: LD_INT 2
64844: PUSH
64845: LD_INT 0
64847: PUSH
64848: EMPTY
64849: LIST
64850: LIST
64851: PUSH
64852: LD_INT 2
64854: PUSH
64855: LD_INT 1
64857: PUSH
64858: EMPTY
64859: LIST
64860: LIST
64861: PUSH
64862: LD_INT 2
64864: PUSH
64865: LD_INT 2
64867: PUSH
64868: EMPTY
64869: LIST
64870: LIST
64871: PUSH
64872: LD_INT 1
64874: PUSH
64875: LD_INT 2
64877: PUSH
64878: EMPTY
64879: LIST
64880: LIST
64881: PUSH
64882: LD_INT 0
64884: PUSH
64885: LD_INT 2
64887: PUSH
64888: EMPTY
64889: LIST
64890: LIST
64891: PUSH
64892: LD_INT 1
64894: NEG
64895: PUSH
64896: LD_INT 1
64898: PUSH
64899: EMPTY
64900: LIST
64901: LIST
64902: PUSH
64903: LD_INT 2
64905: NEG
64906: PUSH
64907: LD_INT 0
64909: PUSH
64910: EMPTY
64911: LIST
64912: LIST
64913: PUSH
64914: LD_INT 2
64916: NEG
64917: PUSH
64918: LD_INT 1
64920: NEG
64921: PUSH
64922: EMPTY
64923: LIST
64924: LIST
64925: PUSH
64926: LD_INT 2
64928: NEG
64929: PUSH
64930: LD_INT 2
64932: NEG
64933: PUSH
64934: EMPTY
64935: LIST
64936: LIST
64937: PUSH
64938: EMPTY
64939: LIST
64940: LIST
64941: LIST
64942: LIST
64943: LIST
64944: LIST
64945: LIST
64946: LIST
64947: LIST
64948: LIST
64949: LIST
64950: LIST
64951: LIST
64952: LIST
64953: LIST
64954: LIST
64955: LIST
64956: LIST
64957: LIST
64958: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64959: LD_ADDR_VAR 0 55
64963: PUSH
64964: LD_INT 0
64966: PUSH
64967: LD_INT 0
64969: PUSH
64970: EMPTY
64971: LIST
64972: LIST
64973: PUSH
64974: LD_INT 0
64976: PUSH
64977: LD_INT 1
64979: NEG
64980: PUSH
64981: EMPTY
64982: LIST
64983: LIST
64984: PUSH
64985: LD_INT 1
64987: PUSH
64988: LD_INT 0
64990: PUSH
64991: EMPTY
64992: LIST
64993: LIST
64994: PUSH
64995: LD_INT 1
64997: PUSH
64998: LD_INT 1
65000: PUSH
65001: EMPTY
65002: LIST
65003: LIST
65004: PUSH
65005: LD_INT 0
65007: PUSH
65008: LD_INT 1
65010: PUSH
65011: EMPTY
65012: LIST
65013: LIST
65014: PUSH
65015: LD_INT 1
65017: NEG
65018: PUSH
65019: LD_INT 0
65021: PUSH
65022: EMPTY
65023: LIST
65024: LIST
65025: PUSH
65026: LD_INT 1
65028: NEG
65029: PUSH
65030: LD_INT 1
65032: NEG
65033: PUSH
65034: EMPTY
65035: LIST
65036: LIST
65037: PUSH
65038: LD_INT 1
65040: NEG
65041: PUSH
65042: LD_INT 2
65044: NEG
65045: PUSH
65046: EMPTY
65047: LIST
65048: LIST
65049: PUSH
65050: LD_INT 0
65052: PUSH
65053: LD_INT 2
65055: NEG
65056: PUSH
65057: EMPTY
65058: LIST
65059: LIST
65060: PUSH
65061: LD_INT 1
65063: PUSH
65064: LD_INT 1
65066: NEG
65067: PUSH
65068: EMPTY
65069: LIST
65070: LIST
65071: PUSH
65072: LD_INT 2
65074: PUSH
65075: LD_INT 0
65077: PUSH
65078: EMPTY
65079: LIST
65080: LIST
65081: PUSH
65082: LD_INT 2
65084: PUSH
65085: LD_INT 1
65087: PUSH
65088: EMPTY
65089: LIST
65090: LIST
65091: PUSH
65092: LD_INT 2
65094: PUSH
65095: LD_INT 2
65097: PUSH
65098: EMPTY
65099: LIST
65100: LIST
65101: PUSH
65102: LD_INT 1
65104: PUSH
65105: LD_INT 2
65107: PUSH
65108: EMPTY
65109: LIST
65110: LIST
65111: PUSH
65112: LD_INT 0
65114: PUSH
65115: LD_INT 2
65117: PUSH
65118: EMPTY
65119: LIST
65120: LIST
65121: PUSH
65122: LD_INT 1
65124: NEG
65125: PUSH
65126: LD_INT 1
65128: PUSH
65129: EMPTY
65130: LIST
65131: LIST
65132: PUSH
65133: LD_INT 2
65135: NEG
65136: PUSH
65137: LD_INT 0
65139: PUSH
65140: EMPTY
65141: LIST
65142: LIST
65143: PUSH
65144: LD_INT 2
65146: NEG
65147: PUSH
65148: LD_INT 1
65150: NEG
65151: PUSH
65152: EMPTY
65153: LIST
65154: LIST
65155: PUSH
65156: LD_INT 2
65158: NEG
65159: PUSH
65160: LD_INT 2
65162: NEG
65163: PUSH
65164: EMPTY
65165: LIST
65166: LIST
65167: PUSH
65168: EMPTY
65169: LIST
65170: LIST
65171: LIST
65172: LIST
65173: LIST
65174: LIST
65175: LIST
65176: LIST
65177: LIST
65178: LIST
65179: LIST
65180: LIST
65181: LIST
65182: LIST
65183: LIST
65184: LIST
65185: LIST
65186: LIST
65187: LIST
65188: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65189: LD_ADDR_VAR 0 56
65193: PUSH
65194: LD_INT 0
65196: PUSH
65197: LD_INT 0
65199: PUSH
65200: EMPTY
65201: LIST
65202: LIST
65203: PUSH
65204: LD_INT 0
65206: PUSH
65207: LD_INT 1
65209: NEG
65210: PUSH
65211: EMPTY
65212: LIST
65213: LIST
65214: PUSH
65215: LD_INT 1
65217: PUSH
65218: LD_INT 0
65220: PUSH
65221: EMPTY
65222: LIST
65223: LIST
65224: PUSH
65225: LD_INT 1
65227: PUSH
65228: LD_INT 1
65230: PUSH
65231: EMPTY
65232: LIST
65233: LIST
65234: PUSH
65235: LD_INT 0
65237: PUSH
65238: LD_INT 1
65240: PUSH
65241: EMPTY
65242: LIST
65243: LIST
65244: PUSH
65245: LD_INT 1
65247: NEG
65248: PUSH
65249: LD_INT 0
65251: PUSH
65252: EMPTY
65253: LIST
65254: LIST
65255: PUSH
65256: LD_INT 1
65258: NEG
65259: PUSH
65260: LD_INT 1
65262: NEG
65263: PUSH
65264: EMPTY
65265: LIST
65266: LIST
65267: PUSH
65268: LD_INT 1
65270: NEG
65271: PUSH
65272: LD_INT 2
65274: NEG
65275: PUSH
65276: EMPTY
65277: LIST
65278: LIST
65279: PUSH
65280: LD_INT 0
65282: PUSH
65283: LD_INT 2
65285: NEG
65286: PUSH
65287: EMPTY
65288: LIST
65289: LIST
65290: PUSH
65291: LD_INT 1
65293: PUSH
65294: LD_INT 1
65296: NEG
65297: PUSH
65298: EMPTY
65299: LIST
65300: LIST
65301: PUSH
65302: LD_INT 2
65304: PUSH
65305: LD_INT 0
65307: PUSH
65308: EMPTY
65309: LIST
65310: LIST
65311: PUSH
65312: LD_INT 2
65314: PUSH
65315: LD_INT 1
65317: PUSH
65318: EMPTY
65319: LIST
65320: LIST
65321: PUSH
65322: LD_INT 2
65324: PUSH
65325: LD_INT 2
65327: PUSH
65328: EMPTY
65329: LIST
65330: LIST
65331: PUSH
65332: LD_INT 1
65334: PUSH
65335: LD_INT 2
65337: PUSH
65338: EMPTY
65339: LIST
65340: LIST
65341: PUSH
65342: LD_INT 0
65344: PUSH
65345: LD_INT 2
65347: PUSH
65348: EMPTY
65349: LIST
65350: LIST
65351: PUSH
65352: LD_INT 1
65354: NEG
65355: PUSH
65356: LD_INT 1
65358: PUSH
65359: EMPTY
65360: LIST
65361: LIST
65362: PUSH
65363: LD_INT 2
65365: NEG
65366: PUSH
65367: LD_INT 0
65369: PUSH
65370: EMPTY
65371: LIST
65372: LIST
65373: PUSH
65374: LD_INT 2
65376: NEG
65377: PUSH
65378: LD_INT 1
65380: NEG
65381: PUSH
65382: EMPTY
65383: LIST
65384: LIST
65385: PUSH
65386: LD_INT 2
65388: NEG
65389: PUSH
65390: LD_INT 2
65392: NEG
65393: PUSH
65394: EMPTY
65395: LIST
65396: LIST
65397: PUSH
65398: EMPTY
65399: LIST
65400: LIST
65401: LIST
65402: LIST
65403: LIST
65404: LIST
65405: LIST
65406: LIST
65407: LIST
65408: LIST
65409: LIST
65410: LIST
65411: LIST
65412: LIST
65413: LIST
65414: LIST
65415: LIST
65416: LIST
65417: LIST
65418: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65419: LD_ADDR_VAR 0 57
65423: PUSH
65424: LD_INT 0
65426: PUSH
65427: LD_INT 0
65429: PUSH
65430: EMPTY
65431: LIST
65432: LIST
65433: PUSH
65434: LD_INT 0
65436: PUSH
65437: LD_INT 1
65439: NEG
65440: PUSH
65441: EMPTY
65442: LIST
65443: LIST
65444: PUSH
65445: LD_INT 1
65447: PUSH
65448: LD_INT 0
65450: PUSH
65451: EMPTY
65452: LIST
65453: LIST
65454: PUSH
65455: LD_INT 1
65457: PUSH
65458: LD_INT 1
65460: PUSH
65461: EMPTY
65462: LIST
65463: LIST
65464: PUSH
65465: LD_INT 0
65467: PUSH
65468: LD_INT 1
65470: PUSH
65471: EMPTY
65472: LIST
65473: LIST
65474: PUSH
65475: LD_INT 1
65477: NEG
65478: PUSH
65479: LD_INT 0
65481: PUSH
65482: EMPTY
65483: LIST
65484: LIST
65485: PUSH
65486: LD_INT 1
65488: NEG
65489: PUSH
65490: LD_INT 1
65492: NEG
65493: PUSH
65494: EMPTY
65495: LIST
65496: LIST
65497: PUSH
65498: LD_INT 1
65500: NEG
65501: PUSH
65502: LD_INT 2
65504: NEG
65505: PUSH
65506: EMPTY
65507: LIST
65508: LIST
65509: PUSH
65510: LD_INT 0
65512: PUSH
65513: LD_INT 2
65515: NEG
65516: PUSH
65517: EMPTY
65518: LIST
65519: LIST
65520: PUSH
65521: LD_INT 1
65523: PUSH
65524: LD_INT 1
65526: NEG
65527: PUSH
65528: EMPTY
65529: LIST
65530: LIST
65531: PUSH
65532: LD_INT 2
65534: PUSH
65535: LD_INT 0
65537: PUSH
65538: EMPTY
65539: LIST
65540: LIST
65541: PUSH
65542: LD_INT 2
65544: PUSH
65545: LD_INT 1
65547: PUSH
65548: EMPTY
65549: LIST
65550: LIST
65551: PUSH
65552: LD_INT 2
65554: PUSH
65555: LD_INT 2
65557: PUSH
65558: EMPTY
65559: LIST
65560: LIST
65561: PUSH
65562: LD_INT 1
65564: PUSH
65565: LD_INT 2
65567: PUSH
65568: EMPTY
65569: LIST
65570: LIST
65571: PUSH
65572: LD_INT 0
65574: PUSH
65575: LD_INT 2
65577: PUSH
65578: EMPTY
65579: LIST
65580: LIST
65581: PUSH
65582: LD_INT 1
65584: NEG
65585: PUSH
65586: LD_INT 1
65588: PUSH
65589: EMPTY
65590: LIST
65591: LIST
65592: PUSH
65593: LD_INT 2
65595: NEG
65596: PUSH
65597: LD_INT 0
65599: PUSH
65600: EMPTY
65601: LIST
65602: LIST
65603: PUSH
65604: LD_INT 2
65606: NEG
65607: PUSH
65608: LD_INT 1
65610: NEG
65611: PUSH
65612: EMPTY
65613: LIST
65614: LIST
65615: PUSH
65616: LD_INT 2
65618: NEG
65619: PUSH
65620: LD_INT 2
65622: NEG
65623: PUSH
65624: EMPTY
65625: LIST
65626: LIST
65627: PUSH
65628: EMPTY
65629: LIST
65630: LIST
65631: LIST
65632: LIST
65633: LIST
65634: LIST
65635: LIST
65636: LIST
65637: LIST
65638: LIST
65639: LIST
65640: LIST
65641: LIST
65642: LIST
65643: LIST
65644: LIST
65645: LIST
65646: LIST
65647: LIST
65648: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65649: LD_ADDR_VAR 0 58
65653: PUSH
65654: LD_INT 0
65656: PUSH
65657: LD_INT 0
65659: PUSH
65660: EMPTY
65661: LIST
65662: LIST
65663: PUSH
65664: LD_INT 0
65666: PUSH
65667: LD_INT 1
65669: NEG
65670: PUSH
65671: EMPTY
65672: LIST
65673: LIST
65674: PUSH
65675: LD_INT 1
65677: PUSH
65678: LD_INT 0
65680: PUSH
65681: EMPTY
65682: LIST
65683: LIST
65684: PUSH
65685: LD_INT 1
65687: PUSH
65688: LD_INT 1
65690: PUSH
65691: EMPTY
65692: LIST
65693: LIST
65694: PUSH
65695: LD_INT 0
65697: PUSH
65698: LD_INT 1
65700: PUSH
65701: EMPTY
65702: LIST
65703: LIST
65704: PUSH
65705: LD_INT 1
65707: NEG
65708: PUSH
65709: LD_INT 0
65711: PUSH
65712: EMPTY
65713: LIST
65714: LIST
65715: PUSH
65716: LD_INT 1
65718: NEG
65719: PUSH
65720: LD_INT 1
65722: NEG
65723: PUSH
65724: EMPTY
65725: LIST
65726: LIST
65727: PUSH
65728: LD_INT 1
65730: NEG
65731: PUSH
65732: LD_INT 2
65734: NEG
65735: PUSH
65736: EMPTY
65737: LIST
65738: LIST
65739: PUSH
65740: LD_INT 0
65742: PUSH
65743: LD_INT 2
65745: NEG
65746: PUSH
65747: EMPTY
65748: LIST
65749: LIST
65750: PUSH
65751: LD_INT 1
65753: PUSH
65754: LD_INT 1
65756: NEG
65757: PUSH
65758: EMPTY
65759: LIST
65760: LIST
65761: PUSH
65762: LD_INT 2
65764: PUSH
65765: LD_INT 0
65767: PUSH
65768: EMPTY
65769: LIST
65770: LIST
65771: PUSH
65772: LD_INT 2
65774: PUSH
65775: LD_INT 1
65777: PUSH
65778: EMPTY
65779: LIST
65780: LIST
65781: PUSH
65782: LD_INT 2
65784: PUSH
65785: LD_INT 2
65787: PUSH
65788: EMPTY
65789: LIST
65790: LIST
65791: PUSH
65792: LD_INT 1
65794: PUSH
65795: LD_INT 2
65797: PUSH
65798: EMPTY
65799: LIST
65800: LIST
65801: PUSH
65802: LD_INT 0
65804: PUSH
65805: LD_INT 2
65807: PUSH
65808: EMPTY
65809: LIST
65810: LIST
65811: PUSH
65812: LD_INT 1
65814: NEG
65815: PUSH
65816: LD_INT 1
65818: PUSH
65819: EMPTY
65820: LIST
65821: LIST
65822: PUSH
65823: LD_INT 2
65825: NEG
65826: PUSH
65827: LD_INT 0
65829: PUSH
65830: EMPTY
65831: LIST
65832: LIST
65833: PUSH
65834: LD_INT 2
65836: NEG
65837: PUSH
65838: LD_INT 1
65840: NEG
65841: PUSH
65842: EMPTY
65843: LIST
65844: LIST
65845: PUSH
65846: LD_INT 2
65848: NEG
65849: PUSH
65850: LD_INT 2
65852: NEG
65853: PUSH
65854: EMPTY
65855: LIST
65856: LIST
65857: PUSH
65858: EMPTY
65859: LIST
65860: LIST
65861: LIST
65862: LIST
65863: LIST
65864: LIST
65865: LIST
65866: LIST
65867: LIST
65868: LIST
65869: LIST
65870: LIST
65871: LIST
65872: LIST
65873: LIST
65874: LIST
65875: LIST
65876: LIST
65877: LIST
65878: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65879: LD_ADDR_VAR 0 59
65883: PUSH
65884: LD_INT 0
65886: PUSH
65887: LD_INT 0
65889: PUSH
65890: EMPTY
65891: LIST
65892: LIST
65893: PUSH
65894: LD_INT 0
65896: PUSH
65897: LD_INT 1
65899: NEG
65900: PUSH
65901: EMPTY
65902: LIST
65903: LIST
65904: PUSH
65905: LD_INT 1
65907: PUSH
65908: LD_INT 0
65910: PUSH
65911: EMPTY
65912: LIST
65913: LIST
65914: PUSH
65915: LD_INT 1
65917: PUSH
65918: LD_INT 1
65920: PUSH
65921: EMPTY
65922: LIST
65923: LIST
65924: PUSH
65925: LD_INT 0
65927: PUSH
65928: LD_INT 1
65930: PUSH
65931: EMPTY
65932: LIST
65933: LIST
65934: PUSH
65935: LD_INT 1
65937: NEG
65938: PUSH
65939: LD_INT 0
65941: PUSH
65942: EMPTY
65943: LIST
65944: LIST
65945: PUSH
65946: LD_INT 1
65948: NEG
65949: PUSH
65950: LD_INT 1
65952: NEG
65953: PUSH
65954: EMPTY
65955: LIST
65956: LIST
65957: PUSH
65958: EMPTY
65959: LIST
65960: LIST
65961: LIST
65962: LIST
65963: LIST
65964: LIST
65965: LIST
65966: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65967: LD_ADDR_VAR 0 60
65971: PUSH
65972: LD_INT 0
65974: PUSH
65975: LD_INT 0
65977: PUSH
65978: EMPTY
65979: LIST
65980: LIST
65981: PUSH
65982: LD_INT 0
65984: PUSH
65985: LD_INT 1
65987: NEG
65988: PUSH
65989: EMPTY
65990: LIST
65991: LIST
65992: PUSH
65993: LD_INT 1
65995: PUSH
65996: LD_INT 0
65998: PUSH
65999: EMPTY
66000: LIST
66001: LIST
66002: PUSH
66003: LD_INT 1
66005: PUSH
66006: LD_INT 1
66008: PUSH
66009: EMPTY
66010: LIST
66011: LIST
66012: PUSH
66013: LD_INT 0
66015: PUSH
66016: LD_INT 1
66018: PUSH
66019: EMPTY
66020: LIST
66021: LIST
66022: PUSH
66023: LD_INT 1
66025: NEG
66026: PUSH
66027: LD_INT 0
66029: PUSH
66030: EMPTY
66031: LIST
66032: LIST
66033: PUSH
66034: LD_INT 1
66036: NEG
66037: PUSH
66038: LD_INT 1
66040: NEG
66041: PUSH
66042: EMPTY
66043: LIST
66044: LIST
66045: PUSH
66046: EMPTY
66047: LIST
66048: LIST
66049: LIST
66050: LIST
66051: LIST
66052: LIST
66053: LIST
66054: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66055: LD_ADDR_VAR 0 61
66059: PUSH
66060: LD_INT 0
66062: PUSH
66063: LD_INT 0
66065: PUSH
66066: EMPTY
66067: LIST
66068: LIST
66069: PUSH
66070: LD_INT 0
66072: PUSH
66073: LD_INT 1
66075: NEG
66076: PUSH
66077: EMPTY
66078: LIST
66079: LIST
66080: PUSH
66081: LD_INT 1
66083: PUSH
66084: LD_INT 0
66086: PUSH
66087: EMPTY
66088: LIST
66089: LIST
66090: PUSH
66091: LD_INT 1
66093: PUSH
66094: LD_INT 1
66096: PUSH
66097: EMPTY
66098: LIST
66099: LIST
66100: PUSH
66101: LD_INT 0
66103: PUSH
66104: LD_INT 1
66106: PUSH
66107: EMPTY
66108: LIST
66109: LIST
66110: PUSH
66111: LD_INT 1
66113: NEG
66114: PUSH
66115: LD_INT 0
66117: PUSH
66118: EMPTY
66119: LIST
66120: LIST
66121: PUSH
66122: LD_INT 1
66124: NEG
66125: PUSH
66126: LD_INT 1
66128: NEG
66129: PUSH
66130: EMPTY
66131: LIST
66132: LIST
66133: PUSH
66134: EMPTY
66135: LIST
66136: LIST
66137: LIST
66138: LIST
66139: LIST
66140: LIST
66141: LIST
66142: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66143: LD_ADDR_VAR 0 62
66147: PUSH
66148: LD_INT 0
66150: PUSH
66151: LD_INT 0
66153: PUSH
66154: EMPTY
66155: LIST
66156: LIST
66157: PUSH
66158: LD_INT 0
66160: PUSH
66161: LD_INT 1
66163: NEG
66164: PUSH
66165: EMPTY
66166: LIST
66167: LIST
66168: PUSH
66169: LD_INT 1
66171: PUSH
66172: LD_INT 0
66174: PUSH
66175: EMPTY
66176: LIST
66177: LIST
66178: PUSH
66179: LD_INT 1
66181: PUSH
66182: LD_INT 1
66184: PUSH
66185: EMPTY
66186: LIST
66187: LIST
66188: PUSH
66189: LD_INT 0
66191: PUSH
66192: LD_INT 1
66194: PUSH
66195: EMPTY
66196: LIST
66197: LIST
66198: PUSH
66199: LD_INT 1
66201: NEG
66202: PUSH
66203: LD_INT 0
66205: PUSH
66206: EMPTY
66207: LIST
66208: LIST
66209: PUSH
66210: LD_INT 1
66212: NEG
66213: PUSH
66214: LD_INT 1
66216: NEG
66217: PUSH
66218: EMPTY
66219: LIST
66220: LIST
66221: PUSH
66222: EMPTY
66223: LIST
66224: LIST
66225: LIST
66226: LIST
66227: LIST
66228: LIST
66229: LIST
66230: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66231: LD_ADDR_VAR 0 63
66235: PUSH
66236: LD_INT 0
66238: PUSH
66239: LD_INT 0
66241: PUSH
66242: EMPTY
66243: LIST
66244: LIST
66245: PUSH
66246: LD_INT 0
66248: PUSH
66249: LD_INT 1
66251: NEG
66252: PUSH
66253: EMPTY
66254: LIST
66255: LIST
66256: PUSH
66257: LD_INT 1
66259: PUSH
66260: LD_INT 0
66262: PUSH
66263: EMPTY
66264: LIST
66265: LIST
66266: PUSH
66267: LD_INT 1
66269: PUSH
66270: LD_INT 1
66272: PUSH
66273: EMPTY
66274: LIST
66275: LIST
66276: PUSH
66277: LD_INT 0
66279: PUSH
66280: LD_INT 1
66282: PUSH
66283: EMPTY
66284: LIST
66285: LIST
66286: PUSH
66287: LD_INT 1
66289: NEG
66290: PUSH
66291: LD_INT 0
66293: PUSH
66294: EMPTY
66295: LIST
66296: LIST
66297: PUSH
66298: LD_INT 1
66300: NEG
66301: PUSH
66302: LD_INT 1
66304: NEG
66305: PUSH
66306: EMPTY
66307: LIST
66308: LIST
66309: PUSH
66310: EMPTY
66311: LIST
66312: LIST
66313: LIST
66314: LIST
66315: LIST
66316: LIST
66317: LIST
66318: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66319: LD_ADDR_VAR 0 64
66323: PUSH
66324: LD_INT 0
66326: PUSH
66327: LD_INT 0
66329: PUSH
66330: EMPTY
66331: LIST
66332: LIST
66333: PUSH
66334: LD_INT 0
66336: PUSH
66337: LD_INT 1
66339: NEG
66340: PUSH
66341: EMPTY
66342: LIST
66343: LIST
66344: PUSH
66345: LD_INT 1
66347: PUSH
66348: LD_INT 0
66350: PUSH
66351: EMPTY
66352: LIST
66353: LIST
66354: PUSH
66355: LD_INT 1
66357: PUSH
66358: LD_INT 1
66360: PUSH
66361: EMPTY
66362: LIST
66363: LIST
66364: PUSH
66365: LD_INT 0
66367: PUSH
66368: LD_INT 1
66370: PUSH
66371: EMPTY
66372: LIST
66373: LIST
66374: PUSH
66375: LD_INT 1
66377: NEG
66378: PUSH
66379: LD_INT 0
66381: PUSH
66382: EMPTY
66383: LIST
66384: LIST
66385: PUSH
66386: LD_INT 1
66388: NEG
66389: PUSH
66390: LD_INT 1
66392: NEG
66393: PUSH
66394: EMPTY
66395: LIST
66396: LIST
66397: PUSH
66398: EMPTY
66399: LIST
66400: LIST
66401: LIST
66402: LIST
66403: LIST
66404: LIST
66405: LIST
66406: ST_TO_ADDR
// end ; 1 :
66407: GO 72304
66409: LD_INT 1
66411: DOUBLE
66412: EQUAL
66413: IFTRUE 66417
66415: GO 69040
66417: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66418: LD_ADDR_VAR 0 11
66422: PUSH
66423: LD_INT 1
66425: NEG
66426: PUSH
66427: LD_INT 3
66429: NEG
66430: PUSH
66431: EMPTY
66432: LIST
66433: LIST
66434: PUSH
66435: LD_INT 0
66437: PUSH
66438: LD_INT 3
66440: NEG
66441: PUSH
66442: EMPTY
66443: LIST
66444: LIST
66445: PUSH
66446: LD_INT 1
66448: PUSH
66449: LD_INT 2
66451: NEG
66452: PUSH
66453: EMPTY
66454: LIST
66455: LIST
66456: PUSH
66457: EMPTY
66458: LIST
66459: LIST
66460: LIST
66461: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66462: LD_ADDR_VAR 0 12
66466: PUSH
66467: LD_INT 2
66469: PUSH
66470: LD_INT 1
66472: NEG
66473: PUSH
66474: EMPTY
66475: LIST
66476: LIST
66477: PUSH
66478: LD_INT 3
66480: PUSH
66481: LD_INT 0
66483: PUSH
66484: EMPTY
66485: LIST
66486: LIST
66487: PUSH
66488: LD_INT 3
66490: PUSH
66491: LD_INT 1
66493: PUSH
66494: EMPTY
66495: LIST
66496: LIST
66497: PUSH
66498: EMPTY
66499: LIST
66500: LIST
66501: LIST
66502: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66503: LD_ADDR_VAR 0 13
66507: PUSH
66508: LD_INT 3
66510: PUSH
66511: LD_INT 2
66513: PUSH
66514: EMPTY
66515: LIST
66516: LIST
66517: PUSH
66518: LD_INT 3
66520: PUSH
66521: LD_INT 3
66523: PUSH
66524: EMPTY
66525: LIST
66526: LIST
66527: PUSH
66528: LD_INT 2
66530: PUSH
66531: LD_INT 3
66533: PUSH
66534: EMPTY
66535: LIST
66536: LIST
66537: PUSH
66538: EMPTY
66539: LIST
66540: LIST
66541: LIST
66542: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66543: LD_ADDR_VAR 0 14
66547: PUSH
66548: LD_INT 1
66550: PUSH
66551: LD_INT 3
66553: PUSH
66554: EMPTY
66555: LIST
66556: LIST
66557: PUSH
66558: LD_INT 0
66560: PUSH
66561: LD_INT 3
66563: PUSH
66564: EMPTY
66565: LIST
66566: LIST
66567: PUSH
66568: LD_INT 1
66570: NEG
66571: PUSH
66572: LD_INT 2
66574: PUSH
66575: EMPTY
66576: LIST
66577: LIST
66578: PUSH
66579: EMPTY
66580: LIST
66581: LIST
66582: LIST
66583: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66584: LD_ADDR_VAR 0 15
66588: PUSH
66589: LD_INT 2
66591: NEG
66592: PUSH
66593: LD_INT 1
66595: PUSH
66596: EMPTY
66597: LIST
66598: LIST
66599: PUSH
66600: LD_INT 3
66602: NEG
66603: PUSH
66604: LD_INT 0
66606: PUSH
66607: EMPTY
66608: LIST
66609: LIST
66610: PUSH
66611: LD_INT 3
66613: NEG
66614: PUSH
66615: LD_INT 1
66617: NEG
66618: PUSH
66619: EMPTY
66620: LIST
66621: LIST
66622: PUSH
66623: EMPTY
66624: LIST
66625: LIST
66626: LIST
66627: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66628: LD_ADDR_VAR 0 16
66632: PUSH
66633: LD_INT 2
66635: NEG
66636: PUSH
66637: LD_INT 3
66639: NEG
66640: PUSH
66641: EMPTY
66642: LIST
66643: LIST
66644: PUSH
66645: LD_INT 3
66647: NEG
66648: PUSH
66649: LD_INT 2
66651: NEG
66652: PUSH
66653: EMPTY
66654: LIST
66655: LIST
66656: PUSH
66657: LD_INT 3
66659: NEG
66660: PUSH
66661: LD_INT 3
66663: NEG
66664: PUSH
66665: EMPTY
66666: LIST
66667: LIST
66668: PUSH
66669: EMPTY
66670: LIST
66671: LIST
66672: LIST
66673: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66674: LD_ADDR_VAR 0 17
66678: PUSH
66679: LD_INT 1
66681: NEG
66682: PUSH
66683: LD_INT 3
66685: NEG
66686: PUSH
66687: EMPTY
66688: LIST
66689: LIST
66690: PUSH
66691: LD_INT 0
66693: PUSH
66694: LD_INT 3
66696: NEG
66697: PUSH
66698: EMPTY
66699: LIST
66700: LIST
66701: PUSH
66702: LD_INT 1
66704: PUSH
66705: LD_INT 2
66707: NEG
66708: PUSH
66709: EMPTY
66710: LIST
66711: LIST
66712: PUSH
66713: EMPTY
66714: LIST
66715: LIST
66716: LIST
66717: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66718: LD_ADDR_VAR 0 18
66722: PUSH
66723: LD_INT 2
66725: PUSH
66726: LD_INT 1
66728: NEG
66729: PUSH
66730: EMPTY
66731: LIST
66732: LIST
66733: PUSH
66734: LD_INT 3
66736: PUSH
66737: LD_INT 0
66739: PUSH
66740: EMPTY
66741: LIST
66742: LIST
66743: PUSH
66744: LD_INT 3
66746: PUSH
66747: LD_INT 1
66749: PUSH
66750: EMPTY
66751: LIST
66752: LIST
66753: PUSH
66754: EMPTY
66755: LIST
66756: LIST
66757: LIST
66758: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66759: LD_ADDR_VAR 0 19
66763: PUSH
66764: LD_INT 3
66766: PUSH
66767: LD_INT 2
66769: PUSH
66770: EMPTY
66771: LIST
66772: LIST
66773: PUSH
66774: LD_INT 3
66776: PUSH
66777: LD_INT 3
66779: PUSH
66780: EMPTY
66781: LIST
66782: LIST
66783: PUSH
66784: LD_INT 2
66786: PUSH
66787: LD_INT 3
66789: PUSH
66790: EMPTY
66791: LIST
66792: LIST
66793: PUSH
66794: EMPTY
66795: LIST
66796: LIST
66797: LIST
66798: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66799: LD_ADDR_VAR 0 20
66803: PUSH
66804: LD_INT 1
66806: PUSH
66807: LD_INT 3
66809: PUSH
66810: EMPTY
66811: LIST
66812: LIST
66813: PUSH
66814: LD_INT 0
66816: PUSH
66817: LD_INT 3
66819: PUSH
66820: EMPTY
66821: LIST
66822: LIST
66823: PUSH
66824: LD_INT 1
66826: NEG
66827: PUSH
66828: LD_INT 2
66830: PUSH
66831: EMPTY
66832: LIST
66833: LIST
66834: PUSH
66835: EMPTY
66836: LIST
66837: LIST
66838: LIST
66839: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66840: LD_ADDR_VAR 0 21
66844: PUSH
66845: LD_INT 2
66847: NEG
66848: PUSH
66849: LD_INT 1
66851: PUSH
66852: EMPTY
66853: LIST
66854: LIST
66855: PUSH
66856: LD_INT 3
66858: NEG
66859: PUSH
66860: LD_INT 0
66862: PUSH
66863: EMPTY
66864: LIST
66865: LIST
66866: PUSH
66867: LD_INT 3
66869: NEG
66870: PUSH
66871: LD_INT 1
66873: NEG
66874: PUSH
66875: EMPTY
66876: LIST
66877: LIST
66878: PUSH
66879: EMPTY
66880: LIST
66881: LIST
66882: LIST
66883: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66884: LD_ADDR_VAR 0 22
66888: PUSH
66889: LD_INT 2
66891: NEG
66892: PUSH
66893: LD_INT 3
66895: NEG
66896: PUSH
66897: EMPTY
66898: LIST
66899: LIST
66900: PUSH
66901: LD_INT 3
66903: NEG
66904: PUSH
66905: LD_INT 2
66907: NEG
66908: PUSH
66909: EMPTY
66910: LIST
66911: LIST
66912: PUSH
66913: LD_INT 3
66915: NEG
66916: PUSH
66917: LD_INT 3
66919: NEG
66920: PUSH
66921: EMPTY
66922: LIST
66923: LIST
66924: PUSH
66925: EMPTY
66926: LIST
66927: LIST
66928: LIST
66929: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
66930: LD_ADDR_VAR 0 23
66934: PUSH
66935: LD_INT 0
66937: PUSH
66938: LD_INT 3
66940: NEG
66941: PUSH
66942: EMPTY
66943: LIST
66944: LIST
66945: PUSH
66946: LD_INT 1
66948: NEG
66949: PUSH
66950: LD_INT 4
66952: NEG
66953: PUSH
66954: EMPTY
66955: LIST
66956: LIST
66957: PUSH
66958: LD_INT 1
66960: PUSH
66961: LD_INT 3
66963: NEG
66964: PUSH
66965: EMPTY
66966: LIST
66967: LIST
66968: PUSH
66969: EMPTY
66970: LIST
66971: LIST
66972: LIST
66973: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
66974: LD_ADDR_VAR 0 24
66978: PUSH
66979: LD_INT 3
66981: PUSH
66982: LD_INT 0
66984: PUSH
66985: EMPTY
66986: LIST
66987: LIST
66988: PUSH
66989: LD_INT 3
66991: PUSH
66992: LD_INT 1
66994: NEG
66995: PUSH
66996: EMPTY
66997: LIST
66998: LIST
66999: PUSH
67000: LD_INT 4
67002: PUSH
67003: LD_INT 1
67005: PUSH
67006: EMPTY
67007: LIST
67008: LIST
67009: PUSH
67010: EMPTY
67011: LIST
67012: LIST
67013: LIST
67014: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
67015: LD_ADDR_VAR 0 25
67019: PUSH
67020: LD_INT 3
67022: PUSH
67023: LD_INT 3
67025: PUSH
67026: EMPTY
67027: LIST
67028: LIST
67029: PUSH
67030: LD_INT 4
67032: PUSH
67033: LD_INT 3
67035: PUSH
67036: EMPTY
67037: LIST
67038: LIST
67039: PUSH
67040: LD_INT 3
67042: PUSH
67043: LD_INT 4
67045: PUSH
67046: EMPTY
67047: LIST
67048: LIST
67049: PUSH
67050: EMPTY
67051: LIST
67052: LIST
67053: LIST
67054: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
67055: LD_ADDR_VAR 0 26
67059: PUSH
67060: LD_INT 0
67062: PUSH
67063: LD_INT 3
67065: PUSH
67066: EMPTY
67067: LIST
67068: LIST
67069: PUSH
67070: LD_INT 1
67072: PUSH
67073: LD_INT 4
67075: PUSH
67076: EMPTY
67077: LIST
67078: LIST
67079: PUSH
67080: LD_INT 1
67082: NEG
67083: PUSH
67084: LD_INT 3
67086: PUSH
67087: EMPTY
67088: LIST
67089: LIST
67090: PUSH
67091: EMPTY
67092: LIST
67093: LIST
67094: LIST
67095: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
67096: LD_ADDR_VAR 0 27
67100: PUSH
67101: LD_INT 3
67103: NEG
67104: PUSH
67105: LD_INT 0
67107: PUSH
67108: EMPTY
67109: LIST
67110: LIST
67111: PUSH
67112: LD_INT 3
67114: NEG
67115: PUSH
67116: LD_INT 1
67118: PUSH
67119: EMPTY
67120: LIST
67121: LIST
67122: PUSH
67123: LD_INT 4
67125: NEG
67126: PUSH
67127: LD_INT 1
67129: NEG
67130: PUSH
67131: EMPTY
67132: LIST
67133: LIST
67134: PUSH
67135: EMPTY
67136: LIST
67137: LIST
67138: LIST
67139: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
67140: LD_ADDR_VAR 0 28
67144: PUSH
67145: LD_INT 3
67147: NEG
67148: PUSH
67149: LD_INT 3
67151: NEG
67152: PUSH
67153: EMPTY
67154: LIST
67155: LIST
67156: PUSH
67157: LD_INT 3
67159: NEG
67160: PUSH
67161: LD_INT 4
67163: NEG
67164: PUSH
67165: EMPTY
67166: LIST
67167: LIST
67168: PUSH
67169: LD_INT 4
67171: NEG
67172: PUSH
67173: LD_INT 3
67175: NEG
67176: PUSH
67177: EMPTY
67178: LIST
67179: LIST
67180: PUSH
67181: EMPTY
67182: LIST
67183: LIST
67184: LIST
67185: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
67186: LD_ADDR_VAR 0 29
67190: PUSH
67191: LD_INT 1
67193: NEG
67194: PUSH
67195: LD_INT 3
67197: NEG
67198: PUSH
67199: EMPTY
67200: LIST
67201: LIST
67202: PUSH
67203: LD_INT 0
67205: PUSH
67206: LD_INT 3
67208: NEG
67209: PUSH
67210: EMPTY
67211: LIST
67212: LIST
67213: PUSH
67214: LD_INT 1
67216: PUSH
67217: LD_INT 2
67219: NEG
67220: PUSH
67221: EMPTY
67222: LIST
67223: LIST
67224: PUSH
67225: LD_INT 1
67227: NEG
67228: PUSH
67229: LD_INT 4
67231: NEG
67232: PUSH
67233: EMPTY
67234: LIST
67235: LIST
67236: PUSH
67237: LD_INT 0
67239: PUSH
67240: LD_INT 4
67242: NEG
67243: PUSH
67244: EMPTY
67245: LIST
67246: LIST
67247: PUSH
67248: LD_INT 1
67250: PUSH
67251: LD_INT 3
67253: NEG
67254: PUSH
67255: EMPTY
67256: LIST
67257: LIST
67258: PUSH
67259: LD_INT 1
67261: NEG
67262: PUSH
67263: LD_INT 5
67265: NEG
67266: PUSH
67267: EMPTY
67268: LIST
67269: LIST
67270: PUSH
67271: LD_INT 0
67273: PUSH
67274: LD_INT 5
67276: NEG
67277: PUSH
67278: EMPTY
67279: LIST
67280: LIST
67281: PUSH
67282: LD_INT 1
67284: PUSH
67285: LD_INT 4
67287: NEG
67288: PUSH
67289: EMPTY
67290: LIST
67291: LIST
67292: PUSH
67293: LD_INT 1
67295: NEG
67296: PUSH
67297: LD_INT 6
67299: NEG
67300: PUSH
67301: EMPTY
67302: LIST
67303: LIST
67304: PUSH
67305: LD_INT 0
67307: PUSH
67308: LD_INT 6
67310: NEG
67311: PUSH
67312: EMPTY
67313: LIST
67314: LIST
67315: PUSH
67316: LD_INT 1
67318: PUSH
67319: LD_INT 5
67321: NEG
67322: PUSH
67323: EMPTY
67324: LIST
67325: LIST
67326: PUSH
67327: EMPTY
67328: LIST
67329: LIST
67330: LIST
67331: LIST
67332: LIST
67333: LIST
67334: LIST
67335: LIST
67336: LIST
67337: LIST
67338: LIST
67339: LIST
67340: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
67341: LD_ADDR_VAR 0 30
67345: PUSH
67346: LD_INT 2
67348: PUSH
67349: LD_INT 1
67351: NEG
67352: PUSH
67353: EMPTY
67354: LIST
67355: LIST
67356: PUSH
67357: LD_INT 3
67359: PUSH
67360: LD_INT 0
67362: PUSH
67363: EMPTY
67364: LIST
67365: LIST
67366: PUSH
67367: LD_INT 3
67369: PUSH
67370: LD_INT 1
67372: PUSH
67373: EMPTY
67374: LIST
67375: LIST
67376: PUSH
67377: LD_INT 3
67379: PUSH
67380: LD_INT 1
67382: NEG
67383: PUSH
67384: EMPTY
67385: LIST
67386: LIST
67387: PUSH
67388: LD_INT 4
67390: PUSH
67391: LD_INT 0
67393: PUSH
67394: EMPTY
67395: LIST
67396: LIST
67397: PUSH
67398: LD_INT 4
67400: PUSH
67401: LD_INT 1
67403: PUSH
67404: EMPTY
67405: LIST
67406: LIST
67407: PUSH
67408: LD_INT 4
67410: PUSH
67411: LD_INT 1
67413: NEG
67414: PUSH
67415: EMPTY
67416: LIST
67417: LIST
67418: PUSH
67419: LD_INT 5
67421: PUSH
67422: LD_INT 0
67424: PUSH
67425: EMPTY
67426: LIST
67427: LIST
67428: PUSH
67429: LD_INT 5
67431: PUSH
67432: LD_INT 1
67434: PUSH
67435: EMPTY
67436: LIST
67437: LIST
67438: PUSH
67439: LD_INT 5
67441: PUSH
67442: LD_INT 1
67444: NEG
67445: PUSH
67446: EMPTY
67447: LIST
67448: LIST
67449: PUSH
67450: LD_INT 6
67452: PUSH
67453: LD_INT 0
67455: PUSH
67456: EMPTY
67457: LIST
67458: LIST
67459: PUSH
67460: LD_INT 6
67462: PUSH
67463: LD_INT 1
67465: PUSH
67466: EMPTY
67467: LIST
67468: LIST
67469: PUSH
67470: EMPTY
67471: LIST
67472: LIST
67473: LIST
67474: LIST
67475: LIST
67476: LIST
67477: LIST
67478: LIST
67479: LIST
67480: LIST
67481: LIST
67482: LIST
67483: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
67484: LD_ADDR_VAR 0 31
67488: PUSH
67489: LD_INT 3
67491: PUSH
67492: LD_INT 2
67494: PUSH
67495: EMPTY
67496: LIST
67497: LIST
67498: PUSH
67499: LD_INT 3
67501: PUSH
67502: LD_INT 3
67504: PUSH
67505: EMPTY
67506: LIST
67507: LIST
67508: PUSH
67509: LD_INT 2
67511: PUSH
67512: LD_INT 3
67514: PUSH
67515: EMPTY
67516: LIST
67517: LIST
67518: PUSH
67519: LD_INT 4
67521: PUSH
67522: LD_INT 3
67524: PUSH
67525: EMPTY
67526: LIST
67527: LIST
67528: PUSH
67529: LD_INT 4
67531: PUSH
67532: LD_INT 4
67534: PUSH
67535: EMPTY
67536: LIST
67537: LIST
67538: PUSH
67539: LD_INT 3
67541: PUSH
67542: LD_INT 4
67544: PUSH
67545: EMPTY
67546: LIST
67547: LIST
67548: PUSH
67549: LD_INT 5
67551: PUSH
67552: LD_INT 4
67554: PUSH
67555: EMPTY
67556: LIST
67557: LIST
67558: PUSH
67559: LD_INT 5
67561: PUSH
67562: LD_INT 5
67564: PUSH
67565: EMPTY
67566: LIST
67567: LIST
67568: PUSH
67569: LD_INT 4
67571: PUSH
67572: LD_INT 5
67574: PUSH
67575: EMPTY
67576: LIST
67577: LIST
67578: PUSH
67579: LD_INT 6
67581: PUSH
67582: LD_INT 5
67584: PUSH
67585: EMPTY
67586: LIST
67587: LIST
67588: PUSH
67589: LD_INT 6
67591: PUSH
67592: LD_INT 6
67594: PUSH
67595: EMPTY
67596: LIST
67597: LIST
67598: PUSH
67599: LD_INT 5
67601: PUSH
67602: LD_INT 6
67604: PUSH
67605: EMPTY
67606: LIST
67607: LIST
67608: PUSH
67609: EMPTY
67610: LIST
67611: LIST
67612: LIST
67613: LIST
67614: LIST
67615: LIST
67616: LIST
67617: LIST
67618: LIST
67619: LIST
67620: LIST
67621: LIST
67622: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
67623: LD_ADDR_VAR 0 32
67627: PUSH
67628: LD_INT 1
67630: PUSH
67631: LD_INT 3
67633: PUSH
67634: EMPTY
67635: LIST
67636: LIST
67637: PUSH
67638: LD_INT 0
67640: PUSH
67641: LD_INT 3
67643: PUSH
67644: EMPTY
67645: LIST
67646: LIST
67647: PUSH
67648: LD_INT 1
67650: NEG
67651: PUSH
67652: LD_INT 2
67654: PUSH
67655: EMPTY
67656: LIST
67657: LIST
67658: PUSH
67659: LD_INT 1
67661: PUSH
67662: LD_INT 4
67664: PUSH
67665: EMPTY
67666: LIST
67667: LIST
67668: PUSH
67669: LD_INT 0
67671: PUSH
67672: LD_INT 4
67674: PUSH
67675: EMPTY
67676: LIST
67677: LIST
67678: PUSH
67679: LD_INT 1
67681: NEG
67682: PUSH
67683: LD_INT 3
67685: PUSH
67686: EMPTY
67687: LIST
67688: LIST
67689: PUSH
67690: LD_INT 1
67692: PUSH
67693: LD_INT 5
67695: PUSH
67696: EMPTY
67697: LIST
67698: LIST
67699: PUSH
67700: LD_INT 0
67702: PUSH
67703: LD_INT 5
67705: PUSH
67706: EMPTY
67707: LIST
67708: LIST
67709: PUSH
67710: LD_INT 1
67712: NEG
67713: PUSH
67714: LD_INT 4
67716: PUSH
67717: EMPTY
67718: LIST
67719: LIST
67720: PUSH
67721: LD_INT 1
67723: PUSH
67724: LD_INT 6
67726: PUSH
67727: EMPTY
67728: LIST
67729: LIST
67730: PUSH
67731: LD_INT 0
67733: PUSH
67734: LD_INT 6
67736: PUSH
67737: EMPTY
67738: LIST
67739: LIST
67740: PUSH
67741: LD_INT 1
67743: NEG
67744: PUSH
67745: LD_INT 5
67747: PUSH
67748: EMPTY
67749: LIST
67750: LIST
67751: PUSH
67752: EMPTY
67753: LIST
67754: LIST
67755: LIST
67756: LIST
67757: LIST
67758: LIST
67759: LIST
67760: LIST
67761: LIST
67762: LIST
67763: LIST
67764: LIST
67765: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
67766: LD_ADDR_VAR 0 33
67770: PUSH
67771: LD_INT 2
67773: NEG
67774: PUSH
67775: LD_INT 1
67777: PUSH
67778: EMPTY
67779: LIST
67780: LIST
67781: PUSH
67782: LD_INT 3
67784: NEG
67785: PUSH
67786: LD_INT 0
67788: PUSH
67789: EMPTY
67790: LIST
67791: LIST
67792: PUSH
67793: LD_INT 3
67795: NEG
67796: PUSH
67797: LD_INT 1
67799: NEG
67800: PUSH
67801: EMPTY
67802: LIST
67803: LIST
67804: PUSH
67805: LD_INT 3
67807: NEG
67808: PUSH
67809: LD_INT 1
67811: PUSH
67812: EMPTY
67813: LIST
67814: LIST
67815: PUSH
67816: LD_INT 4
67818: NEG
67819: PUSH
67820: LD_INT 0
67822: PUSH
67823: EMPTY
67824: LIST
67825: LIST
67826: PUSH
67827: LD_INT 4
67829: NEG
67830: PUSH
67831: LD_INT 1
67833: NEG
67834: PUSH
67835: EMPTY
67836: LIST
67837: LIST
67838: PUSH
67839: LD_INT 4
67841: NEG
67842: PUSH
67843: LD_INT 1
67845: PUSH
67846: EMPTY
67847: LIST
67848: LIST
67849: PUSH
67850: LD_INT 5
67852: NEG
67853: PUSH
67854: LD_INT 0
67856: PUSH
67857: EMPTY
67858: LIST
67859: LIST
67860: PUSH
67861: LD_INT 5
67863: NEG
67864: PUSH
67865: LD_INT 1
67867: NEG
67868: PUSH
67869: EMPTY
67870: LIST
67871: LIST
67872: PUSH
67873: LD_INT 5
67875: NEG
67876: PUSH
67877: LD_INT 1
67879: PUSH
67880: EMPTY
67881: LIST
67882: LIST
67883: PUSH
67884: LD_INT 6
67886: NEG
67887: PUSH
67888: LD_INT 0
67890: PUSH
67891: EMPTY
67892: LIST
67893: LIST
67894: PUSH
67895: LD_INT 6
67897: NEG
67898: PUSH
67899: LD_INT 1
67901: NEG
67902: PUSH
67903: EMPTY
67904: LIST
67905: LIST
67906: PUSH
67907: EMPTY
67908: LIST
67909: LIST
67910: LIST
67911: LIST
67912: LIST
67913: LIST
67914: LIST
67915: LIST
67916: LIST
67917: LIST
67918: LIST
67919: LIST
67920: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
67921: LD_ADDR_VAR 0 34
67925: PUSH
67926: LD_INT 2
67928: NEG
67929: PUSH
67930: LD_INT 3
67932: NEG
67933: PUSH
67934: EMPTY
67935: LIST
67936: LIST
67937: PUSH
67938: LD_INT 3
67940: NEG
67941: PUSH
67942: LD_INT 2
67944: NEG
67945: PUSH
67946: EMPTY
67947: LIST
67948: LIST
67949: PUSH
67950: LD_INT 3
67952: NEG
67953: PUSH
67954: LD_INT 3
67956: NEG
67957: PUSH
67958: EMPTY
67959: LIST
67960: LIST
67961: PUSH
67962: LD_INT 3
67964: NEG
67965: PUSH
67966: LD_INT 4
67968: NEG
67969: PUSH
67970: EMPTY
67971: LIST
67972: LIST
67973: PUSH
67974: LD_INT 4
67976: NEG
67977: PUSH
67978: LD_INT 3
67980: NEG
67981: PUSH
67982: EMPTY
67983: LIST
67984: LIST
67985: PUSH
67986: LD_INT 4
67988: NEG
67989: PUSH
67990: LD_INT 4
67992: NEG
67993: PUSH
67994: EMPTY
67995: LIST
67996: LIST
67997: PUSH
67998: LD_INT 4
68000: NEG
68001: PUSH
68002: LD_INT 5
68004: NEG
68005: PUSH
68006: EMPTY
68007: LIST
68008: LIST
68009: PUSH
68010: LD_INT 5
68012: NEG
68013: PUSH
68014: LD_INT 4
68016: NEG
68017: PUSH
68018: EMPTY
68019: LIST
68020: LIST
68021: PUSH
68022: LD_INT 5
68024: NEG
68025: PUSH
68026: LD_INT 5
68028: NEG
68029: PUSH
68030: EMPTY
68031: LIST
68032: LIST
68033: PUSH
68034: LD_INT 5
68036: NEG
68037: PUSH
68038: LD_INT 6
68040: NEG
68041: PUSH
68042: EMPTY
68043: LIST
68044: LIST
68045: PUSH
68046: LD_INT 6
68048: NEG
68049: PUSH
68050: LD_INT 5
68052: NEG
68053: PUSH
68054: EMPTY
68055: LIST
68056: LIST
68057: PUSH
68058: LD_INT 6
68060: NEG
68061: PUSH
68062: LD_INT 6
68064: NEG
68065: PUSH
68066: EMPTY
68067: LIST
68068: LIST
68069: PUSH
68070: EMPTY
68071: LIST
68072: LIST
68073: LIST
68074: LIST
68075: LIST
68076: LIST
68077: LIST
68078: LIST
68079: LIST
68080: LIST
68081: LIST
68082: LIST
68083: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
68084: LD_ADDR_VAR 0 41
68088: PUSH
68089: LD_INT 0
68091: PUSH
68092: LD_INT 2
68094: NEG
68095: PUSH
68096: EMPTY
68097: LIST
68098: LIST
68099: PUSH
68100: LD_INT 1
68102: NEG
68103: PUSH
68104: LD_INT 3
68106: NEG
68107: PUSH
68108: EMPTY
68109: LIST
68110: LIST
68111: PUSH
68112: LD_INT 1
68114: PUSH
68115: LD_INT 2
68117: NEG
68118: PUSH
68119: EMPTY
68120: LIST
68121: LIST
68122: PUSH
68123: EMPTY
68124: LIST
68125: LIST
68126: LIST
68127: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
68128: LD_ADDR_VAR 0 42
68132: PUSH
68133: LD_INT 2
68135: PUSH
68136: LD_INT 0
68138: PUSH
68139: EMPTY
68140: LIST
68141: LIST
68142: PUSH
68143: LD_INT 2
68145: PUSH
68146: LD_INT 1
68148: NEG
68149: PUSH
68150: EMPTY
68151: LIST
68152: LIST
68153: PUSH
68154: LD_INT 3
68156: PUSH
68157: LD_INT 1
68159: PUSH
68160: EMPTY
68161: LIST
68162: LIST
68163: PUSH
68164: EMPTY
68165: LIST
68166: LIST
68167: LIST
68168: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
68169: LD_ADDR_VAR 0 43
68173: PUSH
68174: LD_INT 2
68176: PUSH
68177: LD_INT 2
68179: PUSH
68180: EMPTY
68181: LIST
68182: LIST
68183: PUSH
68184: LD_INT 3
68186: PUSH
68187: LD_INT 2
68189: PUSH
68190: EMPTY
68191: LIST
68192: LIST
68193: PUSH
68194: LD_INT 2
68196: PUSH
68197: LD_INT 3
68199: PUSH
68200: EMPTY
68201: LIST
68202: LIST
68203: PUSH
68204: EMPTY
68205: LIST
68206: LIST
68207: LIST
68208: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
68209: LD_ADDR_VAR 0 44
68213: PUSH
68214: LD_INT 0
68216: PUSH
68217: LD_INT 2
68219: PUSH
68220: EMPTY
68221: LIST
68222: LIST
68223: PUSH
68224: LD_INT 1
68226: PUSH
68227: LD_INT 3
68229: PUSH
68230: EMPTY
68231: LIST
68232: LIST
68233: PUSH
68234: LD_INT 1
68236: NEG
68237: PUSH
68238: LD_INT 2
68240: PUSH
68241: EMPTY
68242: LIST
68243: LIST
68244: PUSH
68245: EMPTY
68246: LIST
68247: LIST
68248: LIST
68249: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
68250: LD_ADDR_VAR 0 45
68254: PUSH
68255: LD_INT 2
68257: NEG
68258: PUSH
68259: LD_INT 0
68261: PUSH
68262: EMPTY
68263: LIST
68264: LIST
68265: PUSH
68266: LD_INT 2
68268: NEG
68269: PUSH
68270: LD_INT 1
68272: PUSH
68273: EMPTY
68274: LIST
68275: LIST
68276: PUSH
68277: LD_INT 3
68279: NEG
68280: PUSH
68281: LD_INT 1
68283: NEG
68284: PUSH
68285: EMPTY
68286: LIST
68287: LIST
68288: PUSH
68289: EMPTY
68290: LIST
68291: LIST
68292: LIST
68293: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
68294: LD_ADDR_VAR 0 46
68298: PUSH
68299: LD_INT 2
68301: NEG
68302: PUSH
68303: LD_INT 2
68305: NEG
68306: PUSH
68307: EMPTY
68308: LIST
68309: LIST
68310: PUSH
68311: LD_INT 2
68313: NEG
68314: PUSH
68315: LD_INT 3
68317: NEG
68318: PUSH
68319: EMPTY
68320: LIST
68321: LIST
68322: PUSH
68323: LD_INT 3
68325: NEG
68326: PUSH
68327: LD_INT 2
68329: NEG
68330: PUSH
68331: EMPTY
68332: LIST
68333: LIST
68334: PUSH
68335: EMPTY
68336: LIST
68337: LIST
68338: LIST
68339: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
68340: LD_ADDR_VAR 0 47
68344: PUSH
68345: LD_INT 2
68347: NEG
68348: PUSH
68349: LD_INT 3
68351: NEG
68352: PUSH
68353: EMPTY
68354: LIST
68355: LIST
68356: PUSH
68357: LD_INT 1
68359: NEG
68360: PUSH
68361: LD_INT 3
68363: NEG
68364: PUSH
68365: EMPTY
68366: LIST
68367: LIST
68368: PUSH
68369: EMPTY
68370: LIST
68371: LIST
68372: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
68373: LD_ADDR_VAR 0 48
68377: PUSH
68378: LD_INT 1
68380: PUSH
68381: LD_INT 2
68383: NEG
68384: PUSH
68385: EMPTY
68386: LIST
68387: LIST
68388: PUSH
68389: LD_INT 2
68391: PUSH
68392: LD_INT 1
68394: NEG
68395: PUSH
68396: EMPTY
68397: LIST
68398: LIST
68399: PUSH
68400: EMPTY
68401: LIST
68402: LIST
68403: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
68404: LD_ADDR_VAR 0 49
68408: PUSH
68409: LD_INT 3
68411: PUSH
68412: LD_INT 1
68414: PUSH
68415: EMPTY
68416: LIST
68417: LIST
68418: PUSH
68419: LD_INT 3
68421: PUSH
68422: LD_INT 2
68424: PUSH
68425: EMPTY
68426: LIST
68427: LIST
68428: PUSH
68429: EMPTY
68430: LIST
68431: LIST
68432: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
68433: LD_ADDR_VAR 0 50
68437: PUSH
68438: LD_INT 2
68440: PUSH
68441: LD_INT 3
68443: PUSH
68444: EMPTY
68445: LIST
68446: LIST
68447: PUSH
68448: LD_INT 1
68450: PUSH
68451: LD_INT 3
68453: PUSH
68454: EMPTY
68455: LIST
68456: LIST
68457: PUSH
68458: EMPTY
68459: LIST
68460: LIST
68461: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
68462: LD_ADDR_VAR 0 51
68466: PUSH
68467: LD_INT 1
68469: NEG
68470: PUSH
68471: LD_INT 2
68473: PUSH
68474: EMPTY
68475: LIST
68476: LIST
68477: PUSH
68478: LD_INT 2
68480: NEG
68481: PUSH
68482: LD_INT 1
68484: PUSH
68485: EMPTY
68486: LIST
68487: LIST
68488: PUSH
68489: EMPTY
68490: LIST
68491: LIST
68492: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
68493: LD_ADDR_VAR 0 52
68497: PUSH
68498: LD_INT 3
68500: NEG
68501: PUSH
68502: LD_INT 1
68504: NEG
68505: PUSH
68506: EMPTY
68507: LIST
68508: LIST
68509: PUSH
68510: LD_INT 3
68512: NEG
68513: PUSH
68514: LD_INT 2
68516: NEG
68517: PUSH
68518: EMPTY
68519: LIST
68520: LIST
68521: PUSH
68522: EMPTY
68523: LIST
68524: LIST
68525: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68526: LD_ADDR_VAR 0 53
68530: PUSH
68531: LD_INT 1
68533: NEG
68534: PUSH
68535: LD_INT 3
68537: NEG
68538: PUSH
68539: EMPTY
68540: LIST
68541: LIST
68542: PUSH
68543: LD_INT 0
68545: PUSH
68546: LD_INT 3
68548: NEG
68549: PUSH
68550: EMPTY
68551: LIST
68552: LIST
68553: PUSH
68554: LD_INT 1
68556: PUSH
68557: LD_INT 2
68559: NEG
68560: PUSH
68561: EMPTY
68562: LIST
68563: LIST
68564: PUSH
68565: EMPTY
68566: LIST
68567: LIST
68568: LIST
68569: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68570: LD_ADDR_VAR 0 54
68574: PUSH
68575: LD_INT 2
68577: PUSH
68578: LD_INT 1
68580: NEG
68581: PUSH
68582: EMPTY
68583: LIST
68584: LIST
68585: PUSH
68586: LD_INT 3
68588: PUSH
68589: LD_INT 0
68591: PUSH
68592: EMPTY
68593: LIST
68594: LIST
68595: PUSH
68596: LD_INT 3
68598: PUSH
68599: LD_INT 1
68601: PUSH
68602: EMPTY
68603: LIST
68604: LIST
68605: PUSH
68606: EMPTY
68607: LIST
68608: LIST
68609: LIST
68610: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68611: LD_ADDR_VAR 0 55
68615: PUSH
68616: LD_INT 3
68618: PUSH
68619: LD_INT 2
68621: PUSH
68622: EMPTY
68623: LIST
68624: LIST
68625: PUSH
68626: LD_INT 3
68628: PUSH
68629: LD_INT 3
68631: PUSH
68632: EMPTY
68633: LIST
68634: LIST
68635: PUSH
68636: LD_INT 2
68638: PUSH
68639: LD_INT 3
68641: PUSH
68642: EMPTY
68643: LIST
68644: LIST
68645: PUSH
68646: EMPTY
68647: LIST
68648: LIST
68649: LIST
68650: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68651: LD_ADDR_VAR 0 56
68655: PUSH
68656: LD_INT 1
68658: PUSH
68659: LD_INT 3
68661: PUSH
68662: EMPTY
68663: LIST
68664: LIST
68665: PUSH
68666: LD_INT 0
68668: PUSH
68669: LD_INT 3
68671: PUSH
68672: EMPTY
68673: LIST
68674: LIST
68675: PUSH
68676: LD_INT 1
68678: NEG
68679: PUSH
68680: LD_INT 2
68682: PUSH
68683: EMPTY
68684: LIST
68685: LIST
68686: PUSH
68687: EMPTY
68688: LIST
68689: LIST
68690: LIST
68691: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68692: LD_ADDR_VAR 0 57
68696: PUSH
68697: LD_INT 2
68699: NEG
68700: PUSH
68701: LD_INT 1
68703: PUSH
68704: EMPTY
68705: LIST
68706: LIST
68707: PUSH
68708: LD_INT 3
68710: NEG
68711: PUSH
68712: LD_INT 0
68714: PUSH
68715: EMPTY
68716: LIST
68717: LIST
68718: PUSH
68719: LD_INT 3
68721: NEG
68722: PUSH
68723: LD_INT 1
68725: NEG
68726: PUSH
68727: EMPTY
68728: LIST
68729: LIST
68730: PUSH
68731: EMPTY
68732: LIST
68733: LIST
68734: LIST
68735: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68736: LD_ADDR_VAR 0 58
68740: PUSH
68741: LD_INT 2
68743: NEG
68744: PUSH
68745: LD_INT 3
68747: NEG
68748: PUSH
68749: EMPTY
68750: LIST
68751: LIST
68752: PUSH
68753: LD_INT 3
68755: NEG
68756: PUSH
68757: LD_INT 2
68759: NEG
68760: PUSH
68761: EMPTY
68762: LIST
68763: LIST
68764: PUSH
68765: LD_INT 3
68767: NEG
68768: PUSH
68769: LD_INT 3
68771: NEG
68772: PUSH
68773: EMPTY
68774: LIST
68775: LIST
68776: PUSH
68777: EMPTY
68778: LIST
68779: LIST
68780: LIST
68781: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
68782: LD_ADDR_VAR 0 59
68786: PUSH
68787: LD_INT 1
68789: NEG
68790: PUSH
68791: LD_INT 2
68793: NEG
68794: PUSH
68795: EMPTY
68796: LIST
68797: LIST
68798: PUSH
68799: LD_INT 0
68801: PUSH
68802: LD_INT 2
68804: NEG
68805: PUSH
68806: EMPTY
68807: LIST
68808: LIST
68809: PUSH
68810: LD_INT 1
68812: PUSH
68813: LD_INT 1
68815: NEG
68816: PUSH
68817: EMPTY
68818: LIST
68819: LIST
68820: PUSH
68821: EMPTY
68822: LIST
68823: LIST
68824: LIST
68825: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
68826: LD_ADDR_VAR 0 60
68830: PUSH
68831: LD_INT 1
68833: PUSH
68834: LD_INT 1
68836: NEG
68837: PUSH
68838: EMPTY
68839: LIST
68840: LIST
68841: PUSH
68842: LD_INT 2
68844: PUSH
68845: LD_INT 0
68847: PUSH
68848: EMPTY
68849: LIST
68850: LIST
68851: PUSH
68852: LD_INT 2
68854: PUSH
68855: LD_INT 1
68857: PUSH
68858: EMPTY
68859: LIST
68860: LIST
68861: PUSH
68862: EMPTY
68863: LIST
68864: LIST
68865: LIST
68866: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
68867: LD_ADDR_VAR 0 61
68871: PUSH
68872: LD_INT 2
68874: PUSH
68875: LD_INT 1
68877: PUSH
68878: EMPTY
68879: LIST
68880: LIST
68881: PUSH
68882: LD_INT 2
68884: PUSH
68885: LD_INT 2
68887: PUSH
68888: EMPTY
68889: LIST
68890: LIST
68891: PUSH
68892: LD_INT 1
68894: PUSH
68895: LD_INT 2
68897: PUSH
68898: EMPTY
68899: LIST
68900: LIST
68901: PUSH
68902: EMPTY
68903: LIST
68904: LIST
68905: LIST
68906: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
68907: LD_ADDR_VAR 0 62
68911: PUSH
68912: LD_INT 1
68914: PUSH
68915: LD_INT 2
68917: PUSH
68918: EMPTY
68919: LIST
68920: LIST
68921: PUSH
68922: LD_INT 0
68924: PUSH
68925: LD_INT 2
68927: PUSH
68928: EMPTY
68929: LIST
68930: LIST
68931: PUSH
68932: LD_INT 1
68934: NEG
68935: PUSH
68936: LD_INT 1
68938: PUSH
68939: EMPTY
68940: LIST
68941: LIST
68942: PUSH
68943: EMPTY
68944: LIST
68945: LIST
68946: LIST
68947: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
68948: LD_ADDR_VAR 0 63
68952: PUSH
68953: LD_INT 1
68955: NEG
68956: PUSH
68957: LD_INT 1
68959: PUSH
68960: EMPTY
68961: LIST
68962: LIST
68963: PUSH
68964: LD_INT 2
68966: NEG
68967: PUSH
68968: LD_INT 0
68970: PUSH
68971: EMPTY
68972: LIST
68973: LIST
68974: PUSH
68975: LD_INT 2
68977: NEG
68978: PUSH
68979: LD_INT 1
68981: NEG
68982: PUSH
68983: EMPTY
68984: LIST
68985: LIST
68986: PUSH
68987: EMPTY
68988: LIST
68989: LIST
68990: LIST
68991: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68992: LD_ADDR_VAR 0 64
68996: PUSH
68997: LD_INT 1
68999: NEG
69000: PUSH
69001: LD_INT 2
69003: NEG
69004: PUSH
69005: EMPTY
69006: LIST
69007: LIST
69008: PUSH
69009: LD_INT 2
69011: NEG
69012: PUSH
69013: LD_INT 1
69015: NEG
69016: PUSH
69017: EMPTY
69018: LIST
69019: LIST
69020: PUSH
69021: LD_INT 2
69023: NEG
69024: PUSH
69025: LD_INT 2
69027: NEG
69028: PUSH
69029: EMPTY
69030: LIST
69031: LIST
69032: PUSH
69033: EMPTY
69034: LIST
69035: LIST
69036: LIST
69037: ST_TO_ADDR
// end ; 2 :
69038: GO 72304
69040: LD_INT 2
69042: DOUBLE
69043: EQUAL
69044: IFTRUE 69048
69046: GO 72303
69048: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
69049: LD_ADDR_VAR 0 29
69053: PUSH
69054: LD_INT 4
69056: PUSH
69057: LD_INT 0
69059: PUSH
69060: EMPTY
69061: LIST
69062: LIST
69063: PUSH
69064: LD_INT 4
69066: PUSH
69067: LD_INT 1
69069: NEG
69070: PUSH
69071: EMPTY
69072: LIST
69073: LIST
69074: PUSH
69075: LD_INT 5
69077: PUSH
69078: LD_INT 0
69080: PUSH
69081: EMPTY
69082: LIST
69083: LIST
69084: PUSH
69085: LD_INT 5
69087: PUSH
69088: LD_INT 1
69090: PUSH
69091: EMPTY
69092: LIST
69093: LIST
69094: PUSH
69095: LD_INT 4
69097: PUSH
69098: LD_INT 1
69100: PUSH
69101: EMPTY
69102: LIST
69103: LIST
69104: PUSH
69105: LD_INT 3
69107: PUSH
69108: LD_INT 0
69110: PUSH
69111: EMPTY
69112: LIST
69113: LIST
69114: PUSH
69115: LD_INT 3
69117: PUSH
69118: LD_INT 1
69120: NEG
69121: PUSH
69122: EMPTY
69123: LIST
69124: LIST
69125: PUSH
69126: LD_INT 3
69128: PUSH
69129: LD_INT 2
69131: NEG
69132: PUSH
69133: EMPTY
69134: LIST
69135: LIST
69136: PUSH
69137: LD_INT 5
69139: PUSH
69140: LD_INT 2
69142: PUSH
69143: EMPTY
69144: LIST
69145: LIST
69146: PUSH
69147: LD_INT 3
69149: PUSH
69150: LD_INT 3
69152: PUSH
69153: EMPTY
69154: LIST
69155: LIST
69156: PUSH
69157: LD_INT 3
69159: PUSH
69160: LD_INT 2
69162: PUSH
69163: EMPTY
69164: LIST
69165: LIST
69166: PUSH
69167: LD_INT 4
69169: PUSH
69170: LD_INT 3
69172: PUSH
69173: EMPTY
69174: LIST
69175: LIST
69176: PUSH
69177: LD_INT 4
69179: PUSH
69180: LD_INT 4
69182: PUSH
69183: EMPTY
69184: LIST
69185: LIST
69186: PUSH
69187: LD_INT 3
69189: PUSH
69190: LD_INT 4
69192: PUSH
69193: EMPTY
69194: LIST
69195: LIST
69196: PUSH
69197: LD_INT 2
69199: PUSH
69200: LD_INT 3
69202: PUSH
69203: EMPTY
69204: LIST
69205: LIST
69206: PUSH
69207: LD_INT 2
69209: PUSH
69210: LD_INT 2
69212: PUSH
69213: EMPTY
69214: LIST
69215: LIST
69216: PUSH
69217: LD_INT 4
69219: PUSH
69220: LD_INT 2
69222: PUSH
69223: EMPTY
69224: LIST
69225: LIST
69226: PUSH
69227: LD_INT 2
69229: PUSH
69230: LD_INT 4
69232: PUSH
69233: EMPTY
69234: LIST
69235: LIST
69236: PUSH
69237: LD_INT 0
69239: PUSH
69240: LD_INT 4
69242: PUSH
69243: EMPTY
69244: LIST
69245: LIST
69246: PUSH
69247: LD_INT 0
69249: PUSH
69250: LD_INT 3
69252: PUSH
69253: EMPTY
69254: LIST
69255: LIST
69256: PUSH
69257: LD_INT 1
69259: PUSH
69260: LD_INT 4
69262: PUSH
69263: EMPTY
69264: LIST
69265: LIST
69266: PUSH
69267: LD_INT 1
69269: PUSH
69270: LD_INT 5
69272: PUSH
69273: EMPTY
69274: LIST
69275: LIST
69276: PUSH
69277: LD_INT 0
69279: PUSH
69280: LD_INT 5
69282: PUSH
69283: EMPTY
69284: LIST
69285: LIST
69286: PUSH
69287: LD_INT 1
69289: NEG
69290: PUSH
69291: LD_INT 4
69293: PUSH
69294: EMPTY
69295: LIST
69296: LIST
69297: PUSH
69298: LD_INT 1
69300: NEG
69301: PUSH
69302: LD_INT 3
69304: PUSH
69305: EMPTY
69306: LIST
69307: LIST
69308: PUSH
69309: LD_INT 2
69311: PUSH
69312: LD_INT 5
69314: PUSH
69315: EMPTY
69316: LIST
69317: LIST
69318: PUSH
69319: LD_INT 2
69321: NEG
69322: PUSH
69323: LD_INT 3
69325: PUSH
69326: EMPTY
69327: LIST
69328: LIST
69329: PUSH
69330: LD_INT 3
69332: NEG
69333: PUSH
69334: LD_INT 0
69336: PUSH
69337: EMPTY
69338: LIST
69339: LIST
69340: PUSH
69341: LD_INT 3
69343: NEG
69344: PUSH
69345: LD_INT 1
69347: NEG
69348: PUSH
69349: EMPTY
69350: LIST
69351: LIST
69352: PUSH
69353: LD_INT 2
69355: NEG
69356: PUSH
69357: LD_INT 0
69359: PUSH
69360: EMPTY
69361: LIST
69362: LIST
69363: PUSH
69364: LD_INT 2
69366: NEG
69367: PUSH
69368: LD_INT 1
69370: PUSH
69371: EMPTY
69372: LIST
69373: LIST
69374: PUSH
69375: LD_INT 3
69377: NEG
69378: PUSH
69379: LD_INT 1
69381: PUSH
69382: EMPTY
69383: LIST
69384: LIST
69385: PUSH
69386: LD_INT 4
69388: NEG
69389: PUSH
69390: LD_INT 0
69392: PUSH
69393: EMPTY
69394: LIST
69395: LIST
69396: PUSH
69397: LD_INT 4
69399: NEG
69400: PUSH
69401: LD_INT 1
69403: NEG
69404: PUSH
69405: EMPTY
69406: LIST
69407: LIST
69408: PUSH
69409: LD_INT 4
69411: NEG
69412: PUSH
69413: LD_INT 2
69415: NEG
69416: PUSH
69417: EMPTY
69418: LIST
69419: LIST
69420: PUSH
69421: LD_INT 2
69423: NEG
69424: PUSH
69425: LD_INT 2
69427: PUSH
69428: EMPTY
69429: LIST
69430: LIST
69431: PUSH
69432: LD_INT 4
69434: NEG
69435: PUSH
69436: LD_INT 4
69438: NEG
69439: PUSH
69440: EMPTY
69441: LIST
69442: LIST
69443: PUSH
69444: LD_INT 4
69446: NEG
69447: PUSH
69448: LD_INT 5
69450: NEG
69451: PUSH
69452: EMPTY
69453: LIST
69454: LIST
69455: PUSH
69456: LD_INT 3
69458: NEG
69459: PUSH
69460: LD_INT 4
69462: NEG
69463: PUSH
69464: EMPTY
69465: LIST
69466: LIST
69467: PUSH
69468: LD_INT 3
69470: NEG
69471: PUSH
69472: LD_INT 3
69474: NEG
69475: PUSH
69476: EMPTY
69477: LIST
69478: LIST
69479: PUSH
69480: LD_INT 4
69482: NEG
69483: PUSH
69484: LD_INT 3
69486: NEG
69487: PUSH
69488: EMPTY
69489: LIST
69490: LIST
69491: PUSH
69492: LD_INT 5
69494: NEG
69495: PUSH
69496: LD_INT 4
69498: NEG
69499: PUSH
69500: EMPTY
69501: LIST
69502: LIST
69503: PUSH
69504: LD_INT 5
69506: NEG
69507: PUSH
69508: LD_INT 5
69510: NEG
69511: PUSH
69512: EMPTY
69513: LIST
69514: LIST
69515: PUSH
69516: LD_INT 3
69518: NEG
69519: PUSH
69520: LD_INT 5
69522: NEG
69523: PUSH
69524: EMPTY
69525: LIST
69526: LIST
69527: PUSH
69528: LD_INT 5
69530: NEG
69531: PUSH
69532: LD_INT 3
69534: NEG
69535: PUSH
69536: EMPTY
69537: LIST
69538: LIST
69539: PUSH
69540: EMPTY
69541: LIST
69542: LIST
69543: LIST
69544: LIST
69545: LIST
69546: LIST
69547: LIST
69548: LIST
69549: LIST
69550: LIST
69551: LIST
69552: LIST
69553: LIST
69554: LIST
69555: LIST
69556: LIST
69557: LIST
69558: LIST
69559: LIST
69560: LIST
69561: LIST
69562: LIST
69563: LIST
69564: LIST
69565: LIST
69566: LIST
69567: LIST
69568: LIST
69569: LIST
69570: LIST
69571: LIST
69572: LIST
69573: LIST
69574: LIST
69575: LIST
69576: LIST
69577: LIST
69578: LIST
69579: LIST
69580: LIST
69581: LIST
69582: LIST
69583: LIST
69584: LIST
69585: LIST
69586: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
69587: LD_ADDR_VAR 0 30
69591: PUSH
69592: LD_INT 4
69594: PUSH
69595: LD_INT 4
69597: PUSH
69598: EMPTY
69599: LIST
69600: LIST
69601: PUSH
69602: LD_INT 4
69604: PUSH
69605: LD_INT 3
69607: PUSH
69608: EMPTY
69609: LIST
69610: LIST
69611: PUSH
69612: LD_INT 5
69614: PUSH
69615: LD_INT 4
69617: PUSH
69618: EMPTY
69619: LIST
69620: LIST
69621: PUSH
69622: LD_INT 5
69624: PUSH
69625: LD_INT 5
69627: PUSH
69628: EMPTY
69629: LIST
69630: LIST
69631: PUSH
69632: LD_INT 4
69634: PUSH
69635: LD_INT 5
69637: PUSH
69638: EMPTY
69639: LIST
69640: LIST
69641: PUSH
69642: LD_INT 3
69644: PUSH
69645: LD_INT 4
69647: PUSH
69648: EMPTY
69649: LIST
69650: LIST
69651: PUSH
69652: LD_INT 3
69654: PUSH
69655: LD_INT 3
69657: PUSH
69658: EMPTY
69659: LIST
69660: LIST
69661: PUSH
69662: LD_INT 5
69664: PUSH
69665: LD_INT 3
69667: PUSH
69668: EMPTY
69669: LIST
69670: LIST
69671: PUSH
69672: LD_INT 3
69674: PUSH
69675: LD_INT 5
69677: PUSH
69678: EMPTY
69679: LIST
69680: LIST
69681: PUSH
69682: LD_INT 0
69684: PUSH
69685: LD_INT 3
69687: PUSH
69688: EMPTY
69689: LIST
69690: LIST
69691: PUSH
69692: LD_INT 0
69694: PUSH
69695: LD_INT 2
69697: PUSH
69698: EMPTY
69699: LIST
69700: LIST
69701: PUSH
69702: LD_INT 1
69704: PUSH
69705: LD_INT 3
69707: PUSH
69708: EMPTY
69709: LIST
69710: LIST
69711: PUSH
69712: LD_INT 1
69714: PUSH
69715: LD_INT 4
69717: PUSH
69718: EMPTY
69719: LIST
69720: LIST
69721: PUSH
69722: LD_INT 0
69724: PUSH
69725: LD_INT 4
69727: PUSH
69728: EMPTY
69729: LIST
69730: LIST
69731: PUSH
69732: LD_INT 1
69734: NEG
69735: PUSH
69736: LD_INT 3
69738: PUSH
69739: EMPTY
69740: LIST
69741: LIST
69742: PUSH
69743: LD_INT 1
69745: NEG
69746: PUSH
69747: LD_INT 2
69749: PUSH
69750: EMPTY
69751: LIST
69752: LIST
69753: PUSH
69754: LD_INT 2
69756: PUSH
69757: LD_INT 4
69759: PUSH
69760: EMPTY
69761: LIST
69762: LIST
69763: PUSH
69764: LD_INT 2
69766: NEG
69767: PUSH
69768: LD_INT 2
69770: PUSH
69771: EMPTY
69772: LIST
69773: LIST
69774: PUSH
69775: LD_INT 4
69777: NEG
69778: PUSH
69779: LD_INT 0
69781: PUSH
69782: EMPTY
69783: LIST
69784: LIST
69785: PUSH
69786: LD_INT 4
69788: NEG
69789: PUSH
69790: LD_INT 1
69792: NEG
69793: PUSH
69794: EMPTY
69795: LIST
69796: LIST
69797: PUSH
69798: LD_INT 3
69800: NEG
69801: PUSH
69802: LD_INT 0
69804: PUSH
69805: EMPTY
69806: LIST
69807: LIST
69808: PUSH
69809: LD_INT 3
69811: NEG
69812: PUSH
69813: LD_INT 1
69815: PUSH
69816: EMPTY
69817: LIST
69818: LIST
69819: PUSH
69820: LD_INT 4
69822: NEG
69823: PUSH
69824: LD_INT 1
69826: PUSH
69827: EMPTY
69828: LIST
69829: LIST
69830: PUSH
69831: LD_INT 5
69833: NEG
69834: PUSH
69835: LD_INT 0
69837: PUSH
69838: EMPTY
69839: LIST
69840: LIST
69841: PUSH
69842: LD_INT 5
69844: NEG
69845: PUSH
69846: LD_INT 1
69848: NEG
69849: PUSH
69850: EMPTY
69851: LIST
69852: LIST
69853: PUSH
69854: LD_INT 5
69856: NEG
69857: PUSH
69858: LD_INT 2
69860: NEG
69861: PUSH
69862: EMPTY
69863: LIST
69864: LIST
69865: PUSH
69866: LD_INT 3
69868: NEG
69869: PUSH
69870: LD_INT 2
69872: PUSH
69873: EMPTY
69874: LIST
69875: LIST
69876: PUSH
69877: LD_INT 3
69879: NEG
69880: PUSH
69881: LD_INT 3
69883: NEG
69884: PUSH
69885: EMPTY
69886: LIST
69887: LIST
69888: PUSH
69889: LD_INT 3
69891: NEG
69892: PUSH
69893: LD_INT 4
69895: NEG
69896: PUSH
69897: EMPTY
69898: LIST
69899: LIST
69900: PUSH
69901: LD_INT 2
69903: NEG
69904: PUSH
69905: LD_INT 3
69907: NEG
69908: PUSH
69909: EMPTY
69910: LIST
69911: LIST
69912: PUSH
69913: LD_INT 2
69915: NEG
69916: PUSH
69917: LD_INT 2
69919: NEG
69920: PUSH
69921: EMPTY
69922: LIST
69923: LIST
69924: PUSH
69925: LD_INT 3
69927: NEG
69928: PUSH
69929: LD_INT 2
69931: NEG
69932: PUSH
69933: EMPTY
69934: LIST
69935: LIST
69936: PUSH
69937: LD_INT 4
69939: NEG
69940: PUSH
69941: LD_INT 3
69943: NEG
69944: PUSH
69945: EMPTY
69946: LIST
69947: LIST
69948: PUSH
69949: LD_INT 4
69951: NEG
69952: PUSH
69953: LD_INT 4
69955: NEG
69956: PUSH
69957: EMPTY
69958: LIST
69959: LIST
69960: PUSH
69961: LD_INT 2
69963: NEG
69964: PUSH
69965: LD_INT 4
69967: NEG
69968: PUSH
69969: EMPTY
69970: LIST
69971: LIST
69972: PUSH
69973: LD_INT 4
69975: NEG
69976: PUSH
69977: LD_INT 2
69979: NEG
69980: PUSH
69981: EMPTY
69982: LIST
69983: LIST
69984: PUSH
69985: LD_INT 0
69987: PUSH
69988: LD_INT 4
69990: NEG
69991: PUSH
69992: EMPTY
69993: LIST
69994: LIST
69995: PUSH
69996: LD_INT 0
69998: PUSH
69999: LD_INT 5
70001: NEG
70002: PUSH
70003: EMPTY
70004: LIST
70005: LIST
70006: PUSH
70007: LD_INT 1
70009: PUSH
70010: LD_INT 4
70012: NEG
70013: PUSH
70014: EMPTY
70015: LIST
70016: LIST
70017: PUSH
70018: LD_INT 1
70020: PUSH
70021: LD_INT 3
70023: NEG
70024: PUSH
70025: EMPTY
70026: LIST
70027: LIST
70028: PUSH
70029: LD_INT 0
70031: PUSH
70032: LD_INT 3
70034: NEG
70035: PUSH
70036: EMPTY
70037: LIST
70038: LIST
70039: PUSH
70040: LD_INT 1
70042: NEG
70043: PUSH
70044: LD_INT 4
70046: NEG
70047: PUSH
70048: EMPTY
70049: LIST
70050: LIST
70051: PUSH
70052: LD_INT 1
70054: NEG
70055: PUSH
70056: LD_INT 5
70058: NEG
70059: PUSH
70060: EMPTY
70061: LIST
70062: LIST
70063: PUSH
70064: LD_INT 2
70066: PUSH
70067: LD_INT 3
70069: NEG
70070: PUSH
70071: EMPTY
70072: LIST
70073: LIST
70074: PUSH
70075: LD_INT 2
70077: NEG
70078: PUSH
70079: LD_INT 5
70081: NEG
70082: PUSH
70083: EMPTY
70084: LIST
70085: LIST
70086: PUSH
70087: EMPTY
70088: LIST
70089: LIST
70090: LIST
70091: LIST
70092: LIST
70093: LIST
70094: LIST
70095: LIST
70096: LIST
70097: LIST
70098: LIST
70099: LIST
70100: LIST
70101: LIST
70102: LIST
70103: LIST
70104: LIST
70105: LIST
70106: LIST
70107: LIST
70108: LIST
70109: LIST
70110: LIST
70111: LIST
70112: LIST
70113: LIST
70114: LIST
70115: LIST
70116: LIST
70117: LIST
70118: LIST
70119: LIST
70120: LIST
70121: LIST
70122: LIST
70123: LIST
70124: LIST
70125: LIST
70126: LIST
70127: LIST
70128: LIST
70129: LIST
70130: LIST
70131: LIST
70132: LIST
70133: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
70134: LD_ADDR_VAR 0 31
70138: PUSH
70139: LD_INT 0
70141: PUSH
70142: LD_INT 4
70144: PUSH
70145: EMPTY
70146: LIST
70147: LIST
70148: PUSH
70149: LD_INT 0
70151: PUSH
70152: LD_INT 3
70154: PUSH
70155: EMPTY
70156: LIST
70157: LIST
70158: PUSH
70159: LD_INT 1
70161: PUSH
70162: LD_INT 4
70164: PUSH
70165: EMPTY
70166: LIST
70167: LIST
70168: PUSH
70169: LD_INT 1
70171: PUSH
70172: LD_INT 5
70174: PUSH
70175: EMPTY
70176: LIST
70177: LIST
70178: PUSH
70179: LD_INT 0
70181: PUSH
70182: LD_INT 5
70184: PUSH
70185: EMPTY
70186: LIST
70187: LIST
70188: PUSH
70189: LD_INT 1
70191: NEG
70192: PUSH
70193: LD_INT 4
70195: PUSH
70196: EMPTY
70197: LIST
70198: LIST
70199: PUSH
70200: LD_INT 1
70202: NEG
70203: PUSH
70204: LD_INT 3
70206: PUSH
70207: EMPTY
70208: LIST
70209: LIST
70210: PUSH
70211: LD_INT 2
70213: PUSH
70214: LD_INT 5
70216: PUSH
70217: EMPTY
70218: LIST
70219: LIST
70220: PUSH
70221: LD_INT 2
70223: NEG
70224: PUSH
70225: LD_INT 3
70227: PUSH
70228: EMPTY
70229: LIST
70230: LIST
70231: PUSH
70232: LD_INT 3
70234: NEG
70235: PUSH
70236: LD_INT 0
70238: PUSH
70239: EMPTY
70240: LIST
70241: LIST
70242: PUSH
70243: LD_INT 3
70245: NEG
70246: PUSH
70247: LD_INT 1
70249: NEG
70250: PUSH
70251: EMPTY
70252: LIST
70253: LIST
70254: PUSH
70255: LD_INT 2
70257: NEG
70258: PUSH
70259: LD_INT 0
70261: PUSH
70262: EMPTY
70263: LIST
70264: LIST
70265: PUSH
70266: LD_INT 2
70268: NEG
70269: PUSH
70270: LD_INT 1
70272: PUSH
70273: EMPTY
70274: LIST
70275: LIST
70276: PUSH
70277: LD_INT 3
70279: NEG
70280: PUSH
70281: LD_INT 1
70283: PUSH
70284: EMPTY
70285: LIST
70286: LIST
70287: PUSH
70288: LD_INT 4
70290: NEG
70291: PUSH
70292: LD_INT 0
70294: PUSH
70295: EMPTY
70296: LIST
70297: LIST
70298: PUSH
70299: LD_INT 4
70301: NEG
70302: PUSH
70303: LD_INT 1
70305: NEG
70306: PUSH
70307: EMPTY
70308: LIST
70309: LIST
70310: PUSH
70311: LD_INT 4
70313: NEG
70314: PUSH
70315: LD_INT 2
70317: NEG
70318: PUSH
70319: EMPTY
70320: LIST
70321: LIST
70322: PUSH
70323: LD_INT 2
70325: NEG
70326: PUSH
70327: LD_INT 2
70329: PUSH
70330: EMPTY
70331: LIST
70332: LIST
70333: PUSH
70334: LD_INT 4
70336: NEG
70337: PUSH
70338: LD_INT 4
70340: NEG
70341: PUSH
70342: EMPTY
70343: LIST
70344: LIST
70345: PUSH
70346: LD_INT 4
70348: NEG
70349: PUSH
70350: LD_INT 5
70352: NEG
70353: PUSH
70354: EMPTY
70355: LIST
70356: LIST
70357: PUSH
70358: LD_INT 3
70360: NEG
70361: PUSH
70362: LD_INT 4
70364: NEG
70365: PUSH
70366: EMPTY
70367: LIST
70368: LIST
70369: PUSH
70370: LD_INT 3
70372: NEG
70373: PUSH
70374: LD_INT 3
70376: NEG
70377: PUSH
70378: EMPTY
70379: LIST
70380: LIST
70381: PUSH
70382: LD_INT 4
70384: NEG
70385: PUSH
70386: LD_INT 3
70388: NEG
70389: PUSH
70390: EMPTY
70391: LIST
70392: LIST
70393: PUSH
70394: LD_INT 5
70396: NEG
70397: PUSH
70398: LD_INT 4
70400: NEG
70401: PUSH
70402: EMPTY
70403: LIST
70404: LIST
70405: PUSH
70406: LD_INT 5
70408: NEG
70409: PUSH
70410: LD_INT 5
70412: NEG
70413: PUSH
70414: EMPTY
70415: LIST
70416: LIST
70417: PUSH
70418: LD_INT 3
70420: NEG
70421: PUSH
70422: LD_INT 5
70424: NEG
70425: PUSH
70426: EMPTY
70427: LIST
70428: LIST
70429: PUSH
70430: LD_INT 5
70432: NEG
70433: PUSH
70434: LD_INT 3
70436: NEG
70437: PUSH
70438: EMPTY
70439: LIST
70440: LIST
70441: PUSH
70442: LD_INT 0
70444: PUSH
70445: LD_INT 3
70447: NEG
70448: PUSH
70449: EMPTY
70450: LIST
70451: LIST
70452: PUSH
70453: LD_INT 0
70455: PUSH
70456: LD_INT 4
70458: NEG
70459: PUSH
70460: EMPTY
70461: LIST
70462: LIST
70463: PUSH
70464: LD_INT 1
70466: PUSH
70467: LD_INT 3
70469: NEG
70470: PUSH
70471: EMPTY
70472: LIST
70473: LIST
70474: PUSH
70475: LD_INT 1
70477: PUSH
70478: LD_INT 2
70480: NEG
70481: PUSH
70482: EMPTY
70483: LIST
70484: LIST
70485: PUSH
70486: LD_INT 0
70488: PUSH
70489: LD_INT 2
70491: NEG
70492: PUSH
70493: EMPTY
70494: LIST
70495: LIST
70496: PUSH
70497: LD_INT 1
70499: NEG
70500: PUSH
70501: LD_INT 3
70503: NEG
70504: PUSH
70505: EMPTY
70506: LIST
70507: LIST
70508: PUSH
70509: LD_INT 1
70511: NEG
70512: PUSH
70513: LD_INT 4
70515: NEG
70516: PUSH
70517: EMPTY
70518: LIST
70519: LIST
70520: PUSH
70521: LD_INT 2
70523: PUSH
70524: LD_INT 2
70526: NEG
70527: PUSH
70528: EMPTY
70529: LIST
70530: LIST
70531: PUSH
70532: LD_INT 2
70534: NEG
70535: PUSH
70536: LD_INT 4
70538: NEG
70539: PUSH
70540: EMPTY
70541: LIST
70542: LIST
70543: PUSH
70544: LD_INT 4
70546: PUSH
70547: LD_INT 0
70549: PUSH
70550: EMPTY
70551: LIST
70552: LIST
70553: PUSH
70554: LD_INT 4
70556: PUSH
70557: LD_INT 1
70559: NEG
70560: PUSH
70561: EMPTY
70562: LIST
70563: LIST
70564: PUSH
70565: LD_INT 5
70567: PUSH
70568: LD_INT 0
70570: PUSH
70571: EMPTY
70572: LIST
70573: LIST
70574: PUSH
70575: LD_INT 5
70577: PUSH
70578: LD_INT 1
70580: PUSH
70581: EMPTY
70582: LIST
70583: LIST
70584: PUSH
70585: LD_INT 4
70587: PUSH
70588: LD_INT 1
70590: PUSH
70591: EMPTY
70592: LIST
70593: LIST
70594: PUSH
70595: LD_INT 3
70597: PUSH
70598: LD_INT 0
70600: PUSH
70601: EMPTY
70602: LIST
70603: LIST
70604: PUSH
70605: LD_INT 3
70607: PUSH
70608: LD_INT 1
70610: NEG
70611: PUSH
70612: EMPTY
70613: LIST
70614: LIST
70615: PUSH
70616: LD_INT 3
70618: PUSH
70619: LD_INT 2
70621: NEG
70622: PUSH
70623: EMPTY
70624: LIST
70625: LIST
70626: PUSH
70627: LD_INT 5
70629: PUSH
70630: LD_INT 2
70632: PUSH
70633: EMPTY
70634: LIST
70635: LIST
70636: PUSH
70637: EMPTY
70638: LIST
70639: LIST
70640: LIST
70641: LIST
70642: LIST
70643: LIST
70644: LIST
70645: LIST
70646: LIST
70647: LIST
70648: LIST
70649: LIST
70650: LIST
70651: LIST
70652: LIST
70653: LIST
70654: LIST
70655: LIST
70656: LIST
70657: LIST
70658: LIST
70659: LIST
70660: LIST
70661: LIST
70662: LIST
70663: LIST
70664: LIST
70665: LIST
70666: LIST
70667: LIST
70668: LIST
70669: LIST
70670: LIST
70671: LIST
70672: LIST
70673: LIST
70674: LIST
70675: LIST
70676: LIST
70677: LIST
70678: LIST
70679: LIST
70680: LIST
70681: LIST
70682: LIST
70683: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
70684: LD_ADDR_VAR 0 32
70688: PUSH
70689: LD_INT 4
70691: NEG
70692: PUSH
70693: LD_INT 0
70695: PUSH
70696: EMPTY
70697: LIST
70698: LIST
70699: PUSH
70700: LD_INT 4
70702: NEG
70703: PUSH
70704: LD_INT 1
70706: NEG
70707: PUSH
70708: EMPTY
70709: LIST
70710: LIST
70711: PUSH
70712: LD_INT 3
70714: NEG
70715: PUSH
70716: LD_INT 0
70718: PUSH
70719: EMPTY
70720: LIST
70721: LIST
70722: PUSH
70723: LD_INT 3
70725: NEG
70726: PUSH
70727: LD_INT 1
70729: PUSH
70730: EMPTY
70731: LIST
70732: LIST
70733: PUSH
70734: LD_INT 4
70736: NEG
70737: PUSH
70738: LD_INT 1
70740: PUSH
70741: EMPTY
70742: LIST
70743: LIST
70744: PUSH
70745: LD_INT 5
70747: NEG
70748: PUSH
70749: LD_INT 0
70751: PUSH
70752: EMPTY
70753: LIST
70754: LIST
70755: PUSH
70756: LD_INT 5
70758: NEG
70759: PUSH
70760: LD_INT 1
70762: NEG
70763: PUSH
70764: EMPTY
70765: LIST
70766: LIST
70767: PUSH
70768: LD_INT 5
70770: NEG
70771: PUSH
70772: LD_INT 2
70774: NEG
70775: PUSH
70776: EMPTY
70777: LIST
70778: LIST
70779: PUSH
70780: LD_INT 3
70782: NEG
70783: PUSH
70784: LD_INT 2
70786: PUSH
70787: EMPTY
70788: LIST
70789: LIST
70790: PUSH
70791: LD_INT 3
70793: NEG
70794: PUSH
70795: LD_INT 3
70797: NEG
70798: PUSH
70799: EMPTY
70800: LIST
70801: LIST
70802: PUSH
70803: LD_INT 3
70805: NEG
70806: PUSH
70807: LD_INT 4
70809: NEG
70810: PUSH
70811: EMPTY
70812: LIST
70813: LIST
70814: PUSH
70815: LD_INT 2
70817: NEG
70818: PUSH
70819: LD_INT 3
70821: NEG
70822: PUSH
70823: EMPTY
70824: LIST
70825: LIST
70826: PUSH
70827: LD_INT 2
70829: NEG
70830: PUSH
70831: LD_INT 2
70833: NEG
70834: PUSH
70835: EMPTY
70836: LIST
70837: LIST
70838: PUSH
70839: LD_INT 3
70841: NEG
70842: PUSH
70843: LD_INT 2
70845: NEG
70846: PUSH
70847: EMPTY
70848: LIST
70849: LIST
70850: PUSH
70851: LD_INT 4
70853: NEG
70854: PUSH
70855: LD_INT 3
70857: NEG
70858: PUSH
70859: EMPTY
70860: LIST
70861: LIST
70862: PUSH
70863: LD_INT 4
70865: NEG
70866: PUSH
70867: LD_INT 4
70869: NEG
70870: PUSH
70871: EMPTY
70872: LIST
70873: LIST
70874: PUSH
70875: LD_INT 2
70877: NEG
70878: PUSH
70879: LD_INT 4
70881: NEG
70882: PUSH
70883: EMPTY
70884: LIST
70885: LIST
70886: PUSH
70887: LD_INT 4
70889: NEG
70890: PUSH
70891: LD_INT 2
70893: NEG
70894: PUSH
70895: EMPTY
70896: LIST
70897: LIST
70898: PUSH
70899: LD_INT 0
70901: PUSH
70902: LD_INT 4
70904: NEG
70905: PUSH
70906: EMPTY
70907: LIST
70908: LIST
70909: PUSH
70910: LD_INT 0
70912: PUSH
70913: LD_INT 5
70915: NEG
70916: PUSH
70917: EMPTY
70918: LIST
70919: LIST
70920: PUSH
70921: LD_INT 1
70923: PUSH
70924: LD_INT 4
70926: NEG
70927: PUSH
70928: EMPTY
70929: LIST
70930: LIST
70931: PUSH
70932: LD_INT 1
70934: PUSH
70935: LD_INT 3
70937: NEG
70938: PUSH
70939: EMPTY
70940: LIST
70941: LIST
70942: PUSH
70943: LD_INT 0
70945: PUSH
70946: LD_INT 3
70948: NEG
70949: PUSH
70950: EMPTY
70951: LIST
70952: LIST
70953: PUSH
70954: LD_INT 1
70956: NEG
70957: PUSH
70958: LD_INT 4
70960: NEG
70961: PUSH
70962: EMPTY
70963: LIST
70964: LIST
70965: PUSH
70966: LD_INT 1
70968: NEG
70969: PUSH
70970: LD_INT 5
70972: NEG
70973: PUSH
70974: EMPTY
70975: LIST
70976: LIST
70977: PUSH
70978: LD_INT 2
70980: PUSH
70981: LD_INT 3
70983: NEG
70984: PUSH
70985: EMPTY
70986: LIST
70987: LIST
70988: PUSH
70989: LD_INT 2
70991: NEG
70992: PUSH
70993: LD_INT 5
70995: NEG
70996: PUSH
70997: EMPTY
70998: LIST
70999: LIST
71000: PUSH
71001: LD_INT 3
71003: PUSH
71004: LD_INT 0
71006: PUSH
71007: EMPTY
71008: LIST
71009: LIST
71010: PUSH
71011: LD_INT 3
71013: PUSH
71014: LD_INT 1
71016: NEG
71017: PUSH
71018: EMPTY
71019: LIST
71020: LIST
71021: PUSH
71022: LD_INT 4
71024: PUSH
71025: LD_INT 0
71027: PUSH
71028: EMPTY
71029: LIST
71030: LIST
71031: PUSH
71032: LD_INT 4
71034: PUSH
71035: LD_INT 1
71037: PUSH
71038: EMPTY
71039: LIST
71040: LIST
71041: PUSH
71042: LD_INT 3
71044: PUSH
71045: LD_INT 1
71047: PUSH
71048: EMPTY
71049: LIST
71050: LIST
71051: PUSH
71052: LD_INT 2
71054: PUSH
71055: LD_INT 0
71057: PUSH
71058: EMPTY
71059: LIST
71060: LIST
71061: PUSH
71062: LD_INT 2
71064: PUSH
71065: LD_INT 1
71067: NEG
71068: PUSH
71069: EMPTY
71070: LIST
71071: LIST
71072: PUSH
71073: LD_INT 2
71075: PUSH
71076: LD_INT 2
71078: NEG
71079: PUSH
71080: EMPTY
71081: LIST
71082: LIST
71083: PUSH
71084: LD_INT 4
71086: PUSH
71087: LD_INT 2
71089: PUSH
71090: EMPTY
71091: LIST
71092: LIST
71093: PUSH
71094: LD_INT 4
71096: PUSH
71097: LD_INT 4
71099: PUSH
71100: EMPTY
71101: LIST
71102: LIST
71103: PUSH
71104: LD_INT 4
71106: PUSH
71107: LD_INT 3
71109: PUSH
71110: EMPTY
71111: LIST
71112: LIST
71113: PUSH
71114: LD_INT 5
71116: PUSH
71117: LD_INT 4
71119: PUSH
71120: EMPTY
71121: LIST
71122: LIST
71123: PUSH
71124: LD_INT 5
71126: PUSH
71127: LD_INT 5
71129: PUSH
71130: EMPTY
71131: LIST
71132: LIST
71133: PUSH
71134: LD_INT 4
71136: PUSH
71137: LD_INT 5
71139: PUSH
71140: EMPTY
71141: LIST
71142: LIST
71143: PUSH
71144: LD_INT 3
71146: PUSH
71147: LD_INT 4
71149: PUSH
71150: EMPTY
71151: LIST
71152: LIST
71153: PUSH
71154: LD_INT 3
71156: PUSH
71157: LD_INT 3
71159: PUSH
71160: EMPTY
71161: LIST
71162: LIST
71163: PUSH
71164: LD_INT 5
71166: PUSH
71167: LD_INT 3
71169: PUSH
71170: EMPTY
71171: LIST
71172: LIST
71173: PUSH
71174: LD_INT 3
71176: PUSH
71177: LD_INT 5
71179: PUSH
71180: EMPTY
71181: LIST
71182: LIST
71183: PUSH
71184: EMPTY
71185: LIST
71186: LIST
71187: LIST
71188: LIST
71189: LIST
71190: LIST
71191: LIST
71192: LIST
71193: LIST
71194: LIST
71195: LIST
71196: LIST
71197: LIST
71198: LIST
71199: LIST
71200: LIST
71201: LIST
71202: LIST
71203: LIST
71204: LIST
71205: LIST
71206: LIST
71207: LIST
71208: LIST
71209: LIST
71210: LIST
71211: LIST
71212: LIST
71213: LIST
71214: LIST
71215: LIST
71216: LIST
71217: LIST
71218: LIST
71219: LIST
71220: LIST
71221: LIST
71222: LIST
71223: LIST
71224: LIST
71225: LIST
71226: LIST
71227: LIST
71228: LIST
71229: LIST
71230: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
71231: LD_ADDR_VAR 0 33
71235: PUSH
71236: LD_INT 4
71238: NEG
71239: PUSH
71240: LD_INT 4
71242: NEG
71243: PUSH
71244: EMPTY
71245: LIST
71246: LIST
71247: PUSH
71248: LD_INT 4
71250: NEG
71251: PUSH
71252: LD_INT 5
71254: NEG
71255: PUSH
71256: EMPTY
71257: LIST
71258: LIST
71259: PUSH
71260: LD_INT 3
71262: NEG
71263: PUSH
71264: LD_INT 4
71266: NEG
71267: PUSH
71268: EMPTY
71269: LIST
71270: LIST
71271: PUSH
71272: LD_INT 3
71274: NEG
71275: PUSH
71276: LD_INT 3
71278: NEG
71279: PUSH
71280: EMPTY
71281: LIST
71282: LIST
71283: PUSH
71284: LD_INT 4
71286: NEG
71287: PUSH
71288: LD_INT 3
71290: NEG
71291: PUSH
71292: EMPTY
71293: LIST
71294: LIST
71295: PUSH
71296: LD_INT 5
71298: NEG
71299: PUSH
71300: LD_INT 4
71302: NEG
71303: PUSH
71304: EMPTY
71305: LIST
71306: LIST
71307: PUSH
71308: LD_INT 5
71310: NEG
71311: PUSH
71312: LD_INT 5
71314: NEG
71315: PUSH
71316: EMPTY
71317: LIST
71318: LIST
71319: PUSH
71320: LD_INT 3
71322: NEG
71323: PUSH
71324: LD_INT 5
71326: NEG
71327: PUSH
71328: EMPTY
71329: LIST
71330: LIST
71331: PUSH
71332: LD_INT 5
71334: NEG
71335: PUSH
71336: LD_INT 3
71338: NEG
71339: PUSH
71340: EMPTY
71341: LIST
71342: LIST
71343: PUSH
71344: LD_INT 0
71346: PUSH
71347: LD_INT 3
71349: NEG
71350: PUSH
71351: EMPTY
71352: LIST
71353: LIST
71354: PUSH
71355: LD_INT 0
71357: PUSH
71358: LD_INT 4
71360: NEG
71361: PUSH
71362: EMPTY
71363: LIST
71364: LIST
71365: PUSH
71366: LD_INT 1
71368: PUSH
71369: LD_INT 3
71371: NEG
71372: PUSH
71373: EMPTY
71374: LIST
71375: LIST
71376: PUSH
71377: LD_INT 1
71379: PUSH
71380: LD_INT 2
71382: NEG
71383: PUSH
71384: EMPTY
71385: LIST
71386: LIST
71387: PUSH
71388: LD_INT 0
71390: PUSH
71391: LD_INT 2
71393: NEG
71394: PUSH
71395: EMPTY
71396: LIST
71397: LIST
71398: PUSH
71399: LD_INT 1
71401: NEG
71402: PUSH
71403: LD_INT 3
71405: NEG
71406: PUSH
71407: EMPTY
71408: LIST
71409: LIST
71410: PUSH
71411: LD_INT 1
71413: NEG
71414: PUSH
71415: LD_INT 4
71417: NEG
71418: PUSH
71419: EMPTY
71420: LIST
71421: LIST
71422: PUSH
71423: LD_INT 2
71425: PUSH
71426: LD_INT 2
71428: NEG
71429: PUSH
71430: EMPTY
71431: LIST
71432: LIST
71433: PUSH
71434: LD_INT 2
71436: NEG
71437: PUSH
71438: LD_INT 4
71440: NEG
71441: PUSH
71442: EMPTY
71443: LIST
71444: LIST
71445: PUSH
71446: LD_INT 4
71448: PUSH
71449: LD_INT 0
71451: PUSH
71452: EMPTY
71453: LIST
71454: LIST
71455: PUSH
71456: LD_INT 4
71458: PUSH
71459: LD_INT 1
71461: NEG
71462: PUSH
71463: EMPTY
71464: LIST
71465: LIST
71466: PUSH
71467: LD_INT 5
71469: PUSH
71470: LD_INT 0
71472: PUSH
71473: EMPTY
71474: LIST
71475: LIST
71476: PUSH
71477: LD_INT 5
71479: PUSH
71480: LD_INT 1
71482: PUSH
71483: EMPTY
71484: LIST
71485: LIST
71486: PUSH
71487: LD_INT 4
71489: PUSH
71490: LD_INT 1
71492: PUSH
71493: EMPTY
71494: LIST
71495: LIST
71496: PUSH
71497: LD_INT 3
71499: PUSH
71500: LD_INT 0
71502: PUSH
71503: EMPTY
71504: LIST
71505: LIST
71506: PUSH
71507: LD_INT 3
71509: PUSH
71510: LD_INT 1
71512: NEG
71513: PUSH
71514: EMPTY
71515: LIST
71516: LIST
71517: PUSH
71518: LD_INT 3
71520: PUSH
71521: LD_INT 2
71523: NEG
71524: PUSH
71525: EMPTY
71526: LIST
71527: LIST
71528: PUSH
71529: LD_INT 5
71531: PUSH
71532: LD_INT 2
71534: PUSH
71535: EMPTY
71536: LIST
71537: LIST
71538: PUSH
71539: LD_INT 3
71541: PUSH
71542: LD_INT 3
71544: PUSH
71545: EMPTY
71546: LIST
71547: LIST
71548: PUSH
71549: LD_INT 3
71551: PUSH
71552: LD_INT 2
71554: PUSH
71555: EMPTY
71556: LIST
71557: LIST
71558: PUSH
71559: LD_INT 4
71561: PUSH
71562: LD_INT 3
71564: PUSH
71565: EMPTY
71566: LIST
71567: LIST
71568: PUSH
71569: LD_INT 4
71571: PUSH
71572: LD_INT 4
71574: PUSH
71575: EMPTY
71576: LIST
71577: LIST
71578: PUSH
71579: LD_INT 3
71581: PUSH
71582: LD_INT 4
71584: PUSH
71585: EMPTY
71586: LIST
71587: LIST
71588: PUSH
71589: LD_INT 2
71591: PUSH
71592: LD_INT 3
71594: PUSH
71595: EMPTY
71596: LIST
71597: LIST
71598: PUSH
71599: LD_INT 2
71601: PUSH
71602: LD_INT 2
71604: PUSH
71605: EMPTY
71606: LIST
71607: LIST
71608: PUSH
71609: LD_INT 4
71611: PUSH
71612: LD_INT 2
71614: PUSH
71615: EMPTY
71616: LIST
71617: LIST
71618: PUSH
71619: LD_INT 2
71621: PUSH
71622: LD_INT 4
71624: PUSH
71625: EMPTY
71626: LIST
71627: LIST
71628: PUSH
71629: LD_INT 0
71631: PUSH
71632: LD_INT 4
71634: PUSH
71635: EMPTY
71636: LIST
71637: LIST
71638: PUSH
71639: LD_INT 0
71641: PUSH
71642: LD_INT 3
71644: PUSH
71645: EMPTY
71646: LIST
71647: LIST
71648: PUSH
71649: LD_INT 1
71651: PUSH
71652: LD_INT 4
71654: PUSH
71655: EMPTY
71656: LIST
71657: LIST
71658: PUSH
71659: LD_INT 1
71661: PUSH
71662: LD_INT 5
71664: PUSH
71665: EMPTY
71666: LIST
71667: LIST
71668: PUSH
71669: LD_INT 0
71671: PUSH
71672: LD_INT 5
71674: PUSH
71675: EMPTY
71676: LIST
71677: LIST
71678: PUSH
71679: LD_INT 1
71681: NEG
71682: PUSH
71683: LD_INT 4
71685: PUSH
71686: EMPTY
71687: LIST
71688: LIST
71689: PUSH
71690: LD_INT 1
71692: NEG
71693: PUSH
71694: LD_INT 3
71696: PUSH
71697: EMPTY
71698: LIST
71699: LIST
71700: PUSH
71701: LD_INT 2
71703: PUSH
71704: LD_INT 5
71706: PUSH
71707: EMPTY
71708: LIST
71709: LIST
71710: PUSH
71711: LD_INT 2
71713: NEG
71714: PUSH
71715: LD_INT 3
71717: PUSH
71718: EMPTY
71719: LIST
71720: LIST
71721: PUSH
71722: EMPTY
71723: LIST
71724: LIST
71725: LIST
71726: LIST
71727: LIST
71728: LIST
71729: LIST
71730: LIST
71731: LIST
71732: LIST
71733: LIST
71734: LIST
71735: LIST
71736: LIST
71737: LIST
71738: LIST
71739: LIST
71740: LIST
71741: LIST
71742: LIST
71743: LIST
71744: LIST
71745: LIST
71746: LIST
71747: LIST
71748: LIST
71749: LIST
71750: LIST
71751: LIST
71752: LIST
71753: LIST
71754: LIST
71755: LIST
71756: LIST
71757: LIST
71758: LIST
71759: LIST
71760: LIST
71761: LIST
71762: LIST
71763: LIST
71764: LIST
71765: LIST
71766: LIST
71767: LIST
71768: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
71769: LD_ADDR_VAR 0 34
71773: PUSH
71774: LD_INT 0
71776: PUSH
71777: LD_INT 4
71779: NEG
71780: PUSH
71781: EMPTY
71782: LIST
71783: LIST
71784: PUSH
71785: LD_INT 0
71787: PUSH
71788: LD_INT 5
71790: NEG
71791: PUSH
71792: EMPTY
71793: LIST
71794: LIST
71795: PUSH
71796: LD_INT 1
71798: PUSH
71799: LD_INT 4
71801: NEG
71802: PUSH
71803: EMPTY
71804: LIST
71805: LIST
71806: PUSH
71807: LD_INT 1
71809: PUSH
71810: LD_INT 3
71812: NEG
71813: PUSH
71814: EMPTY
71815: LIST
71816: LIST
71817: PUSH
71818: LD_INT 0
71820: PUSH
71821: LD_INT 3
71823: NEG
71824: PUSH
71825: EMPTY
71826: LIST
71827: LIST
71828: PUSH
71829: LD_INT 1
71831: NEG
71832: PUSH
71833: LD_INT 4
71835: NEG
71836: PUSH
71837: EMPTY
71838: LIST
71839: LIST
71840: PUSH
71841: LD_INT 1
71843: NEG
71844: PUSH
71845: LD_INT 5
71847: NEG
71848: PUSH
71849: EMPTY
71850: LIST
71851: LIST
71852: PUSH
71853: LD_INT 2
71855: PUSH
71856: LD_INT 3
71858: NEG
71859: PUSH
71860: EMPTY
71861: LIST
71862: LIST
71863: PUSH
71864: LD_INT 2
71866: NEG
71867: PUSH
71868: LD_INT 5
71870: NEG
71871: PUSH
71872: EMPTY
71873: LIST
71874: LIST
71875: PUSH
71876: LD_INT 3
71878: PUSH
71879: LD_INT 0
71881: PUSH
71882: EMPTY
71883: LIST
71884: LIST
71885: PUSH
71886: LD_INT 3
71888: PUSH
71889: LD_INT 1
71891: NEG
71892: PUSH
71893: EMPTY
71894: LIST
71895: LIST
71896: PUSH
71897: LD_INT 4
71899: PUSH
71900: LD_INT 0
71902: PUSH
71903: EMPTY
71904: LIST
71905: LIST
71906: PUSH
71907: LD_INT 4
71909: PUSH
71910: LD_INT 1
71912: PUSH
71913: EMPTY
71914: LIST
71915: LIST
71916: PUSH
71917: LD_INT 3
71919: PUSH
71920: LD_INT 1
71922: PUSH
71923: EMPTY
71924: LIST
71925: LIST
71926: PUSH
71927: LD_INT 2
71929: PUSH
71930: LD_INT 0
71932: PUSH
71933: EMPTY
71934: LIST
71935: LIST
71936: PUSH
71937: LD_INT 2
71939: PUSH
71940: LD_INT 1
71942: NEG
71943: PUSH
71944: EMPTY
71945: LIST
71946: LIST
71947: PUSH
71948: LD_INT 2
71950: PUSH
71951: LD_INT 2
71953: NEG
71954: PUSH
71955: EMPTY
71956: LIST
71957: LIST
71958: PUSH
71959: LD_INT 4
71961: PUSH
71962: LD_INT 2
71964: PUSH
71965: EMPTY
71966: LIST
71967: LIST
71968: PUSH
71969: LD_INT 4
71971: PUSH
71972: LD_INT 4
71974: PUSH
71975: EMPTY
71976: LIST
71977: LIST
71978: PUSH
71979: LD_INT 4
71981: PUSH
71982: LD_INT 3
71984: PUSH
71985: EMPTY
71986: LIST
71987: LIST
71988: PUSH
71989: LD_INT 5
71991: PUSH
71992: LD_INT 4
71994: PUSH
71995: EMPTY
71996: LIST
71997: LIST
71998: PUSH
71999: LD_INT 5
72001: PUSH
72002: LD_INT 5
72004: PUSH
72005: EMPTY
72006: LIST
72007: LIST
72008: PUSH
72009: LD_INT 4
72011: PUSH
72012: LD_INT 5
72014: PUSH
72015: EMPTY
72016: LIST
72017: LIST
72018: PUSH
72019: LD_INT 3
72021: PUSH
72022: LD_INT 4
72024: PUSH
72025: EMPTY
72026: LIST
72027: LIST
72028: PUSH
72029: LD_INT 3
72031: PUSH
72032: LD_INT 3
72034: PUSH
72035: EMPTY
72036: LIST
72037: LIST
72038: PUSH
72039: LD_INT 5
72041: PUSH
72042: LD_INT 3
72044: PUSH
72045: EMPTY
72046: LIST
72047: LIST
72048: PUSH
72049: LD_INT 3
72051: PUSH
72052: LD_INT 5
72054: PUSH
72055: EMPTY
72056: LIST
72057: LIST
72058: PUSH
72059: LD_INT 0
72061: PUSH
72062: LD_INT 3
72064: PUSH
72065: EMPTY
72066: LIST
72067: LIST
72068: PUSH
72069: LD_INT 0
72071: PUSH
72072: LD_INT 2
72074: PUSH
72075: EMPTY
72076: LIST
72077: LIST
72078: PUSH
72079: LD_INT 1
72081: PUSH
72082: LD_INT 3
72084: PUSH
72085: EMPTY
72086: LIST
72087: LIST
72088: PUSH
72089: LD_INT 1
72091: PUSH
72092: LD_INT 4
72094: PUSH
72095: EMPTY
72096: LIST
72097: LIST
72098: PUSH
72099: LD_INT 0
72101: PUSH
72102: LD_INT 4
72104: PUSH
72105: EMPTY
72106: LIST
72107: LIST
72108: PUSH
72109: LD_INT 1
72111: NEG
72112: PUSH
72113: LD_INT 3
72115: PUSH
72116: EMPTY
72117: LIST
72118: LIST
72119: PUSH
72120: LD_INT 1
72122: NEG
72123: PUSH
72124: LD_INT 2
72126: PUSH
72127: EMPTY
72128: LIST
72129: LIST
72130: PUSH
72131: LD_INT 2
72133: PUSH
72134: LD_INT 4
72136: PUSH
72137: EMPTY
72138: LIST
72139: LIST
72140: PUSH
72141: LD_INT 2
72143: NEG
72144: PUSH
72145: LD_INT 2
72147: PUSH
72148: EMPTY
72149: LIST
72150: LIST
72151: PUSH
72152: LD_INT 4
72154: NEG
72155: PUSH
72156: LD_INT 0
72158: PUSH
72159: EMPTY
72160: LIST
72161: LIST
72162: PUSH
72163: LD_INT 4
72165: NEG
72166: PUSH
72167: LD_INT 1
72169: NEG
72170: PUSH
72171: EMPTY
72172: LIST
72173: LIST
72174: PUSH
72175: LD_INT 3
72177: NEG
72178: PUSH
72179: LD_INT 0
72181: PUSH
72182: EMPTY
72183: LIST
72184: LIST
72185: PUSH
72186: LD_INT 3
72188: NEG
72189: PUSH
72190: LD_INT 1
72192: PUSH
72193: EMPTY
72194: LIST
72195: LIST
72196: PUSH
72197: LD_INT 4
72199: NEG
72200: PUSH
72201: LD_INT 1
72203: PUSH
72204: EMPTY
72205: LIST
72206: LIST
72207: PUSH
72208: LD_INT 5
72210: NEG
72211: PUSH
72212: LD_INT 0
72214: PUSH
72215: EMPTY
72216: LIST
72217: LIST
72218: PUSH
72219: LD_INT 5
72221: NEG
72222: PUSH
72223: LD_INT 1
72225: NEG
72226: PUSH
72227: EMPTY
72228: LIST
72229: LIST
72230: PUSH
72231: LD_INT 5
72233: NEG
72234: PUSH
72235: LD_INT 2
72237: NEG
72238: PUSH
72239: EMPTY
72240: LIST
72241: LIST
72242: PUSH
72243: LD_INT 3
72245: NEG
72246: PUSH
72247: LD_INT 2
72249: PUSH
72250: EMPTY
72251: LIST
72252: LIST
72253: PUSH
72254: EMPTY
72255: LIST
72256: LIST
72257: LIST
72258: LIST
72259: LIST
72260: LIST
72261: LIST
72262: LIST
72263: LIST
72264: LIST
72265: LIST
72266: LIST
72267: LIST
72268: LIST
72269: LIST
72270: LIST
72271: LIST
72272: LIST
72273: LIST
72274: LIST
72275: LIST
72276: LIST
72277: LIST
72278: LIST
72279: LIST
72280: LIST
72281: LIST
72282: LIST
72283: LIST
72284: LIST
72285: LIST
72286: LIST
72287: LIST
72288: LIST
72289: LIST
72290: LIST
72291: LIST
72292: LIST
72293: LIST
72294: LIST
72295: LIST
72296: LIST
72297: LIST
72298: LIST
72299: LIST
72300: ST_TO_ADDR
// end ; end ;
72301: GO 72304
72303: POP
// case btype of b_depot , b_warehouse :
72304: LD_VAR 0 1
72308: PUSH
72309: LD_INT 0
72311: DOUBLE
72312: EQUAL
72313: IFTRUE 72323
72315: LD_INT 1
72317: DOUBLE
72318: EQUAL
72319: IFTRUE 72323
72321: GO 72524
72323: POP
// case nation of nation_american :
72324: LD_VAR 0 5
72328: PUSH
72329: LD_INT 1
72331: DOUBLE
72332: EQUAL
72333: IFTRUE 72337
72335: GO 72393
72337: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
72338: LD_ADDR_VAR 0 9
72342: PUSH
72343: LD_VAR 0 11
72347: PUSH
72348: LD_VAR 0 12
72352: PUSH
72353: LD_VAR 0 13
72357: PUSH
72358: LD_VAR 0 14
72362: PUSH
72363: LD_VAR 0 15
72367: PUSH
72368: LD_VAR 0 16
72372: PUSH
72373: EMPTY
72374: LIST
72375: LIST
72376: LIST
72377: LIST
72378: LIST
72379: LIST
72380: PUSH
72381: LD_VAR 0 4
72385: PUSH
72386: LD_INT 1
72388: PLUS
72389: ARRAY
72390: ST_TO_ADDR
72391: GO 72522
72393: LD_INT 2
72395: DOUBLE
72396: EQUAL
72397: IFTRUE 72401
72399: GO 72457
72401: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
72402: LD_ADDR_VAR 0 9
72406: PUSH
72407: LD_VAR 0 17
72411: PUSH
72412: LD_VAR 0 18
72416: PUSH
72417: LD_VAR 0 19
72421: PUSH
72422: LD_VAR 0 20
72426: PUSH
72427: LD_VAR 0 21
72431: PUSH
72432: LD_VAR 0 22
72436: PUSH
72437: EMPTY
72438: LIST
72439: LIST
72440: LIST
72441: LIST
72442: LIST
72443: LIST
72444: PUSH
72445: LD_VAR 0 4
72449: PUSH
72450: LD_INT 1
72452: PLUS
72453: ARRAY
72454: ST_TO_ADDR
72455: GO 72522
72457: LD_INT 3
72459: DOUBLE
72460: EQUAL
72461: IFTRUE 72465
72463: GO 72521
72465: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
72466: LD_ADDR_VAR 0 9
72470: PUSH
72471: LD_VAR 0 23
72475: PUSH
72476: LD_VAR 0 24
72480: PUSH
72481: LD_VAR 0 25
72485: PUSH
72486: LD_VAR 0 26
72490: PUSH
72491: LD_VAR 0 27
72495: PUSH
72496: LD_VAR 0 28
72500: PUSH
72501: EMPTY
72502: LIST
72503: LIST
72504: LIST
72505: LIST
72506: LIST
72507: LIST
72508: PUSH
72509: LD_VAR 0 4
72513: PUSH
72514: LD_INT 1
72516: PLUS
72517: ARRAY
72518: ST_TO_ADDR
72519: GO 72522
72521: POP
72522: GO 73077
72524: LD_INT 2
72526: DOUBLE
72527: EQUAL
72528: IFTRUE 72538
72530: LD_INT 3
72532: DOUBLE
72533: EQUAL
72534: IFTRUE 72538
72536: GO 72594
72538: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
72539: LD_ADDR_VAR 0 9
72543: PUSH
72544: LD_VAR 0 29
72548: PUSH
72549: LD_VAR 0 30
72553: PUSH
72554: LD_VAR 0 31
72558: PUSH
72559: LD_VAR 0 32
72563: PUSH
72564: LD_VAR 0 33
72568: PUSH
72569: LD_VAR 0 34
72573: PUSH
72574: EMPTY
72575: LIST
72576: LIST
72577: LIST
72578: LIST
72579: LIST
72580: LIST
72581: PUSH
72582: LD_VAR 0 4
72586: PUSH
72587: LD_INT 1
72589: PLUS
72590: ARRAY
72591: ST_TO_ADDR
72592: GO 73077
72594: LD_INT 16
72596: DOUBLE
72597: EQUAL
72598: IFTRUE 72656
72600: LD_INT 17
72602: DOUBLE
72603: EQUAL
72604: IFTRUE 72656
72606: LD_INT 18
72608: DOUBLE
72609: EQUAL
72610: IFTRUE 72656
72612: LD_INT 19
72614: DOUBLE
72615: EQUAL
72616: IFTRUE 72656
72618: LD_INT 22
72620: DOUBLE
72621: EQUAL
72622: IFTRUE 72656
72624: LD_INT 20
72626: DOUBLE
72627: EQUAL
72628: IFTRUE 72656
72630: LD_INT 21
72632: DOUBLE
72633: EQUAL
72634: IFTRUE 72656
72636: LD_INT 23
72638: DOUBLE
72639: EQUAL
72640: IFTRUE 72656
72642: LD_INT 24
72644: DOUBLE
72645: EQUAL
72646: IFTRUE 72656
72648: LD_INT 25
72650: DOUBLE
72651: EQUAL
72652: IFTRUE 72656
72654: GO 72712
72656: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
72657: LD_ADDR_VAR 0 9
72661: PUSH
72662: LD_VAR 0 35
72666: PUSH
72667: LD_VAR 0 36
72671: PUSH
72672: LD_VAR 0 37
72676: PUSH
72677: LD_VAR 0 38
72681: PUSH
72682: LD_VAR 0 39
72686: PUSH
72687: LD_VAR 0 40
72691: PUSH
72692: EMPTY
72693: LIST
72694: LIST
72695: LIST
72696: LIST
72697: LIST
72698: LIST
72699: PUSH
72700: LD_VAR 0 4
72704: PUSH
72705: LD_INT 1
72707: PLUS
72708: ARRAY
72709: ST_TO_ADDR
72710: GO 73077
72712: LD_INT 6
72714: DOUBLE
72715: EQUAL
72716: IFTRUE 72768
72718: LD_INT 7
72720: DOUBLE
72721: EQUAL
72722: IFTRUE 72768
72724: LD_INT 8
72726: DOUBLE
72727: EQUAL
72728: IFTRUE 72768
72730: LD_INT 13
72732: DOUBLE
72733: EQUAL
72734: IFTRUE 72768
72736: LD_INT 12
72738: DOUBLE
72739: EQUAL
72740: IFTRUE 72768
72742: LD_INT 15
72744: DOUBLE
72745: EQUAL
72746: IFTRUE 72768
72748: LD_INT 11
72750: DOUBLE
72751: EQUAL
72752: IFTRUE 72768
72754: LD_INT 14
72756: DOUBLE
72757: EQUAL
72758: IFTRUE 72768
72760: LD_INT 10
72762: DOUBLE
72763: EQUAL
72764: IFTRUE 72768
72766: GO 72824
72768: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
72769: LD_ADDR_VAR 0 9
72773: PUSH
72774: LD_VAR 0 41
72778: PUSH
72779: LD_VAR 0 42
72783: PUSH
72784: LD_VAR 0 43
72788: PUSH
72789: LD_VAR 0 44
72793: PUSH
72794: LD_VAR 0 45
72798: PUSH
72799: LD_VAR 0 46
72803: PUSH
72804: EMPTY
72805: LIST
72806: LIST
72807: LIST
72808: LIST
72809: LIST
72810: LIST
72811: PUSH
72812: LD_VAR 0 4
72816: PUSH
72817: LD_INT 1
72819: PLUS
72820: ARRAY
72821: ST_TO_ADDR
72822: GO 73077
72824: LD_INT 36
72826: DOUBLE
72827: EQUAL
72828: IFTRUE 72832
72830: GO 72888
72832: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
72833: LD_ADDR_VAR 0 9
72837: PUSH
72838: LD_VAR 0 47
72842: PUSH
72843: LD_VAR 0 48
72847: PUSH
72848: LD_VAR 0 49
72852: PUSH
72853: LD_VAR 0 50
72857: PUSH
72858: LD_VAR 0 51
72862: PUSH
72863: LD_VAR 0 52
72867: PUSH
72868: EMPTY
72869: LIST
72870: LIST
72871: LIST
72872: LIST
72873: LIST
72874: LIST
72875: PUSH
72876: LD_VAR 0 4
72880: PUSH
72881: LD_INT 1
72883: PLUS
72884: ARRAY
72885: ST_TO_ADDR
72886: GO 73077
72888: LD_INT 4
72890: DOUBLE
72891: EQUAL
72892: IFTRUE 72914
72894: LD_INT 5
72896: DOUBLE
72897: EQUAL
72898: IFTRUE 72914
72900: LD_INT 34
72902: DOUBLE
72903: EQUAL
72904: IFTRUE 72914
72906: LD_INT 37
72908: DOUBLE
72909: EQUAL
72910: IFTRUE 72914
72912: GO 72970
72914: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
72915: LD_ADDR_VAR 0 9
72919: PUSH
72920: LD_VAR 0 53
72924: PUSH
72925: LD_VAR 0 54
72929: PUSH
72930: LD_VAR 0 55
72934: PUSH
72935: LD_VAR 0 56
72939: PUSH
72940: LD_VAR 0 57
72944: PUSH
72945: LD_VAR 0 58
72949: PUSH
72950: EMPTY
72951: LIST
72952: LIST
72953: LIST
72954: LIST
72955: LIST
72956: LIST
72957: PUSH
72958: LD_VAR 0 4
72962: PUSH
72963: LD_INT 1
72965: PLUS
72966: ARRAY
72967: ST_TO_ADDR
72968: GO 73077
72970: LD_INT 31
72972: DOUBLE
72973: EQUAL
72974: IFTRUE 73020
72976: LD_INT 32
72978: DOUBLE
72979: EQUAL
72980: IFTRUE 73020
72982: LD_INT 33
72984: DOUBLE
72985: EQUAL
72986: IFTRUE 73020
72988: LD_INT 27
72990: DOUBLE
72991: EQUAL
72992: IFTRUE 73020
72994: LD_INT 26
72996: DOUBLE
72997: EQUAL
72998: IFTRUE 73020
73000: LD_INT 28
73002: DOUBLE
73003: EQUAL
73004: IFTRUE 73020
73006: LD_INT 29
73008: DOUBLE
73009: EQUAL
73010: IFTRUE 73020
73012: LD_INT 30
73014: DOUBLE
73015: EQUAL
73016: IFTRUE 73020
73018: GO 73076
73020: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
73021: LD_ADDR_VAR 0 9
73025: PUSH
73026: LD_VAR 0 59
73030: PUSH
73031: LD_VAR 0 60
73035: PUSH
73036: LD_VAR 0 61
73040: PUSH
73041: LD_VAR 0 62
73045: PUSH
73046: LD_VAR 0 63
73050: PUSH
73051: LD_VAR 0 64
73055: PUSH
73056: EMPTY
73057: LIST
73058: LIST
73059: LIST
73060: LIST
73061: LIST
73062: LIST
73063: PUSH
73064: LD_VAR 0 4
73068: PUSH
73069: LD_INT 1
73071: PLUS
73072: ARRAY
73073: ST_TO_ADDR
73074: GO 73077
73076: POP
// temp_list2 = [ ] ;
73077: LD_ADDR_VAR 0 10
73081: PUSH
73082: EMPTY
73083: ST_TO_ADDR
// for i in temp_list do
73084: LD_ADDR_VAR 0 8
73088: PUSH
73089: LD_VAR 0 9
73093: PUSH
73094: FOR_IN
73095: IFFALSE 73147
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
73097: LD_ADDR_VAR 0 10
73101: PUSH
73102: LD_VAR 0 10
73106: PUSH
73107: LD_VAR 0 8
73111: PUSH
73112: LD_INT 1
73114: ARRAY
73115: PUSH
73116: LD_VAR 0 2
73120: PLUS
73121: PUSH
73122: LD_VAR 0 8
73126: PUSH
73127: LD_INT 2
73129: ARRAY
73130: PUSH
73131: LD_VAR 0 3
73135: PLUS
73136: PUSH
73137: EMPTY
73138: LIST
73139: LIST
73140: PUSH
73141: EMPTY
73142: LIST
73143: ADD
73144: ST_TO_ADDR
73145: GO 73094
73147: POP
73148: POP
// result = temp_list2 ;
73149: LD_ADDR_VAR 0 7
73153: PUSH
73154: LD_VAR 0 10
73158: ST_TO_ADDR
// end ;
73159: LD_VAR 0 7
73163: RET
// export function EnemyInRange ( unit , dist ) ; begin
73164: LD_INT 0
73166: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
73167: LD_ADDR_VAR 0 3
73171: PUSH
73172: LD_VAR 0 1
73176: PPUSH
73177: CALL_OW 255
73181: PPUSH
73182: LD_VAR 0 1
73186: PPUSH
73187: CALL_OW 250
73191: PPUSH
73192: LD_VAR 0 1
73196: PPUSH
73197: CALL_OW 251
73201: PPUSH
73202: LD_VAR 0 2
73206: PPUSH
73207: CALL 46537 0 4
73211: PUSH
73212: LD_INT 4
73214: ARRAY
73215: ST_TO_ADDR
// end ;
73216: LD_VAR 0 3
73220: RET
// export function PlayerSeeMe ( unit ) ; begin
73221: LD_INT 0
73223: PPUSH
// result := See ( your_side , unit ) ;
73224: LD_ADDR_VAR 0 2
73228: PUSH
73229: LD_OWVAR 2
73233: PPUSH
73234: LD_VAR 0 1
73238: PPUSH
73239: CALL_OW 292
73243: ST_TO_ADDR
// end ;
73244: LD_VAR 0 2
73248: RET
// export function ReverseDir ( unit ) ; begin
73249: LD_INT 0
73251: PPUSH
// if not unit then
73252: LD_VAR 0 1
73256: NOT
73257: IFFALSE 73261
// exit ;
73259: GO 73284
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
73261: LD_ADDR_VAR 0 2
73265: PUSH
73266: LD_VAR 0 1
73270: PPUSH
73271: CALL_OW 254
73275: PUSH
73276: LD_INT 3
73278: PLUS
73279: PUSH
73280: LD_INT 6
73282: MOD
73283: ST_TO_ADDR
// end ;
73284: LD_VAR 0 2
73288: RET
// export function ReverseArray ( array ) ; var i ; begin
73289: LD_INT 0
73291: PPUSH
73292: PPUSH
// if not array then
73293: LD_VAR 0 1
73297: NOT
73298: IFFALSE 73302
// exit ;
73300: GO 73357
// result := [ ] ;
73302: LD_ADDR_VAR 0 2
73306: PUSH
73307: EMPTY
73308: ST_TO_ADDR
// for i := array downto 1 do
73309: LD_ADDR_VAR 0 3
73313: PUSH
73314: DOUBLE
73315: LD_VAR 0 1
73319: INC
73320: ST_TO_ADDR
73321: LD_INT 1
73323: PUSH
73324: FOR_DOWNTO
73325: IFFALSE 73355
// result := Join ( result , array [ i ] ) ;
73327: LD_ADDR_VAR 0 2
73331: PUSH
73332: LD_VAR 0 2
73336: PPUSH
73337: LD_VAR 0 1
73341: PUSH
73342: LD_VAR 0 3
73346: ARRAY
73347: PPUSH
73348: CALL 78013 0 2
73352: ST_TO_ADDR
73353: GO 73324
73355: POP
73356: POP
// end ;
73357: LD_VAR 0 2
73361: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
73362: LD_INT 0
73364: PPUSH
73365: PPUSH
73366: PPUSH
73367: PPUSH
73368: PPUSH
73369: PPUSH
// if not unit or not hexes then
73370: LD_VAR 0 1
73374: NOT
73375: PUSH
73376: LD_VAR 0 2
73380: NOT
73381: OR
73382: IFFALSE 73386
// exit ;
73384: GO 73509
// dist := 9999 ;
73386: LD_ADDR_VAR 0 5
73390: PUSH
73391: LD_INT 9999
73393: ST_TO_ADDR
// for i = 1 to hexes do
73394: LD_ADDR_VAR 0 4
73398: PUSH
73399: DOUBLE
73400: LD_INT 1
73402: DEC
73403: ST_TO_ADDR
73404: LD_VAR 0 2
73408: PUSH
73409: FOR_TO
73410: IFFALSE 73497
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
73412: LD_ADDR_VAR 0 6
73416: PUSH
73417: LD_VAR 0 1
73421: PPUSH
73422: LD_VAR 0 2
73426: PUSH
73427: LD_VAR 0 4
73431: ARRAY
73432: PUSH
73433: LD_INT 1
73435: ARRAY
73436: PPUSH
73437: LD_VAR 0 2
73441: PUSH
73442: LD_VAR 0 4
73446: ARRAY
73447: PUSH
73448: LD_INT 2
73450: ARRAY
73451: PPUSH
73452: CALL_OW 297
73456: ST_TO_ADDR
// if tdist < dist then
73457: LD_VAR 0 6
73461: PUSH
73462: LD_VAR 0 5
73466: LESS
73467: IFFALSE 73495
// begin hex := hexes [ i ] ;
73469: LD_ADDR_VAR 0 8
73473: PUSH
73474: LD_VAR 0 2
73478: PUSH
73479: LD_VAR 0 4
73483: ARRAY
73484: ST_TO_ADDR
// dist := tdist ;
73485: LD_ADDR_VAR 0 5
73489: PUSH
73490: LD_VAR 0 6
73494: ST_TO_ADDR
// end ; end ;
73495: GO 73409
73497: POP
73498: POP
// result := hex ;
73499: LD_ADDR_VAR 0 3
73503: PUSH
73504: LD_VAR 0 8
73508: ST_TO_ADDR
// end ;
73509: LD_VAR 0 3
73513: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
73514: LD_INT 0
73516: PPUSH
73517: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
73518: LD_VAR 0 1
73522: NOT
73523: PUSH
73524: LD_VAR 0 1
73528: PUSH
73529: LD_INT 21
73531: PUSH
73532: LD_INT 2
73534: PUSH
73535: EMPTY
73536: LIST
73537: LIST
73538: PUSH
73539: LD_INT 23
73541: PUSH
73542: LD_INT 2
73544: PUSH
73545: EMPTY
73546: LIST
73547: LIST
73548: PUSH
73549: EMPTY
73550: LIST
73551: LIST
73552: PPUSH
73553: CALL_OW 69
73557: IN
73558: NOT
73559: OR
73560: IFFALSE 73564
// exit ;
73562: GO 73611
// for i = 1 to 3 do
73564: LD_ADDR_VAR 0 3
73568: PUSH
73569: DOUBLE
73570: LD_INT 1
73572: DEC
73573: ST_TO_ADDR
73574: LD_INT 3
73576: PUSH
73577: FOR_TO
73578: IFFALSE 73609
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
73580: LD_VAR 0 1
73584: PPUSH
73585: CALL_OW 250
73589: PPUSH
73590: LD_VAR 0 1
73594: PPUSH
73595: CALL_OW 251
73599: PPUSH
73600: LD_INT 1
73602: PPUSH
73603: CALL_OW 453
73607: GO 73577
73609: POP
73610: POP
// end ;
73611: LD_VAR 0 2
73615: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
73616: LD_INT 0
73618: PPUSH
73619: PPUSH
73620: PPUSH
73621: PPUSH
73622: PPUSH
73623: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
73624: LD_VAR 0 1
73628: NOT
73629: PUSH
73630: LD_VAR 0 2
73634: NOT
73635: OR
73636: PUSH
73637: LD_VAR 0 1
73641: PPUSH
73642: CALL_OW 314
73646: OR
73647: IFFALSE 73651
// exit ;
73649: GO 74118
// if GetLives ( i ) < 250 then
73651: LD_VAR 0 4
73655: PPUSH
73656: CALL_OW 256
73660: PUSH
73661: LD_INT 250
73663: LESS
73664: IFFALSE 73677
// begin ComAutodestruct ( i ) ;
73666: LD_VAR 0 4
73670: PPUSH
73671: CALL 73514 0 1
// exit ;
73675: GO 74118
// end ; x := GetX ( enemy_unit ) ;
73677: LD_ADDR_VAR 0 7
73681: PUSH
73682: LD_VAR 0 2
73686: PPUSH
73687: CALL_OW 250
73691: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
73692: LD_ADDR_VAR 0 8
73696: PUSH
73697: LD_VAR 0 2
73701: PPUSH
73702: CALL_OW 251
73706: ST_TO_ADDR
// if not x or not y then
73707: LD_VAR 0 7
73711: NOT
73712: PUSH
73713: LD_VAR 0 8
73717: NOT
73718: OR
73719: IFFALSE 73723
// exit ;
73721: GO 74118
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
73723: LD_ADDR_VAR 0 6
73727: PUSH
73728: LD_VAR 0 7
73732: PPUSH
73733: LD_INT 0
73735: PPUSH
73736: LD_INT 4
73738: PPUSH
73739: CALL_OW 272
73743: PUSH
73744: LD_VAR 0 8
73748: PPUSH
73749: LD_INT 0
73751: PPUSH
73752: LD_INT 4
73754: PPUSH
73755: CALL_OW 273
73759: PUSH
73760: EMPTY
73761: LIST
73762: LIST
73763: PUSH
73764: LD_VAR 0 7
73768: PPUSH
73769: LD_INT 1
73771: PPUSH
73772: LD_INT 4
73774: PPUSH
73775: CALL_OW 272
73779: PUSH
73780: LD_VAR 0 8
73784: PPUSH
73785: LD_INT 1
73787: PPUSH
73788: LD_INT 4
73790: PPUSH
73791: CALL_OW 273
73795: PUSH
73796: EMPTY
73797: LIST
73798: LIST
73799: PUSH
73800: LD_VAR 0 7
73804: PPUSH
73805: LD_INT 2
73807: PPUSH
73808: LD_INT 4
73810: PPUSH
73811: CALL_OW 272
73815: PUSH
73816: LD_VAR 0 8
73820: PPUSH
73821: LD_INT 2
73823: PPUSH
73824: LD_INT 4
73826: PPUSH
73827: CALL_OW 273
73831: PUSH
73832: EMPTY
73833: LIST
73834: LIST
73835: PUSH
73836: LD_VAR 0 7
73840: PPUSH
73841: LD_INT 3
73843: PPUSH
73844: LD_INT 4
73846: PPUSH
73847: CALL_OW 272
73851: PUSH
73852: LD_VAR 0 8
73856: PPUSH
73857: LD_INT 3
73859: PPUSH
73860: LD_INT 4
73862: PPUSH
73863: CALL_OW 273
73867: PUSH
73868: EMPTY
73869: LIST
73870: LIST
73871: PUSH
73872: LD_VAR 0 7
73876: PPUSH
73877: LD_INT 4
73879: PPUSH
73880: LD_INT 4
73882: PPUSH
73883: CALL_OW 272
73887: PUSH
73888: LD_VAR 0 8
73892: PPUSH
73893: LD_INT 4
73895: PPUSH
73896: LD_INT 4
73898: PPUSH
73899: CALL_OW 273
73903: PUSH
73904: EMPTY
73905: LIST
73906: LIST
73907: PUSH
73908: LD_VAR 0 7
73912: PPUSH
73913: LD_INT 5
73915: PPUSH
73916: LD_INT 4
73918: PPUSH
73919: CALL_OW 272
73923: PUSH
73924: LD_VAR 0 8
73928: PPUSH
73929: LD_INT 5
73931: PPUSH
73932: LD_INT 4
73934: PPUSH
73935: CALL_OW 273
73939: PUSH
73940: EMPTY
73941: LIST
73942: LIST
73943: PUSH
73944: EMPTY
73945: LIST
73946: LIST
73947: LIST
73948: LIST
73949: LIST
73950: LIST
73951: ST_TO_ADDR
// for i = tmp downto 1 do
73952: LD_ADDR_VAR 0 4
73956: PUSH
73957: DOUBLE
73958: LD_VAR 0 6
73962: INC
73963: ST_TO_ADDR
73964: LD_INT 1
73966: PUSH
73967: FOR_DOWNTO
73968: IFFALSE 74069
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
73970: LD_VAR 0 6
73974: PUSH
73975: LD_VAR 0 4
73979: ARRAY
73980: PUSH
73981: LD_INT 1
73983: ARRAY
73984: PPUSH
73985: LD_VAR 0 6
73989: PUSH
73990: LD_VAR 0 4
73994: ARRAY
73995: PUSH
73996: LD_INT 2
73998: ARRAY
73999: PPUSH
74000: CALL_OW 488
74004: NOT
74005: PUSH
74006: LD_VAR 0 6
74010: PUSH
74011: LD_VAR 0 4
74015: ARRAY
74016: PUSH
74017: LD_INT 1
74019: ARRAY
74020: PPUSH
74021: LD_VAR 0 6
74025: PUSH
74026: LD_VAR 0 4
74030: ARRAY
74031: PUSH
74032: LD_INT 2
74034: ARRAY
74035: PPUSH
74036: CALL_OW 428
74040: PUSH
74041: LD_INT 0
74043: NONEQUAL
74044: OR
74045: IFFALSE 74067
// tmp := Delete ( tmp , i ) ;
74047: LD_ADDR_VAR 0 6
74051: PUSH
74052: LD_VAR 0 6
74056: PPUSH
74057: LD_VAR 0 4
74061: PPUSH
74062: CALL_OW 3
74066: ST_TO_ADDR
74067: GO 73967
74069: POP
74070: POP
// j := GetClosestHex ( unit , tmp ) ;
74071: LD_ADDR_VAR 0 5
74075: PUSH
74076: LD_VAR 0 1
74080: PPUSH
74081: LD_VAR 0 6
74085: PPUSH
74086: CALL 73362 0 2
74090: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
74091: LD_VAR 0 1
74095: PPUSH
74096: LD_VAR 0 5
74100: PUSH
74101: LD_INT 1
74103: ARRAY
74104: PPUSH
74105: LD_VAR 0 5
74109: PUSH
74110: LD_INT 2
74112: ARRAY
74113: PPUSH
74114: CALL_OW 111
// end ;
74118: LD_VAR 0 3
74122: RET
// export function PrepareApemanSoldier ( ) ; begin
74123: LD_INT 0
74125: PPUSH
// uc_nation := 0 ;
74126: LD_ADDR_OWVAR 21
74130: PUSH
74131: LD_INT 0
74133: ST_TO_ADDR
// hc_sex := sex_male ;
74134: LD_ADDR_OWVAR 27
74138: PUSH
74139: LD_INT 1
74141: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
74142: LD_ADDR_OWVAR 28
74146: PUSH
74147: LD_INT 15
74149: ST_TO_ADDR
// hc_gallery :=  ;
74150: LD_ADDR_OWVAR 33
74154: PUSH
74155: LD_STRING 
74157: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74158: LD_ADDR_OWVAR 31
74162: PUSH
74163: LD_INT 0
74165: PPUSH
74166: LD_INT 3
74168: PPUSH
74169: CALL_OW 12
74173: PUSH
74174: LD_INT 0
74176: PPUSH
74177: LD_INT 3
74179: PPUSH
74180: CALL_OW 12
74184: PUSH
74185: LD_INT 0
74187: PUSH
74188: LD_INT 0
74190: PUSH
74191: EMPTY
74192: LIST
74193: LIST
74194: LIST
74195: LIST
74196: ST_TO_ADDR
// end ;
74197: LD_VAR 0 1
74201: RET
// export function PrepareApemanEngineer ( ) ; begin
74202: LD_INT 0
74204: PPUSH
// uc_nation := 0 ;
74205: LD_ADDR_OWVAR 21
74209: PUSH
74210: LD_INT 0
74212: ST_TO_ADDR
// hc_sex := sex_male ;
74213: LD_ADDR_OWVAR 27
74217: PUSH
74218: LD_INT 1
74220: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
74221: LD_ADDR_OWVAR 28
74225: PUSH
74226: LD_INT 16
74228: ST_TO_ADDR
// hc_gallery :=  ;
74229: LD_ADDR_OWVAR 33
74233: PUSH
74234: LD_STRING 
74236: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74237: LD_ADDR_OWVAR 31
74241: PUSH
74242: LD_INT 0
74244: PPUSH
74245: LD_INT 3
74247: PPUSH
74248: CALL_OW 12
74252: PUSH
74253: LD_INT 0
74255: PPUSH
74256: LD_INT 3
74258: PPUSH
74259: CALL_OW 12
74263: PUSH
74264: LD_INT 0
74266: PUSH
74267: LD_INT 0
74269: PUSH
74270: EMPTY
74271: LIST
74272: LIST
74273: LIST
74274: LIST
74275: ST_TO_ADDR
// end ;
74276: LD_VAR 0 1
74280: RET
// export function PrepareApeman ( agressivity ) ; begin
74281: LD_INT 0
74283: PPUSH
// uc_side := 0 ;
74284: LD_ADDR_OWVAR 20
74288: PUSH
74289: LD_INT 0
74291: ST_TO_ADDR
// uc_nation := 0 ;
74292: LD_ADDR_OWVAR 21
74296: PUSH
74297: LD_INT 0
74299: ST_TO_ADDR
// hc_sex := sex_male ;
74300: LD_ADDR_OWVAR 27
74304: PUSH
74305: LD_INT 1
74307: ST_TO_ADDR
// hc_class := class_apeman ;
74308: LD_ADDR_OWVAR 28
74312: PUSH
74313: LD_INT 12
74315: ST_TO_ADDR
// hc_gallery :=  ;
74316: LD_ADDR_OWVAR 33
74320: PUSH
74321: LD_STRING 
74323: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
74324: LD_ADDR_OWVAR 35
74328: PUSH
74329: LD_VAR 0 1
74333: NEG
74334: PPUSH
74335: LD_VAR 0 1
74339: PPUSH
74340: CALL_OW 12
74344: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74345: LD_ADDR_OWVAR 31
74349: PUSH
74350: LD_INT 0
74352: PPUSH
74353: LD_INT 3
74355: PPUSH
74356: CALL_OW 12
74360: PUSH
74361: LD_INT 0
74363: PPUSH
74364: LD_INT 3
74366: PPUSH
74367: CALL_OW 12
74371: PUSH
74372: LD_INT 0
74374: PUSH
74375: LD_INT 0
74377: PUSH
74378: EMPTY
74379: LIST
74380: LIST
74381: LIST
74382: LIST
74383: ST_TO_ADDR
// end ;
74384: LD_VAR 0 2
74388: RET
// export function PrepareTiger ( agressivity ) ; begin
74389: LD_INT 0
74391: PPUSH
// uc_side := 0 ;
74392: LD_ADDR_OWVAR 20
74396: PUSH
74397: LD_INT 0
74399: ST_TO_ADDR
// uc_nation := 0 ;
74400: LD_ADDR_OWVAR 21
74404: PUSH
74405: LD_INT 0
74407: ST_TO_ADDR
// hc_class := class_tiger ;
74408: LD_ADDR_OWVAR 28
74412: PUSH
74413: LD_INT 14
74415: ST_TO_ADDR
// hc_gallery :=  ;
74416: LD_ADDR_OWVAR 33
74420: PUSH
74421: LD_STRING 
74423: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
74424: LD_ADDR_OWVAR 35
74428: PUSH
74429: LD_VAR 0 1
74433: NEG
74434: PPUSH
74435: LD_VAR 0 1
74439: PPUSH
74440: CALL_OW 12
74444: ST_TO_ADDR
// end ;
74445: LD_VAR 0 2
74449: RET
// export function PrepareEnchidna ( ) ; begin
74450: LD_INT 0
74452: PPUSH
// uc_side := 0 ;
74453: LD_ADDR_OWVAR 20
74457: PUSH
74458: LD_INT 0
74460: ST_TO_ADDR
// uc_nation := 0 ;
74461: LD_ADDR_OWVAR 21
74465: PUSH
74466: LD_INT 0
74468: ST_TO_ADDR
// hc_class := class_baggie ;
74469: LD_ADDR_OWVAR 28
74473: PUSH
74474: LD_INT 13
74476: ST_TO_ADDR
// hc_gallery :=  ;
74477: LD_ADDR_OWVAR 33
74481: PUSH
74482: LD_STRING 
74484: ST_TO_ADDR
// end ;
74485: LD_VAR 0 1
74489: RET
// export function PrepareFrog ( ) ; begin
74490: LD_INT 0
74492: PPUSH
// uc_side := 0 ;
74493: LD_ADDR_OWVAR 20
74497: PUSH
74498: LD_INT 0
74500: ST_TO_ADDR
// uc_nation := 0 ;
74501: LD_ADDR_OWVAR 21
74505: PUSH
74506: LD_INT 0
74508: ST_TO_ADDR
// hc_class := class_frog ;
74509: LD_ADDR_OWVAR 28
74513: PUSH
74514: LD_INT 19
74516: ST_TO_ADDR
// hc_gallery :=  ;
74517: LD_ADDR_OWVAR 33
74521: PUSH
74522: LD_STRING 
74524: ST_TO_ADDR
// end ;
74525: LD_VAR 0 1
74529: RET
// export function PrepareFish ( ) ; begin
74530: LD_INT 0
74532: PPUSH
// uc_side := 0 ;
74533: LD_ADDR_OWVAR 20
74537: PUSH
74538: LD_INT 0
74540: ST_TO_ADDR
// uc_nation := 0 ;
74541: LD_ADDR_OWVAR 21
74545: PUSH
74546: LD_INT 0
74548: ST_TO_ADDR
// hc_class := class_fish ;
74549: LD_ADDR_OWVAR 28
74553: PUSH
74554: LD_INT 20
74556: ST_TO_ADDR
// hc_gallery :=  ;
74557: LD_ADDR_OWVAR 33
74561: PUSH
74562: LD_STRING 
74564: ST_TO_ADDR
// end ;
74565: LD_VAR 0 1
74569: RET
// export function PrepareBird ( ) ; begin
74570: LD_INT 0
74572: PPUSH
// uc_side := 0 ;
74573: LD_ADDR_OWVAR 20
74577: PUSH
74578: LD_INT 0
74580: ST_TO_ADDR
// uc_nation := 0 ;
74581: LD_ADDR_OWVAR 21
74585: PUSH
74586: LD_INT 0
74588: ST_TO_ADDR
// hc_class := class_phororhacos ;
74589: LD_ADDR_OWVAR 28
74593: PUSH
74594: LD_INT 18
74596: ST_TO_ADDR
// hc_gallery :=  ;
74597: LD_ADDR_OWVAR 33
74601: PUSH
74602: LD_STRING 
74604: ST_TO_ADDR
// end ;
74605: LD_VAR 0 1
74609: RET
// export function PrepareHorse ( ) ; begin
74610: LD_INT 0
74612: PPUSH
// uc_side := 0 ;
74613: LD_ADDR_OWVAR 20
74617: PUSH
74618: LD_INT 0
74620: ST_TO_ADDR
// uc_nation := 0 ;
74621: LD_ADDR_OWVAR 21
74625: PUSH
74626: LD_INT 0
74628: ST_TO_ADDR
// hc_class := class_horse ;
74629: LD_ADDR_OWVAR 28
74633: PUSH
74634: LD_INT 21
74636: ST_TO_ADDR
// hc_gallery :=  ;
74637: LD_ADDR_OWVAR 33
74641: PUSH
74642: LD_STRING 
74644: ST_TO_ADDR
// end ;
74645: LD_VAR 0 1
74649: RET
// export function PrepareMastodont ( ) ; begin
74650: LD_INT 0
74652: PPUSH
// uc_side := 0 ;
74653: LD_ADDR_OWVAR 20
74657: PUSH
74658: LD_INT 0
74660: ST_TO_ADDR
// uc_nation := 0 ;
74661: LD_ADDR_OWVAR 21
74665: PUSH
74666: LD_INT 0
74668: ST_TO_ADDR
// vc_chassis := class_mastodont ;
74669: LD_ADDR_OWVAR 37
74673: PUSH
74674: LD_INT 31
74676: ST_TO_ADDR
// vc_control := control_rider ;
74677: LD_ADDR_OWVAR 38
74681: PUSH
74682: LD_INT 4
74684: ST_TO_ADDR
// end ;
74685: LD_VAR 0 1
74689: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
74690: LD_INT 0
74692: PPUSH
74693: PPUSH
74694: PPUSH
// uc_side = 0 ;
74695: LD_ADDR_OWVAR 20
74699: PUSH
74700: LD_INT 0
74702: ST_TO_ADDR
// uc_nation = 0 ;
74703: LD_ADDR_OWVAR 21
74707: PUSH
74708: LD_INT 0
74710: ST_TO_ADDR
// InitHc_All ( ) ;
74711: CALL_OW 584
// InitVc ;
74715: CALL_OW 20
// if mastodonts then
74719: LD_VAR 0 6
74723: IFFALSE 74790
// for i = 1 to mastodonts do
74725: LD_ADDR_VAR 0 11
74729: PUSH
74730: DOUBLE
74731: LD_INT 1
74733: DEC
74734: ST_TO_ADDR
74735: LD_VAR 0 6
74739: PUSH
74740: FOR_TO
74741: IFFALSE 74788
// begin vc_chassis := 31 ;
74743: LD_ADDR_OWVAR 37
74747: PUSH
74748: LD_INT 31
74750: ST_TO_ADDR
// vc_control := control_rider ;
74751: LD_ADDR_OWVAR 38
74755: PUSH
74756: LD_INT 4
74758: ST_TO_ADDR
// animal := CreateVehicle ;
74759: LD_ADDR_VAR 0 12
74763: PUSH
74764: CALL_OW 45
74768: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74769: LD_VAR 0 12
74773: PPUSH
74774: LD_VAR 0 8
74778: PPUSH
74779: LD_INT 0
74781: PPUSH
74782: CALL 76918 0 3
// end ;
74786: GO 74740
74788: POP
74789: POP
// if horses then
74790: LD_VAR 0 5
74794: IFFALSE 74861
// for i = 1 to horses do
74796: LD_ADDR_VAR 0 11
74800: PUSH
74801: DOUBLE
74802: LD_INT 1
74804: DEC
74805: ST_TO_ADDR
74806: LD_VAR 0 5
74810: PUSH
74811: FOR_TO
74812: IFFALSE 74859
// begin hc_class := 21 ;
74814: LD_ADDR_OWVAR 28
74818: PUSH
74819: LD_INT 21
74821: ST_TO_ADDR
// hc_gallery :=  ;
74822: LD_ADDR_OWVAR 33
74826: PUSH
74827: LD_STRING 
74829: ST_TO_ADDR
// animal := CreateHuman ;
74830: LD_ADDR_VAR 0 12
74834: PUSH
74835: CALL_OW 44
74839: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74840: LD_VAR 0 12
74844: PPUSH
74845: LD_VAR 0 8
74849: PPUSH
74850: LD_INT 0
74852: PPUSH
74853: CALL 76918 0 3
// end ;
74857: GO 74811
74859: POP
74860: POP
// if birds then
74861: LD_VAR 0 1
74865: IFFALSE 74932
// for i = 1 to birds do
74867: LD_ADDR_VAR 0 11
74871: PUSH
74872: DOUBLE
74873: LD_INT 1
74875: DEC
74876: ST_TO_ADDR
74877: LD_VAR 0 1
74881: PUSH
74882: FOR_TO
74883: IFFALSE 74930
// begin hc_class := 18 ;
74885: LD_ADDR_OWVAR 28
74889: PUSH
74890: LD_INT 18
74892: ST_TO_ADDR
// hc_gallery =  ;
74893: LD_ADDR_OWVAR 33
74897: PUSH
74898: LD_STRING 
74900: ST_TO_ADDR
// animal := CreateHuman ;
74901: LD_ADDR_VAR 0 12
74905: PUSH
74906: CALL_OW 44
74910: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74911: LD_VAR 0 12
74915: PPUSH
74916: LD_VAR 0 8
74920: PPUSH
74921: LD_INT 0
74923: PPUSH
74924: CALL 76918 0 3
// end ;
74928: GO 74882
74930: POP
74931: POP
// if tigers then
74932: LD_VAR 0 2
74936: IFFALSE 75020
// for i = 1 to tigers do
74938: LD_ADDR_VAR 0 11
74942: PUSH
74943: DOUBLE
74944: LD_INT 1
74946: DEC
74947: ST_TO_ADDR
74948: LD_VAR 0 2
74952: PUSH
74953: FOR_TO
74954: IFFALSE 75018
// begin hc_class = class_tiger ;
74956: LD_ADDR_OWVAR 28
74960: PUSH
74961: LD_INT 14
74963: ST_TO_ADDR
// hc_gallery =  ;
74964: LD_ADDR_OWVAR 33
74968: PUSH
74969: LD_STRING 
74971: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
74972: LD_ADDR_OWVAR 35
74976: PUSH
74977: LD_INT 7
74979: NEG
74980: PPUSH
74981: LD_INT 7
74983: PPUSH
74984: CALL_OW 12
74988: ST_TO_ADDR
// animal := CreateHuman ;
74989: LD_ADDR_VAR 0 12
74993: PUSH
74994: CALL_OW 44
74998: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74999: LD_VAR 0 12
75003: PPUSH
75004: LD_VAR 0 8
75008: PPUSH
75009: LD_INT 0
75011: PPUSH
75012: CALL 76918 0 3
// end ;
75016: GO 74953
75018: POP
75019: POP
// if apemans then
75020: LD_VAR 0 3
75024: IFFALSE 75147
// for i = 1 to apemans do
75026: LD_ADDR_VAR 0 11
75030: PUSH
75031: DOUBLE
75032: LD_INT 1
75034: DEC
75035: ST_TO_ADDR
75036: LD_VAR 0 3
75040: PUSH
75041: FOR_TO
75042: IFFALSE 75145
// begin hc_class = class_apeman ;
75044: LD_ADDR_OWVAR 28
75048: PUSH
75049: LD_INT 12
75051: ST_TO_ADDR
// hc_gallery =  ;
75052: LD_ADDR_OWVAR 33
75056: PUSH
75057: LD_STRING 
75059: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
75060: LD_ADDR_OWVAR 35
75064: PUSH
75065: LD_INT 2
75067: NEG
75068: PPUSH
75069: LD_INT 2
75071: PPUSH
75072: CALL_OW 12
75076: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
75077: LD_ADDR_OWVAR 31
75081: PUSH
75082: LD_INT 1
75084: PPUSH
75085: LD_INT 3
75087: PPUSH
75088: CALL_OW 12
75092: PUSH
75093: LD_INT 1
75095: PPUSH
75096: LD_INT 3
75098: PPUSH
75099: CALL_OW 12
75103: PUSH
75104: LD_INT 0
75106: PUSH
75107: LD_INT 0
75109: PUSH
75110: EMPTY
75111: LIST
75112: LIST
75113: LIST
75114: LIST
75115: ST_TO_ADDR
// animal := CreateHuman ;
75116: LD_ADDR_VAR 0 12
75120: PUSH
75121: CALL_OW 44
75125: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75126: LD_VAR 0 12
75130: PPUSH
75131: LD_VAR 0 8
75135: PPUSH
75136: LD_INT 0
75138: PPUSH
75139: CALL 76918 0 3
// end ;
75143: GO 75041
75145: POP
75146: POP
// if enchidnas then
75147: LD_VAR 0 4
75151: IFFALSE 75218
// for i = 1 to enchidnas do
75153: LD_ADDR_VAR 0 11
75157: PUSH
75158: DOUBLE
75159: LD_INT 1
75161: DEC
75162: ST_TO_ADDR
75163: LD_VAR 0 4
75167: PUSH
75168: FOR_TO
75169: IFFALSE 75216
// begin hc_class = 13 ;
75171: LD_ADDR_OWVAR 28
75175: PUSH
75176: LD_INT 13
75178: ST_TO_ADDR
// hc_gallery =  ;
75179: LD_ADDR_OWVAR 33
75183: PUSH
75184: LD_STRING 
75186: ST_TO_ADDR
// animal := CreateHuman ;
75187: LD_ADDR_VAR 0 12
75191: PUSH
75192: CALL_OW 44
75196: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75197: LD_VAR 0 12
75201: PPUSH
75202: LD_VAR 0 8
75206: PPUSH
75207: LD_INT 0
75209: PPUSH
75210: CALL 76918 0 3
// end ;
75214: GO 75168
75216: POP
75217: POP
// if fishes then
75218: LD_VAR 0 7
75222: IFFALSE 75289
// for i = 1 to fishes do
75224: LD_ADDR_VAR 0 11
75228: PUSH
75229: DOUBLE
75230: LD_INT 1
75232: DEC
75233: ST_TO_ADDR
75234: LD_VAR 0 7
75238: PUSH
75239: FOR_TO
75240: IFFALSE 75287
// begin hc_class = 20 ;
75242: LD_ADDR_OWVAR 28
75246: PUSH
75247: LD_INT 20
75249: ST_TO_ADDR
// hc_gallery =  ;
75250: LD_ADDR_OWVAR 33
75254: PUSH
75255: LD_STRING 
75257: ST_TO_ADDR
// animal := CreateHuman ;
75258: LD_ADDR_VAR 0 12
75262: PUSH
75263: CALL_OW 44
75267: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
75268: LD_VAR 0 12
75272: PPUSH
75273: LD_VAR 0 9
75277: PPUSH
75278: LD_INT 0
75280: PPUSH
75281: CALL 76918 0 3
// end ;
75285: GO 75239
75287: POP
75288: POP
// end ;
75289: LD_VAR 0 10
75293: RET
// export function WantHeal ( sci , unit ) ; begin
75294: LD_INT 0
75296: PPUSH
// if GetTaskList ( sci ) > 0 then
75297: LD_VAR 0 1
75301: PPUSH
75302: CALL_OW 437
75306: PUSH
75307: LD_INT 0
75309: GREATER
75310: IFFALSE 75380
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
75312: LD_VAR 0 1
75316: PPUSH
75317: CALL_OW 437
75321: PUSH
75322: LD_INT 1
75324: ARRAY
75325: PUSH
75326: LD_INT 1
75328: ARRAY
75329: PUSH
75330: LD_STRING l
75332: EQUAL
75333: PUSH
75334: LD_VAR 0 1
75338: PPUSH
75339: CALL_OW 437
75343: PUSH
75344: LD_INT 1
75346: ARRAY
75347: PUSH
75348: LD_INT 4
75350: ARRAY
75351: PUSH
75352: LD_VAR 0 2
75356: EQUAL
75357: AND
75358: IFFALSE 75370
// result := true else
75360: LD_ADDR_VAR 0 3
75364: PUSH
75365: LD_INT 1
75367: ST_TO_ADDR
75368: GO 75378
// result := false ;
75370: LD_ADDR_VAR 0 3
75374: PUSH
75375: LD_INT 0
75377: ST_TO_ADDR
// end else
75378: GO 75388
// result := false ;
75380: LD_ADDR_VAR 0 3
75384: PUSH
75385: LD_INT 0
75387: ST_TO_ADDR
// end ;
75388: LD_VAR 0 3
75392: RET
// export function HealTarget ( sci ) ; begin
75393: LD_INT 0
75395: PPUSH
// if not sci then
75396: LD_VAR 0 1
75400: NOT
75401: IFFALSE 75405
// exit ;
75403: GO 75470
// result := 0 ;
75405: LD_ADDR_VAR 0 2
75409: PUSH
75410: LD_INT 0
75412: ST_TO_ADDR
// if GetTaskList ( sci ) then
75413: LD_VAR 0 1
75417: PPUSH
75418: CALL_OW 437
75422: IFFALSE 75470
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
75424: LD_VAR 0 1
75428: PPUSH
75429: CALL_OW 437
75433: PUSH
75434: LD_INT 1
75436: ARRAY
75437: PUSH
75438: LD_INT 1
75440: ARRAY
75441: PUSH
75442: LD_STRING l
75444: EQUAL
75445: IFFALSE 75470
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
75447: LD_ADDR_VAR 0 2
75451: PUSH
75452: LD_VAR 0 1
75456: PPUSH
75457: CALL_OW 437
75461: PUSH
75462: LD_INT 1
75464: ARRAY
75465: PUSH
75466: LD_INT 4
75468: ARRAY
75469: ST_TO_ADDR
// end ;
75470: LD_VAR 0 2
75474: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
75475: LD_INT 0
75477: PPUSH
75478: PPUSH
75479: PPUSH
75480: PPUSH
// if not base_units then
75481: LD_VAR 0 1
75485: NOT
75486: IFFALSE 75490
// exit ;
75488: GO 75577
// result := false ;
75490: LD_ADDR_VAR 0 2
75494: PUSH
75495: LD_INT 0
75497: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
75498: LD_ADDR_VAR 0 5
75502: PUSH
75503: LD_VAR 0 1
75507: PPUSH
75508: LD_INT 21
75510: PUSH
75511: LD_INT 3
75513: PUSH
75514: EMPTY
75515: LIST
75516: LIST
75517: PPUSH
75518: CALL_OW 72
75522: ST_TO_ADDR
// if not tmp then
75523: LD_VAR 0 5
75527: NOT
75528: IFFALSE 75532
// exit ;
75530: GO 75577
// for i in tmp do
75532: LD_ADDR_VAR 0 3
75536: PUSH
75537: LD_VAR 0 5
75541: PUSH
75542: FOR_IN
75543: IFFALSE 75575
// begin result := EnemyInRange ( i , 22 ) ;
75545: LD_ADDR_VAR 0 2
75549: PUSH
75550: LD_VAR 0 3
75554: PPUSH
75555: LD_INT 22
75557: PPUSH
75558: CALL 73164 0 2
75562: ST_TO_ADDR
// if result then
75563: LD_VAR 0 2
75567: IFFALSE 75573
// exit ;
75569: POP
75570: POP
75571: GO 75577
// end ;
75573: GO 75542
75575: POP
75576: POP
// end ;
75577: LD_VAR 0 2
75581: RET
// export function FilterByTag ( units , tag ) ; begin
75582: LD_INT 0
75584: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
75585: LD_ADDR_VAR 0 3
75589: PUSH
75590: LD_VAR 0 1
75594: PPUSH
75595: LD_INT 120
75597: PUSH
75598: LD_VAR 0 2
75602: PUSH
75603: EMPTY
75604: LIST
75605: LIST
75606: PPUSH
75607: CALL_OW 72
75611: ST_TO_ADDR
// end ;
75612: LD_VAR 0 3
75616: RET
// export function IsDriver ( un ) ; begin
75617: LD_INT 0
75619: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
75620: LD_ADDR_VAR 0 2
75624: PUSH
75625: LD_VAR 0 1
75629: PUSH
75630: LD_INT 55
75632: PUSH
75633: EMPTY
75634: LIST
75635: PPUSH
75636: CALL_OW 69
75640: IN
75641: ST_TO_ADDR
// end ;
75642: LD_VAR 0 2
75646: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
75647: LD_INT 0
75649: PPUSH
75650: PPUSH
// list := [ ] ;
75651: LD_ADDR_VAR 0 5
75655: PUSH
75656: EMPTY
75657: ST_TO_ADDR
// case d of 0 :
75658: LD_VAR 0 3
75662: PUSH
75663: LD_INT 0
75665: DOUBLE
75666: EQUAL
75667: IFTRUE 75671
75669: GO 75804
75671: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
75672: LD_ADDR_VAR 0 5
75676: PUSH
75677: LD_VAR 0 1
75681: PUSH
75682: LD_INT 4
75684: MINUS
75685: PUSH
75686: LD_VAR 0 2
75690: PUSH
75691: LD_INT 4
75693: MINUS
75694: PUSH
75695: LD_INT 2
75697: PUSH
75698: EMPTY
75699: LIST
75700: LIST
75701: LIST
75702: PUSH
75703: LD_VAR 0 1
75707: PUSH
75708: LD_INT 3
75710: MINUS
75711: PUSH
75712: LD_VAR 0 2
75716: PUSH
75717: LD_INT 1
75719: PUSH
75720: EMPTY
75721: LIST
75722: LIST
75723: LIST
75724: PUSH
75725: LD_VAR 0 1
75729: PUSH
75730: LD_INT 4
75732: PLUS
75733: PUSH
75734: LD_VAR 0 2
75738: PUSH
75739: LD_INT 4
75741: PUSH
75742: EMPTY
75743: LIST
75744: LIST
75745: LIST
75746: PUSH
75747: LD_VAR 0 1
75751: PUSH
75752: LD_INT 3
75754: PLUS
75755: PUSH
75756: LD_VAR 0 2
75760: PUSH
75761: LD_INT 3
75763: PLUS
75764: PUSH
75765: LD_INT 5
75767: PUSH
75768: EMPTY
75769: LIST
75770: LIST
75771: LIST
75772: PUSH
75773: LD_VAR 0 1
75777: PUSH
75778: LD_VAR 0 2
75782: PUSH
75783: LD_INT 4
75785: PLUS
75786: PUSH
75787: LD_INT 0
75789: PUSH
75790: EMPTY
75791: LIST
75792: LIST
75793: LIST
75794: PUSH
75795: EMPTY
75796: LIST
75797: LIST
75798: LIST
75799: LIST
75800: LIST
75801: ST_TO_ADDR
// end ; 1 :
75802: GO 76502
75804: LD_INT 1
75806: DOUBLE
75807: EQUAL
75808: IFTRUE 75812
75810: GO 75945
75812: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
75813: LD_ADDR_VAR 0 5
75817: PUSH
75818: LD_VAR 0 1
75822: PUSH
75823: LD_VAR 0 2
75827: PUSH
75828: LD_INT 4
75830: MINUS
75831: PUSH
75832: LD_INT 3
75834: PUSH
75835: EMPTY
75836: LIST
75837: LIST
75838: LIST
75839: PUSH
75840: LD_VAR 0 1
75844: PUSH
75845: LD_INT 3
75847: MINUS
75848: PUSH
75849: LD_VAR 0 2
75853: PUSH
75854: LD_INT 3
75856: MINUS
75857: PUSH
75858: LD_INT 2
75860: PUSH
75861: EMPTY
75862: LIST
75863: LIST
75864: LIST
75865: PUSH
75866: LD_VAR 0 1
75870: PUSH
75871: LD_INT 4
75873: MINUS
75874: PUSH
75875: LD_VAR 0 2
75879: PUSH
75880: LD_INT 1
75882: PUSH
75883: EMPTY
75884: LIST
75885: LIST
75886: LIST
75887: PUSH
75888: LD_VAR 0 1
75892: PUSH
75893: LD_VAR 0 2
75897: PUSH
75898: LD_INT 3
75900: PLUS
75901: PUSH
75902: LD_INT 0
75904: PUSH
75905: EMPTY
75906: LIST
75907: LIST
75908: LIST
75909: PUSH
75910: LD_VAR 0 1
75914: PUSH
75915: LD_INT 4
75917: PLUS
75918: PUSH
75919: LD_VAR 0 2
75923: PUSH
75924: LD_INT 4
75926: PLUS
75927: PUSH
75928: LD_INT 5
75930: PUSH
75931: EMPTY
75932: LIST
75933: LIST
75934: LIST
75935: PUSH
75936: EMPTY
75937: LIST
75938: LIST
75939: LIST
75940: LIST
75941: LIST
75942: ST_TO_ADDR
// end ; 2 :
75943: GO 76502
75945: LD_INT 2
75947: DOUBLE
75948: EQUAL
75949: IFTRUE 75953
75951: GO 76082
75953: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
75954: LD_ADDR_VAR 0 5
75958: PUSH
75959: LD_VAR 0 1
75963: PUSH
75964: LD_VAR 0 2
75968: PUSH
75969: LD_INT 3
75971: MINUS
75972: PUSH
75973: LD_INT 3
75975: PUSH
75976: EMPTY
75977: LIST
75978: LIST
75979: LIST
75980: PUSH
75981: LD_VAR 0 1
75985: PUSH
75986: LD_INT 4
75988: PLUS
75989: PUSH
75990: LD_VAR 0 2
75994: PUSH
75995: LD_INT 4
75997: PUSH
75998: EMPTY
75999: LIST
76000: LIST
76001: LIST
76002: PUSH
76003: LD_VAR 0 1
76007: PUSH
76008: LD_VAR 0 2
76012: PUSH
76013: LD_INT 4
76015: PLUS
76016: PUSH
76017: LD_INT 0
76019: PUSH
76020: EMPTY
76021: LIST
76022: LIST
76023: LIST
76024: PUSH
76025: LD_VAR 0 1
76029: PUSH
76030: LD_INT 3
76032: MINUS
76033: PUSH
76034: LD_VAR 0 2
76038: PUSH
76039: LD_INT 1
76041: PUSH
76042: EMPTY
76043: LIST
76044: LIST
76045: LIST
76046: PUSH
76047: LD_VAR 0 1
76051: PUSH
76052: LD_INT 4
76054: MINUS
76055: PUSH
76056: LD_VAR 0 2
76060: PUSH
76061: LD_INT 4
76063: MINUS
76064: PUSH
76065: LD_INT 2
76067: PUSH
76068: EMPTY
76069: LIST
76070: LIST
76071: LIST
76072: PUSH
76073: EMPTY
76074: LIST
76075: LIST
76076: LIST
76077: LIST
76078: LIST
76079: ST_TO_ADDR
// end ; 3 :
76080: GO 76502
76082: LD_INT 3
76084: DOUBLE
76085: EQUAL
76086: IFTRUE 76090
76088: GO 76223
76090: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
76091: LD_ADDR_VAR 0 5
76095: PUSH
76096: LD_VAR 0 1
76100: PUSH
76101: LD_INT 3
76103: PLUS
76104: PUSH
76105: LD_VAR 0 2
76109: PUSH
76110: LD_INT 4
76112: PUSH
76113: EMPTY
76114: LIST
76115: LIST
76116: LIST
76117: PUSH
76118: LD_VAR 0 1
76122: PUSH
76123: LD_INT 4
76125: PLUS
76126: PUSH
76127: LD_VAR 0 2
76131: PUSH
76132: LD_INT 4
76134: PLUS
76135: PUSH
76136: LD_INT 5
76138: PUSH
76139: EMPTY
76140: LIST
76141: LIST
76142: LIST
76143: PUSH
76144: LD_VAR 0 1
76148: PUSH
76149: LD_INT 4
76151: MINUS
76152: PUSH
76153: LD_VAR 0 2
76157: PUSH
76158: LD_INT 1
76160: PUSH
76161: EMPTY
76162: LIST
76163: LIST
76164: LIST
76165: PUSH
76166: LD_VAR 0 1
76170: PUSH
76171: LD_VAR 0 2
76175: PUSH
76176: LD_INT 4
76178: MINUS
76179: PUSH
76180: LD_INT 3
76182: PUSH
76183: EMPTY
76184: LIST
76185: LIST
76186: LIST
76187: PUSH
76188: LD_VAR 0 1
76192: PUSH
76193: LD_INT 3
76195: MINUS
76196: PUSH
76197: LD_VAR 0 2
76201: PUSH
76202: LD_INT 3
76204: MINUS
76205: PUSH
76206: LD_INT 2
76208: PUSH
76209: EMPTY
76210: LIST
76211: LIST
76212: LIST
76213: PUSH
76214: EMPTY
76215: LIST
76216: LIST
76217: LIST
76218: LIST
76219: LIST
76220: ST_TO_ADDR
// end ; 4 :
76221: GO 76502
76223: LD_INT 4
76225: DOUBLE
76226: EQUAL
76227: IFTRUE 76231
76229: GO 76364
76231: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
76232: LD_ADDR_VAR 0 5
76236: PUSH
76237: LD_VAR 0 1
76241: PUSH
76242: LD_VAR 0 2
76246: PUSH
76247: LD_INT 4
76249: PLUS
76250: PUSH
76251: LD_INT 0
76253: PUSH
76254: EMPTY
76255: LIST
76256: LIST
76257: LIST
76258: PUSH
76259: LD_VAR 0 1
76263: PUSH
76264: LD_INT 3
76266: PLUS
76267: PUSH
76268: LD_VAR 0 2
76272: PUSH
76273: LD_INT 3
76275: PLUS
76276: PUSH
76277: LD_INT 5
76279: PUSH
76280: EMPTY
76281: LIST
76282: LIST
76283: LIST
76284: PUSH
76285: LD_VAR 0 1
76289: PUSH
76290: LD_INT 4
76292: PLUS
76293: PUSH
76294: LD_VAR 0 2
76298: PUSH
76299: LD_INT 4
76301: PUSH
76302: EMPTY
76303: LIST
76304: LIST
76305: LIST
76306: PUSH
76307: LD_VAR 0 1
76311: PUSH
76312: LD_VAR 0 2
76316: PUSH
76317: LD_INT 3
76319: MINUS
76320: PUSH
76321: LD_INT 3
76323: PUSH
76324: EMPTY
76325: LIST
76326: LIST
76327: LIST
76328: PUSH
76329: LD_VAR 0 1
76333: PUSH
76334: LD_INT 4
76336: MINUS
76337: PUSH
76338: LD_VAR 0 2
76342: PUSH
76343: LD_INT 4
76345: MINUS
76346: PUSH
76347: LD_INT 2
76349: PUSH
76350: EMPTY
76351: LIST
76352: LIST
76353: LIST
76354: PUSH
76355: EMPTY
76356: LIST
76357: LIST
76358: LIST
76359: LIST
76360: LIST
76361: ST_TO_ADDR
// end ; 5 :
76362: GO 76502
76364: LD_INT 5
76366: DOUBLE
76367: EQUAL
76368: IFTRUE 76372
76370: GO 76501
76372: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
76373: LD_ADDR_VAR 0 5
76377: PUSH
76378: LD_VAR 0 1
76382: PUSH
76383: LD_INT 4
76385: MINUS
76386: PUSH
76387: LD_VAR 0 2
76391: PUSH
76392: LD_INT 1
76394: PUSH
76395: EMPTY
76396: LIST
76397: LIST
76398: LIST
76399: PUSH
76400: LD_VAR 0 1
76404: PUSH
76405: LD_VAR 0 2
76409: PUSH
76410: LD_INT 4
76412: MINUS
76413: PUSH
76414: LD_INT 3
76416: PUSH
76417: EMPTY
76418: LIST
76419: LIST
76420: LIST
76421: PUSH
76422: LD_VAR 0 1
76426: PUSH
76427: LD_INT 4
76429: PLUS
76430: PUSH
76431: LD_VAR 0 2
76435: PUSH
76436: LD_INT 4
76438: PLUS
76439: PUSH
76440: LD_INT 5
76442: PUSH
76443: EMPTY
76444: LIST
76445: LIST
76446: LIST
76447: PUSH
76448: LD_VAR 0 1
76452: PUSH
76453: LD_INT 3
76455: PLUS
76456: PUSH
76457: LD_VAR 0 2
76461: PUSH
76462: LD_INT 4
76464: PUSH
76465: EMPTY
76466: LIST
76467: LIST
76468: LIST
76469: PUSH
76470: LD_VAR 0 1
76474: PUSH
76475: LD_VAR 0 2
76479: PUSH
76480: LD_INT 3
76482: PLUS
76483: PUSH
76484: LD_INT 0
76486: PUSH
76487: EMPTY
76488: LIST
76489: LIST
76490: LIST
76491: PUSH
76492: EMPTY
76493: LIST
76494: LIST
76495: LIST
76496: LIST
76497: LIST
76498: ST_TO_ADDR
// end ; end ;
76499: GO 76502
76501: POP
// result := list ;
76502: LD_ADDR_VAR 0 4
76506: PUSH
76507: LD_VAR 0 5
76511: ST_TO_ADDR
// end ;
76512: LD_VAR 0 4
76516: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
76517: LD_INT 0
76519: PPUSH
76520: PPUSH
76521: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
76522: LD_VAR 0 1
76526: NOT
76527: PUSH
76528: LD_VAR 0 2
76532: PUSH
76533: LD_INT 1
76535: PUSH
76536: LD_INT 2
76538: PUSH
76539: LD_INT 3
76541: PUSH
76542: LD_INT 4
76544: PUSH
76545: EMPTY
76546: LIST
76547: LIST
76548: LIST
76549: LIST
76550: IN
76551: NOT
76552: OR
76553: IFFALSE 76557
// exit ;
76555: GO 76640
// tmp := [ ] ;
76557: LD_ADDR_VAR 0 5
76561: PUSH
76562: EMPTY
76563: ST_TO_ADDR
// for i in units do
76564: LD_ADDR_VAR 0 4
76568: PUSH
76569: LD_VAR 0 1
76573: PUSH
76574: FOR_IN
76575: IFFALSE 76609
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
76577: LD_ADDR_VAR 0 5
76581: PUSH
76582: LD_VAR 0 5
76586: PPUSH
76587: LD_VAR 0 4
76591: PPUSH
76592: LD_VAR 0 2
76596: PPUSH
76597: CALL_OW 259
76601: PPUSH
76602: CALL 78013 0 2
76606: ST_TO_ADDR
76607: GO 76574
76609: POP
76610: POP
// if not tmp then
76611: LD_VAR 0 5
76615: NOT
76616: IFFALSE 76620
// exit ;
76618: GO 76640
// result := SortListByListDesc ( units , tmp ) ;
76620: LD_ADDR_VAR 0 3
76624: PUSH
76625: LD_VAR 0 1
76629: PPUSH
76630: LD_VAR 0 5
76634: PPUSH
76635: CALL_OW 77
76639: ST_TO_ADDR
// end ;
76640: LD_VAR 0 3
76644: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
76645: LD_INT 0
76647: PPUSH
76648: PPUSH
76649: PPUSH
// result := false ;
76650: LD_ADDR_VAR 0 3
76654: PUSH
76655: LD_INT 0
76657: ST_TO_ADDR
// if not building then
76658: LD_VAR 0 2
76662: NOT
76663: IFFALSE 76667
// exit ;
76665: GO 76805
// x := GetX ( building ) ;
76667: LD_ADDR_VAR 0 4
76671: PUSH
76672: LD_VAR 0 2
76676: PPUSH
76677: CALL_OW 250
76681: ST_TO_ADDR
// y := GetY ( building ) ;
76682: LD_ADDR_VAR 0 5
76686: PUSH
76687: LD_VAR 0 2
76691: PPUSH
76692: CALL_OW 251
76696: ST_TO_ADDR
// if not x or not y then
76697: LD_VAR 0 4
76701: NOT
76702: PUSH
76703: LD_VAR 0 5
76707: NOT
76708: OR
76709: IFFALSE 76713
// exit ;
76711: GO 76805
// if GetTaskList ( unit ) then
76713: LD_VAR 0 1
76717: PPUSH
76718: CALL_OW 437
76722: IFFALSE 76805
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76724: LD_STRING e
76726: PUSH
76727: LD_VAR 0 1
76731: PPUSH
76732: CALL_OW 437
76736: PUSH
76737: LD_INT 1
76739: ARRAY
76740: PUSH
76741: LD_INT 1
76743: ARRAY
76744: EQUAL
76745: PUSH
76746: LD_VAR 0 4
76750: PUSH
76751: LD_VAR 0 1
76755: PPUSH
76756: CALL_OW 437
76760: PUSH
76761: LD_INT 1
76763: ARRAY
76764: PUSH
76765: LD_INT 2
76767: ARRAY
76768: EQUAL
76769: AND
76770: PUSH
76771: LD_VAR 0 5
76775: PUSH
76776: LD_VAR 0 1
76780: PPUSH
76781: CALL_OW 437
76785: PUSH
76786: LD_INT 1
76788: ARRAY
76789: PUSH
76790: LD_INT 3
76792: ARRAY
76793: EQUAL
76794: AND
76795: IFFALSE 76805
// result := true end ;
76797: LD_ADDR_VAR 0 3
76801: PUSH
76802: LD_INT 1
76804: ST_TO_ADDR
// end ;
76805: LD_VAR 0 3
76809: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
76810: LD_INT 0
76812: PPUSH
// result := false ;
76813: LD_ADDR_VAR 0 4
76817: PUSH
76818: LD_INT 0
76820: ST_TO_ADDR
// if GetTaskList ( unit ) then
76821: LD_VAR 0 1
76825: PPUSH
76826: CALL_OW 437
76830: IFFALSE 76913
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76832: LD_STRING M
76834: PUSH
76835: LD_VAR 0 1
76839: PPUSH
76840: CALL_OW 437
76844: PUSH
76845: LD_INT 1
76847: ARRAY
76848: PUSH
76849: LD_INT 1
76851: ARRAY
76852: EQUAL
76853: PUSH
76854: LD_VAR 0 2
76858: PUSH
76859: LD_VAR 0 1
76863: PPUSH
76864: CALL_OW 437
76868: PUSH
76869: LD_INT 1
76871: ARRAY
76872: PUSH
76873: LD_INT 2
76875: ARRAY
76876: EQUAL
76877: AND
76878: PUSH
76879: LD_VAR 0 3
76883: PUSH
76884: LD_VAR 0 1
76888: PPUSH
76889: CALL_OW 437
76893: PUSH
76894: LD_INT 1
76896: ARRAY
76897: PUSH
76898: LD_INT 3
76900: ARRAY
76901: EQUAL
76902: AND
76903: IFFALSE 76913
// result := true ;
76905: LD_ADDR_VAR 0 4
76909: PUSH
76910: LD_INT 1
76912: ST_TO_ADDR
// end ; end ;
76913: LD_VAR 0 4
76917: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
76918: LD_INT 0
76920: PPUSH
76921: PPUSH
76922: PPUSH
76923: PPUSH
// if not unit or not area then
76924: LD_VAR 0 1
76928: NOT
76929: PUSH
76930: LD_VAR 0 2
76934: NOT
76935: OR
76936: IFFALSE 76940
// exit ;
76938: GO 77116
// tmp := AreaToList ( area , i ) ;
76940: LD_ADDR_VAR 0 6
76944: PUSH
76945: LD_VAR 0 2
76949: PPUSH
76950: LD_VAR 0 5
76954: PPUSH
76955: CALL_OW 517
76959: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
76960: LD_ADDR_VAR 0 5
76964: PUSH
76965: DOUBLE
76966: LD_INT 1
76968: DEC
76969: ST_TO_ADDR
76970: LD_VAR 0 6
76974: PUSH
76975: LD_INT 1
76977: ARRAY
76978: PUSH
76979: FOR_TO
76980: IFFALSE 77114
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
76982: LD_ADDR_VAR 0 7
76986: PUSH
76987: LD_VAR 0 6
76991: PUSH
76992: LD_INT 1
76994: ARRAY
76995: PUSH
76996: LD_VAR 0 5
77000: ARRAY
77001: PUSH
77002: LD_VAR 0 6
77006: PUSH
77007: LD_INT 2
77009: ARRAY
77010: PUSH
77011: LD_VAR 0 5
77015: ARRAY
77016: PUSH
77017: EMPTY
77018: LIST
77019: LIST
77020: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
77021: LD_INT 92
77023: PUSH
77024: LD_VAR 0 7
77028: PUSH
77029: LD_INT 1
77031: ARRAY
77032: PUSH
77033: LD_VAR 0 7
77037: PUSH
77038: LD_INT 2
77040: ARRAY
77041: PUSH
77042: LD_INT 2
77044: PUSH
77045: EMPTY
77046: LIST
77047: LIST
77048: LIST
77049: LIST
77050: PPUSH
77051: CALL_OW 69
77055: PUSH
77056: LD_INT 0
77058: EQUAL
77059: IFFALSE 77112
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
77061: LD_VAR 0 1
77065: PPUSH
77066: LD_VAR 0 7
77070: PUSH
77071: LD_INT 1
77073: ARRAY
77074: PPUSH
77075: LD_VAR 0 7
77079: PUSH
77080: LD_INT 2
77082: ARRAY
77083: PPUSH
77084: LD_VAR 0 3
77088: PPUSH
77089: CALL_OW 48
// result := IsPlaced ( unit ) ;
77093: LD_ADDR_VAR 0 4
77097: PUSH
77098: LD_VAR 0 1
77102: PPUSH
77103: CALL_OW 305
77107: ST_TO_ADDR
// exit ;
77108: POP
77109: POP
77110: GO 77116
// end ; end ;
77112: GO 76979
77114: POP
77115: POP
// end ;
77116: LD_VAR 0 4
77120: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
77121: LD_INT 0
77123: PPUSH
77124: PPUSH
77125: PPUSH
// if not side or side > 8 then
77126: LD_VAR 0 1
77130: NOT
77131: PUSH
77132: LD_VAR 0 1
77136: PUSH
77137: LD_INT 8
77139: GREATER
77140: OR
77141: IFFALSE 77145
// exit ;
77143: GO 77332
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
77145: LD_ADDR_VAR 0 4
77149: PUSH
77150: LD_INT 22
77152: PUSH
77153: LD_VAR 0 1
77157: PUSH
77158: EMPTY
77159: LIST
77160: LIST
77161: PUSH
77162: LD_INT 21
77164: PUSH
77165: LD_INT 3
77167: PUSH
77168: EMPTY
77169: LIST
77170: LIST
77171: PUSH
77172: EMPTY
77173: LIST
77174: LIST
77175: PPUSH
77176: CALL_OW 69
77180: ST_TO_ADDR
// if not tmp then
77181: LD_VAR 0 4
77185: NOT
77186: IFFALSE 77190
// exit ;
77188: GO 77332
// enable_addtolog := true ;
77190: LD_ADDR_OWVAR 81
77194: PUSH
77195: LD_INT 1
77197: ST_TO_ADDR
// AddToLog ( [ ) ;
77198: LD_STRING [
77200: PPUSH
77201: CALL_OW 561
// for i in tmp do
77205: LD_ADDR_VAR 0 3
77209: PUSH
77210: LD_VAR 0 4
77214: PUSH
77215: FOR_IN
77216: IFFALSE 77323
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
77218: LD_STRING [
77220: PUSH
77221: LD_VAR 0 3
77225: PPUSH
77226: CALL_OW 266
77230: STR
77231: PUSH
77232: LD_STRING , 
77234: STR
77235: PUSH
77236: LD_VAR 0 3
77240: PPUSH
77241: CALL_OW 250
77245: STR
77246: PUSH
77247: LD_STRING , 
77249: STR
77250: PUSH
77251: LD_VAR 0 3
77255: PPUSH
77256: CALL_OW 251
77260: STR
77261: PUSH
77262: LD_STRING , 
77264: STR
77265: PUSH
77266: LD_VAR 0 3
77270: PPUSH
77271: CALL_OW 254
77275: STR
77276: PUSH
77277: LD_STRING , 
77279: STR
77280: PUSH
77281: LD_VAR 0 3
77285: PPUSH
77286: LD_INT 1
77288: PPUSH
77289: CALL_OW 268
77293: STR
77294: PUSH
77295: LD_STRING , 
77297: STR
77298: PUSH
77299: LD_VAR 0 3
77303: PPUSH
77304: LD_INT 2
77306: PPUSH
77307: CALL_OW 268
77311: STR
77312: PUSH
77313: LD_STRING ],
77315: STR
77316: PPUSH
77317: CALL_OW 561
// end ;
77321: GO 77215
77323: POP
77324: POP
// AddToLog ( ]; ) ;
77325: LD_STRING ];
77327: PPUSH
77328: CALL_OW 561
// end ;
77332: LD_VAR 0 2
77336: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
77337: LD_INT 0
77339: PPUSH
77340: PPUSH
77341: PPUSH
77342: PPUSH
77343: PPUSH
// if not area or not rate or not max then
77344: LD_VAR 0 1
77348: NOT
77349: PUSH
77350: LD_VAR 0 2
77354: NOT
77355: OR
77356: PUSH
77357: LD_VAR 0 4
77361: NOT
77362: OR
77363: IFFALSE 77367
// exit ;
77365: GO 77556
// while 1 do
77367: LD_INT 1
77369: IFFALSE 77556
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
77371: LD_ADDR_VAR 0 9
77375: PUSH
77376: LD_VAR 0 1
77380: PPUSH
77381: LD_INT 1
77383: PPUSH
77384: CALL_OW 287
77388: PUSH
77389: LD_INT 10
77391: MUL
77392: ST_TO_ADDR
// r := rate / 10 ;
77393: LD_ADDR_VAR 0 7
77397: PUSH
77398: LD_VAR 0 2
77402: PUSH
77403: LD_INT 10
77405: DIVREAL
77406: ST_TO_ADDR
// time := 1 1$00 ;
77407: LD_ADDR_VAR 0 8
77411: PUSH
77412: LD_INT 2100
77414: ST_TO_ADDR
// if amount < min then
77415: LD_VAR 0 9
77419: PUSH
77420: LD_VAR 0 3
77424: LESS
77425: IFFALSE 77443
// r := r * 2 else
77427: LD_ADDR_VAR 0 7
77431: PUSH
77432: LD_VAR 0 7
77436: PUSH
77437: LD_INT 2
77439: MUL
77440: ST_TO_ADDR
77441: GO 77469
// if amount > max then
77443: LD_VAR 0 9
77447: PUSH
77448: LD_VAR 0 4
77452: GREATER
77453: IFFALSE 77469
// r := r / 2 ;
77455: LD_ADDR_VAR 0 7
77459: PUSH
77460: LD_VAR 0 7
77464: PUSH
77465: LD_INT 2
77467: DIVREAL
77468: ST_TO_ADDR
// time := time / r ;
77469: LD_ADDR_VAR 0 8
77473: PUSH
77474: LD_VAR 0 8
77478: PUSH
77479: LD_VAR 0 7
77483: DIVREAL
77484: ST_TO_ADDR
// if time < 0 then
77485: LD_VAR 0 8
77489: PUSH
77490: LD_INT 0
77492: LESS
77493: IFFALSE 77510
// time := time * - 1 ;
77495: LD_ADDR_VAR 0 8
77499: PUSH
77500: LD_VAR 0 8
77504: PUSH
77505: LD_INT 1
77507: NEG
77508: MUL
77509: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
77510: LD_VAR 0 8
77514: PUSH
77515: LD_INT 35
77517: PPUSH
77518: LD_INT 875
77520: PPUSH
77521: CALL_OW 12
77525: PLUS
77526: PPUSH
77527: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
77531: LD_INT 1
77533: PPUSH
77534: LD_INT 5
77536: PPUSH
77537: CALL_OW 12
77541: PPUSH
77542: LD_VAR 0 1
77546: PPUSH
77547: LD_INT 1
77549: PPUSH
77550: CALL_OW 55
// end ;
77554: GO 77367
// end ;
77556: LD_VAR 0 5
77560: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
77561: LD_INT 0
77563: PPUSH
77564: PPUSH
77565: PPUSH
77566: PPUSH
77567: PPUSH
77568: PPUSH
77569: PPUSH
77570: PPUSH
// if not turrets or not factories then
77571: LD_VAR 0 1
77575: NOT
77576: PUSH
77577: LD_VAR 0 2
77581: NOT
77582: OR
77583: IFFALSE 77587
// exit ;
77585: GO 77894
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
77587: LD_ADDR_VAR 0 10
77591: PUSH
77592: LD_INT 5
77594: PUSH
77595: LD_INT 6
77597: PUSH
77598: EMPTY
77599: LIST
77600: LIST
77601: PUSH
77602: LD_INT 2
77604: PUSH
77605: LD_INT 4
77607: PUSH
77608: EMPTY
77609: LIST
77610: LIST
77611: PUSH
77612: LD_INT 3
77614: PUSH
77615: LD_INT 5
77617: PUSH
77618: EMPTY
77619: LIST
77620: LIST
77621: PUSH
77622: EMPTY
77623: LIST
77624: LIST
77625: LIST
77626: PUSH
77627: LD_INT 24
77629: PUSH
77630: LD_INT 25
77632: PUSH
77633: EMPTY
77634: LIST
77635: LIST
77636: PUSH
77637: LD_INT 23
77639: PUSH
77640: LD_INT 27
77642: PUSH
77643: EMPTY
77644: LIST
77645: LIST
77646: PUSH
77647: EMPTY
77648: LIST
77649: LIST
77650: PUSH
77651: LD_INT 42
77653: PUSH
77654: LD_INT 43
77656: PUSH
77657: EMPTY
77658: LIST
77659: LIST
77660: PUSH
77661: LD_INT 44
77663: PUSH
77664: LD_INT 46
77666: PUSH
77667: EMPTY
77668: LIST
77669: LIST
77670: PUSH
77671: LD_INT 45
77673: PUSH
77674: LD_INT 47
77676: PUSH
77677: EMPTY
77678: LIST
77679: LIST
77680: PUSH
77681: EMPTY
77682: LIST
77683: LIST
77684: LIST
77685: PUSH
77686: EMPTY
77687: LIST
77688: LIST
77689: LIST
77690: ST_TO_ADDR
// result := [ ] ;
77691: LD_ADDR_VAR 0 3
77695: PUSH
77696: EMPTY
77697: ST_TO_ADDR
// for i in turrets do
77698: LD_ADDR_VAR 0 4
77702: PUSH
77703: LD_VAR 0 1
77707: PUSH
77708: FOR_IN
77709: IFFALSE 77892
// begin nat := GetNation ( i ) ;
77711: LD_ADDR_VAR 0 7
77715: PUSH
77716: LD_VAR 0 4
77720: PPUSH
77721: CALL_OW 248
77725: ST_TO_ADDR
// weapon := 0 ;
77726: LD_ADDR_VAR 0 8
77730: PUSH
77731: LD_INT 0
77733: ST_TO_ADDR
// if not nat then
77734: LD_VAR 0 7
77738: NOT
77739: IFFALSE 77743
// continue ;
77741: GO 77708
// for j in list [ nat ] do
77743: LD_ADDR_VAR 0 5
77747: PUSH
77748: LD_VAR 0 10
77752: PUSH
77753: LD_VAR 0 7
77757: ARRAY
77758: PUSH
77759: FOR_IN
77760: IFFALSE 77801
// if GetBWeapon ( i ) = j [ 1 ] then
77762: LD_VAR 0 4
77766: PPUSH
77767: CALL_OW 269
77771: PUSH
77772: LD_VAR 0 5
77776: PUSH
77777: LD_INT 1
77779: ARRAY
77780: EQUAL
77781: IFFALSE 77799
// begin weapon := j [ 2 ] ;
77783: LD_ADDR_VAR 0 8
77787: PUSH
77788: LD_VAR 0 5
77792: PUSH
77793: LD_INT 2
77795: ARRAY
77796: ST_TO_ADDR
// break ;
77797: GO 77801
// end ;
77799: GO 77759
77801: POP
77802: POP
// if not weapon then
77803: LD_VAR 0 8
77807: NOT
77808: IFFALSE 77812
// continue ;
77810: GO 77708
// for k in factories do
77812: LD_ADDR_VAR 0 6
77816: PUSH
77817: LD_VAR 0 2
77821: PUSH
77822: FOR_IN
77823: IFFALSE 77888
// begin weapons := AvailableWeaponList ( k ) ;
77825: LD_ADDR_VAR 0 9
77829: PUSH
77830: LD_VAR 0 6
77834: PPUSH
77835: CALL_OW 478
77839: ST_TO_ADDR
// if not weapons then
77840: LD_VAR 0 9
77844: NOT
77845: IFFALSE 77849
// continue ;
77847: GO 77822
// if weapon in weapons then
77849: LD_VAR 0 8
77853: PUSH
77854: LD_VAR 0 9
77858: IN
77859: IFFALSE 77886
// begin result := [ i , weapon ] ;
77861: LD_ADDR_VAR 0 3
77865: PUSH
77866: LD_VAR 0 4
77870: PUSH
77871: LD_VAR 0 8
77875: PUSH
77876: EMPTY
77877: LIST
77878: LIST
77879: ST_TO_ADDR
// exit ;
77880: POP
77881: POP
77882: POP
77883: POP
77884: GO 77894
// end ; end ;
77886: GO 77822
77888: POP
77889: POP
// end ;
77890: GO 77708
77892: POP
77893: POP
// end ;
77894: LD_VAR 0 3
77898: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
77899: LD_INT 0
77901: PPUSH
// if not side or side > 8 then
77902: LD_VAR 0 3
77906: NOT
77907: PUSH
77908: LD_VAR 0 3
77912: PUSH
77913: LD_INT 8
77915: GREATER
77916: OR
77917: IFFALSE 77921
// exit ;
77919: GO 77980
// if not range then
77921: LD_VAR 0 4
77925: NOT
77926: IFFALSE 77937
// range := - 12 ;
77928: LD_ADDR_VAR 0 4
77932: PUSH
77933: LD_INT 12
77935: NEG
77936: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
77937: LD_VAR 0 1
77941: PPUSH
77942: LD_VAR 0 2
77946: PPUSH
77947: LD_VAR 0 3
77951: PPUSH
77952: LD_VAR 0 4
77956: PPUSH
77957: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
77961: LD_VAR 0 1
77965: PPUSH
77966: LD_VAR 0 2
77970: PPUSH
77971: LD_VAR 0 3
77975: PPUSH
77976: CALL_OW 331
// end ;
77980: LD_VAR 0 5
77984: RET
// export function Video ( mode ) ; begin
77985: LD_INT 0
77987: PPUSH
// ingame_video = mode ;
77988: LD_ADDR_OWVAR 52
77992: PUSH
77993: LD_VAR 0 1
77997: ST_TO_ADDR
// interface_hidden = mode ;
77998: LD_ADDR_OWVAR 54
78002: PUSH
78003: LD_VAR 0 1
78007: ST_TO_ADDR
// end ;
78008: LD_VAR 0 2
78012: RET
// export function Join ( array , element ) ; begin
78013: LD_INT 0
78015: PPUSH
// result := Replace ( array , array + 1 , element ) ;
78016: LD_ADDR_VAR 0 3
78020: PUSH
78021: LD_VAR 0 1
78025: PPUSH
78026: LD_VAR 0 1
78030: PUSH
78031: LD_INT 1
78033: PLUS
78034: PPUSH
78035: LD_VAR 0 2
78039: PPUSH
78040: CALL_OW 1
78044: ST_TO_ADDR
// end ;
78045: LD_VAR 0 3
78049: RET
// export function JoinUnion ( array , element ) ; begin
78050: LD_INT 0
78052: PPUSH
// result := array union element ;
78053: LD_ADDR_VAR 0 3
78057: PUSH
78058: LD_VAR 0 1
78062: PUSH
78063: LD_VAR 0 2
78067: UNION
78068: ST_TO_ADDR
// end ;
78069: LD_VAR 0 3
78073: RET
// export function GetBehemoths ( side ) ; begin
78074: LD_INT 0
78076: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
78077: LD_ADDR_VAR 0 2
78081: PUSH
78082: LD_INT 22
78084: PUSH
78085: LD_VAR 0 1
78089: PUSH
78090: EMPTY
78091: LIST
78092: LIST
78093: PUSH
78094: LD_INT 31
78096: PUSH
78097: LD_INT 25
78099: PUSH
78100: EMPTY
78101: LIST
78102: LIST
78103: PUSH
78104: EMPTY
78105: LIST
78106: LIST
78107: PPUSH
78108: CALL_OW 69
78112: ST_TO_ADDR
// end ;
78113: LD_VAR 0 2
78117: RET
// export function Shuffle ( array ) ; var i , index ; begin
78118: LD_INT 0
78120: PPUSH
78121: PPUSH
78122: PPUSH
// result := [ ] ;
78123: LD_ADDR_VAR 0 2
78127: PUSH
78128: EMPTY
78129: ST_TO_ADDR
// if not array then
78130: LD_VAR 0 1
78134: NOT
78135: IFFALSE 78139
// exit ;
78137: GO 78238
// Randomize ;
78139: CALL_OW 10
// for i = array downto 1 do
78143: LD_ADDR_VAR 0 3
78147: PUSH
78148: DOUBLE
78149: LD_VAR 0 1
78153: INC
78154: ST_TO_ADDR
78155: LD_INT 1
78157: PUSH
78158: FOR_DOWNTO
78159: IFFALSE 78236
// begin index := rand ( 1 , array ) ;
78161: LD_ADDR_VAR 0 4
78165: PUSH
78166: LD_INT 1
78168: PPUSH
78169: LD_VAR 0 1
78173: PPUSH
78174: CALL_OW 12
78178: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
78179: LD_ADDR_VAR 0 2
78183: PUSH
78184: LD_VAR 0 2
78188: PPUSH
78189: LD_VAR 0 2
78193: PUSH
78194: LD_INT 1
78196: PLUS
78197: PPUSH
78198: LD_VAR 0 1
78202: PUSH
78203: LD_VAR 0 4
78207: ARRAY
78208: PPUSH
78209: CALL_OW 2
78213: ST_TO_ADDR
// array := Delete ( array , index ) ;
78214: LD_ADDR_VAR 0 1
78218: PUSH
78219: LD_VAR 0 1
78223: PPUSH
78224: LD_VAR 0 4
78228: PPUSH
78229: CALL_OW 3
78233: ST_TO_ADDR
// end ;
78234: GO 78158
78236: POP
78237: POP
// end ;
78238: LD_VAR 0 2
78242: RET
// export function GetBaseMaterials ( base ) ; begin
78243: LD_INT 0
78245: PPUSH
// result := [ 0 , 0 , 0 ] ;
78246: LD_ADDR_VAR 0 2
78250: PUSH
78251: LD_INT 0
78253: PUSH
78254: LD_INT 0
78256: PUSH
78257: LD_INT 0
78259: PUSH
78260: EMPTY
78261: LIST
78262: LIST
78263: LIST
78264: ST_TO_ADDR
// if not base then
78265: LD_VAR 0 1
78269: NOT
78270: IFFALSE 78274
// exit ;
78272: GO 78323
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
78274: LD_ADDR_VAR 0 2
78278: PUSH
78279: LD_VAR 0 1
78283: PPUSH
78284: LD_INT 1
78286: PPUSH
78287: CALL_OW 275
78291: PUSH
78292: LD_VAR 0 1
78296: PPUSH
78297: LD_INT 2
78299: PPUSH
78300: CALL_OW 275
78304: PUSH
78305: LD_VAR 0 1
78309: PPUSH
78310: LD_INT 3
78312: PPUSH
78313: CALL_OW 275
78317: PUSH
78318: EMPTY
78319: LIST
78320: LIST
78321: LIST
78322: ST_TO_ADDR
// end ;
78323: LD_VAR 0 2
78327: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
78328: LD_INT 0
78330: PPUSH
78331: PPUSH
// result := array ;
78332: LD_ADDR_VAR 0 3
78336: PUSH
78337: LD_VAR 0 1
78341: ST_TO_ADDR
// if size >= result then
78342: LD_VAR 0 2
78346: PUSH
78347: LD_VAR 0 3
78351: GREATEREQUAL
78352: IFFALSE 78356
// exit ;
78354: GO 78406
// if size then
78356: LD_VAR 0 2
78360: IFFALSE 78406
// for i := array downto size do
78362: LD_ADDR_VAR 0 4
78366: PUSH
78367: DOUBLE
78368: LD_VAR 0 1
78372: INC
78373: ST_TO_ADDR
78374: LD_VAR 0 2
78378: PUSH
78379: FOR_DOWNTO
78380: IFFALSE 78404
// result := Delete ( result , result ) ;
78382: LD_ADDR_VAR 0 3
78386: PUSH
78387: LD_VAR 0 3
78391: PPUSH
78392: LD_VAR 0 3
78396: PPUSH
78397: CALL_OW 3
78401: ST_TO_ADDR
78402: GO 78379
78404: POP
78405: POP
// end ;
78406: LD_VAR 0 3
78410: RET
// export function ComExit ( unit ) ; var tmp ; begin
78411: LD_INT 0
78413: PPUSH
78414: PPUSH
// if not IsInUnit ( unit ) then
78415: LD_VAR 0 1
78419: PPUSH
78420: CALL_OW 310
78424: NOT
78425: IFFALSE 78429
// exit ;
78427: GO 78489
// tmp := IsInUnit ( unit ) ;
78429: LD_ADDR_VAR 0 3
78433: PUSH
78434: LD_VAR 0 1
78438: PPUSH
78439: CALL_OW 310
78443: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
78444: LD_VAR 0 3
78448: PPUSH
78449: CALL_OW 247
78453: PUSH
78454: LD_INT 2
78456: EQUAL
78457: IFFALSE 78470
// ComExitVehicle ( unit ) else
78459: LD_VAR 0 1
78463: PPUSH
78464: CALL_OW 121
78468: GO 78479
// ComExitBuilding ( unit ) ;
78470: LD_VAR 0 1
78474: PPUSH
78475: CALL_OW 122
// result := tmp ;
78479: LD_ADDR_VAR 0 2
78483: PUSH
78484: LD_VAR 0 3
78488: ST_TO_ADDR
// end ;
78489: LD_VAR 0 2
78493: RET
// export function ComExitAll ( units ) ; var i ; begin
78494: LD_INT 0
78496: PPUSH
78497: PPUSH
// if not units then
78498: LD_VAR 0 1
78502: NOT
78503: IFFALSE 78507
// exit ;
78505: GO 78533
// for i in units do
78507: LD_ADDR_VAR 0 3
78511: PUSH
78512: LD_VAR 0 1
78516: PUSH
78517: FOR_IN
78518: IFFALSE 78531
// ComExit ( i ) ;
78520: LD_VAR 0 3
78524: PPUSH
78525: CALL 78411 0 1
78529: GO 78517
78531: POP
78532: POP
// end ;
78533: LD_VAR 0 2
78537: RET
// export function ResetHc ; begin
78538: LD_INT 0
78540: PPUSH
// InitHc ;
78541: CALL_OW 19
// hc_importance := 0 ;
78545: LD_ADDR_OWVAR 32
78549: PUSH
78550: LD_INT 0
78552: ST_TO_ADDR
// end ;
78553: LD_VAR 0 1
78557: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
78558: LD_INT 0
78560: PPUSH
78561: PPUSH
78562: PPUSH
// _x := ( x1 + x2 ) div 2 ;
78563: LD_ADDR_VAR 0 6
78567: PUSH
78568: LD_VAR 0 1
78572: PUSH
78573: LD_VAR 0 3
78577: PLUS
78578: PUSH
78579: LD_INT 2
78581: DIV
78582: ST_TO_ADDR
// if _x < 0 then
78583: LD_VAR 0 6
78587: PUSH
78588: LD_INT 0
78590: LESS
78591: IFFALSE 78608
// _x := _x * - 1 ;
78593: LD_ADDR_VAR 0 6
78597: PUSH
78598: LD_VAR 0 6
78602: PUSH
78603: LD_INT 1
78605: NEG
78606: MUL
78607: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
78608: LD_ADDR_VAR 0 7
78612: PUSH
78613: LD_VAR 0 2
78617: PUSH
78618: LD_VAR 0 4
78622: PLUS
78623: PUSH
78624: LD_INT 2
78626: DIV
78627: ST_TO_ADDR
// if _y < 0 then
78628: LD_VAR 0 7
78632: PUSH
78633: LD_INT 0
78635: LESS
78636: IFFALSE 78653
// _y := _y * - 1 ;
78638: LD_ADDR_VAR 0 7
78642: PUSH
78643: LD_VAR 0 7
78647: PUSH
78648: LD_INT 1
78650: NEG
78651: MUL
78652: ST_TO_ADDR
// result := [ _x , _y ] ;
78653: LD_ADDR_VAR 0 5
78657: PUSH
78658: LD_VAR 0 6
78662: PUSH
78663: LD_VAR 0 7
78667: PUSH
78668: EMPTY
78669: LIST
78670: LIST
78671: ST_TO_ADDR
// end ;
78672: LD_VAR 0 5
78676: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
78677: LD_INT 0
78679: PPUSH
78680: PPUSH
78681: PPUSH
78682: PPUSH
// task := GetTaskList ( unit ) ;
78683: LD_ADDR_VAR 0 7
78687: PUSH
78688: LD_VAR 0 1
78692: PPUSH
78693: CALL_OW 437
78697: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
78698: LD_VAR 0 7
78702: NOT
78703: PUSH
78704: LD_VAR 0 1
78708: PPUSH
78709: LD_VAR 0 2
78713: PPUSH
78714: CALL_OW 308
78718: NOT
78719: AND
78720: IFFALSE 78724
// exit ;
78722: GO 78842
// if IsInArea ( unit , area ) then
78724: LD_VAR 0 1
78728: PPUSH
78729: LD_VAR 0 2
78733: PPUSH
78734: CALL_OW 308
78738: IFFALSE 78756
// begin ComMoveToArea ( unit , goAway ) ;
78740: LD_VAR 0 1
78744: PPUSH
78745: LD_VAR 0 3
78749: PPUSH
78750: CALL_OW 113
// exit ;
78754: GO 78842
// end ; if task [ 1 ] [ 1 ] <> M then
78756: LD_VAR 0 7
78760: PUSH
78761: LD_INT 1
78763: ARRAY
78764: PUSH
78765: LD_INT 1
78767: ARRAY
78768: PUSH
78769: LD_STRING M
78771: NONEQUAL
78772: IFFALSE 78776
// exit ;
78774: GO 78842
// x := task [ 1 ] [ 2 ] ;
78776: LD_ADDR_VAR 0 5
78780: PUSH
78781: LD_VAR 0 7
78785: PUSH
78786: LD_INT 1
78788: ARRAY
78789: PUSH
78790: LD_INT 2
78792: ARRAY
78793: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
78794: LD_ADDR_VAR 0 6
78798: PUSH
78799: LD_VAR 0 7
78803: PUSH
78804: LD_INT 1
78806: ARRAY
78807: PUSH
78808: LD_INT 3
78810: ARRAY
78811: ST_TO_ADDR
// if InArea ( x , y , area ) then
78812: LD_VAR 0 5
78816: PPUSH
78817: LD_VAR 0 6
78821: PPUSH
78822: LD_VAR 0 2
78826: PPUSH
78827: CALL_OW 309
78831: IFFALSE 78842
// ComStop ( unit ) ;
78833: LD_VAR 0 1
78837: PPUSH
78838: CALL_OW 141
// end ;
78842: LD_VAR 0 4
78846: RET
// export function Abs ( value ) ; begin
78847: LD_INT 0
78849: PPUSH
// result := value ;
78850: LD_ADDR_VAR 0 2
78854: PUSH
78855: LD_VAR 0 1
78859: ST_TO_ADDR
// if value < 0 then
78860: LD_VAR 0 1
78864: PUSH
78865: LD_INT 0
78867: LESS
78868: IFFALSE 78885
// result := value * - 1 ;
78870: LD_ADDR_VAR 0 2
78874: PUSH
78875: LD_VAR 0 1
78879: PUSH
78880: LD_INT 1
78882: NEG
78883: MUL
78884: ST_TO_ADDR
// end ;
78885: LD_VAR 0 2
78889: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
78890: LD_INT 0
78892: PPUSH
78893: PPUSH
78894: PPUSH
78895: PPUSH
78896: PPUSH
78897: PPUSH
78898: PPUSH
78899: PPUSH
// if not unit or not building then
78900: LD_VAR 0 1
78904: NOT
78905: PUSH
78906: LD_VAR 0 2
78910: NOT
78911: OR
78912: IFFALSE 78916
// exit ;
78914: GO 79142
// x := GetX ( building ) ;
78916: LD_ADDR_VAR 0 4
78920: PUSH
78921: LD_VAR 0 2
78925: PPUSH
78926: CALL_OW 250
78930: ST_TO_ADDR
// y := GetY ( building ) ;
78931: LD_ADDR_VAR 0 6
78935: PUSH
78936: LD_VAR 0 2
78940: PPUSH
78941: CALL_OW 251
78945: ST_TO_ADDR
// d := GetDir ( building ) ;
78946: LD_ADDR_VAR 0 8
78950: PUSH
78951: LD_VAR 0 2
78955: PPUSH
78956: CALL_OW 254
78960: ST_TO_ADDR
// r := 4 ;
78961: LD_ADDR_VAR 0 9
78965: PUSH
78966: LD_INT 4
78968: ST_TO_ADDR
// for i := 1 to 5 do
78969: LD_ADDR_VAR 0 10
78973: PUSH
78974: DOUBLE
78975: LD_INT 1
78977: DEC
78978: ST_TO_ADDR
78979: LD_INT 5
78981: PUSH
78982: FOR_TO
78983: IFFALSE 79140
// begin _x := ShiftX ( x , d , r + i ) ;
78985: LD_ADDR_VAR 0 5
78989: PUSH
78990: LD_VAR 0 4
78994: PPUSH
78995: LD_VAR 0 8
78999: PPUSH
79000: LD_VAR 0 9
79004: PUSH
79005: LD_VAR 0 10
79009: PLUS
79010: PPUSH
79011: CALL_OW 272
79015: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
79016: LD_ADDR_VAR 0 7
79020: PUSH
79021: LD_VAR 0 6
79025: PPUSH
79026: LD_VAR 0 8
79030: PPUSH
79031: LD_VAR 0 9
79035: PUSH
79036: LD_VAR 0 10
79040: PLUS
79041: PPUSH
79042: CALL_OW 273
79046: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
79047: LD_VAR 0 5
79051: PPUSH
79052: LD_VAR 0 7
79056: PPUSH
79057: CALL_OW 488
79061: PUSH
79062: LD_VAR 0 5
79066: PPUSH
79067: LD_VAR 0 7
79071: PPUSH
79072: CALL_OW 428
79076: PPUSH
79077: CALL_OW 247
79081: PUSH
79082: LD_INT 3
79084: PUSH
79085: LD_INT 2
79087: PUSH
79088: EMPTY
79089: LIST
79090: LIST
79091: IN
79092: NOT
79093: AND
79094: IFFALSE 79138
// begin ComMoveXY ( unit , _x , _y ) ;
79096: LD_VAR 0 1
79100: PPUSH
79101: LD_VAR 0 5
79105: PPUSH
79106: LD_VAR 0 7
79110: PPUSH
79111: CALL_OW 111
// result := [ _x , _y ] ;
79115: LD_ADDR_VAR 0 3
79119: PUSH
79120: LD_VAR 0 5
79124: PUSH
79125: LD_VAR 0 7
79129: PUSH
79130: EMPTY
79131: LIST
79132: LIST
79133: ST_TO_ADDR
// exit ;
79134: POP
79135: POP
79136: GO 79142
// end ; end ;
79138: GO 78982
79140: POP
79141: POP
// end ;
79142: LD_VAR 0 3
79146: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
79147: LD_INT 0
79149: PPUSH
79150: PPUSH
79151: PPUSH
// result := 0 ;
79152: LD_ADDR_VAR 0 3
79156: PUSH
79157: LD_INT 0
79159: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
79160: LD_VAR 0 1
79164: PUSH
79165: LD_INT 0
79167: LESS
79168: PUSH
79169: LD_VAR 0 1
79173: PUSH
79174: LD_INT 8
79176: GREATER
79177: OR
79178: PUSH
79179: LD_VAR 0 2
79183: PUSH
79184: LD_INT 0
79186: LESS
79187: OR
79188: PUSH
79189: LD_VAR 0 2
79193: PUSH
79194: LD_INT 8
79196: GREATER
79197: OR
79198: IFFALSE 79202
// exit ;
79200: GO 79277
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
79202: LD_ADDR_VAR 0 4
79206: PUSH
79207: LD_INT 22
79209: PUSH
79210: LD_VAR 0 2
79214: PUSH
79215: EMPTY
79216: LIST
79217: LIST
79218: PPUSH
79219: CALL_OW 69
79223: PUSH
79224: FOR_IN
79225: IFFALSE 79275
// begin un := UnitShoot ( i ) ;
79227: LD_ADDR_VAR 0 5
79231: PUSH
79232: LD_VAR 0 4
79236: PPUSH
79237: CALL_OW 504
79241: ST_TO_ADDR
// if GetSide ( un ) = side1 then
79242: LD_VAR 0 5
79246: PPUSH
79247: CALL_OW 255
79251: PUSH
79252: LD_VAR 0 1
79256: EQUAL
79257: IFFALSE 79273
// begin result := un ;
79259: LD_ADDR_VAR 0 3
79263: PUSH
79264: LD_VAR 0 5
79268: ST_TO_ADDR
// exit ;
79269: POP
79270: POP
79271: GO 79277
// end ; end ;
79273: GO 79224
79275: POP
79276: POP
// end ;
79277: LD_VAR 0 3
79281: RET
// export function GetCargoBay ( units ) ; begin
79282: LD_INT 0
79284: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
79285: LD_ADDR_VAR 0 2
79289: PUSH
79290: LD_VAR 0 1
79294: PPUSH
79295: LD_INT 2
79297: PUSH
79298: LD_INT 34
79300: PUSH
79301: LD_INT 12
79303: PUSH
79304: EMPTY
79305: LIST
79306: LIST
79307: PUSH
79308: LD_INT 34
79310: PUSH
79311: LD_INT 51
79313: PUSH
79314: EMPTY
79315: LIST
79316: LIST
79317: PUSH
79318: LD_INT 34
79320: PUSH
79321: LD_INT 32
79323: PUSH
79324: EMPTY
79325: LIST
79326: LIST
79327: PUSH
79328: LD_INT 34
79330: PUSH
79331: LD_INT 89
79333: PUSH
79334: EMPTY
79335: LIST
79336: LIST
79337: PUSH
79338: EMPTY
79339: LIST
79340: LIST
79341: LIST
79342: LIST
79343: LIST
79344: PPUSH
79345: CALL_OW 72
79349: ST_TO_ADDR
// end ;
79350: LD_VAR 0 2
79354: RET
// export function Negate ( value ) ; begin
79355: LD_INT 0
79357: PPUSH
// result := not value ;
79358: LD_ADDR_VAR 0 2
79362: PUSH
79363: LD_VAR 0 1
79367: NOT
79368: ST_TO_ADDR
// end ;
79369: LD_VAR 0 2
79373: RET
// export function Inc ( value ) ; begin
79374: LD_INT 0
79376: PPUSH
// result := value + 1 ;
79377: LD_ADDR_VAR 0 2
79381: PUSH
79382: LD_VAR 0 1
79386: PUSH
79387: LD_INT 1
79389: PLUS
79390: ST_TO_ADDR
// end ;
79391: LD_VAR 0 2
79395: RET
// export function Dec ( value ) ; begin
79396: LD_INT 0
79398: PPUSH
// result := value - 1 ;
79399: LD_ADDR_VAR 0 2
79403: PUSH
79404: LD_VAR 0 1
79408: PUSH
79409: LD_INT 1
79411: MINUS
79412: ST_TO_ADDR
// end ;
79413: LD_VAR 0 2
79417: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
79418: LD_INT 0
79420: PPUSH
79421: PPUSH
79422: PPUSH
79423: PPUSH
79424: PPUSH
79425: PPUSH
79426: PPUSH
79427: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
79428: LD_VAR 0 1
79432: PPUSH
79433: LD_VAR 0 2
79437: PPUSH
79438: CALL_OW 488
79442: NOT
79443: PUSH
79444: LD_VAR 0 3
79448: PPUSH
79449: LD_VAR 0 4
79453: PPUSH
79454: CALL_OW 488
79458: NOT
79459: OR
79460: IFFALSE 79473
// begin result := - 1 ;
79462: LD_ADDR_VAR 0 5
79466: PUSH
79467: LD_INT 1
79469: NEG
79470: ST_TO_ADDR
// exit ;
79471: GO 79708
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
79473: LD_ADDR_VAR 0 12
79477: PUSH
79478: LD_VAR 0 1
79482: PPUSH
79483: LD_VAR 0 2
79487: PPUSH
79488: LD_VAR 0 3
79492: PPUSH
79493: LD_VAR 0 4
79497: PPUSH
79498: CALL 78558 0 4
79502: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
79503: LD_ADDR_VAR 0 11
79507: PUSH
79508: LD_VAR 0 1
79512: PPUSH
79513: LD_VAR 0 2
79517: PPUSH
79518: LD_VAR 0 12
79522: PUSH
79523: LD_INT 1
79525: ARRAY
79526: PPUSH
79527: LD_VAR 0 12
79531: PUSH
79532: LD_INT 2
79534: ARRAY
79535: PPUSH
79536: CALL_OW 298
79540: ST_TO_ADDR
// distance := 9999 ;
79541: LD_ADDR_VAR 0 10
79545: PUSH
79546: LD_INT 9999
79548: ST_TO_ADDR
// for i := 0 to 5 do
79549: LD_ADDR_VAR 0 6
79553: PUSH
79554: DOUBLE
79555: LD_INT 0
79557: DEC
79558: ST_TO_ADDR
79559: LD_INT 5
79561: PUSH
79562: FOR_TO
79563: IFFALSE 79706
// begin _x := ShiftX ( x1 , i , centerDist ) ;
79565: LD_ADDR_VAR 0 7
79569: PUSH
79570: LD_VAR 0 1
79574: PPUSH
79575: LD_VAR 0 6
79579: PPUSH
79580: LD_VAR 0 11
79584: PPUSH
79585: CALL_OW 272
79589: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
79590: LD_ADDR_VAR 0 8
79594: PUSH
79595: LD_VAR 0 2
79599: PPUSH
79600: LD_VAR 0 6
79604: PPUSH
79605: LD_VAR 0 11
79609: PPUSH
79610: CALL_OW 273
79614: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
79615: LD_VAR 0 7
79619: PPUSH
79620: LD_VAR 0 8
79624: PPUSH
79625: CALL_OW 488
79629: NOT
79630: IFFALSE 79634
// continue ;
79632: GO 79562
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
79634: LD_ADDR_VAR 0 9
79638: PUSH
79639: LD_VAR 0 12
79643: PUSH
79644: LD_INT 1
79646: ARRAY
79647: PPUSH
79648: LD_VAR 0 12
79652: PUSH
79653: LD_INT 2
79655: ARRAY
79656: PPUSH
79657: LD_VAR 0 7
79661: PPUSH
79662: LD_VAR 0 8
79666: PPUSH
79667: CALL_OW 298
79671: ST_TO_ADDR
// if tmp < distance then
79672: LD_VAR 0 9
79676: PUSH
79677: LD_VAR 0 10
79681: LESS
79682: IFFALSE 79704
// begin result := i ;
79684: LD_ADDR_VAR 0 5
79688: PUSH
79689: LD_VAR 0 6
79693: ST_TO_ADDR
// distance := tmp ;
79694: LD_ADDR_VAR 0 10
79698: PUSH
79699: LD_VAR 0 9
79703: ST_TO_ADDR
// end ; end ;
79704: GO 79562
79706: POP
79707: POP
// end ;
79708: LD_VAR 0 5
79712: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79713: LD_INT 0
79715: PPUSH
79716: PPUSH
// if not driver or not IsInUnit ( driver ) then
79717: LD_VAR 0 1
79721: NOT
79722: PUSH
79723: LD_VAR 0 1
79727: PPUSH
79728: CALL_OW 310
79732: NOT
79733: OR
79734: IFFALSE 79738
// exit ;
79736: GO 79828
// vehicle := IsInUnit ( driver ) ;
79738: LD_ADDR_VAR 0 3
79742: PUSH
79743: LD_VAR 0 1
79747: PPUSH
79748: CALL_OW 310
79752: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79753: LD_VAR 0 1
79757: PPUSH
79758: LD_STRING \
79760: PUSH
79761: LD_INT 0
79763: PUSH
79764: LD_INT 0
79766: PUSH
79767: LD_INT 0
79769: PUSH
79770: LD_INT 0
79772: PUSH
79773: LD_INT 0
79775: PUSH
79776: LD_INT 0
79778: PUSH
79779: EMPTY
79780: LIST
79781: LIST
79782: LIST
79783: LIST
79784: LIST
79785: LIST
79786: LIST
79787: PUSH
79788: LD_STRING E
79790: PUSH
79791: LD_INT 0
79793: PUSH
79794: LD_INT 0
79796: PUSH
79797: LD_VAR 0 3
79801: PUSH
79802: LD_INT 0
79804: PUSH
79805: LD_INT 0
79807: PUSH
79808: LD_INT 0
79810: PUSH
79811: EMPTY
79812: LIST
79813: LIST
79814: LIST
79815: LIST
79816: LIST
79817: LIST
79818: LIST
79819: PUSH
79820: EMPTY
79821: LIST
79822: LIST
79823: PPUSH
79824: CALL_OW 446
// end ;
79828: LD_VAR 0 2
79832: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79833: LD_INT 0
79835: PPUSH
79836: PPUSH
// if not driver or not IsInUnit ( driver ) then
79837: LD_VAR 0 1
79841: NOT
79842: PUSH
79843: LD_VAR 0 1
79847: PPUSH
79848: CALL_OW 310
79852: NOT
79853: OR
79854: IFFALSE 79858
// exit ;
79856: GO 79948
// vehicle := IsInUnit ( driver ) ;
79858: LD_ADDR_VAR 0 3
79862: PUSH
79863: LD_VAR 0 1
79867: PPUSH
79868: CALL_OW 310
79872: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79873: LD_VAR 0 1
79877: PPUSH
79878: LD_STRING \
79880: PUSH
79881: LD_INT 0
79883: PUSH
79884: LD_INT 0
79886: PUSH
79887: LD_INT 0
79889: PUSH
79890: LD_INT 0
79892: PUSH
79893: LD_INT 0
79895: PUSH
79896: LD_INT 0
79898: PUSH
79899: EMPTY
79900: LIST
79901: LIST
79902: LIST
79903: LIST
79904: LIST
79905: LIST
79906: LIST
79907: PUSH
79908: LD_STRING E
79910: PUSH
79911: LD_INT 0
79913: PUSH
79914: LD_INT 0
79916: PUSH
79917: LD_VAR 0 3
79921: PUSH
79922: LD_INT 0
79924: PUSH
79925: LD_INT 0
79927: PUSH
79928: LD_INT 0
79930: PUSH
79931: EMPTY
79932: LIST
79933: LIST
79934: LIST
79935: LIST
79936: LIST
79937: LIST
79938: LIST
79939: PUSH
79940: EMPTY
79941: LIST
79942: LIST
79943: PPUSH
79944: CALL_OW 447
// end ;
79948: LD_VAR 0 2
79952: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
79953: LD_INT 0
79955: PPUSH
79956: PPUSH
79957: PPUSH
// tmp := [ ] ;
79958: LD_ADDR_VAR 0 5
79962: PUSH
79963: EMPTY
79964: ST_TO_ADDR
// for i in units do
79965: LD_ADDR_VAR 0 4
79969: PUSH
79970: LD_VAR 0 1
79974: PUSH
79975: FOR_IN
79976: IFFALSE 80014
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
79978: LD_ADDR_VAR 0 5
79982: PUSH
79983: LD_VAR 0 5
79987: PPUSH
79988: LD_VAR 0 5
79992: PUSH
79993: LD_INT 1
79995: PLUS
79996: PPUSH
79997: LD_VAR 0 4
80001: PPUSH
80002: CALL_OW 256
80006: PPUSH
80007: CALL_OW 2
80011: ST_TO_ADDR
80012: GO 79975
80014: POP
80015: POP
// if not tmp then
80016: LD_VAR 0 5
80020: NOT
80021: IFFALSE 80025
// exit ;
80023: GO 80073
// if asc then
80025: LD_VAR 0 2
80029: IFFALSE 80053
// result := SortListByListAsc ( units , tmp ) else
80031: LD_ADDR_VAR 0 3
80035: PUSH
80036: LD_VAR 0 1
80040: PPUSH
80041: LD_VAR 0 5
80045: PPUSH
80046: CALL_OW 76
80050: ST_TO_ADDR
80051: GO 80073
// result := SortListByListDesc ( units , tmp ) ;
80053: LD_ADDR_VAR 0 3
80057: PUSH
80058: LD_VAR 0 1
80062: PPUSH
80063: LD_VAR 0 5
80067: PPUSH
80068: CALL_OW 77
80072: ST_TO_ADDR
// end ;
80073: LD_VAR 0 3
80077: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
80078: LD_INT 0
80080: PPUSH
80081: PPUSH
// task := GetTaskList ( mech ) ;
80082: LD_ADDR_VAR 0 4
80086: PUSH
80087: LD_VAR 0 1
80091: PPUSH
80092: CALL_OW 437
80096: ST_TO_ADDR
// if not task then
80097: LD_VAR 0 4
80101: NOT
80102: IFFALSE 80106
// exit ;
80104: GO 80148
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
80106: LD_ADDR_VAR 0 3
80110: PUSH
80111: LD_VAR 0 4
80115: PUSH
80116: LD_INT 1
80118: ARRAY
80119: PUSH
80120: LD_INT 1
80122: ARRAY
80123: PUSH
80124: LD_STRING r
80126: EQUAL
80127: PUSH
80128: LD_VAR 0 4
80132: PUSH
80133: LD_INT 1
80135: ARRAY
80136: PUSH
80137: LD_INT 4
80139: ARRAY
80140: PUSH
80141: LD_VAR 0 2
80145: EQUAL
80146: AND
80147: ST_TO_ADDR
// end ;
80148: LD_VAR 0 3
80152: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
80153: LD_INT 0
80155: PPUSH
// SetDir ( unit , d ) ;
80156: LD_VAR 0 1
80160: PPUSH
80161: LD_VAR 0 4
80165: PPUSH
80166: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
80170: LD_VAR 0 1
80174: PPUSH
80175: LD_VAR 0 2
80179: PPUSH
80180: LD_VAR 0 3
80184: PPUSH
80185: LD_VAR 0 5
80189: PPUSH
80190: CALL_OW 48
// end ;
80194: LD_VAR 0 6
80198: RET
// export function ToNaturalNumber ( number ) ; begin
80199: LD_INT 0
80201: PPUSH
// result := number div 1 ;
80202: LD_ADDR_VAR 0 2
80206: PUSH
80207: LD_VAR 0 1
80211: PUSH
80212: LD_INT 1
80214: DIV
80215: ST_TO_ADDR
// if number < 0 then
80216: LD_VAR 0 1
80220: PUSH
80221: LD_INT 0
80223: LESS
80224: IFFALSE 80234
// result := 0 ;
80226: LD_ADDR_VAR 0 2
80230: PUSH
80231: LD_INT 0
80233: ST_TO_ADDR
// end ;
80234: LD_VAR 0 2
80238: RET
// export function SortByClass ( units , class ) ; var un ; begin
80239: LD_INT 0
80241: PPUSH
80242: PPUSH
// if not units or not class then
80243: LD_VAR 0 1
80247: NOT
80248: PUSH
80249: LD_VAR 0 2
80253: NOT
80254: OR
80255: IFFALSE 80259
// exit ;
80257: GO 80354
// result := [ ] ;
80259: LD_ADDR_VAR 0 3
80263: PUSH
80264: EMPTY
80265: ST_TO_ADDR
// for un in units do
80266: LD_ADDR_VAR 0 4
80270: PUSH
80271: LD_VAR 0 1
80275: PUSH
80276: FOR_IN
80277: IFFALSE 80352
// if GetClass ( un ) = class then
80279: LD_VAR 0 4
80283: PPUSH
80284: CALL_OW 257
80288: PUSH
80289: LD_VAR 0 2
80293: EQUAL
80294: IFFALSE 80321
// result := Insert ( result , 1 , un ) else
80296: LD_ADDR_VAR 0 3
80300: PUSH
80301: LD_VAR 0 3
80305: PPUSH
80306: LD_INT 1
80308: PPUSH
80309: LD_VAR 0 4
80313: PPUSH
80314: CALL_OW 2
80318: ST_TO_ADDR
80319: GO 80350
// result := Replace ( result , result + 1 , un ) ;
80321: LD_ADDR_VAR 0 3
80325: PUSH
80326: LD_VAR 0 3
80330: PPUSH
80331: LD_VAR 0 3
80335: PUSH
80336: LD_INT 1
80338: PLUS
80339: PPUSH
80340: LD_VAR 0 4
80344: PPUSH
80345: CALL_OW 1
80349: ST_TO_ADDR
80350: GO 80276
80352: POP
80353: POP
// end ;
80354: LD_VAR 0 3
80358: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
80359: LD_INT 0
80361: PPUSH
80362: PPUSH
80363: PPUSH
80364: PPUSH
80365: PPUSH
80366: PPUSH
80367: PPUSH
// result := [ ] ;
80368: LD_ADDR_VAR 0 4
80372: PUSH
80373: EMPTY
80374: ST_TO_ADDR
// if x - r < 0 then
80375: LD_VAR 0 1
80379: PUSH
80380: LD_VAR 0 3
80384: MINUS
80385: PUSH
80386: LD_INT 0
80388: LESS
80389: IFFALSE 80401
// min_x := 0 else
80391: LD_ADDR_VAR 0 8
80395: PUSH
80396: LD_INT 0
80398: ST_TO_ADDR
80399: GO 80417
// min_x := x - r ;
80401: LD_ADDR_VAR 0 8
80405: PUSH
80406: LD_VAR 0 1
80410: PUSH
80411: LD_VAR 0 3
80415: MINUS
80416: ST_TO_ADDR
// if y - r < 0 then
80417: LD_VAR 0 2
80421: PUSH
80422: LD_VAR 0 3
80426: MINUS
80427: PUSH
80428: LD_INT 0
80430: LESS
80431: IFFALSE 80443
// min_y := 0 else
80433: LD_ADDR_VAR 0 7
80437: PUSH
80438: LD_INT 0
80440: ST_TO_ADDR
80441: GO 80459
// min_y := y - r ;
80443: LD_ADDR_VAR 0 7
80447: PUSH
80448: LD_VAR 0 2
80452: PUSH
80453: LD_VAR 0 3
80457: MINUS
80458: ST_TO_ADDR
// max_x := x + r ;
80459: LD_ADDR_VAR 0 9
80463: PUSH
80464: LD_VAR 0 1
80468: PUSH
80469: LD_VAR 0 3
80473: PLUS
80474: ST_TO_ADDR
// max_y := y + r ;
80475: LD_ADDR_VAR 0 10
80479: PUSH
80480: LD_VAR 0 2
80484: PUSH
80485: LD_VAR 0 3
80489: PLUS
80490: ST_TO_ADDR
// for _x = min_x to max_x do
80491: LD_ADDR_VAR 0 5
80495: PUSH
80496: DOUBLE
80497: LD_VAR 0 8
80501: DEC
80502: ST_TO_ADDR
80503: LD_VAR 0 9
80507: PUSH
80508: FOR_TO
80509: IFFALSE 80610
// for _y = min_y to max_y do
80511: LD_ADDR_VAR 0 6
80515: PUSH
80516: DOUBLE
80517: LD_VAR 0 7
80521: DEC
80522: ST_TO_ADDR
80523: LD_VAR 0 10
80527: PUSH
80528: FOR_TO
80529: IFFALSE 80606
// begin if not ValidHex ( _x , _y ) then
80531: LD_VAR 0 5
80535: PPUSH
80536: LD_VAR 0 6
80540: PPUSH
80541: CALL_OW 488
80545: NOT
80546: IFFALSE 80550
// continue ;
80548: GO 80528
// if GetResourceTypeXY ( _x , _y ) then
80550: LD_VAR 0 5
80554: PPUSH
80555: LD_VAR 0 6
80559: PPUSH
80560: CALL_OW 283
80564: IFFALSE 80604
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
80566: LD_ADDR_VAR 0 4
80570: PUSH
80571: LD_VAR 0 4
80575: PPUSH
80576: LD_VAR 0 4
80580: PUSH
80581: LD_INT 1
80583: PLUS
80584: PPUSH
80585: LD_VAR 0 5
80589: PUSH
80590: LD_VAR 0 6
80594: PUSH
80595: EMPTY
80596: LIST
80597: LIST
80598: PPUSH
80599: CALL_OW 1
80603: ST_TO_ADDR
// end ;
80604: GO 80528
80606: POP
80607: POP
80608: GO 80508
80610: POP
80611: POP
// end ;
80612: LD_VAR 0 4
80616: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
80617: LD_INT 0
80619: PPUSH
80620: PPUSH
80621: PPUSH
80622: PPUSH
80623: PPUSH
80624: PPUSH
80625: PPUSH
80626: PPUSH
// if not units then
80627: LD_VAR 0 1
80631: NOT
80632: IFFALSE 80636
// exit ;
80634: GO 81160
// result := UnitFilter ( units , [ f_ok ] ) ;
80636: LD_ADDR_VAR 0 3
80640: PUSH
80641: LD_VAR 0 1
80645: PPUSH
80646: LD_INT 50
80648: PUSH
80649: EMPTY
80650: LIST
80651: PPUSH
80652: CALL_OW 72
80656: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
80657: LD_ADDR_VAR 0 8
80661: PUSH
80662: LD_VAR 0 1
80666: PUSH
80667: LD_INT 1
80669: ARRAY
80670: PPUSH
80671: CALL_OW 255
80675: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
80676: LD_ADDR_VAR 0 10
80680: PUSH
80681: LD_INT 29
80683: PUSH
80684: LD_INT 91
80686: PUSH
80687: LD_INT 49
80689: PUSH
80690: EMPTY
80691: LIST
80692: LIST
80693: LIST
80694: ST_TO_ADDR
// if not result then
80695: LD_VAR 0 3
80699: NOT
80700: IFFALSE 80704
// exit ;
80702: GO 81160
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
80704: LD_ADDR_VAR 0 5
80708: PUSH
80709: LD_INT 81
80711: PUSH
80712: LD_VAR 0 8
80716: PUSH
80717: EMPTY
80718: LIST
80719: LIST
80720: PPUSH
80721: CALL_OW 69
80725: ST_TO_ADDR
// for i in result do
80726: LD_ADDR_VAR 0 4
80730: PUSH
80731: LD_VAR 0 3
80735: PUSH
80736: FOR_IN
80737: IFFALSE 81158
// begin tag := GetTag ( i ) + 1 ;
80739: LD_ADDR_VAR 0 9
80743: PUSH
80744: LD_VAR 0 4
80748: PPUSH
80749: CALL_OW 110
80753: PUSH
80754: LD_INT 1
80756: PLUS
80757: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
80758: LD_ADDR_VAR 0 7
80762: PUSH
80763: LD_VAR 0 4
80767: PPUSH
80768: CALL_OW 250
80772: PPUSH
80773: LD_VAR 0 4
80777: PPUSH
80778: CALL_OW 251
80782: PPUSH
80783: LD_INT 6
80785: PPUSH
80786: CALL 80359 0 3
80790: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
80791: LD_VAR 0 4
80795: PPUSH
80796: CALL_OW 247
80800: PUSH
80801: LD_INT 2
80803: EQUAL
80804: PUSH
80805: LD_VAR 0 7
80809: AND
80810: PUSH
80811: LD_VAR 0 4
80815: PPUSH
80816: CALL_OW 264
80820: PUSH
80821: LD_VAR 0 10
80825: IN
80826: NOT
80827: AND
80828: IFFALSE 80867
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
80830: LD_VAR 0 4
80834: PPUSH
80835: LD_VAR 0 7
80839: PUSH
80840: LD_INT 1
80842: ARRAY
80843: PUSH
80844: LD_INT 1
80846: ARRAY
80847: PPUSH
80848: LD_VAR 0 7
80852: PUSH
80853: LD_INT 1
80855: ARRAY
80856: PUSH
80857: LD_INT 2
80859: ARRAY
80860: PPUSH
80861: CALL_OW 116
80865: GO 81156
// if path > tag then
80867: LD_VAR 0 2
80871: PUSH
80872: LD_VAR 0 9
80876: GREATER
80877: IFFALSE 81085
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
80879: LD_ADDR_VAR 0 6
80883: PUSH
80884: LD_VAR 0 5
80888: PPUSH
80889: LD_INT 91
80891: PUSH
80892: LD_VAR 0 4
80896: PUSH
80897: LD_INT 8
80899: PUSH
80900: EMPTY
80901: LIST
80902: LIST
80903: LIST
80904: PPUSH
80905: CALL_OW 72
80909: ST_TO_ADDR
// if nearEnemy then
80910: LD_VAR 0 6
80914: IFFALSE 80983
// begin if GetWeapon ( i ) = ru_time_lapser then
80916: LD_VAR 0 4
80920: PPUSH
80921: CALL_OW 264
80925: PUSH
80926: LD_INT 49
80928: EQUAL
80929: IFFALSE 80957
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
80931: LD_VAR 0 4
80935: PPUSH
80936: LD_VAR 0 6
80940: PPUSH
80941: LD_VAR 0 4
80945: PPUSH
80946: CALL_OW 74
80950: PPUSH
80951: CALL_OW 112
80955: GO 80981
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
80957: LD_VAR 0 4
80961: PPUSH
80962: LD_VAR 0 6
80966: PPUSH
80967: LD_VAR 0 4
80971: PPUSH
80972: CALL_OW 74
80976: PPUSH
80977: CALL 82085 0 2
// end else
80981: GO 81083
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
80983: LD_VAR 0 4
80987: PPUSH
80988: LD_VAR 0 2
80992: PUSH
80993: LD_VAR 0 9
80997: ARRAY
80998: PUSH
80999: LD_INT 1
81001: ARRAY
81002: PPUSH
81003: LD_VAR 0 2
81007: PUSH
81008: LD_VAR 0 9
81012: ARRAY
81013: PUSH
81014: LD_INT 2
81016: ARRAY
81017: PPUSH
81018: CALL_OW 297
81022: PUSH
81023: LD_INT 6
81025: GREATER
81026: IFFALSE 81069
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
81028: LD_VAR 0 4
81032: PPUSH
81033: LD_VAR 0 2
81037: PUSH
81038: LD_VAR 0 9
81042: ARRAY
81043: PUSH
81044: LD_INT 1
81046: ARRAY
81047: PPUSH
81048: LD_VAR 0 2
81052: PUSH
81053: LD_VAR 0 9
81057: ARRAY
81058: PUSH
81059: LD_INT 2
81061: ARRAY
81062: PPUSH
81063: CALL_OW 114
81067: GO 81083
// SetTag ( i , tag ) ;
81069: LD_VAR 0 4
81073: PPUSH
81074: LD_VAR 0 9
81078: PPUSH
81079: CALL_OW 109
// end else
81083: GO 81156
// if enemy then
81085: LD_VAR 0 5
81089: IFFALSE 81156
// begin if GetWeapon ( i ) = ru_time_lapser then
81091: LD_VAR 0 4
81095: PPUSH
81096: CALL_OW 264
81100: PUSH
81101: LD_INT 49
81103: EQUAL
81104: IFFALSE 81132
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
81106: LD_VAR 0 4
81110: PPUSH
81111: LD_VAR 0 5
81115: PPUSH
81116: LD_VAR 0 4
81120: PPUSH
81121: CALL_OW 74
81125: PPUSH
81126: CALL_OW 112
81130: GO 81156
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
81132: LD_VAR 0 4
81136: PPUSH
81137: LD_VAR 0 5
81141: PPUSH
81142: LD_VAR 0 4
81146: PPUSH
81147: CALL_OW 74
81151: PPUSH
81152: CALL 82085 0 2
// end ; end ;
81156: GO 80736
81158: POP
81159: POP
// end ;
81160: LD_VAR 0 3
81164: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
81165: LD_INT 0
81167: PPUSH
81168: PPUSH
81169: PPUSH
// if not unit or IsInUnit ( unit ) then
81170: LD_VAR 0 1
81174: NOT
81175: PUSH
81176: LD_VAR 0 1
81180: PPUSH
81181: CALL_OW 310
81185: OR
81186: IFFALSE 81190
// exit ;
81188: GO 81281
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
81190: LD_ADDR_VAR 0 4
81194: PUSH
81195: LD_VAR 0 1
81199: PPUSH
81200: CALL_OW 250
81204: PPUSH
81205: LD_VAR 0 2
81209: PPUSH
81210: LD_INT 1
81212: PPUSH
81213: CALL_OW 272
81217: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
81218: LD_ADDR_VAR 0 5
81222: PUSH
81223: LD_VAR 0 1
81227: PPUSH
81228: CALL_OW 251
81232: PPUSH
81233: LD_VAR 0 2
81237: PPUSH
81238: LD_INT 1
81240: PPUSH
81241: CALL_OW 273
81245: ST_TO_ADDR
// if ValidHex ( x , y ) then
81246: LD_VAR 0 4
81250: PPUSH
81251: LD_VAR 0 5
81255: PPUSH
81256: CALL_OW 488
81260: IFFALSE 81281
// ComTurnXY ( unit , x , y ) ;
81262: LD_VAR 0 1
81266: PPUSH
81267: LD_VAR 0 4
81271: PPUSH
81272: LD_VAR 0 5
81276: PPUSH
81277: CALL_OW 118
// end ;
81281: LD_VAR 0 3
81285: RET
// export function SeeUnits ( side , units ) ; var i ; begin
81286: LD_INT 0
81288: PPUSH
81289: PPUSH
// result := false ;
81290: LD_ADDR_VAR 0 3
81294: PUSH
81295: LD_INT 0
81297: ST_TO_ADDR
// if not units then
81298: LD_VAR 0 2
81302: NOT
81303: IFFALSE 81307
// exit ;
81305: GO 81352
// for i in units do
81307: LD_ADDR_VAR 0 4
81311: PUSH
81312: LD_VAR 0 2
81316: PUSH
81317: FOR_IN
81318: IFFALSE 81350
// if See ( side , i ) then
81320: LD_VAR 0 1
81324: PPUSH
81325: LD_VAR 0 4
81329: PPUSH
81330: CALL_OW 292
81334: IFFALSE 81348
// begin result := true ;
81336: LD_ADDR_VAR 0 3
81340: PUSH
81341: LD_INT 1
81343: ST_TO_ADDR
// exit ;
81344: POP
81345: POP
81346: GO 81352
// end ;
81348: GO 81317
81350: POP
81351: POP
// end ;
81352: LD_VAR 0 3
81356: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
81357: LD_INT 0
81359: PPUSH
81360: PPUSH
81361: PPUSH
81362: PPUSH
// if not unit or not points then
81363: LD_VAR 0 1
81367: NOT
81368: PUSH
81369: LD_VAR 0 2
81373: NOT
81374: OR
81375: IFFALSE 81379
// exit ;
81377: GO 81469
// dist := 99999 ;
81379: LD_ADDR_VAR 0 5
81383: PUSH
81384: LD_INT 99999
81386: ST_TO_ADDR
// for i in points do
81387: LD_ADDR_VAR 0 4
81391: PUSH
81392: LD_VAR 0 2
81396: PUSH
81397: FOR_IN
81398: IFFALSE 81467
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
81400: LD_ADDR_VAR 0 6
81404: PUSH
81405: LD_VAR 0 1
81409: PPUSH
81410: LD_VAR 0 4
81414: PUSH
81415: LD_INT 1
81417: ARRAY
81418: PPUSH
81419: LD_VAR 0 4
81423: PUSH
81424: LD_INT 2
81426: ARRAY
81427: PPUSH
81428: CALL_OW 297
81432: ST_TO_ADDR
// if tmpDist < dist then
81433: LD_VAR 0 6
81437: PUSH
81438: LD_VAR 0 5
81442: LESS
81443: IFFALSE 81465
// begin result := i ;
81445: LD_ADDR_VAR 0 3
81449: PUSH
81450: LD_VAR 0 4
81454: ST_TO_ADDR
// dist := tmpDist ;
81455: LD_ADDR_VAR 0 5
81459: PUSH
81460: LD_VAR 0 6
81464: ST_TO_ADDR
// end ; end ;
81465: GO 81397
81467: POP
81468: POP
// end ;
81469: LD_VAR 0 3
81473: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
81474: LD_INT 0
81476: PPUSH
// uc_side := side ;
81477: LD_ADDR_OWVAR 20
81481: PUSH
81482: LD_VAR 0 1
81486: ST_TO_ADDR
// uc_nation := 3 ;
81487: LD_ADDR_OWVAR 21
81491: PUSH
81492: LD_INT 3
81494: ST_TO_ADDR
// vc_chassis := 25 ;
81495: LD_ADDR_OWVAR 37
81499: PUSH
81500: LD_INT 25
81502: ST_TO_ADDR
// vc_engine := engine_siberite ;
81503: LD_ADDR_OWVAR 39
81507: PUSH
81508: LD_INT 3
81510: ST_TO_ADDR
// vc_control := control_computer ;
81511: LD_ADDR_OWVAR 38
81515: PUSH
81516: LD_INT 3
81518: ST_TO_ADDR
// vc_weapon := 59 ;
81519: LD_ADDR_OWVAR 40
81523: PUSH
81524: LD_INT 59
81526: ST_TO_ADDR
// result := CreateVehicle ;
81527: LD_ADDR_VAR 0 5
81531: PUSH
81532: CALL_OW 45
81536: ST_TO_ADDR
// SetDir ( result , d ) ;
81537: LD_VAR 0 5
81541: PPUSH
81542: LD_VAR 0 4
81546: PPUSH
81547: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
81551: LD_VAR 0 5
81555: PPUSH
81556: LD_VAR 0 2
81560: PPUSH
81561: LD_VAR 0 3
81565: PPUSH
81566: LD_INT 0
81568: PPUSH
81569: CALL_OW 48
// end ;
81573: LD_VAR 0 5
81577: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
81578: LD_INT 0
81580: PPUSH
81581: PPUSH
81582: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
81583: LD_ADDR_VAR 0 2
81587: PUSH
81588: LD_INT 0
81590: PUSH
81591: LD_INT 0
81593: PUSH
81594: LD_INT 0
81596: PUSH
81597: LD_INT 0
81599: PUSH
81600: EMPTY
81601: LIST
81602: LIST
81603: LIST
81604: LIST
81605: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
81606: LD_VAR 0 1
81610: NOT
81611: PUSH
81612: LD_VAR 0 1
81616: PPUSH
81617: CALL_OW 264
81621: PUSH
81622: LD_INT 12
81624: PUSH
81625: LD_INT 51
81627: PUSH
81628: LD_INT 32
81630: PUSH
81631: LD_INT 89
81633: PUSH
81634: EMPTY
81635: LIST
81636: LIST
81637: LIST
81638: LIST
81639: IN
81640: NOT
81641: OR
81642: IFFALSE 81646
// exit ;
81644: GO 81744
// for i := 1 to 3 do
81646: LD_ADDR_VAR 0 3
81650: PUSH
81651: DOUBLE
81652: LD_INT 1
81654: DEC
81655: ST_TO_ADDR
81656: LD_INT 3
81658: PUSH
81659: FOR_TO
81660: IFFALSE 81742
// begin tmp := GetCargo ( cargo , i ) ;
81662: LD_ADDR_VAR 0 4
81666: PUSH
81667: LD_VAR 0 1
81671: PPUSH
81672: LD_VAR 0 3
81676: PPUSH
81677: CALL_OW 289
81681: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
81682: LD_ADDR_VAR 0 2
81686: PUSH
81687: LD_VAR 0 2
81691: PPUSH
81692: LD_VAR 0 3
81696: PPUSH
81697: LD_VAR 0 4
81701: PPUSH
81702: CALL_OW 1
81706: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
81707: LD_ADDR_VAR 0 2
81711: PUSH
81712: LD_VAR 0 2
81716: PPUSH
81717: LD_INT 4
81719: PPUSH
81720: LD_VAR 0 2
81724: PUSH
81725: LD_INT 4
81727: ARRAY
81728: PUSH
81729: LD_VAR 0 4
81733: PLUS
81734: PPUSH
81735: CALL_OW 1
81739: ST_TO_ADDR
// end ;
81740: GO 81659
81742: POP
81743: POP
// end ;
81744: LD_VAR 0 2
81748: RET
// export function Length ( array ) ; begin
81749: LD_INT 0
81751: PPUSH
// result := array + 0 ;
81752: LD_ADDR_VAR 0 2
81756: PUSH
81757: LD_VAR 0 1
81761: PUSH
81762: LD_INT 0
81764: PLUS
81765: ST_TO_ADDR
// end ;
81766: LD_VAR 0 2
81770: RET
// export function PrepareArray ( array ) ; begin
81771: LD_INT 0
81773: PPUSH
// result := array diff 0 ;
81774: LD_ADDR_VAR 0 2
81778: PUSH
81779: LD_VAR 0 1
81783: PUSH
81784: LD_INT 0
81786: DIFF
81787: ST_TO_ADDR
// if not result [ 1 ] then
81788: LD_VAR 0 2
81792: PUSH
81793: LD_INT 1
81795: ARRAY
81796: NOT
81797: IFFALSE 81817
// result := Delete ( result , 1 ) ;
81799: LD_ADDR_VAR 0 2
81803: PUSH
81804: LD_VAR 0 2
81808: PPUSH
81809: LD_INT 1
81811: PPUSH
81812: CALL_OW 3
81816: ST_TO_ADDR
// end ;
81817: LD_VAR 0 2
81821: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
81822: LD_INT 0
81824: PPUSH
81825: PPUSH
81826: PPUSH
81827: PPUSH
// sibRocketRange := 25 ;
81828: LD_ADDR_VAR 0 6
81832: PUSH
81833: LD_INT 25
81835: ST_TO_ADDR
// result := false ;
81836: LD_ADDR_VAR 0 4
81840: PUSH
81841: LD_INT 0
81843: ST_TO_ADDR
// for i := 0 to 5 do
81844: LD_ADDR_VAR 0 5
81848: PUSH
81849: DOUBLE
81850: LD_INT 0
81852: DEC
81853: ST_TO_ADDR
81854: LD_INT 5
81856: PUSH
81857: FOR_TO
81858: IFFALSE 81925
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
81860: LD_VAR 0 1
81864: PPUSH
81865: LD_VAR 0 5
81869: PPUSH
81870: LD_VAR 0 6
81874: PPUSH
81875: CALL_OW 272
81879: PPUSH
81880: LD_VAR 0 2
81884: PPUSH
81885: LD_VAR 0 5
81889: PPUSH
81890: LD_VAR 0 6
81894: PPUSH
81895: CALL_OW 273
81899: PPUSH
81900: LD_VAR 0 3
81904: PPUSH
81905: CALL_OW 309
81909: IFFALSE 81923
// begin result := true ;
81911: LD_ADDR_VAR 0 4
81915: PUSH
81916: LD_INT 1
81918: ST_TO_ADDR
// exit ;
81919: POP
81920: POP
81921: GO 81927
// end ;
81923: GO 81857
81925: POP
81926: POP
// end ;
81927: LD_VAR 0 4
81931: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
81932: LD_INT 0
81934: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
81935: LD_VAR 0 1
81939: PPUSH
81940: LD_VAR 0 2
81944: PPUSH
81945: LD_INT 0
81947: PPUSH
81948: LD_INT 0
81950: PPUSH
81951: LD_INT 1
81953: PPUSH
81954: LD_INT 0
81956: PPUSH
81957: CALL_OW 587
// end ;
81961: LD_VAR 0 3
81965: RET
// export function CenterOnNow ( unit ) ; begin
81966: LD_INT 0
81968: PPUSH
// result := IsInUnit ( unit ) ;
81969: LD_ADDR_VAR 0 2
81973: PUSH
81974: LD_VAR 0 1
81978: PPUSH
81979: CALL_OW 310
81983: ST_TO_ADDR
// if not result then
81984: LD_VAR 0 2
81988: NOT
81989: IFFALSE 82001
// result := unit ;
81991: LD_ADDR_VAR 0 2
81995: PUSH
81996: LD_VAR 0 1
82000: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
82001: LD_VAR 0 1
82005: PPUSH
82006: CALL_OW 87
// end ;
82010: LD_VAR 0 2
82014: RET
// export function ComMoveHex ( unit , hex ) ; begin
82015: LD_INT 0
82017: PPUSH
// if not hex then
82018: LD_VAR 0 2
82022: NOT
82023: IFFALSE 82027
// exit ;
82025: GO 82080
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
82027: LD_VAR 0 2
82031: PUSH
82032: LD_INT 1
82034: ARRAY
82035: PPUSH
82036: LD_VAR 0 2
82040: PUSH
82041: LD_INT 2
82043: ARRAY
82044: PPUSH
82045: CALL_OW 428
82049: IFFALSE 82053
// exit ;
82051: GO 82080
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
82053: LD_VAR 0 1
82057: PPUSH
82058: LD_VAR 0 2
82062: PUSH
82063: LD_INT 1
82065: ARRAY
82066: PPUSH
82067: LD_VAR 0 2
82071: PUSH
82072: LD_INT 2
82074: ARRAY
82075: PPUSH
82076: CALL_OW 111
// end ;
82080: LD_VAR 0 3
82084: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
82085: LD_INT 0
82087: PPUSH
82088: PPUSH
82089: PPUSH
// if not unit or not enemy then
82090: LD_VAR 0 1
82094: NOT
82095: PUSH
82096: LD_VAR 0 2
82100: NOT
82101: OR
82102: IFFALSE 82106
// exit ;
82104: GO 82230
// x := GetX ( enemy ) ;
82106: LD_ADDR_VAR 0 4
82110: PUSH
82111: LD_VAR 0 2
82115: PPUSH
82116: CALL_OW 250
82120: ST_TO_ADDR
// y := GetY ( enemy ) ;
82121: LD_ADDR_VAR 0 5
82125: PUSH
82126: LD_VAR 0 2
82130: PPUSH
82131: CALL_OW 251
82135: ST_TO_ADDR
// if ValidHex ( x , y ) then
82136: LD_VAR 0 4
82140: PPUSH
82141: LD_VAR 0 5
82145: PPUSH
82146: CALL_OW 488
82150: IFFALSE 82230
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
82152: LD_VAR 0 2
82156: PPUSH
82157: CALL_OW 247
82161: PUSH
82162: LD_INT 3
82164: PUSH
82165: LD_INT 2
82167: PUSH
82168: EMPTY
82169: LIST
82170: LIST
82171: IN
82172: PUSH
82173: LD_VAR 0 1
82177: PPUSH
82178: CALL_OW 255
82182: PPUSH
82183: LD_VAR 0 2
82187: PPUSH
82188: CALL_OW 292
82192: AND
82193: IFFALSE 82211
// ComAttackUnit ( unit , enemy ) else
82195: LD_VAR 0 1
82199: PPUSH
82200: LD_VAR 0 2
82204: PPUSH
82205: CALL_OW 115
82209: GO 82230
// ComAgressiveMove ( unit , x , y ) ;
82211: LD_VAR 0 1
82215: PPUSH
82216: LD_VAR 0 4
82220: PPUSH
82221: LD_VAR 0 5
82225: PPUSH
82226: CALL_OW 114
// end ; end_of_file
82230: LD_VAR 0 3
82234: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
82235: LD_VAR 0 1
82239: PUSH
82240: LD_INT 200
82242: DOUBLE
82243: GREATEREQUAL
82244: IFFALSE 82252
82246: LD_INT 299
82248: DOUBLE
82249: LESSEQUAL
82250: IFTRUE 82254
82252: GO 82286
82254: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
82255: LD_VAR 0 1
82259: PPUSH
82260: LD_VAR 0 2
82264: PPUSH
82265: LD_VAR 0 3
82269: PPUSH
82270: LD_VAR 0 4
82274: PPUSH
82275: LD_VAR 0 5
82279: PPUSH
82280: CALL 35959 0 5
82284: GO 82363
82286: LD_INT 300
82288: DOUBLE
82289: GREATEREQUAL
82290: IFFALSE 82298
82292: LD_INT 399
82294: DOUBLE
82295: LESSEQUAL
82296: IFTRUE 82300
82298: GO 82362
82300: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
82301: LD_VAR 0 1
82305: PPUSH
82306: LD_VAR 0 2
82310: PPUSH
82311: LD_VAR 0 3
82315: PPUSH
82316: LD_VAR 0 4
82320: PPUSH
82321: LD_VAR 0 5
82325: PPUSH
82326: LD_VAR 0 6
82330: PPUSH
82331: LD_VAR 0 7
82335: PPUSH
82336: LD_VAR 0 8
82340: PPUSH
82341: LD_VAR 0 9
82345: PPUSH
82346: LD_VAR 0 10
82350: PPUSH
82351: LD_VAR 0 11
82355: PPUSH
82356: CALL 32284 0 11
82360: GO 82363
82362: POP
// end ;
82363: PPOPN 11
82365: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
82366: LD_VAR 0 1
82370: PPUSH
82371: LD_VAR 0 2
82375: PPUSH
82376: LD_VAR 0 3
82380: PPUSH
82381: LD_VAR 0 4
82385: PPUSH
82386: LD_VAR 0 5
82390: PPUSH
82391: CALL 35695 0 5
// end ; end_of_file
82395: PPOPN 5
82397: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
82398: LD_VAR 0 1
82402: PPUSH
82403: LD_VAR 0 2
82407: PPUSH
82408: LD_VAR 0 3
82412: PPUSH
82413: LD_VAR 0 4
82417: PPUSH
82418: LD_VAR 0 5
82422: PPUSH
82423: LD_VAR 0 6
82427: PPUSH
82428: CALL 19936 0 6
// end ;
82432: PPOPN 6
82434: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
82435: LD_INT 0
82437: PPUSH
// begin if not units then
82438: LD_VAR 0 1
82442: NOT
82443: IFFALSE 82447
// exit ;
82445: GO 82447
// end ;
82447: PPOPN 7
82449: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
82450: CALL 19840 0 0
// end ;
82454: PPOPN 1
82456: END
