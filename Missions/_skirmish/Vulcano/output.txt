// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// PrepareTrigger ;
  15: CALL 40 0 0
// PrepareVulcanoBase ;
  19: CALL 1142 0 0
// PrepareRussian ;
  23: CALL 3824 0 0
// PrepareLegion ;
  27: CALL 8105 0 0
// Action ;
  31: CALL 11613 0 0
// InitArt ;
  35: CALL 241 0 0
// end ;
  39: END
// export base_captured , russian_prepared , ru_can_attack , ru_sib_bomb , chance_to_bomb , player_res_art , artifact_progress , player_artifact_ready , art_icon , time_res_art , player_commander , time_to_reuse , mine_vulc , medal_enabled , debug , dead_counter , kill_counter , veh_counter , tech_counter , sib_contamin_counter , event_legion_attack , event_russian_attack , event_alliance_attack ; function PrepareTrigger ; begin
  40: LD_INT 0
  42: PPUSH
// debug := false ;
  43: LD_ADDR_EXP 15
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// base_captured := false ;
  51: LD_ADDR_EXP 1
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// russian_prepared := false ;
  59: LD_ADDR_EXP 2
  63: PUSH
  64: LD_INT 0
  66: ST_TO_ADDR
// ru_can_attack := false ;
  67: LD_ADDR_EXP 3
  71: PUSH
  72: LD_INT 0
  74: ST_TO_ADDR
// ru_sib_bomb := false ;
  75: LD_ADDR_EXP 4
  79: PUSH
  80: LD_INT 0
  82: ST_TO_ADDR
// chance_to_bomb := [ 5 , 10 , 25 ] [ Difficulty ] ;
  83: LD_ADDR_EXP 5
  87: PUSH
  88: LD_INT 5
  90: PUSH
  91: LD_INT 10
  93: PUSH
  94: LD_INT 25
  96: PUSH
  97: EMPTY
  98: LIST
  99: LIST
 100: LIST
 101: PUSH
 102: LD_OWVAR 67
 106: ARRAY
 107: ST_TO_ADDR
// player_res_art := false ;
 108: LD_ADDR_EXP 6
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// player_artifact_ready := false ;
 116: LD_ADDR_EXP 8
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// art_icon := art_use_atom ;
 124: LD_ADDR_EXP 9
 128: PUSH
 129: LD_INT 7
 131: ST_TO_ADDR
// time_res_art := 600 ;
 132: LD_ADDR_EXP 10
 136: PUSH
 137: LD_INT 600
 139: ST_TO_ADDR
// time_to_reuse := 10 10$00 ;
 140: LD_ADDR_EXP 12
 144: PUSH
 145: LD_INT 21000
 147: ST_TO_ADDR
// mine_vulc := false ;
 148: LD_ADDR_EXP 13
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// medal_enabled := false ;
 156: LD_ADDR_EXP 14
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// dead_counter := 0 ;
 164: LD_ADDR_EXP 16
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// kill_counter := 0 ;
 172: LD_ADDR_EXP 17
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// veh_counter := 0 ;
 180: LD_ADDR_EXP 18
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// tech_counter := 0 ;
 188: LD_ADDR_EXP 19
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// sib_contamin_counter := 0 ;
 196: LD_ADDR_EXP 20
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// artifact_progress := 0 ;
 204: LD_ADDR_EXP 7
 208: PUSH
 209: LD_INT 0
 211: ST_TO_ADDR
// event_legion_attack := 1 ;
 212: LD_ADDR_EXP 21
 216: PUSH
 217: LD_INT 1
 219: ST_TO_ADDR
// event_russian_attack := 2 ;
 220: LD_ADDR_EXP 22
 224: PUSH
 225: LD_INT 2
 227: ST_TO_ADDR
// event_alliance_attack := 3 ;
 228: LD_ADDR_EXP 23
 232: PUSH
 233: LD_INT 3
 235: ST_TO_ADDR
// end ;
 236: LD_VAR 0 1
 240: RET
// function InitArt ; begin
 241: LD_INT 0
 243: PPUSH
// SetArtifactRes ( your_side , true ) ;
 244: LD_OWVAR 2
 248: PPUSH
 249: LD_INT 1
 251: PPUSH
 252: CALL_OW 467
// end ; end_of_file
 256: LD_VAR 0 1
 260: RET
// export us_commander , us_force , us_skill , us_guy ; export function PrepareAmerican ; var i , filter , un , team ; begin
 261: LD_INT 0
 263: PPUSH
 264: PPUSH
 265: PPUSH
 266: PPUSH
 267: PPUSH
// us_skill := [ 7 , 6 , 5 ] [ Difficulty ] ;
 268: LD_ADDR_EXP 26
 272: PUSH
 273: LD_INT 7
 275: PUSH
 276: LD_INT 6
 278: PUSH
 279: LD_INT 5
 281: PUSH
 282: EMPTY
 283: LIST
 284: LIST
 285: LIST
 286: PUSH
 287: LD_OWVAR 67
 291: ARRAY
 292: ST_TO_ADDR
// us_force := [ ] ;
 293: LD_ADDR_EXP 25
 297: PUSH
 298: EMPTY
 299: ST_TO_ADDR
// RemoveEnvironmentArea ( evn ) ;
 300: LD_INT 17
 302: PPUSH
 303: CALL_OW 355
// PrepareAllianceAI ( ) ;
 307: CALL 17036 0 0
// uc_side := 1 ;
 311: LD_ADDR_OWVAR 20
 315: PUSH
 316: LD_INT 1
 318: ST_TO_ADDR
// uc_nation := nation_american ;
 319: LD_ADDR_OWVAR 21
 323: PUSH
 324: LD_INT 1
 326: ST_TO_ADDR
// hc_gallery :=  ;
 327: LD_ADDR_OWVAR 33
 331: PUSH
 332: LD_STRING 
 334: ST_TO_ADDR
// hc_name :=  ;
 335: LD_ADDR_OWVAR 26
 339: PUSH
 340: LD_STRING 
 342: ST_TO_ADDR
// hc_importance := 0 ;
 343: LD_ADDR_OWVAR 32
 347: PUSH
 348: LD_INT 0
 350: ST_TO_ADDR
// for i = 1 to 11 do
 351: LD_ADDR_VAR 0 2
 355: PUSH
 356: DOUBLE
 357: LD_INT 1
 359: DEC
 360: ST_TO_ADDR
 361: LD_INT 11
 363: PUSH
 364: FOR_TO
 365: IFFALSE 418
// begin PrepareHuman ( false , Rand ( 1 , 4 ) , us_skill ) ;
 367: LD_INT 0
 369: PPUSH
 370: LD_INT 1
 372: PPUSH
 373: LD_INT 4
 375: PPUSH
 376: CALL_OW 12
 380: PPUSH
 381: LD_EXP 26
 385: PPUSH
 386: CALL_OW 380
// un := CreateHuman ;
 390: LD_ADDR_VAR 0 4
 394: PUSH
 395: CALL_OW 44
 399: ST_TO_ADDR
// us_force := us_force ^ un ;
 400: LD_ADDR_EXP 25
 404: PUSH
 405: LD_EXP 25
 409: PUSH
 410: LD_VAR 0 4
 414: ADD
 415: ST_TO_ADDR
// end ;
 416: GO 364
 418: POP
 419: POP
// hc_importance := 100 ;
 420: LD_ADDR_OWVAR 32
 424: PUSH
 425: LD_INT 100
 427: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , us_skill ) ;
 428: LD_INT 1
 430: PPUSH
 431: LD_INT 1
 433: PPUSH
 434: LD_EXP 26
 438: PPUSH
 439: CALL_OW 380
// hc_gallery := skirmish ;
 443: LD_ADDR_OWVAR 33
 447: PUSH
 448: LD_STRING skirmish
 450: ST_TO_ADDR
// hc_face_number := 10 ;
 451: LD_ADDR_OWVAR 34
 455: PUSH
 456: LD_INT 10
 458: ST_TO_ADDR
// hc_name := Michael Anderson ;
 459: LD_ADDR_OWVAR 26
 463: PUSH
 464: LD_STRING Michael Anderson
 466: ST_TO_ADDR
// us_commander := CreateHuman ;
 467: LD_ADDR_EXP 24
 471: PUSH
 472: CALL_OW 44
 476: ST_TO_ADDR
// player_commander := us_commander ;
 477: LD_ADDR_EXP 11
 481: PUSH
 482: LD_EXP 24
 486: ST_TO_ADDR
// hc_importance := 0 ;
 487: LD_ADDR_OWVAR 32
 491: PUSH
 492: LD_INT 0
 494: ST_TO_ADDR
// hc_gallery :=  ;
 495: LD_ADDR_OWVAR 33
 499: PUSH
 500: LD_STRING 
 502: ST_TO_ADDR
// team := CharacterSelection ( text , [ 7 , 6 , 5 ] [ Difficulty ] , [ 7 , 6 , 5 ] [ Difficulty ] , [ sel_change_class , us_commander , sel_changeable , sel_not_hired ] ^ us_force , [ class_soldier , [ class_mechanic , 1 ] , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , [ 5 , 5 , - 1 ] [ Difficulty ] ] ) ;
 503: LD_ADDR_VAR 0 5
 507: PUSH
 508: LD_STRING text
 510: PPUSH
 511: LD_INT 7
 513: PUSH
 514: LD_INT 6
 516: PUSH
 517: LD_INT 5
 519: PUSH
 520: EMPTY
 521: LIST
 522: LIST
 523: LIST
 524: PUSH
 525: LD_OWVAR 67
 529: ARRAY
 530: PPUSH
 531: LD_INT 7
 533: PUSH
 534: LD_INT 6
 536: PUSH
 537: LD_INT 5
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: LIST
 544: PUSH
 545: LD_OWVAR 67
 549: ARRAY
 550: PPUSH
 551: LD_INT -5
 553: PUSH
 554: LD_EXP 24
 558: PUSH
 559: LD_INT -3
 561: PUSH
 562: LD_INT -2
 564: PUSH
 565: EMPTY
 566: LIST
 567: LIST
 568: LIST
 569: LIST
 570: PUSH
 571: LD_EXP 25
 575: ADD
 576: PPUSH
 577: LD_INT 1
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 1
 585: PUSH
 586: EMPTY
 587: LIST
 588: LIST
 589: PUSH
 590: LD_INT 2
 592: PUSH
 593: LD_INT 1
 595: PUSH
 596: EMPTY
 597: LIST
 598: LIST
 599: PUSH
 600: LD_INT 4
 602: PUSH
 603: LD_INT 1
 605: PUSH
 606: EMPTY
 607: LIST
 608: LIST
 609: PUSH
 610: LD_INT 5
 612: PUSH
 613: LD_INT 5
 615: PUSH
 616: LD_INT 1
 618: NEG
 619: PUSH
 620: EMPTY
 621: LIST
 622: LIST
 623: LIST
 624: PUSH
 625: LD_OWVAR 67
 629: ARRAY
 630: PUSH
 631: EMPTY
 632: LIST
 633: LIST
 634: LIST
 635: LIST
 636: LIST
 637: PPUSH
 638: CALL_OW 42
 642: ST_TO_ADDR
// team := team ^ us_commander ;
 643: LD_ADDR_VAR 0 5
 647: PUSH
 648: LD_VAR 0 5
 652: PUSH
 653: LD_EXP 24
 657: ADD
 658: ST_TO_ADDR
// for i = 1 to team do
 659: LD_ADDR_VAR 0 2
 663: PUSH
 664: DOUBLE
 665: LD_INT 1
 667: DEC
 668: ST_TO_ADDR
 669: LD_VAR 0 5
 673: PUSH
 674: FOR_TO
 675: IFFALSE 875
// begin if GetClass ( team [ i ] ) = class_mechanic then
 677: LD_VAR 0 5
 681: PUSH
 682: LD_VAR 0 2
 686: ARRAY
 687: PPUSH
 688: CALL_OW 257
 692: PUSH
 693: LD_INT 3
 695: EQUAL
 696: IFFALSE 837
// begin vc_chassis := [ us_medium_tracked , us_heavy_tracked , us_morphling ] [ i mod 3 + 1 ] ;
 698: LD_ADDR_OWVAR 37
 702: PUSH
 703: LD_INT 3
 705: PUSH
 706: LD_INT 4
 708: PUSH
 709: LD_INT 5
 711: PUSH
 712: EMPTY
 713: LIST
 714: LIST
 715: LIST
 716: PUSH
 717: LD_VAR 0 2
 721: PUSH
 722: LD_INT 3
 724: MOD
 725: PUSH
 726: LD_INT 1
 728: PLUS
 729: ARRAY
 730: ST_TO_ADDR
// vc_engine := engine_siberite ;
 731: LD_ADDR_OWVAR 39
 735: PUSH
 736: LD_INT 3
 738: ST_TO_ADDR
// vc_control := control_manual ;
 739: LD_ADDR_OWVAR 38
 743: PUSH
 744: LD_INT 1
 746: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_laser ] [ rand ( 1 , 3 ) ] ;
 747: LD_ADDR_OWVAR 40
 751: PUSH
 752: LD_INT 4
 754: PUSH
 755: LD_INT 5
 757: PUSH
 758: LD_INT 9
 760: PUSH
 761: EMPTY
 762: LIST
 763: LIST
 764: LIST
 765: PUSH
 766: LD_INT 1
 768: PPUSH
 769: LD_INT 3
 771: PPUSH
 772: CALL_OW 12
 776: ARRAY
 777: ST_TO_ADDR
// un := CreateVehicle ;
 778: LD_ADDR_VAR 0 4
 782: PUSH
 783: CALL_OW 45
 787: ST_TO_ADDR
// SetDir ( un , 2 ) ;
 788: LD_VAR 0 4
 792: PPUSH
 793: LD_INT 2
 795: PPUSH
 796: CALL_OW 233
// PlaceUnitArea ( un , start_north , false ) ;
 800: LD_VAR 0 4
 804: PPUSH
 805: LD_INT 1
 807: PPUSH
 808: LD_INT 0
 810: PPUSH
 811: CALL_OW 49
// PlaceHumanInUnit ( team [ i ] , un ) ;
 815: LD_VAR 0 5
 819: PUSH
 820: LD_VAR 0 2
 824: ARRAY
 825: PPUSH
 826: LD_VAR 0 4
 830: PPUSH
 831: CALL_OW 52
// end else
 835: GO 873
// begin PlaceUnitArea ( team [ i ] , start_north , false ) ;
 837: LD_VAR 0 5
 841: PUSH
 842: LD_VAR 0 2
 846: ARRAY
 847: PPUSH
 848: LD_INT 1
 850: PPUSH
 851: LD_INT 0
 853: PPUSH
 854: CALL_OW 49
// ComHold ( team [ i ] ) ;
 858: LD_VAR 0 5
 862: PUSH
 863: LD_VAR 0 2
 867: ARRAY
 868: PPUSH
 869: CALL_OW 140
// end ; end ;
 873: GO 674
 875: POP
 876: POP
// end ;
 877: LD_VAR 0 1
 881: RET
// every 0 0$38 + 2 2$30 trigger tick < 73500 do
 882: LD_OWVAR 1
 886: PUSH
 887: LD_INT 73500
 889: LESS
 890: IFFALSE 917
 892: GO 894
 894: DISABLE
// begin enable ;
 895: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , extra_crates , true ) ;
 896: LD_INT 1
 898: PPUSH
 899: LD_INT 5
 901: PPUSH
 902: CALL_OW 12
 906: PPUSH
 907: LD_INT 23
 909: PPUSH
 910: LD_INT 1
 912: PPUSH
 913: CALL_OW 55
// end ;
 917: END
// every 1 1$10 do var time , p , l ;
 918: GO 920
 920: DISABLE
 921: LD_INT 0
 923: PPUSH
 924: PPUSH
 925: PPUSH
// begin time := 0 0$44 ;
 926: LD_ADDR_VAR 0 1
 930: PUSH
 931: LD_INT 1540
 933: ST_TO_ADDR
// l := 0 ;
 934: LD_ADDR_VAR 0 3
 938: PUSH
 939: LD_INT 0
 941: ST_TO_ADDR
// repeat begin Wait ( time ) ;
 942: LD_VAR 0 1
 946: PPUSH
 947: CALL_OW 67
// l := l + 1 ;
 951: LD_ADDR_VAR 0 3
 955: PUSH
 956: LD_VAR 0 3
 960: PUSH
 961: LD_INT 1
 963: PLUS
 964: ST_TO_ADDR
// if GetListOfCratesInArea ( us_crates ) < 20 then
 965: LD_INT 12
 967: PPUSH
 968: CALL_OW 435
 972: PUSH
 973: LD_INT 20
 975: LESS
 976: IFFALSE 1035
// begin CreateCratesArea ( Rand ( 1 , 5 ) , us_crates , true ) ;
 978: LD_INT 1
 980: PPUSH
 981: LD_INT 5
 983: PPUSH
 984: CALL_OW 12
 988: PPUSH
 989: LD_INT 12
 991: PPUSH
 992: LD_INT 1
 994: PPUSH
 995: CALL_OW 55
// Wait ( Rand ( 0 0$39 , 0 0$48 ) ) ;
 999: LD_INT 1365
1001: PPUSH
1002: LD_INT 1680
1004: PPUSH
1005: CALL_OW 12
1009: PPUSH
1010: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 5 ) , us_crates , true ) ;
1014: LD_INT 1
1016: PPUSH
1017: LD_INT 5
1019: PPUSH
1020: CALL_OW 12
1024: PPUSH
1025: LD_INT 12
1027: PPUSH
1028: LD_INT 1
1030: PPUSH
1031: CALL_OW 55
// end ; p := Rand ( 0 , 1 ) ;
1035: LD_ADDR_VAR 0 2
1039: PUSH
1040: LD_INT 0
1042: PPUSH
1043: LD_INT 1
1045: PPUSH
1046: CALL_OW 12
1050: ST_TO_ADDR
// if p then
1051: LD_VAR 0 2
1055: IFFALSE 1090
// begin Wait ( Rand ( 0 0$09 , 0 0$20 ) ) ;
1057: LD_INT 315
1059: PPUSH
1060: LD_INT 700
1062: PPUSH
1063: CALL_OW 12
1067: PPUSH
1068: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 4 ) , true ) ;
1072: LD_INT 1
1074: PPUSH
1075: LD_INT 4
1077: PPUSH
1078: CALL_OW 12
1082: PPUSH
1083: LD_INT 1
1085: PPUSH
1086: CALL_OW 57
// end ; if l mod [ 15 , 13 , 11 ] [ Difficulty ] = 0 then
1090: LD_VAR 0 3
1094: PUSH
1095: LD_INT 15
1097: PUSH
1098: LD_INT 13
1100: PUSH
1101: LD_INT 11
1103: PUSH
1104: EMPTY
1105: LIST
1106: LIST
1107: LIST
1108: PUSH
1109: LD_OWVAR 67
1113: ARRAY
1114: MOD
1115: PUSH
1116: LD_INT 0
1118: EQUAL
1119: IFFALSE 1135
// time := time + 2 2$00 ;
1121: LD_ADDR_VAR 0 1
1125: PUSH
1126: LD_VAR 0 1
1130: PUSH
1131: LD_INT 4200
1133: PLUS
1134: ST_TO_ADDR
// end until false ;
1135: LD_INT 0
1137: IFFALSE 942
// end ; end_of_file
1139: PPOPN 3
1141: END
// export russians_in_base ; export function PrepareVulcanoBase ; var i , filter , hp , un , area ; begin
1142: LD_INT 0
1144: PPUSH
1145: PPUSH
1146: PPUSH
1147: PPUSH
1148: PPUSH
1149: PPUSH
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) ;
1150: LD_ADDR_VAR 0 3
1154: PUSH
1155: LD_INT 22
1157: PUSH
1158: LD_INT 4
1160: PUSH
1161: EMPTY
1162: LIST
1163: LIST
1164: PUSH
1165: LD_INT 21
1167: PUSH
1168: LD_INT 3
1170: PUSH
1171: EMPTY
1172: LIST
1173: LIST
1174: PUSH
1175: EMPTY
1176: LIST
1177: LIST
1178: PPUSH
1179: CALL_OW 69
1183: ST_TO_ADDR
// hp := [ 470 , 370 , 290 ] [ Difficulty ] ;
1184: LD_ADDR_VAR 0 4
1188: PUSH
1189: LD_INT 470
1191: PUSH
1192: LD_INT 370
1194: PUSH
1195: LD_INT 290
1197: PUSH
1198: EMPTY
1199: LIST
1200: LIST
1201: LIST
1202: PUSH
1203: LD_OWVAR 67
1207: ARRAY
1208: ST_TO_ADDR
// case Difficulty of 2 :
1209: LD_OWVAR 67
1213: PUSH
1214: LD_INT 2
1216: DOUBLE
1217: EQUAL
1218: IFTRUE 1222
1220: GO 1253
1222: POP
// begin DestroyUnit ( UnitFilter ( filter , [ f_btype , b_bunker ] ) [ 1 ] ) ;
1223: LD_VAR 0 3
1227: PPUSH
1228: LD_INT 30
1230: PUSH
1231: LD_INT 32
1233: PUSH
1234: EMPTY
1235: LIST
1236: LIST
1237: PPUSH
1238: CALL_OW 72
1242: PUSH
1243: LD_INT 1
1245: ARRAY
1246: PPUSH
1247: CALL_OW 65
// end ; 3 :
1251: GO 1329
1253: LD_INT 3
1255: DOUBLE
1256: EQUAL
1257: IFTRUE 1261
1259: GO 1328
1261: POP
// begin DestroyUnit ( UnitFilter ( filter , [ f_btype , b_bunker ] ) [ 1 ] ) ;
1262: LD_VAR 0 3
1266: PPUSH
1267: LD_INT 30
1269: PUSH
1270: LD_INT 32
1272: PUSH
1273: EMPTY
1274: LIST
1275: LIST
1276: PPUSH
1277: CALL_OW 72
1281: PUSH
1282: LD_INT 1
1284: ARRAY
1285: PPUSH
1286: CALL_OW 65
// DestroyUnit ( UnitFilter ( filter , [ f_btype , b_solar_power ] ) [ Rand ( 1 , 3 ) ] ) ;
1290: LD_VAR 0 3
1294: PPUSH
1295: LD_INT 30
1297: PUSH
1298: LD_INT 27
1300: PUSH
1301: EMPTY
1302: LIST
1303: LIST
1304: PPUSH
1305: CALL_OW 72
1309: PUSH
1310: LD_INT 1
1312: PPUSH
1313: LD_INT 3
1315: PPUSH
1316: CALL_OW 12
1320: ARRAY
1321: PPUSH
1322: CALL_OW 65
// end ; end ;
1326: GO 1329
1328: POP
// for i = 1 to filter do
1329: LD_ADDR_VAR 0 2
1333: PUSH
1334: DOUBLE
1335: LD_INT 1
1337: DEC
1338: ST_TO_ADDR
1339: LD_VAR 0 3
1343: PUSH
1344: FOR_TO
1345: IFFALSE 1382
// SetLives ( filter [ i ] , hp + Rand ( - 29 , 29 ) ) ;
1347: LD_VAR 0 3
1351: PUSH
1352: LD_VAR 0 2
1356: ARRAY
1357: PPUSH
1358: LD_VAR 0 4
1362: PUSH
1363: LD_INT 29
1365: NEG
1366: PPUSH
1367: LD_INT 29
1369: PPUSH
1370: CALL_OW 12
1374: PLUS
1375: PPUSH
1376: CALL_OW 234
1380: GO 1344
1382: POP
1383: POP
// SetBName ( us_depot , Vulcano1 ) ;
1384: LD_INT 50
1386: PPUSH
1387: LD_STRING Vulcano1
1389: PPUSH
1390: CALL_OW 500
// hc_importance := 0 ;
1394: LD_ADDR_OWVAR 32
1398: PUSH
1399: LD_INT 0
1401: ST_TO_ADDR
// uc_side := 3 ;
1402: LD_ADDR_OWVAR 20
1406: PUSH
1407: LD_INT 3
1409: ST_TO_ADDR
// uc_nation := nation_russian ;
1410: LD_ADDR_OWVAR 21
1414: PUSH
1415: LD_INT 3
1417: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
1418: LD_ADDR_OWVAR 37
1422: PUSH
1423: LD_INT 22
1425: ST_TO_ADDR
// vc_engine := engine_combustion ;
1426: LD_ADDR_OWVAR 39
1430: PUSH
1431: LD_INT 1
1433: ST_TO_ADDR
// vc_control := control_manual ;
1434: LD_ADDR_OWVAR 38
1438: PUSH
1439: LD_INT 1
1441: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1442: LD_ADDR_OWVAR 40
1446: PUSH
1447: LD_INT 51
1449: ST_TO_ADDR
// un := CreateVehicle ;
1450: LD_ADDR_VAR 0 5
1454: PUSH
1455: CALL_OW 45
1459: ST_TO_ADDR
// PlaceUnitXY ( un , 97 , 138 , false ) ;
1460: LD_VAR 0 5
1464: PPUSH
1465: LD_INT 97
1467: PPUSH
1468: LD_INT 138
1470: PPUSH
1471: LD_INT 0
1473: PPUSH
1474: CALL_OW 48
// SetCargo ( un , mat_cans , 100 ) ;
1478: LD_VAR 0 5
1482: PPUSH
1483: LD_INT 1
1485: PPUSH
1486: LD_INT 100
1488: PPUSH
1489: CALL_OW 290
// SetFuel ( un , 45 ) ;
1493: LD_VAR 0 5
1497: PPUSH
1498: LD_INT 45
1500: PPUSH
1501: CALL_OW 240
// un := CreateVehicle ;
1505: LD_ADDR_VAR 0 5
1509: PUSH
1510: CALL_OW 45
1514: ST_TO_ADDR
// PlaceUnitXY ( un , 109 , 154 , false ) ;
1515: LD_VAR 0 5
1519: PPUSH
1520: LD_INT 109
1522: PPUSH
1523: LD_INT 154
1525: PPUSH
1526: LD_INT 0
1528: PPUSH
1529: CALL_OW 48
// SetCargo ( un , mat_cans , 100 ) ;
1533: LD_VAR 0 5
1537: PPUSH
1538: LD_INT 1
1540: PPUSH
1541: LD_INT 100
1543: PPUSH
1544: CALL_OW 290
// SetDir ( un , 1 ) ;
1548: LD_VAR 0 5
1552: PPUSH
1553: LD_INT 1
1555: PPUSH
1556: CALL_OW 233
// SetFuel ( un , 50 ) ;
1560: LD_VAR 0 5
1564: PPUSH
1565: LD_INT 50
1567: PPUSH
1568: CALL_OW 240
// russians_in_base := [ ] ;
1572: LD_ADDR_EXP 28
1576: PUSH
1577: EMPTY
1578: ST_TO_ADDR
// for i = 1 to [ 6 , 6 , 7 ] [ Difficulty ] do
1579: LD_ADDR_VAR 0 2
1583: PUSH
1584: DOUBLE
1585: LD_INT 1
1587: DEC
1588: ST_TO_ADDR
1589: LD_INT 6
1591: PUSH
1592: LD_INT 6
1594: PUSH
1595: LD_INT 7
1597: PUSH
1598: EMPTY
1599: LIST
1600: LIST
1601: LIST
1602: PUSH
1603: LD_OWVAR 67
1607: ARRAY
1608: PUSH
1609: FOR_TO
1610: IFFALSE 1691
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
1612: LD_INT 0
1614: PPUSH
1615: LD_INT 1
1617: PPUSH
1618: LD_INT 4
1620: PUSH
1621: LD_INT 5
1623: PUSH
1624: LD_INT 6
1626: PUSH
1627: EMPTY
1628: LIST
1629: LIST
1630: LIST
1631: PUSH
1632: LD_OWVAR 67
1636: ARRAY
1637: PPUSH
1638: CALL_OW 380
// un := CreateHuman ;
1642: LD_ADDR_VAR 0 5
1646: PUSH
1647: CALL_OW 44
1651: ST_TO_ADDR
// russians_in_base := russians_in_base ^ un ;
1652: LD_ADDR_EXP 28
1656: PUSH
1657: LD_EXP 28
1661: PUSH
1662: LD_VAR 0 5
1666: ADD
1667: ST_TO_ADDR
// PlaceUnitXYR ( un , 94 , 145 , 10 , false ) ;
1668: LD_VAR 0 5
1672: PPUSH
1673: LD_INT 94
1675: PPUSH
1676: LD_INT 145
1678: PPUSH
1679: LD_INT 10
1681: PPUSH
1682: LD_INT 0
1684: PPUSH
1685: CALL_OW 50
// end ;
1689: GO 1609
1691: POP
1692: POP
// end ;
1693: LD_VAR 0 1
1697: RET
// every 0 0$2 trigger UnitFilter ( russians_in_base , [ f_see , 1 ] ) do var enemy ;
1698: LD_EXP 28
1702: PPUSH
1703: LD_INT 101
1705: PUSH
1706: LD_INT 1
1708: PUSH
1709: EMPTY
1710: LIST
1711: LIST
1712: PPUSH
1713: CALL_OW 72
1717: IFFALSE 1783
1719: GO 1721
1721: DISABLE
1722: LD_INT 0
1724: PPUSH
// begin enemy := UnitFilter ( russians_in_base , [ f_see , 1 ] ) [ 1 ] ;
1725: LD_ADDR_VAR 0 1
1729: PUSH
1730: LD_EXP 28
1734: PPUSH
1735: LD_INT 101
1737: PUSH
1738: LD_INT 1
1740: PUSH
1741: EMPTY
1742: LIST
1743: LIST
1744: PPUSH
1745: CALL_OW 72
1749: PUSH
1750: LD_INT 1
1752: ARRAY
1753: ST_TO_ADDR
// ComAgressiveMove ( russians_in_base , GetX ( enemy ) , GetY ( enemy ) ) ;
1754: LD_EXP 28
1758: PPUSH
1759: LD_VAR 0 1
1763: PPUSH
1764: CALL_OW 250
1768: PPUSH
1769: LD_VAR 0 1
1773: PPUSH
1774: CALL_OW 251
1778: PPUSH
1779: CALL_OW 114
// end ;
1783: PPOPN 1
1785: END
// every 0 0$01 trigger GetDistUnitToSide ( us_depot , 1 ) < 40 do var i , un ;
1786: LD_INT 50
1788: PPUSH
1789: LD_INT 1
1791: PPUSH
1792: CALL 2162 0 2
1796: PUSH
1797: LD_INT 40
1799: LESS
1800: IFFALSE 1997
1802: GO 1804
1804: DISABLE
1805: LD_INT 0
1807: PPUSH
1808: PPUSH
// begin uc_side := 4 ;
1809: LD_ADDR_OWVAR 20
1813: PUSH
1814: LD_INT 4
1816: ST_TO_ADDR
// uc_nation := nation_american ;
1817: LD_ADDR_OWVAR 21
1821: PUSH
1822: LD_INT 1
1824: ST_TO_ADDR
// hc_importance := 0 ;
1825: LD_ADDR_OWVAR 32
1829: PUSH
1830: LD_INT 0
1832: ST_TO_ADDR
// for i = 1 to 7 do
1833: LD_ADDR_VAR 0 1
1837: PUSH
1838: DOUBLE
1839: LD_INT 1
1841: DEC
1842: ST_TO_ADDR
1843: LD_INT 7
1845: PUSH
1846: FOR_TO
1847: IFFALSE 1911
// begin PrepareHuman ( false , Rand ( 1 , 3 ) , us_skill ) ;
1849: LD_INT 0
1851: PPUSH
1852: LD_INT 1
1854: PPUSH
1855: LD_INT 3
1857: PPUSH
1858: CALL_OW 12
1862: PPUSH
1863: LD_EXP 26
1867: PPUSH
1868: CALL_OW 380
// un := CreateHuman ;
1872: LD_ADDR_VAR 0 2
1876: PUSH
1877: CALL_OW 44
1881: ST_TO_ADDR
// PlaceUnitArea ( un , base_resp , false ) ;
1882: LD_VAR 0 2
1886: PPUSH
1887: LD_INT 7
1889: PPUSH
1890: LD_INT 0
1892: PPUSH
1893: CALL_OW 49
// SetLives ( un , 10 ) ;
1897: LD_VAR 0 2
1901: PPUSH
1902: LD_INT 10
1904: PPUSH
1905: CALL_OW 234
// end ;
1909: GO 1846
1911: POP
1912: POP
// for i = 1 to 5 do
1913: LD_ADDR_VAR 0 1
1917: PUSH
1918: DOUBLE
1919: LD_INT 1
1921: DEC
1922: ST_TO_ADDR
1923: LD_INT 5
1925: PUSH
1926: FOR_TO
1927: IFFALSE 1995
// begin PrepareHuman ( false , 4 , us_skill ) ;
1929: LD_INT 0
1931: PPUSH
1932: LD_INT 4
1934: PPUSH
1935: LD_EXP 26
1939: PPUSH
1940: CALL_OW 380
// SetDir ( un , 1 ) ;
1944: LD_VAR 0 2
1948: PPUSH
1949: LD_INT 1
1951: PPUSH
1952: CALL_OW 233
// un := CreateHuman ;
1956: LD_ADDR_VAR 0 2
1960: PUSH
1961: CALL_OW 44
1965: ST_TO_ADDR
// PlaceUnitArea ( un , rekt , false ) ;
1966: LD_VAR 0 2
1970: PPUSH
1971: LD_INT 22
1973: PPUSH
1974: LD_INT 0
1976: PPUSH
1977: CALL_OW 49
// SetLives ( un , 10 ) ;
1981: LD_VAR 0 2
1985: PPUSH
1986: LD_INT 10
1988: PPUSH
1989: CALL_OW 234
// end ;
1993: GO 1926
1995: POP
1996: POP
// end ; end_of_file
1997: PPOPN 2
1999: END
// export function PrepareApeman2 ( n ) ; var un , i ; begin
2000: LD_INT 0
2002: PPUSH
2003: PPUSH
2004: PPUSH
// for i = 1 to n do
2005: LD_ADDR_VAR 0 4
2009: PUSH
2010: DOUBLE
2011: LD_INT 1
2013: DEC
2014: ST_TO_ADDR
2015: LD_VAR 0 1
2019: PUSH
2020: FOR_TO
2021: IFFALSE 2155
// begin uc_side := 0 ;
2023: LD_ADDR_OWVAR 20
2027: PUSH
2028: LD_INT 0
2030: ST_TO_ADDR
// uc_nation := 0 ;
2031: LD_ADDR_OWVAR 21
2035: PUSH
2036: LD_INT 0
2038: ST_TO_ADDR
// hc_class := class_apeman ;
2039: LD_ADDR_OWVAR 28
2043: PUSH
2044: LD_INT 12
2046: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
2047: LD_ADDR_OWVAR 31
2051: PUSH
2052: LD_INT 0
2054: PUSH
2055: LD_INT 0
2057: PUSH
2058: LD_INT 0
2060: PUSH
2061: LD_INT 0
2063: PUSH
2064: EMPTY
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: ST_TO_ADDR
// hc_name :=  ;
2070: LD_ADDR_OWVAR 26
2074: PUSH
2075: LD_STRING 
2077: ST_TO_ADDR
// hc_gallery :=  ;
2078: LD_ADDR_OWVAR 33
2082: PUSH
2083: LD_STRING 
2085: ST_TO_ADDR
// hc_importance := 0 ;
2086: LD_ADDR_OWVAR 32
2090: PUSH
2091: LD_INT 0
2093: ST_TO_ADDR
// un := CreateHuman ;
2094: LD_ADDR_VAR 0 3
2098: PUSH
2099: CALL_OW 44
2103: ST_TO_ADDR
// PlaceUnitArea ( un , [ ape1 , ape2 ] [ Rand ( 1 , 2 ) ] , false ) ;
2104: LD_VAR 0 3
2108: PPUSH
2109: LD_INT 19
2111: PUSH
2112: LD_INT 20
2114: PUSH
2115: EMPTY
2116: LIST
2117: LIST
2118: PUSH
2119: LD_INT 1
2121: PPUSH
2122: LD_INT 2
2124: PPUSH
2125: CALL_OW 12
2129: ARRAY
2130: PPUSH
2131: LD_INT 0
2133: PPUSH
2134: CALL_OW 49
// Wait ( Rand ( 0 0$33 , 2 2$33 ) ) ;
2138: LD_INT 1155
2140: PPUSH
2141: LD_INT 5355
2143: PPUSH
2144: CALL_OW 12
2148: PPUSH
2149: CALL_OW 67
// end ;
2153: GO 2020
2155: POP
2156: POP
// end ;
2157: LD_VAR 0 2
2161: RET
// export function GetDistUnitToSide ( unit , side ) ; var tmp , dist ; begin
2162: LD_INT 0
2164: PPUSH
2165: PPUSH
2166: PPUSH
// tmp := NearestUnitToUnit ( FilterAllUnits ( [ f_side , side ] ) , unit ) ;
2167: LD_ADDR_VAR 0 4
2171: PUSH
2172: LD_INT 22
2174: PUSH
2175: LD_VAR 0 2
2179: PUSH
2180: EMPTY
2181: LIST
2182: LIST
2183: PPUSH
2184: CALL_OW 69
2188: PPUSH
2189: LD_VAR 0 1
2193: PPUSH
2194: CALL_OW 74
2198: ST_TO_ADDR
// dist := GetDistUnits ( unit , tmp ) ;
2199: LD_ADDR_VAR 0 5
2203: PUSH
2204: LD_VAR 0 1
2208: PPUSH
2209: LD_VAR 0 4
2213: PPUSH
2214: CALL_OW 296
2218: ST_TO_ADDR
// if dist >= 9999 then
2219: LD_VAR 0 5
2223: PUSH
2224: LD_INT 9999
2226: GREATEREQUAL
2227: IFFALSE 2240
// result := - 1 else
2229: LD_ADDR_VAR 0 3
2233: PUSH
2234: LD_INT 1
2236: NEG
2237: ST_TO_ADDR
2238: GO 2250
// result := dist ;
2240: LD_ADDR_VAR 0 3
2244: PUSH
2245: LD_VAR 0 5
2249: ST_TO_ADDR
// end ;
2250: LD_VAR 0 3
2254: RET
// export function NearestUnitToSide ( plist , side ) ; var i , tmp , unit ; begin
2255: LD_INT 0
2257: PPUSH
2258: PPUSH
2259: PPUSH
2260: PPUSH
// tmp := 9999 ;
2261: LD_ADDR_VAR 0 5
2265: PUSH
2266: LD_INT 9999
2268: ST_TO_ADDR
// for i = 1 to plist do
2269: LD_ADDR_VAR 0 4
2273: PUSH
2274: DOUBLE
2275: LD_INT 1
2277: DEC
2278: ST_TO_ADDR
2279: LD_VAR 0 1
2283: PUSH
2284: FOR_TO
2285: IFFALSE 2359
// if GetDistUnitToSide ( plist [ i ] , side ) < tmp then
2287: LD_VAR 0 1
2291: PUSH
2292: LD_VAR 0 4
2296: ARRAY
2297: PPUSH
2298: LD_VAR 0 2
2302: PPUSH
2303: CALL 2162 0 2
2307: PUSH
2308: LD_VAR 0 5
2312: LESS
2313: IFFALSE 2357
// begin tmp := GetDistUnitToSide ( plist [ i ] , side ) ;
2315: LD_ADDR_VAR 0 5
2319: PUSH
2320: LD_VAR 0 1
2324: PUSH
2325: LD_VAR 0 4
2329: ARRAY
2330: PPUSH
2331: LD_VAR 0 2
2335: PPUSH
2336: CALL 2162 0 2
2340: ST_TO_ADDR
// unit := plist [ i ] ;
2341: LD_ADDR_VAR 0 6
2345: PUSH
2346: LD_VAR 0 1
2350: PUSH
2351: LD_VAR 0 4
2355: ARRAY
2356: ST_TO_ADDR
// end ;
2357: GO 2284
2359: POP
2360: POP
// result := unit ;
2361: LD_ADDR_VAR 0 3
2365: PUSH
2366: LD_VAR 0 6
2370: ST_TO_ADDR
// end ;
2371: LD_VAR 0 3
2375: RET
// export function CalculateCommanderPoints ; var points , crates_collected , sib_collected , i ; begin
2376: LD_INT 0
2378: PPUSH
2379: PPUSH
2380: PPUSH
2381: PPUSH
2382: PPUSH
// points := [ 1000 , 2500 , 5000 ] [ Difficulty ] ;
2383: LD_ADDR_VAR 0 2
2387: PUSH
2388: LD_INT 1000
2390: PUSH
2391: LD_INT 2500
2393: PUSH
2394: LD_INT 5000
2396: PUSH
2397: EMPTY
2398: LIST
2399: LIST
2400: LIST
2401: PUSH
2402: LD_OWVAR 67
2406: ARRAY
2407: ST_TO_ADDR
// points := points + ( - 1 * FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) * 30 ) ;
2408: LD_ADDR_VAR 0 2
2412: PUSH
2413: LD_VAR 0 2
2417: PUSH
2418: LD_INT 1
2420: NEG
2421: PUSH
2422: LD_INT 22
2424: PUSH
2425: LD_OWVAR 2
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: PUSH
2434: LD_INT 21
2436: PUSH
2437: LD_INT 3
2439: PUSH
2440: EMPTY
2441: LIST
2442: LIST
2443: PUSH
2444: EMPTY
2445: LIST
2446: LIST
2447: PPUSH
2448: CALL_OW 69
2452: MUL
2453: PUSH
2454: LD_INT 30
2456: MUL
2457: PLUS
2458: ST_TO_ADDR
// points := points + ( kill_counter * 10 ) ;
2459: LD_ADDR_VAR 0 2
2463: PUSH
2464: LD_VAR 0 2
2468: PUSH
2469: LD_EXP 17
2473: PUSH
2474: LD_INT 10
2476: MUL
2477: PLUS
2478: ST_TO_ADDR
// points := points + ( - 1 * kill_counter * 20 ) ;
2479: LD_ADDR_VAR 0 2
2483: PUSH
2484: LD_VAR 0 2
2488: PUSH
2489: LD_INT 1
2491: NEG
2492: PUSH
2493: LD_EXP 17
2497: MUL
2498: PUSH
2499: LD_INT 20
2501: MUL
2502: PLUS
2503: ST_TO_ADDR
// points := points + ( - 1 * ( ( tick / 35 ) / 60 ) * 25 ) ;
2504: LD_ADDR_VAR 0 2
2508: PUSH
2509: LD_VAR 0 2
2513: PUSH
2514: LD_INT 1
2516: NEG
2517: PUSH
2518: LD_OWVAR 1
2522: PUSH
2523: LD_INT 35
2525: DIVREAL
2526: PUSH
2527: LD_INT 60
2529: DIVREAL
2530: MUL
2531: PUSH
2532: LD_INT 25
2534: MUL
2535: PLUS
2536: ST_TO_ADDR
// points := points + ( tech_counter * 15 ) ;
2537: LD_ADDR_VAR 0 2
2541: PUSH
2542: LD_VAR 0 2
2546: PUSH
2547: LD_EXP 19
2551: PUSH
2552: LD_INT 15
2554: MUL
2555: PLUS
2556: ST_TO_ADDR
// points := points + ( - 1 * sib_contamin_counter ) * 1000 ;
2557: LD_ADDR_VAR 0 2
2561: PUSH
2562: LD_VAR 0 2
2566: PUSH
2567: LD_INT 1
2569: NEG
2570: PUSH
2571: LD_EXP 20
2575: MUL
2576: PUSH
2577: LD_INT 1000
2579: MUL
2580: PLUS
2581: ST_TO_ADDR
// points := points + ( veh_counter * 5 ) ;
2582: LD_ADDR_VAR 0 2
2586: PUSH
2587: LD_VAR 0 2
2591: PUSH
2592: LD_EXP 18
2596: PUSH
2597: LD_INT 5
2599: MUL
2600: PLUS
2601: ST_TO_ADDR
// result := points ;
2602: LD_ADDR_VAR 0 1
2606: PUSH
2607: LD_VAR 0 2
2611: ST_TO_ADDR
// end ; end_of_file
2612: LD_VAR 0 1
2616: RET
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2617: LD_VAR 0 1
2621: PPUSH
2622: CALL 35575 0 1
// if un = ru_cargo then
2626: LD_VAR 0 1
2630: PUSH
2631: LD_EXP 31
2635: EQUAL
2636: IFFALSE 2646
// ru_cargo := 0 ;
2638: LD_ADDR_EXP 31
2642: PUSH
2643: LD_INT 0
2645: ST_TO_ADDR
// if GetSide ( un ) = your_side then
2646: LD_VAR 0 1
2650: PPUSH
2651: CALL_OW 255
2655: PUSH
2656: LD_OWVAR 2
2660: EQUAL
2661: IFFALSE 2677
// dead_counter := dead_counter + 1 ;
2663: LD_ADDR_EXP 16
2667: PUSH
2668: LD_EXP 16
2672: PUSH
2673: LD_INT 1
2675: PLUS
2676: ST_TO_ADDR
// if GetSide ( un ) in FilterAllUnits ( [ f_enemy , your_side ] ) then
2677: LD_VAR 0 1
2681: PPUSH
2682: CALL_OW 255
2686: PUSH
2687: LD_INT 81
2689: PUSH
2690: LD_OWVAR 2
2694: PUSH
2695: EMPTY
2696: LIST
2697: LIST
2698: PPUSH
2699: CALL_OW 69
2703: IN
2704: IFFALSE 2720
// kill_counter := kill_counter + 1 ;
2706: LD_ADDR_EXP 17
2710: PUSH
2711: LD_EXP 17
2715: PUSH
2716: LD_INT 1
2718: PLUS
2719: ST_TO_ADDR
// if un = player_commander then
2720: LD_VAR 0 1
2724: PUSH
2725: LD_EXP 11
2729: EQUAL
2730: IFFALSE 2739
// YouLost ( vulcano-lost ) ;
2732: LD_STRING vulcano-lost
2734: PPUSH
2735: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) then
2739: LD_VAR 0 1
2743: PUSH
2744: LD_INT 22
2746: PUSH
2747: LD_INT 3
2749: PUSH
2750: EMPTY
2751: LIST
2752: LIST
2753: PUSH
2754: LD_INT 21
2756: PUSH
2757: LD_INT 3
2759: PUSH
2760: EMPTY
2761: LIST
2762: LIST
2763: PUSH
2764: EMPTY
2765: LIST
2766: LIST
2767: PPUSH
2768: CALL_OW 69
2772: IN
2773: IFFALSE 2889
// begin if GetBType ( un ) = b_turret or GetBType ( un ) = b_siberite_power then
2775: LD_VAR 0 1
2779: PPUSH
2780: CALL_OW 266
2784: PUSH
2785: LD_INT 33
2787: EQUAL
2788: PUSH
2789: LD_VAR 0 1
2793: PPUSH
2794: CALL_OW 266
2798: PUSH
2799: LD_INT 28
2801: EQUAL
2802: OR
2803: IFFALSE 2889
// begin ru_blist := ru_blist ^ GetBType ( un ) ;
2805: LD_ADDR_EXP 32
2809: PUSH
2810: LD_EXP 32
2814: PUSH
2815: LD_VAR 0 1
2819: PPUSH
2820: CALL_OW 266
2824: ADD
2825: ST_TO_ADDR
// ru_blist := ru_blist ^ GetX ( un ) ;
2826: LD_ADDR_EXP 32
2830: PUSH
2831: LD_EXP 32
2835: PUSH
2836: LD_VAR 0 1
2840: PPUSH
2841: CALL_OW 250
2845: ADD
2846: ST_TO_ADDR
// ru_blist := ru_blist ^ GetY ( un ) ;
2847: LD_ADDR_EXP 32
2851: PUSH
2852: LD_EXP 32
2856: PUSH
2857: LD_VAR 0 1
2861: PPUSH
2862: CALL_OW 251
2866: ADD
2867: ST_TO_ADDR
// ru_blist := ru_blist ^ GetDir ( un ) ;
2868: LD_ADDR_EXP 32
2872: PUSH
2873: LD_EXP 32
2877: PUSH
2878: LD_VAR 0 1
2882: PPUSH
2883: CALL_OW 254
2887: ADD
2888: ST_TO_ADDR
// end ; end ; if un in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) then
2889: LD_VAR 0 1
2893: PUSH
2894: LD_INT 22
2896: PUSH
2897: LD_INT 8
2899: PUSH
2900: EMPTY
2901: LIST
2902: LIST
2903: PUSH
2904: LD_INT 21
2906: PUSH
2907: LD_INT 3
2909: PUSH
2910: EMPTY
2911: LIST
2912: LIST
2913: PUSH
2914: EMPTY
2915: LIST
2916: LIST
2917: PPUSH
2918: CALL_OW 69
2922: IN
2923: IFFALSE 3067
// begin if GetBType ( un ) = b_barracks then
2925: LD_VAR 0 1
2929: PPUSH
2930: CALL_OW 266
2934: PUSH
2935: LD_INT 5
2937: EQUAL
2938: IFFALSE 2956
// legion_blist := legion_blist ^ b_armoury else
2940: LD_ADDR_EXP 40
2944: PUSH
2945: LD_EXP 40
2949: PUSH
2950: LD_INT 4
2952: ADD
2953: ST_TO_ADDR
2954: GO 3004
// if not GetBType ( un ) in [ b_warehouse , b_lab , b_lab_full ] then
2956: LD_VAR 0 1
2960: PPUSH
2961: CALL_OW 266
2965: PUSH
2966: LD_INT 1
2968: PUSH
2969: LD_INT 6
2971: PUSH
2972: LD_INT 8
2974: PUSH
2975: EMPTY
2976: LIST
2977: LIST
2978: LIST
2979: IN
2980: NOT
2981: IFFALSE 3004
// legion_blist := legion_blist ^ GetBType ( un ) ;
2983: LD_ADDR_EXP 40
2987: PUSH
2988: LD_EXP 40
2992: PUSH
2993: LD_VAR 0 1
2997: PPUSH
2998: CALL_OW 266
3002: ADD
3003: ST_TO_ADDR
// legion_blist := legion_blist ^ GetX ( un ) ;
3004: LD_ADDR_EXP 40
3008: PUSH
3009: LD_EXP 40
3013: PUSH
3014: LD_VAR 0 1
3018: PPUSH
3019: CALL_OW 250
3023: ADD
3024: ST_TO_ADDR
// legion_blist := legion_blist ^ GetY ( un ) ;
3025: LD_ADDR_EXP 40
3029: PUSH
3030: LD_EXP 40
3034: PUSH
3035: LD_VAR 0 1
3039: PPUSH
3040: CALL_OW 251
3044: ADD
3045: ST_TO_ADDR
// legion_blist := legion_blist ^ GetDir ( un ) ;
3046: LD_ADDR_EXP 40
3050: PUSH
3051: LD_EXP 40
3055: PUSH
3056: LD_VAR 0 1
3060: PPUSH
3061: CALL_OW 254
3065: ADD
3066: ST_TO_ADDR
// end ; if un in legion_force then
3067: LD_VAR 0 1
3071: PUSH
3072: LD_EXP 37
3076: IN
3077: IFFALSE 3095
// legion_force := legion_force diff un ;
3079: LD_ADDR_EXP 37
3083: PUSH
3084: LD_EXP 37
3088: PUSH
3089: LD_VAR 0 1
3093: DIFF
3094: ST_TO_ADDR
// if un in ru_force then
3095: LD_VAR 0 1
3099: PUSH
3100: LD_EXP 29
3104: IN
3105: IFFALSE 3123
// ru_force := ru_force diff un ;
3107: LD_ADDR_EXP 29
3111: PUSH
3112: LD_EXP 29
3116: PUSH
3117: LD_VAR 0 1
3121: DIFF
3122: ST_TO_ADDR
// if un in al_force then
3123: LD_VAR 0 1
3127: PUSH
3128: LD_EXP 44
3132: IN
3133: IFFALSE 3151
// al_force := al_force diff un ;
3135: LD_ADDR_EXP 44
3139: PUSH
3140: LD_EXP 44
3144: PUSH
3145: LD_VAR 0 1
3149: DIFF
3150: ST_TO_ADDR
// end ;
3151: PPOPN 1
3153: END
// on BuildingComplete ( b ) do var i ;
3154: LD_INT 0
3156: PPUSH
// begin if GetSide ( b ) = 8 then
3157: LD_VAR 0 1
3161: PPUSH
3162: CALL_OW 255
3166: PUSH
3167: LD_INT 8
3169: EQUAL
3170: IFFALSE 3210
// for i = 1 to 4 do
3172: LD_ADDR_VAR 0 2
3176: PUSH
3177: DOUBLE
3178: LD_INT 1
3180: DEC
3181: ST_TO_ADDR
3182: LD_INT 4
3184: PUSH
3185: FOR_TO
3186: IFFALSE 3208
// legion_blist := Delete ( legion_blist , 1 ) ;
3188: LD_ADDR_EXP 40
3192: PUSH
3193: LD_EXP 40
3197: PPUSH
3198: LD_INT 1
3200: PPUSH
3201: CALL_OW 3
3205: ST_TO_ADDR
3206: GO 3185
3208: POP
3209: POP
// if GetSide ( b ) = 3 then
3210: LD_VAR 0 1
3214: PPUSH
3215: CALL_OW 255
3219: PUSH
3220: LD_INT 3
3222: EQUAL
3223: IFFALSE 3263
// for i = 1 to 4 do
3225: LD_ADDR_VAR 0 2
3229: PUSH
3230: DOUBLE
3231: LD_INT 1
3233: DEC
3234: ST_TO_ADDR
3235: LD_INT 4
3237: PUSH
3238: FOR_TO
3239: IFFALSE 3261
// ru_blist := Delete ( ru_blist , 1 ) ;
3241: LD_ADDR_EXP 32
3245: PUSH
3246: LD_EXP 32
3250: PPUSH
3251: LD_INT 1
3253: PPUSH
3254: CALL_OW 3
3258: ST_TO_ADDR
3259: GO 3238
3261: POP
3262: POP
// end ;
3263: PPOPN 2
3265: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
3266: LD_VAR 0 1
3270: PPUSH
3271: LD_VAR 0 2
3275: PPUSH
3276: CALL 35695 0 2
// if not GetWeapon ( veh ) in [ ru_cargo_bay , ru_siberium_rocket ] then
3280: LD_VAR 0 1
3284: PPUSH
3285: CALL_OW 264
3289: PUSH
3290: LD_INT 51
3292: PUSH
3293: LD_INT 48
3295: PUSH
3296: EMPTY
3297: LIST
3298: LIST
3299: IN
3300: NOT
3301: IFFALSE 3349
// begin if GetSide ( veh ) = 3 then
3303: LD_VAR 0 1
3307: PPUSH
3308: CALL_OW 255
3312: PUSH
3313: LD_INT 3
3315: EQUAL
3316: IFFALSE 3349
// begin ComMoveXY ( veh , 149 , 8 ) ;
3318: LD_VAR 0 1
3322: PPUSH
3323: LD_INT 149
3325: PPUSH
3326: LD_INT 8
3328: PPUSH
3329: CALL_OW 111
// ru_force := ru_force ^ veh ;
3333: LD_ADDR_EXP 29
3337: PUSH
3338: LD_EXP 29
3342: PUSH
3343: LD_VAR 0 1
3347: ADD
3348: ST_TO_ADDR
// end ; end ; if not GetWeapon ( veh ) in [ ar_cargo_bay , ar_control_tower ] then
3349: LD_VAR 0 1
3353: PPUSH
3354: CALL_OW 264
3358: PUSH
3359: LD_INT 32
3361: PUSH
3362: LD_INT 31
3364: PUSH
3365: EMPTY
3366: LIST
3367: LIST
3368: IN
3369: NOT
3370: IFFALSE 3403
// begin if GetSide ( veh ) = 8 then
3372: LD_VAR 0 1
3376: PPUSH
3377: CALL_OW 255
3381: PUSH
3382: LD_INT 8
3384: EQUAL
3385: IFFALSE 3403
// legion_force := legion_force ^ veh ;
3387: LD_ADDR_EXP 37
3391: PUSH
3392: LD_EXP 37
3396: PUSH
3397: LD_VAR 0 1
3401: ADD
3402: ST_TO_ADDR
// end ; if GetSide ( veh ) = 3 and not ru_cargo and GetWeapon ( veh ) = ru_cargo_bay then
3403: LD_VAR 0 1
3407: PPUSH
3408: CALL_OW 255
3412: PUSH
3413: LD_INT 3
3415: EQUAL
3416: PUSH
3417: LD_EXP 31
3421: NOT
3422: AND
3423: PUSH
3424: LD_VAR 0 1
3428: PPUSH
3429: CALL_OW 264
3433: PUSH
3434: LD_INT 51
3436: EQUAL
3437: AND
3438: IFFALSE 3450
// ru_cargo := veh ;
3440: LD_ADDR_EXP 31
3444: PUSH
3445: LD_VAR 0 1
3449: ST_TO_ADDR
// if GetSide ( veh ) = 7 and your_side <> 7 then
3450: LD_VAR 0 1
3454: PPUSH
3455: CALL_OW 255
3459: PUSH
3460: LD_INT 7
3462: EQUAL
3463: PUSH
3464: LD_OWVAR 2
3468: PUSH
3469: LD_INT 7
3471: NONEQUAL
3472: AND
3473: IFFALSE 3491
// al_force := al_force ^ veh ;
3475: LD_ADDR_EXP 44
3479: PUSH
3480: LD_EXP 44
3484: PUSH
3485: LD_VAR 0 1
3489: ADD
3490: ST_TO_ADDR
// if GetSide ( veh ) = your_side then
3491: LD_VAR 0 1
3495: PPUSH
3496: CALL_OW 255
3500: PUSH
3501: LD_OWVAR 2
3505: EQUAL
3506: IFFALSE 3522
// veh_counter := veh_counter + 1 ;
3508: LD_ADDR_EXP 18
3512: PUSH
3513: LD_EXP 18
3517: PUSH
3518: LD_INT 1
3520: PLUS
3521: ST_TO_ADDR
// end ;
3522: PPOPN 2
3524: END
// on SibDepositContaminated ( contaminating_scientist , x_of_deposit , y_of_deposit ) do begin if GetSide ( contaminating_scientist ) <> your_side then
3525: LD_VAR 0 1
3529: PPUSH
3530: CALL_OW 255
3534: PUSH
3535: LD_OWVAR 2
3539: NONEQUAL
3540: IFFALSE 3556
// sib_contamin_counter := sib_contamin_counter + 1 ;
3542: LD_ADDR_EXP 20
3546: PUSH
3547: LD_EXP 20
3551: PUSH
3552: LD_INT 1
3554: PLUS
3555: ST_TO_ADDR
// end ;
3556: PPOPN 3
3558: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = your_side then
3559: LD_VAR 0 2
3563: PPUSH
3564: CALL_OW 255
3568: PUSH
3569: LD_OWVAR 2
3573: EQUAL
3574: IFFALSE 3590
// tech_counter := tech_counter + 1 ;
3576: LD_ADDR_EXP 19
3580: PUSH
3581: LD_EXP 19
3585: PUSH
3586: LD_INT 1
3588: PLUS
3589: ST_TO_ADDR
// if tech = 53 and your_side = 1 then
3590: LD_VAR 0 1
3594: PUSH
3595: LD_INT 53
3597: EQUAL
3598: PUSH
3599: LD_OWVAR 2
3603: PUSH
3604: LD_INT 1
3606: EQUAL
3607: AND
3608: IFFALSE 3623
// SetTech ( 80 , 1 , state_researched ) ;
3610: LD_INT 80
3612: PPUSH
3613: LD_INT 1
3615: PPUSH
3616: LD_INT 2
3618: PPUSH
3619: CALL_OW 322
// end ;
3623: PPOPN 2
3625: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 8 and GetControl ( un ) = control_remote then
3626: LD_VAR 0 1
3630: PPUSH
3631: CALL_OW 255
3635: PUSH
3636: LD_INT 8
3638: EQUAL
3639: PUSH
3640: LD_VAR 0 1
3644: PPUSH
3645: CALL_OW 263
3649: PUSH
3650: LD_INT 2
3652: EQUAL
3653: AND
3654: IFFALSE 3665
// ComAutodestruct ( un ) ;
3656: LD_VAR 0 1
3660: PPUSH
3661: CALL 72699 0 1
// end ;
3665: PPOPN 1
3667: END
// on SailEvent ( event ) do begin case event of event_legion_attack :
3668: LD_VAR 0 1
3672: PUSH
3673: LD_EXP 21
3677: DOUBLE
3678: EQUAL
3679: IFTRUE 3683
3681: GO 3690
3683: POP
// LegionAttack ( ) ; event_alliance_attack :
3684: CALL 11403 0 0
3688: GO 3725
3690: LD_EXP 23
3694: DOUBLE
3695: EQUAL
3696: IFTRUE 3700
3698: GO 3707
3700: POP
// AllianceAttack ( ) ; event_russian_attack :
3701: CALL 18944 0 0
3705: GO 3725
3707: LD_EXP 22
3711: DOUBLE
3712: EQUAL
3713: IFTRUE 3717
3715: GO 3724
3717: POP
// RussianAttack ( ) ; end ;
3718: CALL 7629 0 0
3722: GO 3725
3724: POP
// end ;
3725: PPOPN 1
3727: END
// every 9 9$30 trigger FilterAllUnits ( [ f_class , class_apeman ] ) < 9 and tick < 50 50$00 do
3728: LD_INT 25
3730: PUSH
3731: LD_INT 12
3733: PUSH
3734: EMPTY
3735: LIST
3736: LIST
3737: PPUSH
3738: CALL_OW 69
3742: PUSH
3743: LD_INT 9
3745: LESS
3746: PUSH
3747: LD_OWVAR 1
3751: PUSH
3752: LD_INT 105000
3754: LESS
3755: AND
3756: IFFALSE 3789
3758: GO 3760
3760: DISABLE
// begin enable ;
3761: ENABLE
// PrepareApeman2 ( 8 - ( FilterAllUnits ( [ f_class , class_apeman ] ) + 0 ) ) ;
3762: LD_INT 8
3764: PUSH
3765: LD_INT 25
3767: PUSH
3768: LD_INT 12
3770: PUSH
3771: EMPTY
3772: LIST
3773: LIST
3774: PPUSH
3775: CALL_OW 69
3779: PUSH
3780: LD_INT 0
3782: PLUS
3783: MINUS
3784: PPUSH
3785: CALL 2000 0 1
// end ;
3789: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
3790: LD_VAR 0 1
3794: PPUSH
3795: LD_VAR 0 2
3799: PPUSH
3800: LD_VAR 0 3
3804: PPUSH
3805: CALL 35671 0 3
// end ;
3809: PPOPN 3
3811: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
3812: LD_VAR 0 1
3816: PPUSH
3817: CALL 35679 0 1
// end ; end_of_file
3821: PPOPN 1
3823: END
// export ru_force , ru_skill , ru_cargo , ru_blist , ru_vlist , ru_amount , ru_time , ru_teleport_exit ; export function PrepareRussian ; var i , un , ru_depot , ru_factory , ru_teleport , ru_barracks , ru_bunkers , ru_buildings , ru_vehicles , ru_humans ; begin
3824: LD_INT 0
3826: PPUSH
3827: PPUSH
3828: PPUSH
3829: PPUSH
3830: PPUSH
3831: PPUSH
3832: PPUSH
3833: PPUSH
3834: PPUSH
3835: PPUSH
3836: PPUSH
// uc_side := 3 ;
3837: LD_ADDR_OWVAR 20
3841: PUSH
3842: LD_INT 3
3844: ST_TO_ADDR
// uc_nation := nation_russian ;
3845: LD_ADDR_OWVAR 21
3849: PUSH
3850: LD_INT 3
3852: ST_TO_ADDR
// ru_depot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
3853: LD_ADDR_VAR 0 4
3857: PUSH
3858: LD_INT 22
3860: PUSH
3861: LD_INT 3
3863: PUSH
3864: EMPTY
3865: LIST
3866: LIST
3867: PUSH
3868: LD_INT 30
3870: PUSH
3871: LD_INT 1
3873: PUSH
3874: EMPTY
3875: LIST
3876: LIST
3877: PUSH
3878: EMPTY
3879: LIST
3880: LIST
3881: PPUSH
3882: CALL_OW 69
3886: PUSH
3887: LD_INT 1
3889: ARRAY
3890: ST_TO_ADDR
// ru_factory := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3891: LD_ADDR_VAR 0 5
3895: PUSH
3896: LD_INT 22
3898: PUSH
3899: LD_INT 3
3901: PUSH
3902: EMPTY
3903: LIST
3904: LIST
3905: PUSH
3906: LD_INT 30
3908: PUSH
3909: LD_INT 3
3911: PUSH
3912: EMPTY
3913: LIST
3914: LIST
3915: PUSH
3916: EMPTY
3917: LIST
3918: LIST
3919: PPUSH
3920: CALL_OW 69
3924: PUSH
3925: LD_INT 1
3927: ARRAY
3928: ST_TO_ADDR
// ru_teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] ;
3929: LD_ADDR_VAR 0 6
3933: PUSH
3934: LD_INT 22
3936: PUSH
3937: LD_INT 3
3939: PUSH
3940: EMPTY
3941: LIST
3942: LIST
3943: PUSH
3944: LD_INT 30
3946: PUSH
3947: LD_INT 34
3949: PUSH
3950: EMPTY
3951: LIST
3952: LIST
3953: PUSH
3954: EMPTY
3955: LIST
3956: LIST
3957: PPUSH
3958: CALL_OW 69
3962: PUSH
3963: LD_INT 1
3965: ARRAY
3966: ST_TO_ADDR
// ru_bunkers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
3967: LD_ADDR_VAR 0 8
3971: PUSH
3972: LD_INT 22
3974: PUSH
3975: LD_INT 3
3977: PUSH
3978: EMPTY
3979: LIST
3980: LIST
3981: PUSH
3982: LD_INT 30
3984: PUSH
3985: LD_INT 33
3987: PUSH
3988: EMPTY
3989: LIST
3990: LIST
3991: PUSH
3992: EMPTY
3993: LIST
3994: LIST
3995: PPUSH
3996: CALL_OW 69
4000: ST_TO_ADDR
// ru_barracks := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
4001: LD_ADDR_VAR 0 7
4005: PUSH
4006: LD_INT 22
4008: PUSH
4009: LD_INT 3
4011: PUSH
4012: EMPTY
4013: LIST
4014: LIST
4015: PUSH
4016: LD_INT 30
4018: PUSH
4019: LD_INT 5
4021: PUSH
4022: EMPTY
4023: LIST
4024: LIST
4025: PUSH
4026: EMPTY
4027: LIST
4028: LIST
4029: PPUSH
4030: CALL_OW 69
4034: PUSH
4035: LD_INT 1
4037: ARRAY
4038: ST_TO_ADDR
// ru_blist := [ ] ;
4039: LD_ADDR_EXP 32
4043: PUSH
4044: EMPTY
4045: ST_TO_ADDR
// ru_vlist := [ ] ;
4046: LD_ADDR_EXP 33
4050: PUSH
4051: EMPTY
4052: ST_TO_ADDR
// ru_teleport_exit := [ 183 , 62 , 147 , 44 ] ;
4053: LD_ADDR_EXP 36
4057: PUSH
4058: LD_INT 183
4060: PUSH
4061: LD_INT 62
4063: PUSH
4064: LD_INT 147
4066: PUSH
4067: LD_INT 44
4069: PUSH
4070: EMPTY
4071: LIST
4072: LIST
4073: LIST
4074: LIST
4075: ST_TO_ADDR
// TeleportExit ( FilterAllUnits ( [ f_btype , b_teleport ] ) [ 1 ] , ru_teleport_exit [ 1 ] , ru_teleport_exit [ 2 ] ) ;
4076: LD_INT 30
4078: PUSH
4079: LD_INT 34
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: PPUSH
4086: CALL_OW 69
4090: PUSH
4091: LD_INT 1
4093: ARRAY
4094: PPUSH
4095: LD_EXP 36
4099: PUSH
4100: LD_INT 1
4102: ARRAY
4103: PPUSH
4104: LD_EXP 36
4108: PUSH
4109: LD_INT 2
4111: ARRAY
4112: PPUSH
4113: CALL_OW 243
// ru_amount := [ 4 , 5 , 6 ] [ Difficulty ] ;
4117: LD_ADDR_EXP 34
4121: PUSH
4122: LD_INT 4
4124: PUSH
4125: LD_INT 5
4127: PUSH
4128: LD_INT 6
4130: PUSH
4131: EMPTY
4132: LIST
4133: LIST
4134: LIST
4135: PUSH
4136: LD_OWVAR 67
4140: ARRAY
4141: ST_TO_ADDR
// SetResourceType ( GetBase ( ru_depot ) , mat_cans , 3000 ) ;
4142: LD_VAR 0 4
4146: PPUSH
4147: CALL_OW 274
4151: PPUSH
4152: LD_INT 1
4154: PPUSH
4155: LD_INT 3000
4157: PPUSH
4158: CALL_OW 277
// SetResourceType ( GetBase ( ru_depot ) , mat_oil , 300 ) ;
4162: LD_VAR 0 4
4166: PPUSH
4167: CALL_OW 274
4171: PPUSH
4172: LD_INT 2
4174: PPUSH
4175: LD_INT 300
4177: PPUSH
4178: CALL_OW 277
// hc_gallery :=  ;
4182: LD_ADDR_OWVAR 33
4186: PUSH
4187: LD_STRING 
4189: ST_TO_ADDR
// hc_name :=  ;
4190: LD_ADDR_OWVAR 26
4194: PUSH
4195: LD_STRING 
4197: ST_TO_ADDR
// hc_importance := 0 ;
4198: LD_ADDR_OWVAR 32
4202: PUSH
4203: LD_INT 0
4205: ST_TO_ADDR
// ru_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
4206: LD_ADDR_EXP 30
4210: PUSH
4211: LD_INT 5
4213: PUSH
4214: LD_INT 6
4216: PUSH
4217: LD_INT 7
4219: PUSH
4220: EMPTY
4221: LIST
4222: LIST
4223: LIST
4224: PUSH
4225: LD_OWVAR 67
4229: ARRAY
4230: ST_TO_ADDR
// for i = 1 to 6 do
4231: LD_ADDR_VAR 0 2
4235: PUSH
4236: DOUBLE
4237: LD_INT 1
4239: DEC
4240: ST_TO_ADDR
4241: LD_INT 6
4243: PUSH
4244: FOR_TO
4245: IFFALSE 4403
// begin PrepareHuman ( false , class_bazooker , ru_skill ) ;
4247: LD_INT 0
4249: PPUSH
4250: LD_INT 9
4252: PPUSH
4253: LD_EXP 30
4257: PPUSH
4258: CALL_OW 380
// un := CreateHuman ;
4262: LD_ADDR_VAR 0 3
4266: PUSH
4267: CALL_OW 44
4271: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_barracks ) ;
4272: LD_VAR 0 3
4276: PPUSH
4277: LD_VAR 0 7
4281: PPUSH
4282: CALL_OW 52
// PrepareHuman ( false , 4 , ru_skill ) ;
4286: LD_INT 0
4288: PPUSH
4289: LD_INT 4
4291: PPUSH
4292: LD_EXP 30
4296: PPUSH
4297: CALL_OW 380
// un := CreateHuman ;
4301: LD_ADDR_VAR 0 3
4305: PUSH
4306: CALL_OW 44
4310: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
4311: LD_VAR 0 3
4315: PPUSH
4316: LD_INT 24
4318: PPUSH
4319: CALL_OW 52
// PrepareHuman ( false , 3 , ru_skill ) ;
4323: LD_INT 0
4325: PPUSH
4326: LD_INT 3
4328: PPUSH
4329: LD_EXP 30
4333: PPUSH
4334: CALL_OW 380
// un := CreateHuman ;
4338: LD_ADDR_VAR 0 3
4342: PUSH
4343: CALL_OW 44
4347: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_factory ) ;
4348: LD_VAR 0 3
4352: PPUSH
4353: LD_VAR 0 5
4357: PPUSH
4358: CALL_OW 52
// PrepareHuman ( false , 2 , ru_skill ) ;
4362: LD_INT 0
4364: PPUSH
4365: LD_INT 2
4367: PPUSH
4368: LD_EXP 30
4372: PPUSH
4373: CALL_OW 380
// un := CreateHuman ;
4377: LD_ADDR_VAR 0 3
4381: PUSH
4382: CALL_OW 44
4386: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_depot ) ;
4387: LD_VAR 0 3
4391: PPUSH
4392: LD_VAR 0 4
4396: PPUSH
4397: CALL_OW 52
// end ;
4401: GO 4244
4403: POP
4404: POP
// if Difficulty > 1 then
4405: LD_OWVAR 67
4409: PUSH
4410: LD_INT 1
4412: GREATER
4413: IFFALSE 4446
// begin un := CreateBehemoth ( 3 , 160 , 36 , 3 ) ;
4415: LD_ADDR_VAR 0 3
4419: PUSH
4420: LD_INT 3
4422: PPUSH
4423: LD_INT 160
4425: PPUSH
4426: LD_INT 36
4428: PPUSH
4429: LD_INT 3
4431: PPUSH
4432: CALL 80646 0 4
4436: ST_TO_ADDR
// ComHold ( un ) ;
4437: LD_VAR 0 3
4441: PPUSH
4442: CALL_OW 140
// end ; russian_prepared := true ;
4446: LD_ADDR_EXP 2
4450: PUSH
4451: LD_INT 1
4453: ST_TO_ADDR
// ComConstruct ( ru_factory , ru_medium_wheeled , 3 , control_computer , ru_cargo_bay ) ;
4454: LD_VAR 0 5
4458: PPUSH
4459: LD_INT 21
4461: PPUSH
4462: LD_INT 3
4464: PPUSH
4465: LD_INT 3
4467: PPUSH
4468: LD_INT 51
4470: PPUSH
4471: CALL_OW 125
// end ;
4475: LD_VAR 0 1
4479: RET
// every 0 0$02 trigger FilterAllUnits ( [ f_side , 3 ] ) > 0 and russian_prepared do var ru_depot , ru_factory , ru_teleport , ru_bunkers , ru_buildings , ru_vehicles , ru_humans , ru_barracks , ru_engs , ru_mech , ru_sci , i , tmp , filter , cr , sib_bomb ;
4480: LD_INT 22
4482: PUSH
4483: LD_INT 3
4485: PUSH
4486: EMPTY
4487: LIST
4488: LIST
4489: PPUSH
4490: CALL_OW 69
4494: PUSH
4495: LD_INT 0
4497: GREATER
4498: PUSH
4499: LD_EXP 2
4503: AND
4504: IFFALSE 6654
4506: GO 4508
4508: DISABLE
4509: LD_INT 0
4511: PPUSH
4512: PPUSH
4513: PPUSH
4514: PPUSH
4515: PPUSH
4516: PPUSH
4517: PPUSH
4518: PPUSH
4519: PPUSH
4520: PPUSH
4521: PPUSH
4522: PPUSH
4523: PPUSH
4524: PPUSH
4525: PPUSH
4526: PPUSH
// begin enable ;
4527: ENABLE
// ru_depot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
4528: LD_ADDR_VAR 0 1
4532: PUSH
4533: LD_INT 22
4535: PUSH
4536: LD_INT 3
4538: PUSH
4539: EMPTY
4540: LIST
4541: LIST
4542: PUSH
4543: LD_INT 30
4545: PUSH
4546: LD_INT 1
4548: PUSH
4549: EMPTY
4550: LIST
4551: LIST
4552: PUSH
4553: EMPTY
4554: LIST
4555: LIST
4556: PPUSH
4557: CALL_OW 69
4561: PUSH
4562: LD_INT 1
4564: ARRAY
4565: ST_TO_ADDR
// ru_factory := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
4566: LD_ADDR_VAR 0 2
4570: PUSH
4571: LD_INT 22
4573: PUSH
4574: LD_INT 3
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: PUSH
4581: LD_INT 30
4583: PUSH
4584: LD_INT 3
4586: PUSH
4587: EMPTY
4588: LIST
4589: LIST
4590: PUSH
4591: EMPTY
4592: LIST
4593: LIST
4594: PPUSH
4595: CALL_OW 69
4599: PUSH
4600: LD_INT 1
4602: ARRAY
4603: ST_TO_ADDR
// ru_teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] ;
4604: LD_ADDR_VAR 0 3
4608: PUSH
4609: LD_INT 22
4611: PUSH
4612: LD_INT 3
4614: PUSH
4615: EMPTY
4616: LIST
4617: LIST
4618: PUSH
4619: LD_INT 30
4621: PUSH
4622: LD_INT 34
4624: PUSH
4625: EMPTY
4626: LIST
4627: LIST
4628: PUSH
4629: EMPTY
4630: LIST
4631: LIST
4632: PPUSH
4633: CALL_OW 69
4637: PUSH
4638: LD_INT 1
4640: ARRAY
4641: ST_TO_ADDR
// ru_bunkers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
4642: LD_ADDR_VAR 0 4
4646: PUSH
4647: LD_INT 22
4649: PUSH
4650: LD_INT 3
4652: PUSH
4653: EMPTY
4654: LIST
4655: LIST
4656: PUSH
4657: LD_INT 30
4659: PUSH
4660: LD_INT 33
4662: PUSH
4663: EMPTY
4664: LIST
4665: LIST
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: PPUSH
4671: CALL_OW 69
4675: ST_TO_ADDR
// ru_barracks := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
4676: LD_ADDR_VAR 0 8
4680: PUSH
4681: LD_INT 22
4683: PUSH
4684: LD_INT 3
4686: PUSH
4687: EMPTY
4688: LIST
4689: LIST
4690: PUSH
4691: LD_INT 30
4693: PUSH
4694: LD_INT 5
4696: PUSH
4697: EMPTY
4698: LIST
4699: LIST
4700: PUSH
4701: EMPTY
4702: LIST
4703: LIST
4704: PPUSH
4705: CALL_OW 69
4709: PUSH
4710: LD_INT 1
4712: ARRAY
4713: ST_TO_ADDR
// ru_buildings := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
4714: LD_ADDR_VAR 0 5
4718: PUSH
4719: LD_INT 22
4721: PUSH
4722: LD_INT 3
4724: PUSH
4725: EMPTY
4726: LIST
4727: LIST
4728: PUSH
4729: LD_INT 21
4731: PUSH
4732: LD_INT 3
4734: PUSH
4735: EMPTY
4736: LIST
4737: LIST
4738: PUSH
4739: EMPTY
4740: LIST
4741: LIST
4742: PPUSH
4743: CALL_OW 69
4747: ST_TO_ADDR
// ru_vehicles := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
4748: LD_ADDR_VAR 0 6
4752: PUSH
4753: LD_INT 22
4755: PUSH
4756: LD_INT 3
4758: PUSH
4759: EMPTY
4760: LIST
4761: LIST
4762: PUSH
4763: LD_INT 21
4765: PUSH
4766: LD_INT 2
4768: PUSH
4769: EMPTY
4770: LIST
4771: LIST
4772: PUSH
4773: EMPTY
4774: LIST
4775: LIST
4776: PPUSH
4777: CALL_OW 69
4781: ST_TO_ADDR
// ru_humans := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
4782: LD_ADDR_VAR 0 7
4786: PUSH
4787: LD_INT 22
4789: PUSH
4790: LD_INT 3
4792: PUSH
4793: EMPTY
4794: LIST
4795: LIST
4796: PUSH
4797: LD_INT 21
4799: PUSH
4800: LD_INT 1
4802: PUSH
4803: EMPTY
4804: LIST
4805: LIST
4806: PUSH
4807: EMPTY
4808: LIST
4809: LIST
4810: PPUSH
4811: CALL_OW 69
4815: ST_TO_ADDR
// ru_engs := UnitFilter ( ru_humans , [ f_class , 2 ] ) ;
4816: LD_ADDR_VAR 0 9
4820: PUSH
4821: LD_VAR 0 7
4825: PPUSH
4826: LD_INT 25
4828: PUSH
4829: LD_INT 2
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: PPUSH
4836: CALL_OW 72
4840: ST_TO_ADDR
// ru_mech := UnitFilter ( ru_humans , [ f_class , 3 ] ) ;
4841: LD_ADDR_VAR 0 10
4845: PUSH
4846: LD_VAR 0 7
4850: PPUSH
4851: LD_INT 25
4853: PUSH
4854: LD_INT 3
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: PPUSH
4861: CALL_OW 72
4865: ST_TO_ADDR
// ru_sci := UnitFilter ( ru_humans , [ f_class , 4 ] ) ;
4866: LD_ADDR_VAR 0 11
4870: PUSH
4871: LD_VAR 0 7
4875: PPUSH
4876: LD_INT 25
4878: PUSH
4879: LD_INT 4
4881: PUSH
4882: EMPTY
4883: LIST
4884: LIST
4885: PPUSH
4886: CALL_OW 72
4890: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) > 0 and ru_cargo = false then
4891: LD_INT 22
4893: PUSH
4894: LD_INT 3
4896: PUSH
4897: EMPTY
4898: LIST
4899: LIST
4900: PUSH
4901: LD_INT 34
4903: PUSH
4904: LD_INT 51
4906: PUSH
4907: EMPTY
4908: LIST
4909: LIST
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: PPUSH
4915: CALL_OW 69
4919: PUSH
4920: LD_INT 0
4922: GREATER
4923: PUSH
4924: LD_EXP 31
4928: PUSH
4929: LD_INT 0
4931: EQUAL
4932: AND
4933: IFFALSE 4973
// ru_cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
4935: LD_ADDR_EXP 31
4939: PUSH
4940: LD_INT 22
4942: PUSH
4943: LD_INT 3
4945: PUSH
4946: EMPTY
4947: LIST
4948: LIST
4949: PUSH
4950: LD_INT 34
4952: PUSH
4953: LD_INT 51
4955: PUSH
4956: EMPTY
4957: LIST
4958: LIST
4959: PUSH
4960: EMPTY
4961: LIST
4962: LIST
4963: PPUSH
4964: CALL_OW 69
4968: PUSH
4969: LD_INT 1
4971: ARRAY
4972: ST_TO_ADDR
// if ru_cargo then
4973: LD_EXP 31
4977: IFFALSE 5317
// begin if IsInArea ( ru_cargo , ru_base ) then
4979: LD_EXP 31
4983: PPUSH
4984: LD_INT 9
4986: PPUSH
4987: CALL_OW 308
4991: IFFALSE 5070
// begin if GetCargo ( ru_cargo , mat_cans ) = 0 then
4993: LD_EXP 31
4997: PPUSH
4998: LD_INT 1
5000: PPUSH
5001: CALL_OW 289
5005: PUSH
5006: LD_INT 0
5008: EQUAL
5009: IFFALSE 5027
// ComEnterUnit ( ru_cargo , ru_teleport ) else
5011: LD_EXP 31
5015: PPUSH
5016: LD_VAR 0 3
5020: PPUSH
5021: CALL_OW 120
5025: GO 5068
// if not HasTask ( ru_cargo ) then
5027: LD_EXP 31
5031: PPUSH
5032: CALL_OW 314
5036: NOT
5037: IFFALSE 5068
// ComMoveXY ( ru_cargo , GetX ( ru_depot ) , GetY ( ru_depot ) ) ;
5039: LD_EXP 31
5043: PPUSH
5044: LD_VAR 0 1
5048: PPUSH
5049: CALL_OW 250
5053: PPUSH
5054: LD_VAR 0 1
5058: PPUSH
5059: CALL_OW 251
5063: PPUSH
5064: CALL_OW 111
// end else
5068: GO 5317
// begin if not HasTask ( ru_cargo ) and GetCargo ( ru_cargo , mat_cans ) < 100 and not IsInArea ( ru_cargo , cargoa ) then
5070: LD_EXP 31
5074: PPUSH
5075: CALL_OW 314
5079: NOT
5080: PUSH
5081: LD_EXP 31
5085: PPUSH
5086: LD_INT 1
5088: PPUSH
5089: CALL_OW 289
5093: PUSH
5094: LD_INT 100
5096: LESS
5097: AND
5098: PUSH
5099: LD_EXP 31
5103: PPUSH
5104: LD_INT 10
5106: PPUSH
5107: CALL_OW 308
5111: NOT
5112: AND
5113: IFFALSE 5190
// begin cr := GetListOfCratesInArea ( ru_crates ) ;
5115: LD_ADDR_VAR 0 15
5119: PUSH
5120: LD_INT 11
5122: PPUSH
5123: CALL_OW 435
5127: ST_TO_ADDR
// if cr then
5128: LD_VAR 0 15
5132: IFFALSE 5163
// ComCollect ( ru_cargo , cr [ 1 ] , cr [ 2 ] ) else
5134: LD_EXP 31
5138: PPUSH
5139: LD_VAR 0 15
5143: PUSH
5144: LD_INT 1
5146: ARRAY
5147: PPUSH
5148: LD_VAR 0 15
5152: PUSH
5153: LD_INT 2
5155: ARRAY
5156: PPUSH
5157: CALL_OW 117
5161: GO 5190
// if not IsInArea ( ru_cargo , ru_crates ) then
5163: LD_EXP 31
5167: PPUSH
5168: LD_INT 11
5170: PPUSH
5171: CALL_OW 308
5175: NOT
5176: IFFALSE 5190
// ComMoveToArea ( ru_cargo , ru_crates ) ;
5178: LD_EXP 31
5182: PPUSH
5183: LD_INT 11
5185: PPUSH
5186: CALL_OW 113
// end ; if not HasTask ( ru_cargo ) and not IsInArea ( ru_cargo , cargoa ) and ( GetCargo ( ru_cargo , mat_cans ) = 100 or See ( your_side , ru_cargo ) ) then
5190: LD_EXP 31
5194: PPUSH
5195: CALL_OW 314
5199: NOT
5200: PUSH
5201: LD_EXP 31
5205: PPUSH
5206: LD_INT 10
5208: PPUSH
5209: CALL_OW 308
5213: NOT
5214: AND
5215: PUSH
5216: LD_EXP 31
5220: PPUSH
5221: LD_INT 1
5223: PPUSH
5224: CALL_OW 289
5228: PUSH
5229: LD_INT 100
5231: EQUAL
5232: PUSH
5233: LD_OWVAR 2
5237: PPUSH
5238: LD_EXP 31
5242: PPUSH
5243: CALL_OW 292
5247: OR
5248: AND
5249: IFFALSE 5263
// ComMoveToArea ( ru_cargo , cargoa ) ;
5251: LD_EXP 31
5255: PPUSH
5256: LD_INT 10
5258: PPUSH
5259: CALL_OW 113
// if IsInArea ( ru_cargo , cargoa ) and ru_barracks then
5263: LD_EXP 31
5267: PPUSH
5268: LD_INT 10
5270: PPUSH
5271: CALL_OW 308
5275: PUSH
5276: LD_VAR 0 8
5280: AND
5281: IFFALSE 5317
// ComSpaceShift ( UnitFilter ( ru_humans , [ f_class , class_bazooker ] ) [ 1 ] , 139 , 24 ) ;
5283: LD_VAR 0 7
5287: PPUSH
5288: LD_INT 25
5290: PUSH
5291: LD_INT 9
5293: PUSH
5294: EMPTY
5295: LIST
5296: LIST
5297: PPUSH
5298: CALL_OW 72
5302: PUSH
5303: LD_INT 1
5305: ARRAY
5306: PPUSH
5307: LD_INT 139
5309: PPUSH
5310: LD_INT 24
5312: PPUSH
5313: CALL_OW 153
// end ; end ; if ru_cargo = 0 and ru_factory and BuildingStatus ( ru_factory ) = bs_idle then
5317: LD_EXP 31
5321: PUSH
5322: LD_INT 0
5324: EQUAL
5325: PUSH
5326: LD_VAR 0 2
5330: AND
5331: PUSH
5332: LD_VAR 0 2
5336: PPUSH
5337: CALL_OW 461
5341: PUSH
5342: LD_INT 2
5344: EQUAL
5345: AND
5346: IFFALSE 5369
// ComConstruct ( ru_factory , ru_medium_wheeled , 3 , control_computer , ru_cargo_bay ) ;
5348: LD_VAR 0 2
5352: PPUSH
5353: LD_INT 21
5355: PPUSH
5356: LD_INT 3
5358: PPUSH
5359: LD_INT 3
5361: PPUSH
5362: LD_INT 51
5364: PPUSH
5365: CALL_OW 125
// if ru_factory and ru_vlist > 0 then
5369: LD_VAR 0 2
5373: PUSH
5374: LD_EXP 33
5378: PUSH
5379: LD_INT 0
5381: GREATER
5382: AND
5383: IFFALSE 5483
// begin if BuildingStatus ( ru_factory ) = bs_idle then
5385: LD_VAR 0 2
5389: PPUSH
5390: CALL_OW 461
5394: PUSH
5395: LD_INT 2
5397: EQUAL
5398: IFFALSE 5483
// begin ComConstruct ( ru_factory , ru_vlist [ 1 ] , ru_vlist [ 2 ] , ru_vlist [ 3 ] , ru_vlist [ 4 ] ) ;
5400: LD_VAR 0 2
5404: PPUSH
5405: LD_EXP 33
5409: PUSH
5410: LD_INT 1
5412: ARRAY
5413: PPUSH
5414: LD_EXP 33
5418: PUSH
5419: LD_INT 2
5421: ARRAY
5422: PPUSH
5423: LD_EXP 33
5427: PUSH
5428: LD_INT 3
5430: ARRAY
5431: PPUSH
5432: LD_EXP 33
5436: PUSH
5437: LD_INT 4
5439: ARRAY
5440: PPUSH
5441: CALL_OW 125
// for i = 1 to 4 do
5445: LD_ADDR_VAR 0 12
5449: PUSH
5450: DOUBLE
5451: LD_INT 1
5453: DEC
5454: ST_TO_ADDR
5455: LD_INT 4
5457: PUSH
5458: FOR_TO
5459: IFFALSE 5481
// ru_vlist := Delete ( ru_vlist , 1 ) ;
5461: LD_ADDR_EXP 33
5465: PUSH
5466: LD_EXP 33
5470: PPUSH
5471: LD_INT 1
5473: PPUSH
5474: CALL_OW 3
5478: ST_TO_ADDR
5479: GO 5458
5481: POP
5482: POP
// end ; end ; if BuildingStatus ( ru_lab ) = bs_idle and ru_sib_bomb then
5483: LD_INT 24
5485: PPUSH
5486: CALL_OW 461
5490: PUSH
5491: LD_INT 2
5493: EQUAL
5494: PUSH
5495: LD_EXP 4
5499: AND
5500: IFFALSE 5528
// if GetTech ( tech_sibfiss , 3 ) = state_enabled then
5502: LD_INT 25
5504: PPUSH
5505: LD_INT 3
5507: PPUSH
5508: CALL_OW 321
5512: PUSH
5513: LD_INT 1
5515: EQUAL
5516: IFFALSE 5528
// ComResearch ( ru_lab , tech_sibfiss ) ;
5518: LD_INT 24
5520: PPUSH
5521: LD_INT 25
5523: PPUSH
5524: CALL_OW 124
// if GetTech ( tech_sibfiss , 3 ) = state_researched and tick mod 5 5$00 = 0 then
5528: LD_INT 25
5530: PPUSH
5531: LD_INT 3
5533: PPUSH
5534: CALL_OW 321
5538: PUSH
5539: LD_INT 2
5541: EQUAL
5542: PUSH
5543: LD_OWVAR 1
5547: PUSH
5548: LD_INT 10500
5550: MOD
5551: PUSH
5552: LD_INT 0
5554: EQUAL
5555: AND
5556: IFFALSE 5594
// if BuildingStatus ( ru_factory ) = bs_idle then
5558: LD_VAR 0 2
5562: PPUSH
5563: CALL_OW 461
5567: PUSH
5568: LD_INT 2
5570: EQUAL
5571: IFFALSE 5594
// ComConstruct ( ru_factory , ru_heavy_wheeled , 3 , control_computer , ru_siberium_rocket ) ;
5573: LD_VAR 0 2
5577: PPUSH
5578: LD_INT 23
5580: PPUSH
5581: LD_INT 3
5583: PPUSH
5584: LD_INT 3
5586: PPUSH
5587: LD_INT 48
5589: PPUSH
5590: CALL_OW 125
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) > 0 then
5594: LD_INT 22
5596: PUSH
5597: LD_INT 3
5599: PUSH
5600: EMPTY
5601: LIST
5602: LIST
5603: PUSH
5604: LD_INT 34
5606: PUSH
5607: LD_INT 48
5609: PUSH
5610: EMPTY
5611: LIST
5612: LIST
5613: PUSH
5614: EMPTY
5615: LIST
5616: LIST
5617: PPUSH
5618: CALL_OW 69
5622: PUSH
5623: LD_INT 0
5625: GREATER
5626: IFFALSE 6000
// begin sib_bomb := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) [ 1 ] ;
5628: LD_ADDR_VAR 0 16
5632: PUSH
5633: LD_INT 22
5635: PUSH
5636: LD_INT 3
5638: PUSH
5639: EMPTY
5640: LIST
5641: LIST
5642: PUSH
5643: LD_INT 34
5645: PUSH
5646: LD_INT 48
5648: PUSH
5649: EMPTY
5650: LIST
5651: LIST
5652: PUSH
5653: EMPTY
5654: LIST
5655: LIST
5656: PPUSH
5657: CALL_OW 69
5661: PUSH
5662: LD_INT 1
5664: ARRAY
5665: ST_TO_ADDR
// if IsInArea ( sib_bomb , ru_base ) then
5666: LD_VAR 0 16
5670: PPUSH
5671: LD_INT 9
5673: PPUSH
5674: CALL_OW 308
5678: IFFALSE 5696
// ComEnterUnit ( sib_bomb , ru_teleport ) else
5680: LD_VAR 0 16
5684: PPUSH
5685: LD_VAR 0 3
5689: PPUSH
5690: CALL_OW 120
5694: GO 6000
// if not HasTask ( sib_bomb ) then
5696: LD_VAR 0 16
5700: PPUSH
5701: CALL_OW 314
5705: NOT
5706: IFFALSE 6000
// if GetLives ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) > 250 then
5708: LD_INT 22
5710: PUSH
5711: LD_OWVAR 2
5715: PUSH
5716: EMPTY
5717: LIST
5718: LIST
5719: PUSH
5720: LD_INT 30
5722: PUSH
5723: LD_INT 1
5725: PUSH
5726: EMPTY
5727: LIST
5728: LIST
5729: PUSH
5730: EMPTY
5731: LIST
5732: LIST
5733: PPUSH
5734: CALL_OW 69
5738: PUSH
5739: LD_INT 1
5741: ARRAY
5742: PPUSH
5743: CALL_OW 256
5747: PUSH
5748: LD_INT 250
5750: GREATER
5751: IFFALSE 5844
// ComAttackPlace ( sib_bomb , GetX ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) , GetY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ) else
5753: LD_VAR 0 16
5757: PPUSH
5758: LD_INT 22
5760: PUSH
5761: LD_OWVAR 2
5765: PUSH
5766: EMPTY
5767: LIST
5768: LIST
5769: PUSH
5770: LD_INT 30
5772: PUSH
5773: LD_INT 1
5775: PUSH
5776: EMPTY
5777: LIST
5778: LIST
5779: PUSH
5780: EMPTY
5781: LIST
5782: LIST
5783: PPUSH
5784: CALL_OW 69
5788: PUSH
5789: LD_INT 1
5791: ARRAY
5792: PPUSH
5793: CALL_OW 250
5797: PPUSH
5798: LD_INT 22
5800: PUSH
5801: LD_OWVAR 2
5805: PUSH
5806: EMPTY
5807: LIST
5808: LIST
5809: PUSH
5810: LD_INT 30
5812: PUSH
5813: LD_INT 1
5815: PUSH
5816: EMPTY
5817: LIST
5818: LIST
5819: PUSH
5820: EMPTY
5821: LIST
5822: LIST
5823: PPUSH
5824: CALL_OW 69
5828: PUSH
5829: LD_INT 1
5831: ARRAY
5832: PPUSH
5833: CALL_OW 251
5837: PPUSH
5838: CALL_OW 116
5842: GO 6000
// if FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) > 0 then
5844: LD_INT 22
5846: PUSH
5847: LD_OWVAR 2
5851: PUSH
5852: EMPTY
5853: LIST
5854: LIST
5855: PUSH
5856: LD_INT 21
5858: PUSH
5859: LD_INT 3
5861: PUSH
5862: EMPTY
5863: LIST
5864: LIST
5865: PUSH
5866: EMPTY
5867: LIST
5868: LIST
5869: PPUSH
5870: CALL_OW 69
5874: PUSH
5875: LD_INT 0
5877: GREATER
5878: IFFALSE 5971
// ComAttackPlace ( sib_bomb , GetX ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) [ 1 ] ) , GetY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) [ 1 ] ) ) else
5880: LD_VAR 0 16
5884: PPUSH
5885: LD_INT 22
5887: PUSH
5888: LD_OWVAR 2
5892: PUSH
5893: EMPTY
5894: LIST
5895: LIST
5896: PUSH
5897: LD_INT 21
5899: PUSH
5900: LD_INT 3
5902: PUSH
5903: EMPTY
5904: LIST
5905: LIST
5906: PUSH
5907: EMPTY
5908: LIST
5909: LIST
5910: PPUSH
5911: CALL_OW 69
5915: PUSH
5916: LD_INT 1
5918: ARRAY
5919: PPUSH
5920: CALL_OW 250
5924: PPUSH
5925: LD_INT 22
5927: PUSH
5928: LD_OWVAR 2
5932: PUSH
5933: EMPTY
5934: LIST
5935: LIST
5936: PUSH
5937: LD_INT 21
5939: PUSH
5940: LD_INT 3
5942: PUSH
5943: EMPTY
5944: LIST
5945: LIST
5946: PUSH
5947: EMPTY
5948: LIST
5949: LIST
5950: PPUSH
5951: CALL_OW 69
5955: PUSH
5956: LD_INT 1
5958: ARRAY
5959: PPUSH
5960: CALL_OW 251
5964: PPUSH
5965: CALL_OW 116
5969: GO 6000
// ComAttackPlace ( sib_bomb , GetX ( player_commander ) , GetY ( player_commander ) ) ;
5971: LD_VAR 0 16
5975: PPUSH
5976: LD_EXP 11
5980: PPUSH
5981: CALL_OW 250
5985: PPUSH
5986: LD_EXP 11
5990: PPUSH
5991: CALL_OW 251
5995: PPUSH
5996: CALL_OW 116
// end ; if ru_can_attack then
6000: LD_EXP 3
6004: IFFALSE 6152
// if ru_time > 0 0$00 then
6006: LD_EXP 35
6010: PUSH
6011: LD_INT 0
6013: GREATER
6014: IFFALSE 6032
// ru_time := ru_time - 0 0$03 else
6016: LD_ADDR_EXP 35
6020: PUSH
6021: LD_EXP 35
6025: PUSH
6026: LD_INT 105
6028: MINUS
6029: ST_TO_ADDR
6030: GO 6152
// begin ru_time := Rand ( 9 9$39 , 14 14$39 ) ;
6032: LD_ADDR_EXP 35
6036: PUSH
6037: LD_INT 20265
6039: PPUSH
6040: LD_INT 30765
6042: PPUSH
6043: CALL_OW 12
6047: ST_TO_ADDR
// for i = 1 to ru_amount do
6048: LD_ADDR_VAR 0 12
6052: PUSH
6053: DOUBLE
6054: LD_INT 1
6056: DEC
6057: ST_TO_ADDR
6058: LD_EXP 34
6062: PUSH
6063: FOR_TO
6064: IFFALSE 6150
// begin ru_vlist := ru_vlist ^ ru_heavy_wheeled ;
6066: LD_ADDR_EXP 33
6070: PUSH
6071: LD_EXP 33
6075: PUSH
6076: LD_INT 23
6078: ADD
6079: ST_TO_ADDR
// ru_vlist := ru_vlist ^ engine_siberite ;
6080: LD_ADDR_EXP 33
6084: PUSH
6085: LD_EXP 33
6089: PUSH
6090: LD_INT 3
6092: ADD
6093: ST_TO_ADDR
// ru_vlist := ru_vlist ^ control_computer ;
6094: LD_ADDR_EXP 33
6098: PUSH
6099: LD_EXP 33
6103: PUSH
6104: LD_INT 3
6106: ADD
6107: ST_TO_ADDR
// ru_vlist := ru_vlist ^ [ ru_heavy_gun , ru_rocket_launcher , ru_rocket ] [ MultiRand ( 1 , 2 , 3 ) ] ;
6108: LD_ADDR_EXP 33
6112: PUSH
6113: LD_EXP 33
6117: PUSH
6118: LD_INT 46
6120: PUSH
6121: LD_INT 45
6123: PUSH
6124: LD_INT 47
6126: PUSH
6127: EMPTY
6128: LIST
6129: LIST
6130: LIST
6131: PUSH
6132: LD_INT 1
6134: PPUSH
6135: LD_INT 2
6137: PPUSH
6138: LD_INT 3
6140: PPUSH
6141: CALL_OW 14
6145: ARRAY
6146: ADD
6147: ST_TO_ADDR
// end ;
6148: GO 6063
6150: POP
6151: POP
// end ; if UnitFilter ( ru_bunkers , [ f_bweapon , 0 ] ) > 0 then
6152: LD_VAR 0 4
6156: PPUSH
6157: LD_INT 35
6159: PUSH
6160: LD_INT 0
6162: PUSH
6163: EMPTY
6164: LIST
6165: LIST
6166: PPUSH
6167: CALL_OW 72
6171: PUSH
6172: LD_INT 0
6174: GREATER
6175: IFFALSE 6223
// if BuildingStatus ( ru_factory ) = bs_idle then
6177: LD_VAR 0 2
6181: PPUSH
6182: CALL_OW 461
6186: PUSH
6187: LD_INT 2
6189: EQUAL
6190: IFFALSE 6223
// ComPlaceWeapon ( UnitFilter ( ru_bunkers , [ f_bweapon , 0 ] ) [ 1 ] , ru_rocket ) ;
6192: LD_VAR 0 4
6196: PPUSH
6197: LD_INT 35
6199: PUSH
6200: LD_INT 0
6202: PUSH
6203: EMPTY
6204: LIST
6205: LIST
6206: PPUSH
6207: CALL_OW 72
6211: PUSH
6212: LD_INT 1
6214: ARRAY
6215: PPUSH
6216: LD_INT 47
6218: PPUSH
6219: CALL_OW 148
// if ru_force >= ru_amount then
6223: LD_EXP 29
6227: PUSH
6228: LD_EXP 34
6232: GREATEREQUAL
6233: IFFALSE 6244
// RaiseSailEvent ( event_russian_attack ) ;
6235: LD_EXP 22
6239: PPUSH
6240: CALL_OW 427
// if ru_engs > 0 then
6244: LD_VAR 0 9
6248: PUSH
6249: LD_INT 0
6251: GREATER
6252: IFFALSE 6654
// begin if UnitFilter ( ru_buildings , [ f_not , [ f_lives , 1000 ] ] ) > 0 then
6254: LD_VAR 0 5
6258: PPUSH
6259: LD_INT 3
6261: PUSH
6262: LD_INT 24
6264: PUSH
6265: LD_INT 1000
6267: PUSH
6268: EMPTY
6269: LIST
6270: LIST
6271: PUSH
6272: EMPTY
6273: LIST
6274: LIST
6275: PPUSH
6276: CALL_OW 72
6280: PUSH
6281: LD_INT 0
6283: GREATER
6284: IFFALSE 6439
// begin filter := UnitFilter ( ru_buildings , [ f_not , [ f_lives , 1000 ] ] ) ;
6286: LD_ADDR_VAR 0 14
6290: PUSH
6291: LD_VAR 0 5
6295: PPUSH
6296: LD_INT 3
6298: PUSH
6299: LD_INT 24
6301: PUSH
6302: LD_INT 1000
6304: PUSH
6305: EMPTY
6306: LIST
6307: LIST
6308: PUSH
6309: EMPTY
6310: LIST
6311: LIST
6312: PPUSH
6313: CALL_OW 72
6317: ST_TO_ADDR
// for i = 1 to ru_engs do
6318: LD_ADDR_VAR 0 12
6322: PUSH
6323: DOUBLE
6324: LD_INT 1
6326: DEC
6327: ST_TO_ADDR
6328: LD_VAR 0 9
6332: PUSH
6333: FOR_TO
6334: IFFALSE 6435
// begin if IsInUnit ( ru_engs [ i ] ) then
6336: LD_VAR 0 9
6340: PUSH
6341: LD_VAR 0 12
6345: ARRAY
6346: PPUSH
6347: CALL_OW 310
6351: IFFALSE 6370
// ComExitBuilding ( ru_engs [ i ] ) else
6353: LD_VAR 0 9
6357: PUSH
6358: LD_VAR 0 12
6362: ARRAY
6363: PPUSH
6364: CALL_OW 122
6368: GO 6433
// if not HasTask ( ru_engs [ i ] ) and GetLives ( ru_engs [ i ] ) > 600 then
6370: LD_VAR 0 9
6374: PUSH
6375: LD_VAR 0 12
6379: ARRAY
6380: PPUSH
6381: CALL_OW 314
6385: NOT
6386: PUSH
6387: LD_VAR 0 9
6391: PUSH
6392: LD_VAR 0 12
6396: ARRAY
6397: PPUSH
6398: CALL_OW 256
6402: PUSH
6403: LD_INT 600
6405: GREATER
6406: AND
6407: IFFALSE 6433
// ComRepairBuilding ( ru_engs [ i ] , filter [ 1 ] ) ;
6409: LD_VAR 0 9
6413: PUSH
6414: LD_VAR 0 12
6418: ARRAY
6419: PPUSH
6420: LD_VAR 0 14
6424: PUSH
6425: LD_INT 1
6427: ARRAY
6428: PPUSH
6429: CALL_OW 130
// end ;
6433: GO 6333
6435: POP
6436: POP
// end else
6437: GO 6654
// begin if ru_blist = 0 then
6439: LD_EXP 32
6443: PUSH
6444: LD_INT 0
6446: EQUAL
6447: IFFALSE 6529
// begin for i = 1 to ru_engs do
6449: LD_ADDR_VAR 0 12
6453: PUSH
6454: DOUBLE
6455: LD_INT 1
6457: DEC
6458: ST_TO_ADDR
6459: LD_VAR 0 9
6463: PUSH
6464: FOR_TO
6465: IFFALSE 6525
// if not HasTask ( ru_engs [ i ] ) and not IsInUnit ( ru_engs [ i ] ) then
6467: LD_VAR 0 9
6471: PUSH
6472: LD_VAR 0 12
6476: ARRAY
6477: PPUSH
6478: CALL_OW 314
6482: NOT
6483: PUSH
6484: LD_VAR 0 9
6488: PUSH
6489: LD_VAR 0 12
6493: ARRAY
6494: PPUSH
6495: CALL_OW 310
6499: NOT
6500: AND
6501: IFFALSE 6523
// ComEnterUnit ( ru_engs [ i ] , ru_depot ) ;
6503: LD_VAR 0 9
6507: PUSH
6508: LD_VAR 0 12
6512: ARRAY
6513: PPUSH
6514: LD_VAR 0 1
6518: PPUSH
6519: CALL_OW 120
6523: GO 6464
6525: POP
6526: POP
// end else
6527: GO 6654
// begin for i = 1 to ru_engs do
6529: LD_ADDR_VAR 0 12
6533: PUSH
6534: DOUBLE
6535: LD_INT 1
6537: DEC
6538: ST_TO_ADDR
6539: LD_VAR 0 9
6543: PUSH
6544: FOR_TO
6545: IFFALSE 6652
// begin if IsInUnit ( ru_engs [ i ] ) then
6547: LD_VAR 0 9
6551: PUSH
6552: LD_VAR 0 12
6556: ARRAY
6557: PPUSH
6558: CALL_OW 310
6562: IFFALSE 6581
// ComExitBuilding ( ru_engs [ i ] ) else
6564: LD_VAR 0 9
6568: PUSH
6569: LD_VAR 0 12
6573: ARRAY
6574: PPUSH
6575: CALL_OW 122
6579: GO 6650
// if not HasTask ( ru_engs [ i ] ) then
6581: LD_VAR 0 9
6585: PUSH
6586: LD_VAR 0 12
6590: ARRAY
6591: PPUSH
6592: CALL_OW 314
6596: NOT
6597: IFFALSE 6650
// ComBuild ( ru_engs [ i ] , ru_blist [ 1 ] , ru_blist [ 2 ] , ru_blist [ 3 ] , ru_blist [ 4 ] ) ;
6599: LD_VAR 0 9
6603: PUSH
6604: LD_VAR 0 12
6608: ARRAY
6609: PPUSH
6610: LD_EXP 32
6614: PUSH
6615: LD_INT 1
6617: ARRAY
6618: PPUSH
6619: LD_EXP 32
6623: PUSH
6624: LD_INT 2
6626: ARRAY
6627: PPUSH
6628: LD_EXP 32
6632: PUSH
6633: LD_INT 3
6635: ARRAY
6636: PPUSH
6637: LD_EXP 32
6641: PUSH
6642: LD_INT 4
6644: ARRAY
6645: PPUSH
6646: CALL_OW 145
// end ;
6650: GO 6544
6652: POP
6653: POP
// end ; end ; end ; end ;
6654: PPOPN 16
6656: END
// every 3 3$40 + 0 0$45 trigger russian_prepared and GetListOfCratesInArea ( ru_crates ) < 10 do
6657: LD_EXP 2
6661: PUSH
6662: LD_INT 11
6664: PPUSH
6665: CALL_OW 435
6669: PUSH
6670: LD_INT 10
6672: LESS
6673: AND
6674: IFFALSE 6737
6676: GO 6678
6678: DISABLE
// begin enable ;
6679: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , ru_crates , true ) ;
6680: LD_INT 1
6682: PPUSH
6683: LD_INT 5
6685: PPUSH
6686: CALL_OW 12
6690: PPUSH
6691: LD_INT 11
6693: PPUSH
6694: LD_INT 1
6696: PPUSH
6697: CALL_OW 55
// Wait ( Rand ( 0 0$43 , 1 1$00 ) ) ;
6701: LD_INT 1505
6703: PPUSH
6704: LD_INT 2100
6706: PPUSH
6707: CALL_OW 12
6711: PPUSH
6712: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 5 ) , ru_crates , true ) ;
6716: LD_INT 1
6718: PPUSH
6719: LD_INT 5
6721: PPUSH
6722: CALL_OW 12
6726: PPUSH
6727: LD_INT 11
6729: PPUSH
6730: LD_INT 1
6732: PPUSH
6733: CALL_OW 55
// end ;
6737: END
// every 15 15$00 + 25 25$00 trigger not ru_sib_bomb do var i , tmp ;
6738: LD_EXP 4
6742: NOT
6743: IFFALSE 6858
6745: GO 6747
6747: DISABLE
6748: LD_INT 0
6750: PPUSH
6751: PPUSH
// begin enable ;
6752: ENABLE
// i := Rand ( 0 , 100 ) ;
6753: LD_ADDR_VAR 0 1
6757: PUSH
6758: LD_INT 0
6760: PPUSH
6761: LD_INT 100
6763: PPUSH
6764: CALL_OW 12
6768: ST_TO_ADDR
// case your_side of 1 :
6769: LD_OWVAR 2
6773: PUSH
6774: LD_INT 1
6776: DOUBLE
6777: EQUAL
6778: IFTRUE 6782
6780: GO 6793
6782: POP
// tmp := 10 ; 2 :
6783: LD_ADDR_VAR 0 2
6787: PUSH
6788: LD_INT 10
6790: ST_TO_ADDR
6791: GO 6832
6793: LD_INT 2
6795: DOUBLE
6796: EQUAL
6797: IFTRUE 6801
6799: GO 6812
6801: POP
// tmp := 0 ; 7 :
6802: LD_ADDR_VAR 0 2
6806: PUSH
6807: LD_INT 0
6809: ST_TO_ADDR
6810: GO 6832
6812: LD_INT 7
6814: DOUBLE
6815: EQUAL
6816: IFTRUE 6820
6818: GO 6831
6820: POP
// tmp := 15 ; end ;
6821: LD_ADDR_VAR 0 2
6825: PUSH
6826: LD_INT 15
6828: ST_TO_ADDR
6829: GO 6832
6831: POP
// if i < chance_to_bomb + tmp then
6832: LD_VAR 0 1
6836: PUSH
6837: LD_EXP 5
6841: PUSH
6842: LD_VAR 0 2
6846: PLUS
6847: LESS
6848: IFFALSE 6858
// ru_sib_bomb := true ;
6850: LD_ADDR_EXP 4
6854: PUSH
6855: LD_INT 1
6857: ST_TO_ADDR
// end ;
6858: PPOPN 2
6860: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_weapon , us_siberium_rocket ] ] ) do
6861: LD_INT 22
6863: PUSH
6864: LD_OWVAR 2
6868: PUSH
6869: EMPTY
6870: LIST
6871: LIST
6872: PUSH
6873: LD_INT 34
6875: PUSH
6876: LD_INT 8
6878: PUSH
6879: EMPTY
6880: LIST
6881: LIST
6882: PUSH
6883: EMPTY
6884: LIST
6885: LIST
6886: PPUSH
6887: CALL_OW 69
6891: IFFALSE 6904
6893: GO 6895
6895: DISABLE
// begin ru_sib_bomb := true ;
6896: LD_ADDR_EXP 4
6900: PUSH
6901: LD_INT 1
6903: ST_TO_ADDR
// end ;
6904: END
// every 10 10$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) do var i ;
6905: LD_INT 22
6907: PUSH
6908: LD_INT 3
6910: PUSH
6911: EMPTY
6912: LIST
6913: LIST
6914: PUSH
6915: LD_INT 30
6917: PUSH
6918: LD_INT 34
6920: PUSH
6921: EMPTY
6922: LIST
6923: LIST
6924: PUSH
6925: EMPTY
6926: LIST
6927: LIST
6928: PPUSH
6929: CALL_OW 69
6933: IFFALSE 7032
6935: GO 6937
6937: DISABLE
6938: LD_INT 0
6940: PPUSH
// begin enable ;
6941: ENABLE
// i := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
6942: LD_ADDR_VAR 0 1
6946: PUSH
6947: LD_INT 1
6949: PUSH
6950: LD_INT 3
6952: PUSH
6953: EMPTY
6954: LIST
6955: LIST
6956: PUSH
6957: LD_INT 1
6959: PPUSH
6960: LD_INT 2
6962: PPUSH
6963: CALL_OW 12
6967: ARRAY
6968: ST_TO_ADDR
// TeleportExit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] , ru_teleport_exit [ i ] , ru_teleport_exit [ i + 1 ] ) ;
6969: LD_INT 22
6971: PUSH
6972: LD_INT 3
6974: PUSH
6975: EMPTY
6976: LIST
6977: LIST
6978: PUSH
6979: LD_INT 30
6981: PUSH
6982: LD_INT 34
6984: PUSH
6985: EMPTY
6986: LIST
6987: LIST
6988: PUSH
6989: EMPTY
6990: LIST
6991: LIST
6992: PPUSH
6993: CALL_OW 69
6997: PUSH
6998: LD_INT 1
7000: ARRAY
7001: PPUSH
7002: LD_EXP 36
7006: PUSH
7007: LD_VAR 0 1
7011: ARRAY
7012: PPUSH
7013: LD_EXP 36
7017: PUSH
7018: LD_VAR 0 1
7022: PUSH
7023: LD_INT 1
7025: PLUS
7026: ARRAY
7027: PPUSH
7028: CALL_OW 243
// end ;
7032: PPOPN 1
7034: END
// every 12 12$00 trigger tick >= [ 28 28$00 , 25 25$00 ] [ Difficulty - 1 ] and Difficulty > 1 and FilterAllUnits ( [ f_side , 3 ] ) do var i , un , tmp , p , path ;
7035: LD_OWVAR 1
7039: PUSH
7040: LD_INT 58800
7042: PUSH
7043: LD_INT 52500
7045: PUSH
7046: EMPTY
7047: LIST
7048: LIST
7049: PUSH
7050: LD_OWVAR 67
7054: PUSH
7055: LD_INT 1
7057: MINUS
7058: ARRAY
7059: GREATEREQUAL
7060: PUSH
7061: LD_OWVAR 67
7065: PUSH
7066: LD_INT 1
7068: GREATER
7069: AND
7070: PUSH
7071: LD_INT 22
7073: PUSH
7074: LD_INT 3
7076: PUSH
7077: EMPTY
7078: LIST
7079: LIST
7080: PPUSH
7081: CALL_OW 69
7085: AND
7086: IFFALSE 7508
7088: GO 7090
7090: DISABLE
7091: LD_INT 0
7093: PPUSH
7094: PPUSH
7095: PPUSH
7096: PPUSH
7097: PPUSH
// begin enable ;
7098: ENABLE
// if tick > 60 60$00 then
7099: LD_OWVAR 1
7103: PUSH
7104: LD_INT 126000
7106: GREATER
7107: IFFALSE 7110
// disable ;
7109: DISABLE
// tmp := [ ] ;
7110: LD_ADDR_VAR 0 3
7114: PUSH
7115: EMPTY
7116: ST_TO_ADDR
// for i := 1 to 8 do
7117: LD_ADDR_VAR 0 1
7121: PUSH
7122: DOUBLE
7123: LD_INT 1
7125: DEC
7126: ST_TO_ADDR
7127: LD_INT 8
7129: PUSH
7130: FOR_TO
7131: IFFALSE 7290
// begin uc_side := 6 ;
7133: LD_ADDR_OWVAR 20
7137: PUSH
7138: LD_INT 6
7140: ST_TO_ADDR
// uc_nation := 3 ;
7141: LD_ADDR_OWVAR 21
7145: PUSH
7146: LD_INT 3
7148: ST_TO_ADDR
// vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod 3 + 1 ] ;
7149: LD_ADDR_OWVAR 37
7153: PUSH
7154: LD_INT 21
7156: PUSH
7157: LD_INT 23
7159: PUSH
7160: LD_INT 24
7162: PUSH
7163: EMPTY
7164: LIST
7165: LIST
7166: LIST
7167: PUSH
7168: LD_VAR 0 1
7172: PUSH
7173: LD_INT 3
7175: MOD
7176: PUSH
7177: LD_INT 1
7179: PLUS
7180: ARRAY
7181: ST_TO_ADDR
// vc_engine := engine_siberite ;
7182: LD_ADDR_OWVAR 39
7186: PUSH
7187: LD_INT 3
7189: ST_TO_ADDR
// vc_control := control_computer ;
7190: LD_ADDR_OWVAR 38
7194: PUSH
7195: LD_INT 3
7197: ST_TO_ADDR
// vc_weapon := [ ru_rocket_launcher , ru_flamethrower , ru_rocket ] [ i mod 3 + 1 ] ;
7198: LD_ADDR_OWVAR 40
7202: PUSH
7203: LD_INT 45
7205: PUSH
7206: LD_INT 93
7208: PUSH
7209: LD_INT 47
7211: PUSH
7212: EMPTY
7213: LIST
7214: LIST
7215: LIST
7216: PUSH
7217: LD_VAR 0 1
7221: PUSH
7222: LD_INT 3
7224: MOD
7225: PUSH
7226: LD_INT 1
7228: PLUS
7229: ARRAY
7230: ST_TO_ADDR
// un := CreateVehicle ;
7231: LD_ADDR_VAR 0 2
7235: PUSH
7236: CALL_OW 45
7240: ST_TO_ADDR
// SetDir ( un , 2 ) ;
7241: LD_VAR 0 2
7245: PPUSH
7246: LD_INT 2
7248: PPUSH
7249: CALL_OW 233
// PlaceUnitArea ( un , start_north , false ) ;
7253: LD_VAR 0 2
7257: PPUSH
7258: LD_INT 1
7260: PPUSH
7261: LD_INT 0
7263: PPUSH
7264: CALL_OW 49
// tmp := Join ( tmp , un ) ;
7268: LD_ADDR_VAR 0 3
7272: PUSH
7273: LD_VAR 0 3
7277: PPUSH
7278: LD_VAR 0 2
7282: PPUSH
7283: CALL 77185 0 2
7287: ST_TO_ADDR
// end ;
7288: GO 7130
7290: POP
7291: POP
// if FilterAllUnits ( [ [ f_side , your_side ] , [ f_distxy , 58 , 15 , 18 ] ] ) > 1 then
7292: LD_INT 22
7294: PUSH
7295: LD_OWVAR 2
7299: PUSH
7300: EMPTY
7301: LIST
7302: LIST
7303: PUSH
7304: LD_INT 92
7306: PUSH
7307: LD_INT 58
7309: PUSH
7310: LD_INT 15
7312: PUSH
7313: LD_INT 18
7315: PUSH
7316: EMPTY
7317: LIST
7318: LIST
7319: LIST
7320: LIST
7321: PUSH
7322: EMPTY
7323: LIST
7324: LIST
7325: PPUSH
7326: CALL_OW 69
7330: PUSH
7331: LD_INT 1
7333: GREATER
7334: IFFALSE 7346
// p := 2 else
7336: LD_ADDR_VAR 0 4
7340: PUSH
7341: LD_INT 2
7343: ST_TO_ADDR
7344: GO 7354
// p := 1 ;
7346: LD_ADDR_VAR 0 4
7350: PUSH
7351: LD_INT 1
7353: ST_TO_ADDR
// case p of 1 :
7354: LD_VAR 0 4
7358: PUSH
7359: LD_INT 1
7361: DOUBLE
7362: EQUAL
7363: IFTRUE 7367
7365: GO 7432
7367: POP
// path := [ [ 29 , 29 ] , [ 49 , 70 ] , [ 49 , 70 ] , [ 61 , 110 ] , [ 74 , 129 ] ] ; 2 :
7368: LD_ADDR_VAR 0 5
7372: PUSH
7373: LD_INT 29
7375: PUSH
7376: LD_INT 29
7378: PUSH
7379: EMPTY
7380: LIST
7381: LIST
7382: PUSH
7383: LD_INT 49
7385: PUSH
7386: LD_INT 70
7388: PUSH
7389: EMPTY
7390: LIST
7391: LIST
7392: PUSH
7393: LD_INT 49
7395: PUSH
7396: LD_INT 70
7398: PUSH
7399: EMPTY
7400: LIST
7401: LIST
7402: PUSH
7403: LD_INT 61
7405: PUSH
7406: LD_INT 110
7408: PUSH
7409: EMPTY
7410: LIST
7411: LIST
7412: PUSH
7413: LD_INT 74
7415: PUSH
7416: LD_INT 129
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: LIST
7427: LIST
7428: LIST
7429: ST_TO_ADDR
7430: GO 7484
7432: LD_INT 2
7434: DOUBLE
7435: EQUAL
7436: IFTRUE 7440
7438: GO 7483
7440: POP
// path := [ [ 24 , 23 ] , [ 49 , 39 ] , [ 52 , 27 ] ] ; end ;
7441: LD_ADDR_VAR 0 5
7445: PUSH
7446: LD_INT 24
7448: PUSH
7449: LD_INT 23
7451: PUSH
7452: EMPTY
7453: LIST
7454: LIST
7455: PUSH
7456: LD_INT 49
7458: PUSH
7459: LD_INT 39
7461: PUSH
7462: EMPTY
7463: LIST
7464: LIST
7465: PUSH
7466: LD_INT 52
7468: PUSH
7469: LD_INT 27
7471: PUSH
7472: EMPTY
7473: LIST
7474: LIST
7475: PUSH
7476: EMPTY
7477: LIST
7478: LIST
7479: LIST
7480: ST_TO_ADDR
7481: GO 7484
7483: POP
// repeat wait ( 0 0$1 ) ;
7484: LD_INT 35
7486: PPUSH
7487: CALL_OW 67
// until not AgressiveMove ( tmp , path ) ;
7491: LD_VAR 0 3
7495: PPUSH
7496: LD_VAR 0 5
7500: PPUSH
7501: CALL 79789 0 2
7505: NOT
7506: IFFALSE 7484
// end ;
7508: PPOPN 5
7510: END
// every 30 30$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) do var ru_depot ;
7511: LD_INT 22
7513: PUSH
7514: LD_INT 3
7516: PUSH
7517: EMPTY
7518: LIST
7519: LIST
7520: PUSH
7521: LD_INT 30
7523: PUSH
7524: LD_INT 1
7526: PUSH
7527: EMPTY
7528: LIST
7529: LIST
7530: PUSH
7531: EMPTY
7532: LIST
7533: LIST
7534: PPUSH
7535: CALL_OW 69
7539: IFFALSE 7626
7541: GO 7543
7543: DISABLE
7544: LD_INT 0
7546: PPUSH
// begin enable ;
7547: ENABLE
// ru_depot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
7548: LD_ADDR_VAR 0 1
7552: PUSH
7553: LD_INT 22
7555: PUSH
7556: LD_INT 3
7558: PUSH
7559: EMPTY
7560: LIST
7561: LIST
7562: PUSH
7563: LD_INT 30
7565: PUSH
7566: LD_INT 1
7568: PUSH
7569: EMPTY
7570: LIST
7571: LIST
7572: PUSH
7573: EMPTY
7574: LIST
7575: LIST
7576: PPUSH
7577: CALL_OW 69
7581: PUSH
7582: LD_INT 1
7584: ARRAY
7585: ST_TO_ADDR
// AddResourceType ( GetBase ( ru_depot ) , mat_cans , 6000 ) ;
7586: LD_VAR 0 1
7590: PPUSH
7591: CALL_OW 274
7595: PPUSH
7596: LD_INT 1
7598: PPUSH
7599: LD_INT 6000
7601: PPUSH
7602: CALL_OW 276
// AddResourceType ( GetBase ( ru_depot ) , mat_oil , 600 ) ;
7606: LD_VAR 0 1
7610: PPUSH
7611: CALL_OW 274
7615: PPUSH
7616: LD_INT 2
7618: PPUSH
7619: LD_INT 600
7621: PPUSH
7622: CALL_OW 276
// end ;
7626: PPOPN 1
7628: END
// export function RussianAttack ( ) ; var path , units , p , i , teleport ; begin
7629: LD_INT 0
7631: PPUSH
7632: PPUSH
7633: PPUSH
7634: PPUSH
7635: PPUSH
7636: PPUSH
// units := ru_force ;
7637: LD_ADDR_VAR 0 3
7641: PUSH
7642: LD_EXP 29
7646: ST_TO_ADDR
// teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) ;
7647: LD_ADDR_VAR 0 6
7651: PUSH
7652: LD_INT 22
7654: PUSH
7655: LD_INT 3
7657: PUSH
7658: EMPTY
7659: LIST
7660: LIST
7661: PUSH
7662: LD_INT 30
7664: PUSH
7665: LD_INT 34
7667: PUSH
7668: EMPTY
7669: LIST
7670: LIST
7671: PUSH
7672: EMPTY
7673: LIST
7674: LIST
7675: PPUSH
7676: CALL_OW 69
7680: ST_TO_ADDR
// ru_force := [ ] ;
7681: LD_ADDR_EXP 29
7685: PUSH
7686: EMPTY
7687: ST_TO_ADDR
// if not teleport then
7688: LD_VAR 0 6
7692: NOT
7693: IFFALSE 7735
// begin for i in units do
7695: LD_ADDR_VAR 0 5
7699: PUSH
7700: LD_VAR 0 3
7704: PUSH
7705: FOR_IN
7706: IFFALSE 7731
// TeleportUnit ( i , 150 , 65 , 12 , true ) ;
7708: LD_VAR 0 5
7712: PPUSH
7713: LD_INT 150
7715: PPUSH
7716: LD_INT 65
7718: PPUSH
7719: LD_INT 12
7721: PPUSH
7722: LD_INT 1
7724: PPUSH
7725: CALL_OW 483
7729: GO 7705
7731: POP
7732: POP
// end else
7733: GO 7830
// begin repeat for i = 1 to units do
7735: LD_ADDR_VAR 0 5
7739: PUSH
7740: DOUBLE
7741: LD_INT 1
7743: DEC
7744: ST_TO_ADDR
7745: LD_VAR 0 3
7749: PUSH
7750: FOR_TO
7751: IFFALSE 7799
// if IsInArea ( units [ i ] , ru_base ) then
7753: LD_VAR 0 3
7757: PUSH
7758: LD_VAR 0 5
7762: ARRAY
7763: PPUSH
7764: LD_INT 9
7766: PPUSH
7767: CALL_OW 308
7771: IFFALSE 7797
// ComEnterUnit ( units [ i ] , teleport [ 1 ] ) ;
7773: LD_VAR 0 3
7777: PUSH
7778: LD_VAR 0 5
7782: ARRAY
7783: PPUSH
7784: LD_VAR 0 6
7788: PUSH
7789: LD_INT 1
7791: ARRAY
7792: PPUSH
7793: CALL_OW 120
7797: GO 7750
7799: POP
7800: POP
// wait ( 0 0$10 ) ;
7801: LD_INT 350
7803: PPUSH
7804: CALL_OW 67
// until not UnitFilter ( units , [ f_inarea , ru_base ] ) ;
7808: LD_VAR 0 3
7812: PPUSH
7813: LD_INT 95
7815: PUSH
7816: LD_INT 9
7818: PUSH
7819: EMPTY
7820: LIST
7821: LIST
7822: PPUSH
7823: CALL_OW 72
7827: NOT
7828: IFFALSE 7735
// end ; p := rand ( 1 , 2 ) ;
7830: LD_ADDR_VAR 0 4
7834: PUSH
7835: LD_INT 1
7837: PPUSH
7838: LD_INT 2
7840: PPUSH
7841: CALL_OW 12
7845: ST_TO_ADDR
// case p of 1 :
7846: LD_VAR 0 4
7850: PUSH
7851: LD_INT 1
7853: DOUBLE
7854: EQUAL
7855: IFTRUE 7859
7857: GO 7913
7859: POP
// path := [ [ 159 , 71 ] , [ 152 , 99 ] , [ 107 , 119 ] , [ 104 , 127 ] ] ; 2 :
7860: LD_ADDR_VAR 0 2
7864: PUSH
7865: LD_INT 159
7867: PUSH
7868: LD_INT 71
7870: PUSH
7871: EMPTY
7872: LIST
7873: LIST
7874: PUSH
7875: LD_INT 152
7877: PUSH
7878: LD_INT 99
7880: PUSH
7881: EMPTY
7882: LIST
7883: LIST
7884: PUSH
7885: LD_INT 107
7887: PUSH
7888: LD_INT 119
7890: PUSH
7891: EMPTY
7892: LIST
7893: LIST
7894: PUSH
7895: LD_INT 104
7897: PUSH
7898: LD_INT 127
7900: PUSH
7901: EMPTY
7902: LIST
7903: LIST
7904: PUSH
7905: EMPTY
7906: LIST
7907: LIST
7908: LIST
7909: LIST
7910: ST_TO_ADDR
7911: GO 7976
7913: LD_INT 2
7915: DOUBLE
7916: EQUAL
7917: IFTRUE 7921
7919: GO 7975
7921: POP
// path := [ [ 116 , 36 ] , [ 91 , 52 ] , [ 53 , 67 ] , [ 58 , 107 ] ] ; end ;
7922: LD_ADDR_VAR 0 2
7926: PUSH
7927: LD_INT 116
7929: PUSH
7930: LD_INT 36
7932: PUSH
7933: EMPTY
7934: LIST
7935: LIST
7936: PUSH
7937: LD_INT 91
7939: PUSH
7940: LD_INT 52
7942: PUSH
7943: EMPTY
7944: LIST
7945: LIST
7946: PUSH
7947: LD_INT 53
7949: PUSH
7950: LD_INT 67
7952: PUSH
7953: EMPTY
7954: LIST
7955: LIST
7956: PUSH
7957: LD_INT 58
7959: PUSH
7960: LD_INT 107
7962: PUSH
7963: EMPTY
7964: LIST
7965: LIST
7966: PUSH
7967: EMPTY
7968: LIST
7969: LIST
7970: LIST
7971: LIST
7972: ST_TO_ADDR
7973: GO 7976
7975: POP
// if FilterAllUnits ( [ f_side , 7 ] ) and p > 1 then
7976: LD_INT 22
7978: PUSH
7979: LD_INT 7
7981: PUSH
7982: EMPTY
7983: LIST
7984: LIST
7985: PPUSH
7986: CALL_OW 69
7990: PUSH
7991: LD_VAR 0 4
7995: PUSH
7996: LD_INT 1
7998: GREATER
7999: AND
8000: IFFALSE 8031
// path := [ [ 116 , 36 ] , [ 91 , 52 ] ] ;
8002: LD_ADDR_VAR 0 2
8006: PUSH
8007: LD_INT 116
8009: PUSH
8010: LD_INT 36
8012: PUSH
8013: EMPTY
8014: LIST
8015: LIST
8016: PUSH
8017: LD_INT 91
8019: PUSH
8020: LD_INT 52
8022: PUSH
8023: EMPTY
8024: LIST
8025: LIST
8026: PUSH
8027: EMPTY
8028: LIST
8029: LIST
8030: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8031: LD_INT 35
8033: PPUSH
8034: CALL_OW 67
// until not AgressiveMove ( units , path ) ;
8038: LD_VAR 0 3
8042: PPUSH
8043: LD_VAR 0 2
8047: PPUSH
8048: CALL 79789 0 2
8052: NOT
8053: IFFALSE 8031
// end ; end_of_file
8055: LD_VAR 0 1
8059: RET
// export function RemoveLegion ; var i ; begin
8060: LD_INT 0
8062: PPUSH
8063: PPUSH
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
8064: LD_ADDR_VAR 0 2
8068: PUSH
8069: LD_INT 22
8071: PUSH
8072: LD_INT 8
8074: PUSH
8075: EMPTY
8076: LIST
8077: LIST
8078: PPUSH
8079: CALL_OW 69
8083: PUSH
8084: FOR_IN
8085: IFFALSE 8098
// RemoveUnit ( i ) ;
8087: LD_VAR 0 2
8091: PPUSH
8092: CALL_OW 64
8096: GO 8084
8098: POP
8099: POP
// end ;
8100: LD_VAR 0 1
8104: RET
// export legion_force , legion_skill , legion_mines , legion_blist , legion_vlist , legion_enemy ; export function PrepareLegion ; var un , i , tmp , veh , l_depot , p , l_factory , l_lab , l_towers ; begin
8105: LD_INT 0
8107: PPUSH
8108: PPUSH
8109: PPUSH
8110: PPUSH
8111: PPUSH
8112: PPUSH
8113: PPUSH
8114: PPUSH
8115: PPUSH
8116: PPUSH
// l_depot := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
8117: LD_ADDR_VAR 0 6
8121: PUSH
8122: LD_INT 22
8124: PUSH
8125: LD_INT 8
8127: PUSH
8128: EMPTY
8129: LIST
8130: LIST
8131: PUSH
8132: LD_INT 30
8134: PUSH
8135: LD_INT 1
8137: PUSH
8138: EMPTY
8139: LIST
8140: LIST
8141: PUSH
8142: EMPTY
8143: LIST
8144: LIST
8145: PPUSH
8146: CALL_OW 69
8150: PUSH
8151: LD_INT 1
8153: ARRAY
8154: ST_TO_ADDR
// l_factory := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
8155: LD_ADDR_VAR 0 8
8159: PUSH
8160: LD_INT 22
8162: PUSH
8163: LD_INT 8
8165: PUSH
8166: EMPTY
8167: LIST
8168: LIST
8169: PUSH
8170: LD_INT 30
8172: PUSH
8173: LD_INT 3
8175: PUSH
8176: EMPTY
8177: LIST
8178: LIST
8179: PUSH
8180: EMPTY
8181: LIST
8182: LIST
8183: PPUSH
8184: CALL_OW 69
8188: PUSH
8189: LD_INT 1
8191: ARRAY
8192: ST_TO_ADDR
// l_lab := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ;
8193: LD_ADDR_VAR 0 9
8197: PUSH
8198: LD_INT 22
8200: PUSH
8201: LD_INT 8
8203: PUSH
8204: EMPTY
8205: LIST
8206: LIST
8207: PUSH
8208: LD_INT 2
8210: PUSH
8211: LD_INT 30
8213: PUSH
8214: LD_INT 6
8216: PUSH
8217: EMPTY
8218: LIST
8219: LIST
8220: PUSH
8221: LD_INT 30
8223: PUSH
8224: LD_INT 8
8226: PUSH
8227: EMPTY
8228: LIST
8229: LIST
8230: PUSH
8231: EMPTY
8232: LIST
8233: LIST
8234: LIST
8235: PUSH
8236: EMPTY
8237: LIST
8238: LIST
8239: PPUSH
8240: CALL_OW 69
8244: PUSH
8245: LD_INT 1
8247: ARRAY
8248: ST_TO_ADDR
// l_towers := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) ;
8249: LD_ADDR_VAR 0 10
8253: PUSH
8254: LD_INT 22
8256: PUSH
8257: LD_INT 8
8259: PUSH
8260: EMPTY
8261: LIST
8262: LIST
8263: PUSH
8264: LD_INT 30
8266: PUSH
8267: LD_INT 32
8269: PUSH
8270: EMPTY
8271: LIST
8272: LIST
8273: PUSH
8274: EMPTY
8275: LIST
8276: LIST
8277: PPUSH
8278: CALL_OW 69
8282: ST_TO_ADDR
// uc_side := 8 ;
8283: LD_ADDR_OWVAR 20
8287: PUSH
8288: LD_INT 8
8290: ST_TO_ADDR
// uc_nation := nation_arabian ;
8291: LD_ADDR_OWVAR 21
8295: PUSH
8296: LD_INT 2
8298: ST_TO_ADDR
// legion_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
8299: LD_ADDR_EXP 38
8303: PUSH
8304: LD_INT 5
8306: PUSH
8307: LD_INT 6
8309: PUSH
8310: LD_INT 7
8312: PUSH
8313: EMPTY
8314: LIST
8315: LIST
8316: LIST
8317: PUSH
8318: LD_OWVAR 67
8322: ARRAY
8323: ST_TO_ADDR
// legion_blist := [ ] ;
8324: LD_ADDR_EXP 40
8328: PUSH
8329: EMPTY
8330: ST_TO_ADDR
// legion_vlist := [ ] ;
8331: LD_ADDR_EXP 41
8335: PUSH
8336: EMPTY
8337: ST_TO_ADDR
// legion_force := [ ] ;
8338: LD_ADDR_EXP 37
8342: PUSH
8343: EMPTY
8344: ST_TO_ADDR
// legion_enemy := - 1 ;
8345: LD_ADDR_EXP 42
8349: PUSH
8350: LD_INT 1
8352: NEG
8353: ST_TO_ADDR
// SetResourceType ( GetBase ( l_depot ) , mat_cans , 10000 ) ;
8354: LD_VAR 0 6
8358: PPUSH
8359: CALL_OW 274
8363: PPUSH
8364: LD_INT 1
8366: PPUSH
8367: LD_INT 10000
8369: PPUSH
8370: CALL_OW 277
// SetResourceType ( GetBase ( l_depot ) , 3 , 1000 ) ;
8374: LD_VAR 0 6
8378: PPUSH
8379: CALL_OW 274
8383: PPUSH
8384: LD_INT 3
8386: PPUSH
8387: LD_INT 1000
8389: PPUSH
8390: CALL_OW 277
// for i = 1 to l_towers do
8394: LD_ADDR_VAR 0 3
8398: PUSH
8399: DOUBLE
8400: LD_INT 1
8402: DEC
8403: ST_TO_ADDR
8404: LD_VAR 0 10
8408: PUSH
8409: FOR_TO
8410: IFFALSE 8459
// begin PrepareHuman ( false , 1 , legion_skill ) ;
8412: LD_INT 0
8414: PPUSH
8415: LD_INT 1
8417: PPUSH
8418: LD_EXP 38
8422: PPUSH
8423: CALL_OW 380
// un := CreateHuman ;
8427: LD_ADDR_VAR 0 2
8431: PUSH
8432: CALL_OW 44
8436: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_towers [ i ] ) ;
8437: LD_VAR 0 2
8441: PPUSH
8442: LD_VAR 0 10
8446: PUSH
8447: LD_VAR 0 3
8451: ARRAY
8452: PPUSH
8453: CALL_OW 52
// end ;
8457: GO 8409
8459: POP
8460: POP
// for i = 1 to 4 do
8461: LD_ADDR_VAR 0 3
8465: PUSH
8466: DOUBLE
8467: LD_INT 1
8469: DEC
8470: ST_TO_ADDR
8471: LD_INT 4
8473: PUSH
8474: FOR_TO
8475: IFFALSE 8568
// for p = 1 to 2 do
8477: LD_ADDR_VAR 0 7
8481: PUSH
8482: DOUBLE
8483: LD_INT 1
8485: DEC
8486: ST_TO_ADDR
8487: LD_INT 2
8489: PUSH
8490: FOR_TO
8491: IFFALSE 8564
// begin PrepareHuman ( false , class_mortar , legion_skill ) ;
8493: LD_INT 0
8495: PPUSH
8496: LD_INT 8
8498: PPUSH
8499: LD_EXP 38
8503: PPUSH
8504: CALL_OW 380
// un := CreateHuman ;
8508: LD_ADDR_VAR 0 2
8512: PUSH
8513: CALL_OW 44
8517: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_barracks ] ] ) [ p ] ) ;
8518: LD_VAR 0 2
8522: PPUSH
8523: LD_INT 22
8525: PUSH
8526: LD_INT 8
8528: PUSH
8529: EMPTY
8530: LIST
8531: LIST
8532: PUSH
8533: LD_INT 30
8535: PUSH
8536: LD_INT 5
8538: PUSH
8539: EMPTY
8540: LIST
8541: LIST
8542: PUSH
8543: EMPTY
8544: LIST
8545: LIST
8546: PPUSH
8547: CALL_OW 69
8551: PUSH
8552: LD_VAR 0 7
8556: ARRAY
8557: PPUSH
8558: CALL_OW 52
// end ;
8562: GO 8490
8564: POP
8565: POP
8566: GO 8474
8568: POP
8569: POP
// for i = 1 to 4 do
8570: LD_ADDR_VAR 0 3
8574: PUSH
8575: DOUBLE
8576: LD_INT 1
8578: DEC
8579: ST_TO_ADDR
8580: LD_INT 4
8582: PUSH
8583: FOR_TO
8584: IFFALSE 8627
// begin PrepareHuman ( false , 4 , legion_skill ) ;
8586: LD_INT 0
8588: PPUSH
8589: LD_INT 4
8591: PPUSH
8592: LD_EXP 38
8596: PPUSH
8597: CALL_OW 380
// un := CreateHuman ;
8601: LD_ADDR_VAR 0 2
8605: PUSH
8606: CALL_OW 44
8610: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_lab ) ;
8611: LD_VAR 0 2
8615: PPUSH
8616: LD_VAR 0 9
8620: PPUSH
8621: CALL_OW 52
// end ;
8625: GO 8583
8627: POP
8628: POP
// for i = 1 to 4 do
8629: LD_ADDR_VAR 0 3
8633: PUSH
8634: DOUBLE
8635: LD_INT 1
8637: DEC
8638: ST_TO_ADDR
8639: LD_INT 4
8641: PUSH
8642: FOR_TO
8643: IFFALSE 8686
// begin PrepareHuman ( false , 3 , legion_skill ) ;
8645: LD_INT 0
8647: PPUSH
8648: LD_INT 3
8650: PPUSH
8651: LD_EXP 38
8655: PPUSH
8656: CALL_OW 380
// un := CreateHuman ;
8660: LD_ADDR_VAR 0 2
8664: PUSH
8665: CALL_OW 44
8669: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_factory ) ;
8670: LD_VAR 0 2
8674: PPUSH
8675: LD_VAR 0 8
8679: PPUSH
8680: CALL_OW 52
// end ;
8684: GO 8642
8686: POP
8687: POP
// for i = 1 to 3 do
8688: LD_ADDR_VAR 0 3
8692: PUSH
8693: DOUBLE
8694: LD_INT 1
8696: DEC
8697: ST_TO_ADDR
8698: LD_INT 3
8700: PUSH
8701: FOR_TO
8702: IFFALSE 8745
// begin PrepareHuman ( false , 2 , legion_skill ) ;
8704: LD_INT 0
8706: PPUSH
8707: LD_INT 2
8709: PPUSH
8710: LD_EXP 38
8714: PPUSH
8715: CALL_OW 380
// un := CreateHuman ;
8719: LD_ADDR_VAR 0 2
8723: PUSH
8724: CALL_OW 44
8728: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_depot ) ;
8729: LD_VAR 0 2
8733: PPUSH
8734: LD_VAR 0 6
8738: PPUSH
8739: CALL_OW 52
// end ;
8743: GO 8701
8745: POP
8746: POP
// for i = 1 to 3 do
8747: LD_ADDR_VAR 0 3
8751: PUSH
8752: DOUBLE
8753: LD_INT 1
8755: DEC
8756: ST_TO_ADDR
8757: LD_INT 3
8759: PUSH
8760: FOR_TO
8761: IFFALSE 8871
// begin vc_chassis := ar_half_tracked ;
8763: LD_ADDR_OWVAR 37
8767: PUSH
8768: LD_INT 14
8770: ST_TO_ADDR
// vc_engine := engine_siberite ;
8771: LD_ADDR_OWVAR 39
8775: PUSH
8776: LD_INT 3
8778: ST_TO_ADDR
// vc_control := control_manual ;
8779: LD_ADDR_OWVAR 38
8783: PUSH
8784: LD_INT 1
8786: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
8787: LD_ADDR_OWVAR 40
8791: PUSH
8792: LD_INT 31
8794: ST_TO_ADDR
// veh := CreateVehicle ;
8795: LD_ADDR_VAR 0 5
8799: PUSH
8800: CALL_OW 45
8804: ST_TO_ADDR
// PlaceUnitXYR ( veh , 212 , 135 , 5 , false ) ;
8805: LD_VAR 0 5
8809: PPUSH
8810: LD_INT 212
8812: PPUSH
8813: LD_INT 135
8815: PPUSH
8816: LD_INT 5
8818: PPUSH
8819: LD_INT 0
8821: PPUSH
8822: CALL_OW 50
// PrepareHuman ( false , 3 , legion_skill + 1 ) ;
8826: LD_INT 0
8828: PPUSH
8829: LD_INT 3
8831: PPUSH
8832: LD_EXP 38
8836: PUSH
8837: LD_INT 1
8839: PLUS
8840: PPUSH
8841: CALL_OW 380
// un := CreateHuman ;
8845: LD_ADDR_VAR 0 2
8849: PUSH
8850: CALL_OW 44
8854: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8855: LD_VAR 0 2
8859: PPUSH
8860: LD_VAR 0 5
8864: PPUSH
8865: CALL_OW 52
// end ;
8869: GO 8760
8871: POP
8872: POP
// PrepareSoldier ( false , 8 ) ;
8873: LD_INT 0
8875: PPUSH
8876: LD_INT 8
8878: PPUSH
8879: CALL_OW 381
// hc_class := class_sniper ;
8883: LD_ADDR_OWVAR 28
8887: PUSH
8888: LD_INT 5
8890: ST_TO_ADDR
// un := CreateHuman ;
8891: LD_ADDR_VAR 0 2
8895: PUSH
8896: CALL_OW 44
8900: ST_TO_ADDR
// SetDir ( un , 4 ) ;
8901: LD_VAR 0 2
8905: PPUSH
8906: LD_INT 4
8908: PPUSH
8909: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( 136 , 92 ) ) ;
8913: LD_VAR 0 2
8917: PPUSH
8918: LD_INT 136
8920: PPUSH
8921: LD_INT 92
8923: PPUSH
8924: CALL_OW 428
8928: PPUSH
8929: CALL_OW 52
// PlaceSeeing ( 198 , 94 , 8 , 10 ) ;
8933: LD_INT 198
8935: PPUSH
8936: LD_INT 94
8938: PPUSH
8939: LD_INT 8
8941: PPUSH
8942: LD_INT 10
8944: PPUSH
8945: CALL_OW 330
// PlaceSeeing ( 167 , 130 , 8 , 10 ) ;
8949: LD_INT 167
8951: PPUSH
8952: LD_INT 130
8954: PPUSH
8955: LD_INT 8
8957: PPUSH
8958: LD_INT 10
8960: PPUSH
8961: CALL_OW 330
// tmp := AreaToList ( legion_mines_area , 0 ) ;
8965: LD_ADDR_VAR 0 4
8969: PUSH
8970: LD_INT 24
8972: PPUSH
8973: LD_INT 0
8975: PPUSH
8976: CALL_OW 517
8980: ST_TO_ADDR
// legion_mines := [ ] ;
8981: LD_ADDR_EXP 39
8985: PUSH
8986: EMPTY
8987: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
8988: LD_ADDR_VAR 0 3
8992: PUSH
8993: DOUBLE
8994: LD_INT 1
8996: DEC
8997: ST_TO_ADDR
8998: LD_VAR 0 4
9002: PUSH
9003: LD_INT 1
9005: ARRAY
9006: PUSH
9007: FOR_TO
9008: IFFALSE 9110
// begin PlaceMine ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 8 , 0 ) ;
9010: LD_VAR 0 4
9014: PUSH
9015: LD_INT 1
9017: ARRAY
9018: PUSH
9019: LD_VAR 0 3
9023: ARRAY
9024: PPUSH
9025: LD_VAR 0 4
9029: PUSH
9030: LD_INT 2
9032: ARRAY
9033: PUSH
9034: LD_VAR 0 3
9038: ARRAY
9039: PPUSH
9040: LD_INT 8
9042: PPUSH
9043: LD_INT 0
9045: PPUSH
9046: CALL_OW 454
// legion_mines := Replace ( legion_mines , legion_mines + 1 , [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ) ;
9050: LD_ADDR_EXP 39
9054: PUSH
9055: LD_EXP 39
9059: PPUSH
9060: LD_EXP 39
9064: PUSH
9065: LD_INT 1
9067: PLUS
9068: PPUSH
9069: LD_VAR 0 4
9073: PUSH
9074: LD_INT 1
9076: ARRAY
9077: PUSH
9078: LD_VAR 0 3
9082: ARRAY
9083: PUSH
9084: LD_VAR 0 4
9088: PUSH
9089: LD_INT 2
9091: ARRAY
9092: PUSH
9093: LD_VAR 0 3
9097: ARRAY
9098: PUSH
9099: EMPTY
9100: LIST
9101: LIST
9102: PPUSH
9103: CALL_OW 1
9107: ST_TO_ADDR
// end ;
9108: GO 9007
9110: POP
9111: POP
// legion_vlist := [ ar_medium_trike , 3 , control_remote , ar_cargo_bay ] ;
9112: LD_ADDR_EXP 41
9116: PUSH
9117: LD_INT 13
9119: PUSH
9120: LD_INT 3
9122: PUSH
9123: LD_INT 2
9125: PUSH
9126: LD_INT 32
9128: PUSH
9129: EMPTY
9130: LIST
9131: LIST
9132: LIST
9133: LIST
9134: ST_TO_ADDR
// end ;
9135: LD_VAR 0 1
9139: RET
// every 0 0$1 trigger legion_mines and FilterUnitsInArea ( legion_mines_area , [ f_side , your_side ] ) do var i , un ;
9140: LD_EXP 39
9144: PUSH
9145: LD_INT 24
9147: PPUSH
9148: LD_INT 22
9150: PUSH
9151: LD_OWVAR 2
9155: PUSH
9156: EMPTY
9157: LIST
9158: LIST
9159: PPUSH
9160: CALL_OW 70
9164: AND
9165: IFFALSE 9332
9167: GO 9169
9169: DISABLE
9170: LD_INT 0
9172: PPUSH
9173: PPUSH
// begin enable ;
9174: ENABLE
// for i := legion_mines downto 1 do
9175: LD_ADDR_VAR 0 1
9179: PUSH
9180: DOUBLE
9181: LD_EXP 39
9185: INC
9186: ST_TO_ADDR
9187: LD_INT 1
9189: PUSH
9190: FOR_DOWNTO
9191: IFFALSE 9330
// begin un := HexInfo ( legion_mines [ i ] [ 1 ] , legion_mines [ i ] [ 2 ] ) ;
9193: LD_ADDR_VAR 0 2
9197: PUSH
9198: LD_EXP 39
9202: PUSH
9203: LD_VAR 0 1
9207: ARRAY
9208: PUSH
9209: LD_INT 1
9211: ARRAY
9212: PPUSH
9213: LD_EXP 39
9217: PUSH
9218: LD_VAR 0 1
9222: ARRAY
9223: PUSH
9224: LD_INT 2
9226: ARRAY
9227: PPUSH
9228: CALL_OW 428
9232: ST_TO_ADDR
// if un then
9233: LD_VAR 0 2
9237: IFFALSE 9328
// if GetSide ( un ) = legion_enemy then
9239: LD_VAR 0 2
9243: PPUSH
9244: CALL_OW 255
9248: PUSH
9249: LD_EXP 42
9253: EQUAL
9254: IFFALSE 9328
// begin LaunchMineAtPos ( legion_mines [ i ] [ 1 ] , legion_mines [ i ] [ 2 ] , 8 ) ;
9256: LD_EXP 39
9260: PUSH
9261: LD_VAR 0 1
9265: ARRAY
9266: PUSH
9267: LD_INT 1
9269: ARRAY
9270: PPUSH
9271: LD_EXP 39
9275: PUSH
9276: LD_VAR 0 1
9280: ARRAY
9281: PUSH
9282: LD_INT 2
9284: ARRAY
9285: PPUSH
9286: LD_INT 8
9288: PPUSH
9289: CALL_OW 456
// legion_mines := Delete ( legion_mines , i ) ;
9293: LD_ADDR_EXP 39
9297: PUSH
9298: LD_EXP 39
9302: PPUSH
9303: LD_VAR 0 1
9307: PPUSH
9308: CALL_OW 3
9312: ST_TO_ADDR
// if not mine_vulc then
9313: LD_EXP 13
9317: NOT
9318: IFFALSE 9328
// mine_vulc := true ;
9320: LD_ADDR_EXP 13
9324: PUSH
9325: LD_INT 1
9327: ST_TO_ADDR
// end ; end ;
9328: GO 9190
9330: POP
9331: POP
// end ;
9332: PPOPN 2
9334: END
// every 0 0$1 trigger tick >= [ 25 25$00 , 22 22$00 , 20 20$00 ] [ Difficulty ] do var artifact , un ;
9335: LD_OWVAR 1
9339: PUSH
9340: LD_INT 52500
9342: PUSH
9343: LD_INT 46200
9345: PUSH
9346: LD_INT 42000
9348: PUSH
9349: EMPTY
9350: LIST
9351: LIST
9352: LIST
9353: PUSH
9354: LD_OWVAR 67
9358: ARRAY
9359: GREATEREQUAL
9360: IFFALSE 9538
9362: GO 9364
9364: DISABLE
9365: LD_INT 0
9367: PPUSH
9368: PPUSH
// begin artifact := FindArtifact ( 1 ) ;
9369: LD_ADDR_VAR 0 1
9373: PUSH
9374: LD_INT 1
9376: PPUSH
9377: CALL_OW 469
9381: ST_TO_ADDR
// if artifact [ 1 ] = 112 and artifact [ 2 ] = 67 then
9382: LD_VAR 0 1
9386: PUSH
9387: LD_INT 1
9389: ARRAY
9390: PUSH
9391: LD_INT 112
9393: EQUAL
9394: PUSH
9395: LD_VAR 0 1
9399: PUSH
9400: LD_INT 2
9402: ARRAY
9403: PUSH
9404: LD_INT 67
9406: EQUAL
9407: AND
9408: IFFALSE 9538
// begin un := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 2 ] ] ) ;
9410: LD_ADDR_VAR 0 2
9414: PUSH
9415: LD_INT 22
9417: PUSH
9418: LD_INT 8
9420: PUSH
9421: EMPTY
9422: LIST
9423: LIST
9424: PUSH
9425: LD_INT 25
9427: PUSH
9428: LD_INT 2
9430: PUSH
9431: EMPTY
9432: LIST
9433: LIST
9434: PUSH
9435: EMPTY
9436: LIST
9437: LIST
9438: PPUSH
9439: CALL_OW 69
9443: ST_TO_ADDR
// if not un then
9444: LD_VAR 0 2
9448: NOT
9449: IFFALSE 9453
// exit ;
9451: GO 9538
// un := un [ 1 ] ;
9453: LD_ADDR_VAR 0 2
9457: PUSH
9458: LD_VAR 0 2
9462: PUSH
9463: LD_INT 1
9465: ARRAY
9466: ST_TO_ADDR
// if IsInUnit ( un ) then
9467: LD_VAR 0 2
9471: PPUSH
9472: CALL_OW 310
9476: IFFALSE 9487
// ComExitBuilding ( un ) ;
9478: LD_VAR 0 2
9482: PPUSH
9483: CALL_OW 122
// AddComCollect ( un , artifact [ 1 ] , artifact [ 2 ] ) ;
9487: LD_VAR 0 2
9491: PPUSH
9492: LD_VAR 0 1
9496: PUSH
9497: LD_INT 1
9499: ARRAY
9500: PPUSH
9501: LD_VAR 0 1
9505: PUSH
9506: LD_INT 2
9508: ARRAY
9509: PPUSH
9510: CALL_OW 177
// AddComMoveXY ( un , 207 , 123 ) ;
9514: LD_VAR 0 2
9518: PPUSH
9519: LD_INT 207
9521: PPUSH
9522: LD_INT 123
9524: PPUSH
9525: CALL_OW 171
// AddComUnload ( un ) ;
9529: LD_VAR 0 2
9533: PPUSH
9534: CALL_OW 219
// end ; end ;
9538: PPOPN 2
9540: END
// every 0 0$02 trigger FilterAllUnits ( [ f_side , 8 ] ) > 0 do var un , i , tmp , veh , b , p , cr , l_depot , l_factory , l_lab , l_towers , l_sib , l_sci , l_mech , l_sold , l_eng , l_cargo ;
9541: LD_INT 22
9543: PUSH
9544: LD_INT 8
9546: PUSH
9547: EMPTY
9548: LIST
9549: LIST
9550: PPUSH
9551: CALL_OW 69
9555: PUSH
9556: LD_INT 0
9558: GREATER
9559: IFFALSE 11145
9561: GO 9563
9563: DISABLE
9564: LD_INT 0
9566: PPUSH
9567: PPUSH
9568: PPUSH
9569: PPUSH
9570: PPUSH
9571: PPUSH
9572: PPUSH
9573: PPUSH
9574: PPUSH
9575: PPUSH
9576: PPUSH
9577: PPUSH
9578: PPUSH
9579: PPUSH
9580: PPUSH
9581: PPUSH
9582: PPUSH
// begin enable ;
9583: ENABLE
// l_depot := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
9584: LD_ADDR_VAR 0 8
9588: PUSH
9589: LD_INT 22
9591: PUSH
9592: LD_INT 8
9594: PUSH
9595: EMPTY
9596: LIST
9597: LIST
9598: PUSH
9599: LD_INT 30
9601: PUSH
9602: LD_INT 1
9604: PUSH
9605: EMPTY
9606: LIST
9607: LIST
9608: PUSH
9609: EMPTY
9610: LIST
9611: LIST
9612: PPUSH
9613: CALL_OW 69
9617: PUSH
9618: LD_INT 1
9620: ARRAY
9621: ST_TO_ADDR
// l_factory := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
9622: LD_ADDR_VAR 0 9
9626: PUSH
9627: LD_INT 22
9629: PUSH
9630: LD_INT 8
9632: PUSH
9633: EMPTY
9634: LIST
9635: LIST
9636: PUSH
9637: LD_INT 30
9639: PUSH
9640: LD_INT 3
9642: PUSH
9643: EMPTY
9644: LIST
9645: LIST
9646: PUSH
9647: EMPTY
9648: LIST
9649: LIST
9650: PPUSH
9651: CALL_OW 69
9655: PUSH
9656: LD_INT 1
9658: ARRAY
9659: ST_TO_ADDR
// l_lab := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ;
9660: LD_ADDR_VAR 0 10
9664: PUSH
9665: LD_INT 22
9667: PUSH
9668: LD_INT 8
9670: PUSH
9671: EMPTY
9672: LIST
9673: LIST
9674: PUSH
9675: LD_INT 2
9677: PUSH
9678: LD_INT 30
9680: PUSH
9681: LD_INT 6
9683: PUSH
9684: EMPTY
9685: LIST
9686: LIST
9687: PUSH
9688: LD_INT 30
9690: PUSH
9691: LD_INT 8
9693: PUSH
9694: EMPTY
9695: LIST
9696: LIST
9697: PUSH
9698: EMPTY
9699: LIST
9700: LIST
9701: LIST
9702: PUSH
9703: EMPTY
9704: LIST
9705: LIST
9706: PPUSH
9707: CALL_OW 69
9711: PUSH
9712: LD_INT 1
9714: ARRAY
9715: ST_TO_ADDR
// l_towers := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) ;
9716: LD_ADDR_VAR 0 11
9720: PUSH
9721: LD_INT 22
9723: PUSH
9724: LD_INT 8
9726: PUSH
9727: EMPTY
9728: LIST
9729: LIST
9730: PUSH
9731: LD_INT 30
9733: PUSH
9734: LD_INT 32
9736: PUSH
9737: EMPTY
9738: LIST
9739: LIST
9740: PUSH
9741: EMPTY
9742: LIST
9743: LIST
9744: PPUSH
9745: CALL_OW 69
9749: ST_TO_ADDR
// l_eng := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 2 ] ] ) ;
9750: LD_ADDR_VAR 0 16
9754: PUSH
9755: LD_INT 22
9757: PUSH
9758: LD_INT 8
9760: PUSH
9761: EMPTY
9762: LIST
9763: LIST
9764: PUSH
9765: LD_INT 25
9767: PUSH
9768: LD_INT 2
9770: PUSH
9771: EMPTY
9772: LIST
9773: LIST
9774: PUSH
9775: EMPTY
9776: LIST
9777: LIST
9778: PPUSH
9779: CALL_OW 69
9783: ST_TO_ADDR
// l_sold := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 1 ] ] ) ;
9784: LD_ADDR_VAR 0 15
9788: PUSH
9789: LD_INT 22
9791: PUSH
9792: LD_INT 8
9794: PUSH
9795: EMPTY
9796: LIST
9797: LIST
9798: PUSH
9799: LD_INT 25
9801: PUSH
9802: LD_INT 1
9804: PUSH
9805: EMPTY
9806: LIST
9807: LIST
9808: PUSH
9809: EMPTY
9810: LIST
9811: LIST
9812: PPUSH
9813: CALL_OW 69
9817: ST_TO_ADDR
// l_mech := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 3 ] ] ) ;
9818: LD_ADDR_VAR 0 14
9822: PUSH
9823: LD_INT 22
9825: PUSH
9826: LD_INT 8
9828: PUSH
9829: EMPTY
9830: LIST
9831: LIST
9832: PUSH
9833: LD_INT 25
9835: PUSH
9836: LD_INT 3
9838: PUSH
9839: EMPTY
9840: LIST
9841: LIST
9842: PUSH
9843: EMPTY
9844: LIST
9845: LIST
9846: PPUSH
9847: CALL_OW 69
9851: ST_TO_ADDR
// l_sci := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 4 ] ] ) ;
9852: LD_ADDR_VAR 0 13
9856: PUSH
9857: LD_INT 22
9859: PUSH
9860: LD_INT 8
9862: PUSH
9863: EMPTY
9864: LIST
9865: LIST
9866: PUSH
9867: LD_INT 25
9869: PUSH
9870: LD_INT 4
9872: PUSH
9873: EMPTY
9874: LIST
9875: LIST
9876: PUSH
9877: EMPTY
9878: LIST
9879: LIST
9880: PPUSH
9881: CALL_OW 69
9885: ST_TO_ADDR
// if l_eng then
9886: LD_VAR 0 16
9890: IFFALSE 10308
// begin b := FilterUnitsInArea ( legion_base_area , [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) ;
9892: LD_ADDR_VAR 0 5
9896: PUSH
9897: LD_INT 25
9899: PPUSH
9900: LD_INT 22
9902: PUSH
9903: LD_INT 8
9905: PUSH
9906: EMPTY
9907: LIST
9908: LIST
9909: PUSH
9910: LD_INT 21
9912: PUSH
9913: LD_INT 3
9915: PUSH
9916: EMPTY
9917: LIST
9918: LIST
9919: PUSH
9920: EMPTY
9921: LIST
9922: LIST
9923: PPUSH
9924: CALL_OW 70
9928: ST_TO_ADDR
// if UnitFilter ( b , [ f_not , [ f_lives , 1000 ] ] ) > 0 then
9929: LD_VAR 0 5
9933: PPUSH
9934: LD_INT 3
9936: PUSH
9937: LD_INT 24
9939: PUSH
9940: LD_INT 1000
9942: PUSH
9943: EMPTY
9944: LIST
9945: LIST
9946: PUSH
9947: EMPTY
9948: LIST
9949: LIST
9950: PPUSH
9951: CALL_OW 72
9955: PUSH
9956: LD_INT 0
9958: GREATER
9959: IFFALSE 10093
// begin tmp := UnitFilter ( b , [ f_not , [ f_lives , 1000 ] ] ) ;
9961: LD_ADDR_VAR 0 3
9965: PUSH
9966: LD_VAR 0 5
9970: PPUSH
9971: LD_INT 3
9973: PUSH
9974: LD_INT 24
9976: PUSH
9977: LD_INT 1000
9979: PUSH
9980: EMPTY
9981: LIST
9982: LIST
9983: PUSH
9984: EMPTY
9985: LIST
9986: LIST
9987: PPUSH
9988: CALL_OW 72
9992: ST_TO_ADDR
// for i = 1 to l_eng do
9993: LD_ADDR_VAR 0 2
9997: PUSH
9998: DOUBLE
9999: LD_INT 1
10001: DEC
10002: ST_TO_ADDR
10003: LD_VAR 0 16
10007: PUSH
10008: FOR_TO
10009: IFFALSE 10089
// if IsInUnit ( l_eng [ i ] ) then
10011: LD_VAR 0 16
10015: PUSH
10016: LD_VAR 0 2
10020: ARRAY
10021: PPUSH
10022: CALL_OW 310
10026: IFFALSE 10045
// ComExitBuilding ( l_eng [ i ] ) else
10028: LD_VAR 0 16
10032: PUSH
10033: LD_VAR 0 2
10037: ARRAY
10038: PPUSH
10039: CALL_OW 122
10043: GO 10087
// if not HasTask ( l_eng [ i ] ) then
10045: LD_VAR 0 16
10049: PUSH
10050: LD_VAR 0 2
10054: ARRAY
10055: PPUSH
10056: CALL_OW 314
10060: NOT
10061: IFFALSE 10087
// ComRepairBuilding ( l_eng [ i ] , tmp [ 1 ] ) ;
10063: LD_VAR 0 16
10067: PUSH
10068: LD_VAR 0 2
10072: ARRAY
10073: PPUSH
10074: LD_VAR 0 3
10078: PUSH
10079: LD_INT 1
10081: ARRAY
10082: PPUSH
10083: CALL_OW 130
10087: GO 10008
10089: POP
10090: POP
// end else
10091: GO 10308
// begin if legion_blist > 0 then
10093: LD_EXP 40
10097: PUSH
10098: LD_INT 0
10100: GREATER
10101: IFFALSE 10230
// begin for i = 1 to l_eng do
10103: LD_ADDR_VAR 0 2
10107: PUSH
10108: DOUBLE
10109: LD_INT 1
10111: DEC
10112: ST_TO_ADDR
10113: LD_VAR 0 16
10117: PUSH
10118: FOR_TO
10119: IFFALSE 10226
// if IsInUnit ( l_eng [ i ] ) then
10121: LD_VAR 0 16
10125: PUSH
10126: LD_VAR 0 2
10130: ARRAY
10131: PPUSH
10132: CALL_OW 310
10136: IFFALSE 10155
// ComExitBuilding ( l_eng [ i ] ) else
10138: LD_VAR 0 16
10142: PUSH
10143: LD_VAR 0 2
10147: ARRAY
10148: PPUSH
10149: CALL_OW 122
10153: GO 10224
// if not HasTask ( l_eng [ i ] ) then
10155: LD_VAR 0 16
10159: PUSH
10160: LD_VAR 0 2
10164: ARRAY
10165: PPUSH
10166: CALL_OW 314
10170: NOT
10171: IFFALSE 10224
// ComBuild ( l_eng [ i ] , legion_blist [ 1 ] , legion_blist [ 2 ] , legion_blist [ 3 ] , legion_blist [ 4 ] ) ;
10173: LD_VAR 0 16
10177: PUSH
10178: LD_VAR 0 2
10182: ARRAY
10183: PPUSH
10184: LD_EXP 40
10188: PUSH
10189: LD_INT 1
10191: ARRAY
10192: PPUSH
10193: LD_EXP 40
10197: PUSH
10198: LD_INT 2
10200: ARRAY
10201: PPUSH
10202: LD_EXP 40
10206: PUSH
10207: LD_INT 3
10209: ARRAY
10210: PPUSH
10211: LD_EXP 40
10215: PUSH
10216: LD_INT 4
10218: ARRAY
10219: PPUSH
10220: CALL_OW 145
10224: GO 10118
10226: POP
10227: POP
// end else
10228: GO 10308
// for i = 1 to l_eng do
10230: LD_ADDR_VAR 0 2
10234: PUSH
10235: DOUBLE
10236: LD_INT 1
10238: DEC
10239: ST_TO_ADDR
10240: LD_VAR 0 16
10244: PUSH
10245: FOR_TO
10246: IFFALSE 10306
// if not IsInUnit ( l_eng [ i ] ) and not HasTask ( l_eng [ i ] ) then
10248: LD_VAR 0 16
10252: PUSH
10253: LD_VAR 0 2
10257: ARRAY
10258: PPUSH
10259: CALL_OW 310
10263: NOT
10264: PUSH
10265: LD_VAR 0 16
10269: PUSH
10270: LD_VAR 0 2
10274: ARRAY
10275: PPUSH
10276: CALL_OW 314
10280: NOT
10281: AND
10282: IFFALSE 10304
// ComEnterUnit ( l_eng [ i ] , l_depot ) ;
10284: LD_VAR 0 16
10288: PUSH
10289: LD_VAR 0 2
10293: ARRAY
10294: PPUSH
10295: LD_VAR 0 8
10299: PPUSH
10300: CALL_OW 120
10304: GO 10245
10306: POP
10307: POP
// end ; end ; if l_factory then
10308: LD_VAR 0 9
10312: IFFALSE 10712
// begin if FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) > 0 then
10314: LD_INT 22
10316: PUSH
10317: LD_INT 8
10319: PUSH
10320: EMPTY
10321: LIST
10322: LIST
10323: PUSH
10324: LD_INT 33
10326: PUSH
10327: LD_INT 2
10329: PUSH
10330: EMPTY
10331: LIST
10332: LIST
10333: PUSH
10334: LD_INT 3
10336: PUSH
10337: LD_INT 61
10339: PUSH
10340: EMPTY
10341: LIST
10342: PUSH
10343: EMPTY
10344: LIST
10345: LIST
10346: PUSH
10347: EMPTY
10348: LIST
10349: LIST
10350: LIST
10351: PPUSH
10352: CALL_OW 69
10356: PUSH
10357: LD_INT 0
10359: GREATER
10360: PUSH
10361: LD_INT 22
10363: PUSH
10364: LD_INT 8
10366: PUSH
10367: EMPTY
10368: LIST
10369: LIST
10370: PUSH
10371: LD_INT 34
10373: PUSH
10374: LD_INT 31
10376: PUSH
10377: EMPTY
10378: LIST
10379: LIST
10380: PUSH
10381: EMPTY
10382: LIST
10383: LIST
10384: PPUSH
10385: CALL_OW 69
10389: PUSH
10390: LD_INT 0
10392: GREATER
10393: AND
10394: IFFALSE 10514
// ComLinkTo ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) [ 1 ] , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) [ Rand ( 1 , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) ) ] ) ;
10396: LD_INT 22
10398: PUSH
10399: LD_INT 8
10401: PUSH
10402: EMPTY
10403: LIST
10404: LIST
10405: PUSH
10406: LD_INT 33
10408: PUSH
10409: LD_INT 2
10411: PUSH
10412: EMPTY
10413: LIST
10414: LIST
10415: PUSH
10416: LD_INT 3
10418: PUSH
10419: LD_INT 61
10421: PUSH
10422: EMPTY
10423: LIST
10424: PUSH
10425: EMPTY
10426: LIST
10427: LIST
10428: PUSH
10429: EMPTY
10430: LIST
10431: LIST
10432: LIST
10433: PPUSH
10434: CALL_OW 69
10438: PUSH
10439: LD_INT 1
10441: ARRAY
10442: PPUSH
10443: LD_INT 22
10445: PUSH
10446: LD_INT 8
10448: PUSH
10449: EMPTY
10450: LIST
10451: LIST
10452: PUSH
10453: LD_INT 34
10455: PUSH
10456: LD_INT 31
10458: PUSH
10459: EMPTY
10460: LIST
10461: LIST
10462: PUSH
10463: EMPTY
10464: LIST
10465: LIST
10466: PPUSH
10467: CALL_OW 69
10471: PUSH
10472: LD_INT 1
10474: PPUSH
10475: LD_INT 22
10477: PUSH
10478: LD_INT 8
10480: PUSH
10481: EMPTY
10482: LIST
10483: LIST
10484: PUSH
10485: LD_INT 34
10487: PUSH
10488: LD_INT 31
10490: PUSH
10491: EMPTY
10492: LIST
10493: LIST
10494: PUSH
10495: EMPTY
10496: LIST
10497: LIST
10498: PPUSH
10499: CALL_OW 69
10503: PPUSH
10504: CALL_OW 12
10508: ARRAY
10509: PPUSH
10510: CALL_OW 135
// if legion_vlist > 0 and BuildingStatus ( l_factory ) = bs_idle then
10514: LD_EXP 41
10518: PUSH
10519: LD_INT 0
10521: GREATER
10522: PUSH
10523: LD_VAR 0 9
10527: PPUSH
10528: CALL_OW 461
10532: PUSH
10533: LD_INT 2
10535: EQUAL
10536: AND
10537: IFFALSE 10622
// begin ComConstruct ( l_factory , legion_vlist [ 1 ] , legion_vlist [ 2 ] , legion_vlist [ 3 ] , legion_vlist [ 4 ] ) ;
10539: LD_VAR 0 9
10543: PPUSH
10544: LD_EXP 41
10548: PUSH
10549: LD_INT 1
10551: ARRAY
10552: PPUSH
10553: LD_EXP 41
10557: PUSH
10558: LD_INT 2
10560: ARRAY
10561: PPUSH
10562: LD_EXP 41
10566: PUSH
10567: LD_INT 3
10569: ARRAY
10570: PPUSH
10571: LD_EXP 41
10575: PUSH
10576: LD_INT 4
10578: ARRAY
10579: PPUSH
10580: CALL_OW 125
// for i = 1 to 4 do
10584: LD_ADDR_VAR 0 2
10588: PUSH
10589: DOUBLE
10590: LD_INT 1
10592: DEC
10593: ST_TO_ADDR
10594: LD_INT 4
10596: PUSH
10597: FOR_TO
10598: IFFALSE 10620
// legion_vlist := Delete ( legion_vlist , 1 ) ;
10600: LD_ADDR_EXP 41
10604: PUSH
10605: LD_EXP 41
10609: PPUSH
10610: LD_INT 1
10612: PPUSH
10613: CALL_OW 3
10617: ST_TO_ADDR
10618: GO 10597
10620: POP
10621: POP
// end ; if UnitFilter ( l_towers , [ f_bweapon , 0 ] ) > 0 and BuildingStatus ( l_factory ) = bs_idle then
10622: LD_VAR 0 11
10626: PPUSH
10627: LD_INT 35
10629: PUSH
10630: LD_INT 0
10632: PUSH
10633: EMPTY
10634: LIST
10635: LIST
10636: PPUSH
10637: CALL_OW 72
10641: PUSH
10642: LD_INT 0
10644: GREATER
10645: PUSH
10646: LD_VAR 0 9
10650: PPUSH
10651: CALL_OW 461
10655: PUSH
10656: LD_INT 2
10658: EQUAL
10659: AND
10660: IFFALSE 10712
// ComPlaceWeapon ( UnitFilter ( l_towers , [ f_bweapon , 0 ] ) [ 1 ] , [ ar_rocket_launcher , ar_gun ] [ Rand ( 1 , 2 ) ] ) ;
10662: LD_VAR 0 11
10666: PPUSH
10667: LD_INT 35
10669: PUSH
10670: LD_INT 0
10672: PUSH
10673: EMPTY
10674: LIST
10675: LIST
10676: PPUSH
10677: CALL_OW 72
10681: PUSH
10682: LD_INT 1
10684: ARRAY
10685: PPUSH
10686: LD_INT 28
10688: PUSH
10689: LD_INT 27
10691: PUSH
10692: EMPTY
10693: LIST
10694: LIST
10695: PUSH
10696: LD_INT 1
10698: PPUSH
10699: LD_INT 2
10701: PPUSH
10702: CALL_OW 12
10706: ARRAY
10707: PPUSH
10708: CALL_OW 148
// end ; if legion_enemy > 0 then
10712: LD_EXP 42
10716: PUSH
10717: LD_INT 0
10719: GREATER
10720: IFFALSE 11003
// begin if tick mod 11 11$00 = 0 then
10722: LD_OWVAR 1
10726: PUSH
10727: LD_INT 23100
10729: MOD
10730: PUSH
10731: LD_INT 0
10733: EQUAL
10734: IFFALSE 10984
// begin legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
10736: LD_ADDR_EXP 41
10740: PUSH
10741: LD_EXP 41
10745: PUSH
10746: LD_INT 13
10748: PUSH
10749: LD_INT 1
10751: PUSH
10752: LD_INT 2
10754: PUSH
10755: EMPTY
10756: LIST
10757: LIST
10758: LIST
10759: ADD
10760: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
10761: LD_ADDR_EXP 41
10765: PUSH
10766: LD_EXP 41
10770: PUSH
10771: LD_INT 28
10773: PUSH
10774: LD_INT 27
10776: PUSH
10777: LD_INT 29
10779: PUSH
10780: EMPTY
10781: LIST
10782: LIST
10783: LIST
10784: PUSH
10785: LD_INT 1
10787: PPUSH
10788: LD_INT 3
10790: PPUSH
10791: CALL_OW 12
10795: ARRAY
10796: ADD
10797: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
10798: LD_ADDR_EXP 41
10802: PUSH
10803: LD_EXP 41
10807: PUSH
10808: LD_INT 13
10810: PUSH
10811: LD_INT 1
10813: PUSH
10814: LD_INT 2
10816: PUSH
10817: EMPTY
10818: LIST
10819: LIST
10820: LIST
10821: ADD
10822: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
10823: LD_ADDR_EXP 41
10827: PUSH
10828: LD_EXP 41
10832: PUSH
10833: LD_INT 28
10835: PUSH
10836: LD_INT 27
10838: PUSH
10839: LD_INT 29
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: LIST
10846: PUSH
10847: LD_INT 1
10849: PPUSH
10850: LD_INT 3
10852: PPUSH
10853: CALL_OW 12
10857: ARRAY
10858: ADD
10859: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
10860: LD_ADDR_EXP 41
10864: PUSH
10865: LD_EXP 41
10869: PUSH
10870: LD_INT 13
10872: PUSH
10873: LD_INT 1
10875: PUSH
10876: LD_INT 2
10878: PUSH
10879: EMPTY
10880: LIST
10881: LIST
10882: LIST
10883: ADD
10884: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_mortar , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
10885: LD_ADDR_EXP 41
10889: PUSH
10890: LD_EXP 41
10894: PUSH
10895: LD_INT 28
10897: PUSH
10898: LD_INT 92
10900: PUSH
10901: LD_INT 29
10903: PUSH
10904: EMPTY
10905: LIST
10906: LIST
10907: LIST
10908: PUSH
10909: LD_INT 1
10911: PPUSH
10912: LD_INT 3
10914: PPUSH
10915: CALL_OW 12
10919: ARRAY
10920: ADD
10921: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
10922: LD_ADDR_EXP 41
10926: PUSH
10927: LD_EXP 41
10931: PUSH
10932: LD_INT 13
10934: PUSH
10935: LD_INT 1
10937: PUSH
10938: LD_INT 2
10940: PUSH
10941: EMPTY
10942: LIST
10943: LIST
10944: LIST
10945: ADD
10946: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
10947: LD_ADDR_EXP 41
10951: PUSH
10952: LD_EXP 41
10956: PUSH
10957: LD_INT 28
10959: PUSH
10960: LD_INT 27
10962: PUSH
10963: LD_INT 29
10965: PUSH
10966: EMPTY
10967: LIST
10968: LIST
10969: LIST
10970: PUSH
10971: LD_INT 1
10973: PPUSH
10974: LD_INT 3
10976: PPUSH
10977: CALL_OW 12
10981: ARRAY
10982: ADD
10983: ST_TO_ADDR
// end ; if legion_force >= 8 then
10984: LD_EXP 37
10988: PUSH
10989: LD_INT 8
10991: GREATEREQUAL
10992: IFFALSE 11003
// RaiseSailEvent ( event_legion_attack ) ;
10994: LD_EXP 21
10998: PPUSH
10999: CALL_OW 427
// end ; if FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_cargo_bay ] ] ) then
11003: LD_INT 22
11005: PUSH
11006: LD_INT 8
11008: PUSH
11009: EMPTY
11010: LIST
11011: LIST
11012: PUSH
11013: LD_INT 34
11015: PUSH
11016: LD_INT 32
11018: PUSH
11019: EMPTY
11020: LIST
11021: LIST
11022: PUSH
11023: EMPTY
11024: LIST
11025: LIST
11026: PPUSH
11027: CALL_OW 69
11031: IFFALSE 11145
// begin if l_cargo = false then
11033: LD_VAR 0 17
11037: PUSH
11038: LD_INT 0
11040: EQUAL
11041: IFFALSE 11077
// l_cargo := FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_cargo_bay ] ] ) ;
11043: LD_ADDR_VAR 0 17
11047: PUSH
11048: LD_INT 22
11050: PUSH
11051: LD_INT 8
11053: PUSH
11054: EMPTY
11055: LIST
11056: LIST
11057: PUSH
11058: LD_INT 34
11060: PUSH
11061: LD_INT 32
11063: PUSH
11064: EMPTY
11065: LIST
11066: LIST
11067: PUSH
11068: EMPTY
11069: LIST
11070: LIST
11071: PPUSH
11072: CALL_OW 69
11076: ST_TO_ADDR
// if l_cargo then
11077: LD_VAR 0 17
11081: IFFALSE 11145
// begin cr := GetListOfCratesInArea ( legion_crates ) ;
11083: LD_ADDR_VAR 0 7
11087: PUSH
11088: LD_INT 14
11090: PPUSH
11091: CALL_OW 435
11095: ST_TO_ADDR
// if cr > 0 then
11096: LD_VAR 0 7
11100: PUSH
11101: LD_INT 0
11103: GREATER
11104: IFFALSE 11145
// if not HasTask ( l_cargo ) then
11106: LD_VAR 0 17
11110: PPUSH
11111: CALL_OW 314
11115: NOT
11116: IFFALSE 11145
// ComCollect ( l_cargo , cr [ 1 ] , cr [ 2 ] ) ;
11118: LD_VAR 0 17
11122: PPUSH
11123: LD_VAR 0 7
11127: PUSH
11128: LD_INT 1
11130: ARRAY
11131: PPUSH
11132: LD_VAR 0 7
11136: PUSH
11137: LD_INT 2
11139: ARRAY
11140: PPUSH
11141: CALL_OW 117
// end ; end ; end ;
11145: PPOPN 17
11147: END
// every 9 9$00 trigger difficulty > 1 do var i , sci , sib , p ;
11148: LD_OWVAR 67
11152: PUSH
11153: LD_INT 1
11155: GREATER
11156: IFFALSE 11361
11158: GO 11160
11160: DISABLE
11161: LD_INT 0
11163: PPUSH
11164: PPUSH
11165: PPUSH
11166: PPUSH
// begin Wait ( Rand ( 0 0$01 , 6 6$01 ) ) ;
11167: LD_INT 35
11169: PPUSH
11170: LD_INT 12635
11172: PPUSH
11173: CALL_OW 12
11177: PPUSH
11178: CALL_OW 67
// sci := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 4 ] ] ) ;
11182: LD_ADDR_VAR 0 2
11186: PUSH
11187: LD_INT 22
11189: PUSH
11190: LD_INT 8
11192: PUSH
11193: EMPTY
11194: LIST
11195: LIST
11196: PUSH
11197: LD_INT 25
11199: PUSH
11200: LD_INT 4
11202: PUSH
11203: EMPTY
11204: LIST
11205: LIST
11206: PUSH
11207: EMPTY
11208: LIST
11209: LIST
11210: PPUSH
11211: CALL_OW 69
11215: ST_TO_ADDR
// p := 1 ;
11216: LD_ADDR_VAR 0 4
11220: PUSH
11221: LD_INT 1
11223: ST_TO_ADDR
// sib := [ 116 , 139 , 69 , 13 ] ;
11224: LD_ADDR_VAR 0 3
11228: PUSH
11229: LD_INT 116
11231: PUSH
11232: LD_INT 139
11234: PUSH
11235: LD_INT 69
11237: PUSH
11238: LD_INT 13
11240: PUSH
11241: EMPTY
11242: LIST
11243: LIST
11244: LIST
11245: LIST
11246: ST_TO_ADDR
// for i = 1 to 2 do
11247: LD_ADDR_VAR 0 1
11251: PUSH
11252: DOUBLE
11253: LD_INT 1
11255: DEC
11256: ST_TO_ADDR
11257: LD_INT 2
11259: PUSH
11260: FOR_TO
11261: IFFALSE 11359
// begin if IsInUnit ( sci [ i ] ) then
11263: LD_VAR 0 2
11267: PUSH
11268: LD_VAR 0 1
11272: ARRAY
11273: PPUSH
11274: CALL_OW 310
11278: IFFALSE 11295
// ComExitBuilding ( sci [ i ] ) ;
11280: LD_VAR 0 2
11284: PUSH
11285: LD_VAR 0 1
11289: ARRAY
11290: PPUSH
11291: CALL_OW 122
// Wait ( 0 0$03 ) ;
11295: LD_INT 105
11297: PPUSH
11298: CALL_OW 67
// ComContaminate ( sci [ i ] , sib [ p ] , sib [ p + 1 ] ) ;
11302: LD_VAR 0 2
11306: PUSH
11307: LD_VAR 0 1
11311: ARRAY
11312: PPUSH
11313: LD_VAR 0 3
11317: PUSH
11318: LD_VAR 0 4
11322: ARRAY
11323: PPUSH
11324: LD_VAR 0 3
11328: PUSH
11329: LD_VAR 0 4
11333: PUSH
11334: LD_INT 1
11336: PLUS
11337: ARRAY
11338: PPUSH
11339: CALL_OW 158
// p := p + 2 ;
11343: LD_ADDR_VAR 0 4
11347: PUSH
11348: LD_VAR 0 4
11352: PUSH
11353: LD_INT 2
11355: PLUS
11356: ST_TO_ADDR
// end ;
11357: GO 11260
11359: POP
11360: POP
// end ;
11361: PPOPN 4
11363: END
// every 3 3$30 trigger GetListOfCratesInArea ( legion_crates ) < 20 do
11364: LD_INT 14
11366: PPUSH
11367: CALL_OW 435
11371: PUSH
11372: LD_INT 20
11374: LESS
11375: IFFALSE 11402
11377: GO 11379
11379: DISABLE
// begin enable ;
11380: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , legion_crates , true ) ;
11381: LD_INT 1
11383: PPUSH
11384: LD_INT 5
11386: PPUSH
11387: CALL_OW 12
11391: PPUSH
11392: LD_INT 14
11394: PPUSH
11395: LD_INT 1
11397: PPUSH
11398: CALL_OW 55
// end ;
11402: END
// export function LegionAttack ( ) ; var path , units ; begin
11403: LD_INT 0
11405: PPUSH
11406: PPUSH
11407: PPUSH
// units := legion_force ;
11408: LD_ADDR_VAR 0 3
11412: PUSH
11413: LD_EXP 37
11417: ST_TO_ADDR
// legion_force := [ ] ;
11418: LD_ADDR_EXP 37
11422: PUSH
11423: EMPTY
11424: ST_TO_ADDR
// case legion_enemy of 1 :
11425: LD_EXP 42
11429: PUSH
11430: LD_INT 1
11432: DOUBLE
11433: EQUAL
11434: IFTRUE 11438
11436: GO 11481
11438: POP
// path := [ [ 174 , 135 ] , [ 153 , 146 ] , [ 118 , 122 ] ] ; 2 :
11439: LD_ADDR_VAR 0 2
11443: PUSH
11444: LD_INT 174
11446: PUSH
11447: LD_INT 135
11449: PUSH
11450: EMPTY
11451: LIST
11452: LIST
11453: PUSH
11454: LD_INT 153
11456: PUSH
11457: LD_INT 146
11459: PUSH
11460: EMPTY
11461: LIST
11462: LIST
11463: PUSH
11464: LD_INT 118
11466: PUSH
11467: LD_INT 122
11469: PUSH
11470: EMPTY
11471: LIST
11472: LIST
11473: PUSH
11474: EMPTY
11475: LIST
11476: LIST
11477: LIST
11478: ST_TO_ADDR
11479: GO 11584
11481: LD_INT 2
11483: DOUBLE
11484: EQUAL
11485: IFTRUE 11489
11487: GO 11532
11489: POP
// path := [ [ 164 , 73 ] , [ 130 , 48 ] , [ 96 , 48 ] ] ; 7 :
11490: LD_ADDR_VAR 0 2
11494: PUSH
11495: LD_INT 164
11497: PUSH
11498: LD_INT 73
11500: PUSH
11501: EMPTY
11502: LIST
11503: LIST
11504: PUSH
11505: LD_INT 130
11507: PUSH
11508: LD_INT 48
11510: PUSH
11511: EMPTY
11512: LIST
11513: LIST
11514: PUSH
11515: LD_INT 96
11517: PUSH
11518: LD_INT 48
11520: PUSH
11521: EMPTY
11522: LIST
11523: LIST
11524: PUSH
11525: EMPTY
11526: LIST
11527: LIST
11528: LIST
11529: ST_TO_ADDR
11530: GO 11584
11532: LD_INT 7
11534: DOUBLE
11535: EQUAL
11536: IFTRUE 11540
11538: GO 11583
11540: POP
// path := [ [ 174 , 135 ] , [ 153 , 146 ] , [ 118 , 122 ] ] ; end ;
11541: LD_ADDR_VAR 0 2
11545: PUSH
11546: LD_INT 174
11548: PUSH
11549: LD_INT 135
11551: PUSH
11552: EMPTY
11553: LIST
11554: LIST
11555: PUSH
11556: LD_INT 153
11558: PUSH
11559: LD_INT 146
11561: PUSH
11562: EMPTY
11563: LIST
11564: LIST
11565: PUSH
11566: LD_INT 118
11568: PUSH
11569: LD_INT 122
11571: PUSH
11572: EMPTY
11573: LIST
11574: LIST
11575: PUSH
11576: EMPTY
11577: LIST
11578: LIST
11579: LIST
11580: ST_TO_ADDR
11581: GO 11584
11583: POP
// repeat wait ( 0 0$1 ) ;
11584: LD_INT 35
11586: PPUSH
11587: CALL_OW 67
// until not AgressiveMove ( units , path ) ;
11591: LD_VAR 0 3
11595: PPUSH
11596: LD_VAR 0 2
11600: PPUSH
11601: CALL 79789 0 2
11605: NOT
11606: IFFALSE 11584
// end ; end_of_file
11608: LD_VAR 0 1
11612: RET
// export function Action ; var un , gamemode , speaker ; begin
11613: LD_INT 0
11615: PPUSH
11616: PPUSH
11617: PPUSH
11618: PPUSH
// if debug then
11619: LD_EXP 15
11623: IFFALSE 11650
// begin Difficulty := 2 ;
11625: LD_ADDR_OWVAR 67
11629: PUSH
11630: LD_INT 2
11632: ST_TO_ADDR
// gamemode := 3 ;
11633: LD_ADDR_VAR 0 3
11637: PUSH
11638: LD_INT 3
11640: ST_TO_ADDR
// FogOff ( 7 ) ;
11641: LD_INT 7
11643: PPUSH
11644: CALL_OW 344
// end else
11648: GO 11676
// begin Difficulty := GetMultiplayerSetting ( 0 ) ;
11650: LD_ADDR_OWVAR 67
11654: PUSH
11655: LD_INT 0
11657: PPUSH
11658: CALL_OW 426
11662: ST_TO_ADDR
// gamemode := GetMultiplayerSetting ( 1 ) ;
11663: LD_ADDR_VAR 0 3
11667: PUSH
11668: LD_INT 1
11670: PPUSH
11671: CALL_OW 426
11675: ST_TO_ADDR
// end ; if gamemode = 1 then
11676: LD_VAR 0 3
11680: PUSH
11681: LD_INT 1
11683: EQUAL
11684: IFFALSE 11708
// begin your_side := 1 ;
11686: LD_ADDR_OWVAR 2
11690: PUSH
11691: LD_INT 1
11693: ST_TO_ADDR
// legion_enemy := 1 ;
11694: LD_ADDR_EXP 42
11698: PUSH
11699: LD_INT 1
11701: ST_TO_ADDR
// PrepareAmerican ;
11702: CALL 261 0 0
// end else
11706: GO 11760
// if gamemode = 2 then
11708: LD_VAR 0 3
11712: PUSH
11713: LD_INT 2
11715: EQUAL
11716: IFFALSE 11740
// begin your_side := 2 ;
11718: LD_ADDR_OWVAR 2
11722: PUSH
11723: LD_INT 2
11725: ST_TO_ADDR
// legion_enemy := 2 ;
11726: LD_ADDR_EXP 42
11730: PUSH
11731: LD_INT 2
11733: ST_TO_ADDR
// PrepareArabian ;
11734: CALL 19078 0 0
// end else
11738: GO 11760
// begin your_side := 7 ;
11740: LD_ADDR_OWVAR 2
11744: PUSH
11745: LD_INT 7
11747: ST_TO_ADDR
// legion_enemy := 7 ;
11748: LD_ADDR_EXP 42
11752: PUSH
11753: LD_INT 7
11755: ST_TO_ADDR
// PrepareAlliance ;
11756: CALL 16222 0 0
// end ; if your_side = 1 then
11760: LD_OWVAR 2
11764: PUSH
11765: LD_INT 1
11767: EQUAL
11768: IFFALSE 12344
// begin Query ( QVul4 ) ;
11770: LD_STRING QVul4
11772: PPUSH
11773: CALL_OW 97
// InGameOn ;
11777: CALL_OW 8
// PlaceSeeing ( 8 , 5 , 1 , 12 ) ;
11781: LD_INT 8
11783: PPUSH
11784: LD_INT 5
11786: PPUSH
11787: LD_INT 1
11789: PPUSH
11790: LD_INT 12
11792: PPUSH
11793: CALL_OW 330
// RemoveSeeing ( 8 , 5 , 1 ) ;
11797: LD_INT 8
11799: PPUSH
11800: LD_INT 5
11802: PPUSH
11803: LD_INT 1
11805: PPUSH
11806: CALL_OW 331
// PlaceSeeing ( 98 , 148 , 1 , 2 ) ;
11810: LD_INT 98
11812: PPUSH
11813: LD_INT 148
11815: PPUSH
11816: LD_INT 1
11818: PPUSH
11819: LD_INT 2
11821: PPUSH
11822: CALL_OW 330
// RemoveSeeing ( 98 , 148 , 1 ) ;
11826: LD_INT 98
11828: PPUSH
11829: LD_INT 148
11831: PPUSH
11832: LD_INT 1
11834: PPUSH
11835: CALL_OW 331
// CenterNowOnXY ( 8 , 5 ) ;
11839: LD_INT 8
11841: PPUSH
11842: LD_INT 5
11844: PPUSH
11845: CALL_OW 86
// uc_side := 4 ;
11849: LD_ADDR_OWVAR 20
11853: PUSH
11854: LD_INT 4
11856: ST_TO_ADDR
// uc_nation := 1 ;
11857: LD_ADDR_OWVAR 21
11861: PUSH
11862: LD_INT 1
11864: ST_TO_ADDR
// hc_importance := 0 ;
11865: LD_ADDR_OWVAR 32
11869: PUSH
11870: LD_INT 0
11872: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , us_skill ) ;
11873: LD_INT 1
11875: PPUSH
11876: LD_INT 3
11878: PPUSH
11879: LD_EXP 26
11883: PPUSH
11884: CALL_OW 380
// un := CreateHuman ;
11888: LD_ADDR_VAR 0 2
11892: PUSH
11893: CALL_OW 44
11897: ST_TO_ADDR
// PlaceUnitXY ( un , 19 , 23 , false ) ;
11898: LD_VAR 0 2
11902: PPUSH
11903: LD_INT 19
11905: PPUSH
11906: LD_INT 23
11908: PPUSH
11909: LD_INT 0
11911: PPUSH
11912: CALL_OW 48
// hc_name := Stuart Carey ;
11916: LD_ADDR_OWVAR 26
11920: PUSH
11921: LD_STRING Stuart Carey
11923: ST_TO_ADDR
// hc_class := 1 ;
11924: LD_ADDR_OWVAR 28
11928: PUSH
11929: LD_INT 1
11931: ST_TO_ADDR
// hc_gallery := vulcano ;
11932: LD_ADDR_OWVAR 33
11936: PUSH
11937: LD_STRING vulcano
11939: ST_TO_ADDR
// hc_face_number := 1 ;
11940: LD_ADDR_OWVAR 34
11944: PUSH
11945: LD_INT 1
11947: ST_TO_ADDR
// us_guy := CreateHuman ;
11948: LD_ADDR_EXP 27
11952: PUSH
11953: CALL_OW 44
11957: ST_TO_ADDR
// InitHc ;
11958: CALL_OW 19
// if rand ( 0 , 1 ) then
11962: LD_INT 0
11964: PPUSH
11965: LD_INT 1
11967: PPUSH
11968: CALL_OW 12
11972: IFFALSE 11989
// PrepareHuman ( sex_male , 3 , 6 ) else
11974: LD_INT 1
11976: PPUSH
11977: LD_INT 3
11979: PPUSH
11980: LD_INT 6
11982: PPUSH
11983: CALL_OW 380
11987: GO 12002
// PrepareHuman ( sex_female , 4 , 8 ) ;
11989: LD_INT 2
11991: PPUSH
11992: LD_INT 4
11994: PPUSH
11995: LD_INT 8
11997: PPUSH
11998: CALL_OW 380
// ComMoveXY ( un , 12 , 10 ) ;
12002: LD_VAR 0 2
12006: PPUSH
12007: LD_INT 12
12009: PPUSH
12010: LD_INT 10
12012: PPUSH
12013: CALL_OW 111
// ComTurnUnit ( us_commander , un ) ;
12017: LD_EXP 24
12021: PPUSH
12022: LD_VAR 0 2
12026: PPUSH
12027: CALL_OW 119
// repeat wait ( 0 0$3 ) ;
12031: LD_INT 105
12033: PPUSH
12034: CALL_OW 67
// until See ( 4 , us_commander ) or IsAt ( un , 12 , 10 ) ;
12038: LD_INT 4
12040: PPUSH
12041: LD_EXP 24
12045: PPUSH
12046: CALL_OW 292
12050: PUSH
12051: LD_VAR 0 2
12055: PPUSH
12056: LD_INT 12
12058: PPUSH
12059: LD_INT 10
12061: PPUSH
12062: CALL_OW 307
12066: OR
12067: IFFALSE 12031
// ComTurnUnit ( un , us_commander ) ;
12069: LD_VAR 0 2
12073: PPUSH
12074: LD_EXP 24
12078: PPUSH
12079: CALL_OW 119
// if GetSex ( un ) = sex_male then
12083: LD_VAR 0 2
12087: PPUSH
12088: CALL_OW 258
12092: PUSH
12093: LD_INT 1
12095: EQUAL
12096: IFFALSE 12179
// begin Say ( un , VD-un1 ) ;
12098: LD_VAR 0 2
12102: PPUSH
12103: LD_STRING VD-un1
12105: PPUSH
12106: CALL_OW 88
// Say ( us_commander , VDc-1 ) ;
12110: LD_EXP 24
12114: PPUSH
12115: LD_STRING VDc-1
12117: PPUSH
12118: CALL_OW 88
// Say ( un , VD-un2 ) ;
12122: LD_VAR 0 2
12126: PPUSH
12127: LD_STRING VD-un2
12129: PPUSH
12130: CALL_OW 88
// Say ( us_commander , VDc-2 ) ;
12134: LD_EXP 24
12138: PPUSH
12139: LD_STRING VDc-2
12141: PPUSH
12142: CALL_OW 88
// Say ( un , VD-un3 ) ;
12146: LD_VAR 0 2
12150: PPUSH
12151: LD_STRING VD-un3
12153: PPUSH
12154: CALL_OW 88
// wait ( 0 0$0.2 ) ;
12158: LD_INT 7
12160: PPUSH
12161: CALL_OW 67
// Say ( un , VD-un4 ) ;
12165: LD_VAR 0 2
12169: PPUSH
12170: LD_STRING VD-un4
12172: PPUSH
12173: CALL_OW 88
// end else
12177: GO 12258
// begin Say ( un , VD-unf1 ) ;
12179: LD_VAR 0 2
12183: PPUSH
12184: LD_STRING VD-unf1
12186: PPUSH
12187: CALL_OW 88
// Say ( us_commander , VDc-1 ) ;
12191: LD_EXP 24
12195: PPUSH
12196: LD_STRING VDc-1
12198: PPUSH
12199: CALL_OW 88
// Say ( un , VD-unf2 ) ;
12203: LD_VAR 0 2
12207: PPUSH
12208: LD_STRING VD-unf2
12210: PPUSH
12211: CALL_OW 88
// Say ( us_commander , VDc-2 ) ;
12215: LD_EXP 24
12219: PPUSH
12220: LD_STRING VDc-2
12222: PPUSH
12223: CALL_OW 88
// Say ( un , VD-unf3 ) ;
12227: LD_VAR 0 2
12231: PPUSH
12232: LD_STRING VD-unf3
12234: PPUSH
12235: CALL_OW 88
// wait ( 0 0$0.2 ) ;
12239: LD_INT 7
12241: PPUSH
12242: CALL_OW 67
// Say ( un , VD-unf4 ) ;
12246: LD_VAR 0 2
12250: PPUSH
12251: LD_STRING VD-unf4
12253: PPUSH
12254: CALL_OW 88
// end ; ComMoveXY ( un , 2 , 2 ) ;
12258: LD_VAR 0 2
12262: PPUSH
12263: LD_INT 2
12265: PPUSH
12266: LD_INT 2
12268: PPUSH
12269: CALL_OW 111
// Say ( us_commander , VDc-3 ) ;
12273: LD_EXP 24
12277: PPUSH
12278: LD_STRING VDc-3
12280: PPUSH
12281: CALL_OW 88
// InGameOff ;
12285: CALL_OW 9
// ChangeMissionObjectives ( CVulc1 ) ;
12289: LD_STRING CVulc1
12291: PPUSH
12292: CALL_OW 337
// repeat Wait ( 0 0$01 ) ;
12296: LD_INT 35
12298: PPUSH
12299: CALL_OW 67
// until GetX ( un ) = 2 and GetY ( un ) = 2 ;
12303: LD_VAR 0 2
12307: PPUSH
12308: CALL_OW 250
12312: PUSH
12313: LD_INT 2
12315: EQUAL
12316: PUSH
12317: LD_VAR 0 2
12321: PPUSH
12322: CALL_OW 251
12326: PUSH
12327: LD_INT 2
12329: EQUAL
12330: AND
12331: IFFALSE 12296
// RemoveUnit ( un ) ;
12333: LD_VAR 0 2
12337: PPUSH
12338: CALL_OW 64
// end else
12342: GO 12721
// if your_side = 2 then
12344: LD_OWVAR 2
12348: PUSH
12349: LD_INT 2
12351: EQUAL
12352: IFFALSE 12568
// begin CenterNowOnUnits ( player_commander ) ;
12354: LD_EXP 11
12358: PPUSH
12359: CALL_OW 87
// speaker := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff ar_commander ;
12363: LD_ADDR_VAR 0 4
12367: PUSH
12368: LD_INT 22
12370: PUSH
12371: LD_INT 2
12373: PUSH
12374: EMPTY
12375: LIST
12376: LIST
12377: PUSH
12378: LD_INT 21
12380: PUSH
12381: LD_INT 1
12383: PUSH
12384: EMPTY
12385: LIST
12386: LIST
12387: PUSH
12388: EMPTY
12389: LIST
12390: LIST
12391: PPUSH
12392: CALL_OW 69
12396: PUSH
12397: LD_EXP 57
12401: DIFF
12402: ST_TO_ADDR
// if speaker then
12403: LD_VAR 0 4
12407: IFFALSE 12559
// begin InGameOn ;
12409: CALL_OW 8
// Say ( ar_commander , VSd-1 ) ;
12413: LD_EXP 57
12417: PPUSH
12418: LD_STRING VSd-1
12420: PPUSH
12421: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
12425: LD_VAR 0 4
12429: PUSH
12430: LD_INT 1
12432: ARRAY
12433: PPUSH
12434: CALL_OW 258
12438: PUSH
12439: LD_INT 1
12441: EQUAL
12442: IFFALSE 12462
// Say ( speaker [ 1 ] , VAd-1 ) else
12444: LD_VAR 0 4
12448: PUSH
12449: LD_INT 1
12451: ARRAY
12452: PPUSH
12453: LD_STRING VAd-1
12455: PPUSH
12456: CALL_OW 88
12460: GO 12478
// Say ( speaker [ 1 ] , VAfd-1 ) ;
12462: LD_VAR 0 4
12466: PUSH
12467: LD_INT 1
12469: ARRAY
12470: PPUSH
12471: LD_STRING VAfd-1
12473: PPUSH
12474: CALL_OW 88
// Say ( ar_commander , VSd-2 ) ;
12478: LD_EXP 57
12482: PPUSH
12483: LD_STRING VSd-2
12485: PPUSH
12486: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
12490: LD_VAR 0 4
12494: PUSH
12495: LD_INT 1
12497: ARRAY
12498: PPUSH
12499: CALL_OW 258
12503: PUSH
12504: LD_INT 1
12506: EQUAL
12507: IFFALSE 12527
// Say ( speaker [ 1 ] , VAd-2 ) else
12509: LD_VAR 0 4
12513: PUSH
12514: LD_INT 1
12516: ARRAY
12517: PPUSH
12518: LD_STRING VAd-2
12520: PPUSH
12521: CALL_OW 88
12525: GO 12543
// Say ( speaker [ 1 ] , VAfd-2 ) ;
12527: LD_VAR 0 4
12531: PUSH
12532: LD_INT 1
12534: ARRAY
12535: PPUSH
12536: LD_STRING VAfd-2
12538: PPUSH
12539: CALL_OW 88
// Say ( ar_commander , VSd-3 ) ;
12543: LD_EXP 57
12547: PPUSH
12548: LD_STRING VSd-3
12550: PPUSH
12551: CALL_OW 88
// InGameOff ;
12555: CALL_OW 9
// end ; ChangeMissionObjectives ( CVulc5 ) ;
12559: LD_STRING CVulc5
12561: PPUSH
12562: CALL_OW 337
// end else
12566: GO 12721
// if your_side = 7 then
12568: LD_OWVAR 2
12572: PUSH
12573: LD_INT 7
12575: EQUAL
12576: IFFALSE 12721
// begin speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) diff al_commander ;
12578: LD_ADDR_VAR 0 4
12582: PUSH
12583: LD_INT 22
12585: PUSH
12586: LD_INT 7
12588: PUSH
12589: EMPTY
12590: LIST
12591: LIST
12592: PUSH
12593: LD_INT 21
12595: PUSH
12596: LD_INT 1
12598: PUSH
12599: EMPTY
12600: LIST
12601: LIST
12602: PUSH
12603: EMPTY
12604: LIST
12605: LIST
12606: PPUSH
12607: CALL_OW 69
12611: PUSH
12612: LD_EXP 43
12616: DIFF
12617: ST_TO_ADDR
// if speaker then
12618: LD_VAR 0 4
12622: IFFALSE 12714
// begin CenterNowOnUnits ( al_commander ) ;
12624: LD_EXP 43
12628: PPUSH
12629: CALL_OW 87
// InGameOn ;
12633: CALL_OW 8
// Say ( al_commander , VPd-1 ) ;
12637: LD_EXP 43
12641: PPUSH
12642: LD_STRING VPd-1
12644: PPUSH
12645: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) then
12649: LD_VAR 0 4
12653: PUSH
12654: LD_INT 1
12656: ARRAY
12657: PPUSH
12658: CALL_OW 258
12662: IFFALSE 12682
// Say ( speaker [ 1 ] , VPpd-1 ) else
12664: LD_VAR 0 4
12668: PUSH
12669: LD_INT 1
12671: ARRAY
12672: PPUSH
12673: LD_STRING VPpd-1
12675: PPUSH
12676: CALL_OW 88
12680: GO 12698
// Say ( speaker [ 1 ] , VPpdf-1 ) ;
12682: LD_VAR 0 4
12686: PUSH
12687: LD_INT 1
12689: ARRAY
12690: PPUSH
12691: LD_STRING VPpdf-1
12693: PPUSH
12694: CALL_OW 88
// Say ( al_commander , VPd-2 ) ;
12698: LD_EXP 43
12702: PPUSH
12703: LD_STRING VPd-2
12705: PPUSH
12706: CALL_OW 88
// InGameOff ;
12710: CALL_OW 9
// end ; ChangeMissionObjectives ( CVulc7 ) ;
12714: LD_STRING CVulc7
12716: PPUSH
12717: CALL_OW 337
// end ; SaveForQuickRestart ;
12721: CALL_OW 22
// end ;
12725: LD_VAR 0 1
12729: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) do
12730: LD_INT 22
12732: PUSH
12733: LD_INT 2
12735: PUSH
12736: EMPTY
12737: LIST
12738: LIST
12739: PUSH
12740: LD_INT 30
12742: PUSH
12743: LD_INT 3
12745: PUSH
12746: EMPTY
12747: LIST
12748: LIST
12749: PUSH
12750: EMPTY
12751: LIST
12752: LIST
12753: PPUSH
12754: CALL_OW 69
12758: IFFALSE 12802
12760: GO 12762
12762: DISABLE
// begin ChangeMissionObjectives ( CVulc6 ) ;
12763: LD_STRING CVulc6
12765: PPUSH
12766: CALL_OW 337
// Wait ( [ 25 25$00 , 22 22$30 , 20 20$00 ] [ Difficulty ] ) ;
12770: LD_INT 52500
12772: PUSH
12773: LD_INT 47250
12775: PUSH
12776: LD_INT 42000
12778: PUSH
12779: EMPTY
12780: LIST
12781: LIST
12782: LIST
12783: PUSH
12784: LD_OWVAR 67
12788: ARRAY
12789: PPUSH
12790: CALL_OW 67
// ru_can_attack := true ;
12794: LD_ADDR_EXP 3
12798: PUSH
12799: LD_INT 1
12801: ST_TO_ADDR
// end ;
12802: END
// every 0 0$01 trigger GetSide ( us_depot ) = 1 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_warehouse ] ] ] ) do var speaker ;
12803: LD_INT 50
12805: PPUSH
12806: CALL_OW 255
12810: PUSH
12811: LD_INT 1
12813: EQUAL
12814: PUSH
12815: LD_INT 22
12817: PUSH
12818: LD_INT 1
12820: PUSH
12821: EMPTY
12822: LIST
12823: LIST
12824: PUSH
12825: LD_INT 2
12827: PUSH
12828: LD_INT 30
12830: PUSH
12831: LD_INT 3
12833: PUSH
12834: EMPTY
12835: LIST
12836: LIST
12837: PUSH
12838: LD_INT 30
12840: PUSH
12841: LD_INT 1
12843: PUSH
12844: EMPTY
12845: LIST
12846: LIST
12847: PUSH
12848: EMPTY
12849: LIST
12850: LIST
12851: LIST
12852: PUSH
12853: EMPTY
12854: LIST
12855: LIST
12856: PPUSH
12857: CALL_OW 69
12861: OR
12862: IFFALSE 13096
12864: GO 12866
12866: DISABLE
12867: LD_INT 0
12869: PPUSH
// begin ChangeMissionObjectives ( CVulc2 ) ;
12870: LD_STRING CVulc2
12872: PPUSH
12873: CALL_OW 337
// speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) diff us_commander ;
12877: LD_ADDR_VAR 0 1
12881: PUSH
12882: LD_INT 22
12884: PUSH
12885: LD_INT 1
12887: PUSH
12888: EMPTY
12889: LIST
12890: LIST
12891: PUSH
12892: LD_INT 25
12894: PUSH
12895: LD_INT 2
12897: PUSH
12898: EMPTY
12899: LIST
12900: LIST
12901: PUSH
12902: EMPTY
12903: LIST
12904: LIST
12905: PPUSH
12906: CALL_OW 69
12910: PUSH
12911: LD_EXP 24
12915: DIFF
12916: ST_TO_ADDR
// DialogueOn ;
12917: CALL_OW 6
// DWait ( 0 0$0.3 ) ;
12921: LD_INT 10
12923: PPUSH
12924: CALL_OW 68
// if GetSex ( speaker [ 1 ] ) = sex_male then
12928: LD_VAR 0 1
12932: PUSH
12933: LD_INT 1
12935: ARRAY
12936: PPUSH
12937: CALL_OW 258
12941: PUSH
12942: LD_INT 1
12944: EQUAL
12945: IFFALSE 12965
// Say ( speaker [ 1 ] , VDb-1 ) else
12947: LD_VAR 0 1
12951: PUSH
12952: LD_INT 1
12954: ARRAY
12955: PPUSH
12956: LD_STRING VDb-1
12958: PPUSH
12959: CALL_OW 88
12963: GO 12981
// Say ( speaker [ 1 ] , VDbf-1 ) ;
12965: LD_VAR 0 1
12969: PUSH
12970: LD_INT 1
12972: ARRAY
12973: PPUSH
12974: LD_STRING VDbf-1
12976: PPUSH
12977: CALL_OW 88
// DWait ( 0 0$0.3 ) ;
12981: LD_INT 10
12983: PPUSH
12984: CALL_OW 68
// if GetSex ( speaker [ 1 ] ) = sex_male then
12988: LD_VAR 0 1
12992: PUSH
12993: LD_INT 1
12995: ARRAY
12996: PPUSH
12997: CALL_OW 258
13001: PUSH
13002: LD_INT 1
13004: EQUAL
13005: IFFALSE 13025
// Say ( speaker [ 1 ] , VDb-2 ) else
13007: LD_VAR 0 1
13011: PUSH
13012: LD_INT 1
13014: ARRAY
13015: PPUSH
13016: LD_STRING VDb-2
13018: PPUSH
13019: CALL_OW 88
13023: GO 13041
// Say ( speaker [ 1 ] , VDbf-2 ) ;
13025: LD_VAR 0 1
13029: PUSH
13030: LD_INT 1
13032: ARRAY
13033: PPUSH
13034: LD_STRING VDbf-2
13036: PPUSH
13037: CALL_OW 88
// DWait ( 0 0$01 ) ;
13041: LD_INT 35
13043: PPUSH
13044: CALL_OW 68
// Say ( us_commander , VDb-com1 ) ;
13048: LD_EXP 24
13052: PPUSH
13053: LD_STRING VDb-com1
13055: PPUSH
13056: CALL_OW 88
// DialogueOff ;
13060: CALL_OW 7
// Wait ( [ 21 21$00 , 17 17$30 , 15 15$00 ] [ Difficulty ] ) ;
13064: LD_INT 44100
13066: PUSH
13067: LD_INT 36750
13069: PUSH
13070: LD_INT 31500
13072: PUSH
13073: EMPTY
13074: LIST
13075: LIST
13076: LIST
13077: PUSH
13078: LD_OWVAR 67
13082: ARRAY
13083: PPUSH
13084: CALL_OW 67
// ru_can_attack := true ;
13088: LD_ADDR_EXP 3
13092: PUSH
13093: LD_INT 1
13095: ST_TO_ADDR
// end ;
13096: PPOPN 1
13098: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) do
13099: LD_INT 22
13101: PUSH
13102: LD_INT 7
13104: PUSH
13105: EMPTY
13106: LIST
13107: LIST
13108: PUSH
13109: LD_INT 30
13111: PUSH
13112: LD_INT 3
13114: PUSH
13115: EMPTY
13116: LIST
13117: LIST
13118: PUSH
13119: EMPTY
13120: LIST
13121: LIST
13122: PPUSH
13123: CALL_OW 69
13127: IFFALSE 13164
13129: GO 13131
13131: DISABLE
// begin Wait ( [ 20 20$00 , 16 16$30 , 14 14$00 ] [ Difficulty ] ) ;
13132: LD_INT 42000
13134: PUSH
13135: LD_INT 34650
13137: PUSH
13138: LD_INT 29400
13140: PUSH
13141: EMPTY
13142: LIST
13143: LIST
13144: LIST
13145: PUSH
13146: LD_OWVAR 67
13150: ARRAY
13151: PPUSH
13152: CALL_OW 67
// ru_can_attack := true ;
13156: LD_ADDR_EXP 3
13160: PUSH
13161: LD_INT 1
13163: ST_TO_ADDR
// end ;
13164: END
// every 0 0$01 trigger GetSide ( us_lab ) = 1 do var speaker ;
13165: LD_INT 58
13167: PPUSH
13168: CALL_OW 255
13172: PUSH
13173: LD_INT 1
13175: EQUAL
13176: IFFALSE 13383
13178: GO 13180
13180: DISABLE
13181: LD_INT 0
13183: PPUSH
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
13184: LD_ADDR_VAR 0 1
13188: PUSH
13189: LD_INT 22
13191: PUSH
13192: LD_INT 1
13194: PUSH
13195: EMPTY
13196: LIST
13197: LIST
13198: PUSH
13199: LD_INT 25
13201: PUSH
13202: LD_INT 2
13204: PUSH
13205: EMPTY
13206: LIST
13207: LIST
13208: PUSH
13209: EMPTY
13210: LIST
13211: LIST
13212: PPUSH
13213: CALL_OW 69
13217: ST_TO_ADDR
// DialogueOn ;
13218: CALL_OW 6
// if speaker then
13222: LD_VAR 0 1
13226: IFFALSE 13281
// if GetSex ( speaker [ 1 ] ) = sex_male then
13228: LD_VAR 0 1
13232: PUSH
13233: LD_INT 1
13235: ARRAY
13236: PPUSH
13237: CALL_OW 258
13241: PUSH
13242: LD_INT 1
13244: EQUAL
13245: IFFALSE 13265
// Say ( speaker [ 1 ] , VDe-1 ) else
13247: LD_VAR 0 1
13251: PUSH
13252: LD_INT 1
13254: ARRAY
13255: PPUSH
13256: LD_STRING VDe-1
13258: PPUSH
13259: CALL_OW 88
13263: GO 13281
// Say ( speaker [ 1 ] , VDef-1 ) ;
13265: LD_VAR 0 1
13269: PUSH
13270: LD_INT 1
13272: ARRAY
13273: PPUSH
13274: LD_STRING VDef-1
13276: PPUSH
13277: CALL_OW 88
// case Query ( SibNote ) of 1 :
13281: LD_STRING SibNote
13283: PPUSH
13284: CALL_OW 97
13288: PUSH
13289: LD_INT 1
13291: DOUBLE
13292: EQUAL
13293: IFTRUE 13297
13295: GO 13300
13297: POP
// ; end ;
13298: GO 13301
13300: POP
// if speaker then
13301: LD_VAR 0 1
13305: IFFALSE 13360
// if GetSex ( speaker [ 1 ] ) = sex_male then
13307: LD_VAR 0 1
13311: PUSH
13312: LD_INT 1
13314: ARRAY
13315: PPUSH
13316: CALL_OW 258
13320: PUSH
13321: LD_INT 1
13323: EQUAL
13324: IFFALSE 13344
// Say ( speaker [ 1 ] , VDe-2 ) else
13326: LD_VAR 0 1
13330: PUSH
13331: LD_INT 1
13333: ARRAY
13334: PPUSH
13335: LD_STRING VDe-2
13337: PPUSH
13338: CALL_OW 88
13342: GO 13360
// Say ( speaker [ 1 ] , VDef-2 ) ;
13344: LD_VAR 0 1
13348: PUSH
13349: LD_INT 1
13351: ARRAY
13352: PPUSH
13353: LD_STRING VDef-2
13355: PPUSH
13356: CALL_OW 88
// Say ( us_commander , VDc-4 ) ;
13360: LD_EXP 24
13364: PPUSH
13365: LD_STRING VDc-4
13367: PPUSH
13368: CALL_OW 88
// DialogueOff ;
13372: CALL_OW 7
// ChangeMissionObjectives ( CVulc3 ) ;
13376: LD_STRING CVulc3
13378: PPUSH
13379: CALL_OW 337
// end ;
13383: PPOPN 1
13385: END
// every 0 0$01 trigger your_side = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) > 0 do var i , un , veh ;
13386: LD_OWVAR 2
13390: PUSH
13391: LD_INT 1
13393: EQUAL
13394: PUSH
13395: LD_INT 22
13397: PUSH
13398: LD_INT 1
13400: PUSH
13401: EMPTY
13402: LIST
13403: LIST
13404: PUSH
13405: LD_INT 30
13407: PUSH
13408: LD_INT 3
13410: PUSH
13411: EMPTY
13412: LIST
13413: LIST
13414: PUSH
13415: EMPTY
13416: LIST
13417: LIST
13418: PPUSH
13419: CALL_OW 69
13423: PUSH
13424: LD_INT 0
13426: GREATER
13427: AND
13428: IFFALSE 13874
13430: GO 13432
13432: DISABLE
13433: LD_INT 0
13435: PPUSH
13436: PPUSH
13437: PPUSH
// begin Wait ( Rand ( 0 0$07 , 0 0$37 ) ) ;
13438: LD_INT 245
13440: PPUSH
13441: LD_INT 1295
13443: PPUSH
13444: CALL_OW 12
13448: PPUSH
13449: CALL_OW 67
// DialogueOn ;
13453: CALL_OW 6
// SayRadio ( us_guy , VDG-1 ) ;
13457: LD_EXP 27
13461: PPUSH
13462: LD_STRING VDG-1
13464: PPUSH
13465: CALL_OW 94
// Say ( us_commander , VDc-5 ) ;
13469: LD_EXP 24
13473: PPUSH
13474: LD_STRING VDc-5
13476: PPUSH
13477: CALL_OW 88
// SayRadio ( us_guy , VDG-2 ) ;
13481: LD_EXP 27
13485: PPUSH
13486: LD_STRING VDG-2
13488: PPUSH
13489: CALL_OW 94
// Say ( us_commander , VDc-6 ) ;
13493: LD_EXP 24
13497: PPUSH
13498: LD_STRING VDc-6
13500: PPUSH
13501: CALL_OW 88
// Say ( us_commander , VDc-6a ) ;
13505: LD_EXP 24
13509: PPUSH
13510: LD_STRING VDc-6a
13512: PPUSH
13513: CALL_OW 88
// SayRadio ( us_guy , VDG-3 ) ;
13517: LD_EXP 27
13521: PPUSH
13522: LD_STRING VDG-3
13524: PPUSH
13525: CALL_OW 94
// Say ( us_commander , VDc-7 ) ;
13529: LD_EXP 24
13533: PPUSH
13534: LD_STRING VDc-7
13536: PPUSH
13537: CALL_OW 88
// SayRadio ( us_guy , VDG-4 ) ;
13541: LD_EXP 27
13545: PPUSH
13546: LD_STRING VDG-4
13548: PPUSH
13549: CALL_OW 94
// DialogueOff ;
13553: CALL_OW 7
// ChangeMissionObjectives ( CVulc4 ) ;
13557: LD_STRING CVulc4
13559: PPUSH
13560: CALL_OW 337
// Wait ( [ 9 9$00 , 10 10$00 , 11 11$00 ] [ Difficulty ] ) ;
13564: LD_INT 18900
13566: PUSH
13567: LD_INT 21000
13569: PUSH
13570: LD_INT 23100
13572: PUSH
13573: EMPTY
13574: LIST
13575: LIST
13576: LIST
13577: PUSH
13578: LD_OWVAR 67
13582: ARRAY
13583: PPUSH
13584: CALL_OW 67
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
13588: LD_ADDR_VAR 0 1
13592: PUSH
13593: DOUBLE
13594: LD_INT 1
13596: DEC
13597: ST_TO_ADDR
13598: LD_INT 4
13600: PUSH
13601: LD_INT 5
13603: PUSH
13604: LD_INT 6
13606: PUSH
13607: EMPTY
13608: LIST
13609: LIST
13610: LIST
13611: PUSH
13612: LD_OWVAR 67
13616: ARRAY
13617: PUSH
13618: FOR_TO
13619: IFFALSE 13863
// begin uc_side := 1 ;
13621: LD_ADDR_OWVAR 20
13625: PUSH
13626: LD_INT 1
13628: ST_TO_ADDR
// uc_nation := 1 ;
13629: LD_ADDR_OWVAR 21
13633: PUSH
13634: LD_INT 1
13636: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , us_skill ) ;
13637: LD_INT 0
13639: PPUSH
13640: LD_INT 1
13642: PPUSH
13643: LD_INT 4
13645: PPUSH
13646: CALL_OW 12
13650: PPUSH
13651: LD_EXP 26
13655: PPUSH
13656: CALL_OW 380
// un := CreateHuman ;
13660: LD_ADDR_VAR 0 2
13664: PUSH
13665: CALL_OW 44
13669: ST_TO_ADDR
// SetDir ( un , 2 ) ;
13670: LD_VAR 0 2
13674: PPUSH
13675: LD_INT 2
13677: PPUSH
13678: CALL_OW 233
// if GetClass ( un ) = 3 then
13682: LD_VAR 0 2
13686: PPUSH
13687: CALL_OW 257
13691: PUSH
13692: LD_INT 3
13694: EQUAL
13695: IFFALSE 13846
// begin vc_chassis := [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 ] ;
13697: LD_ADDR_OWVAR 37
13701: PUSH
13702: LD_INT 2
13704: PUSH
13705: LD_INT 3
13707: PUSH
13708: EMPTY
13709: LIST
13710: LIST
13711: PUSH
13712: LD_VAR 0 1
13716: PUSH
13717: LD_INT 2
13719: MOD
13720: ARRAY
13721: ST_TO_ADDR
// vc_engine := engine_combustion ;
13722: LD_ADDR_OWVAR 39
13726: PUSH
13727: LD_INT 1
13729: ST_TO_ADDR
// vc_control := control_manual ;
13730: LD_ADDR_OWVAR 38
13734: PUSH
13735: LD_INT 1
13737: ST_TO_ADDR
// vc_weapon := [ us_laser , us_laser , us_double_gun , us_radar ] [ rand ( 1 , 4 ) ] ;
13738: LD_ADDR_OWVAR 40
13742: PUSH
13743: LD_INT 9
13745: PUSH
13746: LD_INT 9
13748: PUSH
13749: LD_INT 5
13751: PUSH
13752: LD_INT 11
13754: PUSH
13755: EMPTY
13756: LIST
13757: LIST
13758: LIST
13759: LIST
13760: PUSH
13761: LD_INT 1
13763: PPUSH
13764: LD_INT 4
13766: PPUSH
13767: CALL_OW 12
13771: ARRAY
13772: ST_TO_ADDR
// veh := CreateVehicle ;
13773: LD_ADDR_VAR 0 3
13777: PUSH
13778: CALL_OW 45
13782: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
13783: LD_VAR 0 3
13787: PPUSH
13788: LD_INT 2
13790: PPUSH
13791: CALL_OW 233
// SetFuel ( veh , Rand ( 77 , 88 ) ) ;
13795: LD_VAR 0 3
13799: PPUSH
13800: LD_INT 77
13802: PPUSH
13803: LD_INT 88
13805: PPUSH
13806: CALL_OW 12
13810: PPUSH
13811: CALL_OW 240
// PlaceUnitArea ( veh , start_north , false ) ;
13815: LD_VAR 0 3
13819: PPUSH
13820: LD_INT 1
13822: PPUSH
13823: LD_INT 0
13825: PPUSH
13826: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
13830: LD_VAR 0 2
13834: PPUSH
13835: LD_VAR 0 3
13839: PPUSH
13840: CALL_OW 52
// end else
13844: GO 13861
// PlaceUnitArea ( un , start_north , false ) ;
13846: LD_VAR 0 2
13850: PPUSH
13851: LD_INT 1
13853: PPUSH
13854: LD_INT 0
13856: PPUSH
13857: CALL_OW 49
// end ;
13861: GO 13618
13863: POP
13864: POP
// CenterNowOnUnits ( un ) ;
13865: LD_VAR 0 2
13869: PPUSH
13870: CALL_OW 87
// end ;
13874: PPOPN 3
13876: END
// every 0 0$01 trigger FilterUnitsInArea ( vulc_artifact , [ f_side , your_side ] ) do var un , filter ;
13877: LD_INT 21
13879: PPUSH
13880: LD_INT 22
13882: PUSH
13883: LD_OWVAR 2
13887: PUSH
13888: EMPTY
13889: LIST
13890: LIST
13891: PPUSH
13892: CALL_OW 70
13896: IFFALSE 14217
13898: GO 13900
13900: DISABLE
13901: LD_INT 0
13903: PPUSH
13904: PPUSH
// begin filter := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff player_commander ;
13905: LD_ADDR_VAR 0 2
13909: PUSH
13910: LD_INT 22
13912: PUSH
13913: LD_OWVAR 2
13917: PUSH
13918: EMPTY
13919: LIST
13920: LIST
13921: PUSH
13922: LD_INT 2
13924: PUSH
13925: LD_INT 25
13927: PUSH
13928: LD_INT 1
13930: PUSH
13931: EMPTY
13932: LIST
13933: LIST
13934: PUSH
13935: LD_INT 25
13937: PUSH
13938: LD_INT 2
13940: PUSH
13941: EMPTY
13942: LIST
13943: LIST
13944: PUSH
13945: LD_INT 25
13947: PUSH
13948: LD_INT 3
13950: PUSH
13951: EMPTY
13952: LIST
13953: LIST
13954: PUSH
13955: LD_INT 25
13957: PUSH
13958: LD_INT 4
13960: PUSH
13961: EMPTY
13962: LIST
13963: LIST
13964: PUSH
13965: EMPTY
13966: LIST
13967: LIST
13968: LIST
13969: LIST
13970: LIST
13971: PUSH
13972: EMPTY
13973: LIST
13974: LIST
13975: PPUSH
13976: CALL_OW 69
13980: PUSH
13981: LD_EXP 11
13985: DIFF
13986: ST_TO_ADDR
// un := NearestUnitToXY ( filter , 112 , 67 ) ;
13987: LD_ADDR_VAR 0 1
13991: PUSH
13992: LD_VAR 0 2
13996: PPUSH
13997: LD_INT 112
13999: PPUSH
14000: LD_INT 67
14002: PPUSH
14003: CALL_OW 73
14007: ST_TO_ADDR
// if GetSide ( un ) = 7 then
14008: LD_VAR 0 1
14012: PPUSH
14013: CALL_OW 255
14017: PUSH
14018: LD_INT 7
14020: EQUAL
14021: IFFALSE 14064
// if GetSex ( un ) = sex_male then
14023: LD_VAR 0 1
14027: PPUSH
14028: CALL_OW 258
14032: PUSH
14033: LD_INT 1
14035: EQUAL
14036: IFFALSE 14052
// Say ( un , VD-find-al ) else
14038: LD_VAR 0 1
14042: PPUSH
14043: LD_STRING VD-find-al
14045: PPUSH
14046: CALL_OW 88
14050: GO 14064
// Say ( un , VD-find-al-f ) ;
14052: LD_VAR 0 1
14056: PPUSH
14057: LD_STRING VD-find-al-f
14059: PPUSH
14060: CALL_OW 88
// if GetSide ( un ) = 2 then
14064: LD_VAR 0 1
14068: PPUSH
14069: CALL_OW 255
14073: PUSH
14074: LD_INT 2
14076: EQUAL
14077: IFFALSE 14120
// if GetSex ( un ) = sex_male then
14079: LD_VAR 0 1
14083: PPUSH
14084: CALL_OW 258
14088: PUSH
14089: LD_INT 1
14091: EQUAL
14092: IFFALSE 14108
// Say ( un , VD-find-ar ) else
14094: LD_VAR 0 1
14098: PPUSH
14099: LD_STRING VD-find-ar
14101: PPUSH
14102: CALL_OW 88
14106: GO 14120
// Say ( un , VD-find-ar-f ) ;
14108: LD_VAR 0 1
14112: PPUSH
14113: LD_STRING VD-find-ar-f
14115: PPUSH
14116: CALL_OW 88
// if GetSide ( un ) = 1 then
14120: LD_VAR 0 1
14124: PPUSH
14125: CALL_OW 255
14129: PUSH
14130: LD_INT 1
14132: EQUAL
14133: IFFALSE 14200
// begin if GetSex ( un ) = sex_male then
14135: LD_VAR 0 1
14139: PPUSH
14140: CALL_OW 258
14144: PUSH
14145: LD_INT 1
14147: EQUAL
14148: IFFALSE 14176
// begin Say ( un , VD-find-us ) ;
14150: LD_VAR 0 1
14154: PPUSH
14155: LD_STRING VD-find-us
14157: PPUSH
14158: CALL_OW 88
// Say ( un , VD-find-us2 ) ;
14162: LD_VAR 0 1
14166: PPUSH
14167: LD_STRING VD-find-us2
14169: PPUSH
14170: CALL_OW 88
// end else
14174: GO 14200
// begin Say ( un , VD-find-us-f ) ;
14176: LD_VAR 0 1
14180: PPUSH
14181: LD_STRING VD-find-us-f
14183: PPUSH
14184: CALL_OW 88
// Say ( un , VD-find-us2-f ) ;
14188: LD_VAR 0 1
14192: PPUSH
14193: LD_STRING VD-find-us2-f
14195: PPUSH
14196: CALL_OW 88
// end ; end ; Wait ( 0 0$0.3 ) ;
14200: LD_INT 10
14202: PPUSH
14203: CALL_OW 67
// CenterNowOnXY ( 112 , 67 ) ;
14207: LD_INT 112
14209: PPUSH
14210: LD_INT 67
14212: PPUSH
14213: CALL_OW 86
// end ;
14217: PPOPN 2
14219: END
// every 0 0$01 trigger player_artifact_ready do var speaker ;
14220: LD_EXP 8
14224: IFFALSE 14726
14226: GO 14228
14228: DISABLE
14229: LD_INT 0
14231: PPUSH
// begin if your_side = 1 then
14232: LD_OWVAR 2
14236: PUSH
14237: LD_INT 1
14239: EQUAL
14240: IFFALSE 14421
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) diff us_commander ;
14242: LD_ADDR_VAR 0 1
14246: PUSH
14247: LD_INT 22
14249: PUSH
14250: LD_INT 1
14252: PUSH
14253: EMPTY
14254: LIST
14255: LIST
14256: PUSH
14257: LD_INT 25
14259: PUSH
14260: LD_INT 4
14262: PUSH
14263: EMPTY
14264: LIST
14265: LIST
14266: PUSH
14267: EMPTY
14268: LIST
14269: LIST
14270: PPUSH
14271: CALL_OW 69
14275: PUSH
14276: LD_EXP 24
14280: DIFF
14281: ST_TO_ADDR
// if not speaker then
14282: LD_VAR 0 1
14286: NOT
14287: IFFALSE 14291
// exit ;
14289: GO 14726
// if GetSex ( speaker [ 1 ] ) = sex_male then
14291: LD_VAR 0 1
14295: PUSH
14296: LD_INT 1
14298: ARRAY
14299: PPUSH
14300: CALL_OW 258
14304: PUSH
14305: LD_INT 1
14307: EQUAL
14308: IFFALSE 14328
// Say ( speaker [ 1 ] , VD-us-sci-art-1 ) else
14310: LD_VAR 0 1
14314: PUSH
14315: LD_INT 1
14317: ARRAY
14318: PPUSH
14319: LD_STRING VD-us-sci-art-1
14321: PPUSH
14322: CALL_OW 88
14326: GO 14344
// Say ( speaker [ 1 ] , VD-us-fsci-art-1 ) ;
14328: LD_VAR 0 1
14332: PUSH
14333: LD_INT 1
14335: ARRAY
14336: PPUSH
14337: LD_STRING VD-us-fsci-art-1
14339: PPUSH
14340: CALL_OW 88
// Say ( us_commander , VDc-art1 ) ;
14344: LD_EXP 24
14348: PPUSH
14349: LD_STRING VDc-art1
14351: PPUSH
14352: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
14356: LD_VAR 0 1
14360: PUSH
14361: LD_INT 1
14363: ARRAY
14364: PPUSH
14365: CALL_OW 258
14369: PUSH
14370: LD_INT 1
14372: EQUAL
14373: IFFALSE 14393
// Say ( speaker [ 1 ] , VD-us-sci-art-2 ) else
14375: LD_VAR 0 1
14379: PUSH
14380: LD_INT 1
14382: ARRAY
14383: PPUSH
14384: LD_STRING VD-us-sci-art-2
14386: PPUSH
14387: CALL_OW 88
14391: GO 14409
// Say ( speaker [ 1 ] , VD-us-fsci-art-2 ) ;
14393: LD_VAR 0 1
14397: PUSH
14398: LD_INT 1
14400: ARRAY
14401: PPUSH
14402: LD_STRING VD-us-fsci-art-2
14404: PPUSH
14405: CALL_OW 88
// Say ( us_commander , VDc-art2 ) ;
14409: LD_EXP 24
14413: PPUSH
14414: LD_STRING VDc-art2
14416: PPUSH
14417: CALL_OW 88
// end ; if your_side = 2 then
14421: LD_OWVAR 2
14425: PUSH
14426: LD_INT 2
14428: EQUAL
14429: IFFALSE 14533
// begin speaker := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) diff ar_commander ;
14431: LD_ADDR_VAR 0 1
14435: PUSH
14436: LD_INT 22
14438: PUSH
14439: LD_INT 2
14441: PUSH
14442: EMPTY
14443: LIST
14444: LIST
14445: PUSH
14446: LD_INT 25
14448: PUSH
14449: LD_INT 4
14451: PUSH
14452: EMPTY
14453: LIST
14454: LIST
14455: PUSH
14456: EMPTY
14457: LIST
14458: LIST
14459: PPUSH
14460: CALL_OW 69
14464: PUSH
14465: LD_EXP 57
14469: DIFF
14470: ST_TO_ADDR
// if not speaker then
14471: LD_VAR 0 1
14475: NOT
14476: IFFALSE 14480
// exit ;
14478: GO 14726
// if GetSex ( speaker [ 1 ] ) = sex_male then
14480: LD_VAR 0 1
14484: PUSH
14485: LD_INT 1
14487: ARRAY
14488: PPUSH
14489: CALL_OW 258
14493: PUSH
14494: LD_INT 1
14496: EQUAL
14497: IFFALSE 14517
// Say ( speaker [ 1 ] , VD-ar-sci-art-1 ) else
14499: LD_VAR 0 1
14503: PUSH
14504: LD_INT 1
14506: ARRAY
14507: PPUSH
14508: LD_STRING VD-ar-sci-art-1
14510: PPUSH
14511: CALL_OW 88
14515: GO 14533
// Say ( speaker [ 1 ] , VD-ar-fsci-art-1 ) ;
14517: LD_VAR 0 1
14521: PUSH
14522: LD_INT 1
14524: ARRAY
14525: PPUSH
14526: LD_STRING VD-ar-fsci-art-1
14528: PPUSH
14529: CALL_OW 88
// end ; if your_side = 7 then
14533: LD_OWVAR 2
14537: PUSH
14538: LD_INT 7
14540: EQUAL
14541: IFFALSE 14726
// begin speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 4 ] ] ) diff al_commander ;
14543: LD_ADDR_VAR 0 1
14547: PUSH
14548: LD_INT 22
14550: PUSH
14551: LD_INT 7
14553: PUSH
14554: EMPTY
14555: LIST
14556: LIST
14557: PUSH
14558: LD_INT 25
14560: PUSH
14561: LD_INT 4
14563: PUSH
14564: EMPTY
14565: LIST
14566: LIST
14567: PUSH
14568: EMPTY
14569: LIST
14570: LIST
14571: PPUSH
14572: CALL_OW 69
14576: PUSH
14577: LD_EXP 43
14581: DIFF
14582: ST_TO_ADDR
// if speaker then
14583: LD_VAR 0 1
14587: IFFALSE 14719
// begin if GetSex ( speaker [ 1 ] ) = sex_male then
14589: LD_VAR 0 1
14593: PUSH
14594: LD_INT 1
14596: ARRAY
14597: PPUSH
14598: CALL_OW 258
14602: PUSH
14603: LD_INT 1
14605: EQUAL
14606: IFFALSE 14626
// Say ( speaker [ 1 ] , VD-al-sci-art-1 ) else
14608: LD_VAR 0 1
14612: PUSH
14613: LD_INT 1
14615: ARRAY
14616: PPUSH
14617: LD_STRING VD-al-sci-art-1
14619: PPUSH
14620: CALL_OW 88
14624: GO 14642
// Say ( speaker [ 1 ] , VD-al-fsci-art-1 ) ;
14626: LD_VAR 0 1
14630: PUSH
14631: LD_INT 1
14633: ARRAY
14634: PPUSH
14635: LD_STRING VD-al-fsci-art-1
14637: PPUSH
14638: CALL_OW 88
// Say ( al_commander , VPd-art-1 ) ;
14642: LD_EXP 43
14646: PPUSH
14647: LD_STRING VPd-art-1
14649: PPUSH
14650: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
14654: LD_VAR 0 1
14658: PUSH
14659: LD_INT 1
14661: ARRAY
14662: PPUSH
14663: CALL_OW 258
14667: PUSH
14668: LD_INT 1
14670: EQUAL
14671: IFFALSE 14691
// Say ( speaker [ 1 ] , VD-al-sci-art-2 ) else
14673: LD_VAR 0 1
14677: PUSH
14678: LD_INT 1
14680: ARRAY
14681: PPUSH
14682: LD_STRING VD-al-sci-art-2
14684: PPUSH
14685: CALL_OW 88
14689: GO 14707
// Say ( speaker [ 1 ] , VD-al-fsci-art-2 ) ;
14691: LD_VAR 0 1
14695: PUSH
14696: LD_INT 1
14698: ARRAY
14699: PPUSH
14700: LD_STRING VD-al-fsci-art-2
14702: PPUSH
14703: CALL_OW 88
// Say ( al_commander , VPd-art-2 ) ;
14707: LD_EXP 43
14711: PPUSH
14712: LD_STRING VPd-art-2
14714: PPUSH
14715: CALL_OW 88
// end ; ChangeMissionObjectives ( CVulc7out ) ;
14719: LD_STRING CVulc7out
14721: PPUSH
14722: CALL_OW 337
// end ; end ;
14726: PPOPN 1
14728: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_see , 8 ] ] ) do var speaker ;
14729: LD_INT 22
14731: PUSH
14732: LD_OWVAR 2
14736: PUSH
14737: EMPTY
14738: LIST
14739: LIST
14740: PUSH
14741: LD_INT 101
14743: PUSH
14744: LD_INT 8
14746: PUSH
14747: EMPTY
14748: LIST
14749: LIST
14750: PUSH
14751: EMPTY
14752: LIST
14753: LIST
14754: PPUSH
14755: CALL_OW 69
14759: IFFALSE 14902
14761: GO 14763
14763: DISABLE
14764: LD_INT 0
14766: PPUSH
// begin if your_side = 1 then
14767: LD_OWVAR 2
14771: PUSH
14772: LD_INT 1
14774: EQUAL
14775: IFFALSE 14858
// begin speaker := FilterAllUnits ( [ f_side , 1 ] ) diff us_commander ;
14777: LD_ADDR_VAR 0 1
14781: PUSH
14782: LD_INT 22
14784: PUSH
14785: LD_INT 1
14787: PUSH
14788: EMPTY
14789: LIST
14790: LIST
14791: PPUSH
14792: CALL_OW 69
14796: PUSH
14797: LD_EXP 24
14801: DIFF
14802: ST_TO_ADDR
// if speaker then
14803: LD_VAR 0 1
14807: IFFALSE 14858
// if GetSex ( speaker [ 1 ] ) then
14809: LD_VAR 0 1
14813: PUSH
14814: LD_INT 1
14816: ARRAY
14817: PPUSH
14818: CALL_OW 258
14822: IFFALSE 14842
// Say ( speaker [ 1 ] , VD-legion-us ) else
14824: LD_VAR 0 1
14828: PUSH
14829: LD_INT 1
14831: ARRAY
14832: PPUSH
14833: LD_STRING VD-legion-us
14835: PPUSH
14836: CALL_OW 88
14840: GO 14858
// Say ( speaker [ 1 ] , VD-legion-us-f ) ;
14842: LD_VAR 0 1
14846: PUSH
14847: LD_INT 1
14849: ARRAY
14850: PPUSH
14851: LD_STRING VD-legion-us-f
14853: PPUSH
14854: CALL_OW 88
// end ; if your_side = 2 then
14858: LD_OWVAR 2
14862: PUSH
14863: LD_INT 2
14865: EQUAL
14866: IFFALSE 14880
// Say ( ar_commander , VD-legion-ar ) ;
14868: LD_EXP 57
14872: PPUSH
14873: LD_STRING VD-legion-ar
14875: PPUSH
14876: CALL_OW 88
// if your_side = 7 then
14880: LD_OWVAR 2
14884: PUSH
14885: LD_INT 7
14887: EQUAL
14888: IFFALSE 14902
// Say ( al_commander , VD-legion-al ) ;
14890: LD_EXP 43
14894: PPUSH
14895: LD_STRING VD-legion-al
14897: PPUSH
14898: CALL_OW 88
// end ;
14902: PPOPN 1
14904: END
// every 0 0$01 trigger mine_vulc do
14905: LD_EXP 13
14909: IFFALSE 14926
14911: GO 14913
14913: DISABLE
// begin Say ( player_commander , VD-vulc-mines ) ;
14914: LD_EXP 11
14918: PPUSH
14919: LD_STRING VD-vulc-mines
14921: PPUSH
14922: CALL_OW 88
// end ;
14926: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 3 ] ) = 0 and your_side <> 2 do
14927: LD_INT 22
14929: PUSH
14930: LD_INT 3
14932: PUSH
14933: EMPTY
14934: LIST
14935: LIST
14936: PPUSH
14937: CALL_OW 69
14941: PUSH
14942: LD_INT 0
14944: EQUAL
14945: PUSH
14946: LD_OWVAR 2
14950: PUSH
14951: LD_INT 2
14953: NONEQUAL
14954: AND
14955: IFFALSE 14964
14957: GO 14959
14959: DISABLE
// Win ;
14960: CALL 15021 0 0
14964: END
// every 0 0$01 trigger FilterAllUnits ( [ f_or , [ f_side , 8 ] , [ f_side , 3 ] ] ) = 0 and your_side = 2 do
14965: LD_INT 2
14967: PUSH
14968: LD_INT 22
14970: PUSH
14971: LD_INT 8
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: PUSH
14978: LD_INT 22
14980: PUSH
14981: LD_INT 3
14983: PUSH
14984: EMPTY
14985: LIST
14986: LIST
14987: PUSH
14988: EMPTY
14989: LIST
14990: LIST
14991: LIST
14992: PPUSH
14993: CALL_OW 69
14997: PUSH
14998: LD_INT 0
15000: EQUAL
15001: PUSH
15002: LD_OWVAR 2
15006: PUSH
15007: LD_INT 2
15009: EQUAL
15010: AND
15011: IFFALSE 15020
15013: GO 15015
15015: DISABLE
// Win ;
15016: CALL 15021 0 0
15020: END
// function Win ; var points ; begin
15021: LD_INT 0
15023: PPUSH
15024: PPUSH
// case Query ( VulcWin ) of 1 :
15025: LD_STRING VulcWin
15027: PPUSH
15028: CALL_OW 97
15032: PUSH
15033: LD_INT 1
15035: DOUBLE
15036: EQUAL
15037: IFTRUE 15041
15039: GO 15044
15041: POP
// ; end ;
15042: GO 15045
15044: POP
// if medal_enabled then
15045: LD_EXP 14
15049: IFFALSE 15063
// AddMedal ( vulc_1 , 1 ) else
15051: LD_STRING vulc_1
15053: PPUSH
15054: LD_INT 1
15056: PPUSH
15057: CALL_OW 101
15061: GO 15074
// AddMedal ( vulc_1 , - 1 ) ;
15063: LD_STRING vulc_1
15065: PPUSH
15066: LD_INT 1
15068: NEG
15069: PPUSH
15070: CALL_OW 101
// if FilterAllUnits ( [ f_side , 8 ] ) = 0 then
15074: LD_INT 22
15076: PUSH
15077: LD_INT 8
15079: PUSH
15080: EMPTY
15081: LIST
15082: LIST
15083: PPUSH
15084: CALL_OW 69
15088: PUSH
15089: LD_INT 0
15091: EQUAL
15092: IFFALSE 15106
// AddMedal ( vulc_2 , 1 ) else
15094: LD_STRING vulc_2
15096: PPUSH
15097: LD_INT 1
15099: PPUSH
15100: CALL_OW 101
15104: GO 15117
// AddMedal ( vulc_2 , - 1 ) ;
15106: LD_STRING vulc_2
15108: PPUSH
15109: LD_INT 1
15111: NEG
15112: PPUSH
15113: CALL_OW 101
// points := CalculateCommanderPoints ;
15117: LD_ADDR_VAR 0 2
15121: PUSH
15122: CALL 2376 0 0
15126: ST_TO_ADDR
// if points >= 2000 then
15127: LD_VAR 0 2
15131: PUSH
15132: LD_INT 2000
15134: GREATEREQUAL
15135: IFFALSE 15149
// AddMedal ( vulc_3 , 2 ) else
15137: LD_STRING vulc_3
15139: PPUSH
15140: LD_INT 2
15142: PPUSH
15143: CALL_OW 101
15147: GO 15182
// if points >= 0 then
15149: LD_VAR 0 2
15153: PUSH
15154: LD_INT 0
15156: GREATEREQUAL
15157: IFFALSE 15171
// AddMedal ( vulc_3 , 1 ) else
15159: LD_STRING vulc_3
15161: PPUSH
15162: LD_INT 1
15164: PPUSH
15165: CALL_OW 101
15169: GO 15182
// AddMedal ( vulc_3 , - 1 ) ;
15171: LD_STRING vulc_3
15173: PPUSH
15174: LD_INT 1
15176: NEG
15177: PPUSH
15178: CALL_OW 101
// GiveMedals ( MAIN ) ;
15182: LD_STRING MAIN
15184: PPUSH
15185: CALL_OW 102
// YouWin ;
15189: CALL_OW 103
// end ; end_of_file
15193: LD_VAR 0 1
15197: RET
// every 0 0$01 trigger FilterUnitsInArea ( vulcano_area , [ f_type , unit_human ] ) do var i , un ;
15198: LD_INT 13
15200: PPUSH
15201: LD_INT 21
15203: PUSH
15204: LD_INT 1
15206: PUSH
15207: EMPTY
15208: LIST
15209: LIST
15210: PPUSH
15211: CALL_OW 70
15215: IFFALSE 15275
15217: GO 15219
15219: DISABLE
15220: LD_INT 0
15222: PPUSH
15223: PPUSH
// begin enable ;
15224: ENABLE
// for i in FilterUnitsInArea ( vulcano_area , [ f_type , unit_human ] ) do
15225: LD_ADDR_VAR 0 1
15229: PUSH
15230: LD_INT 13
15232: PPUSH
15233: LD_INT 21
15235: PUSH
15236: LD_INT 1
15238: PUSH
15239: EMPTY
15240: LIST
15241: LIST
15242: PPUSH
15243: CALL_OW 70
15247: PUSH
15248: FOR_IN
15249: IFFALSE 15273
// if GetLives ( i ) then
15251: LD_VAR 0 1
15255: PPUSH
15256: CALL_OW 256
15260: IFFALSE 15271
// KillUnit ( i ) ;
15262: LD_VAR 0 1
15266: PPUSH
15267: CALL_OW 66
15271: GO 15248
15273: POP
15274: POP
// end ;
15275: PPOPN 2
15277: END
// on ArtifactResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
15278: LD_VAR 0 1
15282: PPUSH
15283: CALL_OW 255
15287: PUSH
15288: LD_OWVAR 2
15292: EQUAL
15293: IFFALSE 15303
// player_res_art := true ;
15295: LD_ADDR_EXP 6
15299: PUSH
15300: LD_INT 1
15302: ST_TO_ADDR
// end ;
15303: PPOPN 1
15305: END
// every 0 0$03 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) and player_res_art do var xy , lab ;
15306: LD_INT 22
15308: PUSH
15309: LD_OWVAR 2
15313: PUSH
15314: EMPTY
15315: LIST
15316: LIST
15317: PUSH
15318: LD_INT 2
15320: PUSH
15321: LD_INT 30
15323: PUSH
15324: LD_INT 7
15326: PUSH
15327: EMPTY
15328: LIST
15329: LIST
15330: PUSH
15331: LD_INT 30
15333: PUSH
15334: LD_INT 8
15336: PUSH
15337: EMPTY
15338: LIST
15339: LIST
15340: PUSH
15341: LD_INT 30
15343: PUSH
15344: LD_INT 11
15346: PUSH
15347: EMPTY
15348: LIST
15349: LIST
15350: PUSH
15351: EMPTY
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: PUSH
15357: EMPTY
15358: LIST
15359: LIST
15360: PPUSH
15361: CALL_OW 69
15365: PUSH
15366: LD_EXP 6
15370: AND
15371: IFFALSE 15728
15373: GO 15375
15375: DISABLE
15376: LD_INT 0
15378: PPUSH
15379: PPUSH
// begin enable ;
15380: ENABLE
// xy := FindArtifact ( 1 ) ;
15381: LD_ADDR_VAR 0 1
15385: PUSH
15386: LD_INT 1
15388: PPUSH
15389: CALL_OW 469
15393: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_siberium ] ] ] ) , xy [ 1 ] , xy [ 2 ] ) ;
15394: LD_ADDR_VAR 0 2
15398: PUSH
15399: LD_INT 22
15401: PUSH
15402: LD_OWVAR 2
15406: PUSH
15407: EMPTY
15408: LIST
15409: LIST
15410: PUSH
15411: LD_INT 2
15413: PUSH
15414: LD_INT 30
15416: PUSH
15417: LD_INT 8
15419: PUSH
15420: EMPTY
15421: LIST
15422: LIST
15423: PUSH
15424: LD_INT 30
15426: PUSH
15427: LD_INT 7
15429: PUSH
15430: EMPTY
15431: LIST
15432: LIST
15433: PUSH
15434: LD_INT 30
15436: PUSH
15437: LD_INT 11
15439: PUSH
15440: EMPTY
15441: LIST
15442: LIST
15443: PUSH
15444: EMPTY
15445: LIST
15446: LIST
15447: LIST
15448: LIST
15449: PUSH
15450: EMPTY
15451: LIST
15452: LIST
15453: PPUSH
15454: CALL_OW 69
15458: PPUSH
15459: LD_VAR 0 1
15463: PUSH
15464: LD_INT 1
15466: ARRAY
15467: PPUSH
15468: LD_VAR 0 1
15472: PUSH
15473: LD_INT 2
15475: ARRAY
15476: PPUSH
15477: CALL_OW 73
15481: ST_TO_ADDR
// if player_artifact_ready = false then
15482: LD_EXP 8
15486: PUSH
15487: LD_INT 0
15489: EQUAL
15490: IFFALSE 15604
// if GetDistUnitXY ( lab , xy [ 1 ] , xy [ 2 ] ) < 6 then
15492: LD_VAR 0 2
15496: PPUSH
15497: LD_VAR 0 1
15501: PUSH
15502: LD_INT 1
15504: ARRAY
15505: PPUSH
15506: LD_VAR 0 1
15510: PUSH
15511: LD_INT 2
15513: ARRAY
15514: PPUSH
15515: CALL_OW 297
15519: PUSH
15520: LD_INT 6
15522: LESS
15523: IFFALSE 15584
// begin if BuildingStatus ( lab ) = bs_idle then
15525: LD_VAR 0 2
15529: PPUSH
15530: CALL_OW 461
15534: PUSH
15535: LD_INT 2
15537: EQUAL
15538: IFFALSE 15562
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) else
15540: LD_OWVAR 2
15544: PPUSH
15545: LD_INT 1
15547: PPUSH
15548: LD_INT 2
15550: PPUSH
15551: LD_VAR 0 2
15555: PPUSH
15556: CALL_OW 468
15560: GO 15582
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
15562: LD_OWVAR 2
15566: PPUSH
15567: LD_INT 1
15569: PPUSH
15570: LD_INT 1
15572: PPUSH
15573: LD_VAR 0 2
15577: PPUSH
15578: CALL_OW 468
// end else
15582: GO 15604
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
15584: LD_OWVAR 2
15588: PPUSH
15589: LD_INT 1
15591: PPUSH
15592: LD_INT 1
15594: PPUSH
15595: LD_VAR 0 2
15599: PPUSH
15600: CALL_OW 468
// if player_artifact_ready then
15604: LD_EXP 8
15608: IFFALSE 15728
// if GetDistUnitXY ( lab , xy [ 1 ] , xy [ 2 ] ) < 6 then
15610: LD_VAR 0 2
15614: PPUSH
15615: LD_VAR 0 1
15619: PUSH
15620: LD_INT 1
15622: ARRAY
15623: PPUSH
15624: LD_VAR 0 1
15628: PUSH
15629: LD_INT 2
15631: ARRAY
15632: PPUSH
15633: CALL_OW 297
15637: PUSH
15638: LD_INT 6
15640: LESS
15641: IFFALSE 15706
// begin if BuildingStatus ( lab ) = bs_idle then
15643: LD_VAR 0 2
15647: PPUSH
15648: CALL_OW 461
15652: PUSH
15653: LD_INT 2
15655: EQUAL
15656: IFFALSE 15682
// SetArtifactUse ( your_side , art_icon , art_unit , lab ) else
15658: LD_OWVAR 2
15662: PPUSH
15663: LD_EXP 9
15667: PPUSH
15668: LD_INT 4
15670: PPUSH
15671: LD_VAR 0 2
15675: PPUSH
15676: CALL_OW 468
15680: GO 15704
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
15682: LD_OWVAR 2
15686: PPUSH
15687: LD_EXP 9
15691: PPUSH
15692: LD_INT 1
15694: PPUSH
15695: LD_VAR 0 2
15699: PPUSH
15700: CALL_OW 468
// end else
15704: GO 15728
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
15706: LD_OWVAR 2
15710: PPUSH
15711: LD_EXP 9
15715: PPUSH
15716: LD_INT 1
15718: PPUSH
15719: LD_VAR 0 2
15723: PPUSH
15724: CALL_OW 468
// end ;
15728: PPOPN 2
15730: END
// on ArtifactUsed ( s , icon , cr1 , cr2 ) do var xy , i , lab , side ;
15731: LD_INT 0
15733: PPUSH
15734: PPUSH
15735: PPUSH
15736: PPUSH
// begin xy := FindArtifact ( 1 ) ;
15737: LD_ADDR_VAR 0 5
15741: PUSH
15742: LD_INT 1
15744: PPUSH
15745: CALL_OW 469
15749: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , xy [ 1 ] , xy [ 2 ] ) ;
15750: LD_ADDR_VAR 0 7
15754: PUSH
15755: LD_INT 22
15757: PUSH
15758: LD_OWVAR 2
15762: PUSH
15763: EMPTY
15764: LIST
15765: LIST
15766: PUSH
15767: LD_INT 2
15769: PUSH
15770: LD_INT 30
15772: PUSH
15773: LD_INT 8
15775: PUSH
15776: EMPTY
15777: LIST
15778: LIST
15779: PUSH
15780: LD_INT 30
15782: PUSH
15783: LD_INT 11
15785: PUSH
15786: EMPTY
15787: LIST
15788: LIST
15789: PUSH
15790: EMPTY
15791: LIST
15792: LIST
15793: LIST
15794: PUSH
15795: EMPTY
15796: LIST
15797: LIST
15798: PPUSH
15799: CALL_OW 69
15803: PPUSH
15804: LD_VAR 0 5
15808: PUSH
15809: LD_INT 1
15811: ARRAY
15812: PPUSH
15813: LD_VAR 0 5
15817: PUSH
15818: LD_INT 2
15820: ARRAY
15821: PPUSH
15822: CALL_OW 73
15826: ST_TO_ADDR
// if icon = art_exp_left then
15827: LD_VAR 0 2
15831: PUSH
15832: LD_INT 1
15834: EQUAL
15835: IFFALSE 15888
// begin SetSpecResearch ( lab , time_res_art , true ) ;
15837: LD_VAR 0 7
15841: PPUSH
15842: LD_EXP 10
15846: PPUSH
15847: LD_INT 1
15849: PPUSH
15850: CALL_OW 486
// SetWorkingProgress ( lab , artifact_progress ) ;
15854: LD_VAR 0 7
15858: PPUSH
15859: LD_EXP 7
15863: PPUSH
15864: CALL_OW 329
// SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
15868: LD_OWVAR 2
15872: PPUSH
15873: LD_INT 1
15875: PPUSH
15876: LD_INT 0
15878: PPUSH
15879: LD_VAR 0 7
15883: PPUSH
15884: CALL_OW 468
// end ; if icon = art_icon then
15888: LD_VAR 0 2
15892: PUSH
15893: LD_EXP 9
15897: EQUAL
15898: IFFALSE 16131
// begin if cr1 in FilterAllUnits ( [ f_type , unit_building ] ) then
15900: LD_VAR 0 3
15904: PUSH
15905: LD_INT 21
15907: PUSH
15908: LD_INT 3
15910: PUSH
15911: EMPTY
15912: LIST
15913: LIST
15914: PPUSH
15915: CALL_OW 69
15919: IN
15920: IFFALSE 16131
// begin side := GetSide ( cr1 ) ;
15922: LD_ADDR_VAR 0 8
15926: PUSH
15927: LD_VAR 0 3
15931: PPUSH
15932: CALL_OW 255
15936: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_siberite_power ] ] ) > 0 then
15937: LD_INT 22
15939: PUSH
15940: LD_VAR 0 8
15944: PUSH
15945: EMPTY
15946: LIST
15947: LIST
15948: PUSH
15949: LD_INT 30
15951: PUSH
15952: LD_INT 28
15954: PUSH
15955: EMPTY
15956: LIST
15957: LIST
15958: PUSH
15959: EMPTY
15960: LIST
15961: LIST
15962: PPUSH
15963: CALL_OW 69
15967: PUSH
15968: LD_INT 0
15970: GREATER
15971: IFFALSE 16131
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_solar_power ] , [ f_btype , b_siberite_power ] ] ] ) do
15973: LD_ADDR_VAR 0 6
15977: PUSH
15978: LD_INT 22
15980: PUSH
15981: LD_VAR 0 8
15985: PUSH
15986: EMPTY
15987: LIST
15988: LIST
15989: PUSH
15990: LD_INT 2
15992: PUSH
15993: LD_INT 30
15995: PUSH
15996: LD_INT 26
15998: PUSH
15999: EMPTY
16000: LIST
16001: LIST
16002: PUSH
16003: LD_INT 30
16005: PUSH
16006: LD_INT 27
16008: PUSH
16009: EMPTY
16010: LIST
16011: LIST
16012: PUSH
16013: LD_INT 30
16015: PUSH
16016: LD_INT 28
16018: PUSH
16019: EMPTY
16020: LIST
16021: LIST
16022: PUSH
16023: EMPTY
16024: LIST
16025: LIST
16026: LIST
16027: LIST
16028: PUSH
16029: EMPTY
16030: LIST
16031: LIST
16032: PPUSH
16033: CALL_OW 69
16037: PUSH
16038: FOR_IN
16039: IFFALSE 16052
// KillUnit ( i ) ;
16041: LD_VAR 0 6
16045: PPUSH
16046: CALL_OW 66
16050: GO 16038
16052: POP
16053: POP
// medal_enabled := true ;
16054: LD_ADDR_EXP 14
16058: PUSH
16059: LD_INT 1
16061: ST_TO_ADDR
// player_res_art := false ;
16062: LD_ADDR_EXP 6
16066: PUSH
16067: LD_INT 0
16069: ST_TO_ADDR
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
16070: LD_OWVAR 2
16074: PPUSH
16075: LD_EXP 9
16079: PPUSH
16080: LD_INT 1
16082: PPUSH
16083: LD_VAR 0 7
16087: PPUSH
16088: CALL_OW 468
// wait ( time_to_reuse ) ;
16092: LD_EXP 12
16096: PPUSH
16097: CALL_OW 67
// SetArtifactUse ( your_side , art_icon , art_unit , lab ) ;
16101: LD_OWVAR 2
16105: PPUSH
16106: LD_EXP 9
16110: PPUSH
16111: LD_INT 4
16113: PPUSH
16114: LD_VAR 0 7
16118: PPUSH
16119: CALL_OW 468
// player_res_art := true ;
16123: LD_ADDR_EXP 6
16127: PUSH
16128: LD_INT 1
16130: ST_TO_ADDR
// end ; end ; end ; end ;
16131: PPOPN 8
16133: END
// on SpecResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
16134: LD_VAR 0 1
16138: PPUSH
16139: CALL_OW 255
16143: PUSH
16144: LD_OWVAR 2
16148: EQUAL
16149: IFFALSE 16186
// begin SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
16151: LD_OWVAR 2
16155: PPUSH
16156: LD_INT 1
16158: PPUSH
16159: LD_INT 0
16161: PPUSH
16162: LD_VAR 0 1
16166: PPUSH
16167: CALL_OW 468
// player_artifact_ready := true ;
16171: LD_ADDR_EXP 8
16175: PUSH
16176: LD_INT 1
16178: ST_TO_ADDR
// Hint ( ArtVulcano ) ;
16179: LD_STRING ArtVulcano
16181: PPUSH
16182: CALL_OW 339
// end ; end ;
16186: PPOPN 1
16188: END
// on SpecResearchCancel ( lab , progress ) do begin artifact_progress := progress ;
16189: LD_ADDR_EXP 7
16193: PUSH
16194: LD_VAR 0 2
16198: ST_TO_ADDR
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) ;
16199: LD_OWVAR 2
16203: PPUSH
16204: LD_INT 1
16206: PPUSH
16207: LD_INT 2
16209: PPUSH
16210: LD_VAR 0 1
16214: PPUSH
16215: CALL_OW 468
// end ; end_of_file end_of_file
16219: PPOPN 2
16221: END
// export al_commander , al_force , al_skill ; export function PrepareAlliance ; var i , filter , un , team ; begin
16222: LD_INT 0
16224: PPUSH
16225: PPUSH
16226: PPUSH
16227: PPUSH
16228: PPUSH
// al_skill := [ 7 , 6 , 5 ] [ Difficulty ] ;
16229: LD_ADDR_EXP 45
16233: PUSH
16234: LD_INT 7
16236: PUSH
16237: LD_INT 6
16239: PUSH
16240: LD_INT 5
16242: PUSH
16243: EMPTY
16244: LIST
16245: LIST
16246: LIST
16247: PUSH
16248: LD_OWVAR 67
16252: ARRAY
16253: ST_TO_ADDR
// al_force := [ ] ;
16254: LD_ADDR_EXP 44
16258: PUSH
16259: EMPTY
16260: ST_TO_ADDR
// RemoveAlliance ;
16261: CALL 16954 0 0
// ResetFog ;
16265: CALL_OW 335
// your_side := 7 ;
16269: LD_ADDR_OWVAR 2
16273: PUSH
16274: LD_INT 7
16276: ST_TO_ADDR
// uc_side := 7 ;
16277: LD_ADDR_OWVAR 20
16281: PUSH
16282: LD_INT 7
16284: ST_TO_ADDR
// hc_gallery :=  ;
16285: LD_ADDR_OWVAR 33
16289: PUSH
16290: LD_STRING 
16292: ST_TO_ADDR
// hc_name :=  ;
16293: LD_ADDR_OWVAR 26
16297: PUSH
16298: LD_STRING 
16300: ST_TO_ADDR
// hc_importance := 0 ;
16301: LD_ADDR_OWVAR 32
16305: PUSH
16306: LD_INT 0
16308: ST_TO_ADDR
// for i = 1 to 17 do
16309: LD_ADDR_VAR 0 2
16313: PUSH
16314: DOUBLE
16315: LD_INT 1
16317: DEC
16318: ST_TO_ADDR
16319: LD_INT 17
16321: PUSH
16322: FOR_TO
16323: IFFALSE 16403
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
16325: LD_ADDR_OWVAR 21
16329: PUSH
16330: LD_INT 1
16332: PUSH
16333: LD_INT 3
16335: PUSH
16336: EMPTY
16337: LIST
16338: LIST
16339: PUSH
16340: LD_INT 1
16342: PPUSH
16343: LD_INT 2
16345: PPUSH
16346: CALL_OW 12
16350: ARRAY
16351: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , al_skill ) ;
16352: LD_INT 0
16354: PPUSH
16355: LD_INT 1
16357: PPUSH
16358: LD_INT 4
16360: PPUSH
16361: CALL_OW 12
16365: PPUSH
16366: LD_EXP 45
16370: PPUSH
16371: CALL_OW 380
// un := CreateHuman ;
16375: LD_ADDR_VAR 0 4
16379: PUSH
16380: CALL_OW 44
16384: ST_TO_ADDR
// al_force := al_force ^ un ;
16385: LD_ADDR_EXP 44
16389: PUSH
16390: LD_EXP 44
16394: PUSH
16395: LD_VAR 0 4
16399: ADD
16400: ST_TO_ADDR
// end ;
16401: GO 16322
16403: POP
16404: POP
// hc_importance := 100 ;
16405: LD_ADDR_OWVAR 32
16409: PUSH
16410: LD_INT 100
16412: ST_TO_ADDR
// uc_nation := 3 ;
16413: LD_ADDR_OWVAR 21
16417: PUSH
16418: LD_INT 3
16420: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , al_skill ) ;
16421: LD_INT 1
16423: PPUSH
16424: LD_INT 1
16426: PPUSH
16427: LD_EXP 45
16431: PPUSH
16432: CALL_OW 380
// hc_gallery := skirmish ;
16436: LD_ADDR_OWVAR 33
16440: PUSH
16441: LD_STRING skirmish
16443: ST_TO_ADDR
// hc_face_number := 8 ;
16444: LD_ADDR_OWVAR 34
16448: PUSH
16449: LD_INT 8
16451: ST_TO_ADDR
// hc_name := Trofim Petya ;
16452: LD_ADDR_OWVAR 26
16456: PUSH
16457: LD_STRING Trofim Petya
16459: ST_TO_ADDR
// al_commander := CreateHuman ;
16460: LD_ADDR_EXP 43
16464: PUSH
16465: CALL_OW 44
16469: ST_TO_ADDR
// player_commander := al_commander ;
16470: LD_ADDR_EXP 11
16474: PUSH
16475: LD_EXP 43
16479: ST_TO_ADDR
// hc_importance := 0 ;
16480: LD_ADDR_OWVAR 32
16484: PUSH
16485: LD_INT 0
16487: ST_TO_ADDR
// hc_gallery :=  ;
16488: LD_ADDR_OWVAR 33
16492: PUSH
16493: LD_STRING 
16495: ST_TO_ADDR
// team := CharacterSelection ( text , [ 9 , 9 , 8 ] [ Difficulty ] , [ 9 , 9 , 8 ] [ Difficulty ] , [ sel_change_class , al_commander , sel_changeable , sel_not_hired ] ^ al_force , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , class_bazooker , class_sniper ] ) ;
16496: LD_ADDR_VAR 0 5
16500: PUSH
16501: LD_STRING text
16503: PPUSH
16504: LD_INT 9
16506: PUSH
16507: LD_INT 9
16509: PUSH
16510: LD_INT 8
16512: PUSH
16513: EMPTY
16514: LIST
16515: LIST
16516: LIST
16517: PUSH
16518: LD_OWVAR 67
16522: ARRAY
16523: PPUSH
16524: LD_INT 9
16526: PUSH
16527: LD_INT 9
16529: PUSH
16530: LD_INT 8
16532: PUSH
16533: EMPTY
16534: LIST
16535: LIST
16536: LIST
16537: PUSH
16538: LD_OWVAR 67
16542: ARRAY
16543: PPUSH
16544: LD_INT -5
16546: PUSH
16547: LD_EXP 43
16551: PUSH
16552: LD_INT -3
16554: PUSH
16555: LD_INT -2
16557: PUSH
16558: EMPTY
16559: LIST
16560: LIST
16561: LIST
16562: LIST
16563: PUSH
16564: LD_EXP 44
16568: ADD
16569: PPUSH
16570: LD_INT 1
16572: PUSH
16573: LD_INT 3
16575: PUSH
16576: LD_INT 2
16578: PUSH
16579: LD_INT 1
16581: PUSH
16582: EMPTY
16583: LIST
16584: LIST
16585: PUSH
16586: LD_INT 4
16588: PUSH
16589: LD_INT 1
16591: PUSH
16592: EMPTY
16593: LIST
16594: LIST
16595: PUSH
16596: LD_INT 9
16598: PUSH
16599: LD_INT 5
16601: PUSH
16602: EMPTY
16603: LIST
16604: LIST
16605: LIST
16606: LIST
16607: LIST
16608: LIST
16609: PPUSH
16610: CALL_OW 42
16614: ST_TO_ADDR
// team := team ^ al_commander ;
16615: LD_ADDR_VAR 0 5
16619: PUSH
16620: LD_VAR 0 5
16624: PUSH
16625: LD_EXP 43
16629: ADD
16630: ST_TO_ADDR
// for i = 1 to team do
16631: LD_ADDR_VAR 0 2
16635: PUSH
16636: DOUBLE
16637: LD_INT 1
16639: DEC
16640: ST_TO_ADDR
16641: LD_VAR 0 5
16645: PUSH
16646: FOR_TO
16647: IFFALSE 16947
// begin if GetClass ( team [ i ] ) = class_mechanic then
16649: LD_VAR 0 5
16653: PUSH
16654: LD_VAR 0 2
16658: ARRAY
16659: PPUSH
16660: CALL_OW 257
16664: PUSH
16665: LD_INT 3
16667: EQUAL
16668: IFFALSE 16924
// begin uc_nation := [ 1 , 3 ] [ rand ( 1 , 2 ) ] ;
16670: LD_ADDR_OWVAR 21
16674: PUSH
16675: LD_INT 1
16677: PUSH
16678: LD_INT 3
16680: PUSH
16681: EMPTY
16682: LIST
16683: LIST
16684: PUSH
16685: LD_INT 1
16687: PPUSH
16688: LD_INT 2
16690: PPUSH
16691: CALL_OW 12
16695: ARRAY
16696: ST_TO_ADDR
// if uc_nation = 1 then
16697: LD_OWVAR 21
16701: PUSH
16702: LD_INT 1
16704: EQUAL
16705: IFFALSE 16789
// begin vc_chassis := [ us_medium_tracked , us_heavy_tracked , us_morphling ] [ i mod 3 + 1 ] ;
16707: LD_ADDR_OWVAR 37
16711: PUSH
16712: LD_INT 3
16714: PUSH
16715: LD_INT 4
16717: PUSH
16718: LD_INT 5
16720: PUSH
16721: EMPTY
16722: LIST
16723: LIST
16724: LIST
16725: PUSH
16726: LD_VAR 0 2
16730: PUSH
16731: LD_INT 3
16733: MOD
16734: PUSH
16735: LD_INT 1
16737: PLUS
16738: ARRAY
16739: ST_TO_ADDR
// vc_engine := engine_siberite ;
16740: LD_ADDR_OWVAR 39
16744: PUSH
16745: LD_INT 3
16747: ST_TO_ADDR
// vc_control := control_manual ;
16748: LD_ADDR_OWVAR 38
16752: PUSH
16753: LD_INT 1
16755: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_laser ] [ rand ( 1 , 3 ) ] ;
16756: LD_ADDR_OWVAR 40
16760: PUSH
16761: LD_INT 4
16763: PUSH
16764: LD_INT 5
16766: PUSH
16767: LD_INT 9
16769: PUSH
16770: EMPTY
16771: LIST
16772: LIST
16773: LIST
16774: PUSH
16775: LD_INT 1
16777: PPUSH
16778: LD_INT 3
16780: PPUSH
16781: CALL_OW 12
16785: ARRAY
16786: ST_TO_ADDR
// end else
16787: GO 16865
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] ;
16789: LD_ADDR_OWVAR 37
16793: PUSH
16794: LD_INT 21
16796: PUSH
16797: LD_INT 23
16799: PUSH
16800: EMPTY
16801: LIST
16802: LIST
16803: PUSH
16804: LD_VAR 0 2
16808: PUSH
16809: LD_INT 2
16811: MOD
16812: PUSH
16813: LD_INT 1
16815: PLUS
16816: ARRAY
16817: ST_TO_ADDR
// vc_engine := engine_siberite ;
16818: LD_ADDR_OWVAR 39
16822: PUSH
16823: LD_INT 3
16825: ST_TO_ADDR
// vc_control := control_manual ;
16826: LD_ADDR_OWVAR 38
16830: PUSH
16831: LD_INT 1
16833: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_rocket_launcher , ru_gatling_gun ] [ rand ( 1 , 3 ) ] ;
16834: LD_ADDR_OWVAR 40
16838: PUSH
16839: LD_INT 44
16841: PUSH
16842: LD_INT 45
16844: PUSH
16845: LD_INT 43
16847: PUSH
16848: EMPTY
16849: LIST
16850: LIST
16851: LIST
16852: PUSH
16853: LD_INT 1
16855: PPUSH
16856: LD_INT 3
16858: PPUSH
16859: CALL_OW 12
16863: ARRAY
16864: ST_TO_ADDR
// end ; un := CreateVehicle ;
16865: LD_ADDR_VAR 0 4
16869: PUSH
16870: CALL_OW 45
16874: ST_TO_ADDR
// SetDir ( un , 5 ) ;
16875: LD_VAR 0 4
16879: PPUSH
16880: LD_INT 5
16882: PPUSH
16883: CALL_OW 233
// PlaceUnitArea ( un , south_resp , false ) ;
16887: LD_VAR 0 4
16891: PPUSH
16892: LD_INT 15
16894: PPUSH
16895: LD_INT 0
16897: PPUSH
16898: CALL_OW 49
// PlaceHumanInUnit ( team [ i ] , un ) ;
16902: LD_VAR 0 5
16906: PUSH
16907: LD_VAR 0 2
16911: ARRAY
16912: PPUSH
16913: LD_VAR 0 4
16917: PPUSH
16918: CALL_OW 52
// end else
16922: GO 16945
// PlaceUnitArea ( team [ i ] , south_resp , false ) ;
16924: LD_VAR 0 5
16928: PUSH
16929: LD_VAR 0 2
16933: ARRAY
16934: PPUSH
16935: LD_INT 15
16937: PPUSH
16938: LD_INT 0
16940: PPUSH
16941: CALL_OW 49
// end ;
16945: GO 16646
16947: POP
16948: POP
// end ;
16949: LD_VAR 0 1
16953: RET
// export function RemoveAlliance ; var i ; begin
16954: LD_INT 0
16956: PPUSH
16957: PPUSH
// DestroyUnit ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
16958: LD_INT 22
16960: PUSH
16961: LD_INT 7
16963: PUSH
16964: EMPTY
16965: LIST
16966: LIST
16967: PUSH
16968: LD_INT 30
16970: PUSH
16971: LD_INT 1
16973: PUSH
16974: EMPTY
16975: LIST
16976: LIST
16977: PUSH
16978: EMPTY
16979: LIST
16980: LIST
16981: PPUSH
16982: CALL_OW 69
16986: PUSH
16987: LD_INT 1
16989: ARRAY
16990: PPUSH
16991: CALL_OW 65
// for i in FilterAllUnits ( [ f_side , 7 ] ) do
16995: LD_ADDR_VAR 0 2
16999: PUSH
17000: LD_INT 22
17002: PUSH
17003: LD_INT 7
17005: PUSH
17006: EMPTY
17007: LIST
17008: LIST
17009: PPUSH
17010: CALL_OW 69
17014: PUSH
17015: FOR_IN
17016: IFFALSE 17029
// RemoveUnit ( i ) ;
17018: LD_VAR 0 2
17022: PPUSH
17023: CALL_OW 64
17027: GO 17015
17029: POP
17030: POP
// end ;
17031: LD_VAR 0 1
17035: RET
// export function PrepareAllianceAI ; var i , un , b ; begin
17036: LD_INT 0
17038: PPUSH
17039: PPUSH
17040: PPUSH
17041: PPUSH
// SetTech ( tech_lapser , 7 , state_researched ) ;
17042: LD_INT 31
17044: PPUSH
17045: LD_INT 7
17047: PPUSH
17048: LD_INT 2
17050: PPUSH
17051: CALL_OW 322
// SetTech ( tech_ai , 7 , state_researched ) ;
17055: LD_INT 32
17057: PPUSH
17058: LD_INT 7
17060: PPUSH
17061: LD_INT 2
17063: PPUSH
17064: CALL_OW 322
// SetTech ( tech_comp3 , 7 , state_researched ) ;
17068: LD_INT 59
17070: PPUSH
17071: LD_INT 7
17073: PPUSH
17074: LD_INT 2
17076: PPUSH
17077: CALL_OW 322
// al_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
17081: LD_ADDR_EXP 45
17085: PUSH
17086: LD_INT 5
17088: PUSH
17089: LD_INT 6
17091: PUSH
17092: LD_INT 7
17094: PUSH
17095: EMPTY
17096: LIST
17097: LIST
17098: LIST
17099: PUSH
17100: LD_OWVAR 67
17104: ARRAY
17105: ST_TO_ADDR
// al_force := [ ] ;
17106: LD_ADDR_EXP 44
17110: PUSH
17111: EMPTY
17112: ST_TO_ADDR
// al_vehs := [ ] ;
17113: LD_ADDR_EXP 50
17117: PUSH
17118: EMPTY
17119: ST_TO_ADDR
// uc_side := 7 ;
17120: LD_ADDR_OWVAR 20
17124: PUSH
17125: LD_INT 7
17127: ST_TO_ADDR
// uc_nation := 1 ;
17128: LD_ADDR_OWVAR 21
17132: PUSH
17133: LD_INT 1
17135: ST_TO_ADDR
// bc_type := b_oil_mine ;
17136: LD_ADDR_OWVAR 42
17140: PUSH
17141: LD_INT 29
17143: ST_TO_ADDR
// b := CreateBuilding ;
17144: LD_ADDR_VAR 0 4
17148: PUSH
17149: CALL_OW 46
17153: ST_TO_ADDR
// PlaceUnitXYR ( b , 61 , 7 , 0 , false ) ;
17154: LD_VAR 0 4
17158: PPUSH
17159: LD_INT 61
17161: PPUSH
17162: LD_INT 7
17164: PPUSH
17165: LD_INT 0
17167: PPUSH
17168: LD_INT 0
17170: PPUSH
17171: CALL_OW 50
// bc_type := b_siberite_mine ;
17175: LD_ADDR_OWVAR 42
17179: PUSH
17180: LD_INT 30
17182: ST_TO_ADDR
// b := CreateBuilding ;
17183: LD_ADDR_VAR 0 4
17187: PUSH
17188: CALL_OW 46
17192: ST_TO_ADDR
// PlaceUnitXYR ( b , 69 , 13 , 0 , false ) ;
17193: LD_VAR 0 4
17197: PPUSH
17198: LD_INT 69
17200: PPUSH
17201: LD_INT 13
17203: PPUSH
17204: LD_INT 0
17206: PPUSH
17207: LD_INT 0
17209: PPUSH
17210: CALL_OW 50
// hc_gallery :=  ;
17214: LD_ADDR_OWVAR 33
17218: PUSH
17219: LD_STRING 
17221: ST_TO_ADDR
// hc_name :=  ;
17222: LD_ADDR_OWVAR 26
17226: PUSH
17227: LD_STRING 
17229: ST_TO_ADDR
// hc_importance := 0 ;
17230: LD_ADDR_OWVAR 32
17234: PUSH
17235: LD_INT 0
17237: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_bunker ] ] ) do
17238: LD_ADDR_VAR 0 2
17242: PUSH
17243: LD_INT 22
17245: PUSH
17246: LD_INT 7
17248: PUSH
17249: EMPTY
17250: LIST
17251: LIST
17252: PUSH
17253: LD_INT 30
17255: PUSH
17256: LD_INT 32
17258: PUSH
17259: EMPTY
17260: LIST
17261: LIST
17262: PUSH
17263: EMPTY
17264: LIST
17265: LIST
17266: PPUSH
17267: CALL_OW 69
17271: PUSH
17272: FOR_IN
17273: IFFALSE 17343
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17275: LD_ADDR_OWVAR 21
17279: PUSH
17280: LD_INT 1
17282: PUSH
17283: LD_INT 3
17285: PUSH
17286: EMPTY
17287: LIST
17288: LIST
17289: PUSH
17290: LD_INT 1
17292: PPUSH
17293: LD_INT 2
17295: PPUSH
17296: CALL_OW 12
17300: ARRAY
17301: ST_TO_ADDR
// PrepareHuman ( false , 1 , al_skill ) ;
17302: LD_INT 0
17304: PPUSH
17305: LD_INT 1
17307: PPUSH
17308: LD_EXP 45
17312: PPUSH
17313: CALL_OW 380
// un := CreateHuman ;
17317: LD_ADDR_VAR 0 3
17321: PUSH
17322: CALL_OW 44
17326: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
17327: LD_VAR 0 3
17331: PPUSH
17332: LD_VAR 0 2
17336: PPUSH
17337: CALL_OW 52
// end ;
17341: GO 17272
17343: POP
17344: POP
// for i = 1 to 3 do
17345: LD_ADDR_VAR 0 2
17349: PUSH
17350: DOUBLE
17351: LD_INT 1
17353: DEC
17354: ST_TO_ADDR
17355: LD_INT 3
17357: PUSH
17358: FOR_TO
17359: IFFALSE 17427
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17361: LD_ADDR_OWVAR 21
17365: PUSH
17366: LD_INT 1
17368: PUSH
17369: LD_INT 3
17371: PUSH
17372: EMPTY
17373: LIST
17374: LIST
17375: PUSH
17376: LD_INT 1
17378: PPUSH
17379: LD_INT 2
17381: PPUSH
17382: CALL_OW 12
17386: ARRAY
17387: ST_TO_ADDR
// PrepareHuman ( false , 4 , al_skill ) ;
17388: LD_INT 0
17390: PPUSH
17391: LD_INT 4
17393: PPUSH
17394: LD_EXP 45
17398: PPUSH
17399: CALL_OW 380
// un := CreateHuman ;
17403: LD_ADDR_VAR 0 3
17407: PUSH
17408: CALL_OW 44
17412: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_lab1 ) ;
17413: LD_VAR 0 3
17417: PPUSH
17418: LD_INT 164
17420: PPUSH
17421: CALL_OW 52
// end ;
17425: GO 17358
17427: POP
17428: POP
// for i = 1 to 4 do
17429: LD_ADDR_VAR 0 2
17433: PUSH
17434: DOUBLE
17435: LD_INT 1
17437: DEC
17438: ST_TO_ADDR
17439: LD_INT 4
17441: PUSH
17442: FOR_TO
17443: IFFALSE 17534
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17445: LD_ADDR_OWVAR 21
17449: PUSH
17450: LD_INT 1
17452: PUSH
17453: LD_INT 3
17455: PUSH
17456: EMPTY
17457: LIST
17458: LIST
17459: PUSH
17460: LD_INT 1
17462: PPUSH
17463: LD_INT 2
17465: PPUSH
17466: CALL_OW 12
17470: ARRAY
17471: ST_TO_ADDR
// PrepareHuman ( false , [ class_sniper , class_bazooker , class_bazooker ] [ Rand ( 1 , 3 ) ] , al_skill ) ;
17472: LD_INT 0
17474: PPUSH
17475: LD_INT 5
17477: PUSH
17478: LD_INT 9
17480: PUSH
17481: LD_INT 9
17483: PUSH
17484: EMPTY
17485: LIST
17486: LIST
17487: LIST
17488: PUSH
17489: LD_INT 1
17491: PPUSH
17492: LD_INT 3
17494: PPUSH
17495: CALL_OW 12
17499: ARRAY
17500: PPUSH
17501: LD_EXP 45
17505: PPUSH
17506: CALL_OW 380
// un := CreateHuman ;
17510: LD_ADDR_VAR 0 3
17514: PUSH
17515: CALL_OW 44
17519: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_bar ) ;
17520: LD_VAR 0 3
17524: PPUSH
17525: LD_INT 173
17527: PPUSH
17528: CALL_OW 52
// end ;
17532: GO 17442
17534: POP
17535: POP
// for i = 1 to 4 do
17536: LD_ADDR_VAR 0 2
17540: PUSH
17541: DOUBLE
17542: LD_INT 1
17544: DEC
17545: ST_TO_ADDR
17546: LD_INT 4
17548: PUSH
17549: FOR_TO
17550: IFFALSE 17648
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17552: LD_ADDR_OWVAR 21
17556: PUSH
17557: LD_INT 1
17559: PUSH
17560: LD_INT 3
17562: PUSH
17563: EMPTY
17564: LIST
17565: LIST
17566: PUSH
17567: LD_INT 1
17569: PPUSH
17570: LD_INT 2
17572: PPUSH
17573: CALL_OW 12
17577: ARRAY
17578: ST_TO_ADDR
// PrepareHuman ( false , 3 , al_skill ) ;
17579: LD_INT 0
17581: PPUSH
17582: LD_INT 3
17584: PPUSH
17585: LD_EXP 45
17589: PPUSH
17590: CALL_OW 380
// un := CreateHuman ;
17594: LD_ADDR_VAR 0 3
17598: PUSH
17599: CALL_OW 44
17603: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
17604: LD_VAR 0 3
17608: PPUSH
17609: LD_INT 22
17611: PUSH
17612: LD_INT 7
17614: PUSH
17615: EMPTY
17616: LIST
17617: LIST
17618: PUSH
17619: LD_INT 30
17621: PUSH
17622: LD_INT 3
17624: PUSH
17625: EMPTY
17626: LIST
17627: LIST
17628: PUSH
17629: EMPTY
17630: LIST
17631: LIST
17632: PPUSH
17633: CALL_OW 69
17637: PUSH
17638: LD_INT 1
17640: ARRAY
17641: PPUSH
17642: CALL_OW 52
// end ;
17646: GO 17549
17648: POP
17649: POP
// for i = 1 to 4 do
17650: LD_ADDR_VAR 0 2
17654: PUSH
17655: DOUBLE
17656: LD_INT 1
17658: DEC
17659: ST_TO_ADDR
17660: LD_INT 4
17662: PUSH
17663: FOR_TO
17664: IFFALSE 17732
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17666: LD_ADDR_OWVAR 21
17670: PUSH
17671: LD_INT 1
17673: PUSH
17674: LD_INT 3
17676: PUSH
17677: EMPTY
17678: LIST
17679: LIST
17680: PUSH
17681: LD_INT 1
17683: PPUSH
17684: LD_INT 2
17686: PPUSH
17687: CALL_OW 12
17691: ARRAY
17692: ST_TO_ADDR
// PrepareHuman ( false , 2 , al_skill ) ;
17693: LD_INT 0
17695: PPUSH
17696: LD_INT 2
17698: PPUSH
17699: LD_EXP 45
17703: PPUSH
17704: CALL_OW 380
// un := CreateHuman ;
17708: LD_ADDR_VAR 0 3
17712: PUSH
17713: CALL_OW 44
17717: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_depot ) ;
17718: LD_VAR 0 3
17722: PPUSH
17723: LD_INT 162
17725: PPUSH
17726: CALL_OW 52
// end ;
17730: GO 17663
17732: POP
17733: POP
// uc_nation := 3 ;
17734: LD_ADDR_OWVAR 21
17738: PUSH
17739: LD_INT 3
17741: ST_TO_ADDR
// vc_chassis := ru_medium_wheeled ;
17742: LD_ADDR_OWVAR 37
17746: PUSH
17747: LD_INT 21
17749: ST_TO_ADDR
// vc_engine := engine_siberite ;
17750: LD_ADDR_OWVAR 39
17754: PUSH
17755: LD_INT 3
17757: ST_TO_ADDR
// vc_control := control_computer ;
17758: LD_ADDR_OWVAR 38
17762: PUSH
17763: LD_INT 3
17765: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
17766: LD_ADDR_OWVAR 40
17770: PUSH
17771: LD_INT 51
17773: ST_TO_ADDR
// PlaceUnitXY ( CreateVehicle , 49 , 13 , false ) ;
17774: CALL_OW 45
17778: PPUSH
17779: LD_INT 49
17781: PPUSH
17782: LD_INT 13
17784: PPUSH
17785: LD_INT 0
17787: PPUSH
17788: CALL_OW 48
// al_turrets := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_turret ] ] ) ;
17792: LD_ADDR_EXP 52
17796: PUSH
17797: LD_INT 22
17799: PUSH
17800: LD_INT 7
17802: PUSH
17803: EMPTY
17804: LIST
17805: LIST
17806: PUSH
17807: LD_INT 30
17809: PUSH
17810: LD_INT 33
17812: PUSH
17813: EMPTY
17814: LIST
17815: LIST
17816: PUSH
17817: EMPTY
17818: LIST
17819: LIST
17820: PPUSH
17821: CALL_OW 69
17825: ST_TO_ADDR
// for i = 1 to FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_btype , b_turret ] , [ f_bweapon , 0 ] ] ] ) do
17826: LD_ADDR_VAR 0 2
17830: PUSH
17831: DOUBLE
17832: LD_INT 1
17834: DEC
17835: ST_TO_ADDR
17836: LD_INT 22
17838: PUSH
17839: LD_INT 7
17841: PUSH
17842: EMPTY
17843: LIST
17844: LIST
17845: PUSH
17846: LD_INT 30
17848: PUSH
17849: LD_INT 33
17851: PUSH
17852: EMPTY
17853: LIST
17854: LIST
17855: PUSH
17856: LD_INT 35
17858: PUSH
17859: LD_INT 0
17861: PUSH
17862: EMPTY
17863: LIST
17864: LIST
17865: PUSH
17866: EMPTY
17867: LIST
17868: LIST
17869: LIST
17870: PUSH
17871: EMPTY
17872: LIST
17873: PPUSH
17874: CALL_OW 69
17878: PUSH
17879: FOR_TO
17880: IFFALSE 17940
// AddComPlaceWeapon ( FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_btype , b_turret ] , [ f_bweapon , 0 ] ] ] ) [ i ] , ru_time_lapser ) ;
17882: LD_INT 22
17884: PUSH
17885: LD_INT 7
17887: PUSH
17888: EMPTY
17889: LIST
17890: LIST
17891: PUSH
17892: LD_INT 30
17894: PUSH
17895: LD_INT 33
17897: PUSH
17898: EMPTY
17899: LIST
17900: LIST
17901: PUSH
17902: LD_INT 35
17904: PUSH
17905: LD_INT 0
17907: PUSH
17908: EMPTY
17909: LIST
17910: LIST
17911: PUSH
17912: EMPTY
17913: LIST
17914: LIST
17915: LIST
17916: PUSH
17917: EMPTY
17918: LIST
17919: PPUSH
17920: CALL_OW 69
17924: PUSH
17925: LD_VAR 0 2
17929: ARRAY
17930: PPUSH
17931: LD_INT 49
17933: PPUSH
17934: CALL_OW 208
17938: GO 17879
17940: POP
17941: POP
// end ;
17942: LD_VAR 0 1
17946: RET
// export al_eng , al_sold , al_mech , al_sci ; export al_vehs , al_cargo , al_turrets ; export al_dep , al_lab , al_fac ; export al_bul ; every 0 0$02 trigger your_side = 1 do var i , un , veh , cr ;
17947: LD_OWVAR 2
17951: PUSH
17952: LD_INT 1
17954: EQUAL
17955: IFFALSE 18941
17957: GO 17959
17959: DISABLE
17960: LD_INT 0
17962: PPUSH
17963: PPUSH
17964: PPUSH
17965: PPUSH
// begin enable ;
17966: ENABLE
// al_bul := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] ] ) ;
17967: LD_ADDR_EXP 56
17971: PUSH
17972: LD_INT 22
17974: PUSH
17975: LD_INT 7
17977: PUSH
17978: EMPTY
17979: LIST
17980: LIST
17981: PUSH
17982: LD_INT 21
17984: PUSH
17985: LD_INT 3
17987: PUSH
17988: EMPTY
17989: LIST
17990: LIST
17991: PUSH
17992: EMPTY
17993: LIST
17994: LIST
17995: PPUSH
17996: CALL_OW 69
18000: ST_TO_ADDR
// al_lab := [ al_lab1 , al_lab2 ] ;
18001: LD_ADDR_EXP 54
18005: PUSH
18006: LD_INT 164
18008: PUSH
18009: LD_INT 197
18011: PUSH
18012: EMPTY
18013: LIST
18014: LIST
18015: ST_TO_ADDR
// al_dep := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
18016: LD_ADDR_EXP 53
18020: PUSH
18021: LD_INT 22
18023: PUSH
18024: LD_INT 7
18026: PUSH
18027: EMPTY
18028: LIST
18029: LIST
18030: PUSH
18031: LD_INT 30
18033: PUSH
18034: LD_INT 1
18036: PUSH
18037: EMPTY
18038: LIST
18039: LIST
18040: PUSH
18041: EMPTY
18042: LIST
18043: LIST
18044: PPUSH
18045: CALL_OW 69
18049: PUSH
18050: LD_INT 1
18052: ARRAY
18053: ST_TO_ADDR
// al_fac := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
18054: LD_ADDR_EXP 55
18058: PUSH
18059: LD_INT 22
18061: PUSH
18062: LD_INT 7
18064: PUSH
18065: EMPTY
18066: LIST
18067: LIST
18068: PUSH
18069: LD_INT 30
18071: PUSH
18072: LD_INT 3
18074: PUSH
18075: EMPTY
18076: LIST
18077: LIST
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: PPUSH
18083: CALL_OW 69
18087: PUSH
18088: LD_INT 1
18090: ARRAY
18091: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) then
18092: LD_INT 22
18094: PUSH
18095: LD_INT 7
18097: PUSH
18098: EMPTY
18099: LIST
18100: LIST
18101: PUSH
18102: LD_INT 34
18104: PUSH
18105: LD_INT 51
18107: PUSH
18108: EMPTY
18109: LIST
18110: LIST
18111: PUSH
18112: EMPTY
18113: LIST
18114: LIST
18115: PPUSH
18116: CALL_OW 69
18120: IFFALSE 18160
// al_cargo := FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
18122: LD_ADDR_EXP 51
18126: PUSH
18127: LD_INT 22
18129: PUSH
18130: LD_INT 7
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: PUSH
18137: LD_INT 34
18139: PUSH
18140: LD_INT 51
18142: PUSH
18143: EMPTY
18144: LIST
18145: LIST
18146: PUSH
18147: EMPTY
18148: LIST
18149: LIST
18150: PPUSH
18151: CALL_OW 69
18155: PUSH
18156: LD_INT 1
18158: ARRAY
18159: ST_TO_ADDR
// al_sold := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , class_bazooker ] ] ) ;
18160: LD_ADDR_EXP 47
18164: PUSH
18165: LD_INT 22
18167: PUSH
18168: LD_INT 7
18170: PUSH
18171: EMPTY
18172: LIST
18173: LIST
18174: PUSH
18175: LD_INT 25
18177: PUSH
18178: LD_INT 9
18180: PUSH
18181: EMPTY
18182: LIST
18183: LIST
18184: PUSH
18185: EMPTY
18186: LIST
18187: LIST
18188: PPUSH
18189: CALL_OW 69
18193: ST_TO_ADDR
// al_eng := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 2 ] ] ) ;
18194: LD_ADDR_EXP 46
18198: PUSH
18199: LD_INT 22
18201: PUSH
18202: LD_INT 7
18204: PUSH
18205: EMPTY
18206: LIST
18207: LIST
18208: PUSH
18209: LD_INT 25
18211: PUSH
18212: LD_INT 2
18214: PUSH
18215: EMPTY
18216: LIST
18217: LIST
18218: PUSH
18219: EMPTY
18220: LIST
18221: LIST
18222: PPUSH
18223: CALL_OW 69
18227: ST_TO_ADDR
// al_mech := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 3 ] ] ) ;
18228: LD_ADDR_EXP 48
18232: PUSH
18233: LD_INT 22
18235: PUSH
18236: LD_INT 7
18238: PUSH
18239: EMPTY
18240: LIST
18241: LIST
18242: PUSH
18243: LD_INT 25
18245: PUSH
18246: LD_INT 3
18248: PUSH
18249: EMPTY
18250: LIST
18251: LIST
18252: PUSH
18253: EMPTY
18254: LIST
18255: LIST
18256: PPUSH
18257: CALL_OW 69
18261: ST_TO_ADDR
// al_sci := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 4 ] ] ) ;
18262: LD_ADDR_EXP 49
18266: PUSH
18267: LD_INT 22
18269: PUSH
18270: LD_INT 7
18272: PUSH
18273: EMPTY
18274: LIST
18275: LIST
18276: PUSH
18277: LD_INT 25
18279: PUSH
18280: LD_INT 4
18282: PUSH
18283: EMPTY
18284: LIST
18285: LIST
18286: PUSH
18287: EMPTY
18288: LIST
18289: LIST
18290: PPUSH
18291: CALL_OW 69
18295: ST_TO_ADDR
// if not HasTask ( al_cargo ) and GetCargo ( al_cargo , mat_cans ) < 100 then
18296: LD_EXP 51
18300: PPUSH
18301: CALL_OW 314
18305: NOT
18306: PUSH
18307: LD_EXP 51
18311: PPUSH
18312: LD_INT 1
18314: PPUSH
18315: CALL_OW 289
18319: PUSH
18320: LD_INT 100
18322: LESS
18323: AND
18324: IFFALSE 18372
// begin cr := GetListOfCratesInArea ( us_crates ) ;
18326: LD_ADDR_VAR 0 4
18330: PUSH
18331: LD_INT 12
18333: PPUSH
18334: CALL_OW 435
18338: ST_TO_ADDR
// if cr then
18339: LD_VAR 0 4
18343: IFFALSE 18372
// ComCollect ( al_cargo , cr [ 1 ] , cr [ 2 ] ) ;
18345: LD_EXP 51
18349: PPUSH
18350: LD_VAR 0 4
18354: PUSH
18355: LD_INT 1
18357: ARRAY
18358: PPUSH
18359: LD_VAR 0 4
18363: PUSH
18364: LD_INT 2
18366: ARRAY
18367: PPUSH
18368: CALL_OW 117
// end ; if UnitFilter ( al_bul , [ f_not , [ f_lives , 1000 ] ] ) then
18372: LD_EXP 56
18376: PPUSH
18377: LD_INT 3
18379: PUSH
18380: LD_INT 24
18382: PUSH
18383: LD_INT 1000
18385: PUSH
18386: EMPTY
18387: LIST
18388: LIST
18389: PUSH
18390: EMPTY
18391: LIST
18392: LIST
18393: PPUSH
18394: CALL_OW 72
18398: IFFALSE 18528
// begin if al_eng then
18400: LD_EXP 46
18404: IFFALSE 18526
// for i = 1 to al_eng do
18406: LD_ADDR_VAR 0 1
18410: PUSH
18411: DOUBLE
18412: LD_INT 1
18414: DEC
18415: ST_TO_ADDR
18416: LD_EXP 46
18420: PUSH
18421: FOR_TO
18422: IFFALSE 18524
// if IsInUnit ( al_eng [ i ] ) then
18424: LD_EXP 46
18428: PUSH
18429: LD_VAR 0 1
18433: ARRAY
18434: PPUSH
18435: CALL_OW 310
18439: IFFALSE 18458
// ComExitBuilding ( al_eng [ i ] ) else
18441: LD_EXP 46
18445: PUSH
18446: LD_VAR 0 1
18450: ARRAY
18451: PPUSH
18452: CALL_OW 122
18456: GO 18522
// if not HasTask ( al_eng [ i ] ) then
18458: LD_EXP 46
18462: PUSH
18463: LD_VAR 0 1
18467: ARRAY
18468: PPUSH
18469: CALL_OW 314
18473: NOT
18474: IFFALSE 18522
// ComRepairBuilding ( al_eng [ i ] , UnitFilter ( al_bul , [ f_not , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
18476: LD_EXP 46
18480: PUSH
18481: LD_VAR 0 1
18485: ARRAY
18486: PPUSH
18487: LD_EXP 56
18491: PPUSH
18492: LD_INT 3
18494: PUSH
18495: LD_INT 24
18497: PUSH
18498: LD_INT 1000
18500: PUSH
18501: EMPTY
18502: LIST
18503: LIST
18504: PUSH
18505: EMPTY
18506: LIST
18507: LIST
18508: PPUSH
18509: CALL_OW 72
18513: PUSH
18514: LD_INT 1
18516: ARRAY
18517: PPUSH
18518: CALL_OW 130
18522: GO 18421
18524: POP
18525: POP
// end else
18526: GO 18610
// if al_eng then
18528: LD_EXP 46
18532: IFFALSE 18610
// if not IsInUnit ( al_eng [ 1 ] ) then
18534: LD_EXP 46
18538: PUSH
18539: LD_INT 1
18541: ARRAY
18542: PPUSH
18543: CALL_OW 310
18547: NOT
18548: IFFALSE 18610
// for i = 1 to al_eng do
18550: LD_ADDR_VAR 0 1
18554: PUSH
18555: DOUBLE
18556: LD_INT 1
18558: DEC
18559: ST_TO_ADDR
18560: LD_EXP 46
18564: PUSH
18565: FOR_TO
18566: IFFALSE 18608
// if not IsInUnit ( al_eng [ i ] ) then
18568: LD_EXP 46
18572: PUSH
18573: LD_VAR 0 1
18577: ARRAY
18578: PPUSH
18579: CALL_OW 310
18583: NOT
18584: IFFALSE 18606
// ComEnterUnit ( al_eng [ i ] , al_dep ) ;
18586: LD_EXP 46
18590: PUSH
18591: LD_VAR 0 1
18595: ARRAY
18596: PPUSH
18597: LD_EXP 53
18601: PPUSH
18602: CALL_OW 120
18606: GO 18565
18608: POP
18609: POP
// if al_vehs then
18610: LD_EXP 50
18614: IFFALSE 18714
// if BuildingStatus ( al_fac ) = bs_idle then
18616: LD_EXP 55
18620: PPUSH
18621: CALL_OW 461
18625: PUSH
18626: LD_INT 2
18628: EQUAL
18629: IFFALSE 18714
// begin ComConstruct ( al_fac , al_vehs [ 1 ] , al_vehs [ 2 ] , al_vehs [ 3 ] , al_vehs [ 4 ] ) ;
18631: LD_EXP 55
18635: PPUSH
18636: LD_EXP 50
18640: PUSH
18641: LD_INT 1
18643: ARRAY
18644: PPUSH
18645: LD_EXP 50
18649: PUSH
18650: LD_INT 2
18652: ARRAY
18653: PPUSH
18654: LD_EXP 50
18658: PUSH
18659: LD_INT 3
18661: ARRAY
18662: PPUSH
18663: LD_EXP 50
18667: PUSH
18668: LD_INT 4
18670: ARRAY
18671: PPUSH
18672: CALL_OW 125
// for i = 1 to 4 do
18676: LD_ADDR_VAR 0 1
18680: PUSH
18681: DOUBLE
18682: LD_INT 1
18684: DEC
18685: ST_TO_ADDR
18686: LD_INT 4
18688: PUSH
18689: FOR_TO
18690: IFFALSE 18712
// al_vehs := Delete ( al_vehs , 1 ) ;
18692: LD_ADDR_EXP 50
18696: PUSH
18697: LD_EXP 50
18701: PPUSH
18702: LD_INT 1
18704: PPUSH
18705: CALL_OW 3
18709: ST_TO_ADDR
18710: GO 18689
18712: POP
18713: POP
// end ; if al_force = 0 and tick mod 23100 = 0 then
18714: LD_EXP 44
18718: PUSH
18719: LD_INT 0
18721: EQUAL
18722: PUSH
18723: LD_OWVAR 1
18727: PUSH
18728: LD_INT 23100
18730: MOD
18731: PUSH
18732: LD_INT 0
18734: EQUAL
18735: AND
18736: IFFALSE 18850
// begin for i = 1 to [ 6 , 7 , 8 ] [ Difficulty ] do
18738: LD_ADDR_VAR 0 1
18742: PUSH
18743: DOUBLE
18744: LD_INT 1
18746: DEC
18747: ST_TO_ADDR
18748: LD_INT 6
18750: PUSH
18751: LD_INT 7
18753: PUSH
18754: LD_INT 8
18756: PUSH
18757: EMPTY
18758: LIST
18759: LIST
18760: LIST
18761: PUSH
18762: LD_OWVAR 67
18766: ARRAY
18767: PUSH
18768: FOR_TO
18769: IFFALSE 18848
// begin al_vehs := al_vehs ^ ru_heavy_wheeled ;
18771: LD_ADDR_EXP 50
18775: PUSH
18776: LD_EXP 50
18780: PUSH
18781: LD_INT 23
18783: ADD
18784: ST_TO_ADDR
// al_vehs := al_vehs ^ engine_combustion ;
18785: LD_ADDR_EXP 50
18789: PUSH
18790: LD_EXP 50
18794: PUSH
18795: LD_INT 1
18797: ADD
18798: ST_TO_ADDR
// al_vehs := al_vehs ^ control_computer ;
18799: LD_ADDR_EXP 50
18803: PUSH
18804: LD_EXP 50
18808: PUSH
18809: LD_INT 3
18811: ADD
18812: ST_TO_ADDR
// al_vehs := al_vehs ^ [ ru_heavy_gun , ru_rocket ] [ Rand ( 1 , 2 ) ] ;
18813: LD_ADDR_EXP 50
18817: PUSH
18818: LD_EXP 50
18822: PUSH
18823: LD_INT 46
18825: PUSH
18826: LD_INT 47
18828: PUSH
18829: EMPTY
18830: LIST
18831: LIST
18832: PUSH
18833: LD_INT 1
18835: PPUSH
18836: LD_INT 2
18838: PPUSH
18839: CALL_OW 12
18843: ARRAY
18844: ADD
18845: ST_TO_ADDR
// end ;
18846: GO 18768
18848: POP
18849: POP
// end ; if FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 then
18850: LD_INT 22
18852: PUSH
18853: LD_INT 7
18855: PUSH
18856: EMPTY
18857: LIST
18858: LIST
18859: PUSH
18860: LD_INT 34
18862: PUSH
18863: LD_INT 51
18865: PUSH
18866: EMPTY
18867: LIST
18868: LIST
18869: PUSH
18870: EMPTY
18871: LIST
18872: LIST
18873: PPUSH
18874: CALL_OW 69
18878: PUSH
18879: LD_INT 0
18881: EQUAL
18882: IFFALSE 18905
// ComConstruct ( al_fac , ru_medium_wheeled , engine_combustion , control_computer , ru_cargo_bay ) ;
18884: LD_EXP 55
18888: PPUSH
18889: LD_INT 21
18891: PPUSH
18892: LD_INT 1
18894: PPUSH
18895: LD_INT 3
18897: PPUSH
18898: LD_INT 51
18900: PPUSH
18901: CALL_OW 125
// if al_force >= [ 6 , 7 , 8 ] [ Difficulty ] then
18905: LD_EXP 44
18909: PUSH
18910: LD_INT 6
18912: PUSH
18913: LD_INT 7
18915: PUSH
18916: LD_INT 8
18918: PUSH
18919: EMPTY
18920: LIST
18921: LIST
18922: LIST
18923: PUSH
18924: LD_OWVAR 67
18928: ARRAY
18929: GREATEREQUAL
18930: IFFALSE 18941
// RaiseSailEvent ( event_alliance_attack ) ;
18932: LD_EXP 23
18936: PPUSH
18937: CALL_OW 427
// end ;
18941: PPOPN 4
18943: END
// export function AllianceAttack ( ) ; var path , units ; begin
18944: LD_INT 0
18946: PPUSH
18947: PPUSH
18948: PPUSH
// units := al_force ;
18949: LD_ADDR_VAR 0 3
18953: PUSH
18954: LD_EXP 44
18958: ST_TO_ADDR
// al_force := [ ] ;
18959: LD_ADDR_EXP 44
18963: PUSH
18964: EMPTY
18965: ST_TO_ADDR
// if rand ( 0 , 1 ) then
18966: LD_INT 0
18968: PPUSH
18969: LD_INT 1
18971: PPUSH
18972: CALL_OW 12
18976: IFFALSE 19020
// path := [ [ 49 , 53 ] , [ 52 , 90 ] , [ 63 , 114 ] ] else
18978: LD_ADDR_VAR 0 2
18982: PUSH
18983: LD_INT 49
18985: PUSH
18986: LD_INT 53
18988: PUSH
18989: EMPTY
18990: LIST
18991: LIST
18992: PUSH
18993: LD_INT 52
18995: PUSH
18996: LD_INT 90
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: PUSH
19003: LD_INT 63
19005: PUSH
19006: LD_INT 114
19008: PUSH
19009: EMPTY
19010: LIST
19011: LIST
19012: PUSH
19013: EMPTY
19014: LIST
19015: LIST
19016: LIST
19017: ST_TO_ADDR
19018: GO 19049
// path := [ [ 89 , 52 ] , [ 143 , 50 ] ] ;
19020: LD_ADDR_VAR 0 2
19024: PUSH
19025: LD_INT 89
19027: PUSH
19028: LD_INT 52
19030: PUSH
19031: EMPTY
19032: LIST
19033: LIST
19034: PUSH
19035: LD_INT 143
19037: PUSH
19038: LD_INT 50
19040: PUSH
19041: EMPTY
19042: LIST
19043: LIST
19044: PUSH
19045: EMPTY
19046: LIST
19047: LIST
19048: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19049: LD_INT 35
19051: PPUSH
19052: CALL_OW 67
// until not AgressiveMove ( units , path ) ;
19056: LD_VAR 0 3
19060: PPUSH
19061: LD_VAR 0 2
19065: PPUSH
19066: CALL 79789 0 2
19070: NOT
19071: IFFALSE 19049
// end ; end_of_file
19073: LD_VAR 0 1
19077: RET
// export ar_commander , ar_force , ar_skill ; export function PrepareArabian ; var i , filter , un , team ; begin
19078: LD_INT 0
19080: PPUSH
19081: PPUSH
19082: PPUSH
19083: PPUSH
19084: PPUSH
// ar_skill := [ 9 , 8 , 7 ] [ Difficulty ] ;
19085: LD_ADDR_EXP 59
19089: PUSH
19090: LD_INT 9
19092: PUSH
19093: LD_INT 8
19095: PUSH
19096: LD_INT 7
19098: PUSH
19099: EMPTY
19100: LIST
19101: LIST
19102: LIST
19103: PUSH
19104: LD_OWVAR 67
19108: ARRAY
19109: ST_TO_ADDR
// ar_force := [ ] ;
19110: LD_ADDR_EXP 58
19114: PUSH
19115: EMPTY
19116: ST_TO_ADDR
// RemoveAlliance ;
19117: CALL 16954 0 0
// RemoveEnvironmentArea ( evn ) ;
19121: LD_INT 17
19123: PPUSH
19124: CALL_OW 355
// your_side := 2 ;
19128: LD_ADDR_OWVAR 2
19132: PUSH
19133: LD_INT 2
19135: ST_TO_ADDR
// uc_side := 2 ;
19136: LD_ADDR_OWVAR 20
19140: PUSH
19141: LD_INT 2
19143: ST_TO_ADDR
// uc_nation := nation_arabian ;
19144: LD_ADDR_OWVAR 21
19148: PUSH
19149: LD_INT 2
19151: ST_TO_ADDR
// hc_gallery :=  ;
19152: LD_ADDR_OWVAR 33
19156: PUSH
19157: LD_STRING 
19159: ST_TO_ADDR
// hc_name :=  ;
19160: LD_ADDR_OWVAR 26
19164: PUSH
19165: LD_STRING 
19167: ST_TO_ADDR
// hc_importance := 0 ;
19168: LD_ADDR_OWVAR 32
19172: PUSH
19173: LD_INT 0
19175: ST_TO_ADDR
// for i = 1 to 20 do
19176: LD_ADDR_VAR 0 2
19180: PUSH
19181: DOUBLE
19182: LD_INT 1
19184: DEC
19185: ST_TO_ADDR
19186: LD_INT 20
19188: PUSH
19189: FOR_TO
19190: IFFALSE 19255
// begin PrepareHuman ( false , Rand ( 1 , 4 ) , ar_skill ) ;
19192: LD_INT 0
19194: PPUSH
19195: LD_INT 1
19197: PPUSH
19198: LD_INT 4
19200: PPUSH
19201: CALL_OW 12
19205: PPUSH
19206: LD_EXP 59
19210: PPUSH
19211: CALL_OW 380
// un := CreateHuman ;
19215: LD_ADDR_VAR 0 4
19219: PUSH
19220: CALL_OW 44
19224: ST_TO_ADDR
// SetDir ( un , 2 ) ;
19225: LD_VAR 0 4
19229: PPUSH
19230: LD_INT 2
19232: PPUSH
19233: CALL_OW 233
// ar_force := ar_force ^ un ;
19237: LD_ADDR_EXP 58
19241: PUSH
19242: LD_EXP 58
19246: PUSH
19247: LD_VAR 0 4
19251: ADD
19252: ST_TO_ADDR
// end ;
19253: GO 19189
19255: POP
19256: POP
// hc_importance := 100 ;
19257: LD_ADDR_OWVAR 32
19261: PUSH
19262: LD_INT 100
19264: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , ar_skill ) ;
19265: LD_INT 1
19267: PPUSH
19268: LD_INT 11
19270: PPUSH
19271: LD_EXP 59
19275: PPUSH
19276: CALL_OW 380
// hc_gallery := skirmish ;
19280: LD_ADDR_OWVAR 33
19284: PUSH
19285: LD_STRING skirmish
19287: ST_TO_ADDR
// hc_face_number := 9 ;
19288: LD_ADDR_OWVAR 34
19292: PUSH
19293: LD_INT 9
19295: ST_TO_ADDR
// hc_name := Muhammad Mustaffi ;
19296: LD_ADDR_OWVAR 26
19300: PUSH
19301: LD_STRING Muhammad Mustaffi
19303: ST_TO_ADDR
// ar_commander := CreateHuman ;
19304: LD_ADDR_EXP 57
19308: PUSH
19309: CALL_OW 44
19313: ST_TO_ADDR
// SetDir ( ar_commander , 2 ) ;
19314: LD_EXP 57
19318: PPUSH
19319: LD_INT 2
19321: PPUSH
19322: CALL_OW 233
// player_commander := ar_commander ;
19326: LD_ADDR_EXP 11
19330: PUSH
19331: LD_EXP 57
19335: ST_TO_ADDR
// hc_importance := 0 ;
19336: LD_ADDR_OWVAR 32
19340: PUSH
19341: LD_INT 0
19343: ST_TO_ADDR
// hc_gallery :=  ;
19344: LD_ADDR_OWVAR 33
19348: PUSH
19349: LD_STRING 
19351: ST_TO_ADDR
// team := CharacterSelection ( text , [ 14 , 13 , 12 ] [ Difficulty ] , [ 14 , 13 , 12 ] [ Difficulty ] , [ sel_dont_change_class , ar_commander , sel_not_hired , sel_changeable , sel_change_class ] ^ ar_force , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , class_mortar ] ) ;
19352: LD_ADDR_VAR 0 5
19356: PUSH
19357: LD_STRING text
19359: PPUSH
19360: LD_INT 14
19362: PUSH
19363: LD_INT 13
19365: PUSH
19366: LD_INT 12
19368: PUSH
19369: EMPTY
19370: LIST
19371: LIST
19372: LIST
19373: PUSH
19374: LD_OWVAR 67
19378: ARRAY
19379: PPUSH
19380: LD_INT 14
19382: PUSH
19383: LD_INT 13
19385: PUSH
19386: LD_INT 12
19388: PUSH
19389: EMPTY
19390: LIST
19391: LIST
19392: LIST
19393: PUSH
19394: LD_OWVAR 67
19398: ARRAY
19399: PPUSH
19400: LD_INT -6
19402: PUSH
19403: LD_EXP 57
19407: PUSH
19408: LD_INT -2
19410: PUSH
19411: LD_INT -3
19413: PUSH
19414: LD_INT -5
19416: PUSH
19417: EMPTY
19418: LIST
19419: LIST
19420: LIST
19421: LIST
19422: LIST
19423: PUSH
19424: LD_EXP 58
19428: ADD
19429: PPUSH
19430: LD_INT 1
19432: PUSH
19433: LD_INT 3
19435: PUSH
19436: LD_INT 2
19438: PUSH
19439: LD_INT 1
19441: PUSH
19442: EMPTY
19443: LIST
19444: LIST
19445: PUSH
19446: LD_INT 4
19448: PUSH
19449: LD_INT 1
19451: PUSH
19452: EMPTY
19453: LIST
19454: LIST
19455: PUSH
19456: LD_INT 8
19458: PUSH
19459: EMPTY
19460: LIST
19461: LIST
19462: LIST
19463: LIST
19464: LIST
19465: PPUSH
19466: CALL_OW 42
19470: ST_TO_ADDR
// team := team ^ ar_commander ;
19471: LD_ADDR_VAR 0 5
19475: PUSH
19476: LD_VAR 0 5
19480: PUSH
19481: LD_EXP 57
19485: ADD
19486: ST_TO_ADDR
// for i = 1 to 4 do
19487: LD_ADDR_VAR 0 2
19491: PUSH
19492: DOUBLE
19493: LD_INT 1
19495: DEC
19496: ST_TO_ADDR
19497: LD_INT 4
19499: PUSH
19500: FOR_TO
19501: IFFALSE 19601
// begin vc_chassis := ar_medium_trike ;
19503: LD_ADDR_OWVAR 37
19507: PUSH
19508: LD_INT 13
19510: ST_TO_ADDR
// vc_engine := engine_siberite ;
19511: LD_ADDR_OWVAR 39
19515: PUSH
19516: LD_INT 3
19518: ST_TO_ADDR
// vc_control := control_manual ;
19519: LD_ADDR_OWVAR 38
19523: PUSH
19524: LD_INT 1
19526: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_cargo_bay , ar_crane , ar_gun ] [ i ] ;
19527: LD_ADDR_OWVAR 40
19531: PUSH
19532: LD_INT 27
19534: PUSH
19535: LD_INT 32
19537: PUSH
19538: LD_INT 88
19540: PUSH
19541: LD_INT 27
19543: PUSH
19544: EMPTY
19545: LIST
19546: LIST
19547: LIST
19548: LIST
19549: PUSH
19550: LD_VAR 0 2
19554: ARRAY
19555: ST_TO_ADDR
// un := CreateVehicle ;
19556: LD_ADDR_VAR 0 4
19560: PUSH
19561: CALL_OW 45
19565: ST_TO_ADDR
// SetDir ( un , 2 ) ;
19566: LD_VAR 0 4
19570: PPUSH
19571: LD_INT 2
19573: PPUSH
19574: CALL_OW 233
// PlaceUnitXYR ( un , 54 , 15 , 6 , false ) ;
19578: LD_VAR 0 4
19582: PPUSH
19583: LD_INT 54
19585: PPUSH
19586: LD_INT 15
19588: PPUSH
19589: LD_INT 6
19591: PPUSH
19592: LD_INT 0
19594: PPUSH
19595: CALL_OW 50
// end ;
19599: GO 19500
19601: POP
19602: POP
// for i = 1 to team do
19603: LD_ADDR_VAR 0 2
19607: PUSH
19608: DOUBLE
19609: LD_INT 1
19611: DEC
19612: ST_TO_ADDR
19613: LD_VAR 0 5
19617: PUSH
19618: FOR_TO
19619: IFFALSE 19716
// begin if FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) then
19621: LD_INT 22
19623: PUSH
19624: LD_INT 2
19626: PUSH
19627: EMPTY
19628: LIST
19629: LIST
19630: PUSH
19631: LD_INT 58
19633: PUSH
19634: EMPTY
19635: LIST
19636: PUSH
19637: EMPTY
19638: LIST
19639: LIST
19640: PPUSH
19641: CALL_OW 69
19645: IFFALSE 19693
// PlaceHumanInUnit ( team [ i ] , FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) [ 1 ] ) else
19647: LD_VAR 0 5
19651: PUSH
19652: LD_VAR 0 2
19656: ARRAY
19657: PPUSH
19658: LD_INT 22
19660: PUSH
19661: LD_INT 2
19663: PUSH
19664: EMPTY
19665: LIST
19666: LIST
19667: PUSH
19668: LD_INT 58
19670: PUSH
19671: EMPTY
19672: LIST
19673: PUSH
19674: EMPTY
19675: LIST
19676: LIST
19677: PPUSH
19678: CALL_OW 69
19682: PUSH
19683: LD_INT 1
19685: ARRAY
19686: PPUSH
19687: CALL_OW 52
19691: GO 19714
// PlaceUnitArea ( team [ i ] , center_resp , false ) ;
19693: LD_VAR 0 5
19697: PUSH
19698: LD_VAR 0 2
19702: ARRAY
19703: PPUSH
19704: LD_INT 16
19706: PPUSH
19707: LD_INT 0
19709: PPUSH
19710: CALL_OW 49
// end ;
19714: GO 19618
19716: POP
19717: POP
// uc_side := 0 ;
19718: LD_ADDR_OWVAR 20
19722: PUSH
19723: LD_INT 0
19725: ST_TO_ADDR
// uc_nation := 0 ;
19726: LD_ADDR_OWVAR 21
19730: PUSH
19731: LD_INT 0
19733: ST_TO_ADDR
// vc_chassis := 31 ;
19734: LD_ADDR_OWVAR 37
19738: PUSH
19739: LD_INT 31
19741: ST_TO_ADDR
// vc_control := control_rider ;
19742: LD_ADDR_OWVAR 38
19746: PUSH
19747: LD_INT 4
19749: ST_TO_ADDR
// PlaceUnitXY ( CreateVehicle , 96 , 20 , false ) ;
19750: CALL_OW 45
19754: PPUSH
19755: LD_INT 96
19757: PPUSH
19758: LD_INT 20
19760: PPUSH
19761: LD_INT 0
19763: PPUSH
19764: CALL_OW 48
// end ; end_of_file end_of_file
19768: LD_VAR 0 1
19772: RET
// export globalGameSaveCounter ; every 0 0$1 do
19773: GO 19775
19775: DISABLE
// begin enable ;
19776: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19777: LD_STRING updateTimer(
19779: PUSH
19780: LD_OWVAR 1
19784: STR
19785: PUSH
19786: LD_STRING );
19788: STR
19789: PPUSH
19790: CALL_OW 559
// end ;
19794: END
// every 0 0$1 do
19795: GO 19797
19797: DISABLE
// begin globalGameSaveCounter := 0 ;
19798: LD_ADDR_EXP 60
19802: PUSH
19803: LD_INT 0
19805: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
19806: LD_STRING setGameSaveCounter(0)
19808: PPUSH
19809: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
19813: LD_STRING initStreamRollete();
19815: PPUSH
19816: CALL_OW 559
// InitStreamMode ;
19820: CALL 21146 0 0
// DefineStreamItems ( false ) ;
19824: LD_INT 0
19826: PPUSH
19827: CALL 21610 0 1
// end ;
19831: END
// export function SOS_MapStart ( ) ; begin
19832: LD_INT 0
19834: PPUSH
// if streamModeActive then
19835: LD_EXP 61
19839: IFFALSE 19848
// DefineStreamItems ( true ) ;
19841: LD_INT 1
19843: PPUSH
19844: CALL 21610 0 1
// UpdateLuaVariables ( ) ;
19848: CALL 19865 0 0
// UpdateFactoryWaypoints ( ) ;
19852: CALL 34479 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19856: CALL 34736 0 0
// end ;
19860: LD_VAR 0 1
19864: RET
// function UpdateLuaVariables ( ) ; begin
19865: LD_INT 0
19867: PPUSH
// if globalGameSaveCounter then
19868: LD_EXP 60
19872: IFFALSE 19906
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
19874: LD_ADDR_EXP 60
19878: PUSH
19879: LD_EXP 60
19883: PPUSH
19884: CALL 78546 0 1
19888: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19889: LD_STRING setGameSaveCounter(
19891: PUSH
19892: LD_EXP 60
19896: STR
19897: PUSH
19898: LD_STRING )
19900: STR
19901: PPUSH
19902: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
19906: LD_STRING setGameDifficulty(
19908: PUSH
19909: LD_OWVAR 67
19913: STR
19914: PUSH
19915: LD_STRING )
19917: STR
19918: PPUSH
19919: CALL_OW 559
// end ;
19923: LD_VAR 0 1
19927: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19928: LD_INT 0
19930: PPUSH
// if p2 = stream_mode then
19931: LD_VAR 0 2
19935: PUSH
19936: LD_INT 100
19938: EQUAL
19939: IFFALSE 20942
// begin if not StreamModeActive then
19941: LD_EXP 61
19945: NOT
19946: IFFALSE 19956
// StreamModeActive := true ;
19948: LD_ADDR_EXP 61
19952: PUSH
19953: LD_INT 1
19955: ST_TO_ADDR
// if p3 = 0 then
19956: LD_VAR 0 3
19960: PUSH
19961: LD_INT 0
19963: EQUAL
19964: IFFALSE 19970
// InitStreamMode ;
19966: CALL 21146 0 0
// if p3 = 1 then
19970: LD_VAR 0 3
19974: PUSH
19975: LD_INT 1
19977: EQUAL
19978: IFFALSE 19988
// sRocket := true ;
19980: LD_ADDR_EXP 66
19984: PUSH
19985: LD_INT 1
19987: ST_TO_ADDR
// if p3 = 2 then
19988: LD_VAR 0 3
19992: PUSH
19993: LD_INT 2
19995: EQUAL
19996: IFFALSE 20006
// sSpeed := true ;
19998: LD_ADDR_EXP 65
20002: PUSH
20003: LD_INT 1
20005: ST_TO_ADDR
// if p3 = 3 then
20006: LD_VAR 0 3
20010: PUSH
20011: LD_INT 3
20013: EQUAL
20014: IFFALSE 20024
// sEngine := true ;
20016: LD_ADDR_EXP 67
20020: PUSH
20021: LD_INT 1
20023: ST_TO_ADDR
// if p3 = 4 then
20024: LD_VAR 0 3
20028: PUSH
20029: LD_INT 4
20031: EQUAL
20032: IFFALSE 20042
// sSpec := true ;
20034: LD_ADDR_EXP 64
20038: PUSH
20039: LD_INT 1
20041: ST_TO_ADDR
// if p3 = 5 then
20042: LD_VAR 0 3
20046: PUSH
20047: LD_INT 5
20049: EQUAL
20050: IFFALSE 20060
// sLevel := true ;
20052: LD_ADDR_EXP 68
20056: PUSH
20057: LD_INT 1
20059: ST_TO_ADDR
// if p3 = 6 then
20060: LD_VAR 0 3
20064: PUSH
20065: LD_INT 6
20067: EQUAL
20068: IFFALSE 20078
// sArmoury := true ;
20070: LD_ADDR_EXP 69
20074: PUSH
20075: LD_INT 1
20077: ST_TO_ADDR
// if p3 = 7 then
20078: LD_VAR 0 3
20082: PUSH
20083: LD_INT 7
20085: EQUAL
20086: IFFALSE 20096
// sRadar := true ;
20088: LD_ADDR_EXP 70
20092: PUSH
20093: LD_INT 1
20095: ST_TO_ADDR
// if p3 = 8 then
20096: LD_VAR 0 3
20100: PUSH
20101: LD_INT 8
20103: EQUAL
20104: IFFALSE 20114
// sBunker := true ;
20106: LD_ADDR_EXP 71
20110: PUSH
20111: LD_INT 1
20113: ST_TO_ADDR
// if p3 = 9 then
20114: LD_VAR 0 3
20118: PUSH
20119: LD_INT 9
20121: EQUAL
20122: IFFALSE 20132
// sHack := true ;
20124: LD_ADDR_EXP 72
20128: PUSH
20129: LD_INT 1
20131: ST_TO_ADDR
// if p3 = 10 then
20132: LD_VAR 0 3
20136: PUSH
20137: LD_INT 10
20139: EQUAL
20140: IFFALSE 20150
// sFire := true ;
20142: LD_ADDR_EXP 73
20146: PUSH
20147: LD_INT 1
20149: ST_TO_ADDR
// if p3 = 11 then
20150: LD_VAR 0 3
20154: PUSH
20155: LD_INT 11
20157: EQUAL
20158: IFFALSE 20168
// sRefresh := true ;
20160: LD_ADDR_EXP 74
20164: PUSH
20165: LD_INT 1
20167: ST_TO_ADDR
// if p3 = 12 then
20168: LD_VAR 0 3
20172: PUSH
20173: LD_INT 12
20175: EQUAL
20176: IFFALSE 20186
// sExp := true ;
20178: LD_ADDR_EXP 75
20182: PUSH
20183: LD_INT 1
20185: ST_TO_ADDR
// if p3 = 13 then
20186: LD_VAR 0 3
20190: PUSH
20191: LD_INT 13
20193: EQUAL
20194: IFFALSE 20204
// sDepot := true ;
20196: LD_ADDR_EXP 76
20200: PUSH
20201: LD_INT 1
20203: ST_TO_ADDR
// if p3 = 14 then
20204: LD_VAR 0 3
20208: PUSH
20209: LD_INT 14
20211: EQUAL
20212: IFFALSE 20222
// sFlag := true ;
20214: LD_ADDR_EXP 77
20218: PUSH
20219: LD_INT 1
20221: ST_TO_ADDR
// if p3 = 15 then
20222: LD_VAR 0 3
20226: PUSH
20227: LD_INT 15
20229: EQUAL
20230: IFFALSE 20240
// sKamikadze := true ;
20232: LD_ADDR_EXP 85
20236: PUSH
20237: LD_INT 1
20239: ST_TO_ADDR
// if p3 = 16 then
20240: LD_VAR 0 3
20244: PUSH
20245: LD_INT 16
20247: EQUAL
20248: IFFALSE 20258
// sTroll := true ;
20250: LD_ADDR_EXP 86
20254: PUSH
20255: LD_INT 1
20257: ST_TO_ADDR
// if p3 = 17 then
20258: LD_VAR 0 3
20262: PUSH
20263: LD_INT 17
20265: EQUAL
20266: IFFALSE 20276
// sSlow := true ;
20268: LD_ADDR_EXP 87
20272: PUSH
20273: LD_INT 1
20275: ST_TO_ADDR
// if p3 = 18 then
20276: LD_VAR 0 3
20280: PUSH
20281: LD_INT 18
20283: EQUAL
20284: IFFALSE 20294
// sLack := true ;
20286: LD_ADDR_EXP 88
20290: PUSH
20291: LD_INT 1
20293: ST_TO_ADDR
// if p3 = 19 then
20294: LD_VAR 0 3
20298: PUSH
20299: LD_INT 19
20301: EQUAL
20302: IFFALSE 20312
// sTank := true ;
20304: LD_ADDR_EXP 90
20308: PUSH
20309: LD_INT 1
20311: ST_TO_ADDR
// if p3 = 20 then
20312: LD_VAR 0 3
20316: PUSH
20317: LD_INT 20
20319: EQUAL
20320: IFFALSE 20330
// sRemote := true ;
20322: LD_ADDR_EXP 91
20326: PUSH
20327: LD_INT 1
20329: ST_TO_ADDR
// if p3 = 21 then
20330: LD_VAR 0 3
20334: PUSH
20335: LD_INT 21
20337: EQUAL
20338: IFFALSE 20348
// sPowell := true ;
20340: LD_ADDR_EXP 92
20344: PUSH
20345: LD_INT 1
20347: ST_TO_ADDR
// if p3 = 22 then
20348: LD_VAR 0 3
20352: PUSH
20353: LD_INT 22
20355: EQUAL
20356: IFFALSE 20366
// sTeleport := true ;
20358: LD_ADDR_EXP 95
20362: PUSH
20363: LD_INT 1
20365: ST_TO_ADDR
// if p3 = 23 then
20366: LD_VAR 0 3
20370: PUSH
20371: LD_INT 23
20373: EQUAL
20374: IFFALSE 20384
// sOilTower := true ;
20376: LD_ADDR_EXP 97
20380: PUSH
20381: LD_INT 1
20383: ST_TO_ADDR
// if p3 = 24 then
20384: LD_VAR 0 3
20388: PUSH
20389: LD_INT 24
20391: EQUAL
20392: IFFALSE 20402
// sShovel := true ;
20394: LD_ADDR_EXP 98
20398: PUSH
20399: LD_INT 1
20401: ST_TO_ADDR
// if p3 = 25 then
20402: LD_VAR 0 3
20406: PUSH
20407: LD_INT 25
20409: EQUAL
20410: IFFALSE 20420
// sSheik := true ;
20412: LD_ADDR_EXP 99
20416: PUSH
20417: LD_INT 1
20419: ST_TO_ADDR
// if p3 = 26 then
20420: LD_VAR 0 3
20424: PUSH
20425: LD_INT 26
20427: EQUAL
20428: IFFALSE 20438
// sEarthquake := true ;
20430: LD_ADDR_EXP 101
20434: PUSH
20435: LD_INT 1
20437: ST_TO_ADDR
// if p3 = 27 then
20438: LD_VAR 0 3
20442: PUSH
20443: LD_INT 27
20445: EQUAL
20446: IFFALSE 20456
// sAI := true ;
20448: LD_ADDR_EXP 102
20452: PUSH
20453: LD_INT 1
20455: ST_TO_ADDR
// if p3 = 28 then
20456: LD_VAR 0 3
20460: PUSH
20461: LD_INT 28
20463: EQUAL
20464: IFFALSE 20474
// sCargo := true ;
20466: LD_ADDR_EXP 105
20470: PUSH
20471: LD_INT 1
20473: ST_TO_ADDR
// if p3 = 29 then
20474: LD_VAR 0 3
20478: PUSH
20479: LD_INT 29
20481: EQUAL
20482: IFFALSE 20492
// sDLaser := true ;
20484: LD_ADDR_EXP 106
20488: PUSH
20489: LD_INT 1
20491: ST_TO_ADDR
// if p3 = 30 then
20492: LD_VAR 0 3
20496: PUSH
20497: LD_INT 30
20499: EQUAL
20500: IFFALSE 20510
// sExchange := true ;
20502: LD_ADDR_EXP 107
20506: PUSH
20507: LD_INT 1
20509: ST_TO_ADDR
// if p3 = 31 then
20510: LD_VAR 0 3
20514: PUSH
20515: LD_INT 31
20517: EQUAL
20518: IFFALSE 20528
// sFac := true ;
20520: LD_ADDR_EXP 108
20524: PUSH
20525: LD_INT 1
20527: ST_TO_ADDR
// if p3 = 32 then
20528: LD_VAR 0 3
20532: PUSH
20533: LD_INT 32
20535: EQUAL
20536: IFFALSE 20546
// sPower := true ;
20538: LD_ADDR_EXP 109
20542: PUSH
20543: LD_INT 1
20545: ST_TO_ADDR
// if p3 = 33 then
20546: LD_VAR 0 3
20550: PUSH
20551: LD_INT 33
20553: EQUAL
20554: IFFALSE 20564
// sRandom := true ;
20556: LD_ADDR_EXP 110
20560: PUSH
20561: LD_INT 1
20563: ST_TO_ADDR
// if p3 = 34 then
20564: LD_VAR 0 3
20568: PUSH
20569: LD_INT 34
20571: EQUAL
20572: IFFALSE 20582
// sShield := true ;
20574: LD_ADDR_EXP 111
20578: PUSH
20579: LD_INT 1
20581: ST_TO_ADDR
// if p3 = 35 then
20582: LD_VAR 0 3
20586: PUSH
20587: LD_INT 35
20589: EQUAL
20590: IFFALSE 20600
// sTime := true ;
20592: LD_ADDR_EXP 112
20596: PUSH
20597: LD_INT 1
20599: ST_TO_ADDR
// if p3 = 36 then
20600: LD_VAR 0 3
20604: PUSH
20605: LD_INT 36
20607: EQUAL
20608: IFFALSE 20618
// sTools := true ;
20610: LD_ADDR_EXP 113
20614: PUSH
20615: LD_INT 1
20617: ST_TO_ADDR
// if p3 = 101 then
20618: LD_VAR 0 3
20622: PUSH
20623: LD_INT 101
20625: EQUAL
20626: IFFALSE 20636
// sSold := true ;
20628: LD_ADDR_EXP 78
20632: PUSH
20633: LD_INT 1
20635: ST_TO_ADDR
// if p3 = 102 then
20636: LD_VAR 0 3
20640: PUSH
20641: LD_INT 102
20643: EQUAL
20644: IFFALSE 20654
// sDiff := true ;
20646: LD_ADDR_EXP 79
20650: PUSH
20651: LD_INT 1
20653: ST_TO_ADDR
// if p3 = 103 then
20654: LD_VAR 0 3
20658: PUSH
20659: LD_INT 103
20661: EQUAL
20662: IFFALSE 20672
// sFog := true ;
20664: LD_ADDR_EXP 82
20668: PUSH
20669: LD_INT 1
20671: ST_TO_ADDR
// if p3 = 104 then
20672: LD_VAR 0 3
20676: PUSH
20677: LD_INT 104
20679: EQUAL
20680: IFFALSE 20690
// sReset := true ;
20682: LD_ADDR_EXP 83
20686: PUSH
20687: LD_INT 1
20689: ST_TO_ADDR
// if p3 = 105 then
20690: LD_VAR 0 3
20694: PUSH
20695: LD_INT 105
20697: EQUAL
20698: IFFALSE 20708
// sSun := true ;
20700: LD_ADDR_EXP 84
20704: PUSH
20705: LD_INT 1
20707: ST_TO_ADDR
// if p3 = 106 then
20708: LD_VAR 0 3
20712: PUSH
20713: LD_INT 106
20715: EQUAL
20716: IFFALSE 20726
// sTiger := true ;
20718: LD_ADDR_EXP 80
20722: PUSH
20723: LD_INT 1
20725: ST_TO_ADDR
// if p3 = 107 then
20726: LD_VAR 0 3
20730: PUSH
20731: LD_INT 107
20733: EQUAL
20734: IFFALSE 20744
// sBomb := true ;
20736: LD_ADDR_EXP 81
20740: PUSH
20741: LD_INT 1
20743: ST_TO_ADDR
// if p3 = 108 then
20744: LD_VAR 0 3
20748: PUSH
20749: LD_INT 108
20751: EQUAL
20752: IFFALSE 20762
// sWound := true ;
20754: LD_ADDR_EXP 89
20758: PUSH
20759: LD_INT 1
20761: ST_TO_ADDR
// if p3 = 109 then
20762: LD_VAR 0 3
20766: PUSH
20767: LD_INT 109
20769: EQUAL
20770: IFFALSE 20780
// sBetray := true ;
20772: LD_ADDR_EXP 93
20776: PUSH
20777: LD_INT 1
20779: ST_TO_ADDR
// if p3 = 110 then
20780: LD_VAR 0 3
20784: PUSH
20785: LD_INT 110
20787: EQUAL
20788: IFFALSE 20798
// sContamin := true ;
20790: LD_ADDR_EXP 94
20794: PUSH
20795: LD_INT 1
20797: ST_TO_ADDR
// if p3 = 111 then
20798: LD_VAR 0 3
20802: PUSH
20803: LD_INT 111
20805: EQUAL
20806: IFFALSE 20816
// sOil := true ;
20808: LD_ADDR_EXP 96
20812: PUSH
20813: LD_INT 1
20815: ST_TO_ADDR
// if p3 = 112 then
20816: LD_VAR 0 3
20820: PUSH
20821: LD_INT 112
20823: EQUAL
20824: IFFALSE 20834
// sStu := true ;
20826: LD_ADDR_EXP 100
20830: PUSH
20831: LD_INT 1
20833: ST_TO_ADDR
// if p3 = 113 then
20834: LD_VAR 0 3
20838: PUSH
20839: LD_INT 113
20841: EQUAL
20842: IFFALSE 20852
// sBazooka := true ;
20844: LD_ADDR_EXP 103
20848: PUSH
20849: LD_INT 1
20851: ST_TO_ADDR
// if p3 = 114 then
20852: LD_VAR 0 3
20856: PUSH
20857: LD_INT 114
20859: EQUAL
20860: IFFALSE 20870
// sMortar := true ;
20862: LD_ADDR_EXP 104
20866: PUSH
20867: LD_INT 1
20869: ST_TO_ADDR
// if p3 = 115 then
20870: LD_VAR 0 3
20874: PUSH
20875: LD_INT 115
20877: EQUAL
20878: IFFALSE 20888
// sRanger := true ;
20880: LD_ADDR_EXP 114
20884: PUSH
20885: LD_INT 1
20887: ST_TO_ADDR
// if p3 = 116 then
20888: LD_VAR 0 3
20892: PUSH
20893: LD_INT 116
20895: EQUAL
20896: IFFALSE 20906
// sComputer := true ;
20898: LD_ADDR_EXP 115
20902: PUSH
20903: LD_INT 1
20905: ST_TO_ADDR
// if p3 = 117 then
20906: LD_VAR 0 3
20910: PUSH
20911: LD_INT 117
20913: EQUAL
20914: IFFALSE 20924
// s30 := true ;
20916: LD_ADDR_EXP 116
20920: PUSH
20921: LD_INT 1
20923: ST_TO_ADDR
// if p3 = 118 then
20924: LD_VAR 0 3
20928: PUSH
20929: LD_INT 118
20931: EQUAL
20932: IFFALSE 20942
// s60 := true ;
20934: LD_ADDR_EXP 117
20938: PUSH
20939: LD_INT 1
20941: ST_TO_ADDR
// end ; if p2 = hack_mode then
20942: LD_VAR 0 2
20946: PUSH
20947: LD_INT 101
20949: EQUAL
20950: IFFALSE 21078
// begin case p3 of 1 :
20952: LD_VAR 0 3
20956: PUSH
20957: LD_INT 1
20959: DOUBLE
20960: EQUAL
20961: IFTRUE 20965
20963: GO 20972
20965: POP
// hHackUnlimitedResources ; 2 :
20966: CALL 33225 0 0
20970: GO 21078
20972: LD_INT 2
20974: DOUBLE
20975: EQUAL
20976: IFTRUE 20980
20978: GO 20987
20980: POP
// hHackSetLevel10 ; 3 :
20981: CALL 33358 0 0
20985: GO 21078
20987: LD_INT 3
20989: DOUBLE
20990: EQUAL
20991: IFTRUE 20995
20993: GO 21002
20995: POP
// hHackSetLevel10YourUnits ; 4 :
20996: CALL 33443 0 0
21000: GO 21078
21002: LD_INT 4
21004: DOUBLE
21005: EQUAL
21006: IFTRUE 21010
21008: GO 21017
21010: POP
// hHackInvincible ; 5 :
21011: CALL 33891 0 0
21015: GO 21078
21017: LD_INT 5
21019: DOUBLE
21020: EQUAL
21021: IFTRUE 21025
21023: GO 21032
21025: POP
// hHackInvisible ; 6 :
21026: CALL 34002 0 0
21030: GO 21078
21032: LD_INT 6
21034: DOUBLE
21035: EQUAL
21036: IFTRUE 21040
21038: GO 21047
21040: POP
// hHackChangeYourSide ; 7 :
21041: CALL 34059 0 0
21045: GO 21078
21047: LD_INT 7
21049: DOUBLE
21050: EQUAL
21051: IFTRUE 21055
21053: GO 21062
21055: POP
// hHackChangeUnitSide ; 8 :
21056: CALL 34101 0 0
21060: GO 21078
21062: LD_INT 8
21064: DOUBLE
21065: EQUAL
21066: IFTRUE 21070
21068: GO 21077
21070: POP
// hHackFog ; end ;
21071: CALL 34202 0 0
21075: GO 21078
21077: POP
// end ; if p2 = game_save_mode then
21078: LD_VAR 0 2
21082: PUSH
21083: LD_INT 102
21085: EQUAL
21086: IFFALSE 21141
// begin if p3 = 1 then
21088: LD_VAR 0 3
21092: PUSH
21093: LD_INT 1
21095: EQUAL
21096: IFFALSE 21108
// globalGameSaveCounter := p4 ;
21098: LD_ADDR_EXP 60
21102: PUSH
21103: LD_VAR 0 4
21107: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
21108: LD_VAR 0 3
21112: PUSH
21113: LD_INT 2
21115: EQUAL
21116: PUSH
21117: LD_EXP 60
21121: AND
21122: IFFALSE 21141
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21124: LD_STRING setGameSaveCounter(
21126: PUSH
21127: LD_EXP 60
21131: STR
21132: PUSH
21133: LD_STRING )
21135: STR
21136: PPUSH
21137: CALL_OW 559
// end ; end ;
21141: LD_VAR 0 7
21145: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
21146: LD_INT 0
21148: PPUSH
// streamModeActive := false ;
21149: LD_ADDR_EXP 61
21153: PUSH
21154: LD_INT 0
21156: ST_TO_ADDR
// normalCounter := 36 ;
21157: LD_ADDR_EXP 62
21161: PUSH
21162: LD_INT 36
21164: ST_TO_ADDR
// hardcoreCounter := 18 ;
21165: LD_ADDR_EXP 63
21169: PUSH
21170: LD_INT 18
21172: ST_TO_ADDR
// sRocket := false ;
21173: LD_ADDR_EXP 66
21177: PUSH
21178: LD_INT 0
21180: ST_TO_ADDR
// sSpeed := false ;
21181: LD_ADDR_EXP 65
21185: PUSH
21186: LD_INT 0
21188: ST_TO_ADDR
// sEngine := false ;
21189: LD_ADDR_EXP 67
21193: PUSH
21194: LD_INT 0
21196: ST_TO_ADDR
// sSpec := false ;
21197: LD_ADDR_EXP 64
21201: PUSH
21202: LD_INT 0
21204: ST_TO_ADDR
// sLevel := false ;
21205: LD_ADDR_EXP 68
21209: PUSH
21210: LD_INT 0
21212: ST_TO_ADDR
// sArmoury := false ;
21213: LD_ADDR_EXP 69
21217: PUSH
21218: LD_INT 0
21220: ST_TO_ADDR
// sRadar := false ;
21221: LD_ADDR_EXP 70
21225: PUSH
21226: LD_INT 0
21228: ST_TO_ADDR
// sBunker := false ;
21229: LD_ADDR_EXP 71
21233: PUSH
21234: LD_INT 0
21236: ST_TO_ADDR
// sHack := false ;
21237: LD_ADDR_EXP 72
21241: PUSH
21242: LD_INT 0
21244: ST_TO_ADDR
// sFire := false ;
21245: LD_ADDR_EXP 73
21249: PUSH
21250: LD_INT 0
21252: ST_TO_ADDR
// sRefresh := false ;
21253: LD_ADDR_EXP 74
21257: PUSH
21258: LD_INT 0
21260: ST_TO_ADDR
// sExp := false ;
21261: LD_ADDR_EXP 75
21265: PUSH
21266: LD_INT 0
21268: ST_TO_ADDR
// sDepot := false ;
21269: LD_ADDR_EXP 76
21273: PUSH
21274: LD_INT 0
21276: ST_TO_ADDR
// sFlag := false ;
21277: LD_ADDR_EXP 77
21281: PUSH
21282: LD_INT 0
21284: ST_TO_ADDR
// sKamikadze := false ;
21285: LD_ADDR_EXP 85
21289: PUSH
21290: LD_INT 0
21292: ST_TO_ADDR
// sTroll := false ;
21293: LD_ADDR_EXP 86
21297: PUSH
21298: LD_INT 0
21300: ST_TO_ADDR
// sSlow := false ;
21301: LD_ADDR_EXP 87
21305: PUSH
21306: LD_INT 0
21308: ST_TO_ADDR
// sLack := false ;
21309: LD_ADDR_EXP 88
21313: PUSH
21314: LD_INT 0
21316: ST_TO_ADDR
// sTank := false ;
21317: LD_ADDR_EXP 90
21321: PUSH
21322: LD_INT 0
21324: ST_TO_ADDR
// sRemote := false ;
21325: LD_ADDR_EXP 91
21329: PUSH
21330: LD_INT 0
21332: ST_TO_ADDR
// sPowell := false ;
21333: LD_ADDR_EXP 92
21337: PUSH
21338: LD_INT 0
21340: ST_TO_ADDR
// sTeleport := false ;
21341: LD_ADDR_EXP 95
21345: PUSH
21346: LD_INT 0
21348: ST_TO_ADDR
// sOilTower := false ;
21349: LD_ADDR_EXP 97
21353: PUSH
21354: LD_INT 0
21356: ST_TO_ADDR
// sShovel := false ;
21357: LD_ADDR_EXP 98
21361: PUSH
21362: LD_INT 0
21364: ST_TO_ADDR
// sSheik := false ;
21365: LD_ADDR_EXP 99
21369: PUSH
21370: LD_INT 0
21372: ST_TO_ADDR
// sEarthquake := false ;
21373: LD_ADDR_EXP 101
21377: PUSH
21378: LD_INT 0
21380: ST_TO_ADDR
// sAI := false ;
21381: LD_ADDR_EXP 102
21385: PUSH
21386: LD_INT 0
21388: ST_TO_ADDR
// sCargo := false ;
21389: LD_ADDR_EXP 105
21393: PUSH
21394: LD_INT 0
21396: ST_TO_ADDR
// sDLaser := false ;
21397: LD_ADDR_EXP 106
21401: PUSH
21402: LD_INT 0
21404: ST_TO_ADDR
// sExchange := false ;
21405: LD_ADDR_EXP 107
21409: PUSH
21410: LD_INT 0
21412: ST_TO_ADDR
// sFac := false ;
21413: LD_ADDR_EXP 108
21417: PUSH
21418: LD_INT 0
21420: ST_TO_ADDR
// sPower := false ;
21421: LD_ADDR_EXP 109
21425: PUSH
21426: LD_INT 0
21428: ST_TO_ADDR
// sRandom := false ;
21429: LD_ADDR_EXP 110
21433: PUSH
21434: LD_INT 0
21436: ST_TO_ADDR
// sShield := false ;
21437: LD_ADDR_EXP 111
21441: PUSH
21442: LD_INT 0
21444: ST_TO_ADDR
// sTime := false ;
21445: LD_ADDR_EXP 112
21449: PUSH
21450: LD_INT 0
21452: ST_TO_ADDR
// sTools := false ;
21453: LD_ADDR_EXP 113
21457: PUSH
21458: LD_INT 0
21460: ST_TO_ADDR
// sSold := false ;
21461: LD_ADDR_EXP 78
21465: PUSH
21466: LD_INT 0
21468: ST_TO_ADDR
// sDiff := false ;
21469: LD_ADDR_EXP 79
21473: PUSH
21474: LD_INT 0
21476: ST_TO_ADDR
// sFog := false ;
21477: LD_ADDR_EXP 82
21481: PUSH
21482: LD_INT 0
21484: ST_TO_ADDR
// sReset := false ;
21485: LD_ADDR_EXP 83
21489: PUSH
21490: LD_INT 0
21492: ST_TO_ADDR
// sSun := false ;
21493: LD_ADDR_EXP 84
21497: PUSH
21498: LD_INT 0
21500: ST_TO_ADDR
// sTiger := false ;
21501: LD_ADDR_EXP 80
21505: PUSH
21506: LD_INT 0
21508: ST_TO_ADDR
// sBomb := false ;
21509: LD_ADDR_EXP 81
21513: PUSH
21514: LD_INT 0
21516: ST_TO_ADDR
// sWound := false ;
21517: LD_ADDR_EXP 89
21521: PUSH
21522: LD_INT 0
21524: ST_TO_ADDR
// sBetray := false ;
21525: LD_ADDR_EXP 93
21529: PUSH
21530: LD_INT 0
21532: ST_TO_ADDR
// sContamin := false ;
21533: LD_ADDR_EXP 94
21537: PUSH
21538: LD_INT 0
21540: ST_TO_ADDR
// sOil := false ;
21541: LD_ADDR_EXP 96
21545: PUSH
21546: LD_INT 0
21548: ST_TO_ADDR
// sStu := false ;
21549: LD_ADDR_EXP 100
21553: PUSH
21554: LD_INT 0
21556: ST_TO_ADDR
// sBazooka := false ;
21557: LD_ADDR_EXP 103
21561: PUSH
21562: LD_INT 0
21564: ST_TO_ADDR
// sMortar := false ;
21565: LD_ADDR_EXP 104
21569: PUSH
21570: LD_INT 0
21572: ST_TO_ADDR
// sRanger := false ;
21573: LD_ADDR_EXP 114
21577: PUSH
21578: LD_INT 0
21580: ST_TO_ADDR
// sComputer := false ;
21581: LD_ADDR_EXP 115
21585: PUSH
21586: LD_INT 0
21588: ST_TO_ADDR
// s30 := false ;
21589: LD_ADDR_EXP 116
21593: PUSH
21594: LD_INT 0
21596: ST_TO_ADDR
// s60 := false ;
21597: LD_ADDR_EXP 117
21601: PUSH
21602: LD_INT 0
21604: ST_TO_ADDR
// end ;
21605: LD_VAR 0 1
21609: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21610: LD_INT 0
21612: PPUSH
21613: PPUSH
21614: PPUSH
21615: PPUSH
21616: PPUSH
21617: PPUSH
21618: PPUSH
// result := [ ] ;
21619: LD_ADDR_VAR 0 2
21623: PUSH
21624: EMPTY
21625: ST_TO_ADDR
// if campaign_id = 1 then
21626: LD_OWVAR 69
21630: PUSH
21631: LD_INT 1
21633: EQUAL
21634: IFFALSE 24800
// begin case mission_number of 1 :
21636: LD_OWVAR 70
21640: PUSH
21641: LD_INT 1
21643: DOUBLE
21644: EQUAL
21645: IFTRUE 21649
21647: GO 21725
21649: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21650: LD_ADDR_VAR 0 2
21654: PUSH
21655: LD_INT 2
21657: PUSH
21658: LD_INT 4
21660: PUSH
21661: LD_INT 11
21663: PUSH
21664: LD_INT 12
21666: PUSH
21667: LD_INT 15
21669: PUSH
21670: LD_INT 16
21672: PUSH
21673: LD_INT 22
21675: PUSH
21676: LD_INT 23
21678: PUSH
21679: LD_INT 26
21681: PUSH
21682: EMPTY
21683: LIST
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: PUSH
21693: LD_INT 101
21695: PUSH
21696: LD_INT 102
21698: PUSH
21699: LD_INT 106
21701: PUSH
21702: LD_INT 116
21704: PUSH
21705: LD_INT 117
21707: PUSH
21708: LD_INT 118
21710: PUSH
21711: EMPTY
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: PUSH
21719: EMPTY
21720: LIST
21721: LIST
21722: ST_TO_ADDR
21723: GO 24798
21725: LD_INT 2
21727: DOUBLE
21728: EQUAL
21729: IFTRUE 21733
21731: GO 21817
21733: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21734: LD_ADDR_VAR 0 2
21738: PUSH
21739: LD_INT 2
21741: PUSH
21742: LD_INT 4
21744: PUSH
21745: LD_INT 11
21747: PUSH
21748: LD_INT 12
21750: PUSH
21751: LD_INT 15
21753: PUSH
21754: LD_INT 16
21756: PUSH
21757: LD_INT 22
21759: PUSH
21760: LD_INT 23
21762: PUSH
21763: LD_INT 26
21765: PUSH
21766: EMPTY
21767: LIST
21768: LIST
21769: LIST
21770: LIST
21771: LIST
21772: LIST
21773: LIST
21774: LIST
21775: LIST
21776: PUSH
21777: LD_INT 101
21779: PUSH
21780: LD_INT 102
21782: PUSH
21783: LD_INT 105
21785: PUSH
21786: LD_INT 106
21788: PUSH
21789: LD_INT 108
21791: PUSH
21792: LD_INT 116
21794: PUSH
21795: LD_INT 117
21797: PUSH
21798: LD_INT 118
21800: PUSH
21801: EMPTY
21802: LIST
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: PUSH
21811: EMPTY
21812: LIST
21813: LIST
21814: ST_TO_ADDR
21815: GO 24798
21817: LD_INT 3
21819: DOUBLE
21820: EQUAL
21821: IFTRUE 21825
21823: GO 21913
21825: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21826: LD_ADDR_VAR 0 2
21830: PUSH
21831: LD_INT 2
21833: PUSH
21834: LD_INT 4
21836: PUSH
21837: LD_INT 5
21839: PUSH
21840: LD_INT 11
21842: PUSH
21843: LD_INT 12
21845: PUSH
21846: LD_INT 15
21848: PUSH
21849: LD_INT 16
21851: PUSH
21852: LD_INT 22
21854: PUSH
21855: LD_INT 26
21857: PUSH
21858: LD_INT 36
21860: PUSH
21861: EMPTY
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: PUSH
21873: LD_INT 101
21875: PUSH
21876: LD_INT 102
21878: PUSH
21879: LD_INT 105
21881: PUSH
21882: LD_INT 106
21884: PUSH
21885: LD_INT 108
21887: PUSH
21888: LD_INT 116
21890: PUSH
21891: LD_INT 117
21893: PUSH
21894: LD_INT 118
21896: PUSH
21897: EMPTY
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: PUSH
21907: EMPTY
21908: LIST
21909: LIST
21910: ST_TO_ADDR
21911: GO 24798
21913: LD_INT 4
21915: DOUBLE
21916: EQUAL
21917: IFTRUE 21921
21919: GO 22017
21921: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21922: LD_ADDR_VAR 0 2
21926: PUSH
21927: LD_INT 2
21929: PUSH
21930: LD_INT 4
21932: PUSH
21933: LD_INT 5
21935: PUSH
21936: LD_INT 8
21938: PUSH
21939: LD_INT 11
21941: PUSH
21942: LD_INT 12
21944: PUSH
21945: LD_INT 15
21947: PUSH
21948: LD_INT 16
21950: PUSH
21951: LD_INT 22
21953: PUSH
21954: LD_INT 23
21956: PUSH
21957: LD_INT 26
21959: PUSH
21960: LD_INT 36
21962: PUSH
21963: EMPTY
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: PUSH
21977: LD_INT 101
21979: PUSH
21980: LD_INT 102
21982: PUSH
21983: LD_INT 105
21985: PUSH
21986: LD_INT 106
21988: PUSH
21989: LD_INT 108
21991: PUSH
21992: LD_INT 116
21994: PUSH
21995: LD_INT 117
21997: PUSH
21998: LD_INT 118
22000: PUSH
22001: EMPTY
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: PUSH
22011: EMPTY
22012: LIST
22013: LIST
22014: ST_TO_ADDR
22015: GO 24798
22017: LD_INT 5
22019: DOUBLE
22020: EQUAL
22021: IFTRUE 22025
22023: GO 22137
22025: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
22026: LD_ADDR_VAR 0 2
22030: PUSH
22031: LD_INT 2
22033: PUSH
22034: LD_INT 4
22036: PUSH
22037: LD_INT 5
22039: PUSH
22040: LD_INT 6
22042: PUSH
22043: LD_INT 8
22045: PUSH
22046: LD_INT 11
22048: PUSH
22049: LD_INT 12
22051: PUSH
22052: LD_INT 15
22054: PUSH
22055: LD_INT 16
22057: PUSH
22058: LD_INT 22
22060: PUSH
22061: LD_INT 23
22063: PUSH
22064: LD_INT 25
22066: PUSH
22067: LD_INT 26
22069: PUSH
22070: LD_INT 36
22072: PUSH
22073: EMPTY
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: PUSH
22089: LD_INT 101
22091: PUSH
22092: LD_INT 102
22094: PUSH
22095: LD_INT 105
22097: PUSH
22098: LD_INT 106
22100: PUSH
22101: LD_INT 108
22103: PUSH
22104: LD_INT 109
22106: PUSH
22107: LD_INT 112
22109: PUSH
22110: LD_INT 116
22112: PUSH
22113: LD_INT 117
22115: PUSH
22116: LD_INT 118
22118: PUSH
22119: EMPTY
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: LIST
22129: LIST
22130: PUSH
22131: EMPTY
22132: LIST
22133: LIST
22134: ST_TO_ADDR
22135: GO 24798
22137: LD_INT 6
22139: DOUBLE
22140: EQUAL
22141: IFTRUE 22145
22143: GO 22277
22145: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22146: LD_ADDR_VAR 0 2
22150: PUSH
22151: LD_INT 2
22153: PUSH
22154: LD_INT 4
22156: PUSH
22157: LD_INT 5
22159: PUSH
22160: LD_INT 6
22162: PUSH
22163: LD_INT 8
22165: PUSH
22166: LD_INT 11
22168: PUSH
22169: LD_INT 12
22171: PUSH
22172: LD_INT 15
22174: PUSH
22175: LD_INT 16
22177: PUSH
22178: LD_INT 20
22180: PUSH
22181: LD_INT 21
22183: PUSH
22184: LD_INT 22
22186: PUSH
22187: LD_INT 23
22189: PUSH
22190: LD_INT 25
22192: PUSH
22193: LD_INT 26
22195: PUSH
22196: LD_INT 30
22198: PUSH
22199: LD_INT 31
22201: PUSH
22202: LD_INT 32
22204: PUSH
22205: LD_INT 36
22207: PUSH
22208: EMPTY
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: PUSH
22229: LD_INT 101
22231: PUSH
22232: LD_INT 102
22234: PUSH
22235: LD_INT 105
22237: PUSH
22238: LD_INT 106
22240: PUSH
22241: LD_INT 108
22243: PUSH
22244: LD_INT 109
22246: PUSH
22247: LD_INT 112
22249: PUSH
22250: LD_INT 116
22252: PUSH
22253: LD_INT 117
22255: PUSH
22256: LD_INT 118
22258: PUSH
22259: EMPTY
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: PUSH
22271: EMPTY
22272: LIST
22273: LIST
22274: ST_TO_ADDR
22275: GO 24798
22277: LD_INT 7
22279: DOUBLE
22280: EQUAL
22281: IFTRUE 22285
22283: GO 22397
22285: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22286: LD_ADDR_VAR 0 2
22290: PUSH
22291: LD_INT 2
22293: PUSH
22294: LD_INT 4
22296: PUSH
22297: LD_INT 5
22299: PUSH
22300: LD_INT 7
22302: PUSH
22303: LD_INT 11
22305: PUSH
22306: LD_INT 12
22308: PUSH
22309: LD_INT 15
22311: PUSH
22312: LD_INT 16
22314: PUSH
22315: LD_INT 20
22317: PUSH
22318: LD_INT 21
22320: PUSH
22321: LD_INT 22
22323: PUSH
22324: LD_INT 23
22326: PUSH
22327: LD_INT 25
22329: PUSH
22330: LD_INT 26
22332: PUSH
22333: EMPTY
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: PUSH
22349: LD_INT 101
22351: PUSH
22352: LD_INT 102
22354: PUSH
22355: LD_INT 103
22357: PUSH
22358: LD_INT 105
22360: PUSH
22361: LD_INT 106
22363: PUSH
22364: LD_INT 108
22366: PUSH
22367: LD_INT 112
22369: PUSH
22370: LD_INT 116
22372: PUSH
22373: LD_INT 117
22375: PUSH
22376: LD_INT 118
22378: PUSH
22379: EMPTY
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: PUSH
22391: EMPTY
22392: LIST
22393: LIST
22394: ST_TO_ADDR
22395: GO 24798
22397: LD_INT 8
22399: DOUBLE
22400: EQUAL
22401: IFTRUE 22405
22403: GO 22545
22405: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22406: LD_ADDR_VAR 0 2
22410: PUSH
22411: LD_INT 2
22413: PUSH
22414: LD_INT 4
22416: PUSH
22417: LD_INT 5
22419: PUSH
22420: LD_INT 6
22422: PUSH
22423: LD_INT 7
22425: PUSH
22426: LD_INT 8
22428: PUSH
22429: LD_INT 11
22431: PUSH
22432: LD_INT 12
22434: PUSH
22435: LD_INT 15
22437: PUSH
22438: LD_INT 16
22440: PUSH
22441: LD_INT 20
22443: PUSH
22444: LD_INT 21
22446: PUSH
22447: LD_INT 22
22449: PUSH
22450: LD_INT 23
22452: PUSH
22453: LD_INT 25
22455: PUSH
22456: LD_INT 26
22458: PUSH
22459: LD_INT 30
22461: PUSH
22462: LD_INT 31
22464: PUSH
22465: LD_INT 32
22467: PUSH
22468: LD_INT 36
22470: PUSH
22471: EMPTY
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: PUSH
22493: LD_INT 101
22495: PUSH
22496: LD_INT 102
22498: PUSH
22499: LD_INT 103
22501: PUSH
22502: LD_INT 105
22504: PUSH
22505: LD_INT 106
22507: PUSH
22508: LD_INT 108
22510: PUSH
22511: LD_INT 109
22513: PUSH
22514: LD_INT 112
22516: PUSH
22517: LD_INT 116
22519: PUSH
22520: LD_INT 117
22522: PUSH
22523: LD_INT 118
22525: PUSH
22526: EMPTY
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: PUSH
22539: EMPTY
22540: LIST
22541: LIST
22542: ST_TO_ADDR
22543: GO 24798
22545: LD_INT 9
22547: DOUBLE
22548: EQUAL
22549: IFTRUE 22553
22551: GO 22701
22553: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22554: LD_ADDR_VAR 0 2
22558: PUSH
22559: LD_INT 2
22561: PUSH
22562: LD_INT 4
22564: PUSH
22565: LD_INT 5
22567: PUSH
22568: LD_INT 6
22570: PUSH
22571: LD_INT 7
22573: PUSH
22574: LD_INT 8
22576: PUSH
22577: LD_INT 11
22579: PUSH
22580: LD_INT 12
22582: PUSH
22583: LD_INT 15
22585: PUSH
22586: LD_INT 16
22588: PUSH
22589: LD_INT 20
22591: PUSH
22592: LD_INT 21
22594: PUSH
22595: LD_INT 22
22597: PUSH
22598: LD_INT 23
22600: PUSH
22601: LD_INT 25
22603: PUSH
22604: LD_INT 26
22606: PUSH
22607: LD_INT 28
22609: PUSH
22610: LD_INT 30
22612: PUSH
22613: LD_INT 31
22615: PUSH
22616: LD_INT 32
22618: PUSH
22619: LD_INT 36
22621: PUSH
22622: EMPTY
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: PUSH
22645: LD_INT 101
22647: PUSH
22648: LD_INT 102
22650: PUSH
22651: LD_INT 103
22653: PUSH
22654: LD_INT 105
22656: PUSH
22657: LD_INT 106
22659: PUSH
22660: LD_INT 108
22662: PUSH
22663: LD_INT 109
22665: PUSH
22666: LD_INT 112
22668: PUSH
22669: LD_INT 114
22671: PUSH
22672: LD_INT 116
22674: PUSH
22675: LD_INT 117
22677: PUSH
22678: LD_INT 118
22680: PUSH
22681: EMPTY
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: PUSH
22695: EMPTY
22696: LIST
22697: LIST
22698: ST_TO_ADDR
22699: GO 24798
22701: LD_INT 10
22703: DOUBLE
22704: EQUAL
22705: IFTRUE 22709
22707: GO 22905
22709: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22710: LD_ADDR_VAR 0 2
22714: PUSH
22715: LD_INT 2
22717: PUSH
22718: LD_INT 4
22720: PUSH
22721: LD_INT 5
22723: PUSH
22724: LD_INT 6
22726: PUSH
22727: LD_INT 7
22729: PUSH
22730: LD_INT 8
22732: PUSH
22733: LD_INT 9
22735: PUSH
22736: LD_INT 10
22738: PUSH
22739: LD_INT 11
22741: PUSH
22742: LD_INT 12
22744: PUSH
22745: LD_INT 13
22747: PUSH
22748: LD_INT 14
22750: PUSH
22751: LD_INT 15
22753: PUSH
22754: LD_INT 16
22756: PUSH
22757: LD_INT 17
22759: PUSH
22760: LD_INT 18
22762: PUSH
22763: LD_INT 19
22765: PUSH
22766: LD_INT 20
22768: PUSH
22769: LD_INT 21
22771: PUSH
22772: LD_INT 22
22774: PUSH
22775: LD_INT 23
22777: PUSH
22778: LD_INT 24
22780: PUSH
22781: LD_INT 25
22783: PUSH
22784: LD_INT 26
22786: PUSH
22787: LD_INT 28
22789: PUSH
22790: LD_INT 30
22792: PUSH
22793: LD_INT 31
22795: PUSH
22796: LD_INT 32
22798: PUSH
22799: LD_INT 36
22801: PUSH
22802: EMPTY
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: PUSH
22833: LD_INT 101
22835: PUSH
22836: LD_INT 102
22838: PUSH
22839: LD_INT 103
22841: PUSH
22842: LD_INT 104
22844: PUSH
22845: LD_INT 105
22847: PUSH
22848: LD_INT 106
22850: PUSH
22851: LD_INT 107
22853: PUSH
22854: LD_INT 108
22856: PUSH
22857: LD_INT 109
22859: PUSH
22860: LD_INT 110
22862: PUSH
22863: LD_INT 111
22865: PUSH
22866: LD_INT 112
22868: PUSH
22869: LD_INT 114
22871: PUSH
22872: LD_INT 116
22874: PUSH
22875: LD_INT 117
22877: PUSH
22878: LD_INT 118
22880: PUSH
22881: EMPTY
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: PUSH
22899: EMPTY
22900: LIST
22901: LIST
22902: ST_TO_ADDR
22903: GO 24798
22905: LD_INT 11
22907: DOUBLE
22908: EQUAL
22909: IFTRUE 22913
22911: GO 23117
22913: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22914: LD_ADDR_VAR 0 2
22918: PUSH
22919: LD_INT 2
22921: PUSH
22922: LD_INT 3
22924: PUSH
22925: LD_INT 4
22927: PUSH
22928: LD_INT 5
22930: PUSH
22931: LD_INT 6
22933: PUSH
22934: LD_INT 7
22936: PUSH
22937: LD_INT 8
22939: PUSH
22940: LD_INT 9
22942: PUSH
22943: LD_INT 10
22945: PUSH
22946: LD_INT 11
22948: PUSH
22949: LD_INT 12
22951: PUSH
22952: LD_INT 13
22954: PUSH
22955: LD_INT 14
22957: PUSH
22958: LD_INT 15
22960: PUSH
22961: LD_INT 16
22963: PUSH
22964: LD_INT 17
22966: PUSH
22967: LD_INT 18
22969: PUSH
22970: LD_INT 19
22972: PUSH
22973: LD_INT 20
22975: PUSH
22976: LD_INT 21
22978: PUSH
22979: LD_INT 22
22981: PUSH
22982: LD_INT 23
22984: PUSH
22985: LD_INT 24
22987: PUSH
22988: LD_INT 25
22990: PUSH
22991: LD_INT 26
22993: PUSH
22994: LD_INT 28
22996: PUSH
22997: LD_INT 30
22999: PUSH
23000: LD_INT 31
23002: PUSH
23003: LD_INT 32
23005: PUSH
23006: LD_INT 34
23008: PUSH
23009: LD_INT 36
23011: PUSH
23012: EMPTY
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: PUSH
23045: LD_INT 101
23047: PUSH
23048: LD_INT 102
23050: PUSH
23051: LD_INT 103
23053: PUSH
23054: LD_INT 104
23056: PUSH
23057: LD_INT 105
23059: PUSH
23060: LD_INT 106
23062: PUSH
23063: LD_INT 107
23065: PUSH
23066: LD_INT 108
23068: PUSH
23069: LD_INT 109
23071: PUSH
23072: LD_INT 110
23074: PUSH
23075: LD_INT 111
23077: PUSH
23078: LD_INT 112
23080: PUSH
23081: LD_INT 114
23083: PUSH
23084: LD_INT 116
23086: PUSH
23087: LD_INT 117
23089: PUSH
23090: LD_INT 118
23092: PUSH
23093: EMPTY
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: PUSH
23111: EMPTY
23112: LIST
23113: LIST
23114: ST_TO_ADDR
23115: GO 24798
23117: LD_INT 12
23119: DOUBLE
23120: EQUAL
23121: IFTRUE 23125
23123: GO 23345
23125: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23126: LD_ADDR_VAR 0 2
23130: PUSH
23131: LD_INT 1
23133: PUSH
23134: LD_INT 2
23136: PUSH
23137: LD_INT 3
23139: PUSH
23140: LD_INT 4
23142: PUSH
23143: LD_INT 5
23145: PUSH
23146: LD_INT 6
23148: PUSH
23149: LD_INT 7
23151: PUSH
23152: LD_INT 8
23154: PUSH
23155: LD_INT 9
23157: PUSH
23158: LD_INT 10
23160: PUSH
23161: LD_INT 11
23163: PUSH
23164: LD_INT 12
23166: PUSH
23167: LD_INT 13
23169: PUSH
23170: LD_INT 14
23172: PUSH
23173: LD_INT 15
23175: PUSH
23176: LD_INT 16
23178: PUSH
23179: LD_INT 17
23181: PUSH
23182: LD_INT 18
23184: PUSH
23185: LD_INT 19
23187: PUSH
23188: LD_INT 20
23190: PUSH
23191: LD_INT 21
23193: PUSH
23194: LD_INT 22
23196: PUSH
23197: LD_INT 23
23199: PUSH
23200: LD_INT 24
23202: PUSH
23203: LD_INT 25
23205: PUSH
23206: LD_INT 26
23208: PUSH
23209: LD_INT 27
23211: PUSH
23212: LD_INT 28
23214: PUSH
23215: LD_INT 30
23217: PUSH
23218: LD_INT 31
23220: PUSH
23221: LD_INT 32
23223: PUSH
23224: LD_INT 33
23226: PUSH
23227: LD_INT 34
23229: PUSH
23230: LD_INT 36
23232: PUSH
23233: EMPTY
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: PUSH
23269: LD_INT 101
23271: PUSH
23272: LD_INT 102
23274: PUSH
23275: LD_INT 103
23277: PUSH
23278: LD_INT 104
23280: PUSH
23281: LD_INT 105
23283: PUSH
23284: LD_INT 106
23286: PUSH
23287: LD_INT 107
23289: PUSH
23290: LD_INT 108
23292: PUSH
23293: LD_INT 109
23295: PUSH
23296: LD_INT 110
23298: PUSH
23299: LD_INT 111
23301: PUSH
23302: LD_INT 112
23304: PUSH
23305: LD_INT 113
23307: PUSH
23308: LD_INT 114
23310: PUSH
23311: LD_INT 116
23313: PUSH
23314: LD_INT 117
23316: PUSH
23317: LD_INT 118
23319: PUSH
23320: EMPTY
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: PUSH
23339: EMPTY
23340: LIST
23341: LIST
23342: ST_TO_ADDR
23343: GO 24798
23345: LD_INT 13
23347: DOUBLE
23348: EQUAL
23349: IFTRUE 23353
23351: GO 23561
23353: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23354: LD_ADDR_VAR 0 2
23358: PUSH
23359: LD_INT 1
23361: PUSH
23362: LD_INT 2
23364: PUSH
23365: LD_INT 3
23367: PUSH
23368: LD_INT 4
23370: PUSH
23371: LD_INT 5
23373: PUSH
23374: LD_INT 8
23376: PUSH
23377: LD_INT 9
23379: PUSH
23380: LD_INT 10
23382: PUSH
23383: LD_INT 11
23385: PUSH
23386: LD_INT 12
23388: PUSH
23389: LD_INT 14
23391: PUSH
23392: LD_INT 15
23394: PUSH
23395: LD_INT 16
23397: PUSH
23398: LD_INT 17
23400: PUSH
23401: LD_INT 18
23403: PUSH
23404: LD_INT 19
23406: PUSH
23407: LD_INT 20
23409: PUSH
23410: LD_INT 21
23412: PUSH
23413: LD_INT 22
23415: PUSH
23416: LD_INT 23
23418: PUSH
23419: LD_INT 24
23421: PUSH
23422: LD_INT 25
23424: PUSH
23425: LD_INT 26
23427: PUSH
23428: LD_INT 27
23430: PUSH
23431: LD_INT 28
23433: PUSH
23434: LD_INT 30
23436: PUSH
23437: LD_INT 31
23439: PUSH
23440: LD_INT 32
23442: PUSH
23443: LD_INT 33
23445: PUSH
23446: LD_INT 34
23448: PUSH
23449: LD_INT 36
23451: PUSH
23452: EMPTY
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: LIST
23484: PUSH
23485: LD_INT 101
23487: PUSH
23488: LD_INT 102
23490: PUSH
23491: LD_INT 103
23493: PUSH
23494: LD_INT 104
23496: PUSH
23497: LD_INT 105
23499: PUSH
23500: LD_INT 106
23502: PUSH
23503: LD_INT 107
23505: PUSH
23506: LD_INT 108
23508: PUSH
23509: LD_INT 109
23511: PUSH
23512: LD_INT 110
23514: PUSH
23515: LD_INT 111
23517: PUSH
23518: LD_INT 112
23520: PUSH
23521: LD_INT 113
23523: PUSH
23524: LD_INT 114
23526: PUSH
23527: LD_INT 116
23529: PUSH
23530: LD_INT 117
23532: PUSH
23533: LD_INT 118
23535: PUSH
23536: EMPTY
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: PUSH
23555: EMPTY
23556: LIST
23557: LIST
23558: ST_TO_ADDR
23559: GO 24798
23561: LD_INT 14
23563: DOUBLE
23564: EQUAL
23565: IFTRUE 23569
23567: GO 23793
23569: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23570: LD_ADDR_VAR 0 2
23574: PUSH
23575: LD_INT 1
23577: PUSH
23578: LD_INT 2
23580: PUSH
23581: LD_INT 3
23583: PUSH
23584: LD_INT 4
23586: PUSH
23587: LD_INT 5
23589: PUSH
23590: LD_INT 6
23592: PUSH
23593: LD_INT 7
23595: PUSH
23596: LD_INT 8
23598: PUSH
23599: LD_INT 9
23601: PUSH
23602: LD_INT 10
23604: PUSH
23605: LD_INT 11
23607: PUSH
23608: LD_INT 12
23610: PUSH
23611: LD_INT 13
23613: PUSH
23614: LD_INT 14
23616: PUSH
23617: LD_INT 15
23619: PUSH
23620: LD_INT 16
23622: PUSH
23623: LD_INT 17
23625: PUSH
23626: LD_INT 18
23628: PUSH
23629: LD_INT 19
23631: PUSH
23632: LD_INT 20
23634: PUSH
23635: LD_INT 21
23637: PUSH
23638: LD_INT 22
23640: PUSH
23641: LD_INT 23
23643: PUSH
23644: LD_INT 24
23646: PUSH
23647: LD_INT 25
23649: PUSH
23650: LD_INT 26
23652: PUSH
23653: LD_INT 27
23655: PUSH
23656: LD_INT 28
23658: PUSH
23659: LD_INT 29
23661: PUSH
23662: LD_INT 30
23664: PUSH
23665: LD_INT 31
23667: PUSH
23668: LD_INT 32
23670: PUSH
23671: LD_INT 33
23673: PUSH
23674: LD_INT 34
23676: PUSH
23677: LD_INT 36
23679: PUSH
23680: EMPTY
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: PUSH
23717: LD_INT 101
23719: PUSH
23720: LD_INT 102
23722: PUSH
23723: LD_INT 103
23725: PUSH
23726: LD_INT 104
23728: PUSH
23729: LD_INT 105
23731: PUSH
23732: LD_INT 106
23734: PUSH
23735: LD_INT 107
23737: PUSH
23738: LD_INT 108
23740: PUSH
23741: LD_INT 109
23743: PUSH
23744: LD_INT 110
23746: PUSH
23747: LD_INT 111
23749: PUSH
23750: LD_INT 112
23752: PUSH
23753: LD_INT 113
23755: PUSH
23756: LD_INT 114
23758: PUSH
23759: LD_INT 116
23761: PUSH
23762: LD_INT 117
23764: PUSH
23765: LD_INT 118
23767: PUSH
23768: EMPTY
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: PUSH
23787: EMPTY
23788: LIST
23789: LIST
23790: ST_TO_ADDR
23791: GO 24798
23793: LD_INT 15
23795: DOUBLE
23796: EQUAL
23797: IFTRUE 23801
23799: GO 24025
23801: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23802: LD_ADDR_VAR 0 2
23806: PUSH
23807: LD_INT 1
23809: PUSH
23810: LD_INT 2
23812: PUSH
23813: LD_INT 3
23815: PUSH
23816: LD_INT 4
23818: PUSH
23819: LD_INT 5
23821: PUSH
23822: LD_INT 6
23824: PUSH
23825: LD_INT 7
23827: PUSH
23828: LD_INT 8
23830: PUSH
23831: LD_INT 9
23833: PUSH
23834: LD_INT 10
23836: PUSH
23837: LD_INT 11
23839: PUSH
23840: LD_INT 12
23842: PUSH
23843: LD_INT 13
23845: PUSH
23846: LD_INT 14
23848: PUSH
23849: LD_INT 15
23851: PUSH
23852: LD_INT 16
23854: PUSH
23855: LD_INT 17
23857: PUSH
23858: LD_INT 18
23860: PUSH
23861: LD_INT 19
23863: PUSH
23864: LD_INT 20
23866: PUSH
23867: LD_INT 21
23869: PUSH
23870: LD_INT 22
23872: PUSH
23873: LD_INT 23
23875: PUSH
23876: LD_INT 24
23878: PUSH
23879: LD_INT 25
23881: PUSH
23882: LD_INT 26
23884: PUSH
23885: LD_INT 27
23887: PUSH
23888: LD_INT 28
23890: PUSH
23891: LD_INT 29
23893: PUSH
23894: LD_INT 30
23896: PUSH
23897: LD_INT 31
23899: PUSH
23900: LD_INT 32
23902: PUSH
23903: LD_INT 33
23905: PUSH
23906: LD_INT 34
23908: PUSH
23909: LD_INT 36
23911: PUSH
23912: EMPTY
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: PUSH
23949: LD_INT 101
23951: PUSH
23952: LD_INT 102
23954: PUSH
23955: LD_INT 103
23957: PUSH
23958: LD_INT 104
23960: PUSH
23961: LD_INT 105
23963: PUSH
23964: LD_INT 106
23966: PUSH
23967: LD_INT 107
23969: PUSH
23970: LD_INT 108
23972: PUSH
23973: LD_INT 109
23975: PUSH
23976: LD_INT 110
23978: PUSH
23979: LD_INT 111
23981: PUSH
23982: LD_INT 112
23984: PUSH
23985: LD_INT 113
23987: PUSH
23988: LD_INT 114
23990: PUSH
23991: LD_INT 116
23993: PUSH
23994: LD_INT 117
23996: PUSH
23997: LD_INT 118
23999: PUSH
24000: EMPTY
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: PUSH
24019: EMPTY
24020: LIST
24021: LIST
24022: ST_TO_ADDR
24023: GO 24798
24025: LD_INT 16
24027: DOUBLE
24028: EQUAL
24029: IFTRUE 24033
24031: GO 24169
24033: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
24034: LD_ADDR_VAR 0 2
24038: PUSH
24039: LD_INT 2
24041: PUSH
24042: LD_INT 4
24044: PUSH
24045: LD_INT 5
24047: PUSH
24048: LD_INT 7
24050: PUSH
24051: LD_INT 11
24053: PUSH
24054: LD_INT 12
24056: PUSH
24057: LD_INT 15
24059: PUSH
24060: LD_INT 16
24062: PUSH
24063: LD_INT 20
24065: PUSH
24066: LD_INT 21
24068: PUSH
24069: LD_INT 22
24071: PUSH
24072: LD_INT 23
24074: PUSH
24075: LD_INT 25
24077: PUSH
24078: LD_INT 26
24080: PUSH
24081: LD_INT 30
24083: PUSH
24084: LD_INT 31
24086: PUSH
24087: LD_INT 32
24089: PUSH
24090: LD_INT 33
24092: PUSH
24093: LD_INT 34
24095: PUSH
24096: EMPTY
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: PUSH
24117: LD_INT 101
24119: PUSH
24120: LD_INT 102
24122: PUSH
24123: LD_INT 103
24125: PUSH
24126: LD_INT 106
24128: PUSH
24129: LD_INT 108
24131: PUSH
24132: LD_INT 112
24134: PUSH
24135: LD_INT 113
24137: PUSH
24138: LD_INT 114
24140: PUSH
24141: LD_INT 116
24143: PUSH
24144: LD_INT 117
24146: PUSH
24147: LD_INT 118
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: LIST
24154: LIST
24155: LIST
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: PUSH
24163: EMPTY
24164: LIST
24165: LIST
24166: ST_TO_ADDR
24167: GO 24798
24169: LD_INT 17
24171: DOUBLE
24172: EQUAL
24173: IFTRUE 24177
24175: GO 24401
24177: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24178: LD_ADDR_VAR 0 2
24182: PUSH
24183: LD_INT 1
24185: PUSH
24186: LD_INT 2
24188: PUSH
24189: LD_INT 3
24191: PUSH
24192: LD_INT 4
24194: PUSH
24195: LD_INT 5
24197: PUSH
24198: LD_INT 6
24200: PUSH
24201: LD_INT 7
24203: PUSH
24204: LD_INT 8
24206: PUSH
24207: LD_INT 9
24209: PUSH
24210: LD_INT 10
24212: PUSH
24213: LD_INT 11
24215: PUSH
24216: LD_INT 12
24218: PUSH
24219: LD_INT 13
24221: PUSH
24222: LD_INT 14
24224: PUSH
24225: LD_INT 15
24227: PUSH
24228: LD_INT 16
24230: PUSH
24231: LD_INT 17
24233: PUSH
24234: LD_INT 18
24236: PUSH
24237: LD_INT 19
24239: PUSH
24240: LD_INT 20
24242: PUSH
24243: LD_INT 21
24245: PUSH
24246: LD_INT 22
24248: PUSH
24249: LD_INT 23
24251: PUSH
24252: LD_INT 24
24254: PUSH
24255: LD_INT 25
24257: PUSH
24258: LD_INT 26
24260: PUSH
24261: LD_INT 27
24263: PUSH
24264: LD_INT 28
24266: PUSH
24267: LD_INT 29
24269: PUSH
24270: LD_INT 30
24272: PUSH
24273: LD_INT 31
24275: PUSH
24276: LD_INT 32
24278: PUSH
24279: LD_INT 33
24281: PUSH
24282: LD_INT 34
24284: PUSH
24285: LD_INT 36
24287: PUSH
24288: EMPTY
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: PUSH
24325: LD_INT 101
24327: PUSH
24328: LD_INT 102
24330: PUSH
24331: LD_INT 103
24333: PUSH
24334: LD_INT 104
24336: PUSH
24337: LD_INT 105
24339: PUSH
24340: LD_INT 106
24342: PUSH
24343: LD_INT 107
24345: PUSH
24346: LD_INT 108
24348: PUSH
24349: LD_INT 109
24351: PUSH
24352: LD_INT 110
24354: PUSH
24355: LD_INT 111
24357: PUSH
24358: LD_INT 112
24360: PUSH
24361: LD_INT 113
24363: PUSH
24364: LD_INT 114
24366: PUSH
24367: LD_INT 116
24369: PUSH
24370: LD_INT 117
24372: PUSH
24373: LD_INT 118
24375: PUSH
24376: EMPTY
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: LIST
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: LIST
24392: LIST
24393: LIST
24394: PUSH
24395: EMPTY
24396: LIST
24397: LIST
24398: ST_TO_ADDR
24399: GO 24798
24401: LD_INT 18
24403: DOUBLE
24404: EQUAL
24405: IFTRUE 24409
24407: GO 24557
24409: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24410: LD_ADDR_VAR 0 2
24414: PUSH
24415: LD_INT 2
24417: PUSH
24418: LD_INT 4
24420: PUSH
24421: LD_INT 5
24423: PUSH
24424: LD_INT 7
24426: PUSH
24427: LD_INT 11
24429: PUSH
24430: LD_INT 12
24432: PUSH
24433: LD_INT 15
24435: PUSH
24436: LD_INT 16
24438: PUSH
24439: LD_INT 20
24441: PUSH
24442: LD_INT 21
24444: PUSH
24445: LD_INT 22
24447: PUSH
24448: LD_INT 23
24450: PUSH
24451: LD_INT 25
24453: PUSH
24454: LD_INT 26
24456: PUSH
24457: LD_INT 30
24459: PUSH
24460: LD_INT 31
24462: PUSH
24463: LD_INT 32
24465: PUSH
24466: LD_INT 33
24468: PUSH
24469: LD_INT 34
24471: PUSH
24472: LD_INT 35
24474: PUSH
24475: LD_INT 36
24477: PUSH
24478: EMPTY
24479: LIST
24480: LIST
24481: LIST
24482: LIST
24483: LIST
24484: LIST
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: PUSH
24501: LD_INT 101
24503: PUSH
24504: LD_INT 102
24506: PUSH
24507: LD_INT 103
24509: PUSH
24510: LD_INT 106
24512: PUSH
24513: LD_INT 108
24515: PUSH
24516: LD_INT 112
24518: PUSH
24519: LD_INT 113
24521: PUSH
24522: LD_INT 114
24524: PUSH
24525: LD_INT 115
24527: PUSH
24528: LD_INT 116
24530: PUSH
24531: LD_INT 117
24533: PUSH
24534: LD_INT 118
24536: PUSH
24537: EMPTY
24538: LIST
24539: LIST
24540: LIST
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: LIST
24549: LIST
24550: PUSH
24551: EMPTY
24552: LIST
24553: LIST
24554: ST_TO_ADDR
24555: GO 24798
24557: LD_INT 19
24559: DOUBLE
24560: EQUAL
24561: IFTRUE 24565
24563: GO 24797
24565: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24566: LD_ADDR_VAR 0 2
24570: PUSH
24571: LD_INT 1
24573: PUSH
24574: LD_INT 2
24576: PUSH
24577: LD_INT 3
24579: PUSH
24580: LD_INT 4
24582: PUSH
24583: LD_INT 5
24585: PUSH
24586: LD_INT 6
24588: PUSH
24589: LD_INT 7
24591: PUSH
24592: LD_INT 8
24594: PUSH
24595: LD_INT 9
24597: PUSH
24598: LD_INT 10
24600: PUSH
24601: LD_INT 11
24603: PUSH
24604: LD_INT 12
24606: PUSH
24607: LD_INT 13
24609: PUSH
24610: LD_INT 14
24612: PUSH
24613: LD_INT 15
24615: PUSH
24616: LD_INT 16
24618: PUSH
24619: LD_INT 17
24621: PUSH
24622: LD_INT 18
24624: PUSH
24625: LD_INT 19
24627: PUSH
24628: LD_INT 20
24630: PUSH
24631: LD_INT 21
24633: PUSH
24634: LD_INT 22
24636: PUSH
24637: LD_INT 23
24639: PUSH
24640: LD_INT 24
24642: PUSH
24643: LD_INT 25
24645: PUSH
24646: LD_INT 26
24648: PUSH
24649: LD_INT 27
24651: PUSH
24652: LD_INT 28
24654: PUSH
24655: LD_INT 29
24657: PUSH
24658: LD_INT 30
24660: PUSH
24661: LD_INT 31
24663: PUSH
24664: LD_INT 32
24666: PUSH
24667: LD_INT 33
24669: PUSH
24670: LD_INT 34
24672: PUSH
24673: LD_INT 35
24675: PUSH
24676: LD_INT 36
24678: PUSH
24679: EMPTY
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: PUSH
24717: LD_INT 101
24719: PUSH
24720: LD_INT 102
24722: PUSH
24723: LD_INT 103
24725: PUSH
24726: LD_INT 104
24728: PUSH
24729: LD_INT 105
24731: PUSH
24732: LD_INT 106
24734: PUSH
24735: LD_INT 107
24737: PUSH
24738: LD_INT 108
24740: PUSH
24741: LD_INT 109
24743: PUSH
24744: LD_INT 110
24746: PUSH
24747: LD_INT 111
24749: PUSH
24750: LD_INT 112
24752: PUSH
24753: LD_INT 113
24755: PUSH
24756: LD_INT 114
24758: PUSH
24759: LD_INT 115
24761: PUSH
24762: LD_INT 116
24764: PUSH
24765: LD_INT 117
24767: PUSH
24768: LD_INT 118
24770: PUSH
24771: EMPTY
24772: LIST
24773: LIST
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: PUSH
24791: EMPTY
24792: LIST
24793: LIST
24794: ST_TO_ADDR
24795: GO 24798
24797: POP
// end else
24798: GO 25029
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24800: LD_ADDR_VAR 0 2
24804: PUSH
24805: LD_INT 1
24807: PUSH
24808: LD_INT 2
24810: PUSH
24811: LD_INT 3
24813: PUSH
24814: LD_INT 4
24816: PUSH
24817: LD_INT 5
24819: PUSH
24820: LD_INT 6
24822: PUSH
24823: LD_INT 7
24825: PUSH
24826: LD_INT 8
24828: PUSH
24829: LD_INT 9
24831: PUSH
24832: LD_INT 10
24834: PUSH
24835: LD_INT 11
24837: PUSH
24838: LD_INT 12
24840: PUSH
24841: LD_INT 13
24843: PUSH
24844: LD_INT 14
24846: PUSH
24847: LD_INT 15
24849: PUSH
24850: LD_INT 16
24852: PUSH
24853: LD_INT 17
24855: PUSH
24856: LD_INT 18
24858: PUSH
24859: LD_INT 19
24861: PUSH
24862: LD_INT 20
24864: PUSH
24865: LD_INT 21
24867: PUSH
24868: LD_INT 22
24870: PUSH
24871: LD_INT 23
24873: PUSH
24874: LD_INT 24
24876: PUSH
24877: LD_INT 25
24879: PUSH
24880: LD_INT 26
24882: PUSH
24883: LD_INT 27
24885: PUSH
24886: LD_INT 28
24888: PUSH
24889: LD_INT 29
24891: PUSH
24892: LD_INT 30
24894: PUSH
24895: LD_INT 31
24897: PUSH
24898: LD_INT 32
24900: PUSH
24901: LD_INT 33
24903: PUSH
24904: LD_INT 34
24906: PUSH
24907: LD_INT 35
24909: PUSH
24910: LD_INT 36
24912: PUSH
24913: EMPTY
24914: LIST
24915: LIST
24916: LIST
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: LIST
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: PUSH
24951: LD_INT 101
24953: PUSH
24954: LD_INT 102
24956: PUSH
24957: LD_INT 103
24959: PUSH
24960: LD_INT 104
24962: PUSH
24963: LD_INT 105
24965: PUSH
24966: LD_INT 106
24968: PUSH
24969: LD_INT 107
24971: PUSH
24972: LD_INT 108
24974: PUSH
24975: LD_INT 109
24977: PUSH
24978: LD_INT 110
24980: PUSH
24981: LD_INT 111
24983: PUSH
24984: LD_INT 112
24986: PUSH
24987: LD_INT 113
24989: PUSH
24990: LD_INT 114
24992: PUSH
24993: LD_INT 115
24995: PUSH
24996: LD_INT 116
24998: PUSH
24999: LD_INT 117
25001: PUSH
25002: LD_INT 118
25004: PUSH
25005: EMPTY
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: PUSH
25025: EMPTY
25026: LIST
25027: LIST
25028: ST_TO_ADDR
// if result then
25029: LD_VAR 0 2
25033: IFFALSE 25819
// begin normal :=  ;
25035: LD_ADDR_VAR 0 5
25039: PUSH
25040: LD_STRING 
25042: ST_TO_ADDR
// hardcore :=  ;
25043: LD_ADDR_VAR 0 6
25047: PUSH
25048: LD_STRING 
25050: ST_TO_ADDR
// active :=  ;
25051: LD_ADDR_VAR 0 7
25055: PUSH
25056: LD_STRING 
25058: ST_TO_ADDR
// for i = 1 to normalCounter do
25059: LD_ADDR_VAR 0 8
25063: PUSH
25064: DOUBLE
25065: LD_INT 1
25067: DEC
25068: ST_TO_ADDR
25069: LD_EXP 62
25073: PUSH
25074: FOR_TO
25075: IFFALSE 25176
// begin tmp := 0 ;
25077: LD_ADDR_VAR 0 3
25081: PUSH
25082: LD_STRING 0
25084: ST_TO_ADDR
// if result [ 1 ] then
25085: LD_VAR 0 2
25089: PUSH
25090: LD_INT 1
25092: ARRAY
25093: IFFALSE 25158
// if result [ 1 ] [ 1 ] = i then
25095: LD_VAR 0 2
25099: PUSH
25100: LD_INT 1
25102: ARRAY
25103: PUSH
25104: LD_INT 1
25106: ARRAY
25107: PUSH
25108: LD_VAR 0 8
25112: EQUAL
25113: IFFALSE 25158
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25115: LD_ADDR_VAR 0 2
25119: PUSH
25120: LD_VAR 0 2
25124: PPUSH
25125: LD_INT 1
25127: PPUSH
25128: LD_VAR 0 2
25132: PUSH
25133: LD_INT 1
25135: ARRAY
25136: PPUSH
25137: LD_INT 1
25139: PPUSH
25140: CALL_OW 3
25144: PPUSH
25145: CALL_OW 1
25149: ST_TO_ADDR
// tmp := 1 ;
25150: LD_ADDR_VAR 0 3
25154: PUSH
25155: LD_STRING 1
25157: ST_TO_ADDR
// end ; normal := normal & tmp ;
25158: LD_ADDR_VAR 0 5
25162: PUSH
25163: LD_VAR 0 5
25167: PUSH
25168: LD_VAR 0 3
25172: STR
25173: ST_TO_ADDR
// end ;
25174: GO 25074
25176: POP
25177: POP
// for i = 1 to hardcoreCounter do
25178: LD_ADDR_VAR 0 8
25182: PUSH
25183: DOUBLE
25184: LD_INT 1
25186: DEC
25187: ST_TO_ADDR
25188: LD_EXP 63
25192: PUSH
25193: FOR_TO
25194: IFFALSE 25299
// begin tmp := 0 ;
25196: LD_ADDR_VAR 0 3
25200: PUSH
25201: LD_STRING 0
25203: ST_TO_ADDR
// if result [ 2 ] then
25204: LD_VAR 0 2
25208: PUSH
25209: LD_INT 2
25211: ARRAY
25212: IFFALSE 25281
// if result [ 2 ] [ 1 ] = 100 + i then
25214: LD_VAR 0 2
25218: PUSH
25219: LD_INT 2
25221: ARRAY
25222: PUSH
25223: LD_INT 1
25225: ARRAY
25226: PUSH
25227: LD_INT 100
25229: PUSH
25230: LD_VAR 0 8
25234: PLUS
25235: EQUAL
25236: IFFALSE 25281
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25238: LD_ADDR_VAR 0 2
25242: PUSH
25243: LD_VAR 0 2
25247: PPUSH
25248: LD_INT 2
25250: PPUSH
25251: LD_VAR 0 2
25255: PUSH
25256: LD_INT 2
25258: ARRAY
25259: PPUSH
25260: LD_INT 1
25262: PPUSH
25263: CALL_OW 3
25267: PPUSH
25268: CALL_OW 1
25272: ST_TO_ADDR
// tmp := 1 ;
25273: LD_ADDR_VAR 0 3
25277: PUSH
25278: LD_STRING 1
25280: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25281: LD_ADDR_VAR 0 6
25285: PUSH
25286: LD_VAR 0 6
25290: PUSH
25291: LD_VAR 0 3
25295: STR
25296: ST_TO_ADDR
// end ;
25297: GO 25193
25299: POP
25300: POP
// if isGameLoad then
25301: LD_VAR 0 1
25305: IFFALSE 25780
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25307: LD_ADDR_VAR 0 4
25311: PUSH
25312: LD_EXP 66
25316: PUSH
25317: LD_EXP 65
25321: PUSH
25322: LD_EXP 67
25326: PUSH
25327: LD_EXP 64
25331: PUSH
25332: LD_EXP 68
25336: PUSH
25337: LD_EXP 69
25341: PUSH
25342: LD_EXP 70
25346: PUSH
25347: LD_EXP 71
25351: PUSH
25352: LD_EXP 72
25356: PUSH
25357: LD_EXP 73
25361: PUSH
25362: LD_EXP 74
25366: PUSH
25367: LD_EXP 75
25371: PUSH
25372: LD_EXP 76
25376: PUSH
25377: LD_EXP 77
25381: PUSH
25382: LD_EXP 85
25386: PUSH
25387: LD_EXP 86
25391: PUSH
25392: LD_EXP 87
25396: PUSH
25397: LD_EXP 88
25401: PUSH
25402: LD_EXP 90
25406: PUSH
25407: LD_EXP 91
25411: PUSH
25412: LD_EXP 92
25416: PUSH
25417: LD_EXP 95
25421: PUSH
25422: LD_EXP 97
25426: PUSH
25427: LD_EXP 98
25431: PUSH
25432: LD_EXP 99
25436: PUSH
25437: LD_EXP 101
25441: PUSH
25442: LD_EXP 102
25446: PUSH
25447: LD_EXP 105
25451: PUSH
25452: LD_EXP 106
25456: PUSH
25457: LD_EXP 107
25461: PUSH
25462: LD_EXP 108
25466: PUSH
25467: LD_EXP 109
25471: PUSH
25472: LD_EXP 110
25476: PUSH
25477: LD_EXP 111
25481: PUSH
25482: LD_EXP 112
25486: PUSH
25487: LD_EXP 113
25491: PUSH
25492: LD_EXP 78
25496: PUSH
25497: LD_EXP 79
25501: PUSH
25502: LD_EXP 82
25506: PUSH
25507: LD_EXP 83
25511: PUSH
25512: LD_EXP 84
25516: PUSH
25517: LD_EXP 80
25521: PUSH
25522: LD_EXP 81
25526: PUSH
25527: LD_EXP 89
25531: PUSH
25532: LD_EXP 93
25536: PUSH
25537: LD_EXP 94
25541: PUSH
25542: LD_EXP 96
25546: PUSH
25547: LD_EXP 100
25551: PUSH
25552: LD_EXP 103
25556: PUSH
25557: LD_EXP 104
25561: PUSH
25562: LD_EXP 114
25566: PUSH
25567: LD_EXP 115
25571: PUSH
25572: LD_EXP 116
25576: PUSH
25577: LD_EXP 117
25581: PUSH
25582: EMPTY
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: LIST
25589: LIST
25590: LIST
25591: LIST
25592: LIST
25593: LIST
25594: LIST
25595: LIST
25596: LIST
25597: LIST
25598: LIST
25599: LIST
25600: LIST
25601: LIST
25602: LIST
25603: LIST
25604: LIST
25605: LIST
25606: LIST
25607: LIST
25608: LIST
25609: LIST
25610: LIST
25611: LIST
25612: LIST
25613: LIST
25614: LIST
25615: LIST
25616: LIST
25617: LIST
25618: LIST
25619: LIST
25620: LIST
25621: LIST
25622: LIST
25623: LIST
25624: LIST
25625: LIST
25626: LIST
25627: LIST
25628: LIST
25629: LIST
25630: LIST
25631: LIST
25632: LIST
25633: LIST
25634: LIST
25635: LIST
25636: LIST
25637: ST_TO_ADDR
// tmp :=  ;
25638: LD_ADDR_VAR 0 3
25642: PUSH
25643: LD_STRING 
25645: ST_TO_ADDR
// for i = 1 to normalCounter do
25646: LD_ADDR_VAR 0 8
25650: PUSH
25651: DOUBLE
25652: LD_INT 1
25654: DEC
25655: ST_TO_ADDR
25656: LD_EXP 62
25660: PUSH
25661: FOR_TO
25662: IFFALSE 25698
// begin if flags [ i ] then
25664: LD_VAR 0 4
25668: PUSH
25669: LD_VAR 0 8
25673: ARRAY
25674: IFFALSE 25696
// tmp := tmp & i & ; ;
25676: LD_ADDR_VAR 0 3
25680: PUSH
25681: LD_VAR 0 3
25685: PUSH
25686: LD_VAR 0 8
25690: STR
25691: PUSH
25692: LD_STRING ;
25694: STR
25695: ST_TO_ADDR
// end ;
25696: GO 25661
25698: POP
25699: POP
// for i = 1 to hardcoreCounter do
25700: LD_ADDR_VAR 0 8
25704: PUSH
25705: DOUBLE
25706: LD_INT 1
25708: DEC
25709: ST_TO_ADDR
25710: LD_EXP 63
25714: PUSH
25715: FOR_TO
25716: IFFALSE 25762
// begin if flags [ normalCounter + i ] then
25718: LD_VAR 0 4
25722: PUSH
25723: LD_EXP 62
25727: PUSH
25728: LD_VAR 0 8
25732: PLUS
25733: ARRAY
25734: IFFALSE 25760
// tmp := tmp & ( 100 + i ) & ; ;
25736: LD_ADDR_VAR 0 3
25740: PUSH
25741: LD_VAR 0 3
25745: PUSH
25746: LD_INT 100
25748: PUSH
25749: LD_VAR 0 8
25753: PLUS
25754: STR
25755: PUSH
25756: LD_STRING ;
25758: STR
25759: ST_TO_ADDR
// end ;
25760: GO 25715
25762: POP
25763: POP
// if tmp then
25764: LD_VAR 0 3
25768: IFFALSE 25780
// active := tmp ;
25770: LD_ADDR_VAR 0 7
25774: PUSH
25775: LD_VAR 0 3
25779: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25780: LD_STRING getStreamItemsFromMission("
25782: PUSH
25783: LD_VAR 0 5
25787: STR
25788: PUSH
25789: LD_STRING ","
25791: STR
25792: PUSH
25793: LD_VAR 0 6
25797: STR
25798: PUSH
25799: LD_STRING ","
25801: STR
25802: PUSH
25803: LD_VAR 0 7
25807: STR
25808: PUSH
25809: LD_STRING ")
25811: STR
25812: PPUSH
25813: CALL_OW 559
// end else
25817: GO 25826
// ToLua ( getStreamItemsFromMission("","","") ) ;
25819: LD_STRING getStreamItemsFromMission("","","")
25821: PPUSH
25822: CALL_OW 559
// end ;
25826: LD_VAR 0 2
25830: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25831: LD_EXP 61
25835: PUSH
25836: LD_EXP 66
25840: AND
25841: IFFALSE 25965
25843: GO 25845
25845: DISABLE
25846: LD_INT 0
25848: PPUSH
25849: PPUSH
// begin enable ;
25850: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25851: LD_ADDR_VAR 0 2
25855: PUSH
25856: LD_INT 22
25858: PUSH
25859: LD_OWVAR 2
25863: PUSH
25864: EMPTY
25865: LIST
25866: LIST
25867: PUSH
25868: LD_INT 2
25870: PUSH
25871: LD_INT 34
25873: PUSH
25874: LD_INT 7
25876: PUSH
25877: EMPTY
25878: LIST
25879: LIST
25880: PUSH
25881: LD_INT 34
25883: PUSH
25884: LD_INT 45
25886: PUSH
25887: EMPTY
25888: LIST
25889: LIST
25890: PUSH
25891: LD_INT 34
25893: PUSH
25894: LD_INT 28
25896: PUSH
25897: EMPTY
25898: LIST
25899: LIST
25900: PUSH
25901: LD_INT 34
25903: PUSH
25904: LD_INT 47
25906: PUSH
25907: EMPTY
25908: LIST
25909: LIST
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: LIST
25915: LIST
25916: LIST
25917: PUSH
25918: EMPTY
25919: LIST
25920: LIST
25921: PPUSH
25922: CALL_OW 69
25926: ST_TO_ADDR
// if not tmp then
25927: LD_VAR 0 2
25931: NOT
25932: IFFALSE 25936
// exit ;
25934: GO 25965
// for i in tmp do
25936: LD_ADDR_VAR 0 1
25940: PUSH
25941: LD_VAR 0 2
25945: PUSH
25946: FOR_IN
25947: IFFALSE 25963
// begin SetLives ( i , 0 ) ;
25949: LD_VAR 0 1
25953: PPUSH
25954: LD_INT 0
25956: PPUSH
25957: CALL_OW 234
// end ;
25961: GO 25946
25963: POP
25964: POP
// end ;
25965: PPOPN 2
25967: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25968: LD_EXP 61
25972: PUSH
25973: LD_EXP 67
25977: AND
25978: IFFALSE 26062
25980: GO 25982
25982: DISABLE
25983: LD_INT 0
25985: PPUSH
25986: PPUSH
// begin enable ;
25987: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25988: LD_ADDR_VAR 0 2
25992: PUSH
25993: LD_INT 22
25995: PUSH
25996: LD_OWVAR 2
26000: PUSH
26001: EMPTY
26002: LIST
26003: LIST
26004: PUSH
26005: LD_INT 32
26007: PUSH
26008: LD_INT 3
26010: PUSH
26011: EMPTY
26012: LIST
26013: LIST
26014: PUSH
26015: EMPTY
26016: LIST
26017: LIST
26018: PPUSH
26019: CALL_OW 69
26023: ST_TO_ADDR
// if not tmp then
26024: LD_VAR 0 2
26028: NOT
26029: IFFALSE 26033
// exit ;
26031: GO 26062
// for i in tmp do
26033: LD_ADDR_VAR 0 1
26037: PUSH
26038: LD_VAR 0 2
26042: PUSH
26043: FOR_IN
26044: IFFALSE 26060
// begin SetLives ( i , 0 ) ;
26046: LD_VAR 0 1
26050: PPUSH
26051: LD_INT 0
26053: PPUSH
26054: CALL_OW 234
// end ;
26058: GO 26043
26060: POP
26061: POP
// end ;
26062: PPOPN 2
26064: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26065: LD_EXP 61
26069: PUSH
26070: LD_EXP 64
26074: AND
26075: IFFALSE 26168
26077: GO 26079
26079: DISABLE
26080: LD_INT 0
26082: PPUSH
// begin enable ;
26083: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26084: LD_ADDR_VAR 0 1
26088: PUSH
26089: LD_INT 22
26091: PUSH
26092: LD_OWVAR 2
26096: PUSH
26097: EMPTY
26098: LIST
26099: LIST
26100: PUSH
26101: LD_INT 2
26103: PUSH
26104: LD_INT 25
26106: PUSH
26107: LD_INT 5
26109: PUSH
26110: EMPTY
26111: LIST
26112: LIST
26113: PUSH
26114: LD_INT 25
26116: PUSH
26117: LD_INT 9
26119: PUSH
26120: EMPTY
26121: LIST
26122: LIST
26123: PUSH
26124: LD_INT 25
26126: PUSH
26127: LD_INT 8
26129: PUSH
26130: EMPTY
26131: LIST
26132: LIST
26133: PUSH
26134: EMPTY
26135: LIST
26136: LIST
26137: LIST
26138: LIST
26139: PUSH
26140: EMPTY
26141: LIST
26142: LIST
26143: PPUSH
26144: CALL_OW 69
26148: PUSH
26149: FOR_IN
26150: IFFALSE 26166
// begin SetClass ( i , 1 ) ;
26152: LD_VAR 0 1
26156: PPUSH
26157: LD_INT 1
26159: PPUSH
26160: CALL_OW 336
// end ;
26164: GO 26149
26166: POP
26167: POP
// end ;
26168: PPOPN 1
26170: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26171: LD_EXP 61
26175: PUSH
26176: LD_EXP 65
26180: AND
26181: PUSH
26182: LD_OWVAR 65
26186: PUSH
26187: LD_INT 7
26189: LESS
26190: AND
26191: IFFALSE 26205
26193: GO 26195
26195: DISABLE
// begin enable ;
26196: ENABLE
// game_speed := 7 ;
26197: LD_ADDR_OWVAR 65
26201: PUSH
26202: LD_INT 7
26204: ST_TO_ADDR
// end ;
26205: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26206: LD_EXP 61
26210: PUSH
26211: LD_EXP 68
26215: AND
26216: IFFALSE 26418
26218: GO 26220
26220: DISABLE
26221: LD_INT 0
26223: PPUSH
26224: PPUSH
26225: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26226: LD_ADDR_VAR 0 3
26230: PUSH
26231: LD_INT 81
26233: PUSH
26234: LD_OWVAR 2
26238: PUSH
26239: EMPTY
26240: LIST
26241: LIST
26242: PUSH
26243: LD_INT 21
26245: PUSH
26246: LD_INT 1
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: PUSH
26253: EMPTY
26254: LIST
26255: LIST
26256: PPUSH
26257: CALL_OW 69
26261: ST_TO_ADDR
// if not tmp then
26262: LD_VAR 0 3
26266: NOT
26267: IFFALSE 26271
// exit ;
26269: GO 26418
// if tmp > 5 then
26271: LD_VAR 0 3
26275: PUSH
26276: LD_INT 5
26278: GREATER
26279: IFFALSE 26291
// k := 5 else
26281: LD_ADDR_VAR 0 2
26285: PUSH
26286: LD_INT 5
26288: ST_TO_ADDR
26289: GO 26301
// k := tmp ;
26291: LD_ADDR_VAR 0 2
26295: PUSH
26296: LD_VAR 0 3
26300: ST_TO_ADDR
// for i := 1 to k do
26301: LD_ADDR_VAR 0 1
26305: PUSH
26306: DOUBLE
26307: LD_INT 1
26309: DEC
26310: ST_TO_ADDR
26311: LD_VAR 0 2
26315: PUSH
26316: FOR_TO
26317: IFFALSE 26416
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26319: LD_VAR 0 3
26323: PUSH
26324: LD_VAR 0 1
26328: ARRAY
26329: PPUSH
26330: LD_VAR 0 1
26334: PUSH
26335: LD_INT 4
26337: MOD
26338: PUSH
26339: LD_INT 1
26341: PLUS
26342: PPUSH
26343: CALL_OW 259
26347: PUSH
26348: LD_INT 10
26350: LESS
26351: IFFALSE 26414
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26353: LD_VAR 0 3
26357: PUSH
26358: LD_VAR 0 1
26362: ARRAY
26363: PPUSH
26364: LD_VAR 0 1
26368: PUSH
26369: LD_INT 4
26371: MOD
26372: PUSH
26373: LD_INT 1
26375: PLUS
26376: PPUSH
26377: LD_VAR 0 3
26381: PUSH
26382: LD_VAR 0 1
26386: ARRAY
26387: PPUSH
26388: LD_VAR 0 1
26392: PUSH
26393: LD_INT 4
26395: MOD
26396: PUSH
26397: LD_INT 1
26399: PLUS
26400: PPUSH
26401: CALL_OW 259
26405: PUSH
26406: LD_INT 1
26408: PLUS
26409: PPUSH
26410: CALL_OW 237
26414: GO 26316
26416: POP
26417: POP
// end ;
26418: PPOPN 3
26420: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26421: LD_EXP 61
26425: PUSH
26426: LD_EXP 69
26430: AND
26431: IFFALSE 26451
26433: GO 26435
26435: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26436: LD_INT 4
26438: PPUSH
26439: LD_OWVAR 2
26443: PPUSH
26444: LD_INT 0
26446: PPUSH
26447: CALL_OW 324
26451: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26452: LD_EXP 61
26456: PUSH
26457: LD_EXP 98
26461: AND
26462: IFFALSE 26482
26464: GO 26466
26466: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26467: LD_INT 19
26469: PPUSH
26470: LD_OWVAR 2
26474: PPUSH
26475: LD_INT 0
26477: PPUSH
26478: CALL_OW 324
26482: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26483: LD_EXP 61
26487: PUSH
26488: LD_EXP 70
26492: AND
26493: IFFALSE 26595
26495: GO 26497
26497: DISABLE
26498: LD_INT 0
26500: PPUSH
26501: PPUSH
// begin enable ;
26502: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26503: LD_ADDR_VAR 0 2
26507: PUSH
26508: LD_INT 22
26510: PUSH
26511: LD_OWVAR 2
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: PUSH
26520: LD_INT 2
26522: PUSH
26523: LD_INT 34
26525: PUSH
26526: LD_INT 11
26528: PUSH
26529: EMPTY
26530: LIST
26531: LIST
26532: PUSH
26533: LD_INT 34
26535: PUSH
26536: LD_INT 30
26538: PUSH
26539: EMPTY
26540: LIST
26541: LIST
26542: PUSH
26543: EMPTY
26544: LIST
26545: LIST
26546: LIST
26547: PUSH
26548: EMPTY
26549: LIST
26550: LIST
26551: PPUSH
26552: CALL_OW 69
26556: ST_TO_ADDR
// if not tmp then
26557: LD_VAR 0 2
26561: NOT
26562: IFFALSE 26566
// exit ;
26564: GO 26595
// for i in tmp do
26566: LD_ADDR_VAR 0 1
26570: PUSH
26571: LD_VAR 0 2
26575: PUSH
26576: FOR_IN
26577: IFFALSE 26593
// begin SetLives ( i , 0 ) ;
26579: LD_VAR 0 1
26583: PPUSH
26584: LD_INT 0
26586: PPUSH
26587: CALL_OW 234
// end ;
26591: GO 26576
26593: POP
26594: POP
// end ;
26595: PPOPN 2
26597: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26598: LD_EXP 61
26602: PUSH
26603: LD_EXP 71
26607: AND
26608: IFFALSE 26628
26610: GO 26612
26612: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26613: LD_INT 32
26615: PPUSH
26616: LD_OWVAR 2
26620: PPUSH
26621: LD_INT 0
26623: PPUSH
26624: CALL_OW 324
26628: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26629: LD_EXP 61
26633: PUSH
26634: LD_EXP 72
26638: AND
26639: IFFALSE 26820
26641: GO 26643
26643: DISABLE
26644: LD_INT 0
26646: PPUSH
26647: PPUSH
26648: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26649: LD_ADDR_VAR 0 2
26653: PUSH
26654: LD_INT 22
26656: PUSH
26657: LD_OWVAR 2
26661: PUSH
26662: EMPTY
26663: LIST
26664: LIST
26665: PUSH
26666: LD_INT 33
26668: PUSH
26669: LD_INT 3
26671: PUSH
26672: EMPTY
26673: LIST
26674: LIST
26675: PUSH
26676: EMPTY
26677: LIST
26678: LIST
26679: PPUSH
26680: CALL_OW 69
26684: ST_TO_ADDR
// if not tmp then
26685: LD_VAR 0 2
26689: NOT
26690: IFFALSE 26694
// exit ;
26692: GO 26820
// side := 0 ;
26694: LD_ADDR_VAR 0 3
26698: PUSH
26699: LD_INT 0
26701: ST_TO_ADDR
// for i := 1 to 8 do
26702: LD_ADDR_VAR 0 1
26706: PUSH
26707: DOUBLE
26708: LD_INT 1
26710: DEC
26711: ST_TO_ADDR
26712: LD_INT 8
26714: PUSH
26715: FOR_TO
26716: IFFALSE 26764
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26718: LD_OWVAR 2
26722: PUSH
26723: LD_VAR 0 1
26727: NONEQUAL
26728: PUSH
26729: LD_OWVAR 2
26733: PPUSH
26734: LD_VAR 0 1
26738: PPUSH
26739: CALL_OW 81
26743: PUSH
26744: LD_INT 2
26746: EQUAL
26747: AND
26748: IFFALSE 26762
// begin side := i ;
26750: LD_ADDR_VAR 0 3
26754: PUSH
26755: LD_VAR 0 1
26759: ST_TO_ADDR
// break ;
26760: GO 26764
// end ;
26762: GO 26715
26764: POP
26765: POP
// if not side then
26766: LD_VAR 0 3
26770: NOT
26771: IFFALSE 26775
// exit ;
26773: GO 26820
// for i := 1 to tmp do
26775: LD_ADDR_VAR 0 1
26779: PUSH
26780: DOUBLE
26781: LD_INT 1
26783: DEC
26784: ST_TO_ADDR
26785: LD_VAR 0 2
26789: PUSH
26790: FOR_TO
26791: IFFALSE 26818
// if Prob ( 60 ) then
26793: LD_INT 60
26795: PPUSH
26796: CALL_OW 13
26800: IFFALSE 26816
// SetSide ( i , side ) ;
26802: LD_VAR 0 1
26806: PPUSH
26807: LD_VAR 0 3
26811: PPUSH
26812: CALL_OW 235
26816: GO 26790
26818: POP
26819: POP
// end ;
26820: PPOPN 3
26822: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26823: LD_EXP 61
26827: PUSH
26828: LD_EXP 74
26832: AND
26833: IFFALSE 26952
26835: GO 26837
26837: DISABLE
26838: LD_INT 0
26840: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26841: LD_ADDR_VAR 0 1
26845: PUSH
26846: LD_INT 22
26848: PUSH
26849: LD_OWVAR 2
26853: PUSH
26854: EMPTY
26855: LIST
26856: LIST
26857: PUSH
26858: LD_INT 21
26860: PUSH
26861: LD_INT 1
26863: PUSH
26864: EMPTY
26865: LIST
26866: LIST
26867: PUSH
26868: LD_INT 3
26870: PUSH
26871: LD_INT 23
26873: PUSH
26874: LD_INT 0
26876: PUSH
26877: EMPTY
26878: LIST
26879: LIST
26880: PUSH
26881: EMPTY
26882: LIST
26883: LIST
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: LIST
26889: PPUSH
26890: CALL_OW 69
26894: PUSH
26895: FOR_IN
26896: IFFALSE 26950
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26898: LD_VAR 0 1
26902: PPUSH
26903: CALL_OW 257
26907: PUSH
26908: LD_INT 1
26910: PUSH
26911: LD_INT 2
26913: PUSH
26914: LD_INT 3
26916: PUSH
26917: LD_INT 4
26919: PUSH
26920: EMPTY
26921: LIST
26922: LIST
26923: LIST
26924: LIST
26925: IN
26926: IFFALSE 26948
// SetClass ( un , rand ( 1 , 4 ) ) ;
26928: LD_VAR 0 1
26932: PPUSH
26933: LD_INT 1
26935: PPUSH
26936: LD_INT 4
26938: PPUSH
26939: CALL_OW 12
26943: PPUSH
26944: CALL_OW 336
26948: GO 26895
26950: POP
26951: POP
// end ;
26952: PPOPN 1
26954: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26955: LD_EXP 61
26959: PUSH
26960: LD_EXP 73
26964: AND
26965: IFFALSE 27044
26967: GO 26969
26969: DISABLE
26970: LD_INT 0
26972: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26973: LD_ADDR_VAR 0 1
26977: PUSH
26978: LD_INT 22
26980: PUSH
26981: LD_OWVAR 2
26985: PUSH
26986: EMPTY
26987: LIST
26988: LIST
26989: PUSH
26990: LD_INT 21
26992: PUSH
26993: LD_INT 3
26995: PUSH
26996: EMPTY
26997: LIST
26998: LIST
26999: PUSH
27000: EMPTY
27001: LIST
27002: LIST
27003: PPUSH
27004: CALL_OW 69
27008: ST_TO_ADDR
// if not tmp then
27009: LD_VAR 0 1
27013: NOT
27014: IFFALSE 27018
// exit ;
27016: GO 27044
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
27018: LD_VAR 0 1
27022: PUSH
27023: LD_INT 1
27025: PPUSH
27026: LD_VAR 0 1
27030: PPUSH
27031: CALL_OW 12
27035: ARRAY
27036: PPUSH
27037: LD_INT 100
27039: PPUSH
27040: CALL_OW 234
// end ;
27044: PPOPN 1
27046: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27047: LD_EXP 61
27051: PUSH
27052: LD_EXP 75
27056: AND
27057: IFFALSE 27155
27059: GO 27061
27061: DISABLE
27062: LD_INT 0
27064: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27065: LD_ADDR_VAR 0 1
27069: PUSH
27070: LD_INT 22
27072: PUSH
27073: LD_OWVAR 2
27077: PUSH
27078: EMPTY
27079: LIST
27080: LIST
27081: PUSH
27082: LD_INT 21
27084: PUSH
27085: LD_INT 1
27087: PUSH
27088: EMPTY
27089: LIST
27090: LIST
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: PPUSH
27096: CALL_OW 69
27100: ST_TO_ADDR
// if not tmp then
27101: LD_VAR 0 1
27105: NOT
27106: IFFALSE 27110
// exit ;
27108: GO 27155
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27110: LD_VAR 0 1
27114: PUSH
27115: LD_INT 1
27117: PPUSH
27118: LD_VAR 0 1
27122: PPUSH
27123: CALL_OW 12
27127: ARRAY
27128: PPUSH
27129: LD_INT 1
27131: PPUSH
27132: LD_INT 4
27134: PPUSH
27135: CALL_OW 12
27139: PPUSH
27140: LD_INT 3000
27142: PPUSH
27143: LD_INT 9000
27145: PPUSH
27146: CALL_OW 12
27150: PPUSH
27151: CALL_OW 492
// end ;
27155: PPOPN 1
27157: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27158: LD_EXP 61
27162: PUSH
27163: LD_EXP 76
27167: AND
27168: IFFALSE 27188
27170: GO 27172
27172: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27173: LD_INT 1
27175: PPUSH
27176: LD_OWVAR 2
27180: PPUSH
27181: LD_INT 0
27183: PPUSH
27184: CALL_OW 324
27188: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27189: LD_EXP 61
27193: PUSH
27194: LD_EXP 77
27198: AND
27199: IFFALSE 27282
27201: GO 27203
27203: DISABLE
27204: LD_INT 0
27206: PPUSH
27207: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27208: LD_ADDR_VAR 0 2
27212: PUSH
27213: LD_INT 22
27215: PUSH
27216: LD_OWVAR 2
27220: PUSH
27221: EMPTY
27222: LIST
27223: LIST
27224: PUSH
27225: LD_INT 21
27227: PUSH
27228: LD_INT 3
27230: PUSH
27231: EMPTY
27232: LIST
27233: LIST
27234: PUSH
27235: EMPTY
27236: LIST
27237: LIST
27238: PPUSH
27239: CALL_OW 69
27243: ST_TO_ADDR
// if not tmp then
27244: LD_VAR 0 2
27248: NOT
27249: IFFALSE 27253
// exit ;
27251: GO 27282
// for i in tmp do
27253: LD_ADDR_VAR 0 1
27257: PUSH
27258: LD_VAR 0 2
27262: PUSH
27263: FOR_IN
27264: IFFALSE 27280
// SetBLevel ( i , 10 ) ;
27266: LD_VAR 0 1
27270: PPUSH
27271: LD_INT 10
27273: PPUSH
27274: CALL_OW 241
27278: GO 27263
27280: POP
27281: POP
// end ;
27282: PPOPN 2
27284: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27285: LD_EXP 61
27289: PUSH
27290: LD_EXP 78
27294: AND
27295: IFFALSE 27406
27297: GO 27299
27299: DISABLE
27300: LD_INT 0
27302: PPUSH
27303: PPUSH
27304: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27305: LD_ADDR_VAR 0 3
27309: PUSH
27310: LD_INT 22
27312: PUSH
27313: LD_OWVAR 2
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: PUSH
27322: LD_INT 25
27324: PUSH
27325: LD_INT 1
27327: PUSH
27328: EMPTY
27329: LIST
27330: LIST
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: PPUSH
27336: CALL_OW 69
27340: ST_TO_ADDR
// if not tmp then
27341: LD_VAR 0 3
27345: NOT
27346: IFFALSE 27350
// exit ;
27348: GO 27406
// un := tmp [ rand ( 1 , tmp ) ] ;
27350: LD_ADDR_VAR 0 2
27354: PUSH
27355: LD_VAR 0 3
27359: PUSH
27360: LD_INT 1
27362: PPUSH
27363: LD_VAR 0 3
27367: PPUSH
27368: CALL_OW 12
27372: ARRAY
27373: ST_TO_ADDR
// if Crawls ( un ) then
27374: LD_VAR 0 2
27378: PPUSH
27379: CALL_OW 318
27383: IFFALSE 27394
// ComWalk ( un ) ;
27385: LD_VAR 0 2
27389: PPUSH
27390: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27394: LD_VAR 0 2
27398: PPUSH
27399: LD_INT 5
27401: PPUSH
27402: CALL_OW 336
// end ;
27406: PPOPN 3
27408: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27409: LD_EXP 61
27413: PUSH
27414: LD_EXP 79
27418: AND
27419: PUSH
27420: LD_OWVAR 67
27424: PUSH
27425: LD_INT 4
27427: LESS
27428: AND
27429: IFFALSE 27448
27431: GO 27433
27433: DISABLE
// begin Difficulty := Difficulty + 1 ;
27434: LD_ADDR_OWVAR 67
27438: PUSH
27439: LD_OWVAR 67
27443: PUSH
27444: LD_INT 1
27446: PLUS
27447: ST_TO_ADDR
// end ;
27448: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27449: LD_EXP 61
27453: PUSH
27454: LD_EXP 80
27458: AND
27459: IFFALSE 27562
27461: GO 27463
27463: DISABLE
27464: LD_INT 0
27466: PPUSH
// begin for i := 1 to 5 do
27467: LD_ADDR_VAR 0 1
27471: PUSH
27472: DOUBLE
27473: LD_INT 1
27475: DEC
27476: ST_TO_ADDR
27477: LD_INT 5
27479: PUSH
27480: FOR_TO
27481: IFFALSE 27560
// begin uc_nation := nation_nature ;
27483: LD_ADDR_OWVAR 21
27487: PUSH
27488: LD_INT 0
27490: ST_TO_ADDR
// uc_side := 0 ;
27491: LD_ADDR_OWVAR 20
27495: PUSH
27496: LD_INT 0
27498: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27499: LD_ADDR_OWVAR 29
27503: PUSH
27504: LD_INT 12
27506: PUSH
27507: LD_INT 12
27509: PUSH
27510: EMPTY
27511: LIST
27512: LIST
27513: ST_TO_ADDR
// hc_agressivity := 20 ;
27514: LD_ADDR_OWVAR 35
27518: PUSH
27519: LD_INT 20
27521: ST_TO_ADDR
// hc_class := class_tiger ;
27522: LD_ADDR_OWVAR 28
27526: PUSH
27527: LD_INT 14
27529: ST_TO_ADDR
// hc_gallery :=  ;
27530: LD_ADDR_OWVAR 33
27534: PUSH
27535: LD_STRING 
27537: ST_TO_ADDR
// hc_name :=  ;
27538: LD_ADDR_OWVAR 26
27542: PUSH
27543: LD_STRING 
27545: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27546: CALL_OW 44
27550: PPUSH
27551: LD_INT 0
27553: PPUSH
27554: CALL_OW 51
// end ;
27558: GO 27480
27560: POP
27561: POP
// end ;
27562: PPOPN 1
27564: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27565: LD_EXP 61
27569: PUSH
27570: LD_EXP 81
27574: AND
27575: IFFALSE 27584
27577: GO 27579
27579: DISABLE
// StreamSibBomb ;
27580: CALL 27585 0 0
27584: END
// export function StreamSibBomb ; var i , x , y ; begin
27585: LD_INT 0
27587: PPUSH
27588: PPUSH
27589: PPUSH
27590: PPUSH
// result := false ;
27591: LD_ADDR_VAR 0 1
27595: PUSH
27596: LD_INT 0
27598: ST_TO_ADDR
// for i := 1 to 16 do
27599: LD_ADDR_VAR 0 2
27603: PUSH
27604: DOUBLE
27605: LD_INT 1
27607: DEC
27608: ST_TO_ADDR
27609: LD_INT 16
27611: PUSH
27612: FOR_TO
27613: IFFALSE 27812
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27615: LD_ADDR_VAR 0 3
27619: PUSH
27620: LD_INT 10
27622: PUSH
27623: LD_INT 20
27625: PUSH
27626: LD_INT 30
27628: PUSH
27629: LD_INT 40
27631: PUSH
27632: LD_INT 50
27634: PUSH
27635: LD_INT 60
27637: PUSH
27638: LD_INT 70
27640: PUSH
27641: LD_INT 80
27643: PUSH
27644: LD_INT 90
27646: PUSH
27647: LD_INT 100
27649: PUSH
27650: LD_INT 110
27652: PUSH
27653: LD_INT 120
27655: PUSH
27656: LD_INT 130
27658: PUSH
27659: LD_INT 140
27661: PUSH
27662: LD_INT 150
27664: PUSH
27665: EMPTY
27666: LIST
27667: LIST
27668: LIST
27669: LIST
27670: LIST
27671: LIST
27672: LIST
27673: LIST
27674: LIST
27675: LIST
27676: LIST
27677: LIST
27678: LIST
27679: LIST
27680: LIST
27681: PUSH
27682: LD_INT 1
27684: PPUSH
27685: LD_INT 15
27687: PPUSH
27688: CALL_OW 12
27692: ARRAY
27693: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27694: LD_ADDR_VAR 0 4
27698: PUSH
27699: LD_INT 10
27701: PUSH
27702: LD_INT 20
27704: PUSH
27705: LD_INT 30
27707: PUSH
27708: LD_INT 40
27710: PUSH
27711: LD_INT 50
27713: PUSH
27714: LD_INT 60
27716: PUSH
27717: LD_INT 70
27719: PUSH
27720: LD_INT 80
27722: PUSH
27723: LD_INT 90
27725: PUSH
27726: LD_INT 100
27728: PUSH
27729: LD_INT 110
27731: PUSH
27732: LD_INT 120
27734: PUSH
27735: LD_INT 130
27737: PUSH
27738: LD_INT 140
27740: PUSH
27741: LD_INT 150
27743: PUSH
27744: EMPTY
27745: LIST
27746: LIST
27747: LIST
27748: LIST
27749: LIST
27750: LIST
27751: LIST
27752: LIST
27753: LIST
27754: LIST
27755: LIST
27756: LIST
27757: LIST
27758: LIST
27759: LIST
27760: PUSH
27761: LD_INT 1
27763: PPUSH
27764: LD_INT 15
27766: PPUSH
27767: CALL_OW 12
27771: ARRAY
27772: ST_TO_ADDR
// if ValidHex ( x , y ) then
27773: LD_VAR 0 3
27777: PPUSH
27778: LD_VAR 0 4
27782: PPUSH
27783: CALL_OW 488
27787: IFFALSE 27810
// begin result := [ x , y ] ;
27789: LD_ADDR_VAR 0 1
27793: PUSH
27794: LD_VAR 0 3
27798: PUSH
27799: LD_VAR 0 4
27803: PUSH
27804: EMPTY
27805: LIST
27806: LIST
27807: ST_TO_ADDR
// break ;
27808: GO 27812
// end ; end ;
27810: GO 27612
27812: POP
27813: POP
// if result then
27814: LD_VAR 0 1
27818: IFFALSE 27878
// begin ToLua ( playSibBomb() ) ;
27820: LD_STRING playSibBomb()
27822: PPUSH
27823: CALL_OW 559
// wait ( 0 0$14 ) ;
27827: LD_INT 490
27829: PPUSH
27830: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27834: LD_VAR 0 1
27838: PUSH
27839: LD_INT 1
27841: ARRAY
27842: PPUSH
27843: LD_VAR 0 1
27847: PUSH
27848: LD_INT 2
27850: ARRAY
27851: PPUSH
27852: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27856: LD_VAR 0 1
27860: PUSH
27861: LD_INT 1
27863: ARRAY
27864: PPUSH
27865: LD_VAR 0 1
27869: PUSH
27870: LD_INT 2
27872: ARRAY
27873: PPUSH
27874: CALL_OW 429
// end ; end ;
27878: LD_VAR 0 1
27882: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27883: LD_EXP 61
27887: PUSH
27888: LD_EXP 83
27892: AND
27893: IFFALSE 27905
27895: GO 27897
27897: DISABLE
// YouLost (  ) ;
27898: LD_STRING 
27900: PPUSH
27901: CALL_OW 104
27905: END
// every 0 0$1 trigger StreamModeActive and sFog do
27906: LD_EXP 61
27910: PUSH
27911: LD_EXP 82
27915: AND
27916: IFFALSE 27930
27918: GO 27920
27920: DISABLE
// FogOff ( your_side ) ;
27921: LD_OWVAR 2
27925: PPUSH
27926: CALL_OW 344
27930: END
// every 0 0$1 trigger StreamModeActive and sSun do
27931: LD_EXP 61
27935: PUSH
27936: LD_EXP 84
27940: AND
27941: IFFALSE 27969
27943: GO 27945
27945: DISABLE
// begin solar_recharge_percent := 0 ;
27946: LD_ADDR_OWVAR 79
27950: PUSH
27951: LD_INT 0
27953: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27954: LD_INT 10500
27956: PPUSH
27957: CALL_OW 67
// solar_recharge_percent := 100 ;
27961: LD_ADDR_OWVAR 79
27965: PUSH
27966: LD_INT 100
27968: ST_TO_ADDR
// end ;
27969: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27970: LD_EXP 61
27974: PUSH
27975: LD_EXP 85
27979: AND
27980: IFFALSE 28219
27982: GO 27984
27984: DISABLE
27985: LD_INT 0
27987: PPUSH
27988: PPUSH
27989: PPUSH
// begin tmp := [ ] ;
27990: LD_ADDR_VAR 0 3
27994: PUSH
27995: EMPTY
27996: ST_TO_ADDR
// for i := 1 to 6 do
27997: LD_ADDR_VAR 0 1
28001: PUSH
28002: DOUBLE
28003: LD_INT 1
28005: DEC
28006: ST_TO_ADDR
28007: LD_INT 6
28009: PUSH
28010: FOR_TO
28011: IFFALSE 28116
// begin uc_nation := nation_nature ;
28013: LD_ADDR_OWVAR 21
28017: PUSH
28018: LD_INT 0
28020: ST_TO_ADDR
// uc_side := 0 ;
28021: LD_ADDR_OWVAR 20
28025: PUSH
28026: LD_INT 0
28028: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28029: LD_ADDR_OWVAR 29
28033: PUSH
28034: LD_INT 12
28036: PUSH
28037: LD_INT 12
28039: PUSH
28040: EMPTY
28041: LIST
28042: LIST
28043: ST_TO_ADDR
// hc_agressivity := 20 ;
28044: LD_ADDR_OWVAR 35
28048: PUSH
28049: LD_INT 20
28051: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28052: LD_ADDR_OWVAR 28
28056: PUSH
28057: LD_INT 17
28059: ST_TO_ADDR
// hc_gallery :=  ;
28060: LD_ADDR_OWVAR 33
28064: PUSH
28065: LD_STRING 
28067: ST_TO_ADDR
// hc_name :=  ;
28068: LD_ADDR_OWVAR 26
28072: PUSH
28073: LD_STRING 
28075: ST_TO_ADDR
// un := CreateHuman ;
28076: LD_ADDR_VAR 0 2
28080: PUSH
28081: CALL_OW 44
28085: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28086: LD_VAR 0 2
28090: PPUSH
28091: LD_INT 1
28093: PPUSH
28094: CALL_OW 51
// tmp := tmp ^ un ;
28098: LD_ADDR_VAR 0 3
28102: PUSH
28103: LD_VAR 0 3
28107: PUSH
28108: LD_VAR 0 2
28112: ADD
28113: ST_TO_ADDR
// end ;
28114: GO 28010
28116: POP
28117: POP
// repeat wait ( 0 0$1 ) ;
28118: LD_INT 35
28120: PPUSH
28121: CALL_OW 67
// for un in tmp do
28125: LD_ADDR_VAR 0 2
28129: PUSH
28130: LD_VAR 0 3
28134: PUSH
28135: FOR_IN
28136: IFFALSE 28210
// begin if IsDead ( un ) then
28138: LD_VAR 0 2
28142: PPUSH
28143: CALL_OW 301
28147: IFFALSE 28167
// begin tmp := tmp diff un ;
28149: LD_ADDR_VAR 0 3
28153: PUSH
28154: LD_VAR 0 3
28158: PUSH
28159: LD_VAR 0 2
28163: DIFF
28164: ST_TO_ADDR
// continue ;
28165: GO 28135
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28167: LD_VAR 0 2
28171: PPUSH
28172: LD_INT 3
28174: PUSH
28175: LD_INT 22
28177: PUSH
28178: LD_INT 0
28180: PUSH
28181: EMPTY
28182: LIST
28183: LIST
28184: PUSH
28185: EMPTY
28186: LIST
28187: LIST
28188: PPUSH
28189: CALL_OW 69
28193: PPUSH
28194: LD_VAR 0 2
28198: PPUSH
28199: CALL_OW 74
28203: PPUSH
28204: CALL_OW 115
// end ;
28208: GO 28135
28210: POP
28211: POP
// until not tmp ;
28212: LD_VAR 0 3
28216: NOT
28217: IFFALSE 28118
// end ;
28219: PPOPN 3
28221: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28222: LD_EXP 61
28226: PUSH
28227: LD_EXP 86
28231: AND
28232: IFFALSE 28286
28234: GO 28236
28236: DISABLE
// begin ToLua ( displayTroll(); ) ;
28237: LD_STRING displayTroll();
28239: PPUSH
28240: CALL_OW 559
// wait ( 3 3$00 ) ;
28244: LD_INT 6300
28246: PPUSH
28247: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28251: LD_STRING hideTroll();
28253: PPUSH
28254: CALL_OW 559
// wait ( 1 1$00 ) ;
28258: LD_INT 2100
28260: PPUSH
28261: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28265: LD_STRING displayTroll();
28267: PPUSH
28268: CALL_OW 559
// wait ( 1 1$00 ) ;
28272: LD_INT 2100
28274: PPUSH
28275: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28279: LD_STRING hideTroll();
28281: PPUSH
28282: CALL_OW 559
// end ;
28286: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28287: LD_EXP 61
28291: PUSH
28292: LD_EXP 87
28296: AND
28297: IFFALSE 28360
28299: GO 28301
28301: DISABLE
28302: LD_INT 0
28304: PPUSH
// begin p := 0 ;
28305: LD_ADDR_VAR 0 1
28309: PUSH
28310: LD_INT 0
28312: ST_TO_ADDR
// repeat game_speed := 1 ;
28313: LD_ADDR_OWVAR 65
28317: PUSH
28318: LD_INT 1
28320: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28321: LD_INT 35
28323: PPUSH
28324: CALL_OW 67
// p := p + 1 ;
28328: LD_ADDR_VAR 0 1
28332: PUSH
28333: LD_VAR 0 1
28337: PUSH
28338: LD_INT 1
28340: PLUS
28341: ST_TO_ADDR
// until p >= 60 ;
28342: LD_VAR 0 1
28346: PUSH
28347: LD_INT 60
28349: GREATEREQUAL
28350: IFFALSE 28313
// game_speed := 4 ;
28352: LD_ADDR_OWVAR 65
28356: PUSH
28357: LD_INT 4
28359: ST_TO_ADDR
// end ;
28360: PPOPN 1
28362: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28363: LD_EXP 61
28367: PUSH
28368: LD_EXP 88
28372: AND
28373: IFFALSE 28519
28375: GO 28377
28377: DISABLE
28378: LD_INT 0
28380: PPUSH
28381: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28382: LD_ADDR_VAR 0 1
28386: PUSH
28387: LD_INT 22
28389: PUSH
28390: LD_OWVAR 2
28394: PUSH
28395: EMPTY
28396: LIST
28397: LIST
28398: PUSH
28399: LD_INT 2
28401: PUSH
28402: LD_INT 30
28404: PUSH
28405: LD_INT 0
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: PUSH
28412: LD_INT 30
28414: PUSH
28415: LD_INT 1
28417: PUSH
28418: EMPTY
28419: LIST
28420: LIST
28421: PUSH
28422: EMPTY
28423: LIST
28424: LIST
28425: LIST
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: PPUSH
28431: CALL_OW 69
28435: ST_TO_ADDR
// if not depot then
28436: LD_VAR 0 1
28440: NOT
28441: IFFALSE 28445
// exit ;
28443: GO 28519
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28445: LD_ADDR_VAR 0 2
28449: PUSH
28450: LD_VAR 0 1
28454: PUSH
28455: LD_INT 1
28457: PPUSH
28458: LD_VAR 0 1
28462: PPUSH
28463: CALL_OW 12
28467: ARRAY
28468: PPUSH
28469: CALL_OW 274
28473: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28474: LD_VAR 0 2
28478: PPUSH
28479: LD_INT 1
28481: PPUSH
28482: LD_INT 0
28484: PPUSH
28485: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28489: LD_VAR 0 2
28493: PPUSH
28494: LD_INT 2
28496: PPUSH
28497: LD_INT 0
28499: PPUSH
28500: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28504: LD_VAR 0 2
28508: PPUSH
28509: LD_INT 3
28511: PPUSH
28512: LD_INT 0
28514: PPUSH
28515: CALL_OW 277
// end ;
28519: PPOPN 2
28521: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28522: LD_EXP 61
28526: PUSH
28527: LD_EXP 89
28531: AND
28532: IFFALSE 28629
28534: GO 28536
28536: DISABLE
28537: LD_INT 0
28539: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28540: LD_ADDR_VAR 0 1
28544: PUSH
28545: LD_INT 22
28547: PUSH
28548: LD_OWVAR 2
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: PUSH
28557: LD_INT 21
28559: PUSH
28560: LD_INT 1
28562: PUSH
28563: EMPTY
28564: LIST
28565: LIST
28566: PUSH
28567: LD_INT 3
28569: PUSH
28570: LD_INT 23
28572: PUSH
28573: LD_INT 0
28575: PUSH
28576: EMPTY
28577: LIST
28578: LIST
28579: PUSH
28580: EMPTY
28581: LIST
28582: LIST
28583: PUSH
28584: EMPTY
28585: LIST
28586: LIST
28587: LIST
28588: PPUSH
28589: CALL_OW 69
28593: ST_TO_ADDR
// if not tmp then
28594: LD_VAR 0 1
28598: NOT
28599: IFFALSE 28603
// exit ;
28601: GO 28629
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28603: LD_VAR 0 1
28607: PUSH
28608: LD_INT 1
28610: PPUSH
28611: LD_VAR 0 1
28615: PPUSH
28616: CALL_OW 12
28620: ARRAY
28621: PPUSH
28622: LD_INT 200
28624: PPUSH
28625: CALL_OW 234
// end ;
28629: PPOPN 1
28631: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28632: LD_EXP 61
28636: PUSH
28637: LD_EXP 90
28641: AND
28642: IFFALSE 28721
28644: GO 28646
28646: DISABLE
28647: LD_INT 0
28649: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28650: LD_ADDR_VAR 0 1
28654: PUSH
28655: LD_INT 22
28657: PUSH
28658: LD_OWVAR 2
28662: PUSH
28663: EMPTY
28664: LIST
28665: LIST
28666: PUSH
28667: LD_INT 21
28669: PUSH
28670: LD_INT 2
28672: PUSH
28673: EMPTY
28674: LIST
28675: LIST
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: PPUSH
28681: CALL_OW 69
28685: ST_TO_ADDR
// if not tmp then
28686: LD_VAR 0 1
28690: NOT
28691: IFFALSE 28695
// exit ;
28693: GO 28721
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28695: LD_VAR 0 1
28699: PUSH
28700: LD_INT 1
28702: PPUSH
28703: LD_VAR 0 1
28707: PPUSH
28708: CALL_OW 12
28712: ARRAY
28713: PPUSH
28714: LD_INT 60
28716: PPUSH
28717: CALL_OW 234
// end ;
28721: PPOPN 1
28723: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28724: LD_EXP 61
28728: PUSH
28729: LD_EXP 91
28733: AND
28734: IFFALSE 28833
28736: GO 28738
28738: DISABLE
28739: LD_INT 0
28741: PPUSH
28742: PPUSH
// begin enable ;
28743: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28744: LD_ADDR_VAR 0 1
28748: PUSH
28749: LD_INT 22
28751: PUSH
28752: LD_OWVAR 2
28756: PUSH
28757: EMPTY
28758: LIST
28759: LIST
28760: PUSH
28761: LD_INT 61
28763: PUSH
28764: EMPTY
28765: LIST
28766: PUSH
28767: LD_INT 33
28769: PUSH
28770: LD_INT 2
28772: PUSH
28773: EMPTY
28774: LIST
28775: LIST
28776: PUSH
28777: EMPTY
28778: LIST
28779: LIST
28780: LIST
28781: PPUSH
28782: CALL_OW 69
28786: ST_TO_ADDR
// if not tmp then
28787: LD_VAR 0 1
28791: NOT
28792: IFFALSE 28796
// exit ;
28794: GO 28833
// for i in tmp do
28796: LD_ADDR_VAR 0 2
28800: PUSH
28801: LD_VAR 0 1
28805: PUSH
28806: FOR_IN
28807: IFFALSE 28831
// if IsControledBy ( i ) then
28809: LD_VAR 0 2
28813: PPUSH
28814: CALL_OW 312
28818: IFFALSE 28829
// ComUnlink ( i ) ;
28820: LD_VAR 0 2
28824: PPUSH
28825: CALL_OW 136
28829: GO 28806
28831: POP
28832: POP
// end ;
28833: PPOPN 2
28835: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28836: LD_EXP 61
28840: PUSH
28841: LD_EXP 92
28845: AND
28846: IFFALSE 28986
28848: GO 28850
28850: DISABLE
28851: LD_INT 0
28853: PPUSH
28854: PPUSH
// begin ToLua ( displayPowell(); ) ;
28855: LD_STRING displayPowell();
28857: PPUSH
28858: CALL_OW 559
// uc_side := 0 ;
28862: LD_ADDR_OWVAR 20
28866: PUSH
28867: LD_INT 0
28869: ST_TO_ADDR
// uc_nation := 2 ;
28870: LD_ADDR_OWVAR 21
28874: PUSH
28875: LD_INT 2
28877: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28878: LD_ADDR_OWVAR 37
28882: PUSH
28883: LD_INT 14
28885: ST_TO_ADDR
// vc_engine := engine_siberite ;
28886: LD_ADDR_OWVAR 39
28890: PUSH
28891: LD_INT 3
28893: ST_TO_ADDR
// vc_control := control_apeman ;
28894: LD_ADDR_OWVAR 38
28898: PUSH
28899: LD_INT 5
28901: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28902: LD_ADDR_OWVAR 40
28906: PUSH
28907: LD_INT 29
28909: ST_TO_ADDR
// un := CreateVehicle ;
28910: LD_ADDR_VAR 0 2
28914: PUSH
28915: CALL_OW 45
28919: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28920: LD_VAR 0 2
28924: PPUSH
28925: LD_INT 1
28927: PPUSH
28928: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28932: LD_INT 35
28934: PPUSH
28935: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28939: LD_VAR 0 2
28943: PPUSH
28944: LD_INT 22
28946: PUSH
28947: LD_OWVAR 2
28951: PUSH
28952: EMPTY
28953: LIST
28954: LIST
28955: PPUSH
28956: CALL_OW 69
28960: PPUSH
28961: LD_VAR 0 2
28965: PPUSH
28966: CALL_OW 74
28970: PPUSH
28971: CALL_OW 115
// until IsDead ( un ) ;
28975: LD_VAR 0 2
28979: PPUSH
28980: CALL_OW 301
28984: IFFALSE 28932
// end ;
28986: PPOPN 2
28988: END
// every 0 0$1 trigger StreamModeActive and sStu do
28989: LD_EXP 61
28993: PUSH
28994: LD_EXP 100
28998: AND
28999: IFFALSE 29015
29001: GO 29003
29003: DISABLE
// begin ToLua ( displayStucuk(); ) ;
29004: LD_STRING displayStucuk();
29006: PPUSH
29007: CALL_OW 559
// ResetFog ;
29011: CALL_OW 335
// end ;
29015: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29016: LD_EXP 61
29020: PUSH
29021: LD_EXP 93
29025: AND
29026: IFFALSE 29167
29028: GO 29030
29030: DISABLE
29031: LD_INT 0
29033: PPUSH
29034: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29035: LD_ADDR_VAR 0 2
29039: PUSH
29040: LD_INT 22
29042: PUSH
29043: LD_OWVAR 2
29047: PUSH
29048: EMPTY
29049: LIST
29050: LIST
29051: PUSH
29052: LD_INT 21
29054: PUSH
29055: LD_INT 1
29057: PUSH
29058: EMPTY
29059: LIST
29060: LIST
29061: PUSH
29062: EMPTY
29063: LIST
29064: LIST
29065: PPUSH
29066: CALL_OW 69
29070: ST_TO_ADDR
// if not tmp then
29071: LD_VAR 0 2
29075: NOT
29076: IFFALSE 29080
// exit ;
29078: GO 29167
// un := tmp [ rand ( 1 , tmp ) ] ;
29080: LD_ADDR_VAR 0 1
29084: PUSH
29085: LD_VAR 0 2
29089: PUSH
29090: LD_INT 1
29092: PPUSH
29093: LD_VAR 0 2
29097: PPUSH
29098: CALL_OW 12
29102: ARRAY
29103: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29104: LD_VAR 0 1
29108: PPUSH
29109: LD_INT 0
29111: PPUSH
29112: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29116: LD_VAR 0 1
29120: PPUSH
29121: LD_OWVAR 3
29125: PUSH
29126: LD_VAR 0 1
29130: DIFF
29131: PPUSH
29132: LD_VAR 0 1
29136: PPUSH
29137: CALL_OW 74
29141: PPUSH
29142: CALL_OW 115
// wait ( 0 0$20 ) ;
29146: LD_INT 700
29148: PPUSH
29149: CALL_OW 67
// SetSide ( un , your_side ) ;
29153: LD_VAR 0 1
29157: PPUSH
29158: LD_OWVAR 2
29162: PPUSH
29163: CALL_OW 235
// end ;
29167: PPOPN 2
29169: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29170: LD_EXP 61
29174: PUSH
29175: LD_EXP 94
29179: AND
29180: IFFALSE 29286
29182: GO 29184
29184: DISABLE
29185: LD_INT 0
29187: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29188: LD_ADDR_VAR 0 1
29192: PUSH
29193: LD_INT 22
29195: PUSH
29196: LD_OWVAR 2
29200: PUSH
29201: EMPTY
29202: LIST
29203: LIST
29204: PUSH
29205: LD_INT 2
29207: PUSH
29208: LD_INT 30
29210: PUSH
29211: LD_INT 0
29213: PUSH
29214: EMPTY
29215: LIST
29216: LIST
29217: PUSH
29218: LD_INT 30
29220: PUSH
29221: LD_INT 1
29223: PUSH
29224: EMPTY
29225: LIST
29226: LIST
29227: PUSH
29228: EMPTY
29229: LIST
29230: LIST
29231: LIST
29232: PUSH
29233: EMPTY
29234: LIST
29235: LIST
29236: PPUSH
29237: CALL_OW 69
29241: ST_TO_ADDR
// if not depot then
29242: LD_VAR 0 1
29246: NOT
29247: IFFALSE 29251
// exit ;
29249: GO 29286
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29251: LD_VAR 0 1
29255: PUSH
29256: LD_INT 1
29258: ARRAY
29259: PPUSH
29260: CALL_OW 250
29264: PPUSH
29265: LD_VAR 0 1
29269: PUSH
29270: LD_INT 1
29272: ARRAY
29273: PPUSH
29274: CALL_OW 251
29278: PPUSH
29279: LD_INT 70
29281: PPUSH
29282: CALL_OW 495
// end ;
29286: PPOPN 1
29288: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29289: LD_EXP 61
29293: PUSH
29294: LD_EXP 95
29298: AND
29299: IFFALSE 29510
29301: GO 29303
29303: DISABLE
29304: LD_INT 0
29306: PPUSH
29307: PPUSH
29308: PPUSH
29309: PPUSH
29310: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29311: LD_ADDR_VAR 0 5
29315: PUSH
29316: LD_INT 22
29318: PUSH
29319: LD_OWVAR 2
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: PUSH
29328: LD_INT 21
29330: PUSH
29331: LD_INT 1
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: PUSH
29338: EMPTY
29339: LIST
29340: LIST
29341: PPUSH
29342: CALL_OW 69
29346: ST_TO_ADDR
// if not tmp then
29347: LD_VAR 0 5
29351: NOT
29352: IFFALSE 29356
// exit ;
29354: GO 29510
// for i in tmp do
29356: LD_ADDR_VAR 0 1
29360: PUSH
29361: LD_VAR 0 5
29365: PUSH
29366: FOR_IN
29367: IFFALSE 29508
// begin d := rand ( 0 , 5 ) ;
29369: LD_ADDR_VAR 0 4
29373: PUSH
29374: LD_INT 0
29376: PPUSH
29377: LD_INT 5
29379: PPUSH
29380: CALL_OW 12
29384: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29385: LD_ADDR_VAR 0 2
29389: PUSH
29390: LD_VAR 0 1
29394: PPUSH
29395: CALL_OW 250
29399: PPUSH
29400: LD_VAR 0 4
29404: PPUSH
29405: LD_INT 3
29407: PPUSH
29408: LD_INT 12
29410: PPUSH
29411: CALL_OW 12
29415: PPUSH
29416: CALL_OW 272
29420: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29421: LD_ADDR_VAR 0 3
29425: PUSH
29426: LD_VAR 0 1
29430: PPUSH
29431: CALL_OW 251
29435: PPUSH
29436: LD_VAR 0 4
29440: PPUSH
29441: LD_INT 3
29443: PPUSH
29444: LD_INT 12
29446: PPUSH
29447: CALL_OW 12
29451: PPUSH
29452: CALL_OW 273
29456: ST_TO_ADDR
// if ValidHex ( x , y ) then
29457: LD_VAR 0 2
29461: PPUSH
29462: LD_VAR 0 3
29466: PPUSH
29467: CALL_OW 488
29471: IFFALSE 29506
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29473: LD_VAR 0 1
29477: PPUSH
29478: LD_VAR 0 2
29482: PPUSH
29483: LD_VAR 0 3
29487: PPUSH
29488: LD_INT 3
29490: PPUSH
29491: LD_INT 6
29493: PPUSH
29494: CALL_OW 12
29498: PPUSH
29499: LD_INT 1
29501: PPUSH
29502: CALL_OW 483
// end ;
29506: GO 29366
29508: POP
29509: POP
// end ;
29510: PPOPN 5
29512: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29513: LD_EXP 61
29517: PUSH
29518: LD_EXP 96
29522: AND
29523: IFFALSE 29617
29525: GO 29527
29527: DISABLE
29528: LD_INT 0
29530: PPUSH
29531: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29532: LD_ADDR_VAR 0 2
29536: PUSH
29537: LD_INT 22
29539: PUSH
29540: LD_OWVAR 2
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: PUSH
29549: LD_INT 32
29551: PUSH
29552: LD_INT 1
29554: PUSH
29555: EMPTY
29556: LIST
29557: LIST
29558: PUSH
29559: LD_INT 21
29561: PUSH
29562: LD_INT 2
29564: PUSH
29565: EMPTY
29566: LIST
29567: LIST
29568: PUSH
29569: EMPTY
29570: LIST
29571: LIST
29572: LIST
29573: PPUSH
29574: CALL_OW 69
29578: ST_TO_ADDR
// if not tmp then
29579: LD_VAR 0 2
29583: NOT
29584: IFFALSE 29588
// exit ;
29586: GO 29617
// for i in tmp do
29588: LD_ADDR_VAR 0 1
29592: PUSH
29593: LD_VAR 0 2
29597: PUSH
29598: FOR_IN
29599: IFFALSE 29615
// SetFuel ( i , 0 ) ;
29601: LD_VAR 0 1
29605: PPUSH
29606: LD_INT 0
29608: PPUSH
29609: CALL_OW 240
29613: GO 29598
29615: POP
29616: POP
// end ;
29617: PPOPN 2
29619: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29620: LD_EXP 61
29624: PUSH
29625: LD_EXP 97
29629: AND
29630: IFFALSE 29696
29632: GO 29634
29634: DISABLE
29635: LD_INT 0
29637: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29638: LD_ADDR_VAR 0 1
29642: PUSH
29643: LD_INT 22
29645: PUSH
29646: LD_OWVAR 2
29650: PUSH
29651: EMPTY
29652: LIST
29653: LIST
29654: PUSH
29655: LD_INT 30
29657: PUSH
29658: LD_INT 29
29660: PUSH
29661: EMPTY
29662: LIST
29663: LIST
29664: PUSH
29665: EMPTY
29666: LIST
29667: LIST
29668: PPUSH
29669: CALL_OW 69
29673: ST_TO_ADDR
// if not tmp then
29674: LD_VAR 0 1
29678: NOT
29679: IFFALSE 29683
// exit ;
29681: GO 29696
// DestroyUnit ( tmp [ 1 ] ) ;
29683: LD_VAR 0 1
29687: PUSH
29688: LD_INT 1
29690: ARRAY
29691: PPUSH
29692: CALL_OW 65
// end ;
29696: PPOPN 1
29698: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29699: LD_EXP 61
29703: PUSH
29704: LD_EXP 99
29708: AND
29709: IFFALSE 29838
29711: GO 29713
29713: DISABLE
29714: LD_INT 0
29716: PPUSH
// begin uc_side := 0 ;
29717: LD_ADDR_OWVAR 20
29721: PUSH
29722: LD_INT 0
29724: ST_TO_ADDR
// uc_nation := nation_arabian ;
29725: LD_ADDR_OWVAR 21
29729: PUSH
29730: LD_INT 2
29732: ST_TO_ADDR
// hc_gallery :=  ;
29733: LD_ADDR_OWVAR 33
29737: PUSH
29738: LD_STRING 
29740: ST_TO_ADDR
// hc_name :=  ;
29741: LD_ADDR_OWVAR 26
29745: PUSH
29746: LD_STRING 
29748: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29749: LD_INT 1
29751: PPUSH
29752: LD_INT 11
29754: PPUSH
29755: LD_INT 10
29757: PPUSH
29758: CALL_OW 380
// un := CreateHuman ;
29762: LD_ADDR_VAR 0 1
29766: PUSH
29767: CALL_OW 44
29771: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29772: LD_VAR 0 1
29776: PPUSH
29777: LD_INT 1
29779: PPUSH
29780: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29784: LD_INT 35
29786: PPUSH
29787: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29791: LD_VAR 0 1
29795: PPUSH
29796: LD_INT 22
29798: PUSH
29799: LD_OWVAR 2
29803: PUSH
29804: EMPTY
29805: LIST
29806: LIST
29807: PPUSH
29808: CALL_OW 69
29812: PPUSH
29813: LD_VAR 0 1
29817: PPUSH
29818: CALL_OW 74
29822: PPUSH
29823: CALL_OW 115
// until IsDead ( un ) ;
29827: LD_VAR 0 1
29831: PPUSH
29832: CALL_OW 301
29836: IFFALSE 29784
// end ;
29838: PPOPN 1
29840: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29841: LD_EXP 61
29845: PUSH
29846: LD_EXP 101
29850: AND
29851: IFFALSE 29863
29853: GO 29855
29855: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29856: LD_STRING earthquake(getX(game), 0, 32)
29858: PPUSH
29859: CALL_OW 559
29863: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29864: LD_EXP 61
29868: PUSH
29869: LD_EXP 102
29873: AND
29874: IFFALSE 29965
29876: GO 29878
29878: DISABLE
29879: LD_INT 0
29881: PPUSH
// begin enable ;
29882: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29883: LD_ADDR_VAR 0 1
29887: PUSH
29888: LD_INT 22
29890: PUSH
29891: LD_OWVAR 2
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: PUSH
29900: LD_INT 21
29902: PUSH
29903: LD_INT 2
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: PUSH
29910: LD_INT 33
29912: PUSH
29913: LD_INT 3
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: PUSH
29920: EMPTY
29921: LIST
29922: LIST
29923: LIST
29924: PPUSH
29925: CALL_OW 69
29929: ST_TO_ADDR
// if not tmp then
29930: LD_VAR 0 1
29934: NOT
29935: IFFALSE 29939
// exit ;
29937: GO 29965
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29939: LD_VAR 0 1
29943: PUSH
29944: LD_INT 1
29946: PPUSH
29947: LD_VAR 0 1
29951: PPUSH
29952: CALL_OW 12
29956: ARRAY
29957: PPUSH
29958: LD_INT 1
29960: PPUSH
29961: CALL_OW 234
// end ;
29965: PPOPN 1
29967: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29968: LD_EXP 61
29972: PUSH
29973: LD_EXP 103
29977: AND
29978: IFFALSE 30119
29980: GO 29982
29982: DISABLE
29983: LD_INT 0
29985: PPUSH
29986: PPUSH
29987: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29988: LD_ADDR_VAR 0 3
29992: PUSH
29993: LD_INT 22
29995: PUSH
29996: LD_OWVAR 2
30000: PUSH
30001: EMPTY
30002: LIST
30003: LIST
30004: PUSH
30005: LD_INT 25
30007: PUSH
30008: LD_INT 1
30010: PUSH
30011: EMPTY
30012: LIST
30013: LIST
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: PPUSH
30019: CALL_OW 69
30023: ST_TO_ADDR
// if not tmp then
30024: LD_VAR 0 3
30028: NOT
30029: IFFALSE 30033
// exit ;
30031: GO 30119
// un := tmp [ rand ( 1 , tmp ) ] ;
30033: LD_ADDR_VAR 0 2
30037: PUSH
30038: LD_VAR 0 3
30042: PUSH
30043: LD_INT 1
30045: PPUSH
30046: LD_VAR 0 3
30050: PPUSH
30051: CALL_OW 12
30055: ARRAY
30056: ST_TO_ADDR
// if Crawls ( un ) then
30057: LD_VAR 0 2
30061: PPUSH
30062: CALL_OW 318
30066: IFFALSE 30077
// ComWalk ( un ) ;
30068: LD_VAR 0 2
30072: PPUSH
30073: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30077: LD_VAR 0 2
30081: PPUSH
30082: LD_INT 9
30084: PPUSH
30085: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30089: LD_INT 28
30091: PPUSH
30092: LD_OWVAR 2
30096: PPUSH
30097: LD_INT 2
30099: PPUSH
30100: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30104: LD_INT 29
30106: PPUSH
30107: LD_OWVAR 2
30111: PPUSH
30112: LD_INT 2
30114: PPUSH
30115: CALL_OW 322
// end ;
30119: PPOPN 3
30121: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30122: LD_EXP 61
30126: PUSH
30127: LD_EXP 104
30131: AND
30132: IFFALSE 30243
30134: GO 30136
30136: DISABLE
30137: LD_INT 0
30139: PPUSH
30140: PPUSH
30141: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30142: LD_ADDR_VAR 0 3
30146: PUSH
30147: LD_INT 22
30149: PUSH
30150: LD_OWVAR 2
30154: PUSH
30155: EMPTY
30156: LIST
30157: LIST
30158: PUSH
30159: LD_INT 25
30161: PUSH
30162: LD_INT 1
30164: PUSH
30165: EMPTY
30166: LIST
30167: LIST
30168: PUSH
30169: EMPTY
30170: LIST
30171: LIST
30172: PPUSH
30173: CALL_OW 69
30177: ST_TO_ADDR
// if not tmp then
30178: LD_VAR 0 3
30182: NOT
30183: IFFALSE 30187
// exit ;
30185: GO 30243
// un := tmp [ rand ( 1 , tmp ) ] ;
30187: LD_ADDR_VAR 0 2
30191: PUSH
30192: LD_VAR 0 3
30196: PUSH
30197: LD_INT 1
30199: PPUSH
30200: LD_VAR 0 3
30204: PPUSH
30205: CALL_OW 12
30209: ARRAY
30210: ST_TO_ADDR
// if Crawls ( un ) then
30211: LD_VAR 0 2
30215: PPUSH
30216: CALL_OW 318
30220: IFFALSE 30231
// ComWalk ( un ) ;
30222: LD_VAR 0 2
30226: PPUSH
30227: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30231: LD_VAR 0 2
30235: PPUSH
30236: LD_INT 8
30238: PPUSH
30239: CALL_OW 336
// end ;
30243: PPOPN 3
30245: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30246: LD_EXP 61
30250: PUSH
30251: LD_EXP 105
30255: AND
30256: IFFALSE 30400
30258: GO 30260
30260: DISABLE
30261: LD_INT 0
30263: PPUSH
30264: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30265: LD_ADDR_VAR 0 2
30269: PUSH
30270: LD_INT 22
30272: PUSH
30273: LD_OWVAR 2
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: PUSH
30282: LD_INT 21
30284: PUSH
30285: LD_INT 2
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: PUSH
30292: LD_INT 2
30294: PUSH
30295: LD_INT 34
30297: PUSH
30298: LD_INT 12
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: PUSH
30305: LD_INT 34
30307: PUSH
30308: LD_INT 51
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: PUSH
30315: LD_INT 34
30317: PUSH
30318: LD_INT 32
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: PUSH
30325: EMPTY
30326: LIST
30327: LIST
30328: LIST
30329: LIST
30330: PUSH
30331: EMPTY
30332: LIST
30333: LIST
30334: LIST
30335: PPUSH
30336: CALL_OW 69
30340: ST_TO_ADDR
// if not tmp then
30341: LD_VAR 0 2
30345: NOT
30346: IFFALSE 30350
// exit ;
30348: GO 30400
// for i in tmp do
30350: LD_ADDR_VAR 0 1
30354: PUSH
30355: LD_VAR 0 2
30359: PUSH
30360: FOR_IN
30361: IFFALSE 30398
// if GetCargo ( i , mat_artifact ) = 0 then
30363: LD_VAR 0 1
30367: PPUSH
30368: LD_INT 4
30370: PPUSH
30371: CALL_OW 289
30375: PUSH
30376: LD_INT 0
30378: EQUAL
30379: IFFALSE 30396
// SetCargo ( i , mat_siberit , 100 ) ;
30381: LD_VAR 0 1
30385: PPUSH
30386: LD_INT 3
30388: PPUSH
30389: LD_INT 100
30391: PPUSH
30392: CALL_OW 290
30396: GO 30360
30398: POP
30399: POP
// end ;
30400: PPOPN 2
30402: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30403: LD_EXP 61
30407: PUSH
30408: LD_EXP 106
30412: AND
30413: IFFALSE 30596
30415: GO 30417
30417: DISABLE
30418: LD_INT 0
30420: PPUSH
30421: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30422: LD_ADDR_VAR 0 2
30426: PUSH
30427: LD_INT 22
30429: PUSH
30430: LD_OWVAR 2
30434: PUSH
30435: EMPTY
30436: LIST
30437: LIST
30438: PPUSH
30439: CALL_OW 69
30443: ST_TO_ADDR
// if not tmp then
30444: LD_VAR 0 2
30448: NOT
30449: IFFALSE 30453
// exit ;
30451: GO 30596
// for i := 1 to 2 do
30453: LD_ADDR_VAR 0 1
30457: PUSH
30458: DOUBLE
30459: LD_INT 1
30461: DEC
30462: ST_TO_ADDR
30463: LD_INT 2
30465: PUSH
30466: FOR_TO
30467: IFFALSE 30594
// begin uc_side := your_side ;
30469: LD_ADDR_OWVAR 20
30473: PUSH
30474: LD_OWVAR 2
30478: ST_TO_ADDR
// uc_nation := nation_american ;
30479: LD_ADDR_OWVAR 21
30483: PUSH
30484: LD_INT 1
30486: ST_TO_ADDR
// vc_chassis := us_morphling ;
30487: LD_ADDR_OWVAR 37
30491: PUSH
30492: LD_INT 5
30494: ST_TO_ADDR
// vc_engine := engine_siberite ;
30495: LD_ADDR_OWVAR 39
30499: PUSH
30500: LD_INT 3
30502: ST_TO_ADDR
// vc_control := control_computer ;
30503: LD_ADDR_OWVAR 38
30507: PUSH
30508: LD_INT 3
30510: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30511: LD_ADDR_OWVAR 40
30515: PUSH
30516: LD_INT 10
30518: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30519: LD_VAR 0 2
30523: PUSH
30524: LD_INT 1
30526: ARRAY
30527: PPUSH
30528: CALL_OW 310
30532: NOT
30533: IFFALSE 30580
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30535: CALL_OW 45
30539: PPUSH
30540: LD_VAR 0 2
30544: PUSH
30545: LD_INT 1
30547: ARRAY
30548: PPUSH
30549: CALL_OW 250
30553: PPUSH
30554: LD_VAR 0 2
30558: PUSH
30559: LD_INT 1
30561: ARRAY
30562: PPUSH
30563: CALL_OW 251
30567: PPUSH
30568: LD_INT 12
30570: PPUSH
30571: LD_INT 1
30573: PPUSH
30574: CALL_OW 50
30578: GO 30592
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30580: CALL_OW 45
30584: PPUSH
30585: LD_INT 1
30587: PPUSH
30588: CALL_OW 51
// end ;
30592: GO 30466
30594: POP
30595: POP
// end ;
30596: PPOPN 2
30598: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30599: LD_EXP 61
30603: PUSH
30604: LD_EXP 107
30608: AND
30609: IFFALSE 30831
30611: GO 30613
30613: DISABLE
30614: LD_INT 0
30616: PPUSH
30617: PPUSH
30618: PPUSH
30619: PPUSH
30620: PPUSH
30621: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30622: LD_ADDR_VAR 0 6
30626: PUSH
30627: LD_INT 22
30629: PUSH
30630: LD_OWVAR 2
30634: PUSH
30635: EMPTY
30636: LIST
30637: LIST
30638: PUSH
30639: LD_INT 21
30641: PUSH
30642: LD_INT 1
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: PUSH
30649: LD_INT 3
30651: PUSH
30652: LD_INT 23
30654: PUSH
30655: LD_INT 0
30657: PUSH
30658: EMPTY
30659: LIST
30660: LIST
30661: PUSH
30662: EMPTY
30663: LIST
30664: LIST
30665: PUSH
30666: EMPTY
30667: LIST
30668: LIST
30669: LIST
30670: PPUSH
30671: CALL_OW 69
30675: ST_TO_ADDR
// if not tmp then
30676: LD_VAR 0 6
30680: NOT
30681: IFFALSE 30685
// exit ;
30683: GO 30831
// s1 := rand ( 1 , 4 ) ;
30685: LD_ADDR_VAR 0 2
30689: PUSH
30690: LD_INT 1
30692: PPUSH
30693: LD_INT 4
30695: PPUSH
30696: CALL_OW 12
30700: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30701: LD_ADDR_VAR 0 4
30705: PUSH
30706: LD_VAR 0 6
30710: PUSH
30711: LD_INT 1
30713: ARRAY
30714: PPUSH
30715: LD_VAR 0 2
30719: PPUSH
30720: CALL_OW 259
30724: ST_TO_ADDR
// if s1 = 1 then
30725: LD_VAR 0 2
30729: PUSH
30730: LD_INT 1
30732: EQUAL
30733: IFFALSE 30753
// s2 := rand ( 2 , 4 ) else
30735: LD_ADDR_VAR 0 3
30739: PUSH
30740: LD_INT 2
30742: PPUSH
30743: LD_INT 4
30745: PPUSH
30746: CALL_OW 12
30750: ST_TO_ADDR
30751: GO 30761
// s2 := 1 ;
30753: LD_ADDR_VAR 0 3
30757: PUSH
30758: LD_INT 1
30760: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30761: LD_ADDR_VAR 0 5
30765: PUSH
30766: LD_VAR 0 6
30770: PUSH
30771: LD_INT 1
30773: ARRAY
30774: PPUSH
30775: LD_VAR 0 3
30779: PPUSH
30780: CALL_OW 259
30784: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30785: LD_VAR 0 6
30789: PUSH
30790: LD_INT 1
30792: ARRAY
30793: PPUSH
30794: LD_VAR 0 2
30798: PPUSH
30799: LD_VAR 0 5
30803: PPUSH
30804: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30808: LD_VAR 0 6
30812: PUSH
30813: LD_INT 1
30815: ARRAY
30816: PPUSH
30817: LD_VAR 0 3
30821: PPUSH
30822: LD_VAR 0 4
30826: PPUSH
30827: CALL_OW 237
// end ;
30831: PPOPN 6
30833: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30834: LD_EXP 61
30838: PUSH
30839: LD_EXP 108
30843: AND
30844: IFFALSE 30923
30846: GO 30848
30848: DISABLE
30849: LD_INT 0
30851: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30852: LD_ADDR_VAR 0 1
30856: PUSH
30857: LD_INT 22
30859: PUSH
30860: LD_OWVAR 2
30864: PUSH
30865: EMPTY
30866: LIST
30867: LIST
30868: PUSH
30869: LD_INT 30
30871: PUSH
30872: LD_INT 3
30874: PUSH
30875: EMPTY
30876: LIST
30877: LIST
30878: PUSH
30879: EMPTY
30880: LIST
30881: LIST
30882: PPUSH
30883: CALL_OW 69
30887: ST_TO_ADDR
// if not tmp then
30888: LD_VAR 0 1
30892: NOT
30893: IFFALSE 30897
// exit ;
30895: GO 30923
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30897: LD_VAR 0 1
30901: PUSH
30902: LD_INT 1
30904: PPUSH
30905: LD_VAR 0 1
30909: PPUSH
30910: CALL_OW 12
30914: ARRAY
30915: PPUSH
30916: LD_INT 1
30918: PPUSH
30919: CALL_OW 234
// end ;
30923: PPOPN 1
30925: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30926: LD_EXP 61
30930: PUSH
30931: LD_EXP 109
30935: AND
30936: IFFALSE 31048
30938: GO 30940
30940: DISABLE
30941: LD_INT 0
30943: PPUSH
30944: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30945: LD_ADDR_VAR 0 2
30949: PUSH
30950: LD_INT 22
30952: PUSH
30953: LD_OWVAR 2
30957: PUSH
30958: EMPTY
30959: LIST
30960: LIST
30961: PUSH
30962: LD_INT 2
30964: PUSH
30965: LD_INT 30
30967: PUSH
30968: LD_INT 27
30970: PUSH
30971: EMPTY
30972: LIST
30973: LIST
30974: PUSH
30975: LD_INT 30
30977: PUSH
30978: LD_INT 26
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: PUSH
30985: LD_INT 30
30987: PUSH
30988: LD_INT 28
30990: PUSH
30991: EMPTY
30992: LIST
30993: LIST
30994: PUSH
30995: EMPTY
30996: LIST
30997: LIST
30998: LIST
30999: LIST
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: PPUSH
31005: CALL_OW 69
31009: ST_TO_ADDR
// if not tmp then
31010: LD_VAR 0 2
31014: NOT
31015: IFFALSE 31019
// exit ;
31017: GO 31048
// for i in tmp do
31019: LD_ADDR_VAR 0 1
31023: PUSH
31024: LD_VAR 0 2
31028: PUSH
31029: FOR_IN
31030: IFFALSE 31046
// SetLives ( i , 1 ) ;
31032: LD_VAR 0 1
31036: PPUSH
31037: LD_INT 1
31039: PPUSH
31040: CALL_OW 234
31044: GO 31029
31046: POP
31047: POP
// end ;
31048: PPOPN 2
31050: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31051: LD_EXP 61
31055: PUSH
31056: LD_EXP 110
31060: AND
31061: IFFALSE 31348
31063: GO 31065
31065: DISABLE
31066: LD_INT 0
31068: PPUSH
31069: PPUSH
31070: PPUSH
// begin i := rand ( 1 , 7 ) ;
31071: LD_ADDR_VAR 0 1
31075: PUSH
31076: LD_INT 1
31078: PPUSH
31079: LD_INT 7
31081: PPUSH
31082: CALL_OW 12
31086: ST_TO_ADDR
// case i of 1 :
31087: LD_VAR 0 1
31091: PUSH
31092: LD_INT 1
31094: DOUBLE
31095: EQUAL
31096: IFTRUE 31100
31098: GO 31110
31100: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31101: LD_STRING earthquake(getX(game), 0, 32)
31103: PPUSH
31104: CALL_OW 559
31108: GO 31348
31110: LD_INT 2
31112: DOUBLE
31113: EQUAL
31114: IFTRUE 31118
31116: GO 31132
31118: POP
// begin ToLua ( displayStucuk(); ) ;
31119: LD_STRING displayStucuk();
31121: PPUSH
31122: CALL_OW 559
// ResetFog ;
31126: CALL_OW 335
// end ; 3 :
31130: GO 31348
31132: LD_INT 3
31134: DOUBLE
31135: EQUAL
31136: IFTRUE 31140
31138: GO 31244
31140: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31141: LD_ADDR_VAR 0 2
31145: PUSH
31146: LD_INT 22
31148: PUSH
31149: LD_OWVAR 2
31153: PUSH
31154: EMPTY
31155: LIST
31156: LIST
31157: PUSH
31158: LD_INT 25
31160: PUSH
31161: LD_INT 1
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: PUSH
31168: EMPTY
31169: LIST
31170: LIST
31171: PPUSH
31172: CALL_OW 69
31176: ST_TO_ADDR
// if not tmp then
31177: LD_VAR 0 2
31181: NOT
31182: IFFALSE 31186
// exit ;
31184: GO 31348
// un := tmp [ rand ( 1 , tmp ) ] ;
31186: LD_ADDR_VAR 0 3
31190: PUSH
31191: LD_VAR 0 2
31195: PUSH
31196: LD_INT 1
31198: PPUSH
31199: LD_VAR 0 2
31203: PPUSH
31204: CALL_OW 12
31208: ARRAY
31209: ST_TO_ADDR
// if Crawls ( un ) then
31210: LD_VAR 0 3
31214: PPUSH
31215: CALL_OW 318
31219: IFFALSE 31230
// ComWalk ( un ) ;
31221: LD_VAR 0 3
31225: PPUSH
31226: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31230: LD_VAR 0 3
31234: PPUSH
31235: LD_INT 8
31237: PPUSH
31238: CALL_OW 336
// end ; 4 :
31242: GO 31348
31244: LD_INT 4
31246: DOUBLE
31247: EQUAL
31248: IFTRUE 31252
31250: GO 31326
31252: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31253: LD_ADDR_VAR 0 2
31257: PUSH
31258: LD_INT 22
31260: PUSH
31261: LD_OWVAR 2
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: PUSH
31270: LD_INT 30
31272: PUSH
31273: LD_INT 29
31275: PUSH
31276: EMPTY
31277: LIST
31278: LIST
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: PPUSH
31284: CALL_OW 69
31288: ST_TO_ADDR
// if not tmp then
31289: LD_VAR 0 2
31293: NOT
31294: IFFALSE 31298
// exit ;
31296: GO 31348
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31298: LD_VAR 0 2
31302: PUSH
31303: LD_INT 1
31305: ARRAY
31306: PPUSH
31307: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31311: LD_VAR 0 2
31315: PUSH
31316: LD_INT 1
31318: ARRAY
31319: PPUSH
31320: CALL_OW 65
// end ; 5 .. 7 :
31324: GO 31348
31326: LD_INT 5
31328: DOUBLE
31329: GREATEREQUAL
31330: IFFALSE 31338
31332: LD_INT 7
31334: DOUBLE
31335: LESSEQUAL
31336: IFTRUE 31340
31338: GO 31347
31340: POP
// StreamSibBomb ; end ;
31341: CALL 27585 0 0
31345: GO 31348
31347: POP
// end ;
31348: PPOPN 3
31350: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31351: LD_EXP 61
31355: PUSH
31356: LD_EXP 111
31360: AND
31361: IFFALSE 31517
31363: GO 31365
31365: DISABLE
31366: LD_INT 0
31368: PPUSH
31369: PPUSH
31370: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31371: LD_ADDR_VAR 0 2
31375: PUSH
31376: LD_INT 81
31378: PUSH
31379: LD_OWVAR 2
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: PUSH
31388: LD_INT 2
31390: PUSH
31391: LD_INT 21
31393: PUSH
31394: LD_INT 1
31396: PUSH
31397: EMPTY
31398: LIST
31399: LIST
31400: PUSH
31401: LD_INT 21
31403: PUSH
31404: LD_INT 2
31406: PUSH
31407: EMPTY
31408: LIST
31409: LIST
31410: PUSH
31411: EMPTY
31412: LIST
31413: LIST
31414: LIST
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PPUSH
31420: CALL_OW 69
31424: ST_TO_ADDR
// if not tmp then
31425: LD_VAR 0 2
31429: NOT
31430: IFFALSE 31434
// exit ;
31432: GO 31517
// p := 0 ;
31434: LD_ADDR_VAR 0 3
31438: PUSH
31439: LD_INT 0
31441: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31442: LD_INT 35
31444: PPUSH
31445: CALL_OW 67
// p := p + 1 ;
31449: LD_ADDR_VAR 0 3
31453: PUSH
31454: LD_VAR 0 3
31458: PUSH
31459: LD_INT 1
31461: PLUS
31462: ST_TO_ADDR
// for i in tmp do
31463: LD_ADDR_VAR 0 1
31467: PUSH
31468: LD_VAR 0 2
31472: PUSH
31473: FOR_IN
31474: IFFALSE 31505
// if GetLives ( i ) < 1000 then
31476: LD_VAR 0 1
31480: PPUSH
31481: CALL_OW 256
31485: PUSH
31486: LD_INT 1000
31488: LESS
31489: IFFALSE 31503
// SetLives ( i , 1000 ) ;
31491: LD_VAR 0 1
31495: PPUSH
31496: LD_INT 1000
31498: PPUSH
31499: CALL_OW 234
31503: GO 31473
31505: POP
31506: POP
// until p > 20 ;
31507: LD_VAR 0 3
31511: PUSH
31512: LD_INT 20
31514: GREATER
31515: IFFALSE 31442
// end ;
31517: PPOPN 3
31519: END
// every 0 0$1 trigger StreamModeActive and sTime do
31520: LD_EXP 61
31524: PUSH
31525: LD_EXP 112
31529: AND
31530: IFFALSE 31565
31532: GO 31534
31534: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31535: LD_INT 28
31537: PPUSH
31538: LD_OWVAR 2
31542: PPUSH
31543: LD_INT 2
31545: PPUSH
31546: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31550: LD_INT 30
31552: PPUSH
31553: LD_OWVAR 2
31557: PPUSH
31558: LD_INT 2
31560: PPUSH
31561: CALL_OW 322
// end ;
31565: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31566: LD_EXP 61
31570: PUSH
31571: LD_EXP 113
31575: AND
31576: IFFALSE 31697
31578: GO 31580
31580: DISABLE
31581: LD_INT 0
31583: PPUSH
31584: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31585: LD_ADDR_VAR 0 2
31589: PUSH
31590: LD_INT 22
31592: PUSH
31593: LD_OWVAR 2
31597: PUSH
31598: EMPTY
31599: LIST
31600: LIST
31601: PUSH
31602: LD_INT 21
31604: PUSH
31605: LD_INT 1
31607: PUSH
31608: EMPTY
31609: LIST
31610: LIST
31611: PUSH
31612: LD_INT 3
31614: PUSH
31615: LD_INT 23
31617: PUSH
31618: LD_INT 0
31620: PUSH
31621: EMPTY
31622: LIST
31623: LIST
31624: PUSH
31625: EMPTY
31626: LIST
31627: LIST
31628: PUSH
31629: EMPTY
31630: LIST
31631: LIST
31632: LIST
31633: PPUSH
31634: CALL_OW 69
31638: ST_TO_ADDR
// if not tmp then
31639: LD_VAR 0 2
31643: NOT
31644: IFFALSE 31648
// exit ;
31646: GO 31697
// for i in tmp do
31648: LD_ADDR_VAR 0 1
31652: PUSH
31653: LD_VAR 0 2
31657: PUSH
31658: FOR_IN
31659: IFFALSE 31695
// begin if Crawls ( i ) then
31661: LD_VAR 0 1
31665: PPUSH
31666: CALL_OW 318
31670: IFFALSE 31681
// ComWalk ( i ) ;
31672: LD_VAR 0 1
31676: PPUSH
31677: CALL_OW 138
// SetClass ( i , 2 ) ;
31681: LD_VAR 0 1
31685: PPUSH
31686: LD_INT 2
31688: PPUSH
31689: CALL_OW 336
// end ;
31693: GO 31658
31695: POP
31696: POP
// end ;
31697: PPOPN 2
31699: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31700: LD_EXP 61
31704: PUSH
31705: LD_EXP 114
31709: AND
31710: IFFALSE 31998
31712: GO 31714
31714: DISABLE
31715: LD_INT 0
31717: PPUSH
31718: PPUSH
31719: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31720: LD_OWVAR 2
31724: PPUSH
31725: LD_INT 9
31727: PPUSH
31728: LD_INT 1
31730: PPUSH
31731: LD_INT 1
31733: PPUSH
31734: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31738: LD_INT 9
31740: PPUSH
31741: LD_OWVAR 2
31745: PPUSH
31746: CALL_OW 343
// uc_side := 9 ;
31750: LD_ADDR_OWVAR 20
31754: PUSH
31755: LD_INT 9
31757: ST_TO_ADDR
// uc_nation := 2 ;
31758: LD_ADDR_OWVAR 21
31762: PUSH
31763: LD_INT 2
31765: ST_TO_ADDR
// hc_name := Dark Warrior ;
31766: LD_ADDR_OWVAR 26
31770: PUSH
31771: LD_STRING Dark Warrior
31773: ST_TO_ADDR
// hc_gallery :=  ;
31774: LD_ADDR_OWVAR 33
31778: PUSH
31779: LD_STRING 
31781: ST_TO_ADDR
// hc_noskilllimit := true ;
31782: LD_ADDR_OWVAR 76
31786: PUSH
31787: LD_INT 1
31789: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31790: LD_ADDR_OWVAR 31
31794: PUSH
31795: LD_INT 30
31797: PUSH
31798: LD_INT 30
31800: PUSH
31801: LD_INT 30
31803: PUSH
31804: LD_INT 30
31806: PUSH
31807: EMPTY
31808: LIST
31809: LIST
31810: LIST
31811: LIST
31812: ST_TO_ADDR
// un := CreateHuman ;
31813: LD_ADDR_VAR 0 3
31817: PUSH
31818: CALL_OW 44
31822: ST_TO_ADDR
// hc_noskilllimit := false ;
31823: LD_ADDR_OWVAR 76
31827: PUSH
31828: LD_INT 0
31830: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31831: LD_VAR 0 3
31835: PPUSH
31836: LD_INT 1
31838: PPUSH
31839: CALL_OW 51
// ToLua ( playRanger() ) ;
31843: LD_STRING playRanger()
31845: PPUSH
31846: CALL_OW 559
// p := 0 ;
31850: LD_ADDR_VAR 0 2
31854: PUSH
31855: LD_INT 0
31857: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31858: LD_INT 35
31860: PPUSH
31861: CALL_OW 67
// p := p + 1 ;
31865: LD_ADDR_VAR 0 2
31869: PUSH
31870: LD_VAR 0 2
31874: PUSH
31875: LD_INT 1
31877: PLUS
31878: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31879: LD_VAR 0 3
31883: PPUSH
31884: CALL_OW 256
31888: PUSH
31889: LD_INT 1000
31891: LESS
31892: IFFALSE 31906
// SetLives ( un , 1000 ) ;
31894: LD_VAR 0 3
31898: PPUSH
31899: LD_INT 1000
31901: PPUSH
31902: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31906: LD_VAR 0 3
31910: PPUSH
31911: LD_INT 81
31913: PUSH
31914: LD_OWVAR 2
31918: PUSH
31919: EMPTY
31920: LIST
31921: LIST
31922: PUSH
31923: LD_INT 91
31925: PUSH
31926: LD_VAR 0 3
31930: PUSH
31931: LD_INT 30
31933: PUSH
31934: EMPTY
31935: LIST
31936: LIST
31937: LIST
31938: PUSH
31939: EMPTY
31940: LIST
31941: LIST
31942: PPUSH
31943: CALL_OW 69
31947: PPUSH
31948: LD_VAR 0 3
31952: PPUSH
31953: CALL_OW 74
31957: PPUSH
31958: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31962: LD_VAR 0 2
31966: PUSH
31967: LD_INT 80
31969: GREATER
31970: PUSH
31971: LD_VAR 0 3
31975: PPUSH
31976: CALL_OW 301
31980: OR
31981: IFFALSE 31858
// if un then
31983: LD_VAR 0 3
31987: IFFALSE 31998
// RemoveUnit ( un ) ;
31989: LD_VAR 0 3
31993: PPUSH
31994: CALL_OW 64
// end ;
31998: PPOPN 3
32000: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
32001: LD_EXP 115
32005: IFFALSE 32121
32007: GO 32009
32009: DISABLE
32010: LD_INT 0
32012: PPUSH
32013: PPUSH
32014: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32015: LD_ADDR_VAR 0 2
32019: PUSH
32020: LD_INT 81
32022: PUSH
32023: LD_OWVAR 2
32027: PUSH
32028: EMPTY
32029: LIST
32030: LIST
32031: PUSH
32032: LD_INT 21
32034: PUSH
32035: LD_INT 1
32037: PUSH
32038: EMPTY
32039: LIST
32040: LIST
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: PPUSH
32046: CALL_OW 69
32050: ST_TO_ADDR
// ToLua ( playComputer() ) ;
32051: LD_STRING playComputer()
32053: PPUSH
32054: CALL_OW 559
// if not tmp then
32058: LD_VAR 0 2
32062: NOT
32063: IFFALSE 32067
// exit ;
32065: GO 32121
// for i in tmp do
32067: LD_ADDR_VAR 0 1
32071: PUSH
32072: LD_VAR 0 2
32076: PUSH
32077: FOR_IN
32078: IFFALSE 32119
// for j := 1 to 4 do
32080: LD_ADDR_VAR 0 3
32084: PUSH
32085: DOUBLE
32086: LD_INT 1
32088: DEC
32089: ST_TO_ADDR
32090: LD_INT 4
32092: PUSH
32093: FOR_TO
32094: IFFALSE 32115
// SetSkill ( i , j , 10 ) ;
32096: LD_VAR 0 1
32100: PPUSH
32101: LD_VAR 0 3
32105: PPUSH
32106: LD_INT 10
32108: PPUSH
32109: CALL_OW 237
32113: GO 32093
32115: POP
32116: POP
32117: GO 32077
32119: POP
32120: POP
// end ;
32121: PPOPN 3
32123: END
// every 0 0$1 trigger s30 do var i , tmp ;
32124: LD_EXP 116
32128: IFFALSE 32197
32130: GO 32132
32132: DISABLE
32133: LD_INT 0
32135: PPUSH
32136: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32137: LD_ADDR_VAR 0 2
32141: PUSH
32142: LD_INT 22
32144: PUSH
32145: LD_OWVAR 2
32149: PUSH
32150: EMPTY
32151: LIST
32152: LIST
32153: PPUSH
32154: CALL_OW 69
32158: ST_TO_ADDR
// if not tmp then
32159: LD_VAR 0 2
32163: NOT
32164: IFFALSE 32168
// exit ;
32166: GO 32197
// for i in tmp do
32168: LD_ADDR_VAR 0 1
32172: PUSH
32173: LD_VAR 0 2
32177: PUSH
32178: FOR_IN
32179: IFFALSE 32195
// SetLives ( i , 300 ) ;
32181: LD_VAR 0 1
32185: PPUSH
32186: LD_INT 300
32188: PPUSH
32189: CALL_OW 234
32193: GO 32178
32195: POP
32196: POP
// end ;
32197: PPOPN 2
32199: END
// every 0 0$1 trigger s60 do var i , tmp ;
32200: LD_EXP 117
32204: IFFALSE 32273
32206: GO 32208
32208: DISABLE
32209: LD_INT 0
32211: PPUSH
32212: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32213: LD_ADDR_VAR 0 2
32217: PUSH
32218: LD_INT 22
32220: PUSH
32221: LD_OWVAR 2
32225: PUSH
32226: EMPTY
32227: LIST
32228: LIST
32229: PPUSH
32230: CALL_OW 69
32234: ST_TO_ADDR
// if not tmp then
32235: LD_VAR 0 2
32239: NOT
32240: IFFALSE 32244
// exit ;
32242: GO 32273
// for i in tmp do
32244: LD_ADDR_VAR 0 1
32248: PUSH
32249: LD_VAR 0 2
32253: PUSH
32254: FOR_IN
32255: IFFALSE 32271
// SetLives ( i , 600 ) ;
32257: LD_VAR 0 1
32261: PPUSH
32262: LD_INT 600
32264: PPUSH
32265: CALL_OW 234
32269: GO 32254
32271: POP
32272: POP
// end ;
32273: PPOPN 2
32275: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32276: LD_INT 0
32278: PPUSH
// case cmd of 301 :
32279: LD_VAR 0 1
32283: PUSH
32284: LD_INT 301
32286: DOUBLE
32287: EQUAL
32288: IFTRUE 32292
32290: GO 32324
32292: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32293: LD_VAR 0 6
32297: PPUSH
32298: LD_VAR 0 7
32302: PPUSH
32303: LD_VAR 0 8
32307: PPUSH
32308: LD_VAR 0 4
32312: PPUSH
32313: LD_VAR 0 5
32317: PPUSH
32318: CALL 33533 0 5
32322: GO 32445
32324: LD_INT 302
32326: DOUBLE
32327: EQUAL
32328: IFTRUE 32332
32330: GO 32369
32332: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32333: LD_VAR 0 6
32337: PPUSH
32338: LD_VAR 0 7
32342: PPUSH
32343: LD_VAR 0 8
32347: PPUSH
32348: LD_VAR 0 9
32352: PPUSH
32353: LD_VAR 0 4
32357: PPUSH
32358: LD_VAR 0 5
32362: PPUSH
32363: CALL 33624 0 6
32367: GO 32445
32369: LD_INT 303
32371: DOUBLE
32372: EQUAL
32373: IFTRUE 32377
32375: GO 32414
32377: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32378: LD_VAR 0 6
32382: PPUSH
32383: LD_VAR 0 7
32387: PPUSH
32388: LD_VAR 0 8
32392: PPUSH
32393: LD_VAR 0 9
32397: PPUSH
32398: LD_VAR 0 4
32402: PPUSH
32403: LD_VAR 0 5
32407: PPUSH
32408: CALL 32450 0 6
32412: GO 32445
32414: LD_INT 304
32416: DOUBLE
32417: EQUAL
32418: IFTRUE 32422
32420: GO 32444
32422: POP
// hHackTeleport ( unit , x , y ) ; end ;
32423: LD_VAR 0 2
32427: PPUSH
32428: LD_VAR 0 4
32432: PPUSH
32433: LD_VAR 0 5
32437: PPUSH
32438: CALL 34217 0 3
32442: GO 32445
32444: POP
// end ;
32445: LD_VAR 0 12
32449: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32450: LD_INT 0
32452: PPUSH
32453: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32454: LD_VAR 0 1
32458: PUSH
32459: LD_INT 1
32461: LESS
32462: PUSH
32463: LD_VAR 0 1
32467: PUSH
32468: LD_INT 3
32470: GREATER
32471: OR
32472: PUSH
32473: LD_VAR 0 5
32477: PPUSH
32478: LD_VAR 0 6
32482: PPUSH
32483: CALL_OW 428
32487: OR
32488: IFFALSE 32492
// exit ;
32490: GO 33220
// uc_side := your_side ;
32492: LD_ADDR_OWVAR 20
32496: PUSH
32497: LD_OWVAR 2
32501: ST_TO_ADDR
// uc_nation := nation ;
32502: LD_ADDR_OWVAR 21
32506: PUSH
32507: LD_VAR 0 1
32511: ST_TO_ADDR
// bc_level = 1 ;
32512: LD_ADDR_OWVAR 43
32516: PUSH
32517: LD_INT 1
32519: ST_TO_ADDR
// case btype of 1 :
32520: LD_VAR 0 2
32524: PUSH
32525: LD_INT 1
32527: DOUBLE
32528: EQUAL
32529: IFTRUE 32533
32531: GO 32544
32533: POP
// bc_type := b_depot ; 2 :
32534: LD_ADDR_OWVAR 42
32538: PUSH
32539: LD_INT 0
32541: ST_TO_ADDR
32542: GO 33164
32544: LD_INT 2
32546: DOUBLE
32547: EQUAL
32548: IFTRUE 32552
32550: GO 32563
32552: POP
// bc_type := b_warehouse ; 3 :
32553: LD_ADDR_OWVAR 42
32557: PUSH
32558: LD_INT 1
32560: ST_TO_ADDR
32561: GO 33164
32563: LD_INT 3
32565: DOUBLE
32566: EQUAL
32567: IFTRUE 32571
32569: GO 32582
32571: POP
// bc_type := b_lab ; 4 .. 9 :
32572: LD_ADDR_OWVAR 42
32576: PUSH
32577: LD_INT 6
32579: ST_TO_ADDR
32580: GO 33164
32582: LD_INT 4
32584: DOUBLE
32585: GREATEREQUAL
32586: IFFALSE 32594
32588: LD_INT 9
32590: DOUBLE
32591: LESSEQUAL
32592: IFTRUE 32596
32594: GO 32656
32596: POP
// begin bc_type := b_lab_half ;
32597: LD_ADDR_OWVAR 42
32601: PUSH
32602: LD_INT 7
32604: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32605: LD_ADDR_OWVAR 44
32609: PUSH
32610: LD_INT 10
32612: PUSH
32613: LD_INT 11
32615: PUSH
32616: LD_INT 12
32618: PUSH
32619: LD_INT 15
32621: PUSH
32622: LD_INT 14
32624: PUSH
32625: LD_INT 13
32627: PUSH
32628: EMPTY
32629: LIST
32630: LIST
32631: LIST
32632: LIST
32633: LIST
32634: LIST
32635: PUSH
32636: LD_VAR 0 2
32640: PUSH
32641: LD_INT 3
32643: MINUS
32644: ARRAY
32645: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
32646: LD_ADDR_OWVAR 45
32650: PUSH
32651: LD_INT 9
32653: ST_TO_ADDR
// end ; 10 .. 13 :
32654: GO 33164
32656: LD_INT 10
32658: DOUBLE
32659: GREATEREQUAL
32660: IFFALSE 32668
32662: LD_INT 13
32664: DOUBLE
32665: LESSEQUAL
32666: IFTRUE 32670
32668: GO 32747
32670: POP
// begin bc_type := b_lab_full ;
32671: LD_ADDR_OWVAR 42
32675: PUSH
32676: LD_INT 8
32678: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32679: LD_ADDR_OWVAR 44
32683: PUSH
32684: LD_INT 10
32686: PUSH
32687: LD_INT 12
32689: PUSH
32690: LD_INT 14
32692: PUSH
32693: LD_INT 13
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: LIST
32700: LIST
32701: PUSH
32702: LD_VAR 0 2
32706: PUSH
32707: LD_INT 9
32709: MINUS
32710: ARRAY
32711: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32712: LD_ADDR_OWVAR 45
32716: PUSH
32717: LD_INT 11
32719: PUSH
32720: LD_INT 15
32722: PUSH
32723: LD_INT 12
32725: PUSH
32726: LD_INT 15
32728: PUSH
32729: EMPTY
32730: LIST
32731: LIST
32732: LIST
32733: LIST
32734: PUSH
32735: LD_VAR 0 2
32739: PUSH
32740: LD_INT 9
32742: MINUS
32743: ARRAY
32744: ST_TO_ADDR
// end ; 14 :
32745: GO 33164
32747: LD_INT 14
32749: DOUBLE
32750: EQUAL
32751: IFTRUE 32755
32753: GO 32766
32755: POP
// bc_type := b_workshop ; 15 :
32756: LD_ADDR_OWVAR 42
32760: PUSH
32761: LD_INT 2
32763: ST_TO_ADDR
32764: GO 33164
32766: LD_INT 15
32768: DOUBLE
32769: EQUAL
32770: IFTRUE 32774
32772: GO 32785
32774: POP
// bc_type := b_factory ; 16 :
32775: LD_ADDR_OWVAR 42
32779: PUSH
32780: LD_INT 3
32782: ST_TO_ADDR
32783: GO 33164
32785: LD_INT 16
32787: DOUBLE
32788: EQUAL
32789: IFTRUE 32793
32791: GO 32804
32793: POP
// bc_type := b_ext_gun ; 17 :
32794: LD_ADDR_OWVAR 42
32798: PUSH
32799: LD_INT 17
32801: ST_TO_ADDR
32802: GO 33164
32804: LD_INT 17
32806: DOUBLE
32807: EQUAL
32808: IFTRUE 32812
32810: GO 32840
32812: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32813: LD_ADDR_OWVAR 42
32817: PUSH
32818: LD_INT 19
32820: PUSH
32821: LD_INT 23
32823: PUSH
32824: LD_INT 19
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: LIST
32831: PUSH
32832: LD_VAR 0 1
32836: ARRAY
32837: ST_TO_ADDR
32838: GO 33164
32840: LD_INT 18
32842: DOUBLE
32843: EQUAL
32844: IFTRUE 32848
32846: GO 32859
32848: POP
// bc_type := b_ext_radar ; 19 :
32849: LD_ADDR_OWVAR 42
32853: PUSH
32854: LD_INT 20
32856: ST_TO_ADDR
32857: GO 33164
32859: LD_INT 19
32861: DOUBLE
32862: EQUAL
32863: IFTRUE 32867
32865: GO 32878
32867: POP
// bc_type := b_ext_radio ; 20 :
32868: LD_ADDR_OWVAR 42
32872: PUSH
32873: LD_INT 22
32875: ST_TO_ADDR
32876: GO 33164
32878: LD_INT 20
32880: DOUBLE
32881: EQUAL
32882: IFTRUE 32886
32884: GO 32897
32886: POP
// bc_type := b_ext_siberium ; 21 :
32887: LD_ADDR_OWVAR 42
32891: PUSH
32892: LD_INT 21
32894: ST_TO_ADDR
32895: GO 33164
32897: LD_INT 21
32899: DOUBLE
32900: EQUAL
32901: IFTRUE 32905
32903: GO 32916
32905: POP
// bc_type := b_ext_computer ; 22 :
32906: LD_ADDR_OWVAR 42
32910: PUSH
32911: LD_INT 24
32913: ST_TO_ADDR
32914: GO 33164
32916: LD_INT 22
32918: DOUBLE
32919: EQUAL
32920: IFTRUE 32924
32922: GO 32935
32924: POP
// bc_type := b_ext_track ; 23 :
32925: LD_ADDR_OWVAR 42
32929: PUSH
32930: LD_INT 16
32932: ST_TO_ADDR
32933: GO 33164
32935: LD_INT 23
32937: DOUBLE
32938: EQUAL
32939: IFTRUE 32943
32941: GO 32954
32943: POP
// bc_type := b_ext_laser ; 24 :
32944: LD_ADDR_OWVAR 42
32948: PUSH
32949: LD_INT 25
32951: ST_TO_ADDR
32952: GO 33164
32954: LD_INT 24
32956: DOUBLE
32957: EQUAL
32958: IFTRUE 32962
32960: GO 32973
32962: POP
// bc_type := b_control_tower ; 25 :
32963: LD_ADDR_OWVAR 42
32967: PUSH
32968: LD_INT 36
32970: ST_TO_ADDR
32971: GO 33164
32973: LD_INT 25
32975: DOUBLE
32976: EQUAL
32977: IFTRUE 32981
32979: GO 32992
32981: POP
// bc_type := b_breastwork ; 26 :
32982: LD_ADDR_OWVAR 42
32986: PUSH
32987: LD_INT 31
32989: ST_TO_ADDR
32990: GO 33164
32992: LD_INT 26
32994: DOUBLE
32995: EQUAL
32996: IFTRUE 33000
32998: GO 33011
33000: POP
// bc_type := b_bunker ; 27 :
33001: LD_ADDR_OWVAR 42
33005: PUSH
33006: LD_INT 32
33008: ST_TO_ADDR
33009: GO 33164
33011: LD_INT 27
33013: DOUBLE
33014: EQUAL
33015: IFTRUE 33019
33017: GO 33030
33019: POP
// bc_type := b_turret ; 28 :
33020: LD_ADDR_OWVAR 42
33024: PUSH
33025: LD_INT 33
33027: ST_TO_ADDR
33028: GO 33164
33030: LD_INT 28
33032: DOUBLE
33033: EQUAL
33034: IFTRUE 33038
33036: GO 33049
33038: POP
// bc_type := b_armoury ; 29 :
33039: LD_ADDR_OWVAR 42
33043: PUSH
33044: LD_INT 4
33046: ST_TO_ADDR
33047: GO 33164
33049: LD_INT 29
33051: DOUBLE
33052: EQUAL
33053: IFTRUE 33057
33055: GO 33068
33057: POP
// bc_type := b_barracks ; 30 :
33058: LD_ADDR_OWVAR 42
33062: PUSH
33063: LD_INT 5
33065: ST_TO_ADDR
33066: GO 33164
33068: LD_INT 30
33070: DOUBLE
33071: EQUAL
33072: IFTRUE 33076
33074: GO 33087
33076: POP
// bc_type := b_solar_power ; 31 :
33077: LD_ADDR_OWVAR 42
33081: PUSH
33082: LD_INT 27
33084: ST_TO_ADDR
33085: GO 33164
33087: LD_INT 31
33089: DOUBLE
33090: EQUAL
33091: IFTRUE 33095
33093: GO 33106
33095: POP
// bc_type := b_oil_power ; 32 :
33096: LD_ADDR_OWVAR 42
33100: PUSH
33101: LD_INT 26
33103: ST_TO_ADDR
33104: GO 33164
33106: LD_INT 32
33108: DOUBLE
33109: EQUAL
33110: IFTRUE 33114
33112: GO 33125
33114: POP
// bc_type := b_siberite_power ; 33 :
33115: LD_ADDR_OWVAR 42
33119: PUSH
33120: LD_INT 28
33122: ST_TO_ADDR
33123: GO 33164
33125: LD_INT 33
33127: DOUBLE
33128: EQUAL
33129: IFTRUE 33133
33131: GO 33144
33133: POP
// bc_type := b_oil_mine ; 34 :
33134: LD_ADDR_OWVAR 42
33138: PUSH
33139: LD_INT 29
33141: ST_TO_ADDR
33142: GO 33164
33144: LD_INT 34
33146: DOUBLE
33147: EQUAL
33148: IFTRUE 33152
33150: GO 33163
33152: POP
// bc_type := b_siberite_mine ; end ;
33153: LD_ADDR_OWVAR 42
33157: PUSH
33158: LD_INT 30
33160: ST_TO_ADDR
33161: GO 33164
33163: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33164: LD_ADDR_VAR 0 8
33168: PUSH
33169: LD_VAR 0 5
33173: PPUSH
33174: LD_VAR 0 6
33178: PPUSH
33179: LD_VAR 0 3
33183: PPUSH
33184: CALL_OW 47
33188: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33189: LD_OWVAR 42
33193: PUSH
33194: LD_INT 32
33196: PUSH
33197: LD_INT 33
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: IN
33204: IFFALSE 33220
// PlaceWeaponTurret ( b , weapon ) ;
33206: LD_VAR 0 8
33210: PPUSH
33211: LD_VAR 0 4
33215: PPUSH
33216: CALL_OW 431
// end ;
33220: LD_VAR 0 7
33224: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33225: LD_INT 0
33227: PPUSH
33228: PPUSH
33229: PPUSH
33230: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33231: LD_ADDR_VAR 0 4
33235: PUSH
33236: LD_INT 22
33238: PUSH
33239: LD_OWVAR 2
33243: PUSH
33244: EMPTY
33245: LIST
33246: LIST
33247: PUSH
33248: LD_INT 2
33250: PUSH
33251: LD_INT 30
33253: PUSH
33254: LD_INT 0
33256: PUSH
33257: EMPTY
33258: LIST
33259: LIST
33260: PUSH
33261: LD_INT 30
33263: PUSH
33264: LD_INT 1
33266: PUSH
33267: EMPTY
33268: LIST
33269: LIST
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: LIST
33275: PUSH
33276: EMPTY
33277: LIST
33278: LIST
33279: PPUSH
33280: CALL_OW 69
33284: ST_TO_ADDR
// if not tmp then
33285: LD_VAR 0 4
33289: NOT
33290: IFFALSE 33294
// exit ;
33292: GO 33353
// for i in tmp do
33294: LD_ADDR_VAR 0 2
33298: PUSH
33299: LD_VAR 0 4
33303: PUSH
33304: FOR_IN
33305: IFFALSE 33351
// for j = 1 to 3 do
33307: LD_ADDR_VAR 0 3
33311: PUSH
33312: DOUBLE
33313: LD_INT 1
33315: DEC
33316: ST_TO_ADDR
33317: LD_INT 3
33319: PUSH
33320: FOR_TO
33321: IFFALSE 33347
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33323: LD_VAR 0 2
33327: PPUSH
33328: CALL_OW 274
33332: PPUSH
33333: LD_VAR 0 3
33337: PPUSH
33338: LD_INT 99999
33340: PPUSH
33341: CALL_OW 277
33345: GO 33320
33347: POP
33348: POP
33349: GO 33304
33351: POP
33352: POP
// end ;
33353: LD_VAR 0 1
33357: RET
// export function hHackSetLevel10 ; var i , j ; begin
33358: LD_INT 0
33360: PPUSH
33361: PPUSH
33362: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33363: LD_ADDR_VAR 0 2
33367: PUSH
33368: LD_INT 21
33370: PUSH
33371: LD_INT 1
33373: PUSH
33374: EMPTY
33375: LIST
33376: LIST
33377: PPUSH
33378: CALL_OW 69
33382: PUSH
33383: FOR_IN
33384: IFFALSE 33436
// if IsSelected ( i ) then
33386: LD_VAR 0 2
33390: PPUSH
33391: CALL_OW 306
33395: IFFALSE 33434
// begin for j := 1 to 4 do
33397: LD_ADDR_VAR 0 3
33401: PUSH
33402: DOUBLE
33403: LD_INT 1
33405: DEC
33406: ST_TO_ADDR
33407: LD_INT 4
33409: PUSH
33410: FOR_TO
33411: IFFALSE 33432
// SetSkill ( i , j , 10 ) ;
33413: LD_VAR 0 2
33417: PPUSH
33418: LD_VAR 0 3
33422: PPUSH
33423: LD_INT 10
33425: PPUSH
33426: CALL_OW 237
33430: GO 33410
33432: POP
33433: POP
// end ;
33434: GO 33383
33436: POP
33437: POP
// end ;
33438: LD_VAR 0 1
33442: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33443: LD_INT 0
33445: PPUSH
33446: PPUSH
33447: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33448: LD_ADDR_VAR 0 2
33452: PUSH
33453: LD_INT 22
33455: PUSH
33456: LD_OWVAR 2
33460: PUSH
33461: EMPTY
33462: LIST
33463: LIST
33464: PUSH
33465: LD_INT 21
33467: PUSH
33468: LD_INT 1
33470: PUSH
33471: EMPTY
33472: LIST
33473: LIST
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: PPUSH
33479: CALL_OW 69
33483: PUSH
33484: FOR_IN
33485: IFFALSE 33526
// begin for j := 1 to 4 do
33487: LD_ADDR_VAR 0 3
33491: PUSH
33492: DOUBLE
33493: LD_INT 1
33495: DEC
33496: ST_TO_ADDR
33497: LD_INT 4
33499: PUSH
33500: FOR_TO
33501: IFFALSE 33522
// SetSkill ( i , j , 10 ) ;
33503: LD_VAR 0 2
33507: PPUSH
33508: LD_VAR 0 3
33512: PPUSH
33513: LD_INT 10
33515: PPUSH
33516: CALL_OW 237
33520: GO 33500
33522: POP
33523: POP
// end ;
33524: GO 33484
33526: POP
33527: POP
// end ;
33528: LD_VAR 0 1
33532: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33533: LD_INT 0
33535: PPUSH
// uc_side := your_side ;
33536: LD_ADDR_OWVAR 20
33540: PUSH
33541: LD_OWVAR 2
33545: ST_TO_ADDR
// uc_nation := nation ;
33546: LD_ADDR_OWVAR 21
33550: PUSH
33551: LD_VAR 0 1
33555: ST_TO_ADDR
// InitHc ;
33556: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33560: LD_INT 0
33562: PPUSH
33563: LD_VAR 0 2
33567: PPUSH
33568: LD_VAR 0 3
33572: PPUSH
33573: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33577: LD_VAR 0 4
33581: PPUSH
33582: LD_VAR 0 5
33586: PPUSH
33587: CALL_OW 428
33591: PUSH
33592: LD_INT 0
33594: EQUAL
33595: IFFALSE 33619
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33597: CALL_OW 44
33601: PPUSH
33602: LD_VAR 0 4
33606: PPUSH
33607: LD_VAR 0 5
33611: PPUSH
33612: LD_INT 1
33614: PPUSH
33615: CALL_OW 48
// end ;
33619: LD_VAR 0 6
33623: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33624: LD_INT 0
33626: PPUSH
33627: PPUSH
// uc_side := your_side ;
33628: LD_ADDR_OWVAR 20
33632: PUSH
33633: LD_OWVAR 2
33637: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33638: LD_VAR 0 1
33642: PUSH
33643: LD_INT 1
33645: PUSH
33646: LD_INT 2
33648: PUSH
33649: LD_INT 3
33651: PUSH
33652: LD_INT 4
33654: PUSH
33655: LD_INT 5
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: LIST
33662: LIST
33663: LIST
33664: IN
33665: IFFALSE 33677
// uc_nation := nation_american else
33667: LD_ADDR_OWVAR 21
33671: PUSH
33672: LD_INT 1
33674: ST_TO_ADDR
33675: GO 33720
// if chassis in [ 11 , 12 , 13 , 14 ] then
33677: LD_VAR 0 1
33681: PUSH
33682: LD_INT 11
33684: PUSH
33685: LD_INT 12
33687: PUSH
33688: LD_INT 13
33690: PUSH
33691: LD_INT 14
33693: PUSH
33694: EMPTY
33695: LIST
33696: LIST
33697: LIST
33698: LIST
33699: IN
33700: IFFALSE 33712
// uc_nation := nation_arabian else
33702: LD_ADDR_OWVAR 21
33706: PUSH
33707: LD_INT 2
33709: ST_TO_ADDR
33710: GO 33720
// uc_nation := nation_russian ;
33712: LD_ADDR_OWVAR 21
33716: PUSH
33717: LD_INT 3
33719: ST_TO_ADDR
// vc_chassis := chassis ;
33720: LD_ADDR_OWVAR 37
33724: PUSH
33725: LD_VAR 0 1
33729: ST_TO_ADDR
// vc_engine := engine ;
33730: LD_ADDR_OWVAR 39
33734: PUSH
33735: LD_VAR 0 2
33739: ST_TO_ADDR
// vc_control := control ;
33740: LD_ADDR_OWVAR 38
33744: PUSH
33745: LD_VAR 0 3
33749: ST_TO_ADDR
// vc_weapon := weapon ;
33750: LD_ADDR_OWVAR 40
33754: PUSH
33755: LD_VAR 0 4
33759: ST_TO_ADDR
// un := CreateVehicle ;
33760: LD_ADDR_VAR 0 8
33764: PUSH
33765: CALL_OW 45
33769: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33770: LD_VAR 0 8
33774: PPUSH
33775: LD_INT 0
33777: PPUSH
33778: LD_INT 5
33780: PPUSH
33781: CALL_OW 12
33785: PPUSH
33786: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33790: LD_VAR 0 8
33794: PPUSH
33795: LD_VAR 0 5
33799: PPUSH
33800: LD_VAR 0 6
33804: PPUSH
33805: LD_INT 1
33807: PPUSH
33808: CALL_OW 48
// end ;
33812: LD_VAR 0 7
33816: RET
// export hInvincible ; every 1 do
33817: GO 33819
33819: DISABLE
// hInvincible := [ ] ;
33820: LD_ADDR_EXP 118
33824: PUSH
33825: EMPTY
33826: ST_TO_ADDR
33827: END
// every 10 do var i ;
33828: GO 33830
33830: DISABLE
33831: LD_INT 0
33833: PPUSH
// begin enable ;
33834: ENABLE
// if not hInvincible then
33835: LD_EXP 118
33839: NOT
33840: IFFALSE 33844
// exit ;
33842: GO 33888
// for i in hInvincible do
33844: LD_ADDR_VAR 0 1
33848: PUSH
33849: LD_EXP 118
33853: PUSH
33854: FOR_IN
33855: IFFALSE 33886
// if GetLives ( i ) < 1000 then
33857: LD_VAR 0 1
33861: PPUSH
33862: CALL_OW 256
33866: PUSH
33867: LD_INT 1000
33869: LESS
33870: IFFALSE 33884
// SetLives ( i , 1000 ) ;
33872: LD_VAR 0 1
33876: PPUSH
33877: LD_INT 1000
33879: PPUSH
33880: CALL_OW 234
33884: GO 33854
33886: POP
33887: POP
// end ;
33888: PPOPN 1
33890: END
// export function hHackInvincible ; var i ; begin
33891: LD_INT 0
33893: PPUSH
33894: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33895: LD_ADDR_VAR 0 2
33899: PUSH
33900: LD_INT 2
33902: PUSH
33903: LD_INT 21
33905: PUSH
33906: LD_INT 1
33908: PUSH
33909: EMPTY
33910: LIST
33911: LIST
33912: PUSH
33913: LD_INT 21
33915: PUSH
33916: LD_INT 2
33918: PUSH
33919: EMPTY
33920: LIST
33921: LIST
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: LIST
33927: PPUSH
33928: CALL_OW 69
33932: PUSH
33933: FOR_IN
33934: IFFALSE 33995
// if IsSelected ( i ) then
33936: LD_VAR 0 2
33940: PPUSH
33941: CALL_OW 306
33945: IFFALSE 33993
// begin if i in hInvincible then
33947: LD_VAR 0 2
33951: PUSH
33952: LD_EXP 118
33956: IN
33957: IFFALSE 33977
// hInvincible := hInvincible diff i else
33959: LD_ADDR_EXP 118
33963: PUSH
33964: LD_EXP 118
33968: PUSH
33969: LD_VAR 0 2
33973: DIFF
33974: ST_TO_ADDR
33975: GO 33993
// hInvincible := hInvincible union i ;
33977: LD_ADDR_EXP 118
33981: PUSH
33982: LD_EXP 118
33986: PUSH
33987: LD_VAR 0 2
33991: UNION
33992: ST_TO_ADDR
// end ;
33993: GO 33933
33995: POP
33996: POP
// end ;
33997: LD_VAR 0 1
34001: RET
// export function hHackInvisible ; var i , j ; begin
34002: LD_INT 0
34004: PPUSH
34005: PPUSH
34006: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34007: LD_ADDR_VAR 0 2
34011: PUSH
34012: LD_INT 21
34014: PUSH
34015: LD_INT 1
34017: PUSH
34018: EMPTY
34019: LIST
34020: LIST
34021: PPUSH
34022: CALL_OW 69
34026: PUSH
34027: FOR_IN
34028: IFFALSE 34052
// if IsSelected ( i ) then
34030: LD_VAR 0 2
34034: PPUSH
34035: CALL_OW 306
34039: IFFALSE 34050
// ComForceInvisible ( i ) ;
34041: LD_VAR 0 2
34045: PPUSH
34046: CALL_OW 496
34050: GO 34027
34052: POP
34053: POP
// end ;
34054: LD_VAR 0 1
34058: RET
// export function hHackChangeYourSide ; begin
34059: LD_INT 0
34061: PPUSH
// if your_side = 8 then
34062: LD_OWVAR 2
34066: PUSH
34067: LD_INT 8
34069: EQUAL
34070: IFFALSE 34082
// your_side := 0 else
34072: LD_ADDR_OWVAR 2
34076: PUSH
34077: LD_INT 0
34079: ST_TO_ADDR
34080: GO 34096
// your_side := your_side + 1 ;
34082: LD_ADDR_OWVAR 2
34086: PUSH
34087: LD_OWVAR 2
34091: PUSH
34092: LD_INT 1
34094: PLUS
34095: ST_TO_ADDR
// end ;
34096: LD_VAR 0 1
34100: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34101: LD_INT 0
34103: PPUSH
34104: PPUSH
34105: PPUSH
// for i in all_units do
34106: LD_ADDR_VAR 0 2
34110: PUSH
34111: LD_OWVAR 3
34115: PUSH
34116: FOR_IN
34117: IFFALSE 34195
// if IsSelected ( i ) then
34119: LD_VAR 0 2
34123: PPUSH
34124: CALL_OW 306
34128: IFFALSE 34193
// begin j := GetSide ( i ) ;
34130: LD_ADDR_VAR 0 3
34134: PUSH
34135: LD_VAR 0 2
34139: PPUSH
34140: CALL_OW 255
34144: ST_TO_ADDR
// if j = 8 then
34145: LD_VAR 0 3
34149: PUSH
34150: LD_INT 8
34152: EQUAL
34153: IFFALSE 34165
// j := 0 else
34155: LD_ADDR_VAR 0 3
34159: PUSH
34160: LD_INT 0
34162: ST_TO_ADDR
34163: GO 34179
// j := j + 1 ;
34165: LD_ADDR_VAR 0 3
34169: PUSH
34170: LD_VAR 0 3
34174: PUSH
34175: LD_INT 1
34177: PLUS
34178: ST_TO_ADDR
// SetSide ( i , j ) ;
34179: LD_VAR 0 2
34183: PPUSH
34184: LD_VAR 0 3
34188: PPUSH
34189: CALL_OW 235
// end ;
34193: GO 34116
34195: POP
34196: POP
// end ;
34197: LD_VAR 0 1
34201: RET
// export function hHackFog ; begin
34202: LD_INT 0
34204: PPUSH
// FogOff ( true ) ;
34205: LD_INT 1
34207: PPUSH
34208: CALL_OW 344
// end ;
34212: LD_VAR 0 1
34216: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34217: LD_INT 0
34219: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34220: LD_VAR 0 1
34224: PPUSH
34225: LD_VAR 0 2
34229: PPUSH
34230: LD_VAR 0 3
34234: PPUSH
34235: LD_INT 1
34237: PPUSH
34238: LD_INT 1
34240: PPUSH
34241: CALL_OW 483
// CenterOnXY ( x , y ) ;
34245: LD_VAR 0 2
34249: PPUSH
34250: LD_VAR 0 3
34254: PPUSH
34255: CALL_OW 84
// end ;
34259: LD_VAR 0 4
34263: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34264: LD_INT 0
34266: PPUSH
34267: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34268: LD_VAR 0 1
34272: NOT
34273: PUSH
34274: LD_VAR 0 2
34278: PPUSH
34279: LD_VAR 0 3
34283: PPUSH
34284: CALL_OW 488
34288: NOT
34289: OR
34290: PUSH
34291: LD_VAR 0 1
34295: PPUSH
34296: CALL_OW 266
34300: PUSH
34301: LD_INT 3
34303: NONEQUAL
34304: PUSH
34305: LD_VAR 0 1
34309: PPUSH
34310: CALL_OW 247
34314: PUSH
34315: LD_INT 1
34317: EQUAL
34318: NOT
34319: AND
34320: OR
34321: IFFALSE 34325
// exit ;
34323: GO 34474
// if GetType ( factory ) = unit_human then
34325: LD_VAR 0 1
34329: PPUSH
34330: CALL_OW 247
34334: PUSH
34335: LD_INT 1
34337: EQUAL
34338: IFFALSE 34355
// factory := IsInUnit ( factory ) ;
34340: LD_ADDR_VAR 0 1
34344: PUSH
34345: LD_VAR 0 1
34349: PPUSH
34350: CALL_OW 310
34354: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34355: LD_VAR 0 1
34359: PPUSH
34360: CALL_OW 266
34364: PUSH
34365: LD_INT 3
34367: NONEQUAL
34368: IFFALSE 34372
// exit ;
34370: GO 34474
// if HexInfo ( x , y ) = factory then
34372: LD_VAR 0 2
34376: PPUSH
34377: LD_VAR 0 3
34381: PPUSH
34382: CALL_OW 428
34386: PUSH
34387: LD_VAR 0 1
34391: EQUAL
34392: IFFALSE 34419
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
34394: LD_ADDR_EXP 119
34398: PUSH
34399: LD_EXP 119
34403: PPUSH
34404: LD_VAR 0 1
34408: PPUSH
34409: LD_INT 0
34411: PPUSH
34412: CALL_OW 1
34416: ST_TO_ADDR
34417: GO 34470
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
34419: LD_ADDR_EXP 119
34423: PUSH
34424: LD_EXP 119
34428: PPUSH
34429: LD_VAR 0 1
34433: PPUSH
34434: LD_VAR 0 1
34438: PPUSH
34439: CALL_OW 255
34443: PUSH
34444: LD_VAR 0 1
34448: PUSH
34449: LD_VAR 0 2
34453: PUSH
34454: LD_VAR 0 3
34458: PUSH
34459: EMPTY
34460: LIST
34461: LIST
34462: LIST
34463: LIST
34464: PPUSH
34465: CALL_OW 1
34469: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34470: CALL 34479 0 0
// end ;
34474: LD_VAR 0 4
34478: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34479: LD_INT 0
34481: PPUSH
34482: PPUSH
34483: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34484: LD_STRING resetFactoryWaypoint();
34486: PPUSH
34487: CALL_OW 559
// if factoryWaypoints then
34491: LD_EXP 119
34495: IFFALSE 34621
// begin list := PrepareArray ( factoryWaypoints ) ;
34497: LD_ADDR_VAR 0 3
34501: PUSH
34502: LD_EXP 119
34506: PPUSH
34507: CALL 80943 0 1
34511: ST_TO_ADDR
// for i := 1 to list do
34512: LD_ADDR_VAR 0 2
34516: PUSH
34517: DOUBLE
34518: LD_INT 1
34520: DEC
34521: ST_TO_ADDR
34522: LD_VAR 0 3
34526: PUSH
34527: FOR_TO
34528: IFFALSE 34619
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34530: LD_STRING setFactoryWaypointXY(
34532: PUSH
34533: LD_VAR 0 3
34537: PUSH
34538: LD_VAR 0 2
34542: ARRAY
34543: PUSH
34544: LD_INT 1
34546: ARRAY
34547: STR
34548: PUSH
34549: LD_STRING ,
34551: STR
34552: PUSH
34553: LD_VAR 0 3
34557: PUSH
34558: LD_VAR 0 2
34562: ARRAY
34563: PUSH
34564: LD_INT 2
34566: ARRAY
34567: STR
34568: PUSH
34569: LD_STRING ,
34571: STR
34572: PUSH
34573: LD_VAR 0 3
34577: PUSH
34578: LD_VAR 0 2
34582: ARRAY
34583: PUSH
34584: LD_INT 3
34586: ARRAY
34587: STR
34588: PUSH
34589: LD_STRING ,
34591: STR
34592: PUSH
34593: LD_VAR 0 3
34597: PUSH
34598: LD_VAR 0 2
34602: ARRAY
34603: PUSH
34604: LD_INT 4
34606: ARRAY
34607: STR
34608: PUSH
34609: LD_STRING )
34611: STR
34612: PPUSH
34613: CALL_OW 559
34617: GO 34527
34619: POP
34620: POP
// end ; end ;
34621: LD_VAR 0 1
34625: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34626: LD_INT 0
34628: PPUSH
// if HexInfo ( x , y ) = warehouse then
34629: LD_VAR 0 2
34633: PPUSH
34634: LD_VAR 0 3
34638: PPUSH
34639: CALL_OW 428
34643: PUSH
34644: LD_VAR 0 1
34648: EQUAL
34649: IFFALSE 34676
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34651: LD_ADDR_EXP 120
34655: PUSH
34656: LD_EXP 120
34660: PPUSH
34661: LD_VAR 0 1
34665: PPUSH
34666: LD_INT 0
34668: PPUSH
34669: CALL_OW 1
34673: ST_TO_ADDR
34674: GO 34727
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34676: LD_ADDR_EXP 120
34680: PUSH
34681: LD_EXP 120
34685: PPUSH
34686: LD_VAR 0 1
34690: PPUSH
34691: LD_VAR 0 1
34695: PPUSH
34696: CALL_OW 255
34700: PUSH
34701: LD_VAR 0 1
34705: PUSH
34706: LD_VAR 0 2
34710: PUSH
34711: LD_VAR 0 3
34715: PUSH
34716: EMPTY
34717: LIST
34718: LIST
34719: LIST
34720: LIST
34721: PPUSH
34722: CALL_OW 1
34726: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
34727: CALL 34736 0 0
// end ;
34731: LD_VAR 0 4
34735: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
34736: LD_INT 0
34738: PPUSH
34739: PPUSH
34740: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
34741: LD_STRING resetWarehouseGatheringPoints();
34743: PPUSH
34744: CALL_OW 559
// if warehouseGatheringPoints then
34748: LD_EXP 120
34752: IFFALSE 34878
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
34754: LD_ADDR_VAR 0 3
34758: PUSH
34759: LD_EXP 120
34763: PPUSH
34764: CALL 80943 0 1
34768: ST_TO_ADDR
// for i := 1 to list do
34769: LD_ADDR_VAR 0 2
34773: PUSH
34774: DOUBLE
34775: LD_INT 1
34777: DEC
34778: ST_TO_ADDR
34779: LD_VAR 0 3
34783: PUSH
34784: FOR_TO
34785: IFFALSE 34876
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34787: LD_STRING setWarehouseGatheringPointXY(
34789: PUSH
34790: LD_VAR 0 3
34794: PUSH
34795: LD_VAR 0 2
34799: ARRAY
34800: PUSH
34801: LD_INT 1
34803: ARRAY
34804: STR
34805: PUSH
34806: LD_STRING ,
34808: STR
34809: PUSH
34810: LD_VAR 0 3
34814: PUSH
34815: LD_VAR 0 2
34819: ARRAY
34820: PUSH
34821: LD_INT 2
34823: ARRAY
34824: STR
34825: PUSH
34826: LD_STRING ,
34828: STR
34829: PUSH
34830: LD_VAR 0 3
34834: PUSH
34835: LD_VAR 0 2
34839: ARRAY
34840: PUSH
34841: LD_INT 3
34843: ARRAY
34844: STR
34845: PUSH
34846: LD_STRING ,
34848: STR
34849: PUSH
34850: LD_VAR 0 3
34854: PUSH
34855: LD_VAR 0 2
34859: ARRAY
34860: PUSH
34861: LD_INT 4
34863: ARRAY
34864: STR
34865: PUSH
34866: LD_STRING )
34868: STR
34869: PPUSH
34870: CALL_OW 559
34874: GO 34784
34876: POP
34877: POP
// end ; end ;
34878: LD_VAR 0 1
34882: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
34883: LD_EXP 120
34887: IFFALSE 35572
34889: GO 34891
34891: DISABLE
34892: LD_INT 0
34894: PPUSH
34895: PPUSH
34896: PPUSH
34897: PPUSH
34898: PPUSH
34899: PPUSH
34900: PPUSH
34901: PPUSH
34902: PPUSH
// begin enable ;
34903: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
34904: LD_ADDR_VAR 0 3
34908: PUSH
34909: LD_EXP 120
34913: PPUSH
34914: CALL 80943 0 1
34918: ST_TO_ADDR
// if not list then
34919: LD_VAR 0 3
34923: NOT
34924: IFFALSE 34928
// exit ;
34926: GO 35572
// for i := 1 to list do
34928: LD_ADDR_VAR 0 1
34932: PUSH
34933: DOUBLE
34934: LD_INT 1
34936: DEC
34937: ST_TO_ADDR
34938: LD_VAR 0 3
34942: PUSH
34943: FOR_TO
34944: IFFALSE 35570
// begin depot := list [ i ] [ 2 ] ;
34946: LD_ADDR_VAR 0 8
34950: PUSH
34951: LD_VAR 0 3
34955: PUSH
34956: LD_VAR 0 1
34960: ARRAY
34961: PUSH
34962: LD_INT 2
34964: ARRAY
34965: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
34966: LD_ADDR_VAR 0 5
34970: PUSH
34971: LD_VAR 0 3
34975: PUSH
34976: LD_VAR 0 1
34980: ARRAY
34981: PUSH
34982: LD_INT 1
34984: ARRAY
34985: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
34986: LD_VAR 0 8
34990: PPUSH
34991: CALL_OW 301
34995: PUSH
34996: LD_VAR 0 5
35000: PUSH
35001: LD_VAR 0 8
35005: PPUSH
35006: CALL_OW 255
35010: NONEQUAL
35011: OR
35012: IFFALSE 35041
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
35014: LD_ADDR_EXP 120
35018: PUSH
35019: LD_EXP 120
35023: PPUSH
35024: LD_VAR 0 8
35028: PPUSH
35029: LD_INT 0
35031: PPUSH
35032: CALL_OW 1
35036: ST_TO_ADDR
// exit ;
35037: POP
35038: POP
35039: GO 35572
// end ; x := list [ i ] [ 3 ] ;
35041: LD_ADDR_VAR 0 6
35045: PUSH
35046: LD_VAR 0 3
35050: PUSH
35051: LD_VAR 0 1
35055: ARRAY
35056: PUSH
35057: LD_INT 3
35059: ARRAY
35060: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
35061: LD_ADDR_VAR 0 7
35065: PUSH
35066: LD_VAR 0 3
35070: PUSH
35071: LD_VAR 0 1
35075: ARRAY
35076: PUSH
35077: LD_INT 4
35079: ARRAY
35080: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
35081: LD_ADDR_VAR 0 9
35085: PUSH
35086: LD_VAR 0 6
35090: PPUSH
35091: LD_VAR 0 7
35095: PPUSH
35096: LD_INT 16
35098: PPUSH
35099: CALL 79531 0 3
35103: ST_TO_ADDR
// if not cratesNearbyPoint then
35104: LD_VAR 0 9
35108: NOT
35109: IFFALSE 35115
// exit ;
35111: POP
35112: POP
35113: GO 35572
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35115: LD_ADDR_VAR 0 4
35119: PUSH
35120: LD_INT 22
35122: PUSH
35123: LD_VAR 0 5
35127: PUSH
35128: EMPTY
35129: LIST
35130: LIST
35131: PUSH
35132: LD_INT 3
35134: PUSH
35135: LD_INT 60
35137: PUSH
35138: EMPTY
35139: LIST
35140: PUSH
35141: EMPTY
35142: LIST
35143: LIST
35144: PUSH
35145: LD_INT 91
35147: PUSH
35148: LD_VAR 0 8
35152: PUSH
35153: LD_INT 6
35155: PUSH
35156: EMPTY
35157: LIST
35158: LIST
35159: LIST
35160: PUSH
35161: LD_INT 2
35163: PUSH
35164: LD_INT 25
35166: PUSH
35167: LD_INT 2
35169: PUSH
35170: EMPTY
35171: LIST
35172: LIST
35173: PUSH
35174: LD_INT 25
35176: PUSH
35177: LD_INT 16
35179: PUSH
35180: EMPTY
35181: LIST
35182: LIST
35183: PUSH
35184: EMPTY
35185: LIST
35186: LIST
35187: LIST
35188: PUSH
35189: EMPTY
35190: LIST
35191: LIST
35192: LIST
35193: LIST
35194: PPUSH
35195: CALL_OW 69
35199: PUSH
35200: LD_VAR 0 8
35204: PPUSH
35205: CALL_OW 313
35209: PPUSH
35210: LD_INT 3
35212: PUSH
35213: LD_INT 60
35215: PUSH
35216: EMPTY
35217: LIST
35218: PUSH
35219: EMPTY
35220: LIST
35221: LIST
35222: PUSH
35223: LD_INT 2
35225: PUSH
35226: LD_INT 25
35228: PUSH
35229: LD_INT 2
35231: PUSH
35232: EMPTY
35233: LIST
35234: LIST
35235: PUSH
35236: LD_INT 25
35238: PUSH
35239: LD_INT 16
35241: PUSH
35242: EMPTY
35243: LIST
35244: LIST
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: LIST
35250: PUSH
35251: EMPTY
35252: LIST
35253: LIST
35254: PPUSH
35255: CALL_OW 72
35259: UNION
35260: ST_TO_ADDR
// if tmp then
35261: LD_VAR 0 4
35265: IFFALSE 35345
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35267: LD_ADDR_VAR 0 4
35271: PUSH
35272: LD_VAR 0 4
35276: PPUSH
35277: LD_INT 3
35279: PPUSH
35280: CALL 77500 0 2
35284: ST_TO_ADDR
// for j in tmp do
35285: LD_ADDR_VAR 0 2
35289: PUSH
35290: LD_VAR 0 4
35294: PUSH
35295: FOR_IN
35296: IFFALSE 35339
// begin if IsInUnit ( j ) then
35298: LD_VAR 0 2
35302: PPUSH
35303: CALL_OW 310
35307: IFFALSE 35318
// ComExit ( j ) ;
35309: LD_VAR 0 2
35313: PPUSH
35314: CALL 77583 0 1
// AddComCollect ( j , x , y ) ;
35318: LD_VAR 0 2
35322: PPUSH
35323: LD_VAR 0 6
35327: PPUSH
35328: LD_VAR 0 7
35332: PPUSH
35333: CALL_OW 177
// end ;
35337: GO 35295
35339: POP
35340: POP
// exit ;
35341: POP
35342: POP
35343: GO 35572
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35345: LD_ADDR_VAR 0 4
35349: PUSH
35350: LD_INT 22
35352: PUSH
35353: LD_VAR 0 5
35357: PUSH
35358: EMPTY
35359: LIST
35360: LIST
35361: PUSH
35362: LD_INT 91
35364: PUSH
35365: LD_VAR 0 8
35369: PUSH
35370: LD_INT 8
35372: PUSH
35373: EMPTY
35374: LIST
35375: LIST
35376: LIST
35377: PUSH
35378: LD_INT 2
35380: PUSH
35381: LD_INT 34
35383: PUSH
35384: LD_INT 12
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: PUSH
35391: LD_INT 34
35393: PUSH
35394: LD_INT 51
35396: PUSH
35397: EMPTY
35398: LIST
35399: LIST
35400: PUSH
35401: LD_INT 34
35403: PUSH
35404: LD_INT 32
35406: PUSH
35407: EMPTY
35408: LIST
35409: LIST
35410: PUSH
35411: LD_INT 34
35413: PUSH
35414: LD_INT 89
35416: PUSH
35417: EMPTY
35418: LIST
35419: LIST
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: LIST
35425: LIST
35426: LIST
35427: PUSH
35428: EMPTY
35429: LIST
35430: LIST
35431: LIST
35432: PPUSH
35433: CALL_OW 69
35437: ST_TO_ADDR
// if tmp then
35438: LD_VAR 0 4
35442: IFFALSE 35568
// begin for j in tmp do
35444: LD_ADDR_VAR 0 2
35448: PUSH
35449: LD_VAR 0 4
35453: PUSH
35454: FOR_IN
35455: IFFALSE 35566
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35457: LD_VAR 0 2
35461: PPUSH
35462: CALL_OW 262
35466: PUSH
35467: LD_INT 3
35469: EQUAL
35470: PUSH
35471: LD_VAR 0 2
35475: PPUSH
35476: CALL_OW 261
35480: PUSH
35481: LD_INT 20
35483: GREATER
35484: OR
35485: PUSH
35486: LD_VAR 0 2
35490: PPUSH
35491: CALL_OW 314
35495: NOT
35496: AND
35497: PUSH
35498: LD_VAR 0 2
35502: PPUSH
35503: CALL_OW 263
35507: PUSH
35508: LD_INT 1
35510: NONEQUAL
35511: PUSH
35512: LD_VAR 0 2
35516: PPUSH
35517: CALL_OW 311
35521: OR
35522: AND
35523: IFFALSE 35564
// begin ComCollect ( j , x , y ) ;
35525: LD_VAR 0 2
35529: PPUSH
35530: LD_VAR 0 6
35534: PPUSH
35535: LD_VAR 0 7
35539: PPUSH
35540: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35544: LD_VAR 0 2
35548: PPUSH
35549: LD_VAR 0 8
35553: PPUSH
35554: CALL_OW 172
// exit ;
35558: POP
35559: POP
35560: POP
35561: POP
35562: GO 35572
// end ;
35564: GO 35454
35566: POP
35567: POP
// end ; end ;
35568: GO 34943
35570: POP
35571: POP
// end ; end_of_file
35572: PPOPN 9
35574: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
35575: LD_INT 0
35577: PPUSH
35578: PPUSH
35579: PPUSH
35580: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
35581: LD_VAR 0 1
35585: PPUSH
35586: CALL_OW 264
35590: PUSH
35591: LD_INT 91
35593: EQUAL
35594: IFFALSE 35666
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
35596: LD_INT 68
35598: PPUSH
35599: LD_VAR 0 1
35603: PPUSH
35604: CALL_OW 255
35608: PPUSH
35609: CALL_OW 321
35613: PUSH
35614: LD_INT 2
35616: EQUAL
35617: IFFALSE 35629
// eff := 70 else
35619: LD_ADDR_VAR 0 4
35623: PUSH
35624: LD_INT 70
35626: ST_TO_ADDR
35627: GO 35637
// eff := 30 ;
35629: LD_ADDR_VAR 0 4
35633: PUSH
35634: LD_INT 30
35636: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35637: LD_VAR 0 1
35641: PPUSH
35642: CALL_OW 250
35646: PPUSH
35647: LD_VAR 0 1
35651: PPUSH
35652: CALL_OW 251
35656: PPUSH
35657: LD_VAR 0 4
35661: PPUSH
35662: CALL_OW 495
// end ; end ;
35666: LD_VAR 0 2
35670: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35671: LD_INT 0
35673: PPUSH
// end ;
35674: LD_VAR 0 4
35678: RET
// export function SOS_Command ( cmd ) ; begin
35679: LD_INT 0
35681: PPUSH
// end ;
35682: LD_VAR 0 2
35686: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35687: LD_INT 0
35689: PPUSH
// end ;
35690: LD_VAR 0 6
35694: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
35695: LD_INT 0
35697: PPUSH
35698: PPUSH
// if not vehicle or not factory then
35699: LD_VAR 0 1
35703: NOT
35704: PUSH
35705: LD_VAR 0 2
35709: NOT
35710: OR
35711: IFFALSE 35715
// exit ;
35713: GO 35946
// if factoryWaypoints >= factory then
35715: LD_EXP 119
35719: PUSH
35720: LD_VAR 0 2
35724: GREATEREQUAL
35725: IFFALSE 35946
// if factoryWaypoints [ factory ] then
35727: LD_EXP 119
35731: PUSH
35732: LD_VAR 0 2
35736: ARRAY
35737: IFFALSE 35946
// begin if GetControl ( vehicle ) = control_manual then
35739: LD_VAR 0 1
35743: PPUSH
35744: CALL_OW 263
35748: PUSH
35749: LD_INT 1
35751: EQUAL
35752: IFFALSE 35833
// begin driver := IsDrivenBy ( vehicle ) ;
35754: LD_ADDR_VAR 0 4
35758: PUSH
35759: LD_VAR 0 1
35763: PPUSH
35764: CALL_OW 311
35768: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35769: LD_VAR 0 4
35773: PPUSH
35774: LD_EXP 119
35778: PUSH
35779: LD_VAR 0 2
35783: ARRAY
35784: PUSH
35785: LD_INT 3
35787: ARRAY
35788: PPUSH
35789: LD_EXP 119
35793: PUSH
35794: LD_VAR 0 2
35798: ARRAY
35799: PUSH
35800: LD_INT 4
35802: ARRAY
35803: PPUSH
35804: CALL_OW 171
// AddComExitVehicle ( driver ) ;
35808: LD_VAR 0 4
35812: PPUSH
35813: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
35817: LD_VAR 0 4
35821: PPUSH
35822: LD_VAR 0 2
35826: PPUSH
35827: CALL_OW 180
// end else
35831: GO 35946
// if GetControl ( vehicle ) = control_remote then
35833: LD_VAR 0 1
35837: PPUSH
35838: CALL_OW 263
35842: PUSH
35843: LD_INT 2
35845: EQUAL
35846: IFFALSE 35907
// begin wait ( 0 0$2 ) ;
35848: LD_INT 70
35850: PPUSH
35851: CALL_OW 67
// if Connect ( vehicle ) then
35855: LD_VAR 0 1
35859: PPUSH
35860: CALL 47804 0 1
35864: IFFALSE 35905
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35866: LD_VAR 0 1
35870: PPUSH
35871: LD_EXP 119
35875: PUSH
35876: LD_VAR 0 2
35880: ARRAY
35881: PUSH
35882: LD_INT 3
35884: ARRAY
35885: PPUSH
35886: LD_EXP 119
35890: PUSH
35891: LD_VAR 0 2
35895: ARRAY
35896: PUSH
35897: LD_INT 4
35899: ARRAY
35900: PPUSH
35901: CALL_OW 171
// end else
35905: GO 35946
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35907: LD_VAR 0 1
35911: PPUSH
35912: LD_EXP 119
35916: PUSH
35917: LD_VAR 0 2
35921: ARRAY
35922: PUSH
35923: LD_INT 3
35925: ARRAY
35926: PPUSH
35927: LD_EXP 119
35931: PUSH
35932: LD_VAR 0 2
35936: ARRAY
35937: PUSH
35938: LD_INT 4
35940: ARRAY
35941: PPUSH
35942: CALL_OW 171
// end ; end ;
35946: LD_VAR 0 3
35950: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
35951: LD_INT 0
35953: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
35954: LD_VAR 0 1
35958: PUSH
35959: LD_INT 250
35961: EQUAL
35962: PUSH
35963: LD_VAR 0 2
35967: PPUSH
35968: CALL_OW 264
35972: PUSH
35973: LD_INT 81
35975: EQUAL
35976: AND
35977: IFFALSE 35998
// MinerPlaceMine ( unit , x , y ) ;
35979: LD_VAR 0 2
35983: PPUSH
35984: LD_VAR 0 4
35988: PPUSH
35989: LD_VAR 0 5
35993: PPUSH
35994: CALL 38383 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
35998: LD_VAR 0 1
36002: PUSH
36003: LD_INT 251
36005: EQUAL
36006: PUSH
36007: LD_VAR 0 2
36011: PPUSH
36012: CALL_OW 264
36016: PUSH
36017: LD_INT 81
36019: EQUAL
36020: AND
36021: IFFALSE 36042
// MinerDetonateMine ( unit , x , y ) ;
36023: LD_VAR 0 2
36027: PPUSH
36028: LD_VAR 0 4
36032: PPUSH
36033: LD_VAR 0 5
36037: PPUSH
36038: CALL 38658 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
36042: LD_VAR 0 1
36046: PUSH
36047: LD_INT 252
36049: EQUAL
36050: PUSH
36051: LD_VAR 0 2
36055: PPUSH
36056: CALL_OW 264
36060: PUSH
36061: LD_INT 81
36063: EQUAL
36064: AND
36065: IFFALSE 36086
// MinerCreateMinefield ( unit , x , y ) ;
36067: LD_VAR 0 2
36071: PPUSH
36072: LD_VAR 0 4
36076: PPUSH
36077: LD_VAR 0 5
36081: PPUSH
36082: CALL 39075 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
36086: LD_VAR 0 1
36090: PUSH
36091: LD_INT 253
36093: EQUAL
36094: PUSH
36095: LD_VAR 0 2
36099: PPUSH
36100: CALL_OW 257
36104: PUSH
36105: LD_INT 5
36107: EQUAL
36108: AND
36109: IFFALSE 36130
// ComBinocular ( unit , x , y ) ;
36111: LD_VAR 0 2
36115: PPUSH
36116: LD_VAR 0 4
36120: PPUSH
36121: LD_VAR 0 5
36125: PPUSH
36126: CALL 39444 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36130: LD_VAR 0 1
36134: PUSH
36135: LD_INT 254
36137: EQUAL
36138: PUSH
36139: LD_VAR 0 2
36143: PPUSH
36144: CALL_OW 264
36148: PUSH
36149: LD_INT 99
36151: EQUAL
36152: AND
36153: PUSH
36154: LD_VAR 0 3
36158: PPUSH
36159: CALL_OW 263
36163: PUSH
36164: LD_INT 3
36166: EQUAL
36167: AND
36168: IFFALSE 36184
// HackDestroyVehicle ( unit , selectedUnit ) ;
36170: LD_VAR 0 2
36174: PPUSH
36175: LD_VAR 0 3
36179: PPUSH
36180: CALL 37747 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36184: LD_VAR 0 1
36188: PUSH
36189: LD_INT 255
36191: EQUAL
36192: PUSH
36193: LD_VAR 0 2
36197: PPUSH
36198: CALL_OW 264
36202: PUSH
36203: LD_INT 14
36205: PUSH
36206: LD_INT 53
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: IN
36213: AND
36214: PUSH
36215: LD_VAR 0 4
36219: PPUSH
36220: LD_VAR 0 5
36224: PPUSH
36225: CALL_OW 488
36229: AND
36230: IFFALSE 36254
// CutTreeXYR ( unit , x , y , 12 ) ;
36232: LD_VAR 0 2
36236: PPUSH
36237: LD_VAR 0 4
36241: PPUSH
36242: LD_VAR 0 5
36246: PPUSH
36247: LD_INT 12
36249: PPUSH
36250: CALL 36317 0 4
// if cmd = 256 then
36254: LD_VAR 0 1
36258: PUSH
36259: LD_INT 256
36261: EQUAL
36262: IFFALSE 36283
// SetFactoryWaypoint ( unit , x , y ) ;
36264: LD_VAR 0 2
36268: PPUSH
36269: LD_VAR 0 4
36273: PPUSH
36274: LD_VAR 0 5
36278: PPUSH
36279: CALL 34264 0 3
// if cmd = 257 then
36283: LD_VAR 0 1
36287: PUSH
36288: LD_INT 257
36290: EQUAL
36291: IFFALSE 36312
// SetWarehouseGatheringPoint ( unit , x , y ) ;
36293: LD_VAR 0 2
36297: PPUSH
36298: LD_VAR 0 4
36302: PPUSH
36303: LD_VAR 0 5
36307: PPUSH
36308: CALL 34626 0 3
// end ;
36312: LD_VAR 0 6
36316: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36317: LD_INT 0
36319: PPUSH
36320: PPUSH
36321: PPUSH
36322: PPUSH
36323: PPUSH
36324: PPUSH
36325: PPUSH
36326: PPUSH
36327: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
36328: LD_VAR 0 1
36332: NOT
36333: PUSH
36334: LD_VAR 0 2
36338: PPUSH
36339: LD_VAR 0 3
36343: PPUSH
36344: CALL_OW 488
36348: NOT
36349: OR
36350: PUSH
36351: LD_VAR 0 4
36355: NOT
36356: OR
36357: IFFALSE 36361
// exit ;
36359: GO 36701
// list := [ ] ;
36361: LD_ADDR_VAR 0 13
36365: PUSH
36366: EMPTY
36367: ST_TO_ADDR
// if x - r < 0 then
36368: LD_VAR 0 2
36372: PUSH
36373: LD_VAR 0 4
36377: MINUS
36378: PUSH
36379: LD_INT 0
36381: LESS
36382: IFFALSE 36394
// min_x := 0 else
36384: LD_ADDR_VAR 0 7
36388: PUSH
36389: LD_INT 0
36391: ST_TO_ADDR
36392: GO 36410
// min_x := x - r ;
36394: LD_ADDR_VAR 0 7
36398: PUSH
36399: LD_VAR 0 2
36403: PUSH
36404: LD_VAR 0 4
36408: MINUS
36409: ST_TO_ADDR
// if y - r < 0 then
36410: LD_VAR 0 3
36414: PUSH
36415: LD_VAR 0 4
36419: MINUS
36420: PUSH
36421: LD_INT 0
36423: LESS
36424: IFFALSE 36436
// min_y := 0 else
36426: LD_ADDR_VAR 0 8
36430: PUSH
36431: LD_INT 0
36433: ST_TO_ADDR
36434: GO 36452
// min_y := y - r ;
36436: LD_ADDR_VAR 0 8
36440: PUSH
36441: LD_VAR 0 3
36445: PUSH
36446: LD_VAR 0 4
36450: MINUS
36451: ST_TO_ADDR
// max_x := x + r ;
36452: LD_ADDR_VAR 0 9
36456: PUSH
36457: LD_VAR 0 2
36461: PUSH
36462: LD_VAR 0 4
36466: PLUS
36467: ST_TO_ADDR
// max_y := y + r ;
36468: LD_ADDR_VAR 0 10
36472: PUSH
36473: LD_VAR 0 3
36477: PUSH
36478: LD_VAR 0 4
36482: PLUS
36483: ST_TO_ADDR
// for _x = min_x to max_x do
36484: LD_ADDR_VAR 0 11
36488: PUSH
36489: DOUBLE
36490: LD_VAR 0 7
36494: DEC
36495: ST_TO_ADDR
36496: LD_VAR 0 9
36500: PUSH
36501: FOR_TO
36502: IFFALSE 36619
// for _y = min_y to max_y do
36504: LD_ADDR_VAR 0 12
36508: PUSH
36509: DOUBLE
36510: LD_VAR 0 8
36514: DEC
36515: ST_TO_ADDR
36516: LD_VAR 0 10
36520: PUSH
36521: FOR_TO
36522: IFFALSE 36615
// begin if not ValidHex ( _x , _y ) then
36524: LD_VAR 0 11
36528: PPUSH
36529: LD_VAR 0 12
36533: PPUSH
36534: CALL_OW 488
36538: NOT
36539: IFFALSE 36543
// continue ;
36541: GO 36521
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36543: LD_VAR 0 11
36547: PPUSH
36548: LD_VAR 0 12
36552: PPUSH
36553: CALL_OW 351
36557: PUSH
36558: LD_VAR 0 11
36562: PPUSH
36563: LD_VAR 0 12
36567: PPUSH
36568: CALL_OW 554
36572: AND
36573: IFFALSE 36613
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36575: LD_ADDR_VAR 0 13
36579: PUSH
36580: LD_VAR 0 13
36584: PPUSH
36585: LD_VAR 0 13
36589: PUSH
36590: LD_INT 1
36592: PLUS
36593: PPUSH
36594: LD_VAR 0 11
36598: PUSH
36599: LD_VAR 0 12
36603: PUSH
36604: EMPTY
36605: LIST
36606: LIST
36607: PPUSH
36608: CALL_OW 2
36612: ST_TO_ADDR
// end ;
36613: GO 36521
36615: POP
36616: POP
36617: GO 36501
36619: POP
36620: POP
// if not list then
36621: LD_VAR 0 13
36625: NOT
36626: IFFALSE 36630
// exit ;
36628: GO 36701
// for i in list do
36630: LD_ADDR_VAR 0 6
36634: PUSH
36635: LD_VAR 0 13
36639: PUSH
36640: FOR_IN
36641: IFFALSE 36699
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
36643: LD_VAR 0 1
36647: PPUSH
36648: LD_STRING M
36650: PUSH
36651: LD_VAR 0 6
36655: PUSH
36656: LD_INT 1
36658: ARRAY
36659: PUSH
36660: LD_VAR 0 6
36664: PUSH
36665: LD_INT 2
36667: ARRAY
36668: PUSH
36669: LD_INT 0
36671: PUSH
36672: LD_INT 0
36674: PUSH
36675: LD_INT 0
36677: PUSH
36678: LD_INT 0
36680: PUSH
36681: EMPTY
36682: LIST
36683: LIST
36684: LIST
36685: LIST
36686: LIST
36687: LIST
36688: LIST
36689: PUSH
36690: EMPTY
36691: LIST
36692: PPUSH
36693: CALL_OW 447
36697: GO 36640
36699: POP
36700: POP
// end ;
36701: LD_VAR 0 5
36705: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
36706: LD_EXP 122
36710: NOT
36711: IFFALSE 36761
36713: GO 36715
36715: DISABLE
// begin initHack := true ;
36716: LD_ADDR_EXP 122
36720: PUSH
36721: LD_INT 1
36723: ST_TO_ADDR
// hackTanks := [ ] ;
36724: LD_ADDR_EXP 123
36728: PUSH
36729: EMPTY
36730: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
36731: LD_ADDR_EXP 124
36735: PUSH
36736: EMPTY
36737: ST_TO_ADDR
// hackLimit := 3 ;
36738: LD_ADDR_EXP 125
36742: PUSH
36743: LD_INT 3
36745: ST_TO_ADDR
// hackDist := 12 ;
36746: LD_ADDR_EXP 126
36750: PUSH
36751: LD_INT 12
36753: ST_TO_ADDR
// hackCounter := [ ] ;
36754: LD_ADDR_EXP 127
36758: PUSH
36759: EMPTY
36760: ST_TO_ADDR
// end ;
36761: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
36762: LD_EXP 122
36766: PUSH
36767: LD_INT 34
36769: PUSH
36770: LD_INT 99
36772: PUSH
36773: EMPTY
36774: LIST
36775: LIST
36776: PPUSH
36777: CALL_OW 69
36781: AND
36782: IFFALSE 37035
36784: GO 36786
36786: DISABLE
36787: LD_INT 0
36789: PPUSH
36790: PPUSH
// begin enable ;
36791: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
36792: LD_ADDR_VAR 0 1
36796: PUSH
36797: LD_INT 34
36799: PUSH
36800: LD_INT 99
36802: PUSH
36803: EMPTY
36804: LIST
36805: LIST
36806: PPUSH
36807: CALL_OW 69
36811: PUSH
36812: FOR_IN
36813: IFFALSE 37033
// begin if not i in hackTanks then
36815: LD_VAR 0 1
36819: PUSH
36820: LD_EXP 123
36824: IN
36825: NOT
36826: IFFALSE 36909
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
36828: LD_ADDR_EXP 123
36832: PUSH
36833: LD_EXP 123
36837: PPUSH
36838: LD_EXP 123
36842: PUSH
36843: LD_INT 1
36845: PLUS
36846: PPUSH
36847: LD_VAR 0 1
36851: PPUSH
36852: CALL_OW 1
36856: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
36857: LD_ADDR_EXP 124
36861: PUSH
36862: LD_EXP 124
36866: PPUSH
36867: LD_EXP 124
36871: PUSH
36872: LD_INT 1
36874: PLUS
36875: PPUSH
36876: EMPTY
36877: PPUSH
36878: CALL_OW 1
36882: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
36883: LD_ADDR_EXP 127
36887: PUSH
36888: LD_EXP 127
36892: PPUSH
36893: LD_EXP 127
36897: PUSH
36898: LD_INT 1
36900: PLUS
36901: PPUSH
36902: EMPTY
36903: PPUSH
36904: CALL_OW 1
36908: ST_TO_ADDR
// end ; if not IsOk ( i ) then
36909: LD_VAR 0 1
36913: PPUSH
36914: CALL_OW 302
36918: NOT
36919: IFFALSE 36932
// begin HackUnlinkAll ( i ) ;
36921: LD_VAR 0 1
36925: PPUSH
36926: CALL 37038 0 1
// continue ;
36930: GO 36812
// end ; HackCheckCapturedStatus ( i ) ;
36932: LD_VAR 0 1
36936: PPUSH
36937: CALL 37481 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
36941: LD_ADDR_VAR 0 2
36945: PUSH
36946: LD_INT 81
36948: PUSH
36949: LD_VAR 0 1
36953: PPUSH
36954: CALL_OW 255
36958: PUSH
36959: EMPTY
36960: LIST
36961: LIST
36962: PUSH
36963: LD_INT 33
36965: PUSH
36966: LD_INT 3
36968: PUSH
36969: EMPTY
36970: LIST
36971: LIST
36972: PUSH
36973: LD_INT 91
36975: PUSH
36976: LD_VAR 0 1
36980: PUSH
36981: LD_EXP 126
36985: PUSH
36986: EMPTY
36987: LIST
36988: LIST
36989: LIST
36990: PUSH
36991: LD_INT 50
36993: PUSH
36994: EMPTY
36995: LIST
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: LIST
37001: LIST
37002: PPUSH
37003: CALL_OW 69
37007: ST_TO_ADDR
// if not tmp then
37008: LD_VAR 0 2
37012: NOT
37013: IFFALSE 37017
// continue ;
37015: GO 36812
// HackLink ( i , tmp ) ;
37017: LD_VAR 0 1
37021: PPUSH
37022: LD_VAR 0 2
37026: PPUSH
37027: CALL 37174 0 2
// end ;
37031: GO 36812
37033: POP
37034: POP
// end ;
37035: PPOPN 2
37037: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
37038: LD_INT 0
37040: PPUSH
37041: PPUSH
37042: PPUSH
// if not hack in hackTanks then
37043: LD_VAR 0 1
37047: PUSH
37048: LD_EXP 123
37052: IN
37053: NOT
37054: IFFALSE 37058
// exit ;
37056: GO 37169
// index := GetElementIndex ( hackTanks , hack ) ;
37058: LD_ADDR_VAR 0 4
37062: PUSH
37063: LD_EXP 123
37067: PPUSH
37068: LD_VAR 0 1
37072: PPUSH
37073: CALL 44611 0 2
37077: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
37078: LD_EXP 124
37082: PUSH
37083: LD_VAR 0 4
37087: ARRAY
37088: IFFALSE 37169
// begin for i in hackTanksCaptured [ index ] do
37090: LD_ADDR_VAR 0 3
37094: PUSH
37095: LD_EXP 124
37099: PUSH
37100: LD_VAR 0 4
37104: ARRAY
37105: PUSH
37106: FOR_IN
37107: IFFALSE 37133
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
37109: LD_VAR 0 3
37113: PUSH
37114: LD_INT 1
37116: ARRAY
37117: PPUSH
37118: LD_VAR 0 3
37122: PUSH
37123: LD_INT 2
37125: ARRAY
37126: PPUSH
37127: CALL_OW 235
37131: GO 37106
37133: POP
37134: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
37135: LD_ADDR_EXP 124
37139: PUSH
37140: LD_EXP 124
37144: PPUSH
37145: LD_VAR 0 4
37149: PPUSH
37150: EMPTY
37151: PPUSH
37152: CALL_OW 1
37156: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
37157: LD_VAR 0 1
37161: PPUSH
37162: LD_INT 0
37164: PPUSH
37165: CALL_OW 505
// end ; end ;
37169: LD_VAR 0 2
37173: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
37174: LD_INT 0
37176: PPUSH
37177: PPUSH
37178: PPUSH
// if not hack in hackTanks or not vehicles then
37179: LD_VAR 0 1
37183: PUSH
37184: LD_EXP 123
37188: IN
37189: NOT
37190: PUSH
37191: LD_VAR 0 2
37195: NOT
37196: OR
37197: IFFALSE 37201
// exit ;
37199: GO 37476
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
37201: LD_ADDR_VAR 0 2
37205: PUSH
37206: LD_VAR 0 1
37210: PPUSH
37211: LD_VAR 0 2
37215: PPUSH
37216: LD_INT 1
37218: PPUSH
37219: LD_INT 1
37221: PPUSH
37222: CALL 45261 0 4
37226: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
37227: LD_ADDR_VAR 0 5
37231: PUSH
37232: LD_EXP 123
37236: PPUSH
37237: LD_VAR 0 1
37241: PPUSH
37242: CALL 44611 0 2
37246: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
37247: LD_EXP 124
37251: PUSH
37252: LD_VAR 0 5
37256: ARRAY
37257: PUSH
37258: LD_EXP 125
37262: LESS
37263: IFFALSE 37452
// begin for i := 1 to vehicles do
37265: LD_ADDR_VAR 0 4
37269: PUSH
37270: DOUBLE
37271: LD_INT 1
37273: DEC
37274: ST_TO_ADDR
37275: LD_VAR 0 2
37279: PUSH
37280: FOR_TO
37281: IFFALSE 37450
// begin if hackTanksCaptured [ index ] = hackLimit then
37283: LD_EXP 124
37287: PUSH
37288: LD_VAR 0 5
37292: ARRAY
37293: PUSH
37294: LD_EXP 125
37298: EQUAL
37299: IFFALSE 37303
// break ;
37301: GO 37450
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
37303: LD_ADDR_EXP 127
37307: PUSH
37308: LD_EXP 127
37312: PPUSH
37313: LD_VAR 0 5
37317: PPUSH
37318: LD_EXP 127
37322: PUSH
37323: LD_VAR 0 5
37327: ARRAY
37328: PUSH
37329: LD_INT 1
37331: PLUS
37332: PPUSH
37333: CALL_OW 1
37337: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
37338: LD_ADDR_EXP 124
37342: PUSH
37343: LD_EXP 124
37347: PPUSH
37348: LD_VAR 0 5
37352: PUSH
37353: LD_EXP 124
37357: PUSH
37358: LD_VAR 0 5
37362: ARRAY
37363: PUSH
37364: LD_INT 1
37366: PLUS
37367: PUSH
37368: EMPTY
37369: LIST
37370: LIST
37371: PPUSH
37372: LD_VAR 0 2
37376: PUSH
37377: LD_VAR 0 4
37381: ARRAY
37382: PUSH
37383: LD_VAR 0 2
37387: PUSH
37388: LD_VAR 0 4
37392: ARRAY
37393: PPUSH
37394: CALL_OW 255
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: PPUSH
37403: CALL 44826 0 3
37407: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
37408: LD_VAR 0 2
37412: PUSH
37413: LD_VAR 0 4
37417: ARRAY
37418: PPUSH
37419: LD_VAR 0 1
37423: PPUSH
37424: CALL_OW 255
37428: PPUSH
37429: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
37433: LD_VAR 0 2
37437: PUSH
37438: LD_VAR 0 4
37442: ARRAY
37443: PPUSH
37444: CALL_OW 141
// end ;
37448: GO 37280
37450: POP
37451: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37452: LD_VAR 0 1
37456: PPUSH
37457: LD_EXP 124
37461: PUSH
37462: LD_VAR 0 5
37466: ARRAY
37467: PUSH
37468: LD_INT 0
37470: PLUS
37471: PPUSH
37472: CALL_OW 505
// end ;
37476: LD_VAR 0 3
37480: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
37481: LD_INT 0
37483: PPUSH
37484: PPUSH
37485: PPUSH
37486: PPUSH
// if not hack in hackTanks then
37487: LD_VAR 0 1
37491: PUSH
37492: LD_EXP 123
37496: IN
37497: NOT
37498: IFFALSE 37502
// exit ;
37500: GO 37742
// index := GetElementIndex ( hackTanks , hack ) ;
37502: LD_ADDR_VAR 0 4
37506: PUSH
37507: LD_EXP 123
37511: PPUSH
37512: LD_VAR 0 1
37516: PPUSH
37517: CALL 44611 0 2
37521: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
37522: LD_ADDR_VAR 0 3
37526: PUSH
37527: DOUBLE
37528: LD_EXP 124
37532: PUSH
37533: LD_VAR 0 4
37537: ARRAY
37538: INC
37539: ST_TO_ADDR
37540: LD_INT 1
37542: PUSH
37543: FOR_DOWNTO
37544: IFFALSE 37716
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
37546: LD_ADDR_VAR 0 5
37550: PUSH
37551: LD_EXP 124
37555: PUSH
37556: LD_VAR 0 4
37560: ARRAY
37561: PUSH
37562: LD_VAR 0 3
37566: ARRAY
37567: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
37568: LD_VAR 0 5
37572: PUSH
37573: LD_INT 1
37575: ARRAY
37576: PPUSH
37577: CALL_OW 302
37581: NOT
37582: PUSH
37583: LD_VAR 0 5
37587: PUSH
37588: LD_INT 1
37590: ARRAY
37591: PPUSH
37592: CALL_OW 255
37596: PUSH
37597: LD_VAR 0 1
37601: PPUSH
37602: CALL_OW 255
37606: NONEQUAL
37607: OR
37608: IFFALSE 37714
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
37610: LD_VAR 0 5
37614: PUSH
37615: LD_INT 1
37617: ARRAY
37618: PPUSH
37619: CALL_OW 305
37623: PUSH
37624: LD_VAR 0 5
37628: PUSH
37629: LD_INT 1
37631: ARRAY
37632: PPUSH
37633: CALL_OW 255
37637: PUSH
37638: LD_VAR 0 1
37642: PPUSH
37643: CALL_OW 255
37647: EQUAL
37648: AND
37649: IFFALSE 37673
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
37651: LD_VAR 0 5
37655: PUSH
37656: LD_INT 1
37658: ARRAY
37659: PPUSH
37660: LD_VAR 0 5
37664: PUSH
37665: LD_INT 2
37667: ARRAY
37668: PPUSH
37669: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
37673: LD_ADDR_EXP 124
37677: PUSH
37678: LD_EXP 124
37682: PPUSH
37683: LD_VAR 0 4
37687: PPUSH
37688: LD_EXP 124
37692: PUSH
37693: LD_VAR 0 4
37697: ARRAY
37698: PPUSH
37699: LD_VAR 0 3
37703: PPUSH
37704: CALL_OW 3
37708: PPUSH
37709: CALL_OW 1
37713: ST_TO_ADDR
// end ; end ;
37714: GO 37543
37716: POP
37717: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37718: LD_VAR 0 1
37722: PPUSH
37723: LD_EXP 124
37727: PUSH
37728: LD_VAR 0 4
37732: ARRAY
37733: PUSH
37734: LD_INT 0
37736: PLUS
37737: PPUSH
37738: CALL_OW 505
// end ;
37742: LD_VAR 0 2
37746: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
37747: LD_INT 0
37749: PPUSH
37750: PPUSH
37751: PPUSH
37752: PPUSH
// if not hack in hackTanks then
37753: LD_VAR 0 1
37757: PUSH
37758: LD_EXP 123
37762: IN
37763: NOT
37764: IFFALSE 37768
// exit ;
37766: GO 37853
// index := GetElementIndex ( hackTanks , hack ) ;
37768: LD_ADDR_VAR 0 5
37772: PUSH
37773: LD_EXP 123
37777: PPUSH
37778: LD_VAR 0 1
37782: PPUSH
37783: CALL 44611 0 2
37787: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
37788: LD_ADDR_VAR 0 4
37792: PUSH
37793: DOUBLE
37794: LD_INT 1
37796: DEC
37797: ST_TO_ADDR
37798: LD_EXP 124
37802: PUSH
37803: LD_VAR 0 5
37807: ARRAY
37808: PUSH
37809: FOR_TO
37810: IFFALSE 37851
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
37812: LD_EXP 124
37816: PUSH
37817: LD_VAR 0 5
37821: ARRAY
37822: PUSH
37823: LD_VAR 0 4
37827: ARRAY
37828: PUSH
37829: LD_INT 1
37831: ARRAY
37832: PUSH
37833: LD_VAR 0 2
37837: EQUAL
37838: IFFALSE 37849
// KillUnit ( vehicle ) ;
37840: LD_VAR 0 2
37844: PPUSH
37845: CALL_OW 66
37849: GO 37809
37851: POP
37852: POP
// end ;
37853: LD_VAR 0 3
37857: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
37858: LD_EXP 128
37862: NOT
37863: IFFALSE 37898
37865: GO 37867
37867: DISABLE
// begin initMiner := true ;
37868: LD_ADDR_EXP 128
37872: PUSH
37873: LD_INT 1
37875: ST_TO_ADDR
// minersList := [ ] ;
37876: LD_ADDR_EXP 129
37880: PUSH
37881: EMPTY
37882: ST_TO_ADDR
// minerMinesList := [ ] ;
37883: LD_ADDR_EXP 130
37887: PUSH
37888: EMPTY
37889: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
37890: LD_ADDR_EXP 131
37894: PUSH
37895: LD_INT 5
37897: ST_TO_ADDR
// end ;
37898: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
37899: LD_EXP 128
37903: PUSH
37904: LD_INT 34
37906: PUSH
37907: LD_INT 81
37909: PUSH
37910: EMPTY
37911: LIST
37912: LIST
37913: PPUSH
37914: CALL_OW 69
37918: AND
37919: IFFALSE 38380
37921: GO 37923
37923: DISABLE
37924: LD_INT 0
37926: PPUSH
37927: PPUSH
37928: PPUSH
37929: PPUSH
// begin enable ;
37930: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
37931: LD_ADDR_VAR 0 1
37935: PUSH
37936: LD_INT 34
37938: PUSH
37939: LD_INT 81
37941: PUSH
37942: EMPTY
37943: LIST
37944: LIST
37945: PPUSH
37946: CALL_OW 69
37950: PUSH
37951: FOR_IN
37952: IFFALSE 38024
// begin if not i in minersList then
37954: LD_VAR 0 1
37958: PUSH
37959: LD_EXP 129
37963: IN
37964: NOT
37965: IFFALSE 38022
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
37967: LD_ADDR_EXP 129
37971: PUSH
37972: LD_EXP 129
37976: PPUSH
37977: LD_EXP 129
37981: PUSH
37982: LD_INT 1
37984: PLUS
37985: PPUSH
37986: LD_VAR 0 1
37990: PPUSH
37991: CALL_OW 1
37995: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
37996: LD_ADDR_EXP 130
38000: PUSH
38001: LD_EXP 130
38005: PPUSH
38006: LD_EXP 130
38010: PUSH
38011: LD_INT 1
38013: PLUS
38014: PPUSH
38015: EMPTY
38016: PPUSH
38017: CALL_OW 1
38021: ST_TO_ADDR
// end end ;
38022: GO 37951
38024: POP
38025: POP
// for i := minerMinesList downto 1 do
38026: LD_ADDR_VAR 0 1
38030: PUSH
38031: DOUBLE
38032: LD_EXP 130
38036: INC
38037: ST_TO_ADDR
38038: LD_INT 1
38040: PUSH
38041: FOR_DOWNTO
38042: IFFALSE 38378
// begin if IsLive ( minersList [ i ] ) then
38044: LD_EXP 129
38048: PUSH
38049: LD_VAR 0 1
38053: ARRAY
38054: PPUSH
38055: CALL_OW 300
38059: IFFALSE 38087
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
38061: LD_EXP 129
38065: PUSH
38066: LD_VAR 0 1
38070: ARRAY
38071: PPUSH
38072: LD_EXP 130
38076: PUSH
38077: LD_VAR 0 1
38081: ARRAY
38082: PPUSH
38083: CALL_OW 505
// if not minerMinesList [ i ] then
38087: LD_EXP 130
38091: PUSH
38092: LD_VAR 0 1
38096: ARRAY
38097: NOT
38098: IFFALSE 38102
// continue ;
38100: GO 38041
// for j := minerMinesList [ i ] downto 1 do
38102: LD_ADDR_VAR 0 2
38106: PUSH
38107: DOUBLE
38108: LD_EXP 130
38112: PUSH
38113: LD_VAR 0 1
38117: ARRAY
38118: INC
38119: ST_TO_ADDR
38120: LD_INT 1
38122: PUSH
38123: FOR_DOWNTO
38124: IFFALSE 38374
// begin side := GetSide ( minersList [ i ] ) ;
38126: LD_ADDR_VAR 0 3
38130: PUSH
38131: LD_EXP 129
38135: PUSH
38136: LD_VAR 0 1
38140: ARRAY
38141: PPUSH
38142: CALL_OW 255
38146: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
38147: LD_ADDR_VAR 0 4
38151: PUSH
38152: LD_EXP 130
38156: PUSH
38157: LD_VAR 0 1
38161: ARRAY
38162: PUSH
38163: LD_VAR 0 2
38167: ARRAY
38168: PUSH
38169: LD_INT 1
38171: ARRAY
38172: PPUSH
38173: LD_EXP 130
38177: PUSH
38178: LD_VAR 0 1
38182: ARRAY
38183: PUSH
38184: LD_VAR 0 2
38188: ARRAY
38189: PUSH
38190: LD_INT 2
38192: ARRAY
38193: PPUSH
38194: CALL_OW 428
38198: ST_TO_ADDR
// if not tmp then
38199: LD_VAR 0 4
38203: NOT
38204: IFFALSE 38208
// continue ;
38206: GO 38123
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
38208: LD_VAR 0 4
38212: PUSH
38213: LD_INT 81
38215: PUSH
38216: LD_VAR 0 3
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: PPUSH
38225: CALL_OW 69
38229: IN
38230: PUSH
38231: LD_EXP 130
38235: PUSH
38236: LD_VAR 0 1
38240: ARRAY
38241: PUSH
38242: LD_VAR 0 2
38246: ARRAY
38247: PUSH
38248: LD_INT 1
38250: ARRAY
38251: PPUSH
38252: LD_EXP 130
38256: PUSH
38257: LD_VAR 0 1
38261: ARRAY
38262: PUSH
38263: LD_VAR 0 2
38267: ARRAY
38268: PUSH
38269: LD_INT 2
38271: ARRAY
38272: PPUSH
38273: CALL_OW 458
38277: AND
38278: IFFALSE 38372
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
38280: LD_EXP 130
38284: PUSH
38285: LD_VAR 0 1
38289: ARRAY
38290: PUSH
38291: LD_VAR 0 2
38295: ARRAY
38296: PUSH
38297: LD_INT 1
38299: ARRAY
38300: PPUSH
38301: LD_EXP 130
38305: PUSH
38306: LD_VAR 0 1
38310: ARRAY
38311: PUSH
38312: LD_VAR 0 2
38316: ARRAY
38317: PUSH
38318: LD_INT 2
38320: ARRAY
38321: PPUSH
38322: LD_VAR 0 3
38326: PPUSH
38327: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
38331: LD_ADDR_EXP 130
38335: PUSH
38336: LD_EXP 130
38340: PPUSH
38341: LD_VAR 0 1
38345: PPUSH
38346: LD_EXP 130
38350: PUSH
38351: LD_VAR 0 1
38355: ARRAY
38356: PPUSH
38357: LD_VAR 0 2
38361: PPUSH
38362: CALL_OW 3
38366: PPUSH
38367: CALL_OW 1
38371: ST_TO_ADDR
// end ; end ;
38372: GO 38123
38374: POP
38375: POP
// end ;
38376: GO 38041
38378: POP
38379: POP
// end ;
38380: PPOPN 4
38382: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
38383: LD_INT 0
38385: PPUSH
38386: PPUSH
// result := false ;
38387: LD_ADDR_VAR 0 4
38391: PUSH
38392: LD_INT 0
38394: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
38395: LD_VAR 0 1
38399: PPUSH
38400: CALL_OW 264
38404: PUSH
38405: LD_INT 81
38407: EQUAL
38408: NOT
38409: IFFALSE 38413
// exit ;
38411: GO 38653
// index := GetElementIndex ( minersList , unit ) ;
38413: LD_ADDR_VAR 0 5
38417: PUSH
38418: LD_EXP 129
38422: PPUSH
38423: LD_VAR 0 1
38427: PPUSH
38428: CALL 44611 0 2
38432: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
38433: LD_EXP 130
38437: PUSH
38438: LD_VAR 0 5
38442: ARRAY
38443: PUSH
38444: LD_EXP 131
38448: GREATEREQUAL
38449: IFFALSE 38453
// exit ;
38451: GO 38653
// ComMoveXY ( unit , x , y ) ;
38453: LD_VAR 0 1
38457: PPUSH
38458: LD_VAR 0 2
38462: PPUSH
38463: LD_VAR 0 3
38467: PPUSH
38468: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38472: LD_INT 35
38474: PPUSH
38475: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
38479: LD_VAR 0 1
38483: PPUSH
38484: LD_VAR 0 2
38488: PPUSH
38489: LD_VAR 0 3
38493: PPUSH
38494: CALL 75995 0 3
38498: NOT
38499: PUSH
38500: LD_VAR 0 1
38504: PPUSH
38505: CALL_OW 314
38509: AND
38510: IFFALSE 38514
// exit ;
38512: GO 38653
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
38514: LD_VAR 0 2
38518: PPUSH
38519: LD_VAR 0 3
38523: PPUSH
38524: CALL_OW 428
38528: PUSH
38529: LD_VAR 0 1
38533: EQUAL
38534: PUSH
38535: LD_VAR 0 1
38539: PPUSH
38540: CALL_OW 314
38544: NOT
38545: AND
38546: IFFALSE 38472
// PlaySoundXY ( x , y , PlantMine ) ;
38548: LD_VAR 0 2
38552: PPUSH
38553: LD_VAR 0 3
38557: PPUSH
38558: LD_STRING PlantMine
38560: PPUSH
38561: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
38565: LD_VAR 0 2
38569: PPUSH
38570: LD_VAR 0 3
38574: PPUSH
38575: LD_VAR 0 1
38579: PPUSH
38580: CALL_OW 255
38584: PPUSH
38585: LD_INT 0
38587: PPUSH
38588: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
38592: LD_ADDR_EXP 130
38596: PUSH
38597: LD_EXP 130
38601: PPUSH
38602: LD_VAR 0 5
38606: PUSH
38607: LD_EXP 130
38611: PUSH
38612: LD_VAR 0 5
38616: ARRAY
38617: PUSH
38618: LD_INT 1
38620: PLUS
38621: PUSH
38622: EMPTY
38623: LIST
38624: LIST
38625: PPUSH
38626: LD_VAR 0 2
38630: PUSH
38631: LD_VAR 0 3
38635: PUSH
38636: EMPTY
38637: LIST
38638: LIST
38639: PPUSH
38640: CALL 44826 0 3
38644: ST_TO_ADDR
// result := true ;
38645: LD_ADDR_VAR 0 4
38649: PUSH
38650: LD_INT 1
38652: ST_TO_ADDR
// end ;
38653: LD_VAR 0 4
38657: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
38658: LD_INT 0
38660: PPUSH
38661: PPUSH
38662: PPUSH
// if not unit in minersList then
38663: LD_VAR 0 1
38667: PUSH
38668: LD_EXP 129
38672: IN
38673: NOT
38674: IFFALSE 38678
// exit ;
38676: GO 39070
// index := GetElementIndex ( minersList , unit ) ;
38678: LD_ADDR_VAR 0 6
38682: PUSH
38683: LD_EXP 129
38687: PPUSH
38688: LD_VAR 0 1
38692: PPUSH
38693: CALL 44611 0 2
38697: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
38698: LD_ADDR_VAR 0 5
38702: PUSH
38703: DOUBLE
38704: LD_EXP 130
38708: PUSH
38709: LD_VAR 0 6
38713: ARRAY
38714: INC
38715: ST_TO_ADDR
38716: LD_INT 1
38718: PUSH
38719: FOR_DOWNTO
38720: IFFALSE 38881
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
38722: LD_EXP 130
38726: PUSH
38727: LD_VAR 0 6
38731: ARRAY
38732: PUSH
38733: LD_VAR 0 5
38737: ARRAY
38738: PUSH
38739: LD_INT 1
38741: ARRAY
38742: PUSH
38743: LD_VAR 0 2
38747: EQUAL
38748: PUSH
38749: LD_EXP 130
38753: PUSH
38754: LD_VAR 0 6
38758: ARRAY
38759: PUSH
38760: LD_VAR 0 5
38764: ARRAY
38765: PUSH
38766: LD_INT 2
38768: ARRAY
38769: PUSH
38770: LD_VAR 0 3
38774: EQUAL
38775: AND
38776: IFFALSE 38879
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38778: LD_EXP 130
38782: PUSH
38783: LD_VAR 0 6
38787: ARRAY
38788: PUSH
38789: LD_VAR 0 5
38793: ARRAY
38794: PUSH
38795: LD_INT 1
38797: ARRAY
38798: PPUSH
38799: LD_EXP 130
38803: PUSH
38804: LD_VAR 0 6
38808: ARRAY
38809: PUSH
38810: LD_VAR 0 5
38814: ARRAY
38815: PUSH
38816: LD_INT 2
38818: ARRAY
38819: PPUSH
38820: LD_VAR 0 1
38824: PPUSH
38825: CALL_OW 255
38829: PPUSH
38830: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38834: LD_ADDR_EXP 130
38838: PUSH
38839: LD_EXP 130
38843: PPUSH
38844: LD_VAR 0 6
38848: PPUSH
38849: LD_EXP 130
38853: PUSH
38854: LD_VAR 0 6
38858: ARRAY
38859: PPUSH
38860: LD_VAR 0 5
38864: PPUSH
38865: CALL_OW 3
38869: PPUSH
38870: CALL_OW 1
38874: ST_TO_ADDR
// exit ;
38875: POP
38876: POP
38877: GO 39070
// end ; end ;
38879: GO 38719
38881: POP
38882: POP
// for i := minerMinesList [ index ] downto 1 do
38883: LD_ADDR_VAR 0 5
38887: PUSH
38888: DOUBLE
38889: LD_EXP 130
38893: PUSH
38894: LD_VAR 0 6
38898: ARRAY
38899: INC
38900: ST_TO_ADDR
38901: LD_INT 1
38903: PUSH
38904: FOR_DOWNTO
38905: IFFALSE 39068
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
38907: LD_EXP 130
38911: PUSH
38912: LD_VAR 0 6
38916: ARRAY
38917: PUSH
38918: LD_VAR 0 5
38922: ARRAY
38923: PUSH
38924: LD_INT 1
38926: ARRAY
38927: PPUSH
38928: LD_EXP 130
38932: PUSH
38933: LD_VAR 0 6
38937: ARRAY
38938: PUSH
38939: LD_VAR 0 5
38943: ARRAY
38944: PUSH
38945: LD_INT 2
38947: ARRAY
38948: PPUSH
38949: LD_VAR 0 2
38953: PPUSH
38954: LD_VAR 0 3
38958: PPUSH
38959: CALL_OW 298
38963: PUSH
38964: LD_INT 6
38966: LESS
38967: IFFALSE 39066
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38969: LD_EXP 130
38973: PUSH
38974: LD_VAR 0 6
38978: ARRAY
38979: PUSH
38980: LD_VAR 0 5
38984: ARRAY
38985: PUSH
38986: LD_INT 1
38988: ARRAY
38989: PPUSH
38990: LD_EXP 130
38994: PUSH
38995: LD_VAR 0 6
38999: ARRAY
39000: PUSH
39001: LD_VAR 0 5
39005: ARRAY
39006: PUSH
39007: LD_INT 2
39009: ARRAY
39010: PPUSH
39011: LD_VAR 0 1
39015: PPUSH
39016: CALL_OW 255
39020: PPUSH
39021: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39025: LD_ADDR_EXP 130
39029: PUSH
39030: LD_EXP 130
39034: PPUSH
39035: LD_VAR 0 6
39039: PPUSH
39040: LD_EXP 130
39044: PUSH
39045: LD_VAR 0 6
39049: ARRAY
39050: PPUSH
39051: LD_VAR 0 5
39055: PPUSH
39056: CALL_OW 3
39060: PPUSH
39061: CALL_OW 1
39065: ST_TO_ADDR
// end ; end ;
39066: GO 38904
39068: POP
39069: POP
// end ;
39070: LD_VAR 0 4
39074: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
39075: LD_INT 0
39077: PPUSH
39078: PPUSH
39079: PPUSH
39080: PPUSH
39081: PPUSH
39082: PPUSH
39083: PPUSH
39084: PPUSH
39085: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
39086: LD_VAR 0 1
39090: PPUSH
39091: CALL_OW 264
39095: PUSH
39096: LD_INT 81
39098: EQUAL
39099: NOT
39100: PUSH
39101: LD_VAR 0 1
39105: PUSH
39106: LD_EXP 129
39110: IN
39111: NOT
39112: OR
39113: IFFALSE 39117
// exit ;
39115: GO 39439
// index := GetElementIndex ( minersList , unit ) ;
39117: LD_ADDR_VAR 0 6
39121: PUSH
39122: LD_EXP 129
39126: PPUSH
39127: LD_VAR 0 1
39131: PPUSH
39132: CALL 44611 0 2
39136: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
39137: LD_ADDR_VAR 0 8
39141: PUSH
39142: LD_EXP 131
39146: PUSH
39147: LD_EXP 130
39151: PUSH
39152: LD_VAR 0 6
39156: ARRAY
39157: MINUS
39158: ST_TO_ADDR
// if not minesFreeAmount then
39159: LD_VAR 0 8
39163: NOT
39164: IFFALSE 39168
// exit ;
39166: GO 39439
// tmp := [ ] ;
39168: LD_ADDR_VAR 0 7
39172: PUSH
39173: EMPTY
39174: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
39175: LD_ADDR_VAR 0 5
39179: PUSH
39180: DOUBLE
39181: LD_INT 1
39183: DEC
39184: ST_TO_ADDR
39185: LD_VAR 0 8
39189: PUSH
39190: FOR_TO
39191: IFFALSE 39386
// begin _d := rand ( 0 , 5 ) ;
39193: LD_ADDR_VAR 0 11
39197: PUSH
39198: LD_INT 0
39200: PPUSH
39201: LD_INT 5
39203: PPUSH
39204: CALL_OW 12
39208: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
39209: LD_ADDR_VAR 0 12
39213: PUSH
39214: LD_INT 2
39216: PPUSH
39217: LD_INT 6
39219: PPUSH
39220: CALL_OW 12
39224: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
39225: LD_ADDR_VAR 0 9
39229: PUSH
39230: LD_VAR 0 2
39234: PPUSH
39235: LD_VAR 0 11
39239: PPUSH
39240: LD_VAR 0 12
39244: PPUSH
39245: CALL_OW 272
39249: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
39250: LD_ADDR_VAR 0 10
39254: PUSH
39255: LD_VAR 0 3
39259: PPUSH
39260: LD_VAR 0 11
39264: PPUSH
39265: LD_VAR 0 12
39269: PPUSH
39270: CALL_OW 273
39274: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
39275: LD_VAR 0 9
39279: PPUSH
39280: LD_VAR 0 10
39284: PPUSH
39285: CALL_OW 488
39289: PUSH
39290: LD_VAR 0 9
39294: PUSH
39295: LD_VAR 0 10
39299: PUSH
39300: EMPTY
39301: LIST
39302: LIST
39303: PUSH
39304: LD_VAR 0 7
39308: IN
39309: NOT
39310: AND
39311: PUSH
39312: LD_VAR 0 9
39316: PPUSH
39317: LD_VAR 0 10
39321: PPUSH
39322: CALL_OW 458
39326: NOT
39327: AND
39328: IFFALSE 39370
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
39330: LD_ADDR_VAR 0 7
39334: PUSH
39335: LD_VAR 0 7
39339: PPUSH
39340: LD_VAR 0 7
39344: PUSH
39345: LD_INT 1
39347: PLUS
39348: PPUSH
39349: LD_VAR 0 9
39353: PUSH
39354: LD_VAR 0 10
39358: PUSH
39359: EMPTY
39360: LIST
39361: LIST
39362: PPUSH
39363: CALL_OW 1
39367: ST_TO_ADDR
39368: GO 39384
// i := i - 1 ;
39370: LD_ADDR_VAR 0 5
39374: PUSH
39375: LD_VAR 0 5
39379: PUSH
39380: LD_INT 1
39382: MINUS
39383: ST_TO_ADDR
// end ;
39384: GO 39190
39386: POP
39387: POP
// for i in tmp do
39388: LD_ADDR_VAR 0 5
39392: PUSH
39393: LD_VAR 0 7
39397: PUSH
39398: FOR_IN
39399: IFFALSE 39437
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
39401: LD_VAR 0 1
39405: PPUSH
39406: LD_VAR 0 5
39410: PUSH
39411: LD_INT 1
39413: ARRAY
39414: PPUSH
39415: LD_VAR 0 5
39419: PUSH
39420: LD_INT 2
39422: ARRAY
39423: PPUSH
39424: CALL 38383 0 3
39428: NOT
39429: IFFALSE 39435
// exit ;
39431: POP
39432: POP
39433: GO 39439
39435: GO 39398
39437: POP
39438: POP
// end ;
39439: LD_VAR 0 4
39443: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
39444: LD_INT 0
39446: PPUSH
39447: PPUSH
39448: PPUSH
39449: PPUSH
39450: PPUSH
39451: PPUSH
39452: PPUSH
// if not GetClass ( unit ) = class_sniper then
39453: LD_VAR 0 1
39457: PPUSH
39458: CALL_OW 257
39462: PUSH
39463: LD_INT 5
39465: EQUAL
39466: NOT
39467: IFFALSE 39471
// exit ;
39469: GO 39859
// dist := 8 ;
39471: LD_ADDR_VAR 0 5
39475: PUSH
39476: LD_INT 8
39478: ST_TO_ADDR
// viewRange := 12 ;
39479: LD_ADDR_VAR 0 7
39483: PUSH
39484: LD_INT 12
39486: ST_TO_ADDR
// side := GetSide ( unit ) ;
39487: LD_ADDR_VAR 0 6
39491: PUSH
39492: LD_VAR 0 1
39496: PPUSH
39497: CALL_OW 255
39501: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
39502: LD_INT 61
39504: PPUSH
39505: LD_VAR 0 6
39509: PPUSH
39510: CALL_OW 321
39514: PUSH
39515: LD_INT 2
39517: EQUAL
39518: IFFALSE 39528
// viewRange := 16 ;
39520: LD_ADDR_VAR 0 7
39524: PUSH
39525: LD_INT 16
39527: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
39528: LD_VAR 0 1
39532: PPUSH
39533: LD_VAR 0 2
39537: PPUSH
39538: LD_VAR 0 3
39542: PPUSH
39543: CALL_OW 297
39547: PUSH
39548: LD_VAR 0 5
39552: GREATER
39553: IFFALSE 39632
// begin ComMoveXY ( unit , x , y ) ;
39555: LD_VAR 0 1
39559: PPUSH
39560: LD_VAR 0 2
39564: PPUSH
39565: LD_VAR 0 3
39569: PPUSH
39570: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39574: LD_INT 35
39576: PPUSH
39577: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
39581: LD_VAR 0 1
39585: PPUSH
39586: LD_VAR 0 2
39590: PPUSH
39591: LD_VAR 0 3
39595: PPUSH
39596: CALL 75995 0 3
39600: NOT
39601: IFFALSE 39605
// exit ;
39603: GO 39859
// until GetDistUnitXY ( unit , x , y ) < dist ;
39605: LD_VAR 0 1
39609: PPUSH
39610: LD_VAR 0 2
39614: PPUSH
39615: LD_VAR 0 3
39619: PPUSH
39620: CALL_OW 297
39624: PUSH
39625: LD_VAR 0 5
39629: LESS
39630: IFFALSE 39574
// end ; ComTurnXY ( unit , x , y ) ;
39632: LD_VAR 0 1
39636: PPUSH
39637: LD_VAR 0 2
39641: PPUSH
39642: LD_VAR 0 3
39646: PPUSH
39647: CALL_OW 118
// wait ( 5 ) ;
39651: LD_INT 5
39653: PPUSH
39654: CALL_OW 67
// _d := GetDir ( unit ) ;
39658: LD_ADDR_VAR 0 10
39662: PUSH
39663: LD_VAR 0 1
39667: PPUSH
39668: CALL_OW 254
39672: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
39673: LD_ADDR_VAR 0 8
39677: PUSH
39678: LD_VAR 0 1
39682: PPUSH
39683: CALL_OW 250
39687: PPUSH
39688: LD_VAR 0 10
39692: PPUSH
39693: LD_VAR 0 5
39697: PPUSH
39698: CALL_OW 272
39702: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
39703: LD_ADDR_VAR 0 9
39707: PUSH
39708: LD_VAR 0 1
39712: PPUSH
39713: CALL_OW 251
39717: PPUSH
39718: LD_VAR 0 10
39722: PPUSH
39723: LD_VAR 0 5
39727: PPUSH
39728: CALL_OW 273
39732: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39733: LD_VAR 0 8
39737: PPUSH
39738: LD_VAR 0 9
39742: PPUSH
39743: CALL_OW 488
39747: NOT
39748: IFFALSE 39752
// exit ;
39750: GO 39859
// ComAnimCustom ( unit , 1 ) ;
39752: LD_VAR 0 1
39756: PPUSH
39757: LD_INT 1
39759: PPUSH
39760: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
39764: LD_VAR 0 8
39768: PPUSH
39769: LD_VAR 0 9
39773: PPUSH
39774: LD_VAR 0 6
39778: PPUSH
39779: LD_VAR 0 7
39783: PPUSH
39784: CALL_OW 330
// repeat wait ( 1 ) ;
39788: LD_INT 1
39790: PPUSH
39791: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
39795: LD_VAR 0 1
39799: PPUSH
39800: CALL_OW 316
39804: PUSH
39805: LD_VAR 0 1
39809: PPUSH
39810: CALL_OW 314
39814: OR
39815: PUSH
39816: LD_VAR 0 1
39820: PPUSH
39821: CALL_OW 302
39825: NOT
39826: OR
39827: PUSH
39828: LD_VAR 0 1
39832: PPUSH
39833: CALL_OW 301
39837: OR
39838: IFFALSE 39788
// RemoveSeeing ( _x , _y , side ) ;
39840: LD_VAR 0 8
39844: PPUSH
39845: LD_VAR 0 9
39849: PPUSH
39850: LD_VAR 0 6
39854: PPUSH
39855: CALL_OW 331
// end ; end_of_file
39859: LD_VAR 0 4
39863: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
39864: LD_INT 0
39866: PPUSH
39867: PPUSH
// if exist_mode then
39868: LD_VAR 0 2
39872: IFFALSE 39897
// unit := CreateCharacter ( prefix & ident ) else
39874: LD_ADDR_VAR 0 5
39878: PUSH
39879: LD_VAR 0 3
39883: PUSH
39884: LD_VAR 0 1
39888: STR
39889: PPUSH
39890: CALL_OW 34
39894: ST_TO_ADDR
39895: GO 39912
// unit := NewCharacter ( ident ) ;
39897: LD_ADDR_VAR 0 5
39901: PUSH
39902: LD_VAR 0 1
39906: PPUSH
39907: CALL_OW 25
39911: ST_TO_ADDR
// result := unit ;
39912: LD_ADDR_VAR 0 4
39916: PUSH
39917: LD_VAR 0 5
39921: ST_TO_ADDR
// end ;
39922: LD_VAR 0 4
39926: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
39927: LD_INT 0
39929: PPUSH
39930: PPUSH
// if not side or not nation then
39931: LD_VAR 0 1
39935: NOT
39936: PUSH
39937: LD_VAR 0 2
39941: NOT
39942: OR
39943: IFFALSE 39947
// exit ;
39945: GO 40715
// case nation of nation_american :
39947: LD_VAR 0 2
39951: PUSH
39952: LD_INT 1
39954: DOUBLE
39955: EQUAL
39956: IFTRUE 39960
39958: GO 40174
39960: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
39961: LD_ADDR_VAR 0 4
39965: PUSH
39966: LD_INT 35
39968: PUSH
39969: LD_INT 45
39971: PUSH
39972: LD_INT 46
39974: PUSH
39975: LD_INT 47
39977: PUSH
39978: LD_INT 82
39980: PUSH
39981: LD_INT 83
39983: PUSH
39984: LD_INT 84
39986: PUSH
39987: LD_INT 85
39989: PUSH
39990: LD_INT 86
39992: PUSH
39993: LD_INT 1
39995: PUSH
39996: LD_INT 2
39998: PUSH
39999: LD_INT 6
40001: PUSH
40002: LD_INT 15
40004: PUSH
40005: LD_INT 16
40007: PUSH
40008: LD_INT 7
40010: PUSH
40011: LD_INT 12
40013: PUSH
40014: LD_INT 13
40016: PUSH
40017: LD_INT 10
40019: PUSH
40020: LD_INT 14
40022: PUSH
40023: LD_INT 20
40025: PUSH
40026: LD_INT 21
40028: PUSH
40029: LD_INT 22
40031: PUSH
40032: LD_INT 25
40034: PUSH
40035: LD_INT 32
40037: PUSH
40038: LD_INT 27
40040: PUSH
40041: LD_INT 36
40043: PUSH
40044: LD_INT 69
40046: PUSH
40047: LD_INT 39
40049: PUSH
40050: LD_INT 34
40052: PUSH
40053: LD_INT 40
40055: PUSH
40056: LD_INT 48
40058: PUSH
40059: LD_INT 49
40061: PUSH
40062: LD_INT 50
40064: PUSH
40065: LD_INT 51
40067: PUSH
40068: LD_INT 52
40070: PUSH
40071: LD_INT 53
40073: PUSH
40074: LD_INT 54
40076: PUSH
40077: LD_INT 55
40079: PUSH
40080: LD_INT 56
40082: PUSH
40083: LD_INT 57
40085: PUSH
40086: LD_INT 58
40088: PUSH
40089: LD_INT 59
40091: PUSH
40092: LD_INT 60
40094: PUSH
40095: LD_INT 61
40097: PUSH
40098: LD_INT 62
40100: PUSH
40101: LD_INT 80
40103: PUSH
40104: LD_INT 82
40106: PUSH
40107: LD_INT 83
40109: PUSH
40110: LD_INT 84
40112: PUSH
40113: LD_INT 85
40115: PUSH
40116: LD_INT 86
40118: PUSH
40119: EMPTY
40120: LIST
40121: LIST
40122: LIST
40123: LIST
40124: LIST
40125: LIST
40126: LIST
40127: LIST
40128: LIST
40129: LIST
40130: LIST
40131: LIST
40132: LIST
40133: LIST
40134: LIST
40135: LIST
40136: LIST
40137: LIST
40138: LIST
40139: LIST
40140: LIST
40141: LIST
40142: LIST
40143: LIST
40144: LIST
40145: LIST
40146: LIST
40147: LIST
40148: LIST
40149: LIST
40150: LIST
40151: LIST
40152: LIST
40153: LIST
40154: LIST
40155: LIST
40156: LIST
40157: LIST
40158: LIST
40159: LIST
40160: LIST
40161: LIST
40162: LIST
40163: LIST
40164: LIST
40165: LIST
40166: LIST
40167: LIST
40168: LIST
40169: LIST
40170: LIST
40171: ST_TO_ADDR
40172: GO 40639
40174: LD_INT 2
40176: DOUBLE
40177: EQUAL
40178: IFTRUE 40182
40180: GO 40408
40182: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
40183: LD_ADDR_VAR 0 4
40187: PUSH
40188: LD_INT 35
40190: PUSH
40191: LD_INT 45
40193: PUSH
40194: LD_INT 46
40196: PUSH
40197: LD_INT 47
40199: PUSH
40200: LD_INT 82
40202: PUSH
40203: LD_INT 83
40205: PUSH
40206: LD_INT 84
40208: PUSH
40209: LD_INT 85
40211: PUSH
40212: LD_INT 87
40214: PUSH
40215: LD_INT 70
40217: PUSH
40218: LD_INT 1
40220: PUSH
40221: LD_INT 11
40223: PUSH
40224: LD_INT 3
40226: PUSH
40227: LD_INT 4
40229: PUSH
40230: LD_INT 5
40232: PUSH
40233: LD_INT 6
40235: PUSH
40236: LD_INT 15
40238: PUSH
40239: LD_INT 18
40241: PUSH
40242: LD_INT 7
40244: PUSH
40245: LD_INT 17
40247: PUSH
40248: LD_INT 8
40250: PUSH
40251: LD_INT 20
40253: PUSH
40254: LD_INT 21
40256: PUSH
40257: LD_INT 22
40259: PUSH
40260: LD_INT 72
40262: PUSH
40263: LD_INT 26
40265: PUSH
40266: LD_INT 69
40268: PUSH
40269: LD_INT 39
40271: PUSH
40272: LD_INT 40
40274: PUSH
40275: LD_INT 41
40277: PUSH
40278: LD_INT 42
40280: PUSH
40281: LD_INT 43
40283: PUSH
40284: LD_INT 48
40286: PUSH
40287: LD_INT 49
40289: PUSH
40290: LD_INT 50
40292: PUSH
40293: LD_INT 51
40295: PUSH
40296: LD_INT 52
40298: PUSH
40299: LD_INT 53
40301: PUSH
40302: LD_INT 54
40304: PUSH
40305: LD_INT 55
40307: PUSH
40308: LD_INT 56
40310: PUSH
40311: LD_INT 60
40313: PUSH
40314: LD_INT 61
40316: PUSH
40317: LD_INT 62
40319: PUSH
40320: LD_INT 66
40322: PUSH
40323: LD_INT 67
40325: PUSH
40326: LD_INT 68
40328: PUSH
40329: LD_INT 81
40331: PUSH
40332: LD_INT 82
40334: PUSH
40335: LD_INT 83
40337: PUSH
40338: LD_INT 84
40340: PUSH
40341: LD_INT 85
40343: PUSH
40344: LD_INT 87
40346: PUSH
40347: LD_INT 88
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: LIST
40354: LIST
40355: LIST
40356: LIST
40357: LIST
40358: LIST
40359: LIST
40360: LIST
40361: LIST
40362: LIST
40363: LIST
40364: LIST
40365: LIST
40366: LIST
40367: LIST
40368: LIST
40369: LIST
40370: LIST
40371: LIST
40372: LIST
40373: LIST
40374: LIST
40375: LIST
40376: LIST
40377: LIST
40378: LIST
40379: LIST
40380: LIST
40381: LIST
40382: LIST
40383: LIST
40384: LIST
40385: LIST
40386: LIST
40387: LIST
40388: LIST
40389: LIST
40390: LIST
40391: LIST
40392: LIST
40393: LIST
40394: LIST
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: ST_TO_ADDR
40406: GO 40639
40408: LD_INT 3
40410: DOUBLE
40411: EQUAL
40412: IFTRUE 40416
40414: GO 40638
40416: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
40417: LD_ADDR_VAR 0 4
40421: PUSH
40422: LD_INT 46
40424: PUSH
40425: LD_INT 47
40427: PUSH
40428: LD_INT 1
40430: PUSH
40431: LD_INT 2
40433: PUSH
40434: LD_INT 82
40436: PUSH
40437: LD_INT 83
40439: PUSH
40440: LD_INT 84
40442: PUSH
40443: LD_INT 85
40445: PUSH
40446: LD_INT 86
40448: PUSH
40449: LD_INT 11
40451: PUSH
40452: LD_INT 9
40454: PUSH
40455: LD_INT 20
40457: PUSH
40458: LD_INT 19
40460: PUSH
40461: LD_INT 21
40463: PUSH
40464: LD_INT 24
40466: PUSH
40467: LD_INT 22
40469: PUSH
40470: LD_INT 25
40472: PUSH
40473: LD_INT 28
40475: PUSH
40476: LD_INT 29
40478: PUSH
40479: LD_INT 30
40481: PUSH
40482: LD_INT 31
40484: PUSH
40485: LD_INT 37
40487: PUSH
40488: LD_INT 38
40490: PUSH
40491: LD_INT 32
40493: PUSH
40494: LD_INT 27
40496: PUSH
40497: LD_INT 33
40499: PUSH
40500: LD_INT 69
40502: PUSH
40503: LD_INT 39
40505: PUSH
40506: LD_INT 34
40508: PUSH
40509: LD_INT 40
40511: PUSH
40512: LD_INT 71
40514: PUSH
40515: LD_INT 23
40517: PUSH
40518: LD_INT 44
40520: PUSH
40521: LD_INT 48
40523: PUSH
40524: LD_INT 49
40526: PUSH
40527: LD_INT 50
40529: PUSH
40530: LD_INT 51
40532: PUSH
40533: LD_INT 52
40535: PUSH
40536: LD_INT 53
40538: PUSH
40539: LD_INT 54
40541: PUSH
40542: LD_INT 55
40544: PUSH
40545: LD_INT 56
40547: PUSH
40548: LD_INT 57
40550: PUSH
40551: LD_INT 58
40553: PUSH
40554: LD_INT 59
40556: PUSH
40557: LD_INT 63
40559: PUSH
40560: LD_INT 64
40562: PUSH
40563: LD_INT 65
40565: PUSH
40566: LD_INT 82
40568: PUSH
40569: LD_INT 83
40571: PUSH
40572: LD_INT 84
40574: PUSH
40575: LD_INT 85
40577: PUSH
40578: LD_INT 86
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: LIST
40617: LIST
40618: LIST
40619: LIST
40620: LIST
40621: LIST
40622: LIST
40623: LIST
40624: LIST
40625: LIST
40626: LIST
40627: LIST
40628: LIST
40629: LIST
40630: LIST
40631: LIST
40632: LIST
40633: LIST
40634: LIST
40635: ST_TO_ADDR
40636: GO 40639
40638: POP
// if state > - 1 and state < 3 then
40639: LD_VAR 0 3
40643: PUSH
40644: LD_INT 1
40646: NEG
40647: GREATER
40648: PUSH
40649: LD_VAR 0 3
40653: PUSH
40654: LD_INT 3
40656: LESS
40657: AND
40658: IFFALSE 40715
// for i in result do
40660: LD_ADDR_VAR 0 5
40664: PUSH
40665: LD_VAR 0 4
40669: PUSH
40670: FOR_IN
40671: IFFALSE 40713
// if GetTech ( i , side ) <> state then
40673: LD_VAR 0 5
40677: PPUSH
40678: LD_VAR 0 1
40682: PPUSH
40683: CALL_OW 321
40687: PUSH
40688: LD_VAR 0 3
40692: NONEQUAL
40693: IFFALSE 40711
// result := result diff i ;
40695: LD_ADDR_VAR 0 4
40699: PUSH
40700: LD_VAR 0 4
40704: PUSH
40705: LD_VAR 0 5
40709: DIFF
40710: ST_TO_ADDR
40711: GO 40670
40713: POP
40714: POP
// end ;
40715: LD_VAR 0 4
40719: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
40720: LD_INT 0
40722: PPUSH
40723: PPUSH
40724: PPUSH
// result := true ;
40725: LD_ADDR_VAR 0 3
40729: PUSH
40730: LD_INT 1
40732: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
40733: LD_ADDR_VAR 0 5
40737: PUSH
40738: LD_VAR 0 2
40742: PPUSH
40743: CALL_OW 480
40747: ST_TO_ADDR
// if not tmp then
40748: LD_VAR 0 5
40752: NOT
40753: IFFALSE 40757
// exit ;
40755: GO 40806
// for i in tmp do
40757: LD_ADDR_VAR 0 4
40761: PUSH
40762: LD_VAR 0 5
40766: PUSH
40767: FOR_IN
40768: IFFALSE 40804
// if GetTech ( i , side ) <> state_researched then
40770: LD_VAR 0 4
40774: PPUSH
40775: LD_VAR 0 1
40779: PPUSH
40780: CALL_OW 321
40784: PUSH
40785: LD_INT 2
40787: NONEQUAL
40788: IFFALSE 40802
// begin result := false ;
40790: LD_ADDR_VAR 0 3
40794: PUSH
40795: LD_INT 0
40797: ST_TO_ADDR
// exit ;
40798: POP
40799: POP
40800: GO 40806
// end ;
40802: GO 40767
40804: POP
40805: POP
// end ;
40806: LD_VAR 0 3
40810: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
40811: LD_INT 0
40813: PPUSH
40814: PPUSH
40815: PPUSH
40816: PPUSH
40817: PPUSH
40818: PPUSH
40819: PPUSH
40820: PPUSH
40821: PPUSH
40822: PPUSH
40823: PPUSH
40824: PPUSH
40825: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
40826: LD_VAR 0 1
40830: NOT
40831: PUSH
40832: LD_VAR 0 1
40836: PPUSH
40837: CALL_OW 257
40841: PUSH
40842: LD_INT 9
40844: NONEQUAL
40845: OR
40846: IFFALSE 40850
// exit ;
40848: GO 41423
// side := GetSide ( unit ) ;
40850: LD_ADDR_VAR 0 9
40854: PUSH
40855: LD_VAR 0 1
40859: PPUSH
40860: CALL_OW 255
40864: ST_TO_ADDR
// tech_space := tech_spacanom ;
40865: LD_ADDR_VAR 0 12
40869: PUSH
40870: LD_INT 29
40872: ST_TO_ADDR
// tech_time := tech_taurad ;
40873: LD_ADDR_VAR 0 13
40877: PUSH
40878: LD_INT 28
40880: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
40881: LD_ADDR_VAR 0 11
40885: PUSH
40886: LD_VAR 0 1
40890: PPUSH
40891: CALL_OW 310
40895: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
40896: LD_VAR 0 11
40900: PPUSH
40901: CALL_OW 247
40905: PUSH
40906: LD_INT 2
40908: EQUAL
40909: IFFALSE 40913
// exit ;
40911: GO 41423
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40913: LD_ADDR_VAR 0 8
40917: PUSH
40918: LD_INT 81
40920: PUSH
40921: LD_VAR 0 9
40925: PUSH
40926: EMPTY
40927: LIST
40928: LIST
40929: PUSH
40930: LD_INT 3
40932: PUSH
40933: LD_INT 21
40935: PUSH
40936: LD_INT 3
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: PPUSH
40951: CALL_OW 69
40955: ST_TO_ADDR
// if not tmp then
40956: LD_VAR 0 8
40960: NOT
40961: IFFALSE 40965
// exit ;
40963: GO 41423
// if in_unit then
40965: LD_VAR 0 11
40969: IFFALSE 40993
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
40971: LD_ADDR_VAR 0 10
40975: PUSH
40976: LD_VAR 0 8
40980: PPUSH
40981: LD_VAR 0 11
40985: PPUSH
40986: CALL_OW 74
40990: ST_TO_ADDR
40991: GO 41013
// enemy := NearestUnitToUnit ( tmp , unit ) ;
40993: LD_ADDR_VAR 0 10
40997: PUSH
40998: LD_VAR 0 8
41002: PPUSH
41003: LD_VAR 0 1
41007: PPUSH
41008: CALL_OW 74
41012: ST_TO_ADDR
// if not enemy then
41013: LD_VAR 0 10
41017: NOT
41018: IFFALSE 41022
// exit ;
41020: GO 41423
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
41022: LD_VAR 0 11
41026: PUSH
41027: LD_VAR 0 11
41031: PPUSH
41032: LD_VAR 0 10
41036: PPUSH
41037: CALL_OW 296
41041: PUSH
41042: LD_INT 13
41044: GREATER
41045: AND
41046: PUSH
41047: LD_VAR 0 1
41051: PPUSH
41052: LD_VAR 0 10
41056: PPUSH
41057: CALL_OW 296
41061: PUSH
41062: LD_INT 12
41064: GREATER
41065: OR
41066: IFFALSE 41070
// exit ;
41068: GO 41423
// missile := [ 1 ] ;
41070: LD_ADDR_VAR 0 14
41074: PUSH
41075: LD_INT 1
41077: PUSH
41078: EMPTY
41079: LIST
41080: ST_TO_ADDR
// if Researched ( side , tech_space ) then
41081: LD_VAR 0 9
41085: PPUSH
41086: LD_VAR 0 12
41090: PPUSH
41091: CALL_OW 325
41095: IFFALSE 41124
// missile := Replace ( missile , missile + 1 , 2 ) ;
41097: LD_ADDR_VAR 0 14
41101: PUSH
41102: LD_VAR 0 14
41106: PPUSH
41107: LD_VAR 0 14
41111: PUSH
41112: LD_INT 1
41114: PLUS
41115: PPUSH
41116: LD_INT 2
41118: PPUSH
41119: CALL_OW 1
41123: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
41124: LD_VAR 0 9
41128: PPUSH
41129: LD_VAR 0 13
41133: PPUSH
41134: CALL_OW 325
41138: PUSH
41139: LD_VAR 0 10
41143: PPUSH
41144: CALL_OW 255
41148: PPUSH
41149: LD_VAR 0 13
41153: PPUSH
41154: CALL_OW 325
41158: NOT
41159: AND
41160: IFFALSE 41189
// missile := Replace ( missile , missile + 1 , 3 ) ;
41162: LD_ADDR_VAR 0 14
41166: PUSH
41167: LD_VAR 0 14
41171: PPUSH
41172: LD_VAR 0 14
41176: PUSH
41177: LD_INT 1
41179: PLUS
41180: PPUSH
41181: LD_INT 3
41183: PPUSH
41184: CALL_OW 1
41188: ST_TO_ADDR
// if missile < 2 then
41189: LD_VAR 0 14
41193: PUSH
41194: LD_INT 2
41196: LESS
41197: IFFALSE 41201
// exit ;
41199: GO 41423
// x := GetX ( enemy ) ;
41201: LD_ADDR_VAR 0 4
41205: PUSH
41206: LD_VAR 0 10
41210: PPUSH
41211: CALL_OW 250
41215: ST_TO_ADDR
// y := GetY ( enemy ) ;
41216: LD_ADDR_VAR 0 5
41220: PUSH
41221: LD_VAR 0 10
41225: PPUSH
41226: CALL_OW 251
41230: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
41231: LD_ADDR_VAR 0 6
41235: PUSH
41236: LD_VAR 0 4
41240: PUSH
41241: LD_INT 1
41243: NEG
41244: PPUSH
41245: LD_INT 1
41247: PPUSH
41248: CALL_OW 12
41252: PLUS
41253: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
41254: LD_ADDR_VAR 0 7
41258: PUSH
41259: LD_VAR 0 5
41263: PUSH
41264: LD_INT 1
41266: NEG
41267: PPUSH
41268: LD_INT 1
41270: PPUSH
41271: CALL_OW 12
41275: PLUS
41276: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41277: LD_VAR 0 6
41281: PPUSH
41282: LD_VAR 0 7
41286: PPUSH
41287: CALL_OW 488
41291: NOT
41292: IFFALSE 41314
// begin _x := x ;
41294: LD_ADDR_VAR 0 6
41298: PUSH
41299: LD_VAR 0 4
41303: ST_TO_ADDR
// _y := y ;
41304: LD_ADDR_VAR 0 7
41308: PUSH
41309: LD_VAR 0 5
41313: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
41314: LD_ADDR_VAR 0 3
41318: PUSH
41319: LD_INT 1
41321: PPUSH
41322: LD_VAR 0 14
41326: PPUSH
41327: CALL_OW 12
41331: ST_TO_ADDR
// case i of 1 :
41332: LD_VAR 0 3
41336: PUSH
41337: LD_INT 1
41339: DOUBLE
41340: EQUAL
41341: IFTRUE 41345
41343: GO 41362
41345: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
41346: LD_VAR 0 1
41350: PPUSH
41351: LD_VAR 0 10
41355: PPUSH
41356: CALL_OW 115
41360: GO 41423
41362: LD_INT 2
41364: DOUBLE
41365: EQUAL
41366: IFTRUE 41370
41368: GO 41392
41370: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
41371: LD_VAR 0 1
41375: PPUSH
41376: LD_VAR 0 6
41380: PPUSH
41381: LD_VAR 0 7
41385: PPUSH
41386: CALL_OW 153
41390: GO 41423
41392: LD_INT 3
41394: DOUBLE
41395: EQUAL
41396: IFTRUE 41400
41398: GO 41422
41400: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
41401: LD_VAR 0 1
41405: PPUSH
41406: LD_VAR 0 6
41410: PPUSH
41411: LD_VAR 0 7
41415: PPUSH
41416: CALL_OW 154
41420: GO 41423
41422: POP
// end ;
41423: LD_VAR 0 2
41427: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
41428: LD_INT 0
41430: PPUSH
41431: PPUSH
41432: PPUSH
41433: PPUSH
41434: PPUSH
41435: PPUSH
// if not unit or not building then
41436: LD_VAR 0 1
41440: NOT
41441: PUSH
41442: LD_VAR 0 2
41446: NOT
41447: OR
41448: IFFALSE 41452
// exit ;
41450: GO 41610
// x := GetX ( building ) ;
41452: LD_ADDR_VAR 0 5
41456: PUSH
41457: LD_VAR 0 2
41461: PPUSH
41462: CALL_OW 250
41466: ST_TO_ADDR
// y := GetY ( building ) ;
41467: LD_ADDR_VAR 0 6
41471: PUSH
41472: LD_VAR 0 2
41476: PPUSH
41477: CALL_OW 251
41481: ST_TO_ADDR
// for i = 0 to 5 do
41482: LD_ADDR_VAR 0 4
41486: PUSH
41487: DOUBLE
41488: LD_INT 0
41490: DEC
41491: ST_TO_ADDR
41492: LD_INT 5
41494: PUSH
41495: FOR_TO
41496: IFFALSE 41608
// begin _x := ShiftX ( x , i , 3 ) ;
41498: LD_ADDR_VAR 0 7
41502: PUSH
41503: LD_VAR 0 5
41507: PPUSH
41508: LD_VAR 0 4
41512: PPUSH
41513: LD_INT 3
41515: PPUSH
41516: CALL_OW 272
41520: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
41521: LD_ADDR_VAR 0 8
41525: PUSH
41526: LD_VAR 0 6
41530: PPUSH
41531: LD_VAR 0 4
41535: PPUSH
41536: LD_INT 3
41538: PPUSH
41539: CALL_OW 273
41543: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41544: LD_VAR 0 7
41548: PPUSH
41549: LD_VAR 0 8
41553: PPUSH
41554: CALL_OW 488
41558: NOT
41559: IFFALSE 41563
// continue ;
41561: GO 41495
// if HexInfo ( _x , _y ) = 0 then
41563: LD_VAR 0 7
41567: PPUSH
41568: LD_VAR 0 8
41572: PPUSH
41573: CALL_OW 428
41577: PUSH
41578: LD_INT 0
41580: EQUAL
41581: IFFALSE 41606
// begin ComMoveXY ( unit , _x , _y ) ;
41583: LD_VAR 0 1
41587: PPUSH
41588: LD_VAR 0 7
41592: PPUSH
41593: LD_VAR 0 8
41597: PPUSH
41598: CALL_OW 111
// exit ;
41602: POP
41603: POP
41604: GO 41610
// end ; end ;
41606: GO 41495
41608: POP
41609: POP
// end ;
41610: LD_VAR 0 3
41614: RET
// export function ScanBase ( side , base_area ) ; begin
41615: LD_INT 0
41617: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
41618: LD_ADDR_VAR 0 3
41622: PUSH
41623: LD_VAR 0 2
41627: PPUSH
41628: LD_INT 81
41630: PUSH
41631: LD_VAR 0 1
41635: PUSH
41636: EMPTY
41637: LIST
41638: LIST
41639: PPUSH
41640: CALL_OW 70
41644: ST_TO_ADDR
// end ;
41645: LD_VAR 0 3
41649: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
41650: LD_INT 0
41652: PPUSH
41653: PPUSH
41654: PPUSH
41655: PPUSH
// result := false ;
41656: LD_ADDR_VAR 0 2
41660: PUSH
41661: LD_INT 0
41663: ST_TO_ADDR
// side := GetSide ( unit ) ;
41664: LD_ADDR_VAR 0 3
41668: PUSH
41669: LD_VAR 0 1
41673: PPUSH
41674: CALL_OW 255
41678: ST_TO_ADDR
// nat := GetNation ( unit ) ;
41679: LD_ADDR_VAR 0 4
41683: PUSH
41684: LD_VAR 0 1
41688: PPUSH
41689: CALL_OW 248
41693: ST_TO_ADDR
// case nat of 1 :
41694: LD_VAR 0 4
41698: PUSH
41699: LD_INT 1
41701: DOUBLE
41702: EQUAL
41703: IFTRUE 41707
41705: GO 41718
41707: POP
// tech := tech_lassight ; 2 :
41708: LD_ADDR_VAR 0 5
41712: PUSH
41713: LD_INT 12
41715: ST_TO_ADDR
41716: GO 41757
41718: LD_INT 2
41720: DOUBLE
41721: EQUAL
41722: IFTRUE 41726
41724: GO 41737
41726: POP
// tech := tech_mortar ; 3 :
41727: LD_ADDR_VAR 0 5
41731: PUSH
41732: LD_INT 41
41734: ST_TO_ADDR
41735: GO 41757
41737: LD_INT 3
41739: DOUBLE
41740: EQUAL
41741: IFTRUE 41745
41743: GO 41756
41745: POP
// tech := tech_bazooka ; end ;
41746: LD_ADDR_VAR 0 5
41750: PUSH
41751: LD_INT 44
41753: ST_TO_ADDR
41754: GO 41757
41756: POP
// if Researched ( side , tech ) then
41757: LD_VAR 0 3
41761: PPUSH
41762: LD_VAR 0 5
41766: PPUSH
41767: CALL_OW 325
41771: IFFALSE 41798
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
41773: LD_ADDR_VAR 0 2
41777: PUSH
41778: LD_INT 5
41780: PUSH
41781: LD_INT 8
41783: PUSH
41784: LD_INT 9
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: LIST
41791: PUSH
41792: LD_VAR 0 4
41796: ARRAY
41797: ST_TO_ADDR
// end ;
41798: LD_VAR 0 2
41802: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
41803: LD_INT 0
41805: PPUSH
41806: PPUSH
41807: PPUSH
// if not mines then
41808: LD_VAR 0 2
41812: NOT
41813: IFFALSE 41817
// exit ;
41815: GO 41961
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41817: LD_ADDR_VAR 0 5
41821: PUSH
41822: LD_INT 81
41824: PUSH
41825: LD_VAR 0 1
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: PUSH
41834: LD_INT 3
41836: PUSH
41837: LD_INT 21
41839: PUSH
41840: LD_INT 3
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: PUSH
41851: EMPTY
41852: LIST
41853: LIST
41854: PPUSH
41855: CALL_OW 69
41859: ST_TO_ADDR
// for i in mines do
41860: LD_ADDR_VAR 0 4
41864: PUSH
41865: LD_VAR 0 2
41869: PUSH
41870: FOR_IN
41871: IFFALSE 41959
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
41873: LD_VAR 0 4
41877: PUSH
41878: LD_INT 1
41880: ARRAY
41881: PPUSH
41882: LD_VAR 0 4
41886: PUSH
41887: LD_INT 2
41889: ARRAY
41890: PPUSH
41891: CALL_OW 458
41895: NOT
41896: IFFALSE 41900
// continue ;
41898: GO 41870
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
41900: LD_VAR 0 4
41904: PUSH
41905: LD_INT 1
41907: ARRAY
41908: PPUSH
41909: LD_VAR 0 4
41913: PUSH
41914: LD_INT 2
41916: ARRAY
41917: PPUSH
41918: CALL_OW 428
41922: PUSH
41923: LD_VAR 0 5
41927: IN
41928: IFFALSE 41957
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
41930: LD_VAR 0 4
41934: PUSH
41935: LD_INT 1
41937: ARRAY
41938: PPUSH
41939: LD_VAR 0 4
41943: PUSH
41944: LD_INT 2
41946: ARRAY
41947: PPUSH
41948: LD_VAR 0 1
41952: PPUSH
41953: CALL_OW 456
// end ;
41957: GO 41870
41959: POP
41960: POP
// end ;
41961: LD_VAR 0 3
41965: RET
// export function Count ( array ) ; begin
41966: LD_INT 0
41968: PPUSH
// result := array + 0 ;
41969: LD_ADDR_VAR 0 2
41973: PUSH
41974: LD_VAR 0 1
41978: PUSH
41979: LD_INT 0
41981: PLUS
41982: ST_TO_ADDR
// end ;
41983: LD_VAR 0 2
41987: RET
// export function IsEmpty ( building ) ; begin
41988: LD_INT 0
41990: PPUSH
// if not building then
41991: LD_VAR 0 1
41995: NOT
41996: IFFALSE 42000
// exit ;
41998: GO 42043
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
42000: LD_ADDR_VAR 0 2
42004: PUSH
42005: LD_VAR 0 1
42009: PUSH
42010: LD_INT 22
42012: PUSH
42013: LD_VAR 0 1
42017: PPUSH
42018: CALL_OW 255
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PUSH
42027: LD_INT 58
42029: PUSH
42030: EMPTY
42031: LIST
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: PPUSH
42037: CALL_OW 69
42041: IN
42042: ST_TO_ADDR
// end ;
42043: LD_VAR 0 2
42047: RET
// export function IsNotFull ( building ) ; var places ; begin
42048: LD_INT 0
42050: PPUSH
42051: PPUSH
// if not building then
42052: LD_VAR 0 1
42056: NOT
42057: IFFALSE 42061
// exit ;
42059: GO 42089
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
42061: LD_ADDR_VAR 0 2
42065: PUSH
42066: LD_VAR 0 1
42070: PPUSH
42071: LD_INT 3
42073: PUSH
42074: LD_INT 62
42076: PUSH
42077: EMPTY
42078: LIST
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PPUSH
42084: CALL_OW 72
42088: ST_TO_ADDR
// end ;
42089: LD_VAR 0 2
42093: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
42094: LD_INT 0
42096: PPUSH
42097: PPUSH
42098: PPUSH
42099: PPUSH
// tmp := [ ] ;
42100: LD_ADDR_VAR 0 3
42104: PUSH
42105: EMPTY
42106: ST_TO_ADDR
// list := [ ] ;
42107: LD_ADDR_VAR 0 5
42111: PUSH
42112: EMPTY
42113: ST_TO_ADDR
// for i = 16 to 25 do
42114: LD_ADDR_VAR 0 4
42118: PUSH
42119: DOUBLE
42120: LD_INT 16
42122: DEC
42123: ST_TO_ADDR
42124: LD_INT 25
42126: PUSH
42127: FOR_TO
42128: IFFALSE 42201
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
42130: LD_ADDR_VAR 0 3
42134: PUSH
42135: LD_VAR 0 3
42139: PUSH
42140: LD_INT 22
42142: PUSH
42143: LD_VAR 0 1
42147: PPUSH
42148: CALL_OW 255
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: PUSH
42157: LD_INT 91
42159: PUSH
42160: LD_VAR 0 1
42164: PUSH
42165: LD_INT 6
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: LIST
42172: PUSH
42173: LD_INT 30
42175: PUSH
42176: LD_VAR 0 4
42180: PUSH
42181: EMPTY
42182: LIST
42183: LIST
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: LIST
42189: PUSH
42190: EMPTY
42191: LIST
42192: PPUSH
42193: CALL_OW 69
42197: ADD
42198: ST_TO_ADDR
42199: GO 42127
42201: POP
42202: POP
// for i = 1 to tmp do
42203: LD_ADDR_VAR 0 4
42207: PUSH
42208: DOUBLE
42209: LD_INT 1
42211: DEC
42212: ST_TO_ADDR
42213: LD_VAR 0 3
42217: PUSH
42218: FOR_TO
42219: IFFALSE 42307
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
42221: LD_ADDR_VAR 0 5
42225: PUSH
42226: LD_VAR 0 5
42230: PUSH
42231: LD_VAR 0 3
42235: PUSH
42236: LD_VAR 0 4
42240: ARRAY
42241: PPUSH
42242: CALL_OW 266
42246: PUSH
42247: LD_VAR 0 3
42251: PUSH
42252: LD_VAR 0 4
42256: ARRAY
42257: PPUSH
42258: CALL_OW 250
42262: PUSH
42263: LD_VAR 0 3
42267: PUSH
42268: LD_VAR 0 4
42272: ARRAY
42273: PPUSH
42274: CALL_OW 251
42278: PUSH
42279: LD_VAR 0 3
42283: PUSH
42284: LD_VAR 0 4
42288: ARRAY
42289: PPUSH
42290: CALL_OW 254
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: LIST
42299: LIST
42300: PUSH
42301: EMPTY
42302: LIST
42303: ADD
42304: ST_TO_ADDR
42305: GO 42218
42307: POP
42308: POP
// result := list ;
42309: LD_ADDR_VAR 0 2
42313: PUSH
42314: LD_VAR 0 5
42318: ST_TO_ADDR
// end ;
42319: LD_VAR 0 2
42323: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
42324: LD_INT 0
42326: PPUSH
42327: PPUSH
42328: PPUSH
42329: PPUSH
42330: PPUSH
42331: PPUSH
42332: PPUSH
// if not factory then
42333: LD_VAR 0 1
42337: NOT
42338: IFFALSE 42342
// exit ;
42340: GO 42935
// if control = control_apeman then
42342: LD_VAR 0 4
42346: PUSH
42347: LD_INT 5
42349: EQUAL
42350: IFFALSE 42459
// begin tmp := UnitsInside ( factory ) ;
42352: LD_ADDR_VAR 0 8
42356: PUSH
42357: LD_VAR 0 1
42361: PPUSH
42362: CALL_OW 313
42366: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
42367: LD_VAR 0 8
42371: PPUSH
42372: LD_INT 25
42374: PUSH
42375: LD_INT 12
42377: PUSH
42378: EMPTY
42379: LIST
42380: LIST
42381: PPUSH
42382: CALL_OW 72
42386: NOT
42387: IFFALSE 42397
// control := control_manual ;
42389: LD_ADDR_VAR 0 4
42393: PUSH
42394: LD_INT 1
42396: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
42397: LD_ADDR_VAR 0 8
42401: PUSH
42402: LD_VAR 0 1
42406: PPUSH
42407: CALL 42094 0 1
42411: ST_TO_ADDR
// if tmp then
42412: LD_VAR 0 8
42416: IFFALSE 42459
// begin for i in tmp do
42418: LD_ADDR_VAR 0 7
42422: PUSH
42423: LD_VAR 0 8
42427: PUSH
42428: FOR_IN
42429: IFFALSE 42457
// if i [ 1 ] = b_ext_radio then
42431: LD_VAR 0 7
42435: PUSH
42436: LD_INT 1
42438: ARRAY
42439: PUSH
42440: LD_INT 22
42442: EQUAL
42443: IFFALSE 42455
// begin control := control_remote ;
42445: LD_ADDR_VAR 0 4
42449: PUSH
42450: LD_INT 2
42452: ST_TO_ADDR
// break ;
42453: GO 42457
// end ;
42455: GO 42428
42457: POP
42458: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42459: LD_VAR 0 1
42463: PPUSH
42464: LD_VAR 0 2
42468: PPUSH
42469: LD_VAR 0 3
42473: PPUSH
42474: LD_VAR 0 4
42478: PPUSH
42479: LD_VAR 0 5
42483: PPUSH
42484: CALL_OW 448
42488: IFFALSE 42523
// begin result := [ chassis , engine , control , weapon ] ;
42490: LD_ADDR_VAR 0 6
42494: PUSH
42495: LD_VAR 0 2
42499: PUSH
42500: LD_VAR 0 3
42504: PUSH
42505: LD_VAR 0 4
42509: PUSH
42510: LD_VAR 0 5
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: LIST
42519: LIST
42520: ST_TO_ADDR
// exit ;
42521: GO 42935
// end ; _chassis := AvailableChassisList ( factory ) ;
42523: LD_ADDR_VAR 0 9
42527: PUSH
42528: LD_VAR 0 1
42532: PPUSH
42533: CALL_OW 475
42537: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
42538: LD_ADDR_VAR 0 11
42542: PUSH
42543: LD_VAR 0 1
42547: PPUSH
42548: CALL_OW 476
42552: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
42553: LD_ADDR_VAR 0 12
42557: PUSH
42558: LD_VAR 0 1
42562: PPUSH
42563: CALL_OW 477
42567: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
42568: LD_ADDR_VAR 0 10
42572: PUSH
42573: LD_VAR 0 1
42577: PPUSH
42578: CALL_OW 478
42582: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
42583: LD_VAR 0 9
42587: NOT
42588: PUSH
42589: LD_VAR 0 11
42593: NOT
42594: OR
42595: PUSH
42596: LD_VAR 0 12
42600: NOT
42601: OR
42602: PUSH
42603: LD_VAR 0 10
42607: NOT
42608: OR
42609: IFFALSE 42644
// begin result := [ chassis , engine , control , weapon ] ;
42611: LD_ADDR_VAR 0 6
42615: PUSH
42616: LD_VAR 0 2
42620: PUSH
42621: LD_VAR 0 3
42625: PUSH
42626: LD_VAR 0 4
42630: PUSH
42631: LD_VAR 0 5
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: LIST
42640: LIST
42641: ST_TO_ADDR
// exit ;
42642: GO 42935
// end ; if not chassis in _chassis then
42644: LD_VAR 0 2
42648: PUSH
42649: LD_VAR 0 9
42653: IN
42654: NOT
42655: IFFALSE 42681
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
42657: LD_ADDR_VAR 0 2
42661: PUSH
42662: LD_VAR 0 9
42666: PUSH
42667: LD_INT 1
42669: PPUSH
42670: LD_VAR 0 9
42674: PPUSH
42675: CALL_OW 12
42679: ARRAY
42680: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
42681: LD_VAR 0 2
42685: PPUSH
42686: LD_VAR 0 3
42690: PPUSH
42691: CALL 42940 0 2
42695: NOT
42696: IFFALSE 42755
// repeat engine := _engine [ 1 ] ;
42698: LD_ADDR_VAR 0 3
42702: PUSH
42703: LD_VAR 0 11
42707: PUSH
42708: LD_INT 1
42710: ARRAY
42711: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
42712: LD_ADDR_VAR 0 11
42716: PUSH
42717: LD_VAR 0 11
42721: PPUSH
42722: LD_INT 1
42724: PPUSH
42725: CALL_OW 3
42729: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
42730: LD_VAR 0 2
42734: PPUSH
42735: LD_VAR 0 3
42739: PPUSH
42740: CALL 42940 0 2
42744: PUSH
42745: LD_VAR 0 11
42749: PUSH
42750: EMPTY
42751: EQUAL
42752: OR
42753: IFFALSE 42698
// if not control in _control then
42755: LD_VAR 0 4
42759: PUSH
42760: LD_VAR 0 12
42764: IN
42765: NOT
42766: IFFALSE 42792
// control := _control [ rand ( 1 , _control ) ] ;
42768: LD_ADDR_VAR 0 4
42772: PUSH
42773: LD_VAR 0 12
42777: PUSH
42778: LD_INT 1
42780: PPUSH
42781: LD_VAR 0 12
42785: PPUSH
42786: CALL_OW 12
42790: ARRAY
42791: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
42792: LD_VAR 0 2
42796: PPUSH
42797: LD_VAR 0 5
42801: PPUSH
42802: CALL 43160 0 2
42806: NOT
42807: IFFALSE 42866
// repeat weapon := _weapon [ 1 ] ;
42809: LD_ADDR_VAR 0 5
42813: PUSH
42814: LD_VAR 0 10
42818: PUSH
42819: LD_INT 1
42821: ARRAY
42822: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
42823: LD_ADDR_VAR 0 10
42827: PUSH
42828: LD_VAR 0 10
42832: PPUSH
42833: LD_INT 1
42835: PPUSH
42836: CALL_OW 3
42840: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
42841: LD_VAR 0 2
42845: PPUSH
42846: LD_VAR 0 5
42850: PPUSH
42851: CALL 43160 0 2
42855: PUSH
42856: LD_VAR 0 10
42860: PUSH
42861: EMPTY
42862: EQUAL
42863: OR
42864: IFFALSE 42809
// result := [ ] ;
42866: LD_ADDR_VAR 0 6
42870: PUSH
42871: EMPTY
42872: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42873: LD_VAR 0 1
42877: PPUSH
42878: LD_VAR 0 2
42882: PPUSH
42883: LD_VAR 0 3
42887: PPUSH
42888: LD_VAR 0 4
42892: PPUSH
42893: LD_VAR 0 5
42897: PPUSH
42898: CALL_OW 448
42902: IFFALSE 42935
// result := [ chassis , engine , control , weapon ] ;
42904: LD_ADDR_VAR 0 6
42908: PUSH
42909: LD_VAR 0 2
42913: PUSH
42914: LD_VAR 0 3
42918: PUSH
42919: LD_VAR 0 4
42923: PUSH
42924: LD_VAR 0 5
42928: PUSH
42929: EMPTY
42930: LIST
42931: LIST
42932: LIST
42933: LIST
42934: ST_TO_ADDR
// end ;
42935: LD_VAR 0 6
42939: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
42940: LD_INT 0
42942: PPUSH
// if not chassis or not engine then
42943: LD_VAR 0 1
42947: NOT
42948: PUSH
42949: LD_VAR 0 2
42953: NOT
42954: OR
42955: IFFALSE 42959
// exit ;
42957: GO 43155
// case engine of engine_solar :
42959: LD_VAR 0 2
42963: PUSH
42964: LD_INT 2
42966: DOUBLE
42967: EQUAL
42968: IFTRUE 42972
42970: GO 43010
42972: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
42973: LD_ADDR_VAR 0 3
42977: PUSH
42978: LD_INT 11
42980: PUSH
42981: LD_INT 12
42983: PUSH
42984: LD_INT 13
42986: PUSH
42987: LD_INT 14
42989: PUSH
42990: LD_INT 1
42992: PUSH
42993: LD_INT 2
42995: PUSH
42996: LD_INT 3
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: LIST
43007: ST_TO_ADDR
43008: GO 43139
43010: LD_INT 1
43012: DOUBLE
43013: EQUAL
43014: IFTRUE 43018
43016: GO 43080
43018: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
43019: LD_ADDR_VAR 0 3
43023: PUSH
43024: LD_INT 11
43026: PUSH
43027: LD_INT 12
43029: PUSH
43030: LD_INT 13
43032: PUSH
43033: LD_INT 14
43035: PUSH
43036: LD_INT 1
43038: PUSH
43039: LD_INT 2
43041: PUSH
43042: LD_INT 3
43044: PUSH
43045: LD_INT 4
43047: PUSH
43048: LD_INT 5
43050: PUSH
43051: LD_INT 21
43053: PUSH
43054: LD_INT 23
43056: PUSH
43057: LD_INT 22
43059: PUSH
43060: LD_INT 24
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: LIST
43067: LIST
43068: LIST
43069: LIST
43070: LIST
43071: LIST
43072: LIST
43073: LIST
43074: LIST
43075: LIST
43076: LIST
43077: ST_TO_ADDR
43078: GO 43139
43080: LD_INT 3
43082: DOUBLE
43083: EQUAL
43084: IFTRUE 43088
43086: GO 43138
43088: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43089: LD_ADDR_VAR 0 3
43093: PUSH
43094: LD_INT 13
43096: PUSH
43097: LD_INT 14
43099: PUSH
43100: LD_INT 2
43102: PUSH
43103: LD_INT 3
43105: PUSH
43106: LD_INT 4
43108: PUSH
43109: LD_INT 5
43111: PUSH
43112: LD_INT 21
43114: PUSH
43115: LD_INT 22
43117: PUSH
43118: LD_INT 23
43120: PUSH
43121: LD_INT 24
43123: PUSH
43124: EMPTY
43125: LIST
43126: LIST
43127: LIST
43128: LIST
43129: LIST
43130: LIST
43131: LIST
43132: LIST
43133: LIST
43134: LIST
43135: ST_TO_ADDR
43136: GO 43139
43138: POP
// result := ( chassis in result ) ;
43139: LD_ADDR_VAR 0 3
43143: PUSH
43144: LD_VAR 0 1
43148: PUSH
43149: LD_VAR 0 3
43153: IN
43154: ST_TO_ADDR
// end ;
43155: LD_VAR 0 3
43159: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
43160: LD_INT 0
43162: PPUSH
// if not chassis or not weapon then
43163: LD_VAR 0 1
43167: NOT
43168: PUSH
43169: LD_VAR 0 2
43173: NOT
43174: OR
43175: IFFALSE 43179
// exit ;
43177: GO 44239
// case weapon of us_machine_gun :
43179: LD_VAR 0 2
43183: PUSH
43184: LD_INT 2
43186: DOUBLE
43187: EQUAL
43188: IFTRUE 43192
43190: GO 43222
43192: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
43193: LD_ADDR_VAR 0 3
43197: PUSH
43198: LD_INT 1
43200: PUSH
43201: LD_INT 2
43203: PUSH
43204: LD_INT 3
43206: PUSH
43207: LD_INT 4
43209: PUSH
43210: LD_INT 5
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: LIST
43217: LIST
43218: LIST
43219: ST_TO_ADDR
43220: GO 44223
43222: LD_INT 3
43224: DOUBLE
43225: EQUAL
43226: IFTRUE 43230
43228: GO 43260
43230: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
43231: LD_ADDR_VAR 0 3
43235: PUSH
43236: LD_INT 1
43238: PUSH
43239: LD_INT 2
43241: PUSH
43242: LD_INT 3
43244: PUSH
43245: LD_INT 4
43247: PUSH
43248: LD_INT 5
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: LIST
43255: LIST
43256: LIST
43257: ST_TO_ADDR
43258: GO 44223
43260: LD_INT 11
43262: DOUBLE
43263: EQUAL
43264: IFTRUE 43268
43266: GO 43298
43268: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
43269: LD_ADDR_VAR 0 3
43273: PUSH
43274: LD_INT 1
43276: PUSH
43277: LD_INT 2
43279: PUSH
43280: LD_INT 3
43282: PUSH
43283: LD_INT 4
43285: PUSH
43286: LD_INT 5
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: LIST
43293: LIST
43294: LIST
43295: ST_TO_ADDR
43296: GO 44223
43298: LD_INT 4
43300: DOUBLE
43301: EQUAL
43302: IFTRUE 43306
43304: GO 43332
43306: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
43307: LD_ADDR_VAR 0 3
43311: PUSH
43312: LD_INT 2
43314: PUSH
43315: LD_INT 3
43317: PUSH
43318: LD_INT 4
43320: PUSH
43321: LD_INT 5
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: LIST
43328: LIST
43329: ST_TO_ADDR
43330: GO 44223
43332: LD_INT 5
43334: DOUBLE
43335: EQUAL
43336: IFTRUE 43340
43338: GO 43366
43340: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
43341: LD_ADDR_VAR 0 3
43345: PUSH
43346: LD_INT 2
43348: PUSH
43349: LD_INT 3
43351: PUSH
43352: LD_INT 4
43354: PUSH
43355: LD_INT 5
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: LIST
43362: LIST
43363: ST_TO_ADDR
43364: GO 44223
43366: LD_INT 9
43368: DOUBLE
43369: EQUAL
43370: IFTRUE 43374
43372: GO 43400
43374: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
43375: LD_ADDR_VAR 0 3
43379: PUSH
43380: LD_INT 2
43382: PUSH
43383: LD_INT 3
43385: PUSH
43386: LD_INT 4
43388: PUSH
43389: LD_INT 5
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: LIST
43396: LIST
43397: ST_TO_ADDR
43398: GO 44223
43400: LD_INT 7
43402: DOUBLE
43403: EQUAL
43404: IFTRUE 43408
43406: GO 43434
43408: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
43409: LD_ADDR_VAR 0 3
43413: PUSH
43414: LD_INT 2
43416: PUSH
43417: LD_INT 3
43419: PUSH
43420: LD_INT 4
43422: PUSH
43423: LD_INT 5
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: LIST
43430: LIST
43431: ST_TO_ADDR
43432: GO 44223
43434: LD_INT 12
43436: DOUBLE
43437: EQUAL
43438: IFTRUE 43442
43440: GO 43468
43442: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
43443: LD_ADDR_VAR 0 3
43447: PUSH
43448: LD_INT 2
43450: PUSH
43451: LD_INT 3
43453: PUSH
43454: LD_INT 4
43456: PUSH
43457: LD_INT 5
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: ST_TO_ADDR
43466: GO 44223
43468: LD_INT 13
43470: DOUBLE
43471: EQUAL
43472: IFTRUE 43476
43474: GO 43502
43476: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
43477: LD_ADDR_VAR 0 3
43481: PUSH
43482: LD_INT 2
43484: PUSH
43485: LD_INT 3
43487: PUSH
43488: LD_INT 4
43490: PUSH
43491: LD_INT 5
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: LIST
43498: LIST
43499: ST_TO_ADDR
43500: GO 44223
43502: LD_INT 14
43504: DOUBLE
43505: EQUAL
43506: IFTRUE 43510
43508: GO 43528
43510: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
43511: LD_ADDR_VAR 0 3
43515: PUSH
43516: LD_INT 4
43518: PUSH
43519: LD_INT 5
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: ST_TO_ADDR
43526: GO 44223
43528: LD_INT 6
43530: DOUBLE
43531: EQUAL
43532: IFTRUE 43536
43534: GO 43554
43536: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
43537: LD_ADDR_VAR 0 3
43541: PUSH
43542: LD_INT 4
43544: PUSH
43545: LD_INT 5
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: ST_TO_ADDR
43552: GO 44223
43554: LD_INT 10
43556: DOUBLE
43557: EQUAL
43558: IFTRUE 43562
43560: GO 43580
43562: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
43563: LD_ADDR_VAR 0 3
43567: PUSH
43568: LD_INT 4
43570: PUSH
43571: LD_INT 5
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: ST_TO_ADDR
43578: GO 44223
43580: LD_INT 22
43582: DOUBLE
43583: EQUAL
43584: IFTRUE 43588
43586: GO 43614
43588: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
43589: LD_ADDR_VAR 0 3
43593: PUSH
43594: LD_INT 11
43596: PUSH
43597: LD_INT 12
43599: PUSH
43600: LD_INT 13
43602: PUSH
43603: LD_INT 14
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: LIST
43610: LIST
43611: ST_TO_ADDR
43612: GO 44223
43614: LD_INT 23
43616: DOUBLE
43617: EQUAL
43618: IFTRUE 43622
43620: GO 43648
43622: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
43623: LD_ADDR_VAR 0 3
43627: PUSH
43628: LD_INT 11
43630: PUSH
43631: LD_INT 12
43633: PUSH
43634: LD_INT 13
43636: PUSH
43637: LD_INT 14
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: LIST
43644: LIST
43645: ST_TO_ADDR
43646: GO 44223
43648: LD_INT 24
43650: DOUBLE
43651: EQUAL
43652: IFTRUE 43656
43654: GO 43682
43656: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
43657: LD_ADDR_VAR 0 3
43661: PUSH
43662: LD_INT 11
43664: PUSH
43665: LD_INT 12
43667: PUSH
43668: LD_INT 13
43670: PUSH
43671: LD_INT 14
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: LIST
43678: LIST
43679: ST_TO_ADDR
43680: GO 44223
43682: LD_INT 30
43684: DOUBLE
43685: EQUAL
43686: IFTRUE 43690
43688: GO 43716
43690: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
43691: LD_ADDR_VAR 0 3
43695: PUSH
43696: LD_INT 11
43698: PUSH
43699: LD_INT 12
43701: PUSH
43702: LD_INT 13
43704: PUSH
43705: LD_INT 14
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: LIST
43712: LIST
43713: ST_TO_ADDR
43714: GO 44223
43716: LD_INT 25
43718: DOUBLE
43719: EQUAL
43720: IFTRUE 43724
43722: GO 43742
43724: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
43725: LD_ADDR_VAR 0 3
43729: PUSH
43730: LD_INT 13
43732: PUSH
43733: LD_INT 14
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: ST_TO_ADDR
43740: GO 44223
43742: LD_INT 27
43744: DOUBLE
43745: EQUAL
43746: IFTRUE 43750
43748: GO 43768
43750: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
43751: LD_ADDR_VAR 0 3
43755: PUSH
43756: LD_INT 13
43758: PUSH
43759: LD_INT 14
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: ST_TO_ADDR
43766: GO 44223
43768: LD_INT 92
43770: DOUBLE
43771: EQUAL
43772: IFTRUE 43776
43774: GO 43802
43776: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
43777: LD_ADDR_VAR 0 3
43781: PUSH
43782: LD_INT 11
43784: PUSH
43785: LD_INT 12
43787: PUSH
43788: LD_INT 13
43790: PUSH
43791: LD_INT 14
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: LIST
43798: LIST
43799: ST_TO_ADDR
43800: GO 44223
43802: LD_INT 28
43804: DOUBLE
43805: EQUAL
43806: IFTRUE 43810
43808: GO 43828
43810: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
43811: LD_ADDR_VAR 0 3
43815: PUSH
43816: LD_INT 13
43818: PUSH
43819: LD_INT 14
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: ST_TO_ADDR
43826: GO 44223
43828: LD_INT 29
43830: DOUBLE
43831: EQUAL
43832: IFTRUE 43836
43834: GO 43854
43836: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
43837: LD_ADDR_VAR 0 3
43841: PUSH
43842: LD_INT 13
43844: PUSH
43845: LD_INT 14
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: ST_TO_ADDR
43852: GO 44223
43854: LD_INT 31
43856: DOUBLE
43857: EQUAL
43858: IFTRUE 43862
43860: GO 43880
43862: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43863: LD_ADDR_VAR 0 3
43867: PUSH
43868: LD_INT 13
43870: PUSH
43871: LD_INT 14
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: ST_TO_ADDR
43878: GO 44223
43880: LD_INT 26
43882: DOUBLE
43883: EQUAL
43884: IFTRUE 43888
43886: GO 43906
43888: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
43889: LD_ADDR_VAR 0 3
43893: PUSH
43894: LD_INT 13
43896: PUSH
43897: LD_INT 14
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: ST_TO_ADDR
43904: GO 44223
43906: LD_INT 42
43908: DOUBLE
43909: EQUAL
43910: IFTRUE 43914
43912: GO 43940
43914: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
43915: LD_ADDR_VAR 0 3
43919: PUSH
43920: LD_INT 21
43922: PUSH
43923: LD_INT 22
43925: PUSH
43926: LD_INT 23
43928: PUSH
43929: LD_INT 24
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: LIST
43936: LIST
43937: ST_TO_ADDR
43938: GO 44223
43940: LD_INT 43
43942: DOUBLE
43943: EQUAL
43944: IFTRUE 43948
43946: GO 43974
43948: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
43949: LD_ADDR_VAR 0 3
43953: PUSH
43954: LD_INT 21
43956: PUSH
43957: LD_INT 22
43959: PUSH
43960: LD_INT 23
43962: PUSH
43963: LD_INT 24
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: LIST
43970: LIST
43971: ST_TO_ADDR
43972: GO 44223
43974: LD_INT 44
43976: DOUBLE
43977: EQUAL
43978: IFTRUE 43982
43980: GO 44008
43982: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
43983: LD_ADDR_VAR 0 3
43987: PUSH
43988: LD_INT 21
43990: PUSH
43991: LD_INT 22
43993: PUSH
43994: LD_INT 23
43996: PUSH
43997: LD_INT 24
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: LIST
44004: LIST
44005: ST_TO_ADDR
44006: GO 44223
44008: LD_INT 45
44010: DOUBLE
44011: EQUAL
44012: IFTRUE 44016
44014: GO 44042
44016: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
44017: LD_ADDR_VAR 0 3
44021: PUSH
44022: LD_INT 21
44024: PUSH
44025: LD_INT 22
44027: PUSH
44028: LD_INT 23
44030: PUSH
44031: LD_INT 24
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: ST_TO_ADDR
44040: GO 44223
44042: LD_INT 49
44044: DOUBLE
44045: EQUAL
44046: IFTRUE 44050
44048: GO 44076
44050: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
44051: LD_ADDR_VAR 0 3
44055: PUSH
44056: LD_INT 21
44058: PUSH
44059: LD_INT 22
44061: PUSH
44062: LD_INT 23
44064: PUSH
44065: LD_INT 24
44067: PUSH
44068: EMPTY
44069: LIST
44070: LIST
44071: LIST
44072: LIST
44073: ST_TO_ADDR
44074: GO 44223
44076: LD_INT 51
44078: DOUBLE
44079: EQUAL
44080: IFTRUE 44084
44082: GO 44110
44084: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
44085: LD_ADDR_VAR 0 3
44089: PUSH
44090: LD_INT 21
44092: PUSH
44093: LD_INT 22
44095: PUSH
44096: LD_INT 23
44098: PUSH
44099: LD_INT 24
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: LIST
44106: LIST
44107: ST_TO_ADDR
44108: GO 44223
44110: LD_INT 52
44112: DOUBLE
44113: EQUAL
44114: IFTRUE 44118
44116: GO 44144
44118: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
44119: LD_ADDR_VAR 0 3
44123: PUSH
44124: LD_INT 21
44126: PUSH
44127: LD_INT 22
44129: PUSH
44130: LD_INT 23
44132: PUSH
44133: LD_INT 24
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: LIST
44140: LIST
44141: ST_TO_ADDR
44142: GO 44223
44144: LD_INT 53
44146: DOUBLE
44147: EQUAL
44148: IFTRUE 44152
44150: GO 44170
44152: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
44153: LD_ADDR_VAR 0 3
44157: PUSH
44158: LD_INT 23
44160: PUSH
44161: LD_INT 24
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: ST_TO_ADDR
44168: GO 44223
44170: LD_INT 46
44172: DOUBLE
44173: EQUAL
44174: IFTRUE 44178
44176: GO 44196
44178: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
44179: LD_ADDR_VAR 0 3
44183: PUSH
44184: LD_INT 23
44186: PUSH
44187: LD_INT 24
44189: PUSH
44190: EMPTY
44191: LIST
44192: LIST
44193: ST_TO_ADDR
44194: GO 44223
44196: LD_INT 47
44198: DOUBLE
44199: EQUAL
44200: IFTRUE 44204
44202: GO 44222
44204: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44205: LD_ADDR_VAR 0 3
44209: PUSH
44210: LD_INT 23
44212: PUSH
44213: LD_INT 24
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: ST_TO_ADDR
44220: GO 44223
44222: POP
// result := ( chassis in result ) ;
44223: LD_ADDR_VAR 0 3
44227: PUSH
44228: LD_VAR 0 1
44232: PUSH
44233: LD_VAR 0 3
44237: IN
44238: ST_TO_ADDR
// end ;
44239: LD_VAR 0 3
44243: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
44244: LD_INT 0
44246: PPUSH
44247: PPUSH
44248: PPUSH
44249: PPUSH
44250: PPUSH
44251: PPUSH
44252: PPUSH
// result := array ;
44253: LD_ADDR_VAR 0 5
44257: PUSH
44258: LD_VAR 0 1
44262: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
44263: LD_VAR 0 1
44267: NOT
44268: PUSH
44269: LD_VAR 0 2
44273: NOT
44274: OR
44275: PUSH
44276: LD_VAR 0 3
44280: NOT
44281: OR
44282: PUSH
44283: LD_VAR 0 2
44287: PUSH
44288: LD_VAR 0 1
44292: GREATER
44293: OR
44294: PUSH
44295: LD_VAR 0 3
44299: PUSH
44300: LD_VAR 0 1
44304: GREATER
44305: OR
44306: IFFALSE 44310
// exit ;
44308: GO 44606
// if direction then
44310: LD_VAR 0 4
44314: IFFALSE 44378
// begin d := 1 ;
44316: LD_ADDR_VAR 0 9
44320: PUSH
44321: LD_INT 1
44323: ST_TO_ADDR
// if i_from > i_to then
44324: LD_VAR 0 2
44328: PUSH
44329: LD_VAR 0 3
44333: GREATER
44334: IFFALSE 44360
// length := ( array - i_from ) + i_to else
44336: LD_ADDR_VAR 0 11
44340: PUSH
44341: LD_VAR 0 1
44345: PUSH
44346: LD_VAR 0 2
44350: MINUS
44351: PUSH
44352: LD_VAR 0 3
44356: PLUS
44357: ST_TO_ADDR
44358: GO 44376
// length := i_to - i_from ;
44360: LD_ADDR_VAR 0 11
44364: PUSH
44365: LD_VAR 0 3
44369: PUSH
44370: LD_VAR 0 2
44374: MINUS
44375: ST_TO_ADDR
// end else
44376: GO 44439
// begin d := - 1 ;
44378: LD_ADDR_VAR 0 9
44382: PUSH
44383: LD_INT 1
44385: NEG
44386: ST_TO_ADDR
// if i_from > i_to then
44387: LD_VAR 0 2
44391: PUSH
44392: LD_VAR 0 3
44396: GREATER
44397: IFFALSE 44417
// length := i_from - i_to else
44399: LD_ADDR_VAR 0 11
44403: PUSH
44404: LD_VAR 0 2
44408: PUSH
44409: LD_VAR 0 3
44413: MINUS
44414: ST_TO_ADDR
44415: GO 44439
// length := ( array - i_to ) + i_from ;
44417: LD_ADDR_VAR 0 11
44421: PUSH
44422: LD_VAR 0 1
44426: PUSH
44427: LD_VAR 0 3
44431: MINUS
44432: PUSH
44433: LD_VAR 0 2
44437: PLUS
44438: ST_TO_ADDR
// end ; if not length then
44439: LD_VAR 0 11
44443: NOT
44444: IFFALSE 44448
// exit ;
44446: GO 44606
// tmp := array ;
44448: LD_ADDR_VAR 0 10
44452: PUSH
44453: LD_VAR 0 1
44457: ST_TO_ADDR
// for i = 1 to length do
44458: LD_ADDR_VAR 0 6
44462: PUSH
44463: DOUBLE
44464: LD_INT 1
44466: DEC
44467: ST_TO_ADDR
44468: LD_VAR 0 11
44472: PUSH
44473: FOR_TO
44474: IFFALSE 44594
// begin for j = 1 to array do
44476: LD_ADDR_VAR 0 7
44480: PUSH
44481: DOUBLE
44482: LD_INT 1
44484: DEC
44485: ST_TO_ADDR
44486: LD_VAR 0 1
44490: PUSH
44491: FOR_TO
44492: IFFALSE 44580
// begin k := j + d ;
44494: LD_ADDR_VAR 0 8
44498: PUSH
44499: LD_VAR 0 7
44503: PUSH
44504: LD_VAR 0 9
44508: PLUS
44509: ST_TO_ADDR
// if k > array then
44510: LD_VAR 0 8
44514: PUSH
44515: LD_VAR 0 1
44519: GREATER
44520: IFFALSE 44530
// k := 1 ;
44522: LD_ADDR_VAR 0 8
44526: PUSH
44527: LD_INT 1
44529: ST_TO_ADDR
// if not k then
44530: LD_VAR 0 8
44534: NOT
44535: IFFALSE 44547
// k := array ;
44537: LD_ADDR_VAR 0 8
44541: PUSH
44542: LD_VAR 0 1
44546: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
44547: LD_ADDR_VAR 0 10
44551: PUSH
44552: LD_VAR 0 10
44556: PPUSH
44557: LD_VAR 0 8
44561: PPUSH
44562: LD_VAR 0 1
44566: PUSH
44567: LD_VAR 0 7
44571: ARRAY
44572: PPUSH
44573: CALL_OW 1
44577: ST_TO_ADDR
// end ;
44578: GO 44491
44580: POP
44581: POP
// array := tmp ;
44582: LD_ADDR_VAR 0 1
44586: PUSH
44587: LD_VAR 0 10
44591: ST_TO_ADDR
// end ;
44592: GO 44473
44594: POP
44595: POP
// result := array ;
44596: LD_ADDR_VAR 0 5
44600: PUSH
44601: LD_VAR 0 1
44605: ST_TO_ADDR
// end ;
44606: LD_VAR 0 5
44610: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
44611: LD_INT 0
44613: PPUSH
44614: PPUSH
// result := 0 ;
44615: LD_ADDR_VAR 0 3
44619: PUSH
44620: LD_INT 0
44622: ST_TO_ADDR
// if not array or not value in array then
44623: LD_VAR 0 1
44627: NOT
44628: PUSH
44629: LD_VAR 0 2
44633: PUSH
44634: LD_VAR 0 1
44638: IN
44639: NOT
44640: OR
44641: IFFALSE 44645
// exit ;
44643: GO 44699
// for i = 1 to array do
44645: LD_ADDR_VAR 0 4
44649: PUSH
44650: DOUBLE
44651: LD_INT 1
44653: DEC
44654: ST_TO_ADDR
44655: LD_VAR 0 1
44659: PUSH
44660: FOR_TO
44661: IFFALSE 44697
// if value = array [ i ] then
44663: LD_VAR 0 2
44667: PUSH
44668: LD_VAR 0 1
44672: PUSH
44673: LD_VAR 0 4
44677: ARRAY
44678: EQUAL
44679: IFFALSE 44695
// begin result := i ;
44681: LD_ADDR_VAR 0 3
44685: PUSH
44686: LD_VAR 0 4
44690: ST_TO_ADDR
// exit ;
44691: POP
44692: POP
44693: GO 44699
// end ;
44695: GO 44660
44697: POP
44698: POP
// end ;
44699: LD_VAR 0 3
44703: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
44704: LD_INT 0
44706: PPUSH
// vc_chassis := chassis ;
44707: LD_ADDR_OWVAR 37
44711: PUSH
44712: LD_VAR 0 1
44716: ST_TO_ADDR
// vc_engine := engine ;
44717: LD_ADDR_OWVAR 39
44721: PUSH
44722: LD_VAR 0 2
44726: ST_TO_ADDR
// vc_control := control ;
44727: LD_ADDR_OWVAR 38
44731: PUSH
44732: LD_VAR 0 3
44736: ST_TO_ADDR
// vc_weapon := weapon ;
44737: LD_ADDR_OWVAR 40
44741: PUSH
44742: LD_VAR 0 4
44746: ST_TO_ADDR
// vc_fuel_battery := fuel ;
44747: LD_ADDR_OWVAR 41
44751: PUSH
44752: LD_VAR 0 5
44756: ST_TO_ADDR
// end ;
44757: LD_VAR 0 6
44761: RET
// export function WantPlant ( unit ) ; var task ; begin
44762: LD_INT 0
44764: PPUSH
44765: PPUSH
// result := false ;
44766: LD_ADDR_VAR 0 2
44770: PUSH
44771: LD_INT 0
44773: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
44774: LD_ADDR_VAR 0 3
44778: PUSH
44779: LD_VAR 0 1
44783: PPUSH
44784: CALL_OW 437
44788: ST_TO_ADDR
// if task then
44789: LD_VAR 0 3
44793: IFFALSE 44821
// if task [ 1 ] [ 1 ] = p then
44795: LD_VAR 0 3
44799: PUSH
44800: LD_INT 1
44802: ARRAY
44803: PUSH
44804: LD_INT 1
44806: ARRAY
44807: PUSH
44808: LD_STRING p
44810: EQUAL
44811: IFFALSE 44821
// result := true ;
44813: LD_ADDR_VAR 0 2
44817: PUSH
44818: LD_INT 1
44820: ST_TO_ADDR
// end ;
44821: LD_VAR 0 2
44825: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
44826: LD_INT 0
44828: PPUSH
44829: PPUSH
44830: PPUSH
44831: PPUSH
// if pos < 1 then
44832: LD_VAR 0 2
44836: PUSH
44837: LD_INT 1
44839: LESS
44840: IFFALSE 44844
// exit ;
44842: GO 45147
// if pos = 1 then
44844: LD_VAR 0 2
44848: PUSH
44849: LD_INT 1
44851: EQUAL
44852: IFFALSE 44885
// result := Replace ( arr , pos [ 1 ] , value ) else
44854: LD_ADDR_VAR 0 4
44858: PUSH
44859: LD_VAR 0 1
44863: PPUSH
44864: LD_VAR 0 2
44868: PUSH
44869: LD_INT 1
44871: ARRAY
44872: PPUSH
44873: LD_VAR 0 3
44877: PPUSH
44878: CALL_OW 1
44882: ST_TO_ADDR
44883: GO 45147
// begin tmp := arr ;
44885: LD_ADDR_VAR 0 6
44889: PUSH
44890: LD_VAR 0 1
44894: ST_TO_ADDR
// s_arr := [ tmp ] ;
44895: LD_ADDR_VAR 0 7
44899: PUSH
44900: LD_VAR 0 6
44904: PUSH
44905: EMPTY
44906: LIST
44907: ST_TO_ADDR
// for i = 1 to pos - 1 do
44908: LD_ADDR_VAR 0 5
44912: PUSH
44913: DOUBLE
44914: LD_INT 1
44916: DEC
44917: ST_TO_ADDR
44918: LD_VAR 0 2
44922: PUSH
44923: LD_INT 1
44925: MINUS
44926: PUSH
44927: FOR_TO
44928: IFFALSE 44973
// begin tmp := tmp [ pos [ i ] ] ;
44930: LD_ADDR_VAR 0 6
44934: PUSH
44935: LD_VAR 0 6
44939: PUSH
44940: LD_VAR 0 2
44944: PUSH
44945: LD_VAR 0 5
44949: ARRAY
44950: ARRAY
44951: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
44952: LD_ADDR_VAR 0 7
44956: PUSH
44957: LD_VAR 0 7
44961: PUSH
44962: LD_VAR 0 6
44966: PUSH
44967: EMPTY
44968: LIST
44969: ADD
44970: ST_TO_ADDR
// end ;
44971: GO 44927
44973: POP
44974: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
44975: LD_ADDR_VAR 0 6
44979: PUSH
44980: LD_VAR 0 6
44984: PPUSH
44985: LD_VAR 0 2
44989: PUSH
44990: LD_VAR 0 2
44994: ARRAY
44995: PPUSH
44996: LD_VAR 0 3
45000: PPUSH
45001: CALL_OW 1
45005: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
45006: LD_ADDR_VAR 0 7
45010: PUSH
45011: LD_VAR 0 7
45015: PPUSH
45016: LD_VAR 0 7
45020: PPUSH
45021: LD_VAR 0 6
45025: PPUSH
45026: CALL_OW 1
45030: ST_TO_ADDR
// for i = s_arr downto 2 do
45031: LD_ADDR_VAR 0 5
45035: PUSH
45036: DOUBLE
45037: LD_VAR 0 7
45041: INC
45042: ST_TO_ADDR
45043: LD_INT 2
45045: PUSH
45046: FOR_DOWNTO
45047: IFFALSE 45131
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
45049: LD_ADDR_VAR 0 6
45053: PUSH
45054: LD_VAR 0 7
45058: PUSH
45059: LD_VAR 0 5
45063: PUSH
45064: LD_INT 1
45066: MINUS
45067: ARRAY
45068: PPUSH
45069: LD_VAR 0 2
45073: PUSH
45074: LD_VAR 0 5
45078: PUSH
45079: LD_INT 1
45081: MINUS
45082: ARRAY
45083: PPUSH
45084: LD_VAR 0 7
45088: PUSH
45089: LD_VAR 0 5
45093: ARRAY
45094: PPUSH
45095: CALL_OW 1
45099: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
45100: LD_ADDR_VAR 0 7
45104: PUSH
45105: LD_VAR 0 7
45109: PPUSH
45110: LD_VAR 0 5
45114: PUSH
45115: LD_INT 1
45117: MINUS
45118: PPUSH
45119: LD_VAR 0 6
45123: PPUSH
45124: CALL_OW 1
45128: ST_TO_ADDR
// end ;
45129: GO 45046
45131: POP
45132: POP
// result := s_arr [ 1 ] ;
45133: LD_ADDR_VAR 0 4
45137: PUSH
45138: LD_VAR 0 7
45142: PUSH
45143: LD_INT 1
45145: ARRAY
45146: ST_TO_ADDR
// end ; end ;
45147: LD_VAR 0 4
45151: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
45152: LD_INT 0
45154: PPUSH
45155: PPUSH
// if not list then
45156: LD_VAR 0 1
45160: NOT
45161: IFFALSE 45165
// exit ;
45163: GO 45256
// i := list [ pos1 ] ;
45165: LD_ADDR_VAR 0 5
45169: PUSH
45170: LD_VAR 0 1
45174: PUSH
45175: LD_VAR 0 2
45179: ARRAY
45180: ST_TO_ADDR
// if not i then
45181: LD_VAR 0 5
45185: NOT
45186: IFFALSE 45190
// exit ;
45188: GO 45256
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
45190: LD_ADDR_VAR 0 1
45194: PUSH
45195: LD_VAR 0 1
45199: PPUSH
45200: LD_VAR 0 2
45204: PPUSH
45205: LD_VAR 0 1
45209: PUSH
45210: LD_VAR 0 3
45214: ARRAY
45215: PPUSH
45216: CALL_OW 1
45220: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
45221: LD_ADDR_VAR 0 1
45225: PUSH
45226: LD_VAR 0 1
45230: PPUSH
45231: LD_VAR 0 3
45235: PPUSH
45236: LD_VAR 0 5
45240: PPUSH
45241: CALL_OW 1
45245: ST_TO_ADDR
// result := list ;
45246: LD_ADDR_VAR 0 4
45250: PUSH
45251: LD_VAR 0 1
45255: ST_TO_ADDR
// end ;
45256: LD_VAR 0 4
45260: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
45261: LD_INT 0
45263: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
45264: LD_ADDR_VAR 0 5
45268: PUSH
45269: LD_VAR 0 1
45273: PPUSH
45274: CALL_OW 250
45278: PPUSH
45279: LD_VAR 0 1
45283: PPUSH
45284: CALL_OW 251
45288: PPUSH
45289: LD_VAR 0 2
45293: PPUSH
45294: LD_VAR 0 3
45298: PPUSH
45299: LD_VAR 0 4
45303: PPUSH
45304: CALL 45314 0 5
45308: ST_TO_ADDR
// end ;
45309: LD_VAR 0 5
45313: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
45314: LD_INT 0
45316: PPUSH
45317: PPUSH
45318: PPUSH
45319: PPUSH
// if not list then
45320: LD_VAR 0 3
45324: NOT
45325: IFFALSE 45329
// exit ;
45327: GO 45717
// result := [ ] ;
45329: LD_ADDR_VAR 0 6
45333: PUSH
45334: EMPTY
45335: ST_TO_ADDR
// for i in list do
45336: LD_ADDR_VAR 0 7
45340: PUSH
45341: LD_VAR 0 3
45345: PUSH
45346: FOR_IN
45347: IFFALSE 45549
// begin tmp := GetDistUnitXY ( i , x , y ) ;
45349: LD_ADDR_VAR 0 9
45353: PUSH
45354: LD_VAR 0 7
45358: PPUSH
45359: LD_VAR 0 1
45363: PPUSH
45364: LD_VAR 0 2
45368: PPUSH
45369: CALL_OW 297
45373: ST_TO_ADDR
// if not result then
45374: LD_VAR 0 6
45378: NOT
45379: IFFALSE 45405
// result := [ [ i , tmp ] ] else
45381: LD_ADDR_VAR 0 6
45385: PUSH
45386: LD_VAR 0 7
45390: PUSH
45391: LD_VAR 0 9
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: EMPTY
45401: LIST
45402: ST_TO_ADDR
45403: GO 45547
// begin if result [ result ] [ 2 ] < tmp then
45405: LD_VAR 0 6
45409: PUSH
45410: LD_VAR 0 6
45414: ARRAY
45415: PUSH
45416: LD_INT 2
45418: ARRAY
45419: PUSH
45420: LD_VAR 0 9
45424: LESS
45425: IFFALSE 45467
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
45427: LD_ADDR_VAR 0 6
45431: PUSH
45432: LD_VAR 0 6
45436: PPUSH
45437: LD_VAR 0 6
45441: PUSH
45442: LD_INT 1
45444: PLUS
45445: PPUSH
45446: LD_VAR 0 7
45450: PUSH
45451: LD_VAR 0 9
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PPUSH
45460: CALL_OW 2
45464: ST_TO_ADDR
45465: GO 45547
// for j = 1 to result do
45467: LD_ADDR_VAR 0 8
45471: PUSH
45472: DOUBLE
45473: LD_INT 1
45475: DEC
45476: ST_TO_ADDR
45477: LD_VAR 0 6
45481: PUSH
45482: FOR_TO
45483: IFFALSE 45545
// begin if tmp < result [ j ] [ 2 ] then
45485: LD_VAR 0 9
45489: PUSH
45490: LD_VAR 0 6
45494: PUSH
45495: LD_VAR 0 8
45499: ARRAY
45500: PUSH
45501: LD_INT 2
45503: ARRAY
45504: LESS
45505: IFFALSE 45543
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45507: LD_ADDR_VAR 0 6
45511: PUSH
45512: LD_VAR 0 6
45516: PPUSH
45517: LD_VAR 0 8
45521: PPUSH
45522: LD_VAR 0 7
45526: PUSH
45527: LD_VAR 0 9
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PPUSH
45536: CALL_OW 2
45540: ST_TO_ADDR
// break ;
45541: GO 45545
// end ; end ;
45543: GO 45482
45545: POP
45546: POP
// end ; end ;
45547: GO 45346
45549: POP
45550: POP
// if result and not asc then
45551: LD_VAR 0 6
45555: PUSH
45556: LD_VAR 0 4
45560: NOT
45561: AND
45562: IFFALSE 45637
// begin tmp := result ;
45564: LD_ADDR_VAR 0 9
45568: PUSH
45569: LD_VAR 0 6
45573: ST_TO_ADDR
// for i = tmp downto 1 do
45574: LD_ADDR_VAR 0 7
45578: PUSH
45579: DOUBLE
45580: LD_VAR 0 9
45584: INC
45585: ST_TO_ADDR
45586: LD_INT 1
45588: PUSH
45589: FOR_DOWNTO
45590: IFFALSE 45635
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
45592: LD_ADDR_VAR 0 6
45596: PUSH
45597: LD_VAR 0 6
45601: PPUSH
45602: LD_VAR 0 9
45606: PUSH
45607: LD_VAR 0 7
45611: MINUS
45612: PUSH
45613: LD_INT 1
45615: PLUS
45616: PPUSH
45617: LD_VAR 0 9
45621: PUSH
45622: LD_VAR 0 7
45626: ARRAY
45627: PPUSH
45628: CALL_OW 1
45632: ST_TO_ADDR
45633: GO 45589
45635: POP
45636: POP
// end ; tmp := [ ] ;
45637: LD_ADDR_VAR 0 9
45641: PUSH
45642: EMPTY
45643: ST_TO_ADDR
// if mode then
45644: LD_VAR 0 5
45648: IFFALSE 45717
// begin for i = 1 to result do
45650: LD_ADDR_VAR 0 7
45654: PUSH
45655: DOUBLE
45656: LD_INT 1
45658: DEC
45659: ST_TO_ADDR
45660: LD_VAR 0 6
45664: PUSH
45665: FOR_TO
45666: IFFALSE 45705
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
45668: LD_ADDR_VAR 0 9
45672: PUSH
45673: LD_VAR 0 9
45677: PPUSH
45678: LD_VAR 0 7
45682: PPUSH
45683: LD_VAR 0 6
45687: PUSH
45688: LD_VAR 0 7
45692: ARRAY
45693: PUSH
45694: LD_INT 1
45696: ARRAY
45697: PPUSH
45698: CALL_OW 1
45702: ST_TO_ADDR
45703: GO 45665
45705: POP
45706: POP
// result := tmp ;
45707: LD_ADDR_VAR 0 6
45711: PUSH
45712: LD_VAR 0 9
45716: ST_TO_ADDR
// end ; end ;
45717: LD_VAR 0 6
45721: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
45722: LD_INT 0
45724: PPUSH
45725: PPUSH
45726: PPUSH
45727: PPUSH
45728: PPUSH
45729: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
45730: LD_ADDR_VAR 0 5
45734: PUSH
45735: LD_INT 0
45737: PUSH
45738: LD_INT 0
45740: PUSH
45741: LD_INT 0
45743: PUSH
45744: EMPTY
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: ST_TO_ADDR
// if not x or not y then
45752: LD_VAR 0 2
45756: NOT
45757: PUSH
45758: LD_VAR 0 3
45762: NOT
45763: OR
45764: IFFALSE 45768
// exit ;
45766: GO 47418
// if not range then
45768: LD_VAR 0 4
45772: NOT
45773: IFFALSE 45783
// range := 10 ;
45775: LD_ADDR_VAR 0 4
45779: PUSH
45780: LD_INT 10
45782: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45783: LD_ADDR_VAR 0 8
45787: PUSH
45788: LD_INT 81
45790: PUSH
45791: LD_VAR 0 1
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: PUSH
45800: LD_INT 92
45802: PUSH
45803: LD_VAR 0 2
45807: PUSH
45808: LD_VAR 0 3
45812: PUSH
45813: LD_VAR 0 4
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 3
45826: PUSH
45827: LD_INT 21
45829: PUSH
45830: LD_INT 3
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: LIST
45845: PPUSH
45846: CALL_OW 69
45850: ST_TO_ADDR
// if not tmp then
45851: LD_VAR 0 8
45855: NOT
45856: IFFALSE 45860
// exit ;
45858: GO 47418
// for i in tmp do
45860: LD_ADDR_VAR 0 6
45864: PUSH
45865: LD_VAR 0 8
45869: PUSH
45870: FOR_IN
45871: IFFALSE 47393
// begin points := [ 0 , 0 , 0 ] ;
45873: LD_ADDR_VAR 0 9
45877: PUSH
45878: LD_INT 0
45880: PUSH
45881: LD_INT 0
45883: PUSH
45884: LD_INT 0
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: LIST
45891: ST_TO_ADDR
// bpoints := 1 ;
45892: LD_ADDR_VAR 0 10
45896: PUSH
45897: LD_INT 1
45899: ST_TO_ADDR
// case GetType ( i ) of unit_human :
45900: LD_VAR 0 6
45904: PPUSH
45905: CALL_OW 247
45909: PUSH
45910: LD_INT 1
45912: DOUBLE
45913: EQUAL
45914: IFTRUE 45918
45916: GO 46496
45918: POP
// begin if GetClass ( i ) = 1 then
45919: LD_VAR 0 6
45923: PPUSH
45924: CALL_OW 257
45928: PUSH
45929: LD_INT 1
45931: EQUAL
45932: IFFALSE 45953
// points := [ 10 , 5 , 3 ] ;
45934: LD_ADDR_VAR 0 9
45938: PUSH
45939: LD_INT 10
45941: PUSH
45942: LD_INT 5
45944: PUSH
45945: LD_INT 3
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: LIST
45952: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
45953: LD_VAR 0 6
45957: PPUSH
45958: CALL_OW 257
45962: PUSH
45963: LD_INT 2
45965: PUSH
45966: LD_INT 3
45968: PUSH
45969: LD_INT 4
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: LIST
45976: IN
45977: IFFALSE 45998
// points := [ 3 , 2 , 1 ] ;
45979: LD_ADDR_VAR 0 9
45983: PUSH
45984: LD_INT 3
45986: PUSH
45987: LD_INT 2
45989: PUSH
45990: LD_INT 1
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: LIST
45997: ST_TO_ADDR
// if GetClass ( i ) = 5 then
45998: LD_VAR 0 6
46002: PPUSH
46003: CALL_OW 257
46007: PUSH
46008: LD_INT 5
46010: EQUAL
46011: IFFALSE 46032
// points := [ 130 , 5 , 2 ] ;
46013: LD_ADDR_VAR 0 9
46017: PUSH
46018: LD_INT 130
46020: PUSH
46021: LD_INT 5
46023: PUSH
46024: LD_INT 2
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: LIST
46031: ST_TO_ADDR
// if GetClass ( i ) = 8 then
46032: LD_VAR 0 6
46036: PPUSH
46037: CALL_OW 257
46041: PUSH
46042: LD_INT 8
46044: EQUAL
46045: IFFALSE 46066
// points := [ 35 , 35 , 30 ] ;
46047: LD_ADDR_VAR 0 9
46051: PUSH
46052: LD_INT 35
46054: PUSH
46055: LD_INT 35
46057: PUSH
46058: LD_INT 30
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: LIST
46065: ST_TO_ADDR
// if GetClass ( i ) = 9 then
46066: LD_VAR 0 6
46070: PPUSH
46071: CALL_OW 257
46075: PUSH
46076: LD_INT 9
46078: EQUAL
46079: IFFALSE 46100
// points := [ 20 , 55 , 40 ] ;
46081: LD_ADDR_VAR 0 9
46085: PUSH
46086: LD_INT 20
46088: PUSH
46089: LD_INT 55
46091: PUSH
46092: LD_INT 40
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: LIST
46099: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
46100: LD_VAR 0 6
46104: PPUSH
46105: CALL_OW 257
46109: PUSH
46110: LD_INT 12
46112: PUSH
46113: LD_INT 16
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: IN
46120: IFFALSE 46141
// points := [ 5 , 3 , 2 ] ;
46122: LD_ADDR_VAR 0 9
46126: PUSH
46127: LD_INT 5
46129: PUSH
46130: LD_INT 3
46132: PUSH
46133: LD_INT 2
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: LIST
46140: ST_TO_ADDR
// if GetClass ( i ) = 17 then
46141: LD_VAR 0 6
46145: PPUSH
46146: CALL_OW 257
46150: PUSH
46151: LD_INT 17
46153: EQUAL
46154: IFFALSE 46175
// points := [ 100 , 50 , 75 ] ;
46156: LD_ADDR_VAR 0 9
46160: PUSH
46161: LD_INT 100
46163: PUSH
46164: LD_INT 50
46166: PUSH
46167: LD_INT 75
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: LIST
46174: ST_TO_ADDR
// if GetClass ( i ) = 15 then
46175: LD_VAR 0 6
46179: PPUSH
46180: CALL_OW 257
46184: PUSH
46185: LD_INT 15
46187: EQUAL
46188: IFFALSE 46209
// points := [ 10 , 5 , 3 ] ;
46190: LD_ADDR_VAR 0 9
46194: PUSH
46195: LD_INT 10
46197: PUSH
46198: LD_INT 5
46200: PUSH
46201: LD_INT 3
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: LIST
46208: ST_TO_ADDR
// if GetClass ( i ) = 14 then
46209: LD_VAR 0 6
46213: PPUSH
46214: CALL_OW 257
46218: PUSH
46219: LD_INT 14
46221: EQUAL
46222: IFFALSE 46243
// points := [ 10 , 0 , 0 ] ;
46224: LD_ADDR_VAR 0 9
46228: PUSH
46229: LD_INT 10
46231: PUSH
46232: LD_INT 0
46234: PUSH
46235: LD_INT 0
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: LIST
46242: ST_TO_ADDR
// if GetClass ( i ) = 11 then
46243: LD_VAR 0 6
46247: PPUSH
46248: CALL_OW 257
46252: PUSH
46253: LD_INT 11
46255: EQUAL
46256: IFFALSE 46277
// points := [ 30 , 10 , 5 ] ;
46258: LD_ADDR_VAR 0 9
46262: PUSH
46263: LD_INT 30
46265: PUSH
46266: LD_INT 10
46268: PUSH
46269: LD_INT 5
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: LIST
46276: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
46277: LD_VAR 0 1
46281: PPUSH
46282: LD_INT 5
46284: PPUSH
46285: CALL_OW 321
46289: PUSH
46290: LD_INT 2
46292: EQUAL
46293: IFFALSE 46310
// bpoints := bpoints * 1.8 ;
46295: LD_ADDR_VAR 0 10
46299: PUSH
46300: LD_VAR 0 10
46304: PUSH
46305: LD_REAL  1.80000000000000E+0000
46308: MUL
46309: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
46310: LD_VAR 0 6
46314: PPUSH
46315: CALL_OW 257
46319: PUSH
46320: LD_INT 1
46322: PUSH
46323: LD_INT 2
46325: PUSH
46326: LD_INT 3
46328: PUSH
46329: LD_INT 4
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: IN
46338: PUSH
46339: LD_VAR 0 1
46343: PPUSH
46344: LD_INT 51
46346: PPUSH
46347: CALL_OW 321
46351: PUSH
46352: LD_INT 2
46354: EQUAL
46355: AND
46356: IFFALSE 46373
// bpoints := bpoints * 1.2 ;
46358: LD_ADDR_VAR 0 10
46362: PUSH
46363: LD_VAR 0 10
46367: PUSH
46368: LD_REAL  1.20000000000000E+0000
46371: MUL
46372: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
46373: LD_VAR 0 6
46377: PPUSH
46378: CALL_OW 257
46382: PUSH
46383: LD_INT 5
46385: PUSH
46386: LD_INT 7
46388: PUSH
46389: LD_INT 9
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: LIST
46396: IN
46397: PUSH
46398: LD_VAR 0 1
46402: PPUSH
46403: LD_INT 52
46405: PPUSH
46406: CALL_OW 321
46410: PUSH
46411: LD_INT 2
46413: EQUAL
46414: AND
46415: IFFALSE 46432
// bpoints := bpoints * 1.5 ;
46417: LD_ADDR_VAR 0 10
46421: PUSH
46422: LD_VAR 0 10
46426: PUSH
46427: LD_REAL  1.50000000000000E+0000
46430: MUL
46431: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
46432: LD_VAR 0 1
46436: PPUSH
46437: LD_INT 66
46439: PPUSH
46440: CALL_OW 321
46444: PUSH
46445: LD_INT 2
46447: EQUAL
46448: IFFALSE 46465
// bpoints := bpoints * 1.1 ;
46450: LD_ADDR_VAR 0 10
46454: PUSH
46455: LD_VAR 0 10
46459: PUSH
46460: LD_REAL  1.10000000000000E+0000
46463: MUL
46464: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
46465: LD_ADDR_VAR 0 10
46469: PUSH
46470: LD_VAR 0 10
46474: PUSH
46475: LD_VAR 0 6
46479: PPUSH
46480: LD_INT 1
46482: PPUSH
46483: CALL_OW 259
46487: PUSH
46488: LD_REAL  1.15000000000000E+0000
46491: MUL
46492: MUL
46493: ST_TO_ADDR
// end ; unit_vehicle :
46494: GO 47322
46496: LD_INT 2
46498: DOUBLE
46499: EQUAL
46500: IFTRUE 46504
46502: GO 47310
46504: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
46505: LD_VAR 0 6
46509: PPUSH
46510: CALL_OW 264
46514: PUSH
46515: LD_INT 2
46517: PUSH
46518: LD_INT 42
46520: PUSH
46521: LD_INT 24
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: LIST
46528: IN
46529: IFFALSE 46550
// points := [ 25 , 5 , 3 ] ;
46531: LD_ADDR_VAR 0 9
46535: PUSH
46536: LD_INT 25
46538: PUSH
46539: LD_INT 5
46541: PUSH
46542: LD_INT 3
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: LIST
46549: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
46550: LD_VAR 0 6
46554: PPUSH
46555: CALL_OW 264
46559: PUSH
46560: LD_INT 4
46562: PUSH
46563: LD_INT 43
46565: PUSH
46566: LD_INT 25
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: LIST
46573: IN
46574: IFFALSE 46595
// points := [ 40 , 15 , 5 ] ;
46576: LD_ADDR_VAR 0 9
46580: PUSH
46581: LD_INT 40
46583: PUSH
46584: LD_INT 15
46586: PUSH
46587: LD_INT 5
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: LIST
46594: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
46595: LD_VAR 0 6
46599: PPUSH
46600: CALL_OW 264
46604: PUSH
46605: LD_INT 3
46607: PUSH
46608: LD_INT 23
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: IN
46615: IFFALSE 46636
// points := [ 7 , 25 , 8 ] ;
46617: LD_ADDR_VAR 0 9
46621: PUSH
46622: LD_INT 7
46624: PUSH
46625: LD_INT 25
46627: PUSH
46628: LD_INT 8
46630: PUSH
46631: EMPTY
46632: LIST
46633: LIST
46634: LIST
46635: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
46636: LD_VAR 0 6
46640: PPUSH
46641: CALL_OW 264
46645: PUSH
46646: LD_INT 5
46648: PUSH
46649: LD_INT 27
46651: PUSH
46652: LD_INT 44
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: LIST
46659: IN
46660: IFFALSE 46681
// points := [ 14 , 50 , 16 ] ;
46662: LD_ADDR_VAR 0 9
46666: PUSH
46667: LD_INT 14
46669: PUSH
46670: LD_INT 50
46672: PUSH
46673: LD_INT 16
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: LIST
46680: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
46681: LD_VAR 0 6
46685: PPUSH
46686: CALL_OW 264
46690: PUSH
46691: LD_INT 6
46693: PUSH
46694: LD_INT 46
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: IN
46701: IFFALSE 46722
// points := [ 32 , 120 , 70 ] ;
46703: LD_ADDR_VAR 0 9
46707: PUSH
46708: LD_INT 32
46710: PUSH
46711: LD_INT 120
46713: PUSH
46714: LD_INT 70
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: LIST
46721: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
46722: LD_VAR 0 6
46726: PPUSH
46727: CALL_OW 264
46731: PUSH
46732: LD_INT 7
46734: PUSH
46735: LD_INT 28
46737: PUSH
46738: LD_INT 45
46740: PUSH
46741: LD_INT 92
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: LIST
46748: LIST
46749: IN
46750: IFFALSE 46771
// points := [ 35 , 20 , 45 ] ;
46752: LD_ADDR_VAR 0 9
46756: PUSH
46757: LD_INT 35
46759: PUSH
46760: LD_INT 20
46762: PUSH
46763: LD_INT 45
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: LIST
46770: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
46771: LD_VAR 0 6
46775: PPUSH
46776: CALL_OW 264
46780: PUSH
46781: LD_INT 47
46783: PUSH
46784: EMPTY
46785: LIST
46786: IN
46787: IFFALSE 46808
// points := [ 67 , 45 , 75 ] ;
46789: LD_ADDR_VAR 0 9
46793: PUSH
46794: LD_INT 67
46796: PUSH
46797: LD_INT 45
46799: PUSH
46800: LD_INT 75
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: LIST
46807: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
46808: LD_VAR 0 6
46812: PPUSH
46813: CALL_OW 264
46817: PUSH
46818: LD_INT 26
46820: PUSH
46821: EMPTY
46822: LIST
46823: IN
46824: IFFALSE 46845
// points := [ 120 , 30 , 80 ] ;
46826: LD_ADDR_VAR 0 9
46830: PUSH
46831: LD_INT 120
46833: PUSH
46834: LD_INT 30
46836: PUSH
46837: LD_INT 80
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: LIST
46844: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
46845: LD_VAR 0 6
46849: PPUSH
46850: CALL_OW 264
46854: PUSH
46855: LD_INT 22
46857: PUSH
46858: EMPTY
46859: LIST
46860: IN
46861: IFFALSE 46882
// points := [ 40 , 1 , 1 ] ;
46863: LD_ADDR_VAR 0 9
46867: PUSH
46868: LD_INT 40
46870: PUSH
46871: LD_INT 1
46873: PUSH
46874: LD_INT 1
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: LIST
46881: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
46882: LD_VAR 0 6
46886: PPUSH
46887: CALL_OW 264
46891: PUSH
46892: LD_INT 29
46894: PUSH
46895: EMPTY
46896: LIST
46897: IN
46898: IFFALSE 46919
// points := [ 70 , 200 , 400 ] ;
46900: LD_ADDR_VAR 0 9
46904: PUSH
46905: LD_INT 70
46907: PUSH
46908: LD_INT 200
46910: PUSH
46911: LD_INT 400
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: LIST
46918: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
46919: LD_VAR 0 6
46923: PPUSH
46924: CALL_OW 264
46928: PUSH
46929: LD_INT 14
46931: PUSH
46932: LD_INT 53
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: IN
46939: IFFALSE 46960
// points := [ 40 , 10 , 20 ] ;
46941: LD_ADDR_VAR 0 9
46945: PUSH
46946: LD_INT 40
46948: PUSH
46949: LD_INT 10
46951: PUSH
46952: LD_INT 20
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: LIST
46959: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
46960: LD_VAR 0 6
46964: PPUSH
46965: CALL_OW 264
46969: PUSH
46970: LD_INT 9
46972: PUSH
46973: EMPTY
46974: LIST
46975: IN
46976: IFFALSE 46997
// points := [ 5 , 70 , 20 ] ;
46978: LD_ADDR_VAR 0 9
46982: PUSH
46983: LD_INT 5
46985: PUSH
46986: LD_INT 70
46988: PUSH
46989: LD_INT 20
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: LIST
46996: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
46997: LD_VAR 0 6
47001: PPUSH
47002: CALL_OW 264
47006: PUSH
47007: LD_INT 10
47009: PUSH
47010: EMPTY
47011: LIST
47012: IN
47013: IFFALSE 47034
// points := [ 35 , 110 , 70 ] ;
47015: LD_ADDR_VAR 0 9
47019: PUSH
47020: LD_INT 35
47022: PUSH
47023: LD_INT 110
47025: PUSH
47026: LD_INT 70
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: LIST
47033: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
47034: LD_VAR 0 6
47038: PPUSH
47039: CALL_OW 265
47043: PUSH
47044: LD_INT 25
47046: EQUAL
47047: IFFALSE 47068
// points := [ 80 , 65 , 100 ] ;
47049: LD_ADDR_VAR 0 9
47053: PUSH
47054: LD_INT 80
47056: PUSH
47057: LD_INT 65
47059: PUSH
47060: LD_INT 100
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: LIST
47067: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
47068: LD_VAR 0 6
47072: PPUSH
47073: CALL_OW 263
47077: PUSH
47078: LD_INT 1
47080: EQUAL
47081: IFFALSE 47116
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
47083: LD_ADDR_VAR 0 10
47087: PUSH
47088: LD_VAR 0 10
47092: PUSH
47093: LD_VAR 0 6
47097: PPUSH
47098: CALL_OW 311
47102: PPUSH
47103: LD_INT 3
47105: PPUSH
47106: CALL_OW 259
47110: PUSH
47111: LD_INT 4
47113: MUL
47114: MUL
47115: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
47116: LD_VAR 0 6
47120: PPUSH
47121: CALL_OW 263
47125: PUSH
47126: LD_INT 2
47128: EQUAL
47129: IFFALSE 47180
// begin j := IsControledBy ( i ) ;
47131: LD_ADDR_VAR 0 7
47135: PUSH
47136: LD_VAR 0 6
47140: PPUSH
47141: CALL_OW 312
47145: ST_TO_ADDR
// if j then
47146: LD_VAR 0 7
47150: IFFALSE 47180
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
47152: LD_ADDR_VAR 0 10
47156: PUSH
47157: LD_VAR 0 10
47161: PUSH
47162: LD_VAR 0 7
47166: PPUSH
47167: LD_INT 3
47169: PPUSH
47170: CALL_OW 259
47174: PUSH
47175: LD_INT 3
47177: MUL
47178: MUL
47179: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
47180: LD_VAR 0 6
47184: PPUSH
47185: CALL_OW 264
47189: PUSH
47190: LD_INT 5
47192: PUSH
47193: LD_INT 6
47195: PUSH
47196: LD_INT 46
47198: PUSH
47199: LD_INT 44
47201: PUSH
47202: LD_INT 47
47204: PUSH
47205: LD_INT 45
47207: PUSH
47208: LD_INT 28
47210: PUSH
47211: LD_INT 7
47213: PUSH
47214: LD_INT 27
47216: PUSH
47217: LD_INT 29
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: LIST
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: LIST
47229: LIST
47230: LIST
47231: IN
47232: PUSH
47233: LD_VAR 0 1
47237: PPUSH
47238: LD_INT 52
47240: PPUSH
47241: CALL_OW 321
47245: PUSH
47246: LD_INT 2
47248: EQUAL
47249: AND
47250: IFFALSE 47267
// bpoints := bpoints * 1.2 ;
47252: LD_ADDR_VAR 0 10
47256: PUSH
47257: LD_VAR 0 10
47261: PUSH
47262: LD_REAL  1.20000000000000E+0000
47265: MUL
47266: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
47267: LD_VAR 0 6
47271: PPUSH
47272: CALL_OW 264
47276: PUSH
47277: LD_INT 6
47279: PUSH
47280: LD_INT 46
47282: PUSH
47283: LD_INT 47
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: LIST
47290: IN
47291: IFFALSE 47308
// bpoints := bpoints * 1.2 ;
47293: LD_ADDR_VAR 0 10
47297: PUSH
47298: LD_VAR 0 10
47302: PUSH
47303: LD_REAL  1.20000000000000E+0000
47306: MUL
47307: ST_TO_ADDR
// end ; unit_building :
47308: GO 47322
47310: LD_INT 3
47312: DOUBLE
47313: EQUAL
47314: IFTRUE 47318
47316: GO 47321
47318: POP
// ; end ;
47319: GO 47322
47321: POP
// for j = 1 to 3 do
47322: LD_ADDR_VAR 0 7
47326: PUSH
47327: DOUBLE
47328: LD_INT 1
47330: DEC
47331: ST_TO_ADDR
47332: LD_INT 3
47334: PUSH
47335: FOR_TO
47336: IFFALSE 47389
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
47338: LD_ADDR_VAR 0 5
47342: PUSH
47343: LD_VAR 0 5
47347: PPUSH
47348: LD_VAR 0 7
47352: PPUSH
47353: LD_VAR 0 5
47357: PUSH
47358: LD_VAR 0 7
47362: ARRAY
47363: PUSH
47364: LD_VAR 0 9
47368: PUSH
47369: LD_VAR 0 7
47373: ARRAY
47374: PUSH
47375: LD_VAR 0 10
47379: MUL
47380: PLUS
47381: PPUSH
47382: CALL_OW 1
47386: ST_TO_ADDR
47387: GO 47335
47389: POP
47390: POP
// end ;
47391: GO 45870
47393: POP
47394: POP
// result := Replace ( result , 4 , tmp ) ;
47395: LD_ADDR_VAR 0 5
47399: PUSH
47400: LD_VAR 0 5
47404: PPUSH
47405: LD_INT 4
47407: PPUSH
47408: LD_VAR 0 8
47412: PPUSH
47413: CALL_OW 1
47417: ST_TO_ADDR
// end ;
47418: LD_VAR 0 5
47422: RET
// export function DangerAtRange ( unit , range ) ; begin
47423: LD_INT 0
47425: PPUSH
// if not unit then
47426: LD_VAR 0 1
47430: NOT
47431: IFFALSE 47435
// exit ;
47433: GO 47480
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
47435: LD_ADDR_VAR 0 3
47439: PUSH
47440: LD_VAR 0 1
47444: PPUSH
47445: CALL_OW 255
47449: PPUSH
47450: LD_VAR 0 1
47454: PPUSH
47455: CALL_OW 250
47459: PPUSH
47460: LD_VAR 0 1
47464: PPUSH
47465: CALL_OW 251
47469: PPUSH
47470: LD_VAR 0 2
47474: PPUSH
47475: CALL 45722 0 4
47479: ST_TO_ADDR
// end ;
47480: LD_VAR 0 3
47484: RET
// export function DangerInArea ( side , area ) ; begin
47485: LD_INT 0
47487: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
47488: LD_ADDR_VAR 0 3
47492: PUSH
47493: LD_VAR 0 2
47497: PPUSH
47498: LD_INT 81
47500: PUSH
47501: LD_VAR 0 1
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PPUSH
47510: CALL_OW 70
47514: ST_TO_ADDR
// end ;
47515: LD_VAR 0 3
47519: RET
// export function IsExtension ( b ) ; begin
47520: LD_INT 0
47522: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
47523: LD_ADDR_VAR 0 2
47527: PUSH
47528: LD_VAR 0 1
47532: PUSH
47533: LD_INT 23
47535: PUSH
47536: LD_INT 20
47538: PUSH
47539: LD_INT 22
47541: PUSH
47542: LD_INT 17
47544: PUSH
47545: LD_INT 24
47547: PUSH
47548: LD_INT 21
47550: PUSH
47551: LD_INT 19
47553: PUSH
47554: LD_INT 16
47556: PUSH
47557: LD_INT 25
47559: PUSH
47560: LD_INT 18
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: LIST
47569: LIST
47570: LIST
47571: LIST
47572: LIST
47573: LIST
47574: IN
47575: ST_TO_ADDR
// end ;
47576: LD_VAR 0 2
47580: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
47581: LD_INT 0
47583: PPUSH
47584: PPUSH
47585: PPUSH
// result := [ ] ;
47586: LD_ADDR_VAR 0 4
47590: PUSH
47591: EMPTY
47592: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
47593: LD_ADDR_VAR 0 5
47597: PUSH
47598: LD_VAR 0 2
47602: PPUSH
47603: LD_INT 21
47605: PUSH
47606: LD_INT 3
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PPUSH
47613: CALL_OW 70
47617: ST_TO_ADDR
// if not tmp then
47618: LD_VAR 0 5
47622: NOT
47623: IFFALSE 47627
// exit ;
47625: GO 47691
// if checkLink then
47627: LD_VAR 0 3
47631: IFFALSE 47681
// begin for i in tmp do
47633: LD_ADDR_VAR 0 6
47637: PUSH
47638: LD_VAR 0 5
47642: PUSH
47643: FOR_IN
47644: IFFALSE 47679
// if GetBase ( i ) <> base then
47646: LD_VAR 0 6
47650: PPUSH
47651: CALL_OW 274
47655: PUSH
47656: LD_VAR 0 1
47660: NONEQUAL
47661: IFFALSE 47677
// ComLinkToBase ( base , i ) ;
47663: LD_VAR 0 1
47667: PPUSH
47668: LD_VAR 0 6
47672: PPUSH
47673: CALL_OW 169
47677: GO 47643
47679: POP
47680: POP
// end ; result := tmp ;
47681: LD_ADDR_VAR 0 4
47685: PUSH
47686: LD_VAR 0 5
47690: ST_TO_ADDR
// end ;
47691: LD_VAR 0 4
47695: RET
// export function ComComplete ( units , b ) ; var i ; begin
47696: LD_INT 0
47698: PPUSH
47699: PPUSH
// if not units then
47700: LD_VAR 0 1
47704: NOT
47705: IFFALSE 47709
// exit ;
47707: GO 47799
// for i in units do
47709: LD_ADDR_VAR 0 4
47713: PUSH
47714: LD_VAR 0 1
47718: PUSH
47719: FOR_IN
47720: IFFALSE 47797
// if BuildingStatus ( b ) = bs_build then
47722: LD_VAR 0 2
47726: PPUSH
47727: CALL_OW 461
47731: PUSH
47732: LD_INT 1
47734: EQUAL
47735: IFFALSE 47795
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
47737: LD_VAR 0 4
47741: PPUSH
47742: LD_STRING h
47744: PUSH
47745: LD_VAR 0 2
47749: PPUSH
47750: CALL_OW 250
47754: PUSH
47755: LD_VAR 0 2
47759: PPUSH
47760: CALL_OW 251
47764: PUSH
47765: LD_VAR 0 2
47769: PUSH
47770: LD_INT 0
47772: PUSH
47773: LD_INT 0
47775: PUSH
47776: LD_INT 0
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: LIST
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: PUSH
47788: EMPTY
47789: LIST
47790: PPUSH
47791: CALL_OW 446
47795: GO 47719
47797: POP
47798: POP
// end ;
47799: LD_VAR 0 3
47803: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
47804: LD_INT 0
47806: PPUSH
47807: PPUSH
47808: PPUSH
47809: PPUSH
47810: PPUSH
47811: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
47812: LD_VAR 0 1
47816: NOT
47817: PUSH
47818: LD_VAR 0 1
47822: PPUSH
47823: CALL_OW 263
47827: PUSH
47828: LD_INT 2
47830: NONEQUAL
47831: OR
47832: IFFALSE 47836
// exit ;
47834: GO 48152
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
47836: LD_ADDR_VAR 0 6
47840: PUSH
47841: LD_INT 22
47843: PUSH
47844: LD_VAR 0 1
47848: PPUSH
47849: CALL_OW 255
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: LD_INT 2
47860: PUSH
47861: LD_INT 30
47863: PUSH
47864: LD_INT 36
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 34
47873: PUSH
47874: LD_INT 31
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: LIST
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PPUSH
47890: CALL_OW 69
47894: ST_TO_ADDR
// if not tmp then
47895: LD_VAR 0 6
47899: NOT
47900: IFFALSE 47904
// exit ;
47902: GO 48152
// result := [ ] ;
47904: LD_ADDR_VAR 0 2
47908: PUSH
47909: EMPTY
47910: ST_TO_ADDR
// for i in tmp do
47911: LD_ADDR_VAR 0 3
47915: PUSH
47916: LD_VAR 0 6
47920: PUSH
47921: FOR_IN
47922: IFFALSE 47993
// begin t := UnitsInside ( i ) ;
47924: LD_ADDR_VAR 0 4
47928: PUSH
47929: LD_VAR 0 3
47933: PPUSH
47934: CALL_OW 313
47938: ST_TO_ADDR
// if t then
47939: LD_VAR 0 4
47943: IFFALSE 47991
// for j in t do
47945: LD_ADDR_VAR 0 7
47949: PUSH
47950: LD_VAR 0 4
47954: PUSH
47955: FOR_IN
47956: IFFALSE 47989
// result := Replace ( result , result + 1 , j ) ;
47958: LD_ADDR_VAR 0 2
47962: PUSH
47963: LD_VAR 0 2
47967: PPUSH
47968: LD_VAR 0 2
47972: PUSH
47973: LD_INT 1
47975: PLUS
47976: PPUSH
47977: LD_VAR 0 7
47981: PPUSH
47982: CALL_OW 1
47986: ST_TO_ADDR
47987: GO 47955
47989: POP
47990: POP
// end ;
47991: GO 47921
47993: POP
47994: POP
// if not result then
47995: LD_VAR 0 2
47999: NOT
48000: IFFALSE 48004
// exit ;
48002: GO 48152
// mech := result [ 1 ] ;
48004: LD_ADDR_VAR 0 5
48008: PUSH
48009: LD_VAR 0 2
48013: PUSH
48014: LD_INT 1
48016: ARRAY
48017: ST_TO_ADDR
// if result > 1 then
48018: LD_VAR 0 2
48022: PUSH
48023: LD_INT 1
48025: GREATER
48026: IFFALSE 48138
// begin for i = 2 to result do
48028: LD_ADDR_VAR 0 3
48032: PUSH
48033: DOUBLE
48034: LD_INT 2
48036: DEC
48037: ST_TO_ADDR
48038: LD_VAR 0 2
48042: PUSH
48043: FOR_TO
48044: IFFALSE 48136
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
48046: LD_ADDR_VAR 0 4
48050: PUSH
48051: LD_VAR 0 2
48055: PUSH
48056: LD_VAR 0 3
48060: ARRAY
48061: PPUSH
48062: LD_INT 3
48064: PPUSH
48065: CALL_OW 259
48069: PUSH
48070: LD_VAR 0 2
48074: PUSH
48075: LD_VAR 0 3
48079: ARRAY
48080: PPUSH
48081: CALL_OW 432
48085: MINUS
48086: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
48087: LD_VAR 0 4
48091: PUSH
48092: LD_VAR 0 5
48096: PPUSH
48097: LD_INT 3
48099: PPUSH
48100: CALL_OW 259
48104: PUSH
48105: LD_VAR 0 5
48109: PPUSH
48110: CALL_OW 432
48114: MINUS
48115: GREATEREQUAL
48116: IFFALSE 48134
// mech := result [ i ] ;
48118: LD_ADDR_VAR 0 5
48122: PUSH
48123: LD_VAR 0 2
48127: PUSH
48128: LD_VAR 0 3
48132: ARRAY
48133: ST_TO_ADDR
// end ;
48134: GO 48043
48136: POP
48137: POP
// end ; ComLinkTo ( vehicle , mech ) ;
48138: LD_VAR 0 1
48142: PPUSH
48143: LD_VAR 0 5
48147: PPUSH
48148: CALL_OW 135
// end ;
48152: LD_VAR 0 2
48156: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
48157: LD_INT 0
48159: PPUSH
48160: PPUSH
48161: PPUSH
48162: PPUSH
48163: PPUSH
48164: PPUSH
48165: PPUSH
48166: PPUSH
48167: PPUSH
48168: PPUSH
48169: PPUSH
48170: PPUSH
48171: PPUSH
// result := [ ] ;
48172: LD_ADDR_VAR 0 7
48176: PUSH
48177: EMPTY
48178: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
48179: LD_VAR 0 1
48183: PPUSH
48184: CALL_OW 266
48188: PUSH
48189: LD_INT 0
48191: PUSH
48192: LD_INT 1
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: IN
48199: NOT
48200: IFFALSE 48204
// exit ;
48202: GO 49838
// if name then
48204: LD_VAR 0 3
48208: IFFALSE 48224
// SetBName ( base_dep , name ) ;
48210: LD_VAR 0 1
48214: PPUSH
48215: LD_VAR 0 3
48219: PPUSH
48220: CALL_OW 500
// base := GetBase ( base_dep ) ;
48224: LD_ADDR_VAR 0 15
48228: PUSH
48229: LD_VAR 0 1
48233: PPUSH
48234: CALL_OW 274
48238: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
48239: LD_ADDR_VAR 0 16
48243: PUSH
48244: LD_VAR 0 1
48248: PPUSH
48249: CALL_OW 255
48253: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
48254: LD_ADDR_VAR 0 17
48258: PUSH
48259: LD_VAR 0 1
48263: PPUSH
48264: CALL_OW 248
48268: ST_TO_ADDR
// if sources then
48269: LD_VAR 0 5
48273: IFFALSE 48320
// for i = 1 to 3 do
48275: LD_ADDR_VAR 0 8
48279: PUSH
48280: DOUBLE
48281: LD_INT 1
48283: DEC
48284: ST_TO_ADDR
48285: LD_INT 3
48287: PUSH
48288: FOR_TO
48289: IFFALSE 48318
// AddResourceType ( base , i , sources [ i ] ) ;
48291: LD_VAR 0 15
48295: PPUSH
48296: LD_VAR 0 8
48300: PPUSH
48301: LD_VAR 0 5
48305: PUSH
48306: LD_VAR 0 8
48310: ARRAY
48311: PPUSH
48312: CALL_OW 276
48316: GO 48288
48318: POP
48319: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
48320: LD_ADDR_VAR 0 18
48324: PUSH
48325: LD_VAR 0 15
48329: PPUSH
48330: LD_VAR 0 2
48334: PPUSH
48335: LD_INT 1
48337: PPUSH
48338: CALL 47581 0 3
48342: ST_TO_ADDR
// InitHc ;
48343: CALL_OW 19
// InitUc ;
48347: CALL_OW 18
// uc_side := side ;
48351: LD_ADDR_OWVAR 20
48355: PUSH
48356: LD_VAR 0 16
48360: ST_TO_ADDR
// uc_nation := nation ;
48361: LD_ADDR_OWVAR 21
48365: PUSH
48366: LD_VAR 0 17
48370: ST_TO_ADDR
// if buildings then
48371: LD_VAR 0 18
48375: IFFALSE 49697
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
48377: LD_ADDR_VAR 0 19
48381: PUSH
48382: LD_VAR 0 18
48386: PPUSH
48387: LD_INT 2
48389: PUSH
48390: LD_INT 30
48392: PUSH
48393: LD_INT 29
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: PUSH
48400: LD_INT 30
48402: PUSH
48403: LD_INT 30
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: LIST
48414: PPUSH
48415: CALL_OW 72
48419: ST_TO_ADDR
// if tmp then
48420: LD_VAR 0 19
48424: IFFALSE 48472
// for i in tmp do
48426: LD_ADDR_VAR 0 8
48430: PUSH
48431: LD_VAR 0 19
48435: PUSH
48436: FOR_IN
48437: IFFALSE 48470
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
48439: LD_VAR 0 8
48443: PPUSH
48444: CALL_OW 250
48448: PPUSH
48449: LD_VAR 0 8
48453: PPUSH
48454: CALL_OW 251
48458: PPUSH
48459: LD_VAR 0 16
48463: PPUSH
48464: CALL_OW 441
48468: GO 48436
48470: POP
48471: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
48472: LD_VAR 0 18
48476: PPUSH
48477: LD_INT 2
48479: PUSH
48480: LD_INT 30
48482: PUSH
48483: LD_INT 32
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: PUSH
48490: LD_INT 30
48492: PUSH
48493: LD_INT 33
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: LIST
48504: PPUSH
48505: CALL_OW 72
48509: IFFALSE 48597
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
48511: LD_ADDR_VAR 0 8
48515: PUSH
48516: LD_VAR 0 18
48520: PPUSH
48521: LD_INT 2
48523: PUSH
48524: LD_INT 30
48526: PUSH
48527: LD_INT 32
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 30
48536: PUSH
48537: LD_INT 33
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: LIST
48548: PPUSH
48549: CALL_OW 72
48553: PUSH
48554: FOR_IN
48555: IFFALSE 48595
// begin if not GetBWeapon ( i ) then
48557: LD_VAR 0 8
48561: PPUSH
48562: CALL_OW 269
48566: NOT
48567: IFFALSE 48593
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
48569: LD_VAR 0 8
48573: PPUSH
48574: LD_VAR 0 8
48578: PPUSH
48579: LD_VAR 0 2
48583: PPUSH
48584: CALL 49843 0 2
48588: PPUSH
48589: CALL_OW 431
// end ;
48593: GO 48554
48595: POP
48596: POP
// end ; for i = 1 to personel do
48597: LD_ADDR_VAR 0 8
48601: PUSH
48602: DOUBLE
48603: LD_INT 1
48605: DEC
48606: ST_TO_ADDR
48607: LD_VAR 0 6
48611: PUSH
48612: FOR_TO
48613: IFFALSE 49677
// begin if i > 4 then
48615: LD_VAR 0 8
48619: PUSH
48620: LD_INT 4
48622: GREATER
48623: IFFALSE 48627
// break ;
48625: GO 49677
// case i of 1 :
48627: LD_VAR 0 8
48631: PUSH
48632: LD_INT 1
48634: DOUBLE
48635: EQUAL
48636: IFTRUE 48640
48638: GO 48720
48640: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
48641: LD_ADDR_VAR 0 12
48645: PUSH
48646: LD_VAR 0 18
48650: PPUSH
48651: LD_INT 22
48653: PUSH
48654: LD_VAR 0 16
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: LD_INT 58
48665: PUSH
48666: EMPTY
48667: LIST
48668: PUSH
48669: LD_INT 2
48671: PUSH
48672: LD_INT 30
48674: PUSH
48675: LD_INT 32
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 30
48684: PUSH
48685: LD_INT 4
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 30
48694: PUSH
48695: LD_INT 5
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: LIST
48706: LIST
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: LIST
48712: PPUSH
48713: CALL_OW 72
48717: ST_TO_ADDR
48718: GO 48942
48720: LD_INT 2
48722: DOUBLE
48723: EQUAL
48724: IFTRUE 48728
48726: GO 48790
48728: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
48729: LD_ADDR_VAR 0 12
48733: PUSH
48734: LD_VAR 0 18
48738: PPUSH
48739: LD_INT 22
48741: PUSH
48742: LD_VAR 0 16
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 2
48753: PUSH
48754: LD_INT 30
48756: PUSH
48757: LD_INT 0
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 30
48766: PUSH
48767: LD_INT 1
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: LIST
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PPUSH
48783: CALL_OW 72
48787: ST_TO_ADDR
48788: GO 48942
48790: LD_INT 3
48792: DOUBLE
48793: EQUAL
48794: IFTRUE 48798
48796: GO 48860
48798: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
48799: LD_ADDR_VAR 0 12
48803: PUSH
48804: LD_VAR 0 18
48808: PPUSH
48809: LD_INT 22
48811: PUSH
48812: LD_VAR 0 16
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PUSH
48821: LD_INT 2
48823: PUSH
48824: LD_INT 30
48826: PUSH
48827: LD_INT 2
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 30
48836: PUSH
48837: LD_INT 3
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: LIST
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PPUSH
48853: CALL_OW 72
48857: ST_TO_ADDR
48858: GO 48942
48860: LD_INT 4
48862: DOUBLE
48863: EQUAL
48864: IFTRUE 48868
48866: GO 48941
48868: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
48869: LD_ADDR_VAR 0 12
48873: PUSH
48874: LD_VAR 0 18
48878: PPUSH
48879: LD_INT 22
48881: PUSH
48882: LD_VAR 0 16
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: LD_INT 2
48893: PUSH
48894: LD_INT 30
48896: PUSH
48897: LD_INT 6
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 30
48906: PUSH
48907: LD_INT 7
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 30
48916: PUSH
48917: LD_INT 8
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PPUSH
48934: CALL_OW 72
48938: ST_TO_ADDR
48939: GO 48942
48941: POP
// if i = 1 then
48942: LD_VAR 0 8
48946: PUSH
48947: LD_INT 1
48949: EQUAL
48950: IFFALSE 49061
// begin tmp := [ ] ;
48952: LD_ADDR_VAR 0 19
48956: PUSH
48957: EMPTY
48958: ST_TO_ADDR
// for j in f do
48959: LD_ADDR_VAR 0 9
48963: PUSH
48964: LD_VAR 0 12
48968: PUSH
48969: FOR_IN
48970: IFFALSE 49043
// if GetBType ( j ) = b_bunker then
48972: LD_VAR 0 9
48976: PPUSH
48977: CALL_OW 266
48981: PUSH
48982: LD_INT 32
48984: EQUAL
48985: IFFALSE 49012
// tmp := Insert ( tmp , 1 , j ) else
48987: LD_ADDR_VAR 0 19
48991: PUSH
48992: LD_VAR 0 19
48996: PPUSH
48997: LD_INT 1
48999: PPUSH
49000: LD_VAR 0 9
49004: PPUSH
49005: CALL_OW 2
49009: ST_TO_ADDR
49010: GO 49041
// tmp := Insert ( tmp , tmp + 1 , j ) ;
49012: LD_ADDR_VAR 0 19
49016: PUSH
49017: LD_VAR 0 19
49021: PPUSH
49022: LD_VAR 0 19
49026: PUSH
49027: LD_INT 1
49029: PLUS
49030: PPUSH
49031: LD_VAR 0 9
49035: PPUSH
49036: CALL_OW 2
49040: ST_TO_ADDR
49041: GO 48969
49043: POP
49044: POP
// if tmp then
49045: LD_VAR 0 19
49049: IFFALSE 49061
// f := tmp ;
49051: LD_ADDR_VAR 0 12
49055: PUSH
49056: LD_VAR 0 19
49060: ST_TO_ADDR
// end ; x := personel [ i ] ;
49061: LD_ADDR_VAR 0 13
49065: PUSH
49066: LD_VAR 0 6
49070: PUSH
49071: LD_VAR 0 8
49075: ARRAY
49076: ST_TO_ADDR
// if x = - 1 then
49077: LD_VAR 0 13
49081: PUSH
49082: LD_INT 1
49084: NEG
49085: EQUAL
49086: IFFALSE 49295
// begin for j in f do
49088: LD_ADDR_VAR 0 9
49092: PUSH
49093: LD_VAR 0 12
49097: PUSH
49098: FOR_IN
49099: IFFALSE 49291
// repeat InitHc ;
49101: CALL_OW 19
// if GetBType ( j ) = b_barracks then
49105: LD_VAR 0 9
49109: PPUSH
49110: CALL_OW 266
49114: PUSH
49115: LD_INT 5
49117: EQUAL
49118: IFFALSE 49188
// begin if UnitsInside ( j ) < 3 then
49120: LD_VAR 0 9
49124: PPUSH
49125: CALL_OW 313
49129: PUSH
49130: LD_INT 3
49132: LESS
49133: IFFALSE 49169
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49135: LD_INT 0
49137: PPUSH
49138: LD_INT 5
49140: PUSH
49141: LD_INT 8
49143: PUSH
49144: LD_INT 9
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: LIST
49151: PUSH
49152: LD_VAR 0 17
49156: ARRAY
49157: PPUSH
49158: LD_VAR 0 4
49162: PPUSH
49163: CALL_OW 380
49167: GO 49186
// PrepareHuman ( false , i , skill ) ;
49169: LD_INT 0
49171: PPUSH
49172: LD_VAR 0 8
49176: PPUSH
49177: LD_VAR 0 4
49181: PPUSH
49182: CALL_OW 380
// end else
49186: GO 49205
// PrepareHuman ( false , i , skill ) ;
49188: LD_INT 0
49190: PPUSH
49191: LD_VAR 0 8
49195: PPUSH
49196: LD_VAR 0 4
49200: PPUSH
49201: CALL_OW 380
// un := CreateHuman ;
49205: LD_ADDR_VAR 0 14
49209: PUSH
49210: CALL_OW 44
49214: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49215: LD_ADDR_VAR 0 7
49219: PUSH
49220: LD_VAR 0 7
49224: PPUSH
49225: LD_INT 1
49227: PPUSH
49228: LD_VAR 0 14
49232: PPUSH
49233: CALL_OW 2
49237: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
49238: LD_VAR 0 14
49242: PPUSH
49243: LD_VAR 0 9
49247: PPUSH
49248: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
49252: LD_VAR 0 9
49256: PPUSH
49257: CALL_OW 313
49261: PUSH
49262: LD_INT 6
49264: EQUAL
49265: PUSH
49266: LD_VAR 0 9
49270: PPUSH
49271: CALL_OW 266
49275: PUSH
49276: LD_INT 32
49278: PUSH
49279: LD_INT 31
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: IN
49286: OR
49287: IFFALSE 49101
49289: GO 49098
49291: POP
49292: POP
// end else
49293: GO 49675
// for j = 1 to x do
49295: LD_ADDR_VAR 0 9
49299: PUSH
49300: DOUBLE
49301: LD_INT 1
49303: DEC
49304: ST_TO_ADDR
49305: LD_VAR 0 13
49309: PUSH
49310: FOR_TO
49311: IFFALSE 49673
// begin InitHc ;
49313: CALL_OW 19
// if not f then
49317: LD_VAR 0 12
49321: NOT
49322: IFFALSE 49411
// begin PrepareHuman ( false , i , skill ) ;
49324: LD_INT 0
49326: PPUSH
49327: LD_VAR 0 8
49331: PPUSH
49332: LD_VAR 0 4
49336: PPUSH
49337: CALL_OW 380
// un := CreateHuman ;
49341: LD_ADDR_VAR 0 14
49345: PUSH
49346: CALL_OW 44
49350: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49351: LD_ADDR_VAR 0 7
49355: PUSH
49356: LD_VAR 0 7
49360: PPUSH
49361: LD_INT 1
49363: PPUSH
49364: LD_VAR 0 14
49368: PPUSH
49369: CALL_OW 2
49373: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49374: LD_VAR 0 14
49378: PPUSH
49379: LD_VAR 0 1
49383: PPUSH
49384: CALL_OW 250
49388: PPUSH
49389: LD_VAR 0 1
49393: PPUSH
49394: CALL_OW 251
49398: PPUSH
49399: LD_INT 10
49401: PPUSH
49402: LD_INT 0
49404: PPUSH
49405: CALL_OW 50
// continue ;
49409: GO 49310
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
49411: LD_VAR 0 12
49415: PUSH
49416: LD_INT 1
49418: ARRAY
49419: PPUSH
49420: CALL_OW 313
49424: PUSH
49425: LD_VAR 0 12
49429: PUSH
49430: LD_INT 1
49432: ARRAY
49433: PPUSH
49434: CALL_OW 266
49438: PUSH
49439: LD_INT 32
49441: PUSH
49442: LD_INT 31
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: IN
49449: AND
49450: PUSH
49451: LD_VAR 0 12
49455: PUSH
49456: LD_INT 1
49458: ARRAY
49459: PPUSH
49460: CALL_OW 313
49464: PUSH
49465: LD_INT 6
49467: EQUAL
49468: OR
49469: IFFALSE 49489
// f := Delete ( f , 1 ) ;
49471: LD_ADDR_VAR 0 12
49475: PUSH
49476: LD_VAR 0 12
49480: PPUSH
49481: LD_INT 1
49483: PPUSH
49484: CALL_OW 3
49488: ST_TO_ADDR
// if not f then
49489: LD_VAR 0 12
49493: NOT
49494: IFFALSE 49512
// begin x := x + 2 ;
49496: LD_ADDR_VAR 0 13
49500: PUSH
49501: LD_VAR 0 13
49505: PUSH
49506: LD_INT 2
49508: PLUS
49509: ST_TO_ADDR
// continue ;
49510: GO 49310
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
49512: LD_VAR 0 12
49516: PUSH
49517: LD_INT 1
49519: ARRAY
49520: PPUSH
49521: CALL_OW 266
49525: PUSH
49526: LD_INT 5
49528: EQUAL
49529: IFFALSE 49603
// begin if UnitsInside ( f [ 1 ] ) < 3 then
49531: LD_VAR 0 12
49535: PUSH
49536: LD_INT 1
49538: ARRAY
49539: PPUSH
49540: CALL_OW 313
49544: PUSH
49545: LD_INT 3
49547: LESS
49548: IFFALSE 49584
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49550: LD_INT 0
49552: PPUSH
49553: LD_INT 5
49555: PUSH
49556: LD_INT 8
49558: PUSH
49559: LD_INT 9
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: LIST
49566: PUSH
49567: LD_VAR 0 17
49571: ARRAY
49572: PPUSH
49573: LD_VAR 0 4
49577: PPUSH
49578: CALL_OW 380
49582: GO 49601
// PrepareHuman ( false , i , skill ) ;
49584: LD_INT 0
49586: PPUSH
49587: LD_VAR 0 8
49591: PPUSH
49592: LD_VAR 0 4
49596: PPUSH
49597: CALL_OW 380
// end else
49601: GO 49620
// PrepareHuman ( false , i , skill ) ;
49603: LD_INT 0
49605: PPUSH
49606: LD_VAR 0 8
49610: PPUSH
49611: LD_VAR 0 4
49615: PPUSH
49616: CALL_OW 380
// un := CreateHuman ;
49620: LD_ADDR_VAR 0 14
49624: PUSH
49625: CALL_OW 44
49629: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49630: LD_ADDR_VAR 0 7
49634: PUSH
49635: LD_VAR 0 7
49639: PPUSH
49640: LD_INT 1
49642: PPUSH
49643: LD_VAR 0 14
49647: PPUSH
49648: CALL_OW 2
49652: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
49653: LD_VAR 0 14
49657: PPUSH
49658: LD_VAR 0 12
49662: PUSH
49663: LD_INT 1
49665: ARRAY
49666: PPUSH
49667: CALL_OW 52
// end ;
49671: GO 49310
49673: POP
49674: POP
// end ;
49675: GO 48612
49677: POP
49678: POP
// result := result ^ buildings ;
49679: LD_ADDR_VAR 0 7
49683: PUSH
49684: LD_VAR 0 7
49688: PUSH
49689: LD_VAR 0 18
49693: ADD
49694: ST_TO_ADDR
// end else
49695: GO 49838
// begin for i = 1 to personel do
49697: LD_ADDR_VAR 0 8
49701: PUSH
49702: DOUBLE
49703: LD_INT 1
49705: DEC
49706: ST_TO_ADDR
49707: LD_VAR 0 6
49711: PUSH
49712: FOR_TO
49713: IFFALSE 49836
// begin if i > 4 then
49715: LD_VAR 0 8
49719: PUSH
49720: LD_INT 4
49722: GREATER
49723: IFFALSE 49727
// break ;
49725: GO 49836
// x := personel [ i ] ;
49727: LD_ADDR_VAR 0 13
49731: PUSH
49732: LD_VAR 0 6
49736: PUSH
49737: LD_VAR 0 8
49741: ARRAY
49742: ST_TO_ADDR
// if x = - 1 then
49743: LD_VAR 0 13
49747: PUSH
49748: LD_INT 1
49750: NEG
49751: EQUAL
49752: IFFALSE 49756
// continue ;
49754: GO 49712
// PrepareHuman ( false , i , skill ) ;
49756: LD_INT 0
49758: PPUSH
49759: LD_VAR 0 8
49763: PPUSH
49764: LD_VAR 0 4
49768: PPUSH
49769: CALL_OW 380
// un := CreateHuman ;
49773: LD_ADDR_VAR 0 14
49777: PUSH
49778: CALL_OW 44
49782: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49783: LD_VAR 0 14
49787: PPUSH
49788: LD_VAR 0 1
49792: PPUSH
49793: CALL_OW 250
49797: PPUSH
49798: LD_VAR 0 1
49802: PPUSH
49803: CALL_OW 251
49807: PPUSH
49808: LD_INT 10
49810: PPUSH
49811: LD_INT 0
49813: PPUSH
49814: CALL_OW 50
// result := result ^ un ;
49818: LD_ADDR_VAR 0 7
49822: PUSH
49823: LD_VAR 0 7
49827: PUSH
49828: LD_VAR 0 14
49832: ADD
49833: ST_TO_ADDR
// end ;
49834: GO 49712
49836: POP
49837: POP
// end ; end ;
49838: LD_VAR 0 7
49842: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
49843: LD_INT 0
49845: PPUSH
49846: PPUSH
49847: PPUSH
49848: PPUSH
49849: PPUSH
49850: PPUSH
49851: PPUSH
49852: PPUSH
49853: PPUSH
49854: PPUSH
49855: PPUSH
49856: PPUSH
49857: PPUSH
49858: PPUSH
49859: PPUSH
49860: PPUSH
// result := false ;
49861: LD_ADDR_VAR 0 3
49865: PUSH
49866: LD_INT 0
49868: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
49869: LD_VAR 0 1
49873: NOT
49874: PUSH
49875: LD_VAR 0 1
49879: PPUSH
49880: CALL_OW 266
49884: PUSH
49885: LD_INT 32
49887: PUSH
49888: LD_INT 33
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: IN
49895: NOT
49896: OR
49897: IFFALSE 49901
// exit ;
49899: GO 51010
// nat := GetNation ( tower ) ;
49901: LD_ADDR_VAR 0 12
49905: PUSH
49906: LD_VAR 0 1
49910: PPUSH
49911: CALL_OW 248
49915: ST_TO_ADDR
// side := GetSide ( tower ) ;
49916: LD_ADDR_VAR 0 16
49920: PUSH
49921: LD_VAR 0 1
49925: PPUSH
49926: CALL_OW 255
49930: ST_TO_ADDR
// x := GetX ( tower ) ;
49931: LD_ADDR_VAR 0 10
49935: PUSH
49936: LD_VAR 0 1
49940: PPUSH
49941: CALL_OW 250
49945: ST_TO_ADDR
// y := GetY ( tower ) ;
49946: LD_ADDR_VAR 0 11
49950: PUSH
49951: LD_VAR 0 1
49955: PPUSH
49956: CALL_OW 251
49960: ST_TO_ADDR
// if not x or not y then
49961: LD_VAR 0 10
49965: NOT
49966: PUSH
49967: LD_VAR 0 11
49971: NOT
49972: OR
49973: IFFALSE 49977
// exit ;
49975: GO 51010
// weapon := 0 ;
49977: LD_ADDR_VAR 0 18
49981: PUSH
49982: LD_INT 0
49984: ST_TO_ADDR
// fac_list := [ ] ;
49985: LD_ADDR_VAR 0 17
49989: PUSH
49990: EMPTY
49991: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
49992: LD_ADDR_VAR 0 6
49996: PUSH
49997: LD_VAR 0 1
50001: PPUSH
50002: CALL_OW 274
50006: PPUSH
50007: LD_VAR 0 2
50011: PPUSH
50012: LD_INT 0
50014: PPUSH
50015: CALL 47581 0 3
50019: PPUSH
50020: LD_INT 30
50022: PUSH
50023: LD_INT 3
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PPUSH
50030: CALL_OW 72
50034: ST_TO_ADDR
// if not factories then
50035: LD_VAR 0 6
50039: NOT
50040: IFFALSE 50044
// exit ;
50042: GO 51010
// for i in factories do
50044: LD_ADDR_VAR 0 8
50048: PUSH
50049: LD_VAR 0 6
50053: PUSH
50054: FOR_IN
50055: IFFALSE 50080
// fac_list := fac_list union AvailableWeaponList ( i ) ;
50057: LD_ADDR_VAR 0 17
50061: PUSH
50062: LD_VAR 0 17
50066: PUSH
50067: LD_VAR 0 8
50071: PPUSH
50072: CALL_OW 478
50076: UNION
50077: ST_TO_ADDR
50078: GO 50054
50080: POP
50081: POP
// if not fac_list then
50082: LD_VAR 0 17
50086: NOT
50087: IFFALSE 50091
// exit ;
50089: GO 51010
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
50091: LD_ADDR_VAR 0 5
50095: PUSH
50096: LD_INT 4
50098: PUSH
50099: LD_INT 5
50101: PUSH
50102: LD_INT 9
50104: PUSH
50105: LD_INT 10
50107: PUSH
50108: LD_INT 6
50110: PUSH
50111: LD_INT 7
50113: PUSH
50114: LD_INT 11
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 27
50128: PUSH
50129: LD_INT 28
50131: PUSH
50132: LD_INT 26
50134: PUSH
50135: LD_INT 30
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 43
50146: PUSH
50147: LD_INT 44
50149: PUSH
50150: LD_INT 46
50152: PUSH
50153: LD_INT 45
50155: PUSH
50156: LD_INT 47
50158: PUSH
50159: LD_INT 49
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: LIST
50166: LIST
50167: LIST
50168: LIST
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: LIST
50174: PUSH
50175: LD_VAR 0 12
50179: ARRAY
50180: ST_TO_ADDR
// list := list isect fac_list ;
50181: LD_ADDR_VAR 0 5
50185: PUSH
50186: LD_VAR 0 5
50190: PUSH
50191: LD_VAR 0 17
50195: ISECT
50196: ST_TO_ADDR
// if not list then
50197: LD_VAR 0 5
50201: NOT
50202: IFFALSE 50206
// exit ;
50204: GO 51010
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
50206: LD_VAR 0 12
50210: PUSH
50211: LD_INT 3
50213: EQUAL
50214: PUSH
50215: LD_INT 49
50217: PUSH
50218: LD_VAR 0 5
50222: IN
50223: AND
50224: PUSH
50225: LD_INT 31
50227: PPUSH
50228: LD_VAR 0 16
50232: PPUSH
50233: CALL_OW 321
50237: PUSH
50238: LD_INT 2
50240: EQUAL
50241: AND
50242: IFFALSE 50302
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
50244: LD_INT 22
50246: PUSH
50247: LD_VAR 0 16
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: PUSH
50256: LD_INT 35
50258: PUSH
50259: LD_INT 49
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 91
50268: PUSH
50269: LD_VAR 0 1
50273: PUSH
50274: LD_INT 10
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: LIST
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: LIST
50286: PPUSH
50287: CALL_OW 69
50291: NOT
50292: IFFALSE 50302
// weapon := ru_time_lapser ;
50294: LD_ADDR_VAR 0 18
50298: PUSH
50299: LD_INT 49
50301: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
50302: LD_VAR 0 12
50306: PUSH
50307: LD_INT 1
50309: PUSH
50310: LD_INT 2
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: IN
50317: PUSH
50318: LD_INT 11
50320: PUSH
50321: LD_VAR 0 5
50325: IN
50326: PUSH
50327: LD_INT 30
50329: PUSH
50330: LD_VAR 0 5
50334: IN
50335: OR
50336: AND
50337: PUSH
50338: LD_INT 6
50340: PPUSH
50341: LD_VAR 0 16
50345: PPUSH
50346: CALL_OW 321
50350: PUSH
50351: LD_INT 2
50353: EQUAL
50354: AND
50355: IFFALSE 50520
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
50357: LD_INT 22
50359: PUSH
50360: LD_VAR 0 16
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 2
50371: PUSH
50372: LD_INT 35
50374: PUSH
50375: LD_INT 11
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 35
50384: PUSH
50385: LD_INT 30
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 91
50399: PUSH
50400: LD_VAR 0 1
50404: PUSH
50405: LD_INT 18
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: LIST
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: LIST
50417: PPUSH
50418: CALL_OW 69
50422: NOT
50423: PUSH
50424: LD_INT 22
50426: PUSH
50427: LD_VAR 0 16
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PUSH
50436: LD_INT 2
50438: PUSH
50439: LD_INT 30
50441: PUSH
50442: LD_INT 32
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: LD_INT 30
50451: PUSH
50452: LD_INT 33
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 91
50466: PUSH
50467: LD_VAR 0 1
50471: PUSH
50472: LD_INT 12
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: LIST
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: LIST
50484: PUSH
50485: EMPTY
50486: LIST
50487: PPUSH
50488: CALL_OW 69
50492: PUSH
50493: LD_INT 2
50495: GREATER
50496: AND
50497: IFFALSE 50520
// weapon := [ us_radar , ar_radar ] [ nat ] ;
50499: LD_ADDR_VAR 0 18
50503: PUSH
50504: LD_INT 11
50506: PUSH
50507: LD_INT 30
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: LD_VAR 0 12
50518: ARRAY
50519: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
50520: LD_VAR 0 18
50524: NOT
50525: PUSH
50526: LD_INT 40
50528: PPUSH
50529: LD_VAR 0 16
50533: PPUSH
50534: CALL_OW 321
50538: PUSH
50539: LD_INT 2
50541: EQUAL
50542: AND
50543: PUSH
50544: LD_INT 7
50546: PUSH
50547: LD_VAR 0 5
50551: IN
50552: PUSH
50553: LD_INT 28
50555: PUSH
50556: LD_VAR 0 5
50560: IN
50561: OR
50562: PUSH
50563: LD_INT 45
50565: PUSH
50566: LD_VAR 0 5
50570: IN
50571: OR
50572: AND
50573: IFFALSE 50827
// begin hex := GetHexInfo ( x , y ) ;
50575: LD_ADDR_VAR 0 4
50579: PUSH
50580: LD_VAR 0 10
50584: PPUSH
50585: LD_VAR 0 11
50589: PPUSH
50590: CALL_OW 546
50594: ST_TO_ADDR
// if hex [ 1 ] then
50595: LD_VAR 0 4
50599: PUSH
50600: LD_INT 1
50602: ARRAY
50603: IFFALSE 50607
// exit ;
50605: GO 51010
// height := hex [ 2 ] ;
50607: LD_ADDR_VAR 0 15
50611: PUSH
50612: LD_VAR 0 4
50616: PUSH
50617: LD_INT 2
50619: ARRAY
50620: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
50621: LD_ADDR_VAR 0 14
50625: PUSH
50626: LD_INT 0
50628: PUSH
50629: LD_INT 2
50631: PUSH
50632: LD_INT 3
50634: PUSH
50635: LD_INT 5
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: LIST
50642: LIST
50643: ST_TO_ADDR
// for i in tmp do
50644: LD_ADDR_VAR 0 8
50648: PUSH
50649: LD_VAR 0 14
50653: PUSH
50654: FOR_IN
50655: IFFALSE 50825
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
50657: LD_ADDR_VAR 0 9
50661: PUSH
50662: LD_VAR 0 10
50666: PPUSH
50667: LD_VAR 0 8
50671: PPUSH
50672: LD_INT 5
50674: PPUSH
50675: CALL_OW 272
50679: PUSH
50680: LD_VAR 0 11
50684: PPUSH
50685: LD_VAR 0 8
50689: PPUSH
50690: LD_INT 5
50692: PPUSH
50693: CALL_OW 273
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
50702: LD_VAR 0 9
50706: PUSH
50707: LD_INT 1
50709: ARRAY
50710: PPUSH
50711: LD_VAR 0 9
50715: PUSH
50716: LD_INT 2
50718: ARRAY
50719: PPUSH
50720: CALL_OW 488
50724: IFFALSE 50823
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
50726: LD_ADDR_VAR 0 4
50730: PUSH
50731: LD_VAR 0 9
50735: PUSH
50736: LD_INT 1
50738: ARRAY
50739: PPUSH
50740: LD_VAR 0 9
50744: PUSH
50745: LD_INT 2
50747: ARRAY
50748: PPUSH
50749: CALL_OW 546
50753: ST_TO_ADDR
// if hex [ 1 ] then
50754: LD_VAR 0 4
50758: PUSH
50759: LD_INT 1
50761: ARRAY
50762: IFFALSE 50766
// continue ;
50764: GO 50654
// h := hex [ 2 ] ;
50766: LD_ADDR_VAR 0 13
50770: PUSH
50771: LD_VAR 0 4
50775: PUSH
50776: LD_INT 2
50778: ARRAY
50779: ST_TO_ADDR
// if h + 7 < height then
50780: LD_VAR 0 13
50784: PUSH
50785: LD_INT 7
50787: PLUS
50788: PUSH
50789: LD_VAR 0 15
50793: LESS
50794: IFFALSE 50823
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
50796: LD_ADDR_VAR 0 18
50800: PUSH
50801: LD_INT 7
50803: PUSH
50804: LD_INT 28
50806: PUSH
50807: LD_INT 45
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: LIST
50814: PUSH
50815: LD_VAR 0 12
50819: ARRAY
50820: ST_TO_ADDR
// break ;
50821: GO 50825
// end ; end ; end ;
50823: GO 50654
50825: POP
50826: POP
// end ; if not weapon then
50827: LD_VAR 0 18
50831: NOT
50832: IFFALSE 50892
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
50834: LD_ADDR_VAR 0 5
50838: PUSH
50839: LD_VAR 0 5
50843: PUSH
50844: LD_INT 11
50846: PUSH
50847: LD_INT 30
50849: PUSH
50850: LD_INT 49
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: LIST
50857: DIFF
50858: ST_TO_ADDR
// if not list then
50859: LD_VAR 0 5
50863: NOT
50864: IFFALSE 50868
// exit ;
50866: GO 51010
// weapon := list [ rand ( 1 , list ) ] ;
50868: LD_ADDR_VAR 0 18
50872: PUSH
50873: LD_VAR 0 5
50877: PUSH
50878: LD_INT 1
50880: PPUSH
50881: LD_VAR 0 5
50885: PPUSH
50886: CALL_OW 12
50890: ARRAY
50891: ST_TO_ADDR
// end ; if weapon then
50892: LD_VAR 0 18
50896: IFFALSE 51010
// begin tmp := CostOfWeapon ( weapon ) ;
50898: LD_ADDR_VAR 0 14
50902: PUSH
50903: LD_VAR 0 18
50907: PPUSH
50908: CALL_OW 451
50912: ST_TO_ADDR
// j := GetBase ( tower ) ;
50913: LD_ADDR_VAR 0 9
50917: PUSH
50918: LD_VAR 0 1
50922: PPUSH
50923: CALL_OW 274
50927: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
50928: LD_VAR 0 9
50932: PPUSH
50933: LD_INT 1
50935: PPUSH
50936: CALL_OW 275
50940: PUSH
50941: LD_VAR 0 14
50945: PUSH
50946: LD_INT 1
50948: ARRAY
50949: GREATEREQUAL
50950: PUSH
50951: LD_VAR 0 9
50955: PPUSH
50956: LD_INT 2
50958: PPUSH
50959: CALL_OW 275
50963: PUSH
50964: LD_VAR 0 14
50968: PUSH
50969: LD_INT 2
50971: ARRAY
50972: GREATEREQUAL
50973: AND
50974: PUSH
50975: LD_VAR 0 9
50979: PPUSH
50980: LD_INT 3
50982: PPUSH
50983: CALL_OW 275
50987: PUSH
50988: LD_VAR 0 14
50992: PUSH
50993: LD_INT 3
50995: ARRAY
50996: GREATEREQUAL
50997: AND
50998: IFFALSE 51010
// result := weapon ;
51000: LD_ADDR_VAR 0 3
51004: PUSH
51005: LD_VAR 0 18
51009: ST_TO_ADDR
// end ; end ;
51010: LD_VAR 0 3
51014: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
51015: LD_INT 0
51017: PPUSH
51018: PPUSH
// result := true ;
51019: LD_ADDR_VAR 0 3
51023: PUSH
51024: LD_INT 1
51026: ST_TO_ADDR
// if array1 = array2 then
51027: LD_VAR 0 1
51031: PUSH
51032: LD_VAR 0 2
51036: EQUAL
51037: IFFALSE 51097
// begin for i = 1 to array1 do
51039: LD_ADDR_VAR 0 4
51043: PUSH
51044: DOUBLE
51045: LD_INT 1
51047: DEC
51048: ST_TO_ADDR
51049: LD_VAR 0 1
51053: PUSH
51054: FOR_TO
51055: IFFALSE 51093
// if array1 [ i ] <> array2 [ i ] then
51057: LD_VAR 0 1
51061: PUSH
51062: LD_VAR 0 4
51066: ARRAY
51067: PUSH
51068: LD_VAR 0 2
51072: PUSH
51073: LD_VAR 0 4
51077: ARRAY
51078: NONEQUAL
51079: IFFALSE 51091
// begin result := false ;
51081: LD_ADDR_VAR 0 3
51085: PUSH
51086: LD_INT 0
51088: ST_TO_ADDR
// break ;
51089: GO 51093
// end ;
51091: GO 51054
51093: POP
51094: POP
// end else
51095: GO 51105
// result := false ;
51097: LD_ADDR_VAR 0 3
51101: PUSH
51102: LD_INT 0
51104: ST_TO_ADDR
// end ;
51105: LD_VAR 0 3
51109: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
51110: LD_INT 0
51112: PPUSH
51113: PPUSH
// if not array1 or not array2 then
51114: LD_VAR 0 1
51118: NOT
51119: PUSH
51120: LD_VAR 0 2
51124: NOT
51125: OR
51126: IFFALSE 51130
// exit ;
51128: GO 51194
// result := true ;
51130: LD_ADDR_VAR 0 3
51134: PUSH
51135: LD_INT 1
51137: ST_TO_ADDR
// for i = 1 to array1 do
51138: LD_ADDR_VAR 0 4
51142: PUSH
51143: DOUBLE
51144: LD_INT 1
51146: DEC
51147: ST_TO_ADDR
51148: LD_VAR 0 1
51152: PUSH
51153: FOR_TO
51154: IFFALSE 51192
// if array1 [ i ] <> array2 [ i ] then
51156: LD_VAR 0 1
51160: PUSH
51161: LD_VAR 0 4
51165: ARRAY
51166: PUSH
51167: LD_VAR 0 2
51171: PUSH
51172: LD_VAR 0 4
51176: ARRAY
51177: NONEQUAL
51178: IFFALSE 51190
// begin result := false ;
51180: LD_ADDR_VAR 0 3
51184: PUSH
51185: LD_INT 0
51187: ST_TO_ADDR
// break ;
51188: GO 51192
// end ;
51190: GO 51153
51192: POP
51193: POP
// end ;
51194: LD_VAR 0 3
51198: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
51199: LD_INT 0
51201: PPUSH
51202: PPUSH
51203: PPUSH
// pom := GetBase ( fac ) ;
51204: LD_ADDR_VAR 0 5
51208: PUSH
51209: LD_VAR 0 1
51213: PPUSH
51214: CALL_OW 274
51218: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
51219: LD_ADDR_VAR 0 4
51223: PUSH
51224: LD_VAR 0 2
51228: PUSH
51229: LD_INT 1
51231: ARRAY
51232: PPUSH
51233: LD_VAR 0 2
51237: PUSH
51238: LD_INT 2
51240: ARRAY
51241: PPUSH
51242: LD_VAR 0 2
51246: PUSH
51247: LD_INT 3
51249: ARRAY
51250: PPUSH
51251: LD_VAR 0 2
51255: PUSH
51256: LD_INT 4
51258: ARRAY
51259: PPUSH
51260: CALL_OW 449
51264: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51265: LD_ADDR_VAR 0 3
51269: PUSH
51270: LD_VAR 0 5
51274: PPUSH
51275: LD_INT 1
51277: PPUSH
51278: CALL_OW 275
51282: PUSH
51283: LD_VAR 0 4
51287: PUSH
51288: LD_INT 1
51290: ARRAY
51291: GREATEREQUAL
51292: PUSH
51293: LD_VAR 0 5
51297: PPUSH
51298: LD_INT 2
51300: PPUSH
51301: CALL_OW 275
51305: PUSH
51306: LD_VAR 0 4
51310: PUSH
51311: LD_INT 2
51313: ARRAY
51314: GREATEREQUAL
51315: AND
51316: PUSH
51317: LD_VAR 0 5
51321: PPUSH
51322: LD_INT 3
51324: PPUSH
51325: CALL_OW 275
51329: PUSH
51330: LD_VAR 0 4
51334: PUSH
51335: LD_INT 3
51337: ARRAY
51338: GREATEREQUAL
51339: AND
51340: ST_TO_ADDR
// end ;
51341: LD_VAR 0 3
51345: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
51346: LD_INT 0
51348: PPUSH
51349: PPUSH
51350: PPUSH
51351: PPUSH
// pom := GetBase ( building ) ;
51352: LD_ADDR_VAR 0 3
51356: PUSH
51357: LD_VAR 0 1
51361: PPUSH
51362: CALL_OW 274
51366: ST_TO_ADDR
// if not pom then
51367: LD_VAR 0 3
51371: NOT
51372: IFFALSE 51376
// exit ;
51374: GO 51546
// btype := GetBType ( building ) ;
51376: LD_ADDR_VAR 0 5
51380: PUSH
51381: LD_VAR 0 1
51385: PPUSH
51386: CALL_OW 266
51390: ST_TO_ADDR
// if btype = b_armoury then
51391: LD_VAR 0 5
51395: PUSH
51396: LD_INT 4
51398: EQUAL
51399: IFFALSE 51409
// btype := b_barracks ;
51401: LD_ADDR_VAR 0 5
51405: PUSH
51406: LD_INT 5
51408: ST_TO_ADDR
// if btype = b_depot then
51409: LD_VAR 0 5
51413: PUSH
51414: LD_INT 0
51416: EQUAL
51417: IFFALSE 51427
// btype := b_warehouse ;
51419: LD_ADDR_VAR 0 5
51423: PUSH
51424: LD_INT 1
51426: ST_TO_ADDR
// if btype = b_workshop then
51427: LD_VAR 0 5
51431: PUSH
51432: LD_INT 2
51434: EQUAL
51435: IFFALSE 51445
// btype := b_factory ;
51437: LD_ADDR_VAR 0 5
51441: PUSH
51442: LD_INT 3
51444: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51445: LD_ADDR_VAR 0 4
51449: PUSH
51450: LD_VAR 0 5
51454: PPUSH
51455: LD_VAR 0 1
51459: PPUSH
51460: CALL_OW 248
51464: PPUSH
51465: CALL_OW 450
51469: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51470: LD_ADDR_VAR 0 2
51474: PUSH
51475: LD_VAR 0 3
51479: PPUSH
51480: LD_INT 1
51482: PPUSH
51483: CALL_OW 275
51487: PUSH
51488: LD_VAR 0 4
51492: PUSH
51493: LD_INT 1
51495: ARRAY
51496: GREATEREQUAL
51497: PUSH
51498: LD_VAR 0 3
51502: PPUSH
51503: LD_INT 2
51505: PPUSH
51506: CALL_OW 275
51510: PUSH
51511: LD_VAR 0 4
51515: PUSH
51516: LD_INT 2
51518: ARRAY
51519: GREATEREQUAL
51520: AND
51521: PUSH
51522: LD_VAR 0 3
51526: PPUSH
51527: LD_INT 3
51529: PPUSH
51530: CALL_OW 275
51534: PUSH
51535: LD_VAR 0 4
51539: PUSH
51540: LD_INT 3
51542: ARRAY
51543: GREATEREQUAL
51544: AND
51545: ST_TO_ADDR
// end ;
51546: LD_VAR 0 2
51550: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
51551: LD_INT 0
51553: PPUSH
51554: PPUSH
51555: PPUSH
// pom := GetBase ( building ) ;
51556: LD_ADDR_VAR 0 4
51560: PUSH
51561: LD_VAR 0 1
51565: PPUSH
51566: CALL_OW 274
51570: ST_TO_ADDR
// if not pom then
51571: LD_VAR 0 4
51575: NOT
51576: IFFALSE 51580
// exit ;
51578: GO 51681
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51580: LD_ADDR_VAR 0 5
51584: PUSH
51585: LD_VAR 0 2
51589: PPUSH
51590: LD_VAR 0 1
51594: PPUSH
51595: CALL_OW 248
51599: PPUSH
51600: CALL_OW 450
51604: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51605: LD_ADDR_VAR 0 3
51609: PUSH
51610: LD_VAR 0 4
51614: PPUSH
51615: LD_INT 1
51617: PPUSH
51618: CALL_OW 275
51622: PUSH
51623: LD_VAR 0 5
51627: PUSH
51628: LD_INT 1
51630: ARRAY
51631: GREATEREQUAL
51632: PUSH
51633: LD_VAR 0 4
51637: PPUSH
51638: LD_INT 2
51640: PPUSH
51641: CALL_OW 275
51645: PUSH
51646: LD_VAR 0 5
51650: PUSH
51651: LD_INT 2
51653: ARRAY
51654: GREATEREQUAL
51655: AND
51656: PUSH
51657: LD_VAR 0 4
51661: PPUSH
51662: LD_INT 3
51664: PPUSH
51665: CALL_OW 275
51669: PUSH
51670: LD_VAR 0 5
51674: PUSH
51675: LD_INT 3
51677: ARRAY
51678: GREATEREQUAL
51679: AND
51680: ST_TO_ADDR
// end ;
51681: LD_VAR 0 3
51685: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
51686: LD_INT 0
51688: PPUSH
51689: PPUSH
51690: PPUSH
51691: PPUSH
51692: PPUSH
51693: PPUSH
51694: PPUSH
51695: PPUSH
51696: PPUSH
51697: PPUSH
51698: PPUSH
// result := false ;
51699: LD_ADDR_VAR 0 8
51703: PUSH
51704: LD_INT 0
51706: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
51707: LD_VAR 0 5
51711: NOT
51712: PUSH
51713: LD_VAR 0 1
51717: NOT
51718: OR
51719: PUSH
51720: LD_VAR 0 2
51724: NOT
51725: OR
51726: PUSH
51727: LD_VAR 0 3
51731: NOT
51732: OR
51733: IFFALSE 51737
// exit ;
51735: GO 52551
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
51737: LD_ADDR_VAR 0 14
51741: PUSH
51742: LD_VAR 0 1
51746: PPUSH
51747: LD_VAR 0 2
51751: PPUSH
51752: LD_VAR 0 3
51756: PPUSH
51757: LD_VAR 0 4
51761: PPUSH
51762: LD_VAR 0 5
51766: PUSH
51767: LD_INT 1
51769: ARRAY
51770: PPUSH
51771: CALL_OW 248
51775: PPUSH
51776: LD_INT 0
51778: PPUSH
51779: CALL 53804 0 6
51783: ST_TO_ADDR
// if not hexes then
51784: LD_VAR 0 14
51788: NOT
51789: IFFALSE 51793
// exit ;
51791: GO 52551
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51793: LD_ADDR_VAR 0 17
51797: PUSH
51798: LD_VAR 0 5
51802: PPUSH
51803: LD_INT 22
51805: PUSH
51806: LD_VAR 0 13
51810: PPUSH
51811: CALL_OW 255
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 2
51822: PUSH
51823: LD_INT 30
51825: PUSH
51826: LD_INT 0
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 30
51835: PUSH
51836: LD_INT 1
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: LIST
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PPUSH
51852: CALL_OW 72
51856: ST_TO_ADDR
// for i = 1 to hexes do
51857: LD_ADDR_VAR 0 9
51861: PUSH
51862: DOUBLE
51863: LD_INT 1
51865: DEC
51866: ST_TO_ADDR
51867: LD_VAR 0 14
51871: PUSH
51872: FOR_TO
51873: IFFALSE 52549
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51875: LD_ADDR_VAR 0 13
51879: PUSH
51880: LD_VAR 0 14
51884: PUSH
51885: LD_VAR 0 9
51889: ARRAY
51890: PUSH
51891: LD_INT 1
51893: ARRAY
51894: PPUSH
51895: LD_VAR 0 14
51899: PUSH
51900: LD_VAR 0 9
51904: ARRAY
51905: PUSH
51906: LD_INT 2
51908: ARRAY
51909: PPUSH
51910: CALL_OW 428
51914: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
51915: LD_VAR 0 14
51919: PUSH
51920: LD_VAR 0 9
51924: ARRAY
51925: PUSH
51926: LD_INT 1
51928: ARRAY
51929: PPUSH
51930: LD_VAR 0 14
51934: PUSH
51935: LD_VAR 0 9
51939: ARRAY
51940: PUSH
51941: LD_INT 2
51943: ARRAY
51944: PPUSH
51945: CALL_OW 351
51949: PUSH
51950: LD_VAR 0 14
51954: PUSH
51955: LD_VAR 0 9
51959: ARRAY
51960: PUSH
51961: LD_INT 1
51963: ARRAY
51964: PPUSH
51965: LD_VAR 0 14
51969: PUSH
51970: LD_VAR 0 9
51974: ARRAY
51975: PUSH
51976: LD_INT 2
51978: ARRAY
51979: PPUSH
51980: CALL_OW 488
51984: NOT
51985: OR
51986: PUSH
51987: LD_VAR 0 13
51991: PPUSH
51992: CALL_OW 247
51996: PUSH
51997: LD_INT 3
51999: EQUAL
52000: OR
52001: IFFALSE 52007
// exit ;
52003: POP
52004: POP
52005: GO 52551
// if not tmp then
52007: LD_VAR 0 13
52011: NOT
52012: IFFALSE 52016
// continue ;
52014: GO 51872
// result := true ;
52016: LD_ADDR_VAR 0 8
52020: PUSH
52021: LD_INT 1
52023: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
52024: LD_VAR 0 6
52028: PUSH
52029: LD_VAR 0 13
52033: PPUSH
52034: CALL_OW 247
52038: PUSH
52039: LD_INT 2
52041: EQUAL
52042: AND
52043: PUSH
52044: LD_VAR 0 13
52048: PPUSH
52049: CALL_OW 263
52053: PUSH
52054: LD_INT 1
52056: EQUAL
52057: AND
52058: IFFALSE 52222
// begin if IsDrivenBy ( tmp ) then
52060: LD_VAR 0 13
52064: PPUSH
52065: CALL_OW 311
52069: IFFALSE 52073
// continue ;
52071: GO 51872
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
52073: LD_VAR 0 6
52077: PPUSH
52078: LD_INT 3
52080: PUSH
52081: LD_INT 60
52083: PUSH
52084: EMPTY
52085: LIST
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: LD_INT 3
52093: PUSH
52094: LD_INT 55
52096: PUSH
52097: EMPTY
52098: LIST
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PPUSH
52108: CALL_OW 72
52112: IFFALSE 52220
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
52114: LD_ADDR_VAR 0 18
52118: PUSH
52119: LD_VAR 0 6
52123: PPUSH
52124: LD_INT 3
52126: PUSH
52127: LD_INT 60
52129: PUSH
52130: EMPTY
52131: LIST
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: PUSH
52137: LD_INT 3
52139: PUSH
52140: LD_INT 55
52142: PUSH
52143: EMPTY
52144: LIST
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PPUSH
52154: CALL_OW 72
52158: PUSH
52159: LD_INT 1
52161: ARRAY
52162: ST_TO_ADDR
// if IsInUnit ( driver ) then
52163: LD_VAR 0 18
52167: PPUSH
52168: CALL_OW 310
52172: IFFALSE 52183
// ComExit ( driver ) ;
52174: LD_VAR 0 18
52178: PPUSH
52179: CALL 77583 0 1
// AddComEnterUnit ( driver , tmp ) ;
52183: LD_VAR 0 18
52187: PPUSH
52188: LD_VAR 0 13
52192: PPUSH
52193: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
52197: LD_VAR 0 18
52201: PPUSH
52202: LD_VAR 0 7
52206: PPUSH
52207: CALL_OW 173
// AddComExitVehicle ( driver ) ;
52211: LD_VAR 0 18
52215: PPUSH
52216: CALL_OW 181
// end ; continue ;
52220: GO 51872
// end ; if not cleaners or not tmp in cleaners then
52222: LD_VAR 0 6
52226: NOT
52227: PUSH
52228: LD_VAR 0 13
52232: PUSH
52233: LD_VAR 0 6
52237: IN
52238: NOT
52239: OR
52240: IFFALSE 52547
// begin if dep then
52242: LD_VAR 0 17
52246: IFFALSE 52382
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
52248: LD_ADDR_VAR 0 16
52252: PUSH
52253: LD_VAR 0 17
52257: PUSH
52258: LD_INT 1
52260: ARRAY
52261: PPUSH
52262: CALL_OW 250
52266: PPUSH
52267: LD_VAR 0 17
52271: PUSH
52272: LD_INT 1
52274: ARRAY
52275: PPUSH
52276: CALL_OW 254
52280: PPUSH
52281: LD_INT 5
52283: PPUSH
52284: CALL_OW 272
52288: PUSH
52289: LD_VAR 0 17
52293: PUSH
52294: LD_INT 1
52296: ARRAY
52297: PPUSH
52298: CALL_OW 251
52302: PPUSH
52303: LD_VAR 0 17
52307: PUSH
52308: LD_INT 1
52310: ARRAY
52311: PPUSH
52312: CALL_OW 254
52316: PPUSH
52317: LD_INT 5
52319: PPUSH
52320: CALL_OW 273
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
52329: LD_VAR 0 16
52333: PUSH
52334: LD_INT 1
52336: ARRAY
52337: PPUSH
52338: LD_VAR 0 16
52342: PUSH
52343: LD_INT 2
52345: ARRAY
52346: PPUSH
52347: CALL_OW 488
52351: IFFALSE 52382
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
52353: LD_VAR 0 13
52357: PPUSH
52358: LD_VAR 0 16
52362: PUSH
52363: LD_INT 1
52365: ARRAY
52366: PPUSH
52367: LD_VAR 0 16
52371: PUSH
52372: LD_INT 2
52374: ARRAY
52375: PPUSH
52376: CALL_OW 111
// continue ;
52380: GO 51872
// end ; end ; r := GetDir ( tmp ) ;
52382: LD_ADDR_VAR 0 15
52386: PUSH
52387: LD_VAR 0 13
52391: PPUSH
52392: CALL_OW 254
52396: ST_TO_ADDR
// if r = 5 then
52397: LD_VAR 0 15
52401: PUSH
52402: LD_INT 5
52404: EQUAL
52405: IFFALSE 52415
// r := 0 ;
52407: LD_ADDR_VAR 0 15
52411: PUSH
52412: LD_INT 0
52414: ST_TO_ADDR
// for j = r to 5 do
52415: LD_ADDR_VAR 0 10
52419: PUSH
52420: DOUBLE
52421: LD_VAR 0 15
52425: DEC
52426: ST_TO_ADDR
52427: LD_INT 5
52429: PUSH
52430: FOR_TO
52431: IFFALSE 52545
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
52433: LD_ADDR_VAR 0 11
52437: PUSH
52438: LD_VAR 0 13
52442: PPUSH
52443: CALL_OW 250
52447: PPUSH
52448: LD_VAR 0 10
52452: PPUSH
52453: LD_INT 2
52455: PPUSH
52456: CALL_OW 272
52460: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
52461: LD_ADDR_VAR 0 12
52465: PUSH
52466: LD_VAR 0 13
52470: PPUSH
52471: CALL_OW 251
52475: PPUSH
52476: LD_VAR 0 10
52480: PPUSH
52481: LD_INT 2
52483: PPUSH
52484: CALL_OW 273
52488: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
52489: LD_VAR 0 11
52493: PPUSH
52494: LD_VAR 0 12
52498: PPUSH
52499: CALL_OW 488
52503: PUSH
52504: LD_VAR 0 11
52508: PPUSH
52509: LD_VAR 0 12
52513: PPUSH
52514: CALL_OW 428
52518: NOT
52519: AND
52520: IFFALSE 52543
// begin ComMoveXY ( tmp , _x , _y ) ;
52522: LD_VAR 0 13
52526: PPUSH
52527: LD_VAR 0 11
52531: PPUSH
52532: LD_VAR 0 12
52536: PPUSH
52537: CALL_OW 111
// break ;
52541: GO 52545
// end ; end ;
52543: GO 52430
52545: POP
52546: POP
// end ; end ;
52547: GO 51872
52549: POP
52550: POP
// end ;
52551: LD_VAR 0 8
52555: RET
// export function BuildingTechInvented ( side , btype ) ; begin
52556: LD_INT 0
52558: PPUSH
// result := true ;
52559: LD_ADDR_VAR 0 3
52563: PUSH
52564: LD_INT 1
52566: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
52567: LD_VAR 0 2
52571: PUSH
52572: LD_INT 24
52574: DOUBLE
52575: EQUAL
52576: IFTRUE 52586
52578: LD_INT 33
52580: DOUBLE
52581: EQUAL
52582: IFTRUE 52586
52584: GO 52611
52586: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
52587: LD_ADDR_VAR 0 3
52591: PUSH
52592: LD_INT 32
52594: PPUSH
52595: LD_VAR 0 1
52599: PPUSH
52600: CALL_OW 321
52604: PUSH
52605: LD_INT 2
52607: EQUAL
52608: ST_TO_ADDR
52609: GO 52927
52611: LD_INT 20
52613: DOUBLE
52614: EQUAL
52615: IFTRUE 52619
52617: GO 52644
52619: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
52620: LD_ADDR_VAR 0 3
52624: PUSH
52625: LD_INT 6
52627: PPUSH
52628: LD_VAR 0 1
52632: PPUSH
52633: CALL_OW 321
52637: PUSH
52638: LD_INT 2
52640: EQUAL
52641: ST_TO_ADDR
52642: GO 52927
52644: LD_INT 22
52646: DOUBLE
52647: EQUAL
52648: IFTRUE 52658
52650: LD_INT 36
52652: DOUBLE
52653: EQUAL
52654: IFTRUE 52658
52656: GO 52683
52658: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
52659: LD_ADDR_VAR 0 3
52663: PUSH
52664: LD_INT 15
52666: PPUSH
52667: LD_VAR 0 1
52671: PPUSH
52672: CALL_OW 321
52676: PUSH
52677: LD_INT 2
52679: EQUAL
52680: ST_TO_ADDR
52681: GO 52927
52683: LD_INT 30
52685: DOUBLE
52686: EQUAL
52687: IFTRUE 52691
52689: GO 52716
52691: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
52692: LD_ADDR_VAR 0 3
52696: PUSH
52697: LD_INT 20
52699: PPUSH
52700: LD_VAR 0 1
52704: PPUSH
52705: CALL_OW 321
52709: PUSH
52710: LD_INT 2
52712: EQUAL
52713: ST_TO_ADDR
52714: GO 52927
52716: LD_INT 28
52718: DOUBLE
52719: EQUAL
52720: IFTRUE 52730
52722: LD_INT 21
52724: DOUBLE
52725: EQUAL
52726: IFTRUE 52730
52728: GO 52755
52730: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
52731: LD_ADDR_VAR 0 3
52735: PUSH
52736: LD_INT 21
52738: PPUSH
52739: LD_VAR 0 1
52743: PPUSH
52744: CALL_OW 321
52748: PUSH
52749: LD_INT 2
52751: EQUAL
52752: ST_TO_ADDR
52753: GO 52927
52755: LD_INT 16
52757: DOUBLE
52758: EQUAL
52759: IFTRUE 52763
52761: GO 52788
52763: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
52764: LD_ADDR_VAR 0 3
52768: PUSH
52769: LD_INT 84
52771: PPUSH
52772: LD_VAR 0 1
52776: PPUSH
52777: CALL_OW 321
52781: PUSH
52782: LD_INT 2
52784: EQUAL
52785: ST_TO_ADDR
52786: GO 52927
52788: LD_INT 19
52790: DOUBLE
52791: EQUAL
52792: IFTRUE 52802
52794: LD_INT 23
52796: DOUBLE
52797: EQUAL
52798: IFTRUE 52802
52800: GO 52827
52802: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
52803: LD_ADDR_VAR 0 3
52807: PUSH
52808: LD_INT 83
52810: PPUSH
52811: LD_VAR 0 1
52815: PPUSH
52816: CALL_OW 321
52820: PUSH
52821: LD_INT 2
52823: EQUAL
52824: ST_TO_ADDR
52825: GO 52927
52827: LD_INT 17
52829: DOUBLE
52830: EQUAL
52831: IFTRUE 52835
52833: GO 52860
52835: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
52836: LD_ADDR_VAR 0 3
52840: PUSH
52841: LD_INT 39
52843: PPUSH
52844: LD_VAR 0 1
52848: PPUSH
52849: CALL_OW 321
52853: PUSH
52854: LD_INT 2
52856: EQUAL
52857: ST_TO_ADDR
52858: GO 52927
52860: LD_INT 18
52862: DOUBLE
52863: EQUAL
52864: IFTRUE 52868
52866: GO 52893
52868: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
52869: LD_ADDR_VAR 0 3
52873: PUSH
52874: LD_INT 40
52876: PPUSH
52877: LD_VAR 0 1
52881: PPUSH
52882: CALL_OW 321
52886: PUSH
52887: LD_INT 2
52889: EQUAL
52890: ST_TO_ADDR
52891: GO 52927
52893: LD_INT 27
52895: DOUBLE
52896: EQUAL
52897: IFTRUE 52901
52899: GO 52926
52901: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
52902: LD_ADDR_VAR 0 3
52906: PUSH
52907: LD_INT 35
52909: PPUSH
52910: LD_VAR 0 1
52914: PPUSH
52915: CALL_OW 321
52919: PUSH
52920: LD_INT 2
52922: EQUAL
52923: ST_TO_ADDR
52924: GO 52927
52926: POP
// end ;
52927: LD_VAR 0 3
52931: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
52932: LD_INT 0
52934: PPUSH
52935: PPUSH
52936: PPUSH
52937: PPUSH
52938: PPUSH
52939: PPUSH
52940: PPUSH
52941: PPUSH
52942: PPUSH
52943: PPUSH
52944: PPUSH
// result := false ;
52945: LD_ADDR_VAR 0 6
52949: PUSH
52950: LD_INT 0
52952: ST_TO_ADDR
// if btype = b_depot then
52953: LD_VAR 0 2
52957: PUSH
52958: LD_INT 0
52960: EQUAL
52961: IFFALSE 52973
// begin result := true ;
52963: LD_ADDR_VAR 0 6
52967: PUSH
52968: LD_INT 1
52970: ST_TO_ADDR
// exit ;
52971: GO 53799
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
52973: LD_VAR 0 1
52977: NOT
52978: PUSH
52979: LD_VAR 0 1
52983: PPUSH
52984: CALL_OW 266
52988: PUSH
52989: LD_INT 0
52991: PUSH
52992: LD_INT 1
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: IN
52999: NOT
53000: OR
53001: PUSH
53002: LD_VAR 0 2
53006: NOT
53007: OR
53008: PUSH
53009: LD_VAR 0 5
53013: PUSH
53014: LD_INT 0
53016: PUSH
53017: LD_INT 1
53019: PUSH
53020: LD_INT 2
53022: PUSH
53023: LD_INT 3
53025: PUSH
53026: LD_INT 4
53028: PUSH
53029: LD_INT 5
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: IN
53040: NOT
53041: OR
53042: PUSH
53043: LD_VAR 0 3
53047: PPUSH
53048: LD_VAR 0 4
53052: PPUSH
53053: CALL_OW 488
53057: NOT
53058: OR
53059: IFFALSE 53063
// exit ;
53061: GO 53799
// side := GetSide ( depot ) ;
53063: LD_ADDR_VAR 0 9
53067: PUSH
53068: LD_VAR 0 1
53072: PPUSH
53073: CALL_OW 255
53077: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
53078: LD_VAR 0 9
53082: PPUSH
53083: LD_VAR 0 2
53087: PPUSH
53088: CALL 52556 0 2
53092: NOT
53093: IFFALSE 53097
// exit ;
53095: GO 53799
// pom := GetBase ( depot ) ;
53097: LD_ADDR_VAR 0 10
53101: PUSH
53102: LD_VAR 0 1
53106: PPUSH
53107: CALL_OW 274
53111: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
53112: LD_ADDR_VAR 0 11
53116: PUSH
53117: LD_VAR 0 2
53121: PPUSH
53122: LD_VAR 0 1
53126: PPUSH
53127: CALL_OW 248
53131: PPUSH
53132: CALL_OW 450
53136: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
53137: LD_VAR 0 10
53141: PPUSH
53142: LD_INT 1
53144: PPUSH
53145: CALL_OW 275
53149: PUSH
53150: LD_VAR 0 11
53154: PUSH
53155: LD_INT 1
53157: ARRAY
53158: GREATEREQUAL
53159: PUSH
53160: LD_VAR 0 10
53164: PPUSH
53165: LD_INT 2
53167: PPUSH
53168: CALL_OW 275
53172: PUSH
53173: LD_VAR 0 11
53177: PUSH
53178: LD_INT 2
53180: ARRAY
53181: GREATEREQUAL
53182: AND
53183: PUSH
53184: LD_VAR 0 10
53188: PPUSH
53189: LD_INT 3
53191: PPUSH
53192: CALL_OW 275
53196: PUSH
53197: LD_VAR 0 11
53201: PUSH
53202: LD_INT 3
53204: ARRAY
53205: GREATEREQUAL
53206: AND
53207: NOT
53208: IFFALSE 53212
// exit ;
53210: GO 53799
// if GetBType ( depot ) = b_depot then
53212: LD_VAR 0 1
53216: PPUSH
53217: CALL_OW 266
53221: PUSH
53222: LD_INT 0
53224: EQUAL
53225: IFFALSE 53237
// dist := 28 else
53227: LD_ADDR_VAR 0 14
53231: PUSH
53232: LD_INT 28
53234: ST_TO_ADDR
53235: GO 53245
// dist := 36 ;
53237: LD_ADDR_VAR 0 14
53241: PUSH
53242: LD_INT 36
53244: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
53245: LD_VAR 0 1
53249: PPUSH
53250: LD_VAR 0 3
53254: PPUSH
53255: LD_VAR 0 4
53259: PPUSH
53260: CALL_OW 297
53264: PUSH
53265: LD_VAR 0 14
53269: GREATER
53270: IFFALSE 53274
// exit ;
53272: GO 53799
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
53274: LD_ADDR_VAR 0 12
53278: PUSH
53279: LD_VAR 0 2
53283: PPUSH
53284: LD_VAR 0 3
53288: PPUSH
53289: LD_VAR 0 4
53293: PPUSH
53294: LD_VAR 0 5
53298: PPUSH
53299: LD_VAR 0 1
53303: PPUSH
53304: CALL_OW 248
53308: PPUSH
53309: LD_INT 0
53311: PPUSH
53312: CALL 53804 0 6
53316: ST_TO_ADDR
// if not hexes then
53317: LD_VAR 0 12
53321: NOT
53322: IFFALSE 53326
// exit ;
53324: GO 53799
// hex := GetHexInfo ( x , y ) ;
53326: LD_ADDR_VAR 0 15
53330: PUSH
53331: LD_VAR 0 3
53335: PPUSH
53336: LD_VAR 0 4
53340: PPUSH
53341: CALL_OW 546
53345: ST_TO_ADDR
// if hex [ 1 ] then
53346: LD_VAR 0 15
53350: PUSH
53351: LD_INT 1
53353: ARRAY
53354: IFFALSE 53358
// exit ;
53356: GO 53799
// height := hex [ 2 ] ;
53358: LD_ADDR_VAR 0 13
53362: PUSH
53363: LD_VAR 0 15
53367: PUSH
53368: LD_INT 2
53370: ARRAY
53371: ST_TO_ADDR
// for i = 1 to hexes do
53372: LD_ADDR_VAR 0 7
53376: PUSH
53377: DOUBLE
53378: LD_INT 1
53380: DEC
53381: ST_TO_ADDR
53382: LD_VAR 0 12
53386: PUSH
53387: FOR_TO
53388: IFFALSE 53718
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
53390: LD_VAR 0 12
53394: PUSH
53395: LD_VAR 0 7
53399: ARRAY
53400: PUSH
53401: LD_INT 1
53403: ARRAY
53404: PPUSH
53405: LD_VAR 0 12
53409: PUSH
53410: LD_VAR 0 7
53414: ARRAY
53415: PUSH
53416: LD_INT 2
53418: ARRAY
53419: PPUSH
53420: CALL_OW 488
53424: NOT
53425: PUSH
53426: LD_VAR 0 12
53430: PUSH
53431: LD_VAR 0 7
53435: ARRAY
53436: PUSH
53437: LD_INT 1
53439: ARRAY
53440: PPUSH
53441: LD_VAR 0 12
53445: PUSH
53446: LD_VAR 0 7
53450: ARRAY
53451: PUSH
53452: LD_INT 2
53454: ARRAY
53455: PPUSH
53456: CALL_OW 428
53460: PUSH
53461: LD_INT 0
53463: GREATER
53464: OR
53465: PUSH
53466: LD_VAR 0 12
53470: PUSH
53471: LD_VAR 0 7
53475: ARRAY
53476: PUSH
53477: LD_INT 1
53479: ARRAY
53480: PPUSH
53481: LD_VAR 0 12
53485: PUSH
53486: LD_VAR 0 7
53490: ARRAY
53491: PUSH
53492: LD_INT 2
53494: ARRAY
53495: PPUSH
53496: CALL_OW 351
53500: OR
53501: IFFALSE 53507
// exit ;
53503: POP
53504: POP
53505: GO 53799
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53507: LD_ADDR_VAR 0 8
53511: PUSH
53512: LD_VAR 0 12
53516: PUSH
53517: LD_VAR 0 7
53521: ARRAY
53522: PUSH
53523: LD_INT 1
53525: ARRAY
53526: PPUSH
53527: LD_VAR 0 12
53531: PUSH
53532: LD_VAR 0 7
53536: ARRAY
53537: PUSH
53538: LD_INT 2
53540: ARRAY
53541: PPUSH
53542: CALL_OW 546
53546: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
53547: LD_VAR 0 8
53551: PUSH
53552: LD_INT 1
53554: ARRAY
53555: PUSH
53556: LD_VAR 0 8
53560: PUSH
53561: LD_INT 2
53563: ARRAY
53564: PUSH
53565: LD_VAR 0 13
53569: PUSH
53570: LD_INT 2
53572: PLUS
53573: GREATER
53574: OR
53575: PUSH
53576: LD_VAR 0 8
53580: PUSH
53581: LD_INT 2
53583: ARRAY
53584: PUSH
53585: LD_VAR 0 13
53589: PUSH
53590: LD_INT 2
53592: MINUS
53593: LESS
53594: OR
53595: PUSH
53596: LD_VAR 0 8
53600: PUSH
53601: LD_INT 3
53603: ARRAY
53604: PUSH
53605: LD_INT 0
53607: PUSH
53608: LD_INT 8
53610: PUSH
53611: LD_INT 9
53613: PUSH
53614: LD_INT 10
53616: PUSH
53617: LD_INT 11
53619: PUSH
53620: LD_INT 12
53622: PUSH
53623: LD_INT 13
53625: PUSH
53626: LD_INT 16
53628: PUSH
53629: LD_INT 17
53631: PUSH
53632: LD_INT 18
53634: PUSH
53635: LD_INT 19
53637: PUSH
53638: LD_INT 20
53640: PUSH
53641: LD_INT 21
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: IN
53659: NOT
53660: OR
53661: PUSH
53662: LD_VAR 0 8
53666: PUSH
53667: LD_INT 5
53669: ARRAY
53670: NOT
53671: OR
53672: PUSH
53673: LD_VAR 0 8
53677: PUSH
53678: LD_INT 6
53680: ARRAY
53681: PUSH
53682: LD_INT 1
53684: PUSH
53685: LD_INT 2
53687: PUSH
53688: LD_INT 7
53690: PUSH
53691: LD_INT 9
53693: PUSH
53694: LD_INT 10
53696: PUSH
53697: LD_INT 11
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: IN
53708: NOT
53709: OR
53710: IFFALSE 53716
// exit ;
53712: POP
53713: POP
53714: GO 53799
// end ;
53716: GO 53387
53718: POP
53719: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
53720: LD_VAR 0 9
53724: PPUSH
53725: LD_VAR 0 3
53729: PPUSH
53730: LD_VAR 0 4
53734: PPUSH
53735: LD_INT 20
53737: PPUSH
53738: CALL 45722 0 4
53742: PUSH
53743: LD_INT 4
53745: ARRAY
53746: IFFALSE 53750
// exit ;
53748: GO 53799
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
53750: LD_VAR 0 2
53754: PUSH
53755: LD_INT 29
53757: PUSH
53758: LD_INT 30
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: IN
53765: PUSH
53766: LD_VAR 0 3
53770: PPUSH
53771: LD_VAR 0 4
53775: PPUSH
53776: LD_VAR 0 9
53780: PPUSH
53781: CALL_OW 440
53785: NOT
53786: AND
53787: IFFALSE 53791
// exit ;
53789: GO 53799
// result := true ;
53791: LD_ADDR_VAR 0 6
53795: PUSH
53796: LD_INT 1
53798: ST_TO_ADDR
// end ;
53799: LD_VAR 0 6
53803: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
53804: LD_INT 0
53806: PPUSH
53807: PPUSH
53808: PPUSH
53809: PPUSH
53810: PPUSH
53811: PPUSH
53812: PPUSH
53813: PPUSH
53814: PPUSH
53815: PPUSH
53816: PPUSH
53817: PPUSH
53818: PPUSH
53819: PPUSH
53820: PPUSH
53821: PPUSH
53822: PPUSH
53823: PPUSH
53824: PPUSH
53825: PPUSH
53826: PPUSH
53827: PPUSH
53828: PPUSH
53829: PPUSH
53830: PPUSH
53831: PPUSH
53832: PPUSH
53833: PPUSH
53834: PPUSH
53835: PPUSH
53836: PPUSH
53837: PPUSH
53838: PPUSH
53839: PPUSH
53840: PPUSH
53841: PPUSH
53842: PPUSH
53843: PPUSH
53844: PPUSH
53845: PPUSH
53846: PPUSH
53847: PPUSH
53848: PPUSH
53849: PPUSH
53850: PPUSH
53851: PPUSH
53852: PPUSH
53853: PPUSH
53854: PPUSH
53855: PPUSH
53856: PPUSH
53857: PPUSH
53858: PPUSH
53859: PPUSH
53860: PPUSH
53861: PPUSH
53862: PPUSH
53863: PPUSH
// result = [ ] ;
53864: LD_ADDR_VAR 0 7
53868: PUSH
53869: EMPTY
53870: ST_TO_ADDR
// temp_list = [ ] ;
53871: LD_ADDR_VAR 0 9
53875: PUSH
53876: EMPTY
53877: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
53878: LD_VAR 0 4
53882: PUSH
53883: LD_INT 0
53885: PUSH
53886: LD_INT 1
53888: PUSH
53889: LD_INT 2
53891: PUSH
53892: LD_INT 3
53894: PUSH
53895: LD_INT 4
53897: PUSH
53898: LD_INT 5
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: LIST
53905: LIST
53906: LIST
53907: LIST
53908: IN
53909: NOT
53910: PUSH
53911: LD_VAR 0 1
53915: PUSH
53916: LD_INT 0
53918: PUSH
53919: LD_INT 1
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: IN
53926: PUSH
53927: LD_VAR 0 5
53931: PUSH
53932: LD_INT 1
53934: PUSH
53935: LD_INT 2
53937: PUSH
53938: LD_INT 3
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: LIST
53945: IN
53946: NOT
53947: AND
53948: OR
53949: IFFALSE 53953
// exit ;
53951: GO 72344
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
53953: LD_VAR 0 1
53957: PUSH
53958: LD_INT 6
53960: PUSH
53961: LD_INT 7
53963: PUSH
53964: LD_INT 8
53966: PUSH
53967: LD_INT 13
53969: PUSH
53970: LD_INT 12
53972: PUSH
53973: LD_INT 15
53975: PUSH
53976: LD_INT 11
53978: PUSH
53979: LD_INT 14
53981: PUSH
53982: LD_INT 10
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: IN
53996: IFFALSE 54006
// btype = b_lab ;
53998: LD_ADDR_VAR 0 1
54002: PUSH
54003: LD_INT 6
54005: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
54006: LD_VAR 0 6
54010: PUSH
54011: LD_INT 0
54013: PUSH
54014: LD_INT 1
54016: PUSH
54017: LD_INT 2
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: LIST
54024: IN
54025: NOT
54026: PUSH
54027: LD_VAR 0 1
54031: PUSH
54032: LD_INT 0
54034: PUSH
54035: LD_INT 1
54037: PUSH
54038: LD_INT 2
54040: PUSH
54041: LD_INT 3
54043: PUSH
54044: LD_INT 6
54046: PUSH
54047: LD_INT 36
54049: PUSH
54050: LD_INT 4
54052: PUSH
54053: LD_INT 5
54055: PUSH
54056: LD_INT 31
54058: PUSH
54059: LD_INT 32
54061: PUSH
54062: LD_INT 33
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: LIST
54077: IN
54078: NOT
54079: PUSH
54080: LD_VAR 0 6
54084: PUSH
54085: LD_INT 1
54087: EQUAL
54088: AND
54089: OR
54090: PUSH
54091: LD_VAR 0 1
54095: PUSH
54096: LD_INT 2
54098: PUSH
54099: LD_INT 3
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: IN
54106: NOT
54107: PUSH
54108: LD_VAR 0 6
54112: PUSH
54113: LD_INT 2
54115: EQUAL
54116: AND
54117: OR
54118: IFFALSE 54128
// mode = 0 ;
54120: LD_ADDR_VAR 0 6
54124: PUSH
54125: LD_INT 0
54127: ST_TO_ADDR
// case mode of 0 :
54128: LD_VAR 0 6
54132: PUSH
54133: LD_INT 0
54135: DOUBLE
54136: EQUAL
54137: IFTRUE 54141
54139: GO 65594
54141: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54142: LD_ADDR_VAR 0 11
54146: PUSH
54147: LD_INT 0
54149: PUSH
54150: LD_INT 0
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: LD_INT 0
54159: PUSH
54160: LD_INT 1
54162: NEG
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 1
54170: PUSH
54171: LD_INT 0
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 1
54180: PUSH
54181: LD_INT 1
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 0
54190: PUSH
54191: LD_INT 1
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 1
54200: NEG
54201: PUSH
54202: LD_INT 0
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 1
54211: NEG
54212: PUSH
54213: LD_INT 1
54215: NEG
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 1
54223: NEG
54224: PUSH
54225: LD_INT 2
54227: NEG
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 0
54235: PUSH
54236: LD_INT 2
54238: NEG
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 1
54246: PUSH
54247: LD_INT 1
54249: NEG
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 1
54257: PUSH
54258: LD_INT 2
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 0
54267: PUSH
54268: LD_INT 2
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 1
54277: NEG
54278: PUSH
54279: LD_INT 1
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 1
54288: PUSH
54289: LD_INT 3
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 0
54298: PUSH
54299: LD_INT 3
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 1
54308: NEG
54309: PUSH
54310: LD_INT 2
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54335: LD_ADDR_VAR 0 12
54339: PUSH
54340: LD_INT 0
54342: PUSH
54343: LD_INT 0
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: LD_INT 0
54352: PUSH
54353: LD_INT 1
54355: NEG
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 1
54363: PUSH
54364: LD_INT 0
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 1
54373: PUSH
54374: LD_INT 1
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 0
54383: PUSH
54384: LD_INT 1
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 1
54393: NEG
54394: PUSH
54395: LD_INT 0
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: LD_INT 1
54404: NEG
54405: PUSH
54406: LD_INT 1
54408: NEG
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: LD_INT 1
54416: PUSH
54417: LD_INT 1
54419: NEG
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: LD_INT 2
54427: PUSH
54428: LD_INT 0
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 2
54437: PUSH
54438: LD_INT 1
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 1
54447: NEG
54448: PUSH
54449: LD_INT 1
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 2
54458: NEG
54459: PUSH
54460: LD_INT 0
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 2
54469: NEG
54470: PUSH
54471: LD_INT 1
54473: NEG
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 2
54481: NEG
54482: PUSH
54483: LD_INT 1
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 3
54492: NEG
54493: PUSH
54494: LD_INT 0
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 3
54503: NEG
54504: PUSH
54505: LD_INT 1
54507: NEG
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: LIST
54521: LIST
54522: LIST
54523: LIST
54524: LIST
54525: LIST
54526: LIST
54527: LIST
54528: LIST
54529: LIST
54530: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54531: LD_ADDR_VAR 0 13
54535: PUSH
54536: LD_INT 0
54538: PUSH
54539: LD_INT 0
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 0
54548: PUSH
54549: LD_INT 1
54551: NEG
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 1
54559: PUSH
54560: LD_INT 0
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 1
54569: PUSH
54570: LD_INT 1
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 0
54579: PUSH
54580: LD_INT 1
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PUSH
54587: LD_INT 1
54589: NEG
54590: PUSH
54591: LD_INT 0
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 1
54600: NEG
54601: PUSH
54602: LD_INT 1
54604: NEG
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: PUSH
54610: LD_INT 1
54612: NEG
54613: PUSH
54614: LD_INT 2
54616: NEG
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 2
54624: PUSH
54625: LD_INT 1
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 2
54634: PUSH
54635: LD_INT 2
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 1
54644: PUSH
54645: LD_INT 2
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: LD_INT 2
54654: NEG
54655: PUSH
54656: LD_INT 1
54658: NEG
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 2
54666: NEG
54667: PUSH
54668: LD_INT 2
54670: NEG
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 2
54678: NEG
54679: PUSH
54680: LD_INT 3
54682: NEG
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 3
54690: NEG
54691: PUSH
54692: LD_INT 2
54694: NEG
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 3
54702: NEG
54703: PUSH
54704: LD_INT 3
54706: NEG
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54730: LD_ADDR_VAR 0 14
54734: PUSH
54735: LD_INT 0
54737: PUSH
54738: LD_INT 0
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 0
54747: PUSH
54748: LD_INT 1
54750: NEG
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: LD_INT 1
54758: PUSH
54759: LD_INT 0
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 1
54768: PUSH
54769: LD_INT 1
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 0
54778: PUSH
54779: LD_INT 1
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: LD_INT 1
54788: NEG
54789: PUSH
54790: LD_INT 0
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: LD_INT 1
54799: NEG
54800: PUSH
54801: LD_INT 1
54803: NEG
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 1
54811: NEG
54812: PUSH
54813: LD_INT 2
54815: NEG
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 0
54823: PUSH
54824: LD_INT 2
54826: NEG
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 1
54834: PUSH
54835: LD_INT 1
54837: NEG
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 1
54845: PUSH
54846: LD_INT 2
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 0
54855: PUSH
54856: LD_INT 2
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 1
54865: NEG
54866: PUSH
54867: LD_INT 1
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: LD_INT 1
54876: NEG
54877: PUSH
54878: LD_INT 3
54880: NEG
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 0
54888: PUSH
54889: LD_INT 3
54891: NEG
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 1
54899: PUSH
54900: LD_INT 2
54902: NEG
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54926: LD_ADDR_VAR 0 15
54930: PUSH
54931: LD_INT 0
54933: PUSH
54934: LD_INT 0
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: LD_INT 0
54943: PUSH
54944: LD_INT 1
54946: NEG
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 1
54954: PUSH
54955: LD_INT 0
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 1
54964: PUSH
54965: LD_INT 1
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: LD_INT 0
54974: PUSH
54975: LD_INT 1
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: LD_INT 1
54984: NEG
54985: PUSH
54986: LD_INT 0
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 1
54995: NEG
54996: PUSH
54997: LD_INT 1
54999: NEG
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: LD_INT 1
55007: PUSH
55008: LD_INT 1
55010: NEG
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 2
55018: PUSH
55019: LD_INT 0
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 2
55028: PUSH
55029: LD_INT 1
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 1
55038: NEG
55039: PUSH
55040: LD_INT 1
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_INT 2
55049: NEG
55050: PUSH
55051: LD_INT 0
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 2
55060: NEG
55061: PUSH
55062: LD_INT 1
55064: NEG
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: LD_INT 2
55072: PUSH
55073: LD_INT 1
55075: NEG
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 3
55083: PUSH
55084: LD_INT 0
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 3
55093: PUSH
55094: LD_INT 1
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: LIST
55105: LIST
55106: LIST
55107: LIST
55108: LIST
55109: LIST
55110: LIST
55111: LIST
55112: LIST
55113: LIST
55114: LIST
55115: LIST
55116: LIST
55117: LIST
55118: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55119: LD_ADDR_VAR 0 16
55123: PUSH
55124: LD_INT 0
55126: PUSH
55127: LD_INT 0
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 0
55136: PUSH
55137: LD_INT 1
55139: NEG
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 1
55147: PUSH
55148: LD_INT 0
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: LD_INT 1
55157: PUSH
55158: LD_INT 1
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 0
55167: PUSH
55168: LD_INT 1
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 1
55177: NEG
55178: PUSH
55179: LD_INT 0
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 1
55188: NEG
55189: PUSH
55190: LD_INT 1
55192: NEG
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 1
55200: NEG
55201: PUSH
55202: LD_INT 2
55204: NEG
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 2
55212: PUSH
55213: LD_INT 1
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 2
55222: PUSH
55223: LD_INT 2
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 1
55232: PUSH
55233: LD_INT 2
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 2
55242: NEG
55243: PUSH
55244: LD_INT 1
55246: NEG
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: LD_INT 2
55254: NEG
55255: PUSH
55256: LD_INT 2
55258: NEG
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 3
55266: PUSH
55267: LD_INT 2
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 3
55276: PUSH
55277: LD_INT 3
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 2
55286: PUSH
55287: LD_INT 3
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: LIST
55298: LIST
55299: LIST
55300: LIST
55301: LIST
55302: LIST
55303: LIST
55304: LIST
55305: LIST
55306: LIST
55307: LIST
55308: LIST
55309: LIST
55310: LIST
55311: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55312: LD_ADDR_VAR 0 17
55316: PUSH
55317: LD_INT 0
55319: PUSH
55320: LD_INT 0
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 0
55329: PUSH
55330: LD_INT 1
55332: NEG
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 1
55340: PUSH
55341: LD_INT 0
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: LD_INT 1
55350: PUSH
55351: LD_INT 1
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: LD_INT 0
55360: PUSH
55361: LD_INT 1
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 1
55370: NEG
55371: PUSH
55372: LD_INT 0
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: LD_INT 1
55381: NEG
55382: PUSH
55383: LD_INT 1
55385: NEG
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 1
55393: NEG
55394: PUSH
55395: LD_INT 2
55397: NEG
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 0
55405: PUSH
55406: LD_INT 2
55408: NEG
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 1
55416: PUSH
55417: LD_INT 1
55419: NEG
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 2
55427: PUSH
55428: LD_INT 0
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 2
55437: PUSH
55438: LD_INT 1
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: LD_INT 2
55447: PUSH
55448: LD_INT 2
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 1
55457: PUSH
55458: LD_INT 2
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 0
55467: PUSH
55468: LD_INT 2
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 1
55477: NEG
55478: PUSH
55479: LD_INT 1
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 2
55488: NEG
55489: PUSH
55490: LD_INT 0
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 2
55499: NEG
55500: PUSH
55501: LD_INT 1
55503: NEG
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: LD_INT 2
55511: NEG
55512: PUSH
55513: LD_INT 2
55515: NEG
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55542: LD_ADDR_VAR 0 18
55546: PUSH
55547: LD_INT 0
55549: PUSH
55550: LD_INT 0
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 0
55559: PUSH
55560: LD_INT 1
55562: NEG
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 1
55570: PUSH
55571: LD_INT 0
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 1
55580: PUSH
55581: LD_INT 1
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PUSH
55588: LD_INT 0
55590: PUSH
55591: LD_INT 1
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: LD_INT 1
55600: NEG
55601: PUSH
55602: LD_INT 0
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 1
55611: NEG
55612: PUSH
55613: LD_INT 1
55615: NEG
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: PUSH
55621: LD_INT 1
55623: NEG
55624: PUSH
55625: LD_INT 2
55627: NEG
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 0
55635: PUSH
55636: LD_INT 2
55638: NEG
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 1
55646: PUSH
55647: LD_INT 1
55649: NEG
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 2
55657: PUSH
55658: LD_INT 0
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 2
55667: PUSH
55668: LD_INT 1
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 2
55677: PUSH
55678: LD_INT 2
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 1
55687: PUSH
55688: LD_INT 2
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: LD_INT 0
55697: PUSH
55698: LD_INT 2
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 1
55707: NEG
55708: PUSH
55709: LD_INT 1
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 2
55718: NEG
55719: PUSH
55720: LD_INT 0
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 2
55729: NEG
55730: PUSH
55731: LD_INT 1
55733: NEG
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 2
55741: NEG
55742: PUSH
55743: LD_INT 2
55745: NEG
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: LIST
55769: LIST
55770: LIST
55771: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55772: LD_ADDR_VAR 0 19
55776: PUSH
55777: LD_INT 0
55779: PUSH
55780: LD_INT 0
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 0
55789: PUSH
55790: LD_INT 1
55792: NEG
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 1
55800: PUSH
55801: LD_INT 0
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 1
55810: PUSH
55811: LD_INT 1
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: LD_INT 0
55820: PUSH
55821: LD_INT 1
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: LD_INT 1
55830: NEG
55831: PUSH
55832: LD_INT 0
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 1
55841: NEG
55842: PUSH
55843: LD_INT 1
55845: NEG
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 1
55853: NEG
55854: PUSH
55855: LD_INT 2
55857: NEG
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: LD_INT 0
55865: PUSH
55866: LD_INT 2
55868: NEG
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 1
55876: PUSH
55877: LD_INT 1
55879: NEG
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 2
55887: PUSH
55888: LD_INT 0
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: LD_INT 2
55897: PUSH
55898: LD_INT 1
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: LD_INT 2
55907: PUSH
55908: LD_INT 2
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: LD_INT 1
55917: PUSH
55918: LD_INT 2
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: LD_INT 0
55927: PUSH
55928: LD_INT 2
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 1
55937: NEG
55938: PUSH
55939: LD_INT 1
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 2
55948: NEG
55949: PUSH
55950: LD_INT 0
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 2
55959: NEG
55960: PUSH
55961: LD_INT 1
55963: NEG
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 2
55971: NEG
55972: PUSH
55973: LD_INT 2
55975: NEG
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56002: LD_ADDR_VAR 0 20
56006: PUSH
56007: LD_INT 0
56009: PUSH
56010: LD_INT 0
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 0
56019: PUSH
56020: LD_INT 1
56022: NEG
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 1
56030: PUSH
56031: LD_INT 0
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 1
56040: PUSH
56041: LD_INT 1
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PUSH
56048: LD_INT 0
56050: PUSH
56051: LD_INT 1
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 1
56060: NEG
56061: PUSH
56062: LD_INT 0
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 1
56071: NEG
56072: PUSH
56073: LD_INT 1
56075: NEG
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 1
56083: NEG
56084: PUSH
56085: LD_INT 2
56087: NEG
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 0
56095: PUSH
56096: LD_INT 2
56098: NEG
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 1
56106: PUSH
56107: LD_INT 1
56109: NEG
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 2
56117: PUSH
56118: LD_INT 0
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PUSH
56125: LD_INT 2
56127: PUSH
56128: LD_INT 1
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 2
56137: PUSH
56138: LD_INT 2
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 1
56147: PUSH
56148: LD_INT 2
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 0
56157: PUSH
56158: LD_INT 2
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 1
56167: NEG
56168: PUSH
56169: LD_INT 1
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 2
56178: NEG
56179: PUSH
56180: LD_INT 0
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: LD_INT 2
56189: NEG
56190: PUSH
56191: LD_INT 1
56193: NEG
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 2
56201: NEG
56202: PUSH
56203: LD_INT 2
56205: NEG
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: LIST
56219: LIST
56220: LIST
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: LIST
56227: LIST
56228: LIST
56229: LIST
56230: LIST
56231: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56232: LD_ADDR_VAR 0 21
56236: PUSH
56237: LD_INT 0
56239: PUSH
56240: LD_INT 0
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 0
56249: PUSH
56250: LD_INT 1
56252: NEG
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: LD_INT 1
56260: PUSH
56261: LD_INT 0
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: LD_INT 1
56270: PUSH
56271: LD_INT 1
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 0
56280: PUSH
56281: LD_INT 1
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: LD_INT 1
56290: NEG
56291: PUSH
56292: LD_INT 0
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 1
56301: NEG
56302: PUSH
56303: LD_INT 1
56305: NEG
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 1
56313: NEG
56314: PUSH
56315: LD_INT 2
56317: NEG
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 0
56325: PUSH
56326: LD_INT 2
56328: NEG
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 1
56336: PUSH
56337: LD_INT 1
56339: NEG
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 2
56347: PUSH
56348: LD_INT 0
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PUSH
56355: LD_INT 2
56357: PUSH
56358: LD_INT 1
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: LD_INT 2
56367: PUSH
56368: LD_INT 2
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: PUSH
56375: LD_INT 1
56377: PUSH
56378: LD_INT 2
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 0
56387: PUSH
56388: LD_INT 2
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 1
56397: NEG
56398: PUSH
56399: LD_INT 1
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: LD_INT 2
56408: NEG
56409: PUSH
56410: LD_INT 0
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 2
56419: NEG
56420: PUSH
56421: LD_INT 1
56423: NEG
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 2
56431: NEG
56432: PUSH
56433: LD_INT 2
56435: NEG
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: LIST
56452: LIST
56453: LIST
56454: LIST
56455: LIST
56456: LIST
56457: LIST
56458: LIST
56459: LIST
56460: LIST
56461: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56462: LD_ADDR_VAR 0 22
56466: PUSH
56467: LD_INT 0
56469: PUSH
56470: LD_INT 0
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 0
56479: PUSH
56480: LD_INT 1
56482: NEG
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 1
56490: PUSH
56491: LD_INT 0
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 1
56500: PUSH
56501: LD_INT 1
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 0
56510: PUSH
56511: LD_INT 1
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 1
56520: NEG
56521: PUSH
56522: LD_INT 0
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 1
56531: NEG
56532: PUSH
56533: LD_INT 1
56535: NEG
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 1
56543: NEG
56544: PUSH
56545: LD_INT 2
56547: NEG
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 0
56555: PUSH
56556: LD_INT 2
56558: NEG
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 1
56566: PUSH
56567: LD_INT 1
56569: NEG
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 2
56577: PUSH
56578: LD_INT 0
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 2
56587: PUSH
56588: LD_INT 1
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 2
56597: PUSH
56598: LD_INT 2
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PUSH
56605: LD_INT 1
56607: PUSH
56608: LD_INT 2
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: LD_INT 0
56617: PUSH
56618: LD_INT 2
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: LD_INT 1
56627: NEG
56628: PUSH
56629: LD_INT 1
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 2
56638: NEG
56639: PUSH
56640: LD_INT 0
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 2
56649: NEG
56650: PUSH
56651: LD_INT 1
56653: NEG
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: LD_INT 2
56661: NEG
56662: PUSH
56663: LD_INT 2
56665: NEG
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: LIST
56675: LIST
56676: LIST
56677: LIST
56678: LIST
56679: LIST
56680: LIST
56681: LIST
56682: LIST
56683: LIST
56684: LIST
56685: LIST
56686: LIST
56687: LIST
56688: LIST
56689: LIST
56690: LIST
56691: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56692: LD_ADDR_VAR 0 23
56696: PUSH
56697: LD_INT 0
56699: PUSH
56700: LD_INT 0
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: PUSH
56707: LD_INT 0
56709: PUSH
56710: LD_INT 1
56712: NEG
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 1
56720: PUSH
56721: LD_INT 0
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 1
56730: PUSH
56731: LD_INT 1
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 0
56740: PUSH
56741: LD_INT 1
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 1
56750: NEG
56751: PUSH
56752: LD_INT 0
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 1
56761: NEG
56762: PUSH
56763: LD_INT 1
56765: NEG
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: LD_INT 1
56773: NEG
56774: PUSH
56775: LD_INT 2
56777: NEG
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: LD_INT 0
56785: PUSH
56786: LD_INT 2
56788: NEG
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 1
56796: PUSH
56797: LD_INT 1
56799: NEG
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 2
56807: PUSH
56808: LD_INT 0
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 2
56817: PUSH
56818: LD_INT 1
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 2
56827: PUSH
56828: LD_INT 2
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 1
56837: PUSH
56838: LD_INT 2
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: LD_INT 0
56847: PUSH
56848: LD_INT 2
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 1
56857: NEG
56858: PUSH
56859: LD_INT 1
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: PUSH
56866: LD_INT 2
56868: NEG
56869: PUSH
56870: LD_INT 0
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: LD_INT 2
56879: NEG
56880: PUSH
56881: LD_INT 1
56883: NEG
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: LD_INT 2
56891: NEG
56892: PUSH
56893: LD_INT 2
56895: NEG
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 2
56903: NEG
56904: PUSH
56905: LD_INT 3
56907: NEG
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 1
56915: NEG
56916: PUSH
56917: LD_INT 3
56919: NEG
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: LD_INT 1
56927: PUSH
56928: LD_INT 2
56930: NEG
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 2
56938: PUSH
56939: LD_INT 1
56941: NEG
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: EMPTY
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: LIST
56958: LIST
56959: LIST
56960: LIST
56961: LIST
56962: LIST
56963: LIST
56964: LIST
56965: LIST
56966: LIST
56967: LIST
56968: LIST
56969: LIST
56970: LIST
56971: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
56972: LD_ADDR_VAR 0 24
56976: PUSH
56977: LD_INT 0
56979: PUSH
56980: LD_INT 0
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: LD_INT 0
56989: PUSH
56990: LD_INT 1
56992: NEG
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: LD_INT 1
57000: PUSH
57001: LD_INT 0
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 1
57010: PUSH
57011: LD_INT 1
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: LD_INT 0
57020: PUSH
57021: LD_INT 1
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: LD_INT 1
57030: NEG
57031: PUSH
57032: LD_INT 0
57034: PUSH
57035: EMPTY
57036: LIST
57037: LIST
57038: PUSH
57039: LD_INT 1
57041: NEG
57042: PUSH
57043: LD_INT 1
57045: NEG
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: LD_INT 1
57053: NEG
57054: PUSH
57055: LD_INT 2
57057: NEG
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: LD_INT 0
57065: PUSH
57066: LD_INT 2
57068: NEG
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: LD_INT 1
57076: PUSH
57077: LD_INT 1
57079: NEG
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 2
57087: PUSH
57088: LD_INT 0
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 2
57097: PUSH
57098: LD_INT 1
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 2
57107: PUSH
57108: LD_INT 2
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: LD_INT 1
57117: PUSH
57118: LD_INT 2
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: LD_INT 0
57127: PUSH
57128: LD_INT 2
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: LD_INT 1
57137: NEG
57138: PUSH
57139: LD_INT 1
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 2
57148: NEG
57149: PUSH
57150: LD_INT 0
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_INT 2
57159: NEG
57160: PUSH
57161: LD_INT 1
57163: NEG
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 2
57171: NEG
57172: PUSH
57173: LD_INT 2
57175: NEG
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 1
57183: PUSH
57184: LD_INT 2
57186: NEG
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: LD_INT 2
57194: PUSH
57195: LD_INT 1
57197: NEG
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: LD_INT 3
57205: PUSH
57206: LD_INT 1
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 3
57215: PUSH
57216: LD_INT 2
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: LIST
57227: LIST
57228: LIST
57229: LIST
57230: LIST
57231: LIST
57232: LIST
57233: LIST
57234: LIST
57235: LIST
57236: LIST
57237: LIST
57238: LIST
57239: LIST
57240: LIST
57241: LIST
57242: LIST
57243: LIST
57244: LIST
57245: LIST
57246: LIST
57247: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
57248: LD_ADDR_VAR 0 25
57252: PUSH
57253: LD_INT 0
57255: PUSH
57256: LD_INT 0
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 0
57265: PUSH
57266: LD_INT 1
57268: NEG
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PUSH
57274: LD_INT 1
57276: PUSH
57277: LD_INT 0
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 1
57286: PUSH
57287: LD_INT 1
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 0
57296: PUSH
57297: LD_INT 1
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 1
57306: NEG
57307: PUSH
57308: LD_INT 0
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: LD_INT 1
57317: NEG
57318: PUSH
57319: LD_INT 1
57321: NEG
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 1
57329: NEG
57330: PUSH
57331: LD_INT 2
57333: NEG
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: LD_INT 0
57341: PUSH
57342: LD_INT 2
57344: NEG
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 1
57352: PUSH
57353: LD_INT 1
57355: NEG
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: LD_INT 2
57363: PUSH
57364: LD_INT 0
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 2
57373: PUSH
57374: LD_INT 1
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 2
57383: PUSH
57384: LD_INT 2
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PUSH
57391: LD_INT 1
57393: PUSH
57394: LD_INT 2
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PUSH
57401: LD_INT 0
57403: PUSH
57404: LD_INT 2
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 1
57413: NEG
57414: PUSH
57415: LD_INT 1
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: LD_INT 2
57424: NEG
57425: PUSH
57426: LD_INT 0
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 2
57435: NEG
57436: PUSH
57437: LD_INT 1
57439: NEG
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: LD_INT 2
57447: NEG
57448: PUSH
57449: LD_INT 2
57451: NEG
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PUSH
57457: LD_INT 3
57459: PUSH
57460: LD_INT 1
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: PUSH
57467: LD_INT 3
57469: PUSH
57470: LD_INT 2
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: LD_INT 2
57479: PUSH
57480: LD_INT 3
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PUSH
57487: LD_INT 1
57489: PUSH
57490: LD_INT 3
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: LIST
57510: LIST
57511: LIST
57512: LIST
57513: LIST
57514: LIST
57515: LIST
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57522: LD_ADDR_VAR 0 26
57526: PUSH
57527: LD_INT 0
57529: PUSH
57530: LD_INT 0
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 0
57539: PUSH
57540: LD_INT 1
57542: NEG
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_INT 1
57550: PUSH
57551: LD_INT 0
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PUSH
57558: LD_INT 1
57560: PUSH
57561: LD_INT 1
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: LD_INT 0
57570: PUSH
57571: LD_INT 1
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: LD_INT 1
57580: NEG
57581: PUSH
57582: LD_INT 0
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 1
57591: NEG
57592: PUSH
57593: LD_INT 1
57595: NEG
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 1
57603: NEG
57604: PUSH
57605: LD_INT 2
57607: NEG
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 0
57615: PUSH
57616: LD_INT 2
57618: NEG
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 1
57626: PUSH
57627: LD_INT 1
57629: NEG
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: PUSH
57635: LD_INT 2
57637: PUSH
57638: LD_INT 0
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 2
57647: PUSH
57648: LD_INT 1
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: LD_INT 2
57657: PUSH
57658: LD_INT 2
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: LD_INT 1
57667: PUSH
57668: LD_INT 2
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: PUSH
57675: LD_INT 0
57677: PUSH
57678: LD_INT 2
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: PUSH
57685: LD_INT 1
57687: NEG
57688: PUSH
57689: LD_INT 1
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: PUSH
57696: LD_INT 2
57698: NEG
57699: PUSH
57700: LD_INT 0
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: LD_INT 2
57709: NEG
57710: PUSH
57711: LD_INT 1
57713: NEG
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 2
57721: NEG
57722: PUSH
57723: LD_INT 2
57725: NEG
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 2
57733: PUSH
57734: LD_INT 3
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: LD_INT 1
57743: PUSH
57744: LD_INT 3
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 1
57753: NEG
57754: PUSH
57755: LD_INT 2
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 2
57764: NEG
57765: PUSH
57766: LD_INT 1
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: LIST
57777: LIST
57778: LIST
57779: LIST
57780: LIST
57781: LIST
57782: LIST
57783: LIST
57784: LIST
57785: LIST
57786: LIST
57787: LIST
57788: LIST
57789: LIST
57790: LIST
57791: LIST
57792: LIST
57793: LIST
57794: LIST
57795: LIST
57796: LIST
57797: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57798: LD_ADDR_VAR 0 27
57802: PUSH
57803: LD_INT 0
57805: PUSH
57806: LD_INT 0
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 0
57815: PUSH
57816: LD_INT 1
57818: NEG
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 1
57826: PUSH
57827: LD_INT 0
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 1
57836: PUSH
57837: LD_INT 1
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 0
57846: PUSH
57847: LD_INT 1
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 1
57856: NEG
57857: PUSH
57858: LD_INT 0
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: LD_INT 1
57867: NEG
57868: PUSH
57869: LD_INT 1
57871: NEG
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: PUSH
57877: LD_INT 1
57879: NEG
57880: PUSH
57881: LD_INT 2
57883: NEG
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: LD_INT 0
57891: PUSH
57892: LD_INT 2
57894: NEG
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 1
57902: PUSH
57903: LD_INT 1
57905: NEG
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 2
57913: PUSH
57914: LD_INT 0
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: LD_INT 2
57923: PUSH
57924: LD_INT 1
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: PUSH
57931: LD_INT 2
57933: PUSH
57934: LD_INT 2
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 1
57943: PUSH
57944: LD_INT 2
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: LD_INT 0
57953: PUSH
57954: LD_INT 2
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: LD_INT 1
57963: NEG
57964: PUSH
57965: LD_INT 1
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 2
57974: NEG
57975: PUSH
57976: LD_INT 0
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: LD_INT 2
57985: NEG
57986: PUSH
57987: LD_INT 1
57989: NEG
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 2
57997: NEG
57998: PUSH
57999: LD_INT 2
58001: NEG
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 1
58009: NEG
58010: PUSH
58011: LD_INT 2
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 2
58020: NEG
58021: PUSH
58022: LD_INT 1
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PUSH
58029: LD_INT 3
58031: NEG
58032: PUSH
58033: LD_INT 1
58035: NEG
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 3
58043: NEG
58044: PUSH
58045: LD_INT 2
58047: NEG
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: LIST
58057: LIST
58058: LIST
58059: LIST
58060: LIST
58061: LIST
58062: LIST
58063: LIST
58064: LIST
58065: LIST
58066: LIST
58067: LIST
58068: LIST
58069: LIST
58070: LIST
58071: LIST
58072: LIST
58073: LIST
58074: LIST
58075: LIST
58076: LIST
58077: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58078: LD_ADDR_VAR 0 28
58082: PUSH
58083: LD_INT 0
58085: PUSH
58086: LD_INT 0
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 0
58095: PUSH
58096: LD_INT 1
58098: NEG
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 1
58106: PUSH
58107: LD_INT 0
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 1
58116: PUSH
58117: LD_INT 1
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 0
58126: PUSH
58127: LD_INT 1
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: LD_INT 1
58136: NEG
58137: PUSH
58138: LD_INT 0
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: PUSH
58145: LD_INT 1
58147: NEG
58148: PUSH
58149: LD_INT 1
58151: NEG
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 1
58159: NEG
58160: PUSH
58161: LD_INT 2
58163: NEG
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 0
58171: PUSH
58172: LD_INT 2
58174: NEG
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: LD_INT 1
58182: PUSH
58183: LD_INT 1
58185: NEG
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: PUSH
58191: LD_INT 2
58193: PUSH
58194: LD_INT 0
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: PUSH
58201: LD_INT 2
58203: PUSH
58204: LD_INT 1
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PUSH
58211: LD_INT 2
58213: PUSH
58214: LD_INT 2
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: LD_INT 1
58223: PUSH
58224: LD_INT 2
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 0
58233: PUSH
58234: LD_INT 2
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 1
58243: NEG
58244: PUSH
58245: LD_INT 1
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 2
58254: NEG
58255: PUSH
58256: LD_INT 0
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: LD_INT 2
58265: NEG
58266: PUSH
58267: LD_INT 1
58269: NEG
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 2
58277: NEG
58278: PUSH
58279: LD_INT 2
58281: NEG
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 2
58289: NEG
58290: PUSH
58291: LD_INT 3
58293: NEG
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: LD_INT 1
58301: NEG
58302: PUSH
58303: LD_INT 3
58305: NEG
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: LD_INT 3
58313: NEG
58314: PUSH
58315: LD_INT 1
58317: NEG
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: LD_INT 3
58325: NEG
58326: PUSH
58327: LD_INT 2
58329: NEG
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: LIST
58345: LIST
58346: LIST
58347: LIST
58348: LIST
58349: LIST
58350: LIST
58351: LIST
58352: LIST
58353: LIST
58354: LIST
58355: LIST
58356: LIST
58357: LIST
58358: LIST
58359: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58360: LD_ADDR_VAR 0 29
58364: PUSH
58365: LD_INT 0
58367: PUSH
58368: LD_INT 0
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_INT 0
58377: PUSH
58378: LD_INT 1
58380: NEG
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: LD_INT 1
58388: PUSH
58389: LD_INT 0
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: LD_INT 1
58398: PUSH
58399: LD_INT 1
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: PUSH
58406: LD_INT 0
58408: PUSH
58409: LD_INT 1
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 1
58418: NEG
58419: PUSH
58420: LD_INT 0
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: PUSH
58427: LD_INT 1
58429: NEG
58430: PUSH
58431: LD_INT 1
58433: NEG
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 1
58441: NEG
58442: PUSH
58443: LD_INT 2
58445: NEG
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 0
58453: PUSH
58454: LD_INT 2
58456: NEG
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: PUSH
58462: LD_INT 1
58464: PUSH
58465: LD_INT 1
58467: NEG
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: PUSH
58473: LD_INT 2
58475: PUSH
58476: LD_INT 0
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: LD_INT 2
58485: PUSH
58486: LD_INT 1
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: PUSH
58493: LD_INT 1
58495: PUSH
58496: LD_INT 2
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PUSH
58503: LD_INT 0
58505: PUSH
58506: LD_INT 2
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 1
58515: NEG
58516: PUSH
58517: LD_INT 1
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 2
58526: NEG
58527: PUSH
58528: LD_INT 1
58530: NEG
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: LD_INT 2
58538: NEG
58539: PUSH
58540: LD_INT 2
58542: NEG
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: LD_INT 2
58550: NEG
58551: PUSH
58552: LD_INT 3
58554: NEG
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 2
58562: PUSH
58563: LD_INT 1
58565: NEG
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PUSH
58571: LD_INT 3
58573: PUSH
58574: LD_INT 1
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: LD_INT 1
58583: PUSH
58584: LD_INT 3
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: LD_INT 1
58593: NEG
58594: PUSH
58595: LD_INT 2
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: PUSH
58602: LD_INT 3
58604: NEG
58605: PUSH
58606: LD_INT 2
58608: NEG
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: LIST
58618: LIST
58619: LIST
58620: LIST
58621: LIST
58622: LIST
58623: LIST
58624: LIST
58625: LIST
58626: LIST
58627: LIST
58628: LIST
58629: LIST
58630: LIST
58631: LIST
58632: LIST
58633: LIST
58634: LIST
58635: LIST
58636: LIST
58637: LIST
58638: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58639: LD_ADDR_VAR 0 30
58643: PUSH
58644: LD_INT 0
58646: PUSH
58647: LD_INT 0
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: PUSH
58654: LD_INT 0
58656: PUSH
58657: LD_INT 1
58659: NEG
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: PUSH
58665: LD_INT 1
58667: PUSH
58668: LD_INT 0
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: LD_INT 1
58677: PUSH
58678: LD_INT 1
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 0
58687: PUSH
58688: LD_INT 1
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 1
58697: NEG
58698: PUSH
58699: LD_INT 0
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 1
58708: NEG
58709: PUSH
58710: LD_INT 1
58712: NEG
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 1
58720: NEG
58721: PUSH
58722: LD_INT 2
58724: NEG
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 0
58732: PUSH
58733: LD_INT 2
58735: NEG
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 1
58743: PUSH
58744: LD_INT 1
58746: NEG
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: LD_INT 2
58754: PUSH
58755: LD_INT 0
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 2
58764: PUSH
58765: LD_INT 1
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 2
58774: PUSH
58775: LD_INT 2
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 1
58784: PUSH
58785: LD_INT 2
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 1
58794: NEG
58795: PUSH
58796: LD_INT 1
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 2
58805: NEG
58806: PUSH
58807: LD_INT 0
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 2
58816: NEG
58817: PUSH
58818: LD_INT 1
58820: NEG
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 1
58828: NEG
58829: PUSH
58830: LD_INT 3
58832: NEG
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 1
58840: PUSH
58841: LD_INT 2
58843: NEG
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 3
58851: PUSH
58852: LD_INT 2
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 2
58861: PUSH
58862: LD_INT 3
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: LD_INT 2
58871: NEG
58872: PUSH
58873: LD_INT 1
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PUSH
58880: LD_INT 3
58882: NEG
58883: PUSH
58884: LD_INT 1
58886: NEG
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: LIST
58900: LIST
58901: LIST
58902: LIST
58903: LIST
58904: LIST
58905: LIST
58906: LIST
58907: LIST
58908: LIST
58909: LIST
58910: LIST
58911: LIST
58912: LIST
58913: LIST
58914: LIST
58915: LIST
58916: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58917: LD_ADDR_VAR 0 31
58921: PUSH
58922: LD_INT 0
58924: PUSH
58925: LD_INT 0
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 0
58934: PUSH
58935: LD_INT 1
58937: NEG
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 1
58945: PUSH
58946: LD_INT 0
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: PUSH
58953: LD_INT 1
58955: PUSH
58956: LD_INT 1
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: LD_INT 0
58965: PUSH
58966: LD_INT 1
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: LD_INT 1
58975: NEG
58976: PUSH
58977: LD_INT 0
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 1
58986: NEG
58987: PUSH
58988: LD_INT 1
58990: NEG
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: PUSH
58996: LD_INT 1
58998: NEG
58999: PUSH
59000: LD_INT 2
59002: NEG
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_INT 1
59010: PUSH
59011: LD_INT 1
59013: NEG
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: PUSH
59019: LD_INT 2
59021: PUSH
59022: LD_INT 0
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: PUSH
59029: LD_INT 2
59031: PUSH
59032: LD_INT 1
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: LD_INT 2
59041: PUSH
59042: LD_INT 2
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: PUSH
59049: LD_INT 1
59051: PUSH
59052: LD_INT 2
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: PUSH
59059: LD_INT 0
59061: PUSH
59062: LD_INT 2
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: PUSH
59069: LD_INT 1
59071: NEG
59072: PUSH
59073: LD_INT 1
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 2
59082: NEG
59083: PUSH
59084: LD_INT 1
59086: NEG
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 2
59094: NEG
59095: PUSH
59096: LD_INT 2
59098: NEG
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: LD_INT 2
59106: NEG
59107: PUSH
59108: LD_INT 3
59110: NEG
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: LD_INT 2
59118: PUSH
59119: LD_INT 1
59121: NEG
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 3
59129: PUSH
59130: LD_INT 1
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 1
59139: PUSH
59140: LD_INT 3
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: LD_INT 1
59149: NEG
59150: PUSH
59151: LD_INT 2
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: LD_INT 3
59160: NEG
59161: PUSH
59162: LD_INT 2
59164: NEG
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: LIST
59174: LIST
59175: LIST
59176: LIST
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: LIST
59185: LIST
59186: LIST
59187: LIST
59188: LIST
59189: LIST
59190: LIST
59191: LIST
59192: LIST
59193: LIST
59194: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59195: LD_ADDR_VAR 0 32
59199: PUSH
59200: LD_INT 0
59202: PUSH
59203: LD_INT 0
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 0
59212: PUSH
59213: LD_INT 1
59215: NEG
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 1
59223: PUSH
59224: LD_INT 0
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 1
59233: PUSH
59234: LD_INT 1
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 0
59243: PUSH
59244: LD_INT 1
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: LD_INT 1
59253: NEG
59254: PUSH
59255: LD_INT 0
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: LD_INT 1
59264: NEG
59265: PUSH
59266: LD_INT 1
59268: NEG
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: LD_INT 1
59276: NEG
59277: PUSH
59278: LD_INT 2
59280: NEG
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PUSH
59286: LD_INT 0
59288: PUSH
59289: LD_INT 2
59291: NEG
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 1
59299: PUSH
59300: LD_INT 1
59302: NEG
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: LD_INT 2
59310: PUSH
59311: LD_INT 1
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: LD_INT 2
59320: PUSH
59321: LD_INT 2
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: PUSH
59328: LD_INT 1
59330: PUSH
59331: LD_INT 2
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: PUSH
59338: LD_INT 0
59340: PUSH
59341: LD_INT 2
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: PUSH
59348: LD_INT 1
59350: NEG
59351: PUSH
59352: LD_INT 1
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: PUSH
59359: LD_INT 2
59361: NEG
59362: PUSH
59363: LD_INT 0
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: PUSH
59370: LD_INT 2
59372: NEG
59373: PUSH
59374: LD_INT 1
59376: NEG
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: PUSH
59382: LD_INT 1
59384: NEG
59385: PUSH
59386: LD_INT 3
59388: NEG
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: PUSH
59394: LD_INT 1
59396: PUSH
59397: LD_INT 2
59399: NEG
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: LD_INT 3
59407: PUSH
59408: LD_INT 2
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: PUSH
59415: LD_INT 2
59417: PUSH
59418: LD_INT 3
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 2
59427: NEG
59428: PUSH
59429: LD_INT 1
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 3
59438: NEG
59439: PUSH
59440: LD_INT 1
59442: NEG
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PUSH
59448: EMPTY
59449: LIST
59450: LIST
59451: LIST
59452: LIST
59453: LIST
59454: LIST
59455: LIST
59456: LIST
59457: LIST
59458: LIST
59459: LIST
59460: LIST
59461: LIST
59462: LIST
59463: LIST
59464: LIST
59465: LIST
59466: LIST
59467: LIST
59468: LIST
59469: LIST
59470: LIST
59471: LIST
59472: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59473: LD_ADDR_VAR 0 33
59477: PUSH
59478: LD_INT 0
59480: PUSH
59481: LD_INT 0
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: PUSH
59488: LD_INT 0
59490: PUSH
59491: LD_INT 1
59493: NEG
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: LD_INT 1
59501: PUSH
59502: LD_INT 0
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: LD_INT 1
59511: PUSH
59512: LD_INT 1
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: LD_INT 0
59521: PUSH
59522: LD_INT 1
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: LD_INT 1
59531: NEG
59532: PUSH
59533: LD_INT 0
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 1
59542: NEG
59543: PUSH
59544: LD_INT 1
59546: NEG
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: PUSH
59552: LD_INT 1
59554: NEG
59555: PUSH
59556: LD_INT 2
59558: NEG
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: PUSH
59564: LD_INT 1
59566: PUSH
59567: LD_INT 1
59569: NEG
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: LD_INT 2
59577: PUSH
59578: LD_INT 0
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: LD_INT 2
59587: PUSH
59588: LD_INT 1
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: PUSH
59595: LD_INT 1
59597: PUSH
59598: LD_INT 2
59600: PUSH
59601: EMPTY
59602: LIST
59603: LIST
59604: PUSH
59605: LD_INT 0
59607: PUSH
59608: LD_INT 2
59610: PUSH
59611: EMPTY
59612: LIST
59613: LIST
59614: PUSH
59615: LD_INT 1
59617: NEG
59618: PUSH
59619: LD_INT 1
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: LD_INT 2
59628: NEG
59629: PUSH
59630: LD_INT 0
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: LD_INT 2
59639: NEG
59640: PUSH
59641: LD_INT 1
59643: NEG
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: PUSH
59649: LD_INT 2
59651: NEG
59652: PUSH
59653: LD_INT 2
59655: NEG
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: LD_INT 2
59663: NEG
59664: PUSH
59665: LD_INT 3
59667: NEG
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: PUSH
59673: LD_INT 2
59675: PUSH
59676: LD_INT 1
59678: NEG
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: PUSH
59684: LD_INT 3
59686: PUSH
59687: LD_INT 1
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: LD_INT 1
59696: PUSH
59697: LD_INT 3
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: PUSH
59704: LD_INT 1
59706: NEG
59707: PUSH
59708: LD_INT 2
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: PUSH
59715: LD_INT 3
59717: NEG
59718: PUSH
59719: LD_INT 2
59721: NEG
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: LIST
59735: LIST
59736: LIST
59737: LIST
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: LIST
59750: LIST
59751: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59752: LD_ADDR_VAR 0 34
59756: PUSH
59757: LD_INT 0
59759: PUSH
59760: LD_INT 0
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: LD_INT 0
59769: PUSH
59770: LD_INT 1
59772: NEG
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 1
59780: PUSH
59781: LD_INT 0
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: LD_INT 1
59790: PUSH
59791: LD_INT 1
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 0
59800: PUSH
59801: LD_INT 1
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 1
59810: NEG
59811: PUSH
59812: LD_INT 0
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: PUSH
59819: LD_INT 1
59821: NEG
59822: PUSH
59823: LD_INT 1
59825: NEG
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 1
59833: NEG
59834: PUSH
59835: LD_INT 2
59837: NEG
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: PUSH
59843: LD_INT 0
59845: PUSH
59846: LD_INT 2
59848: NEG
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: PUSH
59854: LD_INT 1
59856: PUSH
59857: LD_INT 1
59859: NEG
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: PUSH
59865: LD_INT 2
59867: PUSH
59868: LD_INT 1
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: PUSH
59875: LD_INT 2
59877: PUSH
59878: LD_INT 2
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: PUSH
59885: LD_INT 1
59887: PUSH
59888: LD_INT 2
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: PUSH
59895: LD_INT 1
59897: NEG
59898: PUSH
59899: LD_INT 1
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: PUSH
59906: LD_INT 2
59908: NEG
59909: PUSH
59910: LD_INT 0
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: LD_INT 2
59919: NEG
59920: PUSH
59921: LD_INT 1
59923: NEG
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: LD_INT 2
59931: NEG
59932: PUSH
59933: LD_INT 2
59935: NEG
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: LD_INT 1
59943: NEG
59944: PUSH
59945: LD_INT 3
59947: NEG
59948: PUSH
59949: EMPTY
59950: LIST
59951: LIST
59952: PUSH
59953: LD_INT 1
59955: PUSH
59956: LD_INT 2
59958: NEG
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: LD_INT 3
59966: PUSH
59967: LD_INT 2
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 2
59976: PUSH
59977: LD_INT 3
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: LD_INT 2
59986: NEG
59987: PUSH
59988: LD_INT 1
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 3
59997: NEG
59998: PUSH
59999: LD_INT 1
60001: NEG
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: LIST
60011: LIST
60012: LIST
60013: LIST
60014: LIST
60015: LIST
60016: LIST
60017: LIST
60018: LIST
60019: LIST
60020: LIST
60021: LIST
60022: LIST
60023: LIST
60024: LIST
60025: LIST
60026: LIST
60027: LIST
60028: LIST
60029: LIST
60030: LIST
60031: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60032: LD_ADDR_VAR 0 35
60036: PUSH
60037: LD_INT 0
60039: PUSH
60040: LD_INT 0
60042: PUSH
60043: EMPTY
60044: LIST
60045: LIST
60046: PUSH
60047: LD_INT 0
60049: PUSH
60050: LD_INT 1
60052: NEG
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: LD_INT 1
60060: PUSH
60061: LD_INT 0
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: LD_INT 1
60070: PUSH
60071: LD_INT 1
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: PUSH
60078: LD_INT 0
60080: PUSH
60081: LD_INT 1
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: LD_INT 1
60090: NEG
60091: PUSH
60092: LD_INT 0
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 1
60101: NEG
60102: PUSH
60103: LD_INT 1
60105: NEG
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 2
60113: PUSH
60114: LD_INT 1
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PUSH
60121: LD_INT 2
60123: NEG
60124: PUSH
60125: LD_INT 1
60127: NEG
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: LIST
60137: LIST
60138: LIST
60139: LIST
60140: LIST
60141: LIST
60142: LIST
60143: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60144: LD_ADDR_VAR 0 36
60148: PUSH
60149: LD_INT 0
60151: PUSH
60152: LD_INT 0
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: PUSH
60159: LD_INT 0
60161: PUSH
60162: LD_INT 1
60164: NEG
60165: PUSH
60166: EMPTY
60167: LIST
60168: LIST
60169: PUSH
60170: LD_INT 1
60172: PUSH
60173: LD_INT 0
60175: PUSH
60176: EMPTY
60177: LIST
60178: LIST
60179: PUSH
60180: LD_INT 1
60182: PUSH
60183: LD_INT 1
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: PUSH
60190: LD_INT 0
60192: PUSH
60193: LD_INT 1
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: PUSH
60200: LD_INT 1
60202: NEG
60203: PUSH
60204: LD_INT 0
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: PUSH
60211: LD_INT 1
60213: NEG
60214: PUSH
60215: LD_INT 1
60217: NEG
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: LD_INT 1
60225: NEG
60226: PUSH
60227: LD_INT 2
60229: NEG
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: PUSH
60235: LD_INT 1
60237: PUSH
60238: LD_INT 2
60240: PUSH
60241: EMPTY
60242: LIST
60243: LIST
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: LIST
60249: LIST
60250: LIST
60251: LIST
60252: LIST
60253: LIST
60254: LIST
60255: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60256: LD_ADDR_VAR 0 37
60260: PUSH
60261: LD_INT 0
60263: PUSH
60264: LD_INT 0
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 0
60273: PUSH
60274: LD_INT 1
60276: NEG
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: PUSH
60282: LD_INT 1
60284: PUSH
60285: LD_INT 0
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: LD_INT 1
60294: PUSH
60295: LD_INT 1
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 0
60304: PUSH
60305: LD_INT 1
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: LD_INT 1
60314: NEG
60315: PUSH
60316: LD_INT 0
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: PUSH
60323: LD_INT 1
60325: NEG
60326: PUSH
60327: LD_INT 1
60329: NEG
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: LD_INT 1
60337: PUSH
60338: LD_INT 1
60340: NEG
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 1
60348: NEG
60349: PUSH
60350: LD_INT 1
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: LIST
60361: LIST
60362: LIST
60363: LIST
60364: LIST
60365: LIST
60366: LIST
60367: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60368: LD_ADDR_VAR 0 38
60372: PUSH
60373: LD_INT 0
60375: PUSH
60376: LD_INT 0
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: LD_INT 0
60385: PUSH
60386: LD_INT 1
60388: NEG
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 1
60396: PUSH
60397: LD_INT 0
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: PUSH
60404: LD_INT 1
60406: PUSH
60407: LD_INT 1
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PUSH
60414: LD_INT 0
60416: PUSH
60417: LD_INT 1
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: PUSH
60424: LD_INT 1
60426: NEG
60427: PUSH
60428: LD_INT 0
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: PUSH
60435: LD_INT 1
60437: NEG
60438: PUSH
60439: LD_INT 1
60441: NEG
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 2
60449: PUSH
60450: LD_INT 1
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: LD_INT 2
60459: NEG
60460: PUSH
60461: LD_INT 1
60463: NEG
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PUSH
60469: EMPTY
60470: LIST
60471: LIST
60472: LIST
60473: LIST
60474: LIST
60475: LIST
60476: LIST
60477: LIST
60478: LIST
60479: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60480: LD_ADDR_VAR 0 39
60484: PUSH
60485: LD_INT 0
60487: PUSH
60488: LD_INT 0
60490: PUSH
60491: EMPTY
60492: LIST
60493: LIST
60494: PUSH
60495: LD_INT 0
60497: PUSH
60498: LD_INT 1
60500: NEG
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: PUSH
60506: LD_INT 1
60508: PUSH
60509: LD_INT 0
60511: PUSH
60512: EMPTY
60513: LIST
60514: LIST
60515: PUSH
60516: LD_INT 1
60518: PUSH
60519: LD_INT 1
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: PUSH
60526: LD_INT 0
60528: PUSH
60529: LD_INT 1
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: PUSH
60536: LD_INT 1
60538: NEG
60539: PUSH
60540: LD_INT 0
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: PUSH
60547: LD_INT 1
60549: NEG
60550: PUSH
60551: LD_INT 1
60553: NEG
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: LD_INT 1
60561: NEG
60562: PUSH
60563: LD_INT 2
60565: NEG
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: PUSH
60571: LD_INT 1
60573: PUSH
60574: LD_INT 2
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: LIST
60585: LIST
60586: LIST
60587: LIST
60588: LIST
60589: LIST
60590: LIST
60591: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60592: LD_ADDR_VAR 0 40
60596: PUSH
60597: LD_INT 0
60599: PUSH
60600: LD_INT 0
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: PUSH
60607: LD_INT 0
60609: PUSH
60610: LD_INT 1
60612: NEG
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: PUSH
60618: LD_INT 1
60620: PUSH
60621: LD_INT 0
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: PUSH
60628: LD_INT 1
60630: PUSH
60631: LD_INT 1
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: PUSH
60638: LD_INT 0
60640: PUSH
60641: LD_INT 1
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: PUSH
60648: LD_INT 1
60650: NEG
60651: PUSH
60652: LD_INT 0
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: PUSH
60659: LD_INT 1
60661: NEG
60662: PUSH
60663: LD_INT 1
60665: NEG
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: LD_INT 1
60673: PUSH
60674: LD_INT 1
60676: NEG
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: LD_INT 1
60684: NEG
60685: PUSH
60686: LD_INT 1
60688: PUSH
60689: EMPTY
60690: LIST
60691: LIST
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: LIST
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60704: LD_ADDR_VAR 0 41
60708: PUSH
60709: LD_INT 0
60711: PUSH
60712: LD_INT 0
60714: PUSH
60715: EMPTY
60716: LIST
60717: LIST
60718: PUSH
60719: LD_INT 0
60721: PUSH
60722: LD_INT 1
60724: NEG
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PUSH
60730: LD_INT 1
60732: PUSH
60733: LD_INT 0
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PUSH
60740: LD_INT 1
60742: PUSH
60743: LD_INT 1
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: LD_INT 0
60752: PUSH
60753: LD_INT 1
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: LD_INT 1
60762: NEG
60763: PUSH
60764: LD_INT 0
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: LD_INT 1
60773: NEG
60774: PUSH
60775: LD_INT 1
60777: NEG
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: PUSH
60783: LD_INT 1
60785: NEG
60786: PUSH
60787: LD_INT 2
60789: NEG
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: LD_INT 1
60797: PUSH
60798: LD_INT 1
60800: NEG
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: PUSH
60806: LD_INT 2
60808: PUSH
60809: LD_INT 0
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PUSH
60816: LD_INT 2
60818: PUSH
60819: LD_INT 1
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 2
60828: PUSH
60829: LD_INT 2
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 1
60838: PUSH
60839: LD_INT 2
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PUSH
60846: LD_INT 1
60848: NEG
60849: PUSH
60850: LD_INT 1
60852: PUSH
60853: EMPTY
60854: LIST
60855: LIST
60856: PUSH
60857: LD_INT 2
60859: NEG
60860: PUSH
60861: LD_INT 0
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: PUSH
60868: LD_INT 2
60870: NEG
60871: PUSH
60872: LD_INT 1
60874: NEG
60875: PUSH
60876: EMPTY
60877: LIST
60878: LIST
60879: PUSH
60880: LD_INT 2
60882: NEG
60883: PUSH
60884: LD_INT 2
60886: NEG
60887: PUSH
60888: EMPTY
60889: LIST
60890: LIST
60891: PUSH
60892: LD_INT 2
60894: NEG
60895: PUSH
60896: LD_INT 3
60898: NEG
60899: PUSH
60900: EMPTY
60901: LIST
60902: LIST
60903: PUSH
60904: LD_INT 2
60906: PUSH
60907: LD_INT 1
60909: NEG
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: PUSH
60915: LD_INT 3
60917: PUSH
60918: LD_INT 0
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: PUSH
60925: LD_INT 3
60927: PUSH
60928: LD_INT 1
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: PUSH
60935: LD_INT 3
60937: PUSH
60938: LD_INT 2
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 3
60947: PUSH
60948: LD_INT 3
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 2
60957: PUSH
60958: LD_INT 3
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: LD_INT 2
60967: NEG
60968: PUSH
60969: LD_INT 1
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PUSH
60976: LD_INT 3
60978: NEG
60979: PUSH
60980: LD_INT 0
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: PUSH
60987: LD_INT 3
60989: NEG
60990: PUSH
60991: LD_INT 1
60993: NEG
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: PUSH
60999: LD_INT 3
61001: NEG
61002: PUSH
61003: LD_INT 2
61005: NEG
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: LD_INT 3
61013: NEG
61014: PUSH
61015: LD_INT 3
61017: NEG
61018: PUSH
61019: EMPTY
61020: LIST
61021: LIST
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: LIST
61027: LIST
61028: LIST
61029: LIST
61030: LIST
61031: LIST
61032: LIST
61033: LIST
61034: LIST
61035: LIST
61036: LIST
61037: LIST
61038: LIST
61039: LIST
61040: LIST
61041: LIST
61042: LIST
61043: LIST
61044: LIST
61045: LIST
61046: LIST
61047: LIST
61048: LIST
61049: LIST
61050: LIST
61051: LIST
61052: LIST
61053: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61054: LD_ADDR_VAR 0 42
61058: PUSH
61059: LD_INT 0
61061: PUSH
61062: LD_INT 0
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: PUSH
61069: LD_INT 0
61071: PUSH
61072: LD_INT 1
61074: NEG
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: PUSH
61080: LD_INT 1
61082: PUSH
61083: LD_INT 0
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: PUSH
61090: LD_INT 1
61092: PUSH
61093: LD_INT 1
61095: PUSH
61096: EMPTY
61097: LIST
61098: LIST
61099: PUSH
61100: LD_INT 0
61102: PUSH
61103: LD_INT 1
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: PUSH
61110: LD_INT 1
61112: NEG
61113: PUSH
61114: LD_INT 0
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PUSH
61121: LD_INT 1
61123: NEG
61124: PUSH
61125: LD_INT 1
61127: NEG
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: PUSH
61133: LD_INT 1
61135: NEG
61136: PUSH
61137: LD_INT 2
61139: NEG
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: LD_INT 0
61147: PUSH
61148: LD_INT 2
61150: NEG
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: LD_INT 1
61158: PUSH
61159: LD_INT 1
61161: NEG
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: PUSH
61167: LD_INT 2
61169: PUSH
61170: LD_INT 1
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: PUSH
61177: LD_INT 2
61179: PUSH
61180: LD_INT 2
61182: PUSH
61183: EMPTY
61184: LIST
61185: LIST
61186: PUSH
61187: LD_INT 1
61189: PUSH
61190: LD_INT 2
61192: PUSH
61193: EMPTY
61194: LIST
61195: LIST
61196: PUSH
61197: LD_INT 0
61199: PUSH
61200: LD_INT 2
61202: PUSH
61203: EMPTY
61204: LIST
61205: LIST
61206: PUSH
61207: LD_INT 1
61209: NEG
61210: PUSH
61211: LD_INT 1
61213: PUSH
61214: EMPTY
61215: LIST
61216: LIST
61217: PUSH
61218: LD_INT 2
61220: NEG
61221: PUSH
61222: LD_INT 1
61224: NEG
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 2
61232: NEG
61233: PUSH
61234: LD_INT 2
61236: NEG
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: PUSH
61242: LD_INT 2
61244: NEG
61245: PUSH
61246: LD_INT 3
61248: NEG
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: PUSH
61254: LD_INT 1
61256: NEG
61257: PUSH
61258: LD_INT 3
61260: NEG
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: PUSH
61266: LD_INT 0
61268: PUSH
61269: LD_INT 3
61271: NEG
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: PUSH
61277: LD_INT 1
61279: PUSH
61280: LD_INT 2
61282: NEG
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: PUSH
61288: LD_INT 3
61290: PUSH
61291: LD_INT 2
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PUSH
61298: LD_INT 3
61300: PUSH
61301: LD_INT 3
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: PUSH
61308: LD_INT 2
61310: PUSH
61311: LD_INT 3
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: PUSH
61318: LD_INT 1
61320: PUSH
61321: LD_INT 3
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: PUSH
61328: LD_INT 0
61330: PUSH
61331: LD_INT 3
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: PUSH
61338: LD_INT 1
61340: NEG
61341: PUSH
61342: LD_INT 2
61344: PUSH
61345: EMPTY
61346: LIST
61347: LIST
61348: PUSH
61349: LD_INT 3
61351: NEG
61352: PUSH
61353: LD_INT 2
61355: NEG
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: LD_INT 3
61363: NEG
61364: PUSH
61365: LD_INT 3
61367: NEG
61368: PUSH
61369: EMPTY
61370: LIST
61371: LIST
61372: PUSH
61373: EMPTY
61374: LIST
61375: LIST
61376: LIST
61377: LIST
61378: LIST
61379: LIST
61380: LIST
61381: LIST
61382: LIST
61383: LIST
61384: LIST
61385: LIST
61386: LIST
61387: LIST
61388: LIST
61389: LIST
61390: LIST
61391: LIST
61392: LIST
61393: LIST
61394: LIST
61395: LIST
61396: LIST
61397: LIST
61398: LIST
61399: LIST
61400: LIST
61401: LIST
61402: LIST
61403: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61404: LD_ADDR_VAR 0 43
61408: PUSH
61409: LD_INT 0
61411: PUSH
61412: LD_INT 0
61414: PUSH
61415: EMPTY
61416: LIST
61417: LIST
61418: PUSH
61419: LD_INT 0
61421: PUSH
61422: LD_INT 1
61424: NEG
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: PUSH
61430: LD_INT 1
61432: PUSH
61433: LD_INT 0
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: LD_INT 1
61442: PUSH
61443: LD_INT 1
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: PUSH
61450: LD_INT 0
61452: PUSH
61453: LD_INT 1
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: LD_INT 1
61462: NEG
61463: PUSH
61464: LD_INT 0
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: PUSH
61471: LD_INT 1
61473: NEG
61474: PUSH
61475: LD_INT 1
61477: NEG
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 1
61485: NEG
61486: PUSH
61487: LD_INT 2
61489: NEG
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: PUSH
61495: LD_INT 0
61497: PUSH
61498: LD_INT 2
61500: NEG
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: PUSH
61506: LD_INT 1
61508: PUSH
61509: LD_INT 1
61511: NEG
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: PUSH
61517: LD_INT 2
61519: PUSH
61520: LD_INT 0
61522: PUSH
61523: EMPTY
61524: LIST
61525: LIST
61526: PUSH
61527: LD_INT 2
61529: PUSH
61530: LD_INT 1
61532: PUSH
61533: EMPTY
61534: LIST
61535: LIST
61536: PUSH
61537: LD_INT 1
61539: PUSH
61540: LD_INT 2
61542: PUSH
61543: EMPTY
61544: LIST
61545: LIST
61546: PUSH
61547: LD_INT 0
61549: PUSH
61550: LD_INT 2
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: PUSH
61557: LD_INT 1
61559: NEG
61560: PUSH
61561: LD_INT 1
61563: PUSH
61564: EMPTY
61565: LIST
61566: LIST
61567: PUSH
61568: LD_INT 2
61570: NEG
61571: PUSH
61572: LD_INT 0
61574: PUSH
61575: EMPTY
61576: LIST
61577: LIST
61578: PUSH
61579: LD_INT 2
61581: NEG
61582: PUSH
61583: LD_INT 1
61585: NEG
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: PUSH
61591: LD_INT 1
61593: NEG
61594: PUSH
61595: LD_INT 3
61597: NEG
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: PUSH
61603: LD_INT 0
61605: PUSH
61606: LD_INT 3
61608: NEG
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: PUSH
61614: LD_INT 1
61616: PUSH
61617: LD_INT 2
61619: NEG
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: PUSH
61625: LD_INT 2
61627: PUSH
61628: LD_INT 1
61630: NEG
61631: PUSH
61632: EMPTY
61633: LIST
61634: LIST
61635: PUSH
61636: LD_INT 3
61638: PUSH
61639: LD_INT 0
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: PUSH
61646: LD_INT 3
61648: PUSH
61649: LD_INT 1
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: PUSH
61656: LD_INT 1
61658: PUSH
61659: LD_INT 3
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: PUSH
61666: LD_INT 0
61668: PUSH
61669: LD_INT 3
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: PUSH
61676: LD_INT 1
61678: NEG
61679: PUSH
61680: LD_INT 2
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: LD_INT 2
61689: NEG
61690: PUSH
61691: LD_INT 1
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: PUSH
61698: LD_INT 3
61700: NEG
61701: PUSH
61702: LD_INT 0
61704: PUSH
61705: EMPTY
61706: LIST
61707: LIST
61708: PUSH
61709: LD_INT 3
61711: NEG
61712: PUSH
61713: LD_INT 1
61715: NEG
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PUSH
61721: EMPTY
61722: LIST
61723: LIST
61724: LIST
61725: LIST
61726: LIST
61727: LIST
61728: LIST
61729: LIST
61730: LIST
61731: LIST
61732: LIST
61733: LIST
61734: LIST
61735: LIST
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: LIST
61741: LIST
61742: LIST
61743: LIST
61744: LIST
61745: LIST
61746: LIST
61747: LIST
61748: LIST
61749: LIST
61750: LIST
61751: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61752: LD_ADDR_VAR 0 44
61756: PUSH
61757: LD_INT 0
61759: PUSH
61760: LD_INT 0
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: LD_INT 0
61769: PUSH
61770: LD_INT 1
61772: NEG
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 1
61780: PUSH
61781: LD_INT 0
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: PUSH
61788: LD_INT 1
61790: PUSH
61791: LD_INT 1
61793: PUSH
61794: EMPTY
61795: LIST
61796: LIST
61797: PUSH
61798: LD_INT 0
61800: PUSH
61801: LD_INT 1
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: PUSH
61808: LD_INT 1
61810: NEG
61811: PUSH
61812: LD_INT 0
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: PUSH
61819: LD_INT 1
61821: NEG
61822: PUSH
61823: LD_INT 1
61825: NEG
61826: PUSH
61827: EMPTY
61828: LIST
61829: LIST
61830: PUSH
61831: LD_INT 1
61833: NEG
61834: PUSH
61835: LD_INT 2
61837: NEG
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: PUSH
61843: LD_INT 1
61845: PUSH
61846: LD_INT 1
61848: NEG
61849: PUSH
61850: EMPTY
61851: LIST
61852: LIST
61853: PUSH
61854: LD_INT 2
61856: PUSH
61857: LD_INT 0
61859: PUSH
61860: EMPTY
61861: LIST
61862: LIST
61863: PUSH
61864: LD_INT 2
61866: PUSH
61867: LD_INT 1
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: LD_INT 2
61876: PUSH
61877: LD_INT 2
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: PUSH
61884: LD_INT 1
61886: PUSH
61887: LD_INT 2
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: PUSH
61894: LD_INT 1
61896: NEG
61897: PUSH
61898: LD_INT 1
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: PUSH
61905: LD_INT 2
61907: NEG
61908: PUSH
61909: LD_INT 0
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: LD_INT 2
61918: NEG
61919: PUSH
61920: LD_INT 1
61922: NEG
61923: PUSH
61924: EMPTY
61925: LIST
61926: LIST
61927: PUSH
61928: LD_INT 2
61930: NEG
61931: PUSH
61932: LD_INT 2
61934: NEG
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: PUSH
61940: LD_INT 2
61942: NEG
61943: PUSH
61944: LD_INT 3
61946: NEG
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: PUSH
61952: LD_INT 2
61954: PUSH
61955: LD_INT 1
61957: NEG
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: PUSH
61963: LD_INT 3
61965: PUSH
61966: LD_INT 0
61968: PUSH
61969: EMPTY
61970: LIST
61971: LIST
61972: PUSH
61973: LD_INT 3
61975: PUSH
61976: LD_INT 1
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: PUSH
61983: LD_INT 3
61985: PUSH
61986: LD_INT 2
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_INT 3
61995: PUSH
61996: LD_INT 3
61998: PUSH
61999: EMPTY
62000: LIST
62001: LIST
62002: PUSH
62003: LD_INT 2
62005: PUSH
62006: LD_INT 3
62008: PUSH
62009: EMPTY
62010: LIST
62011: LIST
62012: PUSH
62013: LD_INT 2
62015: NEG
62016: PUSH
62017: LD_INT 1
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: LD_INT 3
62026: NEG
62027: PUSH
62028: LD_INT 0
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 3
62037: NEG
62038: PUSH
62039: LD_INT 1
62041: NEG
62042: PUSH
62043: EMPTY
62044: LIST
62045: LIST
62046: PUSH
62047: LD_INT 3
62049: NEG
62050: PUSH
62051: LD_INT 2
62053: NEG
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: PUSH
62059: LD_INT 3
62061: NEG
62062: PUSH
62063: LD_INT 3
62065: NEG
62066: PUSH
62067: EMPTY
62068: LIST
62069: LIST
62070: PUSH
62071: EMPTY
62072: LIST
62073: LIST
62074: LIST
62075: LIST
62076: LIST
62077: LIST
62078: LIST
62079: LIST
62080: LIST
62081: LIST
62082: LIST
62083: LIST
62084: LIST
62085: LIST
62086: LIST
62087: LIST
62088: LIST
62089: LIST
62090: LIST
62091: LIST
62092: LIST
62093: LIST
62094: LIST
62095: LIST
62096: LIST
62097: LIST
62098: LIST
62099: LIST
62100: LIST
62101: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62102: LD_ADDR_VAR 0 45
62106: PUSH
62107: LD_INT 0
62109: PUSH
62110: LD_INT 0
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: PUSH
62117: LD_INT 0
62119: PUSH
62120: LD_INT 1
62122: NEG
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: PUSH
62128: LD_INT 1
62130: PUSH
62131: LD_INT 0
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: PUSH
62138: LD_INT 1
62140: PUSH
62141: LD_INT 1
62143: PUSH
62144: EMPTY
62145: LIST
62146: LIST
62147: PUSH
62148: LD_INT 0
62150: PUSH
62151: LD_INT 1
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: PUSH
62158: LD_INT 1
62160: NEG
62161: PUSH
62162: LD_INT 0
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: PUSH
62169: LD_INT 1
62171: NEG
62172: PUSH
62173: LD_INT 1
62175: NEG
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: PUSH
62181: LD_INT 1
62183: NEG
62184: PUSH
62185: LD_INT 2
62187: NEG
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: PUSH
62193: LD_INT 0
62195: PUSH
62196: LD_INT 2
62198: NEG
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: PUSH
62204: LD_INT 1
62206: PUSH
62207: LD_INT 1
62209: NEG
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: PUSH
62215: LD_INT 2
62217: PUSH
62218: LD_INT 1
62220: PUSH
62221: EMPTY
62222: LIST
62223: LIST
62224: PUSH
62225: LD_INT 2
62227: PUSH
62228: LD_INT 2
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: PUSH
62235: LD_INT 1
62237: PUSH
62238: LD_INT 2
62240: PUSH
62241: EMPTY
62242: LIST
62243: LIST
62244: PUSH
62245: LD_INT 0
62247: PUSH
62248: LD_INT 2
62250: PUSH
62251: EMPTY
62252: LIST
62253: LIST
62254: PUSH
62255: LD_INT 1
62257: NEG
62258: PUSH
62259: LD_INT 1
62261: PUSH
62262: EMPTY
62263: LIST
62264: LIST
62265: PUSH
62266: LD_INT 2
62268: NEG
62269: PUSH
62270: LD_INT 1
62272: NEG
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: PUSH
62278: LD_INT 2
62280: NEG
62281: PUSH
62282: LD_INT 2
62284: NEG
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: PUSH
62290: LD_INT 2
62292: NEG
62293: PUSH
62294: LD_INT 3
62296: NEG
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: PUSH
62302: LD_INT 1
62304: NEG
62305: PUSH
62306: LD_INT 3
62308: NEG
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: PUSH
62314: LD_INT 0
62316: PUSH
62317: LD_INT 3
62319: NEG
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: PUSH
62325: LD_INT 1
62327: PUSH
62328: LD_INT 2
62330: NEG
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: PUSH
62336: LD_INT 3
62338: PUSH
62339: LD_INT 2
62341: PUSH
62342: EMPTY
62343: LIST
62344: LIST
62345: PUSH
62346: LD_INT 3
62348: PUSH
62349: LD_INT 3
62351: PUSH
62352: EMPTY
62353: LIST
62354: LIST
62355: PUSH
62356: LD_INT 2
62358: PUSH
62359: LD_INT 3
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: PUSH
62366: LD_INT 1
62368: PUSH
62369: LD_INT 3
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: PUSH
62376: LD_INT 0
62378: PUSH
62379: LD_INT 3
62381: PUSH
62382: EMPTY
62383: LIST
62384: LIST
62385: PUSH
62386: LD_INT 1
62388: NEG
62389: PUSH
62390: LD_INT 2
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: LD_INT 3
62399: NEG
62400: PUSH
62401: LD_INT 2
62403: NEG
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: PUSH
62409: LD_INT 3
62411: NEG
62412: PUSH
62413: LD_INT 3
62415: NEG
62416: PUSH
62417: EMPTY
62418: LIST
62419: LIST
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: LIST
62425: LIST
62426: LIST
62427: LIST
62428: LIST
62429: LIST
62430: LIST
62431: LIST
62432: LIST
62433: LIST
62434: LIST
62435: LIST
62436: LIST
62437: LIST
62438: LIST
62439: LIST
62440: LIST
62441: LIST
62442: LIST
62443: LIST
62444: LIST
62445: LIST
62446: LIST
62447: LIST
62448: LIST
62449: LIST
62450: LIST
62451: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62452: LD_ADDR_VAR 0 46
62456: PUSH
62457: LD_INT 0
62459: PUSH
62460: LD_INT 0
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: PUSH
62467: LD_INT 0
62469: PUSH
62470: LD_INT 1
62472: NEG
62473: PUSH
62474: EMPTY
62475: LIST
62476: LIST
62477: PUSH
62478: LD_INT 1
62480: PUSH
62481: LD_INT 0
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: PUSH
62488: LD_INT 1
62490: PUSH
62491: LD_INT 1
62493: PUSH
62494: EMPTY
62495: LIST
62496: LIST
62497: PUSH
62498: LD_INT 0
62500: PUSH
62501: LD_INT 1
62503: PUSH
62504: EMPTY
62505: LIST
62506: LIST
62507: PUSH
62508: LD_INT 1
62510: NEG
62511: PUSH
62512: LD_INT 0
62514: PUSH
62515: EMPTY
62516: LIST
62517: LIST
62518: PUSH
62519: LD_INT 1
62521: NEG
62522: PUSH
62523: LD_INT 1
62525: NEG
62526: PUSH
62527: EMPTY
62528: LIST
62529: LIST
62530: PUSH
62531: LD_INT 1
62533: NEG
62534: PUSH
62535: LD_INT 2
62537: NEG
62538: PUSH
62539: EMPTY
62540: LIST
62541: LIST
62542: PUSH
62543: LD_INT 0
62545: PUSH
62546: LD_INT 2
62548: NEG
62549: PUSH
62550: EMPTY
62551: LIST
62552: LIST
62553: PUSH
62554: LD_INT 1
62556: PUSH
62557: LD_INT 1
62559: NEG
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: PUSH
62565: LD_INT 2
62567: PUSH
62568: LD_INT 0
62570: PUSH
62571: EMPTY
62572: LIST
62573: LIST
62574: PUSH
62575: LD_INT 2
62577: PUSH
62578: LD_INT 1
62580: PUSH
62581: EMPTY
62582: LIST
62583: LIST
62584: PUSH
62585: LD_INT 1
62587: PUSH
62588: LD_INT 2
62590: PUSH
62591: EMPTY
62592: LIST
62593: LIST
62594: PUSH
62595: LD_INT 0
62597: PUSH
62598: LD_INT 2
62600: PUSH
62601: EMPTY
62602: LIST
62603: LIST
62604: PUSH
62605: LD_INT 1
62607: NEG
62608: PUSH
62609: LD_INT 1
62611: PUSH
62612: EMPTY
62613: LIST
62614: LIST
62615: PUSH
62616: LD_INT 2
62618: NEG
62619: PUSH
62620: LD_INT 0
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: PUSH
62627: LD_INT 2
62629: NEG
62630: PUSH
62631: LD_INT 1
62633: NEG
62634: PUSH
62635: EMPTY
62636: LIST
62637: LIST
62638: PUSH
62639: LD_INT 1
62641: NEG
62642: PUSH
62643: LD_INT 3
62645: NEG
62646: PUSH
62647: EMPTY
62648: LIST
62649: LIST
62650: PUSH
62651: LD_INT 0
62653: PUSH
62654: LD_INT 3
62656: NEG
62657: PUSH
62658: EMPTY
62659: LIST
62660: LIST
62661: PUSH
62662: LD_INT 1
62664: PUSH
62665: LD_INT 2
62667: NEG
62668: PUSH
62669: EMPTY
62670: LIST
62671: LIST
62672: PUSH
62673: LD_INT 2
62675: PUSH
62676: LD_INT 1
62678: NEG
62679: PUSH
62680: EMPTY
62681: LIST
62682: LIST
62683: PUSH
62684: LD_INT 3
62686: PUSH
62687: LD_INT 0
62689: PUSH
62690: EMPTY
62691: LIST
62692: LIST
62693: PUSH
62694: LD_INT 3
62696: PUSH
62697: LD_INT 1
62699: PUSH
62700: EMPTY
62701: LIST
62702: LIST
62703: PUSH
62704: LD_INT 1
62706: PUSH
62707: LD_INT 3
62709: PUSH
62710: EMPTY
62711: LIST
62712: LIST
62713: PUSH
62714: LD_INT 0
62716: PUSH
62717: LD_INT 3
62719: PUSH
62720: EMPTY
62721: LIST
62722: LIST
62723: PUSH
62724: LD_INT 1
62726: NEG
62727: PUSH
62728: LD_INT 2
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: PUSH
62735: LD_INT 2
62737: NEG
62738: PUSH
62739: LD_INT 1
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: PUSH
62746: LD_INT 3
62748: NEG
62749: PUSH
62750: LD_INT 0
62752: PUSH
62753: EMPTY
62754: LIST
62755: LIST
62756: PUSH
62757: LD_INT 3
62759: NEG
62760: PUSH
62761: LD_INT 1
62763: NEG
62764: PUSH
62765: EMPTY
62766: LIST
62767: LIST
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: LIST
62773: LIST
62774: LIST
62775: LIST
62776: LIST
62777: LIST
62778: LIST
62779: LIST
62780: LIST
62781: LIST
62782: LIST
62783: LIST
62784: LIST
62785: LIST
62786: LIST
62787: LIST
62788: LIST
62789: LIST
62790: LIST
62791: LIST
62792: LIST
62793: LIST
62794: LIST
62795: LIST
62796: LIST
62797: LIST
62798: LIST
62799: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62800: LD_ADDR_VAR 0 47
62804: PUSH
62805: LD_INT 0
62807: PUSH
62808: LD_INT 0
62810: PUSH
62811: EMPTY
62812: LIST
62813: LIST
62814: PUSH
62815: LD_INT 0
62817: PUSH
62818: LD_INT 1
62820: NEG
62821: PUSH
62822: EMPTY
62823: LIST
62824: LIST
62825: PUSH
62826: LD_INT 1
62828: PUSH
62829: LD_INT 0
62831: PUSH
62832: EMPTY
62833: LIST
62834: LIST
62835: PUSH
62836: LD_INT 1
62838: PUSH
62839: LD_INT 1
62841: PUSH
62842: EMPTY
62843: LIST
62844: LIST
62845: PUSH
62846: LD_INT 0
62848: PUSH
62849: LD_INT 1
62851: PUSH
62852: EMPTY
62853: LIST
62854: LIST
62855: PUSH
62856: LD_INT 1
62858: NEG
62859: PUSH
62860: LD_INT 0
62862: PUSH
62863: EMPTY
62864: LIST
62865: LIST
62866: PUSH
62867: LD_INT 1
62869: NEG
62870: PUSH
62871: LD_INT 1
62873: NEG
62874: PUSH
62875: EMPTY
62876: LIST
62877: LIST
62878: PUSH
62879: LD_INT 1
62881: NEG
62882: PUSH
62883: LD_INT 2
62885: NEG
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: PUSH
62891: LD_INT 0
62893: PUSH
62894: LD_INT 2
62896: NEG
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: PUSH
62902: LD_INT 1
62904: PUSH
62905: LD_INT 1
62907: NEG
62908: PUSH
62909: EMPTY
62910: LIST
62911: LIST
62912: PUSH
62913: LD_INT 2
62915: NEG
62916: PUSH
62917: LD_INT 1
62919: NEG
62920: PUSH
62921: EMPTY
62922: LIST
62923: LIST
62924: PUSH
62925: LD_INT 2
62927: NEG
62928: PUSH
62929: LD_INT 2
62931: NEG
62932: PUSH
62933: EMPTY
62934: LIST
62935: LIST
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: LIST
62941: LIST
62942: LIST
62943: LIST
62944: LIST
62945: LIST
62946: LIST
62947: LIST
62948: LIST
62949: LIST
62950: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62951: LD_ADDR_VAR 0 48
62955: PUSH
62956: LD_INT 0
62958: PUSH
62959: LD_INT 0
62961: PUSH
62962: EMPTY
62963: LIST
62964: LIST
62965: PUSH
62966: LD_INT 0
62968: PUSH
62969: LD_INT 1
62971: NEG
62972: PUSH
62973: EMPTY
62974: LIST
62975: LIST
62976: PUSH
62977: LD_INT 1
62979: PUSH
62980: LD_INT 0
62982: PUSH
62983: EMPTY
62984: LIST
62985: LIST
62986: PUSH
62987: LD_INT 1
62989: PUSH
62990: LD_INT 1
62992: PUSH
62993: EMPTY
62994: LIST
62995: LIST
62996: PUSH
62997: LD_INT 0
62999: PUSH
63000: LD_INT 1
63002: PUSH
63003: EMPTY
63004: LIST
63005: LIST
63006: PUSH
63007: LD_INT 1
63009: NEG
63010: PUSH
63011: LD_INT 0
63013: PUSH
63014: EMPTY
63015: LIST
63016: LIST
63017: PUSH
63018: LD_INT 1
63020: NEG
63021: PUSH
63022: LD_INT 1
63024: NEG
63025: PUSH
63026: EMPTY
63027: LIST
63028: LIST
63029: PUSH
63030: LD_INT 1
63032: NEG
63033: PUSH
63034: LD_INT 2
63036: NEG
63037: PUSH
63038: EMPTY
63039: LIST
63040: LIST
63041: PUSH
63042: LD_INT 0
63044: PUSH
63045: LD_INT 2
63047: NEG
63048: PUSH
63049: EMPTY
63050: LIST
63051: LIST
63052: PUSH
63053: LD_INT 1
63055: PUSH
63056: LD_INT 1
63058: NEG
63059: PUSH
63060: EMPTY
63061: LIST
63062: LIST
63063: PUSH
63064: LD_INT 2
63066: PUSH
63067: LD_INT 0
63069: PUSH
63070: EMPTY
63071: LIST
63072: LIST
63073: PUSH
63074: LD_INT 2
63076: PUSH
63077: LD_INT 1
63079: PUSH
63080: EMPTY
63081: LIST
63082: LIST
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: LIST
63088: LIST
63089: LIST
63090: LIST
63091: LIST
63092: LIST
63093: LIST
63094: LIST
63095: LIST
63096: LIST
63097: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63098: LD_ADDR_VAR 0 49
63102: PUSH
63103: LD_INT 0
63105: PUSH
63106: LD_INT 0
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: PUSH
63113: LD_INT 0
63115: PUSH
63116: LD_INT 1
63118: NEG
63119: PUSH
63120: EMPTY
63121: LIST
63122: LIST
63123: PUSH
63124: LD_INT 1
63126: PUSH
63127: LD_INT 0
63129: PUSH
63130: EMPTY
63131: LIST
63132: LIST
63133: PUSH
63134: LD_INT 1
63136: PUSH
63137: LD_INT 1
63139: PUSH
63140: EMPTY
63141: LIST
63142: LIST
63143: PUSH
63144: LD_INT 0
63146: PUSH
63147: LD_INT 1
63149: PUSH
63150: EMPTY
63151: LIST
63152: LIST
63153: PUSH
63154: LD_INT 1
63156: NEG
63157: PUSH
63158: LD_INT 0
63160: PUSH
63161: EMPTY
63162: LIST
63163: LIST
63164: PUSH
63165: LD_INT 1
63167: NEG
63168: PUSH
63169: LD_INT 1
63171: NEG
63172: PUSH
63173: EMPTY
63174: LIST
63175: LIST
63176: PUSH
63177: LD_INT 1
63179: PUSH
63180: LD_INT 1
63182: NEG
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: PUSH
63188: LD_INT 2
63190: PUSH
63191: LD_INT 0
63193: PUSH
63194: EMPTY
63195: LIST
63196: LIST
63197: PUSH
63198: LD_INT 2
63200: PUSH
63201: LD_INT 1
63203: PUSH
63204: EMPTY
63205: LIST
63206: LIST
63207: PUSH
63208: LD_INT 2
63210: PUSH
63211: LD_INT 2
63213: PUSH
63214: EMPTY
63215: LIST
63216: LIST
63217: PUSH
63218: LD_INT 1
63220: PUSH
63221: LD_INT 2
63223: PUSH
63224: EMPTY
63225: LIST
63226: LIST
63227: PUSH
63228: EMPTY
63229: LIST
63230: LIST
63231: LIST
63232: LIST
63233: LIST
63234: LIST
63235: LIST
63236: LIST
63237: LIST
63238: LIST
63239: LIST
63240: LIST
63241: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63242: LD_ADDR_VAR 0 50
63246: PUSH
63247: LD_INT 0
63249: PUSH
63250: LD_INT 0
63252: PUSH
63253: EMPTY
63254: LIST
63255: LIST
63256: PUSH
63257: LD_INT 0
63259: PUSH
63260: LD_INT 1
63262: NEG
63263: PUSH
63264: EMPTY
63265: LIST
63266: LIST
63267: PUSH
63268: LD_INT 1
63270: PUSH
63271: LD_INT 0
63273: PUSH
63274: EMPTY
63275: LIST
63276: LIST
63277: PUSH
63278: LD_INT 1
63280: PUSH
63281: LD_INT 1
63283: PUSH
63284: EMPTY
63285: LIST
63286: LIST
63287: PUSH
63288: LD_INT 0
63290: PUSH
63291: LD_INT 1
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: PUSH
63298: LD_INT 1
63300: NEG
63301: PUSH
63302: LD_INT 0
63304: PUSH
63305: EMPTY
63306: LIST
63307: LIST
63308: PUSH
63309: LD_INT 1
63311: NEG
63312: PUSH
63313: LD_INT 1
63315: NEG
63316: PUSH
63317: EMPTY
63318: LIST
63319: LIST
63320: PUSH
63321: LD_INT 2
63323: PUSH
63324: LD_INT 1
63326: PUSH
63327: EMPTY
63328: LIST
63329: LIST
63330: PUSH
63331: LD_INT 2
63333: PUSH
63334: LD_INT 2
63336: PUSH
63337: EMPTY
63338: LIST
63339: LIST
63340: PUSH
63341: LD_INT 1
63343: PUSH
63344: LD_INT 2
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: PUSH
63351: LD_INT 0
63353: PUSH
63354: LD_INT 2
63356: PUSH
63357: EMPTY
63358: LIST
63359: LIST
63360: PUSH
63361: LD_INT 1
63363: NEG
63364: PUSH
63365: LD_INT 1
63367: PUSH
63368: EMPTY
63369: LIST
63370: LIST
63371: PUSH
63372: EMPTY
63373: LIST
63374: LIST
63375: LIST
63376: LIST
63377: LIST
63378: LIST
63379: LIST
63380: LIST
63381: LIST
63382: LIST
63383: LIST
63384: LIST
63385: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63386: LD_ADDR_VAR 0 51
63390: PUSH
63391: LD_INT 0
63393: PUSH
63394: LD_INT 0
63396: PUSH
63397: EMPTY
63398: LIST
63399: LIST
63400: PUSH
63401: LD_INT 0
63403: PUSH
63404: LD_INT 1
63406: NEG
63407: PUSH
63408: EMPTY
63409: LIST
63410: LIST
63411: PUSH
63412: LD_INT 1
63414: PUSH
63415: LD_INT 0
63417: PUSH
63418: EMPTY
63419: LIST
63420: LIST
63421: PUSH
63422: LD_INT 1
63424: PUSH
63425: LD_INT 1
63427: PUSH
63428: EMPTY
63429: LIST
63430: LIST
63431: PUSH
63432: LD_INT 0
63434: PUSH
63435: LD_INT 1
63437: PUSH
63438: EMPTY
63439: LIST
63440: LIST
63441: PUSH
63442: LD_INT 1
63444: NEG
63445: PUSH
63446: LD_INT 0
63448: PUSH
63449: EMPTY
63450: LIST
63451: LIST
63452: PUSH
63453: LD_INT 1
63455: NEG
63456: PUSH
63457: LD_INT 1
63459: NEG
63460: PUSH
63461: EMPTY
63462: LIST
63463: LIST
63464: PUSH
63465: LD_INT 1
63467: PUSH
63468: LD_INT 2
63470: PUSH
63471: EMPTY
63472: LIST
63473: LIST
63474: PUSH
63475: LD_INT 0
63477: PUSH
63478: LD_INT 2
63480: PUSH
63481: EMPTY
63482: LIST
63483: LIST
63484: PUSH
63485: LD_INT 1
63487: NEG
63488: PUSH
63489: LD_INT 1
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: PUSH
63496: LD_INT 2
63498: NEG
63499: PUSH
63500: LD_INT 0
63502: PUSH
63503: EMPTY
63504: LIST
63505: LIST
63506: PUSH
63507: LD_INT 2
63509: NEG
63510: PUSH
63511: LD_INT 1
63513: NEG
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: PUSH
63519: EMPTY
63520: LIST
63521: LIST
63522: LIST
63523: LIST
63524: LIST
63525: LIST
63526: LIST
63527: LIST
63528: LIST
63529: LIST
63530: LIST
63531: LIST
63532: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63533: LD_ADDR_VAR 0 52
63537: PUSH
63538: LD_INT 0
63540: PUSH
63541: LD_INT 0
63543: PUSH
63544: EMPTY
63545: LIST
63546: LIST
63547: PUSH
63548: LD_INT 0
63550: PUSH
63551: LD_INT 1
63553: NEG
63554: PUSH
63555: EMPTY
63556: LIST
63557: LIST
63558: PUSH
63559: LD_INT 1
63561: PUSH
63562: LD_INT 0
63564: PUSH
63565: EMPTY
63566: LIST
63567: LIST
63568: PUSH
63569: LD_INT 1
63571: PUSH
63572: LD_INT 1
63574: PUSH
63575: EMPTY
63576: LIST
63577: LIST
63578: PUSH
63579: LD_INT 0
63581: PUSH
63582: LD_INT 1
63584: PUSH
63585: EMPTY
63586: LIST
63587: LIST
63588: PUSH
63589: LD_INT 1
63591: NEG
63592: PUSH
63593: LD_INT 0
63595: PUSH
63596: EMPTY
63597: LIST
63598: LIST
63599: PUSH
63600: LD_INT 1
63602: NEG
63603: PUSH
63604: LD_INT 1
63606: NEG
63607: PUSH
63608: EMPTY
63609: LIST
63610: LIST
63611: PUSH
63612: LD_INT 1
63614: NEG
63615: PUSH
63616: LD_INT 2
63618: NEG
63619: PUSH
63620: EMPTY
63621: LIST
63622: LIST
63623: PUSH
63624: LD_INT 1
63626: NEG
63627: PUSH
63628: LD_INT 1
63630: PUSH
63631: EMPTY
63632: LIST
63633: LIST
63634: PUSH
63635: LD_INT 2
63637: NEG
63638: PUSH
63639: LD_INT 0
63641: PUSH
63642: EMPTY
63643: LIST
63644: LIST
63645: PUSH
63646: LD_INT 2
63648: NEG
63649: PUSH
63650: LD_INT 1
63652: NEG
63653: PUSH
63654: EMPTY
63655: LIST
63656: LIST
63657: PUSH
63658: LD_INT 2
63660: NEG
63661: PUSH
63662: LD_INT 2
63664: NEG
63665: PUSH
63666: EMPTY
63667: LIST
63668: LIST
63669: PUSH
63670: EMPTY
63671: LIST
63672: LIST
63673: LIST
63674: LIST
63675: LIST
63676: LIST
63677: LIST
63678: LIST
63679: LIST
63680: LIST
63681: LIST
63682: LIST
63683: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63684: LD_ADDR_VAR 0 53
63688: PUSH
63689: LD_INT 0
63691: PUSH
63692: LD_INT 0
63694: PUSH
63695: EMPTY
63696: LIST
63697: LIST
63698: PUSH
63699: LD_INT 0
63701: PUSH
63702: LD_INT 1
63704: NEG
63705: PUSH
63706: EMPTY
63707: LIST
63708: LIST
63709: PUSH
63710: LD_INT 1
63712: PUSH
63713: LD_INT 0
63715: PUSH
63716: EMPTY
63717: LIST
63718: LIST
63719: PUSH
63720: LD_INT 1
63722: PUSH
63723: LD_INT 1
63725: PUSH
63726: EMPTY
63727: LIST
63728: LIST
63729: PUSH
63730: LD_INT 0
63732: PUSH
63733: LD_INT 1
63735: PUSH
63736: EMPTY
63737: LIST
63738: LIST
63739: PUSH
63740: LD_INT 1
63742: NEG
63743: PUSH
63744: LD_INT 0
63746: PUSH
63747: EMPTY
63748: LIST
63749: LIST
63750: PUSH
63751: LD_INT 1
63753: NEG
63754: PUSH
63755: LD_INT 1
63757: NEG
63758: PUSH
63759: EMPTY
63760: LIST
63761: LIST
63762: PUSH
63763: LD_INT 1
63765: NEG
63766: PUSH
63767: LD_INT 2
63769: NEG
63770: PUSH
63771: EMPTY
63772: LIST
63773: LIST
63774: PUSH
63775: LD_INT 0
63777: PUSH
63778: LD_INT 2
63780: NEG
63781: PUSH
63782: EMPTY
63783: LIST
63784: LIST
63785: PUSH
63786: LD_INT 1
63788: PUSH
63789: LD_INT 1
63791: NEG
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: PUSH
63797: LD_INT 2
63799: PUSH
63800: LD_INT 0
63802: PUSH
63803: EMPTY
63804: LIST
63805: LIST
63806: PUSH
63807: LD_INT 2
63809: PUSH
63810: LD_INT 1
63812: PUSH
63813: EMPTY
63814: LIST
63815: LIST
63816: PUSH
63817: LD_INT 2
63819: PUSH
63820: LD_INT 2
63822: PUSH
63823: EMPTY
63824: LIST
63825: LIST
63826: PUSH
63827: LD_INT 1
63829: PUSH
63830: LD_INT 2
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: PUSH
63837: LD_INT 0
63839: PUSH
63840: LD_INT 2
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: PUSH
63847: LD_INT 1
63849: NEG
63850: PUSH
63851: LD_INT 1
63853: PUSH
63854: EMPTY
63855: LIST
63856: LIST
63857: PUSH
63858: LD_INT 2
63860: NEG
63861: PUSH
63862: LD_INT 0
63864: PUSH
63865: EMPTY
63866: LIST
63867: LIST
63868: PUSH
63869: LD_INT 2
63871: NEG
63872: PUSH
63873: LD_INT 1
63875: NEG
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: PUSH
63881: LD_INT 2
63883: NEG
63884: PUSH
63885: LD_INT 2
63887: NEG
63888: PUSH
63889: EMPTY
63890: LIST
63891: LIST
63892: PUSH
63893: EMPTY
63894: LIST
63895: LIST
63896: LIST
63897: LIST
63898: LIST
63899: LIST
63900: LIST
63901: LIST
63902: LIST
63903: LIST
63904: LIST
63905: LIST
63906: LIST
63907: LIST
63908: LIST
63909: LIST
63910: LIST
63911: LIST
63912: LIST
63913: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63914: LD_ADDR_VAR 0 54
63918: PUSH
63919: LD_INT 0
63921: PUSH
63922: LD_INT 0
63924: PUSH
63925: EMPTY
63926: LIST
63927: LIST
63928: PUSH
63929: LD_INT 0
63931: PUSH
63932: LD_INT 1
63934: NEG
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: PUSH
63940: LD_INT 1
63942: PUSH
63943: LD_INT 0
63945: PUSH
63946: EMPTY
63947: LIST
63948: LIST
63949: PUSH
63950: LD_INT 1
63952: PUSH
63953: LD_INT 1
63955: PUSH
63956: EMPTY
63957: LIST
63958: LIST
63959: PUSH
63960: LD_INT 0
63962: PUSH
63963: LD_INT 1
63965: PUSH
63966: EMPTY
63967: LIST
63968: LIST
63969: PUSH
63970: LD_INT 1
63972: NEG
63973: PUSH
63974: LD_INT 0
63976: PUSH
63977: EMPTY
63978: LIST
63979: LIST
63980: PUSH
63981: LD_INT 1
63983: NEG
63984: PUSH
63985: LD_INT 1
63987: NEG
63988: PUSH
63989: EMPTY
63990: LIST
63991: LIST
63992: PUSH
63993: LD_INT 1
63995: NEG
63996: PUSH
63997: LD_INT 2
63999: NEG
64000: PUSH
64001: EMPTY
64002: LIST
64003: LIST
64004: PUSH
64005: LD_INT 0
64007: PUSH
64008: LD_INT 2
64010: NEG
64011: PUSH
64012: EMPTY
64013: LIST
64014: LIST
64015: PUSH
64016: LD_INT 1
64018: PUSH
64019: LD_INT 1
64021: NEG
64022: PUSH
64023: EMPTY
64024: LIST
64025: LIST
64026: PUSH
64027: LD_INT 2
64029: PUSH
64030: LD_INT 0
64032: PUSH
64033: EMPTY
64034: LIST
64035: LIST
64036: PUSH
64037: LD_INT 2
64039: PUSH
64040: LD_INT 1
64042: PUSH
64043: EMPTY
64044: LIST
64045: LIST
64046: PUSH
64047: LD_INT 2
64049: PUSH
64050: LD_INT 2
64052: PUSH
64053: EMPTY
64054: LIST
64055: LIST
64056: PUSH
64057: LD_INT 1
64059: PUSH
64060: LD_INT 2
64062: PUSH
64063: EMPTY
64064: LIST
64065: LIST
64066: PUSH
64067: LD_INT 0
64069: PUSH
64070: LD_INT 2
64072: PUSH
64073: EMPTY
64074: LIST
64075: LIST
64076: PUSH
64077: LD_INT 1
64079: NEG
64080: PUSH
64081: LD_INT 1
64083: PUSH
64084: EMPTY
64085: LIST
64086: LIST
64087: PUSH
64088: LD_INT 2
64090: NEG
64091: PUSH
64092: LD_INT 0
64094: PUSH
64095: EMPTY
64096: LIST
64097: LIST
64098: PUSH
64099: LD_INT 2
64101: NEG
64102: PUSH
64103: LD_INT 1
64105: NEG
64106: PUSH
64107: EMPTY
64108: LIST
64109: LIST
64110: PUSH
64111: LD_INT 2
64113: NEG
64114: PUSH
64115: LD_INT 2
64117: NEG
64118: PUSH
64119: EMPTY
64120: LIST
64121: LIST
64122: PUSH
64123: EMPTY
64124: LIST
64125: LIST
64126: LIST
64127: LIST
64128: LIST
64129: LIST
64130: LIST
64131: LIST
64132: LIST
64133: LIST
64134: LIST
64135: LIST
64136: LIST
64137: LIST
64138: LIST
64139: LIST
64140: LIST
64141: LIST
64142: LIST
64143: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64144: LD_ADDR_VAR 0 55
64148: PUSH
64149: LD_INT 0
64151: PUSH
64152: LD_INT 0
64154: PUSH
64155: EMPTY
64156: LIST
64157: LIST
64158: PUSH
64159: LD_INT 0
64161: PUSH
64162: LD_INT 1
64164: NEG
64165: PUSH
64166: EMPTY
64167: LIST
64168: LIST
64169: PUSH
64170: LD_INT 1
64172: PUSH
64173: LD_INT 0
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: PUSH
64180: LD_INT 1
64182: PUSH
64183: LD_INT 1
64185: PUSH
64186: EMPTY
64187: LIST
64188: LIST
64189: PUSH
64190: LD_INT 0
64192: PUSH
64193: LD_INT 1
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: PUSH
64200: LD_INT 1
64202: NEG
64203: PUSH
64204: LD_INT 0
64206: PUSH
64207: EMPTY
64208: LIST
64209: LIST
64210: PUSH
64211: LD_INT 1
64213: NEG
64214: PUSH
64215: LD_INT 1
64217: NEG
64218: PUSH
64219: EMPTY
64220: LIST
64221: LIST
64222: PUSH
64223: LD_INT 1
64225: NEG
64226: PUSH
64227: LD_INT 2
64229: NEG
64230: PUSH
64231: EMPTY
64232: LIST
64233: LIST
64234: PUSH
64235: LD_INT 0
64237: PUSH
64238: LD_INT 2
64240: NEG
64241: PUSH
64242: EMPTY
64243: LIST
64244: LIST
64245: PUSH
64246: LD_INT 1
64248: PUSH
64249: LD_INT 1
64251: NEG
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: PUSH
64257: LD_INT 2
64259: PUSH
64260: LD_INT 0
64262: PUSH
64263: EMPTY
64264: LIST
64265: LIST
64266: PUSH
64267: LD_INT 2
64269: PUSH
64270: LD_INT 1
64272: PUSH
64273: EMPTY
64274: LIST
64275: LIST
64276: PUSH
64277: LD_INT 2
64279: PUSH
64280: LD_INT 2
64282: PUSH
64283: EMPTY
64284: LIST
64285: LIST
64286: PUSH
64287: LD_INT 1
64289: PUSH
64290: LD_INT 2
64292: PUSH
64293: EMPTY
64294: LIST
64295: LIST
64296: PUSH
64297: LD_INT 0
64299: PUSH
64300: LD_INT 2
64302: PUSH
64303: EMPTY
64304: LIST
64305: LIST
64306: PUSH
64307: LD_INT 1
64309: NEG
64310: PUSH
64311: LD_INT 1
64313: PUSH
64314: EMPTY
64315: LIST
64316: LIST
64317: PUSH
64318: LD_INT 2
64320: NEG
64321: PUSH
64322: LD_INT 0
64324: PUSH
64325: EMPTY
64326: LIST
64327: LIST
64328: PUSH
64329: LD_INT 2
64331: NEG
64332: PUSH
64333: LD_INT 1
64335: NEG
64336: PUSH
64337: EMPTY
64338: LIST
64339: LIST
64340: PUSH
64341: LD_INT 2
64343: NEG
64344: PUSH
64345: LD_INT 2
64347: NEG
64348: PUSH
64349: EMPTY
64350: LIST
64351: LIST
64352: PUSH
64353: EMPTY
64354: LIST
64355: LIST
64356: LIST
64357: LIST
64358: LIST
64359: LIST
64360: LIST
64361: LIST
64362: LIST
64363: LIST
64364: LIST
64365: LIST
64366: LIST
64367: LIST
64368: LIST
64369: LIST
64370: LIST
64371: LIST
64372: LIST
64373: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64374: LD_ADDR_VAR 0 56
64378: PUSH
64379: LD_INT 0
64381: PUSH
64382: LD_INT 0
64384: PUSH
64385: EMPTY
64386: LIST
64387: LIST
64388: PUSH
64389: LD_INT 0
64391: PUSH
64392: LD_INT 1
64394: NEG
64395: PUSH
64396: EMPTY
64397: LIST
64398: LIST
64399: PUSH
64400: LD_INT 1
64402: PUSH
64403: LD_INT 0
64405: PUSH
64406: EMPTY
64407: LIST
64408: LIST
64409: PUSH
64410: LD_INT 1
64412: PUSH
64413: LD_INT 1
64415: PUSH
64416: EMPTY
64417: LIST
64418: LIST
64419: PUSH
64420: LD_INT 0
64422: PUSH
64423: LD_INT 1
64425: PUSH
64426: EMPTY
64427: LIST
64428: LIST
64429: PUSH
64430: LD_INT 1
64432: NEG
64433: PUSH
64434: LD_INT 0
64436: PUSH
64437: EMPTY
64438: LIST
64439: LIST
64440: PUSH
64441: LD_INT 1
64443: NEG
64444: PUSH
64445: LD_INT 1
64447: NEG
64448: PUSH
64449: EMPTY
64450: LIST
64451: LIST
64452: PUSH
64453: LD_INT 1
64455: NEG
64456: PUSH
64457: LD_INT 2
64459: NEG
64460: PUSH
64461: EMPTY
64462: LIST
64463: LIST
64464: PUSH
64465: LD_INT 0
64467: PUSH
64468: LD_INT 2
64470: NEG
64471: PUSH
64472: EMPTY
64473: LIST
64474: LIST
64475: PUSH
64476: LD_INT 1
64478: PUSH
64479: LD_INT 1
64481: NEG
64482: PUSH
64483: EMPTY
64484: LIST
64485: LIST
64486: PUSH
64487: LD_INT 2
64489: PUSH
64490: LD_INT 0
64492: PUSH
64493: EMPTY
64494: LIST
64495: LIST
64496: PUSH
64497: LD_INT 2
64499: PUSH
64500: LD_INT 1
64502: PUSH
64503: EMPTY
64504: LIST
64505: LIST
64506: PUSH
64507: LD_INT 2
64509: PUSH
64510: LD_INT 2
64512: PUSH
64513: EMPTY
64514: LIST
64515: LIST
64516: PUSH
64517: LD_INT 1
64519: PUSH
64520: LD_INT 2
64522: PUSH
64523: EMPTY
64524: LIST
64525: LIST
64526: PUSH
64527: LD_INT 0
64529: PUSH
64530: LD_INT 2
64532: PUSH
64533: EMPTY
64534: LIST
64535: LIST
64536: PUSH
64537: LD_INT 1
64539: NEG
64540: PUSH
64541: LD_INT 1
64543: PUSH
64544: EMPTY
64545: LIST
64546: LIST
64547: PUSH
64548: LD_INT 2
64550: NEG
64551: PUSH
64552: LD_INT 0
64554: PUSH
64555: EMPTY
64556: LIST
64557: LIST
64558: PUSH
64559: LD_INT 2
64561: NEG
64562: PUSH
64563: LD_INT 1
64565: NEG
64566: PUSH
64567: EMPTY
64568: LIST
64569: LIST
64570: PUSH
64571: LD_INT 2
64573: NEG
64574: PUSH
64575: LD_INT 2
64577: NEG
64578: PUSH
64579: EMPTY
64580: LIST
64581: LIST
64582: PUSH
64583: EMPTY
64584: LIST
64585: LIST
64586: LIST
64587: LIST
64588: LIST
64589: LIST
64590: LIST
64591: LIST
64592: LIST
64593: LIST
64594: LIST
64595: LIST
64596: LIST
64597: LIST
64598: LIST
64599: LIST
64600: LIST
64601: LIST
64602: LIST
64603: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64604: LD_ADDR_VAR 0 57
64608: PUSH
64609: LD_INT 0
64611: PUSH
64612: LD_INT 0
64614: PUSH
64615: EMPTY
64616: LIST
64617: LIST
64618: PUSH
64619: LD_INT 0
64621: PUSH
64622: LD_INT 1
64624: NEG
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: PUSH
64630: LD_INT 1
64632: PUSH
64633: LD_INT 0
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: PUSH
64640: LD_INT 1
64642: PUSH
64643: LD_INT 1
64645: PUSH
64646: EMPTY
64647: LIST
64648: LIST
64649: PUSH
64650: LD_INT 0
64652: PUSH
64653: LD_INT 1
64655: PUSH
64656: EMPTY
64657: LIST
64658: LIST
64659: PUSH
64660: LD_INT 1
64662: NEG
64663: PUSH
64664: LD_INT 0
64666: PUSH
64667: EMPTY
64668: LIST
64669: LIST
64670: PUSH
64671: LD_INT 1
64673: NEG
64674: PUSH
64675: LD_INT 1
64677: NEG
64678: PUSH
64679: EMPTY
64680: LIST
64681: LIST
64682: PUSH
64683: LD_INT 1
64685: NEG
64686: PUSH
64687: LD_INT 2
64689: NEG
64690: PUSH
64691: EMPTY
64692: LIST
64693: LIST
64694: PUSH
64695: LD_INT 0
64697: PUSH
64698: LD_INT 2
64700: NEG
64701: PUSH
64702: EMPTY
64703: LIST
64704: LIST
64705: PUSH
64706: LD_INT 1
64708: PUSH
64709: LD_INT 1
64711: NEG
64712: PUSH
64713: EMPTY
64714: LIST
64715: LIST
64716: PUSH
64717: LD_INT 2
64719: PUSH
64720: LD_INT 0
64722: PUSH
64723: EMPTY
64724: LIST
64725: LIST
64726: PUSH
64727: LD_INT 2
64729: PUSH
64730: LD_INT 1
64732: PUSH
64733: EMPTY
64734: LIST
64735: LIST
64736: PUSH
64737: LD_INT 2
64739: PUSH
64740: LD_INT 2
64742: PUSH
64743: EMPTY
64744: LIST
64745: LIST
64746: PUSH
64747: LD_INT 1
64749: PUSH
64750: LD_INT 2
64752: PUSH
64753: EMPTY
64754: LIST
64755: LIST
64756: PUSH
64757: LD_INT 0
64759: PUSH
64760: LD_INT 2
64762: PUSH
64763: EMPTY
64764: LIST
64765: LIST
64766: PUSH
64767: LD_INT 1
64769: NEG
64770: PUSH
64771: LD_INT 1
64773: PUSH
64774: EMPTY
64775: LIST
64776: LIST
64777: PUSH
64778: LD_INT 2
64780: NEG
64781: PUSH
64782: LD_INT 0
64784: PUSH
64785: EMPTY
64786: LIST
64787: LIST
64788: PUSH
64789: LD_INT 2
64791: NEG
64792: PUSH
64793: LD_INT 1
64795: NEG
64796: PUSH
64797: EMPTY
64798: LIST
64799: LIST
64800: PUSH
64801: LD_INT 2
64803: NEG
64804: PUSH
64805: LD_INT 2
64807: NEG
64808: PUSH
64809: EMPTY
64810: LIST
64811: LIST
64812: PUSH
64813: EMPTY
64814: LIST
64815: LIST
64816: LIST
64817: LIST
64818: LIST
64819: LIST
64820: LIST
64821: LIST
64822: LIST
64823: LIST
64824: LIST
64825: LIST
64826: LIST
64827: LIST
64828: LIST
64829: LIST
64830: LIST
64831: LIST
64832: LIST
64833: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64834: LD_ADDR_VAR 0 58
64838: PUSH
64839: LD_INT 0
64841: PUSH
64842: LD_INT 0
64844: PUSH
64845: EMPTY
64846: LIST
64847: LIST
64848: PUSH
64849: LD_INT 0
64851: PUSH
64852: LD_INT 1
64854: NEG
64855: PUSH
64856: EMPTY
64857: LIST
64858: LIST
64859: PUSH
64860: LD_INT 1
64862: PUSH
64863: LD_INT 0
64865: PUSH
64866: EMPTY
64867: LIST
64868: LIST
64869: PUSH
64870: LD_INT 1
64872: PUSH
64873: LD_INT 1
64875: PUSH
64876: EMPTY
64877: LIST
64878: LIST
64879: PUSH
64880: LD_INT 0
64882: PUSH
64883: LD_INT 1
64885: PUSH
64886: EMPTY
64887: LIST
64888: LIST
64889: PUSH
64890: LD_INT 1
64892: NEG
64893: PUSH
64894: LD_INT 0
64896: PUSH
64897: EMPTY
64898: LIST
64899: LIST
64900: PUSH
64901: LD_INT 1
64903: NEG
64904: PUSH
64905: LD_INT 1
64907: NEG
64908: PUSH
64909: EMPTY
64910: LIST
64911: LIST
64912: PUSH
64913: LD_INT 1
64915: NEG
64916: PUSH
64917: LD_INT 2
64919: NEG
64920: PUSH
64921: EMPTY
64922: LIST
64923: LIST
64924: PUSH
64925: LD_INT 0
64927: PUSH
64928: LD_INT 2
64930: NEG
64931: PUSH
64932: EMPTY
64933: LIST
64934: LIST
64935: PUSH
64936: LD_INT 1
64938: PUSH
64939: LD_INT 1
64941: NEG
64942: PUSH
64943: EMPTY
64944: LIST
64945: LIST
64946: PUSH
64947: LD_INT 2
64949: PUSH
64950: LD_INT 0
64952: PUSH
64953: EMPTY
64954: LIST
64955: LIST
64956: PUSH
64957: LD_INT 2
64959: PUSH
64960: LD_INT 1
64962: PUSH
64963: EMPTY
64964: LIST
64965: LIST
64966: PUSH
64967: LD_INT 2
64969: PUSH
64970: LD_INT 2
64972: PUSH
64973: EMPTY
64974: LIST
64975: LIST
64976: PUSH
64977: LD_INT 1
64979: PUSH
64980: LD_INT 2
64982: PUSH
64983: EMPTY
64984: LIST
64985: LIST
64986: PUSH
64987: LD_INT 0
64989: PUSH
64990: LD_INT 2
64992: PUSH
64993: EMPTY
64994: LIST
64995: LIST
64996: PUSH
64997: LD_INT 1
64999: NEG
65000: PUSH
65001: LD_INT 1
65003: PUSH
65004: EMPTY
65005: LIST
65006: LIST
65007: PUSH
65008: LD_INT 2
65010: NEG
65011: PUSH
65012: LD_INT 0
65014: PUSH
65015: EMPTY
65016: LIST
65017: LIST
65018: PUSH
65019: LD_INT 2
65021: NEG
65022: PUSH
65023: LD_INT 1
65025: NEG
65026: PUSH
65027: EMPTY
65028: LIST
65029: LIST
65030: PUSH
65031: LD_INT 2
65033: NEG
65034: PUSH
65035: LD_INT 2
65037: NEG
65038: PUSH
65039: EMPTY
65040: LIST
65041: LIST
65042: PUSH
65043: EMPTY
65044: LIST
65045: LIST
65046: LIST
65047: LIST
65048: LIST
65049: LIST
65050: LIST
65051: LIST
65052: LIST
65053: LIST
65054: LIST
65055: LIST
65056: LIST
65057: LIST
65058: LIST
65059: LIST
65060: LIST
65061: LIST
65062: LIST
65063: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65064: LD_ADDR_VAR 0 59
65068: PUSH
65069: LD_INT 0
65071: PUSH
65072: LD_INT 0
65074: PUSH
65075: EMPTY
65076: LIST
65077: LIST
65078: PUSH
65079: LD_INT 0
65081: PUSH
65082: LD_INT 1
65084: NEG
65085: PUSH
65086: EMPTY
65087: LIST
65088: LIST
65089: PUSH
65090: LD_INT 1
65092: PUSH
65093: LD_INT 0
65095: PUSH
65096: EMPTY
65097: LIST
65098: LIST
65099: PUSH
65100: LD_INT 1
65102: PUSH
65103: LD_INT 1
65105: PUSH
65106: EMPTY
65107: LIST
65108: LIST
65109: PUSH
65110: LD_INT 0
65112: PUSH
65113: LD_INT 1
65115: PUSH
65116: EMPTY
65117: LIST
65118: LIST
65119: PUSH
65120: LD_INT 1
65122: NEG
65123: PUSH
65124: LD_INT 0
65126: PUSH
65127: EMPTY
65128: LIST
65129: LIST
65130: PUSH
65131: LD_INT 1
65133: NEG
65134: PUSH
65135: LD_INT 1
65137: NEG
65138: PUSH
65139: EMPTY
65140: LIST
65141: LIST
65142: PUSH
65143: EMPTY
65144: LIST
65145: LIST
65146: LIST
65147: LIST
65148: LIST
65149: LIST
65150: LIST
65151: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65152: LD_ADDR_VAR 0 60
65156: PUSH
65157: LD_INT 0
65159: PUSH
65160: LD_INT 0
65162: PUSH
65163: EMPTY
65164: LIST
65165: LIST
65166: PUSH
65167: LD_INT 0
65169: PUSH
65170: LD_INT 1
65172: NEG
65173: PUSH
65174: EMPTY
65175: LIST
65176: LIST
65177: PUSH
65178: LD_INT 1
65180: PUSH
65181: LD_INT 0
65183: PUSH
65184: EMPTY
65185: LIST
65186: LIST
65187: PUSH
65188: LD_INT 1
65190: PUSH
65191: LD_INT 1
65193: PUSH
65194: EMPTY
65195: LIST
65196: LIST
65197: PUSH
65198: LD_INT 0
65200: PUSH
65201: LD_INT 1
65203: PUSH
65204: EMPTY
65205: LIST
65206: LIST
65207: PUSH
65208: LD_INT 1
65210: NEG
65211: PUSH
65212: LD_INT 0
65214: PUSH
65215: EMPTY
65216: LIST
65217: LIST
65218: PUSH
65219: LD_INT 1
65221: NEG
65222: PUSH
65223: LD_INT 1
65225: NEG
65226: PUSH
65227: EMPTY
65228: LIST
65229: LIST
65230: PUSH
65231: EMPTY
65232: LIST
65233: LIST
65234: LIST
65235: LIST
65236: LIST
65237: LIST
65238: LIST
65239: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65240: LD_ADDR_VAR 0 61
65244: PUSH
65245: LD_INT 0
65247: PUSH
65248: LD_INT 0
65250: PUSH
65251: EMPTY
65252: LIST
65253: LIST
65254: PUSH
65255: LD_INT 0
65257: PUSH
65258: LD_INT 1
65260: NEG
65261: PUSH
65262: EMPTY
65263: LIST
65264: LIST
65265: PUSH
65266: LD_INT 1
65268: PUSH
65269: LD_INT 0
65271: PUSH
65272: EMPTY
65273: LIST
65274: LIST
65275: PUSH
65276: LD_INT 1
65278: PUSH
65279: LD_INT 1
65281: PUSH
65282: EMPTY
65283: LIST
65284: LIST
65285: PUSH
65286: LD_INT 0
65288: PUSH
65289: LD_INT 1
65291: PUSH
65292: EMPTY
65293: LIST
65294: LIST
65295: PUSH
65296: LD_INT 1
65298: NEG
65299: PUSH
65300: LD_INT 0
65302: PUSH
65303: EMPTY
65304: LIST
65305: LIST
65306: PUSH
65307: LD_INT 1
65309: NEG
65310: PUSH
65311: LD_INT 1
65313: NEG
65314: PUSH
65315: EMPTY
65316: LIST
65317: LIST
65318: PUSH
65319: EMPTY
65320: LIST
65321: LIST
65322: LIST
65323: LIST
65324: LIST
65325: LIST
65326: LIST
65327: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65328: LD_ADDR_VAR 0 62
65332: PUSH
65333: LD_INT 0
65335: PUSH
65336: LD_INT 0
65338: PUSH
65339: EMPTY
65340: LIST
65341: LIST
65342: PUSH
65343: LD_INT 0
65345: PUSH
65346: LD_INT 1
65348: NEG
65349: PUSH
65350: EMPTY
65351: LIST
65352: LIST
65353: PUSH
65354: LD_INT 1
65356: PUSH
65357: LD_INT 0
65359: PUSH
65360: EMPTY
65361: LIST
65362: LIST
65363: PUSH
65364: LD_INT 1
65366: PUSH
65367: LD_INT 1
65369: PUSH
65370: EMPTY
65371: LIST
65372: LIST
65373: PUSH
65374: LD_INT 0
65376: PUSH
65377: LD_INT 1
65379: PUSH
65380: EMPTY
65381: LIST
65382: LIST
65383: PUSH
65384: LD_INT 1
65386: NEG
65387: PUSH
65388: LD_INT 0
65390: PUSH
65391: EMPTY
65392: LIST
65393: LIST
65394: PUSH
65395: LD_INT 1
65397: NEG
65398: PUSH
65399: LD_INT 1
65401: NEG
65402: PUSH
65403: EMPTY
65404: LIST
65405: LIST
65406: PUSH
65407: EMPTY
65408: LIST
65409: LIST
65410: LIST
65411: LIST
65412: LIST
65413: LIST
65414: LIST
65415: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65416: LD_ADDR_VAR 0 63
65420: PUSH
65421: LD_INT 0
65423: PUSH
65424: LD_INT 0
65426: PUSH
65427: EMPTY
65428: LIST
65429: LIST
65430: PUSH
65431: LD_INT 0
65433: PUSH
65434: LD_INT 1
65436: NEG
65437: PUSH
65438: EMPTY
65439: LIST
65440: LIST
65441: PUSH
65442: LD_INT 1
65444: PUSH
65445: LD_INT 0
65447: PUSH
65448: EMPTY
65449: LIST
65450: LIST
65451: PUSH
65452: LD_INT 1
65454: PUSH
65455: LD_INT 1
65457: PUSH
65458: EMPTY
65459: LIST
65460: LIST
65461: PUSH
65462: LD_INT 0
65464: PUSH
65465: LD_INT 1
65467: PUSH
65468: EMPTY
65469: LIST
65470: LIST
65471: PUSH
65472: LD_INT 1
65474: NEG
65475: PUSH
65476: LD_INT 0
65478: PUSH
65479: EMPTY
65480: LIST
65481: LIST
65482: PUSH
65483: LD_INT 1
65485: NEG
65486: PUSH
65487: LD_INT 1
65489: NEG
65490: PUSH
65491: EMPTY
65492: LIST
65493: LIST
65494: PUSH
65495: EMPTY
65496: LIST
65497: LIST
65498: LIST
65499: LIST
65500: LIST
65501: LIST
65502: LIST
65503: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65504: LD_ADDR_VAR 0 64
65508: PUSH
65509: LD_INT 0
65511: PUSH
65512: LD_INT 0
65514: PUSH
65515: EMPTY
65516: LIST
65517: LIST
65518: PUSH
65519: LD_INT 0
65521: PUSH
65522: LD_INT 1
65524: NEG
65525: PUSH
65526: EMPTY
65527: LIST
65528: LIST
65529: PUSH
65530: LD_INT 1
65532: PUSH
65533: LD_INT 0
65535: PUSH
65536: EMPTY
65537: LIST
65538: LIST
65539: PUSH
65540: LD_INT 1
65542: PUSH
65543: LD_INT 1
65545: PUSH
65546: EMPTY
65547: LIST
65548: LIST
65549: PUSH
65550: LD_INT 0
65552: PUSH
65553: LD_INT 1
65555: PUSH
65556: EMPTY
65557: LIST
65558: LIST
65559: PUSH
65560: LD_INT 1
65562: NEG
65563: PUSH
65564: LD_INT 0
65566: PUSH
65567: EMPTY
65568: LIST
65569: LIST
65570: PUSH
65571: LD_INT 1
65573: NEG
65574: PUSH
65575: LD_INT 1
65577: NEG
65578: PUSH
65579: EMPTY
65580: LIST
65581: LIST
65582: PUSH
65583: EMPTY
65584: LIST
65585: LIST
65586: LIST
65587: LIST
65588: LIST
65589: LIST
65590: LIST
65591: ST_TO_ADDR
// end ; 1 :
65592: GO 71489
65594: LD_INT 1
65596: DOUBLE
65597: EQUAL
65598: IFTRUE 65602
65600: GO 68225
65602: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65603: LD_ADDR_VAR 0 11
65607: PUSH
65608: LD_INT 1
65610: NEG
65611: PUSH
65612: LD_INT 3
65614: NEG
65615: PUSH
65616: EMPTY
65617: LIST
65618: LIST
65619: PUSH
65620: LD_INT 0
65622: PUSH
65623: LD_INT 3
65625: NEG
65626: PUSH
65627: EMPTY
65628: LIST
65629: LIST
65630: PUSH
65631: LD_INT 1
65633: PUSH
65634: LD_INT 2
65636: NEG
65637: PUSH
65638: EMPTY
65639: LIST
65640: LIST
65641: PUSH
65642: EMPTY
65643: LIST
65644: LIST
65645: LIST
65646: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65647: LD_ADDR_VAR 0 12
65651: PUSH
65652: LD_INT 2
65654: PUSH
65655: LD_INT 1
65657: NEG
65658: PUSH
65659: EMPTY
65660: LIST
65661: LIST
65662: PUSH
65663: LD_INT 3
65665: PUSH
65666: LD_INT 0
65668: PUSH
65669: EMPTY
65670: LIST
65671: LIST
65672: PUSH
65673: LD_INT 3
65675: PUSH
65676: LD_INT 1
65678: PUSH
65679: EMPTY
65680: LIST
65681: LIST
65682: PUSH
65683: EMPTY
65684: LIST
65685: LIST
65686: LIST
65687: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65688: LD_ADDR_VAR 0 13
65692: PUSH
65693: LD_INT 3
65695: PUSH
65696: LD_INT 2
65698: PUSH
65699: EMPTY
65700: LIST
65701: LIST
65702: PUSH
65703: LD_INT 3
65705: PUSH
65706: LD_INT 3
65708: PUSH
65709: EMPTY
65710: LIST
65711: LIST
65712: PUSH
65713: LD_INT 2
65715: PUSH
65716: LD_INT 3
65718: PUSH
65719: EMPTY
65720: LIST
65721: LIST
65722: PUSH
65723: EMPTY
65724: LIST
65725: LIST
65726: LIST
65727: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65728: LD_ADDR_VAR 0 14
65732: PUSH
65733: LD_INT 1
65735: PUSH
65736: LD_INT 3
65738: PUSH
65739: EMPTY
65740: LIST
65741: LIST
65742: PUSH
65743: LD_INT 0
65745: PUSH
65746: LD_INT 3
65748: PUSH
65749: EMPTY
65750: LIST
65751: LIST
65752: PUSH
65753: LD_INT 1
65755: NEG
65756: PUSH
65757: LD_INT 2
65759: PUSH
65760: EMPTY
65761: LIST
65762: LIST
65763: PUSH
65764: EMPTY
65765: LIST
65766: LIST
65767: LIST
65768: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65769: LD_ADDR_VAR 0 15
65773: PUSH
65774: LD_INT 2
65776: NEG
65777: PUSH
65778: LD_INT 1
65780: PUSH
65781: EMPTY
65782: LIST
65783: LIST
65784: PUSH
65785: LD_INT 3
65787: NEG
65788: PUSH
65789: LD_INT 0
65791: PUSH
65792: EMPTY
65793: LIST
65794: LIST
65795: PUSH
65796: LD_INT 3
65798: NEG
65799: PUSH
65800: LD_INT 1
65802: NEG
65803: PUSH
65804: EMPTY
65805: LIST
65806: LIST
65807: PUSH
65808: EMPTY
65809: LIST
65810: LIST
65811: LIST
65812: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65813: LD_ADDR_VAR 0 16
65817: PUSH
65818: LD_INT 2
65820: NEG
65821: PUSH
65822: LD_INT 3
65824: NEG
65825: PUSH
65826: EMPTY
65827: LIST
65828: LIST
65829: PUSH
65830: LD_INT 3
65832: NEG
65833: PUSH
65834: LD_INT 2
65836: NEG
65837: PUSH
65838: EMPTY
65839: LIST
65840: LIST
65841: PUSH
65842: LD_INT 3
65844: NEG
65845: PUSH
65846: LD_INT 3
65848: NEG
65849: PUSH
65850: EMPTY
65851: LIST
65852: LIST
65853: PUSH
65854: EMPTY
65855: LIST
65856: LIST
65857: LIST
65858: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65859: LD_ADDR_VAR 0 17
65863: PUSH
65864: LD_INT 1
65866: NEG
65867: PUSH
65868: LD_INT 3
65870: NEG
65871: PUSH
65872: EMPTY
65873: LIST
65874: LIST
65875: PUSH
65876: LD_INT 0
65878: PUSH
65879: LD_INT 3
65881: NEG
65882: PUSH
65883: EMPTY
65884: LIST
65885: LIST
65886: PUSH
65887: LD_INT 1
65889: PUSH
65890: LD_INT 2
65892: NEG
65893: PUSH
65894: EMPTY
65895: LIST
65896: LIST
65897: PUSH
65898: EMPTY
65899: LIST
65900: LIST
65901: LIST
65902: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65903: LD_ADDR_VAR 0 18
65907: PUSH
65908: LD_INT 2
65910: PUSH
65911: LD_INT 1
65913: NEG
65914: PUSH
65915: EMPTY
65916: LIST
65917: LIST
65918: PUSH
65919: LD_INT 3
65921: PUSH
65922: LD_INT 0
65924: PUSH
65925: EMPTY
65926: LIST
65927: LIST
65928: PUSH
65929: LD_INT 3
65931: PUSH
65932: LD_INT 1
65934: PUSH
65935: EMPTY
65936: LIST
65937: LIST
65938: PUSH
65939: EMPTY
65940: LIST
65941: LIST
65942: LIST
65943: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65944: LD_ADDR_VAR 0 19
65948: PUSH
65949: LD_INT 3
65951: PUSH
65952: LD_INT 2
65954: PUSH
65955: EMPTY
65956: LIST
65957: LIST
65958: PUSH
65959: LD_INT 3
65961: PUSH
65962: LD_INT 3
65964: PUSH
65965: EMPTY
65966: LIST
65967: LIST
65968: PUSH
65969: LD_INT 2
65971: PUSH
65972: LD_INT 3
65974: PUSH
65975: EMPTY
65976: LIST
65977: LIST
65978: PUSH
65979: EMPTY
65980: LIST
65981: LIST
65982: LIST
65983: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65984: LD_ADDR_VAR 0 20
65988: PUSH
65989: LD_INT 1
65991: PUSH
65992: LD_INT 3
65994: PUSH
65995: EMPTY
65996: LIST
65997: LIST
65998: PUSH
65999: LD_INT 0
66001: PUSH
66002: LD_INT 3
66004: PUSH
66005: EMPTY
66006: LIST
66007: LIST
66008: PUSH
66009: LD_INT 1
66011: NEG
66012: PUSH
66013: LD_INT 2
66015: PUSH
66016: EMPTY
66017: LIST
66018: LIST
66019: PUSH
66020: EMPTY
66021: LIST
66022: LIST
66023: LIST
66024: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66025: LD_ADDR_VAR 0 21
66029: PUSH
66030: LD_INT 2
66032: NEG
66033: PUSH
66034: LD_INT 1
66036: PUSH
66037: EMPTY
66038: LIST
66039: LIST
66040: PUSH
66041: LD_INT 3
66043: NEG
66044: PUSH
66045: LD_INT 0
66047: PUSH
66048: EMPTY
66049: LIST
66050: LIST
66051: PUSH
66052: LD_INT 3
66054: NEG
66055: PUSH
66056: LD_INT 1
66058: NEG
66059: PUSH
66060: EMPTY
66061: LIST
66062: LIST
66063: PUSH
66064: EMPTY
66065: LIST
66066: LIST
66067: LIST
66068: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66069: LD_ADDR_VAR 0 22
66073: PUSH
66074: LD_INT 2
66076: NEG
66077: PUSH
66078: LD_INT 3
66080: NEG
66081: PUSH
66082: EMPTY
66083: LIST
66084: LIST
66085: PUSH
66086: LD_INT 3
66088: NEG
66089: PUSH
66090: LD_INT 2
66092: NEG
66093: PUSH
66094: EMPTY
66095: LIST
66096: LIST
66097: PUSH
66098: LD_INT 3
66100: NEG
66101: PUSH
66102: LD_INT 3
66104: NEG
66105: PUSH
66106: EMPTY
66107: LIST
66108: LIST
66109: PUSH
66110: EMPTY
66111: LIST
66112: LIST
66113: LIST
66114: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
66115: LD_ADDR_VAR 0 23
66119: PUSH
66120: LD_INT 0
66122: PUSH
66123: LD_INT 3
66125: NEG
66126: PUSH
66127: EMPTY
66128: LIST
66129: LIST
66130: PUSH
66131: LD_INT 1
66133: NEG
66134: PUSH
66135: LD_INT 4
66137: NEG
66138: PUSH
66139: EMPTY
66140: LIST
66141: LIST
66142: PUSH
66143: LD_INT 1
66145: PUSH
66146: LD_INT 3
66148: NEG
66149: PUSH
66150: EMPTY
66151: LIST
66152: LIST
66153: PUSH
66154: EMPTY
66155: LIST
66156: LIST
66157: LIST
66158: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
66159: LD_ADDR_VAR 0 24
66163: PUSH
66164: LD_INT 3
66166: PUSH
66167: LD_INT 0
66169: PUSH
66170: EMPTY
66171: LIST
66172: LIST
66173: PUSH
66174: LD_INT 3
66176: PUSH
66177: LD_INT 1
66179: NEG
66180: PUSH
66181: EMPTY
66182: LIST
66183: LIST
66184: PUSH
66185: LD_INT 4
66187: PUSH
66188: LD_INT 1
66190: PUSH
66191: EMPTY
66192: LIST
66193: LIST
66194: PUSH
66195: EMPTY
66196: LIST
66197: LIST
66198: LIST
66199: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
66200: LD_ADDR_VAR 0 25
66204: PUSH
66205: LD_INT 3
66207: PUSH
66208: LD_INT 3
66210: PUSH
66211: EMPTY
66212: LIST
66213: LIST
66214: PUSH
66215: LD_INT 4
66217: PUSH
66218: LD_INT 3
66220: PUSH
66221: EMPTY
66222: LIST
66223: LIST
66224: PUSH
66225: LD_INT 3
66227: PUSH
66228: LD_INT 4
66230: PUSH
66231: EMPTY
66232: LIST
66233: LIST
66234: PUSH
66235: EMPTY
66236: LIST
66237: LIST
66238: LIST
66239: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
66240: LD_ADDR_VAR 0 26
66244: PUSH
66245: LD_INT 0
66247: PUSH
66248: LD_INT 3
66250: PUSH
66251: EMPTY
66252: LIST
66253: LIST
66254: PUSH
66255: LD_INT 1
66257: PUSH
66258: LD_INT 4
66260: PUSH
66261: EMPTY
66262: LIST
66263: LIST
66264: PUSH
66265: LD_INT 1
66267: NEG
66268: PUSH
66269: LD_INT 3
66271: PUSH
66272: EMPTY
66273: LIST
66274: LIST
66275: PUSH
66276: EMPTY
66277: LIST
66278: LIST
66279: LIST
66280: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
66281: LD_ADDR_VAR 0 27
66285: PUSH
66286: LD_INT 3
66288: NEG
66289: PUSH
66290: LD_INT 0
66292: PUSH
66293: EMPTY
66294: LIST
66295: LIST
66296: PUSH
66297: LD_INT 3
66299: NEG
66300: PUSH
66301: LD_INT 1
66303: PUSH
66304: EMPTY
66305: LIST
66306: LIST
66307: PUSH
66308: LD_INT 4
66310: NEG
66311: PUSH
66312: LD_INT 1
66314: NEG
66315: PUSH
66316: EMPTY
66317: LIST
66318: LIST
66319: PUSH
66320: EMPTY
66321: LIST
66322: LIST
66323: LIST
66324: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
66325: LD_ADDR_VAR 0 28
66329: PUSH
66330: LD_INT 3
66332: NEG
66333: PUSH
66334: LD_INT 3
66336: NEG
66337: PUSH
66338: EMPTY
66339: LIST
66340: LIST
66341: PUSH
66342: LD_INT 3
66344: NEG
66345: PUSH
66346: LD_INT 4
66348: NEG
66349: PUSH
66350: EMPTY
66351: LIST
66352: LIST
66353: PUSH
66354: LD_INT 4
66356: NEG
66357: PUSH
66358: LD_INT 3
66360: NEG
66361: PUSH
66362: EMPTY
66363: LIST
66364: LIST
66365: PUSH
66366: EMPTY
66367: LIST
66368: LIST
66369: LIST
66370: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
66371: LD_ADDR_VAR 0 29
66375: PUSH
66376: LD_INT 1
66378: NEG
66379: PUSH
66380: LD_INT 3
66382: NEG
66383: PUSH
66384: EMPTY
66385: LIST
66386: LIST
66387: PUSH
66388: LD_INT 0
66390: PUSH
66391: LD_INT 3
66393: NEG
66394: PUSH
66395: EMPTY
66396: LIST
66397: LIST
66398: PUSH
66399: LD_INT 1
66401: PUSH
66402: LD_INT 2
66404: NEG
66405: PUSH
66406: EMPTY
66407: LIST
66408: LIST
66409: PUSH
66410: LD_INT 1
66412: NEG
66413: PUSH
66414: LD_INT 4
66416: NEG
66417: PUSH
66418: EMPTY
66419: LIST
66420: LIST
66421: PUSH
66422: LD_INT 0
66424: PUSH
66425: LD_INT 4
66427: NEG
66428: PUSH
66429: EMPTY
66430: LIST
66431: LIST
66432: PUSH
66433: LD_INT 1
66435: PUSH
66436: LD_INT 3
66438: NEG
66439: PUSH
66440: EMPTY
66441: LIST
66442: LIST
66443: PUSH
66444: LD_INT 1
66446: NEG
66447: PUSH
66448: LD_INT 5
66450: NEG
66451: PUSH
66452: EMPTY
66453: LIST
66454: LIST
66455: PUSH
66456: LD_INT 0
66458: PUSH
66459: LD_INT 5
66461: NEG
66462: PUSH
66463: EMPTY
66464: LIST
66465: LIST
66466: PUSH
66467: LD_INT 1
66469: PUSH
66470: LD_INT 4
66472: NEG
66473: PUSH
66474: EMPTY
66475: LIST
66476: LIST
66477: PUSH
66478: LD_INT 1
66480: NEG
66481: PUSH
66482: LD_INT 6
66484: NEG
66485: PUSH
66486: EMPTY
66487: LIST
66488: LIST
66489: PUSH
66490: LD_INT 0
66492: PUSH
66493: LD_INT 6
66495: NEG
66496: PUSH
66497: EMPTY
66498: LIST
66499: LIST
66500: PUSH
66501: LD_INT 1
66503: PUSH
66504: LD_INT 5
66506: NEG
66507: PUSH
66508: EMPTY
66509: LIST
66510: LIST
66511: PUSH
66512: EMPTY
66513: LIST
66514: LIST
66515: LIST
66516: LIST
66517: LIST
66518: LIST
66519: LIST
66520: LIST
66521: LIST
66522: LIST
66523: LIST
66524: LIST
66525: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
66526: LD_ADDR_VAR 0 30
66530: PUSH
66531: LD_INT 2
66533: PUSH
66534: LD_INT 1
66536: NEG
66537: PUSH
66538: EMPTY
66539: LIST
66540: LIST
66541: PUSH
66542: LD_INT 3
66544: PUSH
66545: LD_INT 0
66547: PUSH
66548: EMPTY
66549: LIST
66550: LIST
66551: PUSH
66552: LD_INT 3
66554: PUSH
66555: LD_INT 1
66557: PUSH
66558: EMPTY
66559: LIST
66560: LIST
66561: PUSH
66562: LD_INT 3
66564: PUSH
66565: LD_INT 1
66567: NEG
66568: PUSH
66569: EMPTY
66570: LIST
66571: LIST
66572: PUSH
66573: LD_INT 4
66575: PUSH
66576: LD_INT 0
66578: PUSH
66579: EMPTY
66580: LIST
66581: LIST
66582: PUSH
66583: LD_INT 4
66585: PUSH
66586: LD_INT 1
66588: PUSH
66589: EMPTY
66590: LIST
66591: LIST
66592: PUSH
66593: LD_INT 4
66595: PUSH
66596: LD_INT 1
66598: NEG
66599: PUSH
66600: EMPTY
66601: LIST
66602: LIST
66603: PUSH
66604: LD_INT 5
66606: PUSH
66607: LD_INT 0
66609: PUSH
66610: EMPTY
66611: LIST
66612: LIST
66613: PUSH
66614: LD_INT 5
66616: PUSH
66617: LD_INT 1
66619: PUSH
66620: EMPTY
66621: LIST
66622: LIST
66623: PUSH
66624: LD_INT 5
66626: PUSH
66627: LD_INT 1
66629: NEG
66630: PUSH
66631: EMPTY
66632: LIST
66633: LIST
66634: PUSH
66635: LD_INT 6
66637: PUSH
66638: LD_INT 0
66640: PUSH
66641: EMPTY
66642: LIST
66643: LIST
66644: PUSH
66645: LD_INT 6
66647: PUSH
66648: LD_INT 1
66650: PUSH
66651: EMPTY
66652: LIST
66653: LIST
66654: PUSH
66655: EMPTY
66656: LIST
66657: LIST
66658: LIST
66659: LIST
66660: LIST
66661: LIST
66662: LIST
66663: LIST
66664: LIST
66665: LIST
66666: LIST
66667: LIST
66668: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
66669: LD_ADDR_VAR 0 31
66673: PUSH
66674: LD_INT 3
66676: PUSH
66677: LD_INT 2
66679: PUSH
66680: EMPTY
66681: LIST
66682: LIST
66683: PUSH
66684: LD_INT 3
66686: PUSH
66687: LD_INT 3
66689: PUSH
66690: EMPTY
66691: LIST
66692: LIST
66693: PUSH
66694: LD_INT 2
66696: PUSH
66697: LD_INT 3
66699: PUSH
66700: EMPTY
66701: LIST
66702: LIST
66703: PUSH
66704: LD_INT 4
66706: PUSH
66707: LD_INT 3
66709: PUSH
66710: EMPTY
66711: LIST
66712: LIST
66713: PUSH
66714: LD_INT 4
66716: PUSH
66717: LD_INT 4
66719: PUSH
66720: EMPTY
66721: LIST
66722: LIST
66723: PUSH
66724: LD_INT 3
66726: PUSH
66727: LD_INT 4
66729: PUSH
66730: EMPTY
66731: LIST
66732: LIST
66733: PUSH
66734: LD_INT 5
66736: PUSH
66737: LD_INT 4
66739: PUSH
66740: EMPTY
66741: LIST
66742: LIST
66743: PUSH
66744: LD_INT 5
66746: PUSH
66747: LD_INT 5
66749: PUSH
66750: EMPTY
66751: LIST
66752: LIST
66753: PUSH
66754: LD_INT 4
66756: PUSH
66757: LD_INT 5
66759: PUSH
66760: EMPTY
66761: LIST
66762: LIST
66763: PUSH
66764: LD_INT 6
66766: PUSH
66767: LD_INT 5
66769: PUSH
66770: EMPTY
66771: LIST
66772: LIST
66773: PUSH
66774: LD_INT 6
66776: PUSH
66777: LD_INT 6
66779: PUSH
66780: EMPTY
66781: LIST
66782: LIST
66783: PUSH
66784: LD_INT 5
66786: PUSH
66787: LD_INT 6
66789: PUSH
66790: EMPTY
66791: LIST
66792: LIST
66793: PUSH
66794: EMPTY
66795: LIST
66796: LIST
66797: LIST
66798: LIST
66799: LIST
66800: LIST
66801: LIST
66802: LIST
66803: LIST
66804: LIST
66805: LIST
66806: LIST
66807: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
66808: LD_ADDR_VAR 0 32
66812: PUSH
66813: LD_INT 1
66815: PUSH
66816: LD_INT 3
66818: PUSH
66819: EMPTY
66820: LIST
66821: LIST
66822: PUSH
66823: LD_INT 0
66825: PUSH
66826: LD_INT 3
66828: PUSH
66829: EMPTY
66830: LIST
66831: LIST
66832: PUSH
66833: LD_INT 1
66835: NEG
66836: PUSH
66837: LD_INT 2
66839: PUSH
66840: EMPTY
66841: LIST
66842: LIST
66843: PUSH
66844: LD_INT 1
66846: PUSH
66847: LD_INT 4
66849: PUSH
66850: EMPTY
66851: LIST
66852: LIST
66853: PUSH
66854: LD_INT 0
66856: PUSH
66857: LD_INT 4
66859: PUSH
66860: EMPTY
66861: LIST
66862: LIST
66863: PUSH
66864: LD_INT 1
66866: NEG
66867: PUSH
66868: LD_INT 3
66870: PUSH
66871: EMPTY
66872: LIST
66873: LIST
66874: PUSH
66875: LD_INT 1
66877: PUSH
66878: LD_INT 5
66880: PUSH
66881: EMPTY
66882: LIST
66883: LIST
66884: PUSH
66885: LD_INT 0
66887: PUSH
66888: LD_INT 5
66890: PUSH
66891: EMPTY
66892: LIST
66893: LIST
66894: PUSH
66895: LD_INT 1
66897: NEG
66898: PUSH
66899: LD_INT 4
66901: PUSH
66902: EMPTY
66903: LIST
66904: LIST
66905: PUSH
66906: LD_INT 1
66908: PUSH
66909: LD_INT 6
66911: PUSH
66912: EMPTY
66913: LIST
66914: LIST
66915: PUSH
66916: LD_INT 0
66918: PUSH
66919: LD_INT 6
66921: PUSH
66922: EMPTY
66923: LIST
66924: LIST
66925: PUSH
66926: LD_INT 1
66928: NEG
66929: PUSH
66930: LD_INT 5
66932: PUSH
66933: EMPTY
66934: LIST
66935: LIST
66936: PUSH
66937: EMPTY
66938: LIST
66939: LIST
66940: LIST
66941: LIST
66942: LIST
66943: LIST
66944: LIST
66945: LIST
66946: LIST
66947: LIST
66948: LIST
66949: LIST
66950: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
66951: LD_ADDR_VAR 0 33
66955: PUSH
66956: LD_INT 2
66958: NEG
66959: PUSH
66960: LD_INT 1
66962: PUSH
66963: EMPTY
66964: LIST
66965: LIST
66966: PUSH
66967: LD_INT 3
66969: NEG
66970: PUSH
66971: LD_INT 0
66973: PUSH
66974: EMPTY
66975: LIST
66976: LIST
66977: PUSH
66978: LD_INT 3
66980: NEG
66981: PUSH
66982: LD_INT 1
66984: NEG
66985: PUSH
66986: EMPTY
66987: LIST
66988: LIST
66989: PUSH
66990: LD_INT 3
66992: NEG
66993: PUSH
66994: LD_INT 1
66996: PUSH
66997: EMPTY
66998: LIST
66999: LIST
67000: PUSH
67001: LD_INT 4
67003: NEG
67004: PUSH
67005: LD_INT 0
67007: PUSH
67008: EMPTY
67009: LIST
67010: LIST
67011: PUSH
67012: LD_INT 4
67014: NEG
67015: PUSH
67016: LD_INT 1
67018: NEG
67019: PUSH
67020: EMPTY
67021: LIST
67022: LIST
67023: PUSH
67024: LD_INT 4
67026: NEG
67027: PUSH
67028: LD_INT 1
67030: PUSH
67031: EMPTY
67032: LIST
67033: LIST
67034: PUSH
67035: LD_INT 5
67037: NEG
67038: PUSH
67039: LD_INT 0
67041: PUSH
67042: EMPTY
67043: LIST
67044: LIST
67045: PUSH
67046: LD_INT 5
67048: NEG
67049: PUSH
67050: LD_INT 1
67052: NEG
67053: PUSH
67054: EMPTY
67055: LIST
67056: LIST
67057: PUSH
67058: LD_INT 5
67060: NEG
67061: PUSH
67062: LD_INT 1
67064: PUSH
67065: EMPTY
67066: LIST
67067: LIST
67068: PUSH
67069: LD_INT 6
67071: NEG
67072: PUSH
67073: LD_INT 0
67075: PUSH
67076: EMPTY
67077: LIST
67078: LIST
67079: PUSH
67080: LD_INT 6
67082: NEG
67083: PUSH
67084: LD_INT 1
67086: NEG
67087: PUSH
67088: EMPTY
67089: LIST
67090: LIST
67091: PUSH
67092: EMPTY
67093: LIST
67094: LIST
67095: LIST
67096: LIST
67097: LIST
67098: LIST
67099: LIST
67100: LIST
67101: LIST
67102: LIST
67103: LIST
67104: LIST
67105: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
67106: LD_ADDR_VAR 0 34
67110: PUSH
67111: LD_INT 2
67113: NEG
67114: PUSH
67115: LD_INT 3
67117: NEG
67118: PUSH
67119: EMPTY
67120: LIST
67121: LIST
67122: PUSH
67123: LD_INT 3
67125: NEG
67126: PUSH
67127: LD_INT 2
67129: NEG
67130: PUSH
67131: EMPTY
67132: LIST
67133: LIST
67134: PUSH
67135: LD_INT 3
67137: NEG
67138: PUSH
67139: LD_INT 3
67141: NEG
67142: PUSH
67143: EMPTY
67144: LIST
67145: LIST
67146: PUSH
67147: LD_INT 3
67149: NEG
67150: PUSH
67151: LD_INT 4
67153: NEG
67154: PUSH
67155: EMPTY
67156: LIST
67157: LIST
67158: PUSH
67159: LD_INT 4
67161: NEG
67162: PUSH
67163: LD_INT 3
67165: NEG
67166: PUSH
67167: EMPTY
67168: LIST
67169: LIST
67170: PUSH
67171: LD_INT 4
67173: NEG
67174: PUSH
67175: LD_INT 4
67177: NEG
67178: PUSH
67179: EMPTY
67180: LIST
67181: LIST
67182: PUSH
67183: LD_INT 4
67185: NEG
67186: PUSH
67187: LD_INT 5
67189: NEG
67190: PUSH
67191: EMPTY
67192: LIST
67193: LIST
67194: PUSH
67195: LD_INT 5
67197: NEG
67198: PUSH
67199: LD_INT 4
67201: NEG
67202: PUSH
67203: EMPTY
67204: LIST
67205: LIST
67206: PUSH
67207: LD_INT 5
67209: NEG
67210: PUSH
67211: LD_INT 5
67213: NEG
67214: PUSH
67215: EMPTY
67216: LIST
67217: LIST
67218: PUSH
67219: LD_INT 5
67221: NEG
67222: PUSH
67223: LD_INT 6
67225: NEG
67226: PUSH
67227: EMPTY
67228: LIST
67229: LIST
67230: PUSH
67231: LD_INT 6
67233: NEG
67234: PUSH
67235: LD_INT 5
67237: NEG
67238: PUSH
67239: EMPTY
67240: LIST
67241: LIST
67242: PUSH
67243: LD_INT 6
67245: NEG
67246: PUSH
67247: LD_INT 6
67249: NEG
67250: PUSH
67251: EMPTY
67252: LIST
67253: LIST
67254: PUSH
67255: EMPTY
67256: LIST
67257: LIST
67258: LIST
67259: LIST
67260: LIST
67261: LIST
67262: LIST
67263: LIST
67264: LIST
67265: LIST
67266: LIST
67267: LIST
67268: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
67269: LD_ADDR_VAR 0 41
67273: PUSH
67274: LD_INT 0
67276: PUSH
67277: LD_INT 2
67279: NEG
67280: PUSH
67281: EMPTY
67282: LIST
67283: LIST
67284: PUSH
67285: LD_INT 1
67287: NEG
67288: PUSH
67289: LD_INT 3
67291: NEG
67292: PUSH
67293: EMPTY
67294: LIST
67295: LIST
67296: PUSH
67297: LD_INT 1
67299: PUSH
67300: LD_INT 2
67302: NEG
67303: PUSH
67304: EMPTY
67305: LIST
67306: LIST
67307: PUSH
67308: EMPTY
67309: LIST
67310: LIST
67311: LIST
67312: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
67313: LD_ADDR_VAR 0 42
67317: PUSH
67318: LD_INT 2
67320: PUSH
67321: LD_INT 0
67323: PUSH
67324: EMPTY
67325: LIST
67326: LIST
67327: PUSH
67328: LD_INT 2
67330: PUSH
67331: LD_INT 1
67333: NEG
67334: PUSH
67335: EMPTY
67336: LIST
67337: LIST
67338: PUSH
67339: LD_INT 3
67341: PUSH
67342: LD_INT 1
67344: PUSH
67345: EMPTY
67346: LIST
67347: LIST
67348: PUSH
67349: EMPTY
67350: LIST
67351: LIST
67352: LIST
67353: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
67354: LD_ADDR_VAR 0 43
67358: PUSH
67359: LD_INT 2
67361: PUSH
67362: LD_INT 2
67364: PUSH
67365: EMPTY
67366: LIST
67367: LIST
67368: PUSH
67369: LD_INT 3
67371: PUSH
67372: LD_INT 2
67374: PUSH
67375: EMPTY
67376: LIST
67377: LIST
67378: PUSH
67379: LD_INT 2
67381: PUSH
67382: LD_INT 3
67384: PUSH
67385: EMPTY
67386: LIST
67387: LIST
67388: PUSH
67389: EMPTY
67390: LIST
67391: LIST
67392: LIST
67393: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
67394: LD_ADDR_VAR 0 44
67398: PUSH
67399: LD_INT 0
67401: PUSH
67402: LD_INT 2
67404: PUSH
67405: EMPTY
67406: LIST
67407: LIST
67408: PUSH
67409: LD_INT 1
67411: PUSH
67412: LD_INT 3
67414: PUSH
67415: EMPTY
67416: LIST
67417: LIST
67418: PUSH
67419: LD_INT 1
67421: NEG
67422: PUSH
67423: LD_INT 2
67425: PUSH
67426: EMPTY
67427: LIST
67428: LIST
67429: PUSH
67430: EMPTY
67431: LIST
67432: LIST
67433: LIST
67434: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67435: LD_ADDR_VAR 0 45
67439: PUSH
67440: LD_INT 2
67442: NEG
67443: PUSH
67444: LD_INT 0
67446: PUSH
67447: EMPTY
67448: LIST
67449: LIST
67450: PUSH
67451: LD_INT 2
67453: NEG
67454: PUSH
67455: LD_INT 1
67457: PUSH
67458: EMPTY
67459: LIST
67460: LIST
67461: PUSH
67462: LD_INT 3
67464: NEG
67465: PUSH
67466: LD_INT 1
67468: NEG
67469: PUSH
67470: EMPTY
67471: LIST
67472: LIST
67473: PUSH
67474: EMPTY
67475: LIST
67476: LIST
67477: LIST
67478: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
67479: LD_ADDR_VAR 0 46
67483: PUSH
67484: LD_INT 2
67486: NEG
67487: PUSH
67488: LD_INT 2
67490: NEG
67491: PUSH
67492: EMPTY
67493: LIST
67494: LIST
67495: PUSH
67496: LD_INT 2
67498: NEG
67499: PUSH
67500: LD_INT 3
67502: NEG
67503: PUSH
67504: EMPTY
67505: LIST
67506: LIST
67507: PUSH
67508: LD_INT 3
67510: NEG
67511: PUSH
67512: LD_INT 2
67514: NEG
67515: PUSH
67516: EMPTY
67517: LIST
67518: LIST
67519: PUSH
67520: EMPTY
67521: LIST
67522: LIST
67523: LIST
67524: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
67525: LD_ADDR_VAR 0 47
67529: PUSH
67530: LD_INT 2
67532: NEG
67533: PUSH
67534: LD_INT 3
67536: NEG
67537: PUSH
67538: EMPTY
67539: LIST
67540: LIST
67541: PUSH
67542: LD_INT 1
67544: NEG
67545: PUSH
67546: LD_INT 3
67548: NEG
67549: PUSH
67550: EMPTY
67551: LIST
67552: LIST
67553: PUSH
67554: EMPTY
67555: LIST
67556: LIST
67557: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
67558: LD_ADDR_VAR 0 48
67562: PUSH
67563: LD_INT 1
67565: PUSH
67566: LD_INT 2
67568: NEG
67569: PUSH
67570: EMPTY
67571: LIST
67572: LIST
67573: PUSH
67574: LD_INT 2
67576: PUSH
67577: LD_INT 1
67579: NEG
67580: PUSH
67581: EMPTY
67582: LIST
67583: LIST
67584: PUSH
67585: EMPTY
67586: LIST
67587: LIST
67588: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
67589: LD_ADDR_VAR 0 49
67593: PUSH
67594: LD_INT 3
67596: PUSH
67597: LD_INT 1
67599: PUSH
67600: EMPTY
67601: LIST
67602: LIST
67603: PUSH
67604: LD_INT 3
67606: PUSH
67607: LD_INT 2
67609: PUSH
67610: EMPTY
67611: LIST
67612: LIST
67613: PUSH
67614: EMPTY
67615: LIST
67616: LIST
67617: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
67618: LD_ADDR_VAR 0 50
67622: PUSH
67623: LD_INT 2
67625: PUSH
67626: LD_INT 3
67628: PUSH
67629: EMPTY
67630: LIST
67631: LIST
67632: PUSH
67633: LD_INT 1
67635: PUSH
67636: LD_INT 3
67638: PUSH
67639: EMPTY
67640: LIST
67641: LIST
67642: PUSH
67643: EMPTY
67644: LIST
67645: LIST
67646: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
67647: LD_ADDR_VAR 0 51
67651: PUSH
67652: LD_INT 1
67654: NEG
67655: PUSH
67656: LD_INT 2
67658: PUSH
67659: EMPTY
67660: LIST
67661: LIST
67662: PUSH
67663: LD_INT 2
67665: NEG
67666: PUSH
67667: LD_INT 1
67669: PUSH
67670: EMPTY
67671: LIST
67672: LIST
67673: PUSH
67674: EMPTY
67675: LIST
67676: LIST
67677: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
67678: LD_ADDR_VAR 0 52
67682: PUSH
67683: LD_INT 3
67685: NEG
67686: PUSH
67687: LD_INT 1
67689: NEG
67690: PUSH
67691: EMPTY
67692: LIST
67693: LIST
67694: PUSH
67695: LD_INT 3
67697: NEG
67698: PUSH
67699: LD_INT 2
67701: NEG
67702: PUSH
67703: EMPTY
67704: LIST
67705: LIST
67706: PUSH
67707: EMPTY
67708: LIST
67709: LIST
67710: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67711: LD_ADDR_VAR 0 53
67715: PUSH
67716: LD_INT 1
67718: NEG
67719: PUSH
67720: LD_INT 3
67722: NEG
67723: PUSH
67724: EMPTY
67725: LIST
67726: LIST
67727: PUSH
67728: LD_INT 0
67730: PUSH
67731: LD_INT 3
67733: NEG
67734: PUSH
67735: EMPTY
67736: LIST
67737: LIST
67738: PUSH
67739: LD_INT 1
67741: PUSH
67742: LD_INT 2
67744: NEG
67745: PUSH
67746: EMPTY
67747: LIST
67748: LIST
67749: PUSH
67750: EMPTY
67751: LIST
67752: LIST
67753: LIST
67754: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67755: LD_ADDR_VAR 0 54
67759: PUSH
67760: LD_INT 2
67762: PUSH
67763: LD_INT 1
67765: NEG
67766: PUSH
67767: EMPTY
67768: LIST
67769: LIST
67770: PUSH
67771: LD_INT 3
67773: PUSH
67774: LD_INT 0
67776: PUSH
67777: EMPTY
67778: LIST
67779: LIST
67780: PUSH
67781: LD_INT 3
67783: PUSH
67784: LD_INT 1
67786: PUSH
67787: EMPTY
67788: LIST
67789: LIST
67790: PUSH
67791: EMPTY
67792: LIST
67793: LIST
67794: LIST
67795: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67796: LD_ADDR_VAR 0 55
67800: PUSH
67801: LD_INT 3
67803: PUSH
67804: LD_INT 2
67806: PUSH
67807: EMPTY
67808: LIST
67809: LIST
67810: PUSH
67811: LD_INT 3
67813: PUSH
67814: LD_INT 3
67816: PUSH
67817: EMPTY
67818: LIST
67819: LIST
67820: PUSH
67821: LD_INT 2
67823: PUSH
67824: LD_INT 3
67826: PUSH
67827: EMPTY
67828: LIST
67829: LIST
67830: PUSH
67831: EMPTY
67832: LIST
67833: LIST
67834: LIST
67835: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67836: LD_ADDR_VAR 0 56
67840: PUSH
67841: LD_INT 1
67843: PUSH
67844: LD_INT 3
67846: PUSH
67847: EMPTY
67848: LIST
67849: LIST
67850: PUSH
67851: LD_INT 0
67853: PUSH
67854: LD_INT 3
67856: PUSH
67857: EMPTY
67858: LIST
67859: LIST
67860: PUSH
67861: LD_INT 1
67863: NEG
67864: PUSH
67865: LD_INT 2
67867: PUSH
67868: EMPTY
67869: LIST
67870: LIST
67871: PUSH
67872: EMPTY
67873: LIST
67874: LIST
67875: LIST
67876: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67877: LD_ADDR_VAR 0 57
67881: PUSH
67882: LD_INT 2
67884: NEG
67885: PUSH
67886: LD_INT 1
67888: PUSH
67889: EMPTY
67890: LIST
67891: LIST
67892: PUSH
67893: LD_INT 3
67895: NEG
67896: PUSH
67897: LD_INT 0
67899: PUSH
67900: EMPTY
67901: LIST
67902: LIST
67903: PUSH
67904: LD_INT 3
67906: NEG
67907: PUSH
67908: LD_INT 1
67910: NEG
67911: PUSH
67912: EMPTY
67913: LIST
67914: LIST
67915: PUSH
67916: EMPTY
67917: LIST
67918: LIST
67919: LIST
67920: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67921: LD_ADDR_VAR 0 58
67925: PUSH
67926: LD_INT 2
67928: NEG
67929: PUSH
67930: LD_INT 3
67932: NEG
67933: PUSH
67934: EMPTY
67935: LIST
67936: LIST
67937: PUSH
67938: LD_INT 3
67940: NEG
67941: PUSH
67942: LD_INT 2
67944: NEG
67945: PUSH
67946: EMPTY
67947: LIST
67948: LIST
67949: PUSH
67950: LD_INT 3
67952: NEG
67953: PUSH
67954: LD_INT 3
67956: NEG
67957: PUSH
67958: EMPTY
67959: LIST
67960: LIST
67961: PUSH
67962: EMPTY
67963: LIST
67964: LIST
67965: LIST
67966: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
67967: LD_ADDR_VAR 0 59
67971: PUSH
67972: LD_INT 1
67974: NEG
67975: PUSH
67976: LD_INT 2
67978: NEG
67979: PUSH
67980: EMPTY
67981: LIST
67982: LIST
67983: PUSH
67984: LD_INT 0
67986: PUSH
67987: LD_INT 2
67989: NEG
67990: PUSH
67991: EMPTY
67992: LIST
67993: LIST
67994: PUSH
67995: LD_INT 1
67997: PUSH
67998: LD_INT 1
68000: NEG
68001: PUSH
68002: EMPTY
68003: LIST
68004: LIST
68005: PUSH
68006: EMPTY
68007: LIST
68008: LIST
68009: LIST
68010: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
68011: LD_ADDR_VAR 0 60
68015: PUSH
68016: LD_INT 1
68018: PUSH
68019: LD_INT 1
68021: NEG
68022: PUSH
68023: EMPTY
68024: LIST
68025: LIST
68026: PUSH
68027: LD_INT 2
68029: PUSH
68030: LD_INT 0
68032: PUSH
68033: EMPTY
68034: LIST
68035: LIST
68036: PUSH
68037: LD_INT 2
68039: PUSH
68040: LD_INT 1
68042: PUSH
68043: EMPTY
68044: LIST
68045: LIST
68046: PUSH
68047: EMPTY
68048: LIST
68049: LIST
68050: LIST
68051: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
68052: LD_ADDR_VAR 0 61
68056: PUSH
68057: LD_INT 2
68059: PUSH
68060: LD_INT 1
68062: PUSH
68063: EMPTY
68064: LIST
68065: LIST
68066: PUSH
68067: LD_INT 2
68069: PUSH
68070: LD_INT 2
68072: PUSH
68073: EMPTY
68074: LIST
68075: LIST
68076: PUSH
68077: LD_INT 1
68079: PUSH
68080: LD_INT 2
68082: PUSH
68083: EMPTY
68084: LIST
68085: LIST
68086: PUSH
68087: EMPTY
68088: LIST
68089: LIST
68090: LIST
68091: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
68092: LD_ADDR_VAR 0 62
68096: PUSH
68097: LD_INT 1
68099: PUSH
68100: LD_INT 2
68102: PUSH
68103: EMPTY
68104: LIST
68105: LIST
68106: PUSH
68107: LD_INT 0
68109: PUSH
68110: LD_INT 2
68112: PUSH
68113: EMPTY
68114: LIST
68115: LIST
68116: PUSH
68117: LD_INT 1
68119: NEG
68120: PUSH
68121: LD_INT 1
68123: PUSH
68124: EMPTY
68125: LIST
68126: LIST
68127: PUSH
68128: EMPTY
68129: LIST
68130: LIST
68131: LIST
68132: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
68133: LD_ADDR_VAR 0 63
68137: PUSH
68138: LD_INT 1
68140: NEG
68141: PUSH
68142: LD_INT 1
68144: PUSH
68145: EMPTY
68146: LIST
68147: LIST
68148: PUSH
68149: LD_INT 2
68151: NEG
68152: PUSH
68153: LD_INT 0
68155: PUSH
68156: EMPTY
68157: LIST
68158: LIST
68159: PUSH
68160: LD_INT 2
68162: NEG
68163: PUSH
68164: LD_INT 1
68166: NEG
68167: PUSH
68168: EMPTY
68169: LIST
68170: LIST
68171: PUSH
68172: EMPTY
68173: LIST
68174: LIST
68175: LIST
68176: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68177: LD_ADDR_VAR 0 64
68181: PUSH
68182: LD_INT 1
68184: NEG
68185: PUSH
68186: LD_INT 2
68188: NEG
68189: PUSH
68190: EMPTY
68191: LIST
68192: LIST
68193: PUSH
68194: LD_INT 2
68196: NEG
68197: PUSH
68198: LD_INT 1
68200: NEG
68201: PUSH
68202: EMPTY
68203: LIST
68204: LIST
68205: PUSH
68206: LD_INT 2
68208: NEG
68209: PUSH
68210: LD_INT 2
68212: NEG
68213: PUSH
68214: EMPTY
68215: LIST
68216: LIST
68217: PUSH
68218: EMPTY
68219: LIST
68220: LIST
68221: LIST
68222: ST_TO_ADDR
// end ; 2 :
68223: GO 71489
68225: LD_INT 2
68227: DOUBLE
68228: EQUAL
68229: IFTRUE 68233
68231: GO 71488
68233: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
68234: LD_ADDR_VAR 0 29
68238: PUSH
68239: LD_INT 4
68241: PUSH
68242: LD_INT 0
68244: PUSH
68245: EMPTY
68246: LIST
68247: LIST
68248: PUSH
68249: LD_INT 4
68251: PUSH
68252: LD_INT 1
68254: NEG
68255: PUSH
68256: EMPTY
68257: LIST
68258: LIST
68259: PUSH
68260: LD_INT 5
68262: PUSH
68263: LD_INT 0
68265: PUSH
68266: EMPTY
68267: LIST
68268: LIST
68269: PUSH
68270: LD_INT 5
68272: PUSH
68273: LD_INT 1
68275: PUSH
68276: EMPTY
68277: LIST
68278: LIST
68279: PUSH
68280: LD_INT 4
68282: PUSH
68283: LD_INT 1
68285: PUSH
68286: EMPTY
68287: LIST
68288: LIST
68289: PUSH
68290: LD_INT 3
68292: PUSH
68293: LD_INT 0
68295: PUSH
68296: EMPTY
68297: LIST
68298: LIST
68299: PUSH
68300: LD_INT 3
68302: PUSH
68303: LD_INT 1
68305: NEG
68306: PUSH
68307: EMPTY
68308: LIST
68309: LIST
68310: PUSH
68311: LD_INT 3
68313: PUSH
68314: LD_INT 2
68316: NEG
68317: PUSH
68318: EMPTY
68319: LIST
68320: LIST
68321: PUSH
68322: LD_INT 5
68324: PUSH
68325: LD_INT 2
68327: PUSH
68328: EMPTY
68329: LIST
68330: LIST
68331: PUSH
68332: LD_INT 3
68334: PUSH
68335: LD_INT 3
68337: PUSH
68338: EMPTY
68339: LIST
68340: LIST
68341: PUSH
68342: LD_INT 3
68344: PUSH
68345: LD_INT 2
68347: PUSH
68348: EMPTY
68349: LIST
68350: LIST
68351: PUSH
68352: LD_INT 4
68354: PUSH
68355: LD_INT 3
68357: PUSH
68358: EMPTY
68359: LIST
68360: LIST
68361: PUSH
68362: LD_INT 4
68364: PUSH
68365: LD_INT 4
68367: PUSH
68368: EMPTY
68369: LIST
68370: LIST
68371: PUSH
68372: LD_INT 3
68374: PUSH
68375: LD_INT 4
68377: PUSH
68378: EMPTY
68379: LIST
68380: LIST
68381: PUSH
68382: LD_INT 2
68384: PUSH
68385: LD_INT 3
68387: PUSH
68388: EMPTY
68389: LIST
68390: LIST
68391: PUSH
68392: LD_INT 2
68394: PUSH
68395: LD_INT 2
68397: PUSH
68398: EMPTY
68399: LIST
68400: LIST
68401: PUSH
68402: LD_INT 4
68404: PUSH
68405: LD_INT 2
68407: PUSH
68408: EMPTY
68409: LIST
68410: LIST
68411: PUSH
68412: LD_INT 2
68414: PUSH
68415: LD_INT 4
68417: PUSH
68418: EMPTY
68419: LIST
68420: LIST
68421: PUSH
68422: LD_INT 0
68424: PUSH
68425: LD_INT 4
68427: PUSH
68428: EMPTY
68429: LIST
68430: LIST
68431: PUSH
68432: LD_INT 0
68434: PUSH
68435: LD_INT 3
68437: PUSH
68438: EMPTY
68439: LIST
68440: LIST
68441: PUSH
68442: LD_INT 1
68444: PUSH
68445: LD_INT 4
68447: PUSH
68448: EMPTY
68449: LIST
68450: LIST
68451: PUSH
68452: LD_INT 1
68454: PUSH
68455: LD_INT 5
68457: PUSH
68458: EMPTY
68459: LIST
68460: LIST
68461: PUSH
68462: LD_INT 0
68464: PUSH
68465: LD_INT 5
68467: PUSH
68468: EMPTY
68469: LIST
68470: LIST
68471: PUSH
68472: LD_INT 1
68474: NEG
68475: PUSH
68476: LD_INT 4
68478: PUSH
68479: EMPTY
68480: LIST
68481: LIST
68482: PUSH
68483: LD_INT 1
68485: NEG
68486: PUSH
68487: LD_INT 3
68489: PUSH
68490: EMPTY
68491: LIST
68492: LIST
68493: PUSH
68494: LD_INT 2
68496: PUSH
68497: LD_INT 5
68499: PUSH
68500: EMPTY
68501: LIST
68502: LIST
68503: PUSH
68504: LD_INT 2
68506: NEG
68507: PUSH
68508: LD_INT 3
68510: PUSH
68511: EMPTY
68512: LIST
68513: LIST
68514: PUSH
68515: LD_INT 3
68517: NEG
68518: PUSH
68519: LD_INT 0
68521: PUSH
68522: EMPTY
68523: LIST
68524: LIST
68525: PUSH
68526: LD_INT 3
68528: NEG
68529: PUSH
68530: LD_INT 1
68532: NEG
68533: PUSH
68534: EMPTY
68535: LIST
68536: LIST
68537: PUSH
68538: LD_INT 2
68540: NEG
68541: PUSH
68542: LD_INT 0
68544: PUSH
68545: EMPTY
68546: LIST
68547: LIST
68548: PUSH
68549: LD_INT 2
68551: NEG
68552: PUSH
68553: LD_INT 1
68555: PUSH
68556: EMPTY
68557: LIST
68558: LIST
68559: PUSH
68560: LD_INT 3
68562: NEG
68563: PUSH
68564: LD_INT 1
68566: PUSH
68567: EMPTY
68568: LIST
68569: LIST
68570: PUSH
68571: LD_INT 4
68573: NEG
68574: PUSH
68575: LD_INT 0
68577: PUSH
68578: EMPTY
68579: LIST
68580: LIST
68581: PUSH
68582: LD_INT 4
68584: NEG
68585: PUSH
68586: LD_INT 1
68588: NEG
68589: PUSH
68590: EMPTY
68591: LIST
68592: LIST
68593: PUSH
68594: LD_INT 4
68596: NEG
68597: PUSH
68598: LD_INT 2
68600: NEG
68601: PUSH
68602: EMPTY
68603: LIST
68604: LIST
68605: PUSH
68606: LD_INT 2
68608: NEG
68609: PUSH
68610: LD_INT 2
68612: PUSH
68613: EMPTY
68614: LIST
68615: LIST
68616: PUSH
68617: LD_INT 4
68619: NEG
68620: PUSH
68621: LD_INT 4
68623: NEG
68624: PUSH
68625: EMPTY
68626: LIST
68627: LIST
68628: PUSH
68629: LD_INT 4
68631: NEG
68632: PUSH
68633: LD_INT 5
68635: NEG
68636: PUSH
68637: EMPTY
68638: LIST
68639: LIST
68640: PUSH
68641: LD_INT 3
68643: NEG
68644: PUSH
68645: LD_INT 4
68647: NEG
68648: PUSH
68649: EMPTY
68650: LIST
68651: LIST
68652: PUSH
68653: LD_INT 3
68655: NEG
68656: PUSH
68657: LD_INT 3
68659: NEG
68660: PUSH
68661: EMPTY
68662: LIST
68663: LIST
68664: PUSH
68665: LD_INT 4
68667: NEG
68668: PUSH
68669: LD_INT 3
68671: NEG
68672: PUSH
68673: EMPTY
68674: LIST
68675: LIST
68676: PUSH
68677: LD_INT 5
68679: NEG
68680: PUSH
68681: LD_INT 4
68683: NEG
68684: PUSH
68685: EMPTY
68686: LIST
68687: LIST
68688: PUSH
68689: LD_INT 5
68691: NEG
68692: PUSH
68693: LD_INT 5
68695: NEG
68696: PUSH
68697: EMPTY
68698: LIST
68699: LIST
68700: PUSH
68701: LD_INT 3
68703: NEG
68704: PUSH
68705: LD_INT 5
68707: NEG
68708: PUSH
68709: EMPTY
68710: LIST
68711: LIST
68712: PUSH
68713: LD_INT 5
68715: NEG
68716: PUSH
68717: LD_INT 3
68719: NEG
68720: PUSH
68721: EMPTY
68722: LIST
68723: LIST
68724: PUSH
68725: EMPTY
68726: LIST
68727: LIST
68728: LIST
68729: LIST
68730: LIST
68731: LIST
68732: LIST
68733: LIST
68734: LIST
68735: LIST
68736: LIST
68737: LIST
68738: LIST
68739: LIST
68740: LIST
68741: LIST
68742: LIST
68743: LIST
68744: LIST
68745: LIST
68746: LIST
68747: LIST
68748: LIST
68749: LIST
68750: LIST
68751: LIST
68752: LIST
68753: LIST
68754: LIST
68755: LIST
68756: LIST
68757: LIST
68758: LIST
68759: LIST
68760: LIST
68761: LIST
68762: LIST
68763: LIST
68764: LIST
68765: LIST
68766: LIST
68767: LIST
68768: LIST
68769: LIST
68770: LIST
68771: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
68772: LD_ADDR_VAR 0 30
68776: PUSH
68777: LD_INT 4
68779: PUSH
68780: LD_INT 4
68782: PUSH
68783: EMPTY
68784: LIST
68785: LIST
68786: PUSH
68787: LD_INT 4
68789: PUSH
68790: LD_INT 3
68792: PUSH
68793: EMPTY
68794: LIST
68795: LIST
68796: PUSH
68797: LD_INT 5
68799: PUSH
68800: LD_INT 4
68802: PUSH
68803: EMPTY
68804: LIST
68805: LIST
68806: PUSH
68807: LD_INT 5
68809: PUSH
68810: LD_INT 5
68812: PUSH
68813: EMPTY
68814: LIST
68815: LIST
68816: PUSH
68817: LD_INT 4
68819: PUSH
68820: LD_INT 5
68822: PUSH
68823: EMPTY
68824: LIST
68825: LIST
68826: PUSH
68827: LD_INT 3
68829: PUSH
68830: LD_INT 4
68832: PUSH
68833: EMPTY
68834: LIST
68835: LIST
68836: PUSH
68837: LD_INT 3
68839: PUSH
68840: LD_INT 3
68842: PUSH
68843: EMPTY
68844: LIST
68845: LIST
68846: PUSH
68847: LD_INT 5
68849: PUSH
68850: LD_INT 3
68852: PUSH
68853: EMPTY
68854: LIST
68855: LIST
68856: PUSH
68857: LD_INT 3
68859: PUSH
68860: LD_INT 5
68862: PUSH
68863: EMPTY
68864: LIST
68865: LIST
68866: PUSH
68867: LD_INT 0
68869: PUSH
68870: LD_INT 3
68872: PUSH
68873: EMPTY
68874: LIST
68875: LIST
68876: PUSH
68877: LD_INT 0
68879: PUSH
68880: LD_INT 2
68882: PUSH
68883: EMPTY
68884: LIST
68885: LIST
68886: PUSH
68887: LD_INT 1
68889: PUSH
68890: LD_INT 3
68892: PUSH
68893: EMPTY
68894: LIST
68895: LIST
68896: PUSH
68897: LD_INT 1
68899: PUSH
68900: LD_INT 4
68902: PUSH
68903: EMPTY
68904: LIST
68905: LIST
68906: PUSH
68907: LD_INT 0
68909: PUSH
68910: LD_INT 4
68912: PUSH
68913: EMPTY
68914: LIST
68915: LIST
68916: PUSH
68917: LD_INT 1
68919: NEG
68920: PUSH
68921: LD_INT 3
68923: PUSH
68924: EMPTY
68925: LIST
68926: LIST
68927: PUSH
68928: LD_INT 1
68930: NEG
68931: PUSH
68932: LD_INT 2
68934: PUSH
68935: EMPTY
68936: LIST
68937: LIST
68938: PUSH
68939: LD_INT 2
68941: PUSH
68942: LD_INT 4
68944: PUSH
68945: EMPTY
68946: LIST
68947: LIST
68948: PUSH
68949: LD_INT 2
68951: NEG
68952: PUSH
68953: LD_INT 2
68955: PUSH
68956: EMPTY
68957: LIST
68958: LIST
68959: PUSH
68960: LD_INT 4
68962: NEG
68963: PUSH
68964: LD_INT 0
68966: PUSH
68967: EMPTY
68968: LIST
68969: LIST
68970: PUSH
68971: LD_INT 4
68973: NEG
68974: PUSH
68975: LD_INT 1
68977: NEG
68978: PUSH
68979: EMPTY
68980: LIST
68981: LIST
68982: PUSH
68983: LD_INT 3
68985: NEG
68986: PUSH
68987: LD_INT 0
68989: PUSH
68990: EMPTY
68991: LIST
68992: LIST
68993: PUSH
68994: LD_INT 3
68996: NEG
68997: PUSH
68998: LD_INT 1
69000: PUSH
69001: EMPTY
69002: LIST
69003: LIST
69004: PUSH
69005: LD_INT 4
69007: NEG
69008: PUSH
69009: LD_INT 1
69011: PUSH
69012: EMPTY
69013: LIST
69014: LIST
69015: PUSH
69016: LD_INT 5
69018: NEG
69019: PUSH
69020: LD_INT 0
69022: PUSH
69023: EMPTY
69024: LIST
69025: LIST
69026: PUSH
69027: LD_INT 5
69029: NEG
69030: PUSH
69031: LD_INT 1
69033: NEG
69034: PUSH
69035: EMPTY
69036: LIST
69037: LIST
69038: PUSH
69039: LD_INT 5
69041: NEG
69042: PUSH
69043: LD_INT 2
69045: NEG
69046: PUSH
69047: EMPTY
69048: LIST
69049: LIST
69050: PUSH
69051: LD_INT 3
69053: NEG
69054: PUSH
69055: LD_INT 2
69057: PUSH
69058: EMPTY
69059: LIST
69060: LIST
69061: PUSH
69062: LD_INT 3
69064: NEG
69065: PUSH
69066: LD_INT 3
69068: NEG
69069: PUSH
69070: EMPTY
69071: LIST
69072: LIST
69073: PUSH
69074: LD_INT 3
69076: NEG
69077: PUSH
69078: LD_INT 4
69080: NEG
69081: PUSH
69082: EMPTY
69083: LIST
69084: LIST
69085: PUSH
69086: LD_INT 2
69088: NEG
69089: PUSH
69090: LD_INT 3
69092: NEG
69093: PUSH
69094: EMPTY
69095: LIST
69096: LIST
69097: PUSH
69098: LD_INT 2
69100: NEG
69101: PUSH
69102: LD_INT 2
69104: NEG
69105: PUSH
69106: EMPTY
69107: LIST
69108: LIST
69109: PUSH
69110: LD_INT 3
69112: NEG
69113: PUSH
69114: LD_INT 2
69116: NEG
69117: PUSH
69118: EMPTY
69119: LIST
69120: LIST
69121: PUSH
69122: LD_INT 4
69124: NEG
69125: PUSH
69126: LD_INT 3
69128: NEG
69129: PUSH
69130: EMPTY
69131: LIST
69132: LIST
69133: PUSH
69134: LD_INT 4
69136: NEG
69137: PUSH
69138: LD_INT 4
69140: NEG
69141: PUSH
69142: EMPTY
69143: LIST
69144: LIST
69145: PUSH
69146: LD_INT 2
69148: NEG
69149: PUSH
69150: LD_INT 4
69152: NEG
69153: PUSH
69154: EMPTY
69155: LIST
69156: LIST
69157: PUSH
69158: LD_INT 4
69160: NEG
69161: PUSH
69162: LD_INT 2
69164: NEG
69165: PUSH
69166: EMPTY
69167: LIST
69168: LIST
69169: PUSH
69170: LD_INT 0
69172: PUSH
69173: LD_INT 4
69175: NEG
69176: PUSH
69177: EMPTY
69178: LIST
69179: LIST
69180: PUSH
69181: LD_INT 0
69183: PUSH
69184: LD_INT 5
69186: NEG
69187: PUSH
69188: EMPTY
69189: LIST
69190: LIST
69191: PUSH
69192: LD_INT 1
69194: PUSH
69195: LD_INT 4
69197: NEG
69198: PUSH
69199: EMPTY
69200: LIST
69201: LIST
69202: PUSH
69203: LD_INT 1
69205: PUSH
69206: LD_INT 3
69208: NEG
69209: PUSH
69210: EMPTY
69211: LIST
69212: LIST
69213: PUSH
69214: LD_INT 0
69216: PUSH
69217: LD_INT 3
69219: NEG
69220: PUSH
69221: EMPTY
69222: LIST
69223: LIST
69224: PUSH
69225: LD_INT 1
69227: NEG
69228: PUSH
69229: LD_INT 4
69231: NEG
69232: PUSH
69233: EMPTY
69234: LIST
69235: LIST
69236: PUSH
69237: LD_INT 1
69239: NEG
69240: PUSH
69241: LD_INT 5
69243: NEG
69244: PUSH
69245: EMPTY
69246: LIST
69247: LIST
69248: PUSH
69249: LD_INT 2
69251: PUSH
69252: LD_INT 3
69254: NEG
69255: PUSH
69256: EMPTY
69257: LIST
69258: LIST
69259: PUSH
69260: LD_INT 2
69262: NEG
69263: PUSH
69264: LD_INT 5
69266: NEG
69267: PUSH
69268: EMPTY
69269: LIST
69270: LIST
69271: PUSH
69272: EMPTY
69273: LIST
69274: LIST
69275: LIST
69276: LIST
69277: LIST
69278: LIST
69279: LIST
69280: LIST
69281: LIST
69282: LIST
69283: LIST
69284: LIST
69285: LIST
69286: LIST
69287: LIST
69288: LIST
69289: LIST
69290: LIST
69291: LIST
69292: LIST
69293: LIST
69294: LIST
69295: LIST
69296: LIST
69297: LIST
69298: LIST
69299: LIST
69300: LIST
69301: LIST
69302: LIST
69303: LIST
69304: LIST
69305: LIST
69306: LIST
69307: LIST
69308: LIST
69309: LIST
69310: LIST
69311: LIST
69312: LIST
69313: LIST
69314: LIST
69315: LIST
69316: LIST
69317: LIST
69318: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
69319: LD_ADDR_VAR 0 31
69323: PUSH
69324: LD_INT 0
69326: PUSH
69327: LD_INT 4
69329: PUSH
69330: EMPTY
69331: LIST
69332: LIST
69333: PUSH
69334: LD_INT 0
69336: PUSH
69337: LD_INT 3
69339: PUSH
69340: EMPTY
69341: LIST
69342: LIST
69343: PUSH
69344: LD_INT 1
69346: PUSH
69347: LD_INT 4
69349: PUSH
69350: EMPTY
69351: LIST
69352: LIST
69353: PUSH
69354: LD_INT 1
69356: PUSH
69357: LD_INT 5
69359: PUSH
69360: EMPTY
69361: LIST
69362: LIST
69363: PUSH
69364: LD_INT 0
69366: PUSH
69367: LD_INT 5
69369: PUSH
69370: EMPTY
69371: LIST
69372: LIST
69373: PUSH
69374: LD_INT 1
69376: NEG
69377: PUSH
69378: LD_INT 4
69380: PUSH
69381: EMPTY
69382: LIST
69383: LIST
69384: PUSH
69385: LD_INT 1
69387: NEG
69388: PUSH
69389: LD_INT 3
69391: PUSH
69392: EMPTY
69393: LIST
69394: LIST
69395: PUSH
69396: LD_INT 2
69398: PUSH
69399: LD_INT 5
69401: PUSH
69402: EMPTY
69403: LIST
69404: LIST
69405: PUSH
69406: LD_INT 2
69408: NEG
69409: PUSH
69410: LD_INT 3
69412: PUSH
69413: EMPTY
69414: LIST
69415: LIST
69416: PUSH
69417: LD_INT 3
69419: NEG
69420: PUSH
69421: LD_INT 0
69423: PUSH
69424: EMPTY
69425: LIST
69426: LIST
69427: PUSH
69428: LD_INT 3
69430: NEG
69431: PUSH
69432: LD_INT 1
69434: NEG
69435: PUSH
69436: EMPTY
69437: LIST
69438: LIST
69439: PUSH
69440: LD_INT 2
69442: NEG
69443: PUSH
69444: LD_INT 0
69446: PUSH
69447: EMPTY
69448: LIST
69449: LIST
69450: PUSH
69451: LD_INT 2
69453: NEG
69454: PUSH
69455: LD_INT 1
69457: PUSH
69458: EMPTY
69459: LIST
69460: LIST
69461: PUSH
69462: LD_INT 3
69464: NEG
69465: PUSH
69466: LD_INT 1
69468: PUSH
69469: EMPTY
69470: LIST
69471: LIST
69472: PUSH
69473: LD_INT 4
69475: NEG
69476: PUSH
69477: LD_INT 0
69479: PUSH
69480: EMPTY
69481: LIST
69482: LIST
69483: PUSH
69484: LD_INT 4
69486: NEG
69487: PUSH
69488: LD_INT 1
69490: NEG
69491: PUSH
69492: EMPTY
69493: LIST
69494: LIST
69495: PUSH
69496: LD_INT 4
69498: NEG
69499: PUSH
69500: LD_INT 2
69502: NEG
69503: PUSH
69504: EMPTY
69505: LIST
69506: LIST
69507: PUSH
69508: LD_INT 2
69510: NEG
69511: PUSH
69512: LD_INT 2
69514: PUSH
69515: EMPTY
69516: LIST
69517: LIST
69518: PUSH
69519: LD_INT 4
69521: NEG
69522: PUSH
69523: LD_INT 4
69525: NEG
69526: PUSH
69527: EMPTY
69528: LIST
69529: LIST
69530: PUSH
69531: LD_INT 4
69533: NEG
69534: PUSH
69535: LD_INT 5
69537: NEG
69538: PUSH
69539: EMPTY
69540: LIST
69541: LIST
69542: PUSH
69543: LD_INT 3
69545: NEG
69546: PUSH
69547: LD_INT 4
69549: NEG
69550: PUSH
69551: EMPTY
69552: LIST
69553: LIST
69554: PUSH
69555: LD_INT 3
69557: NEG
69558: PUSH
69559: LD_INT 3
69561: NEG
69562: PUSH
69563: EMPTY
69564: LIST
69565: LIST
69566: PUSH
69567: LD_INT 4
69569: NEG
69570: PUSH
69571: LD_INT 3
69573: NEG
69574: PUSH
69575: EMPTY
69576: LIST
69577: LIST
69578: PUSH
69579: LD_INT 5
69581: NEG
69582: PUSH
69583: LD_INT 4
69585: NEG
69586: PUSH
69587: EMPTY
69588: LIST
69589: LIST
69590: PUSH
69591: LD_INT 5
69593: NEG
69594: PUSH
69595: LD_INT 5
69597: NEG
69598: PUSH
69599: EMPTY
69600: LIST
69601: LIST
69602: PUSH
69603: LD_INT 3
69605: NEG
69606: PUSH
69607: LD_INT 5
69609: NEG
69610: PUSH
69611: EMPTY
69612: LIST
69613: LIST
69614: PUSH
69615: LD_INT 5
69617: NEG
69618: PUSH
69619: LD_INT 3
69621: NEG
69622: PUSH
69623: EMPTY
69624: LIST
69625: LIST
69626: PUSH
69627: LD_INT 0
69629: PUSH
69630: LD_INT 3
69632: NEG
69633: PUSH
69634: EMPTY
69635: LIST
69636: LIST
69637: PUSH
69638: LD_INT 0
69640: PUSH
69641: LD_INT 4
69643: NEG
69644: PUSH
69645: EMPTY
69646: LIST
69647: LIST
69648: PUSH
69649: LD_INT 1
69651: PUSH
69652: LD_INT 3
69654: NEG
69655: PUSH
69656: EMPTY
69657: LIST
69658: LIST
69659: PUSH
69660: LD_INT 1
69662: PUSH
69663: LD_INT 2
69665: NEG
69666: PUSH
69667: EMPTY
69668: LIST
69669: LIST
69670: PUSH
69671: LD_INT 0
69673: PUSH
69674: LD_INT 2
69676: NEG
69677: PUSH
69678: EMPTY
69679: LIST
69680: LIST
69681: PUSH
69682: LD_INT 1
69684: NEG
69685: PUSH
69686: LD_INT 3
69688: NEG
69689: PUSH
69690: EMPTY
69691: LIST
69692: LIST
69693: PUSH
69694: LD_INT 1
69696: NEG
69697: PUSH
69698: LD_INT 4
69700: NEG
69701: PUSH
69702: EMPTY
69703: LIST
69704: LIST
69705: PUSH
69706: LD_INT 2
69708: PUSH
69709: LD_INT 2
69711: NEG
69712: PUSH
69713: EMPTY
69714: LIST
69715: LIST
69716: PUSH
69717: LD_INT 2
69719: NEG
69720: PUSH
69721: LD_INT 4
69723: NEG
69724: PUSH
69725: EMPTY
69726: LIST
69727: LIST
69728: PUSH
69729: LD_INT 4
69731: PUSH
69732: LD_INT 0
69734: PUSH
69735: EMPTY
69736: LIST
69737: LIST
69738: PUSH
69739: LD_INT 4
69741: PUSH
69742: LD_INT 1
69744: NEG
69745: PUSH
69746: EMPTY
69747: LIST
69748: LIST
69749: PUSH
69750: LD_INT 5
69752: PUSH
69753: LD_INT 0
69755: PUSH
69756: EMPTY
69757: LIST
69758: LIST
69759: PUSH
69760: LD_INT 5
69762: PUSH
69763: LD_INT 1
69765: PUSH
69766: EMPTY
69767: LIST
69768: LIST
69769: PUSH
69770: LD_INT 4
69772: PUSH
69773: LD_INT 1
69775: PUSH
69776: EMPTY
69777: LIST
69778: LIST
69779: PUSH
69780: LD_INT 3
69782: PUSH
69783: LD_INT 0
69785: PUSH
69786: EMPTY
69787: LIST
69788: LIST
69789: PUSH
69790: LD_INT 3
69792: PUSH
69793: LD_INT 1
69795: NEG
69796: PUSH
69797: EMPTY
69798: LIST
69799: LIST
69800: PUSH
69801: LD_INT 3
69803: PUSH
69804: LD_INT 2
69806: NEG
69807: PUSH
69808: EMPTY
69809: LIST
69810: LIST
69811: PUSH
69812: LD_INT 5
69814: PUSH
69815: LD_INT 2
69817: PUSH
69818: EMPTY
69819: LIST
69820: LIST
69821: PUSH
69822: EMPTY
69823: LIST
69824: LIST
69825: LIST
69826: LIST
69827: LIST
69828: LIST
69829: LIST
69830: LIST
69831: LIST
69832: LIST
69833: LIST
69834: LIST
69835: LIST
69836: LIST
69837: LIST
69838: LIST
69839: LIST
69840: LIST
69841: LIST
69842: LIST
69843: LIST
69844: LIST
69845: LIST
69846: LIST
69847: LIST
69848: LIST
69849: LIST
69850: LIST
69851: LIST
69852: LIST
69853: LIST
69854: LIST
69855: LIST
69856: LIST
69857: LIST
69858: LIST
69859: LIST
69860: LIST
69861: LIST
69862: LIST
69863: LIST
69864: LIST
69865: LIST
69866: LIST
69867: LIST
69868: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
69869: LD_ADDR_VAR 0 32
69873: PUSH
69874: LD_INT 4
69876: NEG
69877: PUSH
69878: LD_INT 0
69880: PUSH
69881: EMPTY
69882: LIST
69883: LIST
69884: PUSH
69885: LD_INT 4
69887: NEG
69888: PUSH
69889: LD_INT 1
69891: NEG
69892: PUSH
69893: EMPTY
69894: LIST
69895: LIST
69896: PUSH
69897: LD_INT 3
69899: NEG
69900: PUSH
69901: LD_INT 0
69903: PUSH
69904: EMPTY
69905: LIST
69906: LIST
69907: PUSH
69908: LD_INT 3
69910: NEG
69911: PUSH
69912: LD_INT 1
69914: PUSH
69915: EMPTY
69916: LIST
69917: LIST
69918: PUSH
69919: LD_INT 4
69921: NEG
69922: PUSH
69923: LD_INT 1
69925: PUSH
69926: EMPTY
69927: LIST
69928: LIST
69929: PUSH
69930: LD_INT 5
69932: NEG
69933: PUSH
69934: LD_INT 0
69936: PUSH
69937: EMPTY
69938: LIST
69939: LIST
69940: PUSH
69941: LD_INT 5
69943: NEG
69944: PUSH
69945: LD_INT 1
69947: NEG
69948: PUSH
69949: EMPTY
69950: LIST
69951: LIST
69952: PUSH
69953: LD_INT 5
69955: NEG
69956: PUSH
69957: LD_INT 2
69959: NEG
69960: PUSH
69961: EMPTY
69962: LIST
69963: LIST
69964: PUSH
69965: LD_INT 3
69967: NEG
69968: PUSH
69969: LD_INT 2
69971: PUSH
69972: EMPTY
69973: LIST
69974: LIST
69975: PUSH
69976: LD_INT 3
69978: NEG
69979: PUSH
69980: LD_INT 3
69982: NEG
69983: PUSH
69984: EMPTY
69985: LIST
69986: LIST
69987: PUSH
69988: LD_INT 3
69990: NEG
69991: PUSH
69992: LD_INT 4
69994: NEG
69995: PUSH
69996: EMPTY
69997: LIST
69998: LIST
69999: PUSH
70000: LD_INT 2
70002: NEG
70003: PUSH
70004: LD_INT 3
70006: NEG
70007: PUSH
70008: EMPTY
70009: LIST
70010: LIST
70011: PUSH
70012: LD_INT 2
70014: NEG
70015: PUSH
70016: LD_INT 2
70018: NEG
70019: PUSH
70020: EMPTY
70021: LIST
70022: LIST
70023: PUSH
70024: LD_INT 3
70026: NEG
70027: PUSH
70028: LD_INT 2
70030: NEG
70031: PUSH
70032: EMPTY
70033: LIST
70034: LIST
70035: PUSH
70036: LD_INT 4
70038: NEG
70039: PUSH
70040: LD_INT 3
70042: NEG
70043: PUSH
70044: EMPTY
70045: LIST
70046: LIST
70047: PUSH
70048: LD_INT 4
70050: NEG
70051: PUSH
70052: LD_INT 4
70054: NEG
70055: PUSH
70056: EMPTY
70057: LIST
70058: LIST
70059: PUSH
70060: LD_INT 2
70062: NEG
70063: PUSH
70064: LD_INT 4
70066: NEG
70067: PUSH
70068: EMPTY
70069: LIST
70070: LIST
70071: PUSH
70072: LD_INT 4
70074: NEG
70075: PUSH
70076: LD_INT 2
70078: NEG
70079: PUSH
70080: EMPTY
70081: LIST
70082: LIST
70083: PUSH
70084: LD_INT 0
70086: PUSH
70087: LD_INT 4
70089: NEG
70090: PUSH
70091: EMPTY
70092: LIST
70093: LIST
70094: PUSH
70095: LD_INT 0
70097: PUSH
70098: LD_INT 5
70100: NEG
70101: PUSH
70102: EMPTY
70103: LIST
70104: LIST
70105: PUSH
70106: LD_INT 1
70108: PUSH
70109: LD_INT 4
70111: NEG
70112: PUSH
70113: EMPTY
70114: LIST
70115: LIST
70116: PUSH
70117: LD_INT 1
70119: PUSH
70120: LD_INT 3
70122: NEG
70123: PUSH
70124: EMPTY
70125: LIST
70126: LIST
70127: PUSH
70128: LD_INT 0
70130: PUSH
70131: LD_INT 3
70133: NEG
70134: PUSH
70135: EMPTY
70136: LIST
70137: LIST
70138: PUSH
70139: LD_INT 1
70141: NEG
70142: PUSH
70143: LD_INT 4
70145: NEG
70146: PUSH
70147: EMPTY
70148: LIST
70149: LIST
70150: PUSH
70151: LD_INT 1
70153: NEG
70154: PUSH
70155: LD_INT 5
70157: NEG
70158: PUSH
70159: EMPTY
70160: LIST
70161: LIST
70162: PUSH
70163: LD_INT 2
70165: PUSH
70166: LD_INT 3
70168: NEG
70169: PUSH
70170: EMPTY
70171: LIST
70172: LIST
70173: PUSH
70174: LD_INT 2
70176: NEG
70177: PUSH
70178: LD_INT 5
70180: NEG
70181: PUSH
70182: EMPTY
70183: LIST
70184: LIST
70185: PUSH
70186: LD_INT 3
70188: PUSH
70189: LD_INT 0
70191: PUSH
70192: EMPTY
70193: LIST
70194: LIST
70195: PUSH
70196: LD_INT 3
70198: PUSH
70199: LD_INT 1
70201: NEG
70202: PUSH
70203: EMPTY
70204: LIST
70205: LIST
70206: PUSH
70207: LD_INT 4
70209: PUSH
70210: LD_INT 0
70212: PUSH
70213: EMPTY
70214: LIST
70215: LIST
70216: PUSH
70217: LD_INT 4
70219: PUSH
70220: LD_INT 1
70222: PUSH
70223: EMPTY
70224: LIST
70225: LIST
70226: PUSH
70227: LD_INT 3
70229: PUSH
70230: LD_INT 1
70232: PUSH
70233: EMPTY
70234: LIST
70235: LIST
70236: PUSH
70237: LD_INT 2
70239: PUSH
70240: LD_INT 0
70242: PUSH
70243: EMPTY
70244: LIST
70245: LIST
70246: PUSH
70247: LD_INT 2
70249: PUSH
70250: LD_INT 1
70252: NEG
70253: PUSH
70254: EMPTY
70255: LIST
70256: LIST
70257: PUSH
70258: LD_INT 2
70260: PUSH
70261: LD_INT 2
70263: NEG
70264: PUSH
70265: EMPTY
70266: LIST
70267: LIST
70268: PUSH
70269: LD_INT 4
70271: PUSH
70272: LD_INT 2
70274: PUSH
70275: EMPTY
70276: LIST
70277: LIST
70278: PUSH
70279: LD_INT 4
70281: PUSH
70282: LD_INT 4
70284: PUSH
70285: EMPTY
70286: LIST
70287: LIST
70288: PUSH
70289: LD_INT 4
70291: PUSH
70292: LD_INT 3
70294: PUSH
70295: EMPTY
70296: LIST
70297: LIST
70298: PUSH
70299: LD_INT 5
70301: PUSH
70302: LD_INT 4
70304: PUSH
70305: EMPTY
70306: LIST
70307: LIST
70308: PUSH
70309: LD_INT 5
70311: PUSH
70312: LD_INT 5
70314: PUSH
70315: EMPTY
70316: LIST
70317: LIST
70318: PUSH
70319: LD_INT 4
70321: PUSH
70322: LD_INT 5
70324: PUSH
70325: EMPTY
70326: LIST
70327: LIST
70328: PUSH
70329: LD_INT 3
70331: PUSH
70332: LD_INT 4
70334: PUSH
70335: EMPTY
70336: LIST
70337: LIST
70338: PUSH
70339: LD_INT 3
70341: PUSH
70342: LD_INT 3
70344: PUSH
70345: EMPTY
70346: LIST
70347: LIST
70348: PUSH
70349: LD_INT 5
70351: PUSH
70352: LD_INT 3
70354: PUSH
70355: EMPTY
70356: LIST
70357: LIST
70358: PUSH
70359: LD_INT 3
70361: PUSH
70362: LD_INT 5
70364: PUSH
70365: EMPTY
70366: LIST
70367: LIST
70368: PUSH
70369: EMPTY
70370: LIST
70371: LIST
70372: LIST
70373: LIST
70374: LIST
70375: LIST
70376: LIST
70377: LIST
70378: LIST
70379: LIST
70380: LIST
70381: LIST
70382: LIST
70383: LIST
70384: LIST
70385: LIST
70386: LIST
70387: LIST
70388: LIST
70389: LIST
70390: LIST
70391: LIST
70392: LIST
70393: LIST
70394: LIST
70395: LIST
70396: LIST
70397: LIST
70398: LIST
70399: LIST
70400: LIST
70401: LIST
70402: LIST
70403: LIST
70404: LIST
70405: LIST
70406: LIST
70407: LIST
70408: LIST
70409: LIST
70410: LIST
70411: LIST
70412: LIST
70413: LIST
70414: LIST
70415: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
70416: LD_ADDR_VAR 0 33
70420: PUSH
70421: LD_INT 4
70423: NEG
70424: PUSH
70425: LD_INT 4
70427: NEG
70428: PUSH
70429: EMPTY
70430: LIST
70431: LIST
70432: PUSH
70433: LD_INT 4
70435: NEG
70436: PUSH
70437: LD_INT 5
70439: NEG
70440: PUSH
70441: EMPTY
70442: LIST
70443: LIST
70444: PUSH
70445: LD_INT 3
70447: NEG
70448: PUSH
70449: LD_INT 4
70451: NEG
70452: PUSH
70453: EMPTY
70454: LIST
70455: LIST
70456: PUSH
70457: LD_INT 3
70459: NEG
70460: PUSH
70461: LD_INT 3
70463: NEG
70464: PUSH
70465: EMPTY
70466: LIST
70467: LIST
70468: PUSH
70469: LD_INT 4
70471: NEG
70472: PUSH
70473: LD_INT 3
70475: NEG
70476: PUSH
70477: EMPTY
70478: LIST
70479: LIST
70480: PUSH
70481: LD_INT 5
70483: NEG
70484: PUSH
70485: LD_INT 4
70487: NEG
70488: PUSH
70489: EMPTY
70490: LIST
70491: LIST
70492: PUSH
70493: LD_INT 5
70495: NEG
70496: PUSH
70497: LD_INT 5
70499: NEG
70500: PUSH
70501: EMPTY
70502: LIST
70503: LIST
70504: PUSH
70505: LD_INT 3
70507: NEG
70508: PUSH
70509: LD_INT 5
70511: NEG
70512: PUSH
70513: EMPTY
70514: LIST
70515: LIST
70516: PUSH
70517: LD_INT 5
70519: NEG
70520: PUSH
70521: LD_INT 3
70523: NEG
70524: PUSH
70525: EMPTY
70526: LIST
70527: LIST
70528: PUSH
70529: LD_INT 0
70531: PUSH
70532: LD_INT 3
70534: NEG
70535: PUSH
70536: EMPTY
70537: LIST
70538: LIST
70539: PUSH
70540: LD_INT 0
70542: PUSH
70543: LD_INT 4
70545: NEG
70546: PUSH
70547: EMPTY
70548: LIST
70549: LIST
70550: PUSH
70551: LD_INT 1
70553: PUSH
70554: LD_INT 3
70556: NEG
70557: PUSH
70558: EMPTY
70559: LIST
70560: LIST
70561: PUSH
70562: LD_INT 1
70564: PUSH
70565: LD_INT 2
70567: NEG
70568: PUSH
70569: EMPTY
70570: LIST
70571: LIST
70572: PUSH
70573: LD_INT 0
70575: PUSH
70576: LD_INT 2
70578: NEG
70579: PUSH
70580: EMPTY
70581: LIST
70582: LIST
70583: PUSH
70584: LD_INT 1
70586: NEG
70587: PUSH
70588: LD_INT 3
70590: NEG
70591: PUSH
70592: EMPTY
70593: LIST
70594: LIST
70595: PUSH
70596: LD_INT 1
70598: NEG
70599: PUSH
70600: LD_INT 4
70602: NEG
70603: PUSH
70604: EMPTY
70605: LIST
70606: LIST
70607: PUSH
70608: LD_INT 2
70610: PUSH
70611: LD_INT 2
70613: NEG
70614: PUSH
70615: EMPTY
70616: LIST
70617: LIST
70618: PUSH
70619: LD_INT 2
70621: NEG
70622: PUSH
70623: LD_INT 4
70625: NEG
70626: PUSH
70627: EMPTY
70628: LIST
70629: LIST
70630: PUSH
70631: LD_INT 4
70633: PUSH
70634: LD_INT 0
70636: PUSH
70637: EMPTY
70638: LIST
70639: LIST
70640: PUSH
70641: LD_INT 4
70643: PUSH
70644: LD_INT 1
70646: NEG
70647: PUSH
70648: EMPTY
70649: LIST
70650: LIST
70651: PUSH
70652: LD_INT 5
70654: PUSH
70655: LD_INT 0
70657: PUSH
70658: EMPTY
70659: LIST
70660: LIST
70661: PUSH
70662: LD_INT 5
70664: PUSH
70665: LD_INT 1
70667: PUSH
70668: EMPTY
70669: LIST
70670: LIST
70671: PUSH
70672: LD_INT 4
70674: PUSH
70675: LD_INT 1
70677: PUSH
70678: EMPTY
70679: LIST
70680: LIST
70681: PUSH
70682: LD_INT 3
70684: PUSH
70685: LD_INT 0
70687: PUSH
70688: EMPTY
70689: LIST
70690: LIST
70691: PUSH
70692: LD_INT 3
70694: PUSH
70695: LD_INT 1
70697: NEG
70698: PUSH
70699: EMPTY
70700: LIST
70701: LIST
70702: PUSH
70703: LD_INT 3
70705: PUSH
70706: LD_INT 2
70708: NEG
70709: PUSH
70710: EMPTY
70711: LIST
70712: LIST
70713: PUSH
70714: LD_INT 5
70716: PUSH
70717: LD_INT 2
70719: PUSH
70720: EMPTY
70721: LIST
70722: LIST
70723: PUSH
70724: LD_INT 3
70726: PUSH
70727: LD_INT 3
70729: PUSH
70730: EMPTY
70731: LIST
70732: LIST
70733: PUSH
70734: LD_INT 3
70736: PUSH
70737: LD_INT 2
70739: PUSH
70740: EMPTY
70741: LIST
70742: LIST
70743: PUSH
70744: LD_INT 4
70746: PUSH
70747: LD_INT 3
70749: PUSH
70750: EMPTY
70751: LIST
70752: LIST
70753: PUSH
70754: LD_INT 4
70756: PUSH
70757: LD_INT 4
70759: PUSH
70760: EMPTY
70761: LIST
70762: LIST
70763: PUSH
70764: LD_INT 3
70766: PUSH
70767: LD_INT 4
70769: PUSH
70770: EMPTY
70771: LIST
70772: LIST
70773: PUSH
70774: LD_INT 2
70776: PUSH
70777: LD_INT 3
70779: PUSH
70780: EMPTY
70781: LIST
70782: LIST
70783: PUSH
70784: LD_INT 2
70786: PUSH
70787: LD_INT 2
70789: PUSH
70790: EMPTY
70791: LIST
70792: LIST
70793: PUSH
70794: LD_INT 4
70796: PUSH
70797: LD_INT 2
70799: PUSH
70800: EMPTY
70801: LIST
70802: LIST
70803: PUSH
70804: LD_INT 2
70806: PUSH
70807: LD_INT 4
70809: PUSH
70810: EMPTY
70811: LIST
70812: LIST
70813: PUSH
70814: LD_INT 0
70816: PUSH
70817: LD_INT 4
70819: PUSH
70820: EMPTY
70821: LIST
70822: LIST
70823: PUSH
70824: LD_INT 0
70826: PUSH
70827: LD_INT 3
70829: PUSH
70830: EMPTY
70831: LIST
70832: LIST
70833: PUSH
70834: LD_INT 1
70836: PUSH
70837: LD_INT 4
70839: PUSH
70840: EMPTY
70841: LIST
70842: LIST
70843: PUSH
70844: LD_INT 1
70846: PUSH
70847: LD_INT 5
70849: PUSH
70850: EMPTY
70851: LIST
70852: LIST
70853: PUSH
70854: LD_INT 0
70856: PUSH
70857: LD_INT 5
70859: PUSH
70860: EMPTY
70861: LIST
70862: LIST
70863: PUSH
70864: LD_INT 1
70866: NEG
70867: PUSH
70868: LD_INT 4
70870: PUSH
70871: EMPTY
70872: LIST
70873: LIST
70874: PUSH
70875: LD_INT 1
70877: NEG
70878: PUSH
70879: LD_INT 3
70881: PUSH
70882: EMPTY
70883: LIST
70884: LIST
70885: PUSH
70886: LD_INT 2
70888: PUSH
70889: LD_INT 5
70891: PUSH
70892: EMPTY
70893: LIST
70894: LIST
70895: PUSH
70896: LD_INT 2
70898: NEG
70899: PUSH
70900: LD_INT 3
70902: PUSH
70903: EMPTY
70904: LIST
70905: LIST
70906: PUSH
70907: EMPTY
70908: LIST
70909: LIST
70910: LIST
70911: LIST
70912: LIST
70913: LIST
70914: LIST
70915: LIST
70916: LIST
70917: LIST
70918: LIST
70919: LIST
70920: LIST
70921: LIST
70922: LIST
70923: LIST
70924: LIST
70925: LIST
70926: LIST
70927: LIST
70928: LIST
70929: LIST
70930: LIST
70931: LIST
70932: LIST
70933: LIST
70934: LIST
70935: LIST
70936: LIST
70937: LIST
70938: LIST
70939: LIST
70940: LIST
70941: LIST
70942: LIST
70943: LIST
70944: LIST
70945: LIST
70946: LIST
70947: LIST
70948: LIST
70949: LIST
70950: LIST
70951: LIST
70952: LIST
70953: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
70954: LD_ADDR_VAR 0 34
70958: PUSH
70959: LD_INT 0
70961: PUSH
70962: LD_INT 4
70964: NEG
70965: PUSH
70966: EMPTY
70967: LIST
70968: LIST
70969: PUSH
70970: LD_INT 0
70972: PUSH
70973: LD_INT 5
70975: NEG
70976: PUSH
70977: EMPTY
70978: LIST
70979: LIST
70980: PUSH
70981: LD_INT 1
70983: PUSH
70984: LD_INT 4
70986: NEG
70987: PUSH
70988: EMPTY
70989: LIST
70990: LIST
70991: PUSH
70992: LD_INT 1
70994: PUSH
70995: LD_INT 3
70997: NEG
70998: PUSH
70999: EMPTY
71000: LIST
71001: LIST
71002: PUSH
71003: LD_INT 0
71005: PUSH
71006: LD_INT 3
71008: NEG
71009: PUSH
71010: EMPTY
71011: LIST
71012: LIST
71013: PUSH
71014: LD_INT 1
71016: NEG
71017: PUSH
71018: LD_INT 4
71020: NEG
71021: PUSH
71022: EMPTY
71023: LIST
71024: LIST
71025: PUSH
71026: LD_INT 1
71028: NEG
71029: PUSH
71030: LD_INT 5
71032: NEG
71033: PUSH
71034: EMPTY
71035: LIST
71036: LIST
71037: PUSH
71038: LD_INT 2
71040: PUSH
71041: LD_INT 3
71043: NEG
71044: PUSH
71045: EMPTY
71046: LIST
71047: LIST
71048: PUSH
71049: LD_INT 2
71051: NEG
71052: PUSH
71053: LD_INT 5
71055: NEG
71056: PUSH
71057: EMPTY
71058: LIST
71059: LIST
71060: PUSH
71061: LD_INT 3
71063: PUSH
71064: LD_INT 0
71066: PUSH
71067: EMPTY
71068: LIST
71069: LIST
71070: PUSH
71071: LD_INT 3
71073: PUSH
71074: LD_INT 1
71076: NEG
71077: PUSH
71078: EMPTY
71079: LIST
71080: LIST
71081: PUSH
71082: LD_INT 4
71084: PUSH
71085: LD_INT 0
71087: PUSH
71088: EMPTY
71089: LIST
71090: LIST
71091: PUSH
71092: LD_INT 4
71094: PUSH
71095: LD_INT 1
71097: PUSH
71098: EMPTY
71099: LIST
71100: LIST
71101: PUSH
71102: LD_INT 3
71104: PUSH
71105: LD_INT 1
71107: PUSH
71108: EMPTY
71109: LIST
71110: LIST
71111: PUSH
71112: LD_INT 2
71114: PUSH
71115: LD_INT 0
71117: PUSH
71118: EMPTY
71119: LIST
71120: LIST
71121: PUSH
71122: LD_INT 2
71124: PUSH
71125: LD_INT 1
71127: NEG
71128: PUSH
71129: EMPTY
71130: LIST
71131: LIST
71132: PUSH
71133: LD_INT 2
71135: PUSH
71136: LD_INT 2
71138: NEG
71139: PUSH
71140: EMPTY
71141: LIST
71142: LIST
71143: PUSH
71144: LD_INT 4
71146: PUSH
71147: LD_INT 2
71149: PUSH
71150: EMPTY
71151: LIST
71152: LIST
71153: PUSH
71154: LD_INT 4
71156: PUSH
71157: LD_INT 4
71159: PUSH
71160: EMPTY
71161: LIST
71162: LIST
71163: PUSH
71164: LD_INT 4
71166: PUSH
71167: LD_INT 3
71169: PUSH
71170: EMPTY
71171: LIST
71172: LIST
71173: PUSH
71174: LD_INT 5
71176: PUSH
71177: LD_INT 4
71179: PUSH
71180: EMPTY
71181: LIST
71182: LIST
71183: PUSH
71184: LD_INT 5
71186: PUSH
71187: LD_INT 5
71189: PUSH
71190: EMPTY
71191: LIST
71192: LIST
71193: PUSH
71194: LD_INT 4
71196: PUSH
71197: LD_INT 5
71199: PUSH
71200: EMPTY
71201: LIST
71202: LIST
71203: PUSH
71204: LD_INT 3
71206: PUSH
71207: LD_INT 4
71209: PUSH
71210: EMPTY
71211: LIST
71212: LIST
71213: PUSH
71214: LD_INT 3
71216: PUSH
71217: LD_INT 3
71219: PUSH
71220: EMPTY
71221: LIST
71222: LIST
71223: PUSH
71224: LD_INT 5
71226: PUSH
71227: LD_INT 3
71229: PUSH
71230: EMPTY
71231: LIST
71232: LIST
71233: PUSH
71234: LD_INT 3
71236: PUSH
71237: LD_INT 5
71239: PUSH
71240: EMPTY
71241: LIST
71242: LIST
71243: PUSH
71244: LD_INT 0
71246: PUSH
71247: LD_INT 3
71249: PUSH
71250: EMPTY
71251: LIST
71252: LIST
71253: PUSH
71254: LD_INT 0
71256: PUSH
71257: LD_INT 2
71259: PUSH
71260: EMPTY
71261: LIST
71262: LIST
71263: PUSH
71264: LD_INT 1
71266: PUSH
71267: LD_INT 3
71269: PUSH
71270: EMPTY
71271: LIST
71272: LIST
71273: PUSH
71274: LD_INT 1
71276: PUSH
71277: LD_INT 4
71279: PUSH
71280: EMPTY
71281: LIST
71282: LIST
71283: PUSH
71284: LD_INT 0
71286: PUSH
71287: LD_INT 4
71289: PUSH
71290: EMPTY
71291: LIST
71292: LIST
71293: PUSH
71294: LD_INT 1
71296: NEG
71297: PUSH
71298: LD_INT 3
71300: PUSH
71301: EMPTY
71302: LIST
71303: LIST
71304: PUSH
71305: LD_INT 1
71307: NEG
71308: PUSH
71309: LD_INT 2
71311: PUSH
71312: EMPTY
71313: LIST
71314: LIST
71315: PUSH
71316: LD_INT 2
71318: PUSH
71319: LD_INT 4
71321: PUSH
71322: EMPTY
71323: LIST
71324: LIST
71325: PUSH
71326: LD_INT 2
71328: NEG
71329: PUSH
71330: LD_INT 2
71332: PUSH
71333: EMPTY
71334: LIST
71335: LIST
71336: PUSH
71337: LD_INT 4
71339: NEG
71340: PUSH
71341: LD_INT 0
71343: PUSH
71344: EMPTY
71345: LIST
71346: LIST
71347: PUSH
71348: LD_INT 4
71350: NEG
71351: PUSH
71352: LD_INT 1
71354: NEG
71355: PUSH
71356: EMPTY
71357: LIST
71358: LIST
71359: PUSH
71360: LD_INT 3
71362: NEG
71363: PUSH
71364: LD_INT 0
71366: PUSH
71367: EMPTY
71368: LIST
71369: LIST
71370: PUSH
71371: LD_INT 3
71373: NEG
71374: PUSH
71375: LD_INT 1
71377: PUSH
71378: EMPTY
71379: LIST
71380: LIST
71381: PUSH
71382: LD_INT 4
71384: NEG
71385: PUSH
71386: LD_INT 1
71388: PUSH
71389: EMPTY
71390: LIST
71391: LIST
71392: PUSH
71393: LD_INT 5
71395: NEG
71396: PUSH
71397: LD_INT 0
71399: PUSH
71400: EMPTY
71401: LIST
71402: LIST
71403: PUSH
71404: LD_INT 5
71406: NEG
71407: PUSH
71408: LD_INT 1
71410: NEG
71411: PUSH
71412: EMPTY
71413: LIST
71414: LIST
71415: PUSH
71416: LD_INT 5
71418: NEG
71419: PUSH
71420: LD_INT 2
71422: NEG
71423: PUSH
71424: EMPTY
71425: LIST
71426: LIST
71427: PUSH
71428: LD_INT 3
71430: NEG
71431: PUSH
71432: LD_INT 2
71434: PUSH
71435: EMPTY
71436: LIST
71437: LIST
71438: PUSH
71439: EMPTY
71440: LIST
71441: LIST
71442: LIST
71443: LIST
71444: LIST
71445: LIST
71446: LIST
71447: LIST
71448: LIST
71449: LIST
71450: LIST
71451: LIST
71452: LIST
71453: LIST
71454: LIST
71455: LIST
71456: LIST
71457: LIST
71458: LIST
71459: LIST
71460: LIST
71461: LIST
71462: LIST
71463: LIST
71464: LIST
71465: LIST
71466: LIST
71467: LIST
71468: LIST
71469: LIST
71470: LIST
71471: LIST
71472: LIST
71473: LIST
71474: LIST
71475: LIST
71476: LIST
71477: LIST
71478: LIST
71479: LIST
71480: LIST
71481: LIST
71482: LIST
71483: LIST
71484: LIST
71485: ST_TO_ADDR
// end ; end ;
71486: GO 71489
71488: POP
// case btype of b_depot , b_warehouse :
71489: LD_VAR 0 1
71493: PUSH
71494: LD_INT 0
71496: DOUBLE
71497: EQUAL
71498: IFTRUE 71508
71500: LD_INT 1
71502: DOUBLE
71503: EQUAL
71504: IFTRUE 71508
71506: GO 71709
71508: POP
// case nation of nation_american :
71509: LD_VAR 0 5
71513: PUSH
71514: LD_INT 1
71516: DOUBLE
71517: EQUAL
71518: IFTRUE 71522
71520: GO 71578
71522: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
71523: LD_ADDR_VAR 0 9
71527: PUSH
71528: LD_VAR 0 11
71532: PUSH
71533: LD_VAR 0 12
71537: PUSH
71538: LD_VAR 0 13
71542: PUSH
71543: LD_VAR 0 14
71547: PUSH
71548: LD_VAR 0 15
71552: PUSH
71553: LD_VAR 0 16
71557: PUSH
71558: EMPTY
71559: LIST
71560: LIST
71561: LIST
71562: LIST
71563: LIST
71564: LIST
71565: PUSH
71566: LD_VAR 0 4
71570: PUSH
71571: LD_INT 1
71573: PLUS
71574: ARRAY
71575: ST_TO_ADDR
71576: GO 71707
71578: LD_INT 2
71580: DOUBLE
71581: EQUAL
71582: IFTRUE 71586
71584: GO 71642
71586: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
71587: LD_ADDR_VAR 0 9
71591: PUSH
71592: LD_VAR 0 17
71596: PUSH
71597: LD_VAR 0 18
71601: PUSH
71602: LD_VAR 0 19
71606: PUSH
71607: LD_VAR 0 20
71611: PUSH
71612: LD_VAR 0 21
71616: PUSH
71617: LD_VAR 0 22
71621: PUSH
71622: EMPTY
71623: LIST
71624: LIST
71625: LIST
71626: LIST
71627: LIST
71628: LIST
71629: PUSH
71630: LD_VAR 0 4
71634: PUSH
71635: LD_INT 1
71637: PLUS
71638: ARRAY
71639: ST_TO_ADDR
71640: GO 71707
71642: LD_INT 3
71644: DOUBLE
71645: EQUAL
71646: IFTRUE 71650
71648: GO 71706
71650: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
71651: LD_ADDR_VAR 0 9
71655: PUSH
71656: LD_VAR 0 23
71660: PUSH
71661: LD_VAR 0 24
71665: PUSH
71666: LD_VAR 0 25
71670: PUSH
71671: LD_VAR 0 26
71675: PUSH
71676: LD_VAR 0 27
71680: PUSH
71681: LD_VAR 0 28
71685: PUSH
71686: EMPTY
71687: LIST
71688: LIST
71689: LIST
71690: LIST
71691: LIST
71692: LIST
71693: PUSH
71694: LD_VAR 0 4
71698: PUSH
71699: LD_INT 1
71701: PLUS
71702: ARRAY
71703: ST_TO_ADDR
71704: GO 71707
71706: POP
71707: GO 72262
71709: LD_INT 2
71711: DOUBLE
71712: EQUAL
71713: IFTRUE 71723
71715: LD_INT 3
71717: DOUBLE
71718: EQUAL
71719: IFTRUE 71723
71721: GO 71779
71723: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
71724: LD_ADDR_VAR 0 9
71728: PUSH
71729: LD_VAR 0 29
71733: PUSH
71734: LD_VAR 0 30
71738: PUSH
71739: LD_VAR 0 31
71743: PUSH
71744: LD_VAR 0 32
71748: PUSH
71749: LD_VAR 0 33
71753: PUSH
71754: LD_VAR 0 34
71758: PUSH
71759: EMPTY
71760: LIST
71761: LIST
71762: LIST
71763: LIST
71764: LIST
71765: LIST
71766: PUSH
71767: LD_VAR 0 4
71771: PUSH
71772: LD_INT 1
71774: PLUS
71775: ARRAY
71776: ST_TO_ADDR
71777: GO 72262
71779: LD_INT 16
71781: DOUBLE
71782: EQUAL
71783: IFTRUE 71841
71785: LD_INT 17
71787: DOUBLE
71788: EQUAL
71789: IFTRUE 71841
71791: LD_INT 18
71793: DOUBLE
71794: EQUAL
71795: IFTRUE 71841
71797: LD_INT 19
71799: DOUBLE
71800: EQUAL
71801: IFTRUE 71841
71803: LD_INT 22
71805: DOUBLE
71806: EQUAL
71807: IFTRUE 71841
71809: LD_INT 20
71811: DOUBLE
71812: EQUAL
71813: IFTRUE 71841
71815: LD_INT 21
71817: DOUBLE
71818: EQUAL
71819: IFTRUE 71841
71821: LD_INT 23
71823: DOUBLE
71824: EQUAL
71825: IFTRUE 71841
71827: LD_INT 24
71829: DOUBLE
71830: EQUAL
71831: IFTRUE 71841
71833: LD_INT 25
71835: DOUBLE
71836: EQUAL
71837: IFTRUE 71841
71839: GO 71897
71841: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
71842: LD_ADDR_VAR 0 9
71846: PUSH
71847: LD_VAR 0 35
71851: PUSH
71852: LD_VAR 0 36
71856: PUSH
71857: LD_VAR 0 37
71861: PUSH
71862: LD_VAR 0 38
71866: PUSH
71867: LD_VAR 0 39
71871: PUSH
71872: LD_VAR 0 40
71876: PUSH
71877: EMPTY
71878: LIST
71879: LIST
71880: LIST
71881: LIST
71882: LIST
71883: LIST
71884: PUSH
71885: LD_VAR 0 4
71889: PUSH
71890: LD_INT 1
71892: PLUS
71893: ARRAY
71894: ST_TO_ADDR
71895: GO 72262
71897: LD_INT 6
71899: DOUBLE
71900: EQUAL
71901: IFTRUE 71953
71903: LD_INT 7
71905: DOUBLE
71906: EQUAL
71907: IFTRUE 71953
71909: LD_INT 8
71911: DOUBLE
71912: EQUAL
71913: IFTRUE 71953
71915: LD_INT 13
71917: DOUBLE
71918: EQUAL
71919: IFTRUE 71953
71921: LD_INT 12
71923: DOUBLE
71924: EQUAL
71925: IFTRUE 71953
71927: LD_INT 15
71929: DOUBLE
71930: EQUAL
71931: IFTRUE 71953
71933: LD_INT 11
71935: DOUBLE
71936: EQUAL
71937: IFTRUE 71953
71939: LD_INT 14
71941: DOUBLE
71942: EQUAL
71943: IFTRUE 71953
71945: LD_INT 10
71947: DOUBLE
71948: EQUAL
71949: IFTRUE 71953
71951: GO 72009
71953: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
71954: LD_ADDR_VAR 0 9
71958: PUSH
71959: LD_VAR 0 41
71963: PUSH
71964: LD_VAR 0 42
71968: PUSH
71969: LD_VAR 0 43
71973: PUSH
71974: LD_VAR 0 44
71978: PUSH
71979: LD_VAR 0 45
71983: PUSH
71984: LD_VAR 0 46
71988: PUSH
71989: EMPTY
71990: LIST
71991: LIST
71992: LIST
71993: LIST
71994: LIST
71995: LIST
71996: PUSH
71997: LD_VAR 0 4
72001: PUSH
72002: LD_INT 1
72004: PLUS
72005: ARRAY
72006: ST_TO_ADDR
72007: GO 72262
72009: LD_INT 36
72011: DOUBLE
72012: EQUAL
72013: IFTRUE 72017
72015: GO 72073
72017: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
72018: LD_ADDR_VAR 0 9
72022: PUSH
72023: LD_VAR 0 47
72027: PUSH
72028: LD_VAR 0 48
72032: PUSH
72033: LD_VAR 0 49
72037: PUSH
72038: LD_VAR 0 50
72042: PUSH
72043: LD_VAR 0 51
72047: PUSH
72048: LD_VAR 0 52
72052: PUSH
72053: EMPTY
72054: LIST
72055: LIST
72056: LIST
72057: LIST
72058: LIST
72059: LIST
72060: PUSH
72061: LD_VAR 0 4
72065: PUSH
72066: LD_INT 1
72068: PLUS
72069: ARRAY
72070: ST_TO_ADDR
72071: GO 72262
72073: LD_INT 4
72075: DOUBLE
72076: EQUAL
72077: IFTRUE 72099
72079: LD_INT 5
72081: DOUBLE
72082: EQUAL
72083: IFTRUE 72099
72085: LD_INT 34
72087: DOUBLE
72088: EQUAL
72089: IFTRUE 72099
72091: LD_INT 37
72093: DOUBLE
72094: EQUAL
72095: IFTRUE 72099
72097: GO 72155
72099: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
72100: LD_ADDR_VAR 0 9
72104: PUSH
72105: LD_VAR 0 53
72109: PUSH
72110: LD_VAR 0 54
72114: PUSH
72115: LD_VAR 0 55
72119: PUSH
72120: LD_VAR 0 56
72124: PUSH
72125: LD_VAR 0 57
72129: PUSH
72130: LD_VAR 0 58
72134: PUSH
72135: EMPTY
72136: LIST
72137: LIST
72138: LIST
72139: LIST
72140: LIST
72141: LIST
72142: PUSH
72143: LD_VAR 0 4
72147: PUSH
72148: LD_INT 1
72150: PLUS
72151: ARRAY
72152: ST_TO_ADDR
72153: GO 72262
72155: LD_INT 31
72157: DOUBLE
72158: EQUAL
72159: IFTRUE 72205
72161: LD_INT 32
72163: DOUBLE
72164: EQUAL
72165: IFTRUE 72205
72167: LD_INT 33
72169: DOUBLE
72170: EQUAL
72171: IFTRUE 72205
72173: LD_INT 27
72175: DOUBLE
72176: EQUAL
72177: IFTRUE 72205
72179: LD_INT 26
72181: DOUBLE
72182: EQUAL
72183: IFTRUE 72205
72185: LD_INT 28
72187: DOUBLE
72188: EQUAL
72189: IFTRUE 72205
72191: LD_INT 29
72193: DOUBLE
72194: EQUAL
72195: IFTRUE 72205
72197: LD_INT 30
72199: DOUBLE
72200: EQUAL
72201: IFTRUE 72205
72203: GO 72261
72205: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
72206: LD_ADDR_VAR 0 9
72210: PUSH
72211: LD_VAR 0 59
72215: PUSH
72216: LD_VAR 0 60
72220: PUSH
72221: LD_VAR 0 61
72225: PUSH
72226: LD_VAR 0 62
72230: PUSH
72231: LD_VAR 0 63
72235: PUSH
72236: LD_VAR 0 64
72240: PUSH
72241: EMPTY
72242: LIST
72243: LIST
72244: LIST
72245: LIST
72246: LIST
72247: LIST
72248: PUSH
72249: LD_VAR 0 4
72253: PUSH
72254: LD_INT 1
72256: PLUS
72257: ARRAY
72258: ST_TO_ADDR
72259: GO 72262
72261: POP
// temp_list2 = [ ] ;
72262: LD_ADDR_VAR 0 10
72266: PUSH
72267: EMPTY
72268: ST_TO_ADDR
// for i in temp_list do
72269: LD_ADDR_VAR 0 8
72273: PUSH
72274: LD_VAR 0 9
72278: PUSH
72279: FOR_IN
72280: IFFALSE 72332
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
72282: LD_ADDR_VAR 0 10
72286: PUSH
72287: LD_VAR 0 10
72291: PUSH
72292: LD_VAR 0 8
72296: PUSH
72297: LD_INT 1
72299: ARRAY
72300: PUSH
72301: LD_VAR 0 2
72305: PLUS
72306: PUSH
72307: LD_VAR 0 8
72311: PUSH
72312: LD_INT 2
72314: ARRAY
72315: PUSH
72316: LD_VAR 0 3
72320: PLUS
72321: PUSH
72322: EMPTY
72323: LIST
72324: LIST
72325: PUSH
72326: EMPTY
72327: LIST
72328: ADD
72329: ST_TO_ADDR
72330: GO 72279
72332: POP
72333: POP
// result = temp_list2 ;
72334: LD_ADDR_VAR 0 7
72338: PUSH
72339: LD_VAR 0 10
72343: ST_TO_ADDR
// end ;
72344: LD_VAR 0 7
72348: RET
// export function EnemyInRange ( unit , dist ) ; begin
72349: LD_INT 0
72351: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
72352: LD_ADDR_VAR 0 3
72356: PUSH
72357: LD_VAR 0 1
72361: PPUSH
72362: CALL_OW 255
72366: PPUSH
72367: LD_VAR 0 1
72371: PPUSH
72372: CALL_OW 250
72376: PPUSH
72377: LD_VAR 0 1
72381: PPUSH
72382: CALL_OW 251
72386: PPUSH
72387: LD_VAR 0 2
72391: PPUSH
72392: CALL 45722 0 4
72396: PUSH
72397: LD_INT 4
72399: ARRAY
72400: ST_TO_ADDR
// end ;
72401: LD_VAR 0 3
72405: RET
// export function PlayerSeeMe ( unit ) ; begin
72406: LD_INT 0
72408: PPUSH
// result := See ( your_side , unit ) ;
72409: LD_ADDR_VAR 0 2
72413: PUSH
72414: LD_OWVAR 2
72418: PPUSH
72419: LD_VAR 0 1
72423: PPUSH
72424: CALL_OW 292
72428: ST_TO_ADDR
// end ;
72429: LD_VAR 0 2
72433: RET
// export function ReverseDir ( unit ) ; begin
72434: LD_INT 0
72436: PPUSH
// if not unit then
72437: LD_VAR 0 1
72441: NOT
72442: IFFALSE 72446
// exit ;
72444: GO 72469
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
72446: LD_ADDR_VAR 0 2
72450: PUSH
72451: LD_VAR 0 1
72455: PPUSH
72456: CALL_OW 254
72460: PUSH
72461: LD_INT 3
72463: PLUS
72464: PUSH
72465: LD_INT 6
72467: MOD
72468: ST_TO_ADDR
// end ;
72469: LD_VAR 0 2
72473: RET
// export function ReverseArray ( array ) ; var i ; begin
72474: LD_INT 0
72476: PPUSH
72477: PPUSH
// if not array then
72478: LD_VAR 0 1
72482: NOT
72483: IFFALSE 72487
// exit ;
72485: GO 72542
// result := [ ] ;
72487: LD_ADDR_VAR 0 2
72491: PUSH
72492: EMPTY
72493: ST_TO_ADDR
// for i := array downto 1 do
72494: LD_ADDR_VAR 0 3
72498: PUSH
72499: DOUBLE
72500: LD_VAR 0 1
72504: INC
72505: ST_TO_ADDR
72506: LD_INT 1
72508: PUSH
72509: FOR_DOWNTO
72510: IFFALSE 72540
// result := Join ( result , array [ i ] ) ;
72512: LD_ADDR_VAR 0 2
72516: PUSH
72517: LD_VAR 0 2
72521: PPUSH
72522: LD_VAR 0 1
72526: PUSH
72527: LD_VAR 0 3
72531: ARRAY
72532: PPUSH
72533: CALL 77185 0 2
72537: ST_TO_ADDR
72538: GO 72509
72540: POP
72541: POP
// end ;
72542: LD_VAR 0 2
72546: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
72547: LD_INT 0
72549: PPUSH
72550: PPUSH
72551: PPUSH
72552: PPUSH
72553: PPUSH
72554: PPUSH
// if not unit or not hexes then
72555: LD_VAR 0 1
72559: NOT
72560: PUSH
72561: LD_VAR 0 2
72565: NOT
72566: OR
72567: IFFALSE 72571
// exit ;
72569: GO 72694
// dist := 9999 ;
72571: LD_ADDR_VAR 0 5
72575: PUSH
72576: LD_INT 9999
72578: ST_TO_ADDR
// for i = 1 to hexes do
72579: LD_ADDR_VAR 0 4
72583: PUSH
72584: DOUBLE
72585: LD_INT 1
72587: DEC
72588: ST_TO_ADDR
72589: LD_VAR 0 2
72593: PUSH
72594: FOR_TO
72595: IFFALSE 72682
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
72597: LD_ADDR_VAR 0 6
72601: PUSH
72602: LD_VAR 0 1
72606: PPUSH
72607: LD_VAR 0 2
72611: PUSH
72612: LD_VAR 0 4
72616: ARRAY
72617: PUSH
72618: LD_INT 1
72620: ARRAY
72621: PPUSH
72622: LD_VAR 0 2
72626: PUSH
72627: LD_VAR 0 4
72631: ARRAY
72632: PUSH
72633: LD_INT 2
72635: ARRAY
72636: PPUSH
72637: CALL_OW 297
72641: ST_TO_ADDR
// if tdist < dist then
72642: LD_VAR 0 6
72646: PUSH
72647: LD_VAR 0 5
72651: LESS
72652: IFFALSE 72680
// begin hex := hexes [ i ] ;
72654: LD_ADDR_VAR 0 8
72658: PUSH
72659: LD_VAR 0 2
72663: PUSH
72664: LD_VAR 0 4
72668: ARRAY
72669: ST_TO_ADDR
// dist := tdist ;
72670: LD_ADDR_VAR 0 5
72674: PUSH
72675: LD_VAR 0 6
72679: ST_TO_ADDR
// end ; end ;
72680: GO 72594
72682: POP
72683: POP
// result := hex ;
72684: LD_ADDR_VAR 0 3
72688: PUSH
72689: LD_VAR 0 8
72693: ST_TO_ADDR
// end ;
72694: LD_VAR 0 3
72698: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
72699: LD_INT 0
72701: PPUSH
72702: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
72703: LD_VAR 0 1
72707: NOT
72708: PUSH
72709: LD_VAR 0 1
72713: PUSH
72714: LD_INT 21
72716: PUSH
72717: LD_INT 2
72719: PUSH
72720: EMPTY
72721: LIST
72722: LIST
72723: PUSH
72724: LD_INT 23
72726: PUSH
72727: LD_INT 2
72729: PUSH
72730: EMPTY
72731: LIST
72732: LIST
72733: PUSH
72734: EMPTY
72735: LIST
72736: LIST
72737: PPUSH
72738: CALL_OW 69
72742: IN
72743: NOT
72744: OR
72745: IFFALSE 72749
// exit ;
72747: GO 72796
// for i = 1 to 3 do
72749: LD_ADDR_VAR 0 3
72753: PUSH
72754: DOUBLE
72755: LD_INT 1
72757: DEC
72758: ST_TO_ADDR
72759: LD_INT 3
72761: PUSH
72762: FOR_TO
72763: IFFALSE 72794
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
72765: LD_VAR 0 1
72769: PPUSH
72770: CALL_OW 250
72774: PPUSH
72775: LD_VAR 0 1
72779: PPUSH
72780: CALL_OW 251
72784: PPUSH
72785: LD_INT 1
72787: PPUSH
72788: CALL_OW 453
72792: GO 72762
72794: POP
72795: POP
// end ;
72796: LD_VAR 0 2
72800: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
72801: LD_INT 0
72803: PPUSH
72804: PPUSH
72805: PPUSH
72806: PPUSH
72807: PPUSH
72808: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
72809: LD_VAR 0 1
72813: NOT
72814: PUSH
72815: LD_VAR 0 2
72819: NOT
72820: OR
72821: PUSH
72822: LD_VAR 0 1
72826: PPUSH
72827: CALL_OW 314
72831: OR
72832: IFFALSE 72836
// exit ;
72834: GO 73303
// if GetLives ( i ) < 250 then
72836: LD_VAR 0 4
72840: PPUSH
72841: CALL_OW 256
72845: PUSH
72846: LD_INT 250
72848: LESS
72849: IFFALSE 72862
// begin ComAutodestruct ( i ) ;
72851: LD_VAR 0 4
72855: PPUSH
72856: CALL 72699 0 1
// exit ;
72860: GO 73303
// end ; x := GetX ( enemy_unit ) ;
72862: LD_ADDR_VAR 0 7
72866: PUSH
72867: LD_VAR 0 2
72871: PPUSH
72872: CALL_OW 250
72876: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
72877: LD_ADDR_VAR 0 8
72881: PUSH
72882: LD_VAR 0 2
72886: PPUSH
72887: CALL_OW 251
72891: ST_TO_ADDR
// if not x or not y then
72892: LD_VAR 0 7
72896: NOT
72897: PUSH
72898: LD_VAR 0 8
72902: NOT
72903: OR
72904: IFFALSE 72908
// exit ;
72906: GO 73303
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
72908: LD_ADDR_VAR 0 6
72912: PUSH
72913: LD_VAR 0 7
72917: PPUSH
72918: LD_INT 0
72920: PPUSH
72921: LD_INT 4
72923: PPUSH
72924: CALL_OW 272
72928: PUSH
72929: LD_VAR 0 8
72933: PPUSH
72934: LD_INT 0
72936: PPUSH
72937: LD_INT 4
72939: PPUSH
72940: CALL_OW 273
72944: PUSH
72945: EMPTY
72946: LIST
72947: LIST
72948: PUSH
72949: LD_VAR 0 7
72953: PPUSH
72954: LD_INT 1
72956: PPUSH
72957: LD_INT 4
72959: PPUSH
72960: CALL_OW 272
72964: PUSH
72965: LD_VAR 0 8
72969: PPUSH
72970: LD_INT 1
72972: PPUSH
72973: LD_INT 4
72975: PPUSH
72976: CALL_OW 273
72980: PUSH
72981: EMPTY
72982: LIST
72983: LIST
72984: PUSH
72985: LD_VAR 0 7
72989: PPUSH
72990: LD_INT 2
72992: PPUSH
72993: LD_INT 4
72995: PPUSH
72996: CALL_OW 272
73000: PUSH
73001: LD_VAR 0 8
73005: PPUSH
73006: LD_INT 2
73008: PPUSH
73009: LD_INT 4
73011: PPUSH
73012: CALL_OW 273
73016: PUSH
73017: EMPTY
73018: LIST
73019: LIST
73020: PUSH
73021: LD_VAR 0 7
73025: PPUSH
73026: LD_INT 3
73028: PPUSH
73029: LD_INT 4
73031: PPUSH
73032: CALL_OW 272
73036: PUSH
73037: LD_VAR 0 8
73041: PPUSH
73042: LD_INT 3
73044: PPUSH
73045: LD_INT 4
73047: PPUSH
73048: CALL_OW 273
73052: PUSH
73053: EMPTY
73054: LIST
73055: LIST
73056: PUSH
73057: LD_VAR 0 7
73061: PPUSH
73062: LD_INT 4
73064: PPUSH
73065: LD_INT 4
73067: PPUSH
73068: CALL_OW 272
73072: PUSH
73073: LD_VAR 0 8
73077: PPUSH
73078: LD_INT 4
73080: PPUSH
73081: LD_INT 4
73083: PPUSH
73084: CALL_OW 273
73088: PUSH
73089: EMPTY
73090: LIST
73091: LIST
73092: PUSH
73093: LD_VAR 0 7
73097: PPUSH
73098: LD_INT 5
73100: PPUSH
73101: LD_INT 4
73103: PPUSH
73104: CALL_OW 272
73108: PUSH
73109: LD_VAR 0 8
73113: PPUSH
73114: LD_INT 5
73116: PPUSH
73117: LD_INT 4
73119: PPUSH
73120: CALL_OW 273
73124: PUSH
73125: EMPTY
73126: LIST
73127: LIST
73128: PUSH
73129: EMPTY
73130: LIST
73131: LIST
73132: LIST
73133: LIST
73134: LIST
73135: LIST
73136: ST_TO_ADDR
// for i = tmp downto 1 do
73137: LD_ADDR_VAR 0 4
73141: PUSH
73142: DOUBLE
73143: LD_VAR 0 6
73147: INC
73148: ST_TO_ADDR
73149: LD_INT 1
73151: PUSH
73152: FOR_DOWNTO
73153: IFFALSE 73254
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
73155: LD_VAR 0 6
73159: PUSH
73160: LD_VAR 0 4
73164: ARRAY
73165: PUSH
73166: LD_INT 1
73168: ARRAY
73169: PPUSH
73170: LD_VAR 0 6
73174: PUSH
73175: LD_VAR 0 4
73179: ARRAY
73180: PUSH
73181: LD_INT 2
73183: ARRAY
73184: PPUSH
73185: CALL_OW 488
73189: NOT
73190: PUSH
73191: LD_VAR 0 6
73195: PUSH
73196: LD_VAR 0 4
73200: ARRAY
73201: PUSH
73202: LD_INT 1
73204: ARRAY
73205: PPUSH
73206: LD_VAR 0 6
73210: PUSH
73211: LD_VAR 0 4
73215: ARRAY
73216: PUSH
73217: LD_INT 2
73219: ARRAY
73220: PPUSH
73221: CALL_OW 428
73225: PUSH
73226: LD_INT 0
73228: NONEQUAL
73229: OR
73230: IFFALSE 73252
// tmp := Delete ( tmp , i ) ;
73232: LD_ADDR_VAR 0 6
73236: PUSH
73237: LD_VAR 0 6
73241: PPUSH
73242: LD_VAR 0 4
73246: PPUSH
73247: CALL_OW 3
73251: ST_TO_ADDR
73252: GO 73152
73254: POP
73255: POP
// j := GetClosestHex ( unit , tmp ) ;
73256: LD_ADDR_VAR 0 5
73260: PUSH
73261: LD_VAR 0 1
73265: PPUSH
73266: LD_VAR 0 6
73270: PPUSH
73271: CALL 72547 0 2
73275: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
73276: LD_VAR 0 1
73280: PPUSH
73281: LD_VAR 0 5
73285: PUSH
73286: LD_INT 1
73288: ARRAY
73289: PPUSH
73290: LD_VAR 0 5
73294: PUSH
73295: LD_INT 2
73297: ARRAY
73298: PPUSH
73299: CALL_OW 111
// end ;
73303: LD_VAR 0 3
73307: RET
// export function PrepareApemanSoldier ( ) ; begin
73308: LD_INT 0
73310: PPUSH
// uc_nation := 0 ;
73311: LD_ADDR_OWVAR 21
73315: PUSH
73316: LD_INT 0
73318: ST_TO_ADDR
// hc_sex := sex_male ;
73319: LD_ADDR_OWVAR 27
73323: PUSH
73324: LD_INT 1
73326: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
73327: LD_ADDR_OWVAR 28
73331: PUSH
73332: LD_INT 15
73334: ST_TO_ADDR
// hc_gallery :=  ;
73335: LD_ADDR_OWVAR 33
73339: PUSH
73340: LD_STRING 
73342: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73343: LD_ADDR_OWVAR 31
73347: PUSH
73348: LD_INT 0
73350: PPUSH
73351: LD_INT 3
73353: PPUSH
73354: CALL_OW 12
73358: PUSH
73359: LD_INT 0
73361: PPUSH
73362: LD_INT 3
73364: PPUSH
73365: CALL_OW 12
73369: PUSH
73370: LD_INT 0
73372: PUSH
73373: LD_INT 0
73375: PUSH
73376: EMPTY
73377: LIST
73378: LIST
73379: LIST
73380: LIST
73381: ST_TO_ADDR
// end ;
73382: LD_VAR 0 1
73386: RET
// export function PrepareApemanEngineer ( ) ; begin
73387: LD_INT 0
73389: PPUSH
// uc_nation := 0 ;
73390: LD_ADDR_OWVAR 21
73394: PUSH
73395: LD_INT 0
73397: ST_TO_ADDR
// hc_sex := sex_male ;
73398: LD_ADDR_OWVAR 27
73402: PUSH
73403: LD_INT 1
73405: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
73406: LD_ADDR_OWVAR 28
73410: PUSH
73411: LD_INT 16
73413: ST_TO_ADDR
// hc_gallery :=  ;
73414: LD_ADDR_OWVAR 33
73418: PUSH
73419: LD_STRING 
73421: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73422: LD_ADDR_OWVAR 31
73426: PUSH
73427: LD_INT 0
73429: PPUSH
73430: LD_INT 3
73432: PPUSH
73433: CALL_OW 12
73437: PUSH
73438: LD_INT 0
73440: PPUSH
73441: LD_INT 3
73443: PPUSH
73444: CALL_OW 12
73448: PUSH
73449: LD_INT 0
73451: PUSH
73452: LD_INT 0
73454: PUSH
73455: EMPTY
73456: LIST
73457: LIST
73458: LIST
73459: LIST
73460: ST_TO_ADDR
// end ;
73461: LD_VAR 0 1
73465: RET
// export function PrepareApeman ( agressivity ) ; begin
73466: LD_INT 0
73468: PPUSH
// uc_side := 0 ;
73469: LD_ADDR_OWVAR 20
73473: PUSH
73474: LD_INT 0
73476: ST_TO_ADDR
// uc_nation := 0 ;
73477: LD_ADDR_OWVAR 21
73481: PUSH
73482: LD_INT 0
73484: ST_TO_ADDR
// hc_sex := sex_male ;
73485: LD_ADDR_OWVAR 27
73489: PUSH
73490: LD_INT 1
73492: ST_TO_ADDR
// hc_class := class_apeman ;
73493: LD_ADDR_OWVAR 28
73497: PUSH
73498: LD_INT 12
73500: ST_TO_ADDR
// hc_gallery :=  ;
73501: LD_ADDR_OWVAR 33
73505: PUSH
73506: LD_STRING 
73508: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73509: LD_ADDR_OWVAR 35
73513: PUSH
73514: LD_VAR 0 1
73518: NEG
73519: PPUSH
73520: LD_VAR 0 1
73524: PPUSH
73525: CALL_OW 12
73529: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73530: LD_ADDR_OWVAR 31
73534: PUSH
73535: LD_INT 0
73537: PPUSH
73538: LD_INT 3
73540: PPUSH
73541: CALL_OW 12
73545: PUSH
73546: LD_INT 0
73548: PPUSH
73549: LD_INT 3
73551: PPUSH
73552: CALL_OW 12
73556: PUSH
73557: LD_INT 0
73559: PUSH
73560: LD_INT 0
73562: PUSH
73563: EMPTY
73564: LIST
73565: LIST
73566: LIST
73567: LIST
73568: ST_TO_ADDR
// end ;
73569: LD_VAR 0 2
73573: RET
// export function PrepareTiger ( agressivity ) ; begin
73574: LD_INT 0
73576: PPUSH
// uc_side := 0 ;
73577: LD_ADDR_OWVAR 20
73581: PUSH
73582: LD_INT 0
73584: ST_TO_ADDR
// uc_nation := 0 ;
73585: LD_ADDR_OWVAR 21
73589: PUSH
73590: LD_INT 0
73592: ST_TO_ADDR
// hc_class := class_tiger ;
73593: LD_ADDR_OWVAR 28
73597: PUSH
73598: LD_INT 14
73600: ST_TO_ADDR
// hc_gallery :=  ;
73601: LD_ADDR_OWVAR 33
73605: PUSH
73606: LD_STRING 
73608: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73609: LD_ADDR_OWVAR 35
73613: PUSH
73614: LD_VAR 0 1
73618: NEG
73619: PPUSH
73620: LD_VAR 0 1
73624: PPUSH
73625: CALL_OW 12
73629: ST_TO_ADDR
// end ;
73630: LD_VAR 0 2
73634: RET
// export function PrepareEnchidna ( ) ; begin
73635: LD_INT 0
73637: PPUSH
// uc_side := 0 ;
73638: LD_ADDR_OWVAR 20
73642: PUSH
73643: LD_INT 0
73645: ST_TO_ADDR
// uc_nation := 0 ;
73646: LD_ADDR_OWVAR 21
73650: PUSH
73651: LD_INT 0
73653: ST_TO_ADDR
// hc_class := class_baggie ;
73654: LD_ADDR_OWVAR 28
73658: PUSH
73659: LD_INT 13
73661: ST_TO_ADDR
// hc_gallery :=  ;
73662: LD_ADDR_OWVAR 33
73666: PUSH
73667: LD_STRING 
73669: ST_TO_ADDR
// end ;
73670: LD_VAR 0 1
73674: RET
// export function PrepareFrog ( ) ; begin
73675: LD_INT 0
73677: PPUSH
// uc_side := 0 ;
73678: LD_ADDR_OWVAR 20
73682: PUSH
73683: LD_INT 0
73685: ST_TO_ADDR
// uc_nation := 0 ;
73686: LD_ADDR_OWVAR 21
73690: PUSH
73691: LD_INT 0
73693: ST_TO_ADDR
// hc_class := class_frog ;
73694: LD_ADDR_OWVAR 28
73698: PUSH
73699: LD_INT 19
73701: ST_TO_ADDR
// hc_gallery :=  ;
73702: LD_ADDR_OWVAR 33
73706: PUSH
73707: LD_STRING 
73709: ST_TO_ADDR
// end ;
73710: LD_VAR 0 1
73714: RET
// export function PrepareFish ( ) ; begin
73715: LD_INT 0
73717: PPUSH
// uc_side := 0 ;
73718: LD_ADDR_OWVAR 20
73722: PUSH
73723: LD_INT 0
73725: ST_TO_ADDR
// uc_nation := 0 ;
73726: LD_ADDR_OWVAR 21
73730: PUSH
73731: LD_INT 0
73733: ST_TO_ADDR
// hc_class := class_fish ;
73734: LD_ADDR_OWVAR 28
73738: PUSH
73739: LD_INT 20
73741: ST_TO_ADDR
// hc_gallery :=  ;
73742: LD_ADDR_OWVAR 33
73746: PUSH
73747: LD_STRING 
73749: ST_TO_ADDR
// end ;
73750: LD_VAR 0 1
73754: RET
// export function PrepareBird ( ) ; begin
73755: LD_INT 0
73757: PPUSH
// uc_side := 0 ;
73758: LD_ADDR_OWVAR 20
73762: PUSH
73763: LD_INT 0
73765: ST_TO_ADDR
// uc_nation := 0 ;
73766: LD_ADDR_OWVAR 21
73770: PUSH
73771: LD_INT 0
73773: ST_TO_ADDR
// hc_class := class_phororhacos ;
73774: LD_ADDR_OWVAR 28
73778: PUSH
73779: LD_INT 18
73781: ST_TO_ADDR
// hc_gallery :=  ;
73782: LD_ADDR_OWVAR 33
73786: PUSH
73787: LD_STRING 
73789: ST_TO_ADDR
// end ;
73790: LD_VAR 0 1
73794: RET
// export function PrepareHorse ( ) ; begin
73795: LD_INT 0
73797: PPUSH
// uc_side := 0 ;
73798: LD_ADDR_OWVAR 20
73802: PUSH
73803: LD_INT 0
73805: ST_TO_ADDR
// uc_nation := 0 ;
73806: LD_ADDR_OWVAR 21
73810: PUSH
73811: LD_INT 0
73813: ST_TO_ADDR
// hc_class := class_horse ;
73814: LD_ADDR_OWVAR 28
73818: PUSH
73819: LD_INT 21
73821: ST_TO_ADDR
// hc_gallery :=  ;
73822: LD_ADDR_OWVAR 33
73826: PUSH
73827: LD_STRING 
73829: ST_TO_ADDR
// end ;
73830: LD_VAR 0 1
73834: RET
// export function PrepareMastodont ( ) ; begin
73835: LD_INT 0
73837: PPUSH
// uc_side := 0 ;
73838: LD_ADDR_OWVAR 20
73842: PUSH
73843: LD_INT 0
73845: ST_TO_ADDR
// uc_nation := 0 ;
73846: LD_ADDR_OWVAR 21
73850: PUSH
73851: LD_INT 0
73853: ST_TO_ADDR
// vc_chassis := class_mastodont ;
73854: LD_ADDR_OWVAR 37
73858: PUSH
73859: LD_INT 31
73861: ST_TO_ADDR
// vc_control := control_rider ;
73862: LD_ADDR_OWVAR 38
73866: PUSH
73867: LD_INT 4
73869: ST_TO_ADDR
// end ;
73870: LD_VAR 0 1
73874: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
73875: LD_INT 0
73877: PPUSH
73878: PPUSH
73879: PPUSH
// uc_side = 0 ;
73880: LD_ADDR_OWVAR 20
73884: PUSH
73885: LD_INT 0
73887: ST_TO_ADDR
// uc_nation = 0 ;
73888: LD_ADDR_OWVAR 21
73892: PUSH
73893: LD_INT 0
73895: ST_TO_ADDR
// InitHc_All ( ) ;
73896: CALL_OW 584
// InitVc ;
73900: CALL_OW 20
// if mastodonts then
73904: LD_VAR 0 6
73908: IFFALSE 73975
// for i = 1 to mastodonts do
73910: LD_ADDR_VAR 0 11
73914: PUSH
73915: DOUBLE
73916: LD_INT 1
73918: DEC
73919: ST_TO_ADDR
73920: LD_VAR 0 6
73924: PUSH
73925: FOR_TO
73926: IFFALSE 73973
// begin vc_chassis := 31 ;
73928: LD_ADDR_OWVAR 37
73932: PUSH
73933: LD_INT 31
73935: ST_TO_ADDR
// vc_control := control_rider ;
73936: LD_ADDR_OWVAR 38
73940: PUSH
73941: LD_INT 4
73943: ST_TO_ADDR
// animal := CreateVehicle ;
73944: LD_ADDR_VAR 0 12
73948: PUSH
73949: CALL_OW 45
73953: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73954: LD_VAR 0 12
73958: PPUSH
73959: LD_VAR 0 8
73963: PPUSH
73964: LD_INT 0
73966: PPUSH
73967: CALL 76103 0 3
// end ;
73971: GO 73925
73973: POP
73974: POP
// if horses then
73975: LD_VAR 0 5
73979: IFFALSE 74046
// for i = 1 to horses do
73981: LD_ADDR_VAR 0 11
73985: PUSH
73986: DOUBLE
73987: LD_INT 1
73989: DEC
73990: ST_TO_ADDR
73991: LD_VAR 0 5
73995: PUSH
73996: FOR_TO
73997: IFFALSE 74044
// begin hc_class := 21 ;
73999: LD_ADDR_OWVAR 28
74003: PUSH
74004: LD_INT 21
74006: ST_TO_ADDR
// hc_gallery :=  ;
74007: LD_ADDR_OWVAR 33
74011: PUSH
74012: LD_STRING 
74014: ST_TO_ADDR
// animal := CreateHuman ;
74015: LD_ADDR_VAR 0 12
74019: PUSH
74020: CALL_OW 44
74024: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74025: LD_VAR 0 12
74029: PPUSH
74030: LD_VAR 0 8
74034: PPUSH
74035: LD_INT 0
74037: PPUSH
74038: CALL 76103 0 3
// end ;
74042: GO 73996
74044: POP
74045: POP
// if birds then
74046: LD_VAR 0 1
74050: IFFALSE 74117
// for i = 1 to birds do
74052: LD_ADDR_VAR 0 11
74056: PUSH
74057: DOUBLE
74058: LD_INT 1
74060: DEC
74061: ST_TO_ADDR
74062: LD_VAR 0 1
74066: PUSH
74067: FOR_TO
74068: IFFALSE 74115
// begin hc_class := 18 ;
74070: LD_ADDR_OWVAR 28
74074: PUSH
74075: LD_INT 18
74077: ST_TO_ADDR
// hc_gallery =  ;
74078: LD_ADDR_OWVAR 33
74082: PUSH
74083: LD_STRING 
74085: ST_TO_ADDR
// animal := CreateHuman ;
74086: LD_ADDR_VAR 0 12
74090: PUSH
74091: CALL_OW 44
74095: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74096: LD_VAR 0 12
74100: PPUSH
74101: LD_VAR 0 8
74105: PPUSH
74106: LD_INT 0
74108: PPUSH
74109: CALL 76103 0 3
// end ;
74113: GO 74067
74115: POP
74116: POP
// if tigers then
74117: LD_VAR 0 2
74121: IFFALSE 74205
// for i = 1 to tigers do
74123: LD_ADDR_VAR 0 11
74127: PUSH
74128: DOUBLE
74129: LD_INT 1
74131: DEC
74132: ST_TO_ADDR
74133: LD_VAR 0 2
74137: PUSH
74138: FOR_TO
74139: IFFALSE 74203
// begin hc_class = class_tiger ;
74141: LD_ADDR_OWVAR 28
74145: PUSH
74146: LD_INT 14
74148: ST_TO_ADDR
// hc_gallery =  ;
74149: LD_ADDR_OWVAR 33
74153: PUSH
74154: LD_STRING 
74156: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
74157: LD_ADDR_OWVAR 35
74161: PUSH
74162: LD_INT 7
74164: NEG
74165: PPUSH
74166: LD_INT 7
74168: PPUSH
74169: CALL_OW 12
74173: ST_TO_ADDR
// animal := CreateHuman ;
74174: LD_ADDR_VAR 0 12
74178: PUSH
74179: CALL_OW 44
74183: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74184: LD_VAR 0 12
74188: PPUSH
74189: LD_VAR 0 8
74193: PPUSH
74194: LD_INT 0
74196: PPUSH
74197: CALL 76103 0 3
// end ;
74201: GO 74138
74203: POP
74204: POP
// if apemans then
74205: LD_VAR 0 3
74209: IFFALSE 74332
// for i = 1 to apemans do
74211: LD_ADDR_VAR 0 11
74215: PUSH
74216: DOUBLE
74217: LD_INT 1
74219: DEC
74220: ST_TO_ADDR
74221: LD_VAR 0 3
74225: PUSH
74226: FOR_TO
74227: IFFALSE 74330
// begin hc_class = class_apeman ;
74229: LD_ADDR_OWVAR 28
74233: PUSH
74234: LD_INT 12
74236: ST_TO_ADDR
// hc_gallery =  ;
74237: LD_ADDR_OWVAR 33
74241: PUSH
74242: LD_STRING 
74244: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
74245: LD_ADDR_OWVAR 35
74249: PUSH
74250: LD_INT 2
74252: NEG
74253: PPUSH
74254: LD_INT 2
74256: PPUSH
74257: CALL_OW 12
74261: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
74262: LD_ADDR_OWVAR 31
74266: PUSH
74267: LD_INT 1
74269: PPUSH
74270: LD_INT 3
74272: PPUSH
74273: CALL_OW 12
74277: PUSH
74278: LD_INT 1
74280: PPUSH
74281: LD_INT 3
74283: PPUSH
74284: CALL_OW 12
74288: PUSH
74289: LD_INT 0
74291: PUSH
74292: LD_INT 0
74294: PUSH
74295: EMPTY
74296: LIST
74297: LIST
74298: LIST
74299: LIST
74300: ST_TO_ADDR
// animal := CreateHuman ;
74301: LD_ADDR_VAR 0 12
74305: PUSH
74306: CALL_OW 44
74310: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74311: LD_VAR 0 12
74315: PPUSH
74316: LD_VAR 0 8
74320: PPUSH
74321: LD_INT 0
74323: PPUSH
74324: CALL 76103 0 3
// end ;
74328: GO 74226
74330: POP
74331: POP
// if enchidnas then
74332: LD_VAR 0 4
74336: IFFALSE 74403
// for i = 1 to enchidnas do
74338: LD_ADDR_VAR 0 11
74342: PUSH
74343: DOUBLE
74344: LD_INT 1
74346: DEC
74347: ST_TO_ADDR
74348: LD_VAR 0 4
74352: PUSH
74353: FOR_TO
74354: IFFALSE 74401
// begin hc_class = 13 ;
74356: LD_ADDR_OWVAR 28
74360: PUSH
74361: LD_INT 13
74363: ST_TO_ADDR
// hc_gallery =  ;
74364: LD_ADDR_OWVAR 33
74368: PUSH
74369: LD_STRING 
74371: ST_TO_ADDR
// animal := CreateHuman ;
74372: LD_ADDR_VAR 0 12
74376: PUSH
74377: CALL_OW 44
74381: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74382: LD_VAR 0 12
74386: PPUSH
74387: LD_VAR 0 8
74391: PPUSH
74392: LD_INT 0
74394: PPUSH
74395: CALL 76103 0 3
// end ;
74399: GO 74353
74401: POP
74402: POP
// if fishes then
74403: LD_VAR 0 7
74407: IFFALSE 74474
// for i = 1 to fishes do
74409: LD_ADDR_VAR 0 11
74413: PUSH
74414: DOUBLE
74415: LD_INT 1
74417: DEC
74418: ST_TO_ADDR
74419: LD_VAR 0 7
74423: PUSH
74424: FOR_TO
74425: IFFALSE 74472
// begin hc_class = 20 ;
74427: LD_ADDR_OWVAR 28
74431: PUSH
74432: LD_INT 20
74434: ST_TO_ADDR
// hc_gallery =  ;
74435: LD_ADDR_OWVAR 33
74439: PUSH
74440: LD_STRING 
74442: ST_TO_ADDR
// animal := CreateHuman ;
74443: LD_ADDR_VAR 0 12
74447: PUSH
74448: CALL_OW 44
74452: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
74453: LD_VAR 0 12
74457: PPUSH
74458: LD_VAR 0 9
74462: PPUSH
74463: LD_INT 0
74465: PPUSH
74466: CALL 76103 0 3
// end ;
74470: GO 74424
74472: POP
74473: POP
// end ;
74474: LD_VAR 0 10
74478: RET
// export function WantHeal ( sci , unit ) ; begin
74479: LD_INT 0
74481: PPUSH
// if GetTaskList ( sci ) > 0 then
74482: LD_VAR 0 1
74486: PPUSH
74487: CALL_OW 437
74491: PUSH
74492: LD_INT 0
74494: GREATER
74495: IFFALSE 74565
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
74497: LD_VAR 0 1
74501: PPUSH
74502: CALL_OW 437
74506: PUSH
74507: LD_INT 1
74509: ARRAY
74510: PUSH
74511: LD_INT 1
74513: ARRAY
74514: PUSH
74515: LD_STRING l
74517: EQUAL
74518: PUSH
74519: LD_VAR 0 1
74523: PPUSH
74524: CALL_OW 437
74528: PUSH
74529: LD_INT 1
74531: ARRAY
74532: PUSH
74533: LD_INT 4
74535: ARRAY
74536: PUSH
74537: LD_VAR 0 2
74541: EQUAL
74542: AND
74543: IFFALSE 74555
// result := true else
74545: LD_ADDR_VAR 0 3
74549: PUSH
74550: LD_INT 1
74552: ST_TO_ADDR
74553: GO 74563
// result := false ;
74555: LD_ADDR_VAR 0 3
74559: PUSH
74560: LD_INT 0
74562: ST_TO_ADDR
// end else
74563: GO 74573
// result := false ;
74565: LD_ADDR_VAR 0 3
74569: PUSH
74570: LD_INT 0
74572: ST_TO_ADDR
// end ;
74573: LD_VAR 0 3
74577: RET
// export function HealTarget ( sci ) ; begin
74578: LD_INT 0
74580: PPUSH
// if not sci then
74581: LD_VAR 0 1
74585: NOT
74586: IFFALSE 74590
// exit ;
74588: GO 74655
// result := 0 ;
74590: LD_ADDR_VAR 0 2
74594: PUSH
74595: LD_INT 0
74597: ST_TO_ADDR
// if GetTaskList ( sci ) then
74598: LD_VAR 0 1
74602: PPUSH
74603: CALL_OW 437
74607: IFFALSE 74655
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
74609: LD_VAR 0 1
74613: PPUSH
74614: CALL_OW 437
74618: PUSH
74619: LD_INT 1
74621: ARRAY
74622: PUSH
74623: LD_INT 1
74625: ARRAY
74626: PUSH
74627: LD_STRING l
74629: EQUAL
74630: IFFALSE 74655
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
74632: LD_ADDR_VAR 0 2
74636: PUSH
74637: LD_VAR 0 1
74641: PPUSH
74642: CALL_OW 437
74646: PUSH
74647: LD_INT 1
74649: ARRAY
74650: PUSH
74651: LD_INT 4
74653: ARRAY
74654: ST_TO_ADDR
// end ;
74655: LD_VAR 0 2
74659: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
74660: LD_INT 0
74662: PPUSH
74663: PPUSH
74664: PPUSH
74665: PPUSH
// if not base_units then
74666: LD_VAR 0 1
74670: NOT
74671: IFFALSE 74675
// exit ;
74673: GO 74762
// result := false ;
74675: LD_ADDR_VAR 0 2
74679: PUSH
74680: LD_INT 0
74682: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
74683: LD_ADDR_VAR 0 5
74687: PUSH
74688: LD_VAR 0 1
74692: PPUSH
74693: LD_INT 21
74695: PUSH
74696: LD_INT 3
74698: PUSH
74699: EMPTY
74700: LIST
74701: LIST
74702: PPUSH
74703: CALL_OW 72
74707: ST_TO_ADDR
// if not tmp then
74708: LD_VAR 0 5
74712: NOT
74713: IFFALSE 74717
// exit ;
74715: GO 74762
// for i in tmp do
74717: LD_ADDR_VAR 0 3
74721: PUSH
74722: LD_VAR 0 5
74726: PUSH
74727: FOR_IN
74728: IFFALSE 74760
// begin result := EnemyInRange ( i , 22 ) ;
74730: LD_ADDR_VAR 0 2
74734: PUSH
74735: LD_VAR 0 3
74739: PPUSH
74740: LD_INT 22
74742: PPUSH
74743: CALL 72349 0 2
74747: ST_TO_ADDR
// if result then
74748: LD_VAR 0 2
74752: IFFALSE 74758
// exit ;
74754: POP
74755: POP
74756: GO 74762
// end ;
74758: GO 74727
74760: POP
74761: POP
// end ;
74762: LD_VAR 0 2
74766: RET
// export function FilterByTag ( units , tag ) ; begin
74767: LD_INT 0
74769: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
74770: LD_ADDR_VAR 0 3
74774: PUSH
74775: LD_VAR 0 1
74779: PPUSH
74780: LD_INT 120
74782: PUSH
74783: LD_VAR 0 2
74787: PUSH
74788: EMPTY
74789: LIST
74790: LIST
74791: PPUSH
74792: CALL_OW 72
74796: ST_TO_ADDR
// end ;
74797: LD_VAR 0 3
74801: RET
// export function IsDriver ( un ) ; begin
74802: LD_INT 0
74804: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
74805: LD_ADDR_VAR 0 2
74809: PUSH
74810: LD_VAR 0 1
74814: PUSH
74815: LD_INT 55
74817: PUSH
74818: EMPTY
74819: LIST
74820: PPUSH
74821: CALL_OW 69
74825: IN
74826: ST_TO_ADDR
// end ;
74827: LD_VAR 0 2
74831: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
74832: LD_INT 0
74834: PPUSH
74835: PPUSH
// list := [ ] ;
74836: LD_ADDR_VAR 0 5
74840: PUSH
74841: EMPTY
74842: ST_TO_ADDR
// case d of 0 :
74843: LD_VAR 0 3
74847: PUSH
74848: LD_INT 0
74850: DOUBLE
74851: EQUAL
74852: IFTRUE 74856
74854: GO 74989
74856: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
74857: LD_ADDR_VAR 0 5
74861: PUSH
74862: LD_VAR 0 1
74866: PUSH
74867: LD_INT 4
74869: MINUS
74870: PUSH
74871: LD_VAR 0 2
74875: PUSH
74876: LD_INT 4
74878: MINUS
74879: PUSH
74880: LD_INT 2
74882: PUSH
74883: EMPTY
74884: LIST
74885: LIST
74886: LIST
74887: PUSH
74888: LD_VAR 0 1
74892: PUSH
74893: LD_INT 3
74895: MINUS
74896: PUSH
74897: LD_VAR 0 2
74901: PUSH
74902: LD_INT 1
74904: PUSH
74905: EMPTY
74906: LIST
74907: LIST
74908: LIST
74909: PUSH
74910: LD_VAR 0 1
74914: PUSH
74915: LD_INT 4
74917: PLUS
74918: PUSH
74919: LD_VAR 0 2
74923: PUSH
74924: LD_INT 4
74926: PUSH
74927: EMPTY
74928: LIST
74929: LIST
74930: LIST
74931: PUSH
74932: LD_VAR 0 1
74936: PUSH
74937: LD_INT 3
74939: PLUS
74940: PUSH
74941: LD_VAR 0 2
74945: PUSH
74946: LD_INT 3
74948: PLUS
74949: PUSH
74950: LD_INT 5
74952: PUSH
74953: EMPTY
74954: LIST
74955: LIST
74956: LIST
74957: PUSH
74958: LD_VAR 0 1
74962: PUSH
74963: LD_VAR 0 2
74967: PUSH
74968: LD_INT 4
74970: PLUS
74971: PUSH
74972: LD_INT 0
74974: PUSH
74975: EMPTY
74976: LIST
74977: LIST
74978: LIST
74979: PUSH
74980: EMPTY
74981: LIST
74982: LIST
74983: LIST
74984: LIST
74985: LIST
74986: ST_TO_ADDR
// end ; 1 :
74987: GO 75687
74989: LD_INT 1
74991: DOUBLE
74992: EQUAL
74993: IFTRUE 74997
74995: GO 75130
74997: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
74998: LD_ADDR_VAR 0 5
75002: PUSH
75003: LD_VAR 0 1
75007: PUSH
75008: LD_VAR 0 2
75012: PUSH
75013: LD_INT 4
75015: MINUS
75016: PUSH
75017: LD_INT 3
75019: PUSH
75020: EMPTY
75021: LIST
75022: LIST
75023: LIST
75024: PUSH
75025: LD_VAR 0 1
75029: PUSH
75030: LD_INT 3
75032: MINUS
75033: PUSH
75034: LD_VAR 0 2
75038: PUSH
75039: LD_INT 3
75041: MINUS
75042: PUSH
75043: LD_INT 2
75045: PUSH
75046: EMPTY
75047: LIST
75048: LIST
75049: LIST
75050: PUSH
75051: LD_VAR 0 1
75055: PUSH
75056: LD_INT 4
75058: MINUS
75059: PUSH
75060: LD_VAR 0 2
75064: PUSH
75065: LD_INT 1
75067: PUSH
75068: EMPTY
75069: LIST
75070: LIST
75071: LIST
75072: PUSH
75073: LD_VAR 0 1
75077: PUSH
75078: LD_VAR 0 2
75082: PUSH
75083: LD_INT 3
75085: PLUS
75086: PUSH
75087: LD_INT 0
75089: PUSH
75090: EMPTY
75091: LIST
75092: LIST
75093: LIST
75094: PUSH
75095: LD_VAR 0 1
75099: PUSH
75100: LD_INT 4
75102: PLUS
75103: PUSH
75104: LD_VAR 0 2
75108: PUSH
75109: LD_INT 4
75111: PLUS
75112: PUSH
75113: LD_INT 5
75115: PUSH
75116: EMPTY
75117: LIST
75118: LIST
75119: LIST
75120: PUSH
75121: EMPTY
75122: LIST
75123: LIST
75124: LIST
75125: LIST
75126: LIST
75127: ST_TO_ADDR
// end ; 2 :
75128: GO 75687
75130: LD_INT 2
75132: DOUBLE
75133: EQUAL
75134: IFTRUE 75138
75136: GO 75267
75138: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
75139: LD_ADDR_VAR 0 5
75143: PUSH
75144: LD_VAR 0 1
75148: PUSH
75149: LD_VAR 0 2
75153: PUSH
75154: LD_INT 3
75156: MINUS
75157: PUSH
75158: LD_INT 3
75160: PUSH
75161: EMPTY
75162: LIST
75163: LIST
75164: LIST
75165: PUSH
75166: LD_VAR 0 1
75170: PUSH
75171: LD_INT 4
75173: PLUS
75174: PUSH
75175: LD_VAR 0 2
75179: PUSH
75180: LD_INT 4
75182: PUSH
75183: EMPTY
75184: LIST
75185: LIST
75186: LIST
75187: PUSH
75188: LD_VAR 0 1
75192: PUSH
75193: LD_VAR 0 2
75197: PUSH
75198: LD_INT 4
75200: PLUS
75201: PUSH
75202: LD_INT 0
75204: PUSH
75205: EMPTY
75206: LIST
75207: LIST
75208: LIST
75209: PUSH
75210: LD_VAR 0 1
75214: PUSH
75215: LD_INT 3
75217: MINUS
75218: PUSH
75219: LD_VAR 0 2
75223: PUSH
75224: LD_INT 1
75226: PUSH
75227: EMPTY
75228: LIST
75229: LIST
75230: LIST
75231: PUSH
75232: LD_VAR 0 1
75236: PUSH
75237: LD_INT 4
75239: MINUS
75240: PUSH
75241: LD_VAR 0 2
75245: PUSH
75246: LD_INT 4
75248: MINUS
75249: PUSH
75250: LD_INT 2
75252: PUSH
75253: EMPTY
75254: LIST
75255: LIST
75256: LIST
75257: PUSH
75258: EMPTY
75259: LIST
75260: LIST
75261: LIST
75262: LIST
75263: LIST
75264: ST_TO_ADDR
// end ; 3 :
75265: GO 75687
75267: LD_INT 3
75269: DOUBLE
75270: EQUAL
75271: IFTRUE 75275
75273: GO 75408
75275: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
75276: LD_ADDR_VAR 0 5
75280: PUSH
75281: LD_VAR 0 1
75285: PUSH
75286: LD_INT 3
75288: PLUS
75289: PUSH
75290: LD_VAR 0 2
75294: PUSH
75295: LD_INT 4
75297: PUSH
75298: EMPTY
75299: LIST
75300: LIST
75301: LIST
75302: PUSH
75303: LD_VAR 0 1
75307: PUSH
75308: LD_INT 4
75310: PLUS
75311: PUSH
75312: LD_VAR 0 2
75316: PUSH
75317: LD_INT 4
75319: PLUS
75320: PUSH
75321: LD_INT 5
75323: PUSH
75324: EMPTY
75325: LIST
75326: LIST
75327: LIST
75328: PUSH
75329: LD_VAR 0 1
75333: PUSH
75334: LD_INT 4
75336: MINUS
75337: PUSH
75338: LD_VAR 0 2
75342: PUSH
75343: LD_INT 1
75345: PUSH
75346: EMPTY
75347: LIST
75348: LIST
75349: LIST
75350: PUSH
75351: LD_VAR 0 1
75355: PUSH
75356: LD_VAR 0 2
75360: PUSH
75361: LD_INT 4
75363: MINUS
75364: PUSH
75365: LD_INT 3
75367: PUSH
75368: EMPTY
75369: LIST
75370: LIST
75371: LIST
75372: PUSH
75373: LD_VAR 0 1
75377: PUSH
75378: LD_INT 3
75380: MINUS
75381: PUSH
75382: LD_VAR 0 2
75386: PUSH
75387: LD_INT 3
75389: MINUS
75390: PUSH
75391: LD_INT 2
75393: PUSH
75394: EMPTY
75395: LIST
75396: LIST
75397: LIST
75398: PUSH
75399: EMPTY
75400: LIST
75401: LIST
75402: LIST
75403: LIST
75404: LIST
75405: ST_TO_ADDR
// end ; 4 :
75406: GO 75687
75408: LD_INT 4
75410: DOUBLE
75411: EQUAL
75412: IFTRUE 75416
75414: GO 75549
75416: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
75417: LD_ADDR_VAR 0 5
75421: PUSH
75422: LD_VAR 0 1
75426: PUSH
75427: LD_VAR 0 2
75431: PUSH
75432: LD_INT 4
75434: PLUS
75435: PUSH
75436: LD_INT 0
75438: PUSH
75439: EMPTY
75440: LIST
75441: LIST
75442: LIST
75443: PUSH
75444: LD_VAR 0 1
75448: PUSH
75449: LD_INT 3
75451: PLUS
75452: PUSH
75453: LD_VAR 0 2
75457: PUSH
75458: LD_INT 3
75460: PLUS
75461: PUSH
75462: LD_INT 5
75464: PUSH
75465: EMPTY
75466: LIST
75467: LIST
75468: LIST
75469: PUSH
75470: LD_VAR 0 1
75474: PUSH
75475: LD_INT 4
75477: PLUS
75478: PUSH
75479: LD_VAR 0 2
75483: PUSH
75484: LD_INT 4
75486: PUSH
75487: EMPTY
75488: LIST
75489: LIST
75490: LIST
75491: PUSH
75492: LD_VAR 0 1
75496: PUSH
75497: LD_VAR 0 2
75501: PUSH
75502: LD_INT 3
75504: MINUS
75505: PUSH
75506: LD_INT 3
75508: PUSH
75509: EMPTY
75510: LIST
75511: LIST
75512: LIST
75513: PUSH
75514: LD_VAR 0 1
75518: PUSH
75519: LD_INT 4
75521: MINUS
75522: PUSH
75523: LD_VAR 0 2
75527: PUSH
75528: LD_INT 4
75530: MINUS
75531: PUSH
75532: LD_INT 2
75534: PUSH
75535: EMPTY
75536: LIST
75537: LIST
75538: LIST
75539: PUSH
75540: EMPTY
75541: LIST
75542: LIST
75543: LIST
75544: LIST
75545: LIST
75546: ST_TO_ADDR
// end ; 5 :
75547: GO 75687
75549: LD_INT 5
75551: DOUBLE
75552: EQUAL
75553: IFTRUE 75557
75555: GO 75686
75557: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
75558: LD_ADDR_VAR 0 5
75562: PUSH
75563: LD_VAR 0 1
75567: PUSH
75568: LD_INT 4
75570: MINUS
75571: PUSH
75572: LD_VAR 0 2
75576: PUSH
75577: LD_INT 1
75579: PUSH
75580: EMPTY
75581: LIST
75582: LIST
75583: LIST
75584: PUSH
75585: LD_VAR 0 1
75589: PUSH
75590: LD_VAR 0 2
75594: PUSH
75595: LD_INT 4
75597: MINUS
75598: PUSH
75599: LD_INT 3
75601: PUSH
75602: EMPTY
75603: LIST
75604: LIST
75605: LIST
75606: PUSH
75607: LD_VAR 0 1
75611: PUSH
75612: LD_INT 4
75614: PLUS
75615: PUSH
75616: LD_VAR 0 2
75620: PUSH
75621: LD_INT 4
75623: PLUS
75624: PUSH
75625: LD_INT 5
75627: PUSH
75628: EMPTY
75629: LIST
75630: LIST
75631: LIST
75632: PUSH
75633: LD_VAR 0 1
75637: PUSH
75638: LD_INT 3
75640: PLUS
75641: PUSH
75642: LD_VAR 0 2
75646: PUSH
75647: LD_INT 4
75649: PUSH
75650: EMPTY
75651: LIST
75652: LIST
75653: LIST
75654: PUSH
75655: LD_VAR 0 1
75659: PUSH
75660: LD_VAR 0 2
75664: PUSH
75665: LD_INT 3
75667: PLUS
75668: PUSH
75669: LD_INT 0
75671: PUSH
75672: EMPTY
75673: LIST
75674: LIST
75675: LIST
75676: PUSH
75677: EMPTY
75678: LIST
75679: LIST
75680: LIST
75681: LIST
75682: LIST
75683: ST_TO_ADDR
// end ; end ;
75684: GO 75687
75686: POP
// result := list ;
75687: LD_ADDR_VAR 0 4
75691: PUSH
75692: LD_VAR 0 5
75696: ST_TO_ADDR
// end ;
75697: LD_VAR 0 4
75701: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
75702: LD_INT 0
75704: PPUSH
75705: PPUSH
75706: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
75707: LD_VAR 0 1
75711: NOT
75712: PUSH
75713: LD_VAR 0 2
75717: PUSH
75718: LD_INT 1
75720: PUSH
75721: LD_INT 2
75723: PUSH
75724: LD_INT 3
75726: PUSH
75727: LD_INT 4
75729: PUSH
75730: EMPTY
75731: LIST
75732: LIST
75733: LIST
75734: LIST
75735: IN
75736: NOT
75737: OR
75738: IFFALSE 75742
// exit ;
75740: GO 75825
// tmp := [ ] ;
75742: LD_ADDR_VAR 0 5
75746: PUSH
75747: EMPTY
75748: ST_TO_ADDR
// for i in units do
75749: LD_ADDR_VAR 0 4
75753: PUSH
75754: LD_VAR 0 1
75758: PUSH
75759: FOR_IN
75760: IFFALSE 75794
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
75762: LD_ADDR_VAR 0 5
75766: PUSH
75767: LD_VAR 0 5
75771: PPUSH
75772: LD_VAR 0 4
75776: PPUSH
75777: LD_VAR 0 2
75781: PPUSH
75782: CALL_OW 259
75786: PPUSH
75787: CALL 77185 0 2
75791: ST_TO_ADDR
75792: GO 75759
75794: POP
75795: POP
// if not tmp then
75796: LD_VAR 0 5
75800: NOT
75801: IFFALSE 75805
// exit ;
75803: GO 75825
// result := SortListByListDesc ( units , tmp ) ;
75805: LD_ADDR_VAR 0 3
75809: PUSH
75810: LD_VAR 0 1
75814: PPUSH
75815: LD_VAR 0 5
75819: PPUSH
75820: CALL_OW 77
75824: ST_TO_ADDR
// end ;
75825: LD_VAR 0 3
75829: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
75830: LD_INT 0
75832: PPUSH
75833: PPUSH
75834: PPUSH
// result := false ;
75835: LD_ADDR_VAR 0 3
75839: PUSH
75840: LD_INT 0
75842: ST_TO_ADDR
// if not building then
75843: LD_VAR 0 2
75847: NOT
75848: IFFALSE 75852
// exit ;
75850: GO 75990
// x := GetX ( building ) ;
75852: LD_ADDR_VAR 0 4
75856: PUSH
75857: LD_VAR 0 2
75861: PPUSH
75862: CALL_OW 250
75866: ST_TO_ADDR
// y := GetY ( building ) ;
75867: LD_ADDR_VAR 0 5
75871: PUSH
75872: LD_VAR 0 2
75876: PPUSH
75877: CALL_OW 251
75881: ST_TO_ADDR
// if not x or not y then
75882: LD_VAR 0 4
75886: NOT
75887: PUSH
75888: LD_VAR 0 5
75892: NOT
75893: OR
75894: IFFALSE 75898
// exit ;
75896: GO 75990
// if GetTaskList ( unit ) then
75898: LD_VAR 0 1
75902: PPUSH
75903: CALL_OW 437
75907: IFFALSE 75990
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75909: LD_STRING e
75911: PUSH
75912: LD_VAR 0 1
75916: PPUSH
75917: CALL_OW 437
75921: PUSH
75922: LD_INT 1
75924: ARRAY
75925: PUSH
75926: LD_INT 1
75928: ARRAY
75929: EQUAL
75930: PUSH
75931: LD_VAR 0 4
75935: PUSH
75936: LD_VAR 0 1
75940: PPUSH
75941: CALL_OW 437
75945: PUSH
75946: LD_INT 1
75948: ARRAY
75949: PUSH
75950: LD_INT 2
75952: ARRAY
75953: EQUAL
75954: AND
75955: PUSH
75956: LD_VAR 0 5
75960: PUSH
75961: LD_VAR 0 1
75965: PPUSH
75966: CALL_OW 437
75970: PUSH
75971: LD_INT 1
75973: ARRAY
75974: PUSH
75975: LD_INT 3
75977: ARRAY
75978: EQUAL
75979: AND
75980: IFFALSE 75990
// result := true end ;
75982: LD_ADDR_VAR 0 3
75986: PUSH
75987: LD_INT 1
75989: ST_TO_ADDR
// end ;
75990: LD_VAR 0 3
75994: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
75995: LD_INT 0
75997: PPUSH
// result := false ;
75998: LD_ADDR_VAR 0 4
76002: PUSH
76003: LD_INT 0
76005: ST_TO_ADDR
// if GetTaskList ( unit ) then
76006: LD_VAR 0 1
76010: PPUSH
76011: CALL_OW 437
76015: IFFALSE 76098
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76017: LD_STRING M
76019: PUSH
76020: LD_VAR 0 1
76024: PPUSH
76025: CALL_OW 437
76029: PUSH
76030: LD_INT 1
76032: ARRAY
76033: PUSH
76034: LD_INT 1
76036: ARRAY
76037: EQUAL
76038: PUSH
76039: LD_VAR 0 2
76043: PUSH
76044: LD_VAR 0 1
76048: PPUSH
76049: CALL_OW 437
76053: PUSH
76054: LD_INT 1
76056: ARRAY
76057: PUSH
76058: LD_INT 2
76060: ARRAY
76061: EQUAL
76062: AND
76063: PUSH
76064: LD_VAR 0 3
76068: PUSH
76069: LD_VAR 0 1
76073: PPUSH
76074: CALL_OW 437
76078: PUSH
76079: LD_INT 1
76081: ARRAY
76082: PUSH
76083: LD_INT 3
76085: ARRAY
76086: EQUAL
76087: AND
76088: IFFALSE 76098
// result := true ;
76090: LD_ADDR_VAR 0 4
76094: PUSH
76095: LD_INT 1
76097: ST_TO_ADDR
// end ; end ;
76098: LD_VAR 0 4
76102: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
76103: LD_INT 0
76105: PPUSH
76106: PPUSH
76107: PPUSH
76108: PPUSH
// if not unit or not area then
76109: LD_VAR 0 1
76113: NOT
76114: PUSH
76115: LD_VAR 0 2
76119: NOT
76120: OR
76121: IFFALSE 76125
// exit ;
76123: GO 76288
// tmp := AreaToList ( area , i ) ;
76125: LD_ADDR_VAR 0 6
76129: PUSH
76130: LD_VAR 0 2
76134: PPUSH
76135: LD_VAR 0 5
76139: PPUSH
76140: CALL_OW 517
76144: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
76145: LD_ADDR_VAR 0 5
76149: PUSH
76150: DOUBLE
76151: LD_INT 1
76153: DEC
76154: ST_TO_ADDR
76155: LD_VAR 0 6
76159: PUSH
76160: LD_INT 1
76162: ARRAY
76163: PUSH
76164: FOR_TO
76165: IFFALSE 76286
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
76167: LD_ADDR_VAR 0 7
76171: PUSH
76172: LD_VAR 0 6
76176: PUSH
76177: LD_INT 1
76179: ARRAY
76180: PUSH
76181: LD_VAR 0 5
76185: ARRAY
76186: PUSH
76187: LD_VAR 0 6
76191: PUSH
76192: LD_INT 2
76194: ARRAY
76195: PUSH
76196: LD_VAR 0 5
76200: ARRAY
76201: PUSH
76202: EMPTY
76203: LIST
76204: LIST
76205: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
76206: LD_INT 92
76208: PUSH
76209: LD_VAR 0 7
76213: PUSH
76214: LD_INT 1
76216: ARRAY
76217: PUSH
76218: LD_VAR 0 7
76222: PUSH
76223: LD_INT 2
76225: ARRAY
76226: PUSH
76227: LD_INT 3
76229: PUSH
76230: EMPTY
76231: LIST
76232: LIST
76233: LIST
76234: LIST
76235: PPUSH
76236: CALL_OW 69
76240: PUSH
76241: LD_INT 0
76243: EQUAL
76244: IFFALSE 76284
// begin PlaceUnitArea ( unit , area , mode ) ;
76246: LD_VAR 0 1
76250: PPUSH
76251: LD_VAR 0 2
76255: PPUSH
76256: LD_VAR 0 3
76260: PPUSH
76261: CALL_OW 49
// result := IsPlaced ( unit ) ;
76265: LD_ADDR_VAR 0 4
76269: PUSH
76270: LD_VAR 0 1
76274: PPUSH
76275: CALL_OW 305
76279: ST_TO_ADDR
// exit ;
76280: POP
76281: POP
76282: GO 76288
// end ; end ;
76284: GO 76164
76286: POP
76287: POP
// end ;
76288: LD_VAR 0 4
76292: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
76293: LD_INT 0
76295: PPUSH
76296: PPUSH
76297: PPUSH
// if not side or side > 8 then
76298: LD_VAR 0 1
76302: NOT
76303: PUSH
76304: LD_VAR 0 1
76308: PUSH
76309: LD_INT 8
76311: GREATER
76312: OR
76313: IFFALSE 76317
// exit ;
76315: GO 76504
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
76317: LD_ADDR_VAR 0 4
76321: PUSH
76322: LD_INT 22
76324: PUSH
76325: LD_VAR 0 1
76329: PUSH
76330: EMPTY
76331: LIST
76332: LIST
76333: PUSH
76334: LD_INT 21
76336: PUSH
76337: LD_INT 3
76339: PUSH
76340: EMPTY
76341: LIST
76342: LIST
76343: PUSH
76344: EMPTY
76345: LIST
76346: LIST
76347: PPUSH
76348: CALL_OW 69
76352: ST_TO_ADDR
// if not tmp then
76353: LD_VAR 0 4
76357: NOT
76358: IFFALSE 76362
// exit ;
76360: GO 76504
// enable_addtolog := true ;
76362: LD_ADDR_OWVAR 81
76366: PUSH
76367: LD_INT 1
76369: ST_TO_ADDR
// AddToLog ( [ ) ;
76370: LD_STRING [
76372: PPUSH
76373: CALL_OW 561
// for i in tmp do
76377: LD_ADDR_VAR 0 3
76381: PUSH
76382: LD_VAR 0 4
76386: PUSH
76387: FOR_IN
76388: IFFALSE 76495
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
76390: LD_STRING [
76392: PUSH
76393: LD_VAR 0 3
76397: PPUSH
76398: CALL_OW 266
76402: STR
76403: PUSH
76404: LD_STRING , 
76406: STR
76407: PUSH
76408: LD_VAR 0 3
76412: PPUSH
76413: CALL_OW 250
76417: STR
76418: PUSH
76419: LD_STRING , 
76421: STR
76422: PUSH
76423: LD_VAR 0 3
76427: PPUSH
76428: CALL_OW 251
76432: STR
76433: PUSH
76434: LD_STRING , 
76436: STR
76437: PUSH
76438: LD_VAR 0 3
76442: PPUSH
76443: CALL_OW 254
76447: STR
76448: PUSH
76449: LD_STRING , 
76451: STR
76452: PUSH
76453: LD_VAR 0 3
76457: PPUSH
76458: LD_INT 1
76460: PPUSH
76461: CALL_OW 268
76465: STR
76466: PUSH
76467: LD_STRING , 
76469: STR
76470: PUSH
76471: LD_VAR 0 3
76475: PPUSH
76476: LD_INT 2
76478: PPUSH
76479: CALL_OW 268
76483: STR
76484: PUSH
76485: LD_STRING ],
76487: STR
76488: PPUSH
76489: CALL_OW 561
// end ;
76493: GO 76387
76495: POP
76496: POP
// AddToLog ( ]; ) ;
76497: LD_STRING ];
76499: PPUSH
76500: CALL_OW 561
// end ;
76504: LD_VAR 0 2
76508: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
76509: LD_INT 0
76511: PPUSH
76512: PPUSH
76513: PPUSH
76514: PPUSH
76515: PPUSH
// if not area or not rate or not max then
76516: LD_VAR 0 1
76520: NOT
76521: PUSH
76522: LD_VAR 0 2
76526: NOT
76527: OR
76528: PUSH
76529: LD_VAR 0 4
76533: NOT
76534: OR
76535: IFFALSE 76539
// exit ;
76537: GO 76728
// while 1 do
76539: LD_INT 1
76541: IFFALSE 76728
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
76543: LD_ADDR_VAR 0 9
76547: PUSH
76548: LD_VAR 0 1
76552: PPUSH
76553: LD_INT 1
76555: PPUSH
76556: CALL_OW 287
76560: PUSH
76561: LD_INT 10
76563: MUL
76564: ST_TO_ADDR
// r := rate / 10 ;
76565: LD_ADDR_VAR 0 7
76569: PUSH
76570: LD_VAR 0 2
76574: PUSH
76575: LD_INT 10
76577: DIVREAL
76578: ST_TO_ADDR
// time := 1 1$00 ;
76579: LD_ADDR_VAR 0 8
76583: PUSH
76584: LD_INT 2100
76586: ST_TO_ADDR
// if amount < min then
76587: LD_VAR 0 9
76591: PUSH
76592: LD_VAR 0 3
76596: LESS
76597: IFFALSE 76615
// r := r * 2 else
76599: LD_ADDR_VAR 0 7
76603: PUSH
76604: LD_VAR 0 7
76608: PUSH
76609: LD_INT 2
76611: MUL
76612: ST_TO_ADDR
76613: GO 76641
// if amount > max then
76615: LD_VAR 0 9
76619: PUSH
76620: LD_VAR 0 4
76624: GREATER
76625: IFFALSE 76641
// r := r / 2 ;
76627: LD_ADDR_VAR 0 7
76631: PUSH
76632: LD_VAR 0 7
76636: PUSH
76637: LD_INT 2
76639: DIVREAL
76640: ST_TO_ADDR
// time := time / r ;
76641: LD_ADDR_VAR 0 8
76645: PUSH
76646: LD_VAR 0 8
76650: PUSH
76651: LD_VAR 0 7
76655: DIVREAL
76656: ST_TO_ADDR
// if time < 0 then
76657: LD_VAR 0 8
76661: PUSH
76662: LD_INT 0
76664: LESS
76665: IFFALSE 76682
// time := time * - 1 ;
76667: LD_ADDR_VAR 0 8
76671: PUSH
76672: LD_VAR 0 8
76676: PUSH
76677: LD_INT 1
76679: NEG
76680: MUL
76681: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
76682: LD_VAR 0 8
76686: PUSH
76687: LD_INT 35
76689: PPUSH
76690: LD_INT 875
76692: PPUSH
76693: CALL_OW 12
76697: PLUS
76698: PPUSH
76699: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
76703: LD_INT 1
76705: PPUSH
76706: LD_INT 5
76708: PPUSH
76709: CALL_OW 12
76713: PPUSH
76714: LD_VAR 0 1
76718: PPUSH
76719: LD_INT 1
76721: PPUSH
76722: CALL_OW 55
// end ;
76726: GO 76539
// end ;
76728: LD_VAR 0 5
76732: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
76733: LD_INT 0
76735: PPUSH
76736: PPUSH
76737: PPUSH
76738: PPUSH
76739: PPUSH
76740: PPUSH
76741: PPUSH
76742: PPUSH
// if not turrets or not factories then
76743: LD_VAR 0 1
76747: NOT
76748: PUSH
76749: LD_VAR 0 2
76753: NOT
76754: OR
76755: IFFALSE 76759
// exit ;
76757: GO 77066
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
76759: LD_ADDR_VAR 0 10
76763: PUSH
76764: LD_INT 5
76766: PUSH
76767: LD_INT 6
76769: PUSH
76770: EMPTY
76771: LIST
76772: LIST
76773: PUSH
76774: LD_INT 2
76776: PUSH
76777: LD_INT 4
76779: PUSH
76780: EMPTY
76781: LIST
76782: LIST
76783: PUSH
76784: LD_INT 3
76786: PUSH
76787: LD_INT 5
76789: PUSH
76790: EMPTY
76791: LIST
76792: LIST
76793: PUSH
76794: EMPTY
76795: LIST
76796: LIST
76797: LIST
76798: PUSH
76799: LD_INT 24
76801: PUSH
76802: LD_INT 25
76804: PUSH
76805: EMPTY
76806: LIST
76807: LIST
76808: PUSH
76809: LD_INT 23
76811: PUSH
76812: LD_INT 27
76814: PUSH
76815: EMPTY
76816: LIST
76817: LIST
76818: PUSH
76819: EMPTY
76820: LIST
76821: LIST
76822: PUSH
76823: LD_INT 42
76825: PUSH
76826: LD_INT 43
76828: PUSH
76829: EMPTY
76830: LIST
76831: LIST
76832: PUSH
76833: LD_INT 44
76835: PUSH
76836: LD_INT 46
76838: PUSH
76839: EMPTY
76840: LIST
76841: LIST
76842: PUSH
76843: LD_INT 45
76845: PUSH
76846: LD_INT 47
76848: PUSH
76849: EMPTY
76850: LIST
76851: LIST
76852: PUSH
76853: EMPTY
76854: LIST
76855: LIST
76856: LIST
76857: PUSH
76858: EMPTY
76859: LIST
76860: LIST
76861: LIST
76862: ST_TO_ADDR
// result := [ ] ;
76863: LD_ADDR_VAR 0 3
76867: PUSH
76868: EMPTY
76869: ST_TO_ADDR
// for i in turrets do
76870: LD_ADDR_VAR 0 4
76874: PUSH
76875: LD_VAR 0 1
76879: PUSH
76880: FOR_IN
76881: IFFALSE 77064
// begin nat := GetNation ( i ) ;
76883: LD_ADDR_VAR 0 7
76887: PUSH
76888: LD_VAR 0 4
76892: PPUSH
76893: CALL_OW 248
76897: ST_TO_ADDR
// weapon := 0 ;
76898: LD_ADDR_VAR 0 8
76902: PUSH
76903: LD_INT 0
76905: ST_TO_ADDR
// if not nat then
76906: LD_VAR 0 7
76910: NOT
76911: IFFALSE 76915
// continue ;
76913: GO 76880
// for j in list [ nat ] do
76915: LD_ADDR_VAR 0 5
76919: PUSH
76920: LD_VAR 0 10
76924: PUSH
76925: LD_VAR 0 7
76929: ARRAY
76930: PUSH
76931: FOR_IN
76932: IFFALSE 76973
// if GetBWeapon ( i ) = j [ 1 ] then
76934: LD_VAR 0 4
76938: PPUSH
76939: CALL_OW 269
76943: PUSH
76944: LD_VAR 0 5
76948: PUSH
76949: LD_INT 1
76951: ARRAY
76952: EQUAL
76953: IFFALSE 76971
// begin weapon := j [ 2 ] ;
76955: LD_ADDR_VAR 0 8
76959: PUSH
76960: LD_VAR 0 5
76964: PUSH
76965: LD_INT 2
76967: ARRAY
76968: ST_TO_ADDR
// break ;
76969: GO 76973
// end ;
76971: GO 76931
76973: POP
76974: POP
// if not weapon then
76975: LD_VAR 0 8
76979: NOT
76980: IFFALSE 76984
// continue ;
76982: GO 76880
// for k in factories do
76984: LD_ADDR_VAR 0 6
76988: PUSH
76989: LD_VAR 0 2
76993: PUSH
76994: FOR_IN
76995: IFFALSE 77060
// begin weapons := AvailableWeaponList ( k ) ;
76997: LD_ADDR_VAR 0 9
77001: PUSH
77002: LD_VAR 0 6
77006: PPUSH
77007: CALL_OW 478
77011: ST_TO_ADDR
// if not weapons then
77012: LD_VAR 0 9
77016: NOT
77017: IFFALSE 77021
// continue ;
77019: GO 76994
// if weapon in weapons then
77021: LD_VAR 0 8
77025: PUSH
77026: LD_VAR 0 9
77030: IN
77031: IFFALSE 77058
// begin result := [ i , weapon ] ;
77033: LD_ADDR_VAR 0 3
77037: PUSH
77038: LD_VAR 0 4
77042: PUSH
77043: LD_VAR 0 8
77047: PUSH
77048: EMPTY
77049: LIST
77050: LIST
77051: ST_TO_ADDR
// exit ;
77052: POP
77053: POP
77054: POP
77055: POP
77056: GO 77066
// end ; end ;
77058: GO 76994
77060: POP
77061: POP
// end ;
77062: GO 76880
77064: POP
77065: POP
// end ;
77066: LD_VAR 0 3
77070: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
77071: LD_INT 0
77073: PPUSH
// if not side or side > 8 then
77074: LD_VAR 0 3
77078: NOT
77079: PUSH
77080: LD_VAR 0 3
77084: PUSH
77085: LD_INT 8
77087: GREATER
77088: OR
77089: IFFALSE 77093
// exit ;
77091: GO 77152
// if not range then
77093: LD_VAR 0 4
77097: NOT
77098: IFFALSE 77109
// range := - 12 ;
77100: LD_ADDR_VAR 0 4
77104: PUSH
77105: LD_INT 12
77107: NEG
77108: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
77109: LD_VAR 0 1
77113: PPUSH
77114: LD_VAR 0 2
77118: PPUSH
77119: LD_VAR 0 3
77123: PPUSH
77124: LD_VAR 0 4
77128: PPUSH
77129: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
77133: LD_VAR 0 1
77137: PPUSH
77138: LD_VAR 0 2
77142: PPUSH
77143: LD_VAR 0 3
77147: PPUSH
77148: CALL_OW 331
// end ;
77152: LD_VAR 0 5
77156: RET
// export function Video ( mode ) ; begin
77157: LD_INT 0
77159: PPUSH
// ingame_video = mode ;
77160: LD_ADDR_OWVAR 52
77164: PUSH
77165: LD_VAR 0 1
77169: ST_TO_ADDR
// interface_hidden = mode ;
77170: LD_ADDR_OWVAR 54
77174: PUSH
77175: LD_VAR 0 1
77179: ST_TO_ADDR
// end ;
77180: LD_VAR 0 2
77184: RET
// export function Join ( array , element ) ; begin
77185: LD_INT 0
77187: PPUSH
// result := Replace ( array , array + 1 , element ) ;
77188: LD_ADDR_VAR 0 3
77192: PUSH
77193: LD_VAR 0 1
77197: PPUSH
77198: LD_VAR 0 1
77202: PUSH
77203: LD_INT 1
77205: PLUS
77206: PPUSH
77207: LD_VAR 0 2
77211: PPUSH
77212: CALL_OW 1
77216: ST_TO_ADDR
// end ;
77217: LD_VAR 0 3
77221: RET
// export function JoinUnion ( array , element ) ; begin
77222: LD_INT 0
77224: PPUSH
// result := array union element ;
77225: LD_ADDR_VAR 0 3
77229: PUSH
77230: LD_VAR 0 1
77234: PUSH
77235: LD_VAR 0 2
77239: UNION
77240: ST_TO_ADDR
// end ;
77241: LD_VAR 0 3
77245: RET
// export function GetBehemoths ( side ) ; begin
77246: LD_INT 0
77248: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
77249: LD_ADDR_VAR 0 2
77253: PUSH
77254: LD_INT 22
77256: PUSH
77257: LD_VAR 0 1
77261: PUSH
77262: EMPTY
77263: LIST
77264: LIST
77265: PUSH
77266: LD_INT 31
77268: PUSH
77269: LD_INT 25
77271: PUSH
77272: EMPTY
77273: LIST
77274: LIST
77275: PUSH
77276: EMPTY
77277: LIST
77278: LIST
77279: PPUSH
77280: CALL_OW 69
77284: ST_TO_ADDR
// end ;
77285: LD_VAR 0 2
77289: RET
// export function Shuffle ( array ) ; var i , index ; begin
77290: LD_INT 0
77292: PPUSH
77293: PPUSH
77294: PPUSH
// result := [ ] ;
77295: LD_ADDR_VAR 0 2
77299: PUSH
77300: EMPTY
77301: ST_TO_ADDR
// if not array then
77302: LD_VAR 0 1
77306: NOT
77307: IFFALSE 77311
// exit ;
77309: GO 77410
// Randomize ;
77311: CALL_OW 10
// for i = array downto 1 do
77315: LD_ADDR_VAR 0 3
77319: PUSH
77320: DOUBLE
77321: LD_VAR 0 1
77325: INC
77326: ST_TO_ADDR
77327: LD_INT 1
77329: PUSH
77330: FOR_DOWNTO
77331: IFFALSE 77408
// begin index := rand ( 1 , array ) ;
77333: LD_ADDR_VAR 0 4
77337: PUSH
77338: LD_INT 1
77340: PPUSH
77341: LD_VAR 0 1
77345: PPUSH
77346: CALL_OW 12
77350: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
77351: LD_ADDR_VAR 0 2
77355: PUSH
77356: LD_VAR 0 2
77360: PPUSH
77361: LD_VAR 0 2
77365: PUSH
77366: LD_INT 1
77368: PLUS
77369: PPUSH
77370: LD_VAR 0 1
77374: PUSH
77375: LD_VAR 0 4
77379: ARRAY
77380: PPUSH
77381: CALL_OW 2
77385: ST_TO_ADDR
// array := Delete ( array , index ) ;
77386: LD_ADDR_VAR 0 1
77390: PUSH
77391: LD_VAR 0 1
77395: PPUSH
77396: LD_VAR 0 4
77400: PPUSH
77401: CALL_OW 3
77405: ST_TO_ADDR
// end ;
77406: GO 77330
77408: POP
77409: POP
// end ;
77410: LD_VAR 0 2
77414: RET
// export function GetBaseMaterials ( base ) ; begin
77415: LD_INT 0
77417: PPUSH
// result := [ 0 , 0 , 0 ] ;
77418: LD_ADDR_VAR 0 2
77422: PUSH
77423: LD_INT 0
77425: PUSH
77426: LD_INT 0
77428: PUSH
77429: LD_INT 0
77431: PUSH
77432: EMPTY
77433: LIST
77434: LIST
77435: LIST
77436: ST_TO_ADDR
// if not base then
77437: LD_VAR 0 1
77441: NOT
77442: IFFALSE 77446
// exit ;
77444: GO 77495
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
77446: LD_ADDR_VAR 0 2
77450: PUSH
77451: LD_VAR 0 1
77455: PPUSH
77456: LD_INT 1
77458: PPUSH
77459: CALL_OW 275
77463: PUSH
77464: LD_VAR 0 1
77468: PPUSH
77469: LD_INT 2
77471: PPUSH
77472: CALL_OW 275
77476: PUSH
77477: LD_VAR 0 1
77481: PPUSH
77482: LD_INT 3
77484: PPUSH
77485: CALL_OW 275
77489: PUSH
77490: EMPTY
77491: LIST
77492: LIST
77493: LIST
77494: ST_TO_ADDR
// end ;
77495: LD_VAR 0 2
77499: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
77500: LD_INT 0
77502: PPUSH
77503: PPUSH
// result := array ;
77504: LD_ADDR_VAR 0 3
77508: PUSH
77509: LD_VAR 0 1
77513: ST_TO_ADDR
// if size >= result then
77514: LD_VAR 0 2
77518: PUSH
77519: LD_VAR 0 3
77523: GREATEREQUAL
77524: IFFALSE 77528
// exit ;
77526: GO 77578
// if size then
77528: LD_VAR 0 2
77532: IFFALSE 77578
// for i := array downto size do
77534: LD_ADDR_VAR 0 4
77538: PUSH
77539: DOUBLE
77540: LD_VAR 0 1
77544: INC
77545: ST_TO_ADDR
77546: LD_VAR 0 2
77550: PUSH
77551: FOR_DOWNTO
77552: IFFALSE 77576
// result := Delete ( result , result ) ;
77554: LD_ADDR_VAR 0 3
77558: PUSH
77559: LD_VAR 0 3
77563: PPUSH
77564: LD_VAR 0 3
77568: PPUSH
77569: CALL_OW 3
77573: ST_TO_ADDR
77574: GO 77551
77576: POP
77577: POP
// end ;
77578: LD_VAR 0 3
77582: RET
// export function ComExit ( unit ) ; var tmp ; begin
77583: LD_INT 0
77585: PPUSH
77586: PPUSH
// if not IsInUnit ( unit ) then
77587: LD_VAR 0 1
77591: PPUSH
77592: CALL_OW 310
77596: NOT
77597: IFFALSE 77601
// exit ;
77599: GO 77661
// tmp := IsInUnit ( unit ) ;
77601: LD_ADDR_VAR 0 3
77605: PUSH
77606: LD_VAR 0 1
77610: PPUSH
77611: CALL_OW 310
77615: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
77616: LD_VAR 0 3
77620: PPUSH
77621: CALL_OW 247
77625: PUSH
77626: LD_INT 2
77628: EQUAL
77629: IFFALSE 77642
// ComExitVehicle ( unit ) else
77631: LD_VAR 0 1
77635: PPUSH
77636: CALL_OW 121
77640: GO 77651
// ComExitBuilding ( unit ) ;
77642: LD_VAR 0 1
77646: PPUSH
77647: CALL_OW 122
// result := tmp ;
77651: LD_ADDR_VAR 0 2
77655: PUSH
77656: LD_VAR 0 3
77660: ST_TO_ADDR
// end ;
77661: LD_VAR 0 2
77665: RET
// export function ComExitAll ( units ) ; var i ; begin
77666: LD_INT 0
77668: PPUSH
77669: PPUSH
// if not units then
77670: LD_VAR 0 1
77674: NOT
77675: IFFALSE 77679
// exit ;
77677: GO 77705
// for i in units do
77679: LD_ADDR_VAR 0 3
77683: PUSH
77684: LD_VAR 0 1
77688: PUSH
77689: FOR_IN
77690: IFFALSE 77703
// ComExit ( i ) ;
77692: LD_VAR 0 3
77696: PPUSH
77697: CALL 77583 0 1
77701: GO 77689
77703: POP
77704: POP
// end ;
77705: LD_VAR 0 2
77709: RET
// export function ResetHc ; begin
77710: LD_INT 0
77712: PPUSH
// InitHc ;
77713: CALL_OW 19
// hc_importance := 0 ;
77717: LD_ADDR_OWVAR 32
77721: PUSH
77722: LD_INT 0
77724: ST_TO_ADDR
// end ;
77725: LD_VAR 0 1
77729: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
77730: LD_INT 0
77732: PPUSH
77733: PPUSH
77734: PPUSH
// _x := ( x1 + x2 ) div 2 ;
77735: LD_ADDR_VAR 0 6
77739: PUSH
77740: LD_VAR 0 1
77744: PUSH
77745: LD_VAR 0 3
77749: PLUS
77750: PUSH
77751: LD_INT 2
77753: DIV
77754: ST_TO_ADDR
// if _x < 0 then
77755: LD_VAR 0 6
77759: PUSH
77760: LD_INT 0
77762: LESS
77763: IFFALSE 77780
// _x := _x * - 1 ;
77765: LD_ADDR_VAR 0 6
77769: PUSH
77770: LD_VAR 0 6
77774: PUSH
77775: LD_INT 1
77777: NEG
77778: MUL
77779: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
77780: LD_ADDR_VAR 0 7
77784: PUSH
77785: LD_VAR 0 2
77789: PUSH
77790: LD_VAR 0 4
77794: PLUS
77795: PUSH
77796: LD_INT 2
77798: DIV
77799: ST_TO_ADDR
// if _y < 0 then
77800: LD_VAR 0 7
77804: PUSH
77805: LD_INT 0
77807: LESS
77808: IFFALSE 77825
// _y := _y * - 1 ;
77810: LD_ADDR_VAR 0 7
77814: PUSH
77815: LD_VAR 0 7
77819: PUSH
77820: LD_INT 1
77822: NEG
77823: MUL
77824: ST_TO_ADDR
// result := [ _x , _y ] ;
77825: LD_ADDR_VAR 0 5
77829: PUSH
77830: LD_VAR 0 6
77834: PUSH
77835: LD_VAR 0 7
77839: PUSH
77840: EMPTY
77841: LIST
77842: LIST
77843: ST_TO_ADDR
// end ;
77844: LD_VAR 0 5
77848: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
77849: LD_INT 0
77851: PPUSH
77852: PPUSH
77853: PPUSH
77854: PPUSH
// task := GetTaskList ( unit ) ;
77855: LD_ADDR_VAR 0 7
77859: PUSH
77860: LD_VAR 0 1
77864: PPUSH
77865: CALL_OW 437
77869: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
77870: LD_VAR 0 7
77874: NOT
77875: PUSH
77876: LD_VAR 0 1
77880: PPUSH
77881: LD_VAR 0 2
77885: PPUSH
77886: CALL_OW 308
77890: NOT
77891: AND
77892: IFFALSE 77896
// exit ;
77894: GO 78014
// if IsInArea ( unit , area ) then
77896: LD_VAR 0 1
77900: PPUSH
77901: LD_VAR 0 2
77905: PPUSH
77906: CALL_OW 308
77910: IFFALSE 77928
// begin ComMoveToArea ( unit , goAway ) ;
77912: LD_VAR 0 1
77916: PPUSH
77917: LD_VAR 0 3
77921: PPUSH
77922: CALL_OW 113
// exit ;
77926: GO 78014
// end ; if task [ 1 ] [ 1 ] <> M then
77928: LD_VAR 0 7
77932: PUSH
77933: LD_INT 1
77935: ARRAY
77936: PUSH
77937: LD_INT 1
77939: ARRAY
77940: PUSH
77941: LD_STRING M
77943: NONEQUAL
77944: IFFALSE 77948
// exit ;
77946: GO 78014
// x := task [ 1 ] [ 2 ] ;
77948: LD_ADDR_VAR 0 5
77952: PUSH
77953: LD_VAR 0 7
77957: PUSH
77958: LD_INT 1
77960: ARRAY
77961: PUSH
77962: LD_INT 2
77964: ARRAY
77965: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
77966: LD_ADDR_VAR 0 6
77970: PUSH
77971: LD_VAR 0 7
77975: PUSH
77976: LD_INT 1
77978: ARRAY
77979: PUSH
77980: LD_INT 3
77982: ARRAY
77983: ST_TO_ADDR
// if InArea ( x , y , area ) then
77984: LD_VAR 0 5
77988: PPUSH
77989: LD_VAR 0 6
77993: PPUSH
77994: LD_VAR 0 2
77998: PPUSH
77999: CALL_OW 309
78003: IFFALSE 78014
// ComStop ( unit ) ;
78005: LD_VAR 0 1
78009: PPUSH
78010: CALL_OW 141
// end ;
78014: LD_VAR 0 4
78018: RET
// export function Abs ( value ) ; begin
78019: LD_INT 0
78021: PPUSH
// result := value ;
78022: LD_ADDR_VAR 0 2
78026: PUSH
78027: LD_VAR 0 1
78031: ST_TO_ADDR
// if value < 0 then
78032: LD_VAR 0 1
78036: PUSH
78037: LD_INT 0
78039: LESS
78040: IFFALSE 78057
// result := value * - 1 ;
78042: LD_ADDR_VAR 0 2
78046: PUSH
78047: LD_VAR 0 1
78051: PUSH
78052: LD_INT 1
78054: NEG
78055: MUL
78056: ST_TO_ADDR
// end ;
78057: LD_VAR 0 2
78061: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
78062: LD_INT 0
78064: PPUSH
78065: PPUSH
78066: PPUSH
78067: PPUSH
78068: PPUSH
78069: PPUSH
78070: PPUSH
78071: PPUSH
// if not unit or not building then
78072: LD_VAR 0 1
78076: NOT
78077: PUSH
78078: LD_VAR 0 2
78082: NOT
78083: OR
78084: IFFALSE 78088
// exit ;
78086: GO 78314
// x := GetX ( building ) ;
78088: LD_ADDR_VAR 0 4
78092: PUSH
78093: LD_VAR 0 2
78097: PPUSH
78098: CALL_OW 250
78102: ST_TO_ADDR
// y := GetY ( building ) ;
78103: LD_ADDR_VAR 0 6
78107: PUSH
78108: LD_VAR 0 2
78112: PPUSH
78113: CALL_OW 251
78117: ST_TO_ADDR
// d := GetDir ( building ) ;
78118: LD_ADDR_VAR 0 8
78122: PUSH
78123: LD_VAR 0 2
78127: PPUSH
78128: CALL_OW 254
78132: ST_TO_ADDR
// r := 4 ;
78133: LD_ADDR_VAR 0 9
78137: PUSH
78138: LD_INT 4
78140: ST_TO_ADDR
// for i := 1 to 5 do
78141: LD_ADDR_VAR 0 10
78145: PUSH
78146: DOUBLE
78147: LD_INT 1
78149: DEC
78150: ST_TO_ADDR
78151: LD_INT 5
78153: PUSH
78154: FOR_TO
78155: IFFALSE 78312
// begin _x := ShiftX ( x , d , r + i ) ;
78157: LD_ADDR_VAR 0 5
78161: PUSH
78162: LD_VAR 0 4
78166: PPUSH
78167: LD_VAR 0 8
78171: PPUSH
78172: LD_VAR 0 9
78176: PUSH
78177: LD_VAR 0 10
78181: PLUS
78182: PPUSH
78183: CALL_OW 272
78187: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
78188: LD_ADDR_VAR 0 7
78192: PUSH
78193: LD_VAR 0 6
78197: PPUSH
78198: LD_VAR 0 8
78202: PPUSH
78203: LD_VAR 0 9
78207: PUSH
78208: LD_VAR 0 10
78212: PLUS
78213: PPUSH
78214: CALL_OW 273
78218: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
78219: LD_VAR 0 5
78223: PPUSH
78224: LD_VAR 0 7
78228: PPUSH
78229: CALL_OW 488
78233: PUSH
78234: LD_VAR 0 5
78238: PPUSH
78239: LD_VAR 0 7
78243: PPUSH
78244: CALL_OW 428
78248: PPUSH
78249: CALL_OW 247
78253: PUSH
78254: LD_INT 3
78256: PUSH
78257: LD_INT 2
78259: PUSH
78260: EMPTY
78261: LIST
78262: LIST
78263: IN
78264: NOT
78265: AND
78266: IFFALSE 78310
// begin ComMoveXY ( unit , _x , _y ) ;
78268: LD_VAR 0 1
78272: PPUSH
78273: LD_VAR 0 5
78277: PPUSH
78278: LD_VAR 0 7
78282: PPUSH
78283: CALL_OW 111
// result := [ _x , _y ] ;
78287: LD_ADDR_VAR 0 3
78291: PUSH
78292: LD_VAR 0 5
78296: PUSH
78297: LD_VAR 0 7
78301: PUSH
78302: EMPTY
78303: LIST
78304: LIST
78305: ST_TO_ADDR
// exit ;
78306: POP
78307: POP
78308: GO 78314
// end ; end ;
78310: GO 78154
78312: POP
78313: POP
// end ;
78314: LD_VAR 0 3
78318: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
78319: LD_INT 0
78321: PPUSH
78322: PPUSH
78323: PPUSH
// result := 0 ;
78324: LD_ADDR_VAR 0 3
78328: PUSH
78329: LD_INT 0
78331: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
78332: LD_VAR 0 1
78336: PUSH
78337: LD_INT 0
78339: LESS
78340: PUSH
78341: LD_VAR 0 1
78345: PUSH
78346: LD_INT 8
78348: GREATER
78349: OR
78350: PUSH
78351: LD_VAR 0 2
78355: PUSH
78356: LD_INT 0
78358: LESS
78359: OR
78360: PUSH
78361: LD_VAR 0 2
78365: PUSH
78366: LD_INT 8
78368: GREATER
78369: OR
78370: IFFALSE 78374
// exit ;
78372: GO 78449
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
78374: LD_ADDR_VAR 0 4
78378: PUSH
78379: LD_INT 22
78381: PUSH
78382: LD_VAR 0 2
78386: PUSH
78387: EMPTY
78388: LIST
78389: LIST
78390: PPUSH
78391: CALL_OW 69
78395: PUSH
78396: FOR_IN
78397: IFFALSE 78447
// begin un := UnitShoot ( i ) ;
78399: LD_ADDR_VAR 0 5
78403: PUSH
78404: LD_VAR 0 4
78408: PPUSH
78409: CALL_OW 504
78413: ST_TO_ADDR
// if GetSide ( un ) = side1 then
78414: LD_VAR 0 5
78418: PPUSH
78419: CALL_OW 255
78423: PUSH
78424: LD_VAR 0 1
78428: EQUAL
78429: IFFALSE 78445
// begin result := un ;
78431: LD_ADDR_VAR 0 3
78435: PUSH
78436: LD_VAR 0 5
78440: ST_TO_ADDR
// exit ;
78441: POP
78442: POP
78443: GO 78449
// end ; end ;
78445: GO 78396
78447: POP
78448: POP
// end ;
78449: LD_VAR 0 3
78453: RET
// export function GetCargoBay ( units ) ; begin
78454: LD_INT 0
78456: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
78457: LD_ADDR_VAR 0 2
78461: PUSH
78462: LD_VAR 0 1
78466: PPUSH
78467: LD_INT 2
78469: PUSH
78470: LD_INT 34
78472: PUSH
78473: LD_INT 12
78475: PUSH
78476: EMPTY
78477: LIST
78478: LIST
78479: PUSH
78480: LD_INT 34
78482: PUSH
78483: LD_INT 51
78485: PUSH
78486: EMPTY
78487: LIST
78488: LIST
78489: PUSH
78490: LD_INT 34
78492: PUSH
78493: LD_INT 32
78495: PUSH
78496: EMPTY
78497: LIST
78498: LIST
78499: PUSH
78500: LD_INT 34
78502: PUSH
78503: LD_INT 89
78505: PUSH
78506: EMPTY
78507: LIST
78508: LIST
78509: PUSH
78510: EMPTY
78511: LIST
78512: LIST
78513: LIST
78514: LIST
78515: LIST
78516: PPUSH
78517: CALL_OW 72
78521: ST_TO_ADDR
// end ;
78522: LD_VAR 0 2
78526: RET
// export function Negate ( value ) ; begin
78527: LD_INT 0
78529: PPUSH
// result := not value ;
78530: LD_ADDR_VAR 0 2
78534: PUSH
78535: LD_VAR 0 1
78539: NOT
78540: ST_TO_ADDR
// end ;
78541: LD_VAR 0 2
78545: RET
// export function Inc ( value ) ; begin
78546: LD_INT 0
78548: PPUSH
// result := value + 1 ;
78549: LD_ADDR_VAR 0 2
78553: PUSH
78554: LD_VAR 0 1
78558: PUSH
78559: LD_INT 1
78561: PLUS
78562: ST_TO_ADDR
// end ;
78563: LD_VAR 0 2
78567: RET
// export function Dec ( value ) ; begin
78568: LD_INT 0
78570: PPUSH
// result := value - 1 ;
78571: LD_ADDR_VAR 0 2
78575: PUSH
78576: LD_VAR 0 1
78580: PUSH
78581: LD_INT 1
78583: MINUS
78584: ST_TO_ADDR
// end ;
78585: LD_VAR 0 2
78589: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
78590: LD_INT 0
78592: PPUSH
78593: PPUSH
78594: PPUSH
78595: PPUSH
78596: PPUSH
78597: PPUSH
78598: PPUSH
78599: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
78600: LD_VAR 0 1
78604: PPUSH
78605: LD_VAR 0 2
78609: PPUSH
78610: CALL_OW 488
78614: NOT
78615: PUSH
78616: LD_VAR 0 3
78620: PPUSH
78621: LD_VAR 0 4
78625: PPUSH
78626: CALL_OW 488
78630: NOT
78631: OR
78632: IFFALSE 78645
// begin result := - 1 ;
78634: LD_ADDR_VAR 0 5
78638: PUSH
78639: LD_INT 1
78641: NEG
78642: ST_TO_ADDR
// exit ;
78643: GO 78880
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
78645: LD_ADDR_VAR 0 12
78649: PUSH
78650: LD_VAR 0 1
78654: PPUSH
78655: LD_VAR 0 2
78659: PPUSH
78660: LD_VAR 0 3
78664: PPUSH
78665: LD_VAR 0 4
78669: PPUSH
78670: CALL 77730 0 4
78674: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
78675: LD_ADDR_VAR 0 11
78679: PUSH
78680: LD_VAR 0 1
78684: PPUSH
78685: LD_VAR 0 2
78689: PPUSH
78690: LD_VAR 0 12
78694: PUSH
78695: LD_INT 1
78697: ARRAY
78698: PPUSH
78699: LD_VAR 0 12
78703: PUSH
78704: LD_INT 2
78706: ARRAY
78707: PPUSH
78708: CALL_OW 298
78712: ST_TO_ADDR
// distance := 9999 ;
78713: LD_ADDR_VAR 0 10
78717: PUSH
78718: LD_INT 9999
78720: ST_TO_ADDR
// for i := 0 to 5 do
78721: LD_ADDR_VAR 0 6
78725: PUSH
78726: DOUBLE
78727: LD_INT 0
78729: DEC
78730: ST_TO_ADDR
78731: LD_INT 5
78733: PUSH
78734: FOR_TO
78735: IFFALSE 78878
// begin _x := ShiftX ( x1 , i , centerDist ) ;
78737: LD_ADDR_VAR 0 7
78741: PUSH
78742: LD_VAR 0 1
78746: PPUSH
78747: LD_VAR 0 6
78751: PPUSH
78752: LD_VAR 0 11
78756: PPUSH
78757: CALL_OW 272
78761: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
78762: LD_ADDR_VAR 0 8
78766: PUSH
78767: LD_VAR 0 2
78771: PPUSH
78772: LD_VAR 0 6
78776: PPUSH
78777: LD_VAR 0 11
78781: PPUSH
78782: CALL_OW 273
78786: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
78787: LD_VAR 0 7
78791: PPUSH
78792: LD_VAR 0 8
78796: PPUSH
78797: CALL_OW 488
78801: NOT
78802: IFFALSE 78806
// continue ;
78804: GO 78734
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
78806: LD_ADDR_VAR 0 9
78810: PUSH
78811: LD_VAR 0 12
78815: PUSH
78816: LD_INT 1
78818: ARRAY
78819: PPUSH
78820: LD_VAR 0 12
78824: PUSH
78825: LD_INT 2
78827: ARRAY
78828: PPUSH
78829: LD_VAR 0 7
78833: PPUSH
78834: LD_VAR 0 8
78838: PPUSH
78839: CALL_OW 298
78843: ST_TO_ADDR
// if tmp < distance then
78844: LD_VAR 0 9
78848: PUSH
78849: LD_VAR 0 10
78853: LESS
78854: IFFALSE 78876
// begin result := i ;
78856: LD_ADDR_VAR 0 5
78860: PUSH
78861: LD_VAR 0 6
78865: ST_TO_ADDR
// distance := tmp ;
78866: LD_ADDR_VAR 0 10
78870: PUSH
78871: LD_VAR 0 9
78875: ST_TO_ADDR
// end ; end ;
78876: GO 78734
78878: POP
78879: POP
// end ;
78880: LD_VAR 0 5
78884: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78885: LD_INT 0
78887: PPUSH
78888: PPUSH
// if not driver or not IsInUnit ( driver ) then
78889: LD_VAR 0 1
78893: NOT
78894: PUSH
78895: LD_VAR 0 1
78899: PPUSH
78900: CALL_OW 310
78904: NOT
78905: OR
78906: IFFALSE 78910
// exit ;
78908: GO 79000
// vehicle := IsInUnit ( driver ) ;
78910: LD_ADDR_VAR 0 3
78914: PUSH
78915: LD_VAR 0 1
78919: PPUSH
78920: CALL_OW 310
78924: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78925: LD_VAR 0 1
78929: PPUSH
78930: LD_STRING \
78932: PUSH
78933: LD_INT 0
78935: PUSH
78936: LD_INT 0
78938: PUSH
78939: LD_INT 0
78941: PUSH
78942: LD_INT 0
78944: PUSH
78945: LD_INT 0
78947: PUSH
78948: LD_INT 0
78950: PUSH
78951: EMPTY
78952: LIST
78953: LIST
78954: LIST
78955: LIST
78956: LIST
78957: LIST
78958: LIST
78959: PUSH
78960: LD_STRING E
78962: PUSH
78963: LD_INT 0
78965: PUSH
78966: LD_INT 0
78968: PUSH
78969: LD_VAR 0 3
78973: PUSH
78974: LD_INT 0
78976: PUSH
78977: LD_INT 0
78979: PUSH
78980: LD_INT 0
78982: PUSH
78983: EMPTY
78984: LIST
78985: LIST
78986: LIST
78987: LIST
78988: LIST
78989: LIST
78990: LIST
78991: PUSH
78992: EMPTY
78993: LIST
78994: LIST
78995: PPUSH
78996: CALL_OW 446
// end ;
79000: LD_VAR 0 2
79004: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79005: LD_INT 0
79007: PPUSH
79008: PPUSH
// if not driver or not IsInUnit ( driver ) then
79009: LD_VAR 0 1
79013: NOT
79014: PUSH
79015: LD_VAR 0 1
79019: PPUSH
79020: CALL_OW 310
79024: NOT
79025: OR
79026: IFFALSE 79030
// exit ;
79028: GO 79120
// vehicle := IsInUnit ( driver ) ;
79030: LD_ADDR_VAR 0 3
79034: PUSH
79035: LD_VAR 0 1
79039: PPUSH
79040: CALL_OW 310
79044: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79045: LD_VAR 0 1
79049: PPUSH
79050: LD_STRING \
79052: PUSH
79053: LD_INT 0
79055: PUSH
79056: LD_INT 0
79058: PUSH
79059: LD_INT 0
79061: PUSH
79062: LD_INT 0
79064: PUSH
79065: LD_INT 0
79067: PUSH
79068: LD_INT 0
79070: PUSH
79071: EMPTY
79072: LIST
79073: LIST
79074: LIST
79075: LIST
79076: LIST
79077: LIST
79078: LIST
79079: PUSH
79080: LD_STRING E
79082: PUSH
79083: LD_INT 0
79085: PUSH
79086: LD_INT 0
79088: PUSH
79089: LD_VAR 0 3
79093: PUSH
79094: LD_INT 0
79096: PUSH
79097: LD_INT 0
79099: PUSH
79100: LD_INT 0
79102: PUSH
79103: EMPTY
79104: LIST
79105: LIST
79106: LIST
79107: LIST
79108: LIST
79109: LIST
79110: LIST
79111: PUSH
79112: EMPTY
79113: LIST
79114: LIST
79115: PPUSH
79116: CALL_OW 447
// end ;
79120: LD_VAR 0 2
79124: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
79125: LD_INT 0
79127: PPUSH
79128: PPUSH
79129: PPUSH
// tmp := [ ] ;
79130: LD_ADDR_VAR 0 5
79134: PUSH
79135: EMPTY
79136: ST_TO_ADDR
// for i in units do
79137: LD_ADDR_VAR 0 4
79141: PUSH
79142: LD_VAR 0 1
79146: PUSH
79147: FOR_IN
79148: IFFALSE 79186
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
79150: LD_ADDR_VAR 0 5
79154: PUSH
79155: LD_VAR 0 5
79159: PPUSH
79160: LD_VAR 0 5
79164: PUSH
79165: LD_INT 1
79167: PLUS
79168: PPUSH
79169: LD_VAR 0 4
79173: PPUSH
79174: CALL_OW 256
79178: PPUSH
79179: CALL_OW 2
79183: ST_TO_ADDR
79184: GO 79147
79186: POP
79187: POP
// if not tmp then
79188: LD_VAR 0 5
79192: NOT
79193: IFFALSE 79197
// exit ;
79195: GO 79245
// if asc then
79197: LD_VAR 0 2
79201: IFFALSE 79225
// result := SortListByListAsc ( units , tmp ) else
79203: LD_ADDR_VAR 0 3
79207: PUSH
79208: LD_VAR 0 1
79212: PPUSH
79213: LD_VAR 0 5
79217: PPUSH
79218: CALL_OW 76
79222: ST_TO_ADDR
79223: GO 79245
// result := SortListByListDesc ( units , tmp ) ;
79225: LD_ADDR_VAR 0 3
79229: PUSH
79230: LD_VAR 0 1
79234: PPUSH
79235: LD_VAR 0 5
79239: PPUSH
79240: CALL_OW 77
79244: ST_TO_ADDR
// end ;
79245: LD_VAR 0 3
79249: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
79250: LD_INT 0
79252: PPUSH
79253: PPUSH
// task := GetTaskList ( mech ) ;
79254: LD_ADDR_VAR 0 4
79258: PUSH
79259: LD_VAR 0 1
79263: PPUSH
79264: CALL_OW 437
79268: ST_TO_ADDR
// if not task then
79269: LD_VAR 0 4
79273: NOT
79274: IFFALSE 79278
// exit ;
79276: GO 79320
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
79278: LD_ADDR_VAR 0 3
79282: PUSH
79283: LD_VAR 0 4
79287: PUSH
79288: LD_INT 1
79290: ARRAY
79291: PUSH
79292: LD_INT 1
79294: ARRAY
79295: PUSH
79296: LD_STRING r
79298: EQUAL
79299: PUSH
79300: LD_VAR 0 4
79304: PUSH
79305: LD_INT 1
79307: ARRAY
79308: PUSH
79309: LD_INT 4
79311: ARRAY
79312: PUSH
79313: LD_VAR 0 2
79317: EQUAL
79318: AND
79319: ST_TO_ADDR
// end ;
79320: LD_VAR 0 3
79324: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
79325: LD_INT 0
79327: PPUSH
// SetDir ( unit , d ) ;
79328: LD_VAR 0 1
79332: PPUSH
79333: LD_VAR 0 4
79337: PPUSH
79338: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
79342: LD_VAR 0 1
79346: PPUSH
79347: LD_VAR 0 2
79351: PPUSH
79352: LD_VAR 0 3
79356: PPUSH
79357: LD_VAR 0 5
79361: PPUSH
79362: CALL_OW 48
// end ;
79366: LD_VAR 0 6
79370: RET
// export function ToNaturalNumber ( number ) ; begin
79371: LD_INT 0
79373: PPUSH
// result := number div 1 ;
79374: LD_ADDR_VAR 0 2
79378: PUSH
79379: LD_VAR 0 1
79383: PUSH
79384: LD_INT 1
79386: DIV
79387: ST_TO_ADDR
// if number < 0 then
79388: LD_VAR 0 1
79392: PUSH
79393: LD_INT 0
79395: LESS
79396: IFFALSE 79406
// result := 0 ;
79398: LD_ADDR_VAR 0 2
79402: PUSH
79403: LD_INT 0
79405: ST_TO_ADDR
// end ;
79406: LD_VAR 0 2
79410: RET
// export function SortByClass ( units , class ) ; var un ; begin
79411: LD_INT 0
79413: PPUSH
79414: PPUSH
// if not units or not class then
79415: LD_VAR 0 1
79419: NOT
79420: PUSH
79421: LD_VAR 0 2
79425: NOT
79426: OR
79427: IFFALSE 79431
// exit ;
79429: GO 79526
// result := [ ] ;
79431: LD_ADDR_VAR 0 3
79435: PUSH
79436: EMPTY
79437: ST_TO_ADDR
// for un in units do
79438: LD_ADDR_VAR 0 4
79442: PUSH
79443: LD_VAR 0 1
79447: PUSH
79448: FOR_IN
79449: IFFALSE 79524
// if GetClass ( un ) = class then
79451: LD_VAR 0 4
79455: PPUSH
79456: CALL_OW 257
79460: PUSH
79461: LD_VAR 0 2
79465: EQUAL
79466: IFFALSE 79493
// result := Insert ( result , 1 , un ) else
79468: LD_ADDR_VAR 0 3
79472: PUSH
79473: LD_VAR 0 3
79477: PPUSH
79478: LD_INT 1
79480: PPUSH
79481: LD_VAR 0 4
79485: PPUSH
79486: CALL_OW 2
79490: ST_TO_ADDR
79491: GO 79522
// result := Replace ( result , result + 1 , un ) ;
79493: LD_ADDR_VAR 0 3
79497: PUSH
79498: LD_VAR 0 3
79502: PPUSH
79503: LD_VAR 0 3
79507: PUSH
79508: LD_INT 1
79510: PLUS
79511: PPUSH
79512: LD_VAR 0 4
79516: PPUSH
79517: CALL_OW 1
79521: ST_TO_ADDR
79522: GO 79448
79524: POP
79525: POP
// end ;
79526: LD_VAR 0 3
79530: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
79531: LD_INT 0
79533: PPUSH
79534: PPUSH
79535: PPUSH
79536: PPUSH
79537: PPUSH
79538: PPUSH
79539: PPUSH
// result := [ ] ;
79540: LD_ADDR_VAR 0 4
79544: PUSH
79545: EMPTY
79546: ST_TO_ADDR
// if x - r < 0 then
79547: LD_VAR 0 1
79551: PUSH
79552: LD_VAR 0 3
79556: MINUS
79557: PUSH
79558: LD_INT 0
79560: LESS
79561: IFFALSE 79573
// min_x := 0 else
79563: LD_ADDR_VAR 0 8
79567: PUSH
79568: LD_INT 0
79570: ST_TO_ADDR
79571: GO 79589
// min_x := x - r ;
79573: LD_ADDR_VAR 0 8
79577: PUSH
79578: LD_VAR 0 1
79582: PUSH
79583: LD_VAR 0 3
79587: MINUS
79588: ST_TO_ADDR
// if y - r < 0 then
79589: LD_VAR 0 2
79593: PUSH
79594: LD_VAR 0 3
79598: MINUS
79599: PUSH
79600: LD_INT 0
79602: LESS
79603: IFFALSE 79615
// min_y := 0 else
79605: LD_ADDR_VAR 0 7
79609: PUSH
79610: LD_INT 0
79612: ST_TO_ADDR
79613: GO 79631
// min_y := y - r ;
79615: LD_ADDR_VAR 0 7
79619: PUSH
79620: LD_VAR 0 2
79624: PUSH
79625: LD_VAR 0 3
79629: MINUS
79630: ST_TO_ADDR
// max_x := x + r ;
79631: LD_ADDR_VAR 0 9
79635: PUSH
79636: LD_VAR 0 1
79640: PUSH
79641: LD_VAR 0 3
79645: PLUS
79646: ST_TO_ADDR
// max_y := y + r ;
79647: LD_ADDR_VAR 0 10
79651: PUSH
79652: LD_VAR 0 2
79656: PUSH
79657: LD_VAR 0 3
79661: PLUS
79662: ST_TO_ADDR
// for _x = min_x to max_x do
79663: LD_ADDR_VAR 0 5
79667: PUSH
79668: DOUBLE
79669: LD_VAR 0 8
79673: DEC
79674: ST_TO_ADDR
79675: LD_VAR 0 9
79679: PUSH
79680: FOR_TO
79681: IFFALSE 79782
// for _y = min_y to max_y do
79683: LD_ADDR_VAR 0 6
79687: PUSH
79688: DOUBLE
79689: LD_VAR 0 7
79693: DEC
79694: ST_TO_ADDR
79695: LD_VAR 0 10
79699: PUSH
79700: FOR_TO
79701: IFFALSE 79778
// begin if not ValidHex ( _x , _y ) then
79703: LD_VAR 0 5
79707: PPUSH
79708: LD_VAR 0 6
79712: PPUSH
79713: CALL_OW 488
79717: NOT
79718: IFFALSE 79722
// continue ;
79720: GO 79700
// if GetResourceTypeXY ( _x , _y ) then
79722: LD_VAR 0 5
79726: PPUSH
79727: LD_VAR 0 6
79731: PPUSH
79732: CALL_OW 283
79736: IFFALSE 79776
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
79738: LD_ADDR_VAR 0 4
79742: PUSH
79743: LD_VAR 0 4
79747: PPUSH
79748: LD_VAR 0 4
79752: PUSH
79753: LD_INT 1
79755: PLUS
79756: PPUSH
79757: LD_VAR 0 5
79761: PUSH
79762: LD_VAR 0 6
79766: PUSH
79767: EMPTY
79768: LIST
79769: LIST
79770: PPUSH
79771: CALL_OW 1
79775: ST_TO_ADDR
// end ;
79776: GO 79700
79778: POP
79779: POP
79780: GO 79680
79782: POP
79783: POP
// end ;
79784: LD_VAR 0 4
79788: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
79789: LD_INT 0
79791: PPUSH
79792: PPUSH
79793: PPUSH
79794: PPUSH
79795: PPUSH
79796: PPUSH
79797: PPUSH
79798: PPUSH
// if not units then
79799: LD_VAR 0 1
79803: NOT
79804: IFFALSE 79808
// exit ;
79806: GO 80332
// result := UnitFilter ( units , [ f_ok ] ) ;
79808: LD_ADDR_VAR 0 3
79812: PUSH
79813: LD_VAR 0 1
79817: PPUSH
79818: LD_INT 50
79820: PUSH
79821: EMPTY
79822: LIST
79823: PPUSH
79824: CALL_OW 72
79828: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
79829: LD_ADDR_VAR 0 8
79833: PUSH
79834: LD_VAR 0 1
79838: PUSH
79839: LD_INT 1
79841: ARRAY
79842: PPUSH
79843: CALL_OW 255
79847: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
79848: LD_ADDR_VAR 0 10
79852: PUSH
79853: LD_INT 29
79855: PUSH
79856: LD_INT 91
79858: PUSH
79859: LD_INT 49
79861: PUSH
79862: EMPTY
79863: LIST
79864: LIST
79865: LIST
79866: ST_TO_ADDR
// if not result then
79867: LD_VAR 0 3
79871: NOT
79872: IFFALSE 79876
// exit ;
79874: GO 80332
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
79876: LD_ADDR_VAR 0 5
79880: PUSH
79881: LD_INT 81
79883: PUSH
79884: LD_VAR 0 8
79888: PUSH
79889: EMPTY
79890: LIST
79891: LIST
79892: PPUSH
79893: CALL_OW 69
79897: ST_TO_ADDR
// for i in result do
79898: LD_ADDR_VAR 0 4
79902: PUSH
79903: LD_VAR 0 3
79907: PUSH
79908: FOR_IN
79909: IFFALSE 80330
// begin tag := GetTag ( i ) + 1 ;
79911: LD_ADDR_VAR 0 9
79915: PUSH
79916: LD_VAR 0 4
79920: PPUSH
79921: CALL_OW 110
79925: PUSH
79926: LD_INT 1
79928: PLUS
79929: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
79930: LD_ADDR_VAR 0 7
79934: PUSH
79935: LD_VAR 0 4
79939: PPUSH
79940: CALL_OW 250
79944: PPUSH
79945: LD_VAR 0 4
79949: PPUSH
79950: CALL_OW 251
79954: PPUSH
79955: LD_INT 6
79957: PPUSH
79958: CALL 79531 0 3
79962: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
79963: LD_VAR 0 4
79967: PPUSH
79968: CALL_OW 247
79972: PUSH
79973: LD_INT 2
79975: EQUAL
79976: PUSH
79977: LD_VAR 0 7
79981: AND
79982: PUSH
79983: LD_VAR 0 4
79987: PPUSH
79988: CALL_OW 264
79992: PUSH
79993: LD_VAR 0 10
79997: IN
79998: NOT
79999: AND
80000: IFFALSE 80039
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
80002: LD_VAR 0 4
80006: PPUSH
80007: LD_VAR 0 7
80011: PUSH
80012: LD_INT 1
80014: ARRAY
80015: PUSH
80016: LD_INT 1
80018: ARRAY
80019: PPUSH
80020: LD_VAR 0 7
80024: PUSH
80025: LD_INT 1
80027: ARRAY
80028: PUSH
80029: LD_INT 2
80031: ARRAY
80032: PPUSH
80033: CALL_OW 116
80037: GO 80328
// if path > tag then
80039: LD_VAR 0 2
80043: PUSH
80044: LD_VAR 0 9
80048: GREATER
80049: IFFALSE 80257
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
80051: LD_ADDR_VAR 0 6
80055: PUSH
80056: LD_VAR 0 5
80060: PPUSH
80061: LD_INT 91
80063: PUSH
80064: LD_VAR 0 4
80068: PUSH
80069: LD_INT 8
80071: PUSH
80072: EMPTY
80073: LIST
80074: LIST
80075: LIST
80076: PPUSH
80077: CALL_OW 72
80081: ST_TO_ADDR
// if nearEnemy then
80082: LD_VAR 0 6
80086: IFFALSE 80155
// begin if GetWeapon ( i ) = ru_time_lapser then
80088: LD_VAR 0 4
80092: PPUSH
80093: CALL_OW 264
80097: PUSH
80098: LD_INT 49
80100: EQUAL
80101: IFFALSE 80129
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
80103: LD_VAR 0 4
80107: PPUSH
80108: LD_VAR 0 6
80112: PPUSH
80113: LD_VAR 0 4
80117: PPUSH
80118: CALL_OW 74
80122: PPUSH
80123: CALL_OW 112
80127: GO 80153
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
80129: LD_VAR 0 4
80133: PPUSH
80134: LD_VAR 0 6
80138: PPUSH
80139: LD_VAR 0 4
80143: PPUSH
80144: CALL_OW 74
80148: PPUSH
80149: CALL 81257 0 2
// end else
80153: GO 80255
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
80155: LD_VAR 0 4
80159: PPUSH
80160: LD_VAR 0 2
80164: PUSH
80165: LD_VAR 0 9
80169: ARRAY
80170: PUSH
80171: LD_INT 1
80173: ARRAY
80174: PPUSH
80175: LD_VAR 0 2
80179: PUSH
80180: LD_VAR 0 9
80184: ARRAY
80185: PUSH
80186: LD_INT 2
80188: ARRAY
80189: PPUSH
80190: CALL_OW 297
80194: PUSH
80195: LD_INT 6
80197: GREATER
80198: IFFALSE 80241
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
80200: LD_VAR 0 4
80204: PPUSH
80205: LD_VAR 0 2
80209: PUSH
80210: LD_VAR 0 9
80214: ARRAY
80215: PUSH
80216: LD_INT 1
80218: ARRAY
80219: PPUSH
80220: LD_VAR 0 2
80224: PUSH
80225: LD_VAR 0 9
80229: ARRAY
80230: PUSH
80231: LD_INT 2
80233: ARRAY
80234: PPUSH
80235: CALL_OW 114
80239: GO 80255
// SetTag ( i , tag ) ;
80241: LD_VAR 0 4
80245: PPUSH
80246: LD_VAR 0 9
80250: PPUSH
80251: CALL_OW 109
// end else
80255: GO 80328
// if enemy then
80257: LD_VAR 0 5
80261: IFFALSE 80328
// begin if GetWeapon ( i ) = ru_time_lapser then
80263: LD_VAR 0 4
80267: PPUSH
80268: CALL_OW 264
80272: PUSH
80273: LD_INT 49
80275: EQUAL
80276: IFFALSE 80304
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
80278: LD_VAR 0 4
80282: PPUSH
80283: LD_VAR 0 5
80287: PPUSH
80288: LD_VAR 0 4
80292: PPUSH
80293: CALL_OW 74
80297: PPUSH
80298: CALL_OW 112
80302: GO 80328
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
80304: LD_VAR 0 4
80308: PPUSH
80309: LD_VAR 0 5
80313: PPUSH
80314: LD_VAR 0 4
80318: PPUSH
80319: CALL_OW 74
80323: PPUSH
80324: CALL 81257 0 2
// end ; end ;
80328: GO 79908
80330: POP
80331: POP
// end ;
80332: LD_VAR 0 3
80336: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
80337: LD_INT 0
80339: PPUSH
80340: PPUSH
80341: PPUSH
// if not unit or IsInUnit ( unit ) then
80342: LD_VAR 0 1
80346: NOT
80347: PUSH
80348: LD_VAR 0 1
80352: PPUSH
80353: CALL_OW 310
80357: OR
80358: IFFALSE 80362
// exit ;
80360: GO 80453
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
80362: LD_ADDR_VAR 0 4
80366: PUSH
80367: LD_VAR 0 1
80371: PPUSH
80372: CALL_OW 250
80376: PPUSH
80377: LD_VAR 0 2
80381: PPUSH
80382: LD_INT 1
80384: PPUSH
80385: CALL_OW 272
80389: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
80390: LD_ADDR_VAR 0 5
80394: PUSH
80395: LD_VAR 0 1
80399: PPUSH
80400: CALL_OW 251
80404: PPUSH
80405: LD_VAR 0 2
80409: PPUSH
80410: LD_INT 1
80412: PPUSH
80413: CALL_OW 273
80417: ST_TO_ADDR
// if ValidHex ( x , y ) then
80418: LD_VAR 0 4
80422: PPUSH
80423: LD_VAR 0 5
80427: PPUSH
80428: CALL_OW 488
80432: IFFALSE 80453
// ComTurnXY ( unit , x , y ) ;
80434: LD_VAR 0 1
80438: PPUSH
80439: LD_VAR 0 4
80443: PPUSH
80444: LD_VAR 0 5
80448: PPUSH
80449: CALL_OW 118
// end ;
80453: LD_VAR 0 3
80457: RET
// export function SeeUnits ( side , units ) ; var i ; begin
80458: LD_INT 0
80460: PPUSH
80461: PPUSH
// result := false ;
80462: LD_ADDR_VAR 0 3
80466: PUSH
80467: LD_INT 0
80469: ST_TO_ADDR
// if not units then
80470: LD_VAR 0 2
80474: NOT
80475: IFFALSE 80479
// exit ;
80477: GO 80524
// for i in units do
80479: LD_ADDR_VAR 0 4
80483: PUSH
80484: LD_VAR 0 2
80488: PUSH
80489: FOR_IN
80490: IFFALSE 80522
// if See ( side , i ) then
80492: LD_VAR 0 1
80496: PPUSH
80497: LD_VAR 0 4
80501: PPUSH
80502: CALL_OW 292
80506: IFFALSE 80520
// begin result := true ;
80508: LD_ADDR_VAR 0 3
80512: PUSH
80513: LD_INT 1
80515: ST_TO_ADDR
// exit ;
80516: POP
80517: POP
80518: GO 80524
// end ;
80520: GO 80489
80522: POP
80523: POP
// end ;
80524: LD_VAR 0 3
80528: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
80529: LD_INT 0
80531: PPUSH
80532: PPUSH
80533: PPUSH
80534: PPUSH
// if not unit or not points then
80535: LD_VAR 0 1
80539: NOT
80540: PUSH
80541: LD_VAR 0 2
80545: NOT
80546: OR
80547: IFFALSE 80551
// exit ;
80549: GO 80641
// dist := 99999 ;
80551: LD_ADDR_VAR 0 5
80555: PUSH
80556: LD_INT 99999
80558: ST_TO_ADDR
// for i in points do
80559: LD_ADDR_VAR 0 4
80563: PUSH
80564: LD_VAR 0 2
80568: PUSH
80569: FOR_IN
80570: IFFALSE 80639
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
80572: LD_ADDR_VAR 0 6
80576: PUSH
80577: LD_VAR 0 1
80581: PPUSH
80582: LD_VAR 0 4
80586: PUSH
80587: LD_INT 1
80589: ARRAY
80590: PPUSH
80591: LD_VAR 0 4
80595: PUSH
80596: LD_INT 2
80598: ARRAY
80599: PPUSH
80600: CALL_OW 297
80604: ST_TO_ADDR
// if tmpDist < dist then
80605: LD_VAR 0 6
80609: PUSH
80610: LD_VAR 0 5
80614: LESS
80615: IFFALSE 80637
// begin result := i ;
80617: LD_ADDR_VAR 0 3
80621: PUSH
80622: LD_VAR 0 4
80626: ST_TO_ADDR
// dist := tmpDist ;
80627: LD_ADDR_VAR 0 5
80631: PUSH
80632: LD_VAR 0 6
80636: ST_TO_ADDR
// end ; end ;
80637: GO 80569
80639: POP
80640: POP
// end ;
80641: LD_VAR 0 3
80645: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
80646: LD_INT 0
80648: PPUSH
// uc_side := side ;
80649: LD_ADDR_OWVAR 20
80653: PUSH
80654: LD_VAR 0 1
80658: ST_TO_ADDR
// uc_nation := 3 ;
80659: LD_ADDR_OWVAR 21
80663: PUSH
80664: LD_INT 3
80666: ST_TO_ADDR
// vc_chassis := 25 ;
80667: LD_ADDR_OWVAR 37
80671: PUSH
80672: LD_INT 25
80674: ST_TO_ADDR
// vc_engine := engine_siberite ;
80675: LD_ADDR_OWVAR 39
80679: PUSH
80680: LD_INT 3
80682: ST_TO_ADDR
// vc_control := control_computer ;
80683: LD_ADDR_OWVAR 38
80687: PUSH
80688: LD_INT 3
80690: ST_TO_ADDR
// vc_weapon := 59 ;
80691: LD_ADDR_OWVAR 40
80695: PUSH
80696: LD_INT 59
80698: ST_TO_ADDR
// result := CreateVehicle ;
80699: LD_ADDR_VAR 0 5
80703: PUSH
80704: CALL_OW 45
80708: ST_TO_ADDR
// SetDir ( result , d ) ;
80709: LD_VAR 0 5
80713: PPUSH
80714: LD_VAR 0 4
80718: PPUSH
80719: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
80723: LD_VAR 0 5
80727: PPUSH
80728: LD_VAR 0 2
80732: PPUSH
80733: LD_VAR 0 3
80737: PPUSH
80738: LD_INT 0
80740: PPUSH
80741: CALL_OW 48
// end ;
80745: LD_VAR 0 5
80749: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
80750: LD_INT 0
80752: PPUSH
80753: PPUSH
80754: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
80755: LD_ADDR_VAR 0 2
80759: PUSH
80760: LD_INT 0
80762: PUSH
80763: LD_INT 0
80765: PUSH
80766: LD_INT 0
80768: PUSH
80769: LD_INT 0
80771: PUSH
80772: EMPTY
80773: LIST
80774: LIST
80775: LIST
80776: LIST
80777: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
80778: LD_VAR 0 1
80782: NOT
80783: PUSH
80784: LD_VAR 0 1
80788: PPUSH
80789: CALL_OW 264
80793: PUSH
80794: LD_INT 12
80796: PUSH
80797: LD_INT 51
80799: PUSH
80800: LD_INT 32
80802: PUSH
80803: LD_INT 89
80805: PUSH
80806: EMPTY
80807: LIST
80808: LIST
80809: LIST
80810: LIST
80811: IN
80812: NOT
80813: OR
80814: IFFALSE 80818
// exit ;
80816: GO 80916
// for i := 1 to 3 do
80818: LD_ADDR_VAR 0 3
80822: PUSH
80823: DOUBLE
80824: LD_INT 1
80826: DEC
80827: ST_TO_ADDR
80828: LD_INT 3
80830: PUSH
80831: FOR_TO
80832: IFFALSE 80914
// begin tmp := GetCargo ( cargo , i ) ;
80834: LD_ADDR_VAR 0 4
80838: PUSH
80839: LD_VAR 0 1
80843: PPUSH
80844: LD_VAR 0 3
80848: PPUSH
80849: CALL_OW 289
80853: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
80854: LD_ADDR_VAR 0 2
80858: PUSH
80859: LD_VAR 0 2
80863: PPUSH
80864: LD_VAR 0 3
80868: PPUSH
80869: LD_VAR 0 4
80873: PPUSH
80874: CALL_OW 1
80878: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
80879: LD_ADDR_VAR 0 2
80883: PUSH
80884: LD_VAR 0 2
80888: PPUSH
80889: LD_INT 4
80891: PPUSH
80892: LD_VAR 0 2
80896: PUSH
80897: LD_INT 4
80899: ARRAY
80900: PUSH
80901: LD_VAR 0 4
80905: PLUS
80906: PPUSH
80907: CALL_OW 1
80911: ST_TO_ADDR
// end ;
80912: GO 80831
80914: POP
80915: POP
// end ;
80916: LD_VAR 0 2
80920: RET
// export function Length ( array ) ; begin
80921: LD_INT 0
80923: PPUSH
// result := array + 0 ;
80924: LD_ADDR_VAR 0 2
80928: PUSH
80929: LD_VAR 0 1
80933: PUSH
80934: LD_INT 0
80936: PLUS
80937: ST_TO_ADDR
// end ;
80938: LD_VAR 0 2
80942: RET
// export function PrepareArray ( array ) ; begin
80943: LD_INT 0
80945: PPUSH
// result := array diff 0 ;
80946: LD_ADDR_VAR 0 2
80950: PUSH
80951: LD_VAR 0 1
80955: PUSH
80956: LD_INT 0
80958: DIFF
80959: ST_TO_ADDR
// if not result [ 1 ] then
80960: LD_VAR 0 2
80964: PUSH
80965: LD_INT 1
80967: ARRAY
80968: NOT
80969: IFFALSE 80989
// result := Delete ( result , 1 ) ;
80971: LD_ADDR_VAR 0 2
80975: PUSH
80976: LD_VAR 0 2
80980: PPUSH
80981: LD_INT 1
80983: PPUSH
80984: CALL_OW 3
80988: ST_TO_ADDR
// end ;
80989: LD_VAR 0 2
80993: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
80994: LD_INT 0
80996: PPUSH
80997: PPUSH
80998: PPUSH
80999: PPUSH
// sibRocketRange := 25 ;
81000: LD_ADDR_VAR 0 6
81004: PUSH
81005: LD_INT 25
81007: ST_TO_ADDR
// result := false ;
81008: LD_ADDR_VAR 0 4
81012: PUSH
81013: LD_INT 0
81015: ST_TO_ADDR
// for i := 0 to 5 do
81016: LD_ADDR_VAR 0 5
81020: PUSH
81021: DOUBLE
81022: LD_INT 0
81024: DEC
81025: ST_TO_ADDR
81026: LD_INT 5
81028: PUSH
81029: FOR_TO
81030: IFFALSE 81097
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
81032: LD_VAR 0 1
81036: PPUSH
81037: LD_VAR 0 5
81041: PPUSH
81042: LD_VAR 0 6
81046: PPUSH
81047: CALL_OW 272
81051: PPUSH
81052: LD_VAR 0 2
81056: PPUSH
81057: LD_VAR 0 5
81061: PPUSH
81062: LD_VAR 0 6
81066: PPUSH
81067: CALL_OW 273
81071: PPUSH
81072: LD_VAR 0 3
81076: PPUSH
81077: CALL_OW 309
81081: IFFALSE 81095
// begin result := true ;
81083: LD_ADDR_VAR 0 4
81087: PUSH
81088: LD_INT 1
81090: ST_TO_ADDR
// exit ;
81091: POP
81092: POP
81093: GO 81099
// end ;
81095: GO 81029
81097: POP
81098: POP
// end ;
81099: LD_VAR 0 4
81103: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
81104: LD_INT 0
81106: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
81107: LD_VAR 0 1
81111: PPUSH
81112: LD_VAR 0 2
81116: PPUSH
81117: LD_INT 0
81119: PPUSH
81120: LD_INT 0
81122: PPUSH
81123: LD_INT 1
81125: PPUSH
81126: LD_INT 0
81128: PPUSH
81129: CALL_OW 587
// end ;
81133: LD_VAR 0 3
81137: RET
// export function CenterOnNow ( unit ) ; begin
81138: LD_INT 0
81140: PPUSH
// result := IsInUnit ( unit ) ;
81141: LD_ADDR_VAR 0 2
81145: PUSH
81146: LD_VAR 0 1
81150: PPUSH
81151: CALL_OW 310
81155: ST_TO_ADDR
// if not result then
81156: LD_VAR 0 2
81160: NOT
81161: IFFALSE 81173
// result := unit ;
81163: LD_ADDR_VAR 0 2
81167: PUSH
81168: LD_VAR 0 1
81172: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
81173: LD_VAR 0 1
81177: PPUSH
81178: CALL_OW 87
// end ;
81182: LD_VAR 0 2
81186: RET
// export function ComMoveHex ( unit , hex ) ; begin
81187: LD_INT 0
81189: PPUSH
// if not hex then
81190: LD_VAR 0 2
81194: NOT
81195: IFFALSE 81199
// exit ;
81197: GO 81252
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
81199: LD_VAR 0 2
81203: PUSH
81204: LD_INT 1
81206: ARRAY
81207: PPUSH
81208: LD_VAR 0 2
81212: PUSH
81213: LD_INT 2
81215: ARRAY
81216: PPUSH
81217: CALL_OW 428
81221: IFFALSE 81225
// exit ;
81223: GO 81252
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
81225: LD_VAR 0 1
81229: PPUSH
81230: LD_VAR 0 2
81234: PUSH
81235: LD_INT 1
81237: ARRAY
81238: PPUSH
81239: LD_VAR 0 2
81243: PUSH
81244: LD_INT 2
81246: ARRAY
81247: PPUSH
81248: CALL_OW 111
// end ;
81252: LD_VAR 0 3
81256: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
81257: LD_INT 0
81259: PPUSH
81260: PPUSH
81261: PPUSH
// if not unit or not enemy then
81262: LD_VAR 0 1
81266: NOT
81267: PUSH
81268: LD_VAR 0 2
81272: NOT
81273: OR
81274: IFFALSE 81278
// exit ;
81276: GO 81402
// x := GetX ( enemy ) ;
81278: LD_ADDR_VAR 0 4
81282: PUSH
81283: LD_VAR 0 2
81287: PPUSH
81288: CALL_OW 250
81292: ST_TO_ADDR
// y := GetY ( enemy ) ;
81293: LD_ADDR_VAR 0 5
81297: PUSH
81298: LD_VAR 0 2
81302: PPUSH
81303: CALL_OW 251
81307: ST_TO_ADDR
// if ValidHex ( x , y ) then
81308: LD_VAR 0 4
81312: PPUSH
81313: LD_VAR 0 5
81317: PPUSH
81318: CALL_OW 488
81322: IFFALSE 81402
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
81324: LD_VAR 0 2
81328: PPUSH
81329: CALL_OW 247
81333: PUSH
81334: LD_INT 3
81336: PUSH
81337: LD_INT 2
81339: PUSH
81340: EMPTY
81341: LIST
81342: LIST
81343: IN
81344: PUSH
81345: LD_VAR 0 1
81349: PPUSH
81350: CALL_OW 255
81354: PPUSH
81355: LD_VAR 0 2
81359: PPUSH
81360: CALL_OW 292
81364: AND
81365: IFFALSE 81383
// ComAttackUnit ( unit , enemy ) else
81367: LD_VAR 0 1
81371: PPUSH
81372: LD_VAR 0 2
81376: PPUSH
81377: CALL_OW 115
81381: GO 81402
// ComAgressiveMove ( unit , x , y ) ;
81383: LD_VAR 0 1
81387: PPUSH
81388: LD_VAR 0 4
81392: PPUSH
81393: LD_VAR 0 5
81397: PPUSH
81398: CALL_OW 114
// end ; end_of_file
81402: LD_VAR 0 3
81406: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
81407: LD_VAR 0 1
81411: PUSH
81412: LD_INT 200
81414: DOUBLE
81415: GREATEREQUAL
81416: IFFALSE 81424
81418: LD_INT 299
81420: DOUBLE
81421: LESSEQUAL
81422: IFTRUE 81426
81424: GO 81458
81426: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
81427: LD_VAR 0 1
81431: PPUSH
81432: LD_VAR 0 2
81436: PPUSH
81437: LD_VAR 0 3
81441: PPUSH
81442: LD_VAR 0 4
81446: PPUSH
81447: LD_VAR 0 5
81451: PPUSH
81452: CALL 35951 0 5
81456: GO 81535
81458: LD_INT 300
81460: DOUBLE
81461: GREATEREQUAL
81462: IFFALSE 81470
81464: LD_INT 399
81466: DOUBLE
81467: LESSEQUAL
81468: IFTRUE 81472
81470: GO 81534
81472: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
81473: LD_VAR 0 1
81477: PPUSH
81478: LD_VAR 0 2
81482: PPUSH
81483: LD_VAR 0 3
81487: PPUSH
81488: LD_VAR 0 4
81492: PPUSH
81493: LD_VAR 0 5
81497: PPUSH
81498: LD_VAR 0 6
81502: PPUSH
81503: LD_VAR 0 7
81507: PPUSH
81508: LD_VAR 0 8
81512: PPUSH
81513: LD_VAR 0 9
81517: PPUSH
81518: LD_VAR 0 10
81522: PPUSH
81523: LD_VAR 0 11
81527: PPUSH
81528: CALL 32276 0 11
81532: GO 81535
81534: POP
// end ;
81535: PPOPN 11
81537: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
81538: LD_VAR 0 1
81542: PPUSH
81543: LD_VAR 0 2
81547: PPUSH
81548: LD_VAR 0 3
81552: PPUSH
81553: LD_VAR 0 4
81557: PPUSH
81558: LD_VAR 0 5
81562: PPUSH
81563: CALL 35687 0 5
// end ; end_of_file
81567: PPOPN 5
81569: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
81570: LD_VAR 0 1
81574: PPUSH
81575: LD_VAR 0 2
81579: PPUSH
81580: LD_VAR 0 3
81584: PPUSH
81585: LD_VAR 0 4
81589: PPUSH
81590: LD_VAR 0 5
81594: PPUSH
81595: LD_VAR 0 6
81599: PPUSH
81600: CALL 19928 0 6
// end ;
81604: PPOPN 6
81606: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
81607: LD_INT 0
81609: PPUSH
// begin if not units then
81610: LD_VAR 0 1
81614: NOT
81615: IFFALSE 81619
// exit ;
81617: GO 81619
// end ;
81619: PPOPN 7
81621: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
81622: CALL 19832 0 0
// end ;
81626: PPOPN 1
81628: END
