// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// PrepareTrigger ;
  15: CALL 40 0 0
// PrepareVulcanoBase ;
  19: CALL 1142 0 0
// PrepareRussian ;
  23: CALL 3824 0 0
// PrepareLegion ;
  27: CALL 8105 0 0
// Action ;
  31: CALL 11613 0 0
// InitArt ;
  35: CALL 241 0 0
// end ;
  39: END
// export base_captured , russian_prepared , ru_can_attack , ru_sib_bomb , chance_to_bomb , player_res_art , artifact_progress , player_artifact_ready , art_icon , time_res_art , player_commander , time_to_reuse , mine_vulc , medal_enabled , debug , dead_counter , kill_counter , veh_counter , tech_counter , sib_contamin_counter , event_legion_attack , event_russian_attack , event_alliance_attack ; function PrepareTrigger ; begin
  40: LD_INT 0
  42: PPUSH
// debug := false ;
  43: LD_ADDR_EXP 15
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// base_captured := false ;
  51: LD_ADDR_EXP 1
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// russian_prepared := false ;
  59: LD_ADDR_EXP 2
  63: PUSH
  64: LD_INT 0
  66: ST_TO_ADDR
// ru_can_attack := false ;
  67: LD_ADDR_EXP 3
  71: PUSH
  72: LD_INT 0
  74: ST_TO_ADDR
// ru_sib_bomb := false ;
  75: LD_ADDR_EXP 4
  79: PUSH
  80: LD_INT 0
  82: ST_TO_ADDR
// chance_to_bomb := [ 5 , 10 , 25 ] [ Difficulty ] ;
  83: LD_ADDR_EXP 5
  87: PUSH
  88: LD_INT 5
  90: PUSH
  91: LD_INT 10
  93: PUSH
  94: LD_INT 25
  96: PUSH
  97: EMPTY
  98: LIST
  99: LIST
 100: LIST
 101: PUSH
 102: LD_OWVAR 67
 106: ARRAY
 107: ST_TO_ADDR
// player_res_art := false ;
 108: LD_ADDR_EXP 6
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// player_artifact_ready := false ;
 116: LD_ADDR_EXP 8
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// art_icon := art_use_atom ;
 124: LD_ADDR_EXP 9
 128: PUSH
 129: LD_INT 7
 131: ST_TO_ADDR
// time_res_art := 600 ;
 132: LD_ADDR_EXP 10
 136: PUSH
 137: LD_INT 600
 139: ST_TO_ADDR
// time_to_reuse := 10 10$00 ;
 140: LD_ADDR_EXP 12
 144: PUSH
 145: LD_INT 21000
 147: ST_TO_ADDR
// mine_vulc := false ;
 148: LD_ADDR_EXP 13
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// medal_enabled := false ;
 156: LD_ADDR_EXP 14
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// dead_counter := 0 ;
 164: LD_ADDR_EXP 16
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// kill_counter := 0 ;
 172: LD_ADDR_EXP 17
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// veh_counter := 0 ;
 180: LD_ADDR_EXP 18
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// tech_counter := 0 ;
 188: LD_ADDR_EXP 19
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// sib_contamin_counter := 0 ;
 196: LD_ADDR_EXP 20
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// artifact_progress := 0 ;
 204: LD_ADDR_EXP 7
 208: PUSH
 209: LD_INT 0
 211: ST_TO_ADDR
// event_legion_attack := 1 ;
 212: LD_ADDR_EXP 21
 216: PUSH
 217: LD_INT 1
 219: ST_TO_ADDR
// event_russian_attack := 2 ;
 220: LD_ADDR_EXP 22
 224: PUSH
 225: LD_INT 2
 227: ST_TO_ADDR
// event_alliance_attack := 3 ;
 228: LD_ADDR_EXP 23
 232: PUSH
 233: LD_INT 3
 235: ST_TO_ADDR
// end ;
 236: LD_VAR 0 1
 240: RET
// function InitArt ; begin
 241: LD_INT 0
 243: PPUSH
// SetArtifactRes ( your_side , true ) ;
 244: LD_OWVAR 2
 248: PPUSH
 249: LD_INT 1
 251: PPUSH
 252: CALL_OW 467
// end ; end_of_file
 256: LD_VAR 0 1
 260: RET
// export us_commander , us_force , us_skill , us_guy ; export function PrepareAmerican ; var i , filter , un , team ; begin
 261: LD_INT 0
 263: PPUSH
 264: PPUSH
 265: PPUSH
 266: PPUSH
 267: PPUSH
// us_skill := [ 7 , 6 , 5 ] [ Difficulty ] ;
 268: LD_ADDR_EXP 26
 272: PUSH
 273: LD_INT 7
 275: PUSH
 276: LD_INT 6
 278: PUSH
 279: LD_INT 5
 281: PUSH
 282: EMPTY
 283: LIST
 284: LIST
 285: LIST
 286: PUSH
 287: LD_OWVAR 67
 291: ARRAY
 292: ST_TO_ADDR
// us_force := [ ] ;
 293: LD_ADDR_EXP 25
 297: PUSH
 298: EMPTY
 299: ST_TO_ADDR
// RemoveEnvironmentArea ( evn ) ;
 300: LD_INT 17
 302: PPUSH
 303: CALL_OW 355
// PrepareAllianceAI ( ) ;
 307: CALL 17044 0 0
// uc_side := 1 ;
 311: LD_ADDR_OWVAR 20
 315: PUSH
 316: LD_INT 1
 318: ST_TO_ADDR
// uc_nation := nation_american ;
 319: LD_ADDR_OWVAR 21
 323: PUSH
 324: LD_INT 1
 326: ST_TO_ADDR
// hc_gallery :=  ;
 327: LD_ADDR_OWVAR 33
 331: PUSH
 332: LD_STRING 
 334: ST_TO_ADDR
// hc_name :=  ;
 335: LD_ADDR_OWVAR 26
 339: PUSH
 340: LD_STRING 
 342: ST_TO_ADDR
// hc_importance := 0 ;
 343: LD_ADDR_OWVAR 32
 347: PUSH
 348: LD_INT 0
 350: ST_TO_ADDR
// for i = 1 to 11 do
 351: LD_ADDR_VAR 0 2
 355: PUSH
 356: DOUBLE
 357: LD_INT 1
 359: DEC
 360: ST_TO_ADDR
 361: LD_INT 11
 363: PUSH
 364: FOR_TO
 365: IFFALSE 418
// begin PrepareHuman ( false , Rand ( 1 , 4 ) , us_skill ) ;
 367: LD_INT 0
 369: PPUSH
 370: LD_INT 1
 372: PPUSH
 373: LD_INT 4
 375: PPUSH
 376: CALL_OW 12
 380: PPUSH
 381: LD_EXP 26
 385: PPUSH
 386: CALL_OW 380
// un := CreateHuman ;
 390: LD_ADDR_VAR 0 4
 394: PUSH
 395: CALL_OW 44
 399: ST_TO_ADDR
// us_force := us_force ^ un ;
 400: LD_ADDR_EXP 25
 404: PUSH
 405: LD_EXP 25
 409: PUSH
 410: LD_VAR 0 4
 414: ADD
 415: ST_TO_ADDR
// end ;
 416: GO 364
 418: POP
 419: POP
// hc_importance := 100 ;
 420: LD_ADDR_OWVAR 32
 424: PUSH
 425: LD_INT 100
 427: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , us_skill ) ;
 428: LD_INT 1
 430: PPUSH
 431: LD_INT 1
 433: PPUSH
 434: LD_EXP 26
 438: PPUSH
 439: CALL_OW 380
// hc_gallery := skirmish ;
 443: LD_ADDR_OWVAR 33
 447: PUSH
 448: LD_STRING skirmish
 450: ST_TO_ADDR
// hc_face_number := 10 ;
 451: LD_ADDR_OWVAR 34
 455: PUSH
 456: LD_INT 10
 458: ST_TO_ADDR
// hc_name := Michael Anderson ;
 459: LD_ADDR_OWVAR 26
 463: PUSH
 464: LD_STRING Michael Anderson
 466: ST_TO_ADDR
// us_commander := CreateHuman ;
 467: LD_ADDR_EXP 24
 471: PUSH
 472: CALL_OW 44
 476: ST_TO_ADDR
// player_commander := us_commander ;
 477: LD_ADDR_EXP 11
 481: PUSH
 482: LD_EXP 24
 486: ST_TO_ADDR
// hc_importance := 0 ;
 487: LD_ADDR_OWVAR 32
 491: PUSH
 492: LD_INT 0
 494: ST_TO_ADDR
// hc_gallery :=  ;
 495: LD_ADDR_OWVAR 33
 499: PUSH
 500: LD_STRING 
 502: ST_TO_ADDR
// team := CharacterSelection ( text , [ 7 , 6 , 5 ] [ Difficulty ] , [ 7 , 6 , 5 ] [ Difficulty ] , [ sel_change_class , us_commander , sel_changeable , sel_not_hired ] ^ us_force , [ class_soldier , [ class_mechanic , 1 ] , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , [ 5 , 5 , - 1 ] [ Difficulty ] ] ) ;
 503: LD_ADDR_VAR 0 5
 507: PUSH
 508: LD_STRING text
 510: PPUSH
 511: LD_INT 7
 513: PUSH
 514: LD_INT 6
 516: PUSH
 517: LD_INT 5
 519: PUSH
 520: EMPTY
 521: LIST
 522: LIST
 523: LIST
 524: PUSH
 525: LD_OWVAR 67
 529: ARRAY
 530: PPUSH
 531: LD_INT 7
 533: PUSH
 534: LD_INT 6
 536: PUSH
 537: LD_INT 5
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: LIST
 544: PUSH
 545: LD_OWVAR 67
 549: ARRAY
 550: PPUSH
 551: LD_INT -5
 553: PUSH
 554: LD_EXP 24
 558: PUSH
 559: LD_INT -3
 561: PUSH
 562: LD_INT -2
 564: PUSH
 565: EMPTY
 566: LIST
 567: LIST
 568: LIST
 569: LIST
 570: PUSH
 571: LD_EXP 25
 575: ADD
 576: PPUSH
 577: LD_INT 1
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 1
 585: PUSH
 586: EMPTY
 587: LIST
 588: LIST
 589: PUSH
 590: LD_INT 2
 592: PUSH
 593: LD_INT 1
 595: PUSH
 596: EMPTY
 597: LIST
 598: LIST
 599: PUSH
 600: LD_INT 4
 602: PUSH
 603: LD_INT 1
 605: PUSH
 606: EMPTY
 607: LIST
 608: LIST
 609: PUSH
 610: LD_INT 5
 612: PUSH
 613: LD_INT 5
 615: PUSH
 616: LD_INT 1
 618: NEG
 619: PUSH
 620: EMPTY
 621: LIST
 622: LIST
 623: LIST
 624: PUSH
 625: LD_OWVAR 67
 629: ARRAY
 630: PUSH
 631: EMPTY
 632: LIST
 633: LIST
 634: LIST
 635: LIST
 636: LIST
 637: PPUSH
 638: CALL_OW 42
 642: ST_TO_ADDR
// team := team ^ us_commander ;
 643: LD_ADDR_VAR 0 5
 647: PUSH
 648: LD_VAR 0 5
 652: PUSH
 653: LD_EXP 24
 657: ADD
 658: ST_TO_ADDR
// for i = 1 to team do
 659: LD_ADDR_VAR 0 2
 663: PUSH
 664: DOUBLE
 665: LD_INT 1
 667: DEC
 668: ST_TO_ADDR
 669: LD_VAR 0 5
 673: PUSH
 674: FOR_TO
 675: IFFALSE 875
// begin if GetClass ( team [ i ] ) = class_mechanic then
 677: LD_VAR 0 5
 681: PUSH
 682: LD_VAR 0 2
 686: ARRAY
 687: PPUSH
 688: CALL_OW 257
 692: PUSH
 693: LD_INT 3
 695: EQUAL
 696: IFFALSE 837
// begin vc_chassis := [ us_medium_tracked , us_heavy_tracked , us_morphling ] [ i mod 3 + 1 ] ;
 698: LD_ADDR_OWVAR 37
 702: PUSH
 703: LD_INT 3
 705: PUSH
 706: LD_INT 4
 708: PUSH
 709: LD_INT 5
 711: PUSH
 712: EMPTY
 713: LIST
 714: LIST
 715: LIST
 716: PUSH
 717: LD_VAR 0 2
 721: PUSH
 722: LD_INT 3
 724: MOD
 725: PUSH
 726: LD_INT 1
 728: PLUS
 729: ARRAY
 730: ST_TO_ADDR
// vc_engine := engine_siberite ;
 731: LD_ADDR_OWVAR 39
 735: PUSH
 736: LD_INT 3
 738: ST_TO_ADDR
// vc_control := control_manual ;
 739: LD_ADDR_OWVAR 38
 743: PUSH
 744: LD_INT 1
 746: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_laser ] [ rand ( 1 , 3 ) ] ;
 747: LD_ADDR_OWVAR 40
 751: PUSH
 752: LD_INT 4
 754: PUSH
 755: LD_INT 5
 757: PUSH
 758: LD_INT 9
 760: PUSH
 761: EMPTY
 762: LIST
 763: LIST
 764: LIST
 765: PUSH
 766: LD_INT 1
 768: PPUSH
 769: LD_INT 3
 771: PPUSH
 772: CALL_OW 12
 776: ARRAY
 777: ST_TO_ADDR
// un := CreateVehicle ;
 778: LD_ADDR_VAR 0 4
 782: PUSH
 783: CALL_OW 45
 787: ST_TO_ADDR
// SetDir ( un , 2 ) ;
 788: LD_VAR 0 4
 792: PPUSH
 793: LD_INT 2
 795: PPUSH
 796: CALL_OW 233
// PlaceUnitArea ( un , start_north , false ) ;
 800: LD_VAR 0 4
 804: PPUSH
 805: LD_INT 1
 807: PPUSH
 808: LD_INT 0
 810: PPUSH
 811: CALL_OW 49
// PlaceHumanInUnit ( team [ i ] , un ) ;
 815: LD_VAR 0 5
 819: PUSH
 820: LD_VAR 0 2
 824: ARRAY
 825: PPUSH
 826: LD_VAR 0 4
 830: PPUSH
 831: CALL_OW 52
// end else
 835: GO 873
// begin PlaceUnitArea ( team [ i ] , start_north , false ) ;
 837: LD_VAR 0 5
 841: PUSH
 842: LD_VAR 0 2
 846: ARRAY
 847: PPUSH
 848: LD_INT 1
 850: PPUSH
 851: LD_INT 0
 853: PPUSH
 854: CALL_OW 49
// ComHold ( team [ i ] ) ;
 858: LD_VAR 0 5
 862: PUSH
 863: LD_VAR 0 2
 867: ARRAY
 868: PPUSH
 869: CALL_OW 140
// end ; end ;
 873: GO 674
 875: POP
 876: POP
// end ;
 877: LD_VAR 0 1
 881: RET
// every 0 0$38 + 2 2$30 trigger tick < 73500 do
 882: LD_OWVAR 1
 886: PUSH
 887: LD_INT 73500
 889: LESS
 890: IFFALSE 917
 892: GO 894
 894: DISABLE
// begin enable ;
 895: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , extra_crates , true ) ;
 896: LD_INT 1
 898: PPUSH
 899: LD_INT 5
 901: PPUSH
 902: CALL_OW 12
 906: PPUSH
 907: LD_INT 23
 909: PPUSH
 910: LD_INT 1
 912: PPUSH
 913: CALL_OW 55
// end ;
 917: END
// every 1 1$10 do var time , p , l ;
 918: GO 920
 920: DISABLE
 921: LD_INT 0
 923: PPUSH
 924: PPUSH
 925: PPUSH
// begin time := 0 0$44 ;
 926: LD_ADDR_VAR 0 1
 930: PUSH
 931: LD_INT 1540
 933: ST_TO_ADDR
// l := 0 ;
 934: LD_ADDR_VAR 0 3
 938: PUSH
 939: LD_INT 0
 941: ST_TO_ADDR
// repeat begin Wait ( time ) ;
 942: LD_VAR 0 1
 946: PPUSH
 947: CALL_OW 67
// l := l + 1 ;
 951: LD_ADDR_VAR 0 3
 955: PUSH
 956: LD_VAR 0 3
 960: PUSH
 961: LD_INT 1
 963: PLUS
 964: ST_TO_ADDR
// if GetListOfCratesInArea ( us_crates ) < 20 then
 965: LD_INT 12
 967: PPUSH
 968: CALL_OW 435
 972: PUSH
 973: LD_INT 20
 975: LESS
 976: IFFALSE 1035
// begin CreateCratesArea ( Rand ( 1 , 5 ) , us_crates , true ) ;
 978: LD_INT 1
 980: PPUSH
 981: LD_INT 5
 983: PPUSH
 984: CALL_OW 12
 988: PPUSH
 989: LD_INT 12
 991: PPUSH
 992: LD_INT 1
 994: PPUSH
 995: CALL_OW 55
// Wait ( Rand ( 0 0$39 , 0 0$48 ) ) ;
 999: LD_INT 1365
1001: PPUSH
1002: LD_INT 1680
1004: PPUSH
1005: CALL_OW 12
1009: PPUSH
1010: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 5 ) , us_crates , true ) ;
1014: LD_INT 1
1016: PPUSH
1017: LD_INT 5
1019: PPUSH
1020: CALL_OW 12
1024: PPUSH
1025: LD_INT 12
1027: PPUSH
1028: LD_INT 1
1030: PPUSH
1031: CALL_OW 55
// end ; p := Rand ( 0 , 1 ) ;
1035: LD_ADDR_VAR 0 2
1039: PUSH
1040: LD_INT 0
1042: PPUSH
1043: LD_INT 1
1045: PPUSH
1046: CALL_OW 12
1050: ST_TO_ADDR
// if p then
1051: LD_VAR 0 2
1055: IFFALSE 1090
// begin Wait ( Rand ( 0 0$09 , 0 0$20 ) ) ;
1057: LD_INT 315
1059: PPUSH
1060: LD_INT 700
1062: PPUSH
1063: CALL_OW 12
1067: PPUSH
1068: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 4 ) , true ) ;
1072: LD_INT 1
1074: PPUSH
1075: LD_INT 4
1077: PPUSH
1078: CALL_OW 12
1082: PPUSH
1083: LD_INT 1
1085: PPUSH
1086: CALL_OW 57
// end ; if l mod [ 15 , 13 , 11 ] [ Difficulty ] = 0 then
1090: LD_VAR 0 3
1094: PUSH
1095: LD_INT 15
1097: PUSH
1098: LD_INT 13
1100: PUSH
1101: LD_INT 11
1103: PUSH
1104: EMPTY
1105: LIST
1106: LIST
1107: LIST
1108: PUSH
1109: LD_OWVAR 67
1113: ARRAY
1114: MOD
1115: PUSH
1116: LD_INT 0
1118: EQUAL
1119: IFFALSE 1135
// time := time + 2 2$00 ;
1121: LD_ADDR_VAR 0 1
1125: PUSH
1126: LD_VAR 0 1
1130: PUSH
1131: LD_INT 4200
1133: PLUS
1134: ST_TO_ADDR
// end until false ;
1135: LD_INT 0
1137: IFFALSE 942
// end ; end_of_file
1139: PPOPN 3
1141: END
// export russians_in_base ; export function PrepareVulcanoBase ; var i , filter , hp , un , area ; begin
1142: LD_INT 0
1144: PPUSH
1145: PPUSH
1146: PPUSH
1147: PPUSH
1148: PPUSH
1149: PPUSH
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) ;
1150: LD_ADDR_VAR 0 3
1154: PUSH
1155: LD_INT 22
1157: PUSH
1158: LD_INT 4
1160: PUSH
1161: EMPTY
1162: LIST
1163: LIST
1164: PUSH
1165: LD_INT 21
1167: PUSH
1168: LD_INT 3
1170: PUSH
1171: EMPTY
1172: LIST
1173: LIST
1174: PUSH
1175: EMPTY
1176: LIST
1177: LIST
1178: PPUSH
1179: CALL_OW 69
1183: ST_TO_ADDR
// hp := [ 470 , 370 , 290 ] [ Difficulty ] ;
1184: LD_ADDR_VAR 0 4
1188: PUSH
1189: LD_INT 470
1191: PUSH
1192: LD_INT 370
1194: PUSH
1195: LD_INT 290
1197: PUSH
1198: EMPTY
1199: LIST
1200: LIST
1201: LIST
1202: PUSH
1203: LD_OWVAR 67
1207: ARRAY
1208: ST_TO_ADDR
// case Difficulty of 2 :
1209: LD_OWVAR 67
1213: PUSH
1214: LD_INT 2
1216: DOUBLE
1217: EQUAL
1218: IFTRUE 1222
1220: GO 1253
1222: POP
// begin DestroyUnit ( UnitFilter ( filter , [ f_btype , b_bunker ] ) [ 1 ] ) ;
1223: LD_VAR 0 3
1227: PPUSH
1228: LD_INT 30
1230: PUSH
1231: LD_INT 32
1233: PUSH
1234: EMPTY
1235: LIST
1236: LIST
1237: PPUSH
1238: CALL_OW 72
1242: PUSH
1243: LD_INT 1
1245: ARRAY
1246: PPUSH
1247: CALL_OW 65
// end ; 3 :
1251: GO 1329
1253: LD_INT 3
1255: DOUBLE
1256: EQUAL
1257: IFTRUE 1261
1259: GO 1328
1261: POP
// begin DestroyUnit ( UnitFilter ( filter , [ f_btype , b_bunker ] ) [ 1 ] ) ;
1262: LD_VAR 0 3
1266: PPUSH
1267: LD_INT 30
1269: PUSH
1270: LD_INT 32
1272: PUSH
1273: EMPTY
1274: LIST
1275: LIST
1276: PPUSH
1277: CALL_OW 72
1281: PUSH
1282: LD_INT 1
1284: ARRAY
1285: PPUSH
1286: CALL_OW 65
// DestroyUnit ( UnitFilter ( filter , [ f_btype , b_solar_power ] ) [ Rand ( 1 , 3 ) ] ) ;
1290: LD_VAR 0 3
1294: PPUSH
1295: LD_INT 30
1297: PUSH
1298: LD_INT 27
1300: PUSH
1301: EMPTY
1302: LIST
1303: LIST
1304: PPUSH
1305: CALL_OW 72
1309: PUSH
1310: LD_INT 1
1312: PPUSH
1313: LD_INT 3
1315: PPUSH
1316: CALL_OW 12
1320: ARRAY
1321: PPUSH
1322: CALL_OW 65
// end ; end ;
1326: GO 1329
1328: POP
// for i = 1 to filter do
1329: LD_ADDR_VAR 0 2
1333: PUSH
1334: DOUBLE
1335: LD_INT 1
1337: DEC
1338: ST_TO_ADDR
1339: LD_VAR 0 3
1343: PUSH
1344: FOR_TO
1345: IFFALSE 1382
// SetLives ( filter [ i ] , hp + Rand ( - 29 , 29 ) ) ;
1347: LD_VAR 0 3
1351: PUSH
1352: LD_VAR 0 2
1356: ARRAY
1357: PPUSH
1358: LD_VAR 0 4
1362: PUSH
1363: LD_INT 29
1365: NEG
1366: PPUSH
1367: LD_INT 29
1369: PPUSH
1370: CALL_OW 12
1374: PLUS
1375: PPUSH
1376: CALL_OW 234
1380: GO 1344
1382: POP
1383: POP
// SetBName ( us_depot , Vulcano1 ) ;
1384: LD_INT 50
1386: PPUSH
1387: LD_STRING Vulcano1
1389: PPUSH
1390: CALL_OW 500
// hc_importance := 0 ;
1394: LD_ADDR_OWVAR 32
1398: PUSH
1399: LD_INT 0
1401: ST_TO_ADDR
// uc_side := 3 ;
1402: LD_ADDR_OWVAR 20
1406: PUSH
1407: LD_INT 3
1409: ST_TO_ADDR
// uc_nation := nation_russian ;
1410: LD_ADDR_OWVAR 21
1414: PUSH
1415: LD_INT 3
1417: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
1418: LD_ADDR_OWVAR 37
1422: PUSH
1423: LD_INT 22
1425: ST_TO_ADDR
// vc_engine := engine_combustion ;
1426: LD_ADDR_OWVAR 39
1430: PUSH
1431: LD_INT 1
1433: ST_TO_ADDR
// vc_control := control_manual ;
1434: LD_ADDR_OWVAR 38
1438: PUSH
1439: LD_INT 1
1441: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1442: LD_ADDR_OWVAR 40
1446: PUSH
1447: LD_INT 51
1449: ST_TO_ADDR
// un := CreateVehicle ;
1450: LD_ADDR_VAR 0 5
1454: PUSH
1455: CALL_OW 45
1459: ST_TO_ADDR
// PlaceUnitXY ( un , 97 , 138 , false ) ;
1460: LD_VAR 0 5
1464: PPUSH
1465: LD_INT 97
1467: PPUSH
1468: LD_INT 138
1470: PPUSH
1471: LD_INT 0
1473: PPUSH
1474: CALL_OW 48
// SetCargo ( un , mat_cans , 100 ) ;
1478: LD_VAR 0 5
1482: PPUSH
1483: LD_INT 1
1485: PPUSH
1486: LD_INT 100
1488: PPUSH
1489: CALL_OW 290
// SetFuel ( un , 45 ) ;
1493: LD_VAR 0 5
1497: PPUSH
1498: LD_INT 45
1500: PPUSH
1501: CALL_OW 240
// un := CreateVehicle ;
1505: LD_ADDR_VAR 0 5
1509: PUSH
1510: CALL_OW 45
1514: ST_TO_ADDR
// PlaceUnitXY ( un , 109 , 154 , false ) ;
1515: LD_VAR 0 5
1519: PPUSH
1520: LD_INT 109
1522: PPUSH
1523: LD_INT 154
1525: PPUSH
1526: LD_INT 0
1528: PPUSH
1529: CALL_OW 48
// SetCargo ( un , mat_cans , 100 ) ;
1533: LD_VAR 0 5
1537: PPUSH
1538: LD_INT 1
1540: PPUSH
1541: LD_INT 100
1543: PPUSH
1544: CALL_OW 290
// SetDir ( un , 1 ) ;
1548: LD_VAR 0 5
1552: PPUSH
1553: LD_INT 1
1555: PPUSH
1556: CALL_OW 233
// SetFuel ( un , 50 ) ;
1560: LD_VAR 0 5
1564: PPUSH
1565: LD_INT 50
1567: PPUSH
1568: CALL_OW 240
// russians_in_base := [ ] ;
1572: LD_ADDR_EXP 28
1576: PUSH
1577: EMPTY
1578: ST_TO_ADDR
// for i = 1 to [ 6 , 6 , 7 ] [ Difficulty ] do
1579: LD_ADDR_VAR 0 2
1583: PUSH
1584: DOUBLE
1585: LD_INT 1
1587: DEC
1588: ST_TO_ADDR
1589: LD_INT 6
1591: PUSH
1592: LD_INT 6
1594: PUSH
1595: LD_INT 7
1597: PUSH
1598: EMPTY
1599: LIST
1600: LIST
1601: LIST
1602: PUSH
1603: LD_OWVAR 67
1607: ARRAY
1608: PUSH
1609: FOR_TO
1610: IFFALSE 1691
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
1612: LD_INT 0
1614: PPUSH
1615: LD_INT 1
1617: PPUSH
1618: LD_INT 4
1620: PUSH
1621: LD_INT 5
1623: PUSH
1624: LD_INT 6
1626: PUSH
1627: EMPTY
1628: LIST
1629: LIST
1630: LIST
1631: PUSH
1632: LD_OWVAR 67
1636: ARRAY
1637: PPUSH
1638: CALL_OW 380
// un := CreateHuman ;
1642: LD_ADDR_VAR 0 5
1646: PUSH
1647: CALL_OW 44
1651: ST_TO_ADDR
// russians_in_base := russians_in_base ^ un ;
1652: LD_ADDR_EXP 28
1656: PUSH
1657: LD_EXP 28
1661: PUSH
1662: LD_VAR 0 5
1666: ADD
1667: ST_TO_ADDR
// PlaceUnitXYR ( un , 94 , 145 , 10 , false ) ;
1668: LD_VAR 0 5
1672: PPUSH
1673: LD_INT 94
1675: PPUSH
1676: LD_INT 145
1678: PPUSH
1679: LD_INT 10
1681: PPUSH
1682: LD_INT 0
1684: PPUSH
1685: CALL_OW 50
// end ;
1689: GO 1609
1691: POP
1692: POP
// end ;
1693: LD_VAR 0 1
1697: RET
// every 0 0$2 trigger UnitFilter ( russians_in_base , [ f_see , 1 ] ) do var enemy ;
1698: LD_EXP 28
1702: PPUSH
1703: LD_INT 101
1705: PUSH
1706: LD_INT 1
1708: PUSH
1709: EMPTY
1710: LIST
1711: LIST
1712: PPUSH
1713: CALL_OW 72
1717: IFFALSE 1783
1719: GO 1721
1721: DISABLE
1722: LD_INT 0
1724: PPUSH
// begin enemy := UnitFilter ( russians_in_base , [ f_see , 1 ] ) [ 1 ] ;
1725: LD_ADDR_VAR 0 1
1729: PUSH
1730: LD_EXP 28
1734: PPUSH
1735: LD_INT 101
1737: PUSH
1738: LD_INT 1
1740: PUSH
1741: EMPTY
1742: LIST
1743: LIST
1744: PPUSH
1745: CALL_OW 72
1749: PUSH
1750: LD_INT 1
1752: ARRAY
1753: ST_TO_ADDR
// ComAgressiveMove ( russians_in_base , GetX ( enemy ) , GetY ( enemy ) ) ;
1754: LD_EXP 28
1758: PPUSH
1759: LD_VAR 0 1
1763: PPUSH
1764: CALL_OW 250
1768: PPUSH
1769: LD_VAR 0 1
1773: PPUSH
1774: CALL_OW 251
1778: PPUSH
1779: CALL_OW 114
// end ;
1783: PPOPN 1
1785: END
// every 0 0$01 trigger GetDistUnitToSide ( us_depot , 1 ) < 40 do var i , un ;
1786: LD_INT 50
1788: PPUSH
1789: LD_INT 1
1791: PPUSH
1792: CALL 2162 0 2
1796: PUSH
1797: LD_INT 40
1799: LESS
1800: IFFALSE 1997
1802: GO 1804
1804: DISABLE
1805: LD_INT 0
1807: PPUSH
1808: PPUSH
// begin uc_side := 4 ;
1809: LD_ADDR_OWVAR 20
1813: PUSH
1814: LD_INT 4
1816: ST_TO_ADDR
// uc_nation := nation_american ;
1817: LD_ADDR_OWVAR 21
1821: PUSH
1822: LD_INT 1
1824: ST_TO_ADDR
// hc_importance := 0 ;
1825: LD_ADDR_OWVAR 32
1829: PUSH
1830: LD_INT 0
1832: ST_TO_ADDR
// for i = 1 to 7 do
1833: LD_ADDR_VAR 0 1
1837: PUSH
1838: DOUBLE
1839: LD_INT 1
1841: DEC
1842: ST_TO_ADDR
1843: LD_INT 7
1845: PUSH
1846: FOR_TO
1847: IFFALSE 1911
// begin PrepareHuman ( false , Rand ( 1 , 3 ) , us_skill ) ;
1849: LD_INT 0
1851: PPUSH
1852: LD_INT 1
1854: PPUSH
1855: LD_INT 3
1857: PPUSH
1858: CALL_OW 12
1862: PPUSH
1863: LD_EXP 26
1867: PPUSH
1868: CALL_OW 380
// un := CreateHuman ;
1872: LD_ADDR_VAR 0 2
1876: PUSH
1877: CALL_OW 44
1881: ST_TO_ADDR
// PlaceUnitArea ( un , base_resp , false ) ;
1882: LD_VAR 0 2
1886: PPUSH
1887: LD_INT 7
1889: PPUSH
1890: LD_INT 0
1892: PPUSH
1893: CALL_OW 49
// SetLives ( un , 10 ) ;
1897: LD_VAR 0 2
1901: PPUSH
1902: LD_INT 10
1904: PPUSH
1905: CALL_OW 234
// end ;
1909: GO 1846
1911: POP
1912: POP
// for i = 1 to 5 do
1913: LD_ADDR_VAR 0 1
1917: PUSH
1918: DOUBLE
1919: LD_INT 1
1921: DEC
1922: ST_TO_ADDR
1923: LD_INT 5
1925: PUSH
1926: FOR_TO
1927: IFFALSE 1995
// begin PrepareHuman ( false , 4 , us_skill ) ;
1929: LD_INT 0
1931: PPUSH
1932: LD_INT 4
1934: PPUSH
1935: LD_EXP 26
1939: PPUSH
1940: CALL_OW 380
// SetDir ( un , 1 ) ;
1944: LD_VAR 0 2
1948: PPUSH
1949: LD_INT 1
1951: PPUSH
1952: CALL_OW 233
// un := CreateHuman ;
1956: LD_ADDR_VAR 0 2
1960: PUSH
1961: CALL_OW 44
1965: ST_TO_ADDR
// PlaceUnitArea ( un , rekt , false ) ;
1966: LD_VAR 0 2
1970: PPUSH
1971: LD_INT 22
1973: PPUSH
1974: LD_INT 0
1976: PPUSH
1977: CALL_OW 49
// SetLives ( un , 10 ) ;
1981: LD_VAR 0 2
1985: PPUSH
1986: LD_INT 10
1988: PPUSH
1989: CALL_OW 234
// end ;
1993: GO 1926
1995: POP
1996: POP
// end ; end_of_file
1997: PPOPN 2
1999: END
// export function PrepareApeman2 ( n ) ; var un , i ; begin
2000: LD_INT 0
2002: PPUSH
2003: PPUSH
2004: PPUSH
// for i = 1 to n do
2005: LD_ADDR_VAR 0 4
2009: PUSH
2010: DOUBLE
2011: LD_INT 1
2013: DEC
2014: ST_TO_ADDR
2015: LD_VAR 0 1
2019: PUSH
2020: FOR_TO
2021: IFFALSE 2155
// begin uc_side := 0 ;
2023: LD_ADDR_OWVAR 20
2027: PUSH
2028: LD_INT 0
2030: ST_TO_ADDR
// uc_nation := 0 ;
2031: LD_ADDR_OWVAR 21
2035: PUSH
2036: LD_INT 0
2038: ST_TO_ADDR
// hc_class := class_apeman ;
2039: LD_ADDR_OWVAR 28
2043: PUSH
2044: LD_INT 12
2046: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
2047: LD_ADDR_OWVAR 31
2051: PUSH
2052: LD_INT 0
2054: PUSH
2055: LD_INT 0
2057: PUSH
2058: LD_INT 0
2060: PUSH
2061: LD_INT 0
2063: PUSH
2064: EMPTY
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: ST_TO_ADDR
// hc_name :=  ;
2070: LD_ADDR_OWVAR 26
2074: PUSH
2075: LD_STRING 
2077: ST_TO_ADDR
// hc_gallery :=  ;
2078: LD_ADDR_OWVAR 33
2082: PUSH
2083: LD_STRING 
2085: ST_TO_ADDR
// hc_importance := 0 ;
2086: LD_ADDR_OWVAR 32
2090: PUSH
2091: LD_INT 0
2093: ST_TO_ADDR
// un := CreateHuman ;
2094: LD_ADDR_VAR 0 3
2098: PUSH
2099: CALL_OW 44
2103: ST_TO_ADDR
// PlaceUnitArea ( un , [ ape1 , ape2 ] [ Rand ( 1 , 2 ) ] , false ) ;
2104: LD_VAR 0 3
2108: PPUSH
2109: LD_INT 19
2111: PUSH
2112: LD_INT 20
2114: PUSH
2115: EMPTY
2116: LIST
2117: LIST
2118: PUSH
2119: LD_INT 1
2121: PPUSH
2122: LD_INT 2
2124: PPUSH
2125: CALL_OW 12
2129: ARRAY
2130: PPUSH
2131: LD_INT 0
2133: PPUSH
2134: CALL_OW 49
// Wait ( Rand ( 0 0$33 , 2 2$33 ) ) ;
2138: LD_INT 1155
2140: PPUSH
2141: LD_INT 5355
2143: PPUSH
2144: CALL_OW 12
2148: PPUSH
2149: CALL_OW 67
// end ;
2153: GO 2020
2155: POP
2156: POP
// end ;
2157: LD_VAR 0 2
2161: RET
// export function GetDistUnitToSide ( unit , side ) ; var tmp , dist ; begin
2162: LD_INT 0
2164: PPUSH
2165: PPUSH
2166: PPUSH
// tmp := NearestUnitToUnit ( FilterAllUnits ( [ f_side , side ] ) , unit ) ;
2167: LD_ADDR_VAR 0 4
2171: PUSH
2172: LD_INT 22
2174: PUSH
2175: LD_VAR 0 2
2179: PUSH
2180: EMPTY
2181: LIST
2182: LIST
2183: PPUSH
2184: CALL_OW 69
2188: PPUSH
2189: LD_VAR 0 1
2193: PPUSH
2194: CALL_OW 74
2198: ST_TO_ADDR
// dist := GetDistUnits ( unit , tmp ) ;
2199: LD_ADDR_VAR 0 5
2203: PUSH
2204: LD_VAR 0 1
2208: PPUSH
2209: LD_VAR 0 4
2213: PPUSH
2214: CALL_OW 296
2218: ST_TO_ADDR
// if dist >= 9999 then
2219: LD_VAR 0 5
2223: PUSH
2224: LD_INT 9999
2226: GREATEREQUAL
2227: IFFALSE 2240
// result := - 1 else
2229: LD_ADDR_VAR 0 3
2233: PUSH
2234: LD_INT 1
2236: NEG
2237: ST_TO_ADDR
2238: GO 2250
// result := dist ;
2240: LD_ADDR_VAR 0 3
2244: PUSH
2245: LD_VAR 0 5
2249: ST_TO_ADDR
// end ;
2250: LD_VAR 0 3
2254: RET
// export function NearestUnitToSide ( plist , side ) ; var i , tmp , unit ; begin
2255: LD_INT 0
2257: PPUSH
2258: PPUSH
2259: PPUSH
2260: PPUSH
// tmp := 9999 ;
2261: LD_ADDR_VAR 0 5
2265: PUSH
2266: LD_INT 9999
2268: ST_TO_ADDR
// for i = 1 to plist do
2269: LD_ADDR_VAR 0 4
2273: PUSH
2274: DOUBLE
2275: LD_INT 1
2277: DEC
2278: ST_TO_ADDR
2279: LD_VAR 0 1
2283: PUSH
2284: FOR_TO
2285: IFFALSE 2359
// if GetDistUnitToSide ( plist [ i ] , side ) < tmp then
2287: LD_VAR 0 1
2291: PUSH
2292: LD_VAR 0 4
2296: ARRAY
2297: PPUSH
2298: LD_VAR 0 2
2302: PPUSH
2303: CALL 2162 0 2
2307: PUSH
2308: LD_VAR 0 5
2312: LESS
2313: IFFALSE 2357
// begin tmp := GetDistUnitToSide ( plist [ i ] , side ) ;
2315: LD_ADDR_VAR 0 5
2319: PUSH
2320: LD_VAR 0 1
2324: PUSH
2325: LD_VAR 0 4
2329: ARRAY
2330: PPUSH
2331: LD_VAR 0 2
2335: PPUSH
2336: CALL 2162 0 2
2340: ST_TO_ADDR
// unit := plist [ i ] ;
2341: LD_ADDR_VAR 0 6
2345: PUSH
2346: LD_VAR 0 1
2350: PUSH
2351: LD_VAR 0 4
2355: ARRAY
2356: ST_TO_ADDR
// end ;
2357: GO 2284
2359: POP
2360: POP
// result := unit ;
2361: LD_ADDR_VAR 0 3
2365: PUSH
2366: LD_VAR 0 6
2370: ST_TO_ADDR
// end ;
2371: LD_VAR 0 3
2375: RET
// export function CalculateCommanderPoints ; var points , crates_collected , sib_collected , i ; begin
2376: LD_INT 0
2378: PPUSH
2379: PPUSH
2380: PPUSH
2381: PPUSH
2382: PPUSH
// points := [ 1000 , 2500 , 5000 ] [ Difficulty ] ;
2383: LD_ADDR_VAR 0 2
2387: PUSH
2388: LD_INT 1000
2390: PUSH
2391: LD_INT 2500
2393: PUSH
2394: LD_INT 5000
2396: PUSH
2397: EMPTY
2398: LIST
2399: LIST
2400: LIST
2401: PUSH
2402: LD_OWVAR 67
2406: ARRAY
2407: ST_TO_ADDR
// points := points + ( - 1 * FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) * 30 ) ;
2408: LD_ADDR_VAR 0 2
2412: PUSH
2413: LD_VAR 0 2
2417: PUSH
2418: LD_INT 1
2420: NEG
2421: PUSH
2422: LD_INT 22
2424: PUSH
2425: LD_OWVAR 2
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: PUSH
2434: LD_INT 21
2436: PUSH
2437: LD_INT 3
2439: PUSH
2440: EMPTY
2441: LIST
2442: LIST
2443: PUSH
2444: EMPTY
2445: LIST
2446: LIST
2447: PPUSH
2448: CALL_OW 69
2452: MUL
2453: PUSH
2454: LD_INT 30
2456: MUL
2457: PLUS
2458: ST_TO_ADDR
// points := points + ( kill_counter * 10 ) ;
2459: LD_ADDR_VAR 0 2
2463: PUSH
2464: LD_VAR 0 2
2468: PUSH
2469: LD_EXP 17
2473: PUSH
2474: LD_INT 10
2476: MUL
2477: PLUS
2478: ST_TO_ADDR
// points := points + ( - 1 * kill_counter * 20 ) ;
2479: LD_ADDR_VAR 0 2
2483: PUSH
2484: LD_VAR 0 2
2488: PUSH
2489: LD_INT 1
2491: NEG
2492: PUSH
2493: LD_EXP 17
2497: MUL
2498: PUSH
2499: LD_INT 20
2501: MUL
2502: PLUS
2503: ST_TO_ADDR
// points := points + ( - 1 * ( ( tick / 35 ) / 60 ) * 25 ) ;
2504: LD_ADDR_VAR 0 2
2508: PUSH
2509: LD_VAR 0 2
2513: PUSH
2514: LD_INT 1
2516: NEG
2517: PUSH
2518: LD_OWVAR 1
2522: PUSH
2523: LD_INT 35
2525: DIVREAL
2526: PUSH
2527: LD_INT 60
2529: DIVREAL
2530: MUL
2531: PUSH
2532: LD_INT 25
2534: MUL
2535: PLUS
2536: ST_TO_ADDR
// points := points + ( tech_counter * 15 ) ;
2537: LD_ADDR_VAR 0 2
2541: PUSH
2542: LD_VAR 0 2
2546: PUSH
2547: LD_EXP 19
2551: PUSH
2552: LD_INT 15
2554: MUL
2555: PLUS
2556: ST_TO_ADDR
// points := points + ( - 1 * sib_contamin_counter ) * 1000 ;
2557: LD_ADDR_VAR 0 2
2561: PUSH
2562: LD_VAR 0 2
2566: PUSH
2567: LD_INT 1
2569: NEG
2570: PUSH
2571: LD_EXP 20
2575: MUL
2576: PUSH
2577: LD_INT 1000
2579: MUL
2580: PLUS
2581: ST_TO_ADDR
// points := points + ( veh_counter * 5 ) ;
2582: LD_ADDR_VAR 0 2
2586: PUSH
2587: LD_VAR 0 2
2591: PUSH
2592: LD_EXP 18
2596: PUSH
2597: LD_INT 5
2599: MUL
2600: PLUS
2601: ST_TO_ADDR
// result := points ;
2602: LD_ADDR_VAR 0 1
2606: PUSH
2607: LD_VAR 0 2
2611: ST_TO_ADDR
// end ; end_of_file
2612: LD_VAR 0 1
2616: RET
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2617: LD_VAR 0 1
2621: PPUSH
2622: CALL 35600 0 1
// if un = ru_cargo then
2626: LD_VAR 0 1
2630: PUSH
2631: LD_EXP 31
2635: EQUAL
2636: IFFALSE 2646
// ru_cargo := 0 ;
2638: LD_ADDR_EXP 31
2642: PUSH
2643: LD_INT 0
2645: ST_TO_ADDR
// if GetSide ( un ) = your_side then
2646: LD_VAR 0 1
2650: PPUSH
2651: CALL_OW 255
2655: PUSH
2656: LD_OWVAR 2
2660: EQUAL
2661: IFFALSE 2677
// dead_counter := dead_counter + 1 ;
2663: LD_ADDR_EXP 16
2667: PUSH
2668: LD_EXP 16
2672: PUSH
2673: LD_INT 1
2675: PLUS
2676: ST_TO_ADDR
// if GetSide ( un ) in FilterAllUnits ( [ f_enemy , your_side ] ) then
2677: LD_VAR 0 1
2681: PPUSH
2682: CALL_OW 255
2686: PUSH
2687: LD_INT 81
2689: PUSH
2690: LD_OWVAR 2
2694: PUSH
2695: EMPTY
2696: LIST
2697: LIST
2698: PPUSH
2699: CALL_OW 69
2703: IN
2704: IFFALSE 2720
// kill_counter := kill_counter + 1 ;
2706: LD_ADDR_EXP 17
2710: PUSH
2711: LD_EXP 17
2715: PUSH
2716: LD_INT 1
2718: PLUS
2719: ST_TO_ADDR
// if un = player_commander then
2720: LD_VAR 0 1
2724: PUSH
2725: LD_EXP 11
2729: EQUAL
2730: IFFALSE 2739
// YouLost ( vulcano-lost ) ;
2732: LD_STRING vulcano-lost
2734: PPUSH
2735: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) then
2739: LD_VAR 0 1
2743: PUSH
2744: LD_INT 22
2746: PUSH
2747: LD_INT 3
2749: PUSH
2750: EMPTY
2751: LIST
2752: LIST
2753: PUSH
2754: LD_INT 21
2756: PUSH
2757: LD_INT 3
2759: PUSH
2760: EMPTY
2761: LIST
2762: LIST
2763: PUSH
2764: EMPTY
2765: LIST
2766: LIST
2767: PPUSH
2768: CALL_OW 69
2772: IN
2773: IFFALSE 2889
// begin if GetBType ( un ) = b_turret or GetBType ( un ) = b_siberite_power then
2775: LD_VAR 0 1
2779: PPUSH
2780: CALL_OW 266
2784: PUSH
2785: LD_INT 33
2787: EQUAL
2788: PUSH
2789: LD_VAR 0 1
2793: PPUSH
2794: CALL_OW 266
2798: PUSH
2799: LD_INT 28
2801: EQUAL
2802: OR
2803: IFFALSE 2889
// begin ru_blist := ru_blist ^ GetBType ( un ) ;
2805: LD_ADDR_EXP 32
2809: PUSH
2810: LD_EXP 32
2814: PUSH
2815: LD_VAR 0 1
2819: PPUSH
2820: CALL_OW 266
2824: ADD
2825: ST_TO_ADDR
// ru_blist := ru_blist ^ GetX ( un ) ;
2826: LD_ADDR_EXP 32
2830: PUSH
2831: LD_EXP 32
2835: PUSH
2836: LD_VAR 0 1
2840: PPUSH
2841: CALL_OW 250
2845: ADD
2846: ST_TO_ADDR
// ru_blist := ru_blist ^ GetY ( un ) ;
2847: LD_ADDR_EXP 32
2851: PUSH
2852: LD_EXP 32
2856: PUSH
2857: LD_VAR 0 1
2861: PPUSH
2862: CALL_OW 251
2866: ADD
2867: ST_TO_ADDR
// ru_blist := ru_blist ^ GetDir ( un ) ;
2868: LD_ADDR_EXP 32
2872: PUSH
2873: LD_EXP 32
2877: PUSH
2878: LD_VAR 0 1
2882: PPUSH
2883: CALL_OW 254
2887: ADD
2888: ST_TO_ADDR
// end ; end ; if un in FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) then
2889: LD_VAR 0 1
2893: PUSH
2894: LD_INT 22
2896: PUSH
2897: LD_INT 8
2899: PUSH
2900: EMPTY
2901: LIST
2902: LIST
2903: PUSH
2904: LD_INT 21
2906: PUSH
2907: LD_INT 3
2909: PUSH
2910: EMPTY
2911: LIST
2912: LIST
2913: PUSH
2914: EMPTY
2915: LIST
2916: LIST
2917: PPUSH
2918: CALL_OW 69
2922: IN
2923: IFFALSE 3067
// begin if GetBType ( un ) = b_barracks then
2925: LD_VAR 0 1
2929: PPUSH
2930: CALL_OW 266
2934: PUSH
2935: LD_INT 5
2937: EQUAL
2938: IFFALSE 2956
// legion_blist := legion_blist ^ b_armoury else
2940: LD_ADDR_EXP 40
2944: PUSH
2945: LD_EXP 40
2949: PUSH
2950: LD_INT 4
2952: ADD
2953: ST_TO_ADDR
2954: GO 3004
// if not GetBType ( un ) in [ b_warehouse , b_lab , b_lab_full ] then
2956: LD_VAR 0 1
2960: PPUSH
2961: CALL_OW 266
2965: PUSH
2966: LD_INT 1
2968: PUSH
2969: LD_INT 6
2971: PUSH
2972: LD_INT 8
2974: PUSH
2975: EMPTY
2976: LIST
2977: LIST
2978: LIST
2979: IN
2980: NOT
2981: IFFALSE 3004
// legion_blist := legion_blist ^ GetBType ( un ) ;
2983: LD_ADDR_EXP 40
2987: PUSH
2988: LD_EXP 40
2992: PUSH
2993: LD_VAR 0 1
2997: PPUSH
2998: CALL_OW 266
3002: ADD
3003: ST_TO_ADDR
// legion_blist := legion_blist ^ GetX ( un ) ;
3004: LD_ADDR_EXP 40
3008: PUSH
3009: LD_EXP 40
3013: PUSH
3014: LD_VAR 0 1
3018: PPUSH
3019: CALL_OW 250
3023: ADD
3024: ST_TO_ADDR
// legion_blist := legion_blist ^ GetY ( un ) ;
3025: LD_ADDR_EXP 40
3029: PUSH
3030: LD_EXP 40
3034: PUSH
3035: LD_VAR 0 1
3039: PPUSH
3040: CALL_OW 251
3044: ADD
3045: ST_TO_ADDR
// legion_blist := legion_blist ^ GetDir ( un ) ;
3046: LD_ADDR_EXP 40
3050: PUSH
3051: LD_EXP 40
3055: PUSH
3056: LD_VAR 0 1
3060: PPUSH
3061: CALL_OW 254
3065: ADD
3066: ST_TO_ADDR
// end ; if un in legion_force then
3067: LD_VAR 0 1
3071: PUSH
3072: LD_EXP 37
3076: IN
3077: IFFALSE 3095
// legion_force := legion_force diff un ;
3079: LD_ADDR_EXP 37
3083: PUSH
3084: LD_EXP 37
3088: PUSH
3089: LD_VAR 0 1
3093: DIFF
3094: ST_TO_ADDR
// if un in ru_force then
3095: LD_VAR 0 1
3099: PUSH
3100: LD_EXP 29
3104: IN
3105: IFFALSE 3123
// ru_force := ru_force diff un ;
3107: LD_ADDR_EXP 29
3111: PUSH
3112: LD_EXP 29
3116: PUSH
3117: LD_VAR 0 1
3121: DIFF
3122: ST_TO_ADDR
// if un in al_force then
3123: LD_VAR 0 1
3127: PUSH
3128: LD_EXP 44
3132: IN
3133: IFFALSE 3151
// al_force := al_force diff un ;
3135: LD_ADDR_EXP 44
3139: PUSH
3140: LD_EXP 44
3144: PUSH
3145: LD_VAR 0 1
3149: DIFF
3150: ST_TO_ADDR
// end ;
3151: PPOPN 1
3153: END
// on BuildingComplete ( b ) do var i ;
3154: LD_INT 0
3156: PPUSH
// begin if GetSide ( b ) = 8 then
3157: LD_VAR 0 1
3161: PPUSH
3162: CALL_OW 255
3166: PUSH
3167: LD_INT 8
3169: EQUAL
3170: IFFALSE 3210
// for i = 1 to 4 do
3172: LD_ADDR_VAR 0 2
3176: PUSH
3177: DOUBLE
3178: LD_INT 1
3180: DEC
3181: ST_TO_ADDR
3182: LD_INT 4
3184: PUSH
3185: FOR_TO
3186: IFFALSE 3208
// legion_blist := Delete ( legion_blist , 1 ) ;
3188: LD_ADDR_EXP 40
3192: PUSH
3193: LD_EXP 40
3197: PPUSH
3198: LD_INT 1
3200: PPUSH
3201: CALL_OW 3
3205: ST_TO_ADDR
3206: GO 3185
3208: POP
3209: POP
// if GetSide ( b ) = 3 then
3210: LD_VAR 0 1
3214: PPUSH
3215: CALL_OW 255
3219: PUSH
3220: LD_INT 3
3222: EQUAL
3223: IFFALSE 3263
// for i = 1 to 4 do
3225: LD_ADDR_VAR 0 2
3229: PUSH
3230: DOUBLE
3231: LD_INT 1
3233: DEC
3234: ST_TO_ADDR
3235: LD_INT 4
3237: PUSH
3238: FOR_TO
3239: IFFALSE 3261
// ru_blist := Delete ( ru_blist , 1 ) ;
3241: LD_ADDR_EXP 32
3245: PUSH
3246: LD_EXP 32
3250: PPUSH
3251: LD_INT 1
3253: PPUSH
3254: CALL_OW 3
3258: ST_TO_ADDR
3259: GO 3238
3261: POP
3262: POP
// end ;
3263: PPOPN 2
3265: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
3266: LD_VAR 0 1
3270: PPUSH
3271: LD_VAR 0 2
3275: PPUSH
3276: CALL 35720 0 2
// if not GetWeapon ( veh ) in [ ru_cargo_bay , ru_siberium_rocket ] then
3280: LD_VAR 0 1
3284: PPUSH
3285: CALL_OW 264
3289: PUSH
3290: LD_INT 51
3292: PUSH
3293: LD_INT 48
3295: PUSH
3296: EMPTY
3297: LIST
3298: LIST
3299: IN
3300: NOT
3301: IFFALSE 3349
// begin if GetSide ( veh ) = 3 then
3303: LD_VAR 0 1
3307: PPUSH
3308: CALL_OW 255
3312: PUSH
3313: LD_INT 3
3315: EQUAL
3316: IFFALSE 3349
// begin ComMoveXY ( veh , 149 , 8 ) ;
3318: LD_VAR 0 1
3322: PPUSH
3323: LD_INT 149
3325: PPUSH
3326: LD_INT 8
3328: PPUSH
3329: CALL_OW 111
// ru_force := ru_force ^ veh ;
3333: LD_ADDR_EXP 29
3337: PUSH
3338: LD_EXP 29
3342: PUSH
3343: LD_VAR 0 1
3347: ADD
3348: ST_TO_ADDR
// end ; end ; if not GetWeapon ( veh ) in [ ar_cargo_bay , ar_control_tower ] then
3349: LD_VAR 0 1
3353: PPUSH
3354: CALL_OW 264
3358: PUSH
3359: LD_INT 32
3361: PUSH
3362: LD_INT 31
3364: PUSH
3365: EMPTY
3366: LIST
3367: LIST
3368: IN
3369: NOT
3370: IFFALSE 3403
// begin if GetSide ( veh ) = 8 then
3372: LD_VAR 0 1
3376: PPUSH
3377: CALL_OW 255
3381: PUSH
3382: LD_INT 8
3384: EQUAL
3385: IFFALSE 3403
// legion_force := legion_force ^ veh ;
3387: LD_ADDR_EXP 37
3391: PUSH
3392: LD_EXP 37
3396: PUSH
3397: LD_VAR 0 1
3401: ADD
3402: ST_TO_ADDR
// end ; if GetSide ( veh ) = 3 and not ru_cargo and GetWeapon ( veh ) = ru_cargo_bay then
3403: LD_VAR 0 1
3407: PPUSH
3408: CALL_OW 255
3412: PUSH
3413: LD_INT 3
3415: EQUAL
3416: PUSH
3417: LD_EXP 31
3421: NOT
3422: AND
3423: PUSH
3424: LD_VAR 0 1
3428: PPUSH
3429: CALL_OW 264
3433: PUSH
3434: LD_INT 51
3436: EQUAL
3437: AND
3438: IFFALSE 3450
// ru_cargo := veh ;
3440: LD_ADDR_EXP 31
3444: PUSH
3445: LD_VAR 0 1
3449: ST_TO_ADDR
// if GetSide ( veh ) = 7 and your_side <> 7 then
3450: LD_VAR 0 1
3454: PPUSH
3455: CALL_OW 255
3459: PUSH
3460: LD_INT 7
3462: EQUAL
3463: PUSH
3464: LD_OWVAR 2
3468: PUSH
3469: LD_INT 7
3471: NONEQUAL
3472: AND
3473: IFFALSE 3491
// al_force := al_force ^ veh ;
3475: LD_ADDR_EXP 44
3479: PUSH
3480: LD_EXP 44
3484: PUSH
3485: LD_VAR 0 1
3489: ADD
3490: ST_TO_ADDR
// if GetSide ( veh ) = your_side then
3491: LD_VAR 0 1
3495: PPUSH
3496: CALL_OW 255
3500: PUSH
3501: LD_OWVAR 2
3505: EQUAL
3506: IFFALSE 3522
// veh_counter := veh_counter + 1 ;
3508: LD_ADDR_EXP 18
3512: PUSH
3513: LD_EXP 18
3517: PUSH
3518: LD_INT 1
3520: PLUS
3521: ST_TO_ADDR
// end ;
3522: PPOPN 2
3524: END
// on SibDepositContaminated ( contaminating_scientist , x_of_deposit , y_of_deposit ) do begin if GetSide ( contaminating_scientist ) <> your_side then
3525: LD_VAR 0 1
3529: PPUSH
3530: CALL_OW 255
3534: PUSH
3535: LD_OWVAR 2
3539: NONEQUAL
3540: IFFALSE 3556
// sib_contamin_counter := sib_contamin_counter + 1 ;
3542: LD_ADDR_EXP 20
3546: PUSH
3547: LD_EXP 20
3551: PUSH
3552: LD_INT 1
3554: PLUS
3555: ST_TO_ADDR
// end ;
3556: PPOPN 3
3558: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = your_side then
3559: LD_VAR 0 2
3563: PPUSH
3564: CALL_OW 255
3568: PUSH
3569: LD_OWVAR 2
3573: EQUAL
3574: IFFALSE 3590
// tech_counter := tech_counter + 1 ;
3576: LD_ADDR_EXP 19
3580: PUSH
3581: LD_EXP 19
3585: PUSH
3586: LD_INT 1
3588: PLUS
3589: ST_TO_ADDR
// if tech = 53 and your_side = 1 then
3590: LD_VAR 0 1
3594: PUSH
3595: LD_INT 53
3597: EQUAL
3598: PUSH
3599: LD_OWVAR 2
3603: PUSH
3604: LD_INT 1
3606: EQUAL
3607: AND
3608: IFFALSE 3623
// SetTech ( 80 , 1 , state_researched ) ;
3610: LD_INT 80
3612: PPUSH
3613: LD_INT 1
3615: PPUSH
3616: LD_INT 2
3618: PPUSH
3619: CALL_OW 322
// end ;
3623: PPOPN 2
3625: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 8 and GetControl ( un ) = control_remote then
3626: LD_VAR 0 1
3630: PPUSH
3631: CALL_OW 255
3635: PUSH
3636: LD_INT 8
3638: EQUAL
3639: PUSH
3640: LD_VAR 0 1
3644: PPUSH
3645: CALL_OW 263
3649: PUSH
3650: LD_INT 2
3652: EQUAL
3653: AND
3654: IFFALSE 3665
// ComAutodestruct ( un ) ;
3656: LD_VAR 0 1
3660: PPUSH
3661: CALL 73697 0 1
// end ;
3665: PPOPN 1
3667: END
// on SailEvent ( event ) do begin case event of event_legion_attack :
3668: LD_VAR 0 1
3672: PUSH
3673: LD_EXP 21
3677: DOUBLE
3678: EQUAL
3679: IFTRUE 3683
3681: GO 3690
3683: POP
// LegionAttack ( ) ; event_alliance_attack :
3684: CALL 11403 0 0
3688: GO 3725
3690: LD_EXP 23
3694: DOUBLE
3695: EQUAL
3696: IFTRUE 3700
3698: GO 3707
3700: POP
// AllianceAttack ( ) ; event_russian_attack :
3701: CALL 18952 0 0
3705: GO 3725
3707: LD_EXP 22
3711: DOUBLE
3712: EQUAL
3713: IFTRUE 3717
3715: GO 3724
3717: POP
// RussianAttack ( ) ; end ;
3718: CALL 7629 0 0
3722: GO 3725
3724: POP
// end ;
3725: PPOPN 1
3727: END
// every 9 9$30 trigger FilterAllUnits ( [ f_class , class_apeman ] ) < 9 and tick < 50 50$00 do
3728: LD_INT 25
3730: PUSH
3731: LD_INT 12
3733: PUSH
3734: EMPTY
3735: LIST
3736: LIST
3737: PPUSH
3738: CALL_OW 69
3742: PUSH
3743: LD_INT 9
3745: LESS
3746: PUSH
3747: LD_OWVAR 1
3751: PUSH
3752: LD_INT 105000
3754: LESS
3755: AND
3756: IFFALSE 3789
3758: GO 3760
3760: DISABLE
// begin enable ;
3761: ENABLE
// PrepareApeman2 ( 8 - ( FilterAllUnits ( [ f_class , class_apeman ] ) + 0 ) ) ;
3762: LD_INT 8
3764: PUSH
3765: LD_INT 25
3767: PUSH
3768: LD_INT 12
3770: PUSH
3771: EMPTY
3772: LIST
3773: LIST
3774: PPUSH
3775: CALL_OW 69
3779: PUSH
3780: LD_INT 0
3782: PLUS
3783: MINUS
3784: PPUSH
3785: CALL 2000 0 1
// end ;
3789: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
3790: LD_VAR 0 1
3794: PPUSH
3795: LD_VAR 0 2
3799: PPUSH
3800: LD_VAR 0 3
3804: PPUSH
3805: CALL 35696 0 3
// end ;
3809: PPOPN 3
3811: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
3812: LD_VAR 0 1
3816: PPUSH
3817: CALL 35704 0 1
// end ; end_of_file
3821: PPOPN 1
3823: END
// export ru_force , ru_skill , ru_cargo , ru_blist , ru_vlist , ru_amount , ru_time , ru_teleport_exit ; export function PrepareRussian ; var i , un , ru_depot , ru_factory , ru_teleport , ru_barracks , ru_bunkers , ru_buildings , ru_vehicles , ru_humans ; begin
3824: LD_INT 0
3826: PPUSH
3827: PPUSH
3828: PPUSH
3829: PPUSH
3830: PPUSH
3831: PPUSH
3832: PPUSH
3833: PPUSH
3834: PPUSH
3835: PPUSH
3836: PPUSH
// uc_side := 3 ;
3837: LD_ADDR_OWVAR 20
3841: PUSH
3842: LD_INT 3
3844: ST_TO_ADDR
// uc_nation := nation_russian ;
3845: LD_ADDR_OWVAR 21
3849: PUSH
3850: LD_INT 3
3852: ST_TO_ADDR
// ru_depot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
3853: LD_ADDR_VAR 0 4
3857: PUSH
3858: LD_INT 22
3860: PUSH
3861: LD_INT 3
3863: PUSH
3864: EMPTY
3865: LIST
3866: LIST
3867: PUSH
3868: LD_INT 30
3870: PUSH
3871: LD_INT 1
3873: PUSH
3874: EMPTY
3875: LIST
3876: LIST
3877: PUSH
3878: EMPTY
3879: LIST
3880: LIST
3881: PPUSH
3882: CALL_OW 69
3886: PUSH
3887: LD_INT 1
3889: ARRAY
3890: ST_TO_ADDR
// ru_factory := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3891: LD_ADDR_VAR 0 5
3895: PUSH
3896: LD_INT 22
3898: PUSH
3899: LD_INT 3
3901: PUSH
3902: EMPTY
3903: LIST
3904: LIST
3905: PUSH
3906: LD_INT 30
3908: PUSH
3909: LD_INT 3
3911: PUSH
3912: EMPTY
3913: LIST
3914: LIST
3915: PUSH
3916: EMPTY
3917: LIST
3918: LIST
3919: PPUSH
3920: CALL_OW 69
3924: PUSH
3925: LD_INT 1
3927: ARRAY
3928: ST_TO_ADDR
// ru_teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] ;
3929: LD_ADDR_VAR 0 6
3933: PUSH
3934: LD_INT 22
3936: PUSH
3937: LD_INT 3
3939: PUSH
3940: EMPTY
3941: LIST
3942: LIST
3943: PUSH
3944: LD_INT 30
3946: PUSH
3947: LD_INT 34
3949: PUSH
3950: EMPTY
3951: LIST
3952: LIST
3953: PUSH
3954: EMPTY
3955: LIST
3956: LIST
3957: PPUSH
3958: CALL_OW 69
3962: PUSH
3963: LD_INT 1
3965: ARRAY
3966: ST_TO_ADDR
// ru_bunkers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
3967: LD_ADDR_VAR 0 8
3971: PUSH
3972: LD_INT 22
3974: PUSH
3975: LD_INT 3
3977: PUSH
3978: EMPTY
3979: LIST
3980: LIST
3981: PUSH
3982: LD_INT 30
3984: PUSH
3985: LD_INT 33
3987: PUSH
3988: EMPTY
3989: LIST
3990: LIST
3991: PUSH
3992: EMPTY
3993: LIST
3994: LIST
3995: PPUSH
3996: CALL_OW 69
4000: ST_TO_ADDR
// ru_barracks := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
4001: LD_ADDR_VAR 0 7
4005: PUSH
4006: LD_INT 22
4008: PUSH
4009: LD_INT 3
4011: PUSH
4012: EMPTY
4013: LIST
4014: LIST
4015: PUSH
4016: LD_INT 30
4018: PUSH
4019: LD_INT 5
4021: PUSH
4022: EMPTY
4023: LIST
4024: LIST
4025: PUSH
4026: EMPTY
4027: LIST
4028: LIST
4029: PPUSH
4030: CALL_OW 69
4034: PUSH
4035: LD_INT 1
4037: ARRAY
4038: ST_TO_ADDR
// ru_blist := [ ] ;
4039: LD_ADDR_EXP 32
4043: PUSH
4044: EMPTY
4045: ST_TO_ADDR
// ru_vlist := [ ] ;
4046: LD_ADDR_EXP 33
4050: PUSH
4051: EMPTY
4052: ST_TO_ADDR
// ru_teleport_exit := [ 183 , 62 , 147 , 44 ] ;
4053: LD_ADDR_EXP 36
4057: PUSH
4058: LD_INT 183
4060: PUSH
4061: LD_INT 62
4063: PUSH
4064: LD_INT 147
4066: PUSH
4067: LD_INT 44
4069: PUSH
4070: EMPTY
4071: LIST
4072: LIST
4073: LIST
4074: LIST
4075: ST_TO_ADDR
// TeleportExit ( FilterAllUnits ( [ f_btype , b_teleport ] ) [ 1 ] , ru_teleport_exit [ 1 ] , ru_teleport_exit [ 2 ] ) ;
4076: LD_INT 30
4078: PUSH
4079: LD_INT 34
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: PPUSH
4086: CALL_OW 69
4090: PUSH
4091: LD_INT 1
4093: ARRAY
4094: PPUSH
4095: LD_EXP 36
4099: PUSH
4100: LD_INT 1
4102: ARRAY
4103: PPUSH
4104: LD_EXP 36
4108: PUSH
4109: LD_INT 2
4111: ARRAY
4112: PPUSH
4113: CALL_OW 243
// ru_amount := [ 4 , 5 , 6 ] [ Difficulty ] ;
4117: LD_ADDR_EXP 34
4121: PUSH
4122: LD_INT 4
4124: PUSH
4125: LD_INT 5
4127: PUSH
4128: LD_INT 6
4130: PUSH
4131: EMPTY
4132: LIST
4133: LIST
4134: LIST
4135: PUSH
4136: LD_OWVAR 67
4140: ARRAY
4141: ST_TO_ADDR
// SetResourceType ( GetBase ( ru_depot ) , mat_cans , 3000 ) ;
4142: LD_VAR 0 4
4146: PPUSH
4147: CALL_OW 274
4151: PPUSH
4152: LD_INT 1
4154: PPUSH
4155: LD_INT 3000
4157: PPUSH
4158: CALL_OW 277
// SetResourceType ( GetBase ( ru_depot ) , mat_oil , 300 ) ;
4162: LD_VAR 0 4
4166: PPUSH
4167: CALL_OW 274
4171: PPUSH
4172: LD_INT 2
4174: PPUSH
4175: LD_INT 300
4177: PPUSH
4178: CALL_OW 277
// hc_gallery :=  ;
4182: LD_ADDR_OWVAR 33
4186: PUSH
4187: LD_STRING 
4189: ST_TO_ADDR
// hc_name :=  ;
4190: LD_ADDR_OWVAR 26
4194: PUSH
4195: LD_STRING 
4197: ST_TO_ADDR
// hc_importance := 0 ;
4198: LD_ADDR_OWVAR 32
4202: PUSH
4203: LD_INT 0
4205: ST_TO_ADDR
// ru_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
4206: LD_ADDR_EXP 30
4210: PUSH
4211: LD_INT 5
4213: PUSH
4214: LD_INT 6
4216: PUSH
4217: LD_INT 7
4219: PUSH
4220: EMPTY
4221: LIST
4222: LIST
4223: LIST
4224: PUSH
4225: LD_OWVAR 67
4229: ARRAY
4230: ST_TO_ADDR
// for i = 1 to 6 do
4231: LD_ADDR_VAR 0 2
4235: PUSH
4236: DOUBLE
4237: LD_INT 1
4239: DEC
4240: ST_TO_ADDR
4241: LD_INT 6
4243: PUSH
4244: FOR_TO
4245: IFFALSE 4403
// begin PrepareHuman ( false , class_bazooker , ru_skill ) ;
4247: LD_INT 0
4249: PPUSH
4250: LD_INT 9
4252: PPUSH
4253: LD_EXP 30
4257: PPUSH
4258: CALL_OW 380
// un := CreateHuman ;
4262: LD_ADDR_VAR 0 3
4266: PUSH
4267: CALL_OW 44
4271: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_barracks ) ;
4272: LD_VAR 0 3
4276: PPUSH
4277: LD_VAR 0 7
4281: PPUSH
4282: CALL_OW 52
// PrepareHuman ( false , 4 , ru_skill ) ;
4286: LD_INT 0
4288: PPUSH
4289: LD_INT 4
4291: PPUSH
4292: LD_EXP 30
4296: PPUSH
4297: CALL_OW 380
// un := CreateHuman ;
4301: LD_ADDR_VAR 0 3
4305: PUSH
4306: CALL_OW 44
4310: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
4311: LD_VAR 0 3
4315: PPUSH
4316: LD_INT 24
4318: PPUSH
4319: CALL_OW 52
// PrepareHuman ( false , 3 , ru_skill ) ;
4323: LD_INT 0
4325: PPUSH
4326: LD_INT 3
4328: PPUSH
4329: LD_EXP 30
4333: PPUSH
4334: CALL_OW 380
// un := CreateHuman ;
4338: LD_ADDR_VAR 0 3
4342: PUSH
4343: CALL_OW 44
4347: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_factory ) ;
4348: LD_VAR 0 3
4352: PPUSH
4353: LD_VAR 0 5
4357: PPUSH
4358: CALL_OW 52
// PrepareHuman ( false , 2 , ru_skill ) ;
4362: LD_INT 0
4364: PPUSH
4365: LD_INT 2
4367: PPUSH
4368: LD_EXP 30
4372: PPUSH
4373: CALL_OW 380
// un := CreateHuman ;
4377: LD_ADDR_VAR 0 3
4381: PUSH
4382: CALL_OW 44
4386: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_depot ) ;
4387: LD_VAR 0 3
4391: PPUSH
4392: LD_VAR 0 4
4396: PPUSH
4397: CALL_OW 52
// end ;
4401: GO 4244
4403: POP
4404: POP
// if Difficulty > 1 then
4405: LD_OWVAR 67
4409: PUSH
4410: LD_INT 1
4412: GREATER
4413: IFFALSE 4446
// begin un := CreateBehemoth ( 3 , 160 , 36 , 3 ) ;
4415: LD_ADDR_VAR 0 3
4419: PUSH
4420: LD_INT 3
4422: PPUSH
4423: LD_INT 160
4425: PPUSH
4426: LD_INT 36
4428: PPUSH
4429: LD_INT 3
4431: PPUSH
4432: CALL 81646 0 4
4436: ST_TO_ADDR
// ComHold ( un ) ;
4437: LD_VAR 0 3
4441: PPUSH
4442: CALL_OW 140
// end ; russian_prepared := true ;
4446: LD_ADDR_EXP 2
4450: PUSH
4451: LD_INT 1
4453: ST_TO_ADDR
// ComConstruct ( ru_factory , ru_medium_wheeled , 3 , control_computer , ru_cargo_bay ) ;
4454: LD_VAR 0 5
4458: PPUSH
4459: LD_INT 21
4461: PPUSH
4462: LD_INT 3
4464: PPUSH
4465: LD_INT 3
4467: PPUSH
4468: LD_INT 51
4470: PPUSH
4471: CALL_OW 125
// end ;
4475: LD_VAR 0 1
4479: RET
// every 0 0$02 trigger FilterAllUnits ( [ f_side , 3 ] ) > 0 and russian_prepared do var ru_depot , ru_factory , ru_teleport , ru_bunkers , ru_buildings , ru_vehicles , ru_humans , ru_barracks , ru_engs , ru_mech , ru_sci , i , tmp , filter , cr , sib_bomb ;
4480: LD_INT 22
4482: PUSH
4483: LD_INT 3
4485: PUSH
4486: EMPTY
4487: LIST
4488: LIST
4489: PPUSH
4490: CALL_OW 69
4494: PUSH
4495: LD_INT 0
4497: GREATER
4498: PUSH
4499: LD_EXP 2
4503: AND
4504: IFFALSE 6654
4506: GO 4508
4508: DISABLE
4509: LD_INT 0
4511: PPUSH
4512: PPUSH
4513: PPUSH
4514: PPUSH
4515: PPUSH
4516: PPUSH
4517: PPUSH
4518: PPUSH
4519: PPUSH
4520: PPUSH
4521: PPUSH
4522: PPUSH
4523: PPUSH
4524: PPUSH
4525: PPUSH
4526: PPUSH
// begin enable ;
4527: ENABLE
// ru_depot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
4528: LD_ADDR_VAR 0 1
4532: PUSH
4533: LD_INT 22
4535: PUSH
4536: LD_INT 3
4538: PUSH
4539: EMPTY
4540: LIST
4541: LIST
4542: PUSH
4543: LD_INT 30
4545: PUSH
4546: LD_INT 1
4548: PUSH
4549: EMPTY
4550: LIST
4551: LIST
4552: PUSH
4553: EMPTY
4554: LIST
4555: LIST
4556: PPUSH
4557: CALL_OW 69
4561: PUSH
4562: LD_INT 1
4564: ARRAY
4565: ST_TO_ADDR
// ru_factory := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
4566: LD_ADDR_VAR 0 2
4570: PUSH
4571: LD_INT 22
4573: PUSH
4574: LD_INT 3
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: PUSH
4581: LD_INT 30
4583: PUSH
4584: LD_INT 3
4586: PUSH
4587: EMPTY
4588: LIST
4589: LIST
4590: PUSH
4591: EMPTY
4592: LIST
4593: LIST
4594: PPUSH
4595: CALL_OW 69
4599: PUSH
4600: LD_INT 1
4602: ARRAY
4603: ST_TO_ADDR
// ru_teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] ;
4604: LD_ADDR_VAR 0 3
4608: PUSH
4609: LD_INT 22
4611: PUSH
4612: LD_INT 3
4614: PUSH
4615: EMPTY
4616: LIST
4617: LIST
4618: PUSH
4619: LD_INT 30
4621: PUSH
4622: LD_INT 34
4624: PUSH
4625: EMPTY
4626: LIST
4627: LIST
4628: PUSH
4629: EMPTY
4630: LIST
4631: LIST
4632: PPUSH
4633: CALL_OW 69
4637: PUSH
4638: LD_INT 1
4640: ARRAY
4641: ST_TO_ADDR
// ru_bunkers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
4642: LD_ADDR_VAR 0 4
4646: PUSH
4647: LD_INT 22
4649: PUSH
4650: LD_INT 3
4652: PUSH
4653: EMPTY
4654: LIST
4655: LIST
4656: PUSH
4657: LD_INT 30
4659: PUSH
4660: LD_INT 33
4662: PUSH
4663: EMPTY
4664: LIST
4665: LIST
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: PPUSH
4671: CALL_OW 69
4675: ST_TO_ADDR
// ru_barracks := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
4676: LD_ADDR_VAR 0 8
4680: PUSH
4681: LD_INT 22
4683: PUSH
4684: LD_INT 3
4686: PUSH
4687: EMPTY
4688: LIST
4689: LIST
4690: PUSH
4691: LD_INT 30
4693: PUSH
4694: LD_INT 5
4696: PUSH
4697: EMPTY
4698: LIST
4699: LIST
4700: PUSH
4701: EMPTY
4702: LIST
4703: LIST
4704: PPUSH
4705: CALL_OW 69
4709: PUSH
4710: LD_INT 1
4712: ARRAY
4713: ST_TO_ADDR
// ru_buildings := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
4714: LD_ADDR_VAR 0 5
4718: PUSH
4719: LD_INT 22
4721: PUSH
4722: LD_INT 3
4724: PUSH
4725: EMPTY
4726: LIST
4727: LIST
4728: PUSH
4729: LD_INT 21
4731: PUSH
4732: LD_INT 3
4734: PUSH
4735: EMPTY
4736: LIST
4737: LIST
4738: PUSH
4739: EMPTY
4740: LIST
4741: LIST
4742: PPUSH
4743: CALL_OW 69
4747: ST_TO_ADDR
// ru_vehicles := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
4748: LD_ADDR_VAR 0 6
4752: PUSH
4753: LD_INT 22
4755: PUSH
4756: LD_INT 3
4758: PUSH
4759: EMPTY
4760: LIST
4761: LIST
4762: PUSH
4763: LD_INT 21
4765: PUSH
4766: LD_INT 2
4768: PUSH
4769: EMPTY
4770: LIST
4771: LIST
4772: PUSH
4773: EMPTY
4774: LIST
4775: LIST
4776: PPUSH
4777: CALL_OW 69
4781: ST_TO_ADDR
// ru_humans := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
4782: LD_ADDR_VAR 0 7
4786: PUSH
4787: LD_INT 22
4789: PUSH
4790: LD_INT 3
4792: PUSH
4793: EMPTY
4794: LIST
4795: LIST
4796: PUSH
4797: LD_INT 21
4799: PUSH
4800: LD_INT 1
4802: PUSH
4803: EMPTY
4804: LIST
4805: LIST
4806: PUSH
4807: EMPTY
4808: LIST
4809: LIST
4810: PPUSH
4811: CALL_OW 69
4815: ST_TO_ADDR
// ru_engs := UnitFilter ( ru_humans , [ f_class , 2 ] ) ;
4816: LD_ADDR_VAR 0 9
4820: PUSH
4821: LD_VAR 0 7
4825: PPUSH
4826: LD_INT 25
4828: PUSH
4829: LD_INT 2
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: PPUSH
4836: CALL_OW 72
4840: ST_TO_ADDR
// ru_mech := UnitFilter ( ru_humans , [ f_class , 3 ] ) ;
4841: LD_ADDR_VAR 0 10
4845: PUSH
4846: LD_VAR 0 7
4850: PPUSH
4851: LD_INT 25
4853: PUSH
4854: LD_INT 3
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: PPUSH
4861: CALL_OW 72
4865: ST_TO_ADDR
// ru_sci := UnitFilter ( ru_humans , [ f_class , 4 ] ) ;
4866: LD_ADDR_VAR 0 11
4870: PUSH
4871: LD_VAR 0 7
4875: PPUSH
4876: LD_INT 25
4878: PUSH
4879: LD_INT 4
4881: PUSH
4882: EMPTY
4883: LIST
4884: LIST
4885: PPUSH
4886: CALL_OW 72
4890: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) > 0 and ru_cargo = false then
4891: LD_INT 22
4893: PUSH
4894: LD_INT 3
4896: PUSH
4897: EMPTY
4898: LIST
4899: LIST
4900: PUSH
4901: LD_INT 34
4903: PUSH
4904: LD_INT 51
4906: PUSH
4907: EMPTY
4908: LIST
4909: LIST
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: PPUSH
4915: CALL_OW 69
4919: PUSH
4920: LD_INT 0
4922: GREATER
4923: PUSH
4924: LD_EXP 31
4928: PUSH
4929: LD_INT 0
4931: EQUAL
4932: AND
4933: IFFALSE 4973
// ru_cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
4935: LD_ADDR_EXP 31
4939: PUSH
4940: LD_INT 22
4942: PUSH
4943: LD_INT 3
4945: PUSH
4946: EMPTY
4947: LIST
4948: LIST
4949: PUSH
4950: LD_INT 34
4952: PUSH
4953: LD_INT 51
4955: PUSH
4956: EMPTY
4957: LIST
4958: LIST
4959: PUSH
4960: EMPTY
4961: LIST
4962: LIST
4963: PPUSH
4964: CALL_OW 69
4968: PUSH
4969: LD_INT 1
4971: ARRAY
4972: ST_TO_ADDR
// if ru_cargo then
4973: LD_EXP 31
4977: IFFALSE 5317
// begin if IsInArea ( ru_cargo , ru_base ) then
4979: LD_EXP 31
4983: PPUSH
4984: LD_INT 9
4986: PPUSH
4987: CALL_OW 308
4991: IFFALSE 5070
// begin if GetCargo ( ru_cargo , mat_cans ) = 0 then
4993: LD_EXP 31
4997: PPUSH
4998: LD_INT 1
5000: PPUSH
5001: CALL_OW 289
5005: PUSH
5006: LD_INT 0
5008: EQUAL
5009: IFFALSE 5027
// ComEnterUnit ( ru_cargo , ru_teleport ) else
5011: LD_EXP 31
5015: PPUSH
5016: LD_VAR 0 3
5020: PPUSH
5021: CALL_OW 120
5025: GO 5068
// if not HasTask ( ru_cargo ) then
5027: LD_EXP 31
5031: PPUSH
5032: CALL_OW 314
5036: NOT
5037: IFFALSE 5068
// ComMoveXY ( ru_cargo , GetX ( ru_depot ) , GetY ( ru_depot ) ) ;
5039: LD_EXP 31
5043: PPUSH
5044: LD_VAR 0 1
5048: PPUSH
5049: CALL_OW 250
5053: PPUSH
5054: LD_VAR 0 1
5058: PPUSH
5059: CALL_OW 251
5063: PPUSH
5064: CALL_OW 111
// end else
5068: GO 5317
// begin if not HasTask ( ru_cargo ) and GetCargo ( ru_cargo , mat_cans ) < 100 and not IsInArea ( ru_cargo , cargoa ) then
5070: LD_EXP 31
5074: PPUSH
5075: CALL_OW 314
5079: NOT
5080: PUSH
5081: LD_EXP 31
5085: PPUSH
5086: LD_INT 1
5088: PPUSH
5089: CALL_OW 289
5093: PUSH
5094: LD_INT 100
5096: LESS
5097: AND
5098: PUSH
5099: LD_EXP 31
5103: PPUSH
5104: LD_INT 10
5106: PPUSH
5107: CALL_OW 308
5111: NOT
5112: AND
5113: IFFALSE 5190
// begin cr := GetListOfCratesInArea ( ru_crates ) ;
5115: LD_ADDR_VAR 0 15
5119: PUSH
5120: LD_INT 11
5122: PPUSH
5123: CALL_OW 435
5127: ST_TO_ADDR
// if cr then
5128: LD_VAR 0 15
5132: IFFALSE 5163
// ComCollect ( ru_cargo , cr [ 1 ] , cr [ 2 ] ) else
5134: LD_EXP 31
5138: PPUSH
5139: LD_VAR 0 15
5143: PUSH
5144: LD_INT 1
5146: ARRAY
5147: PPUSH
5148: LD_VAR 0 15
5152: PUSH
5153: LD_INT 2
5155: ARRAY
5156: PPUSH
5157: CALL_OW 117
5161: GO 5190
// if not IsInArea ( ru_cargo , ru_crates ) then
5163: LD_EXP 31
5167: PPUSH
5168: LD_INT 11
5170: PPUSH
5171: CALL_OW 308
5175: NOT
5176: IFFALSE 5190
// ComMoveToArea ( ru_cargo , ru_crates ) ;
5178: LD_EXP 31
5182: PPUSH
5183: LD_INT 11
5185: PPUSH
5186: CALL_OW 113
// end ; if not HasTask ( ru_cargo ) and not IsInArea ( ru_cargo , cargoa ) and ( GetCargo ( ru_cargo , mat_cans ) = 100 or See ( your_side , ru_cargo ) ) then
5190: LD_EXP 31
5194: PPUSH
5195: CALL_OW 314
5199: NOT
5200: PUSH
5201: LD_EXP 31
5205: PPUSH
5206: LD_INT 10
5208: PPUSH
5209: CALL_OW 308
5213: NOT
5214: AND
5215: PUSH
5216: LD_EXP 31
5220: PPUSH
5221: LD_INT 1
5223: PPUSH
5224: CALL_OW 289
5228: PUSH
5229: LD_INT 100
5231: EQUAL
5232: PUSH
5233: LD_OWVAR 2
5237: PPUSH
5238: LD_EXP 31
5242: PPUSH
5243: CALL_OW 292
5247: OR
5248: AND
5249: IFFALSE 5263
// ComMoveToArea ( ru_cargo , cargoa ) ;
5251: LD_EXP 31
5255: PPUSH
5256: LD_INT 10
5258: PPUSH
5259: CALL_OW 113
// if IsInArea ( ru_cargo , cargoa ) and ru_barracks then
5263: LD_EXP 31
5267: PPUSH
5268: LD_INT 10
5270: PPUSH
5271: CALL_OW 308
5275: PUSH
5276: LD_VAR 0 8
5280: AND
5281: IFFALSE 5317
// ComSpaceShift ( UnitFilter ( ru_humans , [ f_class , class_bazooker ] ) [ 1 ] , 139 , 24 ) ;
5283: LD_VAR 0 7
5287: PPUSH
5288: LD_INT 25
5290: PUSH
5291: LD_INT 9
5293: PUSH
5294: EMPTY
5295: LIST
5296: LIST
5297: PPUSH
5298: CALL_OW 72
5302: PUSH
5303: LD_INT 1
5305: ARRAY
5306: PPUSH
5307: LD_INT 139
5309: PPUSH
5310: LD_INT 24
5312: PPUSH
5313: CALL_OW 153
// end ; end ; if ru_cargo = 0 and ru_factory and BuildingStatus ( ru_factory ) = bs_idle then
5317: LD_EXP 31
5321: PUSH
5322: LD_INT 0
5324: EQUAL
5325: PUSH
5326: LD_VAR 0 2
5330: AND
5331: PUSH
5332: LD_VAR 0 2
5336: PPUSH
5337: CALL_OW 461
5341: PUSH
5342: LD_INT 2
5344: EQUAL
5345: AND
5346: IFFALSE 5369
// ComConstruct ( ru_factory , ru_medium_wheeled , 3 , control_computer , ru_cargo_bay ) ;
5348: LD_VAR 0 2
5352: PPUSH
5353: LD_INT 21
5355: PPUSH
5356: LD_INT 3
5358: PPUSH
5359: LD_INT 3
5361: PPUSH
5362: LD_INT 51
5364: PPUSH
5365: CALL_OW 125
// if ru_factory and ru_vlist > 0 then
5369: LD_VAR 0 2
5373: PUSH
5374: LD_EXP 33
5378: PUSH
5379: LD_INT 0
5381: GREATER
5382: AND
5383: IFFALSE 5483
// begin if BuildingStatus ( ru_factory ) = bs_idle then
5385: LD_VAR 0 2
5389: PPUSH
5390: CALL_OW 461
5394: PUSH
5395: LD_INT 2
5397: EQUAL
5398: IFFALSE 5483
// begin ComConstruct ( ru_factory , ru_vlist [ 1 ] , ru_vlist [ 2 ] , ru_vlist [ 3 ] , ru_vlist [ 4 ] ) ;
5400: LD_VAR 0 2
5404: PPUSH
5405: LD_EXP 33
5409: PUSH
5410: LD_INT 1
5412: ARRAY
5413: PPUSH
5414: LD_EXP 33
5418: PUSH
5419: LD_INT 2
5421: ARRAY
5422: PPUSH
5423: LD_EXP 33
5427: PUSH
5428: LD_INT 3
5430: ARRAY
5431: PPUSH
5432: LD_EXP 33
5436: PUSH
5437: LD_INT 4
5439: ARRAY
5440: PPUSH
5441: CALL_OW 125
// for i = 1 to 4 do
5445: LD_ADDR_VAR 0 12
5449: PUSH
5450: DOUBLE
5451: LD_INT 1
5453: DEC
5454: ST_TO_ADDR
5455: LD_INT 4
5457: PUSH
5458: FOR_TO
5459: IFFALSE 5481
// ru_vlist := Delete ( ru_vlist , 1 ) ;
5461: LD_ADDR_EXP 33
5465: PUSH
5466: LD_EXP 33
5470: PPUSH
5471: LD_INT 1
5473: PPUSH
5474: CALL_OW 3
5478: ST_TO_ADDR
5479: GO 5458
5481: POP
5482: POP
// end ; end ; if BuildingStatus ( ru_lab ) = bs_idle and ru_sib_bomb then
5483: LD_INT 24
5485: PPUSH
5486: CALL_OW 461
5490: PUSH
5491: LD_INT 2
5493: EQUAL
5494: PUSH
5495: LD_EXP 4
5499: AND
5500: IFFALSE 5528
// if GetTech ( tech_sibfiss , 3 ) = state_enabled then
5502: LD_INT 25
5504: PPUSH
5505: LD_INT 3
5507: PPUSH
5508: CALL_OW 321
5512: PUSH
5513: LD_INT 1
5515: EQUAL
5516: IFFALSE 5528
// ComResearch ( ru_lab , tech_sibfiss ) ;
5518: LD_INT 24
5520: PPUSH
5521: LD_INT 25
5523: PPUSH
5524: CALL_OW 124
// if GetTech ( tech_sibfiss , 3 ) = state_researched and tick mod 5 5$00 = 0 then
5528: LD_INT 25
5530: PPUSH
5531: LD_INT 3
5533: PPUSH
5534: CALL_OW 321
5538: PUSH
5539: LD_INT 2
5541: EQUAL
5542: PUSH
5543: LD_OWVAR 1
5547: PUSH
5548: LD_INT 10500
5550: MOD
5551: PUSH
5552: LD_INT 0
5554: EQUAL
5555: AND
5556: IFFALSE 5594
// if BuildingStatus ( ru_factory ) = bs_idle then
5558: LD_VAR 0 2
5562: PPUSH
5563: CALL_OW 461
5567: PUSH
5568: LD_INT 2
5570: EQUAL
5571: IFFALSE 5594
// ComConstruct ( ru_factory , ru_heavy_wheeled , 3 , control_computer , ru_siberium_rocket ) ;
5573: LD_VAR 0 2
5577: PPUSH
5578: LD_INT 23
5580: PPUSH
5581: LD_INT 3
5583: PPUSH
5584: LD_INT 3
5586: PPUSH
5587: LD_INT 48
5589: PPUSH
5590: CALL_OW 125
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) > 0 then
5594: LD_INT 22
5596: PUSH
5597: LD_INT 3
5599: PUSH
5600: EMPTY
5601: LIST
5602: LIST
5603: PUSH
5604: LD_INT 34
5606: PUSH
5607: LD_INT 48
5609: PUSH
5610: EMPTY
5611: LIST
5612: LIST
5613: PUSH
5614: EMPTY
5615: LIST
5616: LIST
5617: PPUSH
5618: CALL_OW 69
5622: PUSH
5623: LD_INT 0
5625: GREATER
5626: IFFALSE 6000
// begin sib_bomb := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) [ 1 ] ;
5628: LD_ADDR_VAR 0 16
5632: PUSH
5633: LD_INT 22
5635: PUSH
5636: LD_INT 3
5638: PUSH
5639: EMPTY
5640: LIST
5641: LIST
5642: PUSH
5643: LD_INT 34
5645: PUSH
5646: LD_INT 48
5648: PUSH
5649: EMPTY
5650: LIST
5651: LIST
5652: PUSH
5653: EMPTY
5654: LIST
5655: LIST
5656: PPUSH
5657: CALL_OW 69
5661: PUSH
5662: LD_INT 1
5664: ARRAY
5665: ST_TO_ADDR
// if IsInArea ( sib_bomb , ru_base ) then
5666: LD_VAR 0 16
5670: PPUSH
5671: LD_INT 9
5673: PPUSH
5674: CALL_OW 308
5678: IFFALSE 5696
// ComEnterUnit ( sib_bomb , ru_teleport ) else
5680: LD_VAR 0 16
5684: PPUSH
5685: LD_VAR 0 3
5689: PPUSH
5690: CALL_OW 120
5694: GO 6000
// if not HasTask ( sib_bomb ) then
5696: LD_VAR 0 16
5700: PPUSH
5701: CALL_OW 314
5705: NOT
5706: IFFALSE 6000
// if GetLives ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) > 250 then
5708: LD_INT 22
5710: PUSH
5711: LD_OWVAR 2
5715: PUSH
5716: EMPTY
5717: LIST
5718: LIST
5719: PUSH
5720: LD_INT 30
5722: PUSH
5723: LD_INT 1
5725: PUSH
5726: EMPTY
5727: LIST
5728: LIST
5729: PUSH
5730: EMPTY
5731: LIST
5732: LIST
5733: PPUSH
5734: CALL_OW 69
5738: PUSH
5739: LD_INT 1
5741: ARRAY
5742: PPUSH
5743: CALL_OW 256
5747: PUSH
5748: LD_INT 250
5750: GREATER
5751: IFFALSE 5844
// ComAttackPlace ( sib_bomb , GetX ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) , GetY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ) else
5753: LD_VAR 0 16
5757: PPUSH
5758: LD_INT 22
5760: PUSH
5761: LD_OWVAR 2
5765: PUSH
5766: EMPTY
5767: LIST
5768: LIST
5769: PUSH
5770: LD_INT 30
5772: PUSH
5773: LD_INT 1
5775: PUSH
5776: EMPTY
5777: LIST
5778: LIST
5779: PUSH
5780: EMPTY
5781: LIST
5782: LIST
5783: PPUSH
5784: CALL_OW 69
5788: PUSH
5789: LD_INT 1
5791: ARRAY
5792: PPUSH
5793: CALL_OW 250
5797: PPUSH
5798: LD_INT 22
5800: PUSH
5801: LD_OWVAR 2
5805: PUSH
5806: EMPTY
5807: LIST
5808: LIST
5809: PUSH
5810: LD_INT 30
5812: PUSH
5813: LD_INT 1
5815: PUSH
5816: EMPTY
5817: LIST
5818: LIST
5819: PUSH
5820: EMPTY
5821: LIST
5822: LIST
5823: PPUSH
5824: CALL_OW 69
5828: PUSH
5829: LD_INT 1
5831: ARRAY
5832: PPUSH
5833: CALL_OW 251
5837: PPUSH
5838: CALL_OW 116
5842: GO 6000
// if FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) > 0 then
5844: LD_INT 22
5846: PUSH
5847: LD_OWVAR 2
5851: PUSH
5852: EMPTY
5853: LIST
5854: LIST
5855: PUSH
5856: LD_INT 21
5858: PUSH
5859: LD_INT 3
5861: PUSH
5862: EMPTY
5863: LIST
5864: LIST
5865: PUSH
5866: EMPTY
5867: LIST
5868: LIST
5869: PPUSH
5870: CALL_OW 69
5874: PUSH
5875: LD_INT 0
5877: GREATER
5878: IFFALSE 5971
// ComAttackPlace ( sib_bomb , GetX ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) [ 1 ] ) , GetY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) [ 1 ] ) ) else
5880: LD_VAR 0 16
5884: PPUSH
5885: LD_INT 22
5887: PUSH
5888: LD_OWVAR 2
5892: PUSH
5893: EMPTY
5894: LIST
5895: LIST
5896: PUSH
5897: LD_INT 21
5899: PUSH
5900: LD_INT 3
5902: PUSH
5903: EMPTY
5904: LIST
5905: LIST
5906: PUSH
5907: EMPTY
5908: LIST
5909: LIST
5910: PPUSH
5911: CALL_OW 69
5915: PUSH
5916: LD_INT 1
5918: ARRAY
5919: PPUSH
5920: CALL_OW 250
5924: PPUSH
5925: LD_INT 22
5927: PUSH
5928: LD_OWVAR 2
5932: PUSH
5933: EMPTY
5934: LIST
5935: LIST
5936: PUSH
5937: LD_INT 21
5939: PUSH
5940: LD_INT 3
5942: PUSH
5943: EMPTY
5944: LIST
5945: LIST
5946: PUSH
5947: EMPTY
5948: LIST
5949: LIST
5950: PPUSH
5951: CALL_OW 69
5955: PUSH
5956: LD_INT 1
5958: ARRAY
5959: PPUSH
5960: CALL_OW 251
5964: PPUSH
5965: CALL_OW 116
5969: GO 6000
// ComAttackPlace ( sib_bomb , GetX ( player_commander ) , GetY ( player_commander ) ) ;
5971: LD_VAR 0 16
5975: PPUSH
5976: LD_EXP 11
5980: PPUSH
5981: CALL_OW 250
5985: PPUSH
5986: LD_EXP 11
5990: PPUSH
5991: CALL_OW 251
5995: PPUSH
5996: CALL_OW 116
// end ; if ru_can_attack then
6000: LD_EXP 3
6004: IFFALSE 6152
// if ru_time > 0 0$00 then
6006: LD_EXP 35
6010: PUSH
6011: LD_INT 0
6013: GREATER
6014: IFFALSE 6032
// ru_time := ru_time - 0 0$03 else
6016: LD_ADDR_EXP 35
6020: PUSH
6021: LD_EXP 35
6025: PUSH
6026: LD_INT 105
6028: MINUS
6029: ST_TO_ADDR
6030: GO 6152
// begin ru_time := Rand ( 9 9$39 , 14 14$39 ) ;
6032: LD_ADDR_EXP 35
6036: PUSH
6037: LD_INT 20265
6039: PPUSH
6040: LD_INT 30765
6042: PPUSH
6043: CALL_OW 12
6047: ST_TO_ADDR
// for i = 1 to ru_amount do
6048: LD_ADDR_VAR 0 12
6052: PUSH
6053: DOUBLE
6054: LD_INT 1
6056: DEC
6057: ST_TO_ADDR
6058: LD_EXP 34
6062: PUSH
6063: FOR_TO
6064: IFFALSE 6150
// begin ru_vlist := ru_vlist ^ ru_heavy_wheeled ;
6066: LD_ADDR_EXP 33
6070: PUSH
6071: LD_EXP 33
6075: PUSH
6076: LD_INT 23
6078: ADD
6079: ST_TO_ADDR
// ru_vlist := ru_vlist ^ engine_siberite ;
6080: LD_ADDR_EXP 33
6084: PUSH
6085: LD_EXP 33
6089: PUSH
6090: LD_INT 3
6092: ADD
6093: ST_TO_ADDR
// ru_vlist := ru_vlist ^ control_computer ;
6094: LD_ADDR_EXP 33
6098: PUSH
6099: LD_EXP 33
6103: PUSH
6104: LD_INT 3
6106: ADD
6107: ST_TO_ADDR
// ru_vlist := ru_vlist ^ [ ru_heavy_gun , ru_rocket_launcher , ru_rocket ] [ MultiRand ( 1 , 2 , 3 ) ] ;
6108: LD_ADDR_EXP 33
6112: PUSH
6113: LD_EXP 33
6117: PUSH
6118: LD_INT 46
6120: PUSH
6121: LD_INT 45
6123: PUSH
6124: LD_INT 47
6126: PUSH
6127: EMPTY
6128: LIST
6129: LIST
6130: LIST
6131: PUSH
6132: LD_INT 1
6134: PPUSH
6135: LD_INT 2
6137: PPUSH
6138: LD_INT 3
6140: PPUSH
6141: CALL_OW 14
6145: ARRAY
6146: ADD
6147: ST_TO_ADDR
// end ;
6148: GO 6063
6150: POP
6151: POP
// end ; if UnitFilter ( ru_bunkers , [ f_bweapon , 0 ] ) > 0 then
6152: LD_VAR 0 4
6156: PPUSH
6157: LD_INT 35
6159: PUSH
6160: LD_INT 0
6162: PUSH
6163: EMPTY
6164: LIST
6165: LIST
6166: PPUSH
6167: CALL_OW 72
6171: PUSH
6172: LD_INT 0
6174: GREATER
6175: IFFALSE 6223
// if BuildingStatus ( ru_factory ) = bs_idle then
6177: LD_VAR 0 2
6181: PPUSH
6182: CALL_OW 461
6186: PUSH
6187: LD_INT 2
6189: EQUAL
6190: IFFALSE 6223
// ComPlaceWeapon ( UnitFilter ( ru_bunkers , [ f_bweapon , 0 ] ) [ 1 ] , ru_rocket ) ;
6192: LD_VAR 0 4
6196: PPUSH
6197: LD_INT 35
6199: PUSH
6200: LD_INT 0
6202: PUSH
6203: EMPTY
6204: LIST
6205: LIST
6206: PPUSH
6207: CALL_OW 72
6211: PUSH
6212: LD_INT 1
6214: ARRAY
6215: PPUSH
6216: LD_INT 47
6218: PPUSH
6219: CALL_OW 148
// if ru_force >= ru_amount then
6223: LD_EXP 29
6227: PUSH
6228: LD_EXP 34
6232: GREATEREQUAL
6233: IFFALSE 6244
// RaiseSailEvent ( event_russian_attack ) ;
6235: LD_EXP 22
6239: PPUSH
6240: CALL_OW 427
// if ru_engs > 0 then
6244: LD_VAR 0 9
6248: PUSH
6249: LD_INT 0
6251: GREATER
6252: IFFALSE 6654
// begin if UnitFilter ( ru_buildings , [ f_not , [ f_lives , 1000 ] ] ) > 0 then
6254: LD_VAR 0 5
6258: PPUSH
6259: LD_INT 3
6261: PUSH
6262: LD_INT 24
6264: PUSH
6265: LD_INT 1000
6267: PUSH
6268: EMPTY
6269: LIST
6270: LIST
6271: PUSH
6272: EMPTY
6273: LIST
6274: LIST
6275: PPUSH
6276: CALL_OW 72
6280: PUSH
6281: LD_INT 0
6283: GREATER
6284: IFFALSE 6439
// begin filter := UnitFilter ( ru_buildings , [ f_not , [ f_lives , 1000 ] ] ) ;
6286: LD_ADDR_VAR 0 14
6290: PUSH
6291: LD_VAR 0 5
6295: PPUSH
6296: LD_INT 3
6298: PUSH
6299: LD_INT 24
6301: PUSH
6302: LD_INT 1000
6304: PUSH
6305: EMPTY
6306: LIST
6307: LIST
6308: PUSH
6309: EMPTY
6310: LIST
6311: LIST
6312: PPUSH
6313: CALL_OW 72
6317: ST_TO_ADDR
// for i = 1 to ru_engs do
6318: LD_ADDR_VAR 0 12
6322: PUSH
6323: DOUBLE
6324: LD_INT 1
6326: DEC
6327: ST_TO_ADDR
6328: LD_VAR 0 9
6332: PUSH
6333: FOR_TO
6334: IFFALSE 6435
// begin if IsInUnit ( ru_engs [ i ] ) then
6336: LD_VAR 0 9
6340: PUSH
6341: LD_VAR 0 12
6345: ARRAY
6346: PPUSH
6347: CALL_OW 310
6351: IFFALSE 6370
// ComExitBuilding ( ru_engs [ i ] ) else
6353: LD_VAR 0 9
6357: PUSH
6358: LD_VAR 0 12
6362: ARRAY
6363: PPUSH
6364: CALL_OW 122
6368: GO 6433
// if not HasTask ( ru_engs [ i ] ) and GetLives ( ru_engs [ i ] ) > 600 then
6370: LD_VAR 0 9
6374: PUSH
6375: LD_VAR 0 12
6379: ARRAY
6380: PPUSH
6381: CALL_OW 314
6385: NOT
6386: PUSH
6387: LD_VAR 0 9
6391: PUSH
6392: LD_VAR 0 12
6396: ARRAY
6397: PPUSH
6398: CALL_OW 256
6402: PUSH
6403: LD_INT 600
6405: GREATER
6406: AND
6407: IFFALSE 6433
// ComRepairBuilding ( ru_engs [ i ] , filter [ 1 ] ) ;
6409: LD_VAR 0 9
6413: PUSH
6414: LD_VAR 0 12
6418: ARRAY
6419: PPUSH
6420: LD_VAR 0 14
6424: PUSH
6425: LD_INT 1
6427: ARRAY
6428: PPUSH
6429: CALL_OW 130
// end ;
6433: GO 6333
6435: POP
6436: POP
// end else
6437: GO 6654
// begin if ru_blist = 0 then
6439: LD_EXP 32
6443: PUSH
6444: LD_INT 0
6446: EQUAL
6447: IFFALSE 6529
// begin for i = 1 to ru_engs do
6449: LD_ADDR_VAR 0 12
6453: PUSH
6454: DOUBLE
6455: LD_INT 1
6457: DEC
6458: ST_TO_ADDR
6459: LD_VAR 0 9
6463: PUSH
6464: FOR_TO
6465: IFFALSE 6525
// if not HasTask ( ru_engs [ i ] ) and not IsInUnit ( ru_engs [ i ] ) then
6467: LD_VAR 0 9
6471: PUSH
6472: LD_VAR 0 12
6476: ARRAY
6477: PPUSH
6478: CALL_OW 314
6482: NOT
6483: PUSH
6484: LD_VAR 0 9
6488: PUSH
6489: LD_VAR 0 12
6493: ARRAY
6494: PPUSH
6495: CALL_OW 310
6499: NOT
6500: AND
6501: IFFALSE 6523
// ComEnterUnit ( ru_engs [ i ] , ru_depot ) ;
6503: LD_VAR 0 9
6507: PUSH
6508: LD_VAR 0 12
6512: ARRAY
6513: PPUSH
6514: LD_VAR 0 1
6518: PPUSH
6519: CALL_OW 120
6523: GO 6464
6525: POP
6526: POP
// end else
6527: GO 6654
// begin for i = 1 to ru_engs do
6529: LD_ADDR_VAR 0 12
6533: PUSH
6534: DOUBLE
6535: LD_INT 1
6537: DEC
6538: ST_TO_ADDR
6539: LD_VAR 0 9
6543: PUSH
6544: FOR_TO
6545: IFFALSE 6652
// begin if IsInUnit ( ru_engs [ i ] ) then
6547: LD_VAR 0 9
6551: PUSH
6552: LD_VAR 0 12
6556: ARRAY
6557: PPUSH
6558: CALL_OW 310
6562: IFFALSE 6581
// ComExitBuilding ( ru_engs [ i ] ) else
6564: LD_VAR 0 9
6568: PUSH
6569: LD_VAR 0 12
6573: ARRAY
6574: PPUSH
6575: CALL_OW 122
6579: GO 6650
// if not HasTask ( ru_engs [ i ] ) then
6581: LD_VAR 0 9
6585: PUSH
6586: LD_VAR 0 12
6590: ARRAY
6591: PPUSH
6592: CALL_OW 314
6596: NOT
6597: IFFALSE 6650
// ComBuild ( ru_engs [ i ] , ru_blist [ 1 ] , ru_blist [ 2 ] , ru_blist [ 3 ] , ru_blist [ 4 ] ) ;
6599: LD_VAR 0 9
6603: PUSH
6604: LD_VAR 0 12
6608: ARRAY
6609: PPUSH
6610: LD_EXP 32
6614: PUSH
6615: LD_INT 1
6617: ARRAY
6618: PPUSH
6619: LD_EXP 32
6623: PUSH
6624: LD_INT 2
6626: ARRAY
6627: PPUSH
6628: LD_EXP 32
6632: PUSH
6633: LD_INT 3
6635: ARRAY
6636: PPUSH
6637: LD_EXP 32
6641: PUSH
6642: LD_INT 4
6644: ARRAY
6645: PPUSH
6646: CALL_OW 145
// end ;
6650: GO 6544
6652: POP
6653: POP
// end ; end ; end ; end ;
6654: PPOPN 16
6656: END
// every 3 3$40 + 0 0$45 trigger russian_prepared and GetListOfCratesInArea ( ru_crates ) < 10 do
6657: LD_EXP 2
6661: PUSH
6662: LD_INT 11
6664: PPUSH
6665: CALL_OW 435
6669: PUSH
6670: LD_INT 10
6672: LESS
6673: AND
6674: IFFALSE 6737
6676: GO 6678
6678: DISABLE
// begin enable ;
6679: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , ru_crates , true ) ;
6680: LD_INT 1
6682: PPUSH
6683: LD_INT 5
6685: PPUSH
6686: CALL_OW 12
6690: PPUSH
6691: LD_INT 11
6693: PPUSH
6694: LD_INT 1
6696: PPUSH
6697: CALL_OW 55
// Wait ( Rand ( 0 0$43 , 1 1$00 ) ) ;
6701: LD_INT 1505
6703: PPUSH
6704: LD_INT 2100
6706: PPUSH
6707: CALL_OW 12
6711: PPUSH
6712: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 5 ) , ru_crates , true ) ;
6716: LD_INT 1
6718: PPUSH
6719: LD_INT 5
6721: PPUSH
6722: CALL_OW 12
6726: PPUSH
6727: LD_INT 11
6729: PPUSH
6730: LD_INT 1
6732: PPUSH
6733: CALL_OW 55
// end ;
6737: END
// every 15 15$00 + 25 25$00 trigger not ru_sib_bomb do var i , tmp ;
6738: LD_EXP 4
6742: NOT
6743: IFFALSE 6858
6745: GO 6747
6747: DISABLE
6748: LD_INT 0
6750: PPUSH
6751: PPUSH
// begin enable ;
6752: ENABLE
// i := Rand ( 0 , 100 ) ;
6753: LD_ADDR_VAR 0 1
6757: PUSH
6758: LD_INT 0
6760: PPUSH
6761: LD_INT 100
6763: PPUSH
6764: CALL_OW 12
6768: ST_TO_ADDR
// case your_side of 1 :
6769: LD_OWVAR 2
6773: PUSH
6774: LD_INT 1
6776: DOUBLE
6777: EQUAL
6778: IFTRUE 6782
6780: GO 6793
6782: POP
// tmp := 10 ; 2 :
6783: LD_ADDR_VAR 0 2
6787: PUSH
6788: LD_INT 10
6790: ST_TO_ADDR
6791: GO 6832
6793: LD_INT 2
6795: DOUBLE
6796: EQUAL
6797: IFTRUE 6801
6799: GO 6812
6801: POP
// tmp := 0 ; 7 :
6802: LD_ADDR_VAR 0 2
6806: PUSH
6807: LD_INT 0
6809: ST_TO_ADDR
6810: GO 6832
6812: LD_INT 7
6814: DOUBLE
6815: EQUAL
6816: IFTRUE 6820
6818: GO 6831
6820: POP
// tmp := 15 ; end ;
6821: LD_ADDR_VAR 0 2
6825: PUSH
6826: LD_INT 15
6828: ST_TO_ADDR
6829: GO 6832
6831: POP
// if i < chance_to_bomb + tmp then
6832: LD_VAR 0 1
6836: PUSH
6837: LD_EXP 5
6841: PUSH
6842: LD_VAR 0 2
6846: PLUS
6847: LESS
6848: IFFALSE 6858
// ru_sib_bomb := true ;
6850: LD_ADDR_EXP 4
6854: PUSH
6855: LD_INT 1
6857: ST_TO_ADDR
// end ;
6858: PPOPN 2
6860: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_weapon , us_siberium_rocket ] ] ) do
6861: LD_INT 22
6863: PUSH
6864: LD_OWVAR 2
6868: PUSH
6869: EMPTY
6870: LIST
6871: LIST
6872: PUSH
6873: LD_INT 34
6875: PUSH
6876: LD_INT 8
6878: PUSH
6879: EMPTY
6880: LIST
6881: LIST
6882: PUSH
6883: EMPTY
6884: LIST
6885: LIST
6886: PPUSH
6887: CALL_OW 69
6891: IFFALSE 6904
6893: GO 6895
6895: DISABLE
// begin ru_sib_bomb := true ;
6896: LD_ADDR_EXP 4
6900: PUSH
6901: LD_INT 1
6903: ST_TO_ADDR
// end ;
6904: END
// every 10 10$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) do var i ;
6905: LD_INT 22
6907: PUSH
6908: LD_INT 3
6910: PUSH
6911: EMPTY
6912: LIST
6913: LIST
6914: PUSH
6915: LD_INT 30
6917: PUSH
6918: LD_INT 34
6920: PUSH
6921: EMPTY
6922: LIST
6923: LIST
6924: PUSH
6925: EMPTY
6926: LIST
6927: LIST
6928: PPUSH
6929: CALL_OW 69
6933: IFFALSE 7032
6935: GO 6937
6937: DISABLE
6938: LD_INT 0
6940: PPUSH
// begin enable ;
6941: ENABLE
// i := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
6942: LD_ADDR_VAR 0 1
6946: PUSH
6947: LD_INT 1
6949: PUSH
6950: LD_INT 3
6952: PUSH
6953: EMPTY
6954: LIST
6955: LIST
6956: PUSH
6957: LD_INT 1
6959: PPUSH
6960: LD_INT 2
6962: PPUSH
6963: CALL_OW 12
6967: ARRAY
6968: ST_TO_ADDR
// TeleportExit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) [ 1 ] , ru_teleport_exit [ i ] , ru_teleport_exit [ i + 1 ] ) ;
6969: LD_INT 22
6971: PUSH
6972: LD_INT 3
6974: PUSH
6975: EMPTY
6976: LIST
6977: LIST
6978: PUSH
6979: LD_INT 30
6981: PUSH
6982: LD_INT 34
6984: PUSH
6985: EMPTY
6986: LIST
6987: LIST
6988: PUSH
6989: EMPTY
6990: LIST
6991: LIST
6992: PPUSH
6993: CALL_OW 69
6997: PUSH
6998: LD_INT 1
7000: ARRAY
7001: PPUSH
7002: LD_EXP 36
7006: PUSH
7007: LD_VAR 0 1
7011: ARRAY
7012: PPUSH
7013: LD_EXP 36
7017: PUSH
7018: LD_VAR 0 1
7022: PUSH
7023: LD_INT 1
7025: PLUS
7026: ARRAY
7027: PPUSH
7028: CALL_OW 243
// end ;
7032: PPOPN 1
7034: END
// every 12 12$00 trigger tick >= [ 28 28$00 , 25 25$00 ] [ Difficulty - 1 ] and Difficulty > 1 and FilterAllUnits ( [ f_side , 3 ] ) do var i , un , tmp , p , path ;
7035: LD_OWVAR 1
7039: PUSH
7040: LD_INT 58800
7042: PUSH
7043: LD_INT 52500
7045: PUSH
7046: EMPTY
7047: LIST
7048: LIST
7049: PUSH
7050: LD_OWVAR 67
7054: PUSH
7055: LD_INT 1
7057: MINUS
7058: ARRAY
7059: GREATEREQUAL
7060: PUSH
7061: LD_OWVAR 67
7065: PUSH
7066: LD_INT 1
7068: GREATER
7069: AND
7070: PUSH
7071: LD_INT 22
7073: PUSH
7074: LD_INT 3
7076: PUSH
7077: EMPTY
7078: LIST
7079: LIST
7080: PPUSH
7081: CALL_OW 69
7085: AND
7086: IFFALSE 7508
7088: GO 7090
7090: DISABLE
7091: LD_INT 0
7093: PPUSH
7094: PPUSH
7095: PPUSH
7096: PPUSH
7097: PPUSH
// begin enable ;
7098: ENABLE
// if tick > 60 60$00 then
7099: LD_OWVAR 1
7103: PUSH
7104: LD_INT 126000
7106: GREATER
7107: IFFALSE 7110
// disable ;
7109: DISABLE
// tmp := [ ] ;
7110: LD_ADDR_VAR 0 3
7114: PUSH
7115: EMPTY
7116: ST_TO_ADDR
// for i := 1 to 8 do
7117: LD_ADDR_VAR 0 1
7121: PUSH
7122: DOUBLE
7123: LD_INT 1
7125: DEC
7126: ST_TO_ADDR
7127: LD_INT 8
7129: PUSH
7130: FOR_TO
7131: IFFALSE 7290
// begin uc_side := 6 ;
7133: LD_ADDR_OWVAR 20
7137: PUSH
7138: LD_INT 6
7140: ST_TO_ADDR
// uc_nation := 3 ;
7141: LD_ADDR_OWVAR 21
7145: PUSH
7146: LD_INT 3
7148: ST_TO_ADDR
// vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod 3 + 1 ] ;
7149: LD_ADDR_OWVAR 37
7153: PUSH
7154: LD_INT 21
7156: PUSH
7157: LD_INT 23
7159: PUSH
7160: LD_INT 24
7162: PUSH
7163: EMPTY
7164: LIST
7165: LIST
7166: LIST
7167: PUSH
7168: LD_VAR 0 1
7172: PUSH
7173: LD_INT 3
7175: MOD
7176: PUSH
7177: LD_INT 1
7179: PLUS
7180: ARRAY
7181: ST_TO_ADDR
// vc_engine := engine_siberite ;
7182: LD_ADDR_OWVAR 39
7186: PUSH
7187: LD_INT 3
7189: ST_TO_ADDR
// vc_control := control_computer ;
7190: LD_ADDR_OWVAR 38
7194: PUSH
7195: LD_INT 3
7197: ST_TO_ADDR
// vc_weapon := [ ru_rocket_launcher , ru_flamethrower , ru_rocket ] [ i mod 3 + 1 ] ;
7198: LD_ADDR_OWVAR 40
7202: PUSH
7203: LD_INT 45
7205: PUSH
7206: LD_INT 93
7208: PUSH
7209: LD_INT 47
7211: PUSH
7212: EMPTY
7213: LIST
7214: LIST
7215: LIST
7216: PUSH
7217: LD_VAR 0 1
7221: PUSH
7222: LD_INT 3
7224: MOD
7225: PUSH
7226: LD_INT 1
7228: PLUS
7229: ARRAY
7230: ST_TO_ADDR
// un := CreateVehicle ;
7231: LD_ADDR_VAR 0 2
7235: PUSH
7236: CALL_OW 45
7240: ST_TO_ADDR
// SetDir ( un , 2 ) ;
7241: LD_VAR 0 2
7245: PPUSH
7246: LD_INT 2
7248: PPUSH
7249: CALL_OW 233
// PlaceUnitArea ( un , start_north , false ) ;
7253: LD_VAR 0 2
7257: PPUSH
7258: LD_INT 1
7260: PPUSH
7261: LD_INT 0
7263: PPUSH
7264: CALL_OW 49
// tmp := Join ( tmp , un ) ;
7268: LD_ADDR_VAR 0 3
7272: PUSH
7273: LD_VAR 0 3
7277: PPUSH
7278: LD_VAR 0 2
7282: PPUSH
7283: CALL 78185 0 2
7287: ST_TO_ADDR
// end ;
7288: GO 7130
7290: POP
7291: POP
// if FilterAllUnits ( [ [ f_side , your_side ] , [ f_distxy , 58 , 15 , 18 ] ] ) > 1 then
7292: LD_INT 22
7294: PUSH
7295: LD_OWVAR 2
7299: PUSH
7300: EMPTY
7301: LIST
7302: LIST
7303: PUSH
7304: LD_INT 92
7306: PUSH
7307: LD_INT 58
7309: PUSH
7310: LD_INT 15
7312: PUSH
7313: LD_INT 18
7315: PUSH
7316: EMPTY
7317: LIST
7318: LIST
7319: LIST
7320: LIST
7321: PUSH
7322: EMPTY
7323: LIST
7324: LIST
7325: PPUSH
7326: CALL_OW 69
7330: PUSH
7331: LD_INT 1
7333: GREATER
7334: IFFALSE 7346
// p := 2 else
7336: LD_ADDR_VAR 0 4
7340: PUSH
7341: LD_INT 2
7343: ST_TO_ADDR
7344: GO 7354
// p := 1 ;
7346: LD_ADDR_VAR 0 4
7350: PUSH
7351: LD_INT 1
7353: ST_TO_ADDR
// case p of 1 :
7354: LD_VAR 0 4
7358: PUSH
7359: LD_INT 1
7361: DOUBLE
7362: EQUAL
7363: IFTRUE 7367
7365: GO 7432
7367: POP
// path := [ [ 29 , 29 ] , [ 49 , 70 ] , [ 49 , 70 ] , [ 61 , 110 ] , [ 74 , 129 ] ] ; 2 :
7368: LD_ADDR_VAR 0 5
7372: PUSH
7373: LD_INT 29
7375: PUSH
7376: LD_INT 29
7378: PUSH
7379: EMPTY
7380: LIST
7381: LIST
7382: PUSH
7383: LD_INT 49
7385: PUSH
7386: LD_INT 70
7388: PUSH
7389: EMPTY
7390: LIST
7391: LIST
7392: PUSH
7393: LD_INT 49
7395: PUSH
7396: LD_INT 70
7398: PUSH
7399: EMPTY
7400: LIST
7401: LIST
7402: PUSH
7403: LD_INT 61
7405: PUSH
7406: LD_INT 110
7408: PUSH
7409: EMPTY
7410: LIST
7411: LIST
7412: PUSH
7413: LD_INT 74
7415: PUSH
7416: LD_INT 129
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: LIST
7427: LIST
7428: LIST
7429: ST_TO_ADDR
7430: GO 7484
7432: LD_INT 2
7434: DOUBLE
7435: EQUAL
7436: IFTRUE 7440
7438: GO 7483
7440: POP
// path := [ [ 24 , 23 ] , [ 49 , 39 ] , [ 52 , 27 ] ] ; end ;
7441: LD_ADDR_VAR 0 5
7445: PUSH
7446: LD_INT 24
7448: PUSH
7449: LD_INT 23
7451: PUSH
7452: EMPTY
7453: LIST
7454: LIST
7455: PUSH
7456: LD_INT 49
7458: PUSH
7459: LD_INT 39
7461: PUSH
7462: EMPTY
7463: LIST
7464: LIST
7465: PUSH
7466: LD_INT 52
7468: PUSH
7469: LD_INT 27
7471: PUSH
7472: EMPTY
7473: LIST
7474: LIST
7475: PUSH
7476: EMPTY
7477: LIST
7478: LIST
7479: LIST
7480: ST_TO_ADDR
7481: GO 7484
7483: POP
// repeat wait ( 0 0$1 ) ;
7484: LD_INT 35
7486: PPUSH
7487: CALL_OW 67
// until not AgressiveMove ( tmp , path ) ;
7491: LD_VAR 0 3
7495: PPUSH
7496: LD_VAR 0 5
7500: PPUSH
7501: CALL 80789 0 2
7505: NOT
7506: IFFALSE 7484
// end ;
7508: PPOPN 5
7510: END
// every 30 30$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) do var ru_depot ;
7511: LD_INT 22
7513: PUSH
7514: LD_INT 3
7516: PUSH
7517: EMPTY
7518: LIST
7519: LIST
7520: PUSH
7521: LD_INT 30
7523: PUSH
7524: LD_INT 1
7526: PUSH
7527: EMPTY
7528: LIST
7529: LIST
7530: PUSH
7531: EMPTY
7532: LIST
7533: LIST
7534: PPUSH
7535: CALL_OW 69
7539: IFFALSE 7626
7541: GO 7543
7543: DISABLE
7544: LD_INT 0
7546: PPUSH
// begin enable ;
7547: ENABLE
// ru_depot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
7548: LD_ADDR_VAR 0 1
7552: PUSH
7553: LD_INT 22
7555: PUSH
7556: LD_INT 3
7558: PUSH
7559: EMPTY
7560: LIST
7561: LIST
7562: PUSH
7563: LD_INT 30
7565: PUSH
7566: LD_INT 1
7568: PUSH
7569: EMPTY
7570: LIST
7571: LIST
7572: PUSH
7573: EMPTY
7574: LIST
7575: LIST
7576: PPUSH
7577: CALL_OW 69
7581: PUSH
7582: LD_INT 1
7584: ARRAY
7585: ST_TO_ADDR
// AddResourceType ( GetBase ( ru_depot ) , mat_cans , 6000 ) ;
7586: LD_VAR 0 1
7590: PPUSH
7591: CALL_OW 274
7595: PPUSH
7596: LD_INT 1
7598: PPUSH
7599: LD_INT 6000
7601: PPUSH
7602: CALL_OW 276
// AddResourceType ( GetBase ( ru_depot ) , mat_oil , 600 ) ;
7606: LD_VAR 0 1
7610: PPUSH
7611: CALL_OW 274
7615: PPUSH
7616: LD_INT 2
7618: PPUSH
7619: LD_INT 600
7621: PPUSH
7622: CALL_OW 276
// end ;
7626: PPOPN 1
7628: END
// export function RussianAttack ( ) ; var path , units , p , i , teleport ; begin
7629: LD_INT 0
7631: PPUSH
7632: PPUSH
7633: PPUSH
7634: PPUSH
7635: PPUSH
7636: PPUSH
// units := ru_force ;
7637: LD_ADDR_VAR 0 3
7641: PUSH
7642: LD_EXP 29
7646: ST_TO_ADDR
// teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) ;
7647: LD_ADDR_VAR 0 6
7651: PUSH
7652: LD_INT 22
7654: PUSH
7655: LD_INT 3
7657: PUSH
7658: EMPTY
7659: LIST
7660: LIST
7661: PUSH
7662: LD_INT 30
7664: PUSH
7665: LD_INT 34
7667: PUSH
7668: EMPTY
7669: LIST
7670: LIST
7671: PUSH
7672: EMPTY
7673: LIST
7674: LIST
7675: PPUSH
7676: CALL_OW 69
7680: ST_TO_ADDR
// ru_force := [ ] ;
7681: LD_ADDR_EXP 29
7685: PUSH
7686: EMPTY
7687: ST_TO_ADDR
// if not teleport then
7688: LD_VAR 0 6
7692: NOT
7693: IFFALSE 7735
// begin for i in units do
7695: LD_ADDR_VAR 0 5
7699: PUSH
7700: LD_VAR 0 3
7704: PUSH
7705: FOR_IN
7706: IFFALSE 7731
// TeleportUnit ( i , 150 , 65 , 12 , true ) ;
7708: LD_VAR 0 5
7712: PPUSH
7713: LD_INT 150
7715: PPUSH
7716: LD_INT 65
7718: PPUSH
7719: LD_INT 12
7721: PPUSH
7722: LD_INT 1
7724: PPUSH
7725: CALL_OW 483
7729: GO 7705
7731: POP
7732: POP
// end else
7733: GO 7830
// begin repeat for i = 1 to units do
7735: LD_ADDR_VAR 0 5
7739: PUSH
7740: DOUBLE
7741: LD_INT 1
7743: DEC
7744: ST_TO_ADDR
7745: LD_VAR 0 3
7749: PUSH
7750: FOR_TO
7751: IFFALSE 7799
// if IsInArea ( units [ i ] , ru_base ) then
7753: LD_VAR 0 3
7757: PUSH
7758: LD_VAR 0 5
7762: ARRAY
7763: PPUSH
7764: LD_INT 9
7766: PPUSH
7767: CALL_OW 308
7771: IFFALSE 7797
// ComEnterUnit ( units [ i ] , teleport [ 1 ] ) ;
7773: LD_VAR 0 3
7777: PUSH
7778: LD_VAR 0 5
7782: ARRAY
7783: PPUSH
7784: LD_VAR 0 6
7788: PUSH
7789: LD_INT 1
7791: ARRAY
7792: PPUSH
7793: CALL_OW 120
7797: GO 7750
7799: POP
7800: POP
// wait ( 0 0$10 ) ;
7801: LD_INT 350
7803: PPUSH
7804: CALL_OW 67
// until not UnitFilter ( units , [ f_inarea , ru_base ] ) ;
7808: LD_VAR 0 3
7812: PPUSH
7813: LD_INT 95
7815: PUSH
7816: LD_INT 9
7818: PUSH
7819: EMPTY
7820: LIST
7821: LIST
7822: PPUSH
7823: CALL_OW 72
7827: NOT
7828: IFFALSE 7735
// end ; p := rand ( 1 , 2 ) ;
7830: LD_ADDR_VAR 0 4
7834: PUSH
7835: LD_INT 1
7837: PPUSH
7838: LD_INT 2
7840: PPUSH
7841: CALL_OW 12
7845: ST_TO_ADDR
// case p of 1 :
7846: LD_VAR 0 4
7850: PUSH
7851: LD_INT 1
7853: DOUBLE
7854: EQUAL
7855: IFTRUE 7859
7857: GO 7913
7859: POP
// path := [ [ 159 , 71 ] , [ 152 , 99 ] , [ 107 , 119 ] , [ 104 , 127 ] ] ; 2 :
7860: LD_ADDR_VAR 0 2
7864: PUSH
7865: LD_INT 159
7867: PUSH
7868: LD_INT 71
7870: PUSH
7871: EMPTY
7872: LIST
7873: LIST
7874: PUSH
7875: LD_INT 152
7877: PUSH
7878: LD_INT 99
7880: PUSH
7881: EMPTY
7882: LIST
7883: LIST
7884: PUSH
7885: LD_INT 107
7887: PUSH
7888: LD_INT 119
7890: PUSH
7891: EMPTY
7892: LIST
7893: LIST
7894: PUSH
7895: LD_INT 104
7897: PUSH
7898: LD_INT 127
7900: PUSH
7901: EMPTY
7902: LIST
7903: LIST
7904: PUSH
7905: EMPTY
7906: LIST
7907: LIST
7908: LIST
7909: LIST
7910: ST_TO_ADDR
7911: GO 7976
7913: LD_INT 2
7915: DOUBLE
7916: EQUAL
7917: IFTRUE 7921
7919: GO 7975
7921: POP
// path := [ [ 116 , 36 ] , [ 91 , 52 ] , [ 53 , 67 ] , [ 58 , 107 ] ] ; end ;
7922: LD_ADDR_VAR 0 2
7926: PUSH
7927: LD_INT 116
7929: PUSH
7930: LD_INT 36
7932: PUSH
7933: EMPTY
7934: LIST
7935: LIST
7936: PUSH
7937: LD_INT 91
7939: PUSH
7940: LD_INT 52
7942: PUSH
7943: EMPTY
7944: LIST
7945: LIST
7946: PUSH
7947: LD_INT 53
7949: PUSH
7950: LD_INT 67
7952: PUSH
7953: EMPTY
7954: LIST
7955: LIST
7956: PUSH
7957: LD_INT 58
7959: PUSH
7960: LD_INT 107
7962: PUSH
7963: EMPTY
7964: LIST
7965: LIST
7966: PUSH
7967: EMPTY
7968: LIST
7969: LIST
7970: LIST
7971: LIST
7972: ST_TO_ADDR
7973: GO 7976
7975: POP
// if FilterAllUnits ( [ f_side , 7 ] ) and p > 1 then
7976: LD_INT 22
7978: PUSH
7979: LD_INT 7
7981: PUSH
7982: EMPTY
7983: LIST
7984: LIST
7985: PPUSH
7986: CALL_OW 69
7990: PUSH
7991: LD_VAR 0 4
7995: PUSH
7996: LD_INT 1
7998: GREATER
7999: AND
8000: IFFALSE 8031
// path := [ [ 116 , 36 ] , [ 91 , 52 ] ] ;
8002: LD_ADDR_VAR 0 2
8006: PUSH
8007: LD_INT 116
8009: PUSH
8010: LD_INT 36
8012: PUSH
8013: EMPTY
8014: LIST
8015: LIST
8016: PUSH
8017: LD_INT 91
8019: PUSH
8020: LD_INT 52
8022: PUSH
8023: EMPTY
8024: LIST
8025: LIST
8026: PUSH
8027: EMPTY
8028: LIST
8029: LIST
8030: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8031: LD_INT 35
8033: PPUSH
8034: CALL_OW 67
// until not AgressiveMove ( units , path ) ;
8038: LD_VAR 0 3
8042: PPUSH
8043: LD_VAR 0 2
8047: PPUSH
8048: CALL 80789 0 2
8052: NOT
8053: IFFALSE 8031
// end ; end_of_file
8055: LD_VAR 0 1
8059: RET
// export function RemoveLegion ; var i ; begin
8060: LD_INT 0
8062: PPUSH
8063: PPUSH
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
8064: LD_ADDR_VAR 0 2
8068: PUSH
8069: LD_INT 22
8071: PUSH
8072: LD_INT 8
8074: PUSH
8075: EMPTY
8076: LIST
8077: LIST
8078: PPUSH
8079: CALL_OW 69
8083: PUSH
8084: FOR_IN
8085: IFFALSE 8098
// RemoveUnit ( i ) ;
8087: LD_VAR 0 2
8091: PPUSH
8092: CALL_OW 64
8096: GO 8084
8098: POP
8099: POP
// end ;
8100: LD_VAR 0 1
8104: RET
// export legion_force , legion_skill , legion_mines , legion_blist , legion_vlist , legion_enemy ; export function PrepareLegion ; var un , i , tmp , veh , l_depot , p , l_factory , l_lab , l_towers ; begin
8105: LD_INT 0
8107: PPUSH
8108: PPUSH
8109: PPUSH
8110: PPUSH
8111: PPUSH
8112: PPUSH
8113: PPUSH
8114: PPUSH
8115: PPUSH
8116: PPUSH
// l_depot := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
8117: LD_ADDR_VAR 0 6
8121: PUSH
8122: LD_INT 22
8124: PUSH
8125: LD_INT 8
8127: PUSH
8128: EMPTY
8129: LIST
8130: LIST
8131: PUSH
8132: LD_INT 30
8134: PUSH
8135: LD_INT 1
8137: PUSH
8138: EMPTY
8139: LIST
8140: LIST
8141: PUSH
8142: EMPTY
8143: LIST
8144: LIST
8145: PPUSH
8146: CALL_OW 69
8150: PUSH
8151: LD_INT 1
8153: ARRAY
8154: ST_TO_ADDR
// l_factory := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
8155: LD_ADDR_VAR 0 8
8159: PUSH
8160: LD_INT 22
8162: PUSH
8163: LD_INT 8
8165: PUSH
8166: EMPTY
8167: LIST
8168: LIST
8169: PUSH
8170: LD_INT 30
8172: PUSH
8173: LD_INT 3
8175: PUSH
8176: EMPTY
8177: LIST
8178: LIST
8179: PUSH
8180: EMPTY
8181: LIST
8182: LIST
8183: PPUSH
8184: CALL_OW 69
8188: PUSH
8189: LD_INT 1
8191: ARRAY
8192: ST_TO_ADDR
// l_lab := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ;
8193: LD_ADDR_VAR 0 9
8197: PUSH
8198: LD_INT 22
8200: PUSH
8201: LD_INT 8
8203: PUSH
8204: EMPTY
8205: LIST
8206: LIST
8207: PUSH
8208: LD_INT 2
8210: PUSH
8211: LD_INT 30
8213: PUSH
8214: LD_INT 6
8216: PUSH
8217: EMPTY
8218: LIST
8219: LIST
8220: PUSH
8221: LD_INT 30
8223: PUSH
8224: LD_INT 8
8226: PUSH
8227: EMPTY
8228: LIST
8229: LIST
8230: PUSH
8231: EMPTY
8232: LIST
8233: LIST
8234: LIST
8235: PUSH
8236: EMPTY
8237: LIST
8238: LIST
8239: PPUSH
8240: CALL_OW 69
8244: PUSH
8245: LD_INT 1
8247: ARRAY
8248: ST_TO_ADDR
// l_towers := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) ;
8249: LD_ADDR_VAR 0 10
8253: PUSH
8254: LD_INT 22
8256: PUSH
8257: LD_INT 8
8259: PUSH
8260: EMPTY
8261: LIST
8262: LIST
8263: PUSH
8264: LD_INT 30
8266: PUSH
8267: LD_INT 32
8269: PUSH
8270: EMPTY
8271: LIST
8272: LIST
8273: PUSH
8274: EMPTY
8275: LIST
8276: LIST
8277: PPUSH
8278: CALL_OW 69
8282: ST_TO_ADDR
// uc_side := 8 ;
8283: LD_ADDR_OWVAR 20
8287: PUSH
8288: LD_INT 8
8290: ST_TO_ADDR
// uc_nation := nation_arabian ;
8291: LD_ADDR_OWVAR 21
8295: PUSH
8296: LD_INT 2
8298: ST_TO_ADDR
// legion_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
8299: LD_ADDR_EXP 38
8303: PUSH
8304: LD_INT 5
8306: PUSH
8307: LD_INT 6
8309: PUSH
8310: LD_INT 7
8312: PUSH
8313: EMPTY
8314: LIST
8315: LIST
8316: LIST
8317: PUSH
8318: LD_OWVAR 67
8322: ARRAY
8323: ST_TO_ADDR
// legion_blist := [ ] ;
8324: LD_ADDR_EXP 40
8328: PUSH
8329: EMPTY
8330: ST_TO_ADDR
// legion_vlist := [ ] ;
8331: LD_ADDR_EXP 41
8335: PUSH
8336: EMPTY
8337: ST_TO_ADDR
// legion_force := [ ] ;
8338: LD_ADDR_EXP 37
8342: PUSH
8343: EMPTY
8344: ST_TO_ADDR
// legion_enemy := - 1 ;
8345: LD_ADDR_EXP 42
8349: PUSH
8350: LD_INT 1
8352: NEG
8353: ST_TO_ADDR
// SetResourceType ( GetBase ( l_depot ) , mat_cans , 10000 ) ;
8354: LD_VAR 0 6
8358: PPUSH
8359: CALL_OW 274
8363: PPUSH
8364: LD_INT 1
8366: PPUSH
8367: LD_INT 10000
8369: PPUSH
8370: CALL_OW 277
// SetResourceType ( GetBase ( l_depot ) , 3 , 1000 ) ;
8374: LD_VAR 0 6
8378: PPUSH
8379: CALL_OW 274
8383: PPUSH
8384: LD_INT 3
8386: PPUSH
8387: LD_INT 1000
8389: PPUSH
8390: CALL_OW 277
// for i = 1 to l_towers do
8394: LD_ADDR_VAR 0 3
8398: PUSH
8399: DOUBLE
8400: LD_INT 1
8402: DEC
8403: ST_TO_ADDR
8404: LD_VAR 0 10
8408: PUSH
8409: FOR_TO
8410: IFFALSE 8459
// begin PrepareHuman ( false , 1 , legion_skill ) ;
8412: LD_INT 0
8414: PPUSH
8415: LD_INT 1
8417: PPUSH
8418: LD_EXP 38
8422: PPUSH
8423: CALL_OW 380
// un := CreateHuman ;
8427: LD_ADDR_VAR 0 2
8431: PUSH
8432: CALL_OW 44
8436: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_towers [ i ] ) ;
8437: LD_VAR 0 2
8441: PPUSH
8442: LD_VAR 0 10
8446: PUSH
8447: LD_VAR 0 3
8451: ARRAY
8452: PPUSH
8453: CALL_OW 52
// end ;
8457: GO 8409
8459: POP
8460: POP
// for i = 1 to 4 do
8461: LD_ADDR_VAR 0 3
8465: PUSH
8466: DOUBLE
8467: LD_INT 1
8469: DEC
8470: ST_TO_ADDR
8471: LD_INT 4
8473: PUSH
8474: FOR_TO
8475: IFFALSE 8568
// for p = 1 to 2 do
8477: LD_ADDR_VAR 0 7
8481: PUSH
8482: DOUBLE
8483: LD_INT 1
8485: DEC
8486: ST_TO_ADDR
8487: LD_INT 2
8489: PUSH
8490: FOR_TO
8491: IFFALSE 8564
// begin PrepareHuman ( false , class_mortar , legion_skill ) ;
8493: LD_INT 0
8495: PPUSH
8496: LD_INT 8
8498: PPUSH
8499: LD_EXP 38
8503: PPUSH
8504: CALL_OW 380
// un := CreateHuman ;
8508: LD_ADDR_VAR 0 2
8512: PUSH
8513: CALL_OW 44
8517: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_barracks ] ] ) [ p ] ) ;
8518: LD_VAR 0 2
8522: PPUSH
8523: LD_INT 22
8525: PUSH
8526: LD_INT 8
8528: PUSH
8529: EMPTY
8530: LIST
8531: LIST
8532: PUSH
8533: LD_INT 30
8535: PUSH
8536: LD_INT 5
8538: PUSH
8539: EMPTY
8540: LIST
8541: LIST
8542: PUSH
8543: EMPTY
8544: LIST
8545: LIST
8546: PPUSH
8547: CALL_OW 69
8551: PUSH
8552: LD_VAR 0 7
8556: ARRAY
8557: PPUSH
8558: CALL_OW 52
// end ;
8562: GO 8490
8564: POP
8565: POP
8566: GO 8474
8568: POP
8569: POP
// for i = 1 to 4 do
8570: LD_ADDR_VAR 0 3
8574: PUSH
8575: DOUBLE
8576: LD_INT 1
8578: DEC
8579: ST_TO_ADDR
8580: LD_INT 4
8582: PUSH
8583: FOR_TO
8584: IFFALSE 8627
// begin PrepareHuman ( false , 4 , legion_skill ) ;
8586: LD_INT 0
8588: PPUSH
8589: LD_INT 4
8591: PPUSH
8592: LD_EXP 38
8596: PPUSH
8597: CALL_OW 380
// un := CreateHuman ;
8601: LD_ADDR_VAR 0 2
8605: PUSH
8606: CALL_OW 44
8610: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_lab ) ;
8611: LD_VAR 0 2
8615: PPUSH
8616: LD_VAR 0 9
8620: PPUSH
8621: CALL_OW 52
// end ;
8625: GO 8583
8627: POP
8628: POP
// for i = 1 to 4 do
8629: LD_ADDR_VAR 0 3
8633: PUSH
8634: DOUBLE
8635: LD_INT 1
8637: DEC
8638: ST_TO_ADDR
8639: LD_INT 4
8641: PUSH
8642: FOR_TO
8643: IFFALSE 8686
// begin PrepareHuman ( false , 3 , legion_skill ) ;
8645: LD_INT 0
8647: PPUSH
8648: LD_INT 3
8650: PPUSH
8651: LD_EXP 38
8655: PPUSH
8656: CALL_OW 380
// un := CreateHuman ;
8660: LD_ADDR_VAR 0 2
8664: PUSH
8665: CALL_OW 44
8669: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_factory ) ;
8670: LD_VAR 0 2
8674: PPUSH
8675: LD_VAR 0 8
8679: PPUSH
8680: CALL_OW 52
// end ;
8684: GO 8642
8686: POP
8687: POP
// for i = 1 to 3 do
8688: LD_ADDR_VAR 0 3
8692: PUSH
8693: DOUBLE
8694: LD_INT 1
8696: DEC
8697: ST_TO_ADDR
8698: LD_INT 3
8700: PUSH
8701: FOR_TO
8702: IFFALSE 8745
// begin PrepareHuman ( false , 2 , legion_skill ) ;
8704: LD_INT 0
8706: PPUSH
8707: LD_INT 2
8709: PPUSH
8710: LD_EXP 38
8714: PPUSH
8715: CALL_OW 380
// un := CreateHuman ;
8719: LD_ADDR_VAR 0 2
8723: PUSH
8724: CALL_OW 44
8728: ST_TO_ADDR
// PlaceHumanInUnit ( un , l_depot ) ;
8729: LD_VAR 0 2
8733: PPUSH
8734: LD_VAR 0 6
8738: PPUSH
8739: CALL_OW 52
// end ;
8743: GO 8701
8745: POP
8746: POP
// for i = 1 to 3 do
8747: LD_ADDR_VAR 0 3
8751: PUSH
8752: DOUBLE
8753: LD_INT 1
8755: DEC
8756: ST_TO_ADDR
8757: LD_INT 3
8759: PUSH
8760: FOR_TO
8761: IFFALSE 8871
// begin vc_chassis := ar_half_tracked ;
8763: LD_ADDR_OWVAR 37
8767: PUSH
8768: LD_INT 14
8770: ST_TO_ADDR
// vc_engine := engine_siberite ;
8771: LD_ADDR_OWVAR 39
8775: PUSH
8776: LD_INT 3
8778: ST_TO_ADDR
// vc_control := control_manual ;
8779: LD_ADDR_OWVAR 38
8783: PUSH
8784: LD_INT 1
8786: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
8787: LD_ADDR_OWVAR 40
8791: PUSH
8792: LD_INT 31
8794: ST_TO_ADDR
// veh := CreateVehicle ;
8795: LD_ADDR_VAR 0 5
8799: PUSH
8800: CALL_OW 45
8804: ST_TO_ADDR
// PlaceUnitXYR ( veh , 212 , 135 , 5 , false ) ;
8805: LD_VAR 0 5
8809: PPUSH
8810: LD_INT 212
8812: PPUSH
8813: LD_INT 135
8815: PPUSH
8816: LD_INT 5
8818: PPUSH
8819: LD_INT 0
8821: PPUSH
8822: CALL_OW 50
// PrepareHuman ( false , 3 , legion_skill + 1 ) ;
8826: LD_INT 0
8828: PPUSH
8829: LD_INT 3
8831: PPUSH
8832: LD_EXP 38
8836: PUSH
8837: LD_INT 1
8839: PLUS
8840: PPUSH
8841: CALL_OW 380
// un := CreateHuman ;
8845: LD_ADDR_VAR 0 2
8849: PUSH
8850: CALL_OW 44
8854: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8855: LD_VAR 0 2
8859: PPUSH
8860: LD_VAR 0 5
8864: PPUSH
8865: CALL_OW 52
// end ;
8869: GO 8760
8871: POP
8872: POP
// PrepareSoldier ( false , 8 ) ;
8873: LD_INT 0
8875: PPUSH
8876: LD_INT 8
8878: PPUSH
8879: CALL_OW 381
// hc_class := class_sniper ;
8883: LD_ADDR_OWVAR 28
8887: PUSH
8888: LD_INT 5
8890: ST_TO_ADDR
// un := CreateHuman ;
8891: LD_ADDR_VAR 0 2
8895: PUSH
8896: CALL_OW 44
8900: ST_TO_ADDR
// SetDir ( un , 4 ) ;
8901: LD_VAR 0 2
8905: PPUSH
8906: LD_INT 4
8908: PPUSH
8909: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( 136 , 92 ) ) ;
8913: LD_VAR 0 2
8917: PPUSH
8918: LD_INT 136
8920: PPUSH
8921: LD_INT 92
8923: PPUSH
8924: CALL_OW 428
8928: PPUSH
8929: CALL_OW 52
// PlaceSeeing ( 198 , 94 , 8 , 10 ) ;
8933: LD_INT 198
8935: PPUSH
8936: LD_INT 94
8938: PPUSH
8939: LD_INT 8
8941: PPUSH
8942: LD_INT 10
8944: PPUSH
8945: CALL_OW 330
// PlaceSeeing ( 167 , 130 , 8 , 10 ) ;
8949: LD_INT 167
8951: PPUSH
8952: LD_INT 130
8954: PPUSH
8955: LD_INT 8
8957: PPUSH
8958: LD_INT 10
8960: PPUSH
8961: CALL_OW 330
// tmp := AreaToList ( legion_mines_area , 0 ) ;
8965: LD_ADDR_VAR 0 4
8969: PUSH
8970: LD_INT 24
8972: PPUSH
8973: LD_INT 0
8975: PPUSH
8976: CALL_OW 517
8980: ST_TO_ADDR
// legion_mines := [ ] ;
8981: LD_ADDR_EXP 39
8985: PUSH
8986: EMPTY
8987: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
8988: LD_ADDR_VAR 0 3
8992: PUSH
8993: DOUBLE
8994: LD_INT 1
8996: DEC
8997: ST_TO_ADDR
8998: LD_VAR 0 4
9002: PUSH
9003: LD_INT 1
9005: ARRAY
9006: PUSH
9007: FOR_TO
9008: IFFALSE 9110
// begin PlaceMine ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 8 , 0 ) ;
9010: LD_VAR 0 4
9014: PUSH
9015: LD_INT 1
9017: ARRAY
9018: PUSH
9019: LD_VAR 0 3
9023: ARRAY
9024: PPUSH
9025: LD_VAR 0 4
9029: PUSH
9030: LD_INT 2
9032: ARRAY
9033: PUSH
9034: LD_VAR 0 3
9038: ARRAY
9039: PPUSH
9040: LD_INT 8
9042: PPUSH
9043: LD_INT 0
9045: PPUSH
9046: CALL_OW 454
// legion_mines := Replace ( legion_mines , legion_mines + 1 , [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ) ;
9050: LD_ADDR_EXP 39
9054: PUSH
9055: LD_EXP 39
9059: PPUSH
9060: LD_EXP 39
9064: PUSH
9065: LD_INT 1
9067: PLUS
9068: PPUSH
9069: LD_VAR 0 4
9073: PUSH
9074: LD_INT 1
9076: ARRAY
9077: PUSH
9078: LD_VAR 0 3
9082: ARRAY
9083: PUSH
9084: LD_VAR 0 4
9088: PUSH
9089: LD_INT 2
9091: ARRAY
9092: PUSH
9093: LD_VAR 0 3
9097: ARRAY
9098: PUSH
9099: EMPTY
9100: LIST
9101: LIST
9102: PPUSH
9103: CALL_OW 1
9107: ST_TO_ADDR
// end ;
9108: GO 9007
9110: POP
9111: POP
// legion_vlist := [ ar_medium_trike , 3 , control_remote , ar_cargo_bay ] ;
9112: LD_ADDR_EXP 41
9116: PUSH
9117: LD_INT 13
9119: PUSH
9120: LD_INT 3
9122: PUSH
9123: LD_INT 2
9125: PUSH
9126: LD_INT 32
9128: PUSH
9129: EMPTY
9130: LIST
9131: LIST
9132: LIST
9133: LIST
9134: ST_TO_ADDR
// end ;
9135: LD_VAR 0 1
9139: RET
// every 0 0$1 trigger legion_mines and FilterUnitsInArea ( legion_mines_area , [ f_side , your_side ] ) do var i , un ;
9140: LD_EXP 39
9144: PUSH
9145: LD_INT 24
9147: PPUSH
9148: LD_INT 22
9150: PUSH
9151: LD_OWVAR 2
9155: PUSH
9156: EMPTY
9157: LIST
9158: LIST
9159: PPUSH
9160: CALL_OW 70
9164: AND
9165: IFFALSE 9332
9167: GO 9169
9169: DISABLE
9170: LD_INT 0
9172: PPUSH
9173: PPUSH
// begin enable ;
9174: ENABLE
// for i := legion_mines downto 1 do
9175: LD_ADDR_VAR 0 1
9179: PUSH
9180: DOUBLE
9181: LD_EXP 39
9185: INC
9186: ST_TO_ADDR
9187: LD_INT 1
9189: PUSH
9190: FOR_DOWNTO
9191: IFFALSE 9330
// begin un := HexInfo ( legion_mines [ i ] [ 1 ] , legion_mines [ i ] [ 2 ] ) ;
9193: LD_ADDR_VAR 0 2
9197: PUSH
9198: LD_EXP 39
9202: PUSH
9203: LD_VAR 0 1
9207: ARRAY
9208: PUSH
9209: LD_INT 1
9211: ARRAY
9212: PPUSH
9213: LD_EXP 39
9217: PUSH
9218: LD_VAR 0 1
9222: ARRAY
9223: PUSH
9224: LD_INT 2
9226: ARRAY
9227: PPUSH
9228: CALL_OW 428
9232: ST_TO_ADDR
// if un then
9233: LD_VAR 0 2
9237: IFFALSE 9328
// if GetSide ( un ) = legion_enemy then
9239: LD_VAR 0 2
9243: PPUSH
9244: CALL_OW 255
9248: PUSH
9249: LD_EXP 42
9253: EQUAL
9254: IFFALSE 9328
// begin LaunchMineAtPos ( legion_mines [ i ] [ 1 ] , legion_mines [ i ] [ 2 ] , 8 ) ;
9256: LD_EXP 39
9260: PUSH
9261: LD_VAR 0 1
9265: ARRAY
9266: PUSH
9267: LD_INT 1
9269: ARRAY
9270: PPUSH
9271: LD_EXP 39
9275: PUSH
9276: LD_VAR 0 1
9280: ARRAY
9281: PUSH
9282: LD_INT 2
9284: ARRAY
9285: PPUSH
9286: LD_INT 8
9288: PPUSH
9289: CALL_OW 456
// legion_mines := Delete ( legion_mines , i ) ;
9293: LD_ADDR_EXP 39
9297: PUSH
9298: LD_EXP 39
9302: PPUSH
9303: LD_VAR 0 1
9307: PPUSH
9308: CALL_OW 3
9312: ST_TO_ADDR
// if not mine_vulc then
9313: LD_EXP 13
9317: NOT
9318: IFFALSE 9328
// mine_vulc := true ;
9320: LD_ADDR_EXP 13
9324: PUSH
9325: LD_INT 1
9327: ST_TO_ADDR
// end ; end ;
9328: GO 9190
9330: POP
9331: POP
// end ;
9332: PPOPN 2
9334: END
// every 0 0$1 trigger tick >= [ 25 25$00 , 22 22$00 , 20 20$00 ] [ Difficulty ] do var artifact , un ;
9335: LD_OWVAR 1
9339: PUSH
9340: LD_INT 52500
9342: PUSH
9343: LD_INT 46200
9345: PUSH
9346: LD_INT 42000
9348: PUSH
9349: EMPTY
9350: LIST
9351: LIST
9352: LIST
9353: PUSH
9354: LD_OWVAR 67
9358: ARRAY
9359: GREATEREQUAL
9360: IFFALSE 9538
9362: GO 9364
9364: DISABLE
9365: LD_INT 0
9367: PPUSH
9368: PPUSH
// begin artifact := FindArtifact ( 1 ) ;
9369: LD_ADDR_VAR 0 1
9373: PUSH
9374: LD_INT 1
9376: PPUSH
9377: CALL_OW 469
9381: ST_TO_ADDR
// if artifact [ 1 ] = 112 and artifact [ 2 ] = 67 then
9382: LD_VAR 0 1
9386: PUSH
9387: LD_INT 1
9389: ARRAY
9390: PUSH
9391: LD_INT 112
9393: EQUAL
9394: PUSH
9395: LD_VAR 0 1
9399: PUSH
9400: LD_INT 2
9402: ARRAY
9403: PUSH
9404: LD_INT 67
9406: EQUAL
9407: AND
9408: IFFALSE 9538
// begin un := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 2 ] ] ) ;
9410: LD_ADDR_VAR 0 2
9414: PUSH
9415: LD_INT 22
9417: PUSH
9418: LD_INT 8
9420: PUSH
9421: EMPTY
9422: LIST
9423: LIST
9424: PUSH
9425: LD_INT 25
9427: PUSH
9428: LD_INT 2
9430: PUSH
9431: EMPTY
9432: LIST
9433: LIST
9434: PUSH
9435: EMPTY
9436: LIST
9437: LIST
9438: PPUSH
9439: CALL_OW 69
9443: ST_TO_ADDR
// if not un then
9444: LD_VAR 0 2
9448: NOT
9449: IFFALSE 9453
// exit ;
9451: GO 9538
// un := un [ 1 ] ;
9453: LD_ADDR_VAR 0 2
9457: PUSH
9458: LD_VAR 0 2
9462: PUSH
9463: LD_INT 1
9465: ARRAY
9466: ST_TO_ADDR
// if IsInUnit ( un ) then
9467: LD_VAR 0 2
9471: PPUSH
9472: CALL_OW 310
9476: IFFALSE 9487
// ComExitBuilding ( un ) ;
9478: LD_VAR 0 2
9482: PPUSH
9483: CALL_OW 122
// AddComCollect ( un , artifact [ 1 ] , artifact [ 2 ] ) ;
9487: LD_VAR 0 2
9491: PPUSH
9492: LD_VAR 0 1
9496: PUSH
9497: LD_INT 1
9499: ARRAY
9500: PPUSH
9501: LD_VAR 0 1
9505: PUSH
9506: LD_INT 2
9508: ARRAY
9509: PPUSH
9510: CALL_OW 177
// AddComMoveXY ( un , 207 , 123 ) ;
9514: LD_VAR 0 2
9518: PPUSH
9519: LD_INT 207
9521: PPUSH
9522: LD_INT 123
9524: PPUSH
9525: CALL_OW 171
// AddComUnload ( un ) ;
9529: LD_VAR 0 2
9533: PPUSH
9534: CALL_OW 219
// end ; end ;
9538: PPOPN 2
9540: END
// every 0 0$02 trigger FilterAllUnits ( [ f_side , 8 ] ) > 0 do var un , i , tmp , veh , b , p , cr , l_depot , l_factory , l_lab , l_towers , l_sib , l_sci , l_mech , l_sold , l_eng , l_cargo ;
9541: LD_INT 22
9543: PUSH
9544: LD_INT 8
9546: PUSH
9547: EMPTY
9548: LIST
9549: LIST
9550: PPUSH
9551: CALL_OW 69
9555: PUSH
9556: LD_INT 0
9558: GREATER
9559: IFFALSE 11145
9561: GO 9563
9563: DISABLE
9564: LD_INT 0
9566: PPUSH
9567: PPUSH
9568: PPUSH
9569: PPUSH
9570: PPUSH
9571: PPUSH
9572: PPUSH
9573: PPUSH
9574: PPUSH
9575: PPUSH
9576: PPUSH
9577: PPUSH
9578: PPUSH
9579: PPUSH
9580: PPUSH
9581: PPUSH
9582: PPUSH
// begin enable ;
9583: ENABLE
// l_depot := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
9584: LD_ADDR_VAR 0 8
9588: PUSH
9589: LD_INT 22
9591: PUSH
9592: LD_INT 8
9594: PUSH
9595: EMPTY
9596: LIST
9597: LIST
9598: PUSH
9599: LD_INT 30
9601: PUSH
9602: LD_INT 1
9604: PUSH
9605: EMPTY
9606: LIST
9607: LIST
9608: PUSH
9609: EMPTY
9610: LIST
9611: LIST
9612: PPUSH
9613: CALL_OW 69
9617: PUSH
9618: LD_INT 1
9620: ARRAY
9621: ST_TO_ADDR
// l_factory := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
9622: LD_ADDR_VAR 0 9
9626: PUSH
9627: LD_INT 22
9629: PUSH
9630: LD_INT 8
9632: PUSH
9633: EMPTY
9634: LIST
9635: LIST
9636: PUSH
9637: LD_INT 30
9639: PUSH
9640: LD_INT 3
9642: PUSH
9643: EMPTY
9644: LIST
9645: LIST
9646: PUSH
9647: EMPTY
9648: LIST
9649: LIST
9650: PPUSH
9651: CALL_OW 69
9655: PUSH
9656: LD_INT 1
9658: ARRAY
9659: ST_TO_ADDR
// l_lab := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ;
9660: LD_ADDR_VAR 0 10
9664: PUSH
9665: LD_INT 22
9667: PUSH
9668: LD_INT 8
9670: PUSH
9671: EMPTY
9672: LIST
9673: LIST
9674: PUSH
9675: LD_INT 2
9677: PUSH
9678: LD_INT 30
9680: PUSH
9681: LD_INT 6
9683: PUSH
9684: EMPTY
9685: LIST
9686: LIST
9687: PUSH
9688: LD_INT 30
9690: PUSH
9691: LD_INT 8
9693: PUSH
9694: EMPTY
9695: LIST
9696: LIST
9697: PUSH
9698: EMPTY
9699: LIST
9700: LIST
9701: LIST
9702: PUSH
9703: EMPTY
9704: LIST
9705: LIST
9706: PPUSH
9707: CALL_OW 69
9711: PUSH
9712: LD_INT 1
9714: ARRAY
9715: ST_TO_ADDR
// l_towers := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) ;
9716: LD_ADDR_VAR 0 11
9720: PUSH
9721: LD_INT 22
9723: PUSH
9724: LD_INT 8
9726: PUSH
9727: EMPTY
9728: LIST
9729: LIST
9730: PUSH
9731: LD_INT 30
9733: PUSH
9734: LD_INT 32
9736: PUSH
9737: EMPTY
9738: LIST
9739: LIST
9740: PUSH
9741: EMPTY
9742: LIST
9743: LIST
9744: PPUSH
9745: CALL_OW 69
9749: ST_TO_ADDR
// l_eng := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 2 ] ] ) ;
9750: LD_ADDR_VAR 0 16
9754: PUSH
9755: LD_INT 22
9757: PUSH
9758: LD_INT 8
9760: PUSH
9761: EMPTY
9762: LIST
9763: LIST
9764: PUSH
9765: LD_INT 25
9767: PUSH
9768: LD_INT 2
9770: PUSH
9771: EMPTY
9772: LIST
9773: LIST
9774: PUSH
9775: EMPTY
9776: LIST
9777: LIST
9778: PPUSH
9779: CALL_OW 69
9783: ST_TO_ADDR
// l_sold := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 1 ] ] ) ;
9784: LD_ADDR_VAR 0 15
9788: PUSH
9789: LD_INT 22
9791: PUSH
9792: LD_INT 8
9794: PUSH
9795: EMPTY
9796: LIST
9797: LIST
9798: PUSH
9799: LD_INT 25
9801: PUSH
9802: LD_INT 1
9804: PUSH
9805: EMPTY
9806: LIST
9807: LIST
9808: PUSH
9809: EMPTY
9810: LIST
9811: LIST
9812: PPUSH
9813: CALL_OW 69
9817: ST_TO_ADDR
// l_mech := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 3 ] ] ) ;
9818: LD_ADDR_VAR 0 14
9822: PUSH
9823: LD_INT 22
9825: PUSH
9826: LD_INT 8
9828: PUSH
9829: EMPTY
9830: LIST
9831: LIST
9832: PUSH
9833: LD_INT 25
9835: PUSH
9836: LD_INT 3
9838: PUSH
9839: EMPTY
9840: LIST
9841: LIST
9842: PUSH
9843: EMPTY
9844: LIST
9845: LIST
9846: PPUSH
9847: CALL_OW 69
9851: ST_TO_ADDR
// l_sci := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 4 ] ] ) ;
9852: LD_ADDR_VAR 0 13
9856: PUSH
9857: LD_INT 22
9859: PUSH
9860: LD_INT 8
9862: PUSH
9863: EMPTY
9864: LIST
9865: LIST
9866: PUSH
9867: LD_INT 25
9869: PUSH
9870: LD_INT 4
9872: PUSH
9873: EMPTY
9874: LIST
9875: LIST
9876: PUSH
9877: EMPTY
9878: LIST
9879: LIST
9880: PPUSH
9881: CALL_OW 69
9885: ST_TO_ADDR
// if l_eng then
9886: LD_VAR 0 16
9890: IFFALSE 10308
// begin b := FilterUnitsInArea ( legion_base_area , [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) ;
9892: LD_ADDR_VAR 0 5
9896: PUSH
9897: LD_INT 25
9899: PPUSH
9900: LD_INT 22
9902: PUSH
9903: LD_INT 8
9905: PUSH
9906: EMPTY
9907: LIST
9908: LIST
9909: PUSH
9910: LD_INT 21
9912: PUSH
9913: LD_INT 3
9915: PUSH
9916: EMPTY
9917: LIST
9918: LIST
9919: PUSH
9920: EMPTY
9921: LIST
9922: LIST
9923: PPUSH
9924: CALL_OW 70
9928: ST_TO_ADDR
// if UnitFilter ( b , [ f_not , [ f_lives , 1000 ] ] ) > 0 then
9929: LD_VAR 0 5
9933: PPUSH
9934: LD_INT 3
9936: PUSH
9937: LD_INT 24
9939: PUSH
9940: LD_INT 1000
9942: PUSH
9943: EMPTY
9944: LIST
9945: LIST
9946: PUSH
9947: EMPTY
9948: LIST
9949: LIST
9950: PPUSH
9951: CALL_OW 72
9955: PUSH
9956: LD_INT 0
9958: GREATER
9959: IFFALSE 10093
// begin tmp := UnitFilter ( b , [ f_not , [ f_lives , 1000 ] ] ) ;
9961: LD_ADDR_VAR 0 3
9965: PUSH
9966: LD_VAR 0 5
9970: PPUSH
9971: LD_INT 3
9973: PUSH
9974: LD_INT 24
9976: PUSH
9977: LD_INT 1000
9979: PUSH
9980: EMPTY
9981: LIST
9982: LIST
9983: PUSH
9984: EMPTY
9985: LIST
9986: LIST
9987: PPUSH
9988: CALL_OW 72
9992: ST_TO_ADDR
// for i = 1 to l_eng do
9993: LD_ADDR_VAR 0 2
9997: PUSH
9998: DOUBLE
9999: LD_INT 1
10001: DEC
10002: ST_TO_ADDR
10003: LD_VAR 0 16
10007: PUSH
10008: FOR_TO
10009: IFFALSE 10089
// if IsInUnit ( l_eng [ i ] ) then
10011: LD_VAR 0 16
10015: PUSH
10016: LD_VAR 0 2
10020: ARRAY
10021: PPUSH
10022: CALL_OW 310
10026: IFFALSE 10045
// ComExitBuilding ( l_eng [ i ] ) else
10028: LD_VAR 0 16
10032: PUSH
10033: LD_VAR 0 2
10037: ARRAY
10038: PPUSH
10039: CALL_OW 122
10043: GO 10087
// if not HasTask ( l_eng [ i ] ) then
10045: LD_VAR 0 16
10049: PUSH
10050: LD_VAR 0 2
10054: ARRAY
10055: PPUSH
10056: CALL_OW 314
10060: NOT
10061: IFFALSE 10087
// ComRepairBuilding ( l_eng [ i ] , tmp [ 1 ] ) ;
10063: LD_VAR 0 16
10067: PUSH
10068: LD_VAR 0 2
10072: ARRAY
10073: PPUSH
10074: LD_VAR 0 3
10078: PUSH
10079: LD_INT 1
10081: ARRAY
10082: PPUSH
10083: CALL_OW 130
10087: GO 10008
10089: POP
10090: POP
// end else
10091: GO 10308
// begin if legion_blist > 0 then
10093: LD_EXP 40
10097: PUSH
10098: LD_INT 0
10100: GREATER
10101: IFFALSE 10230
// begin for i = 1 to l_eng do
10103: LD_ADDR_VAR 0 2
10107: PUSH
10108: DOUBLE
10109: LD_INT 1
10111: DEC
10112: ST_TO_ADDR
10113: LD_VAR 0 16
10117: PUSH
10118: FOR_TO
10119: IFFALSE 10226
// if IsInUnit ( l_eng [ i ] ) then
10121: LD_VAR 0 16
10125: PUSH
10126: LD_VAR 0 2
10130: ARRAY
10131: PPUSH
10132: CALL_OW 310
10136: IFFALSE 10155
// ComExitBuilding ( l_eng [ i ] ) else
10138: LD_VAR 0 16
10142: PUSH
10143: LD_VAR 0 2
10147: ARRAY
10148: PPUSH
10149: CALL_OW 122
10153: GO 10224
// if not HasTask ( l_eng [ i ] ) then
10155: LD_VAR 0 16
10159: PUSH
10160: LD_VAR 0 2
10164: ARRAY
10165: PPUSH
10166: CALL_OW 314
10170: NOT
10171: IFFALSE 10224
// ComBuild ( l_eng [ i ] , legion_blist [ 1 ] , legion_blist [ 2 ] , legion_blist [ 3 ] , legion_blist [ 4 ] ) ;
10173: LD_VAR 0 16
10177: PUSH
10178: LD_VAR 0 2
10182: ARRAY
10183: PPUSH
10184: LD_EXP 40
10188: PUSH
10189: LD_INT 1
10191: ARRAY
10192: PPUSH
10193: LD_EXP 40
10197: PUSH
10198: LD_INT 2
10200: ARRAY
10201: PPUSH
10202: LD_EXP 40
10206: PUSH
10207: LD_INT 3
10209: ARRAY
10210: PPUSH
10211: LD_EXP 40
10215: PUSH
10216: LD_INT 4
10218: ARRAY
10219: PPUSH
10220: CALL_OW 145
10224: GO 10118
10226: POP
10227: POP
// end else
10228: GO 10308
// for i = 1 to l_eng do
10230: LD_ADDR_VAR 0 2
10234: PUSH
10235: DOUBLE
10236: LD_INT 1
10238: DEC
10239: ST_TO_ADDR
10240: LD_VAR 0 16
10244: PUSH
10245: FOR_TO
10246: IFFALSE 10306
// if not IsInUnit ( l_eng [ i ] ) and not HasTask ( l_eng [ i ] ) then
10248: LD_VAR 0 16
10252: PUSH
10253: LD_VAR 0 2
10257: ARRAY
10258: PPUSH
10259: CALL_OW 310
10263: NOT
10264: PUSH
10265: LD_VAR 0 16
10269: PUSH
10270: LD_VAR 0 2
10274: ARRAY
10275: PPUSH
10276: CALL_OW 314
10280: NOT
10281: AND
10282: IFFALSE 10304
// ComEnterUnit ( l_eng [ i ] , l_depot ) ;
10284: LD_VAR 0 16
10288: PUSH
10289: LD_VAR 0 2
10293: ARRAY
10294: PPUSH
10295: LD_VAR 0 8
10299: PPUSH
10300: CALL_OW 120
10304: GO 10245
10306: POP
10307: POP
// end ; end ; if l_factory then
10308: LD_VAR 0 9
10312: IFFALSE 10712
// begin if FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) > 0 then
10314: LD_INT 22
10316: PUSH
10317: LD_INT 8
10319: PUSH
10320: EMPTY
10321: LIST
10322: LIST
10323: PUSH
10324: LD_INT 33
10326: PUSH
10327: LD_INT 2
10329: PUSH
10330: EMPTY
10331: LIST
10332: LIST
10333: PUSH
10334: LD_INT 3
10336: PUSH
10337: LD_INT 61
10339: PUSH
10340: EMPTY
10341: LIST
10342: PUSH
10343: EMPTY
10344: LIST
10345: LIST
10346: PUSH
10347: EMPTY
10348: LIST
10349: LIST
10350: LIST
10351: PPUSH
10352: CALL_OW 69
10356: PUSH
10357: LD_INT 0
10359: GREATER
10360: PUSH
10361: LD_INT 22
10363: PUSH
10364: LD_INT 8
10366: PUSH
10367: EMPTY
10368: LIST
10369: LIST
10370: PUSH
10371: LD_INT 34
10373: PUSH
10374: LD_INT 31
10376: PUSH
10377: EMPTY
10378: LIST
10379: LIST
10380: PUSH
10381: EMPTY
10382: LIST
10383: LIST
10384: PPUSH
10385: CALL_OW 69
10389: PUSH
10390: LD_INT 0
10392: GREATER
10393: AND
10394: IFFALSE 10514
// ComLinkTo ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) [ 1 ] , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) [ Rand ( 1 , FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) ) ] ) ;
10396: LD_INT 22
10398: PUSH
10399: LD_INT 8
10401: PUSH
10402: EMPTY
10403: LIST
10404: LIST
10405: PUSH
10406: LD_INT 33
10408: PUSH
10409: LD_INT 2
10411: PUSH
10412: EMPTY
10413: LIST
10414: LIST
10415: PUSH
10416: LD_INT 3
10418: PUSH
10419: LD_INT 61
10421: PUSH
10422: EMPTY
10423: LIST
10424: PUSH
10425: EMPTY
10426: LIST
10427: LIST
10428: PUSH
10429: EMPTY
10430: LIST
10431: LIST
10432: LIST
10433: PPUSH
10434: CALL_OW 69
10438: PUSH
10439: LD_INT 1
10441: ARRAY
10442: PPUSH
10443: LD_INT 22
10445: PUSH
10446: LD_INT 8
10448: PUSH
10449: EMPTY
10450: LIST
10451: LIST
10452: PUSH
10453: LD_INT 34
10455: PUSH
10456: LD_INT 31
10458: PUSH
10459: EMPTY
10460: LIST
10461: LIST
10462: PUSH
10463: EMPTY
10464: LIST
10465: LIST
10466: PPUSH
10467: CALL_OW 69
10471: PUSH
10472: LD_INT 1
10474: PPUSH
10475: LD_INT 22
10477: PUSH
10478: LD_INT 8
10480: PUSH
10481: EMPTY
10482: LIST
10483: LIST
10484: PUSH
10485: LD_INT 34
10487: PUSH
10488: LD_INT 31
10490: PUSH
10491: EMPTY
10492: LIST
10493: LIST
10494: PUSH
10495: EMPTY
10496: LIST
10497: LIST
10498: PPUSH
10499: CALL_OW 69
10503: PPUSH
10504: CALL_OW 12
10508: ARRAY
10509: PPUSH
10510: CALL_OW 135
// if legion_vlist > 0 and BuildingStatus ( l_factory ) = bs_idle then
10514: LD_EXP 41
10518: PUSH
10519: LD_INT 0
10521: GREATER
10522: PUSH
10523: LD_VAR 0 9
10527: PPUSH
10528: CALL_OW 461
10532: PUSH
10533: LD_INT 2
10535: EQUAL
10536: AND
10537: IFFALSE 10622
// begin ComConstruct ( l_factory , legion_vlist [ 1 ] , legion_vlist [ 2 ] , legion_vlist [ 3 ] , legion_vlist [ 4 ] ) ;
10539: LD_VAR 0 9
10543: PPUSH
10544: LD_EXP 41
10548: PUSH
10549: LD_INT 1
10551: ARRAY
10552: PPUSH
10553: LD_EXP 41
10557: PUSH
10558: LD_INT 2
10560: ARRAY
10561: PPUSH
10562: LD_EXP 41
10566: PUSH
10567: LD_INT 3
10569: ARRAY
10570: PPUSH
10571: LD_EXP 41
10575: PUSH
10576: LD_INT 4
10578: ARRAY
10579: PPUSH
10580: CALL_OW 125
// for i = 1 to 4 do
10584: LD_ADDR_VAR 0 2
10588: PUSH
10589: DOUBLE
10590: LD_INT 1
10592: DEC
10593: ST_TO_ADDR
10594: LD_INT 4
10596: PUSH
10597: FOR_TO
10598: IFFALSE 10620
// legion_vlist := Delete ( legion_vlist , 1 ) ;
10600: LD_ADDR_EXP 41
10604: PUSH
10605: LD_EXP 41
10609: PPUSH
10610: LD_INT 1
10612: PPUSH
10613: CALL_OW 3
10617: ST_TO_ADDR
10618: GO 10597
10620: POP
10621: POP
// end ; if UnitFilter ( l_towers , [ f_bweapon , 0 ] ) > 0 and BuildingStatus ( l_factory ) = bs_idle then
10622: LD_VAR 0 11
10626: PPUSH
10627: LD_INT 35
10629: PUSH
10630: LD_INT 0
10632: PUSH
10633: EMPTY
10634: LIST
10635: LIST
10636: PPUSH
10637: CALL_OW 72
10641: PUSH
10642: LD_INT 0
10644: GREATER
10645: PUSH
10646: LD_VAR 0 9
10650: PPUSH
10651: CALL_OW 461
10655: PUSH
10656: LD_INT 2
10658: EQUAL
10659: AND
10660: IFFALSE 10712
// ComPlaceWeapon ( UnitFilter ( l_towers , [ f_bweapon , 0 ] ) [ 1 ] , [ ar_rocket_launcher , ar_gun ] [ Rand ( 1 , 2 ) ] ) ;
10662: LD_VAR 0 11
10666: PPUSH
10667: LD_INT 35
10669: PUSH
10670: LD_INT 0
10672: PUSH
10673: EMPTY
10674: LIST
10675: LIST
10676: PPUSH
10677: CALL_OW 72
10681: PUSH
10682: LD_INT 1
10684: ARRAY
10685: PPUSH
10686: LD_INT 28
10688: PUSH
10689: LD_INT 27
10691: PUSH
10692: EMPTY
10693: LIST
10694: LIST
10695: PUSH
10696: LD_INT 1
10698: PPUSH
10699: LD_INT 2
10701: PPUSH
10702: CALL_OW 12
10706: ARRAY
10707: PPUSH
10708: CALL_OW 148
// end ; if legion_enemy > 0 then
10712: LD_EXP 42
10716: PUSH
10717: LD_INT 0
10719: GREATER
10720: IFFALSE 11003
// begin if tick mod 11 11$00 = 0 then
10722: LD_OWVAR 1
10726: PUSH
10727: LD_INT 23100
10729: MOD
10730: PUSH
10731: LD_INT 0
10733: EQUAL
10734: IFFALSE 10984
// begin legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
10736: LD_ADDR_EXP 41
10740: PUSH
10741: LD_EXP 41
10745: PUSH
10746: LD_INT 13
10748: PUSH
10749: LD_INT 1
10751: PUSH
10752: LD_INT 2
10754: PUSH
10755: EMPTY
10756: LIST
10757: LIST
10758: LIST
10759: ADD
10760: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
10761: LD_ADDR_EXP 41
10765: PUSH
10766: LD_EXP 41
10770: PUSH
10771: LD_INT 28
10773: PUSH
10774: LD_INT 27
10776: PUSH
10777: LD_INT 29
10779: PUSH
10780: EMPTY
10781: LIST
10782: LIST
10783: LIST
10784: PUSH
10785: LD_INT 1
10787: PPUSH
10788: LD_INT 3
10790: PPUSH
10791: CALL_OW 12
10795: ARRAY
10796: ADD
10797: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
10798: LD_ADDR_EXP 41
10802: PUSH
10803: LD_EXP 41
10807: PUSH
10808: LD_INT 13
10810: PUSH
10811: LD_INT 1
10813: PUSH
10814: LD_INT 2
10816: PUSH
10817: EMPTY
10818: LIST
10819: LIST
10820: LIST
10821: ADD
10822: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
10823: LD_ADDR_EXP 41
10827: PUSH
10828: LD_EXP 41
10832: PUSH
10833: LD_INT 28
10835: PUSH
10836: LD_INT 27
10838: PUSH
10839: LD_INT 29
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: LIST
10846: PUSH
10847: LD_INT 1
10849: PPUSH
10850: LD_INT 3
10852: PPUSH
10853: CALL_OW 12
10857: ARRAY
10858: ADD
10859: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
10860: LD_ADDR_EXP 41
10864: PUSH
10865: LD_EXP 41
10869: PUSH
10870: LD_INT 13
10872: PUSH
10873: LD_INT 1
10875: PUSH
10876: LD_INT 2
10878: PUSH
10879: EMPTY
10880: LIST
10881: LIST
10882: LIST
10883: ADD
10884: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_mortar , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
10885: LD_ADDR_EXP 41
10889: PUSH
10890: LD_EXP 41
10894: PUSH
10895: LD_INT 28
10897: PUSH
10898: LD_INT 92
10900: PUSH
10901: LD_INT 29
10903: PUSH
10904: EMPTY
10905: LIST
10906: LIST
10907: LIST
10908: PUSH
10909: LD_INT 1
10911: PPUSH
10912: LD_INT 3
10914: PPUSH
10915: CALL_OW 12
10919: ARRAY
10920: ADD
10921: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_medium_trike , engine_combustion , control_remote ] ;
10922: LD_ADDR_EXP 41
10926: PUSH
10927: LD_EXP 41
10931: PUSH
10932: LD_INT 13
10934: PUSH
10935: LD_INT 1
10937: PUSH
10938: LD_INT 2
10940: PUSH
10941: EMPTY
10942: LIST
10943: LIST
10944: LIST
10945: ADD
10946: ST_TO_ADDR
// legion_vlist := legion_vlist ^ [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ Rand ( 1 , 3 ) ] ;
10947: LD_ADDR_EXP 41
10951: PUSH
10952: LD_EXP 41
10956: PUSH
10957: LD_INT 28
10959: PUSH
10960: LD_INT 27
10962: PUSH
10963: LD_INT 29
10965: PUSH
10966: EMPTY
10967: LIST
10968: LIST
10969: LIST
10970: PUSH
10971: LD_INT 1
10973: PPUSH
10974: LD_INT 3
10976: PPUSH
10977: CALL_OW 12
10981: ARRAY
10982: ADD
10983: ST_TO_ADDR
// end ; if legion_force >= 8 then
10984: LD_EXP 37
10988: PUSH
10989: LD_INT 8
10991: GREATEREQUAL
10992: IFFALSE 11003
// RaiseSailEvent ( event_legion_attack ) ;
10994: LD_EXP 21
10998: PPUSH
10999: CALL_OW 427
// end ; if FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_cargo_bay ] ] ) then
11003: LD_INT 22
11005: PUSH
11006: LD_INT 8
11008: PUSH
11009: EMPTY
11010: LIST
11011: LIST
11012: PUSH
11013: LD_INT 34
11015: PUSH
11016: LD_INT 32
11018: PUSH
11019: EMPTY
11020: LIST
11021: LIST
11022: PUSH
11023: EMPTY
11024: LIST
11025: LIST
11026: PPUSH
11027: CALL_OW 69
11031: IFFALSE 11145
// begin if l_cargo = false then
11033: LD_VAR 0 17
11037: PUSH
11038: LD_INT 0
11040: EQUAL
11041: IFFALSE 11077
// l_cargo := FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_cargo_bay ] ] ) ;
11043: LD_ADDR_VAR 0 17
11047: PUSH
11048: LD_INT 22
11050: PUSH
11051: LD_INT 8
11053: PUSH
11054: EMPTY
11055: LIST
11056: LIST
11057: PUSH
11058: LD_INT 34
11060: PUSH
11061: LD_INT 32
11063: PUSH
11064: EMPTY
11065: LIST
11066: LIST
11067: PUSH
11068: EMPTY
11069: LIST
11070: LIST
11071: PPUSH
11072: CALL_OW 69
11076: ST_TO_ADDR
// if l_cargo then
11077: LD_VAR 0 17
11081: IFFALSE 11145
// begin cr := GetListOfCratesInArea ( legion_crates ) ;
11083: LD_ADDR_VAR 0 7
11087: PUSH
11088: LD_INT 14
11090: PPUSH
11091: CALL_OW 435
11095: ST_TO_ADDR
// if cr > 0 then
11096: LD_VAR 0 7
11100: PUSH
11101: LD_INT 0
11103: GREATER
11104: IFFALSE 11145
// if not HasTask ( l_cargo ) then
11106: LD_VAR 0 17
11110: PPUSH
11111: CALL_OW 314
11115: NOT
11116: IFFALSE 11145
// ComCollect ( l_cargo , cr [ 1 ] , cr [ 2 ] ) ;
11118: LD_VAR 0 17
11122: PPUSH
11123: LD_VAR 0 7
11127: PUSH
11128: LD_INT 1
11130: ARRAY
11131: PPUSH
11132: LD_VAR 0 7
11136: PUSH
11137: LD_INT 2
11139: ARRAY
11140: PPUSH
11141: CALL_OW 117
// end ; end ; end ;
11145: PPOPN 17
11147: END
// every 9 9$00 trigger difficulty > 1 do var i , sci , sib , p ;
11148: LD_OWVAR 67
11152: PUSH
11153: LD_INT 1
11155: GREATER
11156: IFFALSE 11361
11158: GO 11160
11160: DISABLE
11161: LD_INT 0
11163: PPUSH
11164: PPUSH
11165: PPUSH
11166: PPUSH
// begin Wait ( Rand ( 0 0$01 , 6 6$01 ) ) ;
11167: LD_INT 35
11169: PPUSH
11170: LD_INT 12635
11172: PPUSH
11173: CALL_OW 12
11177: PPUSH
11178: CALL_OW 67
// sci := FilterAllUnits ( [ [ f_side , 8 ] , [ f_class , 4 ] ] ) ;
11182: LD_ADDR_VAR 0 2
11186: PUSH
11187: LD_INT 22
11189: PUSH
11190: LD_INT 8
11192: PUSH
11193: EMPTY
11194: LIST
11195: LIST
11196: PUSH
11197: LD_INT 25
11199: PUSH
11200: LD_INT 4
11202: PUSH
11203: EMPTY
11204: LIST
11205: LIST
11206: PUSH
11207: EMPTY
11208: LIST
11209: LIST
11210: PPUSH
11211: CALL_OW 69
11215: ST_TO_ADDR
// p := 1 ;
11216: LD_ADDR_VAR 0 4
11220: PUSH
11221: LD_INT 1
11223: ST_TO_ADDR
// sib := [ 116 , 139 , 69 , 13 ] ;
11224: LD_ADDR_VAR 0 3
11228: PUSH
11229: LD_INT 116
11231: PUSH
11232: LD_INT 139
11234: PUSH
11235: LD_INT 69
11237: PUSH
11238: LD_INT 13
11240: PUSH
11241: EMPTY
11242: LIST
11243: LIST
11244: LIST
11245: LIST
11246: ST_TO_ADDR
// for i = 1 to 2 do
11247: LD_ADDR_VAR 0 1
11251: PUSH
11252: DOUBLE
11253: LD_INT 1
11255: DEC
11256: ST_TO_ADDR
11257: LD_INT 2
11259: PUSH
11260: FOR_TO
11261: IFFALSE 11359
// begin if IsInUnit ( sci [ i ] ) then
11263: LD_VAR 0 2
11267: PUSH
11268: LD_VAR 0 1
11272: ARRAY
11273: PPUSH
11274: CALL_OW 310
11278: IFFALSE 11295
// ComExitBuilding ( sci [ i ] ) ;
11280: LD_VAR 0 2
11284: PUSH
11285: LD_VAR 0 1
11289: ARRAY
11290: PPUSH
11291: CALL_OW 122
// Wait ( 0 0$03 ) ;
11295: LD_INT 105
11297: PPUSH
11298: CALL_OW 67
// ComContaminate ( sci [ i ] , sib [ p ] , sib [ p + 1 ] ) ;
11302: LD_VAR 0 2
11306: PUSH
11307: LD_VAR 0 1
11311: ARRAY
11312: PPUSH
11313: LD_VAR 0 3
11317: PUSH
11318: LD_VAR 0 4
11322: ARRAY
11323: PPUSH
11324: LD_VAR 0 3
11328: PUSH
11329: LD_VAR 0 4
11333: PUSH
11334: LD_INT 1
11336: PLUS
11337: ARRAY
11338: PPUSH
11339: CALL_OW 158
// p := p + 2 ;
11343: LD_ADDR_VAR 0 4
11347: PUSH
11348: LD_VAR 0 4
11352: PUSH
11353: LD_INT 2
11355: PLUS
11356: ST_TO_ADDR
// end ;
11357: GO 11260
11359: POP
11360: POP
// end ;
11361: PPOPN 4
11363: END
// every 3 3$30 trigger GetListOfCratesInArea ( legion_crates ) < 20 do
11364: LD_INT 14
11366: PPUSH
11367: CALL_OW 435
11371: PUSH
11372: LD_INT 20
11374: LESS
11375: IFFALSE 11402
11377: GO 11379
11379: DISABLE
// begin enable ;
11380: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , legion_crates , true ) ;
11381: LD_INT 1
11383: PPUSH
11384: LD_INT 5
11386: PPUSH
11387: CALL_OW 12
11391: PPUSH
11392: LD_INT 14
11394: PPUSH
11395: LD_INT 1
11397: PPUSH
11398: CALL_OW 55
// end ;
11402: END
// export function LegionAttack ( ) ; var path , units ; begin
11403: LD_INT 0
11405: PPUSH
11406: PPUSH
11407: PPUSH
// units := legion_force ;
11408: LD_ADDR_VAR 0 3
11412: PUSH
11413: LD_EXP 37
11417: ST_TO_ADDR
// legion_force := [ ] ;
11418: LD_ADDR_EXP 37
11422: PUSH
11423: EMPTY
11424: ST_TO_ADDR
// case legion_enemy of 1 :
11425: LD_EXP 42
11429: PUSH
11430: LD_INT 1
11432: DOUBLE
11433: EQUAL
11434: IFTRUE 11438
11436: GO 11481
11438: POP
// path := [ [ 174 , 135 ] , [ 153 , 146 ] , [ 118 , 122 ] ] ; 2 :
11439: LD_ADDR_VAR 0 2
11443: PUSH
11444: LD_INT 174
11446: PUSH
11447: LD_INT 135
11449: PUSH
11450: EMPTY
11451: LIST
11452: LIST
11453: PUSH
11454: LD_INT 153
11456: PUSH
11457: LD_INT 146
11459: PUSH
11460: EMPTY
11461: LIST
11462: LIST
11463: PUSH
11464: LD_INT 118
11466: PUSH
11467: LD_INT 122
11469: PUSH
11470: EMPTY
11471: LIST
11472: LIST
11473: PUSH
11474: EMPTY
11475: LIST
11476: LIST
11477: LIST
11478: ST_TO_ADDR
11479: GO 11584
11481: LD_INT 2
11483: DOUBLE
11484: EQUAL
11485: IFTRUE 11489
11487: GO 11532
11489: POP
// path := [ [ 164 , 73 ] , [ 130 , 48 ] , [ 96 , 48 ] ] ; 7 :
11490: LD_ADDR_VAR 0 2
11494: PUSH
11495: LD_INT 164
11497: PUSH
11498: LD_INT 73
11500: PUSH
11501: EMPTY
11502: LIST
11503: LIST
11504: PUSH
11505: LD_INT 130
11507: PUSH
11508: LD_INT 48
11510: PUSH
11511: EMPTY
11512: LIST
11513: LIST
11514: PUSH
11515: LD_INT 96
11517: PUSH
11518: LD_INT 48
11520: PUSH
11521: EMPTY
11522: LIST
11523: LIST
11524: PUSH
11525: EMPTY
11526: LIST
11527: LIST
11528: LIST
11529: ST_TO_ADDR
11530: GO 11584
11532: LD_INT 7
11534: DOUBLE
11535: EQUAL
11536: IFTRUE 11540
11538: GO 11583
11540: POP
// path := [ [ 174 , 135 ] , [ 153 , 146 ] , [ 118 , 122 ] ] ; end ;
11541: LD_ADDR_VAR 0 2
11545: PUSH
11546: LD_INT 174
11548: PUSH
11549: LD_INT 135
11551: PUSH
11552: EMPTY
11553: LIST
11554: LIST
11555: PUSH
11556: LD_INT 153
11558: PUSH
11559: LD_INT 146
11561: PUSH
11562: EMPTY
11563: LIST
11564: LIST
11565: PUSH
11566: LD_INT 118
11568: PUSH
11569: LD_INT 122
11571: PUSH
11572: EMPTY
11573: LIST
11574: LIST
11575: PUSH
11576: EMPTY
11577: LIST
11578: LIST
11579: LIST
11580: ST_TO_ADDR
11581: GO 11584
11583: POP
// repeat wait ( 0 0$1 ) ;
11584: LD_INT 35
11586: PPUSH
11587: CALL_OW 67
// until not AgressiveMove ( units , path ) ;
11591: LD_VAR 0 3
11595: PPUSH
11596: LD_VAR 0 2
11600: PPUSH
11601: CALL 80789 0 2
11605: NOT
11606: IFFALSE 11584
// end ; end_of_file
11608: LD_VAR 0 1
11612: RET
// export function Action ; var un , gamemode , speaker ; begin
11613: LD_INT 0
11615: PPUSH
11616: PPUSH
11617: PPUSH
11618: PPUSH
// if debug then
11619: LD_EXP 15
11623: IFFALSE 11650
// begin Difficulty := 2 ;
11625: LD_ADDR_OWVAR 67
11629: PUSH
11630: LD_INT 2
11632: ST_TO_ADDR
// gamemode := 3 ;
11633: LD_ADDR_VAR 0 3
11637: PUSH
11638: LD_INT 3
11640: ST_TO_ADDR
// FogOff ( 7 ) ;
11641: LD_INT 7
11643: PPUSH
11644: CALL_OW 344
// end else
11648: GO 11676
// begin Difficulty := GetMultiplayerSetting ( 0 ) ;
11650: LD_ADDR_OWVAR 67
11654: PUSH
11655: LD_INT 0
11657: PPUSH
11658: CALL_OW 426
11662: ST_TO_ADDR
// gamemode := GetMultiplayerSetting ( 1 ) ;
11663: LD_ADDR_VAR 0 3
11667: PUSH
11668: LD_INT 1
11670: PPUSH
11671: CALL_OW 426
11675: ST_TO_ADDR
// end ; if gamemode = 1 then
11676: LD_VAR 0 3
11680: PUSH
11681: LD_INT 1
11683: EQUAL
11684: IFFALSE 11708
// begin your_side := 1 ;
11686: LD_ADDR_OWVAR 2
11690: PUSH
11691: LD_INT 1
11693: ST_TO_ADDR
// legion_enemy := 1 ;
11694: LD_ADDR_EXP 42
11698: PUSH
11699: LD_INT 1
11701: ST_TO_ADDR
// PrepareAmerican ;
11702: CALL 261 0 0
// end else
11706: GO 11760
// if gamemode = 2 then
11708: LD_VAR 0 3
11712: PUSH
11713: LD_INT 2
11715: EQUAL
11716: IFFALSE 11740
// begin your_side := 2 ;
11718: LD_ADDR_OWVAR 2
11722: PUSH
11723: LD_INT 2
11725: ST_TO_ADDR
// legion_enemy := 2 ;
11726: LD_ADDR_EXP 42
11730: PUSH
11731: LD_INT 2
11733: ST_TO_ADDR
// PrepareArabian ;
11734: CALL 19086 0 0
// end else
11738: GO 11760
// begin your_side := 7 ;
11740: LD_ADDR_OWVAR 2
11744: PUSH
11745: LD_INT 7
11747: ST_TO_ADDR
// legion_enemy := 7 ;
11748: LD_ADDR_EXP 42
11752: PUSH
11753: LD_INT 7
11755: ST_TO_ADDR
// PrepareAlliance ;
11756: CALL 16230 0 0
// end ; if your_side = 1 then
11760: LD_OWVAR 2
11764: PUSH
11765: LD_INT 1
11767: EQUAL
11768: IFFALSE 12352
// begin Query ( QVul4 ) ;
11770: LD_STRING QVul4
11772: PPUSH
11773: CALL_OW 97
// InGameOn ;
11777: CALL_OW 8
// PlaceSeeing ( 8 , 5 , 1 , 12 ) ;
11781: LD_INT 8
11783: PPUSH
11784: LD_INT 5
11786: PPUSH
11787: LD_INT 1
11789: PPUSH
11790: LD_INT 12
11792: PPUSH
11793: CALL_OW 330
// RemoveSeeing ( 8 , 5 , 1 ) ;
11797: LD_INT 8
11799: PPUSH
11800: LD_INT 5
11802: PPUSH
11803: LD_INT 1
11805: PPUSH
11806: CALL_OW 331
// PlaceSeeing ( 98 , 148 , 1 , 2 ) ;
11810: LD_INT 98
11812: PPUSH
11813: LD_INT 148
11815: PPUSH
11816: LD_INT 1
11818: PPUSH
11819: LD_INT 2
11821: PPUSH
11822: CALL_OW 330
// RemoveSeeing ( 98 , 148 , 1 ) ;
11826: LD_INT 98
11828: PPUSH
11829: LD_INT 148
11831: PPUSH
11832: LD_INT 1
11834: PPUSH
11835: CALL_OW 331
// CenterNowOnXY ( 8 , 5 ) ;
11839: LD_INT 8
11841: PPUSH
11842: LD_INT 5
11844: PPUSH
11845: CALL_OW 86
// uc_side := 4 ;
11849: LD_ADDR_OWVAR 20
11853: PUSH
11854: LD_INT 4
11856: ST_TO_ADDR
// uc_nation := 1 ;
11857: LD_ADDR_OWVAR 21
11861: PUSH
11862: LD_INT 1
11864: ST_TO_ADDR
// hc_importance := 0 ;
11865: LD_ADDR_OWVAR 32
11869: PUSH
11870: LD_INT 0
11872: ST_TO_ADDR
// hc_name :=  ;
11873: LD_ADDR_OWVAR 26
11877: PUSH
11878: LD_STRING 
11880: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , us_skill ) ;
11881: LD_INT 1
11883: PPUSH
11884: LD_INT 3
11886: PPUSH
11887: LD_EXP 26
11891: PPUSH
11892: CALL_OW 380
// un := CreateHuman ;
11896: LD_ADDR_VAR 0 2
11900: PUSH
11901: CALL_OW 44
11905: ST_TO_ADDR
// PlaceUnitXY ( un , 19 , 23 , false ) ;
11906: LD_VAR 0 2
11910: PPUSH
11911: LD_INT 19
11913: PPUSH
11914: LD_INT 23
11916: PPUSH
11917: LD_INT 0
11919: PPUSH
11920: CALL_OW 48
// hc_name := Stuart Carey ;
11924: LD_ADDR_OWVAR 26
11928: PUSH
11929: LD_STRING Stuart Carey
11931: ST_TO_ADDR
// hc_class := 1 ;
11932: LD_ADDR_OWVAR 28
11936: PUSH
11937: LD_INT 1
11939: ST_TO_ADDR
// hc_gallery := vulcano ;
11940: LD_ADDR_OWVAR 33
11944: PUSH
11945: LD_STRING vulcano
11947: ST_TO_ADDR
// hc_face_number := 1 ;
11948: LD_ADDR_OWVAR 34
11952: PUSH
11953: LD_INT 1
11955: ST_TO_ADDR
// us_guy := CreateHuman ;
11956: LD_ADDR_EXP 27
11960: PUSH
11961: CALL_OW 44
11965: ST_TO_ADDR
// InitHc ;
11966: CALL_OW 19
// if rand ( 0 , 1 ) then
11970: LD_INT 0
11972: PPUSH
11973: LD_INT 1
11975: PPUSH
11976: CALL_OW 12
11980: IFFALSE 11997
// PrepareHuman ( sex_male , 3 , 6 ) else
11982: LD_INT 1
11984: PPUSH
11985: LD_INT 3
11987: PPUSH
11988: LD_INT 6
11990: PPUSH
11991: CALL_OW 380
11995: GO 12010
// PrepareHuman ( sex_female , 4 , 8 ) ;
11997: LD_INT 2
11999: PPUSH
12000: LD_INT 4
12002: PPUSH
12003: LD_INT 8
12005: PPUSH
12006: CALL_OW 380
// ComMoveXY ( un , 12 , 10 ) ;
12010: LD_VAR 0 2
12014: PPUSH
12015: LD_INT 12
12017: PPUSH
12018: LD_INT 10
12020: PPUSH
12021: CALL_OW 111
// ComTurnUnit ( us_commander , un ) ;
12025: LD_EXP 24
12029: PPUSH
12030: LD_VAR 0 2
12034: PPUSH
12035: CALL_OW 119
// repeat wait ( 0 0$3 ) ;
12039: LD_INT 105
12041: PPUSH
12042: CALL_OW 67
// until See ( 4 , us_commander ) or IsAt ( un , 12 , 10 ) ;
12046: LD_INT 4
12048: PPUSH
12049: LD_EXP 24
12053: PPUSH
12054: CALL_OW 292
12058: PUSH
12059: LD_VAR 0 2
12063: PPUSH
12064: LD_INT 12
12066: PPUSH
12067: LD_INT 10
12069: PPUSH
12070: CALL_OW 307
12074: OR
12075: IFFALSE 12039
// ComTurnUnit ( un , us_commander ) ;
12077: LD_VAR 0 2
12081: PPUSH
12082: LD_EXP 24
12086: PPUSH
12087: CALL_OW 119
// if GetSex ( un ) = sex_male then
12091: LD_VAR 0 2
12095: PPUSH
12096: CALL_OW 258
12100: PUSH
12101: LD_INT 1
12103: EQUAL
12104: IFFALSE 12187
// begin Say ( un , VD-un1 ) ;
12106: LD_VAR 0 2
12110: PPUSH
12111: LD_STRING VD-un1
12113: PPUSH
12114: CALL_OW 88
// Say ( us_commander , VDc-1 ) ;
12118: LD_EXP 24
12122: PPUSH
12123: LD_STRING VDc-1
12125: PPUSH
12126: CALL_OW 88
// Say ( un , VD-un2 ) ;
12130: LD_VAR 0 2
12134: PPUSH
12135: LD_STRING VD-un2
12137: PPUSH
12138: CALL_OW 88
// Say ( us_commander , VDc-2 ) ;
12142: LD_EXP 24
12146: PPUSH
12147: LD_STRING VDc-2
12149: PPUSH
12150: CALL_OW 88
// Say ( un , VD-un3 ) ;
12154: LD_VAR 0 2
12158: PPUSH
12159: LD_STRING VD-un3
12161: PPUSH
12162: CALL_OW 88
// wait ( 0 0$0.2 ) ;
12166: LD_INT 7
12168: PPUSH
12169: CALL_OW 67
// Say ( un , VD-un4 ) ;
12173: LD_VAR 0 2
12177: PPUSH
12178: LD_STRING VD-un4
12180: PPUSH
12181: CALL_OW 88
// end else
12185: GO 12266
// begin Say ( un , VD-unf1 ) ;
12187: LD_VAR 0 2
12191: PPUSH
12192: LD_STRING VD-unf1
12194: PPUSH
12195: CALL_OW 88
// Say ( us_commander , VDc-1 ) ;
12199: LD_EXP 24
12203: PPUSH
12204: LD_STRING VDc-1
12206: PPUSH
12207: CALL_OW 88
// Say ( un , VD-unf2 ) ;
12211: LD_VAR 0 2
12215: PPUSH
12216: LD_STRING VD-unf2
12218: PPUSH
12219: CALL_OW 88
// Say ( us_commander , VDc-2 ) ;
12223: LD_EXP 24
12227: PPUSH
12228: LD_STRING VDc-2
12230: PPUSH
12231: CALL_OW 88
// Say ( un , VD-unf3 ) ;
12235: LD_VAR 0 2
12239: PPUSH
12240: LD_STRING VD-unf3
12242: PPUSH
12243: CALL_OW 88
// wait ( 0 0$0.2 ) ;
12247: LD_INT 7
12249: PPUSH
12250: CALL_OW 67
// Say ( un , VD-unf4 ) ;
12254: LD_VAR 0 2
12258: PPUSH
12259: LD_STRING VD-unf4
12261: PPUSH
12262: CALL_OW 88
// end ; ComMoveXY ( un , 2 , 2 ) ;
12266: LD_VAR 0 2
12270: PPUSH
12271: LD_INT 2
12273: PPUSH
12274: LD_INT 2
12276: PPUSH
12277: CALL_OW 111
// Say ( us_commander , VDc-3 ) ;
12281: LD_EXP 24
12285: PPUSH
12286: LD_STRING VDc-3
12288: PPUSH
12289: CALL_OW 88
// InGameOff ;
12293: CALL_OW 9
// ChangeMissionObjectives ( CVulc1 ) ;
12297: LD_STRING CVulc1
12299: PPUSH
12300: CALL_OW 337
// repeat Wait ( 0 0$01 ) ;
12304: LD_INT 35
12306: PPUSH
12307: CALL_OW 67
// until GetX ( un ) = 2 and GetY ( un ) = 2 ;
12311: LD_VAR 0 2
12315: PPUSH
12316: CALL_OW 250
12320: PUSH
12321: LD_INT 2
12323: EQUAL
12324: PUSH
12325: LD_VAR 0 2
12329: PPUSH
12330: CALL_OW 251
12334: PUSH
12335: LD_INT 2
12337: EQUAL
12338: AND
12339: IFFALSE 12304
// RemoveUnit ( un ) ;
12341: LD_VAR 0 2
12345: PPUSH
12346: CALL_OW 64
// end else
12350: GO 12729
// if your_side = 2 then
12352: LD_OWVAR 2
12356: PUSH
12357: LD_INT 2
12359: EQUAL
12360: IFFALSE 12576
// begin CenterNowOnUnits ( player_commander ) ;
12362: LD_EXP 11
12366: PPUSH
12367: CALL_OW 87
// speaker := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff ar_commander ;
12371: LD_ADDR_VAR 0 4
12375: PUSH
12376: LD_INT 22
12378: PUSH
12379: LD_INT 2
12381: PUSH
12382: EMPTY
12383: LIST
12384: LIST
12385: PUSH
12386: LD_INT 21
12388: PUSH
12389: LD_INT 1
12391: PUSH
12392: EMPTY
12393: LIST
12394: LIST
12395: PUSH
12396: EMPTY
12397: LIST
12398: LIST
12399: PPUSH
12400: CALL_OW 69
12404: PUSH
12405: LD_EXP 57
12409: DIFF
12410: ST_TO_ADDR
// if speaker then
12411: LD_VAR 0 4
12415: IFFALSE 12567
// begin InGameOn ;
12417: CALL_OW 8
// Say ( ar_commander , VSd-1 ) ;
12421: LD_EXP 57
12425: PPUSH
12426: LD_STRING VSd-1
12428: PPUSH
12429: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
12433: LD_VAR 0 4
12437: PUSH
12438: LD_INT 1
12440: ARRAY
12441: PPUSH
12442: CALL_OW 258
12446: PUSH
12447: LD_INT 1
12449: EQUAL
12450: IFFALSE 12470
// Say ( speaker [ 1 ] , VAd-1 ) else
12452: LD_VAR 0 4
12456: PUSH
12457: LD_INT 1
12459: ARRAY
12460: PPUSH
12461: LD_STRING VAd-1
12463: PPUSH
12464: CALL_OW 88
12468: GO 12486
// Say ( speaker [ 1 ] , VAfd-1 ) ;
12470: LD_VAR 0 4
12474: PUSH
12475: LD_INT 1
12477: ARRAY
12478: PPUSH
12479: LD_STRING VAfd-1
12481: PPUSH
12482: CALL_OW 88
// Say ( ar_commander , VSd-2 ) ;
12486: LD_EXP 57
12490: PPUSH
12491: LD_STRING VSd-2
12493: PPUSH
12494: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
12498: LD_VAR 0 4
12502: PUSH
12503: LD_INT 1
12505: ARRAY
12506: PPUSH
12507: CALL_OW 258
12511: PUSH
12512: LD_INT 1
12514: EQUAL
12515: IFFALSE 12535
// Say ( speaker [ 1 ] , VAd-2 ) else
12517: LD_VAR 0 4
12521: PUSH
12522: LD_INT 1
12524: ARRAY
12525: PPUSH
12526: LD_STRING VAd-2
12528: PPUSH
12529: CALL_OW 88
12533: GO 12551
// Say ( speaker [ 1 ] , VAfd-2 ) ;
12535: LD_VAR 0 4
12539: PUSH
12540: LD_INT 1
12542: ARRAY
12543: PPUSH
12544: LD_STRING VAfd-2
12546: PPUSH
12547: CALL_OW 88
// Say ( ar_commander , VSd-3 ) ;
12551: LD_EXP 57
12555: PPUSH
12556: LD_STRING VSd-3
12558: PPUSH
12559: CALL_OW 88
// InGameOff ;
12563: CALL_OW 9
// end ; ChangeMissionObjectives ( CVulc5 ) ;
12567: LD_STRING CVulc5
12569: PPUSH
12570: CALL_OW 337
// end else
12574: GO 12729
// if your_side = 7 then
12576: LD_OWVAR 2
12580: PUSH
12581: LD_INT 7
12583: EQUAL
12584: IFFALSE 12729
// begin speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) diff al_commander ;
12586: LD_ADDR_VAR 0 4
12590: PUSH
12591: LD_INT 22
12593: PUSH
12594: LD_INT 7
12596: PUSH
12597: EMPTY
12598: LIST
12599: LIST
12600: PUSH
12601: LD_INT 21
12603: PUSH
12604: LD_INT 1
12606: PUSH
12607: EMPTY
12608: LIST
12609: LIST
12610: PUSH
12611: EMPTY
12612: LIST
12613: LIST
12614: PPUSH
12615: CALL_OW 69
12619: PUSH
12620: LD_EXP 43
12624: DIFF
12625: ST_TO_ADDR
// if speaker then
12626: LD_VAR 0 4
12630: IFFALSE 12722
// begin CenterNowOnUnits ( al_commander ) ;
12632: LD_EXP 43
12636: PPUSH
12637: CALL_OW 87
// InGameOn ;
12641: CALL_OW 8
// Say ( al_commander , VPd-1 ) ;
12645: LD_EXP 43
12649: PPUSH
12650: LD_STRING VPd-1
12652: PPUSH
12653: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) then
12657: LD_VAR 0 4
12661: PUSH
12662: LD_INT 1
12664: ARRAY
12665: PPUSH
12666: CALL_OW 258
12670: IFFALSE 12690
// Say ( speaker [ 1 ] , VPpd-1 ) else
12672: LD_VAR 0 4
12676: PUSH
12677: LD_INT 1
12679: ARRAY
12680: PPUSH
12681: LD_STRING VPpd-1
12683: PPUSH
12684: CALL_OW 88
12688: GO 12706
// Say ( speaker [ 1 ] , VPpdf-1 ) ;
12690: LD_VAR 0 4
12694: PUSH
12695: LD_INT 1
12697: ARRAY
12698: PPUSH
12699: LD_STRING VPpdf-1
12701: PPUSH
12702: CALL_OW 88
// Say ( al_commander , VPd-2 ) ;
12706: LD_EXP 43
12710: PPUSH
12711: LD_STRING VPd-2
12713: PPUSH
12714: CALL_OW 88
// InGameOff ;
12718: CALL_OW 9
// end ; ChangeMissionObjectives ( CVulc7 ) ;
12722: LD_STRING CVulc7
12724: PPUSH
12725: CALL_OW 337
// end ; SaveForQuickRestart ;
12729: CALL_OW 22
// end ;
12733: LD_VAR 0 1
12737: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) do
12738: LD_INT 22
12740: PUSH
12741: LD_INT 2
12743: PUSH
12744: EMPTY
12745: LIST
12746: LIST
12747: PUSH
12748: LD_INT 30
12750: PUSH
12751: LD_INT 3
12753: PUSH
12754: EMPTY
12755: LIST
12756: LIST
12757: PUSH
12758: EMPTY
12759: LIST
12760: LIST
12761: PPUSH
12762: CALL_OW 69
12766: IFFALSE 12810
12768: GO 12770
12770: DISABLE
// begin ChangeMissionObjectives ( CVulc6 ) ;
12771: LD_STRING CVulc6
12773: PPUSH
12774: CALL_OW 337
// Wait ( [ 25 25$00 , 22 22$30 , 20 20$00 ] [ Difficulty ] ) ;
12778: LD_INT 52500
12780: PUSH
12781: LD_INT 47250
12783: PUSH
12784: LD_INT 42000
12786: PUSH
12787: EMPTY
12788: LIST
12789: LIST
12790: LIST
12791: PUSH
12792: LD_OWVAR 67
12796: ARRAY
12797: PPUSH
12798: CALL_OW 67
// ru_can_attack := true ;
12802: LD_ADDR_EXP 3
12806: PUSH
12807: LD_INT 1
12809: ST_TO_ADDR
// end ;
12810: END
// every 0 0$01 trigger GetSide ( us_depot ) = 1 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_warehouse ] ] ] ) do var speaker ;
12811: LD_INT 50
12813: PPUSH
12814: CALL_OW 255
12818: PUSH
12819: LD_INT 1
12821: EQUAL
12822: PUSH
12823: LD_INT 22
12825: PUSH
12826: LD_INT 1
12828: PUSH
12829: EMPTY
12830: LIST
12831: LIST
12832: PUSH
12833: LD_INT 2
12835: PUSH
12836: LD_INT 30
12838: PUSH
12839: LD_INT 3
12841: PUSH
12842: EMPTY
12843: LIST
12844: LIST
12845: PUSH
12846: LD_INT 30
12848: PUSH
12849: LD_INT 1
12851: PUSH
12852: EMPTY
12853: LIST
12854: LIST
12855: PUSH
12856: EMPTY
12857: LIST
12858: LIST
12859: LIST
12860: PUSH
12861: EMPTY
12862: LIST
12863: LIST
12864: PPUSH
12865: CALL_OW 69
12869: OR
12870: IFFALSE 13104
12872: GO 12874
12874: DISABLE
12875: LD_INT 0
12877: PPUSH
// begin ChangeMissionObjectives ( CVulc2 ) ;
12878: LD_STRING CVulc2
12880: PPUSH
12881: CALL_OW 337
// speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) diff us_commander ;
12885: LD_ADDR_VAR 0 1
12889: PUSH
12890: LD_INT 22
12892: PUSH
12893: LD_INT 1
12895: PUSH
12896: EMPTY
12897: LIST
12898: LIST
12899: PUSH
12900: LD_INT 25
12902: PUSH
12903: LD_INT 2
12905: PUSH
12906: EMPTY
12907: LIST
12908: LIST
12909: PUSH
12910: EMPTY
12911: LIST
12912: LIST
12913: PPUSH
12914: CALL_OW 69
12918: PUSH
12919: LD_EXP 24
12923: DIFF
12924: ST_TO_ADDR
// DialogueOn ;
12925: CALL_OW 6
// DWait ( 0 0$0.3 ) ;
12929: LD_INT 10
12931: PPUSH
12932: CALL_OW 68
// if GetSex ( speaker [ 1 ] ) = sex_male then
12936: LD_VAR 0 1
12940: PUSH
12941: LD_INT 1
12943: ARRAY
12944: PPUSH
12945: CALL_OW 258
12949: PUSH
12950: LD_INT 1
12952: EQUAL
12953: IFFALSE 12973
// Say ( speaker [ 1 ] , VDb-1 ) else
12955: LD_VAR 0 1
12959: PUSH
12960: LD_INT 1
12962: ARRAY
12963: PPUSH
12964: LD_STRING VDb-1
12966: PPUSH
12967: CALL_OW 88
12971: GO 12989
// Say ( speaker [ 1 ] , VDbf-1 ) ;
12973: LD_VAR 0 1
12977: PUSH
12978: LD_INT 1
12980: ARRAY
12981: PPUSH
12982: LD_STRING VDbf-1
12984: PPUSH
12985: CALL_OW 88
// DWait ( 0 0$0.3 ) ;
12989: LD_INT 10
12991: PPUSH
12992: CALL_OW 68
// if GetSex ( speaker [ 1 ] ) = sex_male then
12996: LD_VAR 0 1
13000: PUSH
13001: LD_INT 1
13003: ARRAY
13004: PPUSH
13005: CALL_OW 258
13009: PUSH
13010: LD_INT 1
13012: EQUAL
13013: IFFALSE 13033
// Say ( speaker [ 1 ] , VDb-2 ) else
13015: LD_VAR 0 1
13019: PUSH
13020: LD_INT 1
13022: ARRAY
13023: PPUSH
13024: LD_STRING VDb-2
13026: PPUSH
13027: CALL_OW 88
13031: GO 13049
// Say ( speaker [ 1 ] , VDbf-2 ) ;
13033: LD_VAR 0 1
13037: PUSH
13038: LD_INT 1
13040: ARRAY
13041: PPUSH
13042: LD_STRING VDbf-2
13044: PPUSH
13045: CALL_OW 88
// DWait ( 0 0$01 ) ;
13049: LD_INT 35
13051: PPUSH
13052: CALL_OW 68
// Say ( us_commander , VDb-com1 ) ;
13056: LD_EXP 24
13060: PPUSH
13061: LD_STRING VDb-com1
13063: PPUSH
13064: CALL_OW 88
// DialogueOff ;
13068: CALL_OW 7
// Wait ( [ 21 21$00 , 17 17$30 , 15 15$00 ] [ Difficulty ] ) ;
13072: LD_INT 44100
13074: PUSH
13075: LD_INT 36750
13077: PUSH
13078: LD_INT 31500
13080: PUSH
13081: EMPTY
13082: LIST
13083: LIST
13084: LIST
13085: PUSH
13086: LD_OWVAR 67
13090: ARRAY
13091: PPUSH
13092: CALL_OW 67
// ru_can_attack := true ;
13096: LD_ADDR_EXP 3
13100: PUSH
13101: LD_INT 1
13103: ST_TO_ADDR
// end ;
13104: PPOPN 1
13106: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) do
13107: LD_INT 22
13109: PUSH
13110: LD_INT 7
13112: PUSH
13113: EMPTY
13114: LIST
13115: LIST
13116: PUSH
13117: LD_INT 30
13119: PUSH
13120: LD_INT 3
13122: PUSH
13123: EMPTY
13124: LIST
13125: LIST
13126: PUSH
13127: EMPTY
13128: LIST
13129: LIST
13130: PPUSH
13131: CALL_OW 69
13135: IFFALSE 13172
13137: GO 13139
13139: DISABLE
// begin Wait ( [ 20 20$00 , 16 16$30 , 14 14$00 ] [ Difficulty ] ) ;
13140: LD_INT 42000
13142: PUSH
13143: LD_INT 34650
13145: PUSH
13146: LD_INT 29400
13148: PUSH
13149: EMPTY
13150: LIST
13151: LIST
13152: LIST
13153: PUSH
13154: LD_OWVAR 67
13158: ARRAY
13159: PPUSH
13160: CALL_OW 67
// ru_can_attack := true ;
13164: LD_ADDR_EXP 3
13168: PUSH
13169: LD_INT 1
13171: ST_TO_ADDR
// end ;
13172: END
// every 0 0$01 trigger GetSide ( us_lab ) = 1 do var speaker ;
13173: LD_INT 58
13175: PPUSH
13176: CALL_OW 255
13180: PUSH
13181: LD_INT 1
13183: EQUAL
13184: IFFALSE 13391
13186: GO 13188
13188: DISABLE
13189: LD_INT 0
13191: PPUSH
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
13192: LD_ADDR_VAR 0 1
13196: PUSH
13197: LD_INT 22
13199: PUSH
13200: LD_INT 1
13202: PUSH
13203: EMPTY
13204: LIST
13205: LIST
13206: PUSH
13207: LD_INT 25
13209: PUSH
13210: LD_INT 2
13212: PUSH
13213: EMPTY
13214: LIST
13215: LIST
13216: PUSH
13217: EMPTY
13218: LIST
13219: LIST
13220: PPUSH
13221: CALL_OW 69
13225: ST_TO_ADDR
// DialogueOn ;
13226: CALL_OW 6
// if speaker then
13230: LD_VAR 0 1
13234: IFFALSE 13289
// if GetSex ( speaker [ 1 ] ) = sex_male then
13236: LD_VAR 0 1
13240: PUSH
13241: LD_INT 1
13243: ARRAY
13244: PPUSH
13245: CALL_OW 258
13249: PUSH
13250: LD_INT 1
13252: EQUAL
13253: IFFALSE 13273
// Say ( speaker [ 1 ] , VDe-1 ) else
13255: LD_VAR 0 1
13259: PUSH
13260: LD_INT 1
13262: ARRAY
13263: PPUSH
13264: LD_STRING VDe-1
13266: PPUSH
13267: CALL_OW 88
13271: GO 13289
// Say ( speaker [ 1 ] , VDef-1 ) ;
13273: LD_VAR 0 1
13277: PUSH
13278: LD_INT 1
13280: ARRAY
13281: PPUSH
13282: LD_STRING VDef-1
13284: PPUSH
13285: CALL_OW 88
// case Query ( SibNote ) of 1 :
13289: LD_STRING SibNote
13291: PPUSH
13292: CALL_OW 97
13296: PUSH
13297: LD_INT 1
13299: DOUBLE
13300: EQUAL
13301: IFTRUE 13305
13303: GO 13308
13305: POP
// ; end ;
13306: GO 13309
13308: POP
// if speaker then
13309: LD_VAR 0 1
13313: IFFALSE 13368
// if GetSex ( speaker [ 1 ] ) = sex_male then
13315: LD_VAR 0 1
13319: PUSH
13320: LD_INT 1
13322: ARRAY
13323: PPUSH
13324: CALL_OW 258
13328: PUSH
13329: LD_INT 1
13331: EQUAL
13332: IFFALSE 13352
// Say ( speaker [ 1 ] , VDe-2 ) else
13334: LD_VAR 0 1
13338: PUSH
13339: LD_INT 1
13341: ARRAY
13342: PPUSH
13343: LD_STRING VDe-2
13345: PPUSH
13346: CALL_OW 88
13350: GO 13368
// Say ( speaker [ 1 ] , VDef-2 ) ;
13352: LD_VAR 0 1
13356: PUSH
13357: LD_INT 1
13359: ARRAY
13360: PPUSH
13361: LD_STRING VDef-2
13363: PPUSH
13364: CALL_OW 88
// Say ( us_commander , VDc-4 ) ;
13368: LD_EXP 24
13372: PPUSH
13373: LD_STRING VDc-4
13375: PPUSH
13376: CALL_OW 88
// DialogueOff ;
13380: CALL_OW 7
// ChangeMissionObjectives ( CVulc3 ) ;
13384: LD_STRING CVulc3
13386: PPUSH
13387: CALL_OW 337
// end ;
13391: PPOPN 1
13393: END
// every 0 0$01 trigger your_side = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) > 0 do var i , un , veh ;
13394: LD_OWVAR 2
13398: PUSH
13399: LD_INT 1
13401: EQUAL
13402: PUSH
13403: LD_INT 22
13405: PUSH
13406: LD_INT 1
13408: PUSH
13409: EMPTY
13410: LIST
13411: LIST
13412: PUSH
13413: LD_INT 30
13415: PUSH
13416: LD_INT 3
13418: PUSH
13419: EMPTY
13420: LIST
13421: LIST
13422: PUSH
13423: EMPTY
13424: LIST
13425: LIST
13426: PPUSH
13427: CALL_OW 69
13431: PUSH
13432: LD_INT 0
13434: GREATER
13435: AND
13436: IFFALSE 13882
13438: GO 13440
13440: DISABLE
13441: LD_INT 0
13443: PPUSH
13444: PPUSH
13445: PPUSH
// begin Wait ( Rand ( 0 0$07 , 0 0$37 ) ) ;
13446: LD_INT 245
13448: PPUSH
13449: LD_INT 1295
13451: PPUSH
13452: CALL_OW 12
13456: PPUSH
13457: CALL_OW 67
// DialogueOn ;
13461: CALL_OW 6
// SayRadio ( us_guy , VDG-1 ) ;
13465: LD_EXP 27
13469: PPUSH
13470: LD_STRING VDG-1
13472: PPUSH
13473: CALL_OW 94
// Say ( us_commander , VDc-5 ) ;
13477: LD_EXP 24
13481: PPUSH
13482: LD_STRING VDc-5
13484: PPUSH
13485: CALL_OW 88
// SayRadio ( us_guy , VDG-2 ) ;
13489: LD_EXP 27
13493: PPUSH
13494: LD_STRING VDG-2
13496: PPUSH
13497: CALL_OW 94
// Say ( us_commander , VDc-6 ) ;
13501: LD_EXP 24
13505: PPUSH
13506: LD_STRING VDc-6
13508: PPUSH
13509: CALL_OW 88
// Say ( us_commander , VDc-6a ) ;
13513: LD_EXP 24
13517: PPUSH
13518: LD_STRING VDc-6a
13520: PPUSH
13521: CALL_OW 88
// SayRadio ( us_guy , VDG-3 ) ;
13525: LD_EXP 27
13529: PPUSH
13530: LD_STRING VDG-3
13532: PPUSH
13533: CALL_OW 94
// Say ( us_commander , VDc-7 ) ;
13537: LD_EXP 24
13541: PPUSH
13542: LD_STRING VDc-7
13544: PPUSH
13545: CALL_OW 88
// SayRadio ( us_guy , VDG-4 ) ;
13549: LD_EXP 27
13553: PPUSH
13554: LD_STRING VDG-4
13556: PPUSH
13557: CALL_OW 94
// DialogueOff ;
13561: CALL_OW 7
// ChangeMissionObjectives ( CVulc4 ) ;
13565: LD_STRING CVulc4
13567: PPUSH
13568: CALL_OW 337
// Wait ( [ 9 9$00 , 10 10$00 , 11 11$00 ] [ Difficulty ] ) ;
13572: LD_INT 18900
13574: PUSH
13575: LD_INT 21000
13577: PUSH
13578: LD_INT 23100
13580: PUSH
13581: EMPTY
13582: LIST
13583: LIST
13584: LIST
13585: PUSH
13586: LD_OWVAR 67
13590: ARRAY
13591: PPUSH
13592: CALL_OW 67
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
13596: LD_ADDR_VAR 0 1
13600: PUSH
13601: DOUBLE
13602: LD_INT 1
13604: DEC
13605: ST_TO_ADDR
13606: LD_INT 4
13608: PUSH
13609: LD_INT 5
13611: PUSH
13612: LD_INT 6
13614: PUSH
13615: EMPTY
13616: LIST
13617: LIST
13618: LIST
13619: PUSH
13620: LD_OWVAR 67
13624: ARRAY
13625: PUSH
13626: FOR_TO
13627: IFFALSE 13871
// begin uc_side := 1 ;
13629: LD_ADDR_OWVAR 20
13633: PUSH
13634: LD_INT 1
13636: ST_TO_ADDR
// uc_nation := 1 ;
13637: LD_ADDR_OWVAR 21
13641: PUSH
13642: LD_INT 1
13644: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , us_skill ) ;
13645: LD_INT 0
13647: PPUSH
13648: LD_INT 1
13650: PPUSH
13651: LD_INT 4
13653: PPUSH
13654: CALL_OW 12
13658: PPUSH
13659: LD_EXP 26
13663: PPUSH
13664: CALL_OW 380
// un := CreateHuman ;
13668: LD_ADDR_VAR 0 2
13672: PUSH
13673: CALL_OW 44
13677: ST_TO_ADDR
// SetDir ( un , 2 ) ;
13678: LD_VAR 0 2
13682: PPUSH
13683: LD_INT 2
13685: PPUSH
13686: CALL_OW 233
// if GetClass ( un ) = 3 then
13690: LD_VAR 0 2
13694: PPUSH
13695: CALL_OW 257
13699: PUSH
13700: LD_INT 3
13702: EQUAL
13703: IFFALSE 13854
// begin vc_chassis := [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 ] ;
13705: LD_ADDR_OWVAR 37
13709: PUSH
13710: LD_INT 2
13712: PUSH
13713: LD_INT 3
13715: PUSH
13716: EMPTY
13717: LIST
13718: LIST
13719: PUSH
13720: LD_VAR 0 1
13724: PUSH
13725: LD_INT 2
13727: MOD
13728: ARRAY
13729: ST_TO_ADDR
// vc_engine := engine_combustion ;
13730: LD_ADDR_OWVAR 39
13734: PUSH
13735: LD_INT 1
13737: ST_TO_ADDR
// vc_control := control_manual ;
13738: LD_ADDR_OWVAR 38
13742: PUSH
13743: LD_INT 1
13745: ST_TO_ADDR
// vc_weapon := [ us_laser , us_laser , us_double_gun , us_radar ] [ rand ( 1 , 4 ) ] ;
13746: LD_ADDR_OWVAR 40
13750: PUSH
13751: LD_INT 9
13753: PUSH
13754: LD_INT 9
13756: PUSH
13757: LD_INT 5
13759: PUSH
13760: LD_INT 11
13762: PUSH
13763: EMPTY
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: PUSH
13769: LD_INT 1
13771: PPUSH
13772: LD_INT 4
13774: PPUSH
13775: CALL_OW 12
13779: ARRAY
13780: ST_TO_ADDR
// veh := CreateVehicle ;
13781: LD_ADDR_VAR 0 3
13785: PUSH
13786: CALL_OW 45
13790: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
13791: LD_VAR 0 3
13795: PPUSH
13796: LD_INT 2
13798: PPUSH
13799: CALL_OW 233
// SetFuel ( veh , Rand ( 77 , 88 ) ) ;
13803: LD_VAR 0 3
13807: PPUSH
13808: LD_INT 77
13810: PPUSH
13811: LD_INT 88
13813: PPUSH
13814: CALL_OW 12
13818: PPUSH
13819: CALL_OW 240
// PlaceUnitArea ( veh , start_north , false ) ;
13823: LD_VAR 0 3
13827: PPUSH
13828: LD_INT 1
13830: PPUSH
13831: LD_INT 0
13833: PPUSH
13834: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
13838: LD_VAR 0 2
13842: PPUSH
13843: LD_VAR 0 3
13847: PPUSH
13848: CALL_OW 52
// end else
13852: GO 13869
// PlaceUnitArea ( un , start_north , false ) ;
13854: LD_VAR 0 2
13858: PPUSH
13859: LD_INT 1
13861: PPUSH
13862: LD_INT 0
13864: PPUSH
13865: CALL_OW 49
// end ;
13869: GO 13626
13871: POP
13872: POP
// CenterNowOnUnits ( un ) ;
13873: LD_VAR 0 2
13877: PPUSH
13878: CALL_OW 87
// end ;
13882: PPOPN 3
13884: END
// every 0 0$01 trigger FilterUnitsInArea ( vulc_artifact , [ f_side , your_side ] ) do var un , filter ;
13885: LD_INT 21
13887: PPUSH
13888: LD_INT 22
13890: PUSH
13891: LD_OWVAR 2
13895: PUSH
13896: EMPTY
13897: LIST
13898: LIST
13899: PPUSH
13900: CALL_OW 70
13904: IFFALSE 14225
13906: GO 13908
13908: DISABLE
13909: LD_INT 0
13911: PPUSH
13912: PPUSH
// begin filter := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff player_commander ;
13913: LD_ADDR_VAR 0 2
13917: PUSH
13918: LD_INT 22
13920: PUSH
13921: LD_OWVAR 2
13925: PUSH
13926: EMPTY
13927: LIST
13928: LIST
13929: PUSH
13930: LD_INT 2
13932: PUSH
13933: LD_INT 25
13935: PUSH
13936: LD_INT 1
13938: PUSH
13939: EMPTY
13940: LIST
13941: LIST
13942: PUSH
13943: LD_INT 25
13945: PUSH
13946: LD_INT 2
13948: PUSH
13949: EMPTY
13950: LIST
13951: LIST
13952: PUSH
13953: LD_INT 25
13955: PUSH
13956: LD_INT 3
13958: PUSH
13959: EMPTY
13960: LIST
13961: LIST
13962: PUSH
13963: LD_INT 25
13965: PUSH
13966: LD_INT 4
13968: PUSH
13969: EMPTY
13970: LIST
13971: LIST
13972: PUSH
13973: EMPTY
13974: LIST
13975: LIST
13976: LIST
13977: LIST
13978: LIST
13979: PUSH
13980: EMPTY
13981: LIST
13982: LIST
13983: PPUSH
13984: CALL_OW 69
13988: PUSH
13989: LD_EXP 11
13993: DIFF
13994: ST_TO_ADDR
// un := NearestUnitToXY ( filter , 112 , 67 ) ;
13995: LD_ADDR_VAR 0 1
13999: PUSH
14000: LD_VAR 0 2
14004: PPUSH
14005: LD_INT 112
14007: PPUSH
14008: LD_INT 67
14010: PPUSH
14011: CALL_OW 73
14015: ST_TO_ADDR
// if GetSide ( un ) = 7 then
14016: LD_VAR 0 1
14020: PPUSH
14021: CALL_OW 255
14025: PUSH
14026: LD_INT 7
14028: EQUAL
14029: IFFALSE 14072
// if GetSex ( un ) = sex_male then
14031: LD_VAR 0 1
14035: PPUSH
14036: CALL_OW 258
14040: PUSH
14041: LD_INT 1
14043: EQUAL
14044: IFFALSE 14060
// Say ( un , VD-find-al ) else
14046: LD_VAR 0 1
14050: PPUSH
14051: LD_STRING VD-find-al
14053: PPUSH
14054: CALL_OW 88
14058: GO 14072
// Say ( un , VD-find-al-f ) ;
14060: LD_VAR 0 1
14064: PPUSH
14065: LD_STRING VD-find-al-f
14067: PPUSH
14068: CALL_OW 88
// if GetSide ( un ) = 2 then
14072: LD_VAR 0 1
14076: PPUSH
14077: CALL_OW 255
14081: PUSH
14082: LD_INT 2
14084: EQUAL
14085: IFFALSE 14128
// if GetSex ( un ) = sex_male then
14087: LD_VAR 0 1
14091: PPUSH
14092: CALL_OW 258
14096: PUSH
14097: LD_INT 1
14099: EQUAL
14100: IFFALSE 14116
// Say ( un , VD-find-ar ) else
14102: LD_VAR 0 1
14106: PPUSH
14107: LD_STRING VD-find-ar
14109: PPUSH
14110: CALL_OW 88
14114: GO 14128
// Say ( un , VD-find-ar-f ) ;
14116: LD_VAR 0 1
14120: PPUSH
14121: LD_STRING VD-find-ar-f
14123: PPUSH
14124: CALL_OW 88
// if GetSide ( un ) = 1 then
14128: LD_VAR 0 1
14132: PPUSH
14133: CALL_OW 255
14137: PUSH
14138: LD_INT 1
14140: EQUAL
14141: IFFALSE 14208
// begin if GetSex ( un ) = sex_male then
14143: LD_VAR 0 1
14147: PPUSH
14148: CALL_OW 258
14152: PUSH
14153: LD_INT 1
14155: EQUAL
14156: IFFALSE 14184
// begin Say ( un , VD-find-us ) ;
14158: LD_VAR 0 1
14162: PPUSH
14163: LD_STRING VD-find-us
14165: PPUSH
14166: CALL_OW 88
// Say ( un , VD-find-us2 ) ;
14170: LD_VAR 0 1
14174: PPUSH
14175: LD_STRING VD-find-us2
14177: PPUSH
14178: CALL_OW 88
// end else
14182: GO 14208
// begin Say ( un , VD-find-us-f ) ;
14184: LD_VAR 0 1
14188: PPUSH
14189: LD_STRING VD-find-us-f
14191: PPUSH
14192: CALL_OW 88
// Say ( un , VD-find-us2-f ) ;
14196: LD_VAR 0 1
14200: PPUSH
14201: LD_STRING VD-find-us2-f
14203: PPUSH
14204: CALL_OW 88
// end ; end ; Wait ( 0 0$0.3 ) ;
14208: LD_INT 10
14210: PPUSH
14211: CALL_OW 67
// CenterNowOnXY ( 112 , 67 ) ;
14215: LD_INT 112
14217: PPUSH
14218: LD_INT 67
14220: PPUSH
14221: CALL_OW 86
// end ;
14225: PPOPN 2
14227: END
// every 0 0$01 trigger player_artifact_ready do var speaker ;
14228: LD_EXP 8
14232: IFFALSE 14734
14234: GO 14236
14236: DISABLE
14237: LD_INT 0
14239: PPUSH
// begin if your_side = 1 then
14240: LD_OWVAR 2
14244: PUSH
14245: LD_INT 1
14247: EQUAL
14248: IFFALSE 14429
// begin speaker := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) diff us_commander ;
14250: LD_ADDR_VAR 0 1
14254: PUSH
14255: LD_INT 22
14257: PUSH
14258: LD_INT 1
14260: PUSH
14261: EMPTY
14262: LIST
14263: LIST
14264: PUSH
14265: LD_INT 25
14267: PUSH
14268: LD_INT 4
14270: PUSH
14271: EMPTY
14272: LIST
14273: LIST
14274: PUSH
14275: EMPTY
14276: LIST
14277: LIST
14278: PPUSH
14279: CALL_OW 69
14283: PUSH
14284: LD_EXP 24
14288: DIFF
14289: ST_TO_ADDR
// if not speaker then
14290: LD_VAR 0 1
14294: NOT
14295: IFFALSE 14299
// exit ;
14297: GO 14734
// if GetSex ( speaker [ 1 ] ) = sex_male then
14299: LD_VAR 0 1
14303: PUSH
14304: LD_INT 1
14306: ARRAY
14307: PPUSH
14308: CALL_OW 258
14312: PUSH
14313: LD_INT 1
14315: EQUAL
14316: IFFALSE 14336
// Say ( speaker [ 1 ] , VD-us-sci-art-1 ) else
14318: LD_VAR 0 1
14322: PUSH
14323: LD_INT 1
14325: ARRAY
14326: PPUSH
14327: LD_STRING VD-us-sci-art-1
14329: PPUSH
14330: CALL_OW 88
14334: GO 14352
// Say ( speaker [ 1 ] , VD-us-fsci-art-1 ) ;
14336: LD_VAR 0 1
14340: PUSH
14341: LD_INT 1
14343: ARRAY
14344: PPUSH
14345: LD_STRING VD-us-fsci-art-1
14347: PPUSH
14348: CALL_OW 88
// Say ( us_commander , VDc-art1 ) ;
14352: LD_EXP 24
14356: PPUSH
14357: LD_STRING VDc-art1
14359: PPUSH
14360: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
14364: LD_VAR 0 1
14368: PUSH
14369: LD_INT 1
14371: ARRAY
14372: PPUSH
14373: CALL_OW 258
14377: PUSH
14378: LD_INT 1
14380: EQUAL
14381: IFFALSE 14401
// Say ( speaker [ 1 ] , VD-us-sci-art-2 ) else
14383: LD_VAR 0 1
14387: PUSH
14388: LD_INT 1
14390: ARRAY
14391: PPUSH
14392: LD_STRING VD-us-sci-art-2
14394: PPUSH
14395: CALL_OW 88
14399: GO 14417
// Say ( speaker [ 1 ] , VD-us-fsci-art-2 ) ;
14401: LD_VAR 0 1
14405: PUSH
14406: LD_INT 1
14408: ARRAY
14409: PPUSH
14410: LD_STRING VD-us-fsci-art-2
14412: PPUSH
14413: CALL_OW 88
// Say ( us_commander , VDc-art2 ) ;
14417: LD_EXP 24
14421: PPUSH
14422: LD_STRING VDc-art2
14424: PPUSH
14425: CALL_OW 88
// end ; if your_side = 2 then
14429: LD_OWVAR 2
14433: PUSH
14434: LD_INT 2
14436: EQUAL
14437: IFFALSE 14541
// begin speaker := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) diff ar_commander ;
14439: LD_ADDR_VAR 0 1
14443: PUSH
14444: LD_INT 22
14446: PUSH
14447: LD_INT 2
14449: PUSH
14450: EMPTY
14451: LIST
14452: LIST
14453: PUSH
14454: LD_INT 25
14456: PUSH
14457: LD_INT 4
14459: PUSH
14460: EMPTY
14461: LIST
14462: LIST
14463: PUSH
14464: EMPTY
14465: LIST
14466: LIST
14467: PPUSH
14468: CALL_OW 69
14472: PUSH
14473: LD_EXP 57
14477: DIFF
14478: ST_TO_ADDR
// if not speaker then
14479: LD_VAR 0 1
14483: NOT
14484: IFFALSE 14488
// exit ;
14486: GO 14734
// if GetSex ( speaker [ 1 ] ) = sex_male then
14488: LD_VAR 0 1
14492: PUSH
14493: LD_INT 1
14495: ARRAY
14496: PPUSH
14497: CALL_OW 258
14501: PUSH
14502: LD_INT 1
14504: EQUAL
14505: IFFALSE 14525
// Say ( speaker [ 1 ] , VD-ar-sci-art-1 ) else
14507: LD_VAR 0 1
14511: PUSH
14512: LD_INT 1
14514: ARRAY
14515: PPUSH
14516: LD_STRING VD-ar-sci-art-1
14518: PPUSH
14519: CALL_OW 88
14523: GO 14541
// Say ( speaker [ 1 ] , VD-ar-fsci-art-1 ) ;
14525: LD_VAR 0 1
14529: PUSH
14530: LD_INT 1
14532: ARRAY
14533: PPUSH
14534: LD_STRING VD-ar-fsci-art-1
14536: PPUSH
14537: CALL_OW 88
// end ; if your_side = 7 then
14541: LD_OWVAR 2
14545: PUSH
14546: LD_INT 7
14548: EQUAL
14549: IFFALSE 14734
// begin speaker := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 4 ] ] ) diff al_commander ;
14551: LD_ADDR_VAR 0 1
14555: PUSH
14556: LD_INT 22
14558: PUSH
14559: LD_INT 7
14561: PUSH
14562: EMPTY
14563: LIST
14564: LIST
14565: PUSH
14566: LD_INT 25
14568: PUSH
14569: LD_INT 4
14571: PUSH
14572: EMPTY
14573: LIST
14574: LIST
14575: PUSH
14576: EMPTY
14577: LIST
14578: LIST
14579: PPUSH
14580: CALL_OW 69
14584: PUSH
14585: LD_EXP 43
14589: DIFF
14590: ST_TO_ADDR
// if speaker then
14591: LD_VAR 0 1
14595: IFFALSE 14727
// begin if GetSex ( speaker [ 1 ] ) = sex_male then
14597: LD_VAR 0 1
14601: PUSH
14602: LD_INT 1
14604: ARRAY
14605: PPUSH
14606: CALL_OW 258
14610: PUSH
14611: LD_INT 1
14613: EQUAL
14614: IFFALSE 14634
// Say ( speaker [ 1 ] , VD-al-sci-art-1 ) else
14616: LD_VAR 0 1
14620: PUSH
14621: LD_INT 1
14623: ARRAY
14624: PPUSH
14625: LD_STRING VD-al-sci-art-1
14627: PPUSH
14628: CALL_OW 88
14632: GO 14650
// Say ( speaker [ 1 ] , VD-al-fsci-art-1 ) ;
14634: LD_VAR 0 1
14638: PUSH
14639: LD_INT 1
14641: ARRAY
14642: PPUSH
14643: LD_STRING VD-al-fsci-art-1
14645: PPUSH
14646: CALL_OW 88
// Say ( al_commander , VPd-art-1 ) ;
14650: LD_EXP 43
14654: PPUSH
14655: LD_STRING VPd-art-1
14657: PPUSH
14658: CALL_OW 88
// if GetSex ( speaker [ 1 ] ) = sex_male then
14662: LD_VAR 0 1
14666: PUSH
14667: LD_INT 1
14669: ARRAY
14670: PPUSH
14671: CALL_OW 258
14675: PUSH
14676: LD_INT 1
14678: EQUAL
14679: IFFALSE 14699
// Say ( speaker [ 1 ] , VD-al-sci-art-2 ) else
14681: LD_VAR 0 1
14685: PUSH
14686: LD_INT 1
14688: ARRAY
14689: PPUSH
14690: LD_STRING VD-al-sci-art-2
14692: PPUSH
14693: CALL_OW 88
14697: GO 14715
// Say ( speaker [ 1 ] , VD-al-fsci-art-2 ) ;
14699: LD_VAR 0 1
14703: PUSH
14704: LD_INT 1
14706: ARRAY
14707: PPUSH
14708: LD_STRING VD-al-fsci-art-2
14710: PPUSH
14711: CALL_OW 88
// Say ( al_commander , VPd-art-2 ) ;
14715: LD_EXP 43
14719: PPUSH
14720: LD_STRING VPd-art-2
14722: PPUSH
14723: CALL_OW 88
// end ; ChangeMissionObjectives ( CVulc7out ) ;
14727: LD_STRING CVulc7out
14729: PPUSH
14730: CALL_OW 337
// end ; end ;
14734: PPOPN 1
14736: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_see , 8 ] ] ) do var speaker ;
14737: LD_INT 22
14739: PUSH
14740: LD_OWVAR 2
14744: PUSH
14745: EMPTY
14746: LIST
14747: LIST
14748: PUSH
14749: LD_INT 101
14751: PUSH
14752: LD_INT 8
14754: PUSH
14755: EMPTY
14756: LIST
14757: LIST
14758: PUSH
14759: EMPTY
14760: LIST
14761: LIST
14762: PPUSH
14763: CALL_OW 69
14767: IFFALSE 14910
14769: GO 14771
14771: DISABLE
14772: LD_INT 0
14774: PPUSH
// begin if your_side = 1 then
14775: LD_OWVAR 2
14779: PUSH
14780: LD_INT 1
14782: EQUAL
14783: IFFALSE 14866
// begin speaker := FilterAllUnits ( [ f_side , 1 ] ) diff us_commander ;
14785: LD_ADDR_VAR 0 1
14789: PUSH
14790: LD_INT 22
14792: PUSH
14793: LD_INT 1
14795: PUSH
14796: EMPTY
14797: LIST
14798: LIST
14799: PPUSH
14800: CALL_OW 69
14804: PUSH
14805: LD_EXP 24
14809: DIFF
14810: ST_TO_ADDR
// if speaker then
14811: LD_VAR 0 1
14815: IFFALSE 14866
// if GetSex ( speaker [ 1 ] ) then
14817: LD_VAR 0 1
14821: PUSH
14822: LD_INT 1
14824: ARRAY
14825: PPUSH
14826: CALL_OW 258
14830: IFFALSE 14850
// Say ( speaker [ 1 ] , VD-legion-us ) else
14832: LD_VAR 0 1
14836: PUSH
14837: LD_INT 1
14839: ARRAY
14840: PPUSH
14841: LD_STRING VD-legion-us
14843: PPUSH
14844: CALL_OW 88
14848: GO 14866
// Say ( speaker [ 1 ] , VD-legion-us-f ) ;
14850: LD_VAR 0 1
14854: PUSH
14855: LD_INT 1
14857: ARRAY
14858: PPUSH
14859: LD_STRING VD-legion-us-f
14861: PPUSH
14862: CALL_OW 88
// end ; if your_side = 2 then
14866: LD_OWVAR 2
14870: PUSH
14871: LD_INT 2
14873: EQUAL
14874: IFFALSE 14888
// Say ( ar_commander , VD-legion-ar ) ;
14876: LD_EXP 57
14880: PPUSH
14881: LD_STRING VD-legion-ar
14883: PPUSH
14884: CALL_OW 88
// if your_side = 7 then
14888: LD_OWVAR 2
14892: PUSH
14893: LD_INT 7
14895: EQUAL
14896: IFFALSE 14910
// Say ( al_commander , VD-legion-al ) ;
14898: LD_EXP 43
14902: PPUSH
14903: LD_STRING VD-legion-al
14905: PPUSH
14906: CALL_OW 88
// end ;
14910: PPOPN 1
14912: END
// every 0 0$01 trigger mine_vulc do
14913: LD_EXP 13
14917: IFFALSE 14934
14919: GO 14921
14921: DISABLE
// begin Say ( player_commander , VD-vulc-mines ) ;
14922: LD_EXP 11
14926: PPUSH
14927: LD_STRING VD-vulc-mines
14929: PPUSH
14930: CALL_OW 88
// end ;
14934: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 3 ] ) = 0 and your_side <> 2 do
14935: LD_INT 22
14937: PUSH
14938: LD_INT 3
14940: PUSH
14941: EMPTY
14942: LIST
14943: LIST
14944: PPUSH
14945: CALL_OW 69
14949: PUSH
14950: LD_INT 0
14952: EQUAL
14953: PUSH
14954: LD_OWVAR 2
14958: PUSH
14959: LD_INT 2
14961: NONEQUAL
14962: AND
14963: IFFALSE 14972
14965: GO 14967
14967: DISABLE
// Win ;
14968: CALL 15029 0 0
14972: END
// every 0 0$01 trigger FilterAllUnits ( [ f_or , [ f_side , 8 ] , [ f_side , 3 ] ] ) = 0 and your_side = 2 do
14973: LD_INT 2
14975: PUSH
14976: LD_INT 22
14978: PUSH
14979: LD_INT 8
14981: PUSH
14982: EMPTY
14983: LIST
14984: LIST
14985: PUSH
14986: LD_INT 22
14988: PUSH
14989: LD_INT 3
14991: PUSH
14992: EMPTY
14993: LIST
14994: LIST
14995: PUSH
14996: EMPTY
14997: LIST
14998: LIST
14999: LIST
15000: PPUSH
15001: CALL_OW 69
15005: PUSH
15006: LD_INT 0
15008: EQUAL
15009: PUSH
15010: LD_OWVAR 2
15014: PUSH
15015: LD_INT 2
15017: EQUAL
15018: AND
15019: IFFALSE 15028
15021: GO 15023
15023: DISABLE
// Win ;
15024: CALL 15029 0 0
15028: END
// function Win ; var points ; begin
15029: LD_INT 0
15031: PPUSH
15032: PPUSH
// case Query ( VulcWin ) of 1 :
15033: LD_STRING VulcWin
15035: PPUSH
15036: CALL_OW 97
15040: PUSH
15041: LD_INT 1
15043: DOUBLE
15044: EQUAL
15045: IFTRUE 15049
15047: GO 15052
15049: POP
// ; end ;
15050: GO 15053
15052: POP
// if medal_enabled then
15053: LD_EXP 14
15057: IFFALSE 15071
// AddMedal ( vulc_1 , 1 ) else
15059: LD_STRING vulc_1
15061: PPUSH
15062: LD_INT 1
15064: PPUSH
15065: CALL_OW 101
15069: GO 15082
// AddMedal ( vulc_1 , - 1 ) ;
15071: LD_STRING vulc_1
15073: PPUSH
15074: LD_INT 1
15076: NEG
15077: PPUSH
15078: CALL_OW 101
// if FilterAllUnits ( [ f_side , 8 ] ) = 0 then
15082: LD_INT 22
15084: PUSH
15085: LD_INT 8
15087: PUSH
15088: EMPTY
15089: LIST
15090: LIST
15091: PPUSH
15092: CALL_OW 69
15096: PUSH
15097: LD_INT 0
15099: EQUAL
15100: IFFALSE 15114
// AddMedal ( vulc_2 , 1 ) else
15102: LD_STRING vulc_2
15104: PPUSH
15105: LD_INT 1
15107: PPUSH
15108: CALL_OW 101
15112: GO 15125
// AddMedal ( vulc_2 , - 1 ) ;
15114: LD_STRING vulc_2
15116: PPUSH
15117: LD_INT 1
15119: NEG
15120: PPUSH
15121: CALL_OW 101
// points := CalculateCommanderPoints ;
15125: LD_ADDR_VAR 0 2
15129: PUSH
15130: CALL 2376 0 0
15134: ST_TO_ADDR
// if points >= 2000 then
15135: LD_VAR 0 2
15139: PUSH
15140: LD_INT 2000
15142: GREATEREQUAL
15143: IFFALSE 15157
// AddMedal ( vulc_3 , 2 ) else
15145: LD_STRING vulc_3
15147: PPUSH
15148: LD_INT 2
15150: PPUSH
15151: CALL_OW 101
15155: GO 15190
// if points >= 0 then
15157: LD_VAR 0 2
15161: PUSH
15162: LD_INT 0
15164: GREATEREQUAL
15165: IFFALSE 15179
// AddMedal ( vulc_3 , 1 ) else
15167: LD_STRING vulc_3
15169: PPUSH
15170: LD_INT 1
15172: PPUSH
15173: CALL_OW 101
15177: GO 15190
// AddMedal ( vulc_3 , - 1 ) ;
15179: LD_STRING vulc_3
15181: PPUSH
15182: LD_INT 1
15184: NEG
15185: PPUSH
15186: CALL_OW 101
// GiveMedals ( MAIN ) ;
15190: LD_STRING MAIN
15192: PPUSH
15193: CALL_OW 102
// YouWin ;
15197: CALL_OW 103
// end ; end_of_file
15201: LD_VAR 0 1
15205: RET
// every 0 0$01 trigger FilterUnitsInArea ( vulcano_area , [ f_type , unit_human ] ) do var i , un ;
15206: LD_INT 13
15208: PPUSH
15209: LD_INT 21
15211: PUSH
15212: LD_INT 1
15214: PUSH
15215: EMPTY
15216: LIST
15217: LIST
15218: PPUSH
15219: CALL_OW 70
15223: IFFALSE 15283
15225: GO 15227
15227: DISABLE
15228: LD_INT 0
15230: PPUSH
15231: PPUSH
// begin enable ;
15232: ENABLE
// for i in FilterUnitsInArea ( vulcano_area , [ f_type , unit_human ] ) do
15233: LD_ADDR_VAR 0 1
15237: PUSH
15238: LD_INT 13
15240: PPUSH
15241: LD_INT 21
15243: PUSH
15244: LD_INT 1
15246: PUSH
15247: EMPTY
15248: LIST
15249: LIST
15250: PPUSH
15251: CALL_OW 70
15255: PUSH
15256: FOR_IN
15257: IFFALSE 15281
// if GetLives ( i ) then
15259: LD_VAR 0 1
15263: PPUSH
15264: CALL_OW 256
15268: IFFALSE 15279
// KillUnit ( i ) ;
15270: LD_VAR 0 1
15274: PPUSH
15275: CALL_OW 66
15279: GO 15256
15281: POP
15282: POP
// end ;
15283: PPOPN 2
15285: END
// on ArtifactResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
15286: LD_VAR 0 1
15290: PPUSH
15291: CALL_OW 255
15295: PUSH
15296: LD_OWVAR 2
15300: EQUAL
15301: IFFALSE 15311
// player_res_art := true ;
15303: LD_ADDR_EXP 6
15307: PUSH
15308: LD_INT 1
15310: ST_TO_ADDR
// end ;
15311: PPOPN 1
15313: END
// every 0 0$03 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) and player_res_art do var xy , lab ;
15314: LD_INT 22
15316: PUSH
15317: LD_OWVAR 2
15321: PUSH
15322: EMPTY
15323: LIST
15324: LIST
15325: PUSH
15326: LD_INT 2
15328: PUSH
15329: LD_INT 30
15331: PUSH
15332: LD_INT 7
15334: PUSH
15335: EMPTY
15336: LIST
15337: LIST
15338: PUSH
15339: LD_INT 30
15341: PUSH
15342: LD_INT 8
15344: PUSH
15345: EMPTY
15346: LIST
15347: LIST
15348: PUSH
15349: LD_INT 30
15351: PUSH
15352: LD_INT 11
15354: PUSH
15355: EMPTY
15356: LIST
15357: LIST
15358: PUSH
15359: EMPTY
15360: LIST
15361: LIST
15362: LIST
15363: LIST
15364: PUSH
15365: EMPTY
15366: LIST
15367: LIST
15368: PPUSH
15369: CALL_OW 69
15373: PUSH
15374: LD_EXP 6
15378: AND
15379: IFFALSE 15736
15381: GO 15383
15383: DISABLE
15384: LD_INT 0
15386: PPUSH
15387: PPUSH
// begin enable ;
15388: ENABLE
// xy := FindArtifact ( 1 ) ;
15389: LD_ADDR_VAR 0 1
15393: PUSH
15394: LD_INT 1
15396: PPUSH
15397: CALL_OW 469
15401: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_siberium ] ] ] ) , xy [ 1 ] , xy [ 2 ] ) ;
15402: LD_ADDR_VAR 0 2
15406: PUSH
15407: LD_INT 22
15409: PUSH
15410: LD_OWVAR 2
15414: PUSH
15415: EMPTY
15416: LIST
15417: LIST
15418: PUSH
15419: LD_INT 2
15421: PUSH
15422: LD_INT 30
15424: PUSH
15425: LD_INT 8
15427: PUSH
15428: EMPTY
15429: LIST
15430: LIST
15431: PUSH
15432: LD_INT 30
15434: PUSH
15435: LD_INT 7
15437: PUSH
15438: EMPTY
15439: LIST
15440: LIST
15441: PUSH
15442: LD_INT 30
15444: PUSH
15445: LD_INT 11
15447: PUSH
15448: EMPTY
15449: LIST
15450: LIST
15451: PUSH
15452: EMPTY
15453: LIST
15454: LIST
15455: LIST
15456: LIST
15457: PUSH
15458: EMPTY
15459: LIST
15460: LIST
15461: PPUSH
15462: CALL_OW 69
15466: PPUSH
15467: LD_VAR 0 1
15471: PUSH
15472: LD_INT 1
15474: ARRAY
15475: PPUSH
15476: LD_VAR 0 1
15480: PUSH
15481: LD_INT 2
15483: ARRAY
15484: PPUSH
15485: CALL_OW 73
15489: ST_TO_ADDR
// if player_artifact_ready = false then
15490: LD_EXP 8
15494: PUSH
15495: LD_INT 0
15497: EQUAL
15498: IFFALSE 15612
// if GetDistUnitXY ( lab , xy [ 1 ] , xy [ 2 ] ) < 6 then
15500: LD_VAR 0 2
15504: PPUSH
15505: LD_VAR 0 1
15509: PUSH
15510: LD_INT 1
15512: ARRAY
15513: PPUSH
15514: LD_VAR 0 1
15518: PUSH
15519: LD_INT 2
15521: ARRAY
15522: PPUSH
15523: CALL_OW 297
15527: PUSH
15528: LD_INT 6
15530: LESS
15531: IFFALSE 15592
// begin if BuildingStatus ( lab ) = bs_idle then
15533: LD_VAR 0 2
15537: PPUSH
15538: CALL_OW 461
15542: PUSH
15543: LD_INT 2
15545: EQUAL
15546: IFFALSE 15570
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) else
15548: LD_OWVAR 2
15552: PPUSH
15553: LD_INT 1
15555: PPUSH
15556: LD_INT 2
15558: PPUSH
15559: LD_VAR 0 2
15563: PPUSH
15564: CALL_OW 468
15568: GO 15590
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
15570: LD_OWVAR 2
15574: PPUSH
15575: LD_INT 1
15577: PPUSH
15578: LD_INT 1
15580: PPUSH
15581: LD_VAR 0 2
15585: PPUSH
15586: CALL_OW 468
// end else
15590: GO 15612
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
15592: LD_OWVAR 2
15596: PPUSH
15597: LD_INT 1
15599: PPUSH
15600: LD_INT 1
15602: PPUSH
15603: LD_VAR 0 2
15607: PPUSH
15608: CALL_OW 468
// if player_artifact_ready then
15612: LD_EXP 8
15616: IFFALSE 15736
// if GetDistUnitXY ( lab , xy [ 1 ] , xy [ 2 ] ) < 6 then
15618: LD_VAR 0 2
15622: PPUSH
15623: LD_VAR 0 1
15627: PUSH
15628: LD_INT 1
15630: ARRAY
15631: PPUSH
15632: LD_VAR 0 1
15636: PUSH
15637: LD_INT 2
15639: ARRAY
15640: PPUSH
15641: CALL_OW 297
15645: PUSH
15646: LD_INT 6
15648: LESS
15649: IFFALSE 15714
// begin if BuildingStatus ( lab ) = bs_idle then
15651: LD_VAR 0 2
15655: PPUSH
15656: CALL_OW 461
15660: PUSH
15661: LD_INT 2
15663: EQUAL
15664: IFFALSE 15690
// SetArtifactUse ( your_side , art_icon , art_unit , lab ) else
15666: LD_OWVAR 2
15670: PPUSH
15671: LD_EXP 9
15675: PPUSH
15676: LD_INT 4
15678: PPUSH
15679: LD_VAR 0 2
15683: PPUSH
15684: CALL_OW 468
15688: GO 15712
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
15690: LD_OWVAR 2
15694: PPUSH
15695: LD_EXP 9
15699: PPUSH
15700: LD_INT 1
15702: PPUSH
15703: LD_VAR 0 2
15707: PPUSH
15708: CALL_OW 468
// end else
15712: GO 15736
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
15714: LD_OWVAR 2
15718: PPUSH
15719: LD_EXP 9
15723: PPUSH
15724: LD_INT 1
15726: PPUSH
15727: LD_VAR 0 2
15731: PPUSH
15732: CALL_OW 468
// end ;
15736: PPOPN 2
15738: END
// on ArtifactUsed ( s , icon , cr1 , cr2 ) do var xy , i , lab , side ;
15739: LD_INT 0
15741: PPUSH
15742: PPUSH
15743: PPUSH
15744: PPUSH
// begin xy := FindArtifact ( 1 ) ;
15745: LD_ADDR_VAR 0 5
15749: PUSH
15750: LD_INT 1
15752: PPUSH
15753: CALL_OW 469
15757: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , xy [ 1 ] , xy [ 2 ] ) ;
15758: LD_ADDR_VAR 0 7
15762: PUSH
15763: LD_INT 22
15765: PUSH
15766: LD_OWVAR 2
15770: PUSH
15771: EMPTY
15772: LIST
15773: LIST
15774: PUSH
15775: LD_INT 2
15777: PUSH
15778: LD_INT 30
15780: PUSH
15781: LD_INT 8
15783: PUSH
15784: EMPTY
15785: LIST
15786: LIST
15787: PUSH
15788: LD_INT 30
15790: PUSH
15791: LD_INT 11
15793: PUSH
15794: EMPTY
15795: LIST
15796: LIST
15797: PUSH
15798: EMPTY
15799: LIST
15800: LIST
15801: LIST
15802: PUSH
15803: EMPTY
15804: LIST
15805: LIST
15806: PPUSH
15807: CALL_OW 69
15811: PPUSH
15812: LD_VAR 0 5
15816: PUSH
15817: LD_INT 1
15819: ARRAY
15820: PPUSH
15821: LD_VAR 0 5
15825: PUSH
15826: LD_INT 2
15828: ARRAY
15829: PPUSH
15830: CALL_OW 73
15834: ST_TO_ADDR
// if icon = art_exp_left then
15835: LD_VAR 0 2
15839: PUSH
15840: LD_INT 1
15842: EQUAL
15843: IFFALSE 15896
// begin SetSpecResearch ( lab , time_res_art , true ) ;
15845: LD_VAR 0 7
15849: PPUSH
15850: LD_EXP 10
15854: PPUSH
15855: LD_INT 1
15857: PPUSH
15858: CALL_OW 486
// SetWorkingProgress ( lab , artifact_progress ) ;
15862: LD_VAR 0 7
15866: PPUSH
15867: LD_EXP 7
15871: PPUSH
15872: CALL_OW 329
// SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
15876: LD_OWVAR 2
15880: PPUSH
15881: LD_INT 1
15883: PPUSH
15884: LD_INT 0
15886: PPUSH
15887: LD_VAR 0 7
15891: PPUSH
15892: CALL_OW 468
// end ; if icon = art_icon then
15896: LD_VAR 0 2
15900: PUSH
15901: LD_EXP 9
15905: EQUAL
15906: IFFALSE 16139
// begin if cr1 in FilterAllUnits ( [ f_type , unit_building ] ) then
15908: LD_VAR 0 3
15912: PUSH
15913: LD_INT 21
15915: PUSH
15916: LD_INT 3
15918: PUSH
15919: EMPTY
15920: LIST
15921: LIST
15922: PPUSH
15923: CALL_OW 69
15927: IN
15928: IFFALSE 16139
// begin side := GetSide ( cr1 ) ;
15930: LD_ADDR_VAR 0 8
15934: PUSH
15935: LD_VAR 0 3
15939: PPUSH
15940: CALL_OW 255
15944: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_siberite_power ] ] ) > 0 then
15945: LD_INT 22
15947: PUSH
15948: LD_VAR 0 8
15952: PUSH
15953: EMPTY
15954: LIST
15955: LIST
15956: PUSH
15957: LD_INT 30
15959: PUSH
15960: LD_INT 28
15962: PUSH
15963: EMPTY
15964: LIST
15965: LIST
15966: PUSH
15967: EMPTY
15968: LIST
15969: LIST
15970: PPUSH
15971: CALL_OW 69
15975: PUSH
15976: LD_INT 0
15978: GREATER
15979: IFFALSE 16139
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_solar_power ] , [ f_btype , b_siberite_power ] ] ] ) do
15981: LD_ADDR_VAR 0 6
15985: PUSH
15986: LD_INT 22
15988: PUSH
15989: LD_VAR 0 8
15993: PUSH
15994: EMPTY
15995: LIST
15996: LIST
15997: PUSH
15998: LD_INT 2
16000: PUSH
16001: LD_INT 30
16003: PUSH
16004: LD_INT 26
16006: PUSH
16007: EMPTY
16008: LIST
16009: LIST
16010: PUSH
16011: LD_INT 30
16013: PUSH
16014: LD_INT 27
16016: PUSH
16017: EMPTY
16018: LIST
16019: LIST
16020: PUSH
16021: LD_INT 30
16023: PUSH
16024: LD_INT 28
16026: PUSH
16027: EMPTY
16028: LIST
16029: LIST
16030: PUSH
16031: EMPTY
16032: LIST
16033: LIST
16034: LIST
16035: LIST
16036: PUSH
16037: EMPTY
16038: LIST
16039: LIST
16040: PPUSH
16041: CALL_OW 69
16045: PUSH
16046: FOR_IN
16047: IFFALSE 16060
// KillUnit ( i ) ;
16049: LD_VAR 0 6
16053: PPUSH
16054: CALL_OW 66
16058: GO 16046
16060: POP
16061: POP
// medal_enabled := true ;
16062: LD_ADDR_EXP 14
16066: PUSH
16067: LD_INT 1
16069: ST_TO_ADDR
// player_res_art := false ;
16070: LD_ADDR_EXP 6
16074: PUSH
16075: LD_INT 0
16077: ST_TO_ADDR
// SetArtifactUse ( your_side , art_icon , art_gray , lab ) ;
16078: LD_OWVAR 2
16082: PPUSH
16083: LD_EXP 9
16087: PPUSH
16088: LD_INT 1
16090: PPUSH
16091: LD_VAR 0 7
16095: PPUSH
16096: CALL_OW 468
// wait ( time_to_reuse ) ;
16100: LD_EXP 12
16104: PPUSH
16105: CALL_OW 67
// SetArtifactUse ( your_side , art_icon , art_unit , lab ) ;
16109: LD_OWVAR 2
16113: PPUSH
16114: LD_EXP 9
16118: PPUSH
16119: LD_INT 4
16121: PPUSH
16122: LD_VAR 0 7
16126: PPUSH
16127: CALL_OW 468
// player_res_art := true ;
16131: LD_ADDR_EXP 6
16135: PUSH
16136: LD_INT 1
16138: ST_TO_ADDR
// end ; end ; end ; end ;
16139: PPOPN 8
16141: END
// on SpecResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
16142: LD_VAR 0 1
16146: PPUSH
16147: CALL_OW 255
16151: PUSH
16152: LD_OWVAR 2
16156: EQUAL
16157: IFFALSE 16194
// begin SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
16159: LD_OWVAR 2
16163: PPUSH
16164: LD_INT 1
16166: PPUSH
16167: LD_INT 0
16169: PPUSH
16170: LD_VAR 0 1
16174: PPUSH
16175: CALL_OW 468
// player_artifact_ready := true ;
16179: LD_ADDR_EXP 8
16183: PUSH
16184: LD_INT 1
16186: ST_TO_ADDR
// Hint ( ArtVulcano ) ;
16187: LD_STRING ArtVulcano
16189: PPUSH
16190: CALL_OW 339
// end ; end ;
16194: PPOPN 1
16196: END
// on SpecResearchCancel ( lab , progress ) do begin artifact_progress := progress ;
16197: LD_ADDR_EXP 7
16201: PUSH
16202: LD_VAR 0 2
16206: ST_TO_ADDR
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) ;
16207: LD_OWVAR 2
16211: PPUSH
16212: LD_INT 1
16214: PPUSH
16215: LD_INT 2
16217: PPUSH
16218: LD_VAR 0 1
16222: PPUSH
16223: CALL_OW 468
// end ; end_of_file end_of_file
16227: PPOPN 2
16229: END
// export al_commander , al_force , al_skill ; export function PrepareAlliance ; var i , filter , un , team ; begin
16230: LD_INT 0
16232: PPUSH
16233: PPUSH
16234: PPUSH
16235: PPUSH
16236: PPUSH
// al_skill := [ 7 , 6 , 5 ] [ Difficulty ] ;
16237: LD_ADDR_EXP 45
16241: PUSH
16242: LD_INT 7
16244: PUSH
16245: LD_INT 6
16247: PUSH
16248: LD_INT 5
16250: PUSH
16251: EMPTY
16252: LIST
16253: LIST
16254: LIST
16255: PUSH
16256: LD_OWVAR 67
16260: ARRAY
16261: ST_TO_ADDR
// al_force := [ ] ;
16262: LD_ADDR_EXP 44
16266: PUSH
16267: EMPTY
16268: ST_TO_ADDR
// RemoveAlliance ;
16269: CALL 16962 0 0
// ResetFog ;
16273: CALL_OW 335
// your_side := 7 ;
16277: LD_ADDR_OWVAR 2
16281: PUSH
16282: LD_INT 7
16284: ST_TO_ADDR
// uc_side := 7 ;
16285: LD_ADDR_OWVAR 20
16289: PUSH
16290: LD_INT 7
16292: ST_TO_ADDR
// hc_gallery :=  ;
16293: LD_ADDR_OWVAR 33
16297: PUSH
16298: LD_STRING 
16300: ST_TO_ADDR
// hc_name :=  ;
16301: LD_ADDR_OWVAR 26
16305: PUSH
16306: LD_STRING 
16308: ST_TO_ADDR
// hc_importance := 0 ;
16309: LD_ADDR_OWVAR 32
16313: PUSH
16314: LD_INT 0
16316: ST_TO_ADDR
// for i = 1 to 17 do
16317: LD_ADDR_VAR 0 2
16321: PUSH
16322: DOUBLE
16323: LD_INT 1
16325: DEC
16326: ST_TO_ADDR
16327: LD_INT 17
16329: PUSH
16330: FOR_TO
16331: IFFALSE 16411
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
16333: LD_ADDR_OWVAR 21
16337: PUSH
16338: LD_INT 1
16340: PUSH
16341: LD_INT 3
16343: PUSH
16344: EMPTY
16345: LIST
16346: LIST
16347: PUSH
16348: LD_INT 1
16350: PPUSH
16351: LD_INT 2
16353: PPUSH
16354: CALL_OW 12
16358: ARRAY
16359: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , al_skill ) ;
16360: LD_INT 0
16362: PPUSH
16363: LD_INT 1
16365: PPUSH
16366: LD_INT 4
16368: PPUSH
16369: CALL_OW 12
16373: PPUSH
16374: LD_EXP 45
16378: PPUSH
16379: CALL_OW 380
// un := CreateHuman ;
16383: LD_ADDR_VAR 0 4
16387: PUSH
16388: CALL_OW 44
16392: ST_TO_ADDR
// al_force := al_force ^ un ;
16393: LD_ADDR_EXP 44
16397: PUSH
16398: LD_EXP 44
16402: PUSH
16403: LD_VAR 0 4
16407: ADD
16408: ST_TO_ADDR
// end ;
16409: GO 16330
16411: POP
16412: POP
// hc_importance := 100 ;
16413: LD_ADDR_OWVAR 32
16417: PUSH
16418: LD_INT 100
16420: ST_TO_ADDR
// uc_nation := 3 ;
16421: LD_ADDR_OWVAR 21
16425: PUSH
16426: LD_INT 3
16428: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , al_skill ) ;
16429: LD_INT 1
16431: PPUSH
16432: LD_INT 1
16434: PPUSH
16435: LD_EXP 45
16439: PPUSH
16440: CALL_OW 380
// hc_gallery := skirmish ;
16444: LD_ADDR_OWVAR 33
16448: PUSH
16449: LD_STRING skirmish
16451: ST_TO_ADDR
// hc_face_number := 8 ;
16452: LD_ADDR_OWVAR 34
16456: PUSH
16457: LD_INT 8
16459: ST_TO_ADDR
// hc_name := Trofim Petya ;
16460: LD_ADDR_OWVAR 26
16464: PUSH
16465: LD_STRING Trofim Petya
16467: ST_TO_ADDR
// al_commander := CreateHuman ;
16468: LD_ADDR_EXP 43
16472: PUSH
16473: CALL_OW 44
16477: ST_TO_ADDR
// player_commander := al_commander ;
16478: LD_ADDR_EXP 11
16482: PUSH
16483: LD_EXP 43
16487: ST_TO_ADDR
// hc_importance := 0 ;
16488: LD_ADDR_OWVAR 32
16492: PUSH
16493: LD_INT 0
16495: ST_TO_ADDR
// hc_gallery :=  ;
16496: LD_ADDR_OWVAR 33
16500: PUSH
16501: LD_STRING 
16503: ST_TO_ADDR
// team := CharacterSelection ( text , [ 9 , 9 , 8 ] [ Difficulty ] , [ 9 , 9 , 8 ] [ Difficulty ] , [ sel_change_class , al_commander , sel_changeable , sel_not_hired ] ^ al_force , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , class_bazooker , class_sniper ] ) ;
16504: LD_ADDR_VAR 0 5
16508: PUSH
16509: LD_STRING text
16511: PPUSH
16512: LD_INT 9
16514: PUSH
16515: LD_INT 9
16517: PUSH
16518: LD_INT 8
16520: PUSH
16521: EMPTY
16522: LIST
16523: LIST
16524: LIST
16525: PUSH
16526: LD_OWVAR 67
16530: ARRAY
16531: PPUSH
16532: LD_INT 9
16534: PUSH
16535: LD_INT 9
16537: PUSH
16538: LD_INT 8
16540: PUSH
16541: EMPTY
16542: LIST
16543: LIST
16544: LIST
16545: PUSH
16546: LD_OWVAR 67
16550: ARRAY
16551: PPUSH
16552: LD_INT -5
16554: PUSH
16555: LD_EXP 43
16559: PUSH
16560: LD_INT -3
16562: PUSH
16563: LD_INT -2
16565: PUSH
16566: EMPTY
16567: LIST
16568: LIST
16569: LIST
16570: LIST
16571: PUSH
16572: LD_EXP 44
16576: ADD
16577: PPUSH
16578: LD_INT 1
16580: PUSH
16581: LD_INT 3
16583: PUSH
16584: LD_INT 2
16586: PUSH
16587: LD_INT 1
16589: PUSH
16590: EMPTY
16591: LIST
16592: LIST
16593: PUSH
16594: LD_INT 4
16596: PUSH
16597: LD_INT 1
16599: PUSH
16600: EMPTY
16601: LIST
16602: LIST
16603: PUSH
16604: LD_INT 9
16606: PUSH
16607: LD_INT 5
16609: PUSH
16610: EMPTY
16611: LIST
16612: LIST
16613: LIST
16614: LIST
16615: LIST
16616: LIST
16617: PPUSH
16618: CALL_OW 42
16622: ST_TO_ADDR
// team := team ^ al_commander ;
16623: LD_ADDR_VAR 0 5
16627: PUSH
16628: LD_VAR 0 5
16632: PUSH
16633: LD_EXP 43
16637: ADD
16638: ST_TO_ADDR
// for i = 1 to team do
16639: LD_ADDR_VAR 0 2
16643: PUSH
16644: DOUBLE
16645: LD_INT 1
16647: DEC
16648: ST_TO_ADDR
16649: LD_VAR 0 5
16653: PUSH
16654: FOR_TO
16655: IFFALSE 16955
// begin if GetClass ( team [ i ] ) = class_mechanic then
16657: LD_VAR 0 5
16661: PUSH
16662: LD_VAR 0 2
16666: ARRAY
16667: PPUSH
16668: CALL_OW 257
16672: PUSH
16673: LD_INT 3
16675: EQUAL
16676: IFFALSE 16932
// begin uc_nation := [ 1 , 3 ] [ rand ( 1 , 2 ) ] ;
16678: LD_ADDR_OWVAR 21
16682: PUSH
16683: LD_INT 1
16685: PUSH
16686: LD_INT 3
16688: PUSH
16689: EMPTY
16690: LIST
16691: LIST
16692: PUSH
16693: LD_INT 1
16695: PPUSH
16696: LD_INT 2
16698: PPUSH
16699: CALL_OW 12
16703: ARRAY
16704: ST_TO_ADDR
// if uc_nation = 1 then
16705: LD_OWVAR 21
16709: PUSH
16710: LD_INT 1
16712: EQUAL
16713: IFFALSE 16797
// begin vc_chassis := [ us_medium_tracked , us_heavy_tracked , us_morphling ] [ i mod 3 + 1 ] ;
16715: LD_ADDR_OWVAR 37
16719: PUSH
16720: LD_INT 3
16722: PUSH
16723: LD_INT 4
16725: PUSH
16726: LD_INT 5
16728: PUSH
16729: EMPTY
16730: LIST
16731: LIST
16732: LIST
16733: PUSH
16734: LD_VAR 0 2
16738: PUSH
16739: LD_INT 3
16741: MOD
16742: PUSH
16743: LD_INT 1
16745: PLUS
16746: ARRAY
16747: ST_TO_ADDR
// vc_engine := engine_siberite ;
16748: LD_ADDR_OWVAR 39
16752: PUSH
16753: LD_INT 3
16755: ST_TO_ADDR
// vc_control := control_manual ;
16756: LD_ADDR_OWVAR 38
16760: PUSH
16761: LD_INT 1
16763: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_laser ] [ rand ( 1 , 3 ) ] ;
16764: LD_ADDR_OWVAR 40
16768: PUSH
16769: LD_INT 4
16771: PUSH
16772: LD_INT 5
16774: PUSH
16775: LD_INT 9
16777: PUSH
16778: EMPTY
16779: LIST
16780: LIST
16781: LIST
16782: PUSH
16783: LD_INT 1
16785: PPUSH
16786: LD_INT 3
16788: PPUSH
16789: CALL_OW 12
16793: ARRAY
16794: ST_TO_ADDR
// end else
16795: GO 16873
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] ;
16797: LD_ADDR_OWVAR 37
16801: PUSH
16802: LD_INT 21
16804: PUSH
16805: LD_INT 23
16807: PUSH
16808: EMPTY
16809: LIST
16810: LIST
16811: PUSH
16812: LD_VAR 0 2
16816: PUSH
16817: LD_INT 2
16819: MOD
16820: PUSH
16821: LD_INT 1
16823: PLUS
16824: ARRAY
16825: ST_TO_ADDR
// vc_engine := engine_siberite ;
16826: LD_ADDR_OWVAR 39
16830: PUSH
16831: LD_INT 3
16833: ST_TO_ADDR
// vc_control := control_manual ;
16834: LD_ADDR_OWVAR 38
16838: PUSH
16839: LD_INT 1
16841: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_rocket_launcher , ru_gatling_gun ] [ rand ( 1 , 3 ) ] ;
16842: LD_ADDR_OWVAR 40
16846: PUSH
16847: LD_INT 44
16849: PUSH
16850: LD_INT 45
16852: PUSH
16853: LD_INT 43
16855: PUSH
16856: EMPTY
16857: LIST
16858: LIST
16859: LIST
16860: PUSH
16861: LD_INT 1
16863: PPUSH
16864: LD_INT 3
16866: PPUSH
16867: CALL_OW 12
16871: ARRAY
16872: ST_TO_ADDR
// end ; un := CreateVehicle ;
16873: LD_ADDR_VAR 0 4
16877: PUSH
16878: CALL_OW 45
16882: ST_TO_ADDR
// SetDir ( un , 5 ) ;
16883: LD_VAR 0 4
16887: PPUSH
16888: LD_INT 5
16890: PPUSH
16891: CALL_OW 233
// PlaceUnitArea ( un , south_resp , false ) ;
16895: LD_VAR 0 4
16899: PPUSH
16900: LD_INT 15
16902: PPUSH
16903: LD_INT 0
16905: PPUSH
16906: CALL_OW 49
// PlaceHumanInUnit ( team [ i ] , un ) ;
16910: LD_VAR 0 5
16914: PUSH
16915: LD_VAR 0 2
16919: ARRAY
16920: PPUSH
16921: LD_VAR 0 4
16925: PPUSH
16926: CALL_OW 52
// end else
16930: GO 16953
// PlaceUnitArea ( team [ i ] , south_resp , false ) ;
16932: LD_VAR 0 5
16936: PUSH
16937: LD_VAR 0 2
16941: ARRAY
16942: PPUSH
16943: LD_INT 15
16945: PPUSH
16946: LD_INT 0
16948: PPUSH
16949: CALL_OW 49
// end ;
16953: GO 16654
16955: POP
16956: POP
// end ;
16957: LD_VAR 0 1
16961: RET
// export function RemoveAlliance ; var i ; begin
16962: LD_INT 0
16964: PPUSH
16965: PPUSH
// DestroyUnit ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
16966: LD_INT 22
16968: PUSH
16969: LD_INT 7
16971: PUSH
16972: EMPTY
16973: LIST
16974: LIST
16975: PUSH
16976: LD_INT 30
16978: PUSH
16979: LD_INT 1
16981: PUSH
16982: EMPTY
16983: LIST
16984: LIST
16985: PUSH
16986: EMPTY
16987: LIST
16988: LIST
16989: PPUSH
16990: CALL_OW 69
16994: PUSH
16995: LD_INT 1
16997: ARRAY
16998: PPUSH
16999: CALL_OW 65
// for i in FilterAllUnits ( [ f_side , 7 ] ) do
17003: LD_ADDR_VAR 0 2
17007: PUSH
17008: LD_INT 22
17010: PUSH
17011: LD_INT 7
17013: PUSH
17014: EMPTY
17015: LIST
17016: LIST
17017: PPUSH
17018: CALL_OW 69
17022: PUSH
17023: FOR_IN
17024: IFFALSE 17037
// RemoveUnit ( i ) ;
17026: LD_VAR 0 2
17030: PPUSH
17031: CALL_OW 64
17035: GO 17023
17037: POP
17038: POP
// end ;
17039: LD_VAR 0 1
17043: RET
// export function PrepareAllianceAI ; var i , un , b ; begin
17044: LD_INT 0
17046: PPUSH
17047: PPUSH
17048: PPUSH
17049: PPUSH
// SetTech ( tech_lapser , 7 , state_researched ) ;
17050: LD_INT 31
17052: PPUSH
17053: LD_INT 7
17055: PPUSH
17056: LD_INT 2
17058: PPUSH
17059: CALL_OW 322
// SetTech ( tech_ai , 7 , state_researched ) ;
17063: LD_INT 32
17065: PPUSH
17066: LD_INT 7
17068: PPUSH
17069: LD_INT 2
17071: PPUSH
17072: CALL_OW 322
// SetTech ( tech_comp3 , 7 , state_researched ) ;
17076: LD_INT 59
17078: PPUSH
17079: LD_INT 7
17081: PPUSH
17082: LD_INT 2
17084: PPUSH
17085: CALL_OW 322
// al_skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
17089: LD_ADDR_EXP 45
17093: PUSH
17094: LD_INT 5
17096: PUSH
17097: LD_INT 6
17099: PUSH
17100: LD_INT 7
17102: PUSH
17103: EMPTY
17104: LIST
17105: LIST
17106: LIST
17107: PUSH
17108: LD_OWVAR 67
17112: ARRAY
17113: ST_TO_ADDR
// al_force := [ ] ;
17114: LD_ADDR_EXP 44
17118: PUSH
17119: EMPTY
17120: ST_TO_ADDR
// al_vehs := [ ] ;
17121: LD_ADDR_EXP 50
17125: PUSH
17126: EMPTY
17127: ST_TO_ADDR
// uc_side := 7 ;
17128: LD_ADDR_OWVAR 20
17132: PUSH
17133: LD_INT 7
17135: ST_TO_ADDR
// uc_nation := 1 ;
17136: LD_ADDR_OWVAR 21
17140: PUSH
17141: LD_INT 1
17143: ST_TO_ADDR
// bc_type := b_oil_mine ;
17144: LD_ADDR_OWVAR 42
17148: PUSH
17149: LD_INT 29
17151: ST_TO_ADDR
// b := CreateBuilding ;
17152: LD_ADDR_VAR 0 4
17156: PUSH
17157: CALL_OW 46
17161: ST_TO_ADDR
// PlaceUnitXYR ( b , 61 , 7 , 0 , false ) ;
17162: LD_VAR 0 4
17166: PPUSH
17167: LD_INT 61
17169: PPUSH
17170: LD_INT 7
17172: PPUSH
17173: LD_INT 0
17175: PPUSH
17176: LD_INT 0
17178: PPUSH
17179: CALL_OW 50
// bc_type := b_siberite_mine ;
17183: LD_ADDR_OWVAR 42
17187: PUSH
17188: LD_INT 30
17190: ST_TO_ADDR
// b := CreateBuilding ;
17191: LD_ADDR_VAR 0 4
17195: PUSH
17196: CALL_OW 46
17200: ST_TO_ADDR
// PlaceUnitXYR ( b , 69 , 13 , 0 , false ) ;
17201: LD_VAR 0 4
17205: PPUSH
17206: LD_INT 69
17208: PPUSH
17209: LD_INT 13
17211: PPUSH
17212: LD_INT 0
17214: PPUSH
17215: LD_INT 0
17217: PPUSH
17218: CALL_OW 50
// hc_gallery :=  ;
17222: LD_ADDR_OWVAR 33
17226: PUSH
17227: LD_STRING 
17229: ST_TO_ADDR
// hc_name :=  ;
17230: LD_ADDR_OWVAR 26
17234: PUSH
17235: LD_STRING 
17237: ST_TO_ADDR
// hc_importance := 0 ;
17238: LD_ADDR_OWVAR 32
17242: PUSH
17243: LD_INT 0
17245: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_bunker ] ] ) do
17246: LD_ADDR_VAR 0 2
17250: PUSH
17251: LD_INT 22
17253: PUSH
17254: LD_INT 7
17256: PUSH
17257: EMPTY
17258: LIST
17259: LIST
17260: PUSH
17261: LD_INT 30
17263: PUSH
17264: LD_INT 32
17266: PUSH
17267: EMPTY
17268: LIST
17269: LIST
17270: PUSH
17271: EMPTY
17272: LIST
17273: LIST
17274: PPUSH
17275: CALL_OW 69
17279: PUSH
17280: FOR_IN
17281: IFFALSE 17351
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17283: LD_ADDR_OWVAR 21
17287: PUSH
17288: LD_INT 1
17290: PUSH
17291: LD_INT 3
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: PUSH
17298: LD_INT 1
17300: PPUSH
17301: LD_INT 2
17303: PPUSH
17304: CALL_OW 12
17308: ARRAY
17309: ST_TO_ADDR
// PrepareHuman ( false , 1 , al_skill ) ;
17310: LD_INT 0
17312: PPUSH
17313: LD_INT 1
17315: PPUSH
17316: LD_EXP 45
17320: PPUSH
17321: CALL_OW 380
// un := CreateHuman ;
17325: LD_ADDR_VAR 0 3
17329: PUSH
17330: CALL_OW 44
17334: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
17335: LD_VAR 0 3
17339: PPUSH
17340: LD_VAR 0 2
17344: PPUSH
17345: CALL_OW 52
// end ;
17349: GO 17280
17351: POP
17352: POP
// for i = 1 to 3 do
17353: LD_ADDR_VAR 0 2
17357: PUSH
17358: DOUBLE
17359: LD_INT 1
17361: DEC
17362: ST_TO_ADDR
17363: LD_INT 3
17365: PUSH
17366: FOR_TO
17367: IFFALSE 17435
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17369: LD_ADDR_OWVAR 21
17373: PUSH
17374: LD_INT 1
17376: PUSH
17377: LD_INT 3
17379: PUSH
17380: EMPTY
17381: LIST
17382: LIST
17383: PUSH
17384: LD_INT 1
17386: PPUSH
17387: LD_INT 2
17389: PPUSH
17390: CALL_OW 12
17394: ARRAY
17395: ST_TO_ADDR
// PrepareHuman ( false , 4 , al_skill ) ;
17396: LD_INT 0
17398: PPUSH
17399: LD_INT 4
17401: PPUSH
17402: LD_EXP 45
17406: PPUSH
17407: CALL_OW 380
// un := CreateHuman ;
17411: LD_ADDR_VAR 0 3
17415: PUSH
17416: CALL_OW 44
17420: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_lab1 ) ;
17421: LD_VAR 0 3
17425: PPUSH
17426: LD_INT 164
17428: PPUSH
17429: CALL_OW 52
// end ;
17433: GO 17366
17435: POP
17436: POP
// for i = 1 to 4 do
17437: LD_ADDR_VAR 0 2
17441: PUSH
17442: DOUBLE
17443: LD_INT 1
17445: DEC
17446: ST_TO_ADDR
17447: LD_INT 4
17449: PUSH
17450: FOR_TO
17451: IFFALSE 17542
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17453: LD_ADDR_OWVAR 21
17457: PUSH
17458: LD_INT 1
17460: PUSH
17461: LD_INT 3
17463: PUSH
17464: EMPTY
17465: LIST
17466: LIST
17467: PUSH
17468: LD_INT 1
17470: PPUSH
17471: LD_INT 2
17473: PPUSH
17474: CALL_OW 12
17478: ARRAY
17479: ST_TO_ADDR
// PrepareHuman ( false , [ class_sniper , class_bazooker , class_bazooker ] [ Rand ( 1 , 3 ) ] , al_skill ) ;
17480: LD_INT 0
17482: PPUSH
17483: LD_INT 5
17485: PUSH
17486: LD_INT 9
17488: PUSH
17489: LD_INT 9
17491: PUSH
17492: EMPTY
17493: LIST
17494: LIST
17495: LIST
17496: PUSH
17497: LD_INT 1
17499: PPUSH
17500: LD_INT 3
17502: PPUSH
17503: CALL_OW 12
17507: ARRAY
17508: PPUSH
17509: LD_EXP 45
17513: PPUSH
17514: CALL_OW 380
// un := CreateHuman ;
17518: LD_ADDR_VAR 0 3
17522: PUSH
17523: CALL_OW 44
17527: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_bar ) ;
17528: LD_VAR 0 3
17532: PPUSH
17533: LD_INT 173
17535: PPUSH
17536: CALL_OW 52
// end ;
17540: GO 17450
17542: POP
17543: POP
// for i = 1 to 4 do
17544: LD_ADDR_VAR 0 2
17548: PUSH
17549: DOUBLE
17550: LD_INT 1
17552: DEC
17553: ST_TO_ADDR
17554: LD_INT 4
17556: PUSH
17557: FOR_TO
17558: IFFALSE 17656
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17560: LD_ADDR_OWVAR 21
17564: PUSH
17565: LD_INT 1
17567: PUSH
17568: LD_INT 3
17570: PUSH
17571: EMPTY
17572: LIST
17573: LIST
17574: PUSH
17575: LD_INT 1
17577: PPUSH
17578: LD_INT 2
17580: PPUSH
17581: CALL_OW 12
17585: ARRAY
17586: ST_TO_ADDR
// PrepareHuman ( false , 3 , al_skill ) ;
17587: LD_INT 0
17589: PPUSH
17590: LD_INT 3
17592: PPUSH
17593: LD_EXP 45
17597: PPUSH
17598: CALL_OW 380
// un := CreateHuman ;
17602: LD_ADDR_VAR 0 3
17606: PUSH
17607: CALL_OW 44
17611: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
17612: LD_VAR 0 3
17616: PPUSH
17617: LD_INT 22
17619: PUSH
17620: LD_INT 7
17622: PUSH
17623: EMPTY
17624: LIST
17625: LIST
17626: PUSH
17627: LD_INT 30
17629: PUSH
17630: LD_INT 3
17632: PUSH
17633: EMPTY
17634: LIST
17635: LIST
17636: PUSH
17637: EMPTY
17638: LIST
17639: LIST
17640: PPUSH
17641: CALL_OW 69
17645: PUSH
17646: LD_INT 1
17648: ARRAY
17649: PPUSH
17650: CALL_OW 52
// end ;
17654: GO 17557
17656: POP
17657: POP
// for i = 1 to 4 do
17658: LD_ADDR_VAR 0 2
17662: PUSH
17663: DOUBLE
17664: LD_INT 1
17666: DEC
17667: ST_TO_ADDR
17668: LD_INT 4
17670: PUSH
17671: FOR_TO
17672: IFFALSE 17740
// begin uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
17674: LD_ADDR_OWVAR 21
17678: PUSH
17679: LD_INT 1
17681: PUSH
17682: LD_INT 3
17684: PUSH
17685: EMPTY
17686: LIST
17687: LIST
17688: PUSH
17689: LD_INT 1
17691: PPUSH
17692: LD_INT 2
17694: PPUSH
17695: CALL_OW 12
17699: ARRAY
17700: ST_TO_ADDR
// PrepareHuman ( false , 2 , al_skill ) ;
17701: LD_INT 0
17703: PPUSH
17704: LD_INT 2
17706: PPUSH
17707: LD_EXP 45
17711: PPUSH
17712: CALL_OW 380
// un := CreateHuman ;
17716: LD_ADDR_VAR 0 3
17720: PUSH
17721: CALL_OW 44
17725: ST_TO_ADDR
// PlaceHumanInUnit ( un , al_depot ) ;
17726: LD_VAR 0 3
17730: PPUSH
17731: LD_INT 162
17733: PPUSH
17734: CALL_OW 52
// end ;
17738: GO 17671
17740: POP
17741: POP
// uc_nation := 3 ;
17742: LD_ADDR_OWVAR 21
17746: PUSH
17747: LD_INT 3
17749: ST_TO_ADDR
// vc_chassis := ru_medium_wheeled ;
17750: LD_ADDR_OWVAR 37
17754: PUSH
17755: LD_INT 21
17757: ST_TO_ADDR
// vc_engine := engine_siberite ;
17758: LD_ADDR_OWVAR 39
17762: PUSH
17763: LD_INT 3
17765: ST_TO_ADDR
// vc_control := control_computer ;
17766: LD_ADDR_OWVAR 38
17770: PUSH
17771: LD_INT 3
17773: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
17774: LD_ADDR_OWVAR 40
17778: PUSH
17779: LD_INT 51
17781: ST_TO_ADDR
// PlaceUnitXY ( CreateVehicle , 49 , 13 , false ) ;
17782: CALL_OW 45
17786: PPUSH
17787: LD_INT 49
17789: PPUSH
17790: LD_INT 13
17792: PPUSH
17793: LD_INT 0
17795: PPUSH
17796: CALL_OW 48
// al_turrets := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_turret ] ] ) ;
17800: LD_ADDR_EXP 52
17804: PUSH
17805: LD_INT 22
17807: PUSH
17808: LD_INT 7
17810: PUSH
17811: EMPTY
17812: LIST
17813: LIST
17814: PUSH
17815: LD_INT 30
17817: PUSH
17818: LD_INT 33
17820: PUSH
17821: EMPTY
17822: LIST
17823: LIST
17824: PUSH
17825: EMPTY
17826: LIST
17827: LIST
17828: PPUSH
17829: CALL_OW 69
17833: ST_TO_ADDR
// for i = 1 to FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_btype , b_turret ] , [ f_bweapon , 0 ] ] ] ) do
17834: LD_ADDR_VAR 0 2
17838: PUSH
17839: DOUBLE
17840: LD_INT 1
17842: DEC
17843: ST_TO_ADDR
17844: LD_INT 22
17846: PUSH
17847: LD_INT 7
17849: PUSH
17850: EMPTY
17851: LIST
17852: LIST
17853: PUSH
17854: LD_INT 30
17856: PUSH
17857: LD_INT 33
17859: PUSH
17860: EMPTY
17861: LIST
17862: LIST
17863: PUSH
17864: LD_INT 35
17866: PUSH
17867: LD_INT 0
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: PUSH
17874: EMPTY
17875: LIST
17876: LIST
17877: LIST
17878: PUSH
17879: EMPTY
17880: LIST
17881: PPUSH
17882: CALL_OW 69
17886: PUSH
17887: FOR_TO
17888: IFFALSE 17948
// AddComPlaceWeapon ( FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_btype , b_turret ] , [ f_bweapon , 0 ] ] ] ) [ i ] , ru_time_lapser ) ;
17890: LD_INT 22
17892: PUSH
17893: LD_INT 7
17895: PUSH
17896: EMPTY
17897: LIST
17898: LIST
17899: PUSH
17900: LD_INT 30
17902: PUSH
17903: LD_INT 33
17905: PUSH
17906: EMPTY
17907: LIST
17908: LIST
17909: PUSH
17910: LD_INT 35
17912: PUSH
17913: LD_INT 0
17915: PUSH
17916: EMPTY
17917: LIST
17918: LIST
17919: PUSH
17920: EMPTY
17921: LIST
17922: LIST
17923: LIST
17924: PUSH
17925: EMPTY
17926: LIST
17927: PPUSH
17928: CALL_OW 69
17932: PUSH
17933: LD_VAR 0 2
17937: ARRAY
17938: PPUSH
17939: LD_INT 49
17941: PPUSH
17942: CALL_OW 208
17946: GO 17887
17948: POP
17949: POP
// end ;
17950: LD_VAR 0 1
17954: RET
// export al_eng , al_sold , al_mech , al_sci ; export al_vehs , al_cargo , al_turrets ; export al_dep , al_lab , al_fac ; export al_bul ; every 0 0$02 trigger your_side = 1 do var i , un , veh , cr ;
17955: LD_OWVAR 2
17959: PUSH
17960: LD_INT 1
17962: EQUAL
17963: IFFALSE 18949
17965: GO 17967
17967: DISABLE
17968: LD_INT 0
17970: PPUSH
17971: PPUSH
17972: PPUSH
17973: PPUSH
// begin enable ;
17974: ENABLE
// al_bul := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] ] ) ;
17975: LD_ADDR_EXP 56
17979: PUSH
17980: LD_INT 22
17982: PUSH
17983: LD_INT 7
17985: PUSH
17986: EMPTY
17987: LIST
17988: LIST
17989: PUSH
17990: LD_INT 21
17992: PUSH
17993: LD_INT 3
17995: PUSH
17996: EMPTY
17997: LIST
17998: LIST
17999: PUSH
18000: EMPTY
18001: LIST
18002: LIST
18003: PPUSH
18004: CALL_OW 69
18008: ST_TO_ADDR
// al_lab := [ al_lab1 , al_lab2 ] ;
18009: LD_ADDR_EXP 54
18013: PUSH
18014: LD_INT 164
18016: PUSH
18017: LD_INT 197
18019: PUSH
18020: EMPTY
18021: LIST
18022: LIST
18023: ST_TO_ADDR
// al_dep := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
18024: LD_ADDR_EXP 53
18028: PUSH
18029: LD_INT 22
18031: PUSH
18032: LD_INT 7
18034: PUSH
18035: EMPTY
18036: LIST
18037: LIST
18038: PUSH
18039: LD_INT 30
18041: PUSH
18042: LD_INT 1
18044: PUSH
18045: EMPTY
18046: LIST
18047: LIST
18048: PUSH
18049: EMPTY
18050: LIST
18051: LIST
18052: PPUSH
18053: CALL_OW 69
18057: PUSH
18058: LD_INT 1
18060: ARRAY
18061: ST_TO_ADDR
// al_fac := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
18062: LD_ADDR_EXP 55
18066: PUSH
18067: LD_INT 22
18069: PUSH
18070: LD_INT 7
18072: PUSH
18073: EMPTY
18074: LIST
18075: LIST
18076: PUSH
18077: LD_INT 30
18079: PUSH
18080: LD_INT 3
18082: PUSH
18083: EMPTY
18084: LIST
18085: LIST
18086: PUSH
18087: EMPTY
18088: LIST
18089: LIST
18090: PPUSH
18091: CALL_OW 69
18095: PUSH
18096: LD_INT 1
18098: ARRAY
18099: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) then
18100: LD_INT 22
18102: PUSH
18103: LD_INT 7
18105: PUSH
18106: EMPTY
18107: LIST
18108: LIST
18109: PUSH
18110: LD_INT 34
18112: PUSH
18113: LD_INT 51
18115: PUSH
18116: EMPTY
18117: LIST
18118: LIST
18119: PUSH
18120: EMPTY
18121: LIST
18122: LIST
18123: PPUSH
18124: CALL_OW 69
18128: IFFALSE 18168
// al_cargo := FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) [ 1 ] ;
18130: LD_ADDR_EXP 51
18134: PUSH
18135: LD_INT 22
18137: PUSH
18138: LD_INT 7
18140: PUSH
18141: EMPTY
18142: LIST
18143: LIST
18144: PUSH
18145: LD_INT 34
18147: PUSH
18148: LD_INT 51
18150: PUSH
18151: EMPTY
18152: LIST
18153: LIST
18154: PUSH
18155: EMPTY
18156: LIST
18157: LIST
18158: PPUSH
18159: CALL_OW 69
18163: PUSH
18164: LD_INT 1
18166: ARRAY
18167: ST_TO_ADDR
// al_sold := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , class_bazooker ] ] ) ;
18168: LD_ADDR_EXP 47
18172: PUSH
18173: LD_INT 22
18175: PUSH
18176: LD_INT 7
18178: PUSH
18179: EMPTY
18180: LIST
18181: LIST
18182: PUSH
18183: LD_INT 25
18185: PUSH
18186: LD_INT 9
18188: PUSH
18189: EMPTY
18190: LIST
18191: LIST
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PPUSH
18197: CALL_OW 69
18201: ST_TO_ADDR
// al_eng := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 2 ] ] ) ;
18202: LD_ADDR_EXP 46
18206: PUSH
18207: LD_INT 22
18209: PUSH
18210: LD_INT 7
18212: PUSH
18213: EMPTY
18214: LIST
18215: LIST
18216: PUSH
18217: LD_INT 25
18219: PUSH
18220: LD_INT 2
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: PUSH
18227: EMPTY
18228: LIST
18229: LIST
18230: PPUSH
18231: CALL_OW 69
18235: ST_TO_ADDR
// al_mech := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 3 ] ] ) ;
18236: LD_ADDR_EXP 48
18240: PUSH
18241: LD_INT 22
18243: PUSH
18244: LD_INT 7
18246: PUSH
18247: EMPTY
18248: LIST
18249: LIST
18250: PUSH
18251: LD_INT 25
18253: PUSH
18254: LD_INT 3
18256: PUSH
18257: EMPTY
18258: LIST
18259: LIST
18260: PUSH
18261: EMPTY
18262: LIST
18263: LIST
18264: PPUSH
18265: CALL_OW 69
18269: ST_TO_ADDR
// al_sci := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , 4 ] ] ) ;
18270: LD_ADDR_EXP 49
18274: PUSH
18275: LD_INT 22
18277: PUSH
18278: LD_INT 7
18280: PUSH
18281: EMPTY
18282: LIST
18283: LIST
18284: PUSH
18285: LD_INT 25
18287: PUSH
18288: LD_INT 4
18290: PUSH
18291: EMPTY
18292: LIST
18293: LIST
18294: PUSH
18295: EMPTY
18296: LIST
18297: LIST
18298: PPUSH
18299: CALL_OW 69
18303: ST_TO_ADDR
// if not HasTask ( al_cargo ) and GetCargo ( al_cargo , mat_cans ) < 100 then
18304: LD_EXP 51
18308: PPUSH
18309: CALL_OW 314
18313: NOT
18314: PUSH
18315: LD_EXP 51
18319: PPUSH
18320: LD_INT 1
18322: PPUSH
18323: CALL_OW 289
18327: PUSH
18328: LD_INT 100
18330: LESS
18331: AND
18332: IFFALSE 18380
// begin cr := GetListOfCratesInArea ( us_crates ) ;
18334: LD_ADDR_VAR 0 4
18338: PUSH
18339: LD_INT 12
18341: PPUSH
18342: CALL_OW 435
18346: ST_TO_ADDR
// if cr then
18347: LD_VAR 0 4
18351: IFFALSE 18380
// ComCollect ( al_cargo , cr [ 1 ] , cr [ 2 ] ) ;
18353: LD_EXP 51
18357: PPUSH
18358: LD_VAR 0 4
18362: PUSH
18363: LD_INT 1
18365: ARRAY
18366: PPUSH
18367: LD_VAR 0 4
18371: PUSH
18372: LD_INT 2
18374: ARRAY
18375: PPUSH
18376: CALL_OW 117
// end ; if UnitFilter ( al_bul , [ f_not , [ f_lives , 1000 ] ] ) then
18380: LD_EXP 56
18384: PPUSH
18385: LD_INT 3
18387: PUSH
18388: LD_INT 24
18390: PUSH
18391: LD_INT 1000
18393: PUSH
18394: EMPTY
18395: LIST
18396: LIST
18397: PUSH
18398: EMPTY
18399: LIST
18400: LIST
18401: PPUSH
18402: CALL_OW 72
18406: IFFALSE 18536
// begin if al_eng then
18408: LD_EXP 46
18412: IFFALSE 18534
// for i = 1 to al_eng do
18414: LD_ADDR_VAR 0 1
18418: PUSH
18419: DOUBLE
18420: LD_INT 1
18422: DEC
18423: ST_TO_ADDR
18424: LD_EXP 46
18428: PUSH
18429: FOR_TO
18430: IFFALSE 18532
// if IsInUnit ( al_eng [ i ] ) then
18432: LD_EXP 46
18436: PUSH
18437: LD_VAR 0 1
18441: ARRAY
18442: PPUSH
18443: CALL_OW 310
18447: IFFALSE 18466
// ComExitBuilding ( al_eng [ i ] ) else
18449: LD_EXP 46
18453: PUSH
18454: LD_VAR 0 1
18458: ARRAY
18459: PPUSH
18460: CALL_OW 122
18464: GO 18530
// if not HasTask ( al_eng [ i ] ) then
18466: LD_EXP 46
18470: PUSH
18471: LD_VAR 0 1
18475: ARRAY
18476: PPUSH
18477: CALL_OW 314
18481: NOT
18482: IFFALSE 18530
// ComRepairBuilding ( al_eng [ i ] , UnitFilter ( al_bul , [ f_not , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
18484: LD_EXP 46
18488: PUSH
18489: LD_VAR 0 1
18493: ARRAY
18494: PPUSH
18495: LD_EXP 56
18499: PPUSH
18500: LD_INT 3
18502: PUSH
18503: LD_INT 24
18505: PUSH
18506: LD_INT 1000
18508: PUSH
18509: EMPTY
18510: LIST
18511: LIST
18512: PUSH
18513: EMPTY
18514: LIST
18515: LIST
18516: PPUSH
18517: CALL_OW 72
18521: PUSH
18522: LD_INT 1
18524: ARRAY
18525: PPUSH
18526: CALL_OW 130
18530: GO 18429
18532: POP
18533: POP
// end else
18534: GO 18618
// if al_eng then
18536: LD_EXP 46
18540: IFFALSE 18618
// if not IsInUnit ( al_eng [ 1 ] ) then
18542: LD_EXP 46
18546: PUSH
18547: LD_INT 1
18549: ARRAY
18550: PPUSH
18551: CALL_OW 310
18555: NOT
18556: IFFALSE 18618
// for i = 1 to al_eng do
18558: LD_ADDR_VAR 0 1
18562: PUSH
18563: DOUBLE
18564: LD_INT 1
18566: DEC
18567: ST_TO_ADDR
18568: LD_EXP 46
18572: PUSH
18573: FOR_TO
18574: IFFALSE 18616
// if not IsInUnit ( al_eng [ i ] ) then
18576: LD_EXP 46
18580: PUSH
18581: LD_VAR 0 1
18585: ARRAY
18586: PPUSH
18587: CALL_OW 310
18591: NOT
18592: IFFALSE 18614
// ComEnterUnit ( al_eng [ i ] , al_dep ) ;
18594: LD_EXP 46
18598: PUSH
18599: LD_VAR 0 1
18603: ARRAY
18604: PPUSH
18605: LD_EXP 53
18609: PPUSH
18610: CALL_OW 120
18614: GO 18573
18616: POP
18617: POP
// if al_vehs then
18618: LD_EXP 50
18622: IFFALSE 18722
// if BuildingStatus ( al_fac ) = bs_idle then
18624: LD_EXP 55
18628: PPUSH
18629: CALL_OW 461
18633: PUSH
18634: LD_INT 2
18636: EQUAL
18637: IFFALSE 18722
// begin ComConstruct ( al_fac , al_vehs [ 1 ] , al_vehs [ 2 ] , al_vehs [ 3 ] , al_vehs [ 4 ] ) ;
18639: LD_EXP 55
18643: PPUSH
18644: LD_EXP 50
18648: PUSH
18649: LD_INT 1
18651: ARRAY
18652: PPUSH
18653: LD_EXP 50
18657: PUSH
18658: LD_INT 2
18660: ARRAY
18661: PPUSH
18662: LD_EXP 50
18666: PUSH
18667: LD_INT 3
18669: ARRAY
18670: PPUSH
18671: LD_EXP 50
18675: PUSH
18676: LD_INT 4
18678: ARRAY
18679: PPUSH
18680: CALL_OW 125
// for i = 1 to 4 do
18684: LD_ADDR_VAR 0 1
18688: PUSH
18689: DOUBLE
18690: LD_INT 1
18692: DEC
18693: ST_TO_ADDR
18694: LD_INT 4
18696: PUSH
18697: FOR_TO
18698: IFFALSE 18720
// al_vehs := Delete ( al_vehs , 1 ) ;
18700: LD_ADDR_EXP 50
18704: PUSH
18705: LD_EXP 50
18709: PPUSH
18710: LD_INT 1
18712: PPUSH
18713: CALL_OW 3
18717: ST_TO_ADDR
18718: GO 18697
18720: POP
18721: POP
// end ; if al_force = 0 and tick mod 23100 = 0 then
18722: LD_EXP 44
18726: PUSH
18727: LD_INT 0
18729: EQUAL
18730: PUSH
18731: LD_OWVAR 1
18735: PUSH
18736: LD_INT 23100
18738: MOD
18739: PUSH
18740: LD_INT 0
18742: EQUAL
18743: AND
18744: IFFALSE 18858
// begin for i = 1 to [ 6 , 7 , 8 ] [ Difficulty ] do
18746: LD_ADDR_VAR 0 1
18750: PUSH
18751: DOUBLE
18752: LD_INT 1
18754: DEC
18755: ST_TO_ADDR
18756: LD_INT 6
18758: PUSH
18759: LD_INT 7
18761: PUSH
18762: LD_INT 8
18764: PUSH
18765: EMPTY
18766: LIST
18767: LIST
18768: LIST
18769: PUSH
18770: LD_OWVAR 67
18774: ARRAY
18775: PUSH
18776: FOR_TO
18777: IFFALSE 18856
// begin al_vehs := al_vehs ^ ru_heavy_wheeled ;
18779: LD_ADDR_EXP 50
18783: PUSH
18784: LD_EXP 50
18788: PUSH
18789: LD_INT 23
18791: ADD
18792: ST_TO_ADDR
// al_vehs := al_vehs ^ engine_combustion ;
18793: LD_ADDR_EXP 50
18797: PUSH
18798: LD_EXP 50
18802: PUSH
18803: LD_INT 1
18805: ADD
18806: ST_TO_ADDR
// al_vehs := al_vehs ^ control_computer ;
18807: LD_ADDR_EXP 50
18811: PUSH
18812: LD_EXP 50
18816: PUSH
18817: LD_INT 3
18819: ADD
18820: ST_TO_ADDR
// al_vehs := al_vehs ^ [ ru_heavy_gun , ru_rocket ] [ Rand ( 1 , 2 ) ] ;
18821: LD_ADDR_EXP 50
18825: PUSH
18826: LD_EXP 50
18830: PUSH
18831: LD_INT 46
18833: PUSH
18834: LD_INT 47
18836: PUSH
18837: EMPTY
18838: LIST
18839: LIST
18840: PUSH
18841: LD_INT 1
18843: PPUSH
18844: LD_INT 2
18846: PPUSH
18847: CALL_OW 12
18851: ARRAY
18852: ADD
18853: ST_TO_ADDR
// end ;
18854: GO 18776
18856: POP
18857: POP
// end ; if FilterAllUnits ( [ [ f_side , 7 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 then
18858: LD_INT 22
18860: PUSH
18861: LD_INT 7
18863: PUSH
18864: EMPTY
18865: LIST
18866: LIST
18867: PUSH
18868: LD_INT 34
18870: PUSH
18871: LD_INT 51
18873: PUSH
18874: EMPTY
18875: LIST
18876: LIST
18877: PUSH
18878: EMPTY
18879: LIST
18880: LIST
18881: PPUSH
18882: CALL_OW 69
18886: PUSH
18887: LD_INT 0
18889: EQUAL
18890: IFFALSE 18913
// ComConstruct ( al_fac , ru_medium_wheeled , engine_combustion , control_computer , ru_cargo_bay ) ;
18892: LD_EXP 55
18896: PPUSH
18897: LD_INT 21
18899: PPUSH
18900: LD_INT 1
18902: PPUSH
18903: LD_INT 3
18905: PPUSH
18906: LD_INT 51
18908: PPUSH
18909: CALL_OW 125
// if al_force >= [ 6 , 7 , 8 ] [ Difficulty ] then
18913: LD_EXP 44
18917: PUSH
18918: LD_INT 6
18920: PUSH
18921: LD_INT 7
18923: PUSH
18924: LD_INT 8
18926: PUSH
18927: EMPTY
18928: LIST
18929: LIST
18930: LIST
18931: PUSH
18932: LD_OWVAR 67
18936: ARRAY
18937: GREATEREQUAL
18938: IFFALSE 18949
// RaiseSailEvent ( event_alliance_attack ) ;
18940: LD_EXP 23
18944: PPUSH
18945: CALL_OW 427
// end ;
18949: PPOPN 4
18951: END
// export function AllianceAttack ( ) ; var path , units ; begin
18952: LD_INT 0
18954: PPUSH
18955: PPUSH
18956: PPUSH
// units := al_force ;
18957: LD_ADDR_VAR 0 3
18961: PUSH
18962: LD_EXP 44
18966: ST_TO_ADDR
// al_force := [ ] ;
18967: LD_ADDR_EXP 44
18971: PUSH
18972: EMPTY
18973: ST_TO_ADDR
// if rand ( 0 , 1 ) then
18974: LD_INT 0
18976: PPUSH
18977: LD_INT 1
18979: PPUSH
18980: CALL_OW 12
18984: IFFALSE 19028
// path := [ [ 49 , 53 ] , [ 52 , 90 ] , [ 63 , 114 ] ] else
18986: LD_ADDR_VAR 0 2
18990: PUSH
18991: LD_INT 49
18993: PUSH
18994: LD_INT 53
18996: PUSH
18997: EMPTY
18998: LIST
18999: LIST
19000: PUSH
19001: LD_INT 52
19003: PUSH
19004: LD_INT 90
19006: PUSH
19007: EMPTY
19008: LIST
19009: LIST
19010: PUSH
19011: LD_INT 63
19013: PUSH
19014: LD_INT 114
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: PUSH
19021: EMPTY
19022: LIST
19023: LIST
19024: LIST
19025: ST_TO_ADDR
19026: GO 19057
// path := [ [ 89 , 52 ] , [ 143 , 50 ] ] ;
19028: LD_ADDR_VAR 0 2
19032: PUSH
19033: LD_INT 89
19035: PUSH
19036: LD_INT 52
19038: PUSH
19039: EMPTY
19040: LIST
19041: LIST
19042: PUSH
19043: LD_INT 143
19045: PUSH
19046: LD_INT 50
19048: PUSH
19049: EMPTY
19050: LIST
19051: LIST
19052: PUSH
19053: EMPTY
19054: LIST
19055: LIST
19056: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19057: LD_INT 35
19059: PPUSH
19060: CALL_OW 67
// until not AgressiveMove ( units , path ) ;
19064: LD_VAR 0 3
19068: PPUSH
19069: LD_VAR 0 2
19073: PPUSH
19074: CALL 80789 0 2
19078: NOT
19079: IFFALSE 19057
// end ; end_of_file
19081: LD_VAR 0 1
19085: RET
// export ar_commander , ar_force , ar_skill ; export function PrepareArabian ; var i , filter , un , team ; begin
19086: LD_INT 0
19088: PPUSH
19089: PPUSH
19090: PPUSH
19091: PPUSH
19092: PPUSH
// ar_skill := [ 9 , 8 , 7 ] [ Difficulty ] ;
19093: LD_ADDR_EXP 59
19097: PUSH
19098: LD_INT 9
19100: PUSH
19101: LD_INT 8
19103: PUSH
19104: LD_INT 7
19106: PUSH
19107: EMPTY
19108: LIST
19109: LIST
19110: LIST
19111: PUSH
19112: LD_OWVAR 67
19116: ARRAY
19117: ST_TO_ADDR
// ar_force := [ ] ;
19118: LD_ADDR_EXP 58
19122: PUSH
19123: EMPTY
19124: ST_TO_ADDR
// RemoveAlliance ;
19125: CALL 16962 0 0
// RemoveEnvironmentArea ( evn ) ;
19129: LD_INT 17
19131: PPUSH
19132: CALL_OW 355
// your_side := 2 ;
19136: LD_ADDR_OWVAR 2
19140: PUSH
19141: LD_INT 2
19143: ST_TO_ADDR
// uc_side := 2 ;
19144: LD_ADDR_OWVAR 20
19148: PUSH
19149: LD_INT 2
19151: ST_TO_ADDR
// uc_nation := nation_arabian ;
19152: LD_ADDR_OWVAR 21
19156: PUSH
19157: LD_INT 2
19159: ST_TO_ADDR
// hc_gallery :=  ;
19160: LD_ADDR_OWVAR 33
19164: PUSH
19165: LD_STRING 
19167: ST_TO_ADDR
// hc_name :=  ;
19168: LD_ADDR_OWVAR 26
19172: PUSH
19173: LD_STRING 
19175: ST_TO_ADDR
// hc_importance := 0 ;
19176: LD_ADDR_OWVAR 32
19180: PUSH
19181: LD_INT 0
19183: ST_TO_ADDR
// for i = 1 to 20 do
19184: LD_ADDR_VAR 0 2
19188: PUSH
19189: DOUBLE
19190: LD_INT 1
19192: DEC
19193: ST_TO_ADDR
19194: LD_INT 20
19196: PUSH
19197: FOR_TO
19198: IFFALSE 19263
// begin PrepareHuman ( false , Rand ( 1 , 4 ) , ar_skill ) ;
19200: LD_INT 0
19202: PPUSH
19203: LD_INT 1
19205: PPUSH
19206: LD_INT 4
19208: PPUSH
19209: CALL_OW 12
19213: PPUSH
19214: LD_EXP 59
19218: PPUSH
19219: CALL_OW 380
// un := CreateHuman ;
19223: LD_ADDR_VAR 0 4
19227: PUSH
19228: CALL_OW 44
19232: ST_TO_ADDR
// SetDir ( un , 2 ) ;
19233: LD_VAR 0 4
19237: PPUSH
19238: LD_INT 2
19240: PPUSH
19241: CALL_OW 233
// ar_force := ar_force ^ un ;
19245: LD_ADDR_EXP 58
19249: PUSH
19250: LD_EXP 58
19254: PUSH
19255: LD_VAR 0 4
19259: ADD
19260: ST_TO_ADDR
// end ;
19261: GO 19197
19263: POP
19264: POP
// hc_importance := 100 ;
19265: LD_ADDR_OWVAR 32
19269: PUSH
19270: LD_INT 100
19272: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , ar_skill ) ;
19273: LD_INT 1
19275: PPUSH
19276: LD_INT 11
19278: PPUSH
19279: LD_EXP 59
19283: PPUSH
19284: CALL_OW 380
// hc_gallery := skirmish ;
19288: LD_ADDR_OWVAR 33
19292: PUSH
19293: LD_STRING skirmish
19295: ST_TO_ADDR
// hc_face_number := 9 ;
19296: LD_ADDR_OWVAR 34
19300: PUSH
19301: LD_INT 9
19303: ST_TO_ADDR
// hc_name := Muhammad Mustaffi ;
19304: LD_ADDR_OWVAR 26
19308: PUSH
19309: LD_STRING Muhammad Mustaffi
19311: ST_TO_ADDR
// ar_commander := CreateHuman ;
19312: LD_ADDR_EXP 57
19316: PUSH
19317: CALL_OW 44
19321: ST_TO_ADDR
// SetDir ( ar_commander , 2 ) ;
19322: LD_EXP 57
19326: PPUSH
19327: LD_INT 2
19329: PPUSH
19330: CALL_OW 233
// player_commander := ar_commander ;
19334: LD_ADDR_EXP 11
19338: PUSH
19339: LD_EXP 57
19343: ST_TO_ADDR
// hc_importance := 0 ;
19344: LD_ADDR_OWVAR 32
19348: PUSH
19349: LD_INT 0
19351: ST_TO_ADDR
// hc_gallery :=  ;
19352: LD_ADDR_OWVAR 33
19356: PUSH
19357: LD_STRING 
19359: ST_TO_ADDR
// team := CharacterSelection ( text , [ 14 , 13 , 12 ] [ Difficulty ] , [ 14 , 13 , 12 ] [ Difficulty ] , [ sel_dont_change_class , ar_commander , sel_not_hired , sel_changeable , sel_change_class ] ^ ar_force , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] , class_mortar ] ) ;
19360: LD_ADDR_VAR 0 5
19364: PUSH
19365: LD_STRING text
19367: PPUSH
19368: LD_INT 14
19370: PUSH
19371: LD_INT 13
19373: PUSH
19374: LD_INT 12
19376: PUSH
19377: EMPTY
19378: LIST
19379: LIST
19380: LIST
19381: PUSH
19382: LD_OWVAR 67
19386: ARRAY
19387: PPUSH
19388: LD_INT 14
19390: PUSH
19391: LD_INT 13
19393: PUSH
19394: LD_INT 12
19396: PUSH
19397: EMPTY
19398: LIST
19399: LIST
19400: LIST
19401: PUSH
19402: LD_OWVAR 67
19406: ARRAY
19407: PPUSH
19408: LD_INT -6
19410: PUSH
19411: LD_EXP 57
19415: PUSH
19416: LD_INT -2
19418: PUSH
19419: LD_INT -3
19421: PUSH
19422: LD_INT -5
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: LIST
19429: LIST
19430: LIST
19431: PUSH
19432: LD_EXP 58
19436: ADD
19437: PPUSH
19438: LD_INT 1
19440: PUSH
19441: LD_INT 3
19443: PUSH
19444: LD_INT 2
19446: PUSH
19447: LD_INT 1
19449: PUSH
19450: EMPTY
19451: LIST
19452: LIST
19453: PUSH
19454: LD_INT 4
19456: PUSH
19457: LD_INT 1
19459: PUSH
19460: EMPTY
19461: LIST
19462: LIST
19463: PUSH
19464: LD_INT 8
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: LIST
19471: LIST
19472: LIST
19473: PPUSH
19474: CALL_OW 42
19478: ST_TO_ADDR
// team := team ^ ar_commander ;
19479: LD_ADDR_VAR 0 5
19483: PUSH
19484: LD_VAR 0 5
19488: PUSH
19489: LD_EXP 57
19493: ADD
19494: ST_TO_ADDR
// for i = 1 to 4 do
19495: LD_ADDR_VAR 0 2
19499: PUSH
19500: DOUBLE
19501: LD_INT 1
19503: DEC
19504: ST_TO_ADDR
19505: LD_INT 4
19507: PUSH
19508: FOR_TO
19509: IFFALSE 19609
// begin vc_chassis := ar_medium_trike ;
19511: LD_ADDR_OWVAR 37
19515: PUSH
19516: LD_INT 13
19518: ST_TO_ADDR
// vc_engine := engine_siberite ;
19519: LD_ADDR_OWVAR 39
19523: PUSH
19524: LD_INT 3
19526: ST_TO_ADDR
// vc_control := control_manual ;
19527: LD_ADDR_OWVAR 38
19531: PUSH
19532: LD_INT 1
19534: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_cargo_bay , ar_crane , ar_gun ] [ i ] ;
19535: LD_ADDR_OWVAR 40
19539: PUSH
19540: LD_INT 27
19542: PUSH
19543: LD_INT 32
19545: PUSH
19546: LD_INT 88
19548: PUSH
19549: LD_INT 27
19551: PUSH
19552: EMPTY
19553: LIST
19554: LIST
19555: LIST
19556: LIST
19557: PUSH
19558: LD_VAR 0 2
19562: ARRAY
19563: ST_TO_ADDR
// un := CreateVehicle ;
19564: LD_ADDR_VAR 0 4
19568: PUSH
19569: CALL_OW 45
19573: ST_TO_ADDR
// SetDir ( un , 2 ) ;
19574: LD_VAR 0 4
19578: PPUSH
19579: LD_INT 2
19581: PPUSH
19582: CALL_OW 233
// PlaceUnitXYR ( un , 54 , 15 , 6 , false ) ;
19586: LD_VAR 0 4
19590: PPUSH
19591: LD_INT 54
19593: PPUSH
19594: LD_INT 15
19596: PPUSH
19597: LD_INT 6
19599: PPUSH
19600: LD_INT 0
19602: PPUSH
19603: CALL_OW 50
// end ;
19607: GO 19508
19609: POP
19610: POP
// for i = 1 to team do
19611: LD_ADDR_VAR 0 2
19615: PUSH
19616: DOUBLE
19617: LD_INT 1
19619: DEC
19620: ST_TO_ADDR
19621: LD_VAR 0 5
19625: PUSH
19626: FOR_TO
19627: IFFALSE 19724
// begin if FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) then
19629: LD_INT 22
19631: PUSH
19632: LD_INT 2
19634: PUSH
19635: EMPTY
19636: LIST
19637: LIST
19638: PUSH
19639: LD_INT 58
19641: PUSH
19642: EMPTY
19643: LIST
19644: PUSH
19645: EMPTY
19646: LIST
19647: LIST
19648: PPUSH
19649: CALL_OW 69
19653: IFFALSE 19701
// PlaceHumanInUnit ( team [ i ] , FilterAllUnits ( [ [ f_side , 2 ] , [ f_empty ] ] ) [ 1 ] ) else
19655: LD_VAR 0 5
19659: PUSH
19660: LD_VAR 0 2
19664: ARRAY
19665: PPUSH
19666: LD_INT 22
19668: PUSH
19669: LD_INT 2
19671: PUSH
19672: EMPTY
19673: LIST
19674: LIST
19675: PUSH
19676: LD_INT 58
19678: PUSH
19679: EMPTY
19680: LIST
19681: PUSH
19682: EMPTY
19683: LIST
19684: LIST
19685: PPUSH
19686: CALL_OW 69
19690: PUSH
19691: LD_INT 1
19693: ARRAY
19694: PPUSH
19695: CALL_OW 52
19699: GO 19722
// PlaceUnitArea ( team [ i ] , center_resp , false ) ;
19701: LD_VAR 0 5
19705: PUSH
19706: LD_VAR 0 2
19710: ARRAY
19711: PPUSH
19712: LD_INT 16
19714: PPUSH
19715: LD_INT 0
19717: PPUSH
19718: CALL_OW 49
// end ;
19722: GO 19626
19724: POP
19725: POP
// uc_side := 0 ;
19726: LD_ADDR_OWVAR 20
19730: PUSH
19731: LD_INT 0
19733: ST_TO_ADDR
// uc_nation := 0 ;
19734: LD_ADDR_OWVAR 21
19738: PUSH
19739: LD_INT 0
19741: ST_TO_ADDR
// vc_chassis := 31 ;
19742: LD_ADDR_OWVAR 37
19746: PUSH
19747: LD_INT 31
19749: ST_TO_ADDR
// vc_control := control_rider ;
19750: LD_ADDR_OWVAR 38
19754: PUSH
19755: LD_INT 4
19757: ST_TO_ADDR
// PlaceUnitXY ( CreateVehicle , 96 , 20 , false ) ;
19758: CALL_OW 45
19762: PPUSH
19763: LD_INT 96
19765: PPUSH
19766: LD_INT 20
19768: PPUSH
19769: LD_INT 0
19771: PPUSH
19772: CALL_OW 48
// end ; end_of_file end_of_file
19776: LD_VAR 0 1
19780: RET
// export globalGameSaveCounter ; every 0 0$1 do
19781: GO 19783
19783: DISABLE
// begin enable ;
19784: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19785: LD_STRING updateTimer(
19787: PUSH
19788: LD_OWVAR 1
19792: STR
19793: PUSH
19794: LD_STRING );
19796: STR
19797: PPUSH
19798: CALL_OW 559
// end ;
19802: END
// every 0 0$1 do
19803: GO 19805
19805: DISABLE
// begin globalGameSaveCounter := 0 ;
19806: LD_ADDR_EXP 60
19810: PUSH
19811: LD_INT 0
19813: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
19814: LD_STRING setGameSaveCounter(0)
19816: PPUSH
19817: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
19821: LD_STRING initStreamRollete();
19823: PPUSH
19824: CALL_OW 559
// InitStreamMode ;
19828: CALL 21171 0 0
// DefineStreamItems ( false ) ;
19832: LD_INT 0
19834: PPUSH
19835: CALL 21635 0 1
// end ;
19839: END
// export function SOS_MapStart ( ) ; begin
19840: LD_INT 0
19842: PPUSH
// if streamModeActive then
19843: LD_EXP 61
19847: IFFALSE 19856
// DefineStreamItems ( true ) ;
19849: LD_INT 1
19851: PPUSH
19852: CALL 21635 0 1
// UpdateLuaVariables ( ) ;
19856: CALL 19873 0 0
// UpdateFactoryWaypoints ( ) ;
19860: CALL 34504 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19864: CALL 34761 0 0
// end ;
19868: LD_VAR 0 1
19872: RET
// function UpdateLuaVariables ( ) ; begin
19873: LD_INT 0
19875: PPUSH
// if globalGameSaveCounter then
19876: LD_EXP 60
19880: IFFALSE 19914
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
19882: LD_ADDR_EXP 60
19886: PUSH
19887: LD_EXP 60
19891: PPUSH
19892: CALL 79546 0 1
19896: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19897: LD_STRING setGameSaveCounter(
19899: PUSH
19900: LD_EXP 60
19904: STR
19905: PUSH
19906: LD_STRING )
19908: STR
19909: PPUSH
19910: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
19914: LD_STRING setGameDifficulty(
19916: PUSH
19917: LD_OWVAR 67
19921: STR
19922: PUSH
19923: LD_STRING )
19925: STR
19926: PPUSH
19927: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
19931: LD_STRING displayDifficulty(
19933: PUSH
19934: LD_OWVAR 67
19938: STR
19939: PUSH
19940: LD_STRING )
19942: STR
19943: PPUSH
19944: CALL_OW 559
// end ;
19948: LD_VAR 0 1
19952: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19953: LD_INT 0
19955: PPUSH
// if p2 = stream_mode then
19956: LD_VAR 0 2
19960: PUSH
19961: LD_INT 100
19963: EQUAL
19964: IFFALSE 20967
// begin if not StreamModeActive then
19966: LD_EXP 61
19970: NOT
19971: IFFALSE 19981
// StreamModeActive := true ;
19973: LD_ADDR_EXP 61
19977: PUSH
19978: LD_INT 1
19980: ST_TO_ADDR
// if p3 = 0 then
19981: LD_VAR 0 3
19985: PUSH
19986: LD_INT 0
19988: EQUAL
19989: IFFALSE 19995
// InitStreamMode ;
19991: CALL 21171 0 0
// if p3 = 1 then
19995: LD_VAR 0 3
19999: PUSH
20000: LD_INT 1
20002: EQUAL
20003: IFFALSE 20013
// sRocket := true ;
20005: LD_ADDR_EXP 66
20009: PUSH
20010: LD_INT 1
20012: ST_TO_ADDR
// if p3 = 2 then
20013: LD_VAR 0 3
20017: PUSH
20018: LD_INT 2
20020: EQUAL
20021: IFFALSE 20031
// sSpeed := true ;
20023: LD_ADDR_EXP 65
20027: PUSH
20028: LD_INT 1
20030: ST_TO_ADDR
// if p3 = 3 then
20031: LD_VAR 0 3
20035: PUSH
20036: LD_INT 3
20038: EQUAL
20039: IFFALSE 20049
// sEngine := true ;
20041: LD_ADDR_EXP 67
20045: PUSH
20046: LD_INT 1
20048: ST_TO_ADDR
// if p3 = 4 then
20049: LD_VAR 0 3
20053: PUSH
20054: LD_INT 4
20056: EQUAL
20057: IFFALSE 20067
// sSpec := true ;
20059: LD_ADDR_EXP 64
20063: PUSH
20064: LD_INT 1
20066: ST_TO_ADDR
// if p3 = 5 then
20067: LD_VAR 0 3
20071: PUSH
20072: LD_INT 5
20074: EQUAL
20075: IFFALSE 20085
// sLevel := true ;
20077: LD_ADDR_EXP 68
20081: PUSH
20082: LD_INT 1
20084: ST_TO_ADDR
// if p3 = 6 then
20085: LD_VAR 0 3
20089: PUSH
20090: LD_INT 6
20092: EQUAL
20093: IFFALSE 20103
// sArmoury := true ;
20095: LD_ADDR_EXP 69
20099: PUSH
20100: LD_INT 1
20102: ST_TO_ADDR
// if p3 = 7 then
20103: LD_VAR 0 3
20107: PUSH
20108: LD_INT 7
20110: EQUAL
20111: IFFALSE 20121
// sRadar := true ;
20113: LD_ADDR_EXP 70
20117: PUSH
20118: LD_INT 1
20120: ST_TO_ADDR
// if p3 = 8 then
20121: LD_VAR 0 3
20125: PUSH
20126: LD_INT 8
20128: EQUAL
20129: IFFALSE 20139
// sBunker := true ;
20131: LD_ADDR_EXP 71
20135: PUSH
20136: LD_INT 1
20138: ST_TO_ADDR
// if p3 = 9 then
20139: LD_VAR 0 3
20143: PUSH
20144: LD_INT 9
20146: EQUAL
20147: IFFALSE 20157
// sHack := true ;
20149: LD_ADDR_EXP 72
20153: PUSH
20154: LD_INT 1
20156: ST_TO_ADDR
// if p3 = 10 then
20157: LD_VAR 0 3
20161: PUSH
20162: LD_INT 10
20164: EQUAL
20165: IFFALSE 20175
// sFire := true ;
20167: LD_ADDR_EXP 73
20171: PUSH
20172: LD_INT 1
20174: ST_TO_ADDR
// if p3 = 11 then
20175: LD_VAR 0 3
20179: PUSH
20180: LD_INT 11
20182: EQUAL
20183: IFFALSE 20193
// sRefresh := true ;
20185: LD_ADDR_EXP 74
20189: PUSH
20190: LD_INT 1
20192: ST_TO_ADDR
// if p3 = 12 then
20193: LD_VAR 0 3
20197: PUSH
20198: LD_INT 12
20200: EQUAL
20201: IFFALSE 20211
// sExp := true ;
20203: LD_ADDR_EXP 75
20207: PUSH
20208: LD_INT 1
20210: ST_TO_ADDR
// if p3 = 13 then
20211: LD_VAR 0 3
20215: PUSH
20216: LD_INT 13
20218: EQUAL
20219: IFFALSE 20229
// sDepot := true ;
20221: LD_ADDR_EXP 76
20225: PUSH
20226: LD_INT 1
20228: ST_TO_ADDR
// if p3 = 14 then
20229: LD_VAR 0 3
20233: PUSH
20234: LD_INT 14
20236: EQUAL
20237: IFFALSE 20247
// sFlag := true ;
20239: LD_ADDR_EXP 77
20243: PUSH
20244: LD_INT 1
20246: ST_TO_ADDR
// if p3 = 15 then
20247: LD_VAR 0 3
20251: PUSH
20252: LD_INT 15
20254: EQUAL
20255: IFFALSE 20265
// sKamikadze := true ;
20257: LD_ADDR_EXP 85
20261: PUSH
20262: LD_INT 1
20264: ST_TO_ADDR
// if p3 = 16 then
20265: LD_VAR 0 3
20269: PUSH
20270: LD_INT 16
20272: EQUAL
20273: IFFALSE 20283
// sTroll := true ;
20275: LD_ADDR_EXP 86
20279: PUSH
20280: LD_INT 1
20282: ST_TO_ADDR
// if p3 = 17 then
20283: LD_VAR 0 3
20287: PUSH
20288: LD_INT 17
20290: EQUAL
20291: IFFALSE 20301
// sSlow := true ;
20293: LD_ADDR_EXP 87
20297: PUSH
20298: LD_INT 1
20300: ST_TO_ADDR
// if p3 = 18 then
20301: LD_VAR 0 3
20305: PUSH
20306: LD_INT 18
20308: EQUAL
20309: IFFALSE 20319
// sLack := true ;
20311: LD_ADDR_EXP 88
20315: PUSH
20316: LD_INT 1
20318: ST_TO_ADDR
// if p3 = 19 then
20319: LD_VAR 0 3
20323: PUSH
20324: LD_INT 19
20326: EQUAL
20327: IFFALSE 20337
// sTank := true ;
20329: LD_ADDR_EXP 90
20333: PUSH
20334: LD_INT 1
20336: ST_TO_ADDR
// if p3 = 20 then
20337: LD_VAR 0 3
20341: PUSH
20342: LD_INT 20
20344: EQUAL
20345: IFFALSE 20355
// sRemote := true ;
20347: LD_ADDR_EXP 91
20351: PUSH
20352: LD_INT 1
20354: ST_TO_ADDR
// if p3 = 21 then
20355: LD_VAR 0 3
20359: PUSH
20360: LD_INT 21
20362: EQUAL
20363: IFFALSE 20373
// sPowell := true ;
20365: LD_ADDR_EXP 92
20369: PUSH
20370: LD_INT 1
20372: ST_TO_ADDR
// if p3 = 22 then
20373: LD_VAR 0 3
20377: PUSH
20378: LD_INT 22
20380: EQUAL
20381: IFFALSE 20391
// sTeleport := true ;
20383: LD_ADDR_EXP 95
20387: PUSH
20388: LD_INT 1
20390: ST_TO_ADDR
// if p3 = 23 then
20391: LD_VAR 0 3
20395: PUSH
20396: LD_INT 23
20398: EQUAL
20399: IFFALSE 20409
// sOilTower := true ;
20401: LD_ADDR_EXP 97
20405: PUSH
20406: LD_INT 1
20408: ST_TO_ADDR
// if p3 = 24 then
20409: LD_VAR 0 3
20413: PUSH
20414: LD_INT 24
20416: EQUAL
20417: IFFALSE 20427
// sShovel := true ;
20419: LD_ADDR_EXP 98
20423: PUSH
20424: LD_INT 1
20426: ST_TO_ADDR
// if p3 = 25 then
20427: LD_VAR 0 3
20431: PUSH
20432: LD_INT 25
20434: EQUAL
20435: IFFALSE 20445
// sSheik := true ;
20437: LD_ADDR_EXP 99
20441: PUSH
20442: LD_INT 1
20444: ST_TO_ADDR
// if p3 = 26 then
20445: LD_VAR 0 3
20449: PUSH
20450: LD_INT 26
20452: EQUAL
20453: IFFALSE 20463
// sEarthquake := true ;
20455: LD_ADDR_EXP 101
20459: PUSH
20460: LD_INT 1
20462: ST_TO_ADDR
// if p3 = 27 then
20463: LD_VAR 0 3
20467: PUSH
20468: LD_INT 27
20470: EQUAL
20471: IFFALSE 20481
// sAI := true ;
20473: LD_ADDR_EXP 102
20477: PUSH
20478: LD_INT 1
20480: ST_TO_ADDR
// if p3 = 28 then
20481: LD_VAR 0 3
20485: PUSH
20486: LD_INT 28
20488: EQUAL
20489: IFFALSE 20499
// sCargo := true ;
20491: LD_ADDR_EXP 105
20495: PUSH
20496: LD_INT 1
20498: ST_TO_ADDR
// if p3 = 29 then
20499: LD_VAR 0 3
20503: PUSH
20504: LD_INT 29
20506: EQUAL
20507: IFFALSE 20517
// sDLaser := true ;
20509: LD_ADDR_EXP 106
20513: PUSH
20514: LD_INT 1
20516: ST_TO_ADDR
// if p3 = 30 then
20517: LD_VAR 0 3
20521: PUSH
20522: LD_INT 30
20524: EQUAL
20525: IFFALSE 20535
// sExchange := true ;
20527: LD_ADDR_EXP 107
20531: PUSH
20532: LD_INT 1
20534: ST_TO_ADDR
// if p3 = 31 then
20535: LD_VAR 0 3
20539: PUSH
20540: LD_INT 31
20542: EQUAL
20543: IFFALSE 20553
// sFac := true ;
20545: LD_ADDR_EXP 108
20549: PUSH
20550: LD_INT 1
20552: ST_TO_ADDR
// if p3 = 32 then
20553: LD_VAR 0 3
20557: PUSH
20558: LD_INT 32
20560: EQUAL
20561: IFFALSE 20571
// sPower := true ;
20563: LD_ADDR_EXP 109
20567: PUSH
20568: LD_INT 1
20570: ST_TO_ADDR
// if p3 = 33 then
20571: LD_VAR 0 3
20575: PUSH
20576: LD_INT 33
20578: EQUAL
20579: IFFALSE 20589
// sRandom := true ;
20581: LD_ADDR_EXP 110
20585: PUSH
20586: LD_INT 1
20588: ST_TO_ADDR
// if p3 = 34 then
20589: LD_VAR 0 3
20593: PUSH
20594: LD_INT 34
20596: EQUAL
20597: IFFALSE 20607
// sShield := true ;
20599: LD_ADDR_EXP 111
20603: PUSH
20604: LD_INT 1
20606: ST_TO_ADDR
// if p3 = 35 then
20607: LD_VAR 0 3
20611: PUSH
20612: LD_INT 35
20614: EQUAL
20615: IFFALSE 20625
// sTime := true ;
20617: LD_ADDR_EXP 112
20621: PUSH
20622: LD_INT 1
20624: ST_TO_ADDR
// if p3 = 36 then
20625: LD_VAR 0 3
20629: PUSH
20630: LD_INT 36
20632: EQUAL
20633: IFFALSE 20643
// sTools := true ;
20635: LD_ADDR_EXP 113
20639: PUSH
20640: LD_INT 1
20642: ST_TO_ADDR
// if p3 = 101 then
20643: LD_VAR 0 3
20647: PUSH
20648: LD_INT 101
20650: EQUAL
20651: IFFALSE 20661
// sSold := true ;
20653: LD_ADDR_EXP 78
20657: PUSH
20658: LD_INT 1
20660: ST_TO_ADDR
// if p3 = 102 then
20661: LD_VAR 0 3
20665: PUSH
20666: LD_INT 102
20668: EQUAL
20669: IFFALSE 20679
// sDiff := true ;
20671: LD_ADDR_EXP 79
20675: PUSH
20676: LD_INT 1
20678: ST_TO_ADDR
// if p3 = 103 then
20679: LD_VAR 0 3
20683: PUSH
20684: LD_INT 103
20686: EQUAL
20687: IFFALSE 20697
// sFog := true ;
20689: LD_ADDR_EXP 82
20693: PUSH
20694: LD_INT 1
20696: ST_TO_ADDR
// if p3 = 104 then
20697: LD_VAR 0 3
20701: PUSH
20702: LD_INT 104
20704: EQUAL
20705: IFFALSE 20715
// sReset := true ;
20707: LD_ADDR_EXP 83
20711: PUSH
20712: LD_INT 1
20714: ST_TO_ADDR
// if p3 = 105 then
20715: LD_VAR 0 3
20719: PUSH
20720: LD_INT 105
20722: EQUAL
20723: IFFALSE 20733
// sSun := true ;
20725: LD_ADDR_EXP 84
20729: PUSH
20730: LD_INT 1
20732: ST_TO_ADDR
// if p3 = 106 then
20733: LD_VAR 0 3
20737: PUSH
20738: LD_INT 106
20740: EQUAL
20741: IFFALSE 20751
// sTiger := true ;
20743: LD_ADDR_EXP 80
20747: PUSH
20748: LD_INT 1
20750: ST_TO_ADDR
// if p3 = 107 then
20751: LD_VAR 0 3
20755: PUSH
20756: LD_INT 107
20758: EQUAL
20759: IFFALSE 20769
// sBomb := true ;
20761: LD_ADDR_EXP 81
20765: PUSH
20766: LD_INT 1
20768: ST_TO_ADDR
// if p3 = 108 then
20769: LD_VAR 0 3
20773: PUSH
20774: LD_INT 108
20776: EQUAL
20777: IFFALSE 20787
// sWound := true ;
20779: LD_ADDR_EXP 89
20783: PUSH
20784: LD_INT 1
20786: ST_TO_ADDR
// if p3 = 109 then
20787: LD_VAR 0 3
20791: PUSH
20792: LD_INT 109
20794: EQUAL
20795: IFFALSE 20805
// sBetray := true ;
20797: LD_ADDR_EXP 93
20801: PUSH
20802: LD_INT 1
20804: ST_TO_ADDR
// if p3 = 110 then
20805: LD_VAR 0 3
20809: PUSH
20810: LD_INT 110
20812: EQUAL
20813: IFFALSE 20823
// sContamin := true ;
20815: LD_ADDR_EXP 94
20819: PUSH
20820: LD_INT 1
20822: ST_TO_ADDR
// if p3 = 111 then
20823: LD_VAR 0 3
20827: PUSH
20828: LD_INT 111
20830: EQUAL
20831: IFFALSE 20841
// sOil := true ;
20833: LD_ADDR_EXP 96
20837: PUSH
20838: LD_INT 1
20840: ST_TO_ADDR
// if p3 = 112 then
20841: LD_VAR 0 3
20845: PUSH
20846: LD_INT 112
20848: EQUAL
20849: IFFALSE 20859
// sStu := true ;
20851: LD_ADDR_EXP 100
20855: PUSH
20856: LD_INT 1
20858: ST_TO_ADDR
// if p3 = 113 then
20859: LD_VAR 0 3
20863: PUSH
20864: LD_INT 113
20866: EQUAL
20867: IFFALSE 20877
// sBazooka := true ;
20869: LD_ADDR_EXP 103
20873: PUSH
20874: LD_INT 1
20876: ST_TO_ADDR
// if p3 = 114 then
20877: LD_VAR 0 3
20881: PUSH
20882: LD_INT 114
20884: EQUAL
20885: IFFALSE 20895
// sMortar := true ;
20887: LD_ADDR_EXP 104
20891: PUSH
20892: LD_INT 1
20894: ST_TO_ADDR
// if p3 = 115 then
20895: LD_VAR 0 3
20899: PUSH
20900: LD_INT 115
20902: EQUAL
20903: IFFALSE 20913
// sRanger := true ;
20905: LD_ADDR_EXP 114
20909: PUSH
20910: LD_INT 1
20912: ST_TO_ADDR
// if p3 = 116 then
20913: LD_VAR 0 3
20917: PUSH
20918: LD_INT 116
20920: EQUAL
20921: IFFALSE 20931
// sComputer := true ;
20923: LD_ADDR_EXP 115
20927: PUSH
20928: LD_INT 1
20930: ST_TO_ADDR
// if p3 = 117 then
20931: LD_VAR 0 3
20935: PUSH
20936: LD_INT 117
20938: EQUAL
20939: IFFALSE 20949
// s30 := true ;
20941: LD_ADDR_EXP 116
20945: PUSH
20946: LD_INT 1
20948: ST_TO_ADDR
// if p3 = 118 then
20949: LD_VAR 0 3
20953: PUSH
20954: LD_INT 118
20956: EQUAL
20957: IFFALSE 20967
// s60 := true ;
20959: LD_ADDR_EXP 117
20963: PUSH
20964: LD_INT 1
20966: ST_TO_ADDR
// end ; if p2 = hack_mode then
20967: LD_VAR 0 2
20971: PUSH
20972: LD_INT 101
20974: EQUAL
20975: IFFALSE 21103
// begin case p3 of 1 :
20977: LD_VAR 0 3
20981: PUSH
20982: LD_INT 1
20984: DOUBLE
20985: EQUAL
20986: IFTRUE 20990
20988: GO 20997
20990: POP
// hHackUnlimitedResources ; 2 :
20991: CALL 33250 0 0
20995: GO 21103
20997: LD_INT 2
20999: DOUBLE
21000: EQUAL
21001: IFTRUE 21005
21003: GO 21012
21005: POP
// hHackSetLevel10 ; 3 :
21006: CALL 33383 0 0
21010: GO 21103
21012: LD_INT 3
21014: DOUBLE
21015: EQUAL
21016: IFTRUE 21020
21018: GO 21027
21020: POP
// hHackSetLevel10YourUnits ; 4 :
21021: CALL 33468 0 0
21025: GO 21103
21027: LD_INT 4
21029: DOUBLE
21030: EQUAL
21031: IFTRUE 21035
21033: GO 21042
21035: POP
// hHackInvincible ; 5 :
21036: CALL 33916 0 0
21040: GO 21103
21042: LD_INT 5
21044: DOUBLE
21045: EQUAL
21046: IFTRUE 21050
21048: GO 21057
21050: POP
// hHackInvisible ; 6 :
21051: CALL 34027 0 0
21055: GO 21103
21057: LD_INT 6
21059: DOUBLE
21060: EQUAL
21061: IFTRUE 21065
21063: GO 21072
21065: POP
// hHackChangeYourSide ; 7 :
21066: CALL 34084 0 0
21070: GO 21103
21072: LD_INT 7
21074: DOUBLE
21075: EQUAL
21076: IFTRUE 21080
21078: GO 21087
21080: POP
// hHackChangeUnitSide ; 8 :
21081: CALL 34126 0 0
21085: GO 21103
21087: LD_INT 8
21089: DOUBLE
21090: EQUAL
21091: IFTRUE 21095
21093: GO 21102
21095: POP
// hHackFog ; end ;
21096: CALL 34227 0 0
21100: GO 21103
21102: POP
// end ; if p2 = game_save_mode then
21103: LD_VAR 0 2
21107: PUSH
21108: LD_INT 102
21110: EQUAL
21111: IFFALSE 21166
// begin if p3 = 1 then
21113: LD_VAR 0 3
21117: PUSH
21118: LD_INT 1
21120: EQUAL
21121: IFFALSE 21133
// globalGameSaveCounter := p4 ;
21123: LD_ADDR_EXP 60
21127: PUSH
21128: LD_VAR 0 4
21132: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
21133: LD_VAR 0 3
21137: PUSH
21138: LD_INT 2
21140: EQUAL
21141: PUSH
21142: LD_EXP 60
21146: AND
21147: IFFALSE 21166
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21149: LD_STRING setGameSaveCounter(
21151: PUSH
21152: LD_EXP 60
21156: STR
21157: PUSH
21158: LD_STRING )
21160: STR
21161: PPUSH
21162: CALL_OW 559
// end ; end ;
21166: LD_VAR 0 7
21170: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
21171: LD_INT 0
21173: PPUSH
// streamModeActive := false ;
21174: LD_ADDR_EXP 61
21178: PUSH
21179: LD_INT 0
21181: ST_TO_ADDR
// normalCounter := 36 ;
21182: LD_ADDR_EXP 62
21186: PUSH
21187: LD_INT 36
21189: ST_TO_ADDR
// hardcoreCounter := 18 ;
21190: LD_ADDR_EXP 63
21194: PUSH
21195: LD_INT 18
21197: ST_TO_ADDR
// sRocket := false ;
21198: LD_ADDR_EXP 66
21202: PUSH
21203: LD_INT 0
21205: ST_TO_ADDR
// sSpeed := false ;
21206: LD_ADDR_EXP 65
21210: PUSH
21211: LD_INT 0
21213: ST_TO_ADDR
// sEngine := false ;
21214: LD_ADDR_EXP 67
21218: PUSH
21219: LD_INT 0
21221: ST_TO_ADDR
// sSpec := false ;
21222: LD_ADDR_EXP 64
21226: PUSH
21227: LD_INT 0
21229: ST_TO_ADDR
// sLevel := false ;
21230: LD_ADDR_EXP 68
21234: PUSH
21235: LD_INT 0
21237: ST_TO_ADDR
// sArmoury := false ;
21238: LD_ADDR_EXP 69
21242: PUSH
21243: LD_INT 0
21245: ST_TO_ADDR
// sRadar := false ;
21246: LD_ADDR_EXP 70
21250: PUSH
21251: LD_INT 0
21253: ST_TO_ADDR
// sBunker := false ;
21254: LD_ADDR_EXP 71
21258: PUSH
21259: LD_INT 0
21261: ST_TO_ADDR
// sHack := false ;
21262: LD_ADDR_EXP 72
21266: PUSH
21267: LD_INT 0
21269: ST_TO_ADDR
// sFire := false ;
21270: LD_ADDR_EXP 73
21274: PUSH
21275: LD_INT 0
21277: ST_TO_ADDR
// sRefresh := false ;
21278: LD_ADDR_EXP 74
21282: PUSH
21283: LD_INT 0
21285: ST_TO_ADDR
// sExp := false ;
21286: LD_ADDR_EXP 75
21290: PUSH
21291: LD_INT 0
21293: ST_TO_ADDR
// sDepot := false ;
21294: LD_ADDR_EXP 76
21298: PUSH
21299: LD_INT 0
21301: ST_TO_ADDR
// sFlag := false ;
21302: LD_ADDR_EXP 77
21306: PUSH
21307: LD_INT 0
21309: ST_TO_ADDR
// sKamikadze := false ;
21310: LD_ADDR_EXP 85
21314: PUSH
21315: LD_INT 0
21317: ST_TO_ADDR
// sTroll := false ;
21318: LD_ADDR_EXP 86
21322: PUSH
21323: LD_INT 0
21325: ST_TO_ADDR
// sSlow := false ;
21326: LD_ADDR_EXP 87
21330: PUSH
21331: LD_INT 0
21333: ST_TO_ADDR
// sLack := false ;
21334: LD_ADDR_EXP 88
21338: PUSH
21339: LD_INT 0
21341: ST_TO_ADDR
// sTank := false ;
21342: LD_ADDR_EXP 90
21346: PUSH
21347: LD_INT 0
21349: ST_TO_ADDR
// sRemote := false ;
21350: LD_ADDR_EXP 91
21354: PUSH
21355: LD_INT 0
21357: ST_TO_ADDR
// sPowell := false ;
21358: LD_ADDR_EXP 92
21362: PUSH
21363: LD_INT 0
21365: ST_TO_ADDR
// sTeleport := false ;
21366: LD_ADDR_EXP 95
21370: PUSH
21371: LD_INT 0
21373: ST_TO_ADDR
// sOilTower := false ;
21374: LD_ADDR_EXP 97
21378: PUSH
21379: LD_INT 0
21381: ST_TO_ADDR
// sShovel := false ;
21382: LD_ADDR_EXP 98
21386: PUSH
21387: LD_INT 0
21389: ST_TO_ADDR
// sSheik := false ;
21390: LD_ADDR_EXP 99
21394: PUSH
21395: LD_INT 0
21397: ST_TO_ADDR
// sEarthquake := false ;
21398: LD_ADDR_EXP 101
21402: PUSH
21403: LD_INT 0
21405: ST_TO_ADDR
// sAI := false ;
21406: LD_ADDR_EXP 102
21410: PUSH
21411: LD_INT 0
21413: ST_TO_ADDR
// sCargo := false ;
21414: LD_ADDR_EXP 105
21418: PUSH
21419: LD_INT 0
21421: ST_TO_ADDR
// sDLaser := false ;
21422: LD_ADDR_EXP 106
21426: PUSH
21427: LD_INT 0
21429: ST_TO_ADDR
// sExchange := false ;
21430: LD_ADDR_EXP 107
21434: PUSH
21435: LD_INT 0
21437: ST_TO_ADDR
// sFac := false ;
21438: LD_ADDR_EXP 108
21442: PUSH
21443: LD_INT 0
21445: ST_TO_ADDR
// sPower := false ;
21446: LD_ADDR_EXP 109
21450: PUSH
21451: LD_INT 0
21453: ST_TO_ADDR
// sRandom := false ;
21454: LD_ADDR_EXP 110
21458: PUSH
21459: LD_INT 0
21461: ST_TO_ADDR
// sShield := false ;
21462: LD_ADDR_EXP 111
21466: PUSH
21467: LD_INT 0
21469: ST_TO_ADDR
// sTime := false ;
21470: LD_ADDR_EXP 112
21474: PUSH
21475: LD_INT 0
21477: ST_TO_ADDR
// sTools := false ;
21478: LD_ADDR_EXP 113
21482: PUSH
21483: LD_INT 0
21485: ST_TO_ADDR
// sSold := false ;
21486: LD_ADDR_EXP 78
21490: PUSH
21491: LD_INT 0
21493: ST_TO_ADDR
// sDiff := false ;
21494: LD_ADDR_EXP 79
21498: PUSH
21499: LD_INT 0
21501: ST_TO_ADDR
// sFog := false ;
21502: LD_ADDR_EXP 82
21506: PUSH
21507: LD_INT 0
21509: ST_TO_ADDR
// sReset := false ;
21510: LD_ADDR_EXP 83
21514: PUSH
21515: LD_INT 0
21517: ST_TO_ADDR
// sSun := false ;
21518: LD_ADDR_EXP 84
21522: PUSH
21523: LD_INT 0
21525: ST_TO_ADDR
// sTiger := false ;
21526: LD_ADDR_EXP 80
21530: PUSH
21531: LD_INT 0
21533: ST_TO_ADDR
// sBomb := false ;
21534: LD_ADDR_EXP 81
21538: PUSH
21539: LD_INT 0
21541: ST_TO_ADDR
// sWound := false ;
21542: LD_ADDR_EXP 89
21546: PUSH
21547: LD_INT 0
21549: ST_TO_ADDR
// sBetray := false ;
21550: LD_ADDR_EXP 93
21554: PUSH
21555: LD_INT 0
21557: ST_TO_ADDR
// sContamin := false ;
21558: LD_ADDR_EXP 94
21562: PUSH
21563: LD_INT 0
21565: ST_TO_ADDR
// sOil := false ;
21566: LD_ADDR_EXP 96
21570: PUSH
21571: LD_INT 0
21573: ST_TO_ADDR
// sStu := false ;
21574: LD_ADDR_EXP 100
21578: PUSH
21579: LD_INT 0
21581: ST_TO_ADDR
// sBazooka := false ;
21582: LD_ADDR_EXP 103
21586: PUSH
21587: LD_INT 0
21589: ST_TO_ADDR
// sMortar := false ;
21590: LD_ADDR_EXP 104
21594: PUSH
21595: LD_INT 0
21597: ST_TO_ADDR
// sRanger := false ;
21598: LD_ADDR_EXP 114
21602: PUSH
21603: LD_INT 0
21605: ST_TO_ADDR
// sComputer := false ;
21606: LD_ADDR_EXP 115
21610: PUSH
21611: LD_INT 0
21613: ST_TO_ADDR
// s30 := false ;
21614: LD_ADDR_EXP 116
21618: PUSH
21619: LD_INT 0
21621: ST_TO_ADDR
// s60 := false ;
21622: LD_ADDR_EXP 117
21626: PUSH
21627: LD_INT 0
21629: ST_TO_ADDR
// end ;
21630: LD_VAR 0 1
21634: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21635: LD_INT 0
21637: PPUSH
21638: PPUSH
21639: PPUSH
21640: PPUSH
21641: PPUSH
21642: PPUSH
21643: PPUSH
// result := [ ] ;
21644: LD_ADDR_VAR 0 2
21648: PUSH
21649: EMPTY
21650: ST_TO_ADDR
// if campaign_id = 1 then
21651: LD_OWVAR 69
21655: PUSH
21656: LD_INT 1
21658: EQUAL
21659: IFFALSE 24825
// begin case mission_number of 1 :
21661: LD_OWVAR 70
21665: PUSH
21666: LD_INT 1
21668: DOUBLE
21669: EQUAL
21670: IFTRUE 21674
21672: GO 21750
21674: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21675: LD_ADDR_VAR 0 2
21679: PUSH
21680: LD_INT 2
21682: PUSH
21683: LD_INT 4
21685: PUSH
21686: LD_INT 11
21688: PUSH
21689: LD_INT 12
21691: PUSH
21692: LD_INT 15
21694: PUSH
21695: LD_INT 16
21697: PUSH
21698: LD_INT 22
21700: PUSH
21701: LD_INT 23
21703: PUSH
21704: LD_INT 26
21706: PUSH
21707: EMPTY
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: PUSH
21718: LD_INT 101
21720: PUSH
21721: LD_INT 102
21723: PUSH
21724: LD_INT 106
21726: PUSH
21727: LD_INT 116
21729: PUSH
21730: LD_INT 117
21732: PUSH
21733: LD_INT 118
21735: PUSH
21736: EMPTY
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: PUSH
21744: EMPTY
21745: LIST
21746: LIST
21747: ST_TO_ADDR
21748: GO 24823
21750: LD_INT 2
21752: DOUBLE
21753: EQUAL
21754: IFTRUE 21758
21756: GO 21842
21758: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21759: LD_ADDR_VAR 0 2
21763: PUSH
21764: LD_INT 2
21766: PUSH
21767: LD_INT 4
21769: PUSH
21770: LD_INT 11
21772: PUSH
21773: LD_INT 12
21775: PUSH
21776: LD_INT 15
21778: PUSH
21779: LD_INT 16
21781: PUSH
21782: LD_INT 22
21784: PUSH
21785: LD_INT 23
21787: PUSH
21788: LD_INT 26
21790: PUSH
21791: EMPTY
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: PUSH
21802: LD_INT 101
21804: PUSH
21805: LD_INT 102
21807: PUSH
21808: LD_INT 105
21810: PUSH
21811: LD_INT 106
21813: PUSH
21814: LD_INT 108
21816: PUSH
21817: LD_INT 116
21819: PUSH
21820: LD_INT 117
21822: PUSH
21823: LD_INT 118
21825: PUSH
21826: EMPTY
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: PUSH
21836: EMPTY
21837: LIST
21838: LIST
21839: ST_TO_ADDR
21840: GO 24823
21842: LD_INT 3
21844: DOUBLE
21845: EQUAL
21846: IFTRUE 21850
21848: GO 21938
21850: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21851: LD_ADDR_VAR 0 2
21855: PUSH
21856: LD_INT 2
21858: PUSH
21859: LD_INT 4
21861: PUSH
21862: LD_INT 5
21864: PUSH
21865: LD_INT 11
21867: PUSH
21868: LD_INT 12
21870: PUSH
21871: LD_INT 15
21873: PUSH
21874: LD_INT 16
21876: PUSH
21877: LD_INT 22
21879: PUSH
21880: LD_INT 26
21882: PUSH
21883: LD_INT 36
21885: PUSH
21886: EMPTY
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: PUSH
21898: LD_INT 101
21900: PUSH
21901: LD_INT 102
21903: PUSH
21904: LD_INT 105
21906: PUSH
21907: LD_INT 106
21909: PUSH
21910: LD_INT 108
21912: PUSH
21913: LD_INT 116
21915: PUSH
21916: LD_INT 117
21918: PUSH
21919: LD_INT 118
21921: PUSH
21922: EMPTY
21923: LIST
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: PUSH
21932: EMPTY
21933: LIST
21934: LIST
21935: ST_TO_ADDR
21936: GO 24823
21938: LD_INT 4
21940: DOUBLE
21941: EQUAL
21942: IFTRUE 21946
21944: GO 22042
21946: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21947: LD_ADDR_VAR 0 2
21951: PUSH
21952: LD_INT 2
21954: PUSH
21955: LD_INT 4
21957: PUSH
21958: LD_INT 5
21960: PUSH
21961: LD_INT 8
21963: PUSH
21964: LD_INT 11
21966: PUSH
21967: LD_INT 12
21969: PUSH
21970: LD_INT 15
21972: PUSH
21973: LD_INT 16
21975: PUSH
21976: LD_INT 22
21978: PUSH
21979: LD_INT 23
21981: PUSH
21982: LD_INT 26
21984: PUSH
21985: LD_INT 36
21987: PUSH
21988: EMPTY
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: PUSH
22002: LD_INT 101
22004: PUSH
22005: LD_INT 102
22007: PUSH
22008: LD_INT 105
22010: PUSH
22011: LD_INT 106
22013: PUSH
22014: LD_INT 108
22016: PUSH
22017: LD_INT 116
22019: PUSH
22020: LD_INT 117
22022: PUSH
22023: LD_INT 118
22025: PUSH
22026: EMPTY
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: PUSH
22036: EMPTY
22037: LIST
22038: LIST
22039: ST_TO_ADDR
22040: GO 24823
22042: LD_INT 5
22044: DOUBLE
22045: EQUAL
22046: IFTRUE 22050
22048: GO 22162
22050: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
22051: LD_ADDR_VAR 0 2
22055: PUSH
22056: LD_INT 2
22058: PUSH
22059: LD_INT 4
22061: PUSH
22062: LD_INT 5
22064: PUSH
22065: LD_INT 6
22067: PUSH
22068: LD_INT 8
22070: PUSH
22071: LD_INT 11
22073: PUSH
22074: LD_INT 12
22076: PUSH
22077: LD_INT 15
22079: PUSH
22080: LD_INT 16
22082: PUSH
22083: LD_INT 22
22085: PUSH
22086: LD_INT 23
22088: PUSH
22089: LD_INT 25
22091: PUSH
22092: LD_INT 26
22094: PUSH
22095: LD_INT 36
22097: PUSH
22098: EMPTY
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: PUSH
22114: LD_INT 101
22116: PUSH
22117: LD_INT 102
22119: PUSH
22120: LD_INT 105
22122: PUSH
22123: LD_INT 106
22125: PUSH
22126: LD_INT 108
22128: PUSH
22129: LD_INT 109
22131: PUSH
22132: LD_INT 112
22134: PUSH
22135: LD_INT 116
22137: PUSH
22138: LD_INT 117
22140: PUSH
22141: LD_INT 118
22143: PUSH
22144: EMPTY
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: PUSH
22156: EMPTY
22157: LIST
22158: LIST
22159: ST_TO_ADDR
22160: GO 24823
22162: LD_INT 6
22164: DOUBLE
22165: EQUAL
22166: IFTRUE 22170
22168: GO 22302
22170: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22171: LD_ADDR_VAR 0 2
22175: PUSH
22176: LD_INT 2
22178: PUSH
22179: LD_INT 4
22181: PUSH
22182: LD_INT 5
22184: PUSH
22185: LD_INT 6
22187: PUSH
22188: LD_INT 8
22190: PUSH
22191: LD_INT 11
22193: PUSH
22194: LD_INT 12
22196: PUSH
22197: LD_INT 15
22199: PUSH
22200: LD_INT 16
22202: PUSH
22203: LD_INT 20
22205: PUSH
22206: LD_INT 21
22208: PUSH
22209: LD_INT 22
22211: PUSH
22212: LD_INT 23
22214: PUSH
22215: LD_INT 25
22217: PUSH
22218: LD_INT 26
22220: PUSH
22221: LD_INT 30
22223: PUSH
22224: LD_INT 31
22226: PUSH
22227: LD_INT 32
22229: PUSH
22230: LD_INT 36
22232: PUSH
22233: EMPTY
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: PUSH
22254: LD_INT 101
22256: PUSH
22257: LD_INT 102
22259: PUSH
22260: LD_INT 105
22262: PUSH
22263: LD_INT 106
22265: PUSH
22266: LD_INT 108
22268: PUSH
22269: LD_INT 109
22271: PUSH
22272: LD_INT 112
22274: PUSH
22275: LD_INT 116
22277: PUSH
22278: LD_INT 117
22280: PUSH
22281: LD_INT 118
22283: PUSH
22284: EMPTY
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: PUSH
22296: EMPTY
22297: LIST
22298: LIST
22299: ST_TO_ADDR
22300: GO 24823
22302: LD_INT 7
22304: DOUBLE
22305: EQUAL
22306: IFTRUE 22310
22308: GO 22422
22310: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22311: LD_ADDR_VAR 0 2
22315: PUSH
22316: LD_INT 2
22318: PUSH
22319: LD_INT 4
22321: PUSH
22322: LD_INT 5
22324: PUSH
22325: LD_INT 7
22327: PUSH
22328: LD_INT 11
22330: PUSH
22331: LD_INT 12
22333: PUSH
22334: LD_INT 15
22336: PUSH
22337: LD_INT 16
22339: PUSH
22340: LD_INT 20
22342: PUSH
22343: LD_INT 21
22345: PUSH
22346: LD_INT 22
22348: PUSH
22349: LD_INT 23
22351: PUSH
22352: LD_INT 25
22354: PUSH
22355: LD_INT 26
22357: PUSH
22358: EMPTY
22359: LIST
22360: LIST
22361: LIST
22362: LIST
22363: LIST
22364: LIST
22365: LIST
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: LIST
22373: PUSH
22374: LD_INT 101
22376: PUSH
22377: LD_INT 102
22379: PUSH
22380: LD_INT 103
22382: PUSH
22383: LD_INT 105
22385: PUSH
22386: LD_INT 106
22388: PUSH
22389: LD_INT 108
22391: PUSH
22392: LD_INT 112
22394: PUSH
22395: LD_INT 116
22397: PUSH
22398: LD_INT 117
22400: PUSH
22401: LD_INT 118
22403: PUSH
22404: EMPTY
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: PUSH
22416: EMPTY
22417: LIST
22418: LIST
22419: ST_TO_ADDR
22420: GO 24823
22422: LD_INT 8
22424: DOUBLE
22425: EQUAL
22426: IFTRUE 22430
22428: GO 22570
22430: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22431: LD_ADDR_VAR 0 2
22435: PUSH
22436: LD_INT 2
22438: PUSH
22439: LD_INT 4
22441: PUSH
22442: LD_INT 5
22444: PUSH
22445: LD_INT 6
22447: PUSH
22448: LD_INT 7
22450: PUSH
22451: LD_INT 8
22453: PUSH
22454: LD_INT 11
22456: PUSH
22457: LD_INT 12
22459: PUSH
22460: LD_INT 15
22462: PUSH
22463: LD_INT 16
22465: PUSH
22466: LD_INT 20
22468: PUSH
22469: LD_INT 21
22471: PUSH
22472: LD_INT 22
22474: PUSH
22475: LD_INT 23
22477: PUSH
22478: LD_INT 25
22480: PUSH
22481: LD_INT 26
22483: PUSH
22484: LD_INT 30
22486: PUSH
22487: LD_INT 31
22489: PUSH
22490: LD_INT 32
22492: PUSH
22493: LD_INT 36
22495: PUSH
22496: EMPTY
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: PUSH
22518: LD_INT 101
22520: PUSH
22521: LD_INT 102
22523: PUSH
22524: LD_INT 103
22526: PUSH
22527: LD_INT 105
22529: PUSH
22530: LD_INT 106
22532: PUSH
22533: LD_INT 108
22535: PUSH
22536: LD_INT 109
22538: PUSH
22539: LD_INT 112
22541: PUSH
22542: LD_INT 116
22544: PUSH
22545: LD_INT 117
22547: PUSH
22548: LD_INT 118
22550: PUSH
22551: EMPTY
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: PUSH
22564: EMPTY
22565: LIST
22566: LIST
22567: ST_TO_ADDR
22568: GO 24823
22570: LD_INT 9
22572: DOUBLE
22573: EQUAL
22574: IFTRUE 22578
22576: GO 22726
22578: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22579: LD_ADDR_VAR 0 2
22583: PUSH
22584: LD_INT 2
22586: PUSH
22587: LD_INT 4
22589: PUSH
22590: LD_INT 5
22592: PUSH
22593: LD_INT 6
22595: PUSH
22596: LD_INT 7
22598: PUSH
22599: LD_INT 8
22601: PUSH
22602: LD_INT 11
22604: PUSH
22605: LD_INT 12
22607: PUSH
22608: LD_INT 15
22610: PUSH
22611: LD_INT 16
22613: PUSH
22614: LD_INT 20
22616: PUSH
22617: LD_INT 21
22619: PUSH
22620: LD_INT 22
22622: PUSH
22623: LD_INT 23
22625: PUSH
22626: LD_INT 25
22628: PUSH
22629: LD_INT 26
22631: PUSH
22632: LD_INT 28
22634: PUSH
22635: LD_INT 30
22637: PUSH
22638: LD_INT 31
22640: PUSH
22641: LD_INT 32
22643: PUSH
22644: LD_INT 36
22646: PUSH
22647: EMPTY
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: PUSH
22670: LD_INT 101
22672: PUSH
22673: LD_INT 102
22675: PUSH
22676: LD_INT 103
22678: PUSH
22679: LD_INT 105
22681: PUSH
22682: LD_INT 106
22684: PUSH
22685: LD_INT 108
22687: PUSH
22688: LD_INT 109
22690: PUSH
22691: LD_INT 112
22693: PUSH
22694: LD_INT 114
22696: PUSH
22697: LD_INT 116
22699: PUSH
22700: LD_INT 117
22702: PUSH
22703: LD_INT 118
22705: PUSH
22706: EMPTY
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: PUSH
22720: EMPTY
22721: LIST
22722: LIST
22723: ST_TO_ADDR
22724: GO 24823
22726: LD_INT 10
22728: DOUBLE
22729: EQUAL
22730: IFTRUE 22734
22732: GO 22930
22734: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22735: LD_ADDR_VAR 0 2
22739: PUSH
22740: LD_INT 2
22742: PUSH
22743: LD_INT 4
22745: PUSH
22746: LD_INT 5
22748: PUSH
22749: LD_INT 6
22751: PUSH
22752: LD_INT 7
22754: PUSH
22755: LD_INT 8
22757: PUSH
22758: LD_INT 9
22760: PUSH
22761: LD_INT 10
22763: PUSH
22764: LD_INT 11
22766: PUSH
22767: LD_INT 12
22769: PUSH
22770: LD_INT 13
22772: PUSH
22773: LD_INT 14
22775: PUSH
22776: LD_INT 15
22778: PUSH
22779: LD_INT 16
22781: PUSH
22782: LD_INT 17
22784: PUSH
22785: LD_INT 18
22787: PUSH
22788: LD_INT 19
22790: PUSH
22791: LD_INT 20
22793: PUSH
22794: LD_INT 21
22796: PUSH
22797: LD_INT 22
22799: PUSH
22800: LD_INT 23
22802: PUSH
22803: LD_INT 24
22805: PUSH
22806: LD_INT 25
22808: PUSH
22809: LD_INT 26
22811: PUSH
22812: LD_INT 28
22814: PUSH
22815: LD_INT 30
22817: PUSH
22818: LD_INT 31
22820: PUSH
22821: LD_INT 32
22823: PUSH
22824: LD_INT 36
22826: PUSH
22827: EMPTY
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: PUSH
22858: LD_INT 101
22860: PUSH
22861: LD_INT 102
22863: PUSH
22864: LD_INT 103
22866: PUSH
22867: LD_INT 104
22869: PUSH
22870: LD_INT 105
22872: PUSH
22873: LD_INT 106
22875: PUSH
22876: LD_INT 107
22878: PUSH
22879: LD_INT 108
22881: PUSH
22882: LD_INT 109
22884: PUSH
22885: LD_INT 110
22887: PUSH
22888: LD_INT 111
22890: PUSH
22891: LD_INT 112
22893: PUSH
22894: LD_INT 114
22896: PUSH
22897: LD_INT 116
22899: PUSH
22900: LD_INT 117
22902: PUSH
22903: LD_INT 118
22905: PUSH
22906: EMPTY
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: PUSH
22924: EMPTY
22925: LIST
22926: LIST
22927: ST_TO_ADDR
22928: GO 24823
22930: LD_INT 11
22932: DOUBLE
22933: EQUAL
22934: IFTRUE 22938
22936: GO 23142
22938: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22939: LD_ADDR_VAR 0 2
22943: PUSH
22944: LD_INT 2
22946: PUSH
22947: LD_INT 3
22949: PUSH
22950: LD_INT 4
22952: PUSH
22953: LD_INT 5
22955: PUSH
22956: LD_INT 6
22958: PUSH
22959: LD_INT 7
22961: PUSH
22962: LD_INT 8
22964: PUSH
22965: LD_INT 9
22967: PUSH
22968: LD_INT 10
22970: PUSH
22971: LD_INT 11
22973: PUSH
22974: LD_INT 12
22976: PUSH
22977: LD_INT 13
22979: PUSH
22980: LD_INT 14
22982: PUSH
22983: LD_INT 15
22985: PUSH
22986: LD_INT 16
22988: PUSH
22989: LD_INT 17
22991: PUSH
22992: LD_INT 18
22994: PUSH
22995: LD_INT 19
22997: PUSH
22998: LD_INT 20
23000: PUSH
23001: LD_INT 21
23003: PUSH
23004: LD_INT 22
23006: PUSH
23007: LD_INT 23
23009: PUSH
23010: LD_INT 24
23012: PUSH
23013: LD_INT 25
23015: PUSH
23016: LD_INT 26
23018: PUSH
23019: LD_INT 28
23021: PUSH
23022: LD_INT 30
23024: PUSH
23025: LD_INT 31
23027: PUSH
23028: LD_INT 32
23030: PUSH
23031: LD_INT 34
23033: PUSH
23034: LD_INT 36
23036: PUSH
23037: EMPTY
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: PUSH
23070: LD_INT 101
23072: PUSH
23073: LD_INT 102
23075: PUSH
23076: LD_INT 103
23078: PUSH
23079: LD_INT 104
23081: PUSH
23082: LD_INT 105
23084: PUSH
23085: LD_INT 106
23087: PUSH
23088: LD_INT 107
23090: PUSH
23091: LD_INT 108
23093: PUSH
23094: LD_INT 109
23096: PUSH
23097: LD_INT 110
23099: PUSH
23100: LD_INT 111
23102: PUSH
23103: LD_INT 112
23105: PUSH
23106: LD_INT 114
23108: PUSH
23109: LD_INT 116
23111: PUSH
23112: LD_INT 117
23114: PUSH
23115: LD_INT 118
23117: PUSH
23118: EMPTY
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: PUSH
23136: EMPTY
23137: LIST
23138: LIST
23139: ST_TO_ADDR
23140: GO 24823
23142: LD_INT 12
23144: DOUBLE
23145: EQUAL
23146: IFTRUE 23150
23148: GO 23370
23150: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23151: LD_ADDR_VAR 0 2
23155: PUSH
23156: LD_INT 1
23158: PUSH
23159: LD_INT 2
23161: PUSH
23162: LD_INT 3
23164: PUSH
23165: LD_INT 4
23167: PUSH
23168: LD_INT 5
23170: PUSH
23171: LD_INT 6
23173: PUSH
23174: LD_INT 7
23176: PUSH
23177: LD_INT 8
23179: PUSH
23180: LD_INT 9
23182: PUSH
23183: LD_INT 10
23185: PUSH
23186: LD_INT 11
23188: PUSH
23189: LD_INT 12
23191: PUSH
23192: LD_INT 13
23194: PUSH
23195: LD_INT 14
23197: PUSH
23198: LD_INT 15
23200: PUSH
23201: LD_INT 16
23203: PUSH
23204: LD_INT 17
23206: PUSH
23207: LD_INT 18
23209: PUSH
23210: LD_INT 19
23212: PUSH
23213: LD_INT 20
23215: PUSH
23216: LD_INT 21
23218: PUSH
23219: LD_INT 22
23221: PUSH
23222: LD_INT 23
23224: PUSH
23225: LD_INT 24
23227: PUSH
23228: LD_INT 25
23230: PUSH
23231: LD_INT 26
23233: PUSH
23234: LD_INT 27
23236: PUSH
23237: LD_INT 28
23239: PUSH
23240: LD_INT 30
23242: PUSH
23243: LD_INT 31
23245: PUSH
23246: LD_INT 32
23248: PUSH
23249: LD_INT 33
23251: PUSH
23252: LD_INT 34
23254: PUSH
23255: LD_INT 36
23257: PUSH
23258: EMPTY
23259: LIST
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: PUSH
23294: LD_INT 101
23296: PUSH
23297: LD_INT 102
23299: PUSH
23300: LD_INT 103
23302: PUSH
23303: LD_INT 104
23305: PUSH
23306: LD_INT 105
23308: PUSH
23309: LD_INT 106
23311: PUSH
23312: LD_INT 107
23314: PUSH
23315: LD_INT 108
23317: PUSH
23318: LD_INT 109
23320: PUSH
23321: LD_INT 110
23323: PUSH
23324: LD_INT 111
23326: PUSH
23327: LD_INT 112
23329: PUSH
23330: LD_INT 113
23332: PUSH
23333: LD_INT 114
23335: PUSH
23336: LD_INT 116
23338: PUSH
23339: LD_INT 117
23341: PUSH
23342: LD_INT 118
23344: PUSH
23345: EMPTY
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: PUSH
23364: EMPTY
23365: LIST
23366: LIST
23367: ST_TO_ADDR
23368: GO 24823
23370: LD_INT 13
23372: DOUBLE
23373: EQUAL
23374: IFTRUE 23378
23376: GO 23586
23378: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23379: LD_ADDR_VAR 0 2
23383: PUSH
23384: LD_INT 1
23386: PUSH
23387: LD_INT 2
23389: PUSH
23390: LD_INT 3
23392: PUSH
23393: LD_INT 4
23395: PUSH
23396: LD_INT 5
23398: PUSH
23399: LD_INT 8
23401: PUSH
23402: LD_INT 9
23404: PUSH
23405: LD_INT 10
23407: PUSH
23408: LD_INT 11
23410: PUSH
23411: LD_INT 12
23413: PUSH
23414: LD_INT 14
23416: PUSH
23417: LD_INT 15
23419: PUSH
23420: LD_INT 16
23422: PUSH
23423: LD_INT 17
23425: PUSH
23426: LD_INT 18
23428: PUSH
23429: LD_INT 19
23431: PUSH
23432: LD_INT 20
23434: PUSH
23435: LD_INT 21
23437: PUSH
23438: LD_INT 22
23440: PUSH
23441: LD_INT 23
23443: PUSH
23444: LD_INT 24
23446: PUSH
23447: LD_INT 25
23449: PUSH
23450: LD_INT 26
23452: PUSH
23453: LD_INT 27
23455: PUSH
23456: LD_INT 28
23458: PUSH
23459: LD_INT 30
23461: PUSH
23462: LD_INT 31
23464: PUSH
23465: LD_INT 32
23467: PUSH
23468: LD_INT 33
23470: PUSH
23471: LD_INT 34
23473: PUSH
23474: LD_INT 36
23476: PUSH
23477: EMPTY
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: PUSH
23510: LD_INT 101
23512: PUSH
23513: LD_INT 102
23515: PUSH
23516: LD_INT 103
23518: PUSH
23519: LD_INT 104
23521: PUSH
23522: LD_INT 105
23524: PUSH
23525: LD_INT 106
23527: PUSH
23528: LD_INT 107
23530: PUSH
23531: LD_INT 108
23533: PUSH
23534: LD_INT 109
23536: PUSH
23537: LD_INT 110
23539: PUSH
23540: LD_INT 111
23542: PUSH
23543: LD_INT 112
23545: PUSH
23546: LD_INT 113
23548: PUSH
23549: LD_INT 114
23551: PUSH
23552: LD_INT 116
23554: PUSH
23555: LD_INT 117
23557: PUSH
23558: LD_INT 118
23560: PUSH
23561: EMPTY
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: PUSH
23580: EMPTY
23581: LIST
23582: LIST
23583: ST_TO_ADDR
23584: GO 24823
23586: LD_INT 14
23588: DOUBLE
23589: EQUAL
23590: IFTRUE 23594
23592: GO 23818
23594: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23595: LD_ADDR_VAR 0 2
23599: PUSH
23600: LD_INT 1
23602: PUSH
23603: LD_INT 2
23605: PUSH
23606: LD_INT 3
23608: PUSH
23609: LD_INT 4
23611: PUSH
23612: LD_INT 5
23614: PUSH
23615: LD_INT 6
23617: PUSH
23618: LD_INT 7
23620: PUSH
23621: LD_INT 8
23623: PUSH
23624: LD_INT 9
23626: PUSH
23627: LD_INT 10
23629: PUSH
23630: LD_INT 11
23632: PUSH
23633: LD_INT 12
23635: PUSH
23636: LD_INT 13
23638: PUSH
23639: LD_INT 14
23641: PUSH
23642: LD_INT 15
23644: PUSH
23645: LD_INT 16
23647: PUSH
23648: LD_INT 17
23650: PUSH
23651: LD_INT 18
23653: PUSH
23654: LD_INT 19
23656: PUSH
23657: LD_INT 20
23659: PUSH
23660: LD_INT 21
23662: PUSH
23663: LD_INT 22
23665: PUSH
23666: LD_INT 23
23668: PUSH
23669: LD_INT 24
23671: PUSH
23672: LD_INT 25
23674: PUSH
23675: LD_INT 26
23677: PUSH
23678: LD_INT 27
23680: PUSH
23681: LD_INT 28
23683: PUSH
23684: LD_INT 29
23686: PUSH
23687: LD_INT 30
23689: PUSH
23690: LD_INT 31
23692: PUSH
23693: LD_INT 32
23695: PUSH
23696: LD_INT 33
23698: PUSH
23699: LD_INT 34
23701: PUSH
23702: LD_INT 36
23704: PUSH
23705: EMPTY
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: PUSH
23742: LD_INT 101
23744: PUSH
23745: LD_INT 102
23747: PUSH
23748: LD_INT 103
23750: PUSH
23751: LD_INT 104
23753: PUSH
23754: LD_INT 105
23756: PUSH
23757: LD_INT 106
23759: PUSH
23760: LD_INT 107
23762: PUSH
23763: LD_INT 108
23765: PUSH
23766: LD_INT 109
23768: PUSH
23769: LD_INT 110
23771: PUSH
23772: LD_INT 111
23774: PUSH
23775: LD_INT 112
23777: PUSH
23778: LD_INT 113
23780: PUSH
23781: LD_INT 114
23783: PUSH
23784: LD_INT 116
23786: PUSH
23787: LD_INT 117
23789: PUSH
23790: LD_INT 118
23792: PUSH
23793: EMPTY
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: PUSH
23812: EMPTY
23813: LIST
23814: LIST
23815: ST_TO_ADDR
23816: GO 24823
23818: LD_INT 15
23820: DOUBLE
23821: EQUAL
23822: IFTRUE 23826
23824: GO 24050
23826: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23827: LD_ADDR_VAR 0 2
23831: PUSH
23832: LD_INT 1
23834: PUSH
23835: LD_INT 2
23837: PUSH
23838: LD_INT 3
23840: PUSH
23841: LD_INT 4
23843: PUSH
23844: LD_INT 5
23846: PUSH
23847: LD_INT 6
23849: PUSH
23850: LD_INT 7
23852: PUSH
23853: LD_INT 8
23855: PUSH
23856: LD_INT 9
23858: PUSH
23859: LD_INT 10
23861: PUSH
23862: LD_INT 11
23864: PUSH
23865: LD_INT 12
23867: PUSH
23868: LD_INT 13
23870: PUSH
23871: LD_INT 14
23873: PUSH
23874: LD_INT 15
23876: PUSH
23877: LD_INT 16
23879: PUSH
23880: LD_INT 17
23882: PUSH
23883: LD_INT 18
23885: PUSH
23886: LD_INT 19
23888: PUSH
23889: LD_INT 20
23891: PUSH
23892: LD_INT 21
23894: PUSH
23895: LD_INT 22
23897: PUSH
23898: LD_INT 23
23900: PUSH
23901: LD_INT 24
23903: PUSH
23904: LD_INT 25
23906: PUSH
23907: LD_INT 26
23909: PUSH
23910: LD_INT 27
23912: PUSH
23913: LD_INT 28
23915: PUSH
23916: LD_INT 29
23918: PUSH
23919: LD_INT 30
23921: PUSH
23922: LD_INT 31
23924: PUSH
23925: LD_INT 32
23927: PUSH
23928: LD_INT 33
23930: PUSH
23931: LD_INT 34
23933: PUSH
23934: LD_INT 36
23936: PUSH
23937: EMPTY
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: PUSH
23974: LD_INT 101
23976: PUSH
23977: LD_INT 102
23979: PUSH
23980: LD_INT 103
23982: PUSH
23983: LD_INT 104
23985: PUSH
23986: LD_INT 105
23988: PUSH
23989: LD_INT 106
23991: PUSH
23992: LD_INT 107
23994: PUSH
23995: LD_INT 108
23997: PUSH
23998: LD_INT 109
24000: PUSH
24001: LD_INT 110
24003: PUSH
24004: LD_INT 111
24006: PUSH
24007: LD_INT 112
24009: PUSH
24010: LD_INT 113
24012: PUSH
24013: LD_INT 114
24015: PUSH
24016: LD_INT 116
24018: PUSH
24019: LD_INT 117
24021: PUSH
24022: LD_INT 118
24024: PUSH
24025: EMPTY
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: PUSH
24044: EMPTY
24045: LIST
24046: LIST
24047: ST_TO_ADDR
24048: GO 24823
24050: LD_INT 16
24052: DOUBLE
24053: EQUAL
24054: IFTRUE 24058
24056: GO 24194
24058: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
24059: LD_ADDR_VAR 0 2
24063: PUSH
24064: LD_INT 2
24066: PUSH
24067: LD_INT 4
24069: PUSH
24070: LD_INT 5
24072: PUSH
24073: LD_INT 7
24075: PUSH
24076: LD_INT 11
24078: PUSH
24079: LD_INT 12
24081: PUSH
24082: LD_INT 15
24084: PUSH
24085: LD_INT 16
24087: PUSH
24088: LD_INT 20
24090: PUSH
24091: LD_INT 21
24093: PUSH
24094: LD_INT 22
24096: PUSH
24097: LD_INT 23
24099: PUSH
24100: LD_INT 25
24102: PUSH
24103: LD_INT 26
24105: PUSH
24106: LD_INT 30
24108: PUSH
24109: LD_INT 31
24111: PUSH
24112: LD_INT 32
24114: PUSH
24115: LD_INT 33
24117: PUSH
24118: LD_INT 34
24120: PUSH
24121: EMPTY
24122: LIST
24123: LIST
24124: LIST
24125: LIST
24126: LIST
24127: LIST
24128: LIST
24129: LIST
24130: LIST
24131: LIST
24132: LIST
24133: LIST
24134: LIST
24135: LIST
24136: LIST
24137: LIST
24138: LIST
24139: LIST
24140: LIST
24141: PUSH
24142: LD_INT 101
24144: PUSH
24145: LD_INT 102
24147: PUSH
24148: LD_INT 103
24150: PUSH
24151: LD_INT 106
24153: PUSH
24154: LD_INT 108
24156: PUSH
24157: LD_INT 112
24159: PUSH
24160: LD_INT 113
24162: PUSH
24163: LD_INT 114
24165: PUSH
24166: LD_INT 116
24168: PUSH
24169: LD_INT 117
24171: PUSH
24172: LD_INT 118
24174: PUSH
24175: EMPTY
24176: LIST
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: PUSH
24188: EMPTY
24189: LIST
24190: LIST
24191: ST_TO_ADDR
24192: GO 24823
24194: LD_INT 17
24196: DOUBLE
24197: EQUAL
24198: IFTRUE 24202
24200: GO 24426
24202: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24203: LD_ADDR_VAR 0 2
24207: PUSH
24208: LD_INT 1
24210: PUSH
24211: LD_INT 2
24213: PUSH
24214: LD_INT 3
24216: PUSH
24217: LD_INT 4
24219: PUSH
24220: LD_INT 5
24222: PUSH
24223: LD_INT 6
24225: PUSH
24226: LD_INT 7
24228: PUSH
24229: LD_INT 8
24231: PUSH
24232: LD_INT 9
24234: PUSH
24235: LD_INT 10
24237: PUSH
24238: LD_INT 11
24240: PUSH
24241: LD_INT 12
24243: PUSH
24244: LD_INT 13
24246: PUSH
24247: LD_INT 14
24249: PUSH
24250: LD_INT 15
24252: PUSH
24253: LD_INT 16
24255: PUSH
24256: LD_INT 17
24258: PUSH
24259: LD_INT 18
24261: PUSH
24262: LD_INT 19
24264: PUSH
24265: LD_INT 20
24267: PUSH
24268: LD_INT 21
24270: PUSH
24271: LD_INT 22
24273: PUSH
24274: LD_INT 23
24276: PUSH
24277: LD_INT 24
24279: PUSH
24280: LD_INT 25
24282: PUSH
24283: LD_INT 26
24285: PUSH
24286: LD_INT 27
24288: PUSH
24289: LD_INT 28
24291: PUSH
24292: LD_INT 29
24294: PUSH
24295: LD_INT 30
24297: PUSH
24298: LD_INT 31
24300: PUSH
24301: LD_INT 32
24303: PUSH
24304: LD_INT 33
24306: PUSH
24307: LD_INT 34
24309: PUSH
24310: LD_INT 36
24312: PUSH
24313: EMPTY
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: LIST
24337: LIST
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: PUSH
24350: LD_INT 101
24352: PUSH
24353: LD_INT 102
24355: PUSH
24356: LD_INT 103
24358: PUSH
24359: LD_INT 104
24361: PUSH
24362: LD_INT 105
24364: PUSH
24365: LD_INT 106
24367: PUSH
24368: LD_INT 107
24370: PUSH
24371: LD_INT 108
24373: PUSH
24374: LD_INT 109
24376: PUSH
24377: LD_INT 110
24379: PUSH
24380: LD_INT 111
24382: PUSH
24383: LD_INT 112
24385: PUSH
24386: LD_INT 113
24388: PUSH
24389: LD_INT 114
24391: PUSH
24392: LD_INT 116
24394: PUSH
24395: LD_INT 117
24397: PUSH
24398: LD_INT 118
24400: PUSH
24401: EMPTY
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: PUSH
24420: EMPTY
24421: LIST
24422: LIST
24423: ST_TO_ADDR
24424: GO 24823
24426: LD_INT 18
24428: DOUBLE
24429: EQUAL
24430: IFTRUE 24434
24432: GO 24582
24434: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24435: LD_ADDR_VAR 0 2
24439: PUSH
24440: LD_INT 2
24442: PUSH
24443: LD_INT 4
24445: PUSH
24446: LD_INT 5
24448: PUSH
24449: LD_INT 7
24451: PUSH
24452: LD_INT 11
24454: PUSH
24455: LD_INT 12
24457: PUSH
24458: LD_INT 15
24460: PUSH
24461: LD_INT 16
24463: PUSH
24464: LD_INT 20
24466: PUSH
24467: LD_INT 21
24469: PUSH
24470: LD_INT 22
24472: PUSH
24473: LD_INT 23
24475: PUSH
24476: LD_INT 25
24478: PUSH
24479: LD_INT 26
24481: PUSH
24482: LD_INT 30
24484: PUSH
24485: LD_INT 31
24487: PUSH
24488: LD_INT 32
24490: PUSH
24491: LD_INT 33
24493: PUSH
24494: LD_INT 34
24496: PUSH
24497: LD_INT 35
24499: PUSH
24500: LD_INT 36
24502: PUSH
24503: EMPTY
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: LIST
24518: LIST
24519: LIST
24520: LIST
24521: LIST
24522: LIST
24523: LIST
24524: LIST
24525: PUSH
24526: LD_INT 101
24528: PUSH
24529: LD_INT 102
24531: PUSH
24532: LD_INT 103
24534: PUSH
24535: LD_INT 106
24537: PUSH
24538: LD_INT 108
24540: PUSH
24541: LD_INT 112
24543: PUSH
24544: LD_INT 113
24546: PUSH
24547: LD_INT 114
24549: PUSH
24550: LD_INT 115
24552: PUSH
24553: LD_INT 116
24555: PUSH
24556: LD_INT 117
24558: PUSH
24559: LD_INT 118
24561: PUSH
24562: EMPTY
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: PUSH
24576: EMPTY
24577: LIST
24578: LIST
24579: ST_TO_ADDR
24580: GO 24823
24582: LD_INT 19
24584: DOUBLE
24585: EQUAL
24586: IFTRUE 24590
24588: GO 24822
24590: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24591: LD_ADDR_VAR 0 2
24595: PUSH
24596: LD_INT 1
24598: PUSH
24599: LD_INT 2
24601: PUSH
24602: LD_INT 3
24604: PUSH
24605: LD_INT 4
24607: PUSH
24608: LD_INT 5
24610: PUSH
24611: LD_INT 6
24613: PUSH
24614: LD_INT 7
24616: PUSH
24617: LD_INT 8
24619: PUSH
24620: LD_INT 9
24622: PUSH
24623: LD_INT 10
24625: PUSH
24626: LD_INT 11
24628: PUSH
24629: LD_INT 12
24631: PUSH
24632: LD_INT 13
24634: PUSH
24635: LD_INT 14
24637: PUSH
24638: LD_INT 15
24640: PUSH
24641: LD_INT 16
24643: PUSH
24644: LD_INT 17
24646: PUSH
24647: LD_INT 18
24649: PUSH
24650: LD_INT 19
24652: PUSH
24653: LD_INT 20
24655: PUSH
24656: LD_INT 21
24658: PUSH
24659: LD_INT 22
24661: PUSH
24662: LD_INT 23
24664: PUSH
24665: LD_INT 24
24667: PUSH
24668: LD_INT 25
24670: PUSH
24671: LD_INT 26
24673: PUSH
24674: LD_INT 27
24676: PUSH
24677: LD_INT 28
24679: PUSH
24680: LD_INT 29
24682: PUSH
24683: LD_INT 30
24685: PUSH
24686: LD_INT 31
24688: PUSH
24689: LD_INT 32
24691: PUSH
24692: LD_INT 33
24694: PUSH
24695: LD_INT 34
24697: PUSH
24698: LD_INT 35
24700: PUSH
24701: LD_INT 36
24703: PUSH
24704: EMPTY
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: PUSH
24742: LD_INT 101
24744: PUSH
24745: LD_INT 102
24747: PUSH
24748: LD_INT 103
24750: PUSH
24751: LD_INT 104
24753: PUSH
24754: LD_INT 105
24756: PUSH
24757: LD_INT 106
24759: PUSH
24760: LD_INT 107
24762: PUSH
24763: LD_INT 108
24765: PUSH
24766: LD_INT 109
24768: PUSH
24769: LD_INT 110
24771: PUSH
24772: LD_INT 111
24774: PUSH
24775: LD_INT 112
24777: PUSH
24778: LD_INT 113
24780: PUSH
24781: LD_INT 114
24783: PUSH
24784: LD_INT 115
24786: PUSH
24787: LD_INT 116
24789: PUSH
24790: LD_INT 117
24792: PUSH
24793: LD_INT 118
24795: PUSH
24796: EMPTY
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: LIST
24809: LIST
24810: LIST
24811: LIST
24812: LIST
24813: LIST
24814: LIST
24815: PUSH
24816: EMPTY
24817: LIST
24818: LIST
24819: ST_TO_ADDR
24820: GO 24823
24822: POP
// end else
24823: GO 25054
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24825: LD_ADDR_VAR 0 2
24829: PUSH
24830: LD_INT 1
24832: PUSH
24833: LD_INT 2
24835: PUSH
24836: LD_INT 3
24838: PUSH
24839: LD_INT 4
24841: PUSH
24842: LD_INT 5
24844: PUSH
24845: LD_INT 6
24847: PUSH
24848: LD_INT 7
24850: PUSH
24851: LD_INT 8
24853: PUSH
24854: LD_INT 9
24856: PUSH
24857: LD_INT 10
24859: PUSH
24860: LD_INT 11
24862: PUSH
24863: LD_INT 12
24865: PUSH
24866: LD_INT 13
24868: PUSH
24869: LD_INT 14
24871: PUSH
24872: LD_INT 15
24874: PUSH
24875: LD_INT 16
24877: PUSH
24878: LD_INT 17
24880: PUSH
24881: LD_INT 18
24883: PUSH
24884: LD_INT 19
24886: PUSH
24887: LD_INT 20
24889: PUSH
24890: LD_INT 21
24892: PUSH
24893: LD_INT 22
24895: PUSH
24896: LD_INT 23
24898: PUSH
24899: LD_INT 24
24901: PUSH
24902: LD_INT 25
24904: PUSH
24905: LD_INT 26
24907: PUSH
24908: LD_INT 27
24910: PUSH
24911: LD_INT 28
24913: PUSH
24914: LD_INT 29
24916: PUSH
24917: LD_INT 30
24919: PUSH
24920: LD_INT 31
24922: PUSH
24923: LD_INT 32
24925: PUSH
24926: LD_INT 33
24928: PUSH
24929: LD_INT 34
24931: PUSH
24932: LD_INT 35
24934: PUSH
24935: LD_INT 36
24937: PUSH
24938: EMPTY
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: LIST
24967: LIST
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: LIST
24973: LIST
24974: LIST
24975: PUSH
24976: LD_INT 101
24978: PUSH
24979: LD_INT 102
24981: PUSH
24982: LD_INT 103
24984: PUSH
24985: LD_INT 104
24987: PUSH
24988: LD_INT 105
24990: PUSH
24991: LD_INT 106
24993: PUSH
24994: LD_INT 107
24996: PUSH
24997: LD_INT 108
24999: PUSH
25000: LD_INT 109
25002: PUSH
25003: LD_INT 110
25005: PUSH
25006: LD_INT 111
25008: PUSH
25009: LD_INT 112
25011: PUSH
25012: LD_INT 113
25014: PUSH
25015: LD_INT 114
25017: PUSH
25018: LD_INT 115
25020: PUSH
25021: LD_INT 116
25023: PUSH
25024: LD_INT 117
25026: PUSH
25027: LD_INT 118
25029: PUSH
25030: EMPTY
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: PUSH
25050: EMPTY
25051: LIST
25052: LIST
25053: ST_TO_ADDR
// if result then
25054: LD_VAR 0 2
25058: IFFALSE 25844
// begin normal :=  ;
25060: LD_ADDR_VAR 0 5
25064: PUSH
25065: LD_STRING 
25067: ST_TO_ADDR
// hardcore :=  ;
25068: LD_ADDR_VAR 0 6
25072: PUSH
25073: LD_STRING 
25075: ST_TO_ADDR
// active :=  ;
25076: LD_ADDR_VAR 0 7
25080: PUSH
25081: LD_STRING 
25083: ST_TO_ADDR
// for i = 1 to normalCounter do
25084: LD_ADDR_VAR 0 8
25088: PUSH
25089: DOUBLE
25090: LD_INT 1
25092: DEC
25093: ST_TO_ADDR
25094: LD_EXP 62
25098: PUSH
25099: FOR_TO
25100: IFFALSE 25201
// begin tmp := 0 ;
25102: LD_ADDR_VAR 0 3
25106: PUSH
25107: LD_STRING 0
25109: ST_TO_ADDR
// if result [ 1 ] then
25110: LD_VAR 0 2
25114: PUSH
25115: LD_INT 1
25117: ARRAY
25118: IFFALSE 25183
// if result [ 1 ] [ 1 ] = i then
25120: LD_VAR 0 2
25124: PUSH
25125: LD_INT 1
25127: ARRAY
25128: PUSH
25129: LD_INT 1
25131: ARRAY
25132: PUSH
25133: LD_VAR 0 8
25137: EQUAL
25138: IFFALSE 25183
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25140: LD_ADDR_VAR 0 2
25144: PUSH
25145: LD_VAR 0 2
25149: PPUSH
25150: LD_INT 1
25152: PPUSH
25153: LD_VAR 0 2
25157: PUSH
25158: LD_INT 1
25160: ARRAY
25161: PPUSH
25162: LD_INT 1
25164: PPUSH
25165: CALL_OW 3
25169: PPUSH
25170: CALL_OW 1
25174: ST_TO_ADDR
// tmp := 1 ;
25175: LD_ADDR_VAR 0 3
25179: PUSH
25180: LD_STRING 1
25182: ST_TO_ADDR
// end ; normal := normal & tmp ;
25183: LD_ADDR_VAR 0 5
25187: PUSH
25188: LD_VAR 0 5
25192: PUSH
25193: LD_VAR 0 3
25197: STR
25198: ST_TO_ADDR
// end ;
25199: GO 25099
25201: POP
25202: POP
// for i = 1 to hardcoreCounter do
25203: LD_ADDR_VAR 0 8
25207: PUSH
25208: DOUBLE
25209: LD_INT 1
25211: DEC
25212: ST_TO_ADDR
25213: LD_EXP 63
25217: PUSH
25218: FOR_TO
25219: IFFALSE 25324
// begin tmp := 0 ;
25221: LD_ADDR_VAR 0 3
25225: PUSH
25226: LD_STRING 0
25228: ST_TO_ADDR
// if result [ 2 ] then
25229: LD_VAR 0 2
25233: PUSH
25234: LD_INT 2
25236: ARRAY
25237: IFFALSE 25306
// if result [ 2 ] [ 1 ] = 100 + i then
25239: LD_VAR 0 2
25243: PUSH
25244: LD_INT 2
25246: ARRAY
25247: PUSH
25248: LD_INT 1
25250: ARRAY
25251: PUSH
25252: LD_INT 100
25254: PUSH
25255: LD_VAR 0 8
25259: PLUS
25260: EQUAL
25261: IFFALSE 25306
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25263: LD_ADDR_VAR 0 2
25267: PUSH
25268: LD_VAR 0 2
25272: PPUSH
25273: LD_INT 2
25275: PPUSH
25276: LD_VAR 0 2
25280: PUSH
25281: LD_INT 2
25283: ARRAY
25284: PPUSH
25285: LD_INT 1
25287: PPUSH
25288: CALL_OW 3
25292: PPUSH
25293: CALL_OW 1
25297: ST_TO_ADDR
// tmp := 1 ;
25298: LD_ADDR_VAR 0 3
25302: PUSH
25303: LD_STRING 1
25305: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25306: LD_ADDR_VAR 0 6
25310: PUSH
25311: LD_VAR 0 6
25315: PUSH
25316: LD_VAR 0 3
25320: STR
25321: ST_TO_ADDR
// end ;
25322: GO 25218
25324: POP
25325: POP
// if isGameLoad then
25326: LD_VAR 0 1
25330: IFFALSE 25805
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25332: LD_ADDR_VAR 0 4
25336: PUSH
25337: LD_EXP 66
25341: PUSH
25342: LD_EXP 65
25346: PUSH
25347: LD_EXP 67
25351: PUSH
25352: LD_EXP 64
25356: PUSH
25357: LD_EXP 68
25361: PUSH
25362: LD_EXP 69
25366: PUSH
25367: LD_EXP 70
25371: PUSH
25372: LD_EXP 71
25376: PUSH
25377: LD_EXP 72
25381: PUSH
25382: LD_EXP 73
25386: PUSH
25387: LD_EXP 74
25391: PUSH
25392: LD_EXP 75
25396: PUSH
25397: LD_EXP 76
25401: PUSH
25402: LD_EXP 77
25406: PUSH
25407: LD_EXP 85
25411: PUSH
25412: LD_EXP 86
25416: PUSH
25417: LD_EXP 87
25421: PUSH
25422: LD_EXP 88
25426: PUSH
25427: LD_EXP 90
25431: PUSH
25432: LD_EXP 91
25436: PUSH
25437: LD_EXP 92
25441: PUSH
25442: LD_EXP 95
25446: PUSH
25447: LD_EXP 97
25451: PUSH
25452: LD_EXP 98
25456: PUSH
25457: LD_EXP 99
25461: PUSH
25462: LD_EXP 101
25466: PUSH
25467: LD_EXP 102
25471: PUSH
25472: LD_EXP 105
25476: PUSH
25477: LD_EXP 106
25481: PUSH
25482: LD_EXP 107
25486: PUSH
25487: LD_EXP 108
25491: PUSH
25492: LD_EXP 109
25496: PUSH
25497: LD_EXP 110
25501: PUSH
25502: LD_EXP 111
25506: PUSH
25507: LD_EXP 112
25511: PUSH
25512: LD_EXP 113
25516: PUSH
25517: LD_EXP 78
25521: PUSH
25522: LD_EXP 79
25526: PUSH
25527: LD_EXP 82
25531: PUSH
25532: LD_EXP 83
25536: PUSH
25537: LD_EXP 84
25541: PUSH
25542: LD_EXP 80
25546: PUSH
25547: LD_EXP 81
25551: PUSH
25552: LD_EXP 89
25556: PUSH
25557: LD_EXP 93
25561: PUSH
25562: LD_EXP 94
25566: PUSH
25567: LD_EXP 96
25571: PUSH
25572: LD_EXP 100
25576: PUSH
25577: LD_EXP 103
25581: PUSH
25582: LD_EXP 104
25586: PUSH
25587: LD_EXP 114
25591: PUSH
25592: LD_EXP 115
25596: PUSH
25597: LD_EXP 116
25601: PUSH
25602: LD_EXP 117
25606: PUSH
25607: EMPTY
25608: LIST
25609: LIST
25610: LIST
25611: LIST
25612: LIST
25613: LIST
25614: LIST
25615: LIST
25616: LIST
25617: LIST
25618: LIST
25619: LIST
25620: LIST
25621: LIST
25622: LIST
25623: LIST
25624: LIST
25625: LIST
25626: LIST
25627: LIST
25628: LIST
25629: LIST
25630: LIST
25631: LIST
25632: LIST
25633: LIST
25634: LIST
25635: LIST
25636: LIST
25637: LIST
25638: LIST
25639: LIST
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: LIST
25645: LIST
25646: LIST
25647: LIST
25648: LIST
25649: LIST
25650: LIST
25651: LIST
25652: LIST
25653: LIST
25654: LIST
25655: LIST
25656: LIST
25657: LIST
25658: LIST
25659: LIST
25660: LIST
25661: LIST
25662: ST_TO_ADDR
// tmp :=  ;
25663: LD_ADDR_VAR 0 3
25667: PUSH
25668: LD_STRING 
25670: ST_TO_ADDR
// for i = 1 to normalCounter do
25671: LD_ADDR_VAR 0 8
25675: PUSH
25676: DOUBLE
25677: LD_INT 1
25679: DEC
25680: ST_TO_ADDR
25681: LD_EXP 62
25685: PUSH
25686: FOR_TO
25687: IFFALSE 25723
// begin if flags [ i ] then
25689: LD_VAR 0 4
25693: PUSH
25694: LD_VAR 0 8
25698: ARRAY
25699: IFFALSE 25721
// tmp := tmp & i & ; ;
25701: LD_ADDR_VAR 0 3
25705: PUSH
25706: LD_VAR 0 3
25710: PUSH
25711: LD_VAR 0 8
25715: STR
25716: PUSH
25717: LD_STRING ;
25719: STR
25720: ST_TO_ADDR
// end ;
25721: GO 25686
25723: POP
25724: POP
// for i = 1 to hardcoreCounter do
25725: LD_ADDR_VAR 0 8
25729: PUSH
25730: DOUBLE
25731: LD_INT 1
25733: DEC
25734: ST_TO_ADDR
25735: LD_EXP 63
25739: PUSH
25740: FOR_TO
25741: IFFALSE 25787
// begin if flags [ normalCounter + i ] then
25743: LD_VAR 0 4
25747: PUSH
25748: LD_EXP 62
25752: PUSH
25753: LD_VAR 0 8
25757: PLUS
25758: ARRAY
25759: IFFALSE 25785
// tmp := tmp & ( 100 + i ) & ; ;
25761: LD_ADDR_VAR 0 3
25765: PUSH
25766: LD_VAR 0 3
25770: PUSH
25771: LD_INT 100
25773: PUSH
25774: LD_VAR 0 8
25778: PLUS
25779: STR
25780: PUSH
25781: LD_STRING ;
25783: STR
25784: ST_TO_ADDR
// end ;
25785: GO 25740
25787: POP
25788: POP
// if tmp then
25789: LD_VAR 0 3
25793: IFFALSE 25805
// active := tmp ;
25795: LD_ADDR_VAR 0 7
25799: PUSH
25800: LD_VAR 0 3
25804: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25805: LD_STRING getStreamItemsFromMission("
25807: PUSH
25808: LD_VAR 0 5
25812: STR
25813: PUSH
25814: LD_STRING ","
25816: STR
25817: PUSH
25818: LD_VAR 0 6
25822: STR
25823: PUSH
25824: LD_STRING ","
25826: STR
25827: PUSH
25828: LD_VAR 0 7
25832: STR
25833: PUSH
25834: LD_STRING ")
25836: STR
25837: PPUSH
25838: CALL_OW 559
// end else
25842: GO 25851
// ToLua ( getStreamItemsFromMission("","","") ) ;
25844: LD_STRING getStreamItemsFromMission("","","")
25846: PPUSH
25847: CALL_OW 559
// end ;
25851: LD_VAR 0 2
25855: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25856: LD_EXP 61
25860: PUSH
25861: LD_EXP 66
25865: AND
25866: IFFALSE 25990
25868: GO 25870
25870: DISABLE
25871: LD_INT 0
25873: PPUSH
25874: PPUSH
// begin enable ;
25875: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25876: LD_ADDR_VAR 0 2
25880: PUSH
25881: LD_INT 22
25883: PUSH
25884: LD_OWVAR 2
25888: PUSH
25889: EMPTY
25890: LIST
25891: LIST
25892: PUSH
25893: LD_INT 2
25895: PUSH
25896: LD_INT 34
25898: PUSH
25899: LD_INT 7
25901: PUSH
25902: EMPTY
25903: LIST
25904: LIST
25905: PUSH
25906: LD_INT 34
25908: PUSH
25909: LD_INT 45
25911: PUSH
25912: EMPTY
25913: LIST
25914: LIST
25915: PUSH
25916: LD_INT 34
25918: PUSH
25919: LD_INT 28
25921: PUSH
25922: EMPTY
25923: LIST
25924: LIST
25925: PUSH
25926: LD_INT 34
25928: PUSH
25929: LD_INT 47
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: PUSH
25936: EMPTY
25937: LIST
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: PUSH
25943: EMPTY
25944: LIST
25945: LIST
25946: PPUSH
25947: CALL_OW 69
25951: ST_TO_ADDR
// if not tmp then
25952: LD_VAR 0 2
25956: NOT
25957: IFFALSE 25961
// exit ;
25959: GO 25990
// for i in tmp do
25961: LD_ADDR_VAR 0 1
25965: PUSH
25966: LD_VAR 0 2
25970: PUSH
25971: FOR_IN
25972: IFFALSE 25988
// begin SetLives ( i , 0 ) ;
25974: LD_VAR 0 1
25978: PPUSH
25979: LD_INT 0
25981: PPUSH
25982: CALL_OW 234
// end ;
25986: GO 25971
25988: POP
25989: POP
// end ;
25990: PPOPN 2
25992: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25993: LD_EXP 61
25997: PUSH
25998: LD_EXP 67
26002: AND
26003: IFFALSE 26087
26005: GO 26007
26007: DISABLE
26008: LD_INT 0
26010: PPUSH
26011: PPUSH
// begin enable ;
26012: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
26013: LD_ADDR_VAR 0 2
26017: PUSH
26018: LD_INT 22
26020: PUSH
26021: LD_OWVAR 2
26025: PUSH
26026: EMPTY
26027: LIST
26028: LIST
26029: PUSH
26030: LD_INT 32
26032: PUSH
26033: LD_INT 3
26035: PUSH
26036: EMPTY
26037: LIST
26038: LIST
26039: PUSH
26040: EMPTY
26041: LIST
26042: LIST
26043: PPUSH
26044: CALL_OW 69
26048: ST_TO_ADDR
// if not tmp then
26049: LD_VAR 0 2
26053: NOT
26054: IFFALSE 26058
// exit ;
26056: GO 26087
// for i in tmp do
26058: LD_ADDR_VAR 0 1
26062: PUSH
26063: LD_VAR 0 2
26067: PUSH
26068: FOR_IN
26069: IFFALSE 26085
// begin SetLives ( i , 0 ) ;
26071: LD_VAR 0 1
26075: PPUSH
26076: LD_INT 0
26078: PPUSH
26079: CALL_OW 234
// end ;
26083: GO 26068
26085: POP
26086: POP
// end ;
26087: PPOPN 2
26089: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26090: LD_EXP 61
26094: PUSH
26095: LD_EXP 64
26099: AND
26100: IFFALSE 26193
26102: GO 26104
26104: DISABLE
26105: LD_INT 0
26107: PPUSH
// begin enable ;
26108: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26109: LD_ADDR_VAR 0 1
26113: PUSH
26114: LD_INT 22
26116: PUSH
26117: LD_OWVAR 2
26121: PUSH
26122: EMPTY
26123: LIST
26124: LIST
26125: PUSH
26126: LD_INT 2
26128: PUSH
26129: LD_INT 25
26131: PUSH
26132: LD_INT 5
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: PUSH
26139: LD_INT 25
26141: PUSH
26142: LD_INT 9
26144: PUSH
26145: EMPTY
26146: LIST
26147: LIST
26148: PUSH
26149: LD_INT 25
26151: PUSH
26152: LD_INT 8
26154: PUSH
26155: EMPTY
26156: LIST
26157: LIST
26158: PUSH
26159: EMPTY
26160: LIST
26161: LIST
26162: LIST
26163: LIST
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: PPUSH
26169: CALL_OW 69
26173: PUSH
26174: FOR_IN
26175: IFFALSE 26191
// begin SetClass ( i , 1 ) ;
26177: LD_VAR 0 1
26181: PPUSH
26182: LD_INT 1
26184: PPUSH
26185: CALL_OW 336
// end ;
26189: GO 26174
26191: POP
26192: POP
// end ;
26193: PPOPN 1
26195: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26196: LD_EXP 61
26200: PUSH
26201: LD_EXP 65
26205: AND
26206: PUSH
26207: LD_OWVAR 65
26211: PUSH
26212: LD_INT 7
26214: LESS
26215: AND
26216: IFFALSE 26230
26218: GO 26220
26220: DISABLE
// begin enable ;
26221: ENABLE
// game_speed := 7 ;
26222: LD_ADDR_OWVAR 65
26226: PUSH
26227: LD_INT 7
26229: ST_TO_ADDR
// end ;
26230: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26231: LD_EXP 61
26235: PUSH
26236: LD_EXP 68
26240: AND
26241: IFFALSE 26443
26243: GO 26245
26245: DISABLE
26246: LD_INT 0
26248: PPUSH
26249: PPUSH
26250: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26251: LD_ADDR_VAR 0 3
26255: PUSH
26256: LD_INT 81
26258: PUSH
26259: LD_OWVAR 2
26263: PUSH
26264: EMPTY
26265: LIST
26266: LIST
26267: PUSH
26268: LD_INT 21
26270: PUSH
26271: LD_INT 1
26273: PUSH
26274: EMPTY
26275: LIST
26276: LIST
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: PPUSH
26282: CALL_OW 69
26286: ST_TO_ADDR
// if not tmp then
26287: LD_VAR 0 3
26291: NOT
26292: IFFALSE 26296
// exit ;
26294: GO 26443
// if tmp > 5 then
26296: LD_VAR 0 3
26300: PUSH
26301: LD_INT 5
26303: GREATER
26304: IFFALSE 26316
// k := 5 else
26306: LD_ADDR_VAR 0 2
26310: PUSH
26311: LD_INT 5
26313: ST_TO_ADDR
26314: GO 26326
// k := tmp ;
26316: LD_ADDR_VAR 0 2
26320: PUSH
26321: LD_VAR 0 3
26325: ST_TO_ADDR
// for i := 1 to k do
26326: LD_ADDR_VAR 0 1
26330: PUSH
26331: DOUBLE
26332: LD_INT 1
26334: DEC
26335: ST_TO_ADDR
26336: LD_VAR 0 2
26340: PUSH
26341: FOR_TO
26342: IFFALSE 26441
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26344: LD_VAR 0 3
26348: PUSH
26349: LD_VAR 0 1
26353: ARRAY
26354: PPUSH
26355: LD_VAR 0 1
26359: PUSH
26360: LD_INT 4
26362: MOD
26363: PUSH
26364: LD_INT 1
26366: PLUS
26367: PPUSH
26368: CALL_OW 259
26372: PUSH
26373: LD_INT 10
26375: LESS
26376: IFFALSE 26439
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26378: LD_VAR 0 3
26382: PUSH
26383: LD_VAR 0 1
26387: ARRAY
26388: PPUSH
26389: LD_VAR 0 1
26393: PUSH
26394: LD_INT 4
26396: MOD
26397: PUSH
26398: LD_INT 1
26400: PLUS
26401: PPUSH
26402: LD_VAR 0 3
26406: PUSH
26407: LD_VAR 0 1
26411: ARRAY
26412: PPUSH
26413: LD_VAR 0 1
26417: PUSH
26418: LD_INT 4
26420: MOD
26421: PUSH
26422: LD_INT 1
26424: PLUS
26425: PPUSH
26426: CALL_OW 259
26430: PUSH
26431: LD_INT 1
26433: PLUS
26434: PPUSH
26435: CALL_OW 237
26439: GO 26341
26441: POP
26442: POP
// end ;
26443: PPOPN 3
26445: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26446: LD_EXP 61
26450: PUSH
26451: LD_EXP 69
26455: AND
26456: IFFALSE 26476
26458: GO 26460
26460: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26461: LD_INT 4
26463: PPUSH
26464: LD_OWVAR 2
26468: PPUSH
26469: LD_INT 0
26471: PPUSH
26472: CALL_OW 324
26476: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26477: LD_EXP 61
26481: PUSH
26482: LD_EXP 98
26486: AND
26487: IFFALSE 26507
26489: GO 26491
26491: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26492: LD_INT 19
26494: PPUSH
26495: LD_OWVAR 2
26499: PPUSH
26500: LD_INT 0
26502: PPUSH
26503: CALL_OW 324
26507: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26508: LD_EXP 61
26512: PUSH
26513: LD_EXP 70
26517: AND
26518: IFFALSE 26620
26520: GO 26522
26522: DISABLE
26523: LD_INT 0
26525: PPUSH
26526: PPUSH
// begin enable ;
26527: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26528: LD_ADDR_VAR 0 2
26532: PUSH
26533: LD_INT 22
26535: PUSH
26536: LD_OWVAR 2
26540: PUSH
26541: EMPTY
26542: LIST
26543: LIST
26544: PUSH
26545: LD_INT 2
26547: PUSH
26548: LD_INT 34
26550: PUSH
26551: LD_INT 11
26553: PUSH
26554: EMPTY
26555: LIST
26556: LIST
26557: PUSH
26558: LD_INT 34
26560: PUSH
26561: LD_INT 30
26563: PUSH
26564: EMPTY
26565: LIST
26566: LIST
26567: PUSH
26568: EMPTY
26569: LIST
26570: LIST
26571: LIST
26572: PUSH
26573: EMPTY
26574: LIST
26575: LIST
26576: PPUSH
26577: CALL_OW 69
26581: ST_TO_ADDR
// if not tmp then
26582: LD_VAR 0 2
26586: NOT
26587: IFFALSE 26591
// exit ;
26589: GO 26620
// for i in tmp do
26591: LD_ADDR_VAR 0 1
26595: PUSH
26596: LD_VAR 0 2
26600: PUSH
26601: FOR_IN
26602: IFFALSE 26618
// begin SetLives ( i , 0 ) ;
26604: LD_VAR 0 1
26608: PPUSH
26609: LD_INT 0
26611: PPUSH
26612: CALL_OW 234
// end ;
26616: GO 26601
26618: POP
26619: POP
// end ;
26620: PPOPN 2
26622: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26623: LD_EXP 61
26627: PUSH
26628: LD_EXP 71
26632: AND
26633: IFFALSE 26653
26635: GO 26637
26637: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26638: LD_INT 32
26640: PPUSH
26641: LD_OWVAR 2
26645: PPUSH
26646: LD_INT 0
26648: PPUSH
26649: CALL_OW 324
26653: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26654: LD_EXP 61
26658: PUSH
26659: LD_EXP 72
26663: AND
26664: IFFALSE 26845
26666: GO 26668
26668: DISABLE
26669: LD_INT 0
26671: PPUSH
26672: PPUSH
26673: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26674: LD_ADDR_VAR 0 2
26678: PUSH
26679: LD_INT 22
26681: PUSH
26682: LD_OWVAR 2
26686: PUSH
26687: EMPTY
26688: LIST
26689: LIST
26690: PUSH
26691: LD_INT 33
26693: PUSH
26694: LD_INT 3
26696: PUSH
26697: EMPTY
26698: LIST
26699: LIST
26700: PUSH
26701: EMPTY
26702: LIST
26703: LIST
26704: PPUSH
26705: CALL_OW 69
26709: ST_TO_ADDR
// if not tmp then
26710: LD_VAR 0 2
26714: NOT
26715: IFFALSE 26719
// exit ;
26717: GO 26845
// side := 0 ;
26719: LD_ADDR_VAR 0 3
26723: PUSH
26724: LD_INT 0
26726: ST_TO_ADDR
// for i := 1 to 8 do
26727: LD_ADDR_VAR 0 1
26731: PUSH
26732: DOUBLE
26733: LD_INT 1
26735: DEC
26736: ST_TO_ADDR
26737: LD_INT 8
26739: PUSH
26740: FOR_TO
26741: IFFALSE 26789
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26743: LD_OWVAR 2
26747: PUSH
26748: LD_VAR 0 1
26752: NONEQUAL
26753: PUSH
26754: LD_OWVAR 2
26758: PPUSH
26759: LD_VAR 0 1
26763: PPUSH
26764: CALL_OW 81
26768: PUSH
26769: LD_INT 2
26771: EQUAL
26772: AND
26773: IFFALSE 26787
// begin side := i ;
26775: LD_ADDR_VAR 0 3
26779: PUSH
26780: LD_VAR 0 1
26784: ST_TO_ADDR
// break ;
26785: GO 26789
// end ;
26787: GO 26740
26789: POP
26790: POP
// if not side then
26791: LD_VAR 0 3
26795: NOT
26796: IFFALSE 26800
// exit ;
26798: GO 26845
// for i := 1 to tmp do
26800: LD_ADDR_VAR 0 1
26804: PUSH
26805: DOUBLE
26806: LD_INT 1
26808: DEC
26809: ST_TO_ADDR
26810: LD_VAR 0 2
26814: PUSH
26815: FOR_TO
26816: IFFALSE 26843
// if Prob ( 60 ) then
26818: LD_INT 60
26820: PPUSH
26821: CALL_OW 13
26825: IFFALSE 26841
// SetSide ( i , side ) ;
26827: LD_VAR 0 1
26831: PPUSH
26832: LD_VAR 0 3
26836: PPUSH
26837: CALL_OW 235
26841: GO 26815
26843: POP
26844: POP
// end ;
26845: PPOPN 3
26847: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26848: LD_EXP 61
26852: PUSH
26853: LD_EXP 74
26857: AND
26858: IFFALSE 26977
26860: GO 26862
26862: DISABLE
26863: LD_INT 0
26865: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26866: LD_ADDR_VAR 0 1
26870: PUSH
26871: LD_INT 22
26873: PUSH
26874: LD_OWVAR 2
26878: PUSH
26879: EMPTY
26880: LIST
26881: LIST
26882: PUSH
26883: LD_INT 21
26885: PUSH
26886: LD_INT 1
26888: PUSH
26889: EMPTY
26890: LIST
26891: LIST
26892: PUSH
26893: LD_INT 3
26895: PUSH
26896: LD_INT 23
26898: PUSH
26899: LD_INT 0
26901: PUSH
26902: EMPTY
26903: LIST
26904: LIST
26905: PUSH
26906: EMPTY
26907: LIST
26908: LIST
26909: PUSH
26910: EMPTY
26911: LIST
26912: LIST
26913: LIST
26914: PPUSH
26915: CALL_OW 69
26919: PUSH
26920: FOR_IN
26921: IFFALSE 26975
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26923: LD_VAR 0 1
26927: PPUSH
26928: CALL_OW 257
26932: PUSH
26933: LD_INT 1
26935: PUSH
26936: LD_INT 2
26938: PUSH
26939: LD_INT 3
26941: PUSH
26942: LD_INT 4
26944: PUSH
26945: EMPTY
26946: LIST
26947: LIST
26948: LIST
26949: LIST
26950: IN
26951: IFFALSE 26973
// SetClass ( un , rand ( 1 , 4 ) ) ;
26953: LD_VAR 0 1
26957: PPUSH
26958: LD_INT 1
26960: PPUSH
26961: LD_INT 4
26963: PPUSH
26964: CALL_OW 12
26968: PPUSH
26969: CALL_OW 336
26973: GO 26920
26975: POP
26976: POP
// end ;
26977: PPOPN 1
26979: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26980: LD_EXP 61
26984: PUSH
26985: LD_EXP 73
26989: AND
26990: IFFALSE 27069
26992: GO 26994
26994: DISABLE
26995: LD_INT 0
26997: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26998: LD_ADDR_VAR 0 1
27002: PUSH
27003: LD_INT 22
27005: PUSH
27006: LD_OWVAR 2
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: PUSH
27015: LD_INT 21
27017: PUSH
27018: LD_INT 3
27020: PUSH
27021: EMPTY
27022: LIST
27023: LIST
27024: PUSH
27025: EMPTY
27026: LIST
27027: LIST
27028: PPUSH
27029: CALL_OW 69
27033: ST_TO_ADDR
// if not tmp then
27034: LD_VAR 0 1
27038: NOT
27039: IFFALSE 27043
// exit ;
27041: GO 27069
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
27043: LD_VAR 0 1
27047: PUSH
27048: LD_INT 1
27050: PPUSH
27051: LD_VAR 0 1
27055: PPUSH
27056: CALL_OW 12
27060: ARRAY
27061: PPUSH
27062: LD_INT 100
27064: PPUSH
27065: CALL_OW 234
// end ;
27069: PPOPN 1
27071: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27072: LD_EXP 61
27076: PUSH
27077: LD_EXP 75
27081: AND
27082: IFFALSE 27180
27084: GO 27086
27086: DISABLE
27087: LD_INT 0
27089: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27090: LD_ADDR_VAR 0 1
27094: PUSH
27095: LD_INT 22
27097: PUSH
27098: LD_OWVAR 2
27102: PUSH
27103: EMPTY
27104: LIST
27105: LIST
27106: PUSH
27107: LD_INT 21
27109: PUSH
27110: LD_INT 1
27112: PUSH
27113: EMPTY
27114: LIST
27115: LIST
27116: PUSH
27117: EMPTY
27118: LIST
27119: LIST
27120: PPUSH
27121: CALL_OW 69
27125: ST_TO_ADDR
// if not tmp then
27126: LD_VAR 0 1
27130: NOT
27131: IFFALSE 27135
// exit ;
27133: GO 27180
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27135: LD_VAR 0 1
27139: PUSH
27140: LD_INT 1
27142: PPUSH
27143: LD_VAR 0 1
27147: PPUSH
27148: CALL_OW 12
27152: ARRAY
27153: PPUSH
27154: LD_INT 1
27156: PPUSH
27157: LD_INT 4
27159: PPUSH
27160: CALL_OW 12
27164: PPUSH
27165: LD_INT 3000
27167: PPUSH
27168: LD_INT 9000
27170: PPUSH
27171: CALL_OW 12
27175: PPUSH
27176: CALL_OW 492
// end ;
27180: PPOPN 1
27182: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27183: LD_EXP 61
27187: PUSH
27188: LD_EXP 76
27192: AND
27193: IFFALSE 27213
27195: GO 27197
27197: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27198: LD_INT 1
27200: PPUSH
27201: LD_OWVAR 2
27205: PPUSH
27206: LD_INT 0
27208: PPUSH
27209: CALL_OW 324
27213: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27214: LD_EXP 61
27218: PUSH
27219: LD_EXP 77
27223: AND
27224: IFFALSE 27307
27226: GO 27228
27228: DISABLE
27229: LD_INT 0
27231: PPUSH
27232: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27233: LD_ADDR_VAR 0 2
27237: PUSH
27238: LD_INT 22
27240: PUSH
27241: LD_OWVAR 2
27245: PUSH
27246: EMPTY
27247: LIST
27248: LIST
27249: PUSH
27250: LD_INT 21
27252: PUSH
27253: LD_INT 3
27255: PUSH
27256: EMPTY
27257: LIST
27258: LIST
27259: PUSH
27260: EMPTY
27261: LIST
27262: LIST
27263: PPUSH
27264: CALL_OW 69
27268: ST_TO_ADDR
// if not tmp then
27269: LD_VAR 0 2
27273: NOT
27274: IFFALSE 27278
// exit ;
27276: GO 27307
// for i in tmp do
27278: LD_ADDR_VAR 0 1
27282: PUSH
27283: LD_VAR 0 2
27287: PUSH
27288: FOR_IN
27289: IFFALSE 27305
// SetBLevel ( i , 10 ) ;
27291: LD_VAR 0 1
27295: PPUSH
27296: LD_INT 10
27298: PPUSH
27299: CALL_OW 241
27303: GO 27288
27305: POP
27306: POP
// end ;
27307: PPOPN 2
27309: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27310: LD_EXP 61
27314: PUSH
27315: LD_EXP 78
27319: AND
27320: IFFALSE 27431
27322: GO 27324
27324: DISABLE
27325: LD_INT 0
27327: PPUSH
27328: PPUSH
27329: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27330: LD_ADDR_VAR 0 3
27334: PUSH
27335: LD_INT 22
27337: PUSH
27338: LD_OWVAR 2
27342: PUSH
27343: EMPTY
27344: LIST
27345: LIST
27346: PUSH
27347: LD_INT 25
27349: PUSH
27350: LD_INT 1
27352: PUSH
27353: EMPTY
27354: LIST
27355: LIST
27356: PUSH
27357: EMPTY
27358: LIST
27359: LIST
27360: PPUSH
27361: CALL_OW 69
27365: ST_TO_ADDR
// if not tmp then
27366: LD_VAR 0 3
27370: NOT
27371: IFFALSE 27375
// exit ;
27373: GO 27431
// un := tmp [ rand ( 1 , tmp ) ] ;
27375: LD_ADDR_VAR 0 2
27379: PUSH
27380: LD_VAR 0 3
27384: PUSH
27385: LD_INT 1
27387: PPUSH
27388: LD_VAR 0 3
27392: PPUSH
27393: CALL_OW 12
27397: ARRAY
27398: ST_TO_ADDR
// if Crawls ( un ) then
27399: LD_VAR 0 2
27403: PPUSH
27404: CALL_OW 318
27408: IFFALSE 27419
// ComWalk ( un ) ;
27410: LD_VAR 0 2
27414: PPUSH
27415: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27419: LD_VAR 0 2
27423: PPUSH
27424: LD_INT 5
27426: PPUSH
27427: CALL_OW 336
// end ;
27431: PPOPN 3
27433: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27434: LD_EXP 61
27438: PUSH
27439: LD_EXP 79
27443: AND
27444: PUSH
27445: LD_OWVAR 67
27449: PUSH
27450: LD_INT 4
27452: LESS
27453: AND
27454: IFFALSE 27473
27456: GO 27458
27458: DISABLE
// begin Difficulty := Difficulty + 1 ;
27459: LD_ADDR_OWVAR 67
27463: PUSH
27464: LD_OWVAR 67
27468: PUSH
27469: LD_INT 1
27471: PLUS
27472: ST_TO_ADDR
// end ;
27473: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27474: LD_EXP 61
27478: PUSH
27479: LD_EXP 80
27483: AND
27484: IFFALSE 27587
27486: GO 27488
27488: DISABLE
27489: LD_INT 0
27491: PPUSH
// begin for i := 1 to 5 do
27492: LD_ADDR_VAR 0 1
27496: PUSH
27497: DOUBLE
27498: LD_INT 1
27500: DEC
27501: ST_TO_ADDR
27502: LD_INT 5
27504: PUSH
27505: FOR_TO
27506: IFFALSE 27585
// begin uc_nation := nation_nature ;
27508: LD_ADDR_OWVAR 21
27512: PUSH
27513: LD_INT 0
27515: ST_TO_ADDR
// uc_side := 0 ;
27516: LD_ADDR_OWVAR 20
27520: PUSH
27521: LD_INT 0
27523: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27524: LD_ADDR_OWVAR 29
27528: PUSH
27529: LD_INT 12
27531: PUSH
27532: LD_INT 12
27534: PUSH
27535: EMPTY
27536: LIST
27537: LIST
27538: ST_TO_ADDR
// hc_agressivity := 20 ;
27539: LD_ADDR_OWVAR 35
27543: PUSH
27544: LD_INT 20
27546: ST_TO_ADDR
// hc_class := class_tiger ;
27547: LD_ADDR_OWVAR 28
27551: PUSH
27552: LD_INT 14
27554: ST_TO_ADDR
// hc_gallery :=  ;
27555: LD_ADDR_OWVAR 33
27559: PUSH
27560: LD_STRING 
27562: ST_TO_ADDR
// hc_name :=  ;
27563: LD_ADDR_OWVAR 26
27567: PUSH
27568: LD_STRING 
27570: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27571: CALL_OW 44
27575: PPUSH
27576: LD_INT 0
27578: PPUSH
27579: CALL_OW 51
// end ;
27583: GO 27505
27585: POP
27586: POP
// end ;
27587: PPOPN 1
27589: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27590: LD_EXP 61
27594: PUSH
27595: LD_EXP 81
27599: AND
27600: IFFALSE 27609
27602: GO 27604
27604: DISABLE
// StreamSibBomb ;
27605: CALL 27610 0 0
27609: END
// export function StreamSibBomb ; var i , x , y ; begin
27610: LD_INT 0
27612: PPUSH
27613: PPUSH
27614: PPUSH
27615: PPUSH
// result := false ;
27616: LD_ADDR_VAR 0 1
27620: PUSH
27621: LD_INT 0
27623: ST_TO_ADDR
// for i := 1 to 16 do
27624: LD_ADDR_VAR 0 2
27628: PUSH
27629: DOUBLE
27630: LD_INT 1
27632: DEC
27633: ST_TO_ADDR
27634: LD_INT 16
27636: PUSH
27637: FOR_TO
27638: IFFALSE 27837
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27640: LD_ADDR_VAR 0 3
27644: PUSH
27645: LD_INT 10
27647: PUSH
27648: LD_INT 20
27650: PUSH
27651: LD_INT 30
27653: PUSH
27654: LD_INT 40
27656: PUSH
27657: LD_INT 50
27659: PUSH
27660: LD_INT 60
27662: PUSH
27663: LD_INT 70
27665: PUSH
27666: LD_INT 80
27668: PUSH
27669: LD_INT 90
27671: PUSH
27672: LD_INT 100
27674: PUSH
27675: LD_INT 110
27677: PUSH
27678: LD_INT 120
27680: PUSH
27681: LD_INT 130
27683: PUSH
27684: LD_INT 140
27686: PUSH
27687: LD_INT 150
27689: PUSH
27690: EMPTY
27691: LIST
27692: LIST
27693: LIST
27694: LIST
27695: LIST
27696: LIST
27697: LIST
27698: LIST
27699: LIST
27700: LIST
27701: LIST
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: PUSH
27707: LD_INT 1
27709: PPUSH
27710: LD_INT 15
27712: PPUSH
27713: CALL_OW 12
27717: ARRAY
27718: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27719: LD_ADDR_VAR 0 4
27723: PUSH
27724: LD_INT 10
27726: PUSH
27727: LD_INT 20
27729: PUSH
27730: LD_INT 30
27732: PUSH
27733: LD_INT 40
27735: PUSH
27736: LD_INT 50
27738: PUSH
27739: LD_INT 60
27741: PUSH
27742: LD_INT 70
27744: PUSH
27745: LD_INT 80
27747: PUSH
27748: LD_INT 90
27750: PUSH
27751: LD_INT 100
27753: PUSH
27754: LD_INT 110
27756: PUSH
27757: LD_INT 120
27759: PUSH
27760: LD_INT 130
27762: PUSH
27763: LD_INT 140
27765: PUSH
27766: LD_INT 150
27768: PUSH
27769: EMPTY
27770: LIST
27771: LIST
27772: LIST
27773: LIST
27774: LIST
27775: LIST
27776: LIST
27777: LIST
27778: LIST
27779: LIST
27780: LIST
27781: LIST
27782: LIST
27783: LIST
27784: LIST
27785: PUSH
27786: LD_INT 1
27788: PPUSH
27789: LD_INT 15
27791: PPUSH
27792: CALL_OW 12
27796: ARRAY
27797: ST_TO_ADDR
// if ValidHex ( x , y ) then
27798: LD_VAR 0 3
27802: PPUSH
27803: LD_VAR 0 4
27807: PPUSH
27808: CALL_OW 488
27812: IFFALSE 27835
// begin result := [ x , y ] ;
27814: LD_ADDR_VAR 0 1
27818: PUSH
27819: LD_VAR 0 3
27823: PUSH
27824: LD_VAR 0 4
27828: PUSH
27829: EMPTY
27830: LIST
27831: LIST
27832: ST_TO_ADDR
// break ;
27833: GO 27837
// end ; end ;
27835: GO 27637
27837: POP
27838: POP
// if result then
27839: LD_VAR 0 1
27843: IFFALSE 27903
// begin ToLua ( playSibBomb() ) ;
27845: LD_STRING playSibBomb()
27847: PPUSH
27848: CALL_OW 559
// wait ( 0 0$14 ) ;
27852: LD_INT 490
27854: PPUSH
27855: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27859: LD_VAR 0 1
27863: PUSH
27864: LD_INT 1
27866: ARRAY
27867: PPUSH
27868: LD_VAR 0 1
27872: PUSH
27873: LD_INT 2
27875: ARRAY
27876: PPUSH
27877: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27881: LD_VAR 0 1
27885: PUSH
27886: LD_INT 1
27888: ARRAY
27889: PPUSH
27890: LD_VAR 0 1
27894: PUSH
27895: LD_INT 2
27897: ARRAY
27898: PPUSH
27899: CALL_OW 429
// end ; end ;
27903: LD_VAR 0 1
27907: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27908: LD_EXP 61
27912: PUSH
27913: LD_EXP 83
27917: AND
27918: IFFALSE 27930
27920: GO 27922
27922: DISABLE
// YouLost (  ) ;
27923: LD_STRING 
27925: PPUSH
27926: CALL_OW 104
27930: END
// every 0 0$1 trigger StreamModeActive and sFog do
27931: LD_EXP 61
27935: PUSH
27936: LD_EXP 82
27940: AND
27941: IFFALSE 27955
27943: GO 27945
27945: DISABLE
// FogOff ( your_side ) ;
27946: LD_OWVAR 2
27950: PPUSH
27951: CALL_OW 344
27955: END
// every 0 0$1 trigger StreamModeActive and sSun do
27956: LD_EXP 61
27960: PUSH
27961: LD_EXP 84
27965: AND
27966: IFFALSE 27994
27968: GO 27970
27970: DISABLE
// begin solar_recharge_percent := 0 ;
27971: LD_ADDR_OWVAR 79
27975: PUSH
27976: LD_INT 0
27978: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27979: LD_INT 10500
27981: PPUSH
27982: CALL_OW 67
// solar_recharge_percent := 100 ;
27986: LD_ADDR_OWVAR 79
27990: PUSH
27991: LD_INT 100
27993: ST_TO_ADDR
// end ;
27994: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27995: LD_EXP 61
27999: PUSH
28000: LD_EXP 85
28004: AND
28005: IFFALSE 28244
28007: GO 28009
28009: DISABLE
28010: LD_INT 0
28012: PPUSH
28013: PPUSH
28014: PPUSH
// begin tmp := [ ] ;
28015: LD_ADDR_VAR 0 3
28019: PUSH
28020: EMPTY
28021: ST_TO_ADDR
// for i := 1 to 6 do
28022: LD_ADDR_VAR 0 1
28026: PUSH
28027: DOUBLE
28028: LD_INT 1
28030: DEC
28031: ST_TO_ADDR
28032: LD_INT 6
28034: PUSH
28035: FOR_TO
28036: IFFALSE 28141
// begin uc_nation := nation_nature ;
28038: LD_ADDR_OWVAR 21
28042: PUSH
28043: LD_INT 0
28045: ST_TO_ADDR
// uc_side := 0 ;
28046: LD_ADDR_OWVAR 20
28050: PUSH
28051: LD_INT 0
28053: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28054: LD_ADDR_OWVAR 29
28058: PUSH
28059: LD_INT 12
28061: PUSH
28062: LD_INT 12
28064: PUSH
28065: EMPTY
28066: LIST
28067: LIST
28068: ST_TO_ADDR
// hc_agressivity := 20 ;
28069: LD_ADDR_OWVAR 35
28073: PUSH
28074: LD_INT 20
28076: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28077: LD_ADDR_OWVAR 28
28081: PUSH
28082: LD_INT 17
28084: ST_TO_ADDR
// hc_gallery :=  ;
28085: LD_ADDR_OWVAR 33
28089: PUSH
28090: LD_STRING 
28092: ST_TO_ADDR
// hc_name :=  ;
28093: LD_ADDR_OWVAR 26
28097: PUSH
28098: LD_STRING 
28100: ST_TO_ADDR
// un := CreateHuman ;
28101: LD_ADDR_VAR 0 2
28105: PUSH
28106: CALL_OW 44
28110: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28111: LD_VAR 0 2
28115: PPUSH
28116: LD_INT 1
28118: PPUSH
28119: CALL_OW 51
// tmp := tmp ^ un ;
28123: LD_ADDR_VAR 0 3
28127: PUSH
28128: LD_VAR 0 3
28132: PUSH
28133: LD_VAR 0 2
28137: ADD
28138: ST_TO_ADDR
// end ;
28139: GO 28035
28141: POP
28142: POP
// repeat wait ( 0 0$1 ) ;
28143: LD_INT 35
28145: PPUSH
28146: CALL_OW 67
// for un in tmp do
28150: LD_ADDR_VAR 0 2
28154: PUSH
28155: LD_VAR 0 3
28159: PUSH
28160: FOR_IN
28161: IFFALSE 28235
// begin if IsDead ( un ) then
28163: LD_VAR 0 2
28167: PPUSH
28168: CALL_OW 301
28172: IFFALSE 28192
// begin tmp := tmp diff un ;
28174: LD_ADDR_VAR 0 3
28178: PUSH
28179: LD_VAR 0 3
28183: PUSH
28184: LD_VAR 0 2
28188: DIFF
28189: ST_TO_ADDR
// continue ;
28190: GO 28160
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28192: LD_VAR 0 2
28196: PPUSH
28197: LD_INT 3
28199: PUSH
28200: LD_INT 22
28202: PUSH
28203: LD_INT 0
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: PUSH
28210: EMPTY
28211: LIST
28212: LIST
28213: PPUSH
28214: CALL_OW 69
28218: PPUSH
28219: LD_VAR 0 2
28223: PPUSH
28224: CALL_OW 74
28228: PPUSH
28229: CALL_OW 115
// end ;
28233: GO 28160
28235: POP
28236: POP
// until not tmp ;
28237: LD_VAR 0 3
28241: NOT
28242: IFFALSE 28143
// end ;
28244: PPOPN 3
28246: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28247: LD_EXP 61
28251: PUSH
28252: LD_EXP 86
28256: AND
28257: IFFALSE 28311
28259: GO 28261
28261: DISABLE
// begin ToLua ( displayTroll(); ) ;
28262: LD_STRING displayTroll();
28264: PPUSH
28265: CALL_OW 559
// wait ( 3 3$00 ) ;
28269: LD_INT 6300
28271: PPUSH
28272: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28276: LD_STRING hideTroll();
28278: PPUSH
28279: CALL_OW 559
// wait ( 1 1$00 ) ;
28283: LD_INT 2100
28285: PPUSH
28286: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28290: LD_STRING displayTroll();
28292: PPUSH
28293: CALL_OW 559
// wait ( 1 1$00 ) ;
28297: LD_INT 2100
28299: PPUSH
28300: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28304: LD_STRING hideTroll();
28306: PPUSH
28307: CALL_OW 559
// end ;
28311: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28312: LD_EXP 61
28316: PUSH
28317: LD_EXP 87
28321: AND
28322: IFFALSE 28385
28324: GO 28326
28326: DISABLE
28327: LD_INT 0
28329: PPUSH
// begin p := 0 ;
28330: LD_ADDR_VAR 0 1
28334: PUSH
28335: LD_INT 0
28337: ST_TO_ADDR
// repeat game_speed := 1 ;
28338: LD_ADDR_OWVAR 65
28342: PUSH
28343: LD_INT 1
28345: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28346: LD_INT 35
28348: PPUSH
28349: CALL_OW 67
// p := p + 1 ;
28353: LD_ADDR_VAR 0 1
28357: PUSH
28358: LD_VAR 0 1
28362: PUSH
28363: LD_INT 1
28365: PLUS
28366: ST_TO_ADDR
// until p >= 60 ;
28367: LD_VAR 0 1
28371: PUSH
28372: LD_INT 60
28374: GREATEREQUAL
28375: IFFALSE 28338
// game_speed := 4 ;
28377: LD_ADDR_OWVAR 65
28381: PUSH
28382: LD_INT 4
28384: ST_TO_ADDR
// end ;
28385: PPOPN 1
28387: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28388: LD_EXP 61
28392: PUSH
28393: LD_EXP 88
28397: AND
28398: IFFALSE 28544
28400: GO 28402
28402: DISABLE
28403: LD_INT 0
28405: PPUSH
28406: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28407: LD_ADDR_VAR 0 1
28411: PUSH
28412: LD_INT 22
28414: PUSH
28415: LD_OWVAR 2
28419: PUSH
28420: EMPTY
28421: LIST
28422: LIST
28423: PUSH
28424: LD_INT 2
28426: PUSH
28427: LD_INT 30
28429: PUSH
28430: LD_INT 0
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: PUSH
28437: LD_INT 30
28439: PUSH
28440: LD_INT 1
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: LIST
28451: PUSH
28452: EMPTY
28453: LIST
28454: LIST
28455: PPUSH
28456: CALL_OW 69
28460: ST_TO_ADDR
// if not depot then
28461: LD_VAR 0 1
28465: NOT
28466: IFFALSE 28470
// exit ;
28468: GO 28544
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28470: LD_ADDR_VAR 0 2
28474: PUSH
28475: LD_VAR 0 1
28479: PUSH
28480: LD_INT 1
28482: PPUSH
28483: LD_VAR 0 1
28487: PPUSH
28488: CALL_OW 12
28492: ARRAY
28493: PPUSH
28494: CALL_OW 274
28498: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28499: LD_VAR 0 2
28503: PPUSH
28504: LD_INT 1
28506: PPUSH
28507: LD_INT 0
28509: PPUSH
28510: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28514: LD_VAR 0 2
28518: PPUSH
28519: LD_INT 2
28521: PPUSH
28522: LD_INT 0
28524: PPUSH
28525: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28529: LD_VAR 0 2
28533: PPUSH
28534: LD_INT 3
28536: PPUSH
28537: LD_INT 0
28539: PPUSH
28540: CALL_OW 277
// end ;
28544: PPOPN 2
28546: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28547: LD_EXP 61
28551: PUSH
28552: LD_EXP 89
28556: AND
28557: IFFALSE 28654
28559: GO 28561
28561: DISABLE
28562: LD_INT 0
28564: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28565: LD_ADDR_VAR 0 1
28569: PUSH
28570: LD_INT 22
28572: PUSH
28573: LD_OWVAR 2
28577: PUSH
28578: EMPTY
28579: LIST
28580: LIST
28581: PUSH
28582: LD_INT 21
28584: PUSH
28585: LD_INT 1
28587: PUSH
28588: EMPTY
28589: LIST
28590: LIST
28591: PUSH
28592: LD_INT 3
28594: PUSH
28595: LD_INT 23
28597: PUSH
28598: LD_INT 0
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: PUSH
28609: EMPTY
28610: LIST
28611: LIST
28612: LIST
28613: PPUSH
28614: CALL_OW 69
28618: ST_TO_ADDR
// if not tmp then
28619: LD_VAR 0 1
28623: NOT
28624: IFFALSE 28628
// exit ;
28626: GO 28654
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28628: LD_VAR 0 1
28632: PUSH
28633: LD_INT 1
28635: PPUSH
28636: LD_VAR 0 1
28640: PPUSH
28641: CALL_OW 12
28645: ARRAY
28646: PPUSH
28647: LD_INT 200
28649: PPUSH
28650: CALL_OW 234
// end ;
28654: PPOPN 1
28656: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28657: LD_EXP 61
28661: PUSH
28662: LD_EXP 90
28666: AND
28667: IFFALSE 28746
28669: GO 28671
28671: DISABLE
28672: LD_INT 0
28674: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28675: LD_ADDR_VAR 0 1
28679: PUSH
28680: LD_INT 22
28682: PUSH
28683: LD_OWVAR 2
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: PUSH
28692: LD_INT 21
28694: PUSH
28695: LD_INT 2
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: PUSH
28702: EMPTY
28703: LIST
28704: LIST
28705: PPUSH
28706: CALL_OW 69
28710: ST_TO_ADDR
// if not tmp then
28711: LD_VAR 0 1
28715: NOT
28716: IFFALSE 28720
// exit ;
28718: GO 28746
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28720: LD_VAR 0 1
28724: PUSH
28725: LD_INT 1
28727: PPUSH
28728: LD_VAR 0 1
28732: PPUSH
28733: CALL_OW 12
28737: ARRAY
28738: PPUSH
28739: LD_INT 60
28741: PPUSH
28742: CALL_OW 234
// end ;
28746: PPOPN 1
28748: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28749: LD_EXP 61
28753: PUSH
28754: LD_EXP 91
28758: AND
28759: IFFALSE 28858
28761: GO 28763
28763: DISABLE
28764: LD_INT 0
28766: PPUSH
28767: PPUSH
// begin enable ;
28768: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28769: LD_ADDR_VAR 0 1
28773: PUSH
28774: LD_INT 22
28776: PUSH
28777: LD_OWVAR 2
28781: PUSH
28782: EMPTY
28783: LIST
28784: LIST
28785: PUSH
28786: LD_INT 61
28788: PUSH
28789: EMPTY
28790: LIST
28791: PUSH
28792: LD_INT 33
28794: PUSH
28795: LD_INT 2
28797: PUSH
28798: EMPTY
28799: LIST
28800: LIST
28801: PUSH
28802: EMPTY
28803: LIST
28804: LIST
28805: LIST
28806: PPUSH
28807: CALL_OW 69
28811: ST_TO_ADDR
// if not tmp then
28812: LD_VAR 0 1
28816: NOT
28817: IFFALSE 28821
// exit ;
28819: GO 28858
// for i in tmp do
28821: LD_ADDR_VAR 0 2
28825: PUSH
28826: LD_VAR 0 1
28830: PUSH
28831: FOR_IN
28832: IFFALSE 28856
// if IsControledBy ( i ) then
28834: LD_VAR 0 2
28838: PPUSH
28839: CALL_OW 312
28843: IFFALSE 28854
// ComUnlink ( i ) ;
28845: LD_VAR 0 2
28849: PPUSH
28850: CALL_OW 136
28854: GO 28831
28856: POP
28857: POP
// end ;
28858: PPOPN 2
28860: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28861: LD_EXP 61
28865: PUSH
28866: LD_EXP 92
28870: AND
28871: IFFALSE 29011
28873: GO 28875
28875: DISABLE
28876: LD_INT 0
28878: PPUSH
28879: PPUSH
// begin ToLua ( displayPowell(); ) ;
28880: LD_STRING displayPowell();
28882: PPUSH
28883: CALL_OW 559
// uc_side := 0 ;
28887: LD_ADDR_OWVAR 20
28891: PUSH
28892: LD_INT 0
28894: ST_TO_ADDR
// uc_nation := 2 ;
28895: LD_ADDR_OWVAR 21
28899: PUSH
28900: LD_INT 2
28902: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28903: LD_ADDR_OWVAR 37
28907: PUSH
28908: LD_INT 14
28910: ST_TO_ADDR
// vc_engine := engine_siberite ;
28911: LD_ADDR_OWVAR 39
28915: PUSH
28916: LD_INT 3
28918: ST_TO_ADDR
// vc_control := control_apeman ;
28919: LD_ADDR_OWVAR 38
28923: PUSH
28924: LD_INT 5
28926: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28927: LD_ADDR_OWVAR 40
28931: PUSH
28932: LD_INT 29
28934: ST_TO_ADDR
// un := CreateVehicle ;
28935: LD_ADDR_VAR 0 2
28939: PUSH
28940: CALL_OW 45
28944: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28945: LD_VAR 0 2
28949: PPUSH
28950: LD_INT 1
28952: PPUSH
28953: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28957: LD_INT 35
28959: PPUSH
28960: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28964: LD_VAR 0 2
28968: PPUSH
28969: LD_INT 22
28971: PUSH
28972: LD_OWVAR 2
28976: PUSH
28977: EMPTY
28978: LIST
28979: LIST
28980: PPUSH
28981: CALL_OW 69
28985: PPUSH
28986: LD_VAR 0 2
28990: PPUSH
28991: CALL_OW 74
28995: PPUSH
28996: CALL_OW 115
// until IsDead ( un ) ;
29000: LD_VAR 0 2
29004: PPUSH
29005: CALL_OW 301
29009: IFFALSE 28957
// end ;
29011: PPOPN 2
29013: END
// every 0 0$1 trigger StreamModeActive and sStu do
29014: LD_EXP 61
29018: PUSH
29019: LD_EXP 100
29023: AND
29024: IFFALSE 29040
29026: GO 29028
29028: DISABLE
// begin ToLua ( displayStucuk(); ) ;
29029: LD_STRING displayStucuk();
29031: PPUSH
29032: CALL_OW 559
// ResetFog ;
29036: CALL_OW 335
// end ;
29040: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29041: LD_EXP 61
29045: PUSH
29046: LD_EXP 93
29050: AND
29051: IFFALSE 29192
29053: GO 29055
29055: DISABLE
29056: LD_INT 0
29058: PPUSH
29059: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29060: LD_ADDR_VAR 0 2
29064: PUSH
29065: LD_INT 22
29067: PUSH
29068: LD_OWVAR 2
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: PUSH
29077: LD_INT 21
29079: PUSH
29080: LD_INT 1
29082: PUSH
29083: EMPTY
29084: LIST
29085: LIST
29086: PUSH
29087: EMPTY
29088: LIST
29089: LIST
29090: PPUSH
29091: CALL_OW 69
29095: ST_TO_ADDR
// if not tmp then
29096: LD_VAR 0 2
29100: NOT
29101: IFFALSE 29105
// exit ;
29103: GO 29192
// un := tmp [ rand ( 1 , tmp ) ] ;
29105: LD_ADDR_VAR 0 1
29109: PUSH
29110: LD_VAR 0 2
29114: PUSH
29115: LD_INT 1
29117: PPUSH
29118: LD_VAR 0 2
29122: PPUSH
29123: CALL_OW 12
29127: ARRAY
29128: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29129: LD_VAR 0 1
29133: PPUSH
29134: LD_INT 0
29136: PPUSH
29137: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29141: LD_VAR 0 1
29145: PPUSH
29146: LD_OWVAR 3
29150: PUSH
29151: LD_VAR 0 1
29155: DIFF
29156: PPUSH
29157: LD_VAR 0 1
29161: PPUSH
29162: CALL_OW 74
29166: PPUSH
29167: CALL_OW 115
// wait ( 0 0$20 ) ;
29171: LD_INT 700
29173: PPUSH
29174: CALL_OW 67
// SetSide ( un , your_side ) ;
29178: LD_VAR 0 1
29182: PPUSH
29183: LD_OWVAR 2
29187: PPUSH
29188: CALL_OW 235
// end ;
29192: PPOPN 2
29194: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29195: LD_EXP 61
29199: PUSH
29200: LD_EXP 94
29204: AND
29205: IFFALSE 29311
29207: GO 29209
29209: DISABLE
29210: LD_INT 0
29212: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29213: LD_ADDR_VAR 0 1
29217: PUSH
29218: LD_INT 22
29220: PUSH
29221: LD_OWVAR 2
29225: PUSH
29226: EMPTY
29227: LIST
29228: LIST
29229: PUSH
29230: LD_INT 2
29232: PUSH
29233: LD_INT 30
29235: PUSH
29236: LD_INT 0
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: PUSH
29243: LD_INT 30
29245: PUSH
29246: LD_INT 1
29248: PUSH
29249: EMPTY
29250: LIST
29251: LIST
29252: PUSH
29253: EMPTY
29254: LIST
29255: LIST
29256: LIST
29257: PUSH
29258: EMPTY
29259: LIST
29260: LIST
29261: PPUSH
29262: CALL_OW 69
29266: ST_TO_ADDR
// if not depot then
29267: LD_VAR 0 1
29271: NOT
29272: IFFALSE 29276
// exit ;
29274: GO 29311
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29276: LD_VAR 0 1
29280: PUSH
29281: LD_INT 1
29283: ARRAY
29284: PPUSH
29285: CALL_OW 250
29289: PPUSH
29290: LD_VAR 0 1
29294: PUSH
29295: LD_INT 1
29297: ARRAY
29298: PPUSH
29299: CALL_OW 251
29303: PPUSH
29304: LD_INT 70
29306: PPUSH
29307: CALL_OW 495
// end ;
29311: PPOPN 1
29313: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29314: LD_EXP 61
29318: PUSH
29319: LD_EXP 95
29323: AND
29324: IFFALSE 29535
29326: GO 29328
29328: DISABLE
29329: LD_INT 0
29331: PPUSH
29332: PPUSH
29333: PPUSH
29334: PPUSH
29335: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29336: LD_ADDR_VAR 0 5
29340: PUSH
29341: LD_INT 22
29343: PUSH
29344: LD_OWVAR 2
29348: PUSH
29349: EMPTY
29350: LIST
29351: LIST
29352: PUSH
29353: LD_INT 21
29355: PUSH
29356: LD_INT 1
29358: PUSH
29359: EMPTY
29360: LIST
29361: LIST
29362: PUSH
29363: EMPTY
29364: LIST
29365: LIST
29366: PPUSH
29367: CALL_OW 69
29371: ST_TO_ADDR
// if not tmp then
29372: LD_VAR 0 5
29376: NOT
29377: IFFALSE 29381
// exit ;
29379: GO 29535
// for i in tmp do
29381: LD_ADDR_VAR 0 1
29385: PUSH
29386: LD_VAR 0 5
29390: PUSH
29391: FOR_IN
29392: IFFALSE 29533
// begin d := rand ( 0 , 5 ) ;
29394: LD_ADDR_VAR 0 4
29398: PUSH
29399: LD_INT 0
29401: PPUSH
29402: LD_INT 5
29404: PPUSH
29405: CALL_OW 12
29409: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29410: LD_ADDR_VAR 0 2
29414: PUSH
29415: LD_VAR 0 1
29419: PPUSH
29420: CALL_OW 250
29424: PPUSH
29425: LD_VAR 0 4
29429: PPUSH
29430: LD_INT 3
29432: PPUSH
29433: LD_INT 12
29435: PPUSH
29436: CALL_OW 12
29440: PPUSH
29441: CALL_OW 272
29445: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29446: LD_ADDR_VAR 0 3
29450: PUSH
29451: LD_VAR 0 1
29455: PPUSH
29456: CALL_OW 251
29460: PPUSH
29461: LD_VAR 0 4
29465: PPUSH
29466: LD_INT 3
29468: PPUSH
29469: LD_INT 12
29471: PPUSH
29472: CALL_OW 12
29476: PPUSH
29477: CALL_OW 273
29481: ST_TO_ADDR
// if ValidHex ( x , y ) then
29482: LD_VAR 0 2
29486: PPUSH
29487: LD_VAR 0 3
29491: PPUSH
29492: CALL_OW 488
29496: IFFALSE 29531
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29498: LD_VAR 0 1
29502: PPUSH
29503: LD_VAR 0 2
29507: PPUSH
29508: LD_VAR 0 3
29512: PPUSH
29513: LD_INT 3
29515: PPUSH
29516: LD_INT 6
29518: PPUSH
29519: CALL_OW 12
29523: PPUSH
29524: LD_INT 1
29526: PPUSH
29527: CALL_OW 483
// end ;
29531: GO 29391
29533: POP
29534: POP
// end ;
29535: PPOPN 5
29537: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29538: LD_EXP 61
29542: PUSH
29543: LD_EXP 96
29547: AND
29548: IFFALSE 29642
29550: GO 29552
29552: DISABLE
29553: LD_INT 0
29555: PPUSH
29556: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29557: LD_ADDR_VAR 0 2
29561: PUSH
29562: LD_INT 22
29564: PUSH
29565: LD_OWVAR 2
29569: PUSH
29570: EMPTY
29571: LIST
29572: LIST
29573: PUSH
29574: LD_INT 32
29576: PUSH
29577: LD_INT 1
29579: PUSH
29580: EMPTY
29581: LIST
29582: LIST
29583: PUSH
29584: LD_INT 21
29586: PUSH
29587: LD_INT 2
29589: PUSH
29590: EMPTY
29591: LIST
29592: LIST
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: LIST
29598: PPUSH
29599: CALL_OW 69
29603: ST_TO_ADDR
// if not tmp then
29604: LD_VAR 0 2
29608: NOT
29609: IFFALSE 29613
// exit ;
29611: GO 29642
// for i in tmp do
29613: LD_ADDR_VAR 0 1
29617: PUSH
29618: LD_VAR 0 2
29622: PUSH
29623: FOR_IN
29624: IFFALSE 29640
// SetFuel ( i , 0 ) ;
29626: LD_VAR 0 1
29630: PPUSH
29631: LD_INT 0
29633: PPUSH
29634: CALL_OW 240
29638: GO 29623
29640: POP
29641: POP
// end ;
29642: PPOPN 2
29644: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29645: LD_EXP 61
29649: PUSH
29650: LD_EXP 97
29654: AND
29655: IFFALSE 29721
29657: GO 29659
29659: DISABLE
29660: LD_INT 0
29662: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29663: LD_ADDR_VAR 0 1
29667: PUSH
29668: LD_INT 22
29670: PUSH
29671: LD_OWVAR 2
29675: PUSH
29676: EMPTY
29677: LIST
29678: LIST
29679: PUSH
29680: LD_INT 30
29682: PUSH
29683: LD_INT 29
29685: PUSH
29686: EMPTY
29687: LIST
29688: LIST
29689: PUSH
29690: EMPTY
29691: LIST
29692: LIST
29693: PPUSH
29694: CALL_OW 69
29698: ST_TO_ADDR
// if not tmp then
29699: LD_VAR 0 1
29703: NOT
29704: IFFALSE 29708
// exit ;
29706: GO 29721
// DestroyUnit ( tmp [ 1 ] ) ;
29708: LD_VAR 0 1
29712: PUSH
29713: LD_INT 1
29715: ARRAY
29716: PPUSH
29717: CALL_OW 65
// end ;
29721: PPOPN 1
29723: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29724: LD_EXP 61
29728: PUSH
29729: LD_EXP 99
29733: AND
29734: IFFALSE 29863
29736: GO 29738
29738: DISABLE
29739: LD_INT 0
29741: PPUSH
// begin uc_side := 0 ;
29742: LD_ADDR_OWVAR 20
29746: PUSH
29747: LD_INT 0
29749: ST_TO_ADDR
// uc_nation := nation_arabian ;
29750: LD_ADDR_OWVAR 21
29754: PUSH
29755: LD_INT 2
29757: ST_TO_ADDR
// hc_gallery :=  ;
29758: LD_ADDR_OWVAR 33
29762: PUSH
29763: LD_STRING 
29765: ST_TO_ADDR
// hc_name :=  ;
29766: LD_ADDR_OWVAR 26
29770: PUSH
29771: LD_STRING 
29773: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29774: LD_INT 1
29776: PPUSH
29777: LD_INT 11
29779: PPUSH
29780: LD_INT 10
29782: PPUSH
29783: CALL_OW 380
// un := CreateHuman ;
29787: LD_ADDR_VAR 0 1
29791: PUSH
29792: CALL_OW 44
29796: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29797: LD_VAR 0 1
29801: PPUSH
29802: LD_INT 1
29804: PPUSH
29805: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29809: LD_INT 35
29811: PPUSH
29812: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29816: LD_VAR 0 1
29820: PPUSH
29821: LD_INT 22
29823: PUSH
29824: LD_OWVAR 2
29828: PUSH
29829: EMPTY
29830: LIST
29831: LIST
29832: PPUSH
29833: CALL_OW 69
29837: PPUSH
29838: LD_VAR 0 1
29842: PPUSH
29843: CALL_OW 74
29847: PPUSH
29848: CALL_OW 115
// until IsDead ( un ) ;
29852: LD_VAR 0 1
29856: PPUSH
29857: CALL_OW 301
29861: IFFALSE 29809
// end ;
29863: PPOPN 1
29865: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29866: LD_EXP 61
29870: PUSH
29871: LD_EXP 101
29875: AND
29876: IFFALSE 29888
29878: GO 29880
29880: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29881: LD_STRING earthquake(getX(game), 0, 32)
29883: PPUSH
29884: CALL_OW 559
29888: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29889: LD_EXP 61
29893: PUSH
29894: LD_EXP 102
29898: AND
29899: IFFALSE 29990
29901: GO 29903
29903: DISABLE
29904: LD_INT 0
29906: PPUSH
// begin enable ;
29907: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29908: LD_ADDR_VAR 0 1
29912: PUSH
29913: LD_INT 22
29915: PUSH
29916: LD_OWVAR 2
29920: PUSH
29921: EMPTY
29922: LIST
29923: LIST
29924: PUSH
29925: LD_INT 21
29927: PUSH
29928: LD_INT 2
29930: PUSH
29931: EMPTY
29932: LIST
29933: LIST
29934: PUSH
29935: LD_INT 33
29937: PUSH
29938: LD_INT 3
29940: PUSH
29941: EMPTY
29942: LIST
29943: LIST
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: LIST
29949: PPUSH
29950: CALL_OW 69
29954: ST_TO_ADDR
// if not tmp then
29955: LD_VAR 0 1
29959: NOT
29960: IFFALSE 29964
// exit ;
29962: GO 29990
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29964: LD_VAR 0 1
29968: PUSH
29969: LD_INT 1
29971: PPUSH
29972: LD_VAR 0 1
29976: PPUSH
29977: CALL_OW 12
29981: ARRAY
29982: PPUSH
29983: LD_INT 1
29985: PPUSH
29986: CALL_OW 234
// end ;
29990: PPOPN 1
29992: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29993: LD_EXP 61
29997: PUSH
29998: LD_EXP 103
30002: AND
30003: IFFALSE 30144
30005: GO 30007
30007: DISABLE
30008: LD_INT 0
30010: PPUSH
30011: PPUSH
30012: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30013: LD_ADDR_VAR 0 3
30017: PUSH
30018: LD_INT 22
30020: PUSH
30021: LD_OWVAR 2
30025: PUSH
30026: EMPTY
30027: LIST
30028: LIST
30029: PUSH
30030: LD_INT 25
30032: PUSH
30033: LD_INT 1
30035: PUSH
30036: EMPTY
30037: LIST
30038: LIST
30039: PUSH
30040: EMPTY
30041: LIST
30042: LIST
30043: PPUSH
30044: CALL_OW 69
30048: ST_TO_ADDR
// if not tmp then
30049: LD_VAR 0 3
30053: NOT
30054: IFFALSE 30058
// exit ;
30056: GO 30144
// un := tmp [ rand ( 1 , tmp ) ] ;
30058: LD_ADDR_VAR 0 2
30062: PUSH
30063: LD_VAR 0 3
30067: PUSH
30068: LD_INT 1
30070: PPUSH
30071: LD_VAR 0 3
30075: PPUSH
30076: CALL_OW 12
30080: ARRAY
30081: ST_TO_ADDR
// if Crawls ( un ) then
30082: LD_VAR 0 2
30086: PPUSH
30087: CALL_OW 318
30091: IFFALSE 30102
// ComWalk ( un ) ;
30093: LD_VAR 0 2
30097: PPUSH
30098: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30102: LD_VAR 0 2
30106: PPUSH
30107: LD_INT 9
30109: PPUSH
30110: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30114: LD_INT 28
30116: PPUSH
30117: LD_OWVAR 2
30121: PPUSH
30122: LD_INT 2
30124: PPUSH
30125: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30129: LD_INT 29
30131: PPUSH
30132: LD_OWVAR 2
30136: PPUSH
30137: LD_INT 2
30139: PPUSH
30140: CALL_OW 322
// end ;
30144: PPOPN 3
30146: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30147: LD_EXP 61
30151: PUSH
30152: LD_EXP 104
30156: AND
30157: IFFALSE 30268
30159: GO 30161
30161: DISABLE
30162: LD_INT 0
30164: PPUSH
30165: PPUSH
30166: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30167: LD_ADDR_VAR 0 3
30171: PUSH
30172: LD_INT 22
30174: PUSH
30175: LD_OWVAR 2
30179: PUSH
30180: EMPTY
30181: LIST
30182: LIST
30183: PUSH
30184: LD_INT 25
30186: PUSH
30187: LD_INT 1
30189: PUSH
30190: EMPTY
30191: LIST
30192: LIST
30193: PUSH
30194: EMPTY
30195: LIST
30196: LIST
30197: PPUSH
30198: CALL_OW 69
30202: ST_TO_ADDR
// if not tmp then
30203: LD_VAR 0 3
30207: NOT
30208: IFFALSE 30212
// exit ;
30210: GO 30268
// un := tmp [ rand ( 1 , tmp ) ] ;
30212: LD_ADDR_VAR 0 2
30216: PUSH
30217: LD_VAR 0 3
30221: PUSH
30222: LD_INT 1
30224: PPUSH
30225: LD_VAR 0 3
30229: PPUSH
30230: CALL_OW 12
30234: ARRAY
30235: ST_TO_ADDR
// if Crawls ( un ) then
30236: LD_VAR 0 2
30240: PPUSH
30241: CALL_OW 318
30245: IFFALSE 30256
// ComWalk ( un ) ;
30247: LD_VAR 0 2
30251: PPUSH
30252: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30256: LD_VAR 0 2
30260: PPUSH
30261: LD_INT 8
30263: PPUSH
30264: CALL_OW 336
// end ;
30268: PPOPN 3
30270: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30271: LD_EXP 61
30275: PUSH
30276: LD_EXP 105
30280: AND
30281: IFFALSE 30425
30283: GO 30285
30285: DISABLE
30286: LD_INT 0
30288: PPUSH
30289: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30290: LD_ADDR_VAR 0 2
30294: PUSH
30295: LD_INT 22
30297: PUSH
30298: LD_OWVAR 2
30302: PUSH
30303: EMPTY
30304: LIST
30305: LIST
30306: PUSH
30307: LD_INT 21
30309: PUSH
30310: LD_INT 2
30312: PUSH
30313: EMPTY
30314: LIST
30315: LIST
30316: PUSH
30317: LD_INT 2
30319: PUSH
30320: LD_INT 34
30322: PUSH
30323: LD_INT 12
30325: PUSH
30326: EMPTY
30327: LIST
30328: LIST
30329: PUSH
30330: LD_INT 34
30332: PUSH
30333: LD_INT 51
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: PUSH
30340: LD_INT 34
30342: PUSH
30343: LD_INT 32
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: PUSH
30350: EMPTY
30351: LIST
30352: LIST
30353: LIST
30354: LIST
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: LIST
30360: PPUSH
30361: CALL_OW 69
30365: ST_TO_ADDR
// if not tmp then
30366: LD_VAR 0 2
30370: NOT
30371: IFFALSE 30375
// exit ;
30373: GO 30425
// for i in tmp do
30375: LD_ADDR_VAR 0 1
30379: PUSH
30380: LD_VAR 0 2
30384: PUSH
30385: FOR_IN
30386: IFFALSE 30423
// if GetCargo ( i , mat_artifact ) = 0 then
30388: LD_VAR 0 1
30392: PPUSH
30393: LD_INT 4
30395: PPUSH
30396: CALL_OW 289
30400: PUSH
30401: LD_INT 0
30403: EQUAL
30404: IFFALSE 30421
// SetCargo ( i , mat_siberit , 100 ) ;
30406: LD_VAR 0 1
30410: PPUSH
30411: LD_INT 3
30413: PPUSH
30414: LD_INT 100
30416: PPUSH
30417: CALL_OW 290
30421: GO 30385
30423: POP
30424: POP
// end ;
30425: PPOPN 2
30427: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30428: LD_EXP 61
30432: PUSH
30433: LD_EXP 106
30437: AND
30438: IFFALSE 30621
30440: GO 30442
30442: DISABLE
30443: LD_INT 0
30445: PPUSH
30446: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30447: LD_ADDR_VAR 0 2
30451: PUSH
30452: LD_INT 22
30454: PUSH
30455: LD_OWVAR 2
30459: PUSH
30460: EMPTY
30461: LIST
30462: LIST
30463: PPUSH
30464: CALL_OW 69
30468: ST_TO_ADDR
// if not tmp then
30469: LD_VAR 0 2
30473: NOT
30474: IFFALSE 30478
// exit ;
30476: GO 30621
// for i := 1 to 2 do
30478: LD_ADDR_VAR 0 1
30482: PUSH
30483: DOUBLE
30484: LD_INT 1
30486: DEC
30487: ST_TO_ADDR
30488: LD_INT 2
30490: PUSH
30491: FOR_TO
30492: IFFALSE 30619
// begin uc_side := your_side ;
30494: LD_ADDR_OWVAR 20
30498: PUSH
30499: LD_OWVAR 2
30503: ST_TO_ADDR
// uc_nation := nation_american ;
30504: LD_ADDR_OWVAR 21
30508: PUSH
30509: LD_INT 1
30511: ST_TO_ADDR
// vc_chassis := us_morphling ;
30512: LD_ADDR_OWVAR 37
30516: PUSH
30517: LD_INT 5
30519: ST_TO_ADDR
// vc_engine := engine_siberite ;
30520: LD_ADDR_OWVAR 39
30524: PUSH
30525: LD_INT 3
30527: ST_TO_ADDR
// vc_control := control_computer ;
30528: LD_ADDR_OWVAR 38
30532: PUSH
30533: LD_INT 3
30535: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30536: LD_ADDR_OWVAR 40
30540: PUSH
30541: LD_INT 10
30543: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30544: LD_VAR 0 2
30548: PUSH
30549: LD_INT 1
30551: ARRAY
30552: PPUSH
30553: CALL_OW 310
30557: NOT
30558: IFFALSE 30605
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30560: CALL_OW 45
30564: PPUSH
30565: LD_VAR 0 2
30569: PUSH
30570: LD_INT 1
30572: ARRAY
30573: PPUSH
30574: CALL_OW 250
30578: PPUSH
30579: LD_VAR 0 2
30583: PUSH
30584: LD_INT 1
30586: ARRAY
30587: PPUSH
30588: CALL_OW 251
30592: PPUSH
30593: LD_INT 12
30595: PPUSH
30596: LD_INT 1
30598: PPUSH
30599: CALL_OW 50
30603: GO 30617
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30605: CALL_OW 45
30609: PPUSH
30610: LD_INT 1
30612: PPUSH
30613: CALL_OW 51
// end ;
30617: GO 30491
30619: POP
30620: POP
// end ;
30621: PPOPN 2
30623: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30624: LD_EXP 61
30628: PUSH
30629: LD_EXP 107
30633: AND
30634: IFFALSE 30856
30636: GO 30638
30638: DISABLE
30639: LD_INT 0
30641: PPUSH
30642: PPUSH
30643: PPUSH
30644: PPUSH
30645: PPUSH
30646: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30647: LD_ADDR_VAR 0 6
30651: PUSH
30652: LD_INT 22
30654: PUSH
30655: LD_OWVAR 2
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: PUSH
30664: LD_INT 21
30666: PUSH
30667: LD_INT 1
30669: PUSH
30670: EMPTY
30671: LIST
30672: LIST
30673: PUSH
30674: LD_INT 3
30676: PUSH
30677: LD_INT 23
30679: PUSH
30680: LD_INT 0
30682: PUSH
30683: EMPTY
30684: LIST
30685: LIST
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: PUSH
30691: EMPTY
30692: LIST
30693: LIST
30694: LIST
30695: PPUSH
30696: CALL_OW 69
30700: ST_TO_ADDR
// if not tmp then
30701: LD_VAR 0 6
30705: NOT
30706: IFFALSE 30710
// exit ;
30708: GO 30856
// s1 := rand ( 1 , 4 ) ;
30710: LD_ADDR_VAR 0 2
30714: PUSH
30715: LD_INT 1
30717: PPUSH
30718: LD_INT 4
30720: PPUSH
30721: CALL_OW 12
30725: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30726: LD_ADDR_VAR 0 4
30730: PUSH
30731: LD_VAR 0 6
30735: PUSH
30736: LD_INT 1
30738: ARRAY
30739: PPUSH
30740: LD_VAR 0 2
30744: PPUSH
30745: CALL_OW 259
30749: ST_TO_ADDR
// if s1 = 1 then
30750: LD_VAR 0 2
30754: PUSH
30755: LD_INT 1
30757: EQUAL
30758: IFFALSE 30778
// s2 := rand ( 2 , 4 ) else
30760: LD_ADDR_VAR 0 3
30764: PUSH
30765: LD_INT 2
30767: PPUSH
30768: LD_INT 4
30770: PPUSH
30771: CALL_OW 12
30775: ST_TO_ADDR
30776: GO 30786
// s2 := 1 ;
30778: LD_ADDR_VAR 0 3
30782: PUSH
30783: LD_INT 1
30785: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30786: LD_ADDR_VAR 0 5
30790: PUSH
30791: LD_VAR 0 6
30795: PUSH
30796: LD_INT 1
30798: ARRAY
30799: PPUSH
30800: LD_VAR 0 3
30804: PPUSH
30805: CALL_OW 259
30809: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30810: LD_VAR 0 6
30814: PUSH
30815: LD_INT 1
30817: ARRAY
30818: PPUSH
30819: LD_VAR 0 2
30823: PPUSH
30824: LD_VAR 0 5
30828: PPUSH
30829: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30833: LD_VAR 0 6
30837: PUSH
30838: LD_INT 1
30840: ARRAY
30841: PPUSH
30842: LD_VAR 0 3
30846: PPUSH
30847: LD_VAR 0 4
30851: PPUSH
30852: CALL_OW 237
// end ;
30856: PPOPN 6
30858: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30859: LD_EXP 61
30863: PUSH
30864: LD_EXP 108
30868: AND
30869: IFFALSE 30948
30871: GO 30873
30873: DISABLE
30874: LD_INT 0
30876: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30877: LD_ADDR_VAR 0 1
30881: PUSH
30882: LD_INT 22
30884: PUSH
30885: LD_OWVAR 2
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: PUSH
30894: LD_INT 30
30896: PUSH
30897: LD_INT 3
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: PPUSH
30908: CALL_OW 69
30912: ST_TO_ADDR
// if not tmp then
30913: LD_VAR 0 1
30917: NOT
30918: IFFALSE 30922
// exit ;
30920: GO 30948
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30922: LD_VAR 0 1
30926: PUSH
30927: LD_INT 1
30929: PPUSH
30930: LD_VAR 0 1
30934: PPUSH
30935: CALL_OW 12
30939: ARRAY
30940: PPUSH
30941: LD_INT 1
30943: PPUSH
30944: CALL_OW 234
// end ;
30948: PPOPN 1
30950: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30951: LD_EXP 61
30955: PUSH
30956: LD_EXP 109
30960: AND
30961: IFFALSE 31073
30963: GO 30965
30965: DISABLE
30966: LD_INT 0
30968: PPUSH
30969: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30970: LD_ADDR_VAR 0 2
30974: PUSH
30975: LD_INT 22
30977: PUSH
30978: LD_OWVAR 2
30982: PUSH
30983: EMPTY
30984: LIST
30985: LIST
30986: PUSH
30987: LD_INT 2
30989: PUSH
30990: LD_INT 30
30992: PUSH
30993: LD_INT 27
30995: PUSH
30996: EMPTY
30997: LIST
30998: LIST
30999: PUSH
31000: LD_INT 30
31002: PUSH
31003: LD_INT 26
31005: PUSH
31006: EMPTY
31007: LIST
31008: LIST
31009: PUSH
31010: LD_INT 30
31012: PUSH
31013: LD_INT 28
31015: PUSH
31016: EMPTY
31017: LIST
31018: LIST
31019: PUSH
31020: EMPTY
31021: LIST
31022: LIST
31023: LIST
31024: LIST
31025: PUSH
31026: EMPTY
31027: LIST
31028: LIST
31029: PPUSH
31030: CALL_OW 69
31034: ST_TO_ADDR
// if not tmp then
31035: LD_VAR 0 2
31039: NOT
31040: IFFALSE 31044
// exit ;
31042: GO 31073
// for i in tmp do
31044: LD_ADDR_VAR 0 1
31048: PUSH
31049: LD_VAR 0 2
31053: PUSH
31054: FOR_IN
31055: IFFALSE 31071
// SetLives ( i , 1 ) ;
31057: LD_VAR 0 1
31061: PPUSH
31062: LD_INT 1
31064: PPUSH
31065: CALL_OW 234
31069: GO 31054
31071: POP
31072: POP
// end ;
31073: PPOPN 2
31075: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31076: LD_EXP 61
31080: PUSH
31081: LD_EXP 110
31085: AND
31086: IFFALSE 31373
31088: GO 31090
31090: DISABLE
31091: LD_INT 0
31093: PPUSH
31094: PPUSH
31095: PPUSH
// begin i := rand ( 1 , 7 ) ;
31096: LD_ADDR_VAR 0 1
31100: PUSH
31101: LD_INT 1
31103: PPUSH
31104: LD_INT 7
31106: PPUSH
31107: CALL_OW 12
31111: ST_TO_ADDR
// case i of 1 :
31112: LD_VAR 0 1
31116: PUSH
31117: LD_INT 1
31119: DOUBLE
31120: EQUAL
31121: IFTRUE 31125
31123: GO 31135
31125: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31126: LD_STRING earthquake(getX(game), 0, 32)
31128: PPUSH
31129: CALL_OW 559
31133: GO 31373
31135: LD_INT 2
31137: DOUBLE
31138: EQUAL
31139: IFTRUE 31143
31141: GO 31157
31143: POP
// begin ToLua ( displayStucuk(); ) ;
31144: LD_STRING displayStucuk();
31146: PPUSH
31147: CALL_OW 559
// ResetFog ;
31151: CALL_OW 335
// end ; 3 :
31155: GO 31373
31157: LD_INT 3
31159: DOUBLE
31160: EQUAL
31161: IFTRUE 31165
31163: GO 31269
31165: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31166: LD_ADDR_VAR 0 2
31170: PUSH
31171: LD_INT 22
31173: PUSH
31174: LD_OWVAR 2
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: PUSH
31183: LD_INT 25
31185: PUSH
31186: LD_INT 1
31188: PUSH
31189: EMPTY
31190: LIST
31191: LIST
31192: PUSH
31193: EMPTY
31194: LIST
31195: LIST
31196: PPUSH
31197: CALL_OW 69
31201: ST_TO_ADDR
// if not tmp then
31202: LD_VAR 0 2
31206: NOT
31207: IFFALSE 31211
// exit ;
31209: GO 31373
// un := tmp [ rand ( 1 , tmp ) ] ;
31211: LD_ADDR_VAR 0 3
31215: PUSH
31216: LD_VAR 0 2
31220: PUSH
31221: LD_INT 1
31223: PPUSH
31224: LD_VAR 0 2
31228: PPUSH
31229: CALL_OW 12
31233: ARRAY
31234: ST_TO_ADDR
// if Crawls ( un ) then
31235: LD_VAR 0 3
31239: PPUSH
31240: CALL_OW 318
31244: IFFALSE 31255
// ComWalk ( un ) ;
31246: LD_VAR 0 3
31250: PPUSH
31251: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31255: LD_VAR 0 3
31259: PPUSH
31260: LD_INT 8
31262: PPUSH
31263: CALL_OW 336
// end ; 4 :
31267: GO 31373
31269: LD_INT 4
31271: DOUBLE
31272: EQUAL
31273: IFTRUE 31277
31275: GO 31351
31277: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31278: LD_ADDR_VAR 0 2
31282: PUSH
31283: LD_INT 22
31285: PUSH
31286: LD_OWVAR 2
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: PUSH
31295: LD_INT 30
31297: PUSH
31298: LD_INT 29
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: PUSH
31305: EMPTY
31306: LIST
31307: LIST
31308: PPUSH
31309: CALL_OW 69
31313: ST_TO_ADDR
// if not tmp then
31314: LD_VAR 0 2
31318: NOT
31319: IFFALSE 31323
// exit ;
31321: GO 31373
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31323: LD_VAR 0 2
31327: PUSH
31328: LD_INT 1
31330: ARRAY
31331: PPUSH
31332: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31336: LD_VAR 0 2
31340: PUSH
31341: LD_INT 1
31343: ARRAY
31344: PPUSH
31345: CALL_OW 65
// end ; 5 .. 7 :
31349: GO 31373
31351: LD_INT 5
31353: DOUBLE
31354: GREATEREQUAL
31355: IFFALSE 31363
31357: LD_INT 7
31359: DOUBLE
31360: LESSEQUAL
31361: IFTRUE 31365
31363: GO 31372
31365: POP
// StreamSibBomb ; end ;
31366: CALL 27610 0 0
31370: GO 31373
31372: POP
// end ;
31373: PPOPN 3
31375: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31376: LD_EXP 61
31380: PUSH
31381: LD_EXP 111
31385: AND
31386: IFFALSE 31542
31388: GO 31390
31390: DISABLE
31391: LD_INT 0
31393: PPUSH
31394: PPUSH
31395: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31396: LD_ADDR_VAR 0 2
31400: PUSH
31401: LD_INT 81
31403: PUSH
31404: LD_OWVAR 2
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: PUSH
31413: LD_INT 2
31415: PUSH
31416: LD_INT 21
31418: PUSH
31419: LD_INT 1
31421: PUSH
31422: EMPTY
31423: LIST
31424: LIST
31425: PUSH
31426: LD_INT 21
31428: PUSH
31429: LD_INT 2
31431: PUSH
31432: EMPTY
31433: LIST
31434: LIST
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: LIST
31440: PUSH
31441: EMPTY
31442: LIST
31443: LIST
31444: PPUSH
31445: CALL_OW 69
31449: ST_TO_ADDR
// if not tmp then
31450: LD_VAR 0 2
31454: NOT
31455: IFFALSE 31459
// exit ;
31457: GO 31542
// p := 0 ;
31459: LD_ADDR_VAR 0 3
31463: PUSH
31464: LD_INT 0
31466: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31467: LD_INT 35
31469: PPUSH
31470: CALL_OW 67
// p := p + 1 ;
31474: LD_ADDR_VAR 0 3
31478: PUSH
31479: LD_VAR 0 3
31483: PUSH
31484: LD_INT 1
31486: PLUS
31487: ST_TO_ADDR
// for i in tmp do
31488: LD_ADDR_VAR 0 1
31492: PUSH
31493: LD_VAR 0 2
31497: PUSH
31498: FOR_IN
31499: IFFALSE 31530
// if GetLives ( i ) < 1000 then
31501: LD_VAR 0 1
31505: PPUSH
31506: CALL_OW 256
31510: PUSH
31511: LD_INT 1000
31513: LESS
31514: IFFALSE 31528
// SetLives ( i , 1000 ) ;
31516: LD_VAR 0 1
31520: PPUSH
31521: LD_INT 1000
31523: PPUSH
31524: CALL_OW 234
31528: GO 31498
31530: POP
31531: POP
// until p > 20 ;
31532: LD_VAR 0 3
31536: PUSH
31537: LD_INT 20
31539: GREATER
31540: IFFALSE 31467
// end ;
31542: PPOPN 3
31544: END
// every 0 0$1 trigger StreamModeActive and sTime do
31545: LD_EXP 61
31549: PUSH
31550: LD_EXP 112
31554: AND
31555: IFFALSE 31590
31557: GO 31559
31559: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31560: LD_INT 28
31562: PPUSH
31563: LD_OWVAR 2
31567: PPUSH
31568: LD_INT 2
31570: PPUSH
31571: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31575: LD_INT 30
31577: PPUSH
31578: LD_OWVAR 2
31582: PPUSH
31583: LD_INT 2
31585: PPUSH
31586: CALL_OW 322
// end ;
31590: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31591: LD_EXP 61
31595: PUSH
31596: LD_EXP 113
31600: AND
31601: IFFALSE 31722
31603: GO 31605
31605: DISABLE
31606: LD_INT 0
31608: PPUSH
31609: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31610: LD_ADDR_VAR 0 2
31614: PUSH
31615: LD_INT 22
31617: PUSH
31618: LD_OWVAR 2
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: PUSH
31627: LD_INT 21
31629: PUSH
31630: LD_INT 1
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: PUSH
31637: LD_INT 3
31639: PUSH
31640: LD_INT 23
31642: PUSH
31643: LD_INT 0
31645: PUSH
31646: EMPTY
31647: LIST
31648: LIST
31649: PUSH
31650: EMPTY
31651: LIST
31652: LIST
31653: PUSH
31654: EMPTY
31655: LIST
31656: LIST
31657: LIST
31658: PPUSH
31659: CALL_OW 69
31663: ST_TO_ADDR
// if not tmp then
31664: LD_VAR 0 2
31668: NOT
31669: IFFALSE 31673
// exit ;
31671: GO 31722
// for i in tmp do
31673: LD_ADDR_VAR 0 1
31677: PUSH
31678: LD_VAR 0 2
31682: PUSH
31683: FOR_IN
31684: IFFALSE 31720
// begin if Crawls ( i ) then
31686: LD_VAR 0 1
31690: PPUSH
31691: CALL_OW 318
31695: IFFALSE 31706
// ComWalk ( i ) ;
31697: LD_VAR 0 1
31701: PPUSH
31702: CALL_OW 138
// SetClass ( i , 2 ) ;
31706: LD_VAR 0 1
31710: PPUSH
31711: LD_INT 2
31713: PPUSH
31714: CALL_OW 336
// end ;
31718: GO 31683
31720: POP
31721: POP
// end ;
31722: PPOPN 2
31724: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31725: LD_EXP 61
31729: PUSH
31730: LD_EXP 114
31734: AND
31735: IFFALSE 32023
31737: GO 31739
31739: DISABLE
31740: LD_INT 0
31742: PPUSH
31743: PPUSH
31744: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31745: LD_OWVAR 2
31749: PPUSH
31750: LD_INT 9
31752: PPUSH
31753: LD_INT 1
31755: PPUSH
31756: LD_INT 1
31758: PPUSH
31759: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31763: LD_INT 9
31765: PPUSH
31766: LD_OWVAR 2
31770: PPUSH
31771: CALL_OW 343
// uc_side := 9 ;
31775: LD_ADDR_OWVAR 20
31779: PUSH
31780: LD_INT 9
31782: ST_TO_ADDR
// uc_nation := 2 ;
31783: LD_ADDR_OWVAR 21
31787: PUSH
31788: LD_INT 2
31790: ST_TO_ADDR
// hc_name := Dark Warrior ;
31791: LD_ADDR_OWVAR 26
31795: PUSH
31796: LD_STRING Dark Warrior
31798: ST_TO_ADDR
// hc_gallery :=  ;
31799: LD_ADDR_OWVAR 33
31803: PUSH
31804: LD_STRING 
31806: ST_TO_ADDR
// hc_noskilllimit := true ;
31807: LD_ADDR_OWVAR 76
31811: PUSH
31812: LD_INT 1
31814: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31815: LD_ADDR_OWVAR 31
31819: PUSH
31820: LD_INT 30
31822: PUSH
31823: LD_INT 30
31825: PUSH
31826: LD_INT 30
31828: PUSH
31829: LD_INT 30
31831: PUSH
31832: EMPTY
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: ST_TO_ADDR
// un := CreateHuman ;
31838: LD_ADDR_VAR 0 3
31842: PUSH
31843: CALL_OW 44
31847: ST_TO_ADDR
// hc_noskilllimit := false ;
31848: LD_ADDR_OWVAR 76
31852: PUSH
31853: LD_INT 0
31855: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31856: LD_VAR 0 3
31860: PPUSH
31861: LD_INT 1
31863: PPUSH
31864: CALL_OW 51
// ToLua ( playRanger() ) ;
31868: LD_STRING playRanger()
31870: PPUSH
31871: CALL_OW 559
// p := 0 ;
31875: LD_ADDR_VAR 0 2
31879: PUSH
31880: LD_INT 0
31882: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31883: LD_INT 35
31885: PPUSH
31886: CALL_OW 67
// p := p + 1 ;
31890: LD_ADDR_VAR 0 2
31894: PUSH
31895: LD_VAR 0 2
31899: PUSH
31900: LD_INT 1
31902: PLUS
31903: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31904: LD_VAR 0 3
31908: PPUSH
31909: CALL_OW 256
31913: PUSH
31914: LD_INT 1000
31916: LESS
31917: IFFALSE 31931
// SetLives ( un , 1000 ) ;
31919: LD_VAR 0 3
31923: PPUSH
31924: LD_INT 1000
31926: PPUSH
31927: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31931: LD_VAR 0 3
31935: PPUSH
31936: LD_INT 81
31938: PUSH
31939: LD_OWVAR 2
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: PUSH
31948: LD_INT 91
31950: PUSH
31951: LD_VAR 0 3
31955: PUSH
31956: LD_INT 30
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: LIST
31963: PUSH
31964: EMPTY
31965: LIST
31966: LIST
31967: PPUSH
31968: CALL_OW 69
31972: PPUSH
31973: LD_VAR 0 3
31977: PPUSH
31978: CALL_OW 74
31982: PPUSH
31983: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31987: LD_VAR 0 2
31991: PUSH
31992: LD_INT 80
31994: GREATER
31995: PUSH
31996: LD_VAR 0 3
32000: PPUSH
32001: CALL_OW 301
32005: OR
32006: IFFALSE 31883
// if un then
32008: LD_VAR 0 3
32012: IFFALSE 32023
// RemoveUnit ( un ) ;
32014: LD_VAR 0 3
32018: PPUSH
32019: CALL_OW 64
// end ;
32023: PPOPN 3
32025: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
32026: LD_EXP 115
32030: IFFALSE 32146
32032: GO 32034
32034: DISABLE
32035: LD_INT 0
32037: PPUSH
32038: PPUSH
32039: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32040: LD_ADDR_VAR 0 2
32044: PUSH
32045: LD_INT 81
32047: PUSH
32048: LD_OWVAR 2
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PUSH
32057: LD_INT 21
32059: PUSH
32060: LD_INT 1
32062: PUSH
32063: EMPTY
32064: LIST
32065: LIST
32066: PUSH
32067: EMPTY
32068: LIST
32069: LIST
32070: PPUSH
32071: CALL_OW 69
32075: ST_TO_ADDR
// ToLua ( playComputer() ) ;
32076: LD_STRING playComputer()
32078: PPUSH
32079: CALL_OW 559
// if not tmp then
32083: LD_VAR 0 2
32087: NOT
32088: IFFALSE 32092
// exit ;
32090: GO 32146
// for i in tmp do
32092: LD_ADDR_VAR 0 1
32096: PUSH
32097: LD_VAR 0 2
32101: PUSH
32102: FOR_IN
32103: IFFALSE 32144
// for j := 1 to 4 do
32105: LD_ADDR_VAR 0 3
32109: PUSH
32110: DOUBLE
32111: LD_INT 1
32113: DEC
32114: ST_TO_ADDR
32115: LD_INT 4
32117: PUSH
32118: FOR_TO
32119: IFFALSE 32140
// SetSkill ( i , j , 10 ) ;
32121: LD_VAR 0 1
32125: PPUSH
32126: LD_VAR 0 3
32130: PPUSH
32131: LD_INT 10
32133: PPUSH
32134: CALL_OW 237
32138: GO 32118
32140: POP
32141: POP
32142: GO 32102
32144: POP
32145: POP
// end ;
32146: PPOPN 3
32148: END
// every 0 0$1 trigger s30 do var i , tmp ;
32149: LD_EXP 116
32153: IFFALSE 32222
32155: GO 32157
32157: DISABLE
32158: LD_INT 0
32160: PPUSH
32161: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32162: LD_ADDR_VAR 0 2
32166: PUSH
32167: LD_INT 22
32169: PUSH
32170: LD_OWVAR 2
32174: PUSH
32175: EMPTY
32176: LIST
32177: LIST
32178: PPUSH
32179: CALL_OW 69
32183: ST_TO_ADDR
// if not tmp then
32184: LD_VAR 0 2
32188: NOT
32189: IFFALSE 32193
// exit ;
32191: GO 32222
// for i in tmp do
32193: LD_ADDR_VAR 0 1
32197: PUSH
32198: LD_VAR 0 2
32202: PUSH
32203: FOR_IN
32204: IFFALSE 32220
// SetLives ( i , 300 ) ;
32206: LD_VAR 0 1
32210: PPUSH
32211: LD_INT 300
32213: PPUSH
32214: CALL_OW 234
32218: GO 32203
32220: POP
32221: POP
// end ;
32222: PPOPN 2
32224: END
// every 0 0$1 trigger s60 do var i , tmp ;
32225: LD_EXP 117
32229: IFFALSE 32298
32231: GO 32233
32233: DISABLE
32234: LD_INT 0
32236: PPUSH
32237: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32238: LD_ADDR_VAR 0 2
32242: PUSH
32243: LD_INT 22
32245: PUSH
32246: LD_OWVAR 2
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: PPUSH
32255: CALL_OW 69
32259: ST_TO_ADDR
// if not tmp then
32260: LD_VAR 0 2
32264: NOT
32265: IFFALSE 32269
// exit ;
32267: GO 32298
// for i in tmp do
32269: LD_ADDR_VAR 0 1
32273: PUSH
32274: LD_VAR 0 2
32278: PUSH
32279: FOR_IN
32280: IFFALSE 32296
// SetLives ( i , 600 ) ;
32282: LD_VAR 0 1
32286: PPUSH
32287: LD_INT 600
32289: PPUSH
32290: CALL_OW 234
32294: GO 32279
32296: POP
32297: POP
// end ;
32298: PPOPN 2
32300: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32301: LD_INT 0
32303: PPUSH
// case cmd of 301 :
32304: LD_VAR 0 1
32308: PUSH
32309: LD_INT 301
32311: DOUBLE
32312: EQUAL
32313: IFTRUE 32317
32315: GO 32349
32317: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32318: LD_VAR 0 6
32322: PPUSH
32323: LD_VAR 0 7
32327: PPUSH
32328: LD_VAR 0 8
32332: PPUSH
32333: LD_VAR 0 4
32337: PPUSH
32338: LD_VAR 0 5
32342: PPUSH
32343: CALL 33558 0 5
32347: GO 32470
32349: LD_INT 302
32351: DOUBLE
32352: EQUAL
32353: IFTRUE 32357
32355: GO 32394
32357: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32358: LD_VAR 0 6
32362: PPUSH
32363: LD_VAR 0 7
32367: PPUSH
32368: LD_VAR 0 8
32372: PPUSH
32373: LD_VAR 0 9
32377: PPUSH
32378: LD_VAR 0 4
32382: PPUSH
32383: LD_VAR 0 5
32387: PPUSH
32388: CALL 33649 0 6
32392: GO 32470
32394: LD_INT 303
32396: DOUBLE
32397: EQUAL
32398: IFTRUE 32402
32400: GO 32439
32402: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32403: LD_VAR 0 6
32407: PPUSH
32408: LD_VAR 0 7
32412: PPUSH
32413: LD_VAR 0 8
32417: PPUSH
32418: LD_VAR 0 9
32422: PPUSH
32423: LD_VAR 0 4
32427: PPUSH
32428: LD_VAR 0 5
32432: PPUSH
32433: CALL 32475 0 6
32437: GO 32470
32439: LD_INT 304
32441: DOUBLE
32442: EQUAL
32443: IFTRUE 32447
32445: GO 32469
32447: POP
// hHackTeleport ( unit , x , y ) ; end ;
32448: LD_VAR 0 2
32452: PPUSH
32453: LD_VAR 0 4
32457: PPUSH
32458: LD_VAR 0 5
32462: PPUSH
32463: CALL 34242 0 3
32467: GO 32470
32469: POP
// end ;
32470: LD_VAR 0 12
32474: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32475: LD_INT 0
32477: PPUSH
32478: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32479: LD_VAR 0 1
32483: PUSH
32484: LD_INT 1
32486: LESS
32487: PUSH
32488: LD_VAR 0 1
32492: PUSH
32493: LD_INT 3
32495: GREATER
32496: OR
32497: PUSH
32498: LD_VAR 0 5
32502: PPUSH
32503: LD_VAR 0 6
32507: PPUSH
32508: CALL_OW 428
32512: OR
32513: IFFALSE 32517
// exit ;
32515: GO 33245
// uc_side := your_side ;
32517: LD_ADDR_OWVAR 20
32521: PUSH
32522: LD_OWVAR 2
32526: ST_TO_ADDR
// uc_nation := nation ;
32527: LD_ADDR_OWVAR 21
32531: PUSH
32532: LD_VAR 0 1
32536: ST_TO_ADDR
// bc_level = 1 ;
32537: LD_ADDR_OWVAR 43
32541: PUSH
32542: LD_INT 1
32544: ST_TO_ADDR
// case btype of 1 :
32545: LD_VAR 0 2
32549: PUSH
32550: LD_INT 1
32552: DOUBLE
32553: EQUAL
32554: IFTRUE 32558
32556: GO 32569
32558: POP
// bc_type := b_depot ; 2 :
32559: LD_ADDR_OWVAR 42
32563: PUSH
32564: LD_INT 0
32566: ST_TO_ADDR
32567: GO 33189
32569: LD_INT 2
32571: DOUBLE
32572: EQUAL
32573: IFTRUE 32577
32575: GO 32588
32577: POP
// bc_type := b_warehouse ; 3 :
32578: LD_ADDR_OWVAR 42
32582: PUSH
32583: LD_INT 1
32585: ST_TO_ADDR
32586: GO 33189
32588: LD_INT 3
32590: DOUBLE
32591: EQUAL
32592: IFTRUE 32596
32594: GO 32607
32596: POP
// bc_type := b_lab ; 4 .. 9 :
32597: LD_ADDR_OWVAR 42
32601: PUSH
32602: LD_INT 6
32604: ST_TO_ADDR
32605: GO 33189
32607: LD_INT 4
32609: DOUBLE
32610: GREATEREQUAL
32611: IFFALSE 32619
32613: LD_INT 9
32615: DOUBLE
32616: LESSEQUAL
32617: IFTRUE 32621
32619: GO 32681
32621: POP
// begin bc_type := b_lab_half ;
32622: LD_ADDR_OWVAR 42
32626: PUSH
32627: LD_INT 7
32629: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32630: LD_ADDR_OWVAR 44
32634: PUSH
32635: LD_INT 10
32637: PUSH
32638: LD_INT 11
32640: PUSH
32641: LD_INT 12
32643: PUSH
32644: LD_INT 15
32646: PUSH
32647: LD_INT 14
32649: PUSH
32650: LD_INT 13
32652: PUSH
32653: EMPTY
32654: LIST
32655: LIST
32656: LIST
32657: LIST
32658: LIST
32659: LIST
32660: PUSH
32661: LD_VAR 0 2
32665: PUSH
32666: LD_INT 3
32668: MINUS
32669: ARRAY
32670: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
32671: LD_ADDR_OWVAR 45
32675: PUSH
32676: LD_INT 9
32678: ST_TO_ADDR
// end ; 10 .. 13 :
32679: GO 33189
32681: LD_INT 10
32683: DOUBLE
32684: GREATEREQUAL
32685: IFFALSE 32693
32687: LD_INT 13
32689: DOUBLE
32690: LESSEQUAL
32691: IFTRUE 32695
32693: GO 32772
32695: POP
// begin bc_type := b_lab_full ;
32696: LD_ADDR_OWVAR 42
32700: PUSH
32701: LD_INT 8
32703: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32704: LD_ADDR_OWVAR 44
32708: PUSH
32709: LD_INT 10
32711: PUSH
32712: LD_INT 12
32714: PUSH
32715: LD_INT 14
32717: PUSH
32718: LD_INT 13
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: LIST
32725: LIST
32726: PUSH
32727: LD_VAR 0 2
32731: PUSH
32732: LD_INT 9
32734: MINUS
32735: ARRAY
32736: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32737: LD_ADDR_OWVAR 45
32741: PUSH
32742: LD_INT 11
32744: PUSH
32745: LD_INT 15
32747: PUSH
32748: LD_INT 12
32750: PUSH
32751: LD_INT 15
32753: PUSH
32754: EMPTY
32755: LIST
32756: LIST
32757: LIST
32758: LIST
32759: PUSH
32760: LD_VAR 0 2
32764: PUSH
32765: LD_INT 9
32767: MINUS
32768: ARRAY
32769: ST_TO_ADDR
// end ; 14 :
32770: GO 33189
32772: LD_INT 14
32774: DOUBLE
32775: EQUAL
32776: IFTRUE 32780
32778: GO 32791
32780: POP
// bc_type := b_workshop ; 15 :
32781: LD_ADDR_OWVAR 42
32785: PUSH
32786: LD_INT 2
32788: ST_TO_ADDR
32789: GO 33189
32791: LD_INT 15
32793: DOUBLE
32794: EQUAL
32795: IFTRUE 32799
32797: GO 32810
32799: POP
// bc_type := b_factory ; 16 :
32800: LD_ADDR_OWVAR 42
32804: PUSH
32805: LD_INT 3
32807: ST_TO_ADDR
32808: GO 33189
32810: LD_INT 16
32812: DOUBLE
32813: EQUAL
32814: IFTRUE 32818
32816: GO 32829
32818: POP
// bc_type := b_ext_gun ; 17 :
32819: LD_ADDR_OWVAR 42
32823: PUSH
32824: LD_INT 17
32826: ST_TO_ADDR
32827: GO 33189
32829: LD_INT 17
32831: DOUBLE
32832: EQUAL
32833: IFTRUE 32837
32835: GO 32865
32837: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32838: LD_ADDR_OWVAR 42
32842: PUSH
32843: LD_INT 19
32845: PUSH
32846: LD_INT 23
32848: PUSH
32849: LD_INT 19
32851: PUSH
32852: EMPTY
32853: LIST
32854: LIST
32855: LIST
32856: PUSH
32857: LD_VAR 0 1
32861: ARRAY
32862: ST_TO_ADDR
32863: GO 33189
32865: LD_INT 18
32867: DOUBLE
32868: EQUAL
32869: IFTRUE 32873
32871: GO 32884
32873: POP
// bc_type := b_ext_radar ; 19 :
32874: LD_ADDR_OWVAR 42
32878: PUSH
32879: LD_INT 20
32881: ST_TO_ADDR
32882: GO 33189
32884: LD_INT 19
32886: DOUBLE
32887: EQUAL
32888: IFTRUE 32892
32890: GO 32903
32892: POP
// bc_type := b_ext_radio ; 20 :
32893: LD_ADDR_OWVAR 42
32897: PUSH
32898: LD_INT 22
32900: ST_TO_ADDR
32901: GO 33189
32903: LD_INT 20
32905: DOUBLE
32906: EQUAL
32907: IFTRUE 32911
32909: GO 32922
32911: POP
// bc_type := b_ext_siberium ; 21 :
32912: LD_ADDR_OWVAR 42
32916: PUSH
32917: LD_INT 21
32919: ST_TO_ADDR
32920: GO 33189
32922: LD_INT 21
32924: DOUBLE
32925: EQUAL
32926: IFTRUE 32930
32928: GO 32941
32930: POP
// bc_type := b_ext_computer ; 22 :
32931: LD_ADDR_OWVAR 42
32935: PUSH
32936: LD_INT 24
32938: ST_TO_ADDR
32939: GO 33189
32941: LD_INT 22
32943: DOUBLE
32944: EQUAL
32945: IFTRUE 32949
32947: GO 32960
32949: POP
// bc_type := b_ext_track ; 23 :
32950: LD_ADDR_OWVAR 42
32954: PUSH
32955: LD_INT 16
32957: ST_TO_ADDR
32958: GO 33189
32960: LD_INT 23
32962: DOUBLE
32963: EQUAL
32964: IFTRUE 32968
32966: GO 32979
32968: POP
// bc_type := b_ext_laser ; 24 :
32969: LD_ADDR_OWVAR 42
32973: PUSH
32974: LD_INT 25
32976: ST_TO_ADDR
32977: GO 33189
32979: LD_INT 24
32981: DOUBLE
32982: EQUAL
32983: IFTRUE 32987
32985: GO 32998
32987: POP
// bc_type := b_control_tower ; 25 :
32988: LD_ADDR_OWVAR 42
32992: PUSH
32993: LD_INT 36
32995: ST_TO_ADDR
32996: GO 33189
32998: LD_INT 25
33000: DOUBLE
33001: EQUAL
33002: IFTRUE 33006
33004: GO 33017
33006: POP
// bc_type := b_breastwork ; 26 :
33007: LD_ADDR_OWVAR 42
33011: PUSH
33012: LD_INT 31
33014: ST_TO_ADDR
33015: GO 33189
33017: LD_INT 26
33019: DOUBLE
33020: EQUAL
33021: IFTRUE 33025
33023: GO 33036
33025: POP
// bc_type := b_bunker ; 27 :
33026: LD_ADDR_OWVAR 42
33030: PUSH
33031: LD_INT 32
33033: ST_TO_ADDR
33034: GO 33189
33036: LD_INT 27
33038: DOUBLE
33039: EQUAL
33040: IFTRUE 33044
33042: GO 33055
33044: POP
// bc_type := b_turret ; 28 :
33045: LD_ADDR_OWVAR 42
33049: PUSH
33050: LD_INT 33
33052: ST_TO_ADDR
33053: GO 33189
33055: LD_INT 28
33057: DOUBLE
33058: EQUAL
33059: IFTRUE 33063
33061: GO 33074
33063: POP
// bc_type := b_armoury ; 29 :
33064: LD_ADDR_OWVAR 42
33068: PUSH
33069: LD_INT 4
33071: ST_TO_ADDR
33072: GO 33189
33074: LD_INT 29
33076: DOUBLE
33077: EQUAL
33078: IFTRUE 33082
33080: GO 33093
33082: POP
// bc_type := b_barracks ; 30 :
33083: LD_ADDR_OWVAR 42
33087: PUSH
33088: LD_INT 5
33090: ST_TO_ADDR
33091: GO 33189
33093: LD_INT 30
33095: DOUBLE
33096: EQUAL
33097: IFTRUE 33101
33099: GO 33112
33101: POP
// bc_type := b_solar_power ; 31 :
33102: LD_ADDR_OWVAR 42
33106: PUSH
33107: LD_INT 27
33109: ST_TO_ADDR
33110: GO 33189
33112: LD_INT 31
33114: DOUBLE
33115: EQUAL
33116: IFTRUE 33120
33118: GO 33131
33120: POP
// bc_type := b_oil_power ; 32 :
33121: LD_ADDR_OWVAR 42
33125: PUSH
33126: LD_INT 26
33128: ST_TO_ADDR
33129: GO 33189
33131: LD_INT 32
33133: DOUBLE
33134: EQUAL
33135: IFTRUE 33139
33137: GO 33150
33139: POP
// bc_type := b_siberite_power ; 33 :
33140: LD_ADDR_OWVAR 42
33144: PUSH
33145: LD_INT 28
33147: ST_TO_ADDR
33148: GO 33189
33150: LD_INT 33
33152: DOUBLE
33153: EQUAL
33154: IFTRUE 33158
33156: GO 33169
33158: POP
// bc_type := b_oil_mine ; 34 :
33159: LD_ADDR_OWVAR 42
33163: PUSH
33164: LD_INT 29
33166: ST_TO_ADDR
33167: GO 33189
33169: LD_INT 34
33171: DOUBLE
33172: EQUAL
33173: IFTRUE 33177
33175: GO 33188
33177: POP
// bc_type := b_siberite_mine ; end ;
33178: LD_ADDR_OWVAR 42
33182: PUSH
33183: LD_INT 30
33185: ST_TO_ADDR
33186: GO 33189
33188: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33189: LD_ADDR_VAR 0 8
33193: PUSH
33194: LD_VAR 0 5
33198: PPUSH
33199: LD_VAR 0 6
33203: PPUSH
33204: LD_VAR 0 3
33208: PPUSH
33209: CALL_OW 47
33213: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33214: LD_OWVAR 42
33218: PUSH
33219: LD_INT 32
33221: PUSH
33222: LD_INT 33
33224: PUSH
33225: EMPTY
33226: LIST
33227: LIST
33228: IN
33229: IFFALSE 33245
// PlaceWeaponTurret ( b , weapon ) ;
33231: LD_VAR 0 8
33235: PPUSH
33236: LD_VAR 0 4
33240: PPUSH
33241: CALL_OW 431
// end ;
33245: LD_VAR 0 7
33249: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33250: LD_INT 0
33252: PPUSH
33253: PPUSH
33254: PPUSH
33255: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33256: LD_ADDR_VAR 0 4
33260: PUSH
33261: LD_INT 22
33263: PUSH
33264: LD_OWVAR 2
33268: PUSH
33269: EMPTY
33270: LIST
33271: LIST
33272: PUSH
33273: LD_INT 2
33275: PUSH
33276: LD_INT 30
33278: PUSH
33279: LD_INT 0
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: PUSH
33286: LD_INT 30
33288: PUSH
33289: LD_INT 1
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: PUSH
33296: EMPTY
33297: LIST
33298: LIST
33299: LIST
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: PPUSH
33305: CALL_OW 69
33309: ST_TO_ADDR
// if not tmp then
33310: LD_VAR 0 4
33314: NOT
33315: IFFALSE 33319
// exit ;
33317: GO 33378
// for i in tmp do
33319: LD_ADDR_VAR 0 2
33323: PUSH
33324: LD_VAR 0 4
33328: PUSH
33329: FOR_IN
33330: IFFALSE 33376
// for j = 1 to 3 do
33332: LD_ADDR_VAR 0 3
33336: PUSH
33337: DOUBLE
33338: LD_INT 1
33340: DEC
33341: ST_TO_ADDR
33342: LD_INT 3
33344: PUSH
33345: FOR_TO
33346: IFFALSE 33372
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33348: LD_VAR 0 2
33352: PPUSH
33353: CALL_OW 274
33357: PPUSH
33358: LD_VAR 0 3
33362: PPUSH
33363: LD_INT 99999
33365: PPUSH
33366: CALL_OW 277
33370: GO 33345
33372: POP
33373: POP
33374: GO 33329
33376: POP
33377: POP
// end ;
33378: LD_VAR 0 1
33382: RET
// export function hHackSetLevel10 ; var i , j ; begin
33383: LD_INT 0
33385: PPUSH
33386: PPUSH
33387: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33388: LD_ADDR_VAR 0 2
33392: PUSH
33393: LD_INT 21
33395: PUSH
33396: LD_INT 1
33398: PUSH
33399: EMPTY
33400: LIST
33401: LIST
33402: PPUSH
33403: CALL_OW 69
33407: PUSH
33408: FOR_IN
33409: IFFALSE 33461
// if IsSelected ( i ) then
33411: LD_VAR 0 2
33415: PPUSH
33416: CALL_OW 306
33420: IFFALSE 33459
// begin for j := 1 to 4 do
33422: LD_ADDR_VAR 0 3
33426: PUSH
33427: DOUBLE
33428: LD_INT 1
33430: DEC
33431: ST_TO_ADDR
33432: LD_INT 4
33434: PUSH
33435: FOR_TO
33436: IFFALSE 33457
// SetSkill ( i , j , 10 ) ;
33438: LD_VAR 0 2
33442: PPUSH
33443: LD_VAR 0 3
33447: PPUSH
33448: LD_INT 10
33450: PPUSH
33451: CALL_OW 237
33455: GO 33435
33457: POP
33458: POP
// end ;
33459: GO 33408
33461: POP
33462: POP
// end ;
33463: LD_VAR 0 1
33467: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33468: LD_INT 0
33470: PPUSH
33471: PPUSH
33472: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33473: LD_ADDR_VAR 0 2
33477: PUSH
33478: LD_INT 22
33480: PUSH
33481: LD_OWVAR 2
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: PUSH
33490: LD_INT 21
33492: PUSH
33493: LD_INT 1
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: PUSH
33500: EMPTY
33501: LIST
33502: LIST
33503: PPUSH
33504: CALL_OW 69
33508: PUSH
33509: FOR_IN
33510: IFFALSE 33551
// begin for j := 1 to 4 do
33512: LD_ADDR_VAR 0 3
33516: PUSH
33517: DOUBLE
33518: LD_INT 1
33520: DEC
33521: ST_TO_ADDR
33522: LD_INT 4
33524: PUSH
33525: FOR_TO
33526: IFFALSE 33547
// SetSkill ( i , j , 10 ) ;
33528: LD_VAR 0 2
33532: PPUSH
33533: LD_VAR 0 3
33537: PPUSH
33538: LD_INT 10
33540: PPUSH
33541: CALL_OW 237
33545: GO 33525
33547: POP
33548: POP
// end ;
33549: GO 33509
33551: POP
33552: POP
// end ;
33553: LD_VAR 0 1
33557: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33558: LD_INT 0
33560: PPUSH
// uc_side := your_side ;
33561: LD_ADDR_OWVAR 20
33565: PUSH
33566: LD_OWVAR 2
33570: ST_TO_ADDR
// uc_nation := nation ;
33571: LD_ADDR_OWVAR 21
33575: PUSH
33576: LD_VAR 0 1
33580: ST_TO_ADDR
// InitHc ;
33581: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33585: LD_INT 0
33587: PPUSH
33588: LD_VAR 0 2
33592: PPUSH
33593: LD_VAR 0 3
33597: PPUSH
33598: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33602: LD_VAR 0 4
33606: PPUSH
33607: LD_VAR 0 5
33611: PPUSH
33612: CALL_OW 428
33616: PUSH
33617: LD_INT 0
33619: EQUAL
33620: IFFALSE 33644
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33622: CALL_OW 44
33626: PPUSH
33627: LD_VAR 0 4
33631: PPUSH
33632: LD_VAR 0 5
33636: PPUSH
33637: LD_INT 1
33639: PPUSH
33640: CALL_OW 48
// end ;
33644: LD_VAR 0 6
33648: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33649: LD_INT 0
33651: PPUSH
33652: PPUSH
// uc_side := your_side ;
33653: LD_ADDR_OWVAR 20
33657: PUSH
33658: LD_OWVAR 2
33662: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33663: LD_VAR 0 1
33667: PUSH
33668: LD_INT 1
33670: PUSH
33671: LD_INT 2
33673: PUSH
33674: LD_INT 3
33676: PUSH
33677: LD_INT 4
33679: PUSH
33680: LD_INT 5
33682: PUSH
33683: EMPTY
33684: LIST
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: IN
33690: IFFALSE 33702
// uc_nation := nation_american else
33692: LD_ADDR_OWVAR 21
33696: PUSH
33697: LD_INT 1
33699: ST_TO_ADDR
33700: GO 33745
// if chassis in [ 11 , 12 , 13 , 14 ] then
33702: LD_VAR 0 1
33706: PUSH
33707: LD_INT 11
33709: PUSH
33710: LD_INT 12
33712: PUSH
33713: LD_INT 13
33715: PUSH
33716: LD_INT 14
33718: PUSH
33719: EMPTY
33720: LIST
33721: LIST
33722: LIST
33723: LIST
33724: IN
33725: IFFALSE 33737
// uc_nation := nation_arabian else
33727: LD_ADDR_OWVAR 21
33731: PUSH
33732: LD_INT 2
33734: ST_TO_ADDR
33735: GO 33745
// uc_nation := nation_russian ;
33737: LD_ADDR_OWVAR 21
33741: PUSH
33742: LD_INT 3
33744: ST_TO_ADDR
// vc_chassis := chassis ;
33745: LD_ADDR_OWVAR 37
33749: PUSH
33750: LD_VAR 0 1
33754: ST_TO_ADDR
// vc_engine := engine ;
33755: LD_ADDR_OWVAR 39
33759: PUSH
33760: LD_VAR 0 2
33764: ST_TO_ADDR
// vc_control := control ;
33765: LD_ADDR_OWVAR 38
33769: PUSH
33770: LD_VAR 0 3
33774: ST_TO_ADDR
// vc_weapon := weapon ;
33775: LD_ADDR_OWVAR 40
33779: PUSH
33780: LD_VAR 0 4
33784: ST_TO_ADDR
// un := CreateVehicle ;
33785: LD_ADDR_VAR 0 8
33789: PUSH
33790: CALL_OW 45
33794: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33795: LD_VAR 0 8
33799: PPUSH
33800: LD_INT 0
33802: PPUSH
33803: LD_INT 5
33805: PPUSH
33806: CALL_OW 12
33810: PPUSH
33811: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33815: LD_VAR 0 8
33819: PPUSH
33820: LD_VAR 0 5
33824: PPUSH
33825: LD_VAR 0 6
33829: PPUSH
33830: LD_INT 1
33832: PPUSH
33833: CALL_OW 48
// end ;
33837: LD_VAR 0 7
33841: RET
// export hInvincible ; every 1 do
33842: GO 33844
33844: DISABLE
// hInvincible := [ ] ;
33845: LD_ADDR_EXP 118
33849: PUSH
33850: EMPTY
33851: ST_TO_ADDR
33852: END
// every 10 do var i ;
33853: GO 33855
33855: DISABLE
33856: LD_INT 0
33858: PPUSH
// begin enable ;
33859: ENABLE
// if not hInvincible then
33860: LD_EXP 118
33864: NOT
33865: IFFALSE 33869
// exit ;
33867: GO 33913
// for i in hInvincible do
33869: LD_ADDR_VAR 0 1
33873: PUSH
33874: LD_EXP 118
33878: PUSH
33879: FOR_IN
33880: IFFALSE 33911
// if GetLives ( i ) < 1000 then
33882: LD_VAR 0 1
33886: PPUSH
33887: CALL_OW 256
33891: PUSH
33892: LD_INT 1000
33894: LESS
33895: IFFALSE 33909
// SetLives ( i , 1000 ) ;
33897: LD_VAR 0 1
33901: PPUSH
33902: LD_INT 1000
33904: PPUSH
33905: CALL_OW 234
33909: GO 33879
33911: POP
33912: POP
// end ;
33913: PPOPN 1
33915: END
// export function hHackInvincible ; var i ; begin
33916: LD_INT 0
33918: PPUSH
33919: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33920: LD_ADDR_VAR 0 2
33924: PUSH
33925: LD_INT 2
33927: PUSH
33928: LD_INT 21
33930: PUSH
33931: LD_INT 1
33933: PUSH
33934: EMPTY
33935: LIST
33936: LIST
33937: PUSH
33938: LD_INT 21
33940: PUSH
33941: LD_INT 2
33943: PUSH
33944: EMPTY
33945: LIST
33946: LIST
33947: PUSH
33948: EMPTY
33949: LIST
33950: LIST
33951: LIST
33952: PPUSH
33953: CALL_OW 69
33957: PUSH
33958: FOR_IN
33959: IFFALSE 34020
// if IsSelected ( i ) then
33961: LD_VAR 0 2
33965: PPUSH
33966: CALL_OW 306
33970: IFFALSE 34018
// begin if i in hInvincible then
33972: LD_VAR 0 2
33976: PUSH
33977: LD_EXP 118
33981: IN
33982: IFFALSE 34002
// hInvincible := hInvincible diff i else
33984: LD_ADDR_EXP 118
33988: PUSH
33989: LD_EXP 118
33993: PUSH
33994: LD_VAR 0 2
33998: DIFF
33999: ST_TO_ADDR
34000: GO 34018
// hInvincible := hInvincible union i ;
34002: LD_ADDR_EXP 118
34006: PUSH
34007: LD_EXP 118
34011: PUSH
34012: LD_VAR 0 2
34016: UNION
34017: ST_TO_ADDR
// end ;
34018: GO 33958
34020: POP
34021: POP
// end ;
34022: LD_VAR 0 1
34026: RET
// export function hHackInvisible ; var i , j ; begin
34027: LD_INT 0
34029: PPUSH
34030: PPUSH
34031: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34032: LD_ADDR_VAR 0 2
34036: PUSH
34037: LD_INT 21
34039: PUSH
34040: LD_INT 1
34042: PUSH
34043: EMPTY
34044: LIST
34045: LIST
34046: PPUSH
34047: CALL_OW 69
34051: PUSH
34052: FOR_IN
34053: IFFALSE 34077
// if IsSelected ( i ) then
34055: LD_VAR 0 2
34059: PPUSH
34060: CALL_OW 306
34064: IFFALSE 34075
// ComForceInvisible ( i ) ;
34066: LD_VAR 0 2
34070: PPUSH
34071: CALL_OW 496
34075: GO 34052
34077: POP
34078: POP
// end ;
34079: LD_VAR 0 1
34083: RET
// export function hHackChangeYourSide ; begin
34084: LD_INT 0
34086: PPUSH
// if your_side = 8 then
34087: LD_OWVAR 2
34091: PUSH
34092: LD_INT 8
34094: EQUAL
34095: IFFALSE 34107
// your_side := 0 else
34097: LD_ADDR_OWVAR 2
34101: PUSH
34102: LD_INT 0
34104: ST_TO_ADDR
34105: GO 34121
// your_side := your_side + 1 ;
34107: LD_ADDR_OWVAR 2
34111: PUSH
34112: LD_OWVAR 2
34116: PUSH
34117: LD_INT 1
34119: PLUS
34120: ST_TO_ADDR
// end ;
34121: LD_VAR 0 1
34125: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34126: LD_INT 0
34128: PPUSH
34129: PPUSH
34130: PPUSH
// for i in all_units do
34131: LD_ADDR_VAR 0 2
34135: PUSH
34136: LD_OWVAR 3
34140: PUSH
34141: FOR_IN
34142: IFFALSE 34220
// if IsSelected ( i ) then
34144: LD_VAR 0 2
34148: PPUSH
34149: CALL_OW 306
34153: IFFALSE 34218
// begin j := GetSide ( i ) ;
34155: LD_ADDR_VAR 0 3
34159: PUSH
34160: LD_VAR 0 2
34164: PPUSH
34165: CALL_OW 255
34169: ST_TO_ADDR
// if j = 8 then
34170: LD_VAR 0 3
34174: PUSH
34175: LD_INT 8
34177: EQUAL
34178: IFFALSE 34190
// j := 0 else
34180: LD_ADDR_VAR 0 3
34184: PUSH
34185: LD_INT 0
34187: ST_TO_ADDR
34188: GO 34204
// j := j + 1 ;
34190: LD_ADDR_VAR 0 3
34194: PUSH
34195: LD_VAR 0 3
34199: PUSH
34200: LD_INT 1
34202: PLUS
34203: ST_TO_ADDR
// SetSide ( i , j ) ;
34204: LD_VAR 0 2
34208: PPUSH
34209: LD_VAR 0 3
34213: PPUSH
34214: CALL_OW 235
// end ;
34218: GO 34141
34220: POP
34221: POP
// end ;
34222: LD_VAR 0 1
34226: RET
// export function hHackFog ; begin
34227: LD_INT 0
34229: PPUSH
// FogOff ( true ) ;
34230: LD_INT 1
34232: PPUSH
34233: CALL_OW 344
// end ;
34237: LD_VAR 0 1
34241: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34242: LD_INT 0
34244: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34245: LD_VAR 0 1
34249: PPUSH
34250: LD_VAR 0 2
34254: PPUSH
34255: LD_VAR 0 3
34259: PPUSH
34260: LD_INT 1
34262: PPUSH
34263: LD_INT 1
34265: PPUSH
34266: CALL_OW 483
// CenterOnXY ( x , y ) ;
34270: LD_VAR 0 2
34274: PPUSH
34275: LD_VAR 0 3
34279: PPUSH
34280: CALL_OW 84
// end ;
34284: LD_VAR 0 4
34288: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34289: LD_INT 0
34291: PPUSH
34292: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34293: LD_VAR 0 1
34297: NOT
34298: PUSH
34299: LD_VAR 0 2
34303: PPUSH
34304: LD_VAR 0 3
34308: PPUSH
34309: CALL_OW 488
34313: NOT
34314: OR
34315: PUSH
34316: LD_VAR 0 1
34320: PPUSH
34321: CALL_OW 266
34325: PUSH
34326: LD_INT 3
34328: NONEQUAL
34329: PUSH
34330: LD_VAR 0 1
34334: PPUSH
34335: CALL_OW 247
34339: PUSH
34340: LD_INT 1
34342: EQUAL
34343: NOT
34344: AND
34345: OR
34346: IFFALSE 34350
// exit ;
34348: GO 34499
// if GetType ( factory ) = unit_human then
34350: LD_VAR 0 1
34354: PPUSH
34355: CALL_OW 247
34359: PUSH
34360: LD_INT 1
34362: EQUAL
34363: IFFALSE 34380
// factory := IsInUnit ( factory ) ;
34365: LD_ADDR_VAR 0 1
34369: PUSH
34370: LD_VAR 0 1
34374: PPUSH
34375: CALL_OW 310
34379: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34380: LD_VAR 0 1
34384: PPUSH
34385: CALL_OW 266
34389: PUSH
34390: LD_INT 3
34392: NONEQUAL
34393: IFFALSE 34397
// exit ;
34395: GO 34499
// if HexInfo ( x , y ) = factory then
34397: LD_VAR 0 2
34401: PPUSH
34402: LD_VAR 0 3
34406: PPUSH
34407: CALL_OW 428
34411: PUSH
34412: LD_VAR 0 1
34416: EQUAL
34417: IFFALSE 34444
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
34419: LD_ADDR_EXP 119
34423: PUSH
34424: LD_EXP 119
34428: PPUSH
34429: LD_VAR 0 1
34433: PPUSH
34434: LD_INT 0
34436: PPUSH
34437: CALL_OW 1
34441: ST_TO_ADDR
34442: GO 34495
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
34444: LD_ADDR_EXP 119
34448: PUSH
34449: LD_EXP 119
34453: PPUSH
34454: LD_VAR 0 1
34458: PPUSH
34459: LD_VAR 0 1
34463: PPUSH
34464: CALL_OW 255
34468: PUSH
34469: LD_VAR 0 1
34473: PUSH
34474: LD_VAR 0 2
34478: PUSH
34479: LD_VAR 0 3
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: LIST
34488: LIST
34489: PPUSH
34490: CALL_OW 1
34494: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34495: CALL 34504 0 0
// end ;
34499: LD_VAR 0 4
34503: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34504: LD_INT 0
34506: PPUSH
34507: PPUSH
34508: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34509: LD_STRING resetFactoryWaypoint();
34511: PPUSH
34512: CALL_OW 559
// if factoryWaypoints then
34516: LD_EXP 119
34520: IFFALSE 34646
// begin list := PrepareArray ( factoryWaypoints ) ;
34522: LD_ADDR_VAR 0 3
34526: PUSH
34527: LD_EXP 119
34531: PPUSH
34532: CALL 81943 0 1
34536: ST_TO_ADDR
// for i := 1 to list do
34537: LD_ADDR_VAR 0 2
34541: PUSH
34542: DOUBLE
34543: LD_INT 1
34545: DEC
34546: ST_TO_ADDR
34547: LD_VAR 0 3
34551: PUSH
34552: FOR_TO
34553: IFFALSE 34644
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34555: LD_STRING setFactoryWaypointXY(
34557: PUSH
34558: LD_VAR 0 3
34562: PUSH
34563: LD_VAR 0 2
34567: ARRAY
34568: PUSH
34569: LD_INT 1
34571: ARRAY
34572: STR
34573: PUSH
34574: LD_STRING ,
34576: STR
34577: PUSH
34578: LD_VAR 0 3
34582: PUSH
34583: LD_VAR 0 2
34587: ARRAY
34588: PUSH
34589: LD_INT 2
34591: ARRAY
34592: STR
34593: PUSH
34594: LD_STRING ,
34596: STR
34597: PUSH
34598: LD_VAR 0 3
34602: PUSH
34603: LD_VAR 0 2
34607: ARRAY
34608: PUSH
34609: LD_INT 3
34611: ARRAY
34612: STR
34613: PUSH
34614: LD_STRING ,
34616: STR
34617: PUSH
34618: LD_VAR 0 3
34622: PUSH
34623: LD_VAR 0 2
34627: ARRAY
34628: PUSH
34629: LD_INT 4
34631: ARRAY
34632: STR
34633: PUSH
34634: LD_STRING )
34636: STR
34637: PPUSH
34638: CALL_OW 559
34642: GO 34552
34644: POP
34645: POP
// end ; end ;
34646: LD_VAR 0 1
34650: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34651: LD_INT 0
34653: PPUSH
// if HexInfo ( x , y ) = warehouse then
34654: LD_VAR 0 2
34658: PPUSH
34659: LD_VAR 0 3
34663: PPUSH
34664: CALL_OW 428
34668: PUSH
34669: LD_VAR 0 1
34673: EQUAL
34674: IFFALSE 34701
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34676: LD_ADDR_EXP 120
34680: PUSH
34681: LD_EXP 120
34685: PPUSH
34686: LD_VAR 0 1
34690: PPUSH
34691: LD_INT 0
34693: PPUSH
34694: CALL_OW 1
34698: ST_TO_ADDR
34699: GO 34752
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34701: LD_ADDR_EXP 120
34705: PUSH
34706: LD_EXP 120
34710: PPUSH
34711: LD_VAR 0 1
34715: PPUSH
34716: LD_VAR 0 1
34720: PPUSH
34721: CALL_OW 255
34725: PUSH
34726: LD_VAR 0 1
34730: PUSH
34731: LD_VAR 0 2
34735: PUSH
34736: LD_VAR 0 3
34740: PUSH
34741: EMPTY
34742: LIST
34743: LIST
34744: LIST
34745: LIST
34746: PPUSH
34747: CALL_OW 1
34751: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
34752: CALL 34761 0 0
// end ;
34756: LD_VAR 0 4
34760: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
34761: LD_INT 0
34763: PPUSH
34764: PPUSH
34765: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
34766: LD_STRING resetWarehouseGatheringPoints();
34768: PPUSH
34769: CALL_OW 559
// if warehouseGatheringPoints then
34773: LD_EXP 120
34777: IFFALSE 34903
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
34779: LD_ADDR_VAR 0 3
34783: PUSH
34784: LD_EXP 120
34788: PPUSH
34789: CALL 81943 0 1
34793: ST_TO_ADDR
// for i := 1 to list do
34794: LD_ADDR_VAR 0 2
34798: PUSH
34799: DOUBLE
34800: LD_INT 1
34802: DEC
34803: ST_TO_ADDR
34804: LD_VAR 0 3
34808: PUSH
34809: FOR_TO
34810: IFFALSE 34901
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34812: LD_STRING setWarehouseGatheringPointXY(
34814: PUSH
34815: LD_VAR 0 3
34819: PUSH
34820: LD_VAR 0 2
34824: ARRAY
34825: PUSH
34826: LD_INT 1
34828: ARRAY
34829: STR
34830: PUSH
34831: LD_STRING ,
34833: STR
34834: PUSH
34835: LD_VAR 0 3
34839: PUSH
34840: LD_VAR 0 2
34844: ARRAY
34845: PUSH
34846: LD_INT 2
34848: ARRAY
34849: STR
34850: PUSH
34851: LD_STRING ,
34853: STR
34854: PUSH
34855: LD_VAR 0 3
34859: PUSH
34860: LD_VAR 0 2
34864: ARRAY
34865: PUSH
34866: LD_INT 3
34868: ARRAY
34869: STR
34870: PUSH
34871: LD_STRING ,
34873: STR
34874: PUSH
34875: LD_VAR 0 3
34879: PUSH
34880: LD_VAR 0 2
34884: ARRAY
34885: PUSH
34886: LD_INT 4
34888: ARRAY
34889: STR
34890: PUSH
34891: LD_STRING )
34893: STR
34894: PPUSH
34895: CALL_OW 559
34899: GO 34809
34901: POP
34902: POP
// end ; end ;
34903: LD_VAR 0 1
34907: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
34908: LD_EXP 120
34912: IFFALSE 35597
34914: GO 34916
34916: DISABLE
34917: LD_INT 0
34919: PPUSH
34920: PPUSH
34921: PPUSH
34922: PPUSH
34923: PPUSH
34924: PPUSH
34925: PPUSH
34926: PPUSH
34927: PPUSH
// begin enable ;
34928: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
34929: LD_ADDR_VAR 0 3
34933: PUSH
34934: LD_EXP 120
34938: PPUSH
34939: CALL 81943 0 1
34943: ST_TO_ADDR
// if not list then
34944: LD_VAR 0 3
34948: NOT
34949: IFFALSE 34953
// exit ;
34951: GO 35597
// for i := 1 to list do
34953: LD_ADDR_VAR 0 1
34957: PUSH
34958: DOUBLE
34959: LD_INT 1
34961: DEC
34962: ST_TO_ADDR
34963: LD_VAR 0 3
34967: PUSH
34968: FOR_TO
34969: IFFALSE 35595
// begin depot := list [ i ] [ 2 ] ;
34971: LD_ADDR_VAR 0 8
34975: PUSH
34976: LD_VAR 0 3
34980: PUSH
34981: LD_VAR 0 1
34985: ARRAY
34986: PUSH
34987: LD_INT 2
34989: ARRAY
34990: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
34991: LD_ADDR_VAR 0 5
34995: PUSH
34996: LD_VAR 0 3
35000: PUSH
35001: LD_VAR 0 1
35005: ARRAY
35006: PUSH
35007: LD_INT 1
35009: ARRAY
35010: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
35011: LD_VAR 0 8
35015: PPUSH
35016: CALL_OW 301
35020: PUSH
35021: LD_VAR 0 5
35025: PUSH
35026: LD_VAR 0 8
35030: PPUSH
35031: CALL_OW 255
35035: NONEQUAL
35036: OR
35037: IFFALSE 35066
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
35039: LD_ADDR_EXP 120
35043: PUSH
35044: LD_EXP 120
35048: PPUSH
35049: LD_VAR 0 8
35053: PPUSH
35054: LD_INT 0
35056: PPUSH
35057: CALL_OW 1
35061: ST_TO_ADDR
// exit ;
35062: POP
35063: POP
35064: GO 35597
// end ; x := list [ i ] [ 3 ] ;
35066: LD_ADDR_VAR 0 6
35070: PUSH
35071: LD_VAR 0 3
35075: PUSH
35076: LD_VAR 0 1
35080: ARRAY
35081: PUSH
35082: LD_INT 3
35084: ARRAY
35085: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
35086: LD_ADDR_VAR 0 7
35090: PUSH
35091: LD_VAR 0 3
35095: PUSH
35096: LD_VAR 0 1
35100: ARRAY
35101: PUSH
35102: LD_INT 4
35104: ARRAY
35105: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
35106: LD_ADDR_VAR 0 9
35110: PUSH
35111: LD_VAR 0 6
35115: PPUSH
35116: LD_VAR 0 7
35120: PPUSH
35121: LD_INT 16
35123: PPUSH
35124: CALL 80531 0 3
35128: ST_TO_ADDR
// if not cratesNearbyPoint then
35129: LD_VAR 0 9
35133: NOT
35134: IFFALSE 35140
// exit ;
35136: POP
35137: POP
35138: GO 35597
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35140: LD_ADDR_VAR 0 4
35144: PUSH
35145: LD_INT 22
35147: PUSH
35148: LD_VAR 0 5
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: PUSH
35157: LD_INT 3
35159: PUSH
35160: LD_INT 60
35162: PUSH
35163: EMPTY
35164: LIST
35165: PUSH
35166: EMPTY
35167: LIST
35168: LIST
35169: PUSH
35170: LD_INT 91
35172: PUSH
35173: LD_VAR 0 8
35177: PUSH
35178: LD_INT 6
35180: PUSH
35181: EMPTY
35182: LIST
35183: LIST
35184: LIST
35185: PUSH
35186: LD_INT 2
35188: PUSH
35189: LD_INT 25
35191: PUSH
35192: LD_INT 2
35194: PUSH
35195: EMPTY
35196: LIST
35197: LIST
35198: PUSH
35199: LD_INT 25
35201: PUSH
35202: LD_INT 16
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: PUSH
35209: EMPTY
35210: LIST
35211: LIST
35212: LIST
35213: PUSH
35214: EMPTY
35215: LIST
35216: LIST
35217: LIST
35218: LIST
35219: PPUSH
35220: CALL_OW 69
35224: PUSH
35225: LD_VAR 0 8
35229: PPUSH
35230: CALL_OW 313
35234: PPUSH
35235: LD_INT 3
35237: PUSH
35238: LD_INT 60
35240: PUSH
35241: EMPTY
35242: LIST
35243: PUSH
35244: EMPTY
35245: LIST
35246: LIST
35247: PUSH
35248: LD_INT 2
35250: PUSH
35251: LD_INT 25
35253: PUSH
35254: LD_INT 2
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: PUSH
35261: LD_INT 25
35263: PUSH
35264: LD_INT 16
35266: PUSH
35267: EMPTY
35268: LIST
35269: LIST
35270: PUSH
35271: EMPTY
35272: LIST
35273: LIST
35274: LIST
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: PPUSH
35280: CALL_OW 72
35284: UNION
35285: ST_TO_ADDR
// if tmp then
35286: LD_VAR 0 4
35290: IFFALSE 35370
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35292: LD_ADDR_VAR 0 4
35296: PUSH
35297: LD_VAR 0 4
35301: PPUSH
35302: LD_INT 3
35304: PPUSH
35305: CALL 78500 0 2
35309: ST_TO_ADDR
// for j in tmp do
35310: LD_ADDR_VAR 0 2
35314: PUSH
35315: LD_VAR 0 4
35319: PUSH
35320: FOR_IN
35321: IFFALSE 35364
// begin if IsInUnit ( j ) then
35323: LD_VAR 0 2
35327: PPUSH
35328: CALL_OW 310
35332: IFFALSE 35343
// ComExit ( j ) ;
35334: LD_VAR 0 2
35338: PPUSH
35339: CALL 78583 0 1
// AddComCollect ( j , x , y ) ;
35343: LD_VAR 0 2
35347: PPUSH
35348: LD_VAR 0 6
35352: PPUSH
35353: LD_VAR 0 7
35357: PPUSH
35358: CALL_OW 177
// end ;
35362: GO 35320
35364: POP
35365: POP
// exit ;
35366: POP
35367: POP
35368: GO 35597
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35370: LD_ADDR_VAR 0 4
35374: PUSH
35375: LD_INT 22
35377: PUSH
35378: LD_VAR 0 5
35382: PUSH
35383: EMPTY
35384: LIST
35385: LIST
35386: PUSH
35387: LD_INT 91
35389: PUSH
35390: LD_VAR 0 8
35394: PUSH
35395: LD_INT 8
35397: PUSH
35398: EMPTY
35399: LIST
35400: LIST
35401: LIST
35402: PUSH
35403: LD_INT 2
35405: PUSH
35406: LD_INT 34
35408: PUSH
35409: LD_INT 12
35411: PUSH
35412: EMPTY
35413: LIST
35414: LIST
35415: PUSH
35416: LD_INT 34
35418: PUSH
35419: LD_INT 51
35421: PUSH
35422: EMPTY
35423: LIST
35424: LIST
35425: PUSH
35426: LD_INT 34
35428: PUSH
35429: LD_INT 32
35431: PUSH
35432: EMPTY
35433: LIST
35434: LIST
35435: PUSH
35436: LD_INT 34
35438: PUSH
35439: LD_INT 89
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: PUSH
35446: EMPTY
35447: LIST
35448: LIST
35449: LIST
35450: LIST
35451: LIST
35452: PUSH
35453: EMPTY
35454: LIST
35455: LIST
35456: LIST
35457: PPUSH
35458: CALL_OW 69
35462: ST_TO_ADDR
// if tmp then
35463: LD_VAR 0 4
35467: IFFALSE 35593
// begin for j in tmp do
35469: LD_ADDR_VAR 0 2
35473: PUSH
35474: LD_VAR 0 4
35478: PUSH
35479: FOR_IN
35480: IFFALSE 35591
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35482: LD_VAR 0 2
35486: PPUSH
35487: CALL_OW 262
35491: PUSH
35492: LD_INT 3
35494: EQUAL
35495: PUSH
35496: LD_VAR 0 2
35500: PPUSH
35501: CALL_OW 261
35505: PUSH
35506: LD_INT 20
35508: GREATER
35509: OR
35510: PUSH
35511: LD_VAR 0 2
35515: PPUSH
35516: CALL_OW 314
35520: NOT
35521: AND
35522: PUSH
35523: LD_VAR 0 2
35527: PPUSH
35528: CALL_OW 263
35532: PUSH
35533: LD_INT 1
35535: NONEQUAL
35536: PUSH
35537: LD_VAR 0 2
35541: PPUSH
35542: CALL_OW 311
35546: OR
35547: AND
35548: IFFALSE 35589
// begin ComCollect ( j , x , y ) ;
35550: LD_VAR 0 2
35554: PPUSH
35555: LD_VAR 0 6
35559: PPUSH
35560: LD_VAR 0 7
35564: PPUSH
35565: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35569: LD_VAR 0 2
35573: PPUSH
35574: LD_VAR 0 8
35578: PPUSH
35579: CALL_OW 172
// exit ;
35583: POP
35584: POP
35585: POP
35586: POP
35587: GO 35597
// end ;
35589: GO 35479
35591: POP
35592: POP
// end ; end ;
35593: GO 34968
35595: POP
35596: POP
// end ; end_of_file
35597: PPOPN 9
35599: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
35600: LD_INT 0
35602: PPUSH
35603: PPUSH
35604: PPUSH
35605: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
35606: LD_VAR 0 1
35610: PPUSH
35611: CALL_OW 264
35615: PUSH
35616: LD_INT 91
35618: EQUAL
35619: IFFALSE 35691
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
35621: LD_INT 68
35623: PPUSH
35624: LD_VAR 0 1
35628: PPUSH
35629: CALL_OW 255
35633: PPUSH
35634: CALL_OW 321
35638: PUSH
35639: LD_INT 2
35641: EQUAL
35642: IFFALSE 35654
// eff := 70 else
35644: LD_ADDR_VAR 0 4
35648: PUSH
35649: LD_INT 70
35651: ST_TO_ADDR
35652: GO 35662
// eff := 30 ;
35654: LD_ADDR_VAR 0 4
35658: PUSH
35659: LD_INT 30
35661: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35662: LD_VAR 0 1
35666: PPUSH
35667: CALL_OW 250
35671: PPUSH
35672: LD_VAR 0 1
35676: PPUSH
35677: CALL_OW 251
35681: PPUSH
35682: LD_VAR 0 4
35686: PPUSH
35687: CALL_OW 495
// end ; end ;
35691: LD_VAR 0 2
35695: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35696: LD_INT 0
35698: PPUSH
// end ;
35699: LD_VAR 0 4
35703: RET
// export function SOS_Command ( cmd ) ; begin
35704: LD_INT 0
35706: PPUSH
// end ;
35707: LD_VAR 0 2
35711: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35712: LD_INT 0
35714: PPUSH
// end ;
35715: LD_VAR 0 6
35719: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
35720: LD_INT 0
35722: PPUSH
35723: PPUSH
// if not vehicle or not factory then
35724: LD_VAR 0 1
35728: NOT
35729: PUSH
35730: LD_VAR 0 2
35734: NOT
35735: OR
35736: IFFALSE 35740
// exit ;
35738: GO 35971
// if factoryWaypoints >= factory then
35740: LD_EXP 119
35744: PUSH
35745: LD_VAR 0 2
35749: GREATEREQUAL
35750: IFFALSE 35971
// if factoryWaypoints [ factory ] then
35752: LD_EXP 119
35756: PUSH
35757: LD_VAR 0 2
35761: ARRAY
35762: IFFALSE 35971
// begin if GetControl ( vehicle ) = control_manual then
35764: LD_VAR 0 1
35768: PPUSH
35769: CALL_OW 263
35773: PUSH
35774: LD_INT 1
35776: EQUAL
35777: IFFALSE 35858
// begin driver := IsDrivenBy ( vehicle ) ;
35779: LD_ADDR_VAR 0 4
35783: PUSH
35784: LD_VAR 0 1
35788: PPUSH
35789: CALL_OW 311
35793: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35794: LD_VAR 0 4
35798: PPUSH
35799: LD_EXP 119
35803: PUSH
35804: LD_VAR 0 2
35808: ARRAY
35809: PUSH
35810: LD_INT 3
35812: ARRAY
35813: PPUSH
35814: LD_EXP 119
35818: PUSH
35819: LD_VAR 0 2
35823: ARRAY
35824: PUSH
35825: LD_INT 4
35827: ARRAY
35828: PPUSH
35829: CALL_OW 171
// AddComExitVehicle ( driver ) ;
35833: LD_VAR 0 4
35837: PPUSH
35838: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
35842: LD_VAR 0 4
35846: PPUSH
35847: LD_VAR 0 2
35851: PPUSH
35852: CALL_OW 180
// end else
35856: GO 35971
// if GetControl ( vehicle ) = control_remote then
35858: LD_VAR 0 1
35862: PPUSH
35863: CALL_OW 263
35867: PUSH
35868: LD_INT 2
35870: EQUAL
35871: IFFALSE 35932
// begin wait ( 0 0$2 ) ;
35873: LD_INT 70
35875: PPUSH
35876: CALL_OW 67
// if Connect ( vehicle ) then
35880: LD_VAR 0 1
35884: PPUSH
35885: CALL 48802 0 1
35889: IFFALSE 35930
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35891: LD_VAR 0 1
35895: PPUSH
35896: LD_EXP 119
35900: PUSH
35901: LD_VAR 0 2
35905: ARRAY
35906: PUSH
35907: LD_INT 3
35909: ARRAY
35910: PPUSH
35911: LD_EXP 119
35915: PUSH
35916: LD_VAR 0 2
35920: ARRAY
35921: PUSH
35922: LD_INT 4
35924: ARRAY
35925: PPUSH
35926: CALL_OW 171
// end else
35930: GO 35971
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35932: LD_VAR 0 1
35936: PPUSH
35937: LD_EXP 119
35941: PUSH
35942: LD_VAR 0 2
35946: ARRAY
35947: PUSH
35948: LD_INT 3
35950: ARRAY
35951: PPUSH
35952: LD_EXP 119
35956: PUSH
35957: LD_VAR 0 2
35961: ARRAY
35962: PUSH
35963: LD_INT 4
35965: ARRAY
35966: PPUSH
35967: CALL_OW 171
// end ; end ;
35971: LD_VAR 0 3
35975: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
35976: LD_INT 0
35978: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
35979: LD_VAR 0 1
35983: PUSH
35984: LD_INT 250
35986: EQUAL
35987: PUSH
35988: LD_VAR 0 2
35992: PPUSH
35993: CALL_OW 264
35997: PUSH
35998: LD_INT 81
36000: EQUAL
36001: AND
36002: IFFALSE 36023
// MinerPlaceMine ( unit , x , y ) ;
36004: LD_VAR 0 2
36008: PPUSH
36009: LD_VAR 0 4
36013: PPUSH
36014: LD_VAR 0 5
36018: PPUSH
36019: CALL 39013 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
36023: LD_VAR 0 1
36027: PUSH
36028: LD_INT 251
36030: EQUAL
36031: PUSH
36032: LD_VAR 0 2
36036: PPUSH
36037: CALL_OW 264
36041: PUSH
36042: LD_INT 81
36044: EQUAL
36045: AND
36046: IFFALSE 36067
// MinerDetonateMine ( unit , x , y ) ;
36048: LD_VAR 0 2
36052: PPUSH
36053: LD_VAR 0 4
36057: PPUSH
36058: LD_VAR 0 5
36062: PPUSH
36063: CALL 39288 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
36067: LD_VAR 0 1
36071: PUSH
36072: LD_INT 252
36074: EQUAL
36075: PUSH
36076: LD_VAR 0 2
36080: PPUSH
36081: CALL_OW 264
36085: PUSH
36086: LD_INT 81
36088: EQUAL
36089: AND
36090: IFFALSE 36111
// MinerCreateMinefield ( unit , x , y ) ;
36092: LD_VAR 0 2
36096: PPUSH
36097: LD_VAR 0 4
36101: PPUSH
36102: LD_VAR 0 5
36106: PPUSH
36107: CALL 39705 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
36111: LD_VAR 0 1
36115: PUSH
36116: LD_INT 253
36118: EQUAL
36119: PUSH
36120: LD_VAR 0 2
36124: PPUSH
36125: CALL_OW 257
36129: PUSH
36130: LD_INT 5
36132: EQUAL
36133: AND
36134: IFFALSE 36155
// ComBinocular ( unit , x , y ) ;
36136: LD_VAR 0 2
36140: PPUSH
36141: LD_VAR 0 4
36145: PPUSH
36146: LD_VAR 0 5
36150: PPUSH
36151: CALL 40074 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36155: LD_VAR 0 1
36159: PUSH
36160: LD_INT 254
36162: EQUAL
36163: PUSH
36164: LD_VAR 0 2
36168: PPUSH
36169: CALL_OW 264
36173: PUSH
36174: LD_INT 99
36176: EQUAL
36177: AND
36178: PUSH
36179: LD_VAR 0 3
36183: PPUSH
36184: CALL_OW 263
36188: PUSH
36189: LD_INT 3
36191: EQUAL
36192: AND
36193: IFFALSE 36209
// HackDestroyVehicle ( unit , selectedUnit ) ;
36195: LD_VAR 0 2
36199: PPUSH
36200: LD_VAR 0 3
36204: PPUSH
36205: CALL 38377 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36209: LD_VAR 0 1
36213: PUSH
36214: LD_INT 255
36216: EQUAL
36217: PUSH
36218: LD_VAR 0 2
36222: PPUSH
36223: CALL_OW 264
36227: PUSH
36228: LD_INT 14
36230: PUSH
36231: LD_INT 53
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: IN
36238: AND
36239: PUSH
36240: LD_VAR 0 4
36244: PPUSH
36245: LD_VAR 0 5
36249: PPUSH
36250: CALL_OW 488
36254: AND
36255: IFFALSE 36279
// CutTreeXYR ( unit , x , y , 12 ) ;
36257: LD_VAR 0 2
36261: PPUSH
36262: LD_VAR 0 4
36266: PPUSH
36267: LD_VAR 0 5
36271: PPUSH
36272: LD_INT 12
36274: PPUSH
36275: CALL 36374 0 4
// if cmd = 256 then
36279: LD_VAR 0 1
36283: PUSH
36284: LD_INT 256
36286: EQUAL
36287: IFFALSE 36308
// SetFactoryWaypoint ( unit , x , y ) ;
36289: LD_VAR 0 2
36293: PPUSH
36294: LD_VAR 0 4
36298: PPUSH
36299: LD_VAR 0 5
36303: PPUSH
36304: CALL 34289 0 3
// if cmd = 257 then
36308: LD_VAR 0 1
36312: PUSH
36313: LD_INT 257
36315: EQUAL
36316: IFFALSE 36337
// SetWarehouseGatheringPoint ( unit , x , y ) ;
36318: LD_VAR 0 2
36322: PPUSH
36323: LD_VAR 0 4
36327: PPUSH
36328: LD_VAR 0 5
36332: PPUSH
36333: CALL 34651 0 3
// if cmd = 258 then
36337: LD_VAR 0 1
36341: PUSH
36342: LD_INT 258
36344: EQUAL
36345: IFFALSE 36369
// BurnTreeXYR ( unit , x , y , 8 ) ;
36347: LD_VAR 0 2
36351: PPUSH
36352: LD_VAR 0 4
36356: PPUSH
36357: LD_VAR 0 5
36361: PPUSH
36362: LD_INT 8
36364: PPUSH
36365: CALL 36768 0 4
// end ;
36369: LD_VAR 0 6
36373: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36374: LD_INT 0
36376: PPUSH
36377: PPUSH
36378: PPUSH
36379: PPUSH
36380: PPUSH
36381: PPUSH
36382: PPUSH
36383: PPUSH
36384: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
36385: LD_VAR 0 1
36389: PPUSH
36390: CALL_OW 302
36394: NOT
36395: PUSH
36396: LD_VAR 0 2
36400: PPUSH
36401: LD_VAR 0 3
36405: PPUSH
36406: CALL_OW 488
36410: NOT
36411: OR
36412: PUSH
36413: LD_VAR 0 4
36417: NOT
36418: OR
36419: IFFALSE 36423
// exit ;
36421: GO 36763
// list := [ ] ;
36423: LD_ADDR_VAR 0 13
36427: PUSH
36428: EMPTY
36429: ST_TO_ADDR
// if x - r < 0 then
36430: LD_VAR 0 2
36434: PUSH
36435: LD_VAR 0 4
36439: MINUS
36440: PUSH
36441: LD_INT 0
36443: LESS
36444: IFFALSE 36456
// min_x := 0 else
36446: LD_ADDR_VAR 0 7
36450: PUSH
36451: LD_INT 0
36453: ST_TO_ADDR
36454: GO 36472
// min_x := x - r ;
36456: LD_ADDR_VAR 0 7
36460: PUSH
36461: LD_VAR 0 2
36465: PUSH
36466: LD_VAR 0 4
36470: MINUS
36471: ST_TO_ADDR
// if y - r < 0 then
36472: LD_VAR 0 3
36476: PUSH
36477: LD_VAR 0 4
36481: MINUS
36482: PUSH
36483: LD_INT 0
36485: LESS
36486: IFFALSE 36498
// min_y := 0 else
36488: LD_ADDR_VAR 0 8
36492: PUSH
36493: LD_INT 0
36495: ST_TO_ADDR
36496: GO 36514
// min_y := y - r ;
36498: LD_ADDR_VAR 0 8
36502: PUSH
36503: LD_VAR 0 3
36507: PUSH
36508: LD_VAR 0 4
36512: MINUS
36513: ST_TO_ADDR
// max_x := x + r ;
36514: LD_ADDR_VAR 0 9
36518: PUSH
36519: LD_VAR 0 2
36523: PUSH
36524: LD_VAR 0 4
36528: PLUS
36529: ST_TO_ADDR
// max_y := y + r ;
36530: LD_ADDR_VAR 0 10
36534: PUSH
36535: LD_VAR 0 3
36539: PUSH
36540: LD_VAR 0 4
36544: PLUS
36545: ST_TO_ADDR
// for _x = min_x to max_x do
36546: LD_ADDR_VAR 0 11
36550: PUSH
36551: DOUBLE
36552: LD_VAR 0 7
36556: DEC
36557: ST_TO_ADDR
36558: LD_VAR 0 9
36562: PUSH
36563: FOR_TO
36564: IFFALSE 36681
// for _y = min_y to max_y do
36566: LD_ADDR_VAR 0 12
36570: PUSH
36571: DOUBLE
36572: LD_VAR 0 8
36576: DEC
36577: ST_TO_ADDR
36578: LD_VAR 0 10
36582: PUSH
36583: FOR_TO
36584: IFFALSE 36677
// begin if not ValidHex ( _x , _y ) then
36586: LD_VAR 0 11
36590: PPUSH
36591: LD_VAR 0 12
36595: PPUSH
36596: CALL_OW 488
36600: NOT
36601: IFFALSE 36605
// continue ;
36603: GO 36583
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36605: LD_VAR 0 11
36609: PPUSH
36610: LD_VAR 0 12
36614: PPUSH
36615: CALL_OW 351
36619: PUSH
36620: LD_VAR 0 11
36624: PPUSH
36625: LD_VAR 0 12
36629: PPUSH
36630: CALL_OW 554
36634: AND
36635: IFFALSE 36675
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36637: LD_ADDR_VAR 0 13
36641: PUSH
36642: LD_VAR 0 13
36646: PPUSH
36647: LD_VAR 0 13
36651: PUSH
36652: LD_INT 1
36654: PLUS
36655: PPUSH
36656: LD_VAR 0 11
36660: PUSH
36661: LD_VAR 0 12
36665: PUSH
36666: EMPTY
36667: LIST
36668: LIST
36669: PPUSH
36670: CALL_OW 2
36674: ST_TO_ADDR
// end ;
36675: GO 36583
36677: POP
36678: POP
36679: GO 36563
36681: POP
36682: POP
// if not list then
36683: LD_VAR 0 13
36687: NOT
36688: IFFALSE 36692
// exit ;
36690: GO 36763
// for i in list do
36692: LD_ADDR_VAR 0 6
36696: PUSH
36697: LD_VAR 0 13
36701: PUSH
36702: FOR_IN
36703: IFFALSE 36761
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
36705: LD_VAR 0 1
36709: PPUSH
36710: LD_STRING M
36712: PUSH
36713: LD_VAR 0 6
36717: PUSH
36718: LD_INT 1
36720: ARRAY
36721: PUSH
36722: LD_VAR 0 6
36726: PUSH
36727: LD_INT 2
36729: ARRAY
36730: PUSH
36731: LD_INT 0
36733: PUSH
36734: LD_INT 0
36736: PUSH
36737: LD_INT 0
36739: PUSH
36740: LD_INT 0
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: LIST
36747: LIST
36748: LIST
36749: LIST
36750: LIST
36751: PUSH
36752: EMPTY
36753: LIST
36754: PPUSH
36755: CALL_OW 447
36759: GO 36702
36761: POP
36762: POP
// end ;
36763: LD_VAR 0 5
36767: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
36768: LD_INT 0
36770: PPUSH
36771: PPUSH
36772: PPUSH
36773: PPUSH
36774: PPUSH
36775: PPUSH
36776: PPUSH
36777: PPUSH
36778: PPUSH
36779: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
36780: LD_VAR 0 1
36784: PPUSH
36785: CALL_OW 302
36789: NOT
36790: PUSH
36791: LD_VAR 0 2
36795: PPUSH
36796: LD_VAR 0 3
36800: PPUSH
36801: CALL_OW 488
36805: NOT
36806: OR
36807: PUSH
36808: LD_VAR 0 4
36812: NOT
36813: OR
36814: IFFALSE 36818
// exit ;
36816: GO 37331
// list := [ ] ;
36818: LD_ADDR_VAR 0 13
36822: PUSH
36823: EMPTY
36824: ST_TO_ADDR
// if x - r < 0 then
36825: LD_VAR 0 2
36829: PUSH
36830: LD_VAR 0 4
36834: MINUS
36835: PUSH
36836: LD_INT 0
36838: LESS
36839: IFFALSE 36851
// min_x := 0 else
36841: LD_ADDR_VAR 0 7
36845: PUSH
36846: LD_INT 0
36848: ST_TO_ADDR
36849: GO 36867
// min_x := x - r ;
36851: LD_ADDR_VAR 0 7
36855: PUSH
36856: LD_VAR 0 2
36860: PUSH
36861: LD_VAR 0 4
36865: MINUS
36866: ST_TO_ADDR
// if y - r < 0 then
36867: LD_VAR 0 3
36871: PUSH
36872: LD_VAR 0 4
36876: MINUS
36877: PUSH
36878: LD_INT 0
36880: LESS
36881: IFFALSE 36893
// min_y := 0 else
36883: LD_ADDR_VAR 0 8
36887: PUSH
36888: LD_INT 0
36890: ST_TO_ADDR
36891: GO 36909
// min_y := y - r ;
36893: LD_ADDR_VAR 0 8
36897: PUSH
36898: LD_VAR 0 3
36902: PUSH
36903: LD_VAR 0 4
36907: MINUS
36908: ST_TO_ADDR
// max_x := x + r ;
36909: LD_ADDR_VAR 0 9
36913: PUSH
36914: LD_VAR 0 2
36918: PUSH
36919: LD_VAR 0 4
36923: PLUS
36924: ST_TO_ADDR
// max_y := y + r ;
36925: LD_ADDR_VAR 0 10
36929: PUSH
36930: LD_VAR 0 3
36934: PUSH
36935: LD_VAR 0 4
36939: PLUS
36940: ST_TO_ADDR
// for _x = min_x to max_x do
36941: LD_ADDR_VAR 0 11
36945: PUSH
36946: DOUBLE
36947: LD_VAR 0 7
36951: DEC
36952: ST_TO_ADDR
36953: LD_VAR 0 9
36957: PUSH
36958: FOR_TO
36959: IFFALSE 37076
// for _y = min_y to max_y do
36961: LD_ADDR_VAR 0 12
36965: PUSH
36966: DOUBLE
36967: LD_VAR 0 8
36971: DEC
36972: ST_TO_ADDR
36973: LD_VAR 0 10
36977: PUSH
36978: FOR_TO
36979: IFFALSE 37072
// begin if not ValidHex ( _x , _y ) then
36981: LD_VAR 0 11
36985: PPUSH
36986: LD_VAR 0 12
36990: PPUSH
36991: CALL_OW 488
36995: NOT
36996: IFFALSE 37000
// continue ;
36998: GO 36978
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37000: LD_VAR 0 11
37004: PPUSH
37005: LD_VAR 0 12
37009: PPUSH
37010: CALL_OW 351
37014: PUSH
37015: LD_VAR 0 11
37019: PPUSH
37020: LD_VAR 0 12
37024: PPUSH
37025: CALL_OW 554
37029: AND
37030: IFFALSE 37070
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37032: LD_ADDR_VAR 0 13
37036: PUSH
37037: LD_VAR 0 13
37041: PPUSH
37042: LD_VAR 0 13
37046: PUSH
37047: LD_INT 1
37049: PLUS
37050: PPUSH
37051: LD_VAR 0 11
37055: PUSH
37056: LD_VAR 0 12
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: PPUSH
37065: CALL_OW 2
37069: ST_TO_ADDR
// end ;
37070: GO 36978
37072: POP
37073: POP
37074: GO 36958
37076: POP
37077: POP
// if not list then
37078: LD_VAR 0 13
37082: NOT
37083: IFFALSE 37087
// exit ;
37085: GO 37331
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
37087: LD_ADDR_VAR 0 13
37091: PUSH
37092: LD_VAR 0 1
37096: PPUSH
37097: LD_VAR 0 13
37101: PPUSH
37102: LD_INT 1
37104: PPUSH
37105: LD_INT 1
37107: PPUSH
37108: CALL 45944 0 4
37112: ST_TO_ADDR
// ComStop ( flame ) ;
37113: LD_VAR 0 1
37117: PPUSH
37118: CALL_OW 141
// for i in list do
37122: LD_ADDR_VAR 0 6
37126: PUSH
37127: LD_VAR 0 13
37131: PUSH
37132: FOR_IN
37133: IFFALSE 37164
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
37135: LD_VAR 0 1
37139: PPUSH
37140: LD_VAR 0 6
37144: PUSH
37145: LD_INT 1
37147: ARRAY
37148: PPUSH
37149: LD_VAR 0 6
37153: PUSH
37154: LD_INT 2
37156: ARRAY
37157: PPUSH
37158: CALL_OW 176
37162: GO 37132
37164: POP
37165: POP
// repeat wait ( 0 0$1 ) ;
37166: LD_INT 35
37168: PPUSH
37169: CALL_OW 67
// task := GetTaskList ( flame ) ;
37173: LD_ADDR_VAR 0 14
37177: PUSH
37178: LD_VAR 0 1
37182: PPUSH
37183: CALL_OW 437
37187: ST_TO_ADDR
// if not task then
37188: LD_VAR 0 14
37192: NOT
37193: IFFALSE 37197
// exit ;
37195: GO 37331
// if task [ 1 ] [ 1 ] <> | then
37197: LD_VAR 0 14
37201: PUSH
37202: LD_INT 1
37204: ARRAY
37205: PUSH
37206: LD_INT 1
37208: ARRAY
37209: PUSH
37210: LD_STRING |
37212: NONEQUAL
37213: IFFALSE 37217
// exit ;
37215: GO 37331
// _x := task [ 1 ] [ 2 ] ;
37217: LD_ADDR_VAR 0 11
37221: PUSH
37222: LD_VAR 0 14
37226: PUSH
37227: LD_INT 1
37229: ARRAY
37230: PUSH
37231: LD_INT 2
37233: ARRAY
37234: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
37235: LD_ADDR_VAR 0 12
37239: PUSH
37240: LD_VAR 0 14
37244: PUSH
37245: LD_INT 1
37247: ARRAY
37248: PUSH
37249: LD_INT 3
37251: ARRAY
37252: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
37253: LD_VAR 0 11
37257: PPUSH
37258: LD_VAR 0 12
37262: PPUSH
37263: CALL_OW 351
37267: NOT
37268: PUSH
37269: LD_VAR 0 11
37273: PPUSH
37274: LD_VAR 0 12
37278: PPUSH
37279: CALL_OW 554
37283: NOT
37284: OR
37285: IFFALSE 37319
// begin task := Delete ( task , 1 ) ;
37287: LD_ADDR_VAR 0 14
37291: PUSH
37292: LD_VAR 0 14
37296: PPUSH
37297: LD_INT 1
37299: PPUSH
37300: CALL_OW 3
37304: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
37305: LD_VAR 0 1
37309: PPUSH
37310: LD_VAR 0 14
37314: PPUSH
37315: CALL_OW 446
// end ; until not HasTask ( flame ) ;
37319: LD_VAR 0 1
37323: PPUSH
37324: CALL_OW 314
37328: NOT
37329: IFFALSE 37166
// end ;
37331: LD_VAR 0 5
37335: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
37336: LD_EXP 122
37340: NOT
37341: IFFALSE 37391
37343: GO 37345
37345: DISABLE
// begin initHack := true ;
37346: LD_ADDR_EXP 122
37350: PUSH
37351: LD_INT 1
37353: ST_TO_ADDR
// hackTanks := [ ] ;
37354: LD_ADDR_EXP 123
37358: PUSH
37359: EMPTY
37360: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
37361: LD_ADDR_EXP 124
37365: PUSH
37366: EMPTY
37367: ST_TO_ADDR
// hackLimit := 3 ;
37368: LD_ADDR_EXP 125
37372: PUSH
37373: LD_INT 3
37375: ST_TO_ADDR
// hackDist := 12 ;
37376: LD_ADDR_EXP 126
37380: PUSH
37381: LD_INT 12
37383: ST_TO_ADDR
// hackCounter := [ ] ;
37384: LD_ADDR_EXP 127
37388: PUSH
37389: EMPTY
37390: ST_TO_ADDR
// end ;
37391: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
37392: LD_EXP 122
37396: PUSH
37397: LD_INT 34
37399: PUSH
37400: LD_INT 99
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: PPUSH
37407: CALL_OW 69
37411: AND
37412: IFFALSE 37665
37414: GO 37416
37416: DISABLE
37417: LD_INT 0
37419: PPUSH
37420: PPUSH
// begin enable ;
37421: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
37422: LD_ADDR_VAR 0 1
37426: PUSH
37427: LD_INT 34
37429: PUSH
37430: LD_INT 99
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: PPUSH
37437: CALL_OW 69
37441: PUSH
37442: FOR_IN
37443: IFFALSE 37663
// begin if not i in hackTanks then
37445: LD_VAR 0 1
37449: PUSH
37450: LD_EXP 123
37454: IN
37455: NOT
37456: IFFALSE 37539
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
37458: LD_ADDR_EXP 123
37462: PUSH
37463: LD_EXP 123
37467: PPUSH
37468: LD_EXP 123
37472: PUSH
37473: LD_INT 1
37475: PLUS
37476: PPUSH
37477: LD_VAR 0 1
37481: PPUSH
37482: CALL_OW 1
37486: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
37487: LD_ADDR_EXP 124
37491: PUSH
37492: LD_EXP 124
37496: PPUSH
37497: LD_EXP 124
37501: PUSH
37502: LD_INT 1
37504: PLUS
37505: PPUSH
37506: EMPTY
37507: PPUSH
37508: CALL_OW 1
37512: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
37513: LD_ADDR_EXP 127
37517: PUSH
37518: LD_EXP 127
37522: PPUSH
37523: LD_EXP 127
37527: PUSH
37528: LD_INT 1
37530: PLUS
37531: PPUSH
37532: EMPTY
37533: PPUSH
37534: CALL_OW 1
37538: ST_TO_ADDR
// end ; if not IsOk ( i ) then
37539: LD_VAR 0 1
37543: PPUSH
37544: CALL_OW 302
37548: NOT
37549: IFFALSE 37562
// begin HackUnlinkAll ( i ) ;
37551: LD_VAR 0 1
37555: PPUSH
37556: CALL 37668 0 1
// continue ;
37560: GO 37442
// end ; HackCheckCapturedStatus ( i ) ;
37562: LD_VAR 0 1
37566: PPUSH
37567: CALL 38111 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
37571: LD_ADDR_VAR 0 2
37575: PUSH
37576: LD_INT 81
37578: PUSH
37579: LD_VAR 0 1
37583: PPUSH
37584: CALL_OW 255
37588: PUSH
37589: EMPTY
37590: LIST
37591: LIST
37592: PUSH
37593: LD_INT 33
37595: PUSH
37596: LD_INT 3
37598: PUSH
37599: EMPTY
37600: LIST
37601: LIST
37602: PUSH
37603: LD_INT 91
37605: PUSH
37606: LD_VAR 0 1
37610: PUSH
37611: LD_EXP 126
37615: PUSH
37616: EMPTY
37617: LIST
37618: LIST
37619: LIST
37620: PUSH
37621: LD_INT 50
37623: PUSH
37624: EMPTY
37625: LIST
37626: PUSH
37627: EMPTY
37628: LIST
37629: LIST
37630: LIST
37631: LIST
37632: PPUSH
37633: CALL_OW 69
37637: ST_TO_ADDR
// if not tmp then
37638: LD_VAR 0 2
37642: NOT
37643: IFFALSE 37647
// continue ;
37645: GO 37442
// HackLink ( i , tmp ) ;
37647: LD_VAR 0 1
37651: PPUSH
37652: LD_VAR 0 2
37656: PPUSH
37657: CALL 37804 0 2
// end ;
37661: GO 37442
37663: POP
37664: POP
// end ;
37665: PPOPN 2
37667: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
37668: LD_INT 0
37670: PPUSH
37671: PPUSH
37672: PPUSH
// if not hack in hackTanks then
37673: LD_VAR 0 1
37677: PUSH
37678: LD_EXP 123
37682: IN
37683: NOT
37684: IFFALSE 37688
// exit ;
37686: GO 37799
// index := GetElementIndex ( hackTanks , hack ) ;
37688: LD_ADDR_VAR 0 4
37692: PUSH
37693: LD_EXP 123
37697: PPUSH
37698: LD_VAR 0 1
37702: PPUSH
37703: CALL 45241 0 2
37707: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
37708: LD_EXP 124
37712: PUSH
37713: LD_VAR 0 4
37717: ARRAY
37718: IFFALSE 37799
// begin for i in hackTanksCaptured [ index ] do
37720: LD_ADDR_VAR 0 3
37724: PUSH
37725: LD_EXP 124
37729: PUSH
37730: LD_VAR 0 4
37734: ARRAY
37735: PUSH
37736: FOR_IN
37737: IFFALSE 37763
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
37739: LD_VAR 0 3
37743: PUSH
37744: LD_INT 1
37746: ARRAY
37747: PPUSH
37748: LD_VAR 0 3
37752: PUSH
37753: LD_INT 2
37755: ARRAY
37756: PPUSH
37757: CALL_OW 235
37761: GO 37736
37763: POP
37764: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
37765: LD_ADDR_EXP 124
37769: PUSH
37770: LD_EXP 124
37774: PPUSH
37775: LD_VAR 0 4
37779: PPUSH
37780: EMPTY
37781: PPUSH
37782: CALL_OW 1
37786: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
37787: LD_VAR 0 1
37791: PPUSH
37792: LD_INT 0
37794: PPUSH
37795: CALL_OW 505
// end ; end ;
37799: LD_VAR 0 2
37803: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
37804: LD_INT 0
37806: PPUSH
37807: PPUSH
37808: PPUSH
// if not hack in hackTanks or not vehicles then
37809: LD_VAR 0 1
37813: PUSH
37814: LD_EXP 123
37818: IN
37819: NOT
37820: PUSH
37821: LD_VAR 0 2
37825: NOT
37826: OR
37827: IFFALSE 37831
// exit ;
37829: GO 38106
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
37831: LD_ADDR_VAR 0 2
37835: PUSH
37836: LD_VAR 0 1
37840: PPUSH
37841: LD_VAR 0 2
37845: PPUSH
37846: LD_INT 1
37848: PPUSH
37849: LD_INT 1
37851: PPUSH
37852: CALL 45891 0 4
37856: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
37857: LD_ADDR_VAR 0 5
37861: PUSH
37862: LD_EXP 123
37866: PPUSH
37867: LD_VAR 0 1
37871: PPUSH
37872: CALL 45241 0 2
37876: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
37877: LD_EXP 124
37881: PUSH
37882: LD_VAR 0 5
37886: ARRAY
37887: PUSH
37888: LD_EXP 125
37892: LESS
37893: IFFALSE 38082
// begin for i := 1 to vehicles do
37895: LD_ADDR_VAR 0 4
37899: PUSH
37900: DOUBLE
37901: LD_INT 1
37903: DEC
37904: ST_TO_ADDR
37905: LD_VAR 0 2
37909: PUSH
37910: FOR_TO
37911: IFFALSE 38080
// begin if hackTanksCaptured [ index ] = hackLimit then
37913: LD_EXP 124
37917: PUSH
37918: LD_VAR 0 5
37922: ARRAY
37923: PUSH
37924: LD_EXP 125
37928: EQUAL
37929: IFFALSE 37933
// break ;
37931: GO 38080
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
37933: LD_ADDR_EXP 127
37937: PUSH
37938: LD_EXP 127
37942: PPUSH
37943: LD_VAR 0 5
37947: PPUSH
37948: LD_EXP 127
37952: PUSH
37953: LD_VAR 0 5
37957: ARRAY
37958: PUSH
37959: LD_INT 1
37961: PLUS
37962: PPUSH
37963: CALL_OW 1
37967: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
37968: LD_ADDR_EXP 124
37972: PUSH
37973: LD_EXP 124
37977: PPUSH
37978: LD_VAR 0 5
37982: PUSH
37983: LD_EXP 124
37987: PUSH
37988: LD_VAR 0 5
37992: ARRAY
37993: PUSH
37994: LD_INT 1
37996: PLUS
37997: PUSH
37998: EMPTY
37999: LIST
38000: LIST
38001: PPUSH
38002: LD_VAR 0 2
38006: PUSH
38007: LD_VAR 0 4
38011: ARRAY
38012: PUSH
38013: LD_VAR 0 2
38017: PUSH
38018: LD_VAR 0 4
38022: ARRAY
38023: PPUSH
38024: CALL_OW 255
38028: PUSH
38029: EMPTY
38030: LIST
38031: LIST
38032: PPUSH
38033: CALL 45456 0 3
38037: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
38038: LD_VAR 0 2
38042: PUSH
38043: LD_VAR 0 4
38047: ARRAY
38048: PPUSH
38049: LD_VAR 0 1
38053: PPUSH
38054: CALL_OW 255
38058: PPUSH
38059: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
38063: LD_VAR 0 2
38067: PUSH
38068: LD_VAR 0 4
38072: ARRAY
38073: PPUSH
38074: CALL_OW 141
// end ;
38078: GO 37910
38080: POP
38081: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38082: LD_VAR 0 1
38086: PPUSH
38087: LD_EXP 124
38091: PUSH
38092: LD_VAR 0 5
38096: ARRAY
38097: PUSH
38098: LD_INT 0
38100: PLUS
38101: PPUSH
38102: CALL_OW 505
// end ;
38106: LD_VAR 0 3
38110: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
38111: LD_INT 0
38113: PPUSH
38114: PPUSH
38115: PPUSH
38116: PPUSH
// if not hack in hackTanks then
38117: LD_VAR 0 1
38121: PUSH
38122: LD_EXP 123
38126: IN
38127: NOT
38128: IFFALSE 38132
// exit ;
38130: GO 38372
// index := GetElementIndex ( hackTanks , hack ) ;
38132: LD_ADDR_VAR 0 4
38136: PUSH
38137: LD_EXP 123
38141: PPUSH
38142: LD_VAR 0 1
38146: PPUSH
38147: CALL 45241 0 2
38151: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
38152: LD_ADDR_VAR 0 3
38156: PUSH
38157: DOUBLE
38158: LD_EXP 124
38162: PUSH
38163: LD_VAR 0 4
38167: ARRAY
38168: INC
38169: ST_TO_ADDR
38170: LD_INT 1
38172: PUSH
38173: FOR_DOWNTO
38174: IFFALSE 38346
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
38176: LD_ADDR_VAR 0 5
38180: PUSH
38181: LD_EXP 124
38185: PUSH
38186: LD_VAR 0 4
38190: ARRAY
38191: PUSH
38192: LD_VAR 0 3
38196: ARRAY
38197: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
38198: LD_VAR 0 5
38202: PUSH
38203: LD_INT 1
38205: ARRAY
38206: PPUSH
38207: CALL_OW 302
38211: NOT
38212: PUSH
38213: LD_VAR 0 5
38217: PUSH
38218: LD_INT 1
38220: ARRAY
38221: PPUSH
38222: CALL_OW 255
38226: PUSH
38227: LD_VAR 0 1
38231: PPUSH
38232: CALL_OW 255
38236: NONEQUAL
38237: OR
38238: IFFALSE 38344
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
38240: LD_VAR 0 5
38244: PUSH
38245: LD_INT 1
38247: ARRAY
38248: PPUSH
38249: CALL_OW 305
38253: PUSH
38254: LD_VAR 0 5
38258: PUSH
38259: LD_INT 1
38261: ARRAY
38262: PPUSH
38263: CALL_OW 255
38267: PUSH
38268: LD_VAR 0 1
38272: PPUSH
38273: CALL_OW 255
38277: EQUAL
38278: AND
38279: IFFALSE 38303
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
38281: LD_VAR 0 5
38285: PUSH
38286: LD_INT 1
38288: ARRAY
38289: PPUSH
38290: LD_VAR 0 5
38294: PUSH
38295: LD_INT 2
38297: ARRAY
38298: PPUSH
38299: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
38303: LD_ADDR_EXP 124
38307: PUSH
38308: LD_EXP 124
38312: PPUSH
38313: LD_VAR 0 4
38317: PPUSH
38318: LD_EXP 124
38322: PUSH
38323: LD_VAR 0 4
38327: ARRAY
38328: PPUSH
38329: LD_VAR 0 3
38333: PPUSH
38334: CALL_OW 3
38338: PPUSH
38339: CALL_OW 1
38343: ST_TO_ADDR
// end ; end ;
38344: GO 38173
38346: POP
38347: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38348: LD_VAR 0 1
38352: PPUSH
38353: LD_EXP 124
38357: PUSH
38358: LD_VAR 0 4
38362: ARRAY
38363: PUSH
38364: LD_INT 0
38366: PLUS
38367: PPUSH
38368: CALL_OW 505
// end ;
38372: LD_VAR 0 2
38376: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
38377: LD_INT 0
38379: PPUSH
38380: PPUSH
38381: PPUSH
38382: PPUSH
// if not hack in hackTanks then
38383: LD_VAR 0 1
38387: PUSH
38388: LD_EXP 123
38392: IN
38393: NOT
38394: IFFALSE 38398
// exit ;
38396: GO 38483
// index := GetElementIndex ( hackTanks , hack ) ;
38398: LD_ADDR_VAR 0 5
38402: PUSH
38403: LD_EXP 123
38407: PPUSH
38408: LD_VAR 0 1
38412: PPUSH
38413: CALL 45241 0 2
38417: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
38418: LD_ADDR_VAR 0 4
38422: PUSH
38423: DOUBLE
38424: LD_INT 1
38426: DEC
38427: ST_TO_ADDR
38428: LD_EXP 124
38432: PUSH
38433: LD_VAR 0 5
38437: ARRAY
38438: PUSH
38439: FOR_TO
38440: IFFALSE 38481
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
38442: LD_EXP 124
38446: PUSH
38447: LD_VAR 0 5
38451: ARRAY
38452: PUSH
38453: LD_VAR 0 4
38457: ARRAY
38458: PUSH
38459: LD_INT 1
38461: ARRAY
38462: PUSH
38463: LD_VAR 0 2
38467: EQUAL
38468: IFFALSE 38479
// KillUnit ( vehicle ) ;
38470: LD_VAR 0 2
38474: PPUSH
38475: CALL_OW 66
38479: GO 38439
38481: POP
38482: POP
// end ;
38483: LD_VAR 0 3
38487: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
38488: LD_EXP 128
38492: NOT
38493: IFFALSE 38528
38495: GO 38497
38497: DISABLE
// begin initMiner := true ;
38498: LD_ADDR_EXP 128
38502: PUSH
38503: LD_INT 1
38505: ST_TO_ADDR
// minersList := [ ] ;
38506: LD_ADDR_EXP 129
38510: PUSH
38511: EMPTY
38512: ST_TO_ADDR
// minerMinesList := [ ] ;
38513: LD_ADDR_EXP 130
38517: PUSH
38518: EMPTY
38519: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
38520: LD_ADDR_EXP 131
38524: PUSH
38525: LD_INT 5
38527: ST_TO_ADDR
// end ;
38528: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
38529: LD_EXP 128
38533: PUSH
38534: LD_INT 34
38536: PUSH
38537: LD_INT 81
38539: PUSH
38540: EMPTY
38541: LIST
38542: LIST
38543: PPUSH
38544: CALL_OW 69
38548: AND
38549: IFFALSE 39010
38551: GO 38553
38553: DISABLE
38554: LD_INT 0
38556: PPUSH
38557: PPUSH
38558: PPUSH
38559: PPUSH
// begin enable ;
38560: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
38561: LD_ADDR_VAR 0 1
38565: PUSH
38566: LD_INT 34
38568: PUSH
38569: LD_INT 81
38571: PUSH
38572: EMPTY
38573: LIST
38574: LIST
38575: PPUSH
38576: CALL_OW 69
38580: PUSH
38581: FOR_IN
38582: IFFALSE 38654
// begin if not i in minersList then
38584: LD_VAR 0 1
38588: PUSH
38589: LD_EXP 129
38593: IN
38594: NOT
38595: IFFALSE 38652
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
38597: LD_ADDR_EXP 129
38601: PUSH
38602: LD_EXP 129
38606: PPUSH
38607: LD_EXP 129
38611: PUSH
38612: LD_INT 1
38614: PLUS
38615: PPUSH
38616: LD_VAR 0 1
38620: PPUSH
38621: CALL_OW 1
38625: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
38626: LD_ADDR_EXP 130
38630: PUSH
38631: LD_EXP 130
38635: PPUSH
38636: LD_EXP 130
38640: PUSH
38641: LD_INT 1
38643: PLUS
38644: PPUSH
38645: EMPTY
38646: PPUSH
38647: CALL_OW 1
38651: ST_TO_ADDR
// end end ;
38652: GO 38581
38654: POP
38655: POP
// for i := minerMinesList downto 1 do
38656: LD_ADDR_VAR 0 1
38660: PUSH
38661: DOUBLE
38662: LD_EXP 130
38666: INC
38667: ST_TO_ADDR
38668: LD_INT 1
38670: PUSH
38671: FOR_DOWNTO
38672: IFFALSE 39008
// begin if IsLive ( minersList [ i ] ) then
38674: LD_EXP 129
38678: PUSH
38679: LD_VAR 0 1
38683: ARRAY
38684: PPUSH
38685: CALL_OW 300
38689: IFFALSE 38717
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
38691: LD_EXP 129
38695: PUSH
38696: LD_VAR 0 1
38700: ARRAY
38701: PPUSH
38702: LD_EXP 130
38706: PUSH
38707: LD_VAR 0 1
38711: ARRAY
38712: PPUSH
38713: CALL_OW 505
// if not minerMinesList [ i ] then
38717: LD_EXP 130
38721: PUSH
38722: LD_VAR 0 1
38726: ARRAY
38727: NOT
38728: IFFALSE 38732
// continue ;
38730: GO 38671
// for j := minerMinesList [ i ] downto 1 do
38732: LD_ADDR_VAR 0 2
38736: PUSH
38737: DOUBLE
38738: LD_EXP 130
38742: PUSH
38743: LD_VAR 0 1
38747: ARRAY
38748: INC
38749: ST_TO_ADDR
38750: LD_INT 1
38752: PUSH
38753: FOR_DOWNTO
38754: IFFALSE 39004
// begin side := GetSide ( minersList [ i ] ) ;
38756: LD_ADDR_VAR 0 3
38760: PUSH
38761: LD_EXP 129
38765: PUSH
38766: LD_VAR 0 1
38770: ARRAY
38771: PPUSH
38772: CALL_OW 255
38776: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
38777: LD_ADDR_VAR 0 4
38781: PUSH
38782: LD_EXP 130
38786: PUSH
38787: LD_VAR 0 1
38791: ARRAY
38792: PUSH
38793: LD_VAR 0 2
38797: ARRAY
38798: PUSH
38799: LD_INT 1
38801: ARRAY
38802: PPUSH
38803: LD_EXP 130
38807: PUSH
38808: LD_VAR 0 1
38812: ARRAY
38813: PUSH
38814: LD_VAR 0 2
38818: ARRAY
38819: PUSH
38820: LD_INT 2
38822: ARRAY
38823: PPUSH
38824: CALL_OW 428
38828: ST_TO_ADDR
// if not tmp then
38829: LD_VAR 0 4
38833: NOT
38834: IFFALSE 38838
// continue ;
38836: GO 38753
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
38838: LD_VAR 0 4
38842: PUSH
38843: LD_INT 81
38845: PUSH
38846: LD_VAR 0 3
38850: PUSH
38851: EMPTY
38852: LIST
38853: LIST
38854: PPUSH
38855: CALL_OW 69
38859: IN
38860: PUSH
38861: LD_EXP 130
38865: PUSH
38866: LD_VAR 0 1
38870: ARRAY
38871: PUSH
38872: LD_VAR 0 2
38876: ARRAY
38877: PUSH
38878: LD_INT 1
38880: ARRAY
38881: PPUSH
38882: LD_EXP 130
38886: PUSH
38887: LD_VAR 0 1
38891: ARRAY
38892: PUSH
38893: LD_VAR 0 2
38897: ARRAY
38898: PUSH
38899: LD_INT 2
38901: ARRAY
38902: PPUSH
38903: CALL_OW 458
38907: AND
38908: IFFALSE 39002
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
38910: LD_EXP 130
38914: PUSH
38915: LD_VAR 0 1
38919: ARRAY
38920: PUSH
38921: LD_VAR 0 2
38925: ARRAY
38926: PUSH
38927: LD_INT 1
38929: ARRAY
38930: PPUSH
38931: LD_EXP 130
38935: PUSH
38936: LD_VAR 0 1
38940: ARRAY
38941: PUSH
38942: LD_VAR 0 2
38946: ARRAY
38947: PUSH
38948: LD_INT 2
38950: ARRAY
38951: PPUSH
38952: LD_VAR 0 3
38956: PPUSH
38957: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
38961: LD_ADDR_EXP 130
38965: PUSH
38966: LD_EXP 130
38970: PPUSH
38971: LD_VAR 0 1
38975: PPUSH
38976: LD_EXP 130
38980: PUSH
38981: LD_VAR 0 1
38985: ARRAY
38986: PPUSH
38987: LD_VAR 0 2
38991: PPUSH
38992: CALL_OW 3
38996: PPUSH
38997: CALL_OW 1
39001: ST_TO_ADDR
// end ; end ;
39002: GO 38753
39004: POP
39005: POP
// end ;
39006: GO 38671
39008: POP
39009: POP
// end ;
39010: PPOPN 4
39012: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
39013: LD_INT 0
39015: PPUSH
39016: PPUSH
// result := false ;
39017: LD_ADDR_VAR 0 4
39021: PUSH
39022: LD_INT 0
39024: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
39025: LD_VAR 0 1
39029: PPUSH
39030: CALL_OW 264
39034: PUSH
39035: LD_INT 81
39037: EQUAL
39038: NOT
39039: IFFALSE 39043
// exit ;
39041: GO 39283
// index := GetElementIndex ( minersList , unit ) ;
39043: LD_ADDR_VAR 0 5
39047: PUSH
39048: LD_EXP 129
39052: PPUSH
39053: LD_VAR 0 1
39057: PPUSH
39058: CALL 45241 0 2
39062: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
39063: LD_EXP 130
39067: PUSH
39068: LD_VAR 0 5
39072: ARRAY
39073: PUSH
39074: LD_EXP 131
39078: GREATEREQUAL
39079: IFFALSE 39083
// exit ;
39081: GO 39283
// ComMoveXY ( unit , x , y ) ;
39083: LD_VAR 0 1
39087: PPUSH
39088: LD_VAR 0 2
39092: PPUSH
39093: LD_VAR 0 3
39097: PPUSH
39098: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39102: LD_INT 35
39104: PPUSH
39105: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
39109: LD_VAR 0 1
39113: PPUSH
39114: LD_VAR 0 2
39118: PPUSH
39119: LD_VAR 0 3
39123: PPUSH
39124: CALL 76982 0 3
39128: NOT
39129: PUSH
39130: LD_VAR 0 1
39134: PPUSH
39135: CALL_OW 314
39139: AND
39140: IFFALSE 39144
// exit ;
39142: GO 39283
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
39144: LD_VAR 0 2
39148: PPUSH
39149: LD_VAR 0 3
39153: PPUSH
39154: CALL_OW 428
39158: PUSH
39159: LD_VAR 0 1
39163: EQUAL
39164: PUSH
39165: LD_VAR 0 1
39169: PPUSH
39170: CALL_OW 314
39174: NOT
39175: AND
39176: IFFALSE 39102
// PlaySoundXY ( x , y , PlantMine ) ;
39178: LD_VAR 0 2
39182: PPUSH
39183: LD_VAR 0 3
39187: PPUSH
39188: LD_STRING PlantMine
39190: PPUSH
39191: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
39195: LD_VAR 0 2
39199: PPUSH
39200: LD_VAR 0 3
39204: PPUSH
39205: LD_VAR 0 1
39209: PPUSH
39210: CALL_OW 255
39214: PPUSH
39215: LD_INT 0
39217: PPUSH
39218: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
39222: LD_ADDR_EXP 130
39226: PUSH
39227: LD_EXP 130
39231: PPUSH
39232: LD_VAR 0 5
39236: PUSH
39237: LD_EXP 130
39241: PUSH
39242: LD_VAR 0 5
39246: ARRAY
39247: PUSH
39248: LD_INT 1
39250: PLUS
39251: PUSH
39252: EMPTY
39253: LIST
39254: LIST
39255: PPUSH
39256: LD_VAR 0 2
39260: PUSH
39261: LD_VAR 0 3
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PPUSH
39270: CALL 45456 0 3
39274: ST_TO_ADDR
// result := true ;
39275: LD_ADDR_VAR 0 4
39279: PUSH
39280: LD_INT 1
39282: ST_TO_ADDR
// end ;
39283: LD_VAR 0 4
39287: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
39288: LD_INT 0
39290: PPUSH
39291: PPUSH
39292: PPUSH
// if not unit in minersList then
39293: LD_VAR 0 1
39297: PUSH
39298: LD_EXP 129
39302: IN
39303: NOT
39304: IFFALSE 39308
// exit ;
39306: GO 39700
// index := GetElementIndex ( minersList , unit ) ;
39308: LD_ADDR_VAR 0 6
39312: PUSH
39313: LD_EXP 129
39317: PPUSH
39318: LD_VAR 0 1
39322: PPUSH
39323: CALL 45241 0 2
39327: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
39328: LD_ADDR_VAR 0 5
39332: PUSH
39333: DOUBLE
39334: LD_EXP 130
39338: PUSH
39339: LD_VAR 0 6
39343: ARRAY
39344: INC
39345: ST_TO_ADDR
39346: LD_INT 1
39348: PUSH
39349: FOR_DOWNTO
39350: IFFALSE 39511
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
39352: LD_EXP 130
39356: PUSH
39357: LD_VAR 0 6
39361: ARRAY
39362: PUSH
39363: LD_VAR 0 5
39367: ARRAY
39368: PUSH
39369: LD_INT 1
39371: ARRAY
39372: PUSH
39373: LD_VAR 0 2
39377: EQUAL
39378: PUSH
39379: LD_EXP 130
39383: PUSH
39384: LD_VAR 0 6
39388: ARRAY
39389: PUSH
39390: LD_VAR 0 5
39394: ARRAY
39395: PUSH
39396: LD_INT 2
39398: ARRAY
39399: PUSH
39400: LD_VAR 0 3
39404: EQUAL
39405: AND
39406: IFFALSE 39509
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39408: LD_EXP 130
39412: PUSH
39413: LD_VAR 0 6
39417: ARRAY
39418: PUSH
39419: LD_VAR 0 5
39423: ARRAY
39424: PUSH
39425: LD_INT 1
39427: ARRAY
39428: PPUSH
39429: LD_EXP 130
39433: PUSH
39434: LD_VAR 0 6
39438: ARRAY
39439: PUSH
39440: LD_VAR 0 5
39444: ARRAY
39445: PUSH
39446: LD_INT 2
39448: ARRAY
39449: PPUSH
39450: LD_VAR 0 1
39454: PPUSH
39455: CALL_OW 255
39459: PPUSH
39460: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39464: LD_ADDR_EXP 130
39468: PUSH
39469: LD_EXP 130
39473: PPUSH
39474: LD_VAR 0 6
39478: PPUSH
39479: LD_EXP 130
39483: PUSH
39484: LD_VAR 0 6
39488: ARRAY
39489: PPUSH
39490: LD_VAR 0 5
39494: PPUSH
39495: CALL_OW 3
39499: PPUSH
39500: CALL_OW 1
39504: ST_TO_ADDR
// exit ;
39505: POP
39506: POP
39507: GO 39700
// end ; end ;
39509: GO 39349
39511: POP
39512: POP
// for i := minerMinesList [ index ] downto 1 do
39513: LD_ADDR_VAR 0 5
39517: PUSH
39518: DOUBLE
39519: LD_EXP 130
39523: PUSH
39524: LD_VAR 0 6
39528: ARRAY
39529: INC
39530: ST_TO_ADDR
39531: LD_INT 1
39533: PUSH
39534: FOR_DOWNTO
39535: IFFALSE 39698
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
39537: LD_EXP 130
39541: PUSH
39542: LD_VAR 0 6
39546: ARRAY
39547: PUSH
39548: LD_VAR 0 5
39552: ARRAY
39553: PUSH
39554: LD_INT 1
39556: ARRAY
39557: PPUSH
39558: LD_EXP 130
39562: PUSH
39563: LD_VAR 0 6
39567: ARRAY
39568: PUSH
39569: LD_VAR 0 5
39573: ARRAY
39574: PUSH
39575: LD_INT 2
39577: ARRAY
39578: PPUSH
39579: LD_VAR 0 2
39583: PPUSH
39584: LD_VAR 0 3
39588: PPUSH
39589: CALL_OW 298
39593: PUSH
39594: LD_INT 6
39596: LESS
39597: IFFALSE 39696
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39599: LD_EXP 130
39603: PUSH
39604: LD_VAR 0 6
39608: ARRAY
39609: PUSH
39610: LD_VAR 0 5
39614: ARRAY
39615: PUSH
39616: LD_INT 1
39618: ARRAY
39619: PPUSH
39620: LD_EXP 130
39624: PUSH
39625: LD_VAR 0 6
39629: ARRAY
39630: PUSH
39631: LD_VAR 0 5
39635: ARRAY
39636: PUSH
39637: LD_INT 2
39639: ARRAY
39640: PPUSH
39641: LD_VAR 0 1
39645: PPUSH
39646: CALL_OW 255
39650: PPUSH
39651: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39655: LD_ADDR_EXP 130
39659: PUSH
39660: LD_EXP 130
39664: PPUSH
39665: LD_VAR 0 6
39669: PPUSH
39670: LD_EXP 130
39674: PUSH
39675: LD_VAR 0 6
39679: ARRAY
39680: PPUSH
39681: LD_VAR 0 5
39685: PPUSH
39686: CALL_OW 3
39690: PPUSH
39691: CALL_OW 1
39695: ST_TO_ADDR
// end ; end ;
39696: GO 39534
39698: POP
39699: POP
// end ;
39700: LD_VAR 0 4
39704: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
39705: LD_INT 0
39707: PPUSH
39708: PPUSH
39709: PPUSH
39710: PPUSH
39711: PPUSH
39712: PPUSH
39713: PPUSH
39714: PPUSH
39715: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
39716: LD_VAR 0 1
39720: PPUSH
39721: CALL_OW 264
39725: PUSH
39726: LD_INT 81
39728: EQUAL
39729: NOT
39730: PUSH
39731: LD_VAR 0 1
39735: PUSH
39736: LD_EXP 129
39740: IN
39741: NOT
39742: OR
39743: IFFALSE 39747
// exit ;
39745: GO 40069
// index := GetElementIndex ( minersList , unit ) ;
39747: LD_ADDR_VAR 0 6
39751: PUSH
39752: LD_EXP 129
39756: PPUSH
39757: LD_VAR 0 1
39761: PPUSH
39762: CALL 45241 0 2
39766: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
39767: LD_ADDR_VAR 0 8
39771: PUSH
39772: LD_EXP 131
39776: PUSH
39777: LD_EXP 130
39781: PUSH
39782: LD_VAR 0 6
39786: ARRAY
39787: MINUS
39788: ST_TO_ADDR
// if not minesFreeAmount then
39789: LD_VAR 0 8
39793: NOT
39794: IFFALSE 39798
// exit ;
39796: GO 40069
// tmp := [ ] ;
39798: LD_ADDR_VAR 0 7
39802: PUSH
39803: EMPTY
39804: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
39805: LD_ADDR_VAR 0 5
39809: PUSH
39810: DOUBLE
39811: LD_INT 1
39813: DEC
39814: ST_TO_ADDR
39815: LD_VAR 0 8
39819: PUSH
39820: FOR_TO
39821: IFFALSE 40016
// begin _d := rand ( 0 , 5 ) ;
39823: LD_ADDR_VAR 0 11
39827: PUSH
39828: LD_INT 0
39830: PPUSH
39831: LD_INT 5
39833: PPUSH
39834: CALL_OW 12
39838: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
39839: LD_ADDR_VAR 0 12
39843: PUSH
39844: LD_INT 2
39846: PPUSH
39847: LD_INT 6
39849: PPUSH
39850: CALL_OW 12
39854: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
39855: LD_ADDR_VAR 0 9
39859: PUSH
39860: LD_VAR 0 2
39864: PPUSH
39865: LD_VAR 0 11
39869: PPUSH
39870: LD_VAR 0 12
39874: PPUSH
39875: CALL_OW 272
39879: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
39880: LD_ADDR_VAR 0 10
39884: PUSH
39885: LD_VAR 0 3
39889: PPUSH
39890: LD_VAR 0 11
39894: PPUSH
39895: LD_VAR 0 12
39899: PPUSH
39900: CALL_OW 273
39904: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
39905: LD_VAR 0 9
39909: PPUSH
39910: LD_VAR 0 10
39914: PPUSH
39915: CALL_OW 488
39919: PUSH
39920: LD_VAR 0 9
39924: PUSH
39925: LD_VAR 0 10
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: PUSH
39934: LD_VAR 0 7
39938: IN
39939: NOT
39940: AND
39941: PUSH
39942: LD_VAR 0 9
39946: PPUSH
39947: LD_VAR 0 10
39951: PPUSH
39952: CALL_OW 458
39956: NOT
39957: AND
39958: IFFALSE 40000
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
39960: LD_ADDR_VAR 0 7
39964: PUSH
39965: LD_VAR 0 7
39969: PPUSH
39970: LD_VAR 0 7
39974: PUSH
39975: LD_INT 1
39977: PLUS
39978: PPUSH
39979: LD_VAR 0 9
39983: PUSH
39984: LD_VAR 0 10
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: PPUSH
39993: CALL_OW 1
39997: ST_TO_ADDR
39998: GO 40014
// i := i - 1 ;
40000: LD_ADDR_VAR 0 5
40004: PUSH
40005: LD_VAR 0 5
40009: PUSH
40010: LD_INT 1
40012: MINUS
40013: ST_TO_ADDR
// end ;
40014: GO 39820
40016: POP
40017: POP
// for i in tmp do
40018: LD_ADDR_VAR 0 5
40022: PUSH
40023: LD_VAR 0 7
40027: PUSH
40028: FOR_IN
40029: IFFALSE 40067
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
40031: LD_VAR 0 1
40035: PPUSH
40036: LD_VAR 0 5
40040: PUSH
40041: LD_INT 1
40043: ARRAY
40044: PPUSH
40045: LD_VAR 0 5
40049: PUSH
40050: LD_INT 2
40052: ARRAY
40053: PPUSH
40054: CALL 39013 0 3
40058: NOT
40059: IFFALSE 40065
// exit ;
40061: POP
40062: POP
40063: GO 40069
40065: GO 40028
40067: POP
40068: POP
// end ;
40069: LD_VAR 0 4
40073: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
40074: LD_INT 0
40076: PPUSH
40077: PPUSH
40078: PPUSH
40079: PPUSH
40080: PPUSH
40081: PPUSH
40082: PPUSH
// if not GetClass ( unit ) = class_sniper then
40083: LD_VAR 0 1
40087: PPUSH
40088: CALL_OW 257
40092: PUSH
40093: LD_INT 5
40095: EQUAL
40096: NOT
40097: IFFALSE 40101
// exit ;
40099: GO 40489
// dist := 8 ;
40101: LD_ADDR_VAR 0 5
40105: PUSH
40106: LD_INT 8
40108: ST_TO_ADDR
// viewRange := 12 ;
40109: LD_ADDR_VAR 0 7
40113: PUSH
40114: LD_INT 12
40116: ST_TO_ADDR
// side := GetSide ( unit ) ;
40117: LD_ADDR_VAR 0 6
40121: PUSH
40122: LD_VAR 0 1
40126: PPUSH
40127: CALL_OW 255
40131: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
40132: LD_INT 61
40134: PPUSH
40135: LD_VAR 0 6
40139: PPUSH
40140: CALL_OW 321
40144: PUSH
40145: LD_INT 2
40147: EQUAL
40148: IFFALSE 40158
// viewRange := 16 ;
40150: LD_ADDR_VAR 0 7
40154: PUSH
40155: LD_INT 16
40157: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
40158: LD_VAR 0 1
40162: PPUSH
40163: LD_VAR 0 2
40167: PPUSH
40168: LD_VAR 0 3
40172: PPUSH
40173: CALL_OW 297
40177: PUSH
40178: LD_VAR 0 5
40182: GREATER
40183: IFFALSE 40262
// begin ComMoveXY ( unit , x , y ) ;
40185: LD_VAR 0 1
40189: PPUSH
40190: LD_VAR 0 2
40194: PPUSH
40195: LD_VAR 0 3
40199: PPUSH
40200: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40204: LD_INT 35
40206: PPUSH
40207: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
40211: LD_VAR 0 1
40215: PPUSH
40216: LD_VAR 0 2
40220: PPUSH
40221: LD_VAR 0 3
40225: PPUSH
40226: CALL 76982 0 3
40230: NOT
40231: IFFALSE 40235
// exit ;
40233: GO 40489
// until GetDistUnitXY ( unit , x , y ) < dist ;
40235: LD_VAR 0 1
40239: PPUSH
40240: LD_VAR 0 2
40244: PPUSH
40245: LD_VAR 0 3
40249: PPUSH
40250: CALL_OW 297
40254: PUSH
40255: LD_VAR 0 5
40259: LESS
40260: IFFALSE 40204
// end ; ComTurnXY ( unit , x , y ) ;
40262: LD_VAR 0 1
40266: PPUSH
40267: LD_VAR 0 2
40271: PPUSH
40272: LD_VAR 0 3
40276: PPUSH
40277: CALL_OW 118
// wait ( 5 ) ;
40281: LD_INT 5
40283: PPUSH
40284: CALL_OW 67
// _d := GetDir ( unit ) ;
40288: LD_ADDR_VAR 0 10
40292: PUSH
40293: LD_VAR 0 1
40297: PPUSH
40298: CALL_OW 254
40302: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
40303: LD_ADDR_VAR 0 8
40307: PUSH
40308: LD_VAR 0 1
40312: PPUSH
40313: CALL_OW 250
40317: PPUSH
40318: LD_VAR 0 10
40322: PPUSH
40323: LD_VAR 0 5
40327: PPUSH
40328: CALL_OW 272
40332: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
40333: LD_ADDR_VAR 0 9
40337: PUSH
40338: LD_VAR 0 1
40342: PPUSH
40343: CALL_OW 251
40347: PPUSH
40348: LD_VAR 0 10
40352: PPUSH
40353: LD_VAR 0 5
40357: PPUSH
40358: CALL_OW 273
40362: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40363: LD_VAR 0 8
40367: PPUSH
40368: LD_VAR 0 9
40372: PPUSH
40373: CALL_OW 488
40377: NOT
40378: IFFALSE 40382
// exit ;
40380: GO 40489
// ComAnimCustom ( unit , 1 ) ;
40382: LD_VAR 0 1
40386: PPUSH
40387: LD_INT 1
40389: PPUSH
40390: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
40394: LD_VAR 0 8
40398: PPUSH
40399: LD_VAR 0 9
40403: PPUSH
40404: LD_VAR 0 6
40408: PPUSH
40409: LD_VAR 0 7
40413: PPUSH
40414: CALL_OW 330
// repeat wait ( 1 ) ;
40418: LD_INT 1
40420: PPUSH
40421: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
40425: LD_VAR 0 1
40429: PPUSH
40430: CALL_OW 316
40434: PUSH
40435: LD_VAR 0 1
40439: PPUSH
40440: CALL_OW 314
40444: OR
40445: PUSH
40446: LD_VAR 0 1
40450: PPUSH
40451: CALL_OW 302
40455: NOT
40456: OR
40457: PUSH
40458: LD_VAR 0 1
40462: PPUSH
40463: CALL_OW 301
40467: OR
40468: IFFALSE 40418
// RemoveSeeing ( _x , _y , side ) ;
40470: LD_VAR 0 8
40474: PPUSH
40475: LD_VAR 0 9
40479: PPUSH
40480: LD_VAR 0 6
40484: PPUSH
40485: CALL_OW 331
// end ; end_of_file
40489: LD_VAR 0 4
40493: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
40494: LD_INT 0
40496: PPUSH
40497: PPUSH
// if exist_mode then
40498: LD_VAR 0 2
40502: IFFALSE 40527
// unit := CreateCharacter ( prefix & ident ) else
40504: LD_ADDR_VAR 0 5
40508: PUSH
40509: LD_VAR 0 3
40513: PUSH
40514: LD_VAR 0 1
40518: STR
40519: PPUSH
40520: CALL_OW 34
40524: ST_TO_ADDR
40525: GO 40542
// unit := NewCharacter ( ident ) ;
40527: LD_ADDR_VAR 0 5
40531: PUSH
40532: LD_VAR 0 1
40536: PPUSH
40537: CALL_OW 25
40541: ST_TO_ADDR
// result := unit ;
40542: LD_ADDR_VAR 0 4
40546: PUSH
40547: LD_VAR 0 5
40551: ST_TO_ADDR
// end ;
40552: LD_VAR 0 4
40556: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
40557: LD_INT 0
40559: PPUSH
40560: PPUSH
// if not side or not nation then
40561: LD_VAR 0 1
40565: NOT
40566: PUSH
40567: LD_VAR 0 2
40571: NOT
40572: OR
40573: IFFALSE 40577
// exit ;
40575: GO 41345
// case nation of nation_american :
40577: LD_VAR 0 2
40581: PUSH
40582: LD_INT 1
40584: DOUBLE
40585: EQUAL
40586: IFTRUE 40590
40588: GO 40804
40590: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
40591: LD_ADDR_VAR 0 4
40595: PUSH
40596: LD_INT 35
40598: PUSH
40599: LD_INT 45
40601: PUSH
40602: LD_INT 46
40604: PUSH
40605: LD_INT 47
40607: PUSH
40608: LD_INT 82
40610: PUSH
40611: LD_INT 83
40613: PUSH
40614: LD_INT 84
40616: PUSH
40617: LD_INT 85
40619: PUSH
40620: LD_INT 86
40622: PUSH
40623: LD_INT 1
40625: PUSH
40626: LD_INT 2
40628: PUSH
40629: LD_INT 6
40631: PUSH
40632: LD_INT 15
40634: PUSH
40635: LD_INT 16
40637: PUSH
40638: LD_INT 7
40640: PUSH
40641: LD_INT 12
40643: PUSH
40644: LD_INT 13
40646: PUSH
40647: LD_INT 10
40649: PUSH
40650: LD_INT 14
40652: PUSH
40653: LD_INT 20
40655: PUSH
40656: LD_INT 21
40658: PUSH
40659: LD_INT 22
40661: PUSH
40662: LD_INT 25
40664: PUSH
40665: LD_INT 32
40667: PUSH
40668: LD_INT 27
40670: PUSH
40671: LD_INT 36
40673: PUSH
40674: LD_INT 69
40676: PUSH
40677: LD_INT 39
40679: PUSH
40680: LD_INT 34
40682: PUSH
40683: LD_INT 40
40685: PUSH
40686: LD_INT 48
40688: PUSH
40689: LD_INT 49
40691: PUSH
40692: LD_INT 50
40694: PUSH
40695: LD_INT 51
40697: PUSH
40698: LD_INT 52
40700: PUSH
40701: LD_INT 53
40703: PUSH
40704: LD_INT 54
40706: PUSH
40707: LD_INT 55
40709: PUSH
40710: LD_INT 56
40712: PUSH
40713: LD_INT 57
40715: PUSH
40716: LD_INT 58
40718: PUSH
40719: LD_INT 59
40721: PUSH
40722: LD_INT 60
40724: PUSH
40725: LD_INT 61
40727: PUSH
40728: LD_INT 62
40730: PUSH
40731: LD_INT 80
40733: PUSH
40734: LD_INT 82
40736: PUSH
40737: LD_INT 83
40739: PUSH
40740: LD_INT 84
40742: PUSH
40743: LD_INT 85
40745: PUSH
40746: LD_INT 86
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: LIST
40753: LIST
40754: LIST
40755: LIST
40756: LIST
40757: LIST
40758: LIST
40759: LIST
40760: LIST
40761: LIST
40762: LIST
40763: LIST
40764: LIST
40765: LIST
40766: LIST
40767: LIST
40768: LIST
40769: LIST
40770: LIST
40771: LIST
40772: LIST
40773: LIST
40774: LIST
40775: LIST
40776: LIST
40777: LIST
40778: LIST
40779: LIST
40780: LIST
40781: LIST
40782: LIST
40783: LIST
40784: LIST
40785: LIST
40786: LIST
40787: LIST
40788: LIST
40789: LIST
40790: LIST
40791: LIST
40792: LIST
40793: LIST
40794: LIST
40795: LIST
40796: LIST
40797: LIST
40798: LIST
40799: LIST
40800: LIST
40801: ST_TO_ADDR
40802: GO 41269
40804: LD_INT 2
40806: DOUBLE
40807: EQUAL
40808: IFTRUE 40812
40810: GO 41038
40812: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
40813: LD_ADDR_VAR 0 4
40817: PUSH
40818: LD_INT 35
40820: PUSH
40821: LD_INT 45
40823: PUSH
40824: LD_INT 46
40826: PUSH
40827: LD_INT 47
40829: PUSH
40830: LD_INT 82
40832: PUSH
40833: LD_INT 83
40835: PUSH
40836: LD_INT 84
40838: PUSH
40839: LD_INT 85
40841: PUSH
40842: LD_INT 87
40844: PUSH
40845: LD_INT 70
40847: PUSH
40848: LD_INT 1
40850: PUSH
40851: LD_INT 11
40853: PUSH
40854: LD_INT 3
40856: PUSH
40857: LD_INT 4
40859: PUSH
40860: LD_INT 5
40862: PUSH
40863: LD_INT 6
40865: PUSH
40866: LD_INT 15
40868: PUSH
40869: LD_INT 18
40871: PUSH
40872: LD_INT 7
40874: PUSH
40875: LD_INT 17
40877: PUSH
40878: LD_INT 8
40880: PUSH
40881: LD_INT 20
40883: PUSH
40884: LD_INT 21
40886: PUSH
40887: LD_INT 22
40889: PUSH
40890: LD_INT 72
40892: PUSH
40893: LD_INT 26
40895: PUSH
40896: LD_INT 69
40898: PUSH
40899: LD_INT 39
40901: PUSH
40902: LD_INT 40
40904: PUSH
40905: LD_INT 41
40907: PUSH
40908: LD_INT 42
40910: PUSH
40911: LD_INT 43
40913: PUSH
40914: LD_INT 48
40916: PUSH
40917: LD_INT 49
40919: PUSH
40920: LD_INT 50
40922: PUSH
40923: LD_INT 51
40925: PUSH
40926: LD_INT 52
40928: PUSH
40929: LD_INT 53
40931: PUSH
40932: LD_INT 54
40934: PUSH
40935: LD_INT 55
40937: PUSH
40938: LD_INT 56
40940: PUSH
40941: LD_INT 60
40943: PUSH
40944: LD_INT 61
40946: PUSH
40947: LD_INT 62
40949: PUSH
40950: LD_INT 66
40952: PUSH
40953: LD_INT 67
40955: PUSH
40956: LD_INT 68
40958: PUSH
40959: LD_INT 81
40961: PUSH
40962: LD_INT 82
40964: PUSH
40965: LD_INT 83
40967: PUSH
40968: LD_INT 84
40970: PUSH
40971: LD_INT 85
40973: PUSH
40974: LD_INT 87
40976: PUSH
40977: LD_INT 88
40979: PUSH
40980: EMPTY
40981: LIST
40982: LIST
40983: LIST
40984: LIST
40985: LIST
40986: LIST
40987: LIST
40988: LIST
40989: LIST
40990: LIST
40991: LIST
40992: LIST
40993: LIST
40994: LIST
40995: LIST
40996: LIST
40997: LIST
40998: LIST
40999: LIST
41000: LIST
41001: LIST
41002: LIST
41003: LIST
41004: LIST
41005: LIST
41006: LIST
41007: LIST
41008: LIST
41009: LIST
41010: LIST
41011: LIST
41012: LIST
41013: LIST
41014: LIST
41015: LIST
41016: LIST
41017: LIST
41018: LIST
41019: LIST
41020: LIST
41021: LIST
41022: LIST
41023: LIST
41024: LIST
41025: LIST
41026: LIST
41027: LIST
41028: LIST
41029: LIST
41030: LIST
41031: LIST
41032: LIST
41033: LIST
41034: LIST
41035: ST_TO_ADDR
41036: GO 41269
41038: LD_INT 3
41040: DOUBLE
41041: EQUAL
41042: IFTRUE 41046
41044: GO 41268
41046: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
41047: LD_ADDR_VAR 0 4
41051: PUSH
41052: LD_INT 46
41054: PUSH
41055: LD_INT 47
41057: PUSH
41058: LD_INT 1
41060: PUSH
41061: LD_INT 2
41063: PUSH
41064: LD_INT 82
41066: PUSH
41067: LD_INT 83
41069: PUSH
41070: LD_INT 84
41072: PUSH
41073: LD_INT 85
41075: PUSH
41076: LD_INT 86
41078: PUSH
41079: LD_INT 11
41081: PUSH
41082: LD_INT 9
41084: PUSH
41085: LD_INT 20
41087: PUSH
41088: LD_INT 19
41090: PUSH
41091: LD_INT 21
41093: PUSH
41094: LD_INT 24
41096: PUSH
41097: LD_INT 22
41099: PUSH
41100: LD_INT 25
41102: PUSH
41103: LD_INT 28
41105: PUSH
41106: LD_INT 29
41108: PUSH
41109: LD_INT 30
41111: PUSH
41112: LD_INT 31
41114: PUSH
41115: LD_INT 37
41117: PUSH
41118: LD_INT 38
41120: PUSH
41121: LD_INT 32
41123: PUSH
41124: LD_INT 27
41126: PUSH
41127: LD_INT 33
41129: PUSH
41130: LD_INT 69
41132: PUSH
41133: LD_INT 39
41135: PUSH
41136: LD_INT 34
41138: PUSH
41139: LD_INT 40
41141: PUSH
41142: LD_INT 71
41144: PUSH
41145: LD_INT 23
41147: PUSH
41148: LD_INT 44
41150: PUSH
41151: LD_INT 48
41153: PUSH
41154: LD_INT 49
41156: PUSH
41157: LD_INT 50
41159: PUSH
41160: LD_INT 51
41162: PUSH
41163: LD_INT 52
41165: PUSH
41166: LD_INT 53
41168: PUSH
41169: LD_INT 54
41171: PUSH
41172: LD_INT 55
41174: PUSH
41175: LD_INT 56
41177: PUSH
41178: LD_INT 57
41180: PUSH
41181: LD_INT 58
41183: PUSH
41184: LD_INT 59
41186: PUSH
41187: LD_INT 63
41189: PUSH
41190: LD_INT 64
41192: PUSH
41193: LD_INT 65
41195: PUSH
41196: LD_INT 82
41198: PUSH
41199: LD_INT 83
41201: PUSH
41202: LD_INT 84
41204: PUSH
41205: LD_INT 85
41207: PUSH
41208: LD_INT 86
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: LIST
41215: LIST
41216: LIST
41217: LIST
41218: LIST
41219: LIST
41220: LIST
41221: LIST
41222: LIST
41223: LIST
41224: LIST
41225: LIST
41226: LIST
41227: LIST
41228: LIST
41229: LIST
41230: LIST
41231: LIST
41232: LIST
41233: LIST
41234: LIST
41235: LIST
41236: LIST
41237: LIST
41238: LIST
41239: LIST
41240: LIST
41241: LIST
41242: LIST
41243: LIST
41244: LIST
41245: LIST
41246: LIST
41247: LIST
41248: LIST
41249: LIST
41250: LIST
41251: LIST
41252: LIST
41253: LIST
41254: LIST
41255: LIST
41256: LIST
41257: LIST
41258: LIST
41259: LIST
41260: LIST
41261: LIST
41262: LIST
41263: LIST
41264: LIST
41265: ST_TO_ADDR
41266: GO 41269
41268: POP
// if state > - 1 and state < 3 then
41269: LD_VAR 0 3
41273: PUSH
41274: LD_INT 1
41276: NEG
41277: GREATER
41278: PUSH
41279: LD_VAR 0 3
41283: PUSH
41284: LD_INT 3
41286: LESS
41287: AND
41288: IFFALSE 41345
// for i in result do
41290: LD_ADDR_VAR 0 5
41294: PUSH
41295: LD_VAR 0 4
41299: PUSH
41300: FOR_IN
41301: IFFALSE 41343
// if GetTech ( i , side ) <> state then
41303: LD_VAR 0 5
41307: PPUSH
41308: LD_VAR 0 1
41312: PPUSH
41313: CALL_OW 321
41317: PUSH
41318: LD_VAR 0 3
41322: NONEQUAL
41323: IFFALSE 41341
// result := result diff i ;
41325: LD_ADDR_VAR 0 4
41329: PUSH
41330: LD_VAR 0 4
41334: PUSH
41335: LD_VAR 0 5
41339: DIFF
41340: ST_TO_ADDR
41341: GO 41300
41343: POP
41344: POP
// end ;
41345: LD_VAR 0 4
41349: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
41350: LD_INT 0
41352: PPUSH
41353: PPUSH
41354: PPUSH
// result := true ;
41355: LD_ADDR_VAR 0 3
41359: PUSH
41360: LD_INT 1
41362: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
41363: LD_ADDR_VAR 0 5
41367: PUSH
41368: LD_VAR 0 2
41372: PPUSH
41373: CALL_OW 480
41377: ST_TO_ADDR
// if not tmp then
41378: LD_VAR 0 5
41382: NOT
41383: IFFALSE 41387
// exit ;
41385: GO 41436
// for i in tmp do
41387: LD_ADDR_VAR 0 4
41391: PUSH
41392: LD_VAR 0 5
41396: PUSH
41397: FOR_IN
41398: IFFALSE 41434
// if GetTech ( i , side ) <> state_researched then
41400: LD_VAR 0 4
41404: PPUSH
41405: LD_VAR 0 1
41409: PPUSH
41410: CALL_OW 321
41414: PUSH
41415: LD_INT 2
41417: NONEQUAL
41418: IFFALSE 41432
// begin result := false ;
41420: LD_ADDR_VAR 0 3
41424: PUSH
41425: LD_INT 0
41427: ST_TO_ADDR
// exit ;
41428: POP
41429: POP
41430: GO 41436
// end ;
41432: GO 41397
41434: POP
41435: POP
// end ;
41436: LD_VAR 0 3
41440: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
41441: LD_INT 0
41443: PPUSH
41444: PPUSH
41445: PPUSH
41446: PPUSH
41447: PPUSH
41448: PPUSH
41449: PPUSH
41450: PPUSH
41451: PPUSH
41452: PPUSH
41453: PPUSH
41454: PPUSH
41455: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
41456: LD_VAR 0 1
41460: NOT
41461: PUSH
41462: LD_VAR 0 1
41466: PPUSH
41467: CALL_OW 257
41471: PUSH
41472: LD_INT 9
41474: NONEQUAL
41475: OR
41476: IFFALSE 41480
// exit ;
41478: GO 42053
// side := GetSide ( unit ) ;
41480: LD_ADDR_VAR 0 9
41484: PUSH
41485: LD_VAR 0 1
41489: PPUSH
41490: CALL_OW 255
41494: ST_TO_ADDR
// tech_space := tech_spacanom ;
41495: LD_ADDR_VAR 0 12
41499: PUSH
41500: LD_INT 29
41502: ST_TO_ADDR
// tech_time := tech_taurad ;
41503: LD_ADDR_VAR 0 13
41507: PUSH
41508: LD_INT 28
41510: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
41511: LD_ADDR_VAR 0 11
41515: PUSH
41516: LD_VAR 0 1
41520: PPUSH
41521: CALL_OW 310
41525: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
41526: LD_VAR 0 11
41530: PPUSH
41531: CALL_OW 247
41535: PUSH
41536: LD_INT 2
41538: EQUAL
41539: IFFALSE 41543
// exit ;
41541: GO 42053
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41543: LD_ADDR_VAR 0 8
41547: PUSH
41548: LD_INT 81
41550: PUSH
41551: LD_VAR 0 9
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: PUSH
41560: LD_INT 3
41562: PUSH
41563: LD_INT 21
41565: PUSH
41566: LD_INT 3
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: PUSH
41573: EMPTY
41574: LIST
41575: LIST
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PPUSH
41581: CALL_OW 69
41585: ST_TO_ADDR
// if not tmp then
41586: LD_VAR 0 8
41590: NOT
41591: IFFALSE 41595
// exit ;
41593: GO 42053
// if in_unit then
41595: LD_VAR 0 11
41599: IFFALSE 41623
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
41601: LD_ADDR_VAR 0 10
41605: PUSH
41606: LD_VAR 0 8
41610: PPUSH
41611: LD_VAR 0 11
41615: PPUSH
41616: CALL_OW 74
41620: ST_TO_ADDR
41621: GO 41643
// enemy := NearestUnitToUnit ( tmp , unit ) ;
41623: LD_ADDR_VAR 0 10
41627: PUSH
41628: LD_VAR 0 8
41632: PPUSH
41633: LD_VAR 0 1
41637: PPUSH
41638: CALL_OW 74
41642: ST_TO_ADDR
// if not enemy then
41643: LD_VAR 0 10
41647: NOT
41648: IFFALSE 41652
// exit ;
41650: GO 42053
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
41652: LD_VAR 0 11
41656: PUSH
41657: LD_VAR 0 11
41661: PPUSH
41662: LD_VAR 0 10
41666: PPUSH
41667: CALL_OW 296
41671: PUSH
41672: LD_INT 13
41674: GREATER
41675: AND
41676: PUSH
41677: LD_VAR 0 1
41681: PPUSH
41682: LD_VAR 0 10
41686: PPUSH
41687: CALL_OW 296
41691: PUSH
41692: LD_INT 12
41694: GREATER
41695: OR
41696: IFFALSE 41700
// exit ;
41698: GO 42053
// missile := [ 1 ] ;
41700: LD_ADDR_VAR 0 14
41704: PUSH
41705: LD_INT 1
41707: PUSH
41708: EMPTY
41709: LIST
41710: ST_TO_ADDR
// if Researched ( side , tech_space ) then
41711: LD_VAR 0 9
41715: PPUSH
41716: LD_VAR 0 12
41720: PPUSH
41721: CALL_OW 325
41725: IFFALSE 41754
// missile := Replace ( missile , missile + 1 , 2 ) ;
41727: LD_ADDR_VAR 0 14
41731: PUSH
41732: LD_VAR 0 14
41736: PPUSH
41737: LD_VAR 0 14
41741: PUSH
41742: LD_INT 1
41744: PLUS
41745: PPUSH
41746: LD_INT 2
41748: PPUSH
41749: CALL_OW 1
41753: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
41754: LD_VAR 0 9
41758: PPUSH
41759: LD_VAR 0 13
41763: PPUSH
41764: CALL_OW 325
41768: PUSH
41769: LD_VAR 0 10
41773: PPUSH
41774: CALL_OW 255
41778: PPUSH
41779: LD_VAR 0 13
41783: PPUSH
41784: CALL_OW 325
41788: NOT
41789: AND
41790: IFFALSE 41819
// missile := Replace ( missile , missile + 1 , 3 ) ;
41792: LD_ADDR_VAR 0 14
41796: PUSH
41797: LD_VAR 0 14
41801: PPUSH
41802: LD_VAR 0 14
41806: PUSH
41807: LD_INT 1
41809: PLUS
41810: PPUSH
41811: LD_INT 3
41813: PPUSH
41814: CALL_OW 1
41818: ST_TO_ADDR
// if missile < 2 then
41819: LD_VAR 0 14
41823: PUSH
41824: LD_INT 2
41826: LESS
41827: IFFALSE 41831
// exit ;
41829: GO 42053
// x := GetX ( enemy ) ;
41831: LD_ADDR_VAR 0 4
41835: PUSH
41836: LD_VAR 0 10
41840: PPUSH
41841: CALL_OW 250
41845: ST_TO_ADDR
// y := GetY ( enemy ) ;
41846: LD_ADDR_VAR 0 5
41850: PUSH
41851: LD_VAR 0 10
41855: PPUSH
41856: CALL_OW 251
41860: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
41861: LD_ADDR_VAR 0 6
41865: PUSH
41866: LD_VAR 0 4
41870: PUSH
41871: LD_INT 1
41873: NEG
41874: PPUSH
41875: LD_INT 1
41877: PPUSH
41878: CALL_OW 12
41882: PLUS
41883: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
41884: LD_ADDR_VAR 0 7
41888: PUSH
41889: LD_VAR 0 5
41893: PUSH
41894: LD_INT 1
41896: NEG
41897: PPUSH
41898: LD_INT 1
41900: PPUSH
41901: CALL_OW 12
41905: PLUS
41906: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41907: LD_VAR 0 6
41911: PPUSH
41912: LD_VAR 0 7
41916: PPUSH
41917: CALL_OW 488
41921: NOT
41922: IFFALSE 41944
// begin _x := x ;
41924: LD_ADDR_VAR 0 6
41928: PUSH
41929: LD_VAR 0 4
41933: ST_TO_ADDR
// _y := y ;
41934: LD_ADDR_VAR 0 7
41938: PUSH
41939: LD_VAR 0 5
41943: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
41944: LD_ADDR_VAR 0 3
41948: PUSH
41949: LD_INT 1
41951: PPUSH
41952: LD_VAR 0 14
41956: PPUSH
41957: CALL_OW 12
41961: ST_TO_ADDR
// case i of 1 :
41962: LD_VAR 0 3
41966: PUSH
41967: LD_INT 1
41969: DOUBLE
41970: EQUAL
41971: IFTRUE 41975
41973: GO 41992
41975: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
41976: LD_VAR 0 1
41980: PPUSH
41981: LD_VAR 0 10
41985: PPUSH
41986: CALL_OW 115
41990: GO 42053
41992: LD_INT 2
41994: DOUBLE
41995: EQUAL
41996: IFTRUE 42000
41998: GO 42022
42000: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
42001: LD_VAR 0 1
42005: PPUSH
42006: LD_VAR 0 6
42010: PPUSH
42011: LD_VAR 0 7
42015: PPUSH
42016: CALL_OW 153
42020: GO 42053
42022: LD_INT 3
42024: DOUBLE
42025: EQUAL
42026: IFTRUE 42030
42028: GO 42052
42030: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
42031: LD_VAR 0 1
42035: PPUSH
42036: LD_VAR 0 6
42040: PPUSH
42041: LD_VAR 0 7
42045: PPUSH
42046: CALL_OW 154
42050: GO 42053
42052: POP
// end ;
42053: LD_VAR 0 2
42057: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
42058: LD_INT 0
42060: PPUSH
42061: PPUSH
42062: PPUSH
42063: PPUSH
42064: PPUSH
42065: PPUSH
// if not unit or not building then
42066: LD_VAR 0 1
42070: NOT
42071: PUSH
42072: LD_VAR 0 2
42076: NOT
42077: OR
42078: IFFALSE 42082
// exit ;
42080: GO 42240
// x := GetX ( building ) ;
42082: LD_ADDR_VAR 0 5
42086: PUSH
42087: LD_VAR 0 2
42091: PPUSH
42092: CALL_OW 250
42096: ST_TO_ADDR
// y := GetY ( building ) ;
42097: LD_ADDR_VAR 0 6
42101: PUSH
42102: LD_VAR 0 2
42106: PPUSH
42107: CALL_OW 251
42111: ST_TO_ADDR
// for i = 0 to 5 do
42112: LD_ADDR_VAR 0 4
42116: PUSH
42117: DOUBLE
42118: LD_INT 0
42120: DEC
42121: ST_TO_ADDR
42122: LD_INT 5
42124: PUSH
42125: FOR_TO
42126: IFFALSE 42238
// begin _x := ShiftX ( x , i , 3 ) ;
42128: LD_ADDR_VAR 0 7
42132: PUSH
42133: LD_VAR 0 5
42137: PPUSH
42138: LD_VAR 0 4
42142: PPUSH
42143: LD_INT 3
42145: PPUSH
42146: CALL_OW 272
42150: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
42151: LD_ADDR_VAR 0 8
42155: PUSH
42156: LD_VAR 0 6
42160: PPUSH
42161: LD_VAR 0 4
42165: PPUSH
42166: LD_INT 3
42168: PPUSH
42169: CALL_OW 273
42173: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42174: LD_VAR 0 7
42178: PPUSH
42179: LD_VAR 0 8
42183: PPUSH
42184: CALL_OW 488
42188: NOT
42189: IFFALSE 42193
// continue ;
42191: GO 42125
// if HexInfo ( _x , _y ) = 0 then
42193: LD_VAR 0 7
42197: PPUSH
42198: LD_VAR 0 8
42202: PPUSH
42203: CALL_OW 428
42207: PUSH
42208: LD_INT 0
42210: EQUAL
42211: IFFALSE 42236
// begin ComMoveXY ( unit , _x , _y ) ;
42213: LD_VAR 0 1
42217: PPUSH
42218: LD_VAR 0 7
42222: PPUSH
42223: LD_VAR 0 8
42227: PPUSH
42228: CALL_OW 111
// exit ;
42232: POP
42233: POP
42234: GO 42240
// end ; end ;
42236: GO 42125
42238: POP
42239: POP
// end ;
42240: LD_VAR 0 3
42244: RET
// export function ScanBase ( side , base_area ) ; begin
42245: LD_INT 0
42247: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
42248: LD_ADDR_VAR 0 3
42252: PUSH
42253: LD_VAR 0 2
42257: PPUSH
42258: LD_INT 81
42260: PUSH
42261: LD_VAR 0 1
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: PPUSH
42270: CALL_OW 70
42274: ST_TO_ADDR
// end ;
42275: LD_VAR 0 3
42279: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
42280: LD_INT 0
42282: PPUSH
42283: PPUSH
42284: PPUSH
42285: PPUSH
// result := false ;
42286: LD_ADDR_VAR 0 2
42290: PUSH
42291: LD_INT 0
42293: ST_TO_ADDR
// side := GetSide ( unit ) ;
42294: LD_ADDR_VAR 0 3
42298: PUSH
42299: LD_VAR 0 1
42303: PPUSH
42304: CALL_OW 255
42308: ST_TO_ADDR
// nat := GetNation ( unit ) ;
42309: LD_ADDR_VAR 0 4
42313: PUSH
42314: LD_VAR 0 1
42318: PPUSH
42319: CALL_OW 248
42323: ST_TO_ADDR
// case nat of 1 :
42324: LD_VAR 0 4
42328: PUSH
42329: LD_INT 1
42331: DOUBLE
42332: EQUAL
42333: IFTRUE 42337
42335: GO 42348
42337: POP
// tech := tech_lassight ; 2 :
42338: LD_ADDR_VAR 0 5
42342: PUSH
42343: LD_INT 12
42345: ST_TO_ADDR
42346: GO 42387
42348: LD_INT 2
42350: DOUBLE
42351: EQUAL
42352: IFTRUE 42356
42354: GO 42367
42356: POP
// tech := tech_mortar ; 3 :
42357: LD_ADDR_VAR 0 5
42361: PUSH
42362: LD_INT 41
42364: ST_TO_ADDR
42365: GO 42387
42367: LD_INT 3
42369: DOUBLE
42370: EQUAL
42371: IFTRUE 42375
42373: GO 42386
42375: POP
// tech := tech_bazooka ; end ;
42376: LD_ADDR_VAR 0 5
42380: PUSH
42381: LD_INT 44
42383: ST_TO_ADDR
42384: GO 42387
42386: POP
// if Researched ( side , tech ) then
42387: LD_VAR 0 3
42391: PPUSH
42392: LD_VAR 0 5
42396: PPUSH
42397: CALL_OW 325
42401: IFFALSE 42428
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
42403: LD_ADDR_VAR 0 2
42407: PUSH
42408: LD_INT 5
42410: PUSH
42411: LD_INT 8
42413: PUSH
42414: LD_INT 9
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: LIST
42421: PUSH
42422: LD_VAR 0 4
42426: ARRAY
42427: ST_TO_ADDR
// end ;
42428: LD_VAR 0 2
42432: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
42433: LD_INT 0
42435: PPUSH
42436: PPUSH
42437: PPUSH
// if not mines then
42438: LD_VAR 0 2
42442: NOT
42443: IFFALSE 42447
// exit ;
42445: GO 42591
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42447: LD_ADDR_VAR 0 5
42451: PUSH
42452: LD_INT 81
42454: PUSH
42455: LD_VAR 0 1
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PUSH
42464: LD_INT 3
42466: PUSH
42467: LD_INT 21
42469: PUSH
42470: LD_INT 3
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: PPUSH
42485: CALL_OW 69
42489: ST_TO_ADDR
// for i in mines do
42490: LD_ADDR_VAR 0 4
42494: PUSH
42495: LD_VAR 0 2
42499: PUSH
42500: FOR_IN
42501: IFFALSE 42589
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
42503: LD_VAR 0 4
42507: PUSH
42508: LD_INT 1
42510: ARRAY
42511: PPUSH
42512: LD_VAR 0 4
42516: PUSH
42517: LD_INT 2
42519: ARRAY
42520: PPUSH
42521: CALL_OW 458
42525: NOT
42526: IFFALSE 42530
// continue ;
42528: GO 42500
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
42530: LD_VAR 0 4
42534: PUSH
42535: LD_INT 1
42537: ARRAY
42538: PPUSH
42539: LD_VAR 0 4
42543: PUSH
42544: LD_INT 2
42546: ARRAY
42547: PPUSH
42548: CALL_OW 428
42552: PUSH
42553: LD_VAR 0 5
42557: IN
42558: IFFALSE 42587
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
42560: LD_VAR 0 4
42564: PUSH
42565: LD_INT 1
42567: ARRAY
42568: PPUSH
42569: LD_VAR 0 4
42573: PUSH
42574: LD_INT 2
42576: ARRAY
42577: PPUSH
42578: LD_VAR 0 1
42582: PPUSH
42583: CALL_OW 456
// end ;
42587: GO 42500
42589: POP
42590: POP
// end ;
42591: LD_VAR 0 3
42595: RET
// export function Count ( array ) ; begin
42596: LD_INT 0
42598: PPUSH
// result := array + 0 ;
42599: LD_ADDR_VAR 0 2
42603: PUSH
42604: LD_VAR 0 1
42608: PUSH
42609: LD_INT 0
42611: PLUS
42612: ST_TO_ADDR
// end ;
42613: LD_VAR 0 2
42617: RET
// export function IsEmpty ( building ) ; begin
42618: LD_INT 0
42620: PPUSH
// if not building then
42621: LD_VAR 0 1
42625: NOT
42626: IFFALSE 42630
// exit ;
42628: GO 42673
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
42630: LD_ADDR_VAR 0 2
42634: PUSH
42635: LD_VAR 0 1
42639: PUSH
42640: LD_INT 22
42642: PUSH
42643: LD_VAR 0 1
42647: PPUSH
42648: CALL_OW 255
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PUSH
42657: LD_INT 58
42659: PUSH
42660: EMPTY
42661: LIST
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: PPUSH
42667: CALL_OW 69
42671: IN
42672: ST_TO_ADDR
// end ;
42673: LD_VAR 0 2
42677: RET
// export function IsNotFull ( building ) ; var places ; begin
42678: LD_INT 0
42680: PPUSH
42681: PPUSH
// if not building then
42682: LD_VAR 0 1
42686: NOT
42687: IFFALSE 42691
// exit ;
42689: GO 42719
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
42691: LD_ADDR_VAR 0 2
42695: PUSH
42696: LD_VAR 0 1
42700: PPUSH
42701: LD_INT 3
42703: PUSH
42704: LD_INT 62
42706: PUSH
42707: EMPTY
42708: LIST
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: PPUSH
42714: CALL_OW 72
42718: ST_TO_ADDR
// end ;
42719: LD_VAR 0 2
42723: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
42724: LD_INT 0
42726: PPUSH
42727: PPUSH
42728: PPUSH
42729: PPUSH
// tmp := [ ] ;
42730: LD_ADDR_VAR 0 3
42734: PUSH
42735: EMPTY
42736: ST_TO_ADDR
// list := [ ] ;
42737: LD_ADDR_VAR 0 5
42741: PUSH
42742: EMPTY
42743: ST_TO_ADDR
// for i = 16 to 25 do
42744: LD_ADDR_VAR 0 4
42748: PUSH
42749: DOUBLE
42750: LD_INT 16
42752: DEC
42753: ST_TO_ADDR
42754: LD_INT 25
42756: PUSH
42757: FOR_TO
42758: IFFALSE 42831
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
42760: LD_ADDR_VAR 0 3
42764: PUSH
42765: LD_VAR 0 3
42769: PUSH
42770: LD_INT 22
42772: PUSH
42773: LD_VAR 0 1
42777: PPUSH
42778: CALL_OW 255
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: LD_INT 91
42789: PUSH
42790: LD_VAR 0 1
42794: PUSH
42795: LD_INT 6
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: LIST
42802: PUSH
42803: LD_INT 30
42805: PUSH
42806: LD_VAR 0 4
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: LIST
42819: PUSH
42820: EMPTY
42821: LIST
42822: PPUSH
42823: CALL_OW 69
42827: ADD
42828: ST_TO_ADDR
42829: GO 42757
42831: POP
42832: POP
// for i = 1 to tmp do
42833: LD_ADDR_VAR 0 4
42837: PUSH
42838: DOUBLE
42839: LD_INT 1
42841: DEC
42842: ST_TO_ADDR
42843: LD_VAR 0 3
42847: PUSH
42848: FOR_TO
42849: IFFALSE 42937
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
42851: LD_ADDR_VAR 0 5
42855: PUSH
42856: LD_VAR 0 5
42860: PUSH
42861: LD_VAR 0 3
42865: PUSH
42866: LD_VAR 0 4
42870: ARRAY
42871: PPUSH
42872: CALL_OW 266
42876: PUSH
42877: LD_VAR 0 3
42881: PUSH
42882: LD_VAR 0 4
42886: ARRAY
42887: PPUSH
42888: CALL_OW 250
42892: PUSH
42893: LD_VAR 0 3
42897: PUSH
42898: LD_VAR 0 4
42902: ARRAY
42903: PPUSH
42904: CALL_OW 251
42908: PUSH
42909: LD_VAR 0 3
42913: PUSH
42914: LD_VAR 0 4
42918: ARRAY
42919: PPUSH
42920: CALL_OW 254
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: LIST
42929: LIST
42930: PUSH
42931: EMPTY
42932: LIST
42933: ADD
42934: ST_TO_ADDR
42935: GO 42848
42937: POP
42938: POP
// result := list ;
42939: LD_ADDR_VAR 0 2
42943: PUSH
42944: LD_VAR 0 5
42948: ST_TO_ADDR
// end ;
42949: LD_VAR 0 2
42953: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
42954: LD_INT 0
42956: PPUSH
42957: PPUSH
42958: PPUSH
42959: PPUSH
42960: PPUSH
42961: PPUSH
42962: PPUSH
// if not factory then
42963: LD_VAR 0 1
42967: NOT
42968: IFFALSE 42972
// exit ;
42970: GO 43565
// if control = control_apeman then
42972: LD_VAR 0 4
42976: PUSH
42977: LD_INT 5
42979: EQUAL
42980: IFFALSE 43089
// begin tmp := UnitsInside ( factory ) ;
42982: LD_ADDR_VAR 0 8
42986: PUSH
42987: LD_VAR 0 1
42991: PPUSH
42992: CALL_OW 313
42996: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
42997: LD_VAR 0 8
43001: PPUSH
43002: LD_INT 25
43004: PUSH
43005: LD_INT 12
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: PPUSH
43012: CALL_OW 72
43016: NOT
43017: IFFALSE 43027
// control := control_manual ;
43019: LD_ADDR_VAR 0 4
43023: PUSH
43024: LD_INT 1
43026: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
43027: LD_ADDR_VAR 0 8
43031: PUSH
43032: LD_VAR 0 1
43036: PPUSH
43037: CALL 42724 0 1
43041: ST_TO_ADDR
// if tmp then
43042: LD_VAR 0 8
43046: IFFALSE 43089
// begin for i in tmp do
43048: LD_ADDR_VAR 0 7
43052: PUSH
43053: LD_VAR 0 8
43057: PUSH
43058: FOR_IN
43059: IFFALSE 43087
// if i [ 1 ] = b_ext_radio then
43061: LD_VAR 0 7
43065: PUSH
43066: LD_INT 1
43068: ARRAY
43069: PUSH
43070: LD_INT 22
43072: EQUAL
43073: IFFALSE 43085
// begin control := control_remote ;
43075: LD_ADDR_VAR 0 4
43079: PUSH
43080: LD_INT 2
43082: ST_TO_ADDR
// break ;
43083: GO 43087
// end ;
43085: GO 43058
43087: POP
43088: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43089: LD_VAR 0 1
43093: PPUSH
43094: LD_VAR 0 2
43098: PPUSH
43099: LD_VAR 0 3
43103: PPUSH
43104: LD_VAR 0 4
43108: PPUSH
43109: LD_VAR 0 5
43113: PPUSH
43114: CALL_OW 448
43118: IFFALSE 43153
// begin result := [ chassis , engine , control , weapon ] ;
43120: LD_ADDR_VAR 0 6
43124: PUSH
43125: LD_VAR 0 2
43129: PUSH
43130: LD_VAR 0 3
43134: PUSH
43135: LD_VAR 0 4
43139: PUSH
43140: LD_VAR 0 5
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: LIST
43149: LIST
43150: ST_TO_ADDR
// exit ;
43151: GO 43565
// end ; _chassis := AvailableChassisList ( factory ) ;
43153: LD_ADDR_VAR 0 9
43157: PUSH
43158: LD_VAR 0 1
43162: PPUSH
43163: CALL_OW 475
43167: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
43168: LD_ADDR_VAR 0 11
43172: PUSH
43173: LD_VAR 0 1
43177: PPUSH
43178: CALL_OW 476
43182: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
43183: LD_ADDR_VAR 0 12
43187: PUSH
43188: LD_VAR 0 1
43192: PPUSH
43193: CALL_OW 477
43197: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
43198: LD_ADDR_VAR 0 10
43202: PUSH
43203: LD_VAR 0 1
43207: PPUSH
43208: CALL_OW 478
43212: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
43213: LD_VAR 0 9
43217: NOT
43218: PUSH
43219: LD_VAR 0 11
43223: NOT
43224: OR
43225: PUSH
43226: LD_VAR 0 12
43230: NOT
43231: OR
43232: PUSH
43233: LD_VAR 0 10
43237: NOT
43238: OR
43239: IFFALSE 43274
// begin result := [ chassis , engine , control , weapon ] ;
43241: LD_ADDR_VAR 0 6
43245: PUSH
43246: LD_VAR 0 2
43250: PUSH
43251: LD_VAR 0 3
43255: PUSH
43256: LD_VAR 0 4
43260: PUSH
43261: LD_VAR 0 5
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: LIST
43270: LIST
43271: ST_TO_ADDR
// exit ;
43272: GO 43565
// end ; if not chassis in _chassis then
43274: LD_VAR 0 2
43278: PUSH
43279: LD_VAR 0 9
43283: IN
43284: NOT
43285: IFFALSE 43311
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
43287: LD_ADDR_VAR 0 2
43291: PUSH
43292: LD_VAR 0 9
43296: PUSH
43297: LD_INT 1
43299: PPUSH
43300: LD_VAR 0 9
43304: PPUSH
43305: CALL_OW 12
43309: ARRAY
43310: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
43311: LD_VAR 0 2
43315: PPUSH
43316: LD_VAR 0 3
43320: PPUSH
43321: CALL 43570 0 2
43325: NOT
43326: IFFALSE 43385
// repeat engine := _engine [ 1 ] ;
43328: LD_ADDR_VAR 0 3
43332: PUSH
43333: LD_VAR 0 11
43337: PUSH
43338: LD_INT 1
43340: ARRAY
43341: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
43342: LD_ADDR_VAR 0 11
43346: PUSH
43347: LD_VAR 0 11
43351: PPUSH
43352: LD_INT 1
43354: PPUSH
43355: CALL_OW 3
43359: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
43360: LD_VAR 0 2
43364: PPUSH
43365: LD_VAR 0 3
43369: PPUSH
43370: CALL 43570 0 2
43374: PUSH
43375: LD_VAR 0 11
43379: PUSH
43380: EMPTY
43381: EQUAL
43382: OR
43383: IFFALSE 43328
// if not control in _control then
43385: LD_VAR 0 4
43389: PUSH
43390: LD_VAR 0 12
43394: IN
43395: NOT
43396: IFFALSE 43422
// control := _control [ rand ( 1 , _control ) ] ;
43398: LD_ADDR_VAR 0 4
43402: PUSH
43403: LD_VAR 0 12
43407: PUSH
43408: LD_INT 1
43410: PPUSH
43411: LD_VAR 0 12
43415: PPUSH
43416: CALL_OW 12
43420: ARRAY
43421: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
43422: LD_VAR 0 2
43426: PPUSH
43427: LD_VAR 0 5
43431: PPUSH
43432: CALL 43790 0 2
43436: NOT
43437: IFFALSE 43496
// repeat weapon := _weapon [ 1 ] ;
43439: LD_ADDR_VAR 0 5
43443: PUSH
43444: LD_VAR 0 10
43448: PUSH
43449: LD_INT 1
43451: ARRAY
43452: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
43453: LD_ADDR_VAR 0 10
43457: PUSH
43458: LD_VAR 0 10
43462: PPUSH
43463: LD_INT 1
43465: PPUSH
43466: CALL_OW 3
43470: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
43471: LD_VAR 0 2
43475: PPUSH
43476: LD_VAR 0 5
43480: PPUSH
43481: CALL 43790 0 2
43485: PUSH
43486: LD_VAR 0 10
43490: PUSH
43491: EMPTY
43492: EQUAL
43493: OR
43494: IFFALSE 43439
// result := [ ] ;
43496: LD_ADDR_VAR 0 6
43500: PUSH
43501: EMPTY
43502: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43503: LD_VAR 0 1
43507: PPUSH
43508: LD_VAR 0 2
43512: PPUSH
43513: LD_VAR 0 3
43517: PPUSH
43518: LD_VAR 0 4
43522: PPUSH
43523: LD_VAR 0 5
43527: PPUSH
43528: CALL_OW 448
43532: IFFALSE 43565
// result := [ chassis , engine , control , weapon ] ;
43534: LD_ADDR_VAR 0 6
43538: PUSH
43539: LD_VAR 0 2
43543: PUSH
43544: LD_VAR 0 3
43548: PUSH
43549: LD_VAR 0 4
43553: PUSH
43554: LD_VAR 0 5
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: ST_TO_ADDR
// end ;
43565: LD_VAR 0 6
43569: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
43570: LD_INT 0
43572: PPUSH
// if not chassis or not engine then
43573: LD_VAR 0 1
43577: NOT
43578: PUSH
43579: LD_VAR 0 2
43583: NOT
43584: OR
43585: IFFALSE 43589
// exit ;
43587: GO 43785
// case engine of engine_solar :
43589: LD_VAR 0 2
43593: PUSH
43594: LD_INT 2
43596: DOUBLE
43597: EQUAL
43598: IFTRUE 43602
43600: GO 43640
43602: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
43603: LD_ADDR_VAR 0 3
43607: PUSH
43608: LD_INT 11
43610: PUSH
43611: LD_INT 12
43613: PUSH
43614: LD_INT 13
43616: PUSH
43617: LD_INT 14
43619: PUSH
43620: LD_INT 1
43622: PUSH
43623: LD_INT 2
43625: PUSH
43626: LD_INT 3
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: LIST
43633: LIST
43634: LIST
43635: LIST
43636: LIST
43637: ST_TO_ADDR
43638: GO 43769
43640: LD_INT 1
43642: DOUBLE
43643: EQUAL
43644: IFTRUE 43648
43646: GO 43710
43648: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
43649: LD_ADDR_VAR 0 3
43653: PUSH
43654: LD_INT 11
43656: PUSH
43657: LD_INT 12
43659: PUSH
43660: LD_INT 13
43662: PUSH
43663: LD_INT 14
43665: PUSH
43666: LD_INT 1
43668: PUSH
43669: LD_INT 2
43671: PUSH
43672: LD_INT 3
43674: PUSH
43675: LD_INT 4
43677: PUSH
43678: LD_INT 5
43680: PUSH
43681: LD_INT 21
43683: PUSH
43684: LD_INT 23
43686: PUSH
43687: LD_INT 22
43689: PUSH
43690: LD_INT 24
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: LIST
43697: LIST
43698: LIST
43699: LIST
43700: LIST
43701: LIST
43702: LIST
43703: LIST
43704: LIST
43705: LIST
43706: LIST
43707: ST_TO_ADDR
43708: GO 43769
43710: LD_INT 3
43712: DOUBLE
43713: EQUAL
43714: IFTRUE 43718
43716: GO 43768
43718: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43719: LD_ADDR_VAR 0 3
43723: PUSH
43724: LD_INT 13
43726: PUSH
43727: LD_INT 14
43729: PUSH
43730: LD_INT 2
43732: PUSH
43733: LD_INT 3
43735: PUSH
43736: LD_INT 4
43738: PUSH
43739: LD_INT 5
43741: PUSH
43742: LD_INT 21
43744: PUSH
43745: LD_INT 22
43747: PUSH
43748: LD_INT 23
43750: PUSH
43751: LD_INT 24
43753: PUSH
43754: EMPTY
43755: LIST
43756: LIST
43757: LIST
43758: LIST
43759: LIST
43760: LIST
43761: LIST
43762: LIST
43763: LIST
43764: LIST
43765: ST_TO_ADDR
43766: GO 43769
43768: POP
// result := ( chassis in result ) ;
43769: LD_ADDR_VAR 0 3
43773: PUSH
43774: LD_VAR 0 1
43778: PUSH
43779: LD_VAR 0 3
43783: IN
43784: ST_TO_ADDR
// end ;
43785: LD_VAR 0 3
43789: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
43790: LD_INT 0
43792: PPUSH
// if not chassis or not weapon then
43793: LD_VAR 0 1
43797: NOT
43798: PUSH
43799: LD_VAR 0 2
43803: NOT
43804: OR
43805: IFFALSE 43809
// exit ;
43807: GO 44869
// case weapon of us_machine_gun :
43809: LD_VAR 0 2
43813: PUSH
43814: LD_INT 2
43816: DOUBLE
43817: EQUAL
43818: IFTRUE 43822
43820: GO 43852
43822: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
43823: LD_ADDR_VAR 0 3
43827: PUSH
43828: LD_INT 1
43830: PUSH
43831: LD_INT 2
43833: PUSH
43834: LD_INT 3
43836: PUSH
43837: LD_INT 4
43839: PUSH
43840: LD_INT 5
43842: PUSH
43843: EMPTY
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: ST_TO_ADDR
43850: GO 44853
43852: LD_INT 3
43854: DOUBLE
43855: EQUAL
43856: IFTRUE 43860
43858: GO 43890
43860: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
43861: LD_ADDR_VAR 0 3
43865: PUSH
43866: LD_INT 1
43868: PUSH
43869: LD_INT 2
43871: PUSH
43872: LD_INT 3
43874: PUSH
43875: LD_INT 4
43877: PUSH
43878: LD_INT 5
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: LIST
43885: LIST
43886: LIST
43887: ST_TO_ADDR
43888: GO 44853
43890: LD_INT 11
43892: DOUBLE
43893: EQUAL
43894: IFTRUE 43898
43896: GO 43928
43898: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
43899: LD_ADDR_VAR 0 3
43903: PUSH
43904: LD_INT 1
43906: PUSH
43907: LD_INT 2
43909: PUSH
43910: LD_INT 3
43912: PUSH
43913: LD_INT 4
43915: PUSH
43916: LD_INT 5
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: LIST
43923: LIST
43924: LIST
43925: ST_TO_ADDR
43926: GO 44853
43928: LD_INT 4
43930: DOUBLE
43931: EQUAL
43932: IFTRUE 43936
43934: GO 43962
43936: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
43937: LD_ADDR_VAR 0 3
43941: PUSH
43942: LD_INT 2
43944: PUSH
43945: LD_INT 3
43947: PUSH
43948: LD_INT 4
43950: PUSH
43951: LD_INT 5
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: ST_TO_ADDR
43960: GO 44853
43962: LD_INT 5
43964: DOUBLE
43965: EQUAL
43966: IFTRUE 43970
43968: GO 43996
43970: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
43971: LD_ADDR_VAR 0 3
43975: PUSH
43976: LD_INT 2
43978: PUSH
43979: LD_INT 3
43981: PUSH
43982: LD_INT 4
43984: PUSH
43985: LD_INT 5
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: LIST
43992: LIST
43993: ST_TO_ADDR
43994: GO 44853
43996: LD_INT 9
43998: DOUBLE
43999: EQUAL
44000: IFTRUE 44004
44002: GO 44030
44004: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
44005: LD_ADDR_VAR 0 3
44009: PUSH
44010: LD_INT 2
44012: PUSH
44013: LD_INT 3
44015: PUSH
44016: LD_INT 4
44018: PUSH
44019: LD_INT 5
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: LIST
44026: LIST
44027: ST_TO_ADDR
44028: GO 44853
44030: LD_INT 7
44032: DOUBLE
44033: EQUAL
44034: IFTRUE 44038
44036: GO 44064
44038: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
44039: LD_ADDR_VAR 0 3
44043: PUSH
44044: LD_INT 2
44046: PUSH
44047: LD_INT 3
44049: PUSH
44050: LD_INT 4
44052: PUSH
44053: LD_INT 5
44055: PUSH
44056: EMPTY
44057: LIST
44058: LIST
44059: LIST
44060: LIST
44061: ST_TO_ADDR
44062: GO 44853
44064: LD_INT 12
44066: DOUBLE
44067: EQUAL
44068: IFTRUE 44072
44070: GO 44098
44072: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
44073: LD_ADDR_VAR 0 3
44077: PUSH
44078: LD_INT 2
44080: PUSH
44081: LD_INT 3
44083: PUSH
44084: LD_INT 4
44086: PUSH
44087: LD_INT 5
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: LIST
44094: LIST
44095: ST_TO_ADDR
44096: GO 44853
44098: LD_INT 13
44100: DOUBLE
44101: EQUAL
44102: IFTRUE 44106
44104: GO 44132
44106: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
44107: LD_ADDR_VAR 0 3
44111: PUSH
44112: LD_INT 2
44114: PUSH
44115: LD_INT 3
44117: PUSH
44118: LD_INT 4
44120: PUSH
44121: LD_INT 5
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: LIST
44128: LIST
44129: ST_TO_ADDR
44130: GO 44853
44132: LD_INT 14
44134: DOUBLE
44135: EQUAL
44136: IFTRUE 44140
44138: GO 44158
44140: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
44141: LD_ADDR_VAR 0 3
44145: PUSH
44146: LD_INT 4
44148: PUSH
44149: LD_INT 5
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: ST_TO_ADDR
44156: GO 44853
44158: LD_INT 6
44160: DOUBLE
44161: EQUAL
44162: IFTRUE 44166
44164: GO 44184
44166: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
44167: LD_ADDR_VAR 0 3
44171: PUSH
44172: LD_INT 4
44174: PUSH
44175: LD_INT 5
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: ST_TO_ADDR
44182: GO 44853
44184: LD_INT 10
44186: DOUBLE
44187: EQUAL
44188: IFTRUE 44192
44190: GO 44210
44192: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
44193: LD_ADDR_VAR 0 3
44197: PUSH
44198: LD_INT 4
44200: PUSH
44201: LD_INT 5
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: ST_TO_ADDR
44208: GO 44853
44210: LD_INT 22
44212: DOUBLE
44213: EQUAL
44214: IFTRUE 44218
44216: GO 44244
44218: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
44219: LD_ADDR_VAR 0 3
44223: PUSH
44224: LD_INT 11
44226: PUSH
44227: LD_INT 12
44229: PUSH
44230: LD_INT 13
44232: PUSH
44233: LD_INT 14
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: LIST
44240: LIST
44241: ST_TO_ADDR
44242: GO 44853
44244: LD_INT 23
44246: DOUBLE
44247: EQUAL
44248: IFTRUE 44252
44250: GO 44278
44252: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
44253: LD_ADDR_VAR 0 3
44257: PUSH
44258: LD_INT 11
44260: PUSH
44261: LD_INT 12
44263: PUSH
44264: LD_INT 13
44266: PUSH
44267: LD_INT 14
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: LIST
44274: LIST
44275: ST_TO_ADDR
44276: GO 44853
44278: LD_INT 24
44280: DOUBLE
44281: EQUAL
44282: IFTRUE 44286
44284: GO 44312
44286: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
44287: LD_ADDR_VAR 0 3
44291: PUSH
44292: LD_INT 11
44294: PUSH
44295: LD_INT 12
44297: PUSH
44298: LD_INT 13
44300: PUSH
44301: LD_INT 14
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: LIST
44308: LIST
44309: ST_TO_ADDR
44310: GO 44853
44312: LD_INT 30
44314: DOUBLE
44315: EQUAL
44316: IFTRUE 44320
44318: GO 44346
44320: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
44321: LD_ADDR_VAR 0 3
44325: PUSH
44326: LD_INT 11
44328: PUSH
44329: LD_INT 12
44331: PUSH
44332: LD_INT 13
44334: PUSH
44335: LD_INT 14
44337: PUSH
44338: EMPTY
44339: LIST
44340: LIST
44341: LIST
44342: LIST
44343: ST_TO_ADDR
44344: GO 44853
44346: LD_INT 25
44348: DOUBLE
44349: EQUAL
44350: IFTRUE 44354
44352: GO 44372
44354: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
44355: LD_ADDR_VAR 0 3
44359: PUSH
44360: LD_INT 13
44362: PUSH
44363: LD_INT 14
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: ST_TO_ADDR
44370: GO 44853
44372: LD_INT 27
44374: DOUBLE
44375: EQUAL
44376: IFTRUE 44380
44378: GO 44398
44380: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
44381: LD_ADDR_VAR 0 3
44385: PUSH
44386: LD_INT 13
44388: PUSH
44389: LD_INT 14
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: ST_TO_ADDR
44396: GO 44853
44398: LD_INT 92
44400: DOUBLE
44401: EQUAL
44402: IFTRUE 44406
44404: GO 44432
44406: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
44407: LD_ADDR_VAR 0 3
44411: PUSH
44412: LD_INT 11
44414: PUSH
44415: LD_INT 12
44417: PUSH
44418: LD_INT 13
44420: PUSH
44421: LD_INT 14
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: LIST
44428: LIST
44429: ST_TO_ADDR
44430: GO 44853
44432: LD_INT 28
44434: DOUBLE
44435: EQUAL
44436: IFTRUE 44440
44438: GO 44458
44440: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
44441: LD_ADDR_VAR 0 3
44445: PUSH
44446: LD_INT 13
44448: PUSH
44449: LD_INT 14
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: ST_TO_ADDR
44456: GO 44853
44458: LD_INT 29
44460: DOUBLE
44461: EQUAL
44462: IFTRUE 44466
44464: GO 44484
44466: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
44467: LD_ADDR_VAR 0 3
44471: PUSH
44472: LD_INT 13
44474: PUSH
44475: LD_INT 14
44477: PUSH
44478: EMPTY
44479: LIST
44480: LIST
44481: ST_TO_ADDR
44482: GO 44853
44484: LD_INT 31
44486: DOUBLE
44487: EQUAL
44488: IFTRUE 44492
44490: GO 44510
44492: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
44493: LD_ADDR_VAR 0 3
44497: PUSH
44498: LD_INT 13
44500: PUSH
44501: LD_INT 14
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: ST_TO_ADDR
44508: GO 44853
44510: LD_INT 26
44512: DOUBLE
44513: EQUAL
44514: IFTRUE 44518
44516: GO 44536
44518: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
44519: LD_ADDR_VAR 0 3
44523: PUSH
44524: LD_INT 13
44526: PUSH
44527: LD_INT 14
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: ST_TO_ADDR
44534: GO 44853
44536: LD_INT 42
44538: DOUBLE
44539: EQUAL
44540: IFTRUE 44544
44542: GO 44570
44544: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
44545: LD_ADDR_VAR 0 3
44549: PUSH
44550: LD_INT 21
44552: PUSH
44553: LD_INT 22
44555: PUSH
44556: LD_INT 23
44558: PUSH
44559: LD_INT 24
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: LIST
44566: LIST
44567: ST_TO_ADDR
44568: GO 44853
44570: LD_INT 43
44572: DOUBLE
44573: EQUAL
44574: IFTRUE 44578
44576: GO 44604
44578: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
44579: LD_ADDR_VAR 0 3
44583: PUSH
44584: LD_INT 21
44586: PUSH
44587: LD_INT 22
44589: PUSH
44590: LD_INT 23
44592: PUSH
44593: LD_INT 24
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: LIST
44600: LIST
44601: ST_TO_ADDR
44602: GO 44853
44604: LD_INT 44
44606: DOUBLE
44607: EQUAL
44608: IFTRUE 44612
44610: GO 44638
44612: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
44613: LD_ADDR_VAR 0 3
44617: PUSH
44618: LD_INT 21
44620: PUSH
44621: LD_INT 22
44623: PUSH
44624: LD_INT 23
44626: PUSH
44627: LD_INT 24
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: LIST
44634: LIST
44635: ST_TO_ADDR
44636: GO 44853
44638: LD_INT 45
44640: DOUBLE
44641: EQUAL
44642: IFTRUE 44646
44644: GO 44672
44646: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
44647: LD_ADDR_VAR 0 3
44651: PUSH
44652: LD_INT 21
44654: PUSH
44655: LD_INT 22
44657: PUSH
44658: LD_INT 23
44660: PUSH
44661: LD_INT 24
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: ST_TO_ADDR
44670: GO 44853
44672: LD_INT 49
44674: DOUBLE
44675: EQUAL
44676: IFTRUE 44680
44678: GO 44706
44680: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
44681: LD_ADDR_VAR 0 3
44685: PUSH
44686: LD_INT 21
44688: PUSH
44689: LD_INT 22
44691: PUSH
44692: LD_INT 23
44694: PUSH
44695: LD_INT 24
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: ST_TO_ADDR
44704: GO 44853
44706: LD_INT 51
44708: DOUBLE
44709: EQUAL
44710: IFTRUE 44714
44712: GO 44740
44714: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
44715: LD_ADDR_VAR 0 3
44719: PUSH
44720: LD_INT 21
44722: PUSH
44723: LD_INT 22
44725: PUSH
44726: LD_INT 23
44728: PUSH
44729: LD_INT 24
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: LIST
44736: LIST
44737: ST_TO_ADDR
44738: GO 44853
44740: LD_INT 52
44742: DOUBLE
44743: EQUAL
44744: IFTRUE 44748
44746: GO 44774
44748: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
44749: LD_ADDR_VAR 0 3
44753: PUSH
44754: LD_INT 21
44756: PUSH
44757: LD_INT 22
44759: PUSH
44760: LD_INT 23
44762: PUSH
44763: LD_INT 24
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: ST_TO_ADDR
44772: GO 44853
44774: LD_INT 53
44776: DOUBLE
44777: EQUAL
44778: IFTRUE 44782
44780: GO 44800
44782: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
44783: LD_ADDR_VAR 0 3
44787: PUSH
44788: LD_INT 23
44790: PUSH
44791: LD_INT 24
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: ST_TO_ADDR
44798: GO 44853
44800: LD_INT 46
44802: DOUBLE
44803: EQUAL
44804: IFTRUE 44808
44806: GO 44826
44808: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
44809: LD_ADDR_VAR 0 3
44813: PUSH
44814: LD_INT 23
44816: PUSH
44817: LD_INT 24
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: ST_TO_ADDR
44824: GO 44853
44826: LD_INT 47
44828: DOUBLE
44829: EQUAL
44830: IFTRUE 44834
44832: GO 44852
44834: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44835: LD_ADDR_VAR 0 3
44839: PUSH
44840: LD_INT 23
44842: PUSH
44843: LD_INT 24
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: ST_TO_ADDR
44850: GO 44853
44852: POP
// result := ( chassis in result ) ;
44853: LD_ADDR_VAR 0 3
44857: PUSH
44858: LD_VAR 0 1
44862: PUSH
44863: LD_VAR 0 3
44867: IN
44868: ST_TO_ADDR
// end ;
44869: LD_VAR 0 3
44873: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
44874: LD_INT 0
44876: PPUSH
44877: PPUSH
44878: PPUSH
44879: PPUSH
44880: PPUSH
44881: PPUSH
44882: PPUSH
// result := array ;
44883: LD_ADDR_VAR 0 5
44887: PUSH
44888: LD_VAR 0 1
44892: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
44893: LD_VAR 0 1
44897: NOT
44898: PUSH
44899: LD_VAR 0 2
44903: NOT
44904: OR
44905: PUSH
44906: LD_VAR 0 3
44910: NOT
44911: OR
44912: PUSH
44913: LD_VAR 0 2
44917: PUSH
44918: LD_VAR 0 1
44922: GREATER
44923: OR
44924: PUSH
44925: LD_VAR 0 3
44929: PUSH
44930: LD_VAR 0 1
44934: GREATER
44935: OR
44936: IFFALSE 44940
// exit ;
44938: GO 45236
// if direction then
44940: LD_VAR 0 4
44944: IFFALSE 45008
// begin d := 1 ;
44946: LD_ADDR_VAR 0 9
44950: PUSH
44951: LD_INT 1
44953: ST_TO_ADDR
// if i_from > i_to then
44954: LD_VAR 0 2
44958: PUSH
44959: LD_VAR 0 3
44963: GREATER
44964: IFFALSE 44990
// length := ( array - i_from ) + i_to else
44966: LD_ADDR_VAR 0 11
44970: PUSH
44971: LD_VAR 0 1
44975: PUSH
44976: LD_VAR 0 2
44980: MINUS
44981: PUSH
44982: LD_VAR 0 3
44986: PLUS
44987: ST_TO_ADDR
44988: GO 45006
// length := i_to - i_from ;
44990: LD_ADDR_VAR 0 11
44994: PUSH
44995: LD_VAR 0 3
44999: PUSH
45000: LD_VAR 0 2
45004: MINUS
45005: ST_TO_ADDR
// end else
45006: GO 45069
// begin d := - 1 ;
45008: LD_ADDR_VAR 0 9
45012: PUSH
45013: LD_INT 1
45015: NEG
45016: ST_TO_ADDR
// if i_from > i_to then
45017: LD_VAR 0 2
45021: PUSH
45022: LD_VAR 0 3
45026: GREATER
45027: IFFALSE 45047
// length := i_from - i_to else
45029: LD_ADDR_VAR 0 11
45033: PUSH
45034: LD_VAR 0 2
45038: PUSH
45039: LD_VAR 0 3
45043: MINUS
45044: ST_TO_ADDR
45045: GO 45069
// length := ( array - i_to ) + i_from ;
45047: LD_ADDR_VAR 0 11
45051: PUSH
45052: LD_VAR 0 1
45056: PUSH
45057: LD_VAR 0 3
45061: MINUS
45062: PUSH
45063: LD_VAR 0 2
45067: PLUS
45068: ST_TO_ADDR
// end ; if not length then
45069: LD_VAR 0 11
45073: NOT
45074: IFFALSE 45078
// exit ;
45076: GO 45236
// tmp := array ;
45078: LD_ADDR_VAR 0 10
45082: PUSH
45083: LD_VAR 0 1
45087: ST_TO_ADDR
// for i = 1 to length do
45088: LD_ADDR_VAR 0 6
45092: PUSH
45093: DOUBLE
45094: LD_INT 1
45096: DEC
45097: ST_TO_ADDR
45098: LD_VAR 0 11
45102: PUSH
45103: FOR_TO
45104: IFFALSE 45224
// begin for j = 1 to array do
45106: LD_ADDR_VAR 0 7
45110: PUSH
45111: DOUBLE
45112: LD_INT 1
45114: DEC
45115: ST_TO_ADDR
45116: LD_VAR 0 1
45120: PUSH
45121: FOR_TO
45122: IFFALSE 45210
// begin k := j + d ;
45124: LD_ADDR_VAR 0 8
45128: PUSH
45129: LD_VAR 0 7
45133: PUSH
45134: LD_VAR 0 9
45138: PLUS
45139: ST_TO_ADDR
// if k > array then
45140: LD_VAR 0 8
45144: PUSH
45145: LD_VAR 0 1
45149: GREATER
45150: IFFALSE 45160
// k := 1 ;
45152: LD_ADDR_VAR 0 8
45156: PUSH
45157: LD_INT 1
45159: ST_TO_ADDR
// if not k then
45160: LD_VAR 0 8
45164: NOT
45165: IFFALSE 45177
// k := array ;
45167: LD_ADDR_VAR 0 8
45171: PUSH
45172: LD_VAR 0 1
45176: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
45177: LD_ADDR_VAR 0 10
45181: PUSH
45182: LD_VAR 0 10
45186: PPUSH
45187: LD_VAR 0 8
45191: PPUSH
45192: LD_VAR 0 1
45196: PUSH
45197: LD_VAR 0 7
45201: ARRAY
45202: PPUSH
45203: CALL_OW 1
45207: ST_TO_ADDR
// end ;
45208: GO 45121
45210: POP
45211: POP
// array := tmp ;
45212: LD_ADDR_VAR 0 1
45216: PUSH
45217: LD_VAR 0 10
45221: ST_TO_ADDR
// end ;
45222: GO 45103
45224: POP
45225: POP
// result := array ;
45226: LD_ADDR_VAR 0 5
45230: PUSH
45231: LD_VAR 0 1
45235: ST_TO_ADDR
// end ;
45236: LD_VAR 0 5
45240: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
45241: LD_INT 0
45243: PPUSH
45244: PPUSH
// result := 0 ;
45245: LD_ADDR_VAR 0 3
45249: PUSH
45250: LD_INT 0
45252: ST_TO_ADDR
// if not array or not value in array then
45253: LD_VAR 0 1
45257: NOT
45258: PUSH
45259: LD_VAR 0 2
45263: PUSH
45264: LD_VAR 0 1
45268: IN
45269: NOT
45270: OR
45271: IFFALSE 45275
// exit ;
45273: GO 45329
// for i = 1 to array do
45275: LD_ADDR_VAR 0 4
45279: PUSH
45280: DOUBLE
45281: LD_INT 1
45283: DEC
45284: ST_TO_ADDR
45285: LD_VAR 0 1
45289: PUSH
45290: FOR_TO
45291: IFFALSE 45327
// if value = array [ i ] then
45293: LD_VAR 0 2
45297: PUSH
45298: LD_VAR 0 1
45302: PUSH
45303: LD_VAR 0 4
45307: ARRAY
45308: EQUAL
45309: IFFALSE 45325
// begin result := i ;
45311: LD_ADDR_VAR 0 3
45315: PUSH
45316: LD_VAR 0 4
45320: ST_TO_ADDR
// exit ;
45321: POP
45322: POP
45323: GO 45329
// end ;
45325: GO 45290
45327: POP
45328: POP
// end ;
45329: LD_VAR 0 3
45333: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
45334: LD_INT 0
45336: PPUSH
// vc_chassis := chassis ;
45337: LD_ADDR_OWVAR 37
45341: PUSH
45342: LD_VAR 0 1
45346: ST_TO_ADDR
// vc_engine := engine ;
45347: LD_ADDR_OWVAR 39
45351: PUSH
45352: LD_VAR 0 2
45356: ST_TO_ADDR
// vc_control := control ;
45357: LD_ADDR_OWVAR 38
45361: PUSH
45362: LD_VAR 0 3
45366: ST_TO_ADDR
// vc_weapon := weapon ;
45367: LD_ADDR_OWVAR 40
45371: PUSH
45372: LD_VAR 0 4
45376: ST_TO_ADDR
// vc_fuel_battery := fuel ;
45377: LD_ADDR_OWVAR 41
45381: PUSH
45382: LD_VAR 0 5
45386: ST_TO_ADDR
// end ;
45387: LD_VAR 0 6
45391: RET
// export function WantPlant ( unit ) ; var task ; begin
45392: LD_INT 0
45394: PPUSH
45395: PPUSH
// result := false ;
45396: LD_ADDR_VAR 0 2
45400: PUSH
45401: LD_INT 0
45403: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
45404: LD_ADDR_VAR 0 3
45408: PUSH
45409: LD_VAR 0 1
45413: PPUSH
45414: CALL_OW 437
45418: ST_TO_ADDR
// if task then
45419: LD_VAR 0 3
45423: IFFALSE 45451
// if task [ 1 ] [ 1 ] = p then
45425: LD_VAR 0 3
45429: PUSH
45430: LD_INT 1
45432: ARRAY
45433: PUSH
45434: LD_INT 1
45436: ARRAY
45437: PUSH
45438: LD_STRING p
45440: EQUAL
45441: IFFALSE 45451
// result := true ;
45443: LD_ADDR_VAR 0 2
45447: PUSH
45448: LD_INT 1
45450: ST_TO_ADDR
// end ;
45451: LD_VAR 0 2
45455: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
45456: LD_INT 0
45458: PPUSH
45459: PPUSH
45460: PPUSH
45461: PPUSH
// if pos < 1 then
45462: LD_VAR 0 2
45466: PUSH
45467: LD_INT 1
45469: LESS
45470: IFFALSE 45474
// exit ;
45472: GO 45777
// if pos = 1 then
45474: LD_VAR 0 2
45478: PUSH
45479: LD_INT 1
45481: EQUAL
45482: IFFALSE 45515
// result := Replace ( arr , pos [ 1 ] , value ) else
45484: LD_ADDR_VAR 0 4
45488: PUSH
45489: LD_VAR 0 1
45493: PPUSH
45494: LD_VAR 0 2
45498: PUSH
45499: LD_INT 1
45501: ARRAY
45502: PPUSH
45503: LD_VAR 0 3
45507: PPUSH
45508: CALL_OW 1
45512: ST_TO_ADDR
45513: GO 45777
// begin tmp := arr ;
45515: LD_ADDR_VAR 0 6
45519: PUSH
45520: LD_VAR 0 1
45524: ST_TO_ADDR
// s_arr := [ tmp ] ;
45525: LD_ADDR_VAR 0 7
45529: PUSH
45530: LD_VAR 0 6
45534: PUSH
45535: EMPTY
45536: LIST
45537: ST_TO_ADDR
// for i = 1 to pos - 1 do
45538: LD_ADDR_VAR 0 5
45542: PUSH
45543: DOUBLE
45544: LD_INT 1
45546: DEC
45547: ST_TO_ADDR
45548: LD_VAR 0 2
45552: PUSH
45553: LD_INT 1
45555: MINUS
45556: PUSH
45557: FOR_TO
45558: IFFALSE 45603
// begin tmp := tmp [ pos [ i ] ] ;
45560: LD_ADDR_VAR 0 6
45564: PUSH
45565: LD_VAR 0 6
45569: PUSH
45570: LD_VAR 0 2
45574: PUSH
45575: LD_VAR 0 5
45579: ARRAY
45580: ARRAY
45581: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
45582: LD_ADDR_VAR 0 7
45586: PUSH
45587: LD_VAR 0 7
45591: PUSH
45592: LD_VAR 0 6
45596: PUSH
45597: EMPTY
45598: LIST
45599: ADD
45600: ST_TO_ADDR
// end ;
45601: GO 45557
45603: POP
45604: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
45605: LD_ADDR_VAR 0 6
45609: PUSH
45610: LD_VAR 0 6
45614: PPUSH
45615: LD_VAR 0 2
45619: PUSH
45620: LD_VAR 0 2
45624: ARRAY
45625: PPUSH
45626: LD_VAR 0 3
45630: PPUSH
45631: CALL_OW 1
45635: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
45636: LD_ADDR_VAR 0 7
45640: PUSH
45641: LD_VAR 0 7
45645: PPUSH
45646: LD_VAR 0 7
45650: PPUSH
45651: LD_VAR 0 6
45655: PPUSH
45656: CALL_OW 1
45660: ST_TO_ADDR
// for i = s_arr downto 2 do
45661: LD_ADDR_VAR 0 5
45665: PUSH
45666: DOUBLE
45667: LD_VAR 0 7
45671: INC
45672: ST_TO_ADDR
45673: LD_INT 2
45675: PUSH
45676: FOR_DOWNTO
45677: IFFALSE 45761
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
45679: LD_ADDR_VAR 0 6
45683: PUSH
45684: LD_VAR 0 7
45688: PUSH
45689: LD_VAR 0 5
45693: PUSH
45694: LD_INT 1
45696: MINUS
45697: ARRAY
45698: PPUSH
45699: LD_VAR 0 2
45703: PUSH
45704: LD_VAR 0 5
45708: PUSH
45709: LD_INT 1
45711: MINUS
45712: ARRAY
45713: PPUSH
45714: LD_VAR 0 7
45718: PUSH
45719: LD_VAR 0 5
45723: ARRAY
45724: PPUSH
45725: CALL_OW 1
45729: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
45730: LD_ADDR_VAR 0 7
45734: PUSH
45735: LD_VAR 0 7
45739: PPUSH
45740: LD_VAR 0 5
45744: PUSH
45745: LD_INT 1
45747: MINUS
45748: PPUSH
45749: LD_VAR 0 6
45753: PPUSH
45754: CALL_OW 1
45758: ST_TO_ADDR
// end ;
45759: GO 45676
45761: POP
45762: POP
// result := s_arr [ 1 ] ;
45763: LD_ADDR_VAR 0 4
45767: PUSH
45768: LD_VAR 0 7
45772: PUSH
45773: LD_INT 1
45775: ARRAY
45776: ST_TO_ADDR
// end ; end ;
45777: LD_VAR 0 4
45781: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
45782: LD_INT 0
45784: PPUSH
45785: PPUSH
// if not list then
45786: LD_VAR 0 1
45790: NOT
45791: IFFALSE 45795
// exit ;
45793: GO 45886
// i := list [ pos1 ] ;
45795: LD_ADDR_VAR 0 5
45799: PUSH
45800: LD_VAR 0 1
45804: PUSH
45805: LD_VAR 0 2
45809: ARRAY
45810: ST_TO_ADDR
// if not i then
45811: LD_VAR 0 5
45815: NOT
45816: IFFALSE 45820
// exit ;
45818: GO 45886
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
45820: LD_ADDR_VAR 0 1
45824: PUSH
45825: LD_VAR 0 1
45829: PPUSH
45830: LD_VAR 0 2
45834: PPUSH
45835: LD_VAR 0 1
45839: PUSH
45840: LD_VAR 0 3
45844: ARRAY
45845: PPUSH
45846: CALL_OW 1
45850: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
45851: LD_ADDR_VAR 0 1
45855: PUSH
45856: LD_VAR 0 1
45860: PPUSH
45861: LD_VAR 0 3
45865: PPUSH
45866: LD_VAR 0 5
45870: PPUSH
45871: CALL_OW 1
45875: ST_TO_ADDR
// result := list ;
45876: LD_ADDR_VAR 0 4
45880: PUSH
45881: LD_VAR 0 1
45885: ST_TO_ADDR
// end ;
45886: LD_VAR 0 4
45890: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
45891: LD_INT 0
45893: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
45894: LD_ADDR_VAR 0 5
45898: PUSH
45899: LD_VAR 0 1
45903: PPUSH
45904: CALL_OW 250
45908: PPUSH
45909: LD_VAR 0 1
45913: PPUSH
45914: CALL_OW 251
45918: PPUSH
45919: LD_VAR 0 2
45923: PPUSH
45924: LD_VAR 0 3
45928: PPUSH
45929: LD_VAR 0 4
45933: PPUSH
45934: CALL 46312 0 5
45938: ST_TO_ADDR
// end ;
45939: LD_VAR 0 5
45943: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
45944: LD_INT 0
45946: PPUSH
45947: PPUSH
45948: PPUSH
45949: PPUSH
// if not list or not unit then
45950: LD_VAR 0 2
45954: NOT
45955: PUSH
45956: LD_VAR 0 1
45960: NOT
45961: OR
45962: IFFALSE 45966
// exit ;
45964: GO 46307
// result := [ ] ;
45966: LD_ADDR_VAR 0 5
45970: PUSH
45971: EMPTY
45972: ST_TO_ADDR
// for i in list do
45973: LD_ADDR_VAR 0 6
45977: PUSH
45978: LD_VAR 0 2
45982: PUSH
45983: FOR_IN
45984: IFFALSE 46202
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
45986: LD_ADDR_VAR 0 8
45990: PUSH
45991: LD_VAR 0 1
45995: PPUSH
45996: LD_VAR 0 6
46000: PUSH
46001: LD_INT 1
46003: ARRAY
46004: PPUSH
46005: LD_VAR 0 6
46009: PUSH
46010: LD_INT 2
46012: ARRAY
46013: PPUSH
46014: CALL_OW 297
46018: ST_TO_ADDR
// if not Count ( result ) then
46019: LD_VAR 0 5
46023: PPUSH
46024: CALL 42596 0 1
46028: NOT
46029: IFFALSE 46062
// begin result := Join ( result , [ i , tmp ] ) ;
46031: LD_ADDR_VAR 0 5
46035: PUSH
46036: LD_VAR 0 5
46040: PPUSH
46041: LD_VAR 0 6
46045: PUSH
46046: LD_VAR 0 8
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PPUSH
46055: CALL 78185 0 2
46059: ST_TO_ADDR
// continue ;
46060: GO 45983
// end ; if result [ result ] [ 2 ] <= tmp then
46062: LD_VAR 0 5
46066: PUSH
46067: LD_VAR 0 5
46071: ARRAY
46072: PUSH
46073: LD_INT 2
46075: ARRAY
46076: PUSH
46077: LD_VAR 0 8
46081: LESSEQUAL
46082: IFFALSE 46115
// result := Join ( result , [ i , tmp ] ) else
46084: LD_ADDR_VAR 0 5
46088: PUSH
46089: LD_VAR 0 5
46093: PPUSH
46094: LD_VAR 0 6
46098: PUSH
46099: LD_VAR 0 8
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PPUSH
46108: CALL 78185 0 2
46112: ST_TO_ADDR
46113: GO 46200
// begin for j := 1 to Count ( result ) do
46115: LD_ADDR_VAR 0 7
46119: PUSH
46120: DOUBLE
46121: LD_INT 1
46123: DEC
46124: ST_TO_ADDR
46125: LD_VAR 0 5
46129: PPUSH
46130: CALL 42596 0 1
46134: PUSH
46135: FOR_TO
46136: IFFALSE 46198
// begin if tmp < result [ j ] [ 2 ] then
46138: LD_VAR 0 8
46142: PUSH
46143: LD_VAR 0 5
46147: PUSH
46148: LD_VAR 0 7
46152: ARRAY
46153: PUSH
46154: LD_INT 2
46156: ARRAY
46157: LESS
46158: IFFALSE 46196
// begin result := Insert ( result , j , [ i , tmp ] ) ;
46160: LD_ADDR_VAR 0 5
46164: PUSH
46165: LD_VAR 0 5
46169: PPUSH
46170: LD_VAR 0 7
46174: PPUSH
46175: LD_VAR 0 6
46179: PUSH
46180: LD_VAR 0 8
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: PPUSH
46189: CALL_OW 2
46193: ST_TO_ADDR
// break ;
46194: GO 46198
// end ; end ;
46196: GO 46135
46198: POP
46199: POP
// end ; end ;
46200: GO 45983
46202: POP
46203: POP
// if result and not asc then
46204: LD_VAR 0 5
46208: PUSH
46209: LD_VAR 0 3
46213: NOT
46214: AND
46215: IFFALSE 46232
// result := ReverseArray ( result ) ;
46217: LD_ADDR_VAR 0 5
46221: PUSH
46222: LD_VAR 0 5
46226: PPUSH
46227: CALL 73472 0 1
46231: ST_TO_ADDR
// tmp := [ ] ;
46232: LD_ADDR_VAR 0 8
46236: PUSH
46237: EMPTY
46238: ST_TO_ADDR
// if mode then
46239: LD_VAR 0 4
46243: IFFALSE 46307
// begin for i := 1 to result do
46245: LD_ADDR_VAR 0 6
46249: PUSH
46250: DOUBLE
46251: LD_INT 1
46253: DEC
46254: ST_TO_ADDR
46255: LD_VAR 0 5
46259: PUSH
46260: FOR_TO
46261: IFFALSE 46295
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
46263: LD_ADDR_VAR 0 8
46267: PUSH
46268: LD_VAR 0 8
46272: PPUSH
46273: LD_VAR 0 5
46277: PUSH
46278: LD_VAR 0 6
46282: ARRAY
46283: PUSH
46284: LD_INT 1
46286: ARRAY
46287: PPUSH
46288: CALL 78185 0 2
46292: ST_TO_ADDR
46293: GO 46260
46295: POP
46296: POP
// result := tmp ;
46297: LD_ADDR_VAR 0 5
46301: PUSH
46302: LD_VAR 0 8
46306: ST_TO_ADDR
// end ; end ;
46307: LD_VAR 0 5
46311: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
46312: LD_INT 0
46314: PPUSH
46315: PPUSH
46316: PPUSH
46317: PPUSH
// if not list then
46318: LD_VAR 0 3
46322: NOT
46323: IFFALSE 46327
// exit ;
46325: GO 46715
// result := [ ] ;
46327: LD_ADDR_VAR 0 6
46331: PUSH
46332: EMPTY
46333: ST_TO_ADDR
// for i in list do
46334: LD_ADDR_VAR 0 7
46338: PUSH
46339: LD_VAR 0 3
46343: PUSH
46344: FOR_IN
46345: IFFALSE 46547
// begin tmp := GetDistUnitXY ( i , x , y ) ;
46347: LD_ADDR_VAR 0 9
46351: PUSH
46352: LD_VAR 0 7
46356: PPUSH
46357: LD_VAR 0 1
46361: PPUSH
46362: LD_VAR 0 2
46366: PPUSH
46367: CALL_OW 297
46371: ST_TO_ADDR
// if not result then
46372: LD_VAR 0 6
46376: NOT
46377: IFFALSE 46403
// result := [ [ i , tmp ] ] else
46379: LD_ADDR_VAR 0 6
46383: PUSH
46384: LD_VAR 0 7
46388: PUSH
46389: LD_VAR 0 9
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: EMPTY
46399: LIST
46400: ST_TO_ADDR
46401: GO 46545
// begin if result [ result ] [ 2 ] < tmp then
46403: LD_VAR 0 6
46407: PUSH
46408: LD_VAR 0 6
46412: ARRAY
46413: PUSH
46414: LD_INT 2
46416: ARRAY
46417: PUSH
46418: LD_VAR 0 9
46422: LESS
46423: IFFALSE 46465
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
46425: LD_ADDR_VAR 0 6
46429: PUSH
46430: LD_VAR 0 6
46434: PPUSH
46435: LD_VAR 0 6
46439: PUSH
46440: LD_INT 1
46442: PLUS
46443: PPUSH
46444: LD_VAR 0 7
46448: PUSH
46449: LD_VAR 0 9
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PPUSH
46458: CALL_OW 2
46462: ST_TO_ADDR
46463: GO 46545
// for j = 1 to result do
46465: LD_ADDR_VAR 0 8
46469: PUSH
46470: DOUBLE
46471: LD_INT 1
46473: DEC
46474: ST_TO_ADDR
46475: LD_VAR 0 6
46479: PUSH
46480: FOR_TO
46481: IFFALSE 46543
// begin if tmp < result [ j ] [ 2 ] then
46483: LD_VAR 0 9
46487: PUSH
46488: LD_VAR 0 6
46492: PUSH
46493: LD_VAR 0 8
46497: ARRAY
46498: PUSH
46499: LD_INT 2
46501: ARRAY
46502: LESS
46503: IFFALSE 46541
// begin result := Insert ( result , j , [ i , tmp ] ) ;
46505: LD_ADDR_VAR 0 6
46509: PUSH
46510: LD_VAR 0 6
46514: PPUSH
46515: LD_VAR 0 8
46519: PPUSH
46520: LD_VAR 0 7
46524: PUSH
46525: LD_VAR 0 9
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PPUSH
46534: CALL_OW 2
46538: ST_TO_ADDR
// break ;
46539: GO 46543
// end ; end ;
46541: GO 46480
46543: POP
46544: POP
// end ; end ;
46545: GO 46344
46547: POP
46548: POP
// if result and not asc then
46549: LD_VAR 0 6
46553: PUSH
46554: LD_VAR 0 4
46558: NOT
46559: AND
46560: IFFALSE 46635
// begin tmp := result ;
46562: LD_ADDR_VAR 0 9
46566: PUSH
46567: LD_VAR 0 6
46571: ST_TO_ADDR
// for i = tmp downto 1 do
46572: LD_ADDR_VAR 0 7
46576: PUSH
46577: DOUBLE
46578: LD_VAR 0 9
46582: INC
46583: ST_TO_ADDR
46584: LD_INT 1
46586: PUSH
46587: FOR_DOWNTO
46588: IFFALSE 46633
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
46590: LD_ADDR_VAR 0 6
46594: PUSH
46595: LD_VAR 0 6
46599: PPUSH
46600: LD_VAR 0 9
46604: PUSH
46605: LD_VAR 0 7
46609: MINUS
46610: PUSH
46611: LD_INT 1
46613: PLUS
46614: PPUSH
46615: LD_VAR 0 9
46619: PUSH
46620: LD_VAR 0 7
46624: ARRAY
46625: PPUSH
46626: CALL_OW 1
46630: ST_TO_ADDR
46631: GO 46587
46633: POP
46634: POP
// end ; tmp := [ ] ;
46635: LD_ADDR_VAR 0 9
46639: PUSH
46640: EMPTY
46641: ST_TO_ADDR
// if mode then
46642: LD_VAR 0 5
46646: IFFALSE 46715
// begin for i = 1 to result do
46648: LD_ADDR_VAR 0 7
46652: PUSH
46653: DOUBLE
46654: LD_INT 1
46656: DEC
46657: ST_TO_ADDR
46658: LD_VAR 0 6
46662: PUSH
46663: FOR_TO
46664: IFFALSE 46703
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
46666: LD_ADDR_VAR 0 9
46670: PUSH
46671: LD_VAR 0 9
46675: PPUSH
46676: LD_VAR 0 7
46680: PPUSH
46681: LD_VAR 0 6
46685: PUSH
46686: LD_VAR 0 7
46690: ARRAY
46691: PUSH
46692: LD_INT 1
46694: ARRAY
46695: PPUSH
46696: CALL_OW 1
46700: ST_TO_ADDR
46701: GO 46663
46703: POP
46704: POP
// result := tmp ;
46705: LD_ADDR_VAR 0 6
46709: PUSH
46710: LD_VAR 0 9
46714: ST_TO_ADDR
// end ; end ;
46715: LD_VAR 0 6
46719: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
46720: LD_INT 0
46722: PPUSH
46723: PPUSH
46724: PPUSH
46725: PPUSH
46726: PPUSH
46727: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
46728: LD_ADDR_VAR 0 5
46732: PUSH
46733: LD_INT 0
46735: PUSH
46736: LD_INT 0
46738: PUSH
46739: LD_INT 0
46741: PUSH
46742: EMPTY
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: LIST
46748: LIST
46749: ST_TO_ADDR
// if not x or not y then
46750: LD_VAR 0 2
46754: NOT
46755: PUSH
46756: LD_VAR 0 3
46760: NOT
46761: OR
46762: IFFALSE 46766
// exit ;
46764: GO 48416
// if not range then
46766: LD_VAR 0 4
46770: NOT
46771: IFFALSE 46781
// range := 10 ;
46773: LD_ADDR_VAR 0 4
46777: PUSH
46778: LD_INT 10
46780: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
46781: LD_ADDR_VAR 0 8
46785: PUSH
46786: LD_INT 81
46788: PUSH
46789: LD_VAR 0 1
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: LD_INT 92
46800: PUSH
46801: LD_VAR 0 2
46805: PUSH
46806: LD_VAR 0 3
46810: PUSH
46811: LD_VAR 0 4
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 3
46824: PUSH
46825: LD_INT 21
46827: PUSH
46828: LD_INT 3
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: LIST
46843: PPUSH
46844: CALL_OW 69
46848: ST_TO_ADDR
// if not tmp then
46849: LD_VAR 0 8
46853: NOT
46854: IFFALSE 46858
// exit ;
46856: GO 48416
// for i in tmp do
46858: LD_ADDR_VAR 0 6
46862: PUSH
46863: LD_VAR 0 8
46867: PUSH
46868: FOR_IN
46869: IFFALSE 48391
// begin points := [ 0 , 0 , 0 ] ;
46871: LD_ADDR_VAR 0 9
46875: PUSH
46876: LD_INT 0
46878: PUSH
46879: LD_INT 0
46881: PUSH
46882: LD_INT 0
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: LIST
46889: ST_TO_ADDR
// bpoints := 1 ;
46890: LD_ADDR_VAR 0 10
46894: PUSH
46895: LD_INT 1
46897: ST_TO_ADDR
// case GetType ( i ) of unit_human :
46898: LD_VAR 0 6
46902: PPUSH
46903: CALL_OW 247
46907: PUSH
46908: LD_INT 1
46910: DOUBLE
46911: EQUAL
46912: IFTRUE 46916
46914: GO 47494
46916: POP
// begin if GetClass ( i ) = 1 then
46917: LD_VAR 0 6
46921: PPUSH
46922: CALL_OW 257
46926: PUSH
46927: LD_INT 1
46929: EQUAL
46930: IFFALSE 46951
// points := [ 10 , 5 , 3 ] ;
46932: LD_ADDR_VAR 0 9
46936: PUSH
46937: LD_INT 10
46939: PUSH
46940: LD_INT 5
46942: PUSH
46943: LD_INT 3
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: LIST
46950: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
46951: LD_VAR 0 6
46955: PPUSH
46956: CALL_OW 257
46960: PUSH
46961: LD_INT 2
46963: PUSH
46964: LD_INT 3
46966: PUSH
46967: LD_INT 4
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: LIST
46974: IN
46975: IFFALSE 46996
// points := [ 3 , 2 , 1 ] ;
46977: LD_ADDR_VAR 0 9
46981: PUSH
46982: LD_INT 3
46984: PUSH
46985: LD_INT 2
46987: PUSH
46988: LD_INT 1
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: LIST
46995: ST_TO_ADDR
// if GetClass ( i ) = 5 then
46996: LD_VAR 0 6
47000: PPUSH
47001: CALL_OW 257
47005: PUSH
47006: LD_INT 5
47008: EQUAL
47009: IFFALSE 47030
// points := [ 130 , 5 , 2 ] ;
47011: LD_ADDR_VAR 0 9
47015: PUSH
47016: LD_INT 130
47018: PUSH
47019: LD_INT 5
47021: PUSH
47022: LD_INT 2
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: LIST
47029: ST_TO_ADDR
// if GetClass ( i ) = 8 then
47030: LD_VAR 0 6
47034: PPUSH
47035: CALL_OW 257
47039: PUSH
47040: LD_INT 8
47042: EQUAL
47043: IFFALSE 47064
// points := [ 35 , 35 , 30 ] ;
47045: LD_ADDR_VAR 0 9
47049: PUSH
47050: LD_INT 35
47052: PUSH
47053: LD_INT 35
47055: PUSH
47056: LD_INT 30
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: LIST
47063: ST_TO_ADDR
// if GetClass ( i ) = 9 then
47064: LD_VAR 0 6
47068: PPUSH
47069: CALL_OW 257
47073: PUSH
47074: LD_INT 9
47076: EQUAL
47077: IFFALSE 47098
// points := [ 20 , 55 , 40 ] ;
47079: LD_ADDR_VAR 0 9
47083: PUSH
47084: LD_INT 20
47086: PUSH
47087: LD_INT 55
47089: PUSH
47090: LD_INT 40
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: LIST
47097: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
47098: LD_VAR 0 6
47102: PPUSH
47103: CALL_OW 257
47107: PUSH
47108: LD_INT 12
47110: PUSH
47111: LD_INT 16
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: IN
47118: IFFALSE 47139
// points := [ 5 , 3 , 2 ] ;
47120: LD_ADDR_VAR 0 9
47124: PUSH
47125: LD_INT 5
47127: PUSH
47128: LD_INT 3
47130: PUSH
47131: LD_INT 2
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: LIST
47138: ST_TO_ADDR
// if GetClass ( i ) = 17 then
47139: LD_VAR 0 6
47143: PPUSH
47144: CALL_OW 257
47148: PUSH
47149: LD_INT 17
47151: EQUAL
47152: IFFALSE 47173
// points := [ 100 , 50 , 75 ] ;
47154: LD_ADDR_VAR 0 9
47158: PUSH
47159: LD_INT 100
47161: PUSH
47162: LD_INT 50
47164: PUSH
47165: LD_INT 75
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: LIST
47172: ST_TO_ADDR
// if GetClass ( i ) = 15 then
47173: LD_VAR 0 6
47177: PPUSH
47178: CALL_OW 257
47182: PUSH
47183: LD_INT 15
47185: EQUAL
47186: IFFALSE 47207
// points := [ 10 , 5 , 3 ] ;
47188: LD_ADDR_VAR 0 9
47192: PUSH
47193: LD_INT 10
47195: PUSH
47196: LD_INT 5
47198: PUSH
47199: LD_INT 3
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: LIST
47206: ST_TO_ADDR
// if GetClass ( i ) = 14 then
47207: LD_VAR 0 6
47211: PPUSH
47212: CALL_OW 257
47216: PUSH
47217: LD_INT 14
47219: EQUAL
47220: IFFALSE 47241
// points := [ 10 , 0 , 0 ] ;
47222: LD_ADDR_VAR 0 9
47226: PUSH
47227: LD_INT 10
47229: PUSH
47230: LD_INT 0
47232: PUSH
47233: LD_INT 0
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: LIST
47240: ST_TO_ADDR
// if GetClass ( i ) = 11 then
47241: LD_VAR 0 6
47245: PPUSH
47246: CALL_OW 257
47250: PUSH
47251: LD_INT 11
47253: EQUAL
47254: IFFALSE 47275
// points := [ 30 , 10 , 5 ] ;
47256: LD_ADDR_VAR 0 9
47260: PUSH
47261: LD_INT 30
47263: PUSH
47264: LD_INT 10
47266: PUSH
47267: LD_INT 5
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: LIST
47274: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
47275: LD_VAR 0 1
47279: PPUSH
47280: LD_INT 5
47282: PPUSH
47283: CALL_OW 321
47287: PUSH
47288: LD_INT 2
47290: EQUAL
47291: IFFALSE 47308
// bpoints := bpoints * 1.8 ;
47293: LD_ADDR_VAR 0 10
47297: PUSH
47298: LD_VAR 0 10
47302: PUSH
47303: LD_REAL  1.80000000000000E+0000
47306: MUL
47307: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
47308: LD_VAR 0 6
47312: PPUSH
47313: CALL_OW 257
47317: PUSH
47318: LD_INT 1
47320: PUSH
47321: LD_INT 2
47323: PUSH
47324: LD_INT 3
47326: PUSH
47327: LD_INT 4
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: LIST
47334: LIST
47335: IN
47336: PUSH
47337: LD_VAR 0 1
47341: PPUSH
47342: LD_INT 51
47344: PPUSH
47345: CALL_OW 321
47349: PUSH
47350: LD_INT 2
47352: EQUAL
47353: AND
47354: IFFALSE 47371
// bpoints := bpoints * 1.2 ;
47356: LD_ADDR_VAR 0 10
47360: PUSH
47361: LD_VAR 0 10
47365: PUSH
47366: LD_REAL  1.20000000000000E+0000
47369: MUL
47370: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
47371: LD_VAR 0 6
47375: PPUSH
47376: CALL_OW 257
47380: PUSH
47381: LD_INT 5
47383: PUSH
47384: LD_INT 7
47386: PUSH
47387: LD_INT 9
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: LIST
47394: IN
47395: PUSH
47396: LD_VAR 0 1
47400: PPUSH
47401: LD_INT 52
47403: PPUSH
47404: CALL_OW 321
47408: PUSH
47409: LD_INT 2
47411: EQUAL
47412: AND
47413: IFFALSE 47430
// bpoints := bpoints * 1.5 ;
47415: LD_ADDR_VAR 0 10
47419: PUSH
47420: LD_VAR 0 10
47424: PUSH
47425: LD_REAL  1.50000000000000E+0000
47428: MUL
47429: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
47430: LD_VAR 0 1
47434: PPUSH
47435: LD_INT 66
47437: PPUSH
47438: CALL_OW 321
47442: PUSH
47443: LD_INT 2
47445: EQUAL
47446: IFFALSE 47463
// bpoints := bpoints * 1.1 ;
47448: LD_ADDR_VAR 0 10
47452: PUSH
47453: LD_VAR 0 10
47457: PUSH
47458: LD_REAL  1.10000000000000E+0000
47461: MUL
47462: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
47463: LD_ADDR_VAR 0 10
47467: PUSH
47468: LD_VAR 0 10
47472: PUSH
47473: LD_VAR 0 6
47477: PPUSH
47478: LD_INT 1
47480: PPUSH
47481: CALL_OW 259
47485: PUSH
47486: LD_REAL  1.15000000000000E+0000
47489: MUL
47490: MUL
47491: ST_TO_ADDR
// end ; unit_vehicle :
47492: GO 48320
47494: LD_INT 2
47496: DOUBLE
47497: EQUAL
47498: IFTRUE 47502
47500: GO 48308
47502: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
47503: LD_VAR 0 6
47507: PPUSH
47508: CALL_OW 264
47512: PUSH
47513: LD_INT 2
47515: PUSH
47516: LD_INT 42
47518: PUSH
47519: LD_INT 24
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: LIST
47526: IN
47527: IFFALSE 47548
// points := [ 25 , 5 , 3 ] ;
47529: LD_ADDR_VAR 0 9
47533: PUSH
47534: LD_INT 25
47536: PUSH
47537: LD_INT 5
47539: PUSH
47540: LD_INT 3
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: LIST
47547: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
47548: LD_VAR 0 6
47552: PPUSH
47553: CALL_OW 264
47557: PUSH
47558: LD_INT 4
47560: PUSH
47561: LD_INT 43
47563: PUSH
47564: LD_INT 25
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: LIST
47571: IN
47572: IFFALSE 47593
// points := [ 40 , 15 , 5 ] ;
47574: LD_ADDR_VAR 0 9
47578: PUSH
47579: LD_INT 40
47581: PUSH
47582: LD_INT 15
47584: PUSH
47585: LD_INT 5
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: LIST
47592: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
47593: LD_VAR 0 6
47597: PPUSH
47598: CALL_OW 264
47602: PUSH
47603: LD_INT 3
47605: PUSH
47606: LD_INT 23
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: IN
47613: IFFALSE 47634
// points := [ 7 , 25 , 8 ] ;
47615: LD_ADDR_VAR 0 9
47619: PUSH
47620: LD_INT 7
47622: PUSH
47623: LD_INT 25
47625: PUSH
47626: LD_INT 8
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: LIST
47633: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
47634: LD_VAR 0 6
47638: PPUSH
47639: CALL_OW 264
47643: PUSH
47644: LD_INT 5
47646: PUSH
47647: LD_INT 27
47649: PUSH
47650: LD_INT 44
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: LIST
47657: IN
47658: IFFALSE 47679
// points := [ 14 , 50 , 16 ] ;
47660: LD_ADDR_VAR 0 9
47664: PUSH
47665: LD_INT 14
47667: PUSH
47668: LD_INT 50
47670: PUSH
47671: LD_INT 16
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: LIST
47678: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
47679: LD_VAR 0 6
47683: PPUSH
47684: CALL_OW 264
47688: PUSH
47689: LD_INT 6
47691: PUSH
47692: LD_INT 46
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: IN
47699: IFFALSE 47720
// points := [ 32 , 120 , 70 ] ;
47701: LD_ADDR_VAR 0 9
47705: PUSH
47706: LD_INT 32
47708: PUSH
47709: LD_INT 120
47711: PUSH
47712: LD_INT 70
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: LIST
47719: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
47720: LD_VAR 0 6
47724: PPUSH
47725: CALL_OW 264
47729: PUSH
47730: LD_INT 7
47732: PUSH
47733: LD_INT 28
47735: PUSH
47736: LD_INT 45
47738: PUSH
47739: LD_INT 92
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: LIST
47746: LIST
47747: IN
47748: IFFALSE 47769
// points := [ 35 , 20 , 45 ] ;
47750: LD_ADDR_VAR 0 9
47754: PUSH
47755: LD_INT 35
47757: PUSH
47758: LD_INT 20
47760: PUSH
47761: LD_INT 45
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: LIST
47768: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
47769: LD_VAR 0 6
47773: PPUSH
47774: CALL_OW 264
47778: PUSH
47779: LD_INT 47
47781: PUSH
47782: EMPTY
47783: LIST
47784: IN
47785: IFFALSE 47806
// points := [ 67 , 45 , 75 ] ;
47787: LD_ADDR_VAR 0 9
47791: PUSH
47792: LD_INT 67
47794: PUSH
47795: LD_INT 45
47797: PUSH
47798: LD_INT 75
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: LIST
47805: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
47806: LD_VAR 0 6
47810: PPUSH
47811: CALL_OW 264
47815: PUSH
47816: LD_INT 26
47818: PUSH
47819: EMPTY
47820: LIST
47821: IN
47822: IFFALSE 47843
// points := [ 120 , 30 , 80 ] ;
47824: LD_ADDR_VAR 0 9
47828: PUSH
47829: LD_INT 120
47831: PUSH
47832: LD_INT 30
47834: PUSH
47835: LD_INT 80
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: LIST
47842: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
47843: LD_VAR 0 6
47847: PPUSH
47848: CALL_OW 264
47852: PUSH
47853: LD_INT 22
47855: PUSH
47856: EMPTY
47857: LIST
47858: IN
47859: IFFALSE 47880
// points := [ 40 , 1 , 1 ] ;
47861: LD_ADDR_VAR 0 9
47865: PUSH
47866: LD_INT 40
47868: PUSH
47869: LD_INT 1
47871: PUSH
47872: LD_INT 1
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: LIST
47879: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
47880: LD_VAR 0 6
47884: PPUSH
47885: CALL_OW 264
47889: PUSH
47890: LD_INT 29
47892: PUSH
47893: EMPTY
47894: LIST
47895: IN
47896: IFFALSE 47917
// points := [ 70 , 200 , 400 ] ;
47898: LD_ADDR_VAR 0 9
47902: PUSH
47903: LD_INT 70
47905: PUSH
47906: LD_INT 200
47908: PUSH
47909: LD_INT 400
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: LIST
47916: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
47917: LD_VAR 0 6
47921: PPUSH
47922: CALL_OW 264
47926: PUSH
47927: LD_INT 14
47929: PUSH
47930: LD_INT 53
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: IN
47937: IFFALSE 47958
// points := [ 40 , 10 , 20 ] ;
47939: LD_ADDR_VAR 0 9
47943: PUSH
47944: LD_INT 40
47946: PUSH
47947: LD_INT 10
47949: PUSH
47950: LD_INT 20
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: LIST
47957: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
47958: LD_VAR 0 6
47962: PPUSH
47963: CALL_OW 264
47967: PUSH
47968: LD_INT 9
47970: PUSH
47971: EMPTY
47972: LIST
47973: IN
47974: IFFALSE 47995
// points := [ 5 , 70 , 20 ] ;
47976: LD_ADDR_VAR 0 9
47980: PUSH
47981: LD_INT 5
47983: PUSH
47984: LD_INT 70
47986: PUSH
47987: LD_INT 20
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: LIST
47994: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
47995: LD_VAR 0 6
47999: PPUSH
48000: CALL_OW 264
48004: PUSH
48005: LD_INT 10
48007: PUSH
48008: EMPTY
48009: LIST
48010: IN
48011: IFFALSE 48032
// points := [ 35 , 110 , 70 ] ;
48013: LD_ADDR_VAR 0 9
48017: PUSH
48018: LD_INT 35
48020: PUSH
48021: LD_INT 110
48023: PUSH
48024: LD_INT 70
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: LIST
48031: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
48032: LD_VAR 0 6
48036: PPUSH
48037: CALL_OW 265
48041: PUSH
48042: LD_INT 25
48044: EQUAL
48045: IFFALSE 48066
// points := [ 80 , 65 , 100 ] ;
48047: LD_ADDR_VAR 0 9
48051: PUSH
48052: LD_INT 80
48054: PUSH
48055: LD_INT 65
48057: PUSH
48058: LD_INT 100
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: LIST
48065: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
48066: LD_VAR 0 6
48070: PPUSH
48071: CALL_OW 263
48075: PUSH
48076: LD_INT 1
48078: EQUAL
48079: IFFALSE 48114
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
48081: LD_ADDR_VAR 0 10
48085: PUSH
48086: LD_VAR 0 10
48090: PUSH
48091: LD_VAR 0 6
48095: PPUSH
48096: CALL_OW 311
48100: PPUSH
48101: LD_INT 3
48103: PPUSH
48104: CALL_OW 259
48108: PUSH
48109: LD_INT 4
48111: MUL
48112: MUL
48113: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
48114: LD_VAR 0 6
48118: PPUSH
48119: CALL_OW 263
48123: PUSH
48124: LD_INT 2
48126: EQUAL
48127: IFFALSE 48178
// begin j := IsControledBy ( i ) ;
48129: LD_ADDR_VAR 0 7
48133: PUSH
48134: LD_VAR 0 6
48138: PPUSH
48139: CALL_OW 312
48143: ST_TO_ADDR
// if j then
48144: LD_VAR 0 7
48148: IFFALSE 48178
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
48150: LD_ADDR_VAR 0 10
48154: PUSH
48155: LD_VAR 0 10
48159: PUSH
48160: LD_VAR 0 7
48164: PPUSH
48165: LD_INT 3
48167: PPUSH
48168: CALL_OW 259
48172: PUSH
48173: LD_INT 3
48175: MUL
48176: MUL
48177: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
48178: LD_VAR 0 6
48182: PPUSH
48183: CALL_OW 264
48187: PUSH
48188: LD_INT 5
48190: PUSH
48191: LD_INT 6
48193: PUSH
48194: LD_INT 46
48196: PUSH
48197: LD_INT 44
48199: PUSH
48200: LD_INT 47
48202: PUSH
48203: LD_INT 45
48205: PUSH
48206: LD_INT 28
48208: PUSH
48209: LD_INT 7
48211: PUSH
48212: LD_INT 27
48214: PUSH
48215: LD_INT 29
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: LIST
48222: LIST
48223: LIST
48224: LIST
48225: LIST
48226: LIST
48227: LIST
48228: LIST
48229: IN
48230: PUSH
48231: LD_VAR 0 1
48235: PPUSH
48236: LD_INT 52
48238: PPUSH
48239: CALL_OW 321
48243: PUSH
48244: LD_INT 2
48246: EQUAL
48247: AND
48248: IFFALSE 48265
// bpoints := bpoints * 1.2 ;
48250: LD_ADDR_VAR 0 10
48254: PUSH
48255: LD_VAR 0 10
48259: PUSH
48260: LD_REAL  1.20000000000000E+0000
48263: MUL
48264: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
48265: LD_VAR 0 6
48269: PPUSH
48270: CALL_OW 264
48274: PUSH
48275: LD_INT 6
48277: PUSH
48278: LD_INT 46
48280: PUSH
48281: LD_INT 47
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: LIST
48288: IN
48289: IFFALSE 48306
// bpoints := bpoints * 1.2 ;
48291: LD_ADDR_VAR 0 10
48295: PUSH
48296: LD_VAR 0 10
48300: PUSH
48301: LD_REAL  1.20000000000000E+0000
48304: MUL
48305: ST_TO_ADDR
// end ; unit_building :
48306: GO 48320
48308: LD_INT 3
48310: DOUBLE
48311: EQUAL
48312: IFTRUE 48316
48314: GO 48319
48316: POP
// ; end ;
48317: GO 48320
48319: POP
// for j = 1 to 3 do
48320: LD_ADDR_VAR 0 7
48324: PUSH
48325: DOUBLE
48326: LD_INT 1
48328: DEC
48329: ST_TO_ADDR
48330: LD_INT 3
48332: PUSH
48333: FOR_TO
48334: IFFALSE 48387
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
48336: LD_ADDR_VAR 0 5
48340: PUSH
48341: LD_VAR 0 5
48345: PPUSH
48346: LD_VAR 0 7
48350: PPUSH
48351: LD_VAR 0 5
48355: PUSH
48356: LD_VAR 0 7
48360: ARRAY
48361: PUSH
48362: LD_VAR 0 9
48366: PUSH
48367: LD_VAR 0 7
48371: ARRAY
48372: PUSH
48373: LD_VAR 0 10
48377: MUL
48378: PLUS
48379: PPUSH
48380: CALL_OW 1
48384: ST_TO_ADDR
48385: GO 48333
48387: POP
48388: POP
// end ;
48389: GO 46868
48391: POP
48392: POP
// result := Replace ( result , 4 , tmp ) ;
48393: LD_ADDR_VAR 0 5
48397: PUSH
48398: LD_VAR 0 5
48402: PPUSH
48403: LD_INT 4
48405: PPUSH
48406: LD_VAR 0 8
48410: PPUSH
48411: CALL_OW 1
48415: ST_TO_ADDR
// end ;
48416: LD_VAR 0 5
48420: RET
// export function DangerAtRange ( unit , range ) ; begin
48421: LD_INT 0
48423: PPUSH
// if not unit then
48424: LD_VAR 0 1
48428: NOT
48429: IFFALSE 48433
// exit ;
48431: GO 48478
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
48433: LD_ADDR_VAR 0 3
48437: PUSH
48438: LD_VAR 0 1
48442: PPUSH
48443: CALL_OW 255
48447: PPUSH
48448: LD_VAR 0 1
48452: PPUSH
48453: CALL_OW 250
48457: PPUSH
48458: LD_VAR 0 1
48462: PPUSH
48463: CALL_OW 251
48467: PPUSH
48468: LD_VAR 0 2
48472: PPUSH
48473: CALL 46720 0 4
48477: ST_TO_ADDR
// end ;
48478: LD_VAR 0 3
48482: RET
// export function DangerInArea ( side , area ) ; begin
48483: LD_INT 0
48485: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
48486: LD_ADDR_VAR 0 3
48490: PUSH
48491: LD_VAR 0 2
48495: PPUSH
48496: LD_INT 81
48498: PUSH
48499: LD_VAR 0 1
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PPUSH
48508: CALL_OW 70
48512: ST_TO_ADDR
// end ;
48513: LD_VAR 0 3
48517: RET
// export function IsExtension ( b ) ; begin
48518: LD_INT 0
48520: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
48521: LD_ADDR_VAR 0 2
48525: PUSH
48526: LD_VAR 0 1
48530: PUSH
48531: LD_INT 23
48533: PUSH
48534: LD_INT 20
48536: PUSH
48537: LD_INT 22
48539: PUSH
48540: LD_INT 17
48542: PUSH
48543: LD_INT 24
48545: PUSH
48546: LD_INT 21
48548: PUSH
48549: LD_INT 19
48551: PUSH
48552: LD_INT 16
48554: PUSH
48555: LD_INT 25
48557: PUSH
48558: LD_INT 18
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: LIST
48565: LIST
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: IN
48573: ST_TO_ADDR
// end ;
48574: LD_VAR 0 2
48578: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
48579: LD_INT 0
48581: PPUSH
48582: PPUSH
48583: PPUSH
// result := [ ] ;
48584: LD_ADDR_VAR 0 4
48588: PUSH
48589: EMPTY
48590: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
48591: LD_ADDR_VAR 0 5
48595: PUSH
48596: LD_VAR 0 2
48600: PPUSH
48601: LD_INT 21
48603: PUSH
48604: LD_INT 3
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PPUSH
48611: CALL_OW 70
48615: ST_TO_ADDR
// if not tmp then
48616: LD_VAR 0 5
48620: NOT
48621: IFFALSE 48625
// exit ;
48623: GO 48689
// if checkLink then
48625: LD_VAR 0 3
48629: IFFALSE 48679
// begin for i in tmp do
48631: LD_ADDR_VAR 0 6
48635: PUSH
48636: LD_VAR 0 5
48640: PUSH
48641: FOR_IN
48642: IFFALSE 48677
// if GetBase ( i ) <> base then
48644: LD_VAR 0 6
48648: PPUSH
48649: CALL_OW 274
48653: PUSH
48654: LD_VAR 0 1
48658: NONEQUAL
48659: IFFALSE 48675
// ComLinkToBase ( base , i ) ;
48661: LD_VAR 0 1
48665: PPUSH
48666: LD_VAR 0 6
48670: PPUSH
48671: CALL_OW 169
48675: GO 48641
48677: POP
48678: POP
// end ; result := tmp ;
48679: LD_ADDR_VAR 0 4
48683: PUSH
48684: LD_VAR 0 5
48688: ST_TO_ADDR
// end ;
48689: LD_VAR 0 4
48693: RET
// export function ComComplete ( units , b ) ; var i ; begin
48694: LD_INT 0
48696: PPUSH
48697: PPUSH
// if not units then
48698: LD_VAR 0 1
48702: NOT
48703: IFFALSE 48707
// exit ;
48705: GO 48797
// for i in units do
48707: LD_ADDR_VAR 0 4
48711: PUSH
48712: LD_VAR 0 1
48716: PUSH
48717: FOR_IN
48718: IFFALSE 48795
// if BuildingStatus ( b ) = bs_build then
48720: LD_VAR 0 2
48724: PPUSH
48725: CALL_OW 461
48729: PUSH
48730: LD_INT 1
48732: EQUAL
48733: IFFALSE 48793
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
48735: LD_VAR 0 4
48739: PPUSH
48740: LD_STRING h
48742: PUSH
48743: LD_VAR 0 2
48747: PPUSH
48748: CALL_OW 250
48752: PUSH
48753: LD_VAR 0 2
48757: PPUSH
48758: CALL_OW 251
48762: PUSH
48763: LD_VAR 0 2
48767: PUSH
48768: LD_INT 0
48770: PUSH
48771: LD_INT 0
48773: PUSH
48774: LD_INT 0
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: LIST
48783: LIST
48784: LIST
48785: PUSH
48786: EMPTY
48787: LIST
48788: PPUSH
48789: CALL_OW 446
48793: GO 48717
48795: POP
48796: POP
// end ;
48797: LD_VAR 0 3
48801: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
48802: LD_INT 0
48804: PPUSH
48805: PPUSH
48806: PPUSH
48807: PPUSH
48808: PPUSH
48809: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
48810: LD_VAR 0 1
48814: NOT
48815: PUSH
48816: LD_VAR 0 1
48820: PPUSH
48821: CALL_OW 263
48825: PUSH
48826: LD_INT 2
48828: NONEQUAL
48829: OR
48830: IFFALSE 48834
// exit ;
48832: GO 49150
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
48834: LD_ADDR_VAR 0 6
48838: PUSH
48839: LD_INT 22
48841: PUSH
48842: LD_VAR 0 1
48846: PPUSH
48847: CALL_OW 255
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 2
48858: PUSH
48859: LD_INT 30
48861: PUSH
48862: LD_INT 36
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: PUSH
48869: LD_INT 34
48871: PUSH
48872: LD_INT 31
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: LIST
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PPUSH
48888: CALL_OW 69
48892: ST_TO_ADDR
// if not tmp then
48893: LD_VAR 0 6
48897: NOT
48898: IFFALSE 48902
// exit ;
48900: GO 49150
// result := [ ] ;
48902: LD_ADDR_VAR 0 2
48906: PUSH
48907: EMPTY
48908: ST_TO_ADDR
// for i in tmp do
48909: LD_ADDR_VAR 0 3
48913: PUSH
48914: LD_VAR 0 6
48918: PUSH
48919: FOR_IN
48920: IFFALSE 48991
// begin t := UnitsInside ( i ) ;
48922: LD_ADDR_VAR 0 4
48926: PUSH
48927: LD_VAR 0 3
48931: PPUSH
48932: CALL_OW 313
48936: ST_TO_ADDR
// if t then
48937: LD_VAR 0 4
48941: IFFALSE 48989
// for j in t do
48943: LD_ADDR_VAR 0 7
48947: PUSH
48948: LD_VAR 0 4
48952: PUSH
48953: FOR_IN
48954: IFFALSE 48987
// result := Replace ( result , result + 1 , j ) ;
48956: LD_ADDR_VAR 0 2
48960: PUSH
48961: LD_VAR 0 2
48965: PPUSH
48966: LD_VAR 0 2
48970: PUSH
48971: LD_INT 1
48973: PLUS
48974: PPUSH
48975: LD_VAR 0 7
48979: PPUSH
48980: CALL_OW 1
48984: ST_TO_ADDR
48985: GO 48953
48987: POP
48988: POP
// end ;
48989: GO 48919
48991: POP
48992: POP
// if not result then
48993: LD_VAR 0 2
48997: NOT
48998: IFFALSE 49002
// exit ;
49000: GO 49150
// mech := result [ 1 ] ;
49002: LD_ADDR_VAR 0 5
49006: PUSH
49007: LD_VAR 0 2
49011: PUSH
49012: LD_INT 1
49014: ARRAY
49015: ST_TO_ADDR
// if result > 1 then
49016: LD_VAR 0 2
49020: PUSH
49021: LD_INT 1
49023: GREATER
49024: IFFALSE 49136
// begin for i = 2 to result do
49026: LD_ADDR_VAR 0 3
49030: PUSH
49031: DOUBLE
49032: LD_INT 2
49034: DEC
49035: ST_TO_ADDR
49036: LD_VAR 0 2
49040: PUSH
49041: FOR_TO
49042: IFFALSE 49134
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
49044: LD_ADDR_VAR 0 4
49048: PUSH
49049: LD_VAR 0 2
49053: PUSH
49054: LD_VAR 0 3
49058: ARRAY
49059: PPUSH
49060: LD_INT 3
49062: PPUSH
49063: CALL_OW 259
49067: PUSH
49068: LD_VAR 0 2
49072: PUSH
49073: LD_VAR 0 3
49077: ARRAY
49078: PPUSH
49079: CALL_OW 432
49083: MINUS
49084: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
49085: LD_VAR 0 4
49089: PUSH
49090: LD_VAR 0 5
49094: PPUSH
49095: LD_INT 3
49097: PPUSH
49098: CALL_OW 259
49102: PUSH
49103: LD_VAR 0 5
49107: PPUSH
49108: CALL_OW 432
49112: MINUS
49113: GREATEREQUAL
49114: IFFALSE 49132
// mech := result [ i ] ;
49116: LD_ADDR_VAR 0 5
49120: PUSH
49121: LD_VAR 0 2
49125: PUSH
49126: LD_VAR 0 3
49130: ARRAY
49131: ST_TO_ADDR
// end ;
49132: GO 49041
49134: POP
49135: POP
// end ; ComLinkTo ( vehicle , mech ) ;
49136: LD_VAR 0 1
49140: PPUSH
49141: LD_VAR 0 5
49145: PPUSH
49146: CALL_OW 135
// end ;
49150: LD_VAR 0 2
49154: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
49155: LD_INT 0
49157: PPUSH
49158: PPUSH
49159: PPUSH
49160: PPUSH
49161: PPUSH
49162: PPUSH
49163: PPUSH
49164: PPUSH
49165: PPUSH
49166: PPUSH
49167: PPUSH
49168: PPUSH
49169: PPUSH
// result := [ ] ;
49170: LD_ADDR_VAR 0 7
49174: PUSH
49175: EMPTY
49176: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
49177: LD_VAR 0 1
49181: PPUSH
49182: CALL_OW 266
49186: PUSH
49187: LD_INT 0
49189: PUSH
49190: LD_INT 1
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: IN
49197: NOT
49198: IFFALSE 49202
// exit ;
49200: GO 50836
// if name then
49202: LD_VAR 0 3
49206: IFFALSE 49222
// SetBName ( base_dep , name ) ;
49208: LD_VAR 0 1
49212: PPUSH
49213: LD_VAR 0 3
49217: PPUSH
49218: CALL_OW 500
// base := GetBase ( base_dep ) ;
49222: LD_ADDR_VAR 0 15
49226: PUSH
49227: LD_VAR 0 1
49231: PPUSH
49232: CALL_OW 274
49236: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
49237: LD_ADDR_VAR 0 16
49241: PUSH
49242: LD_VAR 0 1
49246: PPUSH
49247: CALL_OW 255
49251: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
49252: LD_ADDR_VAR 0 17
49256: PUSH
49257: LD_VAR 0 1
49261: PPUSH
49262: CALL_OW 248
49266: ST_TO_ADDR
// if sources then
49267: LD_VAR 0 5
49271: IFFALSE 49318
// for i = 1 to 3 do
49273: LD_ADDR_VAR 0 8
49277: PUSH
49278: DOUBLE
49279: LD_INT 1
49281: DEC
49282: ST_TO_ADDR
49283: LD_INT 3
49285: PUSH
49286: FOR_TO
49287: IFFALSE 49316
// AddResourceType ( base , i , sources [ i ] ) ;
49289: LD_VAR 0 15
49293: PPUSH
49294: LD_VAR 0 8
49298: PPUSH
49299: LD_VAR 0 5
49303: PUSH
49304: LD_VAR 0 8
49308: ARRAY
49309: PPUSH
49310: CALL_OW 276
49314: GO 49286
49316: POP
49317: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
49318: LD_ADDR_VAR 0 18
49322: PUSH
49323: LD_VAR 0 15
49327: PPUSH
49328: LD_VAR 0 2
49332: PPUSH
49333: LD_INT 1
49335: PPUSH
49336: CALL 48579 0 3
49340: ST_TO_ADDR
// InitHc ;
49341: CALL_OW 19
// InitUc ;
49345: CALL_OW 18
// uc_side := side ;
49349: LD_ADDR_OWVAR 20
49353: PUSH
49354: LD_VAR 0 16
49358: ST_TO_ADDR
// uc_nation := nation ;
49359: LD_ADDR_OWVAR 21
49363: PUSH
49364: LD_VAR 0 17
49368: ST_TO_ADDR
// if buildings then
49369: LD_VAR 0 18
49373: IFFALSE 50695
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
49375: LD_ADDR_VAR 0 19
49379: PUSH
49380: LD_VAR 0 18
49384: PPUSH
49385: LD_INT 2
49387: PUSH
49388: LD_INT 30
49390: PUSH
49391: LD_INT 29
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 30
49400: PUSH
49401: LD_INT 30
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: LIST
49412: PPUSH
49413: CALL_OW 72
49417: ST_TO_ADDR
// if tmp then
49418: LD_VAR 0 19
49422: IFFALSE 49470
// for i in tmp do
49424: LD_ADDR_VAR 0 8
49428: PUSH
49429: LD_VAR 0 19
49433: PUSH
49434: FOR_IN
49435: IFFALSE 49468
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
49437: LD_VAR 0 8
49441: PPUSH
49442: CALL_OW 250
49446: PPUSH
49447: LD_VAR 0 8
49451: PPUSH
49452: CALL_OW 251
49456: PPUSH
49457: LD_VAR 0 16
49461: PPUSH
49462: CALL_OW 441
49466: GO 49434
49468: POP
49469: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
49470: LD_VAR 0 18
49474: PPUSH
49475: LD_INT 2
49477: PUSH
49478: LD_INT 30
49480: PUSH
49481: LD_INT 32
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 30
49490: PUSH
49491: LD_INT 33
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: LIST
49502: PPUSH
49503: CALL_OW 72
49507: IFFALSE 49595
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
49509: LD_ADDR_VAR 0 8
49513: PUSH
49514: LD_VAR 0 18
49518: PPUSH
49519: LD_INT 2
49521: PUSH
49522: LD_INT 30
49524: PUSH
49525: LD_INT 32
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 30
49534: PUSH
49535: LD_INT 33
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: LIST
49546: PPUSH
49547: CALL_OW 72
49551: PUSH
49552: FOR_IN
49553: IFFALSE 49593
// begin if not GetBWeapon ( i ) then
49555: LD_VAR 0 8
49559: PPUSH
49560: CALL_OW 269
49564: NOT
49565: IFFALSE 49591
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
49567: LD_VAR 0 8
49571: PPUSH
49572: LD_VAR 0 8
49576: PPUSH
49577: LD_VAR 0 2
49581: PPUSH
49582: CALL 50841 0 2
49586: PPUSH
49587: CALL_OW 431
// end ;
49591: GO 49552
49593: POP
49594: POP
// end ; for i = 1 to personel do
49595: LD_ADDR_VAR 0 8
49599: PUSH
49600: DOUBLE
49601: LD_INT 1
49603: DEC
49604: ST_TO_ADDR
49605: LD_VAR 0 6
49609: PUSH
49610: FOR_TO
49611: IFFALSE 50675
// begin if i > 4 then
49613: LD_VAR 0 8
49617: PUSH
49618: LD_INT 4
49620: GREATER
49621: IFFALSE 49625
// break ;
49623: GO 50675
// case i of 1 :
49625: LD_VAR 0 8
49629: PUSH
49630: LD_INT 1
49632: DOUBLE
49633: EQUAL
49634: IFTRUE 49638
49636: GO 49718
49638: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
49639: LD_ADDR_VAR 0 12
49643: PUSH
49644: LD_VAR 0 18
49648: PPUSH
49649: LD_INT 22
49651: PUSH
49652: LD_VAR 0 16
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: LD_INT 58
49663: PUSH
49664: EMPTY
49665: LIST
49666: PUSH
49667: LD_INT 2
49669: PUSH
49670: LD_INT 30
49672: PUSH
49673: LD_INT 32
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: LD_INT 30
49682: PUSH
49683: LD_INT 4
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 30
49692: PUSH
49693: LD_INT 5
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: LIST
49710: PPUSH
49711: CALL_OW 72
49715: ST_TO_ADDR
49716: GO 49940
49718: LD_INT 2
49720: DOUBLE
49721: EQUAL
49722: IFTRUE 49726
49724: GO 49788
49726: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
49727: LD_ADDR_VAR 0 12
49731: PUSH
49732: LD_VAR 0 18
49736: PPUSH
49737: LD_INT 22
49739: PUSH
49740: LD_VAR 0 16
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 2
49751: PUSH
49752: LD_INT 30
49754: PUSH
49755: LD_INT 0
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 30
49764: PUSH
49765: LD_INT 1
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: LIST
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PPUSH
49781: CALL_OW 72
49785: ST_TO_ADDR
49786: GO 49940
49788: LD_INT 3
49790: DOUBLE
49791: EQUAL
49792: IFTRUE 49796
49794: GO 49858
49796: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
49797: LD_ADDR_VAR 0 12
49801: PUSH
49802: LD_VAR 0 18
49806: PPUSH
49807: LD_INT 22
49809: PUSH
49810: LD_VAR 0 16
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 2
49821: PUSH
49822: LD_INT 30
49824: PUSH
49825: LD_INT 2
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: PUSH
49832: LD_INT 30
49834: PUSH
49835: LD_INT 3
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: LIST
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PPUSH
49851: CALL_OW 72
49855: ST_TO_ADDR
49856: GO 49940
49858: LD_INT 4
49860: DOUBLE
49861: EQUAL
49862: IFTRUE 49866
49864: GO 49939
49866: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
49867: LD_ADDR_VAR 0 12
49871: PUSH
49872: LD_VAR 0 18
49876: PPUSH
49877: LD_INT 22
49879: PUSH
49880: LD_VAR 0 16
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 2
49891: PUSH
49892: LD_INT 30
49894: PUSH
49895: LD_INT 6
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 30
49904: PUSH
49905: LD_INT 7
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_INT 30
49914: PUSH
49915: LD_INT 8
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PPUSH
49932: CALL_OW 72
49936: ST_TO_ADDR
49937: GO 49940
49939: POP
// if i = 1 then
49940: LD_VAR 0 8
49944: PUSH
49945: LD_INT 1
49947: EQUAL
49948: IFFALSE 50059
// begin tmp := [ ] ;
49950: LD_ADDR_VAR 0 19
49954: PUSH
49955: EMPTY
49956: ST_TO_ADDR
// for j in f do
49957: LD_ADDR_VAR 0 9
49961: PUSH
49962: LD_VAR 0 12
49966: PUSH
49967: FOR_IN
49968: IFFALSE 50041
// if GetBType ( j ) = b_bunker then
49970: LD_VAR 0 9
49974: PPUSH
49975: CALL_OW 266
49979: PUSH
49980: LD_INT 32
49982: EQUAL
49983: IFFALSE 50010
// tmp := Insert ( tmp , 1 , j ) else
49985: LD_ADDR_VAR 0 19
49989: PUSH
49990: LD_VAR 0 19
49994: PPUSH
49995: LD_INT 1
49997: PPUSH
49998: LD_VAR 0 9
50002: PPUSH
50003: CALL_OW 2
50007: ST_TO_ADDR
50008: GO 50039
// tmp := Insert ( tmp , tmp + 1 , j ) ;
50010: LD_ADDR_VAR 0 19
50014: PUSH
50015: LD_VAR 0 19
50019: PPUSH
50020: LD_VAR 0 19
50024: PUSH
50025: LD_INT 1
50027: PLUS
50028: PPUSH
50029: LD_VAR 0 9
50033: PPUSH
50034: CALL_OW 2
50038: ST_TO_ADDR
50039: GO 49967
50041: POP
50042: POP
// if tmp then
50043: LD_VAR 0 19
50047: IFFALSE 50059
// f := tmp ;
50049: LD_ADDR_VAR 0 12
50053: PUSH
50054: LD_VAR 0 19
50058: ST_TO_ADDR
// end ; x := personel [ i ] ;
50059: LD_ADDR_VAR 0 13
50063: PUSH
50064: LD_VAR 0 6
50068: PUSH
50069: LD_VAR 0 8
50073: ARRAY
50074: ST_TO_ADDR
// if x = - 1 then
50075: LD_VAR 0 13
50079: PUSH
50080: LD_INT 1
50082: NEG
50083: EQUAL
50084: IFFALSE 50293
// begin for j in f do
50086: LD_ADDR_VAR 0 9
50090: PUSH
50091: LD_VAR 0 12
50095: PUSH
50096: FOR_IN
50097: IFFALSE 50289
// repeat InitHc ;
50099: CALL_OW 19
// if GetBType ( j ) = b_barracks then
50103: LD_VAR 0 9
50107: PPUSH
50108: CALL_OW 266
50112: PUSH
50113: LD_INT 5
50115: EQUAL
50116: IFFALSE 50186
// begin if UnitsInside ( j ) < 3 then
50118: LD_VAR 0 9
50122: PPUSH
50123: CALL_OW 313
50127: PUSH
50128: LD_INT 3
50130: LESS
50131: IFFALSE 50167
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50133: LD_INT 0
50135: PPUSH
50136: LD_INT 5
50138: PUSH
50139: LD_INT 8
50141: PUSH
50142: LD_INT 9
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: LIST
50149: PUSH
50150: LD_VAR 0 17
50154: ARRAY
50155: PPUSH
50156: LD_VAR 0 4
50160: PPUSH
50161: CALL_OW 380
50165: GO 50184
// PrepareHuman ( false , i , skill ) ;
50167: LD_INT 0
50169: PPUSH
50170: LD_VAR 0 8
50174: PPUSH
50175: LD_VAR 0 4
50179: PPUSH
50180: CALL_OW 380
// end else
50184: GO 50203
// PrepareHuman ( false , i , skill ) ;
50186: LD_INT 0
50188: PPUSH
50189: LD_VAR 0 8
50193: PPUSH
50194: LD_VAR 0 4
50198: PPUSH
50199: CALL_OW 380
// un := CreateHuman ;
50203: LD_ADDR_VAR 0 14
50207: PUSH
50208: CALL_OW 44
50212: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50213: LD_ADDR_VAR 0 7
50217: PUSH
50218: LD_VAR 0 7
50222: PPUSH
50223: LD_INT 1
50225: PPUSH
50226: LD_VAR 0 14
50230: PPUSH
50231: CALL_OW 2
50235: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
50236: LD_VAR 0 14
50240: PPUSH
50241: LD_VAR 0 9
50245: PPUSH
50246: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
50250: LD_VAR 0 9
50254: PPUSH
50255: CALL_OW 313
50259: PUSH
50260: LD_INT 6
50262: EQUAL
50263: PUSH
50264: LD_VAR 0 9
50268: PPUSH
50269: CALL_OW 266
50273: PUSH
50274: LD_INT 32
50276: PUSH
50277: LD_INT 31
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: IN
50284: OR
50285: IFFALSE 50099
50287: GO 50096
50289: POP
50290: POP
// end else
50291: GO 50673
// for j = 1 to x do
50293: LD_ADDR_VAR 0 9
50297: PUSH
50298: DOUBLE
50299: LD_INT 1
50301: DEC
50302: ST_TO_ADDR
50303: LD_VAR 0 13
50307: PUSH
50308: FOR_TO
50309: IFFALSE 50671
// begin InitHc ;
50311: CALL_OW 19
// if not f then
50315: LD_VAR 0 12
50319: NOT
50320: IFFALSE 50409
// begin PrepareHuman ( false , i , skill ) ;
50322: LD_INT 0
50324: PPUSH
50325: LD_VAR 0 8
50329: PPUSH
50330: LD_VAR 0 4
50334: PPUSH
50335: CALL_OW 380
// un := CreateHuman ;
50339: LD_ADDR_VAR 0 14
50343: PUSH
50344: CALL_OW 44
50348: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50349: LD_ADDR_VAR 0 7
50353: PUSH
50354: LD_VAR 0 7
50358: PPUSH
50359: LD_INT 1
50361: PPUSH
50362: LD_VAR 0 14
50366: PPUSH
50367: CALL_OW 2
50371: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50372: LD_VAR 0 14
50376: PPUSH
50377: LD_VAR 0 1
50381: PPUSH
50382: CALL_OW 250
50386: PPUSH
50387: LD_VAR 0 1
50391: PPUSH
50392: CALL_OW 251
50396: PPUSH
50397: LD_INT 10
50399: PPUSH
50400: LD_INT 0
50402: PPUSH
50403: CALL_OW 50
// continue ;
50407: GO 50308
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
50409: LD_VAR 0 12
50413: PUSH
50414: LD_INT 1
50416: ARRAY
50417: PPUSH
50418: CALL_OW 313
50422: PUSH
50423: LD_VAR 0 12
50427: PUSH
50428: LD_INT 1
50430: ARRAY
50431: PPUSH
50432: CALL_OW 266
50436: PUSH
50437: LD_INT 32
50439: PUSH
50440: LD_INT 31
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: IN
50447: AND
50448: PUSH
50449: LD_VAR 0 12
50453: PUSH
50454: LD_INT 1
50456: ARRAY
50457: PPUSH
50458: CALL_OW 313
50462: PUSH
50463: LD_INT 6
50465: EQUAL
50466: OR
50467: IFFALSE 50487
// f := Delete ( f , 1 ) ;
50469: LD_ADDR_VAR 0 12
50473: PUSH
50474: LD_VAR 0 12
50478: PPUSH
50479: LD_INT 1
50481: PPUSH
50482: CALL_OW 3
50486: ST_TO_ADDR
// if not f then
50487: LD_VAR 0 12
50491: NOT
50492: IFFALSE 50510
// begin x := x + 2 ;
50494: LD_ADDR_VAR 0 13
50498: PUSH
50499: LD_VAR 0 13
50503: PUSH
50504: LD_INT 2
50506: PLUS
50507: ST_TO_ADDR
// continue ;
50508: GO 50308
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
50510: LD_VAR 0 12
50514: PUSH
50515: LD_INT 1
50517: ARRAY
50518: PPUSH
50519: CALL_OW 266
50523: PUSH
50524: LD_INT 5
50526: EQUAL
50527: IFFALSE 50601
// begin if UnitsInside ( f [ 1 ] ) < 3 then
50529: LD_VAR 0 12
50533: PUSH
50534: LD_INT 1
50536: ARRAY
50537: PPUSH
50538: CALL_OW 313
50542: PUSH
50543: LD_INT 3
50545: LESS
50546: IFFALSE 50582
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50548: LD_INT 0
50550: PPUSH
50551: LD_INT 5
50553: PUSH
50554: LD_INT 8
50556: PUSH
50557: LD_INT 9
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: LIST
50564: PUSH
50565: LD_VAR 0 17
50569: ARRAY
50570: PPUSH
50571: LD_VAR 0 4
50575: PPUSH
50576: CALL_OW 380
50580: GO 50599
// PrepareHuman ( false , i , skill ) ;
50582: LD_INT 0
50584: PPUSH
50585: LD_VAR 0 8
50589: PPUSH
50590: LD_VAR 0 4
50594: PPUSH
50595: CALL_OW 380
// end else
50599: GO 50618
// PrepareHuman ( false , i , skill ) ;
50601: LD_INT 0
50603: PPUSH
50604: LD_VAR 0 8
50608: PPUSH
50609: LD_VAR 0 4
50613: PPUSH
50614: CALL_OW 380
// un := CreateHuman ;
50618: LD_ADDR_VAR 0 14
50622: PUSH
50623: CALL_OW 44
50627: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50628: LD_ADDR_VAR 0 7
50632: PUSH
50633: LD_VAR 0 7
50637: PPUSH
50638: LD_INT 1
50640: PPUSH
50641: LD_VAR 0 14
50645: PPUSH
50646: CALL_OW 2
50650: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
50651: LD_VAR 0 14
50655: PPUSH
50656: LD_VAR 0 12
50660: PUSH
50661: LD_INT 1
50663: ARRAY
50664: PPUSH
50665: CALL_OW 52
// end ;
50669: GO 50308
50671: POP
50672: POP
// end ;
50673: GO 49610
50675: POP
50676: POP
// result := result ^ buildings ;
50677: LD_ADDR_VAR 0 7
50681: PUSH
50682: LD_VAR 0 7
50686: PUSH
50687: LD_VAR 0 18
50691: ADD
50692: ST_TO_ADDR
// end else
50693: GO 50836
// begin for i = 1 to personel do
50695: LD_ADDR_VAR 0 8
50699: PUSH
50700: DOUBLE
50701: LD_INT 1
50703: DEC
50704: ST_TO_ADDR
50705: LD_VAR 0 6
50709: PUSH
50710: FOR_TO
50711: IFFALSE 50834
// begin if i > 4 then
50713: LD_VAR 0 8
50717: PUSH
50718: LD_INT 4
50720: GREATER
50721: IFFALSE 50725
// break ;
50723: GO 50834
// x := personel [ i ] ;
50725: LD_ADDR_VAR 0 13
50729: PUSH
50730: LD_VAR 0 6
50734: PUSH
50735: LD_VAR 0 8
50739: ARRAY
50740: ST_TO_ADDR
// if x = - 1 then
50741: LD_VAR 0 13
50745: PUSH
50746: LD_INT 1
50748: NEG
50749: EQUAL
50750: IFFALSE 50754
// continue ;
50752: GO 50710
// PrepareHuman ( false , i , skill ) ;
50754: LD_INT 0
50756: PPUSH
50757: LD_VAR 0 8
50761: PPUSH
50762: LD_VAR 0 4
50766: PPUSH
50767: CALL_OW 380
// un := CreateHuman ;
50771: LD_ADDR_VAR 0 14
50775: PUSH
50776: CALL_OW 44
50780: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50781: LD_VAR 0 14
50785: PPUSH
50786: LD_VAR 0 1
50790: PPUSH
50791: CALL_OW 250
50795: PPUSH
50796: LD_VAR 0 1
50800: PPUSH
50801: CALL_OW 251
50805: PPUSH
50806: LD_INT 10
50808: PPUSH
50809: LD_INT 0
50811: PPUSH
50812: CALL_OW 50
// result := result ^ un ;
50816: LD_ADDR_VAR 0 7
50820: PUSH
50821: LD_VAR 0 7
50825: PUSH
50826: LD_VAR 0 14
50830: ADD
50831: ST_TO_ADDR
// end ;
50832: GO 50710
50834: POP
50835: POP
// end ; end ;
50836: LD_VAR 0 7
50840: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
50841: LD_INT 0
50843: PPUSH
50844: PPUSH
50845: PPUSH
50846: PPUSH
50847: PPUSH
50848: PPUSH
50849: PPUSH
50850: PPUSH
50851: PPUSH
50852: PPUSH
50853: PPUSH
50854: PPUSH
50855: PPUSH
50856: PPUSH
50857: PPUSH
50858: PPUSH
// result := false ;
50859: LD_ADDR_VAR 0 3
50863: PUSH
50864: LD_INT 0
50866: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
50867: LD_VAR 0 1
50871: NOT
50872: PUSH
50873: LD_VAR 0 1
50877: PPUSH
50878: CALL_OW 266
50882: PUSH
50883: LD_INT 32
50885: PUSH
50886: LD_INT 33
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: IN
50893: NOT
50894: OR
50895: IFFALSE 50899
// exit ;
50897: GO 52008
// nat := GetNation ( tower ) ;
50899: LD_ADDR_VAR 0 12
50903: PUSH
50904: LD_VAR 0 1
50908: PPUSH
50909: CALL_OW 248
50913: ST_TO_ADDR
// side := GetSide ( tower ) ;
50914: LD_ADDR_VAR 0 16
50918: PUSH
50919: LD_VAR 0 1
50923: PPUSH
50924: CALL_OW 255
50928: ST_TO_ADDR
// x := GetX ( tower ) ;
50929: LD_ADDR_VAR 0 10
50933: PUSH
50934: LD_VAR 0 1
50938: PPUSH
50939: CALL_OW 250
50943: ST_TO_ADDR
// y := GetY ( tower ) ;
50944: LD_ADDR_VAR 0 11
50948: PUSH
50949: LD_VAR 0 1
50953: PPUSH
50954: CALL_OW 251
50958: ST_TO_ADDR
// if not x or not y then
50959: LD_VAR 0 10
50963: NOT
50964: PUSH
50965: LD_VAR 0 11
50969: NOT
50970: OR
50971: IFFALSE 50975
// exit ;
50973: GO 52008
// weapon := 0 ;
50975: LD_ADDR_VAR 0 18
50979: PUSH
50980: LD_INT 0
50982: ST_TO_ADDR
// fac_list := [ ] ;
50983: LD_ADDR_VAR 0 17
50987: PUSH
50988: EMPTY
50989: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
50990: LD_ADDR_VAR 0 6
50994: PUSH
50995: LD_VAR 0 1
50999: PPUSH
51000: CALL_OW 274
51004: PPUSH
51005: LD_VAR 0 2
51009: PPUSH
51010: LD_INT 0
51012: PPUSH
51013: CALL 48579 0 3
51017: PPUSH
51018: LD_INT 30
51020: PUSH
51021: LD_INT 3
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PPUSH
51028: CALL_OW 72
51032: ST_TO_ADDR
// if not factories then
51033: LD_VAR 0 6
51037: NOT
51038: IFFALSE 51042
// exit ;
51040: GO 52008
// for i in factories do
51042: LD_ADDR_VAR 0 8
51046: PUSH
51047: LD_VAR 0 6
51051: PUSH
51052: FOR_IN
51053: IFFALSE 51078
// fac_list := fac_list union AvailableWeaponList ( i ) ;
51055: LD_ADDR_VAR 0 17
51059: PUSH
51060: LD_VAR 0 17
51064: PUSH
51065: LD_VAR 0 8
51069: PPUSH
51070: CALL_OW 478
51074: UNION
51075: ST_TO_ADDR
51076: GO 51052
51078: POP
51079: POP
// if not fac_list then
51080: LD_VAR 0 17
51084: NOT
51085: IFFALSE 51089
// exit ;
51087: GO 52008
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
51089: LD_ADDR_VAR 0 5
51093: PUSH
51094: LD_INT 4
51096: PUSH
51097: LD_INT 5
51099: PUSH
51100: LD_INT 9
51102: PUSH
51103: LD_INT 10
51105: PUSH
51106: LD_INT 6
51108: PUSH
51109: LD_INT 7
51111: PUSH
51112: LD_INT 11
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 27
51126: PUSH
51127: LD_INT 28
51129: PUSH
51130: LD_INT 26
51132: PUSH
51133: LD_INT 30
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: PUSH
51142: LD_INT 43
51144: PUSH
51145: LD_INT 44
51147: PUSH
51148: LD_INT 46
51150: PUSH
51151: LD_INT 45
51153: PUSH
51154: LD_INT 47
51156: PUSH
51157: LD_INT 49
51159: PUSH
51160: EMPTY
51161: LIST
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: LIST
51172: PUSH
51173: LD_VAR 0 12
51177: ARRAY
51178: ST_TO_ADDR
// list := list isect fac_list ;
51179: LD_ADDR_VAR 0 5
51183: PUSH
51184: LD_VAR 0 5
51188: PUSH
51189: LD_VAR 0 17
51193: ISECT
51194: ST_TO_ADDR
// if not list then
51195: LD_VAR 0 5
51199: NOT
51200: IFFALSE 51204
// exit ;
51202: GO 52008
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
51204: LD_VAR 0 12
51208: PUSH
51209: LD_INT 3
51211: EQUAL
51212: PUSH
51213: LD_INT 49
51215: PUSH
51216: LD_VAR 0 5
51220: IN
51221: AND
51222: PUSH
51223: LD_INT 31
51225: PPUSH
51226: LD_VAR 0 16
51230: PPUSH
51231: CALL_OW 321
51235: PUSH
51236: LD_INT 2
51238: EQUAL
51239: AND
51240: IFFALSE 51300
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
51242: LD_INT 22
51244: PUSH
51245: LD_VAR 0 16
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: PUSH
51254: LD_INT 35
51256: PUSH
51257: LD_INT 49
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 91
51266: PUSH
51267: LD_VAR 0 1
51271: PUSH
51272: LD_INT 10
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: LIST
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: LIST
51284: PPUSH
51285: CALL_OW 69
51289: NOT
51290: IFFALSE 51300
// weapon := ru_time_lapser ;
51292: LD_ADDR_VAR 0 18
51296: PUSH
51297: LD_INT 49
51299: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
51300: LD_VAR 0 12
51304: PUSH
51305: LD_INT 1
51307: PUSH
51308: LD_INT 2
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: IN
51315: PUSH
51316: LD_INT 11
51318: PUSH
51319: LD_VAR 0 5
51323: IN
51324: PUSH
51325: LD_INT 30
51327: PUSH
51328: LD_VAR 0 5
51332: IN
51333: OR
51334: AND
51335: PUSH
51336: LD_INT 6
51338: PPUSH
51339: LD_VAR 0 16
51343: PPUSH
51344: CALL_OW 321
51348: PUSH
51349: LD_INT 2
51351: EQUAL
51352: AND
51353: IFFALSE 51518
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
51355: LD_INT 22
51357: PUSH
51358: LD_VAR 0 16
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 2
51369: PUSH
51370: LD_INT 35
51372: PUSH
51373: LD_INT 11
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 35
51382: PUSH
51383: LD_INT 30
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: LIST
51394: PUSH
51395: LD_INT 91
51397: PUSH
51398: LD_VAR 0 1
51402: PUSH
51403: LD_INT 18
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: LIST
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: LIST
51415: PPUSH
51416: CALL_OW 69
51420: NOT
51421: PUSH
51422: LD_INT 22
51424: PUSH
51425: LD_VAR 0 16
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 2
51436: PUSH
51437: LD_INT 30
51439: PUSH
51440: LD_INT 32
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: LD_INT 30
51449: PUSH
51450: LD_INT 33
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 91
51464: PUSH
51465: LD_VAR 0 1
51469: PUSH
51470: LD_INT 12
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: LIST
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: LIST
51482: PUSH
51483: EMPTY
51484: LIST
51485: PPUSH
51486: CALL_OW 69
51490: PUSH
51491: LD_INT 2
51493: GREATER
51494: AND
51495: IFFALSE 51518
// weapon := [ us_radar , ar_radar ] [ nat ] ;
51497: LD_ADDR_VAR 0 18
51501: PUSH
51502: LD_INT 11
51504: PUSH
51505: LD_INT 30
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: PUSH
51512: LD_VAR 0 12
51516: ARRAY
51517: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
51518: LD_VAR 0 18
51522: NOT
51523: PUSH
51524: LD_INT 40
51526: PPUSH
51527: LD_VAR 0 16
51531: PPUSH
51532: CALL_OW 321
51536: PUSH
51537: LD_INT 2
51539: EQUAL
51540: AND
51541: PUSH
51542: LD_INT 7
51544: PUSH
51545: LD_VAR 0 5
51549: IN
51550: PUSH
51551: LD_INT 28
51553: PUSH
51554: LD_VAR 0 5
51558: IN
51559: OR
51560: PUSH
51561: LD_INT 45
51563: PUSH
51564: LD_VAR 0 5
51568: IN
51569: OR
51570: AND
51571: IFFALSE 51825
// begin hex := GetHexInfo ( x , y ) ;
51573: LD_ADDR_VAR 0 4
51577: PUSH
51578: LD_VAR 0 10
51582: PPUSH
51583: LD_VAR 0 11
51587: PPUSH
51588: CALL_OW 546
51592: ST_TO_ADDR
// if hex [ 1 ] then
51593: LD_VAR 0 4
51597: PUSH
51598: LD_INT 1
51600: ARRAY
51601: IFFALSE 51605
// exit ;
51603: GO 52008
// height := hex [ 2 ] ;
51605: LD_ADDR_VAR 0 15
51609: PUSH
51610: LD_VAR 0 4
51614: PUSH
51615: LD_INT 2
51617: ARRAY
51618: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
51619: LD_ADDR_VAR 0 14
51623: PUSH
51624: LD_INT 0
51626: PUSH
51627: LD_INT 2
51629: PUSH
51630: LD_INT 3
51632: PUSH
51633: LD_INT 5
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: LIST
51640: LIST
51641: ST_TO_ADDR
// for i in tmp do
51642: LD_ADDR_VAR 0 8
51646: PUSH
51647: LD_VAR 0 14
51651: PUSH
51652: FOR_IN
51653: IFFALSE 51823
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
51655: LD_ADDR_VAR 0 9
51659: PUSH
51660: LD_VAR 0 10
51664: PPUSH
51665: LD_VAR 0 8
51669: PPUSH
51670: LD_INT 5
51672: PPUSH
51673: CALL_OW 272
51677: PUSH
51678: LD_VAR 0 11
51682: PPUSH
51683: LD_VAR 0 8
51687: PPUSH
51688: LD_INT 5
51690: PPUSH
51691: CALL_OW 273
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
51700: LD_VAR 0 9
51704: PUSH
51705: LD_INT 1
51707: ARRAY
51708: PPUSH
51709: LD_VAR 0 9
51713: PUSH
51714: LD_INT 2
51716: ARRAY
51717: PPUSH
51718: CALL_OW 488
51722: IFFALSE 51821
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
51724: LD_ADDR_VAR 0 4
51728: PUSH
51729: LD_VAR 0 9
51733: PUSH
51734: LD_INT 1
51736: ARRAY
51737: PPUSH
51738: LD_VAR 0 9
51742: PUSH
51743: LD_INT 2
51745: ARRAY
51746: PPUSH
51747: CALL_OW 546
51751: ST_TO_ADDR
// if hex [ 1 ] then
51752: LD_VAR 0 4
51756: PUSH
51757: LD_INT 1
51759: ARRAY
51760: IFFALSE 51764
// continue ;
51762: GO 51652
// h := hex [ 2 ] ;
51764: LD_ADDR_VAR 0 13
51768: PUSH
51769: LD_VAR 0 4
51773: PUSH
51774: LD_INT 2
51776: ARRAY
51777: ST_TO_ADDR
// if h + 7 < height then
51778: LD_VAR 0 13
51782: PUSH
51783: LD_INT 7
51785: PLUS
51786: PUSH
51787: LD_VAR 0 15
51791: LESS
51792: IFFALSE 51821
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
51794: LD_ADDR_VAR 0 18
51798: PUSH
51799: LD_INT 7
51801: PUSH
51802: LD_INT 28
51804: PUSH
51805: LD_INT 45
51807: PUSH
51808: EMPTY
51809: LIST
51810: LIST
51811: LIST
51812: PUSH
51813: LD_VAR 0 12
51817: ARRAY
51818: ST_TO_ADDR
// break ;
51819: GO 51823
// end ; end ; end ;
51821: GO 51652
51823: POP
51824: POP
// end ; if not weapon then
51825: LD_VAR 0 18
51829: NOT
51830: IFFALSE 51890
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
51832: LD_ADDR_VAR 0 5
51836: PUSH
51837: LD_VAR 0 5
51841: PUSH
51842: LD_INT 11
51844: PUSH
51845: LD_INT 30
51847: PUSH
51848: LD_INT 49
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: LIST
51855: DIFF
51856: ST_TO_ADDR
// if not list then
51857: LD_VAR 0 5
51861: NOT
51862: IFFALSE 51866
// exit ;
51864: GO 52008
// weapon := list [ rand ( 1 , list ) ] ;
51866: LD_ADDR_VAR 0 18
51870: PUSH
51871: LD_VAR 0 5
51875: PUSH
51876: LD_INT 1
51878: PPUSH
51879: LD_VAR 0 5
51883: PPUSH
51884: CALL_OW 12
51888: ARRAY
51889: ST_TO_ADDR
// end ; if weapon then
51890: LD_VAR 0 18
51894: IFFALSE 52008
// begin tmp := CostOfWeapon ( weapon ) ;
51896: LD_ADDR_VAR 0 14
51900: PUSH
51901: LD_VAR 0 18
51905: PPUSH
51906: CALL_OW 451
51910: ST_TO_ADDR
// j := GetBase ( tower ) ;
51911: LD_ADDR_VAR 0 9
51915: PUSH
51916: LD_VAR 0 1
51920: PPUSH
51921: CALL_OW 274
51925: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
51926: LD_VAR 0 9
51930: PPUSH
51931: LD_INT 1
51933: PPUSH
51934: CALL_OW 275
51938: PUSH
51939: LD_VAR 0 14
51943: PUSH
51944: LD_INT 1
51946: ARRAY
51947: GREATEREQUAL
51948: PUSH
51949: LD_VAR 0 9
51953: PPUSH
51954: LD_INT 2
51956: PPUSH
51957: CALL_OW 275
51961: PUSH
51962: LD_VAR 0 14
51966: PUSH
51967: LD_INT 2
51969: ARRAY
51970: GREATEREQUAL
51971: AND
51972: PUSH
51973: LD_VAR 0 9
51977: PPUSH
51978: LD_INT 3
51980: PPUSH
51981: CALL_OW 275
51985: PUSH
51986: LD_VAR 0 14
51990: PUSH
51991: LD_INT 3
51993: ARRAY
51994: GREATEREQUAL
51995: AND
51996: IFFALSE 52008
// result := weapon ;
51998: LD_ADDR_VAR 0 3
52002: PUSH
52003: LD_VAR 0 18
52007: ST_TO_ADDR
// end ; end ;
52008: LD_VAR 0 3
52012: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
52013: LD_INT 0
52015: PPUSH
52016: PPUSH
// result := true ;
52017: LD_ADDR_VAR 0 3
52021: PUSH
52022: LD_INT 1
52024: ST_TO_ADDR
// if array1 = array2 then
52025: LD_VAR 0 1
52029: PUSH
52030: LD_VAR 0 2
52034: EQUAL
52035: IFFALSE 52095
// begin for i = 1 to array1 do
52037: LD_ADDR_VAR 0 4
52041: PUSH
52042: DOUBLE
52043: LD_INT 1
52045: DEC
52046: ST_TO_ADDR
52047: LD_VAR 0 1
52051: PUSH
52052: FOR_TO
52053: IFFALSE 52091
// if array1 [ i ] <> array2 [ i ] then
52055: LD_VAR 0 1
52059: PUSH
52060: LD_VAR 0 4
52064: ARRAY
52065: PUSH
52066: LD_VAR 0 2
52070: PUSH
52071: LD_VAR 0 4
52075: ARRAY
52076: NONEQUAL
52077: IFFALSE 52089
// begin result := false ;
52079: LD_ADDR_VAR 0 3
52083: PUSH
52084: LD_INT 0
52086: ST_TO_ADDR
// break ;
52087: GO 52091
// end ;
52089: GO 52052
52091: POP
52092: POP
// end else
52093: GO 52103
// result := false ;
52095: LD_ADDR_VAR 0 3
52099: PUSH
52100: LD_INT 0
52102: ST_TO_ADDR
// end ;
52103: LD_VAR 0 3
52107: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
52108: LD_INT 0
52110: PPUSH
52111: PPUSH
// if not array1 or not array2 then
52112: LD_VAR 0 1
52116: NOT
52117: PUSH
52118: LD_VAR 0 2
52122: NOT
52123: OR
52124: IFFALSE 52128
// exit ;
52126: GO 52192
// result := true ;
52128: LD_ADDR_VAR 0 3
52132: PUSH
52133: LD_INT 1
52135: ST_TO_ADDR
// for i = 1 to array1 do
52136: LD_ADDR_VAR 0 4
52140: PUSH
52141: DOUBLE
52142: LD_INT 1
52144: DEC
52145: ST_TO_ADDR
52146: LD_VAR 0 1
52150: PUSH
52151: FOR_TO
52152: IFFALSE 52190
// if array1 [ i ] <> array2 [ i ] then
52154: LD_VAR 0 1
52158: PUSH
52159: LD_VAR 0 4
52163: ARRAY
52164: PUSH
52165: LD_VAR 0 2
52169: PUSH
52170: LD_VAR 0 4
52174: ARRAY
52175: NONEQUAL
52176: IFFALSE 52188
// begin result := false ;
52178: LD_ADDR_VAR 0 3
52182: PUSH
52183: LD_INT 0
52185: ST_TO_ADDR
// break ;
52186: GO 52190
// end ;
52188: GO 52151
52190: POP
52191: POP
// end ;
52192: LD_VAR 0 3
52196: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
52197: LD_INT 0
52199: PPUSH
52200: PPUSH
52201: PPUSH
// pom := GetBase ( fac ) ;
52202: LD_ADDR_VAR 0 5
52206: PUSH
52207: LD_VAR 0 1
52211: PPUSH
52212: CALL_OW 274
52216: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
52217: LD_ADDR_VAR 0 4
52221: PUSH
52222: LD_VAR 0 2
52226: PUSH
52227: LD_INT 1
52229: ARRAY
52230: PPUSH
52231: LD_VAR 0 2
52235: PUSH
52236: LD_INT 2
52238: ARRAY
52239: PPUSH
52240: LD_VAR 0 2
52244: PUSH
52245: LD_INT 3
52247: ARRAY
52248: PPUSH
52249: LD_VAR 0 2
52253: PUSH
52254: LD_INT 4
52256: ARRAY
52257: PPUSH
52258: CALL_OW 449
52262: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52263: LD_ADDR_VAR 0 3
52267: PUSH
52268: LD_VAR 0 5
52272: PPUSH
52273: LD_INT 1
52275: PPUSH
52276: CALL_OW 275
52280: PUSH
52281: LD_VAR 0 4
52285: PUSH
52286: LD_INT 1
52288: ARRAY
52289: GREATEREQUAL
52290: PUSH
52291: LD_VAR 0 5
52295: PPUSH
52296: LD_INT 2
52298: PPUSH
52299: CALL_OW 275
52303: PUSH
52304: LD_VAR 0 4
52308: PUSH
52309: LD_INT 2
52311: ARRAY
52312: GREATEREQUAL
52313: AND
52314: PUSH
52315: LD_VAR 0 5
52319: PPUSH
52320: LD_INT 3
52322: PPUSH
52323: CALL_OW 275
52327: PUSH
52328: LD_VAR 0 4
52332: PUSH
52333: LD_INT 3
52335: ARRAY
52336: GREATEREQUAL
52337: AND
52338: ST_TO_ADDR
// end ;
52339: LD_VAR 0 3
52343: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
52344: LD_INT 0
52346: PPUSH
52347: PPUSH
52348: PPUSH
52349: PPUSH
// pom := GetBase ( building ) ;
52350: LD_ADDR_VAR 0 3
52354: PUSH
52355: LD_VAR 0 1
52359: PPUSH
52360: CALL_OW 274
52364: ST_TO_ADDR
// if not pom then
52365: LD_VAR 0 3
52369: NOT
52370: IFFALSE 52374
// exit ;
52372: GO 52544
// btype := GetBType ( building ) ;
52374: LD_ADDR_VAR 0 5
52378: PUSH
52379: LD_VAR 0 1
52383: PPUSH
52384: CALL_OW 266
52388: ST_TO_ADDR
// if btype = b_armoury then
52389: LD_VAR 0 5
52393: PUSH
52394: LD_INT 4
52396: EQUAL
52397: IFFALSE 52407
// btype := b_barracks ;
52399: LD_ADDR_VAR 0 5
52403: PUSH
52404: LD_INT 5
52406: ST_TO_ADDR
// if btype = b_depot then
52407: LD_VAR 0 5
52411: PUSH
52412: LD_INT 0
52414: EQUAL
52415: IFFALSE 52425
// btype := b_warehouse ;
52417: LD_ADDR_VAR 0 5
52421: PUSH
52422: LD_INT 1
52424: ST_TO_ADDR
// if btype = b_workshop then
52425: LD_VAR 0 5
52429: PUSH
52430: LD_INT 2
52432: EQUAL
52433: IFFALSE 52443
// btype := b_factory ;
52435: LD_ADDR_VAR 0 5
52439: PUSH
52440: LD_INT 3
52442: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52443: LD_ADDR_VAR 0 4
52447: PUSH
52448: LD_VAR 0 5
52452: PPUSH
52453: LD_VAR 0 1
52457: PPUSH
52458: CALL_OW 248
52462: PPUSH
52463: CALL_OW 450
52467: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52468: LD_ADDR_VAR 0 2
52472: PUSH
52473: LD_VAR 0 3
52477: PPUSH
52478: LD_INT 1
52480: PPUSH
52481: CALL_OW 275
52485: PUSH
52486: LD_VAR 0 4
52490: PUSH
52491: LD_INT 1
52493: ARRAY
52494: GREATEREQUAL
52495: PUSH
52496: LD_VAR 0 3
52500: PPUSH
52501: LD_INT 2
52503: PPUSH
52504: CALL_OW 275
52508: PUSH
52509: LD_VAR 0 4
52513: PUSH
52514: LD_INT 2
52516: ARRAY
52517: GREATEREQUAL
52518: AND
52519: PUSH
52520: LD_VAR 0 3
52524: PPUSH
52525: LD_INT 3
52527: PPUSH
52528: CALL_OW 275
52532: PUSH
52533: LD_VAR 0 4
52537: PUSH
52538: LD_INT 3
52540: ARRAY
52541: GREATEREQUAL
52542: AND
52543: ST_TO_ADDR
// end ;
52544: LD_VAR 0 2
52548: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
52549: LD_INT 0
52551: PPUSH
52552: PPUSH
52553: PPUSH
// pom := GetBase ( building ) ;
52554: LD_ADDR_VAR 0 4
52558: PUSH
52559: LD_VAR 0 1
52563: PPUSH
52564: CALL_OW 274
52568: ST_TO_ADDR
// if not pom then
52569: LD_VAR 0 4
52573: NOT
52574: IFFALSE 52578
// exit ;
52576: GO 52679
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52578: LD_ADDR_VAR 0 5
52582: PUSH
52583: LD_VAR 0 2
52587: PPUSH
52588: LD_VAR 0 1
52592: PPUSH
52593: CALL_OW 248
52597: PPUSH
52598: CALL_OW 450
52602: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52603: LD_ADDR_VAR 0 3
52607: PUSH
52608: LD_VAR 0 4
52612: PPUSH
52613: LD_INT 1
52615: PPUSH
52616: CALL_OW 275
52620: PUSH
52621: LD_VAR 0 5
52625: PUSH
52626: LD_INT 1
52628: ARRAY
52629: GREATEREQUAL
52630: PUSH
52631: LD_VAR 0 4
52635: PPUSH
52636: LD_INT 2
52638: PPUSH
52639: CALL_OW 275
52643: PUSH
52644: LD_VAR 0 5
52648: PUSH
52649: LD_INT 2
52651: ARRAY
52652: GREATEREQUAL
52653: AND
52654: PUSH
52655: LD_VAR 0 4
52659: PPUSH
52660: LD_INT 3
52662: PPUSH
52663: CALL_OW 275
52667: PUSH
52668: LD_VAR 0 5
52672: PUSH
52673: LD_INT 3
52675: ARRAY
52676: GREATEREQUAL
52677: AND
52678: ST_TO_ADDR
// end ;
52679: LD_VAR 0 3
52683: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
52684: LD_INT 0
52686: PPUSH
52687: PPUSH
52688: PPUSH
52689: PPUSH
52690: PPUSH
52691: PPUSH
52692: PPUSH
52693: PPUSH
52694: PPUSH
52695: PPUSH
52696: PPUSH
// result := false ;
52697: LD_ADDR_VAR 0 8
52701: PUSH
52702: LD_INT 0
52704: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
52705: LD_VAR 0 5
52709: NOT
52710: PUSH
52711: LD_VAR 0 1
52715: NOT
52716: OR
52717: PUSH
52718: LD_VAR 0 2
52722: NOT
52723: OR
52724: PUSH
52725: LD_VAR 0 3
52729: NOT
52730: OR
52731: IFFALSE 52735
// exit ;
52733: GO 53549
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
52735: LD_ADDR_VAR 0 14
52739: PUSH
52740: LD_VAR 0 1
52744: PPUSH
52745: LD_VAR 0 2
52749: PPUSH
52750: LD_VAR 0 3
52754: PPUSH
52755: LD_VAR 0 4
52759: PPUSH
52760: LD_VAR 0 5
52764: PUSH
52765: LD_INT 1
52767: ARRAY
52768: PPUSH
52769: CALL_OW 248
52773: PPUSH
52774: LD_INT 0
52776: PPUSH
52777: CALL 54802 0 6
52781: ST_TO_ADDR
// if not hexes then
52782: LD_VAR 0 14
52786: NOT
52787: IFFALSE 52791
// exit ;
52789: GO 53549
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52791: LD_ADDR_VAR 0 17
52795: PUSH
52796: LD_VAR 0 5
52800: PPUSH
52801: LD_INT 22
52803: PUSH
52804: LD_VAR 0 13
52808: PPUSH
52809: CALL_OW 255
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: LD_INT 2
52820: PUSH
52821: LD_INT 30
52823: PUSH
52824: LD_INT 0
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 30
52833: PUSH
52834: LD_INT 1
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: LIST
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PPUSH
52850: CALL_OW 72
52854: ST_TO_ADDR
// for i = 1 to hexes do
52855: LD_ADDR_VAR 0 9
52859: PUSH
52860: DOUBLE
52861: LD_INT 1
52863: DEC
52864: ST_TO_ADDR
52865: LD_VAR 0 14
52869: PUSH
52870: FOR_TO
52871: IFFALSE 53547
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52873: LD_ADDR_VAR 0 13
52877: PUSH
52878: LD_VAR 0 14
52882: PUSH
52883: LD_VAR 0 9
52887: ARRAY
52888: PUSH
52889: LD_INT 1
52891: ARRAY
52892: PPUSH
52893: LD_VAR 0 14
52897: PUSH
52898: LD_VAR 0 9
52902: ARRAY
52903: PUSH
52904: LD_INT 2
52906: ARRAY
52907: PPUSH
52908: CALL_OW 428
52912: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
52913: LD_VAR 0 14
52917: PUSH
52918: LD_VAR 0 9
52922: ARRAY
52923: PUSH
52924: LD_INT 1
52926: ARRAY
52927: PPUSH
52928: LD_VAR 0 14
52932: PUSH
52933: LD_VAR 0 9
52937: ARRAY
52938: PUSH
52939: LD_INT 2
52941: ARRAY
52942: PPUSH
52943: CALL_OW 351
52947: PUSH
52948: LD_VAR 0 14
52952: PUSH
52953: LD_VAR 0 9
52957: ARRAY
52958: PUSH
52959: LD_INT 1
52961: ARRAY
52962: PPUSH
52963: LD_VAR 0 14
52967: PUSH
52968: LD_VAR 0 9
52972: ARRAY
52973: PUSH
52974: LD_INT 2
52976: ARRAY
52977: PPUSH
52978: CALL_OW 488
52982: NOT
52983: OR
52984: PUSH
52985: LD_VAR 0 13
52989: PPUSH
52990: CALL_OW 247
52994: PUSH
52995: LD_INT 3
52997: EQUAL
52998: OR
52999: IFFALSE 53005
// exit ;
53001: POP
53002: POP
53003: GO 53549
// if not tmp then
53005: LD_VAR 0 13
53009: NOT
53010: IFFALSE 53014
// continue ;
53012: GO 52870
// result := true ;
53014: LD_ADDR_VAR 0 8
53018: PUSH
53019: LD_INT 1
53021: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
53022: LD_VAR 0 6
53026: PUSH
53027: LD_VAR 0 13
53031: PPUSH
53032: CALL_OW 247
53036: PUSH
53037: LD_INT 2
53039: EQUAL
53040: AND
53041: PUSH
53042: LD_VAR 0 13
53046: PPUSH
53047: CALL_OW 263
53051: PUSH
53052: LD_INT 1
53054: EQUAL
53055: AND
53056: IFFALSE 53220
// begin if IsDrivenBy ( tmp ) then
53058: LD_VAR 0 13
53062: PPUSH
53063: CALL_OW 311
53067: IFFALSE 53071
// continue ;
53069: GO 52870
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
53071: LD_VAR 0 6
53075: PPUSH
53076: LD_INT 3
53078: PUSH
53079: LD_INT 60
53081: PUSH
53082: EMPTY
53083: LIST
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 3
53091: PUSH
53092: LD_INT 55
53094: PUSH
53095: EMPTY
53096: LIST
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PPUSH
53106: CALL_OW 72
53110: IFFALSE 53218
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
53112: LD_ADDR_VAR 0 18
53116: PUSH
53117: LD_VAR 0 6
53121: PPUSH
53122: LD_INT 3
53124: PUSH
53125: LD_INT 60
53127: PUSH
53128: EMPTY
53129: LIST
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 3
53137: PUSH
53138: LD_INT 55
53140: PUSH
53141: EMPTY
53142: LIST
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PPUSH
53152: CALL_OW 72
53156: PUSH
53157: LD_INT 1
53159: ARRAY
53160: ST_TO_ADDR
// if IsInUnit ( driver ) then
53161: LD_VAR 0 18
53165: PPUSH
53166: CALL_OW 310
53170: IFFALSE 53181
// ComExit ( driver ) ;
53172: LD_VAR 0 18
53176: PPUSH
53177: CALL 78583 0 1
// AddComEnterUnit ( driver , tmp ) ;
53181: LD_VAR 0 18
53185: PPUSH
53186: LD_VAR 0 13
53190: PPUSH
53191: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
53195: LD_VAR 0 18
53199: PPUSH
53200: LD_VAR 0 7
53204: PPUSH
53205: CALL_OW 173
// AddComExitVehicle ( driver ) ;
53209: LD_VAR 0 18
53213: PPUSH
53214: CALL_OW 181
// end ; continue ;
53218: GO 52870
// end ; if not cleaners or not tmp in cleaners then
53220: LD_VAR 0 6
53224: NOT
53225: PUSH
53226: LD_VAR 0 13
53230: PUSH
53231: LD_VAR 0 6
53235: IN
53236: NOT
53237: OR
53238: IFFALSE 53545
// begin if dep then
53240: LD_VAR 0 17
53244: IFFALSE 53380
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
53246: LD_ADDR_VAR 0 16
53250: PUSH
53251: LD_VAR 0 17
53255: PUSH
53256: LD_INT 1
53258: ARRAY
53259: PPUSH
53260: CALL_OW 250
53264: PPUSH
53265: LD_VAR 0 17
53269: PUSH
53270: LD_INT 1
53272: ARRAY
53273: PPUSH
53274: CALL_OW 254
53278: PPUSH
53279: LD_INT 5
53281: PPUSH
53282: CALL_OW 272
53286: PUSH
53287: LD_VAR 0 17
53291: PUSH
53292: LD_INT 1
53294: ARRAY
53295: PPUSH
53296: CALL_OW 251
53300: PPUSH
53301: LD_VAR 0 17
53305: PUSH
53306: LD_INT 1
53308: ARRAY
53309: PPUSH
53310: CALL_OW 254
53314: PPUSH
53315: LD_INT 5
53317: PPUSH
53318: CALL_OW 273
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
53327: LD_VAR 0 16
53331: PUSH
53332: LD_INT 1
53334: ARRAY
53335: PPUSH
53336: LD_VAR 0 16
53340: PUSH
53341: LD_INT 2
53343: ARRAY
53344: PPUSH
53345: CALL_OW 488
53349: IFFALSE 53380
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
53351: LD_VAR 0 13
53355: PPUSH
53356: LD_VAR 0 16
53360: PUSH
53361: LD_INT 1
53363: ARRAY
53364: PPUSH
53365: LD_VAR 0 16
53369: PUSH
53370: LD_INT 2
53372: ARRAY
53373: PPUSH
53374: CALL_OW 111
// continue ;
53378: GO 52870
// end ; end ; r := GetDir ( tmp ) ;
53380: LD_ADDR_VAR 0 15
53384: PUSH
53385: LD_VAR 0 13
53389: PPUSH
53390: CALL_OW 254
53394: ST_TO_ADDR
// if r = 5 then
53395: LD_VAR 0 15
53399: PUSH
53400: LD_INT 5
53402: EQUAL
53403: IFFALSE 53413
// r := 0 ;
53405: LD_ADDR_VAR 0 15
53409: PUSH
53410: LD_INT 0
53412: ST_TO_ADDR
// for j = r to 5 do
53413: LD_ADDR_VAR 0 10
53417: PUSH
53418: DOUBLE
53419: LD_VAR 0 15
53423: DEC
53424: ST_TO_ADDR
53425: LD_INT 5
53427: PUSH
53428: FOR_TO
53429: IFFALSE 53543
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
53431: LD_ADDR_VAR 0 11
53435: PUSH
53436: LD_VAR 0 13
53440: PPUSH
53441: CALL_OW 250
53445: PPUSH
53446: LD_VAR 0 10
53450: PPUSH
53451: LD_INT 2
53453: PPUSH
53454: CALL_OW 272
53458: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
53459: LD_ADDR_VAR 0 12
53463: PUSH
53464: LD_VAR 0 13
53468: PPUSH
53469: CALL_OW 251
53473: PPUSH
53474: LD_VAR 0 10
53478: PPUSH
53479: LD_INT 2
53481: PPUSH
53482: CALL_OW 273
53486: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
53487: LD_VAR 0 11
53491: PPUSH
53492: LD_VAR 0 12
53496: PPUSH
53497: CALL_OW 488
53501: PUSH
53502: LD_VAR 0 11
53506: PPUSH
53507: LD_VAR 0 12
53511: PPUSH
53512: CALL_OW 428
53516: NOT
53517: AND
53518: IFFALSE 53541
// begin ComMoveXY ( tmp , _x , _y ) ;
53520: LD_VAR 0 13
53524: PPUSH
53525: LD_VAR 0 11
53529: PPUSH
53530: LD_VAR 0 12
53534: PPUSH
53535: CALL_OW 111
// break ;
53539: GO 53543
// end ; end ;
53541: GO 53428
53543: POP
53544: POP
// end ; end ;
53545: GO 52870
53547: POP
53548: POP
// end ;
53549: LD_VAR 0 8
53553: RET
// export function BuildingTechInvented ( side , btype ) ; begin
53554: LD_INT 0
53556: PPUSH
// result := true ;
53557: LD_ADDR_VAR 0 3
53561: PUSH
53562: LD_INT 1
53564: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
53565: LD_VAR 0 2
53569: PUSH
53570: LD_INT 24
53572: DOUBLE
53573: EQUAL
53574: IFTRUE 53584
53576: LD_INT 33
53578: DOUBLE
53579: EQUAL
53580: IFTRUE 53584
53582: GO 53609
53584: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
53585: LD_ADDR_VAR 0 3
53589: PUSH
53590: LD_INT 32
53592: PPUSH
53593: LD_VAR 0 1
53597: PPUSH
53598: CALL_OW 321
53602: PUSH
53603: LD_INT 2
53605: EQUAL
53606: ST_TO_ADDR
53607: GO 53925
53609: LD_INT 20
53611: DOUBLE
53612: EQUAL
53613: IFTRUE 53617
53615: GO 53642
53617: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
53618: LD_ADDR_VAR 0 3
53622: PUSH
53623: LD_INT 6
53625: PPUSH
53626: LD_VAR 0 1
53630: PPUSH
53631: CALL_OW 321
53635: PUSH
53636: LD_INT 2
53638: EQUAL
53639: ST_TO_ADDR
53640: GO 53925
53642: LD_INT 22
53644: DOUBLE
53645: EQUAL
53646: IFTRUE 53656
53648: LD_INT 36
53650: DOUBLE
53651: EQUAL
53652: IFTRUE 53656
53654: GO 53681
53656: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
53657: LD_ADDR_VAR 0 3
53661: PUSH
53662: LD_INT 15
53664: PPUSH
53665: LD_VAR 0 1
53669: PPUSH
53670: CALL_OW 321
53674: PUSH
53675: LD_INT 2
53677: EQUAL
53678: ST_TO_ADDR
53679: GO 53925
53681: LD_INT 30
53683: DOUBLE
53684: EQUAL
53685: IFTRUE 53689
53687: GO 53714
53689: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
53690: LD_ADDR_VAR 0 3
53694: PUSH
53695: LD_INT 20
53697: PPUSH
53698: LD_VAR 0 1
53702: PPUSH
53703: CALL_OW 321
53707: PUSH
53708: LD_INT 2
53710: EQUAL
53711: ST_TO_ADDR
53712: GO 53925
53714: LD_INT 28
53716: DOUBLE
53717: EQUAL
53718: IFTRUE 53728
53720: LD_INT 21
53722: DOUBLE
53723: EQUAL
53724: IFTRUE 53728
53726: GO 53753
53728: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
53729: LD_ADDR_VAR 0 3
53733: PUSH
53734: LD_INT 21
53736: PPUSH
53737: LD_VAR 0 1
53741: PPUSH
53742: CALL_OW 321
53746: PUSH
53747: LD_INT 2
53749: EQUAL
53750: ST_TO_ADDR
53751: GO 53925
53753: LD_INT 16
53755: DOUBLE
53756: EQUAL
53757: IFTRUE 53761
53759: GO 53786
53761: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
53762: LD_ADDR_VAR 0 3
53766: PUSH
53767: LD_INT 84
53769: PPUSH
53770: LD_VAR 0 1
53774: PPUSH
53775: CALL_OW 321
53779: PUSH
53780: LD_INT 2
53782: EQUAL
53783: ST_TO_ADDR
53784: GO 53925
53786: LD_INT 19
53788: DOUBLE
53789: EQUAL
53790: IFTRUE 53800
53792: LD_INT 23
53794: DOUBLE
53795: EQUAL
53796: IFTRUE 53800
53798: GO 53825
53800: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
53801: LD_ADDR_VAR 0 3
53805: PUSH
53806: LD_INT 83
53808: PPUSH
53809: LD_VAR 0 1
53813: PPUSH
53814: CALL_OW 321
53818: PUSH
53819: LD_INT 2
53821: EQUAL
53822: ST_TO_ADDR
53823: GO 53925
53825: LD_INT 17
53827: DOUBLE
53828: EQUAL
53829: IFTRUE 53833
53831: GO 53858
53833: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
53834: LD_ADDR_VAR 0 3
53838: PUSH
53839: LD_INT 39
53841: PPUSH
53842: LD_VAR 0 1
53846: PPUSH
53847: CALL_OW 321
53851: PUSH
53852: LD_INT 2
53854: EQUAL
53855: ST_TO_ADDR
53856: GO 53925
53858: LD_INT 18
53860: DOUBLE
53861: EQUAL
53862: IFTRUE 53866
53864: GO 53891
53866: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
53867: LD_ADDR_VAR 0 3
53871: PUSH
53872: LD_INT 40
53874: PPUSH
53875: LD_VAR 0 1
53879: PPUSH
53880: CALL_OW 321
53884: PUSH
53885: LD_INT 2
53887: EQUAL
53888: ST_TO_ADDR
53889: GO 53925
53891: LD_INT 27
53893: DOUBLE
53894: EQUAL
53895: IFTRUE 53899
53897: GO 53924
53899: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
53900: LD_ADDR_VAR 0 3
53904: PUSH
53905: LD_INT 35
53907: PPUSH
53908: LD_VAR 0 1
53912: PPUSH
53913: CALL_OW 321
53917: PUSH
53918: LD_INT 2
53920: EQUAL
53921: ST_TO_ADDR
53922: GO 53925
53924: POP
// end ;
53925: LD_VAR 0 3
53929: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
53930: LD_INT 0
53932: PPUSH
53933: PPUSH
53934: PPUSH
53935: PPUSH
53936: PPUSH
53937: PPUSH
53938: PPUSH
53939: PPUSH
53940: PPUSH
53941: PPUSH
53942: PPUSH
// result := false ;
53943: LD_ADDR_VAR 0 6
53947: PUSH
53948: LD_INT 0
53950: ST_TO_ADDR
// if btype = b_depot then
53951: LD_VAR 0 2
53955: PUSH
53956: LD_INT 0
53958: EQUAL
53959: IFFALSE 53971
// begin result := true ;
53961: LD_ADDR_VAR 0 6
53965: PUSH
53966: LD_INT 1
53968: ST_TO_ADDR
// exit ;
53969: GO 54797
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
53971: LD_VAR 0 1
53975: NOT
53976: PUSH
53977: LD_VAR 0 1
53981: PPUSH
53982: CALL_OW 266
53986: PUSH
53987: LD_INT 0
53989: PUSH
53990: LD_INT 1
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: IN
53997: NOT
53998: OR
53999: PUSH
54000: LD_VAR 0 2
54004: NOT
54005: OR
54006: PUSH
54007: LD_VAR 0 5
54011: PUSH
54012: LD_INT 0
54014: PUSH
54015: LD_INT 1
54017: PUSH
54018: LD_INT 2
54020: PUSH
54021: LD_INT 3
54023: PUSH
54024: LD_INT 4
54026: PUSH
54027: LD_INT 5
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: IN
54038: NOT
54039: OR
54040: PUSH
54041: LD_VAR 0 3
54045: PPUSH
54046: LD_VAR 0 4
54050: PPUSH
54051: CALL_OW 488
54055: NOT
54056: OR
54057: IFFALSE 54061
// exit ;
54059: GO 54797
// side := GetSide ( depot ) ;
54061: LD_ADDR_VAR 0 9
54065: PUSH
54066: LD_VAR 0 1
54070: PPUSH
54071: CALL_OW 255
54075: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
54076: LD_VAR 0 9
54080: PPUSH
54081: LD_VAR 0 2
54085: PPUSH
54086: CALL 53554 0 2
54090: NOT
54091: IFFALSE 54095
// exit ;
54093: GO 54797
// pom := GetBase ( depot ) ;
54095: LD_ADDR_VAR 0 10
54099: PUSH
54100: LD_VAR 0 1
54104: PPUSH
54105: CALL_OW 274
54109: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
54110: LD_ADDR_VAR 0 11
54114: PUSH
54115: LD_VAR 0 2
54119: PPUSH
54120: LD_VAR 0 1
54124: PPUSH
54125: CALL_OW 248
54129: PPUSH
54130: CALL_OW 450
54134: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
54135: LD_VAR 0 10
54139: PPUSH
54140: LD_INT 1
54142: PPUSH
54143: CALL_OW 275
54147: PUSH
54148: LD_VAR 0 11
54152: PUSH
54153: LD_INT 1
54155: ARRAY
54156: GREATEREQUAL
54157: PUSH
54158: LD_VAR 0 10
54162: PPUSH
54163: LD_INT 2
54165: PPUSH
54166: CALL_OW 275
54170: PUSH
54171: LD_VAR 0 11
54175: PUSH
54176: LD_INT 2
54178: ARRAY
54179: GREATEREQUAL
54180: AND
54181: PUSH
54182: LD_VAR 0 10
54186: PPUSH
54187: LD_INT 3
54189: PPUSH
54190: CALL_OW 275
54194: PUSH
54195: LD_VAR 0 11
54199: PUSH
54200: LD_INT 3
54202: ARRAY
54203: GREATEREQUAL
54204: AND
54205: NOT
54206: IFFALSE 54210
// exit ;
54208: GO 54797
// if GetBType ( depot ) = b_depot then
54210: LD_VAR 0 1
54214: PPUSH
54215: CALL_OW 266
54219: PUSH
54220: LD_INT 0
54222: EQUAL
54223: IFFALSE 54235
// dist := 28 else
54225: LD_ADDR_VAR 0 14
54229: PUSH
54230: LD_INT 28
54232: ST_TO_ADDR
54233: GO 54243
// dist := 36 ;
54235: LD_ADDR_VAR 0 14
54239: PUSH
54240: LD_INT 36
54242: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
54243: LD_VAR 0 1
54247: PPUSH
54248: LD_VAR 0 3
54252: PPUSH
54253: LD_VAR 0 4
54257: PPUSH
54258: CALL_OW 297
54262: PUSH
54263: LD_VAR 0 14
54267: GREATER
54268: IFFALSE 54272
// exit ;
54270: GO 54797
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
54272: LD_ADDR_VAR 0 12
54276: PUSH
54277: LD_VAR 0 2
54281: PPUSH
54282: LD_VAR 0 3
54286: PPUSH
54287: LD_VAR 0 4
54291: PPUSH
54292: LD_VAR 0 5
54296: PPUSH
54297: LD_VAR 0 1
54301: PPUSH
54302: CALL_OW 248
54306: PPUSH
54307: LD_INT 0
54309: PPUSH
54310: CALL 54802 0 6
54314: ST_TO_ADDR
// if not hexes then
54315: LD_VAR 0 12
54319: NOT
54320: IFFALSE 54324
// exit ;
54322: GO 54797
// hex := GetHexInfo ( x , y ) ;
54324: LD_ADDR_VAR 0 15
54328: PUSH
54329: LD_VAR 0 3
54333: PPUSH
54334: LD_VAR 0 4
54338: PPUSH
54339: CALL_OW 546
54343: ST_TO_ADDR
// if hex [ 1 ] then
54344: LD_VAR 0 15
54348: PUSH
54349: LD_INT 1
54351: ARRAY
54352: IFFALSE 54356
// exit ;
54354: GO 54797
// height := hex [ 2 ] ;
54356: LD_ADDR_VAR 0 13
54360: PUSH
54361: LD_VAR 0 15
54365: PUSH
54366: LD_INT 2
54368: ARRAY
54369: ST_TO_ADDR
// for i = 1 to hexes do
54370: LD_ADDR_VAR 0 7
54374: PUSH
54375: DOUBLE
54376: LD_INT 1
54378: DEC
54379: ST_TO_ADDR
54380: LD_VAR 0 12
54384: PUSH
54385: FOR_TO
54386: IFFALSE 54716
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
54388: LD_VAR 0 12
54392: PUSH
54393: LD_VAR 0 7
54397: ARRAY
54398: PUSH
54399: LD_INT 1
54401: ARRAY
54402: PPUSH
54403: LD_VAR 0 12
54407: PUSH
54408: LD_VAR 0 7
54412: ARRAY
54413: PUSH
54414: LD_INT 2
54416: ARRAY
54417: PPUSH
54418: CALL_OW 488
54422: NOT
54423: PUSH
54424: LD_VAR 0 12
54428: PUSH
54429: LD_VAR 0 7
54433: ARRAY
54434: PUSH
54435: LD_INT 1
54437: ARRAY
54438: PPUSH
54439: LD_VAR 0 12
54443: PUSH
54444: LD_VAR 0 7
54448: ARRAY
54449: PUSH
54450: LD_INT 2
54452: ARRAY
54453: PPUSH
54454: CALL_OW 428
54458: PUSH
54459: LD_INT 0
54461: GREATER
54462: OR
54463: PUSH
54464: LD_VAR 0 12
54468: PUSH
54469: LD_VAR 0 7
54473: ARRAY
54474: PUSH
54475: LD_INT 1
54477: ARRAY
54478: PPUSH
54479: LD_VAR 0 12
54483: PUSH
54484: LD_VAR 0 7
54488: ARRAY
54489: PUSH
54490: LD_INT 2
54492: ARRAY
54493: PPUSH
54494: CALL_OW 351
54498: OR
54499: IFFALSE 54505
// exit ;
54501: POP
54502: POP
54503: GO 54797
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54505: LD_ADDR_VAR 0 8
54509: PUSH
54510: LD_VAR 0 12
54514: PUSH
54515: LD_VAR 0 7
54519: ARRAY
54520: PUSH
54521: LD_INT 1
54523: ARRAY
54524: PPUSH
54525: LD_VAR 0 12
54529: PUSH
54530: LD_VAR 0 7
54534: ARRAY
54535: PUSH
54536: LD_INT 2
54538: ARRAY
54539: PPUSH
54540: CALL_OW 546
54544: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
54545: LD_VAR 0 8
54549: PUSH
54550: LD_INT 1
54552: ARRAY
54553: PUSH
54554: LD_VAR 0 8
54558: PUSH
54559: LD_INT 2
54561: ARRAY
54562: PUSH
54563: LD_VAR 0 13
54567: PUSH
54568: LD_INT 2
54570: PLUS
54571: GREATER
54572: OR
54573: PUSH
54574: LD_VAR 0 8
54578: PUSH
54579: LD_INT 2
54581: ARRAY
54582: PUSH
54583: LD_VAR 0 13
54587: PUSH
54588: LD_INT 2
54590: MINUS
54591: LESS
54592: OR
54593: PUSH
54594: LD_VAR 0 8
54598: PUSH
54599: LD_INT 3
54601: ARRAY
54602: PUSH
54603: LD_INT 0
54605: PUSH
54606: LD_INT 8
54608: PUSH
54609: LD_INT 9
54611: PUSH
54612: LD_INT 10
54614: PUSH
54615: LD_INT 11
54617: PUSH
54618: LD_INT 12
54620: PUSH
54621: LD_INT 13
54623: PUSH
54624: LD_INT 16
54626: PUSH
54627: LD_INT 17
54629: PUSH
54630: LD_INT 18
54632: PUSH
54633: LD_INT 19
54635: PUSH
54636: LD_INT 20
54638: PUSH
54639: LD_INT 21
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: LIST
54646: LIST
54647: LIST
54648: LIST
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: LIST
54656: IN
54657: NOT
54658: OR
54659: PUSH
54660: LD_VAR 0 8
54664: PUSH
54665: LD_INT 5
54667: ARRAY
54668: NOT
54669: OR
54670: PUSH
54671: LD_VAR 0 8
54675: PUSH
54676: LD_INT 6
54678: ARRAY
54679: PUSH
54680: LD_INT 1
54682: PUSH
54683: LD_INT 2
54685: PUSH
54686: LD_INT 7
54688: PUSH
54689: LD_INT 9
54691: PUSH
54692: LD_INT 10
54694: PUSH
54695: LD_INT 11
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: IN
54706: NOT
54707: OR
54708: IFFALSE 54714
// exit ;
54710: POP
54711: POP
54712: GO 54797
// end ;
54714: GO 54385
54716: POP
54717: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
54718: LD_VAR 0 9
54722: PPUSH
54723: LD_VAR 0 3
54727: PPUSH
54728: LD_VAR 0 4
54732: PPUSH
54733: LD_INT 20
54735: PPUSH
54736: CALL 46720 0 4
54740: PUSH
54741: LD_INT 4
54743: ARRAY
54744: IFFALSE 54748
// exit ;
54746: GO 54797
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
54748: LD_VAR 0 2
54752: PUSH
54753: LD_INT 29
54755: PUSH
54756: LD_INT 30
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: IN
54763: PUSH
54764: LD_VAR 0 3
54768: PPUSH
54769: LD_VAR 0 4
54773: PPUSH
54774: LD_VAR 0 9
54778: PPUSH
54779: CALL_OW 440
54783: NOT
54784: AND
54785: IFFALSE 54789
// exit ;
54787: GO 54797
// result := true ;
54789: LD_ADDR_VAR 0 6
54793: PUSH
54794: LD_INT 1
54796: ST_TO_ADDR
// end ;
54797: LD_VAR 0 6
54801: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
54802: LD_INT 0
54804: PPUSH
54805: PPUSH
54806: PPUSH
54807: PPUSH
54808: PPUSH
54809: PPUSH
54810: PPUSH
54811: PPUSH
54812: PPUSH
54813: PPUSH
54814: PPUSH
54815: PPUSH
54816: PPUSH
54817: PPUSH
54818: PPUSH
54819: PPUSH
54820: PPUSH
54821: PPUSH
54822: PPUSH
54823: PPUSH
54824: PPUSH
54825: PPUSH
54826: PPUSH
54827: PPUSH
54828: PPUSH
54829: PPUSH
54830: PPUSH
54831: PPUSH
54832: PPUSH
54833: PPUSH
54834: PPUSH
54835: PPUSH
54836: PPUSH
54837: PPUSH
54838: PPUSH
54839: PPUSH
54840: PPUSH
54841: PPUSH
54842: PPUSH
54843: PPUSH
54844: PPUSH
54845: PPUSH
54846: PPUSH
54847: PPUSH
54848: PPUSH
54849: PPUSH
54850: PPUSH
54851: PPUSH
54852: PPUSH
54853: PPUSH
54854: PPUSH
54855: PPUSH
54856: PPUSH
54857: PPUSH
54858: PPUSH
54859: PPUSH
54860: PPUSH
54861: PPUSH
// result = [ ] ;
54862: LD_ADDR_VAR 0 7
54866: PUSH
54867: EMPTY
54868: ST_TO_ADDR
// temp_list = [ ] ;
54869: LD_ADDR_VAR 0 9
54873: PUSH
54874: EMPTY
54875: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
54876: LD_VAR 0 4
54880: PUSH
54881: LD_INT 0
54883: PUSH
54884: LD_INT 1
54886: PUSH
54887: LD_INT 2
54889: PUSH
54890: LD_INT 3
54892: PUSH
54893: LD_INT 4
54895: PUSH
54896: LD_INT 5
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: IN
54907: NOT
54908: PUSH
54909: LD_VAR 0 1
54913: PUSH
54914: LD_INT 0
54916: PUSH
54917: LD_INT 1
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: IN
54924: PUSH
54925: LD_VAR 0 5
54929: PUSH
54930: LD_INT 1
54932: PUSH
54933: LD_INT 2
54935: PUSH
54936: LD_INT 3
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: LIST
54943: IN
54944: NOT
54945: AND
54946: OR
54947: IFFALSE 54951
// exit ;
54949: GO 73342
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
54951: LD_VAR 0 1
54955: PUSH
54956: LD_INT 6
54958: PUSH
54959: LD_INT 7
54961: PUSH
54962: LD_INT 8
54964: PUSH
54965: LD_INT 13
54967: PUSH
54968: LD_INT 12
54970: PUSH
54971: LD_INT 15
54973: PUSH
54974: LD_INT 11
54976: PUSH
54977: LD_INT 14
54979: PUSH
54980: LD_INT 10
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: IN
54994: IFFALSE 55004
// btype = b_lab ;
54996: LD_ADDR_VAR 0 1
55000: PUSH
55001: LD_INT 6
55003: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
55004: LD_VAR 0 6
55008: PUSH
55009: LD_INT 0
55011: PUSH
55012: LD_INT 1
55014: PUSH
55015: LD_INT 2
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: LIST
55022: IN
55023: NOT
55024: PUSH
55025: LD_VAR 0 1
55029: PUSH
55030: LD_INT 0
55032: PUSH
55033: LD_INT 1
55035: PUSH
55036: LD_INT 2
55038: PUSH
55039: LD_INT 3
55041: PUSH
55042: LD_INT 6
55044: PUSH
55045: LD_INT 36
55047: PUSH
55048: LD_INT 4
55050: PUSH
55051: LD_INT 5
55053: PUSH
55054: LD_INT 31
55056: PUSH
55057: LD_INT 32
55059: PUSH
55060: LD_INT 33
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: LIST
55070: LIST
55071: LIST
55072: LIST
55073: LIST
55074: LIST
55075: IN
55076: NOT
55077: PUSH
55078: LD_VAR 0 6
55082: PUSH
55083: LD_INT 1
55085: EQUAL
55086: AND
55087: OR
55088: PUSH
55089: LD_VAR 0 1
55093: PUSH
55094: LD_INT 2
55096: PUSH
55097: LD_INT 3
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: IN
55104: NOT
55105: PUSH
55106: LD_VAR 0 6
55110: PUSH
55111: LD_INT 2
55113: EQUAL
55114: AND
55115: OR
55116: IFFALSE 55126
// mode = 0 ;
55118: LD_ADDR_VAR 0 6
55122: PUSH
55123: LD_INT 0
55125: ST_TO_ADDR
// case mode of 0 :
55126: LD_VAR 0 6
55130: PUSH
55131: LD_INT 0
55133: DOUBLE
55134: EQUAL
55135: IFTRUE 55139
55137: GO 66592
55139: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55140: LD_ADDR_VAR 0 11
55144: PUSH
55145: LD_INT 0
55147: PUSH
55148: LD_INT 0
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: LD_INT 0
55157: PUSH
55158: LD_INT 1
55160: NEG
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PUSH
55166: LD_INT 1
55168: PUSH
55169: LD_INT 0
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 1
55178: PUSH
55179: LD_INT 1
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 0
55188: PUSH
55189: LD_INT 1
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 1
55198: NEG
55199: PUSH
55200: LD_INT 0
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 1
55209: NEG
55210: PUSH
55211: LD_INT 1
55213: NEG
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 1
55221: NEG
55222: PUSH
55223: LD_INT 2
55225: NEG
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: PUSH
55231: LD_INT 0
55233: PUSH
55234: LD_INT 2
55236: NEG
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: LD_INT 1
55244: PUSH
55245: LD_INT 1
55247: NEG
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 1
55255: PUSH
55256: LD_INT 2
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 0
55265: PUSH
55266: LD_INT 2
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 1
55275: NEG
55276: PUSH
55277: LD_INT 1
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 1
55286: PUSH
55287: LD_INT 3
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 0
55296: PUSH
55297: LD_INT 3
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 1
55306: NEG
55307: PUSH
55308: LD_INT 2
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55333: LD_ADDR_VAR 0 12
55337: PUSH
55338: LD_INT 0
55340: PUSH
55341: LD_INT 0
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: LD_INT 0
55350: PUSH
55351: LD_INT 1
55353: NEG
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: LD_INT 1
55361: PUSH
55362: LD_INT 0
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 1
55371: PUSH
55372: LD_INT 1
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: LD_INT 0
55381: PUSH
55382: LD_INT 1
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 1
55391: NEG
55392: PUSH
55393: LD_INT 0
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: LD_INT 1
55402: NEG
55403: PUSH
55404: LD_INT 1
55406: NEG
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 1
55414: PUSH
55415: LD_INT 1
55417: NEG
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 2
55425: PUSH
55426: LD_INT 0
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: LD_INT 2
55435: PUSH
55436: LD_INT 1
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 1
55445: NEG
55446: PUSH
55447: LD_INT 1
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 2
55456: NEG
55457: PUSH
55458: LD_INT 0
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 2
55467: NEG
55468: PUSH
55469: LD_INT 1
55471: NEG
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 2
55479: NEG
55480: PUSH
55481: LD_INT 1
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 3
55490: NEG
55491: PUSH
55492: LD_INT 0
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: LD_INT 3
55501: NEG
55502: PUSH
55503: LD_INT 1
55505: NEG
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55529: LD_ADDR_VAR 0 13
55533: PUSH
55534: LD_INT 0
55536: PUSH
55537: LD_INT 0
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: PUSH
55544: LD_INT 0
55546: PUSH
55547: LD_INT 1
55549: NEG
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: LD_INT 1
55557: PUSH
55558: LD_INT 0
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 1
55567: PUSH
55568: LD_INT 1
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: LD_INT 0
55577: PUSH
55578: LD_INT 1
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: LD_INT 1
55587: NEG
55588: PUSH
55589: LD_INT 0
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: PUSH
55596: LD_INT 1
55598: NEG
55599: PUSH
55600: LD_INT 1
55602: NEG
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: PUSH
55608: LD_INT 1
55610: NEG
55611: PUSH
55612: LD_INT 2
55614: NEG
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 2
55622: PUSH
55623: LD_INT 1
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: LD_INT 2
55632: PUSH
55633: LD_INT 2
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 1
55642: PUSH
55643: LD_INT 2
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 2
55652: NEG
55653: PUSH
55654: LD_INT 1
55656: NEG
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 2
55664: NEG
55665: PUSH
55666: LD_INT 2
55668: NEG
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 2
55676: NEG
55677: PUSH
55678: LD_INT 3
55680: NEG
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 3
55688: NEG
55689: PUSH
55690: LD_INT 2
55692: NEG
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: LD_INT 3
55700: NEG
55701: PUSH
55702: LD_INT 3
55704: NEG
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: LIST
55722: LIST
55723: LIST
55724: LIST
55725: LIST
55726: LIST
55727: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55728: LD_ADDR_VAR 0 14
55732: PUSH
55733: LD_INT 0
55735: PUSH
55736: LD_INT 0
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: LD_INT 0
55745: PUSH
55746: LD_INT 1
55748: NEG
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 1
55756: PUSH
55757: LD_INT 0
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: LD_INT 1
55766: PUSH
55767: LD_INT 1
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: PUSH
55774: LD_INT 0
55776: PUSH
55777: LD_INT 1
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PUSH
55784: LD_INT 1
55786: NEG
55787: PUSH
55788: LD_INT 0
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: PUSH
55795: LD_INT 1
55797: NEG
55798: PUSH
55799: LD_INT 1
55801: NEG
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: LD_INT 1
55809: NEG
55810: PUSH
55811: LD_INT 2
55813: NEG
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 0
55821: PUSH
55822: LD_INT 2
55824: NEG
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: PUSH
55830: LD_INT 1
55832: PUSH
55833: LD_INT 1
55835: NEG
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: LD_INT 1
55843: PUSH
55844: LD_INT 2
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 0
55853: PUSH
55854: LD_INT 2
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 1
55863: NEG
55864: PUSH
55865: LD_INT 1
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 1
55874: NEG
55875: PUSH
55876: LD_INT 3
55878: NEG
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: LD_INT 0
55886: PUSH
55887: LD_INT 3
55889: NEG
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: LD_INT 1
55897: PUSH
55898: LD_INT 2
55900: NEG
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: LIST
55910: LIST
55911: LIST
55912: LIST
55913: LIST
55914: LIST
55915: LIST
55916: LIST
55917: LIST
55918: LIST
55919: LIST
55920: LIST
55921: LIST
55922: LIST
55923: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55924: LD_ADDR_VAR 0 15
55928: PUSH
55929: LD_INT 0
55931: PUSH
55932: LD_INT 0
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 0
55941: PUSH
55942: LD_INT 1
55944: NEG
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 1
55952: PUSH
55953: LD_INT 0
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 1
55962: PUSH
55963: LD_INT 1
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 0
55972: PUSH
55973: LD_INT 1
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: LD_INT 1
55982: NEG
55983: PUSH
55984: LD_INT 0
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: LD_INT 1
55993: NEG
55994: PUSH
55995: LD_INT 1
55997: NEG
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 1
56005: PUSH
56006: LD_INT 1
56008: NEG
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 2
56016: PUSH
56017: LD_INT 0
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 2
56026: PUSH
56027: LD_INT 1
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: LD_INT 1
56036: NEG
56037: PUSH
56038: LD_INT 1
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 2
56047: NEG
56048: PUSH
56049: LD_INT 0
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 2
56058: NEG
56059: PUSH
56060: LD_INT 1
56062: NEG
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 2
56070: PUSH
56071: LD_INT 1
56073: NEG
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 3
56081: PUSH
56082: LD_INT 0
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 3
56091: PUSH
56092: LD_INT 1
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: LIST
56105: LIST
56106: LIST
56107: LIST
56108: LIST
56109: LIST
56110: LIST
56111: LIST
56112: LIST
56113: LIST
56114: LIST
56115: LIST
56116: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56117: LD_ADDR_VAR 0 16
56121: PUSH
56122: LD_INT 0
56124: PUSH
56125: LD_INT 0
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 0
56134: PUSH
56135: LD_INT 1
56137: NEG
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 1
56145: PUSH
56146: LD_INT 0
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 1
56155: PUSH
56156: LD_INT 1
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 0
56165: PUSH
56166: LD_INT 1
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 1
56175: NEG
56176: PUSH
56177: LD_INT 0
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 1
56186: NEG
56187: PUSH
56188: LD_INT 1
56190: NEG
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 1
56198: NEG
56199: PUSH
56200: LD_INT 2
56202: NEG
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 2
56210: PUSH
56211: LD_INT 1
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: LD_INT 2
56220: PUSH
56221: LD_INT 2
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 1
56230: PUSH
56231: LD_INT 2
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: PUSH
56238: LD_INT 2
56240: NEG
56241: PUSH
56242: LD_INT 1
56244: NEG
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: PUSH
56250: LD_INT 2
56252: NEG
56253: PUSH
56254: LD_INT 2
56256: NEG
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: LD_INT 3
56264: PUSH
56265: LD_INT 2
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 3
56274: PUSH
56275: LD_INT 3
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 2
56284: PUSH
56285: LD_INT 3
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: LIST
56309: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56310: LD_ADDR_VAR 0 17
56314: PUSH
56315: LD_INT 0
56317: PUSH
56318: LD_INT 0
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 0
56327: PUSH
56328: LD_INT 1
56330: NEG
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: LD_INT 1
56338: PUSH
56339: LD_INT 0
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 1
56348: PUSH
56349: LD_INT 1
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 0
56358: PUSH
56359: LD_INT 1
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 1
56368: NEG
56369: PUSH
56370: LD_INT 0
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: LD_INT 1
56379: NEG
56380: PUSH
56381: LD_INT 1
56383: NEG
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: LD_INT 1
56391: NEG
56392: PUSH
56393: LD_INT 2
56395: NEG
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 0
56403: PUSH
56404: LD_INT 2
56406: NEG
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: PUSH
56412: LD_INT 1
56414: PUSH
56415: LD_INT 1
56417: NEG
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: LD_INT 2
56425: PUSH
56426: LD_INT 0
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 2
56435: PUSH
56436: LD_INT 1
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 2
56445: PUSH
56446: LD_INT 2
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: LD_INT 1
56455: PUSH
56456: LD_INT 2
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 0
56465: PUSH
56466: LD_INT 2
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 1
56475: NEG
56476: PUSH
56477: LD_INT 1
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 2
56486: NEG
56487: PUSH
56488: LD_INT 0
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: LD_INT 2
56497: NEG
56498: PUSH
56499: LD_INT 1
56501: NEG
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 2
56509: NEG
56510: PUSH
56511: LD_INT 2
56513: NEG
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: LIST
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56540: LD_ADDR_VAR 0 18
56544: PUSH
56545: LD_INT 0
56547: PUSH
56548: LD_INT 0
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 0
56557: PUSH
56558: LD_INT 1
56560: NEG
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 1
56568: PUSH
56569: LD_INT 0
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 1
56578: PUSH
56579: LD_INT 1
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 0
56588: PUSH
56589: LD_INT 1
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 1
56598: NEG
56599: PUSH
56600: LD_INT 0
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 1
56609: NEG
56610: PUSH
56611: LD_INT 1
56613: NEG
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 1
56621: NEG
56622: PUSH
56623: LD_INT 2
56625: NEG
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 0
56633: PUSH
56634: LD_INT 2
56636: NEG
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 1
56644: PUSH
56645: LD_INT 1
56647: NEG
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PUSH
56653: LD_INT 2
56655: PUSH
56656: LD_INT 0
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: LD_INT 2
56665: PUSH
56666: LD_INT 1
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: PUSH
56673: LD_INT 2
56675: PUSH
56676: LD_INT 2
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PUSH
56683: LD_INT 1
56685: PUSH
56686: LD_INT 2
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_INT 0
56695: PUSH
56696: LD_INT 2
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: LD_INT 1
56705: NEG
56706: PUSH
56707: LD_INT 1
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 2
56716: NEG
56717: PUSH
56718: LD_INT 0
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 2
56727: NEG
56728: PUSH
56729: LD_INT 1
56731: NEG
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: LD_INT 2
56739: NEG
56740: PUSH
56741: LD_INT 2
56743: NEG
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56770: LD_ADDR_VAR 0 19
56774: PUSH
56775: LD_INT 0
56777: PUSH
56778: LD_INT 0
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 0
56787: PUSH
56788: LD_INT 1
56790: NEG
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: PUSH
56796: LD_INT 1
56798: PUSH
56799: LD_INT 0
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 1
56808: PUSH
56809: LD_INT 1
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 0
56818: PUSH
56819: LD_INT 1
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 1
56828: NEG
56829: PUSH
56830: LD_INT 0
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 1
56839: NEG
56840: PUSH
56841: LD_INT 1
56843: NEG
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 1
56851: NEG
56852: PUSH
56853: LD_INT 2
56855: NEG
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 0
56863: PUSH
56864: LD_INT 2
56866: NEG
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: LD_INT 1
56874: PUSH
56875: LD_INT 1
56877: NEG
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 2
56885: PUSH
56886: LD_INT 0
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: LD_INT 2
56895: PUSH
56896: LD_INT 1
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 2
56905: PUSH
56906: LD_INT 2
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 1
56915: PUSH
56916: LD_INT 2
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 0
56925: PUSH
56926: LD_INT 2
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 1
56935: NEG
56936: PUSH
56937: LD_INT 1
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 2
56946: NEG
56947: PUSH
56948: LD_INT 0
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 2
56957: NEG
56958: PUSH
56959: LD_INT 1
56961: NEG
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: LD_INT 2
56969: NEG
56970: PUSH
56971: LD_INT 2
56973: NEG
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57000: LD_ADDR_VAR 0 20
57004: PUSH
57005: LD_INT 0
57007: PUSH
57008: LD_INT 0
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: LD_INT 0
57017: PUSH
57018: LD_INT 1
57020: NEG
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 1
57028: PUSH
57029: LD_INT 0
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PUSH
57036: LD_INT 1
57038: PUSH
57039: LD_INT 1
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: LD_INT 0
57048: PUSH
57049: LD_INT 1
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: PUSH
57056: LD_INT 1
57058: NEG
57059: PUSH
57060: LD_INT 0
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 1
57069: NEG
57070: PUSH
57071: LD_INT 1
57073: NEG
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 1
57081: NEG
57082: PUSH
57083: LD_INT 2
57085: NEG
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: PUSH
57091: LD_INT 0
57093: PUSH
57094: LD_INT 2
57096: NEG
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 1
57104: PUSH
57105: LD_INT 1
57107: NEG
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: PUSH
57113: LD_INT 2
57115: PUSH
57116: LD_INT 0
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: PUSH
57123: LD_INT 2
57125: PUSH
57126: LD_INT 1
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 2
57135: PUSH
57136: LD_INT 2
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: LD_INT 1
57145: PUSH
57146: LD_INT 2
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 0
57155: PUSH
57156: LD_INT 2
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: LD_INT 1
57165: NEG
57166: PUSH
57167: LD_INT 1
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 2
57176: NEG
57177: PUSH
57178: LD_INT 0
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: LD_INT 2
57187: NEG
57188: PUSH
57189: LD_INT 1
57191: NEG
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: LD_INT 2
57199: NEG
57200: PUSH
57201: LD_INT 2
57203: NEG
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: LIST
57213: LIST
57214: LIST
57215: LIST
57216: LIST
57217: LIST
57218: LIST
57219: LIST
57220: LIST
57221: LIST
57222: LIST
57223: LIST
57224: LIST
57225: LIST
57226: LIST
57227: LIST
57228: LIST
57229: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57230: LD_ADDR_VAR 0 21
57234: PUSH
57235: LD_INT 0
57237: PUSH
57238: LD_INT 0
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 0
57247: PUSH
57248: LD_INT 1
57250: NEG
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: LD_INT 1
57258: PUSH
57259: LD_INT 0
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: PUSH
57266: LD_INT 1
57268: PUSH
57269: LD_INT 1
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: LD_INT 0
57278: PUSH
57279: LD_INT 1
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: LD_INT 1
57288: NEG
57289: PUSH
57290: LD_INT 0
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 1
57299: NEG
57300: PUSH
57301: LD_INT 1
57303: NEG
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 1
57311: NEG
57312: PUSH
57313: LD_INT 2
57315: NEG
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 0
57323: PUSH
57324: LD_INT 2
57326: NEG
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 1
57334: PUSH
57335: LD_INT 1
57337: NEG
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: LD_INT 2
57345: PUSH
57346: LD_INT 0
57348: PUSH
57349: EMPTY
57350: LIST
57351: LIST
57352: PUSH
57353: LD_INT 2
57355: PUSH
57356: LD_INT 1
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 2
57365: PUSH
57366: LD_INT 2
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 1
57375: PUSH
57376: LD_INT 2
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 0
57385: PUSH
57386: LD_INT 2
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_INT 1
57395: NEG
57396: PUSH
57397: LD_INT 1
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_INT 2
57406: NEG
57407: PUSH
57408: LD_INT 0
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: LD_INT 2
57417: NEG
57418: PUSH
57419: LD_INT 1
57421: NEG
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: PUSH
57427: LD_INT 2
57429: NEG
57430: PUSH
57431: LD_INT 2
57433: NEG
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: LIST
57458: LIST
57459: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57460: LD_ADDR_VAR 0 22
57464: PUSH
57465: LD_INT 0
57467: PUSH
57468: LD_INT 0
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 0
57477: PUSH
57478: LD_INT 1
57480: NEG
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: PUSH
57486: LD_INT 1
57488: PUSH
57489: LD_INT 0
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 1
57498: PUSH
57499: LD_INT 1
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 0
57508: PUSH
57509: LD_INT 1
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: LD_INT 1
57518: NEG
57519: PUSH
57520: LD_INT 0
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: LD_INT 1
57529: NEG
57530: PUSH
57531: LD_INT 1
57533: NEG
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 1
57541: NEG
57542: PUSH
57543: LD_INT 2
57545: NEG
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: PUSH
57551: LD_INT 0
57553: PUSH
57554: LD_INT 2
57556: NEG
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 1
57564: PUSH
57565: LD_INT 1
57567: NEG
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 2
57575: PUSH
57576: LD_INT 0
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 2
57585: PUSH
57586: LD_INT 1
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: LD_INT 2
57595: PUSH
57596: LD_INT 2
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: LD_INT 1
57605: PUSH
57606: LD_INT 2
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 0
57615: PUSH
57616: LD_INT 2
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 1
57625: NEG
57626: PUSH
57627: LD_INT 1
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: LD_INT 2
57636: NEG
57637: PUSH
57638: LD_INT 0
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 2
57647: NEG
57648: PUSH
57649: LD_INT 1
57651: NEG
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: LD_INT 2
57659: NEG
57660: PUSH
57661: LD_INT 2
57663: NEG
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: LIST
57673: LIST
57674: LIST
57675: LIST
57676: LIST
57677: LIST
57678: LIST
57679: LIST
57680: LIST
57681: LIST
57682: LIST
57683: LIST
57684: LIST
57685: LIST
57686: LIST
57687: LIST
57688: LIST
57689: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57690: LD_ADDR_VAR 0 23
57694: PUSH
57695: LD_INT 0
57697: PUSH
57698: LD_INT 0
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: PUSH
57705: LD_INT 0
57707: PUSH
57708: LD_INT 1
57710: NEG
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 1
57718: PUSH
57719: LD_INT 0
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: LD_INT 1
57728: PUSH
57729: LD_INT 1
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 0
57738: PUSH
57739: LD_INT 1
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 1
57748: NEG
57749: PUSH
57750: LD_INT 0
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 1
57759: NEG
57760: PUSH
57761: LD_INT 1
57763: NEG
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: PUSH
57769: LD_INT 1
57771: NEG
57772: PUSH
57773: LD_INT 2
57775: NEG
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: LD_INT 0
57783: PUSH
57784: LD_INT 2
57786: NEG
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: LD_INT 1
57794: PUSH
57795: LD_INT 1
57797: NEG
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 2
57805: PUSH
57806: LD_INT 0
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 2
57815: PUSH
57816: LD_INT 1
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: PUSH
57823: LD_INT 2
57825: PUSH
57826: LD_INT 2
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: LD_INT 1
57835: PUSH
57836: LD_INT 2
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 0
57845: PUSH
57846: LD_INT 2
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: PUSH
57853: LD_INT 1
57855: NEG
57856: PUSH
57857: LD_INT 1
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 2
57866: NEG
57867: PUSH
57868: LD_INT 0
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 2
57877: NEG
57878: PUSH
57879: LD_INT 1
57881: NEG
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: LD_INT 2
57889: NEG
57890: PUSH
57891: LD_INT 2
57893: NEG
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 2
57901: NEG
57902: PUSH
57903: LD_INT 3
57905: NEG
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 1
57913: NEG
57914: PUSH
57915: LD_INT 3
57917: NEG
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: PUSH
57923: LD_INT 1
57925: PUSH
57926: LD_INT 2
57928: NEG
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: LD_INT 2
57936: PUSH
57937: LD_INT 1
57939: NEG
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: LIST
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: LIST
57963: LIST
57964: LIST
57965: LIST
57966: LIST
57967: LIST
57968: LIST
57969: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
57970: LD_ADDR_VAR 0 24
57974: PUSH
57975: LD_INT 0
57977: PUSH
57978: LD_INT 0
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: LD_INT 0
57987: PUSH
57988: LD_INT 1
57990: NEG
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 1
57998: PUSH
57999: LD_INT 0
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 1
58008: PUSH
58009: LD_INT 1
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: LD_INT 0
58018: PUSH
58019: LD_INT 1
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: LD_INT 1
58028: NEG
58029: PUSH
58030: LD_INT 0
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 1
58039: NEG
58040: PUSH
58041: LD_INT 1
58043: NEG
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: LD_INT 1
58051: NEG
58052: PUSH
58053: LD_INT 2
58055: NEG
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 0
58063: PUSH
58064: LD_INT 2
58066: NEG
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: LD_INT 1
58074: PUSH
58075: LD_INT 1
58077: NEG
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: LD_INT 2
58085: PUSH
58086: LD_INT 0
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 2
58095: PUSH
58096: LD_INT 1
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: LD_INT 2
58105: PUSH
58106: LD_INT 2
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 1
58115: PUSH
58116: LD_INT 2
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 0
58125: PUSH
58126: LD_INT 2
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 1
58135: NEG
58136: PUSH
58137: LD_INT 1
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 2
58146: NEG
58147: PUSH
58148: LD_INT 0
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: PUSH
58155: LD_INT 2
58157: NEG
58158: PUSH
58159: LD_INT 1
58161: NEG
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 2
58169: NEG
58170: PUSH
58171: LD_INT 2
58173: NEG
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 1
58181: PUSH
58182: LD_INT 2
58184: NEG
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: LD_INT 2
58192: PUSH
58193: LD_INT 1
58195: NEG
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: PUSH
58201: LD_INT 3
58203: PUSH
58204: LD_INT 1
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PUSH
58211: LD_INT 3
58213: PUSH
58214: LD_INT 2
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: LIST
58228: LIST
58229: LIST
58230: LIST
58231: LIST
58232: LIST
58233: LIST
58234: LIST
58235: LIST
58236: LIST
58237: LIST
58238: LIST
58239: LIST
58240: LIST
58241: LIST
58242: LIST
58243: LIST
58244: LIST
58245: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
58246: LD_ADDR_VAR 0 25
58250: PUSH
58251: LD_INT 0
58253: PUSH
58254: LD_INT 0
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: LD_INT 0
58263: PUSH
58264: LD_INT 1
58266: NEG
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 1
58274: PUSH
58275: LD_INT 0
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: PUSH
58282: LD_INT 1
58284: PUSH
58285: LD_INT 1
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: PUSH
58292: LD_INT 0
58294: PUSH
58295: LD_INT 1
58297: PUSH
58298: EMPTY
58299: LIST
58300: LIST
58301: PUSH
58302: LD_INT 1
58304: NEG
58305: PUSH
58306: LD_INT 0
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PUSH
58313: LD_INT 1
58315: NEG
58316: PUSH
58317: LD_INT 1
58319: NEG
58320: PUSH
58321: EMPTY
58322: LIST
58323: LIST
58324: PUSH
58325: LD_INT 1
58327: NEG
58328: PUSH
58329: LD_INT 2
58331: NEG
58332: PUSH
58333: EMPTY
58334: LIST
58335: LIST
58336: PUSH
58337: LD_INT 0
58339: PUSH
58340: LD_INT 2
58342: NEG
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 1
58350: PUSH
58351: LD_INT 1
58353: NEG
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: PUSH
58359: LD_INT 2
58361: PUSH
58362: LD_INT 0
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: PUSH
58369: LD_INT 2
58371: PUSH
58372: LD_INT 1
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PUSH
58379: LD_INT 2
58381: PUSH
58382: LD_INT 2
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: PUSH
58389: LD_INT 1
58391: PUSH
58392: LD_INT 2
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 0
58401: PUSH
58402: LD_INT 2
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 1
58411: NEG
58412: PUSH
58413: LD_INT 1
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: LD_INT 2
58422: NEG
58423: PUSH
58424: LD_INT 0
58426: PUSH
58427: EMPTY
58428: LIST
58429: LIST
58430: PUSH
58431: LD_INT 2
58433: NEG
58434: PUSH
58435: LD_INT 1
58437: NEG
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PUSH
58443: LD_INT 2
58445: NEG
58446: PUSH
58447: LD_INT 2
58449: NEG
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PUSH
58455: LD_INT 3
58457: PUSH
58458: LD_INT 1
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: LD_INT 3
58467: PUSH
58468: LD_INT 2
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: LD_INT 2
58477: PUSH
58478: LD_INT 3
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: LD_INT 1
58487: PUSH
58488: LD_INT 3
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: LIST
58499: LIST
58500: LIST
58501: LIST
58502: LIST
58503: LIST
58504: LIST
58505: LIST
58506: LIST
58507: LIST
58508: LIST
58509: LIST
58510: LIST
58511: LIST
58512: LIST
58513: LIST
58514: LIST
58515: LIST
58516: LIST
58517: LIST
58518: LIST
58519: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58520: LD_ADDR_VAR 0 26
58524: PUSH
58525: LD_INT 0
58527: PUSH
58528: LD_INT 0
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: LD_INT 0
58537: PUSH
58538: LD_INT 1
58540: NEG
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 1
58548: PUSH
58549: LD_INT 0
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 1
58558: PUSH
58559: LD_INT 1
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: PUSH
58566: LD_INT 0
58568: PUSH
58569: LD_INT 1
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: LD_INT 1
58578: NEG
58579: PUSH
58580: LD_INT 0
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: PUSH
58587: LD_INT 1
58589: NEG
58590: PUSH
58591: LD_INT 1
58593: NEG
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: PUSH
58599: LD_INT 1
58601: NEG
58602: PUSH
58603: LD_INT 2
58605: NEG
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: PUSH
58611: LD_INT 0
58613: PUSH
58614: LD_INT 2
58616: NEG
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 1
58624: PUSH
58625: LD_INT 1
58627: NEG
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 2
58635: PUSH
58636: LD_INT 0
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: LD_INT 2
58645: PUSH
58646: LD_INT 1
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: LD_INT 2
58655: PUSH
58656: LD_INT 2
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 1
58665: PUSH
58666: LD_INT 2
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: LD_INT 0
58675: PUSH
58676: LD_INT 2
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: LD_INT 1
58685: NEG
58686: PUSH
58687: LD_INT 1
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 2
58696: NEG
58697: PUSH
58698: LD_INT 0
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: LD_INT 2
58707: NEG
58708: PUSH
58709: LD_INT 1
58711: NEG
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: PUSH
58717: LD_INT 2
58719: NEG
58720: PUSH
58721: LD_INT 2
58723: NEG
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 2
58731: PUSH
58732: LD_INT 3
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 1
58741: PUSH
58742: LD_INT 3
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 1
58751: NEG
58752: PUSH
58753: LD_INT 2
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: LD_INT 2
58762: NEG
58763: PUSH
58764: LD_INT 1
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: LIST
58775: LIST
58776: LIST
58777: LIST
58778: LIST
58779: LIST
58780: LIST
58781: LIST
58782: LIST
58783: LIST
58784: LIST
58785: LIST
58786: LIST
58787: LIST
58788: LIST
58789: LIST
58790: LIST
58791: LIST
58792: LIST
58793: LIST
58794: LIST
58795: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58796: LD_ADDR_VAR 0 27
58800: PUSH
58801: LD_INT 0
58803: PUSH
58804: LD_INT 0
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: PUSH
58811: LD_INT 0
58813: PUSH
58814: LD_INT 1
58816: NEG
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_INT 1
58824: PUSH
58825: LD_INT 0
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PUSH
58832: LD_INT 1
58834: PUSH
58835: LD_INT 1
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 0
58844: PUSH
58845: LD_INT 1
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: LD_INT 1
58854: NEG
58855: PUSH
58856: LD_INT 0
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: PUSH
58863: LD_INT 1
58865: NEG
58866: PUSH
58867: LD_INT 1
58869: NEG
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: PUSH
58875: LD_INT 1
58877: NEG
58878: PUSH
58879: LD_INT 2
58881: NEG
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 0
58889: PUSH
58890: LD_INT 2
58892: NEG
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 1
58900: PUSH
58901: LD_INT 1
58903: NEG
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 2
58911: PUSH
58912: LD_INT 0
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 2
58921: PUSH
58922: LD_INT 1
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 2
58931: PUSH
58932: LD_INT 2
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: LD_INT 1
58941: PUSH
58942: LD_INT 2
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 0
58951: PUSH
58952: LD_INT 2
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: LD_INT 1
58961: NEG
58962: PUSH
58963: LD_INT 1
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: LD_INT 2
58972: NEG
58973: PUSH
58974: LD_INT 0
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 2
58983: NEG
58984: PUSH
58985: LD_INT 1
58987: NEG
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 2
58995: NEG
58996: PUSH
58997: LD_INT 2
58999: NEG
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PUSH
59005: LD_INT 1
59007: NEG
59008: PUSH
59009: LD_INT 2
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_INT 2
59018: NEG
59019: PUSH
59020: LD_INT 1
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: LD_INT 3
59029: NEG
59030: PUSH
59031: LD_INT 1
59033: NEG
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: LD_INT 3
59041: NEG
59042: PUSH
59043: LD_INT 2
59045: NEG
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: LIST
59055: LIST
59056: LIST
59057: LIST
59058: LIST
59059: LIST
59060: LIST
59061: LIST
59062: LIST
59063: LIST
59064: LIST
59065: LIST
59066: LIST
59067: LIST
59068: LIST
59069: LIST
59070: LIST
59071: LIST
59072: LIST
59073: LIST
59074: LIST
59075: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59076: LD_ADDR_VAR 0 28
59080: PUSH
59081: LD_INT 0
59083: PUSH
59084: LD_INT 0
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: LD_INT 0
59093: PUSH
59094: LD_INT 1
59096: NEG
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 1
59104: PUSH
59105: LD_INT 0
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 1
59114: PUSH
59115: LD_INT 1
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: PUSH
59122: LD_INT 0
59124: PUSH
59125: LD_INT 1
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 1
59134: NEG
59135: PUSH
59136: LD_INT 0
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: PUSH
59143: LD_INT 1
59145: NEG
59146: PUSH
59147: LD_INT 1
59149: NEG
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: LD_INT 1
59157: NEG
59158: PUSH
59159: LD_INT 2
59161: NEG
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: LD_INT 0
59169: PUSH
59170: LD_INT 2
59172: NEG
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 1
59180: PUSH
59181: LD_INT 1
59183: NEG
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: PUSH
59189: LD_INT 2
59191: PUSH
59192: LD_INT 0
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: LD_INT 2
59201: PUSH
59202: LD_INT 1
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PUSH
59209: LD_INT 2
59211: PUSH
59212: LD_INT 2
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: PUSH
59219: LD_INT 1
59221: PUSH
59222: LD_INT 2
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 0
59231: PUSH
59232: LD_INT 2
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: LD_INT 1
59241: NEG
59242: PUSH
59243: LD_INT 1
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 2
59252: NEG
59253: PUSH
59254: LD_INT 0
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: PUSH
59261: LD_INT 2
59263: NEG
59264: PUSH
59265: LD_INT 1
59267: NEG
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 2
59275: NEG
59276: PUSH
59277: LD_INT 2
59279: NEG
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: LD_INT 2
59287: NEG
59288: PUSH
59289: LD_INT 3
59291: NEG
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 1
59299: NEG
59300: PUSH
59301: LD_INT 3
59303: NEG
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 3
59311: NEG
59312: PUSH
59313: LD_INT 1
59315: NEG
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: LD_INT 3
59323: NEG
59324: PUSH
59325: LD_INT 2
59327: NEG
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: LIST
59337: LIST
59338: LIST
59339: LIST
59340: LIST
59341: LIST
59342: LIST
59343: LIST
59344: LIST
59345: LIST
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: LIST
59351: LIST
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59358: LD_ADDR_VAR 0 29
59362: PUSH
59363: LD_INT 0
59365: PUSH
59366: LD_INT 0
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: PUSH
59373: LD_INT 0
59375: PUSH
59376: LD_INT 1
59378: NEG
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PUSH
59384: LD_INT 1
59386: PUSH
59387: LD_INT 0
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: PUSH
59394: LD_INT 1
59396: PUSH
59397: LD_INT 1
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: PUSH
59404: LD_INT 0
59406: PUSH
59407: LD_INT 1
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: PUSH
59414: LD_INT 1
59416: NEG
59417: PUSH
59418: LD_INT 0
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 1
59427: NEG
59428: PUSH
59429: LD_INT 1
59431: NEG
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PUSH
59437: LD_INT 1
59439: NEG
59440: PUSH
59441: LD_INT 2
59443: NEG
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: LD_INT 0
59451: PUSH
59452: LD_INT 2
59454: NEG
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 1
59462: PUSH
59463: LD_INT 1
59465: NEG
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 2
59473: PUSH
59474: LD_INT 0
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: LD_INT 2
59483: PUSH
59484: LD_INT 1
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: PUSH
59491: LD_INT 1
59493: PUSH
59494: LD_INT 2
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: PUSH
59501: LD_INT 0
59503: PUSH
59504: LD_INT 2
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: PUSH
59511: LD_INT 1
59513: NEG
59514: PUSH
59515: LD_INT 1
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: LD_INT 2
59524: NEG
59525: PUSH
59526: LD_INT 1
59528: NEG
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: PUSH
59534: LD_INT 2
59536: NEG
59537: PUSH
59538: LD_INT 2
59540: NEG
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PUSH
59546: LD_INT 2
59548: NEG
59549: PUSH
59550: LD_INT 3
59552: NEG
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: LD_INT 2
59560: PUSH
59561: LD_INT 1
59563: NEG
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: PUSH
59569: LD_INT 3
59571: PUSH
59572: LD_INT 1
59574: PUSH
59575: EMPTY
59576: LIST
59577: LIST
59578: PUSH
59579: LD_INT 1
59581: PUSH
59582: LD_INT 3
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: PUSH
59589: LD_INT 1
59591: NEG
59592: PUSH
59593: LD_INT 2
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: PUSH
59600: LD_INT 3
59602: NEG
59603: PUSH
59604: LD_INT 2
59606: NEG
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: LIST
59616: LIST
59617: LIST
59618: LIST
59619: LIST
59620: LIST
59621: LIST
59622: LIST
59623: LIST
59624: LIST
59625: LIST
59626: LIST
59627: LIST
59628: LIST
59629: LIST
59630: LIST
59631: LIST
59632: LIST
59633: LIST
59634: LIST
59635: LIST
59636: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59637: LD_ADDR_VAR 0 30
59641: PUSH
59642: LD_INT 0
59644: PUSH
59645: LD_INT 0
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: LD_INT 0
59654: PUSH
59655: LD_INT 1
59657: NEG
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PUSH
59663: LD_INT 1
59665: PUSH
59666: LD_INT 0
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: PUSH
59673: LD_INT 1
59675: PUSH
59676: LD_INT 1
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: PUSH
59683: LD_INT 0
59685: PUSH
59686: LD_INT 1
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: PUSH
59693: LD_INT 1
59695: NEG
59696: PUSH
59697: LD_INT 0
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: PUSH
59704: LD_INT 1
59706: NEG
59707: PUSH
59708: LD_INT 1
59710: NEG
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: PUSH
59716: LD_INT 1
59718: NEG
59719: PUSH
59720: LD_INT 2
59722: NEG
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: LD_INT 0
59730: PUSH
59731: LD_INT 2
59733: NEG
59734: PUSH
59735: EMPTY
59736: LIST
59737: LIST
59738: PUSH
59739: LD_INT 1
59741: PUSH
59742: LD_INT 1
59744: NEG
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: PUSH
59750: LD_INT 2
59752: PUSH
59753: LD_INT 0
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: LD_INT 2
59762: PUSH
59763: LD_INT 1
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: PUSH
59770: LD_INT 2
59772: PUSH
59773: LD_INT 2
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 1
59782: PUSH
59783: LD_INT 2
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: LD_INT 1
59792: NEG
59793: PUSH
59794: LD_INT 1
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 2
59803: NEG
59804: PUSH
59805: LD_INT 0
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 2
59814: NEG
59815: PUSH
59816: LD_INT 1
59818: NEG
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: PUSH
59824: LD_INT 1
59826: NEG
59827: PUSH
59828: LD_INT 3
59830: NEG
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: PUSH
59836: LD_INT 1
59838: PUSH
59839: LD_INT 2
59841: NEG
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: PUSH
59847: LD_INT 3
59849: PUSH
59850: LD_INT 2
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: PUSH
59857: LD_INT 2
59859: PUSH
59860: LD_INT 3
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: PUSH
59867: LD_INT 2
59869: NEG
59870: PUSH
59871: LD_INT 1
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: PUSH
59878: LD_INT 3
59880: NEG
59881: PUSH
59882: LD_INT 1
59884: NEG
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: LIST
59894: LIST
59895: LIST
59896: LIST
59897: LIST
59898: LIST
59899: LIST
59900: LIST
59901: LIST
59902: LIST
59903: LIST
59904: LIST
59905: LIST
59906: LIST
59907: LIST
59908: LIST
59909: LIST
59910: LIST
59911: LIST
59912: LIST
59913: LIST
59914: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59915: LD_ADDR_VAR 0 31
59919: PUSH
59920: LD_INT 0
59922: PUSH
59923: LD_INT 0
59925: PUSH
59926: EMPTY
59927: LIST
59928: LIST
59929: PUSH
59930: LD_INT 0
59932: PUSH
59933: LD_INT 1
59935: NEG
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: LD_INT 1
59943: PUSH
59944: LD_INT 0
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: LD_INT 1
59953: PUSH
59954: LD_INT 1
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: LD_INT 0
59963: PUSH
59964: LD_INT 1
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: LD_INT 1
59973: NEG
59974: PUSH
59975: LD_INT 0
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 1
59984: NEG
59985: PUSH
59986: LD_INT 1
59988: NEG
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: PUSH
59994: LD_INT 1
59996: NEG
59997: PUSH
59998: LD_INT 2
60000: NEG
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: PUSH
60006: LD_INT 1
60008: PUSH
60009: LD_INT 1
60011: NEG
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: PUSH
60017: LD_INT 2
60019: PUSH
60020: LD_INT 0
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: PUSH
60027: LD_INT 2
60029: PUSH
60030: LD_INT 1
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: PUSH
60037: LD_INT 2
60039: PUSH
60040: LD_INT 2
60042: PUSH
60043: EMPTY
60044: LIST
60045: LIST
60046: PUSH
60047: LD_INT 1
60049: PUSH
60050: LD_INT 2
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: PUSH
60057: LD_INT 0
60059: PUSH
60060: LD_INT 2
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: PUSH
60067: LD_INT 1
60069: NEG
60070: PUSH
60071: LD_INT 1
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: PUSH
60078: LD_INT 2
60080: NEG
60081: PUSH
60082: LD_INT 1
60084: NEG
60085: PUSH
60086: EMPTY
60087: LIST
60088: LIST
60089: PUSH
60090: LD_INT 2
60092: NEG
60093: PUSH
60094: LD_INT 2
60096: NEG
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: PUSH
60102: LD_INT 2
60104: NEG
60105: PUSH
60106: LD_INT 3
60108: NEG
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: PUSH
60114: LD_INT 2
60116: PUSH
60117: LD_INT 1
60119: NEG
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: LD_INT 3
60127: PUSH
60128: LD_INT 1
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: PUSH
60135: LD_INT 1
60137: PUSH
60138: LD_INT 3
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: PUSH
60145: LD_INT 1
60147: NEG
60148: PUSH
60149: LD_INT 2
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: LD_INT 3
60158: NEG
60159: PUSH
60160: LD_INT 2
60162: NEG
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: LIST
60172: LIST
60173: LIST
60174: LIST
60175: LIST
60176: LIST
60177: LIST
60178: LIST
60179: LIST
60180: LIST
60181: LIST
60182: LIST
60183: LIST
60184: LIST
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: LIST
60191: LIST
60192: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60193: LD_ADDR_VAR 0 32
60197: PUSH
60198: LD_INT 0
60200: PUSH
60201: LD_INT 0
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 0
60210: PUSH
60211: LD_INT 1
60213: NEG
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_INT 1
60221: PUSH
60222: LD_INT 0
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: LD_INT 1
60231: PUSH
60232: LD_INT 1
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: PUSH
60239: LD_INT 0
60241: PUSH
60242: LD_INT 1
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: LD_INT 1
60251: NEG
60252: PUSH
60253: LD_INT 0
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: PUSH
60260: LD_INT 1
60262: NEG
60263: PUSH
60264: LD_INT 1
60266: NEG
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: LD_INT 1
60274: NEG
60275: PUSH
60276: LD_INT 2
60278: NEG
60279: PUSH
60280: EMPTY
60281: LIST
60282: LIST
60283: PUSH
60284: LD_INT 0
60286: PUSH
60287: LD_INT 2
60289: NEG
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: PUSH
60295: LD_INT 1
60297: PUSH
60298: LD_INT 1
60300: NEG
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: PUSH
60306: LD_INT 2
60308: PUSH
60309: LD_INT 1
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: LD_INT 2
60318: PUSH
60319: LD_INT 2
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 1
60328: PUSH
60329: LD_INT 2
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PUSH
60336: LD_INT 0
60338: PUSH
60339: LD_INT 2
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 1
60348: NEG
60349: PUSH
60350: LD_INT 1
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 2
60359: NEG
60360: PUSH
60361: LD_INT 0
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: LD_INT 2
60370: NEG
60371: PUSH
60372: LD_INT 1
60374: NEG
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: PUSH
60380: LD_INT 1
60382: NEG
60383: PUSH
60384: LD_INT 3
60386: NEG
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: PUSH
60392: LD_INT 1
60394: PUSH
60395: LD_INT 2
60397: NEG
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 3
60405: PUSH
60406: LD_INT 2
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: PUSH
60413: LD_INT 2
60415: PUSH
60416: LD_INT 3
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: LD_INT 2
60425: NEG
60426: PUSH
60427: LD_INT 1
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: PUSH
60434: LD_INT 3
60436: NEG
60437: PUSH
60438: LD_INT 1
60440: NEG
60441: PUSH
60442: EMPTY
60443: LIST
60444: LIST
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: LIST
60450: LIST
60451: LIST
60452: LIST
60453: LIST
60454: LIST
60455: LIST
60456: LIST
60457: LIST
60458: LIST
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: LIST
60466: LIST
60467: LIST
60468: LIST
60469: LIST
60470: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60471: LD_ADDR_VAR 0 33
60475: PUSH
60476: LD_INT 0
60478: PUSH
60479: LD_INT 0
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PUSH
60486: LD_INT 0
60488: PUSH
60489: LD_INT 1
60491: NEG
60492: PUSH
60493: EMPTY
60494: LIST
60495: LIST
60496: PUSH
60497: LD_INT 1
60499: PUSH
60500: LD_INT 0
60502: PUSH
60503: EMPTY
60504: LIST
60505: LIST
60506: PUSH
60507: LD_INT 1
60509: PUSH
60510: LD_INT 1
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: PUSH
60517: LD_INT 0
60519: PUSH
60520: LD_INT 1
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: PUSH
60527: LD_INT 1
60529: NEG
60530: PUSH
60531: LD_INT 0
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: PUSH
60538: LD_INT 1
60540: NEG
60541: PUSH
60542: LD_INT 1
60544: NEG
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: PUSH
60550: LD_INT 1
60552: NEG
60553: PUSH
60554: LD_INT 2
60556: NEG
60557: PUSH
60558: EMPTY
60559: LIST
60560: LIST
60561: PUSH
60562: LD_INT 1
60564: PUSH
60565: LD_INT 1
60567: NEG
60568: PUSH
60569: EMPTY
60570: LIST
60571: LIST
60572: PUSH
60573: LD_INT 2
60575: PUSH
60576: LD_INT 0
60578: PUSH
60579: EMPTY
60580: LIST
60581: LIST
60582: PUSH
60583: LD_INT 2
60585: PUSH
60586: LD_INT 1
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: PUSH
60593: LD_INT 1
60595: PUSH
60596: LD_INT 2
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: PUSH
60603: LD_INT 0
60605: PUSH
60606: LD_INT 2
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: LD_INT 1
60615: NEG
60616: PUSH
60617: LD_INT 1
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: PUSH
60624: LD_INT 2
60626: NEG
60627: PUSH
60628: LD_INT 0
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: PUSH
60635: LD_INT 2
60637: NEG
60638: PUSH
60639: LD_INT 1
60641: NEG
60642: PUSH
60643: EMPTY
60644: LIST
60645: LIST
60646: PUSH
60647: LD_INT 2
60649: NEG
60650: PUSH
60651: LD_INT 2
60653: NEG
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: PUSH
60659: LD_INT 2
60661: NEG
60662: PUSH
60663: LD_INT 3
60665: NEG
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: LD_INT 2
60673: PUSH
60674: LD_INT 1
60676: NEG
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: LD_INT 3
60684: PUSH
60685: LD_INT 1
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: PUSH
60692: LD_INT 1
60694: PUSH
60695: LD_INT 3
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: PUSH
60702: LD_INT 1
60704: NEG
60705: PUSH
60706: LD_INT 2
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: PUSH
60713: LD_INT 3
60715: NEG
60716: PUSH
60717: LD_INT 2
60719: NEG
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: EMPTY
60726: LIST
60727: LIST
60728: LIST
60729: LIST
60730: LIST
60731: LIST
60732: LIST
60733: LIST
60734: LIST
60735: LIST
60736: LIST
60737: LIST
60738: LIST
60739: LIST
60740: LIST
60741: LIST
60742: LIST
60743: LIST
60744: LIST
60745: LIST
60746: LIST
60747: LIST
60748: LIST
60749: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60750: LD_ADDR_VAR 0 34
60754: PUSH
60755: LD_INT 0
60757: PUSH
60758: LD_INT 0
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: PUSH
60765: LD_INT 0
60767: PUSH
60768: LD_INT 1
60770: NEG
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 1
60778: PUSH
60779: LD_INT 0
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 1
60788: PUSH
60789: LD_INT 1
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: LD_INT 0
60798: PUSH
60799: LD_INT 1
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: PUSH
60806: LD_INT 1
60808: NEG
60809: PUSH
60810: LD_INT 0
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: LD_INT 1
60819: NEG
60820: PUSH
60821: LD_INT 1
60823: NEG
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: LD_INT 1
60831: NEG
60832: PUSH
60833: LD_INT 2
60835: NEG
60836: PUSH
60837: EMPTY
60838: LIST
60839: LIST
60840: PUSH
60841: LD_INT 0
60843: PUSH
60844: LD_INT 2
60846: NEG
60847: PUSH
60848: EMPTY
60849: LIST
60850: LIST
60851: PUSH
60852: LD_INT 1
60854: PUSH
60855: LD_INT 1
60857: NEG
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 2
60865: PUSH
60866: LD_INT 1
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PUSH
60873: LD_INT 2
60875: PUSH
60876: LD_INT 2
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: LD_INT 1
60885: PUSH
60886: LD_INT 2
60888: PUSH
60889: EMPTY
60890: LIST
60891: LIST
60892: PUSH
60893: LD_INT 1
60895: NEG
60896: PUSH
60897: LD_INT 1
60899: PUSH
60900: EMPTY
60901: LIST
60902: LIST
60903: PUSH
60904: LD_INT 2
60906: NEG
60907: PUSH
60908: LD_INT 0
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: PUSH
60915: LD_INT 2
60917: NEG
60918: PUSH
60919: LD_INT 1
60921: NEG
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: PUSH
60927: LD_INT 2
60929: NEG
60930: PUSH
60931: LD_INT 2
60933: NEG
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: PUSH
60939: LD_INT 1
60941: NEG
60942: PUSH
60943: LD_INT 3
60945: NEG
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: LD_INT 1
60953: PUSH
60954: LD_INT 2
60956: NEG
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: PUSH
60962: LD_INT 3
60964: PUSH
60965: LD_INT 2
60967: PUSH
60968: EMPTY
60969: LIST
60970: LIST
60971: PUSH
60972: LD_INT 2
60974: PUSH
60975: LD_INT 3
60977: PUSH
60978: EMPTY
60979: LIST
60980: LIST
60981: PUSH
60982: LD_INT 2
60984: NEG
60985: PUSH
60986: LD_INT 1
60988: PUSH
60989: EMPTY
60990: LIST
60991: LIST
60992: PUSH
60993: LD_INT 3
60995: NEG
60996: PUSH
60997: LD_INT 1
60999: NEG
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: LIST
61009: LIST
61010: LIST
61011: LIST
61012: LIST
61013: LIST
61014: LIST
61015: LIST
61016: LIST
61017: LIST
61018: LIST
61019: LIST
61020: LIST
61021: LIST
61022: LIST
61023: LIST
61024: LIST
61025: LIST
61026: LIST
61027: LIST
61028: LIST
61029: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61030: LD_ADDR_VAR 0 35
61034: PUSH
61035: LD_INT 0
61037: PUSH
61038: LD_INT 0
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: PUSH
61045: LD_INT 0
61047: PUSH
61048: LD_INT 1
61050: NEG
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: PUSH
61056: LD_INT 1
61058: PUSH
61059: LD_INT 0
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: PUSH
61066: LD_INT 1
61068: PUSH
61069: LD_INT 1
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: PUSH
61076: LD_INT 0
61078: PUSH
61079: LD_INT 1
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: PUSH
61086: LD_INT 1
61088: NEG
61089: PUSH
61090: LD_INT 0
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 1
61099: NEG
61100: PUSH
61101: LD_INT 1
61103: NEG
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_INT 2
61111: PUSH
61112: LD_INT 1
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: PUSH
61119: LD_INT 2
61121: NEG
61122: PUSH
61123: LD_INT 1
61125: NEG
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61142: LD_ADDR_VAR 0 36
61146: PUSH
61147: LD_INT 0
61149: PUSH
61150: LD_INT 0
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: LD_INT 0
61159: PUSH
61160: LD_INT 1
61162: NEG
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: LD_INT 1
61170: PUSH
61171: LD_INT 0
61173: PUSH
61174: EMPTY
61175: LIST
61176: LIST
61177: PUSH
61178: LD_INT 1
61180: PUSH
61181: LD_INT 1
61183: PUSH
61184: EMPTY
61185: LIST
61186: LIST
61187: PUSH
61188: LD_INT 0
61190: PUSH
61191: LD_INT 1
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: PUSH
61198: LD_INT 1
61200: NEG
61201: PUSH
61202: LD_INT 0
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PUSH
61209: LD_INT 1
61211: NEG
61212: PUSH
61213: LD_INT 1
61215: NEG
61216: PUSH
61217: EMPTY
61218: LIST
61219: LIST
61220: PUSH
61221: LD_INT 1
61223: NEG
61224: PUSH
61225: LD_INT 2
61227: NEG
61228: PUSH
61229: EMPTY
61230: LIST
61231: LIST
61232: PUSH
61233: LD_INT 1
61235: PUSH
61236: LD_INT 2
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61254: LD_ADDR_VAR 0 37
61258: PUSH
61259: LD_INT 0
61261: PUSH
61262: LD_INT 0
61264: PUSH
61265: EMPTY
61266: LIST
61267: LIST
61268: PUSH
61269: LD_INT 0
61271: PUSH
61272: LD_INT 1
61274: NEG
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: PUSH
61280: LD_INT 1
61282: PUSH
61283: LD_INT 0
61285: PUSH
61286: EMPTY
61287: LIST
61288: LIST
61289: PUSH
61290: LD_INT 1
61292: PUSH
61293: LD_INT 1
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PUSH
61300: LD_INT 0
61302: PUSH
61303: LD_INT 1
61305: PUSH
61306: EMPTY
61307: LIST
61308: LIST
61309: PUSH
61310: LD_INT 1
61312: NEG
61313: PUSH
61314: LD_INT 0
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: LD_INT 1
61323: NEG
61324: PUSH
61325: LD_INT 1
61327: NEG
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: PUSH
61333: LD_INT 1
61335: PUSH
61336: LD_INT 1
61338: NEG
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: LD_INT 1
61346: NEG
61347: PUSH
61348: LD_INT 1
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: PUSH
61355: EMPTY
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: LIST
61361: LIST
61362: LIST
61363: LIST
61364: LIST
61365: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61366: LD_ADDR_VAR 0 38
61370: PUSH
61371: LD_INT 0
61373: PUSH
61374: LD_INT 0
61376: PUSH
61377: EMPTY
61378: LIST
61379: LIST
61380: PUSH
61381: LD_INT 0
61383: PUSH
61384: LD_INT 1
61386: NEG
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: PUSH
61392: LD_INT 1
61394: PUSH
61395: LD_INT 0
61397: PUSH
61398: EMPTY
61399: LIST
61400: LIST
61401: PUSH
61402: LD_INT 1
61404: PUSH
61405: LD_INT 1
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: PUSH
61412: LD_INT 0
61414: PUSH
61415: LD_INT 1
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: PUSH
61422: LD_INT 1
61424: NEG
61425: PUSH
61426: LD_INT 0
61428: PUSH
61429: EMPTY
61430: LIST
61431: LIST
61432: PUSH
61433: LD_INT 1
61435: NEG
61436: PUSH
61437: LD_INT 1
61439: NEG
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: PUSH
61445: LD_INT 2
61447: PUSH
61448: LD_INT 1
61450: PUSH
61451: EMPTY
61452: LIST
61453: LIST
61454: PUSH
61455: LD_INT 2
61457: NEG
61458: PUSH
61459: LD_INT 1
61461: NEG
61462: PUSH
61463: EMPTY
61464: LIST
61465: LIST
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: LIST
61471: LIST
61472: LIST
61473: LIST
61474: LIST
61475: LIST
61476: LIST
61477: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61478: LD_ADDR_VAR 0 39
61482: PUSH
61483: LD_INT 0
61485: PUSH
61486: LD_INT 0
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: PUSH
61493: LD_INT 0
61495: PUSH
61496: LD_INT 1
61498: NEG
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PUSH
61504: LD_INT 1
61506: PUSH
61507: LD_INT 0
61509: PUSH
61510: EMPTY
61511: LIST
61512: LIST
61513: PUSH
61514: LD_INT 1
61516: PUSH
61517: LD_INT 1
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PUSH
61524: LD_INT 0
61526: PUSH
61527: LD_INT 1
61529: PUSH
61530: EMPTY
61531: LIST
61532: LIST
61533: PUSH
61534: LD_INT 1
61536: NEG
61537: PUSH
61538: LD_INT 0
61540: PUSH
61541: EMPTY
61542: LIST
61543: LIST
61544: PUSH
61545: LD_INT 1
61547: NEG
61548: PUSH
61549: LD_INT 1
61551: NEG
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: PUSH
61557: LD_INT 1
61559: NEG
61560: PUSH
61561: LD_INT 2
61563: NEG
61564: PUSH
61565: EMPTY
61566: LIST
61567: LIST
61568: PUSH
61569: LD_INT 1
61571: PUSH
61572: LD_INT 2
61574: PUSH
61575: EMPTY
61576: LIST
61577: LIST
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: LIST
61583: LIST
61584: LIST
61585: LIST
61586: LIST
61587: LIST
61588: LIST
61589: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61590: LD_ADDR_VAR 0 40
61594: PUSH
61595: LD_INT 0
61597: PUSH
61598: LD_INT 0
61600: PUSH
61601: EMPTY
61602: LIST
61603: LIST
61604: PUSH
61605: LD_INT 0
61607: PUSH
61608: LD_INT 1
61610: NEG
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: PUSH
61616: LD_INT 1
61618: PUSH
61619: LD_INT 0
61621: PUSH
61622: EMPTY
61623: LIST
61624: LIST
61625: PUSH
61626: LD_INT 1
61628: PUSH
61629: LD_INT 1
61631: PUSH
61632: EMPTY
61633: LIST
61634: LIST
61635: PUSH
61636: LD_INT 0
61638: PUSH
61639: LD_INT 1
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: PUSH
61646: LD_INT 1
61648: NEG
61649: PUSH
61650: LD_INT 0
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: PUSH
61657: LD_INT 1
61659: NEG
61660: PUSH
61661: LD_INT 1
61663: NEG
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: PUSH
61669: LD_INT 1
61671: PUSH
61672: LD_INT 1
61674: NEG
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: PUSH
61680: LD_INT 1
61682: NEG
61683: PUSH
61684: LD_INT 1
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: PUSH
61691: EMPTY
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61702: LD_ADDR_VAR 0 41
61706: PUSH
61707: LD_INT 0
61709: PUSH
61710: LD_INT 0
61712: PUSH
61713: EMPTY
61714: LIST
61715: LIST
61716: PUSH
61717: LD_INT 0
61719: PUSH
61720: LD_INT 1
61722: NEG
61723: PUSH
61724: EMPTY
61725: LIST
61726: LIST
61727: PUSH
61728: LD_INT 1
61730: PUSH
61731: LD_INT 0
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: PUSH
61738: LD_INT 1
61740: PUSH
61741: LD_INT 1
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: PUSH
61748: LD_INT 0
61750: PUSH
61751: LD_INT 1
61753: PUSH
61754: EMPTY
61755: LIST
61756: LIST
61757: PUSH
61758: LD_INT 1
61760: NEG
61761: PUSH
61762: LD_INT 0
61764: PUSH
61765: EMPTY
61766: LIST
61767: LIST
61768: PUSH
61769: LD_INT 1
61771: NEG
61772: PUSH
61773: LD_INT 1
61775: NEG
61776: PUSH
61777: EMPTY
61778: LIST
61779: LIST
61780: PUSH
61781: LD_INT 1
61783: NEG
61784: PUSH
61785: LD_INT 2
61787: NEG
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: PUSH
61793: LD_INT 1
61795: PUSH
61796: LD_INT 1
61798: NEG
61799: PUSH
61800: EMPTY
61801: LIST
61802: LIST
61803: PUSH
61804: LD_INT 2
61806: PUSH
61807: LD_INT 0
61809: PUSH
61810: EMPTY
61811: LIST
61812: LIST
61813: PUSH
61814: LD_INT 2
61816: PUSH
61817: LD_INT 1
61819: PUSH
61820: EMPTY
61821: LIST
61822: LIST
61823: PUSH
61824: LD_INT 2
61826: PUSH
61827: LD_INT 2
61829: PUSH
61830: EMPTY
61831: LIST
61832: LIST
61833: PUSH
61834: LD_INT 1
61836: PUSH
61837: LD_INT 2
61839: PUSH
61840: EMPTY
61841: LIST
61842: LIST
61843: PUSH
61844: LD_INT 1
61846: NEG
61847: PUSH
61848: LD_INT 1
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: PUSH
61855: LD_INT 2
61857: NEG
61858: PUSH
61859: LD_INT 0
61861: PUSH
61862: EMPTY
61863: LIST
61864: LIST
61865: PUSH
61866: LD_INT 2
61868: NEG
61869: PUSH
61870: LD_INT 1
61872: NEG
61873: PUSH
61874: EMPTY
61875: LIST
61876: LIST
61877: PUSH
61878: LD_INT 2
61880: NEG
61881: PUSH
61882: LD_INT 2
61884: NEG
61885: PUSH
61886: EMPTY
61887: LIST
61888: LIST
61889: PUSH
61890: LD_INT 2
61892: NEG
61893: PUSH
61894: LD_INT 3
61896: NEG
61897: PUSH
61898: EMPTY
61899: LIST
61900: LIST
61901: PUSH
61902: LD_INT 2
61904: PUSH
61905: LD_INT 1
61907: NEG
61908: PUSH
61909: EMPTY
61910: LIST
61911: LIST
61912: PUSH
61913: LD_INT 3
61915: PUSH
61916: LD_INT 0
61918: PUSH
61919: EMPTY
61920: LIST
61921: LIST
61922: PUSH
61923: LD_INT 3
61925: PUSH
61926: LD_INT 1
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: PUSH
61933: LD_INT 3
61935: PUSH
61936: LD_INT 2
61938: PUSH
61939: EMPTY
61940: LIST
61941: LIST
61942: PUSH
61943: LD_INT 3
61945: PUSH
61946: LD_INT 3
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PUSH
61953: LD_INT 2
61955: PUSH
61956: LD_INT 3
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: PUSH
61963: LD_INT 2
61965: NEG
61966: PUSH
61967: LD_INT 1
61969: PUSH
61970: EMPTY
61971: LIST
61972: LIST
61973: PUSH
61974: LD_INT 3
61976: NEG
61977: PUSH
61978: LD_INT 0
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: PUSH
61985: LD_INT 3
61987: NEG
61988: PUSH
61989: LD_INT 1
61991: NEG
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: PUSH
61997: LD_INT 3
61999: NEG
62000: PUSH
62001: LD_INT 2
62003: NEG
62004: PUSH
62005: EMPTY
62006: LIST
62007: LIST
62008: PUSH
62009: LD_INT 3
62011: NEG
62012: PUSH
62013: LD_INT 3
62015: NEG
62016: PUSH
62017: EMPTY
62018: LIST
62019: LIST
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: LIST
62025: LIST
62026: LIST
62027: LIST
62028: LIST
62029: LIST
62030: LIST
62031: LIST
62032: LIST
62033: LIST
62034: LIST
62035: LIST
62036: LIST
62037: LIST
62038: LIST
62039: LIST
62040: LIST
62041: LIST
62042: LIST
62043: LIST
62044: LIST
62045: LIST
62046: LIST
62047: LIST
62048: LIST
62049: LIST
62050: LIST
62051: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62052: LD_ADDR_VAR 0 42
62056: PUSH
62057: LD_INT 0
62059: PUSH
62060: LD_INT 0
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PUSH
62067: LD_INT 0
62069: PUSH
62070: LD_INT 1
62072: NEG
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: PUSH
62078: LD_INT 1
62080: PUSH
62081: LD_INT 0
62083: PUSH
62084: EMPTY
62085: LIST
62086: LIST
62087: PUSH
62088: LD_INT 1
62090: PUSH
62091: LD_INT 1
62093: PUSH
62094: EMPTY
62095: LIST
62096: LIST
62097: PUSH
62098: LD_INT 0
62100: PUSH
62101: LD_INT 1
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: PUSH
62108: LD_INT 1
62110: NEG
62111: PUSH
62112: LD_INT 0
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: PUSH
62119: LD_INT 1
62121: NEG
62122: PUSH
62123: LD_INT 1
62125: NEG
62126: PUSH
62127: EMPTY
62128: LIST
62129: LIST
62130: PUSH
62131: LD_INT 1
62133: NEG
62134: PUSH
62135: LD_INT 2
62137: NEG
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: PUSH
62143: LD_INT 0
62145: PUSH
62146: LD_INT 2
62148: NEG
62149: PUSH
62150: EMPTY
62151: LIST
62152: LIST
62153: PUSH
62154: LD_INT 1
62156: PUSH
62157: LD_INT 1
62159: NEG
62160: PUSH
62161: EMPTY
62162: LIST
62163: LIST
62164: PUSH
62165: LD_INT 2
62167: PUSH
62168: LD_INT 1
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: PUSH
62175: LD_INT 2
62177: PUSH
62178: LD_INT 2
62180: PUSH
62181: EMPTY
62182: LIST
62183: LIST
62184: PUSH
62185: LD_INT 1
62187: PUSH
62188: LD_INT 2
62190: PUSH
62191: EMPTY
62192: LIST
62193: LIST
62194: PUSH
62195: LD_INT 0
62197: PUSH
62198: LD_INT 2
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: PUSH
62205: LD_INT 1
62207: NEG
62208: PUSH
62209: LD_INT 1
62211: PUSH
62212: EMPTY
62213: LIST
62214: LIST
62215: PUSH
62216: LD_INT 2
62218: NEG
62219: PUSH
62220: LD_INT 1
62222: NEG
62223: PUSH
62224: EMPTY
62225: LIST
62226: LIST
62227: PUSH
62228: LD_INT 2
62230: NEG
62231: PUSH
62232: LD_INT 2
62234: NEG
62235: PUSH
62236: EMPTY
62237: LIST
62238: LIST
62239: PUSH
62240: LD_INT 2
62242: NEG
62243: PUSH
62244: LD_INT 3
62246: NEG
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: PUSH
62252: LD_INT 1
62254: NEG
62255: PUSH
62256: LD_INT 3
62258: NEG
62259: PUSH
62260: EMPTY
62261: LIST
62262: LIST
62263: PUSH
62264: LD_INT 0
62266: PUSH
62267: LD_INT 3
62269: NEG
62270: PUSH
62271: EMPTY
62272: LIST
62273: LIST
62274: PUSH
62275: LD_INT 1
62277: PUSH
62278: LD_INT 2
62280: NEG
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: PUSH
62286: LD_INT 3
62288: PUSH
62289: LD_INT 2
62291: PUSH
62292: EMPTY
62293: LIST
62294: LIST
62295: PUSH
62296: LD_INT 3
62298: PUSH
62299: LD_INT 3
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: PUSH
62306: LD_INT 2
62308: PUSH
62309: LD_INT 3
62311: PUSH
62312: EMPTY
62313: LIST
62314: LIST
62315: PUSH
62316: LD_INT 1
62318: PUSH
62319: LD_INT 3
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: PUSH
62326: LD_INT 0
62328: PUSH
62329: LD_INT 3
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: PUSH
62336: LD_INT 1
62338: NEG
62339: PUSH
62340: LD_INT 2
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: PUSH
62347: LD_INT 3
62349: NEG
62350: PUSH
62351: LD_INT 2
62353: NEG
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: PUSH
62359: LD_INT 3
62361: NEG
62362: PUSH
62363: LD_INT 3
62365: NEG
62366: PUSH
62367: EMPTY
62368: LIST
62369: LIST
62370: PUSH
62371: EMPTY
62372: LIST
62373: LIST
62374: LIST
62375: LIST
62376: LIST
62377: LIST
62378: LIST
62379: LIST
62380: LIST
62381: LIST
62382: LIST
62383: LIST
62384: LIST
62385: LIST
62386: LIST
62387: LIST
62388: LIST
62389: LIST
62390: LIST
62391: LIST
62392: LIST
62393: LIST
62394: LIST
62395: LIST
62396: LIST
62397: LIST
62398: LIST
62399: LIST
62400: LIST
62401: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62402: LD_ADDR_VAR 0 43
62406: PUSH
62407: LD_INT 0
62409: PUSH
62410: LD_INT 0
62412: PUSH
62413: EMPTY
62414: LIST
62415: LIST
62416: PUSH
62417: LD_INT 0
62419: PUSH
62420: LD_INT 1
62422: NEG
62423: PUSH
62424: EMPTY
62425: LIST
62426: LIST
62427: PUSH
62428: LD_INT 1
62430: PUSH
62431: LD_INT 0
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: PUSH
62438: LD_INT 1
62440: PUSH
62441: LD_INT 1
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: PUSH
62448: LD_INT 0
62450: PUSH
62451: LD_INT 1
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: PUSH
62458: LD_INT 1
62460: NEG
62461: PUSH
62462: LD_INT 0
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: LD_INT 1
62471: NEG
62472: PUSH
62473: LD_INT 1
62475: NEG
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: PUSH
62481: LD_INT 1
62483: NEG
62484: PUSH
62485: LD_INT 2
62487: NEG
62488: PUSH
62489: EMPTY
62490: LIST
62491: LIST
62492: PUSH
62493: LD_INT 0
62495: PUSH
62496: LD_INT 2
62498: NEG
62499: PUSH
62500: EMPTY
62501: LIST
62502: LIST
62503: PUSH
62504: LD_INT 1
62506: PUSH
62507: LD_INT 1
62509: NEG
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: PUSH
62515: LD_INT 2
62517: PUSH
62518: LD_INT 0
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: PUSH
62525: LD_INT 2
62527: PUSH
62528: LD_INT 1
62530: PUSH
62531: EMPTY
62532: LIST
62533: LIST
62534: PUSH
62535: LD_INT 1
62537: PUSH
62538: LD_INT 2
62540: PUSH
62541: EMPTY
62542: LIST
62543: LIST
62544: PUSH
62545: LD_INT 0
62547: PUSH
62548: LD_INT 2
62550: PUSH
62551: EMPTY
62552: LIST
62553: LIST
62554: PUSH
62555: LD_INT 1
62557: NEG
62558: PUSH
62559: LD_INT 1
62561: PUSH
62562: EMPTY
62563: LIST
62564: LIST
62565: PUSH
62566: LD_INT 2
62568: NEG
62569: PUSH
62570: LD_INT 0
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: LD_INT 2
62579: NEG
62580: PUSH
62581: LD_INT 1
62583: NEG
62584: PUSH
62585: EMPTY
62586: LIST
62587: LIST
62588: PUSH
62589: LD_INT 1
62591: NEG
62592: PUSH
62593: LD_INT 3
62595: NEG
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: PUSH
62601: LD_INT 0
62603: PUSH
62604: LD_INT 3
62606: NEG
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: PUSH
62612: LD_INT 1
62614: PUSH
62615: LD_INT 2
62617: NEG
62618: PUSH
62619: EMPTY
62620: LIST
62621: LIST
62622: PUSH
62623: LD_INT 2
62625: PUSH
62626: LD_INT 1
62628: NEG
62629: PUSH
62630: EMPTY
62631: LIST
62632: LIST
62633: PUSH
62634: LD_INT 3
62636: PUSH
62637: LD_INT 0
62639: PUSH
62640: EMPTY
62641: LIST
62642: LIST
62643: PUSH
62644: LD_INT 3
62646: PUSH
62647: LD_INT 1
62649: PUSH
62650: EMPTY
62651: LIST
62652: LIST
62653: PUSH
62654: LD_INT 1
62656: PUSH
62657: LD_INT 3
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: PUSH
62664: LD_INT 0
62666: PUSH
62667: LD_INT 3
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: PUSH
62674: LD_INT 1
62676: NEG
62677: PUSH
62678: LD_INT 2
62680: PUSH
62681: EMPTY
62682: LIST
62683: LIST
62684: PUSH
62685: LD_INT 2
62687: NEG
62688: PUSH
62689: LD_INT 1
62691: PUSH
62692: EMPTY
62693: LIST
62694: LIST
62695: PUSH
62696: LD_INT 3
62698: NEG
62699: PUSH
62700: LD_INT 0
62702: PUSH
62703: EMPTY
62704: LIST
62705: LIST
62706: PUSH
62707: LD_INT 3
62709: NEG
62710: PUSH
62711: LD_INT 1
62713: NEG
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: LIST
62723: LIST
62724: LIST
62725: LIST
62726: LIST
62727: LIST
62728: LIST
62729: LIST
62730: LIST
62731: LIST
62732: LIST
62733: LIST
62734: LIST
62735: LIST
62736: LIST
62737: LIST
62738: LIST
62739: LIST
62740: LIST
62741: LIST
62742: LIST
62743: LIST
62744: LIST
62745: LIST
62746: LIST
62747: LIST
62748: LIST
62749: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62750: LD_ADDR_VAR 0 44
62754: PUSH
62755: LD_INT 0
62757: PUSH
62758: LD_INT 0
62760: PUSH
62761: EMPTY
62762: LIST
62763: LIST
62764: PUSH
62765: LD_INT 0
62767: PUSH
62768: LD_INT 1
62770: NEG
62771: PUSH
62772: EMPTY
62773: LIST
62774: LIST
62775: PUSH
62776: LD_INT 1
62778: PUSH
62779: LD_INT 0
62781: PUSH
62782: EMPTY
62783: LIST
62784: LIST
62785: PUSH
62786: LD_INT 1
62788: PUSH
62789: LD_INT 1
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: PUSH
62796: LD_INT 0
62798: PUSH
62799: LD_INT 1
62801: PUSH
62802: EMPTY
62803: LIST
62804: LIST
62805: PUSH
62806: LD_INT 1
62808: NEG
62809: PUSH
62810: LD_INT 0
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: PUSH
62817: LD_INT 1
62819: NEG
62820: PUSH
62821: LD_INT 1
62823: NEG
62824: PUSH
62825: EMPTY
62826: LIST
62827: LIST
62828: PUSH
62829: LD_INT 1
62831: NEG
62832: PUSH
62833: LD_INT 2
62835: NEG
62836: PUSH
62837: EMPTY
62838: LIST
62839: LIST
62840: PUSH
62841: LD_INT 1
62843: PUSH
62844: LD_INT 1
62846: NEG
62847: PUSH
62848: EMPTY
62849: LIST
62850: LIST
62851: PUSH
62852: LD_INT 2
62854: PUSH
62855: LD_INT 0
62857: PUSH
62858: EMPTY
62859: LIST
62860: LIST
62861: PUSH
62862: LD_INT 2
62864: PUSH
62865: LD_INT 1
62867: PUSH
62868: EMPTY
62869: LIST
62870: LIST
62871: PUSH
62872: LD_INT 2
62874: PUSH
62875: LD_INT 2
62877: PUSH
62878: EMPTY
62879: LIST
62880: LIST
62881: PUSH
62882: LD_INT 1
62884: PUSH
62885: LD_INT 2
62887: PUSH
62888: EMPTY
62889: LIST
62890: LIST
62891: PUSH
62892: LD_INT 1
62894: NEG
62895: PUSH
62896: LD_INT 1
62898: PUSH
62899: EMPTY
62900: LIST
62901: LIST
62902: PUSH
62903: LD_INT 2
62905: NEG
62906: PUSH
62907: LD_INT 0
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: PUSH
62914: LD_INT 2
62916: NEG
62917: PUSH
62918: LD_INT 1
62920: NEG
62921: PUSH
62922: EMPTY
62923: LIST
62924: LIST
62925: PUSH
62926: LD_INT 2
62928: NEG
62929: PUSH
62930: LD_INT 2
62932: NEG
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: PUSH
62938: LD_INT 2
62940: NEG
62941: PUSH
62942: LD_INT 3
62944: NEG
62945: PUSH
62946: EMPTY
62947: LIST
62948: LIST
62949: PUSH
62950: LD_INT 2
62952: PUSH
62953: LD_INT 1
62955: NEG
62956: PUSH
62957: EMPTY
62958: LIST
62959: LIST
62960: PUSH
62961: LD_INT 3
62963: PUSH
62964: LD_INT 0
62966: PUSH
62967: EMPTY
62968: LIST
62969: LIST
62970: PUSH
62971: LD_INT 3
62973: PUSH
62974: LD_INT 1
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: PUSH
62981: LD_INT 3
62983: PUSH
62984: LD_INT 2
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: PUSH
62991: LD_INT 3
62993: PUSH
62994: LD_INT 3
62996: PUSH
62997: EMPTY
62998: LIST
62999: LIST
63000: PUSH
63001: LD_INT 2
63003: PUSH
63004: LD_INT 3
63006: PUSH
63007: EMPTY
63008: LIST
63009: LIST
63010: PUSH
63011: LD_INT 2
63013: NEG
63014: PUSH
63015: LD_INT 1
63017: PUSH
63018: EMPTY
63019: LIST
63020: LIST
63021: PUSH
63022: LD_INT 3
63024: NEG
63025: PUSH
63026: LD_INT 0
63028: PUSH
63029: EMPTY
63030: LIST
63031: LIST
63032: PUSH
63033: LD_INT 3
63035: NEG
63036: PUSH
63037: LD_INT 1
63039: NEG
63040: PUSH
63041: EMPTY
63042: LIST
63043: LIST
63044: PUSH
63045: LD_INT 3
63047: NEG
63048: PUSH
63049: LD_INT 2
63051: NEG
63052: PUSH
63053: EMPTY
63054: LIST
63055: LIST
63056: PUSH
63057: LD_INT 3
63059: NEG
63060: PUSH
63061: LD_INT 3
63063: NEG
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: PUSH
63069: EMPTY
63070: LIST
63071: LIST
63072: LIST
63073: LIST
63074: LIST
63075: LIST
63076: LIST
63077: LIST
63078: LIST
63079: LIST
63080: LIST
63081: LIST
63082: LIST
63083: LIST
63084: LIST
63085: LIST
63086: LIST
63087: LIST
63088: LIST
63089: LIST
63090: LIST
63091: LIST
63092: LIST
63093: LIST
63094: LIST
63095: LIST
63096: LIST
63097: LIST
63098: LIST
63099: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63100: LD_ADDR_VAR 0 45
63104: PUSH
63105: LD_INT 0
63107: PUSH
63108: LD_INT 0
63110: PUSH
63111: EMPTY
63112: LIST
63113: LIST
63114: PUSH
63115: LD_INT 0
63117: PUSH
63118: LD_INT 1
63120: NEG
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: PUSH
63126: LD_INT 1
63128: PUSH
63129: LD_INT 0
63131: PUSH
63132: EMPTY
63133: LIST
63134: LIST
63135: PUSH
63136: LD_INT 1
63138: PUSH
63139: LD_INT 1
63141: PUSH
63142: EMPTY
63143: LIST
63144: LIST
63145: PUSH
63146: LD_INT 0
63148: PUSH
63149: LD_INT 1
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: PUSH
63156: LD_INT 1
63158: NEG
63159: PUSH
63160: LD_INT 0
63162: PUSH
63163: EMPTY
63164: LIST
63165: LIST
63166: PUSH
63167: LD_INT 1
63169: NEG
63170: PUSH
63171: LD_INT 1
63173: NEG
63174: PUSH
63175: EMPTY
63176: LIST
63177: LIST
63178: PUSH
63179: LD_INT 1
63181: NEG
63182: PUSH
63183: LD_INT 2
63185: NEG
63186: PUSH
63187: EMPTY
63188: LIST
63189: LIST
63190: PUSH
63191: LD_INT 0
63193: PUSH
63194: LD_INT 2
63196: NEG
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: PUSH
63202: LD_INT 1
63204: PUSH
63205: LD_INT 1
63207: NEG
63208: PUSH
63209: EMPTY
63210: LIST
63211: LIST
63212: PUSH
63213: LD_INT 2
63215: PUSH
63216: LD_INT 1
63218: PUSH
63219: EMPTY
63220: LIST
63221: LIST
63222: PUSH
63223: LD_INT 2
63225: PUSH
63226: LD_INT 2
63228: PUSH
63229: EMPTY
63230: LIST
63231: LIST
63232: PUSH
63233: LD_INT 1
63235: PUSH
63236: LD_INT 2
63238: PUSH
63239: EMPTY
63240: LIST
63241: LIST
63242: PUSH
63243: LD_INT 0
63245: PUSH
63246: LD_INT 2
63248: PUSH
63249: EMPTY
63250: LIST
63251: LIST
63252: PUSH
63253: LD_INT 1
63255: NEG
63256: PUSH
63257: LD_INT 1
63259: PUSH
63260: EMPTY
63261: LIST
63262: LIST
63263: PUSH
63264: LD_INT 2
63266: NEG
63267: PUSH
63268: LD_INT 1
63270: NEG
63271: PUSH
63272: EMPTY
63273: LIST
63274: LIST
63275: PUSH
63276: LD_INT 2
63278: NEG
63279: PUSH
63280: LD_INT 2
63282: NEG
63283: PUSH
63284: EMPTY
63285: LIST
63286: LIST
63287: PUSH
63288: LD_INT 2
63290: NEG
63291: PUSH
63292: LD_INT 3
63294: NEG
63295: PUSH
63296: EMPTY
63297: LIST
63298: LIST
63299: PUSH
63300: LD_INT 1
63302: NEG
63303: PUSH
63304: LD_INT 3
63306: NEG
63307: PUSH
63308: EMPTY
63309: LIST
63310: LIST
63311: PUSH
63312: LD_INT 0
63314: PUSH
63315: LD_INT 3
63317: NEG
63318: PUSH
63319: EMPTY
63320: LIST
63321: LIST
63322: PUSH
63323: LD_INT 1
63325: PUSH
63326: LD_INT 2
63328: NEG
63329: PUSH
63330: EMPTY
63331: LIST
63332: LIST
63333: PUSH
63334: LD_INT 3
63336: PUSH
63337: LD_INT 2
63339: PUSH
63340: EMPTY
63341: LIST
63342: LIST
63343: PUSH
63344: LD_INT 3
63346: PUSH
63347: LD_INT 3
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: PUSH
63354: LD_INT 2
63356: PUSH
63357: LD_INT 3
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: PUSH
63364: LD_INT 1
63366: PUSH
63367: LD_INT 3
63369: PUSH
63370: EMPTY
63371: LIST
63372: LIST
63373: PUSH
63374: LD_INT 0
63376: PUSH
63377: LD_INT 3
63379: PUSH
63380: EMPTY
63381: LIST
63382: LIST
63383: PUSH
63384: LD_INT 1
63386: NEG
63387: PUSH
63388: LD_INT 2
63390: PUSH
63391: EMPTY
63392: LIST
63393: LIST
63394: PUSH
63395: LD_INT 3
63397: NEG
63398: PUSH
63399: LD_INT 2
63401: NEG
63402: PUSH
63403: EMPTY
63404: LIST
63405: LIST
63406: PUSH
63407: LD_INT 3
63409: NEG
63410: PUSH
63411: LD_INT 3
63413: NEG
63414: PUSH
63415: EMPTY
63416: LIST
63417: LIST
63418: PUSH
63419: EMPTY
63420: LIST
63421: LIST
63422: LIST
63423: LIST
63424: LIST
63425: LIST
63426: LIST
63427: LIST
63428: LIST
63429: LIST
63430: LIST
63431: LIST
63432: LIST
63433: LIST
63434: LIST
63435: LIST
63436: LIST
63437: LIST
63438: LIST
63439: LIST
63440: LIST
63441: LIST
63442: LIST
63443: LIST
63444: LIST
63445: LIST
63446: LIST
63447: LIST
63448: LIST
63449: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63450: LD_ADDR_VAR 0 46
63454: PUSH
63455: LD_INT 0
63457: PUSH
63458: LD_INT 0
63460: PUSH
63461: EMPTY
63462: LIST
63463: LIST
63464: PUSH
63465: LD_INT 0
63467: PUSH
63468: LD_INT 1
63470: NEG
63471: PUSH
63472: EMPTY
63473: LIST
63474: LIST
63475: PUSH
63476: LD_INT 1
63478: PUSH
63479: LD_INT 0
63481: PUSH
63482: EMPTY
63483: LIST
63484: LIST
63485: PUSH
63486: LD_INT 1
63488: PUSH
63489: LD_INT 1
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: PUSH
63496: LD_INT 0
63498: PUSH
63499: LD_INT 1
63501: PUSH
63502: EMPTY
63503: LIST
63504: LIST
63505: PUSH
63506: LD_INT 1
63508: NEG
63509: PUSH
63510: LD_INT 0
63512: PUSH
63513: EMPTY
63514: LIST
63515: LIST
63516: PUSH
63517: LD_INT 1
63519: NEG
63520: PUSH
63521: LD_INT 1
63523: NEG
63524: PUSH
63525: EMPTY
63526: LIST
63527: LIST
63528: PUSH
63529: LD_INT 1
63531: NEG
63532: PUSH
63533: LD_INT 2
63535: NEG
63536: PUSH
63537: EMPTY
63538: LIST
63539: LIST
63540: PUSH
63541: LD_INT 0
63543: PUSH
63544: LD_INT 2
63546: NEG
63547: PUSH
63548: EMPTY
63549: LIST
63550: LIST
63551: PUSH
63552: LD_INT 1
63554: PUSH
63555: LD_INT 1
63557: NEG
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: PUSH
63563: LD_INT 2
63565: PUSH
63566: LD_INT 0
63568: PUSH
63569: EMPTY
63570: LIST
63571: LIST
63572: PUSH
63573: LD_INT 2
63575: PUSH
63576: LD_INT 1
63578: PUSH
63579: EMPTY
63580: LIST
63581: LIST
63582: PUSH
63583: LD_INT 1
63585: PUSH
63586: LD_INT 2
63588: PUSH
63589: EMPTY
63590: LIST
63591: LIST
63592: PUSH
63593: LD_INT 0
63595: PUSH
63596: LD_INT 2
63598: PUSH
63599: EMPTY
63600: LIST
63601: LIST
63602: PUSH
63603: LD_INT 1
63605: NEG
63606: PUSH
63607: LD_INT 1
63609: PUSH
63610: EMPTY
63611: LIST
63612: LIST
63613: PUSH
63614: LD_INT 2
63616: NEG
63617: PUSH
63618: LD_INT 0
63620: PUSH
63621: EMPTY
63622: LIST
63623: LIST
63624: PUSH
63625: LD_INT 2
63627: NEG
63628: PUSH
63629: LD_INT 1
63631: NEG
63632: PUSH
63633: EMPTY
63634: LIST
63635: LIST
63636: PUSH
63637: LD_INT 1
63639: NEG
63640: PUSH
63641: LD_INT 3
63643: NEG
63644: PUSH
63645: EMPTY
63646: LIST
63647: LIST
63648: PUSH
63649: LD_INT 0
63651: PUSH
63652: LD_INT 3
63654: NEG
63655: PUSH
63656: EMPTY
63657: LIST
63658: LIST
63659: PUSH
63660: LD_INT 1
63662: PUSH
63663: LD_INT 2
63665: NEG
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: PUSH
63671: LD_INT 2
63673: PUSH
63674: LD_INT 1
63676: NEG
63677: PUSH
63678: EMPTY
63679: LIST
63680: LIST
63681: PUSH
63682: LD_INT 3
63684: PUSH
63685: LD_INT 0
63687: PUSH
63688: EMPTY
63689: LIST
63690: LIST
63691: PUSH
63692: LD_INT 3
63694: PUSH
63695: LD_INT 1
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: PUSH
63702: LD_INT 1
63704: PUSH
63705: LD_INT 3
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: PUSH
63712: LD_INT 0
63714: PUSH
63715: LD_INT 3
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: PUSH
63722: LD_INT 1
63724: NEG
63725: PUSH
63726: LD_INT 2
63728: PUSH
63729: EMPTY
63730: LIST
63731: LIST
63732: PUSH
63733: LD_INT 2
63735: NEG
63736: PUSH
63737: LD_INT 1
63739: PUSH
63740: EMPTY
63741: LIST
63742: LIST
63743: PUSH
63744: LD_INT 3
63746: NEG
63747: PUSH
63748: LD_INT 0
63750: PUSH
63751: EMPTY
63752: LIST
63753: LIST
63754: PUSH
63755: LD_INT 3
63757: NEG
63758: PUSH
63759: LD_INT 1
63761: NEG
63762: PUSH
63763: EMPTY
63764: LIST
63765: LIST
63766: PUSH
63767: EMPTY
63768: LIST
63769: LIST
63770: LIST
63771: LIST
63772: LIST
63773: LIST
63774: LIST
63775: LIST
63776: LIST
63777: LIST
63778: LIST
63779: LIST
63780: LIST
63781: LIST
63782: LIST
63783: LIST
63784: LIST
63785: LIST
63786: LIST
63787: LIST
63788: LIST
63789: LIST
63790: LIST
63791: LIST
63792: LIST
63793: LIST
63794: LIST
63795: LIST
63796: LIST
63797: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63798: LD_ADDR_VAR 0 47
63802: PUSH
63803: LD_INT 0
63805: PUSH
63806: LD_INT 0
63808: PUSH
63809: EMPTY
63810: LIST
63811: LIST
63812: PUSH
63813: LD_INT 0
63815: PUSH
63816: LD_INT 1
63818: NEG
63819: PUSH
63820: EMPTY
63821: LIST
63822: LIST
63823: PUSH
63824: LD_INT 1
63826: PUSH
63827: LD_INT 0
63829: PUSH
63830: EMPTY
63831: LIST
63832: LIST
63833: PUSH
63834: LD_INT 1
63836: PUSH
63837: LD_INT 1
63839: PUSH
63840: EMPTY
63841: LIST
63842: LIST
63843: PUSH
63844: LD_INT 0
63846: PUSH
63847: LD_INT 1
63849: PUSH
63850: EMPTY
63851: LIST
63852: LIST
63853: PUSH
63854: LD_INT 1
63856: NEG
63857: PUSH
63858: LD_INT 0
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: PUSH
63865: LD_INT 1
63867: NEG
63868: PUSH
63869: LD_INT 1
63871: NEG
63872: PUSH
63873: EMPTY
63874: LIST
63875: LIST
63876: PUSH
63877: LD_INT 1
63879: NEG
63880: PUSH
63881: LD_INT 2
63883: NEG
63884: PUSH
63885: EMPTY
63886: LIST
63887: LIST
63888: PUSH
63889: LD_INT 0
63891: PUSH
63892: LD_INT 2
63894: NEG
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: PUSH
63900: LD_INT 1
63902: PUSH
63903: LD_INT 1
63905: NEG
63906: PUSH
63907: EMPTY
63908: LIST
63909: LIST
63910: PUSH
63911: LD_INT 2
63913: NEG
63914: PUSH
63915: LD_INT 1
63917: NEG
63918: PUSH
63919: EMPTY
63920: LIST
63921: LIST
63922: PUSH
63923: LD_INT 2
63925: NEG
63926: PUSH
63927: LD_INT 2
63929: NEG
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: PUSH
63935: EMPTY
63936: LIST
63937: LIST
63938: LIST
63939: LIST
63940: LIST
63941: LIST
63942: LIST
63943: LIST
63944: LIST
63945: LIST
63946: LIST
63947: LIST
63948: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63949: LD_ADDR_VAR 0 48
63953: PUSH
63954: LD_INT 0
63956: PUSH
63957: LD_INT 0
63959: PUSH
63960: EMPTY
63961: LIST
63962: LIST
63963: PUSH
63964: LD_INT 0
63966: PUSH
63967: LD_INT 1
63969: NEG
63970: PUSH
63971: EMPTY
63972: LIST
63973: LIST
63974: PUSH
63975: LD_INT 1
63977: PUSH
63978: LD_INT 0
63980: PUSH
63981: EMPTY
63982: LIST
63983: LIST
63984: PUSH
63985: LD_INT 1
63987: PUSH
63988: LD_INT 1
63990: PUSH
63991: EMPTY
63992: LIST
63993: LIST
63994: PUSH
63995: LD_INT 0
63997: PUSH
63998: LD_INT 1
64000: PUSH
64001: EMPTY
64002: LIST
64003: LIST
64004: PUSH
64005: LD_INT 1
64007: NEG
64008: PUSH
64009: LD_INT 0
64011: PUSH
64012: EMPTY
64013: LIST
64014: LIST
64015: PUSH
64016: LD_INT 1
64018: NEG
64019: PUSH
64020: LD_INT 1
64022: NEG
64023: PUSH
64024: EMPTY
64025: LIST
64026: LIST
64027: PUSH
64028: LD_INT 1
64030: NEG
64031: PUSH
64032: LD_INT 2
64034: NEG
64035: PUSH
64036: EMPTY
64037: LIST
64038: LIST
64039: PUSH
64040: LD_INT 0
64042: PUSH
64043: LD_INT 2
64045: NEG
64046: PUSH
64047: EMPTY
64048: LIST
64049: LIST
64050: PUSH
64051: LD_INT 1
64053: PUSH
64054: LD_INT 1
64056: NEG
64057: PUSH
64058: EMPTY
64059: LIST
64060: LIST
64061: PUSH
64062: LD_INT 2
64064: PUSH
64065: LD_INT 0
64067: PUSH
64068: EMPTY
64069: LIST
64070: LIST
64071: PUSH
64072: LD_INT 2
64074: PUSH
64075: LD_INT 1
64077: PUSH
64078: EMPTY
64079: LIST
64080: LIST
64081: PUSH
64082: EMPTY
64083: LIST
64084: LIST
64085: LIST
64086: LIST
64087: LIST
64088: LIST
64089: LIST
64090: LIST
64091: LIST
64092: LIST
64093: LIST
64094: LIST
64095: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64096: LD_ADDR_VAR 0 49
64100: PUSH
64101: LD_INT 0
64103: PUSH
64104: LD_INT 0
64106: PUSH
64107: EMPTY
64108: LIST
64109: LIST
64110: PUSH
64111: LD_INT 0
64113: PUSH
64114: LD_INT 1
64116: NEG
64117: PUSH
64118: EMPTY
64119: LIST
64120: LIST
64121: PUSH
64122: LD_INT 1
64124: PUSH
64125: LD_INT 0
64127: PUSH
64128: EMPTY
64129: LIST
64130: LIST
64131: PUSH
64132: LD_INT 1
64134: PUSH
64135: LD_INT 1
64137: PUSH
64138: EMPTY
64139: LIST
64140: LIST
64141: PUSH
64142: LD_INT 0
64144: PUSH
64145: LD_INT 1
64147: PUSH
64148: EMPTY
64149: LIST
64150: LIST
64151: PUSH
64152: LD_INT 1
64154: NEG
64155: PUSH
64156: LD_INT 0
64158: PUSH
64159: EMPTY
64160: LIST
64161: LIST
64162: PUSH
64163: LD_INT 1
64165: NEG
64166: PUSH
64167: LD_INT 1
64169: NEG
64170: PUSH
64171: EMPTY
64172: LIST
64173: LIST
64174: PUSH
64175: LD_INT 1
64177: PUSH
64178: LD_INT 1
64180: NEG
64181: PUSH
64182: EMPTY
64183: LIST
64184: LIST
64185: PUSH
64186: LD_INT 2
64188: PUSH
64189: LD_INT 0
64191: PUSH
64192: EMPTY
64193: LIST
64194: LIST
64195: PUSH
64196: LD_INT 2
64198: PUSH
64199: LD_INT 1
64201: PUSH
64202: EMPTY
64203: LIST
64204: LIST
64205: PUSH
64206: LD_INT 2
64208: PUSH
64209: LD_INT 2
64211: PUSH
64212: EMPTY
64213: LIST
64214: LIST
64215: PUSH
64216: LD_INT 1
64218: PUSH
64219: LD_INT 2
64221: PUSH
64222: EMPTY
64223: LIST
64224: LIST
64225: PUSH
64226: EMPTY
64227: LIST
64228: LIST
64229: LIST
64230: LIST
64231: LIST
64232: LIST
64233: LIST
64234: LIST
64235: LIST
64236: LIST
64237: LIST
64238: LIST
64239: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64240: LD_ADDR_VAR 0 50
64244: PUSH
64245: LD_INT 0
64247: PUSH
64248: LD_INT 0
64250: PUSH
64251: EMPTY
64252: LIST
64253: LIST
64254: PUSH
64255: LD_INT 0
64257: PUSH
64258: LD_INT 1
64260: NEG
64261: PUSH
64262: EMPTY
64263: LIST
64264: LIST
64265: PUSH
64266: LD_INT 1
64268: PUSH
64269: LD_INT 0
64271: PUSH
64272: EMPTY
64273: LIST
64274: LIST
64275: PUSH
64276: LD_INT 1
64278: PUSH
64279: LD_INT 1
64281: PUSH
64282: EMPTY
64283: LIST
64284: LIST
64285: PUSH
64286: LD_INT 0
64288: PUSH
64289: LD_INT 1
64291: PUSH
64292: EMPTY
64293: LIST
64294: LIST
64295: PUSH
64296: LD_INT 1
64298: NEG
64299: PUSH
64300: LD_INT 0
64302: PUSH
64303: EMPTY
64304: LIST
64305: LIST
64306: PUSH
64307: LD_INT 1
64309: NEG
64310: PUSH
64311: LD_INT 1
64313: NEG
64314: PUSH
64315: EMPTY
64316: LIST
64317: LIST
64318: PUSH
64319: LD_INT 2
64321: PUSH
64322: LD_INT 1
64324: PUSH
64325: EMPTY
64326: LIST
64327: LIST
64328: PUSH
64329: LD_INT 2
64331: PUSH
64332: LD_INT 2
64334: PUSH
64335: EMPTY
64336: LIST
64337: LIST
64338: PUSH
64339: LD_INT 1
64341: PUSH
64342: LD_INT 2
64344: PUSH
64345: EMPTY
64346: LIST
64347: LIST
64348: PUSH
64349: LD_INT 0
64351: PUSH
64352: LD_INT 2
64354: PUSH
64355: EMPTY
64356: LIST
64357: LIST
64358: PUSH
64359: LD_INT 1
64361: NEG
64362: PUSH
64363: LD_INT 1
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: PUSH
64370: EMPTY
64371: LIST
64372: LIST
64373: LIST
64374: LIST
64375: LIST
64376: LIST
64377: LIST
64378: LIST
64379: LIST
64380: LIST
64381: LIST
64382: LIST
64383: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64384: LD_ADDR_VAR 0 51
64388: PUSH
64389: LD_INT 0
64391: PUSH
64392: LD_INT 0
64394: PUSH
64395: EMPTY
64396: LIST
64397: LIST
64398: PUSH
64399: LD_INT 0
64401: PUSH
64402: LD_INT 1
64404: NEG
64405: PUSH
64406: EMPTY
64407: LIST
64408: LIST
64409: PUSH
64410: LD_INT 1
64412: PUSH
64413: LD_INT 0
64415: PUSH
64416: EMPTY
64417: LIST
64418: LIST
64419: PUSH
64420: LD_INT 1
64422: PUSH
64423: LD_INT 1
64425: PUSH
64426: EMPTY
64427: LIST
64428: LIST
64429: PUSH
64430: LD_INT 0
64432: PUSH
64433: LD_INT 1
64435: PUSH
64436: EMPTY
64437: LIST
64438: LIST
64439: PUSH
64440: LD_INT 1
64442: NEG
64443: PUSH
64444: LD_INT 0
64446: PUSH
64447: EMPTY
64448: LIST
64449: LIST
64450: PUSH
64451: LD_INT 1
64453: NEG
64454: PUSH
64455: LD_INT 1
64457: NEG
64458: PUSH
64459: EMPTY
64460: LIST
64461: LIST
64462: PUSH
64463: LD_INT 1
64465: PUSH
64466: LD_INT 2
64468: PUSH
64469: EMPTY
64470: LIST
64471: LIST
64472: PUSH
64473: LD_INT 0
64475: PUSH
64476: LD_INT 2
64478: PUSH
64479: EMPTY
64480: LIST
64481: LIST
64482: PUSH
64483: LD_INT 1
64485: NEG
64486: PUSH
64487: LD_INT 1
64489: PUSH
64490: EMPTY
64491: LIST
64492: LIST
64493: PUSH
64494: LD_INT 2
64496: NEG
64497: PUSH
64498: LD_INT 0
64500: PUSH
64501: EMPTY
64502: LIST
64503: LIST
64504: PUSH
64505: LD_INT 2
64507: NEG
64508: PUSH
64509: LD_INT 1
64511: NEG
64512: PUSH
64513: EMPTY
64514: LIST
64515: LIST
64516: PUSH
64517: EMPTY
64518: LIST
64519: LIST
64520: LIST
64521: LIST
64522: LIST
64523: LIST
64524: LIST
64525: LIST
64526: LIST
64527: LIST
64528: LIST
64529: LIST
64530: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64531: LD_ADDR_VAR 0 52
64535: PUSH
64536: LD_INT 0
64538: PUSH
64539: LD_INT 0
64541: PUSH
64542: EMPTY
64543: LIST
64544: LIST
64545: PUSH
64546: LD_INT 0
64548: PUSH
64549: LD_INT 1
64551: NEG
64552: PUSH
64553: EMPTY
64554: LIST
64555: LIST
64556: PUSH
64557: LD_INT 1
64559: PUSH
64560: LD_INT 0
64562: PUSH
64563: EMPTY
64564: LIST
64565: LIST
64566: PUSH
64567: LD_INT 1
64569: PUSH
64570: LD_INT 1
64572: PUSH
64573: EMPTY
64574: LIST
64575: LIST
64576: PUSH
64577: LD_INT 0
64579: PUSH
64580: LD_INT 1
64582: PUSH
64583: EMPTY
64584: LIST
64585: LIST
64586: PUSH
64587: LD_INT 1
64589: NEG
64590: PUSH
64591: LD_INT 0
64593: PUSH
64594: EMPTY
64595: LIST
64596: LIST
64597: PUSH
64598: LD_INT 1
64600: NEG
64601: PUSH
64602: LD_INT 1
64604: NEG
64605: PUSH
64606: EMPTY
64607: LIST
64608: LIST
64609: PUSH
64610: LD_INT 1
64612: NEG
64613: PUSH
64614: LD_INT 2
64616: NEG
64617: PUSH
64618: EMPTY
64619: LIST
64620: LIST
64621: PUSH
64622: LD_INT 1
64624: NEG
64625: PUSH
64626: LD_INT 1
64628: PUSH
64629: EMPTY
64630: LIST
64631: LIST
64632: PUSH
64633: LD_INT 2
64635: NEG
64636: PUSH
64637: LD_INT 0
64639: PUSH
64640: EMPTY
64641: LIST
64642: LIST
64643: PUSH
64644: LD_INT 2
64646: NEG
64647: PUSH
64648: LD_INT 1
64650: NEG
64651: PUSH
64652: EMPTY
64653: LIST
64654: LIST
64655: PUSH
64656: LD_INT 2
64658: NEG
64659: PUSH
64660: LD_INT 2
64662: NEG
64663: PUSH
64664: EMPTY
64665: LIST
64666: LIST
64667: PUSH
64668: EMPTY
64669: LIST
64670: LIST
64671: LIST
64672: LIST
64673: LIST
64674: LIST
64675: LIST
64676: LIST
64677: LIST
64678: LIST
64679: LIST
64680: LIST
64681: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64682: LD_ADDR_VAR 0 53
64686: PUSH
64687: LD_INT 0
64689: PUSH
64690: LD_INT 0
64692: PUSH
64693: EMPTY
64694: LIST
64695: LIST
64696: PUSH
64697: LD_INT 0
64699: PUSH
64700: LD_INT 1
64702: NEG
64703: PUSH
64704: EMPTY
64705: LIST
64706: LIST
64707: PUSH
64708: LD_INT 1
64710: PUSH
64711: LD_INT 0
64713: PUSH
64714: EMPTY
64715: LIST
64716: LIST
64717: PUSH
64718: LD_INT 1
64720: PUSH
64721: LD_INT 1
64723: PUSH
64724: EMPTY
64725: LIST
64726: LIST
64727: PUSH
64728: LD_INT 0
64730: PUSH
64731: LD_INT 1
64733: PUSH
64734: EMPTY
64735: LIST
64736: LIST
64737: PUSH
64738: LD_INT 1
64740: NEG
64741: PUSH
64742: LD_INT 0
64744: PUSH
64745: EMPTY
64746: LIST
64747: LIST
64748: PUSH
64749: LD_INT 1
64751: NEG
64752: PUSH
64753: LD_INT 1
64755: NEG
64756: PUSH
64757: EMPTY
64758: LIST
64759: LIST
64760: PUSH
64761: LD_INT 1
64763: NEG
64764: PUSH
64765: LD_INT 2
64767: NEG
64768: PUSH
64769: EMPTY
64770: LIST
64771: LIST
64772: PUSH
64773: LD_INT 0
64775: PUSH
64776: LD_INT 2
64778: NEG
64779: PUSH
64780: EMPTY
64781: LIST
64782: LIST
64783: PUSH
64784: LD_INT 1
64786: PUSH
64787: LD_INT 1
64789: NEG
64790: PUSH
64791: EMPTY
64792: LIST
64793: LIST
64794: PUSH
64795: LD_INT 2
64797: PUSH
64798: LD_INT 0
64800: PUSH
64801: EMPTY
64802: LIST
64803: LIST
64804: PUSH
64805: LD_INT 2
64807: PUSH
64808: LD_INT 1
64810: PUSH
64811: EMPTY
64812: LIST
64813: LIST
64814: PUSH
64815: LD_INT 2
64817: PUSH
64818: LD_INT 2
64820: PUSH
64821: EMPTY
64822: LIST
64823: LIST
64824: PUSH
64825: LD_INT 1
64827: PUSH
64828: LD_INT 2
64830: PUSH
64831: EMPTY
64832: LIST
64833: LIST
64834: PUSH
64835: LD_INT 0
64837: PUSH
64838: LD_INT 2
64840: PUSH
64841: EMPTY
64842: LIST
64843: LIST
64844: PUSH
64845: LD_INT 1
64847: NEG
64848: PUSH
64849: LD_INT 1
64851: PUSH
64852: EMPTY
64853: LIST
64854: LIST
64855: PUSH
64856: LD_INT 2
64858: NEG
64859: PUSH
64860: LD_INT 0
64862: PUSH
64863: EMPTY
64864: LIST
64865: LIST
64866: PUSH
64867: LD_INT 2
64869: NEG
64870: PUSH
64871: LD_INT 1
64873: NEG
64874: PUSH
64875: EMPTY
64876: LIST
64877: LIST
64878: PUSH
64879: LD_INT 2
64881: NEG
64882: PUSH
64883: LD_INT 2
64885: NEG
64886: PUSH
64887: EMPTY
64888: LIST
64889: LIST
64890: PUSH
64891: EMPTY
64892: LIST
64893: LIST
64894: LIST
64895: LIST
64896: LIST
64897: LIST
64898: LIST
64899: LIST
64900: LIST
64901: LIST
64902: LIST
64903: LIST
64904: LIST
64905: LIST
64906: LIST
64907: LIST
64908: LIST
64909: LIST
64910: LIST
64911: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64912: LD_ADDR_VAR 0 54
64916: PUSH
64917: LD_INT 0
64919: PUSH
64920: LD_INT 0
64922: PUSH
64923: EMPTY
64924: LIST
64925: LIST
64926: PUSH
64927: LD_INT 0
64929: PUSH
64930: LD_INT 1
64932: NEG
64933: PUSH
64934: EMPTY
64935: LIST
64936: LIST
64937: PUSH
64938: LD_INT 1
64940: PUSH
64941: LD_INT 0
64943: PUSH
64944: EMPTY
64945: LIST
64946: LIST
64947: PUSH
64948: LD_INT 1
64950: PUSH
64951: LD_INT 1
64953: PUSH
64954: EMPTY
64955: LIST
64956: LIST
64957: PUSH
64958: LD_INT 0
64960: PUSH
64961: LD_INT 1
64963: PUSH
64964: EMPTY
64965: LIST
64966: LIST
64967: PUSH
64968: LD_INT 1
64970: NEG
64971: PUSH
64972: LD_INT 0
64974: PUSH
64975: EMPTY
64976: LIST
64977: LIST
64978: PUSH
64979: LD_INT 1
64981: NEG
64982: PUSH
64983: LD_INT 1
64985: NEG
64986: PUSH
64987: EMPTY
64988: LIST
64989: LIST
64990: PUSH
64991: LD_INT 1
64993: NEG
64994: PUSH
64995: LD_INT 2
64997: NEG
64998: PUSH
64999: EMPTY
65000: LIST
65001: LIST
65002: PUSH
65003: LD_INT 0
65005: PUSH
65006: LD_INT 2
65008: NEG
65009: PUSH
65010: EMPTY
65011: LIST
65012: LIST
65013: PUSH
65014: LD_INT 1
65016: PUSH
65017: LD_INT 1
65019: NEG
65020: PUSH
65021: EMPTY
65022: LIST
65023: LIST
65024: PUSH
65025: LD_INT 2
65027: PUSH
65028: LD_INT 0
65030: PUSH
65031: EMPTY
65032: LIST
65033: LIST
65034: PUSH
65035: LD_INT 2
65037: PUSH
65038: LD_INT 1
65040: PUSH
65041: EMPTY
65042: LIST
65043: LIST
65044: PUSH
65045: LD_INT 2
65047: PUSH
65048: LD_INT 2
65050: PUSH
65051: EMPTY
65052: LIST
65053: LIST
65054: PUSH
65055: LD_INT 1
65057: PUSH
65058: LD_INT 2
65060: PUSH
65061: EMPTY
65062: LIST
65063: LIST
65064: PUSH
65065: LD_INT 0
65067: PUSH
65068: LD_INT 2
65070: PUSH
65071: EMPTY
65072: LIST
65073: LIST
65074: PUSH
65075: LD_INT 1
65077: NEG
65078: PUSH
65079: LD_INT 1
65081: PUSH
65082: EMPTY
65083: LIST
65084: LIST
65085: PUSH
65086: LD_INT 2
65088: NEG
65089: PUSH
65090: LD_INT 0
65092: PUSH
65093: EMPTY
65094: LIST
65095: LIST
65096: PUSH
65097: LD_INT 2
65099: NEG
65100: PUSH
65101: LD_INT 1
65103: NEG
65104: PUSH
65105: EMPTY
65106: LIST
65107: LIST
65108: PUSH
65109: LD_INT 2
65111: NEG
65112: PUSH
65113: LD_INT 2
65115: NEG
65116: PUSH
65117: EMPTY
65118: LIST
65119: LIST
65120: PUSH
65121: EMPTY
65122: LIST
65123: LIST
65124: LIST
65125: LIST
65126: LIST
65127: LIST
65128: LIST
65129: LIST
65130: LIST
65131: LIST
65132: LIST
65133: LIST
65134: LIST
65135: LIST
65136: LIST
65137: LIST
65138: LIST
65139: LIST
65140: LIST
65141: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65142: LD_ADDR_VAR 0 55
65146: PUSH
65147: LD_INT 0
65149: PUSH
65150: LD_INT 0
65152: PUSH
65153: EMPTY
65154: LIST
65155: LIST
65156: PUSH
65157: LD_INT 0
65159: PUSH
65160: LD_INT 1
65162: NEG
65163: PUSH
65164: EMPTY
65165: LIST
65166: LIST
65167: PUSH
65168: LD_INT 1
65170: PUSH
65171: LD_INT 0
65173: PUSH
65174: EMPTY
65175: LIST
65176: LIST
65177: PUSH
65178: LD_INT 1
65180: PUSH
65181: LD_INT 1
65183: PUSH
65184: EMPTY
65185: LIST
65186: LIST
65187: PUSH
65188: LD_INT 0
65190: PUSH
65191: LD_INT 1
65193: PUSH
65194: EMPTY
65195: LIST
65196: LIST
65197: PUSH
65198: LD_INT 1
65200: NEG
65201: PUSH
65202: LD_INT 0
65204: PUSH
65205: EMPTY
65206: LIST
65207: LIST
65208: PUSH
65209: LD_INT 1
65211: NEG
65212: PUSH
65213: LD_INT 1
65215: NEG
65216: PUSH
65217: EMPTY
65218: LIST
65219: LIST
65220: PUSH
65221: LD_INT 1
65223: NEG
65224: PUSH
65225: LD_INT 2
65227: NEG
65228: PUSH
65229: EMPTY
65230: LIST
65231: LIST
65232: PUSH
65233: LD_INT 0
65235: PUSH
65236: LD_INT 2
65238: NEG
65239: PUSH
65240: EMPTY
65241: LIST
65242: LIST
65243: PUSH
65244: LD_INT 1
65246: PUSH
65247: LD_INT 1
65249: NEG
65250: PUSH
65251: EMPTY
65252: LIST
65253: LIST
65254: PUSH
65255: LD_INT 2
65257: PUSH
65258: LD_INT 0
65260: PUSH
65261: EMPTY
65262: LIST
65263: LIST
65264: PUSH
65265: LD_INT 2
65267: PUSH
65268: LD_INT 1
65270: PUSH
65271: EMPTY
65272: LIST
65273: LIST
65274: PUSH
65275: LD_INT 2
65277: PUSH
65278: LD_INT 2
65280: PUSH
65281: EMPTY
65282: LIST
65283: LIST
65284: PUSH
65285: LD_INT 1
65287: PUSH
65288: LD_INT 2
65290: PUSH
65291: EMPTY
65292: LIST
65293: LIST
65294: PUSH
65295: LD_INT 0
65297: PUSH
65298: LD_INT 2
65300: PUSH
65301: EMPTY
65302: LIST
65303: LIST
65304: PUSH
65305: LD_INT 1
65307: NEG
65308: PUSH
65309: LD_INT 1
65311: PUSH
65312: EMPTY
65313: LIST
65314: LIST
65315: PUSH
65316: LD_INT 2
65318: NEG
65319: PUSH
65320: LD_INT 0
65322: PUSH
65323: EMPTY
65324: LIST
65325: LIST
65326: PUSH
65327: LD_INT 2
65329: NEG
65330: PUSH
65331: LD_INT 1
65333: NEG
65334: PUSH
65335: EMPTY
65336: LIST
65337: LIST
65338: PUSH
65339: LD_INT 2
65341: NEG
65342: PUSH
65343: LD_INT 2
65345: NEG
65346: PUSH
65347: EMPTY
65348: LIST
65349: LIST
65350: PUSH
65351: EMPTY
65352: LIST
65353: LIST
65354: LIST
65355: LIST
65356: LIST
65357: LIST
65358: LIST
65359: LIST
65360: LIST
65361: LIST
65362: LIST
65363: LIST
65364: LIST
65365: LIST
65366: LIST
65367: LIST
65368: LIST
65369: LIST
65370: LIST
65371: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65372: LD_ADDR_VAR 0 56
65376: PUSH
65377: LD_INT 0
65379: PUSH
65380: LD_INT 0
65382: PUSH
65383: EMPTY
65384: LIST
65385: LIST
65386: PUSH
65387: LD_INT 0
65389: PUSH
65390: LD_INT 1
65392: NEG
65393: PUSH
65394: EMPTY
65395: LIST
65396: LIST
65397: PUSH
65398: LD_INT 1
65400: PUSH
65401: LD_INT 0
65403: PUSH
65404: EMPTY
65405: LIST
65406: LIST
65407: PUSH
65408: LD_INT 1
65410: PUSH
65411: LD_INT 1
65413: PUSH
65414: EMPTY
65415: LIST
65416: LIST
65417: PUSH
65418: LD_INT 0
65420: PUSH
65421: LD_INT 1
65423: PUSH
65424: EMPTY
65425: LIST
65426: LIST
65427: PUSH
65428: LD_INT 1
65430: NEG
65431: PUSH
65432: LD_INT 0
65434: PUSH
65435: EMPTY
65436: LIST
65437: LIST
65438: PUSH
65439: LD_INT 1
65441: NEG
65442: PUSH
65443: LD_INT 1
65445: NEG
65446: PUSH
65447: EMPTY
65448: LIST
65449: LIST
65450: PUSH
65451: LD_INT 1
65453: NEG
65454: PUSH
65455: LD_INT 2
65457: NEG
65458: PUSH
65459: EMPTY
65460: LIST
65461: LIST
65462: PUSH
65463: LD_INT 0
65465: PUSH
65466: LD_INT 2
65468: NEG
65469: PUSH
65470: EMPTY
65471: LIST
65472: LIST
65473: PUSH
65474: LD_INT 1
65476: PUSH
65477: LD_INT 1
65479: NEG
65480: PUSH
65481: EMPTY
65482: LIST
65483: LIST
65484: PUSH
65485: LD_INT 2
65487: PUSH
65488: LD_INT 0
65490: PUSH
65491: EMPTY
65492: LIST
65493: LIST
65494: PUSH
65495: LD_INT 2
65497: PUSH
65498: LD_INT 1
65500: PUSH
65501: EMPTY
65502: LIST
65503: LIST
65504: PUSH
65505: LD_INT 2
65507: PUSH
65508: LD_INT 2
65510: PUSH
65511: EMPTY
65512: LIST
65513: LIST
65514: PUSH
65515: LD_INT 1
65517: PUSH
65518: LD_INT 2
65520: PUSH
65521: EMPTY
65522: LIST
65523: LIST
65524: PUSH
65525: LD_INT 0
65527: PUSH
65528: LD_INT 2
65530: PUSH
65531: EMPTY
65532: LIST
65533: LIST
65534: PUSH
65535: LD_INT 1
65537: NEG
65538: PUSH
65539: LD_INT 1
65541: PUSH
65542: EMPTY
65543: LIST
65544: LIST
65545: PUSH
65546: LD_INT 2
65548: NEG
65549: PUSH
65550: LD_INT 0
65552: PUSH
65553: EMPTY
65554: LIST
65555: LIST
65556: PUSH
65557: LD_INT 2
65559: NEG
65560: PUSH
65561: LD_INT 1
65563: NEG
65564: PUSH
65565: EMPTY
65566: LIST
65567: LIST
65568: PUSH
65569: LD_INT 2
65571: NEG
65572: PUSH
65573: LD_INT 2
65575: NEG
65576: PUSH
65577: EMPTY
65578: LIST
65579: LIST
65580: PUSH
65581: EMPTY
65582: LIST
65583: LIST
65584: LIST
65585: LIST
65586: LIST
65587: LIST
65588: LIST
65589: LIST
65590: LIST
65591: LIST
65592: LIST
65593: LIST
65594: LIST
65595: LIST
65596: LIST
65597: LIST
65598: LIST
65599: LIST
65600: LIST
65601: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65602: LD_ADDR_VAR 0 57
65606: PUSH
65607: LD_INT 0
65609: PUSH
65610: LD_INT 0
65612: PUSH
65613: EMPTY
65614: LIST
65615: LIST
65616: PUSH
65617: LD_INT 0
65619: PUSH
65620: LD_INT 1
65622: NEG
65623: PUSH
65624: EMPTY
65625: LIST
65626: LIST
65627: PUSH
65628: LD_INT 1
65630: PUSH
65631: LD_INT 0
65633: PUSH
65634: EMPTY
65635: LIST
65636: LIST
65637: PUSH
65638: LD_INT 1
65640: PUSH
65641: LD_INT 1
65643: PUSH
65644: EMPTY
65645: LIST
65646: LIST
65647: PUSH
65648: LD_INT 0
65650: PUSH
65651: LD_INT 1
65653: PUSH
65654: EMPTY
65655: LIST
65656: LIST
65657: PUSH
65658: LD_INT 1
65660: NEG
65661: PUSH
65662: LD_INT 0
65664: PUSH
65665: EMPTY
65666: LIST
65667: LIST
65668: PUSH
65669: LD_INT 1
65671: NEG
65672: PUSH
65673: LD_INT 1
65675: NEG
65676: PUSH
65677: EMPTY
65678: LIST
65679: LIST
65680: PUSH
65681: LD_INT 1
65683: NEG
65684: PUSH
65685: LD_INT 2
65687: NEG
65688: PUSH
65689: EMPTY
65690: LIST
65691: LIST
65692: PUSH
65693: LD_INT 0
65695: PUSH
65696: LD_INT 2
65698: NEG
65699: PUSH
65700: EMPTY
65701: LIST
65702: LIST
65703: PUSH
65704: LD_INT 1
65706: PUSH
65707: LD_INT 1
65709: NEG
65710: PUSH
65711: EMPTY
65712: LIST
65713: LIST
65714: PUSH
65715: LD_INT 2
65717: PUSH
65718: LD_INT 0
65720: PUSH
65721: EMPTY
65722: LIST
65723: LIST
65724: PUSH
65725: LD_INT 2
65727: PUSH
65728: LD_INT 1
65730: PUSH
65731: EMPTY
65732: LIST
65733: LIST
65734: PUSH
65735: LD_INT 2
65737: PUSH
65738: LD_INT 2
65740: PUSH
65741: EMPTY
65742: LIST
65743: LIST
65744: PUSH
65745: LD_INT 1
65747: PUSH
65748: LD_INT 2
65750: PUSH
65751: EMPTY
65752: LIST
65753: LIST
65754: PUSH
65755: LD_INT 0
65757: PUSH
65758: LD_INT 2
65760: PUSH
65761: EMPTY
65762: LIST
65763: LIST
65764: PUSH
65765: LD_INT 1
65767: NEG
65768: PUSH
65769: LD_INT 1
65771: PUSH
65772: EMPTY
65773: LIST
65774: LIST
65775: PUSH
65776: LD_INT 2
65778: NEG
65779: PUSH
65780: LD_INT 0
65782: PUSH
65783: EMPTY
65784: LIST
65785: LIST
65786: PUSH
65787: LD_INT 2
65789: NEG
65790: PUSH
65791: LD_INT 1
65793: NEG
65794: PUSH
65795: EMPTY
65796: LIST
65797: LIST
65798: PUSH
65799: LD_INT 2
65801: NEG
65802: PUSH
65803: LD_INT 2
65805: NEG
65806: PUSH
65807: EMPTY
65808: LIST
65809: LIST
65810: PUSH
65811: EMPTY
65812: LIST
65813: LIST
65814: LIST
65815: LIST
65816: LIST
65817: LIST
65818: LIST
65819: LIST
65820: LIST
65821: LIST
65822: LIST
65823: LIST
65824: LIST
65825: LIST
65826: LIST
65827: LIST
65828: LIST
65829: LIST
65830: LIST
65831: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65832: LD_ADDR_VAR 0 58
65836: PUSH
65837: LD_INT 0
65839: PUSH
65840: LD_INT 0
65842: PUSH
65843: EMPTY
65844: LIST
65845: LIST
65846: PUSH
65847: LD_INT 0
65849: PUSH
65850: LD_INT 1
65852: NEG
65853: PUSH
65854: EMPTY
65855: LIST
65856: LIST
65857: PUSH
65858: LD_INT 1
65860: PUSH
65861: LD_INT 0
65863: PUSH
65864: EMPTY
65865: LIST
65866: LIST
65867: PUSH
65868: LD_INT 1
65870: PUSH
65871: LD_INT 1
65873: PUSH
65874: EMPTY
65875: LIST
65876: LIST
65877: PUSH
65878: LD_INT 0
65880: PUSH
65881: LD_INT 1
65883: PUSH
65884: EMPTY
65885: LIST
65886: LIST
65887: PUSH
65888: LD_INT 1
65890: NEG
65891: PUSH
65892: LD_INT 0
65894: PUSH
65895: EMPTY
65896: LIST
65897: LIST
65898: PUSH
65899: LD_INT 1
65901: NEG
65902: PUSH
65903: LD_INT 1
65905: NEG
65906: PUSH
65907: EMPTY
65908: LIST
65909: LIST
65910: PUSH
65911: LD_INT 1
65913: NEG
65914: PUSH
65915: LD_INT 2
65917: NEG
65918: PUSH
65919: EMPTY
65920: LIST
65921: LIST
65922: PUSH
65923: LD_INT 0
65925: PUSH
65926: LD_INT 2
65928: NEG
65929: PUSH
65930: EMPTY
65931: LIST
65932: LIST
65933: PUSH
65934: LD_INT 1
65936: PUSH
65937: LD_INT 1
65939: NEG
65940: PUSH
65941: EMPTY
65942: LIST
65943: LIST
65944: PUSH
65945: LD_INT 2
65947: PUSH
65948: LD_INT 0
65950: PUSH
65951: EMPTY
65952: LIST
65953: LIST
65954: PUSH
65955: LD_INT 2
65957: PUSH
65958: LD_INT 1
65960: PUSH
65961: EMPTY
65962: LIST
65963: LIST
65964: PUSH
65965: LD_INT 2
65967: PUSH
65968: LD_INT 2
65970: PUSH
65971: EMPTY
65972: LIST
65973: LIST
65974: PUSH
65975: LD_INT 1
65977: PUSH
65978: LD_INT 2
65980: PUSH
65981: EMPTY
65982: LIST
65983: LIST
65984: PUSH
65985: LD_INT 0
65987: PUSH
65988: LD_INT 2
65990: PUSH
65991: EMPTY
65992: LIST
65993: LIST
65994: PUSH
65995: LD_INT 1
65997: NEG
65998: PUSH
65999: LD_INT 1
66001: PUSH
66002: EMPTY
66003: LIST
66004: LIST
66005: PUSH
66006: LD_INT 2
66008: NEG
66009: PUSH
66010: LD_INT 0
66012: PUSH
66013: EMPTY
66014: LIST
66015: LIST
66016: PUSH
66017: LD_INT 2
66019: NEG
66020: PUSH
66021: LD_INT 1
66023: NEG
66024: PUSH
66025: EMPTY
66026: LIST
66027: LIST
66028: PUSH
66029: LD_INT 2
66031: NEG
66032: PUSH
66033: LD_INT 2
66035: NEG
66036: PUSH
66037: EMPTY
66038: LIST
66039: LIST
66040: PUSH
66041: EMPTY
66042: LIST
66043: LIST
66044: LIST
66045: LIST
66046: LIST
66047: LIST
66048: LIST
66049: LIST
66050: LIST
66051: LIST
66052: LIST
66053: LIST
66054: LIST
66055: LIST
66056: LIST
66057: LIST
66058: LIST
66059: LIST
66060: LIST
66061: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66062: LD_ADDR_VAR 0 59
66066: PUSH
66067: LD_INT 0
66069: PUSH
66070: LD_INT 0
66072: PUSH
66073: EMPTY
66074: LIST
66075: LIST
66076: PUSH
66077: LD_INT 0
66079: PUSH
66080: LD_INT 1
66082: NEG
66083: PUSH
66084: EMPTY
66085: LIST
66086: LIST
66087: PUSH
66088: LD_INT 1
66090: PUSH
66091: LD_INT 0
66093: PUSH
66094: EMPTY
66095: LIST
66096: LIST
66097: PUSH
66098: LD_INT 1
66100: PUSH
66101: LD_INT 1
66103: PUSH
66104: EMPTY
66105: LIST
66106: LIST
66107: PUSH
66108: LD_INT 0
66110: PUSH
66111: LD_INT 1
66113: PUSH
66114: EMPTY
66115: LIST
66116: LIST
66117: PUSH
66118: LD_INT 1
66120: NEG
66121: PUSH
66122: LD_INT 0
66124: PUSH
66125: EMPTY
66126: LIST
66127: LIST
66128: PUSH
66129: LD_INT 1
66131: NEG
66132: PUSH
66133: LD_INT 1
66135: NEG
66136: PUSH
66137: EMPTY
66138: LIST
66139: LIST
66140: PUSH
66141: EMPTY
66142: LIST
66143: LIST
66144: LIST
66145: LIST
66146: LIST
66147: LIST
66148: LIST
66149: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66150: LD_ADDR_VAR 0 60
66154: PUSH
66155: LD_INT 0
66157: PUSH
66158: LD_INT 0
66160: PUSH
66161: EMPTY
66162: LIST
66163: LIST
66164: PUSH
66165: LD_INT 0
66167: PUSH
66168: LD_INT 1
66170: NEG
66171: PUSH
66172: EMPTY
66173: LIST
66174: LIST
66175: PUSH
66176: LD_INT 1
66178: PUSH
66179: LD_INT 0
66181: PUSH
66182: EMPTY
66183: LIST
66184: LIST
66185: PUSH
66186: LD_INT 1
66188: PUSH
66189: LD_INT 1
66191: PUSH
66192: EMPTY
66193: LIST
66194: LIST
66195: PUSH
66196: LD_INT 0
66198: PUSH
66199: LD_INT 1
66201: PUSH
66202: EMPTY
66203: LIST
66204: LIST
66205: PUSH
66206: LD_INT 1
66208: NEG
66209: PUSH
66210: LD_INT 0
66212: PUSH
66213: EMPTY
66214: LIST
66215: LIST
66216: PUSH
66217: LD_INT 1
66219: NEG
66220: PUSH
66221: LD_INT 1
66223: NEG
66224: PUSH
66225: EMPTY
66226: LIST
66227: LIST
66228: PUSH
66229: EMPTY
66230: LIST
66231: LIST
66232: LIST
66233: LIST
66234: LIST
66235: LIST
66236: LIST
66237: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66238: LD_ADDR_VAR 0 61
66242: PUSH
66243: LD_INT 0
66245: PUSH
66246: LD_INT 0
66248: PUSH
66249: EMPTY
66250: LIST
66251: LIST
66252: PUSH
66253: LD_INT 0
66255: PUSH
66256: LD_INT 1
66258: NEG
66259: PUSH
66260: EMPTY
66261: LIST
66262: LIST
66263: PUSH
66264: LD_INT 1
66266: PUSH
66267: LD_INT 0
66269: PUSH
66270: EMPTY
66271: LIST
66272: LIST
66273: PUSH
66274: LD_INT 1
66276: PUSH
66277: LD_INT 1
66279: PUSH
66280: EMPTY
66281: LIST
66282: LIST
66283: PUSH
66284: LD_INT 0
66286: PUSH
66287: LD_INT 1
66289: PUSH
66290: EMPTY
66291: LIST
66292: LIST
66293: PUSH
66294: LD_INT 1
66296: NEG
66297: PUSH
66298: LD_INT 0
66300: PUSH
66301: EMPTY
66302: LIST
66303: LIST
66304: PUSH
66305: LD_INT 1
66307: NEG
66308: PUSH
66309: LD_INT 1
66311: NEG
66312: PUSH
66313: EMPTY
66314: LIST
66315: LIST
66316: PUSH
66317: EMPTY
66318: LIST
66319: LIST
66320: LIST
66321: LIST
66322: LIST
66323: LIST
66324: LIST
66325: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66326: LD_ADDR_VAR 0 62
66330: PUSH
66331: LD_INT 0
66333: PUSH
66334: LD_INT 0
66336: PUSH
66337: EMPTY
66338: LIST
66339: LIST
66340: PUSH
66341: LD_INT 0
66343: PUSH
66344: LD_INT 1
66346: NEG
66347: PUSH
66348: EMPTY
66349: LIST
66350: LIST
66351: PUSH
66352: LD_INT 1
66354: PUSH
66355: LD_INT 0
66357: PUSH
66358: EMPTY
66359: LIST
66360: LIST
66361: PUSH
66362: LD_INT 1
66364: PUSH
66365: LD_INT 1
66367: PUSH
66368: EMPTY
66369: LIST
66370: LIST
66371: PUSH
66372: LD_INT 0
66374: PUSH
66375: LD_INT 1
66377: PUSH
66378: EMPTY
66379: LIST
66380: LIST
66381: PUSH
66382: LD_INT 1
66384: NEG
66385: PUSH
66386: LD_INT 0
66388: PUSH
66389: EMPTY
66390: LIST
66391: LIST
66392: PUSH
66393: LD_INT 1
66395: NEG
66396: PUSH
66397: LD_INT 1
66399: NEG
66400: PUSH
66401: EMPTY
66402: LIST
66403: LIST
66404: PUSH
66405: EMPTY
66406: LIST
66407: LIST
66408: LIST
66409: LIST
66410: LIST
66411: LIST
66412: LIST
66413: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66414: LD_ADDR_VAR 0 63
66418: PUSH
66419: LD_INT 0
66421: PUSH
66422: LD_INT 0
66424: PUSH
66425: EMPTY
66426: LIST
66427: LIST
66428: PUSH
66429: LD_INT 0
66431: PUSH
66432: LD_INT 1
66434: NEG
66435: PUSH
66436: EMPTY
66437: LIST
66438: LIST
66439: PUSH
66440: LD_INT 1
66442: PUSH
66443: LD_INT 0
66445: PUSH
66446: EMPTY
66447: LIST
66448: LIST
66449: PUSH
66450: LD_INT 1
66452: PUSH
66453: LD_INT 1
66455: PUSH
66456: EMPTY
66457: LIST
66458: LIST
66459: PUSH
66460: LD_INT 0
66462: PUSH
66463: LD_INT 1
66465: PUSH
66466: EMPTY
66467: LIST
66468: LIST
66469: PUSH
66470: LD_INT 1
66472: NEG
66473: PUSH
66474: LD_INT 0
66476: PUSH
66477: EMPTY
66478: LIST
66479: LIST
66480: PUSH
66481: LD_INT 1
66483: NEG
66484: PUSH
66485: LD_INT 1
66487: NEG
66488: PUSH
66489: EMPTY
66490: LIST
66491: LIST
66492: PUSH
66493: EMPTY
66494: LIST
66495: LIST
66496: LIST
66497: LIST
66498: LIST
66499: LIST
66500: LIST
66501: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66502: LD_ADDR_VAR 0 64
66506: PUSH
66507: LD_INT 0
66509: PUSH
66510: LD_INT 0
66512: PUSH
66513: EMPTY
66514: LIST
66515: LIST
66516: PUSH
66517: LD_INT 0
66519: PUSH
66520: LD_INT 1
66522: NEG
66523: PUSH
66524: EMPTY
66525: LIST
66526: LIST
66527: PUSH
66528: LD_INT 1
66530: PUSH
66531: LD_INT 0
66533: PUSH
66534: EMPTY
66535: LIST
66536: LIST
66537: PUSH
66538: LD_INT 1
66540: PUSH
66541: LD_INT 1
66543: PUSH
66544: EMPTY
66545: LIST
66546: LIST
66547: PUSH
66548: LD_INT 0
66550: PUSH
66551: LD_INT 1
66553: PUSH
66554: EMPTY
66555: LIST
66556: LIST
66557: PUSH
66558: LD_INT 1
66560: NEG
66561: PUSH
66562: LD_INT 0
66564: PUSH
66565: EMPTY
66566: LIST
66567: LIST
66568: PUSH
66569: LD_INT 1
66571: NEG
66572: PUSH
66573: LD_INT 1
66575: NEG
66576: PUSH
66577: EMPTY
66578: LIST
66579: LIST
66580: PUSH
66581: EMPTY
66582: LIST
66583: LIST
66584: LIST
66585: LIST
66586: LIST
66587: LIST
66588: LIST
66589: ST_TO_ADDR
// end ; 1 :
66590: GO 72487
66592: LD_INT 1
66594: DOUBLE
66595: EQUAL
66596: IFTRUE 66600
66598: GO 69223
66600: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66601: LD_ADDR_VAR 0 11
66605: PUSH
66606: LD_INT 1
66608: NEG
66609: PUSH
66610: LD_INT 3
66612: NEG
66613: PUSH
66614: EMPTY
66615: LIST
66616: LIST
66617: PUSH
66618: LD_INT 0
66620: PUSH
66621: LD_INT 3
66623: NEG
66624: PUSH
66625: EMPTY
66626: LIST
66627: LIST
66628: PUSH
66629: LD_INT 1
66631: PUSH
66632: LD_INT 2
66634: NEG
66635: PUSH
66636: EMPTY
66637: LIST
66638: LIST
66639: PUSH
66640: EMPTY
66641: LIST
66642: LIST
66643: LIST
66644: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66645: LD_ADDR_VAR 0 12
66649: PUSH
66650: LD_INT 2
66652: PUSH
66653: LD_INT 1
66655: NEG
66656: PUSH
66657: EMPTY
66658: LIST
66659: LIST
66660: PUSH
66661: LD_INT 3
66663: PUSH
66664: LD_INT 0
66666: PUSH
66667: EMPTY
66668: LIST
66669: LIST
66670: PUSH
66671: LD_INT 3
66673: PUSH
66674: LD_INT 1
66676: PUSH
66677: EMPTY
66678: LIST
66679: LIST
66680: PUSH
66681: EMPTY
66682: LIST
66683: LIST
66684: LIST
66685: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66686: LD_ADDR_VAR 0 13
66690: PUSH
66691: LD_INT 3
66693: PUSH
66694: LD_INT 2
66696: PUSH
66697: EMPTY
66698: LIST
66699: LIST
66700: PUSH
66701: LD_INT 3
66703: PUSH
66704: LD_INT 3
66706: PUSH
66707: EMPTY
66708: LIST
66709: LIST
66710: PUSH
66711: LD_INT 2
66713: PUSH
66714: LD_INT 3
66716: PUSH
66717: EMPTY
66718: LIST
66719: LIST
66720: PUSH
66721: EMPTY
66722: LIST
66723: LIST
66724: LIST
66725: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66726: LD_ADDR_VAR 0 14
66730: PUSH
66731: LD_INT 1
66733: PUSH
66734: LD_INT 3
66736: PUSH
66737: EMPTY
66738: LIST
66739: LIST
66740: PUSH
66741: LD_INT 0
66743: PUSH
66744: LD_INT 3
66746: PUSH
66747: EMPTY
66748: LIST
66749: LIST
66750: PUSH
66751: LD_INT 1
66753: NEG
66754: PUSH
66755: LD_INT 2
66757: PUSH
66758: EMPTY
66759: LIST
66760: LIST
66761: PUSH
66762: EMPTY
66763: LIST
66764: LIST
66765: LIST
66766: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66767: LD_ADDR_VAR 0 15
66771: PUSH
66772: LD_INT 2
66774: NEG
66775: PUSH
66776: LD_INT 1
66778: PUSH
66779: EMPTY
66780: LIST
66781: LIST
66782: PUSH
66783: LD_INT 3
66785: NEG
66786: PUSH
66787: LD_INT 0
66789: PUSH
66790: EMPTY
66791: LIST
66792: LIST
66793: PUSH
66794: LD_INT 3
66796: NEG
66797: PUSH
66798: LD_INT 1
66800: NEG
66801: PUSH
66802: EMPTY
66803: LIST
66804: LIST
66805: PUSH
66806: EMPTY
66807: LIST
66808: LIST
66809: LIST
66810: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66811: LD_ADDR_VAR 0 16
66815: PUSH
66816: LD_INT 2
66818: NEG
66819: PUSH
66820: LD_INT 3
66822: NEG
66823: PUSH
66824: EMPTY
66825: LIST
66826: LIST
66827: PUSH
66828: LD_INT 3
66830: NEG
66831: PUSH
66832: LD_INT 2
66834: NEG
66835: PUSH
66836: EMPTY
66837: LIST
66838: LIST
66839: PUSH
66840: LD_INT 3
66842: NEG
66843: PUSH
66844: LD_INT 3
66846: NEG
66847: PUSH
66848: EMPTY
66849: LIST
66850: LIST
66851: PUSH
66852: EMPTY
66853: LIST
66854: LIST
66855: LIST
66856: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66857: LD_ADDR_VAR 0 17
66861: PUSH
66862: LD_INT 1
66864: NEG
66865: PUSH
66866: LD_INT 3
66868: NEG
66869: PUSH
66870: EMPTY
66871: LIST
66872: LIST
66873: PUSH
66874: LD_INT 0
66876: PUSH
66877: LD_INT 3
66879: NEG
66880: PUSH
66881: EMPTY
66882: LIST
66883: LIST
66884: PUSH
66885: LD_INT 1
66887: PUSH
66888: LD_INT 2
66890: NEG
66891: PUSH
66892: EMPTY
66893: LIST
66894: LIST
66895: PUSH
66896: EMPTY
66897: LIST
66898: LIST
66899: LIST
66900: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66901: LD_ADDR_VAR 0 18
66905: PUSH
66906: LD_INT 2
66908: PUSH
66909: LD_INT 1
66911: NEG
66912: PUSH
66913: EMPTY
66914: LIST
66915: LIST
66916: PUSH
66917: LD_INT 3
66919: PUSH
66920: LD_INT 0
66922: PUSH
66923: EMPTY
66924: LIST
66925: LIST
66926: PUSH
66927: LD_INT 3
66929: PUSH
66930: LD_INT 1
66932: PUSH
66933: EMPTY
66934: LIST
66935: LIST
66936: PUSH
66937: EMPTY
66938: LIST
66939: LIST
66940: LIST
66941: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66942: LD_ADDR_VAR 0 19
66946: PUSH
66947: LD_INT 3
66949: PUSH
66950: LD_INT 2
66952: PUSH
66953: EMPTY
66954: LIST
66955: LIST
66956: PUSH
66957: LD_INT 3
66959: PUSH
66960: LD_INT 3
66962: PUSH
66963: EMPTY
66964: LIST
66965: LIST
66966: PUSH
66967: LD_INT 2
66969: PUSH
66970: LD_INT 3
66972: PUSH
66973: EMPTY
66974: LIST
66975: LIST
66976: PUSH
66977: EMPTY
66978: LIST
66979: LIST
66980: LIST
66981: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66982: LD_ADDR_VAR 0 20
66986: PUSH
66987: LD_INT 1
66989: PUSH
66990: LD_INT 3
66992: PUSH
66993: EMPTY
66994: LIST
66995: LIST
66996: PUSH
66997: LD_INT 0
66999: PUSH
67000: LD_INT 3
67002: PUSH
67003: EMPTY
67004: LIST
67005: LIST
67006: PUSH
67007: LD_INT 1
67009: NEG
67010: PUSH
67011: LD_INT 2
67013: PUSH
67014: EMPTY
67015: LIST
67016: LIST
67017: PUSH
67018: EMPTY
67019: LIST
67020: LIST
67021: LIST
67022: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67023: LD_ADDR_VAR 0 21
67027: PUSH
67028: LD_INT 2
67030: NEG
67031: PUSH
67032: LD_INT 1
67034: PUSH
67035: EMPTY
67036: LIST
67037: LIST
67038: PUSH
67039: LD_INT 3
67041: NEG
67042: PUSH
67043: LD_INT 0
67045: PUSH
67046: EMPTY
67047: LIST
67048: LIST
67049: PUSH
67050: LD_INT 3
67052: NEG
67053: PUSH
67054: LD_INT 1
67056: NEG
67057: PUSH
67058: EMPTY
67059: LIST
67060: LIST
67061: PUSH
67062: EMPTY
67063: LIST
67064: LIST
67065: LIST
67066: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67067: LD_ADDR_VAR 0 22
67071: PUSH
67072: LD_INT 2
67074: NEG
67075: PUSH
67076: LD_INT 3
67078: NEG
67079: PUSH
67080: EMPTY
67081: LIST
67082: LIST
67083: PUSH
67084: LD_INT 3
67086: NEG
67087: PUSH
67088: LD_INT 2
67090: NEG
67091: PUSH
67092: EMPTY
67093: LIST
67094: LIST
67095: PUSH
67096: LD_INT 3
67098: NEG
67099: PUSH
67100: LD_INT 3
67102: NEG
67103: PUSH
67104: EMPTY
67105: LIST
67106: LIST
67107: PUSH
67108: EMPTY
67109: LIST
67110: LIST
67111: LIST
67112: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
67113: LD_ADDR_VAR 0 23
67117: PUSH
67118: LD_INT 0
67120: PUSH
67121: LD_INT 3
67123: NEG
67124: PUSH
67125: EMPTY
67126: LIST
67127: LIST
67128: PUSH
67129: LD_INT 1
67131: NEG
67132: PUSH
67133: LD_INT 4
67135: NEG
67136: PUSH
67137: EMPTY
67138: LIST
67139: LIST
67140: PUSH
67141: LD_INT 1
67143: PUSH
67144: LD_INT 3
67146: NEG
67147: PUSH
67148: EMPTY
67149: LIST
67150: LIST
67151: PUSH
67152: EMPTY
67153: LIST
67154: LIST
67155: LIST
67156: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
67157: LD_ADDR_VAR 0 24
67161: PUSH
67162: LD_INT 3
67164: PUSH
67165: LD_INT 0
67167: PUSH
67168: EMPTY
67169: LIST
67170: LIST
67171: PUSH
67172: LD_INT 3
67174: PUSH
67175: LD_INT 1
67177: NEG
67178: PUSH
67179: EMPTY
67180: LIST
67181: LIST
67182: PUSH
67183: LD_INT 4
67185: PUSH
67186: LD_INT 1
67188: PUSH
67189: EMPTY
67190: LIST
67191: LIST
67192: PUSH
67193: EMPTY
67194: LIST
67195: LIST
67196: LIST
67197: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
67198: LD_ADDR_VAR 0 25
67202: PUSH
67203: LD_INT 3
67205: PUSH
67206: LD_INT 3
67208: PUSH
67209: EMPTY
67210: LIST
67211: LIST
67212: PUSH
67213: LD_INT 4
67215: PUSH
67216: LD_INT 3
67218: PUSH
67219: EMPTY
67220: LIST
67221: LIST
67222: PUSH
67223: LD_INT 3
67225: PUSH
67226: LD_INT 4
67228: PUSH
67229: EMPTY
67230: LIST
67231: LIST
67232: PUSH
67233: EMPTY
67234: LIST
67235: LIST
67236: LIST
67237: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
67238: LD_ADDR_VAR 0 26
67242: PUSH
67243: LD_INT 0
67245: PUSH
67246: LD_INT 3
67248: PUSH
67249: EMPTY
67250: LIST
67251: LIST
67252: PUSH
67253: LD_INT 1
67255: PUSH
67256: LD_INT 4
67258: PUSH
67259: EMPTY
67260: LIST
67261: LIST
67262: PUSH
67263: LD_INT 1
67265: NEG
67266: PUSH
67267: LD_INT 3
67269: PUSH
67270: EMPTY
67271: LIST
67272: LIST
67273: PUSH
67274: EMPTY
67275: LIST
67276: LIST
67277: LIST
67278: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
67279: LD_ADDR_VAR 0 27
67283: PUSH
67284: LD_INT 3
67286: NEG
67287: PUSH
67288: LD_INT 0
67290: PUSH
67291: EMPTY
67292: LIST
67293: LIST
67294: PUSH
67295: LD_INT 3
67297: NEG
67298: PUSH
67299: LD_INT 1
67301: PUSH
67302: EMPTY
67303: LIST
67304: LIST
67305: PUSH
67306: LD_INT 4
67308: NEG
67309: PUSH
67310: LD_INT 1
67312: NEG
67313: PUSH
67314: EMPTY
67315: LIST
67316: LIST
67317: PUSH
67318: EMPTY
67319: LIST
67320: LIST
67321: LIST
67322: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
67323: LD_ADDR_VAR 0 28
67327: PUSH
67328: LD_INT 3
67330: NEG
67331: PUSH
67332: LD_INT 3
67334: NEG
67335: PUSH
67336: EMPTY
67337: LIST
67338: LIST
67339: PUSH
67340: LD_INT 3
67342: NEG
67343: PUSH
67344: LD_INT 4
67346: NEG
67347: PUSH
67348: EMPTY
67349: LIST
67350: LIST
67351: PUSH
67352: LD_INT 4
67354: NEG
67355: PUSH
67356: LD_INT 3
67358: NEG
67359: PUSH
67360: EMPTY
67361: LIST
67362: LIST
67363: PUSH
67364: EMPTY
67365: LIST
67366: LIST
67367: LIST
67368: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
67369: LD_ADDR_VAR 0 29
67373: PUSH
67374: LD_INT 1
67376: NEG
67377: PUSH
67378: LD_INT 3
67380: NEG
67381: PUSH
67382: EMPTY
67383: LIST
67384: LIST
67385: PUSH
67386: LD_INT 0
67388: PUSH
67389: LD_INT 3
67391: NEG
67392: PUSH
67393: EMPTY
67394: LIST
67395: LIST
67396: PUSH
67397: LD_INT 1
67399: PUSH
67400: LD_INT 2
67402: NEG
67403: PUSH
67404: EMPTY
67405: LIST
67406: LIST
67407: PUSH
67408: LD_INT 1
67410: NEG
67411: PUSH
67412: LD_INT 4
67414: NEG
67415: PUSH
67416: EMPTY
67417: LIST
67418: LIST
67419: PUSH
67420: LD_INT 0
67422: PUSH
67423: LD_INT 4
67425: NEG
67426: PUSH
67427: EMPTY
67428: LIST
67429: LIST
67430: PUSH
67431: LD_INT 1
67433: PUSH
67434: LD_INT 3
67436: NEG
67437: PUSH
67438: EMPTY
67439: LIST
67440: LIST
67441: PUSH
67442: LD_INT 1
67444: NEG
67445: PUSH
67446: LD_INT 5
67448: NEG
67449: PUSH
67450: EMPTY
67451: LIST
67452: LIST
67453: PUSH
67454: LD_INT 0
67456: PUSH
67457: LD_INT 5
67459: NEG
67460: PUSH
67461: EMPTY
67462: LIST
67463: LIST
67464: PUSH
67465: LD_INT 1
67467: PUSH
67468: LD_INT 4
67470: NEG
67471: PUSH
67472: EMPTY
67473: LIST
67474: LIST
67475: PUSH
67476: LD_INT 1
67478: NEG
67479: PUSH
67480: LD_INT 6
67482: NEG
67483: PUSH
67484: EMPTY
67485: LIST
67486: LIST
67487: PUSH
67488: LD_INT 0
67490: PUSH
67491: LD_INT 6
67493: NEG
67494: PUSH
67495: EMPTY
67496: LIST
67497: LIST
67498: PUSH
67499: LD_INT 1
67501: PUSH
67502: LD_INT 5
67504: NEG
67505: PUSH
67506: EMPTY
67507: LIST
67508: LIST
67509: PUSH
67510: EMPTY
67511: LIST
67512: LIST
67513: LIST
67514: LIST
67515: LIST
67516: LIST
67517: LIST
67518: LIST
67519: LIST
67520: LIST
67521: LIST
67522: LIST
67523: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
67524: LD_ADDR_VAR 0 30
67528: PUSH
67529: LD_INT 2
67531: PUSH
67532: LD_INT 1
67534: NEG
67535: PUSH
67536: EMPTY
67537: LIST
67538: LIST
67539: PUSH
67540: LD_INT 3
67542: PUSH
67543: LD_INT 0
67545: PUSH
67546: EMPTY
67547: LIST
67548: LIST
67549: PUSH
67550: LD_INT 3
67552: PUSH
67553: LD_INT 1
67555: PUSH
67556: EMPTY
67557: LIST
67558: LIST
67559: PUSH
67560: LD_INT 3
67562: PUSH
67563: LD_INT 1
67565: NEG
67566: PUSH
67567: EMPTY
67568: LIST
67569: LIST
67570: PUSH
67571: LD_INT 4
67573: PUSH
67574: LD_INT 0
67576: PUSH
67577: EMPTY
67578: LIST
67579: LIST
67580: PUSH
67581: LD_INT 4
67583: PUSH
67584: LD_INT 1
67586: PUSH
67587: EMPTY
67588: LIST
67589: LIST
67590: PUSH
67591: LD_INT 4
67593: PUSH
67594: LD_INT 1
67596: NEG
67597: PUSH
67598: EMPTY
67599: LIST
67600: LIST
67601: PUSH
67602: LD_INT 5
67604: PUSH
67605: LD_INT 0
67607: PUSH
67608: EMPTY
67609: LIST
67610: LIST
67611: PUSH
67612: LD_INT 5
67614: PUSH
67615: LD_INT 1
67617: PUSH
67618: EMPTY
67619: LIST
67620: LIST
67621: PUSH
67622: LD_INT 5
67624: PUSH
67625: LD_INT 1
67627: NEG
67628: PUSH
67629: EMPTY
67630: LIST
67631: LIST
67632: PUSH
67633: LD_INT 6
67635: PUSH
67636: LD_INT 0
67638: PUSH
67639: EMPTY
67640: LIST
67641: LIST
67642: PUSH
67643: LD_INT 6
67645: PUSH
67646: LD_INT 1
67648: PUSH
67649: EMPTY
67650: LIST
67651: LIST
67652: PUSH
67653: EMPTY
67654: LIST
67655: LIST
67656: LIST
67657: LIST
67658: LIST
67659: LIST
67660: LIST
67661: LIST
67662: LIST
67663: LIST
67664: LIST
67665: LIST
67666: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
67667: LD_ADDR_VAR 0 31
67671: PUSH
67672: LD_INT 3
67674: PUSH
67675: LD_INT 2
67677: PUSH
67678: EMPTY
67679: LIST
67680: LIST
67681: PUSH
67682: LD_INT 3
67684: PUSH
67685: LD_INT 3
67687: PUSH
67688: EMPTY
67689: LIST
67690: LIST
67691: PUSH
67692: LD_INT 2
67694: PUSH
67695: LD_INT 3
67697: PUSH
67698: EMPTY
67699: LIST
67700: LIST
67701: PUSH
67702: LD_INT 4
67704: PUSH
67705: LD_INT 3
67707: PUSH
67708: EMPTY
67709: LIST
67710: LIST
67711: PUSH
67712: LD_INT 4
67714: PUSH
67715: LD_INT 4
67717: PUSH
67718: EMPTY
67719: LIST
67720: LIST
67721: PUSH
67722: LD_INT 3
67724: PUSH
67725: LD_INT 4
67727: PUSH
67728: EMPTY
67729: LIST
67730: LIST
67731: PUSH
67732: LD_INT 5
67734: PUSH
67735: LD_INT 4
67737: PUSH
67738: EMPTY
67739: LIST
67740: LIST
67741: PUSH
67742: LD_INT 5
67744: PUSH
67745: LD_INT 5
67747: PUSH
67748: EMPTY
67749: LIST
67750: LIST
67751: PUSH
67752: LD_INT 4
67754: PUSH
67755: LD_INT 5
67757: PUSH
67758: EMPTY
67759: LIST
67760: LIST
67761: PUSH
67762: LD_INT 6
67764: PUSH
67765: LD_INT 5
67767: PUSH
67768: EMPTY
67769: LIST
67770: LIST
67771: PUSH
67772: LD_INT 6
67774: PUSH
67775: LD_INT 6
67777: PUSH
67778: EMPTY
67779: LIST
67780: LIST
67781: PUSH
67782: LD_INT 5
67784: PUSH
67785: LD_INT 6
67787: PUSH
67788: EMPTY
67789: LIST
67790: LIST
67791: PUSH
67792: EMPTY
67793: LIST
67794: LIST
67795: LIST
67796: LIST
67797: LIST
67798: LIST
67799: LIST
67800: LIST
67801: LIST
67802: LIST
67803: LIST
67804: LIST
67805: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
67806: LD_ADDR_VAR 0 32
67810: PUSH
67811: LD_INT 1
67813: PUSH
67814: LD_INT 3
67816: PUSH
67817: EMPTY
67818: LIST
67819: LIST
67820: PUSH
67821: LD_INT 0
67823: PUSH
67824: LD_INT 3
67826: PUSH
67827: EMPTY
67828: LIST
67829: LIST
67830: PUSH
67831: LD_INT 1
67833: NEG
67834: PUSH
67835: LD_INT 2
67837: PUSH
67838: EMPTY
67839: LIST
67840: LIST
67841: PUSH
67842: LD_INT 1
67844: PUSH
67845: LD_INT 4
67847: PUSH
67848: EMPTY
67849: LIST
67850: LIST
67851: PUSH
67852: LD_INT 0
67854: PUSH
67855: LD_INT 4
67857: PUSH
67858: EMPTY
67859: LIST
67860: LIST
67861: PUSH
67862: LD_INT 1
67864: NEG
67865: PUSH
67866: LD_INT 3
67868: PUSH
67869: EMPTY
67870: LIST
67871: LIST
67872: PUSH
67873: LD_INT 1
67875: PUSH
67876: LD_INT 5
67878: PUSH
67879: EMPTY
67880: LIST
67881: LIST
67882: PUSH
67883: LD_INT 0
67885: PUSH
67886: LD_INT 5
67888: PUSH
67889: EMPTY
67890: LIST
67891: LIST
67892: PUSH
67893: LD_INT 1
67895: NEG
67896: PUSH
67897: LD_INT 4
67899: PUSH
67900: EMPTY
67901: LIST
67902: LIST
67903: PUSH
67904: LD_INT 1
67906: PUSH
67907: LD_INT 6
67909: PUSH
67910: EMPTY
67911: LIST
67912: LIST
67913: PUSH
67914: LD_INT 0
67916: PUSH
67917: LD_INT 6
67919: PUSH
67920: EMPTY
67921: LIST
67922: LIST
67923: PUSH
67924: LD_INT 1
67926: NEG
67927: PUSH
67928: LD_INT 5
67930: PUSH
67931: EMPTY
67932: LIST
67933: LIST
67934: PUSH
67935: EMPTY
67936: LIST
67937: LIST
67938: LIST
67939: LIST
67940: LIST
67941: LIST
67942: LIST
67943: LIST
67944: LIST
67945: LIST
67946: LIST
67947: LIST
67948: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
67949: LD_ADDR_VAR 0 33
67953: PUSH
67954: LD_INT 2
67956: NEG
67957: PUSH
67958: LD_INT 1
67960: PUSH
67961: EMPTY
67962: LIST
67963: LIST
67964: PUSH
67965: LD_INT 3
67967: NEG
67968: PUSH
67969: LD_INT 0
67971: PUSH
67972: EMPTY
67973: LIST
67974: LIST
67975: PUSH
67976: LD_INT 3
67978: NEG
67979: PUSH
67980: LD_INT 1
67982: NEG
67983: PUSH
67984: EMPTY
67985: LIST
67986: LIST
67987: PUSH
67988: LD_INT 3
67990: NEG
67991: PUSH
67992: LD_INT 1
67994: PUSH
67995: EMPTY
67996: LIST
67997: LIST
67998: PUSH
67999: LD_INT 4
68001: NEG
68002: PUSH
68003: LD_INT 0
68005: PUSH
68006: EMPTY
68007: LIST
68008: LIST
68009: PUSH
68010: LD_INT 4
68012: NEG
68013: PUSH
68014: LD_INT 1
68016: NEG
68017: PUSH
68018: EMPTY
68019: LIST
68020: LIST
68021: PUSH
68022: LD_INT 4
68024: NEG
68025: PUSH
68026: LD_INT 1
68028: PUSH
68029: EMPTY
68030: LIST
68031: LIST
68032: PUSH
68033: LD_INT 5
68035: NEG
68036: PUSH
68037: LD_INT 0
68039: PUSH
68040: EMPTY
68041: LIST
68042: LIST
68043: PUSH
68044: LD_INT 5
68046: NEG
68047: PUSH
68048: LD_INT 1
68050: NEG
68051: PUSH
68052: EMPTY
68053: LIST
68054: LIST
68055: PUSH
68056: LD_INT 5
68058: NEG
68059: PUSH
68060: LD_INT 1
68062: PUSH
68063: EMPTY
68064: LIST
68065: LIST
68066: PUSH
68067: LD_INT 6
68069: NEG
68070: PUSH
68071: LD_INT 0
68073: PUSH
68074: EMPTY
68075: LIST
68076: LIST
68077: PUSH
68078: LD_INT 6
68080: NEG
68081: PUSH
68082: LD_INT 1
68084: NEG
68085: PUSH
68086: EMPTY
68087: LIST
68088: LIST
68089: PUSH
68090: EMPTY
68091: LIST
68092: LIST
68093: LIST
68094: LIST
68095: LIST
68096: LIST
68097: LIST
68098: LIST
68099: LIST
68100: LIST
68101: LIST
68102: LIST
68103: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
68104: LD_ADDR_VAR 0 34
68108: PUSH
68109: LD_INT 2
68111: NEG
68112: PUSH
68113: LD_INT 3
68115: NEG
68116: PUSH
68117: EMPTY
68118: LIST
68119: LIST
68120: PUSH
68121: LD_INT 3
68123: NEG
68124: PUSH
68125: LD_INT 2
68127: NEG
68128: PUSH
68129: EMPTY
68130: LIST
68131: LIST
68132: PUSH
68133: LD_INT 3
68135: NEG
68136: PUSH
68137: LD_INT 3
68139: NEG
68140: PUSH
68141: EMPTY
68142: LIST
68143: LIST
68144: PUSH
68145: LD_INT 3
68147: NEG
68148: PUSH
68149: LD_INT 4
68151: NEG
68152: PUSH
68153: EMPTY
68154: LIST
68155: LIST
68156: PUSH
68157: LD_INT 4
68159: NEG
68160: PUSH
68161: LD_INT 3
68163: NEG
68164: PUSH
68165: EMPTY
68166: LIST
68167: LIST
68168: PUSH
68169: LD_INT 4
68171: NEG
68172: PUSH
68173: LD_INT 4
68175: NEG
68176: PUSH
68177: EMPTY
68178: LIST
68179: LIST
68180: PUSH
68181: LD_INT 4
68183: NEG
68184: PUSH
68185: LD_INT 5
68187: NEG
68188: PUSH
68189: EMPTY
68190: LIST
68191: LIST
68192: PUSH
68193: LD_INT 5
68195: NEG
68196: PUSH
68197: LD_INT 4
68199: NEG
68200: PUSH
68201: EMPTY
68202: LIST
68203: LIST
68204: PUSH
68205: LD_INT 5
68207: NEG
68208: PUSH
68209: LD_INT 5
68211: NEG
68212: PUSH
68213: EMPTY
68214: LIST
68215: LIST
68216: PUSH
68217: LD_INT 5
68219: NEG
68220: PUSH
68221: LD_INT 6
68223: NEG
68224: PUSH
68225: EMPTY
68226: LIST
68227: LIST
68228: PUSH
68229: LD_INT 6
68231: NEG
68232: PUSH
68233: LD_INT 5
68235: NEG
68236: PUSH
68237: EMPTY
68238: LIST
68239: LIST
68240: PUSH
68241: LD_INT 6
68243: NEG
68244: PUSH
68245: LD_INT 6
68247: NEG
68248: PUSH
68249: EMPTY
68250: LIST
68251: LIST
68252: PUSH
68253: EMPTY
68254: LIST
68255: LIST
68256: LIST
68257: LIST
68258: LIST
68259: LIST
68260: LIST
68261: LIST
68262: LIST
68263: LIST
68264: LIST
68265: LIST
68266: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
68267: LD_ADDR_VAR 0 41
68271: PUSH
68272: LD_INT 0
68274: PUSH
68275: LD_INT 2
68277: NEG
68278: PUSH
68279: EMPTY
68280: LIST
68281: LIST
68282: PUSH
68283: LD_INT 1
68285: NEG
68286: PUSH
68287: LD_INT 3
68289: NEG
68290: PUSH
68291: EMPTY
68292: LIST
68293: LIST
68294: PUSH
68295: LD_INT 1
68297: PUSH
68298: LD_INT 2
68300: NEG
68301: PUSH
68302: EMPTY
68303: LIST
68304: LIST
68305: PUSH
68306: EMPTY
68307: LIST
68308: LIST
68309: LIST
68310: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
68311: LD_ADDR_VAR 0 42
68315: PUSH
68316: LD_INT 2
68318: PUSH
68319: LD_INT 0
68321: PUSH
68322: EMPTY
68323: LIST
68324: LIST
68325: PUSH
68326: LD_INT 2
68328: PUSH
68329: LD_INT 1
68331: NEG
68332: PUSH
68333: EMPTY
68334: LIST
68335: LIST
68336: PUSH
68337: LD_INT 3
68339: PUSH
68340: LD_INT 1
68342: PUSH
68343: EMPTY
68344: LIST
68345: LIST
68346: PUSH
68347: EMPTY
68348: LIST
68349: LIST
68350: LIST
68351: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
68352: LD_ADDR_VAR 0 43
68356: PUSH
68357: LD_INT 2
68359: PUSH
68360: LD_INT 2
68362: PUSH
68363: EMPTY
68364: LIST
68365: LIST
68366: PUSH
68367: LD_INT 3
68369: PUSH
68370: LD_INT 2
68372: PUSH
68373: EMPTY
68374: LIST
68375: LIST
68376: PUSH
68377: LD_INT 2
68379: PUSH
68380: LD_INT 3
68382: PUSH
68383: EMPTY
68384: LIST
68385: LIST
68386: PUSH
68387: EMPTY
68388: LIST
68389: LIST
68390: LIST
68391: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
68392: LD_ADDR_VAR 0 44
68396: PUSH
68397: LD_INT 0
68399: PUSH
68400: LD_INT 2
68402: PUSH
68403: EMPTY
68404: LIST
68405: LIST
68406: PUSH
68407: LD_INT 1
68409: PUSH
68410: LD_INT 3
68412: PUSH
68413: EMPTY
68414: LIST
68415: LIST
68416: PUSH
68417: LD_INT 1
68419: NEG
68420: PUSH
68421: LD_INT 2
68423: PUSH
68424: EMPTY
68425: LIST
68426: LIST
68427: PUSH
68428: EMPTY
68429: LIST
68430: LIST
68431: LIST
68432: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
68433: LD_ADDR_VAR 0 45
68437: PUSH
68438: LD_INT 2
68440: NEG
68441: PUSH
68442: LD_INT 0
68444: PUSH
68445: EMPTY
68446: LIST
68447: LIST
68448: PUSH
68449: LD_INT 2
68451: NEG
68452: PUSH
68453: LD_INT 1
68455: PUSH
68456: EMPTY
68457: LIST
68458: LIST
68459: PUSH
68460: LD_INT 3
68462: NEG
68463: PUSH
68464: LD_INT 1
68466: NEG
68467: PUSH
68468: EMPTY
68469: LIST
68470: LIST
68471: PUSH
68472: EMPTY
68473: LIST
68474: LIST
68475: LIST
68476: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
68477: LD_ADDR_VAR 0 46
68481: PUSH
68482: LD_INT 2
68484: NEG
68485: PUSH
68486: LD_INT 2
68488: NEG
68489: PUSH
68490: EMPTY
68491: LIST
68492: LIST
68493: PUSH
68494: LD_INT 2
68496: NEG
68497: PUSH
68498: LD_INT 3
68500: NEG
68501: PUSH
68502: EMPTY
68503: LIST
68504: LIST
68505: PUSH
68506: LD_INT 3
68508: NEG
68509: PUSH
68510: LD_INT 2
68512: NEG
68513: PUSH
68514: EMPTY
68515: LIST
68516: LIST
68517: PUSH
68518: EMPTY
68519: LIST
68520: LIST
68521: LIST
68522: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
68523: LD_ADDR_VAR 0 47
68527: PUSH
68528: LD_INT 2
68530: NEG
68531: PUSH
68532: LD_INT 3
68534: NEG
68535: PUSH
68536: EMPTY
68537: LIST
68538: LIST
68539: PUSH
68540: LD_INT 1
68542: NEG
68543: PUSH
68544: LD_INT 3
68546: NEG
68547: PUSH
68548: EMPTY
68549: LIST
68550: LIST
68551: PUSH
68552: EMPTY
68553: LIST
68554: LIST
68555: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
68556: LD_ADDR_VAR 0 48
68560: PUSH
68561: LD_INT 1
68563: PUSH
68564: LD_INT 2
68566: NEG
68567: PUSH
68568: EMPTY
68569: LIST
68570: LIST
68571: PUSH
68572: LD_INT 2
68574: PUSH
68575: LD_INT 1
68577: NEG
68578: PUSH
68579: EMPTY
68580: LIST
68581: LIST
68582: PUSH
68583: EMPTY
68584: LIST
68585: LIST
68586: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
68587: LD_ADDR_VAR 0 49
68591: PUSH
68592: LD_INT 3
68594: PUSH
68595: LD_INT 1
68597: PUSH
68598: EMPTY
68599: LIST
68600: LIST
68601: PUSH
68602: LD_INT 3
68604: PUSH
68605: LD_INT 2
68607: PUSH
68608: EMPTY
68609: LIST
68610: LIST
68611: PUSH
68612: EMPTY
68613: LIST
68614: LIST
68615: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
68616: LD_ADDR_VAR 0 50
68620: PUSH
68621: LD_INT 2
68623: PUSH
68624: LD_INT 3
68626: PUSH
68627: EMPTY
68628: LIST
68629: LIST
68630: PUSH
68631: LD_INT 1
68633: PUSH
68634: LD_INT 3
68636: PUSH
68637: EMPTY
68638: LIST
68639: LIST
68640: PUSH
68641: EMPTY
68642: LIST
68643: LIST
68644: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
68645: LD_ADDR_VAR 0 51
68649: PUSH
68650: LD_INT 1
68652: NEG
68653: PUSH
68654: LD_INT 2
68656: PUSH
68657: EMPTY
68658: LIST
68659: LIST
68660: PUSH
68661: LD_INT 2
68663: NEG
68664: PUSH
68665: LD_INT 1
68667: PUSH
68668: EMPTY
68669: LIST
68670: LIST
68671: PUSH
68672: EMPTY
68673: LIST
68674: LIST
68675: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
68676: LD_ADDR_VAR 0 52
68680: PUSH
68681: LD_INT 3
68683: NEG
68684: PUSH
68685: LD_INT 1
68687: NEG
68688: PUSH
68689: EMPTY
68690: LIST
68691: LIST
68692: PUSH
68693: LD_INT 3
68695: NEG
68696: PUSH
68697: LD_INT 2
68699: NEG
68700: PUSH
68701: EMPTY
68702: LIST
68703: LIST
68704: PUSH
68705: EMPTY
68706: LIST
68707: LIST
68708: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68709: LD_ADDR_VAR 0 53
68713: PUSH
68714: LD_INT 1
68716: NEG
68717: PUSH
68718: LD_INT 3
68720: NEG
68721: PUSH
68722: EMPTY
68723: LIST
68724: LIST
68725: PUSH
68726: LD_INT 0
68728: PUSH
68729: LD_INT 3
68731: NEG
68732: PUSH
68733: EMPTY
68734: LIST
68735: LIST
68736: PUSH
68737: LD_INT 1
68739: PUSH
68740: LD_INT 2
68742: NEG
68743: PUSH
68744: EMPTY
68745: LIST
68746: LIST
68747: PUSH
68748: EMPTY
68749: LIST
68750: LIST
68751: LIST
68752: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68753: LD_ADDR_VAR 0 54
68757: PUSH
68758: LD_INT 2
68760: PUSH
68761: LD_INT 1
68763: NEG
68764: PUSH
68765: EMPTY
68766: LIST
68767: LIST
68768: PUSH
68769: LD_INT 3
68771: PUSH
68772: LD_INT 0
68774: PUSH
68775: EMPTY
68776: LIST
68777: LIST
68778: PUSH
68779: LD_INT 3
68781: PUSH
68782: LD_INT 1
68784: PUSH
68785: EMPTY
68786: LIST
68787: LIST
68788: PUSH
68789: EMPTY
68790: LIST
68791: LIST
68792: LIST
68793: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68794: LD_ADDR_VAR 0 55
68798: PUSH
68799: LD_INT 3
68801: PUSH
68802: LD_INT 2
68804: PUSH
68805: EMPTY
68806: LIST
68807: LIST
68808: PUSH
68809: LD_INT 3
68811: PUSH
68812: LD_INT 3
68814: PUSH
68815: EMPTY
68816: LIST
68817: LIST
68818: PUSH
68819: LD_INT 2
68821: PUSH
68822: LD_INT 3
68824: PUSH
68825: EMPTY
68826: LIST
68827: LIST
68828: PUSH
68829: EMPTY
68830: LIST
68831: LIST
68832: LIST
68833: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68834: LD_ADDR_VAR 0 56
68838: PUSH
68839: LD_INT 1
68841: PUSH
68842: LD_INT 3
68844: PUSH
68845: EMPTY
68846: LIST
68847: LIST
68848: PUSH
68849: LD_INT 0
68851: PUSH
68852: LD_INT 3
68854: PUSH
68855: EMPTY
68856: LIST
68857: LIST
68858: PUSH
68859: LD_INT 1
68861: NEG
68862: PUSH
68863: LD_INT 2
68865: PUSH
68866: EMPTY
68867: LIST
68868: LIST
68869: PUSH
68870: EMPTY
68871: LIST
68872: LIST
68873: LIST
68874: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68875: LD_ADDR_VAR 0 57
68879: PUSH
68880: LD_INT 2
68882: NEG
68883: PUSH
68884: LD_INT 1
68886: PUSH
68887: EMPTY
68888: LIST
68889: LIST
68890: PUSH
68891: LD_INT 3
68893: NEG
68894: PUSH
68895: LD_INT 0
68897: PUSH
68898: EMPTY
68899: LIST
68900: LIST
68901: PUSH
68902: LD_INT 3
68904: NEG
68905: PUSH
68906: LD_INT 1
68908: NEG
68909: PUSH
68910: EMPTY
68911: LIST
68912: LIST
68913: PUSH
68914: EMPTY
68915: LIST
68916: LIST
68917: LIST
68918: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68919: LD_ADDR_VAR 0 58
68923: PUSH
68924: LD_INT 2
68926: NEG
68927: PUSH
68928: LD_INT 3
68930: NEG
68931: PUSH
68932: EMPTY
68933: LIST
68934: LIST
68935: PUSH
68936: LD_INT 3
68938: NEG
68939: PUSH
68940: LD_INT 2
68942: NEG
68943: PUSH
68944: EMPTY
68945: LIST
68946: LIST
68947: PUSH
68948: LD_INT 3
68950: NEG
68951: PUSH
68952: LD_INT 3
68954: NEG
68955: PUSH
68956: EMPTY
68957: LIST
68958: LIST
68959: PUSH
68960: EMPTY
68961: LIST
68962: LIST
68963: LIST
68964: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
68965: LD_ADDR_VAR 0 59
68969: PUSH
68970: LD_INT 1
68972: NEG
68973: PUSH
68974: LD_INT 2
68976: NEG
68977: PUSH
68978: EMPTY
68979: LIST
68980: LIST
68981: PUSH
68982: LD_INT 0
68984: PUSH
68985: LD_INT 2
68987: NEG
68988: PUSH
68989: EMPTY
68990: LIST
68991: LIST
68992: PUSH
68993: LD_INT 1
68995: PUSH
68996: LD_INT 1
68998: NEG
68999: PUSH
69000: EMPTY
69001: LIST
69002: LIST
69003: PUSH
69004: EMPTY
69005: LIST
69006: LIST
69007: LIST
69008: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
69009: LD_ADDR_VAR 0 60
69013: PUSH
69014: LD_INT 1
69016: PUSH
69017: LD_INT 1
69019: NEG
69020: PUSH
69021: EMPTY
69022: LIST
69023: LIST
69024: PUSH
69025: LD_INT 2
69027: PUSH
69028: LD_INT 0
69030: PUSH
69031: EMPTY
69032: LIST
69033: LIST
69034: PUSH
69035: LD_INT 2
69037: PUSH
69038: LD_INT 1
69040: PUSH
69041: EMPTY
69042: LIST
69043: LIST
69044: PUSH
69045: EMPTY
69046: LIST
69047: LIST
69048: LIST
69049: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
69050: LD_ADDR_VAR 0 61
69054: PUSH
69055: LD_INT 2
69057: PUSH
69058: LD_INT 1
69060: PUSH
69061: EMPTY
69062: LIST
69063: LIST
69064: PUSH
69065: LD_INT 2
69067: PUSH
69068: LD_INT 2
69070: PUSH
69071: EMPTY
69072: LIST
69073: LIST
69074: PUSH
69075: LD_INT 1
69077: PUSH
69078: LD_INT 2
69080: PUSH
69081: EMPTY
69082: LIST
69083: LIST
69084: PUSH
69085: EMPTY
69086: LIST
69087: LIST
69088: LIST
69089: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
69090: LD_ADDR_VAR 0 62
69094: PUSH
69095: LD_INT 1
69097: PUSH
69098: LD_INT 2
69100: PUSH
69101: EMPTY
69102: LIST
69103: LIST
69104: PUSH
69105: LD_INT 0
69107: PUSH
69108: LD_INT 2
69110: PUSH
69111: EMPTY
69112: LIST
69113: LIST
69114: PUSH
69115: LD_INT 1
69117: NEG
69118: PUSH
69119: LD_INT 1
69121: PUSH
69122: EMPTY
69123: LIST
69124: LIST
69125: PUSH
69126: EMPTY
69127: LIST
69128: LIST
69129: LIST
69130: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
69131: LD_ADDR_VAR 0 63
69135: PUSH
69136: LD_INT 1
69138: NEG
69139: PUSH
69140: LD_INT 1
69142: PUSH
69143: EMPTY
69144: LIST
69145: LIST
69146: PUSH
69147: LD_INT 2
69149: NEG
69150: PUSH
69151: LD_INT 0
69153: PUSH
69154: EMPTY
69155: LIST
69156: LIST
69157: PUSH
69158: LD_INT 2
69160: NEG
69161: PUSH
69162: LD_INT 1
69164: NEG
69165: PUSH
69166: EMPTY
69167: LIST
69168: LIST
69169: PUSH
69170: EMPTY
69171: LIST
69172: LIST
69173: LIST
69174: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69175: LD_ADDR_VAR 0 64
69179: PUSH
69180: LD_INT 1
69182: NEG
69183: PUSH
69184: LD_INT 2
69186: NEG
69187: PUSH
69188: EMPTY
69189: LIST
69190: LIST
69191: PUSH
69192: LD_INT 2
69194: NEG
69195: PUSH
69196: LD_INT 1
69198: NEG
69199: PUSH
69200: EMPTY
69201: LIST
69202: LIST
69203: PUSH
69204: LD_INT 2
69206: NEG
69207: PUSH
69208: LD_INT 2
69210: NEG
69211: PUSH
69212: EMPTY
69213: LIST
69214: LIST
69215: PUSH
69216: EMPTY
69217: LIST
69218: LIST
69219: LIST
69220: ST_TO_ADDR
// end ; 2 :
69221: GO 72487
69223: LD_INT 2
69225: DOUBLE
69226: EQUAL
69227: IFTRUE 69231
69229: GO 72486
69231: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
69232: LD_ADDR_VAR 0 29
69236: PUSH
69237: LD_INT 4
69239: PUSH
69240: LD_INT 0
69242: PUSH
69243: EMPTY
69244: LIST
69245: LIST
69246: PUSH
69247: LD_INT 4
69249: PUSH
69250: LD_INT 1
69252: NEG
69253: PUSH
69254: EMPTY
69255: LIST
69256: LIST
69257: PUSH
69258: LD_INT 5
69260: PUSH
69261: LD_INT 0
69263: PUSH
69264: EMPTY
69265: LIST
69266: LIST
69267: PUSH
69268: LD_INT 5
69270: PUSH
69271: LD_INT 1
69273: PUSH
69274: EMPTY
69275: LIST
69276: LIST
69277: PUSH
69278: LD_INT 4
69280: PUSH
69281: LD_INT 1
69283: PUSH
69284: EMPTY
69285: LIST
69286: LIST
69287: PUSH
69288: LD_INT 3
69290: PUSH
69291: LD_INT 0
69293: PUSH
69294: EMPTY
69295: LIST
69296: LIST
69297: PUSH
69298: LD_INT 3
69300: PUSH
69301: LD_INT 1
69303: NEG
69304: PUSH
69305: EMPTY
69306: LIST
69307: LIST
69308: PUSH
69309: LD_INT 3
69311: PUSH
69312: LD_INT 2
69314: NEG
69315: PUSH
69316: EMPTY
69317: LIST
69318: LIST
69319: PUSH
69320: LD_INT 5
69322: PUSH
69323: LD_INT 2
69325: PUSH
69326: EMPTY
69327: LIST
69328: LIST
69329: PUSH
69330: LD_INT 3
69332: PUSH
69333: LD_INT 3
69335: PUSH
69336: EMPTY
69337: LIST
69338: LIST
69339: PUSH
69340: LD_INT 3
69342: PUSH
69343: LD_INT 2
69345: PUSH
69346: EMPTY
69347: LIST
69348: LIST
69349: PUSH
69350: LD_INT 4
69352: PUSH
69353: LD_INT 3
69355: PUSH
69356: EMPTY
69357: LIST
69358: LIST
69359: PUSH
69360: LD_INT 4
69362: PUSH
69363: LD_INT 4
69365: PUSH
69366: EMPTY
69367: LIST
69368: LIST
69369: PUSH
69370: LD_INT 3
69372: PUSH
69373: LD_INT 4
69375: PUSH
69376: EMPTY
69377: LIST
69378: LIST
69379: PUSH
69380: LD_INT 2
69382: PUSH
69383: LD_INT 3
69385: PUSH
69386: EMPTY
69387: LIST
69388: LIST
69389: PUSH
69390: LD_INT 2
69392: PUSH
69393: LD_INT 2
69395: PUSH
69396: EMPTY
69397: LIST
69398: LIST
69399: PUSH
69400: LD_INT 4
69402: PUSH
69403: LD_INT 2
69405: PUSH
69406: EMPTY
69407: LIST
69408: LIST
69409: PUSH
69410: LD_INT 2
69412: PUSH
69413: LD_INT 4
69415: PUSH
69416: EMPTY
69417: LIST
69418: LIST
69419: PUSH
69420: LD_INT 0
69422: PUSH
69423: LD_INT 4
69425: PUSH
69426: EMPTY
69427: LIST
69428: LIST
69429: PUSH
69430: LD_INT 0
69432: PUSH
69433: LD_INT 3
69435: PUSH
69436: EMPTY
69437: LIST
69438: LIST
69439: PUSH
69440: LD_INT 1
69442: PUSH
69443: LD_INT 4
69445: PUSH
69446: EMPTY
69447: LIST
69448: LIST
69449: PUSH
69450: LD_INT 1
69452: PUSH
69453: LD_INT 5
69455: PUSH
69456: EMPTY
69457: LIST
69458: LIST
69459: PUSH
69460: LD_INT 0
69462: PUSH
69463: LD_INT 5
69465: PUSH
69466: EMPTY
69467: LIST
69468: LIST
69469: PUSH
69470: LD_INT 1
69472: NEG
69473: PUSH
69474: LD_INT 4
69476: PUSH
69477: EMPTY
69478: LIST
69479: LIST
69480: PUSH
69481: LD_INT 1
69483: NEG
69484: PUSH
69485: LD_INT 3
69487: PUSH
69488: EMPTY
69489: LIST
69490: LIST
69491: PUSH
69492: LD_INT 2
69494: PUSH
69495: LD_INT 5
69497: PUSH
69498: EMPTY
69499: LIST
69500: LIST
69501: PUSH
69502: LD_INT 2
69504: NEG
69505: PUSH
69506: LD_INT 3
69508: PUSH
69509: EMPTY
69510: LIST
69511: LIST
69512: PUSH
69513: LD_INT 3
69515: NEG
69516: PUSH
69517: LD_INT 0
69519: PUSH
69520: EMPTY
69521: LIST
69522: LIST
69523: PUSH
69524: LD_INT 3
69526: NEG
69527: PUSH
69528: LD_INT 1
69530: NEG
69531: PUSH
69532: EMPTY
69533: LIST
69534: LIST
69535: PUSH
69536: LD_INT 2
69538: NEG
69539: PUSH
69540: LD_INT 0
69542: PUSH
69543: EMPTY
69544: LIST
69545: LIST
69546: PUSH
69547: LD_INT 2
69549: NEG
69550: PUSH
69551: LD_INT 1
69553: PUSH
69554: EMPTY
69555: LIST
69556: LIST
69557: PUSH
69558: LD_INT 3
69560: NEG
69561: PUSH
69562: LD_INT 1
69564: PUSH
69565: EMPTY
69566: LIST
69567: LIST
69568: PUSH
69569: LD_INT 4
69571: NEG
69572: PUSH
69573: LD_INT 0
69575: PUSH
69576: EMPTY
69577: LIST
69578: LIST
69579: PUSH
69580: LD_INT 4
69582: NEG
69583: PUSH
69584: LD_INT 1
69586: NEG
69587: PUSH
69588: EMPTY
69589: LIST
69590: LIST
69591: PUSH
69592: LD_INT 4
69594: NEG
69595: PUSH
69596: LD_INT 2
69598: NEG
69599: PUSH
69600: EMPTY
69601: LIST
69602: LIST
69603: PUSH
69604: LD_INT 2
69606: NEG
69607: PUSH
69608: LD_INT 2
69610: PUSH
69611: EMPTY
69612: LIST
69613: LIST
69614: PUSH
69615: LD_INT 4
69617: NEG
69618: PUSH
69619: LD_INT 4
69621: NEG
69622: PUSH
69623: EMPTY
69624: LIST
69625: LIST
69626: PUSH
69627: LD_INT 4
69629: NEG
69630: PUSH
69631: LD_INT 5
69633: NEG
69634: PUSH
69635: EMPTY
69636: LIST
69637: LIST
69638: PUSH
69639: LD_INT 3
69641: NEG
69642: PUSH
69643: LD_INT 4
69645: NEG
69646: PUSH
69647: EMPTY
69648: LIST
69649: LIST
69650: PUSH
69651: LD_INT 3
69653: NEG
69654: PUSH
69655: LD_INT 3
69657: NEG
69658: PUSH
69659: EMPTY
69660: LIST
69661: LIST
69662: PUSH
69663: LD_INT 4
69665: NEG
69666: PUSH
69667: LD_INT 3
69669: NEG
69670: PUSH
69671: EMPTY
69672: LIST
69673: LIST
69674: PUSH
69675: LD_INT 5
69677: NEG
69678: PUSH
69679: LD_INT 4
69681: NEG
69682: PUSH
69683: EMPTY
69684: LIST
69685: LIST
69686: PUSH
69687: LD_INT 5
69689: NEG
69690: PUSH
69691: LD_INT 5
69693: NEG
69694: PUSH
69695: EMPTY
69696: LIST
69697: LIST
69698: PUSH
69699: LD_INT 3
69701: NEG
69702: PUSH
69703: LD_INT 5
69705: NEG
69706: PUSH
69707: EMPTY
69708: LIST
69709: LIST
69710: PUSH
69711: LD_INT 5
69713: NEG
69714: PUSH
69715: LD_INT 3
69717: NEG
69718: PUSH
69719: EMPTY
69720: LIST
69721: LIST
69722: PUSH
69723: EMPTY
69724: LIST
69725: LIST
69726: LIST
69727: LIST
69728: LIST
69729: LIST
69730: LIST
69731: LIST
69732: LIST
69733: LIST
69734: LIST
69735: LIST
69736: LIST
69737: LIST
69738: LIST
69739: LIST
69740: LIST
69741: LIST
69742: LIST
69743: LIST
69744: LIST
69745: LIST
69746: LIST
69747: LIST
69748: LIST
69749: LIST
69750: LIST
69751: LIST
69752: LIST
69753: LIST
69754: LIST
69755: LIST
69756: LIST
69757: LIST
69758: LIST
69759: LIST
69760: LIST
69761: LIST
69762: LIST
69763: LIST
69764: LIST
69765: LIST
69766: LIST
69767: LIST
69768: LIST
69769: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
69770: LD_ADDR_VAR 0 30
69774: PUSH
69775: LD_INT 4
69777: PUSH
69778: LD_INT 4
69780: PUSH
69781: EMPTY
69782: LIST
69783: LIST
69784: PUSH
69785: LD_INT 4
69787: PUSH
69788: LD_INT 3
69790: PUSH
69791: EMPTY
69792: LIST
69793: LIST
69794: PUSH
69795: LD_INT 5
69797: PUSH
69798: LD_INT 4
69800: PUSH
69801: EMPTY
69802: LIST
69803: LIST
69804: PUSH
69805: LD_INT 5
69807: PUSH
69808: LD_INT 5
69810: PUSH
69811: EMPTY
69812: LIST
69813: LIST
69814: PUSH
69815: LD_INT 4
69817: PUSH
69818: LD_INT 5
69820: PUSH
69821: EMPTY
69822: LIST
69823: LIST
69824: PUSH
69825: LD_INT 3
69827: PUSH
69828: LD_INT 4
69830: PUSH
69831: EMPTY
69832: LIST
69833: LIST
69834: PUSH
69835: LD_INT 3
69837: PUSH
69838: LD_INT 3
69840: PUSH
69841: EMPTY
69842: LIST
69843: LIST
69844: PUSH
69845: LD_INT 5
69847: PUSH
69848: LD_INT 3
69850: PUSH
69851: EMPTY
69852: LIST
69853: LIST
69854: PUSH
69855: LD_INT 3
69857: PUSH
69858: LD_INT 5
69860: PUSH
69861: EMPTY
69862: LIST
69863: LIST
69864: PUSH
69865: LD_INT 0
69867: PUSH
69868: LD_INT 3
69870: PUSH
69871: EMPTY
69872: LIST
69873: LIST
69874: PUSH
69875: LD_INT 0
69877: PUSH
69878: LD_INT 2
69880: PUSH
69881: EMPTY
69882: LIST
69883: LIST
69884: PUSH
69885: LD_INT 1
69887: PUSH
69888: LD_INT 3
69890: PUSH
69891: EMPTY
69892: LIST
69893: LIST
69894: PUSH
69895: LD_INT 1
69897: PUSH
69898: LD_INT 4
69900: PUSH
69901: EMPTY
69902: LIST
69903: LIST
69904: PUSH
69905: LD_INT 0
69907: PUSH
69908: LD_INT 4
69910: PUSH
69911: EMPTY
69912: LIST
69913: LIST
69914: PUSH
69915: LD_INT 1
69917: NEG
69918: PUSH
69919: LD_INT 3
69921: PUSH
69922: EMPTY
69923: LIST
69924: LIST
69925: PUSH
69926: LD_INT 1
69928: NEG
69929: PUSH
69930: LD_INT 2
69932: PUSH
69933: EMPTY
69934: LIST
69935: LIST
69936: PUSH
69937: LD_INT 2
69939: PUSH
69940: LD_INT 4
69942: PUSH
69943: EMPTY
69944: LIST
69945: LIST
69946: PUSH
69947: LD_INT 2
69949: NEG
69950: PUSH
69951: LD_INT 2
69953: PUSH
69954: EMPTY
69955: LIST
69956: LIST
69957: PUSH
69958: LD_INT 4
69960: NEG
69961: PUSH
69962: LD_INT 0
69964: PUSH
69965: EMPTY
69966: LIST
69967: LIST
69968: PUSH
69969: LD_INT 4
69971: NEG
69972: PUSH
69973: LD_INT 1
69975: NEG
69976: PUSH
69977: EMPTY
69978: LIST
69979: LIST
69980: PUSH
69981: LD_INT 3
69983: NEG
69984: PUSH
69985: LD_INT 0
69987: PUSH
69988: EMPTY
69989: LIST
69990: LIST
69991: PUSH
69992: LD_INT 3
69994: NEG
69995: PUSH
69996: LD_INT 1
69998: PUSH
69999: EMPTY
70000: LIST
70001: LIST
70002: PUSH
70003: LD_INT 4
70005: NEG
70006: PUSH
70007: LD_INT 1
70009: PUSH
70010: EMPTY
70011: LIST
70012: LIST
70013: PUSH
70014: LD_INT 5
70016: NEG
70017: PUSH
70018: LD_INT 0
70020: PUSH
70021: EMPTY
70022: LIST
70023: LIST
70024: PUSH
70025: LD_INT 5
70027: NEG
70028: PUSH
70029: LD_INT 1
70031: NEG
70032: PUSH
70033: EMPTY
70034: LIST
70035: LIST
70036: PUSH
70037: LD_INT 5
70039: NEG
70040: PUSH
70041: LD_INT 2
70043: NEG
70044: PUSH
70045: EMPTY
70046: LIST
70047: LIST
70048: PUSH
70049: LD_INT 3
70051: NEG
70052: PUSH
70053: LD_INT 2
70055: PUSH
70056: EMPTY
70057: LIST
70058: LIST
70059: PUSH
70060: LD_INT 3
70062: NEG
70063: PUSH
70064: LD_INT 3
70066: NEG
70067: PUSH
70068: EMPTY
70069: LIST
70070: LIST
70071: PUSH
70072: LD_INT 3
70074: NEG
70075: PUSH
70076: LD_INT 4
70078: NEG
70079: PUSH
70080: EMPTY
70081: LIST
70082: LIST
70083: PUSH
70084: LD_INT 2
70086: NEG
70087: PUSH
70088: LD_INT 3
70090: NEG
70091: PUSH
70092: EMPTY
70093: LIST
70094: LIST
70095: PUSH
70096: LD_INT 2
70098: NEG
70099: PUSH
70100: LD_INT 2
70102: NEG
70103: PUSH
70104: EMPTY
70105: LIST
70106: LIST
70107: PUSH
70108: LD_INT 3
70110: NEG
70111: PUSH
70112: LD_INT 2
70114: NEG
70115: PUSH
70116: EMPTY
70117: LIST
70118: LIST
70119: PUSH
70120: LD_INT 4
70122: NEG
70123: PUSH
70124: LD_INT 3
70126: NEG
70127: PUSH
70128: EMPTY
70129: LIST
70130: LIST
70131: PUSH
70132: LD_INT 4
70134: NEG
70135: PUSH
70136: LD_INT 4
70138: NEG
70139: PUSH
70140: EMPTY
70141: LIST
70142: LIST
70143: PUSH
70144: LD_INT 2
70146: NEG
70147: PUSH
70148: LD_INT 4
70150: NEG
70151: PUSH
70152: EMPTY
70153: LIST
70154: LIST
70155: PUSH
70156: LD_INT 4
70158: NEG
70159: PUSH
70160: LD_INT 2
70162: NEG
70163: PUSH
70164: EMPTY
70165: LIST
70166: LIST
70167: PUSH
70168: LD_INT 0
70170: PUSH
70171: LD_INT 4
70173: NEG
70174: PUSH
70175: EMPTY
70176: LIST
70177: LIST
70178: PUSH
70179: LD_INT 0
70181: PUSH
70182: LD_INT 5
70184: NEG
70185: PUSH
70186: EMPTY
70187: LIST
70188: LIST
70189: PUSH
70190: LD_INT 1
70192: PUSH
70193: LD_INT 4
70195: NEG
70196: PUSH
70197: EMPTY
70198: LIST
70199: LIST
70200: PUSH
70201: LD_INT 1
70203: PUSH
70204: LD_INT 3
70206: NEG
70207: PUSH
70208: EMPTY
70209: LIST
70210: LIST
70211: PUSH
70212: LD_INT 0
70214: PUSH
70215: LD_INT 3
70217: NEG
70218: PUSH
70219: EMPTY
70220: LIST
70221: LIST
70222: PUSH
70223: LD_INT 1
70225: NEG
70226: PUSH
70227: LD_INT 4
70229: NEG
70230: PUSH
70231: EMPTY
70232: LIST
70233: LIST
70234: PUSH
70235: LD_INT 1
70237: NEG
70238: PUSH
70239: LD_INT 5
70241: NEG
70242: PUSH
70243: EMPTY
70244: LIST
70245: LIST
70246: PUSH
70247: LD_INT 2
70249: PUSH
70250: LD_INT 3
70252: NEG
70253: PUSH
70254: EMPTY
70255: LIST
70256: LIST
70257: PUSH
70258: LD_INT 2
70260: NEG
70261: PUSH
70262: LD_INT 5
70264: NEG
70265: PUSH
70266: EMPTY
70267: LIST
70268: LIST
70269: PUSH
70270: EMPTY
70271: LIST
70272: LIST
70273: LIST
70274: LIST
70275: LIST
70276: LIST
70277: LIST
70278: LIST
70279: LIST
70280: LIST
70281: LIST
70282: LIST
70283: LIST
70284: LIST
70285: LIST
70286: LIST
70287: LIST
70288: LIST
70289: LIST
70290: LIST
70291: LIST
70292: LIST
70293: LIST
70294: LIST
70295: LIST
70296: LIST
70297: LIST
70298: LIST
70299: LIST
70300: LIST
70301: LIST
70302: LIST
70303: LIST
70304: LIST
70305: LIST
70306: LIST
70307: LIST
70308: LIST
70309: LIST
70310: LIST
70311: LIST
70312: LIST
70313: LIST
70314: LIST
70315: LIST
70316: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
70317: LD_ADDR_VAR 0 31
70321: PUSH
70322: LD_INT 0
70324: PUSH
70325: LD_INT 4
70327: PUSH
70328: EMPTY
70329: LIST
70330: LIST
70331: PUSH
70332: LD_INT 0
70334: PUSH
70335: LD_INT 3
70337: PUSH
70338: EMPTY
70339: LIST
70340: LIST
70341: PUSH
70342: LD_INT 1
70344: PUSH
70345: LD_INT 4
70347: PUSH
70348: EMPTY
70349: LIST
70350: LIST
70351: PUSH
70352: LD_INT 1
70354: PUSH
70355: LD_INT 5
70357: PUSH
70358: EMPTY
70359: LIST
70360: LIST
70361: PUSH
70362: LD_INT 0
70364: PUSH
70365: LD_INT 5
70367: PUSH
70368: EMPTY
70369: LIST
70370: LIST
70371: PUSH
70372: LD_INT 1
70374: NEG
70375: PUSH
70376: LD_INT 4
70378: PUSH
70379: EMPTY
70380: LIST
70381: LIST
70382: PUSH
70383: LD_INT 1
70385: NEG
70386: PUSH
70387: LD_INT 3
70389: PUSH
70390: EMPTY
70391: LIST
70392: LIST
70393: PUSH
70394: LD_INT 2
70396: PUSH
70397: LD_INT 5
70399: PUSH
70400: EMPTY
70401: LIST
70402: LIST
70403: PUSH
70404: LD_INT 2
70406: NEG
70407: PUSH
70408: LD_INT 3
70410: PUSH
70411: EMPTY
70412: LIST
70413: LIST
70414: PUSH
70415: LD_INT 3
70417: NEG
70418: PUSH
70419: LD_INT 0
70421: PUSH
70422: EMPTY
70423: LIST
70424: LIST
70425: PUSH
70426: LD_INT 3
70428: NEG
70429: PUSH
70430: LD_INT 1
70432: NEG
70433: PUSH
70434: EMPTY
70435: LIST
70436: LIST
70437: PUSH
70438: LD_INT 2
70440: NEG
70441: PUSH
70442: LD_INT 0
70444: PUSH
70445: EMPTY
70446: LIST
70447: LIST
70448: PUSH
70449: LD_INT 2
70451: NEG
70452: PUSH
70453: LD_INT 1
70455: PUSH
70456: EMPTY
70457: LIST
70458: LIST
70459: PUSH
70460: LD_INT 3
70462: NEG
70463: PUSH
70464: LD_INT 1
70466: PUSH
70467: EMPTY
70468: LIST
70469: LIST
70470: PUSH
70471: LD_INT 4
70473: NEG
70474: PUSH
70475: LD_INT 0
70477: PUSH
70478: EMPTY
70479: LIST
70480: LIST
70481: PUSH
70482: LD_INT 4
70484: NEG
70485: PUSH
70486: LD_INT 1
70488: NEG
70489: PUSH
70490: EMPTY
70491: LIST
70492: LIST
70493: PUSH
70494: LD_INT 4
70496: NEG
70497: PUSH
70498: LD_INT 2
70500: NEG
70501: PUSH
70502: EMPTY
70503: LIST
70504: LIST
70505: PUSH
70506: LD_INT 2
70508: NEG
70509: PUSH
70510: LD_INT 2
70512: PUSH
70513: EMPTY
70514: LIST
70515: LIST
70516: PUSH
70517: LD_INT 4
70519: NEG
70520: PUSH
70521: LD_INT 4
70523: NEG
70524: PUSH
70525: EMPTY
70526: LIST
70527: LIST
70528: PUSH
70529: LD_INT 4
70531: NEG
70532: PUSH
70533: LD_INT 5
70535: NEG
70536: PUSH
70537: EMPTY
70538: LIST
70539: LIST
70540: PUSH
70541: LD_INT 3
70543: NEG
70544: PUSH
70545: LD_INT 4
70547: NEG
70548: PUSH
70549: EMPTY
70550: LIST
70551: LIST
70552: PUSH
70553: LD_INT 3
70555: NEG
70556: PUSH
70557: LD_INT 3
70559: NEG
70560: PUSH
70561: EMPTY
70562: LIST
70563: LIST
70564: PUSH
70565: LD_INT 4
70567: NEG
70568: PUSH
70569: LD_INT 3
70571: NEG
70572: PUSH
70573: EMPTY
70574: LIST
70575: LIST
70576: PUSH
70577: LD_INT 5
70579: NEG
70580: PUSH
70581: LD_INT 4
70583: NEG
70584: PUSH
70585: EMPTY
70586: LIST
70587: LIST
70588: PUSH
70589: LD_INT 5
70591: NEG
70592: PUSH
70593: LD_INT 5
70595: NEG
70596: PUSH
70597: EMPTY
70598: LIST
70599: LIST
70600: PUSH
70601: LD_INT 3
70603: NEG
70604: PUSH
70605: LD_INT 5
70607: NEG
70608: PUSH
70609: EMPTY
70610: LIST
70611: LIST
70612: PUSH
70613: LD_INT 5
70615: NEG
70616: PUSH
70617: LD_INT 3
70619: NEG
70620: PUSH
70621: EMPTY
70622: LIST
70623: LIST
70624: PUSH
70625: LD_INT 0
70627: PUSH
70628: LD_INT 3
70630: NEG
70631: PUSH
70632: EMPTY
70633: LIST
70634: LIST
70635: PUSH
70636: LD_INT 0
70638: PUSH
70639: LD_INT 4
70641: NEG
70642: PUSH
70643: EMPTY
70644: LIST
70645: LIST
70646: PUSH
70647: LD_INT 1
70649: PUSH
70650: LD_INT 3
70652: NEG
70653: PUSH
70654: EMPTY
70655: LIST
70656: LIST
70657: PUSH
70658: LD_INT 1
70660: PUSH
70661: LD_INT 2
70663: NEG
70664: PUSH
70665: EMPTY
70666: LIST
70667: LIST
70668: PUSH
70669: LD_INT 0
70671: PUSH
70672: LD_INT 2
70674: NEG
70675: PUSH
70676: EMPTY
70677: LIST
70678: LIST
70679: PUSH
70680: LD_INT 1
70682: NEG
70683: PUSH
70684: LD_INT 3
70686: NEG
70687: PUSH
70688: EMPTY
70689: LIST
70690: LIST
70691: PUSH
70692: LD_INT 1
70694: NEG
70695: PUSH
70696: LD_INT 4
70698: NEG
70699: PUSH
70700: EMPTY
70701: LIST
70702: LIST
70703: PUSH
70704: LD_INT 2
70706: PUSH
70707: LD_INT 2
70709: NEG
70710: PUSH
70711: EMPTY
70712: LIST
70713: LIST
70714: PUSH
70715: LD_INT 2
70717: NEG
70718: PUSH
70719: LD_INT 4
70721: NEG
70722: PUSH
70723: EMPTY
70724: LIST
70725: LIST
70726: PUSH
70727: LD_INT 4
70729: PUSH
70730: LD_INT 0
70732: PUSH
70733: EMPTY
70734: LIST
70735: LIST
70736: PUSH
70737: LD_INT 4
70739: PUSH
70740: LD_INT 1
70742: NEG
70743: PUSH
70744: EMPTY
70745: LIST
70746: LIST
70747: PUSH
70748: LD_INT 5
70750: PUSH
70751: LD_INT 0
70753: PUSH
70754: EMPTY
70755: LIST
70756: LIST
70757: PUSH
70758: LD_INT 5
70760: PUSH
70761: LD_INT 1
70763: PUSH
70764: EMPTY
70765: LIST
70766: LIST
70767: PUSH
70768: LD_INT 4
70770: PUSH
70771: LD_INT 1
70773: PUSH
70774: EMPTY
70775: LIST
70776: LIST
70777: PUSH
70778: LD_INT 3
70780: PUSH
70781: LD_INT 0
70783: PUSH
70784: EMPTY
70785: LIST
70786: LIST
70787: PUSH
70788: LD_INT 3
70790: PUSH
70791: LD_INT 1
70793: NEG
70794: PUSH
70795: EMPTY
70796: LIST
70797: LIST
70798: PUSH
70799: LD_INT 3
70801: PUSH
70802: LD_INT 2
70804: NEG
70805: PUSH
70806: EMPTY
70807: LIST
70808: LIST
70809: PUSH
70810: LD_INT 5
70812: PUSH
70813: LD_INT 2
70815: PUSH
70816: EMPTY
70817: LIST
70818: LIST
70819: PUSH
70820: EMPTY
70821: LIST
70822: LIST
70823: LIST
70824: LIST
70825: LIST
70826: LIST
70827: LIST
70828: LIST
70829: LIST
70830: LIST
70831: LIST
70832: LIST
70833: LIST
70834: LIST
70835: LIST
70836: LIST
70837: LIST
70838: LIST
70839: LIST
70840: LIST
70841: LIST
70842: LIST
70843: LIST
70844: LIST
70845: LIST
70846: LIST
70847: LIST
70848: LIST
70849: LIST
70850: LIST
70851: LIST
70852: LIST
70853: LIST
70854: LIST
70855: LIST
70856: LIST
70857: LIST
70858: LIST
70859: LIST
70860: LIST
70861: LIST
70862: LIST
70863: LIST
70864: LIST
70865: LIST
70866: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
70867: LD_ADDR_VAR 0 32
70871: PUSH
70872: LD_INT 4
70874: NEG
70875: PUSH
70876: LD_INT 0
70878: PUSH
70879: EMPTY
70880: LIST
70881: LIST
70882: PUSH
70883: LD_INT 4
70885: NEG
70886: PUSH
70887: LD_INT 1
70889: NEG
70890: PUSH
70891: EMPTY
70892: LIST
70893: LIST
70894: PUSH
70895: LD_INT 3
70897: NEG
70898: PUSH
70899: LD_INT 0
70901: PUSH
70902: EMPTY
70903: LIST
70904: LIST
70905: PUSH
70906: LD_INT 3
70908: NEG
70909: PUSH
70910: LD_INT 1
70912: PUSH
70913: EMPTY
70914: LIST
70915: LIST
70916: PUSH
70917: LD_INT 4
70919: NEG
70920: PUSH
70921: LD_INT 1
70923: PUSH
70924: EMPTY
70925: LIST
70926: LIST
70927: PUSH
70928: LD_INT 5
70930: NEG
70931: PUSH
70932: LD_INT 0
70934: PUSH
70935: EMPTY
70936: LIST
70937: LIST
70938: PUSH
70939: LD_INT 5
70941: NEG
70942: PUSH
70943: LD_INT 1
70945: NEG
70946: PUSH
70947: EMPTY
70948: LIST
70949: LIST
70950: PUSH
70951: LD_INT 5
70953: NEG
70954: PUSH
70955: LD_INT 2
70957: NEG
70958: PUSH
70959: EMPTY
70960: LIST
70961: LIST
70962: PUSH
70963: LD_INT 3
70965: NEG
70966: PUSH
70967: LD_INT 2
70969: PUSH
70970: EMPTY
70971: LIST
70972: LIST
70973: PUSH
70974: LD_INT 3
70976: NEG
70977: PUSH
70978: LD_INT 3
70980: NEG
70981: PUSH
70982: EMPTY
70983: LIST
70984: LIST
70985: PUSH
70986: LD_INT 3
70988: NEG
70989: PUSH
70990: LD_INT 4
70992: NEG
70993: PUSH
70994: EMPTY
70995: LIST
70996: LIST
70997: PUSH
70998: LD_INT 2
71000: NEG
71001: PUSH
71002: LD_INT 3
71004: NEG
71005: PUSH
71006: EMPTY
71007: LIST
71008: LIST
71009: PUSH
71010: LD_INT 2
71012: NEG
71013: PUSH
71014: LD_INT 2
71016: NEG
71017: PUSH
71018: EMPTY
71019: LIST
71020: LIST
71021: PUSH
71022: LD_INT 3
71024: NEG
71025: PUSH
71026: LD_INT 2
71028: NEG
71029: PUSH
71030: EMPTY
71031: LIST
71032: LIST
71033: PUSH
71034: LD_INT 4
71036: NEG
71037: PUSH
71038: LD_INT 3
71040: NEG
71041: PUSH
71042: EMPTY
71043: LIST
71044: LIST
71045: PUSH
71046: LD_INT 4
71048: NEG
71049: PUSH
71050: LD_INT 4
71052: NEG
71053: PUSH
71054: EMPTY
71055: LIST
71056: LIST
71057: PUSH
71058: LD_INT 2
71060: NEG
71061: PUSH
71062: LD_INT 4
71064: NEG
71065: PUSH
71066: EMPTY
71067: LIST
71068: LIST
71069: PUSH
71070: LD_INT 4
71072: NEG
71073: PUSH
71074: LD_INT 2
71076: NEG
71077: PUSH
71078: EMPTY
71079: LIST
71080: LIST
71081: PUSH
71082: LD_INT 0
71084: PUSH
71085: LD_INT 4
71087: NEG
71088: PUSH
71089: EMPTY
71090: LIST
71091: LIST
71092: PUSH
71093: LD_INT 0
71095: PUSH
71096: LD_INT 5
71098: NEG
71099: PUSH
71100: EMPTY
71101: LIST
71102: LIST
71103: PUSH
71104: LD_INT 1
71106: PUSH
71107: LD_INT 4
71109: NEG
71110: PUSH
71111: EMPTY
71112: LIST
71113: LIST
71114: PUSH
71115: LD_INT 1
71117: PUSH
71118: LD_INT 3
71120: NEG
71121: PUSH
71122: EMPTY
71123: LIST
71124: LIST
71125: PUSH
71126: LD_INT 0
71128: PUSH
71129: LD_INT 3
71131: NEG
71132: PUSH
71133: EMPTY
71134: LIST
71135: LIST
71136: PUSH
71137: LD_INT 1
71139: NEG
71140: PUSH
71141: LD_INT 4
71143: NEG
71144: PUSH
71145: EMPTY
71146: LIST
71147: LIST
71148: PUSH
71149: LD_INT 1
71151: NEG
71152: PUSH
71153: LD_INT 5
71155: NEG
71156: PUSH
71157: EMPTY
71158: LIST
71159: LIST
71160: PUSH
71161: LD_INT 2
71163: PUSH
71164: LD_INT 3
71166: NEG
71167: PUSH
71168: EMPTY
71169: LIST
71170: LIST
71171: PUSH
71172: LD_INT 2
71174: NEG
71175: PUSH
71176: LD_INT 5
71178: NEG
71179: PUSH
71180: EMPTY
71181: LIST
71182: LIST
71183: PUSH
71184: LD_INT 3
71186: PUSH
71187: LD_INT 0
71189: PUSH
71190: EMPTY
71191: LIST
71192: LIST
71193: PUSH
71194: LD_INT 3
71196: PUSH
71197: LD_INT 1
71199: NEG
71200: PUSH
71201: EMPTY
71202: LIST
71203: LIST
71204: PUSH
71205: LD_INT 4
71207: PUSH
71208: LD_INT 0
71210: PUSH
71211: EMPTY
71212: LIST
71213: LIST
71214: PUSH
71215: LD_INT 4
71217: PUSH
71218: LD_INT 1
71220: PUSH
71221: EMPTY
71222: LIST
71223: LIST
71224: PUSH
71225: LD_INT 3
71227: PUSH
71228: LD_INT 1
71230: PUSH
71231: EMPTY
71232: LIST
71233: LIST
71234: PUSH
71235: LD_INT 2
71237: PUSH
71238: LD_INT 0
71240: PUSH
71241: EMPTY
71242: LIST
71243: LIST
71244: PUSH
71245: LD_INT 2
71247: PUSH
71248: LD_INT 1
71250: NEG
71251: PUSH
71252: EMPTY
71253: LIST
71254: LIST
71255: PUSH
71256: LD_INT 2
71258: PUSH
71259: LD_INT 2
71261: NEG
71262: PUSH
71263: EMPTY
71264: LIST
71265: LIST
71266: PUSH
71267: LD_INT 4
71269: PUSH
71270: LD_INT 2
71272: PUSH
71273: EMPTY
71274: LIST
71275: LIST
71276: PUSH
71277: LD_INT 4
71279: PUSH
71280: LD_INT 4
71282: PUSH
71283: EMPTY
71284: LIST
71285: LIST
71286: PUSH
71287: LD_INT 4
71289: PUSH
71290: LD_INT 3
71292: PUSH
71293: EMPTY
71294: LIST
71295: LIST
71296: PUSH
71297: LD_INT 5
71299: PUSH
71300: LD_INT 4
71302: PUSH
71303: EMPTY
71304: LIST
71305: LIST
71306: PUSH
71307: LD_INT 5
71309: PUSH
71310: LD_INT 5
71312: PUSH
71313: EMPTY
71314: LIST
71315: LIST
71316: PUSH
71317: LD_INT 4
71319: PUSH
71320: LD_INT 5
71322: PUSH
71323: EMPTY
71324: LIST
71325: LIST
71326: PUSH
71327: LD_INT 3
71329: PUSH
71330: LD_INT 4
71332: PUSH
71333: EMPTY
71334: LIST
71335: LIST
71336: PUSH
71337: LD_INT 3
71339: PUSH
71340: LD_INT 3
71342: PUSH
71343: EMPTY
71344: LIST
71345: LIST
71346: PUSH
71347: LD_INT 5
71349: PUSH
71350: LD_INT 3
71352: PUSH
71353: EMPTY
71354: LIST
71355: LIST
71356: PUSH
71357: LD_INT 3
71359: PUSH
71360: LD_INT 5
71362: PUSH
71363: EMPTY
71364: LIST
71365: LIST
71366: PUSH
71367: EMPTY
71368: LIST
71369: LIST
71370: LIST
71371: LIST
71372: LIST
71373: LIST
71374: LIST
71375: LIST
71376: LIST
71377: LIST
71378: LIST
71379: LIST
71380: LIST
71381: LIST
71382: LIST
71383: LIST
71384: LIST
71385: LIST
71386: LIST
71387: LIST
71388: LIST
71389: LIST
71390: LIST
71391: LIST
71392: LIST
71393: LIST
71394: LIST
71395: LIST
71396: LIST
71397: LIST
71398: LIST
71399: LIST
71400: LIST
71401: LIST
71402: LIST
71403: LIST
71404: LIST
71405: LIST
71406: LIST
71407: LIST
71408: LIST
71409: LIST
71410: LIST
71411: LIST
71412: LIST
71413: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
71414: LD_ADDR_VAR 0 33
71418: PUSH
71419: LD_INT 4
71421: NEG
71422: PUSH
71423: LD_INT 4
71425: NEG
71426: PUSH
71427: EMPTY
71428: LIST
71429: LIST
71430: PUSH
71431: LD_INT 4
71433: NEG
71434: PUSH
71435: LD_INT 5
71437: NEG
71438: PUSH
71439: EMPTY
71440: LIST
71441: LIST
71442: PUSH
71443: LD_INT 3
71445: NEG
71446: PUSH
71447: LD_INT 4
71449: NEG
71450: PUSH
71451: EMPTY
71452: LIST
71453: LIST
71454: PUSH
71455: LD_INT 3
71457: NEG
71458: PUSH
71459: LD_INT 3
71461: NEG
71462: PUSH
71463: EMPTY
71464: LIST
71465: LIST
71466: PUSH
71467: LD_INT 4
71469: NEG
71470: PUSH
71471: LD_INT 3
71473: NEG
71474: PUSH
71475: EMPTY
71476: LIST
71477: LIST
71478: PUSH
71479: LD_INT 5
71481: NEG
71482: PUSH
71483: LD_INT 4
71485: NEG
71486: PUSH
71487: EMPTY
71488: LIST
71489: LIST
71490: PUSH
71491: LD_INT 5
71493: NEG
71494: PUSH
71495: LD_INT 5
71497: NEG
71498: PUSH
71499: EMPTY
71500: LIST
71501: LIST
71502: PUSH
71503: LD_INT 3
71505: NEG
71506: PUSH
71507: LD_INT 5
71509: NEG
71510: PUSH
71511: EMPTY
71512: LIST
71513: LIST
71514: PUSH
71515: LD_INT 5
71517: NEG
71518: PUSH
71519: LD_INT 3
71521: NEG
71522: PUSH
71523: EMPTY
71524: LIST
71525: LIST
71526: PUSH
71527: LD_INT 0
71529: PUSH
71530: LD_INT 3
71532: NEG
71533: PUSH
71534: EMPTY
71535: LIST
71536: LIST
71537: PUSH
71538: LD_INT 0
71540: PUSH
71541: LD_INT 4
71543: NEG
71544: PUSH
71545: EMPTY
71546: LIST
71547: LIST
71548: PUSH
71549: LD_INT 1
71551: PUSH
71552: LD_INT 3
71554: NEG
71555: PUSH
71556: EMPTY
71557: LIST
71558: LIST
71559: PUSH
71560: LD_INT 1
71562: PUSH
71563: LD_INT 2
71565: NEG
71566: PUSH
71567: EMPTY
71568: LIST
71569: LIST
71570: PUSH
71571: LD_INT 0
71573: PUSH
71574: LD_INT 2
71576: NEG
71577: PUSH
71578: EMPTY
71579: LIST
71580: LIST
71581: PUSH
71582: LD_INT 1
71584: NEG
71585: PUSH
71586: LD_INT 3
71588: NEG
71589: PUSH
71590: EMPTY
71591: LIST
71592: LIST
71593: PUSH
71594: LD_INT 1
71596: NEG
71597: PUSH
71598: LD_INT 4
71600: NEG
71601: PUSH
71602: EMPTY
71603: LIST
71604: LIST
71605: PUSH
71606: LD_INT 2
71608: PUSH
71609: LD_INT 2
71611: NEG
71612: PUSH
71613: EMPTY
71614: LIST
71615: LIST
71616: PUSH
71617: LD_INT 2
71619: NEG
71620: PUSH
71621: LD_INT 4
71623: NEG
71624: PUSH
71625: EMPTY
71626: LIST
71627: LIST
71628: PUSH
71629: LD_INT 4
71631: PUSH
71632: LD_INT 0
71634: PUSH
71635: EMPTY
71636: LIST
71637: LIST
71638: PUSH
71639: LD_INT 4
71641: PUSH
71642: LD_INT 1
71644: NEG
71645: PUSH
71646: EMPTY
71647: LIST
71648: LIST
71649: PUSH
71650: LD_INT 5
71652: PUSH
71653: LD_INT 0
71655: PUSH
71656: EMPTY
71657: LIST
71658: LIST
71659: PUSH
71660: LD_INT 5
71662: PUSH
71663: LD_INT 1
71665: PUSH
71666: EMPTY
71667: LIST
71668: LIST
71669: PUSH
71670: LD_INT 4
71672: PUSH
71673: LD_INT 1
71675: PUSH
71676: EMPTY
71677: LIST
71678: LIST
71679: PUSH
71680: LD_INT 3
71682: PUSH
71683: LD_INT 0
71685: PUSH
71686: EMPTY
71687: LIST
71688: LIST
71689: PUSH
71690: LD_INT 3
71692: PUSH
71693: LD_INT 1
71695: NEG
71696: PUSH
71697: EMPTY
71698: LIST
71699: LIST
71700: PUSH
71701: LD_INT 3
71703: PUSH
71704: LD_INT 2
71706: NEG
71707: PUSH
71708: EMPTY
71709: LIST
71710: LIST
71711: PUSH
71712: LD_INT 5
71714: PUSH
71715: LD_INT 2
71717: PUSH
71718: EMPTY
71719: LIST
71720: LIST
71721: PUSH
71722: LD_INT 3
71724: PUSH
71725: LD_INT 3
71727: PUSH
71728: EMPTY
71729: LIST
71730: LIST
71731: PUSH
71732: LD_INT 3
71734: PUSH
71735: LD_INT 2
71737: PUSH
71738: EMPTY
71739: LIST
71740: LIST
71741: PUSH
71742: LD_INT 4
71744: PUSH
71745: LD_INT 3
71747: PUSH
71748: EMPTY
71749: LIST
71750: LIST
71751: PUSH
71752: LD_INT 4
71754: PUSH
71755: LD_INT 4
71757: PUSH
71758: EMPTY
71759: LIST
71760: LIST
71761: PUSH
71762: LD_INT 3
71764: PUSH
71765: LD_INT 4
71767: PUSH
71768: EMPTY
71769: LIST
71770: LIST
71771: PUSH
71772: LD_INT 2
71774: PUSH
71775: LD_INT 3
71777: PUSH
71778: EMPTY
71779: LIST
71780: LIST
71781: PUSH
71782: LD_INT 2
71784: PUSH
71785: LD_INT 2
71787: PUSH
71788: EMPTY
71789: LIST
71790: LIST
71791: PUSH
71792: LD_INT 4
71794: PUSH
71795: LD_INT 2
71797: PUSH
71798: EMPTY
71799: LIST
71800: LIST
71801: PUSH
71802: LD_INT 2
71804: PUSH
71805: LD_INT 4
71807: PUSH
71808: EMPTY
71809: LIST
71810: LIST
71811: PUSH
71812: LD_INT 0
71814: PUSH
71815: LD_INT 4
71817: PUSH
71818: EMPTY
71819: LIST
71820: LIST
71821: PUSH
71822: LD_INT 0
71824: PUSH
71825: LD_INT 3
71827: PUSH
71828: EMPTY
71829: LIST
71830: LIST
71831: PUSH
71832: LD_INT 1
71834: PUSH
71835: LD_INT 4
71837: PUSH
71838: EMPTY
71839: LIST
71840: LIST
71841: PUSH
71842: LD_INT 1
71844: PUSH
71845: LD_INT 5
71847: PUSH
71848: EMPTY
71849: LIST
71850: LIST
71851: PUSH
71852: LD_INT 0
71854: PUSH
71855: LD_INT 5
71857: PUSH
71858: EMPTY
71859: LIST
71860: LIST
71861: PUSH
71862: LD_INT 1
71864: NEG
71865: PUSH
71866: LD_INT 4
71868: PUSH
71869: EMPTY
71870: LIST
71871: LIST
71872: PUSH
71873: LD_INT 1
71875: NEG
71876: PUSH
71877: LD_INT 3
71879: PUSH
71880: EMPTY
71881: LIST
71882: LIST
71883: PUSH
71884: LD_INT 2
71886: PUSH
71887: LD_INT 5
71889: PUSH
71890: EMPTY
71891: LIST
71892: LIST
71893: PUSH
71894: LD_INT 2
71896: NEG
71897: PUSH
71898: LD_INT 3
71900: PUSH
71901: EMPTY
71902: LIST
71903: LIST
71904: PUSH
71905: EMPTY
71906: LIST
71907: LIST
71908: LIST
71909: LIST
71910: LIST
71911: LIST
71912: LIST
71913: LIST
71914: LIST
71915: LIST
71916: LIST
71917: LIST
71918: LIST
71919: LIST
71920: LIST
71921: LIST
71922: LIST
71923: LIST
71924: LIST
71925: LIST
71926: LIST
71927: LIST
71928: LIST
71929: LIST
71930: LIST
71931: LIST
71932: LIST
71933: LIST
71934: LIST
71935: LIST
71936: LIST
71937: LIST
71938: LIST
71939: LIST
71940: LIST
71941: LIST
71942: LIST
71943: LIST
71944: LIST
71945: LIST
71946: LIST
71947: LIST
71948: LIST
71949: LIST
71950: LIST
71951: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
71952: LD_ADDR_VAR 0 34
71956: PUSH
71957: LD_INT 0
71959: PUSH
71960: LD_INT 4
71962: NEG
71963: PUSH
71964: EMPTY
71965: LIST
71966: LIST
71967: PUSH
71968: LD_INT 0
71970: PUSH
71971: LD_INT 5
71973: NEG
71974: PUSH
71975: EMPTY
71976: LIST
71977: LIST
71978: PUSH
71979: LD_INT 1
71981: PUSH
71982: LD_INT 4
71984: NEG
71985: PUSH
71986: EMPTY
71987: LIST
71988: LIST
71989: PUSH
71990: LD_INT 1
71992: PUSH
71993: LD_INT 3
71995: NEG
71996: PUSH
71997: EMPTY
71998: LIST
71999: LIST
72000: PUSH
72001: LD_INT 0
72003: PUSH
72004: LD_INT 3
72006: NEG
72007: PUSH
72008: EMPTY
72009: LIST
72010: LIST
72011: PUSH
72012: LD_INT 1
72014: NEG
72015: PUSH
72016: LD_INT 4
72018: NEG
72019: PUSH
72020: EMPTY
72021: LIST
72022: LIST
72023: PUSH
72024: LD_INT 1
72026: NEG
72027: PUSH
72028: LD_INT 5
72030: NEG
72031: PUSH
72032: EMPTY
72033: LIST
72034: LIST
72035: PUSH
72036: LD_INT 2
72038: PUSH
72039: LD_INT 3
72041: NEG
72042: PUSH
72043: EMPTY
72044: LIST
72045: LIST
72046: PUSH
72047: LD_INT 2
72049: NEG
72050: PUSH
72051: LD_INT 5
72053: NEG
72054: PUSH
72055: EMPTY
72056: LIST
72057: LIST
72058: PUSH
72059: LD_INT 3
72061: PUSH
72062: LD_INT 0
72064: PUSH
72065: EMPTY
72066: LIST
72067: LIST
72068: PUSH
72069: LD_INT 3
72071: PUSH
72072: LD_INT 1
72074: NEG
72075: PUSH
72076: EMPTY
72077: LIST
72078: LIST
72079: PUSH
72080: LD_INT 4
72082: PUSH
72083: LD_INT 0
72085: PUSH
72086: EMPTY
72087: LIST
72088: LIST
72089: PUSH
72090: LD_INT 4
72092: PUSH
72093: LD_INT 1
72095: PUSH
72096: EMPTY
72097: LIST
72098: LIST
72099: PUSH
72100: LD_INT 3
72102: PUSH
72103: LD_INT 1
72105: PUSH
72106: EMPTY
72107: LIST
72108: LIST
72109: PUSH
72110: LD_INT 2
72112: PUSH
72113: LD_INT 0
72115: PUSH
72116: EMPTY
72117: LIST
72118: LIST
72119: PUSH
72120: LD_INT 2
72122: PUSH
72123: LD_INT 1
72125: NEG
72126: PUSH
72127: EMPTY
72128: LIST
72129: LIST
72130: PUSH
72131: LD_INT 2
72133: PUSH
72134: LD_INT 2
72136: NEG
72137: PUSH
72138: EMPTY
72139: LIST
72140: LIST
72141: PUSH
72142: LD_INT 4
72144: PUSH
72145: LD_INT 2
72147: PUSH
72148: EMPTY
72149: LIST
72150: LIST
72151: PUSH
72152: LD_INT 4
72154: PUSH
72155: LD_INT 4
72157: PUSH
72158: EMPTY
72159: LIST
72160: LIST
72161: PUSH
72162: LD_INT 4
72164: PUSH
72165: LD_INT 3
72167: PUSH
72168: EMPTY
72169: LIST
72170: LIST
72171: PUSH
72172: LD_INT 5
72174: PUSH
72175: LD_INT 4
72177: PUSH
72178: EMPTY
72179: LIST
72180: LIST
72181: PUSH
72182: LD_INT 5
72184: PUSH
72185: LD_INT 5
72187: PUSH
72188: EMPTY
72189: LIST
72190: LIST
72191: PUSH
72192: LD_INT 4
72194: PUSH
72195: LD_INT 5
72197: PUSH
72198: EMPTY
72199: LIST
72200: LIST
72201: PUSH
72202: LD_INT 3
72204: PUSH
72205: LD_INT 4
72207: PUSH
72208: EMPTY
72209: LIST
72210: LIST
72211: PUSH
72212: LD_INT 3
72214: PUSH
72215: LD_INT 3
72217: PUSH
72218: EMPTY
72219: LIST
72220: LIST
72221: PUSH
72222: LD_INT 5
72224: PUSH
72225: LD_INT 3
72227: PUSH
72228: EMPTY
72229: LIST
72230: LIST
72231: PUSH
72232: LD_INT 3
72234: PUSH
72235: LD_INT 5
72237: PUSH
72238: EMPTY
72239: LIST
72240: LIST
72241: PUSH
72242: LD_INT 0
72244: PUSH
72245: LD_INT 3
72247: PUSH
72248: EMPTY
72249: LIST
72250: LIST
72251: PUSH
72252: LD_INT 0
72254: PUSH
72255: LD_INT 2
72257: PUSH
72258: EMPTY
72259: LIST
72260: LIST
72261: PUSH
72262: LD_INT 1
72264: PUSH
72265: LD_INT 3
72267: PUSH
72268: EMPTY
72269: LIST
72270: LIST
72271: PUSH
72272: LD_INT 1
72274: PUSH
72275: LD_INT 4
72277: PUSH
72278: EMPTY
72279: LIST
72280: LIST
72281: PUSH
72282: LD_INT 0
72284: PUSH
72285: LD_INT 4
72287: PUSH
72288: EMPTY
72289: LIST
72290: LIST
72291: PUSH
72292: LD_INT 1
72294: NEG
72295: PUSH
72296: LD_INT 3
72298: PUSH
72299: EMPTY
72300: LIST
72301: LIST
72302: PUSH
72303: LD_INT 1
72305: NEG
72306: PUSH
72307: LD_INT 2
72309: PUSH
72310: EMPTY
72311: LIST
72312: LIST
72313: PUSH
72314: LD_INT 2
72316: PUSH
72317: LD_INT 4
72319: PUSH
72320: EMPTY
72321: LIST
72322: LIST
72323: PUSH
72324: LD_INT 2
72326: NEG
72327: PUSH
72328: LD_INT 2
72330: PUSH
72331: EMPTY
72332: LIST
72333: LIST
72334: PUSH
72335: LD_INT 4
72337: NEG
72338: PUSH
72339: LD_INT 0
72341: PUSH
72342: EMPTY
72343: LIST
72344: LIST
72345: PUSH
72346: LD_INT 4
72348: NEG
72349: PUSH
72350: LD_INT 1
72352: NEG
72353: PUSH
72354: EMPTY
72355: LIST
72356: LIST
72357: PUSH
72358: LD_INT 3
72360: NEG
72361: PUSH
72362: LD_INT 0
72364: PUSH
72365: EMPTY
72366: LIST
72367: LIST
72368: PUSH
72369: LD_INT 3
72371: NEG
72372: PUSH
72373: LD_INT 1
72375: PUSH
72376: EMPTY
72377: LIST
72378: LIST
72379: PUSH
72380: LD_INT 4
72382: NEG
72383: PUSH
72384: LD_INT 1
72386: PUSH
72387: EMPTY
72388: LIST
72389: LIST
72390: PUSH
72391: LD_INT 5
72393: NEG
72394: PUSH
72395: LD_INT 0
72397: PUSH
72398: EMPTY
72399: LIST
72400: LIST
72401: PUSH
72402: LD_INT 5
72404: NEG
72405: PUSH
72406: LD_INT 1
72408: NEG
72409: PUSH
72410: EMPTY
72411: LIST
72412: LIST
72413: PUSH
72414: LD_INT 5
72416: NEG
72417: PUSH
72418: LD_INT 2
72420: NEG
72421: PUSH
72422: EMPTY
72423: LIST
72424: LIST
72425: PUSH
72426: LD_INT 3
72428: NEG
72429: PUSH
72430: LD_INT 2
72432: PUSH
72433: EMPTY
72434: LIST
72435: LIST
72436: PUSH
72437: EMPTY
72438: LIST
72439: LIST
72440: LIST
72441: LIST
72442: LIST
72443: LIST
72444: LIST
72445: LIST
72446: LIST
72447: LIST
72448: LIST
72449: LIST
72450: LIST
72451: LIST
72452: LIST
72453: LIST
72454: LIST
72455: LIST
72456: LIST
72457: LIST
72458: LIST
72459: LIST
72460: LIST
72461: LIST
72462: LIST
72463: LIST
72464: LIST
72465: LIST
72466: LIST
72467: LIST
72468: LIST
72469: LIST
72470: LIST
72471: LIST
72472: LIST
72473: LIST
72474: LIST
72475: LIST
72476: LIST
72477: LIST
72478: LIST
72479: LIST
72480: LIST
72481: LIST
72482: LIST
72483: ST_TO_ADDR
// end ; end ;
72484: GO 72487
72486: POP
// case btype of b_depot , b_warehouse :
72487: LD_VAR 0 1
72491: PUSH
72492: LD_INT 0
72494: DOUBLE
72495: EQUAL
72496: IFTRUE 72506
72498: LD_INT 1
72500: DOUBLE
72501: EQUAL
72502: IFTRUE 72506
72504: GO 72707
72506: POP
// case nation of nation_american :
72507: LD_VAR 0 5
72511: PUSH
72512: LD_INT 1
72514: DOUBLE
72515: EQUAL
72516: IFTRUE 72520
72518: GO 72576
72520: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
72521: LD_ADDR_VAR 0 9
72525: PUSH
72526: LD_VAR 0 11
72530: PUSH
72531: LD_VAR 0 12
72535: PUSH
72536: LD_VAR 0 13
72540: PUSH
72541: LD_VAR 0 14
72545: PUSH
72546: LD_VAR 0 15
72550: PUSH
72551: LD_VAR 0 16
72555: PUSH
72556: EMPTY
72557: LIST
72558: LIST
72559: LIST
72560: LIST
72561: LIST
72562: LIST
72563: PUSH
72564: LD_VAR 0 4
72568: PUSH
72569: LD_INT 1
72571: PLUS
72572: ARRAY
72573: ST_TO_ADDR
72574: GO 72705
72576: LD_INT 2
72578: DOUBLE
72579: EQUAL
72580: IFTRUE 72584
72582: GO 72640
72584: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
72585: LD_ADDR_VAR 0 9
72589: PUSH
72590: LD_VAR 0 17
72594: PUSH
72595: LD_VAR 0 18
72599: PUSH
72600: LD_VAR 0 19
72604: PUSH
72605: LD_VAR 0 20
72609: PUSH
72610: LD_VAR 0 21
72614: PUSH
72615: LD_VAR 0 22
72619: PUSH
72620: EMPTY
72621: LIST
72622: LIST
72623: LIST
72624: LIST
72625: LIST
72626: LIST
72627: PUSH
72628: LD_VAR 0 4
72632: PUSH
72633: LD_INT 1
72635: PLUS
72636: ARRAY
72637: ST_TO_ADDR
72638: GO 72705
72640: LD_INT 3
72642: DOUBLE
72643: EQUAL
72644: IFTRUE 72648
72646: GO 72704
72648: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
72649: LD_ADDR_VAR 0 9
72653: PUSH
72654: LD_VAR 0 23
72658: PUSH
72659: LD_VAR 0 24
72663: PUSH
72664: LD_VAR 0 25
72668: PUSH
72669: LD_VAR 0 26
72673: PUSH
72674: LD_VAR 0 27
72678: PUSH
72679: LD_VAR 0 28
72683: PUSH
72684: EMPTY
72685: LIST
72686: LIST
72687: LIST
72688: LIST
72689: LIST
72690: LIST
72691: PUSH
72692: LD_VAR 0 4
72696: PUSH
72697: LD_INT 1
72699: PLUS
72700: ARRAY
72701: ST_TO_ADDR
72702: GO 72705
72704: POP
72705: GO 73260
72707: LD_INT 2
72709: DOUBLE
72710: EQUAL
72711: IFTRUE 72721
72713: LD_INT 3
72715: DOUBLE
72716: EQUAL
72717: IFTRUE 72721
72719: GO 72777
72721: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
72722: LD_ADDR_VAR 0 9
72726: PUSH
72727: LD_VAR 0 29
72731: PUSH
72732: LD_VAR 0 30
72736: PUSH
72737: LD_VAR 0 31
72741: PUSH
72742: LD_VAR 0 32
72746: PUSH
72747: LD_VAR 0 33
72751: PUSH
72752: LD_VAR 0 34
72756: PUSH
72757: EMPTY
72758: LIST
72759: LIST
72760: LIST
72761: LIST
72762: LIST
72763: LIST
72764: PUSH
72765: LD_VAR 0 4
72769: PUSH
72770: LD_INT 1
72772: PLUS
72773: ARRAY
72774: ST_TO_ADDR
72775: GO 73260
72777: LD_INT 16
72779: DOUBLE
72780: EQUAL
72781: IFTRUE 72839
72783: LD_INT 17
72785: DOUBLE
72786: EQUAL
72787: IFTRUE 72839
72789: LD_INT 18
72791: DOUBLE
72792: EQUAL
72793: IFTRUE 72839
72795: LD_INT 19
72797: DOUBLE
72798: EQUAL
72799: IFTRUE 72839
72801: LD_INT 22
72803: DOUBLE
72804: EQUAL
72805: IFTRUE 72839
72807: LD_INT 20
72809: DOUBLE
72810: EQUAL
72811: IFTRUE 72839
72813: LD_INT 21
72815: DOUBLE
72816: EQUAL
72817: IFTRUE 72839
72819: LD_INT 23
72821: DOUBLE
72822: EQUAL
72823: IFTRUE 72839
72825: LD_INT 24
72827: DOUBLE
72828: EQUAL
72829: IFTRUE 72839
72831: LD_INT 25
72833: DOUBLE
72834: EQUAL
72835: IFTRUE 72839
72837: GO 72895
72839: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
72840: LD_ADDR_VAR 0 9
72844: PUSH
72845: LD_VAR 0 35
72849: PUSH
72850: LD_VAR 0 36
72854: PUSH
72855: LD_VAR 0 37
72859: PUSH
72860: LD_VAR 0 38
72864: PUSH
72865: LD_VAR 0 39
72869: PUSH
72870: LD_VAR 0 40
72874: PUSH
72875: EMPTY
72876: LIST
72877: LIST
72878: LIST
72879: LIST
72880: LIST
72881: LIST
72882: PUSH
72883: LD_VAR 0 4
72887: PUSH
72888: LD_INT 1
72890: PLUS
72891: ARRAY
72892: ST_TO_ADDR
72893: GO 73260
72895: LD_INT 6
72897: DOUBLE
72898: EQUAL
72899: IFTRUE 72951
72901: LD_INT 7
72903: DOUBLE
72904: EQUAL
72905: IFTRUE 72951
72907: LD_INT 8
72909: DOUBLE
72910: EQUAL
72911: IFTRUE 72951
72913: LD_INT 13
72915: DOUBLE
72916: EQUAL
72917: IFTRUE 72951
72919: LD_INT 12
72921: DOUBLE
72922: EQUAL
72923: IFTRUE 72951
72925: LD_INT 15
72927: DOUBLE
72928: EQUAL
72929: IFTRUE 72951
72931: LD_INT 11
72933: DOUBLE
72934: EQUAL
72935: IFTRUE 72951
72937: LD_INT 14
72939: DOUBLE
72940: EQUAL
72941: IFTRUE 72951
72943: LD_INT 10
72945: DOUBLE
72946: EQUAL
72947: IFTRUE 72951
72949: GO 73007
72951: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
72952: LD_ADDR_VAR 0 9
72956: PUSH
72957: LD_VAR 0 41
72961: PUSH
72962: LD_VAR 0 42
72966: PUSH
72967: LD_VAR 0 43
72971: PUSH
72972: LD_VAR 0 44
72976: PUSH
72977: LD_VAR 0 45
72981: PUSH
72982: LD_VAR 0 46
72986: PUSH
72987: EMPTY
72988: LIST
72989: LIST
72990: LIST
72991: LIST
72992: LIST
72993: LIST
72994: PUSH
72995: LD_VAR 0 4
72999: PUSH
73000: LD_INT 1
73002: PLUS
73003: ARRAY
73004: ST_TO_ADDR
73005: GO 73260
73007: LD_INT 36
73009: DOUBLE
73010: EQUAL
73011: IFTRUE 73015
73013: GO 73071
73015: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
73016: LD_ADDR_VAR 0 9
73020: PUSH
73021: LD_VAR 0 47
73025: PUSH
73026: LD_VAR 0 48
73030: PUSH
73031: LD_VAR 0 49
73035: PUSH
73036: LD_VAR 0 50
73040: PUSH
73041: LD_VAR 0 51
73045: PUSH
73046: LD_VAR 0 52
73050: PUSH
73051: EMPTY
73052: LIST
73053: LIST
73054: LIST
73055: LIST
73056: LIST
73057: LIST
73058: PUSH
73059: LD_VAR 0 4
73063: PUSH
73064: LD_INT 1
73066: PLUS
73067: ARRAY
73068: ST_TO_ADDR
73069: GO 73260
73071: LD_INT 4
73073: DOUBLE
73074: EQUAL
73075: IFTRUE 73097
73077: LD_INT 5
73079: DOUBLE
73080: EQUAL
73081: IFTRUE 73097
73083: LD_INT 34
73085: DOUBLE
73086: EQUAL
73087: IFTRUE 73097
73089: LD_INT 37
73091: DOUBLE
73092: EQUAL
73093: IFTRUE 73097
73095: GO 73153
73097: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
73098: LD_ADDR_VAR 0 9
73102: PUSH
73103: LD_VAR 0 53
73107: PUSH
73108: LD_VAR 0 54
73112: PUSH
73113: LD_VAR 0 55
73117: PUSH
73118: LD_VAR 0 56
73122: PUSH
73123: LD_VAR 0 57
73127: PUSH
73128: LD_VAR 0 58
73132: PUSH
73133: EMPTY
73134: LIST
73135: LIST
73136: LIST
73137: LIST
73138: LIST
73139: LIST
73140: PUSH
73141: LD_VAR 0 4
73145: PUSH
73146: LD_INT 1
73148: PLUS
73149: ARRAY
73150: ST_TO_ADDR
73151: GO 73260
73153: LD_INT 31
73155: DOUBLE
73156: EQUAL
73157: IFTRUE 73203
73159: LD_INT 32
73161: DOUBLE
73162: EQUAL
73163: IFTRUE 73203
73165: LD_INT 33
73167: DOUBLE
73168: EQUAL
73169: IFTRUE 73203
73171: LD_INT 27
73173: DOUBLE
73174: EQUAL
73175: IFTRUE 73203
73177: LD_INT 26
73179: DOUBLE
73180: EQUAL
73181: IFTRUE 73203
73183: LD_INT 28
73185: DOUBLE
73186: EQUAL
73187: IFTRUE 73203
73189: LD_INT 29
73191: DOUBLE
73192: EQUAL
73193: IFTRUE 73203
73195: LD_INT 30
73197: DOUBLE
73198: EQUAL
73199: IFTRUE 73203
73201: GO 73259
73203: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
73204: LD_ADDR_VAR 0 9
73208: PUSH
73209: LD_VAR 0 59
73213: PUSH
73214: LD_VAR 0 60
73218: PUSH
73219: LD_VAR 0 61
73223: PUSH
73224: LD_VAR 0 62
73228: PUSH
73229: LD_VAR 0 63
73233: PUSH
73234: LD_VAR 0 64
73238: PUSH
73239: EMPTY
73240: LIST
73241: LIST
73242: LIST
73243: LIST
73244: LIST
73245: LIST
73246: PUSH
73247: LD_VAR 0 4
73251: PUSH
73252: LD_INT 1
73254: PLUS
73255: ARRAY
73256: ST_TO_ADDR
73257: GO 73260
73259: POP
// temp_list2 = [ ] ;
73260: LD_ADDR_VAR 0 10
73264: PUSH
73265: EMPTY
73266: ST_TO_ADDR
// for i in temp_list do
73267: LD_ADDR_VAR 0 8
73271: PUSH
73272: LD_VAR 0 9
73276: PUSH
73277: FOR_IN
73278: IFFALSE 73330
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
73280: LD_ADDR_VAR 0 10
73284: PUSH
73285: LD_VAR 0 10
73289: PUSH
73290: LD_VAR 0 8
73294: PUSH
73295: LD_INT 1
73297: ARRAY
73298: PUSH
73299: LD_VAR 0 2
73303: PLUS
73304: PUSH
73305: LD_VAR 0 8
73309: PUSH
73310: LD_INT 2
73312: ARRAY
73313: PUSH
73314: LD_VAR 0 3
73318: PLUS
73319: PUSH
73320: EMPTY
73321: LIST
73322: LIST
73323: PUSH
73324: EMPTY
73325: LIST
73326: ADD
73327: ST_TO_ADDR
73328: GO 73277
73330: POP
73331: POP
// result = temp_list2 ;
73332: LD_ADDR_VAR 0 7
73336: PUSH
73337: LD_VAR 0 10
73341: ST_TO_ADDR
// end ;
73342: LD_VAR 0 7
73346: RET
// export function EnemyInRange ( unit , dist ) ; begin
73347: LD_INT 0
73349: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
73350: LD_ADDR_VAR 0 3
73354: PUSH
73355: LD_VAR 0 1
73359: PPUSH
73360: CALL_OW 255
73364: PPUSH
73365: LD_VAR 0 1
73369: PPUSH
73370: CALL_OW 250
73374: PPUSH
73375: LD_VAR 0 1
73379: PPUSH
73380: CALL_OW 251
73384: PPUSH
73385: LD_VAR 0 2
73389: PPUSH
73390: CALL 46720 0 4
73394: PUSH
73395: LD_INT 4
73397: ARRAY
73398: ST_TO_ADDR
// end ;
73399: LD_VAR 0 3
73403: RET
// export function PlayerSeeMe ( unit ) ; begin
73404: LD_INT 0
73406: PPUSH
// result := See ( your_side , unit ) ;
73407: LD_ADDR_VAR 0 2
73411: PUSH
73412: LD_OWVAR 2
73416: PPUSH
73417: LD_VAR 0 1
73421: PPUSH
73422: CALL_OW 292
73426: ST_TO_ADDR
// end ;
73427: LD_VAR 0 2
73431: RET
// export function ReverseDir ( unit ) ; begin
73432: LD_INT 0
73434: PPUSH
// if not unit then
73435: LD_VAR 0 1
73439: NOT
73440: IFFALSE 73444
// exit ;
73442: GO 73467
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
73444: LD_ADDR_VAR 0 2
73448: PUSH
73449: LD_VAR 0 1
73453: PPUSH
73454: CALL_OW 254
73458: PUSH
73459: LD_INT 3
73461: PLUS
73462: PUSH
73463: LD_INT 6
73465: MOD
73466: ST_TO_ADDR
// end ;
73467: LD_VAR 0 2
73471: RET
// export function ReverseArray ( array ) ; var i ; begin
73472: LD_INT 0
73474: PPUSH
73475: PPUSH
// if not array then
73476: LD_VAR 0 1
73480: NOT
73481: IFFALSE 73485
// exit ;
73483: GO 73540
// result := [ ] ;
73485: LD_ADDR_VAR 0 2
73489: PUSH
73490: EMPTY
73491: ST_TO_ADDR
// for i := array downto 1 do
73492: LD_ADDR_VAR 0 3
73496: PUSH
73497: DOUBLE
73498: LD_VAR 0 1
73502: INC
73503: ST_TO_ADDR
73504: LD_INT 1
73506: PUSH
73507: FOR_DOWNTO
73508: IFFALSE 73538
// result := Join ( result , array [ i ] ) ;
73510: LD_ADDR_VAR 0 2
73514: PUSH
73515: LD_VAR 0 2
73519: PPUSH
73520: LD_VAR 0 1
73524: PUSH
73525: LD_VAR 0 3
73529: ARRAY
73530: PPUSH
73531: CALL 78185 0 2
73535: ST_TO_ADDR
73536: GO 73507
73538: POP
73539: POP
// end ;
73540: LD_VAR 0 2
73544: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
73545: LD_INT 0
73547: PPUSH
73548: PPUSH
73549: PPUSH
73550: PPUSH
73551: PPUSH
73552: PPUSH
// if not unit or not hexes then
73553: LD_VAR 0 1
73557: NOT
73558: PUSH
73559: LD_VAR 0 2
73563: NOT
73564: OR
73565: IFFALSE 73569
// exit ;
73567: GO 73692
// dist := 9999 ;
73569: LD_ADDR_VAR 0 5
73573: PUSH
73574: LD_INT 9999
73576: ST_TO_ADDR
// for i = 1 to hexes do
73577: LD_ADDR_VAR 0 4
73581: PUSH
73582: DOUBLE
73583: LD_INT 1
73585: DEC
73586: ST_TO_ADDR
73587: LD_VAR 0 2
73591: PUSH
73592: FOR_TO
73593: IFFALSE 73680
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
73595: LD_ADDR_VAR 0 6
73599: PUSH
73600: LD_VAR 0 1
73604: PPUSH
73605: LD_VAR 0 2
73609: PUSH
73610: LD_VAR 0 4
73614: ARRAY
73615: PUSH
73616: LD_INT 1
73618: ARRAY
73619: PPUSH
73620: LD_VAR 0 2
73624: PUSH
73625: LD_VAR 0 4
73629: ARRAY
73630: PUSH
73631: LD_INT 2
73633: ARRAY
73634: PPUSH
73635: CALL_OW 297
73639: ST_TO_ADDR
// if tdist < dist then
73640: LD_VAR 0 6
73644: PUSH
73645: LD_VAR 0 5
73649: LESS
73650: IFFALSE 73678
// begin hex := hexes [ i ] ;
73652: LD_ADDR_VAR 0 8
73656: PUSH
73657: LD_VAR 0 2
73661: PUSH
73662: LD_VAR 0 4
73666: ARRAY
73667: ST_TO_ADDR
// dist := tdist ;
73668: LD_ADDR_VAR 0 5
73672: PUSH
73673: LD_VAR 0 6
73677: ST_TO_ADDR
// end ; end ;
73678: GO 73592
73680: POP
73681: POP
// result := hex ;
73682: LD_ADDR_VAR 0 3
73686: PUSH
73687: LD_VAR 0 8
73691: ST_TO_ADDR
// end ;
73692: LD_VAR 0 3
73696: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
73697: LD_INT 0
73699: PPUSH
73700: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
73701: LD_VAR 0 1
73705: NOT
73706: PUSH
73707: LD_VAR 0 1
73711: PUSH
73712: LD_INT 21
73714: PUSH
73715: LD_INT 2
73717: PUSH
73718: EMPTY
73719: LIST
73720: LIST
73721: PUSH
73722: LD_INT 23
73724: PUSH
73725: LD_INT 2
73727: PUSH
73728: EMPTY
73729: LIST
73730: LIST
73731: PUSH
73732: EMPTY
73733: LIST
73734: LIST
73735: PPUSH
73736: CALL_OW 69
73740: IN
73741: NOT
73742: OR
73743: IFFALSE 73747
// exit ;
73745: GO 73794
// for i = 1 to 3 do
73747: LD_ADDR_VAR 0 3
73751: PUSH
73752: DOUBLE
73753: LD_INT 1
73755: DEC
73756: ST_TO_ADDR
73757: LD_INT 3
73759: PUSH
73760: FOR_TO
73761: IFFALSE 73792
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
73763: LD_VAR 0 1
73767: PPUSH
73768: CALL_OW 250
73772: PPUSH
73773: LD_VAR 0 1
73777: PPUSH
73778: CALL_OW 251
73782: PPUSH
73783: LD_INT 1
73785: PPUSH
73786: CALL_OW 453
73790: GO 73760
73792: POP
73793: POP
// end ;
73794: LD_VAR 0 2
73798: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
73799: LD_INT 0
73801: PPUSH
73802: PPUSH
73803: PPUSH
73804: PPUSH
73805: PPUSH
73806: PPUSH
// if not unit or not enemy_unit then
73807: LD_VAR 0 1
73811: NOT
73812: PUSH
73813: LD_VAR 0 2
73817: NOT
73818: OR
73819: IFFALSE 73823
// exit ;
73821: GO 74290
// if GetLives ( i ) < 250 then
73823: LD_VAR 0 4
73827: PPUSH
73828: CALL_OW 256
73832: PUSH
73833: LD_INT 250
73835: LESS
73836: IFFALSE 73849
// begin ComAutodestruct ( i ) ;
73838: LD_VAR 0 4
73842: PPUSH
73843: CALL 73697 0 1
// exit ;
73847: GO 74290
// end ; x := GetX ( enemy_unit ) ;
73849: LD_ADDR_VAR 0 7
73853: PUSH
73854: LD_VAR 0 2
73858: PPUSH
73859: CALL_OW 250
73863: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
73864: LD_ADDR_VAR 0 8
73868: PUSH
73869: LD_VAR 0 2
73873: PPUSH
73874: CALL_OW 251
73878: ST_TO_ADDR
// if not x or not y then
73879: LD_VAR 0 7
73883: NOT
73884: PUSH
73885: LD_VAR 0 8
73889: NOT
73890: OR
73891: IFFALSE 73895
// exit ;
73893: GO 74290
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
73895: LD_ADDR_VAR 0 6
73899: PUSH
73900: LD_VAR 0 7
73904: PPUSH
73905: LD_INT 0
73907: PPUSH
73908: LD_INT 4
73910: PPUSH
73911: CALL_OW 272
73915: PUSH
73916: LD_VAR 0 8
73920: PPUSH
73921: LD_INT 0
73923: PPUSH
73924: LD_INT 4
73926: PPUSH
73927: CALL_OW 273
73931: PUSH
73932: EMPTY
73933: LIST
73934: LIST
73935: PUSH
73936: LD_VAR 0 7
73940: PPUSH
73941: LD_INT 1
73943: PPUSH
73944: LD_INT 4
73946: PPUSH
73947: CALL_OW 272
73951: PUSH
73952: LD_VAR 0 8
73956: PPUSH
73957: LD_INT 1
73959: PPUSH
73960: LD_INT 4
73962: PPUSH
73963: CALL_OW 273
73967: PUSH
73968: EMPTY
73969: LIST
73970: LIST
73971: PUSH
73972: LD_VAR 0 7
73976: PPUSH
73977: LD_INT 2
73979: PPUSH
73980: LD_INT 4
73982: PPUSH
73983: CALL_OW 272
73987: PUSH
73988: LD_VAR 0 8
73992: PPUSH
73993: LD_INT 2
73995: PPUSH
73996: LD_INT 4
73998: PPUSH
73999: CALL_OW 273
74003: PUSH
74004: EMPTY
74005: LIST
74006: LIST
74007: PUSH
74008: LD_VAR 0 7
74012: PPUSH
74013: LD_INT 3
74015: PPUSH
74016: LD_INT 4
74018: PPUSH
74019: CALL_OW 272
74023: PUSH
74024: LD_VAR 0 8
74028: PPUSH
74029: LD_INT 3
74031: PPUSH
74032: LD_INT 4
74034: PPUSH
74035: CALL_OW 273
74039: PUSH
74040: EMPTY
74041: LIST
74042: LIST
74043: PUSH
74044: LD_VAR 0 7
74048: PPUSH
74049: LD_INT 4
74051: PPUSH
74052: LD_INT 4
74054: PPUSH
74055: CALL_OW 272
74059: PUSH
74060: LD_VAR 0 8
74064: PPUSH
74065: LD_INT 4
74067: PPUSH
74068: LD_INT 4
74070: PPUSH
74071: CALL_OW 273
74075: PUSH
74076: EMPTY
74077: LIST
74078: LIST
74079: PUSH
74080: LD_VAR 0 7
74084: PPUSH
74085: LD_INT 5
74087: PPUSH
74088: LD_INT 4
74090: PPUSH
74091: CALL_OW 272
74095: PUSH
74096: LD_VAR 0 8
74100: PPUSH
74101: LD_INT 5
74103: PPUSH
74104: LD_INT 4
74106: PPUSH
74107: CALL_OW 273
74111: PUSH
74112: EMPTY
74113: LIST
74114: LIST
74115: PUSH
74116: EMPTY
74117: LIST
74118: LIST
74119: LIST
74120: LIST
74121: LIST
74122: LIST
74123: ST_TO_ADDR
// for i = tmp downto 1 do
74124: LD_ADDR_VAR 0 4
74128: PUSH
74129: DOUBLE
74130: LD_VAR 0 6
74134: INC
74135: ST_TO_ADDR
74136: LD_INT 1
74138: PUSH
74139: FOR_DOWNTO
74140: IFFALSE 74241
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
74142: LD_VAR 0 6
74146: PUSH
74147: LD_VAR 0 4
74151: ARRAY
74152: PUSH
74153: LD_INT 1
74155: ARRAY
74156: PPUSH
74157: LD_VAR 0 6
74161: PUSH
74162: LD_VAR 0 4
74166: ARRAY
74167: PUSH
74168: LD_INT 2
74170: ARRAY
74171: PPUSH
74172: CALL_OW 488
74176: NOT
74177: PUSH
74178: LD_VAR 0 6
74182: PUSH
74183: LD_VAR 0 4
74187: ARRAY
74188: PUSH
74189: LD_INT 1
74191: ARRAY
74192: PPUSH
74193: LD_VAR 0 6
74197: PUSH
74198: LD_VAR 0 4
74202: ARRAY
74203: PUSH
74204: LD_INT 2
74206: ARRAY
74207: PPUSH
74208: CALL_OW 428
74212: PUSH
74213: LD_INT 0
74215: NONEQUAL
74216: OR
74217: IFFALSE 74239
// tmp := Delete ( tmp , i ) ;
74219: LD_ADDR_VAR 0 6
74223: PUSH
74224: LD_VAR 0 6
74228: PPUSH
74229: LD_VAR 0 4
74233: PPUSH
74234: CALL_OW 3
74238: ST_TO_ADDR
74239: GO 74139
74241: POP
74242: POP
// j := GetClosestHex ( unit , tmp ) ;
74243: LD_ADDR_VAR 0 5
74247: PUSH
74248: LD_VAR 0 1
74252: PPUSH
74253: LD_VAR 0 6
74257: PPUSH
74258: CALL 73545 0 2
74262: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
74263: LD_VAR 0 1
74267: PPUSH
74268: LD_VAR 0 5
74272: PUSH
74273: LD_INT 1
74275: ARRAY
74276: PPUSH
74277: LD_VAR 0 5
74281: PUSH
74282: LD_INT 2
74284: ARRAY
74285: PPUSH
74286: CALL_OW 111
// end ;
74290: LD_VAR 0 3
74294: RET
// export function PrepareApemanSoldier ( ) ; begin
74295: LD_INT 0
74297: PPUSH
// uc_nation := 0 ;
74298: LD_ADDR_OWVAR 21
74302: PUSH
74303: LD_INT 0
74305: ST_TO_ADDR
// hc_sex := sex_male ;
74306: LD_ADDR_OWVAR 27
74310: PUSH
74311: LD_INT 1
74313: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
74314: LD_ADDR_OWVAR 28
74318: PUSH
74319: LD_INT 15
74321: ST_TO_ADDR
// hc_gallery :=  ;
74322: LD_ADDR_OWVAR 33
74326: PUSH
74327: LD_STRING 
74329: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74330: LD_ADDR_OWVAR 31
74334: PUSH
74335: LD_INT 0
74337: PPUSH
74338: LD_INT 3
74340: PPUSH
74341: CALL_OW 12
74345: PUSH
74346: LD_INT 0
74348: PPUSH
74349: LD_INT 3
74351: PPUSH
74352: CALL_OW 12
74356: PUSH
74357: LD_INT 0
74359: PUSH
74360: LD_INT 0
74362: PUSH
74363: EMPTY
74364: LIST
74365: LIST
74366: LIST
74367: LIST
74368: ST_TO_ADDR
// end ;
74369: LD_VAR 0 1
74373: RET
// export function PrepareApemanEngineer ( ) ; begin
74374: LD_INT 0
74376: PPUSH
// uc_nation := 0 ;
74377: LD_ADDR_OWVAR 21
74381: PUSH
74382: LD_INT 0
74384: ST_TO_ADDR
// hc_sex := sex_male ;
74385: LD_ADDR_OWVAR 27
74389: PUSH
74390: LD_INT 1
74392: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
74393: LD_ADDR_OWVAR 28
74397: PUSH
74398: LD_INT 16
74400: ST_TO_ADDR
// hc_gallery :=  ;
74401: LD_ADDR_OWVAR 33
74405: PUSH
74406: LD_STRING 
74408: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74409: LD_ADDR_OWVAR 31
74413: PUSH
74414: LD_INT 0
74416: PPUSH
74417: LD_INT 3
74419: PPUSH
74420: CALL_OW 12
74424: PUSH
74425: LD_INT 0
74427: PPUSH
74428: LD_INT 3
74430: PPUSH
74431: CALL_OW 12
74435: PUSH
74436: LD_INT 0
74438: PUSH
74439: LD_INT 0
74441: PUSH
74442: EMPTY
74443: LIST
74444: LIST
74445: LIST
74446: LIST
74447: ST_TO_ADDR
// end ;
74448: LD_VAR 0 1
74452: RET
// export function PrepareApeman ( agressivity ) ; begin
74453: LD_INT 0
74455: PPUSH
// uc_side := 0 ;
74456: LD_ADDR_OWVAR 20
74460: PUSH
74461: LD_INT 0
74463: ST_TO_ADDR
// uc_nation := 0 ;
74464: LD_ADDR_OWVAR 21
74468: PUSH
74469: LD_INT 0
74471: ST_TO_ADDR
// hc_sex := sex_male ;
74472: LD_ADDR_OWVAR 27
74476: PUSH
74477: LD_INT 1
74479: ST_TO_ADDR
// hc_class := class_apeman ;
74480: LD_ADDR_OWVAR 28
74484: PUSH
74485: LD_INT 12
74487: ST_TO_ADDR
// hc_gallery :=  ;
74488: LD_ADDR_OWVAR 33
74492: PUSH
74493: LD_STRING 
74495: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
74496: LD_ADDR_OWVAR 35
74500: PUSH
74501: LD_VAR 0 1
74505: NEG
74506: PPUSH
74507: LD_VAR 0 1
74511: PPUSH
74512: CALL_OW 12
74516: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74517: LD_ADDR_OWVAR 31
74521: PUSH
74522: LD_INT 0
74524: PPUSH
74525: LD_INT 3
74527: PPUSH
74528: CALL_OW 12
74532: PUSH
74533: LD_INT 0
74535: PPUSH
74536: LD_INT 3
74538: PPUSH
74539: CALL_OW 12
74543: PUSH
74544: LD_INT 0
74546: PUSH
74547: LD_INT 0
74549: PUSH
74550: EMPTY
74551: LIST
74552: LIST
74553: LIST
74554: LIST
74555: ST_TO_ADDR
// end ;
74556: LD_VAR 0 2
74560: RET
// export function PrepareTiger ( agressivity ) ; begin
74561: LD_INT 0
74563: PPUSH
// uc_side := 0 ;
74564: LD_ADDR_OWVAR 20
74568: PUSH
74569: LD_INT 0
74571: ST_TO_ADDR
// uc_nation := 0 ;
74572: LD_ADDR_OWVAR 21
74576: PUSH
74577: LD_INT 0
74579: ST_TO_ADDR
// hc_class := class_tiger ;
74580: LD_ADDR_OWVAR 28
74584: PUSH
74585: LD_INT 14
74587: ST_TO_ADDR
// hc_gallery :=  ;
74588: LD_ADDR_OWVAR 33
74592: PUSH
74593: LD_STRING 
74595: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
74596: LD_ADDR_OWVAR 35
74600: PUSH
74601: LD_VAR 0 1
74605: NEG
74606: PPUSH
74607: LD_VAR 0 1
74611: PPUSH
74612: CALL_OW 12
74616: ST_TO_ADDR
// end ;
74617: LD_VAR 0 2
74621: RET
// export function PrepareEnchidna ( ) ; begin
74622: LD_INT 0
74624: PPUSH
// uc_side := 0 ;
74625: LD_ADDR_OWVAR 20
74629: PUSH
74630: LD_INT 0
74632: ST_TO_ADDR
// uc_nation := 0 ;
74633: LD_ADDR_OWVAR 21
74637: PUSH
74638: LD_INT 0
74640: ST_TO_ADDR
// hc_class := class_baggie ;
74641: LD_ADDR_OWVAR 28
74645: PUSH
74646: LD_INT 13
74648: ST_TO_ADDR
// hc_gallery :=  ;
74649: LD_ADDR_OWVAR 33
74653: PUSH
74654: LD_STRING 
74656: ST_TO_ADDR
// end ;
74657: LD_VAR 0 1
74661: RET
// export function PrepareFrog ( ) ; begin
74662: LD_INT 0
74664: PPUSH
// uc_side := 0 ;
74665: LD_ADDR_OWVAR 20
74669: PUSH
74670: LD_INT 0
74672: ST_TO_ADDR
// uc_nation := 0 ;
74673: LD_ADDR_OWVAR 21
74677: PUSH
74678: LD_INT 0
74680: ST_TO_ADDR
// hc_class := class_frog ;
74681: LD_ADDR_OWVAR 28
74685: PUSH
74686: LD_INT 19
74688: ST_TO_ADDR
// hc_gallery :=  ;
74689: LD_ADDR_OWVAR 33
74693: PUSH
74694: LD_STRING 
74696: ST_TO_ADDR
// end ;
74697: LD_VAR 0 1
74701: RET
// export function PrepareFish ( ) ; begin
74702: LD_INT 0
74704: PPUSH
// uc_side := 0 ;
74705: LD_ADDR_OWVAR 20
74709: PUSH
74710: LD_INT 0
74712: ST_TO_ADDR
// uc_nation := 0 ;
74713: LD_ADDR_OWVAR 21
74717: PUSH
74718: LD_INT 0
74720: ST_TO_ADDR
// hc_class := class_fish ;
74721: LD_ADDR_OWVAR 28
74725: PUSH
74726: LD_INT 20
74728: ST_TO_ADDR
// hc_gallery :=  ;
74729: LD_ADDR_OWVAR 33
74733: PUSH
74734: LD_STRING 
74736: ST_TO_ADDR
// end ;
74737: LD_VAR 0 1
74741: RET
// export function PrepareBird ( ) ; begin
74742: LD_INT 0
74744: PPUSH
// uc_side := 0 ;
74745: LD_ADDR_OWVAR 20
74749: PUSH
74750: LD_INT 0
74752: ST_TO_ADDR
// uc_nation := 0 ;
74753: LD_ADDR_OWVAR 21
74757: PUSH
74758: LD_INT 0
74760: ST_TO_ADDR
// hc_class := class_phororhacos ;
74761: LD_ADDR_OWVAR 28
74765: PUSH
74766: LD_INT 18
74768: ST_TO_ADDR
// hc_gallery :=  ;
74769: LD_ADDR_OWVAR 33
74773: PUSH
74774: LD_STRING 
74776: ST_TO_ADDR
// end ;
74777: LD_VAR 0 1
74781: RET
// export function PrepareHorse ( ) ; begin
74782: LD_INT 0
74784: PPUSH
// uc_side := 0 ;
74785: LD_ADDR_OWVAR 20
74789: PUSH
74790: LD_INT 0
74792: ST_TO_ADDR
// uc_nation := 0 ;
74793: LD_ADDR_OWVAR 21
74797: PUSH
74798: LD_INT 0
74800: ST_TO_ADDR
// hc_class := class_horse ;
74801: LD_ADDR_OWVAR 28
74805: PUSH
74806: LD_INT 21
74808: ST_TO_ADDR
// hc_gallery :=  ;
74809: LD_ADDR_OWVAR 33
74813: PUSH
74814: LD_STRING 
74816: ST_TO_ADDR
// end ;
74817: LD_VAR 0 1
74821: RET
// export function PrepareMastodont ( ) ; begin
74822: LD_INT 0
74824: PPUSH
// uc_side := 0 ;
74825: LD_ADDR_OWVAR 20
74829: PUSH
74830: LD_INT 0
74832: ST_TO_ADDR
// uc_nation := 0 ;
74833: LD_ADDR_OWVAR 21
74837: PUSH
74838: LD_INT 0
74840: ST_TO_ADDR
// vc_chassis := class_mastodont ;
74841: LD_ADDR_OWVAR 37
74845: PUSH
74846: LD_INT 31
74848: ST_TO_ADDR
// vc_control := control_rider ;
74849: LD_ADDR_OWVAR 38
74853: PUSH
74854: LD_INT 4
74856: ST_TO_ADDR
// end ;
74857: LD_VAR 0 1
74861: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
74862: LD_INT 0
74864: PPUSH
74865: PPUSH
74866: PPUSH
// uc_side = 0 ;
74867: LD_ADDR_OWVAR 20
74871: PUSH
74872: LD_INT 0
74874: ST_TO_ADDR
// uc_nation = 0 ;
74875: LD_ADDR_OWVAR 21
74879: PUSH
74880: LD_INT 0
74882: ST_TO_ADDR
// InitHc_All ( ) ;
74883: CALL_OW 584
// InitVc ;
74887: CALL_OW 20
// if mastodonts then
74891: LD_VAR 0 6
74895: IFFALSE 74962
// for i = 1 to mastodonts do
74897: LD_ADDR_VAR 0 11
74901: PUSH
74902: DOUBLE
74903: LD_INT 1
74905: DEC
74906: ST_TO_ADDR
74907: LD_VAR 0 6
74911: PUSH
74912: FOR_TO
74913: IFFALSE 74960
// begin vc_chassis := 31 ;
74915: LD_ADDR_OWVAR 37
74919: PUSH
74920: LD_INT 31
74922: ST_TO_ADDR
// vc_control := control_rider ;
74923: LD_ADDR_OWVAR 38
74927: PUSH
74928: LD_INT 4
74930: ST_TO_ADDR
// animal := CreateVehicle ;
74931: LD_ADDR_VAR 0 12
74935: PUSH
74936: CALL_OW 45
74940: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74941: LD_VAR 0 12
74945: PPUSH
74946: LD_VAR 0 8
74950: PPUSH
74951: LD_INT 0
74953: PPUSH
74954: CALL 77090 0 3
// end ;
74958: GO 74912
74960: POP
74961: POP
// if horses then
74962: LD_VAR 0 5
74966: IFFALSE 75033
// for i = 1 to horses do
74968: LD_ADDR_VAR 0 11
74972: PUSH
74973: DOUBLE
74974: LD_INT 1
74976: DEC
74977: ST_TO_ADDR
74978: LD_VAR 0 5
74982: PUSH
74983: FOR_TO
74984: IFFALSE 75031
// begin hc_class := 21 ;
74986: LD_ADDR_OWVAR 28
74990: PUSH
74991: LD_INT 21
74993: ST_TO_ADDR
// hc_gallery :=  ;
74994: LD_ADDR_OWVAR 33
74998: PUSH
74999: LD_STRING 
75001: ST_TO_ADDR
// animal := CreateHuman ;
75002: LD_ADDR_VAR 0 12
75006: PUSH
75007: CALL_OW 44
75011: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75012: LD_VAR 0 12
75016: PPUSH
75017: LD_VAR 0 8
75021: PPUSH
75022: LD_INT 0
75024: PPUSH
75025: CALL 77090 0 3
// end ;
75029: GO 74983
75031: POP
75032: POP
// if birds then
75033: LD_VAR 0 1
75037: IFFALSE 75104
// for i = 1 to birds do
75039: LD_ADDR_VAR 0 11
75043: PUSH
75044: DOUBLE
75045: LD_INT 1
75047: DEC
75048: ST_TO_ADDR
75049: LD_VAR 0 1
75053: PUSH
75054: FOR_TO
75055: IFFALSE 75102
// begin hc_class := 18 ;
75057: LD_ADDR_OWVAR 28
75061: PUSH
75062: LD_INT 18
75064: ST_TO_ADDR
// hc_gallery =  ;
75065: LD_ADDR_OWVAR 33
75069: PUSH
75070: LD_STRING 
75072: ST_TO_ADDR
// animal := CreateHuman ;
75073: LD_ADDR_VAR 0 12
75077: PUSH
75078: CALL_OW 44
75082: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75083: LD_VAR 0 12
75087: PPUSH
75088: LD_VAR 0 8
75092: PPUSH
75093: LD_INT 0
75095: PPUSH
75096: CALL 77090 0 3
// end ;
75100: GO 75054
75102: POP
75103: POP
// if tigers then
75104: LD_VAR 0 2
75108: IFFALSE 75192
// for i = 1 to tigers do
75110: LD_ADDR_VAR 0 11
75114: PUSH
75115: DOUBLE
75116: LD_INT 1
75118: DEC
75119: ST_TO_ADDR
75120: LD_VAR 0 2
75124: PUSH
75125: FOR_TO
75126: IFFALSE 75190
// begin hc_class = class_tiger ;
75128: LD_ADDR_OWVAR 28
75132: PUSH
75133: LD_INT 14
75135: ST_TO_ADDR
// hc_gallery =  ;
75136: LD_ADDR_OWVAR 33
75140: PUSH
75141: LD_STRING 
75143: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
75144: LD_ADDR_OWVAR 35
75148: PUSH
75149: LD_INT 7
75151: NEG
75152: PPUSH
75153: LD_INT 7
75155: PPUSH
75156: CALL_OW 12
75160: ST_TO_ADDR
// animal := CreateHuman ;
75161: LD_ADDR_VAR 0 12
75165: PUSH
75166: CALL_OW 44
75170: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75171: LD_VAR 0 12
75175: PPUSH
75176: LD_VAR 0 8
75180: PPUSH
75181: LD_INT 0
75183: PPUSH
75184: CALL 77090 0 3
// end ;
75188: GO 75125
75190: POP
75191: POP
// if apemans then
75192: LD_VAR 0 3
75196: IFFALSE 75319
// for i = 1 to apemans do
75198: LD_ADDR_VAR 0 11
75202: PUSH
75203: DOUBLE
75204: LD_INT 1
75206: DEC
75207: ST_TO_ADDR
75208: LD_VAR 0 3
75212: PUSH
75213: FOR_TO
75214: IFFALSE 75317
// begin hc_class = class_apeman ;
75216: LD_ADDR_OWVAR 28
75220: PUSH
75221: LD_INT 12
75223: ST_TO_ADDR
// hc_gallery =  ;
75224: LD_ADDR_OWVAR 33
75228: PUSH
75229: LD_STRING 
75231: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
75232: LD_ADDR_OWVAR 35
75236: PUSH
75237: LD_INT 2
75239: NEG
75240: PPUSH
75241: LD_INT 2
75243: PPUSH
75244: CALL_OW 12
75248: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
75249: LD_ADDR_OWVAR 31
75253: PUSH
75254: LD_INT 1
75256: PPUSH
75257: LD_INT 3
75259: PPUSH
75260: CALL_OW 12
75264: PUSH
75265: LD_INT 1
75267: PPUSH
75268: LD_INT 3
75270: PPUSH
75271: CALL_OW 12
75275: PUSH
75276: LD_INT 0
75278: PUSH
75279: LD_INT 0
75281: PUSH
75282: EMPTY
75283: LIST
75284: LIST
75285: LIST
75286: LIST
75287: ST_TO_ADDR
// animal := CreateHuman ;
75288: LD_ADDR_VAR 0 12
75292: PUSH
75293: CALL_OW 44
75297: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75298: LD_VAR 0 12
75302: PPUSH
75303: LD_VAR 0 8
75307: PPUSH
75308: LD_INT 0
75310: PPUSH
75311: CALL 77090 0 3
// end ;
75315: GO 75213
75317: POP
75318: POP
// if enchidnas then
75319: LD_VAR 0 4
75323: IFFALSE 75390
// for i = 1 to enchidnas do
75325: LD_ADDR_VAR 0 11
75329: PUSH
75330: DOUBLE
75331: LD_INT 1
75333: DEC
75334: ST_TO_ADDR
75335: LD_VAR 0 4
75339: PUSH
75340: FOR_TO
75341: IFFALSE 75388
// begin hc_class = 13 ;
75343: LD_ADDR_OWVAR 28
75347: PUSH
75348: LD_INT 13
75350: ST_TO_ADDR
// hc_gallery =  ;
75351: LD_ADDR_OWVAR 33
75355: PUSH
75356: LD_STRING 
75358: ST_TO_ADDR
// animal := CreateHuman ;
75359: LD_ADDR_VAR 0 12
75363: PUSH
75364: CALL_OW 44
75368: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75369: LD_VAR 0 12
75373: PPUSH
75374: LD_VAR 0 8
75378: PPUSH
75379: LD_INT 0
75381: PPUSH
75382: CALL 77090 0 3
// end ;
75386: GO 75340
75388: POP
75389: POP
// if fishes then
75390: LD_VAR 0 7
75394: IFFALSE 75461
// for i = 1 to fishes do
75396: LD_ADDR_VAR 0 11
75400: PUSH
75401: DOUBLE
75402: LD_INT 1
75404: DEC
75405: ST_TO_ADDR
75406: LD_VAR 0 7
75410: PUSH
75411: FOR_TO
75412: IFFALSE 75459
// begin hc_class = 20 ;
75414: LD_ADDR_OWVAR 28
75418: PUSH
75419: LD_INT 20
75421: ST_TO_ADDR
// hc_gallery =  ;
75422: LD_ADDR_OWVAR 33
75426: PUSH
75427: LD_STRING 
75429: ST_TO_ADDR
// animal := CreateHuman ;
75430: LD_ADDR_VAR 0 12
75434: PUSH
75435: CALL_OW 44
75439: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
75440: LD_VAR 0 12
75444: PPUSH
75445: LD_VAR 0 9
75449: PPUSH
75450: LD_INT 0
75452: PPUSH
75453: CALL 77090 0 3
// end ;
75457: GO 75411
75459: POP
75460: POP
// end ;
75461: LD_VAR 0 10
75465: RET
// export function WantHeal ( sci , unit ) ; begin
75466: LD_INT 0
75468: PPUSH
// if GetTaskList ( sci ) > 0 then
75469: LD_VAR 0 1
75473: PPUSH
75474: CALL_OW 437
75478: PUSH
75479: LD_INT 0
75481: GREATER
75482: IFFALSE 75552
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
75484: LD_VAR 0 1
75488: PPUSH
75489: CALL_OW 437
75493: PUSH
75494: LD_INT 1
75496: ARRAY
75497: PUSH
75498: LD_INT 1
75500: ARRAY
75501: PUSH
75502: LD_STRING l
75504: EQUAL
75505: PUSH
75506: LD_VAR 0 1
75510: PPUSH
75511: CALL_OW 437
75515: PUSH
75516: LD_INT 1
75518: ARRAY
75519: PUSH
75520: LD_INT 4
75522: ARRAY
75523: PUSH
75524: LD_VAR 0 2
75528: EQUAL
75529: AND
75530: IFFALSE 75542
// result := true else
75532: LD_ADDR_VAR 0 3
75536: PUSH
75537: LD_INT 1
75539: ST_TO_ADDR
75540: GO 75550
// result := false ;
75542: LD_ADDR_VAR 0 3
75546: PUSH
75547: LD_INT 0
75549: ST_TO_ADDR
// end else
75550: GO 75560
// result := false ;
75552: LD_ADDR_VAR 0 3
75556: PUSH
75557: LD_INT 0
75559: ST_TO_ADDR
// end ;
75560: LD_VAR 0 3
75564: RET
// export function HealTarget ( sci ) ; begin
75565: LD_INT 0
75567: PPUSH
// if not sci then
75568: LD_VAR 0 1
75572: NOT
75573: IFFALSE 75577
// exit ;
75575: GO 75642
// result := 0 ;
75577: LD_ADDR_VAR 0 2
75581: PUSH
75582: LD_INT 0
75584: ST_TO_ADDR
// if GetTaskList ( sci ) then
75585: LD_VAR 0 1
75589: PPUSH
75590: CALL_OW 437
75594: IFFALSE 75642
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
75596: LD_VAR 0 1
75600: PPUSH
75601: CALL_OW 437
75605: PUSH
75606: LD_INT 1
75608: ARRAY
75609: PUSH
75610: LD_INT 1
75612: ARRAY
75613: PUSH
75614: LD_STRING l
75616: EQUAL
75617: IFFALSE 75642
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
75619: LD_ADDR_VAR 0 2
75623: PUSH
75624: LD_VAR 0 1
75628: PPUSH
75629: CALL_OW 437
75633: PUSH
75634: LD_INT 1
75636: ARRAY
75637: PUSH
75638: LD_INT 4
75640: ARRAY
75641: ST_TO_ADDR
// end ;
75642: LD_VAR 0 2
75646: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
75647: LD_INT 0
75649: PPUSH
75650: PPUSH
75651: PPUSH
75652: PPUSH
// if not base_units then
75653: LD_VAR 0 1
75657: NOT
75658: IFFALSE 75662
// exit ;
75660: GO 75749
// result := false ;
75662: LD_ADDR_VAR 0 2
75666: PUSH
75667: LD_INT 0
75669: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
75670: LD_ADDR_VAR 0 5
75674: PUSH
75675: LD_VAR 0 1
75679: PPUSH
75680: LD_INT 21
75682: PUSH
75683: LD_INT 3
75685: PUSH
75686: EMPTY
75687: LIST
75688: LIST
75689: PPUSH
75690: CALL_OW 72
75694: ST_TO_ADDR
// if not tmp then
75695: LD_VAR 0 5
75699: NOT
75700: IFFALSE 75704
// exit ;
75702: GO 75749
// for i in tmp do
75704: LD_ADDR_VAR 0 3
75708: PUSH
75709: LD_VAR 0 5
75713: PUSH
75714: FOR_IN
75715: IFFALSE 75747
// begin result := EnemyInRange ( i , 22 ) ;
75717: LD_ADDR_VAR 0 2
75721: PUSH
75722: LD_VAR 0 3
75726: PPUSH
75727: LD_INT 22
75729: PPUSH
75730: CALL 73347 0 2
75734: ST_TO_ADDR
// if result then
75735: LD_VAR 0 2
75739: IFFALSE 75745
// exit ;
75741: POP
75742: POP
75743: GO 75749
// end ;
75745: GO 75714
75747: POP
75748: POP
// end ;
75749: LD_VAR 0 2
75753: RET
// export function FilterByTag ( units , tag ) ; begin
75754: LD_INT 0
75756: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
75757: LD_ADDR_VAR 0 3
75761: PUSH
75762: LD_VAR 0 1
75766: PPUSH
75767: LD_INT 120
75769: PUSH
75770: LD_VAR 0 2
75774: PUSH
75775: EMPTY
75776: LIST
75777: LIST
75778: PPUSH
75779: CALL_OW 72
75783: ST_TO_ADDR
// end ;
75784: LD_VAR 0 3
75788: RET
// export function IsDriver ( un ) ; begin
75789: LD_INT 0
75791: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
75792: LD_ADDR_VAR 0 2
75796: PUSH
75797: LD_VAR 0 1
75801: PUSH
75802: LD_INT 55
75804: PUSH
75805: EMPTY
75806: LIST
75807: PPUSH
75808: CALL_OW 69
75812: IN
75813: ST_TO_ADDR
// end ;
75814: LD_VAR 0 2
75818: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
75819: LD_INT 0
75821: PPUSH
75822: PPUSH
// list := [ ] ;
75823: LD_ADDR_VAR 0 5
75827: PUSH
75828: EMPTY
75829: ST_TO_ADDR
// case d of 0 :
75830: LD_VAR 0 3
75834: PUSH
75835: LD_INT 0
75837: DOUBLE
75838: EQUAL
75839: IFTRUE 75843
75841: GO 75976
75843: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
75844: LD_ADDR_VAR 0 5
75848: PUSH
75849: LD_VAR 0 1
75853: PUSH
75854: LD_INT 4
75856: MINUS
75857: PUSH
75858: LD_VAR 0 2
75862: PUSH
75863: LD_INT 4
75865: MINUS
75866: PUSH
75867: LD_INT 2
75869: PUSH
75870: EMPTY
75871: LIST
75872: LIST
75873: LIST
75874: PUSH
75875: LD_VAR 0 1
75879: PUSH
75880: LD_INT 3
75882: MINUS
75883: PUSH
75884: LD_VAR 0 2
75888: PUSH
75889: LD_INT 1
75891: PUSH
75892: EMPTY
75893: LIST
75894: LIST
75895: LIST
75896: PUSH
75897: LD_VAR 0 1
75901: PUSH
75902: LD_INT 4
75904: PLUS
75905: PUSH
75906: LD_VAR 0 2
75910: PUSH
75911: LD_INT 4
75913: PUSH
75914: EMPTY
75915: LIST
75916: LIST
75917: LIST
75918: PUSH
75919: LD_VAR 0 1
75923: PUSH
75924: LD_INT 3
75926: PLUS
75927: PUSH
75928: LD_VAR 0 2
75932: PUSH
75933: LD_INT 3
75935: PLUS
75936: PUSH
75937: LD_INT 5
75939: PUSH
75940: EMPTY
75941: LIST
75942: LIST
75943: LIST
75944: PUSH
75945: LD_VAR 0 1
75949: PUSH
75950: LD_VAR 0 2
75954: PUSH
75955: LD_INT 4
75957: PLUS
75958: PUSH
75959: LD_INT 0
75961: PUSH
75962: EMPTY
75963: LIST
75964: LIST
75965: LIST
75966: PUSH
75967: EMPTY
75968: LIST
75969: LIST
75970: LIST
75971: LIST
75972: LIST
75973: ST_TO_ADDR
// end ; 1 :
75974: GO 76674
75976: LD_INT 1
75978: DOUBLE
75979: EQUAL
75980: IFTRUE 75984
75982: GO 76117
75984: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
75985: LD_ADDR_VAR 0 5
75989: PUSH
75990: LD_VAR 0 1
75994: PUSH
75995: LD_VAR 0 2
75999: PUSH
76000: LD_INT 4
76002: MINUS
76003: PUSH
76004: LD_INT 3
76006: PUSH
76007: EMPTY
76008: LIST
76009: LIST
76010: LIST
76011: PUSH
76012: LD_VAR 0 1
76016: PUSH
76017: LD_INT 3
76019: MINUS
76020: PUSH
76021: LD_VAR 0 2
76025: PUSH
76026: LD_INT 3
76028: MINUS
76029: PUSH
76030: LD_INT 2
76032: PUSH
76033: EMPTY
76034: LIST
76035: LIST
76036: LIST
76037: PUSH
76038: LD_VAR 0 1
76042: PUSH
76043: LD_INT 4
76045: MINUS
76046: PUSH
76047: LD_VAR 0 2
76051: PUSH
76052: LD_INT 1
76054: PUSH
76055: EMPTY
76056: LIST
76057: LIST
76058: LIST
76059: PUSH
76060: LD_VAR 0 1
76064: PUSH
76065: LD_VAR 0 2
76069: PUSH
76070: LD_INT 3
76072: PLUS
76073: PUSH
76074: LD_INT 0
76076: PUSH
76077: EMPTY
76078: LIST
76079: LIST
76080: LIST
76081: PUSH
76082: LD_VAR 0 1
76086: PUSH
76087: LD_INT 4
76089: PLUS
76090: PUSH
76091: LD_VAR 0 2
76095: PUSH
76096: LD_INT 4
76098: PLUS
76099: PUSH
76100: LD_INT 5
76102: PUSH
76103: EMPTY
76104: LIST
76105: LIST
76106: LIST
76107: PUSH
76108: EMPTY
76109: LIST
76110: LIST
76111: LIST
76112: LIST
76113: LIST
76114: ST_TO_ADDR
// end ; 2 :
76115: GO 76674
76117: LD_INT 2
76119: DOUBLE
76120: EQUAL
76121: IFTRUE 76125
76123: GO 76254
76125: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
76126: LD_ADDR_VAR 0 5
76130: PUSH
76131: LD_VAR 0 1
76135: PUSH
76136: LD_VAR 0 2
76140: PUSH
76141: LD_INT 3
76143: MINUS
76144: PUSH
76145: LD_INT 3
76147: PUSH
76148: EMPTY
76149: LIST
76150: LIST
76151: LIST
76152: PUSH
76153: LD_VAR 0 1
76157: PUSH
76158: LD_INT 4
76160: PLUS
76161: PUSH
76162: LD_VAR 0 2
76166: PUSH
76167: LD_INT 4
76169: PUSH
76170: EMPTY
76171: LIST
76172: LIST
76173: LIST
76174: PUSH
76175: LD_VAR 0 1
76179: PUSH
76180: LD_VAR 0 2
76184: PUSH
76185: LD_INT 4
76187: PLUS
76188: PUSH
76189: LD_INT 0
76191: PUSH
76192: EMPTY
76193: LIST
76194: LIST
76195: LIST
76196: PUSH
76197: LD_VAR 0 1
76201: PUSH
76202: LD_INT 3
76204: MINUS
76205: PUSH
76206: LD_VAR 0 2
76210: PUSH
76211: LD_INT 1
76213: PUSH
76214: EMPTY
76215: LIST
76216: LIST
76217: LIST
76218: PUSH
76219: LD_VAR 0 1
76223: PUSH
76224: LD_INT 4
76226: MINUS
76227: PUSH
76228: LD_VAR 0 2
76232: PUSH
76233: LD_INT 4
76235: MINUS
76236: PUSH
76237: LD_INT 2
76239: PUSH
76240: EMPTY
76241: LIST
76242: LIST
76243: LIST
76244: PUSH
76245: EMPTY
76246: LIST
76247: LIST
76248: LIST
76249: LIST
76250: LIST
76251: ST_TO_ADDR
// end ; 3 :
76252: GO 76674
76254: LD_INT 3
76256: DOUBLE
76257: EQUAL
76258: IFTRUE 76262
76260: GO 76395
76262: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
76263: LD_ADDR_VAR 0 5
76267: PUSH
76268: LD_VAR 0 1
76272: PUSH
76273: LD_INT 3
76275: PLUS
76276: PUSH
76277: LD_VAR 0 2
76281: PUSH
76282: LD_INT 4
76284: PUSH
76285: EMPTY
76286: LIST
76287: LIST
76288: LIST
76289: PUSH
76290: LD_VAR 0 1
76294: PUSH
76295: LD_INT 4
76297: PLUS
76298: PUSH
76299: LD_VAR 0 2
76303: PUSH
76304: LD_INT 4
76306: PLUS
76307: PUSH
76308: LD_INT 5
76310: PUSH
76311: EMPTY
76312: LIST
76313: LIST
76314: LIST
76315: PUSH
76316: LD_VAR 0 1
76320: PUSH
76321: LD_INT 4
76323: MINUS
76324: PUSH
76325: LD_VAR 0 2
76329: PUSH
76330: LD_INT 1
76332: PUSH
76333: EMPTY
76334: LIST
76335: LIST
76336: LIST
76337: PUSH
76338: LD_VAR 0 1
76342: PUSH
76343: LD_VAR 0 2
76347: PUSH
76348: LD_INT 4
76350: MINUS
76351: PUSH
76352: LD_INT 3
76354: PUSH
76355: EMPTY
76356: LIST
76357: LIST
76358: LIST
76359: PUSH
76360: LD_VAR 0 1
76364: PUSH
76365: LD_INT 3
76367: MINUS
76368: PUSH
76369: LD_VAR 0 2
76373: PUSH
76374: LD_INT 3
76376: MINUS
76377: PUSH
76378: LD_INT 2
76380: PUSH
76381: EMPTY
76382: LIST
76383: LIST
76384: LIST
76385: PUSH
76386: EMPTY
76387: LIST
76388: LIST
76389: LIST
76390: LIST
76391: LIST
76392: ST_TO_ADDR
// end ; 4 :
76393: GO 76674
76395: LD_INT 4
76397: DOUBLE
76398: EQUAL
76399: IFTRUE 76403
76401: GO 76536
76403: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
76404: LD_ADDR_VAR 0 5
76408: PUSH
76409: LD_VAR 0 1
76413: PUSH
76414: LD_VAR 0 2
76418: PUSH
76419: LD_INT 4
76421: PLUS
76422: PUSH
76423: LD_INT 0
76425: PUSH
76426: EMPTY
76427: LIST
76428: LIST
76429: LIST
76430: PUSH
76431: LD_VAR 0 1
76435: PUSH
76436: LD_INT 3
76438: PLUS
76439: PUSH
76440: LD_VAR 0 2
76444: PUSH
76445: LD_INT 3
76447: PLUS
76448: PUSH
76449: LD_INT 5
76451: PUSH
76452: EMPTY
76453: LIST
76454: LIST
76455: LIST
76456: PUSH
76457: LD_VAR 0 1
76461: PUSH
76462: LD_INT 4
76464: PLUS
76465: PUSH
76466: LD_VAR 0 2
76470: PUSH
76471: LD_INT 4
76473: PUSH
76474: EMPTY
76475: LIST
76476: LIST
76477: LIST
76478: PUSH
76479: LD_VAR 0 1
76483: PUSH
76484: LD_VAR 0 2
76488: PUSH
76489: LD_INT 3
76491: MINUS
76492: PUSH
76493: LD_INT 3
76495: PUSH
76496: EMPTY
76497: LIST
76498: LIST
76499: LIST
76500: PUSH
76501: LD_VAR 0 1
76505: PUSH
76506: LD_INT 4
76508: MINUS
76509: PUSH
76510: LD_VAR 0 2
76514: PUSH
76515: LD_INT 4
76517: MINUS
76518: PUSH
76519: LD_INT 2
76521: PUSH
76522: EMPTY
76523: LIST
76524: LIST
76525: LIST
76526: PUSH
76527: EMPTY
76528: LIST
76529: LIST
76530: LIST
76531: LIST
76532: LIST
76533: ST_TO_ADDR
// end ; 5 :
76534: GO 76674
76536: LD_INT 5
76538: DOUBLE
76539: EQUAL
76540: IFTRUE 76544
76542: GO 76673
76544: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
76545: LD_ADDR_VAR 0 5
76549: PUSH
76550: LD_VAR 0 1
76554: PUSH
76555: LD_INT 4
76557: MINUS
76558: PUSH
76559: LD_VAR 0 2
76563: PUSH
76564: LD_INT 1
76566: PUSH
76567: EMPTY
76568: LIST
76569: LIST
76570: LIST
76571: PUSH
76572: LD_VAR 0 1
76576: PUSH
76577: LD_VAR 0 2
76581: PUSH
76582: LD_INT 4
76584: MINUS
76585: PUSH
76586: LD_INT 3
76588: PUSH
76589: EMPTY
76590: LIST
76591: LIST
76592: LIST
76593: PUSH
76594: LD_VAR 0 1
76598: PUSH
76599: LD_INT 4
76601: PLUS
76602: PUSH
76603: LD_VAR 0 2
76607: PUSH
76608: LD_INT 4
76610: PLUS
76611: PUSH
76612: LD_INT 5
76614: PUSH
76615: EMPTY
76616: LIST
76617: LIST
76618: LIST
76619: PUSH
76620: LD_VAR 0 1
76624: PUSH
76625: LD_INT 3
76627: PLUS
76628: PUSH
76629: LD_VAR 0 2
76633: PUSH
76634: LD_INT 4
76636: PUSH
76637: EMPTY
76638: LIST
76639: LIST
76640: LIST
76641: PUSH
76642: LD_VAR 0 1
76646: PUSH
76647: LD_VAR 0 2
76651: PUSH
76652: LD_INT 3
76654: PLUS
76655: PUSH
76656: LD_INT 0
76658: PUSH
76659: EMPTY
76660: LIST
76661: LIST
76662: LIST
76663: PUSH
76664: EMPTY
76665: LIST
76666: LIST
76667: LIST
76668: LIST
76669: LIST
76670: ST_TO_ADDR
// end ; end ;
76671: GO 76674
76673: POP
// result := list ;
76674: LD_ADDR_VAR 0 4
76678: PUSH
76679: LD_VAR 0 5
76683: ST_TO_ADDR
// end ;
76684: LD_VAR 0 4
76688: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
76689: LD_INT 0
76691: PPUSH
76692: PPUSH
76693: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
76694: LD_VAR 0 1
76698: NOT
76699: PUSH
76700: LD_VAR 0 2
76704: PUSH
76705: LD_INT 1
76707: PUSH
76708: LD_INT 2
76710: PUSH
76711: LD_INT 3
76713: PUSH
76714: LD_INT 4
76716: PUSH
76717: EMPTY
76718: LIST
76719: LIST
76720: LIST
76721: LIST
76722: IN
76723: NOT
76724: OR
76725: IFFALSE 76729
// exit ;
76727: GO 76812
// tmp := [ ] ;
76729: LD_ADDR_VAR 0 5
76733: PUSH
76734: EMPTY
76735: ST_TO_ADDR
// for i in units do
76736: LD_ADDR_VAR 0 4
76740: PUSH
76741: LD_VAR 0 1
76745: PUSH
76746: FOR_IN
76747: IFFALSE 76781
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
76749: LD_ADDR_VAR 0 5
76753: PUSH
76754: LD_VAR 0 5
76758: PPUSH
76759: LD_VAR 0 4
76763: PPUSH
76764: LD_VAR 0 2
76768: PPUSH
76769: CALL_OW 259
76773: PPUSH
76774: CALL 78185 0 2
76778: ST_TO_ADDR
76779: GO 76746
76781: POP
76782: POP
// if not tmp then
76783: LD_VAR 0 5
76787: NOT
76788: IFFALSE 76792
// exit ;
76790: GO 76812
// result := SortListByListDesc ( units , tmp ) ;
76792: LD_ADDR_VAR 0 3
76796: PUSH
76797: LD_VAR 0 1
76801: PPUSH
76802: LD_VAR 0 5
76806: PPUSH
76807: CALL_OW 77
76811: ST_TO_ADDR
// end ;
76812: LD_VAR 0 3
76816: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
76817: LD_INT 0
76819: PPUSH
76820: PPUSH
76821: PPUSH
// result := false ;
76822: LD_ADDR_VAR 0 3
76826: PUSH
76827: LD_INT 0
76829: ST_TO_ADDR
// if not building then
76830: LD_VAR 0 2
76834: NOT
76835: IFFALSE 76839
// exit ;
76837: GO 76977
// x := GetX ( building ) ;
76839: LD_ADDR_VAR 0 4
76843: PUSH
76844: LD_VAR 0 2
76848: PPUSH
76849: CALL_OW 250
76853: ST_TO_ADDR
// y := GetY ( building ) ;
76854: LD_ADDR_VAR 0 5
76858: PUSH
76859: LD_VAR 0 2
76863: PPUSH
76864: CALL_OW 251
76868: ST_TO_ADDR
// if not x or not y then
76869: LD_VAR 0 4
76873: NOT
76874: PUSH
76875: LD_VAR 0 5
76879: NOT
76880: OR
76881: IFFALSE 76885
// exit ;
76883: GO 76977
// if GetTaskList ( unit ) then
76885: LD_VAR 0 1
76889: PPUSH
76890: CALL_OW 437
76894: IFFALSE 76977
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76896: LD_STRING e
76898: PUSH
76899: LD_VAR 0 1
76903: PPUSH
76904: CALL_OW 437
76908: PUSH
76909: LD_INT 1
76911: ARRAY
76912: PUSH
76913: LD_INT 1
76915: ARRAY
76916: EQUAL
76917: PUSH
76918: LD_VAR 0 4
76922: PUSH
76923: LD_VAR 0 1
76927: PPUSH
76928: CALL_OW 437
76932: PUSH
76933: LD_INT 1
76935: ARRAY
76936: PUSH
76937: LD_INT 2
76939: ARRAY
76940: EQUAL
76941: AND
76942: PUSH
76943: LD_VAR 0 5
76947: PUSH
76948: LD_VAR 0 1
76952: PPUSH
76953: CALL_OW 437
76957: PUSH
76958: LD_INT 1
76960: ARRAY
76961: PUSH
76962: LD_INT 3
76964: ARRAY
76965: EQUAL
76966: AND
76967: IFFALSE 76977
// result := true end ;
76969: LD_ADDR_VAR 0 3
76973: PUSH
76974: LD_INT 1
76976: ST_TO_ADDR
// end ;
76977: LD_VAR 0 3
76981: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
76982: LD_INT 0
76984: PPUSH
// result := false ;
76985: LD_ADDR_VAR 0 4
76989: PUSH
76990: LD_INT 0
76992: ST_TO_ADDR
// if GetTaskList ( unit ) then
76993: LD_VAR 0 1
76997: PPUSH
76998: CALL_OW 437
77002: IFFALSE 77085
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77004: LD_STRING M
77006: PUSH
77007: LD_VAR 0 1
77011: PPUSH
77012: CALL_OW 437
77016: PUSH
77017: LD_INT 1
77019: ARRAY
77020: PUSH
77021: LD_INT 1
77023: ARRAY
77024: EQUAL
77025: PUSH
77026: LD_VAR 0 2
77030: PUSH
77031: LD_VAR 0 1
77035: PPUSH
77036: CALL_OW 437
77040: PUSH
77041: LD_INT 1
77043: ARRAY
77044: PUSH
77045: LD_INT 2
77047: ARRAY
77048: EQUAL
77049: AND
77050: PUSH
77051: LD_VAR 0 3
77055: PUSH
77056: LD_VAR 0 1
77060: PPUSH
77061: CALL_OW 437
77065: PUSH
77066: LD_INT 1
77068: ARRAY
77069: PUSH
77070: LD_INT 3
77072: ARRAY
77073: EQUAL
77074: AND
77075: IFFALSE 77085
// result := true ;
77077: LD_ADDR_VAR 0 4
77081: PUSH
77082: LD_INT 1
77084: ST_TO_ADDR
// end ; end ;
77085: LD_VAR 0 4
77089: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
77090: LD_INT 0
77092: PPUSH
77093: PPUSH
77094: PPUSH
77095: PPUSH
// if not unit or not area then
77096: LD_VAR 0 1
77100: NOT
77101: PUSH
77102: LD_VAR 0 2
77106: NOT
77107: OR
77108: IFFALSE 77112
// exit ;
77110: GO 77288
// tmp := AreaToList ( area , i ) ;
77112: LD_ADDR_VAR 0 6
77116: PUSH
77117: LD_VAR 0 2
77121: PPUSH
77122: LD_VAR 0 5
77126: PPUSH
77127: CALL_OW 517
77131: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
77132: LD_ADDR_VAR 0 5
77136: PUSH
77137: DOUBLE
77138: LD_INT 1
77140: DEC
77141: ST_TO_ADDR
77142: LD_VAR 0 6
77146: PUSH
77147: LD_INT 1
77149: ARRAY
77150: PUSH
77151: FOR_TO
77152: IFFALSE 77286
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
77154: LD_ADDR_VAR 0 7
77158: PUSH
77159: LD_VAR 0 6
77163: PUSH
77164: LD_INT 1
77166: ARRAY
77167: PUSH
77168: LD_VAR 0 5
77172: ARRAY
77173: PUSH
77174: LD_VAR 0 6
77178: PUSH
77179: LD_INT 2
77181: ARRAY
77182: PUSH
77183: LD_VAR 0 5
77187: ARRAY
77188: PUSH
77189: EMPTY
77190: LIST
77191: LIST
77192: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
77193: LD_INT 92
77195: PUSH
77196: LD_VAR 0 7
77200: PUSH
77201: LD_INT 1
77203: ARRAY
77204: PUSH
77205: LD_VAR 0 7
77209: PUSH
77210: LD_INT 2
77212: ARRAY
77213: PUSH
77214: LD_INT 2
77216: PUSH
77217: EMPTY
77218: LIST
77219: LIST
77220: LIST
77221: LIST
77222: PPUSH
77223: CALL_OW 69
77227: PUSH
77228: LD_INT 0
77230: EQUAL
77231: IFFALSE 77284
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
77233: LD_VAR 0 1
77237: PPUSH
77238: LD_VAR 0 7
77242: PUSH
77243: LD_INT 1
77245: ARRAY
77246: PPUSH
77247: LD_VAR 0 7
77251: PUSH
77252: LD_INT 2
77254: ARRAY
77255: PPUSH
77256: LD_VAR 0 3
77260: PPUSH
77261: CALL_OW 48
// result := IsPlaced ( unit ) ;
77265: LD_ADDR_VAR 0 4
77269: PUSH
77270: LD_VAR 0 1
77274: PPUSH
77275: CALL_OW 305
77279: ST_TO_ADDR
// exit ;
77280: POP
77281: POP
77282: GO 77288
// end ; end ;
77284: GO 77151
77286: POP
77287: POP
// end ;
77288: LD_VAR 0 4
77292: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
77293: LD_INT 0
77295: PPUSH
77296: PPUSH
77297: PPUSH
// if not side or side > 8 then
77298: LD_VAR 0 1
77302: NOT
77303: PUSH
77304: LD_VAR 0 1
77308: PUSH
77309: LD_INT 8
77311: GREATER
77312: OR
77313: IFFALSE 77317
// exit ;
77315: GO 77504
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
77317: LD_ADDR_VAR 0 4
77321: PUSH
77322: LD_INT 22
77324: PUSH
77325: LD_VAR 0 1
77329: PUSH
77330: EMPTY
77331: LIST
77332: LIST
77333: PUSH
77334: LD_INT 21
77336: PUSH
77337: LD_INT 3
77339: PUSH
77340: EMPTY
77341: LIST
77342: LIST
77343: PUSH
77344: EMPTY
77345: LIST
77346: LIST
77347: PPUSH
77348: CALL_OW 69
77352: ST_TO_ADDR
// if not tmp then
77353: LD_VAR 0 4
77357: NOT
77358: IFFALSE 77362
// exit ;
77360: GO 77504
// enable_addtolog := true ;
77362: LD_ADDR_OWVAR 81
77366: PUSH
77367: LD_INT 1
77369: ST_TO_ADDR
// AddToLog ( [ ) ;
77370: LD_STRING [
77372: PPUSH
77373: CALL_OW 561
// for i in tmp do
77377: LD_ADDR_VAR 0 3
77381: PUSH
77382: LD_VAR 0 4
77386: PUSH
77387: FOR_IN
77388: IFFALSE 77495
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
77390: LD_STRING [
77392: PUSH
77393: LD_VAR 0 3
77397: PPUSH
77398: CALL_OW 266
77402: STR
77403: PUSH
77404: LD_STRING , 
77406: STR
77407: PUSH
77408: LD_VAR 0 3
77412: PPUSH
77413: CALL_OW 250
77417: STR
77418: PUSH
77419: LD_STRING , 
77421: STR
77422: PUSH
77423: LD_VAR 0 3
77427: PPUSH
77428: CALL_OW 251
77432: STR
77433: PUSH
77434: LD_STRING , 
77436: STR
77437: PUSH
77438: LD_VAR 0 3
77442: PPUSH
77443: CALL_OW 254
77447: STR
77448: PUSH
77449: LD_STRING , 
77451: STR
77452: PUSH
77453: LD_VAR 0 3
77457: PPUSH
77458: LD_INT 1
77460: PPUSH
77461: CALL_OW 268
77465: STR
77466: PUSH
77467: LD_STRING , 
77469: STR
77470: PUSH
77471: LD_VAR 0 3
77475: PPUSH
77476: LD_INT 2
77478: PPUSH
77479: CALL_OW 268
77483: STR
77484: PUSH
77485: LD_STRING ],
77487: STR
77488: PPUSH
77489: CALL_OW 561
// end ;
77493: GO 77387
77495: POP
77496: POP
// AddToLog ( ]; ) ;
77497: LD_STRING ];
77499: PPUSH
77500: CALL_OW 561
// end ;
77504: LD_VAR 0 2
77508: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
77509: LD_INT 0
77511: PPUSH
77512: PPUSH
77513: PPUSH
77514: PPUSH
77515: PPUSH
// if not area or not rate or not max then
77516: LD_VAR 0 1
77520: NOT
77521: PUSH
77522: LD_VAR 0 2
77526: NOT
77527: OR
77528: PUSH
77529: LD_VAR 0 4
77533: NOT
77534: OR
77535: IFFALSE 77539
// exit ;
77537: GO 77728
// while 1 do
77539: LD_INT 1
77541: IFFALSE 77728
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
77543: LD_ADDR_VAR 0 9
77547: PUSH
77548: LD_VAR 0 1
77552: PPUSH
77553: LD_INT 1
77555: PPUSH
77556: CALL_OW 287
77560: PUSH
77561: LD_INT 10
77563: MUL
77564: ST_TO_ADDR
// r := rate / 10 ;
77565: LD_ADDR_VAR 0 7
77569: PUSH
77570: LD_VAR 0 2
77574: PUSH
77575: LD_INT 10
77577: DIVREAL
77578: ST_TO_ADDR
// time := 1 1$00 ;
77579: LD_ADDR_VAR 0 8
77583: PUSH
77584: LD_INT 2100
77586: ST_TO_ADDR
// if amount < min then
77587: LD_VAR 0 9
77591: PUSH
77592: LD_VAR 0 3
77596: LESS
77597: IFFALSE 77615
// r := r * 2 else
77599: LD_ADDR_VAR 0 7
77603: PUSH
77604: LD_VAR 0 7
77608: PUSH
77609: LD_INT 2
77611: MUL
77612: ST_TO_ADDR
77613: GO 77641
// if amount > max then
77615: LD_VAR 0 9
77619: PUSH
77620: LD_VAR 0 4
77624: GREATER
77625: IFFALSE 77641
// r := r / 2 ;
77627: LD_ADDR_VAR 0 7
77631: PUSH
77632: LD_VAR 0 7
77636: PUSH
77637: LD_INT 2
77639: DIVREAL
77640: ST_TO_ADDR
// time := time / r ;
77641: LD_ADDR_VAR 0 8
77645: PUSH
77646: LD_VAR 0 8
77650: PUSH
77651: LD_VAR 0 7
77655: DIVREAL
77656: ST_TO_ADDR
// if time < 0 then
77657: LD_VAR 0 8
77661: PUSH
77662: LD_INT 0
77664: LESS
77665: IFFALSE 77682
// time := time * - 1 ;
77667: LD_ADDR_VAR 0 8
77671: PUSH
77672: LD_VAR 0 8
77676: PUSH
77677: LD_INT 1
77679: NEG
77680: MUL
77681: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
77682: LD_VAR 0 8
77686: PUSH
77687: LD_INT 35
77689: PPUSH
77690: LD_INT 875
77692: PPUSH
77693: CALL_OW 12
77697: PLUS
77698: PPUSH
77699: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
77703: LD_INT 1
77705: PPUSH
77706: LD_INT 5
77708: PPUSH
77709: CALL_OW 12
77713: PPUSH
77714: LD_VAR 0 1
77718: PPUSH
77719: LD_INT 1
77721: PPUSH
77722: CALL_OW 55
// end ;
77726: GO 77539
// end ;
77728: LD_VAR 0 5
77732: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
77733: LD_INT 0
77735: PPUSH
77736: PPUSH
77737: PPUSH
77738: PPUSH
77739: PPUSH
77740: PPUSH
77741: PPUSH
77742: PPUSH
// if not turrets or not factories then
77743: LD_VAR 0 1
77747: NOT
77748: PUSH
77749: LD_VAR 0 2
77753: NOT
77754: OR
77755: IFFALSE 77759
// exit ;
77757: GO 78066
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
77759: LD_ADDR_VAR 0 10
77763: PUSH
77764: LD_INT 5
77766: PUSH
77767: LD_INT 6
77769: PUSH
77770: EMPTY
77771: LIST
77772: LIST
77773: PUSH
77774: LD_INT 2
77776: PUSH
77777: LD_INT 4
77779: PUSH
77780: EMPTY
77781: LIST
77782: LIST
77783: PUSH
77784: LD_INT 3
77786: PUSH
77787: LD_INT 5
77789: PUSH
77790: EMPTY
77791: LIST
77792: LIST
77793: PUSH
77794: EMPTY
77795: LIST
77796: LIST
77797: LIST
77798: PUSH
77799: LD_INT 24
77801: PUSH
77802: LD_INT 25
77804: PUSH
77805: EMPTY
77806: LIST
77807: LIST
77808: PUSH
77809: LD_INT 23
77811: PUSH
77812: LD_INT 27
77814: PUSH
77815: EMPTY
77816: LIST
77817: LIST
77818: PUSH
77819: EMPTY
77820: LIST
77821: LIST
77822: PUSH
77823: LD_INT 42
77825: PUSH
77826: LD_INT 43
77828: PUSH
77829: EMPTY
77830: LIST
77831: LIST
77832: PUSH
77833: LD_INT 44
77835: PUSH
77836: LD_INT 46
77838: PUSH
77839: EMPTY
77840: LIST
77841: LIST
77842: PUSH
77843: LD_INT 45
77845: PUSH
77846: LD_INT 47
77848: PUSH
77849: EMPTY
77850: LIST
77851: LIST
77852: PUSH
77853: EMPTY
77854: LIST
77855: LIST
77856: LIST
77857: PUSH
77858: EMPTY
77859: LIST
77860: LIST
77861: LIST
77862: ST_TO_ADDR
// result := [ ] ;
77863: LD_ADDR_VAR 0 3
77867: PUSH
77868: EMPTY
77869: ST_TO_ADDR
// for i in turrets do
77870: LD_ADDR_VAR 0 4
77874: PUSH
77875: LD_VAR 0 1
77879: PUSH
77880: FOR_IN
77881: IFFALSE 78064
// begin nat := GetNation ( i ) ;
77883: LD_ADDR_VAR 0 7
77887: PUSH
77888: LD_VAR 0 4
77892: PPUSH
77893: CALL_OW 248
77897: ST_TO_ADDR
// weapon := 0 ;
77898: LD_ADDR_VAR 0 8
77902: PUSH
77903: LD_INT 0
77905: ST_TO_ADDR
// if not nat then
77906: LD_VAR 0 7
77910: NOT
77911: IFFALSE 77915
// continue ;
77913: GO 77880
// for j in list [ nat ] do
77915: LD_ADDR_VAR 0 5
77919: PUSH
77920: LD_VAR 0 10
77924: PUSH
77925: LD_VAR 0 7
77929: ARRAY
77930: PUSH
77931: FOR_IN
77932: IFFALSE 77973
// if GetBWeapon ( i ) = j [ 1 ] then
77934: LD_VAR 0 4
77938: PPUSH
77939: CALL_OW 269
77943: PUSH
77944: LD_VAR 0 5
77948: PUSH
77949: LD_INT 1
77951: ARRAY
77952: EQUAL
77953: IFFALSE 77971
// begin weapon := j [ 2 ] ;
77955: LD_ADDR_VAR 0 8
77959: PUSH
77960: LD_VAR 0 5
77964: PUSH
77965: LD_INT 2
77967: ARRAY
77968: ST_TO_ADDR
// break ;
77969: GO 77973
// end ;
77971: GO 77931
77973: POP
77974: POP
// if not weapon then
77975: LD_VAR 0 8
77979: NOT
77980: IFFALSE 77984
// continue ;
77982: GO 77880
// for k in factories do
77984: LD_ADDR_VAR 0 6
77988: PUSH
77989: LD_VAR 0 2
77993: PUSH
77994: FOR_IN
77995: IFFALSE 78060
// begin weapons := AvailableWeaponList ( k ) ;
77997: LD_ADDR_VAR 0 9
78001: PUSH
78002: LD_VAR 0 6
78006: PPUSH
78007: CALL_OW 478
78011: ST_TO_ADDR
// if not weapons then
78012: LD_VAR 0 9
78016: NOT
78017: IFFALSE 78021
// continue ;
78019: GO 77994
// if weapon in weapons then
78021: LD_VAR 0 8
78025: PUSH
78026: LD_VAR 0 9
78030: IN
78031: IFFALSE 78058
// begin result := [ i , weapon ] ;
78033: LD_ADDR_VAR 0 3
78037: PUSH
78038: LD_VAR 0 4
78042: PUSH
78043: LD_VAR 0 8
78047: PUSH
78048: EMPTY
78049: LIST
78050: LIST
78051: ST_TO_ADDR
// exit ;
78052: POP
78053: POP
78054: POP
78055: POP
78056: GO 78066
// end ; end ;
78058: GO 77994
78060: POP
78061: POP
// end ;
78062: GO 77880
78064: POP
78065: POP
// end ;
78066: LD_VAR 0 3
78070: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
78071: LD_INT 0
78073: PPUSH
// if not side or side > 8 then
78074: LD_VAR 0 3
78078: NOT
78079: PUSH
78080: LD_VAR 0 3
78084: PUSH
78085: LD_INT 8
78087: GREATER
78088: OR
78089: IFFALSE 78093
// exit ;
78091: GO 78152
// if not range then
78093: LD_VAR 0 4
78097: NOT
78098: IFFALSE 78109
// range := - 12 ;
78100: LD_ADDR_VAR 0 4
78104: PUSH
78105: LD_INT 12
78107: NEG
78108: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
78109: LD_VAR 0 1
78113: PPUSH
78114: LD_VAR 0 2
78118: PPUSH
78119: LD_VAR 0 3
78123: PPUSH
78124: LD_VAR 0 4
78128: PPUSH
78129: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
78133: LD_VAR 0 1
78137: PPUSH
78138: LD_VAR 0 2
78142: PPUSH
78143: LD_VAR 0 3
78147: PPUSH
78148: CALL_OW 331
// end ;
78152: LD_VAR 0 5
78156: RET
// export function Video ( mode ) ; begin
78157: LD_INT 0
78159: PPUSH
// ingame_video = mode ;
78160: LD_ADDR_OWVAR 52
78164: PUSH
78165: LD_VAR 0 1
78169: ST_TO_ADDR
// interface_hidden = mode ;
78170: LD_ADDR_OWVAR 54
78174: PUSH
78175: LD_VAR 0 1
78179: ST_TO_ADDR
// end ;
78180: LD_VAR 0 2
78184: RET
// export function Join ( array , element ) ; begin
78185: LD_INT 0
78187: PPUSH
// result := Replace ( array , array + 1 , element ) ;
78188: LD_ADDR_VAR 0 3
78192: PUSH
78193: LD_VAR 0 1
78197: PPUSH
78198: LD_VAR 0 1
78202: PUSH
78203: LD_INT 1
78205: PLUS
78206: PPUSH
78207: LD_VAR 0 2
78211: PPUSH
78212: CALL_OW 1
78216: ST_TO_ADDR
// end ;
78217: LD_VAR 0 3
78221: RET
// export function JoinUnion ( array , element ) ; begin
78222: LD_INT 0
78224: PPUSH
// result := array union element ;
78225: LD_ADDR_VAR 0 3
78229: PUSH
78230: LD_VAR 0 1
78234: PUSH
78235: LD_VAR 0 2
78239: UNION
78240: ST_TO_ADDR
// end ;
78241: LD_VAR 0 3
78245: RET
// export function GetBehemoths ( side ) ; begin
78246: LD_INT 0
78248: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
78249: LD_ADDR_VAR 0 2
78253: PUSH
78254: LD_INT 22
78256: PUSH
78257: LD_VAR 0 1
78261: PUSH
78262: EMPTY
78263: LIST
78264: LIST
78265: PUSH
78266: LD_INT 31
78268: PUSH
78269: LD_INT 25
78271: PUSH
78272: EMPTY
78273: LIST
78274: LIST
78275: PUSH
78276: EMPTY
78277: LIST
78278: LIST
78279: PPUSH
78280: CALL_OW 69
78284: ST_TO_ADDR
// end ;
78285: LD_VAR 0 2
78289: RET
// export function Shuffle ( array ) ; var i , index ; begin
78290: LD_INT 0
78292: PPUSH
78293: PPUSH
78294: PPUSH
// result := [ ] ;
78295: LD_ADDR_VAR 0 2
78299: PUSH
78300: EMPTY
78301: ST_TO_ADDR
// if not array then
78302: LD_VAR 0 1
78306: NOT
78307: IFFALSE 78311
// exit ;
78309: GO 78410
// Randomize ;
78311: CALL_OW 10
// for i = array downto 1 do
78315: LD_ADDR_VAR 0 3
78319: PUSH
78320: DOUBLE
78321: LD_VAR 0 1
78325: INC
78326: ST_TO_ADDR
78327: LD_INT 1
78329: PUSH
78330: FOR_DOWNTO
78331: IFFALSE 78408
// begin index := rand ( 1 , array ) ;
78333: LD_ADDR_VAR 0 4
78337: PUSH
78338: LD_INT 1
78340: PPUSH
78341: LD_VAR 0 1
78345: PPUSH
78346: CALL_OW 12
78350: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
78351: LD_ADDR_VAR 0 2
78355: PUSH
78356: LD_VAR 0 2
78360: PPUSH
78361: LD_VAR 0 2
78365: PUSH
78366: LD_INT 1
78368: PLUS
78369: PPUSH
78370: LD_VAR 0 1
78374: PUSH
78375: LD_VAR 0 4
78379: ARRAY
78380: PPUSH
78381: CALL_OW 2
78385: ST_TO_ADDR
// array := Delete ( array , index ) ;
78386: LD_ADDR_VAR 0 1
78390: PUSH
78391: LD_VAR 0 1
78395: PPUSH
78396: LD_VAR 0 4
78400: PPUSH
78401: CALL_OW 3
78405: ST_TO_ADDR
// end ;
78406: GO 78330
78408: POP
78409: POP
// end ;
78410: LD_VAR 0 2
78414: RET
// export function GetBaseMaterials ( base ) ; begin
78415: LD_INT 0
78417: PPUSH
// result := [ 0 , 0 , 0 ] ;
78418: LD_ADDR_VAR 0 2
78422: PUSH
78423: LD_INT 0
78425: PUSH
78426: LD_INT 0
78428: PUSH
78429: LD_INT 0
78431: PUSH
78432: EMPTY
78433: LIST
78434: LIST
78435: LIST
78436: ST_TO_ADDR
// if not base then
78437: LD_VAR 0 1
78441: NOT
78442: IFFALSE 78446
// exit ;
78444: GO 78495
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
78446: LD_ADDR_VAR 0 2
78450: PUSH
78451: LD_VAR 0 1
78455: PPUSH
78456: LD_INT 1
78458: PPUSH
78459: CALL_OW 275
78463: PUSH
78464: LD_VAR 0 1
78468: PPUSH
78469: LD_INT 2
78471: PPUSH
78472: CALL_OW 275
78476: PUSH
78477: LD_VAR 0 1
78481: PPUSH
78482: LD_INT 3
78484: PPUSH
78485: CALL_OW 275
78489: PUSH
78490: EMPTY
78491: LIST
78492: LIST
78493: LIST
78494: ST_TO_ADDR
// end ;
78495: LD_VAR 0 2
78499: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
78500: LD_INT 0
78502: PPUSH
78503: PPUSH
// result := array ;
78504: LD_ADDR_VAR 0 3
78508: PUSH
78509: LD_VAR 0 1
78513: ST_TO_ADDR
// if size >= result then
78514: LD_VAR 0 2
78518: PUSH
78519: LD_VAR 0 3
78523: GREATEREQUAL
78524: IFFALSE 78528
// exit ;
78526: GO 78578
// if size then
78528: LD_VAR 0 2
78532: IFFALSE 78578
// for i := array downto size do
78534: LD_ADDR_VAR 0 4
78538: PUSH
78539: DOUBLE
78540: LD_VAR 0 1
78544: INC
78545: ST_TO_ADDR
78546: LD_VAR 0 2
78550: PUSH
78551: FOR_DOWNTO
78552: IFFALSE 78576
// result := Delete ( result , result ) ;
78554: LD_ADDR_VAR 0 3
78558: PUSH
78559: LD_VAR 0 3
78563: PPUSH
78564: LD_VAR 0 3
78568: PPUSH
78569: CALL_OW 3
78573: ST_TO_ADDR
78574: GO 78551
78576: POP
78577: POP
// end ;
78578: LD_VAR 0 3
78582: RET
// export function ComExit ( unit ) ; var tmp ; begin
78583: LD_INT 0
78585: PPUSH
78586: PPUSH
// if not IsInUnit ( unit ) then
78587: LD_VAR 0 1
78591: PPUSH
78592: CALL_OW 310
78596: NOT
78597: IFFALSE 78601
// exit ;
78599: GO 78661
// tmp := IsInUnit ( unit ) ;
78601: LD_ADDR_VAR 0 3
78605: PUSH
78606: LD_VAR 0 1
78610: PPUSH
78611: CALL_OW 310
78615: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
78616: LD_VAR 0 3
78620: PPUSH
78621: CALL_OW 247
78625: PUSH
78626: LD_INT 2
78628: EQUAL
78629: IFFALSE 78642
// ComExitVehicle ( unit ) else
78631: LD_VAR 0 1
78635: PPUSH
78636: CALL_OW 121
78640: GO 78651
// ComExitBuilding ( unit ) ;
78642: LD_VAR 0 1
78646: PPUSH
78647: CALL_OW 122
// result := tmp ;
78651: LD_ADDR_VAR 0 2
78655: PUSH
78656: LD_VAR 0 3
78660: ST_TO_ADDR
// end ;
78661: LD_VAR 0 2
78665: RET
// export function ComExitAll ( units ) ; var i ; begin
78666: LD_INT 0
78668: PPUSH
78669: PPUSH
// if not units then
78670: LD_VAR 0 1
78674: NOT
78675: IFFALSE 78679
// exit ;
78677: GO 78705
// for i in units do
78679: LD_ADDR_VAR 0 3
78683: PUSH
78684: LD_VAR 0 1
78688: PUSH
78689: FOR_IN
78690: IFFALSE 78703
// ComExit ( i ) ;
78692: LD_VAR 0 3
78696: PPUSH
78697: CALL 78583 0 1
78701: GO 78689
78703: POP
78704: POP
// end ;
78705: LD_VAR 0 2
78709: RET
// export function ResetHc ; begin
78710: LD_INT 0
78712: PPUSH
// InitHc ;
78713: CALL_OW 19
// hc_importance := 0 ;
78717: LD_ADDR_OWVAR 32
78721: PUSH
78722: LD_INT 0
78724: ST_TO_ADDR
// end ;
78725: LD_VAR 0 1
78729: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
78730: LD_INT 0
78732: PPUSH
78733: PPUSH
78734: PPUSH
// _x := ( x1 + x2 ) div 2 ;
78735: LD_ADDR_VAR 0 6
78739: PUSH
78740: LD_VAR 0 1
78744: PUSH
78745: LD_VAR 0 3
78749: PLUS
78750: PUSH
78751: LD_INT 2
78753: DIV
78754: ST_TO_ADDR
// if _x < 0 then
78755: LD_VAR 0 6
78759: PUSH
78760: LD_INT 0
78762: LESS
78763: IFFALSE 78780
// _x := _x * - 1 ;
78765: LD_ADDR_VAR 0 6
78769: PUSH
78770: LD_VAR 0 6
78774: PUSH
78775: LD_INT 1
78777: NEG
78778: MUL
78779: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
78780: LD_ADDR_VAR 0 7
78784: PUSH
78785: LD_VAR 0 2
78789: PUSH
78790: LD_VAR 0 4
78794: PLUS
78795: PUSH
78796: LD_INT 2
78798: DIV
78799: ST_TO_ADDR
// if _y < 0 then
78800: LD_VAR 0 7
78804: PUSH
78805: LD_INT 0
78807: LESS
78808: IFFALSE 78825
// _y := _y * - 1 ;
78810: LD_ADDR_VAR 0 7
78814: PUSH
78815: LD_VAR 0 7
78819: PUSH
78820: LD_INT 1
78822: NEG
78823: MUL
78824: ST_TO_ADDR
// result := [ _x , _y ] ;
78825: LD_ADDR_VAR 0 5
78829: PUSH
78830: LD_VAR 0 6
78834: PUSH
78835: LD_VAR 0 7
78839: PUSH
78840: EMPTY
78841: LIST
78842: LIST
78843: ST_TO_ADDR
// end ;
78844: LD_VAR 0 5
78848: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
78849: LD_INT 0
78851: PPUSH
78852: PPUSH
78853: PPUSH
78854: PPUSH
// task := GetTaskList ( unit ) ;
78855: LD_ADDR_VAR 0 7
78859: PUSH
78860: LD_VAR 0 1
78864: PPUSH
78865: CALL_OW 437
78869: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
78870: LD_VAR 0 7
78874: NOT
78875: PUSH
78876: LD_VAR 0 1
78880: PPUSH
78881: LD_VAR 0 2
78885: PPUSH
78886: CALL_OW 308
78890: NOT
78891: AND
78892: IFFALSE 78896
// exit ;
78894: GO 79014
// if IsInArea ( unit , area ) then
78896: LD_VAR 0 1
78900: PPUSH
78901: LD_VAR 0 2
78905: PPUSH
78906: CALL_OW 308
78910: IFFALSE 78928
// begin ComMoveToArea ( unit , goAway ) ;
78912: LD_VAR 0 1
78916: PPUSH
78917: LD_VAR 0 3
78921: PPUSH
78922: CALL_OW 113
// exit ;
78926: GO 79014
// end ; if task [ 1 ] [ 1 ] <> M then
78928: LD_VAR 0 7
78932: PUSH
78933: LD_INT 1
78935: ARRAY
78936: PUSH
78937: LD_INT 1
78939: ARRAY
78940: PUSH
78941: LD_STRING M
78943: NONEQUAL
78944: IFFALSE 78948
// exit ;
78946: GO 79014
// x := task [ 1 ] [ 2 ] ;
78948: LD_ADDR_VAR 0 5
78952: PUSH
78953: LD_VAR 0 7
78957: PUSH
78958: LD_INT 1
78960: ARRAY
78961: PUSH
78962: LD_INT 2
78964: ARRAY
78965: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
78966: LD_ADDR_VAR 0 6
78970: PUSH
78971: LD_VAR 0 7
78975: PUSH
78976: LD_INT 1
78978: ARRAY
78979: PUSH
78980: LD_INT 3
78982: ARRAY
78983: ST_TO_ADDR
// if InArea ( x , y , area ) then
78984: LD_VAR 0 5
78988: PPUSH
78989: LD_VAR 0 6
78993: PPUSH
78994: LD_VAR 0 2
78998: PPUSH
78999: CALL_OW 309
79003: IFFALSE 79014
// ComStop ( unit ) ;
79005: LD_VAR 0 1
79009: PPUSH
79010: CALL_OW 141
// end ;
79014: LD_VAR 0 4
79018: RET
// export function Abs ( value ) ; begin
79019: LD_INT 0
79021: PPUSH
// result := value ;
79022: LD_ADDR_VAR 0 2
79026: PUSH
79027: LD_VAR 0 1
79031: ST_TO_ADDR
// if value < 0 then
79032: LD_VAR 0 1
79036: PUSH
79037: LD_INT 0
79039: LESS
79040: IFFALSE 79057
// result := value * - 1 ;
79042: LD_ADDR_VAR 0 2
79046: PUSH
79047: LD_VAR 0 1
79051: PUSH
79052: LD_INT 1
79054: NEG
79055: MUL
79056: ST_TO_ADDR
// end ;
79057: LD_VAR 0 2
79061: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
79062: LD_INT 0
79064: PPUSH
79065: PPUSH
79066: PPUSH
79067: PPUSH
79068: PPUSH
79069: PPUSH
79070: PPUSH
79071: PPUSH
// if not unit or not building then
79072: LD_VAR 0 1
79076: NOT
79077: PUSH
79078: LD_VAR 0 2
79082: NOT
79083: OR
79084: IFFALSE 79088
// exit ;
79086: GO 79314
// x := GetX ( building ) ;
79088: LD_ADDR_VAR 0 4
79092: PUSH
79093: LD_VAR 0 2
79097: PPUSH
79098: CALL_OW 250
79102: ST_TO_ADDR
// y := GetY ( building ) ;
79103: LD_ADDR_VAR 0 6
79107: PUSH
79108: LD_VAR 0 2
79112: PPUSH
79113: CALL_OW 251
79117: ST_TO_ADDR
// d := GetDir ( building ) ;
79118: LD_ADDR_VAR 0 8
79122: PUSH
79123: LD_VAR 0 2
79127: PPUSH
79128: CALL_OW 254
79132: ST_TO_ADDR
// r := 4 ;
79133: LD_ADDR_VAR 0 9
79137: PUSH
79138: LD_INT 4
79140: ST_TO_ADDR
// for i := 1 to 5 do
79141: LD_ADDR_VAR 0 10
79145: PUSH
79146: DOUBLE
79147: LD_INT 1
79149: DEC
79150: ST_TO_ADDR
79151: LD_INT 5
79153: PUSH
79154: FOR_TO
79155: IFFALSE 79312
// begin _x := ShiftX ( x , d , r + i ) ;
79157: LD_ADDR_VAR 0 5
79161: PUSH
79162: LD_VAR 0 4
79166: PPUSH
79167: LD_VAR 0 8
79171: PPUSH
79172: LD_VAR 0 9
79176: PUSH
79177: LD_VAR 0 10
79181: PLUS
79182: PPUSH
79183: CALL_OW 272
79187: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
79188: LD_ADDR_VAR 0 7
79192: PUSH
79193: LD_VAR 0 6
79197: PPUSH
79198: LD_VAR 0 8
79202: PPUSH
79203: LD_VAR 0 9
79207: PUSH
79208: LD_VAR 0 10
79212: PLUS
79213: PPUSH
79214: CALL_OW 273
79218: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
79219: LD_VAR 0 5
79223: PPUSH
79224: LD_VAR 0 7
79228: PPUSH
79229: CALL_OW 488
79233: PUSH
79234: LD_VAR 0 5
79238: PPUSH
79239: LD_VAR 0 7
79243: PPUSH
79244: CALL_OW 428
79248: PPUSH
79249: CALL_OW 247
79253: PUSH
79254: LD_INT 3
79256: PUSH
79257: LD_INT 2
79259: PUSH
79260: EMPTY
79261: LIST
79262: LIST
79263: IN
79264: NOT
79265: AND
79266: IFFALSE 79310
// begin ComMoveXY ( unit , _x , _y ) ;
79268: LD_VAR 0 1
79272: PPUSH
79273: LD_VAR 0 5
79277: PPUSH
79278: LD_VAR 0 7
79282: PPUSH
79283: CALL_OW 111
// result := [ _x , _y ] ;
79287: LD_ADDR_VAR 0 3
79291: PUSH
79292: LD_VAR 0 5
79296: PUSH
79297: LD_VAR 0 7
79301: PUSH
79302: EMPTY
79303: LIST
79304: LIST
79305: ST_TO_ADDR
// exit ;
79306: POP
79307: POP
79308: GO 79314
// end ; end ;
79310: GO 79154
79312: POP
79313: POP
// end ;
79314: LD_VAR 0 3
79318: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
79319: LD_INT 0
79321: PPUSH
79322: PPUSH
79323: PPUSH
// result := 0 ;
79324: LD_ADDR_VAR 0 3
79328: PUSH
79329: LD_INT 0
79331: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
79332: LD_VAR 0 1
79336: PUSH
79337: LD_INT 0
79339: LESS
79340: PUSH
79341: LD_VAR 0 1
79345: PUSH
79346: LD_INT 8
79348: GREATER
79349: OR
79350: PUSH
79351: LD_VAR 0 2
79355: PUSH
79356: LD_INT 0
79358: LESS
79359: OR
79360: PUSH
79361: LD_VAR 0 2
79365: PUSH
79366: LD_INT 8
79368: GREATER
79369: OR
79370: IFFALSE 79374
// exit ;
79372: GO 79449
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
79374: LD_ADDR_VAR 0 4
79378: PUSH
79379: LD_INT 22
79381: PUSH
79382: LD_VAR 0 2
79386: PUSH
79387: EMPTY
79388: LIST
79389: LIST
79390: PPUSH
79391: CALL_OW 69
79395: PUSH
79396: FOR_IN
79397: IFFALSE 79447
// begin un := UnitShoot ( i ) ;
79399: LD_ADDR_VAR 0 5
79403: PUSH
79404: LD_VAR 0 4
79408: PPUSH
79409: CALL_OW 504
79413: ST_TO_ADDR
// if GetSide ( un ) = side1 then
79414: LD_VAR 0 5
79418: PPUSH
79419: CALL_OW 255
79423: PUSH
79424: LD_VAR 0 1
79428: EQUAL
79429: IFFALSE 79445
// begin result := un ;
79431: LD_ADDR_VAR 0 3
79435: PUSH
79436: LD_VAR 0 5
79440: ST_TO_ADDR
// exit ;
79441: POP
79442: POP
79443: GO 79449
// end ; end ;
79445: GO 79396
79447: POP
79448: POP
// end ;
79449: LD_VAR 0 3
79453: RET
// export function GetCargoBay ( units ) ; begin
79454: LD_INT 0
79456: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
79457: LD_ADDR_VAR 0 2
79461: PUSH
79462: LD_VAR 0 1
79466: PPUSH
79467: LD_INT 2
79469: PUSH
79470: LD_INT 34
79472: PUSH
79473: LD_INT 12
79475: PUSH
79476: EMPTY
79477: LIST
79478: LIST
79479: PUSH
79480: LD_INT 34
79482: PUSH
79483: LD_INT 51
79485: PUSH
79486: EMPTY
79487: LIST
79488: LIST
79489: PUSH
79490: LD_INT 34
79492: PUSH
79493: LD_INT 32
79495: PUSH
79496: EMPTY
79497: LIST
79498: LIST
79499: PUSH
79500: LD_INT 34
79502: PUSH
79503: LD_INT 89
79505: PUSH
79506: EMPTY
79507: LIST
79508: LIST
79509: PUSH
79510: EMPTY
79511: LIST
79512: LIST
79513: LIST
79514: LIST
79515: LIST
79516: PPUSH
79517: CALL_OW 72
79521: ST_TO_ADDR
// end ;
79522: LD_VAR 0 2
79526: RET
// export function Negate ( value ) ; begin
79527: LD_INT 0
79529: PPUSH
// result := not value ;
79530: LD_ADDR_VAR 0 2
79534: PUSH
79535: LD_VAR 0 1
79539: NOT
79540: ST_TO_ADDR
// end ;
79541: LD_VAR 0 2
79545: RET
// export function Inc ( value ) ; begin
79546: LD_INT 0
79548: PPUSH
// result := value + 1 ;
79549: LD_ADDR_VAR 0 2
79553: PUSH
79554: LD_VAR 0 1
79558: PUSH
79559: LD_INT 1
79561: PLUS
79562: ST_TO_ADDR
// end ;
79563: LD_VAR 0 2
79567: RET
// export function Dec ( value ) ; begin
79568: LD_INT 0
79570: PPUSH
// result := value - 1 ;
79571: LD_ADDR_VAR 0 2
79575: PUSH
79576: LD_VAR 0 1
79580: PUSH
79581: LD_INT 1
79583: MINUS
79584: ST_TO_ADDR
// end ;
79585: LD_VAR 0 2
79589: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
79590: LD_INT 0
79592: PPUSH
79593: PPUSH
79594: PPUSH
79595: PPUSH
79596: PPUSH
79597: PPUSH
79598: PPUSH
79599: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
79600: LD_VAR 0 1
79604: PPUSH
79605: LD_VAR 0 2
79609: PPUSH
79610: CALL_OW 488
79614: NOT
79615: PUSH
79616: LD_VAR 0 3
79620: PPUSH
79621: LD_VAR 0 4
79625: PPUSH
79626: CALL_OW 488
79630: NOT
79631: OR
79632: IFFALSE 79645
// begin result := - 1 ;
79634: LD_ADDR_VAR 0 5
79638: PUSH
79639: LD_INT 1
79641: NEG
79642: ST_TO_ADDR
// exit ;
79643: GO 79880
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
79645: LD_ADDR_VAR 0 12
79649: PUSH
79650: LD_VAR 0 1
79654: PPUSH
79655: LD_VAR 0 2
79659: PPUSH
79660: LD_VAR 0 3
79664: PPUSH
79665: LD_VAR 0 4
79669: PPUSH
79670: CALL 78730 0 4
79674: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
79675: LD_ADDR_VAR 0 11
79679: PUSH
79680: LD_VAR 0 1
79684: PPUSH
79685: LD_VAR 0 2
79689: PPUSH
79690: LD_VAR 0 12
79694: PUSH
79695: LD_INT 1
79697: ARRAY
79698: PPUSH
79699: LD_VAR 0 12
79703: PUSH
79704: LD_INT 2
79706: ARRAY
79707: PPUSH
79708: CALL_OW 298
79712: ST_TO_ADDR
// distance := 9999 ;
79713: LD_ADDR_VAR 0 10
79717: PUSH
79718: LD_INT 9999
79720: ST_TO_ADDR
// for i := 0 to 5 do
79721: LD_ADDR_VAR 0 6
79725: PUSH
79726: DOUBLE
79727: LD_INT 0
79729: DEC
79730: ST_TO_ADDR
79731: LD_INT 5
79733: PUSH
79734: FOR_TO
79735: IFFALSE 79878
// begin _x := ShiftX ( x1 , i , centerDist ) ;
79737: LD_ADDR_VAR 0 7
79741: PUSH
79742: LD_VAR 0 1
79746: PPUSH
79747: LD_VAR 0 6
79751: PPUSH
79752: LD_VAR 0 11
79756: PPUSH
79757: CALL_OW 272
79761: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
79762: LD_ADDR_VAR 0 8
79766: PUSH
79767: LD_VAR 0 2
79771: PPUSH
79772: LD_VAR 0 6
79776: PPUSH
79777: LD_VAR 0 11
79781: PPUSH
79782: CALL_OW 273
79786: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
79787: LD_VAR 0 7
79791: PPUSH
79792: LD_VAR 0 8
79796: PPUSH
79797: CALL_OW 488
79801: NOT
79802: IFFALSE 79806
// continue ;
79804: GO 79734
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
79806: LD_ADDR_VAR 0 9
79810: PUSH
79811: LD_VAR 0 12
79815: PUSH
79816: LD_INT 1
79818: ARRAY
79819: PPUSH
79820: LD_VAR 0 12
79824: PUSH
79825: LD_INT 2
79827: ARRAY
79828: PPUSH
79829: LD_VAR 0 7
79833: PPUSH
79834: LD_VAR 0 8
79838: PPUSH
79839: CALL_OW 298
79843: ST_TO_ADDR
// if tmp < distance then
79844: LD_VAR 0 9
79848: PUSH
79849: LD_VAR 0 10
79853: LESS
79854: IFFALSE 79876
// begin result := i ;
79856: LD_ADDR_VAR 0 5
79860: PUSH
79861: LD_VAR 0 6
79865: ST_TO_ADDR
// distance := tmp ;
79866: LD_ADDR_VAR 0 10
79870: PUSH
79871: LD_VAR 0 9
79875: ST_TO_ADDR
// end ; end ;
79876: GO 79734
79878: POP
79879: POP
// end ;
79880: LD_VAR 0 5
79884: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79885: LD_INT 0
79887: PPUSH
79888: PPUSH
// if not driver or not IsInUnit ( driver ) then
79889: LD_VAR 0 1
79893: NOT
79894: PUSH
79895: LD_VAR 0 1
79899: PPUSH
79900: CALL_OW 310
79904: NOT
79905: OR
79906: IFFALSE 79910
// exit ;
79908: GO 80000
// vehicle := IsInUnit ( driver ) ;
79910: LD_ADDR_VAR 0 3
79914: PUSH
79915: LD_VAR 0 1
79919: PPUSH
79920: CALL_OW 310
79924: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79925: LD_VAR 0 1
79929: PPUSH
79930: LD_STRING \
79932: PUSH
79933: LD_INT 0
79935: PUSH
79936: LD_INT 0
79938: PUSH
79939: LD_INT 0
79941: PUSH
79942: LD_INT 0
79944: PUSH
79945: LD_INT 0
79947: PUSH
79948: LD_INT 0
79950: PUSH
79951: EMPTY
79952: LIST
79953: LIST
79954: LIST
79955: LIST
79956: LIST
79957: LIST
79958: LIST
79959: PUSH
79960: LD_STRING E
79962: PUSH
79963: LD_INT 0
79965: PUSH
79966: LD_INT 0
79968: PUSH
79969: LD_VAR 0 3
79973: PUSH
79974: LD_INT 0
79976: PUSH
79977: LD_INT 0
79979: PUSH
79980: LD_INT 0
79982: PUSH
79983: EMPTY
79984: LIST
79985: LIST
79986: LIST
79987: LIST
79988: LIST
79989: LIST
79990: LIST
79991: PUSH
79992: EMPTY
79993: LIST
79994: LIST
79995: PPUSH
79996: CALL_OW 446
// end ;
80000: LD_VAR 0 2
80004: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80005: LD_INT 0
80007: PPUSH
80008: PPUSH
// if not driver or not IsInUnit ( driver ) then
80009: LD_VAR 0 1
80013: NOT
80014: PUSH
80015: LD_VAR 0 1
80019: PPUSH
80020: CALL_OW 310
80024: NOT
80025: OR
80026: IFFALSE 80030
// exit ;
80028: GO 80120
// vehicle := IsInUnit ( driver ) ;
80030: LD_ADDR_VAR 0 3
80034: PUSH
80035: LD_VAR 0 1
80039: PPUSH
80040: CALL_OW 310
80044: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80045: LD_VAR 0 1
80049: PPUSH
80050: LD_STRING \
80052: PUSH
80053: LD_INT 0
80055: PUSH
80056: LD_INT 0
80058: PUSH
80059: LD_INT 0
80061: PUSH
80062: LD_INT 0
80064: PUSH
80065: LD_INT 0
80067: PUSH
80068: LD_INT 0
80070: PUSH
80071: EMPTY
80072: LIST
80073: LIST
80074: LIST
80075: LIST
80076: LIST
80077: LIST
80078: LIST
80079: PUSH
80080: LD_STRING E
80082: PUSH
80083: LD_INT 0
80085: PUSH
80086: LD_INT 0
80088: PUSH
80089: LD_VAR 0 3
80093: PUSH
80094: LD_INT 0
80096: PUSH
80097: LD_INT 0
80099: PUSH
80100: LD_INT 0
80102: PUSH
80103: EMPTY
80104: LIST
80105: LIST
80106: LIST
80107: LIST
80108: LIST
80109: LIST
80110: LIST
80111: PUSH
80112: EMPTY
80113: LIST
80114: LIST
80115: PPUSH
80116: CALL_OW 447
// end ;
80120: LD_VAR 0 2
80124: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
80125: LD_INT 0
80127: PPUSH
80128: PPUSH
80129: PPUSH
// tmp := [ ] ;
80130: LD_ADDR_VAR 0 5
80134: PUSH
80135: EMPTY
80136: ST_TO_ADDR
// for i in units do
80137: LD_ADDR_VAR 0 4
80141: PUSH
80142: LD_VAR 0 1
80146: PUSH
80147: FOR_IN
80148: IFFALSE 80186
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
80150: LD_ADDR_VAR 0 5
80154: PUSH
80155: LD_VAR 0 5
80159: PPUSH
80160: LD_VAR 0 5
80164: PUSH
80165: LD_INT 1
80167: PLUS
80168: PPUSH
80169: LD_VAR 0 4
80173: PPUSH
80174: CALL_OW 256
80178: PPUSH
80179: CALL_OW 2
80183: ST_TO_ADDR
80184: GO 80147
80186: POP
80187: POP
// if not tmp then
80188: LD_VAR 0 5
80192: NOT
80193: IFFALSE 80197
// exit ;
80195: GO 80245
// if asc then
80197: LD_VAR 0 2
80201: IFFALSE 80225
// result := SortListByListAsc ( units , tmp ) else
80203: LD_ADDR_VAR 0 3
80207: PUSH
80208: LD_VAR 0 1
80212: PPUSH
80213: LD_VAR 0 5
80217: PPUSH
80218: CALL_OW 76
80222: ST_TO_ADDR
80223: GO 80245
// result := SortListByListDesc ( units , tmp ) ;
80225: LD_ADDR_VAR 0 3
80229: PUSH
80230: LD_VAR 0 1
80234: PPUSH
80235: LD_VAR 0 5
80239: PPUSH
80240: CALL_OW 77
80244: ST_TO_ADDR
// end ;
80245: LD_VAR 0 3
80249: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
80250: LD_INT 0
80252: PPUSH
80253: PPUSH
// task := GetTaskList ( mech ) ;
80254: LD_ADDR_VAR 0 4
80258: PUSH
80259: LD_VAR 0 1
80263: PPUSH
80264: CALL_OW 437
80268: ST_TO_ADDR
// if not task then
80269: LD_VAR 0 4
80273: NOT
80274: IFFALSE 80278
// exit ;
80276: GO 80320
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
80278: LD_ADDR_VAR 0 3
80282: PUSH
80283: LD_VAR 0 4
80287: PUSH
80288: LD_INT 1
80290: ARRAY
80291: PUSH
80292: LD_INT 1
80294: ARRAY
80295: PUSH
80296: LD_STRING r
80298: EQUAL
80299: PUSH
80300: LD_VAR 0 4
80304: PUSH
80305: LD_INT 1
80307: ARRAY
80308: PUSH
80309: LD_INT 4
80311: ARRAY
80312: PUSH
80313: LD_VAR 0 2
80317: EQUAL
80318: AND
80319: ST_TO_ADDR
// end ;
80320: LD_VAR 0 3
80324: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
80325: LD_INT 0
80327: PPUSH
// SetDir ( unit , d ) ;
80328: LD_VAR 0 1
80332: PPUSH
80333: LD_VAR 0 4
80337: PPUSH
80338: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
80342: LD_VAR 0 1
80346: PPUSH
80347: LD_VAR 0 2
80351: PPUSH
80352: LD_VAR 0 3
80356: PPUSH
80357: LD_VAR 0 5
80361: PPUSH
80362: CALL_OW 48
// end ;
80366: LD_VAR 0 6
80370: RET
// export function ToNaturalNumber ( number ) ; begin
80371: LD_INT 0
80373: PPUSH
// result := number div 1 ;
80374: LD_ADDR_VAR 0 2
80378: PUSH
80379: LD_VAR 0 1
80383: PUSH
80384: LD_INT 1
80386: DIV
80387: ST_TO_ADDR
// if number < 0 then
80388: LD_VAR 0 1
80392: PUSH
80393: LD_INT 0
80395: LESS
80396: IFFALSE 80406
// result := 0 ;
80398: LD_ADDR_VAR 0 2
80402: PUSH
80403: LD_INT 0
80405: ST_TO_ADDR
// end ;
80406: LD_VAR 0 2
80410: RET
// export function SortByClass ( units , class ) ; var un ; begin
80411: LD_INT 0
80413: PPUSH
80414: PPUSH
// if not units or not class then
80415: LD_VAR 0 1
80419: NOT
80420: PUSH
80421: LD_VAR 0 2
80425: NOT
80426: OR
80427: IFFALSE 80431
// exit ;
80429: GO 80526
// result := [ ] ;
80431: LD_ADDR_VAR 0 3
80435: PUSH
80436: EMPTY
80437: ST_TO_ADDR
// for un in units do
80438: LD_ADDR_VAR 0 4
80442: PUSH
80443: LD_VAR 0 1
80447: PUSH
80448: FOR_IN
80449: IFFALSE 80524
// if GetClass ( un ) = class then
80451: LD_VAR 0 4
80455: PPUSH
80456: CALL_OW 257
80460: PUSH
80461: LD_VAR 0 2
80465: EQUAL
80466: IFFALSE 80493
// result := Insert ( result , 1 , un ) else
80468: LD_ADDR_VAR 0 3
80472: PUSH
80473: LD_VAR 0 3
80477: PPUSH
80478: LD_INT 1
80480: PPUSH
80481: LD_VAR 0 4
80485: PPUSH
80486: CALL_OW 2
80490: ST_TO_ADDR
80491: GO 80522
// result := Replace ( result , result + 1 , un ) ;
80493: LD_ADDR_VAR 0 3
80497: PUSH
80498: LD_VAR 0 3
80502: PPUSH
80503: LD_VAR 0 3
80507: PUSH
80508: LD_INT 1
80510: PLUS
80511: PPUSH
80512: LD_VAR 0 4
80516: PPUSH
80517: CALL_OW 1
80521: ST_TO_ADDR
80522: GO 80448
80524: POP
80525: POP
// end ;
80526: LD_VAR 0 3
80530: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
80531: LD_INT 0
80533: PPUSH
80534: PPUSH
80535: PPUSH
80536: PPUSH
80537: PPUSH
80538: PPUSH
80539: PPUSH
// result := [ ] ;
80540: LD_ADDR_VAR 0 4
80544: PUSH
80545: EMPTY
80546: ST_TO_ADDR
// if x - r < 0 then
80547: LD_VAR 0 1
80551: PUSH
80552: LD_VAR 0 3
80556: MINUS
80557: PUSH
80558: LD_INT 0
80560: LESS
80561: IFFALSE 80573
// min_x := 0 else
80563: LD_ADDR_VAR 0 8
80567: PUSH
80568: LD_INT 0
80570: ST_TO_ADDR
80571: GO 80589
// min_x := x - r ;
80573: LD_ADDR_VAR 0 8
80577: PUSH
80578: LD_VAR 0 1
80582: PUSH
80583: LD_VAR 0 3
80587: MINUS
80588: ST_TO_ADDR
// if y - r < 0 then
80589: LD_VAR 0 2
80593: PUSH
80594: LD_VAR 0 3
80598: MINUS
80599: PUSH
80600: LD_INT 0
80602: LESS
80603: IFFALSE 80615
// min_y := 0 else
80605: LD_ADDR_VAR 0 7
80609: PUSH
80610: LD_INT 0
80612: ST_TO_ADDR
80613: GO 80631
// min_y := y - r ;
80615: LD_ADDR_VAR 0 7
80619: PUSH
80620: LD_VAR 0 2
80624: PUSH
80625: LD_VAR 0 3
80629: MINUS
80630: ST_TO_ADDR
// max_x := x + r ;
80631: LD_ADDR_VAR 0 9
80635: PUSH
80636: LD_VAR 0 1
80640: PUSH
80641: LD_VAR 0 3
80645: PLUS
80646: ST_TO_ADDR
// max_y := y + r ;
80647: LD_ADDR_VAR 0 10
80651: PUSH
80652: LD_VAR 0 2
80656: PUSH
80657: LD_VAR 0 3
80661: PLUS
80662: ST_TO_ADDR
// for _x = min_x to max_x do
80663: LD_ADDR_VAR 0 5
80667: PUSH
80668: DOUBLE
80669: LD_VAR 0 8
80673: DEC
80674: ST_TO_ADDR
80675: LD_VAR 0 9
80679: PUSH
80680: FOR_TO
80681: IFFALSE 80782
// for _y = min_y to max_y do
80683: LD_ADDR_VAR 0 6
80687: PUSH
80688: DOUBLE
80689: LD_VAR 0 7
80693: DEC
80694: ST_TO_ADDR
80695: LD_VAR 0 10
80699: PUSH
80700: FOR_TO
80701: IFFALSE 80778
// begin if not ValidHex ( _x , _y ) then
80703: LD_VAR 0 5
80707: PPUSH
80708: LD_VAR 0 6
80712: PPUSH
80713: CALL_OW 488
80717: NOT
80718: IFFALSE 80722
// continue ;
80720: GO 80700
// if GetResourceTypeXY ( _x , _y ) then
80722: LD_VAR 0 5
80726: PPUSH
80727: LD_VAR 0 6
80731: PPUSH
80732: CALL_OW 283
80736: IFFALSE 80776
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
80738: LD_ADDR_VAR 0 4
80742: PUSH
80743: LD_VAR 0 4
80747: PPUSH
80748: LD_VAR 0 4
80752: PUSH
80753: LD_INT 1
80755: PLUS
80756: PPUSH
80757: LD_VAR 0 5
80761: PUSH
80762: LD_VAR 0 6
80766: PUSH
80767: EMPTY
80768: LIST
80769: LIST
80770: PPUSH
80771: CALL_OW 1
80775: ST_TO_ADDR
// end ;
80776: GO 80700
80778: POP
80779: POP
80780: GO 80680
80782: POP
80783: POP
// end ;
80784: LD_VAR 0 4
80788: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
80789: LD_INT 0
80791: PPUSH
80792: PPUSH
80793: PPUSH
80794: PPUSH
80795: PPUSH
80796: PPUSH
80797: PPUSH
80798: PPUSH
// if not units then
80799: LD_VAR 0 1
80803: NOT
80804: IFFALSE 80808
// exit ;
80806: GO 81332
// result := UnitFilter ( units , [ f_ok ] ) ;
80808: LD_ADDR_VAR 0 3
80812: PUSH
80813: LD_VAR 0 1
80817: PPUSH
80818: LD_INT 50
80820: PUSH
80821: EMPTY
80822: LIST
80823: PPUSH
80824: CALL_OW 72
80828: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
80829: LD_ADDR_VAR 0 8
80833: PUSH
80834: LD_VAR 0 1
80838: PUSH
80839: LD_INT 1
80841: ARRAY
80842: PPUSH
80843: CALL_OW 255
80847: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
80848: LD_ADDR_VAR 0 10
80852: PUSH
80853: LD_INT 29
80855: PUSH
80856: LD_INT 91
80858: PUSH
80859: LD_INT 49
80861: PUSH
80862: EMPTY
80863: LIST
80864: LIST
80865: LIST
80866: ST_TO_ADDR
// if not result then
80867: LD_VAR 0 3
80871: NOT
80872: IFFALSE 80876
// exit ;
80874: GO 81332
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
80876: LD_ADDR_VAR 0 5
80880: PUSH
80881: LD_INT 81
80883: PUSH
80884: LD_VAR 0 8
80888: PUSH
80889: EMPTY
80890: LIST
80891: LIST
80892: PPUSH
80893: CALL_OW 69
80897: ST_TO_ADDR
// for i in result do
80898: LD_ADDR_VAR 0 4
80902: PUSH
80903: LD_VAR 0 3
80907: PUSH
80908: FOR_IN
80909: IFFALSE 81330
// begin tag := GetTag ( i ) + 1 ;
80911: LD_ADDR_VAR 0 9
80915: PUSH
80916: LD_VAR 0 4
80920: PPUSH
80921: CALL_OW 110
80925: PUSH
80926: LD_INT 1
80928: PLUS
80929: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
80930: LD_ADDR_VAR 0 7
80934: PUSH
80935: LD_VAR 0 4
80939: PPUSH
80940: CALL_OW 250
80944: PPUSH
80945: LD_VAR 0 4
80949: PPUSH
80950: CALL_OW 251
80954: PPUSH
80955: LD_INT 6
80957: PPUSH
80958: CALL 80531 0 3
80962: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
80963: LD_VAR 0 4
80967: PPUSH
80968: CALL_OW 247
80972: PUSH
80973: LD_INT 2
80975: EQUAL
80976: PUSH
80977: LD_VAR 0 7
80981: AND
80982: PUSH
80983: LD_VAR 0 4
80987: PPUSH
80988: CALL_OW 264
80992: PUSH
80993: LD_VAR 0 10
80997: IN
80998: NOT
80999: AND
81000: IFFALSE 81039
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
81002: LD_VAR 0 4
81006: PPUSH
81007: LD_VAR 0 7
81011: PUSH
81012: LD_INT 1
81014: ARRAY
81015: PUSH
81016: LD_INT 1
81018: ARRAY
81019: PPUSH
81020: LD_VAR 0 7
81024: PUSH
81025: LD_INT 1
81027: ARRAY
81028: PUSH
81029: LD_INT 2
81031: ARRAY
81032: PPUSH
81033: CALL_OW 116
81037: GO 81328
// if path > tag then
81039: LD_VAR 0 2
81043: PUSH
81044: LD_VAR 0 9
81048: GREATER
81049: IFFALSE 81257
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
81051: LD_ADDR_VAR 0 6
81055: PUSH
81056: LD_VAR 0 5
81060: PPUSH
81061: LD_INT 91
81063: PUSH
81064: LD_VAR 0 4
81068: PUSH
81069: LD_INT 8
81071: PUSH
81072: EMPTY
81073: LIST
81074: LIST
81075: LIST
81076: PPUSH
81077: CALL_OW 72
81081: ST_TO_ADDR
// if nearEnemy then
81082: LD_VAR 0 6
81086: IFFALSE 81155
// begin if GetWeapon ( i ) = ru_time_lapser then
81088: LD_VAR 0 4
81092: PPUSH
81093: CALL_OW 264
81097: PUSH
81098: LD_INT 49
81100: EQUAL
81101: IFFALSE 81129
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
81103: LD_VAR 0 4
81107: PPUSH
81108: LD_VAR 0 6
81112: PPUSH
81113: LD_VAR 0 4
81117: PPUSH
81118: CALL_OW 74
81122: PPUSH
81123: CALL_OW 112
81127: GO 81153
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
81129: LD_VAR 0 4
81133: PPUSH
81134: LD_VAR 0 6
81138: PPUSH
81139: LD_VAR 0 4
81143: PPUSH
81144: CALL_OW 74
81148: PPUSH
81149: CALL 82257 0 2
// end else
81153: GO 81255
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
81155: LD_VAR 0 4
81159: PPUSH
81160: LD_VAR 0 2
81164: PUSH
81165: LD_VAR 0 9
81169: ARRAY
81170: PUSH
81171: LD_INT 1
81173: ARRAY
81174: PPUSH
81175: LD_VAR 0 2
81179: PUSH
81180: LD_VAR 0 9
81184: ARRAY
81185: PUSH
81186: LD_INT 2
81188: ARRAY
81189: PPUSH
81190: CALL_OW 297
81194: PUSH
81195: LD_INT 6
81197: GREATER
81198: IFFALSE 81241
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
81200: LD_VAR 0 4
81204: PPUSH
81205: LD_VAR 0 2
81209: PUSH
81210: LD_VAR 0 9
81214: ARRAY
81215: PUSH
81216: LD_INT 1
81218: ARRAY
81219: PPUSH
81220: LD_VAR 0 2
81224: PUSH
81225: LD_VAR 0 9
81229: ARRAY
81230: PUSH
81231: LD_INT 2
81233: ARRAY
81234: PPUSH
81235: CALL_OW 114
81239: GO 81255
// SetTag ( i , tag ) ;
81241: LD_VAR 0 4
81245: PPUSH
81246: LD_VAR 0 9
81250: PPUSH
81251: CALL_OW 109
// end else
81255: GO 81328
// if enemy then
81257: LD_VAR 0 5
81261: IFFALSE 81328
// begin if GetWeapon ( i ) = ru_time_lapser then
81263: LD_VAR 0 4
81267: PPUSH
81268: CALL_OW 264
81272: PUSH
81273: LD_INT 49
81275: EQUAL
81276: IFFALSE 81304
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
81278: LD_VAR 0 4
81282: PPUSH
81283: LD_VAR 0 5
81287: PPUSH
81288: LD_VAR 0 4
81292: PPUSH
81293: CALL_OW 74
81297: PPUSH
81298: CALL_OW 112
81302: GO 81328
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
81304: LD_VAR 0 4
81308: PPUSH
81309: LD_VAR 0 5
81313: PPUSH
81314: LD_VAR 0 4
81318: PPUSH
81319: CALL_OW 74
81323: PPUSH
81324: CALL 82257 0 2
// end ; end ;
81328: GO 80908
81330: POP
81331: POP
// end ;
81332: LD_VAR 0 3
81336: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
81337: LD_INT 0
81339: PPUSH
81340: PPUSH
81341: PPUSH
// if not unit or IsInUnit ( unit ) then
81342: LD_VAR 0 1
81346: NOT
81347: PUSH
81348: LD_VAR 0 1
81352: PPUSH
81353: CALL_OW 310
81357: OR
81358: IFFALSE 81362
// exit ;
81360: GO 81453
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
81362: LD_ADDR_VAR 0 4
81366: PUSH
81367: LD_VAR 0 1
81371: PPUSH
81372: CALL_OW 250
81376: PPUSH
81377: LD_VAR 0 2
81381: PPUSH
81382: LD_INT 1
81384: PPUSH
81385: CALL_OW 272
81389: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
81390: LD_ADDR_VAR 0 5
81394: PUSH
81395: LD_VAR 0 1
81399: PPUSH
81400: CALL_OW 251
81404: PPUSH
81405: LD_VAR 0 2
81409: PPUSH
81410: LD_INT 1
81412: PPUSH
81413: CALL_OW 273
81417: ST_TO_ADDR
// if ValidHex ( x , y ) then
81418: LD_VAR 0 4
81422: PPUSH
81423: LD_VAR 0 5
81427: PPUSH
81428: CALL_OW 488
81432: IFFALSE 81453
// ComTurnXY ( unit , x , y ) ;
81434: LD_VAR 0 1
81438: PPUSH
81439: LD_VAR 0 4
81443: PPUSH
81444: LD_VAR 0 5
81448: PPUSH
81449: CALL_OW 118
// end ;
81453: LD_VAR 0 3
81457: RET
// export function SeeUnits ( side , units ) ; var i ; begin
81458: LD_INT 0
81460: PPUSH
81461: PPUSH
// result := false ;
81462: LD_ADDR_VAR 0 3
81466: PUSH
81467: LD_INT 0
81469: ST_TO_ADDR
// if not units then
81470: LD_VAR 0 2
81474: NOT
81475: IFFALSE 81479
// exit ;
81477: GO 81524
// for i in units do
81479: LD_ADDR_VAR 0 4
81483: PUSH
81484: LD_VAR 0 2
81488: PUSH
81489: FOR_IN
81490: IFFALSE 81522
// if See ( side , i ) then
81492: LD_VAR 0 1
81496: PPUSH
81497: LD_VAR 0 4
81501: PPUSH
81502: CALL_OW 292
81506: IFFALSE 81520
// begin result := true ;
81508: LD_ADDR_VAR 0 3
81512: PUSH
81513: LD_INT 1
81515: ST_TO_ADDR
// exit ;
81516: POP
81517: POP
81518: GO 81524
// end ;
81520: GO 81489
81522: POP
81523: POP
// end ;
81524: LD_VAR 0 3
81528: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
81529: LD_INT 0
81531: PPUSH
81532: PPUSH
81533: PPUSH
81534: PPUSH
// if not unit or not points then
81535: LD_VAR 0 1
81539: NOT
81540: PUSH
81541: LD_VAR 0 2
81545: NOT
81546: OR
81547: IFFALSE 81551
// exit ;
81549: GO 81641
// dist := 99999 ;
81551: LD_ADDR_VAR 0 5
81555: PUSH
81556: LD_INT 99999
81558: ST_TO_ADDR
// for i in points do
81559: LD_ADDR_VAR 0 4
81563: PUSH
81564: LD_VAR 0 2
81568: PUSH
81569: FOR_IN
81570: IFFALSE 81639
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
81572: LD_ADDR_VAR 0 6
81576: PUSH
81577: LD_VAR 0 1
81581: PPUSH
81582: LD_VAR 0 4
81586: PUSH
81587: LD_INT 1
81589: ARRAY
81590: PPUSH
81591: LD_VAR 0 4
81595: PUSH
81596: LD_INT 2
81598: ARRAY
81599: PPUSH
81600: CALL_OW 297
81604: ST_TO_ADDR
// if tmpDist < dist then
81605: LD_VAR 0 6
81609: PUSH
81610: LD_VAR 0 5
81614: LESS
81615: IFFALSE 81637
// begin result := i ;
81617: LD_ADDR_VAR 0 3
81621: PUSH
81622: LD_VAR 0 4
81626: ST_TO_ADDR
// dist := tmpDist ;
81627: LD_ADDR_VAR 0 5
81631: PUSH
81632: LD_VAR 0 6
81636: ST_TO_ADDR
// end ; end ;
81637: GO 81569
81639: POP
81640: POP
// end ;
81641: LD_VAR 0 3
81645: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
81646: LD_INT 0
81648: PPUSH
// uc_side := side ;
81649: LD_ADDR_OWVAR 20
81653: PUSH
81654: LD_VAR 0 1
81658: ST_TO_ADDR
// uc_nation := 3 ;
81659: LD_ADDR_OWVAR 21
81663: PUSH
81664: LD_INT 3
81666: ST_TO_ADDR
// vc_chassis := 25 ;
81667: LD_ADDR_OWVAR 37
81671: PUSH
81672: LD_INT 25
81674: ST_TO_ADDR
// vc_engine := engine_siberite ;
81675: LD_ADDR_OWVAR 39
81679: PUSH
81680: LD_INT 3
81682: ST_TO_ADDR
// vc_control := control_computer ;
81683: LD_ADDR_OWVAR 38
81687: PUSH
81688: LD_INT 3
81690: ST_TO_ADDR
// vc_weapon := 59 ;
81691: LD_ADDR_OWVAR 40
81695: PUSH
81696: LD_INT 59
81698: ST_TO_ADDR
// result := CreateVehicle ;
81699: LD_ADDR_VAR 0 5
81703: PUSH
81704: CALL_OW 45
81708: ST_TO_ADDR
// SetDir ( result , d ) ;
81709: LD_VAR 0 5
81713: PPUSH
81714: LD_VAR 0 4
81718: PPUSH
81719: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
81723: LD_VAR 0 5
81727: PPUSH
81728: LD_VAR 0 2
81732: PPUSH
81733: LD_VAR 0 3
81737: PPUSH
81738: LD_INT 0
81740: PPUSH
81741: CALL_OW 48
// end ;
81745: LD_VAR 0 5
81749: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
81750: LD_INT 0
81752: PPUSH
81753: PPUSH
81754: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
81755: LD_ADDR_VAR 0 2
81759: PUSH
81760: LD_INT 0
81762: PUSH
81763: LD_INT 0
81765: PUSH
81766: LD_INT 0
81768: PUSH
81769: LD_INT 0
81771: PUSH
81772: EMPTY
81773: LIST
81774: LIST
81775: LIST
81776: LIST
81777: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
81778: LD_VAR 0 1
81782: NOT
81783: PUSH
81784: LD_VAR 0 1
81788: PPUSH
81789: CALL_OW 264
81793: PUSH
81794: LD_INT 12
81796: PUSH
81797: LD_INT 51
81799: PUSH
81800: LD_INT 32
81802: PUSH
81803: LD_INT 89
81805: PUSH
81806: EMPTY
81807: LIST
81808: LIST
81809: LIST
81810: LIST
81811: IN
81812: NOT
81813: OR
81814: IFFALSE 81818
// exit ;
81816: GO 81916
// for i := 1 to 3 do
81818: LD_ADDR_VAR 0 3
81822: PUSH
81823: DOUBLE
81824: LD_INT 1
81826: DEC
81827: ST_TO_ADDR
81828: LD_INT 3
81830: PUSH
81831: FOR_TO
81832: IFFALSE 81914
// begin tmp := GetCargo ( cargo , i ) ;
81834: LD_ADDR_VAR 0 4
81838: PUSH
81839: LD_VAR 0 1
81843: PPUSH
81844: LD_VAR 0 3
81848: PPUSH
81849: CALL_OW 289
81853: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
81854: LD_ADDR_VAR 0 2
81858: PUSH
81859: LD_VAR 0 2
81863: PPUSH
81864: LD_VAR 0 3
81868: PPUSH
81869: LD_VAR 0 4
81873: PPUSH
81874: CALL_OW 1
81878: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
81879: LD_ADDR_VAR 0 2
81883: PUSH
81884: LD_VAR 0 2
81888: PPUSH
81889: LD_INT 4
81891: PPUSH
81892: LD_VAR 0 2
81896: PUSH
81897: LD_INT 4
81899: ARRAY
81900: PUSH
81901: LD_VAR 0 4
81905: PLUS
81906: PPUSH
81907: CALL_OW 1
81911: ST_TO_ADDR
// end ;
81912: GO 81831
81914: POP
81915: POP
// end ;
81916: LD_VAR 0 2
81920: RET
// export function Length ( array ) ; begin
81921: LD_INT 0
81923: PPUSH
// result := array + 0 ;
81924: LD_ADDR_VAR 0 2
81928: PUSH
81929: LD_VAR 0 1
81933: PUSH
81934: LD_INT 0
81936: PLUS
81937: ST_TO_ADDR
// end ;
81938: LD_VAR 0 2
81942: RET
// export function PrepareArray ( array ) ; begin
81943: LD_INT 0
81945: PPUSH
// result := array diff 0 ;
81946: LD_ADDR_VAR 0 2
81950: PUSH
81951: LD_VAR 0 1
81955: PUSH
81956: LD_INT 0
81958: DIFF
81959: ST_TO_ADDR
// if not result [ 1 ] then
81960: LD_VAR 0 2
81964: PUSH
81965: LD_INT 1
81967: ARRAY
81968: NOT
81969: IFFALSE 81989
// result := Delete ( result , 1 ) ;
81971: LD_ADDR_VAR 0 2
81975: PUSH
81976: LD_VAR 0 2
81980: PPUSH
81981: LD_INT 1
81983: PPUSH
81984: CALL_OW 3
81988: ST_TO_ADDR
// end ;
81989: LD_VAR 0 2
81993: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
81994: LD_INT 0
81996: PPUSH
81997: PPUSH
81998: PPUSH
81999: PPUSH
// sibRocketRange := 25 ;
82000: LD_ADDR_VAR 0 6
82004: PUSH
82005: LD_INT 25
82007: ST_TO_ADDR
// result := false ;
82008: LD_ADDR_VAR 0 4
82012: PUSH
82013: LD_INT 0
82015: ST_TO_ADDR
// for i := 0 to 5 do
82016: LD_ADDR_VAR 0 5
82020: PUSH
82021: DOUBLE
82022: LD_INT 0
82024: DEC
82025: ST_TO_ADDR
82026: LD_INT 5
82028: PUSH
82029: FOR_TO
82030: IFFALSE 82097
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
82032: LD_VAR 0 1
82036: PPUSH
82037: LD_VAR 0 5
82041: PPUSH
82042: LD_VAR 0 6
82046: PPUSH
82047: CALL_OW 272
82051: PPUSH
82052: LD_VAR 0 2
82056: PPUSH
82057: LD_VAR 0 5
82061: PPUSH
82062: LD_VAR 0 6
82066: PPUSH
82067: CALL_OW 273
82071: PPUSH
82072: LD_VAR 0 3
82076: PPUSH
82077: CALL_OW 309
82081: IFFALSE 82095
// begin result := true ;
82083: LD_ADDR_VAR 0 4
82087: PUSH
82088: LD_INT 1
82090: ST_TO_ADDR
// exit ;
82091: POP
82092: POP
82093: GO 82099
// end ;
82095: GO 82029
82097: POP
82098: POP
// end ;
82099: LD_VAR 0 4
82103: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
82104: LD_INT 0
82106: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
82107: LD_VAR 0 1
82111: PPUSH
82112: LD_VAR 0 2
82116: PPUSH
82117: LD_INT 0
82119: PPUSH
82120: LD_INT 0
82122: PPUSH
82123: LD_INT 1
82125: PPUSH
82126: LD_INT 0
82128: PPUSH
82129: CALL_OW 587
// end ;
82133: LD_VAR 0 3
82137: RET
// export function CenterOnNow ( unit ) ; begin
82138: LD_INT 0
82140: PPUSH
// result := IsInUnit ( unit ) ;
82141: LD_ADDR_VAR 0 2
82145: PUSH
82146: LD_VAR 0 1
82150: PPUSH
82151: CALL_OW 310
82155: ST_TO_ADDR
// if not result then
82156: LD_VAR 0 2
82160: NOT
82161: IFFALSE 82173
// result := unit ;
82163: LD_ADDR_VAR 0 2
82167: PUSH
82168: LD_VAR 0 1
82172: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
82173: LD_VAR 0 1
82177: PPUSH
82178: CALL_OW 87
// end ;
82182: LD_VAR 0 2
82186: RET
// export function ComMoveHex ( unit , hex ) ; begin
82187: LD_INT 0
82189: PPUSH
// if not hex then
82190: LD_VAR 0 2
82194: NOT
82195: IFFALSE 82199
// exit ;
82197: GO 82252
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
82199: LD_VAR 0 2
82203: PUSH
82204: LD_INT 1
82206: ARRAY
82207: PPUSH
82208: LD_VAR 0 2
82212: PUSH
82213: LD_INT 2
82215: ARRAY
82216: PPUSH
82217: CALL_OW 428
82221: IFFALSE 82225
// exit ;
82223: GO 82252
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
82225: LD_VAR 0 1
82229: PPUSH
82230: LD_VAR 0 2
82234: PUSH
82235: LD_INT 1
82237: ARRAY
82238: PPUSH
82239: LD_VAR 0 2
82243: PUSH
82244: LD_INT 2
82246: ARRAY
82247: PPUSH
82248: CALL_OW 111
// end ;
82252: LD_VAR 0 3
82256: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
82257: LD_INT 0
82259: PPUSH
82260: PPUSH
82261: PPUSH
// if not unit or not enemy then
82262: LD_VAR 0 1
82266: NOT
82267: PUSH
82268: LD_VAR 0 2
82272: NOT
82273: OR
82274: IFFALSE 82278
// exit ;
82276: GO 82402
// x := GetX ( enemy ) ;
82278: LD_ADDR_VAR 0 4
82282: PUSH
82283: LD_VAR 0 2
82287: PPUSH
82288: CALL_OW 250
82292: ST_TO_ADDR
// y := GetY ( enemy ) ;
82293: LD_ADDR_VAR 0 5
82297: PUSH
82298: LD_VAR 0 2
82302: PPUSH
82303: CALL_OW 251
82307: ST_TO_ADDR
// if ValidHex ( x , y ) then
82308: LD_VAR 0 4
82312: PPUSH
82313: LD_VAR 0 5
82317: PPUSH
82318: CALL_OW 488
82322: IFFALSE 82402
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
82324: LD_VAR 0 2
82328: PPUSH
82329: CALL_OW 247
82333: PUSH
82334: LD_INT 3
82336: PUSH
82337: LD_INT 2
82339: PUSH
82340: EMPTY
82341: LIST
82342: LIST
82343: IN
82344: PUSH
82345: LD_VAR 0 1
82349: PPUSH
82350: CALL_OW 255
82354: PPUSH
82355: LD_VAR 0 2
82359: PPUSH
82360: CALL_OW 292
82364: OR
82365: IFFALSE 82383
// ComAttackUnit ( unit , enemy ) else
82367: LD_VAR 0 1
82371: PPUSH
82372: LD_VAR 0 2
82376: PPUSH
82377: CALL_OW 115
82381: GO 82402
// ComAgressiveMove ( unit , x , y ) ;
82383: LD_VAR 0 1
82387: PPUSH
82388: LD_VAR 0 4
82392: PPUSH
82393: LD_VAR 0 5
82397: PPUSH
82398: CALL_OW 114
// end ;
82402: LD_VAR 0 3
82406: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
82407: LD_INT 0
82409: PPUSH
82410: PPUSH
82411: PPUSH
// list := AreaToList ( area , 0 ) ;
82412: LD_ADDR_VAR 0 5
82416: PUSH
82417: LD_VAR 0 1
82421: PPUSH
82422: LD_INT 0
82424: PPUSH
82425: CALL_OW 517
82429: ST_TO_ADDR
// if not list then
82430: LD_VAR 0 5
82434: NOT
82435: IFFALSE 82439
// exit ;
82437: GO 82569
// if all then
82439: LD_VAR 0 2
82443: IFFALSE 82531
// begin for i := 1 to list [ 1 ] do
82445: LD_ADDR_VAR 0 4
82449: PUSH
82450: DOUBLE
82451: LD_INT 1
82453: DEC
82454: ST_TO_ADDR
82455: LD_VAR 0 5
82459: PUSH
82460: LD_INT 1
82462: ARRAY
82463: PUSH
82464: FOR_TO
82465: IFFALSE 82527
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
82467: LD_ADDR_VAR 0 3
82471: PUSH
82472: LD_VAR 0 3
82476: PPUSH
82477: LD_VAR 0 3
82481: PUSH
82482: LD_INT 1
82484: PLUS
82485: PPUSH
82486: LD_VAR 0 5
82490: PUSH
82491: LD_INT 1
82493: ARRAY
82494: PUSH
82495: LD_VAR 0 4
82499: ARRAY
82500: PUSH
82501: LD_VAR 0 5
82505: PUSH
82506: LD_INT 2
82508: ARRAY
82509: PUSH
82510: LD_VAR 0 4
82514: ARRAY
82515: PUSH
82516: EMPTY
82517: LIST
82518: LIST
82519: PPUSH
82520: CALL_OW 1
82524: ST_TO_ADDR
82525: GO 82464
82527: POP
82528: POP
// exit ;
82529: GO 82569
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
82531: LD_ADDR_VAR 0 3
82535: PUSH
82536: LD_VAR 0 5
82540: PUSH
82541: LD_INT 1
82543: ARRAY
82544: PUSH
82545: LD_INT 1
82547: ARRAY
82548: PUSH
82549: LD_VAR 0 5
82553: PUSH
82554: LD_INT 2
82556: ARRAY
82557: PUSH
82558: LD_INT 1
82560: ARRAY
82561: PUSH
82562: EMPTY
82563: LIST
82564: LIST
82565: PUSH
82566: EMPTY
82567: LIST
82568: ST_TO_ADDR
// end ;
82569: LD_VAR 0 3
82573: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
82574: LD_INT 0
82576: PPUSH
82577: PPUSH
// list := AreaToList ( area , 0 ) ;
82578: LD_ADDR_VAR 0 4
82582: PUSH
82583: LD_VAR 0 1
82587: PPUSH
82588: LD_INT 0
82590: PPUSH
82591: CALL_OW 517
82595: ST_TO_ADDR
// if not list then
82596: LD_VAR 0 4
82600: NOT
82601: IFFALSE 82605
// exit ;
82603: GO 82646
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
82605: LD_ADDR_VAR 0 3
82609: PUSH
82610: LD_VAR 0 4
82614: PUSH
82615: LD_INT 1
82617: ARRAY
82618: PUSH
82619: LD_INT 1
82621: ARRAY
82622: PUSH
82623: LD_VAR 0 4
82627: PUSH
82628: LD_INT 2
82630: ARRAY
82631: PUSH
82632: LD_INT 1
82634: ARRAY
82635: PUSH
82636: LD_VAR 0 2
82640: PUSH
82641: EMPTY
82642: LIST
82643: LIST
82644: LIST
82645: ST_TO_ADDR
// end ;
82646: LD_VAR 0 3
82650: RET
// export function First ( array ) ; begin
82651: LD_INT 0
82653: PPUSH
// if not array then
82654: LD_VAR 0 1
82658: NOT
82659: IFFALSE 82663
// exit ;
82661: GO 82677
// result := array [ 1 ] ;
82663: LD_ADDR_VAR 0 2
82667: PUSH
82668: LD_VAR 0 1
82672: PUSH
82673: LD_INT 1
82675: ARRAY
82676: ST_TO_ADDR
// end ;
82677: LD_VAR 0 2
82681: RET
// export function Last ( array ) ; begin
82682: LD_INT 0
82684: PPUSH
// if not array then
82685: LD_VAR 0 1
82689: NOT
82690: IFFALSE 82694
// exit ;
82692: GO 82710
// result := array [ array ] ;
82694: LD_ADDR_VAR 0 2
82698: PUSH
82699: LD_VAR 0 1
82703: PUSH
82704: LD_VAR 0 1
82708: ARRAY
82709: ST_TO_ADDR
// end ;
82710: LD_VAR 0 2
82714: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
82715: LD_INT 0
82717: PPUSH
82718: PPUSH
// result := [ ] ;
82719: LD_ADDR_VAR 0 5
82723: PUSH
82724: EMPTY
82725: ST_TO_ADDR
// if not array then
82726: LD_VAR 0 1
82730: NOT
82731: IFFALSE 82735
// exit ;
82733: GO 82847
// for i := 1 to array do
82735: LD_ADDR_VAR 0 6
82739: PUSH
82740: DOUBLE
82741: LD_INT 1
82743: DEC
82744: ST_TO_ADDR
82745: LD_VAR 0 1
82749: PUSH
82750: FOR_TO
82751: IFFALSE 82845
// if array [ i ] [ index ] = value then
82753: LD_VAR 0 1
82757: PUSH
82758: LD_VAR 0 6
82762: ARRAY
82763: PUSH
82764: LD_VAR 0 2
82768: ARRAY
82769: PUSH
82770: LD_VAR 0 3
82774: EQUAL
82775: IFFALSE 82843
// begin if indexColumn then
82777: LD_VAR 0 4
82781: IFFALSE 82817
// result := Join ( result , array [ i ] [ indexColumn ] ) else
82783: LD_ADDR_VAR 0 5
82787: PUSH
82788: LD_VAR 0 5
82792: PPUSH
82793: LD_VAR 0 1
82797: PUSH
82798: LD_VAR 0 6
82802: ARRAY
82803: PUSH
82804: LD_VAR 0 4
82808: ARRAY
82809: PPUSH
82810: CALL 78185 0 2
82814: ST_TO_ADDR
82815: GO 82843
// result := Join ( result , array [ i ] ) ;
82817: LD_ADDR_VAR 0 5
82821: PUSH
82822: LD_VAR 0 5
82826: PPUSH
82827: LD_VAR 0 1
82831: PUSH
82832: LD_VAR 0 6
82836: ARRAY
82837: PPUSH
82838: CALL 78185 0 2
82842: ST_TO_ADDR
// end ;
82843: GO 82750
82845: POP
82846: POP
// end ;
82847: LD_VAR 0 5
82851: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
82852: LD_INT 0
82854: PPUSH
82855: PPUSH
82856: PPUSH
// if btype = b_depot then
82857: LD_VAR 0 2
82861: PUSH
82862: LD_INT 0
82864: EQUAL
82865: IFFALSE 82877
// begin result := true ;
82867: LD_ADDR_VAR 0 3
82871: PUSH
82872: LD_INT 1
82874: ST_TO_ADDR
// exit ;
82875: GO 82993
// end ; pom := GetBase ( depot ) ;
82877: LD_ADDR_VAR 0 4
82881: PUSH
82882: LD_VAR 0 1
82886: PPUSH
82887: CALL_OW 274
82891: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
82892: LD_ADDR_VAR 0 5
82896: PUSH
82897: LD_VAR 0 2
82901: PPUSH
82902: LD_VAR 0 1
82906: PPUSH
82907: CALL_OW 248
82911: PPUSH
82912: CALL_OW 450
82916: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
82917: LD_ADDR_VAR 0 3
82921: PUSH
82922: LD_VAR 0 4
82926: PPUSH
82927: LD_INT 1
82929: PPUSH
82930: CALL_OW 275
82934: PUSH
82935: LD_VAR 0 5
82939: PUSH
82940: LD_INT 1
82942: ARRAY
82943: GREATEREQUAL
82944: PUSH
82945: LD_VAR 0 4
82949: PPUSH
82950: LD_INT 2
82952: PPUSH
82953: CALL_OW 275
82957: PUSH
82958: LD_VAR 0 5
82962: PUSH
82963: LD_INT 2
82965: ARRAY
82966: GREATEREQUAL
82967: AND
82968: PUSH
82969: LD_VAR 0 4
82973: PPUSH
82974: LD_INT 3
82976: PPUSH
82977: CALL_OW 275
82981: PUSH
82982: LD_VAR 0 5
82986: PUSH
82987: LD_INT 3
82989: ARRAY
82990: GREATEREQUAL
82991: AND
82992: ST_TO_ADDR
// end ;
82993: LD_VAR 0 3
82997: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
82998: LD_INT 0
83000: PPUSH
// if not vehicles or not parkingPoint then
83001: LD_VAR 0 1
83005: NOT
83006: PUSH
83007: LD_VAR 0 2
83011: NOT
83012: OR
83013: IFFALSE 83017
// exit ;
83015: GO 83115
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
83017: LD_ADDR_VAR 0 1
83021: PUSH
83022: LD_VAR 0 1
83026: PPUSH
83027: LD_INT 50
83029: PUSH
83030: EMPTY
83031: LIST
83032: PUSH
83033: LD_INT 3
83035: PUSH
83036: LD_INT 92
83038: PUSH
83039: LD_VAR 0 2
83043: PUSH
83044: LD_INT 1
83046: ARRAY
83047: PUSH
83048: LD_VAR 0 2
83052: PUSH
83053: LD_INT 2
83055: ARRAY
83056: PUSH
83057: LD_INT 8
83059: PUSH
83060: EMPTY
83061: LIST
83062: LIST
83063: LIST
83064: LIST
83065: PUSH
83066: EMPTY
83067: LIST
83068: LIST
83069: PUSH
83070: EMPTY
83071: LIST
83072: LIST
83073: PPUSH
83074: CALL_OW 72
83078: ST_TO_ADDR
// if not vehicles then
83079: LD_VAR 0 1
83083: NOT
83084: IFFALSE 83088
// exit ;
83086: GO 83115
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
83088: LD_VAR 0 1
83092: PPUSH
83093: LD_VAR 0 2
83097: PUSH
83098: LD_INT 1
83100: ARRAY
83101: PPUSH
83102: LD_VAR 0 2
83106: PUSH
83107: LD_INT 2
83109: ARRAY
83110: PPUSH
83111: CALL_OW 111
// end ;
83115: LD_VAR 0 3
83119: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
83120: LD_INT 0
83122: PPUSH
83123: PPUSH
83124: PPUSH
// if not side or not area then
83125: LD_VAR 0 1
83129: NOT
83130: PUSH
83131: LD_VAR 0 2
83135: NOT
83136: OR
83137: IFFALSE 83141
// exit ;
83139: GO 83260
// tmp := AreaToList ( area , 0 ) ;
83141: LD_ADDR_VAR 0 5
83145: PUSH
83146: LD_VAR 0 2
83150: PPUSH
83151: LD_INT 0
83153: PPUSH
83154: CALL_OW 517
83158: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
83159: LD_ADDR_VAR 0 4
83163: PUSH
83164: DOUBLE
83165: LD_INT 1
83167: DEC
83168: ST_TO_ADDR
83169: LD_VAR 0 5
83173: PUSH
83174: LD_INT 1
83176: ARRAY
83177: PUSH
83178: FOR_TO
83179: IFFALSE 83258
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
83181: LD_VAR 0 5
83185: PUSH
83186: LD_INT 1
83188: ARRAY
83189: PUSH
83190: LD_VAR 0 4
83194: ARRAY
83195: PPUSH
83196: LD_VAR 0 5
83200: PUSH
83201: LD_INT 2
83203: ARRAY
83204: PUSH
83205: LD_VAR 0 4
83209: ARRAY
83210: PPUSH
83211: CALL_OW 351
83215: IFFALSE 83256
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
83217: LD_VAR 0 5
83221: PUSH
83222: LD_INT 1
83224: ARRAY
83225: PUSH
83226: LD_VAR 0 4
83230: ARRAY
83231: PPUSH
83232: LD_VAR 0 5
83236: PUSH
83237: LD_INT 2
83239: ARRAY
83240: PUSH
83241: LD_VAR 0 4
83245: ARRAY
83246: PPUSH
83247: LD_VAR 0 1
83251: PPUSH
83252: CALL_OW 244
// end ;
83256: GO 83178
83258: POP
83259: POP
// end ; end_of_file
83260: LD_VAR 0 3
83264: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
83265: LD_VAR 0 1
83269: PUSH
83270: LD_INT 200
83272: DOUBLE
83273: GREATEREQUAL
83274: IFFALSE 83282
83276: LD_INT 299
83278: DOUBLE
83279: LESSEQUAL
83280: IFTRUE 83284
83282: GO 83316
83284: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
83285: LD_VAR 0 1
83289: PPUSH
83290: LD_VAR 0 2
83294: PPUSH
83295: LD_VAR 0 3
83299: PPUSH
83300: LD_VAR 0 4
83304: PPUSH
83305: LD_VAR 0 5
83309: PPUSH
83310: CALL 35976 0 5
83314: GO 83393
83316: LD_INT 300
83318: DOUBLE
83319: GREATEREQUAL
83320: IFFALSE 83328
83322: LD_INT 399
83324: DOUBLE
83325: LESSEQUAL
83326: IFTRUE 83330
83328: GO 83392
83330: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
83331: LD_VAR 0 1
83335: PPUSH
83336: LD_VAR 0 2
83340: PPUSH
83341: LD_VAR 0 3
83345: PPUSH
83346: LD_VAR 0 4
83350: PPUSH
83351: LD_VAR 0 5
83355: PPUSH
83356: LD_VAR 0 6
83360: PPUSH
83361: LD_VAR 0 7
83365: PPUSH
83366: LD_VAR 0 8
83370: PPUSH
83371: LD_VAR 0 9
83375: PPUSH
83376: LD_VAR 0 10
83380: PPUSH
83381: LD_VAR 0 11
83385: PPUSH
83386: CALL 32301 0 11
83390: GO 83393
83392: POP
// end ;
83393: PPOPN 11
83395: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
83396: LD_VAR 0 1
83400: PPUSH
83401: LD_VAR 0 2
83405: PPUSH
83406: LD_VAR 0 3
83410: PPUSH
83411: LD_VAR 0 4
83415: PPUSH
83416: LD_VAR 0 5
83420: PPUSH
83421: CALL 35712 0 5
// end ; end_of_file
83425: PPOPN 5
83427: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
83428: LD_VAR 0 1
83432: PPUSH
83433: LD_VAR 0 2
83437: PPUSH
83438: LD_VAR 0 3
83442: PPUSH
83443: LD_VAR 0 4
83447: PPUSH
83448: LD_VAR 0 5
83452: PPUSH
83453: LD_VAR 0 6
83457: PPUSH
83458: CALL 19953 0 6
// end ;
83462: PPOPN 6
83464: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
83465: LD_INT 0
83467: PPUSH
// begin if not units then
83468: LD_VAR 0 1
83472: NOT
83473: IFFALSE 83477
// exit ;
83475: GO 83477
// end ;
83477: PPOPN 7
83479: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
83480: CALL 19840 0 0
// end ;
83484: PPOPN 1
83486: END
